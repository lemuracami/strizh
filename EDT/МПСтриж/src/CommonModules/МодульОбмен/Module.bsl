Функция ВыполнитьОбмен_Партнеры(Прокси, ID)
	Фабрика = Прокси.ФабрикаXDTO;
	ПартнерыТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfPartners");
	НомераТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ArrayOfString").Получить("ArrayOfString");
	
	МасРег = Прокси.getPartners(ID);
	Зап = МасРег.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасПартнеров = Фабрика.ПрочитатьXML(Чт, ПартнерыТипМ);
	
	МассивКодов = Фабрика.Создать(НомераТипМ);
	
	
	Для Сч = 0 По МасПартнеров.partner.Количество() - 1 Цикл
		Партнер = МасПартнеров.partner[Сч];
		Най = Справочники.ИнтернетМагазины.НайтиПоКоду(Партнер.id);
		Если Най.Пустая() Тогда
			Най = Справочники.ИнтернетМагазины.СоздатьЭлемент();
		Иначе
			Най = Най.получитьОбъект();
		КонецЕсли;	
		
		Най.Код = Партнер.id;
		Най.Наименование = Партнер.name;
		Най.НаименованиеПолное = Партнер.fullName;
		Най.ИНН = Партнер.inn;
		Най.ЭтоАгрегатор = Партнер.isAggregator;
		Най.НаименованиеЛатиницей = Партнер.latinName;
		Най.НастройкиAssistПоТерминалам.Очистить();
		Для СчСтрПарт = 0 По Партнер.settingsAssistForOrganization.Количество() - 1 Цикл   
			ТекНастр = Партнер.settingsAssistForOrganization[СчСтрПарт];
			НовНастр = Най.НастройкиAssistПоТерминалам.Добавить();
			НовНастр.РегионДоставки = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТекНастр.terminalCode); 
			НовНастр.MerchantId = ТекНастр.MerchantId; 
			НовНастр.login = ТекНастр.login;  
			НовНастр.password = ТекНастр.password;
		КонецЦикла;	
		
		Най.Записать();
		МассивКодов.string.Добавить(Партнер.id);
	КонецЦикла;
	
	Отв = Прокси.deleteRegistration(ID, "Справочник.Контрагенты", МассивКодов);	
	
	Возврат Истина;
КонецФункции


Функция ВыполнитьОбмен_РегиональныеТерминалы(Прокси, ID)
	Фабрика = Прокси.ФабрикаXDTO;	
	РегионТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/regionsMA").Получить("region");
	РегионыТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/regionsMA").Получить("arrayOfRegions");
	СтрокиТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ArrayOfString").Получить("ArrayOfString");
	
	
	МасРег = Прокси.getRegions(ID);
	Зап = МасРег.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасРег = Фабрика.ПрочитатьXML(Чт, РегионыТипМ);
	МассивКодов = Фабрика.Создать(СтрокиТипМ);
	
	
	Для Сч = 0 По МасРег.region.Количество() - 1 Цикл
		Рег = МасРег.region[Сч];
		Най = Справочники.РегиональныеТерминалы.НайтиПоКоду(Рег.Code);
		Если Най.Пустая() Тогда
			Най = Справочники.РегиональныеТерминалы.СоздатьЭлемент();
			Най.Код = Рег.code;
			Най.Наименование = Рег.name;
			
			Най.НачальнаяШиротаЗоны = Рег.minLat;
			Най.НачальнаяДолготаЗоны = Рег.minLong;
			Най.КонечнаяШиротаЗоны = Рег.maxLat;
			Най.КонечнаяДолготаЗоны = Рег.maxLong;
			
			Най.ксАдресСервера = Рег.cashServerAdress;
			Най.ксИмяПользователя = Рег.cashUserName;
			Най.ксПарольПользователя = Рег.cashUserPassword;
			Най.НомерТелефонаСтаршегоЛогиста = Рег.phoneNumberSeniorLogist;
			
			Если Рег.checkPrintingMode = 0 Тогда
				Най.РежимПечатиЧековРМЭкипажа = Перечисления.ВариантыПечатиЧековРМЭкипажа.НеПечататьЧек;
			ИначеЕсли Рег.checkPrintingMode = 1 Тогда	
				Най.РежимПечатиЧековРМЭкипажа = Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ;
			ИначеЕсли Рег.checkPrintingMode = 2 Тогда	
				Най.РежимПечатиЧековРМЭкипажа = Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаМобильномПринтере;
			КонецеСли;
			
			Най.НачалоИнтервалаДоставкиВОбласти = Рег.startOfDeliveryIntervalInTheArea;
			Най.ОкончаниеИнтервалаДоставкиВОбласти = Рег.endOfDeliveryIntervalInTheArea;
			
			Най.ШиротаЦентраЗоны = Рег.latCenterZone;
			Най.ДолготаЦентраЗоны = Рег.longCenterZone;			
			
			Най.Записать();
		Иначе
			Най = Най.получитьОбъект();
			Най.Код = Рег.code;
			Най.Наименование = Рег.name;
			
			Най.НачальнаяШиротаЗоны = Рег.minLat;
			Най.НачальнаяДолготаЗоны = Рег.minLong;
			Най.КонечнаяШиротаЗоны = Рег.maxLat;
			Най.КонечнаяДолготаЗоны = Рег.maxLong;
			
			Най.ксАдресСервера = Рег.cashServerAdress;
			Най.ксИмяПользователя = Рег.cashUserName;
			Най.ксПарольПользователя = Рег.cashUserPassword;
			Най.НомерТелефонаСтаршегоЛогиста = Рег.phoneNumberSeniorLogist;
			
			Если Рег.checkPrintingMode = 0 Тогда
				Най.РежимПечатиЧековРМЭкипажа = Перечисления.ВариантыПечатиЧековРМЭкипажа.НеПечататьЧек;
			ИначеЕсли Рег.checkPrintingMode = 1 Тогда	
				Най.РежимПечатиЧековРМЭкипажа = Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ;
			ИначеЕсли Рег.checkPrintingMode = 2 Тогда	
				Най.РежимПечатиЧековРМЭкипажа = Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаМобильномПринтере;
			КонецеСли;
			
			Най.НачалоИнтервалаДоставкиВОбласти = Рег.startOfDeliveryIntervalInTheArea;
			Най.ОкончаниеИнтервалаДоставкиВОбласти = Рег.endOfDeliveryIntervalInTheArea;
			
			Най.ШиротаЦентраЗоны = Рег.latCenterZone;
			Най.ДолготаЦентраЗоны = Рег.longCenterZone;						
			
			Най.Записать();
		КонецеСли;
		МассивКодов.string.Добавить(Рег.code);
	КонецЦикла;
	
	Отв = Прокси.getRegionsDeleteRegistration(МассивКодов, ID);	
КонецФункции	

Функция ВыполнитьОбмен_ПричиныОтказаПереноса(Прокси, ID)
	Фабрика = Прокси.ФабрикаXDTO;
	МасПричин = Прокси.GetReasonsOfCancellationExtension_v2(ID);
	Зап = МасПричин.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	ПричиныОтказаМассивТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellationExtension").Получить("ArrayOfReasonsOfCancellation");
	МасПр = Фабрика.ПрочитатьXML(Чт, ПричиныОтказаМассивТип);
	НомераТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ArrayOfString").Получить("ArrayOfString");
	МассивКодов = Фабрика.Создать(НомераТипМ);
	
	ПричинаОтказаТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellationExtension").Получить("ReasonOfCancellation");
	
	Для Сч = 0 По МасПр.ReasonOfCancellation.Количество() - 1 Цикл
		Причина = МасПр.ReasonOfCancellation[Сч];
		Най = Справочники.ПричиныОтказаПереноса.НайтиПоКоду(Причина.ID);
		Если Най.Пустая() Тогда
			Най = Справочники.ПричиныОтказаПереноса.СоздатьЭлемент();
			Най.Код = Причина.ID;
			Най.Наименование = Причина.Name;
			Най.ЗапретВыбора = Причина.DeniedForMA;
			Най.Забор = Причина.TakingGoods;
			Най.Записать();
		Иначе
			Най = Най.получитьОбъект();
			Най.Код = Причина.ID;
			Най.Наименование = Причина.Name;
			Най.ЗапретВыбора = Причина.DeniedForMA;
			Най.Забор = Причина.TakingGoods;
			Най.Записать();
		КонецеСли;	
		
		МассивКодов.string.Добавить(Причина.id);
		
		Наб = РегистрыСведений.ПричиныОтказаПереносаПоРезультатамДоставки.СоздатьНаборЗаписей();
		Наб.Отбор.ПричинаОтказаПереноса.Установить(Най.Ссылка);
		Для СчСтр = 0 По Причина.TableAvailabilityOfReasonsNotPerform.Количество() - 1 Цикл
			СтрокаПричины = Причина.TableAvailabilityOfReasonsNotPerform[СчСтр];
			Если СтрокаПричины.Availability Тогда
				Нов = Наб.Добавить();
				Нов.РезультатДоставки = Справочники.РезультатыДоставки.НайтиПоКоду(СтрокаПричины.ReasonNotPerformID);
				Нов.ПричинаОтказаПереноса = Най.Ссылка;
				Если СтрокаПричины.TypeOfOrder = 1 Тогда
					Нов.ТипЗаказа = Перечисления.ТипЗаказа.Доставка;
				Иначе	
					Нов.ТипЗаказа = Перечисления.ТипЗаказа.Забор;
				КонецеСли;	
			КонецеСли;	
		КонецЦикла;	
		Наб.Записать();
	КонецЦикла;	
	Если МассивКодов.string.Количество() > 0 Тогда
		Отв = Прокси.deleteRegistration(ID, "Справочник.ПричиныОтказаПереноса", МассивКодов);	
	КонецеСли;	
	
КонецФункции	

Функция ВыполнитьОбмен_ТипыПрикрепленныхДокументов(Прокси, ID)
	Фабрика = Прокси.ФабрикаXDTO;
	ТипыДокументовТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfTypesOfAttachedDocs");
	НомераТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ArrayOfString").Получить("ArrayOfString");
	
	МасТиповДокументов = Прокси.getTypesOfAttachedDocs(ID);
	
	МассивКодов = Фабрика.Создать(НомераТипМ);
	
	
	Для Сч = 0 По МасТиповДокументов.typeOfAttachedDoc.Количество() - 1 Цикл
		ТипДокумента = МасТиповДокументов.typeOfAttachedDoc[Сч];
		Най = Справочники.ТипыПрикрепленныхДокументов.НайтиПоКоду(ТипДокумента.id);
		Если Най.Пустая() Тогда
			Най = Справочники.ТипыПрикрепленныхДокументов.СоздатьЭлемент();
		Иначе
			Най = Най.получитьОбъект();
		КонецЕсли;	
		
		Най.Код = ТипДокумента.id;
		Най.Наименование = ТипДокумента.name;
		Най.ДоступенВыборВМП = ТипДокумента.enabledForMA;
		Най.ПрефиксИмениФайла = ТипДокумента.filePrefix;
		Най.КачествоФото = ТипДокумента.photoQuality;
		Най.ЧерноБелоеФото = ТипДокумента.blackAndWhitePhoto;
		Най.ОтметкаНаФотоснимке = ТипДокумента.photoMark;
		
		Най.ДоступностьПоТипамЗаказов.Очистить();
		
		Для СчСтр = 0 По ТипДокумента.availabilityByOrderTypes.availabilityByOrderType.Количество() - 1 Цикл
			СтрокаТипаЗаказа = ТипДокумента.availabilityByOrderTypes.availabilityByOrderType[СчСтр];
			Нов = Най.ДоступностьПоТипамЗаказов.Добавить();
			Нов.ТипЗаказа = Перечисления.ТипЗаказа[СтрокаТипаЗаказа.orderType];
			Нов.Доступен = СтрокаТипаЗаказа.available;
		КонецЦикла;
		
		Най.Записать();
		МассивКодов.string.Добавить(ТипДокумента.id);
	КонецЦикла;
	
	Отв = Прокси.deleteRegistration(ID, "Справочник.ТипыПрикрепленныхДокументов", МассивКодов);	
	
	Возврат Истина;
КонецФункции


Функция ВыполнитьОбмен_ШаблоныSMS(Прокси, ID)
	Фабрика = Прокси.ФабрикаXDTO;
	ШаблоныТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfSMSTemplates");
	НомераТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ArrayOfString").Получить("ArrayOfString");
	
	МасРег = Прокси.getSMSTemplates(ID);
	Зап = МасРег.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасШаблонов = Фабрика.ПрочитатьXML(Чт, ШаблоныТипМ);
	
	МассивКодов = Фабрика.Создать(НомераТипМ);
	
	
	Для Сч = 0 По МасШаблонов.SMSTemplate.Количество() - 1 Цикл
		Шаблон = МасШаблонов.SMSTemplate[Сч];
		Най = Справочники.ШаблоныСМСРассылок.НайтиПоКоду(Шаблон.id);
		Если Най.Пустая() Тогда
			Най = Справочники.ШаблоныСМСРассылок.СоздатьЭлемент();
		Иначе
			Най = Най.получитьОбъект();
		КонецЕсли;	
		
		Най.Код = Шаблон.id;
		Най.Наименование = Шаблон.name;
		Най.ТекстШаблона = Шаблон.text;
		Най.Отправитель = Шаблон.sender;
		Если ЗначениеЗаполнено(Шаблон.declination) Тогда
			Най.СклонениеИсполнителяДоставки = Перечисления.ПадежиСклонения[Шаблон.declination];
		КонецеСли;	
		
		Най.Записать();
		МассивКодов.string.Добавить(Шаблон.id);
	КонецЦикла;
	
	Отв = Прокси.deleteRegistration(ID, "Справочник.ШаблоныСМСРассылок", МассивКодов);	
	
	Возврат Истина;
КонецФункции

Функция ВыполнитьОбмен_ЛогРассылкиSMS(Прокси, ID)
	//журнал лога рассылки СМС
	Пл = Константы.УзелПланаОбмена.Получить();
	Фабрика = Прокси.ФабрикаXDTO;
	МассивЗаписейЛогаТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfSMSSendingLogRecords");
	ЗаписьЛогаТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("SMSSendingLogRecord");
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	РассылкаСМС.Период КАК date,
	            |	РассылкаСМС.Рейс.Номер КАК tripId,
	            |	РассылкаСМС.Заказ.Номер КАК orderId,
	            |	РассылкаСМС.Шаблон.Код КАК SMSTempateId,
	            |	РассылкаСМС.Транспорт.Код КАК carId,
	            |	РассылкаСМС.ДатаОтправки КАК dateSending,
	            |	РассылкаСМС.ДатаПолучения КАК dateReceiving,
	            |	РассылкаСМС.ТекстСМС КАК text,
	            |	РассылкаСМС.Телефон КАК phoneNumber,
	            |	РассылкаСМС.ТекстОшибки КАК errorText,
	            |	РассылкаСМС.ПроизошлаОшибка КАК isError
	            |ИЗ
	            |	РегистрСведений.РассылкаСМС.Изменения КАК РассылкаСМСИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РассылкаСМС КАК РассылкаСМС
	            |		ПО РассылкаСМСИзменения.Период = РассылкаСМС.Период
	            |ГДЕ
	            |	РассылкаСМСИзменения.Узел = &Узел";
	
	Зап.УстановитьПараметр("Узел", Пл.Ссылка);
	
	Рез = Зап.Выполнить().Выгрузить();
	
	МассивЗаписейЛога = Фабрика.Создать(МассивЗаписейЛогаТип);
	
	Для Каждого Тек Из Рез Цикл
		ЗаписьЛога = Фабрика.Создать(ЗаписьЛогаТип);
		ЗаполнитьЗначенияСвойств(ЗаписьЛога, Тек);
		МассивЗаписейЛога.SMSSendingLogRecord.Добавить(ЗаписьЛога);
	КонецЦикла;	
	
	Если Рез.Количество() <> 0 Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		Фабрика.ЗаписатьXML(ЗаписьXML, МассивЗаписейЛога);
		Результат = ЗаписьXML.Закрыть();	
		
		Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		
		Результат = Прокси.UnloadCallsRecords(ID, Хр);
		Если Результат = 1 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Пл.Ссылка, Метаданные.РегистрыСведений.РассылкаСМС);
		КонецеСли;
	КонецеСли;
	
КонецФункции	

Функция ВыполнитьОбмен_ПараметрыМА(Прокси, ID)
	Фабрика= Прокси.ФабрикаXDTO;
	
	ПараметрыТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Parameters").Получить("ArrayOfParameters");
	ПараметрТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Parameters").Получить("Parameter");
	
	// передача параметров МП в ЦБ
	МассивПараметров	 = Фабрика.Создать(ПараметрыТипМ);
	ВерсияКонфигурации = Метаданные.Версия;
	Если Не ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
		ВерсияКонфигурации = "1.0.0.1";
	КонецеСли;
	
	ОписаниеВерсии = ОбщегоНазначения.ПолучитьОписаниеВерсииИзМакетаВерсий(ВерсияКонфигурации);
	
	Параметр = Фабрика.Создать(ПараметрТип);
	Параметр.Key = "MA_VersionDescr";
	Параметр.Value = ОписаниеВерсии.Описание;
	МассивПараметров.Parameter.Добавить(Параметр);
	
	Параметр = Фабрика.Создать(ПараметрТип);
	Параметр.Key = "MA_VersionFinal";
	Параметр.Value = ОписаниеВерсии.ЭтоРелизнаяВерсия;
	МассивПараметров.Parameter.Добавить(Параметр);
	
	
	Параметр = Фабрика.Создать(ПараметрТип);
	Параметр.Key = "MA_Version";
	Параметр.Value = ВерсияКонфигурации;
	МассивПараметров.Parameter.Добавить(Параметр);
	
	
	Параметр = Фабрика.Создать(ПараметрТип);
	Параметр.Key = "routeMapVersion";
	Параметр.Value = Константы.ВерсияСтраницыМаршрутизации.Получить();
	МассивПараметров.Parameter.Добавить(Параметр);
	
	
	//а когда транспорт еще не привязан?
	Параметр = Фабрика.Создать(ПараметрТип);
	Параметр.Key = "car_id";
	Параметр.Value = Константы.Транспорт.Получить().Код;
	МассивПараметров.Parameter.Добавить(Параметр);
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	Фабрика.ЗаписатьXML(ЗаписьXML, МассивПараметров);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

	Прокси.SetParametersMA(ID, Хр);
	// передача параметров МП в ЦБ окончание
	
	
	Прокси.setPushNotificationSubscriberId(ID, Константы.IDПодписчикаPushУведомлений.Получить());
КонецФункции	

Функция ВыполнитьОбмен_Рейсы(Прокси, carID)
	Если Не ЗначениеЗаполнено(carID) Тогда
		Возврат Ложь;
	КонецеСли;	
	
	Фабрика = Прокси.ФабрикаXDTO;
	МассивРейсовТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfTrips");
	
	МасРег = Прокси.getTrips(carID);
	Зап = МасРег.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасРейсов = Фабрика.ПрочитатьXML(Чт, МассивРейсовТипМ);
	
	
	Для Сч = 0 По МасРейсов.trip.Количество() - 1 Цикл
		Рейс = МасРейсов.trip[Сч];
		
		
		НайРейс = Документы.Рейс.НайтиПоРеквизиту("НомерРейса", Рейс.id);
		
		
		Если НайРейс.Пустая() Тогда
			НайРейс = Документы.Рейс.СоздатьДокумент();
		Иначе
			НайРейс = НайРейс.ПолучитьОбъект();
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(НайРейс.Дата) Тогда
			НайРейс.Дата = ТекущаяДата();
		КонецеСли;	
		НайРейс.НомерРейса = Рейс.id;
		НайРейс.ДатаРейса = Рейс.dateTrip;
		НайРейс.ДатаДокумента = Рейс.dateDocument;
		НайРейс.Транспорт = Справочники.Транспорт.НайтиПоКоду(Рейс.carId);
		НайРейс.Водитель = Справочники.Водители.НайтиПоКоду(Рейс.driverId);
		НайРейс.Экспедитор = Справочники.Экспедиторы.НайтиПоКоду(Рейс.forwarderId);
		
		НайРейс.НомерПалеты = Рейс.paletNumber;
		НайРейс.ПометкаУдаления = Рейс.deletionMark;
		НайРейс.ТипИнформированияПолучателейЗаказов = Перечисления.ТипыИнформированияПолучателейЗаказов[Рейс.customerInformationMode];
		НайРейс.НомерТелефона = Рейс.phone;
		НайРейс.ВыданТерминалAssist = Рейс.assistTerminalIssued;
		НайРейс.РаспечатанМЛ = Рейс.RPHasPrinted;
		
		
		НайРейс.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
	
	Возврат Истина;
КонецФункции

Функция ВыполнитьОбмен_Уведомления(Прокси, carID)
	Фабрика = Прокси.ФабрикаXDTO;
	УведомленияТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfDriverNotifications");
	
	МасУв = Прокси.getNotifications(carID);
	Зап = МасУв.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасУведомлений = Фабрика.ПрочитатьXML(Чт, УведомленияТипМ);
	
	
	
	Для Сч = 0 По МасУведомлений.driverNotification.Количество() - 1 Цикл
		Уведомление = МасУведомлений.driverNotification[Сч];
		НайТранспорт = Справочники.Транспорт.НайтиПоКоду(carID);
		Если НайТранспорт.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекВр = ТекущаяДата();
		
		Наб = РегистрыСведений.УведомленияЭкипажу.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.Транспорт.Установить(НайТранспорт);
		
		Нов = Наб.Добавить();
		Нов.Транспорт = НайТранспорт;
		Нов.Период = ТекВр;
		Нов.ДатаУведомления = Уведомление.date;
		Если Уведомление.type = 1 Тогда 
			Нов.ТипУведомления = Перечисления.ТипыУведомленийЭкипажу.НастройкаТелефона;
		КонецеСли;	
		
		
		Наб.Записать();
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВыполнитьОбмен_Фотографии(Прокси, ID)
	Пл = Константы.УзелПланаОбмена.Получить();
	МассивФайловТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfAttachedDoc");
	ФайлТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("attachedDoc");
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ПрикрепленныеФайлыИзменения.Заказ.Номер КАК orderId,
	            |	ПрикрепленныеФайлыИзменения.Данные.ТипДокумента.Код КАК typeDoc,
	            |	ПрикрепленныеФайлыИзменения.Данные.РасширениеДокумента КАК nameExt,
	            |	ПрикрепленныеФайлыИзменения.Данные.ДатаСоздания КАК createDate,
	            |	ПрикрепленныеФайлыИзменения.Данные.Наименование КАК name,
	            |	ПрикрепленныеФайлыИзменения.Данные.Код КАК id,
	            |	ПрикрепленныеФайлыИзменения.Данные.Ссылка КАК Данные,
	            |	ПрикрепленныеФайлы.Заказ.ТипЗаказа КАК ТипЗаказа
	            |ИЗ
	            |	РегистрСведений.ПрикрепленныеФайлы.Изменения КАК ПрикрепленныеФайлыИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	            |		ПО ПрикрепленныеФайлыИзменения.Период = ПрикрепленныеФайлы.Период
	            |ГДЕ
	            |	ПрикрепленныеФайлыИзменения.Узел = &Узел";
	
	Зап.УстановитьПараметр("Узел", Пл.Ссылка);
	
	Рез = Зап.Выполнить().Выгрузить();
	
	МассивФайлов = Прокси.ФабрикаXDTO.Создать(МассивФайловТип);
	
	Для Каждого Тек Из Рез Цикл
		Файл = Прокси.ФабрикаXDTO.Создать(ФайлТип);
		
		
		ЗаполнитьЗначенияСвойств(Файл, Тек);
		Файл.data = Тек.Данные.Данные;
		
		ИндексЗначенияПеречисления = Перечисления.ТипЗаказа.Индекс(Тек.ТипЗаказа);
		Файл.orderType = Метаданные.Перечисления.ТипЗаказа.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		МассивФайлов.attachedDocs.Добавить(Файл);
	КонецЦикла;	
	
	
	
	Если Рез.Количество() <> 0 Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивФайлов);
		Результат = ЗаписьXML.Закрыть();	
		
		Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		
		Результат = Прокси.unloadAttachedDocs(ID, Хр);
		Если Результат = 1 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Пл.Ссылка, Метаданные.РегистрыСведений.ПрикрепленныеФайлы);
		КонецеСли;
	КонецеСли;

	
КонецФункции	

	


Функция ПрогрузитьИзЦБЗапросНаПерекидкуЗаказов(НомерЗапроса) Экспорт
	
КонецФункции	

Функция ВыгрузитьДанныеМП(Прокси, Пл, ID) экспорт
	Фабрика = Прокси.ФабрикаXDTO;
	СчМакс = 0;
	
	МассивЗаказовТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/OrderAct").Получить("ArrayOfOrderActs");
	ЗаказТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/OrderAct").Получить("OrderAct");
	ЗаказСтрокаТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/OrderAct").Получить("OrderActRow");
	НоменклатураТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Nomenklature").Получить("Nomenklature");
	
	Выб = Документы.ДанныеЗаказаВодителя.Выбрать(НачалоДня(ТекущаяДата() - 86400), КонецДня(ТекущаяДата()));
	МассивЗаказов = Фабрика.Создать(МассивЗаказовТип);
	
	ВодительТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/CarMans").Получить("CarMan");
	Водитель = Фабрика.Создать(ВодительТип);
	Водитель.ID = СокрЛП(Константы.Водитель.Получить().Код);
	Водитель.Name = СокрЛП(Константы.Водитель.Получить().Наименование);
	Водитель.Password = "";	
	
	ТранспортТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Cars").Получить("Car");
	Транспорт = Фабрика.Создать(ТранспортТип);
	Транспорт.Code = СокрЛП(Константы.Транспорт.Получить().Код);
	Транспорт.Name = СокрЛП(Константы.Транспорт.Получить().Наименование);
	Транспорт.Number = "";	
	Транспорт.Password = "";	
	
	МасПл = Новый Массив;
	
	
	
	Пока Выб.Следующий() Цикл
		//Попытка
		//	ПроверкаНомера = Выб.Реализация.Номер;
		//Исключение
		//	Продолжить;
		//КонецПопытки;	
		
		Если Выб.Статус = Перечисления.СтатусыЗаказаВодитель.Удалить Тогда
			МасПл.Добавить(Выб.Ссылка);
			Продолжить;
		КонецеСли;	
		
		Если Не Пл.Пустая() Тогда
			если Не ПланыОбмена.ИзменениеЗарегистрировано(Пл, Выб.Ссылка) Тогда
				Продолжить;
			Иначе
				МасПл.Добавить(Выб.Ссылка);
			КонецеСли;	
		КонецеСли;	
		
		Заказ = Фабрика.Создать(ЗаказТип);
		Заказ.Number = СокрЛП(Выб.Реализация.Номер);
		Заказ.NumberDok = СокрЛП(Выб.Номер);
		Заказ.Date = Выб.Дата;
		Если Выб.Статус = Перечисления.СтатусыЗаказаВодитель.Доставлен Тогда
			Заказ.Status = 1;
		ИначеЕсли Выб.Статус = Перечисления.СтатусыЗаказаВодитель.Перенос Тогда	
			Заказ.Status = 2;
		ИначеЕсли Выб.Статус = Перечисления.СтатусыЗаказаВодитель.ОтказБезЗаезда Тогда	
			Заказ.Status = 3;
		ИначеЕсли Выб.Статус = Перечисления.СтатусыЗаказаВодитель.ОтказСЗаездом Тогда	
			Заказ.Status = 4;
		ИначеЕсли Выб.Статус = Перечисления.СтатусыЗаказаВодитель.ПереносСЗаездом Тогда	
			Заказ.Status = 5;
		ИначеЕсли Выб.Статус = Перечисления.СтатусыЗаказаВодитель.ОтсутствуетНаСкладе Тогда	
			Заказ.Status = 6;
		ИначеЕсли Выб.Статус = Перечисления.СтатусыЗаказаВодитель.НеДоставлен Тогда	
			Заказ.Status = 7;			
		Иначе
			Заказ.Status = 0;
		КонецеСли;	
		Если Выб.ПричинаОтказаПереноса.Пустая() Тогда
			Заказ.ReasonFail = 0;
		Иначе	
			Заказ.ReasonFail = Число(Выб.ПричинаОтказаПереноса.Код);
		КонецеСли;
		
		Заказ.tripId = СокрЛП(Выб.Реализация.ИдентификаторРейса);
		
		Если Выб.РезультатДоставки.Пустая() Тогда
			Заказ.ResultOfDelivery = "";
		Иначе	
			Заказ.ResultOfDelivery = СокрЛП(Выб.РезультатДоставки.Код);
		КонецеСли;
		
		Попытка
			Если Выб.ВыбранныйТипОплаты.Пустая() Тогда
				Заказ.TypeOfPay = 0;
			Иначе	
				Заказ.TypeOfPay = Число(Выб.ВыбранныйТипОплаты.Код);
			КонецеСли;
		Исключение
			
		КонецПопытки;
		
		Заказ.DateReason = Выб.ДатаПереноса;
		
		//Заказ.Summa = Выб.СуммаДоставка + Выб.СуммаНал;
		Заказ.Summa = Выб.СуммаНал;
		
		Заказ.countRequestPrintingCheck = Выб.КоличествоПовторовЗапросаСостоянияЧека;
		Заказ.dateOfSendingDataOfCheck = Выб.ДатаОтправкиЧекаНаПечать;
		Заказ.dateOfPrintingCheck = Выб.ДатаПечатиЧеков;
		Заказ.idCheck = Выб.Чек.ИдентификаторЧекаНаСервере;
		Заказ.idReturnCheck = Выб.ВозвратныйЧек.ИдентификаторЧекаНаСервере;
		Заказ.errorFormingCheck = Выб.ОшибкаФормированияЧекаНаСервере;
		
		Попытка
			Если Выб.ТипОплаты.Пустая() Тогда
				Заказ.TypeOfPayCheck = 0;
			Иначе	
				Заказ.TypeOfPayCheck = Число(Выб.ТипОплаты.Код);
			КонецеСли;
		Исключение
		КонецПопытки;
		
		Если СокрЛП(Выб.АдресОтправкиЧека) = "checks@strizh-logistic.ru" Тогда
			Заказ.emailRecepient = "";
		Иначе
			Заказ.emailRecepient = "checks@strizh-logistic.ru";
		КонецеСли;	
		
		Если Не Выб.ВидПодъема.Пустая() Тогда
			Если Выб.ВидПодъема = Перечисления.ВидыПодъемовВодителя.Лифт Тогда
				Заказ.TypeOfLifting = 1;
			ИначеЕсли Выб.ВидПодъема = Перечисления.ВидыПодъемовВодителя.РучнойПодъем Тогда	
				Заказ.TypeOfLifting = 2;
			ИначеЕсли Выб.ВидПодъема = Перечисления.ВидыПодъемовВодителя.БезПодъема Тогда	
				Заказ.TypeOfLifting = 3;				
			КонецеСли;
			Заказ.FloorOfLifting = Выб.Этаж;
			
			///подъем доп
			Заказ.liftingBreak = Выб.КодПодъемногоБрейка;
			Заказ.liftingCalcSum = Выб.СтоимостьПодъемаРассчитанная;
			Заказ.liftingApprovedSum = Выб.СтоимостьПодъемаПодтвержденная;
			Заказ.liftingWeight = Выб.ВесЗаказа;
			Заказ.liftingCountOfWalkersPerFloor = Выб.КоличествоХодокНаЭтаж;
			Заказ.liftingWeightUploaded = Выб.Реализация.ВесЗаказа;
			///подъем доп
		КонецеСли;
		
		Заказ.customerIdentificationCode = Выб.КодИдентификацииКлиента;
		Заказ.statusSetWithoutCustomerIdentificationCode = Выб.СтатусУстановленБезКИК;
		
		Если Выб.Реализация.ТипЗаказа = Перечисления.ТипЗаказа.Забор Тогда
			Заказ.IsTakingGoods = Истина; 
			Заказ.PiecesOfFreight = Выб.КоличествоМест;
			Если Не Выб.ОбъемныйБрейк.Пустая() Тогда
				Заказ.VolumeBreak = СокрЛП(Выб.ОбъемныйБрейк.Код);
			КонецеСли;	
			Заказ.PaletCount = Выб.КоличествоПалет;
		КонецеСли;	
		
		Для Каждого Тек Из Выб.ДоставленныеТовары Цикл
			НовСтрока = Фабрика.Создать(ЗаказСтрокаТип);
			НовСтрока.Count = Тек.КоличествоДоставлено;
			НовНом = Фабрика.Создать(НоменклатураТип);
			НовНом.Code = СокрЛП(Тек.Номенклатура.Код);
			НовНом.Name = "";
			НовНом.Artikul = "";
			НовСтрока.Nomenklature = НоВНом;
			НовСтрока.markingCode = Тек.КодМаркировки;
			Заказ.Tovars.Добавить(НовСтрока);
		КонецЦикла;	
		
		МассивЗаказов.OrderAct.Добавить(Заказ);
		СчМакс = СчМакс + 1;
		Если СчМакс = 10 Тогда
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Фабрика.ЗаписатьXML(ЗаписьXML, МассивЗаказов);
			Результат = ЗаписьXML.Закрыть();	
			
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			Если Константы.ВариантПривязкиТелефона.Получить().Пустая() Или Константы.ВариантПривязкиТелефона.Получить() = Перечисления.ВариантыПривязкиТелефона.КВодителю Тогда
				М = Прокси.SetOrderStatus(Хр, Водитель);
			Иначе
				//М = Прокси.SetOrderStatusByCars(Хр, Транспорт);
				М = Прокси.SetOrderStatusByCarsAndID(Хр, Транспорт, ID);
			КонецеСли;
			
			Если Не Пл.Пустая() и М = 1 Тогда
				Для СчИзм = 0 По МасПл.Количество() - 1 Цикл
					ПланыОбмена.УдалитьРегистрациюИзменений(Пл, МасПл[СчИзм]);
				конецЦикла;	
			КонецеСли;	
			МасПл.Очистить();
			
			
			МассивЗаказов = Фабрика.Создать(МассивЗаказовТип);
			СчМакс = 0;
		КонецеСли;	
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	Фабрика.ЗаписатьXML(ЗаписьXML, МассивЗаказов);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	Если Константы.ВариантПривязкиТелефона.Получить().Пустая() Или Константы.ВариантПривязкиТелефона.Получить() = Перечисления.ВариантыПривязкиТелефона.КВодителю Тогда
		М = Прокси.SetOrderStatus(Хр, Водитель);
		ДанныеАвторизации = Прокси.GetDataOfAuth(Водитель.ID, 1);
	Иначе
		//М = Прокси.SetOrderStatusByCars(Хр, Транспорт);	
		М = Прокси.SetOrderStatusByCarsAndID(Хр, Транспорт, ID);
		ДанныеАвторизации = Прокси.GetDataOfAuth(Транспорт.Code, 2);		
	КонецеСли;	
	
	Если Не Пл.Пустая() И М = 1 Тогда
		Для СчИзм = 0 По МасПл.Количество() - 1 Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Пл, МасПл[СчИзм]);
		конецЦикла;	
	КонецеСли;	
	МасПл.Очистить();	
	
	//устаревшее
	//Константы.ТелефонЛогиста.Установить(Прокси.GetPhoneOfSeniorOfLogicMan());
	//устаревшее
	Константы.ПарольАдмина.Установить(ДанныеАвторизации.PasswordOfAdmin);
	Константы.ПарольПользователя.Установить(ДанныеАвторизации.PasswordOfUser);
	Константы.ИмяПользователя.Установить(ДанныеАвторизации.NameOfUser);	
КонецФункции	

&НаСервере
Процедура ВыполнитьОбменНаСервере() Экспорт  //http://192.168.5.249:8010  http://192.168.1.64:8099/STRIZH/  http://192.168.1.64:8099/STRIZH http://192.168.5.249:8010/logist
	//Попытка
	//	Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера0.Получить()) + "/ws/ServiceMobile.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,10);
	//	Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1Cmobile", "ServiceMobile", "ServiceMobileSoap");
	//Исключение
	//	Попытка
	//		Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера.Получить()) + "/ws/ServiceMobile.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,10);
	//		Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1Cmobile", "ServiceMobile", "ServiceMobileSoap");
	//	Исключение
	//		Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера2.Получить()) + "/ws/ServiceMobile.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокРЛП(Константы.ПарольПользователя.Получить()),,10);
	//		Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1Cmobile", "ServiceMobile", "ServiceMobileSoap");
	//	КонецПопытки;
	//КонецПопытки;
	
	ОбщееСоединениеHTTP = "";
	Прокси = ПолучитьПрокси();
	
	Попытка
	
	//Прокси.Пользователь = СокрЛП(Константы.ИмяПользователя.Получить());
	//Прокси.Пароль = СокрЛП(Константы.ПарольПользователя.Получить());
	
	
	
	Фабрика = Прокси.ФабрикаXDTO;
	ВодительТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/CarMans").Получить("CarMan");
	ТранспортТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Cars").Получить("Car");
	МагазинТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Cars").Получить("Shop");
	
	ВодительТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/CarMans").Получить("ArrayOfCarMans");
	ТранспортТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Cars").Получить("ArrayOfCars");
	МагазиныТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Shop").Получить("ArrayOfShop");
	ПричиныТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Reason").Получить("ArrayOfReason");
	ТарифыТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/tariffForMA").Получить("arrayOfTariffs");
	СтрокиТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ArrayOfString").Получить("ArrayOfString");
	
	
	ОрганизацияТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("organization");
	ОрганизацииТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfOrganization");
	
	ПараметрыТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Parameters").Получить("ArrayOfParameters");
	ПараметрТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Parameters").Получить("Parameter");
	
	МассивЗТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Order").Получить("ArrayOfOrders");
	МассивЗаборТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/OrderTakingGoods").Получить("ArrayOfOrders");
	
	
	ЭкспедиторТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("forwarder");
	ЭкспедиторТипМ = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfForwarder");
	
	
	КонстантаТранспорт = Константы.Транспорт.Получить();
	КонстантаВодитель = Константы.Водитель.Получить();
	
	
	ID = Константы.ИдентификаторТелефона.Получить();
	
	Константы.АвторизацияСВыборомТранспорта.Установить(Прокси.getTransportSelectionMode());
	
	
	
	
	
	
	Мас = Неопределено;
	Если Константы.ВариантПривязкиТелефона.Получить().Пустая() Или Константы.ВариантПривязкиТелефона.Получить() = Перечисления.ВариантыПривязкиТелефона.КВодителю Тогда
		Если Не КонстантаВодитель.Пустая() Тогда
			Мас = Прокси.GetOrders(ТекущаяДата(), КонстантаВодитель.Код);
			Зап = Мас.Получить();
			Если Не Зап = Неопределено Тогда
				Чт = Новый ЧтениеXML();
				Чт.УстановитьСтроку(Зап);
				Мас = Фабрика.ПрочитатьXML(Чт, МассивЗТип);
			Иначе
				Мас = Неопределено;
			КонецеСли;	
		КонецеСли;	
	Иначе
		Если Не КонстантаТранспорт.Пустая() Тогда
			Мас = Прокси.GetOrdersByCars(ТекущаяДата(), КонстантаТранспорт.Код);   //ТекущаяДата()     Дата(2018, 04, 15, 1,1,1)
			Зап = Мас.Получить();
			Если Не Зап = Неопределено Тогда
				Чт = Новый ЧтениеXML();
				Чт.УстановитьСтроку(Зап);
				Мас = Фабрика.ПрочитатьXML(Чт, МассивЗТип);
			Иначе
				Мас = Неопределено;
			КонецеСли;	
		КонецеСли;	
	КонецеСли;	
	
	// инициализация перехода версии на терминалы
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	РегиональныеТерминалы.Ссылка КАК Ссылка
	            |ИЗ
	            |	Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы";
	РезЗап = Зап.Выполнить();
	Если РезЗап.Пустой() Тогда
		Рез = Прокси.registratedCars(ID);	
	КонецеСли;	
	// инициализация перехода версии на терминалы
	
	ВыполнитьОбмен_РегиональныеТерминалы(Прокси, ID);
	
	
	РезОбменаПартнеры = ВыполнитьОбмен_Партнеры(Прокси, ID);
	ВыполнитьОбмен_ШаблоныSMS(Прокси, ID);
	
	ВыполнитьОбмен_Уведомления(Прокси, КонстантаТранспорт.Код);
	
	ВыполнитьОбмен_ТипыПрикрепленныхДокументов(Прокси, ID);
	
	ВыполнитьОбмен_Фотографии(Прокси, ID);
	
	
	//======== опять обмен http===================================переносим выше с 832
	
	
	
	
	Наб = РегистрыСведений.МассивАдресовДляОбменаСМП.СоздатьНаборЗаписей();
	МассивАдресов = Прокси.getServerAdresses();
	Для Каждого Тек Из МассивАдресов.serverAdress Цикл
		Терм = Справочники.РегиональныеТерминалы.НайтиПоКоду(Тек.regionCode);
		Нов = Наб.Добавить();
		Нов.Терминал = Терм;
		Нов.Адрес = Тек.serverAddress;
		Нов.Приоритет = Тек.priority;
	КонецЦикла;	

	Наб.Записать();  
	//обновляем прокси
	Прокси = ПолучитьПрокси();
	//обновляем прокси
	//======== опять обмен http===================================переносим выше с 929	
	
	
	МодульОбмен_http.ВыполнитьОбмен_ПоставщикиТоваров(ОбщееСоединениеHTTP);
	
	МодульОбмен_http.ВыполнитьОбмен_КалендариДоставок(ОбщееСоединениеHTTP);
	
	МасПарам = Прокси.GetParameters(Константы.Транспорт.Получить().Код);
	Зап = МасПарам.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасПарам = Фабрика.ПрочитатьXML(Чт, ПараметрыТипМ);
	
	АвтоЛогин = Ложь;
	
	Для СчПарам = 0 По МасПарам.Parameter.Количество() - 1 Цикл
		ТекПарам = МасПарам.Parameter[СчПарам];
		Если ТекПарам.Key = "remoteClosing" Тогда
			Если ТекПарам.Value = "0" Тогда
				Константы.ИспользоватьУдаленноеЗакрытие.Установить(Ложь);
			ИначеЕсли ТекПарам.Value = "1" Тогда	
				Константы.ИспользоватьУдаленноеЗакрытие.Установить(Истина);
			КонецеСли;
		КонецЕсли;
		
		Если ТекПарам.Key = "periodCheckingOfTimeInterval" Тогда
			Константы.ИнтервалПроверкиОкончанияИнтервалаДоставки.Установить(Число(ТекПарам.Value));
		КонецЕсли;
		
		Если ТекПарам.Key = "depthOfIntervalCheckingOfTimeInterval" Тогда
			Константы.ГлубинаПросмотраИнтервалаВМинутах.Установить(Число(ТекПарам.Value));
		КонецЕсли;
		
		Если ТекПарам.Key = "numberPalete" Тогда
			Константы.НомерПалеты.Установить(Число(ТекПарам.Value));
		КонецЕсли;
		
		Если ТекПарам.Key = "autoLogin" Тогда
			Константы.Автологин.Установить(Число(ТекПарам.Value));
			Автологин = Булево(Число(ТекПарам.Value));
		КонецЕсли;
		
		Если ТекПарам.Key = "periodAutoExchange" Тогда
			Константы.ИнтервалОбмена.Установить(Число(ТекПарам.Value));
		КонецЕсли;
		
		Если ТекПарам.Key = "http_Exchange" Тогда
			Если Число(ТекПарам.Value) = 1 Тогда
				Константы.ОбменЧерезHTTPСервис.Установить(Истина);
			Иначе
				Константы.ОбменЧерезHTTPСервис.Установить(Ложь);
			КонецеСли;	
		КонецЕсли;
		
		Если ТекПарам.Key = "depthOfIntervalAutoLogin" Тогда
			ЗначениеПараметра = Число(ТекПарам.Value);
			Если АвтоЛогин И ЗначениеПараметра = 0 Тогда
				ЗначениеПараметра = 10;
			КонецеСли;	
			Константы.ПериодХраненияПароля.Установить(ЗначениеПараметра);
		КонецЕсли;
		
		
		Если ТекПарам.Key = "KeyRaifQPS" Тогда
			Константы.СекретныйКлючСБПРайффайзен.Установить(ТекПарам.Value);
		КонецЕсли;
		Если ТекПарам.Key = "merchantIdRaifQPS" Тогда
			Константы.merchantIdСБПРайффайзен.Установить(ТекПарам.Value);
		КонецЕсли;
		Если ТекПарам.Key = "intervalRequestQPS" Тогда
			ЗначениеПараметра = Число(ТекПарам.Value);
			Константы.ИнтервалОпросаСостоянияОплатыСБП.Установить(ЗначениеПараметра);
		КонецЕсли;
		Если ТекПарам.Key = "usingQPS" Тогда
			Если Число(ТекПарам.Value) = 1 Тогда
				Константы.ИспользоватьОплатуСБП.Установить(Истина);
			Иначе
				Константы.ИспользоватьОплатуСБП.Установить(Ложь);
			КонецеСли;	
		КонецЕсли;
		Если ТекПарам.Key = "routeMapVersion" Тогда
			Если СокрЛП(ТекПарам.Value) <> "" Тогда
				ТекВерсия = СокрЛП(Константы.ВерсияСтраницыМаршрутизации.Получить());
				Если ТекВерсия <> ТекПарам.Value Тогда
					МодульОбмен_http.ВыполнитьОбмен_ПолучитьСодержимоеСтраницыМаршрутизации();
				КонецЕсли;	
			КонецеСли;	
		КонецЕсли;
		Если ТекПарам.Key = "useYandexRouteQueryAfterBuildingRouteOnMap" Тогда
			Если Число(ТекПарам.Value) = 1 Тогда
				Константы.ЗапрашиватьЯндексМаршрутизациюПослеПостроенияМаршрута.Установить(Истина);
			Иначе
				Константы.ЗапрашиватьЯндексМаршрутизациюПослеПостроенияМаршрута.Установить(Ложь);
			КонецеСли;	
		КонецЕсли;
	КонецЦикла;	
	
	ВыполнитьОбмен_ПараметрыМА(Прокси, ID);
	
	СчМакс = 0;
	
	

	
	
	//очистка организаций, созданных в не сервиса
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Организации.Ссылка КАК Орг
	            |ИЗ
	            |	Справочник.Организации КАК Организации
	            |ГДЕ
	            |	Организации.ЗагруженоВСервисе = ЛОЖЬ
	            |	И Организации.ПометкаУдаления = ЛОЖЬ";
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Орг = Выб.орг.ПолучитьОбъект();
		Орг.ПометкаУдаления = Истина;
		Орг.УстановитьНовыйКод("OLD");
		Орг.Записать();
	КонецЦикла;	
	//очистка организаций, созданных в не сервиса окончание

	
	//организации
	МасРег = Прокси.getOrganizations(ID);
	Зап = МасРег.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасОрг = Фабрика.ПрочитатьXML(Чт, ОрганизацииТипМ);
	МассивКодов = Фабрика.Создать(СтрокиТипМ);
	
	
	Для Сч = 0 По МасОрг.organization.Количество() - 1 Цикл
		Орг = МасОрг.organization[Сч];
		Най = Справочники.Организации.НайтиПоКоду(Орг.id);
		//Най = Справочники.Организации.НайтиПоРеквизиту("ИНН", Орг.inn);
		Если Най.Пустая() Тогда
			Най = Справочники.Организации.СоздатьЭлемент();
		Иначе
			Най = Най.получитьОбъект();
		КонецеСли;	
		
		Най.Код = Орг.id;
		Най.Наименование = Орг.name;
		
		Най.НаименованиеПолное = Орг.nameFull;
		Най.ИНН = Орг.inn;
		Най.КПП = Орг.kpp;
		Най.Адрес = Орг.address;
		Най.РасчетныйСчетСБП = Орг.bankAccountQPS;
		Най.ЗагруженоВСервисе = Истина;
		Най.assist_merchantId = Орг.assist_merchantId;
		Най.assist_login = Орг.assist_login;
		Най.assist_password = Орг.assist_password;
		Най.НастройкиAssistПоТерминалам.Очистить();
		Для СчСтрОрг = 0 По Орг.settingsAssistForOrganization.Количество() - 1 Цикл   
			ТекНастр = Орг.settingsAssistForOrganization[СчСтрОрг];
			НовНастр = Най.НастройкиAssistПоТерминалам.Добавить();
			НовНастр.РегионДоставки = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТекНастр.terminalCode); 
			НовНастр.MerchantId = ТекНастр.MerchantId; 
			НовНастр.login = ТекНастр.login;  
			НовНастр.password = ТекНастр.password;
		КонецЦикла;	
		Най.Записать();
		МассивКодов.string.Добавить(Орг.id);
	КонецЦикла;
	
	Отв = Прокси.getOrganizationsDeleteRegistration(МассивКодов, ID);	
	//организации окончание
	
	
	
	МасВод = Прокси.GetCarMansForID(ID);
	Зап = МасВод.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасВод = Фабрика.ПрочитатьXML(Чт, ВодительТипМ);
	
	Для Сч = 0 По МасВод.CarMan.Количество() - 1 Цикл
		Вод = МасВод.CarMan[Сч];
		Най = Справочники.Водители.НайтиПоКоду(Вод.ID);
		Если Най.Пустая() Тогда
			Най = Справочники.Водители.СоздатьЭлемент();
			Най.Код = Вод.ID;
			Най.Наименование = Вод.Name;
			Най.ИмяЛатиницей = Вод.latinName;
			Най.Записать();
		Иначе
			Най = Най.получитьОбъект();
			Най.Код = Вод.ID;
			Най.Наименование = Вод.Name;
			Най.ИмяЛатиницей = Вод.latinName;
			Най.Записать();
		КонецеСли;	
		Если Константы.ВариантПривязкиТелефона.Получить().Пустая() Или Константы.ВариантПривязкиТелефона.Получить() = Перечисления.ВариантыПривязкиТелефона.КВодителю Тогда
			Если Не Константы.Водитель.Получить().Пустая() Тогда
				Если СокрЛП(Константы.Водитель.Получить().Код) = СокрЛП(Най.Код) Тогда
					Константы.Пароль.Установить(Вод.Password);
				КонецеСли;	
			КонецеСли;	
		КонецеСли;
	КонецЦикла;
	
	
	МассивКодов = Фабрика.Создать(СтрокиТипМ);
	МасЭкс = Прокси.getForwarders(ID);
	Зап = МасЭкс.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасЭкс = Фабрика.ПрочитатьXML(Чт, ЭкспедиторТипМ);
	
	Для Сч = 0 По МасЭкс.forwarder.Количество() - 1 Цикл
		Экс = МасЭкс.forwarder[Сч];
		Най = Справочники.Экспедиторы.НайтиПоКоду(Экс.ID);
		Если Най.Пустая() Тогда
			Най = Справочники.Экспедиторы.СоздатьЭлемент();
			Най.Код = Экс.ID;
			Най.Наименование = Экс.Name;
			Най.ИмяЛатиницей = Экс.latinName;
			Най.Записать();
		Иначе
			Най = Най.получитьОбъект();
			Най.Код = Экс.ID;
			Най.Наименование = Экс.Name;
			Най.ИмяЛатиницей = Экс.latinName;
			Най.Записать();
		КонецеСли;
		МассивКодов.string.Добавить(Экс.ID);
	КонецЦикла;
	
	Прокси.deleteRegistration(ID, "Справочник.новаЭкспедиторы", МассивКодов);

	МасТранс = Прокси.GetCarsForID(ID);
	Зап = МасТранс.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасТранс = Фабрика.ПрочитатьXML(Чт, ТранспортТипМ);
	
	Для Сч = 0 По МасТранс.Car.Количество() - 1 Цикл
		Тр = МасТранс.Car[Сч];
		Най = Справочники.Транспорт.НайтиПоКоду(Тр.Code);
		Если Най.Пустая() Тогда
			Най = Справочники.Транспорт.СоздатьЭлемент();
			Най.Код = Тр.Code;
			Най.Наименование = Тр.Name;
			Най.ГосНомер = Тр.Number;
			Най.Регион = Справочники.РегиональныеТерминалы.НайтиПоКоду(Тр.codeRegion);
			Най.ПометкаУдаления = Тр.deletionMark;
			Най.Записать();
		Иначе
			Най = Най.получитьОбъект();
			Най.Код = Тр.Code;
			Най.Наименование = Тр.Name;
			Най.ГосНомер = Тр.Number;
			Най.Регион = Справочники.РегиональныеТерминалы.НайтиПоКоду(Тр.codeRegion);
			Най.ПометкаУдаления = Тр.deletionMark;
			Най.Записать();
		КонецеСли;
		Если Константы.ВариантПривязкиТелефона.Получить() = Перечисления.ВариантыПривязкиТелефона.КТранспорту Тогда
			Если Не Константы.Транспорт.Получить().Пустая() Тогда
				Если СокрЛП(Константы.Транспорт.Получить().Код) = СокрЛП(Най.Код) Тогда
					Константы.Пароль.Установить(Тр.Password);
				КонецеСли;	
			КонецеСли;	
		КонецеСли;		
	КонецЦикла;
	
	//перенесено, было выше
	ВыполнитьОбмен_Рейсы(Прокси, КонстантаТранспорт.Код);

	
	
	МасПрич = Прокси.GetReason(ID);
	Зап = МасПрич.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасПрич = Фабрика.ПрочитатьXML(Чт, ПричиныТипМ);
	МассивКодов = Фабрика.Создать(СтрокиТипМ);
	
	Для Сч = 0 По МасПрич.Reason.Количество() - 1 Цикл
		Прич = МасПрич.Reason[Сч];
		Най = Справочники.РезультатыДоставки.НайтиПоКоду(Прич.ID);
		Если Най.Пустая() Тогда
			Най = Справочники.РезультатыДоставки.СоздатьЭлемент();
			Най.Код = Прич.ID;
			Най.Наименование = Прич.Name;
			Най.ЗапретВыбора = Прич.SelBan;
			Най.Перенос = Прич.Perenos;
			Най.Забор = Прич.TakingGoods;
			Най.Заезд = Прич.Arrival;
			Най.Отмена = Прич.Cancel;
			//Най.Доставка = Прич.Delivery;			
			Най.Записать();
		Иначе
			Най = Най.получитьОбъект();
			Най.Код = Прич.ID;
			Най.Наименование = Прич.Name;
			Най.ЗапретВыбора = Прич.SelBan;
			Най.Перенос = Прич.Perenos;
			Най.Забор = Прич.TakingGoods;
			Най.Заезд = Прич.Arrival;
			Най.Отмена = Прич.Cancel;
			//Най.Доставка = Прич.Delivery;			
			Най.Записать();
		КонецеСли;
		МассивКодов.string.Добавить(Прич.ID);
	КонецЦикла;
	
	Отв = Прокси.DelReason(МассивКодов, ID);

	
	
	//объемные брейки
	МасТарифов = Прокси.getVolumeBreake(ID);
	Зап = МасТарифов.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасТарифов = Фабрика.ПрочитатьXML(Чт, ТарифыТипМ);
	МассивКодов = Фабрика.Создать(СтрокиТипМ);
	
	Для Сч = 0 По МасТарифов.tariff.Количество() - 1 Цикл
		Тар = МасТарифов.tariff[Сч];
		Тариф = Справочники.ТарифныеСетки.НайтиПоКоду(Тар.tariffId);
		Если Тариф.Пустая() Тогда
			Тариф = Справочники.ТарифныеСетки.СоздатьЭлемент();
			Тариф.Код = Тар.tariffId;
			Тариф.Записать();
		КонецеСли;
		МассивКодов.string.Добавить(Тар.tariffId);
		
		Для СчБр = 0 По Тар.arrayOfVolumeBreakes.volumeBreake.Количество() - 1 Цикл
			Бр = Тар.arrayOfVolumeBreakes.volumeBreake[СчБр];
			Брейк = Справочники.ОбъемныеБрейки.НайтиПоКоду(Бр.code);
			Если Брейк.Пустая() Тогда
				Брейк = Справочники.ОбъемныеБрейки.СоздатьЭлемент();
				Брейк.Код = Бр.code;
				Брейк.Наименование = Бр.name;
				Брейк.Владелец = Тариф.Ссылка;
				Брейк.Записать();
			Иначе
				Брейк = Брейк.ПолучитьОбъект();
				Брейк.Код = Бр.code;
				Брейк.Наименование = Бр.name;
				Брейк.Владелец = Тариф.Ссылка;
				Брейк.Записать();
			КонецеСли;	
		КонецЦикла;	
	КонецЦикла;
	
	Отв = Прокси.getVolumeBreakeDeleteRegistration(МассивКодов, ID);
	
	
	
	МасМаг = Прокси.GetShopUnperformedReasons(ТекущаяДата(), Константы.Транспорт.Получить().Код);
	Зап = МасМаг.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МасМаг = Фабрика.ПрочитатьXML(Чт, МагазиныТипМ);
	
	Для Сч = 0 По МасМаг.Shop.Количество() - 1 Цикл
		Маг = МасМаг.Shop[Сч];
		Най = Справочники.ИнтернетМагазины.НайтиПоКоду(Маг.InternetShopID);
		Если Най.Пустая() Тогда
			Най = Справочники.ИнтернетМагазины.СоздатьЭлемент();
			Най.Код = Маг.InternetShopID;
			Най.Наименование = Маг.InternetShopName;
			Най.Записать();
		Иначе
			Най = Най.получитьОбъект();
			Най.Код = Маг.InternetShopID;
			Най.Наименование = Маг.InternetShopName;
			Най.Записать();
		КонецеСли;
		Наб = РегистрыСведений.РезультатыДоставкиПоИМ.СоздатьНаборЗаписей();
		Наб.Отбор.ИнтернетМагазин.Установить(Най.Ссылка);
		Для СчПр = 0 По Маг.TableReasonUnperformedOrder.Количество() - 1 Цикл
			Прич = Справочники.РезультатыДоставки.НайтиПоКоду(Маг.TableReasonUnperformedOrder[СчПр].ReasonUnperformedID);
			Если Не Прич.Пустая() Тогда
				Нов = Наб.Добавить();
				Нов.ИнтернетМагазин = Най.Ссылка;
				Нов.РезультатДоставки = Прич.Ссылка;
			КонецеСли;	
		КонецЦикла;	
		Наб.Записать();
	КонецЦикла;
	
	
	
	//Если Мас = Неопределено Тогда
	//	Возврат;
	//КонецЕСли;
	
	МассивЗагруженныхЗаказов = Новый Массив;
	
	
	Если Не Мас = Неопределено Тогда
		Для Сч = 0 По Мас.Order.Количество() - 1 Цикл
			Док = Мас.Order[Сч];
			Най = Документы.Заказ.НайтиПоНомеру(Док.Number);
			ПредСост = Неопределено;
			ПредРез = Неопределено;
			Если Най.Пустая() Тогда
				Нов = Документы.Заказ.СоздатьДокумент();
			Иначе
				Нов = Най.ПолучитьОбъект();
				Если НачалоДня(Нов.Дата) = НачалоДня(ТекущаяДата()) Тогда
					ПредСост = Нов.СтатусВодитель;
					ПредРез = Нов.РезультатДоставки;
				Иначе
					Нов.СтатусВодитель = Перечисления.СтатусыЗаказаВодитель.ПустаяСсылка();
					ПредРез = Справочники.РезультатыДоставки.КДоставке;
				конецеСли;	
				Нов.Товары.Очистить();
				Нов.СнятьСДоставки = Ложь;
			КонецеСли;	
			
			
			
			Нов.Номер = Док.Number;
			Нов.НомерКлиента = Док.NumberEx;
			Нов.Дата = ТекущаяДата();
			Нов.ВремяДоставки = Док.TimeOfDelivery;
			
			Попытка
				СтрДоставка = СтрЗаменить(Нов.ВремяДоставки, "по", Символы.ПС);
				
				ВремяС = Сред(СтрПолучитьСтроку(СтрДоставка, 1), 3, 5);
				ВремяПо = СокрЛП(СтрПолучитьСтроку(СтрДоставка, 2));
				
				Нов.ВремяДоставкиС = Дата(Формат(Год(ТекущаяДата()), "ЧГ=") + Формат(Месяц(ТекущаяДата()), "ЧЦ=2; ЧВН=")+Формат(День(ТекущаяДата()), "ЧЦ=2; ЧВН=") + СтрЗаменить(ВремяС, ":", "") + "00");
				Нов.ВремяДоставкиПо = Формат(Год(ТекущаяДата()), "ЧГ=") + Формат(Месяц(ТекущаяДата()), "ЧЦ=2; ЧВН=")+ Формат(День(ТекущаяДата()), "ЧЦ=2; ЧВН=") + СтрЗаменить(ВремяПо, ":", "") + "00";
			исключение
				
			КонецПопытки;
			
			//Нов.ИнтернетМагазин = Док.InternetShop;
			Нов.ИнтернетМагазин = Справочники.ИнтернетМагазины.НайтиПоКоду(Док.InternetShopID);
			Нов.Партнер = Справочники.ИнтернетМагазины.НайтиПоКоду(Док.partnerID);
			
			Нов.Адрес = Док.Address;
			Нов.Широта = Док.Shirota;
			Нов.Долгота = Док.Dolgota;
			Нов.Телефон = Док.Phone;
			Попытка
				ЕСли Док.SelectTypeOfPay = 2 Тогда
					Нов.ВыбиратьТипОплаты = Истина;
				КонецеСли;	
			Исключение
				
			КонецПопытки;	
			
			Нов.Клиент = Док.Client.Name;
			Если Док.Status = 1 Тогда
				Нов.СтатусЦентр = Перечисления.СтатусыЗаказа.НовыйЗаказ;
			ИначеЕсли Док.Status = 2 Тогда
				Нов.СтатусЦентр = Перечисления.СтатусыЗаказа.ЗаказВОбработке;
			ИначеЕсли Док.Status = 3 Тогда
				Нов.СтатусЦентр = Перечисления.СтатусыЗаказа.ЗаказЗакрыт;
			ИначеЕсли Док.Status = 4 Тогда
				Нов.СтатусЦентр = Перечисления.СтатусыЗаказа.ЗаказОтклонен;
			КонецеСли;	
			Если ПредСост <> Неопределено Тогда
				Нов.СтатусВодитель = ПредСост;
			КонецеСли;	
			
			Если ПредРез <> Неопределено Тогда
				Нов.РезультатДоставки = ПредРез;
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Нов.РезультатДоставки) Тогда
				Нов.РезультатДоставки = Справочники.РезультатыДоставки.КДоставке;
			КонецеСли;	
			
			Нов.ТипЗаказа = Перечисления.ТипЗаказа.Доставка;
			
			Нов.ТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(Число(Док.TypeOfPay));
			Если Нов.ТипОплаты = Справочники.ТипыОплат.ВКредит Тогда
				Нов.ТипОплаты = Справочники.ТипыОплат.Наличные;
			КонецеСли;
			
			Нов.ПодъемОплаченПартнером = Док.DataOfLifting;
			
			Нов.ИтогоСКлиента = Док.TotalSum;
			Нов.УчитыватьИтогоСКлиента = Док.TotalSumEnabled;
			Нов.ЧастичныйВыкупЗапрещен = Док.PartialRedemptionDisabled;
			Нов.ОбъемЗабора = Док.VolumeImport;
			
			Нов.СтавкаНДСФЗПоДоставке = Док.NDSDelivery;
			Нов.ПечататьЧек = Док.PrintCheck;
			Нов.EmailКлиента = Док.email;
			Нов.ОтправлятьЧекНаEmail = Док.SendCheckOnEmail;
			Нов.КодОрганизацииНаличнойОплаты = Док.organizationCodeCash;
			Нов.КодОрганизацииОплатыПоТерминалу = Док.organizationCodeTerminal;
			Нов.КодОрганизацииОплатыПоСБП = Док.organizationCodeQPS;
			
			///////подъем доп
			Нов.КоличествоМест = Док.countOfPlaces;
			Нов.ВесЗаказа = Док.weight;
			Если Док.methodPaymentOfLifting = 1 Тогда
				Нов.МетодыОплатыПодъемаЗаказа = Перечисления.МетодыОплатыПодъемаЗаказа.ОплачиваетПартнер;
			ИначеЕсли Док.methodPaymentOfLifting = 2 Тогда
				Нов.МетодыОплатыПодъемаЗаказа = Перечисления.МетодыОплатыПодъемаЗаказа.ОплачиваетКлиент;
			Иначе
				Нов.МетодыОплатыПодъемаЗаказа = "";
			КонецеСли;	
			///////подъем доп
			
			Нов.СменаТипаОплатыЗапрещена = Док.changeOfPaymentTypeDisabled;
			Попытка
				Если ЗначениеЗаполнено(Док.idRowOrder) Тогда
					Если Док.idRowOrder <> - 1 Тогда
						Если ЗначениеЗаполнено(Док.dateIdRowOrder) Тогда
							Если Док.dateIdRowOrder > Нов.ДатаВремяПоследнейМаршрутизацииВМП Тогда
								Нов.ПорядокСортировки = Док.idRowOrder;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Исключение
				
			КонецПопытки;
			Нов.ИдентификаторРейса = Док.tripID;
			Нов.ЗапрашиватьДанныеОТипеПодъема = Док.requestLiftType;
			Нов.Рейс = Документы.Рейс.НайтиПоРеквизиту("НомерРейса", Док.tripID);
			
			Для СчСтрок = 0 По Док.Tovars.Количество() - 1 Цикл
				НайТов = Справочники.Товары.НайтиПоКоду(Док.Tovars[СчСтрок].Nomenklature.Code);
				
				Если НайТов.Пустая() Тогда
					НовНом = Справочники.Товары.СоздатьЭлемент();
					НовНом.Код = Док.Tovars[СчСтрок].Nomenklature.Code;
					НовНом.Артикул = Док.Tovars[СчСтрок].Nomenklature.Artikul;
					НовНом.Наименование = Док.Tovars[СчСтрок].Nomenklature.Name;
					НовНом.Записать();
					НайТов = НовНом.Ссылка;
				КонецеСли;	
				
				НовСтр = Нов.Товары.Добавить();
				НовСтр.Товар = НайТов.Ссылка;
				НовСтр.Количество = Док.Tovars[СчСтрок].Count;
				НовСтр.Сумма = Док.Tovars[СчСтрок].Summa;
				//НовСтр.Цена = Окр(НовСтр.Сумма/НовСтр.Количество, 2);
				НовСтр.Цена = Док.Tovars[СчСтрок].price;
				НовСтр.СтавкаНДС = Док.Tovars[СчСтрок].NDSRow;
				НовСтр.ШтрихкодТовара = Док.Tovars[СчСтрок].barcode;
				НовСтр.КодМаркировки = Док.Tovars[СчСтрок].markingCode;
				Если ЗначениеЗаполнено(Док.Tovars[СчСтрок].idGoodSeller) Тогда
					НовСтр.ПоставщикТовара = Справочники.ПоставщикиТоваров.НайтиПоКоду(Док.Tovars[СчСтрок].idGoodSeller);
				КонецеСли;
				Если ЗначениеЗаполнено(Док.Tovars[СчСтрок].signSubjectCalc) Тогда
					НовСтр.ПризнакПредметаРасчета = Док.Tovars[СчСтрок].signSubjectCalc;
				Иначе	
					НовСтр.ПризнакПредметаРасчета = 1;
				КонецеСли;	
			КонецЦикла;	
			
			Нов.РасчетСтоимостиДоставки.Очистить();
			Для СчСтрок = 0 По Док.DeliveryCostCalculations.Количество() - 1 Цикл
				
				НовСтр = Нов.РасчетСтоимостиДоставки.Добавить();
				НовСтр.СуммаВыкупа = Док.DeliveryCostCalculations[СчСтрок].TotalCost;
				НовСтр.СтоимостьДоставки = Док.DeliveryCostCalculations[СчСтрок].DeliveryCost;
			КонецЦикла;	
			Нов.ТребуетсяОплатаСтоимостиДоставкиПриОтменеЗаказа = Док.costDeliveryRequiredIfRefusal;
			
			Нов.СуммаДоставка = Док.SumDelivery;
			Если Нов.ТипОплаты = Справочники.ТипыОплат.Наличные Тогда
				Нов.СуммаНал = Нов.СуммаДоставка + Нов.Товары.Итог("Сумма");
			КонецеСли;	
			
			Нов.ШаблонСМС = Справочники.ШаблоныСМСРассылок.НайтиПоКоду(Док.idSMSTemplate);
			
			Нов.КодЗоныТарификации = Док.tariffZoneCode;
			Нов.КодИдентификацииКлиента = Док.customerIdentificationCode;
			Нов.ТребуетсякодИдентификацииКлиента = Док.requestCustomerIdentificationCode;
			Нов.ПодписаниеИВозвратСопрДокументов = Док.signingReturnAccDoc;
			Если Нов.ТипОплаты = Справочники.ТипыОплат.Наличные Или Нов.ТипОплаты = Справочники.ТипыОплат.Терминал Тогда //задача 
				Нов.СуммаПредоплаты = Док.prepaymentAmount;
			КонецеСли;	
			
			Если ЗначениеЗаполнено(Док.calendarId) Тогда
				Нов.КалендарьДоставки = Справочники.КалендариДоставки.НайтиПоКоду(Док.calendarId);
			КонецеСли;	
			
			Нов.НеобходимаТарификацияПримерки = Док.fittingRequired;
			
			Нов.Записать(РежимЗаписиДокумента.Запись);
			МассивЗагруженныхЗаказов.Добавить(Нов.Ссылка);
		КонецЦикла;
		
		ЗапКПометке = Новый Запрос;
		ЗапКПометке.Текст = "ВЫБРАТЬ
		                    |	Заказ.Ссылка КАК Док
		                    |ИЗ
		                    |	Документ.Заказ КАК Заказ
		                    |ГДЕ
		                    |	Заказ.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                    |	И Заказ.СнятьСДоставки = ЛОЖЬ
		                    |	И НЕ Заказ.Ссылка В (&Мас)
		                    |	И Заказ.ТипЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипЗаказа.Доставка)";
		
		ЗапКПометке.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
		ЗапКПометке.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
		ЗапКПометке.УстановитьПараметр("Мас", МассивЗагруженныхЗаказов);
		РезКПометке = ЗапКПометке.Выполнить().Выгрузить();
		
		Для Каждого Тек Из РезКПометке Цикл
			ДКП = Тек.Док.ПолучитьОбъект();
			ДКП.СнятьСДоставки = Истина;
			ДКП.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецеСли;
	
	
	//------------------------заборы	
	МассивЗагруженныхЗаборов = Новый Массив;
	
	МасЗ = Прокси.GetOrdersTakingGoodsByCars(ТекущаяДата(), Константы.Транспорт.Получить().Код);
	Зап = МасЗ.Получить();
	Если Не Зап = Неопределено Тогда
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Зап);
		МасЗ = Фабрика.ПрочитатьXML(Чт, МассивЗаборТип);
	Иначе
		МасЗ = Неопределено;
	КонецеСли;	
	
	
	Если Не МасЗ = Неопределено Тогда
		Для Сч = 0 По МасЗ.OrderTakingGoods.Количество() - 1 Цикл
			Док = МасЗ.OrderTakingGoods[Сч];
			Най = Документы.Заказ.НайтиПоНомеру(Док.Number);
			ПредСост = Неопределено;
			ПредРез = Неопределено;
			Если Най.Пустая() Тогда
				Нов = Документы.Заказ.СоздатьДокумент();
			Иначе
				Нов = Най.ПолучитьОбъект();
				Если НачалоДня(Нов.Дата) = НачалоДня(ТекущаяДата()) Тогда
					ПредСост = Нов.СтатусВодитель;
					ПредРез = Нов.РезультатДоставки;
				Иначе
					Нов.СтатусВодитель = Перечисления.СтатусыЗаказаВодитель.ПустаяСсылка();
					ПредРез = Справочники.РезультатыДоставки.КДоставке;
				конецеСли;	
				Нов.Товары.Очистить();
				Нов.СнятьСДоставки = Ложь;				
			КонецеСли;	
			
			
			
			Нов.Номер = Док.Number;
			Нов.НомерКлиента = Док.NumberEx;
			Нов.Дата = ТекущаяДата();
			Нов.ВремяДоставки = Док.TimeOfDelivery;
			Попытка
				СтрДоставка = СтрЗаменить(Нов.ВремяДоставки, "по", Символы.ПС);
				
				ВремяС = Сред(СтрПолучитьСтроку(СтрДоставка, 1), 3, 5);
				ВремяПо = СокрЛП(СтрПолучитьСтроку(СтрДоставка, 2));
				
				Нов.ВремяДоставкиС = Дата(Формат(Год(ТекущаяДата()), "ЧГ=") + Формат(Месяц(ТекущаяДата()), "ЧЦ=2; ЧВН=")+Формат(День(ТекущаяДата()), "ЧЦ=2; ЧВН=") + СтрЗаменить(ВремяС, ":", "") + "00");
				Нов.ВремяДоставкиПо = Формат(Год(ТекущаяДата()), "ЧГ=") + Формат(Месяц(ТекущаяДата()), "ЧЦ=2; ЧВН=")+ Формат(День(ТекущаяДата()), "ЧЦ=2; ЧВН=") + СтрЗаменить(ВремяПо, ":", "") + "00";
			исключение
				
			КонецПопытки;
			
			
			Нов.ИнтернетМагазин = Справочники.ИнтернетМагазины.НайтиПоКоду(Док.InternetShopID);
			Нов.Адрес = Док.Address;
			Нов.Широта = Док.Shirota;
			Нов.Долгота = Док.Dolgota;
			Нов.Телефон = Док.Phone;
			Нов.Клиент = Док.Client.Name;
			Нов.ТипЗаказа = Перечисления.ТипЗаказа.Забор;
			
			Нов.ТарифнаяСетка = Справочники.ТарифныеСетки.НайтиПоКоду(Док.tariffID);
			
			Если Док.Status = 1 Тогда
				Нов.СтатусЦентр = Перечисления.СтатусыЗаказа.НовыйЗаказ;
			ИначеЕсли Док.Status = 2 Тогда
				Нов.СтатусЦентр = Перечисления.СтатусыЗаказа.ЗаказВОбработке;
			ИначеЕсли Док.Status = 3 Тогда
				Нов.СтатусЦентр = Перечисления.СтатусыЗаказа.ЗаказЗакрыт;
			ИначеЕсли Док.Status = 4 Тогда
				Нов.СтатусЦентр = Перечисления.СтатусыЗаказа.ЗаказОтклонен;
			КонецеСли;	
			Если ПредСост <> Неопределено Тогда
				Нов.СтатусВодитель = ПредСост;
			КонецеСли;	
			
			Если ПредРез <> Неопределено Тогда
				Нов.РезультатДоставки = ПредРез;
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Нов.РезультатДоставки) Тогда
				Нов.РезультатДоставки = Справочники.РезультатыДоставки.КДоставке;
			КонецеСли;	
			Попытка
				Если ЗначениеЗаполнено(Док.idRowOrder) Тогда
					Если Док.idRowOrder <> - 1 Тогда
						Если ЗначениеЗаполнено(Док.dateIdRowOrder) Тогда
							Если Док.dateIdRowOrder > Нов.ДатаВремяПоследнейМаршрутизацииВМП Тогда
								Нов.ПорядокСортировки = Док.idRowOrder;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Исключение
				
			КонецПопытки;

			Нов.ИдентификаторРейса = Док.tripID;
			
			Нов.Рейс = Документы.Рейс.НайтиПоРеквизиту("НомерРейса", Док.tripID);
			
			
			
			Нов.Записать(РежимЗаписиДокумента.Запись);
			МассивЗагруженныхЗаборов.Добавить(Нов.Ссылка);
			
		КонецЦикла;
		
		ЗапКПометке = Новый Запрос;
		ЗапКПометке.Текст = "ВЫБРАТЬ
		                    |	Заказ.Ссылка КАК Док
		                    |ИЗ
		                    |	Документ.Заказ КАК Заказ
		                    |ГДЕ
		                    |	Заказ.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                    |	И Заказ.СнятьСДоставки = ЛОЖЬ
		                    |	И НЕ Заказ.Ссылка В (&Мас)
		                    |	И Заказ.ТипЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипЗаказа.Забор)";
		
		ЗапКПометке.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
		ЗапКПометке.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
		ЗапКПометке.УстановитьПараметр("Мас", МассивЗагруженныхЗаборов);
		РезКПометке = ЗапКПометке.Выполнить().Выгрузить();
		
		Для Каждого Тек Из РезКПометке Цикл
			ДКП = Тек.Док.ПолучитьОбъект();
			ДКП.СнятьСДоставки = Истина;
			ДКП.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецеСли;
	//--------------------заборы
	
	Пл = Константы.УзелПланаОбмена.Получить();
	Если Константы.ОбменЧерезHTTPСервис.Получить() Тогда
		МодульОбмен_http.ВыгрузитьДанныеСтатусов(ОбщееСоединениеHTTP);
	Иначе	
		ВыгрузитьДанныеМП(Прокси, Пл, ID);
	КонецеСли;	
	
	//--------------------сбп
	МодульОбмен_http.ВыполнитьОбмен_ВыгрузкаТранзакцийСБП(ОбщееСоединениеHTTP);
	//--------------------сбп--
	
	//--------------------assist
	МодульОбмен_http.ВыполнитьОбмен_ВыгрузкаТранзакцийAssist(ОбщееСоединениеHTTP);
	//--------------------assist--
	
	
	//--------------------информирование
	МодульОбмен_http.ВыполнитьОбмен_ДанныхИнформированияОИзмененияхВЗаказе(ОбщееСоединениеHTTP);
	МодульОбмен_http.ВыполнитьОбмен_ДанныхИнформированияОИзмененияхВЗаказе_ОтМП(ОбщееСоединениеHTTP, "ИзменениеПросмотреноВМП");
	//--------------------информирование
	
	ВыполнитьОбмен_ПричиныОтказаПереноса(Прокси, ID);	
	
	//журнал звонков андройда
	
	МассивЗвонковТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/callsMA").Получить("arrayOfCallRecord");
	ЗвонокТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/callsMA").Получить("callRecord");
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ЖурналЗвонков.НомерТелефона КАК phoneNumber,
	|	ЖурналЗвонков.Продолжительность КАК callDuration,
	|	ЖурналЗвонков.ТипЗвонка КАК callType,
	|	ЖурналЗвонков.Период КАК date
	|ИЗ
	|	РегистрСведений.ЖурналЗвонков.Изменения КАК ЖурналЗвонковИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналЗвонков КАК ЖурналЗвонков
	|		ПО ЖурналЗвонковИзменения.Период = ЖурналЗвонков.Период
	|ГДЕ
	|	ЖурналЗвонковИзменения.Узел = &Узел";
	
	Зап.УстановитьПараметр("Узел", Пл.Ссылка);
	
	Рез = Зап.Выполнить().Выгрузить();
	
	МассивЗвонков = Фабрика.Создать(МассивЗвонковТип);
	
	Для Каждого Тек Из Рез Цикл
		Звонок = Фабрика.Создать(ЗвонокТип);
		ЗаполнитьЗначенияСвойств(Звонок, Тек);
		Звонок.NumberOrder = "";
		МассивЗвонков.callRecord.Добавить(Звонок);
	КонецЦикла;	
	
	Если Рез.Количество() <> 0 Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		Фабрика.ЗаписатьXML(ЗаписьXML, МассивЗвонков);
		Результат = ЗаписьXML.Закрыть();	
		
		Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		
		Результат = Прокси.UnloadCallsRecords(ID, Хр);
		Если Результат = 1 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Пл.Ссылка, Метаданные.РегистрыСведений.ЖурналЗвонков);
		КонецеСли;
	КонецеСли;
	
	
	//журнал звонков по заказам
	
	МассивЗвонковТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/callsMA").Получить("arrayOfCallRecord");
	ЗвонокТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/callsMA").Получить("callRecord");
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ЖурналЗвонковПоЗаказам.НомерТелефона КАК phoneNumber,
	            |	0 КАК callDuration,
	            |	0 КАК callType,
	            |	ЖурналЗвонковПоЗаказам.Период КАК date,
	            |	ЖурналЗвонковПоЗаказамИзменения.Заказ.Номер КАК NumberOrder
	            |ИЗ
	            |	РегистрСведений.ЖурналЗвонковПоЗаказам.Изменения КАК ЖурналЗвонковПоЗаказамИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналЗвонковПоЗаказам КАК ЖурналЗвонковПоЗаказам
	            |		ПО ЖурналЗвонковПоЗаказамИзменения.Период = ЖурналЗвонковПоЗаказам.Период
	            |ГДЕ
	            |	ЖурналЗвонковПоЗаказамИзменения.Узел = &Узел";
	
	Зап.УстановитьПараметр("Узел", Пл.Ссылка);
	
	Рез = Зап.Выполнить().Выгрузить();
	
	МассивЗвонков = Фабрика.Создать(МассивЗвонковТип);
	
	Для Каждого Тек Из Рез Цикл
		Звонок = Фабрика.Создать(ЗвонокТип);
		ЗаполнитьЗначенияСвойств(Звонок, Тек);
		МассивЗвонков.callRecord.Добавить(Звонок);
	КонецЦикла;	
	
	Если Рез.Количество() <> 0 Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		Фабрика.ЗаписатьXML(ЗаписьXML, МассивЗвонков);
		Результат = ЗаписьXML.Закрыть();	
		
		Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		
		Результат = Прокси.UnloadCallsRecordsForOrders(ID, Хр);
		Если Результат = 1 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Пл.Ссылка, Метаданные.РегистрыСведений.ЖурналЗвонковПоЗаказам);
		КонецеСли;
	КонецеСли;
	

	//лог обмена
	
	МассивЗаписейЛогаТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfExchangeErrorRecord");
	ЗаписьЛогаТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("exchangeErrorRecord");
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ЛогОшибокОбмена.Период КАК dateRecord,
	            |	ЛогОшибокОбмена.Ошибка КАК error,
	            |	ЛогОшибокОбмена.ВерсияМП КАК version
	            |ИЗ
	            |	РегистрСведений.ЛогОшибокОбмена.Изменения КАК ЛогОшибокОбменаИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛогОшибокОбмена КАК ЛогОшибокОбмена
	            |		ПО ЛогОшибокОбменаИзменения.Период = ЛогОшибокОбмена.Период
	            |ГДЕ
	            |	ЛогОшибокОбменаИзменения.Узел = &Узел";
	
	Зап.УстановитьПараметр("Узел", Пл.Ссылка);
	
	Рез = Зап.Выполнить().Выгрузить();
	
	МассивЗаписейЛога = Фабрика.Создать(МассивЗаписейЛогаТип);
	
	Для Каждого Тек Из Рез Цикл
		ЗаписьЛога = Фабрика.Создать(ЗаписьЛогаТип);
		ЗаполнитьЗначенияСвойств(ЗаписьЛога, Тек);
		МассивЗаписейЛога.exchangeErrorRecord.Добавить(ЗаписьЛога);
	КонецЦикла;	
	
	Если Рез.Количество() <> 0 Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		Фабрика.ЗаписатьXML(ЗаписьXML, МассивЗаписейЛога);
		Результат = ЗаписьXML.Закрыть();	
		
		Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		
		Результат = Прокси.unloadErrorLog(ID, Хр, КонстантаТранспорт.Код);
		Если Результат Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Пл.Ссылка, Метаданные.РегистрыСведений.ЛогОшибокОбмена);
		КонецеСли;
	КонецеСли;
	
	
	ВыполнитьОбмен_ЛогРассылкиSMS(Прокси, ID);
	
	
	Если Не Константы.Транспорт.Получить().Пустая() Тогда
		Константы.НомерТелефона.Установить(Прокси.GetPhoneNumber(Формат(СокрЛП(Константы.Транспорт.Получить().Код), "ЧЦ=6; ЧВН=; ЧГ=")));
	КонецеСли;
	
	//устаревшее
	//РежимПечатиЧеков = Прокси.getCheckPrintingMode();
	//Если РежимПечатиЧеков = 0 Тогда
	//	Константы.РежимПечатиЧеков.Установить(Перечисления.ВариантыПечатиЧековРМЭкипажа.НеПечататьЧек);
	//ИначеЕсли РежимПечатиЧеков = 1 Тогда	
	//	Константы.РежимПечатиЧеков.Установить(Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ);
	//ИначеЕсли РежимПечатиЧеков = 2 Тогда	
	//	Константы.РежимПечатиЧеков.Установить(Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаМобильномПринтере);
	//КонецеСли;
	//устаревшее
	
	
	Константы.ДатаПоследнегоОбмена.установить(ТекущаяДата());
Исключение
	ТО = ОписаниеОшибки();
		ОбщегоНазначения.ЗаписатьОшибкуВЛог(ТО);
	Конецпопытки;
КонецПроцедуры	

&НаСервере
Функция РассчитатьПодъем(ДанныеПодъема) Экспорт  //http://192.168.5.249:8010  http://192.168.1.64:8099/STRIZH/  http://192.168.1.64:8099/STRIZH http://192.168.5.249:8010/logist
	Прокси = ПолучитьПрокси();	
	
	Фабрика = Прокси.ФабрикаXDTO;
	ЗапросПодъемТип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("getCostOfLiftingRequest");
	
	
	ЗапросПодъем = Фабрика.Создать(ЗапросПодъемТип);
	
	Если ДанныеПодъема.ВидПодъема = Перечисления.ВидыПодъемовВодителя.Лифт Тогда
		ЗапросПодъем.typeOfLifting = 2;
	ИначеЕсли ДанныеПодъема.ВидПодъема = Перечисления.ВидыПодъемовВодителя.РучнойПодъем Тогда
		ЗапросПодъем.typeOfLifting = 1;
	КонецЕсли;	
	ЗапросПодъем.FloorOfLifting = ДанныеПодъема.Этаж;
	ЗапросПодъем.liftingCountOfWalkersPerFloor = ДанныеПодъема.КоличествоХодокНаЭтаж;
	ЗапросПодъем.orderId = ДанныеПодъема.НомерЗаказа;
	ЗапросПодъем.weight = ДанныеПодъема.ВесЗаказа;
	
	Струк = Новый Структура;	
	
	Попытка
		Ответ = Прокси.getCostOfLifting(ЗапросПодъем);
	Исключение
		Струк.Вставить("Успешно", Ложь);
		Струк.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		Возврат Струк;
	КонецПопытки;	
	
	
	
	Струк.Вставить("Успешно", Ответ.successfully);
	Если Ответ.successfully Тогда
		Струк.Вставить("СтоимостьПодъема", Ответ.liftingCalcSum);
		Струк.Вставить("Брейк", Ответ.liftingBreak);
		Струк.Вставить("Сетка", Ответ.liftingTariff);
	Иначе
		Струк.Вставить("ОписаниеОшибки", "Подъем не рассчитан!");
	КонецеСли;	
	Возврат Струк;
КонецФункции


Функция ПолучитьПрокси() Экспорт
	Если Константы.ТестоваяСреда.Получить() Тогда
		Попытка
			Определение = Новый WSОпределения("http://192.168.5.104/logist_copy_on_lem/ws/ServiceMobile.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,10);
			Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1Cmobile", "ServiceMobile", "ServiceMobileSoap");
			Прокси.Пользователь = СокрЛП(Константы.ИмяПользователя.Получить());
			Прокси.Пароль = СокрЛП(Константы.ПарольПользователя.Получить());
		Исключение
			ТО = ОписаниеОшибки();
			ОбщегоНазначения.ЗаписатьОшибкуВЛог(ТО);
		КонецПопытки;
		
		Возврат Прокси;
		
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МассивАдресовДляОбменаСМП.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.МассивАдресовДляОбменаСМП КАК МассивАдресовДляОбменаСМП
	|ГДЕ
	|	МассивАдресовДляОбменаСМП.Терминал = &Терминал
	|
	|УПОРЯДОЧИТЬ ПО
	|	МассивАдресовДляОбменаСМП.Приоритет";
	Зап.УстановитьПараметр("Терминал", ПараметрыСеанса.Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Плохо = Истина;
	
	Пока Выб.Следующий() Цикл
		Плохо = Ложь;
		Попытка
			Определение = Новый WSОпределения("http://" + СокрЛП(Выб.Адрес) + "/logist/ws/ServiceMobile.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,10);
			Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1Cmobile", "ServiceMobile", "ServiceMobileSoap");
		Исключение
			Плохо = Истина;
		КонецПопытки;	
		
		Если Не Плохо Тогда
			Прервать;
		КонецеСли;	
	КонецЦикла;	
	
	
	Если Плохо Тогда
		Попытка
			Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера0.Получить()) + "/ws/ServiceMobile.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,10);
			Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1Cmobile", "ServiceMobile", "ServiceMobileSoap");
		Исключение
			Попытка
				Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера.Получить()) + "/ws/ServiceMobile.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,10);
				Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1Cmobile", "ServiceMobile", "ServiceMobileSoap");
			Исключение
				Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера2.Получить()) + "/ws/ServiceMobile.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокРЛП(Константы.ПарольПользователя.Получить()),,10);
				Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1Cmobile", "ServiceMobile", "ServiceMobileSoap");
			КонецПопытки;
		КонецПопытки;
	КонецеСли;
	
	Прокси.Пользователь = СокрЛП(Константы.ИмяПользователя.Получить());
	Прокси.Пароль = СокрЛП(Константы.ПарольПользователя.Получить());
	
	
	Возврат Прокси;
КонецФункции	


Функция ПолучитьПроксиУдаленногоЗакрытия() Экспорт
	Если  Константы.ТестоваяСреда.Получить() Тогда
		Определение = Новый WSОпределения("http://192.168.5.104/logist_copy_on_lem/ws/MobileClosingCrews.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,7);
		Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews", "MobileClosingCrews", "MobileClosingCrewsSoap");
		Прокси.Пользователь = СокрЛП(Константы.ИмяПользователя.Получить());
		Прокси.Пароль = СокрЛП(Константы.ПарольПользователя.Получить());
		
		
		Возврат Прокси;
		
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МассивАдресовДляОбменаСМП.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.МассивАдресовДляОбменаСМП КАК МассивАдресовДляОбменаСМП
	|ГДЕ
	|	МассивАдресовДляОбменаСМП.Терминал = &Терминал
	|
	|УПОРЯДОЧИТЬ ПО
	|	МассивАдресовДляОбменаСМП.Приоритет";
	Зап.УстановитьПараметр("Терминал", ПараметрыСеанса.Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	
	Пока Выб.Следующий() Цикл
		Плохо = Ложь;
		Попытка
			Определение = Новый WSОпределения("http://" + СокрЛП(Выб.Адрес) + "/logist/ws/MobileClosingCrews.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,7);
			Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews", "MobileClosingCrews", "MobileClosingCrewsSoap");
		Исключение
			Плохо = Истина;
		КонецПопытки;	
		
		Если Не Плохо Тогда
			Прервать;
		КонецеСли;	
	КонецЦикла;	
	
	
	
	Если Плохо Тогда
		Попытка
			Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера0.Получить()) + "/ws/MobileClosingCrews.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,10);
			Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews", "MobileClosingCrews", "MobileClosingCrewsSoap");
		Исключение
			Попытка
				Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера.Получить()) + "/ws/MobileClosingCrews.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокрЛП(Константы.ПарольПользователя.Получить()),,10);
				Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews", "MobileClosingCrews", "MobileClosingCrewsSoap");
			Исключение
				Определение = Новый WSОпределения(СокрЛП(Константы.АдресСервера2.Получить()) + "/ws/MobileClosingCrews.1cws?wsdl", СокрЛП(Константы.ИмяПользователя.Получить()), СокРЛП(Константы.ПарольПользователя.Получить()),,10);
				Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews", "MobileClosingCrews", "MobileClosingCrewsSoap");
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
	Прокси.Пользователь = СокрЛП(Константы.ИмяПользователя.Получить());
	Прокси.Пароль = СокрЛП(Константы.ПарольПользователя.Получить());
	
	
	Возврат Прокси;
КонецФункции

Функция ВыгрузитьПодтверждениеНедоставленныхТоваров(Док) Экспорт
	ОтветМетода = Новый Структура;
	
	Попытка
		Прокси = ПолучитьПроксиУдаленногоЗакрытия();
		Фабрика = Прокси.ФабрикаXDTO;
		
		ИдУзла = Константы.ИдентификаторТелефона.Получить();
		КодАвто = СокрЛП(Константы.Транспорт.Получить().Код);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПодтверждениеНедоставленныхТоваров.Номер КАК numberDoc,
		            |	ПодтверждениеНедоставленныхТоваров.СогласенСДаннымиМП КАК courierAgreesWithData,
		            |	ПодтверждениеНедоставленныхТоваров.ДатаРейса КАК dateOfRide,
		            |	ПодтверждениеНедоставленныхТоваров.Товары.(
		            |		Ссылка КАК Ссылка,
		            |		Заказ.Номер КАК orderId,
		            |		Товар.Код КАК goodId,
		            |		Количество КАК count,
		            |		Цена КАК price,
					|		КодМаркировки КАК markingCode,
		            |		ШтрихкодТовара КАК barcode
		            |	) КАК Товары
		            |ИЗ
		            |	Документ.ПодтверждениеНедоставленныхТоваров КАК ПодтверждениеНедоставленныхТоваров
		            |ГДЕ
		            |	ПодтверждениеНедоставленныхТоваров.Ссылка = &Док";
		Зап.УстановитьПараметр("Док", Док);
		
		Выб = Зап.Выполнить().Выбрать();
		
		dataGoodsCourier_Тип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews").Получить("dataGoodsCourier");
		dataGoodsCourier = Фабрика.Создать(dataGoodsCourier_Тип);
		
		goodRow_Тип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews").Получить("goodRow");
		
		goodRows_Тип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews").Получить("goodRows");
		goodRows = Фабрика.Создать(goodRows_Тип);
		
		
		Если Выб.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(dataGoodsCourier, Выб);
			dataGoodsCourier.number = Выб.numberDoc;
			dataGoodsCourier.id_App = ИдУзла;
			dataGoodsCourier.car = КодАвто;
			Товар = Выб.Товары.Выбрать();
			
			Пока Товар.Следующий() Цикл
				goodRow = Фабрика.Создать(goodRow_Тип);
				ЗаполнитьЗначенияСвойств(goodRow, Товар);
				goodRows.goodRow.Добавить(goodRow);
			КонецЦикла;	
			dataGoodsCourier.goodRows = goodRows;
		Иначе
			ОтветМетода.Вставить("Успешно", Ложь);
			ОтветМетода.Вставить("Описание", "Нет данных для отправки!");
			Возврат ОтветМетода;
		КонецеСли;
		
		ОтветWSМетода = Прокси.unloadGoodsCourier(dataGoodsCourier);
		Если ОтветWSМетода.successfully Тогда
			ОтветМетода.Вставить("Успешно", Истина);
			ОтветМетода.Вставить("НомерДокументаВЦБ", ОтветWSМетода.idDocument);
			Возврат ОтветМетода;
		Иначе
			ОтветМетода.Вставить("Успешно", Ложь);
			ОтветМетода.Вставить("Описание", ОтветWSМетода.error);
			Возврат ОтветМетода;
		КонецЕСли;	
	Исключение
		ОтветМетода.Вставить("Успешно", Ложь);
		ОтветМетода.Вставить("Описание", ОписаниеОшибки());
		Возврат ОтветМетода;
	КонецПопытки;
	
КонецФункции	


Функция ВыгрузитьПодтверждениеНаличияДС(Док) Экспорт
	ОтветМетода = Новый Структура;
	
	Попытка
		Прокси = ПолучитьПроксиУдаленногоЗакрытия();
		Фабрика = Прокси.ФабрикаXDTO;
		
		ИдУзла = Константы.ИдентификаторТелефона.Получить();
		КодАвто = СокрЛП(Константы.Транспорт.Получить().Код);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПодтверждениеДС.Номер КАК numberDoc,
		            |	ПодтверждениеДС.СогласенСДаннымиМП КАК courierAgreesWithData,
		            |	ПодтверждениеДС.ДатаРейса КАК dateOfRide,
		            |	ПодтверждениеДС.ДС.(
		            |		Ссылка КАК Ссылка,
		            |		ТипОплаты.Код КАК typeOfPay,
		            |		Заказ.Номер КАК orderId,
		            |		Сумма КАК amount
		            |	) КАК ДС
		            |ИЗ
		            |	Документ.ПодтверждениеДС КАК ПодтверждениеДС
		            |ГДЕ
		            |	ПодтверждениеДС.Ссылка = &Док";
		Зап.УстановитьПараметр("Док", Док);
		
		Выб = Зап.Выполнить().Выбрать();
		
		dataCashCourier_Тип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews").Получить("dataCashCourier");
		dataCashCourier = Фабрика.Создать(dataCashCourier_Тип);
		
		cashRow_Тип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews").Получить("cashRow");
		
		cashRows_Тип = Фабрика.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/MobileClosingCrews").Получить("cashRows");
		cashRows = Фабрика.Создать(cashRows_Тип);
		
		
		Если Выб.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(dataCashCourier, Выб);
			dataCashCourier.number = Выб.numberDoc;
			dataCashCourier.id_App = ИдУзла;
			dataCashCourier.car = КодАвто;
			ДС = Выб.ДС.Выбрать();
			
			Пока ДС.Следующий() Цикл
				cashRow = Фабрика.Создать(cashRow_Тип);
				ЗаполнитьЗначенияСвойств(cashRow, ДС);
				cashRows.cashRow.Добавить(cashRow);
			КонецЦикла;	
			dataCashCourier.cashRows = cashRows;
		Иначе
			ОтветМетода.Вставить("Успешно", Ложь);
			ОтветМетода.Вставить("Описание", "Нет данных для отправки!");
			Возврат ОтветМетода;
		КонецеСли;
		
		ОтветWSМетода = Прокси.unloadCashCourier(dataCashCourier);
		Если ОтветWSМетода.successfully Тогда
			ОтветМетода.Вставить("Успешно", Истина);
			ОтветМетода.Вставить("НомерДокументаВЦБ", ОтветWSМетода.idDocument);
			Возврат ОтветМетода;
		Иначе
			ОтветМетода.Вставить("Успешно", Ложь);
			ОтветМетода.Вставить("Описание", ОтветWSМетода.error);
			Возврат ОтветМетода;
		КонецЕСли;	
	Исключение
		ОтветМетода.Вставить("Успешно", Ложь);
		ОтветМетода.Вставить("Описание", ОписаниеОшибки());
		Возврат ОтветМетода;
	КонецПопытки;
КонецФункции	