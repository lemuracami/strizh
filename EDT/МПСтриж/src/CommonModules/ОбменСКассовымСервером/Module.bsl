Функция НапечататьЧекНаСервере(ЧекКПечати, Регион, ТипЧекаДляОбработки) Экспорт
	ПараметрыОтвета = Новый Структура;
	
	ИдУзла = Константы.ИдентификаторТелефона.Получить();
	
	ИмяПользователя = Регион.ксИмяПользователя;
	ПарольПользователя = Регион.ксПарольПользователя;
	
	МассивАдресов = ПолучитьМассивАдресовСервераККМ(Регион);
	
	СоединениеУстановлено = Ложь;
	ОписаниеПроблемы = "";
	Для Каждого Тек Из МассивАдресов Цикл
		Попытка
			Определение = Новый WSОпределения(Тек, ИмяПользователя, ПарольПользователя,,10);
			Прокси = Новый WSПрокси(Определение, "http://www.strizh.org/exchange_ma", "ExchangeMA", "ExchangeMASoap");
			СоединениеУстановлено = Истина;
			Прервать;
		Исключение
			ОписаниеПроблемы = ОписаниеОшибки();
			//ОбщегоНазначения.ЗаписатьОшибкуВЛог(ОписаниеПроблемы);
			Продолжить;
		КонецПопытки;
	КонецЦикла;	
	
	
	
	Если Не СоединениеУстановлено Тогда
		ПараметрыОтвета.Вставить("ЧекОтправлен", Ложь);
		ПараметрыОтвета.Вставить("Ошибка", ОписаниеПроблемы);
		Возврат ПараметрыОтвета;
	КонецеСли;
	
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = ПарольПользователя;
	
	
	Попытка
		
		Фабрика = Прокси.ФабрикаXDTO;
		ЧекТип = Фабрика.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("checkForOrder");
		СтрокаЧекаТип = Фабрика.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("orderRow");
		СтрокиЧекаТип = Фабрика.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("orderRows");
		
		Если ТипЧекаДляОбработки = 1 Тогда
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			            |	ЧекКПечати.ДанныеЗаказа.Реализация.Номер КАК order,
			            |	ЧекКПечати.ТипОплаты.Код КАК payType,
			            |	ЧекКПечати.ДанныеЗаказа.СуммаДоставка КАК deliveryPrice,
			            |	ЧекКПечати.ДанныеЗаказа.Реализация.СтавкаНДСФЗПоДоставке КАК deliveryNDS,
			            |	ЧекКПечати.ДанныеЗаказа.Реализация.ИдентификаторРейса КАК tripId,
			            |	ЧекКПечати.АдресОтправкиЧека КАК informAddress,
			            |	ЧекКПечати.СуммаПредоплаты КАК prepaymentAmount,
			            |	1 КАК checkType,
			            |	"""" КАК idCheckForReturn,
			            |	ВЫБОР
			            |		КОГДА ЧекКПечати.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
			            |				ИЛИ ЧекКПечати.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ОплаченоВМагазине)
			            |			ТОГДА ЧекКПечати.ДанныеЗаказа.Реализация.КодОрганизацииНаличнойОплаты
			            |		КОГДА ЧекКПечати.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.СБП)
			            |			ТОГДА ЧекКПечати.ДанныеЗаказа.Реализация.КодОрганизацииОплатыПоСБП
			            |		ИНАЧЕ ЧекКПечати.ДанныеЗаказа.Реализация.КодОрганизацииОплатыПоТерминалу
			            |	КОНЕЦ КАК organizationCode,
			            |	ЧекКПечати.Товары.(
			            |		Номенклатура.Код КАК goodCode,
			            |		Количество КАК count,
			            |		Цена КАК price,
			            |		КодМаркировки КАК markingCode,
			            |		ЕСТЬNULL(ЧекКПечати.Товары.ПоставщикТовара.Код, """") КАК goodsSellerCode,
			            |		ВЫБОР
			            |			КОГДА ЧекКПечати.ДанныеЗаказа.Реализация.Партнер <> ЗНАЧЕНИЕ(Справочник.интернетМагазины.пустаяСсылка)
			            |				ТОГДА ЧекКПечати.ДанныеЗаказа.Реализация.Партнер.ИНН
			            |			ИНАЧЕ ЧекКПечати.ДанныеЗаказа.Реализация.ИнтернетМагазин.ИНН
			            |		КОНЕЦ КАК goodsSellerINN,
			            |		СтавкаНДС КАК NDS,
			            |		ПризнакПредметаРасчета КАК signSubjectCalc
			            |	) КАК Товары,
			            |	ЧекКПечати.ДанныеЗаказа.Реализация.НомерКлиента КАК orderIdImport,
			            |	ВЫБОР
			            |		КОГДА ЧекКПечати.ДанныеЗаказа.Реализация.Партнер <> ЗНАЧЕНИЕ(Справочник.интернетМагазины.пустаяСсылка)
			            |			ТОГДА ЧекКПечати.ДанныеЗаказа.Реализация.Партнер.ИНН
			            |		ИНАЧЕ ЧекКПечати.ДанныеЗаказа.Реализация.ИнтернетМагазин.ИНН
			            |	КОНЕЦ КАК INNDeliverySeller
			            |ИЗ
			            |	Документ.ЧекКПечати КАК ЧекКПечати
			            |ГДЕ
			            |	ЧекКПечати.Ссылка = &Чек";
			Зап.УстановитьПараметр("Чек", ЧекКПечати);
		ИначеЕсли ТипЧекаДляОбработки = 2 Тогда 
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			            |	ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.Номер КАК order,
			            |	ЧекКПечатиВозвратПрихода.ЧекКПечати.ТипОплаты.Код КАК payType,
			            |	ЧекКПечатиВозвратПрихода.ДанныеЗаказа.СуммаДоставка КАК deliveryPrice,
			            |	ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.СтавкаНДСФЗПоДоставке КАК deliveryNDS,
			            |	ЧекКПечатиВозвратПрихода.ЧекКПечати.ДанныеЗаказа.Реализация.ИдентификаторРейса КАК tripId,
			            |	ЧекКПечатиВозвратПрихода.АдресОтправкиЧека КАК informAddress,
						|	ЧекКПечатиВозвратПрихода.ЧекКПечати.СуммаПредоплаты КАК prepaymentAmount,						
			            |	2 КАК checkType,
			            |	ВЫБОР
			            |		КОГДА ЧекКПечатиВозвратПрихода.ЧекКПечати.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
			            |				ИЛИ ЧекКПечатиВозвратПрихода.ЧекКПечати.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ОплаченоВМагазине)
			            |			ТОГДА ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.КодОрганизацииНаличнойОплаты
			            |		КОГДА ЧекКПечатиВозвратПрихода.ЧекКПечати.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.СБП)
			            |			ТОГДА ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.КодОрганизацииОплатыПоСБП
			            |		ИНАЧЕ ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.КодОрганизацииОплатыПоТерминалу
			            |	КОНЕЦ КАК organizationCode,
			            |	ЧекКПечатиВозвратПрихода.ЧекКПечати.ИдентификаторЧекаНаСервере КАК idCheckForReturn,
			            |	ЧекКПечатиВозвратПрихода.ЧекКПечати.Товары.(
			            |		Номенклатура.Код КАК goodCode,
			            |		Количество КАК count,
			            |		Цена КАК price,
			            |		КодМаркировки КАК markingCode,
			            |		ЕСТЬNULL(ПоставщикТовара.Код, """") КАК goodsSellerCode,
			            |		ВЫБОР
			            |			КОГДА ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.Партнер <> ЗНАЧЕНИЕ(Справочник.интернетМагазины.пустаяСсылка)
			            |				ТОГДА ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.Партнер.ИНН
			            |			ИНАЧЕ ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.ИнтернетМагазин.ИНН
			            |		КОНЕЦ КАК goodsSellerINN,
			            |		СтавкаНДС КАК NDS,
						|		ПризнакПредметаРасчета КАК signSubjectCalc
			            |	) КАК Товары,
			            |	ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.НомерКлиента КАК orderIdImport,
			            |	ВЫБОР
			            |		КОГДА ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.Партнер <> ЗНАЧЕНИЕ(Справочник.интернетМагазины.пустаяСсылка)
			            |			ТОГДА ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.Партнер.ИНН
			            |		ИНАЧЕ ЧекКПечатиВозвратПрихода.ДанныеЗаказа.Реализация.ИнтернетМагазин.ИНН
			            |	КОНЕЦ КАК INNDeliverySeller
			            |ИЗ
			            |	Документ.ЧекКПечатиВозвратПрихода КАК ЧекКПечатиВозвратПрихода
			            |ГДЕ
			            |	ЧекКПечатиВозвратПрихода.Ссылка = &Чек";
			Зап.УстановитьПараметр("Чек", ЧекКПечати);
		КонецеСли;
		
		Выб = Зап.Выполнить().Выбрать();
		
		Если Выб.Следующий() Тогда
			ЧекКС = Фабрика.Создать(ЧекТип);
			СтрокиЧека = Фабрика.Создать(СтрокиЧекаТип);
			
			ЗаполнитьЗначенияСвойств(ЧекКС, Выб);
			ВыбТов = Выб.Товары.Выбрать();
			Пока ВыбТов.Следующий() Цикл
				СтрокаЧека = Фабрика.Создать(СтрокаЧекаТип);
				ЗаполнитьЗначенияСвойств(СтрокаЧека, ВыбТов);
				СтрокиЧека.orderRow.Добавить(СтрокаЧека);
			КонецЦикла;	
			ЧекКС.orderRows = СтрокиЧека;
			
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Фабрика.ЗаписатьXML(ЗаписьXML, ЧекКС);
			Результат = ЗаписьXML.Закрыть();	
			
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			ОтветКС = Прокси.registerCheck(Хр, ИдУзла);
			Если ОтветКС.isError Тогда
				ПараметрыОтвета.Вставить("ЧекОтправлен", Ложь);
				ПараметрыОтвета.Вставить("Ошибка", ОтветКС.error);
			Иначе
				ПараметрыОтвета.Вставить("ЧекОтправлен", Истина);
				ПараметрыОтвета.Вставить("Ошибка", "");
				ПараметрыОтвета.Вставить("ИдЧека", ОтветКС.idCheck);
			КонецеСли;	
			
			Возврат ПараметрыОтвета;
		КонецЕсли;	
	Исключение
		ОписаниеПроблемы = ОписаниеОшибки();
		ПараметрыОтвета.Вставить("ЧекОтправлен", Ложь);
		ПараметрыОтвета.Вставить("Ошибка", ОписаниеПроблемы);
		
		ОбщегоНазначения.ЗаписатьОшибкуВЛог(ОписаниеПроблемы);
		Возврат ПараметрыОтвета;
	КонецПопытки;
КонецФункции

Функция ЗапроситьДанныеЧека(ИдентификаторЧека, Регион) Экспорт
	ПараметрыОтвета = Новый Структура;
	
	ИдУзла = Константы.ИдентификаторТелефона.Получить();
	
	ИмяПользователя = Регион.ксИмяПользователя;
	ПарольПользователя = Регион.ксПарольПользователя;
	
	МассивАдресов = ПолучитьМассивАдресовСервераККМ(Регион);
	
	СоединениеУстановлено = Ложь;
	ОписаниеПроблемы = "";
	Для Каждого Тек Из МассивАдресов Цикл
		Попытка
			Определение = Новый WSОпределения(Тек, ИмяПользователя, ПарольПользователя,,10);
			Прокси = Новый WSПрокси(Определение, "http://www.strizh.org/exchange_ma", "ExchangeMA", "ExchangeMASoap");
			СоединениеУстановлено = Истина;
			Прервать;
		Исключение
			ОписаниеПроблемы = ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
	КонецЦикла;	
	
	
	
	Если Не СоединениеУстановлено Тогда
		ПараметрыОтвета.Вставить("ЧекОтправлен", Ложь);
		ПараметрыОтвета.Вставить("ЕстьОшибка", Истина);

		ПараметрыОтвета.Вставить("Ошибка", ОписаниеПроблемы);
		Возврат ПараметрыОтвета;
	КонецеСли;
	
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = ПарольПользователя;
	
	
	/////////////////////
	
	Попытка
		ОтветКС = Прокси.getCheckParameters(ИдентификаторЧека);
		
		Зап = ОтветКС.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Зап);
		ПараметрыЧекаТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("getCheckParameters");
		ОтветКС = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, ПараметрыЧекаТип);
		
		
		ПараметрыОтвета.Вставить("ЕстьОшибка", Ложь);
		ПараметрыОтвета = ОбщегоНазначения.ВернутьСтруктуруПоXDTO(ОтветКС, ПараметрыОтвета);
		Возврат ПараметрыОтвета;
	Исключение
		ТекстПроблемы = ОписаниеОшибки();
		ПараметрыОтвета.Вставить("ЕстьОшибка", Истина);
		ПараметрыОтвета.Вставить("Ошибка", ТекстПроблемы);
		ОбщегоНазначения.ЗаписатьОшибкуВЛог(ТекстПроблемы);
		
		Зап = ОтветКС.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Зап);
		ПараметрыЧекаТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("getCheckParameters");
		ОтветКС = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, ПараметрыЧекаТип);
		
        ПараметрыОтвета = ОбщегоНазначения.ВернутьСтруктуруПоXDTO(ОтветКС, ПараметрыОтвета);
		Возврат ПараметрыОтвета;
	КонецПопытки;
КонецФункции	

Функция ПолучитьМассивАдресовСервераККМ(Регион)
	СтрокаАдреса = Регион.ксАдресСервера;
	
	МассивАдресов = Новый Массив;
	
	Если Не Константы.ТестоваяСреда.Получить() Тогда
		Если Найти(СтрокаАдреса, "АдресСервера") Тогда
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	МассивАдресовДляОбменаСМП.Адрес КАК Адрес
			|ИЗ
			|	РегистрСведений.МассивАдресовДляОбменаСМП КАК МассивАдресовДляОбменаСМП
			|ГДЕ
			|	МассивАдресовДляОбменаСМП.Терминал = &Терминал
			|
			|УПОРЯДОЧИТЬ ПО
			|	МассивАдресовДляОбменаСМП.Приоритет";
			Зап.УстановитьПараметр("Терминал", Регион.Ссылка);
			
			Выб = Зап.Выполнить().Выбрать();
			
			Пока Выб.Следующий() Цикл
				МассивАдресов.Добавить(СтрЗаменить(СтрокаАдреса, "АдресСервера", Выб.Адрес));
			КонецЦикла;	
		Иначе	
			МассивАдресов.Добавить(СтрокаАдреса);
		КонецеСли;	
	Иначе
		МассивАдресов.Добавить("http://192.168.5.104/cash_server_on_lem/ws/ExchangeMA.1cws?wsdl");
	КонецеСли;
	Возврат МассивАдресов;
КонецФункции	