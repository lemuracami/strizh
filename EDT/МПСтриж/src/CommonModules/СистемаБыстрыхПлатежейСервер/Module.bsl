Функция Запрос_Райффайзен(СтрокаJSON, КодСостоянияВызова = 0, МетодЗапроса = "POST", ТипЗапроса = "", ДанныеАвторизации = "") Экспорт
	
	ЗаголовокЗапроса = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ДанныеАвторизации) Тогда
		ЗаголовокЗапроса.Вставить("Authorization", "Bearer " + ДанныеАвторизации);
	Иначе
		ЗаголовокЗапроса.Вставить("Content-Type", "application/json;charset=UTF-8");
	КонецеСли;	
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL();
	
	Если ТипЗапроса = "registration" Тогда
		СтрокаРесурса = "api/sbp/v1/qr/register";
	ИначеЕсли ТипЗапроса = "payment_info" Тогда
		СтрокаРесурса = "api/sbp/v1/qr" + СтрокаJSON;
	КонецЕсли;	
	
	Если Константы.ТестоваяСреда.Получить() Тогда
		HTTPСоединение = Новый HTTPСоединение("test.ecom.raiffeisen.ru",,,,,,ssl1);
	Иначе
		HTTPСоединение = Новый HTTPСоединение("e-commerce.raiffeisen.ru",,,,,,ssl1);
	КонецеСли;	
	

	
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаРесурса, ЗаголовокЗапроса);
	
	
	Если МетодЗапроса = "POST" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
		Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	ИначеЕсли МетодЗапроса = "GET" Тогда
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
	КонецеСли;	
	КодСостоянияВызова = Результат.КодСостояния;
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку("UTF-8");	
	Возврат ТекстОтвета;
конецФункции	


Функция СформироватьСтрокуJSON(СтруктураJSON) Экспорт
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
КонецФункции

Функция ДанныеJSONВСтруктуру(ДанныеJSON, ИменаСвойствСоЗначениямиДата = "") Экспорт
	Чт = Новый ЧтениеJSON;
	Чт.УстановитьСтроку(ДанныеJSON);
	СтруктураДанных = ПрочитатьJSON(Чт, Ложь, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.ISO);
	Возврат СтруктураДанных;
КонецФункции


Функция ЗарегистрироватьОплатуВСБП(Заказ, СуммаОплаты, РасчетныйСчет, qrID = "", qrUrl = "") Экспорт
	ОтветВызова = Новый Структура;
	Попытка
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("account", РасчетныйСчет);
		СтруктураДанных.Вставить("additionalInfo", "");
		СтруктураДанных.Вставить("amount", Формат(СуммаОплаты, "ЧГ="));
		СтруктураДанных.Вставить("createDate", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "T" + Формат(ТекущаяДата(), "ДФ=hh:mm:ss") + ".000001+03:00");
		СтруктураДанных.Вставить("currency", "RUB");
		СтруктураДанных.Вставить("order", СокрЛП(Заказ.Номер));
		СтруктураДанных.Вставить("paymentDetails", СокрЛП(Заказ.Номер));
		СтруктураДанных.Вставить("qrType", "QRDynamic");
		СтруктураДанных.Вставить("sbpMerchantId", ПараметрыСеанса.merchantIdСБПРайффайзен);
		//СтруктураДанных.Вставить("qrExpirationDate", "40700000000000000000");
		
		СтрокаJSON = СформироватьСтрокуJSON(СтруктураДанных);
		
		КодСостояния = 0;
		РезультатВызова = Запрос_Райффайзен(СтрокаJSON, КодСостояния, "POST", "registration");
		
		Если КодСостояния <> 200 Тогда
			ОбщегоНазначения.ЗаписатьОшибкуВЛог("СПБ: json: " + СтрокаJSON + ", КОД СОСТОЯНИЯ: " + Строка(КодСостояния));
			ОтветВызова.Вставить("РезультатВызова", Ложь);
			ОтветВызова.Вставить("ОписаниеОшибки", "Код состояния вызова метода регистрации оплаты: " + Строка(КодСостояния));
			Возврат ОтветВызова;
		КонецеСли;	
		СтруктураОтвета = ДанныеJSONВСтруктуру(РезультатВызова);
		
		ДанныеКФиксацииВРССБП = Новый Структура;
		ДанныеКФиксацииВРССБП.Вставить("Заказ", Заказ);
		ДанныеКФиксацииВРССБП.Вставить("ЭтапПроцессаОплаты", Перечисления.ЭтапыПроцессаОплатыСБП.Регистрация);
		ДанныеКФиксацииВРССБП.Вставить("Сумма", СуммаОплаты);
		ДанныеКФиксацииВРССБП.Вставить("Организация", Справочники.Организации.НайтиПоКоду(СокрЛП(Заказ.КодОрганизацииОплатыПоСБП)));
		ДанныеКФиксацииВРССБП.Вставить("КодСообщения", СтруктураОтвета.code);
		
		Если СтруктураОтвета.Свойство("message") Тогда
			ДанныеКФиксацииВРССБП.Вставить("Сообщение", СтруктураОтвета.message);
		КонецеСли;	
		
		Если СтруктураОтвета.Свойство("qrID") Тогда
			ДанныеКФиксацииВРССБП.Вставить("qrID", СтруктураОтвета.qrId);
			qrID = СтруктураОтвета.qrId;
		КонецеСли;	
		
		Если СтруктураОтвета.Свойство("qrUrl") Тогда
			ДанныеКФиксацииВРССБП.Вставить("qrUrl", СтруктураОтвета.qrUrl);
			qrUrl = СтруктураОтвета.qrUrl;
		КонецеСли;	
		
		ЗафиксироватьДанныеВРССПБ(ДанныеКФиксацииВРССБП);
	исключение
		ОтветВызова.Вставить("РезультатВызова", Ложь);
		ОтветВызова.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		Возврат ОтветВызова;
	КонецПопытки;
	ОтветВызова.Вставить("РезультатВызова", Истина);
	Возврат ОтветВызова;
КонецФункции


Функция ПроверитьОплатуВСБП(Заказ, qrID) Экспорт
	ОтветВызова = Новый Структура;
	Попытка
		СтрокаЗапроса = "/" + qrID + "/payment-info";
		
		КодСостояния = 0;
		РезультатВызова = Запрос_Райффайзен(СтрокаЗапроса, КодСостояния, "GET", "payment_info", ПараметрыСеанса.СекретныйКлючСБПРайффайзен);
		
		Если КодСостояния <> 200 Тогда
			ОтветВызова.Вставить("РезультатВызова", Ложь);
			ОтветВызова.Вставить("ОписаниеОшибки", "Код состояния вызова метода проверки оплаты: " + Строка(КодСостояния));
			Возврат ОтветВызова;
		КонецеСли;	
		
		МасПолей = Новый Массив;
		МасПолей.Добавить("transactionDate");
		МасПолей.Добавить("createDate");
		
		СтруктураОтвета = ДанныеJSONВСтруктуру(РезультатВызова, МасПолей);
		
		ДанныеКФиксацииВРССБП = Новый Структура;
		ДанныеКФиксацииВРССБП.Вставить("Заказ", Заказ);
		ДанныеКФиксацииВРССБП.Вставить("ЭтапПроцессаОплаты", Перечисления.ЭтапыПроцессаОплатыСБП.ПроверкаСостоянияОплаты);
		ДанныеКФиксацииВРССБП.Вставить("Сумма", СтруктураОтвета.amount);
		ДанныеКФиксацииВРССБП.Вставить("Организация", Справочники.Организации.НайтиПоКоду(СокрЛП(Заказ.КодОрганизацииОплатыПоСБП)));
		ДанныеКФиксацииВРССБП.Вставить("КодСообщения", СтруктураОтвета.code);
		Если СтруктураОтвета.Свойство("transactionDate") Тогда 
			ДанныеКФиксацииВРССБП.Вставить("ДатаТранзакции", СтруктураОтвета.transactionDate);
		КонецеСли;	
		ДанныеКФиксацииВРССБП.Вставить("ИдентификаторТранзакции", СтруктураОтвета.transactionId);
		ДанныеКФиксацииВРССБП.Вставить("qrID", СтруктураОтвета.qrId);
		ДанныеКФиксацииВРССБП.Вставить("СтатусПлатежа", Перечисления.СтатусыПлатежаСБП[СтруктураОтвета.paymentStatus]);
		Если СтруктураОтвета.Свойство("message") Тогда
			ДанныеКФиксацииВРССБП.Вставить("Сообщение", СтруктураОтвета.message);
		КонецеСли;	
		
		ЗафиксироватьДанныеВРССПБ(ДанныеКФиксацииВРССБП);
	Исключение
		ОтветВызова.Вставить("РезультатВызова", Ложь);
		ОтветВызова.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		Возврат ОтветВызова;
	конецПопытки;
	ОтветВызова.Вставить("РезультатВызова", Истина);
	ОтветВызова.Вставить("СтатусПлатежа", ДанныеКФиксацииВРССБП.СтатусПлатежа);
	Возврат ОтветВызова;
КонецФункции


Функция ЗафиксироватьДанныеВРССПБ(ДанныеКФиксации) Экспорт
	ТекПериод = ТекущаяДата();
	
	Наб = РегистрыСведений.ТранзакцииСБП.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекПериод);
	Наб.Отбор.Заказ.Установить(ДанныеКФиксации.Заказ);
	
	НовЗапись = Наб.Добавить();
	
	ЗаполнитьЗначенияСвойств(НовЗапись, ДанныеКФиксации);
	
	НовЗапись.Период = ТекПериод;
	
	Наб.Записать(Ложь);
	
	Возврат Истина;
КонецФункции	