
&НаСервере
Процедура ЗаполнитьДокументНаСервере()
	Зап = Новый Запрос;
	
	//частичка
	//Зап.Текст = "ВЫБРАТЬ
	//            |	МАКСИМУМ(ДанныеЗаказаВодителя.Дата) КАК Дата,
	//            |	ДанныеЗаказаВодителя.Реализация КАК Реализация,
	//            |	МАКСИМУМ(ДанныеЗаказаВодителя.Ссылка) КАК Ссылка
	//            |ПОМЕСТИТЬ ВТ_Данные
	//            |ИЗ
	//            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	//            |ГДЕ
	//            |	ДанныеЗаказаВодителя.Реализация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	ДанныеЗаказаВодителя.Реализация
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	СУММА(ДанныеЗаказаВодителяДоставленныеТовары.КоличествоДоставлено * ДанныеЗаказаВодителяДоставленныеТовары.Цена) КАК Сумма,
	//            |	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.ТипОплаты КАК ТипОплаты,
	//            |	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.Реализация КАК Заказ
	//            |ИЗ
	//            |	ВТ_Данные КАК ВТ_Данные
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя.ДоставленныеТовары КАК ДанныеЗаказаВодителяДоставленныеТовары
	//            |		ПО ВТ_Данные.Ссылка.Ссылка = ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.Ссылка
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.ТипОплаты,
	//            |	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.Реализация";
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ДанныеЗаказаВодителя.Реализация КАК Реализация,
	            |	ДанныеЗаказаВодителя.Ссылка КАК Ссылка
	            |ПОМЕСТИТЬ ВТ_Данные
	            |ИЗ
	            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	            |			ДанныеЗаказаВодителя.Реализация КАК Реализация,
	            |			МАКСИМУМ(ДанныеЗаказаВодителя.Дата) КАК Дата
	            |		ИЗ
	            |			Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	            |		
	            |		СГРУППИРОВАТЬ ПО
	            |			ДанныеЗаказаВодителя.Реализация) КАК ВложенныйЗапрос
	            |		ПО ДанныеЗаказаВодителя.Реализация.Ссылка = ВложенныйЗапрос.Реализация.Ссылка
	            |			И ДанныеЗаказаВодителя.Дата = ВложенныйЗапрос.Дата
	            |ГДЕ
	            |	ДанныеЗаказаВодителя.Реализация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ДанныеЗаказаВодителя.Реализация.ТипЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипЗаказа.Доставка)
	            |	И ДанныеЗаказаВодителя.Дата >= &ДатаНачСмены
	            |	И ДанныеЗаказаВодителя.Реализация.СнятьСДоставки = ЛОЖЬ
	            |	И ДанныеЗаказаВодителя.ВозвратныйЧек = ЗНАЧЕНИЕ(документ.чеккпечатиВозвратПрихода.пустаяссылка)
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	СУММА(ВТ_Данные.Ссылка.СуммаНал) КАК Сумма,
	            |	ЕСТЬNULL(ВТ_Данные.Ссылка.ТипОплаты, ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)) КАК ТипОплаты,
	            |	ВТ_Данные.Реализация КАК Заказ
	            |ИЗ
	            |	ВТ_Данные КАК ВТ_Данные
	            |ГДЕ
	            |	ВТ_Данные.Ссылка.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.РезультатыДоставки.Доставлен)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТ_Данные.Реализация,
	            |	ВТ_Данные.Ссылка.ТипОплаты";
	
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаРейса));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаРейса));
	Зап.УстановитьПараметр("ДатаНачСмены", НачалоДня(Объект.ДатаРейса) + 25200);
	
	Рез = Зап.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Нов = Объект.ДС.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Рез);
		Если Не ЗначениеЗаполнено(Нов.ТипОплаты) Тогда
			Нов.ТипОплаты = Справочники.ТипыОплат.Наличные;
		КонецеСли;	
	КонецЦикла;	
	Объект.Дата = ТекущаяДата();
	Если Объект.ДС.Количество() <> 0 Тогда
		СтрукЗаписи = Новый Структура;
		СтрукЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Записать(СтрукЗаписи);
		СписокТиповОплат.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	Если Объект.ДС.Количество() <> 0 Тогда
		Объект.ДС.Очистить();
	КонецеСли;	
	ЗаполнитьДокументНаСервере();
	Элементы.СписокТиповОплат.Обновить();
	Элементы.ФормаСогласен.Доступность = Истина;
	Элементы.ФормаНеСогласен.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СписокТиповОплат.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
	ТолькоПросмотр = Объект.ДокументПереданВЦБ;
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаРейса = ОбщегоНазначения.ПолучитьПредполагаемуюДатуРейса();
		ЗаполнитьДокументНаСервере();
		Элементы.ФормаСогласен.Доступность = Истина;
		Элементы.ФормаНеСогласен.Доступность = Истина;
	КонецеСли;	
КонецПроцедуры

&НаСервере
Функция СогласенНаСервере()
	Объект.СогласенСДаннымиМП = Истина;
	РезультатЗаписи = ЗаписатьВыгрузитьПровестиДокумент();
	Возврат РезультатЗаписи;
КонецФункции

&НаСервере
Функция ПроверитьВозможностьЗаписиИВыгрузкиДокумента()
	Возврат УдаленноеЗакрытиеЭкипажейСервер.ПроверитьСтатусыНаНевыгруженностьВЦБ(Объект.ДатаРейса);	
КонецФункции	

&НаСервере
Функция ПроверитьВозможностьЗаписиИВыгрузкиДокументаНаУсловиеAssist()
	Возврат УдаленноеЗакрытиеЭкипажейСервер.ПроверитьНаличиеНевыгруженныхТранзакцийAssist(Объект.ДатаРейса);	
КонецФункции

&НаКлиенте
Процедура Согласен(Команда)
	Если Не ПроверитьВозможностьЗаписиИВыгрузкиДокумента() Тогда
		Сообщить("Обнаружены невыгруженные статусы в ЦБ! Выполните обмен перед тем, как делать удаленное закрытие!");
		Возврат;		
	КонецеСли;
	
	Если Не ПроверитьВозможностьЗаписиИВыгрузкиДокументаНаУсловиеAssist() Тогда
		Сообщить("Обнаружены невыгруженные в ЦБ данные Assist! Выполните обмен перед тем, как делать удаленное закрытие!");
		Возврат;		
	КонецеСли;
	
	Результат = СогласенНаСервере();
	Если Не Результат.Успешно Тогда
		Сообщить("Ошибка выгрузки документа в ЦБ! Описание проблемы: " + Результат.Описание);
		Возврат;
	Иначе
		Закрыть();
	КонецеСли;	
КонецПроцедуры

Функция ЗаписатьВыгрузитьПровестиДокумент()
	СтрукЗаписи = Новый Структура;
	СтрукЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(СтрукЗаписи);
	
	
	Результат = МодульОбмен.ВыгрузитьПодтверждениеНаличияДС(Объект.Ссылка);
	Если Результат.Успешно Тогда
		Объект.ДокументПереданВЦБ = Истина;
		Объект.НомерДокументаВЦБ = Результат.НомерДокументаВЦБ;
		СтрукЗаписи = Новый Структура;
		СтрукЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Записать(СтрукЗаписи);
	КонецЕсли;
	ТолькоПросмотр = Результат.Успешно;
	Возврат Результат;
КонецФункции

&НаСервере
Функция НеСогласенНаСервере()
	Объект.СогласенСДаннымиМП = Ложь;
	РезультатЗаписи = ЗаписатьВыгрузитьПровестиДокумент();
	Возврат РезультатЗаписи;
КонецФункции

&НаКлиенте
Процедура НеСогласен(Команда)
	Если Не ПроверитьВозможностьЗаписиИВыгрузкиДокумента() Тогда
		Сообщить("Обнаружены невыгруженные статусы в ЦБ! Выполните обмен перед тем, как делать удаленное закрытие!");
		Возврат;		
	КонецеСли;
		
	
	Результат = НеСогласенНаСервере();
	Если Не Результат.Успешно Тогда
		Сообщить("Ошибка выгрузки документа в ЦБ! Описание проблемы: " + Результат.Описание);
		Возврат;
	Иначе
		Закрыть();
	КонецеСли;	
	Сообщить("Необходимо вернуться на базу для закрытия рейса!", СтатусСообщения.ОченьВажное);
КонецПроцедуры


