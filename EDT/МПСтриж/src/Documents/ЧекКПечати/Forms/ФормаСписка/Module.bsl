
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.Список.Период.ДатаНачала = НачалоДня(ТекущаяДата());
	Элементы.Список.Период.ДатаОкончания = КонецДня(ТекущаяДата());
	ФормуМожноЗакрыть = Истина;
	КоличествоЗапросовПоОтправленномуЧеку = Константы.КоличествоЗапросовПоОтправленномуЧеку.Получить();
КонецПроцедуры

&НаСервере
Функция ПолучитьИДОсновногоЧекаНаСервере() 
	ИсходныйЧек = Элементы.Список.ТекущаяСтрока.Ссылка;
	Возврат ИсходныйЧек.ИдентификаторЧекаНаСервере;
КонецФункции	

&НаСервере
Процедура ЗаписатьПараметрыОсновногоЧека(ПараметрыЧека)
	ИсходныйЧек = Элементы.Список.ТекущаяСтрока.Ссылка;
	РаботаСЧекамиСервер.ЗаписатьПараметрыЧекаВРС(ИсходныйЧек.Ссылка, ПараметрыЧека);	
КонецПроцедуры	



&НаКлиенте
Функция ЗапросПараметровОсновногоЧекаНаСервереККМ()
	Регион = ПолучитьТекущийРегионНаСервере();
	ИдЧека = ПолучитьИДОсновногоЧекаНаСервере();
	ОтветКС = ЗапросККСПоЧеку(ИдЧека, Регион);
	Если ОтветКС.ЕстьОшибка Тогда	
		Сообщить("Ошибка при получении данных о чеке!");
		Возврат Ложь;
	Иначе	
		
	КонецеСли;	
	
	
	Если ОтветКС.isDone Тогда
		ЗаписатьПараметрыОсновногоЧека(ОтветКС);
		Возврат Истина;
	КонецЕСли;	
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Процедура ПечатьЧекаНаМобильномПринтере(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецеСли;
	
	ЕстьПараметрыЧека = Истина;
	
	Если Не Элементы.Список.ТекущиеДанные.ЧекНапечатан Или Элементы.Список.ТекущиеДанные.ПараметрыЧекаОтсутствуют = Истина Тогда
		ЕстьПараметрыЧека = ЗапросПараметровОсновногоЧекаНаСервереККМ();
	КонецеСли;	
	
	
	Если ЕстьПараметрыЧека Тогда
		ТекстЧекаПарам = ПолучитьТекстЧека();
		ТекстЧека = ТекстЧекаПарам.ТекстЧека;
		ШКЧека = ТекстЧекаПарам.СтрокаШК;
		
		ПечатьНаПринтереЧековКлиент.ПечатьТекста(ТекстЧека, ШКЧека, Истина);
		ЗаписатьПризнакРаспечатанностиЧека();
	КонецеСли;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЧека()
	Возврат РаботаСЧекамиСервер.СформироватьТекстЧека(Элементы.Список.ТекущаяСтрока);
КонецФункции	

&НаСервере
Процедура ЗаписатьПризнакРаспечатанностиЧека()
	РаботаСЧекамиСервер.ЗаписьСтатусаЧекНапечатан(Элементы.Список.ТекущаяСтрока);
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьПризнакРаспечатанностиВозвратногоЧека()
	РаботаСЧекамиСервер.ЗаписьСтатусаЧекНапечатан(ТекущийЧекКВозврату);
КонецПроцедуры

Функция СоздатьЧекКПечати()
	
	//ИсходныйЧек = Элементы.Список.ТекущаяСтрока.Ссылка;
	ИсходныйЧек = фИсходныйЧек;
	
	Чек = Документы.ЧекКПечатиВозвратПрихода.СоздатьДокумент();
	Чек.Дата = ТекущаяДата();
	Чек.ДанныеЗаказа = ИсходныйЧек.ДанныеЗаказа.Ссылка;
	Чек.АдресОтправкиЧека = ИсходныйЧек.АдресОтправкиЧека;
	Чек.ЧекКПечати = ИсходныйЧек.Ссылка;
	
	Попытка
		Чек.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Чек.Ссылка;
КонецФункции

&НаСервере
Процедура МодифицироватьЧек(Чек, НомерЧекаКС)
	Док = Чек.ПолучитьОбъект();
	Док.ИдентификаторЧекаНаСервере = НомерЧекаКС;
	ИдентификаторЧекаНаСервере = НомерЧекаКС;
	Док.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры	


&НаСервере
Функция СтартПечатиЧека()
	// Вставить содержимое обработчика.
	ОтветФункции = "";
	
	Регион = Константы.ТекущийРегион.Получить();
	
	Чек = СоздатьЧекКПечати();
	ТекущийЧекКВозврату = Чек;
	Если Чек <> Неопределено Тогда
		//ДВ = Элементы.Список.ТекущаяСтрока.Ссылка.ДанныеЗаказа.ПолучитьОбъект();
		ДВ = фДанныеЗаказа.ПолучитьОбъект();
		ДВ.ВозвратныйЧек = Чек;
		ОтветКС = ОбменСКассовымСервером.НапечататьЧекНаСервере(Чек, Регион, 2);
		
		//ИсходныйЧек = Элементы.Список.ТекущаяСтрока.ПолучитьОбъект();
		ИсходныйЧек = фИсходныйЧек.ПолучитьОбъект();
		ИсходныйЧек.ЧекАннулирован = Истина;
		ИсходныйЧек.Записать(РежимЗаписиДокумента.Запись);
		
		Если ОтветКС.ЧекОтправлен = Ложь Тогда
			Возврат "ЧекНеСоздан";
		Иначе	
		    МодифицироватьЧек(Чек, ОтветКС.ИдЧека);
		КонецеСли;	
		
		ДВ.Записать(РежимЗаписиДокумента.Запись);
		Возврат "ЧекСоздан";
	Иначе
		Сообщить("Ошибка при создании чека на возврат!", СтатусСообщения.Важное);
		Возврат "ЧекНеСоздан";
	КонецеСли;	
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗаказа(Чек)
	Возврат Чек.ДанныеЗаказа.Ссылка;
КонецФункции	

&НаКлиенте
Процедура ОформитьВозврат(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецеСли;
	
	Если Элементы.Список.ТекущиеДанные.ЧекАннулирован Тогда
		Сообщить("Чек уже аннулирован!!");
		Возврат;
	КонецеСли;	
	
	
	Если Элементы.Список.ТекущиеДанные.ПараметрыЧекаОтсутствуют = Истина Тогда
		Сообщить("Отсутствуют параметры чека! Попробуйте сначала выполнить печать по этому чеку на мобильном принтере.");
		Возврат;
	КонецеСли;	
	
	От = Вопрос("Вы действительно хотите оформить возврат по чеку?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	Если От <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецеСли;	

	
	НомерЗаказа = Элементы.Список.ТекущиеДанные.НомерЗаказа;
	
	СтрукВозврата = СобратьДанныеТранзакцииАссист(НомерЗаказа);
	
	ОтменитьТранзакциюАссист = СтрукВозврата.ЕстьТранзакция;
	
	фИсходныйЧек = Элементы.Список.ТекущаяСтрока;
	фДанныеЗаказа = ПолучитьДанныеЗаказа(Элементы.Список.ТекущаяСтрока);
	
	Если ОтменитьТранзакциюАссист Тогда
		СтруктураДанныхAssist = СформироватьДанныеAssist(СтрукВозврата);
		СтрокаJSON = МодульОбмен_http.СформироватьСтрокуJSON(СтруктураДанныхAssist);
		РезультатВызова = ИнтеграцияAssistКлиент.ВызватьПрослойкуAssist(СтрокаJSON, "Отмена");
		Если РезультатВызова Тогда
			Возврат;
		Иначе
			ТекстВопроса = "Неудача при вызове интеграции Assist. Вы запустите приложение Assist самостоятельно? (будет пробит чек)";
			ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, "Ошибка интеграции Assist");
			Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецеСли;	
		КонецеСли;	
	КонецЕСли;	
	
	ФинальныеПроцедурыОплаты();
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеAssist(СтрукДанных)
	ДанныеAssist = ИнтеграцияAssistСервер.ПолучитьДанныеAssistПоОрганизации(СтрукДанных.Организация, СтрукДанных.ИнтернетМагазин);
	Струк = Новый Структура;
	Струк.Вставить("ordernum", СокрЛП(СтрукДанных.НомерЗаказа));
	Струк.Вставить("orderdate", Формат(СтрукДанных.ДатаТранзакции, "ДФ=dd.MM.yyyy"));
	Струк.Вставить("merchant_id", ДанныеAssist.merchantId);   //932965
	Струк.Вставить("login", ДанныеAssist.login);  //"life_mobile"
	Струк.Вставить("password", ДанныеAssist.password); //  "lifE2mobile"
	Возврат Струк;
КонецФункции


&НаКлиенте
Процедура ФинальныеПроцедурыОплаты()
	Ответ = СтартПечатиЧека();
	
	                                                                   
	Если Ответ = "ЧекНеНужен" Или Ответ = "ЧекНеСоздан" Тогда
		Если Ответ = "ЧекНеСоздан" Тогда
			Сообщить("Не могу отправить чек на сервер!");
		КонецеСли;	
	ИначеЕсли Ответ = "ЧекСоздан" Тогда
		//запуск фоновой проверки
		Доступность = Ложь;
		ФормуМожноЗакрыть = Ложь;
		ПодключитьОбработчикОжидания("ПроверкаЧекаНаСервереККМ", ИнтервалОпросаЧеков());
		ПроверкаЧекаНаСервереККМ();
	КонецеСли;	
КонецПроцедуры	

&НаСервере
Функция СобратьДанныеТранзакцииАссист(НомерЗаказа)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТранзакцииAssistСрезПоследних.Организация КАК Организация,
	            |	ТранзакцииAssistСрезПоследних.Заказ.Дата КАК ЗаказДата,
	            |	ТранзакцииAssistСрезПоследних.Рейс КАК Рейс,
	            |	ТранзакцииAssistСрезПоследних.Водитель КАК Водитель,
	            |	ТранзакцииAssistСрезПоследних.Экспедитор КАК Экспедитор,
	            |	ТранзакцииAssistСрезПоследних.ТипОплаты КАК ТипОплаты,
	            |	ТранзакцииAssistСрезПоследних.Заказ КАК Заказ,
	            |	ТранзакцииAssistСрезПоследних.Сумма КАК Сумма,
	            |	ТранзакцииAssistСрезПоследних.Заказ.ИнтернетМагазин КАК ИнтернетМагазин
	            |ИЗ
	            |	РегистрСведений.ТранзакцииAssist.СрезПоследних(, Заказ.Номер = &НомерЗаказа) КАК ТранзакцииAssistСрезПоследних
	            |ГДЕ
	            |	ТранзакцииAssistСрезПоследних.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийAssist.Оплата)";
	Зап.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	Рез = Зап.Выполнить();
	Струк = Новый Структура;
	Струк.Вставить("ЕстьТранзакция", Не Рез.Пустой());
	Струк.Вставить("НомерЗаказа", НомерЗаказа);
	Если Не Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		Если Выб.Следующий() Тогда
			Струк.Вставить("Организация", Выб.Организация);
			Струк.Вставить("ДатаТранзакции", Выб.ЗаказДата);
			Струк.Вставить("Рейс", Выб.Рейс);
			Струк.Вставить("Водитель", Выб.Водитель);
			Струк.Вставить("Экспедитор", Выб.Экспедитор);
			Струк.Вставить("ТипОплаты", Выб.ТипОплаты);
			Струк.Вставить("Заказ", Выб.Заказ);
			Струк.Вставить("Сумма", Выб.Сумма);
			Струк.Вставить("ИнтернетМагазин", Выб.ИнтернетМагазин);
		КонецЕсли;	
	КонецеСли;	
	Возврат Струк;
КонецФункции	

&НаКлиенте
Процедура ПроверкаЧекаНаСервереККМ() Экспорт
	Если КоличествоПовторовЗапросаСостоянияЧека > КоличествоЗапросовПоОтправленномуЧеку Тогда
		ФормуМожноЗакрыть = Истина;
		Сообщить("Чек НЕ сформирован! Документ будет закрыт!");
		Закрыть();		
	КонецеСли;	
	
	Регион = ПолучитьТекущийРегионНаСервере();
	ИдЧека = ПолучитьИДЧекаНаСервере();
	ОтветКС = ЗапросККСПоЧеку(ИдЧека, Регион);
	Если ОтветКС.ЕстьОшибка Тогда	
		Сообщить("Ошибка при получении данных о чеке!");
	Иначе	
		
	КонецеСли;	
	
	КоличествоПовторовЗапросаСостоянияЧека = КоличествоПовторовЗапросаСостоянияЧека + 1;
	
	Если ОтветКС.isDone Тогда
		ОтключитьОбработчикОжидания("ПроверкаЧекаНаСервереККМ");
		ЗаписатьПараметрыЧека(ОтветКС);
		СкрытьУведомлениеОтПользователя();
		ПечатьЧекаНаПринтере(ОтветКС);
		Доступность = Истина;
	Иначе
		//Сооб = Новый СообщениеПользователю;
		//Сооб.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		//Сооб.Текст = "(" + Строка(Объект.КоличествоПовторовЗапросаСостоянияЧека) + ") " + ОтветКС.status;
		//Сооб.Сообщить();
		ПоказатьУведомлениеПользователю("(" + Строка(КоличествоПовторовЗапросаСостоянияЧека) + ") " + ОтветКС.status);
	КонецеСли;
	
Конецпроцедуры	

&НаСервере
Функция ПолучитьТекущийРегионНаСервере() Экспорт
	Возврат Константы.ТекущийРегион.Получить();
КонецФункции	

&НаСервере
Функция ЗапросККСПоЧеку(ИдЧека, Регион) 
	Возврат ОбменСКассовымСервером.ЗапроситьДанныеЧека(ИдЧека, Регион);
КонецФункции	

&НаСервере
Функция ПолучитьИДЧекаНаСервере() 
	Возврат ТекущийЧекКВозврату.ИдентификаторЧекаНаСервере;
КонецФункции	


Процедура ПоказатьУведомлениеПользователю(ТексУведомления)
	Элементы.ГруппаУведомление.Видимость = Истина;
	Уведомление = ТексУведомления;
КонецПроцедуры

Процедура СкрытьУведомлениеОтПользователя()
	Элементы.ГруппаУведомление.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаНаПринтере(Параметры)
	ТекстЧекаПарам = ПолучитьТекстВозвратногоЧека();
	ТекстЧека = ТекстЧекаПарам.ТекстЧека;
	ШКЧека = ТекстЧекаПарам.СтрокаШК;
	ПечатьНаПринтереЧековКлиент.ПечатьТекста(ТекстЧека, ШКЧека, Истина);
	ЗаписатьПризнакРаспечатанностиВозвратногоЧека();
	ФормуМожноЗакрыть = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ФормуМожноЗакрыть Тогда
		Сообщить("Нельзя закрыть! Ожидаем печати чека!");
		Отказ = Истина;
	КонецеСли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметрыЧека(ПараметрыЧека)
	РаботаСЧекамиСервер.ЗаписатьПараметрыЧекаВРС(ТекущийЧекКВозврату.Ссылка, ПараметрыЧека);	
КонецПроцедуры	

&НаСервере
Функция ПолучитьТекстВозвратногоЧека()
	Возврат РаботаСЧекамиСервер.СформироватьТекстВозвратногоЧека(ТекущийЧекКВозврату.Ссылка);
КонецФункции	

&НаСервере
Процедура ИнициализироватьЗначенияПоЧеку()
	ИдентификаторЧекаНаСервере = "";
	КоличествоПовторовЗапросаСостоянияЧека = 0;
	ТекущийЧекКВозврату = "";
	ФормуМожноЗакрыть = Истина;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ИнтервалОпросаЧеков() 
	Возврат Константы.ИнтервалЗапросовПоОтправленномуЧеку.Получить();
КонецФункции	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОплатаAssist" Тогда
		ВозниклаОшибка = Ложь;
		СтруктураJSON = ИнтеграцияAssistКлиент.ДанныеJSONВСтруктуруAssist(Параметр,, ВозниклаОшибка);
		СтруктураРС = Новый Структура;
		Если СокрЛП(СтруктураJSON.STATE) <> "CANCEL" Тогда
			Возврат;
		КонецеСли;	
		ФиксацияAssistСервер(СтруктураРС, СтруктураJSON);
		
		Если СтруктураJSON.orderstate = "Отменён" Тогда  //??????????
			ФинальныеПроцедурыОплаты();
		КонецеСли;	
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ФиксацияAssistСервер(СтруктураРС, СтруктураJSON)
	ДанныеТранзакции = СобратьДанныеТранзакцииАссист(СокрЛП(СтруктураJSON.ordernum));
	ДанныеAssist = ИнтеграцияAssistСервер.ПолучитьДанныеAssistПоОрганизации(ДанныеТранзакции.Организация, ДанныеТранзакции.ИнтернетМагазин);
	
	Если СокрЛП(СтруктураJSON.STATE) = "PAY" Тогда
		Возврат;
	ИначеЕсли СокрЛП(СтруктураJSON.STATE) = "CANCEL" Тогда
		СтруктураРС.Вставить("ТипОперации", Перечисления.ТипыОперацийAssist.Отмена);
	КонецеСли;	
	
	
	СтруктураРС.Вставить("Заказ", ДанныеТранзакции.Заказ);
	СтруктураРС.Вставить("Сумма", Число(ДанныеТранзакции.Сумма));
	СтруктураРС.Вставить("Организация", ДанныеТранзакции.Организация);
	СтруктураРС.Вставить("Рейс", ДанныеТранзакции.Рейс);
	СтруктураРС.Вставить("Экспедитор", ДанныеТранзакции.Экспедитор);
	СтруктураРС.Вставить("Водитель", ДанныеТранзакции.Водитель);
	СтруктураРС.Вставить("merchant_id", ДанныеAssist.merchantId);    // 932965
	СтруктураРС.Вставить("Оплачен", ?(СтруктураJSON.orderstate = "Отменён", Истина, Ложь));
	СтруктураРС.Вставить("ДатаТранзакции", ИнтеграцияAssistСервер.ПреобразованиеДатыAssist(СтруктураJSON.operationdate));
	
	//Если СтруктураJSON.payment_type = "CASH" Тогда
	//	СтруктураРС.Вставить("ТипОплаты", Справочники.ТипыОплат.Наличные);
	//ИначеЕсли СтруктураJSON.payment_type = "CARD" Тогда	
	СтруктураРС.Вставить("ТипОплаты", Справочники.ТипыОплат.Терминал);
	//КонецеСли;	
	
	СтруктураРС.Вставить("ТипОперации", Перечисления.ТипыОперацийAssist.Отмена);
	
	ИнтеграцияAssistСервер.ЗафиксироватьДанныеВРСAssist(СтруктураРС);
КонецПроцедуры	




