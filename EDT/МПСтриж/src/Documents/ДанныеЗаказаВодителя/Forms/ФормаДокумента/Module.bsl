
//&НаКлиенте
//Процедура ДоставленныеТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
//	Отказ = Истина;
//КонецПроцедуры

//&НаКлиенте
//Процедура ДоставленныеТоварыПередУдалением(Элемент, Отказ)
//	Отказ = Истина;
//КонецПроцедуры

&НаКлиенте
Процедура ДоставленныеТоварыКоличествоДоставленоПриИзменении(Элемент)
	Элементы.ДоставленныеТовары.ТекущиеДанные.Сумма = Элементы.ДоставленныеТовары.ТекущиеДанные.Цена * Элементы.ДоставленныеТовары.ТекущиеДанные.КоличествоДоставлено;
	РасчетСуммы();
КонецПроцедуры

&НаСервере
Функция ДинамическийРасчетСтоимостиДоставки()
	Если Объект.ОплаченаСтоимостьДоставкиПриОтменеЗаказа Тогда
		Возврат Ложь;
	КонецЕсли;	
	лСтоимостьДоставки = 0;
	СтоимостьДоставкиПересчитана = Ложь;
	Объект.СуммаДоставка = Объект.Реализация.СуммаДоставка;
	СуммаТоваров = Объект.ДоставленныеТовары.Итог("Сумма");
	Если Объект.Реализация.РасчетСтоимостиДоставки.Количество() <> 0 Тогда		
		ТабСтоимости = Объект.Реализация.РасчетСтоимостиДоставки.Выгрузить();
		ТабСтоимости.Сортировать("СуммаВыкупа Возр");
		Для Каждого Тек Из ТабСтоимости Цикл
			Если СуммаТоваров >= Тек.СуммаВыкупа Тогда
				лСтоимостьДоставки = Тек.СтоимостьДоставки;
				СтоимостьДоставкиПересчитана = Истина;
			КонецеСли;	
		КонецЦикла;	
	КонецеСли;
	Если СтоимостьДоставкиПересчитана Тогда
		Объект.СуммаДоставка = лСтоимостьДоставки;
		Если Объект.Реализация.СуммаДоставка <> лСтоимостьДоставки Тогда
			Объект.РасчетнаяСтоимостьДоставки = Истина;
		Иначе
			Объект.РасчетнаяСтоимостьДоставки = Ложь;
		КонецеСли;	
	Иначе
		Объект.РасчетнаяСтоимостьДоставки = Ложь;
	КонецеСли;	
	Возврат СтоимостьДоставкиПересчитана;
КонецФункции	

&НаКлиенте
Процедура РасчетСуммы()
	//сумма предоплаты не может быть больше суммы товаров
	Если Объект.СуммаПредоплаты <> 0 Тогда
		Если Объект.СуммаДоставка + Объект.ДоставленныеТовары.Итог("Сумма") < Объект.СуммаПредоплаты Тогда
			Объект.СуммаПредоплаты = Объект.СуммаДоставка + Объект.ДоставленныеТовары.Итог("Сумма");
		КонецеСли;
	КонецеСли;	
	//Объект.СуммаНал = Объект.СуммаДоставка + Объект.ДоставленныеТовары.Итог("Сумма");
	СтоимостьДоставкиПересчитана = ДинамическийРасчетСтоимостиДоставки();
	//Если СтоимостьДоставкиПересчитана Тогда
	Объект.СуммаНал = Объект.СуммаДоставка + Объект.ДоставленныеТовары.Итог("Сумма") - Объект.СуммаПредоплаты;
	//КонецеСли;	
КонецПроцедуры	

Функция ВыгружатьОперативно()
	Возврат Константы.ВыгружатьДанныеОперативно.Получить();
КонецФункции	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//Если ВыгружатьОперативно() Тогда
	//	ОбщийМодуль.ВыгрузитьЗаказ(Объект.Ссылка);
	//КонецеСли;
	ОбработчикФоновыхЗаданий.ВыполнитьОбменHTTPВФоне();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	//Элементы.ГруппаПодъем.Видимость = Объект.Реализация.ПодъемОплаченПартнером;
	//Элементы.ГруппаПодъем.Свернута = Истина;
	ФормуМожноЗакрыть = Истина;
	КоличествоЗапросовПоОтправленномуЧеку = Константы.КоличествоЗапросовПоОтправленномуЧеку.Получить();
	Если Константы.ИспользоватьОплатуСБП.Получить() тогда
		Элементы.ТипОплаты.СписокВыбора.Добавить(Справочники.ТипыОплат.СБП);
	КонецеСли;	
	
КонецПроцедуры

Функция ЭтоЗабор()
	Если Объект.Реализация.ТипЗаказа = Перечисления.ТипЗаказа.Забор Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецеСли;	
КонецФункции	

&НаКлиенте
Процедура УстановитьВидимость() Экспорт
	Если ЭтоЗабор() Тогда
		Элементы.ГруппаДоставка.Видимость = Ложь;
		Элементы.ГруппаЗаборы.Видимость = Истина;
	Иначе
		Элементы.ГруппаДоставка.Видимость = Истина;
		Элементы.ГруппаЗаборы.Видимость = Ложь;
	КонецеСли;	
КонецПроцедуры

Функция ЕстьОбъемныеБрейки(СписокБрейков)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ОбъемныеБрейки.Ссылка Как Брейк
	            |ИЗ
	            |	Справочник.ОбъемныеБрейки КАК ОбъемныеБрейки
	            |ГДЕ
	            |	ОбъемныеБрейки.Владелец = &ТарифнаяСетка";
	Зап.УстановитьПараметр("ТарифнаяСетка", Объект.Реализация.ТарифнаяСетка);
	
	Рез = Зап.Выполнить();
	Если Не Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		Пока Выб.Следующий() Цикл
			СписокБрейков.Добавить(Выб.Брейк);
		КонецЦикла;	
		Возврат Истина;
	Иначе
	    Возврат Ложь;
	КонецеСли;	
КонецФункции	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	СписокБр = Новый СписокЗначений;
	Если ЭтоЗабор() И ЕстьОбъемныеБрейки(СписокБр) Тогда
		Если Объект.ОбъемныйБрейк.Пустая() Тогда
			ВыбБрейк = СписокБр.ВыбратьЭлемент("Выберите объём...");
			Если ВыбБрейк <> Неопределено Тогда
				Объект.ОбъемныйБрейк = ВыбБрейк.Значение;
			КонецеСли;	
		КонецеСли;	
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	РасчетСуммы();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	Если ЭтоЗабор() Тогда
		ЕстьОбъемныеБрейки(Элементы.ОбъемныйБрейк.СписокВыбора);
	КонецеСли;	
	
	Если Объект.Реализация.ЧастичныйВыкупЗапрещен Тогда
		Элементы.ДекорацияОсновная.Видимость = Ложь;
		Элементы.ДекорацияИтогоСКлиента.Видимость = Истина;
		Элементы.ДоставленныеТовары.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияОсновная.Видимость = Истина;
		Элементы.ДекорацияИтогоСКлиента.Видимость = Ложь;		
		Элементы.ДоставленныеТовары.Доступность = Истина;
	КонецеСли;
	
	Если Объект.Реализация.СменаТипаОплатыЗапрещена Тогда
		Элементы.ДекорацияСменаТипаОплаты.Видимость = Истина;
	Иначе
		Элементы.ДекорацияСменаТипаОплаты.Видимость = Ложь;
	КонецеСли;
	
	//ЧекиПоЗаказу.Параметры.УстановитьЗначениеПараметра("Заказ", Объект.Реализация.Ссылка);
	
	Если Объект.ТипОплаты = Справочники.ТипыОплат.Терминал Или Объект.ТипОплаты = Справочники.ТипыОплат.Наличные Тогда
		Элементы.ТипОплаты.Видимость = Истина;
	Иначе
		Элементы.ТипОплаты.Видимость = Ложь;
	КонецеСли;
	
	Если Объект.Реализация.ПечататьЧек Тогда
		Элементы.АдресОтправкиЧека.Видимость = Истина;
	Иначе
		Элементы.АдресОтправкиЧека.Видимость = Ложь;
	КонецЕсли;	
	
	Объект.ТестоваяСреда = Константы.ТестоваяСреда.Получить();
	Объект.ВесЗаказа = Объект.Реализация.ВесЗаказа;
	
	УстановитьВидимостьДанныхПодъема();
	РассчитатьПодъемНаСервереСПроверкой();
	Элементы.СуммаНал.Заголовок = Объект.ТипОплаты.Наименование;
	Объект.ВерсияКонфигурации = Метаданные.Версия;
	Элементы.кнОплатитьСтоимостьДоставки.Видимость = Объект.Реализация.ТребуетсяОплатаСтоимостиДоставкиПриОтменеЗаказа;	
	
	Если Объект.СуммаПредоплаты <> 0 Тогда
		Элементы.ГруппаПредоплата.Видимость = Истина;
	Иначе
		Элементы.ГруппаПредоплата.Видимость = Ложь;
	КонецеСли;
	
	Если Объект.Реализация.Рейс.ВыданТерминалAssist Тогда
		Объект.ОплатаЧерезAssist = Истина;		
	КонецеСли;
	ПриСменеТипаОплатыНаСервере();
	
	//Если Объект.БылаПроизведенаПримерка Тогда
	//	Таб = Объект.ДоставленныеТовары.Выгрузить();
	//	Таб.Свернуть("Номенклатура", "КоличествоДоставлено");
	//	Объект.КоличествоSKUПримерки = Таб.Количество();
	//КонецеСли;	
	
	
КонецПроцедуры




&НаКлиенте
Процедура ДоставленныеТоварыПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	//Если Элементы.ДоставленныеТовары.ТекущиеДанные <> Неопределено Тогда
	//	ТекущийТовар = "<HTML><body><marquee behavior=""scroll"" direction=""left"">" + Элементы.ДоставленныеТовары.ТекущиеДанные.Номенклатура + "</marquee></body></html>";
	//КонецеСли;	
КонецПроцедуры

Функция СоздатьЧекКПечати()
	
	Чек = Документы.ЧекКПечати.СоздатьДокумент();
	Чек.Дата = ТекущаяДата();
	Чек.ТипОплаты = Объект.ТипОплаты;
	Чек.ДанныеЗаказа = Объект.Ссылка;
	Чек.АдресОтправкиЧека = Объект.АдресОтправкиЧека;
	Чек.СуммаПредоплаты = Объект.СуммаПредоплаты;
	
	Для Каждого Тек Из Объект.ДоставленныеТовары Цикл
		Если Тек.КоличествоДоставлено < 0 Тогда
			Продолжить;
		КонецеСли;	
		Нов = Чек.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
		Нов.Количество = Тек.КоличествоДоставлено;
		//Нов.КодМаркировки = ""; //тестовый релиз с фотографированием
	КонецЦикла;	
	
	Попытка
		Чек.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Чек.Ссылка;
КонецФункции

&НаСервере
Процедура МодифицироватьЧек(Чек, НомерЧекаКС)
	Док = Чек.ПолучитьОбъект();
	Док.ИдентификаторЧекаНаСервере = НомерЧекаКС;
	Док.ЧекПробитНаСервере = истина;
	Док.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры	

&НаСервере
Процедура ВыставитьРеквизитОшибкиФормированияЧекаНаЗаказе(ЕстьОшибка)
	Док = Объект.Реализация.ПолучитьОбъект();
	Док.ОшибкаФормированияЧекаНаСервере = ЕстьОшибка;
	Док.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры	

&НаСервере
Функция СтартПечатиЧека()
	// Вставить содержимое обработчика.
	//ОтветФункции = "";
	ОтветФункции = Новый Структура;
	
	
	ОтветНеобходимостиЧека = ПроверкаНеобходимостиЧека();
	Если ОтветНеобходимостиЧека = "ЧекНеНужен" Тогда
		Возврат ОтветНеобходимостиЧека;
	КонецеСли;	
	
	Регион = Константы.ТекущийРегион.Получить();
	Если Регион.Пустая() Тогда
		Сообщить("Не установлен регион! Печать чека невозможна!", СтатусСообщения.Важное);
		ОтветФункции.Вставить("Результат", "ЧекНеСоздан");
		ОтветФункции.Вставить("Описание", "");
		//Возврат "ЧекНеСоздан";
		Возврат ОтветФункции;
	КонецеСли;
	
	Чек = СоздатьЧекКПечати();
	
	//Если Объект.ТестоваяСреда Тогда
	//	ОтветФункции.Вставить("Результат", "ЧекНеСоздан");
	//	ОтветФункции.Вставить("Описание", "ЧекНеСоздан (тестовая)");
	//	Возврат ОтветФункции;		
	//КонецеСли;
	
	
	
	Если Чек <> Неопределено Тогда
		Объект.Чек = Чек;
		ОтветКС = ОбменСКассовымСервером.НапечататьЧекНаСервере(Чек, Регион, 1);
		
		Если ОтветКС.ЧекОтправлен = Ложь Тогда
			Объект.ОшибкаФормированияЧекаНаСервере = Истина;
			ВыставитьРеквизитОшибкиФормированияЧекаНаЗаказе(Истина);
			//Возврат "ЧекНеСоздан";
			ОтветФункции.Вставить("Результат", "ЧекНеСоздан");
			ОтветФункции.Вставить("Описание", ОтветКС.Ошибка);
			Возврат ОтветФункции;
		Иначе	
		    МодифицироватьЧек(Чек, ОтветКС.ИдЧека);
			
		    Объект.ДатаОтправкиЧекаНаПечать = ТекущаяДата();			
		КонецеСли;	
		Если Объект.Реализация.ОшибкаФормированияЧекаНаСервере Тогда
			ВыставитьРеквизитОшибкиФормированияЧекаНаЗаказе(Ложь);
		КонецеСли;
		//Возврат "ЧекСоздан";
		ОтветФункции.Вставить("Результат", "ЧекСоздан");
		ОтветФункции.Вставить("Описание", "");
		Возврат ОтветФункции;
		
	Иначе
		Объект.ОшибкаФормированияЧекаНаСервере = Истина;
		ВыставитьРеквизитОшибкиФормированияЧекаНаЗаказе(Истина);
		
		//Сообщить("Ошибка при создании чека!", СтатусСообщения.Важное);
		//Возврат "ЧекНеСоздан";
		
		ОтветФункции.Вставить("Результат", "ЧекНеСоздан");
		ОтветФункции.Вставить("Описание", "Ошибка создания чека на стороне МП!");
		Возврат ОтветФункции;
	КонецеСли;	
КонецФункции

&НаСервере
Функция ПроверкаНеобходимостиЧека()
	РежимПечатиЧеков = Константы.ТекущийРегион.Получить().РежимПечатиЧековРМЭкипажа;
	
	Если РежимПечатиЧеков = Перечисления.ВариантыПечатиЧековРМЭкипажа.НеПечататьЧек Или РежимПечатиЧеков.Пустая() Тогда
		Возврат "ЧекНеНужен";
	КонецеСли;	
	
	Если Не Объект.Реализация.ПечататьЧек Тогда
		Возврат "ЧекНеНужен";
	КонецЕсли;	
	
	ЕстьТовары = Ложь;
	Для Каждого Тек Из Объект.ДоставленныеТовары Цикл
		Если Тек.КоличествоДоставлено < 0 Или Тек.КоличествоДоставлено = 0 Тогда
			Продолжить;
		КонецеСли;	
		ЕстьТовары = Истина;
		Если ЕстьТовары Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЕстьТовары И Объект.СуммаДоставка = 0 Тогда
		Возврат "ЧекНеНужен";
	КонецЕсли;	
	
	Возврат "ЧекНужен";
КонецФункции	

&НаСервереБезКонтекста
Функция ИнтервалОпросаЧеков() 
	Возврат Константы.ИнтервалЗапросовПоОтправленномуЧеку.Получить();
КонецФункции	

&НаСервере
Функция ПроверкаНаУжеСозданныйЧекСегодняПоЭтомуЗаказу()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	ПараметрыЧеков.ФПД КАК ФискальныйПризнакДокумента
	            |ИЗ
	            |	РегистрСведений.ПараметрыЧеков КАК ПараметрыЧеков
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекКПечати КАК ЧекКПечатиТаблица
	            |		ПО ПараметрыЧеков.ЧекКПечати = ЧекКПечатиТаблица.Ссылка
	            |ГДЕ
	            |	ПараметрыЧеков.Период МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ЧекКПечатиТаблица.ДанныеЗаказа.Реализация.Ссылка = &Заказ
	            |	И ПараметрыЧеков.ЧекНапечатан = ЛОЖЬ
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ПараметрыЧеков.Период УБЫВ";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()) + 25000); 
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Зап.УстановитьПараметр("Заказ", Объект.Реализация.Ссылка);
	
	Струк = Новый Структура;
	Струк.Вставить("ЧековНет", Истина);
	Струк.Вставить("НомерФПД", "");
	
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Струк;
	Иначе
		Выб = Рез.Выбрать();
		Если Выб.Следующий() Тогда
			Струк.Вставить("ЧековНет", Ложь);
			Струк.Вставить("НомерФПД", Выб.ФискальныйПризнакДокумента);
			Возврат Струк;
		КонецеСли;
	КонецеСли;	
КонецФункции	

&НаСервере
Функция ПроверкаНаВозможностьПробитияЧекаСВыбраннымТипомОплаты(ПроверяемыйТипОплаты)
	// если коды организаций равны, то проверка не нужна
	Если ПроверяемыйТипОплаты = Справочники.ТипыОплат.СБП Тогда
		Если СокрЛП(Объект.Реализация.КодОрганизацииНаличнойОплаты) = СокрЛП(Объект.Реализация.КодОрганизацииОплатыПоСБП) И
			СокрЛП(Объект.Реализация.КодОрганизацииОплатыПоТерминалу) = СокрЛП(Объект.Реализация.КодОрганизацииОплатыПоСБП) Тогда
			Возврат Истина;
		КонецеСли;	
	КонецеСли;
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПараметрыЧеков.ФН КАК ФН
	            |ИЗ
	            |	РегистрСведений.ПараметрыЧеков КАК ПараметрыЧеков
	            |ГДЕ
	            |	ПараметрыЧеков.ФН <> ЗНАЧЕНИЕ(Справочник.ФН.ПустаяСсылка)
	            |	И ПараметрыЧеков.ЧекКПечати.ДанныеЗаказа.Реализация = &Реализация
	            |	И ПараметрыЧеков.ЧекКПечати.ТипОплаты <> &ТипОплаты";
	Зап.УстановитьПараметр("Реализация", Объект.Реализация);
	Зап.УстановитьПараметр("ТипОплаты", ПроверяемыйТипОплаты);
	
	Рез = Зап.Выполнить();
	
	Возврат Рез.Пустой();
КонецФункции	

&НаСервере
Функция РегистрацияОплатыСПБ()
	СтруктураОтвета = Новый Структура;
	qrID = "";
	qrUrl = "";
	
	СуммаОплаты = Объект.СуммаНал;
	
	ОтветВызоваРегистрации = СистемаБыстрыхПлатежейСервер.ЗарегистрироватьОплатуВСБП(Объект.Реализация, СуммаОплаты, Справочники.Организации.НайтиПоКоду(Объект.Реализация.КодОрганизацииОплатыПоСБП).РасчетныйСчетСБП, qrID, qrUrl);
	если ОтветВызоваРегистрации.РезультатВызова Тогда
		СтруктураОтвета.Вставить("РезультатВызова", Истина);
		СтруктураОтвета.Вставить("qrID", qrID);
		СтруктураОтвета.Вставить("qrUrl", qrUrl);
	Иначе
		Сообщить("Произошла ошибка: " + ОтветВызоваРегистрации.ОписаниеОшибки);
		СтруктураОтвета.Вставить("РезультатВызова", Ложь);
	КонецеСли;
	Возврат СтруктураОтвета;
КонецФункции
	
&НаКлиенте
Функция ИнициализироватьИОткрытьФормуОплатыСБП(СтруктураПараметров)
	ФормаСБП = ПолучитьФорму("Обработка.РаботаССБП.Форма.ФормаРегистрацииОплатыСБП");
	ФормаСБП.ID_QR = СтруктураПараметров.qrID;
	ФормаСБП.URL_QR = СтруктураПараметров.qrUrl;
	ФормаСБП.Заказ = Объект.Реализация;
	ФормаСБП.СтатусОплаты = "НЕ ОПЛАЧЕНО";
	ФормаСБП.СуммаОплаты = Объект.СуммаНал;
	ФормаСБП.ПроизводитьОпросСостоянияОплаты = Истина;
	
	
	ОплатаЗафиксирована = ФормаСБП.ОткрытьМодально();
	Возврат ОплатаЗафиксирована;
КонецФункции	

&НаСервере
Функция ТребуетсяПодписаниеСопроводительныхДокументов()
	Если Объект.Реализация.ТипОплаты = Справочники.ТипыОплат.БезналичныйРасчет Или Объект.Реализация.ПодписаниеИВозвратСопрДокументов Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	Если Команда <> -1 Тогда
		Объект.ОплаченаСтоимостьДоставкиПриОтменеЗаказа = Ложь;		
	КонецЕсли;	
	
	//обработка оплаты СБП
	Если Объект.ТипОплаты = ПредопределенноеЗначение("Справочник.ТипыОплат.СБП") Тогда
		РезультатПроверки = ПроверкаНаВозможностьПробитияЧекаСВыбраннымТипомОплаты(Объект.ТипОплаты);
		Если Не РезультатПроверки Тогда
			Сообщить("Обнаружены ранее пробитые чеки! Оплата с СБП невозможна!");
			Возврат;
		КонецеСли;	
		ОтветВызова = РегистрацияОплатыСПБ();
		Если ОтветВызова.РезультатВызова Тогда
			ОтветВызоваФормыСБП = ИнициализироватьИОткрытьФормуОплатыСБП(ОтветВызова);
			Если ОтветВызоваФормыСБП = Неопределено Тогда
				ОтветВызоваФормыСБП = Ложь;
			конецеСли;	
			Если Не ОтветВызоваФормыСБП Тогда
				Сообщить("Оплата СБП не прошла! Выберите другой тип оплаты!");
				Возврат;
			Конецесли;	
		Иначе
			Возврат;
		КонецеСли;
	КонецеСли;	
	
	
	//обработка оплаты СБП - конец
	
	
	
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(ПараметрыЗаписи);
	
	Если Объект.ТипОплаты = ПредопределенноеЗначение("Справочник.ТипыОплат.Терминал") И Объект.ОплатаЧерезAssist И Объект.СуммаНал > 0 Тогда
		СтруктураДанныхAssist = СформироватьДанныеAssist();
		СтрокаJSON = МодульОбмен_http.СформироватьСтрокуJSON(СтруктураДанныхAssist);
		РезультатВызова = ИнтеграцияAssistКлиент.ВызватьПрослойкуAssist(СтрокаJSON);
		Если РезультатВызова Тогда
			Возврат;
		Иначе
			ТекстВопроса = "Неудача при вызове интеграции Assist. Вы запустите приложение Assist самостоятельно? (будет пробит чек)";
			ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, "Ошибка интеграции Assist");
			Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецеСли;	
		КонецеСли;	
	КонецеСли;	
	
	// все действия собственно, после самой записи
	ФинальныеПроцедурыОплаты();
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеAssist()
	ДанныеAssist = ИнтеграцияAssistСервер.ПолучитьДанныеAssistПоОрганизации(Объект.Организация, Объект.Реализация.ИнтернетМагазин);
	Струк = Новый Структура;
	Струк.Вставить("ordernum", СокрЛП(Объект.Реализация.Номер));
	Струк.Вставить("amount",  Формат(Объект.СуммаНал, "ЧРД=.; ЧГ="));
	Струк.Вставить("merchant_id", ДанныеAssist.merchantId);   //932965
	Струк.Вставить("login", ДанныеAssist.login);  //"life_mobile"
	Струк.Вставить("password", ДанныеAssist.password); //  "lifE2mobile"
	Возврат Струк;
КонецФункции
	
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФотоснимка(ТипДокумента)
	Струк = Новый Структура;
	Струк.Вставить("КачествоФото", ТипДокумента.КачествоФото);
	Струк.Вставить("ЧерноБелоеФото", ТипДокумента.ЧерноБелоеФото);
	Струк.Вставить("ОтметкаНаФотоснимке", ТипДокумента.ОтметкаНаФотоснимке);
	
	Возврат Струк;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьТипФотоснимкаСопрДокументы()
	Возврат Справочники.ТипыПрикрепленныхДокументов.ФотоСопроводительныхДокументов;
КонецФункции	


&НаСервере
Процедура ОбработатьДанныеНаСервере(АдресВХранилище, Документ, Заказ, РасширениеФайла, ТипСодержимого, ТипДокумента)
	ФотографированиеСервер.ЗаписатьДанныеФайла(ПолучитьИзВременногоХранилища(АдресВХранилище), Документ, Заказ, ТипДокумента, РасширениеФайла, ТипСодержимого);
	УдалитьИзВременногоХранилища(АдресВХранилище);
КонецПроцедуры	

&НаКлиенте
Процедура Безналичные_ТребуетсяПодписаниеСопроводительныхДокументовПослеЗаписи()
	Если ТребуетсяПодписаниеСопроводительныхДокументов() Тогда
		ТекстВопроса = "По данному заказу необходимо подписать сопроводительные документы. Вы подписали?
						|Если Да, то сделайте пожалуйста Фото документа.";
		От = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		Если От = КодВозвратаДиалога.Да Тогда
			ВыбТип = ПолучитьТипФотоснимкаСопрДокументы();
			
			
			ПараметрыФото = ПолучитьПараметрыФотоснимка(ВыбТип);
			
			Данные = ФотографированиеКлиент.СделатьФотоснимок(ПараметрыФото.КачествоФото, ПараметрыФото.ЧерноБелоеФото, ПараметрыФото.ОтметкаНаФотоснимке);  //Элементы.Список.ТекущаяСтрока, Элементы.Список.ТекущаяСтрока
			
			// тестирование через эмулятор, камера не пашет
			
			//Д = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			//Если Не Д.Выбрать() Тогда
			//	Возврат;
			//КонецеСли;
			//
			//Данные = Новый ДвоичныеДанные(Д.ПолноеИмяФайла);
			Если Данные <> Неопределено Тогда
				Адрес = Новый УникальныйИдентификатор();
				АдресВХранилище = ПоместитьВоВременноеХранилище(Данные.Данные, Адрес);
				ОбработатьДанныеНаСервере(АдресВХранилище, Объект.Реализация, Объект.Реализация, Данные.РасширениеФайла, Данные.ТипСодержимого, ВыбТип);
			КонецеСли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ФинальныеПроцедурыОплаты()
	ОтветНеобходимостиЧека = ПроверкаНеобходимостиЧека();
	Если ОтветНеобходимостиЧека = "ЧекНеНужен" Тогда
		Безналичные_ТребуетсяПодписаниеСопроводительныхДокументовПослеЗаписи();
		Закрыть();
		Возврат;
	КонецеСли;	
	
	ДанныеПредыдущихЧеков = ПроверкаНаУжеСозданныйЧекСегодняПоЭтомуЗаказу();
	
	Если ДанныеПредыдущихЧеков.ЧековНет = Ложь Тогда
		От = Вопрос("Сегодня вами уже был сформирован чек по этому заказу, его ФПД " + ДанныеПредыдущихЧеков.НомерФПД + ". Вы все равно хотите напечатать новый чек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если От = КодВозвратаДиалога.Нет Тогда
			Безналичные_ТребуетсяПодписаниеСопроводительныхДокументовПослеЗаписи();
			Закрыть();
			Возврат;
		КонецеСли;	
	КонецеСли;	
	
	ОтветСтруктура = СтартПечатиЧека();
	Ответ = ОтветСтруктура.Результат;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(ПараметрыЗаписи);
	
	
	Безналичные_ТребуетсяПодписаниеСопроводительныхДокументовПослеЗаписи();
	
	Если Ответ = "ЧекНеНужен" Или Ответ = "ЧекНеСоздан" Тогда
		Если Ответ = "ЧекНеСоздан" Тогда
			Сообщить("Не могу отправить чек на сервер! Описание проблемы: " + ОтветСтруктура.Описание);
		КонецеСли;	
		Закрыть();
	ИначеЕсли Ответ = "ЧекСоздан" Тогда
		//запуск фоновой проверки
		ТолькоПросмотр = Истина;
		Элементы.ФормаЗаписатьДокумент.Доступность = Ложь;
		ФормуМожноЗакрыть = Ложь;
		ПодключитьОбработчикОжидания("ПроверкаЧекаНаСервереККМ", ИнтервалОпросаЧеков());
		ПроверкаЧекаНаСервереККМ();
	КонецеСли;	
КонецПроцедуры	

&НаСервере
Функция ПолучитьТекущийРегионНаСервере() Экспорт
	Возврат Константы.ТекущийРегион.Получить();
КонецФункции	

&НаСервере
Функция ЗапросККСПоЧеку(ИдЧека, Регион) 
	Возврат ОбменСКассовымСервером.ЗапроситьДанныеЧека(ИдЧека, Регион);
КонецФункции	

&НаСервере
Функция ПолучитьИДЧекаНаСервере() 
	Возврат Объект.Чек.ИдентификаторЧекаНаСервере;
КонецФункции	

&НаСервере
Процедура ЗаписатьПараметрыЧека(ПараметрыЧека)
	РаботаСЧекамиСервер.ЗаписатьПараметрыЧекаВРС(Объект.Чек, ПараметрыЧека);
	Объект.ДатаПечатиЧеков = ТекущаяДата();
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(ПараметрыЗаписи);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаЧекаНаСервереККМ() Экспорт
	Если Объект.КоличествоПовторовЗапросаСостоянияЧека > КоличествоЗапросовПоОтправленномуЧеку Тогда
		ФормуМожноЗакрыть = Истина;
		Сообщить("Чек НЕ сформирован! Документ будет закрыт!");
		Закрыть();		
	КонецеСли;	
	
	Регион = ПолучитьТекущийРегионНаСервере();
	ИдЧека = ПолучитьИДЧекаНаСервере();
	ОтветКС = ЗапросККСПоЧеку(ИдЧека, Регион);
	Если ОтветКС.ЕстьОшибка Тогда	
		Сообщить("Ошибка при получении данных о чеке!");
	Иначе	
		
	КонецеСли;	
	
	Объект.КоличествоПовторовЗапросаСостоянияЧека = Объект.КоличествоПовторовЗапросаСостоянияЧека + 1;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(ПараметрыЗаписи);
	
	Если ОтветКС.isDone Тогда
		ОтключитьОбработчикОжидания("ПроверкаЧекаНаСервереККМ");
		ЗаписатьПараметрыЧека(ОтветКС);
		СкрытьУведомлениеОтПользователя();
		ПечатьЧекаНаПринтере(ОтветКС);
		
		Закрыть();
	Иначе
		//Сооб = Новый СообщениеПользователю;
		//Сооб.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		//Сооб.Текст = "(" + Строка(Объект.КоличествоПовторовЗапросаСостоянияЧека) + ") " + ОтветКС.status;
		//Сооб.Сообщить();
		ПоказатьУведомлениеПользователю("(" + Строка(Объект.КоличествоПовторовЗапросаСостоянияЧека) + ") " + ОтветКС.status);
	КонецеСли;
	
Конецпроцедуры	


Процедура ПоказатьУведомлениеПользователю(ТексУведомления)
	Элементы.ГруппаУведомление.Видимость = Истина;
	Уведомление = ТексУведомления;
КонецПроцедуры

Процедура СкрытьУведомлениеОтПользователя()
	Элементы.ГруппаУведомление.Видимость = Ложь;
КонецПроцедуры


&НаСервере
Процедура ЗаписатьПризнакРаспечатанностиЧека()
	РаботаСЧекамиСервер.ЗаписьСтатусаЧекНапечатан(Объект.Чек);
КонецПроцедуры	

&НаСервере
Функция ПолучитьТекстЧека()
	Возврат РаботаСЧекамиСервер.СформироватьТекстЧека(Объект.Чек);
КонецФункции	


&НаКлиенте
Процедура ПечатьЧекаНаПринтере(Параметры)
	ТекстЧекаПарам = ПолучитьТекстЧека();
	ТекстЧека = ТекстЧекаПарам.ТекстЧека;
	ШКЧека = ТекстЧекаПарам.СтрокаШК;
	ПечатьНаПринтереЧековКлиент.ПечатьТекста(ТекстЧека, ШКЧека, Истина);
	ЗаписатьПризнакРаспечатанностиЧека();
	ФормуМожноЗакрыть = Истина;
КонецПроцедуры	

&НаКлиенте
//Процедура ГруппаСтраницыДоставкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
//	Если ТекущаяСтраница = Элементы.ГруппаЧеки Тогда
//		Элементы.ЧекиПоЗаказу.Обновить();
//	КонецеСли;	
//КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Не ФормуМожноЗакрыть Тогда
		Сообщить("Нельзя закрыть! Ожидаем печать чека!");
		Отказ = Истина;
	КонецеСли;	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПодъемНаСервере()
	// Вставить содержимое обработчика.
	ДанныеПодъема = Новый Структура;
	ДанныеПодъема.Вставить("ВидПодъема", Объект.ВидПодъема);
	ДанныеПодъема.Вставить("Этаж", Объект.Этаж);
	ДанныеПодъема.Вставить("НомерЗаказа", СокрЛП(Объект.Реализация.Номер));
	ДанныеПодъема.Вставить("КоличествоХодокНаЭтаж", Объект.КоличествоХодокНаЭтаж);
	ДанныеПодъема.Вставить("ВесЗаказа", Объект.ВесЗаказа);
	
	Результат = МодульОбмен.РассчитатьПодъем(ДанныеПодъема);
	Если Результат.Успешно Тогда
		Объект.КодПодъемногоБрейка = Результат.Брейк;
		Объект.СтоимостьПодъемаРассчитанная = Результат.СтоимостьПодъема;
		Объект.СтоимостьПодъемаПодтвержденная = Результат.СтоимостьПодъема;
	Иначе
		//Сообщить("Ошибка при расчете подъема! (" + Результат.ОписаниеОшибки + ")");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПодъемНаСервереСПроверкой()
	
	Если (Объект.ВидПодъема = Перечисления.ВидыПодъемовВодителя.Лифт Или Объект.ВидПодъема = Перечисления.ВидыПодъемовВодителя.РучнойПодъем) И (Объект.Реализация.МетодыОплатыПодъемаЗаказа = Перечисления.МетодыОплатыПодъемаЗаказа.ОплачиваетКлиент Или Объект.Реализация.МетодыОплатыПодъемаЗаказа = Перечисления.МетодыОплатыПодъемаЗаказа.ОплачиваетПартнер) Тогда // Или Объект.Реализация.МетодыОплатыПодъемаЗаказа = Перечисления.МетодыОплатыПодъемаЗаказа.ОплачиваетПартнер
		РассчитатьПодъемНаСервере();
	Иначе
		Объект.КодПодъемногоБрейка = "";
		Объект.СтоимостьПодъемаРассчитанная = 0;
		Объект.СтоимостьПодъемаПодтвержденная = 0;
	КонецеСли;	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьПодъем(Команда)   
	РассчитатьПодъемНаСервереСПроверкой();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДанныхПодъема()
	//Если Объект.Реализация.МетодыОплатыПодъемаЗаказа = Перечисления.МетодыОплатыПодъемаЗаказа.ОплачиваетПартнер Или Объект.Реализация.МетодыОплатыПодъемаЗаказа.Пустая() Тогда
	//	Элементы.ГруппаПодъем.Видимость = Ложь;
	//	Элементы.ДекорацияКлиентПодъемНеОплачивает.Видимость = Истина;
	//	Элементы.ГруппаПодъемОплачиваетКлиент.Видимость = Ложь;
	//Иначе
	//	Элементы.ГруппаПодъем.Видимость = Истина;
	//	Элементы.ДекорацияКлиентПодъемНеОплачивает.Видимость = Ложь;
	//	Элементы.ГруппаПодъемОплачиваетКлиент.Видимость = Истина;
	//КонецеСли;	
	
	Если Объект.Реализация.ЗапрашиватьДанныеОТипеПодъема Тогда
		Если Объект.Реализация.МетодыОплатыПодъемаЗаказа = Перечисления.МетодыОплатыПодъемаЗаказа.ОплачиваетПартнер Или Объект.Реализация.МетодыОплатыПодъемаЗаказа.Пустая() Или Объект.ВидПодъема = Перечисления.ВидыПодъемовВодителя.БезПодъема Тогда
			Если Объект.ВидПодъема = Перечисления.ВидыПодъемовВодителя.БезПодъема Тогда
				Элементы.ГруппаПодъем.Видимость = Ложь; 
			Иначе
				Элементы.ГруппаПодъем.Видимость = Истина; 
			КонецеСли;	
			//Элементы.ГруппаПодъем.Видимость = Истина; //ложь
			Элементы.ДекорацияКлиентПодъемНеОплачивает.Видимость = Истина;
			Элементы.ГруппаПодъемОплачиваетКлиент.Видимость = Ложь;
		Иначе		
			Элементы.ГруппаПодъем.Видимость = Истина;
			Элементы.ДекорацияКлиентПодъемНеОплачивает.Видимость = Ложь;
			Элементы.ГруппаПодъемОплачиваетКлиент.Видимость = Истина;
		КонецеСли;	
	Иначе
		Элементы.ГруппаПодъем.Видимость = Ложь;
		Элементы.ДекорацияКлиентПодъемНеОплачивает.Видимость = Истина;
		Элементы.ГруппаПодъемОплачиваетКлиент.Видимость = Ложь;
	КонецеСли;	
КонецПроцедуры	

&НаСервере
Процедура ПриСменеТипаОплатыНаСервере()
	Если Объект.ТипОплаты = Справочники.ТипыОплат.Терминал Тогда
		Объект.Организация = Справочники.Организации.НайтиПоКоду(Объект.Реализация.КодОрганизацииОплатыПоТерминалу);	
	ИначеЕсли Объект.ТипОплаты = Справочники.ТипыОплат.Наличные Тогда
		Объект.Организация = Справочники.Организации.НайтиПоКоду(Объект.Реализация.КодОрганизацииНаличнойОплаты);		
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ТипОплатыПриИзменении(Элемент)
	Элементы.СуммаНал.Заголовок = НаименованиеТипаОплаты();
	ПриСменеТипаОплатыНаСервере();
КонецПроцедуры

&НаСервере
Функция НаименованиеТипаОплаты()
	Возврат Объект.ТипОплаты.Наименование;
КонецФункции	

&НаКлиенте
Процедура ОплатитьСтоимостьДоставки(Команда)
	// Вставить содержимое обработчика.
	От = Вопрос("Взять с Клиента только сумму доставки?", РежимДиалогаВопрос.ДаНет);
	Если От <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецеСли;	
	
	ОплатитьСтоимостьДоставкиНаСервере();
	РасчетСуммы();
	ЗаписатьДокумент(-1);
КонецПроцедуры

&НаСервере
Процедура ОплатитьСтоимостьДоставкиНаСервере()
		
	Объект.ОплаченаСтоимостьДоставкиПриОтменеЗаказа = Истина;
	Объект.РасчетнаяСтоимостьДоставки = Ложь;
	Объект.СуммаДоставка = Объект.Реализация.СуммаДоставка;
	Объект.СуммаНал = Объект.Реализация.СуммаДоставка;
	
	Для Каждого Тек Из Объект.ДоставленныеТовары Цикл
		Тек.КоличествоДоставлено = 0;
		Тек.Сумма = 0;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Вставить содержимое обработчика.
	Если ИмяСобытия = "ОплатаAssist" Тогда
		ВозниклаОшибка = Ложь;
		СтруктураJSON = ИнтеграцияAssistКлиент.ДанныеJSONВСтруктуруAssist(Параметр,, ВозниклаОшибка);
		СтруктураРС = Новый Структура;
		Если СокрЛП(СтруктураJSON.STATE) <> "PAY" Тогда
			Возврат;
		КонецеСли;	
		ФиксацияAssistСервер(СтруктураРС, СтруктураJSON);
		
		Если СтруктураJSON.orderstate = "Оплачен" Тогда
			ФинальныеПроцедурыОплаты();
		КонецеСли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ФиксацияAssistСервер(СтруктураРС, СтруктураJSON)
	ДанныеAssist = ИнтеграцияAssistСервер.ПолучитьДанныеAssistПоОрганизации(Объект.Организация, Объект.Реализация.ИнтернетМагазин);

	
	
	Если СокрЛП(СтруктураJSON.STATE) = "PAY" Тогда
		СтруктураРС.Вставить("ТипОперации", Перечисления.ТипыОперацийAssist.Оплата);
		//Сообщить("Оплата");
	ИначеЕсли СокрЛП(СтруктураJSON.STATE) = "CANCEL" Тогда
		//СтруктураРС.Вставить("ТипОперации", Перечисления.ТипыОперацийAssist.Отмена);
		//Сообщить("Отмена");
		Возврат;
	КонецеСли;	
	
	
	СтруктураРС.Вставить("Заказ", Объект.Реализация);
	СтруктураРС.Вставить("Сумма", Число(СтруктураJSON.amount));
	СтруктураРС.Вставить("Организация", Объект.Организация);
	СтруктураРС.Вставить("billnumber", СтруктураJSON.billnumber);
	СтруктураРС.Вставить("Рейс", Объект.Реализация.Рейс);
	Если ЗначениеЗаполнено(Объект.Реализация.Рейс.Экспедитор) Тогда
		СтруктураРС.Вставить("Водитель", "");
		СтруктураРС.Вставить("Экспедитор", Объект.Реализация.Рейс.Экспедитор);
	Иначе	
		СтруктураРС.Вставить("Водитель", Объект.Реализация.Рейс.Водитель);
		СтруктураРС.Вставить("Экспедитор", "");
	КонецЕсли;	
	СтруктураРС.Вставить("merchant_id", ДанныеAssist.merchantId);    // 932965
	СтруктураРС.Вставить("Оплачен", ?(СтруктураJSON.orderstate = "Оплачен", Истина, Ложь));
	СтруктураРС.Вставить("ДатаТранзакции", ИнтеграцияAssistСервер.ПреобразованиеДатыAssist(СтруктураJSON.operationdate));
	
	Если СтруктураJSON.payment_type = "CASH" Тогда
		СтруктураРС.Вставить("ТипОплаты", Справочники.ТипыОплат.Наличные);
	ИначеЕсли СтруктураJSON.payment_type = "CARD" Тогда	
		СтруктураРС.Вставить("ТипОплаты", Справочники.ТипыОплат.Терминал);
	ИначеЕсли СтруктураJSON.payment_type = "FAST_TRANSFER" Тогда	
		СтруктураРС.Вставить("ТипОплаты", Справочники.ТипыОплат.СБП);		
	КонецеСли;	
	
	СтруктураРС.Вставить("ТипОперации", Перечисления.ТипыОперацийAssist.Оплата);
	
	ИнтеграцияAssistСервер.ЗафиксироватьДанныеВРСAssist(СтруктураРС);
КонецПроцедуры	
