
Функция ПоРейсуПроизведенаЯндексМаршрутизация()
	Если Рейс.Пустая() Тогда
		Возврат Истина;
	ИначеЕсли Не Рейс.ПроизведенаЯндексМаршрутизация Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецеСли;	
КонецФункции	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Отказ = ПоРейсуПроизведенаЯндексМаршрутизация();
	Если Отказ Тогда
		Предупреждение("Карта будет доступна после выполнения автоматической маршрутизации!");
		Возврат;
	КонецеСли;	
	
	//Макет = ПолучитьМакетНаСервере("МакетДанныеXTMLТаб");
	//КодХТМЛ = Макет.Области.ТекстСкрипта.Текст;
	//КодХТМЛ = ПолучитьКодXTML(); 
	//Макет.ПолучитьТекст();
	//ДанныеXTML = КодХТМЛ;	
	ДанныеXTML = ПолучитьКодXTMLНаСервере();	
	
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаПоказатьЗаказы);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
КонецПроцедуры

Функция ПолучитьКодXTMLНаСервере()
	КодXTML = Константы.СодержимоеВерсииСтраницыМаршрутизации.Получить(); 
	КоординатыЦентраКарты = "";
	Если ЗначениеЗаполнено(ПараметрыСеанса.Регион.ШиротаЦентраЗоны) И ЗначениеЗаполнено(ПараметрыСеанса.Регион.ДолготаЦентраЗоны) тогда
		КоординатыЦентраКарты = "[" + Формат(ПараметрыСеанса.Регион.ШиротаЦентраЗоны, "ЧРД=.; ЧГ=") + ", " + Формат(ПараметрыСеанса.Регион.ДолготаЦентраЗоны, "ЧРД=.; ЧГ=") + "]";
	Иначе
		КоординатыЦентраКарты = "[55.755819, 37.617644]";
	КонецЕсли;	
	КодXTML = СтрЗаменить(КодXTML, "^geoCenter^", КоординатыЦентраКарты);
	Возврат КодXTML;
КонецФункции	

//style=""width:100%;height:100%;""
Функция ПолучитьКодXTML()
СтрокаТ = "<!DOCTYPE html
|    PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
|<html style=""width:100%;height:100%;"" xmlns=""http://www.w3.org/1999/xhtml"">
|
|<head>
|    <title>Карта маршрутизация</title>
|
|    <link rel=""stylesheet"" href=""https://mpmap.strizh-logistic.ru/v1/dragControl.css?46"">
|    <link rel=""stylesheet"" href=""https://mpmap.strizh-logistic.ru/v1/common.css?46"">
|    <meta http-equiv=""X-UA-Compatible"" content=""IE=9"" />
|    <meta name=""viewport"" content=""width=device-width"">
|    <script src=""https://mpmap.strizh-logistic.ru/v1/jquery.js""></script>
|    <script src=""https://api-maps.yandex.ru/2.1/?lang=ru_RU"" type=""text/javascript""></script>
|    <!--Строка подключения сгенерированного скрипта,нужно понять куда его сохранять чтобы иметь полную ссылку-->
|    <!--Сейчас ссылается на папку,где находится основаня страница-->
|    <script src=""https://mpmap.strizh-logistic.ru/v1/MapUtils.js?46"" type=""text/javascript""></script>
|    <script src=""https://mpmap.strizh-logistic.ru/v1/Selection.js?46"" type=""text/javascript""></script>
|    <script src=""https://mpmap.strizh-logistic.ru/v1/YScripts.js?46"" type=""text/javascript""></script>
|
|    <!--Скрипт контрола списка с заказами-->
|    <script src=""https://mpmap.strizh-logistic.ru/v1/dragControl.js?46"" type=""text/javascript""></script>
|
|    <script type=""text/javascript"">
|        function exec(script) {
|            try {
|                eval(script);
|            }
|            catch (e) {
|                alert(e.message);
|            }
|        }
|        var WebKitUsage;
|        var FormEvent;
|        var select;
|        var xForm1C;
|        var map;
|        var clusterer;
|        //исходный массив с точками
|        var points;
|        //массив с точками на карте
|        var hashPoints;
|        //массив с точками маршрута
|        var routePoints = [];
|        //массив с геоточками маршрута
|        var routePlacemarks = [];
|        //флаг начала построения маршрута
|        var routeIsBuilding = false;
|        var mapIsLoad = false;
|        $(window).load(function () {
|
|            ymaps.ready(function () {
|                hashPoints = new ymaps.util.Storage();
|                map = new ymaps.Map(""YMapsID"", {
|
|                    // Центр карты
|                    center: [55.755819, 37.617644],
|                    // Коэффициент масштабирования
|                    zoom: 13,
|                    // Тип карты
|                    searchControlProvider: 'yandex#search',
|                    state: { behaviors: [""scrollZoom""] }
|                });
|                map.behaviors.disable(['rightMouseButtonMagnifier']);
|                map.behaviors.enable(['drag']);
|
|                MapUtils.Init(map);
|                select = new STZ.Selection(map);
|
|                createClusters();
|                mapIsLoad = true;
|
|            });
|        });
|        function createClusters() {       // Creating a clusterer with an accordian layout
|            clusterer = new ymaps.Clusterer({
|                clusterDisableClickZoom: true,
|
|                clusterBalloonContentLayout: ""cluster#balloonAccordion""
|            });
|
|            map.geoObjects.add(clusterer);
|
|        }
|    </script>
|</head>
|
|<body style=""width:100%;height:100%;overflow: hidden;"" //~~onload~~>
|    <div id='message_name' style='display: none'></div>
|    <div id='message_data' style='display: none'></div>
|    <div class=""tab"">
|        <button class=""tablinks"" onclick=""showTab(event, 'tabMaps')"">Карта</button>
|        <button class=""tablinks"" onclick=""showTab(event, 'tabList')"">Список</button>
|        <input style=""font-size:1.5em;"" type=""button"" id=""buttonStartRoute"" onclick=""showPoints()"" value=""Показать заказы"">
|        <input style=""font-size:1.5em;"" type=""button"" id=""buttonStartRoute"" onclick=""startRoute()"" value=""Начать маршрут"">
|        <input style=""font-size:1.5em;"" type=""button"" id=""buttonStartRoute"" onclick=""fixRoute()"" value=""Зафиксировать маршрут"">
|        <div id=""routeOrders""></div>
|    </div>
|    <div style=""width:100%;height:100%;"" id=""tabMaps"" class=""tabcontent"">
|        <div id=""YMapsID"" style=""width:100%;height:100%;""></div>        
|    </div>
|    <div id=""tabList"" class=""tabcontent"">
|        <div id=""ordersList""></div>
|    </div>
|
|</body>
|
|<script>
|    let items = [
|        { Lat: 55.844110, Lng: 37.728247, UID: 1, OrderId: '123456', Interval: ""10.00-22.00"", Color: 1, Address: ""улица Касаткина, 7"" },
|        { Lat: 55.944110, Lng: 37.928247, UID: 2, OrderId: '222222', Interval: ""10.00-22.00"", Color: 2, Address: ""улица Касаткина, 8"" },
|        { Lat: 56.144110, Lng: 37.728247, UID: 3, OrderId: '333333', Interval: ""10.00-22.00"", Color: 1, Address: ""улица Касаткина, 9"" }
|    ];
|
|    listUI.createInstance(document.getElementById(""ordersList""), cloneArray(items), onDrag);
|
|    function showPoints() {
|        showAddressCoordByArr(items);        
|    }
|
|    function fixRoute() {
|        endRoute();
|        let data = document.getElementById('message_data').innerHTML;
|        document.getElementById('routeOrders').textContent = 'Маршрут: ' + data;
|    }
|
|    function showTab(evt, tabName) {
|        var i, tabcontent, tablinks;
|
|        // Get all elements with class=""tabcontent"" and hide them
|        tabcontent = document.getElementsByClassName(""tabcontent"");
|        for (i = 0; i < tabcontent.length; i++) {
|            tabcontent[i].style.display = ""none"";
|        }
|
|        // Get all elements with class=""tablinks"" and remove the class ""active""
|        tablinks = document.getElementsByClassName(""tablinks"");
|        for (i = 0; i < tablinks.length; i++) {
|            tablinks[i].className = tablinks[i].className.replace("" active"", """");
|        }
|
|        // Show the current tab, and add an ""active"" class to the button that opened the tab
|        document.getElementById(tabName).style.display = ""block"";
|        evt.currentTarget.className += "" active"";
|    }
|</script>
|
|</html>";

Возврат СтрокаТ;

КонецФункции	

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
Процедура ПолеXTMLДокументСформирован(Элемент)
	//ОкноБраузера = Элементы.ПолеXTML.Документ.DefaultView;
	//ОкноБраузера.WebKitUsage = Истина;	
	//ПолеXTMLБылоСформировано = Истина;
	//ПодключитьОбработчикОжидания("ПоказатьЗаказыОбработчикОжидания", 6, Истина);
	//ПП = Элементы.ПолеXTML.Документ.DefaultView;
	//П = 1;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаказыОбработчикОжидания()
	ПоказатьЗаказы(Неопределено);	
Конецпроцедуры	

//+Степанов Подключаемый обработчик события "При нажатии", нужен при использовании WebKit
&НаКлиенте
Процедура Подключаемая_ПолеXTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если Не ПроверяемMessage Тогда
		Возврат;
	КонецеСли;	
	Если Элементы.ПолеXTML.Документ.defaultView.FormEvent <> Неопределено Тогда
		ИмяСобытия = Элементы.ПолеXTML.Документ.defaultView.FormEvent.messageName;
		ПолученныеДанные = Элементы.ПолеXTML.Документ.defaultView.FormEvent.messageData;
		Если ИмяСобытия = "OnEndRoute" Тогда
			ФлагНеПустойМаршрутизации = ФиксацияМаршрутизации(ПолученныеДанные);
		КонецЕСли;	
		
		//Если ИмяСобытия = "ClickOnPoligon" Тогда
		//	MapsFrom1C_ClickOnPoligon(ПолученныеДанные);
		//ИначеЕсли ИмяСобытия = "OnSelectPoint" Тогда
		//	MapsFrom1C_OnSelectPoints(ПолученныеДанные);
		//ИначеЕсли ИмяСобытия = "OnDeletePointFromMap" Тогда	
		//	MapsFrom1C_OnDeletePointFromMap(ПолученныеДанные);	
		//ИначеЕсли ИмяСобытия = "VenicleMenuCommand " Тогда
		//	MapsFrom1C_VenicleMenuCommand(ПолученныеДанные);
		//ИначеЕсли ИмяСобытия = "CalcRoute" Тогда	
		//	MapsFrom1C_CalcRoute(ПолученныеДанные);
		//ИначеЕсли ИмяСобытия = "VenicleMenuCommand" Тогда	
		//	MapsFrom1C_VenicleMenuCommand(ПолученныеДанные);
		//КонецЕсли;	
	КонецЕсли
КонецПроцедуры


&НаСервере
Процедура ОчиститьПорядокЗаказов()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Заказ.Ссылка КАК Заказ
	            |ИЗ
	            |	Документ.Заказ КАК Заказ
	            |ГДЕ
	            |	Заказ.Рейс = &Рейс";
	Зап.УстановитьПараметр("Рейс", Рейс.Ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Док = Выб.Заказ.ПолучитьОбъект();
		Док.ПорядокСортировки = 0;
		Док.Записать();
	КонецЦикла;	
КонецПроцедуры	


&НаСервере
Функция ФиксацияМаршрутизации(Данные)
	ОчиститьПорядокЗаказов();
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат Ложь;
	КонецЕсли;	
	ДатаМаршрутизации = ТекущаяДата();
	СтрокаДанных = СтрЗаменить(Данные, ",", Символы.ПС);
	Для Порядок = 1 По СтрЧислоСтрок(СтрокаДанных) Цикл
		НовыйGUID = Новый УникальныйИдентификатор(СтрПолучитьСтроку(СтрокаДанных, Порядок));

		Док = Документы.Заказ.ПолучитьСсылку(НовыйGUID).ПолучитьОбъект();
		Док.ПорядокСортировки = Порядок;
		Док.ДатаВремяПоследнейМаршрутизацииВМП = ДатаМаршрутизации;
		Док.Записать();
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	//Элементы.ПолеXTML.Документ.parentWindow.exec(Команда);
	
	Если Не ЗначениеЗаполнено(Элементы.ПолеXTML.Документ.defaultView.document.documentElement.innerHTML) Тогда
		Предупреждение("Попробуйте через минуту! (также можно попробовать перезайти в карту).");
		Возврат;
	КонецЕсли;	
	
	Попытка
		Элементы.ПолеXTML.Документ.defaultView.exec(Команда);	
	Исключение
		Сообщить(ОписаниеОшибки());
	конецпопытки;
	
	Возврат;
	//ДИВ = Элементы.ПолеXTML.Документ.getElementById("TEST");
	//
	//НашлиАтрибут = ДИВ.getAttributeNode("onclick");
	//Если НашлиАтрибут <> null Тогда
	//	ДИВ.removeAttribute("onclick");
	//КонецЕсли; 
	//
	//Атрибут  = Элементы.ПолеXTML.Документ.createAttribute("onclick");
	//Атрибут.value = Команда;
	//ДИВ.attributes.setNamedItem(Атрибут); // привязываем атрибут
	//
	//ДИВ.click();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗаказов()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Заказ.Ссылка КАК Ссылка,
	            |	Заказ.Номер КАК OrderId,
	            |	Заказ.ВремяДоставки КАК Interval,
	            |	Заказ.Широта КАК Lat,
	            |	Заказ.Долгота КАК Lng,
	            |	Заказ.Адрес КАК Address,
	            |	Заказ.ПорядокСортировки КАК RouteIndex,
	            |	ВЫБОР
	            |		КОГДА Заказ.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипЗаказа.Доставка)
	            |			ТОГДА 1
	            |		КОГДА Заказ.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипЗаказа.Забор)
	            |			ТОГДА 2
	            |	КОНЕЦ КАК orderType
	            |ИЗ
	            |	Документ.Заказ КАК Заказ
	            |ГДЕ
	            |	Заказ.Рейс = &Рейс
	            |	И (Заказ.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.РезультатыДоставки.ПустаяСсылка)
	            |			ИЛИ Заказ.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.РезультатыДоставки.КДоставке))
	            |	И Заказ.СнятьСДоставки = ЛОЖЬ";
	Зап.УстановитьПараметр("Рейс", Рейс.Ссылка);
	Рез = Зап.Выполнить();
	Выб = Рез.Выбрать();
	МассивЗаказов = Новый Массив;
	Пока Выб.Следующий() Цикл
		СтруктурЗаказа = Новый Структура;
		Для каждого ТекКолонка Из Рез.Колонки Цикл
			Если ТекКолонка.Имя <> "Ссылка" Тогда
				СтруктурЗаказа.Вставить(ТекКолонка.Имя, Выб[ТекКолонка.Имя]);
			Иначе
				СтруктурЗаказа.Вставить("UID", Строка(Выб.Ссылка.УникальныйИдентификатор()));
			КонецеСли;	
		КонецЦикла;	
		МассивЗаказов.Добавить(СтруктурЗаказа);
	КонецЦикла;	
	
	 Возврат МассивЗаказов;
КонецФункции	

&НаКлиенте
Процедура ПоказатьЗаказы(Команда)
	
	МассивЗаказов = ПолучитьСписокЗаказов();
	
	лПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
	
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(лПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, МассивЗаказов, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть(); 
	
	ВыполнитьСкрипт("STZ.RemoveAllPoints()");
	
	ВызовФункции = "STZ.ShowAddressCoordByArr(" + СтрокаJSON + ")";
	//ВызовФункции = "STZ.showMessage(" + СтрокаJSON + ")";    
	//ВызовФункции = "STZ.showMessage('хай')";

	ВыполнитьСкрипт(ВызовФункции);
	
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаНачатьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаРедактироватьМаршрут);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ПолеXTML.УстановитьДействие("ПриНажатии","Подключаемая_ПолеXTMLПриНажатии");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТочки(Команда)
	ВыполнитьСкрипт("STZ.RemoveAllPoints()");
//ВыполнитьСкрипт("showContext()");
//ВыполнитьСкрипт("STZ.uuidv4()");
//ВыполнитьСкрипт("STZ.isNumber(1)");
КонецПроцедуры

&НаКлиенте
Процедура НачатьМаршрутизацию(Команда)
	ВыполнитьСкрипт("STZ.StartRoute()");
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаЗафиксироватьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаОтменитьМаршрутизацию);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьМаршрутизацию(Команда)
	ВыполнитьСкрипт("STZ.EndRoute()");
	ПроверяемMessage = Истина;
	Подключаемая_ПолеXTMLПриНажатии(Неопределено, Неопределено, Неопределено);
	ПроверяемMessage = Ложь;
	
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаНачатьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаРедактироватьМаршрут);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	Если ФлагНеПустойМаршрутизации Тогда
		ЗапуститьМаршрутизациюЯМ();
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьМаршрутизацию(Команда)
	ВыполнитьСкрипт("STZ.CancelRoute()");
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаНачатьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаРедактироватьМаршрут);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьМаршрут(Команда)
	ВыполнитьСкрипт("STZ.EditRoute()");
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаЗафиксироватьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаОтменитьМаршрутизацию);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКнопок(МассивДоступныхКнопок)
	Для Каждого Тек Из ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		Тек.Видимость = Ложь;
	КонецЦикла;
	
	Для Каждого Тек Из МассивДоступныхКнопок Цикл
		Тек.Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры	


Функция ВыгрузитьДанныеРучнойМаршрутизацииНаСервере()
	МасСтруктур = МаршрутизацияСервер.СобратьДанныеЗаказовДляМаршрутизацииЯМ(Рейс);
	
	ОтветМетода = МодульОбмен_http.Маршрутизация_ВыгрузитьДанныеРучнойМаршрутизации(, Рейс.НомерРейса, МасСтруктур);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ЗапуститьМаршрутизациюЯМ()
	Если Не НадоЗапрашиватьЯММаршрутизациюПослеФиксацииМаршрутаСервер() Тогда
		ВыгрузитьДанныеРучнойМаршрутизацииНаСервере();
		Возврат;
	КонецЕсли;
	
	РезультатОбработки = МаршрутизацияКлиент.ЗапуститьМаршрутизациюЯМ(Рейс);
	Если РезультатОбработки <> Неопределено Тогда
		ФинальныйАдрес = Неопределено;
		Если РезультатОбработки.ФинальныйАдрес.ТипАдреса = 2 Тогда
			ФинальныйАдрес = "Склад";
		ИначеЕсли РезультатОбработки.ФинальныйАдрес.ТипАдреса = 3 Тогда	
			ФинальныйАдрес = РезультатОбработки.ФинальныйАдрес.ШиротаДолгота;
		КонецЕсли;	
		
		Если РезультатОбработки.ВыбранноеВремя = Неопределено Тогда
			РезультатЗапуска = ЗапуститьМаршрутизациюНаСервере(Неопределено, РезультатОбработки.ДанныеТекущейТочки, ФинальныйАдрес);
		Иначе
			РезультатЗапуска = ЗапуститьМаршрутизациюНаСервере(РезультатОбработки.ВыбранноеВремя, РезультатОбработки.ДанныеТекущейТочки, ФинальныйАдрес);
		КонецЕсли;	
		Если РезультатЗапуска Тогда
			//Сообщить("Выполняется запрос на маршрутизацию ЯМ...");
			
			ПодключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации", 3, Ложь);
			ПоказатьПредупреждение(, "Выполняется запрос на маршрутизацию ЯМ...", 3);
		Иначе
			//сбой в запуске маршрутизации Яндекса, фиксируем ручную маршрутизацию
			ВыгрузитьДанныеРучнойМаршрутизацииНаСервере();
		КонецЕсли;	
	КонецеСли;
КонецПроцедуры

&НаСервере
Функция НадоЗапрашиватьЯММаршрутизациюПослеФиксацииМаршрутаСервер()
	Возврат МаршрутизацияСервер.НадоЗапрашиватьЯММаршрутизациюПослеФиксацииМаршрута();
КонецФункции	

&НаСервере
Функция ЗапуститьМаршрутизациюНаСервере(ВыбранноеВремя, ДанныеТекущейТочки, ДанныеФинальнойТочки = Неопределено)
	// Вставить содержимое обработчика.
   	МасСтруктур = МаршрутизацияСервер.СобратьДанныеЗаказовДляМаршрутизацииЯМ(Рейс);
	
	
	ОтветМетода = МодульОбмен_http.МаршрутизацияЯндекс_НачатьМаршрутизациюНаСервереПоРейсу(, Рейс.НомерРейса, МасСтруктур, ДанныеТекущейТочки, ВыбранноеВремя, ДанныеФинальнойТочки, Истина);
	Если ОтветМетода.Свойство("ИдЗапроса") Тогда		
		//ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.СветлоЗеленый;
		ОтправленЗапросНаМаршрутизацию = Истина;
		ИдентификаторЗаданияМаршрутизацииЯндекс = ОтветМетода.ИдЗапроса;
		СчетчикЗапросовРезультатовМаршрутизации = 0;
		Возврат Истина;
	Иначе
		//ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.Оранжевый; 
		ОтправленЗапросНаМаршрутизацию = Ложь;
		Возврат Ложь;
	КонецеСли;
КонецФункции	

&НаКлиенте
Процедура ПолучитьРезультатМаршрутизации()
	Если ЗначениеЗаполнено(ИдентификаторЗаданияМаршрутизацииЯндекс) Тогда
		СчетчикЗапросовРезультатовМаршрутизации = СчетчикЗапросовРезультатовМаршрутизации + 1;
		Если ПолучитьРезультатыМаршрутизацииНаСервере() Тогда
			ОтключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации");
			//Сообщить("Данные Яндекс маршрутизации загружены");
			ПоказатьПредупреждение(,"Данные Яндекс маршрутизации загружены", 2);
		КонецеСли;
		Если СчетчикЗапросовРезультатовМаршрутизации >= 20 Тогда
			ОтключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации");
			ВыгрузитьДанныеРучнойМаршрутизацииНаСервере();
		КонецеСли;	
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ПолучитьРезультатыМаршрутизацииНаСервере()
	ОтветМетода = МодульОбмен_http.МаршрутизацияЯндекс_ПолучитьДанныеМаршрутизацииНаСервереПоРейсу(,ИдентификаторЗаданияМаршрутизацииЯндекс, Рейс.НомерРейса, Рейс);	
	Если ОтветМетода.РезультатВызова Тогда
		//УстановитьПорядокМаршрутизацииНаЗаказах(ОтветМетода.ДанныеМаршрутизации);
		ИдентификаторЗаданияМаршрутизацииЯндекс = "";
		//ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = Новый Цвет;
		Возврат Истина;
	КонецеСли;
	Возврат Ложь;
КонецФункции
