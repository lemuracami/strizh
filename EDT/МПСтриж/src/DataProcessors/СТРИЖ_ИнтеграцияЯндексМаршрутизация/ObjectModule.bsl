Перем Настройки;

Функция ОпределитьКонфигурацию() Экспорт 
	
	СинонимКонф = Метаданные.Синоним;
	ИмяКонф = "";	
	Если Найти(СинонимКонф, "Комплексная автоматизация") > 0 Тогда
		ИмяКонф = "КА";	
	ИначеЕсли Найти(СинонимКонф,"Управление производственным предприятием") > 0
		ИЛИ Найти(СинонимКонф, "Ликероводочный и винный завод") > 0
		ИЛИ Найти(СинонимКонф, "Управление проектной организацией") > 0
		ИЛИ Найти(СинонимКонф, "1С: Спиртовое производство") > 0      
		ИЛИ Найти(СинонимКонф, "1С:Молокозавод")>0 
		ИЛИ Найти(СинонимКонф, "1С:Подрядчик строительства") > 0 Тогда
		ИмяКонф = "УПП";
	ИначеЕсли 	Найти(СинонимКонф,"Бухгалтерия предприятия") > 0 Тогда
		ИмяКонф = "БП";		
	ИначеЕсли Найти(СинонимКонф,"ERP") > 0 Тогда
		ИмяКонф = "УТ";
	ИначеЕсли Найти(СинонимКонф,"Управление торговлей") > 0 Тогда
		Если Найти(СинонимКонф,"10.3") > 0 Тогда 
			ИмяКонф = "УТ10";
		Иначе
			ИмяКонф = "УТ";
		КонецЕсли;
	ИначеЕсли Найти(СинонимКонф, "Управление нашей фирмой") > 0 Тогда 
		ИмяКонф = "УНФ";
	КонецЕсли;
	
	Возврат ИмяКонф;
	
КонецФункции

//возвращает структуру, либо неопределено
Функция ПолучитьНастройкиМодуля() Экспорт 
	
	МакетНастроек = ПолучитьМакет("СписокНастроек");
	Текст = МакетНастроек.ПолучитьТекст();
	Если Не ПустаяСтрока(Текст) Тогда
		Настройки 	= Новый Структура;
		МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС);
		Для Каждого Строка из Массивстрок Цикл	
			
			МассивПодСтрок 		= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка, "=");
			ЗначениеНастройки 	= МассивПодСтрок[1]; 
			Если ЗначениеНастройки = "Да" Тогда
				Настройки.Вставить(МассивПодСтрок[0], Истина);
			ИначеЕсли ЗначениеНастройки = "Нет" Тогда
				Настройки.Вставить(МассивПодСтрок[0], Ложь);
			Иначе	
				Попытка 
					ЗначениеНастройки = Число(МассивПодСтрок[1]);
					Настройки.Вставить(МассивПодСтрок[0], ЗначениеНастройки);
				Исключение
					//ошибка преобразования к числу, значит, там просто строка
					Настройки.Вставить(МассивПодСтрок[0], ЗначениеНастройки);
				КонецПопытки;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Настройки;
	//Возврат ХранилищеОбщихНастроек.Загрузить("Обработка.СТРИЖ_ИнтегрцияЯндексМаршрутизация");
	
КонецФункции

//СкладОтгрузки = Спр.РегиональныеТерминалы
Функция ПолучитьДанныеСклада(СкладПогрузки) Экспорт 
	
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	ЧасМаршрутизации = Час(ТекущаяДата());
	МинутаМаршрутизации = Минута(ТекущаяДата())+15;
	
	Если МинутаМаршрутизации >= 60 Тогда
		ЧасМаршрутизации = ЧасМаршрутизации + 1;
		МинутаМаршрутизации = МинутаМаршрутизации - 60;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегиональныеТерминалы.Ссылка КАК Ссылка,
	               |	РегиональныеТерминалы.Наименование КАК ref,
	               |	РегиональныеТерминалы.Код КАК id,
	               |	ВЫБОР
	               |		КОГДА РегиональныеТерминалы.Код = 1
	               |			ТОГДА 55.775150
	               |		ИНАЧЕ 59.864539
	               |	КОНЕЦ КАК lat,
	               |	ВЫБОР
	               |		КОГДА РегиональныеТерминалы.Код = 1
	               |			ТОГДА 37.522611
	               |		ИНАЧЕ 30.423289
	               |	КОНЕЦ КАК lon,
				   //|	""0.07:00:00-0.23:00:00"" КАК time_window,
	               |	""0."+ЧасМаршрутизации+":"+МинутаМаршрутизации+":00-0.23:00:00"" КАК time_window,
	               |	ЛОЖЬ КАК hard_window,
	               |	НЕОПРЕДЕЛЕНО КАК Штрафы,
	               |	0 КАК service_duration_s,
	               |	0 КАК finish_service_duration_s,
	               |	ЛОЖЬ КАК flexible_start_time
	               |ИЗ
	               |	Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы
	               |ГДЕ
	               |	РегиональныеТерминалы.Ссылка = &Склад";
	Запрос.УстановитьПараметр("Склад", СкладПогрузки);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Склад = Новый Структура("id, ref, time_window, hard_window, service_duration_s, finish_service_duration_s, flexible_start_time");
			ЗаполнитьЗначенияСвойств(Склад, Выборка);
			Склад.id = Строка(Склад.id);
			Склад.time_window = ОбработатьВременноеОкно(Склад.time_window);
			
			
			СкладКоординаты = Новый Структура("lat, lon", Выборка.lat, Выборка.lon);
			Склад.Вставить("point", СкладКоординаты);
			//Склад.Вставить("penalty", СформироватьСтруктуруШтрафов(Выборка.Штрафы));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

Функция ПолучитьДополнительныеОпцииЗапроса() 
	
	ДопОпции = Новый Массив;
	
	//ДопОпции.Добавить(Новый Структура("Имя,Значение", "balanced_groups", Настройки.balanced_groups));
	ДопОпции.Добавить(Новый Структура("Имя,Значение", "merge_multiorders", Настройки.merge_multiorders));
	ДопОпции.Добавить(Новый Структура("Имя,Значение", "penalize_late_service", Настройки.penalize_late_service));
	ДопОпции.Добавить(Новый Структура("Имя,Значение", "proximity_factor", Настройки.proximity_factor));
	
	Возврат ДопОпции;
	
КонецФункции

Функция ОбработатьВременноеОкно(ВременноеОкно) Экспорт 
	
	// 9.99:99:99-9.99:99:99
	
	Окна = СтрРазделить(ВременноеОкно, "-");
	ОкноНачало = Окна[0];
	ОкноКонец = Окна[1];
	
	Если Лев(ОкноНачало, 1) = "0" Тогда
		ОкноНачало = Сред(ОкноНачало, 3);
	КонецЕсли;
	Если Лев(ОкноКонец, 1) = "0" Тогда
		ОкноКонец = Сред(ОкноКонец, 3);
	КонецЕсли;
	
	Возврат ОкноНачало + "-" + ОкноКонец;
	
КонецФункции

Процедура ЗаполнитьЗначенияПоУмолчанию(ДанныеЗаказов)
		
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		//ДанныеЗаказовТЗ = ДанныеЗаказов.Выгрузить();
		
		Для каждого ЭлементНастроек из Настройки Цикл
						
			Попытка
				//ДанныеЗаказовТЗ.ЗаполнитьЗначения(ЭлементНастроек.Значение, ЭлементНастроек.Ключ);
				ДанныеЗаказов.ЗаполнитьЗначения(ЭлементНастроек.Значение, ЭлементНастроек.Ключ);
			Исключение
			КонецПопытки;				
		КонецЦикла; 	
		
		//ДанныеЗаказов.Загрузить(ДанныеЗаказовТЗ);
	ИначеЕсли Настройки = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнены настройки!";
		Сообщение.Сообщить(); 
	КонецЕсли; 
			
КонецПроцедуры

Функция ПолучитьДополниеьльнуюИнформациюДляМониторинга(ДокументУИД)
	
	//ДокументСсылка = Документы.Заказ.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументУИД));	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Заказ.ИнтернетМагазин КАК Контрагент,
	|	Заказ.ИнтернетМагазин.Наименование КАК КонтрагентНаименование,
	|	ВЫРАЗИТЬ(Заказ.Адрес КАК СТРОКА(150)) КАК АдресДоставки,
	|	"""" КАК Комментарий,
	|	0 КАК СуммаДокумента,
	|	"""" КАК КонтрагентИНН,
	|	"""" КАК КонтрагентКПП
	//|	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Вес), 0) КАК УпаковкаВес//,
//	|	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Упаковка.Объем), 0) КАК УпаковкаОбъем
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|
	|ГДЕ
	|	Заказ.Номер = &Ссылка
	|";
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РеализацияТоваровУслугТовары.Ссылка.СуммаДокумента,
	//|	РеализацияТоваровУслугТовары.Ссылка.Контрагент,
	//|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.АдресДоставки КАК СТРОКА(150)),
	//|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.Комментарий КАК СТРОКА(150)),
	//|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.Наименование,
	//|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.ИНН,
	//|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.КПП";
	Запрос.УстановитьПараметр("Ссылка", ДокументУИД);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДопИнфо = Новый Структура();
	Пока Выборка.Следующий() Цикл 
		ДопИнфо.Вставить("address", 		"" + Выборка.АдресДоставки);
		ДопИнфо.Вставить("amount", 			Выборка.СуммаДокумента);
		ДопИнфо.Вставить("comments", 		"" + Выборка.Комментарий);
		ДопИнфо.Вставить("customer_name", 	"" + Выборка.КонтрагентНаименование);
		ДопИнфо.Вставить("customer_number",	"" + Выборка.КонтрагентИНН + "/" + Выборка.КонтрагентКПП);
		//ДопИнфо.Вставить("phone", 			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,Дата(1,1,1)));
		//ДопИнфо.Вставить("volume", 			Выборка.УпаковкаОбъем);
		//ДопИнфо.Вставить("weight", 			Выборка.УпаковкаВес);
	КонецЦикла;
	
	Возврат ДопИнфо;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Геннадий #4493 29.06.2022 ++
//СписокЗаказов - массив структур (поля структуры: НомерЗаказа, ПорядокМаршрутизации)
Функция НачатьМаршрутизированиеЗаказовПоРейсу(НомерРейса, СписокЗаказов = Неопределено, УчитыватьПорядок = Ложь) Экспорт
	
	//1. Поиск документа Рейс
	Если Не ПустаяСтрока(НомерРейса) Тогда
		
		ДокРейс = Документы.Рейс.НайтиПоНомеру(НомерРейса);
		
	Иначе
		Сообщить("Ошибка: не указан номер рейса!");
		Возврат Ложь;
	КонецЕсли;
	
	//2. Подготовим список заказов, если на вход спискок не передали
	ТранспортныеСредства = Неопределено;
	Если СписокЗаказов = Неопределено Тогда
		ЗаполнитьПоРейсуНаСервере(ДокРейс, СписокЗаказов, ТранспортныеСредства);
	Иначе
		//УчитыватьПорядок = Истина;
		ЗаполнитьПоСпискуЗаказовНаСервере(ДокРейс, СписокЗаказов, ТранспортныеСредства);
	КонецЕсли;	
	
	СкладОтгрузки 	= ДокРейс.ТерминалДоставки;
	Результат 		= ЗапросНаМаршрутизациюSVRP(СкладОтгрузки, НомерРейса, ТранспортныеСредства, СписокЗаказов, УчитыватьПорядок);
	Возврат Результат;
	
КонецФункции

//добавлено 13.07.2022 Марочкин на основе НачатьМаршрутизированиеЗаказовПоРейсу, получаем текст запрооса, вызываем извне
Функция ПолучитьТекстЗапроса_МаршрутизированиеЗаказовПоРейсу(НомерРейса, СписокЗаказов = Неопределено, УчитыватьПорядок = Ложь) Экспорт
	
	//1. Поиск документа Рейс
	Если Не ПустаяСтрока(НомерРейса) Тогда
		
		ДокРейс = Документы.Рейс.НайтиПоНомеру(НомерРейса);
		
	Иначе
		Сообщить("Ошибка: не указан номер рейса!");
		Возврат Ложь;
	КонецЕсли;
	
	//2. Подготовим список заказов, если на вход спискок не передали
	ТранспортныеСредства = Неопределено;
	Если СписокЗаказов = Неопределено Тогда
		ЗаполнитьПоРейсуНаСервере(ДокРейс, СписокЗаказов, ТранспортныеСредства);
	Иначе
		//УчитыватьПорядок = Истина;
		ЗаполнитьПоСпискуЗаказовНаСервере(ДокРейс, СписокЗаказов, ТранспортныеСредства);
	КонецЕсли;	
	
	СкладОтгрузки 	= ДокРейс.ТерминалДоставки;
	//Результат 		= ЗапросНаМаршрутизациюSVRP(СкладОтгрузки, НомерРейса, ТранспортныеСредства, СписокЗаказов, УчитыватьПорядок);
	Результат = ПолучитьТекстЗапросаНаМаршрутизациюSVRP(СкладОтгрузки, НомерРейса, ТранспортныеСредства, СписокЗаказов, УчитыватьПорядок);
	Возврат Результат;
	
КонецФункции


//idПланирования - идентификатор планирования 
Функция ПолучитьРезультатыМаршрутизированияЗаказовПоРейсу(ЗадачаID) Экспорт
	
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	ТаблицаМаршрутов = Новый ТаблицаЗначений;
	ТаблицаМаршрутов.Колонки.Добавить("courier_id");
	ТаблицаМаршрутов.Колонки.Добавить("courier_number");
	ТаблицаМаршрутов.Колонки.Добавить("date");
	ТаблицаМаршрутов.Колонки.Добавить("depot_id");
	ТаблицаМаршрутов.Колонки.Добавить("depot_number");
	ТаблицаМаршрутов.Колонки.Добавить("id");
	ТаблицаМаршрутов.Колонки.Добавить("imei");
	ТаблицаМаршрутов.Колонки.Добавить("run_number");
	ТаблицаМаршрутов.Колонки.Добавить("number");
	ТаблицаМаршрутов.Колонки.Добавить("route_finish");
	ТаблицаМаршрутов.Колонки.Добавить("route_start");
	ТаблицаМаршрутов.Колонки.Добавить("total_duration_s");
	ТаблицаМаршрутов.Колонки.Добавить("total_transit_distance_m");
	ТаблицаМаршрутов.Колонки.Добавить("total_stops");
	ТаблицаМаршрутов.Колонки.Добавить("car_id");
	
	ТаблицаТочекДоставки = Новый ТаблицаЗначений;
	ТаблицаТочекДоставки.Колонки.Добавить("Машина"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("Рейс"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("ТочкаМаршрута"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("ТипТочки"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("ВремяПрибытия"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("address"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("amount"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("comments"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("customer_id"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("customer_name"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("customer_number"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("description"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("lat"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("lon"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("mark_delivered_radius"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("number"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("partner_id"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("payment_type"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("phone"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("route_id"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("route_number"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("service_duration_s"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("shared_service_duration_s"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("shared_with_company_id", Новый ОписаниеТипов("СписокЗначений")); 	
	ТаблицаТочекДоставки.Колонки.Добавить("status"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("time_interval"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("volume"); 	
	ТаблицаТочекДоставки.Колонки.Добавить("weight");
	
	Соединение = Новый HTTPСоединение(Настройки.АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);	
		
	Адрес = Настройки.АдресЗапросаРезультата + ЗадачаID;

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	
	Ответ = Соединение.Получить(Запрос);
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + "  
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		Возврат Ложь;
		
	Иначе		
		
		Чтение = Новый ЧтениеJSON;
		ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
		Чтение.УстановитьСтроку(ОтветСтрокой);
		Результат = ПрочитатьJSON(Чтение);
		
		Если Результат.Свойство("result") Тогда
			
			//Сообщить("Запрос выполнен "+ТекущаяДата());
			
			id = Результат.id;
			Если Результат.result.dropped_locations.Количество() > 0 Тогда 
				Сообщить("Не запланированных точек доставки: " + Строка(Результат.result.dropped_locations.Количество()));
				Сообщить(ОтветСтрокой);
			КонецЕсли;
			РезультатПланирования = Результат.result;
			
			date = РезультатПланирования.options.date;
			ДатаРезультатов = Дата(СтрЗаменить(date, "-", ""));
			Маршруты = РезультатПланирования.routes;
			Для Каждого Маршрут Из Маршруты Цикл
				
				НоваяСтрокаМаршруты = ТаблицаМаршрутов.Добавить();
				// НоваяСтрока.courier_id = ;
				НоваяСтрокаМаршруты.courier_number = Маршрут.vehicle_id; // Маршрут.vehicle_id;
				НоваяСтрокаМаршруты.date = date;
				//НоваяСтрока.depot_id = ;
				//НоваяСтрока.id = ;
				//НоваяСтрока.imei = ;
				НоваяСтрокаМаршруты.number = date + "/" + Маршрут.vehicle_id + "/" + Маршрут.run_number; // Параметры.idПланирования +
				//НоваяСтрока.route_finish = ;
				//НоваяСтрока.route_start = ;
				
				Часов = Цел(Маршрут.metrics.total_duration_s / 3600);
				Минут = Цел((Маршрут.metrics.total_duration_s - Часов * 3600) / 60);
				Секунд = Маршрут.metrics.total_duration_s - Часов * 3600 - Минут * 60;
				СтрокаВремениВыполнения = "" + Часов + ":" + ?(Минут = 0, "00", Формат(Минут, "ЧЦ=2; ЧДЦ=0; ЧВН=")) + ":" + ?(Секунд = 0, "00", Формат(Секунд, "ЧЦ=2; ЧВН="));				
				
				НоваяСтрокаМаршруты.run_number 					= Маршрут.run_number;
				НоваяСтрокаМаршруты.total_duration_s 			= СтрокаВремениВыполнения; // Маршрут.metrics.total_duration_s;
				НоваяСтрокаМаршруты.total_transit_distance_m 	= Маршрут.metrics.total_transit_distance_m / 1000;
				НоваяСтрокаМаршруты.total_stops 				= Маршрут.metrics.total_stops;
				
				ТочкиДоставки = Маршрут.route;
				depot_number = Неопределено;
				
				ЗаказыМаршрутизацияРезультат = Новый ТаблицаЗначений;
				ЗаказыМаршрутизацияРезультат.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
				ЗаказыМаршрутизацияРезультат.Колонки.Добавить("ПорядокВРейсе", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4,0)));
				
				ПорядокВРейсе = 0;
				Для Каждого ТочкаДоставки ИЗ ТочкиДоставки Цикл 
					
					НоваяСтрокаТочкиДоставки = ТаблицаТочекДоставки.Добавить();
					НоваяСтрокаТочкиДоставки.Машина 									= Маршрут.vehicle_id;
					НоваяСтрокаТочкиДоставки.Рейс 										= Маршрут.run_number;
					//НоваяСтрокаТочкиДоставки.ТочкаМаршрута 								= ТочкаДоставки.node.value.ref;
					НоваяСтрокаТочкиДоставки.ТочкаМаршрута 								= ТочкаДоставки.node.value.id;
					НоваяСтрокаТочкиДоставки.ТипТочки 									= ТочкаДоставки.node.type;
					НоваяСтрокаТочкиДоставки.ВремяПрибытия 								= Строка(ДатаРезультатов + ТочкаДоставки.arrival_time_s);
					НоваяСтрокаТочкиДоставки.lat 										= ТочкаДоставки.node.value.point.lat;
					НоваяСтрокаТочкиДоставки.lon 										= ТочкаДоставки.node.value.point.lon;
					НоваяСтрокаТочкиДоставки.mark_delivered_radius 						= Настройки.mark_delivered_radius;
					
					Если ТочкаДоставки.node.type = "depot" И depot_number = Неопределено Тогда  
						depot_number = ТочкаДоставки.node.value.id;
					КонецЕсли;
					Если (ТочкаДоставки.node.value.Свойство("type") И ТочкаДоставки.node.value.type = "garage") ИЛИ ТочкаДоставки.node.type = "depot" Тогда 
						Продолжить;
					КонецЕсли;
					
					ДопИнфо = ПолучитьДополниеьльнуюИнформациюДляМониторинга(ТочкаДоставки.node.value.id);		
					НоваяСтрокаТочкиДоставки.ТипТочки = НоваяСтрокаТочкиДоставки.ТипТочки + ?(ЗначениеЗаполнено(ТочкаДоставки.node.value.type), "/" + ТочкаДоставки.node.value.type, "");
					
					НоваяСтрокаТочкиДоставки.address = ДопИнфо.address;
					НоваяСтрокаТочкиДоставки.amount = ДопИнфо.amount;
					НоваяСтрокаТочкиДоставки.comments = ДопИнфо.comments;
					//НоваяСтрокаТочкиДоставки.customer_id = ;
					НоваяСтрокаТочкиДоставки.customer_name = ДопИнфо.customer_name;
					НоваяСтрокаТочкиДоставки.customer_number = ДопИнфо.customer_number;
					НоваяСтрокаТочкиДоставки.description = ТочкаДоставки.node.value.ref + " " + ДопИнфо.customer_name;
					//НоваяСтрокаТочкиДоставки.number = ТочкаДоставки.node.value.ref;
					НоваяСтрокаТочкиДоставки.number = ТочкаДоставки.node.value.id;
					//НоваяСтрокаТочкиДоставки.partner_id = ;
					//НоваяСтрокаТочкиДоставки.payment_type = ;
					//НоваяСтрокаТочкиДоставки.phone = ДопИнфо.phone;
					//НоваяСтрокаТочкиДоставки.route_id = ;
					НоваяСтрокаТочкиДоставки.route_number = НоваяСтрокаМаршруты.number;
					НоваяСтрокаТочкиДоставки.service_duration_s = ТочкаДоставки.node.value.service_duration_s;
					НоваяСтрокаТочкиДоставки.shared_service_duration_s = ТочкаДоставки.node.value.shared_service_duration_s;
					//НоваяСтрокаТочкиДоставки.shared_with_company_ids = ;
					НоваяСтрокаТочкиДоставки.status = Настройки.СтатусЗаказаПоУмолчанию;
					НоваяСтрокаТочкиДоставки.time_interval = ТочкаДоставки.node.value.time_window;
					//НоваяСтрокаТочкиДоставки.volume = ДопИнфо.volume;
					НоваяСтрокаТочкиДоставки.weight = ТочкаДоставки.node.value.shipment_size.weight_kg; // ДопИнфо.weight;
					
					Если Не ПустаяСтрока(НоваяСтрокаТочкиДоставки.number) Тогда
						ПорядокВРейсе = ПорядокВРейсе + 1;
						строкаТЗ = ЗаказыМаршрутизацияРезультат.Добавить();
						строкаТЗ.НомерЗаказа 	= НоваяСтрокаТочкиДоставки.number;
						строкаТЗ.ПорядокВРейсе 	= ПорядокВРейсе;
					КонецЕсли;	
						
				КонецЦикла;
				НоваяСтрокаМаршруты.depot_number = depot_number;
				
			КонецЦикла;
			
			Возврат ЗаказыМаршрутизацияРезультат;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции
////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьПоРейсуНаСервере(ДокументРейс, ДанныеЗаказов, ТранспортныеСредства)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РейсЗаказы.НомерСтроки КАК НомерСтроки,
		|	РейсЗаказы.Ссылка КАК ДокументРейс,
		|	РейсЗаказы.Заказ КАК Заказ,
		|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.Рейс.Заказы КАК РейсЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &ДокументРейс) КАК ПривязкаМашинКРейсамСрезПоследних
		|		ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
		|ГДЕ
		|	РейсЗаказы.Ссылка = &ДокументРейс
		|	И НЕ РейсЗаказы.УдаленИзРейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.ДокументРейс КАК ДокументРейс,
		|	ВТ_Заказы.НомерСтроки КАК НомерСтроки,
		|	ВТ_Заказы.Заказ КАК Ссылка,
		|	ВТ_Заказы.Заказ.Номер КАК НомерЗаказа,
		|	ВТ_Заказы.Заказ.Контрагент.Представление КАК НаименованиеПолучателя,
		|	ЕСТЬNULL(новаМестнаяДоставка.Адрес, ВТ_Заказы.Заказ.АдресДоставки) КАК АдресПолучателя,
		|	0 КАК ВесБрутто,
		|	ЕСТЬNULL(ВТ_Заказы.Заказ.КоличествоМест, 0) КАК КоличествоМест,
		|	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияС, ВТ_Заказы.Заказ.ВремяДоставкиС) КАК ВременноеОкноС,
		|	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияПо, ВТ_Заказы.Заказ.ВремяДоставкиПо) КАК ВременноеОкноПо,
		|	0 КАК Глубина,
		|	0 КАК Высота,
		|	0 КАК Ширина,
		|	ЕСТЬNULL(новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта, ВТ_Заказы.Заказ.ТочкаДоставки.Адрес.Широта) КАК Широта,
		|	ЕСТЬNULL(новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота, ВТ_Заказы.Заказ.ТочкаДоставки.Адрес.Долгота) КАК Долгота,
		|	ВЫБОР
		|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ""delivery""
		|		ИНАЧЕ ""pickup""
		|	КОНЕЦ КАК ТипЗаказа,
		|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ЛогистическийБрейк, ДополнительныеПараметрыЗабора.ЛогистическийБрейк) КАК ЛогистическийБрейк,
		|	ВТ_Заказы.Транспорт КАК ТранспортноеСредство,
		//
		|	""-------------------------"" КАК ВременноеОкно,
		|	Ложь КАК ЖесткоеВременноеОкно,
		|	0 КАК ВремяОбслуживанияАдрес,
		|	0 КАК ВремяОбслуживанияЗаказ,
		|	0 КАК ВремяЗагрузкиЗаказаНаСкладе
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|		ПО ВТ_Заказы.Заказ.Номер = новаМестнаяДоставка.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗабора КАК ДополнительныеПараметрыЗабора
		|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗабора.Забор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Заказы.НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументРейс", ДокументРейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаказов = РезультатЗапроса.Выгрузить();
		
		ЗаполнитьЗначенияПоУмолчанию(ДанныеЗаказов);
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Для каждого ТекСтрока Из ДанныеЗаказов Цикл
			
			СтруктураОтбора = Новый Структура("НомерЗаказа", ТекСтрока.НомерЗаказа); 
			
			ВыборкаДетальныеЗаписи.Сбросить();
			
			Пока ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураОтбора) Цикл
				
				Попытка
					Час1 = Формат(Час(ВыборкаДетальныеЗаписи.ВременноеОкноС), "ЧЦ=2; ЧН=00; ЧВН=");
					Минута1 = Формат(Минута(ВыборкаДетальныеЗаписи.ВременноеОкноС), "ЧЦ=2; ЧН=00; ЧВН=");
					
					Час2 = Формат(Час(ВыборкаДетальныеЗаписи.ВременноеОкноПо), "ЧЦ=2; ЧН=00; ЧВН=");
					Минута2 = Формат(Минута(ВыборкаДетальныеЗаписи.ВременноеОкноПо), "ЧЦ=2; ЧН=00; ЧВН=");
					ТекСтрока.ВременноеОкно = "0."+Час1+":"+Минута1+":00-0."+Час2+":"+Минута2+":00";
				Исключение
				КонецПопытки;
				
				ТекСтрока.ТипЗаказа = ВыборкаДетальныеЗаписи.ТипЗаказа;
				
				Если ВыборкаДетальныеЗаписи.ТипЗаказа = "pickup" Тогда
					ТекСтрока.ВремяОбслуживанияЗаказ = 15*60;
				Иначе
					Если ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "МГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 5*60;					
					ИначеЕсли ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "СГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 7*60;					
					ИначеЕсли ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "КГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 10*60;					
					КонецЕсли; 
				КонецЕсли; 
				//МГТ - 5 минут, СГТ - 7 минут, КГТ - 10 минут, забор - 15мин
			КонецЦикла; 
			
		КонецЦикла; 
		
		ТранспортныеСредства = РезультатЗапроса.Выгрузить();
		ТранспортныеСредства.Свернуть("ТранспортноеСредство",); 
		
	КонецЕсли;
	
КонецПроцедуры // ()

Процедура ЗаполнитьПоСпискуЗаказовНаСервере(ДокументРейс, ДанныеЗаказов, ТранспортныеСредства)
	
	//преобразуем массив структур в ТаблЗначений
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаборТовара"));
	
	СписокЗаказовТЗ = Новый ТаблицаЗначений;
	СписокЗаказовТЗ.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка"));
	СписокЗаказовТЗ.Колонки.Добавить("Заказ", Новый ОписаниеТипов(МассивТипов));
	СписокЗаказовТЗ.Колонки.Добавить("ПорядокМаршрутизации", Новый ОписаниеТипов("Число"));
	
	Для Каждого элементСписка Из ДанныеЗаказов Цикл
		строкаТЗ = СписокЗаказовТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(строкаТЗ, элементСписка); 		
		строкаТЗ.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(строкаТЗ.НомерЗаказа);
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокЗаказов.НомерЗаказа,
		|	СписокЗаказов.Заказ,
		|	СписокЗаказов.ПорядокМаршрутизации
		|ПОМЕСТИТЬ ВТ_НомераЗаказов
		|ИЗ
		|	&СписокЗаказовТЗ КАК СписокЗаказов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РейсЗаказы.НомерСтроки КАК НомерСтроки,
		|	РейсЗаказы.Ссылка КАК ДокументРейс,
		|	РейсЗаказы.Заказ КАК Заказ,
		|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
		|	ВТ_НомераЗаказов.ПорядокМаршрутизации КАК ПорядокМаршрутизации
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	ВТ_НомераЗаказов КАК ВТ_НомераЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &ДокументРейс) КАК ПривязкаМашинКРейсамСрезПоследних
		|			ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
		|		ПО ВТ_НомераЗаказов.Заказ = РейсЗаказы.Заказ
		|ГДЕ
		|	РейсЗаказы.Ссылка = &ДокументРейс
		|	И НЕ РейсЗаказы.УдаленИзРейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.ДокументРейс КАК ДокументРейс,
		|	ВТ_Заказы.НомерСтроки КАК НомерСтроки,
		|	ВТ_Заказы.Заказ КАК Ссылка,
		|	ВТ_Заказы.Заказ.Номер КАК НомерЗаказа,
		|	ВТ_Заказы.Заказ.Контрагент.Представление КАК НаименованиеПолучателя,
		|	ЕСТЬNULL(новаМестнаяДоставка.Адрес, ВТ_Заказы.Заказ.АдресДоставки) КАК АдресПолучателя,
		|	0 КАК ВесБрутто,
		|	ЕСТЬNULL(ВТ_Заказы.Заказ.КоличествоМест, 0) КАК КоличествоМест,
		|	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияС, ВТ_Заказы.Заказ.ВремяДоставкиС) КАК ВременноеОкноС,
		|	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияПо, ВТ_Заказы.Заказ.ВремяДоставкиПо) КАК ВременноеОкноПо,
		|	0 КАК Глубина,
		|	0 КАК Высота,
		|	0 КАК Ширина,
		|	ЕСТЬNULL(новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта, ВТ_Заказы.Заказ.ТочкаДоставки.Адрес.Широта) КАК Широта,
		|	ЕСТЬNULL(новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота, ВТ_Заказы.Заказ.ТочкаДоставки.Адрес.Долгота) КАК Долгота,
		|	ВЫБОР
		|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ""delivery""
		|		ИНАЧЕ ""pickup""
		|	КОНЕЦ КАК ТипЗаказа,
		|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ЛогистическийБрейк, ДополнительныеПараметрыЗабора.ЛогистическийБрейк) КАК ЛогистическийБрейк,
		|	""-------------------------"" КАК ВременноеОкно,
		|	ЛОЖЬ КАК ЖесткоеВременноеОкно,
		|	0 КАК ВремяОбслуживанияАдрес,
		|	0 КАК ВремяОбслуживанияЗаказ,
		|	0 КАК ВремяЗагрузкиЗаказаНаСкладе,
		|	ВТ_Заказы.Транспорт КАК ТранспортноеСредство,
		|	ВТ_Заказы.ПорядокМаршрутизации КАК ПорядокМаршрутизации
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|		ПО ВТ_Заказы.Заказ.Номер = новаМестнаяДоставка.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗабора КАК ДополнительныеПараметрыЗабора
		|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗабора.Забор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Заказы.НомерСтроки";
		
	Запрос.УстановитьПараметр("СписокЗаказовТЗ", 	СписокЗаказовТЗ);
	Запрос.УстановитьПараметр("ДокументРейс", 		ДокументРейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаказов = РезультатЗапроса.Выгрузить();
		
		ЗаполнитьЗначенияПоУмолчанию(ДанныеЗаказов);
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Для каждого ТекСтрока Из ДанныеЗаказов Цикл
			
			СтруктураОтбора = Новый Структура("НомерЗаказа", ТекСтрока.НомерЗаказа); 
			
			ВыборкаДетальныеЗаписи.Сбросить();
			
			Пока ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураОтбора) Цикл
				
				Попытка
					Час1 = Формат(Час(ВыборкаДетальныеЗаписи.ВременноеОкноС), "ЧЦ=2; ЧН=00; ЧВН=");
					Минута1 = Формат(Минута(ВыборкаДетальныеЗаписи.ВременноеОкноС), "ЧЦ=2; ЧН=00; ЧВН=");
					
					Час2 = Формат(Час(ВыборкаДетальныеЗаписи.ВременноеОкноПо), "ЧЦ=2; ЧН=00; ЧВН=");
					Минута2 = Формат(Минута(ВыборкаДетальныеЗаписи.ВременноеОкноПо), "ЧЦ=2; ЧН=00; ЧВН=");
					ТекСтрока.ВременноеОкно = "0."+Час1+":"+Минута1+":00-0."+Час2+":"+Минута2+":00";
				Исключение
				КонецПопытки;
				
				ТекСтрока.ТипЗаказа = ВыборкаДетальныеЗаписи.ТипЗаказа;
				
				Если ВыборкаДетальныеЗаписи.ТипЗаказа = "pickup" Тогда
					ТекСтрока.ВремяОбслуживанияЗаказ = 15*60;
				Иначе
					Если ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "МГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 5*60;					
					ИначеЕсли ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "СГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 7*60;					
					ИначеЕсли ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "КГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 10*60;					
					КонецЕсли; 
				КонецЕсли; 
				//МГТ - 5 минут, СГТ - 7 минут, КГТ - 10 минут, забор - 15мин
			КонецЦикла; 
			
		КонецЦикла; 
		
		ТранспортныеСредства = РезультатЗапроса.Выгрузить();
		ТранспортныеСредства.Свернуть("ТранспортноеСредство",); 
		
	КонецЕсли;
	
КонецПроцедуры // ()


//добавлено 13.07.2022 Марочкин на основе ЗапросНаМаршрутизациюSVRP, выполняем только запрос
Функция ВыполнитьЗапросНаМаршрутизациюSVRP(ТекстТелаЗапроса) Экспорт
	
	Соединение = Новый HTTPСоединение(Настройки.АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);	
						
	
	// параметры подключения
	Ключ  = Настройки.КлючAPI_ЯндексМаршрутизация;
	Адрес = "/vrs/api/v1/add/svrp?apikey=" + Ключ;

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	Запрос.Заголовки.Вставить("User-Agent",		"Yandex Routing 1C module_v3");
	
	
	Запрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса);

	//ВОЗВРАТ ЛОЖЬ;
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + " 
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
		Возврат Ложь;
		
	Иначе
		
		Если КодСостояния >= 500 Тогда 
			
			ЗаписатьДанныеЗапросаНаСервере(КодСостояния, , "");
			
		Иначе
			
			Чтение = Новый ЧтениеJSON;
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
			Чтение.УстановитьСтроку(ОтветСтрокой);
			Результат = ПрочитатьJSON(Чтение);
			
			Если Результат.Свойство("error") Тогда
				id = Результат.error.incident_id;
				Сообщение = Результат.error.message;
				Статус = "Error";
				Сообщить("Ошибка при отправке запроса! Сообщение сервиса: " + Сообщение);
			ИначеЕсли Результат.Свойство("id") Тогда
				id = Результат.id;
				Сообщение = Результат.Message;
				Статус = Результат.Status;
				//Сообщить("Запрос успешно отправлен! "+ТекущаяДата());
				idПланирования = id;
				//Элементы.ДекорацияСообщение.Видимость = Истина;
			КонецЕсли;
			ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение);
			
			//Геннадий ++
			Если Результат.Свойство("error") Тогда
				Возврат Ложь
			Иначе
				Возврат idПланирования;				
			КонецЕсли;		
			//Геннадий ++
				
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;	

КонецФункции

//добавлено 13.07.2022 Марочкин  на основе ЗапросНаМаршрутизациюSVRP, возвращаем только текст запроса
Функция ПолучитьТекстЗапросаНаМаршрутизациюSVRP(СкладОтгрузки, НомерРейса, ТранспортноеСредство, СписокЗаказов, УчитыватьПорядок = Ложь)
	
	Соединение = Новый HTTPСоединение(Настройки.АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);	
						
	// опции запроса / options
	Опции = Новый Структура();
	Опции.Вставить("routing_mode", 	"driving");
	Опции.Вставить("time_zone", 	ПолучитьЧасовойПоясСеанса());
	Опции.Вставить("date", 			Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));   //ДатаПланирования
	Опции.Вставить("quality", 		"normal");
	
	//ТекущаяСтрока = Элементы.ДанныеЗаказов.ТекущаяСтрока;
	
	ДанныеДляЗапроса = ПолучитьДанныеДляЗапросаSVRP(СкладОтгрузки, СписокЗаказов, ТранспортноеСредство, УчитыватьПорядок);		
	
	Для Каждого Опция Из ДанныеДляЗапроса.ДопОпции Цикл 
		Опции.Вставить(Опция.Имя, Опция.Значение);
	КонецЦикла;
	
	// параметры подключения
	Ключ  = Настройки.КлючAPI_ЯндексМаршрутизация;
	Адрес = "/vrs/api/v1/add/svrp?apikey=" + Ключ;

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	Запрос.Заголовки.Вставить("User-Agent",		"Yandex Routing 1C module_v3");
	
	// формирование запроса
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтрокаJSON = Новый Структура("options, depot, vehicle, locations", Опции, ДанныеДляЗапроса.Склады, ДанныеДляЗапроса.Машины, ДанныеДляЗапроса.ТочкиДоставки);
	ЗаписатьJSON(ЗаписьJSON, СтрокаJSON);
	ТекстТелаЗапроса = СтрЗаменить(ЗаписьJSON.Закрыть(),"\\","\");
	
	
	Возврат ТекстТелаЗапроса;
	
	Запрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса);

	//ВОЗВРАТ ЛОЖЬ;
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + " 
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
		Возврат Ложь;
		
	Иначе
		
		Если КодСостояния >= 500 Тогда 
			
			ЗаписатьДанныеЗапросаНаСервере(КодСостояния, , "");
			
		Иначе
			
			Чтение = Новый ЧтениеJSON;
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
			Чтение.УстановитьСтроку(ОтветСтрокой);
			Результат = ПрочитатьJSON(Чтение);
			
			Если Результат.Свойство("error") Тогда
				id = Результат.error.incident_id;
				Сообщение = Результат.error.message;
				Статус = "Error";
				Сообщить("Ошибка при отправке запроса! Сообщение сервиса: " + Сообщение);
			ИначеЕсли Результат.Свойство("id") Тогда
				id = Результат.id;
				Сообщение = Результат.Message;
				Статус = Результат.Status;
				//Сообщить("Запрос успешно отправлен! "+ТекущаяДата());
				idПланирования = id;
				//Элементы.ДекорацияСообщение.Видимость = Истина;
			КонецЕсли;
			ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение);
			
			//Геннадий ++
			Если Результат.Свойство("error") Тогда
				Возврат Ложь
			Иначе
				Возврат idПланирования;				
			КонецЕсли;		
			//Геннадий ++
				
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;	

КонецФункции


Функция ЗапросНаМаршрутизациюSVRP(СкладОтгрузки, НомерРейса, ТранспортноеСредство, СписокЗаказов, УчитыватьПорядок = Ложь)
	
	Соединение = Новый HTTPСоединение(Настройки.АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);	
						
	// опции запроса / options
	Опции = Новый Структура();
	Опции.Вставить("routing_mode", 	"driving");
	Опции.Вставить("time_zone", 	ПолучитьЧасовойПоясСеанса());
	Опции.Вставить("date", 			Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));   //ДатаПланирования
	Опции.Вставить("quality", 		"normal");
	
	//ТекущаяСтрока = Элементы.ДанныеЗаказов.ТекущаяСтрока;
	
	ДанныеДляЗапроса = ПолучитьДанныеДляЗапросаSVRP(СкладОтгрузки, СписокЗаказов, ТранспортноеСредство, УчитыватьПорядок);		
	
	Для Каждого Опция Из ДанныеДляЗапроса.ДопОпции Цикл 
		Опции.Вставить(Опция.Имя, Опция.Значение);
	КонецЦикла;
	
	// параметры подключения
	Ключ  = Настройки.КлючAPI_ЯндексМаршрутизация;
	Адрес = "/vrs/api/v1/add/svrp?apikey=" + Ключ;

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	Запрос.Заголовки.Вставить("User-Agent",		"Yandex Routing 1C module_v3");
	
	// формирование запроса
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтрокаJSON = Новый Структура("options, depot, vehicle, locations", Опции, ДанныеДляЗапроса.Склады, ДанныеДляЗапроса.Машины, ДанныеДляЗапроса.ТочкиДоставки);
	ЗаписатьJSON(ЗаписьJSON, СтрокаJSON);
	ТекстТелаЗапроса = СтрЗаменить(ЗаписьJSON.Закрыть(),"\\","\");
	Запрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса);

	//ВОЗВРАТ ЛОЖЬ;
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + " 
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
		Возврат Ложь;
		
	Иначе
		
		Если КодСостояния >= 500 Тогда 
			
			ЗаписатьДанныеЗапросаНаСервере(КодСостояния, , "");
			
		Иначе
			
			Чтение = Новый ЧтениеJSON;
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
			Чтение.УстановитьСтроку(ОтветСтрокой);
			Результат = ПрочитатьJSON(Чтение);
			
			Если Результат.Свойство("error") Тогда
				id = Результат.error.incident_id;
				Сообщение = Результат.error.message;
				Статус = "Error";
				Сообщить("Ошибка при отправке запроса! Сообщение сервиса: " + Сообщение);
			ИначеЕсли Результат.Свойство("id") Тогда
				id = Результат.id;
				Сообщение = Результат.Message;
				Статус = Результат.Status;
				//Сообщить("Запрос успешно отправлен! "+ТекущаяДата());
				idПланирования = id;
				//Элементы.ДекорацияСообщение.Видимость = Истина;
			КонецЕсли;
			ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение);
			
			//Геннадий ++
			Если Результат.Свойство("error") Тогда
				Возврат Ложь
			Иначе
				Возврат idПланирования;				
			КонецЕсли;		
			//Геннадий ++
				
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;	

КонецФункции

Функция ПолучитьДанныеДляЗапросаSVRP(СкладПогрузки, СписокЗаказов, ТранспортноеСредство, УчитыватьПорядок)
	
	ДанныеДляЗапроса = Новый Структура;
	
	// дополнительные опции
	ДопОпции = ПолучитьДополнительныеОпцииЗапроса();
	
	// свойства склада / depot
	Склады = ПолучитьДанныеСклада(СкладПогрузки);//НаСервере();
		
	// свойства точек доставки / locations
	ТочкиДоставки = ПолучитьДанныеТочкиДоставкиНаСервереSVRP(СписокЗаказов);//ДанныеЗаказов);//.НайтиПоИдентификатору(ТекущаяСтрока));//ДанныеЗаказов.Получить(ТекущаяСтрока));
	
	// свойства автомобилей / vehicles
	МассивТС = Новый Массив;
	МассивТС.Добавить(ТранспортноеСредство);
	//Для Каждого ТС ИЗ ТранспортныеСредства Цикл 
	//	Если ТС.Использовать Тогда 
	//		МассивТС.Добавить(ТС.ТранспортноеСредство);
	//	КонецЕсли;
	//КонецЦикла;
	Машины = ПолучитьДанныеМашинНаСервереSVRP(СписокЗаказов, МассивТС, УчитыватьПорядок);//ТочкиДоставки, МассивТС, УчитыватьПорядок);	
	
	ДанныеДляЗапроса.Вставить("ДопОпции", 		ДопОпции);
	ДанныеДляЗапроса.Вставить("Склады", 		Склады);
	ДанныеДляЗапроса.Вставить("ТочкиДоставки", 	ТочкиДоставки);
	ДанныеДляЗапроса.Вставить("Машины", 		Машины);
	
	Возврат ДанныеДляЗапроса;	
	
КонецФункции

Функция ПолучитьДанныеТочкиДоставкиНаСервереSVRP(СписокЗаказов)//ДанныеЗаказа)
	
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	ТочкиДоставки = Новый Массив;
	
	//Геннадий ++
	СписокЗаказов.Колонки.Добавить("НеобходимыеСвойстваМашины", Новый ОписаниеТипов("СписокЗначений"));
	
	Для Каждого ДанныеЗаказа Из СписокЗаказов Цикл		
		ТочкаДоставки = Новый Структура();
		ТочкаДоставки.Вставить("id", 						Строка(СокрЛП(ДанныеЗаказа.НомерЗаказа)));
		ТочкаДоставки.Вставить("ref", 						Строка(ДанныеЗаказа.Ссылка.УникальныйИдентификатор()));
		
		ТочкаДоставкиКоординаты = Новый Структура("lat, lon", ДанныеЗаказа.Широта, ДанныеЗаказа.Долгота);
		ТочкаДоставки.Вставить("point", 					ТочкаДоставкиКоординаты);
		ТочкаДоставки.Вставить("time_window", 				ОбработатьВременноеОкно(ДанныеЗаказа.ВременноеОкно));// "09:00:00-18:00:00");
		ТочкаДоставки.Вставить("hard_window", 				ДанныеЗаказа.ЖесткоеВременноеОкно);
		
		ТочкаДоставкиПараметрыГруза 						= Новый Структура("weight_kg", ДанныеЗаказа.ВесБрутто);
		ТочкаДоставкиПараметрыГрузаОбъем 					= Новый Структура("depth_m, height_m, width_m", ДанныеЗаказа.Глубина, ДанныеЗаказа.Высота, ДанныеЗаказа.Ширина);
		ТочкаДоставкиПараметрыГруза.Вставить("volume", 		ТочкаДоставкиПараметрыГрузаОбъем);
		ТочкаДоставкиПараметрыГруза.Вставить("units", 		ДанныеЗаказа.КоличествоМест);
		ТочкаДоставки.Вставить("shipment_size", 			ТочкаДоставкиПараметрыГруза);
		
		//ТочкаДоставки.Вставить("penalty", СформироватьСтруктуруШтрафов(ДанныеЗаказа.ШтрафыДляЗаказов));
		ТочкаДоставки.Вставить("shared_service_duration_s", ДанныеЗаказа.ВремяОбслуживанияАдрес);
		ТочкаДоставки.Вставить("service_duration_s", 		ДанныеЗаказа.ВремяОбслуживанияЗаказ);
		
		ТегиМашины = Новый Массив;
		Для Каждого ТегМашины Из ДанныеЗаказа.НеобходимыеСвойстваМашины Цикл 
			ТегиМашины.Добавить(ТегМашины.Значение);	
		КонецЦикла;
		
		ТочкаДоставки.Вставить("required_tags", 			ТегиМашины);
		ТочкаДоставки.Вставить("depot_duration_s", 			ДанныеЗаказа.ВремяЗагрузкиЗаказаНаСкладе);
		ТочкаДоставки.Вставить("type", 						ДанныеЗаказа.ТипЗаказа);
		ТочкаДоставки.Вставить("description", 				ДанныеЗаказа.АдресПолучателя);
		ТочкаДоставки.Вставить("title", 					ДанныеЗаказа.НаименованиеПолучателя);
		
		//ТочкаДоставки.Вставить("planned_route",				ДанныеЗаказа.ПорядокМаршрутизации);//для сохранения порядка точек в рейсе
		
		ТочкиДоставки.Добавить(ТочкаДоставки);
	КонецЦикла;
		
	Возврат ТочкиДоставки;
	
КонецФункции

Функция ПолучитьДанныеМашинНаСервереSVRP(СписокЗаказов, ТраспортныеСредства, УчитыватьПорядок = Ложь)
	
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	//id = ТочкиДоставки.Количество() + 1;
	
	Машины = Новый Массив;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Ссылка,
	|	новаТранспорт.Наименование КАК ref,
	|	новаТранспорт.Код КАК id,
	|	ДополнительныеПараметрыТранспортаСрезПоследних.МаксимальноеКоличествоЗаказовПриПолигональнойМаршрутизации КАК units,
	|	новаТранспорт.Грузоподъемность КАК weight_kg,
	|	новаТранспорт.ГлубинаКузова КАК depth_m,
	|	новаТранспорт.ШиринаКузова КАК width_m,
	|	новаТранспорт.ВысотаКузова КАК height_m,
	//|	новаТранспорт.СтоимостьКМ КАК km,
	//|	новаТранспорт.СтоимостьЧас КАК hour,
	//|	новаТранспорт.СтоимостьФикс КАК fixed,
	//|	новаТранспорт.СтоимостьЗаРейс КАК run,
	//|	новаТранспорт.СтоимостьЗаЗаказ КАК location,
	|	1 КАК max_runs,
	//|	новаТранспорт.СтартНеНаСкладе КАК start_at,
	//|	новаТранспорт.ЗавершениеНеНаСкладе КАК finish_at,
	|	""driving"" КАК routing_mode,
	|	ИСТИНА КАК visit_depot_at_start,
	|	ЛОЖЬ КАК return_to_depot
	//|	новаТранспорт.ШиротаТочкиСтарта КАК ШиротаТочкиСтарта,
	//|	новаТранспорт.ДолготаТочкиСтарта КАК ДолготаТочкиСтарта,
	//|	новаТранспорт.ШиротаТочкиЗавершения КАК ШиротаТочкиЗавершения,
	//|	новаТранспорт.ДолготаТочкиЗавершения КАК ДолготаТочкиЗавершения,
	//|	новаТранспорт.ВременноеОкноТочкаСтарта КАК ВременноеОкноТочкаСтарта,
	//|	новаТранспорт.ВременноеОкноТочкаОкончания КАК ВременноеОкноТочкаОкончания,
	//|	новаТранспорт.Теги.(
	//|		Тег.Наименование КАК Тег
	//|	) КАК Теги,
	//|	новаТранспорт.Смены.(
	//|		НомерСтроки КАК id,
	//|		ВременноеОкно КАК time_window,
	//|		ЖесткоеВременноеОкно КАК hard_window,
	//|		МинимальноеКоличествоСтопов КАК minimal_stops,
	//|		МаксимальноеКоличествоСтопов КАК maximal_stops,
	//|		Штрафы КАК Штрафы,
	//|		МаксимальныйПробег КАК max_mileage_km,
	//|		МаксимальнаяПродолжительностьСмены КАК max_duration_s,
	//|		ГруппаБалансировки.Наименование КАК balanced_group_id
	//|	) КАК Смены
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыТранспорта.СрезПоследних() КАК ДополнительныеПараметрыТранспортаСрезПоследних
	|	ПО новаТранспорт.Ссылка = ДополнительныеПараметрыТранспортаСрезПоследних.Транспорт
	|ГДЕ
	|	новаТранспорт.Ссылка В(&ТраспортныеСредства)";
	Запрос.УстановитьПараметр("ТраспортныеСредства", ТраспортныеСредства);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Машина = Новый Структура("id, ref, return_to_depot, max_runs"); //  visit_depot_at_start"); //max_duration_s");
			ЗаполнитьЗначенияСвойств(Машина, Выборка);
			
			Если Выборка.visit_depot_at_start = Истина Тогда 
				Машина.Вставить("visit_depot_at_start", Выборка.visit_depot_at_start);	
			КонецЕсли;
			
			Машина.id = Строка(Выборка.id);// Строка(Выборка.Ссылка.УникальныйИдентификатор());
			
			Машина.Вставить("routing_mode", Выборка.routing_mode);
			
			МашинаОбъем = Новый Структура("width_m, depth_m, height_m");
			ЗаполнитьЗначенияСвойств(МашинаОбъем, Выборка);
			МашинаТТХ = Новый Структура("units, weight_kg, volume");
			ЗаполнитьЗначенияСвойств(МашинаТТХ, Выборка);
			МашинаТТХ.Вставить("volume", МашинаОбъем);
			
			Машины.Добавить(Машина);	
			
			//08.07.2022 ++
			Если УчитыватьПорядок Тогда
				Машина.Вставить("fixed_planned_route", Истина);
				
				ЗаказыСУстановленнымПорядкомМаршрутизации = Новый Массив;
				СписокЗаказов.Сортировать("ПорядокМаршрутизации");
				Для Каждого ДанныеЗаказа Из СписокЗаказов Цикл	
					
					Если ДанныеЗаказа.ПорядокМаршрутизации = 0 Тогда Продолжить; КонецЕсли;
					
					ТочкаДоставки = Новый Структура();
					ТочкаДоставки.Вставить("id", 		СокрЛП(ДанныеЗаказа.НомерЗаказа));// + " " + ДанныеЗаказа.ПорядокМаршрутизации);
					//ТочкаДоставки.Вставить("shift_id", 	"0");
					ЗаказыСУстановленнымПорядкомМаршрутизации.Добавить(ТочкаДоставки);
				КонецЦикла;	
				
				Locations = Новый Структура("locations", ЗаказыСУстановленнымПорядкомМаршрутизации);
				
				Машина.Вставить("planned_route", Locations);
			КонецЕсли;	
			//08.07.2022 --
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат Машина;
	
КонецФункции

Функция ПолучитьЧасовойПоясСеанса() Экспорт
	
	Возврат СмещениеСтандартногоВремени()/3600;
	
КонецФункции

Процедура ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение)
	
	//ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	//ОбъектОбработка.ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение);
	
	//ЯМ_МаршрутизацияСервер.ЗаписатьДанныеЗапроса(id, Статус, Сообщение);
	
	//Сообщить(id);
	
КонецПроцедуры

Настройки = ПолучитьНастройкиМодуля();
//Геннадий #4493 29.06.2022 --