
&НаСервере
Процедура ПриИзмененииДаты()
	
	Начало = НачалоДня(Дата);
	Конец = КонецДня(Дата);
	Список.Параметры.УстановитьЗначениеПараметра("Рейс", ВыбранныйРейс);
	Элементы.Список.Обновить();
	ЭлементыОтбора = Список.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	
	//ПолеКомпоновкиДата = Новый ПолеКомпоновкиДанных("Дата");
	ПолеКомпоновкиСт = Новый ПолеКомпоновкиДанных("РезультатДоставки");
	ПолеКомпоновкиССД = Новый ПолеКомпоновкиДанных("СнятьСДоставки");
	
	//ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДата;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = КонецДня(Дата);
	//
	//ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДата;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = НачалоДня(Дата);
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиСт;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Статус;
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиССД;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	
	Элементы.Список.Обновить();
	ТаблицаИнформации.Параметры.УстановитьЗначениеПараметра("Рейс", ВыбранныйРейс);
	Элементы.ТаблицаИнформации.Обновить();
	УстановитьФлагиДоступностиУстановкиСтатусов();
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиДоступностиУстановкиСтатусов()
	Если ЗначениеЗаполнено(ВыбранныйРейс) Тогда
		Если ВыбранныйРейс.РаспечатанМЛ Тогда
			Элементы.ГруппаРейс.ЦветФона = WebЦвета.БледноЗеленый;
			ДоступностьУстановкиСтатусов = Истина;
		Иначе
			Элементы.ГруппаРейс.ЦветФона = WebЦвета.Персиковый;
			ДоступностьУстановкиСтатусов = Ложь;
		КонецЕсли;	
	Иначе
		Элементы.ГруппаРейс.ЦветФона = WebЦвета.Персиковый;
		ДоступностьУстановкиСтатусов = Ложь;
	КонецеСли;	
КонецПроцедуры	

&НаСервере
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем Сп, Сп3;
	
	Если Константы.СкрытьШапку.Получить() Тогда
		Элементы.Список.Шапка = Ложь;
	КонецеСли;	
	Дата = ТекущаяДата();
	Статус = Справочники.РезультатыДоставки.КДоставке;
	
		
	Элементы.ОтборПоТипуОплаты.Заголовок = "ОТБОР = " + СокрЛП(Справочники.ТипыОплат.Наличные.Наименование);
	ТипОплаты = Справочники.ТипыОплат.Наличные;
	ПодсчитатьИтогиНаСервере();
	
	
	
	//Если Не ЗначениеЗаполнено(Константы.АдресСервера.Получить()) Тогда
		Константы.АдресСервера2.Установить("http://192.168.5.9/logist");
	//КонецЕсли;	
	
	//Если Не ЗначениеЗаполнено(Константы.АдресСервера2.Получить()) Тогда
		Константы.АдресСервера.Установить("http://94.159.8.82/logist");                  //http://178.238.114.142/logist        obmen.strizh-logistic.ru
	//КонецЕсли;	
	
	////////////////////////////////////
	Если Не Константы.ТестоваяСреда.Получить() Тогда
		//Константы.АдресСервера0.Установить("http://87.229.252.154/logist");
		Константы.АдресСервера0.Установить("http://31.44.84.106/logist");
	Иначе	
		Константы.АдресСервера0.Установить("http://192.168.5.104/logist_copy_on_lem");
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Константы.ИмяПользователя.Получить()) Тогда
		Константы.ИмяПользователя.Установить("Admin");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Константы.ПарольПользователя.Получить()) Тогда
		Константы.ПарольПользователя.Установить("123");
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Константы.ВыборПровайдераГеопозиционирования.Получить()) Тогда
		Константы.ВыборПровайдераГеопозиционирования.Установить(Перечисления.ИспользоватьПровайдерГеопозиционирования.СамыйТочныйПровайдер);
	КонецЕсли;	
	
	//Если Не ЗначениеЗаполнено(Константы.ТолькоБесплатные.Получить()) Тогда
		Константы.ТолькоБесплатные.Установить(Истина);
	//КонецЕсли;	
	
	//Если Не ЗначениеЗаполнено(Константы.ИспользоватьСотовуюСеть.Получить()) Тогда
		Константы.ИспользоватьСотовуюСеть.Установить(Истина);
	//КонецЕсли;	

	//Если Не ЗначениеЗаполнено(Константы.ИспользоватьСетьПередачиДанных.Получить()) Тогда
		Константы.ИспользоватьСетьПередачиДанных.Установить(Истина);
	//КонецЕсли;	                       ,
	
	
	//Если Не ЗначениеЗаполнено(Константы.ИспользоватьСпутники.Получить()) Тогда
		Константы.ИспользоватьСпутники.Установить(Истина);
	//КонецЕсли;	
	
	//Если Не ЗначениеЗаполнено(Константы.СкрытьШапку.Получить()) Тогда
		Константы.СкрытьШапку.Установить(Истина);
	//КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Константы.Пароль.Получить()) Тогда
		Константы.Пароль.Установить("423874");
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Константы.ИнтервалОбмена.Получить()) Тогда
		Константы.ИнтервалОбмена.Установить(1000);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Константы.ИнтервалАвтоматическогоОбменаДанными.Получить()) Тогда
		Константы.ИнтервалАвтоматическогоОбменаДанными.Установить(1000);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Константы.ВариантПривязкиТелефона.Получить()) Тогда
		Константы.ВариантПривязкиТелефона.Установить(Перечисления.ВариантыПривязкиТелефона.КТранспорту);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Константы.КоличествоЗапросовПоОтправленномуЧеку.Получить()) Тогда
		Константы.КоличествоЗапросовПоОтправленномуЧеку.Установить(8);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Константы.ИнтервалЗапросовПоОтправленномуЧеку.Получить()) Тогда
		Константы.ИнтервалЗапросовПоОтправленномуЧеку.Установить(10);
	КонецЕсли;	
	
	
	Если Не ЗначениеЗаполнено(Константы.ПарольАдмина.Получить()) Тогда
		Константы.ПарольАдмина.Установить("77665");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Константы.НомерТелефона.Получить()) Тогда
		Заголовок = Константы.НомерТелефона.Получить() + " -- " + Формат(Константы.НомерПалеты.Получить(), "ЧГ=");
	ИначеЕсли Константы.ВариантПривязкиТелефона.Получить() = Перечисления.ВариантыПривязкиТелефона.КВодителю Тогда
		Заголовок = Константы.Водитель.Получить();
	Иначе	
		Заголовок = Константы.Транспорт.Получить();
	КонецеСли;
	
	//основной обмен
	Если Не ЗначениеЗаполнено(Константы.УзелПланаОбмена.Получить()) Тогда
		ЭУ = ПланыОбмена.СтатусыЗаказа.ЭтотУзел().ПолучитьОбъект();
		ЭУ.Наименование = "Телефон";
		ЭУ.Записать();
		
		ЦУ = ПланыОбмена.СтатусыЗаказа.НайтиПоКоду("000000002");
		Если ЦУ.Пустая() Тогда
			ЦУ = ПланыОбмена.СтатусыЗаказа.СоздатьУзел();
			ЦУ.Наименование = "ЦБ";
			ЦУ.Код = "000000002";
			ЦУ.Записать();
		КонецеСли;	
		
		Константы.УзелПланаОбмена.Установить(ЦУ.Ссылка);
	КонецеСли;	
	
	//обмен с сервером ККМ
	Если Не ЗначениеЗаполнено(Константы.УзелПланаОбменаСерверККМ.Получить()) Тогда
		ЭУ = ПланыОбмена.ОбменСКассовымСервером.ЭтотУзел().ПолучитьОбъект();
		ЭУ.Наименование = "Телефон";
		ЭУ.Записать();
		
		ЦУ = ПланыОбмена.ОбменСКассовымСервером.НайтиПоКоду("000000002");
		Если ЦУ.Пустая() Тогда
			ЦУ = ПланыОбмена.ОбменСКассовымСервером.СоздатьУзел();
			ЦУ.Наименование = "ЦБ";
			ЦУ.Код = "000000002";
			ЦУ.Записать();
		КонецеСли;	
		
		Константы.УзелПланаОбменаСерверККМ.Установить(ЦУ.Ссылка);
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Константы.ИдентификаторТелефона.Получить()) Тогда
		Г = Новый УникальныйИдентификатор;
		Константы.ИдентификаторТелефона.Установить(Строка(Г));
	КонецеСли;
	Константы.ПриведениеТелефонногоНомера.Установить(Истина);
	ПоследняяВыгрузкаДанных = Формат(Константы.ДатаПоследнегоОбмена.Получить(), "ДЛФ=TD");
	Об = Справочники.РезультатыДоставки.Доставлен.ПолучитьОбъект();
	Об.Доставка = Истина;
	Об.Забор = Истина;
	Об.записать();	
	
	ВыбранныйРейс = ОбщегоНазначения.ПолучитьТекущийРейс();
	
	
	Об = Справочники.РезультатыДоставки.КДоставке.ПолучитьОбъект();
	Об.Забор = Истина;
	Об.записать();	
	
	РаботаСЧекамиСервер.ОчисткаСтарыхДанныхПоЧекам();
	ОбщегоНазначения.ОчиститьДанныеВРСПоСтарымОшибкамОбмена();
	ОбщегоНазначения.ОчиститьВыгруженныеДанныеПрикрепленныхФайлов();
	СМСИнформированиеКлиентСервер.ОчиститьДанныеПоРассылкамСМС();
	ОбщегоНазначения.ОчиститьВыгруженныеДанныеТранзакцийСБП();
	ОбщегоНазначения.ОчиститьВыгруженныеИСтарыеДанныеИнформированияПоЗаказам();
	ОбщегоНазначения.ОчиститьВыгруженныеДанныеТранзакцийAssist();
	НадписьВерсия = Метаданные.Версия;
	ТаблицаИнформации.Параметры.УстановитьЗначениеПараметра("ИнформацияПрочитана", Ложь);

	ПриИзмененииДаты();

	
	ОбработчикФоновыхЗаданий.ВыполнитьОбменВФоне();
КонецПроцедуры

&НаСервере
Функция ПриведениеНомера()
	Возврат Константы.ПриведениеТелефонногоНомера.Получить();
КонецФункции	

&НаКлиенте
Процедура НабратьНомерВыбор(Схема, Номер)
	//ЗвонокПоСтарому = Истина;
	#Если МобильноеПриложениеКлиент Тогда
		Если СредстваТелефонии.ПоддерживаетсяНаборНомера(Истина) Тогда
			СредстваТелефонии.НабратьНомер(Номер, Истина);
			//ЗвонокПоСтарому = Ложь;
		КонецеСли;	
	#КонецЕсли
	
	//Если ЗвонокПоСтарому Тогда
	//	ЗапуститьПриложение(Схема + Номер);
	//КонецеСли;	
	
	ОбщегоНазначения.ЗафиксироватьФактЗвонка(Элементы.Список.ТекущиеДанные.Номер, Элементы.Список.ТекущиеДанные.Телефон, ТекущаяДата());
КонецПроцедуры	

&НаКлиенте
Процедура Вызов(Схема)
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Телефон) Тогда
		
		Тел = Элементы.Список.ТекущиеДанные.Телефон;
		
		Тел = СтрЗаменить(Элементы.Список.ТекущиеДанные.Телефон, ",", Символы.ПС);
		
		Если СтрЧислоСтрок(Тел) = 1 Тогда
			Тел = СтрЗаменить(Элементы.Список.ТекущиеДанные.Телефон, ";", Символы.ПС);
		КонецеСли;	
		
		Если СтрЧислоСтрок(Тел) = 1 Тогда
			Если ПриведениеНомера() Тогда
				НабратьНомерВыбор(Схема, ОбщийМодуль.ПолучитьНомерДляОтправкиСМС(СокрЛП(Элементы.Список.ТекущиеДанные.Телефон)));
			Иначе	
				НабратьНомерВыбор(Схема, СокрЛП(Элементы.Список.ТекущиеДанные.Телефон));
			КонецЕсли;	
		Иначе	
			СписокТел = Новый СписокЗначений;
			Для Сч = 1 По СтрЧислоСтрок(Тел) Цикл
				Если ПриведениеНомера() Тогда
					СписокТел.Добавить(ОбщийМодуль.ПолучитьНомерДляОтправкиСМС(СтрПолучитьСтроку(Тел, Сч)));
				Иначе	
					СписокТел.Добавить(СтрПолучитьСтроку(Тел, Сч));
				КонецЕсли;	
			КонецЦикла;	
			
			Зн = СписокТел.ВыбратьЭлемент("Выберите номер...");
			Если Зн <> Неопределено Тогда
				НабратьНомерВыбор(Схема, СокрЛП(Зн.Значение));
			КонецеСли;	
		КонецеСли;	
		
	    
	    
	Иначе
	    
		// Сообщим пользователю о том, что информация не консистентна
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Телефон не указан!'", "ru");
		Сообщение.Поле  = "Объект.Телефон";
		Сообщение.Сообщить();
	    
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Позвонить(Команда)
	Вызов("tel:");
КонецПроцедуры


&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаИтоги Тогда
		ПодсчитатьИтоги(Неопределено);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРезультатовДоставки(Сп, ИМ = Неопределено, ЭтоЗабор = Ложь)
	Если ЗначениеЗаполнено(ИМ) Тогда
		Наб = РегистрыСведений.РезультатыДоставкиПоИМ.СоздатьНаборЗаписей();
		Наб.Отбор.ИнтернетМагазин.Установить(ИМ);
		Наб.Прочитать();
		Таб_ = Наб.Выгрузить();
		Для Каждого Тек Из Таб_ Цикл
			Если Тек.РезультатДоставки.ЗапретВыбора Тогда
				Продолжить;
			КонецеСли;	
			Сп.Добавить(Тек.РезультатДоставки);
		КонецЦикла;
		Если Таб_.Количество() = 0 Тогда
			Выб = Справочники.РезультатыДоставки.Выбрать();
			Пока Выб.Следующий() Цикл
				Если Выб.ЗапретВыбора Тогда
					Продолжить;
				КонецеСли;	
				Сп.Добавить(Выб.Ссылка);			
			КонецЦикла;	
		Иначе
			Сп.Добавить(Справочники.РезультатыДоставки.КДоставке);
			Сп.Добавить(Справочники.РезультатыДоставки.Доставлен);
		КонецеСли;	
	Иначе
		Выб = Справочники.РезультатыДоставки.Выбрать();
		Пока Выб.Следующий() Цикл
			Если Выб.ЗапретВыбора Тогда
				Продолжить;
			КонецеСли;	
			Если ЭтоЗабор Тогда
				Если Не Выб.Забор Тогда
					Продолжить;
				КонецеСли;	
			КонецеСли;	
			Сп.Добавить(Выб.Ссылка);			
		КонецЦикла;	
	КонецеСли;
Конецпроцедуры	

&НаСервере
Процедура УстановитьСтатус(Док, Ст, ТипОпл)
	ТекД = ТекущаяДата();
	
	Д = Док.ПолучитьОбъект();
	//Д.СтатусВодитель = Ст;
	Д.РезультатДоставки = Ст;
	Д.Записать(РежимЗаписиДокумента.Запись);
	
	//Наб = РегистрыСведений.ИзмененияСтатусовЗаказов.СоздатьНаборЗаписей();
	//Наб.Отбор.Заказ.Установить(Док);
	//Наб.Отбор.Период.Установить(ТекД);
	//Наб.Прочитать();
	//
	//Нов = Наб.Добавить();
	//Нов.Заказ = Док;
	//Нов.Период = ТекД;
	////Нов.Статус = Ст;
	//Нов.РезультатДоставки = Ст;
	//Нов.ТипОплаты = ТипОпл;
	//Наб.Записать();
	
	МеханизмУведомленийСервер.УстановитьСтатусУведомления(Док, Истина);
КонецПроцедуры	

&НаСервере
Процедура УстановитьСтатус2(Док, Ст)
	ТекД = ТекущаяДата();
	
	Д = Док.ПолучитьОбъект();
	Д.ПричинаОтказаПереноса = Ст;
	Д.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры	

&НаСервере
Процедура УстановитьДатуПереноса(Док, Дат)
	ТекД = ТекущаяДата();
	
	Д = Док.ПолучитьОбъект();
	Д.ДатаПереноса = Дат;
	Д.Записать();
КонецПроцедуры	


&НаСервере
Процедура ЗаполнитьСписокЗначений2(Сп, Рез = Неопределено, ЭтоЗабор = Ложь)
	Если Рез = Неопределено Тогда
		Выб = Справочники.ПричиныОтказаПереноса.Выбрать();
		Пока Выб.Следующий() Цикл
			Если ЭтоЗабор Тогда
				Если Не Выб.Забор Тогда
					Продолжить;
				КонецеСли;	
			КонецеСли;	
			Если Не Выб.ЗапретВыбора Тогда
				Сп.Добавить(Выб.Ссылка);
			КонецеСли;	
		КонецЦикла;	
	Иначе
		Наб = РегистрыСведений.ПричиныОтказаПереносаПоРезультатамДоставки.СоздатьНаборЗаписей();
		Наб.Отбор.РезультатДоставки.Установить(Рез.Ссылка);
		Наб.Прочитать();
		
		Если наб.Количество() = 0 Тогда
			Выб = Справочники.ПричиныОтказаПереноса.Выбрать();
			Пока Выб.Следующий() Цикл
				Если ЭтоЗабор Тогда
					Если Не Выб.Забор Тогда
						Продолжить;
					КонецеСли;	
				КонецеСли;	
				Если Не Выб.ЗапретВыбора Тогда
					Сп.Добавить(Выб.Ссылка);
				КонецеСли;	
			КонецЦикла;	
		Иначе
			Таб_ = Наб.Выгрузить();
			Для Каждого Тек Из Таб_ Цикл
				Если ЭтоЗабор Тогда
					Если Не Тек.ПричинаОтказаПереноса.Забор Тогда
						Продолжить;
					КонецеСли;	
				КонецеСли;	
				Сп.добавить(Тек.ПричинаОтказаПереноса);
			КонецЦикла;	
		КонецеСли;	
	КонецеСлИ;
КонецПроцедуры	

//Процедура ЗаполнитьСписокПричинОтказовПереносов(Сп, Рез = Неопределено, ЭтоЗабор = Ложь)


&НаСервере
Функция ПолучитьСписокПричинОтказовПереносовБезУчетаРезультата(ЭтоЗабор)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПричиныОтказаПереноса.Ссылка КАК Причина
	|ИЗ
	|	Справочник.ПричиныОтказаПереноса КАК ПричиныОтказаПереноса
	|ГДЕ
	|	ПричиныОтказаПереноса.ЗапретВыбора = ЛОЖЬ
	|	И ПричиныОтказаПереноса.Забор = &ЭтоЗабор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПричиныОтказаПереноса.Наименование";
	Зап.УстановитьПараметр("ЭтоЗабор", ЭтоЗабор);
	Выб = Зап.Выполнить().Выбрать();
	Сп = Новый СписокЗначений;
	Пока Выб.Следующий() Цикл	
		Сп.Добавить(Выб.Причина);
	КонецЦикла;	
	Возврат Сп;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПричинОтказовПереносов(Сп, ПричинаНевыполненияДоставки = Неопределено, ЭтоЗабор = Ложь)
	
	Если Не ЗначениеЗаполнено(ПричинаНевыполненияДоставки) Тогда
		Сп = ПолучитьСписокПричинОтказовПереносовБезУчетаРезультата(ЭтоЗабор);
	Иначе 
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПричиныОтказаПереносаПоРезультатамДоставки.ПричинаОтказаПереноса.Ссылка КАК ПричинаОтказаПереноса
		            |ИЗ
		            |	РегистрСведений.ПричиныОтказаПереносаПоРезультатамДоставки КАК ПричиныОтказаПереносаПоРезультатамДоставки
		            |ГДЕ
		            |	ПричиныОтказаПереносаПоРезультатамДоставки.ТипЗаказа = &ТипЗаказа
		            |	И ПричиныОтказаПереносаПоРезультатамДоставки.РезультатДоставки = &РезультатДоставки
		            |	И ПричиныОтказаПереносаПоРезультатамДоставки.ПричинаОтказаПереноса.ЗапретВыбора = ЛОЖЬ
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	ПричиныОтказаПереносаПоРезультатамДоставки.ПричинаОтказаПереноса.Наименование";
		Зап.УстановитьПараметр("РезультатДоставки", ПричинаНевыполненияДоставки);
		Если ЭтоЗабор Тогда
			Зап.УстановитьПараметр("ТипЗаказа", Перечисления.ТипЗаказа.Забор);
		Иначе
			Зап.УстановитьПараметр("ТипЗаказа", Перечисления.ТипЗаказа.Доставка);
		КонецЕсли;	
		
		Рез = Зап.Выполнить();
		Если Рез.Пустой() Тогда
			Сп = ПолучитьСписокПричинОтказовПереносовБезУчетаРезультата(ЭтоЗабор);
			Возврат;
		КонецеСли;
		
		Выб = Рез.Выбрать();
		Пока Выб.Следующий() Цикл
			Сп.Добавить(Выб.ПричинаОтказаПереноса);
		КонецЦикла;	
	КонецеСли;	
	
	
	
	//Если Рез = Неопределено Тогда
	//	Выб = Справочники.ПричиныОтказаПереноса.Выбрать();
	//	Пока Выб.Следующий() Цикл
	//		Если ЭтоЗабор Тогда
	//			Если Не Выб.Забор Тогда
	//				Продолжить;
	//			КонецеСли;	
	//		КонецеСли;	
	//		Если Не Выб.ЗапретВыбора Тогда
	//			Сп.Добавить(Выб.Ссылка);
	//		КонецеСли;	
	//	КонецЦикла;	
	//Иначе
	//	Наб = РегистрыСведений.ПричиныОтказаПереносаПоРезультатамДоставки.СоздатьНаборЗаписей();
	//	Наб.Отбор.РезультатДоставки.Установить(Рез.Ссылка);
	//	Наб.Прочитать();
	//	
	//	Если наб.Количество() = 0 Тогда
	//		Выб = Справочники.ПричиныОтказаПереноса.Выбрать();
	//		Пока Выб.Следующий() Цикл
	//			Если ЭтоЗабор Тогда
	//				Если Не Выб.Забор Тогда
	//					Продолжить;
	//				КонецеСли;	
	//			КонецеСли;	
	//			Если Не Выб.ЗапретВыбора Тогда
	//				Сп.Добавить(Выб.Ссылка);
	//			КонецеСли;	
	//		КонецЦикла;	
	//	Иначе
	//		Таб_ = Наб.Выгрузить();
	//		Для Каждого Тек Из Таб_ Цикл
	//			Если ЭтоЗабор Тогда
	//				Если Не Тек.ПричинаОтказаПереноса.Забор Тогда
	//					Продолжить;
	//				КонецеСли;	
	//			КонецеСли;	
	//			Сп.добавить(Тек.ПричинаОтказаПереноса);
	//		КонецЦикла;	
	//	КонецеСли;	
	//КонецеСлИ;
КонецПроцедуры


&НаСервере
Функция ДокНал(Док) 
	Если Док.ТипОплаты = Справочники.ТипыОплат.Наличные Или Док.ТипОплаты = Справочники.ТипыОплат.Терминал Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецеСли;
КонецФункции	

&НаСервере
Функция СуммаДоставки(Док)
	Возврат Док.СуммаДоставка;
КонецФункции


&НаСервере
Функция СуммаПредоплаты(Док)
	Возврат Док.СуммаПредоплаты;
КонецФункции


&НаСервере
Функция ЗаполнитьСписокОплат(Сп)
	Сп.Добавить(Справочники.ТипыОплат.Наличные);
	Сп.Добавить(Справочники.ТипыОплат.Терминал);
КонецФункции

&НаСервере
Функция ПолучитьТипОплатыЗаказа(Док)
	Возврат Док.ТипОплаты.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьИМЗаказа(Док)
	Если ЗначениеЗаполнено(Док.ИнтернетМагазин) Тогда
		Возврат Док.ИнтернетМагазин.Ссылка;
	Иначе
		Возврат Справочники.ИнтернетМагазины.ПустаяСсылка();
	КонецеСли;	
КонецФункции


&НаСервере
Функция ПолучитьРежимВыбораТипаОплатыЗаказа(Док)
	Если Док.ТипОплаты = Справочники.ТипыОплат.Наличные Или Док.ТипОплаты = Справочники.ТипыОплат.Терминал Тогда
		Возврат Док.ВыбиратьТипОплаты;
	Иначе
		Возврат Ложь;
	КонецеСли;	
КонецФункции

&НаСервере
Функция ЭтоЗабор(Док)
	Если Док.ТипЗаказа = Перечисления.ТипЗаказа.Забор Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецеСли;	
КонецФункции


&НаСервере
Функция ЭтоПеренос(Рез)
	Возврат Рез.Перенос;	
КонецФункции	

&НаСервере
Функция ЭтоДоставка(Рез)
	Возврат Рез.Доставка;	
КонецФункции

&НаСервере
Функция ЭтоВозвратНаДоставку(Рез)
	Если Рез = Справочники.РезультатыДоставки.КДоставке Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ЭтоЗаезд(Рез)
	Возврат Рез.Заезд;	
КонецФункции	


&НаСервере
Функция ЭтоДоставкаИлиКДоставке(Рез)
	Возврат Рез.Ссылка = Справочники.РезультатыДоставки.Доставлен или Рез.Ссылка = Справочники.РезультатыДоставки.КДоставке;	
КонецФункции	


&НаСервере
Функция ЗаполнитьСписокВидовПодъемов(Сп)
	Сп.Добавить(Перечисления.ВидыПодъемовВодителя.БезПодъема);
	Сп.Добавить(Перечисления.ВидыПодъемовВодителя.РучнойПодъем);
	Сп.Добавить(Перечисления.ВидыПодъемовВодителя.Лифт);
КонецФункции


&НаСервере
Функция ЗаполнитьСписокВидовПримерок(Сп)
	Сп.Добавить(Ложь, "Без примерки");
	Сп.Добавить(Истина, "Примерка произведена");
КонецФункции


Функция НеобходимаОтметкаОПодъеме(Док)
	//Возврат Док.ПодъемОплаченПартнером;
	Возврат Док.ЗапрашиватьДанныеОТипеПодъема;
КонецФункции

Функция НеобходимаОтметкаОПримерке(Док)
	//Возврат Док.ПодъемОплаченПартнером;
	Возврат Док.НеобходимаТарификацияПримерки;
КонецФункции


//&НаСервере
//Процедура УстановитьПараметрыПодъема(Док, ВидП, Этаж)
//	ТекД = ТекущаяДата();
//	
//	Д = Док.ПолучитьОбъект();
//	Д.ВидПодъема = ВидП;
//	Д.Этаж = Этаж;
//	Д.Записать(РежимЗаписиДокумента.Запись);
//КонецПроцедуры	

&НаСервере
Функция ЗаполнитьСписокЭтажей(Сп)
	Для Сч = 1 По 99 Цикл
		Сп.Добавить(Сч);
	КонецЦикла;	
КонецФункции


&НаСервере
Функция ЗаполнитьСписокХодок(Сп)
	Для Сч = 1 По 10 Цикл
		Сп.Добавить(Сч);
	КонецЦикла;	
КонецФункции


&НаСервере
Функция ЭтоРучнойПодъем(ВарП)
	Если ВарП = Перечисления.ВидыПодъемовВодителя.РучнойПодъем Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ЭтоПодъем(ВарП)
	Если ВарП = Перечисления.ВидыПодъемовВодителя.РучнойПодъем Или ВарП = Перечисления.ВидыПодъемовВодителя.Лифт Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции



&НаСервере
Функция ПолучитьТипОплаты(Реал)
	Возврат Реал.ТипОплаты.Ссылка;
КонецФункции


&НаСервере
Функция БезПодъема(ВарП)
	Если ВарП = Перечисления.ВидыПодъемовВодителя.БезПодъема Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ПолучитьАдресОтправкиЧека(Реал)
	Возврат Реал.EmailКлиента;
КонецФункции	

&НаСервере
Функция ПолучитьВесЗаказа(Реал)
	Возврат Реал.ВесЗаказа;
КонецФункции	

&НаКлиенте
Функция ВвестиДанныеПодъема(ТекСтрока, ФормаСтатуса, ЭтоДоставка = Ложь)
	//ВозврСтрук = Новый Структура;
	//ВозврСтрук.Вставить("ВидПодъема", "");
	//ВозврСтрук.Вставить("Этаж", 0);
	//ВозврСтрук.Вставить("КоличествоХодокНаЭтаж", 0);
	Подъем = Ложь;
	Подъем = НеобходимаОтметкаОПодъеме(ТекСтрока);
	Если Подъем Тогда
		СписокВидовПодъемов = Новый СписокЗначений;
		ЗаполнитьСписокВидовПодъемов(СписокВидовПодъемов);
		
		ВыбП = СписокВидовПодъемов.ВыбратьЭлемент("Выберите вариант подъема...");
		Если ВыбП <> Неопределено Тогда
			Если ЭтоРучнойПодъем(ВыбП.Значение) Тогда
				СписокЭтажей = Новый СписокЗначений;
				ЗаполнитьСписокЭтажей(СписокЭтажей);
				ВыбЭ = СписокЭтажей.ВыбратьЭлемент("Выберите этаж...");
				Если ВыбЭ <> Неопределено Тогда
					ФормаСтатуса.Объект.ВидПодъема = ВыбП.Значение;
					ФормаСтатуса.Объект.Этаж = ВыбЭ.Значение;
					//ВозврСтрук.Вставить("ВидПодъема", ВыбП.Значение);
					//ВозврСтрук.Вставить("Этаж", ВыбЭ.Значение);
				КонецеСли;	
			Иначе
				ФормаСтатуса.Объект.ВидПодъема = ВыбП.Значение;
				ФормаСтатуса.Объект.КоличествоХодокНаЭтаж = 1;
				
				//ВозврСтрук.Вставить("КоличествоХодокНаЭтаж", 1);
				//ВозврСтрук.Вставить("ВидПодъема", ВыбП.Значение);
			КонецеСли;
			
			Если ЭтоПодъем(ВыбП.Значение) Тогда
				//ВозврСтрук.Вставить("КоличествоХодокНаЭтаж", 1);
				ФормаСтатуса.Объект.КоличествоХодокНаЭтаж = 1;
				Если Не ЭтоДоставка Тогда
					ФормаСтатуса.Объект.ВесЗаказа = ПолучитьВесЗаказа(ТекСтрока);
				КонецеСли;	
			КонецеСли;						
		КонецеСли;
	КонецеСли;
	Возврат Истина;
КонецФункции	

&НаСервере
Функция ПолучитьКоличествоSKUПримерки(Знач КоллТоваров)
	ТабСв = КоллТоваров.Выгрузить();
	ТабСв.Свернуть("Номенклатура", "КоличествоДоставлено");
	Возврат ТабСв.Количество();
КонецФункции


&НаКлиенте
Функция ВвестиДанныеПримерки(ТекСтрока, ФормаСтатуса)
	Примерка = Ложь;
	Примерка = НеобходимаОтметкаОПримерке(ТекСтрока);
	Если Примерка Тогда
		СписокВидовПримерок = Новый СписокЗначений;
		ЗаполнитьСписокВидовПримерок(СписокВидовПримерок);
		
		ВыбП = СписокВидовПримерок.ВыбратьЭлемент("Укажите, была ли примерка...");
		Если ВыбП <> Неопределено Тогда
			Если ВыбП.Значение Тогда
				ФормаСтатуса.Объект.БылаПроизведенаПримерка = Истина;
				Кол = ПолучитьКоличествоSKUПримерки(ФормаСтатуса.Объект.ДоставленныеТовары);
				ФормаСтатуса.Объект.КоличествоSKUПримерки = Кол;
			КонецеСли;	
		КонецеСли;
	КонецеСли;
	Возврат Истина;
КонецФункции	



&НаСервере
Функция КИКзаказа(Заказ)
	Если Заказ.ТребуетсяКодИдентификацииКлиента Тогда
		Возврат Заказ.КодИдентификацииКлиента;
	Иначе
		Возврат Неопределено;
	КонецеСли;	
КонецФункции	

&НаКлиенте
Функция ИдентификацияКлиентаПоКИК(Заказ, КИК)
	КИКЗаказа = КИКзаказа(Заказ);
	Если Не ЗначениеЗаполнено(КИКЗаказа) Тогда
		Возврат "КодНеТребуется";
	КонецеСли;
	
	//ПараметрыФ = Новый Структура;
	//параметрыФ.Вставить("ТребуемыйКод", КИКЗаказа);
	//ОткрытьФорму("ОбщаяФорма.Авторизация", ФормаВводаКИК,,,,, Новый ОписаниеОповещения("ПриОткрытииКИКЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	Ф = ПолучитьФорму("ОбщаяФорма.ФормаВводаКИК");
	Ф.ТребуемыйКод = КИКЗаказа;
	Ф.Заказ = Заказ;
	Результат = Ф.ОткрытьМодально();
	КИК = КИКЗаказа;
	Возврат Результат;
	
	//ЗапрошенныйКИК = "";
	//Если Не ВвестиСтроку(ЗапрошенныйКИК, "Введите код..", 10, Ложь) Тогда
	//	Возврат Ложь;
	//Иначе
	//	Если СокрЛП(ЗапрошенныйКИК) <> СокрЛП(КИКЗаказа) Тогда
	//		Сообщить("Код неверен!", СтатусСообщения.ОченьВажное);
	//		Возврат Ложь;
	//	Иначе     
	//		КИК = ЗапрошенныйКИК; 
	//		Возврат истина;
	//	КонецеСли;
	//КонецЕсли;	
КонецФункции


//&НаКлиенте
//Процедура ПриОткрытииКИКЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	Ответ = Результат;
//	Если Ответ <> "Ok" Тогда
//		Закрыть();
//	КонецеСли;
//КонецПроцедуры

&НаСервере
Функция ТребуетсяПодписаниеИВозвратСопрДокументов(Заказ)
	Возврат Заказ.ПодписаниеИВозвратСопрДокументов;
КонецФункции

&НаСервере
Функция ПолучитьКалендарьДоставки(Заказ)
	Возврат Заказ.КалендарьДоставки;
КонецФункции	


&НаСервере
Функция ПолучитьДатуРейса()
	Если Не ВыбранныйРейс.Пустая() Тогда
		Возврат ВыбранныйРейс.ДатаРейса;
	Иначе
		Возврат ТекущаяДата();
	КонецеСли;	
КонецФункции	

&НаКлиенте
Процедура ИзменитьСтатус(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ДоступностьУстановкиСтатусов Тогда
		Сообщить("По рейсу не распечатан МЛ!");
		Возврат;
	КонецеСли;	
	
	Если ТребуетсяПодписаниеИВозвратСопрДокументов(Элементы.Список.ТекущаяСтрока) Тогда
		СтрокаТ = "ВНИМАНИЕ!!!!" + Символы.ПС + 
					"Необходимо:" + Символы.ПС +
					"1) Подписать и вернуть документы" + Символы.ПС +
					"2) Сфотографировать документы в МП";
		ШрФ = Новый Шрифт(, 12, Истина);
		ФСтрока = Новый ФорматированнаяСтрока(СтрокаТ, ШрФ); 
		Предупреждение(ФСтрока);
	КонецеСли;	
	
	СписокОплат = Новый СписокЗначений;
	ЗаполнитьСписокОплат(СписокОплат);
	
	
	
	ФлЭтоЗабор = ЭтоЗабор(Элементы.Список.ТекущаяСтрока);
	Сп = Новый СписокЗначений;
	ИМ = ПолучитьИМЗаказа(Элементы.Список.ТекущаяСтрока);
	Если ФлЭтоЗабор Тогда
		ЗаполнитьСписокРезультатовДоставки(Сп, , Истина);
	Иначе	
		ЗаполнитьСписокРезультатовДоставки(Сп, ИМ);
	КонецЕсли;	
	Выб = Сп.ВыбратьЭлемент("Выберите статус...");
	
	
	Дат = Дата("00010101");
	Выб2 = Неопределено;
	КИК = "";
	
	Если Выб <> Неопределено Тогда
		Сп2 = Новый СписокЗначений;
		ЗаполнитьСписокПричинОтказовПереносов(Сп2, Выб.Значение, ФлЭтоЗабор);
		
		Эл_ = Элементы.Список.ТекущаяСтрока;
		ВыбОпл = ПолучитьТипОплатыЗаказа(Эл_);
		
		Если Не ЭтоДоставкаИлиКДоставке(Выб.Значение) Тогда
			Выб2 = Сп2.ВыбратьЭлемент("Выберите причину отказа/переноса...");
			Если Выб2 <> Неопределено Тогда
				УстановитьСтатус2(Эл_, Выб2.Значение);
			КонецеСли;
			Если ЭтоПеренос(Выб.Значение) Тогда
				//Дат = ТекущаяДата() + 86400;
				Ф = ПолучитьФорму("ОбщаяФорма.ФормаВводаДаты");
				Ф.КалендарьДоставки = ПолучитьКалендарьДоставки(Эл_);
				//Ф.Дата = Дат;
				Ф.ДатаРейса = ПолучитьДатуРейса();
				Ф.ОткрытьМодально();
				Если Ф.Ок Тогда
					УстановитьДатуПереноса(Эл_, Ф.Дата);
					Дата2 = Ф.Дата;
				КонецеСли;	
			КонецЕСли;
		Иначе
			Если ЭтоДоставка(Выб.Значение) Тогда
				РезультатИдентификации = ИдентификацияКлиентаПоКИК(Эл_, КИК);
				Если РезультатИдентификации <> "ВерныйКод" И РезультатИдентификации <> "БезКода" И РезультатИдентификации <> "КодНеТребуется" Тогда
					Возврат;
				КонецеСли;	
			КонецеСли;	
			Если ПолучитьРежимВыбораТипаОплатыЗаказа(Эл_) Тогда
				ВыбОплЗнч = СписокОплат.ВыбратьЭлемент("Выберите тип оплаты...");
				Если ВыбОплЗнч <> Неопределено Тогда
			    	ВыбОпл = ВыбОплЗнч.Значение;
				КонецеСли;	
			КонецеСли;	
		КонецеСли;	
		УстановитьСтатус(Эл_, Выб.Значение, ВыбОпл);
		
		Ф = ПолучитьФорму("Документ.ДанныеЗаказаВодителя.Форма.ФормаДокумента");
		Ф.Объект.Реализация = Эл_;
		
		Ф.Объект.результатДоставки = Выб.Значение;
		Ф.УстановитьВидимость();
		
		Сп2 = Новый СписокЗначений();
		Сп3 = Новый СписокЗначений();
		Сп4 = Новый СписокЗначений();
		Сп5 = Новый СписокЗначений();
		Сп6 = Новый СписокЗначений();
		Сп7 = Новый СписокЗначений();
		Сп8 = Новый СписокЗначений();
		Сп = ВернутьСтрокиДокумента(Эл_, Сп2, Сп3, Сп4, Сп5, Сп6, Сп7, Сп8);
		Инд = 0;
		
		Если ПолучитьРежимВыбораТипаОплатыЗаказа(Эл_) Тогда
			Ф.Объект.ВыбранныйТипОплаты = ВыбОпл;
		КонецеСли;	
		
		Ф.Объект.ТипОплаты = ПолучитьТипОплаты(Эл_);
		
		Для Каждого Тек Из Сп Цикл
			Нов = Ф.Объект.ДоставленныеТовары.Добавить();
			Нов.Номенклатура = Тек.Значение;
			Нов.КоличествоДоставлено = Сп2.Получить(Инд).Значение;
			//Если ДокНал(Эл_) Тогда
				Нов.Цена = Сп3.Получить(Инд).Значение;
				Нов.Сумма = Нов.Цена*Нов.КоличествоДоставлено;
			//КонецеСли;
			Нов.СтавкаНДС = Сп4.Получить(Инд).Значение;
			Нов.ШтрихкодТовара = Сп5.Получить(Инд).Значение;
			Нов.КодМаркировки = Сп6.Получить(Инд).Значение;
			Нов.ПоставщикТовара = Сп7.Получить(Инд).Значение;
			Инд = Инд + 1;
		КонецЦикла;	
		
		
		Ф.Объект.СуммаПредоплаты = СуммаПредоплаты(Эл_);
		Ф.Объект.СуммаДоставка = СуммаДоставки(Эл_);
		Если ДокНал(Эл_) Тогда	
			Ф.Объект.СуммаНал = Ф.Объект.СуммаДоставка + Ф.Объект.ДоставленныеТовары.Итог("Сумма");
		КонецеСли;	
		
		Если Выб2 <> Неопределено Тогда
			Ф.Объект.ПричинаОтказаПереноса = Выб2.Значение;
		КонецеСли;	
		Ф.Объект.ДатаПереноса = Дата2;
		
		Ф.Объект.АдресОтправкиЧека = ПолучитьАдресОтправкиЧека(Эл_);
		
		Если РезультатИдентификации = "ВерныйКод" Тогда
			Ф.Объект.КодИдентификацииКлиента = КИК;
		ИначеЕсли РезультатИдентификации = "БезКода" Тогда	
			Ф.Объект.СтатусУстановленБезКИК = Истина;
		КонецеСли;	
		
		Если ЭтоЗаезд(Выб.Значение) Тогда
			ВвестиДанныеПодъема(Эл_, Ф);
			ВвестиДанныеПримерки(Эл_, Ф);
		КонецеСли;	
		
		Если ЭтоВозвратНаДоставку(Выб.Значение) Тогда
			Ф.Объект.ВозвратНаДоставку = Истина;
		КонецЕсли;	
		
		Если ЭтоДоставка(Выб.Значение) Тогда
			////////  Элементы.Список.ТекущаяСтрока
			//Подъем = НеобходимаОтметкаОПодъеме(Элементы.Список.ТекущаяСтрока);
			//Если Подъем Тогда
			//	СписокВидовПодъемов = Новый СписокЗначений;
			//	ЗаполнитьСписокВидовПодъемов(СписокВидовПодъемов);
			//	
			//	ВыбП = СписокВидовПодъемов.ВыбратьЭлемент("Выберите вариант подъема...");
			//	Если ВыбП <> Неопределено Тогда
			//		Если ЭтоРучнойПодъем(ВыбП.Значение) Тогда
			//			СписокЭтажей = Новый СписокЗначений;
			//			ЗаполнитьСписокЭтажей(СписокЭтажей);
			//			ВыбЭ = СписокЭтажей.ВыбратьЭлемент("Выберите этаж...");
			//			Если ВыбЭ <> Неопределено Тогда
			//				Ф.Объект.ВидПодъема = ВыбП.Значение;
			//				Ф.Объект.Этаж = ВыбЭ.Значение;
			//			КонецеСли;	
			//		Иначе
			//			Ф.Объект.КоличествоХодокНаЭтаж = 1;
			//			Ф.Объект.ВидПодъема = ВыбП.Значение;
			//		КонецеСли;
			//		
			//		Если ЭтоПодъем(ВыбП.Значение) Тогда
			//			Ф.Объект.КоличествоХодокНаЭтаж = 1;
			//			//СписокХодок = Новый СписокЗначений;
			//			//ЗаполнитьСписокХодок(СписокХодок);
			//			//ВыбХ = СписокХодок.ВыбратьЭлемент("Сколько ходок...");
			//			//Если ВыбХ <> Неопределено Тогда
			//			//	Ф.Объект.КоличествоХодокНаЭтаж = ВыбХ.Значение;
			//			//КонецеСли;	
			//		КонецеСли;						
			//	КонецеСли;
			//КонецеСли;
			
			ВвестиДанныеПодъема(Эл_, Ф, Истина);
			
			ВвестиДанныеПримерки(Эл_, Ф);
			
			/////////
			Ф.Открыть();
		Иначе
			Ф.Записать();
		КонецЕСли;	
	КонецеСли;	
	//ОбщийМодульКлиент.ЗапроситьЖурналЗвонков();
	Элементы.Список.Обновить();
КонецПроцедуры


&НаСервере
Функция ВернутьСтрокиДокумента(Док, Сп2, Сп3, Сп4, Сп5, Сп6, Сп7, Сп8)
	Д = Док.ПолучитьОбъект();
	Сп = Новый СписокЗначений;
	Для Каждого Тек Из Д.Товары Цикл
		Сп.Добавить(Тек.Товар);
		Сп2.Добавить(Тек.Количество);
		Сп3.Добавить(Тек.Цена);
		Сп4.Добавить(Тек.СтавкаНДС);
		Сп5.Добавить(Тек.ШтрихкодТовара);  
		Сп6.Добавить(Тек.КодМаркировки);
		Сп7.Добавить(Тек.ПоставщикТовара);
		Сп8.Добавить(Тек.ПризнакПредметаРасчета);
	КонецЦикла;	
	Возврат Сп;
КонецФункции	


Функция СформироватьСписокЗаказов(Стат)
	Сп = Новый СписокЗначений;
	Таб2 = Новый ТаблицаЗначений;
	Таб2.Колонки.добавить("Ш");
	Таб2.Колонки.добавить("Д");
	Таб2.Колонки.добавить("К");
	Выб = Документы.Заказ.Выбрать(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	Пока Выб.Следующий() Цикл
		Если Выб.ПометкаУдаления Тогда
			Продолжить;
		КонецЕСли;
		
		Если Выб.РезультатДоставки <> Стат Или Выб.СнятьСДоставки Тогда
			Продолжить;
		КонецеСли;	
		Струк = Новый Структура;
		Струк.Вставить("Ш", Выб.Широта);
		Струк.Вставить("Д", Выб.Долгота);
		Най = Таб2.НайтиСтроки(Струк);
		Если най.Количество() = 0 Тогда
			Попытка
			Коор = Новый ГеографическиеКоординаты(Выб.Широта, Выб.Долгота);
			Сп.Добавить(Коор, "Заказ: (" + Формат(Выб.ПорядокСортировки, "ЧН=0; ЧГ=") + ")" + СокрЛП(Выб.Номер) + Символы.ПС + "Доставка: " + Выб.ВремяДоставки);
			Нов = Таб2.Добавить();
			Нов.Ш = Выб.Широта;
			Нов.Д = Выб.Долгота;
			Нов.К = Коор;
		Исключение
			
			КонецПопытки;
		Иначе
			НайСп = Сп.НайтиПоЗначению(Най[0].К);
			НайСп.Представление = НайСп.Представление + Символы.ПС + "Заказ: (" + Формат(Выб.ПорядокСортировки, "ЧН=0; ЧГ=") + ")" + СокрЛП(Выб.Номер) + Символы.ПС + "Доставка: " + Выб.ВремяДоставки;
		КонецеСли;	
	КонецЦикла;	
	Возврат Сп;
КонецФункции

&НаКлиенте
Процедура Карта(Команда)
	//Сп = СформироватьСписокЗаказов(Статус);
	//#Если МобильноеПриложениеКлиент Тогда
	//Если Сп.Количество() <> 0 Тогда
	//	ПоказатьНаКарте(Сп);
	//КонецеСли;	
	//#КонецЕсли
	
	
	Ф = ПолучитьФорму("Обработка.ПостроениеМаршрута.Форма.Форма");
	Ф.Рейс = ВыбранныйРейс;
	Ф.ОткрытьМодально();
КонецПроцедуры


&НаКлиенте
Процедура Посмотреть(Команда)    
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецеСли;	
	Д = Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока);
	ОткрытьФорму("Документ.Заказ.Форма.ФормаДокумента", Д);
	
КонецПроцедуры


Функция ПолучитьРежимАвторизации()
	Возврат Константы.АвторизацияСВыборомТранспорта.Получить();
КонецФункции	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВозможностьАвтологина = ОбщегоНазначения.ПроверитьВозможностьАвтологина();
	Если Не ВозможностьАвтологина Тогда
		Если ПолучитьРежимАвторизации() Тогда
			Ф = ПолучитьФорму("ОбщаяФорма.АвторизацияСВыборомТранспорта");
		Иначе	
			Ф = ПолучитьФорму("ОбщаяФорма.Авторизация");
		КонецеСли;
		Ф.ОткрытьМодально();
		Если Не Ф.Авторизован Тогда 
			Отказ = Истина;
		КонецеСли;	
	КонецеСли;
	
	#Если МобильноеПриложениеКлиент Тогда
		ПриложениеДляПечатиУстановлено = ПечатьНаПринтереЧековКлиент.ПроверкаУстановленностиПриложения();
		Если Не ПриложениеДляПечатиУстановлено Тогда
			//МенеджерОборудованияКлиент.УстановитьДрайверИзМакетаСтриж("mobilePrinter");
			Сообщить("Не найдено приложение для печати чеков!");
		КонецеСли;
	#КонецЕСли
	
	Если ВыбранныйРейс.Пустая() Тогда
		ПодключитьОбработчикОжидания("АктуализироватьРейс", 60, Ложь);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьНаличиеУведомленийИПоказать", 60, Ложь);
	ПодключитьОбработчикОжидания("ПолучитьРазмерСпискаИнформации", 60, Ложь);
КонецПроцедуры



&НаКлиенте
Процедура ОтобратьЗаказы(Команда)
	// Вставить содержимое обработчика.
	Мас = Новый СписокЗначений;
	ЗаполнитьСписокРезультатовДоставки(Мас);
	Эл = Мас.ВыбратьЭлемент("Выберите статус..");
	Если Эл <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Эл.Значение) Тогда
			Статус = "";
			Элементы.КнопкаОтборЗаказов.Заголовок = "Отбор = заказы к доставке";
		Иначе	
			Статус = Эл.Значение;
			Элементы.КнопкаОтборЗаказов.Заголовок = "Отбор = " + Строка(Эл.Значение);
		КонецеСли;	
		ПриИзмененииДаты();
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ПодсчитатьИтоги(Команда)
	ПодсчитатьИтогиНаСервере();	
КонецПроцедуры

&НаСервере
Функция ВернутьСуммуЗаказа(Заказ)
	Если ВыбранныйРейс.Пустая() Тогда
		Возврат 0;
	КонецеСли;	
	
	//Если Не З.УчитыватьИтогоСКлиента И Не З.ЧастичныйВыкупЗапрещен Тогда        Корректировка по Ашану - пока оставляем старую логику
	//Если Не З.УчитыватьИтогоСКлиента И Не З.ЧастичныйВыкупЗапрещен Тогда
	////Если Не З.УчитыватьИтогоСКлиента Тогда
	//	Струк = Новый Структура;
	//	Струк.Вставить("Реализация", З.Ссылка);
	//	Выб = Документы.ДанныеЗаказаВодителя.Выбрать(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()), Струк, "Дата Убыв");
	//	Если Выб.Следующий() Тогда
	//		Возврат Выб.СуммаДоставка + Выб.ДоставленныеТовары.Итог("Сумма");
	//	Иначе
	//		Возврат З.СуммаДоставка + З.Товары.Итог("Сумма");
	//	КонецеСли;
	//Иначе
	//	Возврат З.ИтогоСКлиента;
	//КонецеСли;
	
	Зап = Новый запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	ДанныеЗаказаВодителя.Ссылка КАК Док,
	            |	ДанныеЗаказаВодителя.СуммаДоставка КАК СуммаДоставка,
	            |	ДанныеЗаказаВодителя.СуммаНал КАК СуммаНал
	            |ИЗ
	            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	            |ГДЕ
	            |	ДанныеЗаказаВодителя.Реализация.Ссылка = &Заказ
	            |	И ДанныеЗаказаВодителя.Реализация.Рейс = &Рейс
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ДанныеЗаказаВодителя.Дата УБЫВ";
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ВыбранныйРейс.ДатаРейса) + 18000); // 5 часов
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ВыбранныйРейс.ДатаРейса) + 18000);
	Зап.УстановитьПараметр("Рейс", ВыбранныйРейс.Ссылка);
	
	Зап.УстановитьПараметр("Заказ", Заказ);
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		//Возврат Выб.СуммаДоставка + Выб.СуммаНал;
		Возврат Выб.СуммаНал;
	Иначе
		Возврат Заказ.СуммаДоставка + Заказ.Товары.Итог("Сумма");
	КонецеСли;	
	
КонецФункции	


Функция ПолучитьТипОплатыЗаказаНаСервере(Заказ)
	Если ВыбранныйРейс.Пустая() Тогда
		Возврат Справочники.ТипыОплат.Наличные;
	КонецеСли;	
	
	
	Зап = Новый запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	ДанныеЗаказаВодителя.ТипОплаты КАК ТипОплаты
	            |ИЗ
	            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	            |ГДЕ
	            |	ДанныеЗаказаВодителя.Реализация.Ссылка = &Заказ
	            |	И ДанныеЗаказаВодителя.Реализация.Рейс = &Рейс
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ДанныеЗаказаВодителя.Дата УБЫВ";
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ВыбранныйРейс.ДатаРейса) + 18000); // 5 часов
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ВыбранныйРейс.ДатаРейса) + 18000);
	
	Зап.УстановитьПараметр("Рейс", ВыбранныйРейс.Ссылка);
	
	Зап.УстановитьПараметр("Заказ", Заказ);
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.ТипОплаты;
	Иначе
		Возврат Заказ.ТипОплаты;
	КонецеСли;	
КонецФункции	

&НаСервере
процедура ПодсчитатьИтогиНаСервере()
	// Вставить содержимое обработчика.
	
	
	Таб.Очистить();
	Если ВыбранныйРейс.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	//Выб = Документы.Заказ.Выбрать(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	
	СтрукОтбора = Новый Структура;
	СтрукОтбора.Вставить("Рейс", ВыбранныйРейс.Ссылка);
	
	Выб = Документы.Заказ.Выбрать(, , СтрукОтбора); 
	Пока Выб.Следующий() Цикл
		Если Выб.СнятьСДоставки Или Выб.ТипЗаказа = Перечисления.ТипЗаказа.Забор Тогда
			Продолжить;
		КонецеСли;	
		
		//Если ТипОплаты <> Справочники.ТипыОплат.ПустаяСсылка() Тогда
		//	Если Выб.ТипОплаты <> ТипОплаты Тогда
		//		Продолжить;				
		//	КонецеСли;
		//КонецеСли;

		Если ТипОплаты <> Справочники.ТипыОплат.ПустаяСсылка() Тогда
			Если ПолучитьТипОплатыЗаказаНаСервере(Выб.Ссылка) <> ТипОплаты Тогда
				Продолжить;				
			КонецеСли;
		КонецеСли;
		
		Если Выб.РезультатДоставки.Пустая() тогда
			ВидСтр = Справочники.РезультатыДоставки.КДоставке;
		Иначе
			ВидСтр = Выб.РезультатДоставки;
		КонецеСли;	
		
		Струк = Новый Структура;
		Струк.Вставить("Вид", ВидСтр);
		Най = Таб.НайтиСтроки(Струк);
		
		Если Най.Количество() = 0 Тогда
			Нов = Таб.Добавить();
		Иначе
			Нов = Най[0];
		КонецеСлИ;
		
		Если Выб.РезультатДоставки.Пустая() тогда
			Нов.Вид = Справочники.РезультатыДоставки.КДоставке;
		Иначе
			Нов.Вид = Выб.РезультатДоставки;
		КонецеСли;	
		Нов.Количество = Нов.Количество + 1;
		Нов.Сумма = Нов.Сумма + ВернутьСуммуЗаказа(Выб.Ссылка); 
	КонецЦикла;
	ИтКол = Таб.Итог("Количество");
	ИтСум = Таб.Итог("Сумма");
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокТиповОплат()
	Сп = Новый СписокЗначений;
	Сп.Добавить(Справочники.ТипыОплат.Наличные);
	Сп.Добавить(Справочники.ТипыОплат.Терминал);
	Сп.Добавить(Справочники.ТипыОплат.БезналичныйРасчет);
	Сп.Добавить(Справочники.ТипыОплат.ВКредит);
	Сп.Добавить(Справочники.ТипыОплат.ОплаченоВМагазине);
	Сп.Добавить(Справочники.ТипыОплат.СБП);
	Сп.Добавить(Справочники.ТипыОплат.ПустаяСсылка(), "ВСЕ ЗАКАЗЫ");
	Возврат Сп;
КонецФункции

&НаКлиенте
Процедура ОтборПоТипуОплаты(Команда)
	// Вставить содержимое обработчика.
	Сп = ЗаполнитьСписокТиповОплат();
	Выб = Сп.ВыбратьЭлемент("Выберите тип оплаты...");
	Если Выб = Неопределено Тогда
		Возврат;
	КонецеСли;	
	Если ЗначениеЗаполнено(Выб.Значение) Тогда
		Элементы.ОтборПоТипуОплаты.Заголовок = "ОТБОР = " + СокрЛП(Выб.Значение);
	Иначе
		Элементы.ОтборПоТипуОплаты.Заголовок = "ВСЕ ЗАКАЗЫ";
	КонецеСли;	
	ТипОплаты = Выб.Значение;
	ПодсчитатьИтоги(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокЛогисту(Команда)
	Тел = ПолучитьТелефонЛогиста();
	если Не ЗначениеЗаполнено(Тел) Тогда
		Предупреждение("Не указан телефон логиста!");
		Возврат;
	КонецеСли;	
	ЗапуститьПриложение("tel:" + Тел);
КонецПроцедуры

&НаСервере
Функция ПолучитьТелефонЛогиста() Экспорт
	Возврат Константы.ТекущийРегион.Получить().НомерТелефонаСтаршегоЛогиста;
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	ВыбранныйРейс = ОбщегоНазначения.ПолучитьТекущийРейс();
	Элементы.Список.Обновить();
	ПриИзмененииДаты();
	ПоследняяВыгрузкаДанных = Формат(Константы.ДатаПоследнегоОбмена.Получить(), "ДЛФ=DT");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОбновитьДанныеНаСервере();
	
	Если ВыбранныйРейс.Пустая() Тогда
		ПодключитьОбработчикОжидания("АктуализироватьРейс", 60, Ложь);
	КонецЕсли;	
КонецПроцедуры



&НаКлиенте
Процедура АктуализироватьРейс()
	ОтключитьОбработчикОжидания("ПроверитьФлагРаспечатанногоМЛПоРейсу");
	ПромРейс = ОбщегоНазначения.ПолучитьТекущийРейс();
	Если ЗначениеЗаполнено(ПромРейс) Тогда
		ВыбранныйРейс = ПромРейс;
		ПриИзмененииДаты();
		ОтключитьОбработчикОжидания("АктуализироватьРейс");
		Если Не МаршрутизацияСервер.РаспечатанМЛ(ВыбранныйРейс) Тогда
			ПодключитьОбработчикОжидания("ПроверитьФлагРаспечатанногоМЛПоРейсу", 60, Ложь);
		КонецеСли;	
	КонецеСли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьФлагРаспечатанногоМЛПоРейсу()
	Если ВыбранныйРейс.Пустая() Тогда
		ОтключитьОбработчикОжидания("ПроверитьФлагРаспечатанногоМЛПоРейсу");
	Иначе		
		Если МаршрутизацияСервер.РаспечатанМЛ(ВыбранныйРейс) Тогда
			УстановитьФлагиДоступностиУстановкиСтатусов();
			ОтключитьОбработчикОжидания("ПроверитьФлагРаспечатанногоМЛПоРейсу");
		КонецеСли;	
	КонецеСли;
КонецПроцедуры	

&НаСервере
Функция ПолучитьКоличествоЭлементовИнформации(Рейс)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КОЛИЧЕСТВО(ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.Заказ) КАК КоличествоСтрокИнформации
	            |ИЗ
	            |	РегистрСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах.СрезПоследних(, ) КАК ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних
	            |ГДЕ
	            |	ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.Рейс = &Рейс
	            |	И ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.ИнформацияПрочитана = ЛОЖЬ";
	Зап.УстановитьПараметр("Рейс", Рейс);
	Выб = Зап.Выполнить().Выбрать();
	Выб.Следующий();
	Возврат Выб.КоличествоСтрокИнформации;
КонецФункции	

&НаКлиенте
Процедура ПолучитьРазмерСпискаИнформации()
	Если ВыбранныйРейс.Пустая() Тогда
		Возврат;
	КонецеСли;
	КоличествоЭлементовИнформации = ПолучитьКоличествоЭлементовИнформации(ВыбранныйРейс);
КонецПроцедуры	

&НаСервере
Функция ПолучитьСсылкуЗаказа(НомерЗаказа)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Заказ.Ссылка КАК Заказ
	            |ИЗ
	            |	Документ.Заказ КАК Заказ
	            |ГДЕ
	            |	Заказ.Номер = &Номер";
	Зап.УстановитьПараметр("Номер", НомерЗаказа);
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.Заказ;
	Иначе
		Возврат Неопределено;
	КонецеСли;	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОкончаниеИнтервалаДоставки" Тогда
		Заказ = ПолучитьСсылкуЗаказа(Параметр);
		Если Заказ <> Неопределено Тогда
			//Элементы.Список.ТекущаяСтрока = Заказ;
			Элементы.Список.Обновить();
		КонецеСли;	
	ИначеЕсли ИмяСобытия = "АктуализироватьРейс" Тогда
		ВыбранныйРейс = ОбщегоНазначения.ПолучитьТекущийРейс();
		ПриИзмененииДаты();
		ПроверитьНаличиеУведомленийИПоказать();

	 //Вставить содержимое обработчика.
	//ИначеЕсли ИмяСобытия = "ОплатаAssist" Тогда
	//	ВозниклаОшибка = Ложь;
	//	СтруктураJSON = ИнтеграцияAssistКлиент.ДанныеJSONВСтруктуруAssist(Параметр,, ВозниклаОшибка);
	//	
	//	
	//	
	//	СтруктураРС = Новый Структура;
	//	
	//	Если СокрЛП(СтруктураJSON.STATE) = "PAY" Тогда
	//		СтруктураРС.Вставить("ТипОперации", ПредопределенноеЗначение("Перечисление.ТипыОперацийAssist.Оплата"));
	//		Сообщить("Оплата");
	//	ИначеЕсли СокрЛП(СтруктураJSON.STATE) = "CANCEL" Тогда
	//		СтруктураРС.Вставить("ТипОперации", ПредопределенноеЗначение("Перечисление.ТипыОперацийAssist.Отмена"));
	//		Сообщить("Отмена");
	//		Сообщить(Параметр);
	//		Возврат;
	//	КонецеСли;	
	//	
	//	
	//	СтруктураРС.Вставить("Заказ", "");
	//	СтруктураРС.Вставить("Сумма", Число(СтруктураJSON.amount));
	//	СтруктураРС.Вставить("Организация", "");
	//	СтруктураРС.Вставить("billnumber", СтруктураJSON.billnumber);
	//	СтруктураРС.Вставить("Оплачен", ?(СтруктураJSON.orderstate = "Оплачен", Истина, Ложь));
	//	СтруктураРС.Вставить("ДатаТранзакции", ИнтеграцияAssistКлиент.ПреобразованиеДатыAssist(СтруктураJSON.operationdate));
	//	
	//	Если СтруктураJSON.payment_type = "CASH" Тогда
	//		СтруктураРС.Вставить("ТипОплаты", ПредопределенноеЗначение("Справочник.ТипыОплат.Наличные"));
	//	ИначеЕсли СтруктураJSON.payment_type = "CARD" Тогда	
	//		СтруктураРС.Вставить("ТипОплаты", ПредопределенноеЗначение("Справочник.ТипыОплат.Терминал"));
	//	КонецеСли;	
	//	
	//	
	//	
	//	ФиксацияAssistСервер(СтруктураРС);
	//	
	//	Если СтруктураJSON.orderstate = "Оплачен" Тогда
	//		Сообщить("Оплачено!");
	//	КонецеСли;	
	КонецЕсли;	
КонецПроцедуры
		
&НаСервере
Процедура ФиксацияAssistСервер(ДанныеКФиксации)
	ИнтеграцияAssistСервер.ЗафиксироватьДанныеВРСAssist(ДанныеКФиксации);
КонецПроцедуры	


&НаСервере
Процедура ВыбранныйРейсПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ПриИзмененииДаты();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйРейсПриИзменении(Элемент)	
	ВыбранныйРейсПриИзмененииНаСервере();
	ОтключитьОбработчикОжидания("ПроверитьФлагРаспечатанногоМЛПоРейсу");
	Если Не ВыбранныйРейс.Пустая() Тогда
		Если Не МаршрутизацияСервер.РаспечатанМЛ(ВыбранныйРейс) Тогда
			ПодключитьОбработчикОжидания("ПроверитьФлагРаспечатанногоМЛПоРейсу", 60, Ложь);
		КонецеСли;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЕстьНепогашенноеУведомлениеНаСервере()
	Возврат ИнформированиеЭкипажейСервер.ЕстьНепогашенноеУведомление();
КонецФункции	

&НаКлиенте
Процедура ПроверитьНаличиеУведомленийИПоказать()
	Если ЕстьНепогашенноеУведомлениеНаСервере() Тогда
		ОткрытьФорму("ОбщаяФорма.ИнформированиеЭкипажей");
		ОтключитьОбработчикОжидания("ПроверитьНаличиеУведомленийИПоказать");
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ПолучитьТипыПрикрепленныхДокументовНаСервере(Заказ) 
	СписокДоступныхТипов = ФотографированиеСервер.ПолучитьТипыПрикрепленныхДокументов(Заказ); 
	Возврат СписокДоступныхТипов;
конецФункции	

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФотоснимка(ТипДокумента)
	Струк = Новый Структура;
	Струк.Вставить("КачествоФото", ТипДокумента.КачествоФото);
	Струк.Вставить("ЧерноБелоеФото", ТипДокумента.ЧерноБелоеФото);
	Струк.Вставить("ОтметкаНаФотоснимке", ТипДокумента.ОтметкаНаФотоснимке);
	
	Возврат Струк;
КонецФункции	

&НаКлиенте
Процедура ФотографияЗаказа(Команда)
	
	СписокДоступныхТипов = ПолучитьТипыПрикрепленныхДокументовНаСервере(Элементы.Список.ТекущаяСтрока);
	
		
	Если СписокДоступныхТипов.Количество() = 0 Тогда
		Сообщить("Список типов фотоснимков пуст!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецеСли;	
	
	ВыбТип = СписокДоступныхТипов.ВыбратьЭлемент("Выберите тип фотоснимка..");
	
	Если ВыбТип = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	ПараметрыФото = ПолучитьПараметрыФотоснимка(ВыбТип.Значение);
	
	Данные = ФотографированиеКлиент.СделатьФотоснимок(ПараметрыФото.КачествоФото, ПараметрыФото.ЧерноБелоеФото, ПараметрыФото.ОтметкаНаФотоснимке);  //Элементы.Список.ТекущаяСтрока, Элементы.Список.ТекущаяСтрока
	
	// тестирование через эмулятор, камера не пашет
	
	//Д = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//Если Не Д.Выбрать() Тогда
	//	Возврат;
	//КонецеСли;
	//
	//Данные = Новый ДвоичныеДанные(Д.ПолноеИмяФайла);
	Если Данные <> Неопределено Тогда
		Адрес = Новый УникальныйИдентификатор();
		АдресВХранилище = ПоместитьВоВременноеХранилище(Данные.Данные, Адрес);
		ОбработатьДанныеНаСервере(АдресВХранилище, Элементы.Список.ТекущаяСтрока, Элементы.Список.ТекущаяСтрока, Данные.РасширениеФайла, Данные.ТипСодержимого, ВыбТип.Значение);
	КонецеСли;	
КонецПроцедуры


&НаСервере
Процедура ОбработатьДанныеНаСервере(АдресВХранилище, Документ, Заказ, РасширениеФайла, ТипСодержимого, ТипДокумента)
	ФотографированиеСервер.ЗаписатьДанныеФайла(ПолучитьИзВременногоХранилища(АдресВХранилище), Документ, Заказ, ТипДокумента, РасширениеФайла, ТипСодержимого);
	УдалитьИзВременногоХранилища(АдресВХранилище);
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПрочтеноНаСервере(Заказ, РеквизитЗаказа, Рейс)
	// Вставить содержимое обработчика.
	ТекПериод = ТекущаяДата();
	
	Наб = РегистрыСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекПериод);
	Наб.Отбор.Реквизит.Установить(РеквизитЗаказа);
	Наб.Отбор.Заказ.Установить(Заказ);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекПериод;
	Нов.Реквизит = РеквизитЗаказа;
	Нов.Заказ = Заказ;
	Нов.Рейс = Рейс;
	Нов.ИнформацияПрочитана = Истина;
	
	Наб.Записать(Истина);
////////КЛЮЧЕВАЯ СТРОКА//////////////
//НЗ.Очистить();
/////////////////////////////////////////////////////////	
	ПланыОбмена.ЗарегистрироватьИзменения(Константы.УзелПланаОбмена.Получить(), Наб);
КонецПроцедуры

&НаКлиенте
Процедура Прочтено(Команда)
	ПрочтеноНаСервере(Элементы.ТаблицаИнформации.ТекущиеДанные.Заказ, Элементы.ТаблицаИнформации.ТекущиеДанные.РеквизитЗаказа, ВыбранныйРейс);
	Элементы.ТаблицаИнформации.Обновить();
	ПолучитьРазмерСпискаИнформации();
КонецПроцедуры

&НаКлиенте
Процедура ТумблерИнформацииПриИзменении(Элемент)
	если ТумблерИнформации = 0 Тогда
		ТаблицаИнформации.Параметры.УстановитьЗначениеПараметра("ИнформацияПрочитана", Ложь);
	ИначеЕсли ТумблерИнформации = 1 Тогда
		ТаблицаИнформации.Параметры.УстановитьЗначениеПараметра("ИнформацияПрочитана", Истина);
	КонецЕсли;	
	Элементы.ТаблицаИнформации.Обновить();
КонецПроцедуры

&НаСервере
Функция ЗапуститьМаршрутизациюНаСервере(ВыбранноеВремя, ДанныеТекущейТочки, ДанныеФинальнойТочки = Неопределено)
	// Вставить содержимое обработчика.
   	МасСтруктур = МаршрутизацияСервер.СобратьДанныеЗаказовДляМаршрутизацииЯМ(ВыбранныйРейс);
	
	
	ОтветМетода = МодульОбмен_http.МаршрутизацияЯндекс_НачатьМаршрутизациюНаСервереПоРейсу(, ВыбранныйРейс.НомерРейса, МасСтруктур, ДанныеТекущейТочки, ВыбранноеВремя, ДанныеФинальнойТочки);
	Если ОтветМетода.Свойство("ИдЗапроса") Тогда		
		ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.СветлоЗеленый;
		ОтправленЗапросНаМаршрутизацию = Истина;
		ИдентификаторЗаданияМаршрутизацииЯндекс = ОтветМетода.ИдЗапроса;
		Возврат Истина;
	Иначе
		ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.Оранжевый; 
		ОтправленЗапросНаМаршрутизацию = Ложь;
		Возврат Ложь;
	КонецеСли;
	
	
	//ОтветМетода = МодульОбмен_http.МаршрутизацияЯндекс_ПолучитьТекстЗапросаНаСервереПоРейсу(, ВыбранныйРейс.НомерРейса, МасСтруктур);
	//Если ОтветМетода.Свойство("ТекстЗапроса") Тогда		
	//	Обр = Обработки.СТРИЖ_ИнтеграцияЯндексМаршрутизация.Создать();
	//	ОтветНаЗапросМаршрутизации = Обр.ВыполнитьЗапросНаМаршрутизациюSVRP(ОтветМетода.ТекстЗапроса);
	//	Если ТипЗнч(ОтветНаЗапросМаршрутизации) = Тип("Булево") Тогда
	//		ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.Оранжевый;  
	//		ОтправленЗапросНаМаршрутизацию = Ложь;
	//		Возврат Ложь;
	//	Иначе	
	//		ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.СветлоЗеленый;
	//		ОтправленЗапросНаМаршрутизацию = Истина;
	//		ИдентификаторЗаданияМаршрутизацииЯндекс = ОтветНаЗапросМаршрутизации;
	//		Возврат Истина;
	//	КонецеСли;	
	//Иначе
	//	ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.Оранжевый; 
	//	ОтправленЗапросНаМаршрутизацию = Ложь;
	//	Возврат Ложь;
	//КонецеСли;
КонецФункции

//&НаСервере
//Функция РаспечатанМЛ()
//	Возврат ВыбранныйРейс.РаспечатанМЛ;
//КонецФункции	

//&НаКлиенте
//Функция СформироватьСписокВремени()
//	СейчасМинут = Минута(ТекущаяДата());
//	ОкрМинут = Окр(СейчасМинут + 5, -1);
//	СейчасЧасов = Час(ТекущаяДата());
//	СейчасДень = День(ТекущаяДата());
//	//СейчасМесяц = Месяц(ТекущаяДата());
//	
//	СписокВыбора = Новый СписокЗначений;
//	
//	Для Сч = 1 По 18 Цикл
//		Если ОкрМинут = 60 Тогда
//			СейчасЧасов = СейчасЧасов + 1;
//			ОкрМинут = 0;
//		КонецеСли;	
//		
//		Если СейчасЧасов = 24 Тогда
//			СейчасДень = СейчасДень + 1;
//			СейчасЧасов = 0;
//		КонецеСли;	
//		
//		//ДеньКонцаМесяца = День(КонецМеся);
//		
//		СписокВыбора.Добавить(Дата(Год(ТекущаяДата()), Месяц(ТекущаяДата()), СейчасДень, СейчасЧасов, ОкрМинут, 0), Формат(СейчасЧасов, "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(ОкрМинут, "ЧЦ=2; ЧН=00; ЧВН="));
//		ОкрМинут = ОкрМинут + 10;
//	КонецЦикла;	
//	Возврат СписокВыбора;
//КонецФункции	

//&НаСервере
//Процедура ЗафиксироватьФинальнуюТочкуРейса(Данные)
//	Рейс = ВыбранныйРейс.ПолучитьОбъект();
//	Рейс.ТипФинальнойТочкиМаршрута = Данные.ТипАдреса;
//	Рейс.АдресФинальнойТочкиМаршрута = Данные.ТипАдреса;
//	Рейс.ШиротаФинальнойТочкиМаршрута = Данные.Широта;
//	Рейс.ДолготаФинальнойТочкиМаршрута = Данные.РаспознанныйАдрес;
//	Рейс.Записать(РежимЗаписиДокумента.Запись);
//КонецПроцедуры	

//&НаСервере
//Функция ПолучитьТипАдресаФинальнойТочкиМаршрутаРейса()
//	Возврат ВыбранныйРейс.ТипФинальнойТочкиМаршрута;
//КонецФункции	

//&НаКлиенте
//Процедура ЗапуститьМаршрутизацию(Команда)
//	Если ВыбранныйРейс.Пустая() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеТекущейТочки = Неопределено;
//	ВыбранноеВремя = Неопределено;
//	Если Не РаспечатанМЛ() Тогда
//		СписокВремени = СформироватьСписокВремени();
//		ВыбранноеВремя = СписокВремени.ВыбратьЭлемент("Время выезда");
//		Если ВыбранноеВремя = Неопределено Тогда
//			Возврат;
//		КонецеСли;	
//		
//		//выбор конечной точки
//		Если ПолучитьТипАдресаФинальнойТочкиМаршрутаРейса() = 0 Тогда
//			ФормаВводаАдреса = ПолучитьФорму("ОбщаяФорма.ФормаВводаАдреса");
//			Результат = ФормаВводаАдреса.ОткрытьМодально();
//			Если Результат <> Неопределено Тогда
//				ЗафиксироватьФинальнуюТочкуРейса(Результат);
//			КонецеСли;		
//		КонецеСли;	
//	Иначе
//		ДанныеМ = ОбщегоНазначенияКлиент.ТекущиеКоординаты();
//		
//		
//		Если ДанныеМ <> Неопределено Тогда
//			ДанныеТекущейТочки = Новый Структура;
//			ДанныеТекущейТочки.Вставить("latitude", ДанныеМ.Координаты.Широта);
//			ДанныеТекущейТочки.Вставить("longitude", ДанныеМ.Координаты.Долгота);
//			//Сообщить("Широта: " + Строка(ДанныеМ.Координаты.Широта) + ", долгота: " + ДанныеМ.Координаты.Долгота);
//		Иначе
//			Сообщить("Не могу получить текущие координаты!");
//			Возврат;
//		КонецеСли;
//		
//			//ДанныеТекущейТочки = Новый Структура;
//			//ДанныеТекущейТочки.Вставить("latitude", 55.782061);
//			//ДанныеТекущейТочки.Вставить("longitude", 37.570858);
//	КонецеСли;
//		
//	Если ВыбранноеВремя = Неопределено Тогда
//		РезультатЗапуска = ЗапуститьМаршрутизациюНаСервере(Неопределено, ДанныеТекущейТочки);
//	Иначе
//		РезультатЗапуска = ЗапуститьМаршрутизациюНаСервере(ВыбранноеВремя.Значение, ДанныеТекущейТочки);
//	КонецЕсли;	
//	Если РезультатЗапуска Тогда
//		ПодключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации", 3, Ложь);
//	КонецЕсли;	
//КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьМаршрутизацию(Команда)
	Если ВыбранныйРейс.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ТипФинТочки = МаршрутизацияСервер.ПолучитьТипАдресаФинальнойТочкиМаршрутаРейса(ВыбранныйРейс);
	БезусловныйЗапросВариантаВозвращения = Ложь;
	Если ТипФинТочки <> 0 Тогда
		От = Вопрос("Вы хотите изменить точку возвращения?", РежимДиалогаВопрос.ДаНет);
		Если От = КодВозвратаДиалога.Да Тогда
			БезусловныйЗапросВариантаВозвращения = Истина;
		КонецЕсли;
	КонецЕСли;
	
	
	
	РезультатОбработки = МаршрутизацияКлиент.ЗапуститьМаршрутизациюЯМ(ВыбранныйРейс, БезусловныйЗапросВариантаВозвращения);
	Если РезультатОбработки <> Неопределено Тогда
		ФинальныйАдрес = Неопределено;
		Если РезультатОбработки.ФинальныйАдрес.ТипАдреса = 2 Тогда
			ФинальныйАдрес = "Склад";
		ИначеЕсли РезультатОбработки.ФинальныйАдрес.ТипАдреса = 3 Тогда	
			ФинальныйАдрес = РезультатОбработки.ФинальныйАдрес.ШиротаДолгота;
		КонецЕсли;	
		Если РезультатОбработки.ВыбранноеВремя = Неопределено Тогда
			РезультатЗапуска = ЗапуститьМаршрутизациюНаСервере(Неопределено, РезультатОбработки.ДанныеТекущейТочки, ФинальныйАдрес);
		Иначе
			РезультатЗапуска = ЗапуститьМаршрутизациюНаСервере(РезультатОбработки.ВыбранноеВремя, РезультатОбработки.ДанныеТекущейТочки, ФинальныйАдрес);
		КонецЕсли;	
		Если РезультатЗапуска Тогда
			ПодключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации", 3, Ложь);
		КонецЕсли;	
	КонецеСли;
КонецПроцедуры


&НаСервере
Функция ПолучитьРезультатыМаршрутизацииНаСервере()
	//ИдентификаторЗаданияМаршрутизацииЯндекс = "82c8e82e-8ac67674-8fc000ea-6fe8aeda";
	//Обр = Обработки.СТРИЖ_ИнтеграцияЯндексМаршрутизация.Создать();
	//ОтветРезультатМаршрутизации = Обр.ПолучитьРезультатыМаршрутизированияЗаказовПоРейсу(ИдентификаторЗаданияМаршрутизацииЯндекс);
	
	
	ОтветМетода = МодульОбмен_http.МаршрутизацияЯндекс_ПолучитьДанныеМаршрутизацииНаСервереПоРейсу(,ИдентификаторЗаданияМаршрутизацииЯндекс, ВыбранныйРейс.НомерРейса, ВыбранныйРейс);	
	Если ОтветМетода.РезультатВызова Тогда
		//Если ТипЗнч(ОтветРезультатМаршрутизации) = Тип("ТаблицаЗначений") Тогда
		УстановитьПорядокМаршрутизацииНаЗаказах(ОтветМетода.ДанныеМаршрутизации);
		ИдентификаторЗаданияМаршрутизацииЯндекс = "";
		ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = Новый Цвет;
		
		Если Не ВыбранныйРейс.ПроизведенаЯндексМаршрутизация Тогда
			РейсОбъект = ВыбранныйРейс.ПолучитьОбъект();
			РейсОбъект.ПроизведенаЯндексМаршрутизация = Истина;
			РейсОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецеСли;	
		Возврат Истина;
		//КонецЕсли;	
	КонецеСли;
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Процедура ПолучитьРезультатМаршрутизации()
	//ИдентификаторЗаданияМаршрутизацииЯндекс	= "57610326-eeab4ad0-e26d4e5a-1a6e735b";
	Если ЗначениеЗаполнено(ИдентификаторЗаданияМаршрутизацииЯндекс) Тогда
		Если ПолучитьРезультатыМаршрутизацииНаСервере() Тогда
			ОтключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации");
			Элементы.Список.Обновить();
			Сообщить("Данные Яндекс маршрутизации загружены");
        КонецеСли;
	КонецЕсли;	
КонецПроцедуры	

Процедура УстановитьПорядокМаршрутизацииНаЗаказах(ТаблицаДанных)
	
	ТаблицаМаршрутизации = Новый ТаблицаЗначений;
	ТаблицаМаршрутизации.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
	ТаблицаМаршрутизации.Колонки.Добавить("ПорядокВРейсе", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4,0)));
	
	ДатаМаршрутизации = ТекущаяДата();
	
	Для Каждого Тек Из ТаблицаДанных Цикл
		Нов = ТаблицаМаршрутизации.Добавить();
		Нов.НомерЗаказа = Тек.idStrizh;
		Нов.ПорядокВРейсе = Тек.routingOrder;
	КонецЦикла;	
				
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Таб.НомерЗаказа КАК НомерЗаказа,
	            |	Таб.ПорядокВРейсе КАК ПорядокВРейсе
	            |ПОМЕСТИТЬ ТабНомеров
	            |ИЗ
	            |	&Таб КАК Таб
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ТабНомеров.НомерЗаказа КАК НомерЗаказа,
	            |	ТабНомеров.ПорядокВРейсе КАК ПорядокВРейсе,
	            |	Заказ.Ссылка КАК Заказ
	            |ИЗ
	            |	ТабНомеров КАК ТабНомеров
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
	            |		ПО ТабНомеров.НомерЗаказа = Заказ.Номер";
	Зап.УстановитьПараметр("Таб", ТаблицаМаршрутизации);
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Заказ = Выб.Заказ.ПолучитьОбъект();
		Заказ.ПорядокСортировки = Выб.ПорядокВРейсе;
		Заказ.ДатаВремяПоследнейМаршрутизацииВМП = ДатаМаршрутизации;
		Заказ.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура Команда1НаСервере()
	// Вставить содержимое обработчика.  
	ПолучитьРезультатыМаршрутизацииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура Команда1(Команда)
	Команда1НаСервере();
КонецПроцедуры


&НаСервере
Функция ПолучитьКодМаршрутизацииНаСервере()
	Результат = МодульОбмен_http.ПолучитьКодДоступаКРММаршрутизации(, ВыбранныйРейс.Ссылка);
	Возврат Результат;
КонецФункции


&НаКлиенте
Процедура ПолучитьКодМаршрутизации(Команда)
	Если ВыбранныйРейс.Пустая() Тогда
		Сообщить("Выберите рейс!");
		Возврат;
	КонецЕсли;	
	Результат = ПолучитьКодМаршрутизацииНаСервере();
	Если Результат.РезультатВызова Тогда
		Сообщить("Код доступа: " + Результат.Код);
	Иначе
		Сообщить("Ошибка: " + Результат.ОписаниеОшибки);
	КонецеСли;	
КонецПроцедуры

