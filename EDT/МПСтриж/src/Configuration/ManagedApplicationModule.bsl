Процедура ОбработкаПереходаПоНавигационнойСсылке(ДанныеПереходаПоНавигационнойСсылке, СтандартнаяОбработка)
	//БазоваяСсылка = ДанныеПереходаПоНавигационнойСсылке.БазоваяНавигационнаяСсылка;
	//Путь = ДанныеПереходаПоНавигационнойСсылке.ОтносительнаяНавигационнаяСсылка;
	//ДопДанные = 
	//ДанныеПереходаПоНавигационнойСсылке.ДополнительныеДанныеПереходаВМобильноеПриложение;   
	//Параметр1 = 
	//ДанныеПереходаПоНавигационнойСсылке.ПараметрыНавигационнойСсылки.Получить("key1");
	
	Параметр1 = 
	ДанныеПереходаПоНавигационнойСсылке.ПараметрыНавигационнойСсылки.Получить("responseAssist");
	
	//Параметр2 = ДопДанные.Получить("key2");
	//Сообщение = "Произошел запуск по ссылке:" + Символы.ПС +
	//"Базовая ссылка: " + БазоваяСсылка + Символы.ПС +
	//"Параметр 1: " + Параметр1 + Символы.ПС +
	//"Параметр 2: " + Параметр2;
	//Сообщить(Сообщение);
	
	Оповестить("ОплатаAssist", Параметр1);	
	СтандартнаяОбработка = Ложь;	
КонецПроцедуры	

Процедура ПриНачалеРаботыСистемы()
	// Вставить содержимое обработчика.
	#Если МобильноеПриложениеКлиент Тогда
	//	//НомерПриложения = "679786957300";
	//	//IDПодписчика = ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений(НомерПриложения);
	//	//ОбщегоНазначения.УстановитьIDПриложения(IDПодписчика);
	
		ОбновлениеIDПодписчикаPushУведомлений();
		ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеIDПодписчикаPushУведомлений", 7200);
		ДоставляемыеУведомления.ПодключитьОбработчикУведомлений("ПриПолученииУведомления");
		
	#КонецЕсли
КонецПроцедуры

Процедура АвтоматическийОбменДанными() Экспорт
	ОбработчикФоновыхЗаданий.ВыполнитьОбменВФоне();
КонецПроцедуры	

Процедура ОбновлениеIDПодписчикаPushУведомлений() Экспорт
	IDПодписчика = МеханизмУведомленийКлиент.ПолучитьIDПодписчика();
	Если IDПодписчика <> Неопределено Тогда
		МеханизмУведомленийСервер.УстановитьIDПодписчикаPushУведомлений(IDПодписчика);
	КонецеСли;	
КонецПроцедуры	


Процедура Подключаемый_ОбновлениеIDПодписчикаPushУведомлений() Экспорт
	ОбновлениеIDПодписчикаPushУведомлений();
КонецПроцедуры	


Процедура ПередНачаломРаботыСистемы(Отказ)
	ПодключитьОбработчикОжидания("ОбновлениеIDПодписчикаPushУведомлений", 1800);
	
	
	Интервал = ОбщегоНазначения.ПолучитьИнтервалАвтоматическогоОбменаДанными();
	Если Интервал <> 0 Тогда
		ПодключитьОбработчикОжидания("АвтоматическийОбменДанными", Интервал);
	КонецеСли;	
	ДанныеМ = ОбщегоНазначенияКлиент.ТекущиеКоординаты();
	Рег = ОбщегоНазначения.ПолучитьТекущийРегион(ДанныеМ);
	Если Рег = Неопределено Тогда
		СправочникРегионовПустой = ОбщегоНазначения.СправочникРегионовПустой();
		РегионИзКонстанты = ОбщегоНазначения.ПолучитьТекущийРегионИзКонстанты();
		Если Не СправочникРегионовПустой И Не ЗначениеЗаполнено(РегионИзКонстанты) Тогда
			Рег = ОбщегоНазначенияКлиент.ВыбратьРегионВПользовательскомРежиме();
		КонецеСли;	
	КонецеСли;	
	Если ЗначениеЗаполнено(Рег) Тогда
		ОбщегоНазначения.УстановитьТекущийРегион(Рег);
	КонецеСли;	
	
	ИнтервалПроверки = ОбщегоНазначения.ПолучитьИнтервалПроверкиОкончанияИнтервалаДоставки();	
	
	Если ИнтервалПроверки <> -1 Тогда
		Если ИнтервалПроверки = 0 Тогда
			ИнтервалПроверки = 600;
		КонецеСли;	
		ПодключитьОбработчикОжидания("ПроверкаНаИнтервалДоставки", ИнтервалПроверки);
	КонецеСли;	
	
КонецПроцедуры

Процедура ПриПолученииУведомления(Уведомление, Локальное, Показано) Экспорт
	#Если МобильноеПриложениеКлиент Тогда
		Если Локальное Тогда
			Если СтрНайти(Уведомление.Данные, "ЗвонокКлиентуПоУведомлениюМП") <> 0 Тогда
				НомерЗаказа = СтрЗаменить(Уведомление.Данные, "ЗвонокКлиентуПоУведомлениюМП", "");
				//ЗапуститьПриложение("tel:" + НомерТелефона);
				Оповестить("ОкончаниеИнтервалаДоставки", НомерЗаказа);
			КонецеСли;	
		Иначе
			Если СтрНайти(Уведомление.Данные, "ЗапросНаПерекидкуЗаказов:") <> 0 Тогда
				НомерЗапроса = Прав(Уведомление.Данные, СтрДлина(Уведомление.Данные) - СтрДлина("ЗапросНаПерекидкуЗаказов:"));
				МодульОбмен.ПрогрузитьИзЦБЗапросНаПерекидкуЗаказов(НомерЗапроса);
				//ОткрываемФормузапроса
			КонецеСли;	
		КонецеСли;	
	#КонецЕсли	
КонецПроцедуры	
//	

Процедура ПроверкаНаИнтервалДоставки() Экспорт
	#Если МобильноеПриложениеКлиент Тогда	
		Мас = ОбработчикФоновыхЗаданий.СобратьДанныеПоИнтервалам();
		ОбщийМодульКлиент.СформироватьУведомления(Мас);
	#КонецЕсли
КонецПроцедуры	

