Функция ВызватьФункциюHTTPСервиса(Сервис = "SS", СтрокаJSON, МетодHTTPСервиса)
	ЗаголовокЗапроса = Новый Соответствие;
	ЗаголовокЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовокЗапроса.Вставить("Authorization", "55555");
	
	
	Если ПараметрыСеанса.ТестоваяСреда Тогда
		HTTPСоединение = Новый HTTPСоединение("192.168.5.104");
		Если Сервис = "SS" Тогда
			СтрокаРесурса = "scan_server_copy_lem/hs/ExchangeMA/V1/" + МетодHTTPСервиса; 
		ИначеЕсли Сервис = "UTL" Тогда	
			СтрокаРесурса = "logist_copy_on_lem/hs/TSDExchange/V1/" + МетодHTTPСервиса; 
		КонецеСли;	
	Иначе
		#Если НЕ МобильноеПриложениеСервер Тогда
			HTTPСоединение = Новый HTTPСоединение("192.168.5.150");		
		#Иначе		
			//HTTPСоединение = Новый HTTPСоединение("192.168.101.17");
			HTTPСоединение = Новый HTTPСоединение("192.168.5.150");
		#КонецЕсли		
		//HTTPСоединение = Новый HTTPСоединение("192.168.101.17");
		Если Сервис = "SS" Тогда
			СтрокаРесурса = "ScanServer/hs/ExchangeMA/V1/" + МетодHTTPСервиса; 
		ИначеЕсли Сервис = "UTL" Тогда	
			СтрокаРесурса = "logist/hs/TSDExchange/V1/" + МетодHTTPСервиса; 
		КонецеСли;	
	КонецеСли;	
	
	
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаРесурса, ЗаголовокЗапроса);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку("UTF-8");	
	Возврат ТекстОтвета;
КонецФункции	

Функция ПолучитьДанныеПоШК(ШК) Экспорт
	
	СтруктураJSON = Новый Структура;
	СтруктураJSON.Вставить("BC", ШК);
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураJSON);
	Ответ = ВызватьФункциюHTTPСервиса(,СтрокаJSON, "getbc");
	Возврат ДанныеJSONВСтруктуру(Ответ, "deliveryDate");
КонецФункции	

Функция СформироватьФайлJSON(СтруктураJSON)
	ЗаписьJSON = Новый ЗаписьJSON;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	ФайлJSON = ПолучитьИмяВременногоФайла("json");
	ЗаписьJSON.ОткрытьФайл(ФайлJSON);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
	ЗаписьJSON.Закрыть();	
	
	Возврат ФайлJSON;
КонецФункции	

Функция СформироватьСтрокуJSON(СтруктураJSON) Экспорт
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;		
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
КонецФункции

Функция ДанныеJSONВСтруктуру(ДанныеJSON, ИменаСвойствСоЗначениямиДата = "")
	Чт = Новый ЧтениеJSON;
	Чт.УстановитьСтроку(ДанныеJSON);
	СтруктураДанных = ПрочитатьJSON(Чт, Ложь, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.Microsoft);
	Возврат СтруктураДанных;
КонецФункции



Функция ВыгрузитьДокументыНаСерверСканирования()
	ЗапросДокументов = Новый Запрос;
	ЗапросДокументов.Текст = "ВЫБРАТЬ
	                         |	Сканирование.Номер КАК numberDoc,
	                         |	Сканирование.Дата КАК dateDoc,
	                         |	Сканирование.Проведен КАК posted,
	                         |	Сканирование.ПометкаУдаления КАК deletionMark,
	                         |	Сканирование.Регион.Код КАК regionID,
	                         |	Сканирование.РежимСканирования.Ссылка КАК РежимСканирования,
	                         |	ЕСТЬNULL(Сканирование.ЭлектронныеВесы.Код, """") КАК weigherId,
	                         |	Сканирование.ЗапросВесаСЭлектронныхВесов КАК requestForWeight,
	                         |	Сканирование.Ссылка КАК Документ,
	                         |	Сканирование.Штрихкоды.(
	                         |		Ссылка КАК Ссылка,
	                         |		НомерСтроки КАК НомерСтроки,
	                         |		Штрихкод КАК barcode,
	                         |		НомерЗаказа КАК orderId,
	                         |		НомерПалеты КАК paleteNumber,
	                         |		ВремяСканирования КАК scanTime,
	                         |		Вес КАК Weight,
	                         |		ДатаДоставки КАК deliveryDate,
	                         |		СостояниеЗаказа КАК orderState,
							 |		ИсключитьЧастичноПринятыйЗаказИзРейса КАК partiallyAcceptedOrderExcludedFromTrip,
							 |		НеУчитывать КАК ignore
	                         |	) КАК Штрихкоды,
	                         |	Сканирование.ЗаказыКПогрузке.(
	                         |		Ссылка КАК Ссылка,
	                         |		НомерСтроки КАК НомерСтроки,
	                         |		НомерЗаказа КАК orderId
	                         |	) КАК ЗаказыКПогрузке,
	                         |	Сканирование.НомерПалеты КАК paleteNumber,
	                         |	Сканирование.НомерРейса КАК tripId
	                         |ИЗ
	                         |	Документ.Сканирование КАК Сканирование
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Сканирование.Изменения КАК СканированиеИзменения
	                         |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.УзелПланаОбменаССерверомСканирования КАК УзелПланаОбменаССерверомСканирования
	                         |			ПО СканированиеИзменения.Узел.Ссылка = УзелПланаОбменаССерверомСканирования.Значение.Ссылка
	                         |		ПО (СканированиеИзменения.Ссылка = Сканирование.Ссылка)
	                         |ГДЕ
	                         |	Сканирование.Проведен = ИСТИНА";
	ВыборкаДокументов = ЗапросДокументов.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("numberDoc", ВыборкаДокументов.numberDoc);
		СтруктураДокумента.Вставить("dateDoc", ВыборкаДокументов.dateDoc);
		СтруктураДокумента.Вставить("posted", ВыборкаДокументов.posted);
		СтруктураДокумента.Вставить("deletionMark", ВыборкаДокументов.deletionMark);
		СтруктураДокумента.Вставить("regionID", ВыборкаДокументов.regionID);
		СтруктураДокумента.Вставить("paleteNumber", ВыборкаДокументов.paleteNumber);
		СтруктураДокумента.Вставить("TSDId", ПараметрыСеанса.ИдентификаторПриложения);
		СтруктураДокумента.Вставить("TSDNumber", ПараметрыСеанса.НомерТСД);
		СтруктураДокумента.Вставить("tripId", ВыборкаДокументов.tripId);
		
		ИндексЗначенияПеречисления = Перечисления.РежимыСканирования.Индекс(ВыборкаДокументов.РежимСканирования);				
		СтруктураДокумента.Вставить("scanMode", Метаданные.Перечисления.РежимыСканирования.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя);
		
		СтруктураДокумента.Вставить("weigherId", ВыборкаДокументов.weigherId);
		СтруктураДокумента.Вставить("requestForWeight", ВыборкаДокументов.requestForWeight);
		
		ВыборкаСтрок = ВыборкаДокументов.Штрихкоды.Выбрать();
		МассивСтрок = Новый Массив;
		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("barcode", ВыборкаСтрок.barcode);
			СтруктураСтроки.Вставить("orderId", ВыборкаСтрок.orderId);
			СтруктураСтроки.Вставить("paleteNumber", ВыборкаСтрок.paleteNumber);
			СтруктураСтроки.Вставить("scanTime", ВыборкаСтрок.scanTime);
			СтруктураСтроки.Вставить("Weight", ВыборкаСтрок.Weight);
			СтруктураСтроки.Вставить("deliveryDate", ВыборкаСтрок.deliveryDate);
			СтруктураСтроки.Вставить("orderState", ВыборкаСтрок.orderState);
			СтруктураСтроки.Вставить("partiallyAcceptedOrderExcludedFromTrip", ВыборкаСтрок.partiallyAcceptedOrderExcludedFromTrip);
			СтруктураСтроки.Вставить("ignore", ВыборкаСтрок.ignore);
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;	
		СтруктураДокумента.Вставить("barcodes", МассивСтрок);
		
		ВыборкаСтрок = ВыборкаДокументов.ЗаказыКПогрузке.Выбрать();
		МассивСтрок = Новый Массив;
		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("orderId", ВыборкаСтрок.orderId);
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;	
		СтруктураДокумента.Вставить("loadingOrders", МассивСтрок);
		
		
		
		МассивДокументов.Добавить(СтруктураДокумента);
	КонецЦикла;	
	
	СтрокаJSON = СформироватьСтрокуJSON(МассивДокументов);
	Ответ = ВызватьФункциюHTTPСервиса(,СтрокаJSON, "uploadScanDocuments");
	ДанныеДокументов = ДанныеJSONВСтруктуру(Ответ);
	
	ПроставитьОтметкиЗагрузкиДокументовСканирования(ДанныеДокументов);
	
КонецФункции

Процедура ПроставитьОтметкиЗагрузкиДокументовСканирования(ДанныеДокументов)
	ТаблицаНомеров = Новый ТаблицаЗначений;
	ТаблицаНомеров.Колонки.Добавить("НомерДокументаТСД", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	ТаблицаНомеров.Колонки.Добавить("НомерДокументаНаСервере", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	
	
	Для Каждого ТекДанные Из ДанныеДокументов Цикл
		НовСтрока = ТаблицаНомеров.Добавить();
		НовСтрока.НомерДокументаТСД = ТекДанные.numberDoc;
		НовСтрока.НомерДокументаНаСервере = ТекДанные.serverId;
	КонецЦикла;
	
	ЗапросДокументов = Новый Запрос;
	ЗапросДокументов.Текст = "ВЫБРАТЬ
	                         |	Таб.НомерДокументаТСД КАК НомерДокументаТСД,
	                         |	Таб.НомерДокументаНаСервере КАК НомерДокументаНаСервере
	                         |ПОМЕСТИТЬ ВТ
	                         |ИЗ
	                         |	&Таб КАК Таб
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ВТ.НомерДокументаТСД КАК НомерДокументаТСД,
	                         |	ВТ.НомерДокументаНаСервере КАК НомерДокументаНаСервере,
	                         |	Сканирование.Ссылка КАК Документ
	                         |ИЗ
	                         |	ВТ КАК ВТ
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Сканирование КАК Сканирование
	                         |		ПО ВТ.НомерДокументаТСД = Сканирование.Номер";
	ЗапросДокументов.УстановитьПараметр("Таб", ТаблицаНомеров);
	
	
	ВыборкаДокументов = ЗапросДокументов.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		Документ = ВыборкаДокументов.Документ.ПолучитьОбъект();
		Документ.НомерДокументаНаСервере = ВыборкаДокументов.НомерДокументаНаСервере;
		Документ.ДокументВыгружен = Истина;
		Попытка
			Документ.Записать();
		Исключение
			ВызватьИсключение;
		КонецПопытки;	
		ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыСеанса.УзелПланаОбменаССерверомСканирования, Документ.Ссылка);
	КонецЦикла;	
КонецПроцедуры	

Функция ПолучитьДанныеРейса(НомерПалеты) Экспорт
	СтруктураJSON = Новый Структура;
	СтруктураJSON.Вставить("paleteNumber", НомерПалеты);
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураJSON);
	Ответ = ВызватьФункциюHTTPСервиса("UTL" ,СтрокаJSON, "getRouteInfo");
	Возврат ДанныеJSONВСтруктуру(Ответ);
КонецФункции

Функция ПолучитьАтуальныеДанныеЗаказа(НомерЗаказа, Штрихкод) Экспорт
	СтруктураJSON = Новый Структура;
	СтруктураJSON.Вставить("orderId", НомерЗаказа);
	СтруктураJSON.Вставить("barcode", Штрихкод);
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураJSON);
	Ответ = ВызватьФункциюHTTPСервиса("UTL" ,СтрокаJSON, "getBC");
	Возврат ДанныеJSONВСтруктуру(Ответ, "deliveryDate");
КонецФункции

Функция ПередатьСведенияОВерсииМП(СтрокаJSON = "") Экспорт
	СтруктураJSON = Новый Структура;
	
	ОписаниеВерсии = ОбщегоНазначенияСервер.ПолучитьОписаниеВерсииИзМакетаВерсий(Метаданные.Версия);
	
	СтруктураJSON.Вставить("TSDid", ПараметрыСеанса.ИдентификаторПриложения);
	СтруктураJSON.Вставить("MA_Version", Метаданные.Версия);
	СтруктураJSON.Вставить("MA_VersionDescr", ОписаниеВерсии.Описание);
	СтруктураJSON.Вставить("MA_VersionFinal", ОписаниеВерсии.ЭтоРелизнаяВерсия);
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураJSON);
	Ответ = ВызватьФункциюHTTPСервиса(,СтрокаJSON, "setMAVersion");
	Возврат ДанныеJSONВСтруктуру(Ответ);
КонецФункции

Процедура ПолучитьСписокЭлектронныхВесов()
	СтруктураJSON = Новый Структура;
	СтруктураJSON.Вставить("TSDid", ПараметрыСеанса.ИдентификаторПриложения);
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураJSON);
	Ответ = ВызватьФункциюHTTPСервиса(,СтрокаJSON, "getWeighers");
	МассивДанных = ДанныеJSONВСтруктуру(Ответ);

	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("КодВесов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	ТаблицаКодов.Колонки.Добавить("НаименованиеВесов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(25)));
	ТаблицаКодов.Колонки.Добавить("АдресВесов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
	
	Для Каждого ТекДанные Из МассивДанных Цикл
		НовСтрока = ТаблицаКодов.Добавить();
		НовСтрока.КодВесов = ТекДанные.id;
		НовСтрока.НаименованиеВесов = ТекДанные.name;
		НовСтрока.АдресВесов = ТекДанные.ipAddress;
	КонецЦикла;
	
	ЗапросВесов = Новый Запрос;
	ЗапросВесов.Текст = "ВЫБРАТЬ
	                    |	Таб.КодВесов КАК КодВесов,
	                    |	Таб.НаименованиеВесов КАК НаименованиеВесов,
	                    |	Таб.АдресВесов КАК АдресВесов
	                    |ПОМЕСТИТЬ ВТ
	                    |ИЗ
	                    |	&Таб КАК Таб
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ВТ.КодВесов КАК КодВесов,
	                    |	ВТ.НаименованиеВесов КАК НаименованиеВесов,
	                    |	ВТ.АдресВесов КАК АдресВесов,
	                    |	ЭлектронныеВесы.Ссылка КАК Весы
	                    |ИЗ
	                    |	ВТ КАК ВТ
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлектронныеВесы КАК ЭлектронныеВесы
	                    |		ПО ВТ.КодВесов = ЭлектронныеВесы.Код";
	ЗапросВесов.УстановитьПараметр("Таб", ТаблицаКодов);
	
	ВыборкаВесов = ЗапросВесов.Выполнить().Выбрать();
	
	МассивКодов = Новый Массив;
	
	Пока ВыборкаВесов.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаВесов.Весы) Тогда
			Весы = ВыборкаВесов.Весы.ПолучитьОбъект();
		Иначе
			Весы = Справочники.ЭлектронныеВесы.СоздатьЭлемент();
		КонецЕсли;
		
		Весы.Код = ВыборкаВесов.КодВесов;
		Весы.Наименование = ВыборкаВесов.НаименованиеВесов;
		Весы.АдресВесов = ВыборкаВесов.АдресВесов;
		Весы.Записать();
		МассивКодов.Добавить(ВыборкаВесов.КодВесов);
	КонецЦикла;	
	
	
	//очистка регистрации на сервере сканирования
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("TSDid", ПараметрыСеанса.ИдентификаторПриложения);
	СтруктураЗапроса.Вставить("metaData", "Справочник.скан_ЭлектронныеВесы");
	СтруктураЗапроса.Вставить("arrayOfIDs", МассивКодов);
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураЗапроса);
	Ответ = ВызватьФункциюHTTPСервиса(,СтрокаJSON, "unregisterReferences");
КонецПроцедуры	

Процедура ВыполнитьОбменДаннымиССерверомСканирования() Экспорт
	Попытка
		ПередатьСведенияОВерсииМП();
		ПолучитьСписокЭлектронныхВесов();
		ВыгрузитьДокументыНаСерверСканирования();
	Исключение
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ОписаниеОшибки());
	КонецПопытки;
	Константы.ДатаВремяПоследнегоОбмена.Установить(ТекущаяДата());
КонецПроцедуры	
