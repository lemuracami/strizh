#Область РаботаСУТЛ
Функция ЗагрузитьШКВСерверСканирования(МассивДанных) Экспорт
	//ЗапросСекторов = Новый Запрос;
	//ЗапросСекторов.Текст = "ВЫБРАТЬ
	//                       |	скан_ГруппыРайонов.Ссылка КАК Сектор,
	//                       |	скан_ГруппыРайонов.Код КАК Код
	//                       |ИЗ
	//                       |	Справочник.скан_ГруппыРайонов КАК скан_ГруппыРайонов";
	//ТабСекторов = ЗапросСекторов.Выполнить().Выгрузить();
	
	
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаДанных.Колонки;
	КолонкиТаблицы.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КолонкиТаблицы.Добавить("НомерЗаказа", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТаблицы.Добавить("КодПартнера", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	КолонкиТаблицы.Добавить("НомерЗаказаИМ", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	КолонкиТаблицы.Добавить("КоличествоМест", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	КолонкиТаблицы.Добавить("ДатаДоставки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиТаблицы.Добавить("Транспорт", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	КолонкиТаблицы.Добавить("НомерПалеты", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТаблицы.Добавить("ШКПереданПартнером", Новый ОписаниеТипов("Булево"));
	КолонкиТаблицы.Добавить("СтатусИМ", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТаблицы.Добавить("СтатусЗаказа", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТаблицы.Добавить("Сектор", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	КолонкиТаблицы.Добавить("КодТерминалаДоставки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТаблицы.Добавить("КодТерминалаПриемки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТаблицы.Добавить("ТипЗаказа", Новый ОписаниеТипов("ПеречислениеСсылка.скан_ТипыЗаказов"));
	КолонкиТаблицы.Добавить("ДеньВДень", Новый ОписаниеТипов("Булево"));
	КолонкиТаблицы.Добавить("НомерСмены", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТаблицы.Добавить("ЗапрашиватьОперативныеДанные", Новый ОписаниеТипов("Булево"));
	//Асеев 17.09.2021 (Задача № 4671)>>>
	КолонкиТаблицы.Добавить("НомерПолигонаМаршрутизации", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	//Асеев 17.09.2021 (Задача № 4671)<<<
	//Асеев 18.01.2022 (Задача № 4973)>>>
	КолонкиТаблицы.Добавить("Партнер", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	КолонкиТаблицы.Добавить("СкладПартнера", ОбщегоНазначения.ОписаниеТипаЧисло(9));
	//Асеев 18.01.2022 (Задача № 4973)<<<
	//Асеев 19.01.2024 (Задача № 5205)>>>
	КолонкиТаблицы.Добавить("ПредварительноЗакрытРейс", Новый ОписаниеТипов("Булево"));
	//Асеев 19.01.2024 (Задача № 5205)<<<
	
	Для Каждого ДанныеЗаказа Из МассивДанных Цикл
		МассивШК = ДанныеЗаказа.barCodes;			
		Для Каждого ДанныеШК Из МассивШК Цикл
			НоваяЗапись = ТаблицаДанных.Добавить();
			НоваяЗапись.Штрихкод = ДанныеШК.barCode;
			НоваяЗапись.ШКПереданПартнером = ДанныеШК.sentByPartner;
			
			НоваяЗапись.НомерЗаказа = ДанныеЗаказа.orderNumber;
			НоваяЗапись.КодПартнера = ДанныеЗаказа.partnerCode;
			НоваяЗапись.НомерЗаказаИМ = ДанныеЗаказа.orderNumberIM;
			НоваяЗапись.КоличествоМест = ДанныеЗаказа.quantityOfPlaces;
			НоваяЗапись.ДатаДоставки = ДанныеЗаказа.deliveryDate;
			НоваяЗапись.Транспорт = ДанныеЗаказа.autoRegistrationNumber;
			НоваяЗапись.НомерПалеты = ДанныеЗаказа.paletteNumber;
			//Асеев 18.01.2022 (Задача № 4973)>>>
			//НоваяЗапись.СтатусИМ = ДанныеЗаказа.orderStatus; //IMOrderStatus
			НоваяЗапись.СтатусИМ = ДанныеЗаказа.orderFinalStatus;
			//Асеев 18.01.2022 (Задача № 4973)<<<
			//НоваяЗапись.СтатусЗаказа = ДанныеЗаказа.orderStatus;
			//НайСектор = ТабСекторов.Найти(ДанныеЗаказа.sectorNumber);
			//Если НайСектор <> Неопределено Тогда
			//	НоваяЗапись.Сектор = НайСектор.Сектор;
			//КонецЕсли;
			НоваяЗапись.Сектор = ДанныеЗаказа.sectorNumber;
			НоваяЗапись.КодТерминалаДоставки = ДанныеЗаказа.deliveryTerminalNumber;
			НоваяЗапись.КодТерминалаПриемки = ДанныеЗаказа.receivingTerminalNumber;
			Если ДанныеЗаказа.orderType = 1 Тогда
				НоваяЗапись.ТипЗаказа =  Перечисления.скан_ТипыЗаказов.Доставка;
			ИначеЕсли ДанныеЗаказа.orderType = 2 Тогда
				НоваяЗапись.ТипЗаказа =  Перечисления.скан_ТипыЗаказов.Самовывоз;
			КонецеСли;	
			НоваяЗапись.ДеньВДень = ДанныеЗаказа.dayToDay;
			НоваяЗапись.НомерСмены = ДанныеЗаказа.shiftNumber;
			//НоваяЗапись.ТипЗаказа =  Перечисления.скан_ТипыЗаказов[ДанныеЗаказа.orderType];
			НоваяЗапись.ЗапрашиватьОперативныеДанные = ДанныеЗаказа.operationalDataRequest; 
			//Асеев 17.09.2021 (Задача № 4671)>>>
			НоваяЗапись.НомерПолигонаМаршрутизации = ДанныеЗаказа.polygonRouting;
			//Асеев 17.09.2021 (Задача № 4671)<<<
			//Асеев 18.01.2022 (Задача № 4973)>>>
			НоваяЗапись.Партнер = ДанныеЗаказа.shopId;
			НоваяЗапись.СкладПартнера = ДанныеЗаказа.warehouseId;
			НоваяЗапись.СтатусЗаказа = ДанныеЗаказа.orderStatus;
			//Асеев 18.01.2022 (Задача № 4973)<<<
			//Асеев 19.01.2024 (Задача № 5205)>>>
			НоваяЗапись.ПредварительноЗакрытРейс = ДанныеЗаказа.preliminaryClosedRoute;
			//Асеев 19.01.2024 (Задача № 5205)<<<
		КонецЦикла;	
	КонецЦикла;
	
	//Асеев 18.01.2022 (Задача № 4973)>>>
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Штрихкод КАК Штрихкод,
	|	ТаблицаДанных.НомерЗаказа КАК НомерЗаказа,
	|	ТаблицаДанных.КодПартнера КАК КодПартнера,
	|	ТаблицаДанных.НомерЗаказаИМ КАК НомерЗаказаИМ,
	|	ТаблицаДанных.КоличествоМест КАК КоличествоМест,
	|	ТаблицаДанных.ДатаДоставки КАК ДатаДоставки,
	|	ТаблицаДанных.Транспорт КАК Транспорт,
	|	ТаблицаДанных.НомерПалеты КАК НомерПалеты,
	|	ТаблицаДанных.ШКПереданПартнером КАК ШКПереданПартнером,
	|	ТаблицаДанных.СтатусИМ КАК СтатусИМ,
	|	ТаблицаДанных.СтатусЗаказа КАК СтатусЗаказа,
	|	ТаблицаДанных.Сектор КАК Сектор,
	|	ТаблицаДанных.КодТерминалаДоставки КАК КодТерминалаДоставки,
	|	ТаблицаДанных.КодТерминалаПриемки КАК КодТерминалаПриемки,
	|	ТаблицаДанных.ТипЗаказа КАК ТипЗаказа,
	|	ТаблицаДанных.ДеньВДень КАК ДеньВДень,
	|	ТаблицаДанных.НомерСмены КАК НомерСмены,
	|	ТаблицаДанных.ЗапрашиватьОперативныеДанные КАК ЗапрашиватьОперативныеДанные,
	|	ТаблицаДанных.НомерПолигонаМаршрутизации КАК НомерПолигонаМаршрутизации,
	|	ТаблицаДанных.Партнер КАК Партнер,
	|	ТаблицаДанных.СкладПартнера КАК СкладПартнера,
	|	ТаблицаДанных.ПредварительноЗакрытРейс КАК ПредварительноЗакрытРейс
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Штрихкод КАК Штрихкод,
	|	ВТ_Данные.НомерЗаказа КАК НомерЗаказа,
	|	ВТ_Данные.КодПартнера КАК КодПартнера,
	|	ВТ_Данные.НомерЗаказаИМ КАК НомерЗаказаИМ,
	|	ВТ_Данные.КоличествоМест КАК КоличествоМест,
	|	ВТ_Данные.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_Данные.Транспорт КАК Транспорт,
	|	ВТ_Данные.НомерПалеты КАК НомерПалеты,
	|	ВТ_Данные.ШКПереданПартнером КАК ШКПереданПартнером,
	|	ВТ_Данные.СтатусИМ КАК СтатусИМ,
	|	ВТ_Данные.СтатусЗаказа КАК СтатусЗаказа,
	|	скан_ГруппыРайонов.Ссылка КАК Сектор,
	|	ВТ_Данные.КодТерминалаДоставки КАК КодТерминалаДоставки,
	|	ВТ_Данные.КодТерминалаПриемки КАК КодТерминалаПриемки,
	|	ВТ_Данные.ТипЗаказа КАК ТипЗаказа,
	|	ВТ_Данные.ДеньВДень КАК ДеньВДень,
	|	ВТ_Данные.НомерСмены КАК НомерСмены,
	|	ВТ_Данные.ЗапрашиватьОперативныеДанные КАК ЗапрашиватьОперативныеДанные,
	|	ВТ_Данные.НомерПолигонаМаршрутизации КАК НомерПолигонаМаршрутизации,
	|	скан_Контрагенты.Ссылка КАК Партнер,
	|	скан_СкладыМагазинов.Ссылка КАК СкладПартнера,
	|	ВТ_Данные.ПредварительноЗакрытРейс КАК ПредварительноЗакрытРейс
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скан_ГруппыРайонов КАК скан_ГруппыРайонов
	|		ПО ВТ_Данные.Сектор = скан_ГруппыРайонов.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скан_Контрагенты КАК скан_Контрагенты
	|		ПО ВТ_Данные.Партнер = скан_Контрагенты.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скан_СкладыМагазинов КАК скан_СкладыМагазинов
	|		ПО ВТ_Данные.СкладПартнера = скан_СкладыМагазинов.Код";
	
	НаборЗаписей = РегистрыСведений.скан_ВозможныеШтрихкоды.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//Асеев 18.01.2022 (Задача № 4973)<<<
	//НаборЗаписей.Прочитать();
	//Попытка
	//	НаборЗаписей.Записать(Истина);
	//Исключение
	//	Возврат Ложь;
	//КонецПопытки;
	
	ТекстОшибки = "";
	
	СтруктураВозврата = Новый Структура;
		
	//НаборЗаписей.Загрузить(ТаблицаДанных);
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		СтруктураВозврата.Вставить("result", "error");
		СтруктураВозврата.Вставить("errorDescr", ТекстОшибки);
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	ЛогироватьЗапросВыгрузкиШК(ТекстОшибки, ТекущаяДата(), ТекущаяДата());
	СтруктураВозврата.Вставить("result", "OK");

	Возврат СтруктураВозврата;
КонецФункции	

Процедура ЛогироватьЗапросВыгрузкиШК(ТекстОшибки = "", ДатаНачала, ДатаОкончания)
	ТекВремя = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.скан_ИсторияОбновленияВозможныхШК.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Период.Установить(ТекВремя);
	
	Нов = НаборЗаписей.Добавить();
	Нов.Период = ТекВремя;
	Нов.ОписаниеОшибки = ТекстОшибки;
	Нов.ДатаНачала = ДатаНачала;
	Нов.ДатаОкончания = ДатаОкончания;
	
	НаборЗаписей.Записать(Истина);
КонецПроцедуры	

Функция ЗагрузитьЭлектронныеВесыВСерверСканирования(МассивДанных) Экспорт
	МассивДанныхОтвет = Новый Массив;
	Если ТипЗнч(МассивДанных) <> Тип("Массив") Тогда
		Возврат МассивДанныхОтвет;
	КонецеСли;
	
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("КодВесов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));
	ТаблицаКодов.Колонки.Добавить("НаименованиеВесов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(25)));
	ТаблицаКодов.Колонки.Добавить("АдресВесов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
	
	
	Для Каждого ТекДанные Из МассивДанных Цикл
		НовСтрока = ТаблицаКодов.Добавить();
		НовСтрока.КодВесов = ТекДанные.id;
		НовСтрока.НаименованиеВесов = ТекДанные.name;
		НовСтрока.АдресВесов = ТекДанные.IPAdress;
	КонецЦикла;
	
	ЗапросВесов = Новый Запрос;
	ЗапросВесов.Текст = "ВЫБРАТЬ
	                    |	Таб.КодВесов КАК КодВесов,
	                    |	Таб.НаименованиеВесов КАК НаименованиеВесов,
	                    |	Таб.АдресВесов КАК АдресВесов
	                    |ПОМЕСТИТЬ ВТ
	                    |ИЗ
	                    |	&Таб КАК Таб
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ВТ.КодВесов КАК КодВесов,
	                    |	ВТ.НаименованиеВесов КАК НаименованиеВесов,
	                    |	ВТ.АдресВесов КАК АдресВесов,
	                    |	скан_ЭлектронныеВесы.Ссылка КАК Весы
	                    |ИЗ
	                    |	ВТ КАК ВТ
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скан_ЭлектронныеВесы КАК скан_ЭлектронныеВесы
	                    |		ПО ВТ.КодВесов = скан_ЭлектронныеВесы.Код";
	ЗапросВесов.УстановитьПараметр("Таб", ТаблицаКодов);
	
	ВыборкаВесов = ЗапросВесов.Выполнить().Выбрать();
	
	МассивКодов = Новый Массив;
	
	Пока ВыборкаВесов.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаВесов.Весы) Тогда
			Весы = ВыборкаВесов.Весы.ПолучитьОбъект();
		Иначе
			Весы = Справочники.скан_ЭлектронныеВесы.СоздатьЭлемент();
		КонецЕсли;
		
		Весы.Код = ВыборкаВесов.КодВесов;
		Весы.Наименование = ВыборкаВесов.НаименованиеВесов;
		Весы.АдресВесов = ВыборкаВесов.АдресВесов;
		Весы.Записать();
		МассивКодов.Добавить(ВыборкаВесов.КодВесов);
	КонецЦикла;	
	
	Возврат МассивКодов;
КонецФункции

//Асеев 14.12.2022 (Задача № 4951)>>>
Функция ЗагрузитьМагазины(МассивДанных) Экспорт
	
	МассивДанныхОтвет = Новый Массив;
	Если ТипЗнч(МассивДанных) <> Тип("Массив") Тогда
		Возврат МассивДанныхОтвет;
	КонецеСли;
	
	ТаблицаМагазинов = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаМагазинов.Колонки;
	КолонкиТаблицы.Добавить("Код", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));
	КолонкиТаблицы.Добавить("Наименование", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	
	Для Каждого ТекДанные Из МассивДанных Цикл
		СтрокаТаблицы = ТаблицаМагазинов.Добавить();
		СтрокаТаблицы.Код = ТекДанные.id;
		СтрокаТаблицы.Наименование = ТекДанные.name
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаМагазинов", ТаблицаМагазинов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаМагазинов.Код КАК Код,
	|	ТаблицаМагазинов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Магазины
	|ИЗ
	|	&ТаблицаМагазинов КАК ТаблицаМагазинов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Магазины.Код КАК Код,
	|	ВТ_Магазины.Наименование КАК Наименование,
	|	скан_Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Магазины КАК ВТ_Магазины
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скан_Контрагенты КАК скан_Контрагенты
	|		ПО ВТ_Магазины.Код = скан_Контрагенты.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Магазин = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Магазин = Справочники.скан_Контрагенты.СоздатьЭлемент();
		КонецЕсли;
		Магазин.Код = Выборка.Код;
		Магазин.Наименование = Выборка.Наименование;
		Магазин.Записать();
		МассивДанныхОтвет.Добавить(Выборка.Код);
	КонецЦикла;
	Возврат МассивДанныхОтвет;
	
КонецФункции

Функция ЗагрузитьСкладыМагазинов(МассивДанных) Экспорт
	
	МассивДанныхОтвет = Новый Массив;
	Если ТипЗнч(МассивДанных) <> Тип("Массив") Тогда
		Возврат МассивДанныхОтвет;
	КонецеСли;
	
	ТаблицаСкладовМагазинов = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаСкладовМагазинов.Колонки;
	КолонкиТаблицы.Добавить("Код", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(9)));
	КолонкиТаблицы.Добавить("Наименование", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	КолонкиТаблицы.Добавить("КодМагазина", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));
	КолонкиТаблицы.Добавить("ИдентификаторНаправления", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	КолонкиТаблицы.Добавить("Адрес", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	КолонкиТаблицы.Добавить("КонтактнаяИнформация", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)));
	КолонкиТаблицы.Добавить("ОграниченияПоВозвратам", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)));
	КолонкиТаблицы.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	КолонкиТаблицы.Добавить("ТелефонныйНомерПриЗабореТовара", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	КолонкиТаблицы.Добавить("КодРегиона", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10)));
	
	Для Каждого ТекДанные Из МассивДанных Цикл
		СтрокаТаблицы = ТаблицаСкладовМагазинов.Добавить();
		СтрокаТаблицы.Код = ТекДанные.id;
		СтрокаТаблицы.Наименование = ТекДанные.name;
		СтрокаТаблицы.КодМагазина = ТекДанные.idShop;
		СтрокаТаблицы.ИдентификаторНаправления = ТекДанные.idDirection;
		СтрокаТаблицы.Адрес = ТекДанные.address;
		СтрокаТаблицы.КонтактнаяИнформация = ТекДанные.contactInf;
		СтрокаТаблицы.ОграниченияПоВозвратам = ТекДанные.restrictionsOfReturn;
		СтрокаТаблицы.ГрафикРаботы = ТекДанные.sheduleOfWork;
		СтрокаТаблицы.ТелефонныйНомерПриЗабореТовара = ТекДанные.phoneNumber;
		СтрокаТаблицы.КодРегиона = ТекДанные.idRegion;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСкладов", ТаблицаСкладовМагазинов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСкладов.Код КАК Код,
	|	ТаблицаСкладов.Наименование КАК Наименование,
	|	ТаблицаСкладов.КодМагазина КАК КодМагазина,
	|	ТаблицаСкладов.ИдентификаторНаправления КАК ИдентификаторНаправления,
	|	ТаблицаСкладов.Адрес КАК Адрес,
	|	ТаблицаСкладов.КонтактнаяИнформация КАК КонтактнаяИнформация,
	|	ТаблицаСкладов.ОграниченияПоВозвратам КАК ОграниченияПоВозвратам,
	|	ТаблицаСкладов.ГрафикРаботы КАК ГрафикРаботы,
	|	ТаблицаСкладов.ТелефонныйНомерПриЗабореТовара КАК ТелефонныйНомерПриЗабореТовара,
	|	ТаблицаСкладов.КодРегиона КАК КодРегиона
	|ПОМЕСТИТЬ ВТ_Склады
	|ИЗ
	|	&ТаблицаСкладов КАК ТаблицаСкладов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Склады.Код КАК Код,
	|	ВТ_Склады.Наименование КАК Наименование,
	|	ВТ_Склады.ИдентификаторНаправления КАК ИдентификаторНаправления,
	|	ВТ_Склады.Адрес КАК Адрес,
	|	ВТ_Склады.КонтактнаяИнформация КАК КонтактнаяИнформация,
	|	ВТ_Склады.ОграниченияПоВозвратам КАК ОграниченияПоВозвратам,
	|	ВТ_Склады.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТ_Склады.ТелефонныйНомерПриЗабореТовара КАК ТелефонныйНомерПриЗабореТовара,
	|	ВТ_Склады.КодРегиона КАК КодРегиона,
	|	скан_СкладыМагазинов.Ссылка КАК Ссылка,
	|	скан_Контрагенты.Ссылка КАК Владелец
	|ИЗ
	|	ВТ_Склады КАК ВТ_Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скан_СкладыМагазинов КАК скан_СкладыМагазинов
	|		ПО ВТ_Склады.Код = скан_СкладыМагазинов.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скан_Контрагенты КАК скан_Контрагенты
	|		ПО ВТ_Склады.КодМагазина = скан_Контрагенты.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Склад = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Склад = Справочники.скан_СкладыМагазинов.СоздатьЭлемент();
		КонецЕсли;
		Склад.Код = Выборка.Код;
		Склад.Наименование = Выборка.Наименование;
		Склад.ИдентификаторНаправления = Выборка.ИдентификаторНаправления;
		Склад.Адрес = Выборка.Адрес;
		Склад.КонтактнаяИнформация = Выборка.КонтактнаяИнформация;
		Склад.ОграниченияПоВозвратам = Выборка.ОграниченияПоВозвратам;
		Склад.ГрафикРаботы = Выборка.ГрафикРаботы;
		Склад.ТелефонныйНомерПриЗабореТовара = Выборка.ТелефонныйНомерПриЗабореТовара;
		Склад.КодРегиона = Выборка.КодРегиона;
		Склад.Владелец = Выборка.Владелец;
		Склад.Записать();
		МассивДанныхОтвет.Добавить(Выборка.Код);
	КонецЦикла;
	Возврат МассивДанныхОтвет;
	
КонецФункции
//Асеев 14.12.2022 (Задача № 4951)<<<

Функция ЗагрузитьГруппыРайонов(МассивДанных) Экспорт
	МассивДанныхОтвет = Новый Массив;
	Если ТипЗнч(МассивДанных) <> Тип("Массив") Тогда
		Возврат МассивДанныхОтвет;
	КонецеСли;
	
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("КодГруппыРайонов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	ТаблицаКодов.Колонки.Добавить("НаименованиеГруппыРайонов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	
	Для Каждого ТекДанные Из МассивДанных Цикл
		НовСтрока = ТаблицаКодов.Добавить();
		НовСтрока.КодГруппыРайонов = ТекДанные.id;
		НовСтрока.НаименованиеГруппыРайонов = ТекДанные.name;
	КонецЦикла;
	
	ЗапросГруппыРайонов = Новый Запрос;
	ЗапросГруппыРайонов.Текст = "ВЫБРАТЬ
	                    |	Таб.КодГруппыРайонов КАК КодГруппыРайонов,
	                    |	Таб.НаименованиеГруппыРайонов КАК НаименованиеГруппыРайонов
	                    |ПОМЕСТИТЬ ВТ
	                    |ИЗ
	                    |	&Таб КАК Таб
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ВТ.КодГруппыРайонов КАК КодГруппыРайонов,
	                    |	ВТ.НаименованиеГруппыРайонов КАК НаименованиеГруппыРайонов,
	                    |	скан_ГруппыРайонов.Ссылка КАК ГруппаРайонов
	                    |ИЗ
	                    |	ВТ КАК ВТ
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скан_ГруппыРайонов КАК скан_ГруппыРайонов
	                    |		ПО ВТ.КодГруппыРайонов = скан_ГруппыРайонов.Код";
	ЗапросГруппыРайонов.УстановитьПараметр("Таб", ТаблицаКодов);
	
	ВыборкаГруппыРайонов = ЗапросГруппыРайонов.Выполнить().Выбрать();
	
	МассивКодов = Новый Массив;
	
	Пока ВыборкаГруппыРайонов.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаГруппыРайонов.ГруппаРайонов) Тогда
			Весы = ВыборкаГруппыРайонов.ГруппаРайонов.ПолучитьОбъект();
		Иначе
			Весы = Справочники.скан_ГруппыРайонов.СоздатьЭлемент();
		КонецЕсли;
		
		Весы.Код = ВыборкаГруппыРайонов.КодГруппыРайонов;
		Весы.Наименование = ВыборкаГруппыРайонов.НаименованиеГруппыРайонов;
		Весы.Записать();
		МассивКодов.Добавить(ВыборкаГруппыРайонов.КодГруппыРайонов);
	КонецЦикла;	
	
	Возврат МассивКодов;
КонецФункции

Функция ВыгрузитьДокументыСканированияВБазуУТ() Экспорт
	МассивДанныхОтвет = Новый Массив;
	ЗапросДокументовСканирования = Новый Запрос;
	
	ЗапросДокументовСканирования.Текст = "ВЫБРАТЬ
	                                     |	скан_СканированиеТСД.Регион КАК regionID,
	                                     |	ВЫБОР
	                                     |		КОГДА скан_СканированиеТСД.РежимСканирования = ЗНАЧЕНИЕ(Перечисление.скан_РежимыСканирования.Приход)
	                                     |			ТОГДА 1
	                                     |		КОГДА скан_СканированиеТСД.РежимСканирования = ЗНАЧЕНИЕ(Перечисление.скан_РежимыСканирования.ПередачаНаДоставку)
	                                     |			ТОГДА 2
	                                     |		КОГДА скан_СканированиеТСД.РежимСканирования = ЗНАЧЕНИЕ(Перечисление.скан_РежимыСканирования.НепогруженныеЗаказы)
	                                     |			ТОГДА 3
	                                     |		ИНАЧЕ 0
	                                     |	КОНЕЦ КАК scanMode,
	                                     |	ЕСТЬNULL(скан_СканированиеТСД.ЭлектронныеВесы.Код, """") КАК weigherId,
	                                     |	скан_СканированиеТСД.ЗапросВесаСЭлектронныхВесов КАК requestForWeight,
	                                     |	скан_СканированиеТСД.Номер КАК numberDoc,
	                                     |	скан_СканированиеТСД.Дата КАК dateDoc,
	                                     |	скан_СканированиеТСД.НомерТСД КАК TSDNumber,
	                                     |	скан_СканированиеТСД.НомерПалеты КАК paleteNumber,
	                                     |	скан_СканированиеТСД.НомерРейса КАК tripId,
	                                     |	скан_СканированиеТСД.Штрихкоды.(
	                                     |		Штрихкод КАК barcode,
	                                     |		НомерЗаказа КАК orderId,
	                                     |		ВремяСканирования КАК scanTime,
	                                     |		Вес КАК Weight,
	                                     |		НомерПалеты КАК barcodePaleteNumber,
	                                     |		ИсключитьЧастичноПринятыйЗаказИзРейса КАК partiallyAcceptedOrderExcludedFromTrip
	                                     |	) КАК Штрихкоды,
	                                     |	скан_СканированиеТСД.ЗаказыКПогрузке.(
	                                     |		НомерЗаказа КАК orderId
	                                     |	) КАК ЗаказыКПогрузке,
	                                     |	скан_СканированиеТСД.ИгнорируемыеШтрихкоды.(
	                                     |		Штрихкод КАК ignoredBarcodebarcode,
	                                     |		НомерЗаказа КАК ignoredBarcodeorderId,
	                                     |		НомерПалеты КАК ignoredBarcodePaleteNumber,
	                                     |		ВремяСканирования КАК ignoredBarcodescanTime,
	                                     |		Вес КАК ignoredBarcodeweight
	                                     |	) КАК ИгнорируемыеШтрихкоды
	                                     |ИЗ
	                                     |	Документ.скан_СканированиеТСД.Изменения КАК скан_СканированиеТСДИзменения
	                                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.скан_СканированиеТСД КАК скан_СканированиеТСД
	                                     |		ПО скан_СканированиеТСДИзменения.Ссылка = скан_СканированиеТСД.Ссылка
	                                     |ГДЕ
	                                     |	скан_СканированиеТСДИзменения.Узел = &Узел";
	ЗапросДокументовСканирования.УстановитьПараметр("Узел", ПараметрыСеанса.скан_УзелУТ);
	ВыборкаДокументов = ЗапросДокументовСканирования.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("regionID", ВыборкаДокументов.regionID);
		СтруктураДокумента.Вставить("scanMode", ВыборкаДокументов.scanMode);
		СтруктураДокумента.Вставить("weigherId", ВыборкаДокументов.weigherId);
		СтруктураДокумента.Вставить("requestForWeight", ВыборкаДокументов.requestForWeight);
		СтруктураДокумента.Вставить("dateDoc", ВыборкаДокументов.dateDoc);
		СтруктураДокумента.Вставить("numberDoc", ВыборкаДокументов.numberDoc);
		СтруктураДокумента.Вставить("TSDNumber", ВыборкаДокументов.TSDNumber);
		СтруктураДокумента.Вставить("paleteNumber", ВыборкаДокументов.paleteNumber);
		СтруктураДокумента.Вставить("tripId", ВыборкаДокументов.tripId);
		
		ВыборкаСтрок = ВыборкаДокументов.Штрихкоды.Выбрать();
		МассивСтрок = Новый Массив;
		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("barcode", ВыборкаСтрок.barcode);
			СтруктураСтроки.Вставить("orderId", ВыборкаСтрок.orderId);
			СтруктураСтроки.Вставить("scanTime", ВыборкаСтрок.scanTime);
			СтруктураСтроки.Вставить("Weight", ВыборкаСтрок.Weight);
			СтруктураСтроки.Вставить("paleteNumber", ВыборкаСтрок.barcodePaleteNumber);
			//+Степанов Задача № 3953
			СтруктураСтроки.Вставить("partiallyAcceptedOrderExcludedFromTrip", ВыборкаСтрок.partiallyAcceptedOrderExcludedFromTrip);
			//-Степанов Задача № 3953
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
		СтруктураДокумента.Вставить("barcodes", МассивСтрок);
		
		ВыборкаСтрок = ВыборкаДокументов.ЗаказыКПогрузке.Выбрать();
		МассивСтрок = Новый Массив;
		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("orderId", ВыборкаСтрок.orderId);
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
		СтруктураДокумента.Вставить("loadingOrders", МассивСтрок);
		
		ВыборкаСтрок = ВыборкаДокументов.ИгнорируемыеШтрихкоды.Выбрать();
		МассивСтрок = Новый Массив;

		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("ignoredBarcodeBarcode", ВыборкаСтрок.ignoredBarcodeBarcode);
			СтруктураСтроки.Вставить("ignoredBarcodeorderId", ВыборкаСтрок.ignoredBarcodeorderId);
			СтруктураСтроки.Вставить("ignoredBarcodePaleteNumber", ВыборкаСтрок.ignoredBarcodePaleteNumber);
			СтруктураСтроки.Вставить("ignoredBarcodescanTime", ВыборкаСтрок.ignoredBarcodescanTime);
			СтруктураСтроки.Вставить("ignoredBarcodeweight", ВыборкаСтрок.ignoredBarcodeweight);
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
		СтруктураДокумента.Вставить("ignoredBarcodes", МассивСтрок);
		
		МассивДанныхОтвет.Добавить(СтруктураДокумента);
	КонецЦикла;	
	
	Возврат МассивДанныхОтвет;
КонецФункции	
#КонецОбласти

#Область РаботаСМП
Функция ПолучитьДанныеПоШК(Штрихкод) Экспорт
	ЗапросШК = Новый Запрос;	
	//Асеев 23.01.2024 (Задача № 5215)>>>//Асеев 23.01.2024 (Задача № 5215)<<<
	ЗапросШК.Текст = "ВЫБРАТЬ
	                 |	скан_ВозможныеШтрихкоды.Штрихкод КАК barcode,
	                 |	скан_ВозможныеШтрихкоды.НомерЗаказа КАК orderId,
	                 |	скан_ВозможныеШтрихкоды.КодПартнера КАК partnerId,
	                 |	скан_ВозможныеШтрихкоды.НомерЗаказаИМ КАК orderIdExt,
	                 |	скан_ВозможныеШтрихкоды.КоличествоМест КАК numberOfPlaces,
	                 |	скан_ВозможныеШтрихкоды.НомерМеста КАК placeNumber,
	                 |	ВЫБОР
	                 |		КОГДА скан_ВозможныеШтрихкоды.ПредварительноЗакрытРейс
	                 |			ТОГДА ДОБАВИТЬКДАТЕ(скан_ВозможныеШтрихкоды.ДатаДоставки, ДЕНЬ, 1)
	                 |		ИНАЧЕ скан_ВозможныеШтрихкоды.ДатаДоставки
	                 |	КОНЕЦ КАК deliveryDate,
	                 |	скан_ВозможныеШтрихкоды.Транспорт КАК carRegNumber,
	                 |	скан_ВозможныеШтрихкоды.НомерПалеты КАК paleteNumber,
	                 |	скан_ВозможныеШтрихкоды.ШКПереданПартнером КАК barcodePartner,
	                 |	скан_ВозможныеШтрихкоды.СтатусИМ КАК orderState,
	                 |	скан_ВозможныеШтрихкоды.СтатусЗаказа КАК orderStatus,
	                 |	ЕСТЬNULL(скан_ВозможныеШтрихкоды.Сектор.Наименование, """") КАК sectorName,
	                 |	скан_ВозможныеШтрихкоды.КодТерминалаДоставки КАК deliveryTerminalId,
	                 |	скан_ВозможныеШтрихкоды.КодТерминалаПриемки КАК receivingTerminalId,
	                 |	скан_ВозможныеШтрихкоды.ЗапрашиватьОперативныеДанные КАК operationalDataRequest,
	                 |	скан_ВозможныеШтрихкоды.ТипЗаказа.Ссылка КАК orderType,
	                 |	скан_ВозможныеШтрихкоды.НомерПолигонаМаршрутизации КАК polygonRouting,
	                 |	ЕСТЬNULL(скан_ВозможныеШтрихкоды.СкладПартнера.Наименование, """") КАК stockName,
	                 |	ЕСТЬNULL(скан_ВозможныеШтрихкоды.СкладПартнера.ИдентификаторНаправления, """") КАК stockIDRoute,
	                 |	ЕСТЬNULL(скан_ВозможныеШтрихкоды.СкладПартнера.Адрес, """") КАК stockAddress,
	                 |	ВЫБОР
	                 |		КОГДА ЕСТЬNULL(скан_ВозможныеШтрихкоды.СкладПартнера, """") = """"
	                 |			ТОГДА """"
	                 |		КОГДА скан_ВозможныеШтрихкоды.СкладПартнера.КодРегиона = 1
	                 |			ТОГДА ""МСК""
	                 |		КОГДА скан_ВозможныеШтрихкоды.СкладПартнера.КодРегиона = 2
	                 |			ТОГДА ""СПб""
	                 |		ИНАЧЕ """"
	                 |	КОНЕЦ КАК stockRegion,
	                 |	скан_ВозможныеШтрихкоды.Партнер.Наименование КАК shopName
	                 |ИЗ
	                 |	РегистрСведений.скан_ВозможныеШтрихкоды КАК скан_ВозможныеШтрихкоды
	                 |ГДЕ
	                 |	скан_ВозможныеШтрихкоды.Штрихкод = &Штрихкод
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	orderId УБЫВ";
	ЗапросШК.УстановитьПараметр("Штрихкод", Штрихкод);
	ТаблицаШК = ЗапросШК.Выполнить().Выгрузить();
	
	Структура = Новый Структура;
	
	Для Каждого СтрокаШК Из ТаблицаШК Цикл
		Для Каждого ТекКолонка Из ТаблицаШК.Колонки Цикл
			Если ТекКолонка.Имя = "orderType" Тогда
				ИндексЗначенияПеречисления = Перечисления.скан_ТипыЗаказов.Индекс(СтрокаШК[ТекКолонка.Имя]);
				Структура.Вставить(ТекКолонка.Имя, Метаданные.Перечисления.скан_ТипыЗаказов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя);
			Иначе	
				Структура.Вставить(ТекКолонка.Имя, СтрокаШК[ТекКолонка.Имя]);
			КонецеСли;	
		КонецЦикла;	
		Прервать; // выводим только первую строку, в дальнейшем надо будет фиксировать дубли ШК
	КонецЦикла;	
	
	
	Возврат Структура;
КонецФункции	

Функция ЗагрузитьДокументыСканирования(МассивДанных) Экспорт
	МассивДанныхОтвет = Новый Массив;
	Если ТипЗнч(МассивДанных) <> Тип("Массив") Тогда
		Возврат МассивДанныхОтвет;
	КонецеСли;
	
	
	ТаблицаНомеров = Новый ТаблицаЗначений;
	ТаблицаНомеров.Колонки.Добавить("НомерДокументаТСД", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	ТаблицаНомеров.Колонки.Добавить("ТСД", Новый ОписаниеТипов("ПланОбменаСсылка.скан_ПриложенияТСД"));
	
	
	Для Каждого ТекДанные Из МассивДанных Цикл
		НовСтрока = ТаблицаНомеров.Добавить();
		НовСтрока.НомерДокументаТСД = ТекДанные.numberDoc;
		НовСтрока.ТСД = скан_ОбменДаннымСервер.ПолучитьУзелТСД(ТекДанные.TSDId);
	КонецЦикла;
	
	ЗапросПоискаСуществующихДокументов = Новый Запрос;
	ЗапросПоискаСуществующихДокументов.Текст = "ВЫБРАТЬ
	                                           |	Таб.НомерДокументаТСД КАК НомерДокументаТСД,
	                                           |	Таб.ТСД КАК ТСД
	                                           |ПОМЕСТИТЬ ВТ
	                                           |ИЗ
	                                           |	&Таб КАК Таб
	                                           |;
	                                           |
	                                           |////////////////////////////////////////////////////////////////////////////////
	                                           |ВЫБРАТЬ
	                                           |	ВТ.НомерДокументаТСД КАК НомерДокументаТСД,
	                                           |	ВТ.ТСД КАК ТСД,
	                                           |	скан_СканированиеТСД.Ссылка КАК Документ
	                                           |ИЗ
	                                           |	ВТ КАК ВТ
	                                           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.скан_СканированиеТСД КАК скан_СканированиеТСД
	                                           |		ПО ВТ.НомерДокументаТСД = скан_СканированиеТСД.НомерДокументаМП
	                                           |			И ВТ.ТСД = скан_СканированиеТСД.ТСД
	                                           |
	                                           |СГРУППИРОВАТЬ ПО
	                                           |	ВТ.НомерДокументаТСД,
	                                           |	ВТ.ТСД,
	                                           |	скан_СканированиеТСД.Ссылка";
	ЗапросПоискаСуществующихДокументов.УстановитьПараметр("Таб", ТаблицаНомеров);
	ТабНайденныхДокументов = ЗапросПоискаСуществующихДокументов.Выполнить().Выгрузить();
	
	
	Для Каждого СтрокаДанныхДокумента Из МассивДанных Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ТСД", скан_ОбменДаннымСервер.ПолучитьУзелТСД(СтрокаДанныхДокумента.TSDId));
		СтруктураПоиска.Вставить("НомерДокументаТСД", СтрокаДанныхДокумента.numberDoc);
		
		НайденныеДокументы = ТабНайденныхДокументов.НайтиСтроки(СтруктураПоиска);
		
		
		Если НайденныеДокументы.Количество() = 0 Тогда
			Документ = Документы.скан_СканированиеТСД.СоздатьДокумент();
		Иначе
			Документ = НайденныеДокументы[0].Документ.ПолучитьОбъект();
			Документ.Штрихкоды.Очистить();
			Документ.ЗаказыКПогрузке.Очистить();
		Конецесли;
		
		Документ.Дата = ТекущаяДата();
		Документ.РежимСканирования = Перечисления.скан_РежимыСканирования[СтрокаДанныхДокумента.scanMode];
		Документ.Регион = СтрокаДанныхДокумента.regionID;
		Документ.ЭлектронныеВесы = Справочники.скан_ЭлектронныеВесы.НайтиПоКоду(СтрокаДанныхДокумента.weigherId);
		Документ.ЗапросВесаСЭлектронныхВесов = СтрокаДанныхДокумента.requestForWeight;
		Документ.НомерДокументаМП = СтрокаДанныхДокумента.numberDoc;
		Документ.ДатаДокументаМП = СтрокаДанныхДокумента.dateDoc;
		Документ.ТСД = скан_ОбменДаннымСервер.ПолучитьУзелТСД(СтрокаДанныхДокумента.TSDId);
		Документ.ПометкаУдаления = СтрокаДанныхДокумента.deletionMark;
		Документ.НомерПалеты = СтрокаДанныхДокумента.paleteNumber;
		Документ.НомерРейса = СтрокаДанныхДокумента.tripId;
		Документ.НомерТСД = СтрокаДанныхДокумента.TSDNumber;
		
		Для Каждого СтрокаДокумента Из СтрокаДанныхДокумента.barcodes Цикл
			Если СтрокаДокумента.ignore Тогда
				НоваяСтрока = Документ.ИгнорируемыеШтрихкоды.Добавить();
			Иначе	
				НоваяСтрока = Документ.Штрихкоды.Добавить();
				если СтрокаДокумента.Свойство("partiallyAcceptedOrderExcludedFromTrip") Тогда
					НоваяСтрока.ИсключитьЧастичноПринятыйЗаказИзРейса = СтрокаДокумента.partiallyAcceptedOrderExcludedFromTrip;
				КонецеСли;					
			КонецеСли;	
			НоваяСтрока.Штрихкод = СтрокаДокумента.barcode;
			НоваяСтрока.НомерЗаказа = СтрокаДокумента.orderId;
			НоваяСтрока.НомерПалеты = СтрокаДокумента.paleteNumber;
			НоваяСтрока.ВремяСканирования = СтрокаДокумента.scanTime;
			НоваяСтрока.Вес = СтрокаДокумента.Weight;
			НоваяСтрока.ДатаДоставки = СтрокаДокумента.deliveryDate;
			НоваяСтрока.СостояниеЗаказа = СтрокаДокумента.orderState;
		КонецЦикла;	
		
		Для Каждого СтрокаДокумента Из СтрокаДанныхДокумента.loadingOrders Цикл
			НоваяСтрока = Документ.ЗаказыКПогрузке.Добавить();
			НоваяСтрока.НомерЗаказа = СтрокаДокумента.orderId;
		КонецЦикла;	
		
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Запись);
			ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыСеанса.скан_УзелУТ, Документ.Ссылка);
			СтруктураНомеровДокумента = Новый Структура;
			СтруктураНомеровДокумента.Вставить("serverId", Документ.Номер);
			СтруктураНомеровДокумента.Вставить("numberDoc", Документ.НомерДокументаМП);
			МассивДанныхОтвет.Добавить(СтруктураНомеровДокумента);
		Исключение
			
		КонецПопытки;	
	КонецЦикла;	
	
	Возврат МассивДанныхОтвет;
КонецФункции	

Функция ПолучитьСписокВесов(ИдентификаторТСД) Экспорт
	УзелОбмена = скан_ОбменДаннымСервер.ПолучитьУзелТСД(ИдентификаторТСД);
	
	ЗапросВесов = Новый Запрос;
	ЗапросВесов.Текст = "ВЫБРАТЬ
	                    |	скан_ЭлектронныеВесыИзменения.Ссылка.Код КАК id,
	                    |	скан_ЭлектронныеВесыИзменения.Ссылка.Наименование КАК name,
	                    |	скан_ЭлектронныеВесыИзменения.Ссылка.АдресВесов КАК ipAddress
	                    |ИЗ
	                    |	Справочник.скан_ЭлектронныеВесы.Изменения КАК скан_ЭлектронныеВесыИзменения
	                    |ГДЕ
	                    |	скан_ЭлектронныеВесыИзменения.Узел = &УзелОбмена";
	ЗапросВесов.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	ТаблицаВесов = ЗапросВесов.Выполнить().Выгрузить();
	
	МассивДанных = Новый Массив;
	
	Для Каждого СтрокаВесов Из ТаблицаВесов Цикл
		СтруктураДанных = Новый Структура;
		Для Каждого ТекКолонка Из ТаблицаВесов.Колонки Цикл
			СтруктураДанных.Вставить(ТекКолонка.Имя, СтрокаВесов[ТекКолонка.Имя]);
		КонецЦикла;	
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;	
	
	Возврат МассивДанных;
КонецФункции	

Функция ОчиститьРегистрациюДанных(ВходныеДанные) Экспорт
	Если ВходныеДанные.TSDid = "UTL" Тогда
		Узел = ПараметрыСеанса.скан_УзелУТ;
	Иначе	
		Узел = скан_ОбменДаннымСервер.ПолучитьУзелТСД(ВходныеДанные.TSDid);
	КонецеСли;	
	
	МассивНомеров = Новый Массив;
	
	
	Для каждого Стр Из ВходныеДанные.arrayOfIDs Цикл
		Если ВходныеДанные.TSDid <> "UTL" Тогда
			МассивНомеров.Добавить(Стр);
		Иначе	
			МассивНомеров.Добавить(Стр.numberDoc);
		КонецеСли;	
	КонецЦикла;
		
	
	Если СтрЧислоВхождений(ВходныеДанные.metaData,"Справочник") >0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|   ОбъектМетаданных.Ссылка
		|ИЗ
		|   "+ВходныеДанные.metaData+" КАК ОбъектМетаданных
		|ГДЕ
		|   ОбъектМетаданных.Код В (&Номер)";
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|   ОбъектМетаданных.Ссылка
		|ИЗ
		|   "+ВходныеДанные.metaData+" КАК ОбъектМетаданных
		|ГДЕ
		|   ОбъектМетаданных.Номер В (&Номер)";
		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номер", МассивНомеров);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел,ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("result", "OK");
	Возврат СтруктураОтвета;
КонецФункции	
#КонецОбласти


