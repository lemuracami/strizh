Функция ДанныеJSONВСтруктуру(ДанныеJSON, ИменаСвойствСоЗначениямиДата = "") Экспорт
	Чт = Новый ЧтениеJSON;
	Чт.УстановитьСтроку(ДанныеJSON);
	СтруктураДанных = ПрочитатьJSON(Чт, Ложь, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.Microsoft);
	Возврат СтруктураДанных;
КонецФункции

Функция СформироватьФайлJSON(СтруктураJSON) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	ФайлJSON = ПолучитьИмяВременногоФайла("json");
	ЗаписьJSON.ОткрытьФайл(ФайлJSON);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
	ЗаписьJSON.Закрыть();
	
	Возврат ФайлJSON;
КонецФункции

Функция СформироватьСтрокуJSON(СтруктураJSON) Экспорт
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	

	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
КонецФункции

Функция ПолучитьУзелТСД(ИдентификаторУзла) Экспорт
	ТСД = ПланыОбмена.скан_ПриложенияТСД.НайтиПоКоду(ИдентификаторУзла);
	Если ЗначениеЗаполнено(ТСД) Тогда
		Возврат ТСД.Ссылка;
	Конецесли;
	
	ТСД = ПланыОбмена.скан_ПриложенияТСД.СоздатьУзел();
	ТСД.ДатаСоздания = ТекущаяДата();
	ТСД.Код = ИдентификаторУзла;
	ТСД.Записать();
	ПланыОбмена.ЗарегистрироватьИзменения(ТСД.Ссылка, Метаданные.Справочники.скан_ЭлектронныеВесы);
	Возврат ТСД.Ссылка;
КонецФункции	

Процедура ЗафиксироватьНомерВерсии(МП, НомерВерсии, ОписаниеВерсии, ЭтоРелиз) Экспорт
	ВерсияМП = ПолучитьВерсиюМП(НомерВерсии, ОписаниеВерсии, ЭтоРелиз);
	ТекущаяВерсияМП = ПолучитьТекущуюВерсиюМП(МП);
	
	
	Если ВерсияМП <> ТекущаяВерсияМП Тогда
		УстановитьТекущуюВерсиюМП(МП, ВерсияМП);
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьВерсиюМП(ВерсияМПСтрока, ОписаниеВерсии, ЭтоРелиз)  
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	скан_НомераВерсийМП.Ссылка КАК Версия
	            |ИЗ
	            |	Справочник.скан_НомераВерсийМП КАК скан_НомераВерсийМП
	            |ГДЕ
	            |	скан_НомераВерсийМП.НомерВерсии = &НомерВерсии";
	Зап.УстановитьПараметр("НомерВерсии", ВерсияМПСтрока);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Версия;
	Иначе	
		Нов = Справочники.скан_НомераВерсийМП.СоздатьЭлемент();
		Нов.НомерВерсии = ВерсияМПСтрока;
		Нов.Наименование = ВерсияМПСтрока;
		Нов.ДатаСозданияВерсии = ТекущаяДата();
		Нов.Описание = ОписаниеВерсии;
		Нов.РелизнаяВерсия = ЭтоРелиз;
		Нов.Записать();
		Возврат Нов.Ссылка;
	КонецЕсли;	
КонецФункции	

Функция ПолучитьТекущуюВерсиюМП(МП) 
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	скан_ВерсииМПСрезПоследних.Версия КАК Версия
	            |ИЗ
	            |	РегистрСведений.скан_ВерсииМП.СрезПоследних(, МП.Ссылка = &МП) КАК скан_ВерсииМПСрезПоследних";
	Зап.УстановитьПараметр("МП", МП);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Версия;
	Иначе	
		Возврат Неопределено;
	КонецеСли;	
КонецФункции	

Процедура УстановитьТекущуюВерсиюМП(МП, ВерсияМП) 
	Наб = РегистрыСведений.скан_ВерсииМП.СоздатьНаборЗаписей();
	
	ТекД = ТекущаяДата();
	
	Наб.Отбор.Период.Установить(ТекД);
	Наб.Отбор.МП.Установить(МП);
	
	Нов = Наб.Добавить();
	Нов.МП = МП;
	Нов.Период = Текд;
	Нов.Версия = ВерсияМП;
	
	Наб.Записать();
КонецПроцедуры	
