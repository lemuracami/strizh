#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Месяц, за который вводится табель.
//
Перем ДатаТабеля Экспорт; // <Дата>

// Таблица дней табеля.
//
Перем тзДни Экспорт; // <ТаблицаЗначений(ИмяКолонки, Представление: <Строка>, День: <Дата>)>

Перем мсВыходные;

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	ОформлениеСтроки.Ячейки.Группа.УстановитьКартинку(БиблиотекаКартинок.новаГруппа);
	ОформлениеСтроки.Ячейки.Сотрудник.УстановитьКартинку(БиблиотекаКартинок.новаЭлемент);
	
	Если ДанныеСтроки.Группировка = NULL Тогда
		ЦветВыходногоДня = Новый Цвет(255, 200, 200);
		Для Каждого Выходной Из мсВыходные Цикл
			ОформлениеСтроки.Ячейки[Выходной].ЦветФона = ЦветВыходногоДня;
		КонецЦикла;
	Иначе
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
		
	ИначеЕсли Событие = "Выбор" Тогда
		Параметр3 = Ложь;
		Если ЗначениеЗаполнено(Параметр1.Сотрудник) Тогда
			ОткрытьЗначение(Параметр1.Сотрудник);
		КонецЕсли;
		
	ИначеЕсли Событие = "НачалоИзменения" Тогда
		Если Параметр1.Группировка <> NULL Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;	
КонецФункции

Процедура Настроить()
	ПараметрыЖурнала = Новый Структура;
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	КонструкторДанных.ПостОбработчикДанных = ЭтотОбъект;
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ
	|	""Водители"" КАК КатегорияСотрудника,
	|	Водители.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.новаВодители КАК Водители
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Экспедиторы"" КАК КатегорияСотрудника,
	|	Экспедиторы.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.новаЭкспедиторы КАК Экспедиторы
	|) КАК Сотрудники";
	
	КонструкторДанных.ПостоянныйОтбор = "Сотрудники.Сотрудник В
	|(ВЫБРАТЬ
	|	Сотрудник
	|ИЗ
	|	РегистрСведений.новаСхемыНачисленияЗарплатыСотрудников.СрезПоследних(&ДатаТабеля)
	|ГДЕ
	|	СхемаНачисленияЗарплаты <> ЗНАЧЕНИЕ(Справочник.новаСхемыНачисленияЗарплаты.ПустаяСсылка))";
	
	КонструкторДанных.ПостояннаяВыборка = ",
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Представление(Сотрудники.Сотрудник) КАК Сотрудник_Пред,
	|	Сотрудники.Сотрудник.Родитель КАК Группа,
	|	Представление(Сотрудники.Сотрудник.Родитель) КАК Группа_Пред";
	
	КонструкторДанных.ДобавитьПараметр("ДатаТабеля", ДатаТабеля);
	
	Работа = Метаданные.Документы.новаТабель.ТабличныеЧасти.Работы.Реквизиты.Работа.Тип.ПривестиЗначение(Неопределено);
	КонструкторДанных.ДобавитьПараметр("Работа", Работа);
	
	КонструкторДанных.ДобавитьПоле("КатегорияСотрудника");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Сотрудники.КатегорияСотрудника");
	КонструкторДанных.ДобавитьОтборПоля(, "Сотрудники.КатегорияСотрудника");
	
	КонструкторДанных.ДобавитьПоле("Сотрудник");
	КонструкторДанных.ДобавитьОтборПоля(, "Сотрудники.Сотрудник");
	КонструкторДанных.ДобавитьСортировкуПоля("Сотрудники.Сотрудник.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Группа");
	КонструкторДанных.ДобавитьОтборПоля(, "Сотрудники.Сотрудник.Родитель");
	КонструкторДанных.ДобавитьСортировкуПоля("Сотрудники.Сотрудник.Родитель.Наименование");
	
	Для Каждого стрДень Из тзДни Цикл
		КонструкторДанных.ДобавитьПоле(стрДень.ИмяКолонки, стрДень.Представление);
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		КонструкторДанных.ДобавитьВыборкуПоля(, "&Работа");
	КонецЦикла;
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("КатегорияСотрудника");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Группа",,, Истина);
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Сотрудник"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
	ГруппировкаГруппы = КонструкторДанных.Группировки.Найти("Группа");
	Если ГруппировкаГруппы = Неопределено Тогда Возврат; КонецЕсли;
	
	Если дзДанные.Строки.Количество() > 0 Тогда
		УдалитьПустыеГруппы(дзДанные.Строки[0].Строки, ГруппировкаГруппы);
	КонецЕсли;
КонецПроцедуры

Процедура СкопироватьСтрокиДерева(СтрокиПриемник, СтрокиИсточник, Позиция = Неопределено)
	Если Позиция = Неопределено Тогда
		Для Каждого ИсхСтрока Из СтрокиИсточник Цикл
			НовСтрока = СтрокиПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ИсхСтрока);
			СкопироватьСтрокиДерева(НовСтрока.Строки, ИсхСтрока.Строки);
		КонецЦикла;	
	Иначе
		Для Каждого ИсхСтрока Из СтрокиИсточник Цикл
			НовСтрока = СтрокиПриемник.Вставить(Позиция);
			ЗаполнитьЗначенияСвойств(НовСтрока, ИсхСтрока);
			СкопироватьСтрокиДерева(НовСтрока.Строки, ИсхСтрока.Строки);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьПустыеГруппы(Строки, ГруппировкаГруппы)
	ъ = 0;
	КоличествоСтрок = Строки.Количество();
	Пока ъ < КоличествоСтрок Цикл
		Строка = Строки[ъ];
		ъ = ъ + 1;
		
		Если Строка.Группировка = NULL Тогда Продолжить; КонецЕсли;
		Если Строка.Группировка = ГруппировкаГруппы Тогда
			Если Не ЗначениеЗаполнено(Строка.Группа) Тогда
				СтрокиРодителя = Строка.Родитель.Строки;
				СкопироватьСтрокиДерева(СтрокиРодителя, Строка.Строки, ъ);
				СтрокиРодителя.Удалить(Строка);
				ъ = ъ - 1;
				Строка = Строки[ъ];
			КонецЕсли;
		КонецЕсли;
		
		УдалитьПустыеГруппы(Строка.Строки, ГруппировкаГруппы);
	КонецЦикла;
КонецПроцедуры

// Назначает табелю новый месяц.
//
// Параметры:
//  НоваяДатаТабеля <Дата>
//
Процедура УстановитьДатуТабеля(НоваяДатаТабеля) Экспорт
	ДатаТабеля = КонецМесяца(НоваяДатаТабеля);
	
	тзДни = Новый ТаблицаЗначений;
	тзДни.Колонки.Добавить("ИмяКолонки");
	тзДни.Колонки.Добавить("Представление");
	тзДни.Колонки.Добавить("День");
	
	мсВыходные = Новый Массив;
	
	текДата = НачалоМесяца(ДатаТабеля);
	НачалоСледующегоМесяца = ДобавитьМесяц(текДата, 1);
	Пока текДата < НачалоСледующегоМесяца Цикл
		стрДень = тзДни.Добавить();
		стрДень.День = День(текДата);
		стрДень.Представление = Строка(стрДень.День);
		стрДень.ИмяКолонки = "ДЕНЬ" + СтрЗаменить(Строка(стрДень.День), Символы.НПП, "");
		
		дн = ДеньНедели(текДата);
		Если дн = 6 Или дн = 7 Тогда
			мсВыходные.Добавить(стрДень.ИмяКолонки);
		КонецЕсли;
		
		текДата = текДата + 24 * 60 * 60;
	КонецЦикла;
КонецПроцедуры

#КонецЕсли