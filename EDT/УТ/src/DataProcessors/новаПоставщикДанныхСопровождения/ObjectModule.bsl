Перем КСЛ;

//Проверка возможности отключения обработчиков
//
Функция ГотовОсвободитьРесурсы() Экспорт
	
	Возврат Ложь;
	
КонецФункции

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов() Экспорт
	
	КСЛ.Клиент_Мониторинг_МенеджерТочекСопровожденияКлиент.ОстановитьОтслеживаниеПосещенияТочек();
	
	КСЛ.Клиент_Мониторинг_МенеджерТочекСопровожденияКлиент.ОтключитьВсеОбработчики();
	
КонецПроцедуры

Процедура ПодключитьКСЛ()
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		КСЛ = новаСерверКСЛ.Подключиться();
	#КонецЕсли
КонецПроцедуры

//Подключение к КСЛ для получения фактических данных
//
Процедура Настроить() Экспорт
	
	Попытка
		ПодключитьКСЛ();
	Исключение
		Возврат;
	КонецПопытки;
	
	#Если Клиент Тогда
		новаКонтекст.СборщикМусора.ЗарегистрироватьОбъектТребующийОчистки(ЭтотОбъект);
	#КонецЕсли
	
	КСЛ.Клиент_Мониторинг_МенеджерТочекСопровожденияКлиент.ТочкиСопровожденияИзменены(ЭтотОбъект, "ПриИзмененииДанныхСопровождения");
	
	КСЛ.Клиент_Мониторинг_МенеджерТочекСопровожденияКлиент.НачатьОтслеживаниеПосещенияТочек();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка КАК Рейс
	|  ИЗ
	|    БизнесПроцесс.новаРейсМестнойДоставки
	|  ГДЕ
	|    Ссылка В
	|      (
	|        ВЫБРАТЬ
	|            БизнесПроцесс
	|          ИЗ
	|            Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки), НЕ Выполнена)
	|      )
	|ДЛЯ ИЗМЕНЕНИЯ
	|    БизнесПроцесс.новаРейсМестнойДоставки
	|");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Сопровождение = КСЛ.Сопровождение_СопровождениеРейса();
			Сопровождение.Ид = Строка(Выборка.Рейс.УникальныйИдентификатор());
			Сопровождение.Загрузить();
			
			обРейс = Выборка.Рейс.ПолучитьОбъект();
			//ДатаНачалаФакт
			Если не обРейс.ФактическоеВремяНачалаУказаноВручную Тогда
				
				Если НачалоДня(Сопровождение.ДатаНачалаФакт) <> '1899.12.30' Тогда
					обРейс.ДатаНачалаФакт = Сопровождение.ДатаНачалаФакт + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
				Иначе
					обРейс.ДатаНачалаФакт = '00010101';
				КонецЕсли;
			КонецЕсли;
			//ДатаКонцаФакт
			Если не обРейс.ФактическоеВремяКонцаУказаноВручную Тогда
				
				Если НачалоДня(Сопровождение.ДатаКонцаФакт) <> '1899.12.30' Тогда
					обРейс.ДатаКонцаФакт = Сопровождение.ДатаКонцаФакт + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
				Иначе
					обРейс.ДатаКонцаФакт = '00010101';
				КонецЕсли;
			КонецЕсли;
			
			обРейс.РасстояниеФакт = 0;
			
			//Маршрут
			НЗ = РегистрыСведений.новаТочкиМаршрутаРейсов.СоздатьНаборЗаписей();
			НЗ.Отбор.Рейс.Установить(Выборка.Рейс);
			НЗ.Отбор.МаршрутСопровождения.Установить(Истина);
			НЗ.Прочитать();
			//Внеплановые стоянки
			НЗ_ВнеплановыеСтоянки = РегистрыСведений.новаВнеплановыеСтоянкиРейсов.СоздатьНаборЗаписей();
			НЗ_ВнеплановыеСтоянки.Отбор.Рейс.Установить(Выборка.Рейс);
			//События рейса
			НЗ_События = РегистрыСведений.новаСобытияРейсов.СоздатьНаборЗаписей();
			НЗ_События.Отбор.Рейс.Установить(Выборка.Рейс);
			
			//Заполнение данными мониторинга
			ТЗ = НЗ.Выгрузить();
			ТЗ.Индексы.Добавить("ИдТочки");
			
			НачальныеТочкиСовпадают = не обРейс.НачалоРейсаУказаноВручную;
			КонечныеТочкиСовпадают = не (обРейс.КонецРейсаУказанВручную или обРейс.КонецРейсаСовпадаетСНачалом);
			
			Для Индекс = 0 По Сопровождение.Маршрут.Количество() - 1 Цикл
				
				ТочкаМаршрута = Сопровождение.Маршрут.Получить(Индекс);
				
				Если ТочкаМаршрута.Вид <> "Внеплановая" Тогда
					
					НайденнаяСтрока = ТЗ.Найти(ТочкаМаршрута.Ид, "ИдТочки");
					Если НайденнаяСтрока <> Неопределено Тогда
						
						Если НачалоДня(ТочкаМаршрута.ФактВремяПрибытия) <> '1899.12.30' Тогда
							НайденнаяСтрока.ДатаПрибытия = ТочкаМаршрута.ФактВремяПрибытия + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
							НайденнаяСтрока.ДатаУбытия = НайденнаяСтрока.ДатаПрибытия + ТочкаМаршрута.ФактДлительностьПребывания;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока = НЗ_ВнеплановыеСтоянки.Добавить();
					НоваяСтрока.Рейс = Выборка.Рейс;
					НоваяСтрока.ДатаПрибытия = ТочкаМаршрута.ФактВремяПрибытия + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
					НоваяСтрока.ДатаУбытия = НоваяСтрока.ДатаПрибытия + ТочкаМаршрута.ФактДлительностьПребывания;
					НоваяСтрока.Широта = ТочкаМаршрута.Координаты.Широта;
					НоваяСтрока.Долгота = ТочкаМаршрута.Координаты.Долгота;
					НоваяСтрока.БлижайшийАдрес = Справочники.новаАдреса.ПолучитьСсылку(Новый УникальныйИдентификатор(ТочкаМаршрута.БлижайшийАдрес.Ид));
					НоваяСтрока.ИдТочки = ТочкаМаршрута.Ид;
				КонецЕсли;
			КонецЦикла;
			
			Для Индекс = 0 По Сопровождение.События.Количество() - 1 Цикл
				
				Событие = Сопровождение.События.Получить(Индекс);
				
				НоваяСтрока = НЗ_События.Добавить();
				НоваяСтрока.Рейс = Выборка.Рейс;
				НоваяСтрока.Дата = Событие.МоментВремени + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
				Если Событие.Событие.Тип = "СообщениеАРМВодителя" Тогда
					НоваяСтрока.Событие = Справочники.новаСообщенияАРМВодителя.ПолучитьСсылку(Новый УникальныйИдентификатор(Событие.Событие.Ид));
				КонецЕсли;
			КонецЦикла;
			
			//Запись в БД
			НачатьТранзакцию();
			
			обРейс.Записать();
			
			НЗ.Загрузить(ТЗ);
			НЗ.Записать();
			
			НЗ_ВнеплановыеСтоянки.Записать();
			
			НЗ_События.Записать();
			
			ЗафиксироватьТранзакцию();
			
			//Получение фактического пробега транспорта
			ЗапросДанных = КСЛ.Мониторинг_ЗапросыДанных_ПробегТранспортаЗаПериод();
			ЗапросДанных.Транспорт.Ид = Строка(обРейс.Транспорт.УникальныйИдентификатор());
			ЗапросДанных.НачалоПериода = обРейс.ДатаНачалаФакт;
			ЗапросДанных.ОкончаниеПериода = обРейс.ДатаКонцаФакт;
			ЗапросДанных.Тэг = Ксл.Wrap(обРейс);
			
			ЗапросДанных.ПослеРасчетаПробега(ЭтотОбъект, "ОбновитьФактическоеРасстояние");
			
			ЗапросДанных.РассчитатьПробег();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Обработчик события изменения данных сопровождения в точках сопровождения маршрута
//
//  Параметры:
//    СобытияСопровождения - <COMОбъект> Список зафиксированных событий сопровождения.
//
Процедура ПриИзмененииДанныхСопровождения(СобытияСопровождения) Экспорт
	
	Если СобытияСопровождения.Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьКСЛ();
	
	ГруппыСобыттий = Новый Соответствие;
	Для Индекс = 0 По СобытияСопровождения.Количество - 1 Цикл
		
		СобытиеСопровождения = СобытияСопровождения.Получить(Индекс);
		Если СобытиеСопровождения.ТипОбъекта() = "УТЛ.Сопровождение.СобытиеОбновленияСопровожденияРейса" Тогда
			ИдРейса = СобытиеСопровождения.ОбновленноеСопровождениеРейса.Ид;
		ИначеЕсли СобытиеСопровождения.ТипОбъекта() = "УТЛ.Сопровождение.СобытиеОбновленияТочкиМаршрутаСопровождения" Тогда
			ИдРейса = СобытиеСопровождения.ОбновленнаяТочка.СопровождениеМаршрута.Ид;
		ИначеЕсли СобытиеСопровождения.ТипОбъекта() = "УТЛ.Сопровождение.СобытиеОбновленияСобытийРейса" Тогда
			ИдРейса = СобытиеСопровождения.ЗафиксированноеСобытие.СопровождениеМаршрута.Ид;
		КонецЕсли;
		
		РейсУТЛ = БизнесПроцессы.новаРейсМестнойДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдРейса));
		
		СобытияРейса = ГруппыСобыттий[РейсУТЛ];
		Если СобытияРейса = Неопределено Тогда
			
			СобытияРейса = Новый Массив;
			ГруппыСобыттий.Вставить(РейсУТЛ, СобытияРейса);
		КонецЕсли;
		
		СобытияРейса.Добавить(СобытиеСопровождения);
	КонецЦикла;
	
	Для каждого КлючЗначение Из ГруппыСобыттий Цикл

		РейсУТЛ = КлючЗначение.Ключ;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    Ссылка
		|  ИЗ
		|    Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки), БизнесПроцесс = &Рейс)
		|");
		
		Запрос.УстановитьПараметр("Рейс", РейсУТЛ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если не РезультатЗапроса.Пустой() Тогда
			
			НачатьТранзакцию();
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|    Ссылка
			|    ,ДатаНачалаФакт
			|    ,ДатаКонцаФакт
			|    ,ФактическоеВремяНачалаУказаноВручную
			|    ,ФактическоеВремяКонцаУказаноВручную
			|    ,НачалоРейсаУказаноВручную
			|    ,КонецРейсаУказанВручную
			|    ,КонецРейсаСовпадаетСНачалом
			|  ИЗ
			|    БизнесПроцесс.новаРейсМестнойДоставки
			|  ГДЕ
			|    Ссылка = &Рейс
			|ДЛЯ ИЗМЕНЕНИЯ
			|    БизнесПроцесс.новаРейсМестнойДоставки
			|");
			
			Запрос.УстановитьПараметр("Рейс", РейсУТЛ);
			
			ВыборкаРейса = Запрос.Выполнить().Выбрать();
			ВыборкаРейса.Следующий();
			
			обРейс = Неопределено;
			
			Для Индекс = 0 По КлючЗначение.Значение.Количество() - 1 Цикл
				
				ТекущееСобытие = КлючЗначение.Значение.Получить(Индекс);
				
				Если ТекущееСобытие.ТипОбъекта() = "УТЛ.Сопровождение.СобытиеОбновленияТочкиМаршрутаСопровождения" Тогда
					
					Если ТекущееСобытие.ОбновленнаяТочка.Вид <> "Внеплановая" Тогда
						ОбработатьПосещениеТочкиДоставки(ВыборкаРейса, ТекущееСобытие.ОбновленнаяТочка);
					Иначе
						ОбработатьВнеплановуюСтоянку(ВыборкаРейса, ТекущееСобытие.ОбновленнаяТочка);
					КонецЕсли;
					
				ИначеЕсли ТекущееСобытие.ТипОбъекта() = "УТЛ.Сопровождение.СобытиеОбновленияСобытийРейса" Тогда
					
					ОбработатьСобытиеМаршрутаСопровождения(ВыборкаРейса, ТекущееСобытие.ЗафиксированноеСобытие);
					
				ИначеЕсли ТекущееСобытие.ТипОбъекта() = "УТЛ.Сопровождение.СобытиеОбновленияСопровожденияРейса" Тогда
					
					ОбработатьИзменениеСопровожденияРейса(ВыборкаРейса, обРейс, ТекущееСобытие);
				КонецЕсли;
			КонецЦикла;
			
			Если обРейс <> Неопределено Тогда
				
				обРейс.Записать();
				
				ЗапросДанных = КСЛ.Мониторинг_ЗапросыДанных_ПробегТранспортаЗаПериод();
				ЗапросДанных.Транспорт.Ид = Строка(обРейс.Транспорт.УникальныйИдентификатор());
				ЗапросДанных.НачалоПериода = обРейс.ДатаНачалаФакт;
				ЗапросДанных.ОкончаниеПериода = обРейс.ДатаКонцаФакт;
				ЗапросДанных.Тэг = Ксл.Wrap(обРейс);
				
				ЗапросДанных.ПослеРасчетаПробега(ЭтотОбъект, "ОбновитьФактическоеРасстояние");
				
				ЗапросДанных.РассчитатьПробег();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Обработка фактического времени сопровождения
//
Процедура ОбработатьИзменениеСопровожденияРейса(ВыборкаРейса, обРейс, Событие)
	
	Если ( не ВыборкаРейса.ФактическоеВремяНачалаУказаноВручную)
	     или ( не ВыборкаРейса.ФактическоеВремяКонцаУказаноВручную) Тогда
		
		обРейс = ВыборкаРейса.Ссылка.ПолучитьОбъект();
		//ДатаНачалаФакт
		Если не обРейс.ФактическоеВремяНачалаУказаноВручную Тогда
			
			Если НачалоДня(Событие.ДатаНачалаФакт) <> '1899.12.30' Тогда
				обРейс.ДатаНачалаФакт = Событие.ДатаНачалаФакт + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
			Иначе
				обРейс.ДатаНачалаФакт = '00010101';
			КонецЕсли;
		КонецЕсли;
		//ДатаКонцаФакт
		Если не обРейс.ФактическоеВремяКонцаУказаноВручную Тогда
			
			Если НачалоДня(Событие.ДатаКонцаФакт) <> '1899.12.30' Тогда
				обРейс.ДатаКонцаФакт = Событие.ДатаКонцаФакт + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
			Иначе
				обРейс.ДатаКонцаФакт = '00010101';
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Обработка посещения плановой точки доставки.
//
//  Параметры:
//    ВыборкаРейса - <ВыборкаРезультатаЗапроса> Дополнительная информация по рейсу.
//    обРейс - <БизнесПроцессОбъект.новаРейсМестнойДоставки, Неопределенно> Изменённый объект рейса местной доставки, если изменения не производились, то содержит неопределенно..
//    ТочкаСопровождения - <COMОбъект> Точка сопровождения.
//
Процедура ОбработатьПосещениеТочкиДоставки(ВыборкаРейса, ТочкаСопровождения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Рейс
	|    ,НомерТочки
	|    ,МаршрутСопровождения
	|    ,КодТочки
	|    ,Действие
	|    ,ТочкаМаршрута
	|    ,ПлановаяДатаПосещения
	|    ,ПлановоеВремяПосещения
	|    ,ПлановоеВремяПосещенияУказаноВручную
	|    ,ФактическоеВремяПосещенияУказаноВручную
	|    ,КодУчасткаТрекаКТочке
	|    ,КодУчасткаТрекаОтТочки
	|    ,РасстояниеКТочке
	|    ,РасстояниеОтТочки
	|    ,ВремяКТочке
	|    ,ВремяОтТочки
	|    ,ИдТочки
	|  ИЗ
	|    РегистрСведений.новаТочкиМаршрутаРейсов
	|  ГДЕ
	|    Рейс = &Рейс
	|    И ИдТочки = &ИдТочки
	|    И МаршрутСопровождения
	|  ДЛЯ ИЗМЕНЕНИЯ
	|    РегистрСведений.новаТочкиМаршрутаРейсов
	|");
	
	Запрос.УстановитьПараметр("Рейс", ВыборкаРейса.Ссылка);
	запрос.УстановитьПараметр("ИдТочки", ТочкаСопровождения.Ид);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если не Выборка.ФактическоеВремяПосещенияУказаноВручную Тогда
			
			МЗ = РегистрыСведений.новаТочкиМаршрутаРейсов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			
			Если НачалоДня(ТочкаСопровождения.ФактВремяПрибытия) <> '1899.12.30' Тогда
				МЗ.ДатаПрибытия = ТочкаСопровождения.ФактВремяПрибытия + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
				МЗ.ДатаУбытия = МЗ.ДатаПрибытия + ТочкаСопровождения.ФактДлительностьПребывания;
			КонецЕсли;
			
			МЗ.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Обработка внеплановой стоянки транспорта
//
//  Параметры:
//    ВыборкаРейса - <ВыборкаРезультатаЗапроса> Дополнительная информация по рейсу.
//    ТочкаСопровождения - <COMОбъект> Точка сопровождения.
//
Процедура ОбработатьВнеплановуюСтоянку(ВыборкаРейса, ТочкаСопровождения);
	
	МЗ = РегистрыСведений.новаВнеплановыеСтоянкиРейсов.СоздатьМенеджерЗаписи();
	МЗ.Рейс = ВыборкаРейса.Ссылка;
	МЗ.ДатаПрибытия = ТочкаСопровождения.ФактВремяПрибытия + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
	МЗ.ДатаУбытия = МЗ.ДатаПрибытия + ТочкаСопровождения.ФактДлительностьПребывания;
	МЗ.Широта = ТочкаСопровождения.Координаты.Широта;
	МЗ.Долгота = ТочкаСопровождения.Координаты.Долгота;
	МЗ.БлижайшийАдрес = Справочники.новаАдреса.ПолучитьСсылку(Новый УникальныйИдентификатор(ТочкаСопровождения.БлижайшийАдрес.Ид));
	МЗ.ИдТочки = ТочкаСопровождения.Ид;
	
	МЗ.Записать();
	
КонецПроцедуры

//Обработка события сопровождения отличного от стоянки в точке.
//
//  Параметры:
//    ВыборкаРейса - <ВыборкаРезультатаЗапроса> Дополнительная информация по рейсу.
//    СобытиеСопровождения - <COMОбъект> Событие сопровождения.
//
Процедура ОбработатьСобытиеМаршрутаСопровождения(ВыборкаРейса, СобытиеСопровождения);
	
	МЗ = РегистрыСведений.новаСобытияРейсов.СоздатьМенеджерЗаписи();
	МЗ.Рейс = ВыборкаРейса.Ссылка;
	МЗ.Дата = СобытиеСопровождения.МоментВремени + КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
	Если СобытиеСопровождения.Событие.Тип = "СообщениеАРМВодителя" Тогда
		МЗ.Событие = Справочники.новаСообщенияАРМВодителя.ПолучитьСсылку(Новый УникальныйИдентификатор(СобытиеСопровождения.Событие.Ид));
	КонецЕсли;
	
	МЗ.Записать();
	
КонецПроцедуры

//Обработка расчета фактического пробега машины
//
//  Параметры:  
//    Расчет - <COMОбъект> расчет фактического пробега
//
Процедура ОбновитьФактическоеРасстояние(Расчет) Экспорт
	
	НачатьТранзакцию();
	
	обРейс = Расчет.Тэг.ИсхОбъект;
	обРейс.РасстояниеФакт = Расчет.Пробег / 1000;
	Попытка
		обРейс.Записать();
	Исключение
		//Ничего делать не надо, более ранний расчет расстояния пришёл позже
	КонецПопытки;
	
	Расчет.Тэг = Неопределено;
	Расчет.ОтключитьВсеОбработчики();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
