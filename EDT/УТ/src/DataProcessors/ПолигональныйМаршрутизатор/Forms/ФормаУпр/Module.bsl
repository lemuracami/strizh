//+Степанов Задача № 3863
&НаКлиенте
Перем ДанныеЗаказовЗаборов;

&НаКлиенте
Перем ОтметкиНаКарте;

//+Широков по письму
&НаКлиенте
Перем МассивПолигоновСПометками;

&НаКлиенте
Перем МассивРейсовСПометками;

&НаКлиенте
Перем МассивПолигоновВыделенныеСтроки;

&НаКлиенте
Перем МассивРейсовВыделенныеСтроки;
//-Широков по письму

#Область РаботаСФильтрами

&НаКлиенте
Процедура УстановитьВыбранныйФильтр(Элемент)
	Струк = Новый Структура;
	Струк.Вставить("ЭлементФильтра", Элемент.Имя);
	
	НайденнаяСтрока = ТабЭлементовФильтра.НайтиСтроки(Струк)[0];
	
	
	Струк = Новый Структура;
	Струк.Вставить("ЭлементРодитель", НайденнаяСтрока.ЭлементРодитель);
	СоседниеЭлементы = ТабЭлементовФильтра.НайтиСтроки(Струк);
	
	
	Если ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 1 Или ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 0 Тогда
		Если СоседниеЭлементы.Количество() > 1 Тогда
			ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 2;
		Иначе
			ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = ЭтаФорма[Элемент.Имя];
		КонецеСли;	
	ИначеЕсли ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 2 Тогда //верхний флажок уже в третьем состоянии
		
		ЕстьПервоеСостояние = Ложь;
		ЕстьВтороеСостояние = Ложь;
		Для Каждого Тек Из СоседниеЭлементы Цикл
			Если ЭтаФорма[Тек.ЭлементФильтра] = 0 Тогда
				ЕстьПервоеСостояние = Истина;
			КонецЕсли;
			
			Если ЭтаФорма[Тек.ЭлементФильтра] = 1 Тогда
				ЕстьВтороеСостояние = Истина;
			КонецЕсли;
			
			Если ЕстьПервоеСостояние И ЕстьВтороеСостояние тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не ЕстьВтороеСостояние Тогда
			ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 0;
		ИначеЕсли Не ЕстьПервоеСостояние Тогда
			ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 1;
		КонецеСли;	
	КонецеСли;	
	
	Если ЭтаФорма[НайденнаяСтрока.ЭлементФильтра] = 1 Тогда
		НайденнаяСтрока.Активен = Истина;
	ИначеЕсли ЭтаФорма[НайденнаяСтрока.ЭлементФильтра] = 0 Тогда	
		НайденнаяСтрока.Активен = Ложь;
	КонецЕсли;	
	
	ОбновитьДанные(Истина, Истина, Истина);
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВыбраннуюГруппуФильтров(Элемент)
	Если ЭтаФорма[Элемент.Имя] = 2 Тогда
		ЭтаФорма[Элемент.Имя] = 0;
	КонецеСли;	
	
	
	Струк = Новый Структура;
	Струк.Вставить("ЭлементРодитель", Элемент.Имя);
	
	НайденныеСтроки = ТабЭлементовФильтра.НайтиСтроки(Струк);
	Для Каждого Тек Из НайденныеСтроки Цикл
		ЭтаФорма[Тек.ЭлементФильтра] = ЭтаФорма[Элемент.Имя];
		Если ЭтаФорма[Элемент.Имя] = 1 Тогда
			Тек.Активен = Истина;
		ИначеЕсли ЭтаФорма[Элемент.Имя] = 0 Тогда
			Тек.Активен = Ложь;
		КонецеСли;	
	КонецЦикла;	
	ОбновитьДанные(Истина, Истина, Истина);
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементФильтраНаФорму(СтрокаТаблицы)
	Если Не СтрокаТаблицы.ЭтоГруппа Тогда
		ИмяДанных = "ФильтрКод" + СтрокаТаблицы.Код;
	Иначе
		ИмяДанных = "ГруппаФильтровКод" + СтрокаТаблицы.Код;
	КонецеСли;	
	
	
	Если СтрокаТаблицы.НомерКолонки = 0 Или СтрокаТаблицы.НомерКолонки = 1 Тогда
		РодительКолонки = "ГруппаФильтровПерваяКолонка";
	ИначеЕсли СтрокаТаблицы.НомерКолонки = 2 Тогда	
		РодительКолонки = "ГруппаФильтровВтораяКолонка";
	Иначе
		РодительКолонки = "ГруппаФильтровВтораяКолонка";
	КонецеСли;	
	
	
	НовыйЭлемент = Элементы.Добавить(ИмяДанных, Тип("ПолеФормы"), Элементы[РодительКолонки]);
	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	
	
	НовыйЭлемент.ПутьКДанным = ИмяДанных;
	
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	
	
	НовыйЭлемент.Заголовок = СтрокаТаблицы.Наименование;
	НовыйЭлемент.Ширина = 20;
	НовыйЭлемент.МаксимальнаяШирина = 20;
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	Если СтрокаТаблицы.ЭтоГруппа Тогда
		НовыйЭлемент.ТриСостояния = Истина;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "УстановитьВыбраннуюГруппуФильтров");
		НовыйЭлемент.ШрифтЗаголовка = Новый Шрифт(НовыйЭлемент.ШрифтЗаголовка,,,Истина); 
	Иначе
		НовыйЭлемент.ТриСостояния = Ложь;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "УстановитьВыбранныйФильтр");
	КонецеСли;	
	
	Если Не СтрокаТаблицы.ЭтоГруппа Тогда
		Нов = ТабЭлементовФильтра.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, СтрокаТаблицы);
		Нов.ЭлементФильтра = ИмяДанных;
		Нов.ЭлементРодитель = "ГруппаФильтровКод" + СтрокаТаблицы.КодРодителя;
		Нов.ЛогическаяОперация = "ИЛИ";
	КонецеСли;
	
	
КонецПроцедуры	

&НаСервере
Процедура ИнициализацияЭлементовФильтров()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ФильтрыОтбораДанныхПМ.ЭтоГруппа КАК ЭтоГруппа,
	|	ФильтрыОтбораДанныхПМ.Наименование КАК Наименование,
	|	ФильтрыОтбораДанныхПМ.СтрокаФильтраПолигонов КАК СтрокаФильтровПолигонов,
	|	ФильтрыОтбораДанныхПМ.СтрокаФильтраРейсов КАК СтрокаФильтровРейсов,
	|	ФильтрыОтбораДанныхПМ.Порядок КАК Порядок,
	|	ФильтрыОтбораДанныхПМ.НомерКолонки КАК НомерКолонки,
	|	ФильтрыОтбораДанныхПМ.Ссылка КАК Фильтр,
	|	ФильтрыОтбораДанныхПМ.Родитель.Код КАК КодРодителя,
	|	ФильтрыОтбораДанныхПМ.Родитель КАК Родитель,
	|	ФильтрыОтбораДанныхПМ.Код КАК Код
	|ИЗ
	|	Справочник.ФильтрыОтбораДанныхПМ КАК ФильтрыОтбораДанныхПМ
	|ГДЕ
	|	ФильтрыОтбораДанныхПМ.ПометкаУдаления = ЛОЖЬ
	|	И ФильтрыОтбораДанныхПМ.НеАктуально = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа УБЫВ,
	|	Порядок";
	
	ТабЭлементов = Зап.Выполнить().Выгрузить();
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого Тек Из ТабЭлементов Цикл
		Если Не Тек.ЭтоГруппа Тогда
			ИмяДанных = "ФильтрКод" + Тек.Код;
		Иначе
			ИмяДанных = "ГруппаФильтровКод" + Тек.Код;
		КонецеСли;	
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяДанных, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0))));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ТабЭлементовКопия = ТабЭлементов.Скопировать();
	
	
	Для Каждого Тек Из ТабЭлементов Цикл
		Если Не Тек.ЭтоГруппа Тогда
			Продолжить;
		КонецеСли;	
		ДобавитьЭлементФильтраНаФорму(Тек);
		
		Струк = Новый Структура;
		Струк.Вставить("Родитель", Тек.Фильтр);
		
		СтрокиПодчиненныхЭлементов = ТабЭлементовКопия.НайтиСтроки(Струк);
		Для Каждого ПодчиненныйЭлемент Из СтрокиПодчиненныхЭлементов Цикл
			ДобавитьЭлементФильтраНаФорму(ПодчиненныйЭлемент);
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция СтрокаУсловийФильтра(Дерево)
	СтрокаФильтра = "";
	Для Каждого Тек Из ТабЭлементовФильтра Цикл
		Если Тек.Активен Тогда
			Если Дерево = "ДеревоПолигоновСЗаказами" Тогда
				Если СокрЛП(Тек.СтрокаФильтровПолигонов) <> "" Тогда
					СтрокаФильтра = СтрокаФильтра + " ИЛИ " + Тек.СтрокаФильтровПолигонов;
				КонецЕсли;	
			ИначеЕсли Дерево = "ДеревоРейсовСЗаказами" Тогда
				Если СокрЛП(Тек.СтрокаФильтровРейсов) <> "" Тогда
					СтрокаФильтра = СтрокаФильтра + " ИЛИ " + Тек.СтрокаФильтровРейсов;
				КонецеСли;	
			КонецеСли;	
		КонецеСли;	
	КонецЦикла;	
	Если ЗначениеЗаполнено(СтрокаФильтра) Тогда
		Возврат " И (" + Прав(СтрокаФильтра, СтрДлина(СтрокаФильтра) - 5) + ")";
	Иначе	
		Возврат "";
	КонецеСли;	
КонецФункции	
#КонецОбласти

#Область РаботаСДинамическимиПолямиДеревьев

&НаСервере
Процедура ДобавитьВОформлениеЭлементыДинамическихКолонок(КоллекцияПолей, Суффикс)
	Выб = ПолигональнаяМаршрутизацияСервер.ВыполнитьЗапросПоКолонкамБрейков(СхемаЛогистическихБрейков);
	
	ТипДоставка = Перечисления.ТипыЗаказов.Доставка;
	
	Стр = "";
	Пока Выб.Следующий() Цикл
		НазваниеКолонки = СтрЗаменить(Выб.НазваниеКолонки, " ", "");
		
		
		
		ОформляемоеПоле      = КоллекцияПолей.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки + Суффикс);
		Если Выб.ТипЗаказа = ТипДоставка Тогда
			ОформляемоеПоле      = КоллекцияПолей.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки + "_" + Суффикс);
		КонецеСли;
	КонецЦикла;
	
	
	ОформляемоеПоле      = КоллекцияПолей.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("NK" + Суффикс);
	ОформляемоеПоле      = КоллекцияПолей.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("NK_" + Суффикс);
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДерева()
	Выб = ПолигональнаяМаршрутизацияСервер.ВыполнитьЗапросПоКолонкамБрейков(СхемаЛогистическихБрейков);
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("ИмяКолонки");
	
	Стр = "";
	Пока Выб.Следующий() Цикл
		НазваниеКолонки = СтрЗаменить(Выб.НазваниеКолонки, " ", "");
		Нов = Таб.Добавить();
		Нов.ИмяКолонки = НазваниеКолонки;
	КонецЦикла;
	Возврат Таб;
КонецФункции	
#КонецОбласти


#Область РаботаСДеревомПолигонов

&НаСервере
Процедура РассчитатьИтоговоеКоличествоЗаказовСервер()
	Зап = Новый Запрос;
	//+Широков 16.07.2021 Задача 4607	
    //Старый запрос
	//Зап.Текст = "ВЫБРАТЬ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказовИтого,
	//|	1 КАК ТипЗаказа
	//|ИЗ
	//|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	//|ГДЕ
	//|	ДополнительныеПараметрыЗаказа.Доставка <> ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка)
	//|	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
	//|	И РеализацияТоваровУслуг.Дата Между &ДатаНач и &ДатаКон
	//|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	//|	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаборТовара.Ссылка),
	//|	2
	//|ИЗ
	//|	Документ.ЗаборТовара КАК ЗаборТовара
	//|ГДЕ
	//|	ЗаборТовара.ТерминалДоставки = &ТерминалДоставки
	//|	И ЗаборТовара.Дата Между &ДатаНач и &ДатаКон
	//|	И ЗаборТовара.ПометкаУдаления = ЛОЖЬ
	//|	И ЗаборТовара.СтатусИнтернетМагазина = 2";
	
	//Новый запрос 
	Зап.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказовИтого,
	|	1 КАК ТипЗаказа
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	ДополнительныеПараметрыЗаказа.Доставка <> ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка)
	|	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
	|	И РеализацияТоваровУслуг.Дата Между &ДатаНач и &ДатаКон
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	//+Широков 25.06.2021 Задача 4607
	|  И ДополнительныеПараметрыЗаказа.ВнешнийОператорМаршрутизации.Ссылка ЕСТЬ NULL
	//-Широков 25.06.2021 Задача 4607
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаборТовара.Ссылка),
	|	2
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.ТерминалДоставки = &ТерминалДоставки
	|	И ЗаборТовара.Дата Между &ДатаНач и &ДатаКон
	|	И ЗаборТовара.ПометкаУдаления = ЛОЖЬ
	|	И ЗаборТовара.СтатусИнтернетМагазина = 2";
	//-Широков 16.07.2021 Задача 4607	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	КоличествоЗаказовИтого = 0;
	
	Пока Выб.Следующий() Цикл
		Если Выб.ТипЗаказа = 1 Тогда
			КоличествоЗаказовИтого = Выб.КоличествоЗаказовИтого;
		ИначеЕсли Выб.ТипЗаказа = 2 Тогда	
			КоличествоЗаборовИтого = Выб.КоличествоЗаказовИтого;
		КонецеСли;	
	КонецЦикла;	
	
	
	Если ЗначениеЗаполнено(ЗаборнаяКатегория.АббревиатураКолонкиВПолигональномМаршрутизаторе) Тогда
		НазваниеКолонкиЗабора = ЗаборнаяКатегория.АббревиатураКолонкиВПолигональномМаршрутизаторе;
	Иначе
		НазваниеКолонкиЗабора = ЗаборнаяКатегория.Наименование;
	КонецеСли;
	
	НазваниеКолонкиЗабора = СокрЛП(СтрЗаменить(НазваниеКолонкиЗабора, " ", ""));
	
	Дерево = РеквизитФормыВЗначение("ДеревоПолигоновСЗаказами", Тип("ДеревоЗначений"));
	
	КоличествоНемаршрутизированныхЗаборов = 0;
	КоличествоНемаршрутизированныхЗаказов = 0;
	
	//МасНомеров = Новый Массив;
	
	Для Каждого Тек Из Дерево.Строки Цикл
		//Если Не ЗначениеЗаполнено(Тек.ПолигонМаршрутизации) Тогда
		//	КоличествоЗаказовИтого = КоличествоЗаказовИтого - Тек.Итого;
		//	КоличествоЗаборовИтого = КоличествоЗаборовИтого - Тек[НазваниеКолонкиЗабора];
		//	Продолжить;
		//КонецеСли;
		
		КоличествоНемаршрутизированныхЗаборов = КоличествоНемаршрутизированныхЗаборов + Тек[НазваниеКолонкиЗабора];
		КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов + Тек.Итого;
		//Для Каждого Т Из Тек.Строки Цикл
		//	Если МасНомеров.Найти(Т.НомерЗаказа) = Неопределено Тогда
		//		МасНомеров.Добавить(Т.НомерЗаказа);
		//	Иначе
		//		Сообщить("!!" + Строка(Т.ПолигонМаршрутизации) + " - " + Строка(Т.НомерЗаказа));
		//	КонецеСли;	
		//КонецЦикла;	
	КонецЦикла;	
	//Широков
	Если КоличествоНемаршрутизированныхЗаборов < 0 Тогда
		КоличествоНемаршрутизированныхЗаборов = 0;
	КонецЕсли;
	//Широков
	
	КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов - КоличествоНемаршрутизированныхЗаборов; //????? непонятно???
КонецПроцедуры	

//Широков  по письму
&НаСервере
Функция РассчитатьИтоговоеКоличествоЗаказовЗапрос()
	Зап = Новый Запрос;
	//+Широков 16.07.2021 Задача 4607
	//+Широков 16.07.2021 Задача 4607
	//Зап.Текст = "ВЫБРАТЬ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказовИтого,
	//|	1 КАК ТипЗаказа
	//|ИЗ
	//|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	//|ГДЕ
	//|	ДополнительныеПараметрыЗаказа.Доставка <> ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка)
	//|	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
	//|	И РеализацияТоваровУслуг.Дата Между &ДатаНач и &ДатаКон
	//|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	//|	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	////+Широков 24.06.2021 Задача 4607
	//|  И ДополнительныеПараметрыЗаказа.ВнешнийОператорМаршрутизации.Ссылка ЕСТЬ NULL
	////-Широков 24.06.2021 Задача 4607
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаборТовара.Ссылка),
	//|	2
	//|ИЗ
	//|	Документ.ЗаборТовара КАК ЗаборТовара
	//|ГДЕ
	//|	ЗаборТовара.ТерминалДоставки = &ТерминалДоставки
	//|	И ЗаборТовара.Дата Между &ДатаНач и &ДатаКон
	//|	И ЗаборТовара.ПометкаУдаления = ЛОЖЬ
	//|	И ЗаборТовара.СтатусИнтернетМагазина = 2";
	
	//Асеев 29.08.2023 (Задача № 5117)>>>
	//Асеев 29.08.2023 (Задача № 5117)<<<
	Зап.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Заказ) КАК КоличествоЗаказовИтого,
	|	1 КАК ТипЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Заказ
	|	ИЗ
	|		РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО (РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон)
	|				И (РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2)
	|				И (РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки)
	|				И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	|				И ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	|				И (ДополнительныеПараметрыЗаказа.ВнешнийОператорМаршрутизации = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|				И (ДополнительныеПараметрыЗаказа.Доставка <> ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ
	|	ИЗ
	|		РегистрСведений.СтатусыПредварительногоЗакрытияРейсов.СрезПоследних КАК СтатусыПредварительногоЗакрытияРейсовСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ПО (СтатусыПредварительногоЗакрытияРейсовСрезПоследних.ДатаДоставкиЗаказа = &ДатаНач)
	|				И (СтатусыПредварительногоЗакрытияРейсовСрезПоследних.СтатусПредварительногоЗакрытияРейса = ЗНАЧЕНИЕ(Перечисление.СтатусыПредварительногоЗакрытияРейсов.РейсЗакрытПредварительно))
	|				И (СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ.ТерминалДоставки = &ТерминалДоставки)
	|				И СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|				И (ДополнительныеПараметрыЗаказа.ВнешнийОператорМаршрутизации = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|				И (ДополнительныеПараметрыЗаказа.Доставка <> ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка))) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ИСТИНА),
	|	2
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗаборТовара.СтатусИнтернетМагазина = 2
	|	И ЗаборТовара.ТерминалДоставки = &ТерминалДоставки
	|	И НЕ ЗаборТовара.ПометкаУдаления";
	

	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	КоличествоЗаказовИтого = 0;
	
	Пока Выб.Следующий() Цикл
		Если Выб.ТипЗаказа = 1 Тогда
			КоличествоЗаказовИтого = Выб.КоличествоЗаказовИтого;
		ИначеЕсли Выб.ТипЗаказа = 2 Тогда	
			КоличествоЗаборовИтого = Выб.КоличествоЗаказовИтого;
		КонецеСли;	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаборнаяКатегория.АббревиатураКолонкиВПолигональномМаршрутизаторе) Тогда
		НазваниеКолонкиЗабора = ЗаборнаяКатегория.АббревиатураКолонкиВПолигональномМаршрутизаторе;
	Иначе
		НазваниеКолонкиЗабора = ЗаборнаяКатегория.Наименование;
	КонецеСли;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьИтоговоеКоличествоЗаказов()
	НазваниеКолонкиЗабора = РассчитатьИтоговоеКоличествоЗаказовЗапрос();
	
	
	НазваниеКолонкиЗабора = СокрЛП(СтрЗаменить(НазваниеКолонкиЗабора, " ", ""));
	
	//Дерево = РеквизитФормыВЗначение("ДеревоПолигоновСЗаказами", Тип("ДеревоЗначений"));
	Дерево = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
	
	КоличествоНемаршрутизированныхЗаборов = 0;
	КоличествоНемаршрутизированныхЗаказов = 0;
	
	//МасНомеров = Новый Массив;
	
	Для Каждого Тек Из Дерево Цикл
		//Если Не ЗначениеЗаполнено(Тек.ПолигонМаршрутизации) Тогда
		//	КоличествоЗаказовИтого = КоличествоЗаказовИтого - Тек.Итого;
		//	КоличествоЗаборовИтого = КоличествоЗаборовИтого - Тек[НазваниеКолонкиЗабора];
		//	Продолжить;
		//КонецеСли;
		
		//КоличествоНемаршрутизированныхЗаборов = КоличествоНемаршрутизированныхЗаборов + Тек[НазваниеКолонкиЗабора];
		Если НЕ НазваниеКолонкиЗабора = "" Тогда
			Выполнить("КоличествоНемаршрутизированныхЗаборов = КоличествоНемаршрутизированныхЗаборов + Тек."+НазваниеКолонкиЗабора);
		КонецЕсли;
		КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов + Тек.Итого;
		//Для Каждого Т Из Тек.Строки Цикл
		//	Если МасНомеров.Найти(Т.НомерЗаказа) = Неопределено Тогда
		//		МасНомеров.Добавить(Т.НомерЗаказа);
		//	Иначе
		//		Сообщить("!!" + Строка(Т.ПолигонМаршрутизации) + " - " + Строка(Т.НомерЗаказа));
		//	КонецеСли;	
		//КонецЦикла;	
	КонецЦикла;	
	//Широков по письму
	Если КоличествоНемаршрутизированныхЗаборов < 0 Тогда
		КоличествоНемаршрутизированныхЗаборов = 0;
	КонецЕсли;
	//Широков по письму
	
	КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов - КоличествоНемаршрутизированныхЗаборов; //????? непонятно???
	
	
КонецПроцедуры	
//Широков  по письму


&НаСервереБезКонтекста
Процедура ОформлениеКолонки(ЭлементФормы, ИмяКолонки)
	ЭлементФормы.Ширина = 2;
	ЭлементФормы.МаксимальнаяШирина = 2;
	
	
	Если ИмяКолонки = "НомерЗаказа" Тогда
		ЭлементФормы.Заголовок = "№";
		ЭлементФормы.Ширина = 9;
		ЭлементФормы.МаксимальнаяШирина = 9;
		
	ИначеЕсли ИмяКолонки = "ПолигонМаршрутизации" Тогда	
		ЭлементФормы.Заголовок = "Полигон";
		ЭлементФормы.Ширина = 9;
		ЭлементФормы.МаксимальнаяШирина = 9;
	ИначеЕсли ИмяКолонки = "ЗаказСсылка" Или ИмяКолонки = "УИД" Или ИмяКолонки = "ВесЗаказа" Или ИмяКолонки = "Партнер" Или ИмяКолонки = "ВремяПрибытияС" Или ИмяКолонки = "ВремяПрибытияПо" Или ИмяКолонки = "ОбъемЗабора" Или ИмяКолонки = "КатегорияЗаказа" Тогда	
		ЭлементФормы.Видимость = Ложь;
	ИначеЕсли ИмяКолонки = "Итого" Тогда	
		ЭлементФормы.Заголовок = "Ит";
		ЭлементФормы.Шрифт = Новый Шрифт(ЭлементФормы.Шрифт,,,Истина);
		ЭлементФормы.Ширина = 3;
		ЭлементФормы.МаксимальнаяШирина = 3;
	ИначеЕсли ИмяКолонки = "Отметка" Тогда	
		ЭлементФормы.Заголовок = "V";
		ЭлементФормы.Ширина = 2;
		ЭлементФормы.МаксимальнаяШирина = 2;
		ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементФормы.ТриСостояния = Истина;
		ЭлементФормы.ТолькоПросмотр = Ложь;
		ЭлементФормы.УстановитьДействие("ПриИзменении", "ИзменениеФлажкаНаПолигонах"); 
	КонецеСли;	
КонецПроцедуры	

&НаСервере
Процедура УстановкаУсловногоОформленияСпискаПолигонов()
	
	//CeHbKA #3847 24.03.2020
	//выделение заказов ДеньВДень
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами.ДоставкаДеньВДень"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение =  Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноБирюзовый);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НомерЗаказа");	
	//CeHbKA #3847 24.03.2020
	
	//подсветка без полигона
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами.ПолигонМаршрутизации"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	ЭлементОтбора.ПравоеЗначение = Справочники.ПолигоныМаршрутизации.ПустаяСсылка();
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лосось);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", истина);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами");	     
	
	//скрытие текста полигона
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами.НомерЗаказа"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;	
	ЭлементОтбора.ПравоеЗначение = Справочники.ПолигоныМаршрутизации.ПустаяСсылка();
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПолигонМаршрутизации");
	
КонецПроцедуры	

&НаСервере
Процедура УстановкаУсловногоОформленияИтогов()
	//количество немаршр. заборов
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоНемаршрутизированныхЗаборов"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;	
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", истина);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоНемаршрутизированныхЗаборов");	     
	
	//скрытие текста полигона
	//ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами.НомерЗаказа"); 
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;	
	//ЭлементОтбора.ПравоеЗначение = Справочники.ПолигоныМаршрутизации.ПустаяСсылка();
	//ЭлементОтбора.Использование = Истина;
	//
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	//
	//ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПолигонМаршрутизации");
	
КонецПроцедуры	


&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	//+Степанов Задача № 3863
	ДанныеЗаказовЗаборов = ПолучитьДанныеЗаказовЗаборов(ДатаПланирования);
	//-Степанов Задача № 3863
	
	//+Широков по письму 18.03.2021
	//При смене даты выделенные заказы оставались в массивах и закидывались в рейсы
	ОчиститьМассивы();
	//-Широков по письму 18.03.2021
	ОбновитьДанные();
КонецПроцедуры

//+Широков по письму 18.03.2021
&НаКлиенте
Процедура ОчиститьМассивы()
	//При смене даты выделенные заказы оставались в массивах и закидывались в рейсы
	//МассивПолигоновСПометками = Новый Соответствие;
	//МассивРейсовСПометками = Новый Соответствие;
	МассивПолигоновСПометками.Очистить();
	МассивРейсовСПометками.Очистить();
	
КонецПроцедуры
//-Широков по письму 18.03.2021

&НаКлиенте
Процедура РегионПриИзменении(Элемент)
	//+Степанов Задача № 3863
	ДанныеЗаказовЗаборов = ПолучитьДанныеЗаказовЗаборов(ДатаПланирования);
	//-Степанов Задача № 3863
	
	//+Широков по письму 18.03.2021
	//При смене даты выделенные заказы оставались в массивах и закидывались в рейсы
	ОчиститьМассивы();
	//-Широков по письму 18.03.2021
	
	ОбновитьДанные();
	ОбновитьПолеКарты();
	//CeHbKA #3377 20.08.2019
	ПервоначальноеЗаполнениеГруппыПолигонов(Истина);
	ИзменитьЗаголовокГруппыПолигонов();		
КонецПроцедуры

&НаКлиенте
Процедура СменаПриИзменении(Элемент)
	//CeHbKA #3179 10.06.2019
	ПолучитьДанныеОтображенияМаркеровПолигонов();	
	//CeHbKA #3179 10.06.2019
	
	//+Широков по письму 18.03.2021
	//При смене даты выделенные заказы оставались в массивах и закидывались в рейсы
	ОчиститьМассивы();
	//-Широков по письму 18.03.2021
	
	ОбновитьДанные();
КонецПроцедуры


&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Если Поле.Имя = "НомерЗаказа" Тогда
		НомерЗаказа = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа;
		Если ЗначениеЗаполнено(НомерЗаказа) И ЗначениеЗаполнено(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации) Тогда
			ОткрытьФормуПодсказкиПоЗаказу(НомерЗаказа);
		ИначеЕсли ЗначениеЗаполнено(НомерЗаказа) И Не ЗначениеЗаполнено(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации) Тогда
			ПривязатьАдресЗаказаПоНомеруЗаказа(НомерЗаказа);
		КонецЕсли;	
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодсказкиПоЗаказу(НомерЗаказа)
	
	//+Широков по письму
	//раскомментить
	Ф = ПолучитьФорму("Обработка.ПолигональныйМаршрутизатор.Форма.ФормаПодсказкиПоЗаказу");
	////Ф = ПолучитьФорму("ВнешняяОбработка.ПолигональныйМаршрутизатор.Форма.ФормаПодсказкиПоЗаказу");
	//-Широков по письму
	Ф.НомерЗаказа = НомерЗаказа;
	Ф.СхемаМаршрутизации = ПолигональнаяСхемаКарты;
	Ф.ОткрытьМодально();
	
	
КонецПроцедуры	


&НаСервере
Функция ПолучитьПервыеКоординатыПолигона(Полигон)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПолигоныМаршрутизацииТочкиПолигона.Широта КАК Широта,
	|	ПолигоныМаршрутизацииТочкиПолигона.Долгота КАК Долгота
	|ИЗ
	|	Справочник.ПолигоныМаршрутизации.ТочкиПолигона КАК ПолигоныМаршрутизацииТочкиПолигона
	|ГДЕ
	|	ПолигоныМаршрутизацииТочкиПолигона.Ссылка.Ссылка = &Полигон
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолигоныМаршрутизацииТочкиПолигона.НомерСтроки";
	Зап.УстановитьПараметр("Полигон", Полигон);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Выб.Следующий();
	Струк = Новый Структура;
	Струк.Вставить("Широта", Выб.Широта);
	Струк.Вставить("Долгота", Выб.Долгота);
	Возврат Струк;
КонецФункции	

&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиПриАктивизацииСтроки(Элемент)
	//Сообщить("Начало ДеревоПолигоновСЗаказамиПриАктивизацииСтроки " + ТекущаяДата());  //Широков
	Если Элементы.ДеревоПолигоновСЗаказами.ТекущаяСтрока = Неопределено Или Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;
	
	Если Не ЗначениеЗаполнено(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации) Тогда
		Возврат;
	КонецеСли;	
	
	//Широков 22.03.2021 по письму
	//Получаем только выделенные именно сейчас заказы
	МассивПолигоновВыделенныеСтроки.Очистить();	


	Если НЕ Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные = Неопределено Тогда
		//Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Отметка > 0 Тогда
			МассивПодчиненныеЭлементы = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьЭлементы();
			Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
				ЭлементМассива = МассивПолигоновВыделенныеСтроки[Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
				Если ЭлементМассива = Неопределено Тогда
					СтруктураЗначения = новый Структура;
					СтруктураЗначения.Вставить("НомерЗаказа",Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа);
					СтруктураЗначения.Вставить("УИД",Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.УИД);
					МассивПолигоновВыделенныеСтроки.Вставить(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор(), СтруктураЗначения);
				КонецЕсли;
			Иначе
				Для Каждого ПодчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
					ЭлементМассива = МассивПолигоновВыделенныеСтроки[ПодчиненныйЭлемент.ПолучитьИдентификатор()];
					Если ЭлементМассива = Неопределено Тогда
						Если НЕ СокрЛП(ПодчиненныйЭлемент.НомерЗаказа)="" Тогда //Широков по письму 24.03.2021
							СтруктураЗначения = новый Структура;
							СтруктураЗначения.Вставить("НомерЗаказа",ПодчиненныйЭлемент.НомерЗаказа);
							СтруктураЗначения.Вставить("УИД",ПОдчиненныйЭлемент.УИД);
							МассивПолигоновВыделенныеСтроки.Вставить(ПодчиненныйЭлемент.ПолучитьИдентификатор(), СтруктураЗначения);
						КонецЕсли; //Широков по письму 24.03.2021
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		//Иначе
		//	МассивПодчиненныеЭлементы = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьЭлементы();
		//	Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
		//		ЭлементМассива = МассивПолигоновВыделенныеСтроки[Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
		//		Если НЕ ЭлементМассива = Неопределено Тогда
		//			МассивПолигоновВыделенныеСтроки.Удалить(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор());
		//		КонецЕсли;
		//	Иначе
		//		Для Каждого ПОдчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
		//			ЭлементМассива = МассивПолигоновВыделенныеСтроки[ПОдчиненныйЭлемент.ПолучитьИдентификатор()];
		//			Если НЕ ЭлементМассива = Неопределено Тогда
		//				//						МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ);
		//				МассивПолигоновВыделенныеСтроки.Удалить(ПОдчиненныйЭлемент.ПолучитьИдентификатор());
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;	
	
	//Широков 22.03.2021 по письму
	
	
	
	////////////Элементы.ДеревоПолигоновСЗаказамиКонтекстноеМенюПолигонПроверен.Пометка = Элементы.ДеревоПолигонСЗаказами.ТекущиеДанные.ДокументПроверен;
	//Координаты = ПолучитьПервыеКоординатыПолигона(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации);
	//CeHbKA #3419 	29.08.2019
	////НайденныеСтроки = ТаблицаПолигоновИКоординат.НайтиСтроки(Новый Структура("Полигон", Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации));
	//////Сообщить("ТаблицаПолигоновИКоординат.НайтиСтроки " + ТекущаяДата());  //Широков
	////
	////ЕстьКоординаты = Ложь;
	////Для каждого ТекСтрокаКоординаты Из НайденныеСтроки Цикл
	////	Координаты = Новый Структура("Широта, Долгота");
	////	ЗаполнитьЗначенияСвойств(Координаты, ТекСтрокаКоординаты);
	////	ЕстьКоординаты = Истина;
	////КонецЦикла; 
	////
	////Если НЕ ЕстьКоординаты Тогда
	////	Возврат;	
	////КонецЕсли; 
	//////CeHbKA #3419 	29.08.2019
	////
	////ВызовФункции = "MapUtils.ClickBallon(" + Формат(Координаты.Широта, "ЧРД=.; ЧГ=") + ", " + Формат(Координаты.Долгота, "ЧРД=.; ЧГ=") + ")";    
	//////ВызовФункции = "MapUtils.ClickBallon(55.9871135186000, 37.4463958528000)";
	//////Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//////	Элементы.ПолеXTML.Документ.parentWindow.evalValue = ВызовФункции;
	//////Иначе	
	//////	Элементы.ПолеXTML.Документ.parentWindow.eval(ВызовФункции);
	//////КонецеСли;
	////ВыполнитьСкрипт(ВызовФункции);
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьПодсказкуПоЗаказуИзДереваПолигонов(Команда)
	НомерЗаказа = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа;
	Если ЗначениеЗаполнено(НомерЗаказа) Тогда
		ОткрытьФормуПодсказкиПоЗаказу(НомерЗаказа);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаказИТочкуДоставкиПоНомеруЗаказа(НомерЗаказа)
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	новаМестнаяДоставка.ТочкаПрибытия КАК ТочкаДоставки,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	новаМестнаяДоставка.ТочкаПрибытия.Наименование КАК ТочкаПрибытияНаименование,
	|	новаМестнаяДоставка.ТочкаПрибытия.АдресИзЯндекса КАК ТочкаПрибытияАдресИзЯндекса,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК ТочкаПрибытияАдресНаименование,
	|	новаМестнаяДоставка.Ссылка КАК Доставка,
	|	новаМестнаяДоставка.ТочкаОтправления КАК ТочкаОтправления
	|ИЗ
	|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	|ГДЕ
	|	новаМестнаяДоставка.Номер = &Номер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаборТовара.ТочкаДоставки,
	|	ЗаборТовара.Ссылка,
	|	ЗаборТовара.ТочкаДоставки.Наименование,
	|	ЗаборТовара.ТочкаДоставки.АдресИзЯндекса,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Наименование,
	|	NULL,                                  
	|	ЗаборТовара.ТерминалДоставки.Склад.ТочкаДоставки
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Номер = &Номер";
	Зап.УстановитьПараметр("Номер", НомерЗаказа);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Струк = Новый Структура;
		
		Струк.Вставить("ТочкаДоставки", Выб.ТочкаДоставки);
		Струк.Вставить("Заказ", Выб.Заказ);
		Струк.Вставить("ТочкаПрибытияНаименование", Выб.ТочкаПрибытияНаименование);
		Струк.Вставить("ТочкаПрибытияАдресИзЯндекса", Выб.ТочкаПрибытияАдресИзЯндекса);
		Струк.Вставить("ТочкаПрибытияАдресНаименование", Выб.ТочкаПрибытияАдресНаименование);
		Струк.Вставить("Доставка", Выб.Доставка);
		Струк.Вставить("ТочкаОтправления", Выб.ТочкаОтправления);
		
		Возврат Струк;
	Иначе
		Возврат Неопределено;
	КонецеСли;	
КонецФункции	

&НаКлиенте
Процедура ПривязатьАдресЗаказа(Команда)
	Если Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа) Тогда
		Возврат;
	КонецеСли;	
	ПривязатьАдресЗаказаПоНомеруЗаказа(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа);
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьАдресЗаказаПоНомеруЗаказа(НомерЗаказа, ВызовИзДереваРейсов = Ложь) 
	СтрукВозврата = ПолучитьЗаказИТочкуДоставкиПоНомеруЗаказа(НомерЗаказа);
	
	Если СтрукВозврата = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	ТочкаДоставки = СтрукВозврата.ТочкаДоставки;
	
	Заказ = СтрукВозврата.Заказ;
	
	ТекущиеДанные = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные; 
	
	//+Степанов условие на случай пустого дерева полигонов. Зачем нужны мОтбор и развернут - непонятно. 
	Если ТекущиеДанные <> Неопределено Тогда 
		Развернут = Элементы.ДеревоПолигоновСЗаказами.Развернут(ТекущиеДанные.ПолучитьИдентификатор());
		мОтбор = Новый Структура(); //запомнили 
		мОтбор.Вставить("ПолигонМаршрутизации", ТекущиеДанные.ПолигонМаршрутизации);
		мОтбор.Вставить("Номерзаказа", ТекущиеДанные.НомерЗаказа);
	КонецЕсли;	
	//-Степанов
	
	//УправляемыеФормы Якурнов 11.07.2018 15:41:21
	
	ТекущийЗаказ = СтрукВозврата.Заказ;
	ТекущаяТочкаПрибытия = СтрукВозврата.ТочкаДоставки;
	ТекущаяДоставка = СтрукВозврата.Доставка;
	ТекущаяТочкаОтправления = СтрукВозврата.ТочкаОтправления;
	
	СтрПараметров = Новый Структура;
	Если Не ЗначениеЗаполнено(СтрукВозврата.ТочкаПрибытияАдресНаименование) Тогда
		СтрПараметров.Вставить("Адрес",СтрукВозврата.ТочкаПрибытияНаименование);
	Иначе
		СтрПараметров.Вставить("Адрес",СтрукВозврата.ТочкаПрибытияАдресНаименование);
	КонецЕсли;
	
	//+Степанов Номер заказа для DaData.
	СтрПараметров.Вставить("НомерЗаказа",НомерЗаказа);
	Если ВызовИзДереваРейсов Тогда
		СтрПараметров.Вставить("ВызовИзДереваРейсов");
	КонецЕсли;	
	//-Степанов
	//-Степанов
		//+Широков Задача 4369 
		СтрПараметров.Вставить("РежимИзмененияАдресаЗаказа");
	//-Широков Задача 4369 
	ОткрытьФорму("Обработка.новаПоискАдреса.Форма.ФормаУпр",СтрПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры	

&НаКлиенте
Процедура ПоискЗаказаВПолигонахПриИзменении(Элемент)
	Если СокрЛП(ПоискЗаказаВПолигонах) = "" Тогда
		Возврат;
	КонецеСли;	
	мОтбор = Новый Структура(); //запомнили 
	мОтбор.Вставить("НомерЗаказа", ПоискЗаказаВПолигонах);
	
	ИдентификаторСтроки = 0; 
	ПрекратитьПоиск = Ложь; 
	НайтиСтрокуДерева(ДеревоПолигоновСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск, Истина); 
	Если ПрекратитьПоиск Тогда
		Элементы.ДеревоПолигоновСЗаказами.ТекущаяСтрока = ИдентификаторСтроки; 	
		Сообщить("Поиск завершен!");
		ПоискЗаказаВПолигонах = "";
	Иначе
		Сообщить("Заказ не найден!", СтатусСообщения.ОченьВажное);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаФлаговПолигоны(Команда)
	// Вставить содержимое обработчика.
	ПростановкаФлаговВДеревьях("ДеревоПолигоновСЗаказами", 0);
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	МассивПолигоновСПометками.Очистить();  //Широков 09.04.2021 по письму
КонецПроцедуры

&НаКлиенте
Процедура ПростановкаФлаговПолигоны(Команда)
	ПростановкаФлаговВДеревьях("ДеревоПолигоновСЗаказами", 1);
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	//+Широков 09.04.2021 по письму
	ОбновитьМассивПолигоновСПометками();
	//-Широков 09.04.2021 по письму

КонецПроцедуры

//+Широков 09.04.2021 по письму
&НаКлиенте
Процедура ОбновитьМассивПолигоновСПометками()
	МассивПолигоновСПометками.Очистить();
	Для Каждого Тек Из ДеревоПолигоновСЗаказами.ПолучитьЭлементы() Цикл
		МассивПодчиненныеЭлементы = Тек.ПолучитьЭлементы();
		Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
			ЭлементМассива = МассивПолигоновСПометками[Тек.ПолучитьИдентификатор()];
			Если ЭлементМассива = Неопределено Тогда
				СтруктураЗначения = новый Структура;
				СтруктураЗначения.Вставить("НомерЗаказа",Тек.НомерЗаказа);
				СтруктураЗначения.Вставить("УИД",Тек.УИД);
				МассивПолигоновСПометками.Вставить(Тек.ПолучитьИдентификатор(), СтруктураЗначения);
			КонецЕсли;
		Иначе
			Для Каждого ПодчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
				ЭлементМассива = МассивПолигоновСПометками[ПодчиненныйЭлемент.ПолучитьИдентификатор()];
				Если ЭлементМассива = Неопределено Тогда
					СтруктураЗначения = новый Структура;
					СтруктураЗначения.Вставить("НомерЗаказа",ПодчиненныйЭлемент.НомерЗаказа);
					СтруктураЗначения.Вставить("УИД",ПодчиненныйЭлемент.УИД);
					МассивПолигоновСПометками.Вставить(ПодчиненныйЭлемент.ПолучитьИдентификатор(), СтруктураЗначения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьМассивРейсовСПометками()
	МассивРейсовСПометками.Очистить();
	Для Каждого Тек Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
		МассивПодчиненныеЭлементы = Тек.ПолучитьЭлементы();
		Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
			ЭлементМассива = МассивРейсовСПометками[Тек.ПолучитьИдентификатор()];
			Если ЭлементМассива = Неопределено Тогда
				СтруктураЗначения = новый Структура;
				СтруктураЗначения.Вставить("НомерЗаказа",Тек.НомерЗаказа);
				СтруктураЗначения.Вставить("УИД",Тек.УИД);
				МассивРейсовСПометками.Вставить(Тек.ПолучитьИдентификатор(), СтруктураЗначения);
			КонецЕсли;
		Иначе
			Для Каждого ПодчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
				ЭлементМассива = МассивРейсовСПометками[ПодчиненныйЭлемент.ПолучитьИдентификатор()];
				Если ЭлементМассива = Неопределено Тогда
					СтруктураЗначения = новый Структура;
					СтруктураЗначения.Вставить("НомерЗаказа",ПодчиненныйЭлемент.НомерЗаказа);
					СтруктураЗначения.Вставить("УИД",ПодчиненныйЭлемент.УИД);
					МассивРейсовСПометками.Вставить(ПодчиненныйЭлемент.ПолучитьИдентификатор(), СтруктураЗначения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
//-Широков 09.04.2021 по письму


&НаСервере
Функция ПолучитьПолигонПоИмени(ИмяПолигона)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПолигоныМаршрутизации.Ссылка КАК Полигон
	|ИЗ
	|	Справочник.ПолигоныМаршрутизации КАК ПолигоныМаршрутизации
	|ГДЕ
	|	ПолигоныМаршрутизации.Наименование ПОДОБНО &Наименование
	|	И ПолигоныМаршрутизации.Владелец = &СхемаМаршрутизации";
	Зап.УстановитьПараметр("Наименование", ИмяПолигона + "%");
	Зап.УстановитьПараметр("СхемаМаршрутизации", ПолигональнаяСхемаКарты);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Полигон;
	Иначе
		Возврат Неопределено;
	КонецеСли;	
КонецФункции
#КонецОбласти 


#Область РаботаСФлажкамиТриСостояния
&НаКлиенте
Процедура ИзменениеФлажкаНаПолигонах(Элемент)
	ИДТекущейСтроки = Элементы["ДеревоПолигоновСЗаказами"].ТекущаяСтрока;
	
	Если ИДТекущейСтроки <> Неопределено Тогда
		
		ЭлементКоллекции = ЭтаФорма["ДеревоПолигоновСЗаказами"].НайтиПоИдентификатору(
		ИДТекущейСтроки);
		
		Если ЭлементКоллекции.Отметка = 2 Тогда
			ЭлементКоллекции.Отметка = 0;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.УИД) И ЭлементКоллекции.Отметка = 0 Тогда
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(ЭлементКоллекции.УИД);
		КонецеСли;	
		
		
		УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Отметка);
		
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
		Пока Родитель <> Неопределено Цикл
			Родитель.Отметка = ?(УстановленоДляВсех(ЭлементКоллекции),
			ЭлементКоллекции.Отметка, 2);
			ЭлементКоллекции = Родитель;
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
		КонецЦикла;
		
	КонецЕсли;	
	
	// Якурнов 30.10.2018 12:47:47  
	Если Объект.АвтообновлениеКартыПриВыделенииЗаказов Тогда
		//Широков 14.09.2020
		//Отмечаем флажком в дереве полигонов
		//Перерисовывать дерево заказов ни к чему
		//		ОтобразитьВсеВыделенныеТочкиНаКарте();
		//Широков 16.10.2020
		//ДанныеЗаказовЗаборов = ПолучитьДанныеЗаказовЗаборов(ДатаПланирования);
		
		ОтобразитьВсеВыделенныеТочкиНаКартеТолькоПолигоны();
		//Широков 14.09.2020
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)
	
	ПодчинЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из ПодчинЭлементы Цикл
		ТекЭлемент.Отметка = ЗначениеПометки;
		Если ЗначениеЗаполнено(ТекЭлемент.УИД) И ЗначениеПометки = 0 Тогда
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(ТекЭлемент.УИД);
		КонецеСли;	
		УстановкаФлажков(ТекЭлемент, ТекЭлемент.Отметка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УстановленоДляВсех(ЭлементКоллекции)
	
	СоседниеЭлементы = ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
		Если ТекЭлемент.Отметка <> ЭлементКоллекции.Отметка Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции  
#КонецОбласти


#Область ОбщиеПроцедурыРаботыСДеревом
&НаСервере
Процедура ЗаполнитьИдентификаторыВДереве(НазваниеДерева)
	Дерево = РеквизитФормыВЗначение(НазваниеДерева, Тип("ДеревоЗначений"));
	
	Для Каждого ТекПолигон Из Дерево.Строки Цикл
		Для Каждого ТекЗаказ Из ТекПолигон.Строки Цикл
			Если Не ЗначениеЗаполнено(ТекЗаказ.ЗаказСсылка) Тогда
				Продолжить;
			КонецеСли;	
			
			ТекЗаказ.УИД = Строка(ТекЗаказ.ЗаказСсылка.УникальныйИдентификатор());
		КонецЦикла;
		ТекПолигон.НомерЗаказа = "";
	КонецЦикла;	
	ЗначениеВРеквизитФормы(Дерево, НазваниеДерева);
	
КонецПроцедуры

&НаКлиенте 
Процедура НайтиСтрокуДерева(КоллекцияЭлементовДерева, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск, ИскатьТолькоПоНомеруЗаказа = Ложь) 
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
		Если ПрекратитьПоиск Тогда 
			Возврат; 
		КонецЕсли; 
		
		Если Не ИскатьТолькоПоНомеруЗаказа Тогда
			Если СтрокаДерева.ПолигонМаршрутизации = ТекущиеДанные.ПолигонМаршрутизации И СокрЛП(СтрокаДерева.НомерЗаказа) = СокРЛП(ТекущиеДанные.НомерЗаказа) Тогда 
				ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
				ПрекратитьПоиск = Истина; 
				Возврат; 
			КонецЕсли; 
		Иначе
			Если СокрЛП(СтрокаДерева.НомерЗаказа) = СокрЛП(ТекущиеДанные.НомерЗаказа) Тогда 
				ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
				ПрекратитьПоиск = Истина; 
				Возврат; 
			КонецЕсли; 
		КонецеСли;	
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы(); 
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда 
			НайтиСтрокуДерева(КоллекцияЭлементов, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск, ИскатьТолькоПоНомеруЗаказа); 
		КонецЕсли; 
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте 
Процедура НайтиСтрокуДереваИУстановитьФлаг(КоллекцияЭлементовДерева, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск) 
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
		Если ПрекратитьПоиск Тогда 
			Возврат; 
		КонецЕсли; 
		
		Если СтрокаДерева.УИД = ТекущиеДанные.УИД Тогда 
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
			СтрокаДерева.Отметка = 1;
			ПрекратитьПоиск = Истина; 
			Возврат; 
		КонецЕсли; 
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы(); 
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда 
			НайтиСтрокуДереваИУстановитьФлаг(КоллекцияЭлементов, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск); 
		КонецЕсли; 
	КонецЦикла; 	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФиксацияВыделенныхСтрокВДереве(ДанныеФормыДерево, ИмяДерева, СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек)
	//Дерево = РеквизитФормыВЗначение(ИмяДерева, Тип("ДеревоЗначений"));
	Дерево = ДанныеФормыВЗначение(ДанныеФормыДерево, Тип("ДеревоЗначений"));
	Если Дерево.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецеСли;	
	Если ИмяДерева = "ДеревоПолигоновСЗаказами" Тогда
		НомерДерева = 1;
	ИначеЕсли ИмяДерева = "ДеревоРейсовСЗаказами" Тогда	
		НомерДерева = 2;
	КонецеСли;	
	
	Струк = Новый Структура;
	Струк.Вставить("НомерДерева", НомерДерева);
	
	НайСтроки = СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.НайтиСтроки(Струк);
	Для Каждого Тек Из НайСтроки Цикл
		СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.Удалить(Тек);
	КонецЦикла;	                                                                                                                                       
	
	
	Струк = Новый Структура;
	
	Струк.Вставить("Отметка", 1);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
	
	Для Каждого Тек Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(Тек.УИД) Тогда
			Продолжить;
		КонецеСли;
		
		Нов = СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.Добавить();
		Нов.УИД = Тек.УИД;
		Нов.НомерДерева = НомерДерева;
		Нов.НомерЗаказа = Тек.НомерЗаказа;
		Если Тек.ЗБ = 1 Тогда
			Нов.ТипЗаказа = 2;
		Иначе
			Нов.ТипЗаказа = 1;
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ФиксацияВыделенныхСтрокВДеревьях()
	ФиксацияВыделенныхСтрокВДереве(ДеревоПолигоновСЗаказами, "ДеревоПолигоновСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
	ФиксацияВыделенныхСтрокВДереве(ДеревоРейсовСЗаказами, "ДеревоРейсовСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
КонецПроцедуры	

&НаКлиенте
Процедура ВосстановитьВыделениеСтрокВДеревьях(ВыделенныйНомерДерева)
	Если СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.Количество() = 0 Тогда
		Возврат;
	КонецеСли;
	БылоДеревоПолигонов = Ложь;
	БылоДеревоРейсов = Ложь;
	Для Каждого Тек Из СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек Цикл
		Если ВыделенныйНомерДерева <> Тек.НомерДерева Тогда
			Продолжить;
		КонецеСли;	
		мОтбор = Новый Структура(); //запомнили 
		мОтбор.Вставить("УИД", Тек.УИД);
		
		ИдентификаторСтроки = 0; 
		ПрекратитьПоиск = Ложь; 
		Если Тек.НомерДерева = 1 Тогда
			НайтиСтрокуДереваИУстановитьФлаг(ДеревоПолигоновСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск); 
			БылоДеревоПолигонов = Истина;
		Иначе
			НайтиСтрокуДереваИУстановитьФлаг(ДеревоРейсовСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск); 
			БылоДеревоРейсов = Истина;
		КонецеСли;
		Если Не ПрекратитьПоиск Тогда
			
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКартеНаСервере(Тек.УИД);
		КонецеСли;	
	КонецЦикла;
	
	Если БылоДеревоПолигонов Тогда
		ИнициализацияРодительскихФлажков("ДеревоПолигоновСЗаказами");
	КонецеСли;	
	
	Если БылоДеревоРейсов Тогда
		ИнициализацияРодительскихФлажков("ДеревоРейсовСЗаказами");
	КонецеСли;
	//СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.Очистить();
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры	

&НаКлиенте
Процедура ИнициализацияРодительскихФлажков(Дерево)
	ЭлементыПервогоУровня = ЭтаФорма[Дерево].ПолучитьЭлементы();		
	Для Каждого ЭлементКоллекцииПУ Из ЭлементыПервогоУровня Цикл		
		ЭлементыВУ = ЭлементКоллекцииПУ.ПолучитьЭлементы();		
		Для Каждого ЭлементКоллекции Из ЭлементыВУ Цикл
			
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
			
			Пока Родитель <> Неопределено Цикл
				Родитель.Отметка = ?(УстановленоДляВсех(ЭлементКоллекции),
				ЭлементКоллекции.Отметка, 2);
				ЭлементКоллекции = Родитель;
				Родитель = ЭлементКоллекции.ПолучитьРодителя();
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

//Широков
&НаСервере
Процедура УдалитьСтрокиИзДереваСервер(МассивЗначений, ИмяРеквизитаДерева)
	//Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
	Если ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		Дерево = ДанныеФормыВЗначение(ДеревоРейсовСЗаказами, Тип("ДеревоЗначений"));
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда	
		Дерево = ДанныеФормыВЗначение(ДеревоПолигоновСЗаказами, Тип("ДеревоЗначений"));
	КонецЕсли;	
	
	ТабРод = Новый ТаблицаЗначений;
	ТабРод.Колонки.Добавить("Родитель");
	ТабРод.Колонки.Добавить("Количество");
	
	Для Каждого Тек Из МассивЗначений Цикл
		Струк = Новый Структура;
		Струк.Вставить("ЗаказСсылка", Тек.Заказ);
		
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
		Для Каждого Стр Из НайденныеСтроки Цикл
			Нов = ТабРод.Добавить();
			Нов.Родитель = Стр.Родитель;
			Нов.Количество = 1;
			
			Стр.Родитель.Строки.Удалить(Стр);
		КонецЦикла;	
	КонецЦикла;
	
	Если ИмяРеквизитаДерева <> "ДеревоРейсовСЗаказами" Тогда
		ТабРод.Свернуть("Родитель", "Количество");
		Для Каждого Тек Из ТабРод Цикл
			Если Тек.Родитель.Отметка = 1 И Тек.Родитель.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Тек.Родитель);
			Иначе
				Тек.Родитель.Отметка = 0;
				Тек.Родитель.Итого = Тек.Родитель.Итого - Тек.Количество;
			КонецеСли;	
			ПересчитатьИтогПоСтрокеДерева(Тек.Родитель);
		КонецЦикла;	
	Иначе
		ТабРод.Свернуть("Родитель", "Количество");
		Для Каждого Тек Из ТабРод Цикл
			Если Тек.Родитель.Отметка = 1 И Тек.Родитель.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Тек.Родитель);
			Иначе
				Тек.Родитель.Отметка = 0;
				Тек.Родитель.Итого = Тек.Родитель.Итого - Тек.Количество;
			КонецеСли;
			ПересчитатьИтогПоСтрокеДерева(Тек.Родитель);
		КонецЦикла;			
	КонецЕсли;
	
	//ЗначениеВРеквизитФормы(Дерево, ИмяРеквизитаДерева);
	
	Если ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		//Дерево = ДанныеФормыВЗначение(ДеревоРейсовСЗаказами, Тип("ДеревоЗначений"));
		ЗначениеВДанныеФормы(Дерево, ДеревоРейсовСЗаказами);
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда	
		//Дерево = ДанныеФормыВЗначение(ДеревоПолигоновСЗаказами, Тип("ДеревоЗначений"));
		ЗначениеВДанныеФормы(Дерево, ДеревоПолигоновСЗаказами);
	КонецЕсли;	
	
	СписокВыделенныхТочекНаКарте.Очистить();
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьСтрокиИзДерева(МассивЗначений, ИмяРеквизитаДерева)
	//Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
	Если ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		//Дерево = ДанныеФормыВЗначение(ДеревоРейсовСЗаказами, Тип("ДеревоЗначений"));
		Дерево = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда	
		//Дерево = ДанныеФормыВЗначение(ДеревоПолигоновСЗаказами, Тип("ДеревоЗначений"));
		Дерево = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
		//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(
	КонецЕсли;	
	
	Для Каждого Тек Из МассивЗначений Цикл
		
		//НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
		СтрокаРейса = Неопределено;
		//Идем по группировкам дерева
		Для каждого СтрокаРейсГруппа Из Дерево Цикл
			//Идем по элементам группировки
			ЕстьПересчетИтогов = Ложь;
			Для каждого Стр ИЗ СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
				Попытка
					Если ТипЗнч(Тек) = Тип("Структура") Тогда
						Если Стр.ЗаказСсылка =  Тек.Заказ Тогда
							СтрокаРейсГруппа.ПолучитьЭлементы().Удалить(Стр);
							ЕстьПересчетИтогов = Истина;
						КонецЕсли; 
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЦикла;
			Если ЕстьПересчетИтогов Тогда
				
				
				//ПересчитатьИтогПоСтрокеДерева(СтрокаРейсГруппа);
				
				//Широков 16.09.2020
				ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
					//						СтрокаРейсГруппа.
					Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
						//СтрокаРейсГруппа[СтрокаИмяКолонки] = СтрокаРейсГруппа[СтрокаИмяКолонки] + Тек[СтрокаИмяКолонки];
						Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	Для каждого СтрокаРейсГруппа Из Дерево Цикл
		//Идем по элементам группировки
		Если СтрокаРейсГруппа.ПолучитьЭлементы().Количество() = 0 Тогда
			Дерево.Удалить(СтрокаРейсГруппа);
		КонецЕсли;
	КонецЦикла;
	
	СписокВыделенныхТочекНаКарте.Очистить();
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьСтрокиИзДереваПоОтметкам(МассивЗначений, ИмяРеквизитаДерева)
	//Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
	Если ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		//Дерево = ДанныеФормыВЗначение(ДеревоРейсовСЗаказами, Тип("ДеревоЗначений"));
		Дерево = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда	
		//Дерево = ДанныеФормыВЗначение(ДеревоПолигоновСЗаказами, Тип("ДеревоЗначений"));
		Дерево = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
		//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(
	КонецЕсли;	
	
	Для Каждого Тек Из МассивЗначений Цикл
		
		СтрокаРейса = Неопределено;
		//Идем по группировкам дерева
		Для каждого СтрокаРейсГруппа Из Дерево Цикл
			//Идем по элементам группировки
			ЕстьПересчетИтогов = Ложь;
			Для каждого Стр ИЗ СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
				Попытка
					Если ТипЗнч(Тек) = Тип("Структура") Тогда
						Если Стр.Отметка = 1 Тогда
							СтрокаРейсГруппа.ПолучитьЭлементы().Удалить(Стр);
							ЕстьПересчетИтогов = Истина;
						КонецЕсли; 
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЦикла;
			Если ЕстьПересчетИтогов Тогда
				
				
				
				//Широков 16.09.2020 по письму
				ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
					Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
						Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	Для каждого СтрокаРейсГруппа Из Дерево Цикл
		//Идем по элементам группировки
		Если СтрокаРейсГруппа.ПолучитьЭлементы().Количество() = 0 Тогда
			Дерево.Удалить(СтрокаРейсГруппа);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокВыделенныхТочекНаКарте.Очистить();
КонецПроцедуры	

&НаСервере
Функция СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок()
	Выб = ПолигональнаяМаршрутизацияСервер.ВыполнитьЗапросПоКолонкамБрейков(СхемаЛогистическихБрейков);
	
	Таб = Новый СписокЗначений;
	
	Стр = "";
	Пока Выб.Следующий() Цикл
		НазваниеКолонки = СтрЗаменить(Выб.НазваниеКолонки, " ", "");
		Таб.Добавить(НазваниеКолонки);
	КонецЦикла;
	Возврат Таб;
КонецФункции	

//Широков по письму

//+Степанов Задача № 3863 Добавлен параметр данные документов
&НаСервере
Функция ПодготовитьСписокВыбранныхЗаказовДереваСервер(ИмяРеквизитаДерева, МассивПереданныхНомеров = Неопределено, ДанныеДокументов)
	Если МассивПереданныхНомеров = Неопределено Тогда
		Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
		
		//дерево еще не сформировалось в фоне
		Если Дерево.Колонки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецеСли;	
		
		Струк = Новый Структура;
		Струк.Вставить("Отметка", 1);
		
		МассивНомеров = Новый Массив;
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
		Для Каждого Тек Из НайденныеСтроки Цикл
			Если Тек.Родитель = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			Если Не ЗначениеЗаполнено(Тек.НомерЗаказа) Тогда
				Продолжить;
			КонецеСли;	
			МассивНомеров.Добавить(Тек.НомерЗаказа);
		КонецЦикла;
	Иначе
		МассивНомеров = МассивПереданныхНомеров;
		//+Широков по письму
		Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
		
		//дерево еще не сформировалось в фоне
		Если Дерево.Колонки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецеСли;	
		
		Струк = Новый Структура;
		Струк.Вставить("Отметка", 1);
		
		//МассивНомеров = Новый Массив;     //Широков
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
		
		//-Широков по письму
	КонецеСли;
	
	//+Степанов Задача № 3863 Получаем данные без запроса из переменной модуля
	Если МассивНомеров.Количество() <> 0 Тогда
		//	
		//	Струк.ИдентификаторЗаказа = Выб.Заказ.УникальныйИдентификатор();
		МассивВозврата = Новый Массив;
		Для Каждого НомерДокумента Из МассивНомеров Цикл 
			//Широков по письму
			//ДанныеДокумента = ДанныеДокументов.Получить(НомерДокумента);
			ДанныеДокумента = ДанныеДокументов.Получить(СокрЛП(НомерДокумента));
			//Широков по письму
			Если ДанныеДокумента <> Неопределено Тогда
				//+Широков по письму
				Для Каждого Тек Из НайденныеСтроки Цикл
					//Для Каждого Тек Из ДанныеДокумента Цикл
					//-Широков по письму
					Если Тек.Родитель = Неопределено Тогда
						Продолжить;
					КонецеСли;	
					Если Не ЗначениеЗаполнено(Тек.НомерЗаказа) Тогда
						Продолжить;
					КонецеСли;	
					
					Если Тек.НомерЗаказа <> ДанныеДокумента.НомерЗаказа Тогда
						Продолжить;
					КонецЕсли; 
					
					ДанныеДокумента.Вставить("ИндексРодителя",Дерево.Строки.Индекс(Тек.Родитель));
					ДанныеДокумента.Вставить("Индекс", Тек.Родитель.Строки.Индекс(Тек));
				КонецЦикла;
				
				ДанныеДокумента.Вставить("ИмяРеквизитаДерева",ИмяРеквизитаДерева);
				МассивВозврата.Добавить(ДанныеДокумента);
			КонецЕсли;
		КонецЦикла;	
		
		Возврат МассивВозврата;
	КонецеСли;
	Возврат Неопределено;
КонецФункции	

//Широков по письму
&НаКлиенте
Функция ПодготовитьСписокВыбранныхЗаказовДерева(ИмяРеквизитаДерева, МассивПереданныхНомеров = Неопределено, ДанныеДокументов)
	Если ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		Дерево = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда	
		Дерево = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
	КонецЕсли;	
	
	Если МассивПереданныхНомеров = Неопределено Тогда
		//дерево еще не сформировалось в фоне
		Если Дерево.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецеСли;	
		
		МассивНомеров = Новый Массив;
		НайденныеСтроки = Новый Массив;
		Для Каждого ТекГруппа Из Дерево Цикл
			Для Каждого Тек Из ТекГруппа.ПолучитьЭлементы() Цикл
				Если НЕ Тек.Отметка = 0 Тогда
					Если (Не ЗначениеЗаполнено(Тек.НомерЗаказа)) И (ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами") Тогда
						Продолжить;
					КонецеСли;	
					МассивНомеров.Добавить(Тек.НомерЗаказа);
					СтруктураН = Новый Структура;
					СтруктураН.Вставить("Тек",Тек);
					СтруктураН.Вставить("НашИдентификатор",Тек.ПолучитьИдентификатор());
					СтруктураН.Вставить("НашИдентификаторГруппы",ТекГруппа.ПолучитьИдентификатор());
					НайденныеСтроки.Добавить(СтруктураН);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		МассивНомеров = МассивПереданныхНомеров;
		//дерево еще не сформировалось в фоне
		Если Дерево.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецеСли;	
		НайденныеСтроки = Новый Массив;
		
		Для Каждого ТекГруппа Из Дерево Цикл
			Для Каждого Тек Из ТекГруппа.ПолучитьЭлементы() Цикл
				Если НЕ Тек.Отметка = 0 Тогда
					СтруктураН = Новый Структура;
					СтруктураН.Вставить("Тек",Тек);
					СтруктураН.Вставить("НашИдентификатор",Тек.ПолучитьИдентификатор());
					СтруктураН.Вставить("НашИдентификаторГруппы",ТекГруппа.ПолучитьИдентификатор());
					НайденныеСтроки.Добавить(СтруктураН);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецеСли;
	
	//+Степанов Задача № 3863 Получаем данные без запроса из переменной модуля
	Если МассивНомеров.Количество() <> 0 Тогда
		МассивВозврата = Новый Массив;
		Для Каждого НомерДокумента Из МассивНомеров Цикл 
			ДанныеДокумента = ДанныеДокументов.Получить(СокрЛП(НомерДокумента));
			Если ДанныеДокумента = Неопределено Тогда
				//Для Каждого СтрДанныеДокумента ИЗ ДанныеДокументов Цикл
				//	Если СокрЛП(ДанныеДокумента.НомерДокумента) = СокрЛП(НомерДокумента) Тогда
				//								ДанныеДокумента = СтрДанныеДокумента ;
				//		Прервать;
				//	КонецЕсли;
				//КонецЦикла;
			КонецЕсли;
			
			Стр11 = Объект.ТзТест.Добавить();
			Стр11.РеквизитНомер = НомерДокумента;
			Если ДанныеДокумента <> Неопределено Тогда
				Для Каждого Тек Из НайденныеСтроки Цикл
					//-Широков по письму
					//Если Тек.Родитель = Неопределено Тогда
					//	Продолжить;
					//КонецеСли;	
					
					Если Не ЗначениеЗаполнено(Тек.Тек.НомерЗаказа) Тогда
						Продолжить;
					КонецеСли;	
					
					//Если Тек.Тек.НомерЗаказа <> ДанныеДокумента.НомерЗаказа Тогда
					Если СокрЛП(Тек.Тек.НомерЗаказа) <> СокрЛП(ДанныеДокумента.НомерЗаказа) Тогда
						Продолжить;
					КонецЕсли; 
					
					//ДанныеДокумента.Вставить("ИндексРодителя",Дерево.Строки.Индекс(Тек.Родитель));
					//ДанныеДокумента.Вставить("Индекс", Тек.Родитель.Строки.Индекс(Тек));
					ДанныеДокумента.Вставить("ИндексРодителя",Дерево.Индекс(ТекГруппа));
					ДанныеДокумента.Вставить("Индекс", Дерево.Индекс(Тек.Тек));
					ДанныеДокумента.Вставить("НашИдентификатор", Тек.НашИдентификатор);
					ДанныеДокумента.Вставить("НашИдентификаторГруппы", Тек.НашИдентификаторГруппы);
					Прервать;
				КонецЦикла;
				
				ДанныеДокумента.Вставить("ИмяРеквизитаДерева",ИмяРеквизитаДерева);
				МассивВозврата.Добавить(ДанныеДокумента);
			КонецЕсли;
		КонецЦикла;	
		
		Возврат МассивВозврата;
	КонецеСли;
	Возврат Неопределено;
КонецФункции	
//Широков по письму


//+Широков по письму
&НаСервере
Функция ПодготовитьСписокВыбранныхЗаказовДереваFast(ИмяРеквизитаДерева, МассивПереданныхНомеров = Неопределено)
	Если МассивПереданныхНомеров = Неопределено Тогда
		Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
		
		//дерево еще не сформировалось в фоне
		Если Дерево.Колонки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецеСли;	
		
		Струк = Новый Структура;
		Струк.Вставить("Отметка", 1);
		
		МассивНомеров = Новый Массив;
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
		Для Каждого Тек Из НайденныеСтроки Цикл
			Если Тек.Родитель = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			Если Не ЗначениеЗаполнено(Тек.НомерЗаказа) Тогда
				Продолжить;
			КонецеСли;	
			МассивНомеров.Добавить(Тек.НомерЗаказа);
		КонецЦикла;
	Иначе
		//+Широков по письму
		Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
		
		//дерево еще не сформировалось в фоне
		Если Дерево.Колонки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецеСли;	
		
		Струк = Новый Структура;
		Струк.Вставить("Отметка", 1);
		
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
		//-Широков по письму
		МассивНомеров = МассивПереданныхНомеров;
	КонецеСли;
	
	Если МассивНомеров.Количество() <> 0 Тогда
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	1 КАК ТипЗаказа,
		|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
		|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
		|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
		|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
		|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
		|	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК КонтрагентНаименование,
		|	новаМестнаяДоставка.ВремяПрибытияС КАК ВремяПрибытияС,
		|	новаМестнаяДоставка.ВремяПрибытияПо КАК ВремяПрибытияПо,
		|	РеализацияТоваровУслуг.ОбщийВес КАК ВесогабаритныйПоказатель
		|ИЗ
		|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслуг.Номер В(&МасНомеров)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаборТовара.Ссылка,
		|	2,
		|	ЗаборТовара.Номер,
		|	ЗаборТовара.НомерВнешнегоЗаказа,
		|	ЗаборТовара.ТочкаДоставки.Адрес.Наименование,
		|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
		|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
		|	ЗаборТовара.Контрагент.Наименование,
		|	ЗаборТовара.ВремяДоставкиС,
		|	ЗаборТовара.ВремяДоставкиПо,
		|	ЗаборТовара.ОбъемЗабора
		|ИЗ
		|	Документ.ЗаборТовара КАК ЗаборТовара
		|ГДЕ
		|	ЗаборТовара.Номер В(&МасНомеров)";
		Зап.УстановитьПараметр("МасНомеров", МассивНомеров);
		
		Выб = Зап.Выполнить().Выбрать();
		
		МассивВозврата = Новый Массив;
		
		
		Пока Выб.Следующий() Цикл
			Струк = Новый Структура;
			Струк.Вставить("Заказ");
			Струк.Вставить("ТипЗаказа");
			Струк.Вставить("НомерЗаказа");
			Струк.Вставить("НомерЗаказаИМ");
			Струк.Вставить("Адрес");
			Струк.Вставить("Широта");
			Струк.Вставить("Долгота");
			Струк.Вставить("ИдентификаторЗаказа");
			Струк.Вставить("КонтрагентНаименование");
			Струк.Вставить("ВремяПрибытияС");
			Струк.Вставить("ВремяПрибытияПо");
			Струк.Вставить("ВесогабаритныйПоказатель");
			
			//CeHbKA
			Струк.Вставить("ИмяРеквизитаДерева",ИмяРеквизитаДерева);
			Струк.Вставить("Индекс");
			Струк.Вставить("ИндексРодителя");	
			
			Для Каждого Тек Из НайденныеСтроки Цикл
				Если Тек.Родитель = Неопределено Тогда
					Продолжить;
				КонецеСли;	
				Если Не ЗначениеЗаполнено(Тек.НомерЗаказа) Тогда
					Продолжить;
				КонецеСли;	
				
				Если Тек.НомерЗаказа <> Выб.НомерЗаказа Тогда
					Продолжить;
				КонецЕсли; 
				
				Струк.ИндексРодителя = Дерево.Строки.Индекс(Тек.Родитель);
				Струк.Индекс = Тек.Родитель.Строки.Индекс(Тек);
			КонецЦикла;
			//CeHbKA
			
			ЗаполнитьЗначенияСвойств(Струк, Выб);
			
			Струк.Адрес = СтрЗаменить(Струк.Адрес, "'", "");
			Струк.Адрес = СтрЗаменить(Струк.Адрес, """", "");
			
			Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, "'", "");
			Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, """", "");
			
			
			Струк.ИдентификаторЗаказа = Выб.Заказ.УникальныйИдентификатор();
			МассивВозврата.Добавить(Струк);
		КонецЦикла;	
		
		Возврат МассивВозврата;
	КонецеСли;
	Возврат Неопределено;
КонецФункции	
//-Широков по письму

&НаСервере
Процедура ПересчитатьИтогПоСтрокеДерева(СтрокаДерева)
	ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДерева();
	
	
	Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
		Попытка
			СтрокаДерева[СтрокаИмяКолонки.ИмяКолонки] = 0;
			Для Каждого Тек Из СтрокаДерева.Строки Цикл
				СтрокаДерева[СтрокаИмяКолонки.ИмяКолонки] = СтрокаДерева[СтрокаИмяКолонки.ИмяКолонки] + Тек[СтрокаИмяКолонки.ИмяКолонки];
			КонецЦикла;	
		Исключение
			
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ПростановкаФлаговВДеревьях(ИмяДерева, Значение)
	Дерево = РеквизитФормыВЗначение(ИмяДерева, Тип("ДеревоЗначений"));
	
	Струк = Новый Структура;
	
	Если Значение = 0 Тогда
		Струк.Вставить("Отметка", 1);
	ИначеЕсли Значение = 1 Тогда	
		Струк.Вставить("Отметка", 0);
	КонецеСли;	
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
	
	
		Для Каждого Тек Из НайденныеСтроки Цикл
			Тек.Отметка= Значение;
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКартеНаСервере(Тек.УИД);
		КонецЦикла;	
	
	Струк.Вставить("Отметка", 2);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
	
	Для Каждого Тек Из НайденныеСтроки Цикл
		Тек.Отметка= Значение;
		УдалитьЗаказИзСпискаВыделенныхЗаказовНаКартеНаСервере(Тек.УИД);
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(Дерево, ИмяДерева);
КонецПроцедуры	
#КонецОбласти

#Область РаботаСДеревомРейсов

&НаСервере
Процедура УстановкаУсловногоОформленияСпискаРейсов()
	
	//CeHbKA #3847 24.03.2020
	//выделение заказов ДеньВДень
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ДоставкаДеньВДень"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение =  Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноБирюзовый);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НомерЗаказа_Рейс");	
	//CeHbKA #3847 24.03.2020
	
	//скрытие строк с пустым номером заказа
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.НомерЗаказа"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лосось);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НомерЗаказа_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Транспорт_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Водитель_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Отметка_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Итого_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИтогоПредварительно_Рейс");
	
	// Якурнов 23.10.2018 14:33:42  
	//ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СменаРейса_Рейс");
	
	
	ДобавитьВОформлениеЭлементыДинамическихКолонок(ЭлементОформления.Поля.Элементы, "_Рейс");
	
	
	//скрытие номера авто
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.НомерЗаказа"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Транспорт_Рейс");	
	
	//Сигнализация перегруженных авто
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.Итого"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;	
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.МаксимальноеКоличествоЗаказов");
	ЭлементОтбора.Использование = Истина;
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Итого_Рейс");	 //Итого_Рейс   ДеревоРейсовСЗаказами
	
	
	//Роль рейса забор
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.РольРейса"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Справочники.РолиТранспорта.РольЗабораТовара;
	ЭлементОтбора.Использование = Истина;
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоНебесноГолубой);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Транспорт_Рейс");	//Транспорт_Рейс
	
	//Роль рейса пеший
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.РольРейса"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Справочники.РолиТранспорта.РольПешегоКурьера;
	ЭлементОтбора.Использование = Истина;
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Хаки);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Транспорт_Рейс");	//Транспорт_Рейс
	
	
	//индивидуальная маршрутизация
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ИндивидуальнаяМаршрутизация"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.НейтральноБирюзовый);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами");	
	
	//Асеев 17.06.2022 (по письму ПМ)>>>
	//перегруз
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора1 = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ОбъемКузова");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ОбъемКузова");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ОбъёмЗаказа");
	ЭлементОтбора.Использование = Истина;
	
	ГруппаОтбора2 = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.Грузоподъемность");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.Грузоподъемность");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ВесЗаказа");
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Оранжевый);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ВесЗаказа_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъёмЗаказа_Рейс");
	
	//Асеев 17.06.2022 (по письму ПМ)<<<	
	
	//проверенные документы
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ДокументПроверен"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.НомерЗаказа"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЗеленаяЛужайка);
	
	ДобавитьВОформлениеЭлементыДинамическихКолонок(ЭлементОформления.Поля.Элементы, "_Рейс");
	
КонецПроцедуры	


&НаСервереБезКонтекста
Процедура ОформлениеКолонкиРейс(ЭлементФормы, ИмяКолонки)
	ЭлементФормы.Ширина = 2;
	ЭлементФормы.МаксимальнаяШирина = 2;
	Если ИмяКолонки = "НомерЗаказа" Тогда
		ЭлементФормы.Заголовок = "№";
		ЭлементФормы.Ширина = 9;
		ЭлементФормы.МаксимальнаяШирина = 9;
		
	ИначеЕсли ИмяКолонки = "ПолигонМаршрутизации" Тогда	
		ЭлементФормы.Заголовок = "Полигон";
		ЭлементФормы.Ширина = 9;
		ЭлементФормы.МаксимальнаяШирина = 9;
		ЭлементФормы.Видимость = Ложь;
	//Асеев 17.06.2022 (по письму ПМ)>>>
	ИначеЕсли ИмяКолонки = "ВесЗаказа" Тогда
		ЭлементФормы.Заголовок = "ВесЗ";
		ЭлементФормы.Ширина = 4;
		ЭлементФормы.МаксимальнаяШирина = 4;
		ЭлементФормы.Формат = "ЧДЦ=1; ЧН=' '";
		ЭлементФормы.ЦветФона = WebЦвета.СеребристоСерый;
	ИначеЕсли ИмяКолонки = "ОбъёмЗаказа" Тогда
		ЭлементФормы.Заголовок = "ОбъемЗ";
		ЭлементФормы.Ширина = 4;
		ЭлементФормы.МаксимальнаяШирина = 4;
		ЭлементФормы.Формат = "ЧДЦ=1; ЧН=' '";
		ЭлементФормы.ЦветФона = WebЦвета.СеребристоСерый;
		//Асеев 17.06.2022 (по письму ПМ)<<<
	ИначеЕсли ИмяКолонки = "Водитель" Тогда	
		ЭлементФормы.Заголовок = "Водитель";
	ИначеЕсли ИмяКолонки = "МаксимальноеКоличествоЗаказов" Тогда
		ЭлементФормы.Видимость = Ложь;	
		//Асеев 17.06.2022 (по письму ПМ)>>>
	//ИначеЕсли ИмяКолонки = "ЗаказСсылка" Или ИмяКолонки = "ТранспортНаименование"Или ИмяКолонки = "ТранспортКод" Или ИмяКолонки = "УИД" Или ИмяКолонки = "Партнер" Или ИмяКолонки = "ВремяПрибытияС" Или ИмяКолонки = "ВремяПрибытияПо" Или ИмяКолонки = "ОбъемЗабора" Или ИмяКолонки = "КатегорияЗаказа" Тогда
	ИначеЕсли ИмяКолонки = "ЗаказСсылка" Или ИмяКолонки = "ТранспортНаименование"Или ИмяКолонки = "ТранспортКод" Или ИмяКолонки = "УИД" Или ИмяКолонки = "Партнер" Или ИмяКолонки = "ВремяПрибытияС" Или ИмяКолонки = "ВремяПрибытияПо" Или ИмяКолонки = "ОбъемЗабора" Или ИмяКолонки = "КатегорияЗаказа" Или ИмяКолонки = "Грузоподъемность" Или ИмяКолонки = "ОбъемКузова" Тогда
		//Асеев 17.06.2022 (по письму ПМ)<<<
		ЭлементФормы.Видимость = Ложь;		
	ИначеЕсли ИмяКолонки = "ИндивидуальнаяМаршрутизация" Тогда
		ЭлементФормы.Видимость = Ложь;				
	ИначеЕсли ИмяКолонки = "Итого" Тогда	
		ЭлементФормы.Заголовок = "Итого";
		ЭлементФормы.Шрифт = Новый Шрифт(ЭлементФормы.Шрифт,,,Истина);
		ЭлементФормы.Ширина = 4;
		ЭлементФормы.МаксимальнаяШирина = 4;
	ИначеЕсли ИмяКолонки = "ИтогоПредварительно" Тогда	
		ЭлементФормы.Заголовок = "Итого_";
		ЭлементФормы.Шрифт = Новый Шрифт(ЭлементФормы.Шрифт,,,Истина);
		ЭлементФормы.Ширина = 4;
		ЭлементФормы.МаксимальнаяШирина = 4;
	ИначеЕсли ИмяКолонки = "Отметка" Тогда	
		ЭлементФормы.Заголовок = "V";
		ЭлементФормы.Ширина = 2;
		ЭлементФормы.МаксимальнаяШирина = 2;
		ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементФормы.ТриСостояния = Истина;
		ЭлементФормы.ТолькоПросмотр = Ложь;
		ЭлементФормы.УстановитьДействие("ПриИзменении", "ИзменениеФлажкаНаРейсах"); 
	ИначеЕсли ИмяКолонки = "Рейс" Или ИмяКолонки = "РольРейса" Или ИмяКолонки = "ДокументПроверен" Тогда	
		ЭлементФормы.Видимость = Ложь;
	ИначеЕсли ИмяКолонки = "Экспедитор" Тогда	
		ЭлементФормы.Видимость = Ложь;
		
		// Якурнов 23.10.2018 14:39:07  	
	ИначеЕсли ИмяКолонки = "СменаРейса" Тогда	
		ЭлементФормы.Видимость = Ложь;		
		
	КонецеСли;	
КонецПроцедуры	

//БезКонтекста
&НаСервере  
Процедура СформироватьРейсыНаСервере(ДатаРейсов, Регион)
	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	СформированныйГрафикПоТранспортуСрезПоследних.Транспорт КАК Транспорт,
	|	СформированныйГрафикПоТранспортуСрезПоследних.СформированныйРейс КАК СформированныйРейс,
	|	СформированныйГрафикПоТранспортуСрезПоследних.Водитель КАК Водитель,
	|	СформированныйГрафикПоТранспортуСрезПоследних.Экспедитор КАК Экспедитор,
	|	СформированныйГрафикПоТранспортуСрезПоследних.РольРейса КАК РольРейса,
	|	СформированныйГрафикПоТранспортуСрезПоследних.СменаРейса КАК СменаРейса
	|ИЗ
	|	РегистрСведений.СформированныйГрафикПоТранспорту.СрезПоследних(
	|			&ДатаСреза,
	|			ДатаРейса = &ДатаРейсов
	|				И Регион.Ссылка = &Регион) КАК СформированныйГрафикПоТранспортуСрезПоследних
	|ГДЕ
	|	СформированныйГрафикПоТранспортуСрезПоследних.ТранспортВыйдетВРейс = ИСТИНА";
	Зап.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("Регион", Регион);
	ВыборкаПоТранспортуДляРейсов = Зап.Выполнить().Выбрать();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ФормированиеРейсов.Ссылка КАК Док
	|ИЗ
	|	Документ.ФормированиеРейсов КАК ФормированиеРейсов
	|ГДЕ
	|	ФормированиеРейсов.ДатаРейсов = &ДатаРейсов
	|	И ФормированиеРейсов.МетодикаМаршрутизации = ЗНАЧЕНИЕ(перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	|	И ФормированиеРейсов.ПометкаУдаления = ЛОЖЬ
	|	И ФормированиеРейсов.ТерминалДоставки = &ТерминалДоставки";
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	ВариантФормированияНомеровПалет = МаршрутизацияЗаказовСервер.ОпределитьАктуальныйРежимНазначенияНомеровПалет(Регион);
	
	ВыбФормирования = Зап.Выполнить().Выбрать();
	
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если ВыбФормирования.Следующий() Тогда
		ДокументФормирования = ВыбФормирования.Док.ПолучитьОбъект();
		ДокументФормирования.Рейсы.Очистить();
	Иначе
		ДокументФормирования = Документы.ФормированиеРейсов.СоздатьДокумент();
		ДокументФормирования.Дата = ТекущаяДата();
		ДокументФормирования.ДатаРейсов = ДатаРейсов;
		ДокументФормирования.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация;
		ДокументФормирования.РежимЗагрузкиДанных = 1;
		ДокументФормирования.РежимНазначенияНомеровПалет = ВариантФормированияНомеровПалет;
		ДокументФормирования.ФормироватьНомераПалетт = Истина;
		ДокументФормирования.ТерминалДоставки = Регион;
		ДокументФормирования.Записать(РежимЗаписиДокумента.Запись);
		
		// Якурнов 22.08.2018 9:57:04
		ДокументФормирования.СхемаНазначенияНомеровПалетПоПолигонам = МаршрутизацияЗаказовСервер.ПолучитьСхемуНазначенияНомеровПалетПоПолигонам(Регион);
		
	КонецеСли;	
	
	
	ТаблицаРейсовКОтметкеОФормировании = Новый ТаблицаЗначений;
	ТаблицаРейсовКОтметкеОФормировании.Колонки.Добавить("Рейс", Новый ОписаниеТипов("ДокументСсылка.Рейс"));
	ТаблицаРейсовКОтметкеОФормировании.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.новаТранспорт"));
	
	Пока ВыборкаПоТранспортуДляРейсов.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПоТранспортуДляРейсов.СформированныйРейс) Тогда
			Рейс = Документы.Рейс.СоздатьДокумент();
			Рейс.Дата = ТекущаяДата();
			Рейс.ДатаРейса = ДатаРейсов;
			Рейс.ТерминалДоставки = Регион;
			Рейс.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация;
			Рейс.РежимЗагрузкиДанных = 1;
			Если ЗначениеЗаполнено(ВыборкаПоТранспортуДляРейсов.РольРейса) Тогда
				Рейс.РольРейса = ВыборкаПоТранспортуДляРейсов.РольРейса;
			Иначе
				Рейс.РольРейса = Справочники.РолиТранспорта.РольДоставки;
			КонецеСли;
			
			// Якурнов 18.10.2018 16:51:16  
			Если ЗначениеЗаполнено(ВыборкаПоТранспортуДляРейсов.СменаРейса) Тогда
				Рейс.СменаРейса = ВыборкаПоТранспортуДляРейсов.СменаРейса;
			Иначе
				Рейс.СменаРейса = Справочники.Смены.Смена1;
			КонецеСли;
			
			
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			
			Рейс.СоздатьРейсМестнойДоставки();
			
			Рейс.Записать(РежимЗаписиДокумента.Проведение);
			
			Нов = ТаблицаРейсовКОтметкеОФормировании.Добавить();
			Нов.Рейс = Рейс.Ссылка;
			Нов.Транспорт = ВыборкаПоТранспортуДляРейсов.Транспорт;
			
		Иначе	
			Рейс = ВыборкаПоТранспортуДляРейсов.СформированныйРейс.ПолучитьОбъект();
		КонецеСли;
		
		ДанныеЭкипажа = Новый Структура;
		ДанныеЭкипажа.Вставить("Транспорт", ВыборкаПоТранспортуДляРейсов.Транспорт);
		ДанныеЭкипажа.Вставить("Водитель", ВыборкаПоТранспортуДляРейсов.Водитель);
		ДанныеЭкипажа.Вставить("Экспедитор", ВыборкаПоТранспортуДляРейсов.Экспедитор);
		
		
		Рейс.УстановитьЭкипаж(ДанныеЭкипажа, ТекущаяДата());
		
		//Асеев 01.09.2022 (по письму Несданные документы 31.08.2022)>>>
		ПараметрыТранспорта = МаршрутизацияЗаказовСервер.ПрочитатьДополнительныеПараметрыТранспорта(ВыборкаПоТранспортуДляРейсов.Транспорт);
		Рейс.УдаленноеЗакрытиеРейса = ?(ПараметрыТранспорта = Неопределено, Ложь, ПараметрыТранспорта.УдаленноеЗакрытие);
		//Асеев 01.09.2022 (по письму Несданные документы 31.08.2022)<<<
		
		Рейс.УстановитьПоездкуРейса(Дата(Год(ДатаПланирования), Месяц(ДатаПланирования), День(ДатаПланирования), 9,0,0), Дата(Год(ДатаПланирования), Месяц(ДатаПланирования), День(ДатаПланирования), 20,0,0));
		
		Нов = ДокументФормирования.Рейсы.Добавить();
		Нов.Рейс = Рейс.Ссылка;
		
		// Якурнов 31.07.2018 12:11:40 Контролируем ПМФормированиеРейсов
		Событие = Справочники.СобытияКонтроляВремени.ПМФормированиеРейсов;
		УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие,Рейс.Ссылка,Истина);
		
		
		Сообщить("Сформирован рейс по " + ВыборкаПоТранспортуДляРейсов.Транспорт);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	МаршрутизацияЗаказовСервер.УстановитьСформированныеРейсыВГрафикеРейсов(ТаблицаРейсовКОтметкеОФормировании, ДатаРейсов, Регион, ТекущаяДата());	
	
	ДокументФормирования.Записать(РежимЗаписиДокумента.Запись);
	
	МассивЗагрузок = Новый Массив;
	МассивЗагрузок.Добавить(ДокументФормирования.Ссылка);
	
	// Якурнов 22.08.2018 17:57:42
	//МаршрутизацияЗаказовСервер.СформироватьНомераПалетт(МассивЗагрузок, ВариантФормированияНомеровПалет, ДатаПланирования);
	
	ПрочитатьФормированиеРейсов(ДатаРейсов, Регион);
	
	Сообщить("Формирование рейсов завершено!");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСформированностьРейсов(ДатаРейсов, Терминал)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФормированиеРейсовРейсы.Рейс) КАК КоличествоРейсов
	|ИЗ
	|	Документ.ФормированиеРейсов.Рейсы КАК ФормированиеРейсовРейсы
	|ГДЕ
	|	ФормированиеРейсовРейсы.Рейс.ДатаРейса = &ДатаРейсов
	|	И ФормированиеРейсовРейсы.Рейс.ПометкаУдаления = ЛОЖЬ
	|	И ФормированиеРейсовРейсы.Рейс.МетодикаМаршрутизации = Значение(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	|	И ФормированиеРейсовРейсы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ФормированиеРейсовРейсы.Ссылка.ТерминалДоставки = &ТерминалДоставки
	|	И ФормированиеРейсовРейсы.Рейс.ТерминалДоставки = &ТерминалДоставки";
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("ТерминалДоставки", Терминал);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Если Выб.КоличествоРейсов <> 0 Тогда
			Возврат Выб.КоличествоРейсов;
		Иначе	
			Возврат Неопределено;
		КонецеСли;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура СформироватьРейсы(Команда)
	ДатаРейсов = ДатаПланирования;
	
	Если Регион.Пустая() Тогда
		Сообщить("Выберите регион доставки!", СтатусСообщения.ОченьВажное);
		ЭтаФорма.ТекущийЭлемент = Элементы.Регион;
		Возврат;
	КонецЕсли;	
	
	//++Задача № 3459 Проверка ОкончаниеСобытия
	ДатаНачалаСобытия = Неопределено;	
	Если Не УчетКонтроляВремениСервер.ПроверитьСостояниеСобытия(ПредопределенноеЗначение("Справочник.СобытияКонтроляВремени.ПМФормированиеРейсов"),,Регион, ДатаНачалаСобытия) Тогда		
		Сообщить("В данный момент уже происходит формирование рейсов! Ждите его завершение (запущено в "+Строка(ДатаНачалаСобытия)+")");		
		Возврат;	
	Конецесли;
	//--Задача № 3459
	
	РезультатПроверки = ПроверитьСформированностьРейсов(ДатаРейсов, Регион);
	
	Если РезультатПроверки <> Неопределено Тогда
		ОтветВопроса = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьРейсыЗавершение", ЭтотОбъект, Новый Структура("ДатаРейсов", ДатаРейсов)), "Рейсы на дату " + Формат(ДатаРейсов, "ДЛФ=DD") + " уже существуют. Переформировать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;	
	КонецеСли;
	
	СформироватьРейсыФрагмент(ДатаРейсов);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРейсыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ДатаРейсов = ДополнительныеПараметры.ДатаРейсов;
	
	
	ОтветВопроса = РезультатВопроса;
	Если ОтветВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецеСли;	
	
	СформироватьРейсыФрагмент(ДатаРейсов);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРейсыФрагмент(Знач ДатаРейсов)
	
	Попытка
		//СформироватьРейсыНаСервере(ДатаРейсов, Регион);
		//CeHbKA #3179 10.06.2019
		СформироватьРейсыНаСервере_Новая(ДатаРейсов, Регион);
		//CeHbKA #3179 10.06.2019
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		ВремяОшибки = ТекущаяДата();
		ТемаПисьма = "ПМ.СформироватьРейсыФрагмент " + Формат(ВремяОшибки, "ДФ=dd.MM.yyyy");
		ТекстПисьма = ТекстОшибки + "
		|
		|Дата рейсов " + Формат(ДатаРейсов, "ДФ=dd.MM.yyyy") + "
		|Регион " + Регион + "
		|
		|Ошибка " + ВремяОшибки;
		
		МассивПолучателей = Новый Массив;
		МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
		МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		
		lem.ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма);
		
		//++Задача № 3459 запись окончания события
		УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(ПредопределенноеЗначение("Справочник.СобытияКонтроляВремени.ПМФормированиеРейсов"),"",Истина,,,Регион);
		//--Задача № 3459 запись окончания события
	Конецпопытки;
	
	ОбновитьДанные(Ложь, Ложь, Истина);
КонецПроцедуры


&НаКлиенте
Процедура УстановитьПолигоныИКатегории(Команда)
	//Автоматическая маршрутизация
	Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Сообщить("Выберите рейс!");
		Возврат;
	КонецеСли;	
	
	Парам = Новый Структура;
	Парам.Вставить("ДатаПланирования", ДатаПланирования);
	Парам.Вставить("Регион", Регион);
	Парам.Вставить("Рейс", Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Рейс);
	Парам.Вставить("ПолигональнаяСхемаКарты", ПолигональнаяСхемаКарты);
	Парам.Вставить("ЗаборнаяКатегория", ЗаборнаяКатегория);
	Парам.Вставить("СхемаЛогистическихБрейков", СхемаЛогистическихБрейков);
	Парам.Вставить("Транспорт", Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Транспорт);
	Парам.Вставить("Водитель", Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Водитель);
	Парам.Вставить("КоличествоЗаказовМаксимум", Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.МаксимальноеКоличествоЗаказов);   
	Парам.Вставить("УстановкаПолигоновСУчетомКатегорийТранспорта", Объект.УстановкаПолигоновСУчетомКатегорийТранспорта);
	Парам.Вставить("СкрыватьУжеПривязанныеПолигоныВФормеПривязкиПолигонов", Объект.СкрыватьУжеПривязанныеПолигоныВФормеПривязкиПолигонов);
	
	// Якурнов 21.09.2018 12:08:44
	Парам.Вставить("МассивПолигонов", ПолучитьМассивПолигоновИзГрупп());
	
	// Якурнов 23.10.2018 16:21:38 
	Парам.Вставить("Смена", Смена);
	
	//РАСКОММЕНТИТЬ!!!!
	ОткрытьФорму("Обработка.ПолигональныйМаршрутизатор.Форма.ФормаУстановкиПолигоновИКатегорийДляРейсов", Парам, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//ОткрытьФорму("ВнешняяОбработка.ПолигональныйМаршрутизатор.Форма.ФормаУстановкиПолигоновИКатегорийДляРейсов", Парам, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//РАСКОММЕНТИТЬ!!!!
КонецПроцедуры

// Якурнов 16.08.2018 10:34:34
// Добавляем изменения в точку доставки БПМестнаяДоставка
Процедура СоздатьНовуюТочкуДоставкиНаСервере(АдресП, НомерЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	новаМестнаяДоставка.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|ГДЕ
	|	новаМестнаяДоставка.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер",НомерЗаказа);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Задание = Выборка.Ссылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	СтараяТочка = Задание.ТочкаПрибытия;
	
	НТочка = справочники.новаТочкиДоставки.СоздатьЭлемент();
	НТочка.Заполнить(СтараяТочка);
	НТочка.Адрес = АдресП.Ссылка;
	НТочка.Наименование = Строка(АдресП.Ссылка);
	//+Широков 23.08.2021 по письму
	НТочка.ВладелецТочки = СтараяТочка.ВладелецТочки;
	//-Широков 23.08.2021 по письму
	НТочка.Записать();
	
	БПМестнаяДоставка = Задание.ПолучитьОбъект();
	БПМестнаяДоставка.ТочкаПрибытия = НТочка.Ссылка;
	БПМестнаяДоставка.Адрес = НТочка.Адрес;
	БПМестнаяДоставка.Записать();
	
	//ЛогироватьСменуАдреса(Задание, СтараяТочка, НТочка.Ссылка);
	
КонецПроцедуры // ()

//Асеев 04.09.2024 (Задача № 5317)>>>
&НаСервере
Процедура СоздатьНовуюТочкуЗабораНаСервере(АдресП, парЗабор)
	
	СтараяТочка = парЗабор.ТочкаДоставки;
	
	НТочка = справочники.новаТочкиДоставки.СоздатьЭлемент();
	НТочка.Заполнить(СтараяТочка);
	НТочка.Адрес = АдресП.Ссылка;
	НТочка.Наименование = Строка(АдресП.Ссылка);
	//+Широков 23.08.2021 по письму
	НТочка.ВладелецТочки = СтараяТочка.ВладелецТочки;
	//-Широков 23.08.2021 по письму
	НТочка.Записать();
	
	докЗабор 				= парЗабор.ПолучитьОбъект();
	докЗабор.ТочкаДоставки 	= НТочка.Ссылка;
	докЗабор.АдресДоставки	= НТочка.Адрес;
	докЗабор.Записать();
	
КонецПроцедуры
//Асеев 04.09.2024 (Задача № 5317)<<<

&НаСервере
Процедура ОбновитьКоординатыНаКарте(Элемент)
	//Координаты = ПолучитьПервыеКоординатыПолигона(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации);
	//CeHbKA #3419 	29.08.2019
	//НайденныеСтроки = ТаблицаПолигоновИКоординат.НайтиСтроки(Новый Структура("Полигон", Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации));
	////Сообщить("ТаблицаПолигоновИКоординат.НайтиСтроки " + ТекущаяДата());  //Широков
	//
	//ЕстьКоординаты = Ложь;
	
	//СтруктураПоиска = Новый Структура;
	//СтруктураПоиска.Вставить("Заказ",Элемент);
	//Координаты = ПолучитьШиротуДолготуНаСервере(СтруктураПоиска);
	
	Координаты = Новый Структура;
	Координаты.Вставить("Широта",Элемент.Широта);
	Координаты.Вставить("Долгота",Элемент.Долгота);
	
	//Для каждого ТекСтрокаКоординаты Из НайденныеСтроки Цикл
	//	Координаты = Новый Структура("Широта, Долгота");
	//	ЗаполнитьЗначенияСвойств(Координаты, ТекСтрокаКоординаты);
	//	ЕстьКоординаты = Истина;
	//КонецЦикла; 
	
	//Если НЕ ЕстьКоординаты Тогда
	//	Возврат;	
	//КонецЕсли; 
	//CeHbKA #3419 	29.08.2019
	
	ВызовФункции = "MapUtils.ClickBallon(" + Формат(Координаты.Широта, "ЧРД=.; ЧГ=") + ", " + Формат(Координаты.Долгота, "ЧРД=.; ЧГ=") + ")";    
	//ВызовФункции = "MapUtils.ClickBallon(55.9871135186000, 37.4463958528000)";
	//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = ВызовФункции;
	//Иначе	
	//	Элементы.ПолеXTML.Документ.parentWindow.eval(ВызовФункции);
	//КонецеСли;
	//Сообщить("ВызовФункции " + ТекущаяДата());  //Широков
	ВыполнитьСкриптСервер(ВызовФункции);
	//Сообщить("Завершение " + ТекущаяДата());  //Широков
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСкриптСервер(Команда)
	
	Попытка
		//+Степанов Ветвление в зависимости от использования WebKit
		Если ИспользованиеWebKit И ПолеXTMLБылоСформировано Тогда
			Элементы.ПолеXTML.Документ.defaultView.exec(Команда);	
		Иначе	
			Элементы.ПолеXTML.Документ.parentWindow.exec(Команда);
		КонецЕсли;
	Исключение
		//Сообщить(ОписаниеОшибки());
	конецпопытки;
	
	Возврат;
	ДИВ = Элементы.ПолеXTML.Документ.getElementById("TEST");
	
	НашлиАтрибут = ДИВ.getAttributeNode("onclick");
	Если НашлиАтрибут <> null Тогда
		ДИВ.removeAttribute("onclick");
	КонецЕсли; 
	
	Атрибут  = Элементы.ПолеXTML.Документ.createAttribute("onclick");
	Атрибут.value = Команда;
	ДИВ.attributes.setNamedItem(Атрибут); // привязываем атрибут
	
	ДИВ.click();
	
КонецПроцедуры


Процедура ОбработкаВведенногоАдресаНаСервере(ИмяСобытия, Параметр)
	обАдрес = Параметр.ПолучитьОбъект();
	
	//Широков 16.10.2020 по письму
	//ДанныеЗаказовЗаборов = ПолучитьДанныеЗаказовЗаборов(ДатаПланирования);
	ОбновитьКоординатыНаКарте(обАдрес.Ссылка);
	//Широков
	
	Если обАдрес.ВходитВКлассификатор Тогда
		обАдресИзКлассификатора = обАдрес;
	Иначе
		обПроизвольныйАдрес = обАдрес;
	КонецЕсли;
	Наименование = ОбАдрес.Наименование;
	АдресИзКлассификатора = обАдрес.ВходитВКлассификатор;
	ТекВр = ТекущаяДата();
	Наб = РегистрыСведений.ЛогПривязкиАдресов.СоздатьНаборЗаписей();
	Наб.Отбор.ТочкаДоставки.Установить(ТекущаяТочкаПрибытия);
	Наб.Отбор.Период.Установить(ТекВр);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекВр;
	Нов.ТочкаДоставки = ТекущаяТочкаПрибытия;
	Нов.Адрес = ОбАдрес.Наименование;
	Нов.РучнаяПривязка = Истина;
	Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Наб.Записать();
	
	НаборЗаписей = РегистрыСведений.новаРайоныАдресов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Адрес.Установить(обАдрес.Ссылка);
	НаборЗаписей.Прочитать();
	ГеоРайоны = НаборЗаписей.Выгрузить();
	
	
	Если ТипЗнч(ТекущийЗаказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда
		
		//Асеев 04.09.2024 (Задача № 5317)>>>
		СоздатьНовуюТочкуЗабораНаСервере(обАдрес, ТекущийЗаказ);
		//Асеев 04.09.2024 (Задача № 5317)<<<
		
		Если ЗначениеЗаполнено(обАдрес.Долгота) И ЗначениеЗаполнено(обАдрес.Широта) Тогда
			МассивСтрук = Новый Массив;
			//Асеев 14.10.2022 (Задача № 4913)>>>
			МассивЗаказовЗон = Новый Массив;
			//Асеев 14.10.2022 (Задача № 4913)<<<
			
			Струк = Новый Структура;
			
			Струк.Вставить("НомерЗаказа", Число(СокрЛП(ТекущийЗаказ.Номер)));
			Струк.Вставить("Широта", обАдрес.Широта);
			Струк.Вставить("Долгота", обАдрес.Долгота);
			МассивСтрук.Добавить(Струк);
			
			//Асеев 14.10.2022 (Задача № 4913)>>>
			МассивЗаказовЗон.Добавить(ТекущийЗаказ);
			//Асеев 14.10.2022 (Задача № 4913)<<<
			
		//+Широков 24.12.2020 по письму
			//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
			ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "Обработка.ПолигональныйМаршрутизатор.ФормаУпр.ОбработкаВведенногоАдресаНаСервере(2390, 4)");	
		//-Широков 24.12.2020 по письму
		
			//Асеев 04.09.2024 (Задача № 5317)>>>
			ТарификацияУслугСервер.ЗагрузкаЗонТарификацииПартнеровЗаказов(МассивЗаказовЗон);
			//Асеев 04.09.2024 (Задача № 5317)<<<
			
			//Асеев 14.10.2022 (Задача № 4913)>>>
			ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
			//Асеев 14.10.2022 (Задача № 4913)<<<
		КонецЕсли;
	Иначе	
		// Якурнов 16.08.2018 10:34:34
		// Добавляем изменения в точку доставки БПМестнаяДоставка
		СоздатьНовуюТочкуДоставкиНаСервере(обАдрес,ТекущийЗаказ.Номер);
	
		//mel установка полигонального адреса 07.02.2018
		Если ЗначениеЗаполнено(обАдрес.Долгота) И ЗначениеЗаполнено(обАдрес.Широта) Тогда
			МассивСтрук = Новый Массив;
			//Асеев 14.10.2022 (Задача № 4913)>>>
			МассивЗаказовЗон = Новый Массив;
			//Асеев 14.10.2022 (Задача № 4913)<<<
			
			Струк = Новый Структура;
			
			Струк.Вставить("НомерЗаказа", Число(СокрЛП(ТекущийЗаказ.Номер)));
			Струк.Вставить("Широта", обАдрес.Широта);
			Струк.Вставить("Долгота", обАдрес.Долгота);
			МассивСтрук.Добавить(Струк);
			
			//Асеев 14.10.2022 (Задача № 4913)>>>
			МассивЗаказовЗон.Добавить(ТекущийЗаказ);
			//Асеев 14.10.2022 (Задача № 4913)<<<
			
		//+Широков 24.12.2020 по письму
			//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
			ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "Обработка.ПолигональныйМаршрутизатор.ФормаУпр.ОбработкаВведенногоАдресаНаСервере(2411, 4)");	
		//-Широков 24.12.2020 по письму
		
			//Асеев 04.09.2024 (Задача № 5317)>>>
			ТарификацияУслугСервер.ЗагрузкаЗонТарификацииПартнеровЗаказов(МассивЗаказовЗон);
			//Асеев 04.09.2024 (Задача № 5317)<<<
			
			//Асеев 14.10.2022 (Задача № 4913)>>>
			ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
			//Асеев 14.10.2022 (Задача № 4913)<<<
		КонецЕсли;
		//mel установка полигонального адреса 07.02.2018
	КонецЕСли;		
	
	
	РасстояниеПоДорогам = 0;
	
	// рассчитаем расстояние
	Если ЗначениеЗаполнено(ТекущаяТочкаОтправления.Адрес.Широта) И ЗначениеЗаполнено(обАдрес.Широта) Тогда					
		РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(ТекущаяТочкаОтправления.Адрес.Широта, ТекущаяТочкаОтправления.Адрес.Долгота, обАдрес.Широта, обАдрес.Долгота);
	КонецЕсли;
	
	// сделаем запись в РС ДопПараметры
	Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда
		Набор = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
		Набор.Отбор.Заказ.Установить(ТекущийЗаказ);
		Набор.Прочитать();
		//+Широков по письму
		//		Если Набор.Количество() Тогда			
		Если Набор.Количество() > 0 Тогда			
			//-Широков по письму
			Для каждого Стр Из Набор Цикл					
				Стр.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;	
			КонецЦикла;		
		Иначе
			НЗапись = Набор.Добавить();
			НЗапись.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;
		КонецЕсли;	
		
		Попытка
			Набор.Записать();	
		Исключение				
		КонецПопытки;					
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//ОбработкаОповещенияНаСервере(ИмяСобытия);
	Если ИмяСобытия = "ОбновитьДанныеПолигоновИЗаказовИДанныеРейсов_ПолигональнаяМаршрутизация" Тогда
		//+Степанов Задача № 3863 
		//ОбновитьДанные(Ложь, Истина, Истина);
		//МассивОшибок = ПоместитьЗаказыВРейс(Параметр.ДанныеОповещения.КПривязке, Параметр.Рейс);
		МассивОшибок = ПоместитьЗаказыВРейсНовая(Параметр.ДанныеОповещения.КПривязке, Параметр.Рейс);
		//+Широков по письму
		
		//Если МассивОшибок.Количество() Тогда
		Если МассивОшибок.Количество() > 0 Тогда
			//-Широков по письму
			ТекстОшибки = "";
			Для Каждого ОшибкаПривязки Из МассивОшибок Цикл
				Если ПустаяСтрока(ТекстОшибки) Тогда 
					ТекстОшибки = ОшибкаПривязки;
				Иначе
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкаПривязки;
				КонецЕсли;	
			КонецЦикла;	
			ПоказатьОповещениеПользователя("Требуется обновить данные ПМ!",,ТекстОшибки,,СтатусОповещенияПользователя.Важное);
		КонецЕсли;	
		ЕстьОтвязанные = Ложь;
		Для Каждого ПолигонКОтвязке Из Параметр.ДанныеОповещения.КОтвязке Цикл
			Если ПолигонКОтвязке.Значение.Количество() <> 0 Тогда
				ЕстьОтвязанные = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Если ЕстьОтвязанные Тогда
			МассивОшибок = УдалитьЗаказыИзРейса(Параметр.ДанныеОповещения.КОтвязке, Параметр.Рейс);
			
			//+Широков по письму
			//ПересчитатьДеревья();
			//Если МассивОшибок.Количество() Тогда
			Если МассивОшибок.Количество() > 0 Тогда
				//-Широков по письму
				
				ТекстОшибки = "";
				Для Каждого ОшибкаПривязки Из МассивОшибок Цикл
					Если ПустаяСтрока(ТекстОшибки) Тогда 
						ТекстОшибки = ОшибкаПривязки;
					Иначе
						ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкаПривязки;
					КонецЕсли;	
				КонецЦикла;	
				ПоказатьОповещениеПользователя("Требуется обновить данные ПМ!",,ТекстОшибки,,СтатусОповещенияПользователя.Важное);
			КонецЕсли;
		КонецЕсли;
		
		
		//тут также очищаются массивы с пометками
		ПересчитатьДеревья(); //Широков по письму


		ВыводАвтоНаКарту();
		ВыделениеПолигоновНаКарте();
		//-Степанов Задача № 3863 
	ИначеЕсли ИмяСобытия = "ВыбранАдрес" Тогда
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			
			
			ОбработкаВведенногоАдресаНаСервере(ИмяСобытия, Параметр);
			
				//Широков по письму 
	ДанныеЗаказовЗаборов = ПолучитьДанныеЗаказовЗаборов(ДатаПланирования);
				//Широков по письму 
			
			//+Степанов Ветвление в зависимости от дерева, из которого привязали адрес.
			Если Источник.ВызовИзДереваЗаказов Тогда
				ОбновитьДанные(Ложь,Ложь,Истина);	
			Иначе	
				ОбновитьДанные(Ложь, Истина, Ложь);
			КонецЕсли;	
			//-Степанов
		КонецеСли;	
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРейсовСЗаказамиПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	//+Широков по письму
	//Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Отметка > 0 Тогда
	//	ЭлементМассива = МассивРейсовСПометками.Найти(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор());
	//	Если ЭлементМассива = Неопределено Тогда
	//		МассивРейсовСПометками.Добавить(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор());
	//	КонецЕсли;
	//Иначе
	//	ЭлементМассива = МассивРейсовСПометками.Найти(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор());
	//	Если НЕ ЭлементМассива = Неопределено Тогда
	//		МассивРейсовСПометками.Удалить(ЭлементМассива);
	//	КонецЕсли;
	//КонецЕсли;
	//-Широков по письму
	
	//Широков 22.03.2021 по письму
	//Получаем только выделенные именно сейчас заказы
	МассивРейсовВыделенныеСтроки.Очистить();	

	Если НЕ Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		//Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Отметка > 0 Тогда
			МассивПодчиненныеЭлементы = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьЭлементы();
			Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
				ЭлементМассива = МассивРейсовВыделенныеСтроки[Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
				Если ЭлементМассива = Неопределено Тогда
					СтруктураЗначения = новый Структура;
					СтруктураЗначения.Вставить("НомерЗаказа",Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.НомерЗаказа);
					СтруктураЗначения.Вставить("УИД",Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.УИД);
					МассивРейсовВыделенныеСтроки.Вставить(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор(), СтруктураЗначения);
				КонецЕсли;
			Иначе
				Для Каждого ПОдчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
					ЭлементМассива = МассивРейсовВыделенныеСтроки[ПОдчиненныйЭлемент.ПолучитьИдентификатор()];
					Если ЭлементМассива = Неопределено Тогда
						Если НЕ СокрЛП(ПодчиненныйЭлемент.НомерЗаказа)="" Тогда //Широков по письму 24.03.2021
						СтруктураЗначения = новый Структура;
						СтруктураЗначения.Вставить("НомерЗаказа",ПОдчиненныйЭлемент.НомерЗаказа);
						СтруктураЗначения.Вставить("УИД",ПОдчиненныйЭлемент.УИД);
						МассивРейсовВыделенныеСтроки.Вставить(ПОдчиненныйЭлемент.ПолучитьИдентификатор(), СтруктураЗначения);
					КонецЕсли; //Широков по письму 24.03.2021
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		//Иначе
		//	МассивПодчиненныеЭлементы = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьЭлементы();
		//	Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
		//		ЭлементМассива = МассивРейсовВыделенныеСтроки[Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
		//		Если НЕ ЭлементМассива = Неопределено Тогда
		//			МассивРейсовВыделенныеСтроки.Удалить(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор());
		//		КонецЕсли;
		//	Иначе
		//		Для Каждого ПОдчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
		//			ЭлементМассива = МассивРейсовВыделенныеСтроки[ПОдчиненныйЭлемент.ПолучитьИдентификатор()];
		//			Если НЕ ЭлементМассива = Неопределено Тогда
		//				//						МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ);
		//				МассивРейсовВыделенныеСтроки.Удалить(ПОдчиненныйЭлемент.ПолучитьИдентификатор());
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;	
	
	//Широков 22.03.2021 по письму
	
	
	Элементы.ДеревоРейсовСЗаказамиКонтекстноеМенюРейсПроверен.Пометка = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен;
КонецПроцедуры

&НаКлиенте
Процедура ПоискЗаказаВРейсахПриИзменении(Элемент)
	Если СокрЛП(ПоискЗаказаВРейсах) = "" Тогда
		Возврат;
	КонецеСли;	
	
	мОтбор = Новый Структура(); //запомнили 
	мОтбор.Вставить("НомерЗаказа", ПоискЗаказаВРейсах);
	
	ИдентификаторСтроки = 0; 
	ПрекратитьПоиск = Ложь; 
	НайтиСтрокуДерева(ДеревоРейсовСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск, Истина); 
	Если ПрекратитьПоиск Тогда
		Элементы.ДеревоРейсовСЗаказами.ТекущаяСтрока = ИдентификаторСтроки; 	
		Сообщить("Поиск завершен!");
		ПоискЗаказаВРейсах = "";
	Иначе
		Сообщить("Заказ не найден!", СтатусСообщения.ОченьВажное);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаФлаговРейсы(Команда)
	ПростановкаФлаговВДеревьях("ДеревоРейсовСЗаказами", 0);
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	
	МассивРейсовСПометками.Очистить();  //Широков 09.04.2021 по письму
	
КонецПроцедуры

&НаКлиенте
Процедура ПростановкаФлаговРейсы(Команда)
	ПростановкаФлаговВДеревьях("ДеревоРейсовСЗаказами", 1);
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	//+Широков 09.04.2021 по письму
	ОбновитьМассивРейсовСПометками();
	//-Широков 09.04.2021 по письму
КонецПроцедуры


&НаКлиенте
Процедура ДеревоРейсовСЗаказамиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРейсовСЗаказамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПодсчитатьИтогиПоКоличествуРейсов()
	СписокЭлементов = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
	
	РейсовВсего = 0;
	РейсовБезЗаказов = 0;
	РейсовСКоличествомЗаказовМеньше15 = 0;
	
	ТЗИтогиРейсов.Очистить();
	ТЗИтогиРейсовКопия = Новый ТаблицаЗначений;
	ТЗИтогиРейсовКопия.Колонки.Добавить("РольРейса", Новый ОписаниеТипов("СправочникСсылка.РолиТранспорта"));
	ТЗИтогиРейсовКопия.Колонки.Добавить("КоличествоИтого", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4, 0)));
	ТЗИтогиРейсовКопия.Колонки.Добавить("КоличествоБезЗаказов", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4, 0)));
	ТЗИтогиРейсовКопия.Колонки.Добавить("КоличествоМеньше15Заказов", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4, 0)));
	
	Для Каждого Тек Из СписокЭлементов Цикл
		РейсовВсего = РейсовВсего + 1;
		
		Нов = ТЗИтогиРейсовКопия.Добавить();
		Нов.РольРейса = Тек.РольРейса;
		Нов.КоличествоИтого = 1;
		Нов.КоличествоБезЗаказов = 0;
		Нов.КоличествоМеньше15Заказов = 0;
		
		Если Тек.Итого = 0 Тогда
			РейсовБезЗаказов = РейсовБезЗаказов + 1;
			Нов.КоличествоБезЗаказов = 1;
		ИначеЕсли Тек.Итого <= 15 Тогда
			РейсовСКоличествомЗаказовМеньше15 = РейсовСКоличествомЗаказовМеньше15 + 1;
			Нов.КоличествоМеньше15Заказов = 1;
		КонецеСли;	
		
	КонецЦикла;	
	ТЗИтогиРейсовКопия.Свернуть("РольРейса", "КоличествоИтого, КоличествоБезЗаказов, КоличествоМеньше15Заказов");
	
	Для Каждого Тек Из ТЗИтогиРейсовКопия Цикл
		Нов = ТЗИтогиРейсов.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
	КонецЦикла;	
	
	//ТЗИтогиРейсов.Загрузить(ТЗИтогиРейсовКопия);
КонецПроцедуры	

&НаКлиенте
Процедура ПривязатьАдресЗаказаДеревоРейсов(Команда)
	Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.НомерЗаказа) Тогда
		Возврат;
	КонецеСли;	
	ПривязатьАдресЗаказаПоНомеруЗаказа(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.НомерЗаказа,Истина);
КонецПроцедуры
#КонецОбласти 


#Область РаботаСФлажкамиТриСостояния
&НаКлиенте
Процедура ИзменениеФлажкаНаРейсах(Элемент)
	ИДТекущейСтроки = Элементы["ДеревоРейсовСЗаказами"].ТекущаяСтрока;
	
	Если ИДТекущейСтроки <> Неопределено Тогда
		
		ЭлементКоллекции = ЭтаФорма["ДеревоРейсовСЗаказами"].НайтиПоИдентификатору(
		ИДТекущейСтроки);
		
		Если ЭлементКоллекции.Отметка = 2 Тогда
			ЭлементКоллекции.Отметка = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.УИД) И ЭлементКоллекции.Отметка = 0 Тогда
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(ЭлементКоллекции.УИД);
		КонецеСли;	
		
		УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Отметка);
		
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
		Пока Родитель <> Неопределено Цикл
			Родитель.Отметка = ?(УстановленоДляВсех(ЭлементКоллекции),
			ЭлементКоллекции.Отметка, 2);
			ЭлементКоллекции = Родитель;
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
		КонецЦикла;
		
	КонецЕсли;
	
	// Якурнов 30.10.2018 13:03:46 Убираем обновление карты при установки галочек в Рейсах  
	Если Объект.АвтообновлениеКартыПриВыделенииЗаказов Тогда
		//Широков по письму
		//ДанныеЗаказовЗаборов = ПолучитьДанныеЗаказовЗаборов(ДатаПланирования);
		//Широков по письму
		ОтобразитьВсеВыделенныеТочкиНаКарте();
	КонецЕсли;
	
КонецПроцедуры	
#КонецОбласти

&НаСервере
Функция ПолучитьМассивЗаказовПоУИД(МассивУИД)
	МассивСсылок = Новый Массив;
	
	Для Каждого Тек Из МассивУИД Цикл
		НайСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(Тек));
		Если Не ЗначениеЗаполнено(НайСсылка.Дата) Тогда
			НайСсылка = Документы.ЗаборТовара.ПолучитьСсылку(Новый УникальныйИдентификатор(Тек));
		КонецеСли;
		
		МассивСсылок.Добавить(НайСсылка);
	КонецЦикла;	
	
	
	Если МассивСсылок.Количество() <> 0 Тогда
		Зап = Новый Запрос;
		//+Широков 16.07.2021 Задача 4607
		//Старый запрос
	
		//Зап.Текст = "ВЫБРАТЬ
		//|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		//|	1 КАК ТипЗаказа,
		//|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
		//|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
		//|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
		//|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
		//|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
		//|	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК КонтрагентНаименование
		//|ИЗ
		//|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		//|		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
		//|ГДЕ
		//|	РеализацияТоваровУслуг.Ссылка В(&МасСсылок)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ЗаборТовара.Ссылка,
		//|	2,
		//|	ЗаборТовара.Номер,
		//|	ЗаборТовара.НомерВнешнегоЗаказа,
		//|	ЗаборТовара.ТочкаДоставки.Адрес.Наименование,
		//|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
		//|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
		//|	ЗаборТовара.Контрагент.Наименование
		//|ИЗ
		//|	Документ.ЗаборТовара КАК ЗаборТовара
		//|ГДЕ
		//|	ЗаборТовара.Ссылка В(&МасСсылок)";
		
		//Новый запрос
		
		Зап.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	1 КАК ТипЗаказа,
		|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
		|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
		|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
		|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
		|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
		|	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК КонтрагентНаименование
		|ИЗ
		|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&МасСсылок)
		//+Широков 24.06.2021 Задача 4607
		|  И ДополнительныеПараметрыЗаказа.ВнешнийОператорМаршрутизации.Ссылка ЕСТЬ NULL
		//-Широков 24.06.2021 Задача 4607
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаборТовара.Ссылка,
		|	2,
		|	ЗаборТовара.Номер,
		|	ЗаборТовара.НомерВнешнегоЗаказа,
		|	ЗаборТовара.ТочкаДоставки.Адрес.Наименование,
		|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
		|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
		|	ЗаборТовара.Контрагент.Наименование
		|ИЗ
		|	Документ.ЗаборТовара КАК ЗаборТовара
		|ГДЕ
		|	ЗаборТовара.Ссылка В(&МасСсылок)";
		
		//-Широков 16.07.2021 Задача 4607	

		Зап.УстановитьПараметр("МасСсылок", МассивСсылок);
		
		Выб = Зап.Выполнить().Выбрать();
		
		МассивВозврата = Новый Массив;
		
		
		Пока Выб.Следующий() Цикл
			Струк = Новый Структура;
			Струк.Вставить("Заказ");
			Струк.Вставить("ТипЗаказа");
			Струк.Вставить("НомерЗаказа");
			Струк.Вставить("НомерЗаказаИМ");
			Струк.Вставить("Адрес");
			Струк.Вставить("Широта");
			Струк.Вставить("Долгота");
			Струк.Вставить("УИД");
			Струк.Вставить("КонтрагентНаименование");
			Струк.Вставить("НомерДерева");
			
			УИД = Выб.Заказ.УникальныйИдентификатор();
			
			
			ЗаполнитьЗначенияСвойств(Струк, Выб);
			
			
			СтрукП = Новый Структура;
			СтрукП.Вставить("УИД", Строка(УИД));
			НайСтроки = СписокТочекНаКартеТЗ.НайтиСтроки(СтрукП);
			Если НайСтроки.Количество() <> 0 Тогда
				Струк.НомерДерева = НайСтроки[0].НомерДерева;
			КонецеСли;	
			
			
			
			Струк.Адрес = СтрЗаменить(Струк.Адрес, "'", "");
			Струк.Адрес = СтрЗаменить(Струк.Адрес, """", "");
			
			Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, "'", "");
			Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, """", "");
			
			
			Струк.УИД = УИД;
			
			МассивВозврата.Добавить(Струк);
		КонецЦикла;	
		
		Возврат МассивВозврата;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции	

#Область ФункцииСиШарп

//&НаКлиенте
//Процедура ВыполнитьСкрипт(Команда)
//	Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
//		ДИВ = Элементы.ПолеXTML.Документ.getElementById("TEST");
//		
//		НашлиАтрибут = ДИВ.getAttributeNode("onclick");
//		Если НашлиАтрибут <> null Тогда
//			ДИВ.removeAttribute("onclick");
//		КонецЕсли; 
//		
//		Атрибут  = Элементы.ПолеXTML.Документ.createAttribute("onclick");
//		Атрибут.value = Команда;
//		ДИВ.attributes.setNamedItem(Атрибут); // привязываем атрибут
//		
//		ДИВ.click();
//	Иначе	
//		Элементы.ПолеXTML.Document.parentWindow.eval(Команда);
//	КонецеСли;	
//КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	
	Попытка
		//+Степанов Ветвление в зависимости от использования WebKit
		Если ИспользованиеWebKit И ПолеXTMLБылоСформировано Тогда
			Элементы.ПолеXTML.Документ.defaultView.exec(Команда);	
		Иначе	
			Элементы.ПолеXTML.Документ.parentWindow.exec(Команда);
		КонецЕсли;
	Исключение
		//Сообщить(ОписаниеОшибки());
	конецпопытки;
	
	Возврат;
	ДИВ = Элементы.ПолеXTML.Документ.getElementById("TEST");
	
	НашлиАтрибут = ДИВ.getAttributeNode("onclick");
	Если НашлиАтрибут <> null Тогда
		ДИВ.removeAttribute("onclick");
	КонецЕсли; 
	
	Атрибут  = Элементы.ПолеXTML.Документ.createAttribute("onclick");
	Атрибут.value = Команда;
	ДИВ.attributes.setNamedItem(Атрибут); // привязываем атрибут
	
	ДИВ.click();
	
КонецПроцедуры


&НаКлиенте
Функция MapsFrom1C_OnSelectPoints(Параметр1) Экспорт
	СтрокаСТочками = СтрЗаменить(Параметр1, ",", Символы.ПС);
	
	МассивУИД = Новый Массив;
	
	Для Сч = 1 По СтрЧислоСтрок(СтрокаСТочками) Цикл
		Точка = СтрПолучитьСтроку(СтрокаСТочками, Сч);
		
		Струк = Новый Структура;
		Струк.Вставить("УИД", Точка);
		НайСтрока = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Струк);
		
		Если НайСтрока.Количество() = 0 Тогда
			массивУИД.Добавить(Точка);
			НомерСтиля_v2 = 1;
			СменитьСтильМаркераСтроки(Точка, 1);
		Иначе
			НомерСтиля_v2 = 0;
			Если НайСтрока[0].НомерДерева = 1 Тогда
				НомерЦвета = 8;
			Иначе
				НомерЦвета = 0;
			КонецЕСли;	
			//Если НайСтрока[0].ТипЗаказа = 1 Тогда
			СменитьСтильМаркераСтроки(Точка, НомерЦвета);
			//Иначе
			//	СменитьСтильМаркераСтроки(Точка, НомерЦвета);
			//КонецеСли;
			Для СчВ = 0 По НайСтрока.Количество() - 1 Цикл
				СписокВыделенныхТочекНаКартеТЗ.Удалить(НайСтрока[СчВ]);
			КонецЦикла;	
		КонецеСли;	
	КонецЦикла;	
	
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		Если МассивУИД.Найти(Тек.УИД) = Неопределено Тогда
			МассивУИД.Добавить(Тек.УИД);
		КонецеСли;	
	КонецЦикла;	
	
	
	МассивЗаказов = ПолучитьМассивЗаказовПоУИД(МассивУИД);
	
	Если МассивЗаказов <> Неопределено Тогда
		Для Каждого Тек Из МассивЗаказов Цикл
			Струк = Новый Структура;
			Струк.Вставить("УИД", Строка(Тек.УИД));
			НайСтроки = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Струк);
			
			Если НайСтроки.Количество() <> 0 Тогда
				Продолжить;
			КонецеСли;	
			Нов = СписокВыделенныхТочекНаКартеТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Тек);
		КонецЦикла;	
	КонецЕсли;
	
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецФункции

&НаКлиенте
Функция MapsFrom1C_GetVenicleMenuItems() Экспорт
	Стр = "";
	
	Для Каждого Тек Из СписокРейсовДляКонтекстногоМеню Цикл
		НаимП = СтрЗаменить(Тек.Значение.НаимПунктаМеню, "_", Символы.ПС);
		//НаимП = СтрПолучитьСтроку(НаимП, 2);
		Стр = Стр + НаимП + "," + Тек.Представление + ";";
	КонецЦикла;	
	
	Стр = Стр + "";
	Возврат Стр;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьНомерДокумента(ТекЗаказ)
	Если ТипЗнч(ТекЗаказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат ТекЗаказ.Номер;
	ИначеЕсли ТипЗнч(ТекЗаказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда
		Возврат ТекЗаказ.Номер;
	КонецЕсли;
КонецФункции

&НаКлиенте
//+Широков по письму
Функция ПолучитьСписокПолигоновДляПересчета(МассивЗаказов)
	МассивРезультатов = Новый Массив;
	Для Каждого ЭлементМассиваЗаказ ИЗ МассивЗаказов Цикл  
		Для Каждого ГруппаДерева Из ДеревоПолигоновСЗаказами.ПолучитьЭлементы() Цикл
			Для Каждого ЭлементГруппаДерева Из ГруппаДерева.ПолучитьЭлементы() Цикл
				Если СокрЛП(ЭлементГруппаДерева.НомерЗаказа) = СокрЛП(ЭлементМассиваЗаказ) Тогда
					МассивРезультатов.Добавить(ГруппаДерева.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Возврат МассивРезультатов;	
КонецФункции

Функция ПолучитьМассивИдентификаторовРейсовДляПересчета(КодТранспорта)
	МассивРезультатов = Новый Массив;
	ФлагНашли = Ложь;
	Для Каждого ГруппаДерева Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
		Для Каждого ЭлементГруппаДерева Из ГруппаДерева.ПолучитьЭлементы() Цикл
			Если СокрЛП(ЭлементГруппаДерева.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
				МассивРезультатов.Добавить(ГруппаДерева.ПолучитьИдентификатор());
				ФлагНашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ФлагНашли Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивРезультатов;	
	
КонецФункции
//-Широков по письму

//+Широков 31.03.2021 по письму
//&НаКлиенте
//Функция ПолучитьДерево()
//	ЕстьДерево = Истина;
//	//	Дерево = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
//	Дерево = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
//	Для каждого СтрокаРейсГруппа Из Дерево Цикл
//		Если СтрокаРейсГруппа.Отметка > 0 Тогда
//			ЕстьДерево = Ложь;
//			Прервать;
//		КонецЕсли; 
//		
//		//Идем по элементам группировки
//		//Для каждого Стр ИЗ СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
//		//	Если Стр.Отметка = 1 Тогда
//		//		ЕстьДерево = Истина;
//		//		Прервать;
//		//	КонецЕсли; 
//		//КонецЦикла;
//	КонецЦикла;
//	Возврат ЕстьДерево;
//КонецФункции
//-Широков 31.03.2021 по письму

//+Широков 31.03.2021 по письму
//&НаКлиенте
//Процедура УдалитьСтрокиИзРейсовПоОтметкам(МассивЗначений, ИмяРеквизитаДерева)
//	//Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
//	Если ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
//		//Дерево = ДанныеФормыВЗначение(ДеревоРейсовСЗаказами, Тип("ДеревоЗначений"));
//		Дерево = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
//	ИначеЕсли ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда	
//		//Дерево = ДанныеФормыВЗначение(ДеревоПолигоновСЗаказами, Тип("ДеревоЗначений"));
//		Дерево = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
//		//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(
//	КонецЕсли;	
//	
//	
//	СтрокаРейса = Неопределено;
//	//Идем по группировкам дерева
//	Для каждого СтрокаРейсГруппа Из Дерево Цикл
//		//Идем по элементам группировки
//		ЕстьПересчетИтогов = Ложь;
//		Для каждого Стр ИЗ СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
//			Попытка
//				Если Стр.Отметка = 1 Тогда
//					СтрокаРейсГруппа.ПолучитьЭлементы().Удалить(Стр);
//					ЕстьПересчетИтогов = Истина;
//				КонецЕсли; 
//			Исключение
//				Сообщить(ОписаниеОшибки());
//			КонецПопытки;
//		КонецЦикла;
//		Если ЕстьПересчетИтогов Тогда
//			//ПересчитатьИтогПоСтрокеДерева(СтрокаРейсГруппа);
//			
//			//Широков 16.09.2020
//			ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
//			Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
//				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
//				Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
//					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
//				КонецЦикла;	
//			КонецЦикла;	
//		КонецЕсли;
//		
//	КонецЦикла;
//	Для каждого СтрокаРейсГруппа Из Дерево Цикл
//		//Идем по элементам группировки
//		Если СтрокаРейсГруппа.ПолучитьЭлементы().Количество() = 0 Тогда
//			Дерево.Удалить(СтрокаРейсГруппа);
//		КонецЕсли;
//	КонецЦикла;
//	СписокВыделенныхТочекНаКарте.Очистить();
//КонецПроцедуры	
//-Широков 31.03.2021 по письму


//Широков
&НаКлиенте
Процедура ДобавитьЗаказыВДеревоРейсовИзРейсов(МассивЗаказов, КодТранспорта)
	
	//найдем рейсы
	НовыйРодитель = Неопределено;
	
	МассивЭлементовДереваНаУдаление = новый Массив;
	МассивГруппДереваНаПересчет = Новый Массив;
	//Для каждого ЭлементМассива Из МассивИдентификаторовРейсовДляПересчета Цикл
	//	СтрокаРейс = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива);
	
	Для каждого СтрокаРейс Из ДеревоРейсовСзаказами.ПолучитьЭлементы() Цикл
		Если СокрЛП(СтрокаРейс.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
			НовыйРодитель = СтрокаРейс;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		
		//добавим новую строку
		ЭлементДереваПолигонов = Неопределено;
		
		Для Каждого ЭлементМассива Из МассивРейсовСПометками Цикл
			Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);	
			Если НЕ Стр = Неопределено Тогда
				//МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ); //Широков  .2021 по письму

				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					Стр.ПолучитьРодителя().Отметка = 0;
				КонецЕсли;
				Стр.Отметка = 0;
				Если НЕ МассивЗаказов.Найти(СокрЛП(ЭлементМассива.Значение.НомерЗаказа)) = Неопределено Тогда
					
					МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ); //Широков 22.03.2021 по письму
				//Если НЕ Стр = Неопределено Тогда
						ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(Стр.ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивЭлементовДереваНаУдаление.Добавить(Стр.ПолучитьИдентификатор());
						КонецЕсли;
						
					СтарыйРодитель =  Стр.ПолучитьРодителя();
					Если НЕ СтарыйРодитель = Неопределено Тогда
						ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						КонецЕсли;
					КонецЕсли;
						
							ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(НовыйРодитель.ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(НовыйРодитель.ПолучитьИдентификатор());
						КонецЕсли;
						
						НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НС, Стр);
						НС.ИндивидуальнаяМаршрутизация = Истина;
						НС.Отметка 		= 0;
						НС.ДокументПроверен = Ложь;
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
//Широков 22.03.2021 по письму закомментировал
//МассивРейсовСПометками.Очистить();
//МассивПолигоновСПометками.Очистить();
//Широков 22.03.2021 по письму закомментировал
		
		//Удаляем обработанные заказы
		Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
			Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			СтарыйРодитель =  Стр.ПолучитьРодителя();
			Если НЕ СтарыйРодитель = Неопределено Тогда
				Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
			КонецЕсли;
		КонецЦикла;
		//Пересчитаем группы
		ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
		Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
			СтрокаРейсГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Выполнить("СтрокаРейсГруппа.Итого = 0");
			
			Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
				Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
				КонецЦикла;	
				Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
			КонецЦикла;	
		//ОбновитьФлажки(СтрокаРейсГруппа);
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры // ()

&НаКлиенте
Функция MapsFrom1C_VenicleMenuCommand(Param) Экспорт
	
	//+Широков по письму	
	ФлагКарта = Ложь;
	МассивЗначений2 = Новый Массив;
	//-Широков по письму	
	
	
	КодТранспорта = Param;
	
	Мас = Новый Массив;
	
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Тек.Заказ);
		Мас.Добавить(Струк);
		
		МассивЗначений2.Добавить(СокрЛП(ПолучитьНомерДокумента(Тек.Заказ)));//Широков по письму
	КонецЦикла;		
	
	Если Мас.Количество()>0 Тогда //Широков 08.04.2021 по письму
	//Если Не МаршрутизацияЗакрыта Тогда
		//+Широков по письму
	Если НЕ МаршрутизацияЗакрыта Тогда
		//Рез = ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(Мас, КодТранспорта, "");
		//Здесь удаляются заказы из дерева полигонов
		//Рез = ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(Мас, КодТранспорта, "ДеревоПолигоновСЗаказами");
		//Зафиксируем индивидуальную маршрутизацию на уровне базы
ЗаписатьВЛог("MapsFrom1C_VenicleMenuCommand ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыБезУдаления", Мас, КодТранспорта); //Широков 06.04.2021 логирование
		Рез = ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыБезУдаления(Мас, КодТранспорта, "ДеревоПолигоновСЗаказами");
		//-Широков по письму
		//CeHbKA #3437 10.09.2019
		//ОбновитьДанные(Истина, Истина, Истина);
	Иначе
		//+Широков по письму 14.10.2020
		//ПоложитьЗаказыВРейсИзДереваРейсов(Мас, КодТранспорта, ДатаПланирования, Регион);
ЗаписатьВЛог("MapsFrom1C_VenicleMenuCommand ПоложитьЗаказыВРейсИзДереваРейсов", МассивЗначений2, КодТранспорта); //Широков 06.04.2021 логирование
		ПоложитьЗаказыВРейсИзДереваРейсов(МассивЗначений2, КодТранспорта, ДатаПланирования, Регион);
		//-Широков по письму 14.10.2020
		//CeHbKA #3437 10.09.2019
		//ОбновитьДанные(Истина, Истина, Истина);
		//Асеев 01.11.2022 (Задача № 4919)>>>
		НапечататьБланкиЗаказовПоНомерам(МассивЗначений2);
		//Асеев 01.11.2022 (Задача № 4919)<<<
	КонецЕсли;	
	//CeHbKA #3437 10.09.2019
	//+Широков по письму
	
	//Перерисуем интерфейсы с минимальными изменениями
	
	//Определим из какого дерева мы закидывали заказы на маршрутизацию
	//где стоят отметки, там и дерево
	//ЭтоДеревоПолигонов = ПолучитьДерево();  //Широков 16.11.2020
	
	//Получить список рейсов для пересчета (код транспорта)
		//МассивИдентификаторовРейсовДляПересчета = Новый Массив;
	
	////Если ЭтоДеревоПолигонов Тогда    //Широков 16.11.2020
	////	
	////	//Получить список полигонов для пересчета
	////	//		МассивИдентификаторовПолигоновДляПересчета = ПолучитьСписокПолигоновДляПересчета(МассивЗначений2);
	////	МассивИдентификаторовПолигоновДляПересчета = Новый Массив;
	////	
	////	//Добавить заказы в дерево рейсов с заказами
	////	//Создаем новый элемент в дереве рейсов и копируем его свойства из дерева заказов с полигонами
	////	ДобавитьЗаказыВДеревоРейсов(МассивЗначений2, КодТранспорта, МассивИдентификаторовПолигоновДляПересчета);
	////	
	////	
	////Иначе
	////	
	////	МассивИдентификаторовПолигоновДляПересчета = Новый Массив;
	////	//Добавить заказы в дерево рейсов с заказами
	////	//Создаем новый элемент в дереве рейсов и копируем его свойства из дерева заказов с полигонами
	////	ДобавитьЗаказыВДеревоРейсовИзРейсов(МассивЗначений2, КодТранспорта);
	////	
	////	
	////КонецЕсли;
		ДобавитьЗаказыСКартыВДеревоРейсов(МассивЗначений2, КодТранспорта);  //Широков 16.11.2020
ЗаписатьВЛог("MapsFrom1C_VenicleMenuCommand ДобавитьЗаказыСКартыВДеревоРейсов", Мас, КодТранспорта); //Широков 06.04.2021 логирование
		
		//Широков 22.03.2021 по письму
		//Т = ПолучитьМассивЗаказовСКарты(МассивИдентификаторовРейсовДляПересчета);
		//Широков 22.03.2021 по письму
		
		//	ПересчитатьДеревоРейсов(ПолучитьМассивЗаказовСКарты(МассивИдентификаторовРейсовДляПересчета), КодТранспорта, "ДеревоРейсовСЗаказами", МассивИдентификаторовПолигоновДляПересчета);
	
	//Пересчитать элементы дерева рейсов с заказами
	//Рассчитать итоговые показатели
	РассчитатьИтоговоеКоличествоЗаказов();
	
		
	//ОбновитьДанные(Истина, Ложь, Ложь);
	СписокВыделенныхТочекНаКартеТЗ.Очистить();
	СформироватьНадписьДекорацииВыделенныхЗаказов();
	//CeHbKA #3437 10.09.2019
	
	//Широков 23.10.2020 по письму
	Если ВыделятьПолигоныНаКарте Тогда
		ВыделениеПолигоновНаКарте();
	КонецЕсли;
	//ОчиститьТочкиНаКарте();
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	
	КонецЕсли;   //Широков 08.04.2021 по письму
	
	Возврат "";
КонецФункции	


//CeHbKA #3437 10.09.2019
Функция ПолучитьМассивЗаказовСКарты(МассивВыделенныхЗаказов)
	
	МассивЗаказов = Новый Массив;
	
	Если НЕ МассивВыделенныхЗаказов = Неопределено Тогда //Широков по письму
		Для каждого СтрокаМассива Из МассивВыделенныхЗаказов Цикл
			
			ЗаказыСКарты = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Новый Структура("Заказ", СтрокаМассива));
			
			Если ЗаказыСКарты.Количество() > 0 Тогда
				МассивЗаказов.Добавить(СтрокаМассива);	
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; //Широков по письму
	
	Возврат МассивЗаказов;
	
КонецФункции 
//CeHbKA #3437 10.09.2019

&НаКлиенте
Функция MapsFrom1C_ClickOnPoligon(Param) Экспорт
	//КоллекцияЭлементовДерева = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
	//
	//Полигон = ПолучитьПолигонПоИмени(Param);
	//
	//Если Полигон = Неопределено Тогда
	//	Возврат "";
	//КонецеСли;	
	//
	//Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
	//	Если СтрокаДерева.ПолигонМаршрутизации = Полигон Тогда 
	//		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
	//		Элементы.ДеревоПолигоновСЗаказами.ТекущаяСтрока = ИдентификаторСтроки;
	//	КонецЕсли; 
	//КонецЦикла; 	
	
	Возврат "";
КонецФункции


&НаКлиенте
Функция MapsFrom1C_CalcRoute(Param) Экспорт
	Стр = СтрЗаменить(Param, ";", Символы.ПС);
	
	Рейс = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Рейс;
	Нов = ТЗМаршрутов.Добавить();
	Нов.Рейс = Рейс;
	Нов.ИдМаршрута = СтрПолучитьСтроку(Стр, 1);
	Нов.Расстояние = Число(СтрПолучитьСтроку(Стр, 2));
	Нов.Время = Число(СтрПолучитьСтроку(Стр, 3));
КонецФункции	

&НаСервере
Функция СнятьОтметкуВДеревьях(УИД)
	Струк = Новый Структура();
	Струк.Вставить("УИД", УИД);
	
	Най = СписокТочекНаКартеТЗ.НайтиСтроки(Струк);
	//+Широков по письму
	//	Если Най.Количество() Тогда
	Если Най.Количество() > 0 Тогда
		//-Широков по письму
		ТипДерева = Най[0].НомерДерева;
	КонецеСли;	
	
	Если ТипДерева = 1 Тогда
		Д = РеквизитФормыВЗначение("ДеревоПолигоновСЗаказами", Тип("ДеревоЗначений"));
	Иначе
		Д = РеквизитФормыВЗначение("ДеревоРейсовСЗаказами", Тип("ДеревоЗначений"));
	КонецЕсли;	
	
	
	Строки = Д.Строки.НайтиСтроки(Струк, Истина);
	//+Широков по письму
	//	Если Строки.Количество() Тогда
	Если Строки.Количество() > 0 Тогда
		//-Широков по письму
		Для Каждого Тек Из Строки Цикл
			Тек.Отметка = Ложь;
		КонецЦикла;	
		Если ТипДерева = 1 Тогда
			ЗначениеВРеквизитФормы(Д, "ДеревоПолигоновСЗаказами");
		Иначе
			ЗначениеВРеквизитФормы(Д, "ДеревоРейсовСЗаказами");
		КонецеСли;	
	КонецеСли;	
	
	СписокТочекНаКартеТЗ.Удалить(Най[0]);
	
	Возврат ТипДерева;
КонецФункции

&НаКлиенте
Функция СнятьОтметкуВДеревьяхНаКлиенте(УИД)
	Струк = Новый Структура();
	Струк.Вставить("УИД", УИД);
	
	Най = СписокТочекНаКартеТЗ.НайтиСтроки(Струк);
	//+Широков по письму
	//	Если Най.Количество() Тогда
	Если Най.Количество() > 0 Тогда
		//-Широков по письму
		ТипДерева = Най[0].НомерДерева;
	КонецеСли;	
	
	Если ТипДерева = 1 Тогда
		Д = ДеревоПолигоновСЗаказами;
		//+Широков по письму 25.03.2021
		Для Каждого ЭлементМассива ИЗ МассивПолигоновСПометками Цикл
			Если СокрЛП(ЭлементМассива.Значение.УИД) = УИД Тогда
				МассивПолигоновСПометками.Удалить(ЭлементМассива.Ключ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//-Широков по письму 25.03.2021
	Иначе
		Д = ДеревоРейсовСЗаказами;
		//+Широков по письму 25.03.2021
		Для Каждого ЭлементМассива ИЗ МассивРейсовСПометками Цикл
			Если СокрЛП(ЭлементМассива.Значение.УИД) = УИД Тогда
				МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//-Широков по письму 25.03.2021
	КонецЕсли;
	
	
	
	Строки = Д.ПолучитьЭлементы();
	Для Каждого Тек Из Строки Цикл
		СтрокиЗаказов = Тек.ПолучитьЭлементы();
		Для Каждого ТекЗаказ Из СтрокиЗаказов Цикл
			Если ТекЗаказ.УИД = УИД Тогда
				ТекЗаказ.Отметка = 0;
				УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(ТекЗаказ.УИД);
				Прервать;
			КонецеСли;	
		КонецЦикла;	
	КонецЦикла;	
	//+Широков по письму
	//	Если Най.Количество() Тогда 
	Если Най.Количество() > 0 Тогда 
		//-Широков по письму
		СписокТочекНаКартеТЗ.Удалить(Най[0]);
	КонецЕсли;	
	
	Возврат ТипДерева;
КонецФункции


&НаКлиенте
Функция MapsFrom1C_OnDeletePointFromMap(Param) Экспорт
	ТипДерева = СнятьОтметкуВДеревьяхНаКлиенте(Param);
	Если ТипДерева = 1 Тогда
		ИнициализацияРодительскихФлажков("ДеревоПолигоновСЗаказами");
	Иначе	
		ИнициализацияРодительскихФлажков("ДеревоРейсовСЗаказами");
	КонецЕсли;	
	//Сообщить(Param);
	Возврат "";
КонецФункции

#КонецОбласти


#Область РаботаСПолемКарты

&НаКлиенте
Процедура СформироватьНадписьДекорацииВыделенныхЗаказов()
	МассивФорматированныхСтрок = Новый Массив;
	
	Если СписокВыделенныхТочекНаКартеТЗ.Количество() > 0 Тогда
		СтрокаВыделенныхЗаказовПоЗаказу = Новый ФорматированнаяСтрока("Заказы (" + Формат(СписокВыделенныхТочекНаКартеТЗ.Количество(), "") + " шт.): ",Новый Шрифт(,,Истина));
	Иначе	
		СтрокаВыделенныхЗаказовПоЗаказу = Новый ФорматированнаяСтрока("Заказы не выделены",Новый Шрифт(,,Истина));
	КонецеСли;
	
	МассивФорматированныхСтрок.Добавить(СтрокаВыделенныхЗаказовПоЗаказу); 
	
	Сч = 1;
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		СтрокаВыделенныхЗаказовПоЗаказу = Новый ФорматированнаяСтрока(СокрЛП(Тек.НомерЗаказа), Новый Шрифт(,,Истина), WebЦвета.Красный,, ПолучитьНавигационнуюСсылку(Тек.Заказ));
		МассивФорматированныхСтрок.Добавить(СтрокаВыделенныхЗаказовПоЗаказу);
		Если Сч <> СписокВыделенныхТочекНаКартеТЗ.Количество() Тогда
			МассивФорматированныхСтрок.Добавить(", ");
		КонецеСли;	
		
		Сч = Сч + 1;
	КонецЦикла;	
	
	Элементы.ДекорацияВыделенныеЗаказы.Заголовок = Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(УИД)
	Струк = Новый Структура;
	Струк.Вставить("УИД", Строка(УИД));
	НайСтроки = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Струк);
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		СписокВыделенныхТочекНаКартеТЗ.Удалить(Тек);
	КонецЦикла;	
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаказИзСпискаВыделенныхЗаказовНаКартеНаСервере(УИД)
	Струк = Новый Структура;
	Струк.Вставить("УИД", Строка(УИД));
	НайСтроки = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Струк);
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		СписокВыделенныхТочекНаКартеТЗ.Удалить(Тек);
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьВыделениеЗаказовНаКарте(Команда)
	имяСтиляДоставка = "cr1_1_2";
	имяСтиляЗабор = "tr1_1_2";
	НомерСтиля_v2 = 0;
	
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		//Если Тек.ТипЗаказа = 1 Тогда
		//	СменитьСтильМаркераСтроки(Тек.УИД, имяСтиляДоставка, НомерСтиля_v2);
		//Иначе
		//	СменитьСтильМаркераСтроки(Тек.УИД, имяСтиляЗабор, НомерСтиля_v2);
		//КонецеСли;
		
		Если Тек.НомерДерева = 1 Тогда
			НомерЦвета = 8;
		Иначе
			НомерЦвета = 0;
		КонецеСли;
		СменитьСтильМаркераСтроки(Тек.УИД, НомерЦвета);
	КонецЦикла;	
	СписокВыделенныхТочекНаКартеТЗ.Очистить();
	
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтильМаркераСтроки(УИД, НомерЦвета)
	
	Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		ВызовФункции = "changeStyleByUID('" + УИД + "'," + НомерЦвета + ")";
		//Иначе	
		//	ВызовФункции = "changeStyleByUID('" + УИД + "','" + СтильМетки + "')";
	КонецеСли;	
	
	ВыполнитьСкрипт(ВызовФункции);
	
	//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда  Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = ВызовФункции;
	//Иначе	
	//	Элементы.ПолеXTML.Document.parentWindow.eval(ВызовФункции);
	//КонецеСли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеXTMLДокументСформирован(Элемент)
	
	//+Степанов Ветвление в зависимости от версии платформы и использования WebKit
	Если ИспользованиеWebKit Тогда
		ОкноБраузера = Элементы.ПолеXTML.Документ.DefaultView;
		//ОкноБраузера.document.body.draggable = Истина;
		//ОкноБраузера.s.draggable = Истина;
		//ОкноБраузера.window.document.documentElement.draggable = Истина;
		//ОкноБраузера.document.head.draggable = Истина;
		//ОкноБраузера.frames.document.head.draggable = Истина;
		//Элементы.ПолеXTML.Документ.activeElement.firstElementChild.draggable = Истина;
		//ОкноБраузера.document.activeElement.children[1].draggable = Истина;
		//ОкноБраузера.document.activeElement.children[2].draggable = Истина;
		//ОкноБраузера.document.activeElement.children[3].draggable = Истина;
		//ОкноБраузера.document.activeElement.children[4].draggable = Истина;
		//ОкноБраузера.document.activeElement.children[5].draggable = Истина;
		//ОкноБраузера.document.activeElement.children[6].draggable = Истина;
		//ОкноБраузера.document.activeElement.children[7].draggable = Истина;
		//ОкноБраузера.document.activeElement.children[8].draggable = Истина;
	Иначе	
		ОкноБраузера = Элементы.ПолеXTML.Документ.parentWindow;
		ОкноБраузера.SetForm1C(ЭтаФорма);
	КонецЕсли;
	ОкноБраузера.WebKitUsage = ИспользованиеWebKit;
	ПолеXTMLБылоСформировано = Истина;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Если ИспользованиеWebKit Тогда
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			//Возврат Обработки.ПолигональныйМаршрутизатор.ПолучитьМакет("МакетСтриж_v2_WebKit_test");
			Обработка = РеквизитФормыВЗначение("Объект");
			Возврат Обработка.ПолучитьМакет("МакетСтриж_v2_WebKit_test");
		Иначе 	
			//Возврат Обработки.ПолигональныйМаршрутизатор.ПолучитьМакет("МакетСтриж_v2_WebKit");
			Обработка = РеквизитФормыВЗначение("Объект");
			Возврат Обработка.ПолучитьМакет("МакетСтриж_v2_WebKit");
		КонецЕсли;
	Иначе	
		Возврат Обработки.ПолигональныйМаршрутизатор.ПолучитьМакет(ИмяМакета);
	КонецеСли;	
КонецФункции	

//+Широков по письму
&НаКлиенте
Процедура ОбновитьПолеКартыNew(ШиринаКарты = Неопределено, ВысотаКарты = Неопределено)
	
	Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		Макет = ПолучитьМакетНаСервере("МакетСтриж_v2");		
	Иначе	
		Макет = ПолучитьМакетНаСервере("МакетСтриж");
	КонецеСли;	
	
	КодХТМЛ = Макет.ПолучитьТекст();
	
	
	Если Объект.ВерсияКартыПолигональногоМаршрутизатора <> "v2" Тогда
		СтрокаСтиляНачальная = "CreateIconStyle('s8',""C:/icons_/kv2_5_x.gif"");";
		
		СтрокаСтиляИтоговая = "";
		
		имяКаталогаКартинок = "C:\icons_";
		КаталогКартинок = Новый Файл(имяКаталогаКартинок);
		Если КаталогКартинок.ЭтоКаталог() тогда
			МассивНайденных = НайтиФайлы(имяКаталогаКартинок, "*.gif");
			Для Каждого Файл из МассивНайденных Цикл 
				
				времСтрокаСтиля = СтрокаСтиляНачальная;
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "s8", сокрЛП(Файл.ИмяБезРасширения));
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "C:/icons_/kv2_5_x.gif", "C:/icons_/" + сокрЛП(Файл.Имя));
				
				СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + времСтрокаСтиля + символы.ПС;
				
			КонецЦикла; 
			
			МассивНайденных = НайтиФайлы(имяКаталогаКартинок, "*.png");
			Для Каждого Файл из МассивНайденных Цикл 
				
				времСтрокаСтиля = СтрокаСтиляНачальная;
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "s8", сокрЛП(Файл.ИмяБезРасширения));
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "C:/icons_/kv2_5_x.gif""", "C:/icons_/" + сокрЛП(Файл.Имя) + """, true");
				
				СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + времСтрокаСтиля + символы.ПС;
				
			КонецЦикла; 
		конецЕсли;	
		СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + СтрокаСтиляНачальная + символы.ПС;
		
		КодХТМЛ = стрЗаменить(КодХТМЛ, "/*vstavkaStiley;", СтрокаСтиляИтоговая);
	КонецеСли;
	
	СтрокаЗапросаСкрипта = "";
	
	КодХТМЛ = стрЗаменить(КодХТМЛ, "^ЗапросОбновленияПолигонов^", СтрокаЗапросаСкрипта);		
	
	путьККаталогуКартинок = СтрЗаменить(КаталогПрограммы(), "\", "/");
	Если ШиринаКарты = Неопределено Или ВысотаКарты = Неопределено Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^РазмерыКарты^","width:900px;height:650px");
	Иначе
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^РазмерыКарты^","width:" + Формат(Ширина, "ЧГ=") + "px;height:" + Формат(Высота, "ЧГ=") + "px");
	КонецеСли;	
	
	
	//+Степанов
	Если ЭтоТестоваяСреда() Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^","25");
	Иначе
		Если ПолигональнаяСхемаКарты.Пустая() Тогда
			КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^","");
		Иначе	
			КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^",Формат(ПолигональнаяМаршрутизацияСервер.ИдентификаторСхемыПолигонов(ПолигональнаяСхемаКарты), "ЧГ="));
		КонецеСли;	
	КонецЕсли;	
	//-Степанов
	
	Если Регион.Пустая() Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрЦентрКарты^","55.75, 37.62");
	Иначе	
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрЦентрКарты^",ПолигональнаяМаршрутизацияСервер.КоординатыЦентраКарты(Регион));
	КонецеСли;	
	
	
	ДанныеXTML = КодХТМЛ;
	
	ОбновитьДанные(Ложь);	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПолеКарты(ШиринаКарты = Неопределено, ВысотаКарты = Неопределено)
	
	Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		Макет = ПолучитьМакетНаСервере("МакетСтриж_v2");		
	Иначе	
		Макет = ПолучитьМакетНаСервере("МакетСтриж");
	КонецеСли;	
	
	КодХТМЛ = Макет.ПолучитьТекст();
	
	
	Если Объект.ВерсияКартыПолигональногоМаршрутизатора <> "v2" Тогда
		СтрокаСтиляНачальная = "CreateIconStyle('s8',""C:/icons_/kv2_5_x.gif"");";
		
		СтрокаСтиляИтоговая = "";
		
		имяКаталогаКартинок = "C:\icons_";
		КаталогКартинок = Новый Файл(имяКаталогаКартинок);
		Если КаталогКартинок.ЭтоКаталог() тогда
			МассивНайденных = НайтиФайлы(имяКаталогаКартинок, "*.gif");
			Для Каждого Файл из МассивНайденных Цикл 
				
				времСтрокаСтиля = СтрокаСтиляНачальная;
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "s8", сокрЛП(Файл.ИмяБезРасширения));
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "C:/icons_/kv2_5_x.gif", "C:/icons_/" + сокрЛП(Файл.Имя));
				
				СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + времСтрокаСтиля + символы.ПС;
				
			КонецЦикла; 
			
			МассивНайденных = НайтиФайлы(имяКаталогаКартинок, "*.png");
			Для Каждого Файл из МассивНайденных Цикл 
				
				времСтрокаСтиля = СтрокаСтиляНачальная;
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "s8", сокрЛП(Файл.ИмяБезРасширения));
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "C:/icons_/kv2_5_x.gif""", "C:/icons_/" + сокрЛП(Файл.Имя) + """, true");
				
				СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + времСтрокаСтиля + символы.ПС;
				
			КонецЦикла; 
		конецЕсли;	
		СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + СтрокаСтиляНачальная + символы.ПС;
		
		КодХТМЛ = стрЗаменить(КодХТМЛ, "/*vstavkaStiley;", СтрокаСтиляИтоговая);
	КонецеСли;
	
	СтрокаЗапросаСкрипта = "";
	
	КодХТМЛ = стрЗаменить(КодХТМЛ, "^ЗапросОбновленияПолигонов^", СтрокаЗапросаСкрипта);		
	
	путьККаталогуКартинок = СтрЗаменить(КаталогПрограммы(), "\", "/");
	Если ШиринаКарты = Неопределено Или ВысотаКарты = Неопределено Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^РазмерыКарты^","width:900px;height:650px");
	Иначе
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^РазмерыКарты^","width:" + Формат(Ширина, "ЧГ=") + "px;height:" + Формат(Высота, "ЧГ=") + "px");
	КонецеСли;	
	
	
	//+Степанов
	Если ЭтоТестоваяСреда() Тогда
		//+Широков  по письму
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^","25");
		//КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^",ИдСхемы);
		
		//КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^",Формат(ПолигональнаяМаршрутизацияСервер.ИдентификаторСхемыПолигонов(ПолигональнаяСхемаКарты), "ЧГ="));
		//Сообщить(КодХТМЛ);
		
		//-Широков  по письму
	Иначе
		Если ПолигональнаяСхемаКарты.Пустая() Тогда
			КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^","");
		Иначе	
			КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^",Формат(ПолигональнаяМаршрутизацияСервер.ИдентификаторСхемыПолигонов(ПолигональнаяСхемаКарты), "ЧГ="));
		КонецеСли;	
	КонецЕсли;	
	//-Степанов
	
	Если Регион.Пустая() Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрЦентрКарты^","55.75, 37.62");
	Иначе	
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрЦентрКарты^",ПолигональнаяМаршрутизацияСервер.КоординатыЦентраКарты(Регион));
	КонецеСли;	
	
	
	ДанныеXTML = КодХТМЛ;
	
	ОбновитьДанные(Ложь);	
КонецПроцедуры	
//-Широков по письму

&НаКлиенте
Процедура ОбновитьПолеКарты1(Команда)
	// Вставить содержимое обработчика.
	
	//+Широков по письму 18.03.2021
	//При смене даты выделенные заказы оставались в массивах и закидывались в рейсы
	ОчиститьМассивы();
	//-Широков по письму 18.03.2021
	
	ОбновитьПолеКарты();
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьКарту(Команда)
	Если ЭтоТестоваяСреда() Тогда
		//+Широков  по письму 
		//ИдСхемы = "42";
		//-Широков  по письму 
	Иначе	
		ИдСхемы = Формат(ПолигональнаяМаршрутизацияСервер.ИдентификаторСхемыПолигонов(ПолигональнаяСхемаКарты), "ЧГ=");
	КонецЕсли;	
	
	//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = "removeAllOverlays(" + ИдСхемы + ")";
	//Иначе	
	//	Элементы.ПолеXTML.Документ.parentWindow.eval("removeAllOverlays(" + ИдСхемы + ")");
	//КонецеСли;	
	ВыполнитьСкрипт("removeAllOverlays(" + ИдСхемы + ")");
КонецПроцедуры

//Широков
&НаСервере
Функция ПолучитьШиротуДолготуНаСервере(Тек)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота
	            |ИЗ
	            |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Ссылка = &МасСсылок
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
	            |	ЗаборТовара.ТочкаДоставки.Адрес.Долгота
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.Ссылка = &МасСсылок";
	Зап.УстановитьПараметр("МасСсылок", Тек.Заказ);
	
	Выборка = Зап.Выполнить().Выбрать();
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Широта",Неопределено);
	СтруктураВозврата.Вставить("Долгота",Неопределено);
	Если Выборка.Следующий() ТОгда
		СтруктураВозврата.Вставить("Широта",Выборка.Широта);
		СтруктураВозврата.Вставить("Долгота",Выборка.Долгота);
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции
//Широков по письму




//Широков 22.10.2020 по письму
//ПоказатьВыбранныеЗаказыПолигоновНаКартеКонтМенюПолигонов
&НаКлиенте
Процедура ПоказатьВыбранныеЗаказыПолигоновНаКартеКонтМенюПолигонов(РеквизитДерево)
	Если РеквизитДерево = "ДеревоПолигоновСЗаказами" Тогда
		имяСтиляДоставка = "cr1_1_2";
		имяСтиляЗабор = "tr1_1_2";
		НомерДерева = 1;
		НомерЦвета = 8;
	ИначеЕсли РеквизитДерево = "ДеревоРейсовСЗаказами" Тогда
		имяСтиляДоставка = "cr6_1";
		имяСтиляЗабор = "tr5_1";		
		НомерДерева = 2;
		НомерЦвета = 0;
	КонецеСли;	
	
	МассивСтруктур = Новый Массив;
	//	МассивРейсовСПометками.Очистить();
	//МассивПолигоновСПометками.Очистить();

	Для Каждого ЭлВыбранныхПолгионов Из МассивПолигоновСПометками Цикл
//		Тек = ДанныеЗаказовЗаборов.Получить(ЭлВыбранныхПолгионов.Значение.НомерЗаказа);
		Тек = ДанныеЗаказовЗаборов.Получить(СокрЛП(ЭлВыбранныхПолгионов.Значение.НомерЗаказа));
		Если НЕ Тек = Неопределено Тогда
			Широта = Тек.Широта;
			Долгота = Тек.Долгота;
		
		УИД_Дока = Строка(Тек.ИдентификаторЗаказа); 
		ОшибкаОтображенияТочки = Ложь;
		
		
		СтрукJSON = Новый Структура;
		СтрукJSON.Вставить("lat", Формат(Широта, "ЧРД=.; ЧГ="));
		СтрукJSON.Вставить("lng", Формат(Долгота, "ЧРД=.; ЧГ="));
		СтрукJSON.Вставить("UID", УИД_Дока);
		СтрукJSON.Вставить("color", НомерЦвета);
		Если Тек.ТипЗаказа = 1 Тогда
			СтрукJSON.Вставить("type", 0);
			СтрукJSON.Вставить("contrag", "Заказ № " + сокрЛП(Тек.НомерЗаказа) + ", интервал с " + Формат(Тек.ВремяПрибытияС, "ДЛФ=T") + " по " + Формат(Тек.ВремяПрибытияПо, "ДЛФ=T") + ", " + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + ", вес " + Формат(Тек.ВесогабаритныйПоказатель, "ЧН=0") + "");
		Иначе
			СтрукJSON.Вставить("contrag", "Забор № " + сокрЛП(Тек.НомерЗаказа) + ", интервал с " + Формат(Тек.ВремяПрибытияС, "ДЛФ=T") + " по " + Формат(Тек.ВремяПрибытияПо, "ДЛФ=T") + ", " + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + ", объём " + Формат(Тек.ВесогабаритныйПоказатель, "ЧН=0") + "");
			СтрукJSON.Вставить("type", 1);
		КонецЕсли;	
		
		МассивСтруктур.Добавить(СтрукJSON);
		
		Нов = СписокТочекНаКартеТЗ.Добавить();
		Нов.УИД = УИД_Дока;
		Нов.НомерДерева = НомерДерева;
		Нов.НомерЗаказа = Тек.НомерЗаказа;
		Нов.ТипЗаказа = Тек.ТипЗаказа;
		Нов.Заказ = Тек.Заказ;
		КонецЕсли;
		
	КонецЦикла;
///////////////////////////////////////////////////////////////

	////+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	//МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева(РеквизитДерево,,ДанныеЗаказовЗаборов);
	//Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
	//	//Сообщить("Не выделены заказы!");
	//	Возврат;
	//КонецеСли;	
	//
	//МассивСтруктур = Новый Массив;
	//
	//Для Каждого Тек Из МассивЗначений Цикл
	//	//Стр11 = Объект.ТзТест.Добавить();
	//	//Стр11.ЧтоДелаем = Тек.Широта;
	//	//Если Тек.ТипЗаказа = 1 Тогда
	//	//	ИмяСтиля = имяСтиляДоставка;
	//	//ИначеЕсли Тек.ТипЗаказа = 2 Тогда	
	//	//	ИмяСтиля = имяСтиляЗабор;
	//	//КонецеСли;
	//	Широта = Тек.Широта;
	//	Долгота = Тек.Долгота;
	//	
	//	Если Не ЗначениеЗаполнено(Широта) или Не ЗначениеЗаполнено(Долгота) Тогда
	//		СтруктураШиротаДолгота = ПолучитьШиротуДолготуНаСервере(Тек);
	//		Широта = СтруктураШиротаДолгота.Широта;
	//		Долгота = СтруктураШиротаДолгота.Долгота;
	//			//Сообщить("Не определены координаты заказа " + СокрЛП(Тек.НомерЗаказа));
	//		Если Не ЗначениеЗаполнено(Широта) или Не ЗначениеЗаполнено(Долгота) Тогда
	//			//Сообщить("Не определены координаты заказа 2 раза! " + СокрЛП(Тек.НомерЗаказа));
	//			Сообщить("Не определены координаты заказа " + СокрЛП(Тек.НомерЗаказа));
	//			////Продолжить;
	//		КонецеСли;	
	//	КонецеСли;	
	//	//
	//	УИД_Дока = Строка(Тек.ИдентификаторЗаказа); 
	//	ОшибкаОтображенияТочки = Ложь;
	//	
	//	
	//	СтрукJSON = Новый Структура;
	//	СтрукJSON.Вставить("lat", Формат(Широта, "ЧРД=.; ЧГ="));
	//	СтрукJSON.Вставить("lng", Формат(Долгота, "ЧРД=.; ЧГ="));
	//	СтрукJSON.Вставить("UID", УИД_Дока);
	//	СтрукJSON.Вставить("color", НомерЦвета);
	//	Если Тек.ТипЗаказа = 1 Тогда
	//		СтрукJSON.Вставить("type", 0);
	//		СтрукJSON.Вставить("contrag", "Заказ № " + сокрЛП(Тек.НомерЗаказа) + ", интервал с " + Формат(Тек.ВремяПрибытияС, "ДЛФ=T") + " по " + Формат(Тек.ВремяПрибытияПо, "ДЛФ=T") + ", " + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + ", вес " + Формат(Тек.ВесогабаритныйПоказатель, "ЧН=0") + "");
	//	Иначе
	//		СтрукJSON.Вставить("contrag", "Забор № " + сокрЛП(Тек.НомерЗаказа) + ", интервал с " + Формат(Тек.ВремяПрибытияС, "ДЛФ=T") + " по " + Формат(Тек.ВремяПрибытияПо, "ДЛФ=T") + ", " + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + ", объём " + Формат(Тек.ВесогабаритныйПоказатель, "ЧН=0") + "");
	//		СтрукJSON.Вставить("type", 1);
	//	КонецЕсли;	
	//	
	//	МассивСтруктур.Добавить(СтрукJSON);
	//	
	//	
	//	
	//	
	//	//Если Не ОшибкаОтображенияТочки Тогда
	//	//СписокТочекНаКарте.Добавить(УИД_Дока);
	//	Нов = СписокТочекНаКартеТЗ.Добавить();
	//	Нов.УИД = УИД_Дока;
	//	Нов.НомерДерева = НомерДерева;
	//	Нов.НомерЗаказа = Тек.НомерЗаказа;
	//	Нов.ТипЗаказа = Тек.ТипЗаказа;
	//	Нов.Заказ = Тек.Заказ;
	//	//КонецеСли;	
	//КонецЦикла;	
	
	лПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
	
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(лПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, МассивСтруктур, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	ВызовФункции = "showAddressCoordByArr(" + СтрокаJSON + ")";
	ВыполнитьСкрипт(ВызовФункции);
КонецПроцедуры
//Широков 22.10.2020 по письму

&НаКлиенте
Процедура ПоказатьВыбранныеЗаказыПолигоновНаКарте(РеквизитДерево)
	Если РеквизитДерево = "ДеревоПолигоновСЗаказами" Тогда
		имяСтиляДоставка = "cr1_1_2";
		имяСтиляЗабор = "tr1_1_2";
		НомерДерева = 1;
		НомерЦвета = 8;
	ИначеЕсли РеквизитДерево = "ДеревоРейсовСЗаказами" Тогда
		имяСтиляДоставка = "cr6_1";
		имяСтиляЗабор = "tr5_1";		
		НомерДерева = 2;
		НомерЦвета = 0;
	КонецеСли;	
	//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева(РеквизитДерево,,ДанныеЗаказовЗаборов);
	Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
		//Сообщить("Не выделены заказы!");
		Возврат;
	КонецеСли;	
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого Тек Из МассивЗначений Цикл
		Широта = Тек.Широта;
		Долгота = Тек.Долгота;
		
		Если Не ЗначениеЗаполнено(Широта) или Не ЗначениеЗаполнено(Долгота) Тогда
			СтруктураШиротаДолгота = ПолучитьШиротуДолготуНаСервере(Тек);
			Широта = СтруктураШиротаДолгота.Широта;
			Долгота = СтруктураШиротаДолгота.Долгота;
				//Сообщить("Не определены координаты заказа " + СокрЛП(Тек.НомерЗаказа));
			Если Не ЗначениеЗаполнено(Широта) или Не ЗначениеЗаполнено(Долгота) Тогда
				//Сообщить("Не определены координаты заказа 2 раза! " + СокрЛП(Тек.НомерЗаказа));
				Сообщить("Не определены координаты заказа " + СокрЛП(Тек.НомерЗаказа));
				////Продолжить;
			КонецеСли;	
		КонецеСли;	
		//
		УИД_Дока = Строка(Тек.ИдентификаторЗаказа); 
		ОшибкаОтображенияТочки = Ложь;
		
		
		СтрукJSON = Новый Структура;
		СтрукJSON.Вставить("lat", Формат(Широта, "ЧРД=.; ЧГ="));
		СтрукJSON.Вставить("lng", Формат(Долгота, "ЧРД=.; ЧГ="));
		СтрукJSON.Вставить("UID", УИД_Дока);
		СтрукJSON.Вставить("color", НомерЦвета);
		Если Тек.ТипЗаказа = 1 Тогда
			СтрукJSON.Вставить("type", 0);
			СтрукJSON.Вставить("contrag", "Заказ № " + сокрЛП(Тек.НомерЗаказа) + ", интервалЛЛЛ с " + Формат(Тек.ВремяПрибытияС, "ДЛФ=T") + " по " + Формат(Тек.ВремяПрибытияПо, "ДЛФ=T") + ", " + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + ", вес " + Формат(Тек.ВесогабаритныйПоказатель, "ЧН=0") + "");
		Иначе
			СтрукJSON.Вставить("contrag", "Забор № " + сокрЛП(Тек.НомерЗаказа) + ", интервалЛЛЛЛ с " + Формат(Тек.ВремяПрибытияС, "ДЛФ=T") + " по " + Формат(Тек.ВремяПрибытияПо, "ДЛФ=T") + ", " + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + ", объём " + Формат(Тек.ВесогабаритныйПоказатель, "ЧН=0") + "");
			СтрукJSON.Вставить("type", 1);
		КонецЕсли;	
		
		МассивСтруктур.Добавить(СтрукJSON);
		
		
		
		
		//Если Не ОшибкаОтображенияТочки Тогда
		//СписокТочекНаКарте.Добавить(УИД_Дока);
		Нов = СписокТочекНаКартеТЗ.Добавить();
		Нов.УИД = УИД_Дока;
		Нов.НомерДерева = НомерДерева;
		Нов.НомерЗаказа = Тек.НомерЗаказа;
		Нов.ТипЗаказа = Тек.ТипЗаказа;
		Нов.Заказ = Тек.Заказ;
		//КонецеСли;	
	КонецЦикла;	
	
	лПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
	
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(лПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, МассивСтруктур, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	ВызовФункции = "showAddressCoordByArr(" + СтрокаJSON + ")";
	ВыполнитьСкрипт(ВызовФункции);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТочкиНаКарте()
	Если СписокТочекНаКартеТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;	
	
	МассивТочек = "[";
	
	Для Каждого Тек Из СписокТочекНаКартеТЗ Цикл
		
		УИД_Дока = Строка(Тек.УИД); 
		
		МассивТочек = МассивТочек + "'" + УИД_Дока + "',";
	КонецЦикла;	
	
	
	МассивТочек = Лев(МассивТочек, СтрДлина(МассивТочек) -1) + "]";
	
	ВызовФункции = "removePointByUIDArray(" + МассивТочек + ")";    
	
	//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = ВызовФункции;
	//Иначе	
	//	Элементы.ПолеXTML.Документ.parentWindow.eval(ВызовФункции);
	//КонецЕсли;	
	
	ВыполнитьСкрипт(ВызовФункции);
	
	СписокТочекНаКартеТЗ.Очистить();
	
	СписокВыделенныхТочекНаКарте.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура ОтобразитьВсеВыделенныеТочкиНаКарте()
	ОчиститьТочкиНаКарте();
	ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоРейсовСЗаказами");	
	ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоПолигоновСЗаказами");
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры	

//Широков 22.10.2020 по письму
&НаКлиенте
Процедура ОтобразитьВсеВыделенныеТочкиНаКартеОнтМенюПолигонов()
	ОчиститьТочкиНаКарте();
	ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоРейсовСЗаказами");	
	//ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоПолигоновСЗаказами");
	ПоказатьВыбранныеЗаказыПолигоновНаКартеКонтМенюПолигонов("ДеревоПолигоновСЗаказами");
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры
//Широков 22.10.2020 по письму


//Широков  по письму
&НаКлиенте
Процедура ОтобразитьВсеВыделенныеТочкиНаКартеТолькоПолигоны()
	ОчиститьТочкиНаКарте();
	//ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоРейсовСЗаказами");	
	ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоРейсовСЗаказами");	
	ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоПолигоновСЗаказами");
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры	
//Широков  по письму 


&НаСервере
Функция ПолучитьДанныеОтображенияМаркеровПолигонов()
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ТипАвто,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование КАК ГосНомер,
	|	ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Наименование КАК НазваниеПолигона
	|ИЗ
	|	РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО ПолигоныИКатегорииЗаказовДляРейсов.Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	|ГДЕ
	|	ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ТерминалДоставки = &ТерминалДоставки
	|	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Владелец = &СхемаПолигональнойМаршрутизации
	|	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	|	ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Наименование
	|ИЗ
	|	РегистрСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СрезПоследних КАК ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныМаршрутизацииЗаказов.СрезПоследних КАК ПолигоныМаршрутизацииЗаказовСрезПоследних
	|		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ = ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ
	|			И ПолигоныМаршрутизацииЗаказовСрезПоследних.СхемаМаршрутизации = &СхемаПолигональнойМаршрутизации
	|ГДЕ
	|	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ТерминалДоставки = &ТерминалДоставки
	|	И ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Наименование";
	
	// Якурнов 21.09.2018 10:44:38
	Зап.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ТипАвто,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование КАК ГосНомер,
	|	ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Наименование КАК НазваниеПолигона
	|ИЗ
	|	РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО ПолигоныИКатегорииЗаказовДляРейсов.Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	|ГДЕ
	|	ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ТерминалДоставки = &ТерминалДоставки
	|	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Владелец = &СхемаПолигональнойМаршрутизации%УсловиеВыбораПоМакрозонам1%
	|	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ПометкаУдаления = ЛОЖЬ
	//CeHbKA #3179 10.06.2019
	|	И ВЫБОР
	|		КОГДА &Смена <> Значение(Справочник.Смены.ПустаяСсылка)
	|			ТОГДА ПолигоныИКатегорииЗаказовДляРейсов.Смена = &Смена
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	//CeHbKA #3179 10.06.2019
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	|	ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Наименование
	|ИЗ
	|	РегистрСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СрезПоследних КАК ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	|		%ТИПСОЕДИНЕНИЯ% СОЕДИНЕНИЕ РегистрСведений.ПолигоныМаршрутизацииЗаказов.СрезПоследних КАК ПолигоныМаршрутизацииЗаказовСрезПоследних
	|		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ = ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ
	|			И (ПолигоныМаршрутизацииЗаказовСрезПоследних.СхемаМаршрутизации = &СхемаПолигональнойМаршрутизации)%УсловиеВыбораПоМакрозонам2%
	|ГДЕ
	|	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ТерминалДоставки = &ТерминалДоставки
	|	И ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ПометкаУдаления = ЛОЖЬ
	//CeHbKA #3179 10.06.2019
	|	И ВЫБОР
	|		КОГДА &Смена <> Значение(Справочник.Смены.ПустаяСсылка)
	|			ТОГДА ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.СменаРейса = &Смена
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	//CeHbKA #3179 10.06.2019
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	|				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Наименование";
	
	// Якурнов 21.09.2018 10:44:38
	МассивПолигонов = ПолучитьМассивПолигоновИзГрупп();
	Если МассивПолигонов = Неопределено Тогда
		Зап.Текст = СтрЗаменить(Зап.Текст,"%УсловиеВыбораПоМакрозонам1%","");
		Зап.Текст = СтрЗаменить(Зап.Текст,"%УсловиеВыбораПоМакрозонам2%","");
		Зап.Текст = СтрЗаменить(Зап.Текст,"%ТИПСОЕДИНЕНИЯ%","ЛЕВОЕ");
	Иначе
		Зап.УстановитьПараметр("МассивПолигонов", МассивПолигонов);
		Зап.Текст = СтрЗаменить(Зап.Текст,"%УсловиеВыбораПоМакрозонам1%"," И ПолигоныИКатегорииЗаказовДляРейсов.Полигон В(&МассивПолигонов)");
		Зап.Текст = СтрЗаменить(Зап.Текст,"%УсловиеВыбораПоМакрозонам2%"," И ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации В (&МассивПолигонов)");
		Зап.Текст = СтрЗаменить(Зап.Текст,"%ТИПСОЕДИНЕНИЯ%","ВНУТРЕННЕЕ");
	КонецЕсли;	
	
	
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	
	Зап.УстановитьПараметр("СхемаПолигональнойМаршрутизации", ПолигональнаяСхемаКарты);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	//CeHbKA #3179 10.06.2019
	Зап.УстановитьПараметр("Смена", Смена);
	//CeHbKA #3179 10.06.2019
	
	Таб = Зап.Выполнить().Выгрузить();
	Таб.Свернуть("ТипАвто, ГосНомер, НазваниеПолигона");
	
	Возврат lem.ТабЗначВМассив(Таб);
КонецФункции

&НаКлиенте
Процедура ВыводАвтоНаКарту()
	
	Мас = ПолучитьДанныеОтображенияМаркеровПолигонов();	
	
	
	Если Не ПолеXTMLБылоСформировано Тогда
		Возврат;
	КонецеСли;	
	
	ЕстьДанные = Истина;
	
	Если ПоказыватьАвтоНаКарте Тогда
		//сброс показанных авто
		Стр = "MapUtils.RemoveCars()";
		
		//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
		//Иначе
		//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
		//КонецеСли;	
		ВыполнитьСкрипт(Стр);
		
		//вывод авто
		Мас = ПолучитьДанныеОтображенияМаркеровПолигонов();	
		Стр = "MapUtils.ShowCars('[";
		Для Каждого Тек Из Мас Цикл
			Стр = Стр + "{polygonName:""" + СокрЛП(СтрЗаменить(Тек.НазваниеПолигона, Символы.ПС, "")) + """, carName:""" + Тек.ГосНомер + """, carType:" + Формат(Тек.ТипАвто) + "},";
		КонецЦикла;	
		Стр = Лев(Стр, СтрДлина(Стр) - 1) + "]')";
		
		Если Мас.Количество() = 0 Тогда
			ЕстьДанные = Ложь;
		КонецеСли;	
	Иначе
		Стр = "MapUtils.RemoveCars()";
	КонецеСли;	
	
	Если ЕстьДанные Тогда
		//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
		//Иначе	
		//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
		//КонецеСли;	
		ВыполнитьСкрипт(Стр);
	КонецеСли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказыватьАвтоНаКарте(Команда)
	// Вставить содержимое обработчика.
	ПоказыватьАвтоНаКарте = Не ПоказыватьАвтоНаКарте;
	ВыводАвтоНаКарту();
	Элементы.ФормаПоказыватьАвтоНаКарте.Пометка = ПоказыватьАвтоНаКарте;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВсехПолигоновСхемы(Схема)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПолигоныМаршрутизации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолигоныМаршрутизации КАК ПолигоныМаршрутизации
	|ГДЕ
	|	ПолигоныМаршрутизации.Владелец = &Схема
	|	И ПолигоныМаршрутизации.ПометкаУдаления = ЛОЖЬ";
	Зап.УстановитьПараметр("Схема", Схема);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Мас = Новый Массив;
	
	Пока Выб.Следующий() Цикл
		Мас.Добавить(Выб.Ссылка);
	КонецЦикла;	
	
	Возврат Мас;
КонецФункции	

&НаКлиенте
Процедура ВыделениеПолигоновНаКарте()
	Если Не ПолеXTMLБылоСформировано Тогда
		Возврат;
	КонецеСли;	
	
	
	Мас = ПолучитьМассивВсехПолигоновСхемы(ПолигональнаяСхемаКарты);
	
	МасСтрокД = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
	
	ЕстьДанные = Истина;
	
	
	Если ВыделятьПолигоныНаКарте Тогда
		//сброс выделения
		Если ЕстьДанные Тогда
			Стр = "MapUtils.ChangeColor('[";
			Для Каждого Тек Из Мас Цикл
				Стр = Стр + "{name:""" + СокрЛП(СтрЗаменить(Тек, Символы.ПС, "")) + """, select:false},";				
			КонецЦикла;	
			Стр = Лев(Стр, СтрДлина(Стр) - 1) + "]')";
			
			//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
			//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
			//Иначе	
			//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
			//КонецЕсли;	
			ВыполнитьСкрипт(Стр);
		КонецеСли;
		
		
		
		Для Каждого Тек Из МасСтрокД Цикл
			Инд = Мас.Найти(Тек.ПолигонМаршрутизации);
			Если Инд <> Неопределено Тогда
				Мас.Удалить(Инд);
			КонецеСли; 
		КонецЦикла;	 
		
		Если Мас.Количество() = 0 Тогда
			ЕстьДанные = Ложь;
		КонецеСли;	
		//Выделение
		Если ЕстьДанные Тогда
			Стр = "MapUtils.ChangeColor('[";
			Для Каждого Тек Из Мас Цикл
				Стр = Стр + "{name:""" + СокрЛП(СтрЗаменить(Тек, Символы.ПС, "")) + """, select:true},";				
			КонецЦикла;	
			Стр = Лев(Стр, СтрДлина(Стр) - 1) + "]')";
			
			//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
			//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
			//Иначе	
			//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
			//КонецеСли;	
			ВыполнитьСкрипт(Стр);
		КонецеСли;
	Иначе
		Если ЕстьДанные Тогда
			Стр = "MapUtils.ChangeColor('[";
			Для Каждого Тек Из Мас Цикл
				Стр = Стр + "{name:""" + СокрЛП(СтрЗаменить(Тек, Символы.ПС, "")) + """, select:false},";				
			КонецЦикла;	
			Стр = Лев(Стр, СтрДлина(Стр) - 1) + "]')";
			
			//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
			//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
			//Иначе	
			//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
			//КонецеСли;	
			ВыполнитьСкрипт(Стр);	
		КонецеСли;
	КонецеСли;
КонецПроцедуры	

&НаКлиенте
Процедура ВыделятьПолигоныНаКарте(Команда)
	ВыделятьПолигоныНаКарте = Не ВыделятьПолигоныНаКарте;
	ВыделениеПолигоновНаКарте();
	Элементы.ФормаВыделятьПолигоныНаКарте.Пометка = ВыделятьПолигоныНаКарте;
КонецПроцедуры

#КонецОбласти



#Область ОбщиеКоманды
&НаСервере
Процедура ЗафиксироватьМаршрутизацию()
	
	//baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(ФормированиеРейсов.Ссылка, Истина);	
	//CeHbKA #3179 07.06.2019
	Для каждого СтрокаТЗ Из СписокФормированияРейсов Цикл
		baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(СтрокаТЗ.ФормированиеРейсов, Истина);	
	КонецЦикла; 
	//CeHbKA #3179 07.06.2019
	
	МаршрутизацияЗакрыта = Истина;
КонецПроцедуры	

&НаСервере
Процедура МаршрутизироватьПоУмолчаниюНаСервере()
	
	ЗапРейсов = Новый Запрос;
	ЗапРейсов.Текст = "ВЫБРАТЬ
	|	РейсДокумент.Ссылка КАК Рейс,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель
	|ИЗ
	|	Документ.Рейс КАК РейсДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО (ПривязкаМашинКРейсамСрезПоследних.Рейс = РейсДокумент.Ссылка)
	|ГДЕ
	|	РейсДокумент.ДатаРейса = &ДатаРейса
	|	И РейсДокумент.ТерминалДоставки = &ТерминалДоставки
	|	И РейсДокумент.Проведен = ИСТИНА
	|	И РейсДокумент.МетодикаМаршрутизации = ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	|	И ВЫБОР
	|			КОГДА &СменаРейса <> ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка)
	|				ТОГДА РейсДокумент.СменаРейса = &СменаРейса
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	ЗапРейсов.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	ЗапРейсов.УстановитьПараметр("ТерминалДоставки", Регион);
	//CeHbKA 01.03.2019 #2879
	ЗапРейсов.УстановитьПараметр("СменаРейса", Смена);
	
	ВыбРейсов = ЗапРейсов.Выполнить().Выбрать();
	Пока ВыбРейсов.Следующий() Цикл
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	ПолигоныИКатегорииЗаказовДляРейсов.Полигон КАК Полигон,
		|	ПолигоныИКатегорииЗаказовДляРейсов.КатегорияЗаказа КАК КатегорияЗаказа
		//CeHbKA #3179 11.06.2019 
		|	,ПолигоныИКатегорииЗаказовДляРейсов.Смена КАК Смена
		//CeHbKA #3179 11.06.2019 
		|ПОМЕСТИТЬ ВТ_УжеНазначенныеПолигоныНаДругиеРейсы
		|ИЗ
		|	РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
		|ГДЕ
		|	ПолигоныИКатегорииЗаказовДляРейсов.Рейс <> &Рейс
		|	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ДатаРейса = &ДатаРейса
		|	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.Проведен = ИСТИНА
		//CeHbKA #3179 11.06.2019 
		|	И ВЫБОР 
		|		КОГДА &СменаРейса <> ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка) 
		|			ТОГДА ПолигоныИКатегорииЗаказовДляРейсов.Смена = &СменаРейса
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		//CeHbKA #3179 11.06.2019 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыеПолигоныЭкипажейСрезПоследних.Полигон КАК Полигон
		//CeHbKA #3179 11.06.2019 
		|	,ПланируемыеПолигоныЭкипажейСрезПоследних.СменаМаршрутизации КАК СменаМаршрутизации
		//CeHbKA #3179 11.06.2019 
		|ПОМЕСТИТЬ ВТ_Полигоны
		|ИЗ
		|	РегистрСведений.ПланируемыеПолигоныЭкипажей.СрезПоследних(
		|			,
		|			СхемаПолигональнойМаршрутизации = &СхемаПолигональнойМаршрутизации
		|				И Водитель = &Водитель) КАК ПланируемыеПолигоныЭкипажейСрезПоследних
		|				
		|ГДЕ
		|	ПланируемыеПолигоныЭкипажейСрезПоследних.ПолигонУчитывается = ИСТИНА
		//CeHbKA #3179 11.06.2019 
		|	И ВЫБОР 
		|		КОГДА &СменаРейса <> ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка) 
		|			ТОГДА ПланируемыеПолигоныЭкипажейСрезПоследних.СменаМаршрутизации = &СменаРейса
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		//CeHbKA #3179 11.06.2019 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыеКатегорииЗаказовТранспортаСрезПоследних.Категория КАК Категория
		|ПОМЕСТИТЬ ВТ_Категории
		|ИЗ
		|	РегистрСведений.ПланируемыеКатегорииЗаказовТранспорта.СрезПоследних(
		|			,
		|			СхемаЛогистическихБрейков = &СхемаЛогистическихБрейков
		|				И Транспорт = &Транспорт) КАК ПланируемыеКатегорииЗаказовТранспортаСрезПоследних
		|ГДЕ
		|	ПланируемыеКатегорииЗаказовТранспортаСрезПоследних.КатегорияУчитывается = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Полигоны.Полигон КАК Полигон,
		|	ВТ_Категории.Категория КАК КатегорияЗаказа
		//CeHbKA #3179 11.06.2019 
		|	,ВТ_Полигоны.СменаМаршрутизации КАК СменаМаршрутизации
		//CeHbKA #3179 11.06.2019 
		|ПОМЕСТИТЬ ВТ_ПолигоныИКатегории
		|ИЗ
		|	ВТ_Полигоны КАК ВТ_Полигоны,
		|	ВТ_Категории КАК ВТ_Категории
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПолигоныИКатегории.Полигон КАК Полигон,
		|	ВТ_ПолигоныИКатегории.КатегорияЗаказа КАК КатегорияЗаказа,
		//CeHbKA 01.03.2019 #2626
		|	ВТ_ПолигоныИКатегории.КатегорияЗаказа.ТипЗаказа КАК ТипКатегорииЗаказа,
		//CeHbKA 01.03.2019 #2626
		//CeHbKA #3179 11.06.2019 
		|	isnull(ВТ_ПолигоныИКатегории.СменаМаршрутизации, ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.Смена) КАК Смена,
		//CeHbKA #3179 11.06.2019 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.Полигон, ИСТИНА) = ИСТИНА
		|				И ЕСТЬNULL(ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.КатегорияЗаказа, ИСТИНА) = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПолигонКатегорияСвободны
		|ИЗ
		|	ВТ_ПолигоныИКатегории КАК ВТ_ПолигоныИКатегории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УжеНазначенныеПолигоныНаДругиеРейсы КАК ВТ_УжеНазначенныеПолигоныНаДругиеРейсы
		|		ПО ВТ_ПолигоныИКатегории.Полигон = ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.Полигон
		|			И ВТ_ПолигоныИКатегории.КатегорияЗаказа = ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.КатегорияЗаказа
		//CeHbKA #3179 11.06.2019 
		|			И ВТ_ПолигоныИКатегории.СменаМаршрутизации = ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.Смена";			
		//CeHbKA #3179 11.06.2019 
		Зап.УстановитьПараметр("СхемаПолигональнойМаршрутизации", ПолигональнаяСхемаКарты);
		Зап.УстановитьПараметр("Водитель", ВыбРейсов.Водитель);
		Зап.УстановитьПараметр("Транспорт", ВыбРейсов.Транспорт);
		Зап.УстановитьПараметр("СхемаЛогистическихБрейков", СхемаЛогистическихБрейков);
		Зап.УстановитьПараметр("Рейс", ВыбРейсов.Рейс);
		Зап.УстановитьПараметр("ДатаРейса", НачалоДня(ДатаПланирования));
		//CeHbKA 01.03.2019 #2879
		Зап.УстановитьПараметр("СменаРейса", ВыбРейсов.Рейс.СменаРейса);
		
		
		Рез = Зап.Выполнить();
		
		Если Рез.Пустой() Тогда
			Сообщить("Для экипажа не настроены данные по умолчанию!! (" + СокрЛП(ВыбРейсов.Транспорт) + ", " + СокрЛП(ВыбРейсов.Водитель) + ")", СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецеСли;	
		
		Выб = Рез.Выбрать();
		
		Наб = РегистрыСведений.ПолигоныИКатегорииЗаказовДляРейсов.СоздатьНаборЗаписей();
		Наб.Отбор.Рейс.Установить(ВыбРейсов.Рейс);
		
		Пока Выб.Следующий() Цикл
			Если Не Выб.ПолигонКатегорияСвободны Тогда
				Сообщить("Полигон " + СокрЛП(Выб.Полигон) + " и категория " + СокрЛП(Выб.КатегорияЗаказа) + " уже заняты другим транспортом! Назначение данных по умолчанию отменено! (" + СокрЛП(ВыбРейсов.Транспорт) + ", " + СокрЛП(ВыбРейсов.Водитель) + ")", СтатусСообщения.ОченьВажное);
				Продолжить;
			КонецеСли;	
			
			//CeHbKA 01.03.2019 #2626
			Если ВыбРейсов.Рейс.СменаРейса = Справочники.Смены.Смена2 Тогда
				
				Если Выб.ТипКатегорииЗаказа = Перечисления.ТипыЗаказов.Забор Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			//CeHbKA 01.03.2019 #2626
			
			Нов = Наб.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Выб);
			Нов.Рейс = ВыбРейсов.Рейс;
			Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			//CeHbKA #3179 07.06.2019 
			Нов.Смена = ВыбРейсов.Рейс.СменаРейса;
			//CeHbKA #3179 07.06.2019 
			
		КонецЦикла;	
		
		Наб.Записать();
	КонецЦикла;	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьДанныеМаршрутизации(ДатаПланирования, Регион, Смена) 
	Наб = РегистрыСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СоздатьНаборЗаписей();
	Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
	Наб.Отбор.Регион.Установить(Регион);
	
	Наб.Записать();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	Рейс.Ссылка КАК Рейс
	|ИЗ
	|	Документ.Рейс КАК Рейс
	|ГДЕ
	|	Рейс.Проведен = ИСТИНА
	|	И Рейс.ДатаРейса = &ДатаРейса
	|	И Рейс.ТерминалДоставки = &ТерминалДоставки
	|	И Рейс.МетодикаМаршрутизации = ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	//CeHbKA #3179 11.06.2019 
	|	И ВЫБОР
	|			КОГДА &СменаРейса <> ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка)
	|				ТОГДА Рейс.СменаРейса = &СменаРейса
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	//CeHbKA #3179 11.06.2019 
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	//CeHbKA #3179 11.06.2019 
	Зап.УстановитьПараметр("СменаРейса", Смена); 
	//CeHbKA #3179 11.06.2019 
	
	Выб = зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		Наб = РегистрыСведений.ПолигоныИКатегорииЗаказовДляРейсов.СоздатьНаборЗаписей();
		Наб.Отбор.Рейс.Установить(Выб.Рейс);
		
		Наб.Записать();
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура МаршрутизироватьПоУмолчанию(Команда)
	От = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("МаршрутизироватьПоУмолчаниюЗавершение", ЭтотОбъект), "Все данные маршрутизации будут очищены и установлены по умолчанию. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизироватьПоУмолчаниюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	От = РезультатВопроса;
	
	Если От = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеМаршрутизации(ДатаПланирования, Регион, Смена);
		Сообщить("Очистка данных завершена!");
		МаршрутизироватьПоУмолчаниюНаСервере();
		ОбновитьДанные(Ложь);
		Сообщить("Маршрутизация по умолчанию завершена!");
	КонецеСли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОчиститьДанныеМаршрутизацииНаСервере(ДатаПланирования, Регион, Смена)
	// Вставить содержимое обработчика.
	ОчиститьДанныеМаршрутизации(ДатаПланирования, Регион, Смена)
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьДанныеМаршрутизации1(Команда)
	От = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьДанныеМаршрутизации1Завершение", ЭтотОбъект), "Данные маршрутизации будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеМаршрутизации1Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	От = РезультатВопроса;
	Если От = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеМаршрутизацииНаСервере(ДатаПланирования, Регион, Смена);
		ОбновитьДанные(Ложь);
		Сообщить("Очистка данных завершена!");
	КонецеСли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПунктаКонтекстногоМенюПолигонов_Рейсы(Элемент)
	//Сообщить("Начало Маршрутизация индивидуально через контекстное меню дерева полигонов " + ТекущаяДата());
	//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	
	
	
	МассивИдентификаторовПолигоновДляПересчета = Новый Массив;
	МассивЗначений = Новый Массив;	
	Мас = Новый Массив;
	Если МассивПолигоновСПометками.Количество() = 0 Тогда
		Сообщить("Не выделены заказы!");
		Возврат;
	КонецЕсли;
	
	//Широков 22.03.2021 по письму
	Для Каждого ЭлементМассивЗначений ИЗ МассивПолигоновСПометками Цикл
	//Для Каждого ЭлементМассивЗначений ИЗ МассивПолигоновВыделенныеСтроки Цикл
	//Широков 22.03.2021 по письму
		//		МассивИдентификаторовПолигоновДляПересчета.Добавить(ЭлементМассивЗначений.НашИдентификаторГруппы);	
		ЭлементДереваРейсов = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассивЗначений.Ключ);
		Если НЕ ЭлементДереваРейсов = Неопределено Тогда
			МассивИдентификаторовПолигоновДляПересчета.Добавить(ЭлементДереваРейсов.ПолигонМаршрутизации);	
		КонецЕсли;
		
		////МассивИдентификаторовРейсовДляПересчета.Добавить(ЭлементМассивЗначений.Ключ);	
		//		МассивЗначений2.Добавить(ПолучитьНомерДокумента(ЭлементМассивЗначений.Заказ));
		МассивИдентификаторовПолигоновДляПересчета.Добавить(ЭлементМассивЗначений.Ключ);	
		//МассивЗначений2.Добавить(ПолучитьНомерДокумента(ЭлементМассивЗначений.Значение.НомерЗаказа));
		МассивЗначений.Добавить(СокрЛП(ЭлементМассивЗначений.Значение.НомерЗаказа));
		Струк = Новый Структура;
		//		Струк.Вставить("Заказ", ЭлементМассивЗначений.Заказ);
		Струк.Вставить("Заказ", ЭлементМассивЗначений.Значение.НомерЗаказа);
		Струк.Вставить("УИД", ЭлементМассивЗначений.Значение.УИД);
		//Струк.Вставить("ПолигонМаршрутизации", ЭлементМассивЗначений.ПолигонМаршрутизации);
		//Струк.Вставить("НашИдентификаторГруппы", ЭлементМассивЗначений.НашИдентификаторГруппы);
		Мас.Добавить(Струк);
	КонецЦикла;
	
	//Если МассивЗначений = Неопределено Тогда
	//	Сообщить("Не выделены заказы!");
	//	Возврат;
	//ИначеЕсли МассивЗначений.Количество() = 0 Тогда
	//	Сообщить("Не выделены заказы!");
	//	Возврат;
	//Иначе
	//	Для Каждого ЭлементМассивЗначений ИЗ МассивЗначений Цикл
	//		МассивИдентификаторовПолигоновДляПересчета.Добавить(ЭлементМассивЗначений.НашИдентификаторГруппы);	
	//		МассивЗначений2.Добавить(ПолучитьНомерДокумента(ЭлементМассивЗначений.Заказ));
	//		Струк = Новый Структура;
	//		Струк.Вставить("Заказ", ЭлементМассивЗначений.Заказ);
	//		Мас.Добавить(Струк);
	//	КонецЦикла;
	//КонецЕсли;
	
	
	ФлагКарта = Ложь;
	
	
	КодТранспорта = СтрПолучитьСтроку(СтрЗаменить(Элемент.Имя, "_", Символы.ПС), 2);
	
	Если Не МаршрутизацияЗакрыта Тогда
		//		ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыИндивидуальнаяМаршрутизация(МассивЗначений, КодТранспорта, "ДеревоПолигоновСЗаказами");
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюПолигонов_Рейсы ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыИндивидуальнаяМаршрутизация", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
		ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыИндивидуальнаяМаршрутизация(Мас, КодТранспорта, "ДеревоПолигоновСЗаказами");
		//ОбновитьДанные(Ложь, Ложь, Истина);
	Иначе
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюПолигонов_Рейсы ПоложитьЗаказыВРейсИзДереваПолигонов", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
		ПоложитьЗаказыВРейсИзДереваПолигонов(МассивЗначений, КодТранспорта, ДатаПланирования);
		//ОбновитьДанные(Ложь, Истина, Истина);
	КонецеСли;	
	//ОчиститьТочкиНаКарте();
	
	//Получить список полигонов для пересчета
	//МассивИдентификаторовПолигоновДляПересчета = ПолучитьСписокПолигоновДляПересчета(МассивЗначений2);
	//Получить список рейсов для пересчета (код транспорта)
	МассивИдентификаторовРейсовДляПересчета = ПолучитьМассивИдентификаторовРейсовДляПересчета(КодТранспорта);
	
	//Добавить заказы в дерево рейсов с заказами
	//Создаем новый элемент в дереве рейсов и копируем его свойства из дерева заказов с полигонами
	ДобавитьЗаказыВДеревоРейсовВыборПунктаКонтекстногоМенюПолигонов_Рейсы(МассивЗначений, КодТранспорта,  МассивИдентификаторовПолигоновДляПересчета);
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюПолигонов_Рейсы ДобавитьЗаказыВДеревоРейсовВыборПунктаКонтекстногоМенюПолигонов_Рейсы", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
	
	//Удалить заказы из дерева полигонов
	//УдалитьСтрокиИзДерева(Мас, "ДеревоПолигоновСЗаказами");
	//Пересчитать элементы дерева полигонов
	//ПересчитатьДеревоПолигонов(МассивИдентификаторовПолигоновДляПересчета, КодТранспорта, "ДеревоПолигоновСЗаказами", МассивИдентификаторовПолигоновДляПересчета);
	//ПересчитатьДеревоРейсов(МассивИдентификаторовРейсовДляПересчета, КодТранспорта, "ДеревоРейсовСЗаказами", МассивИдентификаторовПолигоновДляПересчета);
	//Рассчитать итоговые показатели
	РассчитатьИтоговоеКоличествоЗаказов();
	
	//+Широков 24.03.2021 по письму
	МассивПолигоновВыделенныеСтроки.Очистить();
	//-Широков 24.03.2021 по письму
	
	СписокВыделенныхТочекНаКартеТЗ.Очистить();
	//Сообщить("СписокВыделенныхТочекНаКартеТЗ.Очистить " + Строка(ТекущаяДата()));
	СформироватьНадписьДекорацииВыделенныхЗаказов();
	//Сообщить("СформироватьНадписьДекорацииВыделенныхЗаказов " + Строка(ТекущаяДата()));
	
	//ОчиститьТочкиНаКарте();
	//Широков 23.10.2020 по письму
	Если ВыделятьПолигоныНаКарте Тогда
		ВыделениеПолигоновНаКарте();
	КонецЕсли;
	
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	//ОтобразитьВсеВыделенныеТочкиНаКартеОнтМенюПолигонов();
	
	//Широков 22.10.2020 по письму
	//МассивРейсовСПометками.Очистить();
	//МассивПолигоновСПометками.Очистить();

	//Широков 22.03.2021 по письму
	МассивПолигоновВыделенныеСтроки.Очистить();
	//Широков 22.03.2021 по письму
КонецПроцедуры	

&НаКлиенте
Процедура ВыборПунктаКонтекстногоМенюРейсов_Рейсы(Элемент)
	//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	//МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева("ДеревоРейсовСЗаказами",,ДанныеЗаказовЗаборов);
	//Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
	//	Сообщить("Не выделены заказы!");
	//	Возврат;
	//КонецеСли;	
	Если МассивРейсовСПометками.Количество()=0 Тогда
		Сообщить("Не выделены заказы!");
		Возврат;
	КонецеСли;	
	
	//Широков по письму
	МассивИдентификаторовПолигоновДляПересчета = Новый Массив;
	МассивЗначений = Новый Массив;	
	Мас = Новый Массив;
	
	//Широков 22.03.2021 по письму
	Для Каждого ЭлементМассивЗначений ИЗ МассивРейсовСПометками Цикл
	//Для Каждого ЭлементМассивЗначений ИЗ МассивРейсовВыделенныеСтроки Цикл
	//Широков 22.03.2021 по письму
		МассивИдентификаторовПолигоновДляПересчета.Добавить(ЭлементМассивЗначений.Ключ);	
		//////МассивЗначений2.Добавить(ПолучитьНомерДокумента(ЭлементМассивЗначений.Значение.НомерЗаказа));
		ЭлементДереваРейсов = ДереворейсовСзаказами.НайтиПоИдентификатору(ЭлементМассивЗначений.Ключ);
		////Если НЕ ЭлементДереваРейсов = Неопределено Тогда
		////	МассивИдентификаторовПолигоновДляПересчета.Добавить(ЭлементДереваРейсов.ПолигонМаршрутизации);	
		////КонецЕсли;
		
		МассивЗначений.Добавить(СокрЛП(ЭлементМассивЗначений.Значение.НомерЗаказа));
		Струк = Новый Структура;
		Струк.Вставить("Заказ", ЭлементМассивЗначений.Значение.НомерЗаказа);
		Струк.Вставить("УИД", ЭлементМассивЗначений.Значение.УИД);
		Мас.Добавить(Струк);
	КонецЦикла;
	
	ФлагКарта = Ложь;
	//Широков   по письму
	
	
	КодТранспорта = СтрПолучитьСтроку(СтрЗаменить(Элемент.Имя, "_", Символы.ПС), 2);
	Если Не МаршрутизацияЗакрыта Тогда
		//ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(МассивЗначений, КодТранспорта, "ДеревоРейсовСЗаказами");
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюРейсов_Рейсы ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
		ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(Мас, КодТранспорта, "ДеревоРейсовСЗаказами");
	Иначе
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюРейсов_Рейсы ПоложитьЗаказыВРейсИзДереваРейсов", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
		ПоложитьЗаказыВРейсИзДереваРейсов(МассивЗначений, КодТранспорта, ДатаПланирования, Регион);
		//Асеев 01.11.2022 (Задача № 4919)>>>
		НапечататьБланкиЗаказовПоНомерам(МассивЗначений);
		//Асеев 01.11.2022 (Задача № 4919)<<<
	КонецЕсли;
	
	
	
	//Добавить заказы в дерево рейсов с заказами
	//Создаем новый элемент в дереве рейсов и копируем его свойства из дерева рейсов с полигонами
	ДобавитьЗаказыВДеревоРейсовИзРейсов2(МассивЗначений, КодТранспорта);
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюРейсов_Рейсы ДобавитьЗаказыВДеревоРейсовИзРейсов2", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
	
	//ПересчитатьДеревоРейсов(МассивИдентификаторовРейсовДляПересчета, КодТранспорта, "ДеревоРейсовСЗаказами", МассивИдентификаторовПолигоновДляПересчета);
	
	//Рассчитать итоговые показатели
	РассчитатьИтоговоеКоличествоЗаказов();
	
	
	СписокВыделенныхТочекНаКартеТЗ.Очистить();
	
	//Широков 22.03.2021 по письму
	МассивРейсовВыделенныеСтроки.Очистить();
	//Широков 22.03.2021 по письму
	
	СформироватьНадписьДекорацииВыделенныхЗаказов();
	
	//ОчиститьТочкиНаКарте();
	//Широков 23.10.2020  по письму
	Если ВыделятьПолигоныНаКарте Тогда
		ВыделениеПолигоновНаКарте();
	КонецЕсли;
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	
	
	
	//// Якурнов 30.10.2018 11:26:58 Убираем галочки в рейсах
	//Если НЕ Объект.АвтообновлениеКартыПриВыделенииЗаказов Тогда
	//	ПростановкаФлаговВДеревьях("РейсовСЗаказами", 0);
	//	ПростановкаФлаговВДеревьях("ДеревоПолигоновСЗаказами", 0);
	//КонецЕсли;	
	//
	////ОчиститьТочкиНаКарте();
	//ОтобразитьВсеВыделенныеТочкиНаКарте();
	//
	////+Широков по письму 
	////Было закомментировано
	//////ОбновитьДанные(Ложь, Ложь, Истина);  
	////ОбновитьДанные(Ложь, Истина, Ложь); 
	////ОбновитьДанные(); 
	//ОбновитьДанные(Ложь, Истина, Истина);  //Широков 14.09.2020 
	
	////-Широков по письму 
	//
	////CeHbKA
	//ПересчитатьДерево(МассивЗначений, КодТранспорта, "ДеревоРейсовСЗаказами");
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыборПунктаКонтекстногоМенюРейсов_Рейсы_ДляУдаленияМаршрутизации(Элемент)
	//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева("ДеревоРейсовСЗаказами",,ДанныеЗаказовЗаборов);
	Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
		Сообщить("Не выделены заказы!");
		Возврат;
	КонецеСли;	
	
	//Широков  по письму
	МассивИдентификаторовПолигоновДляПересчета = Новый Массив;
	МассивЗначений2 = Новый Массив;	
	Мас = Новый Массив;
	Для Каждого ЭлементМассивЗначений ИЗ МассивЗначений Цикл
		МассивИдентификаторовПолигоновДляПересчета.Добавить(ЭлементМассивЗначений.НашИдентификаторГруппы);	
		МассивЗначений2.Добавить(ПолучитьНомерДокумента(ЭлементМассивЗначений.Заказ));
		Струк = Новый Структура;
		Струк.Вставить("Заказ", ЭлементМассивЗначений.Заказ);
		Струк.Вставить("НашИдентификаторГруппы", ЭлементМассивЗначений.НашИдентификаторГруппы);
		Мас.Добавить(Струк);
	КонецЦикла;
	ФлагКарта = Ложь;
	//Широков  по письму
	
	КодТранспорта = СтрПолучитьСтроку(СтрЗаменить(Элемент.Имя, "_", Символы.ПС), 2);
	Если Не МаршрутизацияЗакрыта Тогда
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюРейсов_Рейсы_ДляУдаленияМаршрутизации ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
		ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(МассивЗначений, КодТранспорта, "ДеревоРейсовСЗаказами");
	Иначе
		//+Широков по письму 14.10.2020
		//ПоложитьЗаказыВРейсИзДереваРейсов(МассивЗначений, КодТранспорта, ДатаПланирования, Регион);
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюРейсов_Рейсы_ДляУдаленияМаршрутизации ПоложитьЗаказыВРейсИзДереваРейсов", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
		ПоложитьЗаказыВРейсИзДереваРейсов(МассивЗначений2, КодТранспорта, ДатаПланирования, Регион);
		//+-Широков по письму 14.10.2020
	КонецЕсли;
	
	
	
	//Получить список полигонов для пересчета
	//МассивИдентификаторовПолигоновДляПересчета = ПолучитьСписокПолигоновДляПересчета(МассивЗначений2);
	//Получить список рейсов для пересчета (код транспорта)
	МассивИдентификаторовРейсовДляПересчета = ПолучитьМассивИдентификаторовРейсовДляПересчета(КодТранспорта);
	
	//Добавить заказы в дерево рейсов с заказами
	//Создаем новый элемент в дереве рейсов и копируем его свойства из дерева заказов с полигонами
	//	ДобавитьЗаказыВДеревоРейсов(МассивЗначений2, КодТранспорта);
	ДобавитьЗаказыВДеревоЗаказовУдалениеМаршрутизации(Мас, КодТранспорта);
ЗаписатьВЛог("ВыборПунктаКонтекстногоМенюРейсов_Рейсы_ДляУдаленияМаршрутизации ДобавитьЗаказыВДеревоЗаказовУдалениеМаршрутизации", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
	
	//Удалить заказы из дерева полигонов
	УдалитьСтрокиИзДерева(Мас, "ДеревоПолигоновСЗаказами");
	//Пересчитать элементы дерева полигонов
	//	ПересчитатьДеревоПолигонов(ПолучитьМассивЗаказовСКарты(МассивИдентификаторовПолигоновДляПересчета), КодТранспорта, "ДеревоПолигоновСЗаказами", МассивИдентификаторовПолигоновДляПересчета);
	ПересчитатьДеревоПолигонов(МассивИдентификаторовПолигоновДляПересчета, КодТранспорта, "ДеревоПолигоновСЗаказами", МассивИдентификаторовПолигоновДляПересчета);
	//Пересчитать элементы дерева рейсов с заказами
	//	ПересчитатьДеревоРейсов(ПолучитьМассивЗаказовСКарты(МассивИдентификаторовРейсовДляПересчета), КодТранспорта, "ДеревоРейсовСЗаказами", МассивИдентификаторовПолигоновДляПересчета);
	ПересчитатьДеревоРейсов(МассивИдентификаторовРейсовДляПересчета, КодТранспорта, "ДеревоРейсовСЗаказами", МассивИдентификаторовПолигоновДляПересчета);
	//Рассчитать итоговые показатели
	РассчитатьИтоговоеКоличествоЗаказов();
	
	
	СписокВыделенныхТочекНаКартеТЗ.Очистить();
	СформироватьНадписьДекорацииВыделенныхЗаказов();
	
	//ОчиститьТочкиНаКарте();
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	
	
	
	
	//// Якурнов 30.10.2018 11:26:58 Убираем галочки в рейсах
	//Если НЕ Объект.АвтообновлениеКартыПриВыделенииЗаказов Тогда
	//	ПростановкаФлаговВДеревьях("РейсовСЗаказами", 0);
	//	ПростановкаФлаговВДеревьях("ДеревоПолигоновСЗаказами", 0);
	//КонецЕсли;	
	//
	////ОчиститьТочкиНаКарте();
	//ОтобразитьВсеВыделенныеТочкиНаКарте();
	//
	////+Широков по письму 
	////Было закомментировано
	//////ОбновитьДанные(Ложь, Ложь, Истина);  
	////ОбновитьДанные(Ложь, Истина, Ложь); 
	////ОбновитьДанные(); 
	//ОбновитьДанные(Ложь, Истина, Истина);  //Широков 14.09.2020 
	
	////-Широков по письму 
	//
	////CeHbKA
	//ПересчитатьДерево(МассивЗначений, КодТранспорта, "ДеревоРейсовСЗаказами");
	
КонецПроцедуры	

&НаСервере
Функция ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыСервер(МассивЗначений, КодТранспорта, ИсточникВызова)
	
	Рейс = "";
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Транспорт
	|ПОМЕСТИТЬ ВТ_Транспорт
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|ГДЕ
	|	новаТранспорт.Код = &КодТранспорта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	|		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт.Ссылка = ВТ_Транспорт.Транспорт.Ссылка";
	Зап.УстановитьПараметр("КодТранспорта", КодТранспорта);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Рейс = Выб.Рейс;
	Иначе
		Возврат Ложь;
	КонецеСли;	
	
	ТекПериод = ТекущаяДата();
	
	Для Каждого Тек Из МассивЗначений Цикл
		Если (НЕ СокрЛП(Тек.УИД) = "") И (НЕ Тек.УИД = Неопределено) Тогда
			Наб = РегистрыСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СоздатьНаборЗаписей();
			Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
			//+Широков по письму 28.09.2020
			//Наб.Отбор.Заказ.Установить(Тек.Заказ);
			НашУИД = Новый УникальныйИдентификатор(Тек.Уид);
			ДокЗаказ = ПолучитьСсылкуДокумента(Тек.УИД);
			Наб.Отбор.Заказ.Установить(ДокЗаказ);
			//-Широков по письму 28.09.2020
			Наб.Отбор.Период.Установить(ТекПериод);
			Наб.Отбор.Регион.Установить(Регион);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекПериод;
			Нов.Заказ = ДокЗаказ;
			Нов.ДатаПланирования = ДатаПланирования;
			Нов.Рейс = Рейс;
			Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Нов.Регион = Регион;
			
			Наб.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	//CeHbKA
	//данный код больше не нужен, т.к. пересчёт дерева и работа идёт в отдельной процедуре ПересчитатьДерево()
	//Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
	//	УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
	//КонецеСли;	
	
	//+Широков  по письму
	Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
		//		УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
		УдалитьСтрокиИзДереваСервер(МассивЗначений, "ДеревоПолигоновСЗаказами");
	КонецеСли;	
	//-Широков  по письму
	Возврат Истина;
КонецФункции	


//Широков 06.04.2021 логирование
&НаКлиенте
Процедура ЗаписатьВЛог(ИмяМетода, МассивЗначений, КодТранспорта)
	//ПолучитьКаталогВременныхФайлов();
	
	ИмяФайлаЛога = "C:\"+"ПМ"+СокрЛП(Новый УникальныйИдентификатор);
	
	//ИмяФайлаЛога = ПолучитьКаталогВременныхФайлов()+"ПМ"+СокрЛП(Новый УникальныйИдентификатор);
	
	ЛогФайл = Новый("ТекстовыйДокумент");
	//
	//ФайлЛога = Новый Файл(ИмяФайлаЛога);
	//
	//Если ФайлЛога.Существует() Тогда
	//	ЛогФайл.Прочитать(ИмяФайлаЛога);				
	//КонецЕсли;
	
	Каталог = КаталогВременныхФайлов();
	ИмяФайла = "ПМ"+Строка(Новый УникальныйИдентификатор) + ".txt";
	ИмяПромежуточногоФайла = Каталог + ИмяФайла;
	
	//ФайлЛога = Новый Файл(ИмяПромежуточногоФайла);
	
	////Если ФайлЛога.Существует() Тогда
	////	ЛогФайл.Прочитать(ИмяПромежуточногоФайла);				
	////КонецЕсли;
	
	////////ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	////////ТекстовыйДокИзФайла.ДобавитьСтроку("В траве сидел кузнечик");
	////////ТекстовыйДокИзФайла.ДобавитьСтроку("Совсем как огуречик");
	////////ТекстовыйДокИзФайла.ДобавитьСтроку("Зелененький он был");
	////////ТекстовыйДокИзФайла.Записать(ИмяПромежуточногоФайла, КодировкаТекста.UTF8);
	
	//Если ЗначениеЗаполнено(ИмяФайлаЛога) Тогда
	
	//ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	//ТекстовыйДокИзФайла.ДобавитьСтроку("В траве сидел кузнечик");
	//ТекстовыйДокИзФайла.ДобавитьСтроку("Совсем как огуречик");
	//ТекстовыйДокИзФайла.ДобавитьСтроку("Зелененький он был");
	//ТекстовыйДокИзФайла.Записать(ИмяФайлаЛога, КодировкаТекста.UTF8);
	
	//Конецесли;
	
	//Каталог = КаталогВременныхФайлов();
	//ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xml";
	//ИмяПромежуточногоФайла = Каталог + ИмяФайла;
	//Данные.Записать(ИмяПромежуточногоФайла);
	Если ЗначениеЗаполнено(ИмяФайлаЛога) Тогда 
		ЛогФайл.ДобавитьСтроку("" + ТекущаяДата());
		ЛогФайл.ДобавитьСтроку("" + Строка(ИмяМетода));
		ЛогФайл.ДобавитьСтроку("" + Строка(КодТранспорта));
		//ЛогФайл.ДобавитьСтроку("" + Строка(ИсточникВызова));
		Попытка
			Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
				ЛогФайл.ДобавитьСтроку("" + Строка(ЭлементМассива.УИД));
			КонецЦикла;
		Исключение
		КонецПопытки;
		Попытка
			Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
				ЛогФайл.ДобавитьСтроку("" + Строка(ЭлементМассива.НомерЗаказа));
			КонецЦикла;
		Исключение
		КонецПопытки;
		Попытка
			Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
				ЛогФайл.ДобавитьСтроку("" + Строка(ЭлементМассива.Заказ.Номер));
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		ЛогФайл.ДобавитьСтроку("МассивРейсовСПометками");
		Для Каждого ЭлементМассива ИЗ МассивРейсовСПометками Цикл
			ЛогФайл.ДобавитьСтроку("" + Строка(ЭлементМассива.Значение.НомерЗаказа));
		КонецЦикла;
		
		ЛогФайл.ДобавитьСтроку("МассивПолигоновСПометками");
		Для Каждого ЭлементМассива ИЗ МассивПолигоновСПометками Цикл
			ЛогФайл.ДобавитьСтроку("" + Строка(ЭлементМассива.Значение.НомерЗаказа));
		КонецЦикла;
		
		ЛогФайл.ДобавитьСтроку("СписокВыделенныхТочекНаКартеТЗ");
		Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
			//Струк = Новый Структура;
			//Струк.Вставить("Заказ", Тек.Заказ);
			Попытка
				ЛогФайл.ДобавитьСтроку("" + Строка(Тек.Заказ.Номер));
			Исключение
			КонецПопытки;
			Попытка
				ЛогФайл.ДобавитьСтроку("" + Строка(Тек.НомерДерева));
			Исключение
			КонецПопытки;
			Попытка
				ЛогФайл.ДобавитьСтроку("" + Строка(Тек.НомерЗаказа));
			Исключение
			КонецПопытки;
		Попытка
				Для Каждого Элем Из Тек Цикл
					ЛогФайл.ДобавитьСтроку("" + Строка(Элем));
				КонецЦикла;
			Исключение
			КонецПопытки;
			
		КонецЦикла;		
		//Попытка
		ЛогФайл.Записать(ИмяПромежуточногоФайла);
		//Исключение
		//КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//Широков 06.04.2021 логирование

//Широков  по письму
&НаСервере
Функция ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыНаСервере(МассивЗначений, КодТранспорта, ИсточникВызова, ИмяМетода = Неопределено)
	Рейс = "";
	
	//ЗаписатьВЛог(ИмяМетода, МассивЗначений, КодТранспорта, ИсточникВызова); //Широков 06.04.2021 логирование
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Транспорт
	|ПОМЕСТИТЬ ВТ_Транспорт
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|ГДЕ
	|	новаТранспорт.Код = &КодТранспорта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	|		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт.Ссылка = ВТ_Транспорт.Транспорт.Ссылка";
	Зап.УстановитьПараметр("КодТранспорта", КодТранспорта);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Рейс = Выб.Рейс;
	Иначе
		Возврат Ложь;
	КонецеСли;	
	
	ТекПериод = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	Для Каждого Тек Из МассивЗначений Цикл
		Если (НЕ СокрЛП(Тек.УИД) = "") И (НЕ Тек.УИД = Неопределено) Тогда
			Наб = РегистрыСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СоздатьНаборЗаписей();
			Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
			//+Широков по письму 28.09.2020
			//Наб.Отбор.Заказ.Установить(Тек.Заказ);
			//НашУИД = Новый УникальныйИдентификатор(Тек.Уид);
			ДокЗаказ = ПолучитьСсылкуДокумента(Тек.УИД);
			Наб.Отбор.Заказ.Установить(ДокЗаказ);
			//-Широков по письму 28.09.2020
			Наб.Отбор.Период.Установить(ТекПериод);
			Наб.Отбор.Регион.Установить(Регион);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекПериод;
			//+Широков по письму 28.09.2020
			//Нов.Заказ = Тек.Заказ;
			Нов.Заказ = ДокЗаказ;
			//-Широков по письму 28.09.2020
			Нов.ДатаПланирования = ДатаПланирования;
			//+Широков по письму 24.03.2021
			Нов.Рейс = Рейс;
			//Нов.Рейс = "";
			//-Широков по письму 24.03.2021
			Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Нов.Регион = Регион;
			
			Наб.Записать();
		КонецЕсли;
	КонецЦикла;	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыИндивидуальнаяМаршрутизация(МассивЗначений, КодТранспорта, ИсточникВызова)
	
	РезультатФункции = ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыНаСервере(МассивЗначений, КодТранспорта, ИсточникВызова);
	//CeHbKA
	//данный код больше не нужен, т.к. пересчёт дерева и работа идёт в отдельной процедуре ПересчитатьДерево()
	//Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
	//	УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
	//КонецеСли;	
	
	//+Широков  по письму
	//Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
	//	УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
	//КонецеСли;	
	//-Широков  по письму
	Возврат РезультатФункции;
КонецФункции	

&НаКлиенте
Функция ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(МассивЗначений, КодТранспорта, ИсточникВызова, ИмяМетода = Неопределено)
	
	РезультатФункции = ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыНаСервере(МассивЗначений, КодТранспорта, ИсточникВызова, ИмяМетода);
	//CeHbKA
	//данный код больше не нужен, т.к. пересчёт дерева и работа идёт в отдельной процедуре ПересчитатьДерево()
	//Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
	//	УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
	//КонецеСли;	
	
	//+Широков  по письму
	////Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
	////	УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
	////КонецеСли;	
	//-Широков  по письму
	Возврат РезультатФункции;
КонецФункции	
//Широков  по письму


&НаСервере
Функция ЗафиксироватьИндивидуальноМаршрутизированныеЗаказыБезУдаления(МассивЗначений, КодТранспорта, ИсточникВызова)
	
	Рейс = "";
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Транспорт
	|ПОМЕСТИТЬ ВТ_Транспорт
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|ГДЕ
	|	новаТранспорт.Код = &КодТранспорта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	|		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт.Ссылка = ВТ_Транспорт.Транспорт.Ссылка";
	Зап.УстановитьПараметр("КодТранспорта", КодТранспорта);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Рейс = Выб.Рейс;
	Иначе
		Возврат Ложь;
	КонецеСли;	
	
	ТекПериод = ТекущаяДата();
	
	Для Каждого Тек Из МассивЗначений Цикл
		Если (НЕ СокрЛП(Тек.Заказ) = "") И (НЕ Тек.Заказ = Неопределено) Тогда
			Наб = РегистрыСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СоздатьНаборЗаписей();
			Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
			//+Широков по письму 28.09.2020
			Наб.Отбор.Заказ.Установить(Тек.Заказ);
			//ДокЗаказ = ПолучитьСсылкуДокумента(Тек.УИД);
			//Наб.Отбор.Заказ.Установить(ДокЗаказ);
			//-Широков по письму 28.09.2020
			
			
			Наб.Отбор.Период.Установить(ТекПериод);
			Наб.Отбор.Регион.Установить(Регион);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекПериод;
			//Нов.Заказ = ДокЗаказ;
			Нов.Заказ = Тек.Заказ;
			Нов.ДатаПланирования = ДатаПланирования;
			Нов.Рейс = Рейс;
			Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Нов.Регион = Регион;
			
			Наб.Записать();
		КонецЕсли;
	КонецЦикла;	
	
	//CeHbKA
	//данный код больше не нужен, т.к. пересчёт дерева и работа идёт в отдельной процедуре ПересчитатьДерево()
	//Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
	//	УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
	//КонецеСли;	
	
	//+Широков  по письму
	//Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
	//	УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
	//КонецеСли;	
	//-Широков  по письму
	Возврат Истина;
КонецФункции	


//+Широков по письму 28.09.2020
&НаСервере
Функция ПолучитьСсылкуДокумента(ТекУид)
	Рез = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Если (НЕ СокрЛП(ТекУид) = "") И (НЕ ТекУид = Неопределено) Тогда
		НашУИД = Новый УникальныйИдентификатор(ТекУид);
		Рез = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(НашУИД);
		Если Рез = Неопределено Тогда
			Рез = Документы.ЗаборТовара.ПолучитьСсылку(НашУИД);
		ИначеЕсли СокрЛП(Рез.Номер) = "" Тогда
			Рез = Документы.ЗаборТовара.ПолучитьСсылку(НашУИД);
		КонецЕсли;
	КонецЕсли;
	Возврат Рез;
КонецФункции
//-Широков по письму 28.09.2020

//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
&НаСервере
Функция УбратьИндивидуальнуюМаршрутизациюНаСервере(МассивЗначений, ДанныеДокументов)
	
	//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	//Широков  по письму
	//МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева("ДеревоРейсовСЗаказами",,ДанныеДокументов);
	//МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДереваСервер("ДеревоРейсовСЗаказами",,ДанныеДокументов);
	//Широков  по письму
	//Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
	//	Сообщить("Не выделены заказы!");
	//	Возврат Ложь;
	//КонецеСли;	
	ТекПериод = ТекущаяДата();
	
	Для Каждого Тек Из МассивЗначений Цикл
		Если (НЕ СокрЛП(Тек.УИД) = "") И (НЕ Тек.УИД = Неопределено) Тогда
			Наб = РегистрыСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СоздатьНаборЗаписей();
			Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
			//+Широков по письму 28.09.2020
			//Наб.Отбор.Заказ.Установить(Тек.Заказ);
			//Наб.Отбор.Заказ.Установить(ПолучитьНавигационнуюСсылку(НашУИД));
			ДокЗаказ = ПолучитьСсылкуДокумента(Тек.УИД);
			Наб.Отбор.Заказ.Установить(ДокЗаказ);
			//-Широков по письму 28.09.2020
			Наб.Отбор.Регион.Установить(Регион);
			Наб.Отбор.Период.Установить(ТекПериод);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекПериод;
			Нов.Заказ = ДокЗаказ;
			Нов.Регион = Регион; //Широков
			Нов.ДатаПланирования = ДатаПланирования;
			Нов.Рейс = "";
			
			Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			
			Наб.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	//не работает, т.к. заказ может перейти на друг. рейс
	//УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоРейсовСЗаказами");
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УбратьИндивидуальнуюМаршрутизацию(Команда)
	//Сообщить("Начало Убрать индивидуальную маршрутизацию из дерева рейсов " + ТекущаяДата());
	//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	
	Если МассивРейсовСПометками.Количество() = 0 Тогда
		Сообщить("Не выделены заказы!");
		Возврат;
	КонецеСли;	
	
	//Широков по письму
	МассивИдентификаторовПолигоновДляПересчета = Новый Массив;
	МассивЗначений = Новый Массив;	
	Мас = Новый Массив;
	ЭлементДереваРейсов = Неопределено;
	//Широков 22.03.2021 по письму
	Для Каждого ЭлементМассивЗначений ИЗ МассивРейсовСПометками Цикл
	//Для Каждого ЭлементМассивЗначений ИЗ МассивРейсовВыделенныеСтроки Цикл
	//Широков 22.03.2021 по письму
		ЭлементДереваРейсов = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассивЗначений.Ключ);
		Если НЕ ЭлементДереваРейсов = Неопределено Тогда
			Если НЕ СокрЛП(ЭлементДереваРейсов.ЗаказССылка) = "" Тогда
				//Если НЕ ЭлементДереваРейсов = Неопределено Тогда
				//+Широков 29.03.2021
				//Заказ найден, уберем его из массива с пометками
				////МассивРейсовСПометками.Удалить(ЭлементМассивЗначений.Ключ);			
				//-Широков 29.03.2021
				
				//+Широков 18.03.2021
				Если ЭлементДереваРейсов.Свойство("ПолигонМаршрутизации") Тогда
					МассивИдентификаторовПолигоновДляПересчета.Добавить(ЭлементДереваРейсов.ПолигонМаршрутизации);	
				КонецЕсли;
				//-Широков 18.03.2021
				
				//КонецЕсли;
				
				МассивЗначений.Добавить(СокрЛП(ЭлементМассивЗначений.Значение.НомерЗаказа));
				Струк = Новый Структура;
				Струк.Вставить("Заказ", ЭлементМассивЗначений.Значение.НомерЗаказа);
				Струк.Вставить("УИД", ЭлементМассивЗначений.Значение.УИД);
				Мас.Добавить(Струк);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ФлагКарта = Ложь;
	//Широков  по письму
	
	//КодТранспорта = СтрПолучитьСтроку(СтрЗаменить(Элемент.Имя, "_", Символы.ПС), 2);
	Если НЕ ЭлементДереваРейсов = Неопределено Тогда
		КодТранспорта = ЭлементДереваРейсов.ТранспортКод;
		//	КодТранспорта = МассивЗначений[0].Количество();
		Если Не МаршрутизацияЗакрыта Тогда
			//			ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(МассивЗначений, КодТранспорта, "ДеревоРейсовСЗаказами");
ЗаписатьВЛог("УбратьИндивидуальнуюМаршрутизацию ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
			ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(Мас, КодТранспорта, "ДеревоРейсовСЗаказами");
		Иначе
ЗаписатьВЛог("УбратьИндивидуальнуюМаршрутизацию ПоложитьЗаказыВРейсИзДереваРейсов", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
			ПоложитьЗаказыВРейсИзДереваРейсов(МассивЗначений, КодТранспорта, ДатаПланирования, Регион);
		КонецЕсли;
	КонецЕсли;

	//найдём новый рейс
	
	//Широков 22.03.2021 по письму
	Для Каждого ЭлементМассивЗначений ИЗ МассивРейсовСПометками Цикл
	//Для Каждого ЭлементМассивЗначений ИЗ МассивРейсовВыделенныеСтроки Цикл
	//Широков 22.03.2021 по письму
		ЭлементДереваРейсов = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассивЗначений.Ключ);
		Если НЕ ЭлементДереваРейсов = Неопределено Тогда
			Если НЕ СокрЛП(ЭлементДереваРейсов.ЗаказССылка) = "" Тогда
				
				НовыйРодитель = Неопределено;
				Если МассивИдентификаторовПолигоновДляПересчета.Количество() > 0 Тогда
					Для Каждого ГруппаЗаказа Из ДеревоПолигоновСЗаказами.ПолучитьЭлементы() Цикл
						//				Если ПолучитьНомерДокумента(ГруппаЗаказа.ПолигонМаршрутизации) = СтрокаЗаказ.ПолигонМаршрутизации Тогда
						Если ГруппаЗаказа.ПолигонМаршрутизации = ЭлементДереваРейсов.ПолигонМаршрутизации Тогда 
							НовыйРодитель = ГруппаЗаказа;
							//ГруппаЗаказа.Отметка = 0;
							//ОбновитьФлажки(Стр);
							Прервать;
						КонецЕсли;
						//Если ГруппаЗаказа.ПолигонМаршрутизации = МассивИдентификаторовПолигоновДляПересчета[0] Тогда
						//	НовыйРодитель = ГруппаЗаказа;
						//	//ГруппаЗаказа.Отметка = 0;
						//	//ОбновитьФлажки(Стр);
						//	Прервать;
						//КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
				Если НовыйРодитель = Неопределено Тогда
					НовыйРодитель = ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НовыйРодитель, ЭлементДереваРейсов);
						//ЗаполнитьЗначенияСвойств(НовыйРодитель, ЭлементДереваРейсов.ПолучитьРодителя()); //Широков 19.10.2020  по письму
					НовыйРодитель.Отметка = 0;
					НовыйРодитель.ЗаказСсылка = Неопределено;
					НовыйРодитель.НомерЗаказа = Неопределено;
					НовыйРодитель.УИД = Неопределено;
					НовыйРодитель.КатегорияЗаказа = Неопределено;
					
					//НовыйРодитель.ПолигонМаршрутизации = МассивИдентификаторовПолигоновДляПересчета[0];
				КонецЕсли;
				
				Если НЕ НовыйРодитель = Неопределено Тогда
					//Для Каждого ЭлементСоответствия ИЗ МассивРейсовСПометками Цикл
					//	Если НЕ ТипЗнч(ЭлементСоответствия.Значение.НомерЗаказа) = Тип("Булево") Тогда
					//		ЭлементДереваРейсов = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементСоответствия.Ключ);
					Если НЕ ЭлементДереваРейсов = Неопределено Тогда
						
						//добавим новую строку
						НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
						ЭлементДереваРейсов.Отметка = 0;
						
	//Широков 22.03.2021 по письму
						//ЭлементДереваРейсов.ПолучитьРодителя().Отметка = 0;
	//Широков 22.03.2021 по письму
						ЗаполнитьЗначенияСвойств(НС, ЭлементДереваРейсов);
						//Широков
						//Удаляем обработанный заказ из дерева рейсов с заказами
						РодительРейса = ЭлементДереваРейсов.ПолучитьРодителя();
						Если НЕ РодительРейса = Неопределено Тогда
							Если РодительРейса.ПолучитьЭлементы().Количество() > 0 Тогда
								//				Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
								РодительРейса.ПолучитьЭлементы().Удалить(ЭлементДереваРейсов);
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					//	КонецЕсли;
					//КонецЦикла;
					
				КонецЕсли;	
				
				ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
				//Пересчитаем родителя
				Если НЕ РодительРейса = Неопределено Тогда
					Выполнить("РодительРейса.Итого = 0");
					
					Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
						Выполнить("РодительРейса." + СтрокаИмяКолонки + " = 0");
						Для Каждого Тек Из РодительРейса.ПолучитьЭлементы() Цикл
							Выполнить("РодительРейса." + СтрокаИмяКолонки + " = " + "РодительРейса." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
						КонецЦикла;	
						Выполнить("РодительРейса.Итого = РодительРейса.Итого " + " + РодительРейса." + СтрокаИмяКолонки);
					КонецЦикла;	
				КонецЕсли;
				
				//Пересчитаем родителя в полигонах
				Если НЕ НовыйРодитель = Неопределено Тогда
					Выполнить("НовыйРодитель.Итого = 0");
					
					Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
						Выполнить("НовыйРодитель." + СтрокаИмяКолонки + " = 0");
						Для Каждого Тек Из НовыйРодитель.ПолучитьЭлементы() Цикл
							Выполнить("НовыйРодитель." + СтрокаИмяКолонки + " = " + "НовыйРодитель." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
						КонецЦикла;	
						Выполнить("НовыйРодитель.Итого = НовыйРодитель.Итого " + " + НовыйРодитель." + СтрокаИмяКолонки);
					КонецЦикла;	
				КонецЕсли;
				
				//+Широков 29.03.2021
				//Заказ найден, уберем его из массива с пометками
				МассивРейсовСПометками.Удалить(ЭлементМассивЗначений.Ключ);			
				//-Широков 29.03.2021
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//+Широков по письму 25.03.2021
	Если НЕ РодительРейса = Неопределено Тогда
		//Если РодительРейса.ПолучитьЭлементы().Количество() = 0 Тогда
		РодительРейса.Отметка = 0;
		//КонецЕсли;
	КонецЕсли;
	//-Широков по письму 25.03.2021

	//Пересчитаем группы
	ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
	
	Для Каждого ЭлементМассива ИЗ МассивПолигоновСПометками Цикл
		СтрокаРейсГруппа = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);
		Если НЕ СтрокаРейсГруппа = Неопределено Тогда
			Выполнить("СтрокаРейсГруппа.Итого = 0");
			
			Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
				Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
				КонецЦикла;	
				Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
	
	//Пересчитаем группы
	//ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
	//Широков 22.03.2021 по письму
	Для Каждого ЭлементМассива ИЗ МассивРейсовСПометками Цикл
	//Для Каждого ЭлементМассива ИЗ МассивРейсовВыделенныеСтроки Цикл
	//Широков 22.03.2021 по письму
		СтрокаРейсГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);
		Если НЕ СтрокаРейсГруппа = Неопределено Тогда
			Выполнить("СтрокаРейсГруппа.Итого = 0");
			
			Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
				Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
				КонецЦикла;	
				Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
	
	//Пересчитаем родителя
	Если НЕ РодительРейса = Неопределено Тогда
		Выполнить("РодительРейса.Итого = 0");
		
		Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
			Выполнить("РодительРейса." + СтрокаИмяКолонки + " = 0");
			Для Каждого Тек Из РодительРейса.ПолучитьЭлементы() Цикл
				Выполнить("РодительРейса." + СтрокаИмяКолонки + " = " + "РодительРейса." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
			КонецЦикла;	
			Выполнить("РодительРейса.Итого = РодительРейса.Итого " + " + РодительРейса." + СтрокаИмяКолонки);
		КонецЦикла;	
	КонецЕсли;
	
	//Пересчитаем родителя в полигонах
	Если НЕ НовыйРодитель = Неопределено Тогда
		Выполнить("НовыйРодитель.Итого = 0");
		
		Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
			Выполнить("НовыйРодитель." + СтрокаИмяКолонки + " = 0");
			Для Каждого Тек Из НовыйРодитель.ПолучитьЭлементы() Цикл
				Выполнить("НовыйРодитель." + СтрокаИмяКолонки + " = " + "НовыйРодитель." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
			КонецЦикла;	
			Выполнить("НовыйРодитель.Итого = НовыйРодитель.Итого " + " + НовыйРодитель." + СтрокаИмяКолонки);
		КонецЦикла;	
	КонецЕсли;
	
	//ПересчитатьДеревоРейсов(МассивРейсовСПометками, КодТранспорта, "ДеревоПолигоновСЗаказами", МассивПолигоновСПометками);
	//ПересчитатьДеревоРейсов(МассивРейсовСПометками, КодТранспорта, "ДеревоРейсовСЗаказами", МассивПолигоновСПометками);
ЗаписатьВЛог("УбратьИндивидуальнуюМаршрутизацию пересчет", МассивЗначений, КодТранспорта); //Широков 06.04.2021 логирование
	
//Широков 22.03.2021 по письму закомментировал
//МассивРейсовСПометками.Очистить();
//МассивПолигоновСПометками.Очистить();
//Широков 22.03.2021 по письму закомментировал
	
	//Широков 22.03.2021 по письму
	МассивРейсовВыделенныеСтроки.Очистить();
	//Широков 22.03.2021 по письму
	
	//Рассчитать итоговые показатели
	РассчитатьИтоговоеКоличествоЗаказов();
	
	
	СписокВыделенныхТочекНаКартеТЗ.Очистить();
	//Сообщить("СписокВыделенныхТочекНаКартеТЗ.Очистить " + Строка(ТекущаяДата()));
	СформироватьНадписьДекорацииВыделенныхЗаказов();
	//Сообщить("СформироватьНадписьДекорацииВыделенныхЗаказов " + Строка(ТекущаяДата()));
	
	//Широков 23.10.2020  по письму
	Если ВыделятьПолигоныНаКарте Тогда
		ВыделениеПолигоновНаКарте();
	КонецЕсли;
	//ОчиститьТочкиНаКарте();
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	//Сообщить("ОтобразитьВсеВыделенныеТочкиНаКарте " + Строка(ТекущаяДата()));
	
	
	
	//+Широков по письму 28.09.2020
	//СтатусОбработки = УбратьИндивидуальнуюМаршрутизациюНаСервере(МассивЗначений, ДанныеЗаказовЗаборов);
	СтатусОбработки = УбратьИндивидуальнуюМаршрутизациюНаСервере(Мас, ДанныеЗаказовЗаборов);
	//-Широков по письму 28.09.2020
	
	
	Если СтатусОбработки Тогда
		ОчиститьТочкиНаКарте();
		//////ОбновитьДанные(Ложь, Истина, Истина);
	КонецеСли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьДанныеМаршрутизацииНаСервере()
	
	Событие = Справочники.СобытияКонтроляВремени.ПМФиксацияМаршрутизации;
	
	УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, "", Ложь,,,Регион, ДатаПланирования);
	
	Зап = Новый Запрос;
	//Асеев 29.08.2023 (Задача № 5117)>>>
	//Асеев 29.08.2023 (Задача № 5117)<<<
	Зап.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РТУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
	|		И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	|		И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ
	|	ИЗ
	|		РегистрСведений.СтатусыПредварительногоЗакрытияРейсов.СрезПоследних КАК СтатусыПредварительногоЗакрытияРейсовСрезПоследних
	|	ГДЕ
	|		СтатусыПредварительногоЗакрытияРейсовСрезПоследних.ДатаДоставкиЗаказа = &ДатаНач
	|		И СтатусыПредварительногоЗакрытияРейсовСрезПоследних.СтатусПредварительногоЗакрытияРейса = ЗНАЧЕНИЕ(Перечисление.СтатусыПредварительногоЗакрытияРейсов.РейсЗакрытПредварительно)
	|		И СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ.ТерминалДоставки = &ТерминалДоставки) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ КАК Заказ,
	|	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс КАК Рейс,
	|	ВЫБОР
	|		КОГДА ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ДополнительныеПараметрыЗаказа.ЛогистическийБрейк
	|		ИНАЧЕ &ЗаборнаяКатегория
	|	КОНЕЦ КАК КатегорияЗаказа,
	|	ВЫБОР
	|		КОГДА ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Drop)
	|		КОГДА ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ ССЫЛКА Документ.ЗаборТовара
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Collection)
	|	КОНЕЦ КАК ВидЗаказа
	|ПОМЕСТИТЬ ВТ_ИндивидуальнаяМаршрутизация
	|ИЗ
	|	РегистрСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СрезПоследних(, ДатаПланирования = &ДатаНач) КАК ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РТУ КАК ВТ_РТУ
	|		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ = ВТ_РТУ.Ссылка
	|ГДЕ
	|	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс <> ЗНАЧЕНИЕ(Документ.Рейс.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|				ТОГДА НЕ ВТ_РТУ.Ссылка ЕСТЬ NULL
	|						И НЕ ДополнительныеПараметрыЗаказа.Заказ ЕСТЬ NULL
	|			ИНАЧЕ ВЫРАЗИТЬ(ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ КАК Документ.ЗаборТовара).Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РТУ.Ссылка КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка) КАК ТипЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ЛогистическийБрейк, ИСТИНА) = ИСТИНА
	|			ТОГДА 1
	|		КОГДА ДополнительныеПараметрыЗаказа.ЛогистическийБрейк = ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ДополнительныеПараметрыЗаказа.ЛогистическийБрейк
	|	КОНЕЦ КАК КатегорияЗаказа,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Смена, ЗНАЧЕНИЕ(Справочник.Смены.Смена1)) КАК Смена
	|ПОМЕСТИТЬ ВТ_Заказы_1
	|ИЗ
	|	ВТ_РТУ КАК ВТ_РТУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктуальнаяСхемаЛогистическихБрейков.СрезПоследних КАК АктуальнаяСхемаЛогистическихБрейковСрезПоследних
	|			ПО ДополнительныеПараметрыЗаказа.СхемаЛогистическихБрейков = АктуальнаяСхемаЛогистическихБрейковСрезПоследних.СхемаЛогистическихБрейков
	|		ПО ВТ_РТУ.Ссылка = ДополнительныеПараметрыЗаказа.Заказ
	|			И (ДополнительныеПараметрыЗаказа.Доставка <> ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка))
	|ГДЕ
	|	ДополнительныеПараметрыЗаказа.ВнешнийОператорМаршрутизации.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РТУ.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ЛогистическийБрейк, ИСТИНА) = ИСТИНА
	|			ТОГДА 1
	|		КОГДА ДополнительныеПараметрыЗаказа.ЛогистическийБрейк = ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ДополнительныеПараметрыЗаказа.ЛогистическийБрейк
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Смена, ЗНАЧЕНИЕ(Справочник.Смены.Смена1))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаборТовара.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор),
	|	&ЗаборнаяКатегория,
	|	ЗНАЧЕНИЕ(Справочник.Смены.Смена1)
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗаборТовара.СтатусИнтернетМагазина = 2
	|	И ЗаборТовара.ПометкаУдаления = ЛОЖЬ
	|	И ЗаборТовара.ТерминалДоставки = &ТерминалДоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаборТовара.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы_1.КатегорияЗаказа КАК КатегорияЗаказа,
	|	ЕСТЬNULL(ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации, ЗНАЧЕНИЕ(Справочник.ПолигоныМаршрутизации.ПустаяСсылка)) КАК Полигон,
	|	ВТ_Заказы_1.Заказ КАК Заказ,
	|	ВТ_Заказы_1.ТипЗаказа КАК ТипЗаказа,
	|	ВТ_Заказы_1.Смена КАК Смена
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	ВТ_Заказы_1 КАК ВТ_Заказы_1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныМаршрутизацииЗаказов.СрезПоследних(, СхемаМаршрутизации = &СхемаМаршрутизации) КАК ПолигоныМаршрутизацииЗаказовСрезПоследних
	|		ПО ВТ_Заказы_1.Заказ = ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИндивидуальнаяМаршрутизация КАК ВТ_ИндивидуальнаяМаршрутизация
	|		ПО ВТ_Заказы_1.Заказ = ВТ_ИндивидуальнаяМаршрутизация.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КорзинаПолигональнойМаршрутизации.СрезПоследних(
	|				,
	|				ДатаПланирования = &ДатаНач
	|					И ТерминалДоставки = &ТерминалДоставки) КАК КорзинаПолигональнойМаршрутизацииСрезПоследних
	|		ПО ВТ_Заказы_1.Заказ = КорзинаПолигональнойМаршрутизацииСрезПоследних.Заказ
	|			И (КорзинаПолигональнойМаршрутизацииСрезПоследних.ЗаказВКорзине = ИСТИНА)
	|ГДЕ
	|	ЕСТЬNULL(ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации, ИСТИНА) <> ИСТИНА
	|	И ЕСТЬNULL(ВТ_ИндивидуальнаяМаршрутизация.Заказ, ИСТИНА) = ИСТИНА
	|	И ЕСТЬNULL(КорзинаПолигональнойМаршрутизацииСрезПоследних.Период, ИСТИНА) = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Заказы_1.КатегорияЗаказа,
	|	ЕСТЬNULL(ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации, ЗНАЧЕНИЕ(Справочник.ПолигоныМаршрутизации.ПустаяСсылка)),
	|	ВТ_Заказы_1.Заказ,
	|	ВТ_Заказы_1.ТипЗаказа,
	|	ВТ_Заказы_1.Смена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РейсДокументДляПараметров.Ссылка КАК Рейс,
	|	ПолигоныИКатегорииЗаказовДляРейсов.Полигон КАК Полигон,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПолигоныИКатегорииЗаказовДляРейсов.КатегорияЗаказа, ИСТИНА) = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)
	|		КОГДА ПолигоныИКатегорииЗаказовДляРейсов.КатегорияЗаказа = ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ПолигоныИКатегорииЗаказовДляРейсов.КатегорияЗаказа
	|	КОНЕЦ КАК КатегорияЗаказа
	|ПОМЕСТИТЬ ВТ_РейсыСПараметрами
	|ИЗ
	|	Документ.Рейс КАК РейсДокументДляПараметров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
	|		ПО (ПолигоныИКатегорииЗаказовДляРейсов.Рейс = РейсДокументДляПараметров.Ссылка)
	|ГДЕ
	|	РейсДокументДляПараметров.Проведен = ИСТИНА
	|	И РейсДокументДляПараметров.ДатаРейса = &ДатаНач
	|	И РейсДокументДляПараметров.МетодикаМаршрутизации = ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	|	И РейсДокументДляПараметров.ТерминалДоставки = &ТерминалДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РейсыСПараметрами.Рейс КАК Рейс,
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Drop)
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Collection)
	|	КОНЕЦ КАК ВидЗаказа,
	|	ЛОЖЬ КАК ИндивидуальнаяМаршрутизация,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	|	ВТ_Заказы.Заказ.Номер КАК ЗаказНомер,
	|	ВТ_РейсыСПараметрами.Рейс.СменаРейса КАК СменаРейса,
	|	ВТ_Заказы.Смена КАК СменаЗаказа,
	|	ВТ_Заказы.Заказ.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина
	|ИЗ
	|	ВТ_РейсыСПараметрами КАК ВТ_РейсыСПараметрами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|		ПО ВТ_РейсыСПараметрами.Полигон = ВТ_Заказы.Полигон
	|			И ВТ_РейсыСПараметрами.КатегорияЗаказа = ВТ_Заказы.КатегорияЗаказа
	|			И (ЕСТЬNULL(ВТ_Заказы.Заказ, ИСТИНА) <> ИСТИНА)
	|			И ВТ_РейсыСПараметрами.Рейс.СменаРейса = ВТ_Заказы.Смена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО ВТ_РейсыСПараметрами.Рейс = ПривязкаМашинКРейсамСрезПоследних.Рейс
	|ГДЕ
	|	ВТ_Заказы.Заказ.СтатусИнтернетМагазина = 2
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РейсыСПараметрами.Рейс,
	|	ЕСТЬNULL(ВТ_РейсыСПараметрами.Полигон, """"),
	|	ВТ_Заказы.Заказ,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Drop)
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Collection)
	|	КОНЕЦ,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт,
	|	ВТ_Заказы.Заказ.Номер,
	|	ВТ_РейсыСПараметрами.Рейс.СменаРейса,
	|	ВТ_Заказы.Смена,
	|	ВТ_Заказы.Заказ.СтатусИнтернетМагазина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс,
	|	ВТ_ИндивидуальнаяМаршрутизация.Заказ,
	|	ВТ_ИндивидуальнаяМаршрутизация.ВидЗаказа,
	|	ИСТИНА,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт,
	|	NULL,
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс.СменаРейса,
	|	NULL,
	|	ВТ_ИндивидуальнаяМаршрутизация.Заказ.СтатусИнтернетМагазина
	|ИЗ
	|	ВТ_РейсыСПараметрами КАК ВТ_РейсыСПараметрами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, ) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО ВТ_РейсыСПараметрами.Рейс = ПривязкаМашинКРейсамСрезПоследних.Рейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИндивидуальнаяМаршрутизация КАК ВТ_ИндивидуальнаяМаршрутизация
	|		ПО ВТ_РейсыСПараметрами.Рейс = ВТ_ИндивидуальнаяМаршрутизация.Рейс
	|ГДЕ
	|	ВТ_ИндивидуальнаяМаршрутизация.Заказ.СтатусИнтернетМагазина = 2
	|
	|СГРУППИРОВАТЬ ПО
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс,
	|	ВТ_ИндивидуальнаяМаршрутизация.Заказ,
	|	ВТ_ИндивидуальнаяМаршрутизация.ВидЗаказа,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт,
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс.СменаРейса,
	|	ВТ_ИндивидуальнаяМаршрутизация.Заказ.СтатусИнтернетМагазина
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рейс,
	|	ЗаказНомер
	|ИТОГИ ПО
	|	Рейс";

	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	Зап.УстановитьПараметр("СхемаМаршрутизации", ПолигональнаяСхемаКарты);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	Зап.УстановитьПараметр("ЗаборнаяКатегория", ЗаборнаяКатегория);
	
	//CeHbKA #3131 17.05.2019
	//вместо записи документов в цикле, заполним ТЗ нужными данными
	ТаблицаРейсов = Новый ТаблицаЗначений;
	ТаблицаРейсов.Колонки.Добавить("Рейс");
	ТаблицаРейсов.Колонки.Добавить("Заказы");
	
	РезультатЗапроса = Зап.Выполнить();
	
	НаборКолонок = РезультатЗапроса.Колонки;
	
	ВыбРейс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//ВыбРейс = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//CeHbKA #3131 17.05.2019	
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	БылиЗаказы = Ложь;
	
	Пока ВыбРейс.Следующий() Цикл
		
		//CeHbKA #3131 17.05.2019
		
		МассивЗаказов = Новый Массив;
		
		//Рейс = ВыбРейс.Рейс.ПолучитьОбъект();
		//Рейс.Заказы.Очистить();
		Выб = ВыбРейс.Выбрать();
		
		СтрокаТочек = "";
		
		Пока Выб.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выб.Заказ) Тогда
				Продолжить;
			КонецеСли;
			
			СтрокаТЧСтруктура = Новый Структура(); 
			
			Для каждого КолонкаРЗ Из НаборКолонок Цикл
				СтрокаТЧСтруктура.Вставить(КолонкаРЗ.Имя);
			КонецЦикла; 
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧСтруктура, Выб);
			
			МассивЗаказов.Добавить(СтрокаТЧСтруктура);
			//Нов = Рейс.Заказы.Добавить();
			//ЗаполнитьЗначенияСвойств(Нов, Выб);
			БылиЗаказы = Истина;
			СтрокаТочек = СТрокаТочек + Строка(Выб.Заказ.УникальныйИдентификатор()) + ";";
		КонецЦикла;	
		
		
		Если БылиЗаказы Тогда
			
			СтрокаТочек = Лев(СтрокаТочек, СтрДлина(СтрокаТочек) - 1);
			
			СтрокаРейс = ТаблицаРейсов.Добавить();
			СтрокаРейс.Рейс = ВыбРейс.Рейс;
			СтрокаРейс.Заказы = МассивЗаказов;
			
			////Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			////	ВыполнитьСкрипт("createRoute(""" + СтрокаТочек + """, true");
			////КонецеСли;	
			//
			//Рейс.Записать(РежимЗаписиДокумента.Запись);
			//Рейс.Записать(РежимЗаписиДокумента.Проведение);
			
			//// Якурнов 31.07.2018 12:11:40 Контролируем ПМФиксацияМаршрутизации
			//
			//УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие,Рейс.Ссылка,Истина,,,Регион, ДатаПланирования);
			
		КонецеСли;	
	КонецЦикла;	
	
	//передадим ТЗ в обработку
	ПолигональнаяМаршрутизацияСервер.ОбработатьРейсыВПотоке(ТаблицаРейсов, Регион, Событие, ДатаПланирования);
	//CeHbKA #3131 17.05.2019
	
	Если БылиЗаказы Тогда
		ЗафиксироватьМаршрутизацию();
		ЗафиксироватьТранзакцию();
		
		//Асеев 05.07.2024 (Задача № 5291)>>>
		Если Регион = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ДатаПланирования);
			МассивПараметров.Добавить(Регион);
			
			ФоновыеЗадания.Выполнить("МаршрутизацияЗаказовСервер.АсинхронныйВызовПроцедурИзЗафиксироватьДанныеМаршрутизации", МассивПараметров);
		КонецЕсли;
		//Асеев 05.07.2024 (Задача № 5291)<<<
		
		//CeHbKA #3131 17.05.2019
		//УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, "", Истина,,,Регион, ДатаПланирования);
		
		
		Сообщить("Маршрутизация зафиксирована!", СтатусСообщения.Обычное);
	Иначе		
		//CeHbKA #3131 17.05.2019
		УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, "", Истина,,,Регион, ДатаПланирования);
		Сообщить("Данных по маршрутизации не обнаружено! Маршрутизация не сформирована и закрыта не будет!", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДанныеМаршрутизации(Команда)
	От = Неопределено;
	
	Если Регион.Пустая() Тогда
		Сообщить("Выберите регион доставки!", СтатусСообщения.ОченьВажное);
		ЭтаФорма.ТекущийЭлемент = Элементы.Регион;
		Возврат;
	КонецЕсли;	
	
	//Если Не ПроверкаНаличияДанныхВКорзинеМаршрутизации(ДатаПланирования, Регион) Тогда
	//	Сообщить("В корзине маршрутизации обнаружены отложенные заказы. Фиксация данных маршрутизации невозможна.", СтатусСообщения.ОченьВажное);
	//	Возврат;
	//КонецеСли;	
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗафиксироватьДанныеМаршрутизацииЗавершение", ЭтотОбъект), "После фиксации данных дальнейшая модификация данных полигональной маршрутизации за дату " + Формат(ДатаПланирования, "ДЛФ=DD") + " будет невозможна. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНаличияДанныхВКорзинеМаршрутизации(ДатаПланирования, ТерминалДоставки)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	КорзинаПолигональнойМаршрутизацииСрезПоследних.Заказ КАК Заказ
	|ИЗ
	|	РегистрСведений.КорзинаПолигональнойМаршрутизации.СрезПоследних(
	|			,
	|			ДатаПланирования = &ДатаПланирования
	|				И ТерминалДоставки = &ТерминалДоставки) КАК КорзинаПолигональнойМаршрутизацииСрезПоследних
	|ГДЕ
	|	КорзинаПолигональнойМаршрутизацииСрезПоследних.ЗаказВКорзине = ИСТИНА";
	Зап.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	
	Рез = Зап.Выполнить();
	Возврат Рез.Пустой();
КонецФункции	

&НаКлиенте
Процедура ЗафиксироватьДанныеМаршрутизацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	От = РезультатВопроса;
	Если От = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьДанныеМаршрутизацииНаСервере();
		ОформлениеФормы();

		//+Широков 13.01.2021 по письму
		ОбновитьДанные(Истина, Истина, Истина);
		//-Широков 13.01.2021 по письму
		
	КонецеСли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаЗакрытогоРейсаНаСервере(Рейс)
	Возврат baoВызовСервера.РейсЗакрыт(Рейс);
КонецФункции

&НаКлиенте
Процедура ДеревоРейсовСЗаказамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	Если Поле.Имя = "Транспорт_Рейс" Тогда
		СтандартнаяОбработка = Ложь;
		Если ПроверкаЗакрытогоРейсаНаСервере(ТекущиеДанные.Рейс) Тогда
			Сообщить("Рейс закрыт!!", СтатусСообщения.ОченьВажное);
			Возврат;
		конецеСли;	
		ВыбратьЭкипаж(ТекущиеДанные.Рейс, ТекущиеДанные.Транспорт, ТекущиеДанные.Водитель, ТекущиеДанные.Экспедитор);
		
		//Широков по письму
		//ОбновитьДанные(Ложь, Ложь);
		ОбновитьДанные(Ложь, Истина, Ложь);
		//Широков по письму
	ИначеЕсли Поле.Имя = "НомерЗаказа_Рейс" Тогда
		СтандартнаяОбработка = ложь;
		
		НомерЗаказа = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.НомерЗаказа;
		Если ЗначениеЗаполнено(НомерЗаказа) Тогда
			ОткрытьФормуПодсказкиПоЗаказу(НомерЗаказа);
		КонецЕсли;	
	КонецеСли;			
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭкипаж(Рейс, Транспорт, Водитель, Экспедитор)
	МаршрутизацияЗаказовКлиент.ВыбратьЭкипажДляРейса(Рейс, ДатаПланирования, Транспорт, Водитель, Экспедитор, ЭтаФорма);
КонецПроцедуры	


&НаСервереБезКонтекста
Процедура ПроставитьКатегорииЗаказовНаСервере(ДатаПланирования, Регион, СхемаБрейков)
	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.Заказ.Ссылка КАК Заказ
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|ГДЕ
	|	ДополнительныеПараметрыЗаказа.Заказ.ТерминалДоставки = &ТерминалДоставки
	|	И ДополнительныеПараметрыЗаказа.Заказ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ДополнительныеПараметрыЗаказа.ЛогистическийБрейк = ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	МассивЗаказов = Новый Массив;
	
	Пока Выб.Следующий() Цикл
		МассивЗаказов.Добавить(Выб.Заказ);
	КонецЦикла;	
	
	МаршрутизацияЗаказовСервер.УстановитьЛогистическиеКатегорииЗаказов(МассивЗаказов);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьКатегорииЗаказов(Команда)
	Если Регион.Пустая() Тогда
		Сообщить("Выберите регион доставки!", СтатусСообщения.ОченьВажное);
		ЭтаФорма.ТекущийЭлемент = Элементы.Регион;
		Возврат;
	КонецЕсли;	
	
	ПроставитьКатегорииЗаказовНаСервере(ДатаПланирования, Регион, СхемаЛогистическихБрейков);
	
	Сообщить("Обработка завершена!");
	ОбновитьДанные(Ложь, Истина, Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РейсПроверенНаСервере(Рейс, Пометка)
	// Вставить содержимое обработчика.
	Параметры = Новый Структура;
	Параметры.Вставить("Период", ТекущаяДата());
	Параметры.Вставить("ДокументПроверен", Пометка);
	Параметры.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Параметры.Вставить("Документ", Рейс);
	
	Попытка
		ПроверкаДокументовСервер.УстановитьСтатусПроверкиДокумента(Параметры);
	Исключение
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура РейсПроверен(Команда)
	Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	Если РейсПроверенНаСервере(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Рейс, Не Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен) Тогда
		Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен = Не Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен;
		Элементы.ДеревоРейсовСЗаказамиКонтекстноеМенюРейсПроверен.Пометка = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен;
	КонецеСли;	
КонецПроцедуры

// Якурнов 26.07.2018 16:46:40
&НаКлиенте
Процедура ПолучитьПолигоныЗаказов(Команда)
	ИДТекущейСтроки = Элементы["ДеревоПолигоновСЗаказами"].ТекущаяСтрока;
	Если ИДТекущейСтроки <> Неопределено Тогда
		
		ЭлементКоллекции = ЭтаФорма["ДеревоПолигоновСЗаказами"].НайтиПоИдентификатору(ИДТекущейСтроки);
		
		МассивЗаказов = Новый Массив;
		
		ЗаказПривязанКПолигону = Ложь;
		
		Если ЭлементКоллекции.НомерЗаказа <> "" Тогда
			Если ЗначениеЗаполнено(ЭлементКоллекции.ПолигонМаршрутизации) Тогда
				ЗаказПривязанКПолигону = Истина;
			Иначе
				
				Структура = Новый Структура;
				Структура.Вставить("НомерЗаказа",ЭлементКоллекции.НомерЗаказа);
				Структура.Вставить("Документ",ЭлементКоллекции.ЗаказСсылка);
				
				МассивЗаказов.Добавить(Структура);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Элем Из ЭлементКоллекции.ПолучитьЭлементы() Цикл
			Если Элем.НомерЗаказа <> "" Тогда
				Если ЗначениеЗаполнено(Элем.ПолигонМаршрутизации) Тогда
					ЗаказПривязанКПолигону = Истина;
				Иначе
					Структура = Новый Структура;
					Структура.Вставить("НомерЗаказа",Элем.НомерЗаказа);
					Структура.Вставить("Документ",Элем.ЗаказСсылка);
					
					МассивЗаказов.Добавить(Структура);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ЗаказПривязанКПолигону Тогда
			Сообщить("Обработка пропущена. Заказ(ы) уже привязан(ы) к полигону!!!");
		Иначе
			ПолучитьПолигоныЗаказовНаСервере(МассивЗаказов);
			
			ОбновитьДанные();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Якурнов 30.07.2018 10:28:04
&НаСервере
Процедура ПолучитьПолигоныЗаказовНаСервере(МассивЗаказов)
	
	//+Степанов Задача № 3607
	ОбработкаПоискАдреса = Обработки.новаПоискАдреса.Создать();
	//-Степанов
	
	МассивТочек = Новый Массив;
	//Асеев 14.10.2022 (Задача № 4913)>>>
	МассивЗаказовЗон = Новый Массив;
	//Асеев 14.10.2022 (Задача № 4913)<<<
	
	Для Каждого ЭлМас из МассивЗаказов Цикл
		
		Док = ЭлМас.Документ;
		
		СтрукВозврата = ПолучитьЗаказИТочкуДоставкиПоНомеруЗаказа(ЭлМас.НомерЗаказа);
		Если СтрукВозврата <> Неопределено Тогда
			Если СтрукВозврата.ТочкаДоставки.Адрес.Широта<>0 
				И СтрукВозврата.ТочкаДоставки.Адрес.Долгота<>0 Тогда
				Шир = СтрукВозврата.ТочкаДоставки.Адрес.Широта;
				Дол = СтрукВозврата.ТочкаДоставки.Адрес.Долгота;
				
				Струк = Новый Структура;
				Струк.Вставить("НомерЗаказа",Число(СокрЛП(ЭлМас.НомерЗаказа)));
				Струк.Вставить("Широта",Шир);
				Струк.Вставить("Долгота",Дол);
				МассивТочек.Добавить(Струк);
				
				//Асеев 14.10.2022 (Задача № 4913)>>>
				МассивЗаказовЗон.Добавить(ЭлМас.НомерЗаказа);
				//Асеев 14.10.2022 (Задача № 4913)<<<
				
				//Сообщить("Выбран заказ: " + Строка(ЭлМас.НомерЗаказа)+ " ш: "+ Шир + " д:" + Дол);
				//+Степанов Задача № 3607 Добавлен поиск координат через новаПоискАдреса.	
			Иначе
				РезультатПоискаАдреса = ПолучитьКоординатыДляПривязки(ОбработкаПоискАдреса,СтрукВозврата.ТочкаПрибытияНаименование);
				Если РезультатПоискаАдреса <> Неопределено И РезультатПоискаАдреса.Широта <> 0 И РезультатПоискаАдреса.Долгота <> 0 Тогда 
					Струк = Новый Структура;
					Струк.Вставить("НомерЗаказа",Число(СокрЛП(ЭлМас.НомерЗаказа)));
					Струк.Вставить("Широта",РезультатПоискаАдреса.Широта);
					Струк.Вставить("Долгота",РезультатПоискаАдреса.Долгота);
					МассивТочек.Добавить(Струк);
					
					//Асеев 14.10.2022 (Задача № 4913)>>>
					МассивЗаказовЗон.Добавить(ЭлМас.НомерЗаказа);
					//Асеев 14.10.2022 (Задача № 4913)<<<
				Иначе 
					Сообщить("Не определились координаты заказа:" + Строка(ЭлМас.НомерЗаказа));	
				КонецЕсли;
			КонецЕсли;
		Иначе
			Сообщить("Не определились координаты заказа:" + Строка(ЭлМас.НомерЗаказа));
		КонецЕсли;
	КонецЦикла;
	
	//+Широков 24.12.2020 по письму
	//Если ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивТочек) Тогда
	Если ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивТочек, Неопределено, "Обработка.ПолигональныйМаршрутизатор.ФормаУпр.ПолучитьПолигоныЗаказовНаСервере(6211, 7)") Тогда
		//-Широков 24.12.2020 по письму
		Сообщить("Обработка завершена");
	Иначе
		Сообщить("Обработка завершена с ошибками");
	КонецЕсли;	
	
	//Асеев 14.10.2022 (Задача № 4913)>>>
	ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
	//Асеев 14.10.2022 (Задача № 4913)<<<
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДанныхПоПолигонамВторойСмены(Команда)
	
	СтруктураЗаполненияНовогоДокумента = Новый Структура("ЗначенияЗаполнения", Новый Структура("ДатаРейсов, Регион", ДатаПланирования, Регион));
	ОткрытьФорму("Документ.ФиксацияИзмененияПолигоновОпределенияСмен.ФормаОбъекта", СтруктураЗаполненияНовогоДокумента);
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСКорзиной
&НаСервере
Процедура ОбновитьКорзину()
	Корзина.Параметры.УстановитьЗначениеПараметра("ДатаНач", НачалоДня(ДатаПланирования));
	Корзина.Параметры.УстановитьЗначениеПараметра("ДатаКон", КонецДня(ДатаПланирования));
	Корзина.Параметры.УстановитьЗначениеПараметра("ТерминалДоставки", Регион);	
	Элементы.Корзина.Обновить();
Конецпроцедуры	


&НаСервере
Процедура ОтменитьОтвязкуЗаказаВКорзинеНаСервере(НомерЗаказа)
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	НезагруженныеЗаказыВАвто.Рейс.Транспорт КАК РейсТранспорт,
	|	НезагруженныеЗаказыВАвто.Заказ КАК Заказ,
	|	НезагруженныеЗаказыВАвто.Рейс КАК Рейс,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РейсЗаказы.Ссылка.Ссылка, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПривязанКРейсуТекущейДаты,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК ТранспортПогрузки
	|ИЗ
	|	РегистрСведений.НезагруженныеЗаказыВАвто КАК НезагруженныеЗаказыВАвто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НезагруженныеЗаказыВАвто.СрезПоследних КАК НезагруженныеЗаказыВАвтоСрезПоследних
	|		ПО НезагруженныеЗаказыВАвто.Заказ = НезагруженныеЗаказыВАвтоСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|			ПО РейсЗаказы.Ссылка.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	|		ПО (НезагруженныеЗаказыВАвто.Заказ = ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.РеализацияТоваровУслуг).Ссылка)
	|			И (РейсЗаказы.Ссылка.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон)
	|			И (РейсЗаказы.УдаленИзРейса = ЛОЖЬ)
	|			И (РейсЗаказы.Ссылка.Проведен = ИСТИНА)
	|ГДЕ
	|	НезагруженныеЗаказыВАвто.СтатусПогрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыПогрузкиЗаказовВАвто.ЗаказНеЗагружен)
	|	И НезагруженныеЗаказыВАвто.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И НезагруженныеЗаказыВАвтоСрезПоследних.СтатусПогрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыПогрузкиЗаказовВАвто.ЗаказНеЗагружен)
	|	И НезагруженныеЗаказыВАвто.Заказ.Номер = &НомерЗаказа";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Зап.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	
	Выб = Зап.Выполнить().Выбрать();
	Выб.Следующий();
	Если ЗначениеЗаполнено(Выб.ТранспортПогрузки) Тогда
		Сообщить("Заказ уже привязан к рейсу!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецеСли;
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РейсЗаказы.УдаленИзРейса КАК УдаленИзРейса
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|ГДЕ
	|	РейсЗаказы.Заказ = &Заказ
	|	И РейсЗаказы.Ссылка.Ссылка = &Рейс";
	Зап.УстановитьПараметр("Заказ", Выб.Заказ);
	Зап.УстановитьПараметр("Рейс", Выб.Рейс);
	
	
	ВыбПоРейсу = Зап.Выполнить().Выбрать();
	Если ВыбПоРейсу.Следующий() Тогда
		Если Не ВыбПоРейсу.УдаленИзРейса Тогда
			Сообщить("Заказ уже вернули в изначальный рейс!", СтатусСообщения.ОченьВажное);
			Возврат;
		КонецеСли;	
	Иначе
		Сообщить("Заказ уже отвязан от изначального рейса!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецеСли;	
	
	ТекВр = ТекущаяДата();
	
	//Асеев 18.03.2021 (Задача № 4491)>>>
	//НачатьТранзакцию();
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	//Асеев 18.03.2021 (Задача № 4491)<<<
	
	Наб = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекВр);
	Наб.Отбор.Заказ.Установить(Выб.Заказ);
	Наб.Отбор.Рейс.Установить(Выб.Рейс);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекВр;
	Нов.Заказ = Выб.Заказ;
	Нов.Рейс = Выб.Рейс;
	Нов.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ОтменаОтвязки;
	Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Наб.Записать();
	
	РейсОбъект = Выб.Рейс.ПолучитьОбъект();
	РейсОбъект.Записать(РежимЗаписиДокумента.Запись);
	РейсОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗафиксироватьТранзакцию();
	
	Сообщить("Произведена отмена отвязки!");
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьОтвязкуЗаказаВКорзине(Команда)
	Стр = Элементы.Корзина.ТекущиеДанные;
	
	Если Стр = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	ОтменитьОтвязкуЗаказаВКорзинеНаСервере(СокрЛП(Стр.Заказ));
КонецПроцедуры


#КонецОбласти

#Область РаботаСКорзинойМаршрутизации
&НаСервере
Процедура ОбновитьКорзинуМаршрутизации()
	КорзинаМаршрутизации.Параметры.УстановитьЗначениеПараметра("ДатаПланирования", НачалоДня(ДатаПланирования));
	КорзинаМаршрутизации.Параметры.УстановитьЗначениеПараметра("ТерминалДоставки", Регион);	
	Элементы.КорзинаМаршрутизации.Обновить();
Конецпроцедуры	

&НаСервере
Процедура ЗаписатьДанныеКорзиныМаршрутизации(МассивСтрок, Режим = Истина)
	ТекВр = ТекущаяДата();
	
	Для Каждого Тек Из МассивСтрок Цикл
		Наб = РегистрыСведений.КорзинаПолигональнойМаршрутизации.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ТерминалДоставки.Установить(Регион);
		Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
		Наб.Отбор.Заказ.Установить(Тек.Заказ);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекВр;
		Нов.ДатаПланирования = ДатаПланирования;
		Нов.ТерминалДоставки = Регион;
		Нов.Заказ = Тек.Заказ;
		Нов.ЗаказВКорзине = Режим;
		Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Наб.Записать();
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ПереместитьВыделенныеЗаказыИзДереваВКорзинуМаршрутизации(ИмяДерева)
	Если ИмяДерева = "ДеревоПолигоновСЗаказами" Тогда
		НомерДерева = 1;
	ИначеЕсли ИмяДерева = "ДеревоРейсовСЗаказами" Тогда	
		НомерДерева = 2;
	КонецеСли;
	
	Струк = Новый Структура;
	Струк.Вставить("НомерДерева", НомерДерева);
	
	НайСтроки = СписокТочекНаКартеТЗ.НайтиСтроки(Струк);
	
	ЗаписатьДанныеКорзиныМаршрутизации(НайСтроки, Истина);
	
	ОбновитьКорзинуМаршрутизации();
КонецПроцедуры	

&НаКлиенте
Процедура ПереместитьВыделенныеЗаказыИзДПВКорзину(Команда)
	// Вставить содержимое обработчика.
	ПереместитьВыделенныеЗаказыИзДереваВКорзинуМаршрутизации("ДеревоПолигоновСЗаказами");
	ОбновитьДанные(Ложь, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВыделенныеЗаказыИзДРВКорзину(Команда)
	// Вставить содержимое обработчика.
	ПереместитьВыделенныеЗаказыИзДереваВКорзинуМаршрутизации("ДеревоРейсовСЗаказами");
	ОбновитьДанные(Ложь, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УбратьВыделенныеЗаказыИзКорзины(Команда)
	// Вставить содержимое обработчика.
	Мас = Новый Массив;
	Для Каждого Тек Из Элементы.КорзинаМаршрутизации.ВыделенныеСтроки Цикл
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Элементы.КорзинаМаршрутизации.ДанныеСтроки(Тек).Заказ);
		Мас.Добавить(Струк);
	КонецЦикла;	
	
	ЗаписатьДанныеКорзиныМаршрутизации(Мас, Ложь);
	Элементы.КорзинаМаршрутизации.Обновить();
	ОбновитьДанные(Ложь, Истина, Истина);
КонецПроцедуры
#КонецОбласти



#Область РаботаСФормой
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	//СохранитьЗначение("ПериодАвтообновленияДанныхВПМ", Объект.ПериодАвтообновленияДанных);
	//СохранитьЗначенияНаСервере(Объект.ПериодАвтообновленияДанных);
	
	// Якурнов 05.09.2018 9:46:08
	Попытка //+Широков по письму 24.03.2021
		СохранениеНастроекПользователяГруппыПолигонов();
	Исключение
	КонецПопытки;  //+Широков по письму 24.03.2021
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьЗначенияНаСервере(ПериодАвтообновленияДанных)
	//СохранитьЗначение("ПериодАвтообновленияДанныхВПМ", ПериодАвтообновленияДанных);
КонецПроцедуры	

&НаСервере

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2";
	Объект.СкрыватьУжеПривязанныеПолигоныВФормеПривязкиПолигонов = Истина;
	Объект.УстановкаПолигоновСУчетомКатегорийТранспорта = Истина;
	ИнициализацияЭлементовФильтров();
	ОбновитьКорзину();
	Регион = ПараметрыСеанса.ТерминалДоставки;
	//Если Не РольДоступнаНаСервере() Тогда
	Элементы.Регион.Доступность = РольДоступнаНаСервере();
	//КонецеСли;	
	ОбновитьКорзинуМаршрутизации();
	//+Степанов Установим признак использования WebKit в зависимости от релиза платформы и подключим обработчик события.
	ИспользованиеWebKit = ОбщегоНазначения.ВерсияПлатформы().Релиз > 13;
	Если ИспользованиеWebKit Тогда
		Элементы.ПолеXTML.УстановитьДействие("ПриНажатии","Подключаемая_ПолеXTMLПриНажатии");
	КонецЕсли;	
	
	////Раскомментировать
	//Широков для отладки
	//Регион = Справочники.РегиональныеТерминалы.МоскваСтриж;
	
	//Асеев 01.11.2022 (Задача № 4919)>>>
	Объект.ПечатьБланков = Истина;
	Элементы.ФормаПечатьБланков.Пометка = Объект.ПечатьБланков;
	//Асеев 01.11.2022 (Задача № 4919)<<<
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеФормы()
	Если МаршрутизацияЗакрыта Тогда
		Элементы.ГруппаКарта.ЦветФона = WebЦвета.СеребристоСерый;
		Элементы.ГруппаДеревоПолигонов.ЦветФона = WebЦвета.СеребристоСерый;
		Элементы.ГруппаДеревоРейсов.ЦветФона = WebЦвета.СеребристоСерый;
		Элементы.ДеревоПолигоновСЗаказамиКонтекстноеМенюГруппаРейсов.Заголовок = "Положить заказ в рейс..";
		Элементы.ДеревоРейсовСЗаказамиКонтекстноеМенюГруппаРейсов.Заголовок = "Переложить заказ в рейс..";
		//Элементы.ГруппаКорзинаМаршрутизации.Доступность = Ложь;
		//CeHbKA
		Элементы.ДеревоПолигоновСЗаказамиКонтекстноеМенюГруппаРейсов_.Заголовок = "Положить заказ в рейс..";
	Иначе
		Элементы.ГруппаКарта.ЦветФона = WebЦвета.ЦианСветлый;
		//Новый Цвет;
		Элементы.ГруппаДеревоПолигонов.ЦветФона = Новый Цвет;
		Элементы.ГруппаДеревоРейсов.ЦветФона = Новый Цвет;
		Элементы.ДеревоПолигоновСЗаказамиКонтекстноеМенюГруппаРейсов.Заголовок = "Маршрутизировать индивидуально..";
		Элементы.ДеревоРейсовСЗаказамиКонтекстноеМенюГруппаРейсов.Заголовок = "Маршрутизировать индивидуально..";
		//Элементы.ГруппаКорзинаМаршрутизации.Доступность = Истина;
		//CeHbKA
		Элементы.ДеревоПолигоновСЗаказамиКонтекстноеМенюГруппаРейсов_.Заголовок = "Маршрутизировать индивидуально..";
	КонецеСли;
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры	

&НаСервере
Функция РольДоступнаНаСервере()
	Возврат РольДоступна("Админы") Или РольДоступна("СтаршийЛогист");
КонецФункции	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+ Широков  по письму
	МассивПолигоновСПометками = Новый Соответствие;
	МассивРейсовСПометками = Новый Соответствие;
	
	//Широков 22.03.2021 по письму
	МассивПолигоновВыделенныеСтроки = Новый Соответствие;
	МассивРейсовВыделенныеСтроки = Новый Соответствие;
	//Широков 22.03.2021 по письму
	
	//Для тестовой среды будет использован в макете вместо `ПараметрИдСхемы`, очень чувствительный параметр
	//Периодически карты обновляются
	//например для августа 42
	//для сентября 43,44,45,46
	ИдСхемы = "56";  	//Октябрь 2020
	//ИдСхемы = "76";  	//Октябрь 2020
	//ИдСхемы = "20";  	//Ноябрь 2020
	//-Широков по письму
	
	
	//УстановкаКаталогаИконок();
	
	//раскомментить
	////Если ТекущийРежимЗапуска() <> РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
	////	Если Не РольДоступнаНаСервере() Тогда
	////		Пар = "пароль";
	////		Если Не ВвестиСтроку(Пар, "Пароль", 10) Тогда
	////			Отказ = Истина;
	////			Возврат;
	////		ИначеЕсли Пар <> "6744" Тогда
	////			Отказ = Истина;
	////			Возврат;
	////		КонецеСли;	
	////	КонецеСли;
	////КонецеСли;
	
	//Раскомментировать
	//Широков для отладки 01.09.2020
	ДатаПланирования = ТекущаяДата();
	////ДатаПланирования = Дата("04.08.2020 00:00:00");
	//ДатаПланирования = Дата("22.12.2020 00:00:00");//тест
	//ДатаПланирования = Дата("12.07.2023 00:00:00");//тест
	////ДатаПланирования = Дата("21.12.2020 00:00:00");
	//+ Широков  по письму
	ФлагКарта = Истина;
	//- Широков  по письму
	
	
	//+Степанов Задача № 3863
	ДанныеЗаказовЗаборов = ПолучитьДанныеЗаказовЗаборов(ДатаПланирования);
	//-Степанов Задача № 3863
	
	СхемаЛогистическихБрейков = МаршрутизацияЗаказовСервер.ОпределитьАктуальнуюСхемуЛогистическихБрейков();
	ЗаборнаяКатегория = МаршрутизацияЗаказовСервер.ПолучитьЗаборнуюКатегориюЗаказа(СхемаЛогистическихБрейков);
	
	Если Не ЗначениеЗаполнено(ЗаборнаяКатегория) Тогда
		Сообщить("Не определена логистическая категория для заборов! Открытие формы будет запрещено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	ПолигональнаяСхемаКарты = ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(?(Регион.Пустая(), ПредопределенноеЗначение("Справочник.РегиональныеТерминалы.МоскваСтриж"), Регион));
	
	// Якурнов 22.10.2018 13:42:16 
	//Смена = ПредопределенноеЗначение("Справочник.Смены.Смена1");
	
	ОбновитьПолеКарты();
	
	//Объект.ПериодАвтообновленияДанных = ВосстановитьЗначение("ПериодАвтообновленияДанныхВПМ");
	Если Объект.ПериодАвтообновленияДанных = 0 Тогда
		Объект.ПериодАвтообновленияДанных = 120;
	КонецеСли;	
	
	//ПодключитьОбработчикОжидания("ОбновитьДанныеПМПоРегламенту", Объект.ПериодАвтообновленияДанных, Ложь);
	
	// Якурнов 05.09.2018 16:12:47
	ПервоначальноеЗаполнениеГруппыПолигонов();
	
	//CeHbKA 20.08.2019 #3377
	ИзменитьЗаголовокГруппыПолигонов();	
	
	// Якурнов 30.10.2018 11:59:34 
	Объект.АвтообновлениеКартыПриВыделенииЗаказов = Истина;
	Элементы.ФормаАвтообновлениеКартыПриВыделенииЗаказов.Пометка = Истина;
	
	//CeHbKA
	НомераЗаказовВид = 1;
	НомераЗаказовДерево = "ДеревоПолигоновСЗаказами";
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияСписковРеквизитовДереваПолигоновНаСервере()
	Если СписокДобавляемыхРеквизитов.Количество() <> 0 Тогда
		Мас = Новый Массив;
		Для Каждого Тек Из СписокДобавляемыхРеквизитов Цикл
			Мас.Добавить(Тек.Значение);
		КонецЦикла;	
		ИзменитьРеквизиты(,Мас);
		СписокДобавляемыхРеквизитов.Очистить();
		Для Каждого Тек Из СписокДобавляемыхЭлементов Цикл
			Элементы.Удалить(Элементы.Найти(Тек.Значение));
		КонецЦикла;
		СписокДобавляемыхЭлементов.Очистить();
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеПолигоновНаСервере() //ПараметрыДанных, ИдентификаторЗаданияОбновленияПолигонов
	ДеревоПолигоновСформировано = Ложь;
	
	
	
	АдресДереваПолигонов = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(МаршрутизацияЗакрыта);
	МассивПараметров.Добавить(ДатаПланирования);
	МассивПараметров.Добавить(ПолигональнаяСхемаКарты);
	МассивПараметров.Добавить(Регион);
	МассивПараметров.Добавить(ЗаборнаяКатегория);
	МассивПараметров.Добавить(СхемаЛогистическихБрейков);
	МассивПараметров.Добавить(СписокДобавляемыхРеквизитов);
	МассивПараметров.Добавить(СписокДобавляемыхЭлементов);
	//МассивПараметров.Добавить(ЭтаФорма);
	
	ТаблицаФильтров = РеквизитФормыВЗначение("ТабЭлементовФильтра", Тип("ТаблицаЗначений"));
	
	МассивСтруктурФильтра = lem.ТабЗначВМассив(ТаблицаФильтров);
	
	МассивПараметров.Добавить(МассивСтруктурФильтра);
	
	
	МассивПараметров.Добавить(АдресДереваПолигонов);
	
	// Якурнов 06.09.2018 10:43:56
	ПараметрОтбораПоГруппамПолигонов = ПолучитьМассивПолигоновИзГрупп();
	Если ПараметрОтбораПоГруппамПолигонов <> Неопределено Тогда
		МассивПараметров.Добавить(ПараметрОтбораПоГруппамПолигонов);
	Иначе	
		МассивПараметров.Добавить(Неопределено);
	КонецЕсли;
	
	// Якурнов 23.10.2018 14:57:41 Смену в Параметр
	Если ЗначениеЗаполнено(Смена) Тогда
		МассивПараметров.Добавить(Смена);
	Иначе
		МассивПараметров.Добавить(Неопределено);
	КонецЕсли;
	
	//CeHbKA #3663 20.11.2019
	//Режим отображения без заказов
	МассивПараметров.Добавить(Элементы.ФормаРежимВыводаДанных.Пометка);
	//CeHbKA #3663 20.11.2019
	
	Задание = ФоновыеЗадания.Выполнить("ПолигональнаяМаршрутизацияСервер.ОбновитьДанныеДереваПолигоновНаСервере", МассивПараметров);
	
	ИдентификаторЗаданияОбновленияПолигонов = Задание.УникальныйИдентификатор;
	
	//Широков
	//Для отладки негабаритных логистических брейков
	//ПолигональнаяМаршрутизацияСервер.ОбновитьДанныеДереваПолигоновНаСервере(МаршрутизацияЗакрыта, ДатаПланирования, ПолигональнаяСхемаКарты, Регион, ЗаборнаяКатегория, СхемаЛогистическихБрейков, СписокДобавляемыхРеквизитов, СписокДобавляемыхЭлементов, ТабЭлементовФильтра, АдресДереваПолигонов); 
	//ИдентификаторЗаданияОбновленияПолигонов = Неопределено;
	//Широков
КонецПроцедуры	

&НаСервере
Процедура ИнициализацияСписковРеквизитовДереваРейсовНаСервере()
	Если СписокДобавляемыхРеквизитовРейсы.Количество() <> 0 Тогда
		Мас = Новый Массив;
		Для Каждого Тек Из СписокДобавляемыхРеквизитовРейсы Цикл
			Мас.Добавить(Тек.Значение);
		КонецЦикла;	
		ИзменитьРеквизиты(,Мас);
		СписокДобавляемыхРеквизитовРейсы.Очистить();
		Для Каждого Тек Из СписокДобавляемыхЭлементовРейсы Цикл
			Элементы.Удалить(Элементы.Найти(Тек.Значение));
		КонецЦикла;
		СписокДобавляемыхЭлементовРейсы.Очистить();
	КонецЕсли;		
КонецПроцедуры	


&НаСервере
Процедура ОбновитьДанныеРейсовНаСервере()
	ДеревоРейсовСформировано = Ложь;
	//ФиксацияВыделенныхСтрокВДереве(ДеревоРейсовСЗаказами, "ДеревоРейсовСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
	
	
	
	АдресДереваРейсов = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(МаршрутизацияЗакрыта);
	МассивПараметров.Добавить(ДатаПланирования);
	МассивПараметров.Добавить(ПолигональнаяСхемаКарты);
	МассивПараметров.Добавить(Регион);
	МассивПараметров.Добавить(ЗаборнаяКатегория);
	МассивПараметров.Добавить(СхемаЛогистическихБрейков);
	МассивПараметров.Добавить(СписокДобавляемыхРеквизитовРейсы);
	МассивПараметров.Добавить(СписокДобавляемыхЭлементовРейсы);
	
	ТаблицаФильтров = РеквизитФормыВЗначение("ТабЭлементовФильтра", Тип("ТаблицаЗначений"));
	
	МассивСтруктурФильтра = lem.ТабЗначВМассив(ТаблицаФильтров);
	
	МассивПараметров.Добавить(МассивСтруктурФильтра);
	
	
	МассивПараметров.Добавить(АдресДереваРейсов);
	
	// Якурнов 06.09.2018 10:43:56
	ПараметрОтбораПоВодителямПривязанымКГруппамПолигонов = ПолучитьМассивВодителейИзГрупп();
	Если ПараметрОтбораПоВодителямПривязанымКГруппамПолигонов <> Неопределено Тогда
		МассивПараметров.Добавить(ПараметрОтбораПоВодителямПривязанымКГруппамПолигонов);
	Иначе
		МассивПараметров.Добавить(Неопределено);
	КонецЕсли;
	
	// Якурнов 23.10.2018 14:57:41 Смену в Параметр
	Если ЗначениеЗаполнено(Смена) Тогда
		МассивПараметров.Добавить(Смена);
	Иначе
		МассивПараметров.Добавить(Неопределено);
	КонецЕсли;
	
	//CeHbKA #3663 20.11.2019
	//Режим отображения без заказов
	МассивПараметров.Добавить(Элементы.ФормаРежимВыводаДанных.Пометка);
	//CeHbKA #3663 20.11.2019
	
	Задание = ФоновыеЗадания.Выполнить("ПолигональнаяМаршрутизацияСервер.ОбновитьДанныеДереваРейсовНаСервере", МассивПараметров);
	
	ИдентификаторЗаданияОбновленияРейсов = Задание.УникальныйИдентификатор;
	
	
	//ПолигональнаяМаршрутизацияСервер.ОбновитьДанныеДереваПолигоновНаСервере(МаршрутизацияЗакрыта, ДатаПланирования, ПолигональнаяСхемаКарты, Регион, ЗаборнаяКатегория, СхемаЛогистическихБрейков, СписокДобавляемыхРеквизитов, СписокДобавляемыхЭлементов, ЭтаФорма, ТабЭлементовФильтра);
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДанные(ОбновлятьКарту = Истина, ОбновлятьПолигоны = Истина, ОбновлятьРейсы = Истина)
	ДанныеЗаказовЗаборов = ПолучитьДанныеЗаказовЗаборов(ДатаПланирования);
	ПолигональнаяСхемаКарты = ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(?(Регион.Пустая(), ПредопределенноеЗначение("Справочник.РегиональныеТерминалы.МоскваСтриж"), Регион));
	ОбновитьДанныеНаСервере(ОбновлятьКарту, ОбновлятьПолигоны, ОбновлятьРейсы);
	
	Если ОбновлятьПолигоны Тогда
		
		
		Строки = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
		Строки.Очистить();
		
		УстановитьДоступностьЭлементовФормыОбновленияДанных(Ложь);
		Элементы.ГруппаСтраницаДлительнаяОперация.Видимость = Истина;
		Элементы.ГруппаСтраницаПолигонов.Видимость = Ложь;		
		ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоПолигонам", 1);
	КонецЕсли;	
	
	Если ОбновлятьРейсы Тогда
		
		
		Строки = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
		Строки.Очистить();
		
		
		УстановитьДоступностьЭлементовФормыОбновленияДанных(Ложь);
		
		Элементы.ГруппаСтраницаДлительнаяОперацияРейсы.Видимость = Истина;
		Элементы.ГруппаСтраницаРейсов.Видимость = Ложь;
		
		ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоРейсам", 1);
	КонецЕсли;
	
	
	Если ОбновлятьКарту Тогда
		ОчиститьКарту(Неопределено);
	КонецеСли;
	
	
	ОформлениеФормы();
	
	ВыводАвтоНаКарту();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(ОбновлятьКарту = Истина, ОбновлятьПолигоны = Истина, ОбновлятьРейсы = Истина)
	//ПрочитатьФормированиеРейсов(ДатаПланирования, Регион);
	//CeHbKA #3179 10.06.2019
	ПрочитатьФормированиеРейсов_Новая(ДатаПланирования, Регион);
	//CeHbKA #3179 10.06.2019
	
	
	Если ОбновлятьПолигоны Тогда
		ФиксацияВыделенныхСтрокВДереве(ДеревоПолигоновСЗаказами, "ДеревоПолигоновСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
		ОбновитьДанныеПолигоновНаСервере();
	КонецЕсли;	
	
	Если ОбновлятьРейсы Тогда
		ФиксацияВыделенныхСтрокВДереве(ДеревоРейсовСЗаказами, "ДеревоРейсовСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
		ОбновитьДанныеРейсовНаСервере();
	КонецЕсли;
	
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеФормыНаСервере()
	ОбновитьУсловноеОформление();	
	ОбновитьКорзину();
	ОбновитьКорзинуМаршрутизации();	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	УстановкаУсловногоОформленияСпискаРейсов();
	УстановкаУсловногоОформленияСпискаПолигонов();
	УстановкаУсловногоОформленияИтогов();
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	//закрываемые элементы при закрытой маршрутизации
	//+Широков 18.02.2021 - открываем закрытие рейсов по письму
	Элементы["ФормаЗафиксироватьДанныеМаршрутизации"].Доступность = Не МаршрутизацияЗакрыта;
		//+Широков 03.02.2021 по письму скайп - делаем закрытие рейса только в старом ПМ
     	//Элементы["ФормаЗафиксироватьДанныеМаршрутизации"].Доступность = Ложь;
	Элементы["ФормаЗафиксироватьДанныеМаршрутизации"].Видимость = Истина;
	//-Широков 03.02.2021 по письму скайп - делаем закрытие рейса только в старом ПМ
	//+Широков 18.02.2021 - открываем закрытие рейсов по письму
	
	//Элементы["ДеревоПолигоновСЗаказамиКонтекстноеМенюГруппаРейсов"].Доступность = Не МаршрутизацияЗакрыта;
	Элементы["СформироватьРейсы"].Доступность = Не МаршрутизацияЗакрыта;
	Элементы["ДеревоРейсовСЗаказамиОчиститьДанныеМаршрутизации"].Доступность = Не МаршрутизацияЗакрыта;
	
	//раскомментить
	Элементы["ДеревоРейсовСЗаказамиКонтекстноеМенюУстановитьПолигоныИКатегории"].Доступность = Не МаршрутизацияЗакрыта; 	//Широков 26.08.2020 для отладки
	//Элементы["ДеревоРейсовСЗаказамиКонтекстноеМенюУстановитьПолигоныИКатегории"].Доступность = Истина; 	//Широков 26.08.2020 для отладки
	
	
	Элементы["ДеревоРейсовСЗаказамиКонтекстноеМенюУбратьИндивидуальнуюМаршрутизацию"].Доступность = Не МаршрутизацияЗакрыта;
	//раскомментить
	//Элементы["ДеревоРейсовСЗаказамиКонтекстноеМенюУбратьИндивидуальнуюМаршрутизацию"].Доступность = Истина;
	
	//открываемые элементы при закрытой маршрутизации
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокКонтекстногоМенюРейсов()
	Для Каждого Тек Из СписокРейсовДляКонтекстногоМеню Цикл
		Элементы.Удалить(Элементы.Найти("ПунктМенюДереваПолигонов_" + Тек.Значение.НаимПунктаМеню));
		Команды.Удалить(Команды.Найти(Тек.Значение.ПунктКМенюПолигонов));
		
		Элементы.Удалить(Элементы.Найти("ПунктМенюДереваРейсов_" + Тек.Значение.НаимПунктаМеню));
		Команды.Удалить(Команды.Найти(Тек.Значение.ПунктКМенюРейсов));		
	КонецЦикла;	
	СписокРейсовДляКонтекстногоМеню.Очистить();
	
	Дерево = РеквизитФормыВЗначение("ДеревоРейсовСЗаказами", Тип("ДеревоЗначений"));
	
	Для Каждого Тек Из Дерево.Строки Цикл
		Если Не ЗначениеЗаполнено(Тек.Транспорт) Тогда
			Продолжить;
		КонецеСли;	
		НаимПункта = СокрЛП(Тек.ТранспортКод);
		
		НаимПунктаПользователя = СокрЛП(Тек.ТранспортНаименование);
		
		// Якурнов: Присваиваем Названию -1 или -2 в зависимости от смены
		// >>>>>>>> Начало 23.10.2018 13:56:10 >>>>>>>>
		Если Тек.СменаРейса <> Справочники.Смены.Смена2 Тогда
			ПриставкаСмена = " - 1";
			СтрМенюПолигоны = "ДеревоПолигоновСЗаказамиКонтекстноеМенюСмена1";
			СтрМенюРейсы    = "ДеревоРейсовСЗаказамиКонтекстноеМенюСмена1";
		Иначе
			ПриставкаСмена = " - 2";
			СтрМенюПолигоны = "ДеревоПолигоновСЗаказамиКонтекстноеМенюСмена2";
			СтрМенюРейсы    = "ДеревоРейсовСЗаказамиКонтекстноеМенюСмена2";
		КонецЕсли;
		
		НаимПунктаПользователя = НаимПунктаПользователя + ПриставкаСмена;
		// <<<<<<<< Конец 23.10.2018 13:56:10 <<<<<<<<
		
		
		Струк = Новый Структура;
		Струк.Вставить("НаимПунктаМеню", НаимПункта);
		
		//команда для полигонов
		ИмяКоманды = "ПунктКМенюПолигонов_" + НаимПункта;
		
		Если ЭтаФорма.Команды.Найти(ИмяКоманды) <> Неопределено Тогда 
			Продолжить;
		КонецеСли;	
		
		
		Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		Команда.Действие = "ВыборПунктаКонтекстногоМенюПолигонов_Рейсы";		
		Струк.Вставить("ПунктКМенюПолигонов", ИмяКоманды);
		
		//команда для рейсов
		ИмяКомандыР = "ПунктКМенюРейсов_" + НаимПункта;
		Команда = ЭтаФорма.Команды.Добавить(ИмяКомандыР);
		Команда.Действие = "ВыборПунктаКонтекстногоМенюРейсов_Рейсы";		
		Струк.Вставить("ПунктКМенюРейсов", ИмяКомандыР);
		
		
		СписокРейсовДляКонтекстногоМеню.Добавить(Струк, НаимПунктаПользователя);
		
		
		//элемент меню полигонов
		//ЭлементМеню = Элементы.Добавить("ПунктМенюДереваПолигонов_" + НаимПункта, Тип("КнопкаФормы"), Элементы["ДеревоПолигоновСЗаказамиКонтекстноеМенюТранспорт"]);
		ЭлементМеню = Элементы.Добавить("ПунктМенюДереваПолигонов_" + НаимПункта, Тип("КнопкаФормы"), Элементы[СтрМенюПолигоны]);
		ЭлементМеню.Заголовок = НаимПунктаПользователя;
		ЭлементМеню.ИмяКоманды = ИмяКоманды;
		
		//CeHbKA
		//ЭлементМеню = Элементы.Добавить("ПунктМенюДереваПолигонов_" + НаимПункта+"_", Тип("КнопкаФормы"), Элементы[СтрМенюПолигоны+"_"]);
		//ЭлементМеню.Заголовок = НаимПунктаПользователя;
		//ЭлементМеню.ИмяКоманды = ИмяКоманды;
		
		//элемент меню Рейсов
		//ЭлементМеню = Элементы.Добавить("ПунктМенюДереваРейсов_" + НаимПункта, Тип("КнопкаФормы"), Элементы["ДеревоРейсовСЗаказамиКонтекстноеМенюТранспорт"]);
		ЭлементМеню = Элементы.Добавить("ПунктМенюДереваРейсов_" + НаимПункта, Тип("КнопкаФормы"), Элементы[СтрМенюРейсы]);
		ЭлементМеню.Заголовок = НаимПунктаПользователя;
		ЭлементМеню.ИмяКоманды = ИмяКомандыР;
		
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормыОбновленияДанных(ДоступностьПараметр)
	ФлагДоступности = ДоступностьПараметр;
	
	Если ФлагДоступности Тогда
		Если Не ДеревоПолигоновСформировано Или Не ДеревоРейсовСформировано Тогда
			ФлагДоступности = Ложь;
		КонецеСли;	
	КонецеСли;	
	
	
	Элементы.ФормаОбновитьПолеКарты.Доступность = ФлагДоступности;
	Элементы.ДатаПланирования.Доступность = ФлагДоступности;
	Элементы.Регион.Доступность = РольДоступнаНаСервере();
	Элементы.Смена.Доступность = ФлагДоступности;
КонецПроцедуры	
#КонецОбласти


#Область СервисныеВозможности
&НаКлиенте
Процедура УстановитьПериодАвтообновления(Команда)
	ПериодАО = Объект.ПериодАвтообновленияДанных;
	Если ВвестиЗначение(ПериодАО, "Укажите период автообновления...", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Неотрицательный))) Тогда
		Объект.ПериодАвтообновленияДанных = ПериодАО;
		//СохранитьЗначение("ПериодАвтообновленияДанныхВПМ", ПериодАО);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПМПоРегламенту()
	//Если СписокТочекНаКарте.Количество() = 0 Тогда
	//	ОбновитьДанные();
	//	Сообщить("Автообновление " + ТекущаяДата());
	//КонецеСли;	
КонецПроцедуры	

#КонецОбласти

#Область ИнициализацияДанных

//БезКонтекста

&НаСервере
Процедура ПрочитатьФормированиеРейсов(ДатаРейсов, Регион)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ФормированиеРейсов.Ссылка КАК ФормированиеРейсов,
	|	ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования КАК ЗакрытДляРедактирования
	|ИЗ
	|	Документ.ФормированиеРейсов КАК ФормированиеРейсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
	|		ПО (ФормированиеРейсов.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ)
	|ГДЕ
	|	ФормированиеРейсов.ПометкаУдаления = ЛОЖЬ
	|	И ФормированиеРейсов.ДатаРейсов = &ДатаПланирования
	|	И ФормированиеРейсов.ТерминалДоставки = &ТерминалДоставки";
	
	Зап.УстановитьПараметр("ДатаПланирования", ДатаРейсов);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		ФормированиеРейсов = Выб.ФормированиеРейсов;
		МаршрутизацияЗакрыта = Выб.ЗакрытДляРедактирования;
	Иначе
		ФормированиеРейсов = "";
		МаршрутизацияЗакрыта = Ложь;		
	КонецЕсли;	
КонецПроцедуры	

//CeHbKA #3179 07.06.2019
&НаСервере  
Процедура СформироватьРейсыНаСервере_Новая(ДатаРейсов, Регион)
	
	//++Задача № 3459 запись начала события
	УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Справочники.СобытияКонтроляВремени.ПМФормированиеРейсов,"",Ложь,,,Регион);
	//--Задача № 3459
	
	//1 - получим список док.ФормированиеРейсов
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ФормированиеРейсов.Ссылка КАК Док,
	|	ФормированиеРейсов.ДатаРейсов КАК ДатаРейсов,
	|	ФормированиеРейсов.ТерминалДоставки КАК ТерминалДоставки,
	|	ВЫБОР
	|		КОГДА ФормированиеРейсов.СменаМаршрутизации = ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Смены.Смена1)
	|		ИНАЧЕ ФормированиеРейсов.СменаМаршрутизации
	|	КОНЕЦ КАК СменаМаршрутизации
	|ИЗ
	|	Документ.ФормированиеРейсов КАК ФормированиеРейсов
	|ГДЕ
	|	ФормированиеРейсов.ДатаРейсов = &ДатаРейсов
	|	И ФормированиеРейсов.МетодикаМаршрутизации = ЗНАЧЕНИЕ(перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	|	И ФормированиеРейсов.ПометкаУдаления = ЛОЖЬ
	|	И ФормированиеРейсов.ТерминалДоставки = &ТерминалДоставки
	|	И ВЫБОР
	|			КОГДА &СменаРейса <> ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка)
	|				ТОГДА ФормированиеРейсов.СменаМаршрутизации = &СменаРейса
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	Зап.УстановитьПараметр("СменаРейса", Смена);
	
	РезультатЗапроса = Зап.Выполнить();
	
	ВыбФормирования = РезультатЗапроса.Выбрать();
	
	Пока ВыбФормирования.Следующий() Цикл
		ДокументФормирования = ВыбФормирования.Док.ПолучитьОбъект();
		ДокументФормирования.Рейсы.Очистить();
		ДокументФормирования.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла; 
	
	ТаблицаФормированияРейсов = РезультатЗапроса.Выгрузить();
	ТаблицаФормированияРейсов.Колонки.Добавить("Рейсы",Новый ОписаниеТипов("Массив"));
	
	//2 - обработаем рейсы
	Зап = Новый Запрос;
	Зап.Текст =
	"ВЫБРАТЬ
	|	СформированныйГрафикПоТранспортуСрезПоследних.Транспорт КАК Транспорт,
	|	СформированныйГрафикПоТранспортуСрезПоследних.СформированныйРейс КАК СформированныйРейс,
	|	СформированныйГрафикПоТранспортуСрезПоследних.Водитель КАК Водитель,
	|	СформированныйГрафикПоТранспортуСрезПоследних.Экспедитор КАК Экспедитор,
	|	СформированныйГрафикПоТранспортуСрезПоследних.РольРейса КАК РольРейса,
	|	СформированныйГрафикПоТранспортуСрезПоследних.СменаРейса КАК СменаРейса
	|ИЗ
	|	РегистрСведений.СформированныйГрафикПоТранспорту.СрезПоследних(
	|			&ДатаСреза,
	|			ДатаРейса = &ДатаРейсов
	|				И Регион = &Регион) КАК СформированныйГрафикПоТранспортуСрезПоследних
	|ГДЕ
	|	СформированныйГрафикПоТранспортуСрезПоследних.ТранспортВыйдетВРейс
	|	И ВЫБОР
	|			КОГДА &СменаРейса <> ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка)
	|				ТОГДА СформированныйГрафикПоТранспортуСрезПоследних.СменаРейса = &СменаРейса
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Зап.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("Регион", Регион);
	Зап.УстановитьПараметр("СменаРейса", Смена);
	
	ВыборкаПоТранспортуДляРейсов = Зап.Выполнить().Выбрать();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
	Попытка
		
		ТаблицаРейсовКОтметкеОФормировании = Новый ТаблицаЗначений;
		ТаблицаРейсовКОтметкеОФормировании.Колонки.Добавить("Рейс", Новый ОписаниеТипов("ДокументСсылка.Рейс"));
		ТаблицаРейсовКОтметкеОФормировании.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.новаТранспорт"));
		
		Пока ВыборкаПоТранспортуДляРейсов.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаПоТранспортуДляРейсов.СформированныйРейс) Тогда
				Рейс = Документы.Рейс.СоздатьДокумент();
				Рейс.Дата = ТекущаяДата();
				Рейс.ДатаРейса = ДатаРейсов;
				Рейс.ТерминалДоставки = Регион;
				Рейс.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация;
				Рейс.РежимЗагрузкиДанных = 1;
				Если ЗначениеЗаполнено(ВыборкаПоТранспортуДляРейсов.РольРейса) Тогда
					Рейс.РольРейса = ВыборкаПоТранспортуДляРейсов.РольРейса;
				Иначе
					Рейс.РольРейса = Справочники.РолиТранспорта.РольДоставки;
				КонецеСли;
				
				// Якурнов 18.10.2018 16:51:16  
				Если ЗначениеЗаполнено(ВыборкаПоТранспортуДляРейсов.СменаРейса) Тогда
					Рейс.СменаРейса = ВыборкаПоТранспортуДляРейсов.СменаРейса;
				Иначе
					Рейс.СменаРейса = Справочники.Смены.Смена1;
				КонецеСли;
				
				
				Рейс.Записать(РежимЗаписиДокумента.Запись);
				
				Рейс.СоздатьРейсМестнойДоставки();
				
				Рейс.Записать(РежимЗаписиДокумента.Проведение);
				
				Нов = ТаблицаРейсовКОтметкеОФормировании.Добавить();
				Нов.Рейс = Рейс.Ссылка;
				Нов.Транспорт = ВыборкаПоТранспортуДляРейсов.Транспорт;
				
			Иначе	
				Рейс = ВыборкаПоТранспортуДляРейсов.СформированныйРейс.ПолучитьОбъект();
			КонецеСли;
			
			//Асеев 20.03.2023 (Задача № 5015)>>>
			Если РегистрыСведений.РаботникиОрганизации.ПроверитьОсновныеНачисленияЭкипажа(ВыборкаПоТранспортуДляРейсов.Водитель, ВыборкаПоТранспортуДляРейсов.Экспедитор) Тогда
				ДанныеЭкипажа = Новый Структура;
				ДанныеЭкипажа.Вставить("Транспорт", ВыборкаПоТранспортуДляРейсов.Транспорт);
				ДанныеЭкипажа.Вставить("Водитель", ВыборкаПоТранспортуДляРейсов.Водитель);
				ДанныеЭкипажа.Вставить("Экспедитор", ВыборкаПоТранспортуДляРейсов.Экспедитор);
				
				Рейс.УстановитьЭкипаж(ДанныеЭкипажа, ТекущаяДата());
			Иначе
				Сообщить("Привязка экипажа не выполнена для " + Рейс);
				Сообщить("Транспорт " + ВыборкаПоТранспортуДляРейсов.Транспорт);
				Сообщить("Водитель " + ВыборкаПоТранспортуДляРейсов.Водитель + ?(ВыборкаПоТранспортуДляРейсов.Экспедитор = Справочники.новаЭкспедиторы.ПустаяСсылка(), ", без экспедитора", ", экспедитор " + ВыборкаПоТранспортуДляРейсов.Экспедитор));
			КонецЕсли;
			//Асеев 20.03.2023 (Задача № 5015)<<<
			
			//Асеев 01.09.2022 (по письму Несданные документы 31.08.2022)>>>
			ПараметрыТранспорта = МаршрутизацияЗаказовСервер.ПрочитатьДополнительныеПараметрыТранспорта(ВыборкаПоТранспортуДляРейсов.Транспорт);
			Рейс.УдаленноеЗакрытиеРейса = ?(ПараметрыТранспорта = Неопределено, Ложь, ПараметрыТранспорта.УдаленноеЗакрытие);
			//Асеев 01.09.2022 (по письму Несданные документы 31.08.2022)<<<
			
			Рейс.УстановитьПоездкуРейса(Дата(Год(ДатаПланирования), Месяц(ДатаПланирования), День(ДатаПланирования), 9,0,0), Дата(Год(ДатаПланирования), Месяц(ДатаПланирования), День(ДатаПланирования), 20,0,0));
			
			СтрокаТаблицыФормированияРейсов = ПолучитьДокументФормированиеРейсов(ТаблицаФормированияРейсов, ДатаРейсов, Регион, Рейс.СменаРейса);
			
			СтрокаТаблицыФормированияРейсов.Рейсы.Добавить(Рейс.Ссылка);
			
			// Якурнов 31.07.2018 12:11:40 Контролируем ПМФормированиеРейсов
			Событие = Справочники.СобытияКонтроляВремени.ПМФормированиеРейсов;
			УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие,Рейс.Ссылка,Истина);
			
			
			Сообщить("Сформирован рейс по " + ВыборкаПоТранспортуДляРейсов.Транспорт);
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТаблицаФормированияРейсов Цикл
			ДокФормирования = ТекСтрока.Док.ПолучитьОбъект();
			//ДокФормирования.Рейсы.ЗагрузитьКолонку(ТекСтрока.Рейсы, "Рейс");	
			Для каждого ДокРейс Из ТекСтрока.Рейсы Цикл
				НС = ДокФормирования.Рейсы.Добавить();
				НС.Рейс = ДокРейс;
			КонецЦикла; 
			ДокФормирования.Записать(РежимЗаписиДокумента.Запись);	
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	МаршрутизацияЗаказовСервер.УстановитьСформированныеРейсыВГрафикеРейсов(ТаблицаРейсовКОтметкеОФормировании, ДатаРейсов, Регион, ТекущаяДата());	
	
	//МассивЗагрузок = Новый Массив;
	//МассивЗагрузок.Добавить(ДокументФормирования.Ссылка);
	
	// Якурнов 22.08.2018 17:57:42
	//МаршрутизацияЗаказовСервер.СформироватьНомераПалетт(МассивЗагрузок, ВариантФормированияНомеровПалет, ДатаПланирования);
	
	ПрочитатьФормированиеРейсов_Новая(ДатаРейсов, Регион);
	
	//++Задача № 3459 запись окончания события
	УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Справочники.СобытияКонтроляВремени.ПМФормированиеРейсов,"",Истина,,,Регион);
	//--Задача № 3459 запись окончания события
	
	Сообщить("Формирование рейсов завершено!");
КонецПроцедуры

Процедура ПрочитатьФормированиеРейсов_Новая(ДатаРейсов, Регион)
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ФормированиеРейсов.Ссылка КАК ФормированиеРейсов,
	|	ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования КАК ЗакрытДляРедактирования,
	|	ФормированиеРейсов.СменаМаршрутизации КАК СменаМаршрутизации
	|ИЗ
	|	Документ.ФормированиеРейсов КАК ФормированиеРейсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
	|		ПО ФормированиеРейсов.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
	|ГДЕ
	|	ФормированиеРейсов.ПометкаУдаления = ЛОЖЬ
	|	И ФормированиеРейсов.ДатаРейсов = &ДатаПланирования
	|	И ФормированиеРейсов.ТерминалДоставки = &ТерминалДоставки
	|	И ВЫБОР
	|			КОГДА &СменаРейса <> ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка)
	|				ТОГДА ФормированиеРейсов.СменаМаршрутизации = &СменаРейса
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Зап.УстановитьПараметр("ДатаПланирования", ДатаРейсов);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	Зап.УстановитьПараметр("СменаРейса", Смена);
	
	Выб = Зап.Выполнить().Выбрать();
	
	СписокФормированияРейсов.Очистить();
	
	Пока Выб.Следующий() Цикл
		НС = СписокФормированияРейсов.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выб);
		
		//согласно комменту https://lkstrizh.bitrix24.ru/workgroups/group/10/tasks/task/view/3179/?MID=26133&IFRAME=Y&IFRAME_TYPE=SIDE_SLIDER#com26133
		Если СписокФормированияРейсов.Количество() = 1 Тогда
			МаршрутизацияЗакрыта = Выб.ЗакрытДляРедактирования;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если СписокФормированияРейсов.Количество() = 0 Тогда
		МаршрутизацияЗакрыта = Ложь;		
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьДокументФормированиеРейсов(ТаблицаФормированияРейсов, ДатаРейсов, ТерминалДоставки, СменаМаршрутизации)
	
	ПараметрыОтбора = Новый Структура("ДатаРейсов", ДатаРейсов);
	ПараметрыОтбора.Вставить("ТерминалДоставки", ТерминалДоставки);
	ПараметрыОтбора.Вставить("СменаМаршрутизации", СменаМаршрутизации);
	
	МассивСтрок = ТаблицаФормированияРейсов.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() = 0 Тогда
		ВариантФормированияНомеровПалет = МаршрутизацияЗаказовСервер.ОпределитьАктуальныйРежимНазначенияНомеровПалет(ТерминалДоставки);
		
		ДокументФормирования = Документы.ФормированиеРейсов.СоздатьДокумент();
		ДокументФормирования.Дата = ТекущаяДата();
		ДокументФормирования.ДатаРейсов = ДатаРейсов;
		ДокументФормирования.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация;
		ДокументФормирования.РежимЗагрузкиДанных = 1;
		ДокументФормирования.РежимНазначенияНомеровПалет = ?(СменаМаршрутизации = Справочники.Смены.Смена2, Перечисления.РежимыНазначенияНомеровПалет.ПоПрефиксуСмены, ВариантФормированияНомеровПалет);
		ДокументФормирования.ФормироватьНомераПалетт = Истина;
		ДокументФормирования.ТерминалДоставки = ТерминалДоставки;
		// Якурнов 22.08.2018 9:57:04
		ДокументФормирования.СхемаНазначенияНомеровПалетПоПолигонам = МаршрутизацияЗаказовСервер.ПолучитьСхемуНазначенияНомеровПалетПоПолигонам(ТерминалДоставки);
		ДокументФормирования.СменаМаршрутизации = СменаМаршрутизации;
		ДокументФормирования.Записать(РежимЗаписиДокумента.Запись);
		
		НС = ТаблицаФормированияРейсов.Добавить();
		НС.Док = ДокументФормирования.Ссылка;
		НС.ДатаРейсов = ДатаРейсов;
		НС.ТерминалДоставки = ТерминалДоставки;
		НС.СменаМаршрутизации = СменаМаршрутизации;
		НС.Рейсы = Новый Массив;
		
		Возврат НС;	
	Иначе
		Для каждого ТекСтрока Из МассивСтрок Цикл
			Возврат ТекСтрока;
		КонецЦикла; 
	КонецЕсли; 
	
КонецФункции // ()

//CeHbKA #3179 07.06.2019


&НаСервере
Функция ПолучитьМакетИконокНаСервере()
	Возврат ПолучитьОбщийМакет("ИконкиПМ");
КонецФункции	


&наКлиенте
Процедура УстановкаКаталогаИконок()
	
	Ф = Новый Файл("C:\icons_");
	
	Если Не Ф.Существует() Тогда
		МакетАрхив = ПолучитьМакетИконокНаСервере();
		
		Путь = КаталогВременныхФайлов() + "icons.zip";
		
		МакетАрхив.Записать(Путь);	
		
		ЧтениеZip = Новый ЧтениеZipФайла(Путь);
		ЧтениеZip.ИзвлечьВсе("C:", РежимВосстановленияПутейФайловZIP.Восстанавливать);
	КонецеСли;	
КонецПроцедуры	
#КонецОбласти

#Область КомандыВРежимеЗафиксированнойМаршрутизации
&НаСервереБезКонтекста
Процедура ПоложитьЗаказыВРейсИзДереваПолигонов(МассивЗначений, КодТранспорта, ДатаПланирования)
	РейсПриемник = "";
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Транспорт
	|ПОМЕСТИТЬ ВТ_Транспорт
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|ГДЕ
	|	новаТранспорт.Код = &КодТранспорта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	|		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт.Ссылка = ВТ_Транспорт.Транспорт.Ссылка";
	Зап.УстановитьПараметр("КодТранспорта", КодТранспорта);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		РейсПриемник = Выб.Рейс;
	Иначе
		Возврат;
	КонецеСли;
	
	Рейс = РейсПриемник.ПолучитьОбъект();
	//CeHbKA
	//+Широков по письму 14.10.2020
	Рейс.ДополнительныеСвойства.Вставить("ОбходПроверок");
	Для Каждого Тек Из МассивЗначений Цикл
	//+Широков по письму 14.10.2020
		//Рейс.ДобавитьЗаказВРейс(Тек.Заказ);
		//Широков 20.10.2020
		//Рейс.ДобавитьЗаказВРейс(НайтиДокументПоНомеру(Тек));
		ДокументПоиска = НайтиДокументПоНомеру(Тек);
		Если НЕ ДокументПоиска = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
			Рейс.ДобавитьЗаказВРейс(ДокументПоиска);
		КонецЕсли;
		//Широков 20.10.2020
		
		
		//-Широков по письму 14.10.2020
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоложитьЗаказыВРейсИзДереваРейсов(МассивЗначений, КодТранспорта, ДатаПланирования, Регион)
	РейсПриемник = "";
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Транспорт
	|ПОМЕСТИТЬ ВТ_Транспорт
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|ГДЕ
	|	новаТранспорт.Код = &КодТранспорта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	|		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт.Ссылка = ВТ_Транспорт.Транспорт.Ссылка";
	Зап.УстановитьПараметр("КодТранспорта", КодТранспорта);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		РейсПриемник = Выб.Рейс.ПолучитьОбъект();
	Иначе
		Возврат;
	КонецеСли;
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РейсЗаказы.Ссылка КАК Рейс,
	|	РейсЗаказы.Заказ КАК Заказ
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|ГДЕ
	|	РейсЗаказы.Ссылка.Проведен = ИСТИНА
	|	И РейсЗаказы.Ссылка.ДатаРейса = &ДатаРейса
	|	И РейсЗаказы.Ссылка.ТерминалДоставки = &ТерминалДоставки
	//+Широков по письму 14.10.2020
//	|	И РейсЗаказы.Заказ В(&МассивЗаказов)
	|	И РейсЗаказы.Заказ.Номер В(&МассивЗаказов)
	//-Широков по письму 14.10.2020
	|	И РейсЗаказы.Ссылка.МетодикаМаршрутизации = ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)";
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	//+Широков по письму 14.10.2020
//	Зап.УстановитьПараметр("МассивЗаказов", МасЗаказов);
	Зап.УстановитьПараметр("МассивЗаказов", МассивЗначений);
	//-Широков по письму 14.10.2020
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если РейсПриемник.Ссылка = Выб.Рейс Тогда
			Продолжить;
		КонецеСли;	
		РейсИсточник = Выб.Рейс.ПолучитьОбъект();
		//+Широков по письму 14.10.2020
		РейсИсточник.ДополнительныеСвойства.Вставить("ОбходПроверок");
		РейсИсточник.УдалитьЗаказИзРейса(Выб.Заказ);
	КонецЦикла;
	
	//+Широков по письму 14.10.2020
	РейсПриемник.ДополнительныеСвойства.Вставить("ОбходПроверок");
	Для Каждого Тек Из МассивЗначений Цикл
		//+Широков по письму 14.10.2020
		//		РейсПриемник.ДобавитьЗаказВРейс(Тек.Заказ);
		//Широков 20.10.2020
		ДокументПоиска = НайтиДокументПоНомеру(Тек);
		Если НЕ ДокументПоиска = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
			//Широков 20.10.2020
			//		РейсПриемник.ДобавитьЗаказВРейс(НайтиДокументПоНомеру(Тек));
			//Широков 20.10.2020
			РейсПриемник.ДобавитьЗаказВРейс(ДокументПоиска);
		КонецЕсли;
		//Широков 20.10.2020
		
	//-Широков по письму 14.10.2020
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

//+Широков по письму 14.10.2020
&НаСервереБезКонтекста
Функция НайтиДокументПоНомеру(нНомер)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Номер = &МасСсылок
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ЗаборТовара.Ссылка
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.Номер = &МасСсылок";
	Зап.УстановитьПараметр("МасСсылок", нНомер);
	
	Выборка = Зап.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
//		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//-Широков по письму 14.10.2020

&НаКлиенте
Процедура ОткрытьНастройкуФильтров(Команда)
	ОткрытьФорму("Справочник.ФильтрыОтбораДанныхПМ.ФормаСписка");
КонецПроцедуры

#КонецОбласти


#Область РаботаСДеревьямиВФоновомЗадании
&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗаданияПоПолигонам() Экспорт
	
	//+Степанов Ждём пока прорисуется карта и переменная mapIsLoad установится в ИСТИНА 
	КартаОтрисована = Ложь;
	Результат = ПроверкаВыполненияФоновогоЗаданияПоПолигонамНаСервере(ИдентификаторЗаданияОбновленияПолигонов);
	Если Элементы.ПолеXTML.Документ.DefaultView.mapIsLoad <> Неопределено И Элементы.ПолеXTML.Документ.DefaultView.mapIsLoad Тогда
		КартаОтрисована = Истина;	
	КонецЕсли;	
	Если Результат И КартаОтрисована Тогда
		РазмещениеДанныхДереваПолигонов();
		//Широков
		РассчитатьИтоговоеКоличествоЗаказов();
		//Широков
		Элементы.ГруппаСтраницаПолигонов.Видимость = Истина;
		Элементы.ГруппаСтраницаДлительнаяОперация.Видимость = Ложь;		
		ДеревоПолигоновСформировано = Истина;
		ВосстановитьВыделениеСтрокВДеревьях(1);
		ВыделениеПолигоновНаКарте();
		УстановитьДоступностьЭлементовФормыОбновленияДанных(Истина);
		ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоПолигонам");
		СвернутьДерево(Элементы.ДеревоПолигоновСЗаказами, ДеревоПолигоновСЗаказами);
		Элементы.ДеревоПолигоновСЗаказами.текущаяСтрока = 0;		
	КонецеСли;	
КонецПроцедуры	

&НаСервере
Процедура РазмещениеДанныхДереваПолигонов()
	ДЗ = ПолучитьИзВременногоХранилища(АдресДереваПолигонов);
	РазместитьРеквизитыДереваПолигоновНаСервере(ДЗ);	
	
	//CeHbKA #3419 	29.08.2019
	ЗаполнитьТаблицуПолигоновИКоординат(ДЗ.Строки.ВыгрузитьКолонку("ПолигонМаршрутизации"));
	//CeHbKA #3419 	29.08.2019
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПроверкаВыполненияФоновогоЗаданияПоПолигонамНаСервере(ИдентификаторЗаданияОбновленияПолигонов) Экспорт
	ЗаданиеВыполненоУспешно = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияОбновленияПолигонов);
	//Если ЗаданиеВыполненоУспешно Тогда
	//ДЗ = ПолучитьИзВременногоХранилища(АдресДереваПолигонов);
	//РазместитьРеквизитыДереваПолигоновНаСервере(ДЗ);
	//КонецеСли;
	Возврат ЗаданиеВыполненоУспешно;
КонецФункции	



&НаСервере
Процедура РазмещениеДанныхДереваРейсов()
	ДЗ = ПолучитьИзВременногоХранилища(АдресДереваРейсов);
	РазместитьРеквизитыДереваРейсовНаСервере(ДЗ);	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗаданияПоРейсам() Экспорт
	Результат = ПроверкаВыполненияФоновогоЗаданияПоРейсамНаСервере(ИдентификаторЗаданияОбновленияРейсов);
	//+Степанов
	КартаОтрисована = Ложь;
	Если Элементы.ПолеXTML.Документ.DefaultView.mapIsLoad <> Неопределено И Элементы.ПолеXTML.Документ.DefaultView.mapIsLoad Тогда
		КартаОтрисована = Истина;	
	КонецЕсли;
	//-Степанов
	Если Результат И КартаОтрисована Тогда
	//Если Результат Тогда//тест
		РазмещениеДанныхДереваРейсов();
		Элементы.ГруппаСтраницаРейсов.Видимость = Истина;
		Элементы.ГруппаСтраницаДлительнаяОперацияРейсы.Видимость = Ложь;		
		ДеревоРейсовСформировано = Истина;
		
		ВосстановитьВыделениеСтрокВДеревьях(2);
		
		УстановитьДоступностьЭлементовФормыОбновленияДанных(Истина);
		ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоРейсам");
		ПодсчитатьИтогиПоКоличествуРейсов();
		СвернутьДерево(Элементы.ДеревоРейсовСЗаказами, ДеревоРейсовСЗаказами);
		Элементы.ДеревоРейсовСЗаказами.текущаяСтрока = 0;
		Если ИспользованиеWebKit И ПолеXTMLБылоСформировано Тогда 
			СтрокаРейсов = MapsFrom1C_GetVenicleMenuItems();
			ВыполняемаяКоманда = "select.getMenu().SetVenicleItems(""" + СтрокаРейсов + """)";
			ВыполнитьСкрипт(ВыполняемаяКоманда);
		КонецЕсли;
	КонецеСли;	
	
	
	
	//Если Результат Тогда
	//	РазмещениеДанныхДереваРейсов();
	//	Элементы.ГруппаСтраницаРейсов.Видимость = Истина;
	//	Элементы.ГруппаСтраницаДлительнаяОперацияРейсы.Видимость = Ложь;		
	//	ДеревоРейсовСформировано = Истина;
	//	ВосстановитьВыделениеСтрокВДеревьях(2);
	//	УстановитьДоступностьЭлементовФормыОбновленияДанных(Истина);
	//	ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоРейсам");
	//	ПодсчитатьИтогиПоКоличествуРейсов();
	//	СвернутьДерево(Элементы.ДеревоРейсовСЗаказами, ДеревоРейсовСЗаказами);
	//	Элементы.ДеревоРейсовСЗаказами.текущаяСтрока = 0;
	//	//+Степанов
	//	Если ИспользованиеWebKit И ПолеXTMLБылоСформировано Тогда 
	//		СтрокаРейсов = MapsFrom1C_GetVenicleMenuItems();
	//		ВыполняемаяКоманда = "select.getMenu().SetVenicleItems(""" + СтрокаРейсов + """)";
	//		ВыполнитьСкрипт(ВыполняемаяКоманда);
	//	КонецЕсли;
	//	//-Степанов
	//КонецеСли;	
	
КонецПроцедуры	


&НаКлиенте
Процедура СвернутьДерево(ЭлементДерево, Дерево)
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	
	Для Каждого Тек Из ЭлементыДерева Цикл
		ЭлементДерево.Свернуть(Тек.ПолучитьИдентификатор());
	КонецЦикла;	
КонецПроцедуры	


&НаСервереБезКонтекста
Функция ПроверкаВыполненияФоновогоЗаданияПоРейсамНаСервере(ИдентификаторЗаданияОбновленияРейсов) Экспорт
	ЗаданиеВыполненоУспешно = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияОбновленияРейсов);
	
	
	//Если ЗаданиеВыполненоУспешно Тогда
	//ДЗ = ПолучитьИзВременногоХранилища(АдресДереваРейсов);
	//РазместитьРеквизитыДереваРейсовНаСервере(ДЗ);
	
	//Элементы.ГруппаСтраницаРейсов.Видимость = Истина;
	//Элементы.ГруппаСтраницаДлительнаяОперацияРейсы.Видимость = Ложь;
	
	
	//КонецеСли;
	
	Возврат ЗаданиеВыполненоУспешно;
КонецФункции	

&НаСервере
Процедура РазместитьРеквизитыДереваПолигоновНаСервере(ДеревоПолигонов)
	ИнициализацияСписковРеквизитовДереваПолигоновНаСервере();
	
	//CeHbKA
	СписокКолонокДереваПолигонов.Очистить();
	//CeHbKA
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого Колонка Из ДеревоПолигонов.Колонки Цикл
		Если Колонка.Имя = "Отметка" Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0)), "ДеревоПолигоновСЗаказами"));
		ИначеЕсли Колонка.Имя = "УИД" Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)), "ДеревоПолигоновСЗаказами"));
		Иначе
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоПолигоновСЗаказами"));
		КонецеСли;
		
		Рекв = МассивДобавляемыхРеквизитов[МассивДобавляемыхРеквизитов.количество() - 1];
		СписокДобавляемыхРеквизитов.Добавить(Рекв.Путь + "." + Рекв.Имя);
		
		//CeHbKA
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) И (Колонка.Имя <> "Отметка") Тогда
			СписокКолонокДереваПолигонов.Добавить(Колонка.Имя);
		КонецЕсли;
		//CeHbKA
		
	КонецЦикла;
	
	
	
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗначениеВРеквизитФормы(ДеревоПолигонов, "ДеревоПолигоновСЗаказами");
	
	ТаблицаКолонок = МаршрутизацияЗаказовСервер.ПолучитьПараметрыКолонокКатегорийЗаказовДляМаршрутизатора(СхемаЛогистическихБрейков);	
	
	
	Для Каждого Колонка Из ДеревоПолигонов.Колонки Цикл
		РодительКолонки = "ДеревоПолигоновСЗаказами";
		ЗаголовокКолонки = "";
		
		Если Колонка.Имя = "НомерЗаказа" Или Колонка.Имя = "ПолигонМаршрутизации" Тогда
			РодительКолонки = "ДеревоПолигоновСЗаказами_ГруппаПолигонЗаказ";
		Иначе
			НайПараметрКолонки = ТаблицаКолонок.Найти(СтрЗаменить(Колонка.Имя, "_", ""));
			
			Если НайПараметрКолонки <> Неопределено Тогда
				РодительКолонки = "ДеревоПолигоновСЗаказами" + НайПараметрКолонки.Маршрутизатор_ГруппаКолонок;
			КонецеСли;	
		КонецЕсли;
		
		
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы[РодительКолонки]);
		СписокДобавляемыхЭлементов.Добавить(НовыйЭлемент.Имя);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		
		
		НовыйЭлемент.ПутьКДанным = "ДеревоПолигоновСЗаказами." + Колонка.Имя;
		
		НовыйЭлемент.ТолькоПросмотр = Истина;	
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		ОформлениеКолонки(НовыйЭлемент, Колонка.Имя);
	КонецЦикла;	
	
	
	ЗаполнитьИдентификаторыВДереве("ДеревоПолигоновСЗаказами");
	//УстановкаУсловногоОформленияСпискаПолигонов();
	//РассчитатьИтоговоеКоличествоЗаказов(); //Широков
КонецПроцедуры	

&НаСервере
Процедура РазместитьРеквизитыДереваРейсовНаСервере(ДеревоРейсов)
	ИнициализацияСписковРеквизитовДереваРейсовНаСервере();
	
	//CeHbKA
	СписокКолонокДереваРейсов.Очистить();
	//CeHbKA
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого Колонка Из ДеревоРейсов.Колонки Цикл
		Если Колонка.Имя = "Отметка" Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1, 0)), "ДеревоРейсовСЗаказами"));
		ИначеЕсли Колонка.Имя = "УИД" Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)), "ДеревоРейсовСЗаказами"));			
		Иначе
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоРейсовСЗаказами"));
		КонецеСли;
		
		Рекв = МассивДобавляемыхРеквизитов[МассивДобавляемыхРеквизитов.количество() - 1];
		СписокДобавляемыхРеквизитовРейсы.Добавить(Рекв.Путь + "." + Рекв.Имя);
		
		//CeHbKA
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) И (Колонка.Имя <> "Отметка") Тогда
			СписокКолонокДереваРейсов.Добавить(Колонка.Имя);
		КонецЕсли;
		//CeHbKA
		
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗначениеВРеквизитФормы(ДеревоРейсов, "ДеревоРейсовСЗаказами");
	
	ТаблицаКолонок = МаршрутизацияЗаказовСервер.ПолучитьПараметрыКолонокКатегорийЗаказовДляМаршрутизатора(СхемаЛогистическихБрейков);		
	
	Для Каждого Колонка Из ДеревоРейсов.Колонки Цикл
		РодительКолонки = "ДеревоРейсовСЗаказами";
		ЗаголовокКолонки = "";
		
		Если Колонка.Имя = "Транспорт" Или Колонка.Имя = "НомерЗаказа" Тогда
			РодительКолонки = "ДеревоРейсовСЗаказами_ГруппаПолигонЗаказ";
		ИначеЕсли Колонка.Имя = "Водитель" Тогда
			РодительКолонки = "ДеревоРейсовСЗаказами_ГруппаЭкипаж";
		//Асеев 17.06.2022 (по письму ПМ)>>>
		ИначеЕсли Колонка.Имя = "ВесЗаказа" Или Колонка.Имя = "ОбъёмЗаказа" Тогда
			РодительКолонки = "ДеревоРейсовСЗаказами_ГруппаГабаритыЗаказа";
		//Асеев 17.06.2022 (по письму ПМ)<<<
		ИначеЕсли Колонка.Имя = "Итого" Или Колонка.Имя = "ИтогоПредварительно" Тогда
			РодительКолонки = "ДеревоРейсовСЗаказами_ГруппаИтоги";
		Иначе
			НайПараметрКолонки = ТаблицаКолонок.Найти(СтрЗаменить(Колонка.Имя, "_", ""));
			
			Если НайПараметрКолонки <> Неопределено Тогда
				РодительКолонки = "ДеревоРейсовСЗаказами" + НайПараметрКолонки.Маршрутизатор_ГруппаКолонок;
			КонецеСли;	
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя + "_Рейс", Тип("ПолеФормы"), Элементы[РодительКолонки]);
		СписокДобавляемыхЭлементовРейсы.Добавить(НовыйЭлемент.Имя);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		
		
		НовыйЭлемент.ПутьКДанным = "ДеревоРейсовСЗаказами." + Колонка.Имя;
		
		НовыйЭлемент.ТолькоПросмотр = Истина;	
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		ОформлениеКолонкиРейс(НовыйЭлемент, Колонка.Имя);
	КонецЦикла;	
	ЗаполнитьИдентификаторыВДереве("ДеревоРейсовСЗаказами");
	//УстановкаУсловногоОформленияСпискаРейсов();
	ЗаполнитьСписокКонтекстногоМенюРейсов();
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ОчиститьДанныеЗафиксированнойМаршрутизации(Период, Терминал)
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	Рейс.Ссылка КАК Рейс
	|ИЗ
	|	Документ.Рейс КАК Рейс
	|ГДЕ
	|	Рейс.Проведен = ИСТИНА
	|	И Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
	|	И Рейс.МетодикаМаршрутизации = ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	|	И Рейс.ТерминалДоставки = &ТерминалДоставки";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Период));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Период));
	Зап.УстановитьПараметр("ТерминалДоставки", Терминал);
	
	
	Выб = Зап.Выполнить().Выбрать();
	
	Попытка
		Пока Выб.Следующий() Цикл
			Д = Выб.Рейс.ПолучитьОбъект();
			Если Д.Проведен Тогда
				Д.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецеСли;
			
			Д.ПометкаУдаления = Истина;
			
			Д.Заказы.Очистить();
			
			Д.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;	
	Исключение	
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	
	Сообщить("Очистка выполнена!");	
	Возврат Истина;
КонецФункции


&НаСервере
Функция ОтчетПоМаршрутизацииСервер(Период, Терминал)
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ТекОбъект.ПолучитьМакет("ОтчетПоМаршрутизации");
	//СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных_4");
	
	//создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	//Терминал = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТерминалДоставки"));
	//Терминал.Значение = Терминал;
	//Терминал.Использование = Истина;
	
	
	//установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
	ПериодОтчета = Новый СтандартныйПериод(НачалоДня(Период), КонецДня(Период));
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСтр",         ПериодОтчета);
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНач", НачалоДня(Период));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКон", КонецДня(Период));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	//Если Рейс <> Неопределено Тогда
	//	МакетКомпоновки.ЗначенияПараметров.НачДата.Значение = НачалоДня(Рейс.ДатаНачала);
	//	МакетКомпоновки.ЗначенияПараметров.КонДата.Значение = КонецДня(Рейс.ДатаКонца);
	//Иначе
	//	МакетКомпоновки.ЗначенияПараметров.НачДата.Значение = НачалоДня(ТекущаяДата());
	//	МакетКомпоновки.ЗначенияПараметров.КонДата.Значение = КонецДня(ТекущаяДата());
	//КонецеСли;	
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ,Истина);
	
	//Очищаем поле табличного документа
	Результат = Новый ТабличныйДокумент();
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	////Проверка на пустоту если не указан контрагент
	//Если Контрагент <> Неопределено Тогда 
	//    Возврат Результат;
	//Иначе
	//Если (Результат.ВысотаТаблицы-Результат.ФиксацияСверху)>1 Тогда
	Возврат Результат;
	//Иначе
	//    Возврат Неопределено;
	//КонецЕсли;
	//КонецЕсли;
КонецФункции	



&НаКлиенте
Процедура ОчиститьФактическуюМаршрутизацию(Команда)
	Пар = "оукотплопт";
	
	Если Не ЗначениеЗаполнено(ДатаПланирования) Или Регион.Пустая() Тогда
		Сообщить("Не заполнен регион или дата планирования!");
		Возврат;
	КонецЕсли;	
	
	Если Не ВвестиСтроку(Пар, "Пароль?", 20, Ложь) Тогда
		Возврат;
	КонецеСли;
	
	Если Пар <> "938734" Тогда
		Сообщить("Неверный пароль!");
		Возврат;
	КонецеСли;	
	
	От = Вопрос("Данные зафиксированной маршрутизации будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Если От = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеЗафиксированнойМаршрутизации(ДатаПланирования, Регион);
		ОбновитьДанные();
	КонецЕсли;	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоМаршрутизации(Команда)
	// Вставить содержимое обработчика.
	Таб = ОтчетПоМаршрутизацииСервер(ДатаПланирования, Регион);
	Таб.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРейсов(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Документ.Рейс.Форма.ФормаСписка",,ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СменитьРольРейсаНаСервере(Рейс, Роль)
	// Вставить содержимое обработчика.
	Д = Рейс.ПолучитьОбъект();
	Д.РольРейса = Роль;
	Д.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРольРейса(Рейс) 
	Возврат Рейс.РольРейса;
КонецФункции	

&НаКлиенте
Процедура СменитьРольРейса(Команда)
	Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	Зн = ПолучитьРольРейса(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Рейс);
	
	ЗнСтарый = Зн;
	
	Если ВвестиЗначение(Зн, "Укажите новую роль...", Тип("СправочникСсылка.РолиТранспорта")) Тогда
		Если ЗнСтарый <> Зн Тогда
			СменитьРольРейсаНаСервере(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Рейс, Зн);
			ОбновитьДанные(Ложь, Ложь);
		КонецеСли;	
	КонецеСли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСтрокуТочекМаршрута(Рейс)
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	РейсЗаказы.Заказ КАК Заказ,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(новаМестнаяДоставка.ВремяПрибытияС, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(новаМестнаяДоставка.ВремяПрибытияС, новаМестнаяДоставка.ВремяПрибытияПо, МИНУТА) / 2) КАК СреднееПоИнтервалу,
	|	новаМестнаяДоставка.ВремяПрибытияС КАК ВремяПрибытияС,
	|	новаМестнаяДоставка.ВремяПрибытияПо КАК ВремяПрибытияПо
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|			ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
	|		ПО ((ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.РеализацияТоваровУслуг)) = ДополнительныеПараметрыЗаказа.Заказ)
	|ГДЕ
	|	РейсЗаказы.ВидЗаказа = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.DROP)
	|	И РейсЗаказы.Ссылка = &Рейс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяПрибытияПо,
	|	СреднееПоИнтервалу";
	Зап.УстановитьПараметр("Рейс", Рейс);
	
	Выб = Зап.Выполнить().Выбрать();
	
	СтрокаЗаказов = "";
	
	Пока Выб.Следующий() Цикл
		СтрокаЗаказов = СтрокаЗаказов + Строка(Выб.Заказ.УникальныйИдентификатор()) + ";";
	КонецЦикла;	
	
	СтрокаЗаказов = Лев(СтрокаЗаказов, СтрДлина(СтрокаЗаказов) - 1);
	Возврат СтрокаЗаказов;
КонецФункции	

&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	// Вставить содержимое обработчика.
	Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Отметка = Истина;
	ИзменениеФлажкаНаРейсах(Неопределено);
	ВыполнитьСкрипт("createRoute(""" + ВернутьСтрокуТочекМаршрута(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Рейс) + """, true)");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМаршрутВТЗМаршрутов()
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьГруппыПолигонов(Команда)
	ОткрытьФорму("Справочник.ГруппыПолигоновМаршрутизации.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДляПрозвонаКлиентов(Команда)
	
	//+Степанов Нет смысла формировать отчет если регион не выбран.
	Если Не ЗначениеЗаполнено(Регион) Тогда
		ПоказатьПредупреждение(,"Не указан регион!");
		Возврат;
	КонецЕсли;
	//-Степанов
	
	ПараметрыСКД = Новый Структура;
	ПараметрыСКД.Вставить("ДатаПланирования",НачалоДня(ДатаПланирования));
	
	ПользовательскиеНастройки = УстановитьНастройкиОтчета("ОтчетДляПрозвонаКлиентов",ПараметрыСКД);
	//+Степанов Открываем отчет для терминала, указанного на форме.
	//ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, СформироватьПриОткрытии", ПользовательскиеНастройки, Истина);
	ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, СформироватьПриОткрытии,Терминал", ПользовательскиеНастройки, Истина, Регион);
	
	ОткрытьФорму("Отчет.ОтчетДляПрозвонаКлиентов.Форма.ФормаОтчета", ПараметрыФормы);
	
	
КонецПроцедуры

&НаСервере
Функция УстановитьНастройкиОтчета(ТипОтчета,СтруктураПараметров)
	СтруктураНастроек = Новый Структура;
	ОтчетОбъект = Отчеты[ТипОтчета].Создать();
	
	ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
		Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
				Если строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
					ПараметрСКД.Значение = ЭлПараметр.Значение;
					ПараметрСКД.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;    
	КонецЦикла;
	
	Возврат ПользовательскиеНастройки;
КонецФункции



#КонецОбласти

// Якурнов 05.09.2018 9:37:39
#Область НастройкиГруппПолигоновМаршрутизации
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГруппыПолигоновМаршрутизации.Ссылка КАК ГруппаПолигонов
	|ИЗ
	|	Справочник.ГруппыПолигоновМаршрутизации КАК ГруппыПолигоновМаршрутизации
	|ГДЕ
	|	ГруппыПолигоновМаршрутизации.ПометкаУдаления = ЛОЖЬ
	|	И ГруппыПолигоновМаршрутизации.Терминал = &Терминал
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыПолигоновМаршрутизации.Наименование";
	
	//CeHbKA #3377 20.08.2019
	Запрос.УстановитьПараметр("Терминал", Регион);
	
	Результат = Запрос.Выполнить();
	
	ГруппыПолигонов.Загрузить(Результат.Выгрузить());
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ЗагружДанные = ХранилищеСистемныхНастроек.Загрузить("ПМ", ""+ПользовательИБ.УникальныйИдентификатор);
	
	Если ЗагружДанные <> Неопределено Тогда
		
		Если ЗагружДанные.Свойство("ГруппыПолигонов") Тогда
			
			Для каждого СтрокаТЗ Из ЗагружДанные.ГруппыПолигонов Цикл
				
				МассивСтрок = ГруппыПолигонов.НайтиСтроки(Новый Структура("ГруппаПолигонов", СтрокаТЗ.ГруппаПолигонов)); 
				
				Если МассивСтрок <> Неопределено Тогда
					Для каждого СтрокаГП Из МассивСтрок Цикл
						СтрокаГП.Отметка = СтрокаТЗ.Отметка;
					КонецЦикла; 
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
	//Выборка = Результат.Выбрать();
	//
	//ВременнаяТЗГруппыПолигонов = Новый Массив;
	//Пока Выборка.Следующий() Цикл
	//	ВременнаяТЗГруппыПолигонов.Добавить(Выборка.Ссылка);
	//КонецЦикла;
	
	
	//Если Настройки["ГруппыПолигонов"] = Неопределено Тогда
	//	Для каждого ГрПол из ВременнаяТЗГруппыПолигонов Цикл
	//			НовСтр = ГруппыПолигонов.Добавить();
	//			НовСтр.ГруппаПолигонов = ГрПол;
	//	КонецЦикла;
	//Иначе
	//	МассивГруппыПолигонов = Настройки["ГруппыПолигонов"]; 
	//	Для каждого ГрПол из ВременнаяТЗГруппыПолигонов Цикл
	//		Если МассивГруппыПолигонов.Найти(ГрПол) = Неопределено Тогда
	//			НовСтр = ГруппыПолигонов.Добавить();
	//			НовСтр.ГруппаПолигонов = ГрПол;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	ГруппыПолигонов.Сортировать("ГруппаПолигонов");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПолигоновПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПолигоновПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПервоначальноеЗаполнениеГруппыПолигонов(Перезаполнение = Ложь)
	
	Если (ГруппыПолигонов.Количество()) > 0 И (НЕ Перезаполнение) Тогда
		Возврат;
	КонецЕсли;
	
	//CeHbKA #3377 20.08.2019
	ГруппыПолигонов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГруппыПолигоновМаршрутизации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыПолигоновМаршрутизации КАК ГруппыПолигоновМаршрутизации
	|ГДЕ
	|	ГруппыПолигоновМаршрутизации.ПометкаУдаления = ЛОЖЬ
	|	И ГруппыПолигоновМаршрутизации.Терминал = &Терминал
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыПолигоновМаршрутизации.Наименование";
	
	//CeHbKA #3377 20.08.2019
	Запрос.УстановитьПараметр("Терминал", Регион);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВременнаяТЗГруппыПолигонов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ВременнаяТЗГруппыПолигонов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Для каждого ГрПол из ВременнаяТЗГруппыПолигонов Цикл
		НовСтр = ГруппыПолигонов.Добавить();
		НовСтр.ГруппаПолигонов = ГрПол;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоГруппамПолигоны(Команда)
	//CeHbKA 20.08.2019 #3377
	ИзменитьЗаголовокГруппыПолигонов();	
	
	ОбновитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаФлаговГруппПолигонов(Команда)
	Для Каждого Элем из ГруппыПолигонов Цикл
		Элем.Отметка = Ложь;
	КонецЦикла;
	//CeHbKA 20.08.2019 #3377
	ИзменитьЗаголовокГруппыПолигонов();	
КонецПроцедуры

&НаКлиенте
Процедура ПростановкаФлаговГруппПолигонов(Команда)
	Для Каждого Элем из ГруппыПолигонов Цикл
		Элем.Отметка = Истина;
	КонецЦикла;
	//CeHbKA 20.08.2019 #3377
	ИзменитьЗаголовокГруппыПолигонов();	
КонецПроцедуры

// Якурнов 06.09.2018 9:35:29
&НаСервере
Функция ПолучитьМассивПолигоновИзГрупп()
	
	МассивГруппПолигонов = Новый Массив;
	Для Каждого Элем Из ГруппыПолигонов Цикл
		Если Элем.Отметка Тогда
			МассивГруппПолигонов.Добавить(Элем.ГруппаПолигонов);
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивГруппПолигонов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//|	СхемыПолигональнойМаршрутизации.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.СхемыПолигональнойМаршрутизации КАК СхемыПолигональнойМаршрутизации
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	СхемыПолигональнойМаршрутизации.ДатаСоздания УБЫВ";
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//ТекущаяАктивнаяСхемаПолигональнойМаршрутизации = Выборка.Ссылка;
	//КонецЦикла;
	ТекущаяАктивнаяСхемаПолигональнойМаршрутизации = ПолигональнаяСхемаКарты;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.НомерПолигона КАК НомерПолигона,
	|	ПолигоныМаршрутизации.Ссылка КАК Полигон
	|ИЗ
	|	Справочник.ГруппыПолигоновМаршрутизации.ПолигоныМаршрутизации КАК ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолигоныМаршрутизации КАК ПолигоныМаршрутизации
	|		ПО ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.НомерПолигона = ПолигоныМаршрутизации.Порядок
	|			И (ПолигоныМаршрутизации.Владелец = &Владелец)
	|ГДЕ
	|	ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.Ссылка.Ссылка В(&МассивГруппПолигонов)
	|	И ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец",ТекущаяАктивнаяСхемаПолигональнойМаршрутизации);
	Запрос.УстановитьПараметр("МассивГруппПолигонов",МассивГруппПолигонов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивПолигонов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивПолигонов.Добавить(Выборка.Полигон);
	КонецЦикла;
	
	Если МассивПолигонов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивПолигонов;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивВодителейИзГрупп()
	
	//CeHbKA #3547 27.09.2019
	Если ПоказыватьВсеРейсы Тогда
		Возврат Неопределено;
	КонецЕсли; 
	//CeHbKA #3547 27.09.2019
	
	МассивГруппПолигонов = Новый Массив;
	Для Каждого Элем Из ГруппыПолигонов Цикл
		Если Элем.Отметка Тогда
			МассивГруппПолигонов.Добавить(Элем.ГруппаПолигонов);			
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивГруппПолигонов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеПараметрыВодителейСрезПоследних.Водитель КАК Водитель
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыВодителей.СрезПоследних КАК ДополнительныеПараметрыВодителейСрезПоследних
	|ГДЕ
	|	ДополнительныеПараметрыВодителейСрезПоследних.ГруппаПолигоновМаршрутизации В(&МассивГруппПолигонов)";
	
	Запрос.УстановитьПараметр("МассивГруппПолигонов",МассивГруппПолигонов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВодителей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивВодителей.Добавить(Выборка.Водитель);
	КонецЦикла;
	
	Если МассивВодителей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивВодителей;
	КонецЕсли;
	
КонецФункции

// Якурнов 30.10.2018 11:57:58 Кнопка Автообновления карты при простановке галочек в Рейсах 
&НаКлиенте
Процедура АвтообновлениеКартыПриВыделенииЗаказов(Команда)
	Объект.АвтообновлениеКартыПриВыделенииЗаказов = НЕ Объект.АвтообновлениеКартыПриВыделенииЗаказов;
	Элементы.ФормаАвтообновлениеКартыПриВыделенииЗаказов.Пометка = Объект.АвтообновлениеКартыПриВыделенииЗаказов;
	ОбновитьДанные();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПересчитатьДерево(МассивЗаказов, КодТранспорта = Неопределено, ИмяРеквизитаДерева)
	
	Если ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда
		ДеревоИсточник = ДеревоПолигоновСЗаказами;
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		ДеревоИсточник = ДеревоРейсовСЗаказами;
	КонецЕсли; 
	
	//перенесем заказы в другой рейс
	Если (ДеревоИсточник.ПолучитьЭлементы().Количество() > 0) Тогда //Широков по письму
		//+Широков по письму
		Если  МассивЗаказов.Количество() = 0 Тогда
			Если КодТранспорта <> Неопределено Тогда
				
				//найдём новый рейс
				НовыйРодитель = Неопределено;	
				Для каждого СтрокаРейс Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
					Если СтрокаРейс.ТранспортКод = КодТранспорта Тогда
						НовыйРодитель = СтрокаРейс;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				
				Если НовыйРодитель = Неопределено Тогда
					Возврат;
				КонецЕсли;	
				
				
				
				//добавим новую строку
				////////////////////НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
				////////////////////
				////////////////////ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
				
				//Если НЕ ЭлементДЗ = Неопределено Тогда //Широков по письму 
				//	
				//	ЗаполнитьЗначенияСвойств(НС, ЭлементДЗ);
				//	
				//КонецЕсли; //Широков по письму
				
				////////////НС.Отметка 		= 0;
				////////////НС.ДокументПроверен = Ложь;
				////////////НС.ИндивидуальнаяМаршрутизация = Ложь;
				
				//Широков по письму
				//				ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами", ДеревоИсточник);
				Если НЕ НовыйРодитель = Неопределено Тогда
					ПересчитатьСтрокуДерева(НовыйРодитель.ПолучитьИдентификатор(), "ДеревоРейсовСЗаказами", ДеревоИсточник);
				КонецЕсли;
				//Широков по письму
				
				////////ОбновитьФлажки(НС);
				
				//+Широков по письму
				//Если НЕ Родитель = Неопределено Тогда
				//	//-Широков по письму
				//	
				//	//удалим старую строку
				//	Родитель.ПолучитьЭлементы().Удалить(СтрокаЗаказ.Индекс);
				//	
				//	//+Широков по письму
				//КонецЕсли
				//-Широков по письму
			КонецЕсли;
		Иначе		
			//-Широков по письму
			Для каждого СтрокаЗаказ Из МассивЗаказов Цикл
				
				//+Широков по письму
				Родитель = Неопределено;
				Если НЕ СтрокаЗаказ.ИндексРодителя = Неопределено Тогда
					Если ДеревоИсточник.ПолучитьЭлементы().Количество() <= СтрокаЗаказ.ИндексРодителя - 1 Тогда
						//-Широков по письму
						Родитель = ДеревоИсточник.ПолучитьЭлементы()[СтрокаЗаказ.ИндексРодителя];						
						
						Для каждого ПодчиненныйЗаказ Из Родитель.ПолучитьЭлементы() Цикл
							Если СтрокаЗаказ.НомерЗаказа = ПодчиненныйЗаказ.НомерЗаказа Тогда
								ЭлементДЗ = ПодчиненныйЗаказ;
								ЭлементДЗ_ДляПересчёта = ПодчиненныйЗаказ;
								СтрокаЗаказ.Индекс = Родитель.ПолучитьЭлементы().Индекс(ЭлементДЗ);
								
								ОбновитьФлажки(ЭлементДЗ_ДляПересчёта);
								
							КонецЕсли; 
						КонецЦикла; 
						
						//+Широков по письму
					КонецЕсли;
				КонецЕсли;
				//-Широков по письму
				
				//перенесём заказы в рейс
				Если КодТранспорта <> Неопределено Тогда
					
					//найдём новый рейс
					НовыйРодитель = Неопределено;	
					Для каждого СтрокаРейс Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
						Если СтрокаРейс.ТранспортКод = КодТранспорта Тогда
							НовыйРодитель = СтрокаРейс;
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					
					Если НовыйРодитель = Неопределено Тогда
						Возврат;
					КонецЕсли;	
					
					//////						//добавим новую строку
					НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
					
					ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
					
					Если НЕ ЭлементДЗ = Неопределено Тогда //Широков по письму 
						
						ЗаполнитьЗначенияСвойств(НС, ЭлементДЗ);
						
					КонецЕсли; //Широков по письму
					
					НС.Отметка 		= 0;
					НС.ДокументПроверен = Ложь;
					НС.ИндивидуальнаяМаршрутизация = Ложь;
					
					//Широков по письму
					//					ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами", ДеревоИсточник);
					Если НЕ НовыйРодитель = Неопределено Тогда
						ПересчитатьСтрокуДерева(НовыйРодитель.ПолучитьИдентификатор(), "ДеревоРейсовСЗаказами", ДеревоИсточник);
					КонецЕсли;
					//Широков по письму
					
					ОбновитьФлажки(НС);
					
					//+Широков по письму
					Если НЕ Родитель = Неопределено Тогда
						//-Широков по письму
						
						//удалим старую строку
						Родитель.ПолучитьЭлементы().Удалить(СтрокаЗаказ.Индекс);
						
						//+Широков по письму
					КонецЕсли
					//-Широков по письму
					
				КонецЕсли; 
				
				//Широков по письму
				//ПересчитатьСтрокуДерева(Родитель, ИмяРеквизитаДерева, ДеревоИсточник);
				Если НЕ Родитель = Неопределено Тогда
					ПересчитатьСтрокуДерева(Родитель.ПолучитьИдентификатор(), ИмяРеквизитаДерева, ДеревоИсточник);
				КонецЕсли;
				//Широков по письму
				
				ОбновитьФлажки(Родитель);
				
			КонецЦикла;
			
			//+Широков по письму
		КонецЕсли; 
		
	КонецЕсли; 
	//-Широков по письму
	
	//удалим пустые полигоны
	МассивУдаляемыхПолигонов = Новый Массив;
	
	Если ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда
		
		Для каждого СтрокаПолигонов Из ДеревоИсточник.ПолучитьЭлементы() Цикл
			
			Если СтрокаПолигонов.ПолучитьЭлементы().Количество() = 0 Тогда
				МассивУдаляемыхПолигонов.Добавить(СтрокаПолигонов);	
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для каждого УдаляемыйПолигон Из МассивУдаляемыхПолигонов Цикл
			ДеревоИсточник.ПолучитьЭлементы().Удалить(УдаляемыйПолигон);	
		КонецЦикла; 
		
	КонецЕсли;
	
	//итоги
	РассчитатьИтоговоеКоличествоЗаказов();
	
КонецПроцедуры // ()

//CeHbKA
&НаКлиенте
Процедура ПересчитатьДеревоСтарая(МассивЗаказов, КодТранспорта = Неопределено, ИмяРеквизитаДерева)
	
	Если ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда
		ДеревоИсточник = ДеревоПолигоновСЗаказами;
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		ДеревоИсточник = ДеревоРейсовСЗаказами;
	КонецЕсли; 
	
	//перенесем заказы в другой рейс
	Для каждого СтрокаЗаказ Из МассивЗаказов Цикл
		
		//+Широков по письму
		Родитель = Неопределено;
		Если ДеревоИсточник.ПолучитьЭлементы().Количество() > 0 Тогда
			Если ДеревоИсточник.ПолучитьЭлементы().Количество() <= СтрокаЗаказ.ИндексРодителя - 1 Тогда
				//-Широков по письму
				Родитель = ДеревоИсточник.ПолучитьЭлементы()[СтрокаЗаказ.ИндексРодителя];						
				
				Для каждого ПодчиненныйЗаказ Из Родитель.ПолучитьЭлементы() Цикл
					Если СтрокаЗаказ.НомерЗаказа = ПодчиненныйЗаказ.НомерЗаказа Тогда
						ЭлементДЗ = ПодчиненныйЗаказ;
						ЭлементДЗ_ДляПересчёта = ПодчиненныйЗаказ;
						СтрокаЗаказ.Индекс = Родитель.ПолучитьЭлементы().Индекс(ЭлементДЗ);
						
						ОбновитьФлажки(ЭлементДЗ_ДляПересчёта);
						
					КонецЕсли; 
				КонецЦикла; 
				
				//+Широков по письму
			КонецЕсли;
		КонецЕсли;
		//-Широков по письму
		
		//перенесём заказы в рейс
		Если КодТранспорта <> Неопределено Тогда
			
			//найдём новый рейс
			НовыйРодитель = Неопределено;	
			Для каждого СтрокаРейс Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
				Если СтрокаРейс.ТранспортКод = КодТранспорта Тогда
					НовыйРодитель = СтрокаРейс;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			Если НовыйРодитель = Неопределено Тогда
				Возврат;
			КонецЕсли;	
			
			//добавим новую строку
			НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
			
			ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
			
			Если НЕ ЭлементДЗ = Неопределено Тогда //Широков по письму 
				
				ЗаполнитьЗначенияСвойств(НС, ЭлементДЗ);
				
			КонецЕсли; //Широков по письму
			
			НС.Отметка 		= 0;
			НС.ДокументПроверен = Ложь;
			НС.ИндивидуальнаяМаршрутизация = Ложь;
			
			//Широков по письму			
			//ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами");
			Если НЕ НовыйРодитель = Неопределено Тогда
				ПересчитатьСтрокуДерева(НовыйРодитель.ПолучитьИдентификатор(), "ДеревоРейсовСЗаказами");
			КонецЕсли;
			//Широков по письму			
			
			ОбновитьФлажки(НС);
			
			//+Широков по письму
			Если НЕ Родитель = Неопределено Тогда
				//-Широков по письму
				
				//удалим старую строку
				Родитель.ПолучитьЭлементы().Удалить(СтрокаЗаказ.Индекс);
				
				//+Широков по письму
			КонецЕсли
			//-Широков по письму
			
		КонецЕсли; 
		
		//Широков по письму
		//ПересчитатьСтрокуДерева(Родитель, ИмяРеквизитаДерева);
		Если НЕ Родитель = Неопределено Тогда
			ПересчитатьСтрокуДерева(Родитель.ПолучитьИдентификатор(), ИмяРеквизитаДерева);
		КонецЕсли;
		//Широков по письму
		
		ОбновитьФлажки(Родитель);
		
	КонецЦикла;
	
	//удалим пустые полигоны
	МассивУдаляемыхПолигонов = Новый Массив;
	
	Если ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда
		
		Для каждого СтрокаПолигонов Из ДеревоИсточник.ПолучитьЭлементы() Цикл
			
			Если СтрокаПолигонов.ПолучитьЭлементы().Количество() = 0 Тогда
				МассивУдаляемыхПолигонов.Добавить(СтрокаПолигонов);	
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для каждого УдаляемыйПолигон Из МассивУдаляемыхПолигонов Цикл
			ДеревоИсточник.ПолучитьЭлементы().Удалить(УдаляемыйПолигон);	
		КонецЦикла; 
		
	КонецЕсли;
	
	//итоги
	РассчитатьИтоговоеКоличествоЗаказов();
	
КонецПроцедуры // ()

//Широков по письму
&НаКлиенте
Процедура ДобавитьЗаказыВДеревоРейсов(МассивЗаказов, КодТранспорта, МассивИдентификаторовРейсовДляПересчета)
	
	//ДеревоИсточник = ДеревоРейсовСЗаказами;
	//
	//Для каждого СтрокаЗаказ Из МассивЗначений2 Цикл
	//	СтруктураЗаказа = Новый Структура;
	//	СтруктураЗаказа.Вставить("Заказ", СтрокаЗаказ);
	//ДобавитьВДеревоРейсов(КодТранспорта, СтруктураЗаказа);
	//КонецЦикла;
	//найдём новый рейс
	НовыйРодитель = Неопределено;
	
	МассивЭлементовДереваНаУдаление = новый Массив;
	МассивГруппДереваНаПересчет = Новый Массив;
	//	Для каждого ЭлементМассива Из МассивИдентификаторовРейсовДляПересчета Цикл
	Для каждого СтрокаРейс Из ДеревоРейсовСзаказами.ПолучитьЭлементы() Цикл
		//СтрокаРейс = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива);
		//Если НЕ СтрокаРейс = Неопределено Тогда
		Если СокрЛП(СтрокаРейс.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
			НовыйРодитель = СтрокаРейс;
			Прервать;
		КонецЕсли; 
		//КонецЕсли; 
	КонецЦикла;
	
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(НовыйРодитель.ПолучитьИдентификатор());
		Если ЭлементМассивЭлементовДерева = Неопределено Тогда
			МассивЭлементовДереваНаУдаление.Добавить(НовыйРодитель.ПолучитьИдентификатор());
		КонецЕсли;
		
		//добавим новую строку
		ЭлементДереваПолигонов = Неопределено;
		
		//		Для Каждого ЭлементМассива Из МассивРейсовСПометками Цикл
		Для Каждого ЭлементМассива Из МассивПолигоновСПометками Цикл
			Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);	
			//Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);	
			Если НЕ Стр = Неопределено Тогда
//МассивПолигоновСПометками.Удалить(ЭлементМассива.Ключ); //Широков 22.03.2021 по письму
				//Широков 01.10.2020
				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					Стр.ПолучитьРодителя().Отметка = 0;
				КонецЕсли;
				
				Стр.Отметка = 0;
				Если НЕ МассивЗаказов.Найти(СокрЛП(ЭлементМассива.Значение.НомерЗаказа)) = Неопределено Тогда
	МассивПолигоновСПометками.Удалить(ЭлементМассива.Ключ); //Широков 22.03.2021 по письму
				
					Если НЕ Стр = Неопределено Тогда
						ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(Стр.ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивЭлементовДереваНаУдаление.Добавить(Стр.ПолучитьИдентификатор());
						КонецЕсли;
						
						//ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьИдентификатор());
						//Если ЭлементМассивЭлементовДерева = Неопределено Тогда
						//	МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						//КонецЕсли;
						ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьИдентификатор());
						КонецЕсли;
						
					СтарыйРодитель =  Стр.ПолучитьРодителя();
					Если НЕ СтарыйРодитель = Неопределено Тогда
						ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						КонецЕсли;
					КонецЕсли;	
						
						ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(НовыйРодитель.ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(НовыйРодитель.ПолучитьИдентификатор());
						КонецЕсли;
						
						НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
						//Стр.ПолучитьРодителя().Отметка = 0;
						ЗаполнитьЗначенияСвойств(НС, Стр);
						НС.ИндивидуальнаяМаршрутизация = Истина;
						НС.Отметка 		= 0;
						НС.ДокументПроверен = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		//МассивРейсовСПометками.Очистить();
		
		//Удаляем обработанные заказы
		//дерево полигонов
		Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
			Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ Стр = Неопределено Тогда
				Если Стр.ПолучитьРодителя() = Неопределено Тогда
					//Если ДеревоРейсовСЗаказами.ПолучитьЭлементы().Количество() = 0 Тогда
					Если Стр.ПолучитьЭлементы().Количество() = 0 Тогда
						ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(Стр);
					КонецЕсли;
				Иначе
					РодительСТР = Стр.ПолучитьРодителя();
					
					Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
					
					Если РодительСТР.ПолучитьЭлементы().Количество() = 0 Тогда
						ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(РодительСТР);
						//ДеревоПолигоновСЗаказами.Удалить(РодительСТР);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		
		//Пересчитаем группы
		ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
		Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
			СтрокаРейсГруппа = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ СтрокаРейсГруппа = Неопределено Тогда
				Выполнить("СтрокаРейсГруппа.Итого = 0");
				
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
					Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
						Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
					Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
				КонецЦикла;	
				//ОбновитьФлажки(СтрокаРейсГруппа);

			КонецЕсли;		
		КонецЦикла;
		
		//дерево рейсов
		Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
			Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ Стр = Неопределено Тогда
				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
				КонецЕсли;
			КонецЕсли;
			
			//Если Стр.ПолучитьРодителя() = Неопределено Тогда
			//	Если ДеревоРейсовСЗаказами.ПолучитьЭлементы().Количество() = 0 Тогда
			//		ДеревоРейсовСЗаказами.ПолучитьЭлементы().Удалить(Стр);
			//	КонецЕсли;
			//Иначе
			//	Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
			//КонецЕсли;
			
		КонецЦикла;
		//Пересчитаем группы
		ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
		Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
			СтрокаРейсГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ СтрокаРейсГруппа = Неопределено Тогда
				Выполнить("СтрокаРейсГруппа.Итого = 0");
				
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
					Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
						Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
					Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
				КонецЦикла;	
				//ОбновитьФлажки(СтрокаРейсГруппа);
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;	
	
//Широков 22.03.2021 по письму закомментировал
//МассивРейсовСПометками.Очистить();
//МассивПолигоновСПометками.Очистить();
//Широков 22.03.2021 по письму закомментировал
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ДобавитьЗаказыВДеревоРейсовИзРейсов2(МассивЗаказов, КодТранспорта)
	
	//ДеревоИсточник = ДеревоРейсовСЗаказами;
	//
	//Для каждого СтрокаЗаказ Из МассивЗначений2 Цикл
	//	СтруктураЗаказа = Новый Структура;
	//	СтруктураЗаказа.Вставить("Заказ", СтрокаЗаказ);
	//ДобавитьВДеревоРейсов(КодТранспорта, СтруктураЗаказа);
	//КонецЦикла;
	//найдём новый рейс
	НовыйРодитель = Неопределено;
	
	МассивЭлементовДереваНаУдаление = новый Массив;
	МассивГруппДереваНаПересчет = Новый Массив;
	//	Для каждого ЭлементМассива Из МассивИдентификаторовРейсовДляПересчета Цикл
	Для каждого СтрокаРейс Из ДеревоРейсовСзаказами.ПолучитьЭлементы() Цикл
		//СтрокаРейс = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива);
		//Если НЕ СтрокаРейс = Неопределено Тогда
		Если СокрЛП(СтрокаРейс.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
			НовыйРодитель = СтрокаРейс;
			Прервать;
		КонецЕсли; 
		//КонецЕсли; 
	КонецЦикла;
	
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(НовыйРодитель.ПолучитьИдентификатор());
		Если ЭлементМассивЭлементовДерева = Неопределено Тогда
			МассивЭлементовДереваНаУдаление.Добавить(НовыйРодитель.ПолучитьИдентификатор());
		КонецЕсли;
		
		//добавим новую строку
		ЭлементДереваПолигонов = Неопределено;
		
		Для Каждого ЭлементМассива Из МассивРейсовСПометками Цикл
			//////Для Каждого ЭлементМассива Из МассивПолигоновСПометками Цикл
			Стр = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);	
			//Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);	
			Если НЕ Стр = Неопределено Тогда
				
				//МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ); //Широков 22.03.2021 по письму
				
				//Широков 01.10.2020
				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					//Стр.ПолучитьРодителя().Отметка = 0;   //Широков по письму 23.03.2021
				КонецЕсли;
				//Стр.ПолучитьРодителя().Отметка = 0;
				//Стр.Отметка = 0;  //Широков по письму 23.03.2021
				Если НЕ МассивЗаказов.Найти(СокрЛП(ЭлементМассива.Значение.НомерЗаказа)) = Неопределено Тогда
					
					МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ); //Широков 22.03.2021 по письму
					Стр.Отметка = 0; //Широков по письму 08.04.2021
					//Если НЕ Стр = Неопределено Тогда  //Широков 16.11.2020 по письму
					ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(Стр.ПолучитьИдентификатор());
					Если ЭлементМассивЭлементовДерева = Неопределено Тогда
						МассивЭлементовДереваНаУдаление.Добавить(Стр.ПолучитьИдентификатор());
					КонецЕсли;
					
					СтарыйРодитель =  Стр.ПолучитьРодителя();
					Если НЕ СтарыйРодитель = Неопределено Тогда
						ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						КонецЕсли;
					КонецЕсли;
					
					ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(НовыйРодитель.ПолучитьИдентификатор());
					Если ЭлементМассивЭлементовДерева = Неопределено Тогда
						МассивГруппДереваНаПересчет.Добавить(НовыйРодитель.ПолучитьИдентификатор());
					КонецЕсли;
					
					НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
					//Стр.ПолучитьРодителя().Отметка = 0;
					ЗаполнитьЗначенияСвойств(НС, Стр);
					НС.ИндивидуальнаяМаршрутизация = Истина;
					НС.Отметка 		= 0;
					НС.ДокументПроверен = Ложь;
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		//МассивРейсовСПометками.Очистить();
		
		//дерево рейсов
		Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
			Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ Стр = Неопределено Тогда
				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Пересчитаем группы
		ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
		Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
			СтрокаРейсГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ СтрокаРейсГруппа = Неопределено Тогда
				Выполнить("СтрокаРейсГруппа.Итого = 0");
				
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
					Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
						Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
					Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
				КонецЦикла;	
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;	
	
	
	//Широков 22.03.2021 по письму закомментировал
	//МассивРейсовСПометками.Очистить();
	//МассивПолигоновСПометками.Очистить();
	//Широков 22.03.2021 по письму закомментировал
	
КонецПроцедуры // ()

//Широков 16.11.2020
&НаКлиенте
Процедура ДобавитьЗаказыСКартыВДеревоРейсов(МассивЗаказов, КодТранспорта)
	
	//МассивРейсовСПометками = Новый Соответствие;
	//МассивРейсовСПометками.Получить(Ключ);
	
	//найдём новый рейс
	НовыйРодитель = Неопределено;
	
	МассивЭлементовДереваНаУдаление = новый Массив;
	МассивГруппДереваНаПересчет = Новый Массив;
	
	//	Для каждого ЭлементМассива Из МассивИдентификаторовРейсовДляПересчета Цикл
	//Ищем водителя, кому все это отдадим
	Для каждого СтрокаРейс Из ДеревоРейсовСзаказами.ПолучитьЭлементы() Цикл
		//СтрокаРейс = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива);
		Если СокрЛП(СтрокаРейс.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
			НовыйРодитель = СтрокаРейс;
			Прервать;
		КонецЕсли; 
		//КонецЕсли; 
	КонецЦикла;
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		
		//Широков 17.11.2020   по письму
		
		////ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(НовыйРодитель.ПолучитьИдентификатор());
		////Если ЭлементМассивЭлементовДерева = Неопределено Тогда
		////	МассивЭлементовДереваНаУдаление.Добавить(НовыйРодитель.ПолучитьИдентификатор());
		////КонецЕсли;
		
		//добавим новую строку
		ЭлементДереваПолигонов = Неопределено;
		Для Каждого ЭлементМассива Из МассивЗаказов Цикл
			//Стр = МассивРейсовСПометками.Получить(ЭлементМассива);	
			Стр = Неопределено; //Широков 08.04.2021
			Для Каждого ЭлементПоиска Из МассивРейсовСПометками Цикл
				Если СокрЛП(ЭлементПоиска.Значение.НомерЗаказа) = ЭлементМассива Тогда
					Стр = ЭлементПоиска.Ключ;
					МассивРейсовСПометками.Удалить(ЭлементПоиска.Ключ); //Широков 22.03.2021 по письму
					//+Широков 08.04.2021 по письму
					ЗаказСОтметкой = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементПоиска.Ключ);
					Если НЕ ЗаказСОтметкой = Неопределено Тогда
						ЗаказСОтметкой.Отметка = 0;
					КонецЕсли;
					//-Широков 08.04.2021 по письму
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ Стр = Неопределено Тогда
				//Заказ находится в рейсах - перекладываем в другой рейс
				//Стр = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива);	
				//+Широков 08.04.2021 по письму
				//Стр = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементПоиска.Ключ);	
				Стр = ЗаказСОтметкой;
				//-Широков 08.04.2021 по письму
				Если НЕ Стр = Неопределено Тогда
					Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
						//Широков 22.03.2021 по письму
						//Стр.ПолучитьРодителя().Отметка = 0;
						//Широков 22.03.2021 по письму
						Стр.Отметка = 0; //Широков 19.11.2020 по письму
					КонецЕсли;
				//КонецЕсли;
				//Если НЕ Стр = Неопределено Тогда
					ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(Стр.ПолучитьИдентификатор());
					Если ЭлементМассивЭлементовДерева = Неопределено Тогда
						МассивЭлементовДереваНаУдаление.Добавить(Стр.ПолучитьИдентификатор());
					КонецЕсли;
					
					//ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьИдентификатор());
					//Если ЭлементМассивЭлементовДерева = Неопределено Тогда
					//	МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
					//КонецЕсли;
					ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьИдентификатор());
					Если ЭлементМассивЭлементовДерева = Неопределено Тогда
						МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьИдентификатор());
					КонецЕсли;
					
					
					СтарыйРодитель =  Стр.ПолучитьРодителя();
					Если НЕ СтарыйРодитель = Неопределено Тогда
						ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(СтарыйРодитель.ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(СтарыйРодитель.ПолучитьИдентификатор());
						КонецЕсли;
					КонецЕсли;
					//ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
					//Если ЭлементМассивЭлементовДерева = Неопределено Тогда
					//	МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
					//КонецЕсли;
					
					ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(НовыйРодитель.ПолучитьИдентификатор());
					Если ЭлементМассивЭлементовДерева = Неопределено Тогда
						МассивГруппДереваНаПересчет.Добавить(НовыйРодитель.ПолучитьИдентификатор());
					КонецЕсли;
					
					НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
					//Стр.ПолучитьРодителя().Отметка = 0;
					ЗаполнитьЗначенияСвойств(НС, Стр);
					НС.ИндивидуальнаяМаршрутизация = Истина;
					НС.Отметка 		= 0;
					НС.ДокументПроверен = Ложь;
					НС.Рейс = НовыйРодитель.Рейс; //Широков 19.11.2020  по письму
					
					//Удаляем обработанные заказы
					//дерево полигонов
					Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
		//+Широков по письму 25.03.2021
						//Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
						Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
		//-Широков по письму 25.03.2021
						Если НЕ Стр = Неопределено Тогда
							Если Стр.ПолучитьРодителя() = Неопределено Тогда
								//Если ДеревоРейсовСЗаказами.ПолучитьЭлементы().Количество() = 0 Тогда
								Если Стр.ПолучитьЭлементы().Количество() = 0 Тогда
		//+Широков по письму 25.03.2021
									//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(Стр);
									//ДеревоРейсовСЗаказами.ПолучитьЭлементы().Удалить(Стр);
		//-Широков по письму 25.03.2021
								КонецЕсли;
							Иначе
								РодительСТР = Стр.ПолучитьРодителя();
								Если НЕ  РодительСТР = Неопределено Тогда
									Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
									
									Если РодительСТР.ПолучитьЭлементы().Количество() = 0 Тогда
		//+Широков по письму 25.03.2021
										//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(РодительСТР);
										//ДеревоРейсовСЗаказами.ПолучитьЭлементы().Удалить(РодительСТР);
		//-Широков по письму 25.03.2021
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				//Заказ находится в полигонах - маршрутизируем
				Для Каждого ЭлементПоиска Из МассивПолигоновСПометками Цикл
					Если СокрЛП(ЭлементПоиска.Значение.НомерЗаказа) = ЭлементМассива Тогда
						Стр = ЭлементПоиска.Ключ;
						МассивПолигоновСПометками.Удалить(ЭлементПоиска.Ключ); //Широков 22.03.2021 по письму
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				
				//Стр = МассивПолигоновСПометками.Получить(ЭлементМассива);	
				Если НЕ Стр = Неопределено Тогда
					//Стр = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива);	
					Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементПоиска.Ключ);	
					Если НЕ Стр = Неопределено Тогда
						Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
	//Широков 22.03.2021 по письму
                            //Стр.ПолучитьРодителя().Отметка = 0;
	//Широков 22.03.2021 по письму
							Стр.Отметка = 0; //Широков 19.11.2020 по письму
						КонецЕсли;
					КонецЕсли;
					Если НЕ Стр = Неопределено Тогда
						ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(Стр.ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивЭлементовДереваНаУдаление.Добавить(Стр.ПолучитьИдентификатор());
						КонецЕсли;
						
						СтарыйРодитель = Стр.ПолучитьРодителя();
						Если НЕ СтарыйРодитель = Неопределено Тогда
							ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
							Если ЭлементМассивЭлементовДерева = Неопределено Тогда
								МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
							КонецЕсли;
						КонецЕсли;
						
						ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(НовыйРодитель.ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(НовыйРодитель.ПолучитьИдентификатор());
						КонецЕсли;
						
						НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
						//Стр.ПолучитьРодителя().Отметка = 0;
						ЗаполнитьЗначенияСвойств(НС, Стр);
						НС.ИндивидуальнаяМаршрутизация = Истина;
						НС.Отметка 		= 0;
						НС.ДокументПроверен = Ложь;
						НС.Рейс = НовыйРодитель.Рейс; //Широков 19.11.2020  по письму
						
						//удаляем из дерева полигонов
						//Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
						//	//							Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
						//	Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
						//	Если НЕ Стр = Неопределено Тогда
						//		Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
						//			Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
						//			//Индекс = Стр.ПолучитьИдентификатор();                        //Широков 19.11.2020 по письму
						//			//Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Индекс);
						//			//Индекс = Стр.Индекс(); //метод е обнаружен
						//			//Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Индекс);
						//		КонецЕсли;
						//	КонецЕсли;
						//КонецЦикла;
						
						
						//Широков 19.11.2020 по письму
						Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
							Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
							Если НЕ Стр = Неопределено Тогда
								Если Стр.ПолучитьРодителя() = Неопределено Тогда
									//Если ДеревоРейсовСЗаказами.ПолучитьЭлементы().Количество() = 0 Тогда
									Если Стр.ПолучитьЭлементы().Количество() = 0 Тогда
										ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(Стр);
									КонецЕсли;
								Иначе
									РодительСТР = Стр.ПолучитьРодителя();
									
									Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
									
									Если РодительСТР.ПолучитьЭлементы().Количество() = 0 Тогда
										ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(РодительСТР);
										//ДеревоПолигоновСЗаказами.Удалить(РодительСТР);
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						//Широков 19.11.2020 по письму					
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//удаляем из дерева рейсов
		Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
			Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			//Стр = ДеревоРейсовСЗаказами.Найти2лй,
			//ПоИдентификатору(ЭлементМассива);
			Если НЕ Стр = Неопределено Тогда
				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
					
					//Индекс = Стр.ПолучитьИдентификатор();                        //Широков 19.11.2020 по письму
					//Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Индекс);
					//Индекс = Стр.Индекс();
					//Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Индекс);
					
				КонецЕсли;
			КонецЕсли;
			
			//Если Стр.ПолучитьРодителя() = Неопределено Тогда
			//	Если ДеревоРейсовСЗаказами.ПолучитьЭлементы().Количество() = 0 Тогда
			//		ДеревоРейсовСЗаказами.ПолучитьЭлементы().Удалить(Стр);
			//	КонецЕсли;
			//Иначе
			//	Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
			//КонецЕсли;
			
		КонецЦикла;
		
		//удаляем из дерева полигонов  //Широков 19.11.2020 по письму
		
		Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
			Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ Стр = Неопределено Тогда
				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
					
					//Индекс = Стр.ПолучитьИдентификатор();                        //Широков 19.11.2020 по письму
					//Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Индекс);
					//Индекс = Стр.Индекс();
					//Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Индекс);
					
				КонецЕсли;
			КонецЕсли;
			
			//Если Стр.ПолучитьРодителя() = Неопределено Тогда
			//	Если ДеревоРейсовСЗаказами.ПолучитьЭлементы().Количество() = 0 Тогда
			//		ДеревоРейсовСЗаказами.ПолучитьЭлементы().Удалить(Стр);
			//	КонецЕсли;
			//Иначе
			//	Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
			//КонецЕсли;
			
		КонецЦикла;
		
		//Пересчитаем группы
		ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
		Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
			СтрокаРейсГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ СтрокаРейсГруппа = Неопределено Тогда
				Выполнить("СтрокаРейсГруппа.Итого = 0");
				
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
					Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
						Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
					Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
				КонецЦикла;	
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;	
	
	
	//////////////////////////////
	//Пересчитаем группы
	ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
	Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
		СтрокаРейсГруппа = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
		Если НЕ СтрокаРейсГруппа = Неопределено Тогда
			Выполнить("СтрокаРейсГруппа.Итого = 0");
			
			Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
				Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
				КонецЦикла;	
				Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
			КонецЦикла;	
			//ОбновитьФлажки(СтрокаРейсГруппа);
			
		КонецЕсли;		
	КонецЦикла;
	
	////Пересчитаем группы
	//ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
	//Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
	//	СтрокаРейсГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
	//	Если НЕ СтрокаРейсГруппа = Неопределено Тогда
	//		Выполнить("СтрокаРейсГруппа.Итого = 0");
	//		
	//		Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
	//			Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
	//			Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
	//				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
	//			КонецЦикла;	
	//			Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
	//		КонецЦикла;	
	//		//ОбновитьФлажки(СтрокаРейсГруппа);
	//	КонецЕсли;		
	//КонецЦикла;
	
	//снимаем отметки
	//+Закомментировано 27.01.2021 по письму из скайпа
	//Ошибка вышла после ручного перекидывания заказов на карте из авто в авто.
	//Данная ошибка уже повторялась в прошлых версиях.Пример такой,что при следующем 
	//перекидывании заказов или просто просмотра информации о нём исчезают все заказы с карты выбранной авто. 

	//Для Каждого ЭлементПоиска Из МассивРейсовСПометками Цикл
	//	Стр = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементПоиска.Ключ);	
	//	Если НЕ Стр = Неопределено Тогда
	//		Стр.Отметка = 0;
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого ЭлементПоиска Из МассивПолигоновСПометками Цикл
	//	Стр = ДеревоПолигоновСзаказами.НайтиПоИдентификатору(ЭлементПоиска.Ключ);	
	//	Если НЕ Стр = Неопределено Тогда
	//		Стр.Отметка = 0;
	//	КонецЕсли;
	//КонецЦикла;
	//-Закомментировано 27.01.2021 по письму из скайпа
	
	//Широков 22.03.2021 по письму закомментировал
	//МассивРейсовСПометками.Очистить();
	//МассивПолигоновСПометками.Очистить();
	//Широков 22.03.2021 по письму закомментировал
	
КонецПроцедуры // ()
//Широков 16.11.2020


&НаКлиенте
Процедура ДобавитьЗаказыВДеревоРейсовВыборПунктаКонтекстногоМенюПолигонов_Рейсы(МассивЗаказов, КодТранспорта, МассивИдентификаторовРейсовДляПересчета)
	
	//найдём новый рейс
	НовыйРодитель = Неопределено;
	
	МассивЭлементовДереваНаУдаление = новый Массив;
	МассивГруппДереваНаПересчет = Новый Массив;
	//	Для каждого ЭлементМассива Из МассивИдентификаторовРейсовДляПересчета Цикл
	Для каждого СтрокаРейс Из ДеревоРейсовСзаказами.ПолучитьЭлементы() Цикл
		//СтрокаРейс = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива);
		//Если НЕ СтрокаРейс = Неопределено Тогда
		Если СокрЛП(СтрокаРейс.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
			НовыйРодитель = СтрокаРейс;
			Прервать;
		КонецЕсли; 
		//КонецЕсли; 
	КонецЦикла;
	
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(НовыйРодитель.ПолучитьИдентификатор());
		Если ЭлементМассивЭлементовДерева = Неопределено Тогда
			МассивЭлементовДереваНаУдаление.Добавить(НовыйРодитель.ПолучитьИдентификатор());
		КонецЕсли;
		
		//добавим новую строку
		ЭлементДереваПолигонов = Неопределено;
		
		//		Для Каждого ЭлементМассива Из МассивРейсовСПометками Цикл
		
		//+Широков по письму 24.03.2021
		Для Каждого ЭлементМассива Из МассивПолигоновСПометками Цикл
		//Для Каждого ЭлементМассива Из МассивПолигоновВыделенныеСтроки Цикл
		//-Широков по письму 24.03.2021
			Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);	
			//Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);	
			Если НЕ Стр = Неопределено Тогда
				
				
МассивПолигоновСПометками.Удалить(ЭлементМассива.Ключ); //Широков 22.03.2021 по письму
				
				//Широков 01.10.2020
				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					Стр.ПолучитьРодителя().Отметка = 0;
				КонецЕсли;
				//Стр.ПолучитьРодителя().Отметка = 0;
				Стр.Отметка = 0;
				////////Если НЕ МассивЗаказов.Найти(ЭлементМассива.Значение.НомерЗаказа) = Неопределено Тогда
				
				Если НЕ Стр = Неопределено Тогда
					ЭлементМассивЭлементовДерева = МассивЭлементовДереваНаУдаление.Найти(Стр.ПолучитьИдентификатор());
					Если ЭлементМассивЭлементовДерева = Неопределено Тогда
						МассивЭлементовДереваНаУдаление.Добавить(Стр.ПолучитьИдентификатор());
					КонецЕсли;
					
					СтарыйРодитель =  Стр.ПолучитьРодителя();
					Если НЕ СтарыйРодитель = Неопределено Тогда
						ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						Если ЭлементМассивЭлементовДерева = Неопределено Тогда
							МассивГруппДереваНаПересчет.Добавить(Стр.ПолучитьРодителя().ПолучитьИдентификатор());
						КонецЕсли;
					КонецЕсли;
					
					ЭлементМассивЭлементовДерева = МассивГруппДереваНаПересчет.Найти(НовыйРодитель.ПолучитьИдентификатор());
					Если ЭлементМассивЭлементовДерева = Неопределено Тогда
						МассивГруппДереваНаПересчет.Добавить(НовыйРодитель.ПолучитьИдентификатор());
					КонецЕсли;
					
					НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
					//Стр.ПолучитьРодителя().Отметка = 0;
					ЗаполнитьЗначенияСвойств(НС, Стр);
					НС.ИндивидуальнаяМаршрутизация = Истина;
					НС.Отметка 		= 0;
					НС.ДокументПроверен = Ложь;
				КонецЕсли;
				////////КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		//МассивРейсовСПометками.Очистить();
		
		//Удаляем обработанные заказы
		//дерево полигонов
		Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
			Стр = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ Стр = Неопределено Тогда
				Если Стр.ПолучитьРодителя() = Неопределено Тогда
					//Если ДеревоРейсовСЗаказами.ПолучитьЭлементы().Количество() = 0 Тогда
					Если Стр.ПолучитьЭлементы().Количество() = 0 Тогда
						ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(Стр);
					КонецЕсли;
				Иначе
					РодительСТР = Стр.ПолучитьРодителя();
					
					Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
					
					Если РодительСТР.ПолучитьЭлементы().Количество() = 0 Тогда
						ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(РодительСТР);
						//ДеревоРейсовСЗаказами.Удалить(РодительСТР);
						//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(РодительСТР.ПолучитьИдентификатор());
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//Пересчитаем группы
		ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
		Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
			СтрокаРейсГруппа = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ СтрокаРейсГруппа = Неопределено Тогда
				Выполнить("СтрокаРейсГруппа.Итого = 0");
				
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
					Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
						Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
					Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
				КонецЦикла;	
			КонецЕсли;		
		КонецЦикла;
		
		//дерево рейсов
		Для Каждого ЭлементМассива ИЗ МассивЭлементовДереваНаУдаление Цикл
			Стр = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ Стр = Неопределено Тогда
				Если НЕ Стр.ПолучитьРодителя() = Неопределено Тогда
					Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
				КонецЕсли;
			КонецЕсли;
			
			//Если Стр.ПолучитьРодителя() = Неопределено Тогда
			//	Если ДеревоРейсовСЗаказами.ПолучитьЭлементы().Количество() = 0 Тогда
			//		ДеревоРейсовСЗаказами.ПолучитьЭлементы().Удалить(Стр);
			//	КонецЕсли;
			//Иначе
			//	Стр.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Стр);
			//КонецЕсли;
			
		КонецЦикла;
		//Пересчитаем группы
		//таблица уже есть
		//ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();     //Широков 29.03.2021
		Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
			СтрокаРейсГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ СтрокаРейсГруппа = Неопределено Тогда
				Выполнить("СтрокаРейсГруппа.Итого = 0");
				
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
					Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
						Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
					Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
				КонецЦикла;	
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;	
	
	//Широков 23.10.2020
//Широков 22.03.2021 по письму закомментировал
//МассивРейсовСПометками.Очистить();
//МассивПолигоновСПометками.Очистить();
//Широков 22.03.2021 по письму закомментировал
	
КонецПроцедуры // ()


&НаКлиенте
Процедура ДобавитьЗаказыВДеревоЗаказов(МассивЗначений2, КодТранспорта)
	
	ДеревоИсточник = ДеревоРейсовСЗаказами;
	
	Для каждого СтрокаЗаказ Из МассивЗначений2 Цикл
		СтруктураЗаказа = Новый Структура;
		СтруктураЗаказа.Вставить("Заказ", СтрокаЗаказ);
		ДобавитьВДеревоЗаказов(КодТранспорта, СтруктураЗаказа);
	КонецЦикла;
КонецПроцедуры // ()


&НаКлиенте
Процедура ДобавитьЗаказыВДеревоЗаказовУдалениеМаршрутизации(МассивЗначений2, КодТранспорта)
	
	ДеревоИсточник = ДеревоРейсовСЗаказами;
	
	Для каждого СтрокаЗаказ Из МассивЗначений2 Цикл
		//Струк.Вставить("Заказ", ЭлементМассивЗначений.Заказ);
		//Струк.Вставить("НашИдентификаторГруппы", ЭлементМассивЗначений.НашИдентификаторГруппы);
		//СтруктураЗаказа = Новый Структура;
		//СтруктураЗаказа.Вставить("Заказ", СтрокаЗаказ);
		ДобавитьВДеревоЗаказовУдалениеМаршрутизации(КодТранспорта, СтрокаЗаказ);
	КонецЦикла;
КонецПроцедуры // ()

&НаКлиенте
Процедура ПересчитатьДеревоРейсов(МассивЗаказов, КодТранспорта = Неопределено, ИмяРеквизитаДерева, МассивИдентификаторов)
	
	ДеревоИсточник = ДеревоРейсовСЗаказами;
	Для Каждого ГруппаДерева Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
		Если СокрЛП(ГруппаДерева.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
			ПересчитатьСтрокуДерева(ГруппаДерева.ПолучитьИдентификатор(), ИмяРеквизитаДерева, ИмяРеквизитаДерева);
			ОбновитьФлажки(ГруппаДерева);
		КонецЕсли;
	КонецЦикла;
	//ПересчитатьСтрокуДерева(Родитель, ИмяРеквизитаДерева);
	Если НЕ МассивИдентификаторов = Неопределено Тогда
		Для Каждого ЭлементМассивИдентификаторов Из МассивИдентификаторов Цикл
			Родитель = ДеревоИсточник.НайтиПоИдентификатору(ЭлементМассивИдентификаторов);	
			Если НЕ Родитель = Неопределено Тогда
				ПересчитатьСтрокуДерева(Родитель.ПолучитьИдентификатор(), ИмяРеквизитаДерева, ИмяРеквизитаДерева);
				ОбновитьФлажки(Родитель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьФлажки(Родитель);
	
	//удалим пустые полигоны
	МассивУдаляемыхПолигонов = Новый Массив;
	
	Если ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда
		
		Для каждого СтрокаПолигонов Из ДеревоИсточник.ПолучитьЭлементы() Цикл
			
			Если СтрокаПолигонов.ПолучитьЭлементы().Количество() = 0 Тогда
				МассивУдаляемыхПолигонов.Добавить(СтрокаПолигонов);	
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для каждого УдаляемыйПолигон Из МассивУдаляемыхПолигонов Цикл
			ДеревоИсточник.ПолучитьЭлементы().Удалить(УдаляемыйПолигон);	
		КонецЦикла; 
		
	КонецЕсли;
	
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ПересчитатьДеревоПолигонов(МассивЗаказов, КодТранспорта = Неопределено, ИмяРеквизитаДерева, МассивИдентификаторов)
	
	//Если ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда
	ДеревоИсточник = ДеревоПолигоновСЗаказами;
	//ИначеЕсли ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
	//	ДеревоИсточник = ДеревоРейсовСЗаказами;
	//КонецЕсли; 
	
	
	//Широков по письму
	//ПересчитатьСтрокуДерева(Родитель, ИмяРеквизитаДерева);
	Если НЕ МассивИдентификаторов = Неопределено Тогда
		Для Каждого ЭлементМассивИдентификаторов Из МассивИдентификаторов Цикл
			Родитель = ДеревоИсточник.НайтиПоИдентификатору(ЭлементМассивИдентификаторов);	
			Если НЕ Родитель = Неопределено Тогда
				ПересчитатьСтрокуДерева(Родитель.ПолучитьИдентификатор(), ИмяРеквизитаДерева, ИмяРеквизитаДерева);
				
				ПодчиненныйЭлемент = Неопределено;
				Для Каждого ПодчиненныйЭлемент Из Родитель.ПолучитьЭлементы() Цикл
				КонецЦикла;
				Если НЕ ПодчиненныйЭлемент = Неопределено Тогда
					ОбновитьФлажки(ПодчиненныйЭлемент);
				КонецЕсли;
				
				//ОбновитьФлажки(Родитель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	//Если НЕ Родитель = Неопределено Тогда
	//	ПересчитатьСтрокуДерева(Родитель.ПолучитьИдентификатор(), ИмяРеквизитаДерева, ИмяРеквизитаДерева);
	//Иначе
	//	Для Каждого ГруппаДерева Из ДеревоИсточник.ПолучитьЭлементы() Цикл
	//		Для Каждого ЭлементГруппаДерева Из ГруппаДерева.ПолучитьЭлементы() Цикл
	//			Если СокрЛП(ЭлементГруппаДерева.НомерЗаказа) = СокрЛП(СтрокаЗаказ.НомерЗаказа) Тогда
	//				Родитель = ГруппаДерева;
	//			КонецЕсли;
	//		КонецЦикла;
	//		Если НЕ Родитель = Неопределено Тогда
	//			ПересчитатьСтрокуДерева(Родитель.ПолучитьИдентификатор(), ИмяРеквизитаДерева, ИмяРеквизитаДерева);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//Широков  по письму
	
	//ОбновитьФлажки(Родитель);
	
	//КонецЦикла;
	
	//удалим пустые полигоны
	МассивУдаляемыхПолигонов = Новый Массив;
	
	Если ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда
		
		Для каждого СтрокаПолигонов Из ДеревоИсточник.ПолучитьЭлементы() Цикл
			
			Если СтрокаПолигонов.ПолучитьЭлементы().Количество() = 0 Тогда
				МассивУдаляемыхПолигонов.Добавить(СтрокаПолигонов);	
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для каждого УдаляемыйПолигон Из МассивУдаляемыхПолигонов Цикл
			ДеревоИсточник.ПолучитьЭлементы().Удалить(УдаляемыйПолигон);	
		КонецЦикла; 
		
	КонецЕсли;
	
	//итоги
	//РассчитатьИтоговоеКоличествоЗаказов();
	
КонецПроцедуры // ()

&НаСервере
Процедура ДобавитьВДеревоРейсовСервер(КодТранспорта, СтрокаЗаказ)
	//найдём новый рейс
	НовыйРодитель = Неопределено;	
	Для каждого СтрокаРейс Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
		Если СтрокаРейс.ТранспортКод = КодТранспорта Тогда
			НовыйРодитель = СтрокаРейс;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		
		//добавим новую строку
		НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
		
		//Широков
		//			ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
		ЭлементДереваПолигонов = НайтиЗаказВДереве(СтрокаЗаказ);
		//			ЗаполнитьЗначенияСвойств(НС, СтрокаЗаказ);
		ЗаполнитьЗначенияСвойств(НС, ЭлементДереваПолигонов);
		
		
		НС.Отметка 		= 0;
		НС.ДокументПроверен = Ложь;
		НС.ИндивидуальнаяМаршрутизация = Ложь;
		
		//Широков  по письму
		//ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами");
		Если НЕ НовыйРодитель = Неопределено Тогда
			ПересчитатьСтрокуДерева(НовыйРодитель.ПолучитьИдентификатор(), "ДеревоРейсовСЗаказами");
		КонецЕсли;
		//Широков  по письму
		
		////////////ОбновитьФлажки(НС);
		//НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
		//
		//ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
		//
		//Если НЕ ЭлементДЗ = Неопределено Тогда //Широков по письму 
		//	
		//	ЗаполнитьЗначенияСвойств(НС, ЭлементДЗ);
		//	
		//КонецЕсли; //Широков по письму
		//
		//НС.Отметка 		= 0;
		//НС.ДокументПроверен = Ложь;
		//НС.ИндивидуальнаяМаршрутизация = Ложь;
		//
		//ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами");
		//
		//ОбновитьФлажки(НС);
		
	КонецЕсли;	
	
КонецПроцедуры

//Широков по письму
&НаКлиенте
Процедура ДобавитьВДеревоРейсов(КодТранспорта, СтрокаЗаказ)
	//найдём новый рейс
	НовыйРодитель = Неопределено;
	//НашаГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(СтрокаЗаказ.НашИдентификаторГруппы);
	Для каждого СтрокаРейс Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
		Если СокрЛП(СтрокаРейс.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
			НовыйРодитель = СтрокаРейс;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		
		//добавим новую строку
		НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
		
		//Широков по письму
		//			ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
		//ЭлементДереваПолигонов = НайтиЗаказВДереве(СтрокаЗаказ);
		
		
		
		ЭлементДереваПолигонов = Неопределено;
		Для Каждого ГруппаЗаказа Из ДеревоПолигоновСЗаказами.ПолучитьЭлементы() Цикл
			//Для Каждого ГруппаЗаказа Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
			Для Каждого Стр Из ГруппаЗаказа.ПолучитьЭлементы() Цикл
				Если ПолучитьНомерДокумента(Стр.ЗаказСсылка) = СтрокаЗаказ.Заказ Тогда
					ЭлементДереваПолигонов = Стр;
					ГруппаЗаказа.Отметка = 0;
					//ОбновитьФлажки(Стр);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если НЕ ЭлементДереваПолигонов = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если НЕ ЭлементДереваПолигонов = Неопределено Тогда
			//	ЭлементДереваПолигонов = 
			//Иначе
			
			//ЗаполнитьЗначенияСвойств(НС, СтрокаЗаказ);
			ЗаполнитьЗначенияСвойств(НС, ЭлементДереваПолигонов);
			НС.ИндивидуальнаяМаршрутизация = Истина;
			
		КонецЕсли;
		
		
		НС.Отметка = 0;
		НС.ДокументПроверен = Ложь;
		//НС.ИндивидуальнаяМаршрутизация = Ложь;
		
		//Широков
		//		ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами");
		Если НЕ НовыйРодитель = Неопределено Тогда
			//ПересчитатьСтрокуДерева(НовыйРодитель.ПолучитьИдентификатор(), "ДеревоРейсовСЗаказами");
		КонецЕсли;
		//Широков
		
		////////////ОбновитьФлажки(НС);
		//НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
		//
		//ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
		//
		//Если НЕ ЭлементДЗ = Неопределено Тогда //Широков по письму 
		//	
		//	ЗаполнитьЗначенияСвойств(НС, ЭлементДЗ);
		//	
		//КонецЕсли; //Широков по письму
		//
		//НС.Отметка 		= 0;
		//НС.ДокументПроверен = Ложь;
		//НС.ИндивидуальнаяМаршрутизация = Ложь;
		//
		//ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами");
		//
		//ОбновитьФлажки(НС);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДеревоЗаказов(КодТранспорта, СтрокаЗаказ)
	//найдём новый рейс
	НовыйРодитель = Неопределено;
	//НашаГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(СтрокаЗаказ.НашИдентификаторГруппы);
	Для каждого СтрокаРейс Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
		Если СокрЛП(СтрокаРейс.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
			НовыйРодитель = СтрокаРейс;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		
		//добавим новую строку
		НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
		
		//Широков
		//			ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
		//ЭлементДереваПолигонов = НайтиЗаказВДереве(СтрокаЗаказ);
		
		
		
		ЭлементДереваПолигонов = Неопределено;
		//		Для Каждого ГруппаЗаказа Из ДеревоПолигоновСЗаказами.ПолучитьЭлементы() Цикл
		Для Каждого ГруппаЗаказа Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
			Для Каждого Стр Из ГруппаЗаказа.ПолучитьЭлементы() Цикл
				//				Если ПолучитьНомерДокумента(Стр.ЗаказСсылка) = ПолучитьНомерДокумента(СтрокаЗаказ.Заказ.Заказ) Тогда
				Если Стр.ЗаказСсылка = СтрокаЗаказ.Заказ.Заказ Тогда
					ЭлементДереваПолигонов = Стр;
					ГруппаЗаказа.Отметка = 0;
					//ОбновитьФлажки(Стр);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если НЕ ЭлементДереваПолигонов = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если НЕ ЭлементДереваПолигонов = Неопределено Тогда
			//	ЭлементДереваПолигонов = 
			//Иначе
			
			//			ЗаполнитьЗначенияСвойств(НС, СтрокаЗаказ);
			ЗаполнитьЗначенияСвойств(НС, ЭлементДереваПолигонов);
			НС.ИндивидуальнаяМаршрутизация = Истина;
			
		КонецЕсли;
		
		
		НС.Отметка 		= 0;
		НС.ДокументПроверен = Ложь;
		
		//Широков по письму
		//		ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами");
		Если НЕ НовыйРодитель = Неопределено Тогда
			//ПересчитатьСтрокуДерева(НовыйРодитель.ПолучитьИдентификатор(), "ДеревоРейсовСЗаказами");
		КонецЕсли;
		//Широков по письму
		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДеревоЗаказовУдалениеМаршрутизации(КодТранспорта, СтрокаЗаказ)
	//Струк.Вставить("Заказ", ЭлементМассивЗначений.Заказ);
	//Струк.Вставить("НашИдентификаторГруппы", ЭлементМассивЗначений.НашИдентификаторГруппы);
	//найдём новый рейс
	НовыйРодитель = Неопределено;	
	НашаГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(СтрокаЗаказ.НашИдентификаторГруппы);
	
	//	Для каждого СтрокаРейс Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
	////	Для каждого СтрокаРейс Из НашаГруппа.ПолучитьЭлементы() Цикл
	//////		Если ПолучитьНомерДокумента(СтрокаРейс.ЗаказСсылка) = СтрокаЗаказ.Заказ Тогда
	////		Если СокрЛП(СтрокаРейс.НомерЗаказа) = СокрЛП(СтрокаЗаказ.Заказ) Тогда
	////			ЭлементДереваПолигонов = СтрокаРейс;
	////			//НовыйРодитель = СтрокаРейс.ПолигонМаршрутизации;
	////			СтрокаРейс.Отметка = 0;
	////			//ОбновитьФлажки(Стр);
	////			Прервать;
	////		КонецЕсли;
	////		//Если СокрЛП(СтрокаРейс.ТранспортКод) = СокрЛП(КодТранспорта) Тогда
	////		//	НовыйРодитель = СтрокаРейс;
	////		//	Прервать;
	////		//КонецЕсли; 
	////	КонецЦикла;
	
	
	НовыйРодитель = Неопределено;
	Для Каждого ГруппаЗаказа Из ДеревоПолигоновСЗаказами.ПолучитьЭлементы() Цикл
		//Если ПолучитьНомерДокумента(ГруппаЗаказа.ПолигонМаршрутизации) = СтрокаЗаказ.ПолигонМаршрутизации Тогда
		Если ГруппаЗаказа.ПолигонМаршрутизации = СтрокаЗаказ.ПолигонМаршрутизации Тогда
			НовыйРодитель = ГруппаЗаказа;
			//ГруппаЗаказа.Отметка = 0;
			//ОбновитьФлажки(Стр);
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	
	Если НЕ НовыйРодитель = Неопределено Тогда
		
		//добавим новую строку
		НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
		
		//Широков
		//ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
		//ЭлементДереваПолигонов = НайтиЗаказВДереве(СтрокаЗаказ);
		
		
		
		ЭлементДереваПолигонов = Неопределено;
		Для Каждого ГруппаЗаказа Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
			Для Каждого Стр Из ГруппаЗаказа.ПолучитьЭлементы() Цикл
				//Если ПолучитьНомерДокумента(Стр.ЗаказСсылка) = СтрокаЗаказ.Заказ Тогда
				Если Стр.ЗаказСсылка = СтрокаЗаказ.Заказ Тогда
					ЭлементДереваПолигонов = Стр;
					ГруппаЗаказа.Отметка = 0;
					Стр.Отметка = 0;
					//ОбновитьФлажки(Стр);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если НЕ ЭлементДереваПолигонов = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если НЕ ЭлементДереваПолигонов = Неопределено Тогда
			//ЭлементДереваПолигонов = 
			//Иначе
			
			//ЗаполнитьЗначенияСвойств(НС, СтрокаЗаказ);
			ЗаполнитьЗначенияСвойств(НС, ЭлементДереваПолигонов);
			////НС.ИндивидуальнаяМаршрутизация = Истина;
			
		КонецЕсли;
		
		
		НС.Отметка 		= 0;
		
		//Широков по письму
		//ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами");
		Если НЕ НовыйРодитель = Неопределено Тогда
			//ПересчитатьСтрокуДерева(НовыйРодитель.ПолучитьИдентификатор(), "ДеревоРейсовСЗаказами");
		КонецЕсли;
		//Широков по письму
		
		////////////ОбновитьФлажки(НС);
		//НС = НовыйРодитель.ПолучитьЭлементы().Добавить();
		//
		//ЗаполнитьЗначенияСвойств(НС, НовыйРодитель);
		//
		//Если НЕ ЭлементДЗ = Неопределено Тогда //Широков по письму 
		//	
		//	ЗаполнитьЗначенияСвойств(НС, ЭлементДЗ);
		//	
		//КонецЕсли; //Широков по письму
		//
		//НС.Отметка 		= 0;
		//НС.ДокументПроверен = Ложь;
		//НС.ИндивидуальнаяМаршрутизация = Ложь;
		//
		//ПересчитатьСтрокуДерева(НовыйРодитель, "ДеревоРейсовСЗаказами");
		//
		//ОбновитьФлажки(НС);
		
	КонецЕсли;	
	
КонецПроцедуры
//Широков по письму

&НаСервере
Функция НайтиЗаказВДереве(СтрокаЗаказ)
	Дерево = ДанныеФормыВЗначение(ДеревоПолигоновСЗаказами, Тип("ДеревоЗначений"));
	Струк = Новый Структура;
	Струк.Вставить("ЗаказСсылка", СтрокаЗаказ.Заказ);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
	Для Каждого Стр Из НайденныеСтроки Цикл
		РезультатПоиска = Стр;
	КонецЦикла;	
	
	Возврат РезультатПоиска;
КонецФункции
//Широков  по письму

//&НаКлиенте
&НаСервере
Процедура ПересчитатьСтрокуДерева(СтрокаДереваИдентификатор, ИмяРеквизита, ИмяРеквизитаДерева = Неопределено)
	
	//+Широков по письму
	СтрокаДерева = Неопределено;
	Если НЕ ИмяРеквизитаДерева = Неопределено Тогда
		Если ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда
			ДеревоИсточник = ДеревоПолигоновСЗаказами;
		ИначеЕсли ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
			ДеревоИсточник = ДеревоРейсовСЗаказами;
		КонецЕсли; 
		
		СтрокаДерева = ДеревоИсточник.НайтиПоИдентификатору(СтрокаДереваИдентификатор);
	КонецЕсли;
	
	Если НЕ СтрокаДерева = Неопределено Тогда
		//-Широков по письму
		Если ИмяРеквизита = "ДеревоПолигоновСЗаказами" Тогда
			СписокКолонок = СписокКолонокДереваПолигонов;	
		ИначеЕсли ИмяРеквизита = "ДеревоРейсовСЗаказами" Тогда		
			СписокКолонок = СписокКолонокДереваРейсов;
		КонецЕсли; 
		
		Для каждого СтрокаСписка Из СписокКолонок Цикл
			ИмяКолонки = СтрокаСписка.Значение;
			
			////+Широков по письму
			//Если НЕ СтрокаДерева = Неопределено Тогда
			//	//-Широков по письму
			СтрокаДерева[ИмяКолонки] = 0;
			
			//Широков  по письму
			//ПараметрВычитания = 0;
			//Широков  по письму
			
			ПодчиненныйЭлемент = Неопределено;
			Для каждого ПодчиненныйЭлемент Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				//				Если ТипЗнч(ПодчиненныйЭлемент[ИмяКолонки]) = Тип("Число") Тогда
				Если ТипЗнч(ПодчиненныйЭлемент[ИмяКолонки]) = Тип("Число") И ПодчиненныйЭлемент[ИмяКолонки]>0 Тогда  //Широков по письму
					
					Если   ПодчиненныйЭлемент.ПолучитьЭлементы().Количество()=0 Тогда
						
						СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ПодчиненныйЭлемент[ИмяКолонки];						
						
						//Широков  по письму
						//ПараметрВычитания = ПодчиненныйЭлемент[ИмяКолонки];
						//Широков  по письму
						
						
						
					КонецЕсли; //Широков по письму
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			//Если НЕ ПодчиненныйЭлемент = Неопределено Тогда
			//	ОбновитьФлажки(ПодчиненныйЭлемент);
			//КонецЕсли;
			
			
			
			//Широков по письму
			//СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] - ПараметрВычитания;						
			//Широков по письму
			
			//	//+Широков по письму
			//КонецЕсли; 
			////-Широков по письму
			
		КонецЦикла; 	
		//+Широков по письму
	КонецЕсли; 
	//-Широков по письму
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ОбновитьФлажки(ЭлементКоллекции)
	//+Широков по письму
	Если НЕ ЭлементКоллекции = Неопределено Тогда
		//-Широков по письму
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
		
		Пока Родитель <> Неопределено Цикл
			
			Родитель.Отметка = ?(УстановленоДляВсех(ЭлементКоллекции),
			ЭлементКоллекции.Отметка, 2);
			
			ЭлементКоллекции = Родитель;
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
			
		КонецЦикла;	
		
		Если Родитель = Неопределено  Тогда
			
			//ЭлементКоллекции.Отметка = 0;
			
			//Для каждого ПодчиненныйЭлемент Из ЭлементКоллекции.ПолучитьЭлементы() Цикл
			//	Если ПодчиненныйЭлемент.Отметка > 0 Тогда
			//		ЭлементКоллекции.Отметка = 2;
			//		Прервать;
			//	КонецЕсли; 	
			//КонецЦикла; 			
			
			//УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Отметка);
			
		КонецЕсли; 
		
		//+Широков по письму
	КонецЕсли
	//-Широков по письму
КонецПроцедуры // () 

&НаКлиенте
Процедура СтрокаНомераЗаказовПриИзменении(Элемент)
	
	Для каждого Параграф Из НомераЗаказовСтрока.Элементы Цикл
		
		Параграф.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		Для каждого ТекстПараграфа Из Параграф.Элементы Цикл
			
			ТекстПараграфа.Текст = СокрЛП(ТекстПараграфа.Текст);
			
			ТекстПараграфа.ЦветФона = Новый Цвет();				
			
			ТекстПараграфа.Шрифт = Новый Шрифт;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НомераЗаказовПроверить(Команда)
	//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	МассивЗаказов = ОтметитьЗаказыНаСервере(ДанныеЗаказовЗаборов); 		
	
	ПересчитатьДерево(МассивЗаказов, Неопределено, НомераЗаказовДерево);
	
КонецПроцедуры
//+Степанов Задача № 3863 Добавлена передача данных документов через параметр 
&НаСервере
Функция ОтметитьЗаказыНаСервере(ДанныеДокументов)
	
	Дерево = РеквизитФормыВЗначение(НомераЗаказовДерево, Тип("ДеревоЗначений"));
	
	//дерево еще не сформировалось в фоне
	Если Дерево.Колонки.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецеСли;	
	
	Для каждого Параграф Из НомераЗаказовСтрока.Элементы Цикл
		
		Для каждого ТекстПараграфа Из Параграф.Элементы Цикл
			
			ТекстПараграфа.Текст = СокрЛП(ТекстПараграфа.Текст);
			
			ТекстПараграфа.ЦветФона = Новый Цвет();				
			
			Если НЕ ЗначениеЗаполнено( ТекстПараграфа.Текст) Тогда
				Продолжить;
			КонецеСли;	
			
			НомерЗаказа = ?(НомераЗаказовВид = 1, ТекстПараграфа.Текст, ПолучитьВнутреннийНомерЗаказа(ТекстПараграфа.Текст));
			
			//Если НомераЗаказовДерево = "ДеревоРейсовСЗаказами" И НомерЗаказа <> Неопределено Тогда								
			//КонецЕсли; 
			
			НайденныеСтроки = ПолучитьНайденныеСтроки(НомерЗаказа, Дерево); 
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Пока СтрДлина(НомерЗаказа) < 11 Цикл
					НомерЗаказа = НомерЗаказа + " ";
				КонецЦикла; 
				
				НайденныеСтроки = ПолучитьНайденныеСтроки(НомерЗаказа, Дерево); 
			КонецЕсли; 
			
			Для Каждого Тек Из НайденныеСтроки Цикл
				
				Если Тек.Родитель = Неопределено Тогда
					Продолжить;
				КонецеСли;	
				
				Тек.Отметка = 1;
				ТекстПараграфа.ЦветФона = Новый Цвет(124,252,0);
				
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЦикла;		
	
	ЗначениеВРеквизитФормы(Дерево, НомераЗаказовДерево);
	//+Степанов Задача № 3863 Добавлена передача данных документов через параметр
	//Широков по письму
	//МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева(НомераЗаказовДерево,,ДанныеДокументов);
	МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДереваСервер(НомераЗаказовДерево,,ДанныеДокументов);
	//Широков по письму
	
	Возврат ?(МассивЗначений = Неопределено, Новый Массив, МассивЗначений);
	
КонецФункции // ()

&НаСервере
Функция ПолучитьВнутреннийНомерЗаказа(ВнешнийНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	1 КАК ТипЗаказа,
	|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
	|	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК КонтрагентНаименование,
	|	новаМестнаяДоставка.ВремяПрибытияС КАК ВремяПрибытияС,
	|	новаМестнаяДоставка.ВремяПрибытияПо КАК ВремяПрибытияПо,
	|	РеализацияТоваровУслуг.ОбщийВес КАК ВесогабаритныйПоказатель
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа = &НомерВнешнегоЗаказа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаборТовара.Ссылка,
	|	2,
	|	ЗаборТовара.Номер,
	|	ЗаборТовара.НомерВнешнегоЗаказа,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Наименование,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
	|	ЗаборТовара.Контрагент.Наименование,
	|	ЗаборТовара.ВремяДоставкиС,
	|	ЗаборТовара.ВремяДоставкиПо,
	|	ЗаборТовара.ОбъемЗабора
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.НомерВнешнегоЗаказа = &НомерВнешнегоЗаказа";
	
	Запрос.УстановитьПараметр("НомерВнешнегоЗаказа", ВнешнийНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат	Выборка.НомерЗаказа;
	КонецЦикла; 
	
	Возврат Неопределено;	
	
КонецФункции // ()

&НаСервере
Функция ПолучитьНайденныеСтроки(НомерЗаказа, Дерево)
	
	Струк = Новый Структура;
	Струк.Вставить("НомерЗаказа", НомерЗаказа);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
	
	Возврат НайденныеСтроки;
	
КонецФункции // ()

&НаКлиенте
Процедура ИзменитьЗаголовокГруппыПолигонов()
	
	ЕстьОтбор = Ложь;
	
	Для каждого СтрокаТЗ Из ГруппыПолигонов Цикл
		Если СтрокаТЗ.Отметка Тогда
			ЕстьОтбор = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 	
	
	Элементы.ГруппаГруппыПолигонов.Заголовок = ?(ЕстьОтбор, "Отбор по группам полигонов (ВКЛЮЧЕН ОТБОР)", "Отбор по группам полигонов");
	Элементы.ГруппаГруппыПолигонов.ШрифтЗаголовка = ?(ЕстьОтбор, Новый Шрифт(,,Истина), Новый Шрифт());
	
КонецПроцедуры // ()

&НаСервере
Процедура СохранениеНастроекПользователяГруппыПолигонов()
	
	//CeHbKA #3377 20.08.2019
	Структура = Новый Структура;
	Структура.Вставить("ГруппыПолигонов", ГруппыПолигонов.Выгрузить());
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	ХранилищеСистемныхНастроек.Сохранить("ПМ", ""+ПользовательИБ.УникальныйИдентификатор, Структура);
	
КонецПроцедуры

//CeHbKA

//CeHbKA #3419 	29.08.2019
&НаСервере
Процедура ЗаполнитьТаблицуПолигоновИКоординат(МассивПолигонов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПолигоныМаршрутизацииТочкиПолигона.Ссылка КАК Полигон,
	|	ПолигоныМаршрутизацииТочкиПолигона.Широта КАК Широта,
	|	ПолигоныМаршрутизацииТочкиПолигона.Долгота КАК Долгота
	|ИЗ
	|	Справочник.ПолигоныМаршрутизации.ТочкиПолигона КАК ПолигоныМаршрутизацииТочкиПолигона
	|ГДЕ
	|	ПолигоныМаршрутизацииТочкиПолигона.Ссылка В(&СписокПолигонов)
	|	И ПолигоныМаршрутизацииТочкиПолигона.НомерСтроки = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолигоныМаршрутизацииТочкиПолигона.НомерСтроки";
	
	Запрос.УстановитьПараметр("СписокПолигонов", МассивПолигонов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПолигоновИКоординат.Загрузить(РезультатЗапроса.Выгрузить());		
	
КонецПроцедуры 
//CeHbKA #3419 	29.08.2019


&НаКлиенте
Процедура ЗавершениеРейсов(Команда)
	ОткрытьФорму("Обработка.ЗавершениеРейсовМестнойДоставкиТонкийКлиент.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоНепривязаннымАдресам(Команда)
	ЭлементыДерева = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Или ЭлементыДерева[0].ПолигонМаршрутизации <> "" Тогда
		ПоказатьПредупреждение(,"Нет непривязанных заказов.");
	Иначе	
		ПараметрыОткрытия = Новый Структура("АдресДереваПолигонов,ДатаПланирования",АдресДереваПолигонов,ДатаПланирования);
		ОткрытьФорму("Обработка.ПолигональныйМаршрутизатор.Форма.ФормаОтчетаПоНепривязаннымАдресам",ПараметрыОткрытия);	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ГруппыПолигоновПриИзменении(Элемент)
	ИзменитьЗаголовокГруппыПолигонов();
КонецПроцедуры

//+Степанов Задача № 3607
Функция ПолучитьКоординатыДляПривязки(ОбработкаПоискаАдреса,Адрес)
	ОбработкаПоискаАдреса = Обработки.новаПоискАдреса.Создать();
	ТаблицаАдресов = ОбработкаПоискаАдреса.ПолучитьТаблицуАдресов(Адрес);
	//+Широков по письму
	//	Если ТаблицаАдресов.Количество() Тогда 
	Если ТаблицаАдресов.Количество() > 0 Тогда 
		//-Широков по письму
		Возврат	ТаблицаАдресов[0]
	Иначе
		Возврат Неопределено
	КонецЕсли;	
КонецФункции	
//-Степанов

//CeHbKA #3663 20.11.2019
&НаКлиенте
Процедура РежимВыводаДанных(Команда)
	
	Элементы.ФормаРежимВыводаДанных.Пометка = НЕ Элементы.ФормаРежимВыводаДанных.Пометка;	
	
	ОбновитьДанные();
	
КонецПроцедуры
//CeHbKA #3663 20.11.2019

//+Степанов Подключаемый обработчик события "При нажатии", нужен при использовании WebKit
&НаКлиенте
Процедура Подключаемая_ПолеXTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если Элементы.ПолеXTML.Документ.defaultView.FormEvent <> Неопределено Тогда
		ИмяСобытия = Элементы.ПолеXTML.Документ.defaultView.FormEvent.messageName;
		ПолученныеДанные = Элементы.ПолеXTML.Документ.defaultView.FormEvent.messageData;
		Если ИмяСобытия = "ClickOnPoligon" Тогда
			MapsFrom1C_ClickOnPoligon(ПолученныеДанные);
		ИначеЕсли ИмяСобытия = "OnSelectPoint" Тогда
			MapsFrom1C_OnSelectPoints(ПолученныеДанные);
		ИначеЕсли ИмяСобытия = "OnDeletePointFromMap" Тогда	
			MapsFrom1C_OnDeletePointFromMap(ПолученныеДанные);	
		ИначеЕсли ИмяСобытия = "VenicleMenuCommand " Тогда
			MapsFrom1C_VenicleMenuCommand(ПолученныеДанные);
		ИначеЕсли ИмяСобытия = "CalcRoute" Тогда	
			MapsFrom1C_CalcRoute(ПолученныеДанные);
		ИначеЕсли ИмяСобытия = "VenicleMenuCommand" Тогда	
			MapsFrom1C_VenicleMenuCommand(ПолученныеДанные);
		КонецЕсли;	
	КонецЕсли
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЭтоТестоваяСреда()
	Возврат ПараметрыСеанса.ЭтоТестоваяСреда
КонецФункции	

//+Степанов Задача № 3863
&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаказовЗаборов(ДатаДокументов)
	Зап = Новый Запрос;
	//+Широков 16.07.2021 Задача 4607	
	//-Широков 16.07.2021 Задача 4607	
	Зап.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	1 КАК ТипЗаказа,
	|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
	|	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК КонтрагентНаименование,
	|	новаМестнаяДоставка.ВремяПрибытияС КАК ВремяПрибытияС,
	|	новаМестнаяДоставка.ВремяПрибытияПо КАК ВремяПрибытияПо,
	|	РеализацияТоваровУслуг.ОбщийВес КАК ВесогабаритныйПоказатель
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	//+Широков 23.06.2021 Задача 4607
	|И ДополнительныеПараметрыЗаказа.ВнешнийОператорМаршрутизации.Ссылка ЕСТЬ NULL
	//-Широков 23.06.2021 Задача 4607
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	//|И НЕ РеализацияТоваровУслуг.Ссылка В (&Заказы)
	|
	//Асеев 29.08.2023 (Задача № 5117)>>>
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ КАК Заказ,
	|	1 КАК ТипЗаказа,
	|	СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ.Номер КАК НомерЗаказа,
	|	СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
	|	СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ.ВладелецТовара.Наименование КАК КонтрагентНаименование,
	|	новаМестнаяДоставка.ВремяПрибытияС КАК ВремяПрибытияС,
	|	новаМестнаяДоставка.ВремяПрибытияПо КАК ВремяПрибытияПо,
	|	СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ.ОбщийВес КАК ВесогабаритныйПоказатель
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПредварительногоЗакрытияРейсов.СрезПоследних КАК СтатусыПредварительногоЗакрытияРейсовСрезПоследних
	|		ПО (СтатусыПредварительногоЗакрытияРейсовСрезПоследних.ДатаДоставкиЗаказа = &ДатаНачала)
	|			И (СтатусыПредварительногоЗакрытияРейсовСрезПоследних.СтатусПредварительногоЗакрытияРейса = ЗНАЧЕНИЕ(Перечисление.СтатусыПредварительногоЗакрытияРейсов.РейсЗакрытПредварительно))
	|			И ДополнительныеПараметрыЗаказа.Заказ = СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ
	|			И (ДополнительныеПараметрыЗаказа.ВнешнийОператорМаршрутизации = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
	//Асеев 29.08.2023 (Задача № 5117)<<<
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаборТовара.Ссылка,
	|	2,
	|	ЗаборТовара.Номер,
	|	ЗаборТовара.НомерВнешнегоЗаказа,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Наименование,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
	|	ЗаборТовара.Контрагент.Наименование,
	|	ЗаборТовара.ВремяДоставкиС,
	|	ЗаборТовара.ВремяДоставкиПо,
	|	ЗаборТовара.ОбъемЗабора
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";

	
	//|И НЕ ЗаборТовара.Ссылка В (&Заказы)";
	//Широков по письму
	//Зап.УстановитьПараметр("ДатаНачала", ДатаДокументов);
	//Зап.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаДокументов));
	Зап.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаДокументов));
	Зап.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаДокументов + 24*3600));
	//Зап.УстановитьПараметр("Заказы", ДанныеДокументов);
	//Широков по письму
	
	Выб = Зап.Выполнить().Выбрать();
	
	ДанныеДокументов = Новый Соответствие;
	
	
	Пока Выб.Следующий() Цикл
		
		Струк = Новый Структура;
		Струк.Вставить("Заказ");
		Струк.Вставить("ТипЗаказа");
		Струк.Вставить("НомерЗаказа");
		Струк.Вставить("НомерЗаказаИМ");
		Струк.Вставить("Адрес");
		Струк.Вставить("Широта");
		Струк.Вставить("Долгота");
		Струк.Вставить("ИдентификаторЗаказа");
		Струк.Вставить("КонтрагентНаименование");
		Струк.Вставить("ВремяПрибытияС");
		Струк.Вставить("ВремяПрибытияПо");
		Струк.Вставить("ВесогабаритныйПоказатель");
		Струк.Вставить("Индекс");
		Струк.Вставить("ИндексРодителя");	
		
		
		ЗаполнитьЗначенияСвойств(Струк, Выб);
		
		Струк.Адрес = СтрЗаменить(Струк.Адрес, "'", "");
		Струк.Адрес = СтрЗаменить(Струк.Адрес, """", "");
		
		Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, "'", "");
		Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, """", "");
		
		
		Струк.ИдентификаторЗаказа = Выб.Заказ.УникальныйИдентификатор();
		//Широков по письму
///		ДанныеДокументов.Вставить(Выб.НомерЗаказа, Струк);
		ДанныеДокументов.Вставить(СокрЛП(Выб.НомерЗаказа), Струк);
		//Широков по письму
	КонецЦикла;	
	
	Возврат ДанныеДокументов;
КонецФункции		

//+Степанов Задача № 3863
&НаСервере
Функция ПоместитьЗаказыВРейс(ПолигоныИКатегории, Рейс)
	МассивОшибок = Новый Массив;
	Забор = Справочники.ЛогистическиеБрейки.НайтиПоКоду("000000011");
	ДеревоПолигонов = РеквизитФормыВЗначение("ДеревоПолигоновСЗаказами");
	ДеревоРейсов = РеквизитФормыВЗначение("ДеревоРейсовСЗаказами");
	
	СтрокаРейса = ДеревоРейсов.Строки.Найти(Рейс);
	
	ДокументПроверен = СтрокаРейса.ДокументПроверен;
	МаршрутизированоЗаказов = 0;
	МаршрутизированоЗаборов = 0;
	Для Каждого Полигон Из ПолигоныИКатегории Цикл
		
		СтрокаПолигона = ДеревоПолигонов.Строки.Найти(Полигон.Ключ);
		Если СтрокаПолигона = Неопределено Тогда
			МассивОшибок.Добавить("Не удалось получить данные полигона " + Строка(Полигон.Ключ));
			Продолжить;
		КонецЕсли;	
		СтрокиЗаказовПолигона = СтрокаПолигона.Строки;		
		Для Каждого Категория Из Полигон.Значение Цикл
			
			
			ПомещаемыеЗаказы = СтрокиЗаказовПолигона.НайтиСтроки(Новый Структура("КатегорияЗаказа", Категория));
			Для Каждого Заказ Из ПомещаемыеЗаказы Цикл
				
				
				НоваяСтрока = СтрокаРейса.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Заказ,,"Отметка");
				НоваяСтрока.ДокументПроверен = ДокументПроверен;
				СтрокиЗаказовПолигона.Удалить(Заказ); 
				Если Категория = Забор Тогда
					МаршрутизированоЗаборов = МаршрутизированоЗаборов + 1;
				Иначе
					МаршрутизированоЗаказов = МаршрутизированоЗаказов + 1;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
		//+Широков по письму
		//Если СтрокиЗаказовПолигона.Количество() Тогда 
		Если СтрокиЗаказовПолигона.Количество() > 0 Тогда 
			//-Широков по письму
			РассчитатьПоказателиСтрокиДерева(СтрокаПолигона);		
		Иначе
			ДеревоПолигонов.Строки.Удалить(СтрокаПолигона);
		КонецЕсли;	
	КонецЦикла;	
	РассчитатьПоказателиСтрокиДерева(СтрокаРейса);
	КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов - МаршрутизированоЗаказов;
	КоличествоНемаршрутизированныхЗаборов = КоличествоНемаршрутизированныхЗаборов - МаршрутизированоЗаборов;
	//Широков по письму
	Если КоличествоНемаршрутизированныхЗаборов < 0 Тогда
		КоличествоНемаршрутизированныхЗаборов = 0;
	КонецЕсли;
	//Широков по письму
	
	ЗаказовВРейсе = СтрокаРейса.Строки.Количество();
	Если ЗаказовВРейсе Тогда
		РейсовБезЗаказов = РейсовБезЗаказов - 1;
	КонецЕсли;	
	Если ЗаказовВРейсе > 0 И ЗаказовВРейсе < 15 Тогда 
		РейсовСКоличествомЗаказовМеньше15 = РейсовСКоличествомЗаказовМеньше15 + 1;
	КонецЕсли;	
	ЗначениеВРеквизитФормы(ДеревоПолигонов, "ДеревоПолигоновСЗаказами");
	ЗначениеВРеквизитФормы(ДеревоРейсов, "ДеревоРейсовСЗаказами");
	Возврат МассивОшибок
КонецФункции


//Широков по письму
&НаСервере
Функция ВернутьЗабор()
	Возврат Справочники.ЛогистическиеБрейки.НайтиПоКоду("000000011");
КонецФункции


&НаКлиенте
Функция ПоместитьЗаказыВРейсНовая(ПолигоныИКатегории, Рейс)
	МассивОшибок = Новый Массив;
	//Широков 14.09.2020
	//Забор = Справочники.ЛогистическиеБрейки.НайтиПоКоду("000000011");
	Забор = ВернутьЗабор();
	//Широков 14.09.2020
	
	//ДеревоПолигонов = РеквизитФормыВЗначение("ДеревоПолигоновСЗаказами");
	//ДеревоРейсов = РеквизитФормыВЗначение("ДеревоРейсовСЗаказами");
	
	//Широков 14.09.2020
	//	СтрокаРейса = ДеревоРейсов.Строки.Найти(Рейс);
	//СтрокаРейса = ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Строки.Найти(Рейс);
	
	СтрокаРейса = Неопределено;
	//Идем по группировкам дерева
	Для каждого СтрокаРейсГруппа Из ДеревоРейсовСЗаказами.ПолучитьЭлементы() Цикл
		Если СтрокаРейсГруппа.Рейс = Рейс Тогда
			СтрокаРейса = СтрокаРейсГруппа;
			Прервать;
			//Идем по элементам группировки
			//Для каждого СтрокаРейс ИЗ СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
			//	Если СтрокаРейс.Рейс = Рейс Тогда
			//		СтрокаРейса = СтрокаРейс;
			//		Прервать;
			//	КонецЕсли; 
			//КонецЦикла;
			//Если НЕ СтрокаРейса = Неопределено Тогда
			//	Прервать;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Широков
	
	ДокументПроверен = СтрокаРейса.ДокументПроверен;
	МаршрутизированоЗаказов = 0;
	МаршрутизированоЗаборов = 0;
	ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
	Для Каждого Полигон Из ПолигоныИКатегории Цикл
		//+Широков по письму
		//СтрокаТест = Объект.ТзТест.Добавить();
		//СтрокаТест.ПолигонКлюч = Полигон.Ключ;
		//СтрокаТест.ПолигонЗначение = Полигон.Значение;
		//СтрокаТест.ЧтоДелаем = "Полигон";
		//СтрокаТест.РеквизитСтрокой = Полигон.Значение;
		//СтрокаТест.ДатаИзменения = ТекущаяДата();
		//-Широков по письму
		
		//Широков
		//СтрокаПолигона = ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Строки.Найти(Полигон.Ключ);
		//Если СтрокаПолигона = Неопределено Тогда
		//	МассивОшибок.Добавить("Не удалось получить данные полигона " + Строка(Полигон.Ключ));
		//	Продолжить;
		//КонецЕсли;	
		Для каждого СтрокаПолигонаПоиск Из ДеревоПолигоновСЗаказами.ПолучитьЭлементы() Цикл
			Если СтрокаПолигонаПоиск.ПолигонМаршрутизации = Полигон.Ключ Тогда
				СтрокаПолигона = СтрокаПолигонаПоиск;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если СтрокаПолигона = Неопределено Тогда
			МассивОшибок.Добавить("Не удалось получить данные полигона " + Строка(Полигон.Ключ));
			Продолжить;
		КонецЕсли;	
		//Широков по письму
		
		
		//Широков по письму
		//СтрокиЗаказовПолигона = СтрокаПолигона.Строки;		
		//СтрокиЗаказовПолигона = СтрокаПолигона.ПолучитьЭлементы();		
		//ТЗнаУдаление = Новый ТаблицаЗначений;
		//
		//ТЗнаУдаление.Колонки.Добавить("Порядок");
		//ТЗнаУдаление.Колонки.Добавить("Элемент");
		
		ТЗнаУдаление.Очистить();
		НомерСтрокиТЗ = 1;
		//Широков по письму
		Для Каждого Категория Из Полигон.Значение Цикл
			//+Широков по письму
			//СтрокаТест = Объект.ТзТест.Добавить();
			//СтрокаТест.Категория = Категория;
			//СтрокаТест.ЧтоДелаем = "Категория";
			//СтрокаТест.РеквизитСтрокой = Категория;
			//СтрокаТест.ДатаИзменения = ТекущаяДата();
			//-Широков по письму
			
			
			//Широков по письму
			//ПомещаемыеЗаказы = СтрокиЗаказовПолигона.НайтиСтроки(Новый Структура("КатегорияЗаказа", Категория));
			//Для Каждого Заказ Из ПомещаемыеЗаказы Цикл
			//	Для Каждого Заказ Из СтрокиЗаказовПолигона Цикл
			Для Каждого Заказ Из СтрокаПолигона.ПолучитьЭлементы() Цикл
				Если Заказ.КатегорияЗаказа = Категория Тогда
					//+Широков по письму
					//СтрокаТест = Объект.ТзТест.Добавить();
					//СтрокаТест.Заказ = Заказ;
					//СтрокаТест.ЧтоДелаем = "Заказ";
					//СтрокаТест.РеквизитСтрокой = Заказ;
					//СтрокаТест.ДатаИзменения = ТекущаяДата();
					//-Широков по письму
					
					
					//Широков по письму
					//НоваяСтрока = СтрокаРейса.Строки.Добавить();
					//НоваяСтрока = СтрокаРейса.Добавить();
					Если СтрокаРейса = Неопределено Тогда
						НоваяСтрока = ДеревоРейсовСЗаказами.ПолучитьЭлементы().Добавить();
					Иначе
						НоваяСтрока = СтрокаРейса.ПолучитьЭлементы().Добавить();
					КонецЕсли;
					
					
					//Широков по письму
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Заказ,,"Отметка");
					НоваяСтрока.ДокументПроверен = ДокументПроверен;
					
					новыйЭлементТЗ = ТЗнаУдаление.Добавить();
					новыйЭлементТЗ.Элемент = Заказ.ПолучитьИдентификатор();
					
					//Заказ.ПолучитьРодителя()
					//Заказ.ПолучитьИдентификатор()	94	Число
					
					новыйЭлементТЗ.Порядок = НомерСтрокиТЗ;
					
					НомерСтрокиТЗ = НомерСтрокиТЗ + 1;
					
					
					//////////СтрокиЗаказовПолигона.Удалить(Заказ);
					////СтрокаПолигона.ПолучитьЭлементы().Удалить(Заказ);
					
					
					Если Категория = Забор Тогда
						МаршрутизированоЗаборов = МаршрутизированоЗаборов + 1;
					Иначе
						МаршрутизированоЗаказов = МаршрутизированоЗаказов + 1;
					КонецЕсли;	
					//Широков по письму
				КонецЕсли;
				//Широков по письму
			КонецЦикла;	
		КонецЦикла;	
		
		//Здесь только удаляем
		//Для Каждого Категория Из Полигон.Значение Цикл
		//	Для Каждого Заказ Из СтрокаПолигона.ПолучитьЭлементы() Цикл
		//		Если Заказ.КатегорияЗаказа = Категория Тогда
		//			СтрокаПолигона.ПолучитьЭлементы().Удалить(Заказ);
		//		КонецЕсли;
		//	КонецЦикла;	
		//КонецЦикла;	
		ТЗнаУдаление.Сортировать("Порядок Убыв");
		Для Каждого Категория Из ТЗнаУдаление Цикл
			//			ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(94).ПолучитьИдентификатор()	94	Число
			Заказ = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(Категория.Элемент);
			//			ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(Категория.Элемент));
			//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(Категория.Элемент);
			СтрокаПолигона.ПолучитьЭлементы().Удалить(Заказ);
			//СтрокаПолигона.ПолучитьЭлементы().Удалить(Категория.Элемент);
		КонецЦикла;
		Если ТипЗнч(СтрокаПолигона) = Тип("ДанныеФормыЭлементДерева") Тогда   //Широков 23.09.2020 по письму
			ИдентификаторПолигона = СтрокаПолигона.ПолучитьИдентификатор();
			Если ИдентификаторПолигона > 0 Тогда
				СтрокаПолигонаНаУдаление = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ИдентификаторПолигона);
				Попытка
					ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(СтрокаПолигонаНаУдаление);
				Исключение
				КонецПопытки;
			КонецЕсли;
			//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(СтрокаПолигона);
		КонецЕсли;
		ТЗнаУдаление.Очистить();
		
		//&НаКлиенте
		//Процедура УдалитьТекущуюСтрокуНаКлиенте(Команда)
		//	ИдентификаторСтроки = Элементы.Дерево.ТекущаяСтрока;
		//	ТекущаяСтрока       = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		//	СтрокаРодитель      = ТекущаяСтрока.ПолучитьРодителя();
		//	
		//	Если СтрокаРодитель = Неопределено Тогда
		//		Дерево.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
		//	Иначе
		//		СтрокаРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
		//	КонецЕсли;
		//КонецПроцедуры
		
		
		//+Широков по письму
		//Если СтрокиЗаказовПолигона.Количество() Тогда 
		//		Если СтрокиЗаказовПолигона.Количество() > 0 Тогда 
		Если СтрокаПолигона.ПолучитьЭлементы().Количество() > 0 Тогда 
			//-Широков по письму
			//Широков 16.09.2020
			//РассчитатьПоказателиСтрокиДерева(СтрокаПолигона);
			////ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
			////Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
			////	//Попытка
			////	//						СтрокаРейсГруппа[СтрокаИмяКолонки.ИмяКолонки] = 0;
			////	//СтрокаРейсГруппа[СтрокаИмяКолонки] = 0;
			////	//						Вычислить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
			////	Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
			////	//						СтрокаРейсГруппа.
			////	Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
			////		//СтрокаРейсГруппа[СтрокаИмяКолонки] = СтрокаРейсГруппа[СтрокаИмяКолонки] + Тек[СтрокаИмяКолонки];
			////		Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
			////	КонецЦикла;	
			////	//Исключение
			////	//	
			////	//КонецПопытки;
			////КонецЦикла;	
			
			//////////////////////////////////////////////////////////////////
			//Пересчитаем группы
			//ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
			//Для Каждого ЭлементМассива ИЗ МассивГруппДереваНаПересчет Цикл
			//	СтрокаРейсГруппа = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива);
			Если НЕ СтрокаПолигона = Неопределено Тогда
				Выполнить("СтрокаПолигона.Итого = 0");
				
				Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
					Выполнить("СтрокаПолигона." + СтрокаИмяКолонки + " = 0");
					Для Каждого Тек Из СтрокаПолигона.ПолучитьЭлементы() Цикл
						Выполнить("СтрокаПолигона." + СтрокаИмяКолонки + " = " + "СтрокаПолигона." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
					КонецЦикла;	
					Выполнить("СтрокаПолигона.Итого = СтрокаПолигона.Итого " + " + СтрокаПолигона." + СтрокаИмяКолонки);
				КонецЦикла;	
				//ОбновитьФлажки(СтрокаРейсГруппа);
				
			КонецЕсли;		
			//КонецЦикла;
			
			
			
		Иначе
			//Широков 16.09.2020
			//ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Строки.Удалить(СтрокаПолигона);
			Для Каждого СтрокиЗаказовПолигона Из СтрокаПолигона.ПолучитьЭлементы() Цикл
				//////////ДеревоПолигоновСЗаказами.ПолучитьЭлементы().Удалить(СтрокиЗаказовПолигона);
				Если ТипЗнч(СтрокиЗаказовПолигона) = Тип("ДанныеФормыЭлементДерева") Тогда   //Широков 23.09.2020 по письму
					СтрокаПолигона.ПолучитьЭлементы().Удалить(СтрокиЗаказовПолигона);
				КонецЕсли;
			КонецЦикла;
			//Широков
		КонецЕсли;	
	КонецЦикла;	
	
	//Широков по письму
	//Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
	//	//Попытка
	//	//						СтрокаРейсГруппа[СтрокаИмяКолонки.ИмяКолонки] = 0;
	//	//СтрокаРейсГруппа[СтрокаИмяКолонки] = 0;
	//	//						Вычислить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
	//	Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
	//	//						СтрокаРейсГруппа.
	//	Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
	//		//СтрокаРейсГруппа[СтрокаИмяКолонки] = СтрокаРейсГруппа[СтрокаИмяКолонки] + Тек[СтрокаИмяКолонки];
	//		Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
	//	КонецЦикла;	
	//	//Исключение
	//	//	
	//	//КонецПопытки;
	//КонецЦикла;	
	Если НЕ СтрокаПолигона = Неопределено Тогда
		Выполнить("СтрокаРейсГруппа.Итого = 0");
		
		Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
			Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
			Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
			КонецЦикла;	
			Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
		КонецЦикла;	
		//ОбновитьФлажки(СтрокаРейсГруппа);
		
	КонецЕсли;		
	
	//РассчитатьПоказателиСтрокиДерева(СтрокаРейса);
	////МассивСуммируемыхКолонок = Новый Массив;
	////МассивСуммируемыхКолонок.Добавить("NK");
	////МассивСуммируемыхКолонок.Добавить("NK_");
	////МассивСуммируемыхКолонок.Добавить("ЗБ");
	////МассивСуммируемыхКолонок.Добавить("К");
	////МассивСуммируемыхКолонок.Добавить("К_");
	////МассивСуммируемыхКолонок.Добавить("М");
	////МассивСуммируемыхКолонок.Добавить("М_");
	////МассивСуммируемыхКолонок.Добавить("С1");
	////МассивСуммируемыхКолонок.Добавить("С1_");
	////МассивСуммируемыхКолонок.Добавить("С2");
	////МассивСуммируемыхКолонок.Добавить("С2_");
	////МассивСуммируемыхКолонок.Добавить("Итого");
	////
	////Для Каждого ИмяКолонки Из МассивСуммируемыхКолонок Цикл
	////	Если СтрокаРейса.ПолучитьЭлементы().Количество() > 0 Тогда
	////		СтрокаРейса[ИмяКолонки] = 0;
	////	КонецЕсли;
	////	Для каждого ПодчиненныйЭлемент Из СтрокаРейса.ПолучитьЭлементы() Цикл
	////		//СтрокаРейса[ИмяКолонки] = СтрокаРейса.Строки.Итог(ИмяКолонки);
	////		Если ТипЗнч(СтрокаРейса[ИмяКолонки]) = Тип("Число") Тогда
	////			СтрокаРейса[ИмяКолонки] = СтрокаРейса[ИмяКолонки] + ПодчиненныйЭлемент[ИмяКолонки];
	////		КонецЕсли;
	////	КонецЦикла;	
	////КонецЦикла;	
	//Широков по письму
	
	КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов - МаршрутизированоЗаказов;
	КоличествоНемаршрутизированныхЗаборов = КоличествоНемаршрутизированныхЗаборов - МаршрутизированоЗаборов;
	//Широков по письму
	Если КоличествоНемаршрутизированныхЗаборов < 0 Тогда
		КоличествоНемаршрутизированныхЗаборов = 0;
	КонецЕсли;
	
	//ЗаказовВРейсе = СтрокаРейса.Строки.Количество();
	ЗаказовВРейсе = СтрокаРейса.ПолучитьЭлементы().Количество();
	//Широков по письму
	Если ЗаказовВРейсе Тогда
		РейсовБезЗаказов = РейсовБезЗаказов - 1;
	КонецЕсли;	
	Если ЗаказовВРейсе > 0 И ЗаказовВРейсе < 15 Тогда 
		РейсовСКоличествомЗаказовМеньше15 = РейсовСКоличествомЗаказовМеньше15 + 1;
	КонецЕсли;	
	//ЗначениеВРеквизитФормы(ДеревоПолигонов, "ДеревоПолигоновСЗаказами");
	//ЗначениеВРеквизитФормы(ДеревоРейсов, "ДеревоРейсовСЗаказами");
	Возврат МассивОшибок
КонецФункции
//Широков по письму

&НаКлиенте
Процедура ПересчитатьДеревья()
	//Пересчитаем группы
	ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
	
	Для Каждого ЭлементМассива ИЗ МассивПолигоновСПометками Цикл
		СтрокаРейсГруппа = ДеревоПолигоновСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);
		Если НЕ СтрокаРейсГруппа = Неопределено Тогда
			Выполнить("СтрокаРейсГруппа.Итого = 0");
			
			Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
				Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
				КонецЦикла;	
				Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
	
	//Пересчитаем группы
	//ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДереваСписок();
	Для Каждого ЭлементМассива ИЗ МассивРейсовСПометками Цикл
		СтрокаРейсГруппа = ДеревоРейсовСЗаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);
		Если НЕ СтрокаРейсГруппа = Неопределено Тогда
			Выполнить("СтрокаРейсГруппа.Итого = 0");
			
			Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
				Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = 0");
				Для Каждого Тек Из СтрокаРейсГруппа.ПолучитьЭлементы() Цикл
					Выполнить("СтрокаРейсГруппа." + СтрокаИмяКолонки + " = " + "СтрокаРейсГруппа." + СтрокаИмяКолонки + " + Тек." + СтрокаИмяКолонки);
				КонецЦикла;	
				Выполнить("СтрокаРейсГруппа.Итого = СтрокаРейсГруппа.Итого " + " + СтрокаРейсГруппа." + СтрокаИмяКолонки);
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
	МассивПолигоновСПометками.Очистить();
	МассивРейсовСПометками.Очистить();
КонецПроцедуры


&НаСервере
Функция УдалитьЗаказыИзРейса(ПолигоныИКатегории, Рейс)
	
	МассивОшибок = Новый Массив;
	Забор = Справочники.ЛогистическиеБрейки.НайтиПоКоду("000000011");
	ДеревоРейсов = РеквизитФормыВЗначение("ДеревоРейсовСЗаказами");	
	ДеревоПолигонов = РеквизитФормыВЗначение("ДеревоПолигоновСЗаказами");
	ИзъятоИзРейсаЗаказов = 0;
	ИзъятоИзРейсаЗаборов = 0;
	
	НайденныеСтрокиРейса = ДеревоРейсов.Строки.НайтиСтроки(Новый Структура("Рейс", Рейс));
	//+Широков по письму
	//	Если НайденныеСтрокиРейса.Количество() Тогда
	Если НайденныеСтрокиРейса.Количество() > 0 Тогда
		//-Широков по письму
		СтрокаРейса = НайденныеСтрокиРейса[0];	
	Иначе
		МассивОшибок.Добавить("Не обнаружен рейс " + Строка(Рейс) + " !");
		Возврат МассивОшибок
	КонецЕсли;	
	
	Для Каждого ПолигонИКатегорииКОтвязке Из ПолигоныИКатегории Цикл
		Полигон = ПолигонИКатегорииКОтвязке.Ключ;
		Категории = ПолигонИКатегорииКОтвязке.Значение;
		НайденныеСтрокиПолигонов = ДеревоПолигонов.Строки.НайтиСтроки(Новый Структура("ПолигонМаршрутизации", Полигон));
		
		//+Широков по письму
		//		Если НайденныеСтрокиПолигонов.Количество() Тогда
		Если НайденныеСтрокиПолигонов.Количество() > 0 Тогда
			//-Широков по письму
			СтрокаПолигона = НайденныеСтрокиПолигонов[0];
			
		Иначе
			НомерПолигона = ПолучитьНомерПолигона(Полигон);
			ИндексДляВставки = -1;
			Для Каждого СтрокаДерева Из ДеревоПолигонов.Строки Цикл
				НомерПолигонаВДереве = ПолучитьНомерПолигона(СтрокаДерева.ПолигонМаршрутизации);
				Если НомерПолигонаВДереве > НомерПолигона Тогда
					ИндексДляВставки = ДеревоПолигонов.Строки.Индекс(СтрокаДерева);
					
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			Если ИндексДляВставки = -1 Тогда
				СтрокаПолигона = ДеревоПолигонов.Строки.Добавить();
			Иначе	
				СтрокаПолигона = ДеревоПолигонов.Строки.Вставить(ИндексДляВставки);	
			КонецЕсли;	
			СтрокаПолигона.ПолигонМаршрутизации = Полигон;
		КонецЕсли;	
		Для Каждого Категория Из Категории Цикл
			
			//Широков 16.09.2020   ???
			НайденныеЗаказы = СтрокаРейса.Строки.НайтиСтроки(Новый Структура("КатегорияЗаказа, ПолигонМаршрутизации",Категория, Полигон));	
			//НайденныеЗаказы = ДеревоРейсов.Строки.НайтиСтроки(Новый Структура("КатегорияЗаказа, ПолигонМаршрутизации",Категория, Полигон));	
			//Широков
			Для Каждого Заказ Из НайденныеЗаказы Цикл
				
				СтрокаЗаказа = СтрокаПолигона.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Заказ);
				СтрокаРейса.Строки.Удалить(Заказ);
				Если Категория = Забор Тогда
					ИзъятоИзРейсаЗаборов = ИзъятоИзРейсаЗаборов + 1;
				Иначе
					ИзъятоИзРейсаЗаказов = ИзъятоИзРейсаЗаказов + 1;
				КонецЕсли;
			КонецЦикла;	
			
			
		КонецЦикла;	
		
		РассчитатьПоказателиСтрокиДерева(СтрокаПолигона);
	КонецЦикла;
	
	РассчитатьПоказателиСтрокиДерева(СтрокаРейса);
	
	КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов + ИзъятоИзРейсаЗаказов;
	КоличествоНемаршрутизированныхЗаборов = КоличествоНемаршрутизированныхЗаборов + ИзъятоИзРейсаЗаборов;
	//Широков по письму
	Если КоличествоНемаршрутизированныхЗаборов < 0 Тогда
		КоличествоНемаршрутизированныхЗаборов = 0;
	КонецЕсли;
	//Широков по письму
	
	
	ЗаказовВРейсе = СтрокаРейса.Строки.Количество();
	Если Не ЗаказовВРейсе Тогда
		РейсовБезЗаказов = РейсовБезЗаказов + 1;
	КонецЕсли;	
	Если ЗаказовВРейсе > 0 И ЗаказовВРейсе < 15 Тогда 
		РейсовСКоличествомЗаказовМеньше15 = РейсовСКоличествомЗаказовМеньше15 + 1;
	КонецЕсли;		
	
	ЗначениеВРеквизитФормы(ДеревоПолигонов, "ДеревоПолигоновСЗаказами");
	ЗначениеВРеквизитФормы(ДеревоРейсов, "ДеревоРейсовСЗаказами");
	
	Возврат МассивОшибок
	
КонецФункции	

&НаСервереБезКонтекста
Процедура РассчитатьПоказателиСтрокиДерева(СтрокаДерева)
	МассивСуммируемыхКолонок = Новый Массив;
	МассивСуммируемыхКолонок.Добавить("NK");
	МассивСуммируемыхКолонок.Добавить("NK_");
	МассивСуммируемыхКолонок.Добавить("ЗБ");
	МассивСуммируемыхКолонок.Добавить("К");
	МассивСуммируемыхКолонок.Добавить("К_");
	МассивСуммируемыхКолонок.Добавить("М");
	МассивСуммируемыхКолонок.Добавить("М_");
	МассивСуммируемыхКолонок.Добавить("С1");
	МассивСуммируемыхКолонок.Добавить("С1_");
	МассивСуммируемыхКолонок.Добавить("С2");
	МассивСуммируемыхКолонок.Добавить("С2_");
	МассивСуммируемыхКолонок.Добавить("Итого");
	
	Для Каждого ИмяКолонки Из МассивСуммируемыхКолонок Цикл
		СтрокаДерева[ИмяКолонки] = СтрокаДерева.Строки.Итог(ИмяКолонки);
	КонецЦикла;	
	
	//СтрокаДерева["ИтогоПредварительно"] = СтрокаДерева["NK_"] +  СтрокаДерева["К_"] +  СтрокаДерева["М_"] +  СтрокаДерева["С1_"] 
	//										+  СтрокаДерева["С2_"];
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьНомерПолигона(Полигон)
	НаименованиеПолигона = Строка(Полигон);
	ЧастиНаименования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НаименованиеПолигона, " ");
	Попытка
		НомерПолигона =  Число(ЧастиНаименования[0]);
		Возврат НомерПолигона
	Исключение
		Возврат 0
	КонецПопытки;	
КонецФункции	


&НаСервере
Процедура КомандаОчиститьЛогНаСервере()
	Объект.ТзТест.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура КомандаОчиститьЛог(Команда)
	КомандаОчиститьЛогНаСервере();
КонецПроцедуры

//-Степанов Задача № 3863

//+Широков по письму
&НаКлиенте
Процедура ДеревоРейсовСЗаказамиПриИзменении(Элемент)
	Если НЕ Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Отметка > 0 Тогда
			МассивПодчиненныеЭлементы = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьЭлементы();
			Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
				ЭлементМассива = МассивРейсовСПометками[Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
				Если ЭлементМассива = Неопределено Тогда
					СтруктураЗначения = новый Структура;
					СтруктураЗначения.Вставить("НомерЗаказа",Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.НомерЗаказа);
					СтруктураЗначения.Вставить("УИД",Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.УИД);
					МассивРейсовСПометками.Вставить(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор(), СтруктураЗначения);
				КонецЕсли;
			Иначе
				Для Каждого ПОдчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
					ЭлементМассива = МассивРейсовСПометками[ПОдчиненныйЭлемент.ПолучитьИдентификатор()];
					Если ЭлементМассива = Неопределено Тогда
						СтруктураЗначения = новый Структура;
						СтруктураЗначения.Вставить("НомерЗаказа",ПОдчиненныйЭлемент.НомерЗаказа);
						СтруктураЗначения.Вставить("УИД",ПОдчиненныйЭлемент.УИД);
						МассивРейсовСПометками.Вставить(ПОдчиненныйЭлемент.ПолучитьИдентификатор(), СтруктураЗначения);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			МассивПодчиненныеЭлементы = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьЭлементы();
			Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
				ЭлементМассива = МассивРейсовСПометками[Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
				Если НЕ ЭлементМассива = Неопределено Тогда
					//+Широков 08.04.2021 по письму
					//ЗаказСОтметкой = ДеревоРейсовСзаказами.НайтиПоИдентификатору(ЭлементМассива.Ключ);
					//Если НЕ ЗаказСОтметкой = Неопределено Тогда
					//	ЗаказСОтметкой.Отметка = 0;
					//КонецЕсли;
					//-Широков 08.04.2021 по письму
					МассивРейсовСПометками.Удалить(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ПолучитьИдентификатор());
				КонецЕсли;
			Иначе
				Для Каждого ПОдчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
					ЭлементМассива = МассивРейсовСПометками[ПОдчиненныйЭлемент.ПолучитьИдентификатор()];
					Если НЕ ЭлементМассива = Неопределено Тогда
						//						МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ);
						МассивРейсовСПометками.Удалить(ПОдчиненныйЭлемент.ПолучитьИдентификатор());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиПриИзменении(Элемент)
	Если НЕ Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные = Неопределено Тогда
		Если Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.Отметка > 0 Тогда
			МассивПодчиненныеЭлементы = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьЭлементы();
			Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
				ЭлементМассива = МассивПолигоновСПометками[Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
				Если ЭлементМассива = Неопределено Тогда
					СтруктураЗначения = новый Структура;
					СтруктураЗначения.Вставить("НомерЗаказа",Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа);
					СтруктураЗначения.Вставить("УИД",Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.УИД);
					МассивПолигоновСПометками.Вставить(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор(), СтруктураЗначения);
				КонецЕсли;
			Иначе
				Для Каждого ПодчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
					ЭлементМассива = МассивПолигоновСПометками[ПодчиненныйЭлемент.ПолучитьИдентификатор()];
					Если ЭлементМассива = Неопределено Тогда
						СтруктураЗначения = новый Структура;
						СтруктураЗначения.Вставить("НомерЗаказа",ПодчиненныйЭлемент.НомерЗаказа);
						СтруктураЗначения.Вставить("УИД",ПодчиненныйЭлемент.УИД);
						МассивПолигоновСПометками.Вставить(ПодчиненныйЭлемент.ПолучитьИдентификатор(), СтруктураЗначения);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			МассивПодчиненныеЭлементы = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьЭлементы();
			Если МассивПодчиненныеЭлементы.Количество() = 0 Тогда
				ЭлементМассива = МассивПолигоновСПометками[Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
				Если НЕ ЭлементМассива = Неопределено Тогда
					//МассивПолигоновСПометками.Удалить(ЭлементМассива.Ключ);
					МассивПолигоновСПометками.Удалить(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор());
				КонецЕсли;
			Иначе
				Для Каждого ПодчиненныйЭлемент ИЗ МассивПодчиненныеЭлементы Цикл
					//+Широков 29.03.2021 по письму
					//ЭлементМассива = МассивРейсовСПометками[ПодчиненныйЭлемент.ПолучитьИдентификатор()];
					ЭлементМассива = МассивПолигоновСПометками[ПодчиненныйЭлемент.ПолучитьИдентификатор()];
					//-Широков 29.03.2021 по письму
					Если НЕ ЭлементМассива = Неопределено Тогда
						//						МассивРейсовСПометками.Удалить(ЭлементМассива.Ключ);
						//						МассивПолигоновСПометками.Удалить(ЭлементМассива);
						МассивПолигоновСПометками.Удалить(ПодчиненныйЭлемент.ПолучитьИдентификатор());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//Если НЕ Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные = Неопределено Тогда
	//	Если Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.Отметка > 0 Тогда
	//		ЭлементМассива = МассивПолигоновСПометками[Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
	//		Если НЕ ЭлементМассива = Неопределено Тогда
	//			МассивПолигоновСПометками.Вставить(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа);
	//		КонецЕсли;
	//	Иначе
	//		ЭлементМассива = МассивПолигоновСПометками[Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолучитьИдентификатор()];
	//		Если НЕ ЭлементМассива = Неопределено Тогда
	//			МассивПолигоновСПометками.Удалить(ЭлементМассива.Ключ);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

//-Широков по письму

//Асеев 22.04.2021 (по письму СРОЧНО !!!)>>>
&НаСервереБезКонтекста
Функция СоздатьНовыйРейсНаСервере(Знач ПараметрыСоздания)
	
	РезультатСоздания = Истина;
	
	ДатаРейса = ПараметрыСоздания.ДатаРейса;
	ТерминалДоставки = ПараметрыСоздания.ТерминалДоставки;
	СменаРейса = ПараметрыСоздания.СменаРейса;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ДатаСоздания = ТекущаяДата();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		Рейс = Документы.Рейс.СоздатьДокумент();
		Рейс.Дата = ДатаСоздания;
		Рейс.УстановитьНовыйНомер();
		Рейс.ДатаРейса = ДатаРейса;
		Рейс.ТерминалДоставки = ТерминалДоставки;
		Рейс.СменаРейса = СменаРейса;
		Рейс.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация;
		Рейс.РежимЗагрузкиДанных = 1;
		Рейс.РольРейса = Справочники.РолиТранспорта.РольДоставки;
		
		Если Рейс.СменаРейса.Пустая() Тогда
			Рейс.СменаРейса = Справочники.Смены.Смена1;
		КонецЕсли;
		
		Рейс.Записать();
		
		Рейс.СоздатьРейсМестнойДоставки();
		
		Рейс.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗаписьРегистра = РегистрыСведений.ПривязкаМашинКРейсам.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Период = ДатаСоздания;
		ЗаписьРегистра.Рейс = Рейс.Ссылка;
		ЗаписьРегистра.Транспорт = Справочники.новаТранспорт.НайтиПоКоду("000152");
		ЗаписьРегистра.Водитель = Справочники.новаВодители.НайтиПоКоду("000348");
		ЗаписьРегистра.КтоПривязал = ТекущийПользователь;
		ЗаписьРегистра.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Ошибка создания рейса: " + ОписаниеОшибки());
		РезультатСоздания = Ложь;
	КонецПопытки;
	
	Возврат РезультатСоздания;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйРейс(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьНовыйРейсВопрос", ЭтотОбъект), "Вы действительно хотите создать новый рейс?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйРейсВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Не ЗначениеЗаполнено(ДатаПланирования) Или Регион.Пустая() Тогда
			ПоказатьПредупреждение(, "Дата планирования и регион должны быть указаны");
			Возврат;
		КонецЕсли;
		
		Если СоздатьНовыйРейсНаСервере(Новый Структура("ДатаРейса,ТерминалДоставки,СменаРейса", ДатаПланирования, Регион, Смена)) Тогда
			ОбновитьДанные(Ложь, Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//Асеев 22.04.2021 (по письму СРОЧНО !!!)<<

//Асеев 01.11.2022 (Задача № 4919)>>>
&НаКлиенте
Процедура ПечатьБланков(Команда)
	
	Объект.ПечатьБланков = Не Объект.ПечатьБланков;
	Элементы.ФормаПечатьБланков.Пометка = Объект.ПечатьБланков;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПечатьБланковЗаказовНаСервере(Знач МассивНомеров)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
    ТабДок.АвтоМасштаб = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ОбработкаОбъект = Обработки.ПечатьБланковЗаказовНовый.Создать();
	ОбработкаОбъект.ПечатьБланковЗаказовПоНомерам(МассивНомеров, ТабДок);
	
	Возврат Новый Структура("ТабДок,РазрешенаНепосредственнаяПечать", ТабДок, Не ПараметрыСеанса.ЭтоТестоваяСреда);
	
КонецФункции

&НаКлиенте
Процедура НапечататьБланкиЗаказовПоНомерам(МассивНомеров)
	
	Результат = ПечатьБланковЗаказовНаСервере(МассивНомеров);
	Если Объект.ПечатьБланков И Результат.РазрешенаНепосредственнаяПечать Тогда
		Результат.ТабДок.Напечатать();
	Иначе
		Результат.ТабДок.Показать("Перемещенные заказы");
	КонецЕсли;
	
КонецПроцедуры
//Асеев 01.11.2022 (Задача № 4919)<<<


