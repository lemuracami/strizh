
&НаСервере
Функция ПолучитьМакетНаСервере()
	Возврат Обработки.АдресНаКартеЯндекс.ПолучитьМакет("МакетСтриж");
КонецФункции	
	

&НаКлиенте
Процедура ОбновитьПолеКарты(ШиринаКарты = Неопределено, ВысотаКарты = Неопределено)
	
	Макет = ПолучитьМакетНаСервере();
	//ПолучитьМакет("МакетСтриж");
	
	КодХТМЛ = Макет.ПолучитьТекст();
	
	//НеобходимоОбновитьКэш = Константы.НеобходимоОбновитьКэшПолигонов.Получить();
	
	
	СтрокаСтиляНачальная = "var s8 = new YMaps.Style();
		|s8.iconStyle = new YMaps.IconStyle();
		|s8.iconStyle.offset = new YMaps.Point(-12, -12);
		|s8.iconStyle.href = ""C:/icons_/kv2_5_x.gif"";
		|s8.iconStyle.size = new YMaps.Point(20, 20);
		|s8.hideIcon = false;
		|s8.balloonContentStyle = new YMaps.BalloonContentStyle(""my#template"");";
		
	СтрокаСтиляИтоговая = "";
	
	имяКаталогаКартинок = КаталогПрограммы() + "\icons_";
	КаталогКартинок = Новый Файл(имяКаталогаКартинок);
	Если КаталогКартинок.ЭтоКаталог() тогда
		списокИменКартинок = новый таблицаЗначений;
		списокИменКартинок.Колонки.Добавить("ИмяСтиля");
		списокИменКартинок.Колонки.Добавить("ИмяФайлаКартинки");
		МассивНайденных = НайтиФайлы(имяКаталогаКартинок, "*.gif");
		Для Каждого Файл из МассивНайденных Цикл 
			
			времСтрокаСтиля = СтрокаСтиляНачальная;
			времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "s8", сокрЛП(Файл.ИмяБезРасширения));
			времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "C:/icons_/kv2_5_x.gif", "C:/icons_/" + сокрЛП(Файл.Имя));
			
			СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + времСтрокаСтиля + символы.ПС;
			
		КонецЦикла; 
	конецЕсли;	
	СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + СтрокаСтиляНачальная + символы.ПС;
	
	КодХТМЛ = стрЗаменить(КодХТМЛ, "/*vstavkaStiley;", СтрокаСтиляИтоговая);
	
	
	СтрокаЗапросаСкрипта = "";
	//Если НеобходимоОбновитьКэш Тогда
	//	СтрокаЗапросаСкрипта = "?" + Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss");
	//КонецеСли;
	
	КодХТМЛ = стрЗаменить(КодХТМЛ, "^ЗапросОбновленияПолигонов^", СтрокаЗапросаСкрипта);		
	
	путьККаталогуКартинок = СтрЗаменить(КаталогПрограммы(), "\", "/");
	КодХТМЛ = СтрЗаменить(КодХТМЛ,"C:/",путьККаталогуКартинок);
	
	//ЭлементыФормы.Карта.УстановитьТекст(КодХТМЛ);
	//Элементы.ПолеXTML.
	Если ШиринаКарты = Неопределено Или ВысотаКарты = Неопределено Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^РазмерыКарты^","width:1100px;height:650px");
	Иначе
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^РазмерыКарты^","width:" + Формат(Ширина, "ЧГ=") + "px;height:" + Формат(Высота, "ЧГ=") + "px");
	КонецеСли;	
	
	//Настройки = СписокРейсов.компоновщикнастроек.получитьнастройки();
	Если ПолигональнаяСхемаКарты.Пустая() Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^","");
	Иначе	
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^",Формат(ПолигональнаяСхемаКарты.id_Админка, "ЧГ="));
	КонецеСли;	
		
	ДанныеXTML = КодХТМЛ;
	
	//табАдресов = получитьтабАдресов();
	//табУникальныхАдресов = табАдресов.скопировать();
	//табУникальныхАдресов.свернуть("Адрес");
	//ЭлементыФормы.табАдресов.СоздатьКолонки();
	//ЭлементыФормы.табАдресов.колонки["этоТекСтрока"].видимость = ложь;
	//
	//ВыборМасштаба = "50%";
	//ВыборРегиона = "Москва";
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПолеКарты1(Команда)
	// Вставить содержимое обработчика.
	ОбновитьПолеКарты();
КонецПроцедуры

&НаКлиенте
Процедура ПолеXTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Сообщить("нах");
	//Ширина = Элементы.ПолеXTML.Документ.ActiveElement.clientWidth;
	//Высота = Элементы.ПолеXTML.Документ.ActiveElement.clientHeight;
	//Ширина = Элементы.ПолеXTML.Документ.body.clientWidth;
	//Высота = Элементы.ПолеXTML.Документ.body.clientHeight;
	//
	//ОбновитьПолеКарты(Ширина, Высота);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРезультатЗапроса(МассивРейсов)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РейсЗаказы.Заказ КАК Заказ,
	            |	ВЫБОР
	            |		КОГДА РейсЗаказы.ВидЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.DROP)
	            |			ТОГДА 1
	            |		КОГДА РейсЗаказы.ВидЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.COLLECTION)
	            |			ТОГДА 2
	            |	КОНЕЦ КАК ТипЗаказа,
	            |	РейсЗаказы.Заказ.Номер КАК НомерЗаказа,
	            |	ВЫБОР
	            |		КОГДА РейсЗаказы.ВидЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.DROP)
	            |			ТОГДА новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование
	            |		КОГДА РейсЗаказы.ВидЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.COLLECTION)
	            |			ТОГДА РейсЗаказы.Заказ.ТочкаДоставки.Адрес.Наименование
	            |	КОНЕЦ КАК Адрес,
	            |	ВЫБОР
	            |		КОГДА РейсЗаказы.ВидЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.DROP)
	            |			ТОГДА новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта
	            |		КОГДА РейсЗаказы.ВидЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.COLLECTION)
	            |			ТОГДА РейсЗаказы.Заказ.ТочкаДоставки.Адрес.Широта
	            |	КОНЕЦ КАК Широта,
	            |	ВЫБОР
	            |		КОГДА РейсЗаказы.ВидЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.DROP)
	            |			ТОГДА новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота
	            |		КОГДА РейсЗаказы.ВидЗаказа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.COLLECTION)
	            |			ТОГДА РейсЗаказы.Заказ.ТочкаДоставки.Адрес.Долгота
	            |	КОНЕЦ КАК Долгота
	            |ИЗ
	            |	Документ.Рейс.Заказы КАК РейсЗаказы
	            |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО (ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.РеализацияТоваровУслуг).Номер = новаМестнаяДоставка.Номер)
	            |			И (РейсЗаказы.Ссылка.Ссылка В (&МасРейсов))
	            |			И (РейсЗаказы.УдаленИзРейса = ЛОЖЬ)
	            |ГДЕ
	            |	РейсЗаказы.Ссылка.Ссылка В (&МасРейсов)
	            |	И РейсЗаказы.УдаленИзРейса = ЛОЖЬ";
	Зап.УстановитьПараметр("МасРейсов", МассивРейсов);
	Рез = Зап.Выполнить();
	Возврат Рез;
КонецФункции	

&НаКлиенте
Процедура ОтобразитьЗаказыНаКартеПоРейсам(Команда)
	//имя стиля совпадает с именем картинки без расширения
	
	имяСтиляДоставка = "cr1_1_2";
	имяСтиляЗабор = "tr4_6_x";
	Рез = ПолучитьРезультатЗапроса(Элементы.СписокРейсов.ВыделенныеСтроки);
	Если Рез.Пустой() Тогда
		Сообщить("Не выделены рейсы!");
		Возврат;
	КонецеСли;	
	
	Выб = Рез.Выбрать();
	
	Пока Выб.Следующий() Цикл
		Если Выб.ТипЗаказа = 1 Тогда
			ИмяСтиля = имяСтиляДоставка;
		ИначеЕсли Выб.ТипЗаказа = 2 Тогда	
			ИмяСтиля = имяСтиляЗабор;
		КонецеСли;
		Широта = Выб.Широта;
		Долгота = Выб.Долгота;
		
		Если Не ЗначениеЗаполнено(Широта) или Не ЗначениеЗаполнено(Долгота) Тогда
			Сообщить("Не определены координаты заказа " + СокрЛП(Выб.НомерЗаказа));
			Продолжить;
		КонецеСли;	
		//
		УИД_Дока = Строка(Выб.Заказ.УникальныйИдентификатор()); 	
		Попытка
			ВызовФункции = "showAddressCoord('" + Формат(Широта, "ЧРД=.; ЧГ=") + "', '" + Формат(Долгота, "ЧРД=.; ЧГ=")  + "', 'Заказ № " + сокрЛП(Выб.НомерЗаказа) + ", "  + сокрЛП(Выб.адрес) + "', " + имяСтиля + ", '" + УИД_Дока + "')";    
			Элементы.ПолеXTML.Документ.parentWindow.eval(ВызовФункции);
		исключение
			Сообщить("Точка с адресом " + сокрЛП(Выб.адрес) + " не может быть отбражена на карте", СтатусСообщения.ОченьВажное);	
		конецПопытки
	КонецЦикла;	
	
	//Для каждого строкаАдреса Из табАдресов Цикл 
		
		//ЭТО ПРИМЕР ВЫВОДА ТОГО ИЛИ ИНОГО МАРКЕРА В ЗАВИСИМОСТИ ОТ НЕКОЕГО ПАРАМЕТРА
		//Если  строкаАдреса.суммаДокумента <1000 тогда
		//	имяСтиля = "cr1_2_x";	
		//ИначеЕсли  строкаАдреса.суммаДокумента <10000 тогда
		//	имяСтиля = "tr2_3_x";	
		//ИначеЕсли  строкаАдреса.суммаДокумента <20000 тогда
		//	имяСтиля = "kv3_4_x";	
		//ИначеЕсли  строкаАдреса.суммаДокумента <50000 тогда
		//	имяСтиля = "tr4_1_x";	
		//ИначеЕсли  строкаАдреса.суммаДокумента <100000 тогда
		//	имяСтиля = "kv5_2_x";	
		//Иначе
		//	имяСтиля = "cr6_3_x";	
		//конецЕсли;
		//Широта = строкаАдреса.документПродажи.ТочкаПрибытия.Адрес.Широта;
		//Долгота = строкаАдреса.документПродажи.ТочкаПрибытия.Адрес.Долгота;
		//
		//Если Не ЗначениеЗаполнено(Широта) или Не ЗначениеЗаполнено(Долгота) Тогда
		//	Сообщить("Не определены координаты доставки " + СокрЛП(строкаАдреса.документПродажи.Номер));
		//	Продолжить;
		//КонецеСли;	
		//
		//УИД_Дока = Строка(строкаАдреса.ДокументПродажи.УникальныйИдентификатор()); 	
		//Попытка
		//	//ВызовФункции = "showAddress('" + сокрЛП(строкаАдреса.адрес) + "', '" + сокрЛП(строкаАдреса.Контрагент.наименование) + ", "  + сокрЛП(строкаАдреса.адрес) + "', " + имяСтиля + ", '" + УИД_Дока + "')";    
		//	ВызовФункции = "showAddressCoord('" + Формат(Широта, "ЧРД=.; ЧГ=") + "', '" + Формат(Долгота, "ЧРД=.; ЧГ=")  + "', '" + сокрЛП(строкаАдреса.Контрагент.наименование) + ", "  + сокрЛП(строкаАдреса.адрес) + "', " + имяСтиля + ", '" + УИД_Дока + "')";    
		//	ЭлементыФормы.Карта.Document.parentWindow.eval(ВызовФункции);
		//исключение
		//	Предупреждение("Точка с адресом " + сокрЛП(строкаАдреса.адрес) + " не может быть отбражена на карте" );	
		//конецПопытки
		
	//КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура СписокРейсовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокРейсовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолигональнаяСхемаКарты = ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Объект.Регион);
	ОбновитьПолеКарты();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКарту(Команда)
	 Элементы.ПолеXTML.Документ.parentWindow.eval("removeAllOverlays(map)");
	 //ТочкиНеСозданы = Истина;
	 //ЭлементыФормы.Карта.УстановитьТекст(КодХТМЛ);
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьМаршрутПоРейсу(Команда)
	Рез = ПолучитьРезультатЗапроса(Элементы.СписокРейсов.ТекущаяСтрока);
	Если Рез.Пустой() Тогда
		Сообщить("Не выбран рейс!");
		Возврат;
	КонецеСли;	
	Таб = Рез.Выгрузить();
	
	Сч = 1;
	МаршрутНачалоПути = "Москва, Огородный проезд, 20";
	МаршрутОкончаниеПути = сокрЛП(Таб[0].Адрес);
	текМаршрутПостроен = Элементы.ПолеXTML.Документ.parentWindow.AddRoute(МаршрутНачалоПути, МаршрутОкончаниеПути, Строка(Сч), Строка(Сч+1));
	
	Сч = 2;	
	Для сч = 0 по Таб.количество() -2 Цикл
		МаршрутНачалоПути = сокрЛП(Таб[сч].Адрес);
		МаршрутОкончаниеПути = сокрЛП(Таб[сч + 1].Адрес);
		текМаршрутПостроен = Элементы.ПолеXTML.Документ.parentWindow.AddRoute(МаршрутНачалоПути, МаршрутОкончаниеПути, Строка(Сч), Строка(Сч+1));
		
		Сч = Сч + 1;
		Если НЕ текМаршрутПостроен Тогда
			прервать;
		конецесли;
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовуюСхемуПланированияНаСервере(КодРегиона)
	// Вставить содержимое обработчика.
	СхемаСоздана = ПолигональнаяМаршрутизацияСервер.СоздатьНовуюСхемуМаршрутизации(КодРегиона);
	Возврат СхемаСоздана;
КонецФункции

&НаКлиенте
Процедура СоздатьНовуюСхемуПланирования(Команда)
	Проверка = ПроверитьСоответствиеРегионаИСхемы();
	Если Не Проверка Тогда
		Возврат;
	КонецЕсли;
	
	Успешно = СоздатьНовуюСхемуПланированияНаСервере(Объект.Регион.Код);
	Если Успешно Тогда
		Сообщить("Новая версия карты создана и загружена!", СтатусСообщения.Обычное);
	Иначе	
		Сообщить("Произошла ошибка!", СтатусСообщения.ОченьВажное);
	КонецеСли;	
КонецПроцедуры

&НаСервере
Функция УстановитьАктивнуюСхемуПланированияНаСервере(ИдСхемы, КодРегиона)
	// Вставить содержимое обработчика.
	СхемаУстановлена = ПолигональнаяМаршрутизацияСервер.УстановитьАктуальнуюСхемуПолигональнойМаршрутизацииВСистеме(ИдСхемы, КодРегиона);
	Возврат СхемаУстановлена;
КонецФункции

&НаКлиенте
Процедура УстановитьАктивнуюСхемуПланирования(Команда)
	Зн = "";
	Если ВвестиЗначение(Зн, "Укажите схему планирования..", Тип("СправочникСсылка.СхемыПолигональнойМаршрутизации")) Тогда
		Успешно = УстановитьАктивнуюСхемуПланированияНаСервере(Зн.id_Админка, Объект.Регион.Код);
	Иначе
		Возврат;
	КонецеСли;	
	
	Если Успешно Тогда
		Сообщить("Активная схема установлена!", СтатусСообщения.Обычное);
	Иначе	
		Сообщить("Произошла ошибка!", СтатусСообщения.ОченьВажное);
	КонецеСли;		
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыеКоординатыПолигона(Полигон)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	ПолигоныМаршрутизацииТочкиПолигона.Широта КАК Широта,
	            |	ПолигоныМаршрутизацииТочкиПолигона.Долгота КАК Долгота
	            |ИЗ
	            |	Справочник.ПолигоныМаршрутизации.ТочкиПолигона КАК ПолигоныМаршрутизацииТочкиПолигона
	            |ГДЕ
	            |	ПолигоныМаршрутизацииТочкиПолигона.Ссылка.Ссылка = &Полигон
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ПолигоныМаршрутизацииТочкиПолигона.НомерСтроки";
	Зап.УстановитьПараметр("Полигон", Полигон);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Выб.Следующий();
	Струк = Новый Структура;
	Струк.Вставить("Широта", Выб.Широта);
	Струк.Вставить("Долгота", Выб.Долгота);
	Возврат Струк;
КонецФункции	

&НаКлиенте
Процедура СписокПолигоновПриАктивизацииСтроки(Элемент)
	
	// Вставить содержимое обработчика.
	Если Элементы.СписокПолигонов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецеСли;
	
	Координаты = ПолучитьПервыеКоординатыПолигона(Элементы.СписокПолигонов.ТекущаяСтрока);
	ВызовФункции = "MapUtils.ClickBallon('" + Формат(Координаты.Долгота, "ЧРД=.; ЧГ=") + "', '" + Формат(Координаты.Широта, "ЧРД=.; ЧГ=") + "')";    
	Элементы.ПолеXTML.Документ.parentWindow.eval(ВызовФункции);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗафиксироватьПолигоныЗаказовПоСхемеНаСервере(ПериодОбработки, ДатаСхем, Регион)
	ЗапПолигоны = Новый Запрос;
	ЗапПолигоны.Текст = "ВЫБРАТЬ
	                    |	новаМестнаяДоставка.Номер КАК НомерЗаказа,
	                    |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	                    |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота
	                    |ИЗ
	                    |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                    |		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	                    |ГДЕ
	                    |	новаМестнаяДоставка.Дата МЕЖДУ &НачДата И &КонДата
	                    |	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта <> 0
	                    |	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота <> 0
	                    |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	                    |
	                    |ОБЪЕДИНИТЬ ВСЕ
	                    |
	                    |ВЫБРАТЬ
	                    |	ЗаборТовара.Номер,
	                    |	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
	                    |	ЗаборТовара.ТочкаДоставки.Адрес.Долгота
	                    |ИЗ
	                    |	Документ.ЗаборТовара КАК ЗаборТовара
	                    |ГДЕ
	                    |	ЗаборТовара.Дата МЕЖДУ &НачДата И &КонДата
	                    |	И ЗаборТовара.ТочкаДоставки.Адрес.Широта <> 0
	                    |	И ЗаборТовара.ТочкаДоставки.Адрес.Долгота <> 0
	                    |	И ЗаборТовара.ТерминалДоставки = &ТерминалДоставки";
	ЗапПолигоны.УстановитьПараметр("НачДата", НачалоДня(ПериодОбработки.ДатаНачала));
	ЗапПолигоны.УстановитьПараметр("КонДата", НачалоДня(ПериодОбработки.ДатаОкончания));
	ЗапПолигоны.УстановитьПараметр("ТерминалДоставки", Регион);
	
	КолОбр = 0;
	
	РезПолигоны = ЗапПолигоны.Выполнить();
	Если Не РезПолигоны.Пустой() Тогда
		//Асеев 14.10.2022 (Задача № 4913)>>>
		МассивЗаказовЗон = Новый Массив;
		//Асеев 14.10.2022 (Задача № 4913)<<<
	
		ВыбПолигоны = РезПолигоны.Выбрать();
		МассивСтрук = Новый Массив;
		Пока ВыбПолигоны.Следующий() Цикл
			Струк = Новый Структура;
			
			Струк.Вставить("НомерЗаказа", Число(ВыбПолигоны.НомерЗаказа));
			Струк.Вставить("Широта", ВыбПолигоны.Широта);
			Струк.Вставить("Долгота", ВыбПолигоны.Долгота);
			
			МассивСтрук.Добавить(Струк);
			КолОбр = КолОбр + 1;
			
			//Асеев 14.10.2022 (Задача № 4913)>>>
			МассивЗаказовЗон.Добавить(ВыбПолигоны.НомерЗаказа);
			//Асеев 14.10.2022 (Задача № 4913)<<<
		КонецЦикла;	
		//+Широков 24.12.2020 по письму
		//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, ДатаСхем);
		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, ДатаСхем, "Обработка.АдресНаКартеЯндекс.ФормаУпр.ЗафиксироватьПолигоныЗаказовПоСхемеНаСервере(406, 3)");
		//-Широков 24.12.2020 по письму
		
		//Асеев 14.10.2022 (Задача № 4913)>>>
		ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
		//Асеев 14.10.2022 (Задача № 4913)<<<
	КонецеСли;	
	
	Возврат КолОбр;
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьПолигоныЗаказовПоСхеме(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();                                 
	Диалог.Период = Новый СтандартныйПериод(НачалоДня(ТекущаяДата() - 86400), КонецДня(ТекущаяДата() - 86400));        
	
	Если (Диалог.Редактировать()) Тогда
		ДатаСхем = ТекущаяДата();
		Если ВвестиДату(ДатаСхем, "Укажите дату схем маршрутизации..") Тогда
			КолЗаказов = ЗафиксироватьПолигоныЗаказовПоСхемеНаСервере(Диалог.Период, ДатаСхем, Объект.Регион);
		КонецеСли;	
	КонецеСли;
	Сообщить("Обработка завершена! Обработано " + Строка(КолЗаказов) + " заказов.");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Регион = Справочники.РегиональныеТерминалы.МоскваСтриж;
	СменаРегионаНаСервере();
КонецПроцедуры

&НаСервере
Процедура СменаРегионаНаСервере()
	СписокПолигонов.Параметры.УстановитьЗначениеПараметра("Терминал", Объект.Регион);
КонецПроцедуры	

Функция ПроверитьСоответствиеРегионаИСхемы()
	НайденныйЭлемент = СписокПолигонов.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Получить(0);
	Если ЗначениеЗаполнено(НайденныйЭлемент.ПравоеЗначение) Тогда
		Если НайденныйЭлемент.ПравоеЗначение.Терминал <> Объект.Регион Тогда
			Сообщить("В полигонах выбрана некорректная смена!", СтатусСообщения.ОченьВажное);
			Возврат Ложь;
		КонецЕсли;
	КонецеСли;
	Возврат Истина;
КонецФункции	

&НаКлиенте
Процедура РегионПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СменаРегионаНаСервере();
КонецПроцедуры

//Процедура ВыставитьРазмерыВКоде
