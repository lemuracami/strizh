#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если Журнал.ЕстьИерархия Тогда
		Если ДанныеСтроки.Группировка <> NULL Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Классификатор.УстановитьКартинку(БиблиотекаКартинок.новаГруппа);
	ОформлениеСтроки.Ячейки.Район.УстановитьКартинку(БиблиотекаКартинок.новаЭлемент);
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
	
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
	КонецЕсли;	
КонецФункции

Процедура Настроить()
	ПараметрыЖурнала = Новый Структура;

	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	
	КонструкторДанных.ТекстЗапроса = "
	|Справочник.новаГеоРайоны КАК Районы
	|";

	КонструкторДанных.ПостояннаяВыборка = ",
	|	Районы.Ссылка КАК Район,
	|	Представление(Районы.Ссылка) КАК Район_Пред,
	|	Районы.Владелец КАК Классификатор,
	|	Представление(Районы.Владелец) КАК Классификатор_Пред,
	|	Ложь КАК Выбран
	|";
	
	КонструкторДанных.ПостоянныйОтбор = "НЕ Районы.ПометкаУдаления";
	
	КонструкторДанных.ДобавитьПоле("Район");
	КонструкторДанных.ДобавитьОтборПоля(, "Районы.Ссылка");
	КонструкторДанных.ДобавитьСортировкуПоля("Районы.Ссылка.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Классификатор");
	КонструкторДанных.ДобавитьОтборПоля(, "Районы.Владелец");
	
	КонструкторДанных.ДобавитьПоле("КоэффициентОпытности");
	КонструкторДанных.ДобавитьВыборкуПоля(, "0");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Классификатор");
	
	КонструкторДанных.УстановитьВидимостьПолей("Классификатор", "Классификатор");
	КонструкторДанных.УстановитьВидимостьПолей(NULL, "Район, КоэффициентОпытности");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Район"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

#КонецЕсли