#Если Клиент Тогда

///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мНетОшибки;
Перем мОшибкаПараметровНастройки;
Перем мОшибкаЗагрузкиДрайвера;
Перем мОшибкаНеизвестно;
Перем мОшибкаПриПодключении;
Перем мОшибкаТестНеПройден;
Перем мОшибкаЗагрузкиСтроки;

Перем мИсточникЗагрузки;

Перем мИдентификатор;
Перем мВерсияОбработки;

Перем мВерсияТребуемая Экспорт;
Перем мВерсияИзДрайвера Экспорт;

Перем мПараметры;

Перем мТаблицаЗагрузки;
Перем мИндексЗагрузки; 

Перем мКачествоПустаяСсылка;
Перем мКачествоНовый;

Перем мПрефиксВесовогоТовара;

Перем мКодНеизвТовара;

///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает номер версии API, поддерживаемой обработкой обслуживания.
//
// Номер версии задаётся следующим образом: Ver = Vmajor + Vminor / 100.0.
// Например, в случае, если данная функция возвращает значение «1.01», это
// означает, что данная обработка  имеет версию «1.1», полностью поддерживает
// версию «1.0» и содержит некоторые дополнительные элементы.
// В случае, если отличается целая часть версии (например, «2.1»), то это
// означает, что данная обработка несовместима с версией API «1.0».
//
// Функция является обязательной для любой версии API.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Число> - Версия API обработки обслуживания.
//
//
Функция ПолучитьВерсиюAPI() Экспорт

	Результат = 2.05;
	Возврат Результат;

КонецФункции // ПолучитьВерсиюAPI()

// Функция возвращает описание текущей обработки обслуживания (API v2.0).
//
// Данная функция позволяет серверу получить информацию об обработке
// обслуживания. Функция является обязательной для версий 1.X API.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Структура> - Структура, содержащая описание текущей обработки.
//                Структура имеет следующие поля:
//
//                Вид              - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид торгового оборудования, поддерживаемый
//                                   данной обработкой обслуживания.
//
//                СписокМоделей    - <Массив>
//                                 - Список поддерживаемых обработкой моделей
//                                   торгового оборудования.
//
//                Наименование     - <Строка>
//                                 - Наименование обработки обслуживания.
//
//                Описание         - <Строка>
//                                 - Описание обработки обслуживания.
//
//                ВерсияОбработки  - <Число>
//                                 - Номер версии обработки обслуживания
//                                   (не версии API!!!).
//                                   Данный параметр используется при
//                                   обновлении.
//                                   Номер версии задаётся следующим образом:
//                                   Ver = Vmajor + Vminor / 100.0.
//
Функция ПолучитьОписание() Экспорт

	Результат = Новый Структура("Вид, СписокМоделей, Наименование, Описание, ВерсияОбработки, Идентификатор");

	Модели = Новый Массив;
	Модели.Добавить("Motorola(Symbol) MC1000");
	Модели.Добавить("Motorola(Symbol) MT2070");
	Модели.Добавить("Motorola(Symbol) MT2090");
	Модели.Добавить("Motorola(Symbol) MС2100");
    Модели.Добавить("Motorola(Symbol) MС2180");
	Модели.Добавить("Motorola(Symbol) MC3000");
	Модели.Добавить("Motorola(Symbol) MC3090");
	Модели.Добавить("Motorola(Symbol) MC3100");
	Модели.Добавить("Motorola(Symbol) MC3190");
	Модели.Добавить("Motorola(Symbol) MC9000");
	Модели.Добавить("Motorola(Symbol) MC9090");
	Модели.Добавить("Motorola(Symbol) MC9190 (Mobile)");
	Модели.Добавить("Motorola(Symbol) MC9500");
	Модели.Добавить("Motorola(Symbol) MC9590");
	Модели.Добавить("Motorola(Symbol) MC9590 (Embedded)");
	Модели.Добавить("Motorola(Symbol) MC17");
	Модели.Добавить("Motorola(Symbol) MC35");
	Модели.Добавить("Motorola(Symbol) MC45");
	Модели.Добавить("Motorola(Symbol) MC50");
	Модели.Добавить("Motorola(Symbol) MC55");
	Модели.Добавить("Motorola(Symbol) MC70");
	Модели.Добавить("Motorola(Symbol) MC75");
	Модели.Добавить("Motorola(Symbol) PPT8800");
	Модели.Добавить("Motorola(Symbol) WT4090");
	Модели.Добавить("Motorola(Symbol)");
	    	
	Модели.Добавить("CASIO IT-300");
	Модели.Добавить("CASIO IT-600");
	Модели.Добавить("CASIO IT-800");
	Модели.Добавить("CASIO DT-X5");
	Модели.Добавить("CASIO DT-X7");
	Модели.Добавить("CASIO DT-X8");
	Модели.Добавить("CASIO DT-X30");
	
	Модели.Добавить("Opticon H-15");
	Модели.Добавить("Opticon Н-19");
	Модели.Добавить("Opticon Н-21");
	Модели.Добавить("Opticon PHL-7112");
	
	Модели.Добавить("Intermec CK31");
	Модели.Добавить("Intermec CK61");
	Модели.Добавить("Intermec CN3");
	Модели.Добавить("Intermec CK3");
	Модели.Добавить("Intermec CN50");
	Модели.Добавить("Intermec CN2B");
	
	Модели.Добавить("Honeywell 5100");
	Модели.Добавить("Honeywell Dolphin 99ex");
	Модели.Добавить("Honeywell Dolphin 6000");
	Модели.Добавить("Honeywell Dolphin 6100");
	Модели.Добавить("Honeywell Dolphin 6500");
	Модели.Добавить("Honeywell Dolphin 7600");
	Модели.Добавить("Honeywell Dolphin 9700");
	Модели.Добавить("Honeywell Dolphin 9900");
	
	Модели.Добавить("Unitech HT660");
	Модели.Добавить("Unitech HT660e");
	Модели.Добавить("Unitech HT682 (Win CE)");
	Модели.Добавить("Unitech PA962");
	Модели.Добавить("Unitech PA963");
	Модели.Добавить("Unitech PA968");
	
	Модели.Добавить("Bitatek IT7000");
	Модели.Добавить("Bitatek IT8000");
	Модели.Добавить("Bitatek IT-8000 (Win CE)");
	Модели.Добавить("Bitatek IT-9000 (Win CE)");
	
	Модели.Добавить("Datalogic Falcon");
	Модели.Добавить("Datalogic Skorpio");
	Модели.Добавить("Datalogic Skorpio X3");
	Модели.Добавить("Datalogic Memor");
	
	Модели.Добавить("CipherLab CP30");
	Модели.Добавить("CipherLab CP50");
	Модели.Добавить("CipherLab CP60 (Mobile)");
	Модели.Добавить("CipherLab 9200 (Mobile)");
	Модели.Добавить("CipherLab 9300");
	Модели.Добавить("CipherLab 9371");
	Модели.Добавить("CipherLab 9500");
	Модели.Добавить("CipherLab 9600");
	Модели.Добавить("CipherLab 9671");
	
	Модели.Добавить("Psion Teklogix");
	
	Модели.Добавить("Proton PMC-1100");
	Модели.Добавить("Proton PMC-1200");

	
	Модели.Добавить("M3 Mobile MC6400");
	Модели.Добавить("M3 Mobile MC6700");
	
	Модели.Добавить("Nordic ID PL3000");
	
	Модели.Добавить("LXE MX7 Tecton");
	Модели.Добавить("LXE HX2");
	
	Модели.Добавить("SEUIC AutoID A7P");
	Модели.Добавить("SEUIC AutoID8 (Win CE)");
	
	Модели.Добавить("Pidion BIP-5000 (Mobile)");
	Модели.Добавить("Pidion BIP-6000 (Mobile)");
	Модели.Добавить("Pidion BIP-7000 (Win CE)");
	
	Модели.Добавить("g.STAR 8010");
	
	Модели.Добавить("Urovo V5 (Win CE)");
	
	Модели.Добавить("PSC Falcon 4410 (WinCE)");
	
	Модели.Добавить("Catchwell CW20");
	Модели.Добавить("Catchwell CW30");
    Модели.Добавить("Catchwell CW31"); 
	
	Модели.Добавить("PointMobile PM260 (Win CE)"); 
	
	Модели.Добавить("Другой");
	Модели.Добавить("Автонастройка");   	


	мМетаданные               = Метаданные();
	Результат.Вид             = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных;
	Результат.СписокМоделей   = Модели;
	Результат.Наименование    = мМетаданные.Синоним;
	Результат.Описание        = мМетаданные.Комментарий;
	Результат.ВерсияОбработки = мВерсияОбработки;
	Результат.Идентификатор   = мИдентификатор;

	Возврат Результат;

КонецФункции // ПолучитьОписание()

// Функция создаёт объект драйвера.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Выходной параметр; объект драйвера торгового
//                                   оборудования.
//
//  Модель                         - <Строка>
//                                 - Модель торгового оборудования, для которой
//                                   создаётся экземпляр драйвера.
//
//  Параметры                      - <Строка>
//                                 - Параметры подключаемого торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция СоздатьОбъектДрайвера(Объект, Модель, Параметры) Экспорт

	Результат      = мНетОшибки;
	Объект         = Неопределено;
	ОписаниеОшибки = "";
	ИДУстройства   = "";
	
	мПараметры = Параметры;
	
	//Порт                     = Неопределено;
	//Скорость                 = Неопределено;
	ТипСвязи                 = Неопределено;
	//НомерБазы                = Неопределено;
	//НомерДокумента           = Неопределено;
	ВыбиратьИсточникЗагрузки = Неопределено;
	

	//Параметры.Свойство("Порт",                     Порт);
	//Параметры.Свойство("Скорость",                 Скорость);
	Параметры.Свойство("ТипСвязи",                 ТипСвязи);
	//Параметры.Свойство("НомерБазы",                НомерБазы);
	//Параметры.Свойство("НомерДокумента",           НомерДокумента);
	Параметры.Свойство("ВыбиратьИсточникЗагрузки", ВыбиратьИсточникЗагрузки);

	Если 
	 //   НомерБазы                = Неопределено
	 //Или НомерДокумента           = Неопределено
	 //Или 
	    ТипСвязи = Неопределено Или
	 	ВыбиратьИсточникЗагрузки = Неопределено Тогда
		Результат = мОшибкаПараметровНастройки;
	Иначе
		Попытка
			ПрогИД = "AddIn.Cl.TerminalConnector";
			ПодключитьВнешнююКомпоненту(ПрогИД);
			Драйвер = Новый (ПрогИД);
		Исключение
			Результат = мОшибкаЗагрузкиДрайвера;
			ОписаниеОшибки = "Невозможно подключить внешнюю компоненту.
			| Проверьте, что внешняя корректно установлена и имеет ту же версию, 
			| что и обработка обслуживания.";
		КонецПопытки;

		Если Результат = мНетОшибки Тогда
			Попытка
				мВерсияИзДрайвера = Драйвер.ПолучитьНомерВерсии();
			Исключение
				#Если Клиент Тогда
				Сообщить("""" + Модель + """:" + Символы.ПС +
				    "Внимание! Невозможно определить версию драйвера." + Символы.ПС +
				    "Требуемая версия: " + мВерсияТребуемая + Символы.ПС +
				    "Корректная работа драйвера не гарантируется", СтатусСообщения.Внимание);
				#КонецеСли	
			КонецПопытки;
			
			Если мВерсияИзДрайвера <> Неопределено И Не ВерсииРавны() Тогда
				#Если Клиент Тогда
				Сообщить("""" + Модель + """:" + Символы.ПС +
				"Внимание! Текущая версия внешней компоненты драйвера отличается от версии, поддерживаемой данной обработкой." + Символы.ПС +
				"Текущая версия: " + мВерсияИзДрайвера + Символы.ПС +
				"Требуемая версия: " + мВерсияТребуемая + Символы.ПС +
				"Корректная работа драйвера не гарантируется"+ Символы.ПС +
				"Подробнее см. http://www.cleverence.ru/techsupport/reconnect-treatments.htm", СтатусСообщения.Внимание);
				#КонецеСли
			КонецЕсли;

			Объект = Новый Структура("Модель, Параметры, Драйвер, ОписаниеОшибки, ИДУстройства",
			                          Модель, Параметры, Драйвер, ОписаниеОшибки, ИДУстройства);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СоздатьОбъектДрайвера()

// Функция возвращает набор событий драйвера и параметры их обработки для
// заданной модели торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект            - <*>
//                    - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - Таблица значений, содержащая информацию о внешних
//                      событиях, генерируемых драйвером.
//                      Таблица имеет следующие колонки:
//                       "ИмяСобытия" - <Строка> - Имя внешнего события.
//
Функция ПолучитьОписаниеСобытий(Объект) Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяСобытия");

	Возврат Таблица;

КонецФункции // ПолучитьОписаниеСобытий()

// Функция осуществляет подключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция Подключить(Объект) Экспорт

	Результат = мНетОшибки;

	МассивЗначений = Новый Массив;
	
	ТипСвязи = Неопределено;
	СтрокаПодключенияКСерверу = Неопределено;
	Прокси = Неопределено;
	ПортПрокси = Неопределено;
	ПереписыватьНоменклатуру = Неопределено;
	
	мПараметры.Свойство("ТипСвязи", ТипСвязи);
	мПараметры.Свойство("СтрокаПодключенияКСерверу", СтрокаПодключенияКСерверу);
	мПараметры.Свойство("Прокси", Прокси);
	мПараметры.Свойство("ПортПрокси", ПортПрокси);
		
	Если ТипСвязи = "ПрямаяСвязь" Тогда
		МассивЗначений.Добавить(0);
	// Жульков 04.10.2013 +	
	ИначеЕсли ТипСвязи = "RDPСвязь" Тогда
		МассивЗначений.Добавить(0);   // 0 - Обмен с терминалом, 1 - с сервером
		МассивЗначений.Добавить(1);   // 1 - Переписывать номенклатуру, 0 - нет

		мОбменЧерезПапку = Неопределено;
		Объект.Параметры.Свойство("ОбменЧерезПапку", мОбменЧерезПапку); 
		
		ОбменЧерезПапку = ?(мОбменЧерезПапку = Неопределено, Ложь, мОбменЧерезПапку);
		
		Если ОбменЧерезПапку Тогда
			МассивЗначений.Добавить(Объект.Параметры.ПапкаОбмена);
		Иначе
			МассивЗначений.Добавить(Неопределено);
		КонецЕсли;
	// Жульков 04.10.2013 -
	Иначе
		МассивЗначений.Добавить(1);
		
		Прокси = ?(Прокси = Неопределено, "", Прокси);
		ПортПрокси = ?(ПортПрокси = Неопределено, 0, ПортПрокси);
	
		МассивЗначений.Добавить(ПолучитьСтрокуПодключения(СтрокаПодключенияКСерверу));
		МассивЗначений.Добавить(Прокси);
		МассивЗначений.Добавить(ПортПрокси);
	КонецЕсли;
		
	мПараметры.Свойство("ПереписыватьНоменклатуру", ПереписыватьНоменклатуру);	
	Если ПереписыватьНоменклатуру <> Неопределено Тогда
		МассивЗначений.Добавить(ПереписыватьНоменклатуру);	
	КонецЕсли;
	
	Если Не Объект.Драйвер.Подключить(МассивЗначений, Объект.ИДУстройства) Тогда
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
		Результат = мОшибкаПриПодключении;
	КонецЕсли;
	
	Объект.Драйвер.ОсвободитьРесурсы();
	
	Возврат Результат;

КонецФункции // Подключить()

// Процедура осуществляет отключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект - <*>
//         - Объект драйвера торгового оборудования.
//
Процедура Отключить(Объект) Экспорт

	Объект.Драйвер.Отключить(Объект.ИДУстройства);

КонецПроцедуры // Отключить()

// Функция осуществляет проверку правильности настройки и подключения
// торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства, проверка
//                                   которого предполагается.
//
//  ОписаниеРезультата             - <Строка>
//                                 - Выходной параметр; в случае, если тест
//                                   завершился неудачно, в данный параметр
//                                   помещается рекомендация для пользователя
//                                   (как ему действовать дальше).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ТестУстройства(Объект) Экспорт

	Результат = мНетОшибки;

	Если Подключить(Объект) <> мНетОшибки Тогда
		Результат = мОшибкаНеизвестно;
	КонецЕсли;

	Отключить(Объект);

	Возврат Результат;

КонецФункции // ТестУстройства()

// Процедура осуществляет вызов формы настройки торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Модель    - <Строка>
//            - Модель настраиваемого оборудования.
//
//  Параметры - <Структура>
//            - Входной/выходной параметр; структура параметров.
//
Процедура НастроитьОборудование(Модель, Параметры) Экспорт

	Форма            = ПолучитьФорму("ФормаНастройки");
	Форма.мМодель    = Модель;
	Форма.мПараметры = Параметры;
	Ответ            = Форма.ОткрытьМодально();

	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Параметры = Форма.мПараметры;
		мПараметры = Форма.мПараметры;
	КонецЕсли;

КонецПроцедуры // НастроитьОборудование()

// Функция возвращает имя источника внешнего события 
// генерируемое при подключеннии внешней компонентой.
// По уникальному для сеанса подключения имени производится поиск 
// из конфигурации обработки обслуживания для обработки полученного
// события.
// (API v2.1)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства.
//
// Возвращаемое значение:
//  <Строка> - Имя внешнего источника события.
//
Функция ПолучитьИмяИсточникаВнешнегоСобытия(Объект) Экспорт

	Возврат "";

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ФУНКЦИИ API ОБРАБОТОК ОБСЛУЖИВАНИЯ ТСД)

// Функция осуществляет инициализацию процедуры выгрузки данных в терминал
// сбора данных.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция НачатьВыгрузку(Объект) Экспорт

	мКодНеизвТовара = 1;

	Результат = мНетОшибки;
	Результат = Подключить(Объект);
	Если Результат <> мНетОшибки Тогда
		Возврат Результат;
	КонецЕсли;

	Если Не Объект.Драйвер.НачатьВыгрузку() Тогда
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
		Результат = мОшибкаНеизвестно;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // НачатьВыгрузку()

// Функция осуществляет выгрузку строки в терминал сбора данных.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Штрихкод                       - <Строка>
//                                 - Штрихкод товара.
//
//  Номенклатура                   - <СправочникСсылка.Номенклатура>
//                                 - Номенклатура.
//
//  ЕдиницаИзмерения               - <СправочникСсылка.ЕдиницыИзмерения>
//                                 - Единица измерения номенклатуры.
//
//  ХарактеристикаНоменклатуры     - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                 - Характеристика номенклатуры.
//
//  СерияНоменклатуры              - <СправочникСсылка.СерииНоменклатуры>
//                                 - Серия номенклатуры.
//
//  Качество                       - <СправочникСсылка.Качество>
//                                 - Качество.
//
//  Цена                           - <Число>
//                                 - Цена номенклатуры.
//
//  Количество                     - <Число>
//                                 - Количество номенклатуры.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьСтроку(Объект, Штрихкод, Номенклатура, ЕдиницаИзмерения,
                        ХарактеристикаНоменклатуры, СерияНоменклатуры,
                        Качество, Цена, Количество) Экспорт
						
	Код = "";
	ШК                   	= Строка(Штрихкод);
	Наименование            = Строка(Номенклатура);
	ЕдИзмНаименование       = Строка(ЕдиницаИзмерения);
	Характеристика 			= Строка(ХарактеристикаНоменклатуры);
	Серия          			= Строка(СерияНоменклатуры);
	КачествоНаименование    = Строка(Качество);
	
	ЦенаЧисло = 0;
	Если ЗначениеЗаполнено(Цена) Тогда
		Попытка
			ЦенаЧисло       = Число(Цена);
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
	КоличествоЧисло = 0;
	Если ЗначениеЗаполнено(Количество) Тогда
		Попытка
			КоличествоЧисло = Число(Количество);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	времИспШаблоныВесового = Неопределено;
	мПараметры.Свойство("ИспШаблоныВесовогоТовара", времИспШаблоныВесового);
	ИспШаблоныВесовогоТовара = ?(времИспШаблоныВесового = Неопределено, Истина, времИспШаблоныВесового);
	
	времПрефиксВесовогоТовара = Неопределено;
	мПараметры.Свойство("ПрефиксВесовогоТовара", времПрефиксВесовогоТовара);
	ПрефиксВесовогоТовара = ?(времПрефиксВесовогоТовара = Неопределено, ПолучитьПрефиксВесовогоТовара(), времПрефиксВесовогоТовара);
	
	времДлинаКодаВесовогоТовара = Неопределено;
	мПараметры.Свойство("ДлинаКодаВесовогоТовара", времДлинаКодаВесовогоТовара);
	ДлинаКодаВесовогоТовара = ?(времДлинаКодаВесовогоТовара = Неопределено, ПолучитьДлинуКодаВесовогоТовара(), времДлинаКодаВесовогоТовара);
		
	времЧислоЗнаковПослеЗапВВесе = Неопределено;
	мПараметры.Свойство("ЧислоЗнаковПослеЗапВВесе", времЧислоЗнаковПослеЗапВВесе);
	ЧислоЗнаковПослеЗапВВесе = ?(времЧислоЗнаковПослеЗапВВесе = Неопределено, 2, времЧислоЗнаковПослеЗапВВесе);
	
	ДлинаПрефикса = СтрДлина(ПрефиксВесовогоТовара);
	МаксЗнач      = 10 - ДлинаКодаВесовогоТовара;
		
	ШК1 = Штрихкод;
	//ИскатьКод = Истина;
	КодНайден = Ложь;
	
	Если РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
		ШаблонВеса = Ложь;
		
		Префикс = Лев(ШК1, ДлинаПрефикса);
		КодНайден = Ложь;
		Если Префикс = ПрефиксВесовогоТовара Тогда
			КодТовара = Сред(ШК1, ДлинаПрефикса+1, ДлинаКодаВесовогоТовара);
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|    РегКВТ.Номенклатура                         КАК Номенклатура,
				|    ВЫБОР
				|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
				|            &КачествоНовый
				|        ИНАЧЕ
				|            РегКВТ.Качество
				|    КОНЕЦ                                       КАК Качество
				|ИЗ
				|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
				|ГДЕ
				|    РегКВТ.Код = &Код
				|");

			КодЧисло = -1;
			Попытка
				КодЧисло = Число(КодТовара);
			Исключение
				#Если Клиент Тогда

				Сообщить("Ошибка при обработке штрихкода " + ШК1 + ". Получение кода товара: " + КодТовара);		
				#КонецеСли
			КонецПопытки;
			
			Если КодЧисло <> -1 Тогда
				Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
				Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
				Запрос.УстановитьПараметр("Код",                  КодЧисло);

				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда	
					КодНайден = Истина;
					ТаблРез = РезультатЗапроса.Выгрузить();
					Код = ТаблРез[0].Номенклатура.Код;
					
					Если ИспШаблоныВесовогоТовара = Истина Тогда
						ШаблонВеса = Истина;
						ПередЗапЗн = МаксЗнач - ЧислоЗнаковПослеЗапВВесе;
						ШК1 = Префикс + КодТовара + "{Quantity:" + ПередЗапЗн + "." + ЧислоЗнаковПослеЗапВВесе + "}{x:1}";
						ШК = ШК1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
						
		Если ШаблонВеса = Ложь Тогда
			// Обрезка нулей слева, если штрихкод в кодировке EAN13
			//инд = 1;
			//Пока инд < СтрДлина(ШК) Цикл
			//	Если Сред(ШК, инд, 1) <> "0" Тогда
			//		Прервать;
			//	КонецЕсли;
			//	инд = инд+1;
			//КонецЦикла;
			
			//Если инд > 1 тогда
			//	СтрокаТаблицы.Штрихкод = Прав(ШК, СтрДлина(ШК)-инд+1);  
			//КонецЕсли;	
			
			Если Лев(ШК1, 1) = "0" Тогда
				ШК = Прав(ШК1, СтрДлина(ШК1)-1);	
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	Если КодНайден = Ложь Тогда
		Запрос = Новый Запрос("
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|    РегШК.Владелец                   КАК Владелец
				|ИЗ
				|    РегистрСведений.Штрихкоды        КАК РегШК
				|ГДЕ
				|    РегШК.Штрихкод = &Штрихкод
				|");

		Запрос.УстановитьПараметр("Штрихкод", ШК1);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблРез = РезультатЗапроса.Выгрузить();
			Код = ТаблРез[0].Владелец.Код;
		Иначе
			#Если Клиент Тогда
			
			Сообщить("По штрихкоду " + ШК1 + " не найден товар. Если выгружается весовой товар, проверьте настройку префикса весового товара в параметрах драйвера.", СтатусСообщения.Важное);	
			#КонецеСли
			Код = "Товар" + мКодНеизвТовара;
			мКодНеизвТовара = мКодНеизвТовара + 1;	
		КонецЕсли;
	КонецЕсли;
		
	Результат = мНетОшибки;
	Если Не Объект.Драйвер.ВыгрузитьСтроку(Код,
						ШК, Наименование, ЕдИзмНаименование,
                        Характеристика, Серия,
                        КачествоНаименование, ЦенаЧисло, КоличествоЧисло) Тогда
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
		Результат = мОшибкаНеизвестно;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ВыгрузитьСтроку()

// Функция осуществляет деинициализацию процедуры выгрузки данных в терминал
// сбора данных.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ЗавершитьВыгрузку(Объект) Экспорт

	Результат = мНетОшибки;
	Если Не Объект.Драйвер.ЗавершитьВыгрузку() Тогда
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
		Результат = мОшибкаНеизвестно;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ЗавершитьВыгрузку()

// Функция осуществляет инициализацию процедуры загрузки данных из терминала
// сбора данных.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Количество                     - <Число>
//                                 - Выходной параметр; количество записей в терминале
//                                   сбора данных.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция НачатьЗагрузку(Объект, Количество) Экспорт

	//Результат = мНетОшибки;
	//		
	//Если мПараметры.ВыбиратьИсточникЗагрузки Тогда
	//	ФормаВыбора = ПолучитьФорму("ФормаВыбора");
	//	ФормаВыбора.мВыбор = мИсточникЗагрузки;
	//	Ответ = ФормаВыбора.ОткрытьМодально();
	//	мИсточникЗагрузки = ФормаВыбора.мВыбор;
	//	
	//	Если Ответ = КодВозвратаДиалога.ОК Тогда
	//		Если мИсточникЗагрузки = "Документ" Тогда
	//			Количество = Объект.Драйвер.НачатьЗагрузку(0, 1); //Объект.Параметры.НомерДокумента);
	//		Иначе
	//			Количество = Объект.Драйвер.НачатьЗагрузку(1, 1); //Объект.Параметры.НомерБазы);
	//		КонецЕсли;
	//		
	//		Если Количество = -1 Тогда
	//			НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
	//			Результат = мОшибкаНеизвестно;
	//		КонецЕсли;	
	//	Иначе
	//		Объект.ОписаниеОшибки = "Операция отменена пользователем";
	//		Результат = мОшибкаНеизвестно;
	//	КонецЕсли;
	//Иначе
	//	Количество = Объект.Драйвер.НачатьЗагрузку(0, 1);
	//КонецЕсли;

	//Возврат Результат;

	Результат = мНетОшибки;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Штрихкод");
	Таблица.Колонки.Добавить("Количество");

	мИндексЗагрузки = 0;
	
	Если ЗагрузитьТаблицу(Объект, Таблица) = мНетОшибки Тогда
		мТаблицаЗагрузки = Таблица;
		Количество = Таблица.Количество();
	Иначе
		Количество = -1;
		Результат = мОшибкаНеизвестно;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НачатьЗагрузку()

// Функция осуществляет загрузку строки из терминала сбора данных.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Штрихкод                       - <Строка>
//                                 - Штрихкод, соответствующий данной номенклатуре.
//
//  Количество                     - <Число>
//                                 - Выходной параметр; количество номенклатуры.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ЗагрузитьСтроку(Объект, Штрихкод, Количество) Экспорт
	
	Результат         = мНетОшибки;
			
	//Если Не Объект.Драйвер.ПолучитьЗапись(Штрихкод, Количество) Тогда
	//	НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
	//	Результат = мОшибкаНеизвестно;
	//Иначе
	//	
	//КонецЕсли;

	Если мТаблицаЗагрузки <> Неопределено Тогда
		Строка = мТаблицаЗагрузки.Получить(мИндексЗагрузки);
		Штрихкод = Строка.Штрихкод;
		Количество = Строка.Количество;
		
		мИндексЗагрузки = мИндексЗагрузки + 1;
	Иначе
		Результат = мОшибкаНеизвестно;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьСтроку()

// Функция осуществляет деинициализацию процедуры загрузки данных из терминала
// сбора данных.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ЗавершитьЗагрузку(Объект) Экспорт
	
	Результат         = мНетОшибки;
	
	//Если Не Объект.Драйвер.ЗавершитьЗагрузку() Тогда
	//	НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
	//	Результат = мОшибкаНеизвестно;
	//КонецЕсли;
	
	//ПроверитьДемо(Объект);
	
	//Если Объект.Драйвер.ПроверитьДемо() = 1 Тогда
	//	кодТерм = Объект.Драйвер.ПолучитьИдТерминала();
	//	Вопрос("Проверка лицензии для терминала '" + кодТерм + "' прошла неудачно. Драйвер работает в режиме демо-версии. Из документа загружаются только первые 3 строки.", РежимДиалогаВопрос.ОК);
	//КонецЕсли;

	
	//Если мИсточникЗагрузки = "Документ" Тогда
	//	Очистить = Вопрос("Удалить с терминала загруженный документ?", РежимДиалогаВопрос.ДаНет);
	//	Если Очистить = КодВозвратаДиалога.Да Тогда
	//		Объект.Драйвер.УдалитьДокумент(1);	
	//	КонецЕсли;
	//Иначе
		//Очистить = Вопрос("Удалить с терминала загруженные документы?", РежимДиалогаВопрос.ДаНет);
		//Если Очистить = КодВозвратаДиалога.Да Тогда
		//	Объект.Драйвер.УдалитьЗавершенныеДокументы();	
		//КонецЕсли;
	//КонецЕсли;
	
	мТаблицаЗагрузки = Неопределено;
	мИндексЗагрузки	 = 0;
	
	Возврат Результат;

КонецФункции // ЗавершитьЗагрузку()

// Функция осуществляет выгрузку таблицы в терминал сбора данных.
// (API v2.2)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Штрихкод                       - <Строка>
//                                 - Штрихкод товара.
//
//  Номенклатура                   - <СправочникСсылка.Номенклатура>
//                                 - Номенклатура.
//
//  ЕдиницаИзмерения               - <СправочникСсылка.ЕдиницыИзмерения>
//                                 - Единица измерения номенклатуры.
//
//  ХарактеристикаНоменклатуры     - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                 - Характеристика номенклатуры.
//
//  СерияНоменклатуры              - <СправочникСсылка.СерииНоменклатуры>
//                                 - Серия номенклатуры.
//
//  Качество                       - <СправочникСсылка.Качество>
//                                 - Качество.
//
//  Цена                           - <Число>
//                                 - Цена номенклатуры.
//
//  Количество                     - <Число>
//                                 - Количество номенклатуры.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьТаблицу(Объект, ТаблицаВыгрузки) Экспорт
	Перем ИспШаблоныВесовогоТовара;
	Перем ПрефиксВесовогоТовара;
	Перем ДлинаКодаВесовогоТовара; 
	Перем КоэффициентВеса;
	
	Результат = мНетОшибки;
	Результат = Подключить(Объект);
	Если Результат <> мНетОшибки Тогда
		Возврат Результат;
	КонецЕсли;
	
	времИспШаблоныВесового = Неопределено;
	мПараметры.Свойство("ИспШаблоныВесовогоТовара", времИспШаблоныВесового);
	ИспШаблоныВесовогоТовара = ?(времИспШаблоныВесового = Неопределено, Истина, времИспШаблоныВесового);
	
	времПрефиксВесовогоТовара = Неопределено;
	мПараметры.Свойство("ПрефиксВесовогоТовара", времПрефиксВесовогоТовара);
	ПрефиксВесовогоТовара = ?(времПрефиксВесовогоТовара = Неопределено, ПолучитьПрефиксВесовогоТовара(), времПрефиксВесовогоТовара);
	
	времДлинаКодаВесовогоТовара = Неопределено;
	мПараметры.Свойство("ДлинаКодаВесовогоТовара", времДлинаКодаВесовогоТовара);
	ДлинаКодаВесовогоТовара = ?(времДлинаКодаВесовогоТовара = Неопределено, ПолучитьДлинуКодаВесовогоТовара(), времДлинаКодаВесовогоТовара);
	
	//времКоэффициентВеса = Неопределено;
	//мПараметры.Свойство("КоэффициентВеса", времКоэффициентВеса);
	//КоэффициентВеса = ?(времКоэффициентВеса = Неопределено, 1000, времКоэффициентВеса);
	
	времЧислоЗнаковПослеЗапВВесе = Неопределено;
	мПараметры.Свойство("ЧислоЗнаковПослеЗапВВесе", времЧислоЗнаковПослеЗапВВесе);
	ЧислоЗнаковПослеЗапВВесе = ?(времЧислоЗнаковПослеЗапВВесе = Неопределено, 2, времЧислоЗнаковПослеЗапВВесе);
	
	ДлинаПрефикса = СтрДлина(ПрефиксВесовогоТовара);
	МаксЗнач      = 10 - ДлинаКодаВесовогоТовара;
	
	//Если ИспШаблоныВесовогоТовара = Истина Тогда
	//	ТаблицаВыгрузки.Колонки.Добавить("weightGoods");	
	//	ТаблицаВыгрузки.Колонки.Добавить("weightFactor");
	//КонецЕсли;
	
	ИскатьКод = Ложь;
	Если ТаблицаВыгрузки.Колонки.Найти("Код") = Неопределено Тогда
		ТаблицаВыгрузки.Колонки.Добавить("Код");
		ИскатьКод = Истина;
	КонецЕсли;
	
	Если ТаблицаВыгрузки.Колонки.Найти("КоличествоВУпаковке") = Неопределено Тогда
		ТаблицаВыгрузки.Колонки.Добавить("КоличествоВУпаковке");
	КонецЕсли;
	
	ФорматВыгрузки = Справочники.ТСДФорматыДанных.НайтиПоНаименованию("Формат выгрузки");
	
	ВыгружатьАртикул = 0;
	Если (ФорматВыгрузки <> Неопределено) И (ФорматВыгрузки <> Справочники.ТСДФорматыДанных.ПустаяСсылка()) Тогда
		Попытка		
			Если (ФорматВыгрузки.СвязываемыеПоля.Найти(Перечисления.ТСДПоляДанных.НоменклатураАртикул, "ПараметрНоменклатуры") <> Неопределено) Тогда
	             ВыгружатьАртикул = 1;
				 Если ТаблицаВыгрузки.Колонки.Найти("Артикул") = Неопределено Тогда
					ТаблицаВыгрузки.Колонки.Добавить("Артикул");
				КонецЕсли;
			КонецЕсли;
		Исключение
			#Если Клиент Тогда
			
			Сообщить("В формате выгрузке не найдена колонка ПараметрНоменклатуры.", СтатусСообщения.Важное);
			#КонецеСли
	 	КонецПопытки; 
	КонецЕсли;
	
	ВыгружатьЕдИзм = 0;
    Если ТаблицаВыгрузки.Колонки.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
		ВыгружатьЕдИзм = 1;
	КонецЕсли;
	
	КодВесовогоТовараИмеетТипЧисло = Ложь;
	РеквизитКод = Метаданные.РегистрыСведений.КодыВесовогоТовара.Измерения.Найти("Код");
	Если РеквизитКод <> Неопределено и Метаданные.РегистрыСведений.КодыВесовогоТовара.Измерения.Найти("Код").Тип.СодержитТип(Тип("Число")) Тогда
		КодВесовогоТовараИмеетТипЧисло = Истина;
	КонецЕсли;

	НеизвТоварИд = 1; 
	Для Каждого СтрокаТаблицы Из ТаблицаВыгрузки Цикл
		ШК = СтрокаТаблицы.Штрихкод;
		КодНайден = Ложь;
		Товар = Неопределено;
		
		Если РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(СтрокаТаблицы.Штрихкод) Тогда
			ШаблонВеса = Ложь;
			
			Префикс = Лев(ШК, ДлинаПрефикса);
			КодНайден = Ложь;
			Если Префикс = ПрефиксВесовогоТовара Тогда
				КодТовара = Сред(ШК, ДлинаПрефикса+1, ДлинаКодаВесовогоТовара);
				
				Запрос = Новый Запрос("
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|    РегКВТ.Номенклатура                         КАК Номенклатура,
				|    ВЫБОР
				|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
				|            &КачествоНовый
				|        ИНАЧЕ
				|            РегКВТ.Качество
				|    КОНЕЦ                                       КАК Качество
				|ИЗ
				|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
				|ГДЕ
				|    РегКВТ.Код = &Код
				|");
				
				//КодЧисло = -1;
				//Попытка
				//	КодЧисло = Число(КодТовара);
				//Исключение
				//	Сообщить("Ошибка при обработке штрихкода " + ШК + ". Получение кода товара: " + КодТовара);
				//КонецПопытки;
				
				//Если КодЧисло <> -1 Тогда			
				Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
				Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
				Запрос.УстановитьПараметр("Код",   	?(КодВесовогоТовараИмеетТипЧисло,Число(КодТовара),КодТовара));
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда	
					КодНайден = Истина;
					ТаблРез = РезультатЗапроса.Выгрузить();
					Если ИскатьКод = Истина Тогда
						СтрокаТаблицы.Код = ТаблРез[0].Номенклатура.Код;
					КонецЕсли;
					
					Если ИспШаблоныВесовогоТовара = Истина Тогда
						ШаблонВеса = Истина;
						ПередЗапЗн = МаксЗнач - ЧислоЗнаковПослеЗапВВесе;
						ШК = Префикс + КодТовара + "{Quantity:" + ПередЗапЗн + "." + ЧислоЗнаковПослеЗапВВесе + "}{x:1}";
						СтрокаТаблицы.Штрихкод = ШК;
					КонецЕсли;
				КонецЕсли;
				//КонецЕсли; 				
			КонецЕсли;
			
			Если ШаблонВеса = Ложь Тогда
				Если Лев(ШК, 1) = "0" Тогда
					СтрокаТаблицы.Штрихкод = Прав(ШК, СтрДлина(ШК)-1);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИскатьКод = Истина И КодНайден = Ложь Тогда
			Запрос = Новый Запрос("
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|    РегШК.Владелец                   КАК Владелец
					|ИЗ
					|    РегистрСведений.Штрихкоды        КАК РегШК
					|ГДЕ
					|    РегШК.Штрихкод = &Штрихкод
					|");

			Запрос.УстановитьПараметр("Штрихкод", ШК);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ТаблРез = РезультатЗапроса.Выгрузить();
				Товар = ТаблРез[0].Владелец;
				СтрокаТаблицы.Код = ТаблРез[0].Владелец.Код;
			Иначе
				#Если Клиент Тогда
				Сообщить("По штрихкоду " + ШК + " не найден товар. Если выгружается весовой товар, проверьте настройку префикса весового товара в параметрах драйвера.", СтатусСообщения.Важное);
				#КонецеСли
				СтрокаТаблицы.Код = "Товар" + НеизвТоварИд;
				НеизвТоварИд = НеизвТоварИд + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		
		Если ВыгружатьАртикул = 1 Тогда
			Если (Товар <> Неопределено) И (ТаблицаВыгрузки.Колонки.Найти("Артикул") <> Неопределено) Тогда
				СтрокаТаблицы.Артикул = Товар.Артикул;	
			КонецЕсли;	
		КонецЕсли;
		
		Если (ВыгружатьЕдИзм = 1) И (Товар <> Неопределено) Тогда
			ЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(СтрокаТаблицы.ЕдиницаИзмерения,,,Товар);
			Если ЕдИзм <> Справочники.ЕдиницыИзмерения.ПустаяСсылка() Тогда
				Если ЕдИзм.Коэффициент = 0 Тогда
					#Если Клиент Тогда
					Сообщить("Для товара " + Товар + " единица измерения " + ЕдИзм + " имеет коэффициент = 0. Выгружен коэффициент = 1.");	
					#КонецеСли
					СтрокаТаблицы.КоличествоВУпаковке = 1;	
				Иначе
					СтрокаТаблицы.КоличествоВУпаковке = ЕдИзм.Коэффициент;	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
			
	Если Не Объект.Драйвер.ВыгрузитьТаблицу(Объект.ИДУстройства, ТаблицаВыгрузки, 1) Тогда
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
		Результат = мОшибкаНеизвестно;
	КонецЕсли;
	
	Объект.Драйвер.ОсвободитьРесурсы();
	
	Возврат Результат;

КонецФункции // ВыгрузитьТаблицу()

Функция ЗагрузитьНовыеШтрихкоды(Объект)
	ТаблицаНовыхШтрихкодов = Новый ТаблицаЗначений;
	ДобавленныеШК = Новый СписокЗначений;
	Ответ = Объект.Драйвер.ЗагрузитьНовыеШтрихкоды(ТаблицаНовыхШтрихкодов);
		
	Если Ответ Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаНовыхШтрихкодов Цикл
			КодТовара = СтрокаТаблицы.КодТовара;
			
			//Сообщить("КодТовара: " + КодТовара + " Упаковка: " + СтрокаТаблицы.НаименованиеУпаковки + " ");
			Запрос = Новый Запрос("
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|    РегШК.Владелец                   КАК Владелец
					|ИЗ
					|    РегистрСведений.Штрихкоды        КАК РегШК
					|ГДЕ
					|    РегШК.Штрихкод = &Штрихкод
					|");

			Запрос.УстановитьПараметр("Штрихкод", СтрокаТаблицы.Штрихкод);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ТаблицаРез = РезультатЗапроса.Выгрузить();
				ДобавленныеШК.Добавить(СтрокаТаблицы.Штрихкод);
				#Если Клиент Тогда
				Сообщить("Штрихкод не добавлен! Штрихкод: '" + СтрокаТаблицы.Штрихкод + "' уже заведен для товара: '" + ТаблицаРез[0].Владелец + "'.");				
				#КонецеСли
				Продолжить;	
			КонецЕсли;
			
			Товар = Справочники.Номенклатура.НайтиПоКоду(КодТовара);
			Если Товар <> Неопределено Тогда
				Отбор = Новый Структура("Наименование");
				Отбор.Наименование = СтрокаТаблицы.НаименованиеУпаковки;
				Выборка = Справочники.ЕдиницыИзмерения.Выбрать(,Товар.Ссылка, Отбор); 				
				Если Не Выборка.Следующий() Тогда
					#Если Клиент Тогда
					Сообщить("Загрузка новых штрихкодов: не найдена единица измерения с именем '" + СтрокаТаблицы.НаименованиеУпаковки + "'", СтатусСообщения.ОченьВажное);
					#КонецеСли
					Продолжить;
				КонецЕсли;
				
				Запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				Запись.Владелец = Товар.Ссылка;
				Запись.ЕдиницаИзмерения = Выборка.Ссылка;
				Запись.Штрихкод = СтрокаТаблицы.Штрихкод;
				Запись.Качество = Справочники.Качество.Новый;
				
				Если РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(СтрокаТаблицы.Штрихкод) Тогда
					Запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
				Иначе
					Запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39;
				КонецЕсли;
				
				Попытка
					Запись.Записать();
					ДобавленныеШК.Добавить(СтрокаТаблицы.Штрихкод);
				Исключение
					#Если Клиент Тогда
					Сообщить("Для товара '" + Товар.Наименование + "' не удалось добавить штрихкод '" + СтрокаТаблицы.Штрихкод + "'. Ошибка: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);	
					#КонецеСли
					Продолжить;	
				КонецПопытки;
				#Если Клиент Тогда
				Сообщить("Для товара '" + Товар.Наименование + "' добавлен штрихкод '" + СтрокаТаблицы.Штрихкод + "'");
				#КонецеСли
			Иначе
				#Если Клиент Тогда
				Сообщить("Загрузка новых штрихкодов: не найдена номенклатура с кодом '" + КодТовара + "'", СтатусСообщения.ОченьВажное);
				#КонецеСли
			КонецЕсли;
		КонецЦикла;	
		Ответ = Объект.Драйвер.ОбновитьШтрихкоды(ДобавленныеШК);										
	КонецЕсли;
	
	Если Не Ответ Тогда
		ОписаниеОшибки = "";
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(ОписаниеОшибки);
		#Если Клиент Тогда
		Сообщить("Ошибка при загрузке новых штрихкодов: " + ОписаниеОшибки);
		#КонецеСли
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

// Функция осуществляет загрузку таблицы из терминала сбора данных.
// (API v2.2)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Штрихкод                       - <Строка>
//                                 - Штрихкод, соответствующий данной номенклатуре.
//
//  Количество                     - <Число>
//                                 - Выходной параметр; количество номенклатуры.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ЗагрузитьТаблицу(Объект, ТаблицаЗагрузки) Экспорт

	Результат = мНетОшибки;
	Результат = Подключить(Объект);
	Если Результат <> мНетОшибки Тогда
		Возврат Результат;
	КонецЕсли;

	Ответ = Ложь;
	ЗагрузкаИзДокумента = Истина;
	СписДок = Неопределено;

	ВыбиратьИсточникЗагрузки = Неопределено;
	ТипСвязи = Неопределено;
	
	времВыбиратьИсточникЗагрузки = Неопределено;
	мПараметры.Свойство("ВыбиратьИсточникЗагрузки", времВыбиратьИсточникЗагрузки);
	ВыбиратьИсточникЗагрузки = ?(времВыбиратьИсточникЗагрузки = Неопределено, Ложь, времВыбиратьИсточникЗагрузки);
	
	времТипСвязи = Неопределено;
	мПараметры.Свойство("ТипСвязи", времТипСвязи);
	ТипСвязи = ?(времТипСвязи = Неопределено, "Сервер", времТипСвязи);
	
	времИспШаблоныВесового = Неопределено;
	мПараметры.Свойство("ИспШаблоныВесовогоТовара", времИспШаблоныВесового);
	ИспШаблоныВесовогоТовара = ?(времИспШаблоныВесового = Неопределено, Истина, времИспШаблоныВесового);
	
	времПрефиксВесовогоТовара = Неопределено;
	мПараметры.Свойство("ПрефиксВесовогоТовара", времПрефиксВесовогоТовара);
	ПрефиксВесовогоТовара = ?(времПрефиксВесовогоТовара = Неопределено, ПолучитьПрефиксВесовогоТовара(), времПрефиксВесовогоТовара);
	
	времДлинаКодаВесовогоТовара = Неопределено;
	мПараметры.Свойство("ДлинаКодаВесовогоТовара", времДлинаКодаВесовогоТовара);
	ДлинаКодаВесовогоТовара = ?(времДлинаКодаВесовогоТовара = Неопределено, ПолучитьДлинуКодаВесовогоТовара(), времДлинаКодаВесовогоТовара);
	
	времЧислоЗнаковПослеЗапВВесе = Неопределено;
	мПараметры.Свойство("ЧислоЗнаковПослеЗапВВесе", времЧислоЗнаковПослеЗапВВесе);
	ЧислоЗнаковПослеЗапВВесе = ?(времЧислоЗнаковПослеЗапВВесе = Неопределено, 2, времЧислоЗнаковПослеЗапВВесе);
	
	МаксЗнач    = 10 - ДлинаКодаВесовогоТовара;	
	КоэффВеса 	= 1000; //Pow(10, МаксЗнач-ЧислоЗнаковПослеЗапВВесе); 
	МаксимальныйВес = 0.09999 * КоэффВеса;
	
	ДлинаПрефикса = СтрДлина(ПрефиксВесовогоТовара);
	
	КодВесовогоТовараИмеетТипЧисло = Ложь;
	
	РеквизитКод = Метаданные.РегистрыСведений.КодыВесовогоТовара.Реквизиты.Найти("Код");
	Если РеквизитКод <> Неопределено и ТипЗнч(РеквизитКод)  = Тип("Число") Тогда
		КодВесовогоТовараИмеетТипЧисло = Истина;
	КонецЕсли;
	
	Если ВыбиратьИсточникЗагрузки Тогда
		ФормаВыбора = ПолучитьФорму("ФормаВыбораДокумента");
		ФормаВыбора.мВыбор = мИсточникЗагрузки;
		ФормаВыбора.мОбъект = Объект;
		Выбор = ФормаВыбора.ОткрытьМодально();
		мИсточникЗагрузки = ФормаВыбора.мВыбор;
		
		Если Выбор = КодВозвратаДиалога.ОК Тогда
			Если мИсточникЗагрузки = "Документ" Тогда
				СписДок = ФормаВыбора.мСписокДокументов;
				Если СписДок.Количество() = 0 Тогда
					Объект.ОписаниеОшибки = "Нет документов для загрузки";
					Результат = мОшибкаНеизвестно;
					Возврат Результат;
				КонецЕсли;
				
				ЗагрузитьНовыеШтрихкоды(Объект);
				Ответ = Объект.Драйвер.ЗагрузитьДокументы(СписДок, ТаблицаЗагрузки);
				ЗагрузкаИзДокумента = Истина;	
			Иначе
				
				СписДок = Новый СписокЗначений;
				Если Объект.Драйвер.ПолучитьСписокДокументов(Объект.ИдУстройства, СписДок) Тогда
					Если СписДок.Количество() = 0 Тогда
						Объект.ОписаниеОшибки = "Нет документов для загрузки";
						Результат = мОшибкаНеизвестно;
						Возврат Результат;
					КонецЕсли;
				КонецЕсли;

				ЗагрузитьНовыеШтрихкоды(Объект);
				Ответ = Объект.Драйвер.ЗагрузитьТаблицу(Объект.ИДУстройства, 1, 1, ТаблицаЗагрузки);
				ЗагрузкаИзДокумента = Ложь;	
			КонецЕсли;
		Иначе
			Объект.ОписаниеОшибки = "Операция отменена пользователем";
			Результат = мОшибкаНеизвестно;
			Возврат Результат;
		КонецЕсли;
	Иначе
		ЗагрузитьНовыеШтрихкоды(Объект);
		Ответ = Объект.Драйвер.ЗагрузитьТаблицу(Объект.ИДУстройства, 0, 1, ТаблицаЗагрузки);
		ЗагрузкаИзДокумента = Истина;		
	КонецЕсли;

	Если Не Ответ Тогда
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
		Результат = мОшибкаНеизвестно;
	Иначе	
		ПроверитьДемо(Объект);		
				
		Для Каждого СтрокаТаблицы Из ТаблицаЗагрузки Цикл
			ШК = СтрокаТаблицы.Штрихкод;
			ТоварНайден = 0;
			Пока Истина Цикл	
				Запрос = Новый Запрос("
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|    РегШК.Владелец                   КАК Владелец
					|ИЗ
					|    РегистрСведений.Штрихкоды        КАК РегШК
					|ГДЕ
					|    РегШК.Штрихкод = &Штрихкод
					|");

				Запрос.УстановитьПараметр("Штрихкод", ШК);
				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой() Тогда
					Если СтрДлина(ШК) < 13 Тогда
						ШК = "0" + ШК;
					Иначе
						Прервать;
					КонецЕсли;
				Иначе
					ТоварНайден = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
						
			Если (ИспШаблоныВесовогоТовара = Истина) И 
				РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
 				Префикс = Лев(ШК, ДлинаПрефикса);
				Если ПрефиксВесовогоТовара = Префикс Тогда
					КодТовара = Сред(ШК, ДлинаПрефикса+1, ДлинаКодаВесовогоТовара);

					Запрос = Новый Запрос("
							|ВЫБРАТЬ ПЕРВЫЕ 1
							|    РегКВТ.Номенклатура                         КАК Номенклатура,
							|    ВЫБОР
							|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
							|            &КачествоНовый
							|        ИНАЧЕ
							|            РегКВТ.Качество
							|    КОНЕЦ                                       КАК Качество
							|ИЗ
							|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
							|ГДЕ
							|    РегКВТ.Код = &Код
							|");

					Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
					Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
 					Запрос.УстановитьПараметр("Код",    ?(КодВесовогоТовараИмеетТипЧисло, Число(КодТовара),КодТовара));

					РезультатЗапроса = Запрос.Выполнить();
					Если Не РезультатЗапроса.Пустой() Тогда	
						Если СтрокаТаблицы.Количество > МаксимальныйВес Тогда
							Выборка = РезультатЗапроса.Выбрать();
							Выборка.Следующий();
							#Если Клиент Тогда
							Сообщить("Строки с весом больше " + МаксимальныйВес + " (" + Выборка.Номенклатура.Наименование + " - " + СтрокаТаблицы.Количество + ") будут неверно обработаны 1С!", СтатусСообщения.Важное);
							#КонецеСли
						КонецЕсли;
						
						Колич = Строка(Цел(СтрокаТаблицы.Количество*КоэффВеса));
						Колич = СтрЗаменить(Колич, Символы.НПП, "");	
						
						КоличДлина = 12 - ДлинаПрефикса - ДлинаКодаВесовогоТовара;
						Пока СтрДлина(Колич) < КоличДлина Цикл
							Колич = "0" + Колич;
						КонецЦикла;
						ШК = "2" + мПрефиксВесовогоТовара + КодТовара + Колич;
						
						ШК = ШК + РаботаСТорговымОборудованием.КонтрольныйСимволEAN(ШК, 13);
						СтрокаТаблицы.Количество = 1;
						ТоварНайден = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			Если ТоварНайден = 1 Тогда
				СтрокаТаблицы.Штрихкод = ШК;
			КонецЕсли;
		КонецЦикла;
				
		ТекстВопроса = Неопределено;
		Если ТипСвязи = "ПрямаяСвязь" Тогда
			ТекстВопроса = "Удалить с терминала загруженные документы?";
		Иначе
			ТекстВопроса = "Удалить с сервера терминалов загруженные документы?";
		КонецЕсли;
	
		Очистить = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Очистить = КодВозвратаДиалога.Да Тогда
			Если СписДок <> Неопределено Тогда
				 Объект.Драйвер.УдалитьДокументы(СписДок);
			Иначе
				 Объект.Драйвер.УдалитьЗавершенныеДокументы();
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	Объект.Драйвер.ОсвободитьРесурсы();
	Возврат Результат;

КонецФункции // ЗагрузитьТаблицу()

///////////////////////////////////////////////////////////////////////////////
//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// +ZHKN. 13.05.2014. №145 Номер релиза - 3 числа
Функция ВерсииРавны() Экспорт
	
	Если мВерсияИзДрайвера = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если Версия_3_3нака_СтрокаВЧисло(мВерсияИзДрайвера) = Версия_3_3нака_СтрокаВЧисло(мВерсияТребуемая) Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
	
	//Результат = Истина;

	//Если мВерсияИзДрайвера <> Неопределено Тогда
	//	Для Индекс = 1 По ?(СтрДлина(мВерсияИзДрайвера) < СтрДлина(мВерсияТребуемая), СтрДлина(мВерсияИзДрайвера), СтрДлина(мВерсияТребуемая)) Цикл
	//		Если Сред(мВерсияИзДрайвера,Индекс, 1) <> Сред(мВерсияТребуемая, Индекс, 1) Тогда
	//			Результат = Ложь;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//Иначе
	//	Результат = Ложь;
	//КонецЕсли;
	//
	//Возврат Результат;

КонецФункции

Функция Версия_3_3нака_СтрокаВЧисло(сВерсия)
	нВерсия 	  = 0;
	сСтрокаВерсии = СокрЛП(сВерсия);
	сСтрокаВерсии = СтрЗаменить(сСтрокаВерсии, ".", Символы.ПС ); 
	нКоличество   = СтрЧислоСтрок(сСтрокаВерсии);
	
	Если нКоличество > 3 Тогда 
		нКоличество = 3; 
	КонецЕсли;
	
	нИндекс = 1;
	нМножитель = 10000;   
	
	Пока нИндекс <= нКоличество Цикл
		Попытка
			нНомер = Число(СтрПолучитьСтроку(сСтрокаВерсии, нИндекс));
		Исключение
			нНомер = 0;
		КонецПопытки;
		
		нВерсия = нВерсия + нНомер * нМножитель;
        нИндекс = нИндекс + 1;
		нМножитель = нМножитель / 100;
	КонецЦикла;
	
	Возврат нВерсия;	
КонецФункции
// +ZHKN. 13.05.2014

Функция ПолучитьСтрокуПодключения(ИпАдрес) Экспорт
	
	СтрокаПодключения = ИпАдрес;
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		СтрокаПодключения = "localhost:9500";
	КонецЕсли;
	
	СтрокаПодключения = НРег(СокрЛП(СтрокаПодключения));
	Если СтрДлина(СтрокаПодключения) < 8 Тогда
		СтрокаПодключения = "http://" + СтрокаПодключения;	
	Иначе
		Если Лев(СтрокаПодключения, 7) <> "http://" И Лев(СтрокаПодключения, 8) <> "https://" Тогда
			СтрокаПодключения = "http://" + СтрокаПодключения;	
		КонецЕсли;
	КонецЕсли;
			
	Если Прав(СтрокаПодключения, 5) <> ".asmx" Тогда
		
		Инд = 0;
		Если Лев(СтрокаПодключения, 7) = "http://" Тогда
			Инд = 7;
		ИначеЕсли Лев(СтрокаПодключения, 8) = "https://" Тогда
			Инд = 8;
        КонецЕсли;
		
		Если Найти(Прав(СтрокаПодключения, СтрДлина(СтрокаПодключения)-Инд), ":") = 0 Тогда
			СтрокаПодключения = СтрокаПодключения + ":9500";
		КонецЕсли;
		СтрокаПодключения = СтрокаПодключения + "/MobileSMARTS/DataStorage.asmx";
	КонецЕсли;	
			
	Возврат СтрокаПодключения;		
КонецФункции

Функция ПроверитьДемо(Объект)	
	Если мПараметры.ТипСвязи = "Сервер" Тогда
		ДемоДокументы = Новый ТаблицаЗначений;
		ДемоДокументы.Колонки.Добавить("ИдТерминала");
		ДемоДокументы.Колонки.Добавить("Документ");
		ДемоДокументы.Колонки.Добавить("Описание");

		Если Объект.Драйвер.ПолучитьСписокДемоДокументов(ДемоДокументы) Тогда
			Если ДемоДокументы.Количество() > 0 Тогда
				Стр = "Не найдена лицензия для некоторых из используемых термналов, из следующих документов загружено не более 3-х строк:
				|";
				Для каждого строка из ДемоДокументы Цикл
					Стр = Стр + "Ид. термиинала: " + строка.ИдТерминала + ", Документ: " + строка.Документ + ", Описание: " + строка.Описание + "
					|"; 	
				КонецЦикла;
				
				Вопрос(Стр, РежимДиалогаВопрос.ОК);
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Если Объект.Драйвер.ПроверитьДемо() = 1 Тогда
			кодТерм = Объект.Драйвер.ПолучитьИдТерминала();
			Вопрос("Проверка лицензии для терминала '" + кодТерм + "' прошла неудачно. Драйвер работает в режиме демо-версии. Из каждого документа загружаются не более 3-х строк.", РежимДиалогаВопрос.ОК);
		КонецЕсли;
	КонецЕсли;	
КонецФункции

Функция ПолучитьПрефиксВесовогоТовара() Экспорт
	ПрефиксВесовогоТовара = "";
	Инфо = Новый СистемнаяИнформация; 
	ВерсияПриложения = Инфо.ВерсияПриложения;
	ЗнакиВерсии = РазбитьСтроку(ВерсияПриложения, ".");
	Если ЗнакиВерсии.Количество() >= 4 Тогда
		Если (ЗнакиВерсии[0] = "10") И (ЗнакиВерсии[1] = "3") И (Число(ЗнакиВерсии[2]) <= 5) Тогда
			ПрефиксВесовогоТовара = "2" + Константы.ПрефиксШтучногоТовара.Получить();
		Иначе
			ПрефиксВесовогоТовара = "2" + Константы.ПрефиксВесовогоТовара.Получить();
		КонецЕсли;
	Иначе
		ПрефиксВесовогоТовара = "2" + Константы.ПрефиксВесовогоТовара.Получить();
	КонецЕсли;	
	Возврат ПрефиксВесовогоТовара;
КонецФункции

Функция ПолучитьДлинуКодаВесовогоТовара() Экспорт
	Перем ДлинаКодаВесовогоТовара;	
	Если Метаданные.Константы.Найти("ДлинаКодаВесовогоТовара") <> Неопределено Тогда
		ДлинаКодаВесовогоТовара = Константы.ДлинаКодаВесовогоТовара.Получить();
	Иначе
		ДлинаКодаВесовогоТовара = 5;
	КонецЕсли;
	
	Если ДлинаКодаВесовогоТовара <= 0 Тогда
		ДлинаКодаВесовогоТовара = 5;
	КонецЕсли;
	
	Возврат ДлинаКодаВесовогоТовара;
КонецФункции

Функция РазбитьСтроку(Стр, Разделитель) Экспорт
	Список = Новый Массив;
	Пока СтрДлина(Стр) > 0 Цикл
		Инд = Найти(Стр, Разделитель);
		Если Инд > 0 Тогда
			Поле = СокрЛП(Лев(Стр, Инд-1));
			Список.Добавить(Поле);
			Стр = Прав(Стр, СтрДлина(Стр)-Инд);
		Иначе
			Прервать;
		КонецЕсли;		
	КонецЦикла;

	Возврат Список;
КонецФункции

Функция ПолучитьIPПоУмолчанию() Экспорт
	
	ИПАдрес = "192.168.0.1";  Возврат "localhost";
	
	Попытка
		ServicesSet = ПолучитьCOMОбъект("winmgmts:\\localhost\root\cimv2");
		Адаптеры = ServicesSet.ExecQuery("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True");
		Для Каждого Адаптер Из Адаптеры Цикл
			МакАдрес = Адаптер.MACAddress;
			Если ЗначениеЗаполнено(МакАдрес) Тогда
				Для Каждого ИПАдрес Из Адаптер.IPAddress Цикл
					Если ЗначениеЗаполнено(ИПАдрес) Тогда
						прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат  ИПАдрес;
	
КонецФункции

Функция ВерсияСтрокаВЧисло(сВерсия) Экспорт
	нВерсия 	  = 0;
	сСтрокаВерсии = СокрЛП(сВерсия);
	сСтрокаВерсии = СтрЗаменить(сСтрокаВерсии, ".", Символы.ПС ); 
	нКоличество   = СтрЧислоСтрок(сСтрокаВерсии);
	
	Если нКоличество > 4 Тогда 
		нКоличество = 4; 
	КонецЕсли;
	
	нИндекс = 1;
	нМножитель = 1000000;   
	
	Пока нИндекс <= нКоличество Цикл
		Попытка
			нНомер = Число(СтрПолучитьСтроку(сСтрокаВерсии, нИндекс));
		Исключение
			нНомер = 0;
		КонецПопытки;
		
		нВерсия = нВерсия + нНомер * нМножитель;
        нИндекс = нИндекс + 1;
		нМножитель = нМножитель / 100;
	КонецЦикла;
	
	Возврат нВерсия;	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНетОшибки                 = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаПараметровНастройки = Перечисления.ТООшибкиОбщие.ОшибкаПараметровНастройки;
мОшибкаЗагрузкиДрайвера    = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиДрайвера;
мОшибкаНеизвестно          = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно;
мОшибкаПриПодключении      = Перечисления.ТООшибкиОбщие.ОшибкаПриПодключении;
мОшибкаТестНеПройден       = Перечисления.ТООшибкиОбщие.ОшибкаТестНеПройден;
мОшибкаЗагрузкиСтроки      = Перечисления.ТООшибкиТСД.ОшибкаЗагрузкиСтроки;

мИсточникЗагрузки = "Документ";

мИдентификатор = Новый УникальныйИдентификатор;
мВерсияОбработки = 2.05;

мКачествоПустаяСсылка       = Справочники.Качество.ПустаяСсылка();
мКачествоНовый              = Справочники.Качество.Новый;

мВерсияТребуемая  = "2.7.1.8";
мВерсияИзДрайвера = Неопределено;

мПрефиксВесовогоТовара      = Константы.ПрефиксВесовогоТовара.Получить();

#КонецЕсли