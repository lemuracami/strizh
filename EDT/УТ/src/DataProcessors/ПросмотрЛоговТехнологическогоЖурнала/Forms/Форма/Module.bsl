#Область СобытияФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект 	= ПолучитьОбъектОбработки();
	
	КолВоСтрокДляОтображения  = 10000;
	РазмерШрифта = 10;// Размер шрифта просмотра текста/запроса.
	
	ИсточникЖурнала = "ИзФайла";
	ОтображатьПервыеИлиПоследние = 1;
	
	ОбработкаОбъект.ВосстановитьНастройки(ЭтотОбъект);
	
	ПутьКФормамОбработки 	= ОбработкаОбъект.Метаданные().ПолноеИмя() + ".Форма";
	
	// Возможно от предыдущего сеанса оставлен был запущенный процесс создания технологического журнала.
	// Установим флаги кнопки для его остановки.
	Если НЕ ПустаяСтрока(Объект.ИдентификаторПроцессаОС) И  НЕ ПустаяСтрока(Объект.КаталогСЛогФайлами)  И ОбработкаОбъект.ВедетсяЗаписьЛоговТехнологическогоЖурнала() Тогда
		Элементы.ЗапуститьТехнологическийЖурнал.Пометка = Истина;
		// Для вновь запущенного сеанса, скорее всего, будет новый ID процесса.
		Объект.ИдентификаторПроцессаОС = ОбработкаОбъект.ПолучитьИдентификаторПроцессаОС();
	Иначе
		Объект.ИдентификаторПроцессаОС = "";	Объект.КаталогСЛогФайлами = "";
	КонецЕсли;
	
	Элементы.ФормаФорматированныйПросмотр.Пометка = ФорматированныйПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВЕБКлиент Тогда
		
		ПоказатьСообщениеПользователю( НСтр("ru = 'Обработка не предназначена для работы в ВЕБ-клиенте.'"));
		Отказ = Истина;
		Возврат;
		
	#КонецЕсли

	ОбновитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если НЕ Отказ Тогда
		ПередЗакрытиемНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	
	ПолучитьОбъектОбработки().СохранитьНастройки(ЭтотОбъект);
	Если ЭтоАдресВременногоХранилища(АдресВХранилищеСтруктураХраненияБазыДанных) Тогда
		УдалитьИзВременногоХранилища(АдресВХранилищеСтруктураХраненияБазыДанных);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.ИмяЛогФайлаНаСервере) Тогда
		Попытка 
			УдалитьФайлы(Объект.ИмяЛогФайлаНаСервере);
		Исключение
			// Файла может и не быть.
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура Подробнее(Команда)
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ТаблицаСтрок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыПриОткрытииФормы = Новый Структура();
		
		ПараметрыПриОткрытииФормы.Вставить("АдресВХранилищеСтруктураХраненияБазыДанных",АдресВХранилищеСтруктураХраненияБазыДанных);
		ПараметрыПриОткрытииФормы.Вставить("ПросматриваемыйТекстИсходный", ТекущиеДанные.Значение);
		ПараметрыПриОткрытииФормы.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
		ПараметрыПриОткрытииФормы.Вставить("РазмерШрифта",РазмерШрифта);
		
		ОткрытьФорму(ПутьКФормамОбработки+".ФормаПросмотраЗапросаТекста",ПараметрыПриОткрытииФормы,ЭтотОбъект, "ПросмотрЗапросаТекста"+Формат(ТекущиеДанные.НомерСтроки,"ЧЦ=10;ЧВН=;ЧГ="));
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьЛогФайл(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(Объект.ИмяЛогФайла) Тогда
		ПоказатьСообщениеПользователю(НСтр("ru = 'Не указан файл для загрузки!'"));
		Возврат;
	КонецЕсли; 
	
	ТекущийТекст = "";
	Состояние(НСтр("ru = 'Начата загрузка файла...'"));
	
	ДополнительныеПараметры = Новый Структура("ВремяНачала",ПолучитьТекущуюДатуСеансаНаСервере());
	
	ЛокальноеОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьЛогФайлЗавершение",ЭтотОбъект,ДополнительныеПараметры);
	Если НЕ ПустаяСтрока(Объект.ИмяЛогФайлаНаСервере) Тогда
		// Этот файл уже раз передавался на сервер.
		// Воспользуемся тем, что уже есть на сервере.
		ВыполнитьОбработкуОповещения(ЛокальноеОписаниеОповещения,Объект.ИмяЛогФайлаНаСервере);
	Иначе		
		
		МассивПомещаемыхФайлов = Новый Массив;
		МассивПомещаемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.ИмяЛогФайла));
		
		НачатьПомещениеФайлов(ЛокальноеОписаниеОповещения,МассивПомещаемыхФайлов,,Ложь, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте 
Процедура ЗагрузитьЛогФайлЗавершение(МассивФайлов,ДополнительныеПараметры) Экспорт
	
	ВремяПередачиФайлаНаСервер = 0;
	ВремяНачала = ДополнительныеПараметры.ВремяНачала;
	
	Если ТипЗнч(МассивФайлов) = Тип("Массив") Тогда
		Если МассивФайлов.Количество()>0 Тогда
			ВремяПередачиФайлаНаСервер = ПолучитьТекущуюДатуСеансаНаСервере()-ВремяНачала;
			СтруктураПередаваемогоФайла = Новый Структура("АдресФайлаВХранилище,ИмяФайла", МассивФайлов[0].Хранение, МассивФайлов[0].Имя);
			ЗагрузитьЛогФайлНаСервере(СтруктураПередаваемогоФайла);
		КонецЕсли;
	Иначе
		ЗагрузитьЛогФайлНаСервере(МассивФайлов);
	КонецЕсли;
	
	ВремяОкончания = ПолучитьТекущуюДатуСеансаНаСервере();
	
	ТекстЗаголовка = НСтр("ru = 'Загрузка файла окончена.
                           |Начало в : %1. Окончание в : %2. Потрачено (сек.): %3.'");
	
	Если ВремяПередачиФайлаНаСервер<>0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = 'Передача файла на сервер (сек.): %4.'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,"%4",Строка(ВремяПередачиФайлаНаСервер) );
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,"%1",Формат(ВремяНачала,"ДЛФ=T") );
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,"%2",Формат(ВремяОкончания,"ДЛФ=T") );
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,"%3",Строка(ВремяОкончания - ВремяНачала) );
	
	Элементы.ИнформацияОВремениЗагрузки.Заголовок = СтрЗаменить(ТекстЗаголовка, Символы.ПС,"");
	
	Состояние(ТекстЗаголовка);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЛогФайлНаСервере(СтруктураПередаваемогоФайла)
	
	ОбъектОбработки = ПолучитьОбъектОбработки();
	Если ПоискВТерминахСУБД = Истина И  НЕ ЭтоАдресВременногоХранилища(АдресВХранилищеСтруктураХраненияБазыДанных) Тогда
		АдресВХранилищеСтруктураХраненияБазыДанных = ОбъектОбработки.ПолучитьОписаниеХраненияБД();
	КонецЕсли;
	
	ОбъектОбработки.ЗагрузитьЛогФайл(СтруктураПередаваемогоФайла,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлыЛоговССервера(Команда)
	
	ОчиститьСообщения();
	
	АдресФайловВХранилище = ПолучитьФайлыЛоговССервераНаСервере();
	
	Если ЭтоАдресВременногоХранилища(АдресФайловВХранилище) Тогда
		
		КаталогСохранения = ПолучитьКаталогДляСохраненияЛогов();
		ИмяВременногоАрхивногоФайла = Неопределено;
		#Если НЕ ВЕБКлиент Тогда
			ИмяВременногоАрхивногоФайла = ПолучитьИмяВременногоФайла("zip");
		#КонецЕсли
		
		Если ИмяВременногоАрхивногоФайла=Неопределено Тогда
			ПоказатьСообщениеПользователю("ru = 'Получить файл с сервера невозможно.'");
			Возврат;
		КонецЕсли;
		
		ФайлЛога = ПолучитьИзВременногоХранилища( АдресФайловВХранилище );
		ФайлЛога.Записать(ИмяВременногоАрхивногоФайла );
		
		УдалитьИзВременногоХранилища( АдресФайловВХранилище );
		
		Попытка
			ZipАрхив = Новый ЧтениеZipФайла(ИмяВременногоАрхивногоФайла);
			Если ZipАрхив <> Неопределено И ZipАрхив.Элементы.Количество() >0 Тогда
				ТемпФайлШаблоновXML = "";
				
				ZipАрхив.Извлечь(ZipАрхив.Элементы[0], КаталогСохранения);
				Объект.ИмяЛогФайла = КаталогСохранения + ZipАрхив.Элементы[0].Имя;
				Объект.ИмяЛогФайлаНаСервере = "";
				ЗагрузитьЛогФайл(Неопределено);
				
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка при разархивировании файла логов!
                                   |Файо %1.'" );
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
			ПоказатьСообщениеПользователю(ТекстСообщения);
		КонецПопытки;
		
		Попытка
			УдалитьФайлы(ИмяВременногоАрхивногоФайла);
		Исключение
			// Файла может и не быть.
		КонецПопытки;
		
	Иначе
		ПоказатьСообщениеПользователю(НСтр("ru = 'Ошибка получения файлов логов с сервера!
                                            |Возможно, формирование файла еще не началось.
                                            |Учитывайте, что иногда этот процесс может занимать до 1 минуты!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлыЛоговССервераНаСервере()
	
	Возврат ПолучитьОбъектОбработки().ПолучитьФайлыЛоговССервера(Объект.КаталогСЛогФайлами,Объект.ИдентификаторПроцессаОС);
	
КонецФункции


&НаКлиенте
Процедура ЗапуститьТехнологическийЖурнал(Команда)
	
	ОчиститьСообщения();
	
	Если ИсточникЖурнала = "СформироватьПользовательский"
		И НЕ Элементы.ЗапуститьТехнологическийЖурнал.Пометка
		И ПустаяСтрока(Объект.ПользовательскийФайлLogcfg) Тогда
		
		ПоказатьСообщениеПользователю(НСтр("ru = 'Не указан пользовательский файл настроек!'"));
		Возврат;
		
	КонецЕсли; 
	
	Элементы.ЗапуститьТехнологическийЖурнал.Пометка = НЕ Элементы.ЗапуститьТехнологическийЖурнал.Пометка;
	ОбновитьВидимостьДоступностьЭлементов();
	РаботаСТехнологическимЖурналом();
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ЛокальноеОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеАсинхроннойОперацииОчиститьТЧ",ЭтотОбъект);
	Если ТаблицаСтрок.Количество()>0 Тогда 
		ПоказатьВопрос(ЛокальноеОписаниеОповещения,НСтр("ru='Действительно очистить ТЧ ?'"),РежимДиалогаВопрос.ДаНет,30, КодВозвратаДиалога.Нет,НСтр("ru='Очистка ТЧ.'"));
	Иначе 
		ВыполнитьОбработкуОповещения(ЛокальноеОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

# КонецОбласти

#Область ПроцедурыИФункцииЭлементовФормы

&НаКлиенте
Процедура ИмяЛогФайлаПриИзменении(Элемент)
	Объект.ИмяЛогФайлаНаСервере = "";
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛогФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(СтандартнаяОбработка, "ИмяЛогФайла", НСтр("ru = 'Файлы логов (*.log)|*.log| Все файлы (*.*)|*.*'") );
	
	ИмяЛогФайлаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаLogcfgXMLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(СтандартнаяОбработка, "ПользовательскийФайлLogcfg", НСтр("ru = 'Файлы ConfigLog (*.xml)|*.xml| Все файлы (*.*)|*.*'") );
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыборФайла(СтандартнаяОбработка, ИмяФайлаЛога, Фильтр )
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = Фильтр;
	ДиалогВыбораФайла.ПолноеИмяФайла = Объект[ИмяФайлаЛога];
	ДиалогВыбораФайла.Каталог = ПолучитьСтрокуОтделеннуюПоследнимСимволом(ИмяФайлаЛога,"\");
	
	ЛокальноеОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеАсинхроннойОперацииВыборФайла",ЭтотОбъект,Новый Структура("ИмяФайлаЛога",ИмяФайлаЛога));
	ДиалогВыбораФайла.Показать(ЛокальноеОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗавершениеАсинхроннойОперацииВыборФайла(МассивВыбранныхФайлов,ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МассивВыбранныхФайлов) = Тип("Массив") И МассивВыбранныхФайлов.Количество() > 0 Тогда
		Объект[ДополнительныеПараметры.ИмяФайлаЛога] = МассивВыбранныхФайлов[0];
	КонецЕсли;
	ОбновитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура ИмяЛогФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьФайлНаПросмотр( СтандартнаяОбработка, Объект.ИмяЛогФайла );
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаLogcfgXMLОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьФайлНаПросмотр( СтандартнаяОбработка, Объект.ПользовательскийФайлLogcfg );
	
КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьФайлНаПросмотр(СтандартнаяОбработка, ИмяФайла )
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		ЗапуститьПриложение(ИмяФайла);
	Иначе
		ПоказатьСообщениеПользователю(НСтр("ru = 'Файл НЕ выбран!'"));
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСтрокПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ПоказатьТекущийЭлемент",0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекущийЭлемент()
	
	ТекущиеДанные = Элементы.ТаблицаСтрок.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		
		ТекущийТекст = ПолучитьФорматированныйЗапросИлиТекстНаСервере(ТекущиеДанные.Значение,Элементы.ФормаФорматированныйПросмотр.Пометка, РазмерШрифта);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере 
Функция ПолучитьФорматированныйЗапросИлиТекстНаСервере(ТекущийТекстЗапроса , НуженФорматированныйПросмотр, РазмерШрифта)
	Возврат ПолучитьОбъектОбработки().ПолучитьФорматированныйЗапросИлиТекстНаСервере(ТекущийТекстЗапроса , НуженФорматированныйПросмотр, РазмерШрифта);
КонецФункции

&НаКлиенте 
Процедура ОбновитьВидимостьДоступностьЭлементов()
	
	Если Элементы.ЗапуститьТехнологическийЖурнал.Пометка Тогда
		Элементы.ЗапуститьТехнологическийЖурнал.Заголовок= НСтр("ru = 'Остановить технологический журнал'");
	Иначе
		Элементы.ЗапуститьТехнологическийЖурнал.Заголовок= НСтр("ru = 'Запустить технологический журнал'");
	КонецЕсли;
	
	Элементы.ЗапуститьТехнологическийЖурнал.Доступность = Истина;
	
	Элементы.ИмяЛогФайла.Доступность = Ложь;
	Элементы.ИмяФайлаLogcfgXML.Доступность = Ложь;
	Элементы.СохранитьФайлСтандартныхНастроек.Доступность = Ложь;
	
	
	ТекстДляТекущихНастроек = "";ИмяФайлаДляОтображения  = "";
	
	Если ИсточникЖурнала ="ИзФайла" Тогда
		ИмяФайлаДляОтображения = ?(ПустаяСтрока(Объект.ИмяЛогФайла),НСтр("ru = 'Файл не указан.'"),Прав(Объект.ИмяЛогФайла,50));
		ТекстДляТекущихНастроек = НСтр("ru = 'Загрузка из указанного файла. (%1)'");
		Элементы.ИмяЛогФайла.Доступность = Истина;
		Элементы.ЗапуститьТехнологическийЖурнал.Доступность = Ложь;
	КонецЕсли;
	Если ИсточникЖурнала ="СформироватьСтандартно" Тогда
		ТекстДляТекущихНастроек = НСтр("ru = 'Формирование со стандартными настройками.'");
		Элементы.СохранитьФайлСтандартныхНастроек.Доступность = Истина;
	КонецЕсли;
	Если ИсточникЖурнала ="СформироватьПользовательский" Тогда
		ИмяФайлаДляОтображения  = ?(ПустаяСтрока(Объект.ПользовательскийФайлLogcfg),"Файл НЕ указан.",Прав(Объект.ПользовательскийФайлLogcfg,50));
		ТекстДляТекущихНастроек =  НСтр("ru = 'Формирование с указанными настройками. (%1).'");
		Элементы.ИмяФайлаLogcfgXML.Доступность = Истина;
	КонецЕсли;
	ТекстДляТекущихНастроек = СтрЗаменить(ТекстДляТекущихНастроек,"%1",ИмяФайлаДляОтображения);
	
	Элементы.Настройки.ЗаголовокСвернутогоОтображения = Элементы.Настройки.Заголовок + ?(Не ПустаяСтрока(ТекстДляТекущихНастроек),":"+ТекстДляТекущихНастроек,"");
	
	Элементы.ПолучитьФайлыЛоговССервера.Доступность = Элементы.ЗапуститьТехнологическийЖурнал.Доступность;
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗавершениеАсинхроннойОперацииОчиститьТЧ(Ответ, ДополнительныеПараметры) Экспорт	
	
	ТаблицаСтрок.Очистить();
	
	ТекущийТекст = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЖурналаПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЖурнала1ПриИзменении(Элемент)
	ОбновитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЖурнала2ПриИзменении(Элемент)
	ОбновитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

&НаКлиенте
Процедура РаботаСТехнологическимЖурналом()
	
	Если Элементы.ЗапуститьТехнологическийЖурнал.Пометка Тогда
		
		Объект.ИдентификаторПроцессаОС = "";	Объект.КаталогСЛогФайлами = "";
		АдресВХранилищеConfigLogФайла = "";
		
		Если НЕ ПустаяСтрока(Объект.ПользовательскийФайлLogcfg) Тогда
			
			ЧтениеТекста = Новый ЧтениеТекста(Объект.ПользовательскийФайлLogcfg);
			АдресВХранилищеConfigLogФайла = ПоместитьВоВременноеХранилище( ЧтениеТекста.Прочитать(), УникальныйИдентификатор);
			
			ЧтениеТекста = Неопределено;
		КонецЕсли;
		
		РезультатРаботы =  НачатьСозданиеТехнологическогоЖурналаНаСервере();
		Если НЕ ПустаяСтрока(РезультатРаботы) Тогда
			ПоказатьСообщениеПользователю(РезультатРаботы);
		КонецЕсли;
		
	Иначе	
		
		ЗакончитьСозданиеТехнологическогоЖурналаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста 
Функция ПолучитьТекущуюДатуСеансаНаСервере()
	Возврат ТекущаяДатаСеанса();
КонецФункции


&НаСервере 
Функция ПолучитьОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Функция НачатьСозданиеТехнологическогоЖурналаНаСервере()
	РезультатВыполнения  = ПолучитьОбъектОбработки().ВключениеТехнологическогоЖурнала(ЭтотОбъект);
	
	Если РезультатВыполнения <> Неопределено 
		И РезультатВыполнения.Результат = ложь Тогда
		
		Возврат РезультатВыполнения.Причина ;
		
	КонецЕсли;
	Возврат "";
	
КонецФункции

&НаСервере
Функция ЗакончитьСозданиеТехнологическогоЖурналаНаСервере()
	ПолучитьОбъектОбработки().ВыключениеТехнологическогоЖурнала(Объект.КаталогСЛогФайлами,Объект.ИдентификаторПроцессаОС);
КонецФункции

&НаКлиенте 
Функция ПолучитьКаталогДляСохраненияЛогов()
	
	ИмяКаталогаСохранения = "";
	Если НЕ ПустаяСтрока( Объект.ИмяЛогФайла ) Тогда
		ИмяКаталогаСохранения = ПолучитьСтрокуОтделеннуюПоследнимСимволом(Объект.ИмяЛогФайла,"\");
	Иначе
		ИмяКаталогаСохранения = КаталогВременныхФайлов();
	КонецЕсли;
	
	Возврат ИмяКаталогаСохранения;
КонецФункции

&НаКлиенте 
Функция ПолучитьСтрокуОтделеннуюПоследнимСимволом( Знач ИмяЛогФайла,Разделитель = "\");
	
	СтрокаВозврата = ИмяЛогФайла; 
	ПозицияВИмени = СтрДлина(ИмяЛогФайла);
	
	Пока ПозицияВИмени > 0 Цикл
		Если Сред( ИмяЛогФайла, ПозицияВИмени, 1 )  = Разделитель Тогда
			 СтрокаВозврата = Лев(ИмяЛогФайла,ПозицияВИмени );
			 Прервать;
		КонецЕсли;
		ПозицияВИмени = ПозицияВИмени - 1;
	КонецЦикла;
	
	Возврат СтрокаВозврата;
	
КонецФункции 

&НаСервере 
Процедура ПолучитьОписаниеХраненияБазыДанныхНаСервере()
	АдресВХранилищеСтруктураХраненияБазыДанных = ПолучитьОбъектОбработки().ПолучитьОписаниеХраненияБД();
КонецПроцедуры

&НаКлиенте 
Процедура ПоказатьСообщениеПользователю(ТекстСообщения,ИмяПоля=Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Если ИмяПоля <> Неопределено Тогда
		Сообщение.Поле = ИмяПоля;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаСтрокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Подробнее(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлСтандартныхНастроек(Команда)
	
	ОчиститьСообщения();
	
	РасположениеФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	РасположениеФайлов.Фильтр = "Конфигурационный файл(*.xml)|*.xml|Все файлы(*.*)|*.*";
	РасположениеФайлов.ПолноеИмяФайла = "Standart_logcfg.xml";
	
	АдресФайлаВХранилище = ПолучитьСтандартныйКонфигурационныйФайлНаСервере();
	МассивПолучаемыхФайлов = Новый Массив();
	МассивПолучаемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(РасположениеФайлов.ПолноеИмяФайла,АдресФайлаВХранилище));
	
	НачатьПолучениеФайлов(Новый ОписаниеОповещения("ЗавершениеАсинхроннойОперацииСохранитьФайлСтандартныхНастроек",ЭтотОбъект,АдресФайлаВХранилище), МассивПолучаемыхФайлов,РасположениеФайлов,Истина);
	
КонецПроцедуры

&НаКлиенте 

Процедура ЗавершениеАсинхроннойОперацииСохранитьФайлСтандартныхНастроек(МассивПереданныхФайлов , АдресФайлаВХранилище) Экспорт
	
	Если ТипЗнч(МассивПереданныхФайлов) = Тип("Массив") Тогда
		УдалитьИзВременногоХранилища(МассивПереданныхФайлов[0].Хранение);
		Состояние("ru = 'Файл сохранен успешно!'");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере 

Функция ПолучитьСтандартныйКонфигурационныйФайлНаСервере()
	
	АдресМакетаВХранилище = Неопределено;
	ТекстовыйДок = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ConfigLogXMLШтатный") ;
	
	Если ТипЗнч(ТекстовыйДок) = Тип("ТекстовыйДокумент") Тогда
		АдресМакетаВХранилище = ПоместитьВоВременноеХранилище( ТекстовыйДок.ПолучитьТекст() , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ТекстовыйДок = Неопределено;
	
	Возврат АдресМакетаВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ПросмотрСтруктурыХраненияБазыДанных(Команда)
	Если ПустаяСтрока( АдресВХранилищеСтруктураХраненияБазыДанных) ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресВХранилищеСтруктураХраненияБазыДанных) Тогда
		Попытка 
			АдресВХранилищеСтруктураХраненияБазыДанных = ЭтотОбъект.ВладелецФормы.АдресВХранилищеСтруктураХраненияБазыДанных ;
		Исключение
			// Форма может быть уже закрыта.
		КонецПопытки;
	КонецЕсли;
	
	Состояние(Нстр("ru = 'Формируется структура хранения базы данных. Ждите...'"));
	Если НЕ ЭтоАдресВременногоХранилища(АдресВХранилищеСтруктураХраненияБазыДанных) Тогда
		ПолучитьОписаниеХраненияБазыДанныхНаСервере();
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПросмотрЛоговТехнологическогоЖурнала.Форма.ФормаПросмотраСтруктурыХраненияБазыДанных",Новый Структура("АдресВХранилищеСтруктураХраненияБазыДанных",АдресВХранилищеСтруктураХраненияБазыДанных));
	
	Состояние();
КонецПроцедуры

&НаКлиенте
Процедура ФорматированныйПросмотр(Команда)
	
	ФорматированныйПросмотр = НЕ ФорматированныйПросмотр;
	Элементы.ФормаФорматированныйПросмотр.Пометка = ФорматированныйПросмотр;
	
	ПоказатьТекущийЭлемент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьРазмерШрифта(Команда)
	
	ПоказатьВводЧисла( Новый ОписаниеОповещения("ЗавершениеАсинхроннойОперацииЗадатьРазмерШрифта",ЭтотОбъект ), РазмерШрифта, НСтр("ru = 'Введите размер шрифта.'"),2,0);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗавершениеАсинхроннойОперацииЗадатьРазмерШрифта( ВведенноеЧисло, ДополнительныеПараметры ) Экспорт
	
	Если ВведенноеЧисло <> Неопределено Тогда
		РазмерШрифта = ВведенноеЧисло;
		ПоказатьТекущийЭлемент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИЛИИПриИзменении(Элемент)
	
	СброситьУсловиеВИЛИПриПоискеВТерминахСУБД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискВТерминахСУБДПриИзменении(Элемент)
	
	СброситьУсловиеВИЛИПриПоискеВТерминахСУБД(); 
	
КонецПроцедуры

&НаКлиенте 
Процедура СброситьУсловиеВИЛИПриПоискеВТерминахСУБД()
	
	Если ИЛИ_И=1 И ПоискВТерминахСУБД=Истина Тогда
		ИЛИ_И=0;
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти