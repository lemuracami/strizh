#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Выбирает, с каким маршрутом работает источник - с плановым или фактическим.
//
Перем МаршрутСопровождения Экспорт; // <Булево>

// Если Истина, то разрешено интерактивно изменять порядок точек.
//
Перем ИнтерактивноеИзменениеПорядкаТочек Экспорт; // <Булево>

// Если Истина, то все изменения в маршруте будут сразу записываться в ИБ.
//
Перем АвтоСохранениеИзменений Экспорт; // <Булево>

// Интерфейс карты для отображения маршрута при планировании по карте.
//
Перем икПодборПоКарте Экспорт; // <БизнесПроцесс.новаПланированиеМестнойДоставки.Формы.ПланированиеДоставкиПоКарте>

// Идентификатор объекта на карте, с которого должны нумероваться все объекты источника.
//
Перем ИдПервогоОбъекта Экспорт; // <Число>

//Некоторые точки маршрута могут быть зафиксированы и не могут быть смещены
//в очереди посещения при автоматическом планировании
Перем УчитыватьФиксациюТочек Экспорт;

Перем ОсновнойРейсНаКарте Экспорт;

Перем соРедактируемыеРейсы;
Перем соКартинкиДействий;
Перем соДобавленныеДоставки;
Перем соУдаленныеДоставки;

//Перем МаксКодТочки;
Перем ТекущийРейс;
Перем СпособОтображенияМаршрута;

Перем тзШаблонПримитивов;
Перем ИдПоследнегоОбъекта;

Перем ВремяПредупрежденияОВероятностиОпоздании;
Перем ОтображатьЗагрузкуНарастающимИтогом;

Перем ИсточникРейсов;

//COMОбъект; если РейсКСЛ <> Неопределено, то пересчитывать рейс КСЛ не надо  
Перем РейсКСЛ Экспорт;

//////////////////////////////////////
//*** ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ ***//

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	МаршрутСопровождения = Неопределено;
	ИнтерактивноеИзменениеПорядкаТочек = Неопределено;
	АвтоСохранениеИзменений = Неопределено;
	икПодборПоКарте = Неопределено;
	ИдПервогоОбъекта = Неопределено;
	УчитыватьФиксациюТочек = Неопределено;
	ОсновнойРейсНаКарте = Неопределено;
	соРедактируемыеРейсы = Неопределено;
	соКартинкиДействий = Неопределено;
	соДобавленныеДоставки = Неопределено;
	соУдаленныеДоставки = Неопределено;
	ТекущийРейс = Неопределено;
	СпособОтображенияМаршрута = Неопределено;
	тзШаблонПримитивов = Неопределено;
	ИдПоследнегоОбъекта = Неопределено;
	ВремяПредупрежденияОВероятностиОпоздании = Неопределено;
	ОтображатьЗагрузкуНарастающимИтогом = Неопределено;
	ИсточникРейсов = Неопределено;
	
КонецПроцедуры

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	ОформлениеСтроки.Ячейки.ЗаданиеВыполнено.ОтображатьФлажок = Ложь;
	Если ДанныеСтроки.ЗаданиеВыполнено = Истина Тогда
		ОформлениеСтроки.Ячейки.ЗаданиеВыполнено.УстановитьКартинку(БиблиотекаКартинок.новаЗаданияВТочкеВыполнены);
	КонецЕсли;
	
	Если ДанныеСтроки.Группировка = NULL Тогда
		ОформлениеСтроки.Ячейки.ОписаниеЗадания.УстановитьКартинку(соКартинкиДействий[ДанныеСтроки.Вид]);
		ОформлениеСтроки.Ячейки.Вес.Текст = СтрЗаменить(ОформлениеСтроки.Ячейки.Вес.Текст, "-", "");
		ОформлениеСтроки.Ячейки.Объем.Текст = СтрЗаменить(ОформлениеСтроки.Ячейки.Объем.Текст, "-", "");
		ОформлениеСтроки.Ячейки.КоличествоЕдиницПеревозки.Текст = СтрЗаменить(ОформлениеСтроки.Ячейки.КоличествоЕдиницПеревозки.Текст, "-", "");
	Иначе
		Если КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "НомерТочки" Тогда
			Если ДанныеСтроки.УпорядочиваниеДоступно <> Истина Тогда
				ОформлениеСтроки.Ячейки.НовыйПорядковыйНомерТочки.ОтображатьФлажок = Ложь;     
			КонецЕсли;
			
			стРейс = соРедактируемыеРейсы[ДанныеСтроки.Рейс];
			ВыполняетсяПересчет = Ложь;
			Если стРейс <> Неопределено Тогда
				Если стРейс.Свойство("КоличествоОтложенныхПересчетов") Тогда
					ВыполняетсяПересчет = стРейс.КоличествоОтложенныхПересчетов > 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ВыполняетсяПересчет Тогда
				ОформлениеСтроки.Ячейки.ПлановаяДатаПосещения.УстановитьКартинку(БиблиотекаКартинок.новаВыполнениеФоновогоДействия); 
			Иначе
				Если ДанныеСтроки.ОкноПо <> NULL
				   И ДанныеСтроки.ОкноС <> NULL
				   И ДанныеСтроки.ОкноПо <> Неопределено
				   И ДанныеСтроки.ОкноС <> Неопределено Тогда
				   
				    ДанныеСтрокиОкноПо = ?(НачалоДня(ДанныеСтроки.ОкноПо)=ДанныеСтроки.ОкноПо,КонецДня(ДанныеСтроки.ОкноПо),ДанныеСтроки.ОкноПо);
					
					секПлановоеВремяПосещения = ДанныеСтроки.ПлановоеВремяПосещения - '00010101';
					ВременнойПорогУгрозыОпоздания = ДанныеСтрокиОкноПо;
					секИнтервалВремениВероятностиОпоздания = ВремяПредупрежденияОВероятностиОпоздании - '00010101';
					ВременнойПорогВероятностиОпоздания = ВременнойПорогУгрозыОпоздания - секИнтервалВремениВероятностиОпоздания;
					
					ОформлениеСтроки.Ячейки.ПлановаяДатаПосещения.УстановитьКартинку(БиблиотекаКартинок.новаПустаяКартинка); 
					
					Если ДанныеСтроки.ПлановаяДатаПосещения > ВременнойПорогУгрозыОпоздания Тогда
						ОформлениеСтроки.Ячейки.ПлановаяДатаПосещения.УстановитьКартинку(БиблиотекаКартинок.новаУгрозаОпоздания); 
					КонецЕсли;
					
					Если ДанныеСтроки.ПлановаяДатаПосещения > ВременнойПорогВероятностиОпоздания 
					   И ДанныеСтроки.ПлановаяДатаПосещения <= ВременнойПорогУгрозыОпоздания Тогда
					   ОформлениеСтроки.Ячейки.ПлановаяДатаПосещения.УстановитьКартинку(БиблиотекаКартинок.новаВероятностьОпоздания);			
					КонецЕсли;
					
					Если ДанныеСтроки.ПлановаяДатаПосещения < ДанныеСтроки.ОкноС Тогда
						ОформлениеСтроки.Ячейки.ПлановаяДатаПосещения.УстановитьКартинку(БиблиотекаКартинок.новаРаннееПрибытие); 
					КонецЕсли;
				Иначе
					ОформлениеСтроки.Ячейки.ПлановаяДатаПосещения.УстановитьКартинку(БиблиотекаКартинок.новаПустаяКартинка); 
				КонецЕсли;
			КонецЕсли;

			ОформлениеСтроки.Ячейки.НомерТочки.УстановитьТекст(ДанныеСтроки.ТочкаМаршрута_Пред);
			ОформлениеСтроки.Ячейки.НомерТочки.УстановитьКартинку(соКартинкиДействий[ДанныеСтроки.Действие]);
			Если ЗначениеЗаполнено(ДанныеСтроки.ДатаПрибытия) Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.ДатаУбытия) Тогда
					ОформлениеСтроки.ЦветФона = Новый Цвет(208, 255, 208);
				Иначе		
					ОформлениеСтроки.ЦветФона = Новый Цвет(0, 255, 0);
				КонецЕсли;
			Иначе		
				ОформлениеСтроки.ЦветФона = Новый Цвет(244, 240, 215);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   	
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		ИсточникРейсов = Параметр1;
		Настроить(Параметр1);
		Возврат Истина;
		
	ИначеЕсли Событие = "ДобавленыДанныеВДерево" Тогда
		
		ОбновитьПрогноз(Параметр1);
		
		Если ТекущийРейс <> Неопределено Тогда
			стРейс = соРедактируемыеРейсы[ТекущийРейс];
			Если стРейс = Неопределено Тогда
				стРейс = Новый Структура("Рейс, Ссылка, Маршрут, МаксКодТочки, ДобавленныеДоставки, УдаленныеДоставки, УчасткиТрека, Изменен",, ТекущийРейс,, 0);
				соРедактируемыеРейсы.Вставить(ТекущийРейс, стРейс);
			КонецЕсли;
			стРейс.Маршрут = Параметр1;
			стРейс.Изменен = Истина;
			ПересчитатьРейс_(стРейс,,Ложь);
		КонецЕсли;
		
	ИначеЕсли Событие = "АктивизированаСтрока" Тогда
		Если Параметр1 <> Неопределено И ИсточникРейсов <> Неопределено Тогда
			Если ИсточникРейсов.Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
				Меню = Журнал.ПолучитьКонтекстноеМеню(ЭтотОбъект);
				
				ТекСтрока = Параметр1;
				Пока ТекСтрока.Источник <> ИсточникРейсов Цикл
					ТекСтрока = ТекСтрока.Родитель;
				КонецЦикла;
				
				ИсточникРейсов.СформироватьМенюПеремещенияВРейсы(Меню, Параметр1.Рейс, ТекСтрока.ОсновнойРайон);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "УстановленФильтр" Тогда
		Если Параметр1.Свойство("Рейс") Тогда
			ТекущийРейс = Параметр1.Рейс;
		Иначе
			ТекущийРейс = Неопределено;
		КонецЕсли;
		КонструкторДанных.ДобавитьПараметр("Рейс", ТекущийРейс);
		
	ИначеЕсли Событие = "Выбор" Тогда
		Если Журнал.Дерево.ТекущаяКолонка.Имя = "НовыйПорядковыйНомерТочки" Тогда
			Если Журнал.Дерево.ТекущиеДанные.УпорядочиваниеДоступно <> Истина Тогда Возврат Ложь; КонецЕсли;
			
			НомерТочки = Журнал.Дерево.ТекущиеДанные.НовыйПорядковыйНомерТочки;
			Если ВвестиЗначение(НомерТочки, "Укажите порядковый номер точки") Тогда
				СтарыйНомерТочки = Журнал.Дерево.ТекущиеДанные.НовыйПорядковыйНомерТочки;
				Если СтарыйНомерТочки = НомерТочки Тогда Возврат Истина; КонецЕсли;
				
				Строки = ?(Журнал.Дерево.ТекущиеДанные.Родитель = Неопределено, Журнал.Дерево.Значение.Строки, Журнал.Дерево.ТекущиеДанные.Родитель.Строки);
				
				Если НомерТочки = 0 Тогда
					Для Каждого Строка Из Строки Цикл
						Если Строка.НовыйПорядковыйНомерТочки > СтарыйНомерТочки Тогда
							Строка.НовыйПорядковыйНомерТочки = Строка.НовыйПорядковыйНомерТочки - 1;
						КонецЕсли;
					КонецЦикла;	
				Иначе
					Если СтарыйНомерТочки <> 0 Тогда
						Для Каждого Строка Из Строки Цикл
							Если Строка.НовыйПорядковыйНомерТочки > СтарыйНомерТочки Тогда
								Строка.НовыйПорядковыйНомерТочки = Строка.НовыйПорядковыйНомерТочки - 1;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Для Каждого Строка Из Строки Цикл
						Если Строка.НовыйПорядковыйНомерТочки >= НомерТочки Тогда
							Строка.НовыйПорядковыйНомерТочки = Строка.НовыйПорядковыйНомерТочки + 1;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
				Журнал.Дерево.ТекущиеДанные.НовыйПорядковыйНомерТочки = НомерТочки;
				Журнал.Дерево.ТекущиеДанные.Упорядочивать = НомерТочки <> 0;
				
				ОбновитьДоступностьУпорядочивания(Строки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметр1.Доставка) Тогда
			ОткрытьЗначение(Параметр1.Доставка);
		КонецЕсли;
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "СохранитьМаршрут" Тогда
			икПодборПоКарте.СохранитьМаршрут();
			
		ИначеЕсли Параметр1 = "ОтменитьМаршрут" Тогда
			икПодборПоКарте.ОтменитьМаршрут();
			
		ИначеЕсли Параметр1 = "УпорядочитьМаршрут" Тогда
			Если Журнал.Дерево.Колонки.НовыйПорядковыйНомерТочки.Видимость Тогда
				ПринятьУпорядочиваниеМаршрута();				
			Иначе
				НачатьУпорядочиваниеМаршрута();				
			КонецЕсли;
			
		ИначеЕсли Параметр1 = "СброситьУпорядочиваниеМаршрута" Тогда
			СброситьУпорядочиваниеМаршрута();
			
		ИначеЕсли Параметр1 = "УдалитьТочкуМаршрута" ИЛИ Параметр1 = "ОтменитьДоставкуМаршрута" Тогда
			
			ИндексСтрокиДереваЖурнала = 0;
			ТекущийРейс = Журнал.Дерево.ТекущаяСтрока.Рейс;
			МассивДоставокНаУдаление = Новый Массив;
			МассивГруппСтрокНаУдаление = Новый Массив;
			
			Пока ИндексСтрокиДереваЖурнала < Журнал.Дерево.ВыделенныеСтроки.Количество() Цикл 
				ТекСтрока = Журнал.Дерево.ВыделенныеСтроки.Получить(ИндексСтрокиДереваЖурнала);
				//получаем доставки текущего выделения
				Если ЗначениеЗаполнено(ТекСтрока.Доставка) Тогда
					//1-й уровень
					МассивДоставокНаУдаление.Добавить(ТекСтрока.Доставка);
				Иначе
					Для каждого стрГруппыДерева Из ТекСтрока.Строки Цикл
						//2-й уровень
						Если ЗначениеЗаполнено(стрГруппыДерева.Доставка) Тогда
							МассивДоставокНаУдаление.Добавить(стрГруппыДерева.Доставка);
						Иначе
							МассивГруппСтрокНаУдаление.Добавить(стрГруппыДерева);
						КонецЕсли;
					КонецЦикла;
					Если МассивГруппСтрокНаУдаление.Количество()<>0 Тогда
						//3-й уровень
						Для каждого элемМассиваГруппСтрокНаУдаление Из МассивГруппСтрокНаУдаление Цикл
							Для каждого стрГруппыДерева Из элемМассиваГруппСтрокНаУдаление.Строки Цикл
								МассивДоставокНаУдаление.Добавить(стрГруппыДерева.Доставка);
							КонецЦикла; 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли;
				ИндексСтрокиДереваЖурнала = ИндексСтрокиДереваЖурнала + 1;
			КонецЦикла;
			
			Если МассивДоставокНаУдаление.Количество() = 1 Тогда
				Если Параметр1 = "ОтменитьДоставкуМаршрута" Тогда
					ТекстВопроса = "Отменить местную доставку №" + МассивДоставокНаУдаление[0].Номер + " и поместить ее в архив?";
				Иначе
					ТекстВопроса = "Вернуть местную доставку №" + МассивДоставокНаУдаление[0].Номер + " на планирование?";
				КонецЕсли;
			ИначеЕсли МассивДоставокНаУдаление.Количество() > 1 Тогда
				СтрокаЗаявок = СтрокаИзМассива(МассивДоставокНаУдаление);				
				Если Параметр1 = "ОтменитьДоставкуМаршрута" Тогда
					ТекстВопроса = "Отменить заявки и поместить их в архив?" + Символы.ПС + СтрокаЗаявок;
				Иначе
					ТекстВопроса = "Вернуть заявки на планирование?" + Символы.ПС + СтрокаЗаявок;
				КонецЕсли;
			КонецЕсли;
						
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				УдалитьДоставки(ТекущийРейс, МассивДоставокНаУдаление);
				
				Если Параметр1 = "ОтменитьДоставкуМаршрута" Тогда
					ОтменитьДоставки(МассивДоставокНаУдаление);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли Параметр1 = "УдалитьТочкуМаршрутаНетНаСкладе" Тогда
			
			ИндексСтрокиДереваЖурнала = 0;
			ТекущийРейс = Журнал.Дерево.ТекущаяСтрока.Рейс;
			МассивДоставокНаУдаление = Новый Массив;
			МассивГруппСтрокНаУдаление = Новый Массив;
			
			Пока ИндексСтрокиДереваЖурнала < Журнал.Дерево.ВыделенныеСтроки.Количество() Цикл 
				ТекСтрока = Журнал.Дерево.ВыделенныеСтроки.Получить(ИндексСтрокиДереваЖурнала);
				//получаем доставки текущего выделения
				Если ЗначениеЗаполнено(ТекСтрока.Доставка) Тогда
					//1-й уровень
					МассивДоставокНаУдаление.Добавить(ТекСтрока.Доставка);
				Иначе
					Для каждого стрГруппыДерева Из ТекСтрока.Строки Цикл
						//2-й уровень
						Если ЗначениеЗаполнено(стрГруппыДерева.Доставка) Тогда
							МассивДоставокНаУдаление.Добавить(стрГруппыДерева.Доставка);
						Иначе
							МассивГруппСтрокНаУдаление.Добавить(стрГруппыДерева);
						КонецЕсли;
					КонецЦикла;
					Если МассивГруппСтрокНаУдаление.Количество()<>0 Тогда
						//3-й уровень
						Для каждого элемМассиваГруппСтрокНаУдаление Из МассивГруппСтрокНаУдаление Цикл
							Для каждого стрГруппыДерева Из элемМассиваГруппСтрокНаУдаление.Строки Цикл
								МассивДоставокНаУдаление.Добавить(стрГруппыДерева.Доставка);
							КонецЦикла; 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли;
				ИндексСтрокиДереваЖурнала = ИндексСтрокиДереваЖурнала + 1;
			КонецЦикла;
			
			Если МассивДоставокНаУдаление.Количество() = 1 Тогда
				Если Параметр1 = "ОтменитьДоставкуМаршрута" Тогда
					ТекстВопроса = "Отменить местную доставку №" + МассивДоставокНаУдаление[0].Номер + " и поместить ее в архив?";
				Иначе
					ТекстВопроса = "Вернуть местную доставку №" + МассивДоставокНаУдаление[0].Номер + " на планирование?";
				КонецЕсли;
			ИначеЕсли МассивДоставокНаУдаление.Количество() > 1 Тогда
				СтрокаЗаявок = СтрокаИзМассива(МассивДоставокНаУдаление);				
				Если Параметр1 = "ОтменитьДоставкуМаршрута" Тогда
					ТекстВопроса = "Отменить заявки и поместить их в архив?" + Символы.ПС + СтрокаЗаявок;
				Иначе
					ТекстВопроса = "Вернуть заявки на планирование?" + Символы.ПС + СтрокаЗаявок;
				КонецЕсли;
			КонецЕсли;
						
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				УдалитьДоставки(ТекущийРейс, МассивДоставокНаУдаление);
				
				Для Сч = 0 По МассивДоставокНаУдаление.Количество() - 1 Цикл
					//Наб = РегистрыСведений.ОтсутствующиеНаСкладеДоставки.СоздатьНаборЗаписей();
					//Наб.Отбор.Доставка.Установить(МассивДоставокНаУдаление[Сч]);
					//Наб.Отбор.Период.Установить(ТекущаяДата());
					//
					//Нов = Наб.Добавить();
					//Нов.Доставка = МассивДоставокНаУдаление[Сч];
					//Нов.Период = ТекущаяДата();
					//Нов.ОтсутствуетНаСкладе = Истина;
					//Наб.Записать();
					
					Нов = Документы.РегистрацияСтатусаДоставки.СоздатьДокумент();
					Нов.Дата = ТекущаяДата();
					Нов.Доставка = МассивДоставокНаУдаление[Сч];
					Нов.ДоставкаОтсутствует = Истина;
					Нов.Записать(РежимЗаписиДокумента.Запись);
					Нов.Записать(РежимЗаписиДокумента.Проведение);
					ОбновитьЖурналы();
				КонецЦикла;	
				
				
				Если Параметр1 = "ОтменитьДоставкуМаршрута" Тогда
					ОтменитьДоставки(МассивДоставокНаУдаление);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли Параметр1 = "ПересчитатьМаршрут" Тогда
			
			соВыбранныеТочки = Новый Соответствие;
			
			Если икПодборПоКарте = Неопределено Тогда
				Рейс = Журнал.ТекущиеДанные.Рейс;
			Иначе
				Рейс = икПодборПоКарте.РейсСсылка;
			КонецЕсли;
			
			Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Выбрана, Рейс", ЭтотОбъект, Истина, Рейс));
			Для Каждого Строка Из Строки Цикл
				соВыбранныеТочки.Вставить(Строка.КодТочки, Истина);
			КонецЦикла;
				
			стРейс = соРедактируемыеРейсы[Рейс];
			Если стРейс = Неопределено Тогда
				НачатьРедактирование(Рейс, Неопределено);
			Иначе
				обРейс = стРейс.Рейс;
			КонецЕсли;
			стРейс.Изменен = Истина;

			Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Рейс", ЭтотОбъект, Рейс));
			
			НачальнаяТочка = Неопределено;
			Для Каждого Строка Из Строки Цикл
				Если Строка.Выбрана = Истина Тогда
					НачальнаяТочка = Строка.НомерТочки;
				Иначе
					Прервать;
				КонецЕсли;					
			КонецЦикла;
			
			КонечнаяТочка = Неопределено;
			ъ = Строки.Количество() - 1;
			Пока ъ >= 0 Цикл
				Строка = Строки[ъ];
				ъ = ъ - 1;
				
				Если Строка.Выбрана = Истина Тогда
					КонечнаяТочка = Строка.НомерТочки;
				Иначе
					Прервать;
				КонецЕсли;					
			КонецЦикла;
			
			
			Если икПодборПоКарте <> Неопределено Тогда КонечнаяТочка = Неопределено; КонецЕсли;
			
			Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Выбрана, Рейс", ЭтотОбъект, Истина, Рейс));
			Для Каждого Строка Из Строки Цикл
				Строка.Выбрана = соВыбранныеТочки[Строка.КодТочки] = Истина;
				Журнал.ОкончитьРедактированиеСтроки(Строка);
			КонецЦикла;
	
			ПересчитатьРейс_(стРейс);
			
			Оповестить("ИзмененРейсМестнойДоставки", обРейс);
			
		ИначеЕсли Параметр1 = "АвтоупорядочитьМаршрут" Тогда
			
			Если Журнал.ТекущиеДанные = Неопределено Тогда Возврат Истина; КонецЕсли;
			
			Рейс = Журнал.ТекущиеДанные.Рейс;
				
			стРейс = соРедактируемыеРейсы[Рейс];
			Если стРейс = Неопределено Тогда
				стРейс = НачатьРедактирование(Рейс, Неопределено);
			КонецЕсли;
			
			АвтоупорядочитьМаршрут(Рейс);
			
		ИначеЕсли Параметр1 = "ВыделитьПервые" Тогда
			Если икПодборПоКарте = Неопределено Тогда
				Рейс = Журнал.ТекущиеДанные.Рейс;
			Иначе
				Рейс = икПодборПоКарте.РейсСсылка;
			КонецЕсли;
			
			Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Рейс", ЭтотОбъект, Рейс));
			Для Каждого Строка Из Строки Цикл
				Строка.Выбрана = Истина;
				Если Строка = Журнал.ТекущиеДанные Тогда Прервать; КонецЕсли;
			КонецЦикла;			
			
		ИначеЕсли Параметр1 = "ВыделитьПоследние" Тогда
			Если икПодборПоКарте = Неопределено Тогда
				Рейс = Журнал.ТекущиеДанные.Рейс;
			Иначе
				Рейс = икПодборПоКарте.РейсСсылка;
			КонецЕсли;
			
			Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Рейс", ЭтотОбъект, Рейс));
			Выделять = Ложь;
			Для Каждого Строка Из Строки Цикл
				Если Строка = Журнал.ТекущиеДанные Тогда Выделять = Истина; КонецЕсли;
				Если Выделять Тогда Строка.Выбрана = Истина; КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
	ИначеЕсли Событие = "ОкончаниеРедактирования" Тогда
		Если Журнал.Дерево.Колонки.НовыйПорядковыйНомерТочки.Видимость Тогда
			Строки = ?(Журнал.ТекущиеДанные.Родитель = Неопределено, Журнал.Дерево.Значение.Строки, Журнал.ТекущиеДанные.Родитель.Строки);
			Если Журнал.ТекущиеДанные.Упорядочивать Тогда
				МаксНомер = 0;				
				Для Каждого Строка Из Строки Цикл
					МаксНомер = Макс(МаксНомер, Строка.НовыйПорядковыйНомерТочки);
				КонецЦикла;
				
				Журнал.ТекущиеДанные.НовыйПорядковыйНомерТочки = МаксНомер + 1;
				Журнал.ОкончитьРедактированиеСтроки(Журнал.ТекущиеДанные);
				
				ОбновитьДоступностьУпорядочивания(Строки);
			Иначе
				Журнал.ТекущиеДанные.НовыйПорядковыйНомерТочки = 0;
				Журнал.ОкончитьРедактированиеСтроки(Журнал.ТекущиеДанные);
				
				ОбновитьДоступностьУпорядочивания(Строки);
				
				тзУпорядочивание = Новый ТаблицаЗначений;
				тзУпорядочивание.Колонки.Добавить("Номер");
				тзУпорядочивание.Колонки.Добавить("Строка");
				Для Каждого Строка Из Строки Цикл
					Если Не Строка.Упорядочивать Тогда Продолжить; КонецЕсли;
					
					стрУпорядочивание = тзУпорядочивание.Добавить();
					стрУпорядочивание.Номер = Строка.НовыйПорядковыйНомерТочки;
					стрУпорядочивание.Строка = Строка;
				КонецЦикла;
				
				тзУпорядочивание.Сортировать("Номер ВОЗР");
				Для Каждого стрУпорядочивание Из тзУпорядочивание Цикл
					стрУпорядочивание.Строка.НовыйПорядковыйНомерТочки = тзУпорядочивание.Индекс(стрУпорядочивание) + 1;
					Журнал.ОкончитьРедактированиеСтроки(стрУпорядочивание.Строка);
				КонецЦикла;
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
		
		Если Журнал.Дерево.ТекущаяКолонка <> Неопределено Тогда
			
			Если Журнал.Дерево.ТекущаяКолонка.Имя = "ДатаПрибытия"
			     или Журнал.Дерево.ТекущаяКолонка.Имя = "ДатаУбытия" Тогда
				
				Журнал.ТекущиеДанные.ФактическоеВремяПосещенияУказаноВручную = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Рейс = Журнал.ТекущиеДанные.Рейс;
		
		Если АвтоСохранениеИзменений Тогда
			стРейс = НачатьРедактирование(Рейс, Неопределено);
			стРейс.Изменен = Истина;
		Иначе
			стРейс = соРедактируемыеРейсы[Рейс];
		КонецЕсли;
		
		ПересчитатьРейс_(стРейс);
		
		Если Журнал.ТекущиеДанные <> Неопределено Тогда
			Если Журнал.ТекущиеДанные.Родитель <> Неопределено Тогда
				ОбновитьПрогноз(Журнал.ТекущиеДанные.Родитель.Строки);
			КонецЕсли;
		КонецЕсли;
				
	ИначеЕсли Событие = "НачатьПеретаскивание" Тогда
		соДоставки = Новый Соответствие;
		ЭтоПогрузки = Истина;
		Для Каждого Строка Из Параметр1 Цикл
			соДоставки.Вставить(Строка.Доставка, Истина);
			
			Если Строка.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка Тогда
				ЭтоПогрузки = Ложь;
			КонецЕсли;
		КонецЦикла;
		мсДоставки = Новый Массив;
		Для Каждого ЭлДоставка Из соДоставки Цикл
			Если ЗначениеЗаполнено(ЭлДоставка.Ключ) Тогда
				мсДоставки.Добавить(ЭлДоставка.Ключ);
			КонецЕсли;
		КонецЦикла;		
		Возврат Новый Структура("Вид, Рейс, Доставки, Погрузки, Журнал", "ДоставкиРейса", Параметр1[0].Рейс, мсДоставки, ЭтоПогрузки, ЭтотОбъект);
		
	ИначеЕсли Событие = "ПроверитьВозможностьПеретаскивания" Тогда
		Если Параметр1.Вид = "ПланируемыеДоставки" Тогда
			Если Параметр2 = Неопределено Тогда Возврат Ложь; КонецЕсли;
			Если Параметр2.Группировка = NULL Тогда Возврат Ложь; КонецЕсли;
			Возврат КонструкторДанных.Группировки[Параметр2.Группировка] = "НомерТочки";
		КонецЕсли;
		Если Параметр1.Вид = "ДоставкиРейса" Тогда
			Если Параметр2 = Неопределено Тогда Возврат Ложь; КонецЕсли;
			Если Параметр2.Группировка = NULL Тогда Возврат Ложь; КонецЕсли;
			Возврат КонструкторДанных.Группировки[Параметр2.Группировка] = "НомерТочки";
		КонецЕсли;
		Возврат Ложь;
		
	ИначеЕсли Событие = "ПеретаскиваниеОкончено" Тогда
		Если Параметр1.Вид = "ПланируемыеДоставки" Тогда
			стРейс = НачатьРедактирование(Параметр2.Рейс, Неопределено);
			
			НомерТочкиВставки = Параметр2.НомерТочки;
			Для Каждого Доставка Из Параметр1.Доставки Цикл
				ДобавитьДоставку(Параметр2.Рейс, Доставка, НомерТочкиВставки);
			КонецЦикла;
			
			СохранитьМаршрутРейса_(стРейс);
			
			ОбновитьЖурналы();
			
			Возврат Истина;
			
		ИначеЕсли Параметр1.Вид = "ДоставкиРейса" Тогда
			Если Параметр2.Рейс = Параметр1.Рейс Тогда
				стРейс = НачатьРедактирование(Параметр2.Рейс, Неопределено);
				
				НомерТочкиВставки = Параметр2.НомерТочки;
				Рейс = Параметр2.Рейс;
				
				Маршрут = стРейс.Маршрут;
				
				СтрокаПеретаскивания = Параметр1.Журнал.Журнал.Дерево.ТекущаяСтрока;
				Если Не МожноПеретаскивать(Маршрут, СтрокаПеретаскивания, НомерТочкиВставки) Тогда
					Возврат Истина;
				КонецЕсли;	
				
				стрСтрокаВставки = Маршрут[НомерТочкиВставки];
				
				Для Каждого Доставка Из Параметр1.Доставки Цикл
					УдалитьДоставку(Рейс, Доставка);
				КонецЦикла;
				
				НовыйНомерТочкиВставки = НомерТочкиВставки;
				Попытка
					ъ = Маршрут.Индекс(стрСтрокаВставки);
					НовыйНомерТочкиВставки = ъ;
				Исключение
				КонецПопытки;
				
				Если НовыйНомерТочкиВставки = -1 Тогда
					НомерТочкиВставки = Маршрут.Количество();					
				КонецЕсли;
				
				Для Каждого Доставка Из Параметр1.Доставки Цикл
					ДобавитьДоставку(Рейс, Доставка, НомерТочкиВставки,, Параметр1.Погрузки);
				КонецЦикла;
				
				ПересчитатьРейс_(стРейс);	
				
				Если АвтоСохранениеИзменений Тогда
					СохранитьМаршрутРейса_(стРейс,,Ложь);
					ОбновитьЖурналы();
				КонецЕсли;
			Иначе	
				стРейс1 = НачатьРедактирование(Параметр1.Рейс, Неопределено);
				стРейс2 = НачатьРедактирование(Параметр2.Рейс, Неопределено);
				
				Для Каждого Доставка Из Параметр1.Доставки Цикл
					УдалитьДоставку(Параметр1.Рейс, Доставка);
				КонецЦикла;
				
				НомерТочкиВставки = Параметр2.НомерТочки;
				Для Каждого Доставка Из Параметр1.Доставки Цикл
					ДобавитьДоставку(Параметр2.Рейс, Доставка, НомерТочкиВставки);
				КонецЦикла;
				
				СохранитьМаршрутРейса_(стРейс1);

				СохранитьМаршрутРейса_(стРейс2);
				
				Если стРейс1.Маршрут.Количество()=0 Тогда
					
					РасформироватьРейс(стРейс1.Ссылка);
				КонецЕсли;
				
				ОбновитьЖурналы();
				
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();
	КонецЕсли;	
КонецФункции

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
	Если дзДанные.Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	стПустыеЗадания = Новый Структура("Вид", Перечисления.новаВидыЗаданийРейсаМестнойДоставки.ПустаяСсылка());
	Для Каждого стрТочка Из дзДанные.Строки[0].Строки Цикл
		ПустыеЗадания = стрТочка.Строки.НайтиСтроки(стПустыеЗадания);
		Для Каждого стрЗадание Из ПустыеЗадания Цикл
			стрТочка.Строки.Удалить(стрЗадание);
		КонецЦикла;
	КонецЦикла;
	
	стПустыеЗадания = Новый Структура("Вид", NULL);
	Для Каждого стрТочка Из дзДанные.Строки[0].Строки Цикл
		ПустыеЗадания = стрТочка.Строки.НайтиСтроки(стПустыеЗадания);
		Для Каждого стрЗадание Из ПустыеЗадания Цикл
			стрТочка.Строки.Удалить(стрЗадание);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////
//*** УПОРЯДОЧИВАНИЕ МАРШРУТА ***//

Процедура ПереупорядочитьМаршрут(Рейс, НомерТочкиВставки, Строки)
	тзУпорядочивание = Новый ТаблицаЗначений;
	тзУпорядочивание.Колонки.Добавить("Номер");
	тзУпорядочивание.Колонки.Добавить("Строка");
	Для Каждого Строка Из Строки Цикл
		Если Строка.Упорядочивать <> Истина Тогда Продолжить; КонецЕсли;
		
		стрУпорядочивание = тзУпорядочивание.Добавить();
		стрУпорядочивание.Номер = Строка.НовыйПорядковыйНомерТочки + ?(Строка.Упорядочивать, 0, 10000);
		стрУпорядочивание.Строка = Строка;
	КонецЦикла;
	
	тзУпорядочивание.Сортировать("Номер ВОЗР");
	
	НачатьРедактирование(Рейс, Неопределено);
	
	Для Каждого стрУпорядочивание Из тзУпорядочивание Цикл
		ИндексСтроки = Строки.Индекс(стрУпорядочивание.Строка);
		Если ИндексСтроки <> стрУпорядочивание.Номер Тогда
			Строки.Сдвинуть(стрУпорядочивание.Строка, стрУпорядочивание.Номер - ИндексСтроки - 1);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Строки Цикл
		Строка.КодУчасткаТрекаКТочке = 0;
		Строка.КодУчасткаТрекаОтТочки = 0;
		Строка.НомерТочки = Строки.Индекс(Строка);
	КонецЦикла;
	
	//мсДоставки = Новый Массив;
	//Для Каждого стрУпорядочивание Из тзУпорядочивание Цикл
	//	Для Каждого Строка Из стрУпорядочивание.Строка.Строки Цикл
	//		Если ЗначениеЗаполнено(Строка.Доставка) Тогда
	//			Если мсДоставки.Найти(Строка.Доставка) = Неопределено Тогда
	//				мсДоставки.Добавить(Строка.Доставка);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	//
	//
	//Для Каждого Доставка Из мсДоставки Цикл
	//	УдалитьДоставку(Рейс, Доставка);
	//КонецЦикла;
	//
	//Для Каждого Доставка Из мсДоставки Цикл
	//	ДобавитьДоставку(Рейс, Доставка, -1);
	//КонецЦикла;
	//
	
	ПересчитатьРейс_(соРедактируемыеРейсы[Рейс]);
		
	//Если икПодборПоКарте <> Неопределено Тогда
	//	ОтобразитьНаКарте(ТекущийРейс);
	//	новаКонтекст.МенеджерКарт.ОбновитьКарту();
	//КонецЕсли;
	//
	//Если АвтоСохранениеИзменений Тогда
	//	СохранитьМаршрутРейса(Рейс);
	//КонецЕсли;
КонецПроцедуры

Процедура НачатьУпорядочиваниеМаршрута()
	ИндексУпорядочивания = Журнал.Дерево.Колонки.Индекс(Журнал.Дерево.Колонки.НовыйПорядковыйНомерТочки);
	ИндексИерархии = 1;
	Пока Журнал.Дерево.Колонки[ИндексИерархии].Положение <> ПоложениеКолонки.НоваяКолонка Цикл
		ИндексИерархии = ИндексИерархии + 1;
	КонецЦикла;
	
	Журнал.Дерево.Колонки.Сдвинуть(Журнал.Дерево.Колонки.НовыйПорядковыйНомерТочки, ИндексИерархии - ИндексУпорядочивания);
	
	Журнал.Дерево.Колонки.НовыйПорядковыйНомерТочки.Видимость = Истина;
	
	СброситьУпорядочиваниеМаршрута();
	
	Если Журнал.Дерево.ТекущиеДанные.Источник = ЭтотОбъект Тогда
		Если Журнал.Дерево.ТекущиеДанные.Родитель = Неопределено Тогда
			СтрокиТекущегоМаршрута = Журнал.Дерево.Значение.Строки;
		Иначе
			СтрокиТекущегоМаршрута = Журнал.Дерево.ТекущиеДанные.Родитель.Строки;
		КонецЕсли;
		ОбновитьДоступностьУпорядочивания(СтрокиТекущегоМаршрута);
	КонецЕсли;
КонецПроцедуры

Процедура СброситьУпорядочиваниеМаршрута()
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Упорядочивать", Истина), Истина);
	Для Каждого Строка Из Строки Цикл
		Строка.Упорядочивать = Ложь;
		Строка.НовыйПорядковыйНомерТочки = 0;
		Журнал.ОкончитьРедактированиеСтроки(Строка);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДоступностьУпорядочивания(Строки)
	соВсеПогруженныеДоставки = Новый Соответствие;
	Для Каждого СтрокаТочкиДоставки Из Строки Цикл
		Для Каждого Строка Из СтрокаТочкиДоставки.Строки Цикл
			Если Строка.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка Тогда
				соВсеПогруженныеДоставки.Вставить(Строка.Доставка, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	соПогруженныеДоставки = Новый Соответствие;
	
	Для Каждого СтрокаТочкиДоставки Из Строки Цикл
		Если СтрокаТочкиДоставки.Упорядочивать = Истина Тогда
			Для Каждого Строка Из СтрокаТочкиДоставки.Строки Цикл
				Если Строка.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка Тогда
					соПогруженныеДоставки.Вставить(Строка.Доставка, Истина);
					
				ИначеЕсли Строка.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка Тогда
					Если соВсеПогруженныеДоставки[Строка.Доставка] = Неопределено Тогда
						соПогруженныеДоставки.Вставить(Строка.Доставка, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТочкиДоставки Из Строки Цикл
		СтрокуМожноУпорядочивать = Истина;
		Для Каждого Строка Из СтрокаТочкиДоставки.Строки Цикл
			Если Строка.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка Тогда
				Если соПогруженныеДоставки[Строка.Доставка] = Неопределено Тогда
					СтрокуМожноУпорядочивать = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТочкиДоставки.УпорядочиваниеДоступно = СтрокуМожноУпорядочивать;
		Если Не СтрокуМожноУпорядочивать Тогда
			СтрокаТочкиДоставки.Упорядочивать = Ложь;
			СтрокаТочкиДоставки.НовыйПорядковыйНомерТочки = 0;
		КонецЕсли;
		Журнал.ОкончитьРедактированиеСтроки(СтрокаТочкиДоставки);
	КонецЦикла;
КонецПроцедуры

Процедура ПринятьУпорядочиваниеМаршрута()
	Журнал.Дерево.Колонки.НовыйПорядковыйНомерТочки.Видимость = Ложь;
	
	Строки = ?(Журнал.ТекущиеДанные.Родитель = Неопределено, Журнал.Дерево.Значение.Строки, Журнал.ТекущиеДанные.Родитель.Строки);
	
	соРейсы = Новый Соответствие;
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Упорядочивать", Истина), Истина);
	Для Каждого Строка Из Строки Цикл
		СтрокиМаршрута = ?(Строка.Родитель = Неопределено, Журнал.Дерево.Значение.Строки, Строка.Родитель.Строки);
		соРейсы.Вставить(Строка.Рейс, Новый Структура("Строки, НомерТочкиВставки", СтрокиМаршрута, Строка.НомерТочки));
	КонецЦикла;
	
	НачатьТранзакцию();
	Для Каждого ЭлРейс Из соРейсы Цикл
		ПереупорядочитьМаршрут(ЭлРейс.Ключ, ЭлРейс.Значение.НомерТочкиВставки, ЭлРейс.Значение.Строки);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

/////////////////////////////
//*** РАБОТА С ЖУРНАЛОМ ***//

// Настраивает журнал маршрута при инициалиации
//
// Параметры:
//	ИсточникРодитель  <ОбработкаОбъект.новаИсточникРейсов; Неопределено>	
//
Процедура Настроить(ИсточникРодитель)
	ОтображатьЗагрузкуНарастающимИтогом = Константы.новаОтображатьЗагрузкуНарастающимИтогом.Получить();
	
	мсИнструменты = Новый Массив;
	
	Если Не МаршрутСопровождения И ИсточникРодитель = Неопределено Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ПересчитатьМаршрут", БиблиотекаКартинок.новаАвтоупорядочитьТочкиМаршрута, "Рассчитать маршрут",, ИсточникРодитель <> Неопределено));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "АвтоупорядочитьМаршрут", БиблиотекаКартинок.новаАвтоупорядочитьТочкиМаршрута, "Оптимизировать маршрут",, ИсточникРодитель <> Неопределено));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ВыделитьПервые", БиблиотекаКартинок.новаВыделитьПервые, "Выделить первые",, Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ВыделитьПоследние", БиблиотекаКартинок.новаВыделитьПоследние, "Выделить последние",, Истина));
	КонецЕсли;
	
	Если Не МаршрутСопровождения Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КоманднаяПанель, КонтекстноеМеню", "УпорядочитьМаршрут", БиблиотекаКартинок.новаУпорядочитьМаршрут, "Упорядочить маршрут",, Истина, Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "СброситьУпорядочиваниеМаршрута", БиблиотекаКартинок.новаСброситьУпорядочиваниеМаршрута, "Сбросить упорядочивание",, Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "УдалитьТочкуМаршрута", БиблиотекаКартинок.новаУдалитьСтроки, "Удалить из рейса",, Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "УдалитьТочкуМаршрутаНетНаСкладе", БиблиотекаКартинок.новаУдалитьСтроки, "Удалить из рейса (нет на складе)",, Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ОтменитьДоставкуМаршрута", БиблиотекаКартинок.новаУдалитьСтроки, "Отменить доставку",, Истина));
	КонецЕсли;
	
	Если икПодборПоКарте <> Неопределено Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "СохранитьМаршрут", БиблиотекаКартинок.Записать, "Сохранить"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ОтменитьМаршрут", БиблиотекаКартинок.Закрыть, "Отмена"));
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("Инструменты", мсИнструменты);
	
	Если ИнтерактивноеИзменениеПорядкаТочек Тогда
	    ПараметрыЖурнала.Вставить("ИсточникПеретаскивания", Истина);
	    ПараметрыЖурнала.Вставить("ПриемникПеретаскивания", Истина);
	КонецЕсли;
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	КонструкторДанных.ПостОбработчикДанных = ЭтотОбъект;
	
	Если МаршрутСопровождения Тогда
		КонструкторДанных.ТекстЗапроса = "
		|	(ВЫБРАТЬ * ИЗ РегистрСведений.новаТочкиМаршрутаРейсов ГДЕ Рейс = &Рейс И МаршрутСопровождения) КАК Маршрут
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ * ИЗ РегистрСведений.новаЗаданияРейсов ГДЕ Рейс = &Рейс И МаршрутСопровождения) КАК Задания
		|ПО
		| Задания.КодТочки = Маршрут.КодТочки
		|";
	Иначе
		КонструкторДанных.ТекстЗапроса = "
		|	(ВЫБРАТЬ * ИЗ РегистрСведений.новаТочкиМаршрутаРейсов ГДЕ Рейс = &Рейс И НЕ МаршрутСопровождения) КАК Маршрут
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ * ИЗ РегистрСведений.новаЗаданияРейсов ГДЕ Рейс = &Рейс И НЕ МаршрутСопровождения) КАК Задания
		|ПО
		| Задания.КодТочки = Маршрут.КодТочки
		|";
	КонецЕсли;
	
	КонструкторДанных.ПостояннаяВыборка = ",
	|	Маршрут.Рейс КАК Рейс,
	|	Маршрут.НомерТочки КАК НомерТочки,
	|	Маршрут.КодТочки КАК КодТочки,
	|	Маршрут.Действие КАК Действие,
	|	Маршрут.ТочкаМаршрута КАК ТочкаМаршрута,
	|	Маршрут.ТочкаМаршрута.ВладелецТочки.Наименование КАК ВладелецТочки,
	|	Представление(Маршрут.ТочкаМаршрута) КАК ТочкаМаршрута_Пред,
	|	Маршрут.ТочкаМаршрута.Адрес КАК Адрес,
	|	Представление(Маршрут.ТочкаМаршрута.Адрес) КАК Адрес_Пред,
	|	Маршрут.ТочкаМаршрута.Адрес.Широта КАК Широта,
	|	Маршрут.ТочкаМаршрута.Адрес.Долгота КАК Долгота,
	|	Маршрут.ПлановаяДатаПосещения КАК ПлановаяДатаПосещения,
	|	Маршрут.ПлановоеВремяПосещения КАК ПлановоеВремяПосещения,
	|	Маршрут.ПлановоеВремяПосещенияУказаноВручную КАК ПлановоеВремяПосещенияУказаноВручную,
	|	Маршрут.ДатаПрибытия КАК ДатаПрибытия,
	|	Маршрут.ДатаУбытия КАК ДатаУбытия,
	|	Маршрут.ФактическоеВремяПосещенияУказаноВручную КАК ФактическоеВремяПосещенияУказаноВручную,
	|	Маршрут.КодУчасткаТрекаКТочке КАК КодУчасткаТрекаКТочке,
	|	Маршрут.КодУчасткаТрекаОтТочки КАК КодУчасткаТрекаОтТочки,
	|	Маршрут.РасстояниеКТочке КАК РасстояниеКТочке,
	|	Маршрут.РасстояниеОтТочки КАК РасстояниеОтТочки,
	|	Маршрут.ВремяКТочке КАК ВремяКТочке,
	|	Маршрут.ВремяОтТочки КАК ВремяОтТочки,
	|	Маршрут.ИдТочки КАК ИдТочки,
	|
	|	Задания.НомерЗадания КАК НомерЗадания,
	|	Задания.Вид КАК Вид,
	|	Задания.Доставка КАК Доставка,
	|
	|	ВЫБОР
	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Погрузка) ТОГДА Задания.Доставка.ВремяОтправленияС
	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка) ТОГДА Задания.Доставка.ВремяПрибытияС
	|	КОНЕЦ КАК ОкноС,
	|
	|	ВЫБОР
	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Погрузка) ТОГДА Задания.Доставка.ВремяОтправленияПо
	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка) ТОГДА Задания.Доставка.ВремяПрибытияПо
	|	КОНЕЦ КАК ОкноПо,
	|";
	
	//Если ОтображатьЗагрузкуНарастающимИтогом Тогда
	//	КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + "
	//	|	ВЫБОР
	//	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Погрузка) ТОГДА Задания.Доставка.Груз.Вес
	//	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка) ТОГДА -Задания.Доставка.Груз.Вес
	//	|	КОНЕЦ КАК Вес,
	//	|
	//	|	ВЫБОР
	//	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Погрузка) ТОГДА Задания.Доставка.Груз.Объем
	//	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка) ТОГДА -Задания.Доставка.Груз.Объем
	//	|	КОНЕЦ КАК Объем,
	//	|
	//	|	ВЫБОР
	//	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Погрузка) ТОГДА Задания.Доставка.Груз.КоличествоЕдиницПеревозки
	//	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка) ТОГДА -Задания.Доставка.Груз.КоличествоЕдиницПеревозки
	//	|	КОНЕЦ КАК КоличествоЕдиницПеревозки,";
	//Иначе
		КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + "
		|	Задания.Доставка.Груз.Вес КАК Вес,
		|	Задания.Доставка.Груз.Объем КАК Объем,
		|	Задания.Доставка.Груз.КоличествоЕдиницПеревозки КАК КоличествоЕдиницПеревозки,";
	//КонецЕсли;
	
	КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + "
	|	Задания.Доставка.Груз.ПеревезеноПалетт КАК Палетт,
	|	ВЫБОР
	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка) ТОГДА Задания.Доставка.Груз.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР
	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Погрузка) ТОГДА Задания.Доставка.ВремяПребыванияГрузоотправителя
	|		КОГДА Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка) ТОГДА Задания.Доставка.ВремяПребыванияГрузополучателя
	|	КОНЕЦ КАК ВремяПребыванияЗадания,
	|
	|	Представление(Задания.Доставка) КАК ОписаниеЗадания,
	|	Задания.ЗаданиеВыполнено КАК ЗаданиеВыполнено,
	|	""00:00 - 00:00"" КАК Окно,
	|	" + ?(икПодборПоКарте = Неопределено, "Ложь", "Истина") + " КАК Выбрана,
	|	0 КАК НовыйПорядковыйНомерТочки,
	|	Ложь КАК Упорядочивать,
	|	Ложь КАК УпорядочиваниеДоступно
	|";
	
	// Михушкин --->> 
	Если МаршрутСопровождения Тогда
		КонструкторДанных.ПостоянныйОтбор = "Маршрут.Рейс = &Рейс И Маршрут.МаршрутСопровождения И ЛОЖЬ";
	Иначе
		КонструкторДанных.ПостоянныйОтбор = "Маршрут.Рейс = &Рейс И НЕ Маршрут.МаршрутСопровождения  И ЛОЖЬ";
	КонецЕсли;
	//ТекТерминал = ПараметрыСеанса.ТерминалДоставки;
	//Если НЕ ЗначениеЗаполнено(ТекТерминал) Тогда	
	//	ТекТерминал = Справочники.РегиональныеТерминалы.МоскваСтриж;		
	//КонецЕсли;
	//Если МаршрутСопровождения Тогда
	//	КонструкторДанных.ПостоянныйОтбор = "Маршрут.Рейс = &Рейс И Маршрут.МаршрутСопровождения И Маршрут.Рейс.Транспорт.Родитель.ТерминалДоставки В (&ТерминалДоставки)";
	//Иначе
	//	КонструкторДанных.ПостоянныйОтбор = "Маршрут.Рейс = &Рейс И НЕ Маршрут.МаршрутСопровождения И Маршрут.Рейс.Транспорт.Родитель.ТерминалДоставки В (&ТерминалДоставки)";
	//КонецЕсли;
	//
	//СписокТерминал = Новый СписокЗначений;
	//Если ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда		
	//	СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);	
	//ИначеЕсли ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
	//	СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
	//Иначе	
	//	СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
	//	СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
	//	СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
	//КонецЕсли;		
	//КонструкторДанных.ДобавитьПараметр("ТерминалДоставки", СписокТерминал);
	// <<--- Михушкин 
	
	
	КонструкторДанных.ДобавитьПараметр("Рейс", Неопределено);
	
	КонструкторДанных.ДобавитьПоле("ТочкаМаршрута");
	КонструкторДанных.ДобавитьСортировкуПоля("Маршрут.НомерТочки");
	
	КонструкторДанных.ДобавитьПоле("НомерТочки");
	КонструкторДанных.ДобавитьСортировкуПоля("Маршрут.НомерТочки");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		
	КонструкторДанных.ДобавитьПоле("Адрес");
	КонструкторДанных.ДобавитьСортировкуПоля("Маршрут.ТочкаМаршрута.Адрес.Наименование");
	
	КонструкторДанных.ДобавитьПоле("ВладелецТочки","ВладелецТочки");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	КонструкторДанных.ДобавитьПоле("Грузополучатель");
	КонструкторДанных.ДобавитьВыборкуПоля(,"Задания.Доставка.Грузополучатель");
	КонструкторДанных.ДобавитьОтборПоля(,"Задания.Доставка.Грузополучатель");
	КонструкторДанных.ДобавитьСортировкуПоля("Задания.Доставка.Грузополучатель");
	
	КонструкторДанных.ДобавитьПоле("Грузоотправитель","Грузоотправитель");
	КонструкторДанных.ДобавитьВыборкуПоля(,"Задания.Доставка.Грузоотправитель");
	КонструкторДанных.ДобавитьОтборПоля(,"Задания.Доставка.Грузоотправитель");
	КонструкторДанных.ДобавитьСортировкуПоля("Задания.Доставка.Грузоотправитель");
	
	//КонструкторДанных.ДобавитьПоле("НомерТочки");
	
	КонструкторДанных.ДобавитьПоле("НовыйПорядковыйНомерТочки");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонструкторДанных.ДобавитьПоле("Упорядочивать");
	КонструкторДанных.ДобавитьПоле("УпорядочиваниеДоступно");
	
	КонструкторДанных.ДобавитьПоле("Окно");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонструкторДанных.ДобавитьПоле("Выбрана");
	
	КонструкторДанных.ДобавитьПоле("ПлановаяДатаПосещения", "Прибытие", "ДФ=ЧЧ:мм");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонструкторДанных.ДобавитьПоле("ПлановоеВремяПосещения", "Пребывание в точке", "ДФ=ЧЧ:мм");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонструкторДанных.ДобавитьПоле("ВремяПребыванияЗадания", "Выполнение задания", "ДФ=ЧЧ:мм");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	
	КонструкторДанных.ДобавитьПоле("ДатаПрибытия", "Прибыл факт", "ДФ=ЧЧ:мм");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонструкторДанных.ДобавитьПоле("ДатаУбытия", "Убыл факт", "ДФ=ЧЧ:мм");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

		
	КонструкторДанных.ДобавитьПоле("ПрогнозируемаяДатаПрибытия", "Прибыл прогноз", "ДФ=ЧЧ:мм", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонструкторДанных.ДобавитьПоле("ПрогнозируемаяДатаУбытия", "Убыл прогноз", "ДФ=ЧЧ:мм", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		
	КонструкторДанных.ДобавитьПоле("Вес",, "ЧДЦ=3");
	КонструкторДанных.ДобавитьИтог("Вес");
	
	КонструкторДанных.ДобавитьПоле("Объем",, "ЧДЦ=3");
	КонструкторДанных.ДобавитьИтог("Объем");
	
	КонструкторДанных.ДобавитьПоле("Палетт",, "ЧДЦ=0");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонструкторДанных.ДобавитьИтог("Палетт");
	
	КонструкторДанных.ДобавитьПоле("Стоимость", "Сумма", "ЧДЦ=2");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонструкторДанных.ДобавитьИтог("Стоимость");
	
	КонструкторДанных.ДобавитьПоле("КоличествоЕдиницПеревозки", "Мест", "ЧДЦ=2");
	КонструкторДанных.ДобавитьИтог("КоличествоЕдиницПеревозки");
	
	КонструкторДанных.ДобавитьПоле("НомерЗадания", "НомерЗадания");
	КонструкторДанных.ДобавитьСортировкуПоля("Задания.НомерЗадания");
	
	КонструкторДанных.ДобавитьПоле("ОписаниеЗадания", "Задание");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонструкторДанных.ДобавитьПоле("ЗаданиеВыполнено");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("НомерТочки", "НовыйПорядковыйНомерТочки, ВладелецТочки, Адрес, Адрес_Пред, Рейс, КодТочки, Действие, ТочкаМаршрута, ТочкаМаршрута_Пред, Широта, Долгота, ПлановаяДатаПосещения, ПлановоеВремяПосещения, ПлановоеВремяПосещенияУказаноВручную, ДатаПрибытия, ДатаУбытия, КодУчасткаТрекаКТочке, КодУчасткаТрекаОтТочки, РасстояниеКТочке, РасстояниеОтТочки, ВремяКТочке, ВремяОтТочки, ИдТочки");
	
	КонструкторДанных.УстановитьВидимостьПолей("НомерТочки", "НовыйПорядковыйНомерТочки, ВладелецТочки, Вес, Объем, Палетт, Стоимость, КоличествоЕдиницПеревозки, Окно, ПлановаяДатаПосещения, ПлановоеВремяПосещения, ДатаПрибытия, ПрогнозируемаяДатаПрибытия, ДатаУбытия, ПрогнозируемаяДатаУбытия");
	КонструкторДанных.УстановитьВидимостьПолей(NULL, "ВладелецТочки, Вес, Объем, Палетт, Стоимость, КоличествоЕдиницПеревозки, Окно, ВремяПребыванияЗадания");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("НомерТочки, НомерЗадания"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Добавление строк в дерево
//
// Параметры:
//	СтрокиПриемник	<КоллекцияСтрокДереваЗначений>	
//	СтрокиИсточник	<КоллекцияСтрокДереваЗначений>	
//	Источник	   	<ОбработкаОбъект.новаИсточникМаршрутРейса>
//
Процедура ДобавитьСтрокиВДеревоДанных(СтрокиПриемник, СтрокиИсточник, Источник)
	Для Каждого Строка Из СтрокиИсточник Цикл
		СтрокаПриемник = СтрокиПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, Строка);
		СтрокаПриемник.Источник = Источник;
		Если Строка.Строки.Количество() > 0 Тогда
			ДобавитьСтрокиВДеревоДанных(СтрокаПриемник.Строки, Строка.Строки, Источник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////
//*** РЕДАКТИРОВАНИЕ РЕЙСА ***//

// Инициализирует редактирование маршрута рейса.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//  РейсОбъект <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//
Функция НачатьРедактирование(РейсСсылка, РейсОбъект) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Если стРейс <> Неопределено Тогда
		Если стРейс.Рейс <> Неопределено Тогда
			//стРейс.Рейс = РейсОбъект;
			Возврат стРейс;
		КонецЕсли;
	КонецЕсли;
	
	Если КонструкторДанных = Неопределено Тогда
		ОбработатьСобытие("Инициализация");
		
		тзСортировки = Новый ТаблицаЗначений;
		тзСортировки.Колонки.Добавить("Имя");
		тзСортировки.Колонки.Добавить("Направление");
		стрСортировка = тзСортировки.Добавить();
		стрСортировка.Имя = "ТочкаМаршрута";
		стрСортировка.Направление = "ВОЗР";
		стрСортировка = тзСортировки.Добавить();
		стрСортировка.Имя = "НомерЗадания";
		стрСортировка.Направление = "ВОЗР";
		
		КонструкторДанных.ВыбранныеПоказатели = Новый Массив;
		КонструкторДанных.УстановленныеОтборы = новаОтборы.ПолучитьТаблицуОтборов();
		КонструкторДанных.УстановленныеСортировки = тзСортировки;
		
		КонструкторДанных.ДобавитьГруппировку("НомерТочки");
		
		Журнал = Новый Структура("Дерево", Новый Структура("Значение", Новый ДеревоЗначений));
	КонецЕсли;
	ОбработатьСобытие("УстановленФильтр", Новый Структура("Рейс", РейсСсылка));
	
	Если стРейс = Неопределено Тогда
		стРейс = Новый Структура("Рейс, Ссылка, МаксКодТочки, Маршрут, ДобавленныеДоставки, УдаленныеДоставки, УчасткиТрека, События, Изменен", РейсОбъект, РейсСсылка, 0);
		соРедактируемыеРейсы.Вставить(РейсСсылка, стРейс);
	КонецЕсли;
	Если РейсОбъект = Неопределено Тогда
		стРейс.Рейс = стРейс.Ссылка.ПолучитьОбъект();
	Иначе
		стРейс.Рейс = РейсОбъект;
	КонецЕсли;
	стРейс.ДобавленныеДоставки = Новый Соответствие;
	стРейс.УдаленныеДоставки = Новый Соответствие;
	
	//Если стРейс.УчасткиТрека = Неопределено Тогда
	//	ЗагрузитьУчасткиТрека(стРейс);
	//КонецЕсли;
	
	//МаксКодТочки = 0;
	Если ТипЗнч(Журнал) = Тип("Структура") Тогда
		дзДанные = КонструкторДанных.ПолучитьДанные();
		Для Каждого НоваяКолонка Из дзДанные.Колонки Цикл
			КолонкаДерева = Журнал.Дерево.Значение.Колонки.Найти(НоваяКолонка.Имя);
			Если КолонкаДерева <> Неопределено Тогда Продолжить; КонецЕсли;
			Журнал.Дерево.Значение.Колонки.Добавить(НоваяКолонка.Имя, НоваяКолонка.ТипЗначения);
		КонецЦикла;
		Журнал.Дерево.Значение.Колонки.Добавить("Источник");
		
		стРейс.Маршрут = Журнал.Дерево.Значение.Строки;
		
		Если дзДанные.Строки.Количество() = 0 Тогда Возврат стРейс; КонецЕсли;
		
		ДобавитьСтрокиВДеревоДанных(Журнал.Дерево.Значение.Строки, дзДанные.Строки[0].Строки, ЭтотОбъект);
		ОбработатьСобытие("ДобавленыДанныеВДерево", Журнал.Дерево.Значение.Строки);
	//Иначе
	//	ТекСтроки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Рейс, Источник, Группировка", РейсСсылка, ЭтотОбъект, 0), Истина);
	//	стРейс.Маршрут = ТекСтроки[0].Родитель.Строки;
	КонецЕсли;

    Возврат стРейс;
КонецФункции

// Завершает редактирование маршрута рейса и записывает его в ИБ.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки, Неопределено>: если рейс не указан, то
//   завершаются все редактируемые источником рейсы.
//	ПересчитыватьРейс <булево>: необходимость пересчета рейса
//
Процедура ЗакончитьРедактирование(РейсСсылка = Неопределено, ПересчитыватьРейс = Истина) Экспорт
	Если РейсСсылка = Неопределено Тогда
		Для Каждого ЭлРейс Из соРедактируемыеРейсы Цикл
			ЗакончитьРедактированиеРейса_(ЭлРейс.Значение, ПересчитыватьРейс);	
		КонецЦикла;
		соРедактируемыеРейсы.Очистить();		
	Иначе
		ЗакончитьРедактированиеРейса_(соРедактируемыеРейсы[РейсСсылка], ПересчитыватьРейс);
		соРедактируемыеРейсы.Удалить(РейсСсылка);
	КонецЕсли;
КонецПроцедуры

// Записывает рейс в БД, когда его редактирование окончено.
//
// Параметры:
//  стРейс <Структура>
//	ПересчитыватьРейс <булево>: необходимость пересчета рейса
//
Процедура ЗакончитьРедактированиеРейса_(стРейс, ПересчитыватьРейс = Истина) Экспорт
	Если АвтоСохранениеИзменений Тогда
		
		СохранитьМаршрутРейса_(стРейс,,ПересчитыватьРейс);
		
	ИначеЕсли ПересчитыватьРейс Тогда
		
		АвтоСохранениеИзменений = Истина;
		
		ПересчитатьРейсКСЛ(стРейс.Ссылка, Истина);
		
		АвтоСохранениеИзменений = Ложь;
		
	КонецЕсли;
КонецПроцедуры

// Отменяет редактирование маршрута рейса.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки, Неопределено>: если рейс не указан, то
//   отменяется редактирование всех редактируемых источником рейсов.
//
Процедура ОтменитьРедактирование(РейсСсылка = Неопределено) Экспорт
	Если РейсСсылка = Неопределено Тогда
		соРедактируемыеРейсы.Очистить();		
	Иначе
		соРедактируемыеРейсы.Удалить(РейсСсылка);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////
//*** ДОБАВЛЕНИЕ ДОСТАВОК ***//

// Добавляет доставку в маршрут рейса.
//
// Параметры:
//  РейсСсылка      <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//  Доставка        <БизнесПроцессСсылка.новаМестнаяДоставка>
//  НомерТочки      <Число>: позволяет указать позицию в маршруте, куда будет вставлена доставка.
//  ВремяПребывания <Дата>: позволяет указать время пребывания в точке.
//  ЭтоПогрузка     <Булево>: позволяет указать основную операцию доставки.
//
Процедура ДобавитьДоставку(РейсСсылка, Доставка, НомерТочки = -1, ВремяПребывания = Неопределено, ЭтоПогрузка = Ложь) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	
	Если ЭтоПогрузка Тогда
		ДобавитьЗадание(стРейс, Новый Структура("ТочкаМаршрута, Вид, Доставка, ОкноС, ОкноПо, ПлановоеВремяПосещения, ВремяПосещенияВручную",
			Доставка.ТочкаОтправления,
			Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка,
			Доставка,
			Доставка.ВремяОтправленияС,
			Доставка.ВремяОтправленияПо,
			Доставка.ВремяПребыванияГрузоотправителя), НомерТочки, НомерТочки, Истина);
		
		НомерРазгрузкиС = НомерТочки + 1;
		НомерРазгрузкиПо = Маршрут.Количество();
		
		ДобавитьЗадание(стРейс, Новый Структура("ТочкаМаршрута, Вид, Доставка, ОкноС, ОкноПо, ПлановоеВремяПосещения, ВремяПосещенияВручную",
			Доставка.ТочкаПрибытия,
			Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка,
			Доставка,
			Доставка.ВремяПрибытияС,
			Доставка.ВремяПрибытияПо,
			Доставка.ВремяПребыванияГрузополучателя,
			ВремяПребывания), НомерРазгрузкиС, НомерРазгрузкиПо);
			
		стРейс.ДобавленныеДоставки.Вставить(Доставка, Истина);
		стРейс.УдаленныеДоставки.Удалить(Доставка);
		Возврат;
	КонецЕсли;
	
	
	Если ЕстьЗаданияВТочке(стРейс, Доставка.ТочкаОтправления) Тогда
		Если НомерТочки = -1 Тогда
			НомерПогрузкиС = -1;
			НомерПогрузкиПо = Маршрут.Количество();
			
		ИначеЕсли НомерТочки = -2 Тогда
			НомерПогрузкиС = -1;
			НомерПогрузкиПо = Маршрут.Количество();
			
		Иначе
			НомерПогрузкиС = -1;
			НомерПогрузкиПо = НомерТочки - 1;
			НомерРазгрузкиС = НомерТочки;
			НомерРазгрузкиПо = НомерТочки;
		КонецЕсли;		
		
		НомерТочкиПогрузки = ДобавитьЗадание(стРейс, Новый Структура("ТочкаМаршрута, Вид, Доставка, ОкноС, ОкноПо, ПлановоеВремяПосещения, ВремяПосещенияВручную",
			Доставка.ТочкаОтправления,
			Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка,
			Доставка,
			Доставка.ВремяОтправленияС,
			Доставка.ВремяОтправленияПо,
			Доставка.ВремяПребыванияГрузоотправителя), НомерПогрузкиС, НомерПогрузкиПо);
			
		Если НомерТочки = -1 Тогда
			Если НомерТочкиПогрузки < 0 Тогда
				НомерРазгрузкиС = 0;
			Иначе
				НомерРазгрузкиС = НомерТочкиПогрузки + 1;
			КонецЕсли;
			НомерРазгрузкиПо = Маршрут.Количество();
			ВставлятьВНачалоДиапазона = Ложь;
			
		ИначеЕсли НомерТочки = -2 Тогда
			НомерРазгрузкиС = Маршрут.Количество();
			НомерРазгрузкиПо = Маршрут.Количество();
			ВставлятьВНачалоДиапазона = Ложь;
			
		Иначе
			Если НомерТочкиПогрузки >= НомерТочки Тогда
				НомерРазгрузкиС = НомерТочкиПогрузки + 1;
				НомерРазгрузкиПо = Маршрут.Количество();
			КонецЕсли;
			ВставлятьВНачалоДиапазона = Истина;
		КонецЕсли;		
			
		ДобавитьЗадание(стРейс, Новый Структура("ТочкаМаршрута, Вид, Доставка, ОкноС, ОкноПо, ПлановоеВремяПосещения, ВремяПосещенияВручную",
			Доставка.ТочкаПрибытия,
			Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка,
			Доставка,
			Доставка.ВремяПрибытияС,
			Доставка.ВремяПрибытияПо,
			Доставка.ВремяПребыванияГрузополучателя,
			ВремяПребывания), НомерРазгрузкиС, НомерРазгрузкиПо, ВставлятьВНачалоДиапазона);
	Иначе
		Если НомерТочки = -1 Тогда
			НомерРазгрузкиС = -1;
			НомерРазгрузкиПо = Маршрут.Количество();
			ВставлятьВНачало = Ложь;
			
		Иначе
			НомерРазгрузкиС = НомерТочки;
			НомерРазгрузкиПо = Маршрут.Количество();
			ВставлятьВНачало = Истина;
		КонецЕсли;		
		
		НомерТочкиРазгрузки = ДобавитьЗадание(стРейс, Новый Структура("ТочкаМаршрута, Вид, Доставка, ОкноС, ОкноПо, ПлановоеВремяПосещения, ВремяПосещенияВручную",
			Доставка.ТочкаПрибытия,
			Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка,
			Доставка,
			Доставка.ВремяПрибытияС,
			Доставка.ВремяПрибытияПо,
			Доставка.ВремяПребыванияГрузополучателя,
			ВремяПребывания), НомерРазгрузкиС, НомерРазгрузкиПо, ВставлятьВНачало);
			
			НомерПогрузкиС = -1;
			Если НомерТочкиРазгрузки < 0 Тогда
				НомерПогрузкиПо = Маршрут.Количество();
			Иначе
				НомерПогрузкиПо = НомерТочкиРазгрузки - 1;
			КонецЕсли;
			
		НомерТочкиПогрузки = ДобавитьЗадание(стРейс, Новый Структура("ТочкаМаршрута, Вид, Доставка, ОкноС, ОкноПо, ПлановоеВремяПосещения, ВремяПосещенияВручную",
			Доставка.ТочкаОтправления,
			Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка,
			Доставка,
			Доставка.ВремяОтправленияС,
			Доставка.ВремяОтправленияПо,
			Доставка.ВремяПребыванияГрузоотправителя), НомерПогрузкиС, НомерПогрузкиПо, Истина);
	КонецЕсли;
			
	стРейс.ДобавленныеДоставки.Вставить(Доставка, Истина);
	стРейс.УдаленныеДоставки.Удалить(Доставка);
	
	стРейс.Изменен = Истина;
КонецПроцедуры

/////////////////////////////
//*** УДАЛЕНИЕ ДОСТАВОК ***//

// Удаляет доставку из маршрута рейса.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//  Доставка   <БизнесПроцессСсылка.новаМестнаяДоставка>
//
Процедура УдалитьДоставку(РейсСсылка, Доставка) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	
	Строки = Маршрут.НайтиСтроки(Новый Структура("Доставка", Доставка), Истина);
	Для Каждого Строка Из Строки Цикл
		стрТочка = Строка.Родитель;
		стрТочка.Строки.Удалить(Строка);
		Если стрТочка.Строки.Количество() = 0 Тогда
			РодительТочки = стрТочка.Родитель;
			Если РодительТочки = Неопределено Тогда РодительТочки = Журнал.Дерево.Значение; КонецЕсли;
			
			ъ = РодительТочки.Строки.Индекс(стрТочка);
			Если ъ > 0 Тогда
				ОчиститьУчастокТрека(стРейс, РодительТочки.Строки[ъ - 1].КодУчасткаТрекаОтТочки);
				РодительТочки.Строки[ъ - 1].КодУчасткаТрекаОтТочки = 0;
			КонецЕсли;
			Если ъ < РодительТочки.Строки.Количество() - 1 Тогда
				ОчиститьУчастокТрека(стРейс, РодительТочки.Строки[ъ + 1].КодУчасткаТрекаКТочке);
				РодительТочки.Строки[ъ + 1].КодУчасткаТрекаКТочке = 0;
			КонецЕсли;			
			ОчиститьУчастокТрека(стРейс, стрТочка.КодУчасткаТрекаКТочке);
			ОчиститьУчастокТрека(стРейс, стрТочка.КодУчасткаТрекаОтТочки);
			
			РодительТочки.Строки.Удалить(стрТочка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого стрТочка Из Маршрут Цикл
		стрТочка.НомерТочки = Маршрут.Индекс(стрТочка);
	КонецЦикла;	
	
	стРейс.УдаленныеДоставки.Вставить(Доставка, Истина);
	стРейс.ДобавленныеДоставки.Удалить(Доставка);
	
	стРейс.Изменен = Истина;
	
КонецПроцедуры

// Удаляет список доставок из маршрута рейса.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//  Доставки   <Массив>
//
Процедура УдалитьДоставки(РейсСсылка, Доставки, Склад = Ложь) Экспорт
	стРейс = НачатьРедактирование(РейсСсылка, Неопределено);
	
	Для Каждого Доставка Из Доставки Цикл
		УдалитьДоставку(РейсСсылка, Доставка);
	КонецЦикла;
	
	ПересчитатьРейс_(стРейс, Истина);
		
	СохранитьМаршрутРейса_(стРейс,, Ложь);
	
	Если Не Склад Тогда
		Если стРейс.Маршрут.Количество()=0 Тогда
			
			РасформироватьРейс(стРейс.Ссылка);
		КонецЕсли;
	КонецеСли;
	
	ОбновитьЖурналы();
	
КонецПроцедуры

// Удаляет все доставки из маршрута рейса
//
// Параметры
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
Процедура ОчиститьМаршрутРейса(РейсСсылка) Экспорт
	
	мсДоставки = ПолучитьДоставкиВПорядкеВыполнения(РейсСсылка); 
	УдалитьДоставки(РейсСсылка, мсДоставки);
    
КонецПроцедуры // ОчиститьМаршрутРейса(РейсСсылка)

////////////////////////////////////////
//*** ДОБАВЛЕНИЕ/УДАЛЕНИЕ ДОСТАВОК ***//
//*** вспомогательные процедуры    ***//

// Добавление точки доставки в маршрут
//
// Параметры
//	стРейс 		<Структура>
//		"Рейс"                 <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"               <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"              <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"         <Число>
//		"ДобавленныеДоставки"  <Соответствие; Неопределено>
//		"УдаленныеДоставки"    <Соответствие; Неопределено>
//		"УчасткиТрека"         <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"              <Булево>
//	стЗадание   <Структура>:
//		"ТочкаМаршрута"			<СправочникСсылка.новаТочкиДоставки>
//		"Вид"					<ПеречислениеСсылка.новаВидыЗаданийРейсаМестнойДоставки>
//		"Доставка"				<БизнесПроцессСсылка.новаМестнаяДоставка>
//		"ОкноС"					<Дата>
//		"ОкноПо"				<Дата>
//		"ПлановоеВремяПосещения"<Дата>
//		"ВремяПосещенияВручную"	<Дата; Неопределено>
//	НомерТочкиС, НомерТочкиПо   <Число>: диапазон номеров, куда вставлять точку
//	фВставлятьВНачалоДиапазона  <Булево>: Истина - вставлять доставку в начало диапазона
//										  Ложь - вставлять доставку в конец диапазона (или в конец рейса)
//
// Возвращаемое значение:
// 	<Число>: номер точки вставки
//
Функция ДобавитьЗадание(стРейс, стЗадание, НомерТочкиС, НомерТочкиПо, фВставлятьВНачалоДиапазона = Ложь)
	Маршрут = стРейс.Маршрут;
	
	текНомерТочки = НомерТочкиС;
	//Если НомерТочкиС = -1 И стЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка Тогда
	//	Если СпособОтображенияМаршрута = Перечисления.новаСпособыОтображенияМаршрутов.БезПогрузокВНачалеРейса Тогда
	//		Если стРейс.Рейс.НачалоРейса = стЗадание.ТочкаМаршрута Тогда Возврат -1; КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если НомерТочкиС = -1 Тогда
		текНомерТочки = 0;
	КонецЕсли;
	
	ТочкаВставки = Неопределено;
	
	текНомерТочкиПо = НомерТочкиПо;
	Если НомерТочкиПо = -1 Тогда
		текНомерТочкиПо = Маршрут.Количество();
	КонецЕсли;
	
	Пока текНомерТочки <= текНомерТочкиПо Цикл
		Если текНомерТочки = Маршрут.Количество() Тогда Прервать; КонецЕсли;
		
		Если Маршрут[текНомерТочки].ТочкаМаршрута = стЗадание.ТочкаМаршрута Тогда
			ТочкаВставки = текНомерТочки;
			Прервать;
		КонецЕсли;
		
		текНомерТочки = текНомерТочки + 1;
	КонецЦикла;
	
	Если ТочкаВставки = Неопределено Тогда
		Если фВставлятьВНачалоДиапазона Тогда
			ТочкаВставки = Макс(НомерТочкиС, 0);
		Иначе
			ТочкаВставки = Мин(НомерТочкиПо + 1, Маршрут.Количество());
		КонецЕсли;
		
		Если ТочкаВставки = Маршрут.Количество() Тогда
			Если Маршрут.Количество() > 0 Тогда
				стрПоследняяТочка = Маршрут[Маршрут.Количество() - 1];
				ОчиститьУчастокТрека(стРейс, стрПоследняяТочка.КодУчасткаТрекаОтТочки);
				стрПоследняяТочка.КодУчасткаТрекаОтТочки = 0;
			КонецЕсли;
			
			стрТочка = Маршрут.Добавить();
		Иначе			
			Если ТочкаВставки > 0 Тогда
				ОчиститьУчастокТрека(стРейс, Маршрут[ТочкаВставки - 1].КодУчасткаТрекаОтТочки);
				Маршрут[ТочкаВставки - 1].КодУчасткаТрекаОтТочки = 0;
			КонецЕсли;
			ОчиститьУчастокТрека(стРейс, Маршрут[ТочкаВставки].КодУчасткаТрекаКТочке);
			Маршрут[ТочкаВставки].КодУчасткаТрекаКТочке = 0;
			
			стрТочка = Маршрут.Вставить(ТочкаВставки);
		КонецЕсли;
		
		стрТочка.Источник = ЭтотОбъект;
		стрТочка.Группировка = КонструкторДанных.Группировки.Найти("НомерТочки");
		стрТочка.Рейс = стРейс.Ссылка; 
		стрТочка.НомерТочки = Маршрут.Количество() - 1;
		стрТочка.КодТочки = стРейс.МаксКодТочки; стРейс.МаксКодТочки = стРейс.МаксКодТочки + 1;
		стрТочка.ВладелецТочки = стЗадание.ТочкаМаршрута.ВладелецТочки;
		стрТочка.ТочкаМаршрута = стЗадание.ТочкаМаршрута;
		стрТочка.ТочкаМаршрута_Пред = СокрЛП(стЗадание.ТочкаМаршрута);
		стрТочка.Адрес = стЗадание.ТочкаМаршрута.Адрес;
		стрТочка.Адрес_Пред = СокрЛП(стЗадание.ТочкаМаршрута.Адрес);
		стрТочка.Широта = стрТочка.ТочкаМаршрута.Адрес.Широта;
		стрТочка.Долгота = стрТочка.ТочкаМаршрута.Адрес.Долгота;
		стрТочка.КодУчасткаТрекаКТочке = 0;
		стрТочка.КодУчасткаТрекаОтТочки = 0;
		стрТочка.РасстояниеКТочке = 0;
		стрТочка.РасстояниеОтТочки = 0;
		стрТочка.ВремяКТочке = 0;
		стрТочка.ВремяОтТочки = 0;
		
		стрТочка.Выбрана = икПодборПоКарте <> Неопределено;
		
		Пока ТочкаВставки < Маршрут.Количество() Цикл
			Маршрут[ТочкаВставки].НомерТочки = ТочкаВставки;
			ТочкаВставки = ТочкаВставки + 1;
		КонецЦикла;
	Иначе
		стрТочка = Маршрут[ТочкаВставки];
	КонецЕсли;
	
	Для Каждого стрЗадание Из стрТочка.Строки Цикл
		стрЗадание.НомерЗадания = стрТочка.Строки.Индекс(стрЗадание);
	КонецЦикла;
	
	стрЗадание = стрТочка.Строки.Добавить();
	стрЗадание.Источник = ЭтотОбъект;
	стрЗадание.Группировка = NULL;
	стрЗадание.Рейс = стРейс.Ссылка; 
	стрЗадание.НомерЗадания = стрТочка.Строки.Количество() - 1;
	стрЗадание.КодТочки = стрТочка.КодТочки;
	стрЗадание.ВремяПребыванияЗадания = стЗадание.ПлановоеВремяПосещения;
	ЗаполнитьЗначенияСвойств(стрЗадание, стЗадание);
	стрЗадание.Адрес = стЗадание.ТочкаМаршрута.Адрес;
	стрЗадание.Адрес_Пред = СокрЛП(стЗадание.ТочкаМаршрута.Адрес);
	стрЗадание.ОписаниеЗадания = СокрЛП(стрЗадание.Доставка);
	стрЗадание.Выбрана = икПодборПоКарте <> Неопределено;
	
	Если ЗначениеЗаполнено(стЗадание.ВремяПосещенияВручную) Тогда
		стрТочка.ПлановоеВремяПосещения = стЗадание.ВремяПосещенияВручную;
		стрТочка.ПлановоеВремяПосещенияУказаноВручную = Истина;
	КонецЕсли;
	
	Груз = стрЗадание.Доставка.Груз;
	Вес = Груз.Вес;
	Объем = Груз.Объем;
	КоличествоЕдиницПеревозки = Груз.КоличествоЕдиницПеревозки;
	стрЗадание.Стоимость = 0;
	стрЗадание.Палетт = Груз.ПеревезеноПалетт;
	
	Если стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка Тогда
		стрЗадание.Вес = Вес;
		стрЗадание.Объем = Объем;
		стрЗадание.КоличествоЕдиницПеревозки = КоличествоЕдиницПеревозки;
		
	ИначеЕсли стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка Тогда
		стрЗадание.Вес = -Вес;
		стрЗадание.Объем = -Объем;
		стрЗадание.КоличествоЕдиницПеревозки = -КоличествоЕдиницПеревозки;
		стрЗадание.Стоимость = Груз.Стоимость;
		
	КонецЕсли;
		
	Возврат стрТочка.НомерТочки;
КонецФункции

// Определяет, есть ли точки доставки в маршруте
//
// Параметры
//	стРейс 		<Структура>
//  Точка       <СправочникСсылка.новаТочкиДоставки>
// 
// Возвращаемое значение:
// 	<Булево>: есть или нет точка в маршруте
//
Функция ЕстьЗаданияВТочке(стРейс, Точка)
	Маршрут = стРейс.Маршрут;
	Возврат Маршрут.Найти(Точка, "ТочкаМаршрута") <> Неопределено;
КонецФункции

// Очищает участок трека (строки дерева)
//
// Параметры
//	стРейс 		<Структура>
//  КодУчастка  <Число>
// 
Процедура ОчиститьУчастокТрека(стРейс, КодУчастка)
	
	Если Не ЗначениеЗаполнено(КодУчастка) Тогда Возврат; КонецЕсли;
	
	стрУчасток = стРейс.УчасткиТрека.Строки.Найти(КодУчастка, "КодУчастка");
	Если стрУчасток = Неопределено Тогда Возврат; КонецЕсли;
	
	стрУчасток.Изменен = Истина;
	стрУчасток.Строки.Очистить();
	
КонецПроцедуры

//Расформирование рейса. Рейс может быть отменён только на определенных стадиях бизнеспроцесса.
//
//  Параметры:
//    РейсСсылка - <БизнесПроцессСсылка.новаРейсМестнойДоставки> ссылка на рейс подлежащий расформированию.
//
Процедура РасформироватьРейс(РейсСсылка) Экспорт
	
	РасформироватьРейс = Истина;
	
	#Если Клиент Тогда
		Ответ = Вопрос("В рейсе не осталось ни одной доставки! Расформировать рейс?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			РасформироватьРейс = Ложь;
		КонецЕсли;
	#КонецЕсли
	
	Если РасформироватьРейс Тогда
		
		УточняющийЗапрос = Новый Запрос;
		ЗадачиРейса = Новый СписокЗначений;
		УточняющийЗапрос.Текст =
		"ВЫБРАТЬ
		|	новаЗадачаРейсаМестнойДоставки.Ссылка КАК ЗадачаРейса
		|ИЗ
		|	Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
		|ГДЕ
		|	новаЗадачаРейсаМестнойДоставки.БизнесПроцесс = &Рейс
		|	И НЕ новаЗадачаРейсаМестнойДоставки.Выполнена
		|";
		
		УточняющийЗапрос.УстановитьПараметр("Рейс", РейсСсылка);
		
		ВыборкаРезультатовУточняющегоЗапроса = УточняющийЗапрос.Выполнить().Выбрать();
		
		Пока ВыборкаРезультатовУточняющегоЗапроса.Следующий() Цикл
			ЗадачиРейса.Добавить(ВыборкаРезультатовУточняющегоЗапроса.ЗадачаРейса);
		КонецЦикла; 
		
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		Для Каждого ЭлЗадача Из ЗадачиРейса Цикл
			обЗадача = ЭлЗадача.Значение.ПолучитьОбъект();
			обЗадача.РейсОтменен = Истина;
			обЗадача.ВыполнитьЗадачу();
			
			РейсКСЛДляУдаления = КСЛ.Доставка_Рейс();
			РейсКСЛДляУдаления.Ид = Строка(обЗадача.БизнесПроцесс.УникальныйИдентификатор());
			РейсКСЛДляУдаления.Удалить();
			
			РейсКСЛДляУдаления = КСЛ.Сопровождение_СопровождениеРейса();
			РейсКСЛДляУдаления.Ид = Строка(обЗадача.БизнесПроцесс.УникальныйИдентификатор());
			РейсКСЛДляУдаления.Удалить();
		КонецЦикла;
		#Если Клиент Тогда
			мсТаблицы = Новый Массив;
			мсТаблицы.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
			мсТаблицы.Добавить("Задача.новаЗадачаМестнойДоставки");
			новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
			
			Оповестить("ОбновленКалендарьВозможныхРейсов");
		#КонецЕсли
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////
//*** ПЕРЕСЧЕТ РЕЙСА КСЛ: вспом. процедуры ***//

// Вызывается при окончании пересчета рейса в КСЛ, изменяет время посещения точек и расстояние до них
//
// Параметры:
//	ПересчетРейсаКСЛ <COMОбъект> 	
//
Процедура ЗавершитьПересчетРейсаКСЛ(ПересчетРейсаКСЛ)
	стРейс = ПересчетРейсаКСЛ.Тэг.ИсхОбъект();
	стРейс.Вставить("КоличествоОтложенныхПересчетов", стРейс.КоличествоОтложенныхПересчетов - 1);
	
	Если стРейс.Версия <> ПересчетРейсаКСЛ.Версия Тогда Возврат; КонецЕсли;
	Если ПересчетРейсаКСЛ.Устарел Тогда Возврат; КонецЕсли;
	
	МаршрутКСЛ = ПересчетРейсаКСЛ.Рейс.Маршрут;
	Маршрут = стРейс.Маршрут;
	
	ъ = МаршрутКСЛ.Количество - 1;
	Пока ъ >= 0 Цикл
		ТочкаМаршрутаКСЛ = МаршрутКСЛ.Получить(ъ);
		
		стрТочкаМаршрута = Маршрут.Найти(ТочкаМаршрутаКСЛ.Ид, "ИдТочки");
		Если стрТочкаМаршрута <> Неопределено Тогда
			стрТочкаМаршрута.ПлановаяДатаПосещения = ТочкаМаршрутаКСЛ.ПлановоеВремяПрибытия;
			Для каждого стрЗадание Из стрТочкаМаршрута.Строки Цикл
				стрЗадание.ПлановаяДатаПосещения = стрТочкаМаршрута.ПлановаяДатаПосещения;
				стрЗадание.ПлановоеВремяПосещения = стрТочкаМаршрута.ПлановоеВремяПосещения;
			КонецЦикла;
			Если ТочкаМаршрутаКСЛ.ПлановыйМаршрут = Неопределено Тогда
				стрТочкаМаршрута.РасстояниеОтТочки = 0;
			Иначе
				стрТочкаМаршрута.РасстояниеОтТочки = ТочкаМаршрутаКСЛ.ПлановыйМаршрут.Расстояние;
				Если ъ > 0 Тогда
					стрТочкаМаршрута.РасстояниеКТочке = МаршрутКСЛ.Получить(ъ - 1).ПлановыйМаршрут.Расстояние;
				КонецЕсли;
			КонецЕсли;
			//Сообщить("раст= "+стрТочкаМаршрута.РасстояниеОтТочки+"=="+стрТочкаМаршрута.ПлановаяДатаПосещения);
		КонецЕсли;
		
		ъ = ъ - 1;
	КонецЦикла;
	
	ъ = 0;
	Пока ъ < Маршрут.Количество() - 1 Цикл
		стрТочкаМаршрута = Маршрут[ъ];
		//стрТочкаМаршрута.ВремяОтТочки = (Маршрут[ъ + 1].ПлановаяДатаПосещения - Маршрут[ъ].ПлановаяДатаПосещения) - ?(ъ=0,0,(Маршрут[ъ].ПлановоеВремяПосещения - '00010101'));
		стрТочкаМаршрута.ВремяОтТочки = (Маршрут[ъ + 1].ПлановаяДатаПосещения - Маршрут[ъ].ПлановаяДатаПосещения) - (Маршрут[ъ].ПлановоеВремяПосещения - '00010101');
		ъ = ъ + 1;
	КонецЦикла;
	
	Если Маршрут.Количество() > 0 Тогда
		
		Маршрут[0].ВремяКТочке = Маршрут[0].ПлановаяДатаПосещения - ПересчетРейсаКСЛ.ПлановоеВремяНачала;
		
		Если стРейс.Рейс <> Неопределено Тогда
			Конецрейса = стРейс.Рейс.Конецрейса;
		Иначе
			Конецрейса = стРейс.Ссылка.Конецрейса;
		КонецЕсли;
		
		ъъ = Маршрут.Количество() - 1;
		Если Конецрейса <> Маршрут[ъъ].ТочкаМаршрута Тогда
			
			Маршрут[ъъ].ВремяОтТочки = (ПересчетРейсаКСЛ.Рейс.ПлановоеВремяНачала + ПересчетРейсаКСЛ.Рейс.ПлановаяДлительность) - Маршрут[ъъ].ПлановаяДатаПосещения;
			Маршрут[ъъ].ВремяОтТочки = Маршрут[ъъ].ВремяОтТочки - (Маршрут[ъъ].ПлановоеВремяПосещения - '00010101')
			
		Иначе
			
			Маршрут[ъъ].ВремяОтТочки = 0;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРейса = стРейс.Маршрут.Родитель;
	Если СтрокаРейса <> Неопределено  Тогда
		СтрокаРейса.КартинкаРейса = Неопределено;
	КонецЕсли;
	
	Если АвтоСохранениеИзменений Тогда
		стРейс.Изменен = Истина;
		//ЗакончитьРедактирование(стРейс.Ссылка);
		СохранитьМаршрутРейса_(стРейс, Ложь);  
		ПересчетРейсаКСЛ.Рейс.Сохранить();
		Попытка
			стРейс.Рейс.Записать();
		Исключение
			//ъъъ = ОписаниеОшибки();
		КонецПопытки;
		стРейс.Рейс = Неопределено;

	Иначе
		стРейс.Изменен = Истина;
		
		стРейс.Вставить("РейсКСЛ",  ПересчетРейсаКСЛ.Рейс);
		
		ПересчитатьРейс_(стРейс,,Ложь);       
		
		Если ОсновнойРейсНаКарте <> Неопределено Тогда
			Если ОсновнойРейсНаКарте.Рейс.Ид = ПересчетРейсаКСЛ.Рейс.Ид Тогда
				ОсновнойРейсНаКарте.обРейс = ПересчетРейсаКСЛ.Рейс;
				ОсновнойРейсНаКарте.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПересчетРейсаКСЛ.Тэг = Неопределено;
	ПересчетРейсаКСЛ.ОтключитьВсеОбработчики();
	
	//Если ТипЗнч(Журнал) = Тип("ОбработкаОбъект.новаУниверсальныйЖурнал") Тогда
	//	Журнал.РазблокироватьДоступность();
	//КонецЕсли;
	
	Оповестить("ИзмененРейсМестнойДоставки", стРейс.Рейс);
КонецПроцедуры

// Обработчик события "ПриОкончанииПересчета" в КСЛ
//
// Параметры:
//	ПересчетРейсаКСЛ <COMОбъект> 	
//
Процедура ПриОкончанииПересчетаРейсаКСЛ(ПересчетРейсаКСЛ) Экспорт
	Попытка
		ЗавершитьПересчетРейсаКСЛ(ПересчетРейсаКСЛ);
	Исключение
		новаОбщиеПроцедуры.ВывестиПодробнуюИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

//////////////////////////
//*** ПЕРЕСЧЕТ РЕЙСА ***//

// Пересчитывает маршрут рейса.
//
// Параметры
//	стРейс 					<Структура>:
//		"Рейс"                 <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"               <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"              <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"         <Число>
//		"ДобавленныеДоставки"  <Соответствие; Неопределено>
//		"УдаленныеДоставки"    <Соответствие; Неопределено>
//		"УчасткиТрека"         <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"              <Булево>
// ПересчитатьСинхронно		<Булево>: синхронный пересчет рейса с КСЛ
// ПересчитыватьРейсКСЛ		<Булево>: будет ли пересчитывать рейс в КСЛ
//
Процедура ПересчитатьРейс_(стРейс, ПересчитатьСинхронно = Ложь,  ПересчитыватьРейсКСЛ = Истина) Экспорт
	
	//Проверка на возможность пересчета
	
	Если МаршрутСопровождения Тогда
		Возврат;
	КонецЕсли;
	
	Пересчитывать = Истина;
	
	Попытка
		Если стРейс.Изменен = Ложь Тогда
			Пересчитывать = Ложь;
		КонецЕсли;
	Исключение
		Пересчитывать = Ложь;
	КонецПопытки;
	
	Если Пересчитывать Тогда
		
		//Пересчёт показателей
		
		КоэффициентСкорости = КоэффициентСкоростиРейса(стРейс);
		
		Если стРейс.Рейс <> Неопределено Тогда
			СкорректироватьМаршрутПодИзмененныеГраницы_(стРейс);
			ЗаполнениеНачальныхПоказателейРейса(стРейс);
		КонецЕсли;
		
		//Расчёт показателей маршрута
		Если стРейс.Маршрут.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		//Пересчёт показателей точки
		
		СтруктураМаксимальныхПоказателей = ИнициализацияСтруктурыМаксимальныхПоказателей();
		РасчетМаксимальныхПоказателейМаршрута(стРейс, стРейс.Маршрут, СтруктураМаксимальныхПоказателей);   	
		
		соДоставкиТекущегоМаршрута = Новый Соответствие;
		
		//Расчёт конечных веса, объёма маршрута
		Расстояние = 0;
		текВремя = 0;
		
		РасчетМаршрута(стРейс, стРейс.Маршрут, Расстояние, соДоставкиТекущегоМаршрута, КоэффициентСкорости, текВремя);      
		
		ЗаполнитьРеквизитыРейса(стРейс, Расстояние, текВремя, соДоставкиТекущегоМаршрута, СтруктураМаксимальныхПоказателей);
		
		стРейс.Изменен = Ложь;
		
	КонецЕсли;	
	
	Если ПересчитыватьРейсКСЛ И стРейс.Рейс <> Неопределено Тогда
		ПересчитатьРейсКСЛ(?(ЗначениеЗаполнено(стРейс.Ссылка), стРейс.Ссылка, стРейс.Рейс.Ссылка), ПересчитатьСинхронно);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает рейс КСЛ
//
// Параметры
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//  Синхронно  <Булево>: истина - рейс пересчитается синхронно (в текущем потоке), ложь - иначе
//
Процедура ПересчитатьРейсКСЛ(РейсСсылка, Синхронно = Ложь) Экспорт
	
	Если РейсКСЛ <> Неопределено И БизнесПроцессы.новаРейсМестнойДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(РейсКСЛ.ИД)) = РейсСсылка Тогда
		Возврат;
	КонецЕсли;
	
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	стРейс.Вставить("Версия", СокрЛП(Новый УникальныйИдентификатор()));
	
	Если стРейс.Свойство("КоличествоОтложенныхПересчетов") Тогда
		стРейс.Вставить("КоличествоОтложенныхПересчетов", стРейс.КоличествоОтложенныхПересчетов + 1);
	Иначе
		стРейс.Вставить("КоличествоОтложенныхПересчетов", 1);
	КонецЕсли;
	
	СтрокаРейса = стРейс.Маршрут.Родитель;
	Если СтрокаРейса <> Неопределено  Тогда
		СтрокаРейса.КартинкаРейса = БиблиотекаКартинок.новаВыполнениеФоновогоДействия;
	КонецЕсли; 
	
	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	//Если стРейс.Свойство("ПересчетРейсаКСЛ") Тогда
	//	ПересчетРейсаКСЛ = стРейс.ПересчетРейсаКСЛ;
	//Иначе
		ПересчетРейсаКСЛ = КСЛ.Доставка_ПересчетРейса();
		ПересчетРейсаКСЛ.Версия = стРейс.Версия;
		
		Если стРейс.Свойство("РейсКСЛ") Тогда
			ПересчетРейсаКСЛ.УстановитьРейсДляПересчета(стРейс.РейсКСЛ);
		КонецЕсли;
		
		Если стРейс.Свойство("ПересчетРейсаКСЛ") Тогда
			стРейс.ПересчетРейсаКСЛ.Устарел = Истина;
		КонецЕсли;
		
		стРейс.Вставить("ПересчетРейсаКСЛ", ПересчетРейсаКСЛ);
		
		Если стРейс.Рейс.ЭтоНовый() Тогда
			СсылкаРейса = стРейс.Рейс.ПолучитьСсылкуНового();
		Иначе
			СсылкаРейса = стРейс.Рейс.Ссылка;
		КонецЕсли;
		
		ПересчетРейсаКСЛ.Тэг = КСЛ.Wrap(стРейс);
		ПересчетРейсаКСЛ.Рейс.Ид = СокрЛП(СсылкаРейса.УникальныйИдентификатор());
		ПересчетРейсаКСЛ.ПриОкончанииПересчета(ЭтотОбъект, "ПриОкончанииПересчетаРейсаКСЛ");
	//КонецЕсли;
	
	ПересчетРейсаКСЛ.МоментВремени = стРейс.Рейс.Дата;
	ПересчетРейсаКСЛ.Номер = стРейс.Рейс.Номер;
	ПересчетРейсаКСЛ.Транспорт.Ид = СокрЛП(стРейс.Рейс.Транспорт.УникальныйИдентификатор());
	ПересчетРейсаКСЛ.ПлановоеВремяНачала = стРейс.Рейс.ДатаНачала;
	ПересчетРейсаКСЛ.ПлановаяДлительность = стРейс.Рейс.ДатаКонца - стРейс.Рейс.ДатаНачала;
	
	Маршрут = стРейс.Маршрут;
	
	НовыйМаршрут = ПересчетРейсаКСЛ.Маршрут;
	НовыйМаршрут.Очистить();
		
	Если Маршрут.Количество() > 0 Тогда
		КонецРейса = ?(стРейс.Рейс.КонецРейсаСовпадаетСНачалом, стРейс.Рейс.НачалоРейса, стРейс.Рейс.КонецРейса);
		
		Если стРейс.Рейс.НачалоРейса <> Маршрут[0].ТочкаМаршрута Тогда
			ТочкаМаршрутаКСЛ = КСЛ.Доставка_ТочкаМаршрута();
			НовыйМаршрут.Добавить(ТочкаМаршрутаКСЛ);
			
			Если ПустаяСтрока(стРейс.Рейс.ИдНачала) Тогда
				стРейс.Рейс.ИдНачала = СокрЛП(Новый УникальныйИдентификатор());
			КонецЕсли;
			
			ТочкаМаршрутаКСЛ.Ид = стРейс.Рейс.ИдНачала;
			ТочкаМаршрутаКСЛ.ТочкаДоставки.Ид = СокрЛП(стРейс.Рейс.НачалоРейса.УникальныйИдентификатор());
		КонецЕсли;
		
		Для Каждого стрТочкаМаршрута Из Маршрут Цикл
			ТочкаМаршрутаКСЛ = КСЛ.Доставка_ТочкаМаршрута();
			НовыйМаршрут.Добавить(ТочкаМаршрутаКСЛ);
			
			Если ПустаяСтрока(стрТочкаМаршрута.ИдТочки) Тогда
				стрТочкаМаршрута.ИдТочки = СокрЛП(Новый УникальныйИдентификатор());
			КонецЕсли;
			
			ТочкаМаршрутаКСЛ.Ид = стрТочкаМаршрута.ИдТочки;
			ТочкаМаршрутаКСЛ.ТочкаДоставки.Ид = СокрЛП(стрТочкаМаршрута.ТочкаМаршрута.УникальныйИдентификатор());
			ТочкаМаршрутаКСЛ.ПлановаяДлительностьПребывания = стрТочкаМаршрута.ПлановоеВремяПосещения - '00010101';
		КонецЦикла;
		
		Если КонецРейса <> Маршрут[Маршрут.Количество() - 1].ТочкаМаршрута Тогда
			ТочкаМаршрутаКСЛ = КСЛ.Доставка_ТочкаМаршрута();
			НовыйМаршрут.Добавить(ТочкаМаршрутаКСЛ);
			
			Если ПустаяСтрока(стРейс.Рейс.ИдКонца) Тогда
				стРейс.Рейс.ИдКонца = СокрЛП(Новый УникальныйИдентификатор());
			КонецЕсли;
			
			ТочкаМаршрутаКСЛ.Ид = стРейс.Рейс.ИдКонца;
			ТочкаМаршрутаКСЛ.ТочкаДоставки.Ид = СокрЛП(КонецРейса.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Доставки = Новый Соответствие;
	Для Каждого ТочкаМаршрута Из стРейс.Маршрут Цикл
		Для Каждого стрДоставка Из ТочкаМаршрута.Строки Цикл
			стТочка = Доставки[стрДоставка.Доставка];
			Если стТочка = Неопределено Тогда
				стТочка = Новый Структура("ТочкаПогрузки, ТочкаРазгрузки", "00000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000");
				Доставки[стрДоставка.Доставка] = стТочка;
			КонецЕсли;
			
			Если стрДоставка.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка Тогда
				стТочка.ТочкаРазгрузки = ТочкаМаршрута.ИдТочки;
			Иначе
				стТочка.ТочкаПогрузки = ТочкаМаршрута.ИдТочки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НовыеДоставки = ПересчетРейсаКСЛ.Доставки;
	НовыеДоставки.Очистить();
	
	Для Каждого ЭлДоставки Из Доставки Цикл
		ДоставкаРейсаКСЛ = КСЛ.Доставка_ДоставкаРейса();
		ДоставкаРейсаКСЛ.Доставка.Ид = СокрЛП(ЭлДоставки.Ключ.УникальныйИдентификатор());
		ДоставкаРейсаКСЛ.ТочкаПогрузки = ЭлДоставки.Значение.ТочкаПогрузки;
		ДоставкаРейсаКСЛ.ТочкаРазгрузки = ЭлДоставки.Значение.ТочкаРазгрузки;
		
		НовыеДоставки.Добавить(ДоставкаРейсаКСЛ);
	КонецЦикла;
	
	//////////////////////////
	времРейс = стРейс.Рейс;
	Если Синхронно Тогда
		Попытка
			ПересчетРейсаКСЛ.ПересчитатьСинхронно();
		Исключение
			Сообщить("Ошибка при синхронном пересчете " + ТекущаяДата(), СтатусСообщения.Важное);
			ПересчетРейсаКСЛ.Пересчитать();
		КонецПопытки;
	Иначе
		ПересчетРейсаКСЛ.Пересчитать();
		
		//Если ТипЗнч(Журнал) = Тип("ОбработкаОбъект.новаУниверсальныйЖурнал") Тогда
		//	Журнал.ЗаблокироватьДоступность();
		//КонецЕсли;
	КонецЕсли;
	стРейс.Рейс = времРейс;
	///////////////////////////
	
КонецПроцедуры

// Изменяет состав точек маршрута, чтобы он соответствовал указанным в рейсе точкам начала и конца.
//
// Параметры
//	стРейс 					<Структура>:
//		"Рейс"                 <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"               <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"              <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"         <Число>
//		"ДобавленныеДоставки"  <Соответствие; Неопределено>
//		"УдаленныеДоставки"    <Соответствие; Неопределено>
//		"УчасткиТрека"         <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"              <Булево>
Процедура СкорректироватьМаршрутПодИзмененныеГраницы_(стРейс) Экспорт
	
	Маршрут = стРейс.Маршрут;
	
	фМаршутИзменен = Ложь;
	
	//Проверяем начало рейса
	Если Маршрут.Количество() > 1 Тогда
		
		Если СпособОтображенияМаршрута = Перечисления.новаСпособыОтображенияМаршрутов.БезПогрузокВНачалеРейса Тогда
			
			Если Маршрут[0].ТочкаМаршрута = стРейс.Рейс.НачалоРейса Тогда
				
				ОчиститьУчастокТрека(стРейс, Маршрут[0].КодУчасткаТрекаКТочке);
				Маршрут.Удалить(Маршрут[0]);
				ОчиститьУчастокТрека(стРейс, Маршрут[0].КодУчасткаТрекаКТочке);
				Маршрут[0].КодУчасткаТрекаКТочке = 0;
				Маршрут[0].РасстояниеКТочке = 0;
				Маршрут[0].ВремяКТочке = 0;
				фМаршутИзменен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Проверяем конец рейса
	Если Маршрут.Количество() > 1 Тогда
		
		Если СпособОтображенияМаршрута = Перечисления.новаСпособыОтображенияМаршрутов.БезРазгрузокВКонцеРейса Тогда
			
			стрПоследняяТочка = Маршрут[Маршрут.Количество() - 1];
			Если стрПоследняяТочка.ТочкаМаршрута = стРейс.Рейс.КонецРейса Тогда
				
				ОчиститьУчастокТрека(стРейс, стрПоследняяТочка.КодУчасткаТрекаОтТочки);
				Маршрут.Удалить(стрПоследняяТочка);
				стрПоследняяТочка = Маршрут[Маршрут.Количество() - 1];
				ОчиститьУчастокТрека(стРейс, стрПоследняяТочка.КодУчасткаТрекаОтТочки);
				стрПоследняяТочка.КодУчасткаТрекаОтТочки = 0;
				стрПоследняяТочка.РасстояниеОтТочки = 0;
				стрПоследняяТочка.ВремяОтТочки = 0;
				фМаршутИзменен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//балансировка погрузки/разгрузки
	тзДоставки = Новый ТаблицаЗначений;
	тзДоставки.Колонки.Добавить("Доставка");
	тзДоставки.Колонки.Добавить("КодВключенности");
	
	Для Каждого стрТочка Из Маршрут Цикл
		Для Каждого стрЗадание Из стрТочка.Строки Цикл
			Если стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка Тогда
				стрДоставка = тзДоставки.Добавить();
				стрДоставка.Доставка = стрЗадание.Доставка;
				стрДоставка.КодВключенности = 1;
			КонецЕсли;
			
			Если стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка Тогда
				стрДоставка = тзДоставки.Добавить();
				стрДоставка.Доставка = стрЗадание.Доставка;
				стрДоставка.КодВключенности = -1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	тзДоставки.Свернуть("Доставка", "КодВключенности");
	
	Для Каждого стрТочка Из Маршрут Цикл
		стрТочка.НомерТочки = Маршрут.Индекс(стрТочка);
	КонецЦикла;	
	
	Строки = тзДоставки.НайтиСтроки(Новый Структура("КодВключенности", -1));
	Для Каждого Строка Из Строки Цикл
		ДобавитьЗадание(стРейс, Новый Структура("ТочкаМаршрута, Вид, Доставка, ОкноС, ОкноПо, ПлановоеВремяПосещения, ВремяПосещенияВручную",
				Строка.Доставка.ТочкаОтправления,
				Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка,
				Строка.Доставка,
				Строка.Доставка.ВремяОтправленияС,
				Строка.Доставка.ВремяОтправленияПо,
				Строка.Доставка.ВремяПребыванияГрузоотправителя), -1, 0, Истина);
				
		фМаршутИзменен = Истина;
	КонецЦикла;
	
	Строки = тзДоставки.НайтиСтроки(Новый Структура("КодВключенности", 1));
	Для Каждого Строка Из Строки Цикл
		ДобавитьЗадание(стРейс, Новый Структура("ТочкаМаршрута, Вид, Доставка, ОкноС, ОкноПо, ПлановоеВремяПосещения, ВремяПосещенияВручную",
				Строка.Доставка.ТочкаПрибытия,
				Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка,
				Строка.Доставка,
				Строка.Доставка.ВремяПрибытияС,
				Строка.Доставка.ВремяПрибытияПо,
				Строка.Доставка.ВремяПребыванияГрузополучателя), Маршрут.Количество() - 1, Маршрут.Количество() - 1);
				
		фМаршутИзменен = Истина;
	КонецЦикла;
	
	стРейс.Изменен = Истина;
	
КонецПроцедуры

// Получает коэффициента скорости
//
// Параметры
//	стРейс 					<Структура>:
//		"Рейс"                 <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"               <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"              <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"         <Число>
//		"ДобавленныеДоставки"  <Соответствие; Неопределено>
//		"УдаленныеДоставки"    <Соответствие; Неопределено>
//		"УчасткиТрека"         <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"              <Булево>
Функция КоэффициентСкоростиРейса(стРейс)
	
	Если стРейс.Рейс = Неопределено Тогда
		КоэффициентСкорости = стРейс.Ссылка.КоэффициентСкорости;
	Иначе
		КоэффициентСкорости = стРейс.Рейс.КоэффициентСкорости;
	КонецЕсли;
	
	Если КоэффициентСкорости = 0 Тогда
		КоэффициентСкорости = 1
	КонецЕсли;

	Возврат КоэффициентСкорости;
	
КонецФункции

// Возвращает структуру показателей максимальных веса, объема, количества мест 
//и процентов загрузки по ним
//
Функция ИнициализацияСтруктурыМаксимальныхПоказателей()

	Результат = Новый Структура();
	
	Результат.Вставить("МаксимальныйВесВТочке", 0);
	Результат.Вставить("МаксимальныйОбъемВТочке", 0);
	Результат.Вставить("МаксимальноЕдиницПеревозки", 0);
	
	Результат.Вставить("МаксПроцентЗагрузкиПоВесу", 100);
	Результат.Вставить("МаксПроцентЗагрузкиПоОбъему", 100);
	Результат.Вставить("МаксПроцентЗагрузкиПоЕдиницам", 100);	

	Возврат Результат;
	
КонецФункции 

// Начальное заполнение показателей рейса
//НачалоРейса, КонецРейса, РасстояниеПлан, ДатаКонца,
//Вес, Объем, КоличествоЕдиницПеревозки, Стоимость,
//ПроцентЗагрузкиПоВесу, ПревышенВес,
//ПроцентЗагрузкиПоОбъему, ПревышенОбъем,
//ПроцентЗагрузкиПоЕдиницамПеревозки, ПревышеноКоличествоЕдиницПеревозки,
//КоличествоТочекВРейсе, КоличествоДоставокВРейсе
//
// Параметры
//	стРейс 					<Структура>:
//		"Рейс"                 <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"               <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"              <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"         <Число>
//		"ДобавленныеДоставки"  <Соответствие; Неопределено>
//		"УдаленныеДоставки"    <Соответствие; Неопределено>
//		"УчасткиТрека"         <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"              <Булево>
//
Процедура ЗаполнениеНачальныхПоказателейРейса(стРейс) 
	
	Маршрут = стРейс.Маршрут;
	
	стРейс.Рейс.РасстояниеПлан = 0;
	стРейс.Рейс.ДатаКонца = '00010101';
	стРейс.Рейс.Вес = 0;
	стРейс.Рейс.Объем = 0;
	стРейс.Рейс.КоличествоЕдиницПеревозки = 0;
	стРейс.Рейс.Стоимость = 0;
	
	стРейс.Рейс.ПроцентЗагрузкиПоВесу = 0;
	стРейс.Рейс.ПревышенВес = ложь;
	
	стРейс.Рейс.ПроцентЗагрузкиПоОбъему = 0;
	стРейс.Рейс.ПревышенОбъем = ложь;
	
	стРейс.Рейс.ПроцентЗагрузкиПоЕдиницамПеревозки = 0;
	стРейс.Рейс.ПревышеноКоличествоЕдиницПеревозки = ложь;
	
	стРейс.Рейс.КоличествоТочекВРейсе = 0;
	стРейс.Рейс.КоличествоДоставокВРейсе = 0;
	
	//Задание начала и конца рейса
	Если стРейс.Рейс.КонецРейсаСовпадаетСНачалом Тогда
		
		Если стРейс.Рейс.НачалоРейсаУказаноВручную Тогда
			стРейс.Рейс.КонецРейса = стРейс.Рейс.НачалоРейса;
		Иначе
			
			Если Маршрут.Количество() = 0 Тогда
				
				стРейс.Рейс.НачалоРейса = Неопределено;	
				стРейс.Рейс.КонецРейса = Неопределено;
				
			Иначе
				
				Если СпособОтображенияМаршрута = Перечисления.новаСпособыОтображенияМаршрутов.БезПогрузокВНачалеРейса Тогда
					
					Если Маршрут[0].Строки.Количество() = 0 Тогда
						стРейс.Рейс.НачалоРейса = Маршрут[0].ТочкаМаршрута;
					Иначе
						стРейс.Рейс.НачалоРейса = Маршрут[0].Строки[0].Доставка.ТочкаОтправления;
					КонецЕсли;
					
				Иначе
					
					стРейс.Рейс.НачалоРейса = Маршрут[0].ТочкаМаршрута;
				КонецЕсли;
				
				стРейс.Рейс.КонецРейса = стРейс.Рейс.НачалоРейса;
			КонецЕсли;
		КонецЕсли;
		
		стРейс.Рейс.КонецРейсаУказанВручную = Ложь;
		
	Иначе // Конец рейса не совпадает с началом
		
		//Начало
		Если Не стРейс.Рейс.НачалоРейсаУказаноВручную Тогда
			
			Если Маршрут.Количество() = 0 Тогда
				
				стРейс.Рейс.НачалоРейса = Неопределено;	
				
			Иначе
				
				Если СпособОтображенияМаршрута = Перечисления.новаСпособыОтображенияМаршрутов.БезПогрузокВНачалеРейса Тогда
					стРейс.Рейс.НачалоРейса = Маршрут[0].Строки[0].Доставка.ТочкаОтправления;
				Иначе
					стРейс.Рейс.НачалоРейса = Маршрут[0].ТочкаМаршрута;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Конец
		Если Не стРейс.Рейс.КонецРейсаУказанВручную Тогда
			
			Если Маршрут.Количество() = 0 Тогда
				
				стРейс.Рейс.КонецРейса = Неопределено;	
				
			Иначе
				
				Если СпособОтображенияМаршрута = Перечисления.новаСпособыОтображенияМаршрутов.БезРазгрузокВКонцеРейса Тогда
					стРейс.Рейс.КонецРейса = Маршрут[Маршрут.Количество() - 1].Строки[0].Доставка.ТочкаПрибытия;
				Иначе
					стРейс.Рейс.КонецРейса = Маршрут[Маршрут.Количество() - 1].ТочкаМаршрута;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры	

// Расчет максимальной загрузки по весу, объему, количеству единиц перевозки
//
// Параметры
//	стРейс 					<Структура>:
//		"Рейс"                 <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"               <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"              <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"         <Число>
//		"ДобавленныеДоставки"  <Соответствие; Неопределено>
//		"УдаленныеДоставки"    <Соответствие; Неопределено>
//		"УчасткиТрека"         <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"              <Булево>
// Маршрут					<КоллекцияСтрокДереваЗначений>
// СтруктураМаксимальныхПоказателей <Структура>:
//  	"МаксимальныйВесВТочке"         <Число>
//		"МаксимальныйОбъемВТочке"       <Число>
//		"МаксимальноЕдиницПеревозки"    <Число>
//		"МаксПроцентЗагрузкиПоВесу"     <Число>
//		"МаксПроцентЗагрузкиПоОбъему"   <Число>
//		"МаксПроцентЗагрузкиПоЕдиницам" <Число>
//
Процедура РасчетМаксимальныхПоказателейМаршрута(стРейс, Маршрут, СтруктураМаксимальныхПоказателей)
	
	Если стРейс.Рейс = Неопределено Тогда
		Грузоподъемность = 0;
		ОбъемТранспорта = 0;
		Вместимость = 0;
	Иначе
		Грузоподъемность = стРейс.Рейс.Транспорт.Грузоподъемность * 1000;
		ОбъемТранспорта = стРейс.Рейс.Транспорт.ОбъемКузова;
		Вместимость = стРейс.Рейс.Транспорт.Вместимость;
	КонецЕсли;
	
	НачальныйВес = 0;
	НачальныйОбъем = 0;
	НачальноЕдиницПеревозки = 0;
	
	МаксимальныйВесВТочке = 0;
	МаксимальныйОбъемВТочке = 0;
	МаксимальноЕдиницПеревозки = 0;
	
	Для Каждого стрТочка Из Маршрут Цикл
		
		стрТочка.НомерТочки = Маршрут.Индекс(стрТочка);
		ВесПогрузки = 0;
		ОбъемПогрузки = 0;
		ЕдиницПогрузки = 0;
		ВесРазгрузки = 0;
		ОбъемРазгрузки = 0;
		ЕдиницРазгрузки = 0;
		
		Для каждого СтрокаДоставки из стрТочка.Строки Цикл
			Если СтрокаДоставки.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка Тогда
				Попытка
				ВесПогрузки = ВесПогрузки + СтрокаДоставки.Вес;
				ОбъемПогрузки = ОбъемПогрузки + СтрокаДоставки.Объем;
				ЕдиницПогрузки = ЕдиницПогрузки + СтрокаДоставки.КоличествоЕдиницПеревозки;
			Исключение
				КонецПопытки;
			Иначе
				попытка
				ВесРазгрузки = ВесРазгрузки + СтрокаДоставки.Вес;
				ОбъемРазгрузки = ОбъемРазгрузки + СтрокаДоставки.Объем;
				ЕдиницРазгрузки = ЕдиницРазгрузки + СтрокаДоставки.КоличествоЕдиницПеревозки;
			исключение
				
				конецпопытки;
			КонецЕсли;
		КонецЦикла;		
		
		Если ВесРазгрузки > 0 Тогда
			стрТочка.Вес = НачальныйВес - ВесРазгрузки + ВесПогрузки;
			стрТочка.Объем = НачальныйОбъем - ОбъемРазгрузки + ОбъемПогрузки;
			стрТочка.КоличествоЕдиницПеревозки = НачальноЕдиницПеревозки - ЕдиницРазгрузки + ЕдиницПогрузки;
		Иначе
			стрТочка.Вес = НачальныйВес + ВесРазгрузки + ВесПогрузки;
			стрТочка.Объем = НачальныйОбъем + ОбъемРазгрузки + ОбъемПогрузки;
			стрТочка.КоличествоЕдиницПеревозки = НачальноЕдиницПеревозки + ЕдиницРазгрузки + ЕдиницПогрузки;
		КонецЕсли;
		
		Если ОтображатьЗагрузкуНарастающимИтогом Тогда
			НачальныйВес = стрТочка.Вес;
			НачальныйОбъем = стрТочка.Объем;
			НачальноЕдиницПеревозки = стрТочка.КоличествоЕдиницПеревозки;
		КонецЕсли;
		
		МаксимальныйВесВТочке = Макс( МаксимальныйВесВТочке, стрТочка.Вес );
		МаксимальныйОбъемВТочке = Макс( МаксимальныйОбъемВТочке, стрТочка.Объем );
		МаксимальноЕдиницПеревозки = Макс( МаксимальноЕдиницПеревозки, стрТочка.КоличествоЕдиницПеревозки );
		
	КонецЦикла;	
	
	СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоВесу = ?(Грузоподъемность = 0, 0, 100 * МаксимальныйВесВТочке / Грузоподъемность);
	СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоОбъему = ?(ОбъемТранспорта = 0, 0, 100 * МаксимальныйОбъемВТочке / ОбъемТранспорта);
	СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоЕдиницам = ?(Вместимость = 0, 0, 100 * МаксимальноЕдиницПеревозки / Вместимость);
	
	СтруктураМаксимальныхПоказателей.МаксимальныйВесВТочке  =  МаксимальныйВесВТочке;
	СтруктураМаксимальныхПоказателей.МаксимальныйОбъемВТочке  = МаксимальныйОбъемВТочке;
	СтруктураМаксимальныхПоказателей.МаксимальноЕдиницПеревозки  =  МаксимальноЕдиницПеревозки;
	
КонецПроцедуры

// Расчет времени посещения точек, расстояния
//
// Параметры
//	стРейс 					<Структура>:
//		"Рейс"                 <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"               <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"              <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"         <Число>
//		"ДобавленныеДоставки"  <Соответствие; Неопределено>
//		"УдаленныеДоставки"    <Соответствие; Неопределено>
//		"УчасткиТрека"         <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"              <Булево>
// Маршрут					<КоллекцияСтрокДереваЗначений>
// Расстояние               <Число>
// соДоставкиТекущегоМаршрута <Соответствие>
// КоэффициентСкорости      <Число>
// текВремя                 <Дата>
//
Процедура РасчетМаршрута(стРейс, Маршрут, Расстояние, соДоставкиТекущегоМаршрута, КоэффициентСкорости, текВремя)

	МаксКодТочки = 0;

	стрПоследняяТочка = Маршрут[Маршрут.Количество() - 1];
	стрПерваяТочка = Маршрут[0];
	
	Расстояние = стрПерваяТочка.РасстояниеКТочке;
	Если стРейс.Рейс = Неопределено Тогда
		текВремя = стРейс.Ссылка.ДатаНачала;
	Иначе
		текВремя = стРейс.Рейс.ДатаНачала;	
	КонецЕсли;
	
	текВремя = текВремя + стрПерваяТочка.ВремяКТочке * КоэффициентСкорости;

	Для Каждого стрТочка Из Маршрут Цикл
		
		МаксКодТочки = Макс(МаксКодТочки, стрТочка.КодТочки);
		Расстояние = Расстояние + стрТочка.РасстояниеОтТочки;
		
		ВремяПребывания = 0;
		Стоимость = 0;
		
		фЕстьРазгрузка = Ложь;
		фЕстьПогрузка = Ложь;
		
		ВремяВыполненияЗаданий = ТекВремя;
		
		Для Каждого стрЗадание Из стрТочка.Строки Цикл
			
			Если ЗначениеЗаполнено(стрЗадание.Доставка) Тогда
				соДоставкиТекущегоМаршрута.Вставить(стрЗадание.Доставка);
			КонецЕсли;
			
			фЕстьРазгрузка = фЕстьРазгрузка Или стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка;
			фЕстьПогрузка = фЕстьПогрузка Или стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка;
			
			стрЗадание.Окно = Формат(стрЗадание.ОкноС, "ДФ=ЧЧ:мм") + " - " + Формат(стрЗадание.ОкноПо, "ДФ=ЧЧ:мм");
			
			Если ЗначениеЗаполнено(стрТочка.ОкноС) Тогда
				Если стрЗадание.ОкноС < стрТочка.ОкноС Тогда
					стрТочка.ОкноС = стрЗадание.ОкноС;
				КонецЕсли;
			Иначе
				стрТочка.ОкноС = стрЗадание.ОкноС;
			КонецЕсли;
			
			Если ВремяВыполненияЗаданий < стрЗадание.ОкноС Тогда
				ВремяПребывания = ВремяПребывания + (стрЗадание.ОкноС - ВремяВыполненияЗаданий);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(стрТочка.ОкноПо) Тогда
				Если стрЗадание.ОкноПо > стрТочка.ОкноПо Тогда
					стрТочка.ОкноПо = стрЗадание.ОкноПо;
				КонецЕсли;
			Иначе
				стрТочка.ОкноПо = стрЗадание.ОкноПо;
			КонецЕсли;
			
			ВремяПребывания = ВремяПребывания + (стрЗадание.ВремяПребыванияЗадания - '00010101');
			ВремяВыполненияЗаданий = ВремяВыполненияЗаданий + ВремяПребывания;
		КонецЦикла;
		
		Если стрТочка.ПлановоеВремяПосещенияУказаноВручную <> Истина Тогда
			стрТочка.ПлановоеВремяПосещения = '00010101' + ВремяПребывания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрТочка.ДатаПрибытия) Тогда
			текВремя = стрТочка.ДатаПрибытия;
		КонецЕсли;
		
		стрТочка.ПлановаяДатаПосещения = текВремя;
		
		текВремя = текВремя + (стрТочка.ПлановоеВремяПосещения - '00010101');
		
		Если ЗначениеЗаполнено(стрТочка.ДатаУбытия) Тогда
			текВремя = стрТочка.ДатаУбытия;
		КонецЕсли;
		
		текВремя = текВремя + стрТочка.ВремяОтТочки * КоэффициентСкорости;
				
		стрТочка.Стоимость = Стоимость;
		стрТочка.Окно = Формат(стрТочка.ОкноС, "ДФ=ЧЧ:мм") + " - " + Формат(стрТочка.ОкноПо, "ДФ=ЧЧ:мм");
		Знак = 1;
		
		Если фЕстьРазгрузка И фЕстьПогрузка Тогда
			стрТочка.Действие = Перечисления.новаДействияВТочкеРейсаМестнойДоставки.ПогрузкаИРазгрузка;
		ИначеЕсли фЕстьРазгрузка Тогда
			стрТочка.Действие = Перечисления.новаДействияВТочкеРейсаМестнойДоставки.Разгрузка;
			Знак = -1;
		ИначеЕсли фЕстьПогрузка Тогда
			стрТочка.Действие = Перечисления.новаДействияВТочкеРейсаМестнойДоставки.Погрузка;
		Иначе	
			стрТочка.Действие = Перечисления.новаДействияВТочкеРейсаМестнойДоставки.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;

	стРейс.МаксКодТочки = МаксКодТочки + 1;

КонецПроцедуры

// Заполнение реквизитов рейса после пересчета маршрута
//
// Параметры
//	стРейс 							<Структура>:
//		"Рейс"              		   <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"             		  <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"            		  <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"       		  <Число>
//		"ДобавленныеДоставки"		  <Соответствие; Неопределено>
//		"УдаленныеДоставки"  		  <Соответствие; Неопределено>
//		"УчасткиТрека"       		  <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"            		  <Булево>
// Расстояние               		<Число>
// текВремя                 		<Дата>
// соДоставкиТекущегоМаршрута 		<Соответствие>
// СтруктураМаксимальныхПоказателей <Структура>:
//  	"МаксимальныйВесВТочке"         <Число>
//		"МаксимальныйОбъемВТочке"       <Число>
//		"МаксимальноЕдиницПеревозки"    <Число>
//		"МаксПроцентЗагрузкиПоВесу"     <Число>
//		"МаксПроцентЗагрузкиПоОбъему"   <Число>
//		"МаксПроцентЗагрузкиПоЕдиницам" <Число>
Процедура ЗаполнитьРеквизитыРейса(стРейс, Расстояние, текВремя, соДоставкиТекущегоМаршрута, СтруктураМаксимальныхПоказателей)
	
	Если стРейс.Рейс <> Неопределено Тогда
		
		стРейс.Рейс.РасстояниеПлан = Расстояние / 1000;
		стРейс.Рейс.ДатаКонца = текВремя;
		
		стРейс.Рейс.Вес = СтруктураМаксимальныхПоказателей.МаксимальныйВесВТочке;
		стРейс.Рейс.Объем = СтруктураМаксимальныхПоказателей.МаксимальныйОбъемВТочке;
		стРейс.Рейс.КоличествоЕдиницПеревозки = СтруктураМаксимальныхПоказателей.МаксимальноЕдиницПеревозки;
		
		стРейс.Рейс.ПроцентЗагрузкиПоВесу = СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоВесу;
		стРейс.Рейс.ПревышенВес = СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоВесу > 100;
		
		стРейс.Рейс.ПроцентЗагрузкиПоОбъему = СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоОбъему;
		стРейс.Рейс.ПревышенОбъем = СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоОбъему > 100;
		
		стРейс.Рейс.ПроцентЗагрузкиПоЕдиницамПеревозки = СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоЕдиницам;
		стРейс.Рейс.ПревышеноКоличествоЕдиницПеревозки = СтруктураМаксимальныхПоказателей.МаксПроцентЗагрузкиПоЕдиницам > 100;
		
		стРейс.Рейс.ПеревезеноПалетт = 0;
		стРейс.Рейс.Стоимость = 0;
		стРейс.Рейс.КоличествоТочекВРейсе = стРейс.Маршрут.Количество();
		стРейс.Рейс.КоличествоДоставокВРейсе = 0;
		
		Для Каждого ЭлДоставка Из соДоставкиТекущегоМаршрута Цикл
			
			Груз = ЭлДоставка.Ключ.Груз;
			стРейс.Рейс.ПеревезеноПалетт = стРейс.Рейс.ПеревезеноПалетт + Груз.ПеревезеноПалетт;
			стРейс.Рейс.Стоимость = стРейс.Рейс.Стоимость + Груз.Стоимость;
			стРейс.Рейс.КоличествоДоставокВРейсе = стРейс.Рейс.КоличествоДоставокВРейсе + 1;
			
		КонецЦикла;
		
		стРейс.Рейс.РассчитатьИтоговыеПоказатели();
		
	КонецЕсли;
	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////
//*** ПРОЦЕДУРЫ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМЫ БП новаРейсМестнойДоставки ***//

// Подготавливает к перерасчету участок маршрута от начала рейса до первой точки.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
Процедура ПометитьДляПерерасчетаНачалоРейса(РейсСсылка) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	Если Маршрут.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ОчиститьУчастокТрека(стРейс, Маршрут[0].КодУчасткаТрекаКТочке);
	Маршрут[0].КодУчасткаТрекаКТочке = 0;
	Маршрут[0].РасстояниеКТочке = 0;
	Маршрут[0].ВремяКТочке = 0;
КонецПроцедуры

// Подготавливает к перерасчету участок маршрута от последней точки до конца рейса.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
Процедура ПометитьДляПерерасчетаКонецРейса(РейсСсылка) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	Если Маршрут.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	стрПоследняяТочка = Маршрут[Маршрут.Количество() - 1];
	ОчиститьУчастокТрека(стРейс, стрПоследняяТочка.КодУчасткаТрекаОтТочки);
	стрПоследняяТочка.КодУчасткаТрекаОтТочки = 0;
	стрПоследняяТочка.РасстояниеОтТочки = 0;
	стрПоследняяТочка.ВремяОтТочки = 0;
КонецПроцедуры

// Возвращает первую точку в маршруте рейса.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
// Возвращаемое значение:
//  <СправочникСсылка.новаТочкиДоставки, Неопределено>
//
Функция ПолучитьНачалоРейса(РейсСсылка) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	Если Маршрут.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
	
	Возврат Маршрут[0].Строки[0].Доставка.ТочкаОтправления;
КонецФункции

// Возвращает последнюю точку в маршруте рейса.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
// Возвращаемое значение:
//  <СправочникСсылка.новаТочкиДоставки, Неопределено>
//
Функция ПолучитьКонецРейса(РейсСсылка) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	Если Маршрут.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
	
	стрПоследняяТочка = Маршрут[Маршрут.Количество() - 1];
	
	Возврат стрПоследняяТочка.Строки[стрПоследняяТочка.Строки.Количество() - 1].Доставка.ТочкаПрибытия;
КонецФункции

// Возвращает доходы и расходы доставок маршрута рейса по статьям доходов/расходов.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
// Возвращаемое значение:
//  <Соответствие(<СправочникСсылка.новаСтатьиДоходовРасходов>, <Число>)>
//
Функция ПолучитьДоходыРасходы(РейсСсылка) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	
	соДоставки = Новый Соответствие;
	Для Каждого стрМаршрут Из Маршрут Цикл
		Для Каждого стрЗадание Из стрМаршрут.Строки Цикл
			соДоставки.Вставить(стрЗадание.Доставка);
		КонецЦикла;
	КонецЦикла;
	
	соДоходыРасходы = Новый Соответствие;
	Для Каждого ЭлДоставка Из соДоставки Цикл
		Для Каждого стрДоходРасход Из ЭлДоставка.Ключ.ДоходыРасходы Цикл
			Сумма = соДоходыРасходы[стрДоходРасход.Статья];
			Сумма = ?(Сумма = Неопределено, 0, Сумма);
			соДоходыРасходы.Вставить(стрДоходРасход.Статья, Сумма + стрДоходРасход.Сумма);
		КонецЦикла;
	КонецЦикла;
	
	Возврат соДоходыРасходы;
КонецФункции

////////////////////////////////
//*** ОПТИМИЗАЦИЯ МАРШРУТА ***//

// Оптимизация маршрута; вызывается при нажатии на кнопку "Оптимизировать"
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//  КачествоОптимизации - качество оптимизации 2 - 6 = быстро - качественно.
//
Процедура АвтоупорядочитьМаршрут(РейсСсылка, Знач КачествоОптимизации = Неопределено) Экспорт
	
	Если КачествоОптимизации = Неопределено Тогда
		КачествоОптимизации = 6;
	ИначеЕсли КачествоОптимизации > 6 Тогда
		КачествоОптимизации = 6;
	ИначеЕсли КачествоОптимизации < 2 Тогда
		КачествоОптимизации = 2;
	КонецЕсли;
	
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	КоэффициентСкорости = ?(стРейс.Рейс.КоэффициентСкорости <> 0, стРейс.Рейс.КоэффициентСкорости, 1);
	Маршрут = стРейс.Маршрут;
	
	//Проверка возможости оптимизации маршрута
	Если Маршрут.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоТочекПогрузки = 0;
	Для каждого ТочкаМаршрута Из Маршрут Цикл
		
		Для каждого ЗаданиеТочкиМаршрута Из ТочкаМаршрута.Строки Цикл
			
			Если ЗаданиеТочкиМаршрута.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка Тогда
				
				КоличествоТочекПогрузки = КоличествоТочекПогрузки + 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоТочекПогрузки > 1 Тогда
			Сообщить("Имеется несколько точек доставки, имеющие задания на погрузку. Автоматическая оптимизация невозможна.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ТолькоПогрузка = Истина;
	Для каждого ЗаданиеТочкиМаршрута Из Маршрут[0].Строки Цикл
		
		ТолькоПогрузка = ТолькоПогрузка и (ЗаданиеТочкиМаршрута.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка);
	КонецЦикла;
	
	Если не ТолькоПогрузка Тогда
		Сообщить("Первая точка маршрута не является складом. Автоматическая оптимизация невозможна.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	//Сгруппировать доставки
	КомпактныйМаршрут = СхатьМаршрутРейса(Маршрут);
	
	//Оптимизация маршрута
	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	
	Выполнение = КСЛ.Доставка_ЗадачаКоммивояжера_РешениеЗадачиКоммивояжераНаКлиенте();
	
	СтартоваяТочка = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
	СтартоваяТочка.Ид = Строка(стРейс.Рейс.НачалоРейса.УникальныйИдентификатор());
	СтартоваяТочка.ВремяНачалаВременногоОкна = стРейс.Рейс.ДатаНачала;
	СтартоваяТочка.ВремяОкончанияВременногоОкна = стРейс.Рейс.ДатаКонца;
	
	ОкноДоступности = Маршрут[0].ТочкаМаршрута.ПолучитьОбъект().ПолучитьОкноДоставки(стРейс.Рейс.ДатаНачала);
	ВремяНачалаВременногоОкнаСклада = НачалоДня(стРейс.Рейс.ДатаНачала) + (ОкноДоступности.ВремяНачала - '00010101');
	ВремяКонцаВременногоОкнаСклада = НачалоДня(стРейс.Рейс.ДатаНачала) + (ОкноДоступности.ВремяОкончания - '00010101');
	
	ТочкаСклада = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
	ТочкаСклада.Ид = Строка(Маршрут[0].ТочкаМаршрута.УникальныйИдентификатор());
	ТочкаСклада.ВремяНачалаВременногоОкна = ВремяНачалаВременногоОкнаСклада;
	ТочкаСклада.ВремяОкончанияВременногоОкна = ВремяКонцаВременногоОкнаСклада;
	
	КонечнаяТочка = Неопределено;
	Если стРейс.Рейс.КонецРейсаУказанВручную
	     или стРейс.Рейс.КонецРейсаСовпадаетСНачалом Тогда
		КонечнаяТочка = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
		КонечнаяТочка.Ид = Строка(стРейс.Рейс.КонецРейса.УникальныйИдентификатор());
		КонечнаяТочка.ВремяНачалаВременногоОкна = стРейс.Рейс.ДатаНачала;
		КонечнаяТочка.ВремяОкончанияВременногоОкна = стРейс.Рейс.ДатаКонца;
	КонецЕсли;
	
	ЭволюционирующийМаршрут = Выполнение.ПолучитьНовыйСписокМаршрута2();
	
	Для Индекс = 0 По КомпактныйМаршрут.Количество() - 1 Цикл
		
		Задание = КомпактныйМаршрут[Индекс];
		
		ТочкаМаршрута = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
		ТочкаМаршрута.Ид = Строка(Задание.ТочкаМаршрута.УникальныйИдентификатор());
		ТочкаМаршрута.ИдДоставки = Задание.Доставка;
		ТочкаМаршрута.ВремяНачалаВременногоОкна = Задание.ВремяПрибытияС;
		ТочкаМаршрута.ВремяОкончанияВременногоОкна = Задание.ВремяПрибытияПо;
		ТочкаМаршрута.ВремяПогрузки = Задание.ВремяПребыванияГрузоотправителя;
		ТочкаМаршрута.ВремяРазгрузки = Задание.ВремяПребыванияГрузополучателя;
		ТочкаМаршрута.Приоритет = Задание.ПриоритетТочки;
		
		ЭволюционирующийМаршрут.Добавить(ТочкаМаршрута);
	КонецЦикла;
	
	НовыйМаршрут = Выполнение.ОптимизироватьМаршрут(ЭволюционирующийМаршрут, КоэффициентСкорости, СтартоваяТочка, ТочкаСклада, КонечнаяТочка, КачествоОптимизации);

	Маршрут.Очистить();
	стРейс.МаксКодТочки = 0;
	
	Для Индекс = 0 По НовыйМаршрут.Количество() - 1 Цикл
		
		ТочкаМаршрута = НовыйМаршрут.Получить(Индекс);
		ТочкаДоставки = Справочники.новаТочкиДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(ТочкаМаршрута.Ид));
		КомплекснаяДоставка = ТочкаМаршрута.ИдДоставки;
		
		СгруппированныеДоставки = КомпактныйМаршрут.Найти(КомплекснаяДоставка, "Доставка");
		Если СгруппированныеДоставки <> Неопределено Тогда
			
			Для каждого ДоставкаУТЛ Из СгруппированныеДоставки.СписокДоставок Цикл
					ДобавитьДоставку(РейсСсылка, ДоставкаУТЛ);
			КонецЦикла; 	
		КонецЕсли; 
	КонецЦикла; 
	
	Для Каждого стрМаршрут Из Маршрут Цикл
		
		стрМаршрут.НомерТочки = Маршрут.Индекс(стрМаршрут);
		
		ОчиститьУчастокТрека(стРейс, стрМаршрут.КодУчасткаТрекаКТочке);
		стрМаршрут.КодУчасткаТрекаКТочке = 0;
		ОчиститьУчастокТрека(стРейс, стрМаршрут.КодУчасткаТрекаОтТочки);
		стрМаршрут.КодУчасткаТрекаОтТочки = 0;
	КонецЦикла;	
	
	стРейс.Изменен = Истина;
	ПересчитатьРейс_(стРейс);
	
КонецПроцедуры

///////////////////////////////////////
//*** ПРОЧИЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ ***//

// Пересчитывает и записывает маршрут рейса в БД
//
// Параметры:
//	стРейс 							<Структура>:
//		"Рейс"              		   <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//		"Ссылка"             		  <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//		"Маршрут"            		  <КоллекцияСтрокДереваЗначений>
//		"МаксКодТочки"       		  <Число>
//		"ДобавленныеДоставки"		  <Соответствие; Неопределено>
//		"УдаленныеДоставки"  		  <Соответствие; Неопределено>
//		"УчасткиТрека"       		  <КоллекцияСтрокДереваЗначений; Неопределено>
//		"Изменен"            		  <Булево>
//  ПересчитыватьРейсКСЛ  - <булево>: необходим ли пересчет рейса КСЛ                 
//  ПересчитыватьРейс  - <булево>: необходим ли пересчет рейса 
//
Процедура СохранитьМаршрутРейса_(стРейс, ПересчитыватьРейсКСЛ = Истина, ПересчитыватьРейс = Истина) Экспорт
	Если ПересчитыватьРейс Тогда
		ПересчитатьРейс_(стРейс, , ПересчитыватьРейсКСЛ);
	КонецЕсли;
	
	Маршрут = стРейс.Маршрут;
		
	НаборЗаписейТочек = РегистрыСведений.новаТочкиМаршрутаРейсов.СоздатьНаборЗаписей();
	НаборЗаписейТочек.Отбор.Рейс.Установить(стРейс.Ссылка);
	НаборЗаписейТочек.Отбор.МаршрутСопровождения.Установить(МаршрутСопровождения);
	
	НаборЗаписейЗаданий = РегистрыСведений.новаЗаданияРейсов.СоздатьНаборЗаписей();
	НаборЗаписейЗаданий.Отбор.Рейс.Установить(стРейс.Ссылка);
	НаборЗаписейЗаданий.Отбор.МаршрутСопровождения.Установить(МаршрутСопровождения);
	
	Для Каждого стрТочка Из Маршрут Цикл
		Запись = НаборЗаписейТочек.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, стрТочка);
		Запись.МаршрутСопровождения = МаршрутСопровождения;
		
		Для Каждого стрЗадание Из стрТочка.Строки Цикл
			Запись = НаборЗаписейЗаданий.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, стрЗадание);
			Запись.МаршрутСопровождения = МаршрутСопровождения;
		КонецЦикла;
	КонецЦикла;
	НаборЗаписейТочек.Записать();
	НаборЗаписейЗаданий.Записать();
	
	//Если Не МаршрутСопровождения Тогда
	//	ИзмененныеУчастки = стРейс.УчасткиТрека.Строки.НайтиСтроки(Новый Структура("Изменен", Истина));
	//	Если ИзмененныеУчастки.Количество() > 0 Тогда
	//		НаборЗаписейУчастокТрека = РегистрыСведений.новаУчасткиПлановыхТрековРейсов.СоздатьНаборЗаписей();
	//		НаборЗаписейУчастокТрека.Отбор.Рейс.Установить(стРейс.Ссылка);
	//		
	//		Для Каждого стрИзмененныйУчасток Из ИзмененныеУчастки Цикл
	//			стрИзмененныйУчасток.Изменен = Ложь;
	//			
	//			НаборЗаписейУчастокТрека.Очистить();
	//			
	//			ъ = 0;
	//			текРейс = стРейс.Ссылка;
	//			КодУчастка = стрИзмененныйУчасток.КодУчастка;
	//			НаборЗаписейУчастокТрека.Отбор.КодУчастка.Установить(КодУчастка);
	//			Для Каждого стрТочкаТрека Из стрИзмененныйУчасток.Строки Цикл
	//				стрЗапись = НаборЗаписейУчастокТрека.Добавить();
	//				ЗаполнитьЗначенияСвойств(стрЗапись, стрТочкаТрека);
	//				стрЗапись.Рейс = текРейс;
	//				стрЗапись.КодУчастка = КодУчастка;
	//				стрЗапись.НомерТочки = ъ;
	//				ъ = ъ + 1;
	//			КонецЦикла;
	//			
	//			НаборЗаписейУчастокТрека.Записать();
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Не МаршрутСопровождения Тогда
		мсВключенныеДоставки = Новый Массив;
		мсИсключенныеДоставки = Новый Массив;
		
		Для Каждого ЭлДоставка Из стРейс.ДобавленныеДоставки Цикл
			мсВключенныеДоставки.Добавить(ЭлДоставка.Ключ);
		КонецЦикла;
		
		Для Каждого ЭлДоставка Из стРейс.УдаленныеДоставки Цикл
			мсИсключенныеДоставки.Добавить(ЭлДоставка.Ключ);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача,
		|	Истина КАК Запланировать
		|ИЗ
		|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки), НЕ Выполнена И БизнесПроцесс.Доставка В (&ВключенныеДоставки)) КАК Задачи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача,
		|	Ложь КАК Запланировать
		|ИЗ
		|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки), НЕ Выполнена И БизнесПроцесс.Доставка В (&ИсключенныеДоставки)) КАК Задачи";
		
		Запрос.УстановитьПараметр("ВключенныеДоставки", мсВключенныеДоставки);
		Запрос.УстановитьПараметр("ИсключенныеДоставки", мсИсключенныеДоставки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			обЗадача = Выборка.Задача.ПолучитьОбъект();
			Если Выборка.Запланировать Тогда
				обЗадача.ДоставкаЗапланирована = Истина;
			Иначе
				обЗадача.ДоставкаСогласована = Ложь;
				обЗадача.ДоставкаЗапланирована = Ложь;
			КонецЕсли;
			обЗадача.ВыполнитьЗадачу();
		КонецЦикла;
	КонецЕсли;
	
	Если стРейс.Свойство("РейсКСЛ") Тогда
		стРейс.РейсКСЛ.Сохранить();
	КонецЕсли;
		
КонецПроцедуры

// Оповещение об обновлении журналов
//
Процедура ОбновитьЖурналы() Экспорт
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("РегистрСведений.новаЗакрытияВозможныхРейсов");
	мсОбъекты.Добавить("Задача.новаЗадачаМестнойДоставки");
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

// Возвращает доставки рейса в порядке их выполнения.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
// Возвращаемое значение:
//  <Массив(<БизнесПроцессСсылка.новаМестнаяДоставка>)>
//
Функция ПолучитьДоставкиВПорядкеВыполнения(РейсСсылка) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	
	мсДоставки = Новый Массив;
	Для Каждого стрМаршрут Из Маршрут Цикл
		Для Каждого стрЗадание Из стрМаршрут.Строки Цикл
			Если стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка Тогда
				мсДоставки.Добавить(стрЗадание.Доставка);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Возврат мсДоставки;
КонецФункции

// Возвращает доставки и плановое время прибытия, убытия рейса в порядке их выполнения.
//
// Параметры:
//  РейсСсылка <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
// Возвращаемое значение:
//  Массив - список структур
//    Доставка - <БизнесПроцессСсылка.новаМестнаяДоставка> доставка рейса
//    Прибыл - <Дата.ДатаВремя> плановая дата прибытия
//    Убыл - <Дата.ДатаВремя> плановая дата убытия
//
Функция ПолучитьДоставкиПлановоеВремяВПорядкеВыполнения(РейсСсылка) Экспорт
	стРейс = соРедактируемыеРейсы[РейсСсылка];
	Маршрут = стРейс.Маршрут;
	
	мсДоставки = Новый Массив;
	Для Каждого стрМаршрут Из Маршрут Цикл
		Для Каждого стрЗадание Из стрМаршрут.Строки Цикл
			Если стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка Тогда
				ОписаниеДоставки = Новый Структура;
				ОписаниеДоставки.Вставить("Доставка", стрЗадание.Доставка);
				ОписаниеДоставки.Вставить("Прибыл", стрЗадание.ПлановаяДатаПосещения);
				ОписаниеДоставки.Вставить("Убыл", стрЗадание.ПлановаяДатаПосещения + (стрЗадание.ПлановоеВремяПосещения - '00010101'));
				мсДоставки.Добавить(ОписаниеДоставки);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Возврат мсДоставки;
КонецФункции

////////////////////////////////////////////
//*** ПРОЧИЕ ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ***//

// Обновляет прогнозируемые даты прибытия и убытия
//
// Параметры:
//  СтрокиДЗ <КоллекцияСтрокДереваЗначений>
//
Процедура ОбновитьПрогноз(СтрокиДЗ)
	
	Попытка
		Тест = СтрокиДЗ[0].ДатаВыездаФакт;
	Исключение
		Возврат; // Нет информации о факте движения, прогнозировать нечего.
	КонецПопытки;
	
	Если СтрокиДЗ.Количество() > 0
		 и СтрокиДЗ.Родитель <> Неопределено Тогда
		
		ПорядокТочек = Новый Соответствие;
		ТочкаНачалаПрогноза = 0;
		
		Для каждого СтрокаДЗ Из СтрокиДЗ Цикл
			
			ПорядокТочек.Вставить(СтрокаДЗ.НомерТочки, СтрокаДЗ);
			Если ( ЗначениеЗаполнено(СтрокаДЗ.ДатаПрибытия)
				   или ЗначениеЗаполнено(СтрокаДЗ.ДатаУбытия))
				 и СтрокаДЗ.НомерТочки > ТочкаНачалаПрогноза Тогда
				
				ТочкаНачалаПрогноза = СтрокаДЗ.НомерТочки;
			КонецЕсли;
			
			СтрокаДЗ.ПрогнозируемаяДатаПрибытия = '0001.01.01.00.00.00';
			СтрокаДЗ.ПрогнозируемаяДатаУбытия = '0001.01.01.00.00.00';
		КонецЦикла;
		
		Если ТочкаНачалаПрогноза = 0 Тогда
			
			ТекущаяТочка = СтрокиДЗ[ТочкаНачалаПрогноза];
			Если не ( ЗначениеЗаполнено(ТекущаяТочка.ДатаПрибытия)
					или ЗначениеЗаполнено(ТекущаяТочка.ДатаУбытия)) Тогда
				
				СмещениеНачалаРейса = ?(ЗначениеЗаполнено(СтрокиДЗ.Родитель.ДатаВыездаФакт), СтрокиДЗ.Родитель.ДатаВыездаФакт - СтрокиДЗ.Родитель.ВремяВыезда, 0);
				
				ТекущаяТочка.ПрогнозируемаяДатаПрибытия = ТекущаяТочка.ПлановаяДатаПосещения + СмещениеНачалаРейса;
				ТекущаяТочка.ПрогнозируемаяДатаУбытия = ТекущаяТочка.ПлановаяДатаПосещения + (ТекущаяТочка.ПлановоеВремяПосещения - '0001.01.01') + СмещениеНачалаРейса;
				
			ИначеЕсли не ЗначениеЗаполнено(ТекущаяТочка.ДатаУбытия) Тогда
				
				ТекущаяТочка.ПрогнозируемаяДатаУбытия = ТекущаяТочка.ДатаПрибытия + (ТекущаяТочка.ПлановоеВремяПосещения - '0001.01.01');
			КонецЕсли;
			
			ТочкаНачалаПрогноза = 1;
		КонецЕсли;
		
		Для Индекс = ТочкаНачалаПрогноза По СтрокиДЗ.Количество() - 1 Цикл
			
			ТекущаяТочка = ПорядокТочек[Индекс];
			
			Если ТекущаяТочка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если не ( ЗначениеЗаполнено(ТекущаяТочка.ДатаПрибытия)
					или ЗначениеЗаполнено(ТекущаяТочка.ДатаУбытия)) Тогда
				
				ПредыдущаяТочка = ПорядокТочек[Индекс - 1];
				
				Если ПредыдущаяТочка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СмещениеРасписания = 0;
				Если ЗначениеЗаполнено(ПредыдущаяТочка.ПрогнозируемаяДатаУбытия) Тогда
					СмещениеРасписания = ПредыдущаяТочка.ПрогнозируемаяДатаУбытия - ПредыдущаяТочка.ПлановаяДатаПосещения - (ПредыдущаяТочка.ПлановоеВремяПосещения - '0001.01.01');
				ИначеЕсли ЗначениеЗаполнено(ПредыдущаяТочка.ДатаУбытия) Тогда
					СмещениеРасписания = ПредыдущаяТочка.ДатаУбытия - ПредыдущаяТочка.ПлановаяДатаПосещения - (ПредыдущаяТочка.ПлановоеВремяПосещения - '0001.01.01');
				ИначеЕсли ЗначениеЗаполнено(ПредыдущаяТочка.ДатаПрибытия) Тогда
					СмещениеРасписания = ПредыдущаяТочка.ДатаПрибытия - ПредыдущаяТочка.ПлановаяДатаПосещения;
				КонецЕсли;
				
				ТекущаяТочка.ПрогнозируемаяДатаПрибытия = ТекущаяТочка.ПлановаяДатаПосещения + СмещениеРасписания;
				ТекущаяТочка.ПрогнозируемаяДатаУбытия = ТекущаяТочка.ПлановаяДатаПосещения + (ТекущаяТочка.ПлановоеВремяПосещения - '0001.01.01') + СмещениеРасписания;
				
			ИначеЕсли не ЗначениеЗаполнено(ТекущаяТочка.ДатаУбытия) Тогда
				
				ТекущаяТочка.ПрогнозируемаяДатаУбытия = ТекущаяТочка.ДатаПрибытия + (ТекущаяТочка.ПлановоеВремяПосещения - '0001.01.01');
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможность перетаскивания строки
//
// Параметры:
//  Маршрут 				<КоллекцияСтрокДереваЗначений>
//  СтрокаПеретаскивания 	<СтрокаДереваЗначений>
//  НомерТочкиВставки 		<Число>
//
// Возвращаемое значение
//  <Булево>
//
Функция МожноПеретаскивать(Маршрут, СтрокаПеретаскивания, НомерТочкиВставки) Экспорт
	
	МожноПеретащить = Истина;
	
	Для Каждого стрМаршрут Из Маршрут Цикл
		Если стрМаршрут = СтрокаПеретаскивания Тогда Продолжить КонецЕсли;
		Для Каждого стрЗадание Из стрМаршрут.Строки Цикл
			Если стрЗадание = СтрокаПеретаскивания Тогда Продолжить КонецЕсли;
			Если СтрокаПеретаскивания.Доставка = NULL Тогда
				Для каждого Строка Из СтрокаПеретаскивания.Строки Цикл
					Если стрЗадание.Доставка = Строка.Доставка Тогда
						Если стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка
						И НомерТочкиВставки <= стрЗадание.НомерТочки Тогда
							Доставка = Строка.Доставка;
							МожноПеретащить = Ложь;
							Прервать;							
						ИначеЕсли стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка
						И НомерТочкиВставки >= стрЗадание.НомерТочки Тогда
							Доставка = Строка.Доставка;
							МожноПеретащить = Ложь;
							Прервать;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
				Если Не МожноПеретащить Тогда					
					Прервать;					
				КонецЕсли;
			Иначе
				Если стрЗадание.Доставка = СтрокаПеретаскивания.Доставка Тогда
					Если стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка
					И НомерТочкиВставки <= стрЗадание.НомерТочки Тогда
						Доставка = СтрокаПеретаскивания.Доставка;
						МожноПеретащить = Ложь;
						Прервать;						
					ИначеЕсли стрЗадание.Вид = Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка
					И НомерТочкиВставки >= стрЗадание.НомерТочки Тогда
						Доставка = СтрокаПеретаскивания.Доставка;
						МожноПеретащить = Ложь;
						Прервать;						
					КонецЕсли;	
				КонецЕсли;			
			КонецЕсли;
		КонецЦикла;
		Если Не МожноПеретащить Тогда
			Сообщить(Строка(Доставка) + " не может быть перемещена, т.к. разгрузка расположена раньше погрузки", СтатусСообщения.Важное);
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат МожноПеретащить;
	
КонецФункции

//Компоновка доставок имеющих одинаковые ключевые поля: широта, долгота точки прибытия, временное окно, приоритет
//
//  Параметры:
//    Маршрут - маршрут рейса
//
//  Возвращаемое значение:
//  <ТаблицаЗначений>
//    
//
Функция СхатьМаршрутРейса(Маршрут)
	
	Результат = новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТочкаМаршрута");
	Результат.Колонки.Добавить("Доставка");
	Результат.Колонки.Добавить("ВремяПрибытияС");
	Результат.Колонки.Добавить("ВремяПрибытияПо");
	Результат.Колонки.Добавить("ВремяПребыванияГрузоотправителя");
	Результат.Колонки.Добавить("ВремяПребыванияГрузополучателя");
	Результат.Колонки.Добавить("ПриоритетТочки");
	Результат.Колонки.Добавить("СписокДоставок");
	
	Доставки = Новый Массив;
	Для Каждого ТочкаМаршрута Из Маршрут Цикл
		
		Для каждого Задание Из ТочкаМаршрута.Строки Цикл
			
			Доставки.Добавить(Задание.Доставка);
		КонецЦикла; 
	КонецЦикла; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    ТочкаМаршрута
	|    ,Широта
	|    ,Долгота
	|    ,Доставка
	|    ,ВремяПрибытияС
	|    ,ВремяПрибытияПо
	|    ,ВремяПребыванияГрузоотправителя
	|    ,ВремяПребыванияГрузополучателя
	|    ,ВЫБОР
	|      КОГДА Приоритет = ЗНАЧЕНИЕ(Перечисление.новаПриоритетыТочкиДоставки.Наивысший)
	|        ТОГДА 5
	|      КОГДА Приоритет = ЗНАЧЕНИЕ(Перечисление.новаПриоритетыТочкиДоставки.Высокий)
	|        ТОГДА 4
	|      КОГДА Приоритет = ЗНАЧЕНИЕ(Перечисление.новаПриоритетыТочкиДоставки.Нормальный)
	|        ТОГДА 3
	|      КОГДА Приоритет = ЗНАЧЕНИЕ(Перечисление.новаПриоритетыТочкиДоставки.Низкий)
	|        ТОГДА 2
	|      КОГДА Приоритет = ЗНАЧЕНИЕ(Перечисление.новаПриоритетыТочкиДоставки.БезПриоритета)
	|        ТОГДА 1
	|    КОНЕЦ КАК Приоритет
	|  ИЗ
	|    (
	|      ВЫБРАТЬ
	|          ТочкаПрибытия КАК ТочкаМаршрута
	|          ,ТочкаПрибытия.Адрес.Широта КАК Широта
	|          ,ТочкаПрибытия.Адрес.Долгота КАК Долгота
	|          ,Ссылка КАК Доставка
	|          ,ВремяПрибытияС
	|          ,ВремяПрибытияПо
	|          ,ВремяПребыванияГрузоотправителя
	|          ,ВремяПребыванияГрузополучателя
	|          ,ВЫБОР
	|            КОГДА ТочкаПрибытия.Приоритет <> ЗНАЧЕНИЕ(Перечисление.новаПриоритетыТочкиДоставки.ПустаяСсылка)
	|              ТОГДА ТочкаПрибытия.Приоритет
	|            ИНАЧЕ Значение
	|          КОНЕЦ КАК Приоритет
	|        ИЗ
	|          БизнесПроцесс.новаМестнаяДоставка
	|          ,Константа.новаТочкаДоставкиПриоритетПоУмолчанию
	|        ГДЕ
	|          Ссылка В(&Доставки)
	|    ) КАК Доставки
	|  ИТОГИ ПО
	|    Широта
	|    ,Долгота
	|    ,ВремяПрибытияС
	|    ,ВремяПрибытияПо
	|");
	
	Запрос.УстановитьПараметр("Доставки", Доставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		//По широте
		Выборка_Широта = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка_Широта.Следующий() Цикл
			
			//по долготе
			Выборка_Долгота = Выборка_Широта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка_Долгота.Следующий() Цикл
				
				//по началу окна
				Выборка_ВремяПрибытияС = Выборка_Долгота.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка_ВремяПрибытияС.Следующий() Цикл
					
					//по концу окна
					Выборка_ВремяПрибытияПо = Выборка_ВремяПрибытияС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока Выборка_ВремяПрибытияПо.Следующий() Цикл
						
						//Детальная выборка
						МаксимальныйПриоритет = 0;
						ПервыйПроход = Истина;
						ТекущаяСтрокаРезультат = Неопределено;
						
						ДетальнаяВыборка = Выборка_ВремяПрибытияПо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ДетальнаяВыборка.Следующий() Цикл
							
							Если ПервыйПроход Тогда
								
								ТекущаяСтрокаРезультат = Результат.Добавить();
								ТекущаяСтрокаРезультат.ТочкаМаршрута = ДетальнаяВыборка.ТочкаМаршрута;
								ТекущаяСтрокаРезультат.Доставка = Строка(Новый УникальныйИдентификатор);
								ТекущаяСтрокаРезультат.ВремяПрибытияС = ДетальнаяВыборка.ВремяПрибытияС;
								ТекущаяСтрокаРезультат.ВремяПрибытияПо = ДетальнаяВыборка.ВремяПрибытияПо;
								ТекущаяСтрокаРезультат.СписокДоставок = Новый Массив;
								
								ТекущаяСтрокаРезультат.ВремяПребыванияГрузоотправителя = 0;
								ТекущаяСтрокаРезультат.ВремяПребыванияГрузополучателя = 0;
								
								ПервыйПроход = Истина;
							КонецЕсли;
							
							МаксимальныйПриоритет = Макс(ДетальнаяВыборка.Приоритет, МаксимальныйПриоритет);
							
							ТекущаяСтрокаРезультат.ВремяПребыванияГрузоотправителя = ТекущаяСтрокаРезультат.ВремяПребыванияГрузоотправителя + (ДетальнаяВыборка.ВремяПребыванияГрузоотправителя - '00010101');
							ТекущаяСтрокаРезультат.ВремяПребыванияГрузополучателя = ТекущаяСтрокаРезультат.ВремяПребыванияГрузополучателя + (ДетальнаяВыборка.ВремяПребыванияГрузополучателя - '00010101');
							
							ТекущаяСтрокаРезультат.СписокДоставок.Добавить(ДетальнаяВыборка.Доставка);
						КонецЦикла;
						
						ТекущаяСтрокаРезультат.ПриоритетТочки = МаксимальныйПриоритет;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Индексы.Добавить("Доставка");
	
	Возврат Результат;
				
КонецФункции

// Отменяет задачи МД
//
// Параметры
//  МассивДоставок  - <Массив(<БизнесПроцессСсылка.новаМестнаяДоставка>)>
//                 
Процедура ОтменитьДоставки(МассивДоставок)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	новаЗадачаМестнойДоставки.Ссылка КАК Задача
	|ИЗ
	|	Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
	|ГДЕ
	|	(новаЗадачаМестнойДоставки.БизнесПроцесс В (&МассивДоставок)
	|			ИЛИ новаЗадачаМестнойДоставки.БизнесПроцесс.Доставка В (&МассивДоставок))
	|	И (НЕ новаЗадачаМестнойДоставки.Выполнена)");
	
	Запрос.УстановитьПараметр("МассивДоставок", МассивДоставок);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			обЗадача = Выборка.Задача.ПолучитьОбъект();
			обЗадача.ДоставкаОтменена = Истина;
			обЗадача.ВыполнитьЗадачу();
		КонецЦикла;
	КонецЕсли;
	
	#Если Клиент Тогда
		мсТаблицы = Новый Массив;
		мсТаблицы.Добавить("Задача.новаЗадачаМестнойДоставки");
		новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
	#КонецЕсли
	
КонецПроцедуры // ОтменитьДоставки()

//Получает строковое представление массива
//Элементы массив разделяются символом переноса строки
//
//Параметры
//	МассивЭлементов - <Массив>
//
//Возвращаемое значение 
// 	<Строка>
Функция СтрокаИзМассива(МассивЭлементов)
	
	Результат = "";
	
	Для Каждого ЭлМассива Из МассивЭлементов Цикл
		Результат = Результат + ЭлМассива + Символы.ПС;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // СтрокаИзМассива()

МаршрутСопровождения = Ложь;
ИнтерактивноеИзменениеПорядкаТочек = Ложь;
АвтоСохранениеИзменений = Истина;
УчитыватьФиксациюТочек = Истина;

ВремяПредупрежденияОВероятностиОпоздании = Константы.новаВремяПредупрежденияОВероятностиОпоздания.Получить();

соРедактируемыеРейсы = Новый Соответствие;

соКартинкиДействий = Новый Соответствие;
соКартинкиДействий.Вставить(Перечисления.новаДействияВТочкеРейсаМестнойДоставки.ПустаяСсылка(), БиблиотекаКартинок.новаПустаяКартинка);
соКартинкиДействий.Вставить(Перечисления.новаДействияВТочкеРейсаМестнойДоставки.Погрузка, БиблиотекаКартинок.новаПогрузка);
соКартинкиДействий.Вставить(Перечисления.новаДействияВТочкеРейсаМестнойДоставки.Разгрузка, БиблиотекаКартинок.новаРазгрузка);
соКартинкиДействий.Вставить(Перечисления.новаДействияВТочкеРейсаМестнойДоставки.ПогрузкаИРазгрузка, БиблиотекаКартинок.новаПогрузкаИРазгрузка);
соКартинкиДействий.Вставить(Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Погрузка, БиблиотекаКартинок.новаПогрузка);
соКартинкиДействий.Вставить(Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка, БиблиотекаКартинок.новаРазгрузка);

СпособОтображенияМаршрута = Константы.новаСпособОтображенияМаршрута.Получить();
Если Не ЗначениеЗаполнено(СпособОтображенияМаршрута) Тогда
	СпособОтображенияМаршрута = Перечисления.новаСпособыОтображенияМаршрутов.Полностью;
КонецЕсли;

ИдПоследнегоОбъекта = -1;

#КонецЕсли                 
