
&НаСервере
Процедура ПолучитьДанныеВыгрузкиНаСервере()
	
	ИтогоНаличные = 0;
	ИтогоТерминал = 0;	
	
	ДанныеВыгрузки = РеквизитФормыВЗначение("ДеревоДанных");
	ДанныеВыгрузки.Строки.Очистить();
	ДанныеПоЛогистике.Очистить();
	 
	ОбъектОбработки = РеквизитФормыВЗначение("Объект"); 
	
	Если ПоОтчетуКассира Тогда
		ТаблицаДанных = Обработки.ВыгрузкаДанныхВБухгалтерию.ПолучитьДанныеВыгрузкиПоОтчету(ДатаВыгрузки, Истина);
	Иначе
		ТаблицаДанных = Обработки.ВыгрузкаДанныхВБухгалтерию.ПолучитьДанныеВыгрузки(ДатаВыгрузки, Истина, ОбъектОбработки.ПолучитьМакет("ДанныеПоОтчетКассира"));
	КонецЕсли;
	
	ТаблицаПартнеров = ТаблицаДанных.Скопировать();
	
	ТаблицаПартнеров.Свернуть("Партнер, Организация, Спецсчет, ПланВыгрузки, ДатаВыгрузки","СуммаНаличные, СуммаТерминал");
	
	Для Каждого СтрокаДанных Из ТаблицаПартнеров Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Организация) Тогда // Организация по договору не определена
			
			ДанныеВыгрузки.Строки.Очистить();

			ВызватьИсключение "Для " + СокрЛП(СтрокаДанных.Партнер) + " (" + СокрЛП(СтрокаДанных.Партнер.Код) + ") не удалось определить организацию по договору!";			
			
		КонецЕсли;	
		
		СтрокаДерева1 = ДанныеВыгрузки.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева1, СтрокаДанных);
		СтрокаДерева1.ПартнерЗаказ = СтрокаДанных.Партнер;
		СтрокаДерева1.Уровень = 1;
		
		ИтогоНаличные = ИтогоНаличные +  СтрокаДерева1.СуммаНаличные;
		ИтогоТерминал = ИтогоТерминал +  СтрокаДерева1.СуммаТерминал;
		
		ТаблицаДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("Партнер", СтрокаДанных.Партнер));
		Для Каждого СтрокаДокументов Из ТаблицаДокументов Цикл
			
			СтрокаДерева2 = СтрокаДерева1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева2, СтрокаДокументов,,"Организация, Спецсчет, ПланВыгрузки");
			СтрокаДерева2.ПартнерЗаказ = СтрокаДокументов.Заказ;
			СтрокаДерева2.Уровень = 2;
			//СтрокаДерева2.ТерминалДоставки = СтрокаДерева2.ПартнерЗаказ.ТерминалДоставки;
		КонецЦикла;	
	КонецЦикла;
	
	//Подготовка данных по логистике
	СтрокиКопирования = ТаблицаДанных.НайтиСтроки(Новый Структура("Спецсчет",Ложь)); //Исключаем все Спецсчет=Истина
	
	ТаблицаЛогистики = ТаблицаДанных.Скопировать(СтрокиКопирования);
	ТаблицаЛогистики.Свернуть("Организация, ТерминалДоставки" ,"СуммаНаличные, СуммаТерминал");
	
	//КомпанияЛогистики = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7722404333");
	//КомпанияЛогистики = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7722478416");
	
	//CeHbKA 22.03.2021
	//с 24.03.2021 смена организации выгрузки на ООО "Глобал Логистик" 
	//КомпанияЛогистики = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7720645220");	
	//CeHbKA 22.03.2021
	//с 21.12.2022 смена организации выгрузки на ООО "Время Логистики" 
	КомпанияЛогистики = Справочники.Организации.НайтиПоРеквизиту("ИНН", "9728034548");	
	
	ПланВыгрузки = Неопределено;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланыВыгрузкиДанныхВБухгалтерию.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПланыВыгрузкиДанныхВБухгалтерию КАК ПланыВыгрузкиДанныхВБухгалтерию
		|ГДЕ
		|	ПланыВыгрузкиДанныхВБухгалтерию.ПланАктивен
		|	И ПланыВыгрузкиДанныхВБухгалтерию.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", КомпанияЛогистики);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();	
	Если РезультатЗапроса.Следующий() Тогда
		ПланВыгрузки = РезультатЗапроса.Ссылка;
	КонецЕсли;
	
	КолонкаСпецсчет = ТаблицаЛогистики.Колонки.Добавить("Спецсчет", Новый ОписаниеТипов("Булево"));
	КолонкаПланВыгрузки = ТаблицаЛогистики.Колонки.Добавить("ПланВыгрузки", Новый ОписаниеТипов("СправочникСсылка.ПланыВыгрузкиДанныхВБухгалтерию"));
	КолонкаДатаВыгрузки = ТаблицаЛогистики.Колонки.Добавить("ДатаВыгрузки", Новый ОписаниеТипов("Дата"));
	
	КолонкаПартнер = ТаблицаЛогистики.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

	Для Каждого СтрокаДанных Из ТаблицаЛогистики Цикл
		
		СтрокаДанных.Партнер = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтрокаДанных.Организация.ИНН);
		СтрокаДанных.Спецсчет = СпецСчетКонтрагента(СтрокаДанных.Партнер, ДатаВыгрузки);

	КонецЦикла;			
	//КолонкаОрганизация = ТаблицаЛогистики.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЛогистики.ЗаполнитьЗначения(КомпанияЛогистики, "Организация");
	ТаблицаЛогистики.ЗаполнитьЗначения(ПланВыгрузки, "ПланВыгрузки");
	ТаблицаЛогистики.Сортировать("Партнер");
	
	Для Каждого СтрокаЛогистики Из ТаблицаЛогистики Цикл
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ВыгрузкаДанныхВБухгалтерию.СрезПоследних КАК ВыгрузкаДанныхВБухгалтериюСрезПоследних
		|ГДЕ
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.Партнер = &Партнер
		|	И ВыгрузкаДанныхВБухгалтериюСрезПоследних.ТерминалДоставки = &ТерминалДоставки
		|	И ВыгрузкаДанныхВБухгалтериюСрезПоследних.ПланВыгрузки = &ПланВыгрузки
		|	И ВыгрузкаДанныхВБухгалтериюСрезПоследних.ДатаВыгрузки = &ДатаВыгрузки";
		
		Запрос.УстановитьПараметр("ДатаВыгрузки", ДатаВыгрузки);
		Запрос.УстановитьПараметр("Партнер", СтрокаЛогистики.Партнер);
		Запрос.УстановитьПараметр("ПланВыгрузки", СтрокаЛогистики.ПланВыгрузки);
		Запрос.УстановитьПараметр("ТерминалДоставки", СтрокаЛогистики.ТерминалДоставки);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Следующий() Тогда
			СтрокаЛогистики.ДатаВыгрузки = РезультатЗапроса.Период;
		Конецесли;
		
	КонецЦикла;	
	
	
	ИтогоНаличныеЛогистика = ТаблицаЛогистики.Итог("СуммаНаличные");
	ИтогоТерминалЛогистика = ТаблицаЛогистики.Итог("СуммаТерминал");
	//Подготовка данных по логистике	
	
	ДанныеПоЛогистике.Загрузить(ТаблицаЛогистики);
	
	ЗначениеВРеквизитФормы(ДанныеВыгрузки, "ДеревоДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеВыгрузки(Команда)
	ПолучитьДанныеВыгрузкиНаСервере();
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеВБухгалтериюНаСервере(ОшибкиВыгрузки = "")
	
	//"Организация, ИсточникДанных, Партнер, ПланВыгрузки, Спецсчет, СуммаНаличные, СуммаТерминал, ТерминалДоставки"
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("Партнер",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОплат.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОплат.Колонки.Добавить("Спецсчет",Новый ОписаниеТипов("Булево"));
	ТаблицаОплат.Колонки.Добавить("СуммаНаличные",Новый ОписаниеТипов("Число"));
	ТаблицаОплат.Колонки.Добавить("СуммаТерминал",Новый ОписаниеТипов("Число"));
	ТаблицаОплат.Колонки.Добавить("ПланВыгрузки", Новый ОписаниеТипов("СправочникСсылка.ПланыВыгрузкиДанныхВБухгалтерию"));
	ТаблицаОплат.Колонки.Добавить("ТерминалДоставки", Новый ОписаниеТипов("СправочникСсылка.РегиональныеТерминалы"));
	ТаблицаОплат.Колонки.Добавить("ИсточникДанных", Новый Описаниетипов("СправочникСсылка.ИсточникиДанныхБазы1С"));
	
	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	Для Каждого СтрокаДанных Из СтрокиДерева Цикл
		
		Если Не СтрокаДанных.Выгружать Тогда Продолжить КонецЕсли;
		
		СтрокаОплаты = ТаблицаОплат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтрокаДанных);
		СтрокаОплаты.Партнер = СтрокаДанных.ПартнерЗаказ;
		СтрокаОплаты.ИсточникДанных = СтрокаОплаты.ПланВыгрузки.ИсточникДанных;
		СтрокаОплаты.ТерминалДоставки = Справочники.РегиональныеТерминалы.ПустаяСсылка();
		
		СтрокаДанных.ДатаВыгрузки = Текущаядата();
		
	КонецЦикла;	
	
	Если ТаблицаОплат.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных для выгрузки.");
		Возврат Ложь;
		
	КонецЕсли;	
	
	ВыгрузкаВБухгалтериюСервер.ВыгрузитьДокументы(ТаблицаОплат, ДатаВыгрузки, ОшибкиВыгрузки);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанныеВБухгалтерию(Команда)
	
	Состояние("Выполняется обработка данных...");
	
	ОшибкиВыгрузки = "";
	Если ВыгрузитьДанныеВБухгалтериюНаСервере(ОшибкиВыгрузки) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкиВыгрузки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоДанных.ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Элементы.ДеревоДанных.ТекущиеДанные.Уровень = 2 Тогда
		Элементы.ДеревоДанныхВыгружать.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоДанныхВыгружать.ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсе(Команда)
	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	Для Каждого СтрокаДанных Из СтрокиДерева Цикл
		СтрокаДанных.Выгружать = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьВсе(Команда)
	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	Для Каждого СтрокаДанных Из СтрокиДерева Цикл
		СтрокаДанных.Выгружать = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДанныеПоВыгрузке(Команда)
	
	МассивОтбораПартнеров = Новый Массив;
	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	Для Каждого СтрокаДанных Из СтрокиДерева Цикл
		Если СтрокаДанных.Выгружать Тогда
			МассивОтбораПартнеров.Добавить(СтрокаДанных.ПартнерЗаказ);
		КонецЕсли;
	КонецЦикла;	
	
	
	ПараметрыПросмотраРегистра = НОвый Структура();
	Если МассивОтбораПартнеров.Количество() > 0 Тогда
		 //ПараметрыПросмотраРегистра.Вставить("Отбор", Новый Структура("Партнер", МассивОтбораПартнеров));
		 
		 СпиокПартнеров = Новый СписокЗначений;
		 СпиокПартнеров.ЗагрузитьЗначения(МассивОтбораПартнеров);
		 
		 фиксНастройки = Новый НастройкиКомпоновкиДанных;
		 
		 эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
		 эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		 эОтбор.ПравоеЗначение = СпиокПартнеров;
		 эОтбор.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
		 эОтбор.Использование = Истина;
		 
		 эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаВыгрузки");
		 эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		 эОтбор.ПравоеЗначение = НачалоДня(ДатаВыгрузки);
		 эОтбор.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
		 эОтбор.Использование = Истина;
		 
		 ПараметрыПросмотраРегистра.Вставить("ФиксированныеНастройки", фиксНастройки);
		 
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ВыгрузкаДанныхВБухгалтерию.ФормаСписка", ПараметрыПросмотраРегистра);
	
КонецПроцедуры              

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДатаВыгрузки = ТекущаяДата() - (5*24*60*60);
	ПоОтчетуКассира = Истина;
КонецПроцедуры

&НаСервере
Процедура ДатаВыгрузкиПриИзмененииНаСервере()
	
	ДанныеВыгрузки = РеквизитФормыВЗначение("ДеревоДанных");
	ДанныеВыгрузки.Строки.Очистить();
	ЗначениеВРеквизитФормы(ДанныеВыгрузки, "ДеревоДанных");
	
	ИтогоНаличные = 0;
	ИтогоТерминал = 0;
	ИтогоНаличныеЛогистика = 0;
	ИтогоТерминалЛогистика = 0;

	ДанныеПоЛогистике.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ДатаВыгрузкиПриИзменении(Элемент)
	
	ДатаВыгрузкиПриИзмененииНаСервере()

КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеЛогистикиНаСервере(ОшибкиВыгрузки = "")
	//"Организация, ИсточникДанных, Партнер, ПланВыгрузки, Спецсчет, СуммаНаличные, СуммаТерминал, ТерминалДоставки"
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("Партнер",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОплат.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОплат.Колонки.Добавить("Спецсчет",Новый ОписаниеТипов("Булево"));
	ТаблицаОплат.Колонки.Добавить("СуммаНаличные",Новый ОписаниеТипов("Число"));
	ТаблицаОплат.Колонки.Добавить("СуммаТерминал",Новый ОписаниеТипов("Число"));
	ТаблицаОплат.Колонки.Добавить("ПланВыгрузки", Новый ОписаниеТипов("СправочникСсылка.ПланыВыгрузкиДанныхВБухгалтерию"));
	ТаблицаОплат.Колонки.Добавить("ТерминалДоставки", Новый ОписаниеТипов("СправочникСсылка.РегиональныеТерминалы"));
	ТаблицаОплат.Колонки.Добавить("ИсточникДанных", Новый Описаниетипов("СправочникСсылка.ИсточникиДанныхБазы1С"));
	
	Для Каждого СтрокаДанных Из ДанныеПоЛогистике Цикл
		
		СтрокаОплаты = ТаблицаОплат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтрокаДанных);
		СтрокаОплаты.ИсточникДанных = СтрокаОплаты.ПланВыгрузки.ИсточникДанных;		
		СтрокаДанных.ДатаВыгрузки = Текущаядата();
		
	КонецЦикла;	
	
	Если ТаблицаОплат.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных для выгрузки.");
		Возврат Ложь;
		
	КонецЕсли;	
	
	ВыгрузкаВБухгалтериюСервер.ВыгрузитьДокументы(ТаблицаОплат, ДатаВыгрузки, ОшибкиВыгрузки);
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанныеЛогистики(Команда)
		Состояние("Выполняется обработка данных...");
	
	ОшибкиВыгрузки = "";
	Если ВыгрузитьДанныеЛогистикиНаСервере(ОшибкиВыгрузки) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкиВыгрузки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СпецСчетКонтрагента(Контрагент, ДатаВыборки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет
	|ИЗ
	|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаВыборки);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Спецсчет;
	КонецЕсли;
	
	Возврат Ложь;
	
Конецфункции
