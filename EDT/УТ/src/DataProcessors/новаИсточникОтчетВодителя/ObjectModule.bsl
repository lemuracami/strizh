#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Рейс, по которому введен отчет водителя.
//
Перем Рейс Экспорт; // <БизнесПроцессСсылка.новаРейсМестнойДоставки>

// Редактируемый отчет водителя.
//
Перем обОтчетВодителя Экспорт; // <ДокументОбъект.новаОтчетВодителя>

// Таблица категорий грузов, выбираемых в отчете водителя.
//
Перем КатегорииГрузов Экспорт; // <ТаблицаЗначений(Категория: <СправочникСсылка.новаКатегорииГрузов>,
                               //                  ИмяКолонки: <Строка>)>

// Таблица статей доходов/расходов, заполняемых в отчете водителя.
//
Перем СтатьиДоходовРасходов Экспорт; // <ТаблицаЗначений[ТаблицаСтатейДоходовРасходов]>

// Объект, у которого вызывается метод ПриИзмененииЗаданий() при изменении источника.
//
Перем ОбработчикИзмененияСтатей Экспорт; // <ПроизвольныйОбъект>

// Таблица схем начисления зарплаты, используемых в отчете водителя.
//
Перем СхемыНачисленияЗарплаты Экспорт; // <ТаблицаЗначений[ТаблицаСхемНачисленияЗарплаты]>

Перем ПервоеПолучениеДанных;
Перем мсНевыбранныеКатегории;
Перем ОтмечатьВыполнениеДоставокПоСопровождению;

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	Рейс = Неопределено;
	обОтчетВодителя = Неопределено;
	КатегорииГрузов = Неопределено;
	СтатьиДоходовРасходов = Неопределено;
	ОбработчикИзмененияСтатей = Неопределено;
	СхемыНачисленияЗарплаты = Неопределено;
	ПервоеПолучениеДанных = Неопределено;
	мсНевыбранныеКатегории = Неопределено;
	ОтмечатьВыполнениеДоставокПоСопровождению = Неопределено;
	
КонецПроцедуры

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.НедостаточноДанных Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.Аквамарин;
	КонецЕсли;
	
	Если Не ДанныеСтроки.ЗаказыВозвращеныНаСклад И (ДанныеСтроки.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Или ДанныеСтроки.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена) Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.Персиковый;
	ИначеЕсли ДанныеСтроки.ЗаказыВозвращеныНаСклад И ДанныеСтроки.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена И ДанныеСтроки.Стоимость <> 0 Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.ЛососьСветлый;
	КонецЕсли;
	
	
	//Если ДанныеСтроки.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
	//	
	//	ДанныеСтроки
	//
	//КонецЕсли;
	
	
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
		
	ИначеЕсли Событие = "Выбор" Тогда
		Параметр3 = Ложь;
		Если Не Параметр2.Имя = "РезультатДоставки" Тогда 
			ОткрытьЗначение(Параметр1.Задание);
		КонецЕсли;
		
	ИначеЕсли Событие = "НачалоИзменения" Тогда
		мсНевыбранныеКатегории = Новый Массив;
		Для Каждого стрКатегория Из КатегорииГрузов Цикл
			Если Параметр1[стрКатегория.ИмяКолонки] = Истина Тогда Продолжить; КонецЕсли;
			мсНевыбранныеКатегории.Добавить(стрКатегория);
		КонецЦикла;
		
		Для Каждого стрСтатья Из СтатьиДоходовРасходов Цикл
			Если стрСтатья.Статья.ВидАналитики = Перечисления.новаВидыАналитикСтатейДоходовРасходов.Доставка Тогда
				Журнал.Дерево.Колонки[стрСтатья.ИмяКолонки].ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЦикла;
		
		стрСтатья = СтатьиДоходовРасходов.Найти(Параметр2, "ИмяКолонки");
		Если стрСтатья <> Неопределено Тогда
			Если стрСтатья.Статья.ВидАналитики = Перечисления.новаВидыАналитикСтатейДоходовРасходов.Доставка Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли Событие = "ОкончаниеРедактирования" Тогда
		Если ОбработчикИзмененияСтатей = Неопределено Тогда Возврат Истина; КонецЕсли;
		Если СтатьиДоходовРасходов = Неопределено Тогда Возврат Истина; КонецЕсли;
		//Если Параметр1.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ПустаяСсылка() Тогда
		//	Параметр1.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;
		//  КонецЕсли;
		Параметр1.Выполнено = Параметр1.РезультатДоставки.ТочкаПосещена;
		Для Каждого стрКатегория Из мсНевыбранныеКатегории Цикл
			Если Параметр1[стрКатегория.ИмяКолонки] <> Истина Тогда Продолжить; КонецЕсли;
			
			Для Каждого стрИсклКатегория Из стрКатегория.Категория.ИсключаемыеКатегории Цикл
				стрОтклКатегория = КатегорииГрузов.Найти(стрИсклКатегория.Категория, "Категория");
				Если стрОтклКатегория = Неопределено Тогда Продолжить; КонецЕсли;
				Параметр1[стрОтклКатегория.ИмяКолонки] = Ложь;
			КонецЦикла;
		КонецЦикла;
		
		Строки = РассчитатьСтатьиДоходовРасходов();
		
		Если СхемыНачисленияЗарплаты <> Неопределено Тогда
			стПодвалНачислений = Новый Структура;
			Для Каждого стрСхема Из СхемыНачисленияЗарплаты Цикл
				Для Каждого стрНачисление Из стрСхема.Начисления Цикл
					Если стрНачисление.База <> Перечисления.новаВидыБазНачислений.ЗаданиеРейса Тогда Продолжить; КонецЕсли;
					
					Если стрНачисление.Рассчитываемое Тогда
						Итог = 0;
						Для Каждого Строка Из Строки Цикл
							Итог = Итог + Строка[стрНачисление.ИмяКолонки];
						КонецЦикла;
					Иначе
						стрНачисление.Сумма = 0;
						Для Каждого Строка Из Строки Цикл
							стрНачисление.Сумма = стрНачисление.Сумма + Строка[стрНачисление.ИмяКолонки];
						КонецЦикла;
						Итог = стрНачисление.Сумма;
					КонецЕсли;
					стПодвалНачислений.Вставить(стрНачисление.ИмяКолонки, Формат(Итог, "ЧДЦ=2"));
				КонецЦикла;
			КонецЦикла;
			Журнал.УстановитьПодвал(ЭтотОбъект, стПодвалНачислений);
		КонецЕсли;
		
		ОбработчикИзмененияСтатей.ПриИзмененииЗаданий();
		ОбновитьПодвалСтатейДоходовРасходов();
		
	ИначеЕсли Событие = "ДобавленыДанныеВДерево" Тогда
		ОбновитьПодвалНачислений();
		ОбновитьПодвалСтатейДоходовРасходов();
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "ВыделитьВсеЗадания" Тогда
			УстановитьВыделениеЗаданий(Истина);
			
		ИначеЕсли Параметр1 = "СнятьВыделениеЗаданий" Тогда
			УстановитьВыделениеЗаданий(Ложь);
			
		КонецЕсли;	
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();
	КонецЕсли;	
	
КонецФункции

// Рассчитывает суммы статей доходов/расходов по данным журнала заданий.
//
// Возвращаемое значение:
//  <Массив(<СтрокаДереваЗначений[СтрокаЗаданияОтчетаВодителя]>)>
//
Функция РассчитатьСтатьиДоходовРасходов() Экспорт
	Задания = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Группировка", ЭтотОбъект, NULL), Истина);		
	Для Каждого стрСтатья Из СтатьиДоходовРасходов Цикл
		Если Не ЗначениеЗаполнено(стрСтатья.СпособРаспределения) Тогда Продолжить; КонецЕсли;
		
		стрСтатья.Сумма = 0;
		Для Каждого стрЗадание Из Задания Цикл
			Если стрЗадание.РезультатДоставки.РезультатВыполнения = Перечисления.новаРезультатВыполненияМестнойДоставки.НеВыполнена Тогда Продолжить; КонецЕсли;
			
			стрСтатья.Сумма = стрСтатья.Сумма + стрЗадание[стрСтатья.ИмяКолонки];
		КонецЦикла;
	КонецЦикла;
	
	Возврат Задания;
КонецФункции

Процедура УстановитьВыделениеЗаданий(Выделение)
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
	Для Каждого Строка Из Строки Цикл
		Строка.Выполнено = Выделение;
		
		Журнал.ОкончитьРедактированиеСтроки(Строка);
	КонецЦикла;
КонецПроцедуры

// Обновляет итоги по начислениям.
//
Процедура ОбновитьПодвалНачислений() Экспорт
	Если СхемыНачисленияЗарплаты <> Неопределено Тогда
		Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Группировка", ЭтотОбъект, NULL), Истина);		
		стПодвалНачислений = Новый Структура;
		Для Каждого стрСхема Из СхемыНачисленияЗарплаты Цикл
			Для Каждого стрНачисление Из стрСхема.Начисления Цикл
				Если стрНачисление.База <> Перечисления.новаВидыБазНачислений.ЗаданиеРейса Тогда Продолжить; КонецЕсли;
				
				Итог = 0;
				Для Каждого Строка Из Строки Цикл
					Сумма = Строка[стрНачисление.ИмяКолонки];
					Итог = Итог + ?(Сумма = Неопределено, 0, Сумма);
				КонецЦикла;
				стПодвалНачислений.Вставить(стрНачисление.ИмяКолонки, Формат(Итог, "ЧДЦ=2"));
			КонецЦикла;
		КонецЦикла;
		Журнал.УстановитьПодвал(ЭтотОбъект, стПодвалНачислений);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьПодвалСтатейДоходовРасходов()
	стПодвал = Новый Структура;
	Если СтатьиДоходовРасходов <> Неопределено Тогда
		Для Каждого стрСтатья Из СтатьиДоходовРасходов Цикл
			стПодвал.Вставить(стрСтатья.ИмяКолонки, Формат(стрСтатья.Сумма, "ЧДЦ=2"));
		КонецЦикла;
	КонецЕсли;
	
	Журнал.УстановитьПодвал(ЭтотОбъект, стПодвал);
КонецПроцедуры

Процедура Настроить()
	мсИнструменты = Новый Массив;
	ПараметрыЖурнала = Новый Структура("Инструменты", мсИнструменты);
	
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ВыделитьВсеЗадания", БиблиотекаКартинок.УстановитьФлажки, "", "Выделить все задания"));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СнятьВыделениеЗаданий", БиблиотекаКартинок.СнятьФлажки, "", "Снять выделение заданий"));

	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	КонструкторДанных.ПостОбработчикДанных = ЭтотОбъект;
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Маршрут.ТочкаМаршрута КАК ТочкаМаршрута,
	|	Задания.Доставка КАК Задание,
	|	Задания.ЗаданиеВыполнено
    //|   РеализацияТоваровУслуг.Ссылка КАК Реализация
	|
	|ИЗ
	//|	(ВЫБРАТЬ * ИЗ РегистрСведений.новаТочкиМаршрутаРейсов ГДЕ Рейс = &Рейс И МаршрутСопровождения = &ИспользоватьМаршрутСопровождения) КАК Маршрут
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ * ИЗ РегистрСведений.новаЗаданияРейсов ГДЕ Рейс = &Рейс И МаршрутСопровождения = &ИспользоватьМаршрутСопровождения) КАК Задания
    //| ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ Документ.РеализацияТоваровУслуг )КАК РеализацияТоваровУслуг
    //|		ПО Задания.Доставка.Номер = РеализацияТоваровУслуг.Номер
	//|ПО
	//|	Задания.КодТочки = Маршрут.КодТочки
	|
	|ГДЕ
	| Задания.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка)
	|
	|) КАК Задания
	|{СОЕДИНЕНИЯ}";
	
	КонструкторДанных.ДобавитьПараметр("Рейс", Рейс);
	КонструкторДанных.ДобавитьПараметр("ИспользоватьМаршрутСопровождения", Не Константы.новаВводОтчетовВодителяВПланировании.Получить());
		
	КонструкторДанных.ПостояннаяВыборка = ",
	//|	Задания.ТочкаМаршрута КАК ТочкаМаршрута,
	//|	Представление(Задания.ТочкаМаршрута) КАК ТочкаМаршрута_Пред,
	|	Задания.Задание КАК Задание,
	|	Представление(Задания.Задание) КАК Задание_Пред,
	|	Задания.ЗаданиеВыполнено КАК ЗаданиеВыполненоПоСопровождению,
	|	Ложь КАК Выполнено,
	|	Ложь КАК Перенесено,
	|	Ложь КАК НедостаточноДанных,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка) КАК ПричинаНевыполнения,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтказаПереноса.ПустаяСсылка) КАК ПричинаОтказа,
	|	Задания.Задание.ТочкаПрибытия.Адрес.Наименование КАК АдресДо,
	|	Задания.Задание.ТочкаПрибытия КАК АдресПосле,
	|	Ложь КАК ЗаказыВозвращеныНаСклад,
	|	"""" КАК АдресПослеТекст,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) Как ДатаПереноса,
	|	ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ПустаяСсылка) КАК РезультатДоставки,
    |   ЗНАЧЕНИЕ(Справочник.ТипыОплат.ПустаяСсылка) Как ТипОплаты
	|";
	
	Для Каждого стрКатегория Из КатегорииГрузов Цикл
		КонструкторДанных.ДобавитьПоле(стрКатегория.ИмяКолонки, СокрЛП(стрКатегория.Категория));
		КонструкторДанных.ДобавитьВыборкуПоля(, "ВЫБОР КОГДА " + стрКатегория.ИмяКолонки + ".Категория ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ");
		КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.новаГруз.Категории КАК " + стрКатегория.ИмяКолонки + "
		|ПО
		|	" + стрКатегория.ИмяКолонки + ".Ссылка = Задания.Задание.Груз
		| И " + стрКатегория.ИмяКолонки + ".Категория = &" + стрКатегория.ИмяКолонки + "
		|");
		
		КонструкторДанных.ДобавитьПараметр(стрКатегория.ИмяКолонки, стрКатегория.Категория);
	КонецЦикла;
	
	Если СтатьиДоходовРасходов <> Неопределено Тогда
		Для Каждого стрСтатья Из СтатьиДоходовРасходов Цикл
			КонструкторДанных.ДобавитьПоле(стрСтатья.ИмяКолонки, СокрЛП(стрСтатья.Статья), "ЧДЦ=2");
			КонструкторДанных.ДобавитьВыборкуПоля(, "ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))");
		КонецЦикла;
	КонецЕсли;
	
	Если СхемыНачисленияЗарплаты <> Неопределено Тогда
		Для Каждого стрСхема Из СхемыНачисленияЗарплаты Цикл
			мсНачисления = стрСхема.Начисления.НайтиСтроки(Новый Структура("База", Перечисления.новаВидыБазНачислений.ЗаданиеРейса));
			КоличествоНачислений = мсНачисления.Количество();
			Для Каждого Начисление Из мсНачисления Цикл
				Если КоличествоНачислений = 1 Тогда
					ЗаголовокКолонки = стрСхема.Представление;
				Иначе
					ЗаголовокКолонки = Начисление.Представление;
				КонецЕсли;			
				КонструкторДанных.ДобавитьПоле(Начисление.ИмяКолонки, ЗаголовокКолонки, "ЧДЦ=2");
				КонструкторДанных.ДобавитьВыборкуПоля(, "ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))");
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	
	КонструкторДанных.ДобавитьПоле("Выполнено");
	КонструкторДанных.ДобавитьПоле("РезультатДоставки","Результат доставки");
	КонструкторДанных.ДобавитьПоле("Комментарий",,, Новый ОписаниеТипов("Строка"));
	
	КонструкторДанных.ДобавитьПоле("Задание");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание");
	

	КонструкторДанных.ДобавитьПоле("НомерЗадания");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Номер");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Номер");
	
	//КонструкторДанных.ДобавитьПоле("ТочкаМаршрута");
	//КонструкторДанных.ДобавитьОтборПоля(, "Задания.ТочкаМаршрута");
	
	КонструкторДанных.ДобавитьПоле("Грузоотправитель");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Грузоотправитель");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Грузоотправитель");
	
	КонструкторДанных.ДобавитьПоле("Грузополучатель");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Грузополучатель");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Грузополучатель");
	
	
	КонструкторДанных.ДобавитьПоле("Стоимость");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Груз.Стоимость");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Груз.Стоимость");
	КонструкторДанных.ДобавитьИтог("Стоимость");
	
	КонструкторДанных.ДобавитьПоле("Валюта");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Груз.Валюта");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Груз.Валюта");
	
	КонструкторДанных.ДобавитьПоле("Вес");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Груз.Вес");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Груз.Вес");
	КонструкторДанных.ДобавитьИтог("Вес");
	
	КонструкторДанных.ДобавитьПоле("Объем");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Груз.Объем");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Груз.Объем");
	КонструкторДанных.ДобавитьИтог("Объем");
	
	КонструкторДанных.ДобавитьПоле("КоличествоЕдиницПеревозки", "Мест");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Груз.КоличествоЕдиницПеревозки");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Груз.КоличествоЕдиницПеревозки");
	КонструкторДанных.ДобавитьИтог("КоличествоЕдиницПеревозки");
	
	КонструкторДанных.ДобавитьПоле("ПеревезеноПалетт");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Груз.ПеревезеноПалетт");
	КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Груз.ПеревезеноПалетт");
	КонструкторДанных.ДобавитьИтог("ПеревезеноПалетт");
	
	КонструкторДанных.ДобавитьПоле("Перенесено");
	КонструкторДанных.ДобавитьПоле("ПричинаНевыполнения");
	КонструкторДанных.ДобавитьПоле("ПричинаОтказа");
	КонструкторДанных.ДобавитьПоле("АдресДо");
	КонструкторДанных.ДобавитьПоле("АдресПосле");
	КонструкторДанных.ДобавитьПоле("ЗаказыВозвращеныНаСклад");
	КонструкторДанных.ДобавитьПоле("НедостаточноДанных");
	КонструкторДанных.ДобавитьПоле("ДатаПереноса");
	КонструкторДанных.ДобавитьПоле("АдресПослеТекст",,, Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
    //Серегин М.В. 21.07.2015 17:07:04
	КонструкторДанных.ДобавитьПоле("ТипОплаты");
    //Серегин М.В. 21.07.2015 17:07:05 
	//КонструкторДанных.ДобавитьВыборкуПоля(, "Задания.Задание.Груз.Стоимость");
	//КонструкторДанных.ДобавитьОтборПоля(, "Задания.Задание.Груз.Стоимость");
	
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Задание"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
	дзДанные.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	//дзДанные.Колонки.Добавить("Перенесено", Новый ОписаниеТипов("Булево"));
	
	Если дзДанные.Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Строки = дзДанные.Строки[0].Строки.НайтиСтроки(Новый Структура("Группировка", NULL), Истина);
	
	Если ПервоеПолучениеДанных Тогда
		Если обОтчетВодителя.ЭтоНовый() Тогда
			обОтчетВодителя.Задания.Очистить();
			Для Каждого Строка Из Строки Цикл
				стрЗадание = обОтчетВодителя.Задания.Добавить();
				стрЗадание.Задание = Строка.Задание;
				
				Если ОтмечатьВыполнениеДоставокПоСопровождению Тогда
					стрЗадание.Выполнено = Строка.ЗаданиеВыполненоПоСопровождению;
					Строка.Выполнено = стрЗадание.Выполнено;
					Строка.РезультатДоставки = ?(Строка.Выполнено, Справочники.новаРезультатМестнойДоставки.Выполнена, Справочники.новаРезультатМестнойДоставки.НеВыполнена);
				Иначе
					//стрЗадание.Выполнено = Истина;
					//Строка.Выполнено = Истина;
					//Если Не ЗначениеЗаполнено(Строка.РезультатДоставки) Тогда
					//	Строка.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;
					//КонецЕсли;
					//Если Не ЗначениеЗаполнено(стрЗадание.РезультатДоставки) Тогда
					//	стрЗадание.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;
					//КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Для Каждого Строка Из Строки Цикл
				стрЗадание = обОтчетВодителя.Задания.Найти(Строка.Задание, "Задание");
				Если стрЗадание = Неопределено Тогда Продолжить; КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Строка, стрЗадание);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Строка Из Строки Цикл
			Журнал.ОкончитьРедактированиеСтроки(Строка, ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;	
	ПервоеПолучениеДанных = Ложь;
	
	Журнал.УстановитьПодвал(ЭтотОбъект, Новый Структура("Вес, Объем, Стоимость, КоличествоЕдиницПеревозки, НомерЗадания",
		Формат(дзДанные.Строки[0].Вес, "ЧДЦ=3"),
		Формат(дзДанные.Строки[0].Объем, "ЧДЦ=3"),
		Формат(дзДанные.Строки[0].Стоимость, "ЧДЦ=2"),
		Формат(дзДанные.Строки[0].КоличествоЕдиницПеревозки, "ЧДЦ=0"),
		Формат(Строки.Количество(), "ЧДЦ=0")));
КонецПроцедуры

// Сохраняет данные журнала в документ "Отчет водителя".
//
Процедура ПередЗаписью() Экспорт
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
	обОтчетВодителя.Задания.Очистить();	
	Для Каждого Строка Из Строки Цикл
		ЗаполнитьЗначенияСвойств(обОтчетВодителя.Задания.Добавить(), Строка);
	КонецЦикла;
	обОтчетВодителя.КатегорииЗаданий.Очистить();
	Для Каждого Строка Из Строки Цикл
		Для Каждого стрКатегория Из КатегорииГрузов Цикл
			Если Строка[стрКатегория.ИмяКолонки] <> Истина Тогда Продолжить; КонецЕсли;
			
			стрНоваяКатегория = обОтчетВодителя.КатегорииЗаданий.Добавить();
			стрНоваяКатегория.Задание = Строка.Задание;
			стрНоваяКатегория.Категория = стрКатегория.Категория;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Формирует таблицу категорий грузов, которые могут назначаться в отчете водителя.
//
Процедура ПолучитьКатегории() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка КАК Категория
	|ИЗ
	|	Справочник.новаКатегорииГрузов
	|
	|ГДЕ
	|	НазначатьВОтчетеВодителя И НЕ ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО Код ВОЗР";
	
	КатегорииГрузов = Запрос.Выполнить().Выгрузить();
	КатегорииГрузов.Колонки.Добавить("ИмяКолонки");
	Для Каждого стрКатегория Из КатегорииГрузов Цикл
		стрКатегория.ИмяКолонки = "Категория" + СтрЗаменить(Строка(КатегорииГрузов.Индекс(стрКатегория)), Символы.НПП, "");
	КонецЦикла;
КонецПроцедуры

ПервоеПолучениеДанных = Истина;
ОтмечатьВыполнениеДоставокПоСопровождению = Константы.новаОтмечатьВыполнениеДоставокПоСопровождению.Получить();

#КонецЕсли