

&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	
	
	Если ТемаСообщения = "" Тогда
		Сообщить("Не заполнена тема сообщения");
		Возврат;
	КонецЕсли;
	
	Если ТекстСообщения = "" Тогда
		Сообщить("Не заполнен текст сообщения");
		Возврат;
	КонецЕсли;
	
	Если НЕ СписокЗаказовТЗ.Количество() Тогда
		Сообщить("Нет заказов для рассылки");
		Возврат;	
	КонецЕсли;
	
	//Если СписокЗаказовТЗ.НайтиСтроки(Новый Структура("БылаОтправкаПоЗаказу", Истина)).Количество() Тогда
	//	
	//	ОО = Новый ОписаниеОповещения("ОтправитьПослеПодтверждения", ЭтаФорма, Новый Структура());	
	//	ПоказатьВопрос(ОО, "Есть отмеченные для отправки заказы, по которым уже была выполнена рассылка. " + Символы.ПС + "Вы уверены, что хотите продолжить?", РежимДиалогаВопрос.ДаНет);
	//Иначе	
		
	ЕстьНеОтправленные = Ложь;	
	ТекстНеОтправленные = "По некоторым заказам отсутствует e-mail, рассылка по ним не выполнена: ";
	ЕстьРанееОтправленные = Ложь;
	ТекстРанееОтправленные = "По некоторым заказам рассылка была осуществлена ранее, повторные сообщения по ним не отправлены: ";
	
	ОтправитьПисьмаНаСервере(ЕстьНеОтправленные, ТекстНеОтправленные, ЕстьРанееОтправленные, ТекстРанееОтправленные);			
	
	Если ЕстьНеОтправленные Тогда	
		Сообщить(ТекстНеОтправленные);		
	КонецЕсли;	
	
	Если ЕстьРанееОтправленные Тогда
		Сообщить(ТекстРанееОтправленные);
	КонецЕсли;
		
	//КонецЕсли;
		
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьПослеПодтверждения(Результат, Параметры) Экспорт
		
	
	ЕстьНеОтправленные = Ложь;	
	ТекстНеОтправленные = "По некоторым заказам отсутствует e-mail, рассылка по ним не выполнена: ";
	ЕстьРанееОтправленные = Ложь;
	ТекстРанееОтправленные = "По некоторым заказам рассылка была осуществлена ранее, повторные сообщения по ним не отправлены: ";
	
	Если Результат = КодВозвратаДиалога.Да Тогда		
		ОтправитьПисьмаНаСервере(ЕстьНеОтправленные, ТекстНеОтправленные, ЕстьРанееОтправленные, ТекстРанееОтправленные);
	КонецЕсли;
	
	Если ЕстьНеОтправленные Тогда	
		Сообщить(ТекстНеОтправленные);		
	КонецЕсли;
	
	Если ЕстьРанееОтправленные Тогда
		Сообщить(ТекстРанееОтправленные);
	КонецЕсли;

КонецПроцедуры

 
Процедура ОтправитьПисьмаНаСервере(ЕстьНеОтправленные, ТекстНеОтправленные, ЕстьРанееОтправленные, ТекстРанееОтправленные)
		
		
	Результат = СписокЗаказовТЗ.Выгрузить();
	
	МассивЗаказов = Результат.ВыгрузитьКолонку("Реализация");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ИсторияРассылки.Отправлено КАК Отправлено,
	                      |	ИсторияРассылки.Заказ КАК Заказ
	                      |ИЗ
	                      |	РегистрСведений.ИсторияРассылки КАК ИсторияРассылки
	                      |ГДЕ
	                      |	ЕСТЬNULL(ИсторияРассылки.Отправлено, ЛОЖЬ) = ИСТИНА
	                      |	И ИсторияРассылки.Заказ В (&МассивЗаказов)");	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	ОтправленныеТЗ = Запрос.Выполнить().Выгрузить();
	
	//отправка писем
	Для каждого Стр Из Результат Цикл
		
		Если Стр.КОбработке Тогда
			
			Если ЗначениеЗаполнено(Стр.EmailКлиента) Тогда
				
				Най = ОтправленныеТЗ.НайтиСтроки(Новый Структура("Заказ", Стр.Реализация));
				Если Най.Количество() Тогда
					ЕстьРанееОтправленные = Истина;
					ТекстРанееОтправленные = ТекстРанееОтправленные + Символы.ПС + "Заказ №" + СокрЛП(Стр.Реализация.Номер);	
				Иначе
					
				    ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номерзаказа]", "[НомерЗаказа]");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[номерзаказа]", "[НомерЗаказа]");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номер заказа]", "[НомерЗаказа]");			
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[партнер]", "[Партнер]");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[партнёр]", "[Партнер]");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Партнёр]", "[Партнер]");
					
					МасП = Новый Массив;	
					МасП.Добавить(СокрЛП(Стр.EmailКлиента));		
					ТекстС = СтрЗаменить(ТекстСообщения, "[НомерЗаказа]", СокрЛП(Стр.Реализация.Номер));					
					ТекстС = СтрЗаменить(ТекстС, "[Партнер]", Строка(Стр.ИнтернетМагазин));		
					
					//добавим подпись
					ТекстС = ТекстС + Символы.ПС + Символы.ПС + Подпись;
					
					//Геннадий #4415 29.12.2020 ->
					Если ОператорРассылки = 2 Тогда
						Рез = ОтправитьСообщение(МасП, ТемаСообщения, ТекстС);	
					ИначеЕсли ОператорРассылки = 1 Тогда 
						ТекстС = СтрЗаменить(ТекстС, Символы.ПС, "<br>");
						ТекстОшибки 	= "";
						ОбработкаUnion 	= Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
						Рез = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, ТемаСообщения, ТекстС, , "Логистическая компания ""Стриж""",,ТипТекстаПочтовогоСообщения.HTML,,ТекстОшибки,,Ложь);
					КонецЕсли;	
					//Геннадий #4415 <-
						
					// Логирование
					НаборЗ = РегистрыСведений.ИсторияРассылки.СоздатьНаборЗаписей();
					НаборЗ.Отбор.Заказ.Установить(Стр.Реализация);
					НЗапись = НаборЗ.Добавить();
					НЗапись.Текст = ТекстС;
					НЗапись.Заказ = Стр.Реализация;
					НЗапись.ТемаСообщения = ТемаСообщения;
					НЗапись.Партнер = Стр.Партнер;
					НЗапись.Почта = СокрЛП(Стр.EmailКлиента);
					НЗапись.ПериодОтправки = ТекущаяДата();
					
					//Геннадий #4415 29.12.2020 -> 
					Если ОператорРассылки = 2 Тогда
						Если Рез.Ответ Тогда
							НЗапись.Отправлено = Истина;			
						Иначе
							НЗапись.Отправлено = Ложь;
							НЗапись.ОписаниеОшибки = Рез.ОписаниеОшибки;			
						КонецЕсли;				
					ИначеЕсли ОператорРассылки = 1 Тогда 
						НЗапись.Отправлено 		= Рез;			
						НЗапись.ОписаниеОшибки 	= ТекстОшибки;			
					КонецЕсли;
					//Геннадий #4415 <-
					
					НаборЗ.Записать();
				КонецЕсли;	
			Иначе
				
				ТекстНеОтправленные = ТекстНеОтправленные + Символы.ПС + "Заказ " + СокрЛП(Стр.Реализация.Номер) + ", от " + Строка(Стр.ИнтернетМагазин);
			    ЕстьНеОтправленные = Истина;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;		
		
	
КонецПроцедуры // ()


Функция ОтправитьСообщение(СписокПолучателей = Неопределено, ТемаС = Неопределено, Знач ТекстС = Неопределено, ФайлС = Неопределено, ИмяОтправителя = "Логистическая компания ""Стриж""", ОбратныйАдрес = "mind@strizh-logistic.ru", ТипТекста = Неопределено, Сообщение = Неопределено, Ошибка = "", ТипРассылки = Неопределено, ДополнитьАдреса = Истина) Экспорт
	
	
	П = Новый ИнтернетПочтовыйПрофиль;
	П.АдресСервераSMTP = "smtp.yandex.ru";
	П.ПортSMTP = 465;
	П.ПользовательSMTP = "mind@strizh-logistic.ru";
	П.ПарольSMTP = "pzW5z6Vu";
	
	П.ИспользоватьSSLSMTP= Истина;
	П.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	Поч= Новый ИнтернетПочта;
	Поч.Подключиться(п);
	
	
	РезСтрукт = Новый Структура;
	РезСтрукт.Вставить("Ответ");
	РезСтрукт.Вставить("ОписаниеОшибки");

		
	Если Сообщение = "" Или Сообщение = Неопределено Тогда
		
		Сооб = Новый ИнтернетПочтовоеСообщение;
		Сооб.ИмяОтправителя = ИмяОтправителя;
		
		Сооб.ИмяОтправителя = ИмяОтправителя;
		Сооб.Отправитель = ОбратныйАдрес;
			
		
		Сооб.Тема = ТемаС;

		если ТипТекста = Неопределено Тогда
			Сооб.Тексты.Добавить(ТекстС);
		Иначе
			Сооб.Тексты.Добавить(ТекстС, ТипТекста);
		КонецеСли;
		
		Если ФайлС <> Неопределено Тогда
			Если ТипЗнч(ФайлС) = Тип("Строка") Тогда
				Сооб.Вложения.Добавить(ФайлС);
			ИначеЕсли ТипЗнч(ФайлС) = Тип("Массив") Тогда	
				Для Каждого Тек Из ФайлС Цикл
					Сооб.Вложения.Добавить(Тек);
				КонецЦикла;	
			КонецеСли;	
		КонецеСли;	
				
		Для Каждого Тек Из СписокПолучателей Цикл
			Сооб.Получатели.Добавить(СокрЛП(Тек));
		КонецЦикла;			
		Сообщение = Сооб;	
	Иначе		
		Сооб = Сообщение;
	КонецеСли;
	
	попытка
		Поч.Послать(Сооб);
	Исключение
		Ошибка = ОписаниеОшибки();
		Поч.Отключиться();
		РезСтрукт.ОписаниеОшибки = Ошибка;
		РезСтрукт.Ответ = Ложь;
		Возврат РезСтрукт;
	КонецПопытки;		

	РезСтрукт.Ответ = Истина;
	Возврат РезСтрукт;
					
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Элементы.ОтправитьПисьма.Доступность = Подтверждение;	
	
	ОО = РеквизитФормыВЗначение("Объект"); 
	СКД = ОО.ПолучитьМакет("ЗаказыОтбор");
	URLСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	ОО.ОтборЗаказов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСКД));

	НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;
	ОО.ОтборЗаказов.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	ЗначениеВРеквизитФормы(ОО, "Объект"); 
	
	//СтПериод.Вариант = ВариантСтандартногоПериода.Вчера;
	
	//ЗаполнитьСписокЗаказов();
	
	Подпись = "___________________________________
			|С уважением,
			|Команда Стриж-Логистик 
			|Логистическая компания Стриж
			|Россия, Москва
			|Огородный проезд, д.20 стр. 3";
	
	
	
	

	
КонецПроцедуры


&НаКлиенте
Процедура Обновить(Команда)
		
	Если НЕ ЗначениеЗаполнено(СтПериод) Тогда	
		Сообщить("Не выбран период");
	Иначе
		ЗаполнитьСписокЗаказов();
		Элементы.СписокЗаказовТЗ.Обновить();	
	КонецЕсли;	
		
КонецПроцедуры


Процедура ОбновитьНаСервере()

	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Дата1", НачалоДня(Дата1));
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Дата2", КонецДня(Дата2));		
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ВИнтервал", ДоставленныеВИнтервал);
	
	Если СПервогоРаза Тогда		
		ЭлементОтбора = СписокЗаказов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоПоездок");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = 2;	
	КонецЕсли;
	
	Элементы.СписокЗаказов.Обновить();
	
КонецПроцедуры


Процедура ЗаполнитьСписокЗаказов(МассивЗаказов = Неопределено)

	
	Если МассивЗаказов = Неопределено Тогда	
		МассивЗаказов = Новый Массив;
		ИспользоватьОтбор = Ложь;
	Иначе
		ИспользоватьОтбор = Истина;
	КонецЕсли;
	
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗакрытыеЗаказы.Реализация КАК Реализация,
						  //+Широков Задача 4471
						  //|	ЗакрытыеЗаказы.Партнер КАК Партнер,
						  |	ДополнительныеПараметрыЗаказа.ПолучательЗаказа КАК Партнер,
						  //-Широков Задача 4471
						  
						  |	ЗакрытыеЗаказы.Водитель КАК Водитель,
						  |	ЗакрытыеЗаказы.Экспедитор КАК Экспедитор,
						  //+Широков Задача 4471
						  //|	ЗакрытыеЗаказы.Клиент КАК Клиент,
						  |ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДополнительныеПараметрыЗаказа.ПолучательЗаказа) = ТИП(Справочник.Контрагенты) 
						  |	ТОГДА ДополнительныеПараметрыЗаказа.ПолучательЗаказа 
						  |ИНАЧЕ ЗакрытыеЗаказы.Клиент КОНЕЦ КАК Клиент,
						  //-Широков Задача 4471
						  
						  |	ЗакрытыеЗаказы.КатегорияДоставки КАК КатегорияДоставки,
						  |	ВЫБОР
	                      |		КОГДА ЗакрытыеЗаказы.ИнтернетМагазин.Код = ""Shop_601 ""
	                      |				ИЛИ ЗакрытыеЗаказы.ИнтернетМагазин.Код = ""Shop_752 ""
	                      |			ТОГДА ДополнительныеПараметрыЗаказа.Заказ.ИнтернетМагазинЯндекса
	                      |		ИНАЧЕ ЗакрытыеЗаказы.ИнтернетМагазин
	                      |	КОНЕЦ КАК ИнтернетМагазин,
	                      |	ЗакрытыеЗаказы.Период КАК Период,
	                      |	ЗакрытыеЗаказы.ТерминалДоставки КАК ТерминалДоставки,
	                      |	ЗакрытыеЗаказы.Транспорт КАК Транспорт,
	                      |	новаМестнаяДоставка.ИнтервалДоставкиСтрокой КАК ИнтервалДоставкиСтрокой,
	                      |	ДополнительныеПараметрыЗаказа.EmailКлиента КАК EmailКлиента,
	                      |	ДанныеЗаказаВодителя.Дата КАК ВремяВыполненияЗаказа,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РейсЗаказы.Ссылка) КАК КоличествоПоездок
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	                      |		ПО ЗакрытыеЗаказы.Доставка = новаМестнаяДоставка.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	                      |		ПО ЗакрытыеЗаказы.Реализация = ДополнительныеПараметрыЗаказа.Заказ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	                      |		ПО ЗакрытыеЗаказы.Реализация = ДанныеЗаказаВодителя.Реализация
	                      |			И (ДанныеЗаказаВодителя.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ЗакрытыеЗаказы.Период, ДЕНЬ) И КОНЕЦПЕРИОДА(ЗакрытыеЗаказы.Период, ДЕНЬ))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	                      |		ПО ЗакрытыеЗаказы.Реализация = РейсЗаказы.Заказ
	                      |			И (НЕ РейсЗаказы.УдаленИзРейса)
	                      |			И (НЕ РейсЗаказы.Ссылка.ПометкаУдаления)
	                      |ГДЕ
	                      |	ЗакрытыеЗаказы.Корректировка = ЛОЖЬ
	                      |	И ЗакрытыеЗаказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	                      |	И ЗакрытыеЗаказы.Период МЕЖДУ &Дата1 И &Дата2
	                      |	И ВЫБОР
	                      |			КОГДА &ВИнтервал
	                      |				ТОГДА ЧАС(ДанныеЗаказаВодителя.Дата) >= ЧАС(новаМестнаяДоставка.ВремяПрибытияС)
	                      |						И ЧАС(ДанныеЗаказаВодителя.Дата) <= ЧАС(новаМестнаяДоставка.ВремяПрибытияПо)
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ДанныеЗаказаВодителя.Дата,
	                      |	ЗакрытыеЗаказы.Водитель,
	                      |	ЗакрытыеЗаказы.КатегорияДоставки,
	                      |	ЗакрытыеЗаказы.Период,
	                      |	ЗакрытыеЗаказы.Экспедитор,
	                      |	ЗакрытыеЗаказы.Реализация,
	                      |	ЗакрытыеЗаказы.Клиент,
	                      |	ЗакрытыеЗаказы.ТерминалДоставки,
	                      |	ДополнительныеПараметрыЗаказа.EmailКлиента,
	                      |	новаМестнаяДоставка.ИнтервалДоставкиСтрокой,
	                      |	ЗакрытыеЗаказы.Транспорт,
	                      |	ЗакрытыеЗаказы.Партнер,
	                      |	ВЫБОР
	                      |		КОГДА ЗакрытыеЗаказы.ИнтернетМагазин.Код = ""Shop_601 ""
	                      |				ИЛИ ЗакрытыеЗаказы.ИнтернетМагазин.Код = ""Shop_752 ""
	                      |			ТОГДА ДополнительныеПараметрыЗаказа.Заказ.ИнтернетМагазинЯндекса
	                      |		ИНАЧЕ ЗакрытыеЗаказы.ИнтернетМагазин
	                      |	КОНЕЦ,
	                      |	ДополнительныеПараметрыЗаказа.ПолучательЗаказа
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Реализация КАК Реализация,
	                      |	ВТ.Партнер КАК Партнер,
	                      |	ВТ.Водитель КАК Водитель,
	                      |	ВТ.Экспедитор КАК Экспедитор,
	                      |	ВТ.Клиент КАК Клиент,
	                      |	ВТ.КатегорияДоставки КАК КатегорияДоставки,
	                      |	ВТ.ИнтернетМагазин КАК ИнтернетМагазин,
	                      |	ВТ.Период КАК Период,
	                      |	ВТ.ТерминалДоставки КАК ТерминалДоставки,
	                      |	ВТ.Транспорт КАК Транспорт,
	                      |	ВТ.ИнтервалДоставкиСтрокой КАК ИнтервалДоставкиСтрокой,
	                      |	ВТ.EmailКлиента КАК EmailКлиента,
	                      |	ВТ.ВремяВыполненияЗаказа КАК ВремяВыполненияЗаказа,
	                      |	ВТ.КоличествоПоездок КАК КоличествоПоездок,
	                      |	ЕСТЬNULL(ИсторияРассылки.Отправлено, ЛОЖЬ) КАК БылаОтправкаПоЗаказу
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРассылки КАК ИсторияРассылки
	                      |		ПО ВТ.Реализация = ИсторияРассылки.Заказ
	                      |ГДЕ
	                      |	ВЫБОР
	                      |			КОГДА &ИспользоватьОтбор
	                      |				ТОГДА ВТ.Реализация В (&МассивЗаказов)
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ
	                      |	И ВЫБОР
	                      |			КОГДА &СПервогоРаза
	                      |				ТОГДА ВТ.КоличествоПоездок < 2
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ");
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(СтПериод.ДатаНачала));
	Запрос.УстановитьПараметр("Дата2", КонецДня(СтПериод.ДатаОкончания));
	Запрос.УстановитьПараметр("ВИнтервал", ДоставленныеВИнтервал);
	Запрос.УстановитьПараметр("СПервогоРаза", СПервогоРаза);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ИспользоватьОтбор", ИспользоватьОтбор);
		
	РезТЗ = Запрос.Выполнить().Выгрузить();	
	
	// МАС - 14.06.2018 - № --->> 
	МасКривыеПочты = новый Массив;
	Для каждого Ст Из РезТЗ Цикл		
		Если РезТЗ.Найти("nomail.com", "EmailКлиента") <> Неопределено 
			ИЛИ РезТЗ.Найти("nomail.nomail", "EmailКлиента") <> Неопределено
			ИЛИ РезТЗ.Найти("example.com", "EmailКлиента") <> Неопределено
			ИЛИ РезТЗ.Найти("nomail.ru", "EmailКлиента") <> Неопределено
			ИЛИ РезТЗ.Найти("detmir.ru", "EmailКлиента") <> Неопределено
			ИЛИ РезТЗ.Найти("localhost", "EmailКлиента") <> Неопределено
			ИЛИ РезТЗ.Найти("goods.ru", "EmailКлиента") <> Неопределено
			ИЛИ РезТЗ.Найти("korablik.ru", "EmailКлиента") <> Неопределено
			ИЛИ РезТЗ.Найти("003.ru", "EmailКлиента") <> Неопределено Тогда			
			МасКривыеПочты.Добавить(Ст);			
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого ЗнаМ Из МасКривыеПочты Цикл	
		РезТЗ.Удалить(ЗнаМ);	
	КонецЦикла;
	// <<--- МАС 
	
	Элементы.ВсегоДоставокЗначение.Заголовок = Строка(Формат(РезТЗ.Количество(), "ЧЦ=; ЧН=0"));
	
	СписокЗаказовТЗ.Загрузить(РезТЗ);
		
	ОбновитьИтоги();
	
	
КонецПроцедуры



Процедура ОбновитьИтоги()
	
	Элементы.ДоставокВыбраноЗначение.Заголовок = Формат(СписокЗаказовТЗ.НайтиСтроки(Новый Структура("КОбработке", Истина)).Количество(), "ЧЦ=; ЧН=0");

КонецПроцедуры


&НаСервере
Процедура ОтборЗаказовПользовательскиеНастройкиВыборНаСервере()
	
	
	ОО = РеквизитФормыВЗначение("Объект");
	СКД = ОО.ПолучитьМакет("ЗаказыОтбор");

	Для каждого Эл Из ОО.ОтборЗаказов.Настройки.ПараметрыДанных.Элементы Цикл											
		Если Строка(Эл.Параметр) = "Дата1" Тогда		
			Эл.Значение = НачалоДня(СтПериод.ДатаНачала);		
		КонецЕсли;
		Если Строка(Эл.Параметр) = "Дата2" Тогда		
			Эл.Значение = КонецДня(СтПериод.ДатаОкончания);		
		КонецЕсли;	
	КонецЦикла;
	
	УстановитьСтруктуруНастроекДляВыводаВТаблицуСКолонкойСсылка(ОО.ОтборЗаказов.Настройки); 
	
	МассивЗаказов = СкомпоноватьВТаблицуЗначений(СКД, ОО.ОтборЗаказов).ВыгрузитьКолонку("Ссылка");
	
	ЗаполнитьСписокЗаказов(МассивЗаказов);	
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборЗаказовПользовательскиеНастройкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОтборЗаказовПользовательскиеНастройкиВыборНаСервере();
КонецПроцедуры


Функция УстановитьСтруктуруНастроекДляВыводаВТаблицуСКолонкойСсылка(Настройки)  Экспорт

	Настройки.Структура.Очистить();
	ТекГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ТекГруппировка.Использование = Истина;
	ТекПолеГруппировки = ТекГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ТекПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ТекПолеГруппировки.Использование = истина;
	АвтоВыбор = ТекГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоВыбор.Использование = Истина;

КонецФункции


Функция СкомпоноватьВТаблицуЗначений(СхемаКомпоновкиДанных, КомпоновщикНастроек) Экспорт

    //Запускаем компоновку
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	//Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);


	//Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ = ПроцессорВывода.Вывести(ПроцессорКомпоновки, истина);

	Возврат ТЗ;

КонецФункции


&НаКлиенте
Процедура УстановитьОтбор(Команда)
	
	УстановитьОтборНаСервере();
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры


Процедура УстановитьОтборНаСервере()

	
	ОО = РеквизитФормыВЗначение("Объект");

	СКД = ОО.ПолучитьМакет("ЗаказыОтбор");

	Для каждого Эл Из ОО.ОтборЗаказов.Настройки.ПараметрыДанных.Элементы Цикл						
		Если Строка(Эл.Параметр) = "Дата1" Тогда		
			Эл.Значение = НачалоДня(СтПериод.ДатаНачала);		
		КонецЕсли;
		Если Строка(Эл.Параметр) = "Дата2" Тогда		
			Эл.Значение = КонецДня(СтПериод.ДатаОкончания);		
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСтруктуруНастроекДляВыводаВТаблицуСКолонкойСсылка(ОО.ОтборЗаказов.Настройки); 		
	
	МассивЗаказов = СкомпоноватьВТаблицуЗначений(СКД, ОО.ОтборЗаказов).ВыгрузитьКолонку("Ссылка");
	
	
	ЗаполнитьСписокЗаказов(МассивЗаказов);
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборЗаказовНастройкиОтборВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	//УстановитьОтборНаСервере();
		
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для каждого Стр Из СписокЗаказовТЗ Цикл	
		Если НЕ Стр.БылаОтправкаПоЗаказу Тогда	
			Стр.КОбработке = Истина;			
		КонецЕсли;				
	КонецЦикла;	
	ОбновитьИтоги();
	
КонецПроцедуры


&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для каждого Стр Из СписокЗаказовТЗ Цикл		
		Стр.КОбработке = Ложь;			
	КонецЦикла;
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовТЗКОбработкеПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры


&НаКлиенте
Процедура ПодтверждениеПриИзменении(Элемент)
	
	Элементы.ОтправитьПисьма.Доступность = Подтверждение;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьИсторию(Команда)
	
	ПараметрыФормы = Новый Структура("", );
	ОткрытьФорму("РегистрСведений.ИсторияРассылки.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры


Процедура СохранитьНастройкиНаСервере()

	
	Нстр = Объект.ОтборЗаказов.Настройки;
	Ткст = ТекстСообщения;

	КлючОбъекта  = "РаботаСРассылкой";
	КлючНастроек = "НастройкиОбработки";	
	ИмяПользователя = ИмяПользователя();
	
	ПроизвольныеНастройкиОбработки  = Новый Массив;
	ПроизвольныеНастройкиОбработки.Добавить(Нстр);
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек,
	ПроизвольныеНастройкиОбработки, , ИмяПользователя);
		
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	ВосстановитьНастройкиНаСервере();
	
	СтПериод.ДатаОкончания = ТекущаяДата()-1;
	СтПериод.ДатаНачала = СтПериод.ДатаОкончания - (86400 * ИнтервалРассылкиПоУмолчанию);

	//Геннадий #4415 30.12.2020 ->
	ОператорРассылки = 1;
	//Геннадий <-
	
	ЗаполнитьСписокЗаказов();

КонецПроцедуры


Процедура ВосстановитьНастройкиНаСервере()

	КлючОбъекта  = "РаботаСРассылкой";
	КлючНастроек = "НастройкиОбработки";	
	ВладелецНастроек = ИмяПользователя();
	ПроизвольныеНастройкиОбработки  =
	ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек,, ВладелецНастроек);
	
	Если ПроизвольныеНастройкиОбработки <> Неопределено И ПроизвольныеНастройкиОбработки.Количество() Тогда		
		Если ТипЗнч(ПроизвольныеНастройкиОбработки[0]) = Тип("НастройкиКомпоновкиДанных") Тогда	
			Объект.ОтборЗаказов.ЗагрузитьНастройки(ПроизвольныеНастройкиОбработки[0]);		
		КонецЕсли;	
									
	КонецЕсли;					

КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда		
		СохранитьНастройкиНаСервере();			
	КонецЕсли;
	
КонецПроцедуры


