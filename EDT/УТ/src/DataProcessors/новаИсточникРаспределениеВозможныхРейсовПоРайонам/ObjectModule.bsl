#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Журнал возможных рейсов, отображающий их распределение по районам.
//
Перем ЖурналВозможныхРейсов Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

Перем ЖурналНачалоПериода, ЖурналКонецПериода;
Перем ДатаПланирования, СменаПланирования;

Перем тзРаспределениеТранспортаПоРайонам;
Перем РаспределениеИзменено;
Перем ТекущаяСтрокаРаспределения;

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если ДанныеСтроки.Группировка = NULL Тогда
		ОформлениеСтроки.Ячейки.Транспорт.УстановитьТекст(ДанныеСтроки.Транспорт_Пред + " " + ДанныеСтроки.Водитель_Пред + " " + Формат(ДанныеСтроки.НачалоПериода, "ДФ=ЧЧ:мм"));
		
	Иначе
		Если КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "Район" Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);

			ЦветИзлишнегоОбеспечения = Новый Цвет(0, 0, 255);
			
            Если ЗначениеЗаполнено(ДанныеСтроки.ОбеспеченныйВес) Тогда
				Остаток = ДанныеСтроки.Вес - ДанныеСтроки.ОбеспеченныйВес;
				Если Остаток < 0 Тогда
					Остаток = -Остаток;
					ОформлениеСтроки.Ячейки.Вес.ЦветТекста = ЦветИзлишнегоОбеспечения;
				КонецЕсли;
				ОформлениеСтроки.Ячейки.Вес.УстановитьТекст(Формат(Остаток, "ЧДЦ=3"));
			КонецЕсли;
			
            Если ЗначениеЗаполнено(ДанныеСтроки.ОбеспеченныйОбъем) Тогда
				Остаток = ДанныеСтроки.Объем - ДанныеСтроки.ОбеспеченныйОбъем;
				Если Остаток < 0 Тогда
					Остаток = -Остаток;
					ОформлениеСтроки.Ячейки.Объем.ЦветТекста = ЦветИзлишнегоОбеспечения;
				КонецЕсли;
				ОформлениеСтроки.Ячейки.Объем.УстановитьТекст(Формат(Остаток, "ЧДЦ=3"));
			КонецЕсли;
			
            Если ЗначениеЗаполнено(ДанныеСтроки.ОбеспеченноеКоличествоЕдиницПеревозки) Тогда
				Остаток = ДанныеСтроки.КоличествоЕдиницПеревозки - ДанныеСтроки.ОбеспеченноеКоличествоЕдиницПеревозки;
				Если Остаток < 0 Тогда
					Остаток = -Остаток;
					ОформлениеСтроки.Ячейки.КоличествоЕдиницПеревозки.ЦветТекста = ЦветИзлишнегоОбеспечения;
				КонецЕсли;
				ОформлениеСтроки.Ячейки.КоличествоЕдиницПеревозки.УстановитьТекст(Формат(Остаток, "ЧДЦ=1"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
	
	ИначеЕсли Событие = "Выбор" Тогда
		Если Параметр1.Группировка = NULL Тогда
			Если ТипЗнч(Параметр1.Район) = Тип("СправочникСсылка.новаГруппыРайонов") Тогда
				ВыбранныйРайон = Параметр1.Район.ОсновнойРайон;
			Иначе
				ВыбранныйРайон = Параметр1.Район;
			КонецЕсли;
			Строки = тзРаспределениеТранспортаПоРайонам.НайтиСтроки(Новый Структура("Район, Транспорт, Водитель, НачалоПериода", ВыбранныйРайон, Параметр1.Транспорт, Параметр1.Водитель, Параметр1.НачалоПериода));
			Для Каждого Строка Из Строки Цикл
				тзРаспределениеТранспортаПоРайонам.Удалить(Строка);
			КонецЦикла;
			
			КонструкторДанных.ЗагрузитьВременнуюТаблицу("РаспределениеТранспортаПоРайонам", тзРаспределениеТранспортаПоРайонам);
			Журнал.Обновить();
			
			Если ЖурналВозможныхРейсов <> Неопределено Тогда
				ЖурналВозможныхРейсов.Обновить();
			КонецЕсли;
			
			РаспределениеИзменено = Истина;
		КонецЕсли;
		
	ИначеЕсли Событие = "АктивизированаСтрока" Тогда
		ТекущаяСтрокаРаспределения = Параметр1;
		
	ИначеЕсли Событие = "УстановленФильтр" Тогда
		ПериодРаспределенияИзменен = Ложь;
		
		Если Параметр1.Свойство("ДатаНачала") Тогда
			ЖурналНачалоПериода = Параметр1.ДатаНачала;
		КонецЕсли;
		Если Параметр1.Свойство("ДатаКонца") Тогда
			ЖурналКонецПериода = Параметр1.ДатаКонца;
		КонецЕсли;
		
		Если ДатаПланирования <> Параметр1.ДатаПланирования
		 Или СменаПланирования <> Параметр1.СменаПланирования Тогда
		    Если РаспределениеИзменено Тогда
			 	Ответ = Вопрос("Изменен период планирования. Сохранить распределение?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Отмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
					
				ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
					СохранитьРаспределение();				
					
				КонецЕсли;
				
				РаспределениеИзменено = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ДатаПланирования = Параметр1.ДатаПланирования;
		СменаПланирования = Параметр1.СменаПланирования;
		ЗагрузитьРаспределение();
		СформироватьОтбор();
		
	ИначеЕсли Событие = "ИзменениеПараметров" Тогда
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
	КонецЕсли;	
КонецФункции

Процедура СформироватьОтбор()
	КонструкторДанных.ДобавитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
	КонструкторДанных.ДобавитьПараметр("ЖурналКонецПериода", ЖурналКонецПериода);
	
	Если ЗначениеЗаполнено(ЖурналНачалоПериода) И ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И ((БизнесПроцесс.Доставка.ВремяОтправленияС МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода) ИЛИ (БизнесПроцесс.Доставка.ВремяПрибытияС МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода))";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналНачалоПериода) И Не ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И ((БизнесПроцесс.Доставка.ВремяОтправленияС >= &ЖурналНачалоПериода) ИЛИ (БизнесПроцесс.Доставка.ВремяПрибытияС >= &ЖурналНачалоПериода))";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналКонецПериода) И Не ЗначениеЗаполнено(ЖурналНачалоПериода) Тогда
		Отбор = " И ((БизнесПроцесс.Доставка.ВремяОтправленияС <= &ЖурналКонецПериода) ИЛИ (БизнесПроцесс.Доставка.ВремяПрибытияС <= &ЖурналКонецПериода))";
		
	Иначе
		Отбор = "";
	КонецЕсли;
	
	КонструкторДанных.УстановитьПатч("{ОТБОР_ПО_ПЕРИОДУ}", Отбор);
КонецПроцедуры

Процедура Настроить()
	ПараметрыЖурнала = Новый Структура;

	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	КонструкторДанных.ПостОбработчикДанных = ЭтотОбъект;
	
	СформироватьОтбор();
	
	КонструкторДанных.ЗагрузитьВременнуюТаблицу("РаспределениеТранспортаПоРайонам", тзРаспределениеТранспортаПоРайонам);
	
	КонструкторДанных.ТекстЗапроса = "
	|(ВЫБРАТЬ
	|	ЕСТЬNULL(ГруппыРайонов.Группа, Районы.Район) КАК Район,
	|	СУММА(Задачи.БизнесПроцесс.Доставка.Груз.Вес) КАК Вес,
	|	СУММА(Задачи.БизнесПроцесс.Доставка.Груз.Объем) КАК Объем,
	|	СУММА(Задачи.БизнесПроцесс.Доставка.Груз.КоличествоЕдиницПеревозки) КАК КоличествоЕдиницПеревозки,
	|	КОЛИЧЕСТВО(Задачи.Ссылка) КАК КоличествоДоставок
	|
	|ИЗ
	|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки), НЕ Выполнена {ОТБОР_ПО_ПЕРИОДУ}) КАК Задачи
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаРайоныАдресов КАК Районы
	|ПО
	|	Районы.Классификатор = &КлассификаторРайонов И Районы.Адрес = Задачи.БизнесПроцесс.Доставка.ОсновнаяТочка.Адрес
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыРайонов
	|ПО
	|	ГруппыРайонов.Район = Районы.Район
	|
	|ГДЕ
	|	НЕ Районы.Район ЕСТЬ NULL {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ}
	|
	|СГРУППИРОВАТЬ ПО ЕСТЬNULL(ГруппыРайонов.Группа, Районы.Район)
	|) КАК Районы
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РаспределениеТранспортаПоРайонам
	|ПО
	|	РаспределениеТранспортаПоРайонам.Район = Районы.Район ИЛИ РаспределениеТранспортаПоРайонам.Район = Районы.Район.ОсновнойРайон
	|";
	
	КонструкторДанных.ДобавитьПараметр("КлассификаторРайонов", новаКарты.ПолучитьТекущийКлассификаторРайонов());
	
	КонструкторДанных.ПостояннаяВыборка = ",
	|	Районы.Район КАК Район,
	|	Представление(Районы.Район) КАК Район_Пред,
	|	РаспределениеТранспортаПоРайонам.Транспорт КАК Транспорт,
	|	Представление(РаспределениеТранспортаПоРайонам.Транспорт) КАК Транспорт_Пред,
	|	РаспределениеТранспортаПоРайонам.Водитель КАК Водитель,
	|	Представление(РаспределениеТранспортаПоРайонам.Водитель) КАК Водитель_Пред,
	|	РаспределениеТранспортаПоРайонам.НачалоПериода КАК НачалоПериода,
	|   Районы.Вес КАК Вес,
	|   Районы.Объем КАК Объем,
	|   Районы.КоличествоЕдиницПеревозки КАК КоличествоЕдиницПеревозки,
	|   РаспределениеТранспортаПоРайонам.Транспорт.Грузоподъемность * 1000 КАК ОбеспеченныйВес,
	|   РаспределениеТранспортаПоРайонам.Транспорт.ОбъемКузова КАК ОбеспеченныйОбъем,
	|   РаспределениеТранспортаПоРайонам.Транспорт.Вместимость КАК ОбеспеченноеКоличествоЕдиницПеревозки
	|";
	
	ПутьДоставки = "Задачи.БизнесПроцесс.Доставка";
	
	мсТекущиеТочкиДоставки = новаМестнаяДоставка.ПолучитьТекущиеТочкиДоставки(новаКонтекст);
	Если мсТекущиеТочкиДоставки.Количество() > 0 Тогда
		КонструкторДанных.УстановитьПатч("{ОТБОР_ТОЧЕК_ДОСТАВКИ}", " И " + ПутьДоставки + ".ТочкаОтправления В (&ТекущиеТочкиДоставки)");
		КонструкторДанных.ДобавитьПараметр("ТекущиеТочкиДоставки", мсТекущиеТочкиДоставки);
	Иначе
		КонструкторДанных.УстановитьПатч("{ОТБОР_ТОЧЕК_ДОСТАВКИ}", "");
	КонецЕсли;
	
	мсТекущиеРайоны = новаМестнаяДоставка.ПолучитьТекущиеРайоны(новаКонтекст);
	Если мсТекущиеРайоны.Количество() > 0 Тогда
		КонструкторДанных.УстановитьПатч("{ОТБОР_РАЙОНОВ}", " И Районы.Район В (&ТекущиеРайоны)");
		КонструкторДанных.ДобавитьПараметр("ТекущиеРайоны", мсТекущиеРайоны);
	КонецЕсли;
	
	КонструкторДанных.ДобавитьПоле("Транспорт");
	КонструкторДанных.ДобавитьОтборПоля(, "РаспределениеТранспортаПоРайонам.Транспорт");
	КонструкторДанных.ДобавитьСортировкуПоля("РаспределениеТранспортаПоРайонам.Транспорт.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Водитель");
	КонструкторДанных.ДобавитьОтборПоля(, "РаспределениеТранспортаПоРайонам.Водитель");
	КонструкторДанных.ДобавитьСортировкуПоля("РаспределениеТранспортаПоРайонам.Водитель.Наименование");
	
	КонструкторДанных.ДобавитьПоле("НачалоПериода", "С", "ДФ=ЧЧ:мм");
	
	КонструкторДанных.ДобавитьПоле("Район");
	КонструкторДанных.ДобавитьОтборПоля(, "Районы.Район");
	КонструкторДанных.ДобавитьСортировкуПоля("Районы.Район.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Вес",, "ЧДЦ=3");
	КонструкторДанных.ДобавитьОтборПоля(, "Районы.Вес");
	
	КонструкторДанных.ДобавитьПоле("Объем",, "ЧДЦ=3");
	КонструкторДанных.ДобавитьОтборПоля(, "Районы.Объем");
	
	КонструкторДанных.ДобавитьПоле("КоличествоЕдиницПеревозки", "Мест", "ЧДЦ=1");
	КонструкторДанных.ДобавитьОтборПоля(, "Районы.КоличествоЕдиницПеревозки");
	
	КонструкторДанных.ДобавитьПоле("КоличествоДоставок", "Количество", "ЧДЦ=01");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Районы.КоличествоДоставок");
	КонструкторДанных.ДобавитьОтборПоля(, "Районы.КоличествоДоставок");
	
	КонструкторДанных.ДобавитьПоле("ОбеспеченныйВес",, "ЧДЦ=3");
	КонструкторДанных.ДобавитьОтборПоля(, "РаспределениеТранспортаПоРайонам.Транспорт.Грузоподъемность * 1000");
	КонструкторДанных.ДобавитьИтог("ОбеспеченныйВес",, Истина);
	
	КонструкторДанных.ДобавитьПоле("ОбеспеченныйОбъем",, "ЧДЦ=3");
	КонструкторДанных.ДобавитьОтборПоля(, "РаспределениеТранспортаПоРайонам.Транспорт.ОбъемКузова");
	КонструкторДанных.ДобавитьИтог("ОбеспеченныйОбъем",, Истина);
	
	КонструкторДанных.ДобавитьПоле("ОбеспеченноеКоличествоЕдиницПеревозки",, "ЧДЦ=1");
	КонструкторДанных.ДобавитьОтборПоля(, "РаспределениеТранспортаПоРайонам.Транспорт.Вместимость");
	КонструкторДанных.ДобавитьИтог("ОбеспеченноеКоличествоЕдиницПеревозки",, Истина);
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Район", "Вес, Объем, КоличествоЕдиницПеревозки, КоличествоДоставок");
	
	КонструкторДанных.УстановитьВидимостьПолей("Район", "Вес, Объем, КоличествоЕдиницПеревозки, КоличествоДоставок");
	КонструкторДанных.УстановитьВидимостьПолей(NULL, "Транспорт, Водитель, НачалоПериода, ОбеспеченныйВес, ОбеспеченныйОбъем, ОбеспеченноеКоличествоЕдиницПеревозки");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Район, Транспорт, Водитель, НачалоПериода"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
	Если дзДанные.Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	стОтборПустогоТранспорта = Новый Структура("Транспорт", NULL);
	Для Каждого стрТочка Из дзДанные.Строки[0].Строки Цикл
		ПустойТранспорт = стрТочка.Строки.НайтиСтроки(стОтборПустогоТранспорта);
		Для Каждого стрТранспорт Из ПустойТранспорт Цикл
			стрТочка.Строки.Удалить(стрТранспорт);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Включает переданный возможный рейс в район текущей строки распределения.
//
// Параметры:
//  ВозможныйРейс <СтрокаДереваЗначений[ВозможныйРейс]>
//
Процедура ВключитьВозможныйРейс(ВозможныйРейс) Экспорт
	Если ТекущаяСтрокаРаспределения = Неопределено Тогда Возврат; КонецЕсли;
	Район = ТекущаяСтрокаРаспределения.Район;
	Если Не ЗначениеЗаполнено(Район) Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(Район) = Тип("СправочникСсылка.новаГруппыРайонов") Тогда
		Район = Район.ОсновнойРайон;
	КонецЕсли;
	
	Строки = тзРаспределениеТранспортаПоРайонам.НайтиСтроки(Новый Структура("Район, Транспорт, Водитель, НачалоПериода", Район, ВозможныйРейс.Транспорт, ВозможныйРейс.Водитель, ВозможныйРейс.НачалоПериода));
	Если Строки.Количество() = 0 Тогда
		стрТранспорт = тзРаспределениеТранспортаПоРайонам.Добавить();
		ЗаполнитьЗначенияСвойств(стрТранспорт, ВозможныйРейс);
		стрТранспорт.Район = Район;
		
		КонструкторДанных.ЗагрузитьВременнуюТаблицу("РаспределениеТранспортаПоРайонам", тзРаспределениеТранспортаПоРайонам);
		Журнал.Обновить();
			
		Если ЖурналВозможныхРейсов <> Неопределено Тогда
			ЖурналВозможныхРейсов.Обновить();
		КонецЕсли;
		
		РаспределениеИзменено = Истина;
	КонецЕсли;
КонецПроцедуры

// Сохраняет текущее распределение в ИБ.
//
Процедура СохранитьРаспределение() Экспорт
	НаборЗаписей = РегистрыСведений.новаОперативноеРаспределениеВозможныхРейсовПоРайонам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаПланирования.Установить(ДатаПланирования);
	НаборЗаписей.Отбор.СменаПланирования.Установить(СменаПланирования);
	тзРаспределениеТранспортаПоРайонам.ЗаполнитьЗначения(ДатаПланирования, "ДатаПланирования");
	тзРаспределениеТранспортаПоРайонам.ЗаполнитьЗначения(СменаПланирования, "СменаПланирования");
	НаборЗаписей.Загрузить(тзРаспределениеТранспортаПоРайонам);
	НаборЗаписей.Записать();
	
	Оповестить("ИзмененоОперативноеРаспределениеВозможныхРейсовПоРайонам");
	
	мсТаблицы = Новый Массив;
	мсТаблицы.Добавить("РегистрСведений.новаКалендарьВозможныхРейсов");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
КонецПроцедуры
					
Процедура ЗагрузитьРаспределение()
	НаборЗаписей = РегистрыСведений.новаОперативноеРаспределениеВозможныхРейсовПоРайонам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаПланирования.Установить(ДатаПланирования);
	НаборЗаписей.Отбор.СменаПланирования.Установить(СменаПланирования);
	НаборЗаписей.Прочитать();
	тзРаспределениеТранспортаПоРайонам = НаборЗаписей.Выгрузить();
	КонструкторДанных.ЗагрузитьВременнуюТаблицу("РаспределениеТранспортаПоРайонам", тзРаспределениеТранспортаПоРайонам);
КонецПроцедуры

тзРаспределениеТранспортаПоРайонам = Новый ТаблицаЗначений;
тзРаспределениеТранспортаПоРайонам.Колонки.Добавить("ДатаПланирования", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
тзРаспределениеТранспортаПоРайонам.Колонки.Добавить("СменаПланирования", Новый ОписаниеТипов("СправочникСсылка.новаСменыПланирования"));
тзРаспределениеТранспортаПоРайонам.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.новаТранспорт"));
тзРаспределениеТранспортаПоРайонам.Колонки.Добавить("Водитель", Новый ОписаниеТипов("СправочникСсылка.новаВодители"));
тзРаспределениеТранспортаПоРайонам.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
тзРаспределениеТранспортаПоРайонам.Колонки.Добавить("Район", Новый ОписаниеТипов("СправочникСсылка.новаГеоРайоны"));

Подбор = Ложь;
ОперативноеНазначениеРайонов = Ложь;
ГруппировкиПоКатегориям = Ложь;
РаспределениеИзменено = Ложь;

#КонецЕсли