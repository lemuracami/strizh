#Если Клиент Тогда

Перем КонструкторДанных Экспорт;
Перем ПараметрыЖурнала Экспорт;
Перем Журнал Экспорт;

Перем Архив Экспорт;

Перем ЖурналНачалоПериода, ЖурналКонецПериода;

Перем Результат;

Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если ДанныеСтроки.Группировка = NULL Тогда
		Если ДанныеСтроки.ДатаПросмотра = NULL Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(204, 255, 204);
		КонецЕсли;
	Иначе
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
КонецПроцедуры

Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
		
	ИначеЕсли Событие = "АктивизированаСтрока" Тогда
		
	ИначеЕсли Событие = "УстановленФильтр" Тогда
		Если Параметр1.Свойство("ДатаНачала") Тогда
			ЖурналНачалоПериода = Параметр1.ДатаНачала;
		КонецЕсли;
		Если Параметр1.Свойство("ДатаКонца") Тогда
			ЖурналКонецПериода = Параметр1.ДатаКонца;
		КонецЕсли;
		СформироватьОтбор();
		
	ИначеЕсли Событие = "ДобавленыДанныеВДерево" Тогда
		
	ИначеЕсли Событие = "Выбор" Тогда
		Параметр3 = Ложь;
		ОткрытьЗначение(Параметр1.Заявка);
		
	ИначеЕсли Событие = "НачатьПеретаскивание" Тогда
		
	ИначеЕсли Событие = "ПроверитьВозможностьПеретаскивания" Тогда
		Возврат Ложь;
		
	ИначеЕсли Событие = "ПеретаскиваниеОкончено" Тогда
		Возврат Истина;
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "СоздатьЗаявку" Тогда
			обЗаявка = Документы.новаЗаявкаВТехподдержку.СоздатьДокумент();
			ОткрытьЗначение(обЗаявка);
			
		ИначеЕсли Параметр1 = "ЗагрузитьСообщения" Тогда
			новаТехподдержка.ЗагрузитьСообщения(новаКонтекст);
		КонецЕсли;
		
	ИначеЕсли Событие = "ОкончаниеРедактирования" Тогда
		
	КонецЕсли;	
КонецФункции

Процедура СформироватьОтбор()
	КонструкторДанных.ДобавитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
	КонструкторДанных.ДобавитьПараметр("ЖурналКонецПериода", ЖурналКонецПериода);
	
	Если ЗначениеЗаполнено(ЖурналНачалоПериода) И ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И (Заявки.Дата МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода)";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналНачалоПериода) И Не ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И (Заявки.Дата >= &ЖурналНачалоПериода)";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналКонецПериода) И Не ЗначениеЗаполнено(ЖурналНачалоПериода) Тогда
		Отбор = " И (Заявки.Дата <= &ЖурналКонецПериода)";
		
	Иначе
		Отбор = "";
	КонецЕсли;
	
	КонструкторДанных.УстановитьПатч("{ОТБОР_ПО_ПЕРИОДУ}", Отбор);
КонецПроцедуры

Процедура Настроить()
	мсИнструменты = Новый Массив;
	ПараметрыЖурнала = Новый Структура("Инструменты", мсИнструменты);
	
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СоздатьЗаявку", БиблиотекаКартинок.ДобавитьЭлементСписка, "Создать заявку", "Создать заявку"));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ЗагрузитьСообщения", БиблиотекаКартинок.новаДействиеЗагрузка, "Загрузить сообщения", "Загрузить сообщения"));
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	
	Если Архив Тогда
		//КонструкторДанных.ТекстЗапроса = "
		//|БизнесПроцесс.новаЗаявкаНаВыполнениеРаботы КАК Заявки
		//|{СОЕДИНЕНИЯ}
		//|";
		//
		//КонструкторДанных.ПостояннаяВыборка = ",
		//|	Заявки.Ссылка КАК Заявка,
		//|	Заявки.Ссылка КАК Задача,
		//|	&ПустаяДата КАК ДатаПросмотра";
		//КонструкторДанных.ПостоянныйОтбор = "Завершен {ОТБОР_ПО_ПЕРИОДУ}";
		//
		//ПутьЗаявки = "Заявки";
	Иначе
		КонструкторДанных.ТекстЗапроса = "
		|Документ.новаЗаявкаВТехподдержку КАК Заявки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаПросмотрыЗаявок КАК ПросмотрЗаявок
		|ПО
		|	ПросмотрЗаявок.Заявка = Заявки.Ссылка
		| И ПросмотрЗаявок.Пользователь = &ТекущийПользователь
		|
		|";
		
		КонструкторДанных.ДобавитьПараметр("ТекущийПользователь", ПараметрыСеанса.новаТекущийПользователь);
		
		КонструкторДанных.ПостояннаяВыборка = ",
		|	Заявки.Ссылка КАК Заявка,
		|	ПросмотрЗаявок.ДатаПросмотра КАК ДатаПросмотра";
		
		КонструкторДанных.ПостоянныйОтбор = "Истина {ОТБОР_ПО_ПЕРИОДУ}";
				
		ПутьЗаявки = "Заявки";
	КонецЕсли;
		
	СформироватьОтбор();
	
	КонструкторДанных.ДобавитьПоле("Заявка");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьЗаявки + ".Ссылка");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьЗаявки + ".Дата");
	
	КонструкторДанных.ДобавитьПоле("Номер");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьЗаявки + ".Номер");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьЗаявки + ".Номер");
	
	КонструкторДанных.ДобавитьПоле("Дата",, "ДФ=dd.MM.yyyy");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьЗаявки + ".Дата");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьЗаявки + ".Дата");
	
	КонструкторДанных.ДобавитьПоле("Автор");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьЗаявки + ".Автор");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьЗаявки + ".Автор");
	
	КонструкторДанных.ДобавитьПоле("Тема");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьЗаявки + ".Тема");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьЗаявки + ".Тема");
	
	КонструкторДанных.ДобавитьПоле("Состояние");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьЗаявки + ".Состояние");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьЗаявки + ".Состояние");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьЗаявки + ".Состояние.Порядок");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Автор");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Состояние");
		
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Заявка"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

Архив = Ложь;

#КонецЕсли