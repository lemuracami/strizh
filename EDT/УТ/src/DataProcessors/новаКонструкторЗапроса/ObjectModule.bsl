#Если Клиент Тогда

// Основная часть запроса, описывающая входящие в запрос таблицы и соединения.
//
Перем ТекстЗапроса Экспорт; // <Строка>

// Строка, всегда добавляемая в запрос после выборки полей.
//
Перем ПостояннаяВыборка Экспорт; // <Строка>

// Строка, всегда добавляемая в отбор.
//
Перем ПостоянныйОтбор Экспорт; // <Строка>

// Таблица итогов.
//
Перем Итоги Экспорт; // <ТаблицаЗначений[ТаблицаИтогов]>

// Таблица полей запроса.
//
Перем тзПоля Экспорт; // <ТаблицаЗначений[ТаблицаПолей]>

// Таблица колонок запроса. Заполняется автоматически из текста запроса.
//
Перем Колонки Экспорт; // <ТаблицаЗначений[ТаблицаКолонок]>

// Таблица доступных группировок.
//
Перем ДоступныеГруппировки Экспорт; // <ТаблицаЗначений[ТаблицаДоступныхГруппировок]>

// Массив имен текущих группировок.
//
Перем Группировки Экспорт; // <Массив(<Строка>)>

// Поле, которое будет отображаться в колонке иерархии для детальной строки.
//
Перем ЯчейкаОтображенияДетальнойСтрокиВИерархии Экспорт; // <Строка>

// Коллекция ключей группировок.
//
Перем Ключи Экспорт; // <Соответствие(<Число>, <Структура>)>

// Простая настройка отбора на равенство указанных полей.
//
Перем Фильтр Экспорт; // <Структура>

// Массив имен выбранных показателей.
//
Перем ВыбранныеПоказатели Экспорт; // <Массив(<Строка>)>

// Таблица установленных отборов.
//
Перем УстановленныеОтборы Экспорт; // <ТаблицаЗначений[ТаблицаОтборов]>

// Таблица установленных сортировок.
//
Перем УстановленныеСортировки Экспорт; // <ТаблицаЗначений[ТаблицаСортировок]>

// Менеджер временных таблиц, используемый при выполнении запросов.
//
Перем МенеджерВременныхТаблиц Экспорт; // <МенеджерВременныхТаблиц>

// Объект, обрабатывающий данные запроса.
//
Перем ПостОбработчикДанных Экспорт; // <Объект>

// Коллекция имен всех таблиц, входящих в запрос. Заполняется автоматически.
//
Перем ТаблицыДанных Экспорт; // <Соответствие>

// Соответствие, сопоставляющее группировке массив видимых полей.
//
Перем ВидимостьПолей Экспорт; // <Соответствие(<Строка, NULL>, <Массив(<Строка>)>)>

// Если Истина, то в запросе рассчитываются общие итоги.
//
Перем РассчитыватьОбщиеИтоги Экспорт; // <Булево>

Перем соВедущиеПоля;
Перем соВременныеТаблицыЗапроса;
Перем тзОбразецПатчей;

Перем тзПараметры;
Перем соПатчи;
Перем соРеквизитыГруппировок;
Перем соВременныеТаблицы;

Перем СсылочныеТипы;

//Определяет содержит ли описание типов ссылочный тип
//
//  Параметры:
//    ОписаниеТипов - <ОписаниеТипов> исследуемое описание типов.
//
//  Возвращаемое значение:
//    <Булево> Истина - описание типов содержит ссылочные типы.
//
Функция ОписаниеТиповСодержитСсылочныеТипы(ОписаниеТипов) Экспорт
	
	Результат = Ложь;
	
	Для каждого СсылочныйТип Из СсылочныеТипы Цикл
		
		Для каждого ИсследуемыйТип Из ОписаниеТипов.Типы() Цикл
			
			Результат = СсылочныйТип.СодержитТип(ИсследуемыйТип);
			Если Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает таблицу колонок запроса по его тексту.
//
Процедура СформироватьКолонки() Экспорт
	Колонки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	мсПоля = Новый Массив;
	мсПоляПостОбработки = Новый Массив;
	
	Для Каждого стрПоле Из тзПоля Цикл
		Если стрПоле.ТипПостОбработки = Неопределено Тогда
			мсПоля.Добавить(стрПоле.Имя);
		Иначе
			мсПоляПостОбработки.Добавить(стрПоле);
		КонецЕсли;
	КонецЦикла;
		
	Запрос.Текст = ПолучитьТекстЗапроса(мсПоля, Новый Массив, Истина) + "
	|ГДЕ Ложь";
	
	Для Каждого стрПараметр Из тзПараметры Цикл
		Запрос.УстановитьПараметр(стрПараметр.Имя, стрПараметр.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	Для Каждого КолонкаЗапроса Из Результат.Колонки Цикл
		стрПоле = тзПоля.Найти(КолонкаЗапроса.Имя, "Имя");
		Если стрПоле = Неопределено Тогда Продолжить; КонецЕсли;
		
		Колонка = Колонки.Добавить();
		Колонка.Имя = КолонкаЗапроса.Имя;
		Колонка.Представление = стрПоле.Представление;
		Колонка.Формат = стрПоле.Формат;
		Колонка.ТипЗначения = КолонкаЗапроса.ТипЗначения;
		Колонка.ТипЗначенияБезNULL = Новый ОписаниеТипов(КолонкаЗапроса.ТипЗначения,, "NULL");
		Колонка.ОтображатьПредставление = ОписаниеТиповСодержитСсылочныеТипы(КолонкаЗапроса.ТипЗначения);
		Колонка.НеВходитВОтборИСортировку = стрПоле.НеВходитВОтборИСортировку;
	КонецЦикла;
	
	Для Каждого стрПоле Из мсПоляПостОбработки Цикл
		Колонка = Колонки.Добавить();
		Колонка.Имя = стрПоле.Имя;
		Колонка.Представление = стрПоле.Представление;
		Колонка.Формат = стрПоле.Формат;
		Колонка.ТипЗначения = стрПоле.ТипПостОбработки;
		Колонка.ТипЗначенияБезNULL = стрПоле.ТипПостОбработки;
		Колонка.НеВходитВОтборИСортировку = Истина;
		Колонка.ОтображатьПредставление = Ложь;
	КонецЦикла;
	
	Если ВидимостьПолей[NULL] = Неопределено Тогда
		ВидимостьПолей.Вставить(NULL, Колонки.ВыгрузитьКолонку("Имя"));
	КонецЕсли;
	
	ТекстТаблиц = Запрос.Текст;
	НайтиТаблицы(ТекстТаблиц, "Справочник");
	НайтиТаблицы(ТекстТаблиц, "Документ");
	НайтиТаблицы(ТекстТаблиц, "РегистрСведений");
	НайтиТаблицы(ТекстТаблиц, "БизнесПроцесс");
	НайтиТаблицы(ТекстТаблиц, "Задача");
КонецПроцедуры

Процедура НайтиТаблицы(ТекстЗапроса, ВидТаблицы)
	ПрефиксТаблицы = ВидТаблицы + ".";
	стрТекст = СтрЗаменить(ТекстЗапроса, Символы.ПС, " ");
	стрТекст = СтрЗаменить(стрТекст, Символы.Таб + ПрефиксТаблицы, Символы.ПС);
	стрТекст = СтрЗаменить(стрТекст, " " + ПрефиксТаблицы, Символы.ПС);
	стрТекст = СтрЗаменить(стрТекст, "," + ПрефиксТаблицы, Символы.ПС);
	
	КоличествоТаблиц = СтрЧислоСтрок(стрТекст);
	Для ъ = 2 По КоличествоТаблиц Цикл
		стрТаблица = СтрЗаменить(СтрПолучитьСтроку(стрТекст, ъ), ".", Символы.ПС);
		стрТаблица = СтрЗаменить(стрТаблица, Символы.Таб, Символы.ПС);
		стрТаблица = СтрЗаменить(стрТаблица, " ", Символы.ПС);
		стрТаблица = СтрЗаменить(стрТаблица, ",", Символы.ПС);
		Таблица = СтрПолучитьСтроку(стрТаблица, 1);
		Если Не ЗначениеЗаполнено(Таблица) Тогда Продолжить; КонецЕсли;
		
		ТаблицыДанных.Вставить(ПрефиксТаблицы + Таблица, Истина);
	КонецЦикла;
КонецПроцедуры

// Возвращает результат выполнения запроса с текущими настройками.
//
// Возвращаемое значение:
//  <ДеревоЗначений>
//
Функция ПолучитьДанные() Экспорт
	сзВрем = Новый СписокЗначений;
	сзВрем.ЗагрузитьЗначения(ВыбранныеПоказатели);
	мсПоказателиДанных = сзВрем.ВыгрузитьЗначения();
	
	Для Каждого Группировка Из Группировки Цикл
		мсПоказателиДанных.Добавить(Группировка);
		
		стрГруппировка = ДоступныеГруппировки.Найти(Группировка, "Имя");
		Если стрГруппировка.Реквизиты <> "" Тогда
			стрРеквизитыГруппировки = СтрЗаменить(стрГруппировка.Реквизиты, ",", Символы.ПС);
			КоличествоРеквизитов = СтрЧислоСтрок(стрРеквизитыГруппировки);
			Для ъ = 1 По КоличествоРеквизитов Цикл
				мсПоказателиДанных.Добавить(СокрЛП(СтрПолучитьСтроку(стрРеквизитыГруппировки, ъ)));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЯчейкаОтображенияДетальнойСтрокиВИерархии <> Неопределено Тогда
		мсПоказателиДанных.Добавить(ЯчейкаОтображенияДетальнойСтрокиВИерархии);
	КонецЕсли;
	
	СтрокаИтогов = СформироватьСтрокуИтогов(мсПоказателиДанных);
		
	Если Фильтр <> Неопределено Тогда
		ОтборыФильтра = новаОтборы.ПолучитьТаблицуОтборов();
		Для Каждого ЭлФильтра Из Фильтр Цикл
			ОтборФильтра = ОтборыФильтра.Добавить();
			ОтборФильтра.Отбор = ЭлФильтра.Ключ;
			ОтборФильтра.Использование = Истина;
			ОтборФильтра.ВидСравнения = ВидСравнения.Равно;
			ОтборФильтра.Значение = ЭлФильтра.Значение;
			
			УстановленныеОтборы.Добавить(ОтборФильтра);
		КонецЦикла;
	КонецЕсли;
	
	соОбластиОтборов = Новый Соответствие;
	мсПоказателиОтбора = Новый Массив;
	Для Каждого Отбор Из УстановленныеОтборы Цикл
		стрПоле = тзПоля.Найти(Отбор.Отбор, "Имя");
		Если стрПоле = Неопределено Тогда Продолжить; КонецЕсли;
		
		Для Каждого стрОтбор Из стрПоле.Отборы Цикл
			стОтборыОбласти = соОбластиОтборов[стрОтбор.Область];
			Если стОтборыОбласти = Неопределено Тогда
				стОтборыОбласти = Новый Структура("Отборы, Пути", Новый Массив, Новый Соответствие);
				соОбластиОтборов.Вставить(стрОтбор.Область, стОтборыОбласти);
			КонецЕсли;
			стОтборыОбласти.Отборы.Добавить(Отбор);
			стОтборыОбласти.Пути.Вставить(Отбор.Отбор, стрОтбор.Путь);
		КонецЦикла;
		
		мсПоказателиОтбора.Добавить(стрПоле.Имя);
	КонецЦикла;
	
	СтрокаСортировки = "";
	Для Каждого Сортировка Из УстановленныеСортировки Цикл
		стрПоле = тзПоля.Найти(Сортировка.Имя, "Имя");
		Если стрПоле = Неопределено Тогда Продолжить; КонецЕсли;
		Если ЗначениеЗаполнено(стрПоле.ПутьСортировки) Тогда
			ПутьСортировки = стрПоле.ПутьСортировки;
		Иначе
			стрОтбор = стрПоле.Отборы.Найти("{ОТБОР_ВЕРХНЕГО_УРОВНЯ}", "Область");
			Если стрОтбор = Неопределено Тогда Продолжить; КонецЕсли;
		
			ПутьСортировки = стрОтбор.Путь;
		КонецЕсли;
		
		СтрокаСортировки = СтрокаСортировки + "," + ПутьСортировки + " " + Сортировка.Направление;
	КонецЦикла;
	Если СтрокаСортировки <> "" Тогда
		СтрокаСортировки = "УПОРЯДОЧИТЬ ПО " + Прав(СтрокаСортировки, СтрДлина(СтрокаСортировки) - 1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Текст = ПолучитьТекстЗапроса(мсПоказателиДанных, мсПоказателиОтбора);
	
	стОбластьВерхнегоУровня = соОбластиОтборов["{ОТБОР_ВЕРХНЕГО_УРОВНЯ}"];
	соОбластиОтборов.Удалить(стОбластьВерхнегоУровня);
	
	Для Каждого ЭлОбласть Из соОбластиОтборов Цикл
		Если Лев(ЭлОбласть.Ключ, 2) = "{*" Тогда
			Префикс = " И ";
		Иначе
			Префикс = "";
		КонецЕсли;
		
		стЗапрос = новаОтборы.ПолучитьЗапросОтборов(ЭлОбласть.Значение.Отборы, ЭлОбласть.Значение.Пути, Префикс);
		
		Текст = СтрЗаменить(Текст, ЭлОбласть.Ключ, стЗапрос.Текст);
		Для Каждого ЭлПараметр Из стЗапрос.Параметры Цикл
			Запрос.УстановитьПараметр(ЭлПараметр.Ключ, ЭлПараметр.Значение);
		КонецЦикла;
	КонецЦикла;
	
	ТекстОтбораВерхнегоУровня = ПостоянныйОтбор;
	Если стОбластьВерхнегоУровня <> Неопределено Тогда
		стЗапрос = новаОтборы.ПолучитьЗапросОтборов(стОбластьВерхнегоУровня.Отборы, стОбластьВерхнегоУровня.Пути);
		Если ТекстОтбораВерхнегоУровня = "" Тогда
			ТекстОтбораВерхнегоУровня = стЗапрос.Текст;
		Иначе
			ТекстОтбораВерхнегоУровня = "(" + ТекстОтбораВерхнегоУровня + ") И (" + стЗапрос.Текст + ")";
		КонецЕсли;
		
		Для Каждого ЭлПараметр Из стЗапрос.Параметры Цикл
			Запрос.УстановитьПараметр(ЭлПараметр.Ключ, ЭлПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ТекстОтбораВерхнегоУровня <> "" Тогда
		ТекстОтбораВерхнегоУровня = "ГДЕ " + ТекстОтбораВерхнегоУровня;
	КонецЕсли;
	
	Запрос.Текст = Текст + "
	|" + ТекстОтбораВерхнегоУровня + "
	|" + СтрокаСортировки + "
	|" + СтрокаИтогов;
	
	Для Каждого ЭлПатч Из соПатчи Цикл
		Для Каждого стрЭлПатч Из ЭлПатч.Значение Цикл
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЭлПатч.Ключ, стрЭлПатч.Ключ);
			прервать;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого стрПараметр Из тзПараметры Цикл
		Запрос.УстановитьПараметр(стрПараметр.Имя, стрПараметр.Значение);
	КонецЦикла;
	
	дзДанные = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если соРеквизитыГруппировок.Количество() > 0 Тогда
		ЗаполнитьРеквизитыГруппировок(дзДанные.Строки);
	КонецЕсли;
	
	ПостОбработчикДанных.ПостОбработкаДанных(дзДанные);
	
	Возврат дзДанные;
КонецФункции

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
КонецПроцедуры

Функция ПолучитьТекстЗапроса(мсВыбранныеПоказатели, мсПоказателиОтбора, ФормированиеКолонок = Ложь)
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ NULL КАК Группировка
	|" + ПостояннаяВыборка + "
	|{ВЫБОРКА_ВЕРХНЕГО_УРОВНЯ}
	|ИЗ
	|" + ТекстЗапроса;
	
	соОбластиВыборок = Новый Соответствие;
	соОбластиГруппировок = Новый Соответствие;
	соОбластиПатчей = Новый Соответствие;
	мсПоказатели = Новый Массив;
	
	Для Каждого Показатель Из мсВыбранныеПоказатели Цикл
		Если мсПоказатели.Найти(Показатель) <> Неопределено Тогда Продолжить; КонецЕсли;
		мсПоказатели.Добавить(Показатель);
		мсВедущиеПоля = соВедущиеПоля[Показатель];
		Если мсВедущиеПоля <> Неопределено Тогда
			Для Каждого ВедущееПоле Из мсВедущиеПоля Цикл
				Если мсПоказатели.Найти(ВедущееПоле) <> Неопределено Тогда Продолжить; КонецЕсли;
				мсПоказатели.Добавить(ВедущееПоле);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлПоказатель Из мсПоказатели Цикл
		
		Показатель = ЭлПоказатель;		
		стрПоле = тзПоля.Найти(Показатель, "Имя");
		Если стрПоле = Неопределено Тогда Продолжить; КонецЕсли;
		стрКолонка = Колонки.Найти(Показатель, "Имя");
		
		Для Каждого стрВыборка Из стрПоле.Выборки Цикл
			Выборки = соОбластиВыборок[стрВыборка.Область];
			Если Выборки = Неопределено Тогда
				Выборки = Новый Массив;
				соОбластиВыборок.Вставить(стрВыборка.Область, Выборки);
			КонецЕсли;
			Выборки.Добавить(стрВыборка.Текст + " КАК " + стрВыборка.Псевдоним);
			
			Если стрКолонка <> Неопределено Тогда
				Если стрКолонка.ОтображатьПредставление Тогда
					Если стрВыборка.Область = "{ВЫБОРКА_ВЕРХНЕГО_УРОВНЯ}" Тогда
						Выборки.Добавить("Представление(" + стрВыборка.Текст + ") КАК " + стрВыборка.Псевдоним + "_Пред");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого стрГруппировка Из стрПоле.Группировки Цикл
			ГруппировкиПоля = соОбластиГруппировок[стрГруппировка.Область];
			Если ГруппировкиПоля = Неопределено Тогда
				ГруппировкиПоля = Новый Массив;
				соОбластиГруппировок.Вставить(стрГруппировка.Область, ГруппировкиПоля);
			КонецЕсли;
			ГруппировкиПоля.Добавить(стрГруппировка.Текст);
		КонецЦикла;
		
		Для Каждого стрПатч Из стрПоле.Патчи Цикл
			Патчи = соОбластиПатчей[стрПатч.Область];
			Если Патчи = Неопределено Тогда
				Патчи = Новый Соответствие;
				соОбластиПатчей.Вставить(стрПатч.Область, Патчи);
			КонецЕсли;
			Патчи.Вставить(стрПатч.Текст, 1000);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Показатель Из мсПоказателиОтбора Цикл
		Если мсВыбранныеПоказатели.Найти(Показатель) <> Неопределено Тогда Продолжить; КонецЕсли;
		стрПоле = тзПоля.Найти(Показатель, "Имя");
		Если стрПоле = Неопределено Тогда Продолжить; КонецЕсли;
		
		Для Каждого стрПатч Из стрПоле.Патчи Цикл
			Патчи = соОбластиПатчей[стрПатч.Область];
			Если Патчи = Неопределено Тогда
				Патчи = Новый Соответствие;
				соОбластиПатчей.Вставить(стрПатч.Область, Патчи);
			КонецЕсли;
			Патчи.Вставить(стрПатч.Текст, 1000);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлПатч Из соПатчи Цикл
		Патчи = соОбластиПатчей[ЭлПатч.Ключ];
		Если Патчи = Неопределено Тогда
			Патчи = Новый Соответствие;
			соОбластиПатчей.Вставить(ЭлПатч.Ключ, Патчи);
		КонецЕсли;
		Для Каждого ЭлТекст Из ЭлПатч.Значение Цикл
			Патчи.Вставить(ЭлТекст.Ключ, ЭлТекст.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлОбластьВыборки Из соОбластиВыборок Цикл
		ПервыйРазделитель = ?(Лев(ЭлОбластьВыборки.Ключ, 2) = "{*", "", ",");
		ТекстВыборки = "";
		Для Каждого Выборка Из ЭлОбластьВыборки.Значение Цикл
			ТекстВыборки = ТекстВыборки + ?(ТекстВыборки = "", ПервыйРазделитель, ",") + "
			|	" + Выборка;
		КонецЦикла;
		Текст = СтрЗаменить(Текст, ЭлОбластьВыборки.Ключ, ТекстВыборки);
	КонецЦикла;
	
	Для Каждого ЭлОбластьГруппировки Из соОбластиГруппировок Цикл
		Если Лев(ЭлОбластьГруппировки.Ключ, 8) = "{**ГРУПП" Тогда
			ПервыйРазделитель = "СГРУППИРОВАТЬ ПО ";
			
		ИначеЕсли Лев(ЭлОбластьГруппировки.Ключ, 2) = "{*" Тогда
			ПервыйРазделитель = "";
			
		Иначе
			ПервыйРазделитель = ",";
		КонецЕсли;
		
		ТекстГруппировки = "";
		Для Каждого ГруппировкаПоля Из ЭлОбластьГруппировки.Значение Цикл
			ТекстГруппировки = ТекстГруппировки + ?(ТекстГруппировки = "", ПервыйРазделитель, ",") + ГруппировкаПоля;
		КонецЦикла;
		Текст = СтрЗаменить(Текст, ЭлОбластьГруппировки.Ключ, ТекстГруппировки);
	КонецЦикла;
	
	Для Каждого ЭлОбластьПатчей Из соОбластиПатчей Цикл
		тзПатчи = тзОбразецПатчей.СкопироватьКолонки();
		Для Каждого ЭлПатч Из ЭлОбластьПатчей.Значение Цикл
			ЗаполнитьЗначенияСвойств(тзПатчи.Добавить(), ЭлПатч);
		КонецЦикла;
		тзПатчи.Сортировать("Значение ВОЗР");
		
		ТекстПатчей = "";
		Для Каждого стрПатч Из тзПатчи Цикл
			ТекстПатчей = ТекстПатчей + "
			|
			|" + стрПатч.Ключ;
		КонецЦикла;
		Текст = СтрЗаменить(Текст, ЭлОбластьПатчей.Ключ, ТекстПатчей);
	КонецЦикла;
	
	ТекстЗапросовВременныхТаблиц = "";
	Если ФормированиеКолонок Тогда
		Для Каждого ЭлВременнаяТаблица Из соВременныеТаблицыЗапроса Цикл
			ТекстЗапросовВременныхТаблиц = ТекстЗапросовВременныхТаблиц + "
			|" + ЭлВременнаяТаблица.Значение; 
		КонецЦикла;
	Иначе
		Для Каждого ЭлВременнаяТаблица Из соВременныеТаблицыЗапроса Цикл
			ТекстЗапросовВременныхТаблиц = ТекстЗапросовВременныхТаблиц + "
			|" + ЭлВременнаяТаблица.Ключ; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекстЗапросовВременныхТаблиц + Текст;
КонецФункции

// Добавляет описание поля запроса.
//
// Параметры:
//  Имя              <Строка>: имя поля.
//  Представление    <Строка>: представление поля.
//  Формат           <Строка>: форматная строка для вывода значений поля.
//  ТипПостОбработки <ОписаниеТипов>: если задан, то поле не включается в запрос, а создается и заполяется
//                                    программно на этапе пост-обработки.
//
Процедура ДобавитьПоле(Имя, Представление = Неопределено, Формат = "", ТипПостОбработки = Неопределено) Экспорт
	Если Представление = Неопределено Тогда
		ПредставлениеПоля = новаЖурналы.ПолучитьПредставлениеИзИмени(Имя);
	Иначе
		ПредставлениеПоля = Представление;
	КонецЕсли;
	
	стрПоле = тзПоля.Добавить();
	
	стрПоле.Имя = Имя;
	стрПоле.Представление = ПредставлениеПоля;
	стрПоле.Формат = Формат;
	стрПоле.ТипПостОбработки = ТипПостОбработки;
	
	стрПоле.Выборки = Новый ТаблицаЗначений;
	стрПоле.Выборки.Колонки.Добавить("Область");
	стрПоле.Выборки.Колонки.Добавить("Текст");
	стрПоле.Выборки.Колонки.Добавить("Псевдоним");
	
	стрПоле.Группировки = Новый ТаблицаЗначений;
	стрПоле.Группировки.Колонки.Добавить("Область");
	стрПоле.Группировки.Колонки.Добавить("Текст");
	
	стрПоле.Патчи = Новый ТаблицаЗначений;
	стрПоле.Патчи.Колонки.Добавить("Область");
	стрПоле.Патчи.Колонки.Добавить("Текст");
	
	стрПоле.Отборы = Новый ТаблицаЗначений;
	стрПоле.Отборы.Колонки.Добавить("Область");
	стрПоле.Отборы.Колонки.Добавить("Путь");
КонецПроцедуры

// Добавляет описание выборки к последнему добавленному полю.
//
// Параметры:
//  Область      <Строка>: имя области выборки. Если не указана, используется главная выборка.
//  ТекстВыборки <Строка>: выражение выборки.
//  Псевдоним    <Строка>: псевдоним поля.
//
Процедура ДобавитьВыборкуПоля(Область = Неопределено, ТекстВыборки = Неопределено, Псевдоним = Неопределено) Экспорт
	стрПоле = тзПоля[тзПоля.Количество() - 1];
	стрВыборка = стрПоле.Выборки.Добавить();
	стрВыборка.Область = "{" + ?(Область = Неопределено, "ВЫБОРКА_ВЕРХНЕГО_УРОВНЯ", Область) + "}";
	стрВыборка.Текст = ?(ТекстВыборки = Неопределено, стрПоле.Имя, ТекстВыборки);
	стрВыборка.Псевдоним = ?(Псевдоним = Неопределено, стрПоле.Имя, Псевдоним);
КонецПроцедуры

// Добавляет к последнему добавленному полю выражение выборки в область группировки.
//
// Параметры:
//  Область      <Строка>: имя области группировки.
//  ТекстВыборки <Строка>
//
Процедура ДобавитьГруппировкуПоля(Область, ТекстВыборки = Неопределено) Экспорт
	стрПоле = тзПоля[тзПоля.Количество() - 1];
	стрГруппировка = стрПоле.Группировки.Добавить();
	стрГруппировка.Область = "{" + Область + "}";
	стрГруппировка.Текст = ?(ТекстВыборки = Неопределено, стрПоле.Имя, ТекстВыборки);
КонецПроцедуры

// Добавляет к последнему добавленному полю патч запроса.
//
// Параметры:
//  Область    <Строка>: имя области.
//  ТекстПатча <Строка>: текст патча. Если поле выбрано в запроса, имя области заменяется на текст патча.
//
Процедура ДобавитьПатчПоля(Область, ТекстПатча) Экспорт
	стрПоле = тзПоля[тзПоля.Количество() - 1];
	стрПатч = стрПоле.Патчи.Добавить();
	стрПатч.Область = "{" + Область + "}";
	стрПатч.Текст = ТекстПатча;
КонецПроцедуры

// Отключает возможность установки отбора и сортировки у последнего добавленного поля.
//
Процедура ИсключитьПолеИзОтбораИСортировки() Экспорт
	стрПоле = тзПоля[тзПоля.Количество() - 1];
	стрПоле.НеВходитВОтборИСортировку = Истина;
КонецПроцедуры

// Определяет, как накладывать отбор на последнее добавленное поле в определенной области.
//
// Параметры:
//  Область <Строка>: имя области. Если не указано, используется главный отбор запроса.
//  Путь    <Строка>: выражение запроса, на которое накладывается условие.
//
Процедура ДобавитьОтборПоля(Область = Неопределено, Путь = Неопределено) Экспорт
	стрПоле = тзПоля[тзПоля.Количество() - 1];
	стрОтбор = стрПоле.Отборы.Добавить();
	стрОтбор.Область = "{" + ?(Область = Неопределено, "ОТБОР_ВЕРХНЕГО_УРОВНЯ", Область) + "}";
	стрОтбор.Путь = ?(Путь = Неопределено, стрПоле.Имя, Путь);
КонецПроцедуры

// Определяет, как сортировать последнее добавленное поле.
//
// Параметры:
//  ПутьСортировки <Строка>: выражение запроса, по которому сортируется поле.
//
Процедура ДобавитьСортировкуПоля(ПутьСортировки) Экспорт
	стрПоле = тзПоля[тзПоля.Количество() - 1];
	стрПоле.ПутьСортировки = ПутьСортировки;
КонецПроцедуры

// Сбрасывает все ранее добавленные группировки.
//
Процедура ОчиститьГруппировки() Экспорт
	ъ = Группировки.Количество() - 1;
	Пока ъ >= 0 Цикл
		Ключи.Удалить(ъ);
		ъ = ъ - 1;
	КонецЦикла;
	
	Группировки.Очистить();
	соРеквизитыГруппировок.Очистить();
КонецПроцедуры

// Добавляет группировку по полю.
//
// Параметры:
//  ИмяПоля <Строка>
//
Процедура ДобавитьГруппировку(ИмяПоля) Экспорт
	Ключи.Вставить(Группировки.Количество(), Новый Структура(ИмяПоля));
	
	стрГруппировка = ДоступныеГруппировки.Найти(ИмяПоля, "Имя");
	соРеквизитыГруппировок.Вставить(Группировки.Количество(), стрГруппировка.Реквизиты);
	
	Группировки.Добавить(ИмяПоля);
КонецПроцедуры

// Описывает свойства группировки по полю; группировать можно только по ранее описанным группировкам.
//
// Параметры:
//  ИмяПоля                         <Строка>
//  РеквизитыГруппировки            <Строка>: перечисление через запятую имен полей, которые копируются из
//                                            детальной строки.
//  ИсключаемыеРеквизитыГруппировки <Строка>: перечисление через запятую имен полей, которые исключаются из группировки.
//  ЕстьИерархия                    <Булево>: итоги по группировке собираются с использованием иерархии.
//
Процедура ДобавитьДоступнуюГруппировку(ИмяПоля, РеквизитыГруппировки = "", ИсключаемыеРеквизитыГруппировки = "", ЕстьИерархия = Ложь) Экспорт
	стрГруппировка = ДоступныеГруппировки.Добавить();
	стрГруппировка.Имя = ИмяПоля;
	стрГруппировка.Реквизиты = РеквизитыГруппировки;
	стрГруппировка.ИсключаемыеРеквизиты = ИсключаемыеРеквизитыГруппировки;
	стрГруппировка.ЕстьИерархия = ЕстьИерархия;
КонецПроцедуры

// Добавляет итог в запрос.
//
// Параметры:
//  Имя               <Строка>: имя поля итога.
//  АгрегатнаяФункция <Строка>
//  Постоянный        <Булево>: если Истина, то итог будет вычисляться независимо от выбранности поля.
//  Выражение         <Строка>: выражение запроса, по которому будет вычислятся итог.
//
Процедура ДобавитьИтог(Имя, АгрегатнаяФункция = Неопределено, Постоянный = Ложь, Выражение = Неопределено) Экспорт
	стрИтог = Итоги.Добавить();
	стрИтог.Имя = Имя;
	стрИтог.Функция = ?(АгрегатнаяФункция = Неопределено, "СУММА", АгрегатнаяФункция);
	стрИтог.Постоянный = Постоянный;
	стрИтог.Выражение = Выражение;
КонецПроцедуры

Функция СформироватьСтрокуИтогов(ВыбранныеПоказатели)
	Если РассчитыватьОбщиеИтоги Тогда
		КонтрольныеТочки = "ОБЩИЕ";
	Иначе
		КонтрольныеТочки = "";	
	КонецЕсли;
	
	Для Каждого Группировка Из Группировки Цикл
		КонтрольныеТочки = КонтрольныеТочки + ?(КонтрольныеТочки = "", "", ", ") + Группировка;
		
		стрДоступнаяГруппировка = ДоступныеГруппировки.Найти(Группировка, "Имя");
		Если стрДоступнаяГруппировка.ЕстьИерархия Тогда
			КонтрольныеТочки = КонтрольныеТочки + " ИЕРАРХИЯ";
		КонецЕсли;
	КонецЦикла;
	
	ъ = Группировки.Количество() - 1;
	Если ъ >= 0 Тогда
		ПоказателиИтогов = "ВЫБОР ";
		Пока ъ >= 0 Цикл
			Группировка = Группировки[ъ];
			ПоказателиИтогов = ПоказателиИтогов + "КОГДА НЕ " + Группировка + " ЕСТЬ NULL ТОГДА " + СтрЗаменить(Строка(ъ), Символы.НПП, "") + Символы.ПС;
			ъ = ъ - 1;
		КонецЦикла;
		ПоказателиИтогов = ПоказателиИтогов + "КОНЕЦ КАК Группировка";
	Иначе
		ПоказателиИтогов = "NULL КАК Группировка";
	КонецЕсли;
	
	Для Каждого стрИтог Из Итоги Цикл
		Если Не стрИтог.Постоянный Тогда
			Если ВыбранныеПоказатели.Найти(стрИтог.Имя) = Неопределено Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		Если стрИтог.Выражение = Неопределено Тогда
			ПоказателиИтогов = ПоказателиИтогов + ", " + стрИтог.Функция + "(" + стрИтог.Имя + ")";
		Иначе
			ПоказателиИтогов = ПоказателиИтогов + ", " + стрИтог.Выражение ;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КонтрольныеТочки = "" Тогда Возврат ""; КонецЕсли;
	
	Возврат "ИТОГИ " + ПоказателиИтогов + " ПО " + КонтрольныеТочки;
КонецФункции

Функция ЗаполнитьРеквизитыГруппировок(Строки)
	Для Каждого Строка Из Строки Цикл
		СтрокаРеквизитов = ЗаполнитьРеквизитыГруппировок(Строка.Строки);
		
		Если Строка.Группировка = NULL Тогда Возврат Строка; КонецЕсли;
		
		РеквизитыГруппировки = соРеквизитыГруппировок[Строка.Группировка];
		Если РеквизитыГруппировки = Неопределено Тогда Продолжить; КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Строка, СтрокаРеквизитов, РеквизитыГруппировки);
	КонецЦикла;
	
	Возврат СтрокаРеквизитов;
КонецФункции

// Добавляет в запрос параметр со значением.
//
// Параметры:
//  Имя      <Строка>
//  Значение <ПроизвольноеЗначение>
//
Процедура ДобавитьПараметр(Имя, Значение) Экспорт
	стрПараметр = тзПараметры.Найти(Имя, "Имя");
	Если стрПараметр = Неопределено Тогда
		стрПараметр = тзПараметры.Добавить();
		стрПараметр.Имя = Имя;
	КонецЕсли;
	
	стрПараметр.Значение = Значение;
КонецПроцедуры

// Удаляет все ранее добавленные патчи для заданной области.
//
// Параметры:
//  Область <Строка>
//
Процедура УдалитьПатчи(Область) Экспорт
	Патчи = соПатчи[Область];
	Если Патчи <> Неопределено Тогда
		соПатчи.Удалить(Область);
	КонецЕсли;
КонецПроцедуры

// Добавляет патч для заданной области.
//
// Параметры:
//  Область <Строка>
//  Текст   <Строка>: текст патча.
//  Порядок <Число>: порядковый номер патча.
//
Процедура УстановитьПатч(Область, Текст, Порядок = 0) Экспорт
	Патчи = соПатчи[Область];
	Если Патчи = Неопределено Тогда
		Патчи = Новый Соответствие;
		соПатчи.Вставить(Область, Патчи);
	КонецЕсли;
	Патчи.Вставить(Текст, Порядок);
КонецПроцедуры

// Добавляет к последнему добавленному полю патч.
//
// Параметры:
//  Имя     <Строка>: имя поля.
//  Область <Строка>: область патча.
//  Текст   <Строка>: текст патча.
//
Процедура УстановитьПатчПоля(Имя, Область, Текст) Экспорт
	стрПоле = тзПоля.Найти(Имя, "Имя");
	Если стрПоле = Неопределено Тогда
		ВызватьИсключение "Поле " + Имя + " не найдено!";
	КонецЕсли;
	ОбластьЗапроса = "{" + Область + "}";
	стрПатч = стрПоле.Патчи.Найти(ОбластьЗапроса, "Область");
	Если стрПатч = Неопределено Тогда
		стрПатч = стрПоле.Патчи.Добавить();
		стрПатч.Область = ОбластьЗапроса;
	КонецЕсли;
	стрПатч.Текст = Текст;
КонецПроцедуры

// Устанавливает для заданной группировки список отображаемых полей.
//
// Параметры:
//  Группировка <Строка>
//  ВидимыеПоля <Строка>: имена полей через запятую.
//
Процедура УстановитьВидимостьПолей(Группировка, ВидимыеПоля) Экспорт
	мсПоля = Новый Массив;
	стрПоля = СтрЗаменить(ВидимыеПоля, ",", Символы.ПС);
	КоличествоПолей = СтрЧислоСтрок(стрПоля);
	Для ъ = 1 По КоличествоПолей Цикл
		мсПоля.Добавить(СокрЛП(СтрПолучитьСтроку(стрПоля, ъ)));
	КонецЦикла;
	
	ВидимостьПолей.Вставить(Группировка, мсПоля);
КонецПроцедуры

// Создает или перезаписывает временную таблицу.
//
// Параметры:
//  Имя    <Строка>: имя таблицы.
//  Данные <ТаблицаЗначений>: таблица.
//
Процедура ЗагрузитьВременнуюТаблицу(Имя, Данные) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Данные = Неопределено Тогда
		Если соВременныеТаблицы[Имя] = Истина Тогда
			Запрос.Текст = "УНИЧТОЖИТЬ  " + Имя;
			Запрос.Выполнить();
			соВременныеТаблицы.Удалить(Имя);
		КонецЕсли;
	Иначе
		Если соВременныеТаблицы[Имя] = Истина Тогда
			Запрос.Текст = "УНИЧТОЖИТЬ  " + Имя + ";";
		Иначе
			соВременныеТаблицы.Вставить(Имя, Истина);
			Запрос.Текст = "";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ * ПОМЕСТИТЬ " + Имя + " ИЗ &Данные КАК Данные";
		Запрос.УстановитьПараметр("Данные", Данные);
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// Возвращает таблицу текущих отборов.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьТаблицуОтборов() Экспорт
	тзОтборы = новаОтчеты.ПолучитьТаблицуОтборов();
	
	Для Каждого стрКолонка Из Колонки Цикл
		Если стрКолонка.НеВходитВОтборИСортировку Тогда Продолжить; КонецЕсли;
		Если тзОтборы.Найти(стрКолонка.Имя, "Отбор") <> Неопределено Тогда Продолжить; КонецЕсли;
		
		стрОтборОтчета = тзОтборы.Добавить();
		стрОтборОтчета.Отбор = стрКолонка.Имя;
		стрОтборОтчета.Представление = стрКолонка.Представление;
		стрОтборОтчета.ТипЗначения = стрКолонка.ТипЗначенияБезNULL;
	КонецЦикла;
	
	Возврат тзОтборы;
КонецФункции

// Возвращает таблицу текущих группировок.
//
// Параметры:
//  ПоказательДетальнойСтрокиИерархии <Строка>: поле, выводимое в колонке иерархии для детальной строки.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаГруппировок]>
//
Функция ПолучитьТаблицуГруппировок(ПоказательДетальнойСтрокиИерархии) Экспорт
	тзГруппировки = новаОтчеты.ПолучитьТаблицуГруппировок();	
	
	Для Каждого стрДоступнаяГруппировка Из ДоступныеГруппировки Цикл
		стрПоле = тзПоля.Найти(стрДоступнаяГруппировка.Имя, "Имя");
		
		стрГруппировка = тзГруппировки.Добавить();
		стрГруппировка.Группировка = стрДоступнаяГруппировка.Имя;
		стрГруппировка.Представление = стрПоле.Представление;
		стрГруппировка.Показатели.Добавить(стрДоступнаяГруппировка.Имя);
		Если ПоказательДетальнойСтрокиИерархии <> Неопределено Тогда
			стрГруппировка.Показатели.Добавить(ПоказательДетальнойСтрокиИерархии);
		КонецЕсли;
	КонецЦикла;
	
	Возврат тзГруппировки;
КонецФункции

// Возвращает таблицу текущих сортировок.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьТаблицуСортировок() Экспорт
	тзСортировки = новаОтчеты.ПолучитьТаблицуСортировок();
		
	Для Каждого стрКолонка Из Колонки Цикл
		Если стрКолонка.НеВходитВОтборИСортировку Тогда Продолжить; КонецЕсли;
		Если тзСортировки.Найти(стрКолонка.Имя, "Сортировка") <> Неопределено Тогда Продолжить; КонецЕсли;
		
		стрСортировка = тзСортировки.Добавить();
		стрСортировка.Сортировка = стрКолонка.Имя;
		стрСортировка.Представление = стрКолонка.Представление;
		стрСортировка.Направление = "ВОЗР";
	КонецЦикла;
	
	Возврат тзСортировки;
КонецФункции

// Возвращает таблицу текущих показателей.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПоказателей]>
//
Функция ПолучитьТаблицуПоказателей() Экспорт
	тзПоказатели = новаОтчеты.ПолучитьТаблицуПоказателей();
	
	Для Каждого стрКолонка Из Колонки Цикл
		стрПоказатель = тзПоказатели.Добавить();
		стрПоказатель.Показатель = стрКолонка.Имя;
		стрПоказатель.Представление = стрКолонка.Представление;
	КонецЦикла;
	
	Возврат тзПоказатели;
КонецФункции

// Возвращает таблицу текущих итогов.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаИтогов]>
//
Функция ПолучитьТаблицуИтогов() Экспорт
	тзИтоги = новаОтчеты.ПолучитьТаблицуИтогов();
	Для Каждого Группировка Из Группировки Цикл
		стрПоле = тзПоля.Найти(Группировка, "Имя");
		
		стрИтог = тзИтоги.Добавить();
		стрИтог.Поле = Группировка;
		стрИтог.Псевдоним = Группировка;
		стрИтог.Представление = стрПоле.Представление;
		
		стрГруппировка = ДоступныеГруппировки.Найти(Группировка, "Имя");
		стрИтог.Иерархия = стрГруппировка.ЕстьИерархия;
	КонецЦикла;
		
	Возврат тзИтоги;	
КонецФункции

// Устанавливает настройки по параметрам формирования отчета.
//
// Параметры:
//  ПараметрыФормирования <Структура[ПараметрыФормированияОтчета]>
//
Процедура ПрименитьПараметрыФормированияОтчета(ПараметрыФормирования) Экспорт
	Если ПараметрыФормирования.Свойство("НаДату") Тогда
		ДобавитьПараметр("НаДату", ПараметрыФормирования.НаДату);
	КонецЕсли;
	
	Если ПараметрыФормирования.Свойство("НачалоПериода") Тогда
		ДобавитьПараметр("НачалоПериода", НачалоДня(ПараметрыФормирования.НачалоПериода));
	КонецЕсли;
	
	Если ПараметрыФормирования.Свойство("КонецПериода") Тогда
		ДобавитьПараметр("КонецПериода", КонецДня(ПараметрыФормирования.КонецПериода));
	КонецЕсли;
	
	ОчиститьГруппировки();
	Для Каждого Группировка Из ПараметрыФормирования.Группировки Цикл
		ДобавитьГруппировку(Группировка);
	КонецЦикла;
	
	ВыбранныеПоказатели = Новый Массив;
	Для Каждого Показатель Из ПараметрыФормирования.Показатели Цикл
		ВыбранныеПоказатели.Добавить(Показатель);
	КонецЦикла;
	
	УстановленныеОтборы = ПараметрыФормирования.Отборы.НайтиСтроки(Новый Структура("Использование", Истина));
	
	УстановленныеСортировки = Новый ТаблицаЗначений;
	УстановленныеСортировки.Колонки.Добавить("Имя");
	УстановленныеСортировки.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	УстановленныеСортировки.Колонки.Добавить("Представление");
	УстановленныеСортировки.Колонки.Добавить("Направление");
	Для Каждого стрСортировка Из ПараметрыФормирования.Сортировки Цикл
		стрУстСортировка = УстановленныеСортировки.Добавить();
		стрУстСортировка.Имя = стрСортировка.Сортировка;
		стрУстСортировка.Использование = Истина;
		стрУстСортировка.Направление = стрСортировка.Направление;
		
		стрПоле = тзПоля.Найти(стрУстСортировка.Имя, "Имя");
		стрУстСортировка.Представление = стрПоле.Представление;
		Если ВыбранныеПоказатели.Найти(стрУстСортировка.Имя) = Неопределено Тогда
			ВыбранныеПоказатели.Добавить(стрУстСортировка.Имя)
		КонецЕсли; 
	КонецЦикла;
	
	РассчитыватьОбщиеИтоги = Ложь;
КонецПроцедуры

// Добавляет к последнему добавленному полю поле, которое будет добавляться в выборку автоматически.
//
// Параметры:
//  Имя <Строка>: имя поля.
//
Процедура ДобавитьВедущееПоле(Имя) Экспорт
	ТекущееПоле = тзПоля[тзПоля.Количество() - 1].Имя;
	мсВедущиеПоля = соВедущиеПоля[ТекущееПоле];
	Если мсВедущиеПоля = Неопределено Тогда
		мсВедущиеПоля = Новый Массив;
		соВедущиеПоля.Вставить(ТекущееПоле, мсВедущиеПоля);
	КонецЕсли;
	мсВедущиеПоля.Добавить(Имя);
КонецПроцедуры

// Добавляет текст пакетного запроса.
//
// Параметры:
//  ТекстЗапроса        <Строка>: пакетный запрос, используемый при получении данных.
//  ТекстЗапросаКолонок <Строка>: пакетный запрос, не возвращающий данных, используемый при получении типов колонок.
//
Процедура ДобавитьВременнуюТаблицу(ТекстЗапроса, ТекстЗапросаКолонок) Экспорт
	соВременныеТаблицыЗапроса.Вставить(ТекстЗапроса, ТекстЗапросаКолонок);
КонецПроцедуры

ПостояннаяВыборка = "";
ПостоянныйОтбор = "";

тзПоля = Новый ТаблицаЗначений;
тзПоля.Колонки.Добавить("Имя");
тзПоля.Колонки.Добавить("Представление");
тзПоля.Колонки.Добавить("Формат", Новый ОписаниеТипов("Строка"));
тзПоля.Колонки.Добавить("Выборки");
тзПоля.Колонки.Добавить("Группировки");
тзПоля.Колонки.Добавить("Патчи");
тзПоля.Колонки.Добавить("Отборы");
тзПоля.Колонки.Добавить("ПутьСортировки");
тзПоля.Колонки.Добавить("ТипПостОбработки");
тзПоля.Колонки.Добавить("НеВходитВОтборИСортировку", Новый ОписаниеТипов("Булево"));
тзПоля.Индексы.Добавить("Имя");

Колонки = Новый ТаблицаЗначений;
Колонки.Колонки.Добавить("Имя");
Колонки.Колонки.Добавить("Представление");
Колонки.Колонки.Добавить("ТипЗначения");
Колонки.Колонки.Добавить("ТипЗначенияБезNULL");
Колонки.Колонки.Добавить("ОтображатьПредставление", Новый ОписаниеТипов("Булево"));
Колонки.Колонки.Добавить("Формат", Новый ОписаниеТипов("Строка"));
Колонки.Колонки.Добавить("НеВходитВОтборИСортировку", Новый ОписаниеТипов("Булево"));
Колонки.Индексы.Добавить("Имя");

Группировки = Новый Массив;

ДоступныеГруппировки = Новый ТаблицаЗначений;
ДоступныеГруппировки.Колонки.Добавить("Имя");
ДоступныеГруппировки.Колонки.Добавить("Реквизиты");
ДоступныеГруппировки.Колонки.Добавить("ИсключаемыеРеквизиты");
ДоступныеГруппировки.Колонки.Добавить("ЕстьИерархия", Новый ОписаниеТипов("Булево"));

Показатели = Новый ТаблицаЗначений;
Показатели.Колонки.Добавить("Имя");

Отборы = Новый ТаблицаЗначений;
Отборы.Колонки.Добавить("Имя");
Отборы.Колонки.Добавить("Представление");
Отборы.Колонки.Добавить("ТипЗначения");
Отборы.Колонки.Добавить("ДоступныеВидыСравнений");

Итоги = Новый ТаблицаЗначений;
Итоги.Колонки.Добавить("Имя");
Итоги.Колонки.Добавить("Функция");
Итоги.Колонки.Добавить("Постоянный", Новый ОписаниеТипов("Булево"));
Итоги.Колонки.Добавить("Выражение");

Ключи = Новый Соответствие;

тзПараметры = Новый ТаблицаЗначений;
тзПараметры.Колонки.Добавить("Имя");
тзПараметры.Колонки.Добавить("Значение");
соРеквизитыГруппировок = Новый Соответствие;

МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
ПостОбработчикДанных = ЭтотОбъект;
ТаблицыДанных = Новый Соответствие;
соПатчи = Новый Соответствие;
ВидимостьПолей = Новый Соответствие;
соВременныеТаблицы = Новый Соответствие;
РассчитыватьОбщиеИтоги = Истина;

соВедущиеПоля = Новый Соответствие;
соВременныеТаблицыЗапроса = Новый Соответствие;

тзОбразецПатчей = Новый ТаблицаЗначений;
тзОбразецПатчей.Колонки.Добавить("Ключ");
тзОбразецПатчей.Колонки.Добавить("Значение");		

СсылочныеТипы = Новый Массив;
СсылочныеТипы.Добавить(Справочники.ТипВсеСсылки());
СсылочныеТипы.Добавить(Документы.ТипВсеСсылки());
СсылочныеТипы.Добавить(ПланыВидовХарактеристик.ТипВсеСсылки());
СсылочныеТипы.Добавить(ПланыСчетов.ТипВсеСсылки());
СсылочныеТипы.Добавить(ПланыВидовРасчета.ТипВсеСсылки());
СсылочныеТипы.Добавить(БизнесПроцессы.ТипВсеСсылки());
СсылочныеТипы.Добавить(Задачи.ТипВсеСсылки());

#КонецЕсли