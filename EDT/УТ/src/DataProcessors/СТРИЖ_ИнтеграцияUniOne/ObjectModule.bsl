//ОБЩИЕ НАСТРОЙКИ

//Возвращает структуру
Функция ПолучитьДанныеПодключения() Экспорт

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ApiKey", "665wmc9ttddherurcm5tpppztoaesi5q765d49fo");
	СтруктураПараметров.Вставить("UserID", "4354723");
	//СтруктураПараметров.Вставить("Server", "eu1.unione.io");
	СтруктураПараметров.Вставить("Server", "go2.unisender.ru");
	СтруктураПараметров.Вставить("Отправитель", "noreply2@strizh-logistic.ru"); 
	СтруктураПараметров.Вставить("ИмяОтправителя", "СТРИЖ");
	
	Возврат СтруктураПараметров;
	
КонецФункции // ()

//ПРОТОКОЛ SMTP

//Возвращает Истина или Ложь
Функция ОтправитьEMAIL_SMTP(СписокПолучателей = Неопределено, ТемаС = Неопределено, Знач ТекстС = Неопределено, ФайлС = Неопределено, ИмяОтправителя = "Рассылка", ОбратныйАдрес = "noreply2@strizh-logistic.ru", ТипТекста = Неопределено, Сообщение = "", ТекстОшибки = "", ТипРассылки = Неопределено, ДополнитьАдреса = Истина, ТекстыПисьма = Неопределено) Экспорт
	
	Если ДополнитьАдреса Тогда 
		Если ТипРассылки <> Неопределено Тогда
			Если ТипЗнч(ТипРассылки) = Тип("Массив") Тогда
				Для Сч = 0 По ТипРассылки.Количество() - 1 Цикл
					ДополнитьМассивАдресов(СписокПолучателей, ТипРассылки[Сч]);
				КонецЦикла;	
			Иначе	
				ДополнитьМассивАдресов(СписокПолучателей, ТипРассылки);
			КонецеСли;
		КонецеСли;
	Иначе 
		//СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru"); 
		//СписокПолучателей.Добавить("aleksandr.mihushkin@strizh-logistic.ru"); 
	КонецЕсли;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		ТемаС = СтрокаСоединенияИнформационнойБазы()  + ". " + ТемаС;
		
		СписокПолучателейСтрока = "Список получателей: ";
		
		Для Каждого Тек Из СписокПолучателей Цикл
			
			СписокПолучателейСтрока = СписокПолучателейСтрока + ",  " + Тек; 
			
		КонецЦикла;
		
		СписокПолучателей.Очистить();
		СписокПолучателей = ОбщегоНазначенияПривелигированный.ПолучитьМылоАдминов();
				
		Если ТипТекста = Неопределено Или ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст  Тогда
			ТекстС = СписокПолучателейСтрока + Символы.ПС + ТекстС;
		Иначе
			ТемаС = ТемаС + " " + СписокПолучателейСтрока;
		КонецеСли;		
		
	КонецЕсли;	
	
	СтруктураПараметров = ПолучитьДанныеПодключения();
	
	ПочтаПрофиль = Новый ИнтернетПочтовыйПрофиль;
	ПочтаПрофиль.АдресСервераSMTP = "smtp."+СтруктураПараметров.Server;
	ПочтаПрофиль.ПортSMTP = 465;
	ПочтаПрофиль.ИспользоватьSSLSMTP = Истина;
	ПочтаПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	ПочтаПрофиль.ПользовательSMTP = СтруктураПараметров.UserID;
	ПочтаПрофиль.ПарольSMTP = СтруктураПараметров.ApiKey;
	
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(ПочтаПрофиль);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки; 
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.ИмяОтправителя = ИмяОтправителя;
	Сообщение.Отправитель = ОбратныйАдрес; 
	Сообщение.Тема = ТемаС;
		
	Сообщение.Тексты.Добавить(ТекстС, ТипТекстаПочтовогоСообщения.HTML);
	
	// в рамках 3307
	Если ТекстыПисьма <> Неопределено Тогда
		Сообщение.Тексты.Очистить();
		Для Каждого СтрокаТекст Из ТекстыПисьма Цикл
			Сообщение.Тексты.Добавить(СтрокаТекст.Текст, СтрокаТекст.ТипТекста);
		КонецЦикла;	
	КонецЕсли;	
	// в рамках 3307
	
	Если ФайлС <> Неопределено Тогда
		
		Если ТипЗнч(ФайлС) = Тип("Строка") Тогда
			
			Сообщение.Вложения.Добавить(ФайлС);
			
		ИначеЕсли ТипЗнч(ФайлС) = Тип("Массив") Тогда
			
			Для Каждого Тек Из ФайлС Цикл
				Сообщение.Вложения.Добавить(Тек);
			КонецЦикла;	
			
		КонецеСли;	
		
	КонецеСли;	
			
	Для Каждого Тек Из СписокПолучателей Цикл
		Сообщение.Получатели.Добавить(СокрЛП(Тек));
	КонецЦикла;
	
	Попытка
		Почта.Послать(Сообщение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь
	КонецПопытки;
			
	Почта.Отключиться();
	
	Возврат Истина;
	
КонецФункции // ()

//ПРОТОКОЛ HTTP

//Возвращает Истина или Ложь
//Геннадий 24.06.2021 #4609
//Добавлен параметр ДобавлятьДопИнформацию - управляет необходимостью добавлять в текст письма фразу "письмо сформировано автоматически"
//Добавлен параметр ShopID. Переписка Re:Лореаль, отправка сообщений от 12.11.2021. Доработка для рассылки Лореалю
Функция ОтправитьEMAIL_HTTP(СписокПолучателей = Неопределено, ТемаС = Неопределено, Знач ТекстС = Неопределено, ФайлС = Неопределено, ИмяОтправителя = "Рассылка", ОбратныйАдрес = "noreply2@strizh-logistic.ru", ТипТекста = Неопределено, Сообщение = "", ТекстОшибки = "", ТипРассылки = Неопределено, ДополнитьАдреса = Истина, ТекстыПисьма = Неопределено, ДобавлятьДопИнформацию = Истина, ShopID = "", ВидОтчета = Неопределено) Экспорт

	//Геннадий 12.11.2021 ++
	//Если СокрЛП(ShopID) = "Shop_680" Или СокрЛП(ShopID) = "Shop_618" Тогда
	//	Если ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетОНеобеспеченныхЗаказахКомитентам ИЛИ
	//		ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоОтказамПереносам Тогда
	//		Отпр = lem.ОтправитьСообщение(СписокПолучателей, ТемаС, ТекстС, ФайлС, ИмяОтправителя,,ТипТекста,,ТекстОшибки,ТипРассылки,Ложь);		
	//		//детализация = lem.ОтправитьСообщение(СписокПолучателей, "Детализация по "+Комитент+" за "+Формат(ДатаВозникновенияЗадолженности,"ДФ=dd.MM.yyyy"), "Отчет", ИмяВрФайла, "Компания ""Стриж""",,,,Ошибка);
	//		Возврат Отпр;
	//	КонецЕсли;
	//КонецЕсли;
	//Геннадий 12.11.2021 --
	
	Если ДополнитьАдреса Тогда 
		Если ТипРассылки <> Неопределено Тогда
			Если ТипЗнч(ТипРассылки) = Тип("Массив") Тогда
				Для Сч = 0 По ТипРассылки.Количество() - 1 Цикл
					ДополнитьМассивАдресов(СписокПолучателей, ТипРассылки[Сч]);
				КонецЦикла;	
			Иначе	
				ДополнитьМассивАдресов(СписокПолучателей, ТипРассылки);
			КонецеСли;
		КонецеСли;
	Иначе 
		//СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru"); 
		//СписокПолучателей.Добавить("aleksandr.mihushkin@strizh-logistic.ru"); 
	КонецЕсли;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		ТемаС = СтрокаСоединенияИнформационнойБазы()  + ". " + ТемаС;
		
		СписокПолучателейСтрока = "Список получателей: ";
		
		Для Каждого Тек Из СписокПолучателей Цикл
			
			СписокПолучателейСтрока = СписокПолучателейСтрока + ",  " + Тек; 
			
		КонецЦикла;
		
		СписокПолучателей.Очистить();
		СписокПолучателей = ОбщегоНазначенияПривелигированный.ПолучитьМылоАдминов();
				
		Если ТипТекста = Неопределено Или ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст  Тогда
			ТекстС = СписокПолучателейСтрока + Символы.ПС + ТекстС;
		Иначе
			ТемаС = ТемаС + " " + СписокПолучателейСтрока;
		КонецеСли;		
		
	КонецЕсли;	
	
	//ТекстС = СтрЗаменить(ТекстС, Символы.ПС, "<br>");
	
	//Геннадий 19.01.2021 ->
	Если ДобавлятьДопИнформацию Тогда
		ТекстС = "<b>Это письмо сформировано автоматически. Пожалуйста, не отвечайте на него.</b><br><br>" + ТекстС;
	КонецЕсли;
	//Геннадий <-
	
	СтруктураПараметров = ПолучитьДанныеПодключения();
		
	СтруктураJSON = новый Структура; 
	СтруктураJSON.Вставить("api_key", СтруктураПараметров.ApiKey); 
	
	//message 
	message = Новый Соответствие; 
	message.Вставить("template_engine", "simple"); 
	//Геннадий 21.12.2021 ++
	//по результатам переписки с ТП unione
	//message.Вставить("template_id", ""); // Если параметр не передавать, будет взято значение по умолчанию “simple” 		
	//Геннадий 21.12.2021 --
	
	global_substitutions = Новый Соответствие; // Объект для передачи глобальных подстановок (например, название компании). Если названия переменных повторяются в объекте пользовательских подстановок substitutions, значения переменных будут взяты из объекта substitutions
	global_substitutions.Вставить("someVar", "some val"); 
	message.Вставить("global_substitutions", global_substitutions);
	
	body = Новый Соответствие; // Объект, содержит в себе html и plaintext части письма. (Обязателен, если не передается template_id.)
	
	//Геннадий 19.01.2021 ->
	//body.Вставить("html", ?(ТекстС <> "", ТекстС, "Письмо сформировано автоматически!")); 
	//body.Вставить("plaintext", ?(ТекстС <> "", ТекстС, "Письмо сформировано автоматически!"));
	body.Вставить("html", ?(ТекстС <> "", ТекстС, "<br><b>Это письмо сформировано автоматически. Пожалуйста, не отвечайте на него.</b>")); 
	body.Вставить("plaintext", ?(ТекстС <> "", ТекстС, "<br><b>Это письмо сформировано автоматически. Пожалуйста, не отвечайте на него.</b>"));
	//Геннадий <-
	
	message.Вставить("body", body);
	
	message.Вставить("subject", ТемаС); 
	message.Вставить("from_email", ОбратныйАдрес); 
	message.Вставить("from_name", ИмяОтправителя); 
	message.Вставить("reply_to" , ОбратныйАдрес); 
	message.Вставить("track_links", "0"); 
	message.Вставить("track_read", "0");                                                                                                                                                                                  		
	
	// за один раз можно отправить 500 сообщений!
	recipientsМассив = Новый Массив; // Массив объектов, содержит адреса получателей и объект с переменными для замены и их значениями
		
	Для Каждого Тек Из СписокПолучателей Цикл
		
		recipientsСоответствие = Новый Соответствие; // Объект для передачи метаданных в формате: “Ключ”: “Значение”.			
		recipientsСоответствие.Вставить("email", СокрЛП(Тек));    
		
		//substitutions = Новый Соответствие; // Объект, описывающий подстановки для конкретного пользователя (например, имя пользователя, товар для показа именно данному пользователю - см.velocity)
		//substitutions.Вставить("substitutionName","substitutionVal");
		//substitutions.Вставить("to_name",ткСтрМасс.Наименование);
		//recipientsСоответствие.Вставить("substitutions",substitutions); 
		
		//metadata1 = Новый Соответствие; // Объект для передачи метаданных в формате: “Ключ”: “Значение”.
		//metadata1.Вставить("key1","val1");			
		//recipientsСоответствие.Вставить("metadata",metadata1);   		
		
		recipientsМассив.Добавить(recipientsСоответствие);
		
	КонецЦикла;  						
	
	message.Вставить("recipients",recipientsМассив);
		
	metadatamessage = Новый Соответствие; // Объект для передачи метаданных в формате: “Ключ”: “Значение”.
	metadatamessage.Вставить("key1", "val1");			
	message.Вставить("metadata", metadatamessage); 
		
	headers = Новый Соответствие; // Объект, содержащий заголовки email письма
	headers.Вставить("X-ReplyTo", "val1"); // Пример заголовка, который может быть передан в письме.		  		
	message.Вставить("headers", headers);	
	
	Если ФайлС <> Неопределено Тогда
		
		attachmentsМассив = Новый Массив; // Массив объектов, содержит прикрепленные файлы
		
		Если ТипЗнч(ФайлС) = Тип("Строка") Тогда
			
			attachments = Получить_attachments(ФайлС);
			attachmentsМассив.Добавить(attachments);
			
		ИначеЕсли ТипЗнч(ФайлС) = Тип("Массив") Тогда
			
			Для Каждого Тек Из ФайлС Цикл
				attachments = Получить_attachments(Тек);
				attachmentsМассив.Добавить(attachments);
			КонецЦикла;	
			
		КонецеСли;	
				
		message.Вставить("attachments", attachmentsМассив);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("message", message);	
		
	Настройка = Новый НастройкиСериализацииJSON; 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON); 
	СтрокаJSON = ЗаписьJSON.Закрыть(); 
		
	ЗапросHTTP = Новый HTTPЗапрос("/ru/transactional/api/v1/email/send.json");  
	ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаJSON,КодировкаТекста.UTF8); 
	ЗапросHTTP.Заголовки.Вставить("Host", СтруктураПараметров.Server);
	ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");	
	
	СоединениеSSL = Новый ЗащищенноеСоединениеOpenSSL; 
	
	СоединениеHTTP = Новый HTTPСоединение(СтруктураПараметров.Server,,,,,,СоединениеSSL); 
	
	Попытка
		Результат = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		
		ТекстОтвета = Результат.ПолучитьТелоКакСтроку("UTF-8");		
		//Геннадий 18.01.2021 ->
		ТекстОшибки = ТекстОтвета;
		Если Найти(НРег(ТекстОтвета), "success") > 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		//ЧтениеJSON = Новый ЧтениеJSON; 
		//ЧтениеJSON.УстановитьСтроку(ТекстОтвета); 
		//СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON); 
		//ЧтениеJSON.Закрыть(); 
		//Если НРег(СтруктураОтвета.status) = "error" Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		//Сообщить(СтруктураОтвета.status);		
		//Геннадий 18.01.2021 <-
		
	Исключение
		
		СтрокаЗапроса = СтрокаJSON;		
		ТекстОшибки = ОписаниеОшибки() + Символы.ПС + ТекстОтвета;
		
		Возврат Ложь;
		
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции // ()
 
Функция Получить_attachments(ПутьКФайлу)

	ФайлДанных = Новый Файл(ПутьКФайлу);
	
	attachments = Новый Соответствие; // Массив, с помощью которого передаются вложения. Содержит параметры type, name, content, описывающие данный массив
	ФайлДвоичныхДанных = Новый ДвоичныеДанные(ПутьКФайлу);
	attachments.Вставить("content", ""+Base64Строка(ФайлДвоичныхДанных)+"");
	attachments.Вставить("name", ФайлДанных.Имя);
	
	Если НРег(ФайлДанных.Расширение) = ".xls"
		ИЛИ НРег(ФайлДанных.Расширение) = ".xlsx" Тогда
		attachments.Вставить("type", "application/excel"); //MIME
	КонецЕсли; 
	
	//attachments.Вставить("type", "image/png");
	
	Возврат attachments;

КонецФункции // ()
 
Процедура ДополнитьМассивАдресов(Мас, ТипРассылки)
	//Если ТипРассылки = Перечисления.ТипыРассылки.ЛогистическаяРассылка Тогда
	//	Мас.Добавить("logist@strizh-logistic.ru");
	//ИначеЕсли ТипРассылки = Перечисления.ТипыРассылки.СкладскаяРассылка Тогда
	//	Мас.Добавить("sklad@strizh-logistic.ru");
	//	Мас.Добавить("tovaroved@strizh-logistic.ru");
	//КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПостоянныеАдресаВРассылках.Почта
	|ИЗ
	|	РегистрСведений.ПостоянныеАдресаВРассылках КАК ПостоянныеАдресаВРассылках
	|ГДЕ
	|	ПостоянныеАдресаВРассылках.Рассылка = &Рассылка";
	Зап.УстановитьПараметр("Рассылка", ТипРассылки);
	Рез = Зап.Выполнить().Выгрузить();
	Для Каждого Тек Из Рез Цикл
		Если Мас.Найти(Тек.Почта) = Неопределено Тогда
			Мас.Добавить(Тек.Почта);
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	
