#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Адрес, по которому отображаются районы.
//
Перем Адрес Экспорт; // <СправочникСсылка.новаАдреса>

// Широта точки, по которой отображаются районы.
//
Перем Широта Экспорт; // <Число>

// Долгота точки, по которой отображаются районы.
//
Перем Долгота Экспорт; // <Число>

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	Адрес = Неопределено;
	Широта = Неопределено;
	Долгота = Неопределено;
	
КонецПроцедуры

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
		
	ИначеЕсли Событие = "Выбор" Тогда
		Параметр3 = Ложь;
		ОткрытьЗначение(Параметр1.Район);
		
	ИначеЕсли Событие = "НачалоИзменения" Тогда
		Если Параметр2 = "Район" Тогда
			Если НЕ Параметр1.УказанВручную Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "ОкончаниеРедактирования" Тогда
		Если Параметр1.УказанВручную Тогда
			Если Параметр1.Район = Параметр1.АвтоРайон Тогда
				Параметр1.Район = Справочники.новаГеоРайоны.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Параметр1.Район = Параметр1.АвтоРайон;
		КонецЕсли;
		
	ИначеЕсли Событие = "ДобавленыДанныеВДерево" Тогда
		Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Группировка", NULL), Истина);
		Для Каждого Строка Из Строки Цикл
			Если Не Строка.УказанВручную Тогда
				Строка.Район = Строка.АвтоРайон;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();
	КонецЕсли;	
КонецФункции

Процедура Настроить()
	ПараметрыЖурнала = Новый Структура;
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	
	НастроитьИсточникАвтоРайонов();
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ
	|	Классификаторы.Ссылка КАК Классификатор,
	|	ЕСТЬNULL(РайоныУказанныеВручную.Район, АвтоРайоны.Район) КАК Район,
	|	АвтоРайоны.Район КАК АвтоРайон,
	|	ВЫБОР КОГДА РайоныУказанныеВручную.Район ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК УказанВручную
	|ИЗ
	|	Справочник.новаКлассификаторРайонов КАК Классификаторы
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	({АВТОРАЙОНЫ}) КАК АвтоРайоны
	|ПО
	|	АвтоРайоны.Классификатор = Классификаторы.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|       Классификатор,
	|		Район
	|	ИЗ
	|   	РегистрСведений.новаРайоныАдресов
	|	ГДЕ
	|		Адрес = &Адрес И УказанВручную
	|	) КАК РайоныУказанныеВручную
	|ПО
	|	РайоныУказанныеВручную.Классификатор = Классификаторы.Ссылка
	|
	|ГДЕ
	|	НЕ Классификаторы.ПометкаУдаления
	|) КАК Районы
	|";
		
	КонструкторДанных.ПостояннаяВыборка = ",
	|	Районы.Классификатор КАК Классификатор,
	|	Представление(Районы.Классификатор) КАК Классификатор_Пред,
	|	Районы.Район КАК Район,
	|	Представление(Районы.Район) КАК Район_Пред,
	|	Районы.АвтоРайон КАК АвтоРайон,
	|	Представление(Районы.АвтоРайон) КАК АвтоРайон_Пред,
	|	Районы.УказанВручную КАК УказанВручную";
	
	КонструкторДанных.ДобавитьПоле("Классификатор");
	КонструкторДанных.ДобавитьПоле("Район");
	КонструкторДанных.ДобавитьПоле("УказанВручную");
	
	КонструкторДанных.ДобавитьПараметр("Адрес", Адрес);
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Классификатор"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

Процедура НастроитьИсточникАвтоРайонов()
	КонструкторДанных.ЗагрузитьВременнуюТаблицу("РайоныКоординат", новаКарты.РассчитатьГеоРайоныАдресов(, Широта, Долгота));
	
	КонструкторДанных.УстановитьПатч("{АВТОРАЙОНЫ}", "ВЫБРАТЬ
	|	Классификатор,
	|	Район
	|ИЗ
	|	РайоныКоординат");
КонецПроцедуры

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
	Если дзДанные.Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Строки = дзДанные.Строки[0].Строки.НайтиСтроки(Новый Структура("Группировка", NULL), Истина);
	Для Каждого Строка Из Строки Цикл
		Если Не Строка.УказанВручную Тогда
			Строка.Район = Строка.АвтоРайон;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Устанавливает новые координаты точки и обновляет содержимое журнала.
//
// Параметры:
//  новШирота  <Число>
//  новДолгота <Число>
//
Процедура УстановитьКоординаты(новШирота, новДолгота) Экспорт
	Широта = новШирота;
	Долгота = новДолгота;
	НастроитьИсточникАвтоРайонов();
	Журнал.Обновить();
КонецПроцедуры

// Записывает установленное вручную соответствие адреса и района в ИБ.
//
Процедура ЗаписатьРайоны() Экспорт
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Группировка", ЭтотОбъект, NULL), Истина);
	НаборЗаписей = РегистрыСведений.новаРайоныАдресов.СоздатьНаборЗаписей();
	Для Каждого Строка Из Строки Цикл
		НаборЗаписей.Отбор.Классификатор.Установить(Строка.Классификатор);
		НаборЗаписей.Отбор.Адрес.Установить(Адрес);
		НаборЗаписей.Очистить();
		
		Если Строка.УказанВручную И ЗначениеЗаполнено(Строка.Район) Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.Адрес = Адрес;
			НаборЗаписей.Записать();
		Иначе
			Если ЗначениеЗаполнено(Строка.АвтоРайон) Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Строка);
				Запись.Район = Строка.АвтоРайон;
				Запись.Адрес = Адрес;
				Запись.УказанВручную = Ложь;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Адрес = Неопределено;

#КонецЕсли