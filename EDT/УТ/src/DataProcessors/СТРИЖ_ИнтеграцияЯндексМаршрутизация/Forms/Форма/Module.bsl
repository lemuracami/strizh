/////////////////////СОБЫТИЯ ФОРМЫ/////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	Конфигурация = ОбработкаОбъект.ОпределитьКонфигурацию();		
	//Настройки = ЯМ_РаботаСНастройками.ПолучитьНастройкиМодуля();
	ПолучитьНастройкиНаСервере();
	//ЗаполнитьТранспортныеСредстваНаСервере();
	//
	//Если Параметры.Свойство("idПланирования") И ЗначениеЗаполнено(Параметры.idПланирования) Тогда 
	//	
	//	idПланирования = Параметры.idПланирования;
	//	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Страница4;
	//	
	//КонецЕсли;
	
	ДатаПланирования = НачалоДня(ТекущаяДата()) + 86400;
	
КонецПроцедуры

/////////////////////КОМАНДЫ ФОРМЫ/////////////////////////
&НаКлиенте
Процедура ЗаполнитьСписок(Команда)
	
	//ДанныеЗаказов.Очистить();
	ЗаполнитьСписокНаСервере();
	//ЗаполнитьТранспортныеСредстваНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНаСервере()
	
	//ДанныеЗаказов = ЯМ_МаршрутизацияСервер.ЗаполнитьСписокЗаказов(НастройкаПериода.ДатаНачала, НастройкаПериода.ДатаОкончания, СкладОтгрузки);
	//Для Каждого ДанныеЗаказа Из ДанныеЗаказов Цикл
	//	НоваяСтрока = Объект.ДанныеЗаказов.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаказа);
	//КонецЦикла;
	//ЗаполнитьЗначенияПоУмолчанию();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
		|	РеализацияТоваровУслуг.Контрагент.Представление КАК НаименованиеПолучателя,
		//|	РеализацияТоваровУслуг.АдресДоставки КАК АдресПолучателя,
		|	isnull(новаМестнаяДоставка.Адрес, РеализацияТоваровУслуг.АдресДоставки) КАК АдресПолучателя,
		|	РеализацияТоваровУслуг.ОбщийВес КАК ВесБрутто,
		|	РеализацияТоваровУслуг.КоличествоМест КАК КоличествоМест,
		|	isnull(новаМестнаяДоставка.ВремяПрибытияС, НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ)) КАК ВременноеОкноС,
		|	isnull(новаМестнаяДоставка.ВремяПрибытияПо, КОНЕЦПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ)) КАК ВременноеОкноПо,
		|	0 КАК Глубина,
		|	0 КАК Высота,
		|	isnull(новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта, 0) КАК Широта,
		|	isnull(новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота, 0) КАК Долгота
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|		ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен
		|	И (РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаПланирования));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаПланирования));
	Запрос.УстановитьПараметр("ТерминалДоставки", СкладОтгрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаказов.Загрузить(РезультатЗапроса.Выгрузить());
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	НоваяСтрока = ДанныеЗаказов.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	//КонецЦикла;	
	
	ЗаполнитьЗначенияПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
		
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ДанныеЗаказовТЗ = ДанныеЗаказов.Выгрузить();
		
		Для каждого ЭлементНастроек из Настройки Цикл
						
			Попытка
				ДанныеЗаказовТЗ.ЗаполнитьЗначения(ЭлементНастроек.Значение, ЭлементНастроек.Ключ);
			Исключение
			КонецПопытки;				
		КонецЦикла; 	
		
		ДанныеЗаказов.Загрузить(ДанныеЗаказовТЗ);
	ИначеЕсли Настройки = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнены настройки!";
		Сообщение.Сообщить(); 
	КонецЕсли; 
			
	//Для Каждого ДанныеЗаказа из Объект.ДанныеЗаказов Цикл 
	//	Если ЗначениеЗаполнено(ДанныеЗаказа.ШтрафыДляЗаказов) Тогда 
	//		СтруктураШтрафов = ЯМ_МаршрутизацияСервер.СформироватьСтруктуруШтрафов(ДанныеЗаказа.ШтрафыДляЗаказов);
	//		ДанныеЗаказа.ШтрафыЗаМинуту						= СтруктураШтрафов.out_of_time.minute;
	//		ДанныеЗаказа.ШтрафыЗаФактНарушенияОкнаДоставки 	= СтруктураШтрафов.out_of_time.fixed;
	//		ДанныеЗаказа.ШтрафыЗаНедоставку					= СтруктураШтрафов.drop;
	//	КонецЕсли;
	//КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек", ЭтаФорма);
	ОткрытьФорму("Обработка.СТРИЖ_ИнтеграцияЯндексМаршрутизация.Форма.ФормаНастроек",,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(Результат, ДопПараметры) Экспорт

	ПолучитьНастройкиНаСервере();		

КонецПроцедуры // ()

&НаСервере
Процедура ПолучитьНастройкиНаСервере()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	Настройки = ОбработкаОбъект.ПолучитьНастройкиМодуля();
	Попытка
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);	
	Исключение
	КонецПопытки; 
	
КонецПроцедуры // ()
 
&НаКлиенте
Процедура ГеокодироватьАдреса(Команда)
	
	Для Каждого СтрокаДанные Из ДанныеЗаказов Цикл 
		
		Текст = "";
		
		Если ЗначениеЗаполнено(СокрЛП(СтрокаДанные.АдресПолучателя)) И (НЕ ЗначениеЗаполнено(СтрокаДанные.Широта) И НЕ ЗначениеЗаполнено(СтрокаДанные.Долгота)) Тогда 
			ДанныеСклада = ПолучитьДанныеСкладаНаСервере();
			Если ДанныеСклада <> Неопределено Тогда 
				Настройки.Вставить("ШиротаСклада", ДанныеСклада.point.lat);
				Настройки.Вставить("ДолготаСклада", ДанныеСклада.point.lon);
			КонецЕсли;
			СтруктураКоординат = ГеокодироватьАдрес(СтрокаДанные.АдресПолучателя, Настройки);
			ЗаполнитьЗначенияСвойств(СтрокаДанные, СтруктураКоординат);
			
			Если СтруктураКоординат.ТочностьГеокодирования = 2 Тогда 
				Текст = "Точность геокодирования этого адреса средняя, найден адрес <<" + СтруктураКоординат.АдресПоКоординатам + ">>. Для точной маршрутизации адрес рекомендуется уточнить и повторить геокодирование";
			ИначеЕсли СтруктураКоординат.ТочностьГеокодирования = 1 Тогда
				Текст = "Точность геокодирования этого адреса низкая, найден адрес <<" + СтруктураКоординат.АдресПоКоординатам + ">>. Для точной маршрутизации эти адреса рекомендуется уточнить и повторить геокодирование"
			ИначеЕсли СтруктураКоординат.ТочностьГеокодирования = 9 Тогда
				Текст = "Не удалось выполнить геокодирование для указанного адреса! Проверьте корректность заполнения поля Адрес получателя!"
			Иначе	
				Текст = "";
			КонецЕсли;
			
			Если НЕ Текст = "" Тогда 
				//Индекс = Объект.ДанныеЗаказов.Индекс(СтрокаДанные);
				Индекс = ДанныеЗаказов.Индекс(СтрокаДанные);
	            Сообщить = Новый СообщениеПользователю;
	            Сообщить.Текст = Текст;
	            Сообщить.Поле = "Объект.ДанныеЗаказов["+Индекс+"].АдресПолучателя";
	            Сообщить.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ГеокодироватьАдрес(АдресДляГеокодирования, Настройки) Экспорт 

	СтруктураКоординаты = Новый Структура("Долгота, Широта, ТочностьГеокодирования");
	
	Если (НЕ Настройки.Свойство("ДолготаСклада") ИЛИ Настройки.ДолготаСклада = 0)
		ИЛИ (НЕ Настройки.Свойство("ШиротаСклада") ИЛИ Настройки.ШиротаСклада = 0) Тогда 
		Возврат СтруктураКоординаты;	
	ИначеЕсли (НЕ Настройки.Свойство("ОбластьПоискаДолгота") ИЛИ Настройки.ОбластьПоискаДолгота = 0)
		И (НЕ Настройки.Свойство("ОбластьПоискаШирота") ИЛИ Настройки.ОбластьПоискаШирота = 0) Тогда
		Возврат СтруктураКоординаты;	
	КонецЕсли;
	
	// параметры подключения
	Ключ = Настройки.КлючAPI_Геокодирование;
	Сервер = Настройки.АдресСервисаГеокодирование;
	
	//Сервер = "geocode-maps.yandex.ru";
	ссл = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,ссл);
	
	ЗапросКлюч = "?apikey=" + Ключ;
	ЗапросФормат = "&format=json";
	ЗапросКоличествоРезультатов = "&results=1";
	ЗапросАдрес = "&geocode=" + АдресДляГеокодирования;
	ЗапросОбласть = "&bbox=" + СтрЗаменить(Строка(Настройки.ДолготаСклада - Настройки.ОбластьПоискаДолгота/2),",",".") + "," + СтрЗаменить(Строка(Настройки.ШиротаСклада - Настройки.ОбластьПоискаШирота/2),",",".") 
		+ "~" + СтрЗаменить(Строка(Настройки.ДолготаСклада + Настройки.ОбластьПоискаДолгота/2),",",".") + "," + СтрЗаменить(Строка(Настройки.ШиротаСклада + Настройки.ОбластьПоискаШирота/2),",",".");
	
	Запрос = Новый HTTPЗапрос("/1.x/" + ЗапросКлюч + ЗапросФормат + ЗапросКоличествоРезультатов + ЗапросАдрес + ЗапросОбласть);
	
	Ответ = Соединение.Получить(Запрос);
	ОбработатьКодСостоянияОтвета(Ответ.КодСостояния);
	
	Если Ответ.КодСостояния < 300 Тогда 
		Чтение = Новый ЧтениеJSON;
		ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
		Чтение.УстановитьСтроку(ОтветСтрокой);
		Результат = ПрочитатьJSON(Чтение);
			
		Если Результат.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found = "0" Тогда
			
			СтруктураКоординаты.Вставить("ТочностьГеокодирования", 9);
			СтруктураКоординаты.Вставить("АдресПоКоординатам", "");
			
		Иначе 
			
			НеобходимыУточненияАдресов = Ложь;
			Для Каждого НайденныйОбъект Из Результат.response.GeoObjectCollection.featureMember Цикл 
				МассивКоординат = СтрРазделить(НайденныйОбъект.GeoObject.Point.pos, " ");
				СтруктураКоординаты.Долгота = МассивКоординат[0];
				СтруктураКоординаты.Широта = МассивКоординат[1];
				ТочностьГеокодирования = 3;
				Если НайденныйОбъект.GeoObject.metaDataProperty.GeocoderMetaData.precision = "near" ИЛИ НайденныйОбъект.GeoObject.metaDataProperty.GeocoderMetaData.precision = "street" Тогда 
					ТочностьГеокодирования = 2;
				ИначеЕсли НайденныйОбъект.GeoObject.metaDataProperty.GeocoderMetaData.precision = "other" Тогда 
					ТочностьГеокодирования = 1;
				КонецЕсли;
				Если ТочностьГеокодирования < 3 Тогда 
					НеобходимыУточненияАдресов = Истина;
				КонецЕсли;
				СтруктураКоординаты.Вставить("АдресПоКоординатам", НайденныйОбъект.GeoObject.metaDataProperty.GeocoderMetaData.text);
				СтруктураКоординаты.Вставить("ТочностьГеокодирования", ТочностьГеокодирования);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураКоординаты;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКодСостоянияОтвета(КодСостояния) Экспорт 
	
	Текст = "";
	
	// Ошибки 4XX говорят о неправильном запросе - в широком смысле
	// Может быть неправильный адрес, ошибка аутентификации, плохой формат запроса
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4
	Если КодСостояния >= 400 и КодСостояния < 500  Тогда
		Текст = "Код статуса больше 4XX, ошибка запроса.  Код статуса: " + КодСостояния;
	КонецЕсли;
	
	// Ошибки 5XX говорят о проблемах на сервере (возможно, прокси-сервер)
	// Это может быть программная ошибка, нехватка памяти, ошибка конфигурации и т.д.
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5
	Если КодСостояния >= 500 и КодСостояния < 600  Тогда
		Текст = "Код статуса больше 5XX, ошибка сервера. Код статуса: " + КодСостояния;
	КонецЕсли;
	
	// Обрабатываем перенаправление
	Если КодСостояния >= 300 и КодСостояния < 400  Тогда
		Текст = "Код статуса больше 3XX, Перенаправление. Код статуса: " + КодСостояния;
		Если КодСостояния = 302 Тогда
			Текст = "Код статуса 302, Постоянное перенаправление";
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ Текст = "" Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСкладаНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектОбработка.ПолучитьДанныеСклада(СкладОтгрузки);
		
КонецФункции

&НаКлиенте
Процедура ОтправитьЗапросНаМаршрутизацию(Команда)
	
	Если ДанныеЗаказов.Количество() = 0 Тогда 
		
		ПоказатьПредупреждение(,"В списке нет ни одного заказа, отправка запроса невозможна!");
		Возврат;
		
	КонецЕсли;
	
	Результат = ВыполнитьЗапросНаМаршрутизацию();
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗапросНаМаршрутизацию()
	
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	Для Каждого СтрокаТЧ Из ДанныеЗаказов Цикл 
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Широта) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Долгота) Тогда 
			Сообщить("Перед отправкой запроса широта и долгота всех точек доставки должны быть заполнены!
			| -Координаты можно заполнить вручную в таблице документов непосредственно перед отправкой запроса
			| -Координаты могут быть сгенерированы случайным образом при заполнении таблицы документов на основании координат склада. 
			|Для этого раскомментируйте код генерации в методе заполнения таблицы
			| -Координаты могут быть получены с помощью геокодера или сохранены в учетной системе");
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	Соединение = Новый HTTPСоединение(Настройки.АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);	
						
	// опции запроса / options
	Опции = Новый Структура();
	Опции.Вставить("routing_mode", "driving");
	Опции.Вставить("time_zone", ПолучитьЧасовойПоясСеанса());
	Опции.Вставить("date", Формат(ДатаПланирования, "ДФ=yyyy-MM-dd"));
	Опции.Вставить("quality", "normal");
	
	ДанныеДляЗапроса = ПолучитьДанныеДляЗапроса(СкладОтгрузки);		
	
	Для Каждого Опция Из ДанныеДляЗапроса.ДопОпции Цикл 
		Опции.Вставить(Опция.Имя, Опция.Значение);
	КонецЦикла;
	
	// параметры подключения
	Ключ = Настройки.КлючAPI_ЯндексМаршрутизация;
	Адрес = Настройки.АдресОтправкиЗапроса + Ключ;

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	Запрос.Заголовки.Вставить("User-Agent",		"Yandex Routing 1C module_v3");
	
	// формирование запроса
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтрокаJSON = Новый Структура("options, depot, vehicles, locations", Опции, ДанныеДляЗапроса.Склады, ДанныеДляЗапроса.Машины, ДанныеДляЗапроса.ТочкиДоставки);
	ЗаписатьJSON(ЗаписьJSON, СтрокаJSON);
	ТекстТелаЗапроса = СтрЗаменить(ЗаписьJSON.Закрыть(),"\\","\");
	Запрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса);

	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + " 
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
		Возврат Ложь;
		
	Иначе
		
		Если КодСостояния >= 500 Тогда 
			
			ЗаписатьДанныеЗапросаНаСервере(КодСостояния, , "");
			
		Иначе
			
			Чтение = Новый ЧтениеJSON;
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
			Чтение.УстановитьСтроку(ОтветСтрокой);
			Результат = ПрочитатьJSON(Чтение);
			
			Если Результат.Свойство("error") Тогда
				id = Результат.error.incident_id;
				Сообщение = Результат.error.message;
				Статус = "Error";
				Сообщить("Ошибка при отправке запроса! Сообщение сервиса: " + Сообщение);
			ИначеЕсли Результат.Свойство("id") Тогда
				id = Результат.id;
				Сообщение = Результат.Message;
				Статус = Результат.Status;
				Сообщить("Запрос успешно отправлен! "+ТекущаяДата());
				idПланирования = id;
				Элементы.ДекорацияСообщение.Видимость = Истина;
			КонецЕсли;
			ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;	
		
КонецФункции

&НаСервере
Функция ПолучитьЧасовойПоясСеанса()
	
	Возврат СмещениеСтандартногоВремени()/3600;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляЗапроса(СкладПогрузки)
	
	ДанныеДляЗапроса = Новый Структура;
	
	// дополнительные опции
	ДопОпции = ПолучитьДополнительныеОпцииЗапроса();
	
	// свойства склада / depot
	Склады = ПолучитьДанныеСкладаНаСервере();
		
	// свойства точек доставки / locations
	ТочкиДоставки = ПолучитьДанныеТочекДоставкиНаСервере();
	
	// свойства автомобилей / vehicles
	МассивТС = Новый Массив;
	Для Каждого ТС ИЗ ТранспортныеСредства Цикл 
		Если ТС.Использовать Тогда 
			МассивТС.Добавить(ТС.ТранспортноеСредство);
		КонецЕсли;
	КонецЦикла;
	Машины = ПолучитьДанныеМашинНаСервере(ТочкиДоставки, МассивТС);	
	
	ДанныеДляЗапроса.Вставить("ДопОпции", 		ДопОпции);
	ДанныеДляЗапроса.Вставить("Склады", 		Склады);
	ДанныеДляЗапроса.Вставить("ТочкиДоставки", 	ТочкиДоставки);
	ДанныеДляЗапроса.Вставить("Машины", 		Машины);
	
	Возврат ДанныеДляЗапроса;	
	
КонецФункции

&НаСервере
Процедура ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение)
	
	//ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	//ОбъектОбработка.ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение);
	
	//ЯМ_МаршрутизацияСервер.ЗаписатьДанныеЗапроса(id, Статус, Сообщение);
	
	Сообщить(id);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДополнительныеОпцииЗапроса() 
	
	ДопОпции = Новый Массив;
	
	//ДопОпции.Добавить(Новый Структура("Имя,Значение", "balanced_groups", Настройки.balanced_groups));
	ДопОпции.Добавить(Новый Структура("Имя,Значение", "merge_multiorders", Настройки.merge_multiorders));
	ДопОпции.Добавить(Новый Структура("Имя,Значение", "penalize_late_service", Настройки.penalize_late_service));
	ДопОпции.Добавить(Новый Структура("Имя,Значение", "proximity_factor", Настройки.proximity_factor));
	
	Возврат ДопОпции;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеТочекДоставкиНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	ТочкиДоставки = Новый Массив;
	
	Для Каждого ДанныеЗаказа Из ДанныеЗаказов Цикл		
		ТочкаДоставки = Новый Структура();
		//ТочкаДоставки.Вставить("id", Строка(ДанныеЗаказа.Ссылка.УникальныйИдентификатор()));
		ТочкаДоставки.Вставить("id", Строка(ДанныеЗаказа.НомерЗаказа));
		ТочкаДоставки.Вставить("ref", Строка(ДанныеЗаказа.Ссылка.УникальныйИдентификатор()));
		ТочкаДоставкиКоординаты = Новый Структура("lat, lon", ДанныеЗаказа.Широта, ДанныеЗаказа.Долгота);
		ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
		ТочкаДоставки.Вставить("time_window", ОбработкаОбъект.ОбработатьВременноеОкно(ДанныеЗаказа.ВременноеОкно));// "09:00:00-18:00:00");
		ТочкаДоставки.Вставить("hard_window", ДанныеЗаказа.ЖесткоеВременноеОкно);
		ТочкаДоставкиПараметрыГруза = Новый Структура("weight_kg", ДанныеЗаказа.ВесБрутто);
		ТочкаДоставкиПараметрыГрузаОбъем = Новый Структура("depth_m, height_m, width_m", ДанныеЗаказа.Глубина, ДанныеЗаказа.Высота, ДанныеЗаказа.Ширина);
		ТочкаДоставкиПараметрыГруза.Вставить("volume", ТочкаДоставкиПараметрыГрузаОбъем);
		ТочкаДоставкиПараметрыГруза.Вставить("units", ДанныеЗаказа.КоличествоМест);
		ТочкаДоставки.Вставить("shipment_size", ТочкаДоставкиПараметрыГруза);
		//ТочкаДоставки.Вставить("penalty", СформироватьСтруктуруШтрафов(ДанныеЗаказа.ШтрафыДляЗаказов));
		ТочкаДоставки.Вставить("shared_service_duration_s", ДанныеЗаказа.ВремяОбслуживанияАдрес);
		ТочкаДоставки.Вставить("service_duration_s", ДанныеЗаказа.ВремяОбслуживанияЗаказ);
		ТегиМашины = Новый Массив;
		Для Каждого ТегМашины Из ДанныеЗаказа.НеобходимыеСвойстваМашины Цикл 
			ТегиМашины.Добавить(ТегМашины.Значение);	
		КонецЦикла;
		ТочкаДоставки.Вставить("required_tags", ТегиМашины);
		ТочкаДоставки.Вставить("depot_duration_s", ДанныеЗаказа.ВремяЗагрузкиЗаказаНаСкладе);
		ТочкаДоставки.Вставить("type", ДанныеЗаказа.ТипЗаказа);
		ТочкаДоставки.Вставить("description", ДанныеЗаказа.АдресПолучателя);
		ТочкаДоставки.Вставить("title", ДанныеЗаказа.НаименованиеПолучателя);
		
		ТочкиДоставки.Добавить(ТочкаДоставки);
	КонецЦикла;
		
	Возврат ТочкиДоставки;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеМашинНаСервере(ТочкиДоставки, ТраспортныеСредства)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	id = ТочкиДоставки.Количество() + 1;
	
	Машины = Новый Массив;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Ссылка,
	|	новаТранспорт.Наименование КАК ref,
	|	новаТранспорт.Код КАК id,
	|	ДополнительныеПараметрыТранспортаСрезПоследних.МаксимальноеКоличествоЗаказовПриПолигональнойМаршрутизации КАК units,
	|	новаТранспорт.Грузоподъемность КАК weight_kg,
	|	новаТранспорт.ГлубинаКузова КАК depth_m,
	|	новаТранспорт.ШиринаКузова КАК width_m,
	|	новаТранспорт.ВысотаКузова КАК height_m,
	//|	новаТранспорт.СтоимостьКМ КАК km,
	//|	новаТранспорт.СтоимостьЧас КАК hour,
	//|	новаТранспорт.СтоимостьФикс КАК fixed,
	//|	новаТранспорт.СтоимостьЗаРейс КАК run,
	//|	новаТранспорт.СтоимостьЗаЗаказ КАК location,
	|	1 КАК max_runs,
	//|	новаТранспорт.СтартНеНаСкладе КАК start_at,
	//|	новаТранспорт.ЗавершениеНеНаСкладе КАК finish_at,
	|	""driving"" КАК routing_mode,
	|	ИСТИНА КАК visit_depot_at_start,
	|	ЛОЖЬ КАК return_to_depot
	//|	новаТранспорт.ШиротаТочкиСтарта КАК ШиротаТочкиСтарта,
	//|	новаТранспорт.ДолготаТочкиСтарта КАК ДолготаТочкиСтарта,
	//|	новаТранспорт.ШиротаТочкиЗавершения КАК ШиротаТочкиЗавершения,
	//|	новаТранспорт.ДолготаТочкиЗавершения КАК ДолготаТочкиЗавершения,
	//|	новаТранспорт.ВременноеОкноТочкаСтарта КАК ВременноеОкноТочкаСтарта,
	//|	новаТранспорт.ВременноеОкноТочкаОкончания КАК ВременноеОкноТочкаОкончания,
	//|	новаТранспорт.Теги.(
	//|		Тег.Наименование КАК Тег
	//|	) КАК Теги,
	//|	новаТранспорт.Смены.(
	//|		НомерСтроки КАК id,
	//|		ВременноеОкно КАК time_window,
	//|		ЖесткоеВременноеОкно КАК hard_window,
	//|		МинимальноеКоличествоСтопов КАК minimal_stops,
	//|		МаксимальноеКоличествоСтопов КАК maximal_stops,
	//|		Штрафы КАК Штрафы,
	//|		МаксимальныйПробег КАК max_mileage_km,
	//|		МаксимальнаяПродолжительностьСмены КАК max_duration_s,
	//|		ГруппаБалансировки.Наименование КАК balanced_group_id
	//|	) КАК Смены
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыТранспорта.СрезПоследних() КАК ДополнительныеПараметрыТранспортаСрезПоследних
	|	ПО новаТранспорт.Ссылка = ДополнительныеПараметрыТранспортаСрезПоследних.Транспорт
	|ГДЕ
	|	новаТранспорт.Ссылка В(&ТраспортныеСредства)";
	Запрос.УстановитьПараметр("ТраспортныеСредства", ТраспортныеСредства);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Машина = Новый Структура("id, ref, return_to_depot, max_runs"); //  visit_depot_at_start"); //max_duration_s");
			ЗаполнитьЗначенияСвойств(Машина, Выборка);
			
			Если Выборка.visit_depot_at_start = Истина Тогда 
				Машина.Вставить("visit_depot_at_start", Выборка.visit_depot_at_start);	
			КонецЕсли;
			
			Машина.id = Строка(Выборка.id);// Строка(Выборка.Ссылка.УникальныйИдентификатор());
			
			Машина.Вставить("routing_mode", Выборка.routing_mode);
			
			//Если Выборка.start_at И ЗначениеЗаполнено(Выборка.ШиротаТочкиСтарта) И ЗначениеЗаполнено(Выборка.ДолготаТочкиСтарта) Тогда
			//					
			//	ТочкаДоставки = Новый Структура();
			//	ТочкаДоставки.Вставить("id", Строка(id));
			//	ТочкаДоставки.Вставить("ref", "Старт " + Выборка.ref + " id " + Выборка.id);
			//	ТочкаДоставкиКоординаты = Новый Структура("lat, lon", Выборка.ШиротаТочкиСтарта, Выборка.ДолготаТочкиСтарта);
			//	ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
			//	ТочкаДоставки.Вставить("time_window", ОбработкаОбъект.ОбработатьВременноеОкно(Выборка.ВременноеОкноТочкаСтарта)); // "09:00:00-18:00:00");
			//	ТочкаДоставки.Вставить("type", "garage");
			//	ТочкиДоставки.Добавить(ТочкаДоставки);
			//	
			//	Машина.Вставить("start_at", Строка(id));	
			//	
			//	id = id + 1;
			//	
			//КонецЕсли;
			
			//Если Выборка.finish_at И ЗначениеЗаполнено(Выборка.ШиротаТочкиЗавершения) И ЗначениеЗаполнено(Выборка.ДолготаТочкиЗавершения) Тогда
			//					
			//	ТочкаДоставки = Новый Структура();
			//	ТочкаДоставки.Вставить("id", Строка(id));
			//	ТочкаДоставки.Вставить("ref", "Финиш " + Выборка.ref + " id " + Выборка.id);
			//	ТочкаДоставкиКоординаты = Новый Структура("lat, lon", Выборка.ШиротаТочкиЗавершения, Выборка.ДолготаТочкиЗавершения);
			//	ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
			//	ТочкаДоставки.Вставить("time_window", ОбработкаОбъект.ОбработатьВременноеОкно(Выборка.ВременноеОкноТочкаОкончания)); // "09:00:00-18:00:00");
			//	ТочкаДоставки.Вставить("type", "garage");
			//	ТочкиДоставки.Добавить(ТочкаДоставки);
			//	
			//	Машина.Вставить("finish_at", Строка(id));	
			//	
			//	id = id + 1;
			//	
			//КонецЕсли;
			
			МашинаОбъем = Новый Структура("width_m, depth_m, height_m");
			ЗаполнитьЗначенияСвойств(МашинаОбъем, Выборка);
			МашинаТТХ = Новый Структура("units, weight_kg, volume");
			ЗаполнитьЗначенияСвойств(МашинаТТХ, Выборка);
			МашинаТТХ.Вставить("volume", МашинаОбъем);
			//Машина.Вставить("capacity", МашинаТТХ); //отвечает за вместимость
			
			//МашинаСтоимость = Новый Структура("km, hour, fixed, run, location");
			//ЗаполнитьЗначенияСвойств(МашинаСтоимость, Выборка);
			//Машина.Вставить("cost", МашинаСтоимость);			
			
			//МассивТеговМашины = Новый Массив;
			//ВыборкаТеги = Выборка.Теги.Выбрать();
			//Пока ВыборкаТеги.Следующий() Цикл 
			//	МассивТеговМашины.Добавить(ВыборкаТеги.Тег);
			//КонецЦикла;
			//Машина.Вставить("tags", МассивТеговМашины);
			
			//МассивСмены = Новый Массив;
			//ВыборкаСмены = Выборка.Смены.Выбрать();
			//Пока ВыборкаСмены.Следующий() Цикл 
			//	МашинаСмена = Новый Структура("id, time_window, hard_window"); // , max_mileage_km, max_duration_s"); // balanced_group_id");
			//	Если ЗначениеЗаполнено(ВыборкаСмены.balanced_group_id) Тогда 
			//		МашинаСмена.Вставить("balanced_group_id", ВыборкаСмены.balanced_group_id);
			//	КонецЕсли;
			//	Если ВыборкаСмены.minimal_stops > 0 Тогда 
			//		МашинаСмена.Вставить("minimal_stops", ВыборкаСмены.minimal_stops);
			//	КонецЕсли;
			//	Если ВыборкаСмены.maximal_stops > 0 Тогда 
			//		МашинаСмена.Вставить("maximal_stops", ВыборкаСмены.maximal_stops);
			//	КонецЕсли;
			//	Если ВыборкаСмены.max_mileage_km > 0 Тогда 
			//		МашинаСмена.Вставить("max_mileage_km", ВыборкаСмены.max_mileage_km);
			//	КонецЕсли;
			//	Если ВыборкаСмены.max_duration_s > 0 Тогда 
			//		МашинаСмена.Вставить("max_duration_s", ВыборкаСмены.max_duration_s);
			//	КонецЕсли;
			//	ЗаполнитьЗначенияСвойств(МашинаСмена, ВыборкаСмены);
			//	МашинаСмена.time_window = ОбработкаОбъект.ОбработатьВременноеОкно(МашинаСмена.time_window);
			//	МашинаСмена.id = Строка(МашинаСмена.id);
			//	//МашинаСмена.Вставить("penalty", СформироватьСтруктуруШтрафов(ВыборкаСмены.Штрафы));
			//	МассивСмены.Добавить(МашинаСмена);				
			//КонецЦикла;
			//Машина.Вставить("shifts", МассивСмены);
			Машины.Добавить(Машина);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Машины;
		
КонецФункции

&НаКлиенте
Процедура ОбновитьРезультаты(Команда)

	ПоказатьРезультатыПланирования(idПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатыПланирования(ЗадачаID)
	
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	ТаблицаМаршрутов.Очистить();
	ТаблицаТочекДоставки.Очистить();
	
	Соединение = Новый HTTPСоединение(Настройки.АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);	
		
	Адрес = Настройки.АдресЗапросаРезультата + ЗадачаID;

	//Адрес = "" + ЗадачаID;
	
	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	
	Ответ = Соединение.Получить(Запрос);
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + "  
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
	Иначе		
		
		Чтение = Новый ЧтениеJSON;
		ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
		Чтение.УстановитьСтроку(ОтветСтрокой);
		Результат = ПрочитатьJSON(Чтение);
		
		Если Результат.Свойство("result") Тогда
			
			Сообщить("Запрос выполнен "+ТекущаяДата());
			
			id = Результат.id;
			
			Элементы.ДекорацияСообщение.Видимость = Ложь;
			
			Если Результат.result.dropped_locations.Количество() > 0 Тогда 
				Сообщить("Не запланированных точек доставки: " + Строка(Результат.result.dropped_locations.Количество()));
				Сообщить(ОтветСтрокой);
			КонецЕсли;
			РезультатПланирования = Результат.result;
			
			date = РезультатПланирования.options.date;
			ДатаРезультатов = Дата(СтрЗаменить(date, "-", ""));
			Маршруты = РезультатПланирования.routes;
			Для Каждого Маршрут Из Маршруты Цикл
				
				//{
				//"car_id": integer,
				//"courier_id": integer,
				//"courier_number": string,
				//"date": string,
				//"depot_id": integer,
				//"depot_number": string,
				//"id": integer,
				//"imei": integer,
				//"number": string,
				//"route_finish": string,
				//"route_start": string
				//}
				
				НоваяСтрокаМаршруты = ТаблицаМаршрутов.Добавить();
				// НоваяСтрока.courier_id = ;
				НоваяСтрокаМаршруты.courier_number = Маршрут.vehicle_id; // Маршрут.vehicle_id;
				НоваяСтрокаМаршруты.date = date;
				//НоваяСтрока.depot_id = ;
				//НоваяСтрока.id = ;
				//НоваяСтрока.imei = ;
				НоваяСтрокаМаршруты.number = date + "/" + Маршрут.vehicle_id + "/" + Маршрут.run_number; // Параметры.idПланирования +
				//НоваяСтрока.route_finish = ;
				//НоваяСтрока.route_start = ;
				
				Часов = Цел(Маршрут.metrics.total_duration_s / 3600);
				Минут = Цел((Маршрут.metrics.total_duration_s - Часов * 3600) / 60);
				Секунд = Маршрут.metrics.total_duration_s - Часов * 3600 - Минут * 60;
				СтрокаВремениВыполнения = "" + Часов + ":" + ?(Минут = 0, "00", Формат(Минут, "ЧЦ=2; ЧДЦ=0; ЧВН=")) + ":" + ?(Секунд = 0, "00", Формат(Секунд, "ЧЦ=2; ЧВН="));				
				
				НоваяСтрокаМаршруты.run_number 					= Маршрут.run_number;
				НоваяСтрокаМаршруты.total_duration_s 			= СтрокаВремениВыполнения; // Маршрут.metrics.total_duration_s;
				НоваяСтрокаМаршруты.total_transit_distance_m 	= Маршрут.metrics.total_transit_distance_m / 1000;
				НоваяСтрокаМаршруты.total_stops 				= Маршрут.metrics.total_stops;
				
				ТочкиДоставки = Маршрут.route;
				depot_number = Неопределено;
				Для Каждого ТочкаДоставки ИЗ ТочкиДоставки Цикл 
					
					//{
					//"address": string,
					//"amount": number,
					//"comments": string,
					//"customer_id": integer,
					//"customer_name": string,
					//"customer_number": string,
					//"description": string,
					//"lat": number,
					//"lon": number,
					//"mark_delivered_radius": number,
					//"number": string,
					//"partner_id": integer,
					//"payment_type": string,
					//"phone": string,
					//"route_id": integer,
					//"route_number": string,
					//"service_duration_s": integer,
					//"shared_service_duration_s": integer,
					//"shared_with_company_id": integer,
					//	"shared_with_company_ids": [
					//	number
					//	],
					//"status": string,
					//"time_interval": string,
					//"volume": number,
					//"weight": number
					//}	
					
					НоваяСтрокаТочкиДоставки = ТаблицаТочекДоставки.Добавить();
					НоваяСтрокаТочкиДоставки.Машина 									= Маршрут.vehicle_id;
					НоваяСтрокаТочкиДоставки.Рейс 										= Маршрут.run_number;
					//НоваяСтрокаТочкиДоставки.ТочкаМаршрута 								= ТочкаДоставки.node.value.ref;
					НоваяСтрокаТочкиДоставки.ТочкаМаршрута 								= ТочкаДоставки.node.value.id;
					НоваяСтрокаТочкиДоставки.ТипТочки 									= ТочкаДоставки.node.type;
					НоваяСтрокаТочкиДоставки.ВремяПрибытия 								= Строка(ДатаРезультатов + ТочкаДоставки.arrival_time_s);
					НоваяСтрокаТочкиДоставки.lat 										= ТочкаДоставки.node.value.point.lat;
					НоваяСтрокаТочкиДоставки.lon 										= ТочкаДоставки.node.value.point.lon;
					НоваяСтрокаТочкиДоставки.mark_delivered_radius 						= Настройки.mark_delivered_radius;
					
					Если ТочкаДоставки.node.type = "depot" И depot_number = Неопределено Тогда  
						depot_number = ТочкаДоставки.node.value.id;
					КонецЕсли;
					Если (ТочкаДоставки.node.value.Свойство("type") И ТочкаДоставки.node.value.type = "garage") ИЛИ ТочкаДоставки.node.type = "depot" Тогда 
						Продолжить;
					КонецЕсли;
					
					ДопИнфо = ПолучитьДополниеьльнуюИнформациюДляМониторинга(ТочкаДоставки.node.value.ref);		
					НоваяСтрокаТочкиДоставки.ТипТочки = НоваяСтрокаТочкиДоставки.ТипТочки + ?(ЗначениеЗаполнено(ТочкаДоставки.node.value.type), "/" + ТочкаДоставки.node.value.type, "");
					
					НоваяСтрокаТочкиДоставки.address = ДопИнфо.address;
					НоваяСтрокаТочкиДоставки.amount = ДопИнфо.amount;
					НоваяСтрокаТочкиДоставки.comments = ДопИнфо.comments;
					//НоваяСтрокаТочкиДоставки.customer_id = ;
					НоваяСтрокаТочкиДоставки.customer_name = ДопИнфо.customer_name;
					НоваяСтрокаТочкиДоставки.customer_number = ДопИнфо.customer_number;
					НоваяСтрокаТочкиДоставки.description = ТочкаДоставки.node.value.ref + " " + ДопИнфо.customer_name;
					//НоваяСтрокаТочкиДоставки.number = ТочкаДоставки.node.value.ref;
					НоваяСтрокаТочкиДоставки.number = ТочкаДоставки.node.value.id;
					//НоваяСтрокаТочкиДоставки.partner_id = ;
					//НоваяСтрокаТочкиДоставки.payment_type = ;
					//НоваяСтрокаТочкиДоставки.phone = ДопИнфо.phone;
					//НоваяСтрокаТочкиДоставки.route_id = ;
					НоваяСтрокаТочкиДоставки.route_number = НоваяСтрокаМаршруты.number;
					НоваяСтрокаТочкиДоставки.service_duration_s = ТочкаДоставки.node.value.service_duration_s;
					НоваяСтрокаТочкиДоставки.shared_service_duration_s = ТочкаДоставки.node.value.shared_service_duration_s;
					//НоваяСтрокаТочкиДоставки.shared_with_company_ids = ;
					НоваяСтрокаТочкиДоставки.status = Настройки.СтатусЗаказаПоУмолчанию;
					НоваяСтрокаТочкиДоставки.time_interval = ТочкаДоставки.node.value.time_window;
					//НоваяСтрокаТочкиДоставки.volume = ДопИнфо.volume;
					НоваяСтрокаТочкиДоставки.weight = ТочкаДоставки.node.value.shipment_size.weight_kg; // ДопИнфо.weight;
				КонецЦикла;
				НоваяСтрокаМаршруты.depot_number = depot_number;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДополниеьльнуюИнформациюДляМониторинга(ДокументУИД)
	
	ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументУИД));	
	
	ДокументСсылка2 = Документы.ЗаборТовара.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументУИД));	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Ссылка.АдресДоставки КАК СТРОКА(150)) КАК АдресДоставки,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Ссылка.Комментарий КАК СТРОКА(150)) КАК Комментарий,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент.ИНН КАК КонтрагентИНН,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент.КПП КАК КонтрагентКПП//,
	//|	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Вес), 0) КАК УпаковкаВес//,
//	|	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Упаковка.Объем), 0) КАК УпаковкаОбъем
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаборТовара.Ссылка.Контрагент КАК Контрагент,
	|	ЗаборТовара.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ВЫРАЗИТЬ(ЗаборТовара.Ссылка.АдресДоставки КАК СТРОКА(150)) КАК АдресДоставки,
	|	ВЫРАЗИТЬ(ЗаборТовара.Ссылка.Комментарий КАК СТРОКА(150)) КАК Комментарий,
	|	ЗаборТовара.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ЗаборТовара.Ссылка.Контрагент.ИНН КАК КонтрагентИНН,
	|	ЗаборТовара.Ссылка.Контрагент.КПП КАК КонтрагентКПП//,
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|
	|ГДЕ
	|	ЗаборТовара.Ссылка = &Ссылка2";
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РеализацияТоваровУслугТовары.Ссылка.СуммаДокумента,
	//|	РеализацияТоваровУслугТовары.Ссылка.Контрагент,
	//|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.АдресДоставки КАК СТРОКА(150)),
	//|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.Комментарий КАК СТРОКА(150)),
	//|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.Наименование,
	//|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.ИНН,
	//|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.КПП";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Ссылка2", ДокументСсылка2);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДопИнфо = Новый Структура();
	Пока Выборка.Следующий() Цикл 
		ДопИнфо.Вставить("address", 		"" + Выборка.АдресДоставки);
		ДопИнфо.Вставить("amount", 			Выборка.СуммаДокумента);
		ДопИнфо.Вставить("comments", 		"" + Выборка.Комментарий);
		ДопИнфо.Вставить("customer_name", 	"" + Выборка.КонтрагентНаименование);
		ДопИнфо.Вставить("customer_number",	"" + Выборка.КонтрагентИНН + "/" + Выборка.КонтрагентКПП);
		//ДопИнфо.Вставить("phone", 			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,Дата(1,1,1)));
		//ДопИнфо.Вставить("volume", 			Выборка.УпаковкаОбъем);
		//ДопИнфо.Вставить("weight", 			Выборка.УпаковкаВес);
	КонецЦикла;
	
	Возврат ДопИнфо;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиВИнтерфейсМаршрутизации(Команда)
	
	// https://yandex.ru/courier/companies/<id компании>/depots/all/mvrp/<id задачи>
	ЗапуститьПриложение("https://yandex.ru/courier/companies/" + Настройки.idКомпании + "/depots/all/mvrp/" + idПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРейсу(Команда)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.Рейс"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораРейса", ЭтаФорма);
	ПоказатьВводЗначения(ОписаниеОповещения,,"Выберите рейс", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРейса(ВыбранноеЗначение, ДопПараметры) Экспорт

 	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли; 

	idПланирования = "";
	ДанныеЗаказов.Очистить();
	ТранспортныеСредства.Очистить();
	ТаблицаМаршрутов.Очистить();
	ТаблицаТочекДоставки.Очистить();
	
	ЗаполнитьПоРейсуНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьПоРейсуНаСервере(ДокументРейс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РейсЗаказы.НомерСтроки КАК НомерСтроки,
		|	РейсЗаказы.Ссылка КАК ДокументРейс,
		|	РейсЗаказы.Заказ КАК Заказ,
		|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.Рейс.Заказы КАК РейсЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &ДокументРейс) КАК ПривязкаМашинКРейсамСрезПоследних
		|		ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
		|ГДЕ
		|	РейсЗаказы.Ссылка = &ДокументРейс
		|	И НЕ РейсЗаказы.УдаленИзРейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.ДокументРейс КАК ДокументРейс,
		|	ВТ_Заказы.НомерСтроки КАК НомерСтроки,
		|	ВТ_Заказы.Заказ КАК Ссылка,
		|	ВТ_Заказы.Заказ.Номер КАК НомерЗаказа,
		|	ВТ_Заказы.Заказ.Контрагент.Представление КАК НаименованиеПолучателя,
		|	ЕСТЬNULL(новаМестнаяДоставка.Адрес, ВТ_Заказы.Заказ.АдресДоставки) КАК АдресПолучателя,
		|	0 КАК ВесБрутто,
		|	ВТ_Заказы.Заказ.КоличествоМест КАК КоличествоМест,
		|	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияС, ВТ_Заказы.Заказ.ВремяДоставкиС) КАК ВременноеОкноС,
		|	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияПо, ВТ_Заказы.Заказ.ВремяДоставкиПо) КАК ВременноеОкноПо,
		|	0 КАК Глубина,
		|	0 КАК Высота,
		|	ЕСТЬNULL(новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта, ВТ_Заказы.Заказ.ТочкаДоставки.Адрес.Широта) КАК Широта,
		|	ЕСТЬNULL(новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота, ВТ_Заказы.Заказ.ТочкаДоставки.Адрес.Долгота) КАК Долгота,
		|	ВЫБОР
		|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ""delivery""
		|		ИНАЧЕ ""pickup""
		|	КОНЕЦ КАК ТипЗаказа,
		|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ЛогистическийБрейк, ДополнительныеПараметрыЗабора.ЛогистическийБрейк) КАК ЛогистическийБрейк,
		|	ВТ_Заказы.Транспорт КАК ТранспортноеСредство
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|		ПО ВТ_Заказы.Заказ.Номер = новаМестнаяДоставка.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗабора КАК ДополнительныеПараметрыЗабора
		|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗабора.Забор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Заказы.НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументРейс", ДокументРейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
				
		ДанныеЗаказов.Загрузить(РезультатЗапроса.Выгрузить());
		
		ЗаполнитьЗначенияПоУмолчанию();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Для каждого ТекСтрока Из ДанныеЗаказов Цикл
			
			СтруктураОтбора = Новый Структура("НомерЗаказа", ТекСтрока.НомерЗаказа); 
			
			ВыборкаДетальныеЗаписи.Сбросить();
			
			Пока ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураОтбора) Цикл
				
				Попытка
					Час1 = Формат(Час(ВыборкаДетальныеЗаписи.ВременноеОкноС), "ЧЦ=2; ЧН=00; ЧВН=");
					Минута1 = Формат(Минута(ВыборкаДетальныеЗаписи.ВременноеОкноС), "ЧЦ=2; ЧН=00; ЧВН=");
					
					Час2 = Формат(Час(ВыборкаДетальныеЗаписи.ВременноеОкноПо), "ЧЦ=2; ЧН=00; ЧВН=");
					Минута2 = Формат(Минута(ВыборкаДетальныеЗаписи.ВременноеОкноПо), "ЧЦ=2; ЧН=00; ЧВН=");
					ТекСтрока.ВременноеОкно = "0."+Час1+":"+Минута1+":00-0."+Час2+":"+Минута2+":00";
				Исключение
				КонецПопытки;
				
				ТекСтрока.ТипЗаказа = ВыборкаДетальныеЗаписи.ТипЗаказа;
				
				Если ВыборкаДетальныеЗаписи.ТипЗаказа = "pickup" Тогда
					ТекСтрока.ВремяОбслуживанияЗаказ = 15*60;
				Иначе
					Если ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "МГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 5*60;					
					ИначеЕсли ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "СГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 7*60;					
					ИначеЕсли ВРег(Лев(СокрЛП(ВыборкаДетальныеЗаписи.ЛогистическийБрейк), 3)) = "КГТ" Тогда
						ТекСтрока.ВремяОбслуживанияЗаказ = 10*60;					
					КонецЕсли; 
				КонецЕсли; 
				//МГТ - 5 минут, СГТ - 7 минут, КГТ - 10 минут, забор - 15мин
			КонецЦикла; 
			
		КонецЦикла; 
		
		ТранспортныеСредстваТЗ = РезультатЗапроса.Выгрузить();
		ТранспортныеСредстваТЗ.Свернуть("ТранспортноеСредство",); 
		ТранспортныеСредства.Загрузить(ТранспортныеСредстваТЗ);
		
	КонецЕсли;
	
КонецПроцедуры // ()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ОтправитьЗапросПоТекущемуЗаказу(Команда)
	
	//Если ДанныеЗаказов.Количество() = 0 Тогда 
	//	
	//	ПоказатьПредупреждение(,"В списке нет ни одного заказа, отправка запроса невозможна!");
	//	Возврат;
	//	
	//КонецЕсли;
	
	
	Результат = ВыполнитьЗапросНаМаршрутизациюSVRP();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросПоСпискуЗаказов(Команда)
	
	//Если ДанныеЗаказов.Количество() = 0 Тогда 
	//	
	//	ПоказатьПредупреждение(,"В списке нет ни одного заказа, отправка запроса невозможна!");
	//	Возврат;
	//	
	//КонецЕсли;
	
	Результат = ВыполнитьЗапросНаМаршрутизациюSVRP();	
	
	//Если Результат и ЗначениеЗаполнено(idПланирования) Тогда
	//	ПоказатьРезультатыПланирования(idПланирования);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗапросНаМаршрутизациюSVRP()
	
	Соединение = Новый HTTPСоединение(Настройки.АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);	
						
	// опции запроса / options
	Опции = Новый Структура();
	Опции.Вставить("routing_mode", "driving");
	Опции.Вставить("time_zone", ПолучитьЧасовойПоясСеанса());
	Опции.Вставить("date", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));   //ДатаПланирования
	Опции.Вставить("quality", "normal");
	
	ТекущаяСтрока = Элементы.ДанныеЗаказов.ТекущаяСтрока;
	
	ДанныеДляЗапроса = ПолучитьДанныеДляЗапросаSVRP(СкладОтгрузки, ТекущаяСтрока);		
	
	Для Каждого Опция Из ДанныеДляЗапроса.ДопОпции Цикл 
		Опции.Вставить(Опция.Имя, Опция.Значение);
	КонецЦикла;
	
	// параметры подключения
	Ключ  = Настройки.КлючAPI_ЯндексМаршрутизация;
	Адрес = "/vrs/api/v1/add/svrp?apikey=" + Ключ;

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	Запрос.Заголовки.Вставить("User-Agent",		"Yandex Routing 1C module_v3");
	
	// формирование запроса
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтрокаJSON = Новый Структура("options, depot, vehicle, locations", Опции, ДанныеДляЗапроса.Склады, ДанныеДляЗапроса.Машины, ДанныеДляЗапроса.ТочкиДоставки);
	ЗаписатьJSON(ЗаписьJSON, СтрокаJSON);
	ТекстТелаЗапроса = СтрЗаменить(ЗаписьJSON.Закрыть(),"\\","\");
	Запрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса);

	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + " 
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
		Возврат Ложь;
		
	Иначе
		
		Если КодСостояния >= 500 Тогда 
			
			ЗаписатьДанныеЗапросаНаСервере(КодСостояния, , "");
			
		Иначе
			
			Чтение = Новый ЧтениеJSON;
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
			Чтение.УстановитьСтроку(ОтветСтрокой);
			Результат = ПрочитатьJSON(Чтение);
			
			Если Результат.Свойство("error") Тогда
				id = Результат.error.incident_id;
				Сообщение = Результат.error.message;
				Статус = "Error";
				Сообщить("Ошибка при отправке запроса! Сообщение сервиса: " + Сообщение);
			ИначеЕсли Результат.Свойство("id") Тогда
				id = Результат.id;
				Сообщение = Результат.Message;
				Статус = Результат.Status;
				Сообщить("Запрос успешно отправлен! "+ТекущаяДата());
				idПланирования = id;
				Элементы.ДекорацияСообщение.Видимость = Истина;
			КонецЕсли;
			ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;	

КонецФункции

&НаСервере
Функция ПолучитьДанныеДляЗапросаSVRP(СкладПогрузки, ТекущаяСтрока)
	
	ДанныеДляЗапроса = Новый Структура;
	
	// дополнительные опции
	ДопОпции = ПолучитьДополнительныеОпцииЗапроса();
	
	// свойства склада / depot
	Склады = ПолучитьДанныеСкладаНаСервере();
		
	// свойства точек доставки / locations
	ТочкиДоставки = ПолучитьДанныеТочкиДоставкиНаСервереSVRP();//ДанныеЗаказов);//.НайтиПоИдентификатору(ТекущаяСтрока));//ДанныеЗаказов.Получить(ТекущаяСтрока));
	
	// свойства автомобилей / vehicles
	МассивТС = Новый Массив;
	Для Каждого ТС ИЗ ТранспортныеСредства Цикл 
		Если ТС.Использовать Тогда 
			МассивТС.Добавить(ТС.ТранспортноеСредство);
		КонецЕсли;
	КонецЦикла;
	Машины = ПолучитьДанныеМашинНаСервереSVRP(ТочкиДоставки, МассивТС);	
	
	ДанныеДляЗапроса.Вставить("ДопОпции", 		ДопОпции);
	ДанныеДляЗапроса.Вставить("Склады", 		Склады);
	ДанныеДляЗапроса.Вставить("ТочкиДоставки", 	ТочкиДоставки);
	ДанныеДляЗапроса.Вставить("Машины", 		Машины);
	
	Возврат ДанныеДляЗапроса;	
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеТочкиДоставкиНаСервереSVRP()//ДанныеЗаказа)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	ТочкиДоставки = Новый Массив;
	
	Для Каждого ДанныеЗаказа Из ДанныеЗаказов Цикл		
		ТочкаДоставки = Новый Структура();
		//ТочкаДоставки.Вставить("id", Строка(ДанныеЗаказа.Ссылка.УникальныйИдентификатор()));
		ТочкаДоставки.Вставить("id", Строка(ДанныеЗаказа.НомерЗаказа));
		ТочкаДоставки.Вставить("ref", Строка(ДанныеЗаказа.Ссылка.УникальныйИдентификатор()));
		ТочкаДоставкиКоординаты = Новый Структура("lat, lon", ДанныеЗаказа.Широта, ДанныеЗаказа.Долгота);
		ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
		ТочкаДоставки.Вставить("time_window", ОбработкаОбъект.ОбработатьВременноеОкно(ДанныеЗаказа.ВременноеОкно));// "09:00:00-18:00:00");
		ТочкаДоставки.Вставить("hard_window", ДанныеЗаказа.ЖесткоеВременноеОкно);
		ТочкаДоставкиПараметрыГруза = Новый Структура("weight_kg", ДанныеЗаказа.ВесБрутто);
		ТочкаДоставкиПараметрыГрузаОбъем = Новый Структура("depth_m, height_m, width_m", ДанныеЗаказа.Глубина, ДанныеЗаказа.Высота, ДанныеЗаказа.Ширина);
		ТочкаДоставкиПараметрыГруза.Вставить("volume", ТочкаДоставкиПараметрыГрузаОбъем);
		ТочкаДоставкиПараметрыГруза.Вставить("units", ДанныеЗаказа.КоличествоМест);
		ТочкаДоставки.Вставить("shipment_size", ТочкаДоставкиПараметрыГруза);
		//ТочкаДоставки.Вставить("penalty", СформироватьСтруктуруШтрафов(ДанныеЗаказа.ШтрафыДляЗаказов));
		ТочкаДоставки.Вставить("shared_service_duration_s", ДанныеЗаказа.ВремяОбслуживанияАдрес);
		ТочкаДоставки.Вставить("service_duration_s", ДанныеЗаказа.ВремяОбслуживанияЗаказ);
		ТегиМашины = Новый Массив;
		Для Каждого ТегМашины Из ДанныеЗаказа.НеобходимыеСвойстваМашины Цикл 
			ТегиМашины.Добавить(ТегМашины.Значение);	
		КонецЦикла;
		ТочкаДоставки.Вставить("required_tags", ТегиМашины);
		ТочкаДоставки.Вставить("depot_duration_s", ДанныеЗаказа.ВремяЗагрузкиЗаказаНаСкладе);
		ТочкаДоставки.Вставить("type", ДанныеЗаказа.ТипЗаказа);
		ТочкаДоставки.Вставить("description", ДанныеЗаказа.АдресПолучателя);
		ТочкаДоставки.Вставить("title", ДанныеЗаказа.НаименованиеПолучателя);
		
		ТочкиДоставки.Добавить(ТочкаДоставки);
	КонецЦикла;
		
	Возврат ТочкиДоставки;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеМашинНаСервереSVRP(ТочкаДоставки, ТраспортныеСредства)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// Формирование запросов для обращения к сервису маршрутизации здесь и в других местах кода
	// выполнено с минимально необходимым набором полей и только для ознакомления с работой с сервисом
	// из учетной системы на базе типовых конфигураций 1С
	//
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	//id = ТочкиДоставки.Количество() + 1;
	
	Машины = Новый Массив;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Ссылка,
	|	новаТранспорт.Наименование КАК ref,
	|	новаТранспорт.Код КАК id,
	|	ДополнительныеПараметрыТранспортаСрезПоследних.МаксимальноеКоличествоЗаказовПриПолигональнойМаршрутизации КАК units,
	|	новаТранспорт.Грузоподъемность КАК weight_kg,
	|	новаТранспорт.ГлубинаКузова КАК depth_m,
	|	новаТранспорт.ШиринаКузова КАК width_m,
	|	новаТранспорт.ВысотаКузова КАК height_m,
	//|	новаТранспорт.СтоимостьКМ КАК km,
	//|	новаТранспорт.СтоимостьЧас КАК hour,
	//|	новаТранспорт.СтоимостьФикс КАК fixed,
	//|	новаТранспорт.СтоимостьЗаРейс КАК run,
	//|	новаТранспорт.СтоимостьЗаЗаказ КАК location,
	|	1 КАК max_runs,
	//|	новаТранспорт.СтартНеНаСкладе КАК start_at,
	//|	новаТранспорт.ЗавершениеНеНаСкладе КАК finish_at,
	|	""driving"" КАК routing_mode,
	|	ИСТИНА КАК visit_depot_at_start,
	|	ЛОЖЬ КАК return_to_depot
	//|	новаТранспорт.ШиротаТочкиСтарта КАК ШиротаТочкиСтарта,
	//|	новаТранспорт.ДолготаТочкиСтарта КАК ДолготаТочкиСтарта,
	//|	новаТранспорт.ШиротаТочкиЗавершения КАК ШиротаТочкиЗавершения,
	//|	новаТранспорт.ДолготаТочкиЗавершения КАК ДолготаТочкиЗавершения,
	//|	новаТранспорт.ВременноеОкноТочкаСтарта КАК ВременноеОкноТочкаСтарта,
	//|	новаТранспорт.ВременноеОкноТочкаОкончания КАК ВременноеОкноТочкаОкончания,
	//|	новаТранспорт.Теги.(
	//|		Тег.Наименование КАК Тег
	//|	) КАК Теги,
	//|	новаТранспорт.Смены.(
	//|		НомерСтроки КАК id,
	//|		ВременноеОкно КАК time_window,
	//|		ЖесткоеВременноеОкно КАК hard_window,
	//|		МинимальноеКоличествоСтопов КАК minimal_stops,
	//|		МаксимальноеКоличествоСтопов КАК maximal_stops,
	//|		Штрафы КАК Штрафы,
	//|		МаксимальныйПробег КАК max_mileage_km,
	//|		МаксимальнаяПродолжительностьСмены КАК max_duration_s,
	//|		ГруппаБалансировки.Наименование КАК balanced_group_id
	//|	) КАК Смены
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыТранспорта.СрезПоследних() КАК ДополнительныеПараметрыТранспортаСрезПоследних
	|	ПО новаТранспорт.Ссылка = ДополнительныеПараметрыТранспортаСрезПоследних.Транспорт
	|ГДЕ
	|	новаТранспорт.Ссылка В(&ТраспортныеСредства)";
	Запрос.УстановитьПараметр("ТраспортныеСредства", ТраспортныеСредства);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Машина = Новый Структура("id, ref, return_to_depot, max_runs"); //  visit_depot_at_start"); //max_duration_s");
			ЗаполнитьЗначенияСвойств(Машина, Выборка);
			
			Если Выборка.visit_depot_at_start = Истина Тогда 
				Машина.Вставить("visit_depot_at_start", Выборка.visit_depot_at_start);	
			КонецЕсли;
			
			Машина.id = Строка(Выборка.id);// Строка(Выборка.Ссылка.УникальныйИдентификатор());
			
			Машина.Вставить("routing_mode", Выборка.routing_mode);
			
			//Если Выборка.start_at И ЗначениеЗаполнено(Выборка.ШиротаТочкиСтарта) И ЗначениеЗаполнено(Выборка.ДолготаТочкиСтарта) Тогда
			//					
			//	ТочкаДоставки = Новый Структура();
			//	ТочкаДоставки.Вставить("id", Строка(id));
			//	ТочкаДоставки.Вставить("ref", "Старт " + Выборка.ref + " id " + Выборка.id);
			//	ТочкаДоставкиКоординаты = Новый Структура("lat, lon", Выборка.ШиротаТочкиСтарта, Выборка.ДолготаТочкиСтарта);
			//	ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
			//	ТочкаДоставки.Вставить("time_window", ОбработкаОбъект.ОбработатьВременноеОкно(Выборка.ВременноеОкноТочкаСтарта)); // "09:00:00-18:00:00");
			//	ТочкаДоставки.Вставить("type", "garage");
			//	ТочкиДоставки.Добавить(ТочкаДоставки);
			//	
			//	Машина.Вставить("start_at", Строка(id));	
			//	
			//	id = id + 1;
			//	
			//КонецЕсли;
			
			//Если Выборка.finish_at И ЗначениеЗаполнено(Выборка.ШиротаТочкиЗавершения) И ЗначениеЗаполнено(Выборка.ДолготаТочкиЗавершения) Тогда
			//					
			//	ТочкаДоставки = Новый Структура();
			//	ТочкаДоставки.Вставить("id", Строка(id));
			//	ТочкаДоставки.Вставить("ref", "Финиш " + Выборка.ref + " id " + Выборка.id);
			//	ТочкаДоставкиКоординаты = Новый Структура("lat, lon", Выборка.ШиротаТочкиЗавершения, Выборка.ДолготаТочкиЗавершения);
			//	ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
			//	ТочкаДоставки.Вставить("time_window", ОбработкаОбъект.ОбработатьВременноеОкно(Выборка.ВременноеОкноТочкаОкончания)); // "09:00:00-18:00:00");
			//	ТочкаДоставки.Вставить("type", "garage");
			//	ТочкиДоставки.Добавить(ТочкаДоставки);
			//	
			//	Машина.Вставить("finish_at", Строка(id));	
			//	
			//	id = id + 1;
			//	
			//КонецЕсли;
			
			МашинаОбъем = Новый Структура("width_m, depth_m, height_m");
			ЗаполнитьЗначенияСвойств(МашинаОбъем, Выборка);
			МашинаТТХ = Новый Структура("units, weight_kg, volume");
			ЗаполнитьЗначенияСвойств(МашинаТТХ, Выборка);
			МашинаТТХ.Вставить("volume", МашинаОбъем);
			//Машина.Вставить("capacity", МашинаТТХ); //отвечает за вместимость
			
			//МашинаСтоимость = Новый Структура("km, hour, fixed, run, location");
			//ЗаполнитьЗначенияСвойств(МашинаСтоимость, Выборка);
			//Машина.Вставить("cost", МашинаСтоимость);			
			
			//МассивТеговМашины = Новый Массив;
			//ВыборкаТеги = Выборка.Теги.Выбрать();
			//Пока ВыборкаТеги.Следующий() Цикл 
			//	МассивТеговМашины.Добавить(ВыборкаТеги.Тег);
			//КонецЦикла;
			//Машина.Вставить("tags", МассивТеговМашины);
			
			//МассивСмены = Новый Массив;
			//ВыборкаСмены = Выборка.Смены.Выбрать();
			//Пока ВыборкаСмены.Следующий() Цикл 
			//	МашинаСмена = Новый Структура("id, time_window, hard_window"); // , max_mileage_km, max_duration_s"); // balanced_group_id");
			//	Если ЗначениеЗаполнено(ВыборкаСмены.balanced_group_id) Тогда 
			//		МашинаСмена.Вставить("balanced_group_id", ВыборкаСмены.balanced_group_id);
			//	КонецЕсли;
			//	Если ВыборкаСмены.minimal_stops > 0 Тогда 
			//		МашинаСмена.Вставить("minimal_stops", ВыборкаСмены.minimal_stops);
			//	КонецЕсли;
			//	Если ВыборкаСмены.maximal_stops > 0 Тогда 
			//		МашинаСмена.Вставить("maximal_stops", ВыборкаСмены.maximal_stops);
			//	КонецЕсли;
			//	Если ВыборкаСмены.max_mileage_km > 0 Тогда 
			//		МашинаСмена.Вставить("max_mileage_km", ВыборкаСмены.max_mileage_km);
			//	КонецЕсли;
			//	Если ВыборкаСмены.max_duration_s > 0 Тогда 
			//		МашинаСмена.Вставить("max_duration_s", ВыборкаСмены.max_duration_s);
			//	КонецЕсли;
			//	ЗаполнитьЗначенияСвойств(МашинаСмена, ВыборкаСмены);
			//	МашинаСмена.time_window = ОбработкаОбъект.ОбработатьВременноеОкно(МашинаСмена.time_window);
			//	МашинаСмена.id = Строка(МашинаСмена.id);
			//	//МашинаСмена.Вставить("penalty", СформироватьСтруктуруШтрафов(ВыборкаСмены.Штрафы));
			//	МассивСмены.Добавить(МашинаСмена);				
			//КонецЦикла;
			//Машина.Вставить("shifts", МассивСмены);
			Машины.Добавить(Машина);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Машина;
	
КонецФункции

///////////////////////////////////////////////////////////////////////
//ТЕСТОВЫЕ ПРОЦЕДУРЫ, можно удалять ++
//&НаСервере
//Процедура ТестированиеПроцедурыМОНаСервере()
//	
//	//СписокЗаказов = Новый Массив;
//	//СписокЗаказов.Добавить(Новый Структура("НомерЗаказа,ПорядокМаршрутизации", "7466949", 1));
//	//СписокЗаказов.Добавить(Новый Структура("НомерЗаказа,ПорядокМаршрутизации", "7470059", 0));
//	//СписокЗаказов.Добавить(Новый Структура("НомерЗаказа,ПорядокМаршрутизации", "7469949", 2));
//	
//	СписокЗаказов = Неопределено;
//	
//	Об = РеквизитФормыВЗначение("Объект");	
//	//Результат = Об.НачатьМаршрутизированиеЗаказовПоРейсу("000268156", СписокЗаказов);
//	Результат = Об.НачатьМаршрутизированиеЗаказовПоРейсу("000268208", СписокЗаказов);//заборы
//	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
//		
//		idПланирования = Результат;
//		
//	КонецЕсли;
//	
//КонецПроцедуры


//&НаКлиенте
//Процедура ТестированиеПроцедурыМО(Команда)
//	
//	ТестированиеПроцедурыМОНаСервере();
//	
//КонецПроцедуры


//&НаСервере
//Процедура ТестированиеЗапроситьРезультатНаСервере()
//	
//	Об = РеквизитФормыВЗначение("Объект");	
//	Об.ПолучитьРезультатыМаршрутизированияЗаказовПоРейсу(idПланирования);
//	
//КонецПроцедуры


//&НаКлиенте
//Процедура ТестированиеЗапроситьРезультат(Команда)
//	ТестированиеЗапроситьРезультатНаСервере();
//КонецПроцедуры

//ТЕСТОВЫЕ ПРОЦЕДУРЫ, можно удалять --
///////////////////////////////////////////////////////////////////////
