#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Фильтр журнала по владельцу точек доставки.
//
Перем ВладелецТочки Экспорт; // <СправочникСсылка.новаКонтрагенты, СправочникСсылка.новаСклады, Неопределено>

// Если Истина, то точки журнала будут отображаться на карте.
//
Перем ОткрыватьКарту Экспорт; // <Булево>

// Если Истина, то журнал работает как мастер подготовки точек доставки к маршрутизации.
//
Перем ПодготовкаДанных Экспорт; // <Булево>

Перем ЖурналНачалоПериода, ЖурналКонецПериода;
Перем икТочкиНаКарте;
Перем НастройкиГеокодирования Экспорт;

Перем соОтображенияТочек;

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	Для каждого ОтображениеТочки Из соОтображенияТочек Цикл
		
		ОтображениеТочки.Значение.ОтключитьВсеОбработчики();
	КонецЦикла;
	соОтображенияТочек.Очистить();
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	ВладелецТочки = Неопределено;
	ОткрыватьКарту = Неопределено;
	ПодготовкаДанных = Неопределено;
	ЖурналНачалоПериода = Неопределено;
	ЖурналКонецПериода = Неопределено;
	икТочкиНаКарте = Неопределено;
	НастройкиГеокодирования = Неопределено;
	соОтображенияТочек = Неопределено;
	
КонецПроцедуры

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Окно = Формат(ДанныеСтроки.ВремяРаботыНачало, "ДФ=ЧЧ:мм") + " - " + Формат(ДанныеСтроки.ВремяРаботыОкончание, "ДФ=ЧЧ:мм");
	Если Окно <> " - " Тогда
		ОформлениеСтроки.Ячейки.ОкноРаботы.УстановитьТекст(Окно);
	КонецЕсли;
	
	Если ПодготовкаДанных Тогда
		Если ДанныеСтроки.Адрес.Широта <> 0 Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(208, 255, 208);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.ПометкаУдаления <> NULL Тогда
		Если ДанныеСтроки.ПометкаУдаления Тогда
			//Журнал.Дерево.Колонки.ТочкаДоставки.КартинкиСтрок = БиблиотекаКартинок.у;
			ОформлениеСтроки.Ячейки.ТочкаДоставки.ОтображатьКартинку = Истина;
			//ОформлениеСтроки.Ячейки.ТочкаДоставки.ИндексКартинки = 1;
			//ОформлениеСтроки.Ячейки.ТочкаДоставки.Картинка  = БиблиотекаКартинок.;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Журнал.ЕстьИерархия Тогда
		Если ДанныеСтроки.Группировка <> NULL Тогда
			Если КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "Владелец" Тогда
				ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
				ОформлениеСтроки.ЦветФона = Новый Цвет(249, 253, 255);
			ИначеЕсли КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "Район" Тогда
				ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
				ОформлениеСтроки.ЦветФона = Новый Цвет(255, 251, 240);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗавершитьПодготовку()
	Ответ = Вопрос("Пометить как подготовленные геокодированные точки с указанным окном доставки?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	соТочкиДоставки = Новый Соответствие;
	Строки = Журнал.Дерево.Значение.Строки;
	Для Каждого Строка Из Строки Цикл
		Если ЗначениеЗаполнено(Строка.ВремяРаботыНачало)
	   	   И ЗначениеЗаполнено(Строка.ВремяРаботыОкончание)
	   	   И ЗначениеЗаполнено(Строка.Широта)
	   	   И ЗначениеЗаполнено(Строка.Долгота) Тогда
	    		соТочкиДоставки.Вставить(Строка.ТочкаДоставки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлТочкаДоставки Из соТочкиДоставки Цикл
		обТочкаДоставки = ЭлТочкаДоставки.Ключ.ПолучитьОбъект();
		обТочкаДоставки.Подготовлена = Истина;
		обТочкаДоставки.Записать();
	КонецЦикла;
	Журнал.Обновить();
КонецПроцедуры

Процедура ОтменитьДоставки()
	Ответ = Вопрос("Отменить доставки в данную точку?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	ТочкаДоставки = Журнал.Дерево.ТекущаяСтрока.ТочкаДоставки; 
	
	Форма = БизнесПроцессы.новаМестнаяДоставка.ПолучитьФорму("ОтменаДоставки");
	Форма.ОсновнаяТочка = ТочкаДоставки;
	Форма.Открыть();
КонецПроцедуры

Процедура ПоискАдреса()
	ТочкаДоставки = Журнал.Дерево.ТекущаяСтрока.ТочкаДоставки;
	
	ПоискАдреса = Обработки.новаПоискАдреса.ПолучитьФорму();
	ПоискАдреса.ВладелецФормы = Журнал.ФормаЖурнала;
	ПоискАдреса.ЭлементыФормы.Адрес.Значение = Журнал.Дерево.ТекущаяСтрока.Адрес;
	ПоискАдреса.ТочкаДоставки = Журнал.Дерево.ТекущаяСтрока.ТочкаДоставки;
	ПоискАдреса.ОбластьПоискаКлассификатор = Истина;
	ПоискАдреса.НайтиАдреса();
	Если ПоискАдреса.Открыта()Тогда
		ПоискАдреса.Активизировать();	
	Иначе 	
		ПоискАдреса.Открыть();
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ОтобразитьТочкуНаКарте(Строка)
	Если Не ЗначениеЗаполнено(Строка.ТочкаДоставки) Тогда Возврат; КонецЕсли;
	
	ОтображениеТочки = соОтображенияТочек[Строка.ТочкаДоставки];
	Если Строка.ОтображатьНаКарте Тогда
		Если ОтображениеТочки = Неопределено Тогда
			Журнал.ФормаЖурнала.УстановитьВидимостьКарты(Истина);
			Если Журнал.ФормаЖурнала.ПолеКарты = Неопределено Тогда Возврат; КонецЕсли;
			
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
			ОтображениеТочки = КСЛ.Геоинформация_ТочкиДоставки_Карты_ОтображениеТочкиДоставки();
			ОтображениеТочки.Точка.Ид = СокрЛП(Строка.ТочкаДоставки.УникальныйИдентификатор());
			
			Журнал.ФормаЖурнала.ПолеКарты.ДобавитьОбъект(ОтображениеТочки);
			
			соОтображенияТочек.Вставить(Строка.ТочкаДоставки, ОтображениеТочки);
		КонецЕсли;
	Иначе
		Если ОтображениеТочки <> Неопределено Тогда
			Журнал.ФормаЖурнала.ПолеКарты.УдалитьОбъект(ОтображениеТочки);
			соОтображенияТочек.Удалить(Строка.ТочкаДоставки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
	
	ИначеЕсли Событие = "Выбор" Тогда
		Если ЗначениеЗаполнено(Параметр1.ТочкаДоставки) Тогда
			обТочка = Параметр1.ТочкаДоставки.ПолучитьОбъект();
			Если ПодготовкаДанных Тогда
				обТочка.ЗаполнитьПараметры();
			КонецЕсли;
			
			Форма = обТочка.ПолучитьФорму();
			Форма.Открыть();
		КонецЕсли;
		
	ИначеЕсли Событие = "АктивизированаСтрока" Тогда
		Если икТочкиНаКарте <> Неопределено Тогда
			Если ЗначениеЗаполнено(Параметр1) Тогда
				Если ЗначениеЗаполнено(Параметр1.ТочкаДоставки) Тогда
					икТочкиНаКарте.УстановитьТекущуюТочку(Параметр1.ТочкаДоставки);
					//новаКонтекст.МенеджерКарт.ОбновитьКарту();	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "ДобавленыДанныеВДерево" Тогда
		//ОтобразитьТочкиНаКарте();
		
	ИначеЕсли Событие = "ОкончаниеРедактирования" Тогда
		
		Если не ЗначениеЗаполнено(Параметр1.Адрес) Тогда
			
			Строки = Параметр1.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект));
			Для Каждого Строка Из Строки Цикл
				Строка.ОтображатьНаКарте = Параметр1.ОтображатьНаКарте;
				ОтобразитьТочкуНаКарте(Строка);
			КонецЦикла;
			
		Иначе
			
			ОтобразитьТочкуНаКарте(Параметр1);
		КонецЕсли;
		
		Если Журнал.ФормаЖурнала.ПолеКарты <> Неопределено Тогда
			Журнал.ФормаЖурнала.ПолеКарты.УстановитьОптимальныйМасштабПослеЗагрузкиОбъектов();
		КонецЕсли;
		
		//ОтобразитьТочкиНаКарте();
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "ОтобразитьВсеТочки" Тогда
			УстановитьВыделениеТочек(Истина);
			Если Журнал.ФормаЖурнала.ПолеКарты <> Неопределено Тогда
				Журнал.ФормаЖурнала.ПолеКарты.УстановитьОптимальныйМасштабПослеЗагрузкиОбъектов();
			КонецЕсли;
			//ОтобразитьТочкиНаКарте();
			
		ИначеЕсли Параметр1 = "СкрытьВсеТочки" Тогда
			УстановитьВыделениеТочек(Ложь);
			Если Журнал.ФормаЖурнала.ПолеКарты <> Неопределено Тогда
				Журнал.ФормаЖурнала.ПолеКарты.УстановитьОптимальныйМасштабПослеЗагрузкиОбъектов();
			КонецЕсли;
			//ОтобразитьТочкиНаКарте();
			
		ИначеЕсли Параметр1 = "ДобавитьТочку" Тогда	
			обТочка = Справочники.новаТочкиДоставки.СоздатьЭлемент();
			Если ЗначениеЗаполнено(ВладелецТочки) Тогда
				обТочка.ВладелецТочки = ВладелецТочки;
			КонецЕсли;
			обТочка.ЗаполнитьПараметры();
			Форма = обТочка.ПолучитьФорму();
			Форма.Открыть();
			      
		ИначеЕсли Параметр1 = "СкопироватьТочку" Тогда		
			текТочка = Журнал.ТекущиеДанные.ТочкаДоставки;
			Если ЗначениеЗаполнено(текТочка) Тогда
				обТочка = ТекТочка.Скопировать();
				Если НЕ обТочка.Адрес.ВходитВКлассификатор Тогда
					обТочка.Адрес = "";
				КонецЕсли;	
				Форма = обТочка.ПолучитьФорму();
				Форма.Открыть();
			КонецЕсли;	
		ИначеЕсли Параметр1 = "УдалитьТочку" Тогда		
			текТочка = Журнал.ТекущиеДанные.ТочкаДоставки;
			Если ЗначениеЗаполнено(текТочка) Тогда
				Ответ = Вопрос("Установить пометку удаления?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					обТочка = ТекТочка.ПолучитьОбъект();
					обТочка.УстановитьПометкуУдаления(Истина);
					Журнал.Обновить();
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли Параметр1 = "ГеокодироватьВсеТочки" Тогда
			мсТочки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Группировка", NULL), Истина);
			ъ = 0;
			
			ФормаИндикатора = ПолучитьОбщуюФорму("новаФормаИндикатора");
			ФормаИндикатора.Заголовок = "Процесс геокодирования";
			ФормаИндикатора.МинимальноеЗначение = 0;
			ФормаИндикатора.МаксимальноеЗначение = мсТочки.Количество();
			ПоискАдреса = Обработки.новаПоискАдреса.Создать();  
            ФормаИндикатора.Открыть();
			
			Найдено   = 0;
			НеНайдено = 0;
			ТекущееЗначениеПрогресса = 0;
			
			Для Каждого стрТочка Из мсТочки Цикл
				
				ТекущееЗначениеПрогресса = ТекущееЗначениеПрогресса + 1;
				ФормаИндикатора.ОбновитьЗначение(ТекущееЗначениеПрогресса);
				ФормаИндикатора.ОбновитьСостояние("Найдено: "+Найдено + ",  Не найдено: "+НеНайдено);
				
				ОбработкаПрерыванияПользователя();
				Если НЕ стрТочка.Адрес.ВходитВКлассификатор Тогда
					
					ПоискАдреса.ОбластьПоискаКлассификатор = Истина;
					ПоискАдреса.ОбластьПоискаЯндекс = Истина;
					тзАдреса = ПоискАдреса.ПолучитьТаблицуАдресов(стрТочка.Адрес_Пред);
					
					Если тзАдреса <> Неопределено Тогда
						Если тзАдреса.Количество() = 1 Тогда
							обТочкаДоставки = стрТочка.ТочкаДоставки.ПолучитьОбъект();
							НайденныйАдрес = тзАдреса[0].Ссылка;
							Если НЕ ЗначениеЗаполнено(НайденныйАдрес) Тогда
								НайденныйАдрес = ПоискАдреса.СоздатьНовыйАдрес(тзАдреса[0]);
							КонецЕсли;	
							обТочкаДоставки.Адрес = НайденныйАдрес;
							обТочкаДоставки.Записать();
							Найдено = Найдено + 1;
							Состояние("Найдено "+Найдено);
						Иначе 
							НеНайдено = НеНайдено + 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ФормаИндикатора.Закрыть();
			
		ИначеЕсли Параметр1 = "ЗавершитьПодготовку" Тогда
			ЗавершитьПодготовку();
		ИначеЕсли Параметр1 = "ОтменитьДоставки" Тогда
			ОтменитьДоставки();	
		ИначеЕсли Параметр1 = "ПоискАдреса" Тогда
			ПоискАдреса();
		ИначеЕсли Параметр1 = "Карта" Тогда
			Журнал.ФормаЖурнала.УстановитьВидимостьКарты(Параметр2);
		КонецЕсли;		
	ИначеЕсли Событие = "ВыбранаДругаяНастройка" Тогда
		Для Каждого ЭлТочкаНаКарте Из соОтображенияТочек Цикл
			Журнал.ФормаЖурнала.ПолеКарты.УдалитьОбъект(ЭлТочкаНаКарте.Значение);
		КонецЦикла;
		соОтображенияТочек.Очистить();
	ИначеЕсли Событие = "СобытиеСистемы" Тогда
		Если (Параметр1 = "ВыбранАдресИзПоискаАдреса") ИЛИ (Параметр1 = "ВыбранАдрес") Тогда
			Если Параметр3.ВладелецФормы = Журнал.ФормаЖурнала Тогда
				текТочка = Журнал.Дерево.ТекущиеДанные.ТочкаДоставки;
				обТочкаДоставки = текТочка.ПолучитьОбъект();
				обТочкаДоставки.Адрес = Параметр2;
				обТочкаДоставки.Записать();
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();
	КонецЕсли;
КонецФункции

Процедура УстановитьВыделениеТочек(Выделение)
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
	Для Каждого Строка Из Строки Цикл
		Строка.ОтображатьНаКарте = Выделение;
		ОтобразитьТочкуНаКарте(Строка);
	КонецЦикла;
КонецПроцедуры

Процедура Настроить()
	мсИнструменты = Новый Массив;
	ПараметрыЖурнала = Новый Структура("Инструменты", мсИнструменты);

	Если Не ПодготовкаДанных Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ОтобразитьВсеТочки", БиблиотекаКартинок.УстановитьФлажки, "", "Отобразить на карте все точки"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СкрытьВсеТочки", БиблиотекаКартинок.СнятьФлажки, "", "Скрыть все точки"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ДобавитьТочку",БиблиотекаКартинок.ДобавитьЭлементСписка , "", "Добавить точку"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СкопироватьТочку",БиблиотекаКартинок.СкопироватьЭлементСписка , "", "Скопировать точку"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "УдалитьТочку",БиблиотекаКартинок.УдалитьЭлементСписка , "", "Удалить точку"));
	КонецЕсли; 
	
	Если ПодготовкаДанных Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ГеокодироватьВсеТочки", БиблиотекаКартинок.новаКарта, "", "Геокодировать все точки"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ЗавершитьПодготовку", БиблиотекаКартинок.ВыполнитьЗадачу, "Завершить подготовку", "Завершить подготовку"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ОтменитьДоставки", БиблиотекаКартинок.новаДействиеОтмена, "Отменить доставки", "Отменить доставки"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПоискАдреса", БиблиотекаКартинок.новаПоиск, "Поиск адреса", "Поиск адреса"));
	КонецЕсли;
	
	Если ОткрыватьКарту Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, Триггер", "Карта", БиблиотекаКартинок.новаКарта, "Карта", "Показать карту", Ложь));
	КонецЕсли;
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	
	КонструкторДанных.ТекстЗапроса = "
	|Справочник.новаТочкиДоставки КАК ТочкиДоставки
	|{СОЕДИНЕНИЯ}";

	КонструкторДанных.ПостояннаяВыборка = ",
	|	ТочкиДоставки.Ссылка КАК ТочкаДоставки,
	|	Представление(ТочкиДоставки.Ссылка) КАК ТочкаДоставки_Пред,
	|	ТочкиДоставки.Адрес КАК Адрес,
	|	Представление(ТочкиДоставки.Адрес) КАК Адрес_Пред,
	|	ТочкиДоставки.Адрес.Широта КАК Широта,
	|	ТочкиДоставки.Адрес.Долгота КАК Долгота,
	|	ТочкиДоставки.Адрес.НеИмеетКоординат КАК НеИмеетКоординат,
	|	ТочкиДоставки.ВремяРаботыНачало КАК ВремяРаботыНачало,
	|	ТочкиДоставки.ВремяРаботыОкончание КАК ВремяРаботыОкончание,
	|	ТочкиДоставки.ВремяПребывания,
	|	ТочкиДоставки.ПометкаУдаления,
	|	ТочкиДоставки.Приоритет,
	|	Неопределено КАК ОкноРаботы,
	|	Ложь КАК ОтображатьНаКарте
	|";
	
	Если ПодготовкаДанных Тогда
		ОтборНеподготовленных = "(НЕ ТочкиДоставки.Подготовлена";
        
		мсРоль = Новый Массив;
		мсРоль.Добавить(Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки);
		мсРоль.Добавить(Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки);

		КонструкторДанных.ПостоянныйОтбор = ОтборНеподготовленных + "
		|	И ТочкиДоставки.Ссылка В(ВЫБРАТЬ
	    |	новаЗадачаМестнойДоставки.БизнесПроцесс.Доставка.ТочкаПрибытия КАК ТочкиДоставки
	    |ИЗ
	    |	Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
	    |ГДЕ
	    |	новаЗадачаМестнойДоставки.Выполнена = ЛОЖЬ
	    |	И новаЗадачаМестнойДоставки.Роль В(&Роль)))";
		
		КонструкторДанных.ДобавитьПараметр("ПустаяДата", '00010101');
		КонструкторДанных.ДобавитьПараметр("Роль", мсРоль);
	Иначе
		Если ЗначениеЗаполнено(ВладелецТочки) Тогда
			КонструкторДанных.ПостоянныйОтбор = "(ТочкиДоставки.ВладелецТочки = &ВладелецТочки)";
		    КонструкторДанных.ДобавитьПараметр("ВладелецТочки", ВладелецТочки);
		КонецЕсли;	
	КонецЕсли;
	
	КонструкторДанных.ДобавитьПоле("Приоритет");
	КонструкторДанных.ДобавитьОтборПоля(, "ТочкиДоставки.Приоритет");
	
	КонструкторДанных.ДобавитьПоле("ТочкаДоставки");
	КонструкторДанных.ДобавитьОтборПоля(, "ТочкиДоставки.Ссылка");
	
	КонструкторДанных.ДобавитьПоле("ОтображатьНаКарте");
	
	КонструкторДанных.ДобавитьПоле("Владелец");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ТочкиДоставки.ВладелецТочки");
	
	Если НЕ ЗначениеЗаполнено(ВладелецТочки) Тогда
		
		КонструкторДанных.ДобавитьОтборПоля(, "ТочкиДоставки.ВладелецТочки");
	КонецЕсли;
	
	КонструкторДанных.ДобавитьПоле("Адрес");
	КонструкторДанных.ДобавитьОтборПоля(, "ТочкиДоставки.Адрес");
	
	КонструкторДанных.ДобавитьПоле("Район");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Районы.Район");
	КонструкторДанных.ДобавитьОтборПоля(, "Районы.Район");
	КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаРайоныАдресов КАК Районы
	|ПО
	|	Районы.Классификатор = &КлассификаторРайонов И Районы.Адрес = " + "ТочкиДоставки.Адрес");
	
	КонструкторДанных.ДобавитьПоле("ВремяПребывания",, "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьОтборПоля(, "ТочкиДоставки.ВремяПребывания");
	
	КонструкторДанных.ДобавитьПоле("ВремяРаботыНачало",, "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьОтборПоля(, "ТочкиДоставки.ВремяРаботыНачало");
	
	КонструкторДанных.ДобавитьПоле("ВремяРаботыОкончание",, "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьОтборПоля(, "ТочкиДоставки.ВремяРаботыОкончание");
	
	КонструкторДанных.ДобавитьПоле("ОкноРаботы");
	
	КонструкторДанных.ДобавитьПоле("СменаПланирования");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ТочкиДоставки.СменаПланирования");
	КонструкторДанных.ДобавитьОтборПоля(, "ТочкиДоставки.СменаПланирования");
	
	КонструкторДанных.ДобавитьПараметр("КлассификаторРайонов", новаКарты.ПолучитьТекущийКлассификаторРайонов());
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Владелец");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Район");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("ТочкаДоставки"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

ПодготовкаДанных = Ложь;
ОткрыватьКарту = Ложь;

НастройкиГеокодирования = Новый Структура("БлижайшиеДома, МинКорпус", Ложь, Ложь); 

соОтображенияТочек = Новый Соответствие;

#КонецЕсли