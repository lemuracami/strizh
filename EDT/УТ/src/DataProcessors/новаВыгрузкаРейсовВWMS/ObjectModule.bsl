
Перем ФайлВыгрузки Экспорт;            // Последовательно записываемый/читаемый файл обмена
Перем Обмен Экспорт;
Перем СписокЗадач;

Процедура ВыгрузитьДанныеПоОбмену(_Обмен, _СписокЗадач = Неопределено,ПроверкаВыполненияЭтапа=Истина) Экспорт;
	
	Обмен 				= _Обмен;
	СписокЗадач			= _СписокЗадач;
	КаталогВыгрузки		= _Обмен.КаталогВыгрузки;
	КаталогВыгрузки 	= ПолучитьПутьКФайлам();
	ИмяФайлаВыгрузки    = "DELIVERY_"+Формат(ТекущаяДата(),"ДФ=""ггггММдд_ЧЧммсс_""")+"_OUT_UTL.xml";
	
	ВыгрузитьДанныеВWMS(ПроверкаВыполненияЭтапа);
	
КонецПРоцедуры

Процедура ВыгрузитьДанныеВWMS(ПроверкаВыполненияЭтапа) Экспорт;

	РегистраторыКонтекст	= Неопределено;
	РегистраторСобытий 		= Неопределено;
	
	РегистраторыКонтекст = Неопределено;
#Если Клиент Тогда	
	новаКонтекст.Свойство("РегистраторСобытий", РегистраторыКонтекст);
#Иначе	
	Если РегистраторыКонтекст = Неопределено Тогда
		РегистраторыКонтекст = Новый Соответствие;
	КонецЕсли;
#КонецЕсли
	
	РегистраторСобытий = РегистраторыКонтекст.Получить(Обмен.Код);
	Если РегистраторСобытий = Неопределено Тогда
		
		РегистраторСобытий = Обработки.новаРегистраторСобытий.Создать();
		РегистраторыКонтекст.Вставить(Обмен.Код, РегистраторСобытий);
	КонецЕсли;
	РегистраторСобытий.Заголовок = "Выполнение обмена данными по настройке: <"
									+ Обмен.Наименование+"> за период с : "
									+ ДатаНачВыгрузки + " по: " + ДатаКонВыгрузки;
	РегистраторСобытий.Сообщения.Очистить();
	
	РегистраторСобытий.Добавить(,,"Начало экспорта данных в WMS");
	
	ВыполнитьЭкспорт(РегистраторСобытий,ПроверкаВыполненияЭтапа);
	
	РегистраторСобытий.Добавить(,,"Завершение экспорта данных в WMS");
	
	//
	РегистраторСобытий.Добавить(,,"--- Обмен завершен");
	Если ЗаписыватьЛог Тогда
		РегистраторСобытий.ИмяРезультирующегоФайла = Обмен.КаталогВыгрузки + "\"+"log.mxl";
	Иначе
		РегистраторСобытий.ИмяРезультирующегоФайла = "";
	КонецЕсли;
	Если ВыводитьЛог Тогда
		РегистраторСобытий.ТихийРежим = Ложь;
	Иначе
		РегистраторСобытий.ТихийРежим = Истина;
	КонецЕсли;
	РегистраторСобытий.Вывести();	
	
КонецПРоцедуры

Процедура ВыполнитьЭкспорт(РегистраторСобытий,ПроверкаВыполненияЭтапа)
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(КаталогВыгрузки+ИмяФайлаВыгрузки, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Обмен");
		ЗаписьXML.ЗаписатьАтрибут("ИсточникВыгрузки", "УТЛ");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Документы"); 
		
    		ЗаписатьРейсы(ЗаписьXML, РегистраторСобытий,ПроверкаВыполненияЭтапа);
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); //Документы
	ЗаписьXML.ЗаписатьКонецЭлемента(); //Обмен
	
	ЗаписьXML.Закрыть();
КонецПроцедуры

Функция ПолучитьПутьКФайлам()
	//Формируем строку пути к файлам
	стрПуть = КаталогВыгрузки;
	стрПуть = СтрЗаменить(стрПуть, "/", "\");
	Если Не (Прав(стрПуть, 1) = "\") Тогда
		стрПуть = стрПуть + "\";
	КонецЕсли;
	Возврат стрПуть;
КонецФункции

Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт
    КаталогНаДиске = Новый Файл(ИмяКаталога);
    Если КаталогНаДиске.Существует() Тогда
        Возврат Истина;
    Иначе
#Если Клиент Тогда		
		Ответ = Вопрос("Каталог не существует. Создать?", 
                        РежимДиалогаВопрос.ОКОтмена);
        Если Ответ = КодВозвратаДиалога.ОК Тогда
            СоздатьКаталог(ИмяКаталога);
            Возврат Истина;
        Иначе
            Возврат Ложь;
		КонецЕсли;
#Иначе
     	СоздатьКаталог(ИмяКаталога);
        Возврат Истина;		
#КонецЕсли
    КонецЕсли;
КонецФункции

Функция ПолучитьРейсы(ПроверкаВыполненияЭтапа) Экспорт   	
	Запрос = Новый Запрос();
	
	Роль = Обмен.РольВыгрузки;
	Если Не ЗначениеЗаполнено(Роль) Тогда 
		Роль = Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки;
	КонецЕсли;	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
		 ПроверкаВыполненияЭтапа = Истина;
	КонецЕсли; 
    //ПроверкаВыполненияЭтапа;
	Если СписокЗадач = Неопределено Тогда
		стрТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                  |	Задачи.БизнесПроцесс.Номер КАК НомерРейса,
	                  |	Задачи.БизнесПроцесс.Дата КАК ДатаРейса,
	                  |	Задачи.БизнесПроцесс.ДатаНачала КАК ДатаНачалаРейса,
	                  |	Задачи.БизнесПроцесс.Транспорт КАК Транспорт,
	                  |	Задачи.БизнесПроцесс.Водитель КАК Водитель,
	                  |	Задачи.БизнесПроцесс.Экспедитор КАК Экспедитор,
	                  |	новаТочкиМаршрутаРейсов.НомерТочки + 1 НомерТочки,
	                  |	новаЗаданияРейсов.Доставка.Номер КАК НомерЗаказа,
	                  |	новаЗаданияРейсов.Доставка.Дата КАК ДатаЗаказа,
	                  |	новаЗаданияРейсов.Доставка.Вид КАК ВидОперации,
	                  |	новаТочкиМаршрутаРейсов.Действие,
	                  |	новаТочкиМаршрутаРейсов.ТочкаМаршрута.Адрес КАК АдресДоставки,
	                  |	новаЗаданияРейсов.Доставка.Грузополучатель КАК Грузополучатель,
	                  |	новаТочкиМаршрутаРейсов.НомерТочки + 1 КАК ПорядокПогрузкиВТС,
	                  |	новаСостоянияОбъектовДляОбмена.Состояние,
	                  |	Задачи.БизнесПроцесс.Ссылка КАК БизнесПроцессСсылка,
	                  |	новаЗаданияРейсов.Доставка.Ссылка КАК ДоставкаСсылка
	                  |ИЗ
	                  |	Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(
					  |			&Роль,
					  |			(Выполнена = &Выполнена)
					  //|				И (БизнесПроцесс.ДатаНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаКонец, ДЕНЬ))
					  |) КАК Задачи
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаТочкиМаршрутаРейсов КАК новаТочкиМаршрутаРейсов
	                  |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	                  |			ПО новаТочкиМаршрутаРейсов.КодТочки = новаЗаданияРейсов.КодТочки
	                  |				И новаТочкиМаршрутаРейсов.Рейс = новаЗаданияРейсов.Рейс
	                  |		ПО Задачи.БизнесПроцесс = новаТочкиМаршрутаРейсов.Рейс
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаСостоянияОбъектовДляОбмена КАК новаСостоянияОбъектовДляОбмена
	                  |		ПО Задачи.БизнесПроцесс.Ссылка = новаСостоянияОбъектовДляОбмена.Объект.Ссылка
	                  |ГДЕ
	                  |	новаТочкиМаршрутаРейсов.МаршрутСопровождения = ЛОЖЬ
	                  |	И (НЕ новаТочкиМаршрутаРейсов.Действие = ЗНАЧЕНИЕ(Перечисление.новаДействияВТочкеРейсаМестнойДоставки.Погрузка))
	                  |	И новаСостоянияОбъектовДляОбмена.Состояние = ЗНАЧЕНИЕ(Перечисление.новаСостоянияОбъектовДляОбмена.Подготовлен)
	                  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	ДатаРейса,
	                  |	НомерТочки УБЫВ
	                  |ИТОГИ ПО
	                  |	БизнесПроцессСсылка";
					  
		//Запрос.УстановитьПараметр("ДатаНачала",ДатаНачВыгрузки);
		//Запрос.УстановитьПараметр("ДатаКонец",ДатаКонВыгрузки);
		Запрос.УстановитьПараметр("Роль", Роль);
					  
	Иначе
		стрТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                  |	Задачи.БизнесПроцесс.Номер КАК НомерРейса,
		                  |	Задачи.БизнесПроцесс.Дата КАК ДатаРейса,
		                  |	Задачи.БизнесПроцесс.ДатаНачала КАК ДатаНачалаРейса,
		                  |	Задачи.БизнесПроцесс.Транспорт КАК Транспорт,
		                  |	Задачи.БизнесПроцесс.Водитель КАК Водитель,
		                  |	Задачи.БизнесПроцесс.Экспедитор КАК Экспедитор,
		                  |	новаТочкиМаршрутаРейсов.НомерТочки + 1 КАК НомерТочки,
		                  |	новаЗаданияРейсов.Доставка.Номер КАК НомерЗаказа,
		                  |	новаЗаданияРейсов.Доставка.Дата КАК ДатаЗаказа,
		                  |	новаЗаданияРейсов.Доставка.Вид КАК ВидОперации,
		                  |	новаТочкиМаршрутаРейсов.Действие,
		                  |	новаТочкиМаршрутаРейсов.ТочкаМаршрута.Адрес КАК АдресДоставки,
		                  |	новаЗаданияРейсов.Доставка.Грузополучатель КАК Грузополучатель,
		                  |	новаТочкиМаршрутаРейсов.НомерТочки + 1 КАК ПорядокПогрузкиВТС,
		                  |	новаСостоянияОбъектовДляОбмена.Состояние,
		                  |	Задачи.БизнесПроцесс.Ссылка КАК БизнесПроцессСсылка,
		                  |	новаЗаданияРейсов.Доставка.Ссылка КАК ДоставкаСсылка
		                  |ИЗ
		                  |	Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(
		                  |			&Роль,
		                  |			Выполнена = &Выполнена
		                  |				И Ссылка В (&спЗадачи)) КАК Задачи
		                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаТочкиМаршрутаРейсов КАК новаТочкиМаршрутаРейсов
		                  |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
		                  |			ПО новаТочкиМаршрутаРейсов.КодТочки = новаЗаданияРейсов.КодТочки
		                  |				И новаТочкиМаршрутаРейсов.Рейс = новаЗаданияРейсов.Рейс
		                  |		ПО Задачи.БизнесПроцесс = новаТочкиМаршрутаРейсов.Рейс
		                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаСостоянияОбъектовДляОбмена КАК новаСостоянияОбъектовДляОбмена
		                  |		ПО Задачи.БизнесПроцесс.Ссылка = новаСостоянияОбъектовДляОбмена.Объект.Ссылка
		                  |ГДЕ
		                  |	новаТочкиМаршрутаРейсов.МаршрутСопровождения = ЛОЖЬ
		                  |	И (НЕ новаТочкиМаршрутаРейсов.Действие = ЗНАЧЕНИЕ(Перечисление.новаДействияВТочкеРейсаМестнойДоставки.Погрузка))
		                  |	И новаСостоянияОбъектовДляОбмена.Состояние = ЗНАЧЕНИЕ(Перечисление.новаСостоянияОбъектовДляОбмена.Подготовлен)
		                  |
		                  |УПОРЯДОЧИТЬ ПО
		                  |	ДатаРейса,
		                  |	НомерТочки УБЫВ
		                  |ИТОГИ ПО
		                  |	БизнесПроцессСсылка";
					  
		спЗадачи = Новый СписокЗначений();			  
		Для Каждого ЭлЗадача Из СписокЗадач Цикл
			спЗадачи.Добавить(ЭлЗадача.Ключ);
		КонецЦикла;
					  
		Запрос.УстановитьПараметр("спЗадачи",спЗадачи);
		//Проверяем этап доставки  	Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки
		//Этап = Справочники.новаЭтапыМестнойДоставки.ПустаяСсылка();
		//Выполнена = Ложь;
		//Для Каждого ЭлЗадача Из СписокЗадач Цикл
		//	Этап = ЭлЗадача.Ключ.Роль;
		//	Выполнена = ЭлЗадача.Ключ.Выполнена;
		//	Прервать;
		//КонецЦикла;

		//Запрос.УстановитьПараметр("Выполнена",Истина);//Выполнена);
		Запрос.УстановитьПараметр("Роль", Роль);
					  
	КонецЕсли;	
	Запрос.УстановитьПараметр("Выполнена",ПроверкаВыполненияЭтапа);//Выполнена);	
    Запрос.Текст = стрТекстЗапроса;

	Результат = Запрос.Выполнить();
	Возврат Результат;
КонецФункции

//Процедура последовательно записывает рейсы в XML
Процедура ЗаписатьРейсы(ЗаписьXML, РегистраторСобытий = Неопределено, ПроверкаВыполненияЭтапа=Истина) Экспорт
	
	РезультатЗапроса = ПолучитьРейсы(ПроверкаВыполненияЭтапа);
	
	ВыборкаРейс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ"); 
	ЗаписьXML.ЗаписатьНачалоАтрибута("ИмяДокумента");
	ЗаписьXML.ЗаписатьТекст("РейсМестнойДоставки");
	ЗаписьXML.ЗаписатьКонецАтрибута();
	ЗаписьXML.ЗаписатьНачалоАтрибута("Количество");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаРейс.Количество()));
	ЗаписьXML.ЗаписатьКонецАтрибута();

	Если ВыборкаРейс.Количество() = 0 Тогда
		новаОбмены.РегистрацияСобытия(РегистраторСобытий, СтатусСообщения.Информация, "Информация", "Объекты для экспорта отсутствуют.");
	КонецЕсли;

	Пока ВыборкаРейс.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("ДокументСсылка");
		
		//Атрибуты рейса
		//Номер рейса
		ЗаписьXML.ЗаписатьНачалоАтрибута("НомерРейса");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаРейс.НомерРейса));              
		ЗаписьXML.ЗаписатьКонецАтрибута();
		//Дата рейса
		ЗаписьXML.ЗаписатьНачалоАтрибута("ДатаРейса");
		ЗаписьXML.ЗаписатьТекст(Формат(ВыборкаРейс.ДатаРейса,"ДФ=""ггггММддЧЧммсс"""));
		ЗаписьXML.ЗаписатьКонецАтрибута();
		//ДатаНачалаРейса
		ЗаписьXML.ЗаписатьНачалоАтрибута("ДатаНачалаРейса");
		ЗаписьXML.ЗаписатьТекст(Формат(ВыборкаРейс.ДатаНачалаРейса,"ДФ=""ггггММддЧЧммсс"""));
		ЗаписьXML.ЗаписатьКонецАтрибута();
		//Транспорт
		ЗаписьXML.ЗаписатьНачалоАтрибута("Транспорт");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаРейс.Транспорт.Код));
		ЗаписьXML.ЗаписатьКонецАтрибута();
		//Марка
		ЗаписьXML.ЗаписатьНачалоАтрибута("Марка");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(?(ЗначениеЗаполнено(ВыборкаРейс.Транспорт.Марка),ВыборкаРейс.Транспорт.Марка.Наименование,"")));
		ЗаписьXML.ЗаписатьКонецАтрибута();
		//Гос номер
		ЗаписьXML.ЗаписатьНачалоАтрибута("ГосНомер");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаРейс.Транспорт.НомерГосударственнойРегистрации));
		ЗаписьXML.ЗаписатьКонецАтрибута();
		//Водитель
		ЗаписьXML.ЗаписатьНачалоАтрибута("Водитель");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаРейс.Водитель.Код));
		ЗаписьXML.ЗаписатьКонецАтрибута();
		//Табельный номер
		ЗаписьXML.ЗаписатьНачалоАтрибута("ТабельныйНомер");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаРейс.Водитель.ТабельныйНомер));
		ЗаписьXML.ЗаписатьКонецАтрибута();
		
		//Данные для печати ТТН из КИС
		ЗаписьXML.ЗаписатьНачалоАтрибута("ДанныеДляПечатиТТН");
		ДанныеДляПечатиТТН = 	ВыборкаРейс.Транспорт.Марка.Наименование + ";" +
								ВыборкаРейс.Транспорт.НомерГосударственнойРегистрации + ";" +
								ВыборкаРейс.Транспорт.ГаражныйНомер + ";" +
								ВыборкаРейс.Водитель.ФизЛицо.Наименование + ";" +
								ВыборкаРейс.Водитель.ТабельныйНомер + ";" +
								ВыборкаРейс.Водитель.Класс + ";" +
								ВыборкаРейс.Водитель.Наемный + ";" +
								ВыборкаРейс.Экспедитор.ФизЛицо.Наименование;								
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ДанныеДляПечатиТТН));
		ЗаписьXML.ЗаписатьКонецАтрибута();

		ВыборкаЗадания = ВыборкаРейс.Выбрать();
		ш=1;
		//Тег Табличная часть
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
		//
		ЗаписьXML.ЗаписатьНачалоАтрибута("ИмяТабличнойЧасти");
		ЗаписьXML.ЗаписатьТекст("МестнаяДоставка");
		ЗаписьXML.ЗаписатьКонецАтрибута();
		//
		ЗаписьXML.ЗаписатьНачалоАтрибута("Количество");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаЗадания.Количество()));
		ЗаписьXML.ЗаписатьКонецАтрибута();
	
	    //Регистрируем сообщения
		новаОбмены.РегистрацияСобытия(РегистраторСобытий, СтатусСообщения.Информация, "Экспорт", "Экспортирован: ", ВыборкаРейс.БизнесПроцессСсылка);
		новаОбмены.УвеличитьКоличествоБП(РегистраторСобытий);

		Пока ВыборкаЗадания.Следующий() Цикл
			//Тег Строка
			ЗаписьXML.ЗаписатьНачалоЭлемента("Строка");
			
			//КодСинхронизации
			ЗаписьXML.ЗаписатьНачалоАтрибута("КодСинхронизации");
			ЗаписьXML.ЗаписатьТекст("Продажа;"+Формат(ВыборкаЗадания.ДатаЗаказа,"ДФ=""ггггММддЧЧммсс""")+";"+СОКРЛП(XMLСтрока(ВыборкаЗадания.НомерЗаказа)));
			ЗаписьXML.ЗаписатьКонецАтрибута();
			//ДатаЗаявкиКИС
			ЗаписьXML.ЗаписатьНачалоАтрибута("ДатаЗаявкиКИС");
			ЗаписьXML.ЗаписатьТекст(Формат(ВыборкаЗадания.ДатаЗаказа,"ДФ=""ггггММддЧЧммсс"""));
			ЗаписьXML.ЗаписатьКонецАтрибута();
			
			//НомерЗаявкиКИС
			ЗаписьXML.ЗаписатьНачалоАтрибута("НомерЗаявкиКИС");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаЗадания.НомерЗаказа));
			ЗаписьXML.ЗаписатьКонецАтрибута();
	
			//ВидОперации
			ЗаписьXML.ЗаписатьНачалоАтрибута("ВидОперации");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока("Продажа"));
			ЗаписьXML.ЗаписатьКонецАтрибута();
			
			//ПорядокПогрузкиВТС
			ЗаписьXML.ЗаписатьНачалоАтрибута("ПорядокПогрузкиВТС");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаЗадания.ПорядокПогрузкиВТС));
			ЗаписьXML.ЗаписатьКонецАтрибута();

			ЗаписьXML.ЗаписатьКонецЭлемента(); //Тег Строка
			ш=ш+1;
		
			новаОбмены.РегистрацияСобытия(РегистраторСобытий, СтатусСообщения.Информация, "Экспорт", "Экспортирован: ", ВыборкаЗадания.ДоставкаСсылка);
			//новаОбмены.УвеличитьКоличествоБП(РегистраторСобытий);
		КонецЦикла;
		
		//Табличная часть  
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Тег Табличная часть
		
		//Документ 
		ЗаписьXML.ЗаписатьКонецЭлемента(); //Тег ДокументСсылка
	
		//Пишем в регистр отметку о том, что объект выгружен
		Отбор = Новый Структура("Объект");
		Отбор.Объект =  ВыборкаРейс.БизнесПроцессСсылка;
		регСостояния = РегистрыСведений.новаСостоянияОбъектовДляОбмена;
		менИзменения = Неопределено;
		выбИзменения = регСостояния.Выбрать(Отбор);
		Если выбИзменения.Следующий() Тогда
			менИзменения = выбИзменения.ПолучитьМенеджерЗаписи();
			менИзменения.Состояние = Перечисления.новаСостоянияОбъектовДляОбмена.Выгружен;
			менИзменения.Записать();
		КонецЕсли;

	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //Тег Документ
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохраняемый в файл
//
Процедура ЗаписатьВФайл(Узел) Экспорт
	
КонецПроцедуры // ЗаписатьВФайл()

Процедура ПолучитьСтруктуруРейса() Экспорт
	СтруктураРейса = Новый Структура;
	СтруктураРейса.Вставить("ИмяДокумента", "Рейс");
	СтруктураРейса.Вставить("ТипДокумента", БизнесПроцессы.новаРейсМестнойДоставки.ПустаяСсылка());
	СтруктураРейса.Вставить("СтрокаПоиска", БизнесПроцессы.новаРейсМестнойДоставки.НайтиПоРеквизиту());
 КонецПроцедуры
                                              