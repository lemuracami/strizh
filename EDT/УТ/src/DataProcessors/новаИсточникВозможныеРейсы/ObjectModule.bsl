#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Если Истина, то добавляет в журнал кнопку подбора доставок по карте в текущий транспорт.
//
Перем Подбор Экспорт; // <Булево>

// Если Истина, то добавляет в журнал функциональность оперативного назначения районов транспорту.
//
Перем ОперативноеНазначениеРайонов Экспорт; // <Булево>

// Если Истина, то добавляет группировки возможных рейсов по категориям транспорта.
//
Перем ГруппировкиПоКатегориям Экспорт; // <Булево>

// Содержит имена полей категорий транспорта. 
//
Перем мсГруппировкиКатегорий Экспорт; // <Булево>

// Позволяет передавать в запрос временные таблицы, в частности таблицу текущего распределения транспорта по районам.
//
Перем МенеджерВременныхТаблиц Экспорт; // <МенеджерВременныхТаблиц>

// Если Истина, то при выборе возможного рейса будет генерироваться оповещение "ВыбранВозможныйРейс".
//
Перем ОповещатьПриВыборе Экспорт; // <Булево>

// Объект, у которого при выборе возможного рейса будет вызываться метод ОбработкаВыбораТранспорта().
//
Перем ОбработчикВыбора Экспорт; // <ПроизвольныйОбъект>

// Если Истина, то доступна кнопка оперативного назначения районов.
//
Перем ДоступностьКнопкиНазначитьРайоны Экспорт; // <Булево>

// Если Истина, то доступна кнопка ввода заявок перевозчика.
//
Перем ВводитьЗаявкиПеревозчиков Экспорт; // <Булево>

// Если Истина, то в журнал выводится транспорт, указанный в договорах контрагентов.
//
Перем ВыводитьТранспортПеревозчиков Экспорт; // <Булево>

Перем ЖурналНачалоПериода, ЖурналКонецПериода;
Перем ДатаПланирования;
Перем РазмерПериода;
Перем СменаПланирования;

Перем ВсеВодители;
Перем ВесьТранспорт;
Перем СуммаГрузоподъемности;
Перем СуммаГрузовместимости;
Перем ТипКоличества;
Перем СуществующиеРейсы;

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	Подбор = Неопределено;
	ОперативноеНазначениеРайонов = Неопределено;
	ГруппировкиПоКатегориям = Неопределено;
	мсГруппировкиКатегорий = Неопределено;
	МенеджерВременныхТаблиц = Неопределено;
	ОповещатьПриВыборе = Неопределено;
	ОбработчикВыбора = Неопределено;
	ДоступностьКнопкиНазначитьРайоны = Неопределено;
	ВводитьЗаявкиПеревозчиков = Неопределено;
	ВыводитьТранспортПеревозчиков = Неопределено;
	ЖурналНачалоПериода = Неопределено;
	ЖурналКонецПериода = Неопределено;
	ДатаПланирования = Неопределено;
	РазмерПериода = Неопределено;
	СменаПланирования = Неопределено;
	ВсеВодители = Неопределено;
	ВесьТранспорт = Неопределено;
	СуммаГрузоподъемности = Неопределено;
	СуммаГрузовместимости = Неопределено;
	ТипКоличества = Неопределено;
	СуществующиеРейсы = Неопределено;
	
КонецПроцедуры

Процедура ПросуммироватьСтрокуТранспорта(Строка)
	Если Строка.Источник <> ЭтотОбъект Тогда Возврат; КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Транспорт) Тогда
		Если ВсеВодители.НайтиПоЗначению(Строка.Водитель) = Неопределено Тогда
			ВсеВодители.Добавить(Строка.Водитель);
		КонецЕсли;	
		Если ВесьТранспорт.НайтиПоЗначению(Строка.Транспорт) = Неопределено Тогда
			ВесьТранспорт.Добавить(Строка.Транспорт);
			СуммаГрузоподъемности = СуммаГрузоподъемности + ?(Строка.Грузоподъемность = Неопределено, 0, Строка.Грузоподъемность);
			СуммаГрузовместимости = СуммаГрузовместимости + ?(Строка.ОбъемКузова = Неопределено, 0, Строка.ОбъемКузова);
		КонецЕсли;	
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из Строка.Строки Цикл
		ПросуммироватьСтрокуТранспорта(ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если ДанныеСтроки.Группировка = NULL Тогда
	Иначе
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
	стрРейс = СуществующиеРейсы.Найти(ДанныеСтроки.Транспорт,"Транспорт");
	Если стрРейс <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.Транспорт.Картинка = БиблиотекаКартинок.новаРейс;
		ОформлениеСтроки.Ячейки.Транспорт.ОтображатьКартинку = Истина;
	КонецЕсли;	
	
	Рейтинг = ОформлениеСтроки.Ячейки.Найти("Рейтинг");
	Если Рейтинг <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Рейтинг) Тогда
			Если ДанныеСтроки.Рейтинг > 0 Тогда
				Рейтинг.УстановитьКартинку(БиблиотекаКартинок.новаРостРейтинга);
			КонецЕсли;
			
			Если ДанныеСтроки.Рейтинг < 0 Тогда
				Рейтинг.УстановитьКартинку(БиблиотекаКартинок.новаПадениеРейтинга);
				Рейтинг.УстановитьТекст(Строка(- ДанныеСтроки.Рейтинг));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
	
	ИначеЕсли Событие = "Выбор" Тогда
		Если Параметр1.Группировка = NULL Тогда
			Если ОбработчикВыбора = Неопределено Тогда
				Если ОперативноеНазначениеРайонов Или ОповещатьПриВыборе Тогда
					Оповестить("ВыбранВозможныйРейс", Параметр1, ЭтотОбъект);
				Иначе
					ВвестиНовуюКорректировкуВозможногоРейса();
				КонецЕсли;
			Иначе
				ОбработчикВыбора.ОбработкаВыбораТранспорта(Параметр1);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "АктивизированаСтрока" Тогда
		ВсеВодители = Новый СписокЗначений();
		ВесьТранспорт = Новый СписокЗначений();
 		СуммаГрузоподъемности = 0;
 		СуммаГрузовместимости = 0;
		
		Если Журнал.Дерево.ВыделенныеСтроки.Количество() = 1 Тогда
			СтрокиЖурнала = Журнал.Дерево.Значение.Строки;
			ТипКоличества = "Все";
		Иначе	     
			СтрокиЖурнала = Журнал.Дерево.ВыделенныеСтроки;
			ТипКоличества = "Выд";
		КонецЕсли;	
		
		Для Каждого ВыделеннаяСтрока Из СтрокиЖурнала Цикл
			Если ВыделеннаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
			ПросуммироватьСтрокуТранспорта(ВыделеннаяСтрока);
		КонецЦикла;
		
		Текст = "";
		
		Если ВсеВодители.Количество() > 0 Тогда
			Текст = Текст + ?(Текст = "", ТипКоличества+": ", " ") + ВсеВодители.Количество() + " водит.";    		
		КонецЕсли; 
		
		Если ВесьТранспорт.Количество() > 0 Тогда
			Текст = Текст + ?(Текст = "", ТипКоличества+": ", ", ") + ВесьТранспорт.Количество() + " трансп.";    		
		КонецЕсли; 
		
		Если СуммаГрузоподъемности > 0 Тогда
			Текст = Текст + ?(Текст = "", "", ", ") + СуммаГрузоподъемности + " т.";    		
		КонецЕсли; 
		
		Если СуммаГрузовместимости > 0 Тогда
			Текст = Текст + ?(Текст = "", "", ", ") + СуммаГрузовместимости + " куб.м.";    		
		КонецЕсли; 
		
		Текст = Текст + "";
		
		Журнал.УстановитьТекстЗаголовка(Текст);
		
		
	ИначеЕсли Событие = "УстановленФильтр" Тогда
		Если Параметр1.Свойство("ДатаНачала") Тогда
			ЖурналНачалоПериода = Параметр1.ДатаНачала;
		КонецЕсли;
		Если Параметр1.Свойство("ДатаКонца") Тогда
			ЖурналКонецПериода = Параметр1.ДатаКонца;
		КонецЕсли;
		Если Параметр1.Свойство("ДатаПланирования") Тогда
			ДатаПланирования = Параметр1.ДатаПланирования;
		КонецЕсли;
		Если Параметр1.Свойство("СменаПланирования") Тогда
			СменаПланирования = Параметр1.СменаПланирования;
		КонецЕсли;
		Если Параметр1.Свойство("РазмерПериода") Тогда
			РазмерПериода = Параметр1.РазмерПериода;
		КонецЕсли;
		
		СформироватьОтбор();
		НастроитьСпособОпределенияРайонаВозможногоРейса();
		СуществующиеРейсы = новаМестнаяДоставка.ПолучитьРейсыНаДату(ДатаПланирования);
		
	ИначеЕсли Событие = "ИзменениеПараметров" Тогда
		
	ИначеЕсли Событие = "СобытиеСистемы" Тогда
		Если Параметр1 = "ИзмененоОперативноеРаспределениеВозможныхРейсовПоРайонам" Тогда
			НастроитьСпособОпределенияРайонаВозможногоРейса();
		КонецЕсли;
		
		Если Параметр1 = "новаИзмененыТаблицы" Тогда
			
			ОбновитьСписокСуществующихРейсов = Ложь;
			
			Для каждого Таблица Из Параметр2 Цикл
				
				ОбновитьСписокСуществующихРейсов =  ОбновитьСписокСуществующихРейсов или (Таблица = "Задача.новаЗадачаРейсаМестнойДоставки");
			КонецЦикла;
			
			Если ОбновитьСписокСуществующихРейсов Тогда
				СуществующиеРейсы = новаМестнаяДоставка.ПолучитьРейсыНаДату(ДатаПланирования);
			КонецЕсли;
		КонецЕсли;

		
	ИначеЕсли Событие = "НачатьПеретаскивание" Тогда
		Возврат Новый Структура("Вид, ВозможныеРейсы", "ВозможныеРейсыМестнойДоставки", Параметр1);
		
	ИначеЕсли Событие = "ПроверитьВозможностьПеретаскивания" Тогда
		Если Параметр2 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Параметр2.Группировка <> NULL Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Параметр1.Вид = "РейсыМестнойДоставки" Тогда
			Если Параметр1.Рейсы.Количество() > 1 Или Параметр2 = Неопределено Тогда
				Возврат Истина;
			Иначе
				текРейс = Параметр1.Рейсы[0];
				Если Параметр2.Транспорт <> текРейс.Транспорт
				 Или Параметр2.Водитель <> текРейс.Водитель Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Возврат Ложь;
			
		ИначеЕсли Параметр1.Вид = "ПланируемыеДоставки" Тогда
			Если Параметр2 = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			Возврат Истина;
			
		ИначеЕсли Параметр1.Вид = "ТочкиМаршрутаРейса" Тогда
			Если Параметр2 = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			Возврат Истина;
			
		КонецЕсли;
		Возврат Ложь;
		
	ИначеЕсли Событие = "ПеретаскиваниеОкончено" Тогда
		Если Параметр1.Вид = "РейсыМестнойДоставки" Тогда
			Если Параметр2 = Неопределено Тогда
				РасформироватьРейсы(Параметр1.Рейсы);
			Иначе
				ПереместитьРейсыВДругойТранспорт(Параметр2, Параметр1.Рейсы);
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли Параметр1.Вид = "ПланируемыеДоставки" Тогда
			Отказ = Ложь;
			СоздатьРейсы(Параметр2, Параметр1.Доставки, Отказ);
			Возврат не Отказ;
			
		ИначеЕсли Параметр1.Вид = "ДоставкиРейса" Тогда
			Отказ = Ложь;
			ПереместитьДоставкиВНовыйРейс(Параметр1.Рейс, Параметр2, Параметр1.Доставки, Отказ);
			Возврат не Отказ;
			
		КонецЕсли;
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "НачатьПодбор" Тогда
			Если ЗначениеЗаполнено(Журнал.ТекущиеДанные) Тогда
				Если ЗначениеЗаполнено(Журнал.ТекущиеДанные.Транспорт) Тогда
					Оповестить("НачатьПодборВозможногоРейса", Журнал.ТекущиеДанные, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Параметр1 = "НазначитьРайоны" Тогда
			ФормаРаспределения = РегистрыСведений.новаОперативноеРаспределениеВозможныхРейсовПоРайонам.ПолучитьФорму("ОперативноеРаспределениеВозможныхРейсовПоРайонам", Журнал.ФормаЖурнала);
			ФормаРаспределения.ДатаПланирования = ДатаПланирования;
			ФормаРаспределения.СменаПланирования = СменаПланирования;
			ФормаРаспределения.Открыть();
			
		ИначеЕсли Параметр1 = "РедактироватьКалендарь" Тогда
			ВвестиНовуюКорректировкуВозможногоРейса();
			СформироватьОтбор();
			
		ИначеЕсли Параметр1 = "ВвестиЗаявкуПеревозчика" Тогда
			ДокЗаявкаПеревозчика = Документы.новаЗаявкаПеревозчика.СоздатьДокумент();
			ДокЗаявкаПеревозчика.ПолучитьФорму().Открыть();
			
		ИначеЕсли Параметр1 = "ВвестиКорректировку" Тогда
			Если ЗначениеЗаполнено(Журнал.ТекущиеДанные) Тогда
				Если Журнал.ТекущиеДанные.ПоКалендарю Тогда
					ВвестиНовуюКорректировкуВозможногоРейса();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();
	КонецЕсли;	
КонецФункции

Процедура ВвестиНовуюКорректировкуВозможногоРейса()
	Форма = РегистрыСведений.новаКалендарьВозможныхРейсов.ПолучитьФорму("РедактированиеКалендаряВозможныхРейсов");
	Форма.ДатаПланирования = ЖурналНачалоПериода;
	Форма.Открыть();
КонецПроцедуры

Процедура ПереместитьДоставкиВНовыйРейс(РейсИсточник, ТекущаяСтрока, Доставки, Отказ = ложь)
	НачатьТранзакцию();
	
	ИсключитьДоставкиИзРейса(РейсИсточник, Доставки);
	
	СоздатьРейсы(ТекущаяСтрока, Доставки, Отказ);
	
	Если не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		
		обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
		стРейсИсточник = обМаршрут.НачатьРедактирование(РейсИсточник, Неопределено);
		
		обМаршрут.ПересчитатьРейс_(стРейсИсточник);
		
		стРейсИсточник.Рейс.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьДоставкиИзРейса(Рейс, Доставки) Экспорт
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	обМаршрут.НачатьРедактирование(Рейс, Неопределено);
	Для Каждого Доставка Из Доставки Цикл
		обМаршрут.УдалитьДоставку(Рейс, Доставка);
	КонецЦикла;
	обМаршрут.ЗакончитьРедактирование();
КонецПроцедуры
	
Процедура СоздатьРейсы(ТекущаяСтрока, Доставки, Отказ = Ложь)
		
	обРейс = БизнесПроцессы.новаРейсМестнойДоставки.СоздатьБизнесПроцесс();
	обРейс.Дата = ТекущаяДата();
	обРейс.Транспорт = ТекущаяСтрока.Транспорт;
	обРейс.Водитель = ТекущаяСтрока.Водитель;
	обРейс.ДатаНачала = ТекущаяСтрока.НачалоПериода;
	обРейс.ДатаКонца = ТекущаяСтрока.КонецПериода;
	обРейс.НачалоРейса = ТекущаяСтрока.НачалоРейса;
	обРейс.КонецРейса = ТекущаяСтрока.ТочкаВыезда;
	обРейс.Экспедитор = ТекущаяСтрока.Экспедитор;
	обРейс.ЧасовойПояс = ПараметрыСеанса.новаТекущийПользователь.ЧасовойПояс;
	Рейс = БизнесПроцессы.новаРейсМестнойДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор());
	обРейс.УстановитьСсылкуНового(Рейс);
	обРейс.КонецРейсаСовпадаетСНачалом = Константы.новаКонецРейсаСовпадаетСНачаломПоУмолчанию.Получить();
	обРейс.КоэффициентСкорости = Константы.новаКоэффициентСкоростиПоУмолчанию.Получить();
	обРейс.МаксимальноеВремяОжидания = Константы.новаМаксимальноеВремяОжиданияРазгрузкиПоУмолчанию.Получить();
	
	Если обРейс.КонецРейсаСовпадаетСНачалом Тогда
		обРейс.КонецРейса = обРейс.НачалоРейса;
	КонецЕсли;
	
	обРейс.НачалоРейсаУказаноВручную = ЗначениеЗаполнено(обРейс.НачалоРейса);
	
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = обМаршрут.НачатьРедактирование(Рейс, обРейс);
	Для Каждого Доставка Из Доставки Цикл
		обМаршрут.ДобавитьДоставку(Рейс, Доставка);
	КонецЦикла;
	
	Если НЕ обРейс.КонецРейсаСовпадаетСНачалом Тогда
		обРейс.КонецРейса  = обМаршрут.ПолучитьКонецРейса(Рейс);
	КонецЕсли;
	
	обМаршрут.ПересчитатьРейс_(стРейс, , Ложь);
	
	Если стРейс.Рейс.ПроверитьСоответствиеДоставокТранспорту() Тогда
		
		обМаршрут.ПересчитатьРейсКСЛ(Рейс, Истина);
		обРейс.Старт();
				
		мсТаблицы = Новый Массив;
		мсТаблицы.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
		новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
		
		Оповестить("ОбновленКалендарьВозможныхРейсов");
		
	Иначе
		
		стРейс.Рейс = Неопределено;
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПереместитьРейсыВДругойТранспорт(ТекущаяСтрока, мсРейсы)
	Рейс = мсРейсы[0];
	
	НачатьТранзакцию();
			
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = обМаршрут.НачатьРедактирование(Рейс.Рейс, Неопределено);
	
	обРейс = стРейс.Рейс;
	обРейс.Транспорт = ТекущаяСтрока.Транспорт;
	обРейс.Водитель = ТекущаяСтрока.Водитель;
	обРейс.ДатаНачала = ТекущаяСтрока.НачалоПериода;
	обРейс.ДатаКонца = ТекущаяСтрока.КонецПериода;
	обРейс.НачалоРейса = ТекущаяСтрока.НачалоРейса;
	обРейс.КонецРейса = ТекущаяСтрока.ТочкаВыезда;
	обРейс.Экспедитор = ТекущаяСтрока.Экспедитор;
	
	
	Для Каждого ДопРейс Из мсРейсы Цикл
		Если ДопРейс = Рейс Тогда Продолжить; КонецЕсли;
		
		обДопМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
		обДопМаршрут.НачатьРедактирование(ДопРейс.Рейс, Неопределено);
		
		мсДоставки = обДопМаршрут.ПолучитьДоставкиВПорядкеВыполнения(ДопРейс.Рейс);
		Для Каждого Доставка Из мсДоставки Цикл
			обМаршрут.ДобавитьДоставку(Рейс.Рейс, Доставка);	
		КонецЦикла;
		
		обЗадача = ДопРейс.ЗадачаРейса.ПолучитьОбъект();
		обЗадача.РейсОтменен = Истина;
		обЗадача.ВыполнитьЗадачу();
		
	КонецЦикла;
	
	обМаршрут.ПересчитатьРейс_(стРейс);
	
	Если стРейс.Рейс.ПроверитьСоответствиеДоставокТранспорту() Тогда
		
		обМаршрут.ЗакончитьРедактирование(, Ложь);
		обРейс.Записать();
		ЗафиксироватьТранзакцию();
		
		
		мсТаблицы = Новый Массив;
		мсТаблицы.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
		новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
		
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;

КонецПроцедуры

Процедура РасформироватьРейсы(Рейсы)
	
	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	
	Для Каждого Рейс Из Рейсы Цикл
		
		НачатьТранзакцию();
		
		обЗадача = Рейс.ЗадачаРейса.ПолучитьОбъект();
		обЗадача.РейсОтменен = Истина;
		обЗадача.ВыполнитьЗадачу();
		
		РейсКСЛ = КСЛ.Доставка_Рейс();
		РейсКСЛ.Ид = Строка(обЗадача.БизнесПроцесс.УникальныйИдентификатор());
		РейсКСЛ.Удалить();
		
		РейсКСЛ = КСЛ.Сопровождение_СопровождениеРейса();
		РейсКСЛ.Ид = Строка(обЗадача.БизнесПроцесс.УникальныйИдентификатор());
		РейсКСЛ.Удалить();
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	мсТаблицы = Новый Массив;
	мсТаблицы.Добавить("Задача.новаЗадачаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
КонецПроцедуры

Процедура СформироватьОтбор()
	КонструкторДанных.ДобавитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
	КонструкторДанных.ДобавитьПараметр("ЖурналКонецПериода", ЖурналКонецПериода);
	КонструкторДанных.ДобавитьПараметр("ДатаПланирования", ДатаПланирования);
	РазмерПериода = Цел((ПараметрыСеанса.новаТекущийПользователь.МинимальноеОкноДоступностиТранспорта - '00010101') / 60);
	КонструкторДанных.ДобавитьПараметр("РазмерПериода", РазмерПериода);
	
	Отбор = "";
	
	Если ЗначениеЗаполнено(ЖурналНачалоПериода) И ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И ( (ВозможныеРейсы.НачалоПериода МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода)
		        |   ИЛИ (ВозможныеРейсы.КонецПериода МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода)
		        |   ИЛИ (&ЖурналНачалоПериода МЕЖДУ ВозможныеРейсы.НачалоПериода И ВозможныеРейсы.КонецПериода)
		        |   ИЛИ (&ЖурналКонецПериода МЕЖДУ ВозможныеРейсы.НачалоПериода И ВозможныеРейсы.КонецПериода)
		        |   ИЛИ (ВозможныеРейсы.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1) И ВозможныеРейсы.КонецПериода >= &ЖурналКонецПериода)
		        |   ИЛИ (ВозможныеРейсы.КонецПериода = ДАТАВРЕМЯ(1, 1, 1) И ВозможныеРейсы.НачалоПериода <= &ЖурналНачалоПериода))";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналНачалоПериода) И Не ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И ВозможныеРейсы.НачалоПериода >= &ЖурналНачалоПериода";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналКонецПериода) И Не ЗначениеЗаполнено(ЖурналНачалоПериода) Тогда
		Отбор = " И ВозможныеРейсы.НачалоПериода <= &ЖурналКонецПериода";
	КонецЕсли;
	
	//Отбор = Отбор + " И РАЗНОСТЬДАТ(ВозможныеРейсы.НачалоПериода, ВозможныеРейсы.КонецПериода, Секунда)  >= &РазмерПериода";
	
	КонструкторДанных.УстановитьПатч("{ОТБОР_ВОЗМОЖНЫХ_РЕЙСОВ}", Отбор);
КонецПроцедуры

Процедура Настроить()
	
	мсИнструменты = Новый Массив;
	ПараметрыЖурнала = Новый Структура("ИсточникПеретаскивания, ПриемникПеретаскивания, Инструменты, ОбновлятьПослеПеретаскивания", Истина, Истина, мсИнструменты, Истина);
	
   	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "РедактироватьКалендарь", , "Редактировать", "Редактировать"));

	Если Не ОперативноеНазначениеРайонов И ДоступностьКнопкиНазначитьРайоны Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "НазначитьРайоны",, "Назначить районы", "Назначить районы"));
	КонецЕсли;
	
	Если Подбор Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "НачатьПодбор",, "Подбор", "Подобрать доставки по карте"));
	КонецЕсли;
	
	Если ВводитьЗаявкиПеревозчиков Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ВвестиЗаявкуПеревозчика",, "Ввести заявку перевозчика", "Ввести заявку перевозчика"));
	КонецЕсли;
	
	Если ОбработчикВыбора <> Неопределено Или ОповещатьПриВыборе Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ВвестиКорректировку", БиблиотекаКартинок.ИзменитьЭлементСписка, "Изменить", "Ввести корректировку возможного рейса"));
	КонецЕсли;
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		КонструкторДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	

	СформироватьОтбор();
	
	КонструкторДанных.ТекстЗапроса = "
	|(ВЫБРАТЬ
	|	Истина КАК ПоКалендарю,
	|	РАЗНОСТЬДАТ(ВозможныеРейсы.НачалоПериода, ВозможныеРейсы.КонецПериода, МИНУТА) КАК РазмерПериода,
	|	ВЫБОР
	|		КОГДА Корректировки.НовыйТранспорт ЕСТЬ NULL ТОГДА ВозможныеРейсы.Транспорт
	|		КОГДА Корректировки.НовыйТранспорт = ЗНАЧЕНИЕ(Справочник.новаТранспорт.ПустаяСсылка) ТОГДА ВозможныеРейсы.Транспорт
	|		ИНАЧЕ Корректировки.НовыйТранспорт
	|	КОНЕЦ КАК Транспорт,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовыйВодитель ЕСТЬ NULL ТОГДА ВозможныеРейсы.Водитель
	|		КОГДА Корректировки.НовыйВодитель = ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка) ТОГДА ВозможныеРейсы.Водитель
	|		ИНАЧЕ Корректировки.НовыйВодитель
	|	КОНЕЦ КАК Водитель,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовыйЭкспедитор ЕСТЬ NULL ТОГДА ВозможныеРейсы.Экспедитор
	|		КОГДА Корректировки.НовыйЭкспедитор = ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка) ТОГДА ВозможныеРейсы.Экспедитор
	|		ИНАЧЕ Корректировки.НовыйЭкспедитор
	|	КОНЕЦ КАК Экспедитор,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовыйПеревозчик ЕСТЬ NULL ТОГДА ВозможныеРейсы.Перевозчик
	|		КОГДА Корректировки.НовыйПеревозчик = ЗНАЧЕНИЕ(Справочник.новаКонтрагенты.ПустаяСсылка) ТОГДА ВозможныеРейсы.Перевозчик
	|		ИНАЧЕ Корректировки.НовыйПеревозчик
	|	КОНЕЦ КАК Перевозчик,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовыйДоговор ЕСТЬ NULL ТОГДА ВозможныеРейсы.Договор
	|		КОГДА Корректировки.НовыйДоговор = ЗНАЧЕНИЕ(Справочник.новаДоговоры.ПустаяСсылка) ТОГДА ВозможныеРейсы.Договор
	|		ИНАЧЕ Корректировки.НовыйДоговор
	|	КОНЕЦ КАК Договор,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовоеКонтактноеЛицо ЕСТЬ NULL ТОГДА ВозможныеРейсы.КонтактноеЛицо
	|		КОГДА Корректировки.НовоеКонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.новаКонтактныеЛица.ПустаяСсылка) ТОГДА ВозможныеРейсы.КонтактноеЛицо
	|		ИНАЧЕ Корректировки.НовоеКонтактноеЛицо
	|	КОНЕЦ КАК КонтактноеЛицо,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовоеНаправление ЕСТЬ NULL ТОГДА ВозможныеРейсы.Направление
	|		КОГДА Корректировки.НовоеНаправление = ЗНАЧЕНИЕ(Справочник.новаКонтактныеЛица.ПустаяСсылка) ТОГДА ВозможныеРейсы.Направление
	|		ИНАЧЕ Корректировки.НовоеНаправление
	|	КОНЕЦ КАК Направление,
	|
	|	ВЫБОР
	|		КОГДА Закрытия.НовоеНачалоРейса ЕСТЬ NULL ТОГДА
	|			ВЫБОР
	|				КОГДА Корректировки.НовоеНачалоРейса ЕСТЬ NULL ТОГДА ВозможныеРейсы.НачалоРейса
	|				КОГДА Корректировки.НовоеНачалоРейса = ЗНАЧЕНИЕ(Справочник.новаТочкиДоставки.ПустаяСсылка) ТОГДА ВозможныеРейсы.НачалоРейса
	|				ИНАЧЕ Корректировки.НовоеНачалоРейса
	|			КОНЕЦ
	|		ИНАЧЕ Закрытия.НовоеНачалоРейса
	|	КОНЕЦ КАК НачалоРейса,
	|
	|	ВЫБОР
	|		КОГДА Закрытия.НовоеНачалоПериода ЕСТЬ NULL ТОГДА
	|			ВЫБОР
	|				КОГДА Корректировки.НовоеНачалоПериода ЕСТЬ NULL ТОГДА ВозможныеРейсы.НачалоПериода
	|				КОГДА Корректировки.НовоеНачалоПериода = &ПустаяДата ТОГДА ВозможныеРейсы.НачалоПериода
	|				ИНАЧЕ Корректировки.НовоеНачалоПериода
	|			КОНЕЦ
	|		ИНАЧЕ Закрытия.НовоеНачалоПериода
	|	КОНЕЦ КАК НачалоПериода,
	|
	|	ВЫБОР
	|		КОГДА Закрытия.НовыйКонецПериода ЕСТЬ NULL ТОГДА
	|			ВЫБОР
	|				КОГДА Корректировки.НовыйКонецПериода ЕСТЬ NULL ТОГДА ВозможныеРейсы.КонецПериода
	|				КОГДА Корректировки.НовыйКонецПериода = &ПустаяДата ТОГДА ВозможныеРейсы.КонецПериода
	|				ИНАЧЕ Корректировки.НовыйКонецПериода
	|			КОНЕЦ
	|		ИНАЧЕ Закрытия.НовыйКонецПериода
	|	КОНЕЦ КАК КонецПериода,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовоеНачалоРейса ЕСТЬ NULL ТОГДА ВозможныеРейсы.НачалоРейса
	|		КОГДА Корректировки.НовоеНачалоРейса = ЗНАЧЕНИЕ(Справочник.новаТочкиДоставки.ПустаяСсылка) ТОГДА ВозможныеРейсы.НачалоРейса
	|		ИНАЧЕ Корректировки.НовоеНачалоРейса
	|	КОНЕЦ КАК ТочкаВыезда,
	|
	|	Корректировки.Регистратор КАК Документ,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.Транспорт ЕСТЬ NULL ТОГДА ВозможныеРейсы.Транспорт.Вид
	|		КОГДА Корректировки.Транспорт = ЗНАЧЕНИЕ(Справочник.новаТранспорт.ПустаяСсылка) ТОГДА ВозможныеРейсы.Транспорт.Вид
	|		ИНАЧЕ Корректировки.Транспорт.Вид
	|	КОНЕЦ КАК ВидТранспорта
	|ИЗ
	|
	|РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаКорректировкаКалендаряВозможныхРейсов КАК Корректировки
	|ПО
	|	ВозможныеРейсы.Транспорт = Корректировки.Транспорт
	| И ВозможныеРейсы.Водитель = Корректировки.Водитель
	| И НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, День) = Корректировки.НачалоПериода
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаЗакрытияВозможныхРейсов КАК Закрытия
	|ПО
	|	(ВозможныеРейсы.Транспорт = Закрытия.Транспорт
	|	И ВозможныеРейсы.Водитель = Закрытия.Водитель)
	| И НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, День) = Закрытия.НачалоПериода
	|
	|
	|ГДЕ
	|    ( (РАЗНОСТЬДАТ(ВозможныеРейсы.НачалоПериода, ВозможныеРейсы.КонецПериода, МИНУТА)  >= &РазмерПериода)
	|      ИЛИ (РАЗНОСТЬДАТ(Корректировки.НовоеНачалоПериода, Корректировки.НовыйКонецПериода, МИНУТА)  >= &РазмерПериода)
	|      ИЛИ (РАЗНОСТЬДАТ(Закрытия.НовоеНачалоПериода, Закрытия.НовыйКонецПериода, МИНУТА)  >= &РазмерПериода))
	|    И ( (Корректировки.Отменен ЕСТЬ NULL)
	|        ИЛИ ( (НЕ Корректировки.Отменен)
	|              И (РАЗНОСТЬДАТ(Корректировки.НовоеНачалоПериода, Корректировки.НовыйКонецПериода, МИНУТА)  >= &РазмерПериода)))
	|    И ( (Закрытия.Закрыт ЕСТЬ NULL)
	|        ИЛИ ( (НЕ Закрытия.Закрыт)
	|              И (РАЗНОСТЬДАТ(Закрытия.НовоеНачалоПериода, Закрытия.НовыйКонецПериода, МИНУТА)  >= &РазмерПериода)))
	|
	|{ОТБОР_ВОЗМОЖНЫХ_РЕЙСОВ}
	|{ТРАНСПОРТ_ПЕРЕВОЗЧИКОВ}
	|
	|) КАК ВозможныеРейсы
	|{СОЕДИНЕНИЯ}";

	КонструкторДанных.ТекстЗапроса = СтрЗаменить(КонструкторДанных.ТекстЗапроса,
		"{ТРАНСПОРТ_ПЕРЕВОЗЧИКОВ}",
		?(ВыводитьТранспортПеревозчиков,
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ложь КАК ПоКалендарю,
		|   86400 КАК РазмерПериода,
		|	ВЫРАЗИТЬ(ТранспортПеревозчиков.Транспорт КАК Справочник.новаТранспорт) КАК Транспорт,
		|	ТранспортПеревозчиков.Водитель КАК Водитель,
		|	ТранспортПеревозчиков.Экспедитор КАК Экспедитор,
		|	ТранспортПеревозчиков.Ссылка.Владелец КАК Перевозчик,
		|	ТранспортПеревозчиков.Ссылка КАК Договор,
		|	ТранспортПеревозчиков.Ссылка.Владелец.ОсновноеКонтактноеЛицо КАК КонтактноеЛицо,
		|	ТранспортПеревозчиков.Направление КАК Направление,
		|	NULL КАК НачалоРейса,
		|	NULL КАК НачалоПериода,
		|	NULL КАК КонецПериода,
		|	NULL КАК ТочкаВыезда,
		|	NULL КАК Документ,
		|	ВЫБОР
		|		КОГДА ТранспортПеревозчиков.Транспорт ССЫЛКА Справочник.новаВидыТранспорта ТОГДА ТранспортПеревозчиков.Транспорт
		|		КОГДА ТранспортПеревозчиков.Транспорт ССЫЛКА Справочник.новаТранспорт ТОГДА ТранспортПеревозчиков.Транспорт.Вид
		|	КОНЕЦ КАК ВидТранспорта
		|ИЗ
		|	Справочник.новаДоговоры.ПредоставляемыйТранспорт КАК ТранспортПеревозчиков
		|ГДЕ
		|	&ДатаПланирования МЕЖДУ ТранспортПеревозчиков.Ссылка.ДатаДоговора И ТранспортПеревозчиков.Ссылка.ДействуетДо
		|
		|", ""));
	
	КонструкторДанных.ДобавитьПараметр("ПустаяДата", '00010101');
	КонструкторДанных.ДобавитьПараметр("ДатаПланирования", ДатаПланирования);
	КонструкторДанных.ДобавитьПараметр("РазмерПериода", РазмерПериода);
	
	Если ОперативноеНазначениеРайонов Тогда
		КонструкторДанных.ПостоянныйОтбор = "НЕ (ВозможныеРейсы.Транспорт, ВозможныеРейсы.Водитель, ВозможныеРейсы.НачалоПериода) В (ВЫБРАТЬ Транспорт, Водитель, НачалоПериода ИЗ РаспределениеТранспортаПоРайонам) {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ}";
	Иначе
		КонструкторДанных.ПостоянныйОтбор = "Истина {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ} {ОТБОР_ТЕРМИНАЛ}";
		//КонструкторДанных.ПостоянныйОтбор = "Истина {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ} И ВозможныеРейсы.РазмерПериода >= &РазмерПериода";
	КонецЕсли;
	
	мсТекущиеТочкиДоставки = новаМестнаяДоставка.ПолучитьТекущиеТочкиДоставки(новаКонтекст);
	Если мсТекущиеТочкиДоставки.Количество() > 0 Тогда
		КонструкторДанных.УстановитьПатч("{ОТБОР_ТОЧЕК_ДОСТАВКИ}", "И ВозможныеРейсы.НачалоРейса В (&ТекущиеТочкиДоставки)");
		КонструкторДанных.ДобавитьПараметр("ТекущиеТочкиДоставки", мсТекущиеТочкиДоставки);
	КонецЕсли;
	
	
	// Михушкин --->> 
	ТекТерминал = ПараметрыСеанса.ТерминалДоставки;
	Если НЕ ЗначениеЗаполнено(ТекТерминал) Тогда	
		ТекТерминал = Справочники.РегиональныеТерминалы.МоскваСтриж;		
	КонецЕсли;
	КонструкторДанных.УстановитьПатч("{ОТБОР_ТЕРМИНАЛ}", " И ВозможныеРейсы.Транспорт.Родитель.ТерминалДоставки = &ТерминалДоставки");
	КонструкторДанных.ДобавитьПараметр("ТерминалДоставки", ТекТерминал);
	// <<--- Михушкин 
	
	
	мсТекущиеРайоны = новаМестнаяДоставка.ПолучитьТекущиеРайоны(новаКонтекст);
	Если мсТекущиеРайоны.Количество() > 0 Тогда
		Если Константы.новаСпособОпределенияРайонаВозможногоРейса.Получить() = Перечисления.новаСпособыОпределенияРайонаВозможногоРейса.ПоВодителю Тогда
			ЗапросВодители = Новый Запрос;
			ЗапросВодители.Текст = "ВЫБРАТЬ
			                         |	новаТранспортРайоны.Ссылка
			                         |ИЗ
			                         |	Справочник.новаВодители.Районы КАК новаТранспортРайоны
			                         |ГДЕ
			                         |	новаТранспортРайоны.Район В(&Районы)";
									 
			ЗапросВодители.УстановитьПараметр("Районы", мсТекущиеРайоны);
			ВодителиРайонов = ЗапросВодители.Выполнить().Выгрузить();
			
			КонструкторДанных.УстановитьПатч("{ОТБОР_РАЙОНОВ}", " И ВозможныеРейсы.Водитель В (&ВодителиРайонов)");
			КонструкторДанных.ДобавитьПараметр("ВодителиРайонов", ВодителиРайонов);
		Иначе	
			ЗапросТранспорта = Новый Запрос;
			ЗапросТранспорта.Текст = "ВЫБРАТЬ
			                         |	новаТранспортРайоны.Ссылка
			                         |ИЗ
			                         |	Справочник.новаТранспорт.Районы КАК новаТранспортРайоны
			                         |ГДЕ
			                         |	новаТранспортРайоны.Район В(&Районы)";
									 
			ЗапросТранспорта.УстановитьПараметр("Районы", мсТекущиеРайоны);
			ТранспортРайонов = ЗапросТранспорта.Выполнить().Выгрузить();
			
			КонструкторДанных.УстановитьПатч("{ОТБОР_РАЙОНОВ}", " И ВозможныеРейсы.Транспорт В (&ТранспортРайонов)");
			КонструкторДанных.ДобавитьПараметр("ТранспортРайонов", ТранспортРайонов);
		КонецЕсли;
		
	КонецЕсли;
	
	КонструкторДанных.ПостояннаяВыборка = ",
	|	ПоКалендарю КАК ПоКалендарю,
	|	ВозможныеРейсы.РазмерПериода КАК РазмерПериода,
	|	ВозможныеРейсы.Транспорт КАК Транспорт,
	|	Представление(ВозможныеРейсы.Транспорт) КАК Транспорт_Пред,
	|	ВозможныеРейсы.Транспорт.КатегорииТранспортаСтрокой КАК КатегорииТранспорта,
	|	ВозможныеРейсы.Водитель КАК Водитель,
	|	Представление(ВозможныеРейсы.Водитель) КАК Водитель_Пред,
	|	ВозможныеРейсы.Экспедитор КАК Экспедитор,
	|	Представление(ВозможныеРейсы.Экспедитор) КАК Экспедитор_Пред,
	|	ВозможныеРейсы.Перевозчик КАК Перевозчик,
	|	Представление(ВозможныеРейсы.Перевозчик) КАК Перевозчик_Пред,
	|	ВозможныеРейсы.Договор КАК Договор,
	|	Представление(ВозможныеРейсы.Договор) КАК Договор_Пред,
	|	ВозможныеРейсы.КонтактноеЛицо КАК КонтактноеЛицо,
	|	Представление(ВозможныеРейсы.КонтактноеЛицо) КАК КонтактноеЛицо_Пред,
	|	ВозможныеРейсы.Направление КАК Направление,
	|	Представление(ВозможныеРейсы.Направление) КАК Направление_Пред,
	|	ВозможныеРейсы.НачалоРейса КАК НачалоРейса,
	|	Представление(ВозможныеРейсы.НачалоРейса) КАК НачалоРейса_Пред,
	|	ВозможныеРейсы.НачалоПериода КАК НачалоПериода,
	|	ВозможныеРейсы.КонецПериода КАК КонецПериода,
	|	ВозможныеРейсы.ТочкаВыезда КАК ТочкаВыезда,
	|	ВозможныеРейсы.Документ КАК Документ,
	|	ВозможныеРейсы.ВидТранспорта КАК ВидТранспорта,
	|	Представление(ВозможныеРейсы.ВидТранспорта) КАК ВидТранспорта_Пред
	|";
	
	КонструкторДанных.ДобавитьПоле("ВидТранспорта");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.ВидТранспорта");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.ВидТранспорта.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Транспорт");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.Транспорт.Наименование");
	
	КонструкторДанных.ДобавитьПоле("КатегорииТранспорта");
	
	КонструкторДанных.ДобавитьПоле("Водитель");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Водитель");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.Водитель.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Экспедитор");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Экспедитор");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.Экспедитор.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Перевозчик");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Перевозчик");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.Перевозчик.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Договор");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Договор");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.Договор.Наименование");
	
	КонструкторДанных.ДобавитьПоле("КонтактноеЛицо");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.КонтактноеЛицо");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.КонтактноеЛицо.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Направление");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Направление");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.Направление.Наименование");
	
	КонструкторДанных.ДобавитьПоле("НачалоРейса");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.НачалоРейса");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.НачалоРейса.Наименование");
	
	КонструкторДанных.ДобавитьПоле("НачалоПериода", "С", "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьПоле("КонецПериода", "По", "ДФ=ЧЧ:мм");
	
	КонструкторДанных.ДобавитьПоле("РазмерПериода");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.РазмерПериода");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.РазмерПериода");
	
	КонструкторДанных.ДобавитьПоле("Грузоподъемность");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.Грузоподъемность");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.Грузоподъемность");
	
	КонструкторДанных.ДобавитьПоле("ОбъемКузова");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.ОбъемКузова");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.ОбъемКузова");
	
	КонструкторДанных.ДобавитьПоле("ВысотаКузова");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.ВысотаКузова");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.ВысотаКузова");
	
	КонструкторДанных.ДобавитьПоле("ШиринаКузова");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.ШиринаКузова");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.ШиринаКузова");
	
	КонструкторДанных.ДобавитьПоле("ГлубинаКузова");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.ГлубинаКузова");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.ГлубинаКузова");
	
	КонструкторДанных.ДобавитьПоле("Лифт");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.Лифт");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.Лифт");
	
	КонструкторДанных.ДобавитьПоле("Манипулятор");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.Манипулятор");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.Манипулятор");
	
	КонструкторДанных.ДобавитьПоле("СанитарныйПаспорт");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.СанитарныйПаспорт");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.СанитарныйПаспорт");
	
	КонструкторДанных.ДобавитьПоле("РайонСтоянки");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.РайонСтоянки");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.РайонСтоянки");
	
	КонструкторДанных.ДобавитьПоле("СпособЗагрузки");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.СпособЗагрузки");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.СпособЗагрузки");
	
	КонструкторДанных.ДобавитьПоле("Пропуск");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.Пропуск");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.Пропуск");
	
	КонструкторДанных.ДобавитьПоле("ТипКузова");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт.ТипКузова");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВозможныеРейсы.Транспорт.ТипКузова");
	
	КонструкторДанных.ДобавитьПоле("Район");
	УстановитьСпособОпределенияРайонаВозможногоРейса(Ложь);
	
	КонструкторДанных.ДобавитьОтборПоля(, "ЕСТЬNULL(ГруппыРайонов.Группа, Районы.Район)");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ЕСТЬNULL(ГруппыРайонов.Группа, Районы.Район)");
	КонструкторДанных.ДобавитьСортировкуПоля("ЕСТЬNULL(ГруппыРайонов.Группа.Наименование, Районы.Район.Наименование)");
	
	КонструкторДанных.ДобавитьПоле("Рейтинг");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ЕСТЬNULL(БаллыПеревозчиков.НачисленныеБаллыОстаток - БаллыПеревозчиков.ШтрафныеБаллыОстаток, 0)");
	КонструкторДанных.ДобавитьОтборПоля(, "ЕСТЬNULL(БаллыПеревозчиков.НачисленныеБаллыОстаток - БаллыПеревозчиков.ШтрафныеБаллыОстаток, 0)");
	КонструкторДанных.ДобавитьСортировкуПоля("ЕСТЬNULL(БаллыПеревозчиков.НачисленныеБаллыОстаток - БаллыПеревозчиков.ШтрафныеБаллыОстаток, 0)");
	КонструкторДанных.УстановитьПатчПоля("Рейтинг", "СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.новаРейтингПеревозчиков.Остатки() КАК БаллыПеревозчиков
	|ПО
	|	БаллыПеревозчиков.Водитель = ВозможныеРейсы.Водитель	
	| И БаллыПеревозчиков.Контрагент = ВозможныеРейсы.Перевозчик	
	|");
	
	КонструкторДанных.ДобавитьПоле("ДатаПоследнейРаботы", "Работал", "ДФ=dd.MM.yyyy");
	КонструкторДанных.ДобавитьВыборкуПоля(, "АктуальныйРейтинг.ДатаПоследнейРаботы");
	КонструкторДанных.ДобавитьОтборПоля(, "АктуальныйРейтинг.ДатаПоследнейРаботы");
	КонструкторДанных.ДобавитьСортировкуПоля("АктуальныйРейтинг.ДатаПоследнейРаботы");
	КонструкторДанных.УстановитьПатчПоля("ДатаПоследнейРаботы", "СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаАктуальныйРейтингПеревозчиков КАК АктуальныйРейтинг
	|ПО
	|	АктуальныйРейтинг.Водитель = ВозможныеРейсы.Водитель	
	| И АктуальныйРейтинг.Контрагент = ВозможныеРейсы.Перевозчик	
	|");
	
	КонструкторДанных.ДобавитьПоле("ТелефонВодителя");
	КонструкторДанных.ДобавитьВыборкуПоля(, "
		|ВЫБОР
		|	КОГДА ВозможныеРейсы.Водитель.ОсновнойТелефон = ЗНАЧЕНИЕ(Справочник.новаКонтактнаяИнформация.ПустаяСсылка)
		|		ТОГДА ЗапросКонтактнойИнформации.ТелефонВодителя
		|	ИНАЧЕ ВозможныеРейсы.Водитель.ОсновнойТелефон
		|КОНЕЦ ");
	КонструкторДанных.ДобавитьОтборПоля(, "
		|ВЫБОР
		|	КОГДА ВозможныеРейсы.Водитель.ОсновнойТелефон = ЗНАЧЕНИЕ(Справочник.новаКонтактнаяИнформация.ПустаяСсылка)
		|		ТОГДА ЗапросКонтактнойИнформации.ТелефонВодителя
		|	ИНАЧЕ ВозможныеРейсы.Водитель.ОсновнойТелефон
		|КОНЕЦ ");
	КонструкторДанных.УстановитьПатчПоля("ТелефонВодителя", "СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|		МАКСИМУМ(новаКонтактнаяИнформация.Наименование) КАК ТелефонВодителя,
	|		новаВодители.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.новаВодители КАК новаВодители
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаКонтактнаяИнформация КАК новаКонтактнаяИнформация
	|			ПО (новаКонтактнаяИнформация.Владелец = новаВодители.Ссылка)
	|				И (новаКонтактнаяИнформация.ВидКонтактнойИнформации = ЗНАЧЕНИЕ(Перечисление.новаВидыКонтактнойИнформации.Телефон))
	|	СГРУППИРОВАТЬ ПО
	|		новаВодители.Ссылка) КАК ЗапросКонтактнойИнформации
	|	ПО ВозможныеРейсы.Водитель = ЗапросКонтактнойИнформации.Ссылка					
	|");

	КонструкторДанных.ДобавитьДоступнуюГруппировку("Транспорт");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Водитель");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("НачалоРейса");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Район");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("КатегорииТранспорта");
		
	Если ГруппировкиПоКатегориям Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.новаКатегорииТранспорта
		|ГДЕ
		|	НЕ ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО Код ВОЗР";
		
		мсКатегории = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		мсГруппировкиКатегорий = Новый Массив;
		НомерКатегории = 0;
		Для Каждого Категория Из мсКатегории Цикл
			ИмяПоля = "КатегорияТранспорта" + СтрЗаменить(Строка(НомерКатегории), Символы.НПП, "");
			НомерКатегории = НомерКатегории + 1;
			
			КонструкторДанных.ДобавитьПоле(ИмяПоля, СокрЛП(Категория));
			КонструкторДанных.ДобавитьОтборПоля(, "ЕСТЬNULL(" + ИмяПоля + ".ЗначениеКатегории, ЗНАЧЕНИЕ(Справочник.новаЗначенияКатегорийТранспорта.ПустаяСсылка))");
			КонструкторДанных.ДобавитьВыборкуПоля(, "ЕСТЬNULL(" + ИмяПоля + ".ЗначениеКатегории, ЗНАЧЕНИЕ(Справочник.новаЗначенияКатегорийТранспорта.ПустаяСсылка))");
			КонструкторДанных.ДобавитьСортировкуПоля(ИмяПоля + ".ЗначениеКатегории.Наименование");
			
			КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.новаТранспорт.КатегорииТранспорта КАК " + ИмяПоля + "
			|ПО
			|	" + ИмяПоля + ".Ссылка = ВозможныеРейсы.Транспорт И " + ИмяПоля + ".ЗначениеКатегории.Владелец = &" + ИмяПоля + "
			|");
			
			КонструкторДанных.ДобавитьПараметр(ИмяПоля, Категория);
			
			КонструкторДанных.ДобавитьДоступнуюГруппировку(ИмяПоля);
			мсГруппировкиКатегорий.Добавить(ИмяПоля);
		КонецЦикла;
	КонецЕсли;
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Транспорт, Водитель, НачалоПериода"));
	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

Процедура УстановитьСпособОпределенияРайонаВозможногоРейса(ИспользоватьОперативноеРаспределение)
	Если ИспользоватьОперативноеРаспределение Тогда
		КонструкторДанных.УстановитьПатчПоля("Район", "СОЕДИНЕНИЯ", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаОперативноеРаспределениеВозможныхРейсовПоРайонам КАК Районы
		|ПО
		|	Районы.ДатаПланирования = &ДатаПланирования
		| И Районы.СменаПланирования = &СменаПланирования
		| И Районы.Транспорт = ВозможныеРейсы.Транспорт
		| И Районы.Водитель = ВозможныеРейсы.Водитель
		| И Районы.НачалоПериода = ВозможныеРейсы.НачалоПериода
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыРайонов
		|ПО
		|	ГруппыРайонов.Район = Районы.Район
		|");
		
		КонструкторДанных.ДобавитьПараметр("ДатаПланирования", ДатаПланирования);
		КонструкторДанных.ДобавитьПараметр("СменаПланирования", СменаПланирования);
	Иначе	
		Если Константы.новаСпособОпределенияРайонаВозможногоРейса.Получить() = Перечисления.новаСпособыОпределенияРайонаВозможногоРейса.ПоВодителю Тогда
			ТаблицаРайонов = "Справочник.новаВодители.Районы";
			ПолеВозможногоРейса = "Водитель";
		Иначе		
			ТаблицаРайонов = "Справочник.новаТранспорт.Районы";
			ПолеВозможногоРейса = "Транспорт";
		КонецЕсли;
		
		КонструкторДанных.УстановитьПатчПоля("Район", "СОЕДИНЕНИЯ", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Районы.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(ГруппыРайонов.Группа, Районы.Район) КАК Район
		|	ИЗ
		|		" + ТаблицаРайонов + " КАК Районы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыРайонов
		|	ПО
		|		ГруппыРайонов.Район = Районы.Район
		|	) КАК Районы
		|ПО
		|	Районы.Ссылка = ВозможныеРейсы." + ПолеВозможногоРейса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыРайонов
		|ПО
		|	ГруппыРайонов.Район = Районы.Район
		|");
	КонецЕсли;	
КонецПроцедуры

// Возвращает текущий отображаемый в журнале транспорт.
//
// Возвращаемое значение:
//  <Структура[ТранспортДляАвтопланирования]>
//
Функция ПолучитьТранспортДляАвтоматическогоПланирования(Знач пТранспорт = Неопределено, Знач пКлассификаторРайонов = Неопределено) Экспорт
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("КатегорииТранспорта");
	Результат.Колонки.Добавить("Район");
	Результат.Колонки.Добавить("Транспорт");
	Результат.Колонки.Добавить("Марка");
	Результат.Колонки.Добавить("Водитель");
	Результат.Колонки.Добавить("ИдентификаторПериодаДоступности");
	Результат.Колонки.Добавить("НачалоРейса");
	Результат.Колонки.Добавить("НачалоПериода");
	Результат.Колонки.Добавить("ОкончаниеПериода");
	Результат.Колонки.Добавить("Грузоподъемность");
	Результат.Колонки.Добавить("ОбъемКузова");
	
	Если пТранспорт = Неопределено Тогда
		
		пТранспорт = Новый ТаблицаЗначений;
		пТранспорт.Колонки.Добавить("Транспорт");
		пТранспорт.Колонки.Добавить("Водитель");
		пТранспорт.Колонки.Добавить("НачалоРейса");
		пТранспорт.Колонки.Добавить("НачалоПериода");
		пТранспорт.Колонки.Добавить("ОкончаниеПериода");
		
		НайденныеСтроки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Группировка", NULL), Истина);
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Транспорт) Тогда
				НоваяСтрокаТранспорта = пТранспорт.Добавить();
				НоваяСтрокаТранспорта.Транспорт = ТекущаяСтрока.Транспорт;
				НоваяСтрокаТранспорта.Водитель = ТекущаяСтрока.Водитель;
				НоваяСтрокаТранспорта.НачалоРейса = ТекущаяСтрока.НачалоРейса;
				НоваяСтрокаТранспорта.НачалоПериода = ТекущаяСтрока.НачалоПериода;
				НоваяСтрокаТранспорта.ОкончаниеПериода = ТекущаяСтрока.КонецПериода;
			КонецЕсли;
		КонецЦикла;
		
		пТранспорт.Индексы.Добавить("Транспорт");
		
		пТранспорт.Сортировать("Транспорт, НачалоПериода УБЫВ, ОкончаниеПериода ВОЗР");
	КонецЕсли;
	
	Если пКлассификаторРайонов = Неопределено Тогда
		пКлассификаторРайонов = новаКарты.ПолучитьТекущийКлассификаторРайонов();;
	КонецЕсли;
	
	//Получаем категории транспорта
	КорниДереваПоТранспорту = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Т.Ссылка КАК Транспорт
	|    ,КТ.ЗначениеКатегории КАК КатегорияТранспорта
	|  ИЗ
	|    Справочник.новаТранспорт КАК Т
	|    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТранспорт.КатегорииТранспорта КАК КТ
	|      ПО
	|        Т.Ссылка = КТ.Ссылка
	|  ГДЕ
	|    Т.Ссылка В(&Транспорт)
	|  ИТОГИ ПО
	|    Транспорт
	|");
	
	Запрос.УстановитьПараметр("Транспорт", пТранспорт.ВыгрузитьКолонку("Транспорт"));
	
	ВыборкаПоТранспорту = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоТранспорту.Следующий() Цикл
		
		ВыборкаКатегорий = ВыборкаПоТранспорту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		НайденнаяСтрокаКорня = Неопределено;
		Для каждого ТкущаяСтрокаКорня Из Результат.Строки Цикл
			
			КатегорииТранспортаСовпадают = Истина;
			КоличествоКатегорийТранспорта = 0;
			Пока ВыборкаКатегорий.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаКатегорий.КатегорияТранспорта) Тогда
					КатегорииТранспортаСовпадают = КатегорииТранспортаСовпадают и (ТкущаяСтрокаКорня.КатегорииТранспорта[ВыборкаКатегорий.КатегорияТранспорта] = Истина);
					КоличествоКатегорийТранспорта = КоличествоКатегорийТранспорта + 1;
				КонецЕсли;
			КонецЦикла;
			КатегорииТранспортаСовпадают = КатегорииТранспортаСовпадают и (ТкущаяСтрокаКорня.КатегорииТранспорта.Количество() = КоличествоКатегорийТранспорта);
			
			ВыборкаКатегорий.Сбросить();
			
			Если КатегорииТранспортаСовпадают Тогда
				
				НайденнаяСтрокаКорня = ТкущаяСтрокаКорня;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденнаяСтрокаКорня = Неопределено Тогда
			
			НайденнаяСтрокаКорня = Результат.Строки.Добавить();
			НайденнаяСтрокаКорня.КатегорииТранспорта = Новый Соответствие;
			
			Пока ВыборкаКатегорий.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаКатегорий.КатегорияТранспорта) Тогда
					НайденнаяСтрокаКорня.КатегорииТранспорта.Вставить(ВыборкаКатегорий.КатегорияТранспорта, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КорниДереваПоТранспорту.Вставить(ВыборкаПоТранспорту.Транспорт, НайденнаяСтрокаКорня);
	КонецЦикла;
	
	//Получаем структуру доступности транспорта
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка КАК Транспорт
	|    ,Марка
	|    ,Грузоподъемность
	|    ,ОбъемКузова
	|  ИЗ
	|    Справочник.новаТранспорт
	|  ГДЕ
	|    Ссылка В (&Транспорт)
	|");
	
	Запрос.УстановитьПараметр("Транспорт", пТранспорт.ВыгрузитьКолонку("Транспорт"));
	
	ОписаниеТранспорта = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    Т.Ссылка КАК Транспорт
	|    ,ЕСТЬNULL(Р.Район, НЕОПРЕДЕЛЕНО) КАК Район
	|  ИЗ
	|    Справочник.новаТранспорт КАК Т
	|    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТранспорт.Районы КАК Р
	|      ПО
	|        Т.Ссылка = Р.Ссылка
	|        И Р.Район.Владелец = &КлассификаторРайонов
	|  ГДЕ
	|    Т.Ссылка В (&Транспорт)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    Т.Ссылка
	|    ,ОГР.Группа
	|  ИЗ
	|    Справочник.новаТранспорт КАК Т
	|    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТранспорт.Районы КАК Р
	|      ПО
	|        Т.Ссылка = Р.Ссылка
	|        И Р.Район.Владелец = &КлассификаторРайонов
	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ОГР
	|      ПО
	|        Р.Район = ОГР.Район
	|  ГДЕ
	|    Т.Ссылка В (&Транспорт)
	|    И (ОГР.Группа ЕСТЬ НЕ NULL)
	|  УПОРЯДОЧИТЬ ПО
	|    Район
	|  ИТОГИ ПО
	|    Транспорт
	|  АВТОУПОРЯДОЧИВАНИЕ
	|");
	
	Запрос.УстановитьПараметр("Транспорт", пТранспорт.ВыгрузитьКолонку("Транспорт"));
	Запрос.УстановитьПараметр("КлассификаторРайонов", пКлассификаторРайонов);
	
	ВыборкаПоТранспорту = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоТранспорту.Следующий() Цикл
		
		//Отсекаем пересекающиеся периоды - приоритетнее ранние и длинные
		НайденныеПериодыДоступности = пТранспорт.НайтиСтроки(Новый Структура("Транспорт", ВыборкаПоТранспорту.Транспорт));
		
		Сортировка = Новый ТаблицаЗначений;
		Сортировка.Колонки.Добавить("Индекс");
		Сортировка.Колонки.Добавить("Строка");
		
		Для каждого НайденныйИнтервалДоступности Из НайденныеПериодыДоступности Цикл
			
			НоваяСтрока = Сортировка.Добавить();
			НоваяСтрока.Индекс = пТранспорт.Индекс(НайденныйИнтервалДоступности);
			НоваяСтрока.Строка = НайденныйИнтервалДоступности;
		КонецЦикла;
		
		Сортировка.Сортировать("Индекс");
		
		НайденныеПериодыДоступности.Очистить();
		ОкончаниеДоступности = '00010101';
		
		Для каждого НайденныйИнтервалДоступности Из Сортировка Цикл
			
			Если НайденныйИнтервалДоступности.Строка.НачалоПериода >= ОкончаниеДоступности Тогда
				
				НайденныеПериодыДоступности.Добавить(НайденныйИнтервалДоступности.Строка);
				ОкончаниеДоступности = НайденныйИнтервалДоступности.Строка.окончаниеПериода;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаКорняДерева = КорниДереваПоТранспорту[ВыборкаПоТранспорту.Транспорт];
		ОписаниеТранспорта.НайтиСледующий(Новый Структура("Транспорт", ВыборкаПоТранспорту.Транспорт));
		ВыборкаПоРайонам = ВыборкаПоТранспорту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для каждого НайденныйТранспорт Из НайденныеПериодыДоступности Цикл
			
			ИдентификаторПериодаДоступности = Новый УникальныйИдентификатор;
			
			Пока ВыборкаПоРайонам.Следующий() Цикл
				
				НайденныйРайон = СтрокаКорняДерева.Строки.Найти(ВыборкаПоРайонам.Район, "Район");
				Если НайденныйРайон = Неопределено Тогда
					
					НайденныйРайон = СтрокаКорняДерева.Строки.Добавить();
					НайденныйРайон.Район = ВыборкаПоРайонам.Район;
				КонецЕсли;
				
				СтрокаДоступностиТранспорта = НайденныйРайон.Строки.Добавить();
				СтрокаДоступностиТранспорта.Транспорт = НайденныйТранспорт.Транспорт;
				СтрокаДоступностиТранспорта.Марка = ОписаниеТранспорта.Марка;
				СтрокаДоступностиТранспорта.Водитель = НайденныйТранспорт.Водитель;
				СтрокаДоступностиТранспорта.ИдентификаторПериодаДоступности = ИдентификаторПериодаДоступности;
				СтрокаДоступностиТранспорта.НачалоРейса = НайденныйТранспорт.НачалоРейса;
				СтрокаДоступностиТранспорта.НачалоПериода = НайденныйТранспорт.НачалоПериода;
				СтрокаДоступностиТранспорта.ОкончаниеПериода = НайденныйТранспорт.ОкончаниеПериода;
				СтрокаДоступностиТранспорта.Грузоподъемность = ОписаниеТранспорта.Грузоподъемность;
				СтрокаДоступностиТранспорта.ОбъемКузова = ОписаниеТранспорта.ОбъемКузова;
			КонецЦикла;
			
			ВыборкаПоРайонам.Сбросить();
		КонецЦикла;
		
		ОписаниеТранспорта.Сбросить();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьСпособОпределенияРайонаВозможногоРейса()
	Если ОперативноеНазначениеРайонов Тогда
		ЕстьНазначенныеОперативноРайоны = Ложь;	
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДатаПланирования	
		|ИЗ
		|	РегистрСведений.новаОперативноеРаспределениеВозможныхРейсовПоРайонам
		|ГДЕ
		|	ДатаПланирования = &ДатаПланирования	
		| И СменаПланирования = &СменаПланирования";
		
		Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
		Запрос.УстановитьПараметр("СменаПланирования", СменаПланирования);
		
		ЕстьНазначенныеОперативноРайоны = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	УстановитьСпособОпределенияРайонаВозможногоРейса(ЕстьНазначенныеОперативноРайоны);
КонецПроцедуры

Подбор = Ложь;
ОперативноеНазначениеРайонов = Ложь;
ГруппировкиПоКатегориям = Ложь;
ВводитьЗаявкиПеревозчиков = Ложь;
ДоступностьКнопкиНазначитьРайоны = Ложь;
ОповещатьПриВыборе = Ложь;
ВыводитьТранспортПеревозчиков = Ложь;

#КонецЕсли