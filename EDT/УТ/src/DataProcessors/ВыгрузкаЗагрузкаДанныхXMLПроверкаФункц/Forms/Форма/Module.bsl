
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.Инициализация();
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоПодсистем, "Объект.ДеревоПодсистем");
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаНастройкиКонсолиЗапросов" Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаВыгрузкиПриИзменении(Элемент)
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаВыгрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФорматFastInfoSetПриИзменении(Элемент)
	
	Если Объект.ИспользоватьФорматFastInfoSet Тогда
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".xml", ".fi");
	Иначе
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".fi", ".xml");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРежимПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Объект) Тогда
		
		Элемент.ТекущиеДанные.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Элемент.ТекущиеДанные.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаЗагрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Выгружать");
	УстановитьПометкиРодителей(ТекущиеДанные, "Выгружать");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриНеобходимостиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыгружатьПриНеобходимости = 2 Тогда
		ТекущиеДанные.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	УстановитьПометкиРодителей(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеОбъектыДляВыгрузки

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Элемент.ТекущийЭлемент.ОграничениеТипа = ТипОбъектовДляВыгрузки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзЗапроса(Команда)
	
	ОткрытьФорму(ИмяФормыКонсолиЗапросов(),ПараметрыКонсолиЗапросов(),ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДополнительныеОбъектыВыгрузки(Команда)
	
	Объект.ДополнительныеОбъектыДляВыгрузки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	Объект.ДатаНачала = ПериодВыгрузки.ДатаНачала;
	Объект.ДатаОкончания = ПериодВыгрузки.ДатаОкончания;
	
	ОчиститьСообщения();
	
	Сообщить("Начало выгрузки " + СокрЛП(ТекущаяДата()));
	
	Если Не РежимРаботыНаКлиенте Тогда
		
		Если ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
			
			ТекстСообщения = Нстр("ru = 'Поле ""Имя файла"" не заполнено'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаВыгрузки");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние(Нстр("ru = 'Выполняется выгрузка данных. Пожалуйста, подождите...'"));
	
	АдресФайлаВоВременномХранилище = "";
	ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище);
	
	Если РежимРаботыНаКлиенте И Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		
		ИмяФайла = ?(Объект.ИспользоватьФорматFastInfoSet, Нстр("ru = 'Файл выгрузки.fi'"), Нстр("ru = 'Файл выгрузки.xml'"));
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОчиститьСообщения();
	
	Сообщить("Начало загрузки  " + СокрЛП(ТекущаяДата()));
	
	АдресФайлаВоВременномХранилище = "";
	
	Если РежимРаботыНаКлиенте Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,Нстр("ru = 'Файл выгрузки'"),, УникальныйИдентификатор);
		
	Иначе
		
		Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
			
			ТекстСообщения = Нстр("ru = 'Поле ""Имя файла"" не заполнено'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		Если НЕ ПроверкаФайлаЗагрузкиСервер(ИмяФайлаЗагрузки) Тогда
			Возврат;
		КонецЕсли;	

		
		//Файл = Новый Файл(ИмяФайлаЗагрузки);
		//Если Не Файл.Существует() Тогда
		//	
		//	ТекстСообщения = Нстр("ru = 'Файл не существует'");
		//	СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
		//	Возврат;
		//	
		//КонецЕсли;
		
		ЗагрузитьДанныеЗавершение(Истина, АдресФайлаВоВременномХранилище, ИмяФайлаЗагрузки, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКонсолиЗапросов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантИспользованияКонсолиЗапросов", ВариантИспользованияКонсолиЗапросов);
	ПараметрыФормы.Вставить("ПутьКВнешнейКонсолиЗапросов", ПутьКВнешнейКонсолиЗапросов);
	
	ОткрытьФорму(ИмяФормыНастроекКонсолиЗапросов(), ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВыгружаемыеПоСсылке(Команда)
	
	Состояние(Нстр("ru = 'Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...'"));
	СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	ПересчитатьВыгружаемыеПоСсылкеНаСервере();
	ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИмяФормыКонсолиЗапросов()
	
	Если ВариантИспользованияКонсолиЗапросов = 0 Тогда
		
		Обработка = РеквизитФормыВЗначение("Объект");
		ИдентификаторФормы = ".Форма.ВыборИзЗапроса";
		
	ИначеЕсли ВариантИспользованияКонсолиЗапросов = 1 Тогда
		
		Обработка = Обработки["КонсольЗапросов"].Создать();
		ИдентификаторФормы = ".Форма";
		
	Иначе //ВариантИспользованияКонсолиЗапросов = 2
		
		Обработка = ВнешниеОбработки.Создать(ПутьКВнешнейКонсолиЗапросов);
		ИдентификаторФормы = ".ФормаОбъекта";
		
	КонецЕсли;
	
	Возврат Обработка.Метаданные().ПолноеИмя() + ИдентификаторФормы;
	
КонецФункции

&НаСервере
Функция ИмяФормыНастроекКонсолиЗапросов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ИмяФормыНастроек = Обработка.Метаданные().ПолноеИмя() + ".Форма.НастройкиКонсолиЗапросов";
	
	Возврат ИмяФормыНастроек;
	
КонецФункции

&НаКлиенте
Функция ПараметрыКонсолиЗапросов()
	
	ПараметрыФормы = Новый Структура;
	
	Если ВариантИспользованияКонсолиЗапросов = 0 Тогда
		
		ПараметрыФормы.Вставить("ВариантИспользованияКонсолиЗапросов", ВариантИспользованияКонсолиЗапросов);
		ПараметрыФормы.Вставить("ПутьКВнешнейКонсолиЗапросов", ПутьКВнешнейКонсолиЗапросов);
		
	Иначе
		
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Выбор данных для выгрузки'"));
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВПриложении(Элемент, ПутьКДанным, СтандартнаяОбработка)

	Файл = Новый Файл(Элемент.ТекстРедактирования);
	
	Если Файл.Существует() Тогда
		
		ЗапуститьПриложение(Элемент.ТекстРедактирования);
		
	Иначе
		
		СообщитьПользователю(Нстр("ru = 'Файл не найден'"), ПутьКДанным);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаРаботы()
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайла(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РежимДиалога = ?(РежимВыгрузки, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Не РежимВыгрузки;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Задайте имя файла выгрузки'");
	ДиалогВыбораФайла.ПолноеИмяФайла = ?(РежимВыгрузки, ИмяФайлаВыгрузки, ИмяФайлаЗагрузки);
	
	ДиалогВыбораФайла.Фильтр = "Формат выгрузки(*.xml)|*.xml|FastInfoSet (*.fi)|*.fi|Все файлы (*.*)|*.*";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если РежимВыгрузки Тогда
			ИмяФайлаВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		Иначе
			ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка, Подсистема = Неопределено)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		Если Не Подсистема = Неопределено Тогда
			ПереключитьОбъектыПодсистемы(Строка["ПолныйПуть"],,ТекСтрока[ИмяФлажка]);
			УстановитьПометкиПодчиненных(Строка, ИмяФлажка, Строка["ПолныйПуть"]);
		Иначе
			УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка, Подсистема = Неопределено)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка, Подсистема);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище)
	
	Если РежимРаботыНаКлиенте Тогда
		
		Расширение = ?(Объект.ИспользоватьФорматFastInfoSet, ".fi", ".xml");
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаВыгрузки;
		
	КонецЕсли;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	
	ОбъектНаСервере.ВыполнитьВыгрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьПометкиВыгружаемыхДанных(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВыгружать = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Выгружать");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружать, "Выгружать");
	
	КолонкаВыгружатьПриНеобходимости = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("ВыгружатьПриНеобходимости");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружатьПриНеобходимости, "ВыгружатьПриНеобходимости");
	
	КолонкаРазвернут = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Развернут");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаРазвернут, "Развернут");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ПроставитьПометкиВыгружаемыхДанных(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаФайлаЗагрузкиСервер(ВыбранноеИмяФайла, Расширение = "")
	
	Файл = Новый Файл(ВыбранноеИмяФайла);
	Если Не Файл.Существует() Тогда
		
		ТекстСообщения = Нстр("ru = 'Указанный файл не существует'");
		ПутьКДанным = ?(РежимРаботыНаКлиенте, "", "ИмяФайлаЗагрузки");
		СообщитьПользователю(ТекстСообщения, ПутьКДанным);
		Возврат ложь;
		
	КонецЕсли;
	Расширение = Файл.Расширение;

	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(Нстр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
		
		РасширениеФайла = "";
		
		Если РежимРаботыНаКлиенте тогда
			Файл = Новый Файл(ВыбранноеИмяФайла);
			Если Не Файл.Существует() Тогда
				
				ТекстСообщения = Нстр("ru = 'Указанный файл не существует'");
				ПутьКДанным = ?(РежимРаботыНаКлиенте, "", "ИмяФайлаЗагрузки");
				СообщитьПользователю(ТекстСообщения, ПутьКДанным);
				Возврат;
				
			КонецЕсли;
			РасширениеФайла = Файл.Расширение;

		Иначе
			Если НЕ ПроверкаФайлаЗагрузкиСервер(ВыбранноеИмяФайла, РасширениеФайла) Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		ЗагрузитьДанныеНаСервере(Адрес, РасширениеФайла, ВыбранноеИмяФайла);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение, ВыбранноеИмяФайла=Неопределено)
	
	Если РежимРаботыНаКлиенте Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаЗагрузки;
		
	КонецЕсли;
	
	РеквизитФормыВЗначение("Объект").ВыполнитьЗагрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитФормыВЗначение("Объект").ОповеститьОбОкончании("Загрузка", ВыбранноеИмяФайла);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВыгружаемыеПоСсылкеНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	ОбъектНаСервере.СоставВыгрузки(Истина);
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере)
	
	ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	
	ОбъектНаСервере.Инициализация();
	
	ПроставитьПометкиВыгружаемыхДанных(ОбъектНаСервере.ДеревоМетаданных.Строки, ДеревоМетаданных.Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Строка.Развернут = Элементы.ДеревоМетаданных.Развернут(ИдентификаторСтроки);
		
		СохранитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Если Строка.Развернут Тогда
			Элементы.ДеревоМетаданных.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		ВосстановитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаПоТипуДляЗапроса(Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	
	ИмяДляЗапроса = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовРасчета";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланОбмена";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "БизнесПроцесс";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Задача";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДляЗапроса) Тогда
		Возврат "";
	Иначе
		Возврат ИмяДляЗапроса + "." + ИмяМетаданных;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранныеЗначения)
	
	Если ТипЗнч(ВыбранныеЗначения) = Тип("Структура") Тогда
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(ВыбранныеЗначения.ДанныеВыбора);
		
		Если ТипЗнч(РезультатЗапроса)=Тип("Массив") Тогда
			
			РезультатЗапроса = РезультатЗапроса[РезультатЗапроса.ВГраница()];
			
			Если РезультатЗапроса.Колонки.Найти("Ссылка") <> Неопределено Тогда
				ВыбранныеСсылки = РезультатЗапроса.Выгрузить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВыбранныеСсылки = ВыбранныеЗначения;
		
	КонецЕсли;
	
	Для Каждого Значение Из ВыбранныеСсылки Цикл
		
		НоваяСтрока = Объект.ДополнительныеОбъектыДляВыгрузки.Добавить();
		НоваяСтрока.Объект = Значение.Ссылка;
		НоваяСтрока.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Значение.Ссылка);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаНаКлиентеИлиНаСервереПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНаКлиентеИлиНаСервереПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда
		
		ВызватьИсключение Нстр("ru = 'Обработка предназначена для запуска на версии платформы
			|1С:Предприятие 8.3 с отключенным режимом совместимости или выше'");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоПодсистемВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПодсистем.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
		ПереключитьОбъектыПодсистемы(ТекущиеДанные.ПолныйПуть,,0);
	Иначе
		ПереключитьОбъектыПодсистемы(ТекущиеДанные.ПолныйПуть,,1);
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Выгружать", ТекущиеДанные.ПолныйПуть);
	УстановитьПометкиРодителей(ТекущиеДанные, "Выгружать", ТекущиеДанные.ПолныйПуть);

	Если ТекущиеДанные.Подсистема = "Системное НСИ" И НЕ ТекущиеДанные.Выгружать = 0 Тогда
		Состояние(Нстр("ru = 'Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...'"));
		СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
		ПересчитатьВыгружаемыеПоСсылкеНаСервере();
		ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
		ОтключитьИсключения() ;
	ИначеЕсли  ТекущиеДанные.Подсистема = "Объекты к миграции при обрезке БД" И НЕ ТекущиеДанные.Выгружать = 0 Тогда
		Состояние(Нстр("ru = 'Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...'"));
		СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
		ПересчитатьВыгружаемыеПоСсылкеНаСервере();
		ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
		ОтключитьИсключенияОпер();	
	Конецесли;
	
КонецПроцедуры

&НаСервере
Функция ОбъектыПодсистемы(Подсистема)
	
	МассивСостава = Новый Массив;
	ОбъектПодсистемы = Неопределено;
	Попытка
		ОбъектПодсистемы = Вычислить("Метаданные.Подсистемы."+Подсистема); 
	Исключение
		Возврат МассивСостава;
	КонецПопытки;
	
	Если Подсистема = "СистемноеНСИ" Тогда
		Для Каждого Константа Из Метаданные.Константы Цикл
			ОписаниеКонстанты = "Константы." + Константа.Имя;
			Если МассивСостава.Найти(ОписаниеКонстанты) = Неопределено Тогда
				МассивСостава.Добавить(ОписаниеКонстанты);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого ОбъектДанных Из ОбъектПодсистемы.Состав Цикл
		
		ТипОбъекта = "";
		Если Метаданные.Справочники.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "Справочники";
		ИначеЕсли Метаданные.Константы.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "Константы";
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "Документы";	
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "БизнесПроцессы";
		ИначеЕсли Метаданные.Задачи.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "Задачи";
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "РегистрыСведений";
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "РегистрыНакопления";
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "ПланыВидовХарактеристик";
		ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектДанных) Тогда
			ТипОбъекта = "ПланыОбмена";
		КонецЕсли;		

		МассивСостава.Добавить(ТипОбъекта + "." + ОбъектДанных.Имя);
		
	КонецЦикла;	
	
	Возврат МассивСостава;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьОбъектыПодсистемы(Подсистема, ДанныеОбъектов = Неопределено, Действие)
	
	Если ДанныеОбъектов = Неопределено Тогда
		
		Элементы.ДеревоМетаданных.ТекущаяСтрока = 0;
		ДанныеОбъектов = Элементы.ДеревоМетаданных.ТекущиеДанные.ПолучитьЭлементы();
		
	КонецЕсли;	
	
	СоставПодсистемы = ОбъектыПодсистемы(Подсистема);	
	ОбработатьОбъектыПодсистемы(ДанныеОбъектов, СоставПодсистемы, Действие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбъектыПодсистемы(ДанныеОбъектов, СоставПодсистемы, Действие, Родитель = Неопределено)
	
	Для Каждого СтрокаОбъекта Из ДанныеОбъектов Цикл
		Если  СтрокаОбъекта.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ОбработатьОбъектыПодсистемы(СтрокаОбъекта.ПолучитьЭлементы(), СоставПодсистемы, Действие, СтрокаОбъекта.ПолноеИмяМетаданных);
			
		Иначе
			
			Если Не СоставПодсистемы.Найти(Родитель + "." + СтрокаОбъекта.ПолноеИмяМетаданных) = Неопределено Тогда
				
				СтрокаОбъекта.Выгружать = Действие;
				УстановитьПометкиРодителей(СтрокаОбъекта, "Выгружать");
				
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ОтключитьИсключения()
	
	СтрокиДерева = Объект.ДеревоМетаданных.ПолучитьЭлементы();

	Для Каждого СтрокаОбъекта Из СтрокиДерева Цикл
		Если  СтрокаОбъекта.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Подстроки1 = СтрокаОбъекта.ПолучитьЭлементы();
			Для Каждого Подстрока1 ИЗ Подстроки1 Цикл
				Подстроки2 = Подстрока1.ПолучитьЭлементы();
				Для Каждого Подстрока2 ИЗ Подстроки2 Цикл
					Если Подстрока2.ПолноеИмяМетаданных = "Номенклатура" Тогда
						Сообщить("Отключена выгрузка по ссылкам " + Подстрока2.ПолноеИмяМетаданных);
						Подстрока2.ВыгружатьПриНеобходимости = 0;
					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "новаСоответствиеЕдиницИзмерения" Тогда
						Подстрока2.Выгружать  = 0;
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);

					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ЕдиницыИзмерения" Тогда
						Подстрока2.Выгружать  = 0;
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);

					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "АдресныйКлассификатор" Тогда
						Подстрока2.Выгружать = 0;
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);

						//ИначеЕсли  Подстрока.ПолноеИмяМетаданных = "мгСоответствиеТочкиДоставкиЗоне" Тогда
						//	Подстрока.Выгружать = 0;
					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ПериодыДействияТарифныхСеток" Тогда
						Подстрока2.Выгружать = 0;
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);

					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ИзмененияДляМП" Тогда
						Подстрока2.Выгружать = 0;
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);

					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ИзмененияДляМПВодители" Тогда
						Подстрока2.Выгружать = 0;
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);

					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ОбменСКассовымСервером" Тогда
						Подстрока2.Выгружать = 0;
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);

					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ИсторияСостоянийПлатежныхДокументов" Тогда
						Подстрока2.Выгружать = 0;
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);


						//ИначеЕсли  Подстрока.ПолноеИмяМетаданных = "новаКалендарьВозможныхРейсов" Тогда
						//	Подстрока.Выгружать = 0;
						
					//Иначе
					//	
					//	Если Подстрока2.Выгружать  = 1 Тогда
					//		Подстрока2.ВыгружатьПриНеобходимости = 1;
					//	КонецЕсли;
						
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЦикла;

	
КонецПроцедуры

//&НаСервере
//Функция КолонкиДерева()
//	
//	Возврат РеквизитФормыВЗначение("Объект.ДеревоМетаданных").Колонки;

//КонецФункции	

&НаКлиенте
Процедура ОтключитьИсключенияОпер()
	
	СтрокиДерева = Объект.ДеревоМетаданных.ПолучитьЭлементы();
	//Колонки = КолонкиДерева();
		
	Для Каждого СтрокаОбъекта Из СтрокиДерева Цикл
		Если  СтрокаОбъекта.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Подстроки1 = СтрокаОбъекта.ПолучитьЭлементы();
			Для Каждого Подстрока1 ИЗ Подстроки1 Цикл
				Подстроки2 = Подстрока1.ПолучитьЭлементы();
				Для Каждого Подстрока2 ИЗ Подстроки2 Цикл
					
					//Если Подстрока.ПолноеИмяМетаданных = "Номенклатура" Тогда
					//	Подстрока.ВыгружатьПриНеобходимости = 0;
					//Иначе
					Если  Подстрока2.ПолноеИмяМетаданных = "новаСоответствиеЕдиницИзмерения" Тогда
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);
						Подстрока2.Выгружать  = 0;
					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ВзаимосвязьДокументов" Тогда
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);
						Подстрока2.Выгружать  = 0;
					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ЕдиницыИзмерения" Тогда
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);
						Подстрока2.Выгружать  = 0;
					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "АдресныйКлассификатор" Тогда
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);
						Подстрока2.Выгружать = 0;
						//ИначеЕсли  Подстрока.ПолноеИмяМетаданных = "мгСоответствиеТочкиДоставкиЗоне" Тогда
						//	Подстрока.Выгружать = 0;
					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ПериодыДействияТарифныхСеток" Тогда
						Сообщить("Отключен " + Подстрока2.ПолноеИмяМетаданных);
						Подстрока2.Выгружать = 0;
					ИначеЕсли  Подстрока2.ПолноеИмяМетаданных = "ЗагрузкаСТСД" 
						ИЛИ Подстрока2.ПолноеИмяМетаданных = "Рейс" 
						ИЛИ Подстрока2.ПолноеИмяМетаданных = "РеализацияТоваровУслуг"
						ИЛИ Подстрока2.ПолноеИмяМетаданных = "ЗаборТовара" 
						ИЛИ Подстрока2.ПолноеИмяМетаданных = "новаРейсМестнойДоставки" Тогда
						Сообщить("Включена выгрузка за периодом " + Подстрока2.ПолноеИмяМетаданных);
						Подстрока2.ВыгружатьЗаПериодом = 1;

						//ИначеЕсли  Подстрока.ПолноеИмяМетаданных = "новаКалендарьВозможныхРейсов" Тогда
						//	Подстрока.Выгружать = 0;
					//	
					//Иначе
					//	
					//	Если Подстрока2.Выгружать  = 1 Тогда
					//		Подстрока2.ВыгружатьПриНеобходимости = 1;
					//	КонецЕсли;
						
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьИсключения1(Команда)
	ОтключитьИсключения();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьИсключенияОпер1(Команда)
	ОтключитьИсключенияОпер();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРеестра(СтрокиДерева, ОбъектыВывода)

	Для Каждого СтрокаОбъекта Из СтрокиДерева Цикл
		СоставПодсистемы = ОбъектыПодсистемы(СтрокаОбъекта.ПолныйПуть);
		Если СоставПодсистемы.Количество() > 0 Тогда
			Для Каждого ОбъектПодсистемы Из СоставПодсистемы Цикл
				ОбъектыВывода.Добавить(ОбъектПодсистемы + " - "  + СтрокаОбъекта.ПолныйПуть);
			КонецЦикла;	
		КонецЕслИ;
		Если СтрокаОбъекта.ПолучитьЭлементы().Количество()> 0  Тогда
			 ОбъектыРеестра(СтрокаОбъекта.ПолучитьЭлементы(), ОбъектыВывода);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВывестиРеестрОбъектовПодсистем(Команда)
	СтрокиДерева = Объект.ДеревоПодсистем.ПолучитьЭлементы();
	
	ОбъектыВывода = Новый СписокЗначений;
	
	ОбъектыРеестра(СтрокиДерева, ОбъектыВывода);
	
	ОбъектыВывода.СортироватьПоЗначению();
	
	Для Каждого ОбъектВывода Из ОбъектыВывода Цикл
		Сообщить(ОбъектВывода.Значение);
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область ЗапрсОбъектовПоПаттернам

&НаСервере
Процедура ДобавитьИзЗапросаПоПаттернамНаСервере(ТекстЗапросаПоПаттернам, ДатаВЗапросаПоНачалу = Ложь, ДатаНачала = Неопределено)
	
	Объект.ДополнительныеОбъектыДляВыгрузки.Очистить();
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Начало запроса данных " + Строка(ТекущаяДата()));

	Запрос = Новый Запрос;//ТекстЗапросаПоПаттернам
	Запрос.Текст = ТекстЗапросаПоПаттернам;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ПериодВыгрузки.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодВыгрузки.ДатаОкончания));
	//ЕСли ДатаВЗапросаПоНачалуМесяца тогда
	//	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодВыгрузки.ДатаОкончания));
	//КонецЕсли;	
	
	Если ДатаВЗапросаПоНачалу Тогда
		Запрос.УстановитьПараметр("ДатаНачалаПериода", НачалоДня(ДатаНачала));
	КонецЕсли;
	//
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Установлен период выборки объектов: " + СокрЛП(НачалоДня(ПериодВыгрузки.ДатаНачала)) + " - " + СокрЛП(КонецДня(ПериодВыгрузки.ДатаОкончания)));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	РезультатЗапроса.Колонки.Добавить("ИмяОбъектаДляЗапроса", Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Получено " + Строка(РезультатЗапроса.Количество()) + " записей " + Строка(ТекущаяДата()));
	
	//РезультатЗапроса.Колонки.Удалить("Номер");
	РезультатЗапроса.Колонки.Удалить("ТипСсылки");
	
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		СтрокаРезультата.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(СтрокаРезультата.Объект);
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обработано " + Строка(РезультатЗапроса.Количество()) + " записей " + Строка(ТекущаяДата()));
	
	Объект.ДополнительныеОбъектыДляВыгрузки.Загрузить(РезультатЗапроса);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено на форму " + Строка(РезультатЗапроса.Количество()) + " записей " + Строка(ТекущаяДата()));

	РеквизитФормыВЗначение("Объект").ОповеститьОбОкончании("Запрос на форме");	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзЗапросаПоПаттернам(Команда)
	
	ПаттерныЗапроса = Неопределено;	
	Если Не ПолучитьПаттерныЗапросов(ПаттерныЗапроса) Тогда Возврат КонецЕсли;

	ТекстЗапросаПоПаттернам = ТекстЗапросаПоПаттернам(ПаттерныЗапроса, Истина, ДатаВЗапросаПоНачалу, СсылкиЗапросаЗаПериодом);
	Если ТекстЗапросаПоПаттернам = "" Тогда Возврат КонецЕсли;

	ЕСли ТолькоСохранитьТекстЗапроса Тогда
		ОчиститьСообщения();
		Сообщить(ТекстЗапросаПоПаттернам);
		Возврат;
	КонецеслИ;	
	
	ДобавитьИзЗапросаПоПаттернамНаСервере(ТекстЗапросаПоПаттернам, ДатаВЗапросаПоНачалу, ДатаНачалаСсылок);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПоПаттернам(ПаттерныЗапроса, ТолькоПоДатеНачала = Истина, ДатаВЗапросаПоНачалу = Ложь, СсылкиЗапросаЗаПериодом = Ложь)
	
	ТекОбработка = РеквизитФормывЗначение("Объект");
	Возврат ТекОбработка.ТекстЗапросаПоПаттернам(ПаттерныЗапроса, Ложь, ДатаВЗапросаПоНачалу, СсылкиЗапросаЗаПериодом);

КонецФункции	

&НаКлиенте
Процедура ДобавитьИзЗапросаПоПаттернамВперед(Команда)
	
	ПаттерныЗапроса = Неопределено;	
	Если Не ПолучитьПаттерныЗапросов(ПаттерныЗапроса) Тогда Возврат КонецЕсли;

	ТекстЗапросаПоПаттернам = ТекстЗапросаПоПаттернам(ПаттерныЗапроса, Ложь, ДатаВЗапросаПоНачалу, СсылкиЗапросаЗаПериодом);
	Если ТекстЗапросаПоПаттернам = "" Тогда Возврат КонецЕсли;
	
	ЕСли ТолькоСохранитьТекстЗапроса Тогда
		ОчиститьСообщения();
		Сообщить(ТекстЗапросаПоПаттернам);
		Возврат;
	КонецеслИ;
	
	ДобавитьИзЗапросаПоПаттернамНаСервере(ТекстЗапросаПоПаттернам, ДатаВЗапросаПоНачалу,  ДатаНачалаСсылок);

КонецПроцедуры

&НаКлиенте
Функция  ПолучитьПаттерныЗапросов(ПаттерныЗапроса)
	
	ПаттерныЗапроса = Неопределено;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    Диалог.Заголовок				= "Выбрать паттерны запросов";
    Диалог.ПредварительныйПросмотр	= Ложь;
    Диалог.Фильтр					= "Текстовый документ (*.txt)|*.txt";

	ПолноеИмяФайла = Неопределено;
	
    Если Диалог.Выбрать() Тогда
        ПолноеИмяФайла= Диалог.ПолноеИмяФайла;
	Иначе
		Возврат ЛОжь;
	КонецЕсли;
	
	ПаттерныЗапроса = Новый Соответствие;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПолноеИмяФайла);
	Стр = "";

	Пока Стр <> Неопределено Цикл
		Стр = Текст.ПрочитатьСтроку();
		Паттерн = СтрРазделить(Стр,",");
		Попытка		
			//ПаттерныЗапроса.Вставить(СокрЛП(Паттерн[0]), СокрЛП(Паттерн[1]));
			Ключ = СокрЛП(Паттерн[0]);
			Значение = СокрЛП(Паттерн[1]);
			Попытка ВедущийРеквизит = СокрЛП(Паттерн[2]) Исключение ВедущийРеквизит = ""  КонецПопытки;

			ПаттерныЗапроса.Вставить(Ключ + "_" + Значение, Новый Структура("ОбъектЗапроса, РеквизитЗапроса, ВедущийРеквизит", Ключ, Значение, ВедущийРеквизит));

			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ключ + "_" + Значение);
			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Текст.Закрыть();
	
	Возврат Истина;
	
КОнецФункции	

&НаСервере
Процедура ТестОповещателяНаСервере()
	РеквизитФормыВЗначение("Объект").ОповеститьОбОкончании("Тест оповещения о событии");	
КонецПроцедуры

&НаКлиенте
Процедура ТестОповещателя(Команда)
	ТестОповещателяНаСервере();
КонецПроцедуры


#КонецОбласти
