
//**** Объявление переменных модуля ****//

Перем МассивДоставокДляИсключения Экспорт;
//** Текущие наборы данных **//


//Кэш представления объектов. В течении сеанса не обновляется
//<Соответствие>
//  Ключ - Ссылка на объект БД
//  Значение - <Строка> представление объекта
Перем КэшПредставленияОбъектов Экспорт;

//Характеристики заказов <ТаблицаЗеначений>
//  Заказ - <БизнесПроцессСсылка.новаМестнаяДоставка> заказ на доставку
//  Заказ_Пред - <Строка> представление заказа
//  ТипДоставки - <ПеречислениеСсылка.новаВидыМестнойДоставки> вид доставки
//  ДлительностьПребыванияВТочке - <Дата.Время> стоянка в точке прибытия
//  ДлительностьПребыванияВТочкеОтправления - <Дата.Время> стоянка в точке отправления
//  Грузополучатель_ОсновнойМенеджер_Пред - <Строка> основной менеджер грузополучателя
//  Грузоотправитель_ОсновнойМенеджер_Пред - <Строка> основной менеджер грузоотправителя
//  Грузополучатель_ОсновнойТелефон_Пред - <Строка> основной телефон грузополучателя
//  Грузоотправитель_ОсновнойТелефон_Пред - <Строка> основной телефон грузоотправителя
//  Комментарий - <Строка> комментарий
//  Стоимость - <Число 15, 2> стоимость груза
//  Валюта_Пред - <Строка> валюта стоимости
//  ЕстьТочкаПрибытия - <Булево> Истина - точка прибытия не склад
//  ТочкаПрибытия - <Справочник.новаТочкиДоставки> точка прибытия
//  ТочкаПрибытия_Пред - <Строка> описание точки прибытия
//  ШиротаПрибытия - <Число 20, 17> широта точки прибытия
//  ДолготаПрибытия - <Число 20, 17> долгота точки прибытия
//  ЕстьТочкаОтправления - <Булево> точка отправления не склад
//  ТочкаОтправления - <Справочник.новаТочкиДоставки> точка отправления
//  ТочкаОтправления_Пред - <Строка> описание точки отправления
//  ШиротаОтправления - <Число 20, 17> широта точкиприбытия
//  ДолготаОтправления - <Число 20, 17> долгота точки прибытия
//  Вес - <Число 15, 3> вес заказа в килограммах
//  Объем - <Число 15, 3> объём заказа в кубометрах
//  Места - <Число 10, 0> места заказа
//  Грузоотправитель - грузотправитель
//  Грузоотправитель_Пред - описание грузоотправителя
//  Грузополучатель - грузополучатель
//  Грузополучатель_Пред - описание грузополучателя
//  КатегорииЗаказа - <Массив> категории заказа
//  КатегорииТранспорта - <Массив> категории транспорта
//  РайоныАдреса - <Массив> георайон заказа
//  VIP - <Булево> признак заказа
//  Факт - <Булево> признак заказа
//  ВремяПрибытияС - <Дата.ДатаВремя> начало окна прибытия
//  ВремяПрибытияПо - <Дата.ДатаВремя> конец окна прибытия
Перем ОсновнаяТаблицаЗаказов Экспорт;

//Характеристики транспорта <ТаблицаЗеначений>
//  Транспорт - <СправочникСсылка.новаТранспорт> транспорт, доступный на дату планирования
//  Транспорт_Пред - <Строка> описание транспорта
//  Водитель - <СправочникСсылка.новаВодители> водитель рейса
//  Водитель_Пред - <Строка> описание водителя
//  Экспедитор - <Справочник.новаЭкспедиторы> описание экспедитора
//  Экспедитор_Пред - <Строка> экспедитор рейса
//  НачалоДоступности - <Дата.ДатаВремя> время начала рейса
//  КонецДоступности - <Дата.ДатаВремя> время окончания рейса
//  НачалоРейса - <Справочник.новаТочкиДоставки> точка начала рейса
//  НачалоРейса_Пред - <Строка> описание начала рейса
//  Вид - <Справочник.новаВидыТранспорта> вид транспорта
//  Вид_Пред - <Строка> описание вида транспорта
//  Грузоподъемность - <Число 15,3> грузоподъёмность транспорта
//  Грузовместимость - <Число 15,3> объём кузова транспорта
//  КатегорииТранспорта - <Массив> категория транспорта
//  Районы - <Массив> список районов транспорта
Перем ОсновнаяТаблицаТранспорта Экспорт;

//Список заказов для отображения на карте
//<Соответствие>
//  ключ -<СтрокаТаблмцыЗначений> строка таблицы ОсновнаяТаблицаЗаказов
//  значение - <Булево> всегда истина
Перем ОтображаемыеЗаказы Экспорт;
//Содержит список заказов, отобранных по предыдущему фильтру
Перем ОтображаемыеЗаказыПоПредыдущемуФильтру;

//Список выбранных заказов
//<Соответствие>
//  Ключ - <СтрокаТаблицыЗначений> ссылка на строку таблицы ОсновнаяТаблицаЗаказов
//  Значение - <Булево> всегда Истина
Перем ВыбранныеЗаказы Экспорт;
//Содержит список заказов, отобранных по предыдущему фильтру
Перем ВыбранныеЗаказыПоПредыдущемуФильтру;

//Список транспорта доступного для переноса в список выбранного транспорта
//<Соответствие>
//  Ключ - <СтрокаТаблмцыЗначений> строка таблицы ОсновнаяТаблицаТранспорта
//  Значение - <Булево> всегда истина
Перем ОтображаемыйТранспорт Экспорт;
//Содержит список транспорта, отобранных по предыдущему фильтру
Перем ОтображаемыйТранспортПоПредыдущемуФильтру;

//Список выбранного транспорта
//<Соответствие>
//  Ключ - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаТранспорта
//  Значение - <Булево> - всегда Истина
Перем ВыбранныйТранспорт Экспорт;
//Содержит список транспорта, отобранных по предыдущему фильтру
Перем ВыбранныйТранспортПоПредыдущемуФильтру;


//** Фильтры **//


//Структура фильтра:
//<Структура>
//  ЛюбойВес - <Булево> Истина - фильтр не учитывается
//  МинимальныйВес - <Число 15, 3> минимальный вес
//  МаксимальныйВес - <Число 15, 3> максимальный вес
//  ЛюбойОбъем - <Булево> Истина - фильтр не учитывается
//  МинимальныйОбъем - <Число 15, 3> минимальный Объём
//  МаксимальныйОбъем - <Число 15, 3> максимальный объём
//  Грузоотправители - <Соответствие>
//    Ключ - грузоотправитель
//    Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//  БезГрузоотправителя - <Булево> - включать заказы без грузоотправителя
//  ЛюбойГрузоотправитель - <Булево> Истина - фильтр не учитывается
//  РайоныАдресов - <Соответствие>
//    Ключ - георайон адреса
//    Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//  БезРайонов - <Булево> - включать заказы без районов
//  ЛюбойРайон - <Булево> Истина - фильтр не учитывается
//  КатегорииЗаказов - <Соответствие>
//    Ключ - категория заказа
//    Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//  БезКатегорийЗаказов - <Булево> - включать заказы без категорий заказов
//  ЛюбаяКатегория - <Булево> Истина - фильтр не учитывается
//  МинимальнаяГрузоподъемность - <Число> минимальная грузоподъемность транспорта
//  МаксимальнаяГрузоподъемность - <Число> максимальная грузоподъемность транспорта
//  ЛюбаяГрузоподъемность - <Булево> фильтр по грузоподъемности транспорта не учитывается
//  МинимальнаяГрузовместимость - <Число> минимальнй объём кузова транспорта
//  МаксимальнаяГрузовместимость - <Число> максимальный объём кузова транспорта
//  ЛюбаяГрузовместимость -  <Булево> фильтр по объёму кузова транспорта не учитывается
//  ВидыТранспорта - <Соответствие>
//    Ключ - вид транспорта
//    Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//  БезВидовТранспорта - <Булево> - включать транспорт без вида
//  ЛюбойВидТранспорта - <Булево> фильтр по виду транспорта не учитывается
//  КатегорииТранспорта - <Соответствие>
//    Ключ - категория транспорта
//    Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//  БезКатегорийТранспорта - <Булево> - включать транспорт и заказы без категорий транспорта
//  ЛюбаяКатегорияТранспорта - <Булево> Истина - фильтр не учитывается

//По данному фильтру формируются списки отображаемых заказов и транспорта
Перем ФильтрОтображаемыхЭлементов Экспорт;

//По данному фильтру формируются списки выбранных заказов и транспорта
Перем ФильтрВыбранныхЭлементов Экспорт;

//Для быстрого поиска создаётся список сответствий
//<Структура>
//  Грузоотправители - <Соответствие>
//    Ключ - грузоотправитель
//    Значение - список строк таблицы ОсновнаяТаблицаЗаказов
//  КатегорииЗаказов - <Соответствие>
//    Ключ - категория заказа
//    Значение - список строк таблицы ОсновнаяТаблицаЗаказов
//  КатегорииТранспорта - <Соответствие>
//    Ключ - категория транспорта
//    Значение - список строк таблицы ОсновнаяТаблицаТранспорта
//  РайоныАдресов - <Соответствие>
//    Ключ - Район адреса
//    Значение - список строк таблицы ОсновнаяТаблицаЗаказов
//  ВидыТранспорта - <Соответствие>
//    Ключ - вид транспорта
//    Значение - список строк таблицы ОсновнаяТаблицаТранспорта
//  ЗаказыПоКатегориямТранспорта - <Соответствие>
//    Ключ - категория транспорта
//    Значение - список строк таблицы ОсновнаяТаблицаЗаказов
//  ТранспортПоКатегориямТранспорта - <Соответствие>
//    Ключ - категория транспорта
//    Значение - список строк таблицы ОсновнаяТаблицаТранспорта
//  РайоныТранспорта - <Соответствие>
//    Ключ - район
//    Значение - список строк таблицы ОсновнаяТаблицаТранспорта
Перем Хэши;

//Исользуется для получения минимального значени какой либо величины через функцию Мин()
//Значение по умолчанию - 1000000000000000
Перем МаксимальноеЧисло;

//Описание объекта статистики
//
//  <Структура>
//    Грузоотправители - <Соответствие>
//      Ключ - грузоотправитель
//      Значение - <Число> количество заказов
//    БезГрузоотправителя - <Число> количество заказов
//    РайоныАдресов - <Соответствие>
//      Ключ - георайон адреса
//      Значение - <Число> количество заказов
//    БезРайонов - <Число> количество заказов
//    КатегорииЗаказов - <Соответствие>
//      Ключ - категория заказа
//      Значение - <Число> количество заказов
//    БезКатегорийЗаказов - <Число> количество заказов
//    ВидыТранспорта - <Соответствие>
//      Ключ - вид транспорта
//      Значение - <Число> количество заказов
//    БезВидовТранспорта - <Число> количество заказов
//    КатегорииТранспорта - <Соответствие>
//      Ключ - категория транспорта
//      Значение - <Число> количество заказов и транспорта
//    БезКатегорийТранспорта - <Число> количество заказов и транспорта

//Статистика фильтров и выбоорки. Хранит количество заказов по разрезам фильтра
//Статистика основных таблиц
Перем СтатистикаЭлементов Экспорт;
//Статистика отображаемых заказов и транспорта
Перем СтатистикаОтображаемыхЭлементов Экспорт;
//Статистика выбранных заказов и транспорта
Перем СтатистикаВыбранныхЭлементов Экспорт;

//Хранит соответствие категории транспорта и их значений
//<Соответствие>
//  Ключ - значение категории транспорта
//  Хначение - категория транспорта
Перем ИерархияКатегорийТранспорта Экспорт;


//** Отображаемая информация **//


//Суммарные характеристика заказов и транспорта
//<Структура>
//Выделено
//  ВыделеноЗаказов - <Число> количество выделенных заказов
//  ВыделеноВесЗаказов - <Число> вес выдленных заказов
//  ВыделеноОбъемЗаказов - <Число> - объём выделенных заказов
//  ВыделеноКоличествоМестВЗаказах - <Число> - количество мест в выделенных заказов
//  ВыделеноГрузоотправителиЗаказов - <Соответствие>
//    Ключ - Грузотправитель
//    Значение - количество заказов, имеющих данного грузоотправителя
//  ВыделеноКатегорийЗаказов - <Соответствие>
//    Ключ - категория заказа
//    Значение - количество заказов имеющих данную категорию
//  ВыделеноКатегорийТранспорта - <Соответствие>
//    Ключ - категория транспорта
//    Значение - количество заказов имеющих данную категорию транспорта
//  ВыделеноРайоновЗаказов - <Соответствие>
//    Ключ - георайон заказа
//    Значение - количество заказов имеющих данный георайон
//  ВыделеноТранспорта - <Число> количество транспорта, могущего развести выделенные заказы
//  ВыделеноВидовТранспорта - <Соответствие>
//    Ключ - вид транспорта
//    Значение - количество транспортов, имеющих данный вид транспорта
//  ВыделеноМинГрузоподъемностьТранспорта - <Число> минимальная грузоподъёмность транспорта
//  ВыделеноМаксГрузоподъемностьТранспорта - <Число> максимальная грузоподъёмность транспорта
//  ВыделеноМинГрузовместимостьТранспорта - <Число> минимальная грузовместимость транспорта
//  ВыделеноМаксГрузовместимостьТранспорта - <Число> максимальная грузовместимость транспорта
//Всего
//  ВсегоЗаказов - <Число> количество заказов отображаемых на карте
//  ВсегоВесЗаказов - <Число> общий вес заказов
//  ВсегоОбъемЗаказов - <Число> - общий объём заказов
//  ВсегоКоличествоМестВЗаказах - <Число> - общее количество мест в заказах
//  ВсегоГрузоотправителиЗаказов - <Соответствие>
//    Ключ - Грузотправитель
//    Значение - количество заказов, имеющих данного грузоотправителя
//  ВсегоКатегорийЗаказов - <Соответствие>
//    Ключ - категория заказа
//    Значение - количество заказов имеющих данную категорию
//  ВсегоКатегорийТранспорта - <Соответствие>
//    Ключ - категория транспорта
//    Значение - количество заказов имеющих данную категорию транспорта
//  ВсегоРайоновЗаказов - <Соответствие>
//    Ключ - георайон заказа
//    Значение - количество заказов имеющих данный георайон
//  ВсегоТранспорта - <Число> количество транспорта, могущего развести все заказы
//  ВсегоВидовТранспорта - <Соответствие>
//    Ключ - вид транспорта
//    Значение - количество транспортов, имеющих данный вид транспорта
//  ВсегоМинГрузоподъемностьТранспорта - <Число> минимальная грузоподъёмность транспорта
//  ВсегоМаксГрузоподъемностьТранспорт - <Число> максимальная грузоподъёмность транспорта
//  ВсегоМинГрузовместимостьТранспорта - <Число> минимальная грузовместимость транспорта
//  ВсегоМаксГрузовместимостьТранспорт - <Число> максимальная грузовместимость транспорта
Перем СуммарныеХарактеристики Экспорт;

//Объект отображающий, суммарную информацию, реализующий
//поля:
//Выделено:
//  ВыделеноЗаказов
//  ВыделеноВесЗаказов
//  ВыделеноОбъемЗаказов
//  ВыделеноКоличествоМестВЗаказах
//  ВыделеноГрузоотправителиЗаказов
//  ВыделеноКатегорийЗаказов
//  ВыделеноКатегорийТранспорта
//  ВыделеноРайоновЗаказов
//  ВыделеноТранспорта
//  ВыделеноВидовТранспорта
//  ВыделеноГрузоподъемностьТранспорта
//  ВыделеноГрузовместимостьТранспорта
//Всего:
//  ВсегоЗаказов
//  ВсегоВесЗаказов
//  ВсегоОбъемЗаказов
//  ВсегоКоличествоМестВЗаказах
//  ВсегоГрузоотправителиЗаказов
//  ВсегоКатегорийЗаказов
//  ВсегоКатегорийТранспорта
//  ВсегоРайоновЗаказов
//  ВсегоТранспорта
//  ВсегоВидовТранспорта
//  ВсегоГрузоподъемностьТранспорта
//  ВсегоГрузовместимостьТранспорта
//Все поля месют тип <Строка>
//метод:
//  ПриОбновленииСтатистики()
Перем ПриемникСуммарнойИнформации Экспорт;

//поле карты <COMОбъект>
Перем ПолеКарты Экспорт;

//<COMОбъект>
//Список маркеров для отрисовки
Перем ВыборкаМаркеров;

//компоновщики маркеров
//<Соответствие>
//  Ключ - <ПеречислениеСсылка.новаВидыФигурыМаркера> вид фигуры
//  Значение - <COMОбъект> компоновщик маркеров
Перем КомпоновщикиМаркеров;

//Вид группировки маркеров. влияет на ключ КомпоновщикиМаркеров
//<ПеречислениеСсылка.новаВидыГруппировокМаркеров>
Перем ВидГруппировкиМаркеров;

//Реорганизованы для удобного поиска
Перем ПодготовленныеНастройкиОтображения;
Перем СвойстваДоставкиРасшифровкаМаркера;
Перем ЗначенияНастройкиОтображенияПоУмолчанию;

//Соответствие заказов маркерам на карте
//<Соответствие>
//  Ключ - закза
//  Значение - <Структура> 
//    ТочкаПрибытия - маркер точки прибытия
//    ТочкаОтправления - маркер точки отправления
Перем МаркераПоЗаказам;

//Классификатор для фильтра отображаемых районов
Перем КлассификаторРайонов;

//Список полигонов отображаемых районов
Перем Полигоны;

//Подключение к КСЛ
Перем КСЛ;

//** Редактирование рейса **//


Перем РедактируетсяРейс Экспорт;
Перем СоздаётсяРейс Экспорт;
Перем ДобавляютсяВРейсДоставки Экспорт;


//Редактирование маршрута
Перем МассивДоставокРейса Экспорт;
Перем СписокПроверкиМаршрута Экспорт;
Перем РедактируемыйМаршрут Экспорт;
Перем РедактируетсяМаршрут Экспорт;


//Обработка УниверсальныйЖурнал
Перем ЖурналРейсов Экспорт;

//Ссылка на редактируемый рейс. Если рейс не редакттируется, то неопределно.
Перем РедактируемыйРейс Экспорт;

//Копия фильтра на момент начала редактирования рейса
Перем ФильтрОтображаемыхЭлементовДоНачаларедактированияРейса;


//Коллекция маркеров с индексами
Перем ВыборкаМаркеровИндексируемая;



//**** Процедуры и функции модуля ****//

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеОбщихРесурсов() Экспорт
	
	Если ПолеКарты <> Неопределено Тогда
		
		Если КэшПредставленияОбъектов <> Неопределено Тогда
			КэшПредставленияОбъектов.Очистить();
			КэшПредставленияОбъектов = Неопределено;
		КонецЕсли;
		
		Если ОсновнаяТаблицаЗаказов <> Неопределено Тогда
			ОсновнаяТаблицаЗаказов.Очистить();
			ОсновнаяТаблицаЗаказов = Неопределено;
		КонецЕсли;
		
		Если ОсновнаяТаблицаТранспорта <> Неопределено Тогда
			ОсновнаяТаблицаТранспорта.Очистить();
			ОсновнаяТаблицаТранспорта = Неопределено;
		КонецЕсли;
		
		Если ОтображаемыеЗаказы <> Неопределено Тогда
			ОтображаемыеЗаказы.Очистить();
			ОтображаемыеЗаказы = Неопределено;
		КонецЕсли;
		
		Если ОтображаемыеЗаказыПоПредыдущемуФильтру <> Неопределено Тогда
			ОтображаемыеЗаказыПоПредыдущемуФильтру.Очистить();
			ОтображаемыеЗаказыПоПредыдущемуФильтру = Неопределено;
		КонецЕсли;
		
		Если ВыбранныеЗаказы <> Неопределено Тогда
			ВыбранныеЗаказы.Очистить();
			ВыбранныеЗаказы = Неопределено;
		КонецЕсли;
		
		Если ВыбранныеЗаказыПоПредыдущемуФильтру <> Неопределено Тогда
			ВыбранныеЗаказыПоПредыдущемуФильтру.Очистить();
			ВыбранныеЗаказыПоПредыдущемуФильтру = Неопределено;
		КонецЕсли;
		
		Если ОтображаемыйТранспорт <> Неопределено Тогда
			ОтображаемыйТранспорт.Очистить();
			ОтображаемыйТранспорт = Неопределено;
		КонецЕсли;
		
		Если ОтображаемыйТранспортПоПредыдущемуФильтру <> Неопределено Тогда
			ОтображаемыйТранспортПоПредыдущемуФильтру.Очистить();
			ОтображаемыйТранспортПоПредыдущемуФильтру = Неопределено;
		КонецЕсли;
		
		Если ВыбранныйТранспорт <> Неопределено Тогда
			ВыбранныйТранспорт.Очистить();
			ВыбранныйТранспорт = Неопределено;
		КонецЕсли;
		
		Если ВыбранныйТранспортПоПредыдущемуФильтру <> Неопределено Тогда
			ВыбранныйТранспортПоПредыдущемуФильтру.Очистить();
			ВыбранныйТранспортПоПредыдущемуФильтру = Неопределено;
		КонецЕсли;

		ФильтрОтображаемыхЭлементов = Неопределено;
		ФильтрВыбранныхЭлементов = Неопределено;
		
		Если Хэши <> Неопределено Тогда
			
			Хэши.Грузоотправители.Очистить();
			Хэши.КатегорииЗаказов.Очистить();
			Хэши.КатегорииТранспорта.Очистить();
			Хэши.РайоныАдресов.Очистить();
			Хэши.ВидыТранспорта.Очистить();
			Хэши.ЗаказыПоКатегориямТранспорта.Очистить();
			Хэши.ТранспортПоКатегориямТранспорта.Очистить();
			Хэши.РайоныТранспорта.Очистить();
			Хэши = Неопределено;
		КонецЕсли;
		
		СтатистикаЭлементов = Неопределено;
		СтатистикаОтображаемыхЭлементов = Неопределено;
		СтатистикаВыбранныхЭлементов = Неопределено;
		ИерархияКатегорийТранспорта = Неопределено;
		СуммарныеХарактеристики = Неопределено;
		ПриемникСуммарнойИнформации = Неопределено;
		ВидГруппировкиМаркеров = Неопределено;
		ПодготовленныеНастройкиОтображения = Неопределено;
		СвойстваДоставкиРасшифровкаМаркера = Неопределено;
		ЗначенияНастройкиОтображенияПоУмолчанию = Неопределено;
		КлассификаторРайонов = Неопределено;
		РедактируетсяРейс = Неопределено;
		СоздаётсяРейс = Неопределено;
		ДобавляютсяВРейсДоставки = Неопределено;
		РедактируемыйРейс = Неопределено;
		ФильтрОтображаемыхЭлементовДоНачаларедактированияРейса = Неопределено;
		
		ЖурналРейсов = Неопределено;
		
		Если ВыборкаМаркеров <> Неопределено Тогда
			ВыборкаМаркеров.Очистить();
		КонецЕсли;
		
		Если ВыборкаМаркеровИндексируемая <> Неопределено Тогда
			ВыборкаМаркеровИндексируемая.Очистить();
			ВыборкаМаркеровИндексируемая = Неопределено;
		КонецЕсли;
		
		Если КомпоновщикиМаркеров <> Неопределено Тогда
			КомпоновщикиМаркеров.Очистить();
		КонецЕсли;
		
		Если Полигоны <> Неопределено Тогда
			
			Полигоны.Очистить();
		КонецЕсли;
		
		ПолеКарты.ОтключитьВсеОбработчики();
		ПолеКарты = Неопределено;
		
		КСЛ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

//Инициализация подключения КСЛ
//
Процедура ПодключитьКСЛ()
	
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		КСЛ = новаСерверКСЛ.Подключиться();
	#КонецЕсли
	
КонецПроцедуры

//** Работа с набором данных **//

//Обновление рабочих наборов данных
//
//  Параметры:
//    ДатаПланирования - <Дата.Дата> дата планирования развозки
//    СброситьКэш  - <Булево> Истина - очистить кэш на дату
//    ОбновляемаяЧасть - <Строка> обновляемая часть данных. Значение по умолчанию "Все"
//      "Заказы" - обновляется информация по заказам
//      "Транспорт" - обновляется информация по транспорту
//      "Все" - обновляется информация по транспорту и заказам
//
Процедура ОбновитьДанные(ОбновляемаяЧасть = "Все") Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗаказы = (ОбновляемаяЧасть = "Заказы") или (ОбновляемаяЧасть = "Все");
	ОбновитьТранспорт = (ОбновляемаяЧасть = "Транспорт") или (ОбновляемаяЧасть = "Все");
	
	Если ОбновитьЗаказы Тогда
		УдалитьЗаказыИзОтображаемых();
	КонецЕсли;
	Если ОбновитьТранспорт Тогда
		УдалитьТранспортИзОтображаемого();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПланирования) Тогда
		
		Если ОбновитьЗаказы Тогда
			ОсновнаяТаблицаЗаказов = ПолучитьОсновнуюИнформациюПоЗаказам();
		КонецЕсли;
		Если ОбновитьТранспорт Тогда
			ОсновнаяТаблицаТранспорта = ПолучитьОсновнуюИнформациюПоТранспорту();
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьФильтры(ОбновляемаяЧасть);
	Если ОбновитьЗаказы Тогда
		ИнициализироватьОтображениеЗаказов();
	КонецЕсли;
	
	Если ОбновитьЗаказы Тогда
		ДобавитьЗаказыВОтображаемые();
	КонецЕсли;
	Если ОбновитьТранспорт Тогда
		ДобавитьТранспортВОтображаемый();
	КонецЕсли;
	
	ОтправитьСуммарнуюИнформацию();
	
КонецПроцедуры

//Заполняет соответствие ИерархияКатегорийТранспорта
//
Процедура ОбновитьИерархиюКатегорийТранспорта()
	
	ИерархияКатегорийТранспорта.Очистить();
	
	СписокКатегорий = Новый Массив;
	Для каждого КатегорияТранспорта Из Хэши.ЗаказыПоКатегориямТранспорта Цикл
		
		Если КатегорияТранспорта.Ключ <> "БезКатегорийТранспорта" Тогда
			СписокКатегорий.Добавить(КатегорияТранспорта.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КатегорияТранспорта Из Хэши.ТранспортПоКатегориямТранспорта Цикл
		
		Если КатегорияТранспорта.Ключ <> "БезКатегорийТранспорта" Тогда
			СписокКатегорий.Добавить(КатегорияТранспорта.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка КАК ЗначениеКатегорииТранспорта
	|    ,Владелец КАК КатегорияТранспорта
	|    ,ПРЕДСТАВЛЕНИЕ(Владелец) КАК КатегорияТранспорта_Пред
	|  ИЗ
	|    Справочник.новаЗначенияКатегорийТранспорта
	|  ГДЕ
	|    Ссылка В(&ЗначенияКатегорий)
	|");
	
	Запрос.УстановитьПараметр("ЗначенияКатегорий", СписокКатегорий);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ИерархияКатегорийТранспорта.Вставить(Выборка.ЗначениеКатегорииТранспорта, Выборка.КатегорияТранспорта);
			
			КэшПредставленияОбъектов.Вставить(Выборка.КатегорияТранспорта, Выборка.КатегорияТранспорта_Пред);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
//Заказы

//Инициализация маркеров на карте
//
Процедура ИнициализироватьОтображениеЗаказов()
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборкаМаркеров <> Неопределено Тогда
		ВыборкаМаркеров.Очистить();
	КонецЕсли;
	
	Если ВыборкаМаркеровИндексируемая <> Неопределено Тогда
		ВыборкаМаркеровИндексируемая.Очистить();
	КонецЕсли;
	
	ПодключитьКСЛ();
	
	Если ВидГруппировкиМаркеров = Перечисления.новаВидыГруппировокМаркеров.БезГруппировкиСПредупреждением Тогда
		ПолеКарты.АлгоритмГруппировки = "АлгоритмГруппировкиОбъектовКартыБезГруппировкиСПредупреждением";
	ИначеЕсли ВидГруппировкиМаркеров = Перечисления.новаВидыГруппировокМаркеров.БезГруппировкиБезПредупреждения Тогда
		ПолеКарты.АлгоритмГруппировки = "АлгоритмГруппировкиОбъектовКартыБезГруппировкиБезПредупреждения";
	Иначе
		ПолеКарты.АлгоритмГруппировки = "АлгоритмГруппировкиОбъектовКартыСетка";
	КонецЕсли;
	
	МаркераПоЗаказам = Новый Соответствие;
	
	НаборМаркеров = КСЛ.ГрафическийИнтерфейс_Карты_НаборГруппируемыхОбъектов();
	Для каждого Заказ Из ОсновнаяТаблицаЗаказов Цикл
		
		Маркера = Новый Структура("ТочкаПрибытия, ТочкаОтправления");
		
		СтильОтображенияМаркера = ПолучитьСтильОтображения(Заказ);
		Струк = Новый Структура();
		Струк.Вставить("Доставка", Заказ.Заказ.Ссылка);
		
		
		МасИнт = Новый Массив;
		
		масИнт.Добавить("Shop_181");
		масИнт.Добавить("Shop_227");
		
		Нету = Ложь;
		
		Если Час(ТекущаяДата()) < 18 Тогда
			//Если СокрЛП(Заказ.ИнтернетМагазинКод) = "Shop_181" Или СокрЛП(Заказ.ИнтернетМагазинКод) = "Shop_227" Тогда
			//Иначе
				Если Заказ.ОтсутствуетВНакладной003 Тогда
					Если Заказ.ФлагНайден <> истина Тогда
						Нету = Истина;
					КонецеСли;
				КонецеСли;
			//КонецеСли;	
		КонецЕСли;
		
		//Зап = Новый Запрос;
		//Зап.Текст = "ВЫБРАТЬ
		//            |	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка
		//            |ИЗ
		//            |	Документ.ДоставкиСОтклонениямиКоличестваСписком.Доставки КАК ДоставкиСОтклонениямиКоличестваСпискомДоставки
		//            |ГДЕ
		//            |	ВЫРАЗИТЬ(ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка КАК Документ.РеализацияТоваровУслуг).Номер = &Номер
		//            |	И ВЫРАЗИТЬ(ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка КАК Документ.РеализацияТоваровУслуг).ВладелецТовара.Код В (&Мас)
		//            |	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон";
		//			
		//Зап.установить			
		
		//Нету = РегистрыСведений.ОтсутствующиеНаСкладеДоставки.ПолучитьПоследнее(ТекущаяДата(), Струк).ОтсутствуетНаСкладе;
		Если Нету Тогда
			СтильОтображенияМаркера.РазмерФигуры = 10;
		КонецеСли;	
		
		Стиль = КСЛ.ГрафическийИнтерфейс_Графика.СоздатьСтиль();
		Стиль.ЦветФонаМаркера = Строка(СтильОтображенияМаркера.ЦветФона);
		Стиль.ЦветГраницыМаркера = Строка(СтильОтображенияМаркера.ЦветОкантовки);
		Стиль.ТолщинаГраницыМаркера = СтильОтображенияМаркера.ТолщинаОкантовки;
		
		Стиль.ЦветВектора = Строка(СтильОтображенияМаркера.ЦветВектора);
		Стиль.ЦветМаркераИндекса = Строка(СтильОтображенияМаркера.ЦветМаркераИндекса);
		Стиль.ЦветШрифтаМаркераИндекса = Строка(СтильОтображенияМаркера.ЦветШрифтаМаркераИндекса);
		
		НайР = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Заказ.Заказ.Номер);    //, Заказ.Заказ.Дата
		Если Не найР.Пустая() Тогда
			Если НайР.Дата >= дата("20131028000000") Тогда
				Кат = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория", НайР.КатегорияДоставки);
			Иначе	
				Кат = Справочники.КатегорииДоставки.НайтиПоРеквизиту("Категория", НайР.КатегорияДоставки);
			КонецеСли;	
			Если Не Кат.Пустая() Тогда
				СтрЦв = Кат.Цвет;
				СтрЦв = СтрЗаменить(СтрЦв, " ", "");
				Если ЗначениеЗаполнено(СтрЦв) Тогда
					Стиль.ЦветФонаМаркера = СтрЦв;
				КонецеСЛи;	
			КонецЕсли;	
		КонецеСли;	
		
		
		
		
		Стиль.КоэффициентРазмераВектораИндексирования  = 0.7;
		
		Если Заказ.ЕстьТочкаПрибытия Тогда
			
			ОписаниеМаркера = Новый Структура;
			ОписаниеМаркера.Вставить("Заказ", Заказ);
			ОписаниеМаркера.Вставить("Стиль", Стиль.ИсхОбъект());
			ОписаниеМаркера.Вставить("Размер", СтильОтображенияМаркера.РазмерФигуры);
			ОписаниеМаркера.Вставить("Широта", Заказ.ШиротаПрибытия);
			ОписаниеМаркера.Вставить("Долгота", Заказ.ДолготаПрибытия);
			ОписаниеМаркера.Вставить("АдресПрибытия", Заказ.ТочкаПрибытия_Пред);
			ОписаниеМаркера.Вставить("АдресОтправления", Заказ.ТочкаОтправления_Пред);
			ОписаниеМаркера.Вставить("Грузополучатель", Заказ.Грузополучатель_Пред);
			ОписаниеМаркера.Вставить("Грузоотправитель", Заказ.Грузоотправитель_Пред);
			ОписаниеМаркера.Вставить("Вес", Заказ.Вес);
			ОписаниеМаркера.Вставить("Приоритет", Строка(Заказ.Приоритет));
			ОписаниеМаркера.Вставить("Объем", Заказ.Объем);
			ОписаниеМаркера.Вставить("Места", Заказ.Места);
			ОписаниеМаркера.Вставить("Стоимость", Заказ.Стоимость);
			ОписаниеМаркера.Вставить("ВремяПрибытияС", Формат(Заказ.ВремяПрибытияС, "ДФ=ЧЧ:мм"));
			ОписаниеМаркера.Вставить("ВремяПрибытияПо", Формат(Заказ.ВремяПрибытияПо, "ДФ=ЧЧ:мм"));
			ОписаниеМаркера.Вставить("ДлительностьПребыванияВТочке", Цел((Заказ.ДлительностьПребыванияВТочке - '00010101') / 60 + 0.5));
			ОписаниеМаркера.Вставить("МестнаяДоставка", Заказ.Заказ_Пред);
			ОписаниеМаркера.Вставить("ОтветственныйМенеджер", Заказ.Грузополучатель_ОсновнойМенеджер_Пред);
			ОписаниеМаркера.Вставить("ОсновнойТелефон", Заказ.Грузополучатель_ОсновнойТелефон_Пред);
			ОписаниеМаркера.Вставить("Комментарий", Заказ.Комментарий);
			
			Маркера.ТочкаПрибытия = ОписаниеМаркера;
			
			НаборМаркеров.Добавить(ОписаниеМаркера, СтильОтображенияМаркера.КомпоновщикМаркера, СтильОтображенияМаркера.КомпоновщикРасшифровки)
		КонецЕсли;
		
		Если Заказ.ЕстьТочкаОтправления Тогда
			
			ОписаниеМаркера = Новый Структура;
			ОписаниеМаркера.Вставить("Заказ", Заказ);
			ОписаниеМаркера.Вставить("Стиль", Стиль.ИсхОбъект());
			ОписаниеМаркера.Вставить("Размер", СтильОтображенияМаркера.РазмерФигуры);
			ОписаниеМаркера.Вставить("Широта", Заказ.ШиротаОтправления);
			ОписаниеМаркера.Вставить("Долгота", Заказ.ДолготаОтправления);
			ОписаниеМаркера.Вставить("АдресПрибытия", Заказ.ТочкаПрибытия_Пред);
			ОписаниеМаркера.Вставить("АдресОтправления", Заказ.ТочкаОтправления_Пред);
			ОписаниеМаркера.Вставить("Грузополучатель", Заказ.Грузополучатель_Пред);
			ОписаниеМаркера.Вставить("Грузоотправитель", Заказ.Грузоотправитель_Пред);
			ОписаниеМаркера.Вставить("Вес", Заказ.Вес);
			ОписаниеМаркера.Вставить("Приоритет", Строка(Заказ.Приоритет));
			ОписаниеМаркера.Вставить("Объем", Заказ.Объем);
			ОписаниеМаркера.Вставить("Места", Заказ.Места);
			ОписаниеМаркера.Вставить("Стоимость", Заказ.Стоимость);
			ОписаниеМаркера.Вставить("ВремяПрибытияС", "");
			ОписаниеМаркера.Вставить("ВремяПрибытияПо", "");
			ОписаниеМаркера.Вставить("ДлительностьПребыванияВТочке", Цел((Заказ.ДлительностьПребыванияВТочкеОтправления - '00010101') / 60 + 0.5));
			ОписаниеМаркера.Вставить("МестнаяДоставка", Заказ.Заказ_Пред);
			ОписаниеМаркера.Вставить("ОтветственныйМенеджер", Заказ.Грузоотправитель_ОсновнойМенеджер_Пред);
			ОписаниеМаркера.Вставить("ОсновнойТелефон", Заказ.Грузоотправитель_ОсновнойТелефон_Пред);
			ОписаниеМаркера.Вставить("Комментарий", Заказ.Комментарий);
			
			Маркера.ТочкаОтправления = ОписаниеМаркера;
			
			НаборМаркеров.Добавить(ОписаниеМаркера, СтильОтображенияМаркера.КомпоновщикМаркера, СтильОтображенияМаркера.КомпоновщикРасшифровки)
		КонецЕсли;
		
		МаркераПоЗаказам.Вставить(Заказ, Маркера);
	КонецЦикла;
	
	ВыборкаМаркеров = КСЛ.ГрафическийИнтерфейс_Карты_ВыборкаГруппируемыхОбъектов();
	ВыборкаМаркеров.Набор = НаборМаркеров;
	
	ВыборкаМаркеровИндексируемая = КСЛ.ГрафическийИнтерфейс_Карты_ИндексируемаяГруппаМаркеров();
	
	ПолеКарты.УстановитьВыборкуОбъектов(ВыборкаМаркеров);
	
	НастроитьОтображениеИндексовИВекторов();
		
	ПолеКарты.ДобавитьОбъект(ВыборкаМаркеровИндексируемая);
	
КонецПроцедуры

//Возвращает новую основную таблицу заказов
//
//  Возвращаемое значение:
//    <ОсновнаяТаблицаЗаказов>
//
Функция ПолучитьОсновнуюТаблицуЗаказов()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Заказ", Новый ОписаниеТипов("БизнесПроцессСсылка.новаМестнаяДоставка"));
	Результат.Колонки.Добавить("ЗаказР", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	Результат.Колонки.Добавить("КатегорияДоставки2014", Новый ОписаниеТипов("СправочникСсылка.КатегорииДоставки2014"));
	Результат.Колонки.Добавить("ПризнакМО", Новый ОписаниеТипов("ПеречислениеСсылка.ТерриториальностьДоставок"));
	Результат.Колонки.Добавить("ИнтернетМагазин", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Результат.Колонки.Добавить("ИнтернетМагазинКод", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ФлагНайден", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОтсутствуетВНакладной003", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ТипДоставки", Новый ОписаниеТипов("ПеречислениеСсылка.новаВидыМестнойДоставки"));
	Результат.Колонки.Добавить("ДлительностьПребыванияВТочке", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Время)));
	Результат.Колонки.Добавить("ДлительностьПребыванияВТочкеОтправления", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Время)));
	Результат.Колонки.Добавить("Грузополучатель_ОсновнойМенеджер_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Грузоотправитель_ОсновнойМенеджер_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Грузополучатель_ОсновнойТелефон_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Грузоотправитель_ОсновнойТелефон_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("Валюта_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Заказ_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЕстьТочкаПрибытия", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ТочкаПрибытия", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
	Результат.Колонки.Добавить("ТочкаПрибытия_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ШиротаПрибытия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 17)));
	Результат.Колонки.Добавить("ДолготаПрибытия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 17)));
	Результат.Колонки.Добавить("ЕстьТочкаОтправления", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ТочкаОтправления", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
	Результат.Колонки.Добавить("ТочкаОтправления_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ШиротаОтправления", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 17)));
	Результат.Колонки.Добавить("ДолготаОтправления", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 17)));
	Результат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("ПеречислениеСсылка.новаПриоритетыТочкиДоставки"));
	Результат.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Результат.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Результат.Колонки.Добавить("Места", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Результат.Колонки.Добавить("Грузоотправитель");
	Результат.Колонки.Добавить("Грузоотправитель_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Грузополучатель");
	Результат.Колонки.Добавить("Грузополучатель_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КатегорииЗаказа", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("КатегорииТранспорта", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("РайоныАдреса", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("VIP", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Факт", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВремяПрибытияС", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("ВремяПрибытияПо", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("ЧасДоставкиС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Результат.Колонки.Добавить("ЧасДоставкиПо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	
	Возврат Результат;
	
КонецФункции

//Возвращает основные характеристики заказов для фильтров и т.д.
//
//  Параметры:
//    пЗаказы - <Соответствие, Неопределено> список доставок, если не указан,
//              выбираются все заказы на дату планирования
//      Ключ - <БизнессПроцессСсыдка>
//      Значение - <Булево> - всегда Истина
//
//  Возвращаемое значение:
//    <ОсновнаяТаблицаЗаказов>
//
Функция ПолучитьОсновнуюИнформациюПоЗаказам(пЗаказы = Неопределено)
	
	//Кэш пролетел , читаем из базы :(
	Результат = ПолучитьОсновнуюТаблицуЗаказов();
	
	Если пЗаказы <> Неопределено Тогда
		
		ФильтрЗаказов = Новый Массив;
		Для каждого КлючЗначение Из пЗаказы Цикл
			
			ФильтрЗаказов.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	//Запрос получает информаци по заказам
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заказы.Ссылка КАК Заказ,
	|	Заказы.Вид КАК ТипДоставки,
	|	Заказы.ВремяПребыванияГрузополучателя КАК ДлительностьПребыванияВТочке,
	|	Заказы.ВремяПребыванияГрузоотправителя КАК ДлительностьПребыванияВТочкеОтправления,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.Ссылка) КАК Заказ_Пред,
	|	Заказы.Груз.Вес КАК Вес,
	|	Заказы.Груз.Объем КАК Объем,
	|	Заказы.Груз.Стоимость КАК Стоимость,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.Груз.Валюта) КАК Валюта_Пред,
	|	Заказы.Комментарий КАК Комментарий,
	|	Заказы.Груз.КоличествоЕдиницПеревозки КАК Места,
	|	Заказы.Груз.Категории.(
	|		Категория КАК Категория,
	|		ПРЕДСТАВЛЕНИЕ(Категория) КАК Категория_Пред
	|	) КАК КатегорииЗаказов,
	|	ВЫБОР
	|		КОГДА Заказы.Грузополучатель ССЫЛКА Справочник.новаКонтрагенты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьТочкаПрибытия,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.Грузополучатель.ОсновнойМенеджер) КАК Грузополучатель_ОсновнойМенеджер_Пред,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.Грузополучатель.ОсновнойТелефон) КАК Грузополучатель_ОсновнойТелефон_Пред,
	|	Заказы.ТочкаПрибытия КАК ТочкаПрибытия,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.ТочкаПрибытия) КАК ТочкаПрибытия_Пред,
	|	Заказы.ТочкаПрибытия.Адрес КАК АдресПрибытия,
	|	Заказы.ТочкаПрибытия.Адрес.Широта КАК ШиротаПрибытия,
	|	Заказы.ТочкаПрибытия.Адрес.Долгота КАК ДолготаПрибытия,
	|	ВЫБОР
	|		КОГДА Заказы.Грузополучатель ССЫЛКА Справочник.новаКонтрагенты
	|				ИЛИ Заказы.Грузоотправитель ССЫЛКА Справочник.новаСклады
	|					И Заказы.Грузополучатель ССЫЛКА Справочник.новаСклады
	|			ТОГДА ВЫБОР
	|					КОГДА Заказы.ТочкаПрибытия.Приоритет <> ЗНАЧЕНИЕ(Перечисление.новаПриоритетыТочкиДоставки.ПустаяСсылка)
	|						ТОГДА Заказы.ТочкаПрибытия.Приоритет
	|					ИНАЧЕ &ПриоритетПоУмолчанию
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Заказы.ТочкаОтправления.Приоритет <> ЗНАЧЕНИЕ(Перечисление.новаПриоритетыТочкиДоставки.ПустаяСсылка)
	|					ТОГДА Заказы.ТочкаОтправления.Приоритет
	|				ИНАЧЕ &ПриоритетПоУмолчанию
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА Заказы.Грузоотправитель ССЫЛКА Справочник.новаКонтрагенты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьТочкаОтправления,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.Грузоотправитель.ОсновнойМенеджер) КАК Грузоотправитель_ОсновнойМенеджер_Пред,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.Грузоотправитель.ОсновнойТелефон) КАК Грузоотправитель_ОсновнойТелефон_Пред,
	|	Заказы.ТочкаОтправления КАК ТочкаОтправления,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.ТочкаОтправления) КАК ТочкаОтправления_Пред,
	|	Заказы.ТочкаОтправления.Адрес КАК АдресОтправления,
	|	Заказы.ТочкаОтправления.Адрес.Широта КАК ШиротаОтправления,
	|	Заказы.ТочкаОтправления.Адрес.Долгота КАК ДолготаДолготаОтправления,
	|	Заказы.VIP,
	|	Заказы.Факт,
	|	Заказы.ВремяПрибытияС,
	|	Заказы.ВремяПрибытияПо,
	|	Заказы.КатегорииТранспорта.(
	|		ЗначениеКатегории КАК Категория,
	|		ПРЕДСТАВЛЕНИЕ(Заказы.КатегорииТранспорта.ЗначениеКатегории) КАК Категория_Пред
	|	) КАК КатегорииТранспорта,
	|	Заказы.Грузоотправитель,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.Грузоотправитель) КАК Грузоотправитель_Пред,
	|	Заказы.Грузополучатель,
	|	ПРЕДСТАВЛЕНИЕ(Заказы.Грузополучатель) КАК Грузополучатель_Пред,
	|	РеализацияТоваровУслуг.Ссылка КАК ЗаказР,
	|	ЧАС(Заказы.ВремяПрибытияС) КАК ЧасДоставкиС,
	|	ЧАС(Заказы.ВремяПрибытияПо) КАК ЧасДоставкиПо,
	|	РеализацияТоваровУслуг.ВладелецТовара.Ссылка КАК ИнтернетМагазин,
	|	РеализацияТоваровУслуг.ВладелецТовара.Код КАК ИнтернетМагазинКод,
	|	КатегорииДоставки2014.Ссылка КАК КатегорияДоставки2014,
	|	ВЫБОР
	|		КОГДА Заказы.ТочкаПрибытия.Москва
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТерриториальностьДоставок.ДоставкаВПределахМКАД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТерриториальностьДоставок.ДоставкаЗаПределыМКАД)
	|	КОНЕЦ КАК ПризнакМО,
	|	ЕСТЬNULL(ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка, ИСТИНА) КАК ФлагНайден,
	|	ЕСТЬNULL(Накладная003Заказы.Ссылка, ИСТИНА) КАК ОтсутствуетВНакладной003
	|ИЗ
	|	БизнесПроцесс.новаМестнаяДоставка КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КатегорииДоставки2014 КАК КатегорииДоставки2014
	|			ПО РеализацияТоваровУслуг.КатегорияДоставки = КатегорииДоставки2014.Категория
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоставкиСОтклонениямиКоличестваСписком.Доставки КАК ДоставкиСОтклонениямиКоличестваСпискомДоставки
	|			ПО (ВЫРАЗИТЬ(ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка КАК Документ.РеализацияТоваровУслуг).Ссылка = РеализацияТоваровУслуг.Ссылка
	|					И (ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Дата МЕЖДУ &ДатаНачОтс И &ДатаКонОтс))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Накладная003.Заказы КАК Накладная003Заказы
	|			ПО (РеализацияТоваровУслуг.Ссылка = ВЫРАЗИТЬ(Накладная003Заказы.Заказ КАК Документ.РеализацияТоваровУслуг).Ссылка
	|					И (Накладная003Заказы.Ссылка.Дата МЕЖДУ &ДатаНачОтс И &ДатаКонОтс))
	|		ПО Заказы.Номер = РеализацияТоваровУслуг.Номер 
	|ГДЕ  
	|    Заказы.Ссылка В
	|      (
	|        ВЫБРАТЬ
	|            ПланЗаказов.БизнесПроцесс.Доставка
	|          ИЗ
	|            Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю
	|            (
	|              " + ?(пЗаказы = Неопределено, "ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)", "") + "
	|              ,(НЕ Выполнена)
	|              И НАЧАЛОПЕРИОДА(БизнесПроцесс.Доставка.ВремяОтправленияС, ДЕНЬ) = &ДатаПланирования
	|            ) КАК ПланЗаказов
	|          " + ?(пЗаказы <> Неопределено, "ГДЕ ПланЗаказов.БизнесПроцесс.Доставка В (&ФильтрЗаказов)", "") + "
	|      )
	|    И ( ( ТочкаПрибытия.Адрес.Широта <> 0
	|          И ТочкаПрибытия.Адрес.Долгота <> 0
	|          И Заказы.Грузополучатель Ссылка Справочник.новаКонтрагенты)
	|      ИЛИ ( ТочкаОтправления.Адрес.Широта <> 0
	|            И ТочкаОтправления.Адрес.Долгота <> 0
	|            И Заказы.Грузоотправитель Ссылка Справочник.новаКонтрагенты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|    Адрес КАК Адрес
	|    ,Район
	|    ,ПРЕДСТАВЛЕНИЕ(Район) КАК Район_Пред
	|  ИЗ
	|    РегистрСведений.новаРайоныАдресов КАК РайоныАдресов
	|  ГДЕ
	|    Адрес В
	|      (
	|        ВЫБРАТЬ
	|            ПланЗаказов.БизнесПроцесс.Доставка.ТочкаПрибытия.Адрес
	|          ИЗ
	|            Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю
	|              (
	|                ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)
	|                ,(НЕ Выполнена)
	|                И НАЧАЛОПЕРИОДА(БизнесПроцесс.Доставка.ВремяОтправленияС, ДЕНЬ) = &ДатаПланирования
	|              ) КАК ПланЗаказов
	|      )
	|  ИТОГИ ПО
	|    Адрес
	|");
	
	Запрос.УстановитьПараметр("ДатаНачОтс", НачалоДня(ДатаПланирования));
	Запрос.УстановитьПараметр("ДатаКонОтс", КонецДня(ДатаПланирования));
	
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	Если пЗаказы <> Неопределено Тогда
		Запрос.УстановитьПараметр("ФильтрЗаказов", ФильтрЗаказов);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПриоритетПоУмолчанию", Константы.новаТочкаДоставкиПриоритетПоУмолчанию.Получить()); // Запрос тяжёл для понимания, поэтому полчим значение константы отдельно.
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОсновнойЗапрос = РезультатыЗапроса[0];
	ЗапросПоРайонам = РезультатыЗапроса[1];
	
	//Заполненеие таблицы
	Если не ОсновнойЗапрос.Пустой() Тогда
		
		ВыборкаПоРайонам = ЗапросПоРайонам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОсновнаяВыборка = ОсновнойЗапрос.Выбрать();
		Пока ОсновнаяВыборка.Следующий() Цикл
			Если МассивДоставокДляИсключения.Найти(ОсновнаяВыборка.Заказ) <> Неопределено Тогда
				Продолжить;
			КонецеСли;	
			//Основные реквизиты
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Заказ = ОсновнаяВыборка.Заказ;
			НоваяСтрока.ТипДоставки = ОсновнаяВыборка.ТипДоставки;
			НоваяСтрока.ДлительностьПребыванияВТочке = ОсновнаяВыборка.ДлительностьПребыванияВТочке;
			НоваяСтрока.ДлительностьПребыванияВТочкеОтправления = ОсновнаяВыборка.ДлительностьПребыванияВТочкеОтправления;
			НоваяСтрока.Стоимость = ОсновнаяВыборка.Стоимость;
			НоваяСтрока.Валюта_Пред = ОсновнаяВыборка.Валюта_Пред;
			НоваяСтрока.Комментарий = ОсновнаяВыборка.Комментарий;
			НоваяСтрока.Грузополучатель_ОсновнойМенеджер_Пред = ОсновнаяВыборка.Грузополучатель_ОсновнойМенеджер_Пред;
			НоваяСтрока.Грузоотправитель_ОсновнойМенеджер_Пред = ОсновнаяВыборка.Грузоотправитель_ОсновнойМенеджер_Пред;
			НоваяСтрока.Грузополучатель_ОсновнойТелефон_Пред = ОсновнаяВыборка.Грузополучатель_ОсновнойТелефон_Пред;
			НоваяСтрока.Грузоотправитель_ОсновнойТелефон_Пред = ОсновнаяВыборка.Грузоотправитель_ОсновнойТелефон_Пред;
			НоваяСтрока.Заказ_Пред = ОсновнаяВыборка.Заказ_Пред;
			
			НоваяСтрока.ОтсутствуетВНакладной003 = ОсновнаяВыборка.ОтсутствуетВНакладной003;
			
			НоваяСтрока.ЕстьТочкаПрибытия = ОсновнаяВыборка.ЕстьТочкаПрибытия;
			НоваяСтрока.ТочкаПрибытия = ОсновнаяВыборка.ТочкаПрибытия;
			НоваяСтрока.ТочкаПрибытия_Пред = ОсновнаяВыборка.ТочкаПрибытия_Пред;
			Если НоваяСтрока.ЕстьТочкаПрибытия Тогда
				НоваяСтрока.ШиротаПрибытия = ОсновнаяВыборка.ШиротаПрибытия;
				НоваяСтрока.ДолготаПрибытия = ОсновнаяВыборка.ДолготаПрибытия;
				НоваяСтрока.Приоритет = ОсновнаяВыборка.Приоритет;
			КонецЕсли;
			НоваяСтрока.ЕстьТочкаОтправления = ОсновнаяВыборка.ЕстьТочкаОтправления;
			НоваяСтрока.ТочкаОтправления = ОсновнаяВыборка.ТочкаОтправления;
			НоваяСтрока.ТочкаОтправления_Пред = ОсновнаяВыборка.ТочкаОтправления_Пред;
			Если НоваяСтрока.ЕстьТочкаОтправления Тогда
				НоваяСтрока.ШиротаОтправления = ОсновнаяВыборка.ШиротаОтправления;
				НоваяСтрока.ДолготаОтправления = ОсновнаяВыборка.ДолготаДолготаОтправления;
			КонецЕсли;
			НоваяСтрока.Вес = ОсновнаяВыборка.Вес;
			НоваяСтрока.Объем = ОсновнаяВыборка.Объем;
			НоваяСтрока.Места = ОсновнаяВыборка.Места;
			НоваяСтрока.Грузоотправитель = ОсновнаяВыборка.Грузоотправитель;
			НоваяСтрока.Грузоотправитель_Пред = ОсновнаяВыборка.Грузоотправитель_Пред;
			НоваяСтрока.Грузополучатель = ОсновнаяВыборка.Грузополучатель;
			НоваяСтрока.Грузополучатель_Пред = ОсновнаяВыборка.Грузополучатель_Пред;
			НоваяСтрока.VIP = ОсновнаяВыборка.VIP;
			НоваяСтрока.Факт = ОсновнаяВыборка.Факт;
			НоваяСтрока.ВремяПрибытияС = ОсновнаяВыборка.ВремяПрибытияС;
			НоваяСтрока.ВремяПрибытияПо = ОсновнаяВыборка.ВремяПрибытияПо;
			НоваяСтрока.ЧасДоставкиС = ОсновнаяВыборка.ЧасДоставкиС;
			НоваяСтрока.ЧасДоставкиПо = ОсновнаяВыборка.ЧасДоставкиПо;
			
			НоваяСтрока.КатегорияДоставки2014 = ОсновнаяВыборка.КатегорияДоставки2014;
			НоваяСтрока.ПризнакМО = ОсновнаяВыборка.ПризнакМО;
			НоваяСтрока.ИнтернетМагазин = ОсновнаяВыборка.ИнтернетМагазин;
			НоваяСтрока.ИнтернетМагазинКод = ОсновнаяВыборка.ИнтернетМагазинКод;
			НоваяСтрока.ФлагНайден = ОсновнаяВыборка.ФлагНайден;
			НоваяСтрока.ЗаказР = ОсновнаяВыборка.ЗаказР;
			
			//Категории заказов
			ВыборкаКатегорииЗаказов = ОсновнаяВыборка.КатегорииЗаказов.Выбрать();
			Пока ВыборкаКатегорииЗаказов.Следующий() Цикл
				
				НоваяСтрока.КатегорииЗаказа.Добавить(ВыборкаКатегорииЗаказов.Категория);
				КэшПредставленияОбъектов.Вставить(ВыборкаКатегорииЗаказов.Категория, ВыборкаКатегорииЗаказов.Категория_Пред);
			КонецЦикла;
			
			//Категории транспорта
			ВыборкаКатегорииТранспорта = ОсновнаяВыборка.КатегорииТранспорта.Выбрать();
			Пока ВыборкаКатегорииТранспорта.Следующий() Цикл
				
				НоваяСтрока.КатегорииТранспорта.Добавить(ВыборкаКатегорииТранспорта.Категория);
				КэшПредставленияОбъектов.Вставить(ВыборкаКатегорииТранспорта.Категория, ВыборкаКатегорииТранспорта.Категория_Пред);
			КонецЦикла;
			
			//Районы адресов
			//по прибытию
			Если НоваяСтрока.ЕстьТочкаПрибытия Тогда
				
				Если ВыборкаПоРайонам.НайтиСледующий(Новый Структура("Адрес", ОсновнаяВыборка.АдресПрибытия)) Тогда
					
					ВыборкаПоРайонамАдреса = ВыборкаПоРайонам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПоРайонамАдреса.Следующий() Цикл
						
						НоваяСтрока.РайоныАдреса.Добавить(ВыборкаПоРайонамАдреса.Район);
						КэшПредставленияОбъектов.Вставить(ВыборкаПоРайонамАдреса.Район, ВыборкаПоРайонамАдреса.Район_Пред);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаПоРайонам.Сбросить();
			
			//по отправлению
			Если НоваяСтрока.ЕстьТочкаОтправления Тогда
				
				Если ВыборкаПоРайонам.НайтиСледующий(Новый Структура("Адрес", ОсновнаяВыборка.АдресОтправления)) Тогда
					
					ВыборкаПоРайонамАдреса = ВыборкаПоРайонам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПоРайонамАдреса.Следующий() Цикл
						
						НоваяСтрока.РайоныАдреса.Добавить(ВыборкаПоРайонамАдреса.Район);
						КэшПредставленияОбъектов.Вставить(ВыборкаПоРайонамАдреса.Район, ВыборкаПоРайонамАдреса.Район_Пред);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаПоРайонам.Сбросить();
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Добавление заказов в оснвоную таблицу заказов
//
//  Параметры:
//    пЗаказы - <Соответствие> список доставок
//      Ключ - <БизнессПроцессСсыдка.новаМестнаяДоставка>
//      Значение - <Булево> - всегда Истина
//
Процедура ДобавитьЗаказыВОсновнуюТаблицуЗаказов(Знач пЗаказы) Экспорт
	
	ДополненныеЗаказы = Новый Соответствие;
	
	НовыйЗаказы = ПолучитьОсновнуюИнформациюПоЗаказам(пЗаказы);
	Для каждого НовыйЗаказ Из НовыйЗаказы Цикл
		
		ДобавленныйЗаказ = ОсновнаяТаблицаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленныйЗаказ, НовыйЗаказ);
		ДополненныеЗаказы.Вставить(ДобавленныйЗаказ, Истина);
	КонецЦикла;
	
	ИнициализироватьОтображениеЗаказов();
	
	ДополнитьФильтрыПоСвойствамЗаказов(ДополненныеЗаказы);
	ДобавитьЗаказыВОтображаемые(ДополненныеЗаказы, "ВРучную");
	
	ОтправитьСуммарнуюИнформацию();
	
КонецПроцедуры

//Удаление заказов из оснвной таблицы заказов
//
//  Параметры:
//    пЗаказы - <Соответствие> список заказов
//      Ключ - <СтрокаТаблицыЗначений> строка основной таблицы заказов
//      Значение - <Булево> Всегда Истина
//
Процедура УдалитьЗаказыИзОсновнойТаблицыЗаказов(Знач пЗаказы) Экспорт
	
	УсечьФильтрыПоСвойствамЗаказов(пЗаказы);
	УдалитьЗаказыИзОтображаемых(пЗаказы);
	
	Для каждого ВыбранныйЗаказ Из пЗаказы Цикл
		
		ОтображаемыеЗаказыПоПредыдущемуФильтру.Удалить(ВыбранныйЗаказ.Ключ);
		ВыбранныеЗаказыПоПредыдущемуФильтру.Удалить(ВыбранныйЗаказ.Ключ);
		ОсновнаяТаблицаЗаказов.Удалить(ВыбранныйЗаказ.Ключ);
	КонецЦикла;
	
	ОтправитьСуммарнуюИнформацию();
	
КонецПроцедуры

//Транспорт

//Возвращает новую основную таблицу транспорта
//
//  Возвращаемое значение:
//    <ОсновнаяТаблицаТранспорта>
//
Функция ПолучитьОсновнуюТаблицуТранспорта()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.новаТранспорт"));
	Результат.Колонки.Добавить("Транспорт_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Водитель", Новый ОписаниеТипов("СправочникСсылка.новаВодители"));
	Результат.Колонки.Добавить("Водитель_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Экспедитор", Новый ОписаниеТипов("СправочникСсылка.новаЭкспедиторы"));
	Результат.Колонки.Добавить("Экспедитор_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НачалоДоступности", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("КонецДоступности", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("НачалоРейса", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
	Результат.Колонки.Добавить("НачалоРейса_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Вид", Новый ОписаниеТипов("СправочникСсылка.новаВидыТранспорта"));
	Результат.Колонки.Добавить("Вид_Пред", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Грузоподъемность", Новый ОписаниеТипов("Число", новый КвалификаторыЧисла(15, 3)));
	Результат.Колонки.Добавить("Грузовместимость", Новый ОписаниеТипов("Число", новый КвалификаторыЧисла(15, 3)));
	Результат.Колонки.Добавить("КатегорииТранспорта", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("Районы", Новый ОписаниеТипов("Массив"));
	
	Результат.Индексы.Добавить("Транспорт");
	
	Возврат Результат;
	
КонецФункции

//Обновление основной таблицы транспорта
//
//  Параметры:
//    пТранспорт - <Соответствие> список транспорту, если не указан, то выбирается ве5сь
//                 транспорт на дату планирования
//      Ключ - <СправочникСсылка.новаТранспорт>
//      Значение - <Булево> всегда Истина
//
//  Возвращаемое значение:
//    <ОсновнаяТаблицаТранспорта>
//
Функция ПолучитьОсновнуюИнформациюПоТранспорту(пТранспорт = Неопределено)
	
	//Кэш пролетел , читаем из базы :(
	Результат = ПолучитьОсновнуюТаблицуТранспорта();
	
	Если пТранспорт <> Неопределено Тогда
		ФильтрПоТранспорту = Новый Массив;
		Для каждого КлючЗначение Из пТранспорт Цикл
			
			ФильтрПоТранспорту.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	//Запрос получает характеристики доступного транспорта
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    ВозможныеРейсы.Транспорт
	|    ,ВозможныеРейсы.Водитель
	|    ,ВозможныеРейсы.Экспедитор
	|    ,ВозможныеРейсы.Транспорт.Вид КАК Вид
	|    ,ВозможныеРейсы.Транспорт.Грузоподъемность КАК Грузоподъемность
	|    ,ВозможныеРейсы.Транспорт.ОбъемКузова КАК Грузовместимость
	|    ,ВозможныеРейсы.НачалоПериода
	|    ,ВозможныеРейсы.КонецПериода
	|    ,ВозможныеРейсы.НачалоРейса
	|    ,ВозможныеРейсы.ТочкаВыезда
	|    ,ВозможныеРейсы.Транспорт.КатегорииТранспорта.
	|      (
	|        Транспорт.КатегорииТранспорта.ЗначениеКатегории КАК Категория
	|      ) КАК КатегорииТранспорта
	|    ,ВозможныеРейсы.Транспорт.Районы.
	|      (
	|        Транспорт.Районы.Район КАК Район
	|      ) КАК РайоныТранспорта
	|  ИЗ
	|    (
	|      ВЫБРАТЬ
	|          ВЫБОР
	|            КОГДА Корректировки.НовыйТранспорт ЕСТЬ NULL 
	|              ТОГДА ВозможныеРейсы.Транспорт
	|            КОГДА Корректировки.НовыйТранспорт = ЗНАЧЕНИЕ(Справочник.новаТранспорт.ПустаяСсылка)
	|              ТОГДА ВозможныеРейсы.Транспорт
	|            ИНАЧЕ Корректировки.НовыйТранспорт
	|          КОНЕЦ КАК Транспорт
	|
	|          ,ВЫБОР
	|            КОГДА Корректировки.НовыйВодитель ЕСТЬ NULL
	|              ТОГДА ВозможныеРейсы.Водитель
	|            КОГДА Корректировки.НовыйВодитель = ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)
	|              ТОГДА ВозможныеРейсы.Водитель
	|            ИНАЧЕ Корректировки.НовыйВодитель
	|          КОНЕЦ КАК Водитель
	|
	|          ,ВЫБОР
	|            КОГДА Корректировки.НовыйЭкспедитор ЕСТЬ NULL
	|              ТОГДА ВозможныеРейсы.Экспедитор
	|            КОГДА Корректировки.НовыйЭкспедитор = ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)
	|              ТОГДА ВозможныеРейсы.Экспедитор
	|            ИНАЧЕ Корректировки.НовыйЭкспедитор
	|          КОНЕЦ КАК Экспедитор
	|
	|          ,ВЫБОР
	|            КОГДА Закрытия.НовоеНачалоПериода ЕСТЬ NULL 
	|              ТОГДА
	|                ВЫБОР
	|                  КОГДА Корректировки.НовоеНачалоПериода ЕСТЬ NULL 
	|                    ТОГДА ВозможныеРейсы.НачалоПериода
	|                  КОГДА Корректировки.НовоеНачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|                    ТОГДА ВозможныеРейсы.НачалоПериода
	|                  ИНАЧЕ Корректировки.НовоеНачалоПериода
	|                КОНЕЦ
	|            ИНАЧЕ Закрытия.НовоеНачалоПериода
	|          КОНЕЦ КАК НачалоПериода
	|
	|          ,ВЫБОР
	|             КОГДА Закрытия.НовыйКонецПериода ЕСТЬ NULL 
	|               ТОГДА
	|                 ВЫБОР
	|                   КОГДА Корректировки.НовыйКонецПериода ЕСТЬ NULL 
	|                     ТОГДА ВозможныеРейсы.КонецПериода
	|                   КОГДА Корректировки.НовыйКонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|                     ТОГДА ВозможныеРейсы.КонецПериода
	|                   ИНАЧЕ Корректировки.НовыйКонецПериода
	|                 КОНЕЦ
	|             ИНАЧЕ Закрытия.НовыйКонецПериода
	|          КОНЕЦ КАК КонецПериода
	|
	|          ,ВЫБОР
	|            КОГДА Закрытия.НовоеНачалоРейса ЕСТЬ NULL
	|              ТОГДА
	|                ВЫБОР
	|                  КОГДА Корректировки.НовоеНачалоРейса ЕСТЬ NULL
	|                    ТОГДА ВозможныеРейсы.НачалоРейса
	|                  КОГДА Корректировки.НовоеНачалоРейса = ЗНАЧЕНИЕ(Справочник.новаТочкиДоставки.ПустаяСсылка)
	|                    ТОГДА ВозможныеРейсы.НачалоРейса
	|                  ИНАЧЕ Корректировки.НовоеНачалоРейса
	|                КОНЕЦ
	|              ИНАЧЕ Закрытия.НовоеНачалоРейса
	|          КОНЕЦ КАК НачалоРейса
	|
	|          ,ВЫБОР
	|            КОГДА Корректировки.НовоеНачалоРейса ЕСТЬ NULL
	|              ТОГДА ВозможныеРейсы.НачалоРейса
	|            КОГДА Корректировки.НовоеНачалоРейса = ЗНАЧЕНИЕ(Справочник.новаТочкиДоставки.ПустаяСсылка)
	|              ТОГДА ВозможныеРейсы.НачалоРейса
	|            ИНАЧЕ Корректировки.НовоеНачалоРейса
	|          КОНЕЦ КАК ТочкаВыезда
	|
	|        ИЗ
	|          РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|          ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКорректировкаКалендаряВозможныхРейсов КАК Корректировки
	|            ПО
	|              ВозможныеРейсы.Транспорт = Корректировки.Транспорт
	|              И ВозможныеРейсы.Водитель = Корректировки.Водитель
	|              И (НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) = НАЧАЛОПЕРИОДА(Корректировки.НачалоПериода, ДЕНЬ))
	|          ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаЗакрытияВозможныхРейсов КАК Закрытия
	|            ПО
	|              (ВозможныеРейсы.Транспорт = Закрытия.Транспорт
	|              И ВозможныеРейсы.Водитель = Закрытия.Водитель)
	|              И (НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) = НАЧАЛОПЕРИОДА(Закрытия.НачалоПериода, ДЕНЬ))
	|        ГДЕ
	|         ( Корректировки.Отменен ЕСТЬ NULL 
	|           ИЛИ (НЕ Корректировки.Отменен))
	|         И ( Закрытия.Закрыт ЕСТЬ NULL 
	|             ИЛИ (НЕ Закрытия.Закрыт))
	|    ) КАК ВозможныеРейсы
	|  ГДЕ
	|    &ДатаПланирования МЕЖДУ НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(ВозможныеРейсы.КонецПериода, ДЕНЬ)
	//|    И РАЗНОСТЬДАТ(ВозможныеРейсы.НачалоПериода,ВозможныеРейсы.КонецПериода,СЕКУНДА)>=&РазмерПериода
	|    " + ?(пТранспорт <> Неопределено, "И ВозможныеРейсы.Транспорт В (&ФильтрПоТранспорту)", "") + "
	|");
	
	РазмерПериода = Макс(1,(ПараметрыСеанса.новаТекущийПользователь.МинимальноеОкноДоступностиТранспорта - '00010101'));
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	Запрос.УстановитьПараметр("РазмерПериода", РазмерПериода);
	
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	Если пТранспорт <> Неопределено Тогда
		Запрос.УстановитьПараметр("ФильтрПоТранспорту", ФильтрПоТранспорту);
	КонецЕсли;
	//Закидываем данные в таблицу
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		ОсновнаяВыборка = РезультатЗапроса.Выбрать();
		Пока ОсновнаяВыборка.Следующий() Цикл
			
			//Основные реквизиты
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Транспорт = ОсновнаяВыборка.Транспорт;
			НоваяСтрока.Водитель = ОсновнаяВыборка.Водитель;
			НоваяСтрока.Экспедитор = ОсновнаяВыборка.Экспедитор;
			НоваяСтрока.НачалоДоступности = ОсновнаяВыборка.НачалоПериода;
			НоваяСтрока.КонецДоступности = ОсновнаяВыборка.КонецПериода;
			НоваяСтрока.НачалоРейса = ОсновнаяВыборка.НачалоРейса;
			НоваяСтрока.Вид = ОсновнаяВыборка.Вид;
			НоваяСтрока.Грузоподъемность = ОсновнаяВыборка.Грузоподъемность;
			НоваяСтрока.Грузовместимость = ОсновнаяВыборка.Грузовместимость;
			
			//Категории транспорта
			ВыборкаКатегорииТранспорта = ОсновнаяВыборка.КатегорииТранспорта.Выбрать();
			Пока ВыборкаКатегорииТранспорта.Следующий() Цикл
				
				НоваяСтрока.КатегорииТранспорта.Добавить(ВыборкаКатегорииТранспорта.Категория);
			КонецЦикла;
			
			//Районы
			ВыборкаРайоны = ОсновнаяВыборка.РайоныТранспорта.Выбрать();
			Пока ВыборкаРайоны.Следующий() Цикл
				
				НоваяСтрока.Районы.Добавить(ВыборкаРайоны.Район);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Добавление транспорта в основную таблицу транспорта
//
//  Параметры:
//    пТранспорт - <Соответствие> список транспорта
//      Ключ - <СправочникСсылка.новаТранспорт> транспорт
//      Значение - <Булево> всегда Истина
//
Процедура ДобавитьТранспортВОсновнуюТаблицуТранспорта(пТранспорт)
	
	ДобавляемыйТранспорт = Новый Соответствие;
	
	НовыйТранспорт = ПолучитьОсновнуюИнформациюПоТранспорту(пТранспорт);
	Для каждого ТекущийТранспорт Из НовыйТранспорт Цикл
		
		ДобавленныйТранспорт = ОсновнаяТаблицаТранспорта.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленныйТранспорт, ТекущийТранспорт);
		ДобавляемыйТранспорт.Вставить(ДобавленныйТранспорт, Истина);
	КонецЦикла;
	
	ДополнитьФильтрыПоСвойствамТранспорта(ДобавляемыйТранспорт);
	ДобавитьТранспортВОтображаемый(ДобавляемыйТранспорт, "ВРучную");
	
КонецПроцедуры

//Удаление транспорта из основной таблицы транспорта
//
//  Параметры:
//    пТранспорт - <Соответствие> список транспорта
//      Ключ - <СтрокаТаблицыЗначений> строка основной таблицы транспорта
//      Значение - <Булево> всегда Истина
//
Процедура УдалитьТранспортИзОсновнойТаблицыЗаказов(пТранспорт)
	
	УсечьФильтрыПоСвойствамТранспорта(пТранспорт);
	УдалитьТранспортИзОтображаемого(пТранспорт);
	
	Для каждого ТекущийТранспорт Из пТранспорт Цикл
		
		ОтображаемыйТранспортПоПредыдущемуФильтру.Удалить(ТекущийТранспорт.Ключ);
		ВыбранныйТранспортПоПредыдущемуФильтру.Удалить(ТекущийТранспорт.Ключ);
		ОсновнаяТаблицаТранспорта.Удалить(ТекущийТранспорт.Ключ);
	КонецЦикла;
	
КонецПроцедуры

//Обновление доступности транспорта
//
//  Параметры:
//    пТранспорт - <СправочникСсылка.новаТранспорт> транспорт
//
Процедура ОбновитьДоступностьТранспорта(пТранспорт) Экспорт
	
	ДобавляемыйТранспорт = Новый Соответствие;
	ДобавляемыйТранспорт.Вставить(пТранспорт, Истина);
	
	УдаляемыйТранспорт = Новый Соответствие;
	НайденныеСтроки = ОсновнаяТаблицаТранспорта.НайтиСтроки(Новый Структура("Транспорт", пТранспорт));
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		УдаляемыйТранспорт.Вставить(НайденнаяСтрока, Истина);
	КонецЦикла;
	
	УдалитьТранспортИзОсновнойТаблицыЗаказов(УдаляемыйТранспорт);
	ДобавитьТранспортВОсновнуюТаблицуТранспорта(ДобавляемыйТранспорт);
	
КонецПроцедуры


//** Отрисовка, пометка **//


//* Заказы *//

//Определяет является ли вид сравнения списочным
//
Функция ВидСравненияЭтоСписок(Значение)
	
	Результат = Ложь;
	
	Если Значение = Перечисления.новаВидыСравнения.ВСписке Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Установка настроек отображения
//
Процедура ПрименитьНастройкуОтображенияМаркеров()
	
	КомпоновщикиМаркеров.Очистить();
	
	Если ЗначениеЗаполнено(НастройкаОтображенияМаркеров) Тогда
		
		ПодготовленныеНастройкиОтображения = Новый Соответствие;
		ОбъектНастройки = НастройкаОтображенияМаркеров.ПолучитьОбъект();
		
		ВидГруппировкиМаркеров = ОбъектНастройки.ВидГруппировкиМаркеров;
		
		ЗначенияНастройкиОтображенияПоУмолчанию = Новый Структура;
		ЗначенияНастройкиОтображенияПоУмолчанию.Вставить("ВидФигуры", ОбъектНастройки.ВидФигурыПоУмолчанию);
		ЗначенияНастройкиОтображенияПоУмолчанию.Вставить("ЦветФона", ОбъектНастройки.ЦветФонаПоУмолчанию.Получить());
		ЗначенияНастройкиОтображенияПоУмолчанию.Вставить("ЦветОкантовки", ОбъектНастройки.ЦветОкантовкиПоУмолчанию.Получить());
		ЗначенияНастройкиОтображенияПоУмолчанию.Вставить("РазмерФмгуры", ОбъектНастройки.РазмерФмгурыПоУмолчанию);
		ЗначенияНастройкиОтображенияПоУмолчанию.Вставить("ТолщинаОкантовки", ОбъектНастройки.ТолщинаОкантовкиПоУмолчанию);
		
		ЗначенияНастройкиОтображенияПоУмолчанию.Вставить("ЦветВектора", ОбъектНастройки.ЦветВектора.Получить());
		ЗначенияНастройкиОтображенияПоУмолчанию.Вставить("ЦветМаркераИндекса", ОбъектНастройки.ЦветМаркераИндекса.Получить());
		ЗначенияНастройкиОтображенияПоУмолчанию.Вставить("ЦветШрифтаМаркераИндекса", ОбъектНастройки.ЦветШрифтаМаркераИндекса.Получить());
		
		Для каждого ЭлементНастройки Из ОбъектНастройки.Настройки Цикл
			
			УсловияОформления = ПодготовленныеНастройкиОтображения[ЭлементНастройки.СвойствоДоставки];
			Если УсловияОформления = Неопределено Тогда
				
				УсловияОформления = Новый ТаблицаЗначений;
				УсловияОформления.Колонки.Добавить("СвойствоМаркера");
				УсловияОформления.Колонки.Добавить("ЗначениеСвойстваМаркера");
				УсловияОформления.Колонки.Добавить("ВидСравнения");
				УсловияОформления.Колонки.Добавить("ОсновноеЗначениеСвойстваДоставки");
				УсловияОформления.Колонки.Добавить("ДополнительноеЗначениеСвойстваДоставки");
				
				ПодготовленныеНастройкиОтображения.Вставить(ЭлементНастройки.СвойствоДоставки, УсловияОформления);
			КонецЕсли;
			
			НоваяСтрока = УсловияОформления.Добавить();
			НоваяСтрока.СвойствоМаркера = ЭлементНастройки.СвойствоМаркера;
			
			Если ЭлементНастройки.СвойствоМаркера = Перечисления.новаСвойстваМаркера.ЦветФона
			     или ЭлементНастройки.СвойствоМаркера = Перечисления.новаСвойстваМаркера.ЦветОкантовки Тогда
				
				НоваяСтрока.ЗначениеСвойстваМаркера = ЭлементНастройки.ДополнительноеЗначениеСвойстваМаркера.Получить();
			Иначе
				НоваяСтрока.ЗначениеСвойстваМаркера = ЭлементНастройки.ОсновноеЗначениеСвойстваМаркера;
			КонецЕсли;
			
			НоваяСтрока.ВидСравнения = ЭлементНастройки.ВидСравнения;
			
			Если не ВидСравненияЭтоСписок(НоваяСтрока.ВидСравнения) Тогда
				
				НоваяСтрока.ОсновноеЗначениеСвойстваДоставки = ЭлементНастройки.ОсновноеЗначениеСвойстваДоставки;
				НоваяСтрока.ДополнительноеЗначениеСвойстваДоставки = ЭлементНастройки.ДополнительноеЗначениеСвойстваДоставки;
				
			Иначе
				
				НоваяСтрока.ОсновноеЗначениеСвойстваДоставки = Новый Соответствие;
				НайденныеСтроки = ОбъектНастройки.СпискиЗначенийСвойствДоставки.НайтиСтроки(Новый Структура("Идентификатор", ЭлементНастройки.ОсновноеЗначениеСвойстваДоставки));
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					НоваяСтрока.ОсновноеЗначениеСвойстваДоставки.Вставить(НайденнаяСтрока.ЗначениеСвойстваДоставки, Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СвойстваДоставкиРасшифровкаМаркера = ОбъектНастройки.СвойстваДоставкиРасшифровки.Выгрузить();
		для Индекс = -(СвойстваДоставкиРасшифровкаМаркера.Количество() - 1) По 0 Цикл
			
			Если не СвойстваДоставкиРасшифровкаМаркера[-Индекс].Выводить Тогда
				
				СвойстваДоставкиРасшифровкаМаркера.Удалить(-Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИнициализироватьОтображениеЗаказов();
	
КонецПроцедуры

//Установка настроек отображения группиовки, векторов и индексов
//
Процедура НастроитьОтображениеИндексовИВекторов()
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтображенияМаркеровТочкиНаКарте = НастройкаОтображенияМаркеров.ОтображениеТочекДоставкиНаКарте;
	Если ЗначениеЗаполнено(НастройкаОтображенияМаркеровТочкиНаКарте) Тогда
		
		Если НастройкаОтображенияМаркеровТочкиНаКарте = Перечисления.новаСпособОтображенияТочекНаКарте.НеОтображать Тогда
			ВыборкаМаркеровИндексируемая.ОтображатьИндекс = Ложь;
			ВыборкаМаркеровИндексируемая.ОтображатьВектор = Ложь;
		ИначеЕсли НастройкаОтображенияМаркеровТочкиНаКарте = Перечисления.новаСпособОтображенияТочекНаКарте.Индексы Тогда
			ВыборкаМаркеровИндексируемая.ОтображатьИндекс = Истина;
			ВыборкаМаркеровИндексируемая.ОтображатьВектор = Ложь;
		ИначеЕсли НастройкаОтображенияМаркеровТочкиНаКарте = Перечисления.новаСпособОтображенияТочекНаКарте.Векторы Тогда
			ВыборкаМаркеровИндексируемая.ОтображатьИндекс = Ложь;
			ВыборкаМаркеровИндексируемая.ОтображатьВектор = Истина;
		ИначеЕсли НастройкаОтображенияМаркеровТочкиНаКарте = Перечисления.новаСпособОтображенияТочекНаКарте.ИндексыИВекторы Тогда
			ВыборкаМаркеровИндексируемая.ОтображатьИндекс = Истина;
			ВыборкаМаркеровИндексируемая.ОтображатьВектор = Истина;
		КонецЕсли;	
		
	Иначе
		
		ВыборкаМаркеровИндексируемая.ОтображатьИндекс = Истина;
		ВыборкаМаркеровИндексируемая.ОтображатьВектор = Истина;
		
	КонецЕсли;
		
КонецПроцедуры	

//Возвращает значение свойства доставки
//
Функция ПолучитьЗначениеСвойстваДоставки(СвойствоДоставки, Заказ)
	
	Результат = Неопределено;
	
	Если СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Вес Тогда
		
		Результат = Заказ.Вес;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Объем Тогда
		
		Результат = Заказ.Объем;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Места Тогда
		
		Результат = Заказ.Места;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.ВремяПрибытияС Тогда
		
		Результат = Заказ.ВремяПрибытияС - (НачалоДня(Заказ.ВремяПрибытияС) - '00010101');
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.ВремяПрибытияПо Тогда
		
		Результат = Заказ.ВремяПрибытияПо - (НачалоДня(Заказ.ВремяПрибытияПо) - '00010101');
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.ДлительностьПребыванияВТочке Тогда
		
		Результат = (Заказ.ДлительностьПребыванияВТочке - '00010101') / 60;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Грузоотправитель Тогда
		
		Результат = Заказ.Грузоотправитель;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Грузополучатель Тогда
		
		Результат = Заказ.Грузополучатель;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.КатегорияГруза Тогда
		
		Результат = Заказ.КатегорииЗаказа;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.КатегорияТранспорта Тогда
		
		Результат = Заказ.КатегорииТранспорта;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.ТипДоставки Тогда
		
		Результат = Заказ.ТипДоставки;
		
	ИначеЕсли СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Приоритет Тогда
		
		Результат = Заказ.Приоритет;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Устанавливается значение свойства стиля маркера
//
Процедура УстановитьЗначениеСвойстваСтиляМаркера(Стиль, СвойствоМаркера, Значение)
	
	ПодключитьКСЛ();
	
	Если СвойствоМаркера = Перечисления.новаСвойстваМаркера.ВидФигуры Тогда
		
		Если (не ЗначениеЗаполнено(ВидГруппировкиМаркеров))
		     или ВидГруппировкиМаркеров = Перечисления.новаВидыГруппировокМаркеров.БезГруппировкиСПредупреждением
		     или ВидГруппировкиМаркеров = Перечисления.новаВидыГруппировокМаркеров.БезГруппировкиБезПредупреждения
		     или ВидГруппировкиМаркеров = Перечисления.новаВидыГруппировокМаркеров.ПоФормеФигуры Тогда
			
			Стиль.КомпоновщикМаркера = КомпоновщикиМаркеров[Значение];
			Если Стиль.КомпоновщикМаркера = Неопределено тогда
				
				Стиль.КомпоновщикМаркера = КСЛ.ГрафическийИнтерфейс_КомпоновщикОтображаемыхСвойствМаркер();
				Если Значение = Перечисления.новаВидыФигурыМаркера.Круг Тогда
					Стиль.КомпоновщикМаркера.ВидФигуры = "Круг";
				ИначеЕсли Значение = Перечисления.новаВидыФигурыМаркера.ТреугольникВверх Тогда
					Стиль.КомпоновщикМаркера.ВидФигуры = "ТреугольникУгломВверх";
				ИначеЕсли Значение = Перечисления.новаВидыФигурыМаркера.ТреугольникВниз Тогда
					Стиль.КомпоновщикМаркера.ВидФигуры = "ТреугольникУгломВниз";
				ИначеЕсли Значение = Перечисления.новаВидыФигурыМаркера.Ромб Тогда
					Стиль.КомпоновщикМаркера.ВидФигуры = "Ромб";
				ИначеЕсли Значение = Перечисления.новаВидыФигурыМаркера.Квадрат Тогда
					Стиль.КомпоновщикМаркера.ВидФигуры = "Квадрат";
				КонецЕсли;
				
				КомпоновщикиМаркеров.Вставить(Значение, Стиль.КомпоновщикМаркера);
			КонецЕсли;
			
		Иначе
			
			Стиль.КомпоновщикМаркера = Значение;
		КонецЕсли;
		
	ИначеЕсли СвойствоМаркера = Перечисления.новаСвойстваМаркера.ЦветФона Тогда
		
		Стиль.ЦветФона = Значение;
		
	ИначеЕсли СвойствоМаркера = Перечисления.новаСвойстваМаркера.ЦветОкантовки Тогда
		
		Стиль.ЦветОкантовки = Значение;
		
	ИначеЕсли СвойствоМаркера = Перечисления.новаСвойстваМаркера.РазмерФигуры Тогда
		
		Стиль.РазмерФигуры = Значение;
		
	ИначеЕсли СвойствоМаркера = Перечисления.новаСвойстваМаркера.ТолщинаОкантовки Тогда
		
		Стиль.ТолщинаОкантовки = Значение;
		
	КонецЕсли;
	
КонецПроцедуры

//Подбираем компоновщик маркера по виду фигуры и цвету
//
Процедура ПодобратьКомпоновщикМаркеров(Стиль)
	
	ВидФигуры = Стиль.КомпоновщикМаркера;
	КлючКомпоновщика = Строка(Перечисления.новаВидыФигурыМаркера.Индекс(ВидФигуры)) + Строка(Стиль.ЦветФона);
	Стиль.КомпоновщикМаркера = КомпоновщикиМаркеров[КлючКомпоновщика];
	Если Стиль.КомпоновщикМаркера = Неопределено тогда
		
		ПодключитьКСЛ();
		
		Стиль.КомпоновщикМаркера = КСЛ.ГрафическийИнтерфейс_КомпоновщикОтображаемыхСвойствМаркер();
		Если ВидФигуры = Перечисления.новаВидыФигурыМаркера.Круг Тогда
			Стиль.КомпоновщикМаркера.ВидФигуры = "Круг";
		ИначеЕсли ВидФигуры = Перечисления.новаВидыФигурыМаркера.ТреугольникВверх Тогда
			Стиль.КомпоновщикМаркера.ВидФигуры = "ТреугольникУгломВверх";
		ИначеЕсли ВидФигуры = Перечисления.новаВидыФигурыМаркера.ТреугольникВниз Тогда
			Стиль.КомпоновщикМаркера.ВидФигуры = "ТреугольникУгломВниз";
		ИначеЕсли ВидФигуры = Перечисления.новаВидыФигурыМаркера.Ромб Тогда
			Стиль.КомпоновщикМаркера.ВидФигуры = "Ромб";
		ИначеЕсли ВидФигуры = Перечисления.новаВидыФигурыМаркера.Квадрат Тогда
			Стиль.КомпоновщикМаркера.ВидФигуры = "Квадрат";
		КонецЕсли;
		
		СтильКСЛ = КСЛ.ГрафическийИнтерфейс_Графика.СоздатьСтиль();
		СтильКСЛ.ЦветФонаМаркера = Строка(Стиль.ЦветФона);
		
		Стиль.КомпоновщикМаркера.Стиль = СтильКСЛ;
		
		КомпоновщикиМаркеров.Вставить(КлючКомпоновщика, Стиль.КомпоновщикМаркера);
	КонецЕсли;
	
КонецПроцедуры

//Подготовка компоновщика расшифровки
//
Процедура ПодготовитьКомпоновщикРасшифровки(Стиль, Заказ)
	
	Если не ЗначениеЗаполнено(НастройкаОтображенияМаркеров) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьКСЛ();
	
	Стиль.КомпоновщикРасшифровки = КСЛ.ГрафическийИнтерфейс_КомпоновщикОтображаемыхСвойствСписком();
	
	Индекс = 0;
	
	Для каждого СвойствоДоставки из СвойстваДоставкиРасшифровкаМаркера Цикл
		
		//Точка прибытия
		Если СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.АдресПрибытия Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "АдресПрибытия";
			СвойствоКСЛ.Представление = "Адрес прибытия";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			СвойствоКСЛ.Гиперссылка = Истина;
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Точка отправления
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.АдресОтправления Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "АдресОтправления";
			СвойствоКСЛ.Представление = "Адрес отправления";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			СвойствоКСЛ.Гиперссылка = Истина;
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Грузополучатель
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Грузополучатель Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "Грузополучатель";
			СвойствоКСЛ.Представление = "Грузополучатель";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			СвойствоКСЛ.Гиперссылка = Истина;
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Грузоотправитель
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Грузоотправитель Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "Грузоотправитель";
			СвойствоКСЛ.Представление = "Грузоотправитель";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			СвойствоКСЛ.Гиперссылка = Истина;
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Вес
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Вес Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоЧисло();
			СвойствоКСЛ.Ид = "Вес";
			СвойствоКСЛ.Представление = "Вес";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Объём
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Объем Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоЧисло();
			СвойствоКСЛ.Ид = "Объем";
			СвойствоКСЛ.Представление = "Объём";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Объём
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Места Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоЧисло();
			СвойствоКСЛ.Ид = "Места";
			СвойствоКСЛ.Представление = "Места";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Стоимость
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Стоимость Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоЧисло();
			СвойствоКСЛ.Ид = "Стоимость";
			СвойствоКСЛ.Представление = "Стоимость";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Время прибытия С
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.ВремяПрибытияС Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "ВремяПрибытияС";
			СвойствоКСЛ.Представление = "Время прибытия С";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Время прибытия по
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.ВремяПрибытияПо Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "ВремяПрибытияПо";
			СвойствоКСЛ.Представление = "Время прибытия По";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Длительность
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.ДлительностьПребыванияВТочке Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоЧисло();
			СвойствоКСЛ.Ид = "ДлительностьПребыванияВТочке";
			СвойствоКСЛ.Представление = "Длительность пребывания в точке";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Дата номер местной доставки
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.МестнаяДоставка Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "МестнаяДоставка";
			СвойствоКСЛ.Представление = "Дата, номер местной доставки";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			СвойствоКСЛ.Гиперссылка = Истина;
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Ответстввенный менеджер
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.ОтветственныйМенеджер Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "ОтветственныйМенеджер";
			СвойствоКСЛ.Представление = "Ответстввенный менеджер";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			СвойствоКСЛ.Гиперссылка = Истина;
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Основной телефон
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Телефон Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "ОсновнойТелефон";
			СвойствоКСЛ.Представление = "Основной телефон";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Комментарий
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Комментарий Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
			СвойствоКСЛ.Ид = "Комментарий";
			СвойствоКСЛ.Представление = "Комментарий";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
			
		//Приоритет
		ИначеЕсли СвойствоДоставки.СвойствоДоставки = Перечисления.новаСвойстваМестнойДоставки.Приоритет Тогда
			
			СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоЧисло();
			СвойствоКСЛ.Ид = "Приоритет";
			СвойствоКСЛ.Представление = "Приоритет";
			СвойствоКСЛ.Формат = ?(ЗначениеЗаполнено(СвойствоДоставки.Префикс), СвойствоДоставки.Префикс + " ", "") + "{0}" + ?(ЗначениеЗаполнено(СвойствоДоставки.Суффикс), " " + СвойствоДоставки.Суффикс, "");
			
			Стиль.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
		КонецЕсли;
		
		НастройкаСвойства = Стиль.КомпоновщикРасшифровки.Настройка.Получить(Индекс);
		НастройкаСвойства.ВТойЖеСтроке = (СвойствоДоставки.ПоложениеВСтроке = Перечисления.новаПоложениеВстроке.ВТойЖеСтроке);
		
		ШрифтСвойства = СвойствоДоставки.Шрифт.Получить();
		Если ШрифтСвойства <> Неопределено Тогда
			
			ПараметрыШрифтаКСЛ = КСЛ.ГрафическийИнтерфейс_ПараметрыШрифта();
			Если ЗначениеЗаполнено(ШрифтСвойства.Имя) Тогда
				ПараметрыШрифтаКСЛ.Семейство = ШрифтСвойства.Имя;
			КонецЕсли;
			ПараметрыШрифтаКСЛ.Жирный = ШрифтСвойства.Жирный;
			ПараметрыШрифтаКСЛ.Наклонный = ШрифтСвойства.Наклонный;
			ПараметрыШрифтаКСЛ.Подчеркнутый = ШрифтСвойства.Подчеркивание ;
			Если ШрифтСвойства.Размер > 0 Тогда
				ПараметрыШрифтаКСЛ.Размер = ШрифтСвойства.Размер;
			КонецЕсли;
			ПараметрыШрифтаКСЛ.Цвет = "0,0,0";
			
			Попытка
				СтильКСЛ = КСЛ.ГрафическийИнтерфейс_Графика.СоздатьСтиль();
				СтильКСЛ.ЗадатьШрифтФормы(ПараметрыШрифтаКСЛ);
				
				НастройкаСвойства.Стиль = СтильКСЛ;
			Исключение
				//Отрисует стандартным шрифтом
			КонецПопытки;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

//Проверяет значение на вхождение в интервал или список
//
Функция ЗначениеУдовлетворяетУсловию(Значение, ВидСравнения, ОсновноеЗначение, ДополнительноеЗначение)
	
	Результат = Ложь;
	
	Если ВидСравнения = Перечисления.новаВидыСравнения.Равно Тогда
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Для каждого ДетальноеЗначение Из Значение Цикл
				Результат = Результат или ДетальноеЗначение = ОсновноеЗначение;
			КонецЦикла;
		Иначе
			Результат = Результат или Значение = ОсновноеЗначение;
		КонецЕсли;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.ВСписке Тогда
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Для каждого ДетальноеЗначение Из Значение Цикл
				Результат = ОсновноеЗначение[ДетальноеЗначение] = Истина;
			КонецЦикла;
		Иначе
			Результат = ОсновноеЗначение[Значение] = Истина;
		КонецЕсли;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.Меньше Тогда
		
		Результат = Значение < ОсновноеЗначение;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.МеньшеРавно Тогда
		
		Результат = Значение <= ОсновноеЗначение;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.Больше Тогда
		
		Результат = Значение > ОсновноеЗначение;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.БольшеРавно Тогда
		
		Результат = Значение >= ОсновноеЗначение;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.ИнтервалВключаяНачалоКонец Тогда
		
		Результат = Значение >= ОсновноеЗначение и Значение <= ДополнительноеЗначение;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.ИнтервалИсключаяКонец Тогда
		
		Результат = Значение >= ОсновноеЗначение и Значение < ДополнительноеЗначение;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.ИнтервалИсключаяНачало Тогда
		
		Результат = Значение > ОсновноеЗначение и Значение <= ДополнительноеЗначение;
		
	ИначеЕсли ВидСравнения = Перечисления.новаВидыСравнения.ИнтервалИсключаяНачалоКонец Тогда
		
		Результат = Значение > ОсновноеЗначение и Значение < ДополнительноеЗначение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Возвращает стиль отображения маркеров по умолчанию
//
Функция ПолучитьСтильОтображенияПоУмолчанию()
	
	Результат = Новый Структура("КомпоновщикМаркера, КомпоновщикРасшифровки, ЦветФона, ЦветОкантовки, РазмерФигуры, ТолщинаОкантовки");
	
	ПодключитьКСЛ();
	
	УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ВидФигуры, Перечисления.новаВидыФигурыМаркера.Квадрат);
	УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ЦветФона, Новый Цвет(0, 0, 255));
	УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ЦветОкантовки, Новый Цвет(0, 0, 0));
	УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.РазмерФигуры, 16);
	УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ТолщинаОкантовки, 1);
	
	Результат.КомпоновщикРасшифровки = КСЛ.ГрафическийИнтерфейс_КомпоновщикОтображаемыхСвойствСписком();
	
	СвойствоКСЛ = КСЛ.ГрафическийИнтерфейс_ОтображаемоеСвойствоТекст();
	СвойствоКСЛ.Ид = "АдресПрибытия";
	СвойствоКСЛ.Представление =  "Адрес прибытия";
	
	Результат.КомпоновщикРасшифровки.ДобавитьСвойство(СвойствоКСЛ);
	
	Результат.Вставить("ЦветВектора", Новый Цвет(0, 0, 255));
	Результат.Вставить("ЦветМаркераИндекса", Новый Цвет(0, 0, 128));                                                            
	Результат.Вставить("ЦветШрифтаМаркераИндекса", Новый Цвет(255, 255, 255));
    	
	Если ЗначениеЗаполнено(НастройкаОтображенияМаркеров) Тогда
			
		СтрокаЦветВектора = Формат(НастройкаОтображенияМаркеров.НепрозрачностьВекторов * 255 / 100, "ЧН=0; ЧГ=") + ", " + Строка(НастройкаОтображенияМаркеров.ЦветВектора.Получить());
		
		Результат.ЦветВектора = СтрокаЦветВектора;
		Результат.ЦветМаркераИндекса = НастройкаОтображенияМаркеров.ЦветМаркераИндекса.Получить();
		Результат.ЦветШрифтаМаркераИндекса = НастройкаОтображенияМаркеров.ЦветШрифтаМаркераИндекса.Получить();
       		
		Если ЗначениеЗаполнено(ЗначенияНастройкиОтображенияПоУмолчанию.ВидФигуры) Тогда
			УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ВидФигуры, ЗначенияНастройкиОтображенияПоУмолчанию.ВидФигуры);
		КонецЕсли;
		УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ЦветФона, ЗначенияНастройкиОтображенияПоУмолчанию.ЦветФона);
		УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ЦветОкантовки, ЗначенияНастройкиОтображенияПоУмолчанию.ЦветОкантовки);
		Если ЗначениеЗаполнено(ЗначенияНастройкиОтображенияПоУмолчанию.РазмерФмгуры) тогда
			УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.РазмерФигуры, ЗначенияНастройкиОтображенияПоУмолчанию.РазмерФмгуры);
		КонецЕсли;
		УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ТолщинаОкантовки, ЗначенияНастройкиОтображенияПоУмолчанию.ТолщинаОкантовки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//По заказу возвращает созданный стиль
//
//  Параметры:
//    Заказ - <СтрокаТаблицыЗначений> строка основной таблицы заказов
//
Функция ПолучитьСтильОтображения(Заказ)
	
	Результат = ПолучитьСтильОтображенияПоУмолчанию();
	
	Если ЗначениеЗаполнено(НастройкаОтображенияМаркеров) Тогда
		
		Для каждого ЭлементНастройкиСтиля Из ПодготовленныеНастройкиОтображения Цикл
			
			ЗначениеСвойства = ПолучитьЗначениеСвойстваДоставки(ЭлементНастройкиСтиля.Ключ, Заказ);
			
			Для каждого ЭлементНастройки Из ЭлементНастройкиСтиля.Значение Цикл
				
				Если ЗначениеУдовлетворяетУсловию(ЗначениеСвойства, ЭлементНастройки.ВидСравнения, ЭлементНастройки.ОсновноеЗначениеСвойстваДоставки, ЭлементНастройки.ДополнительноеЗначениеСвойстваДоставки) Тогда
					УстановитьЗначениеСвойстваСтиляМаркера(Результат, ЭлементНастройки.СвойствоМаркера, ЭлементНастройки.ЗначениеСвойстваМаркера);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ВидГруппировкиМаркеров = Перечисления.новаВидыГруппировокМаркеров.ПоФормеФигурыИЦветуФона Тогда
		
		ПодобратьКомпоновщикМаркеров(Результат);
	КонецЕсли;
	
	ПодготовитьКомпоновщикРасшифровки(Результат, Заказ);
	
	//+++ Костя 25.08.2015
	//--------- Если в доставке ХОЛОДИЛЬНИК или СТИР.машинка - ВидФигурыМаркера -> КВАДРАТ
	//---------------- ВОЗВРАТ -> треугольник
	//----Евгений переработано. в условии должен быть включен Тип оплаты = Оплата по терминалу + оптимизация
	
	Если Заказ.ЗаказР.ТипОплаты = 3 Тогда
		ЗаказВозврат = smv.ПолучитьТипЗаказаNew(Заказ.ЗаказР);
		Если ЗаказВозврат = Перечисления.ТипыЗаказов.Возврат Тогда        
			УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ВидФигуры, Перечисления.новаВидыФигурыМаркера.ТреугольникВниз);		
		Иначе
			УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ВидФигуры, Перечисления.новаВидыФигурыМаркера.Круг);		
		КонецеСли;
	Иначе
		
		// Холодильник и стир. машинка
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ЗаказР
		|	И (РеализацияТоваровУслуг.Товары.Номенклатура.Наименование ПОДОБНО ""%холод%""
		|			ИЛИ РеализацияТоваровУслуг.Товары.Номенклатура.Наименование ПОДОБНО ""%стир%""
		|			ИЛИ (РеализацияТоваровУслуг.ПодарочныеПозиции.Номенклатура.Наименование ПОДОБНО ""%холод%""
		|				ИЛИ РеализацияТоваровУслуг.ПодарочныеПозиции.Номенклатура.Наименование ПОДОБНО ""%стир%""))");
		//|			ИЛИ РеализацияТоваровУслугТовары.Номенклатура.Наименование ПОДОБНО ""%микс%"")"); // для теста ПРОБЛЕМА С УСЛОВИЕМ
		Запрос.УстановитьПараметр("ЗаказР", Заказ.ЗаказР);
		Рез = Запрос.Выполнить();
		//Выборка = Запрос.Выполнить().Выбрать();
		Если Не рез.Пустой() Тогда // КВАДРАТ 
			//Если Заказ.ЗаказР.Номер = "761913     " Тогда  // для теста
			УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ВидФигуры, Перечисления.новаВидыФигурыМаркера.Квадрат);		
		Иначе
			УстановитьЗначениеСвойстваСтиляМаркера(Результат, Перечисления.новаСвойстваМаркера.ВидФигуры, Перечисления.новаВидыФигурыМаркера.Круг);		
		КонецЕсли;
	КонецЕсли;
	//--- Костя 25.08.2015
	
	Возврат Результат;
	
КонецФункции

//Устанавливает режим выделения заказов
//
//  Параметры:
//    РежимВыделения - <Строка>
//      "ВыделениеПрямоугольником" - с зажатым Ctrl можно выделять прямоугоьлником
//      "ВыделениеЭллипсом" - с зажатым Ctrl можно выделять элипсом
//      "ВыделениеПолигоном" - с зажатым Ctrl можно выделять произвольной линией
//
Процедура УстановитьРежимВыделения(РежимВыделения) Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеКарты.РежимВыделенияОбъектов = РежимВыделения;
	
КонецПроцедуры

//Возвращает режим выделения маркеров
//
//  Возвращаемое значение:
//    <Строка>
//      "" - если карта не пожключена
//      "ВыделениеПрямоугольником" - с зажатым Ctrl можно выделять прямоугоьлником
//      "ВыделениеЭллипсом" - с зажатым Ctrl можно выделять элипсом
//      "ВыделениеПолигоном" - с зажатым Ctrl можно выделять произвольной линией
//
Функция ПолучитьРежимВыделения() Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПолеКарты.РежимВыделенияОбъектов;
	
КонецФункции

//Подключение обработчика выделения объектов
//
Процедура ПодключитьОбработчикиВыделения() Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРежимВыделения("ВыделениеПрямоугольником");
	
	ПолеКарты.ПриВыделенииОбъектов(ЭтотОбъект, "ПолеКартыПриВыделенииОбъектов");
	ПолеКарты.ПриВыбореГруппируемогоОбъекта(ЭтотОбъект, "ПолеКартыПриВыбореГруппируемогоОбъекта");
	ПолеКарты.ПриВыбореГруппыОбъектов(ЭтотОбъект, "ПолеКартыПриВыбореГруппыОбъектов");
	ПолеКарты.ПриОткрытииГруппыОбъектов(ЭтотОбъект, "ПолеКартыПриОткрытииГруппыОбъектов");
	
КонецПроцедуры

Процедура ПриВыбореСвойства(Заказ, Свойство)
	
	Форма = Неопределено;
	
	Если Свойство = "МестнаяДоставка" Тогда
		
		Форма = Заказ.Заказ.ПолучитьФорму();
		
	ИначеЕсли Свойство = "Грузоотправитель" Тогда
		
		Если ЗначениеЗаполнено(Заказ.Грузоотправитель) Тогда
			
			Форма = Заказ.Грузоотправитель.ПолучитьФорму();
		КонецЕсли;
		
	ИначеЕсли Свойство = "Грузополучатель" Тогда
		
		Если ЗначениеЗаполнено(Заказ.Грузополучатель) Тогда
			
			Форма = Заказ.Грузополучатель.ПолучитьФорму();
		КонецЕсли;
		
	ИначеЕсли Свойство = "АдресОтправления" Тогда
		
		Если ЗначениеЗаполнено(Заказ.ТочкаОтправления) Тогда
			
			Форма = Заказ.ТочкаОтправления.ПолучитьФорму();
		КонецЕсли;
		
	ИначеЕсли Свойство = "АдресПрибытия" Тогда
		
		Если ЗначениеЗаполнено(Заказ.ТочкаПрибытия) Тогда
			
			Форма = Заказ.ТочкаПрибытия.ПолучитьФорму();
		КонецЕсли;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

//Обработчик события выбора маркеров на карте
//
//  Параметры:
//    СписокМаркеров - COMОбъект список выделенных маркеров
//
Процедура ПолеКартыПриВыделенииОбъектов(СписокОбъектов) Экспорт
	
	ТочкиРейса = Новый Массив;
	
	ДобавляемыеЗаказы = Новый Соответствие;
	УдаляемыеЗаказы = Новый Соответствие;
	
	Для Индекс = 0 По СписокОбъектов.Количество() - 1 Цикл
		
		ИсточникДанных = СписокОбъектов.Получить(Индекс);
		
		Если ИсточникДанных.ТипОбъекта() = "УТЛ.ГрафическийИнтерфейс.ИсточникОтображаемыхСвойствАгрегатор" Тогда
			
			Для Индекс2 = 0 По ИсточникДанных.Источники.Количество() - 1 Цикл
				
				Если ИсточникДанных.Источники.Получить(Индекс2).ТипОбъекта() = "УТЛ.ГрафическийИнтерфейс.ИсточникОтображаемыхСвойствПоОбъекту" Тогда
					
					Маркер = ИсточникДанных.Источники.Получить(Индекс2).ИсточникДанных.ИсхОбъект();
						
					Если ВыбранныеЗаказы[Маркер.Заказ] = Неопределено Тогда
						ДобавляемыеЗаказы.Вставить(Маркер.Заказ, Истина);
					Иначе
						УдаляемыеЗаказы.Вставить(Маркер.Заказ, Истина);
					КонецЕсли;
					
				ИначеЕсли ИсточникДанных.Источники.Получить(Индекс2).ТипОбъекта() = "УТЛ.Доставка.Карты.ИсточникОтображаемыхСвойствТочкиРейса" Тогда
					
					ТочкиРейса.Добавить(ИсточникДанных.Источники.Получить(Индекс2));
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ИсточникДанных.ТипОбъекта() = "УТЛ.ГрафическийИнтерфейс.ИсточникОтображаемыхСвойствПоОбъекту" Тогда
			
			Маркер = ИсточникДанных.ИсточникДанных.ИсхОбъект();
			Если ВыбранныеЗаказы[Маркер.Заказ] = Неопределено Тогда
				ДобавляемыеЗаказы.Вставить(Маркер.Заказ, Истина);
			Иначе
				УдаляемыеЗаказы.Вставить(Маркер.Заказ, Истина);
			КонецЕсли;
			
		ИначеЕсли ИсточникДанных.ТипОбъекта() = "УТЛ.Доставка.Карты.ИсточникОтображаемыхСвойствТочкиРейса" Тогда
			
			ТочкиРейса.Добавить(ИсточникДанных);
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавляемыеЗаказы.Количество() > 0
	     или УдаляемыеЗаказы.Количество() > 0 Тогда
		
		ДобавитьЗаказыВВыбранные(ДобавляемыеЗаказы, "ВРучную");
		УдалитьЗаказыИзВыбранных(УдаляемыеЗаказы);
		
		Если РедактируемыйРейс = Неопределено Тогда
			УстановитьФильтрВыбранногоТранспорта();
		Иначе
			ДобавитьВРейс(РедактируемыйРейс);
		КонецЕсли;
	КонецЕсли;
	
	Если ТочкиРейса.Количество() > 0
	     и ДобавляемыеЗаказы.Количество() = 0 Тогда
		
		ЖурналРейсов.ОповеститьВсеИсточники("ГруппируемыеМаркераВыделеныОбластью", ТочкиРейса);
		Если РедактируетсяРейс Тогда
			ОбновитьДоступностьТранспорта(РедактируемыйРейс.Транспорт);
			ОбновитьДоступностьСмежногоТранспорта(РедактируемыйРейс.Транспорт,РедактируемыйРейс.Водитель);
		КонецЕсли;
		ОбновитьОтрисовкуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

//При выборе маркера на карте
//
Процедура ПолеКартыПриВыбореГруппируемогоОбъекта(Объект, Свойство) Экспорт
	
	Если Объект.ТипОбъекта() = "УТЛ.ГрафическийИнтерфейс.Карты.ГруппируемыйМаркер"
	     или Объект.ТипОбъекта() = "УТЛ.ГрафическийИнтерфейс.ИсточникОтображаемыхСвойствПоОбъекту" Тогда
		 
		Если Объект.ТипОбъекта() = "УТЛ.ГрафическийИнтерфейс.Карты.ГруппируемыйМаркер" Тогда
			Маркер = Объект.ИсточникДанных.ИсточникДанных.ИсхОбъект();
		Иначе
			Маркер = Объект.ИсточникДанных.ИсхОбъект();
		КонецЕсли;
		
		Если Свойство = Неопределено Тогда
			
			Если ВыбранныеЗаказы[Маркер.Заказ] = Неопределено Тогда
				ДобавитьЗаказыВВыбранные(Маркер.Заказ, "ВРучную");
			Иначе
				УдалитьЗаказыИзВыбранных(Маркер.Заказ);
			КонецЕсли;
			
			Если РедактируемыйРейс = Неопределено Тогда
				УстановитьФильтрВыбранногоТранспорта();
			Иначе
				ДобавитьВРейс(РедактируемыйРейс);
			КонецЕсли;
			
		Иначе
			
			ПриВыбореСвойства(Маркер.Заказ, Свойство);
		КонецЕсли;
		
	ИначеЕсли Объект.ТипОбъекта() = "УТЛ.Доставка.Карты.МаркерТочкиРейса" Тогда
		
		Если РедактируетсяРейс Тогда
			//удаляемые из рейса точки
			ТочкиРейса = Новый Массив;
			ТочкиРейса.Добавить(Объект);
			//удаляем из списка проверки маршрута
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|    ЗаданияРейса.Доставка
			|  ИЗ
			|    РегистрСведений.новаТочкиМаршрутаРейсов КАК ТочкиМаршрута
			|    ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК ЗаданияРейса
			|      ПО
			|        ТочкиМаршрута.Рейс = ЗаданияРейса.Рейс
			|        И ТочкиМаршрута.КодТочки = ЗаданияРейса.КодТочки
			|  ГДЕ
			|    ТочкиМаршрута.Рейс = &Рейс
			|    И ТочкиМаршрута.НомерТочки <> 0
			|    И ТочкиМаршрута.ИдТочки В (&ИдТочекМаршрута)
			|");
			Запрос.УстановитьПараметр("Рейс", РедактируемыйМаршрут);
			Запрос.УстановитьПараметр("ИдТочекМаршрута", Объект.Данные.Точка.ИД());
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если МассивДоставокРейса.Найти(Выборка.Доставка)<>Неопределено Тогда
						ЭлементСпискаПроверкиМаршрута = СписокПроверкиМаршрута.НайтиПоЗначению(Выборка.Доставка);
						Если ЭлементСпискаПроверкиМаршрута<>Неопределено Тогда
							СписокПроверкиМаршрута.Удалить(ЭлементСпискаПроверкиМаршрута);
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			ЖурналРейсов.ОповеститьВсеИсточники("ГруппируемыйМаркерВыбран", ТочкиРейса, Свойство);
			ОбновитьДоступностьТранспорта(РедактируемыйРейс.Транспорт);
			ОбновитьДоступностьСмежногоТранспорта(РедактируемыйРейс.Транспорт, РедактируемыйРейс.Водитель);
		КонецЕсли;
		
		Если РедактируетсяМаршрут и не РедактируетсяРейс Тогда
			Если МассивДоставокРейса.Количество()<=1 Тогда
				Возврат;
			КонецЕсли; 
			Если МассивДоставокРейса.Количество() <= СписокПроверкиМаршрута.Количество() Тогда
				#Если Клиент Тогда
					Ответ = Вопрос("Выбраны все точки маршрута! Начать заново?",РежимДиалогаВопрос.ДаНет,0);
					Если Ответ = КодВозвратаДиалога.Да Тогда
						СписокПроверкиМаршрута.Очистить();
					ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
				#Иначе
					СписокПроверкиМаршрута.Очистить();
				#КонецЕсли
			КонецЕсли;
			обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
			стРейс = обМаршрут.НачатьРедактирование(РедактируемыйМаршрут, Неопределено);
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|    ЗаданияРейса.Доставка
			|  ИЗ
			|    РегистрСведений.новаТочкиМаршрутаРейсов КАК ТочкиМаршрута
			|    ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК ЗаданияРейса
			|      ПО
			|        ТочкиМаршрута.Рейс = ЗаданияРейса.Рейс
			|        И ТочкиМаршрута.КодТочки = ЗаданияРейса.КодТочки
			|  ГДЕ
			|    ТочкиМаршрута.Рейс = &Рейс
			|    И ТочкиМаршрута.НомерТочки <> 0
			|    И ТочкиМаршрута.ИдТочки В (&ИдТочекМаршрута)
			|");
			Запрос.УстановитьПараметр("Рейс", РедактируемыйМаршрут);
			Запрос.УстановитьПараметр("ИдТочекМаршрута", Объект.Данные.Точка.ИД());
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если МассивДоставокРейса.Найти(Выборка.Доставка)<>Неопределено Тогда
						ЭлементСпискаПроверкиМаршрута = СписокПроверкиМаршрута.НайтиПоЗначению(Выборка.Доставка);
						Если ЭлементСпискаПроверкиМаршрута<>Неопределено Тогда
							СписокПроверкиМаршрута.Удалить(ЭлементСпискаПроверкиМаршрута);
						КонецЕсли; 
						ЭлементСпискаПроверкиМаршрута = СписокПроверкиМаршрута.Добавить(Выборка.Доставка);
						обМаршрут.УдалитьДоставку(РедактируемыйМаршрут,Выборка.Доставка);			
						обМаршрут.ДобавитьДоставку(РедактируемыйМаршрут,Выборка.Доставка,СписокПроверкиМаршрута.Индекс(ЭлементСпискаПроверкиМаршрута)+1);
					КонецЕсли; 
				КонецЦикла;
				обМаршрут.ПересчитатьРейс_(стРейс, Истина);
				обМаршрут.ПересчитатьРейсКСЛ(РедактируемыйМаршрут, Истина);
				обМаршрут.СохранитьМаршрутРейса_(стРейс,,Ложь);
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьОтрисовкуЗаказов();
		
	КонецЕсли;
	
КонецПроцедуры

//При выборе группы маркеров
//
Процедура ПолеКартыПриВыбореГруппыОбъектов(СписокОбъектов, Свойство) Экспорт
	
	ТочкиРейса = Новый Массив;
	
	ВыделенныеЗаказыГруппы = Новый Соответствие;
	ОтображаемыеЗаказыГруппы = Новый Соответствие;
	
	Если РедактируетсяМаршрут и не РедактируетсяРейс Тогда
		Если МассивДоставокРейса.Количество() <= СписокПроверкиМаршрута.Количество() Тогда
			#Если Клиент Тогда
				Ответ = Вопрос("Выбраны все точки маршрута! Начать заново?",РежимДиалогаВопрос.ДаНет,0);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СписокПроверкиМаршрута.Очистить();
				Иначе
					Возврат;
				КонецЕсли;
			#Иначе
				СписокПроверкиМаршрута.Очистить();
			#КонецЕсли
		КонецЕсли;
	КонецЕсли; 
	
	Для Индекс = 0 По СписокОбъектов.ЧленыГруппы.Количество() - 1 Цикл
		
		Если СписокОбъектов.ЧленыГруппы.Получить(Индекс).ТипОбъекта() = "УТЛ.ГрафическийИнтерфейс.Карты.ГруппируемыйМаркер" Тогда
			
			Маркер = СписокОбъектов.ЧленыГруппы.Получить(Индекс).ИсточникДанных.ИсточникДанных.ИсхОбъект();
			
			Если Свойство = Неопределено Тогда
				
				Если ВыбранныеЗаказы[Маркер.Заказ] <> Неопределено Тогда
					ВыделенныеЗаказыГруппы.Вставить(Маркер.Заказ, Истина);
				Иначе
					ОтображаемыеЗаказыГруппы.Вставить(Маркер.Заказ, Истина);
				КонецЕсли;
				
			Иначе
				
				ПриВыбореСвойства(Маркер.Заказ, Свойство);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли СписокОбъектов.ЧленыГруппы.Получить(Индекс).ТипОбъекта() = "УТЛ.Доставка.Карты.МаркерТочкиРейса" Тогда
			
			Если РедактируетсяРейс Тогда
				ТочкиРейса.Добавить(СписокОбъектов.ЧленыГруппы.Получить(Индекс))
			КонецЕсли;
			
			Если РедактируетсяМаршрут и не РедактируетсяРейс Тогда
				Объект = СписокОбъектов.ЧленыГруппы.Получить(Индекс);
				обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
				стРейс = обМаршрут.НачатьРедактирование(РедактируемыйМаршрут, Неопределено);
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|    ЗаданияРейса.Доставка
				|  ИЗ
				|    РегистрСведений.новаТочкиМаршрутаРейсов КАК ТочкиМаршрута
				|    ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК ЗаданияРейса
				|      ПО
				|        ТочкиМаршрута.Рейс = ЗаданияРейса.Рейс
				|        И ТочкиМаршрута.КодТочки = ЗаданияРейса.КодТочки
				|  ГДЕ
				|    ТочкиМаршрута.Рейс = &Рейс
				|    И ТочкиМаршрута.НомерТочки <> 0
				|    И ТочкиМаршрута.ИдТочки В (&ИдТочекМаршрута)
				|");
				
				Запрос.УстановитьПараметр("Рейс", РедактируемыйМаршрут);
				Запрос.УстановитьПараметр("ИдТочекМаршрута", Объект.Данные.Точка.ИД());
				
				РезультатЗапроса = Запрос.Выполнить();
				Если не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						Если МассивДоставокРейса.Найти(Выборка.Доставка)<>Неопределено Тогда
							ЭлементСпискаПроверкиМаршрута = СписокПроверкиМаршрута.НайтиПоЗначению(Выборка.Доставка);
							Если ЭлементСпискаПроверкиМаршрута<>Неопределено Тогда
								СписокПроверкиМаршрута.Удалить(ЭлементСпискаПроверкиМаршрута);
							КонецЕсли; 
							ЭлементСпискаПроверкиМаршрута = СписокПроверкиМаршрута.Добавить(Выборка.Доставка);
							обМаршрут.УдалитьДоставку(РедактируемыйМаршрут,Выборка.Доставка);			
							обМаршрут.ДобавитьДоставку(РедактируемыйМаршрут,Выборка.Доставка,СписокПроверкиМаршрута.Индекс(ЭлементСпискаПроверкиМаршрута)+1);
						КонецЕсли; 
					КонецЦикла;
					
					обМаршрут.ПересчитатьРейс_(стРейс);
					обМаршрут.ПересчитатьРейсКСЛ(РедактируемыйМаршрут, Истина);
					обМаршрут.СохранитьМаршрутРейса_(стРейс,,Ложь);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыделенныеЗаказыГруппы.Количество() > 0
		 или ОтображаемыеЗаказыГруппы.Количество() > 0 Тогда
		
		Если ВыделенныеЗаказыГруппы.Количество() = 0 Тогда
			ДобавитьЗаказыВВыбранные(ОтображаемыеЗаказыГруппы, "ВРучную");
		Иначе
			УдалитьЗаказыИзВыбранных(ВыделенныеЗаказыГруппы);
		КонецЕсли;
		
		Если РедактируемыйРейс = Неопределено Тогда
			УстановитьФильтрВыбранногоТранспорта();
		Иначе
			ДобавитьВРейс(РедактируемыйРейс);
		КонецЕсли;
	КонецЕсли;
	
	Если ТочкиРейса.Количество() > 0 Тогда
		
		Для каждого ОбъектТочкиРейса Из ТочкиРейса Цикл
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|    ЗаданияРейса.Доставка
			|  ИЗ
			|    РегистрСведений.новаТочкиМаршрутаРейсов КАК ТочкиМаршрута
			|    ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК ЗаданияРейса
			|      ПО
			|        ТочкиМаршрута.Рейс = ЗаданияРейса.Рейс
			|        И ТочкиМаршрута.КодТочки = ЗаданияРейса.КодТочки
			|  ГДЕ
			|    ТочкиМаршрута.Рейс = &Рейс
			|    И ТочкиМаршрута.НомерТочки <> 0
			|    И ТочкиМаршрута.ИдТочки В (&ИдТочекМаршрута)
			|");
			Запрос.УстановитьПараметр("Рейс", РедактируемыйМаршрут);
			Запрос.УстановитьПараметр("ИдТочекМаршрута", ОбъектТочкиРейса.Данные.Точка.ИД());
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если МассивДоставокРейса.Найти(Выборка.Доставка)<>Неопределено Тогда
						ЭлементСпискаПроверкиМаршрута = СписокПроверкиМаршрута.НайтиПоЗначению(Выборка.Доставка);
						Если ЭлементСпискаПроверкиМаршрута<>Неопределено Тогда
							СписокПроверкиМаршрута.Удалить(ЭлементСпискаПроверкиМаршрута);
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла; 
		
		ЖурналРейсов.ОповеститьВсеИсточники("ВыделенаГруппаГруппируемыхМаркеров", ТочкиРейса, Свойство);
		Если РедактируетсяРейс Тогда
			ОбновитьДоступностьТранспорта(РедактируемыйРейс.Транспорт);
			ОбновитьДоступностьСмежногоТранспорта(РедактируемыйРейс.Транспорт,РедактируемыйРейс.Водитель);
		КонецЕсли;
		
		ОбновитьОтрисовкуЗаказов();
		
	КонецЕсли;
	
КонецПроцедуры

//Возвращает информацию по заказам рейсов
//
Функция ПолучитьЗаказыРейсов(СписокМаркеров)
	
	ЗаказыРейсов = Неопределено;
	
	СписокТочекМаршрута = Новый Массив;
	Для каждого Маркер Из СписокМаркеров Цикл
		
		СписокТочекМаршрута.Добавить(Маркер.Данные.Точка.Ид);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    ЗаданияРейса.Доставка
	|  ИЗ
	|    РегистрСведений.новаТочкиМаршрутаРейсов КАК ТочкиМаршрута
	|    ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК ЗаданияРейса
	|      ПО
	|        ТочкиМаршрута.Рейс = ЗаданияРейса.Рейс
	|        И ТочкиМаршрута.КодТочки = ЗаданияРейса.КодТочки
	|  ГДЕ
	|    ТочкиМаршрута.ИдТочки В (&ИдТочекМаршрута)
	|");
	
	Запрос.УстановитьПараметр("ИдТочекМаршрута", СписокТочекМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Доставки = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Доставки.Вставить(Выборка.Доставка, Истина);
		КонецЦикла;
		
		ЗаказыРейсов = ПолучитьОсновнуюИнформациюПоЗаказам(Доставки);
	КонецЕсли;
	
	Возврат ЗаказыРейсов;
	
КонецФункции

//Необходимо показать детальную информацию
//
Процедура ПолеКартыПриОткрытииГруппыОбъектов(СписокОбъектов) Экспорт
	
	ТочкиРейса = Новый Массив;
	ГруппаЗаказов = Новый Соответствие;
	
	Для Индекс = 0 По СписокОбъектов.ЧленыГруппы.Количество() - 1 Цикл
		
		Если СписокОбъектов.ЧленыГруппы.Получить(Индекс).ТипОбъекта() = "УТЛ.ГрафическийИнтерфейс.Карты.ГруппируемыйМаркер" Тогда
			
			Маркер = СписокОбъектов.ЧленыГруппы.Получить(Индекс).ИсточникДанных.ИсточникДанных.ИсхОбъект();
			
			ГруппаЗаказов.Вставить(Маркер.Заказ.Заказ, Истина);
			
		ИначеЕсли СписокОбъектов.ЧленыГруппы.Получить(Индекс).ТипОбъекта() = "УТЛ.Доставка.Карты.МаркерТочкиРейса" Тогда
			
			ТочкиРейса.Добавить(СписокОбъектов.ЧленыГруппы.Получить(Индекс))
		КонецЕсли;
	КонецЦикла;
	
	ЗаказыРейсов = ПолучитьЗаказыРейсов(ТочкиРейса);
	Если ГруппаЗаказов.Количество() > 0 или ЗаказыРейсов <> Неопределено Тогда
		
		Форма = ПолучитьФорму("СписокЗаказовГруппыМаркеров");
		Форма.ГруппаЗаказов = ГруппаЗаказов;
		Если ЗаказыРейсов <> Неопределено Тогда
			Форма.ЗаказыРейсов = ЗаказыРейсов;
		КонецЕсли;
		
		Форма.Открыть();
	КонецЕсли;
	
	//Если ТочкиРейса.Количество() > 0 Тогда
	//	
	//	ЖурналРейсов.ОповеститьВсеИсточники("ОткрытиеГруппыГруппируемыхМаркеров", ТочкиРейса);
	//КонецЕсли;
	
КонецПроцедуры

//Возвращает маркер заказа, если его нет, то создаёт новый
//
//  Параметры:
//    Заказ - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаЗаказов
//
Функция ПолучитьМаркераЗаказа(Заказ)
	
	Возврат МаркераПоЗаказам[Заказ];
	
КонецФункции

//Перенос доступного заказа в выбрынные
//
//  Параметры:
//    пЗаказы - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаЗаказов
//              <Соответствие
//                ключ - строка таблицы ОсновнаяТаблицаЗаказов
//                Значение - <Булево> - всегда Истина
//    ТипДобавления - <Строка>
//                      "ПоФильтру" - добавлены по фильтру, настройки фильтра не трогаются
//                      "ВРучную" - добавлены вручную, корректируются настройки фильтра
//
Процедура ДобавитьЗаказыВВыбранные(Знач пЗаказы, ТипДобавления = "ПоФильтру") Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	Если пЗаказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Заказ Из пЗаказы Цикл
		
		Маркер = ПолучитьМаркераЗаказа(Заказ.Ключ);
		
		Если Заказ.Ключ.ЕстьТочкаОтправления Тогда
			
			ВыборкаМаркеров.Включить(Маркер.ТочкаОтправления, Истина);
			ВыборкаМаркеровИндексируемая.Добавить(Маркер.ТочкаОтправления);

		КонецЕсли;
		
		Если Заказ.Ключ.ЕстьТочкаПрибытия Тогда
			
			ВыборкаМаркеров.Включить(Маркер.ТочкаПрибытия, Истина);
			ВыборкаМаркеровИндексируемая.Добавить(Маркер.ТочкаПрибытия);

		КонецЕсли;
				
		ВыбранныеЗаказы.Вставить(Заказ.Ключ, Истина);
				
	КонецЦикла;
	
	КорректироватьСуммарнуюИнформацию(пЗаказы, "Выделенных", "Добавить");
	
	ДобавитьЗаказыВСтатистику("Выбранные", пЗаказы, ТипДобавления);
	#Если Клиент Тогда
	Оповестить("ДобавленыВыбранныеЗаказы", пЗаказы, ЭтотОбъект);
	#КонецЕсли
	Если ТипДобавления = "ВРучную" Тогда
		
		ВыбранныеЗаказыПоПредыдущемуФильтру = ПолучитьЗаказыПоФильтру("Выбранные", "Транспорт");
	КонецЕсли;
		
	ПолеКарты.УстановитьВыборкуОбъектов(ВыборкаМаркеров);
	
КонецПроцедуры

//Удаление заказа из списка выбранных
//
//  Параметры:
//    пЗаказы - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаЗаказов
//              <Соответствие
//                ключ - строка таблицы ОсновнаяТаблицаЗаказов
//                Значение - <Булево> - всегда Истина
//
Процедура УдалитьЗаказыИзВыбранных(Знач пЗаказы) Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	Если пЗаказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КорректироватьСуммарнуюИнформацию(пЗаказы, "Выделенных", "Удалить");
	
	УдалитьЗаказыИзСтатистики("Выбранные", пЗаказы);
	#Если Клиент Тогда
	Оповестить("УдаленыВыбранныеЗаказы", пЗаказы, ЭтотОбъект);
	#КонецЕсли
	Для каждого Заказ Из пЗаказы Цикл
		
		Маркер = ПолучитьМаркераЗаказа(Заказ.Ключ);
		
		Если Заказ.Ключ.ЕстьТочкаПрибытия Тогда
			
			ВыборкаМаркеровИндексируемая.Удалить(Маркер.ТочкаПрибытия);
				
			ВыборкаМаркеров.Включить(Маркер.ТочкаПрибытия, Ложь);
			
		КонецЕсли;
		
		Если Заказ.Ключ.ЕстьТочкаОтправления Тогда
			
			ВыборкаМаркеровИндексируемая.Удалить(Маркер.ТочкаОтправления);

			ВыборкаМаркеров.Включить(Маркер.ТочкаОтправления, Ложь);
			
		КонецЕсли;
		
		ВыбранныеЗаказы.Удалить(Заказ.Ключ);
	КонецЦикла;
	
	Если ВыборкаМаркеров <> Неопределено Тогда
		
		ПолеКарты.УстановитьВыборкуОбъектов(ВыборкаМаркеров);
	КонецЕсли;
	#Если Клиент Тогда
	Оповестить("ПослеУдаленияЗаказовИзВыбранных", , ЭтотОбъект);
	#КонецЕсли
    	
КонецПроцедуры

//Отрисовка маркеров на карте, добавление заказов в доступные
//
//  Параметры:
//    пЗаказы - список заказов, если не указан, то берётся список ОтображаемыеЗаказы
//              <Соответствие
//                ключ - строка таблицы ОсновнаяТаблицаЗаказов
//                Значение - <Булево> - всегда Истина
//    ТипДобавления - <Строка>
//                      "ПоФильтру" - добавлены по фильтру, настройки фильтра не трогаются
//                      "ВРучную" - добавлены вручную, корректируются настройки фильтра
//
Процедура ДобавитьЗаказыВОтображаемые(Знач пЗаказы = Неопределено, ТипДобавления = "ПоФильтру") Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВключатьВСписок = Истина;
	Если пЗаказы = Неопределено Тогда
		
		пЗаказы = ОтображаемыеЗаказы;
		СписокСформирован = Ложь;
	КонецЕсли;
	
	Если пЗаказы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	Если пЗаказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	ФормаИндикатора = ПолучитьОбщуюФорму("новаФормаИндикатора");
	ФормаИндикатора.Заголовок = "Вывод информации на карту";
	ФормаИндикатора.МинимальноеЗначение = 0;
	ФормаИндикатора.МаксимальноеЗначение = пЗаказы.Количество();
	ФормаИндикатора.КартинкаЗаголовка = БиблиотекаКартинок.новаПланированиеПоКарте;	
	ФормаИндикатора.Открыть();
	
	ТекущееЗначениеИндикатора = 0;
	
	Для каждого Заказ Из пЗаказы Цикл
		
		ТекущееЗначениеИндикатора = ТекущееЗначениеИндикатора + 1;
		ФормаИндикатора.ОбновитьЗначение(ТекущееЗначениеИндикатора);	
		
		Если ВключатьВСписок Тогда
			
			ОтображаемыеЗаказы.Вставить(Заказ.Ключ, Истина);
		КонецЕсли;
		
		Маркер = ПолучитьМаркераЗаказа(Заказ.Ключ);
		
		Если Заказ.Ключ.ЕстьТочкаПрибытия Тогда
			
			ВыборкаМаркеров.Включить(Маркер.ТочкаПрибытия, Ложь);
		КонецЕсли;
		
		Если Заказ.Ключ.ЕстьТочкаОтправления Тогда
			
			ВыборкаМаркеров.Включить(Маркер.ТочкаОтправления, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	КорректироватьСуммарнуюИнформацию(пЗаказы, "Итоговых", "Добавить");
	
	ДобавитьЗаказыВСтатистику("Основные", пЗаказы, ТипДобавления);
	#Если Клиент Тогда
	Оповестить("ДобавленыЗаказы", пЗаказы, ЭтотОбъект);
	#КонецЕсли
	Если ТипДобавления = "ВРучную" Тогда
		
		ОтображаемыеЗаказыПоПредыдущемуФильтру = ПолучитьЗаказыПоФильтру("Основные", "Транспорт");
		//ОтображаемыйТранспортПоПредыдущемуФильтру = ПолучитьТранспортПоФильтру("Основные", "Транспорт");
	КонецЕсли;
	
	ФормаИндикатора.Закрыть();
	
	ПолеКарты.УстановитьВыборкуОбъектов(ВыборкаМаркеров);
	
КонецПроцедуры

//Удаление маркеров заказов с карты, удаление заказов из доступных
//
//  Параметры:
//    пЗаказы - список заказов, если не указан, то берётся список ОтображаемыеЗаказы
//              <Соответствие
//                ключ - строка таблицы ОсновнаяТаблицаЗаказов
//                Значение - <Булево> - всегда Истина
//
Процедура УдалитьЗаказыИзОтображаемых(Знач пЗаказы = Неопределено) Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолнаяОчистка = Ложь;
	Если пЗаказы = Неопределено Тогда
		
		пЗаказы = ОтображаемыеЗаказы;
		ПолнаяОчистка = Истина;
	КонецЕсли;
	
	Если пЗаказы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	Если пЗаказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	КорректироватьСуммарнуюИнформацию(пЗаказы, "Полная", "Удалить");
	
	УдалитьЗаказыИзСтатистики("Основные", пЗаказы);
	УдалитьЗаказыИзСтатистики("Выбранные", пЗаказы);
	#Если Клиент Тогда
	Оповестить("УдаленыЗаказы", пЗаказы, ЭтотОбъект);
	#КонецЕсли
	Для каждого Заказ Из пЗаказы Цикл
		
		Маркер = МаркераПоЗаказам[Заказ.Ключ];
		
		Если Маркер <> Неопределено Тогда
			
			Если Заказ.Ключ.ЕстьТочкаПрибытия Тогда
				
				ВыборкаМаркеровИндексируемая.Удалить(Маркер.ТочкаПрибытия);
				ВыборкаМаркеров.Исключить(Маркер.ТочкаПрибытия);
								
			КонецЕсли;
			
			Если Заказ.Ключ.ЕстьТочкаОтправления Тогда
				
				ВыборкаМаркеровИндексируемая.Удалить(Маркер.ТочкаОтправления);
				ВыборкаМаркеров.Исключить(Маркер.ТочкаОтправления);
								
			КонецЕсли;
		КонецЕсли;
		
		Если не ПолнаяОчистка Тогда
			
			ОтображаемыеЗаказы.Удалить(Заказ.Ключ);
		КонецЕсли;
		ВыбранныеЗаказы.Удалить(Заказ.Ключ);
	КонецЦикла;
	
	Если ПолнаяОчистка Тогда
		ОтображаемыеЗаказы.Очистить();
	КонецЕсли;
	#Если Клиент Тогда
	Оповестить("ПослеУдаленияЗаказовИзОтображаемых", , ЭтотОбъект);
	#КонецЕсли
	Если ВыборкаМаркеров <> Неопределено Тогда
		
		ПолеКарты.УстановитьВыборкуОбъектов(ВыборкаМаркеров);
	КонецЕсли;
	
КонецПроцедуры

//Принудительная перерисовка маркеров заказов
//
//  hotfix 0000214: Некорректное отображение точек доставки при редактировании рейса
//
Процедура ОбновитьОтрисовкуЗаказов() Экспорт
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтображаемыеЗаказы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтображаемыеЗаказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Заказ Из ОтображаемыеЗаказы Цикл
		
		Маркер = ПолучитьМаркераЗаказа(Заказ.Ключ);
		
		Если Заказ.Ключ.ЕстьТочкаПрибытия Тогда
			
			Если ВыбранныеЗаказы <> Неопределено Тогда
				ВыборкаМаркеров.Включить(Маркер.ТочкаПрибытия, ВыбранныеЗаказы[Заказ.Ключ] <> Неопределено);
			Иначе
				ВыборкаМаркеров.Включить(Маркер.ТочкаПрибытия, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Заказ.Ключ.ЕстьТочкаОтправления Тогда
			
			Если ВыбранныеЗаказы <> Неопределено Тогда
				ВыборкаМаркеров.Включить(Маркер.ТочкаОтправления, ВыбранныеЗаказы[Заказ.Ключ] <> Неопределено);
			Иначе
				ВыборкаМаркеров.Включить(Маркер.ТочкаОтправления, Ложь);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//* Районы *//

//Устанавливает текущий классификатор районов в неопределено
//и стирает районы с карты
//
Процедура ОчиститьКлассификаторРайонов() Экспорт
	
	КлассификаторРайонов = Неопределено;
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Полигон Из Полигоны Цикл
		
		ПолеКарты.УдалитьОбъект(Полигон);
	КонецЦикла;
	
	Полигоны.Очистить();
	
КонецПроцедуры

//Возвращает текущий классификатор районов
//
//  Возвращаемое значение:
//    <Неопределено, СправочникСсылка.новаКлассификаторыРайонов> классификатор по которому
//    отрисовываются районы
//
Функция ПолучитьКлассификаторРайонов() Экспорт
	
	Возврат КлассификаторРайонов;
	
КонецФункции

//Устанавливает текущий классификатор районов и перерисовывает районы
//
//  Параметры:
//    Классификатор - <СправочникСсылка.новаКлассификаторыРайонов>
//
Процедура УстановитьКлассификаторРайонов(Классификатор) Экспорт
	
	//ОчиститьКлассификаторРайонов();
	
	новаКарты.УстановитьКлассификаторРайонов(ПолеКарты, Полигоны, Классификатор);
	
	КлассификаторРайонов = Классификатор;
	
	//Если ПолеКарты = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|    Цвет
	//|    ,Точки.
	//|      (
	//|        Широта
	//|        ,Долгота
	//|      ) КАК Вершины
	//|  ИЗ
	//|    Справочник.новаГеоРайоны
	//|  ГДЕ
	//|    Владелец = &КлассификаторРайонов
	//|");
	//
	//Запрос.УстановитьПараметр("КлассификаторРайонов", КлассификаторРайонов);
	//
	//РезультатЗапросма = Запрос.Выполнить();
	//Если не РезультатЗапросма.Пустой() Тогда
	//	
	//	ПодключитьКСЛ();
	//	
	//	ВыборкаРайонов = РезультатЗапросма.Выбрать();
	//	Пока ВыборкаРайонов.Следующий() Цикл
	//		
	//		ВыборкаВершин = ВыборкаРайонов.Вершины.Выбрать();
	//		
	//		Полигон = КСЛ.ГрафическийИнтерфейс_Карты_Полигон();
	//		Полигон.Цвет = "96," + ВыборкаРайонов.Цвет.Получить();
	//		
	//		Пока ВыборкаВершин.Следующий() Цикл
	//			
	//			Геоточка = КСЛ.МодельДанных_ГеоТочка();
	//			Геоточка.Широта = ВыборкаВершин.Широта;
	//			Геоточка.Долгота = ВыборкаВершин.Долгота;
	//			
	//			Полигон.Вершины.Добавить(Геоточка);
	//		КонецЦикла;
	//		
	//		ПолеКарты.ДобавитьОбъект(Полигон);
	//		
	//		Полигоны.Добавить(Полигон);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

//* Транспорт *//

//Добавление транспорта в выбранные
//
//  Параметры:
//    пТранспорт - список транспорта
//                 <Соответствие
//                   ключ - строка таблицы ОсновнаяТаблицаТранспорта
//                   Значение - <Булево> - всегда Истина
//    ТипДобавления - <Строка>
//                      "ПоФильтру" - добавлены по фильтру, настройки фильтра не трогаются
//                      "ВРучную" - добавлены вручную, корректируются настройки фильтра
//
Процедура ДобавитьТранспортВВыбранные(Знач пТранспорт, ТипДобавления = "ПоФильтру") Экспорт
	
	Если ТипЗнч(пТранспорт) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пТранспорт, Истина);
		пТранспорт = Врем;
	КонецЕсли;
	
	Если пТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийТранспорт Из пТранспорт Цикл
		
		ВыбранныйТранспорт.Вставить(ТекущийТранспорт.Ключ, Истина);
	КонецЦикла;
	
	КорректироватьСуммарнуюИнформациюПоТранспорту(пТранспорт, "Выделенных", "Добавить");
	
	ДобавитьТранспортВСтатистику("Выбранные", пТранспорт, ТипДобавления);
	#Если Клиент Тогда
	Оповестить("ДобавленВыбранныйТранспорт", пТранспорт, ЭтотОбъект);
	#КонецЕсли
	Если ТипДобавления = "ВРучную" Тогда
		
		//ВыбранныеЗаказыПоПредыдущемуФильтру = ПолучитьЗаказыПоФильтру("Выбранные", "Заказы");
		ВыбранныйТранспортПоПредыдущемуФильтру = ПолучитьТранспортПоФильтру("Выбранные", "Заказы");
	КонецЕсли;
	
КонецПроцедуры

//Удаление тарнспорта из выбранных
//
//  Параметры:
//    пТранспорт - список транспорта
//                 <Соответствие
//                   ключ - строка таблицы ОсновнаяТаблицаТранспорта
//                   Значение - <Булево> - всегда Истина
//
Процедура УдалитьТранспортИзВыбранных(Знач пТранспорт) Экспорт
	
	Если ТипЗнч(пТранспорт) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пТранспорт, Истина);
		пТранспорт = Врем;
	КонецЕсли;
	
	Если пТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КорректироватьСуммарнуюИнформациюПоТранспорту(пТранспорт, "Выделенных", "Удалить");
	
	УдалитьТранспортИзСтатистики("Выбранные", пТранспорт);
	#Если Клиент Тогда
	Оповестить("УдаленВыбранныйТранспорт", пТранспорт, ЭтотОбъект);
	#КонецЕсли
	Для каждого ТекущийТранспорт Из пТранспорт Цикл
		
		ВыбранныйТранспорт.Удалить(ТекущийТранспорт.Ключ);
	КонецЦикла;
	
КонецПроцедуры

//Добавление транспорта в рабочую коллекцию
//
//  Параметры:
//    пТранспорт - список транспорта, если не указан, то берётся список ОтображаемыйТранспорт
//                 <Соответствие
//                   ключ - строка таблицы ОсновнаяТаблицаТранспорта
//                   Значение - <Булево> - всегда Истина
//    ТипДобавления - <Строка>
//                      "ПоФильтру" - добавлены по фильтру, настройки фильтра не трогаются
//                      "ВРучную" - добавлены вручную, корректируются настройки фильтра
//
Процедура ДобавитьТранспортВОтображаемый(Знач пТранспорт = Неопределено, ТипДобавления = "ПоФильтру") Экспорт
	
	ДобавлятьВСписок = Истина;
	Если пТранспорт = Неопределено Тогда
		
		пТранспорт = ОтображаемыйТранспорт;
		ДобавлятьВСписок = Ложь;
	КонецЕсли;
	
	Если пТранспорт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пТранспорт) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пТранспорт, Истина);
		пТранспорт = Врем;
	КонецЕсли;
	
	Если пТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавлятьВСписок Тогда
		
		Для каждого ТекущийТранспорт из пТранспорт Цикл
			
			ОтображаемыйТранспорт.Вставить(ТекущийТранспорт.Ключ, Истина);
		КонецЦикла;
	КонецЕсли;
	
	КорректироватьСуммарнуюИнформациюПоТранспорту(пТранспорт, "Итоговых", "Добавить");
	
	ДобавитьТранспортВСтатистику("Основные", пТранспорт, ТипДобавления);
	#Если Клиент Тогда
	Оповестить("ДобавленТранспорт", пТранспорт, ЭтотОбъект);
	#КонецЕсли
	Если ТипДобавления = "ВРучную" Тогда
		
		//ОтображаемыеЗаказыПоПредыдущемуФильтру = ПолучитьЗаказыПоФильтру("Основные", "Заказы");
		ОтображаемыйТранспортПоПредыдущемуФильтру = ПолучитьТранспортПоФильтру("Основные", "Заказы");
	КонецЕсли;
	
КонецПроцедуры

//Удаление из рабочей коллекции
//
//  Параметры:
//    пТранспорт - список транспорта, если не указан, то берётся список ОтображаемыйТранспорт
//                 <Соответствие
//                   ключ - строка таблицы ОсновнаяТаблицаТранспорта
//                   Значение - <Булево> - всегда Истина
//
Процедура УдалитьТранспортИзОтображаемого(Знач пТранспорт = Неопределено) Экспорт
	
	ПолнаяОчистка = Ложь;
	Если пТранспорт = Неопределено Тогда
		
		пТранспорт = ОтображаемыйТранспорт;
		ПолнаяОчистка = Истина;
	КонецЕсли;
	
	Если пТранспорт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пТранспорт) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пТранспорт, Истина);
		пТранспорт = Врем;
	КонецЕсли;
	
	Если пТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КорректироватьСуммарнуюИнформациюПоТранспорту(пТранспорт, "Полная", "Удалить");
	
	УдалитьТранспортИзСтатистики("Основные", пТранспорт);
	УдалитьТранспортИзСтатистики("Выбранные", пТранспорт);
	#Если Клиент Тогда
	Оповестить("УдаленТранспорт", пТранспорт, ЭтотОбъект);
	#КонецЕсли
	Для каждого ТекущийТранспорт Из пТранспорт Цикл
		
		Если не ПолнаяОчистка Тогда
			ОтображаемыйТранспорт.Удалить(ТекущийТранспорт.Ключ);
		КонецЕсли;
		ВыбранныйТранспорт.Удалить(ТекущийТранспорт.Ключ);
	КонецЦикла;
	
	Если ПолнаяОчистка Тогда
		
		ОтображаемыйТранспорт.Очистить();
	КонецЕсли;
	
КонецПроцедуры


//** Отображение информации **//


//Корректировка суммарной информации на заказ(ы)
//
//  Параметры:
//    пЗаказы - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаЗаказов
//              <Соответствие
//                ключ - строка таблицы ОсновнаяТаблицаЗаказов
//                Значение - <Булево> - всегда Истина
//    Режим - <Строка>
//              "Выделенных" - корректируется информация по выбранным заказам
//              "Итоговых" - корректировка информации по всем отображаемым заказам
//              "Полная" - корретировка всей суммарной информации
//    Вид - <Строка>
//            "Добавить" - корректировка в плюс
//            "Удалить" - корректировка в минус
//
Процедура КорректироватьСуммарнуюИнформацию(Знач пЗаказы, Режим, Вид) Экспорт
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	Знак = ?(Вид = "Добавить", 1, -1);
	
	Для каждого ОсновнойКлючЗначение Из пЗаказы Цикл
		
		Заказ = ОсновнойКлючЗначение.Ключ;
		ЗаказВыделен = (ВыбранныеЗаказы[Заказ] = Истина);
		
		//Количество, вес объём заказов
		Если Режим = "Выделенных" или (ЗаказВыделен и Режим = "Полная") Тогда
			
			СуммарныеХарактеристики.ВыделеноЗаказов = СуммарныеХарактеристики.ВыделеноЗаказов + Знак;
			СуммарныеХарактеристики.ВыделеноВесЗаказов = СуммарныеХарактеристики.ВыделеноВесЗаказов + Знак * Заказ.Вес;
			СуммарныеХарактеристики.ВыделеноОбъемЗаказов = СуммарныеХарактеристики.ВыделеноОбъемЗаказов + Знак * Заказ.Объем;
			СуммарныеХарактеристики.ВыделеноКоличествоМестВЗаказах = СуммарныеХарактеристики.ВыделеноКоличествоМестВЗаказах + Знак * Заказ.Места;
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноГрузоотправителиЗаказов, Заказ.Грузоотправитель);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноГрузоотправителиЗаказов, Заказ.Грузоотправитель, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Режим = "Итоговых" или Режим = "Полная" Тогда
			
			СуммарныеХарактеристики.ВсегоЗаказов = СуммарныеХарактеристики.ВсегоЗаказов + Знак;
			СуммарныеХарактеристики.ВсегоВесЗаказов = СуммарныеХарактеристики.ВсегоВесЗаказов + Знак * Заказ.Вес;;
			СуммарныеХарактеристики.ВсегоОбъемЗаказов = СуммарныеХарактеристики.ВсегоОбъемЗаказов + Знак * Заказ.Объем;
			СуммарныеХарактеристики.ВсегоКоличествоМестВЗаказах = СуммарныеХарактеристики.ВсегоКоличествоМестВЗаказах + Знак * Заказ.Места;
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоГрузоотправителиЗаказов, Заказ.Грузоотправитель);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоГрузоотправителиЗаказов, Заказ.Грузоотправитель, Истина);
			КонецЕсли;
		КонецЕсли;
		
		//Категории заказов
		Для каждого КатегорияЗаказа Из Заказ.КатегорииЗаказа Цикл
			
			Если ЗаказВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
				
				Если Вид = "Добавить" Тогда
					УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноКатегорийЗаказов, КатегорияЗаказа);
				Иначе
					УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноКатегорийЗаказов, КатегорияЗаказа, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если Режим = "Итоговых" или Режим = "Полная" Тогда
				
				Если Вид = "Добавить" Тогда
					УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоКатегорийЗаказов, КатегорияЗаказа);
				Иначе
					УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоКатегорийЗаказов, КатегорияЗаказа, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//Категории доставок 2014
		КатегорияДоставки2014 = Заказ.КатегорияДоставки2014;
			
		Если ЗаказВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноКатегорийДоставок2014, КатегорияДоставки2014);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноКатегорийДоставок2014, КатегорияДоставки2014, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Режим = "Итоговых" или Режим = "Полная" Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоКатегорийДоставок2014, КатегорияДоставки2014);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоКатегорийДоставок2014, КатегорияДоставки2014, Истина);
			КонецЕсли;
		КонецЕсли;
		
		// признаки МО
		ПризнакМО = Заказ.ПризнакМО;
			
		Если ЗаказВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноПризнаковМО, ПризнакМО);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноПризнаковМО, ПризнакМО, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Режим = "Итоговых" или Режим = "Полная" Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоПризнаковМО, ПризнакМО);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоПризнаковМО, ПризнакМО, Истина);
			КонецЕсли;
		КонецЕсли;
		
		
		//интернет магазины
		ИнтернетМагазин = Заказ.ИнтернетМагазин;
			
		Если ЗаказВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноИнтернетМагазинов, ИнтернетМагазин);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноИнтернетМагазинов, ИнтернетМагазин, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Режим = "Итоговых" или Режим = "Полная" Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоИнтернетМагазинов, ИнтернетМагазин);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоИнтернетМагазинов, ИнтернетМагазин, Истина);
			КонецЕсли;
		КонецЕсли;
		
		
		//Час доставки с
		ЧасДоставкиС = Заказ.ЧасДоставкиС;
			
		Если ЗаказВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноЧасовДоставокС, ЧасДоставкиС);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноЧасовДоставокС, ЧасДоставкиС, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Режим = "Итоговых" или Режим = "Полная" Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоЧасовДоставокС, ЧасДоставкиС);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоЧасовДоставокС, ЧасДоставкиС, Истина);
			КонецЕсли;
		КонецЕсли;
		
		//Час доставки по
		ЧасДоставкиПо = Заказ.ЧасДоставкиПо;
			
		Если ЗаказВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноЧасовДоставокПо, ЧасДоставкиПо);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноЧасовДоставокПо, ЧасДоставкиПо, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Режим = "Итоговых" или Режим = "Полная" Тогда
			
			Если Вид = "Добавить" Тогда
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоЧасовДоставокПо, ЧасДоставкиПо);
			Иначе
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоЧасовДоставокПо, ЧасДоставкиПо, Истина);
			КонецЕсли;
		КонецЕсли;
		
		
		
		//Категории транспорта
		Для каждого КатегорияТранспорт Из Заказ.КатегорииТранспорта Цикл
			
			Если ЗаказВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
				
				Если Вид = "Добавить" Тогда
					УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноКатегорийТранспорта, КатегорияТранспорт);
				Иначе
					УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноКатегорийТранспорта, КатегорияТранспорт, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если Режим = "Итоговых" или Режим = "Полная" Тогда
				
				Если Вид = "Добавить" Тогда
					УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоКатегорийТранспорта, КатегорияТранспорт);
				Иначе
					УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоКатегорийТранспорта, КатегорияТранспорт, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Районы алресов
		Для каждого РайонАдреса Из Заказ.РайоныАдреса Цикл
			
			Если ЗаказВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
				
				Если Вид = "Добавить" Тогда
					УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноРайоновЗаказов, РайонАдреса);
				Иначе
					УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноРайоновЗаказов, РайонАдреса, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если Режим = "Итоговых" или Режим = "Полная" Тогда
				
				Если Вид = "Добавить" Тогда
					УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоРайоновЗаказов, РайонАдреса);
				Иначе
					УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоРайоновЗаказов, РайонАдреса, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//Корректировка суммарной информации на транспорт
//
//  Параметры:
//    пТранспорт - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаТранспорта
//                 <Соответствие
//                   ключ - строка таблицы ОсновнаяТаблицаТранспорта
//                   Значение - <Булево> - всегда Истина
//    Режим - <Строка>
//              "Выделенных" - корректируется информация по выбранному трансспорту
//              "Итоговых" - корректировка информации по транспорту
//              "Полная" - корретировка всей суммарной информации
//    Вид - <Строка>
//            "Добавить" - корректировка в плюс
//            "Удалить" - корректировка в минус
//
Процедура КорректироватьСуммарнуюИнформациюПоТранспорту(Знач пТранспорт, Режим, Вид) Экспорт
	
	Если ТипЗнч(пТранспорт) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пТранспорт, Истина);
		пТранспорт = Врем;
	КонецЕсли;
	
	ИнтервалВесовОбъемовНарушен = Ложь;
	ИнтервалВесовОбъемовВыбранныхНарушен = Ложь;
	
	Для каждого ТекущийТранспорт Из пТранспорт Цикл
		
		ТранспортВыделен = (ВыбранныйТранспорт[ТекущийТранспорт.Ключ] = Истина);
		
		//Грузоподъемность, грузовместимость выделенных
		Если Режим = "Выделенных" или (ТранспортВыделен и Режим = "Полная") Тогда
			
			Если Вид = "Добавить" Тогда
				
				СуммарныеХарактеристики.ВыделеноТранспорта = СуммарныеХарактеристики.ВыделеноТранспорта + 1;
				
				Если ЗначениеЗаполнено(СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта) Тогда
					СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта = Мин(СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта, ТекущийТранспорт.Ключ.Грузоподъемность);
				Иначе
					СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта = ТекущийТранспорт.Ключ.Грузоподъемность;
				КонецЕсли;
				СуммарныеХарактеристики.ВыделеноМаксГрузоподъемностьТранспорта = Макс(СуммарныеХарактеристики.ВыделеноМаксГрузоподъемностьТранспорта, ТекущийТранспорт.Ключ.Грузоподъемность);
				
				Если ЗначениеЗаполнено(СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта) Тогда
					СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта = Мин(СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта, ТекущийТранспорт.Ключ.Грузовместимость);
				Иначе
					СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта = ТекущийТранспорт.Ключ.Грузовместимость;
				КонецЕсли;
				СуммарныеХарактеристики.ВыделеноМаксГрузовместимостьТранспорта = Макс(СуммарныеХарактеристики.ВыделеноМаксГрузовместимостьТранспорта, ТекущийТранспорт.Ключ.Грузовместимость);
				
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноВидовТранспорта, ТекущийТранспорт.Ключ.Вид);
				
			Иначе
				
				СуммарныеХарактеристики.ВыделеноТранспорта = СуммарныеХарактеристики.ВыделеноТранспорта - 1;
				
				ИнтервалВесовОбъемовВыбранныхНарушен = ИнтервалВесовОбъемовВыбранныхНарушен
				                                       или СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта <= ТекущийТранспорт.Ключ.Грузоподъемность
				                                       или СуммарныеХарактеристики.ВыделеноМаксГрузоподъемностьТранспорта >= ТекущийТранспорт.Ключ.Грузоподъемность
				                                       или СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта <= ТекущийТранспорт.Ключ.Грузовместимость
				                                       или СуммарныеХарактеристики.ВыделеноМаксГрузовместимостьТранспорта >= ТекущийТранспорт.Ключ.Грузовместимость;
				
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноВидовТранспорта, ТекущийТранспорт.Ключ.Вид, Истина);
			КонецЕсли;
		КонецЕсли;
		
		//Грузоподъемность, грузовместимость всего
		Если Режим = "Итоговых" или Режим = "Полная" Тогда
			
			Если Вид = "Добавить" Тогда
				
				СуммарныеХарактеристики.ВсегоТранспорта = СуммарныеХарактеристики.ВсегоТранспорта + 1;
				
				Если ЗначениеЗаполнено(СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта) Тогда
					СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта = Мин(СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта, ТекущийТранспорт.Ключ.Грузоподъемность);
				Иначе
					СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта = ТекущийТранспорт.Ключ.Грузоподъемность;
				КонецЕсли;
				СуммарныеХарактеристики.ВсегоМаксГрузоподъемностьТранспорта = Макс(СуммарныеХарактеристики.ВсегоМаксГрузоподъемностьТранспорта, ТекущийТранспорт.Ключ.Грузоподъемность);
				
				Если ЗначениеЗаполнено(СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта) Тогда
					СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта = Мин(СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта, ТекущийТранспорт.Ключ.Грузовместимость);
				Иначе
					СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта = ТекущийТранспорт.Ключ.Грузовместимость;
				КонецЕсли;
				СуммарныеХарактеристики.ВсегоМаксГрузовместимостьТранспорта = Макс(СуммарныеХарактеристики.ВсегоМаксГрузовместимостьТранспорта, ТекущийТранспорт.Ключ.Грузовместимость);
				
				УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоВидовТранспорта, ТекущийТранспорт.Ключ.Вид);
				
			Иначе
				
				СуммарныеХарактеристики.ВсегоТранспорта = СуммарныеХарактеристики.ВсегоТранспорта - 1;
				
				ИнтервалВесовОбъемовНарушен = ИнтервалВесовОбъемовНарушен
				                              или СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта <= ТекущийТранспорт.Ключ.Грузоподъемность
				                              или СуммарныеХарактеристики.ВсегоМаксГрузоподъемностьТранспорта >= ТекущийТранспорт.Ключ.Грузоподъемность
				                              или СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта <= ТекущийТранспорт.Ключ.Грузовместимость
				                              или СуммарныеХарактеристики.ВсегоМаксГрузовместимостьТранспорта >= ТекущийТранспорт.Ключ.Грузовместимость;
				
				УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоВидовТранспорта, ТекущийТранспорт.Ключ.Вид, Истина);
			КонецЕсли;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорт Из ТекущийТранспорт.Ключ.КатегорииТранспорта Цикл
			
			Если ТранспортВыделен и (Режим = "Выделенных" или Режим = "Полная") Тогда
				
				Если Вид = "Добавить" Тогда
					УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноКатегорийТранспорта, КатегорияТранспорт);
				Иначе
					УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВыделеноКатегорийТранспорта, КатегорияТранспорт, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если Режим = "Итоговых" или Режим = "Полная" Тогда
				
				Если Вид = "Добавить" Тогда
					УвеличитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоКатегорийТранспорта, КатегорияТранспорт);
				Иначе
					УменьшитьКоличествоСсылок(СуммарныеХарактеристики.ВсегоКатегорийТранспорта, КатегорияТранспорт, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ИнтервалВесовОбъемовВыбранныхНарушен
	     или ИнтервалВесовОбъемовНарушен Тогда
		
		//Грузоподъемность, грузовместимость выделенных
		Если ИнтервалВесовОбъемовВыбранныхНарушен Тогда
			
			СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта = МаксимальноеЧисло;
			СуммарныеХарактеристики.ВыделеноМаксГрузоподъемностьТранспорта = 0;
			СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта = МаксимальноеЧисло;
			СуммарныеХарактеристики.ВыделеноМаксГрузовместимостьТранспорта = 0;
			
			Для каждого ТекущийТранспорт Из ВыбранныйТранспорт Цикл
				
				Если пТранспорт[ТекущийТранспорт.Ключ] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта = Мин(СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта, ТекущийТранспорт.Ключ.Грузоподъемность);
				СуммарныеХарактеристики.ВыделеноМаксГрузоподъемностьТранспорта = Макс(СуммарныеХарактеристики.ВыделеноМаксГрузоподъемностьТранспорта, ТекущийТранспорт.Ключ.Грузоподъемность);
				СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта = Мин(СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта, ТекущийТранспорт.Ключ.Грузовместимость);
				СуммарныеХарактеристики.ВыделеноМаксГрузовместимостьТранспорта = Макс(СуммарныеХарактеристики.ВыделеноМаксГрузовместимостьТранспорта, ТекущийТранспорт.Ключ.Грузовместимость);
			КонецЦикла;
			
			Если СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта = МаксимальноеЧисло Тогда
				СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта = 0;
			КонецЕсли;
			Если СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта = МаксимальноеЧисло Тогда
				СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта = 0;
			КонецЕсли;
		КонецЕсли;
		
		//Грузоподъемность, грузовместимость всего
		Если ИнтервалВесовОбъемовНарушен Тогда
			
			СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта = МаксимальноеЧисло;
			СуммарныеХарактеристики.ВсегоМаксГрузоподъемностьТранспорта = 0;
			СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта = МаксимальноеЧисло;
			СуммарныеХарактеристики.ВсегоМаксГрузовместимостьТранспорта = 0;
			
			Для каждого ТекущийТранспорт Из ОтображаемыйТранспорт Цикл
				
				Если пТранспорт[ТекущийТранспорт.Ключ] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта = Мин(СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта, ТекущийТранспорт.Ключ.Грузоподъемность);
				СуммарныеХарактеристики.ВсегоМаксГрузоподъемностьТранспорта = Макс(СуммарныеХарактеристики.ВсегоМаксГрузоподъемностьТранспорта, ТекущийТранспорт.Ключ.Грузоподъемность);
				СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта = Мин(СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта, ТекущийТранспорт.Ключ.Грузовместимость);
				СуммарныеХарактеристики.ВсегоМаксГрузовместимостьТранспорта = Макс(СуммарныеХарактеристики.ВсегоМаксГрузовместимостьТранспорта, ТекущийТранспорт.Ключ.Грузовместимость);
			КонецЦикла;
			
			Если СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта = МаксимальноеЧисло Тогда
				СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта = 0;
			КонецЕсли;
			Если СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта = МаксимальноеЧисло Тогда
				СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Полный расчет суммарной информации
//
Процедура ОбновитьСуммарнуюИнформацию() Экспорт
	
	КоличествоВсех = 0;
	ВесВсех = 0;
	ОбъемВсех = 0;
	КоличествоМестВоВсех = 0;
	ВсеГрузоотправители = Новый Соответствие;
	ВсеКатегорииЗаказов = Новый Соответствие;
	ВсеКатегорииДоставок2014 = Новый Соответствие;
	ВсеПризнакиМО = Новый Соответствие;
	ВсеИнтернетМагазины = Новый Соответствие;
	ВсеЧасыДоставокС = Новый Соответствие;
	ВсеЧасыДоставокПо = Новый Соответствие;
	ВсеКатегрииТранспорта = Новый Соответствие;
	ВсеРайоныАдресов = Новый Соответствие;
	ВесьТранспорт = 0;
	ВсеВиды = Новый Соответствие;
	ВсеМинГрузоподъемность = МаксимальноеЧисло;
	ВсеМаксГрузоподъемность = 0;
	ВсеМинГрузовместимость = МаксимальноеЧисло;
	ВсеМаксГрузовместимость = 0;
	
	КоличествоВыделенных = 0;
	ВесВыделенных = 0;
	ОбъемВыделенных = 0;
	КоличествоМестВВыделенных = 0;
	ВыделенныеГрузоотправители = Новый Соответствие;
	ВыделенныеКатегорииЗаказов = Новый Соответствие;
	ВыделенныеКатегорииДоставок2014 = Новый Соответствие;
	ВыделенныеПризнакиМО = Новый Соответствие;
	ВыделенныеИнтернетМагазины = Новый Соответствие;
	ВыделенныеЧасыДоставокС = Новый Соответствие;
	ВыделенныеЧасыДоставокПо = Новый Соответствие;
	ВыделенныеКатегрииТранспорта = Новый Соответствие;
	ВыделенныеРайоныАдресов = Новый Соответствие;
	ВыделенныйТранспорт = 0;
	ВыделенныеВиды = Новый Соответствие;
	ВыделенныеМинГрузоподъемность = МаксимальноеЧисло; // Навряди в местной доставке будет участвовать звездолёт :)
	ВыделенныеМаксГрузоподъемность = 0;
	ВыделенныеМинГрузовместимость = МаксимальноеЧисло; // Навряди в местной доставке будет участвовать звездолёт :)
	ВыделенныеМаксГрузовместимость = 0;
	
	//Заказы
	Для каждого ОсновнойКлючЗначение Из ОтображаемыеЗаказы Цикл
		
		Заказ = ОсновнойКлючЗначение.Ключ;
		
		//Количество, вес, объём заказов
		ЗаказВыделен = (ВыбранныеЗаказы[Заказ] = Истина);
		Если ЗаказВыделен Тогда
			
			КоличествоВыделенных = КоличествоВыделенных + 1;
			ВесВыделенных = ВесВыделенных + Заказ.Вес;
			ОбъемВыделенных = ОбъемВыделенных + Заказ.Объем;
			КоличествоМестВВыделенных = КоличествоМестВВыделенных + Заказ.Места;
			УвеличитьКоличествоСсылок(ВыделенныеГрузоотправители, Заказ.Грузоотправитель);
			УвеличитьКоличествоСсылок(ВыделенныеКатегорииДоставок2014, Заказ.КатегорияДоставки2014);
			УвеличитьКоличествоСсылок(ВыделенныеПризнакиМО, Заказ.ПризнакМО);
			УвеличитьКоличествоСсылок(ВыделенныеИнтернетМагазины, Заказ.ИнтернетМагазин);
			УвеличитьКоличествоСсылок(ВыделенныеЧасыДоставокС, Заказ.ЧасДоставкиС);
			УвеличитьКоличествоСсылок(ВыделенныеЧасыДоставокПо, Заказ.ЧасДоставкиПо);
		КонецЕсли;
		
		КоличествоВсех = КоличествоВсех + 1;
		ВесВсех = ВесВсех + Заказ.Вес;
		ОбъемВсех = ОбъемВсех + Заказ.Объем;
		КоличествоМестВоВсех = КоличествоМестВоВсех + Заказ.Места;
		УвеличитьКоличествоСсылок(ВсеКатегорииДоставок2014, Заказ.КатегорияДоставки2014);
		УвеличитьКоличествоСсылок(ВсеПризнакиМО, Заказ.ПризнакМО);
		УвеличитьКоличествоСсылок(ВыделенныеИнтернетМагазины, Заказ.ИнтернетМагазин);
		УвеличитьКоличествоСсылок(ВсеЧасыДоставокС, Заказ.ЧасДоставкиС);
		УвеличитьКоличествоСсылок(ВсеЧасыДоставокПо, Заказ.ЧасДоставкиПо);
		
		//Категории заказов
		Для каждого КатегорияЗаказа Из Заказ.КатегорииЗаказа Цикл
			
			Если ЗаказВыделен Тогда
				
				УвеличитьКоличествоСсылок(ВыделенныеКатегорииЗаказов, КатегорияЗаказа);
			КонецЕсли;
			
			УвеличитьКоличествоСсылок(ВсеКатегорииЗаказов, КатегорияЗаказа);
		КонецЦикла;
		
		//Категории транспорта
		Для каждого КатегорияТранспорт Из Заказ.КатегорииТранспорта Цикл
			
			Если ЗаказВыделен Тогда
				
				УвеличитьКоличествоСсылок(ВыделенныеКатегрииТранспорта, КатегорияТранспорт);
			КонецЕсли;
			
			УвеличитьКоличествоСсылок(ВсеКатегрииТранспорта, КатегорияТранспорт);
		КонецЦикла;
		
		//районы адресов
		Для каждого РайонАдреса Из Заказ.РайоныАдреса Цикл
			
			Если ЗаказВыделен Тогда
				
				УвеличитьКоличествоСсылок(ВыделенныеРайоныАдресов, РайонАдреса);
			КонецЕсли;
			
			УвеличитьКоличествоСсылок(ВсеРайоныАдресов, РайонАдреса);
		КонецЦикла;
	КонецЦикла;
	
	//Транспорт
	Для каждого КлючЗначение Из ОтображаемыйТранспорт Цикл
		
		ТекущийТранспорт = КлючЗначение.Ключ;
		
		ТранспортВыделен = (ВыбранныйТранспорт[ТекущийТранспорт] = Истина);
		Если ТранспортВыделен Тогда
			
			ВыделенныйТранспорт = ВыделенныйТранспорт + 1;
			ВыделенныеВиды.Вставить(ТекущийТранспорт.Вид, Истина);
			ВыделенныеМинГрузоподъемность = Мин(ВыделенныеМинГрузоподъемность, ТекущийТранспорт.Грузоподъемность);
			ВыделенныеМаксГрузоподъемность = Макс(ВыделенныеМаксГрузоподъемность, ТекущийТранспорт.Грузоподъемность);
			ВыделенныеМинГрузовместимость = Мин(ВыделенныеМинГрузовместимость, ТекущийТранспорт.Грузовместимость);
			ВыделенныеМаксГрузовместимость = Макс(ВыделенныеМаксГрузовместимость, ТекущийТранспорт.Грузовместимость);
		КонецЕсли;
		
		ВесьТранспорт = ВесьТранспорт + 1;
		ВсеВиды.Вставить(ТекущийТранспорт.Вид, Истина);
		ВсеМинГрузоподъемность = Мин(ВсеМинГрузоподъемность, ТекущийТранспорт.Грузоподъемность);
		ВсеМаксГрузоподъемность = Макс(ВсеМаксГрузоподъемность, ТекущийТранспорт.Грузоподъемность);
		ВсеМинГрузовместимость = Мин(ВсеМинГрузовместимость, ТекущийТранспорт.Грузовместимость);
		ВсеМаксГрузовместимость = Макс(ВсеМаксГрузовместимость, ТекущийТранспорт.Грузовместимость);
	КонецЦикла;
	
	Если ВыделенныеМинГрузоподъемность = МаксимальноеЧисло Тогда
		ВыделенныеМинГрузоподъемность = 0;
	КонецЕсли;
	
	Если ВыделенныеМинГрузовместимость = МаксимальноеЧисло Тогда
		ВыделенныеМинГрузовместимость = 0;
	КонецЕсли;
	
	Если ВсеМинГрузоподъемность = МаксимальноеЧисло Тогда
		ВсеМинГрузоподъемность = 0;
	КонецЕсли;
	
	Если ВсеМинГрузовместимость = МаксимальноеЧисло Тогда
		ВсеМинГрузовместимость = 0;
	КонецЕсли;
	
	//Выделено
	СуммарныеХарактеристики.ВыделеноЗаказов = КоличествоВыделенных;
	СуммарныеХарактеристики.ВыделеноВесЗаказов = ВесВыделенных;
	СуммарныеХарактеристики.ВыделеноОбъемЗаказов = ОбъемВыделенных;
	СуммарныеХарактеристики.ВыделеноКоличествоМестВЗаказах = КоличествоМестВВыделенных;
	СуммарныеХарактеристики.ВыделеноГрузоотправителиЗаказов = ВыделенныеГрузоотправители;
	СуммарныеХарактеристики.ВыделеноКатегорийЗаказов = ВыделенныеКатегорииЗаказов;
	СуммарныеХарактеристики.ВыделеноКатегорийДоставок2014 = ВыделенныеКатегорииДоставок2014;
	СуммарныеХарактеристики.ВыделеноПризнаковМО = ВыделенныеПризнакиМО;
	СуммарныеХарактеристики.ВыделеноИнтернетМагазинов = ВыделенныеИнтернетМагазины;
	СуммарныеХарактеристики.ВыделеноЧасовДоставокС = ВыделенныеЧасыДоставокС;
	СуммарныеХарактеристики.ВыделеноЧасовДоставокПо = ВыделенныеЧасыДоставокПо;
	СуммарныеХарактеристики.ВыделеноКатегорийТранспорта = ВыделенныеКатегрииТранспорта;
	СуммарныеХарактеристики.ВыделеноРайоновЗаказов = ВыделенныеРайоныАдресов;
	СуммарныеХарактеристики.ВыделеноТранспорта = ВыделенныйТранспорт;
	СуммарныеХарактеристики.ВыделеноВидовТранспорта = ВыделенныеВиды;
	СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта = ВыделенныеМинГрузоподъемность;
	СуммарныеХарактеристики.ВыделеноМаксГрузоподъемностьТранспорта = ВсеМаксГрузоподъемность;
	СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта = ВыделенныеМинГрузовместимость;
	СуммарныеХарактеристики.ВыделеноМаксГрузовместимостьТранспорта = ВсеМаксГрузовместимость;
	//Факт
	СуммарныеХарактеристики.ВсегоЗаказов = КоличествоВсех;
	СуммарныеХарактеристики.ВсегоВесЗаказов = ВесВсех;
	СуммарныеХарактеристики.ВсегоОбъемЗаказов = ОбъемВсех;
	СуммарныеХарактеристики.ВсегоКоличествоМестВЗаказах = КоличествоМестВоВсех;
	СуммарныеХарактеристики.ВсегоГрузоотправителиЗаказов = ВсеГрузоотправители;
	СуммарныеХарактеристики.ВсегоКатегорийЗаказов = ВсеКатегорииЗаказов;
	СуммарныеХарактеристики.ВсегоКатегорийДоставок2014 = ВсеКатегорииДоставок2014;	
	СуммарныеХарактеристики.ВсегоПризнаковМО = ВсеПризнакиМО;	
	СуммарныеХарактеристики.ВсегоИнтернетМагазинов = ВсеИнтернетМагазины;	
	СуммарныеХарактеристики.ВсегоЧасовДоставокС = ВсеЧасыДоставокС;	
	СуммарныеХарактеристики.ВсегоЧасовДоставокПо = ВсеЧасыДоставокПо;	
	
	СуммарныеХарактеристики.ВсегоКатегорийТранспорта = ВсеКатегрииТранспорта;
	СуммарныеХарактеристики.ВсегоРайоновЗаказов = ВсеРайоныАдресов;
	СуммарныеХарактеристики.ВсегоТранспорта = ВесьТранспорт;
	СуммарныеХарактеристики.ВсегоВидовТранспорта = ВсеВиды;
	СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта = ВсеМинГрузоподъемность;
	СуммарныеХарактеристики.ВсегоМаксГрузоподъемностьТранспорта = ВсеМаксГрузоподъемность;
	СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта = ВсеМинГрузовместимость;
	СуммарныеХарактеристики.ВсегоМаксГрузовместимостьТранспорта = ВсеМаксГрузовместимость;
	
	ОтправитьСуммарнуюИнформацию();
	
КонецПроцедуры

//Очистка суммарной информации
//
//  Параметры:
//    ОчищаемаяЧасть - <Строка> указывает какую информацию сбросить. Значение по умолчанию "Все"
//      "Заказы" - сбросить информацию по заказам
//      "Транспорт" - сбросить информацию по транспорту
//      "Все" - сбросить информацию по транспорту и заказам
//
Процедура ОчиститьСуммарнуюИнформацию(ОчищаемаяЧасть = "Все") Экспорт
	
	СброситьИнформациюПоЗаказам = (ОчищаемаяЧасть = "Заказы") или (ОчищаемаяЧасть = "Все");
	СброситьИнформациюПоТранспорту = (ОчищаемаяЧасть = "Транспорт") или (ОчищаемаяЧасть = "Все");
	
	СуммарныеХарактеристики = Новый Структура;
	//Выделено
	Если СброситьИнформациюПоЗаказам тогда
		
		СуммарныеХарактеристики.Вставить("ВыделеноЗаказов", 0);
		СуммарныеХарактеристики.Вставить("ВыделеноВесЗаказов", 0);
		СуммарныеХарактеристики.Вставить("ВыделеноОбъемЗаказов", 0);
		СуммарныеХарактеристики.Вставить("ВыделеноКоличествоМестВЗаказах", 0);
		СуммарныеХарактеристики.Вставить("ВыделеноГрузоотправителиЗаказов", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноКатегорийЗаказов", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноРайоновЗаказов", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноКатегорийДоставок2014", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноПризнаковМО", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноИнтернетМагазинов", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноЧасовДоставокС", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноЧасовДоставокПо", Новый Соответствие);
	КонецЕсли;
	
	Если СброситьИнформациюПоТранспорту Тогда
		
		СуммарныеХарактеристики.Вставить("ВыделеноТранспорта", 0);
		СуммарныеХарактеристики.Вставить("ВыделеноКатегорийТранспорта", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноВидовТранспорта", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВыделеноМинГрузоподъемностьТранспорта", 0);
		СуммарныеХарактеристики.Вставить("ВыделеноМаксГрузоподъемностьТранспорта", 0);
		СуммарныеХарактеристики.Вставить("ВыделеноМинГрузовместимостьТранспорта", 0);
		СуммарныеХарактеристики.Вставить("ВыделеноМаксГрузовместимостьТранспорта", 0);
	КонецЕсли;
	
	//Всего
	Если СброситьИнформациюПоЗаказам тогда
		
		СуммарныеХарактеристики.Вставить("ВсегоЗаказов", 0);
		СуммарныеХарактеристики.Вставить("ВсегоВесЗаказов", 0);
		СуммарныеХарактеристики.Вставить("ВсегоОбъемЗаказов", 0);
		СуммарныеХарактеристики.Вставить("ВсегоКоличествоМестВЗаказах", 0);
		СуммарныеХарактеристики.Вставить("ВсегоГрузоотправителиЗаказов", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоКатегорийЗаказов", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоРайоновЗаказов", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоКатегорийДоставок2014", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоПризнаковМО", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоИнтернетМагазинов", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоЧасовДоставокС", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоЧасовДоставокПо", Новый Соответствие);
	КонецЕсли;
	
	Если СброситьИнформациюПоТранспорту Тогда
		
		СуммарныеХарактеристики.Вставить("ВсегоТранспорта", 0);
		СуммарныеХарактеристики.Вставить("ВсегоКатегорийТранспорта", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоВидовТранспорта", Новый Соответствие);
		СуммарныеХарактеристики.Вставить("ВсегоМинГрузоподъемностьТранспорта", 0);
		СуммарныеХарактеристики.Вставить("ВсегоМаксГрузоподъемностьТранспорта", 0);
		СуммарныеХарактеристики.Вставить("ВсегоМинГрузовместимостьТранспорта", 0);
		СуммарныеХарактеристики.Вставить("ВсегоМаксГрузовместимостьТранспорта", 0);
	КонецЕсли;
	
КонецПроцедуры

//Возвращает суммарную информацию по заказам
//
Процедура ОтправитьСуммарнуюИнформацию() Экспорт
	
	Если ПриемникСуммарнойИнформации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Выделено
	ПриемникСуммарнойИнформации.ВыделеноЗаказов = "" + СуммарныеХарактеристики.ВыделеноЗаказов + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноВесЗаказов = Формат(СуммарныеХарактеристики.ВыделеноВесЗаказов / 1000, "ЧЦ=15; ЧДЦ=3; ЧН=0") + " (т)";
	ПриемникСуммарнойИнформации.ВыделеноОбъемЗаказов = Формат(СуммарныеХарактеристики.ВыделеноОбъемЗаказов, "ЧЦ=15; ЧДЦ=3; ЧН=0") + " (м куб)";
	ПриемникСуммарнойИнформации.ВыделеноКоличествоМестВЗаказах = Формат(СуммарныеХарактеристики.ВыделеноКоличествоМестВЗаказах, "ЧЦ=15; ЧДЦ=0; ЧН=0");
	ПриемникСуммарнойИнформации.ВыделеноГрузоотправителиЗаказов = "" + СуммарныеХарактеристики.ВыделеноГрузоотправителиЗаказов.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноКатегорийЗаказов = "" + СуммарныеХарактеристики.ВыделеноКатегорийЗаказов.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноКатегорийДоставок2014 = "" + СуммарныеХарактеристики.ВыделеноКатегорийДоставок2014.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноПризнаковМО = "" + СуммарныеХарактеристики.ВыделеноПризнаковМО.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноИнтернетМагазинов = "" + СуммарныеХарактеристики.ВыделеноИнтернетМагазинов.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноЧасовДоставокС = "" + СуммарныеХарактеристики.ВыделеноЧасовДоставокС.Количество() + " (вар)";
	ПриемникСуммарнойИнформации.ВыделеноЧасовДоставокПо = "" + СуммарныеХарактеристики.ВыделеноЧасовДоставокПо.Количество() + " (вар)";
	ПриемникСуммарнойИнформации.ВыделеноКатегорийТранспорта = "" + СуммарныеХарактеристики.ВыделеноКатегорийТранспорта.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноРайоновЗаказов = "" + СуммарныеХарактеристики.ВыделеноРайоновЗаказов.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноТранспорта = "" + СуммарныеХарактеристики.ВыделеноТранспорта + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноВидовТранспорта = "" + СуммарныеХарактеристики.ВыделеноВидовТранспорта.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВыделеноГрузоподъемностьТранспорта = " от " + СуммарныеХарактеристики.ВыделеноМинГрузоподъемностьТранспорта + " до " + СуммарныеХарактеристики.ВыделеноМаксГрузоподъемностьТранспорта + " (т)";
	ПриемникСуммарнойИнформации.ВыделеноГрузовместимостьТранспорта = " от " + СуммарныеХарактеристики.ВыделеноМинГрузовместимостьТранспорта + " до " + СуммарныеХарактеристики.ВыделеноМаксГрузовместимостьТранспорта + " (м куб)";
	//Всего
	ПриемникСуммарнойИнформации.ВсегоЗаказов = "" + СуммарныеХарактеристики.ВсегоЗаказов + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоВесЗаказов = Формат(СуммарныеХарактеристики.ВсегоВесЗаказов / 1000, "ЧЦ=15; ЧДЦ=3; ЧН=0") + " (т)";
	ПриемникСуммарнойИнформации.ВсегоОбъемЗаказов = Формат(СуммарныеХарактеристики.ВсегоОбъемЗаказов, "ЧЦ=15; ЧДЦ=3; ЧН=0") + " (м куб)";
	ПриемникСуммарнойИнформации.ВсегоКоличествоМестВЗаказах = Формат(СуммарныеХарактеристики.ВсегоКоличествоМестВЗаказах, "ЧЦ=15; ЧДЦ=0; ЧН=0");
	ПриемникСуммарнойИнформации.ВсегоГрузоотправителиЗаказов = "" + СуммарныеХарактеристики.ВсегоГрузоотправителиЗаказов.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоКатегорийЗаказов = "" + СуммарныеХарактеристики.ВсегоКатегорийЗаказов.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоКатегорийДоставок2014 = "" + СуммарныеХарактеристики.ВсегоКатегорийДоставок2014.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоПризнаковМО = "" + СуммарныеХарактеристики.ВсегоПризнаковМО.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоИнтернетМагазинов = "" + СуммарныеХарактеристики.ВсегоИнтернетМагазинов.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоЧасовДоставокС = "" + СуммарныеХарактеристики.ВсегоЧасовДоставокС.Количество() + " (вар)";
	ПриемникСуммарнойИнформации.ВсегоЧасовДоставокПо = "" + СуммарныеХарактеристики.ВсегоЧасовДоставокПо.Количество() + " (вар)";
	ПриемникСуммарнойИнформации.ВсегоКатегорийТранспорта = "" + СуммарныеХарактеристики.ВсегоКатегорийТранспорта.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоРайоновЗаказов = "" + СуммарныеХарактеристики.ВсегоРайоновЗаказов.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоТранспорта = "" + СуммарныеХарактеристики.ВсегоТранспорта + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоВидовТранспорта = "" + СуммарныеХарактеристики.ВсегоВидовТранспорта.Количество() + " (шт)";
	ПриемникСуммарнойИнформации.ВсегоГрузоподъемностьТранспорта = " от " + СуммарныеХарактеристики.ВсегоМинГрузоподъемностьТранспорта + " до " + СуммарныеХарактеристики.ВсегоМаксГрузоподъемностьТранспорта + " (т)";
	ПриемникСуммарнойИнформации.ВсегоГрузовместимостьТранспорта = " от " + СуммарныеХарактеристики.ВсегоМинГрузовместимостьТранспорта + " до " + СуммарныеХарактеристики.ВсегоМаксГрузовместимостьТранспорта + " (м куб)";
	
	ПриемникСуммарнойИнформации.ПриОбновленииСтатистики();
	
КонецПроцедуры

//** Работа с фильтрами **//


//* Общие *//

//Увеличивает количество элементов имеющих одинаковый признак на 1
//
//  Параметры:
//    Хэш - <Соответствие>
//            Ключ - произвольное значение
//            Значение - <Число> счётчик ключей
//    Ключ
//      ключ хэша
//
Процедура УвеличитьКоличествоСсылок(Хэш, Ключ)
	
	Количество = Хэш[Ключ];
	Если Количество = Неопределено Тогда
		Количество = 0;
	КонецЕсли;
	Количество = Количество + 1;
	Хэш.вставить(Ключ, Количество);
	
КонецПроцедуры

//Уменьшает количество элементов имеющих одинаковый признак на 1
//Если количество становится нулевым, то удаляет признак из хэша
//
//  Параметры:
//    Хэш - <Соответствие>
//            Ключ - произвольное значение
//            Значение - <Число> счётчик ключей
//    Ключ
//      ключ хэша
//
Процедура УменьшитьКоличествоСсылок(Хэш, Ключ, ОчищатьКлюч = Ложь)
	
	Количество = Хэш[Ключ];
	Если Количество <> Неопределено Тогда
		
		Количество = Количество - 1;
		Если ОчищатьКлюч и Количество = 0 Тогда
			Хэш.Удалить(Ключ);
		Иначе
			Хэш.вставить(Ключ, Количество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Получение отличий двух списков
//
//  Параметры:
//    Список1 - <Соответствие> Первый список элементов
//                ключ - Произвольное значение
//                Значение - <Булево> - всегда Истина
//    Список1 - <Соответствие> Второй список элементов
//                ключ - Произвольное значение
//                Значение - <Булево> - всегда Истина
//    ДобавленныеЭлементы - <Соответствие> Элементы второго списка отсутствующие в первом
//                            ключ - Произвольное значение
//                            Значение - <Булево> - всегда Истина
//    УдаленныеЭлементы - <Соответствие> Элементы первого списка отсутствующие во втором списке
//                          ключ - Произвольное значение
//                          Значение - <Булево> - всегда Истина
//
Процедура ПолучитьРазличияСписков(Знач Список1, Знач Список2, ДобавленныеЭлементы, УдаленныеЭлементы) Экспорт
	
	//Добавляемые заказы
	ДобавленныеЭлементы = Новый Соответствие;
	Для каждого КлючЗначение Из Список2 Цикл
		
		Если Список1[КлючЗначение.Ключ] = Неопределено Тогда
			ДобавленныеЭлементы.Вставить(КлючЗначение.Ключ, Истина);
		КонецЕсли;
	КонецЦикла;
	
	//Удаляемые заказы
	УдаленныеЭлементы = Новый Соответствие;
	Для каждого КлючЗначение Из Список1 Цикл
		
		Если Список2[КлючЗначение.Ключ] = Неопределено Тогда
			УдаленныеЭлементы.Вставить(КлючЗначение.Ключ, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Получение пересечения двух списков
//
//  Параметры:
//    Список1 - <Соответствие> Первый список элементов
//                ключ - Произвольное значение
//                Значение - <Булево> - всегда Истина
//    Список1 - <Соответствие> Второй список элементов
//                ключ - Произвольное значение
//                Значение - <Булево> - всегда Истина
//    Элементы - <Соответствие> Элементы второго списка имеющиеся в первом
//                 ключ - Произвольное значение
//                 Значение - <Булево> - всегда Истина
//
Процедура ПолучитьПересеченияСписков(Знач Список1, Знач Список2, Элементы) Экспорт
	
	Элементы = Новый Соответствие;
	Для каждого КлючЗначение Из Список2 Цикл
		
		Если Список1[КлючЗначение.Ключ] = Истина Тогда
			Элементы.Вставить(КлючЗначение.Ключ, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Возвращает копию списка
//
//  Параметры:
//    Список - <Соответствие>
//
//  Возвращаемое значение:
//    <Соответствие>
//
Функция ПолучитьКопиюСписка(Список) Экспорт
	
	Результат = Новый Соответствие;
	
	Для каждого КлючЗначение Из Список Цикл
		
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Инициализирует фильтры, статистику и отображаемые, выбранные элементы
//
//  Параметры:
//    ИнициализируемаяЧасть - <Строка> указывает часть фильтра для инициализации. Значение по умолчанию "Все".
//      "Заказы" - инициализировать заказы
//      "Транспорт" - инициализировать транспорт
//      "Все" - инициализировать фильтр полностью
//
Процедура ИнициализироватьФильтры(ИнициализируемаяЧасть = "Все") Экспорт
	
	ИнициализироватьЗаказы = (ИнициализируемаяЧасть = "Заказы") или (ИнициализируемаяЧасть = "Все");
	ИнициализироватьТранспорт = (ИнициализируемаяЧасть = "Транспорт") или (ИнициализируемаяЧасть = "Все");
	
	//Инициализация хэша
	//Заказы
	Если ИнициализироватьЗаказы Тогда
		
		Хэши.Грузоотправители.Очистить();
		Хэши.Грузоотправители.Вставить("БезГрузоотправителя", Новый Массив);
		Хэши.РайоныАдресов.Очистить();
		Хэши.РайоныАдресов.Вставить("БезРайонов", Новый Массив);
		Хэши.КатегорииЗаказов.Очистить();
		Хэши.КатегорииЗаказов.Вставить("БезКатегорийЗаказов", Новый Массив);
		Хэши.ЗаказыПоКатегориямТранспорта.Очистить();
		Хэши.ЗаказыПоКатегориямТранспорта.Вставить("БезКатегорийТранспорта", Новый Массив);
		Хэши.КатегорииДоставок2014.Очистить();
		Хэши.КатегорииДоставок2014.Вставить("БезКатегорийДоставок2014", Новый Массив);
		Хэши.ПризнакиМО.Очистить();
		Хэши.ПризнакиМО.Вставить("БезПризнаковМО", Новый Массив);		
		Хэши.ИнтернетМагазины.Очистить();
		Хэши.ИнтернетМагазины.Вставить("БезИнтернетМагазинов", Новый Массив);		
		Хэши.ЧасыДоставокС.Очистить();
		Хэши.ЧасыДоставокС.Вставить("БезЧасовДоставкиС", Новый Массив);
		Хэши.ЧасыДоставокПо.Очистить();
		Хэши.ЧасыДоставокПо.Вставить("БезЧасовДоставкиПо", Новый Массив);
	КонецЕсли;
	
	//транчспорт
	Если ИнициализироватьТранспорт Тогда
		
		Хэши.ВидыТранспорта.Очистить();
		Хэши.ВидыТранспорта.Вставить("БезВидовТранспорта", Новый Массив);
		Хэши.ТранспортПоКатегориямТранспорта.Очистить();
		Хэши.ТранспортПоКатегориямТранспорта.Вставить("БезКатегорийТранспорта", Новый Массив);
		Хэши.РайоныТранспорта.Очистить();
		Хэши.РайоныТранспорта.Вставить("БезРайонов", Новый Массив);
	КонецЕсли;
	
	//Инициализация фильтра
	НовыйФильтрОтображаемыхЭлементов = СоздатьФильтр();
	НовыйФильтрВыбранныхЭлементов = СоздатьФильтр();
	
	Если (ИнициализироватьЗаказы и (не ИнициализироватьТранспорт))
	     или ((не ИнициализироватьЗаказы) и ИнициализироватьТранспорт) Тогда
		
		КопироватьФильтр(ФильтрОтображаемыхЭлементов, НовыйФильтрОтображаемыхЭлементов);
		КопироватьФильтр(ФильтрВыбранныхЭлементов, НовыйФильтрВыбранныхЭлементов);
	КонецЕсли;
	
	ФильтрОтображаемыхЭлементов = НовыйФильтрОтображаемыхЭлементов;
	ФильтрВыбранныхЭлементов = НовыйФильтрВыбранныхЭлементов;
	
	//Заказы
	Если ИнициализироватьЗаказы Тогда
		
		ФильтрОтображаемыхЭлементов.МинимальныйВес = МаксимальноеЧисло;
		ФильтрОтображаемыхЭлементов.МинимальныйОбъем = МаксимальноеЧисло;
		
		ФильтрОтображаемыхЭлементов.БезГрузоотправителя = Истина;
		ФильтрОтображаемыхЭлементов.БезКатегорийЗаказов = Истина;
		ФильтрОтображаемыхЭлементов.БезРайонов = Истина;
		
		ФильтрВыбранныхЭлементов.ЛюбойВес = Истина;
		ФильтрВыбранныхЭлементов.ЛюбойОбъем = Истина;
		ФильтрВыбранныхЭлементов.ЛюбоеКоличествоМест = Истина;
		ФильтрВыбранныхЭлементов.ЛюбойГрузоотправитель = Истина;
		ФильтрВыбранныхЭлементов.ЛюбойРайон = Истина;
		ФильтрВыбранныхЭлементов.ЛюбаяКатегория = Истина;
		ФильтрВыбранныхЭлементов.ЛюбаяКатегория2014 = Истина;
		ФильтрВыбранныхЭлементов.ЛюбойПризнакМО = Истина;
		ФильтрВыбранныхЭлементов.ЛюбойИнтернетМагазин = Истина;
		ФильтрВыбранныхЭлементов.ЛюбойЧасДоставкиС = Истина;
		ФильтрВыбранныхЭлементов.ЛюбойЧасДоставкиПо = Истина;
	КонецЕсли;
	
	//Транспорт
	Если ИнициализироватьТранспорт Тогда
		
		ФильтрОтображаемыхЭлементов.МинимальнаяГрузоподъемность = МаксимальноеЧисло;
		ФильтрОтображаемыхЭлементов.МинимальнаяГрузовместимость = МаксимальноеЧисло;
		
		ФильтрОтображаемыхЭлементов.БезВидовТранспорта = Истина;
		ФильтрОтображаемыхЭлементов.БезКатегорийТранспорта = Истина;
		
		ФильтрВыбранныхЭлементов.ЛюбаяГрузоподъемность = Истина;
		ФильтрВыбранныхЭлементов.ЛюбаяГрузовместимость = Истина;
		ФильтрВыбранныхЭлементов.ЛюбойВидТранспорта = Истина;
		ФильтрВыбранныхЭлементов.ЛюбаяКатегорияТранспорта = Истина;
	КонецЕсли;
	
	//Инициализация статистики
	СтатистикаЭлементов = СоздатьОбъектСтатистики();
	СтатистикаОтображаемыхЭлементов = СоздатьОбъектСтатистики();
	СтатистикаВыбранныхЭлементов = СоздатьОбъектСтатистики();
	
	Если ИнициализироватьЗаказы Тогда
		
		ОтображаемыеЗаказы = Новый Соответствие;
		ОтображаемыеЗаказыПоПредыдущемуФильтру = Новый Соответствие;
		ВыбранныеЗаказы = Новый Соответствие;
		ВыбранныеЗаказыПоПредыдущемуФильтру = Новый Соответствие;
	КонецЕсли;
	
	Если ИнициализироватьТранспорт Тогда
		
		ОтображаемыйТранспорт = Новый Соответствие;
		ОтображаемыйТранспортПоПредыдущемуФильтру = Новый Соответствие;
		ВыбранныйТранспорт = Новый Соответствие;
		ВыбранныйТранспортПоПредыдущемуФильтру = Новый Соответствие;
	КонецЕсли;
	
	
	//Заказы
	
	
	Если ИнициализироватьЗаказы Тогда
		
		Для каждого Заказ Из ОсновнаяТаблицаЗаказов Цикл
			
			ОтображаемыеЗаказы.Вставить(Заказ, Истина);
			ОтображаемыеЗаказыПоПредыдущемуФильтру.Вставить(Заказ, Истина);
			
			//Вес, Объём, КоличествоМест
			ФильтрОтображаемыхЭлементов.МинимальныйВес = Мин(ФильтрОтображаемыхЭлементов.МинимальныйВес, Заказ.Вес);
			ФильтрОтображаемыхЭлементов.МаксимальныйВес = Макс(ФильтрОтображаемыхЭлементов.МаксимальныйВес, Заказ.Вес);
			ФильтрОтображаемыхЭлементов.МинимальныйОбъем = Мин(ФильтрОтображаемыхЭлементов.МинимальныйОбъем, Заказ.Объем);
			ФильтрОтображаемыхЭлементов.МаксимальныйОбъем = Макс(ФильтрОтображаемыхЭлементов.МаксимальныйОбъем, Заказ.Объем);
			ФильтрОтображаемыхЭлементов.МинимальноеКоличествоМест = Мин(ФильтрОтображаемыхЭлементов.МинимальноеКоличествоМест, Заказ.Места);
			ФильтрОтображаемыхЭлементов.МаксимальноеКоличествоМест = Макс(ФильтрОтображаемыхЭлементов.МаксимальноеКоличествоМест, Заказ.Места);
				
			//Грузоотправители
			Если ЗначениеЗаполнено(Заказ.Грузоотправитель) Тогда
				
				ЗначениеХэша = Хэши.Грузоотправители[Заказ.Грузоотправитель];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.Грузоотправители.Вставить(Заказ.Грузоотправитель, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
				
			Иначе
				
				ЗначениеХэша = Хэши.Грузоотправители["БезГрузоотправителя"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
			
			//категории заказов
			Для каждого КатегорияЗаказа Из Заказ.КатегорииЗаказа Цикл
				
				ЗначениеХэша = Хэши.КатегорииЗаказов[КатегорияЗаказа];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.КатегорииЗаказов.Вставить(КатегорияЗаказа, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
			КонецЦикла;
			
			Если Заказ.КатегорииЗаказа.Количество() = 0 Тогда
				
				ЗначениеХэша = Хэши.КатегорииЗаказов["БезКатегорийЗаказов"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
			
			//категории доставок 2014
			Если ЗначениеЗаполнено(Заказ.КатегорияДоставки2014) Тогда
				
				ЗначениеХэша = Хэши.КатегорииДоставок2014[Заказ.КатегорияДоставки2014];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
				
			Иначе
				
				ЗначениеХэша = Хэши.КатегорииДоставок2014["БезКатегорийДоставок2014"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
			
			//признаки МО
			Если ЗначениеЗаполнено(Заказ.ПризнакМО) Тогда
				
				ЗначениеХэша = Хэши.ПризнакиМО[Заказ.ПризнакМО];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.ПризнакиМО.Вставить(Заказ.ПризнакМО, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
				
			Иначе
				
				ЗначениеХэша = Хэши.ПризнакиМО["БезПризнаковМО"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
			
			
			//интернет магазины
			Если ЗначениеЗаполнено(Заказ.ИнтернетМагазин) Тогда
				
				ЗначениеХэша = Хэши.ИнтернетМагазины[Заказ.ИнтернетМагазин];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
				
			Иначе
				
				ЗначениеХэша = Хэши.ИнтернетМагазины["БезИнтернетМагазинов"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
			
			
			//часы доставок с
			Если ЗначениеЗаполнено(Заказ.ЧасДоставкиС) Тогда
				
				ЗначениеХэша = Хэши.ЧасыДоставокС[Заказ.ЧасДоставкиС];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
				
			Иначе
				
				ЗначениеХэша = Хэши.ЧасыДоставокС["БезЧасовДоставкиС"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
			
			
			//часы доставок по
			Если ЗначениеЗаполнено(Заказ.ЧасДоставкиПо) Тогда
				
				ЗначениеХэша = Хэши.ЧасыДоставокПо[Заказ.ЧасДоставкиПо];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
				
			Иначе
				
				ЗначениеХэша = Хэши.ЧасыДоставокПо["БезЧасовДоставкиПо"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
			
			//Районы
			Для каждого РайонАдреса Из Заказ.РайоныАдреса Цикл
				
				ЗначениеХэша = Хэши.РайоныАдресов[РайонАдреса];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.РайоныАдресов.Вставить(РайонАдреса, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
			КонецЦикла;
			
			Если Заказ.РайоныАдреса.Количество() = 0 Тогда
				
				ЗначениеХэша = Хэши.РайоныАдресов["БезРайонов"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
			
			//Категории транспорта
			Для каждого КатегорияТранспорта Из Заказ.КатегорииТранспорта Цикл
				
				ЗначениеХэша = Хэши.ЗаказыПоКатегориямТранспорта[КатегорияТранспорта];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.ЗаказыПоКатегориямТранспорта.Вставить(КатегорияТранспорта, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(Заказ);
			КонецЦикла;
			
			Если Заказ.КатегорииТранспорта.Количество() = 0 Тогда
				
				ЗначениеХэша = Хэши.ЗаказыПоКатегориямТранспорта["БезКатегорийТранспорта"];
				ЗначениеХэша.Добавить(Заказ);
			КонецЕсли;
		КонецЦикла;
		
		//Вес, объем, Количество мест
		Если ФильтрОтображаемыхЭлементов.МинимальныйВес = МаксимальноеЧисло Тогда
			ФильтрОтображаемыхЭлементов.МинимальныйВес = 0;
		КонецЕсли;
		Если ФильтрОтображаемыхЭлементов.МинимальныйОбъем = МаксимальноеЧисло Тогда
			ФильтрОтображаемыхЭлементов.МинимальныйОбъем = 0;
		КонецЕсли;
		Если ФильтрОтображаемыхЭлементов.МинимальноеКоличествоМест = МаксимальноеЧисло Тогда
			ФильтрОтображаемыхЭлементов.МинимальноеКоличествоМест = 0;
		КонецЕсли;
		
		Если ФильтрОтображаемыхЭлементов.МинимальныйВес = 0
		     и ФильтрОтображаемыхЭлементов.МаксимальныйВес = 0 Тогда
			
			ФильтрОтображаемыхЭлементов.ЛюбойВес = Истина;
		КонецЕсли;
		Если ФильтрОтображаемыхЭлементов.МинимальныйОбъем = 0
		     и ФильтрОтображаемыхЭлементов.МаксимальныйОбъем = 0 Тогда
			
			ФильтрОтображаемыхЭлементов.ЛюбойОбъем = Истина;
		КонецЕсли;
		Если ФильтрОтображаемыхЭлементов.МинимальноеКоличествоМест = 0
			и ФильтрОтображаемыхЭлементов.МаксимальноеКоличествоМест = 0 Тогда
			
			ФильтрОтображаемыхЭлементов.ЛюбоеКоличествоМест  = Истина;
		КонецЕсли;

	КонецЕсли;
	
	
	//Транспорт
	
	
	Если ИнициализироватьТранспорт Тогда
		
		Для каждого ТекущийТранспорт Из ОсновнаяТаблицаТранспорта Цикл
			
			ВключатьТранспорт = Ложь;
			
			//Виды Транспорта
			Если ЗначениеЗаполнено(ТекущийТранспорт.Вид) Тогда
				
				ЗначениеХэша = Хэши.ВидыТранспорта[ТекущийТранспорт.Вид];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(ТекущийТранспорт);
				
			Иначе
				
				ЗначениеХэша = Хэши.ВидыТранспорта["БезВидовТранспорта"];
				ЗначениеХэша.Добавить(ТекущийТранспорт);
			КонецЕсли;
			
			//Категории транспорта
			Для каждого КатегорияТранспорта Из ТекущийТранспорт.КатегорииТранспорта Цикл
				
				ЗначениеХэша = Хэши.ТранспортПоКатегориямТранспорта[КатегорияТранспорта];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.ТранспортПоКатегориямТранспорта.Вставить(КатегорияТранспорта, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(ТекущийТранспорт);
			КонецЦикла;
			
			Если ТекущийТранспорт.КатегорииТранспорта.Количество() = 0 Тогда
				
				ЗначениеХэша = Хэши.ТранспортПоКатегориямТранспорта["БезКатегорийТранспорта"];
				ЗначениеХэша.Добавить(ТекущийТранспорт);
			КонецЕсли;
			
			//Районы
			Для каждого Район Из ТекущийТранспорт.Районы Цикл
				
				ЗначениеХэша = Хэши.РайоныТранспорта[Район];
				Если ЗначениеХэша = Неопределено Тогда
					
					ЗначениеХэша = Новый Массив;
					Хэши.РайоныТранспорта.Вставить(Район, ЗначениеХэша);
				КонецЕсли;
				ЗначениеХэша.Добавить(ТекущийТранспорт);
				
				ВключатьТранспорт = ВключатьТранспорт или (Хэши.РайоныАдресов[Район] <> Неопределено);
			КонецЦикла;
			
			Если ТекущийТранспорт.Районы.Количество() = 0 Тогда
				
				ЗначениеХэша = Хэши.РайоныТранспорта["БезРайонов"];
				ЗначениеХэша.Добавить(ТекущийТранспорт);
				
				ВключатьТранспорт = Истина;
			КонецЕсли;
			
			//Грузоподъемность, Грузовместимость
			ФильтрОтображаемыхЭлементов.МинимальнаяГрузоподъемность = Мин(ФильтрОтображаемыхЭлементов.МинимальнаяГрузоподъемность, ТекущийТранспорт.Грузоподъемность);
			ФильтрОтображаемыхЭлементов.МаксимальнаяГрузоподъемность = Макс(ФильтрОтображаемыхЭлементов.МаксимальнаяГрузоподъемность, ТекущийТранспорт.Грузоподъемность);
			ФильтрОтображаемыхЭлементов.МинимальнаяГрузовместимость = Мин(ФильтрОтображаемыхЭлементов.МинимальнаяГрузовместимость, ТекущийТранспорт.Грузовместимость);
			ФильтрОтображаемыхЭлементов.МаксимальнаяГрузовместимость = Макс(ФильтрОтображаемыхЭлементов.МаксимальнаяГрузовместимость, ТекущийТранспорт.Грузовместимость);
			
			Если ВключатьТранспорт Тогда
				
				ОтображаемыйТранспорт.Вставить(ТекущийТранспорт, Истина);
				ОтображаемыйТранспортПоПредыдущемуФильтру.Вставить(ТекущийТранспорт, Истина);
			КонецЕсли;
		КонецЦикла;
		
		//Грузоподъемность, Грузовместимость
		Если ФильтрОтображаемыхЭлементов.МинимальнаяГрузоподъемность = МаксимальноеЧисло Тогда
			ФильтрОтображаемыхЭлементов.МинимальнаяГрузоподъемность = 0;
		КонецЕсли;
		Если ФильтрОтображаемыхЭлементов.МинимальнаяГрузовместимость = МаксимальноеЧисло Тогда
			ФильтрОтображаемыхЭлементов.МинимальнаяГрузовместимость = 0;
		КонецЕсли;
		
		Если ФильтрОтображаемыхЭлементов.МинимальнаяГрузоподъемность = 0
		     и ФильтрОтображаемыхЭлементов.МаксимальнаяГрузоподъемность = 0 Тогда
			
			ФильтрОтображаемыхЭлементов.ЛюбаяГрузоподъемность = Истина;
		КонецЕсли;
		Если ФильтрОтображаемыхЭлементов.МинимальнаяГрузовместимость = 0
		     и ФильтрОтображаемыхЭлементов.МаксимальнаяГрузовместимость = 0 Тогда
			
			ФильтрОтображаемыхЭлементов.ЛюбаяГрузовместимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	//Заполнение фильтров по хэшу
	
	
	//Грузоотправители
	Для каждого ЭлементХэша Из Хэши.Грузоотправители Цикл
		
		Если ЭлементХэша.Ключ <> "БезГрузоотправителя" Тогда
			
			СтатистикаЭлементов.Грузоотправители.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.Грузоотправители.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.Грузоотправители.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьЗаказы Тогда
				
				ФильтрОтображаемыхЭлементов.Грузоотправители.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.Грузоотправители.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезГрузоотправителя = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезГрузоотправителя = 0;
		КонецЕсли;
	КонецЦикла;
	
	//категории заказов
	Для каждого ЭлементХэша Из Хэши.КатегорииЗаказов Цикл
		
		
		Если ЭлементХэша.Ключ <> "БезКатегорийЗаказов" Тогда
			
			СтатистикаЭлементов.КатегорииЗаказов.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.КатегорииЗаказов.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.КатегорииЗаказов.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьЗаказы Тогда
				
				ФильтрОтображаемыхЭлементов.КатегорииЗаказов.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.КатегорииЗаказов.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезКатегорийЗаказов = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезКатегорийЗаказов = 0;
		КонецЕсли;
	КонецЦикла;
	
	//категории доставок 2014
	Для каждого ЭлементХэша Из Хэши.КатегорииДоставок2014 Цикл
		
		
		Если ЭлементХэша.Ключ <> "БезКатегорийДоставок2014" Тогда
			
			СтатистикаЭлементов.КатегорииДоставок2014.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.КатегорииДоставок2014.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.КатегорииДоставок2014.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьЗаказы Тогда
				
				ФильтрОтображаемыхЭлементов.КатегорииДоставок2014.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.КатегорииДоставок2014.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезКатегорийДоставок2014 = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезКатегорийДоставок2014 = 0;
		КонецЕсли;
	КонецЦикла;
	
	//признаки МО
	Для каждого ЭлементХэша Из Хэши.ПризнакиМО Цикл
		
		
		Если ЭлементХэша.Ключ <> "БезПризнаковМО" Тогда
			
			СтатистикаЭлементов.ПризнакиМО.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.ПризнакиМО.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.ПризнакиМО.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьЗаказы Тогда
				
				ФильтрОтображаемыхЭлементов.ПризнакиМО.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.ПризнакиМО.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезПризнаковМО = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезПризнаковМО = 0;
		КонецЕсли;
	КонецЦикла;
	
	
	//часы доставок с
	Для каждого ЭлементХэша Из Хэши.ЧасыДоставокС Цикл
		
		
		Если ЭлементХэша.Ключ <> "БезЧасовДоставокС" Тогда
			
			СтатистикаЭлементов.ЧасыДоставокС.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.ЧасыДоставокС.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.ЧасыДоставокС.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьЗаказы Тогда
				
				ФильтрОтображаемыхЭлементов.ЧасыДоставокС.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.ЧасыДоставокС.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезЧасовДоставокС = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезЧасовДоставокС = 0;
		КонецЕсли;
	КонецЦикла;

	//часы доставок по
	Для каждого ЭлементХэша Из Хэши.ЧасыДоставокПо Цикл
		
		
		Если ЭлементХэша.Ключ <> "БезЧасовДоставокПо" Тогда
			
			СтатистикаЭлементов.ЧасыДоставокПо.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.ЧасыДоставокПо.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.ЧасыДоставокПо.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьЗаказы Тогда
				
				ФильтрОтображаемыхЭлементов.ЧасыДоставокПо.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.ЧасыДоставокПо.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезЧасовДоставокПо = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезЧасовДоставокПо = 0;
		КонецЕсли;
	КонецЦикла;
	
	
	//интернет магазины
	Для каждого ЭлементХэша Из Хэши.ИнтернетМагазины Цикл
		
		
		Если ЭлементХэша.Ключ <> "БезИнтернетМагазинов" Тогда
			
			СтатистикаЭлементов.ИнтернетМагазины.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.ИнтернетМагазины.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.ИнтернетМагазины.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьЗаказы Тогда
				
				ФильтрОтображаемыхЭлементов.ИнтернетМагазины.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.ИнтернетМагазины.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезИнтернетМагазинов = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезИнтернетМагазинов = 0;
		КонецЕсли;
	КонецЦикла;
	
	
	//Районы
	Для каждого ЭлементХэша Из Хэши.РайоныАдресов Цикл
		
		Если ЭлементХэша.Ключ <> "БезРайонов" Тогда
			
			СтатистикаЭлементов.РайоныАдресов.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.РайоныАдресов.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.РайоныАдресов.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьЗаказы Тогда
				
				ФильтрОтображаемыхЭлементов.РайоныАдресов.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.РайоныАдресов.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезРайонов = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезРайонов = 0;
		КонецЕсли;
	КонецЦикла;
	
	//Виды Транспорта
	Для каждого ЭлементХэша Из Хэши.ВидыТранспорта Цикл
		
		Если ЭлементХэша.Ключ <> "БезВидовТранспорта" Тогда
			
			СтатистикаЭлементов.ВидыТранспорта.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.ВидыТранспорта.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.ВидыТранспорта.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьТранспорт Тогда
				
				ФильтрОтображаемыхЭлементов.ВидыТранспорта.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.ВидыТранспорта.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезВидовТранспорта = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезВидовТранспорта = 0;
		КонецЕсли;
	КонецЦикла;
	
	//категории транспорта
	Для каждого ЭлементХэша Из Хэши.ЗаказыПоКатегориямТранспорта Цикл
		
		
		Если ЭлементХэша.Ключ <> "БезКатегорийТранспорта" Тогда
			
			СтатистикаЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьТранспорт Тогда
				
				ФильтрОтображаемыхЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезКатегорийТранспорта = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезКатегорийТранспорта = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементХэша Из Хэши.ТранспортПоКатегориямТранспорта Цикл
		
		
		Если ЭлементХэша.Ключ <> "БезКатегорийТранспорта" Тогда
			
			ТекущееКоличество = СтатистикаЭлементов.КатегорииТранспорта[ЭлементХэша.Ключ];;
			Если ТекущееКоличество = Неопределено Тогда
				ТекущееКоличество = 0;
			КонецЕсли;
			
			СтатистикаЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, ТекущееКоличество + ЭлементХэша.Значение.Количество());
			СтатистикаОтображаемыхЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, 0);
			СтатистикаВыбранныхЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, 0);
			
			Если ИнициализироватьТранспорт Тогда
				
				ФильтрОтображаемыхЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, Истина);
				ФильтрВыбранныхЭлементов.КатегорииТранспорта.Вставить(ЭлементХэша.Ключ, Ложь);
			КонецЕсли;
		Иначе
			
			СтатистикаЭлементов.БезКатегорийТранспорта = ЭлементХэша.Значение.Количество();
			СтатистикаОтображаемыхЭлементов.БезКатегорийТранспорта = 0;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИерархиюКатегорийТранспорта();
	#Если Клиент Тогда
	Оповестить("ИнициализацияФильтров", Неопределено, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

//Создвёт новый фильтр
//
//  Возвращаемое значение:
//    <Структура>
//      ЛюбойВес - <Булево> Истина - фильтр не учитывается
//      МинимальныйВес - <Число 15, 3> минимальный вес
//      МаксимальныйВес - <Число 15, 3> максимальный вес
//      ЛюбойОбъем - <Булево> Истина - фильтр не учитывается
//      МинимальныйОбъем - <Число 15, 3> минимальный Объём
//      МаксимальныйОбъем - <Число 15, 3> максимальный объём
//      ЛюбоеКоличествоМест- <Булево> Истина - фильтр не учитывается
//      МинимальноеКоличествоМест - <Число 15, 0> минимальное количество мест
//      МаксимальноеКоличествоМест - <Число 15, 0> максимальное количество мест
//      Грузоотправители - <Соответствие>
//        Ключ - грузоотправитель
//        Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//      БезГрузоотправителя - <Булево> - включать заказы без грузоотправителя
//      ЛюбойГрузоотправитель - <Булево> Истина - фильтр не учитывается
//      РайоныАдресов - <Соответствие>
//        Ключ - георайон адреса
//        Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//      БезРайонов - <Булево> - включать заказы без районов
//      ЛюбойРайон - <Булево> Истина - фильтр не учитывается
//      КатегорииЗаказов - <Соответствие>
//        Ключ - категория заказа
//        Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//      БезКатегорийЗаказов - <Булево> - включать заказы без категорий заказов
//      ЛюбаяКатегория - <Булево> Истина - фильтр не учитывается
//      МинимальнаяГрузоподъемность - <Число> минимальная грузоподъемность транспорта
//      МаксимальнаяГрузоподъемность - <Число> максимальная грузоподъемность транспорта
//      ЛюбаяГрузоподъемность - <Булево> фильтр по грузоподъемности транспорта не учитывается
//      МинимальнаяГрузовместимость - <Число> минимальнй объём кузова транспорта
//      МаксимальнаяГрузовместимость - <Число> максимальный объём кузова транспорта
//      ЛюбаяГрузовместимость -  <Булево> фильтр по объёму кузова транспорта не учитывается
//      ВидыТранспорта - <Соответствие>
//        Ключ - вид транспорта
//        Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//      БезВидовТранспорта - <Булево> - включать транспорт без вида
//      ЛюбойВидТранспорта - <Булево> фильтр по виду транспорта не учитывается
//      КатегорииТранспорта - <Соответствие>
//        Ключ - категория транспорта
//        Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//      БезКатегорийТранспорта - <Булево> - включать транспорт и заказы без категорий транспорта
//      ЛюбаяКатегорияТранспорта - <Булево> Истина - фильтр не учитывается
//
Функция СоздатьФильтр() Экспорт
	
	Результат = Новый Структура;
	
	//Заказы
	
	Результат.Вставить("МинимальныйВес", 0);
	Результат.Вставить("МаксимальныйВес", 0);
	Результат.Вставить("ЛюбойВес", Ложь);
	
	Результат.Вставить("МинимальныйОбъем", 0);
	Результат.Вставить("МаксимальныйОбъем", 0);
	Результат.Вставить("ЛюбойОбъем", Ложь);
	
	Результат.Вставить("МинимальноеКоличествоМест", 0);
	Результат.Вставить("МаксимальноеКоличествоМест", 0);
	Результат.Вставить("ЛюбоеКоличествоМест", Ложь);
    	
	Результат.Вставить("Грузоотправители", Новый Соответствие);
	Результат.Вставить("БезГрузоотправителя", Ложь);
	Результат.Вставить("ЛюбойГрузоотправитель", Ложь);
	
	Результат.Вставить("РайоныАдресов", Новый Соответствие);
	Результат.Вставить("БезРайонов", Ложь);
	Результат.Вставить("ЛюбойРайон", Ложь);
	
	Результат.Вставить("КатегорииЗаказов", Новый Соответствие);
	Результат.Вставить("БезКатегорийЗаказов", Ложь);
	Результат.Вставить("ЛюбаяКатегория", Ложь);
	
	Результат.Вставить("КатегорииДоставок2014", Новый Соответствие);
	Результат.Вставить("БезКатегорийДоставок2014", Ложь);
	Результат.Вставить("ЛюбаяКатегория2014", Ложь);
	
	Результат.Вставить("ПризнакиМО", Новый Соответствие);
	Результат.Вставить("БезПризнаковМО", Ложь);
	Результат.Вставить("ЛюбойПризнакМО", Ложь);
	
	Результат.Вставить("ИнтернетМагазины", Новый Соответствие);
	Результат.Вставить("БезИнтернетМагазинов", Ложь);
	Результат.Вставить("ЛюбойИнтернетМагазин", Ложь);
	

	Результат.Вставить("ЧасыДоставокС", Новый Соответствие);
	Результат.Вставить("БезЧасовДоставкиС", Ложь);
	Результат.Вставить("ЛюбойЧасДоставкиС", Ложь);
	
	Результат.Вставить("ЧасыДоставокПо", Новый Соответствие);
	Результат.Вставить("БезЧасовДоставкиПо", Ложь);
	Результат.Вставить("ЛюбойЧасДоставкиПо", Ложь);
	
	
	//Транспорт
	
	Результат.Вставить("ВидыТранспорта", Новый Соответствие);
	Результат.Вставить("БезВидовТранспорта", Ложь);
	Результат.Вставить("ЛюбойВидТранспорта", Ложь);
	
	Результат.Вставить("КатегорииТранспорта", Новый Соответствие);
	Результат.Вставить("БезКатегорийТранспорта", Ложь);
	Результат.Вставить("ЛюбаяКатегорияТранспорта", Ложь);
	
	Результат.Вставить("МинимальнаяГрузоподъемность", 0);
	Результат.Вставить("МаксимальнаяГрузоподъемность", 0);
	Результат.Вставить("ЛюбаяГрузоподъемность", Ложь);
	
	Результат.Вставить("МинимальнаяГрузовместимость", 0);
	Результат.Вставить("МаксимальнаяГрузовместимость", 0);
	Результат.Вставить("ЛюбаяГрузовместимость", Ложь);
	
	Возврат Результат;
	
КонецФункции

//Создвёт новый объект статистики фильтра
//
//  Возвращаемое значение:
//    <Структура>
//      Грузоотправители - <Соответствие>
//        Ключ - грузоотправитель
//        Значение - <Число> количество заказов
//      БезГрузоотправителя - <Число> количество заказов
//      РайоныАдресов - <Соответствие>
//        Ключ - георайон адреса
//        Значение - <Число> количество заказов
//      БезРайонов - <Число> количество заказов
//      КатегорииЗаказов - <Соответствие>
//        Ключ - категория заказа
//        Значение - <Число> количество заказов
//      БезКатегорийЗаказов - <Число> количество заказов
//      ВидыТранспорта - <Соответствие>
//        Ключ - вид транспорта
//        Значение - <Число> количество заказов
//      БезВидовТранспорта - <Число> количество заказов
//      КатегорииТранспорта - <Соответствие>
//        Ключ - категория транспорта
//        Значение - <Число> количество заказов и транспорта
//      БезКатегорийТранспорта - <Число> количество заказов и транспорта
//
Функция СоздатьОбъектСтатистики() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Грузоотправители", Новый Соответствие);
	Результат.Вставить("БезГрузоотправителя", 0);
	Результат.Вставить("РайоныАдресов", Новый Соответствие);
	Результат.Вставить("БезРайонов", 0);
	Результат.Вставить("КатегорииЗаказов", Новый Соответствие);
	Результат.Вставить("БезКатегорийЗаказов", 0);
	Результат.Вставить("ВидыТранспорта", Новый Соответствие);
	Результат.Вставить("БезВидовТранспорта", 0);
	Результат.Вставить("КатегорииТранспорта", Новый Соответствие);
	Результат.Вставить("БезКатегорийТранспорта", 0);
	Результат.Вставить("КатегорииДоставок2014", Новый Соответствие);
	Результат.Вставить("БезКатегорийДоставок2014", 0);
	Результат.Вставить("ПризнакиМО", Новый Соответствие);
	Результат.Вставить("БезПризнаковМО", 0);	
	Результат.Вставить("ИнтернетМагазины", Новый Соответствие);
	Результат.Вставить("БезИнтернетМагазинов", 0);	
	Результат.Вставить("ЧасыДоставокС", Новый Соответствие);
	Результат.Вставить("БезЧасовДоставкиС", 0);
	Результат.Вставить("ЧасыДоставокПо", Новый Соответствие);
	Результат.Вставить("БезЧасовДоставкиПо", 0);
	Возврат Результат;
	
КонецФункции

//Копирует значения источника в приемник
//
//  Параметры:
//    Источник <Структура>
//               ЛюбойВес - <Булево> Истина - фильтр не учитывается
//               МинимальныйВес - <Число 15, 3> минимальный вес
//               МаксимальныйВес - <Число 15, 3> максимальный вес
//               ЛюбойОбъем - <Булево> Истина - фильтр не учитывается
//               МинимальныйОбъем - <Число 15, 3> минимальный Объём
//               МаксимальныйОбъем - <Число 15, 3> максимальный объём
//               ЛюбоеКоличествоМест- <Булево> Истина - фильтр не учитывается
//               МинимальноеКоличествоМест - <Число 15, 0> минимальное количество мест
//               МаксимальноеКоличествоМест - <Число 15, 0> максимальное количество мест
//               Грузоотправители - <Соответствие>
//                 Ключ - грузоотправитель
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезГрузоотправителя - <Булево> - включать заказы без грузоотправителя
//               ЛюбойГрузоотправитель - <Булево> Истина - фильтр не учитывается
//               РайоныАдресов - <Соответствие>
//                 Ключ - георайон адреса
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезРайонов - <Булево> - включать заказы без районов
//               ЛюбойРайон - <Булево> Истина - фильтр не учитывается
//               КатегорииЗаказов - <Соответствие>
//                 Ключ - категория заказа
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезКатегорийЗаказов - <Булево> - включать заказы без категорий заказов
//               ЛюбаяКатегория - <Булево> Истина - фильтр не учитывается
//               МинимальнаяГрузоподъемность - <Число> минимальная грузоподъемность транспорта
//               МаксимальнаяГрузоподъемность - <Число> максимальная грузоподъемность транспорта
//               ЛюбаяГрузоподъемность - <Булево> фильтр по грузоподъемности транспорта не учитывается
//               МинимальнаяГрузовместимость - <Число> минимальнй объём кузова транспорта
//               МаксимальнаяГрузовместимость - <Число> максимальный объём кузова транспорта
//               ЛюбаяГрузовместимость -  <Булево> фильтр по объёму кузова транспорта не учитывается
//               ВидыТранспорта - <Соответствие>
//                 Ключ - вид транспорта
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезВидовТранспорта - <Булево> - включать транспорт без вида
//               ЛюбойВидТранспорта - <Булево> фильтр по виду транспорта не учитывается
//               КатегорииТранспорта - <Соответствие>
//                 Ключ - категория транспорта
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезКатегорийТранспорта - <Булево> - включать транспорт и заказы без категорий транспорта
//               ЛюбаяКатегорияТранспорта - <Булево> Истина - фильтр не учитывается
//    Приемник <Структура>
//               ЛюбойВес - <Булево> Истина - фильтр не учитывается
//               МинимальныйВес - <Число 15, 3> минимальный вес
//               МаксимальныйВес - <Число 15, 3> максимальный вес
//               ЛюбойОбъем - <Булево> Истина - фильтр не учитывается
//               МинимальныйОбъем - <Число 15, 3> минимальный Объём
//               МаксимальныйОбъем - <Число 15, 3> максимальный объём
//               ЛюбоеКоличествоМест- <Булево> Истина - фильтр не учитывается
//               МинимальноеКоличествоМест - <Число 15, 0> минимальное количество мест
//               МаксимальноеКоличествоМест - <Число 15, 0> максимальное количество мест
//               Грузоотправители - <Соответствие>
//                 Ключ - грузоотправитель
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезГрузоотправителя - <Булево> - включать заказы без грузоотправителя
//               ЛюбойГрузоотправитель - <Булево> Истина - фильтр не учитывается
//               РайоныАдресов - <Соответствие>
//                 Ключ - георайон адреса
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезРайонов - <Булево> - включать заказы без районов
//               ЛюбойРайон - <Булево> Истина - фильтр не учитывается
//               КатегорииЗаказов - <Соответствие>
//                 Ключ - категория заказа
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезКатегорийЗаказов - <Булево> - включать заказы без категорий заказов
//               ЛюбаяКатегория - <Булево> Истина - фильтр не учитывается
//               МинимальнаяГрузоподъемность - <Число> минимальная грузоподъемность транспорта
//               МаксимальнаяГрузоподъемность - <Число> максимальная грузоподъемность транспорта
//               ЛюбаяГрузоподъемность - <Булево> фильтр по грузоподъемности транспорта не учитывается
//               МинимальнаяГрузовместимость - <Число> минимальнй объём кузова транспорта
//               МаксимальнаяГрузовместимость - <Число> максимальный объём кузова транспорта
//               ЛюбаяГрузовместимость -  <Булево> фильтр по объёму кузова транспорта не учитывается
//               ВидыТранспорта - <Соответствие>
//                 Ключ - вид транспорта
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезВидовТранспорта - <Булево> - включать транспорт без вида
//               ЛюбойВидТранспорта - <Булево> фильтр по виду транспорта не учитывается
//               КатегорииТранспорта - <Соответствие>
//                 Ключ - категория транспорта
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезКатегорийТранспорта - <Булево> - включать транспорт и заказы без категорий транспорта
//               ЛюбаяКатегорияТранспорта - <Булево> Истина - фильтр не учитывается
//  ЧастиФильтра - <Строка>
//                 "Заказы" - проверить часть фильтра относящуюся к заказам
//                 "Транспорт" - проверить часть фильтра относящуюся к транспорту
//                 "Весь" - проверить весь фильтр
//
Процедура КопироватьФильтр(Источник, Приемник, ЧастиФильтра = "Весь") Экспорт
	
	КопироватьЗаказы = (ЧастиФильтра = "Заказы") или (ЧастиФильтра = "Весь");
	КопироватьТранспорт = (ЧастиФильтра = "Транспорт") или (ЧастиФильтра = "Весь");
	
	//* Заказы *//
	
	Если КопироватьЗаказы Тогда
		
		//Грузоотправители
		Приемник.ЛюбойГрузоотправитель = Источник.ЛюбойГрузоотправитель;
		
		Приемник.Грузоотправители.Очистить();
		Для каждого КлючЗначение Из Источник.Грузоотправители Цикл
			
			Приемник.Грузоотправители.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		
		//Категории заказов
		Приемник.ЛюбаяКатегория = Источник.ЛюбаяКатегория;
		
		Приемник.КатегорииЗаказов.Очистить();
		Для каждого КлючЗначение Из Источник.КатегорииЗаказов Цикл
			
			Приемник.КатегорииЗаказов.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Приемник.БезКатегорийЗаказов = Источник.БезКатегорийЗаказов;
		
		
		
		//Категории доставок 2014
		Приемник.ЛюбаяКатегория2014 = Источник.ЛюбаяКатегория2014;
		
		Приемник.КатегорииДоставок2014.Очистить();
		Для каждого КлючЗначение Из Источник.КатегорииДоставок2014 Цикл
			
			Приемник.КатегорииДоставок2014.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Приемник.БезКатегорийДоставок2014 = Источник.БезКатегорийДоставок2014;

		//признаки мо
		Приемник.ЛюбойПризнакМО = Источник.ЛюбойПризнакМО;
		
		Приемник.ПризнакиМО.Очистить();
		Для каждого КлючЗначение Из Источник.ПризнакиМО Цикл
			
			Приемник.ПризнакиМО.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Приемник.БезПризнаковМО = Источник.БезПризнаковМО;
		
		
		//интернет магазины
		Приемник.ЛюбойИнтернетМагазин = Источник.ЛюбойИнтернетМагазин;
		
		Приемник.ИнтернетМагазины.Очистить();
		Для каждого КлючЗначение Из Источник.ИнтернетМагазины Цикл
			
			Приемник.ИнтернетМагазины.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Приемник.БезИнтернетмагазинов = Источник.БезИнтернетМагазинов;
	
		
		
		//Часы доставки с
		Приемник.ЛюбойЧасДоставкиС = Источник.ЛюбойЧасДоставкиС;
		
		Приемник.ЧасыДоставокС.Очистить();
		Для каждого КлючЗначение Из Источник.ЧасыДоставокС Цикл
			
			Приемник.ЧасыДоставокС.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Приемник.БезЧасовДоставкиС = Источник.БезЧасовДоставкиС;
		

		
		//Часы доставки по
		Приемник.ЛюбойЧасДоставкиПо = Источник.ЛюбойЧасДоставкиПо;
		
		Приемник.ЧасыДоставокПо.Очистить();
		Для каждого КлючЗначение Из Источник.ЧасыДоставокПо Цикл
			
			Приемник.ЧасыДоставокПо.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Приемник.БезЧасовДоставкиПо = Источник.БезЧасовДоставкиПо;
		
		
		//Районы
		Приемник.ЛюбойРайон = Источник.ЛюбойРайон;
		
		Приемник.РайоныАдресов.Очистить();
		Для каждого КлючЗначение Из Источник.РайоныАдресов Цикл
			
			Приемник.РайоныАдресов.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Приемник.БезРайонов = Источник.БезРайонов;
		
		//Фильтр по весу
		Приемник.ЛюбойВес = Источник.ЛюбойВес;
		Приемник.МинимальныйВес = Источник.МинимальныйВес;
		Приемник.МаксимальныйВес = Источник.МаксимальныйВес;
		
		//Фильтр по объему
		Приемник.ЛюбойОбъем = Источник.ЛюбойОбъем;
		Приемник.МинимальныйОбъем = Источник.МинимальныйОбъем;
		Приемник.МаксимальныйОбъем = Источник.МаксимальныйОбъем;
				
		//Фильтр по количеству мест
		Приемник.ЛюбоеКоличествоМест = Источник.ЛюбоеКоличествоМест;
		Приемник.МинимальноеКоличествоМест = Источник.МинимальноеКоличествоМест;
		Приемник.МаксимальноеКоличествоМест = Источник.МаксимальноеКоличествоМест;
		
	КонецЕсли;
	
	//* Транспорт *//
	
	Если КопироватьТранспорт Тогда
		
		//Вид транспорта
		Приемник.ЛюбойВидТранспорта = Источник.ЛюбойВидТранспорта;
		
		Приемник.ВидыТранспорта.Очистить();
		Для каждого КлючЗначение Из Источник.ВидыТранспорта Цикл
			
			Приемник.ВидыТранспорта.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Приемник.БезВидовТранспорта = Источник.БезВидовТранспорта;
		
		//Фильтр по грузоподъёмности
		Приемник.ЛюбаяГрузоподъемность = Источник.ЛюбаяГрузоподъемность;
		Приемник.МинимальнаяГрузоподъемность = Источник.МинимальнаяГрузоподъемность;
		Приемник.МаксимальнаяГрузоподъемность = Источник.МаксимальнаяГрузоподъемность;
		
		//Фильтр по грузовместимости
		Приемник.ЛюбаяГрузовместимость = Источник.ЛюбаяГрузовместимость;
		Приемник.МинимальнаяГрузовместимость = Источник.МинимальнаяГрузовместимость;
		Приемник.МаксимальнаяГрузовместимость = Источник.МаксимальнаяГрузовместимость;
	КонецЕсли;
	
	//* Общий кусочек *//
	
	//Категории транспорта
	Приемник.ЛюбаяКатегорияТранспорта = Источник.ЛюбаяКатегорияТранспорта;
	
	Приемник.КатегорииТранспорта.Очистить();
	Для каждого КлючЗначение Из Источник.КатегорииТранспорта Цикл
		
		Приемник.КатегорииТранспорта.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Приемник.БезКатегорийТранспорта = Источник.БезКатегорийТранспорта;
	
КонецПроцедуры

//Сброс фильтра
//
//  Параметры:
//    Фильтр <Структура>
//             ЛюбойВес - <Булево> Истина - фильтр не учитывается
//             МинимальныйВес - <Число 15, 3> минимальный вес
//             МаксимальныйВес - <Число 15, 3> максимальный вес
//             ЛюбойОбъем - <Булево> Истина - фильтр не учитывается
//             МинимальныйОбъем - <Число 15, 3> минимальный Объём
//             МаксимальныйОбъем - <Число 15, 3> максимальный объём
//             ЛюбоеКоличествоМест- <Булево> Истина - фильтр не учитывается
//             МинимальноеКоличествоМест - <Число 15, 0> минимальное количество мест
//             МаксимальноеКоличествоМест - <Число 15, 0> максимальное количество мест
//             Грузоотправители - <Соответствие>
//               Ключ - грузоотправитель
//               Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//             БезГрузоотправителя - <Булево> - включать заказы без грузоотправителя
//             ЛюбойГрузоотправитель - <Булево> Истина - фильтр не учитывается
//             РайоныАдресов - <Соответствие>
//               Ключ - георайон адреса
//               Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//             БезРайонов - <Булево> - включать заказы без районов
//             ЛюбойРайон - <Булево> Истина - фильтр не учитывается
//             КатегорииЗаказов - <Соответствие>
//               Ключ - категория заказа
//               Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//             БезКатегорийЗаказов - <Булево> - включать заказы без категорий заказов
//             ЛюбаяКатегория - <Булево> Истина - фильтр не учитывается
//             МинимальнаяГрузоподъемность - <Число> минимальная грузоподъемность транспорта
//             МаксимальнаяГрузоподъемность - <Число> максимальная грузоподъемность транспорта
//             ЛюбаяГрузоподъемность - <Булево> фильтр по грузоподъемности транспорта не учитывается
//             МинимальнаяГрузовместимость - <Число> минимальнй объём кузова транспорта
//             МаксимальнаяГрузовместимость - <Число> максимальный объём кузова транспорта
//             ЛюбаяГрузовместимость -  <Булево> фильтр по объёму кузова транспорта не учитывается
//             ВидыТранспорта - <Соответствие>
//               Ключ - вид транспорта
//               Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//             БезВидовТранспорта - <Булево> - включать транспорт без вида
//             ЛюбойВидТранспорта - <Булево> фильтр по виду транспорта не учитывается
//               КатегорииТранспорта - <Соответствие>
//                 Ключ - категория транспорта
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезКатегорийТранспорта - <Булево> - включать транспорт и заказы без категорий транспорта
//               ЛюбаяКатегорияТранспорта - <Булево> Истина - фильтр не учитывается
//  ЧастиФильтра - <Строка>
//                 "Заказы" - проверить часть фильтра относящуюся к заказам
//                 "Транспорт" - проверить часть фильтра относящуюся к транспорту
//                 "Весь" - проверить весь фильтр
//
Процедура ОчиститьФильтр(Фильтр, ЧастиФильтра = "Весь") Экспорт
	
	ОчиситьЗаказы = (ЧастиФильтра = "Заказы") или (ЧастиФильтра = "Весь");
	ОчиститьТранспорт = (ЧастиФильтра = "Транспорт") или (ЧастиФильтра = "Весь");
	
	//* Заказы *//
	
	Если ОчиситьЗаказы Тогда
		
		//Грузоотправители
		Фильтр.ЛюбойГрузоотправитель = Ложь;
		
		Грузоотправители = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.Грузоотправители Цикл
			
			Грузоотправители.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.Грузоотправители = Грузоотправители;
			
		Фильтр.БезКатегорийЗаказов = Ложь;
		
		//Категории заказов
		Фильтр.ЛюбаяКатегория = Ложь;
			
		КатегорииЗаказов = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.КатегорииЗаказов Цикл
			
			КатегорииЗаказов.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.КатегорииЗаказов = КатегорииЗаказов;
		
		Фильтр.БезКатегорийЗаказов = Ложь;
		
		
		//Категории доставок 2014
		Фильтр.ЛюбаяКатегория2014 = Ложь;
			
		КатегорииДоставок2014 = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.КатегорииДоставок2014 Цикл
			
			КатегорииДоставок2014.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.КатегорииДоставок2014 = КатегорииДоставок2014;
		
		Фильтр.БезКатегорийДоставок2014 = Ложь;
				
		//признаки мо
		Фильтр.ЛюбойПризнакМО = Ложь;
			
		ПризнакиМО = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ПризнакиМО Цикл
			
			ПризнакиМО.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.ПризнакиМО = ПризнакиМО;
		
		Фильтр.БезПризнаковМО = Ложь;
		
		//интернет магазины
		Фильтр.ЛюбойИнтернетМагазин = Ложь;
			
		ИнтернетМагазины = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ИнтернетМагазины Цикл
			
			ИнтернетМагазины.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.ИнтернетМагазины = ИнтернетМагазины;
		
		Фильтр.БезИнтернетМагазинов = Ложь;
		
		
		//часы доставок с
		Фильтр.ЛюбойЧасДоставкиС = Ложь;
			
		ЧасыДоставокС = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ЧасыДоставокС Цикл
			
			ЧасыДоставокС.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.ЧасыДоставокС = ЧасыДоставокС;
		
		Фильтр.БезЧасовДоставкиС = Ложь;
		
		//часы доставок по
		Фильтр.ЛюбойЧасДоставкиПо = Ложь;
			
		ЧасыДоставокПо = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ЧасыДоставокПо Цикл
			
			ЧасыДоставокПо.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.ЧасыДоставокПо = ЧасыДоставокПо;
		
		Фильтр.БезЧасовДоставкиПо = Ложь;
		
		
		//Районы
		Фильтр.ЛюбойРайон = Ложь;
			
		РайоныАдресов = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.РайоныАдресов Цикл
				
			РайоныАдресов.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.РайоныАдресов = РайоныАдресов;
			
		Фильтр.БезРайонов = Ложь;
		
		//Фильтр по весу
		Фильтр.ЛюбойВес = Ложь;
		Фильтр.МинимальныйВес = 0;
		Фильтр.МаксимальныйВес = 0;
		
		//Фильтр по объёму
		Фильтр.ЛюбойОбъем = Ложь;
		Фильтр.МинимальныйОбъем = 0;
		Фильтр.МаксимальныйОбъем = 0;
		
		//Фильтр по количеству мест
		Фильтр.ЛюбоеКоличествоМест = Ложь;
		Фильтр.МинимальноеКоличествоМест = 0;
		Фильтр.МаксимальноеКоличествоМест = 0;

	КонецЕсли;
	
	//* Транспорт *//
	
	Если ОчиститьТранспорт Тогда
		
		//Виды транспорта
		Фильтр.ЛюбойВидТранспорта = Ложь;
			
		ВидыТранспорта = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ВидыТранспорта Цикл
				
			ВидыТранспорта.Вставить(КлючЗначение.Ключ, Ложь);
		КонецЦикла;
		Фильтр.ВидыТранспорта = ВидыТранспорта;
			
		Фильтр.БезВидовТранспорта = Ложь;
		
		//Фильтр по грузоподъёмности
		Фильтр.ЛюбаяГрузоподъемность = Ложь;
		Фильтр.МинимальнаяГрузоподъемность = 0;
		Фильтр.МаксимальнаяГрузоподъемность = 0;
		
		//Фильтр по грузовместимости
		Фильтр.ЛюбаяГрузовместимость = Ложь;
		Фильтр.МинимальнаяГрузовместимость = 0;
		Фильтр.МаксимальнаяГрузовместимость = 0;
	КонецЕсли;
	
	//* Общий кусочек *//
	
	//Категории транспорта
	Фильтр.ЛюбаяКатегорияТранспорта = Ложь;
	
	КатегорииТранспорта = Новый Соответствие;
	Для каждого КлючЗначение Из Фильтр.КатегорииТранспорта Цикл
		
		КатегорииТранспорта.Вставить(КлючЗначение.Ключ, Ложь);
	КонецЦикла;
	
	Фильтр.БезКатегорийТранспорта = Ложь;
	
КонецПроцедуры

//Определяет пустой ли фильтр
//
//  Параметры:
//    Фильтр <Структура>
//             ЛюбойВес - <Булево> Истина - фильтр не учитывается
//             МинимальныйВес - <Число 15, 3> минимальный вес
//             МаксимальныйВес - <Число 15, 3> максимальный вес
//             ЛюбойОбъем - <Булево> Истина - фильтр не учитывается
//             МинимальныйОбъем - <Число 15, 3> минимальный Объём
//             МаксимальныйОбъем - <Число 15, 3> максимальный объём
//             ЛюбоеКоличествоМест- <Булево> Истина - фильтр не учитывается
//             МинимальноеКоличествоМест - <Число 15, 0> минимальное количество мест
//             МаксимальноеКоличествоМест - <Число 15, 0> максимальное количество мест
//             Грузоотправители - <Соответствие>
//               Ключ - грузоотправитель
//               Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//             БезГрузоотправителя - <Булево> - включать заказы без грузоотправителя
//             ЛюбойГрузоотправитель - <Булево> Истина - фильтр не учитывается
//             РайоныАдресов - <Соответствие>
//               Ключ - георайон адреса
//               Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//             БезРайонов - <Булево> - включать заказы без районов
//             ЛюбойРайон - <Булево> Истина - фильтр не учитывается
//             КатегорииЗаказов - <Соответствие>
//               Ключ - категория заказа
//               Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//             БезКатегорийЗаказов - <Булево> - включать заказы без категорий заказов
//             ЛюбаяКатегория - <Булево> Истина - фильтр не учитывается
//             МинимальнаяГрузоподъемность - <Число> минимальная грузоподъемность транспорта
//             МаксимальнаяГрузоподъемность - <Число> максимальная грузоподъемность транспорта
//             ЛюбаяГрузоподъемность - <Булево> фильтр по грузоподъемности транспорта не учитывается
//             МинимальнаяГрузовместимость - <Число> минимальнй объём кузова транспорта
//             МаксимальнаяГрузовместимость - <Число> максимальный объём кузова транспорта
//             ЛюбаяГрузовместимость -  <Булево> фильтр по объёму кузова транспорта не учитывается
//             ВидыТранспорта - <Соответствие>
//               Ключ - вид транспорта
//               Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//             БезВидовТранспорта - <Булево> - включать транспорт без вида
//             ЛюбойВидТранспорта - <Булево> фильтр по виду транспорта не учитывается
//               КатегорииТранспорта - <Соответствие>
//                 Ключ - категория транспорта
//                 Значение - <Булево> Истина - учитывать ключ фильтра при отборе
//               БезКатегорийТранспорта - <Булево> - включать транспорт и заказы без категорий транспорта
//               ЛюбаяКатегорияТранспорта - <Булево> Истина - фильтр не учитывается
//  ЧастиФильтра - <Строка>
//                 "Заказы" - проверить часть фильтра относящуюся к заказам
//                 "Транспорт" - проверить часть фильтра относящуюся к транспорту
//                 "Весь" - проверить весь фильтр
//
Функция ФильтрПустой(Фильтр, ЧастиФильтра = "Весь") Экспорт
	
	Результат = Истина;
	
	
	//Заказы
	
	
	Если ЧастиФильтра = "Заказы" или ЧастиФильтра = "Весь" Тогда
			
		//Вес, объём, количество мест 
		Если (не Фильтр.ЛюбойВес)
			 и ( Фильтр.МинимальныйВес <> 0
				 или Фильтр.МаксимальныйВес <> 0) Тогда
			Результат = Ложь;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбойОбъем)
			 и ( Фильтр.МинимальныйОбъем <> 0
				 или Фильтр.МаксимальныйОбъем <> 0) Тогда
			Результат = Ложь;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбоеКоличествоМест)
			 и ( Фильтр.МинимальноеКоличествоМест <> 0
				 или Фильтр.МаксимальноеКоличествоМест <> 0) Тогда
			Результат = Ложь;
		КонецЕсли;
						
		//Грузоотправители
		ФильтрГрузоотправителейПустой = Истина;
		Если не Фильтр.ЛюбойГрузоотправитель Тогда
			
			Для каждого КлючЗначение Из Фильтр.Грузоотправители Цикл
				
				ФильтрГрузоотправителейПустой = ФильтрГрузоотправителейПустой и (не КлючЗначение.Значение);
			КонецЦикла;
			ФильтрГрузоотправителейПустой = (ФильтрГрузоотправителейПустой и (не Фильтр.БезГрузоотправителя));
		КонецЕсли;
		
		Результат = (Результат и ФильтрГрузоотправителейПустой);
		
		//Категории заказов
		ФильтрКатегорийЗаказовПустой = Истина;
		Если не Фильтр.ЛюбаяКатегория Тогда
			
			Для каждого КлючЗначение Из Фильтр.КатегорииЗаказов Цикл
				
				ФильтрКатегорийЗаказовПустой = ФильтрКатегорийЗаказовПустой и (не КлючЗначение.Значение);
			КонецЦикла;
			ФильтрКатегорийЗаказовПустой = (ФильтрКатегорийЗаказовПустой и (не Фильтр.БезКатегорийЗаказов));
		КонецЕсли;
		
		Результат = (Результат и ФильтрКатегорийЗаказовПустой);
		
		//Категории доставок 2014
		ФильтрКатегорийДоставок2014Пустой = Истина;
		Если не Фильтр.ЛюбаяКатегория2014 Тогда
			
			Для каждого КлючЗначение Из Фильтр.КатегорииДоставок2014 Цикл
				
				ФильтрКатегорийДоставок2014Пустой = ФильтрКатегорийДоставок2014Пустой и (не КлючЗначение.Значение);
			КонецЦикла;
			ФильтрКатегорийДоставок2014Пустой = (ФильтрКатегорийДоставок2014Пустой и (не Фильтр.БезКатегорийДоставок2014));
		КонецЕсли;
		
		Результат = (Результат и ФильтрКатегорийДоставок2014Пустой);
		
		//признаки МО
		ФильтрПризнаковМОПустой = Истина;
		Если не Фильтр.ЛюбойПризнакМО Тогда
			
			Для каждого КлючЗначение Из Фильтр.ПризнакиМО Цикл
				
				ФильтрПризнаковМОПустой = ФильтрПризнаковМОПустой и (не КлючЗначение.Значение);
			КонецЦикла;
			ФильтрПризнаковМОПустой = (ФильтрПризнаковМОПустой и (не Фильтр.БезПризнаковМО));
		КонецЕсли;
		
		Результат = (Результат и ФильтрПризнаковМОПустой);			
		
		//интернет магазины
		ФильтрИнтернетМагазиновПустой = Истина;
		Если не Фильтр.ЛюбойИнтернетМагазин Тогда
			
			Для каждого КлючЗначение Из Фильтр.ИнтернетМагазины Цикл
				
				ФильтрИнтернетМагазиновПустой = ФильтрИнтернетМагазиновПустой и (не КлючЗначение.Значение);
			КонецЦикла;
			ФильтрИнтернетМагазиновПустой = (ФильтрИнтернетМагазиновПустой и (не Фильтр.БезИнтернетМагазинов));
		КонецЕсли;
		
		Результат = (Результат и ФильтрИнтернетМагазиновПустой);	
		
		
		//Часы доставок с
		ФильтрЧасовДоставокСПустой = Истина;
		Если не Фильтр.ЛюбойЧасДоставкиС Тогда
			
			Для каждого КлючЗначение Из Фильтр.ЧасыДоставокС Цикл
				
				ФильтрЧасовДоставокСПустой = ФильтрЧасовДоставокСПустой и (не КлючЗначение.Значение);
			КонецЦикла;
			ФильтрЧасовДоставокСПустой = (ФильтрЧасовДоставокСПустой и (не Фильтр.БезЧасовДоставкиС));
		КонецЕсли;
		
		Результат = (Результат и ФильтрЧасовДоставокСПустой);		
		
		//Часы доставок по
		ФильтрЧасовДоставокПоПустой = Истина;
		Если не Фильтр.ЛюбойЧасДоставкиПо Тогда
			
			Для каждого КлючЗначение Из Фильтр.ЧасыДоставокПо Цикл
				
				ФильтрЧасовДоставокПоПустой = ФильтрЧасовДоставокПоПустой и (не КлючЗначение.Значение);
			КонецЦикла;
			ФильтрЧасовДоставокПоПустой = (ФильтрЧасовДоставокПоПустой и (не Фильтр.БезЧасовДоставкиПо));
		КонецЕсли;
		
		Результат = (Результат и ФильтрЧасовДоставокПоПустой);		
		
	КонецЕсли;
	
	
	//Транспорт
	
	
	Если ЧастиФильтра = "Транспорт" или ЧастиФильтра = "Весь" Тогда
		
		//Виды транспорта
		ФильтрВидовТранспортаПустой = Истина;
		Если не Фильтр.ЛюбойВидТранспорта Тогда
			
			Для каждого КлючЗначение Из Фильтр.ВидыТранспорта Цикл
				
				ФильтрВидовТранспортаПустой = ФильтрВидовТранспортаПустой и (не КлючЗначение.Значение);
			КонецЦикла;
			ФильтрВидовТранспортаПустой = (ФильтрВидовТранспортаПустой и (не Фильтр.БезВидовТранспорта));
		КонецЕсли;
		
		Результат = (Результат и ФильтрВидовТранспортаПустой);
		
		//Грузоподъемность, Грузовместимость
		Если (не Фильтр.ЛюбаяГрузоподъемность)
			 и ( Фильтр.МинимальнаяГрузоподъемность <> 0
				 или Фильтр.МаксимальнаяГрузоподъемность <> 0) Тогда
			Результат = Ложь;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбаяГрузовместимость)
			 и ( Фильтр.МинимальнаяГрузовместимость <> 0
				 или Фильтр.МаксимальнаяГрузовместимость <> 0) Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	//Общий кусочек
	
	
	//Районы
	ФильтрРайоновПустой = Истина;
	Если не Фильтр.ЛюбойРайон Тогда
		
		Для каждого КлючЗначение Из Фильтр.РайоныАдресов Цикл
			
			ФильтрРайоновПустой = ФильтрРайоновПустой и (не КлючЗначение.Значение);
		КонецЦикла;
		ФильтрРайоновПустой = (ФильтрРайоновПустой и (не Фильтр.БезРайонов = 0));
	КонецЕсли;
	
	Результат = (Результат и ФильтрРайоновПустой);
	
	//Категории транспорта
	ФильтрКатегорийТранспортаПустой = Истина;
	Если не Фильтр.ЛюбаяКатегорияТранспорта Тогда
		
		Для каждого КлючЗначение Из Фильтр.КатегорииТранспорта Цикл
			
			ФильтрКатегорийТранспортаПустой = ФильтрКатегорийТранспортаПустой и (не КлючЗначение.Значение);
		КонецЦикла;
		ФильтрКатегорийТранспортаПустой = (ФильтрКатегорийТранспортаПустой и (не Фильтр.БезКатегорийТранспорта));
	КонецЕсли;
	
	Результат = (Результат и ФильтрКатегорийТранспортаПустой);
	
	Возврат Результат;
	
КонецФункции

//* Заказы *//

//Дополняет фильтр и статистику свойствами заказов
//
//  Параметры:
//    пЗаказы - <Соответствие> список заказов
//      Ключ - <СтрокаТаблицыЗначений> строка основной таблицы заказов
//      Значений - <Булево> всегда Истина
//
Процедура ДополнитьФильтрыПоСвойствамЗаказов(пЗаказы)
	
	ОбновлятьИерархиюКатегорийТранспорта = Ложь;
	
	Для каждого КлючЗначение Из пЗаказы Цикл
		
		Заказ = КлючЗначение.Ключ;
		
		//Вес, Объём
		ФильтрОтображаемыхЭлементов.МинимальныйВес = Мин(ФильтрОтображаемыхЭлементов.МинимальныйВес, Заказ.Вес);
		ФильтрОтображаемыхЭлементов.МаксимальныйВес = Макс(ФильтрОтображаемыхЭлементов.МаксимальныйВес, Заказ.Вес);
		ФильтрОтображаемыхЭлементов.МинимальныйОбъем = Мин(ФильтрОтображаемыхЭлементов.МинимальныйОбъем, Заказ.Объем);
		ФильтрОтображаемыхЭлементов.МаксимальныйОбъем = Макс(ФильтрОтображаемыхЭлементов.МаксимальныйОбъем, Заказ.Объем);
		
		//Грузоотправители
		Если ЗначениеЗаполнено(Заказ.Грузоотправитель) Тогда
			
			ЗначениеХэша = Хэши.Грузоотправители[Заказ.Грузоотправитель];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.Грузоотправители.Вставить(Заказ.Грузоотправитель, ЗначениеХэша);
				
				СтатистикаЭлементов.Грузоотправители.Вставить(Заказ.Грузоотправитель, 0);
				СтатистикаОтображаемыхЭлементов.Грузоотправители.Вставить(Заказ.Грузоотправитель, 0);
				СтатистикаВыбранныхЭлементов.Грузоотправители.Вставить(Заказ.Грузоотправитель, 0);
				
				ФильтрОтображаемыхЭлементов.Грузоотправители.Вставить(Заказ.Грузоотправитель, Ложь);
				ФильтрВыбранныхЭлементов.Грузоотправители.Вставить(Заказ.Грузоотправитель, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.Грузоотправители[Заказ.Грузоотправитель] + 1;
			СтатистикаЭлементов.Грузоотправители.Вставить(Заказ.Грузоотправитель, Количество);
			
		Иначе
			
			ЗначениеХэша = Хэши.КатегорииЗаказов["БезГрузоотправителя"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезГрузоотправителя = СтатистикаЭлементов.БезГрузоотправителя + 1;
		КонецЕсли;
		
		
		//категории доставок 2014
		Если ЗначениеЗаполнено(Заказ.КатегорияДоставки2014) Тогда
			
			ЗначениеХэша = Хэши.КатегорииДоставок2014[Заказ.КатегорияДоставки2014];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, ЗначениеХэша);
				
				СтатистикаЭлементов.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, 0);
				СтатистикаОтображаемыхЭлементов.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, 0);
				СтатистикаВыбранныхЭлементов.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, 0);
				
				ФильтрОтображаемыхЭлементов.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, Ложь);
				ФильтрВыбранныхЭлементов.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.КатегорииДоставок2014[Заказ.КатегорияДоставки2014] + 1;
			СтатистикаЭлементов.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, Количество);
			
		Иначе
			
			ЗначениеХэша = Хэши.КатегорииДоставок2014["БезКатегорийДоставок2014"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезКатегорийДоставок2014 = СтатистикаЭлементов.БезКатегорийДоставок2014 + 1;
		КонецЕсли;
		
		
		//признаки мо
		Если ЗначениеЗаполнено(Заказ.ПризнакМО) Тогда
			
			ЗначениеХэша = Хэши.ПризнакиМО[Заказ.ПризнакМО];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.ПризнакиМО.Вставить(Заказ.ПризнакМО, ЗначениеХэша);
				
				СтатистикаЭлементов.ПризнакиМО.Вставить(Заказ.ПризнакМО, 0);
				СтатистикаОтображаемыхЭлементов.ПризнакиМО.Вставить(Заказ.ПризнакМО, 0);
				СтатистикаВыбранныхЭлементов.ПризнакиМО.Вставить(Заказ.ПризнакМО, 0);
				
				ФильтрОтображаемыхЭлементов.ПризнакиМО.Вставить(Заказ.ПризнакМО, Ложь);
				ФильтрВыбранныхЭлементов.ПризнакиМО.Вставить(Заказ.ПризнакМО, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.ПризнакиМО[Заказ.ПризнакМО] + 1;
			СтатистикаЭлементов.ПризнакиМО.Вставить(Заказ.ПризнакМО, Количество);
			
		Иначе
			
			ЗначениеХэша = Хэши.ПризнакиМО["БезПризнаковМО"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезПризнаковМО = СтатистикаЭлементов.БезПризнаковМО + 1;
		КонецЕсли;
		
		
		//интернет магазины
		Если ЗначениеЗаполнено(Заказ.ИнтернетМагазин) Тогда
			
			ЗначениеХэша = Хэши.ИнтернетМагазины[Заказ.ИнтернетМагазин];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, ЗначениеХэша);
				
				СтатистикаЭлементов.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, 0);
				СтатистикаОтображаемыхЭлементов.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, 0);
				СтатистикаВыбранныхЭлементов.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, 0);
				
				ФильтрОтображаемыхЭлементов.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, Ложь);
				ФильтрВыбранныхЭлементов.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.ИнтернетМагазины[Заказ.ИнтернетМагазин] + 1;
			СтатистикаЭлементов.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, Количество);
			
		Иначе
			
			ЗначениеХэша = Хэши.ИнтернетМагазины["БезИнтернетМагазинов"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезИнтернетМагазинов = СтатистикаЭлементов.БезИнтернетМагазинов + 1;
		КонецЕсли;
		
		
		//Часы доставок с
		Если ЗначениеЗаполнено(Заказ.ЧасДоставкиС) Тогда
			
			ЗначениеХэша = Хэши.ЧасыДоставокС[Заказ.ЧасДоставкиС];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, ЗначениеХэша);
				
				СтатистикаЭлементов.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, 0);
				СтатистикаОтображаемыхЭлементов.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, 0);
				СтатистикаВыбранныхЭлементов.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, 0);
				
				ФильтрОтображаемыхЭлементов.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, Ложь);
				ФильтрВыбранныхЭлементов.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.ЧасыДоставокС[Заказ.ЧасДоставкиС] + 1;
			СтатистикаЭлементов.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, Количество);
			
		Иначе
			
			ЗначениеХэша = Хэши.ЧасыДоставокС["БезЧасовДоставкиС"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезЧасовДоставкиС = СтатистикаЭлементов.БезЧасовДоставкиС + 1;
		КонецЕсли;
		
		
		//Часы доставок по
		Если ЗначениеЗаполнено(Заказ.ЧасДоставкиПо) Тогда
			
			ЗначениеХэша = Хэши.ЧасыДоставокПо[Заказ.ЧасДоставкиПо];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, ЗначениеХэша);
				
				СтатистикаЭлементов.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, 0);
				СтатистикаОтображаемыхЭлементов.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, 0);
				СтатистикаВыбранныхЭлементов.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, 0);
				
				ФильтрОтображаемыхЭлементов.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, Ложь);
				ФильтрВыбранныхЭлементов.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.ЧасыДоставокПо[Заказ.ЧасДоставкиПо] + 1;
			СтатистикаЭлементов.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, Количество);
			
		Иначе
			
			ЗначениеХэша = Хэши.ЧасыДоставокПо["БезЧасовДоставкиПо"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезЧасовДоставкиПо = СтатистикаЭлементов.БезЧасовДоставкиПо + 1;
		КонецЕсли;
		
		
		//категории заказов
		Для каждого КатегорияЗаказа Из Заказ.КатегорииЗаказа Цикл
			
			ЗначениеХэша = Хэши.КатегорииЗаказов[КатегорияЗаказа];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.КатегорииЗаказов.Вставить(КатегорияЗаказа, ЗначениеХэша);
				
				СтатистикаЭлементов.КатегорииЗаказов.Вставить(КатегорияЗаказа, 0);
				СтатистикаОтображаемыхЭлементов.КатегорииЗаказов.Вставить(КатегорияЗаказа, 0);
				СтатистикаВыбранныхЭлементов.КатегорииЗаказов.Вставить(КатегорияЗаказа, 0);
				
				ФильтрОтображаемыхЭлементов.КатегорииЗаказов.Вставить(КатегорияЗаказа, Ложь);
				ФильтрВыбранныхЭлементов.КатегорииЗаказов.Вставить(КатегорияЗаказа, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.КатегорииЗаказов[КатегорияЗаказа] + 1;
			СтатистикаЭлементов.КатегорииЗаказов.Вставить(КатегорияЗаказа, Количество);
		КонецЦикла;
		
		Если Заказ.КатегорииЗаказа.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.КатегорииЗаказов["БезКатегорийЗаказов"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезКатегорийЗаказов = СтатистикаЭлементов.БезКатегорийЗаказов + 1;
		КонецЕсли;
		
		//Районы
		Для каждого РайонАдреса Из Заказ.РайоныАдреса Цикл
			
			ЗначениеХэша = Хэши.РайоныАдресов[РайонАдреса];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.РайоныАдресов.Вставить(РайонАдреса, ЗначениеХэша);
				
				СтатистикаЭлементов.РайоныАдресов.Вставить(РайонАдреса, 0);
				СтатистикаОтображаемыхЭлементов.РайоныАдресов.Вставить(РайонАдреса, 0);
				СтатистикаВыбранныхЭлементов.РайоныАдресов.Вставить(РайонАдреса, 0);
			
				ФильтрОтображаемыхЭлементов.РайоныАдресов.Вставить(РайонАдреса, Ложь);
				ФильтрВыбранныхЭлементов.РайоныАдресов.Вставить(РайонАдреса, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.РайоныАдресов[РайонАдреса] + 1;
			СтатистикаЭлементов.РайоныАдресов.Вставить(РайонАдреса, Количество);
		КонецЦикла;
		
		Если Заказ.РайоныАдреса.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.РайоныАдресов["БезРайонов"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезРайонов = СтатистикаЭлементов.БезРайонов + 1;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорта Из Заказ.КатегорииТранспорта Цикл
			
			ЗначениеХэша = Хэши.ЗаказыПоКатегориямТранспорта[КатегорияТранспорта];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.ЗаказыПоКатегориямТранспорта.Вставить(КатегорияТранспорта, ЗначениеХэша);
				
				СтатистикаЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, 0);
				СтатистикаОтображаемыхЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, 0);
				СтатистикаВыбранныхЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, 0);
				
				ФильтрОтображаемыхЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, Ложь);
				ФильтрВыбранныхЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(Заказ);
			
			Количество = СтатистикаЭлементов.КатегорииТранспорта[КатегорияТранспорта] + 1;
			СтатистикаЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, Количество);
		КонецЦикла;
		
		Если Заказ.КатегорииТранспорта.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.ЗаказыПоКатегориямТранспорта["БезКатегорийТранспорта"];
			ЗначениеХэша.Добавить(Заказ);
			
			СтатистикаЭлементов.БезКатегорийТранспорта = СтатистикаЭлементов.БезКатегорийТранспорта + 1;
		КонецЕсли;
		
		ОбновлятьИерархиюКатегорийТранспорта = ОбновлятьИерархиюКатегорийТранспорта или (Заказ.КатегорииТранспорта.Количество() <> 0);
	КонецЦикла;
	
	Если ОбновлятьИерархиюКатегорийТранспорта Тогда
		
		ОбновитьИерархиюКатегорийТранспорта();
	КонецЕсли;
	#Если Клиент Тогда
	Оповестить("ИнициализацияФильтров", Неопределено, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

//Дополняет фильтр и статистику свойствами заказов
//
//  Параметры:
//    пЗаказы - <Соответствие> список заказов
//      Ключ - <СтрокаТаблицыЗначений> строка основной таблицы заказов
//      Значений - <Булево> всегда Истина
//
Процедура УсечьФильтрыПоСвойствамЗаказов(пЗаказы)
	
	ОбновлятьИерархиюКатегорийТранспорта = Ложь;
	
	Для каждого КлючЗначение Из пЗаказы Цикл
		
		Заказ = КлючЗначение.Ключ;
		
		//Грузоотправители
		Если ЗначениеЗаполнено(Заказ.Грузоотправитель) Тогда
			
			ЗначениеХэша = Хэши.Грузоотправители[Заказ.Грузоотправитель];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.Грузоотправители[Заказ.Грузоотправитель] - 1;
			СтатистикаЭлементов.Грузоотправители.Вставить(Заказ.Грузоотправитель, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.Грузоотправители.Удалить(Заказ.Грузоотправитель);
				
				СтатистикаЭлементов.Грузоотправители.Удалить(Заказ.Грузоотправитель);
				СтатистикаОтображаемыхЭлементов.Грузоотправители.Удалить(Заказ.Грузоотправитель);
				СтатистикаВыбранныхЭлементов.Грузоотправители.Удалить(Заказ.Грузоотправитель);
				
				ФильтрОтображаемыхЭлементов.Грузоотправители.Удалить(Заказ.Грузоотправитель);
				ФильтрВыбранныхЭлементов.Грузоотправители.Удалить(Заказ.Грузоотправитель);
			КонецЕсли;
			
		Иначе
			
			ЗначениеХэша = Хэши.Грузоотправители["БезГрузоотправителя"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезГрузоотправителя = СтатистикаЭлементов.БезГрузоотправителя - 1;
		КонецЕсли;
		
		
		//категории доставок 2014
		Если ЗначениеЗаполнено(Заказ.КатегорияДоставки2014) Тогда
			
			ЗначениеХэша = Хэши.КатегорииДоставок2014[Заказ.КатегорияДоставки2014];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.КатегорииДоставок2014[Заказ.КатегорияДоставки2014] - 1;
			СтатистикаЭлементов.КатегорииДоставок2014.Вставить(Заказ.КатегорияДоставки2014, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.КатегорииДоставок2014.Удалить(Заказ.КатегорияДоставки2014);
				
				СтатистикаЭлементов.КатегорииДоставок2014.Удалить(Заказ.КатегорияДоставки2014);
				СтатистикаОтображаемыхЭлементов.КатегорииДоставок2014.Удалить(Заказ.КатегорияДоставки2014);
				СтатистикаВыбранныхЭлементов.КатегорииДоставок2014.Удалить(Заказ.КатегорияДоставки2014);
				
				ФильтрОтображаемыхЭлементов.КатегорииДоставок2014.Удалить(Заказ.КатегорияДоставки2014);
				ФильтрВыбранныхЭлементов.КатегорииДоставок2014.Удалить(Заказ.КатегорияДоставки2014);
			КонецЕсли;
			
		Иначе
			
			ЗначениеХэша = Хэши.КатегорииДоставок2014["БезКатегорийДоставок2014"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезКатегорийДоставок2014 = СтатистикаЭлементов.БезКатегорийДоставок2014 - 1;
		КонецЕсли;
		
		//признаки МО
		Если ЗначениеЗаполнено(Заказ.ПризнакМО) Тогда
			
			ЗначениеХэша = Хэши.ПризнакиМО[Заказ.ПризнакМО];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.ПризнакиМО[Заказ.ПризнакМО] - 1;
			СтатистикаЭлементов.ПризнакиМО.Вставить(Заказ.ПризнакМО, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.ПризнакиМО.Удалить(Заказ.ПризнакМО);
				
				СтатистикаЭлементов.ПризнакиМО.Удалить(Заказ.ПризнакМО);
				СтатистикаОтображаемыхЭлементов.ПризнакиМО.Удалить(Заказ.ПризнакМО);
				СтатистикаВыбранныхЭлементов.ПризнакиМО.Удалить(Заказ.ПризнакМО);
				
				ФильтрОтображаемыхЭлементов.ПризнакиМО.Удалить(Заказ.ПризнакМО);
				ФильтрВыбранныхЭлементов.ПризнакиМО.Удалить(Заказ.ПризнакМО);
			КонецЕсли;
			
		Иначе
			
			ЗначениеХэша = Хэши.ПризнакиМО["БезПризнаковМО"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезПризнаковМО = СтатистикаЭлементов.БезПризнаковМО - 1;
		КонецЕсли;
		
		//интернет магазины
		Если ЗначениеЗаполнено(Заказ.ИнтернетМагазин) Тогда
			
			ЗначениеХэша = Хэши.ИнтернетМагазины[Заказ.ИнтернетМагазин];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.ИнтернетМагазины[Заказ.ИнтернетМагазин] - 1;
			СтатистикаЭлементов.ИнтернетМагазины.Вставить(Заказ.ИнтернетМагазин, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.ИнтернетМагазины.Удалить(Заказ.ИнтернетМагазин);
				
				СтатистикаЭлементов.ИнтернетМагазины.Удалить(Заказ.ИнтернетМагазин);
				СтатистикаОтображаемыхЭлементов.ИнтернетМагазины.Удалить(Заказ.ИнтернетМагазин);
				СтатистикаВыбранныхЭлементов.ИнтернетМагазины.Удалить(Заказ.ИнтернетМагазин);
				
				ФильтрОтображаемыхЭлементов.ИнтернетМагазины.Удалить(Заказ.ИнтернетМагазин);
				ФильтрВыбранныхЭлементов.ИнтернетМагазины.Удалить(Заказ.ИнтернетМагазин);
			КонецЕсли;
			
		Иначе
			
			ЗначениеХэша = Хэши.ИнтернетМагазины["БезИнтернетМагазинов"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезИнтернетМагазинов = СтатистикаЭлементов.БезИнтернетМагазинов - 1;
		КонецЕсли;
		
		
		//Часы доставки С
		Если ЗначениеЗаполнено(Заказ.ЧасДоставкиС) Тогда
			
			ЗначениеХэша = Хэши.ЧасыДоставокС[Заказ.ЧасДоставкиС];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.ЧасыДоставокС[Заказ.ЧасДоставкиС] - 1;
			СтатистикаЭлементов.ЧасыДоставокС.Вставить(Заказ.ЧасДоставкиС, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.ЧасыДоставокС.Удалить(Заказ.ЧасДоставкиС);
				
				СтатистикаЭлементов.ЧасыДоставокС.Удалить(Заказ.ЧасДоставкиС);
				СтатистикаОтображаемыхЭлементов.ЧасыДоставокС.Удалить(Заказ.ЧасДоставкиС);
				СтатистикаВыбранныхЭлементов.ЧасыДоставокС.Удалить(Заказ.ЧасДоставкиС);
				
				ФильтрОтображаемыхЭлементов.ЧасыДоставокС.Удалить(Заказ.ЧасДоставкиС);
				ФильтрВыбранныхЭлементов.ЧасыДоставокС.Удалить(Заказ.ЧасДоставкиС);
			КонецЕсли;
			
		Иначе
			
			ЗначениеХэша = Хэши.ЧасыДоставокС["БезЧасовДоставкиС"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезЧасовДоставкиС = СтатистикаЭлементов.БезЧасовДоставкиС - 1;
		КонецЕсли;
		
		
		
		//Часы доставки по
		Если ЗначениеЗаполнено(Заказ.ЧасДоставкиПо) Тогда
			
			ЗначениеХэша = Хэши.ЧасыДоставокПо[Заказ.ЧасДоставкиПо];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.ЧасыДоставокПо[Заказ.ЧасДоставкиПо] - 1;
			СтатистикаЭлементов.ЧасыДоставокПо.Вставить(Заказ.ЧасДоставкиПо, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.ЧасыДоставокПо.Удалить(Заказ.ЧасДоставкиПо);
				
				СтатистикаЭлементов.ЧасыДоставокПо.Удалить(Заказ.ЧасДоставкиПо);
				СтатистикаОтображаемыхЭлементов.ЧасыДоставокПо.Удалить(Заказ.ЧасДоставкиПо);
				СтатистикаВыбранныхЭлементов.ЧасыДоставокПо.Удалить(Заказ.ЧасДоставкиПо);
				
				ФильтрОтображаемыхЭлементов.ЧасыДоставокПо.Удалить(Заказ.ЧасДоставкиПо);
				ФильтрВыбранныхЭлементов.ЧасыДоставокПо.Удалить(Заказ.ЧасДоставкиПо);
			КонецЕсли;
			
		Иначе
			
			ЗначениеХэша = Хэши.ЧасыДоставокПо["БезЧасовДоставкиПо"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезЧасовДоставкиПо = СтатистикаЭлементов.БезЧасовДоставкиПо - 1;
		КонецЕсли;
		
		//категории заказов
		Для каждого КатегорияЗаказа Из Заказ.КатегорииЗаказа Цикл
			
			ЗначениеХэша = Хэши.КатегорииЗаказов[КатегорияЗаказа];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.КатегорииЗаказов[КатегорияЗаказа] - 1;
			СтатистикаЭлементов.КатегорииЗаказов.Вставить(КатегорияЗаказа, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.КатегорииЗаказов.Удалить(КатегорияЗаказа);
				
				СтатистикаЭлементов.КатегорииЗаказов.Удалить(КатегорияЗаказа);
				СтатистикаОтображаемыхЭлементов.КатегорииЗаказов.Удалить(КатегорияЗаказа);
				СтатистикаВыбранныхЭлементов.КатегорииЗаказов.Удалить(КатегорияЗаказа);
				
				ФильтрОтображаемыхЭлементов.КатегорииЗаказов.Удалить(КатегорияЗаказа);
				ФильтрВыбранныхЭлементов.КатегорииЗаказов.Удалить(КатегорияЗаказа);
			КонецЕсли;
		КонецЦикла;
		
		Если Заказ.КатегорииЗаказа.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.КатегорииЗаказов["БезКатегорийЗаказов"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезКатегорийЗаказов = СтатистикаЭлементов.БезКатегорийЗаказов - 1;
		КонецЕсли;
		
		//Районы
		Для каждого РайонАдреса Из Заказ.РайоныАдреса Цикл
			
			ЗначениеХэша = Хэши.РайоныАдресов[РайонАдреса];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.РайоныАдресов[РайонАдреса] - 1;
			СтатистикаЭлементов.РайоныАдресов.Вставить(РайонАдреса, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.РайоныАдресов.Удалить(РайонАдреса);
				
				СтатистикаЭлементов.РайоныАдресов.Удалить(РайонАдреса);
				СтатистикаОтображаемыхЭлементов.РайоныАдресов.Удалить(РайонАдреса);
				СтатистикаВыбранныхЭлементов.РайоныАдресов.Удалить(РайонАдреса);
			
				ФильтрОтображаемыхЭлементов.РайоныАдресов.Удалить(РайонАдреса);
				ФильтрВыбранныхЭлементов.РайоныАдресов.Удалить(РайонАдреса);
			КонецЕсли;
		КонецЦикла;
		
		Если Заказ.РайоныАдреса.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.РайоныАдресов["БезРайонов"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезРайонов = СтатистикаЭлементов.БезРайонов - 1;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорта Из Заказ.КатегорииТранспорта Цикл
			
			ЗначениеХэша = Хэши.ЗаказыПоКатегориямТранспорта[КатегорияТранспорта];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			Количество = СтатистикаЭлементов.КатегорииТранспорта[КатегорияТранспорта] - 1;
			СтатистикаЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, Количество);
			
			Если ЗначениеХэша.Количество() = 0 Тогда
				
				Хэши.ЗаказыПоКатегориямТранспорта.Удалить(КатегорияТранспорта);
			КонецЕсли;
			
			Если Количество = 0 Тогда
				
				СтатистикаЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
				СтатистикаОтображаемыхЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
				СтатистикаВыбранныхЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
				
				ФильтрОтображаемыхЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
				ФильтрВыбранныхЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
			КонецЕсли;
		КонецЦикла;
		
		Если Заказ.КатегорииТранспорта.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.ЗаказыПоКатегориямТранспорта["БезКатегорийТранспорта"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(Заказ));
			
			СтатистикаЭлементов.БезКатегорийТранспорта = СтатистикаЭлементов.БезКатегорийТранспорта - 1;
		КонецЕсли;
		
		ОбновлятьИерархиюКатегорийТранспорта = ОбновлятьИерархиюКатегорийТранспорта или (Заказ.КатегорииТранспорта.Количество() <> 0);
	КонецЦикла;
	
	Если ОбновлятьИерархиюКатегорийТранспорта Тогда
		
		ОбновитьИерархиюКатегорийТранспорта();
	КонецЕсли;
	#Если Клиент Тогда
	Оповестить("ИнициализацияФильтров", Неопределено, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

//Обновляет статисику - добавление заказов
//
//  Параметры:
//    ВидСтатистики - <Строка>
//                      "Основные" - обновляется статистика отображаемых заказов
//                      "Выбранные" - обновляется статистика выбранных заказов
//    пЗаказы - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаЗаказов
//              <Соответствие
//                ключ - строка таблицы ОсновнаяТаблицаЗаказов
//                Значение - <Булево> - всегда Истина
//    ТипДобавления - <Строка>
//                      "ПоФильтру" - добавлены по фильтру, настройки фильтра не трогаются
//                      "ВРучную" - добавлены вручную, корректируются настройки фильтра
//
Процедура ДобавитьЗаказыВСтатистику(ВидСтатистики, пЗаказы, ТипДобавления = "ПоФильтру") Экспорт
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	Если пЗаказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСтатистики = "Основные" Тогда
		Фильтр = ФильтрОтображаемыхЭлементов;
		ОбъектСтатистики = СтатистикаОтображаемыхЭлементов;
	Иначе
		Фильтр = ФильтрВыбранныхЭлементов;
		ОбъектСтатистики = СтатистикаВыбранныхЭлементов;
	КонецЕсли;
	
	Для каждого Заказ Из пЗаказы Цикл
		
		//Грузоотправители
		Если ЗначениеЗаполнено(Заказ.Ключ.Грузоотправитель) Тогда
			УвеличитьКоличествоСсылок(ОбъектСтатистики.Грузоотправители, Заказ.Ключ.Грузоотправитель);
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.Грузоотправители.Вставить(Заказ.Ключ.Грузоотправитель, Истина);
			КонецЕсли;
		Иначе
			ОбъектСтатистики.БезГрузоотправителя = ОбъектСтатистики.БезГрузоотправителя + 1;
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезГрузоотправителя = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбойГрузоотправитель = Ложь;
		КонецЕсли;
		
		//Категории доставок 2014
		Если ЗначениеЗаполнено(Заказ.Ключ.КатегорияДоставки2014) Тогда
			УвеличитьКоличествоСсылок(ОбъектСтатистики.КатегорииДоставок2014, Заказ.Ключ.КатегорияДоставки2014);
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.КатегорииДоставок2014.Вставить(Заказ.Ключ.КатегорияДоставки2014, Истина);
			//КонецЕсли;
		Иначе
			ОбъектСтатистики.БезКатегорийДоставок2014 = ОбъектСтатистики.БезКатегорийДоставок2014 + 1;
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезКатегорийДоставок2014 = Истина;
			//КонецЕсли;
		КонецЕсли;
		//Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбаяКатегория2014 = Ложь;
		//КонецЕсли;

		//признаки мо
		Если ЗначениеЗаполнено(Заказ.Ключ.ПризнакМО) Тогда
			УвеличитьКоличествоСсылок(ОбъектСтатистики.ПризнакиМО, Заказ.Ключ.ПризнакМо);
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.ПризнакиМО.Вставить(Заказ.Ключ.ПризнакМо, Истина);
			//КонецЕсли;
		Иначе
			ОбъектСтатистики.БезПризнаковМО = ОбъектСтатистики.БезПризнаковМО + 1;
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезПризнаковМО = Истина;
			//КонецЕсли;
		КонецЕсли;
		//Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбойПризнакМО = Ложь;
		//КонецЕсли;		
		
		
		//интернет магазины
		Если ЗначениеЗаполнено(Заказ.Ключ.ИнтернетМагазин) Тогда
			УвеличитьКоличествоСсылок(ОбъектСтатистики.ИнтернетМагазины, Заказ.Ключ.ИнтернетМагазин);
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.ИнтернетМагазины.Вставить(Заказ.Ключ.ИнтернетМагазин, Истина);
			//КонецЕсли;
		Иначе
			ОбъектСтатистики.БезИнтернетМагазинов = ОбъектСтатистики.БезИнтернетМагазинов + 1;
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезИнтернетМагазинов = Истина;
			//КонецЕсли;
		КонецЕсли;
		//Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбойИнтернетМагазин = Ложь;
		//КонецЕсли;
		
		
		//часы доставки с
		Если ЗначениеЗаполнено(Заказ.Ключ.ЧасДоставкиС) Тогда
			УвеличитьКоличествоСсылок(ОбъектСтатистики.ЧасыДоставокС, Заказ.Ключ.ЧасДоставкиС);
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.ЧасыДоставокС.Вставить(Заказ.Ключ.ЧасДоставкиС, Истина);
			//КонецЕсли;
		Иначе
			ОбъектСтатистики.БезЧасовДоставкиС = ОбъектСтатистики.БезЧасовДоставкиС + 1;
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезЧасовДоставкиС = Истина;
			//КонецЕсли;
		КонецЕсли;
		//Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбойЧасДоставкиС = Ложь;
		//КонецЕсли;
		
		//часы доставки по
		Если ЗначениеЗаполнено(Заказ.Ключ.ЧасДоставкиПо) Тогда
			УвеличитьКоличествоСсылок(ОбъектСтатистики.ЧасыДоставокПо, Заказ.Ключ.ЧасДоставкиПо);
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.ЧасыДоставокПо.Вставить(Заказ.Ключ.ЧасДоставкиПо, Истина);
			//КонецЕсли;
		Иначе
			ОбъектСтатистики.БезЧасовДоставкиПо = ОбъектСтатистики.БезЧасовДоставкиПо + 1;
			//Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезЧасовДоставкиПо = Истина;
			//КонецЕсли;
		КонецЕсли;
		//Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбойЧасДоставкиПо = Ложь;
		//КонецЕсли;
		
		//Категории заказов
		Для каждого КатегорияЗаказа Из Заказ.Ключ.КатегорииЗаказа Цикл
			
			УвеличитьКоличествоСсылок(ОбъектСтатистики.КатегорииЗаказов, КатегорияЗаказа);
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.КатегорииЗаказов.Вставить(КатегорияЗаказа, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Если Заказ.Ключ.КатегорииЗаказа.Количество() = 0 Тогда
			
			ОбъектСтатистики.БезКатегорийЗаказов = ОбъектСтатистики.БезКатегорийЗаказов + 1;
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезКатегорийЗаказов = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбаяКатегория = Ложь;
		КонецЕсли;
		
		//Районы
		Для каждого РайонАдреса Из Заказ.Ключ.РайоныАдреса Цикл
			
			УвеличитьКоличествоСсылок(ОбъектСтатистики.РайоныАдресов, РайонАдреса);
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.РайоныАдресов.Вставить(РайонАдреса, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Если Заказ.Ключ.РайоныАдреса.Количество() = 0 Тогда
			
			ОбъектСтатистики.БезРайонов = ОбъектСтатистики.БезРайонов + 1;
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезРайонов = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбойРайон = Ложь;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорта Из Заказ.Ключ.КатегорииТранспорта Цикл
			
			УвеличитьКоличествоСсылок(ОбъектСтатистики.КатегорииТранспорта, КатегорияТранспорта);
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.КатегорииТранспорта.Вставить(КатегорияТранспорта, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Если Заказ.Ключ.КатегорииТранспорта.Количество() = 0 Тогда
			
			ОбъектСтатистики.БезКатегорийТранспорта = ОбъектСтатистики.БезКатегорийТранспорта + 1;
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезКатегорийТранспорта = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбаяКатегорияТранспорта = Ложь;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	Оповестить("ОбновленаСтатистика", ВидСтатистики, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

//Обновляет статистику - удаляет заказы из статистики
//
//  Параметры:
//    ВидСтатистики - <Строка>
//                      "Основные" - обновляется статистика отображаемых заказов
//                      "Выбранные" - обновляется статистика выбранных заказов
//    пЗаказы - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаЗаказов
//              <Соответствие
//                ключ - строка таблицы ОсновнаяТаблицаЗаказов
//                Значение - <Булево> - всегда Истина
//
Процедура УдалитьЗаказыИзСтатистики(ВидСтатистики, пЗаказы) Экспорт
	
	Если ТипЗнч(пЗаказы) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пЗаказы, Истина);
		пЗаказы = Врем;
	КонецЕсли;
	
	Если пЗаказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСтатистики = "Основные" Тогда
		ОбъектСтатистики = СтатистикаОтображаемыхЭлементов;
		ОсновнаяКоллекция = ОтображаемыеЗаказы;
	Иначе
		ОбъектСтатистики = СтатистикаВыбранныхЭлементов;
		ОсновнаяКоллекция = ВыбранныеЗаказы;
	КонецЕсли;
	
	Для каждого Заказ Из пЗаказы Цикл
		
		Если ОсновнаяКоллекция[Заказ.Ключ] <> Истина Тогда
			Продолжить;;
		КонецЕсли;
		
		//Грузоотправители
		Если ЗначениеЗаполнено(Заказ.Ключ.Грузоотправитель) Тогда
			УменьшитьКоличествоСсылок(ОбъектСтатистики.Грузоотправители, Заказ.Ключ.Грузоотправитель);
		Иначе
			ОбъектСтатистики.БезГрузоотправителя = ОбъектСтатистики.БезГрузоотправителя - 1;
		КонецЕсли;
		
		//категории доставок 2014
		Если ЗначениеЗаполнено(Заказ.Ключ.КатегорияДоставки2014) Тогда
			УменьшитьКоличествоСсылок(ОбъектСтатистики.КатегорииДоставок2014, Заказ.Ключ.КатегорияДоставки2014);
		Иначе
			ОбъектСтатистики.БезКатегорийДоставок2014 = ОбъектСтатистики.БезКатегорийДоставок2014 - 1;
		КонецЕсли;
		
		//категории доставок 2014
		Если ЗначениеЗаполнено(Заказ.Ключ.ПризнакМО) Тогда
			УменьшитьКоличествоСсылок(ОбъектСтатистики.ПризнакиМО, Заказ.Ключ.ПризнакМО);
		Иначе
			ОбъектСтатистики.БезПризнаковМО = ОбъектСтатистики.БезПризнаковМО - 1;
		КонецЕсли;
		
		
		//интернет магазины
		Если ЗначениеЗаполнено(Заказ.Ключ.ИнтернетМагазин) Тогда
			УменьшитьКоличествоСсылок(ОбъектСтатистики.ИнтернетМагазины, Заказ.Ключ.ИнтернетМагазин);
		Иначе
			ОбъектСтатистики.БезИнтернетМагазинов = ОбъектСтатистики.БезИнтернетМагазинов - 1;
		КонецЕсли;
		
		
		//часы доставок с
		Если ЗначениеЗаполнено(Заказ.Ключ.ЧасДоставкиС) Тогда
			УменьшитьКоличествоСсылок(ОбъектСтатистики.ЧасыДоставокС, Заказ.Ключ.ЧасДоставкиС);
		Иначе
			ОбъектСтатистики.БезЧасовДоставокС = ОбъектСтатистики.БезЧасовДоставокС - 1;
		КонецЕсли;
		
		
		//часы доставок по
		Если ЗначениеЗаполнено(Заказ.Ключ.ЧасДоставкиПо) Тогда
			УменьшитьКоличествоСсылок(ОбъектСтатистики.ЧасыДоставокПо, Заказ.Ключ.ЧасДоставкиПо);
		Иначе
			ОбъектСтатистики.БезЧасовДоставокПо = ОбъектСтатистики.БезЧасовДоставокПо - 1;
		КонецЕсли;
		
		
		//Категории заказов
		Для каждого КатегорияЗаказа Из Заказ.Ключ.КатегорииЗаказа Цикл
			
			УменьшитьКоличествоСсылок(ОбъектСтатистики.КатегорииЗаказов, КатегорияЗаказа);
		КонецЦикла;
		
		Если Заказ.Ключ.КатегорииЗаказа.Количество() = 0 Тогда
			
			ОбъектСтатистики.БезКатегорийЗаказов = ОбъектСтатистики.БезКатегорийЗаказов - 1;
		КонецЕсли;
		
		//Районы
		Для каждого РайонАдреса Из Заказ.Ключ.РайоныАдреса Цикл
			
			УменьшитьКоличествоСсылок(ОбъектСтатистики.РайоныАдресов, РайонАдреса);
		КонецЦикла;
		
		Если Заказ.Ключ.РайоныАдреса.Количество() = 0 Тогда
			
			ОбъектСтатистики.БезРайонов = ОбъектСтатистики.БезРайонов - 1;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорта Из Заказ.Ключ.КатегорииТранспорта Цикл
			
			УменьшитьКоличествоСсылок(ОбъектСтатистики.КатегорииТранспорта, КатегорияТранспорта);
		КонецЦикла;
		
		Если Заказ.Ключ.КатегорииТранспорта.Количество() = 0 Тогда
			
			ОбъектСтатистики.БезКатегорийТранспорта = ОбъектСтатистики.БезКатегорийТранспорта - 1;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	Оповестить("ОбновленаСтатистика", ВидСтатистики, ЭтотОбъект);
	#КонецЕсли
	
КонецПроцедуры

//Устанавливает фильтр на отображаемые заказы
//
//  Параметры:
//    ФильтроватьТранспорт - <Булево> Истина - устанавливается фильтр и по транспорту
//
Процедура УстановитьФильтрЗаказов(ФильтроватьТранспорт = Ложь) Экспорт
	
	Перем ДобавленныеЗаказы, УдаляемыеЗаказы;
	
	НовыеЗаказы = ПолучитьЗаказыПоФильтру("Основные", ?(ФильтроватьТранспорт, "Транспорт", "Заказы"));
	
	ПолучитьРазличияСписков(ОтображаемыеЗаказыПоПредыдущемуФильтру, НовыеЗаказы, ДобавленныеЗаказы, УдаляемыеЗаказы);
	ПолучитьПересеченияСписков(ОтображаемыеЗаказы, УдаляемыеЗаказы, УдаляемыеЗаказы);
	
	ДобавитьЗаказыВОтображаемые(ДобавленныеЗаказы);
	УдалитьЗаказыИзОтображаемых(УдаляемыеЗаказы);
	
	ОтображаемыеЗаказыПоПредыдущемуФильтру = НовыеЗаказы;
	
	Если ФильтроватьТранспорт Тогда
		УстановитьФильтрТранспорта();
	Иначе
		ОтправитьСуммарнуюИнформацию();
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает фильтр на отображение выбранных заказов
//
//  Параметры:
//    ФильтроватьТранспорт - <Булево> Истина - устанавливается фильтр и по транспорту
//
Процедура УстановитьФильтрВыбранныхЗаказов(ФильтроватьТранспорт = Ложь) Экспорт
	
	Перем ДобавленныеЗаказы, УдаляемыеЗаказы;
	
	Если (не ФильтрПустой(ФильтрВыбранныхЭлементов, "Заказы")) или (не ФильтроватьТранспорт) Тогда
		
		НовыеВыбранныеЗаказы = ПолучитьЗаказыПоФильтру("Выбранные", ?(ФильтроватьТранспорт, "Транспорт", "Заказы"));
		
		ПолучитьРазличияСписков(ВыбранныеЗаказыПоПредыдущемуФильтру, НовыеВыбранныеЗаказы, ДобавленныеЗаказы, УдаляемыеЗаказы);
		ПолучитьПересеченияСписков(ВыбранныеЗаказы, УдаляемыеЗаказы, УдаляемыеЗаказы);
		
		ДобавитьЗаказыВВыбранные(ДобавленныеЗаказы);
		УдалитьЗаказыИзВыбранных(УдаляемыеЗаказы);
		
		ВыбранныеЗаказыПоПредыдущемуФильтру = НовыеВыбранныеЗаказы;
		
	Иначе
		
		УдалитьЗаказыИзВыбранных(ВыбранныеЗаказы);
		ВыбранныеЗаказыПоПредыдущемуФильтру.Очистить();
	КонецЕсли;
	
	Если ФильтроватьТранспорт Тогда
		УстановитьФильтрВыбранногоТранспорта();
	Иначе
		ОтправитьСуммарнуюИнформацию();
	КонецЕсли;
	
КонецПроцедуры

//Возвращает список заказов из основной таблицы по фильтру
//
//  Параметры:
//    ВидФильтрации - <Строка>
//                    "Основные" - получаются отображаемые заказы по фильтру
//                    "Выбранные" - получаются выбранные заказы, дополнительно проверяется, что заказ есть в отображаемых заказах
//
Функция ПолучитьЗаказыПоФильтру(ВидФильтрации, ВидДожатия) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ВидФильтрации = "Основные" Тогда
		Фильтр = ФильтрОтображаемыхЭлементов;
		КоллекцияДожатия = ОтображаемыйТранспорт;
		
	ИначеЕсли ВидФильтрации = "Выбранные" Тогда
		Фильтр = ФильтрВыбранныхЭлементов;
		КоллекцияДожатия = ВыбранныйТранспорт;
		
	КонецЕсли;
	
	//Грузоотправители
	Если не Фильтр.ЛюбойГрузоотправитель Тогда
		
		ПрошедшиеФильтрГрузоотправителей = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.Грузоотправители Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.Грузоотправители[КлючЗначение.Ключ];
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрГрузоотправителей.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрГрузоотправителей.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезКатегорийЗаказов Тогда
			
			СтрокиЗаказов = Хэши.Грузоотправители["БезГрузоотправителя"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрГрузоотправителей.Вставить(СтрокаЗаказа, Истина);
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрГрузоотправителей.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Категории доставок 2014
	Если не Фильтр.ЛюбаяКатегория2014 Тогда
		
		ПрошедшиеФильтрКатегорийДоставок2014 = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.КатегорииДоставок2014 Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.КатегорииДоставок2014[КлючЗначение.Ключ];
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрКатегорийДоставок2014.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрКатегорийДоставок2014.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезКатегорийДоставок2014 Тогда
			
			СтрокиЗаказов = Хэши.КатегорииДоставок2014["БезКатегорийДоставок2014"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрКатегорийДоставок2014.Вставить(СтрокаЗаказа, Истина);
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрКатегорийДоставок2014.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	

	//признаки мо
	Если не Фильтр.ЛюбойПризнакМО Тогда
		
		ПрошедшиеФильтрПризнаковМО = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ПризнакиМО Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.ПризнакиМО[КлючЗначение.Ключ];
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрПризнаковМО.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрПризнаковМО.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезПризнаковМО Тогда
			
			СтрокиЗаказов = Хэши.ПризнакиМО["БезПризнаковМО"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрПризнаковМО.Вставить(СтрокаЗаказа, Истина);
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрПризнаковМО.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	//Интернет магазины
	Если не Фильтр.ЛюбойИнтернетМагазин Тогда
		
		ПрошедшиеФильтрИнтернетМагазинов = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ИнтернетМагазины Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.ИнтернетМагазины[КлючЗначение.Ключ];
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрИнтернетМагазинов.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрИнтернетМагазинов.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезИнтернетМагазинов Тогда
			
			СтрокиЗаказов = Хэши.ИнтернетМагазины["БезИнтернетМагазинов"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрИнтернетМагазинов.Вставить(СтрокаЗаказа, Истина);
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрИнтернетМагазинов.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Часы доставок с
	Если не Фильтр.ЛюбойЧасДоставкиС Тогда
		
		ПрошедшиеФильтрЧасовДоставокС = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ЧасыДоставокС Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.ЧасыДоставокС[КлючЗначение.Ключ];
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрЧасовДоставокС.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрЧасовДоставокС.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезЧасовДоставкиС Тогда
			
			СтрокиЗаказов = Хэши.ЧасыДоставокС["БезЧасовДоставкиС"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрЧасовДоставокС.Вставить(СтрокаЗаказа, Истина);
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрЧасовДоставокС.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	//Часы доставок по
	Если не Фильтр.ЛюбойЧасДоставкиПо Тогда
		
		ПрошедшиеФильтрЧасовДоставокПо = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ЧасыДоставокПо Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.ЧасыДоставокПо[КлючЗначение.Ключ];
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрЧасовДоставокПо.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрЧасовДоставокПо.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезЧасовДоставкиПо Тогда
			
			СтрокиЗаказов = Хэши.ЧасыДоставокПо["БезЧасовДоставкиПо"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрЧасовДоставокПо.Вставить(СтрокаЗаказа, Истина);
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрЧасовДоставокПо.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	
	//Категории заказов
	Если не Фильтр.ЛюбаяКатегория Тогда
		
		ПрошедшиеФильтрКатегорийЗаказов = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.КатегорииЗаказов Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.КатегорииЗаказов[КлючЗначение.Ключ];
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрКатегорийЗаказов.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрКатегорийЗаказов.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезКатегорийЗаказов Тогда
			
			СтрокиЗаказов = Хэши.КатегорииЗаказов["БезКатегорийЗаказов"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрКатегорийЗаказов.Вставить(СтрокаЗаказа, Истина);
					
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрКатегорийЗаказов.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Районы
	Если не Фильтр.ЛюбойРайон Тогда
		
		ПрошедшиеФильтрРайонов = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.РайоныАдресов Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.РайоныАдресов[КлючЗначение.Ключ];
				Если СтрокиЗаказов = Неопределено Тогда Продолжить; КонецЕсли; //AVarfolomeev
				
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрРайонов.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрРайонов.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезРайонов Тогда
			
			СтрокиЗаказов = Хэши.РайоныАдресов["БезРайонов"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрРайонов.Вставить(СтрокаЗаказа, Истина);
					
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрРайонов.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Категории транспорта
	Если не Фильтр.ЛюбаяКатегорияТранспорта Тогда
		
		ПрошедшиеФильтрКатегорийТранспорта = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.КатегорииТранспорта Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиЗаказов = Хэши.ЗаказыПоКатегориямТранспорта[КлючЗначение.Ключ];
				Если СтрокиЗаказов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрКатегорийТранспорта.Вставить(СтрокаЗаказа, Истина);
					Иначе
						
						Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
							
							ПрошедшиеФильтрКатегорийТранспорта.Вставить(СтрокаЗаказа, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезКатегорийТранспорта Тогда
			
			СтрокиЗаказов = Хэши.ЗаказыПоКатегориямТранспорта["БезКатегорийТранспорта"];
			Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрКатегорийТранспорта.Вставить(СтрокаЗаказа, Истина);
					
				Иначе
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] <> Неопределено Тогда
						
						ПрошедшиеФильтрКатегорийТранспорта.Вставить(СтрокаЗаказа, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Дожатие по транспорту
	Если ВидДожатия = "Заказы" Тогда
		
		МаксимальнаяГрузоподъемность = 0;
		МаксимальнаяГрузовместимость = 0;
		
		Для каждого КлючЗначение Из КоллекцияДожатия Цикл
			
			ТекущийТранспорт = КлючЗначение.Ключ;
			
			МаксимальнаяГрузоподъемность = Макс(МаксимальнаяГрузоподъемность, ТекущийТранспорт.Грузоподъемность);
			МаксимальнаяГрузовместимость = Макс(МаксимальнаяГрузовместимость, ТекущийТранспорт.Грузовместимость);
		КонецЦикла;
		
		МаксимальнаяГрузоподъемность = МаксимальнаяГрузоподъемность * 1000;// Приводим к килограммам
	КонецЕсли;
	
	//Формирование результата
	Для каждого СтрокаЗаказа Из ОсновнаяТаблицаЗаказов Цикл
		
		//Фильтр по весу
		Если не Фильтр.ЛюбойВес Тогда
			
			Если СтрокаЗаказа.Вес < Фильтр.МинимальныйВес
			     или ( СтрокаЗаказа.Вес > Фильтр.МаксимальныйВес
			         и ЗначениеЗаполнено(Фильтр.МаксимальныйВес)) Тогда
				Продолжить;
			Иначе
				Если ВидФильтрации = "Выбранные" Тогда
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Фильтр по объему
		Если не Фильтр.ЛюбойОбъем Тогда
			
			Если СтрокаЗаказа.Объем < Фильтр.МинимальныйОбъем
			     или ( СтрокаЗаказа.Объем > Фильтр.МаксимальныйОбъем
			         и ЗначениеЗаполнено(Фильтр.МаксимальныйОбъем)) Тогда
				Продолжить;
			Иначе
				Если ВидФильтрации = "Выбранные" Тогда
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		//Фильтр по количеству мест
		Если не Фильтр.ЛюбоеКоличествоМест Тогда
			
			Если СтрокаЗаказа.Места < Фильтр.МинимальноеКоличествоМест
			     или ( СтрокаЗаказа.Места > Фильтр.МаксимальноеКоличествоМест
			         и ЗначениеЗаполнено(Фильтр.МаксимальноеКоличествоМест)) Тогда
				Продолжить;
			Иначе
				Если ВидФильтрации = "Выбранные" Тогда
					
					Если ОтображаемыеЗаказы[СтрокаЗаказа] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//прочие фильтры
		Если (не Фильтр.ЛюбойГрузоотправитель)
		     и ПрошедшиеФильтрГрузоотправителей[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбаяКатегория)
		     и ПрошедшиеФильтрКатегорийЗаказов[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбаяКатегория2014)
		     и ПрошедшиеФильтрКатегорийДоставок2014[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если (не Фильтр.ЛюбойПризнакМО)
		     и ПрошедшиеФильтрПризнаковМО[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если (не Фильтр.ЛюбойИнтернетМагазин)
		     и ПрошедшиеФильтрИнтернетМагазинов[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если (не Фильтр.ЛюбойЧасДоставкиС)
		     и ПрошедшиеФильтрЧасовДоставокС[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбойЧасДоставкиПо)
		     и ПрошедшиеФильтрЧасовДоставокПо[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбойРайон)
		     и ПрошедшиеФильтрРайонов[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбаяКатегорияТранспорта)
		     и ПрошедшиеФильтрКатегорийТранспорта[СтрокаЗаказа] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Дожатие по транспорту
		Если ВидДожатия = "Заказы" Тогда
			
			Если УсекатьДоставкиПоВесу Тогда
				
				Если СтрокаЗаказа.Вес > МаксимальнаяГрузоподъемность Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если УсекатьДоставкиПоОбъему Тогда
				
				Если СтрокаЗаказа.Объем > МаксимальнаяГрузовместимость Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для каждого КлючЗначение Из КоллекцияДожатия Цикл
				
				ТекущийТранспорт = КлючЗначение.Ключ;
				
				Если ТекущийТранспорт.НачалоДоступности > СтрокаЗаказа.ВремяПрибытияС
				     и ТекущийТранспорт.НачалоДоступности < СтрокаЗаказа.ВремяПрибытияПо
					 и СтрокаЗаказа.ВремяПрибытияПо - ТекущийТранспорт.НачалоДоступности < 1800 Тогда
					
					Продолжить;
				 КонецЕсли;
				 
				Если ТекущийТранспорт.КонецДоступности > СтрокаЗаказа.ВремяПрибытияС
					 и ТекущийТранспорт.КонецДоступности < СтрокаЗаказа.ВремяПрибытияПо
					 и ТекущийТранспорт.КонецДоступности - СтрокаЗаказа.ВремяПрибытияС < 1800 Тогда
					
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат.Вставить(СтрокаЗаказа, Истина);
	КонецЦикла;
	
	ВозВрат Результат;
	
КонецФункции

//* Транспорт *//

//Дополняет фильтр и статистику фильтра свойствами транспорта
//
//  Параметры:
//    пТранспорт - <Соответствие> список транспорта.
//      Ключ - <СтрокаТаблицыЗначений>  строка основной таблицы транспорт
//      Значение - <Булево>  всегда Истина
//
Процедура ДополнитьФильтрыПоСвойствамТранспорта(пТранспорт)
	
	ОбновлятьИерархиюКатегорийТранспорта = Ложь;
	
	Для каждого КлючЗначение Из пТранспорт Цикл
		
		ТекущийТранспорт = КлючЗначение.Ключ;
		
		//Виды Транспорта
		Если ЗначениеЗаполнено(ТекущийТранспорт.Вид) Тогда
			
			ЗначениеХэша = Хэши.ВидыТранспорта[ТекущийТранспорт.Вид];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, ЗначениеХэша);
				
				СтатистикаЭлементов.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, 0);
				СтатистикаОтображаемыхЭлементов.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, 0);
				СтатистикаВыбранныхЭлементов.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, 0);
			
				ФильтрОтображаемыхЭлементов.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, Ложь);
				ФильтрВыбранныхЭлементов.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(ТекущийТранспорт);
			
			Количество = СтатистикаЭлементов.ВидыТранспорта[ТекущийТранспорт.Вид] + 1;
			СтатистикаЭлементов.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, Количество);
			
		Иначе
			
			ЗначениеХэша = Хэши.ВидыТранспорта["БезВидовТранспорта"];
			ЗначениеХэша.Добавить(ТекущийТранспорт);
			
			СтатистикаЭлементов.БезВидовТранспорта = СтатистикаЭлементов.БезВидовТранспорта + 1;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорта Из ТекущийТранспорт.КатегорииТранспорта Цикл
			
			ЗначениеХэша = Хэши.ТранспортПоКатегориямТранспорта[КатегорияТранспорта];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.ТранспортПоКатегориямТранспорта.Вставить(КатегорияТранспорта, ЗначениеХэша);
				
				СтатистикаЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, 0);
				СтатистикаОтображаемыхЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, 0);
				СтатистикаВыбранныхЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, 0);
				
				ФильтрОтображаемыхЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, Ложь);
				ФильтрВыбранныхЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, Ложь);
			КонецЕсли;
			ЗначениеХэша.Добавить(ТекущийТранспорт);
			
			Количество = СтатистикаЭлементов.КатегорииТранспорта[КатегорияТранспорта] + 1;
			СтатистикаЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, Количество);
		КонецЦикла;
		
		Если ТекущийТранспорт.КатегорииТранспорта.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.ТранспортПоКатегориямТранспорта["БезКатегорийТранспорта"];
			ЗначениеХэша.Добавить(ТекущийТранспорт);
			
			СтатистикаЭлементов.БезКатегорийТранспорта = СтатистикаЭлементов.БезКатегорийТранспорта + 1;
		КонецЕсли;
		
		//Районы
		Для каждого Район Из ТекущийТранспорт.Районы Цикл
			
			ЗначениеХэша = Хэши.РайоныТранспорта[Район];
			Если ЗначениеХэша = Неопределено Тогда
				
				ЗначениеХэша = Новый Массив;
				Хэши.РайоныТранспорта.Вставить(Район, ЗначениеХэша);
			КонецЕсли;
			ЗначениеХэша.Добавить(ТекущийТранспорт);
		КонецЦикла;
		
		Если ТекущийТранспорт.Районы.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.РайоныТранспорта["БезРайонов"];
			ЗначениеХэша.Добавить(ТекущийТранспорт);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновлятьИерархиюКатегорийТранспорта Тогда
		
		ОбновитьИерархиюКатегорийТранспорта();
	КонецЕсли;
	#Если Клиент Тогда
	Оповестить("ИнициализацияФильтров", Неопределено, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

//Усекает фильтр и статистику фильтра свойствами транспорта
//
//  Параметры:
//    пТранспорт - <Соответствие> список транспорта.
//      Ключ - <СтрокаТаблицыЗначений>  строка основной таблицы транспорт
//      Значение - <Булево>  всегда Истина
//
Процедура УсечьФильтрыПоСвойствамТранспорта(пТранспорт)
	
	ОбновлятьИерархиюКатегорийТранспорта = Ложь;
	
	Для каждого КлючЗначение Из пТранспорт Цикл
		
		ТекущийТранспорт = КлючЗначение.Ключ;
		
		//Виды Транспорта
		Если ЗначениеЗаполнено(ТекущийТранспорт.Вид) Тогда
			
			ЗначениеХэша = Хэши.ВидыТранспорта[ТекущийТранспорт.Вид];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(ТекущийТранспорт));
			
			Количество = СтатистикаЭлементов.ВидыТранспорта[ТекущийТранспорт.Вид] - 1;
			СтатистикаЭлементов.ВидыТранспорта.Вставить(ТекущийТранспорт.Вид, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.ВидыТранспорта.Удалить(ТекущийТранспорт.Вид);
				
				СтатистикаЭлементов.ВидыТранспорта.Удалить(ТекущийТранспорт.Вид);
				СтатистикаОтображаемыхЭлементов.ВидыТранспорта.Удалить(ТекущийТранспорт.Вид);
				СтатистикаВыбранныхЭлементов.ВидыТранспорта.Удалить(ТекущийТранспорт.Вид);
			
				ФильтрОтображаемыхЭлементов.ВидыТранспорта.Удалить(ТекущийТранспорт.Вид);
				ФильтрВыбранныхЭлементов.ВидыТранспорта.Удалить(ТекущийТранспорт.Вид);
			КонецЕсли;
			
		Иначе
			
			ЗначениеХэша = Хэши.ВидыТранспорта["БезВидовТранспорта"];
			ЗначениеХэша.Добавить(ЗначениеХэша.Найти(ТекущийТранспорт));
			
			СтатистикаЭлементов.БезВидовТранспорта = СтатистикаЭлементов.БезВидовТранспорта - 1;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорта Из ТекущийТранспорт.КатегорииТранспорта Цикл
			
			ЗначениеХэша = Хэши.ТранспортПоКатегориямТранспорта[КатегорияТранспорта];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(ТекущийТранспорт));
			
			Количество = СтатистикаЭлементов.КатегорииТранспорта[КатегорияТранспорта] - 1;
			СтатистикаЭлементов.КатегорииТранспорта.Вставить(КатегорияТранспорта, Количество);
			
			Если Количество = 0 Тогда
				
				Хэши.ТранспортПоКатегориямТранспорта.Удалить(КатегорияТранспорта);
				
				СтатистикаЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
				СтатистикаОтображаемыхЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
				СтатистикаВыбранныхЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
				
				ФильтрОтображаемыхЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
				ФильтрВыбранныхЭлементов.КатегорииТранспорта.Удалить(КатегорияТранспорта);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийТранспорт.КатегорииТранспорта.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.ТранспортПоКатегориямТранспорта["БезКатегорийТранспорта"];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(ТекущийТранспорт));
			
			СтатистикаЭлементов.БезКатегорийТранспорта = СтатистикаЭлементов.БезКатегорийТранспорта - 1;
		КонецЕсли;
		
		//Районы
		Для каждого Район Из ТекущийТранспорт.Районы Цикл
			
			ЗначениеХэша = Хэши.РайоныТранспорта[Район];
			ЗначениеХэша.Удалить(ЗначениеХэша.Найти(ТекущийТранспорт));
			
			Если ЗначениеХэша.Количество() = 0 Тогда
				
				Хэши.РайоныТранспорта.Удалить(Район);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийТранспорт.Районы.Количество() = 0 Тогда
			
			ЗначениеХэша = Хэши.РайоныТранспорта["БезРайонов"];
			ЗначениеХэша.Добавить(ТекущийТранспорт);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновлятьИерархиюКатегорийТранспорта Тогда
		
		ОбновитьИерархиюКатегорийТранспорта();
	КонецЕсли;
	#Если Клиент Тогда
	Оповестить("ИнициализацияФильтров", Неопределено, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

//Обновляет статистику - добавляет транспорт
//
//  Параметры:
//    ВидСтатистики - <Строка>
//                      "Основные" - обновляется статистика отображаемых заказов
//                      "Выбранные" - обновляется статистика выбранных заказов
//    пТранспорт - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаТранспорта
//                 <Соответствие
//                   ключ - строка таблицы ОсновнаяТаблицаТранспорта
//                   Значение - <Булево> - всегда Истина
//    ТипДобавления - <Строка>
//                      "ПоФильтру" - добавлены по фильтру, настройки фильтра не трогаются
//                      "ВРучную" - добавлены вручную, корректируются настройки фильтра
//
Процедура ДобавитьТранспортВСтатистику(ВидСтатистики, пТранспорт, ТипДобавления = "ПоФильтру") Экспорт
	
	Если ТипЗнч(пТранспорт) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пТранспорт, Истина);
		пТранспорт = Врем;
	КонецЕсли;
	
	Если пТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСтатистики = "Основные" Тогда
		Фильтр = ФильтрОтображаемыхЭлементов;
		ОбъектСтатистики = СтатистикаОтображаемыхЭлементов;
	Иначе
		Фильтр = ФильтрВыбранныхЭлементов;
		ОбъектСтатистики = СтатистикаВыбранныхЭлементов;
	КонецЕсли;
	
	Для каждого ТекущийТранспорт Из пТранспорт Цикл
		
		//Виды транспорта
		Если ЗначениеЗаполнено(ТекущийТранспорт.Ключ.Вид) Тогда
			УвеличитьКоличествоСсылок(ОбъектСтатистики.ВидыТранспорта, ТекущийТранспорт.Ключ.Вид);
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.ВидыТранспорта.Вставить(ТекущийТранспорт.Ключ.Вид, Истина);
			КонецЕсли;
		Иначе
			ОбъектСтатистики.БезВидовТранспорта = ОбъектСтатистики.БезВидовТранспорта + 1;
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезВидовТранспорта = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбойВидТранспорта = Ложь;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорта Из ТекущийТранспорт.Ключ.КатегорииТранспорта Цикл
			
			УвеличитьКоличествоСсылок(ОбъектСтатистики.КатегорииТранспорта, КатегорияТранспорта);
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.КатегорииТранспорта.Вставить(КатегорияТранспорта, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийТранспорт.Ключ.КатегорииТранспорта.Количество() = 0 Тогда
			
			ОбъектСтатистики.БезКатегорийТранспорта = ОбъектСтатистики.БезКатегорийТранспорта + 1;
			Если ТипДобавления = "ВРучную" Тогда
				Фильтр.БезКатегорийТранспорта = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТипДобавления = "ВРучную" Тогда
			Фильтр.ЛюбаяКатегорияТранспорта = Ложь;
		КонецЕсли;
		
		//Районы
		Если ТипДобавления = "ВРучную" Тогда
			
			Для каждого Район Из ТекущийТранспорт.Ключ.Районы Цикл
				
				Если Фильтр.РайоныАдресов[Район] <> Неопределено Тогда
					
					Фильтр.РайоныАдресов.Вставить(Район, Истина);
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущийТранспорт.Ключ.Районы.Количество() = 0 Тогда
				
				Фильтр.БезРайонов = Истина;
			КонецЕсли;
			
			Фильтр.ЛюбойРайон = Ложь;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	Оповестить("ОбновленаСтатистика", ВидСтатистики, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

//Обновляет статистику - удаляет транспорт
//
//  Параметры:
//    ВидСтатистики - <Строка>
//                      "Основные" - обновляется статистика отображаемых заказов
//                      "Выбранные" - обновляется статистика выбранных заказов
//    пТранспорт - <СтрокаТаблицыЗначений> - строка таблицы ОсновнаяТаблицаТранспорта
//                 <Соответствие
//                   ключ - строка таблицы ОсновнаяТаблицаТранспорта
//                   Значение - <Булево> - всегда Истина
//
Процедура УдалитьТранспортИзСтатистики(ВидСтатистики, пТранспорт) Экспорт
	
	Если ТипЗнч(пТранспорт) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Врем = Новый Соответствие;
		Врем.Вставить(пТранспорт, Истина);
		пТранспорт = Врем;
	КонецЕсли;
	
	Если пТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСтатистики = "Основные" Тогда
		ОбъектСтатистики = СтатистикаОтображаемыхЭлементов;
		ОсновнаяКоллекция = ОтображаемыйТранспорт;
	Иначе
		ОбъектСтатистики = СтатистикаВыбранныхЭлементов;
		ОсновнаяКоллекция = ВыбранныйТранспорт;
	КонецЕсли;
	
	ИнтервалВесовОбъемовНарушен = Ложь;
	
	Для каждого ТекущийТранспорт Из пТранспорт Цикл
		
		Если ОсновнаяКоллекция[ТекущийТранспорт.Ключ] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		//Виды транспорта
		Если ЗначениеЗаполнено(ТекущийТранспорт.Ключ.Вид) Тогда
			УменьшитьКоличествоСсылок(ОбъектСтатистики.ВидыТранспорта, ТекущийТранспорт.Ключ.Вид);
		Иначе
			ОбъектСтатистики.БезВидовТранспорта = ОбъектСтатистики.БезВидовТранспорта - 1;
		КонецЕсли;
		
		//Категории транспорта
		Для каждого КатегорияТранспорта Из ТекущийТранспорт.Ключ.КатегорииТранспорта Цикл
			
			УменьшитьКоличествоСсылок(ОбъектСтатистики.КатегорииТранспорта, КатегорияТранспорта);
		КонецЦикла;
		
		Если ТекущийТранспорт.Ключ.КатегорииТранспорта.Количество() = 0 Тогда
			
			ОбъектСтатистики.БезКатегорийТранспорта = ОбъектСтатистики.БезКатегорийТранспорта - 1;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	Оповестить("ОбновленаСтатистика", ВидСтатистики, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

//Устанавливает фильтр транпорта
//
//  Параметры:
//    ФильтроватьЗаказы - <Булево> Истина - устанавливается фильтр и по заказам
//
Процедура УстановитьФильтрТранспорта(ФильтроватьЗаказы = Ложь) Экспорт
	
	Перем ДобавленныйТранспорт, УдаляемыйТранспорт;
	
	НовыйТранспорт = ПолучитьТранспортПоФильтру("Основные", ?(не ФильтроватьЗаказы, "Транспорт", "Заказы"));
	
	ПолучитьРазличияСписков(ОтображаемыйТранспортПоПредыдущемуФильтру, НовыйТранспорт, ДобавленныйТранспорт, УдаляемыйТранспорт);
	ПолучитьПересеченияСписков(ОтображаемыйТранспорт, УдаляемыйТранспорт, УдаляемыйТранспорт);
	
	ДобавитьТранспортВОтображаемый(ДобавленныйТранспорт);
	УдалитьТранспортИзОтображаемого(УдаляемыйТранспорт);
	
	ОтображаемыйТранспортПоПредыдущемуФильтру = НовыйТранспорт;
	
	Если ФильтроватьЗаказы Тогда
		УстановитьФильтрЗаказов();
	Иначе
		ОтправитьСуммарнуюИнформацию();
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает фильтр выбранного транпорта
//
//  Параметры:
//    ФильтроватьЗаказы - <Булево> Истина - устанавливается фильтр и по заказам
//
Процедура УстановитьФильтрВыбранногоТранспорта(ФильтроватьЗаказы = Ложь) Экспорт
	
	Перем ДобавленныйТранспорт, УдаляемыйТранспорт;
	
	Если (не ФильтрПустой(ФильтрВыбранныхЭлементов, "Транспорт")) или (не ФильтроватьЗаказы) Тогда
		
		НовыйВыбранныйТранспорт = ПолучитьТранспортПоФильтру("Выбранные", ?(не ФильтроватьЗаказы, "Транспорт", "Заказы"));
		
		ПолучитьРазличияСписков(ВыбранныйТранспортПоПредыдущемуФильтру, НовыйВыбранныйТранспорт, ДобавленныйТранспорт, УдаляемыйТранспорт);
		ПолучитьПересеченияСписков(ВыбранныйТранспорт, УдаляемыйТранспорт, УдаляемыйТранспорт);
		
		ДобавитьТранспортВВыбранные(ДобавленныйТранспорт);
		УдалитьТранспортИзВыбранных(УдаляемыйТранспорт);
		
		ВыбранныйТранспортПоПредыдущемуФильтру = НовыйВыбранныйТранспорт;
		
	Иначе
		
		УдалитьТранспортИзВыбранных(ВыбранныйТранспорт);
		ВыбранныйТранспортПоПредыдущемуФильтру.Очистить();
	КонецЕсли;
	
	Если ФильтроватьЗаказы Тогда
		УстановитьФильтрВыбранныхЗаказов();
	Иначе
		ОтправитьСуммарнуюИнформацию();
	КонецЕсли;
	
КонецПроцедуры

//Возвращает список транспорта из основной таблицы по фильтру
//
//  Параметры:
//    ВидФильтрации - <Строка>
//                    "Основные" - получаются транспорта по фильтру
//                    "Выбранные" - дополнительно проверяется, что транспорт есть в Транспорт
//
Функция ПолучитьТранспортПоФильтру(Знач ВидФильтрации, ВидДожатия)
	
	Результат = Новый Соответствие;
	
	Если ВидФильтрации = "Основные" Тогда
		Фильтр = ФильтрОтображаемыхЭлементов;
		КоллекцияДожатия = ОтображаемыеЗаказы;
		
	ИначеЕсли ВидФильтрации = "Выбранные" Тогда
		Фильтр = ФильтрВыбранныхЭлементов;
		КоллекцияДожатия = ВыбранныеЗаказы;
		
	КонецЕсли;
	
	Если ВидДожатия = "Транспорт" Тогда
		Если КоллекцияДожатия.Количество() = 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	//Вид транспорта
	Если не Фильтр.ЛюбойВидТранспорта Тогда
		
		ПрошедшиеФильтрВидовТранспорта = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.ВидыТранспорта Цикл
			
			Если КлючЗначение.Значение Тогда
				
				СтрокиТранспорта = Хэши.ВидыТранспорта[КлючЗначение.Ключ];
				Для каждого СтрокаТранспорта Из СтрокиТранспорта Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрВидовТранспорта.Вставить(СтрокаТранспорта, Истина);
					Иначе
						
						Если ОтображаемыйТранспорт[СтрокаТранспорта] <> Неопределено Тогда
							
							ПрошедшиеФильтрВидовТранспорта.Вставить(СтрокаТранспорта, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезВидовТранспорта Тогда
			
			СтрокиТранспорта = Хэши.ВидыТранспорта["БезВидовТранспорта"];
			Для каждого СтрокаТранспорта Из СтрокиТранспорта Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрВидовТранспорта.Вставить(СтрокаТранспорта, Истина);
				Иначе
					
					Если ОтображаемыйТранспорт[СтрокаТранспорта] <> Неопределено Тогда
						
						ПрошедшиеФильтрВидовТранспорта.Вставить(СтрокаТранспорта, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Категории транспорта
	Если не Фильтр.ЛюбаяКатегорияТранспорта Тогда
		
		ФильтрованПоКатегориям = Ложь;
		
		ПрошедшиеФильтрКатегорийТранспорта = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.КатегорииТранспорта Цикл
			
			Если КлючЗначение.Значение Тогда
				
				ФильтрованПоКатегориям = Истина;
				
				СтрокиТранспорта = Хэши.ТранспортПоКатегориямТранспорта[КлючЗначение.Ключ];
				Если СтрокиТранспорта = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для каждого СтрокаТранспорта Из СтрокиТранспорта Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрКатегорийТранспорта.Вставить(СтрокаТранспорта, Истина);
					Иначе
						
						Если ОтображаемыйТранспорт[СтрокаТранспорта] <> Неопределено Тогда
							
							ПрошедшиеФильтрКатегорийТранспорта.Вставить(СтрокаТранспорта, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезКатегорийТранспорта или ФильтрованПоКатегориям Тогда
			
			СтрокиТранспорта = Хэши.ТранспортПоКатегориямТранспорта["БезКатегорийТранспорта"];
			Для каждого СтрокаТранспорта Из СтрокиТранспорта Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрКатегорийТранспорта.Вставить(СтрокаТранспорта, Истина);
					
				Иначе
					
					Если ОтображаемыйТранспорт[СтрокаТранспорта] <> Неопределено Тогда
						
						ПрошедшиеФильтрКатегорийТранспорта.Вставить(СтрокаТранспорта, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Районы транспорта
	Если не Фильтр.ЛюбойРайон Тогда
		
		ФильтрованПоРайонам = Ложь;
		
		ПрошедшиеФильтрРайонов = Новый Соответствие;
		Для каждого КлючЗначение Из Фильтр.РайоныАдресов Цикл
			
			Если КлючЗначение.Значение Тогда
				
				ФильтрованПоРайонам = Истина;
				
				СтрокиТранспорта = Хэши.РайоныТранспорта[КлючЗначение.Ключ];
				Если СтрокиТранспорта = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для каждого СтрокаТранспорта Из СтрокиТранспорта Цикл
					
					Если ВидФильтрации = "Основные" Тогда
						
						ПрошедшиеФильтрРайонов.Вставить(СтрокаТранспорта, Истина);
					Иначе
						
						Если ОтображаемыйТранспорт[СтрокаТранспорта] <> Неопределено Тогда
							
							ПрошедшиеФильтрРайонов.Вставить(СтрокаТранспорта, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Фильтр.БезРайонов или ФильтрованПоРайонам Тогда
			
			СтрокиТранспорта = Хэши.РайоныТранспорта["БезРайонов"];
			Для каждого СтрокаТранспорта Из СтрокиТранспорта Цикл
				
				Если ВидФильтрации = "Основные" Тогда
					
					ПрошедшиеФильтрРайонов.Вставить(СтрокаТранспорта, Истина);
					
				Иначе
					
					Если ОтображаемыйТранспорт[СтрокаТранспорта] <> Неопределено Тогда
						
						ПрошедшиеФильтрРайонов.Вставить(СтрокаТранспорта, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Дожимаем по заказам
	Если ВидДожатия = "Транспорт" Тогда
		
		МинимальныйВес = МаксимальноеЧисло;
		МинимальныйОбъем = МаксимальноеЧисло;
		
		Для каждого КлючЗначение Из КоллекцияДожатия Цикл
			
			СтрокаЗаказа = КлючЗначение.Ключ;
			
			МинимальныйВес = Мин(МинимальныйВес, СтрокаЗаказа.Вес);
			МинимальныйОбъем = Мин(МинимальныйОбъем, СтрокаЗаказа.Объем);
		КонецЦикла;
		
		Если МинимальныйВес = МаксимальноеЧисло Тогда
			МинимальныйВес = 0;
		КонецЕсли;
		
		Если МинимальныйОбъем = МаксимальноеЧисло Тогда
			МинимальныйОбъем = 0;
		КонецЕсли;
		
		МинимальныйВес = МинимальныйВес / 1000; //Приводим к тоннам
	КонецЕсли;
	
	//пробегаем основнуютаблицу
	Для каждого СтрокаТранспорта Из ОсновнаяТаблицаТранспорта Цикл
		
		//Фильтр по грузоподъемности
		Если не Фильтр.ЛюбаяГрузоподъемность Тогда
			
			Если СтрокаТранспорта.Грузоподъемность < Фильтр.МинимальнаяГрузоподъемность
			     или ( СтрокаТранспорта.Грузоподъемность > Фильтр.МаксимальнаяГрузоподъемность
			         и ЗначениеЗаполнено(Фильтр.МаксимальнаяГрузоподъемность)) Тогда
				Продолжить;
			Иначе
				Если ВидФильтрации = "Выбранные" Тогда
					
					Если ОтображаемыйТранспорт[СтрокаТранспорта] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Фильтр по грузовместимости
		Если не Фильтр.ЛюбаяГрузовместимость Тогда
			
			Если СтрокаТранспорта.Грузовместимость < Фильтр.МинимальнаяГрузовместимость
			     или ( СтрокаТранспорта.Грузовместимость > Фильтр.МаксимальнаяГрузовместимость
			         и ЗначениеЗаполнено(Фильтр.МаксимальнаяГрузовместимость)) Тогда
				Продолжить;
			Иначе
				Если ВидФильтрации = "Выбранные" Тогда
					
					Если ОтображаемыйТранспорт[СтрокаТранспорта] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//прочие фильтры
		Если (не Фильтр.ЛюбойВидТранспорта)
		     и ПрошедшиеФильтрВидовТранспорта[СтрокаТранспорта] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбаяКатегорияТранспорта)
		     и ПрошедшиеФильтрКатегорийТранспорта[СтрокаТранспорта] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (не Фильтр.ЛюбойРайон)
		     и ПрошедшиеФильтрРайонов[СтрокаТранспорта] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Дожимаем по заказам
		Если ВидДожатия = "Транспорт" Тогда
			
			Если УсекатьТранспортПоГрузоподъемности Тогда
				
				Если СтрокаТранспорта.Грузоподъемность < МинимальныйВес Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если УсекатьТранспортПоГрузовместимости Тогда
				
				Если СтрокаТранспорта.Грузовместимость < МинимальныйОбъем Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для каждого КлючЗначение Из КоллекцияДожатия Цикл
				
				СтрокаЗаказа = КлючЗначение.Ключ;
				
				Если СтрокаТранспорта.НачалоДоступности > СтрокаЗаказа.ВремяПрибытияС
				     и СтрокаТранспорта.НачалоДоступности < СтрокаЗаказа.ВремяПрибытияПо
					 и СтрокаЗаказа.ВремяПрибытияПо - СтрокаТранспорта.НачалоДоступности < 1800 Тогда
					
					Продолжить;
				 КонецЕсли;
				 
				Если СтрокаТранспорта.КонецДоступности > СтрокаЗаказа.ВремяПрибытияС
					 и СтрокаТранспорта.КонецДоступности < СтрокаЗаказа.ВремяПрибытияПо
					 и СтрокаТранспорта.КонецДоступности - СтрокаЗаказа.ВремяПрибытияС < 1800 Тогда
					
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат.Вставить(СтрокаТранспорта, Истина);
	КонецЦикла;
	
	ВозВрат Результат;
	
КонецФункции


//** Действия **//


//Создаёт новый рейс из выбранных заказов
//
//  Параметры:
//    ВыбранныйТранспорт - <СтрокаТаблицыЗначений> строка основной таблицы транспорта
//
Процедура СоздатьНовыйРейс(ВыбранныйТранспорт) Экспорт
	
	СоздаётсяРейс = Истина;
	
	НачатьТранзакцию();
	
	обРейс = БизнесПроцессы.новаРейсМестнойДоставки.СоздатьБизнесПроцесс();
	обРейс.Дата = ТекущаяДата();
	обРейс.Транспорт = ВыбранныйТранспорт.Транспорт;
	обРейс.Водитель = ВыбранныйТранспорт.Водитель;
	обРейс.ДатаНачала = ВыбранныйТранспорт.НачалоДоступности;
	обРейс.ДатаКонца = ВыбранныйТранспорт.КонецДоступности;
	обРейс.НачалоРейса = ВыбранныйТранспорт.НачалоРейса;
	обРейс.КонецРейса = ВыбранныйТранспорт.НачалоРейса;
	обРейс.Экспедитор = ВыбранныйТранспорт.Экспедитор;
	обРейс.ЧасовойПояс = ПараметрыСеанса.новаТекущийПользователь.ЧасовойПояс;
	Рейс = БизнесПроцессы.новаРейсМестнойДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор());
	обРейс.УстановитьСсылкуНового(Рейс);
	обРейс.КонецРейсаСовпадаетСНачалом = Константы.новаКонецРейсаСовпадаетСНачаломПоУмолчанию.Получить();
	обРейс.КоэффициентСкорости = Константы.новаКоэффициентСкоростиПоУмолчанию.Получить();
	обРейс.МаксимальноеВремяОжидания = Константы.новаМаксимальноеВремяОжиданияРазгрузкиПоУмолчанию.Получить();
	
	Если обРейс.КонецРейсаСовпадаетСНачалом Тогда
		обРейс.КонецРейса = обРейс.НачалоРейса;
	КонецЕсли;
	
	обРейс.НачалоРейсаУказаноВручную = ЗначениеЗаполнено(обРейс.НачалоРейса);
	
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = обМаршрут.НачатьРедактирование(Рейс, обРейс);
	
	Для СчетчикВыбранныхЗаказов = 0 По ВыборкаМаркеровИндексируемая.Количество() - 1 Цикл
		ОписаниеМаркера = ВыборкаМаркеровИндексируемая.Получить(СчетчикВыбранныхЗаказов).ИсхОбъект();		
		ТекущийСтрокаЗаказа = ОписаниеМаркера.Заказ; 		
		
		обМаршрут.ДобавитьДоставку(Рейс, ТекущийСтрокаЗаказа.Заказ);
		
		Если ТекущийСтрокаЗаказа.ЕстьТочкаОтправления И ТекущийСтрокаЗаказа.ЕстьТочкаПрибытия Тогда
			СчетчикВыбранныхЗаказов = СчетчикВыбранныхЗаказов + 1 ;
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ обРейс.КонецРейсаСовпадаетСНачалом Тогда
		обРейс.КонецРейса  = обМаршрут.ПолучитьКонецРейса(Рейс);
	КонецЕсли;
	
	обМаршрут.ПересчитатьРейс_(стРейс,,Ложь);
	
	Если стРейс.Рейс.ПроверитьСоответствиеДоставокТранспорту() Тогда
		
		обМаршрут.ПересчитатьРейсКСЛ(Рейс, Истина);
		
		обРейс.Старт();
		
		ЗафиксироватьТранзакцию();
		
		УдаляемыеЗаказы = Новый Соответствие;
		Для каждого КлючЗначение Из ВыбранныеЗаказы Цикл
 			УдаляемыеЗаказы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ОбновитьДоступностьТранспорта(ВыбранныйТранспорт.Транспорт);

		ОбновитьДоступностьСмежногоТранспорта(обРейс.Транспорт, обРейс.Водитель);

		УдалитьЗаказыИзОсновнойТаблицыЗаказов(УдаляемыеЗаказы);
		
		ОтправитьСуммарнуюИнформацию();
		
	Иначе
		
		ОтменитьТранзакцию();
		
	КонецЕсли;
	
	СоздаётсяРейс = Ложь;
	
КонецПроцедуры

//Добавление выбранных заказов в существующий рейс
//
//  Параметры:
//    Рейс - <БизнесПроцесс.новаМестнаяДоставка> рейс, в который включаются заказы
//
Процедура ДобавитьВРейс(Рейс) Экспорт
	
	ДобавляютсяВРейсДоставки = Истина;
	
	НачатьТранзакцию();
	
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = обМаршрут.НачатьРедактирование(Рейс, Неопределено);
	
	Для СчетчикВыбранныхЗаказов = 0 По ВыборкаМаркеровИндексируемая.Количество() - 1 Цикл
		ОписаниеМаркера = ВыборкаМаркеровИндексируемая.Получить(СчетчикВыбранныхЗаказов).ИсхОбъект();
		ТекущийСтрокаЗаказа = ОписаниеМаркера.Заказ; 		
		
		обМаршрут.ДобавитьДоставку(Рейс, ТекущийСтрокаЗаказа.Заказ);
		
		Если ТекущийСтрокаЗаказа.ЕстьТочкаОтправления И ТекущийСтрокаЗаказа.ЕстьТочкаПрибытия Тогда
			СчетчикВыбранныхЗаказов = СчетчикВыбранныхЗаказов + 1 ;
		КонецЕсли;
	КонецЦикла;
	
	обМаршрут.ПересчитатьРейс_(стРейс,,Ложь);
	
	Если стРейс.Рейс.ПроверитьСоответствиеДоставокТранспорту() Тогда
		
		обМаршрут.ПересчитатьРейсКСЛ(Рейс, Истина);
		
		обМаршрут.СохранитьМаршрутРейса_(стРейс,,Ложь);
		
		УдаляемыеЗаказы = Новый Соответствие;
		Для каждого КлючЗначение Из ВыбранныеЗаказы Цикл
			УдаляемыеЗаказы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ОбновитьДоступностьТранспорта(Рейс.Транспорт);
		
		ОбновитьДоступностьСмежногоТранспорта(Рейс.Транспорт, Рейс.Водитель);
		
		УдалитьЗаказыИзОсновнойТаблицыЗаказов(УдаляемыеЗаказы);
		
		ЖурналРейсов.Обновить();
		
		ОтправитьСуммарнуюИнформацию();
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		ОтменитьТранзакцию();
	КонецЕсли;
	
	ДобавляютсяВРейсДоставки = Ложь;
	
КонецПроцедуры

//Перенос выбранных заказов на другую дату
//
//  Параметры:
//    НоваяДата - <Дата.Дата> дата, на которую переносяться выбранные заказы
//
Процедура ПеренестиНаДату(НоваяДата) Экспорт
	
	ВремяПереноса = НачалоДня(НоваяДата);
	
	Для каждого ВыбранныйЗаказ Из ВыбранныеЗаказы Цикл
		
		обДоставка = ВыбранныйЗаказ.Ключ.Заказ.ПолучитьОбъект();
		
		ОкноПути = обДоставка.ВремяПрибытияС - обДоставка.ВремяОтправленияС;
		ОкноОтправления = обДоставка.ВремяОтправленияПо - обДоставка.ВремяОтправленияС;
		ВремяОтправления = обДоставка.ВремяОтправленияС - НачалоДня(обДоставка.ВремяОтправленияС);
		
		ОкноПрибытия = обДоставка.ВремяПрибытияПо - обДоставка.ВремяПрибытияС;
		ВремяПрибытия = обДоставка.ВремяПрибытияС - НачалоДня(обДоставка.ВремяПрибытияС);
		
		обДоставка.ВремяОтправленияС = ВремяПереноса + ВремяОтправления;
		обДоставка.ВремяОтправленияПо = обДоставка.ВремяОтправленияС + ОкноОтправления;
		
		обДоставка.ВремяПрибытияС = обДоставка.ВремяОтправленияС + ОкноПути;
		обДоставка.ВремяПрибытияПо = обДоставка.ВремяПрибытияС + ОкноПрибытия;
		
		обДоставка.Записать();
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
	#Если Клиент Тогда
	Оповестить("ПереносДоставки");
	#КонецЕсли
КонецПроцедуры

//Отмена выбранных заказов
//
//  Параметры:
//    СписокЗаказов - <Массив> список отменяемых заказов
//
Процедура ОтменитьЗаказы(СписокЗаказов = Неопределено) Экспорт
	
	Если СписокЗаказов = Неопределено Тогда
		
		ОтменяемыеЗаказы = Новый Массив;
		Для каждого ВыбранныйЗаказ Из ВыбранныеЗаказы Цикл
			
			ОтменяемыеЗаказы.Добавить(ВыбранныйЗаказ.Ключ);
		КонецЦикла;
		
	Иначе
		
		ОтменяемыеЗаказы = СписокЗаказов;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка КАК Задача
	|  ИЗ
	|    Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю
	|      (
	|        ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)
	|        , (НЕ Выполнена)
	|          И БизнесПроцесс.Доставка В (&ОтменяемыеЗаказы)
	|      ) КАК ПланЗаказов
	|");
	
	Запрос.УстановитьПараметр("ОтменяемыеЗаказы", ОтменяемыеЗаказы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			обЗадача = Выборка.Задача.ПолучитьОбъект();
			обЗадача.ДоставкаОтменена = Истина;
			обЗадача.Записать();
			обЗадача.ВыполнитьЗадачу();
		КонецЦикла;
	КонецЕсли;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
	#Если Клиент Тогда
	Оповестить("ОтменаДоставки");
	#КонецЕсли
КонецПроцедуры

//Распределение заказов по транспорту автоматически, по сценарию или без него
//
//  Параметрв:
//    Форма - форма источник команды
//    Сценарий - Сценарий, по которому требуется распределить заказы
//
Процедура ПланироватьАвтоматически(Форма, Сценарий = Неопределено) Экспорт
	
	Мастер = Обработки.новаМастерАвтоматическогоПланирования.Создать();
	Мастер.ИсточникПараметров = ЭтотОбъект;
	Мастер.ИсточникДоставок = ЭтотОбъект;
	Мастер.ИсточникТранспорта = ЭтотОбъект;
	Мастер.СценарийПланирования = Сценарий;
	
	ФормаПланирования = Мастер.ПолучитьФорму( , Форма, "ПланированиеДоставки");
	
	ФормаПланирования.Открыть();      
	
	Если Сценарий <> Неопределено Тогда
		Мастер.ВыполнитьАвтопланирование();
		ФормаПланирования.СформироватьДиаграмму();
	КонецЕсли;
	 	
КонецПроцедуры


//** Интерфейс автоматического планировния **//


//Возврашает доставки для автоматического планирования
//
Функция ПолучитьДоставкиДляАвтоматическогоПланирования(пЗаказы = Неопределено, пКлассификаторРайонов = Неопределено) Экспорт
	
	Источник = Обработки.новаИсточникМестнойДоставки.Создать();
	
	пЗаказы = Новый Массив;
	Для каждого КлючЗначение Из ВыбранныеЗаказы Цикл
		
		пЗаказы.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(пКлассификаторРайонов) Тогда
		Результат =  Источник.ПолучитьДоставкиДляАвтоматическогоПланирования(пЗаказы, пКлассификаторРайонов);
	Иначе
		Результат =  Источник.ПолучитьДоставкиДляАвтоматическогоПланирования(пЗаказы, КлассификаторРайонов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Возврашает транспорт для автоматического планирования
//
Функция ПолучитьТранспортДляАвтоматическогоПланирования(пТранспорт = Неопределено, пКлассификаторРайонов = Неопределено) Экспорт
	
	ВозможныеРейсы= Новый ТаблицаЗначений;
	ВозможныеРейсы.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.новаТранспорт"));
	ВозможныеРейсы.Колонки.Добавить("Водитель", Новый ОписаниеТипов("СправочникСсылка.новаВодители"));
	ВозможныеРейсы.Колонки.Добавить("НачалоРейса", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
	ВозможныеРейсы.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ВозможныеРейсы.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
	
	Для каждого ТекущийТранспорт Из ВыбранныйТранспорт Цикл
		
		НоваяСтрока = ВозможныеРейсы.Добавить();
		НоваяСтрока.Транспорт = ТекущийТранспорт.Ключ.Транспорт;
		НоваяСтрока.Водитель = ТекущийТранспорт.Ключ.Водитель;
		НоваяСтрока.НачалоРейса = ТекущийТранспорт.Ключ.НачалоРейса;
		НоваяСтрока.НачалоПериода = ТекущийТранспорт.Ключ.НачалоДоступности;
		НоваяСтрока.ОкончаниеПериода = ТекущийТранспорт.Ключ.КонецДоступности;
	КонецЦикла;
	
	Источник = Обработки.новаИсточникВозможныеРейсы.Создать();
	
	Если ЗначениеЗаполнено(пКлассификаторРайонов) Тогда
		Результат =  Источник.ПолучитьТранспортДляАвтоматическогоПланирования(ВозможныеРейсы, пКлассификаторРайонов);
	Иначе
		Результат =  Источник.ПолучитьТранспортДляАвтоматическогоПланирования(ВозможныеРейсы, КлассификаторРайонов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//**** Работа с настройками ****//


//Сохранение настроек пользователя в БД
//
Процедура СохранитьПользовательскиеНастройки() Экспорт
	
	ХранилищеНастроек = ПараметрыСеанса.новаТекущийПользователь.ПолучитьОбъект();
	
	ХранилищеНастроек.УсекатьДоставкиПоВесу = УсекатьДоставкиПоВесу;
	ХранилищеНастроек.УсекатьДоставкиПоОбъему = УсекатьДоставкиПоОбъему;
	ХранилищеНастроек.УсекатьТранспортПоГрузоподъемности = УсекатьТранспортПоГрузоподъемности;
	ХранилищеНастроек.УсекатьТранспортПоГрузовместимости = УсекатьТранспортПоГрузовместимости;
	ХранилищеНастроек.УсекатьДоставкиПоРедактируемомуРейсу = УсекатьДоставкиПоРедактируемомуРейсу;
	ХранилищеНастроек.ОсновнойВариантНастройкиПланированияПоКарте = НастройкаОтображенияМаркеров;
	
	ХранилищеНастроек.Записать();
	
	ПрименитьНастройкуОтображенияМаркеров();
	
КонецПроцедуры

//Получение настроек пользователя из БД
//
Процедура ПолучитьНастройкиПользователя() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    УсекатьДоставкиПоВесу
	|    ,УсекатьДоставкиПоОбъему
	|    ,УсекатьТранспортПоГрузоподъемности
	|    ,УсекатьТранспортПоГрузовместимости
	|    ,УсекатьДоставкиПоРедактируемомуРейсу
	|    ,ОсновнойВариантНастройкиПланированияПоКарте
	|  ИЗ
	|    Справочник.новаПользователи
	|  ГДЕ
	|    Ссылка = &Пользователь
	|");
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.новаТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		УсекатьДоставкиПоВесу = Выборка.УсекатьДоставкиПоВесу;
		УсекатьДоставкиПоОбъему = Выборка.УсекатьДоставкиПоОбъему;
		УсекатьТранспортПоГрузоподъемности = Выборка.УсекатьТранспортПоГрузоподъемности;
		УсекатьТранспортПоГрузовместимости = Выборка.УсекатьТранспортПоГрузовместимости;
		УсекатьДоставкиПоРедактируемомуРейсу = Выборка.УсекатьДоставкиПоРедактируемомуРейсу;
		НастройкаОтображенияМаркеров = Выборка.ОсновнойВариантНастройкиПланированияПоКарте;
		
		ПрименитьНастройкуОтображенияМаркеров();
	КонецЕсли;
	
КонецПроцедуры


//**** Редактирование рейса ****//

//Читаем характеристики транспорта, доставок из рейса и устанавливаем фильтр
//
Процедура УстановитьФильтрОтображаемыхЭлементовПоРейсу()
	
	Если не УсекатьДоставкиПоРедактируемомуРейсу Тогда
		Возврат;
	КонецЕсли;
	
	//ФильтрОтображаемыхЭлементовДоНачаларедактированияРейса = ФильтрОтображаемыхЭлементов;
	
	Фильтр = СоздатьФильтр();
	КопироватьФильтр(ФильтрОтображаемыхЭлементов, Фильтр);
	ОчиститьФильтр(Фильтр);
	
	Фильтр.ЛюбойГрузоотправитель = Истина;
	Фильтр.ЛюбаяКатегория = Истина;
	Фильтр.ЛюбаяГрузоподъемность = Истина;
	Фильтр.ЛюбаяГрузовместимость = Истина;
	Фильтр.ЛюбойВидТранспорта = Истина;
	Фильтр.ЛюбойРайон = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Транспорт.Грузоподъемность - Вес КАК ОстатокГрузоподъемности
	|    ,Транспорт.ОбъемКузова - Объем КАК ОстатокГрузовместимости
	|    ,Транспорт.КатегорииТранспорта.
	|      (
	|        Транспорт.КатегорииТранспорта.ЗначениеКатегории КАК КатегорияТранспорта
	|      ) КАК Категориитранспорта
	|  ИЗ
	|    БизнесПроцесс.новаРейсМестнойДоставки
	|  ГДЕ
	|    Ссылка = &Рейс
	|");
	
	Запрос.УстановитьПараметр("Рейс", РедактируемыйРейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выбооррка = РезультатЗапроса.Выбрать();
		Выбооррка.Следующий();
		
		Если УсекатьДоставкиПоВесу Тогда
			
			Если Выбооррка.ОстатокГрузоподъемности > 0 Тогда
				
				Фильтр.МаксимальныйВес = Выбооррка.ОстатокГрузоподъемности;
			КонецЕсли;
		КонецЕсли;
		
		Если УсекатьДоставкиПоОбъему Тогда
			
			Если Выбооррка.ОстатокГрузовместимости > 0 Тогда
				
				Фильтр.МаксимальныйОбъем = Выбооррка.ОстатокГрузовместимости;
			КонецЕсли;
		КонецЕсли;
		
		КатегорииТранспорта = Выбооррка.КатегорииТранспорта.Выбрать();
		Если КатегорииТранспорта.Количество() > 0 Тогда
			
			Пока КатегорииТранспорта.Следующий() Цикл
				
				Если Фильтр.КатегорииТранспорта[КатегорииТранспорта.КатегорияТранспорта] <> Неопределено Тогда
					
					Фильтр.КатегорииТранспорта.Вставить(КатегорииТранспорта.КатегорияТранспорта, Истина);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Фильтр.ЛюбаяКатегорияТранспорта = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ФильтрОтображаемыхЭлементов = Фильтр;
	
	УстановитьФильтрЗаказов(Истина);
	
КонецПроцедуры

//Установка фильтра видимых заказов по рейсу
//Переход в режим редактирования рейса
//
Процедура НачатьРедактированиеРейса(Рейс) Экспорт
	
	РедактируетсяРейс = Истина;
	
	РедактируемыйРейс = Рейс;
	
	УдалитьЗаказыИзВыбранных(ВыбранныеЗаказы);
	
	УстановитьФильтрОтображаемыхЭлементовПоРейсу();
	
КонецПроцедуры

Процедура НачатьРедактированиеМаршрута(Рейс) Экспорт
	
	РедактируетсяМаршрут = Истина;
	
	РедактируемыйМаршрут = Рейс;

	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = обМаршрут.НачатьРедактирование(РедактируемыйМаршрут, Неопределено);
	МассивДоставокРейса = обМаршрут.ПолучитьДоставкиВПорядкеВыполнения(РедактируемыйМаршрут);
	
КонецПроцедуры

//Откат фильтра на начало редактирования
//Переход в обычный режим
//
Процедура ЗавершитьредактированиеРейса() Экспорт
	
	Если РедактируемыйРейс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = обМаршрут.НачатьРедактирование(РедактируемыйРейс, Неопределено);
	МассивДоставокРейса = обМаршрут.ПолучитьДоставкиВПорядкеВыполнения(РедактируемыйРейс);
	
	РедактируемыйРейс = Неопределено;
	РедактируетсяРейс = Ложь;
	
	Если не УсекатьДоставкиПоРедактируемомуРейсу Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФильтрЗаказов(Истина);
	
	ДобавляемыеЗаказы = Новый Соответствие;
	Для каждого Заказ Из ОсновнаяТаблицаЗаказов Цикл
		
		Если ОтображаемыеЗаказы[Заказ] = Неопределено Тогда
			
			ДобавляемыеЗаказы.Вставить(Заказ, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьЗаказыВОтображаемые(ДобавляемыеЗаказы);
	
КонецПроцедуры

Процедура ЗавершитьРедактированиеМаршрута() Экспорт
	
	Если РедактируемыйМаршрут = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	МассивДоставокРейса.Очистить();
	СписокПроверкиМаршрута.Очистить();
	РедактируемыйМаршрут = Неопределено;
	РедактируетсяМаршрут = Ложь;
	
КонецПроцедуры

//Обновление доступности смежного транспорта, возможного к планированию с водителем, уже задействованном в каком-либо рейсе
//
Процедура ОбновитьДоступностьСмежногоТранспорта(ОсновнойТранспорт,ОсновнойВодитель)
	
	ЗапросПоСмежномуТранспорту = Новый Запрос(
	"ВЫБРАТЬ
	|	ВозможныеРейсы.Водитель,
	|	ВозможныеРейсы.Транспорт,
	|	ВозможныеРейсы.НачалоПериода,
	|	ВозможныеРейсы.КонецПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Корректировки.НовыйТранспорт ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.Транспорт
	|			КОГДА Корректировки.НовыйТранспорт = ЗНАЧЕНИЕ(Справочник.новаТранспорт.ПустаяСсылка)
	|				ТОГДА ВозможныеРейсы.Транспорт
	|			ИНАЧЕ Корректировки.НовыйТранспорт
	|		КОНЕЦ КАК Транспорт,
	|		ВЫБОР
	|			КОГДА Корректировки.НовыйВодитель ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.Водитель
	|			КОГДА Корректировки.НовыйВодитель = ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)
	|				ТОГДА ВозможныеРейсы.Водитель
	|			ИНАЧЕ Корректировки.НовыйВодитель
	|		КОНЕЦ КАК Водитель,
	|		ВЫБОР
	|			КОГДА Корректировки.НовоеНачалоПериода ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.НачалоПериода
	|			КОГДА Корректировки.НовоеНачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВозможныеРейсы.НачалоПериода
	|			ИНАЧЕ Корректировки.НовоеНачалоПериода
	|		КОНЕЦ КАК НачалоПериода,
	|		ВЫБОР
	|			КОГДА Корректировки.НовыйКонецПериода ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.КонецПериода
	|			КОГДА Корректировки.НовыйКонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВозможныеРейсы.КонецПериода
	|			ИНАЧЕ Корректировки.НовыйКонецПериода
	|		КОНЕЦ КАК КонецПериода
	|	ИЗ
	|		РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКорректировкаКалендаряВозможныхРейсов КАК Корректировки
	|			ПО ВозможныеРейсы.Транспорт = Корректировки.Транспорт
	|				И ВозможныеРейсы.Водитель = Корректировки.Водитель
	|				И (НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) = НАЧАЛОПЕРИОДА(Корректировки.НачалоПериода, ДЕНЬ))
	|	ГДЕ
	|		(Корректировки.Отменен ЕСТЬ NULL 
	|				ИЛИ НЕ Корректировки.Отменен)) КАК ВозможныеРейсы
	|ГДЕ
	|	ВозможныеРейсы.Водитель = &Водитель
	|	И ВозможныеРейсы.Транспорт <> &Транспорт
	|	И &ДатаПланирования МЕЖДУ НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(ВозможныеРейсы.КонецПериода, ДЕНЬ)");
	
	ЗапросПоСмежномуТранспорту.УстановитьПараметр("Водитель",ОсновнойВодитель);
	ЗапросПоСмежномуТранспорту.УстановитьПараметр("Транспорт",ОсновнойТранспорт);
	ЗапросПоСмежномуТранспорту.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	
	РезультатЗапроса = ЗапросПоСмежномуТранспорту.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		ВыборкаТранспорта = РезультатЗапроса.Выбрать();
		Пока ВыборкаТранспорта.Следующий() Цикл
			ОбновитьДоступностьТранспорта(ВыборкаТранспорта.Транспорт);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСмежныйТранспорт()


//**** Инициализация переменных модуля ****//


КэшПредставленияОбъектов = Новый Соответствие;

КомпоновщикиМаркеров = Новый Соответствие;

КэшЗаказов = Новый Соответствие;
КэшТранспорта = Новый Соответствие;

ВыбранныеЗаказы = Новый Соответствие;
ЗаказыПоМаркерам = Новый Соответствие;
МаркераПоЗаказам = Новый Соответствие;

ПолучитьНастройкиПользователя();

Хэши = Новый Структура;
Хэши.Вставить("Грузоотправители", Новый Соответствие);
Хэши.Вставить("КатегорииЗаказов", Новый Соответствие);
Хэши.Вставить("КатегорииТранспорта", Новый Соответствие);
Хэши.Вставить("РайоныАдресов", Новый Соответствие);
Хэши.Вставить("ВидыТранспорта", Новый Соответствие);
Хэши.Вставить("ЗаказыПоКатегориямТранспорта", Новый Соответствие);
Хэши.Вставить("ТранспортПоКатегориямТранспорта", Новый Соответствие);
Хэши.Вставить("РайоныТранспорта", Новый Соответствие);
Хэши.Вставить("КатегорииДоставок2014", Новый Соответствие);
Хэши.Вставить("ПризнакиМО", Новый Соответствие);
Хэши.Вставить("ИнтернетМагазины", Новый Соответствие);
Хэши.Вставить("ЧасыДоставокС", Новый Соответствие);
Хэши.Вставить("ЧасыДоставокПо", Новый Соответствие);

ИерархияКатегорийТранспорта = Новый Соответствие;

Полигоны = Новый Массив;

МаксимальноеЧисло = 1000000000000000;

ОсновнаяТаблицаЗаказов = ПолучитьОсновнуюТаблицуЗаказов();
ОсновнаяТаблицаТранспорта = ПолучитьОсновнуюТаблицуТранспорта();
ФильтрОтображаемыхЭлементов = СоздатьФильтр();
ФильтрВыбранныхЭлементов = СоздатьФильтр();
ОчиститьСуммарнуюИнформацию();

РедактируетсяРейс = Ложь;
СоздаётсяРейс = Ложь;
ДобавляютсяВРейсДоставки = Ложь;

СписокПроверкиМаршрута = Новый СписокЗначений;
РедактируетсяМаршрут = Ложь;
МассивДоставокДляИсключения = Новый Массив;




