#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Если Истина, в журнале отображаются печатные формы УТЛ.
//
Перем ВключитьВстроенныеПечатныеФормы Экспорт; // <Булево>

// Если Истина, в журнале отображаются печатные формы интегрированной конфигурации.
//
Перем ВключитьПечатныеФормыКИС Экспорт; // <Булево>

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если Журнал.ЕстьИерархия Тогда
		Если ДанныеСтроки.Группировка <> NULL Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
			ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр=Истина;
			ОформлениеСтроки.Ячейки.НаПринтер.ТолькоПросмотр=Истина;
		КонецЕсли;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.ПредставлениеДокумента.УстановитьКартинку(БиблиотекаКартинок.новаГруппа);
	ОформлениеСтроки.Ячейки.ПредставлениеПечатнойФормы.УстановитьКартинку(БиблиотекаКартинок.новаЭлемент);
	
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить(Параметр1);
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Процедура Настроить(Владелец)
	// Для формирования источника записываем данные в регистр сведений
	// на предопределенный элемент справочника шаблонов печатных форм
	
	ПараметрыЖурнала = Новый Структура;

	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	ТаблицаПечатныхФорм = новаПечатныеФормы.ПолучитьДеревоДокументов(ВключитьВстроенныеПечатныеФормы, ВключитьПечатныеФормыКИС);
	КонструкторДанных.ЗагрузитьВременнуюТаблицу("ВремТаблПечатныхФорм", ТаблицаПечатныхФорм);
	
	КонструкторДанных.ТекстЗапроса = "
	|	ВремТаблПечатныхФорм КАК ПечатныеФормы
	|";

	КонструкторДанных.ПостояннаяВыборка = ",
	|	ПечатныеФормы.ИмяДокумента КАК ИмяДокумента,
	|	ПечатныеФормы.Представление КАК ПредставлениеДокумента,
	|	ПечатныеФормы.ПечатнаяФорма КАК ПечатнаяФорма,
	|	ПечатныеФормы.ПредставлениеПечатнойФормы КАК ПредставлениеПечатнойФормы,
	|	1 КАК Количество,
	|	Ложь КАК НаПринтер,
	|	Ложь КАК Выбран
	|";
	
	КонструкторДанных.ДобавитьПоле("ПредставлениеДокумента");
	КонструкторДанных.ДобавитьОтборПоля(, "ПечатныеФормы.ПредставлениеДокумента");
	КонструкторДанных.ДобавитьСортировкуПоля("ПечатныеФормы.Представление");
	
	КонструкторДанных.ДобавитьПоле("ПредставлениеПечатнойФормы");
	КонструкторДанных.ДобавитьОтборПоля(, "ПечатныеФормы.ПредставлениеПечатнойФормы");
	КонструкторДанных.ДобавитьСортировкуПоля("ПечатныеФормы.ПредставлениеПечатнойФормы");
	КонструкторДанных.ДобавитьПоле("Количество");
	КонструкторДанных.ДобавитьОтборПоля(, "ПечатныеФормы.Количество");
	КонструкторДанных.ДобавитьПоле("НаПринтер");
	КонструкторДанных.ДобавитьОтборПоля(, "ПечатныеФормы.НаПринтер");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ПредставлениеДокумента");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("ПечатнаяФорма"));

	КонструкторДанных.СформироватьКолонки();
	
КонецПроцедуры

ВключитьВстроенныеПечатныеФормы = Истина;
ВключитьПечатныеФормыКИС = Истина;

#КонецЕсли