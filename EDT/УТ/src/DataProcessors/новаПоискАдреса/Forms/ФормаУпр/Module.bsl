
#Область НачальноеЗаполнениеПриОткрытии
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+Степанов
	Если ИспользованиеWebKit Тогда 
		//Макет = ПолучитьМакетНаСервере("МакетHTML_WebKit");	
		Макет = ПолучитьМакетНаСервере("МакетHTML");
	Иначе	
		Макет = ПолучитьМакетНаСервере("МакетHTML");
	КонецЕсли;	
	//-Степанов
	ДанныеHTML = Макет.ПолучитьТекст();
	
	ПереноситьАдресИзКарты = Ложь;
	
	Если Адрес<>"" Тогда
		НайтиАдреса(Адрес);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Адрес") Тогда
		Адрес = Параметры.Адрес;
	КонецЕсли;	
	//+Степанов
	ИспользованиеWebKit = ОбщегоНазначения.ВерсияПлатформы().Релиз > 13;
	Если Параметры.Свойство("НомерЗаказа") Тогда
		НомерЗаказа = Параметры.НомерЗаказа;
	КонецЕсли;	
	ВызовИзДереваЗаказов = Параметры.Свойство("ВызовИзДереваРейсов");
	//-Степанов
	//+Широков Задача 4369 
	СвойствоРежимИзмененияАдресаЗаказа = Параметры.Свойство("ЭтоОтчетВодителя");
	Если СвойствоРежимИзмененияАдресаЗаказа Тогда
		РежимИзмененияАдресаЗаказа = Истина;
	Иначе
		РежимИзмененияАдресаЗаказа = Ложь;
	КонецЕсли;
	//-Широков Задача 4369 
	
	//+Широков по письму Кривая привязка при "Выгрузке ШК"
	ВсегдаНовыйАдрес = Истина;			
	//-Широков по письму Кривая привязка при "Выгрузке ШК"
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Возврат Обработки.новаПоискАдреса.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
Процедура ПоискАдресаНаКартеПриОткрытии()
	
	//+Широков Задача 4369
	КартаОтрисована = Ложь;
	//Если Элементы.ПолеXTML.Документ.DefaultView.mapIsLoad <> Неопределено И Элементы.ПолеXTML.Документ.DefaultView.mapIsLoad Тогда
	//	КартаОтрисована = Истина;	
	//КонецЕсли;
	Если Элементы.ДанныеHTML.Документ.DefaultView.mapIsLoad <> Неопределено И Элементы.ДанныеHTML.Документ.DefaultView.mapIsLoad Тогда
		КартаОтрисована = Истина;	
		ФлагОткрытияФормы = Истина;
		ПодключаемОбработчик = Ложь;
		//Иначе
		Оповестить("НайтиАдресПриПервомОткрытии");
	КонецЕсли;
	
	Если КартаОтрисована Тогда
		//-Широков Задача 4369
	
	Если НайденныеАдреса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТекСтрока = НайденныеАдреса[0];
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	dolgota = ?(ТекСтрока.Долгота = "","0",СтрЗаменить(ТекСтрока.Долгота,",","."));
	shirota = ?(ТекСтрока.Широта = "","0", СтрЗаменить(ТекСтрока.Широта,",","."));
	
	ШиротаНаКарте = shirota;
	ДолготаНаКарте = dolgota;
	
	contrag = ТекСтрока.Регион+", "
	+ ТекСтрока.НаселенныйПункт+", "
	+ ТекСтрока.Улица+", "
	+ ТекСтрока.Дом; 
	UID = "123";
	
	Стр = "showAddressCoord(" + shirota + ", "+ dolgota + ", """ + contrag + """, """ + UID + """)";
	ВыполнитьСкрипт(Стр);

	КонецЕсли; //Широков Задача 4369

КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLДокументСформирован(Элемент)
	//+Степанов
	Если Не ИспользованиеWebKit Тогда 
		ЭтаФорма.Элементы.ДанныеHTML.Документ.parentWindow.SetForm1C(ЭтаФорма);
	КонецЕсли;	
	//-Степанов	
	Оповестить("НайтиАдресПриПервомОткрытии");
	
	//ФлагОткрытияФормы = Истина;  //Широков
	
	//Для получения информации о готовности HTML документа к работе рекомендуется использовать обработчик события ДокументСформирован 
	//поля HTML-документа. При этом нужно помнить о следующей особенности: в момент окончания формирования документа, сообщение о 
	//событии помещается в очередь, но, до того как оно будет обработано, может произойти новое изменение HTML документа. 
	//Например, первый вызов данного события в форме обычно информирует о внутренней навигации поля HTML-документа. 
	//Поэтому в обработчике события ДокументСформирован  рекомендуется также анализировать значение свойства readyState HTML-документа.
	//Значение этого свойства показывает текущий этап формирования HTML документа. В случае, когда значение равно Complete, 
	//формирование объектной модели завершено, документ готов к работе.
	////КартаОтрисована = Ложь;
	//////Если Элементы.ПолеXTML.Документ.DefaultView.mapIsLoad <> Неопределено И Элементы.ПолеXTML.Документ.DefaultView.mapIsLoad Тогда
	//////	КартаОтрисована = Истина;	
	//////КонецЕсли;
	////Если Элементы.ДанныеHTML.Документ.DefaultView.mapIsLoad <> Неопределено И Элементы.ДанныеHTML.Документ.DefaultView.mapIsLoad Тогда
	////	КартаОтрисована = Истина;	
	////КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "НайтиАдресПриПервомОткрытии" Тогда
		//+Широков Задача 4369
		//ПодключитьОбработчикОжидания("ПоискАдресаНаКартеПриОткрытии",1,Истина);
		Если НЕ ФлагОткрытияФормы Тогда
			ПодключаемОбработчик = Истина;
		КонецЕсли;
		
		Если ПодключаемОбработчик Тогда
			ПодключитьОбработчикОжидания("ПоискАдресаНаКартеПриОткрытии",1,Ложь);
		КонецЕсли;
		Если ФлагОткрытияФормы Тогда
			ОтключитьОбработчикОжидания("ПоискАдресаНаКартеПриОткрытии");
			ПодключаемОбработчик = Ложь;
		КонецЕсли;	
		//-Широков Задача 4369
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти


#Область ПоискПриНабореАдреса
&НаКлиенте
Процедура КнопкаНайти(Команда)
	НайтиАдреса(Адрес);
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	НайтиАдреса(Адрес);
КонецПроцедуры

&НаСервере
Процедура НайтиАдреса(Адрес = Неопределено)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаАдресов  = НайденныеАдреса.Выгрузить();
	НайденныеАдреса.Загрузить(ОбработкаОбъект.НайтиАдресаПоЯндексу(Адрес,ТаблицаАдресов,НомерЗаказа,Истина));
	
КонецПроцедуры	
#КонецОбласти

&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	
	Попытка
		//+Степанов
		Если ИспользованиеWebKit Тогда
			Элементы.ДанныеHTML.Документ.defaultView.exec(Команда);
		Иначе	
			Элементы.ДанныеHTML.Документ.parentWindow.exec(Команда);
		КонецЕсли;	
		//-Степанов
	исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Функция MapsFrom1C_SetLocation(Param) Экспорт
	Если Param <> "" Тогда;
		ПараметрыКоординат = СтрЗаменить(Param,";",Символы.ПС);
		ШиротаНаКарте = СтрПолучитьСтроку(ПараметрыКоординат,1); 
		ДолготаНаКарте = СтрПолучитьСтроку(ПараметрыКоординат,2); 
		Адрес = СтрПолучитьСтроку(ПараметрыКоординат,3);
		АвтопереносАдресаИзКарты();
		//ПараметрыКоординат = СтрЗаменить
		//Сообщить(Param);
	КонецЕсли;
КонецФункции


// Якурнов 11.07.2018 16:08:39
&НаКлиенте
Процедура АвтопереносАдресаИзКарты()
	
	НайтиАдреса();
	
	Если Не ПереноситьАдресИзКарты Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденныеАдреса.Количество() > 0 Тогда
		Если ВладелецФормы <> Неопределено Тогда
			//ДолготаОсн = Окр(Число(СтрЗаменить(ДолготаНаКарте,".",",")),6);
			//ШиротаОсн = Окр(Число(СтрЗаменить(ШиротаНаКарте,".",",")),6);
			//Для каждого Элем из НайденныеАдреса Цикл
				//ДолготаЭлем = Окр(Число(СтрЗаменить(Элем.Долгота,".",",")),6);
				//ШиротаЭлем = Окр(Число(СтрЗаменить(Элем.Широта,".",",")),6);
				//Если ДолготаОсн = ДолготаЭлем И ШиротаОсн = ШиротаЭлем Тогда
					Если ЗначениеЗаполнено(НайденныеАдреса[0].Ссылка) Тогда
						спрАдрес = НайденныеАдреса[0].Ссылка;
					Иначе
						Структура = Новый Структура;
						Структура.Вставить("Страна",НайденныеАдреса[0].Страна);
						Структура.Вставить("Регион",НайденныеАдреса[0].Регион);
						Структура.Вставить("НаселенныйПункт",НайденныеАдреса[0].НаселенныйПункт);
						Структура.Вставить("Улица", НайденныеАдреса[0].Улица);
						Структура.Вставить("Дом",   НайденныеАдреса[0].Дом);
						Структура.Вставить("Корпус",НайденныеАдреса[0].Корпус);
						Структура.Вставить("Широта",НайденныеАдреса[0].Широта);
						Структура.Вставить("Долгота",НайденныеАдреса[0].Долгота);
						
						спрАдрес = СоздатьНовыйАдрес(Структура);
					КонецЕсли;
					
					Оповестить("ВыбранАдрес", спрАдрес, ЭтаФорма);
					Закрыть();
					//Прервать;
			//	КонецЕсли;
			//КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайденныеАдресаПриАктивизацииСтроки(Элемент)
	
	Если НЕ ФлагОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	
	
	Если НайденныеАдреса.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.НайденныеАдреса.ТекущиеДанные;
	
	//+Степанов Задача № 3165 Получим координаты из DaData
	Если ПустаяСтрока(ТекСтрока.Долгота) Тогда
		Координаты = ПолучитьКоординатыПриАктивизацииСтроки(ТекСтрока.Наименование);
		ТекСтрока.Широта  = Координаты.Широта;
		ТекСтрока.Долгота = Координаты.Долгота;
	КонецЕсли;	
	//-Степанов Задача № 3165
	
	dolgota = ?(ТекСтрока.Долгота = "","0",СтрЗаменить(ТекСтрока.Долгота,",","."));
	shirota = ?(ТекСтрока.Широта = "","0", СтрЗаменить(ТекСтрока.Широта,",","."));
	
	ШиротаНаКарте = shirota;
	ДолготаНаКарте = dolgota;
	
	ВыполнитьСкрипт("removeAllPoints()");
	
	contrag = ТекСтрока.Регион+", "
	+ ТекСтрока.НаселенныйПункт+", "
	+ ТекСтрока.Улица+", "
	+ ТекСтрока.Дом; 
	
	UID = "123";
	
	
	Стр = "showAddressCoord(" + shirota + ", "+ dolgota + ", """ + contrag + """, """ + UID + """)";
	ВыполнитьСкрипт(Стр);

КонецПроцедуры

&НаКлиенте
Процедура НайденныеАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 ТекСтрока = Элементы.НайденныеАдреса.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//+Степанов Задача № 3165
	Если ОбщегоНазначенияПовтИсп.ИспользуемаяСистемаРаспознаванияАдресов(Истина) = ПредопределенноеЗначение("Перечисление.СистемыРаспознаванияАдресов.DaData")
		И ПустаяСтрока(ТекСтрока.Широта) Тогда
		Координаты = ПолучитьКоординатыАдресаИзDaData(ТекСтрока);
		ТекСтрока.Широта  = Координаты.Широта;
		ТекСтрока.Долгота = Координаты.Долгота;
	КонецЕсли;	
	//-Степанов Задача № 3165
	
	Если ВладелецФормы <> Неопределено Тогда
		
		//+Широков по письму Кривая привязка при "Выгрузке ШК"
		Если ВсегдаНовыйАдрес Тогда
			Структура = Новый Структура;
			Структура.Вставить("Страна",ТекСтрока.Страна);
			Структура.Вставить("Регион",ТекСтрока.Регион);
			Структура.Вставить("НаселенныйПункт",ТекСтрока.НаселенныйПункт);
			Структура.Вставить("Улица",ТекСтрока.Улица);
			Структура.Вставить("Дом",ТекСтрока.Дом);
			Структура.Вставить("Корпус",ТекСтрока.Корпус);
			Структура.Вставить("Широта",ТекСтрока.Широта);
			Структура.Вставить("Долгота",ТекСтрока.Долгота);
			
			спрАдрес = СоздатьНовыйАдрес(Структура);
		Иначе
			//+Широков по письму Кривая привязка при "Выгрузке ШК"
			Если ЗначениеЗаполнено(ТекСтрока.Ссылка) Тогда
				спрАдрес = ТекСтрока.Ссылка;
			Иначе
				Структура = Новый Структура;
				Структура.Вставить("Страна",ТекСтрока.Страна);
				Структура.Вставить("Регион",ТекСтрока.Регион);
				Структура.Вставить("НаселенныйПункт",ТекСтрока.НаселенныйПункт);
				Структура.Вставить("Улица",ТекСтрока.Улица);
				Структура.Вставить("Дом",ТекСтрока.Дом);
				Структура.Вставить("Корпус",ТекСтрока.Корпус);
				Структура.Вставить("Широта",ТекСтрока.Широта);
				Структура.Вставить("Долгота",ТекСтрока.Долгота);
				
				спрАдрес = СоздатьНовыйАдрес(Структура);
			КонецЕсли;
			//+Широков по письму Кривая привязка при "Выгрузке ШК"
		КонецЕсли;
		//-Широков по письму Кривая привязка при "Выгрузке ШК"
		
		Оповестить("ВыбранАдрес", спрАдрес, ЭтаФорма);
		
		//+Широков Задача 4369
		Если РежимИзмененияАдресаЗаказа Тогда
			ЛогированиеSQL(НомерЗаказа,спрАдрес);
		КонецЕсли;
		//-Широков Задача 4369
		Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура ЛогированиеSQL(ЗаданиеНомер,НзаписьАдресПосле )
	Попытка
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
		
		Ткст = "exec [dbo].[ChangeOrderUserAddress]" + ЗаданиеНомер + ",'" + НзаписьАдресПосле.Наименование + "','""',' ' " + "," + Формат(НзаписьАдресПосле.Широта, "ЧРД=.") + "," + Формат(НзаписьАдресПосле.Долгота, "ЧРД=.");
		bao.ЗапросКИнтернетМагазину(Ткст, ПодключениеКМагазину);
		// + Строка(ПараметрыСеанса.ТекущийПользователь) + " новаОтчетВодителя.ФормаДокументаУпр ЛогироватьСменуАдреса " +
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры



//Открывает форму нового адреса и заполняет её по умолчанию
//
&НаКлиенте
Процедура ВвестиНовыйАдрес(Координаты = Неопределено)
	
	ТекСтрока = Элементы.НайденныеАдреса.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Страна",ТекСтрока.Страна);
		Структура.Вставить("Регион",ТекСтрока.Регион);
		Структура.Вставить("НаселенныйПункт",ТекСтрока.НаселенныйПункт);
		Структура.Вставить("Улица",ТекСтрока.Улица);
		Структура.Вставить("Дом",ТекСтрока.Дом);
		Структура.Вставить("Корпус",ТекСтрока.Корпус);
		
		Если Координаты <> Неопределено Тогда
			Структура.Вставить("Широта",Координаты.Широта);
			Структура.Вставить("Долгота",Координаты.Долгота);
		Иначе
			Структура.Вставить("Широта",ТекСтрока.Широта);
			Структура.Вставить("Долгота",ТекСтрока.Долгота);
		КонецЕсли;
		
		обНовыйАдрес = СоздатьНовыйАдрес(Структура);
		Оповестить("ВыбранАдрес", обНовыйАдрес.Ссылка, ЭтаФорма);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

//Создание нового адреса и заполнение всех полей адреса
&НаСервере
Функция СоздатьНовыйАдрес(СтрокаАдреса)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.СоздатьНовыйАдрес(СтрокаАдреса);
//Удалить из модуля.	
//	НовыйАдрес = Справочники.новаАдреса.СоздатьЭлемент();
//	
//	Страна = Справочники.новаСтраны.НайтиПоНаименованию(СтрокаАдреса.Страна);
//	Если Страна.Пустая() Тогда
//		Страна =  Справочники.новаСтраны.СоздатьЭлемент();
//		Страна.Наименование = СтрокаАдреса.Страна;
//		Страна.Записать();
//	КонецЕсли;
//	
//	Регион = Справочники.новаРегионы.НайтиПоНаименованию(СтрокаАдреса.Регион,,,Страна.Ссылка);
//	Если Регион.Пустая() Тогда
//		Регион =  Справочники.новаРегионы.СоздатьЭлемент();
//		Регион.Наименование = СтрокаАдреса.Регион;
//		Регион.Владелец = Страна.Ссылка;
//		Регион.Записать();
//	КонецЕсли;
//	
//	НаселенныйПункт = Справочники.новаНаселенныеПункты.НайтиПоНаименованию(СтрокаАдреса.НаселенныйПункт,,,Регион.Ссылка);
//	Если НаселенныйПункт.Пустая() Тогда
//		НаселенныйПункт =  Справочники.новаНаселенныеПункты.СоздатьЭлемент();
//		НаселенныйПункт.Наименование = СтрокаАдреса.НаселенныйПункт;
//		НаселенныйПункт.Владелец = Регион.Ссылка;
//		НаселенныйПункт.Записать();
//	КонецЕсли;
//	
//	Улица = Справочники.новаУлицы.НайтиПоНаименованию(СтрокаАдреса.Улица,,,НаселенныйПункт.Ссылка);
//	Если Улица.Пустая() Тогда
//		Улица =  Справочники.новаУлицы.СоздатьЭлемент();
//		Улица.Наименование = СтрокаАдреса.Улица;
//		Улица.Владелец = НаселенныйПункт.Ссылка;
//		Улица.Записать();
//	КонецЕсли;

//	НовыйАдрес.Страна 	= Страна;
//	НовыйАдрес.Регион 	= Регион;
//	НовыйАдрес.НаселенныйПункт = НаселенныйПункт;
//	НовыйАдрес.Улица 	= Улица;
//	НовыйАдрес.Регион	= Регион;
//    НовыйАдрес.Дом 		= СтрокаАдреса.Дом;
//    НовыйАдрес.Корпус 	= СтрокаАдреса.Корпус;
//    НовыйАдрес.Широта 	= Число(СтрокаАдреса.Широта);
//    НовыйАдрес.Долгота 	= Число(СтрокаАдреса.Долгота);
//	НовыйАдрес.Наименование = СформироватьНаименованиеАдреса(СтрокаАдреса);
//	НовыйАдрес.ВходитВКлассификатор = Ложь;

//	НовыйАдрес.Записать();
//	
//	Возврат НовыйАдрес.Ссылка;
//	
КонецФункции	

//+Степанов Задача № 3165
&НаКлиенте
Функция ПолучитьКоординатыПриАктивизацииСтроки(СтрокаПоиска)
	Возврат ПолучитьКоординатыАдресаИзDaData(СтрокаПоиска);
КонецФункции

&НаСервере
Функция ПолучитьКоординатыАдресаИзDaData(СтрокаПоиска)
	Координаты = Новый Структура("Широта,Долгота");
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Определение = Новый WSОпределения("http://192.168.5.9:85/services/service1C.svc?wsdl","Service1C","BasicHttpBinding_IService1C");	
	Иначе	
		Определение = Новый WSОпределения("http://192.168.5.9:82/services/service1C.svc?wsdl","Service1C","BasicHttpBinding_IService1C");
	КонецЕсли;	
	Прокси = Новый WSПрокси(Определение, "http://tempuri.org/","Service1C","BasicHttpBinding_IService1C");
	Рез = Прокси.AddressSuggestStr(СтрокаПоиска, 1);
	Если Рез.AddressSuggestStr.Количество() = 1 Тогда 
		Координаты.Широта  = Рез.AddressSuggestStr[0].Geo_lat;
		Координаты.Долгота = Рез.AddressSuggestStr[0].Geo_lon;
	КонецЕсли;	
	Возврат Координаты;
КонецФункции	

//Удлаить из модуля
//&НаСервере
//Функция СформироватьНаименованиеАдреса(СтрокаАдреса)
//		
//	Если СокрЛП(СтрокаАдреса.Регион) = СокрЛП(СтрокаАдреса.НаселенныйПункт) Тогда
//		стрНП = СокрЛП(СтрокаАдреса.Регион);
//	Иначе
//		стрНП = СокрЛП(СтрокаАдреса.НаселенныйПункт)
//			+ ", " + СокрЛП(СтрокаАдреса.Регион);
//	КонецЕсли;
//	
//	Наименование = ""
//		+ СтрокаАдреса.Улица  
//				+ ", " + СтрокаАдреса.Дом + ?(ПустаяСтрока(СтрокаАдреса.Корпус), "", " к " + СтрокаАдреса.Корпус)
//		+ ", " + стрНП
//		+ ?(СтрокаАдреса.Страна = Справочники.новаСтраны.Россия.Наименование, "", ", " + СокрЛП(СтрокаАдреса.Страна));
//		
//	Если Лев(Наименование, 2) = ", " Тогда
//		Наименование = Сред(Наименование, 3);
//	КонецЕсли;
//	
//	Возврат Наименование;
//	
//КонецФункции
