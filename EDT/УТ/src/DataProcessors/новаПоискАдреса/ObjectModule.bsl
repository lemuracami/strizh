Перем сзПризнакиУлиц;
Перем ЯндексAPI Экспорт; // Получается на Яндексе после регистрации
Перем Кодировка1251;

//+Широков по письму Кривая привязка при "Выгрузке ШК"
Перем ВсегдаНовыйАдрес Экспорт; 
Перем ПроверкаСокрЛПпустойУлицы Экспорт; 
//-Широков по письму Кривая привязка при "Выгрузке ШК"


//Поиск региона
//
Функция НайтиРегион(Знач Адрес)
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	тзСловаПассажа = ПолучитьТаблицуСлов(Адрес);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    Ссылка
	|  ИЗ
	|    Справочник.новаРегионы
	|  ГДЕ
	|    ";
	
	ДобавитьИЛИ = Ложь;
	ДобавилиУсловие = Ложь;
	
	Для Каждого стрСловоПассажа Из тзСловаПассажа Цикл
		Если (сзПризнакиУлиц.НайтиПоЗначению(стрСловоПассажа.Слово) = Неопределено) И (стрСловоПассажа.Размер > 3) Тогда 
			Если ДобавитьИЛИ Тогда 
				Запрос.Текст = Запрос.Текст + Символы.ПС + "    ИЛИ ";
			Иначе	
				ДобавитьИЛИ = Истина;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "Наименование ПОДОБНО ""%[.,; ]"+стрСловоПассажа.Слово+"[.,; ]%""
			| ИЛИ Наименование ПОДОБНО ""%[.,; ]"+стрСловоПассажа.Слово+"%""
			| ИЛИ Наименование ПОДОБНО ""%"+стрСловоПассажа.Слово+"[.,; ]%""
			| ИЛИ Наименование = """+стрСловоПассажа.Слово+"""";   
			ДобавилиУсловие = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Если ДобавилиУсловие Тогда
		тзРегионы = Запрос.Выполнить().Выгрузить();
		Возврат тзРегионы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

//Поиск региона
//
Функция НайтиНаселенныйПункт(Знач Адрес)
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	тзСловаПассажа = ПолучитьТаблицуСлов(Адрес);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    Ссылка
	|  ИЗ
	|    Справочник.новаНаселенныеПункты
	|  ГДЕ
	|    ";
	
	ДобавитьИЛИ = Ложь;
	ДобавилиУсловие = Ложь;
	
	Для Каждого стрСловоПассажа Из тзСловаПассажа Цикл
		Если (сзПризнакиУлиц.НайтиПоЗначению(стрСловоПассажа.Слово) = Неопределено) И (стрСловоПассажа.Размер > 3) Тогда 
			Если ДобавитьИЛИ Тогда 
				Запрос.Текст = Запрос.Текст + Символы.ПС + "    ИЛИ ";
			Иначе	
				ДобавитьИЛИ = Истина;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "Наименование ПОДОБНО ""%[.,; ]"+стрСловоПассажа.Слово+"[.,; ]%""
			| ИЛИ Наименование ПОДОБНО ""%[.,; ]"+стрСловоПассажа.Слово+"%""
			| ИЛИ Наименование ПОДОБНО ""%"+стрСловоПассажа.Слово+"[.,; ]%""
			| ИЛИ Наименование = """+стрСловоПассажа.Слово+"""";   
			ДобавилиУсловие = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Если ДобавилиУсловие Тогда
		тзНаселенныеПункты = Запрос.Выполнить().Выгрузить();
		Возврат тзНаселенныеПункты;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

//Поиск улицы
//
Функция НайтиУлицу(Знач Адрес)
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Адрес = стрЗаменить(СокрЛП(Адрес),"""","");
	АдресПоПассажам = стрЗаменить(СокрЛП(Адрес),",",Символы.ПС);
	
	НайденныйПассаж = "";
	
	Для ъ = 1 по СтрЧислоСтрок(АдресПоПассажам) Цикл
		ТекПассаж = СтрПолучитьСтроку(АдресПоПассажам,ъ);
		Если ТекПассаж = "" Тогда Продолжить; КонецЕсли;
		
		тзСловаПассажа = ПолучитьТаблицуСлов(ТекПассаж);
		
		Для Каждого стрСловоПассажа ИЗ тзСловаПассажа Цикл
			Если сзПризнакиУлиц.НайтиПоЗначению(стрСловоПассажа.Слово) <> Неопределено Тогда 
				НайденныйПассаж = ТекПассаж;
			КонецЕсли;	
		КонецЦикла;		
		
	КонецЦикла;
	
	Если НайденныйПассаж = "" Тогда
		тзСловаПассажа = ПолучитьТаблицуСлов(Адрес);
	Иначе
		тзСловаПассажа = ПолучитьТаблицуСлов(НайденныйПассаж);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    Ссылка
	|  ИЗ
	|    Справочник.новаУлицы
	|  ГДЕ
	|    ";
	
	ДобавитьИЛИ = Ложь;
	ДобавилиУсловие = Ложь;
	
	Для Каждого стрСловоПассажа Из тзСловаПассажа Цикл
		Если сзПризнакиУлиц.НайтиПоЗначению(стрСловоПассажа.Слово) = Неопределено Тогда 
			Если ДобавитьИЛИ Тогда 
				Запрос.Текст = Запрос.Текст + Символы.ПС + "    ИЛИ ";
			Иначе	
				ДобавитьИЛИ = Истина;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "Наименование ПОДОБНО ""%[.,; ]"+стрСловоПассажа.Слово+"[.,; ]%""
			| ИЛИ Наименование ПОДОБНО ""%[.,; ]"+стрСловоПассажа.Слово+"%""
			| ИЛИ Наименование ПОДОБНО ""%"+стрСловоПассажа.Слово+"[.,; ]%""
			| ИЛИ Наименование = """+стрСловоПассажа.Слово+"""";   
			ДобавилиУсловие = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Если ДобавилиУсловие Тогда
		тзУлицы = Запрос.Выполнить().Выгрузить();
		Возврат тзУлицы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	
КонецФункции	

//Адрес раскладывается на слова, удаляются возможные разделители
//
Функция ПолучитьТаблицуСлов(Знач Адрес)
	
	Адрес = стрЗаменить(СокрЛП(Адрес),"""","");
	Адрес = стрЗаменить(СокрЛП(Адрес),","," ");
	Адрес = стрЗаменить(СокрЛП(Адрес),"  "," ");
	Адрес = стрЗаменить(СокрЛП(Адрес),";"," ");
	Адрес = стрЗаменить(СокрЛП(Адрес),"  "," ");
	Адрес = стрЗаменить(СокрЛП(Адрес),"."," ");
	Адрес = стрЗаменить(СокрЛП(Адрес),"  "," ");
	Адрес = стрЗаменить(СокрЛП(Адрес)," г "," ");
	Адрес = стрЗаменить(СокрЛП(Адрес),"  "," ");
	Адрес = стрЗаменить(СокрЛП(Адрес)," ",Символы.ПС);
	
	тзАдреса = Новый ТаблицаЗначений();
	тзАдреса.Колонки.Добавить("Слово");
	тзАдреса.Колонки.Добавить("Приоритет");
	тзАдреса.Колонки.Добавить("Размер");
	
	Для ъ = 1 по СтрЧислоСтрок(Адрес) Цикл
		ТекСлово = СтрПолучитьСтроку(Адрес,ъ);
		Если ПустаяСтрока(ТекСлово) Тогда
			Продолжить;
		КонецЕсли;
		
		стрАдрес = тзАдреса.Добавить();
		стрАдрес.Слово = ТекСлово;
		стрАдрес.Приоритет = 0;
		стрАдрес.Размер = СтрДлина(ТекСлово);
	КонецЦикла;
	
	тзАдреса.Сортировать("Размер Убыв");
	
	Возврат тзАдреса;
	
КонецФункции	

//Поиск адреса по классификатору
//
Функция НайтиАдресаПоКлассификатору(Адрес)
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	тзУлицы = НайтиУлицу(Адрес);
	тзРегионы = НайтиРегион(Адрес);
	тзНаселенныеПункты = НайтиНаселенныйПункт(Адрес);
	тзСлова = ПолучитьТаблицуСлов(Адрес);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	НомерВТЗапрос = 1;
	НомерВТНовой = 1;
	ТаблицаЗапроса = 1;
	
	Для Каждого стрСлово из тзСлова Цикл
		
		ТекСтрока = стрСлово.Слово;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|    *
		|  ПОМЕСТИТЬ ВременнаяТаблица"+(НомерВТНовой)+"   
		|  ИЗ
		|    "+?(ТаблицаЗапроса=1,"Справочник.новаАдреса","ВременнаяТаблица"+(НомерВТЗапрос))+" КАК Адреса
		|  ГДЕ
		|    ";
		
		ДобавитьИЛИ = "";
		
		Если (((тзУлицы <> Неопределено) И тзУлицы.Количество()>0) 
			ИЛИ ((тзРегионы <> Неопределено) И тзРегионы.Количество()>0) 
			ИЛИ ((тзНаселенныеПункты <> Неопределено)  И тзНаселенныеПункты.Количество()>0))
			И (ТаблицаЗапроса = 1) Тогда
			Если (тзРегионы <> Неопределено) И (тзРегионы.Количество() > 0) Тогда
				Запрос.Текст = Запрос.Текст + "Адреса.Регион В (&Регионы)";				
				Запрос.УстановитьПараметр("Регионы",тзРегионы.ВыгрузитьКолонку("Ссылка"));  
				ДобавитьИЛИ = " И ";
			КонецЕсли;
			Если (тзНаселенныеПункты <> Неопределено) И (тзНаселенныеПункты.Количество() > 0) Тогда
				Запрос.Текст = Запрос.Текст + ДобавитьИЛИ + "Адреса.НаселенныйПункт В (&НаселенныйПункты)";				
				Запрос.УстановитьПараметр("НаселенныйПункты",тзНаселенныеПункты.ВыгрузитьКолонку("Ссылка"));  
				ДобавитьИЛИ = " И ";
			КонецЕсли;
			Если (тзУлицы <> Неопределено) И (тзУлицы.Количество() > 0) Тогда
				Запрос.Текст = Запрос.Текст + ДобавитьИЛИ +  "Адреса.Улица В (&Улицы)";				
				Запрос.УстановитьПараметр("Улицы",тзУлицы.ВыгрузитьКолонку("Ссылка"));  
				ДобавитьИЛИ = " И ";
			ИначеЕсли (тзУлицы <> Неопределено) И (тзУлицы.Количество() = 0) 
				И (тзНаселенныеПункты <> Неопределено) И (тзНаселенныеПункты.Количество() > 0) Тогда
				Запрос.Текст = Запрос.Текст + ДобавитьИЛИ +  "Адреса.Улица = (&ПустаяУлица)";				
				Запрос.УстановитьПараметр("ПустаяУлица",Справочники.новаУлицы.ПустаяСсылка());  
			КонецЕсли;
		Иначе	
			Запрос.Текст = Запрос.Текст + "Адреса.Наименование ПОДОБНО &Слово1 ИЛИ Адреса.Наименование ПОДОБНО &Слово2  ИЛИ Адреса.Наименование ПОДОБНО &Слово3 ";
			Запрос.УстановитьПараметр("Слово1", "%[.,; ]"+ТекСтрока+"[.,; ]%");   
			Запрос.УстановитьПараметр("Слово2", "%[.,; ]"+ТекСтрока);   
			Запрос.УстановитьПараметр("Слово3", ТекСтрока+"[.,; ]%");   
		КонецЕсли;
		
		тзАдреса = Запрос.Выполнить().Выгрузить();
		
		Если тзАдреса[0].Количество > 0 Тогда
			НомерВТЗапрос = НомерВТНовой;
			ТаблицаЗапроса = 2;
		КонецЕсли;	
		НомерВТНовой = НомерВТНовой + 1;
	КонецЦикла;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|   Адреса.Ссылка КАК Ссылка,
	|   Представление(Адреса.Наименование) КАК Наименование,
	|   Представление(Адреса.Улица) КАК Улица,
	|   Представление(Адреса.Страна) КАК Страна,
	|   Представление(Адреса.НаселенныйПункт) КАК НаселенныйПункт,
	|   Представление(Адреса.Регион) КАК Регион,
	|   Представление(Адреса.Дом) КАК Дом,
	|   Представление(Адреса.Корпус) КАК Корпус,
	|   Адреса.Широта КАК Широта,
	|   Адреса.Долгота КАК Долгота
	|ИЗ
	|    ВременнаяТаблица"+(НомерВТЗапрос)+" КАК Адреса
	|УПОРЯДОЧИТЬ ПО Адреса.Регион ВОЗР, Адреса.НаселенныйПункт ВОЗР, Адреса.Улица ВОЗР, Адреса.Дом ВОЗР, Адреса.Корпус ВОЗР";
	
	тзАдреса = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат тзАдреса;
	
КонецФункции	

// Получает таблицу найденных адресов
//
// Параметры:
//  Адрес <Строка>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьТаблицуАдресов(Адрес, НомерЗаказа = Неопределено, РучнойПоиск = Ложь) Экспорт
	
	//+Степанов Может использоваться DaData.
	
	СистемаРаспознаванияАдреса = ОбщегоНазначенияПовтИсп.ИспользуемаяСистемаРаспознаванияАдресов(РучнойПоиск);
	
	Если СистемаРаспознаванияАдреса = Перечисления.СистемыРаспознаванияАдресов.Yandex И ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено	
	КонецЕсли;
	
	//+Степанов Может использоваться DaData.
	Если СистемаРаспознаванияАдреса = Перечисления.СистемыРаспознаванияАдресов.Yandex Тогда 
		Адрес = СтрЗаменить(Адрес,"№","");	
	КонецЕсли;	
	
	тзАдреса = Неопределено;
	
	Если НЕ ОбластьПоискаКлассификатор И НЕ ОбластьПоискаЯндекс Тогда
		ОбластьПоискаКлассификатор = Истина;
	КонецЕсли;	
	
	Если ОбластьПоискаКлассификатор Тогда
		тзАдреса = НайтиАдресаПоКлассификатору(Адрес);
	КонецЕсли;
	
	Если ОбластьПоискаЯндекс  Тогда
		тзАдреса = НайтиАдресаПоЯндексу(Адрес,тзАдреса, НомерЗаказа,РучнойПоиск);
		//тзАдреса = НайтиАдресаПоЯндексу_2(Адрес,тзАдреса);	// резервная функция
	КонецЕсли;	
	
	Возврат тзАдреса;
	
КонецФункции

//Кодировка адреса в шестнадцатиричный формат
//
Функция ПерекодироватьАдрес(АдресКирилицей)
	
	КоличествоСимволов = СтрДлина(АдресКирилицей);
	Результат = "";
	
	Для ъ = 1 по КоличествоСимволов Цикл
		Символ = Сред(АдресКирилицей,ъ,1);
		
		Код1251 = Кодировка1251.НайтиПоЗначению(Символ);
		Если Код1251 <> Неопределено Тогда
			СимволВСтроку = "%"+Код1251.Представление;
		Иначе
			СимволВСтроку = Символ;
		КонецЕсли;	
		
		Результат = Результат + СимволВСтроку;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

//Создание нового адреса и заполнение всех полей адреса
//
Функция СоздатьНовыйАдрес(СтрокаАдреса) Экспорт
	
//+Широков по письму
ПроверкаВсегдаНовыйАдрес = Ложь;
Попытка
	ПроверкаВсегдаНовыйАдрес = 	ВсегдаНовыйАдрес;
Исключение
КонецПопытки;

Если ПроверкаВсегдаНовыйАдрес = Ложь Тогда
//-Широков по письму
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	новаАдреса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.новаАдреса КАК новаАдреса
		|ГДЕ
		|	новаАдреса.Широта = &Широта
		|	И новаАдреса.Долгота = &Долгота";
		Запрос.УстановитьПараметр("Широта",Число(СтрокаАдреса.Широта));
		Запрос.УстановитьПараметр("Долгота",Число(СтрокаАдреса.Долгота));
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
	Исключение
	КонецПопытки;
//+Широков по письму
КонецЕсли;
//-Широков по письму
	
	
	НовыйАдрес = Справочники.новаАдреса.СоздатьЭлемент();
	//+Степанов По умолчанию страна - Россия.
	Если ПустаяСтрока(СтрокаАдреса.Страна) Тогда 
		Страна = Справочники.новаСтраны.Россия;
	Иначе	
		Страна = Справочники.новаСтраны.НайтиПоНаименованию(СтрокаАдреса.Страна);
		Если Страна.Пустая() Тогда
			Страна =  Справочники.новаСтраны.СоздатьЭлемент();
			Страна.Наименование = СтрокаАдреса.Страна;
			Страна.Записать();
		КонецЕсли;
	КонецЕсли;
	//-Степанов
	Регион = Справочники.новаРегионы.НайтиПоНаименованию(СтрокаАдреса.Регион,,,Страна.Ссылка);
	Если Регион.Пустая() Тогда
		Регион =  Справочники.новаРегионы.СоздатьЭлемент();
		Регион.Наименование = СтрокаАдреса.Регион;
		Регион.Владелец = Страна.Ссылка;
		Регион.Записать();
	КонецЕсли;
	
	НаселенныйПункт = Справочники.новаНаселенныеПункты.НайтиПоНаименованию(СтрокаАдреса.НаселенныйПункт,,,Регион.Ссылка);
	Если НаселенныйПункт.Пустая() Тогда
		НаселенныйПункт =  Справочники.новаНаселенныеПункты.СоздатьЭлемент();
		НаселенныйПункт.Наименование = СтрокаАдреса.НаселенныйПункт;
		НаселенныйПункт.Владелец = Регион.Ссылка;
		НаселенныйПункт.Записать();
	КонецЕсли;
	
	Улица = Справочники.новаУлицы.НайтиПоНаименованию(СтрокаАдреса.Улица,,,НаселенныйПункт.Ссылка);
	//+Широков по письму Кривая привязка при "Выгрузке ШК"
	Если ПроверкаСокрЛПпустойУлицы Тогда
		Если СокрЛП(Улица) = "" Тогда
			Улица =  Справочники.новаУлицы.СоздатьЭлемент();
			Улица.Наименование = СтрокаАдреса.Улица;
			Улица.Владелец = НаселенныйПункт.Ссылка;
			Улица.Записать();
		КонецЕсли;
	Иначе	
		//-Широков по письму Кривая привязка при "Выгрузке ШК"
		Если Улица.Пустая() Тогда
			Улица =  Справочники.новаУлицы.СоздатьЭлемент();
			Улица.Наименование = СтрокаАдреса.Улица;
			//+Широков по письму 21.01.2021
			Улица.НаименованиеПолное = СтрокаАдреса.Улица;
			//-Широков по письму 21.01.2021
			Улица.Владелец = НаселенныйПункт.Ссылка;
			Улица.Записать();
		КонецЕсли;
		//+Широков по письму Кривая привязка при "Выгрузке ШК"
	КонецЕсли;
	//-Широков по письму Кривая привязка при "Выгрузке ШК"
	
	НовыйАдрес.Страна 	= Страна;
	НовыйАдрес.Регион 	= Регион;
	НовыйАдрес.НаселенныйПункт = НаселенныйПункт;
	НовыйАдрес.Улица 	= Улица;
	//+Широков по письму 21.01.2021
	//БАГ - Если создаем новую улицу, то в новом адресе улица будет пустая
	Если ПроверкаВсегдаНовыйАдрес Тогда
		Если НЕ НовыйАдрес.Улица = Улица Тогда
			НовыйАдрес.Улица = Улица.Ссылка;
		КонецЕсли;
	КонецЕсли;
	//-Широков по письму  21.01.2021
	НовыйАдрес.Регион	= Регион;
	НовыйАдрес.Дом 		= СтрокаАдреса.Дом;
	НовыйАдрес.Корпус 	= СтрокаАдреса.Корпус;
	НовыйАдрес.Широта 	= Число(СтрокаАдреса.Широта);
	НовыйАдрес.Долгота 	= Число(СтрокаАдреса.Долгота);
	НовыйАдрес.СформироватьНаименование();
	НовыйАдрес.Записать();
	

Возврат НовыйАдрес.Ссылка;
	
КонецФункции	

//Поиск через сайт Яндекса
//+Степанов Задача № 3165 Добавлен параметр "СтрокаПоиска" для поиска в DaData

Функция НайтиАдресаПоЯндексу(Адрес, тзАдреса, НомерЗаказа = Неопределено,РучнойПоиск = Ложь) Экспорт
	
	//+Степанов
	Если тзАдреса = Неопределено Тогда
		тзАдреса = Новый ТаблицаЗначений();
		тзАдреса.Колонки.Добавить("Ссылка");
		тзАдреса.Колонки.Добавить("Наименование");
		тзАдреса.Колонки.Добавить("Страна");
		тзАдреса.Колонки.Добавить("Регион");
		тзАдреса.Колонки.Добавить("НаселенныйПункт");
		тзАдреса.Колонки.Добавить("Улица");
		тзАдреса.Колонки.Добавить("Дом");
		тзАдреса.Колонки.Добавить("Корпус");
		тзАдреса.Колонки.Добавить("Широта");
		тзАдреса.Колонки.Добавить("Долгота");
	Иначе
		тзАдреса.Очистить();
	КонецЕсли;	
	//-Степанов
	
	Адрес = СтрЗаменить(Адрес,"SPB","");
	
	//+Степанов Добавлено ветвление поиска адреса в зависимости от используемой системы распознавания адресов.
	ИспользуемаяСистемаРаспознаванияАдресов = ОбщегоНазначенияПовтИсп.ИспользуемаяСистемаРаспознаванияАдресов(РучнойПоиск);
	Если ИспользуемаяСистемаРаспознаванияАдресов = Перечисления.СистемыРаспознаванияАдресов.DaData Тогда
		
		Если ПустаяСтрока(Адрес) Тогда
			Возврат тзАдреса
		КонецЕсли;	
		
		Возврат ПолучитьАдресаИзDaData(Адрес,тзАдреса);
		
	Иначе
		
		//+Степанов Если используется СперваYandexЗатемDaData, то сначала ищем в DaData, потом пробуем в Yandex.
		Если ИспользуемаяСистемаРаспознаванияАдресов = Перечисления.СистемыРаспознаванияАдресов.СперваYandexЗатемDaData Тогда
			ТаблицаАдресовDaData = ПолучитьАдресаИзDaData(НомерЗаказа,тзАдреса);
			Если Не ПустаяСтрока(ТаблицаАдресовDaData[0].Наименование) Тогда
				Возврат ТаблицаАдресовDaData;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЯндексAPI = "" Тогда
			Возврат тзАдреса;
		КонецЕсли;
		
		ИспользоватьПрокси = ПараметрыСеанса.новаТекущийПользователь.ИспользоватьПрокси;
		
		//8.3.8
		//КодированнаяСтрокаАдреса = ПерекодироватьАдрес(Адрес);
		//8.3.8
		
		КодированнаяСтрокаАдреса = Адрес;
		ВременныйФайл = "bitnova"+СокрЛП(Новый УникальныйИдентификатор);
		
		//http://192.168.7.247:8888/geocode-maps.yandex.ru/1.x/?apikey=487426f6-6c06-47a3-a8ca-dd8ce922202b&geocode=
		
		
		//key2 = 
		
		
		Если ИспользоватьПрокси Тогда
			Прокси = Новый ИнтернетПрокси;
			Прокси.Пользователь = ПараметрыСеанса.новаТекущийПользователь.ПроксиПользователь;                   //СпособВыбораСертификатаWindows.ВыбиратьСпособВыбораСертификатаWindows.Авто
			Прокси.Пароль = ПараметрыСеанса.новаТекущийПользователь.ПроксиПароль;
			Защ = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
			Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru",443,,,Прокси,,Защ);
		Иначе
			
			//Если Час(ТекущаяДата()) < 11 Тогда
				//Защ = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
				//
				//Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru",443,,,,,Защ);
				//
				//
				///////8.3.9
				//ЗапросHTTPЯндекс = Новый HTTPЗапрос("/1.x/?geocode="+КодированнаяСтрокаАдреса+"&key="+ЯндексAPI);
				/////8.3.9
			//Иначе
				//	Яндекс = Новый HTTPСоединение("192.168.7.247",8888);
				//
				//
				//	/////8.3.9
				//	ЗапросHTTPЯндекс = Новый HTTPЗапрос("/geocode-maps.yandex.ru/1.x/?apikey=487426f6-6c06-47a3-a8ca-dd8ce922202b&geocode="+КодированнаяСтрокаАдреса);
				
				
				
				//Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru",443,,,,,Защ);
				//
				//
				///////8.3.9
				//купленный ключ 29.10.2020
				Защ = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
				Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru",443,,,,,Защ);
				ЗапросHTTPЯндекс = Новый HTTPЗапрос("/1.x/?geocode="+КодированнаяСтрокаАдреса+"&apikey="+"3cf723e5-e472-4e49-b918-b054f5582497");
				//купленный ключ 29.10.2020
				
				
				/// до 29.10.2020---------------------------------
				//----------------------------Яндекс = Новый HTTPСоединение("192.168.7.246",85);
				
				
				/////8.3.9
				//----------------------------ЗапросHTTPЯндекс = Новый HTTPЗапрос("/services/xml/geocoder/?apikey=487426f6-6c06-47a3-a8ca-dd8ce922202b&geocode="+КодированнаяСтрокаАдреса);
				/// до 29.10.2020---------------------------------
			//КонецеСли;	
		КонецЕсли;	
		
		
		Попытка
			/////8.3.8
			//Яндекс.Получить("/1.x/?geocode="+КодированнаяСтрокаАдреса+"&key="+ЯндексAPI,КаталогВременныхФайлов()+ВременныйФайл);
			/////8.3.8
			
			/////8.3.9 
			Яндекс.Получить(ЗапросHTTPЯндекс,КаталогВременныхФайлов()+ВременныйФайл);
			/////8.3.9
		Исключение
			Сообщить("Ошибка при попытке геокодировать по яндексу адрес: "+Адрес);
			Сообщить(ОписаниеОшибки());
			Возврат тзАдреса;
		КонецПопытки;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КаталогВременныхФайлов()+ВременныйФайл);
		
		//Попытка
		ПостроительDOM 			= Новый ПостроительDOM;
		ДокументДОМ 			= ПостроительDOM.Прочитать(ЧтениеXML);
		//Исключение
		//Сообщить("Ошибка при попытке геокодировать по яндексу адрес: "+Адрес);
		//Сообщить(ОписаниеОшибки());
		//Возврат тзАдреса;
		//КонецПопытки;
		
		СписокText 				= ДокументДОМ.ПолучитьЭлементыПоИмени("text");
		СписокPos 				= ДокументДОМ.ПолучитьЭлементыПоИмени("pos");
		СписокСтран				= ДокументДОМ.ПолучитьЭлементыПоИмени("CountryName");
		СписокРегионов 			= ДокументДОМ.ПолучитьЭлементыПоИмени("AdministrativeAreaName");
		СписокНаселенныхПунктов = ДокументДОМ.ПолучитьЭлементыПоИмени("LocalityName");
		СписокУлиц 				= ДокументДОМ.ПолучитьЭлементыПоИмени("ThoroughfareName");
		СписокДомов				= ДокументДОМ.ПолучитьЭлементыПоИмени("PremiseNumber");
		
		//+Широков по письму 21.01.2021
		НомерСпискаРайонов = -1;
		Попытка
			Если ПроверкаСокрЛПпустойУлицы Тогда
				СписокРайонов			= ДокументДОМ.ПолучитьЭлементыПоИмени("DependentLocalityName");
				НомерСпискаРайонов			= СписокРайонов.Количество() - 1;
			КонецЕсли;
		Исключение
		КонецПопытки;
		//-Широков по письму 21.01.2021

		Если (СписокText.Количество() = 0) ИЛИ (СписокPos.Количество() = 0) Тогда
			Возврат тзАдреса;	
		КонецЕсли;
		
		//+Степанов Создадим таблицу в начале обработки.
		//Если тзАдреса = Неопределено Тогда
		//	тзАдреса = Новый ТаблицаЗначений();
		//	тзАдреса.Колонки.Добавить("Ссылка");
		//	тзАдреса.Колонки.Добавить("Наименование");
		//	тзАдреса.Колонки.Добавить("Страна");
		//	тзАдреса.Колонки.Добавить("Регион");
		//	тзАдреса.Колонки.Добавить("НаселенныйПункт");
		//	тзАдреса.Колонки.Добавить("Улица");
		//	тзАдреса.Колонки.Добавить("Дом");
		//	тзАдреса.Колонки.Добавить("Корпус");
		//	тзАдреса.Колонки.Добавить("Широта");
		//	тзАдреса.Колонки.Добавить("Долгота");
		//КонецЕсли;	
		//-Степанов
		
		Для ъ = 0 по СписокText.Количество()-1 Цикл
			Координаты = СписокPos[Ъ].ТекстовоеСодержимое;
			Разделитель = Найти(Координаты," ");
			Широта = Число(Сред(Координаты, Разделитель + 1));
			Долгота = Число(Лев(Координаты, Разделитель - 1));
			
			Если Широта = 0 ИЛИ Долгота = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			стрАдрес = тзАдреса.Добавить();
			Если СписокText.Количество() > ъ Тогда
				стрАдрес.Наименование = СписокText[Ъ].ТекстовоеСодержимое;
			КонецЕсли;	
			Если СписокСтран.Количество() > ъ Тогда
				стрАдрес.Страна = СписокСтран[Ъ].ТекстовоеСодержимое;
			КонецЕсли;	
			Если СписокРегионов.Количество() > ъ Тогда
				стрАдрес.Регион = СписокРегионов[Ъ].ТекстовоеСодержимое;
			КонецЕсли;	
			Если СписокНаселенныхПунктов.Количество() > ъ Тогда
				стрАдрес.НаселенныйПункт = СписокНаселенныхПунктов[Ъ].ТекстовоеСодержимое;
			КонецЕсли;	
			Если СписокУлиц.Количество() > ъ Тогда
				стрАдрес.Улица = СписокУлиц[Ъ].ТекстовоеСодержимое;
			КонецЕсли;
			//+Широков по письму 21.01.2021
			Попытка
				Если ПроверкаСокрЛПпустойУлицы Тогда
					Если СокрЛП(стрАдрес.Улица) = "" Тогда
						Если НомерСпискаРайонов >= 0 Тогда
							стрАдрес.Улица = СписокРайонов[НомерСпискаРайонов].ТекстовоеСодержимое;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			//-Широков по письму 21.01.2021

			Если СписокДомов.Количество() > ъ Тогда
				стрАдрес.Дом = СписокДомов[Ъ].ТекстовоеСодержимое;
			КонецЕсли;	
			Если СписокPos.Количество() > ъ Тогда
				Координаты = СписокPos[Ъ].ТекстовоеСодержимое;
				Разделитель = Найти(Координаты," ");
				стрАдрес.Широта = Широта;
				стрАдрес.Долгота = Долгота;
			КонецЕсли;	
			
		КонецЦикла;	
		
		Возврат тзАдреса;
		
	КонецЕсли;
КонецФункции	



//Функция НайтиАдресаПоЯндексу_2(Адрес, тзАдреса)
//	
//	Адрес = СтрЗаменить(Адрес,"SPB","");
//	
//	Если ЯндексAPI = "" Тогда
//		Возврат тзАдреса;
//	КонецЕсли;
//	
//	
//	КодированнаяСтрокаАдреса = ПерекодироватьАдрес(Адрес);
//	ВременныйФайл = "bitnova"+СокрЛП(Новый УникальныйИдентификатор);
//	request = "/1.x/?geocode="+КодированнаяСтрокаАдреса;
//	
//	
//	Прокси = WSСсылки.FrontDeliveryTest.СоздатьWSПрокси("http://tempuri.org/", "Service1C", "BasicHttpBinding_IService1C");	
//	
//	
//	Попытка
//		РезЗапроса = Прокси.YandexGeocoder(request);
//	Исключение
//		Сообщить("Ошибка при попытке геокодировать по яндексу адрес: "+Адрес);
//		Сообщить(ОписаниеОшибки());
//		Возврат тзАдреса;
//	КонецПопытки;
//	
//	//АдресХранилища = ПоместитьВоВременноеХранилище(РезЗапроса, КаталогВременныхФайлов() + ВременныйФайл + ".xml");
//	
//	ЧтениеXML = Новый ЧтениеXML;
//	ЧтениеXML.УстановитьСтроку(РезЗапроса);
//	
//	
//		
//	//ИспользоватьПрокси = ПараметрыСеанса.новаТекущийПользователь.ИспользоватьПрокси;
//	//
//	//Если ИспользоватьПрокси Тогда
//	//	Прокси = Новый ИнтернетПрокси;
//	//	Прокси.Пользователь = ПараметрыСеанса.новаТекущийПользователь.ПроксиПользователь;
//	//	Прокси.Пароль = ПараметрыСеанса.новаТекущийПользователь.ПроксиПароль;
//	//    Защ = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто), Новый СертификатыУдостоверяющихЦентровWindows());
//	//	Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru",443,,,Прокси,,Защ);
//	//Иначе
//	//	Защ = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать), Новый СертификатыУдостоверяющихЦентровWindows());
//	//	Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru",443,,,,,Защ);
//	//КонецЕсли;	
//	//
//	//КодированнаяСтрокаАдреса = ПерекодироватьАдрес(Адрес);
//	//ВременныйФайл = "bitnova"+СокрЛП(Новый УникальныйИдентификатор);
//	//		
//	//Попытка
//	//	Яндекс.Получить("/1.x/?geocode="+КодированнаяСтрокаАдреса+"&key="+ЯндексAPI,КаталогВременныхФайлов()+ВременныйФайл);
//	//Исключение
//	//	Сообщить("Ошибка при попытке геокодировать по яндексу адрес: "+Адрес);
//	//	Сообщить(ОписаниеОшибки());
//	//	Возврат тзАдреса;
//	//КонецПопытки;
//	
//	//ЧтениеXML = Новый ЧтениеXML;
//	//ЧтениеXML.ОткрытьФайл(АдресХранилища);
//	
//	//Попытка
//	ПостроительDOM 			= Новый ПостроительDOM;
//	ДокументДОМ 			= ПостроительDOM.Прочитать(ЧтениеXML);
//	//Исключение
//		//Сообщить("Ошибка при попытке геокодировать по яндексу адрес: "+Адрес);
//		//Сообщить(ОписаниеОшибки());
//		//Возврат тзАдреса;
//	//КонецПопытки;
//	
//	СписокText 				= ДокументДОМ.ПолучитьЭлементыПоИмени("text");
//	СписокPos 				= ДокументДОМ.ПолучитьЭлементыПоИмени("pos");
//	СписокСтран				= ДокументДОМ.ПолучитьЭлементыПоИмени("CountryName");
//	СписокРегионов 			= ДокументДОМ.ПолучитьЭлементыПоИмени("AdministrativeAreaName");
//	СписокНаселенныхПунктов = ДокументДОМ.ПолучитьЭлементыПоИмени("LocalityName");
//	СписокУлиц 				= ДокументДОМ.ПолучитьЭлементыПоИмени("ThoroughfareName");
//	СписокДомов				= ДокументДОМ.ПолучитьЭлементыПоИмени("PremiseNumber");
//	
//	Если (СписокText.Количество() = 0) ИЛИ (СписокPos.Количество() = 0) Тогда
//		Возврат тзАдреса;	
//	КонецЕсли;
//	
//	Если тзАдреса = Неопределено Тогда
//		тзАдреса = Новый ТаблицаЗначений();
//		тзАдреса.Колонки.Добавить("Ссылка");
//		тзАдреса.Колонки.Добавить("Наименование");
//		тзАдреса.Колонки.Добавить("Страна");
//		тзАдреса.Колонки.Добавить("Регион");
//		тзАдреса.Колонки.Добавить("НаселенныйПункт");
//		тзАдреса.Колонки.Добавить("Улица");
//		тзАдреса.Колонки.Добавить("Дом");
//		тзАдреса.Колонки.Добавить("Корпус");
//		тзАдреса.Колонки.Добавить("Широта");
//		тзАдреса.Колонки.Добавить("Долгота");
//	КонецЕсли;	
//		
//	Для ъ = 0 по СписокText.Количество()-1 Цикл
//		Координаты = СписокPos[Ъ].ТекстовоеСодержимое;
//		Разделитель = Найти(Координаты," ");
//		Широта = Число(Сред(Координаты, Разделитель + 1));
//		Долгота = Число(Лев(Координаты, Разделитель - 1));
//		
//		Если Широта = 0 ИЛИ Долгота = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		стрАдрес = тзАдреса.Добавить();
//		Если СписокText.Количество() > ъ Тогда
//			стрАдрес.Наименование = СписокText[Ъ].ТекстовоеСодержимое;
//		КонецЕсли;	
//		Если СписокСтран.Количество() > ъ Тогда
//			стрАдрес.Страна = СписокСтран[Ъ].ТекстовоеСодержимое;
//		КонецЕсли;	
//		Если СписокРегионов.Количество() > ъ Тогда
//			стрАдрес.Регион = СписокРегионов[Ъ].ТекстовоеСодержимое;
//		КонецЕсли;	
//		Если СписокНаселенныхПунктов.Количество() > ъ Тогда
//			стрАдрес.НаселенныйПункт = СписокНаселенныхПунктов[Ъ].ТекстовоеСодержимое;
//		КонецЕсли;	
//		Если СписокУлиц.Количество() > ъ Тогда
//			стрАдрес.Улица = СписокУлиц[Ъ].ТекстовоеСодержимое;
//		КонецЕсли;	
//		Если СписокДомов.Количество() > ъ Тогда
//			стрАдрес.Дом = СписокДомов[Ъ].ТекстовоеСодержимое;
//		КонецЕсли;	
//		Если СписокPos.Количество() > ъ Тогда
//			Координаты = СписокPos[Ъ].ТекстовоеСодержимое;
//			Разделитель = Найти(Координаты," ");
//			стрАдрес.Широта = Широта;
//			стрАдрес.Долгота = Долгота;
//		КонецЕсли;	
//		       
//	КонецЦикла;	
//	
//	Возврат тзАдреса;

//КонецФункции



Функция НайтиАдресПоКоординатам(парамШирота, парамДолгота) Экспорт
	
	Если ЯндексAPI = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ИспользоватьПрокси = ПараметрыСеанса.новаТекущийПользователь.ИспользоватьПрокси;
	Если ИспользоватьПрокси Тогда
		Прокси = Новый ИнтернетПрокси;
		Прокси.Пользователь = ПараметрыСеанса.новаТекущийПользователь.ПроксиПользователь;       //СпособВыбораСертификатаWindows.Авто
		Прокси.Пароль = ПараметрыСеанса.новаТекущийПользователь.ПроксиПароль;
		Защ = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
		Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru",443,,,Прокси);
	Иначе
		Защ = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
		Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru",443,,,,,Защ);
	КонецЕсли;	
	
	ВременныйФайл = "getAddr"+СокрЛП(Новый УникальныйИдентификатор);
	Попытка
		Яндекс.Получить("/1.x/?geocode="+Формат(парамДолгота,"ЧРД=.; ЧН=0; ЧГ=0")+","+Формат(парамШирота,"ЧРД=.; ЧН=0; ЧГ=0")+"&key="+ЯндексAPI,КаталогВременныхФайлов()+ВременныйФайл);
	Исключение
		Возврат "";
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогВременныхФайлов()+ВременныйФайл);
	ПостроительDOM 			= Новый ПостроительDOM;
	ДокументДОМ 			= ПостроительDOM.Прочитать(ЧтениеXML);
	СписокАдресов = ДокументДОМ.ПолучитьЭлементыПоИмени("AddressLine");
	ЛучшийАдрес = "";
	Для н = 0 по СписокАдресов.Количество()-1 Цикл
		ПробныйАдрес = СписокАдресов[н].ТекстовоеСодержимое;
		Если СтрДлина(ЛучшийАдрес) < СтрДлина(ПробныйАдрес) Тогда
			ЛучшийАдрес = ПробныйАдрес;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЛучшийАдрес;
КонецФункции

//+Степанов Задача № 3165
//Функция ПолучитьАдресаИзDaData(НомерЗаказа, тзАдреса)
//	Прокси  =  WSСсылки.FrontDelivery.СоздатьWSПрокси("http://tempuri.org/","Service1C","BasicHttpBinding_IService1C");
//	
//	Фабрика = Прокси.ФабрикаXDTO;    
//	
//	Тип_orders = Фабрика.Пакеты.Получить("http://schemas.microsoft.com/2003/10/Serialization/Arrays").Получить("ArrayOfint");
//	orders = Фабрика.Создать(Тип_orders);
//	orders.int.Добавить(НомерЗаказа);
//	Рез = Прокси.AddressSuggest(orders);
//	Для Каждого СтрокаАдреса Из Рез.AddressSuggest Цикл
//		НоваяСтрока = тзАдреса.Добавить();
//		НоваяСтрока.Долгота = СтрокаАдреса.Geo_lon;
//		НоваяСтрока.Дом =  СтрокаАдреса.House;
//		НоваяСтрока.Корпус = СтрокаАдреса.Block;
//		НоваяСтрока.Наименование = СтрокаАдреса.Value;
//		НоваяСтрока.НаселенныйПункт = СтрокаАдреса.Settlement;
//		НоваяСтрока.Регион = СтрокаАдреса.Region;
//		//НоваяСтрока.Ссылка =
//		//НоваяСтрока.Страна =
//		НоваяСтрока.Улица =  СтрокаАдреса.Street;
//		НоваяСтрока.Широта = СтрокаАдреса.Geo_lat; 
//	КонецЦикла;	
//	
//	Возврат тзАдреса
//	
//КонецФункции	

//DaData возвращает геокоординаты только если запрашивается конкретный адрес, КоличествоСтрокВВыдаче = 1
Функция ПолучитьАдресаИзDaData(СтрокаПоиска, тзАдреса, КоличествоСтрокВВыдаче = 5)
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Определение = Новый WSОпределения("http://192.168.5.9:85/services/service1C.svc?wsdl","Service1C","BasicHttpBinding_IService1C");	
	Иначе	
		Определение = Новый WSОпределения("http://192.168.5.9:82/services/service1C.svc?wsdl","Service1C","BasicHttpBinding_IService1C");
	КонецЕсли;	
	Прокси = Новый WSПрокси(Определение, "http://tempuri.org/","Service1C","BasicHttpBinding_IService1C");
	Рез = Прокси.AddressSuggestStr(СтрокаПоиска, КоличествоСтрокВВыдаче);
	
	Для Каждого СтрокаАдреса Из Рез.AddressSuggestStr Цикл
		НоваяСтрока = тзАдреса.Добавить();
		НоваяСтрока.Долгота = СтрокаАдреса.Geo_lon;
		НоваяСтрока.Дом =  СтрокаАдреса.House;
		НоваяСтрока.Корпус = СтрокаАдреса.Block;
		НоваяСтрока.Наименование = СтрокаАдреса.Value;
		НоваяСтрока.НаселенныйПункт = СтрокаАдреса.Settlement;
		НоваяСтрока.Регион = СтрокаАдреса.Region;
		//НоваяСтрока.Ссылка =
		//НоваяСтрока.Страна =
		НоваяСтрока.Улица =  СтрокаАдреса.Street;
		НоваяСтрока.Широта = СтрокаАдреса.Geo_lat; 
	КонецЦикла;	

	
	Возврат тзАдреса
	
КонецФункции	
//-Степанов Задача № 3165

сзПризнакиУлиц = Новый СписокЗначений();
сзПризнакиУлиц.Добавить("ул");
сзПризнакиУлиц.Добавить("улица");
сзПризнакиУлиц.Добавить("пр");
сзПризнакиУлиц.Добавить("проспект");
сзПризнакиУлиц.Добавить("пр-кт");
сзПризнакиУлиц.Добавить("просп");
сзПризнакиУлиц.Добавить("пер");
сзПризнакиУлиц.Добавить("переулок");
сзПризнакиУлиц.Добавить("пл");
сзПризнакиУлиц.Добавить("площадь");
сзПризнакиУлиц.Добавить("ш");
сзПризнакиУлиц.Добавить("шоссе");

// Что бы использовать Яндекс.Геокодер необходимо получить ключ API и вписать его ниже
// Ключ можно получить по адресу: http://api.yandex.ru/maps/form.xml 
ЯндексAPI = Константы.новаЯндексAPI.Получить();

Кодировка1251 = Новый СписокЗначений();
Кодировка1251.Добавить(" ","20");
Кодировка1251.Добавить("А","C0");
Кодировка1251.Добавить("Б","C1");
Кодировка1251.Добавить("В","C2");
Кодировка1251.Добавить("Г","C3");
Кодировка1251.Добавить("Д","C4");
Кодировка1251.Добавить("Е","C5");
Кодировка1251.Добавить("Ё","A8");
Кодировка1251.Добавить("Ж","C6");
Кодировка1251.Добавить("З","C7");
Кодировка1251.Добавить("И","C8");
Кодировка1251.Добавить("Й","C9");
Кодировка1251.Добавить("К","CA");
Кодировка1251.Добавить("Л","CB");
Кодировка1251.Добавить("М","CC");
Кодировка1251.Добавить("Н","CD");
Кодировка1251.Добавить("О","CE");
Кодировка1251.Добавить("П","CF");
Кодировка1251.Добавить("Р","D0");
Кодировка1251.Добавить("С","D1");
Кодировка1251.Добавить("Т","D2");
Кодировка1251.Добавить("У","D3");
Кодировка1251.Добавить("Ф","D4");
Кодировка1251.Добавить("Х","D5");
Кодировка1251.Добавить("Ц","D6");
Кодировка1251.Добавить("Ч","D7");
Кодировка1251.Добавить("Ш","D8");
Кодировка1251.Добавить("Щ","D9");
Кодировка1251.Добавить("Ъ","DA");
Кодировка1251.Добавить("Ы","DB");
Кодировка1251.Добавить("Ь","DC");
Кодировка1251.Добавить("Э","DD");
Кодировка1251.Добавить("Ю","DE");
Кодировка1251.Добавить("Я","DF");
Кодировка1251.Добавить("а","E0");
Кодировка1251.Добавить("б","E1");
Кодировка1251.Добавить("в","E2");
Кодировка1251.Добавить("г","E3");
Кодировка1251.Добавить("д","E4");
Кодировка1251.Добавить("е","E5");
Кодировка1251.Добавить("ё","B8");
Кодировка1251.Добавить("ж","E6");
Кодировка1251.Добавить("з","E7");
Кодировка1251.Добавить("и","E8");
Кодировка1251.Добавить("й","E9");
Кодировка1251.Добавить("к","EA");
Кодировка1251.Добавить("л","EB");
Кодировка1251.Добавить("м","EC");
Кодировка1251.Добавить("н","ED");
Кодировка1251.Добавить("о","EE");
Кодировка1251.Добавить("п","EF");
Кодировка1251.Добавить("р","F0");
Кодировка1251.Добавить("с","F1");
Кодировка1251.Добавить("т","F2");
Кодировка1251.Добавить("у","F3");
Кодировка1251.Добавить("ф","F4");
Кодировка1251.Добавить("х","F5");
Кодировка1251.Добавить("ц","F6");
Кодировка1251.Добавить("ч","F7");
Кодировка1251.Добавить("ш","F8");
Кодировка1251.Добавить("щ","F9");
Кодировка1251.Добавить("ъ","FA");
Кодировка1251.Добавить("ы","FB");
Кодировка1251.Добавить("ь","FC");
Кодировка1251.Добавить("э","FD");
Кодировка1251.Добавить("ю","FE");
Кодировка1251.Добавить("я","FF");

//+Широков по письму Кривая привязка при "Выгрузке ШК"
ВсегдаНовыйАдрес = Истина; 
ПроверкаСокрЛПпустойУлицы = Истина; 
//ВсегдаНовыйАдрес = Ложь; 
//ПроверкаСокрЛПпустойУлицы = Ложь; 
//-Широков по письму Кривая привязка при "Выгрузке ШК"
