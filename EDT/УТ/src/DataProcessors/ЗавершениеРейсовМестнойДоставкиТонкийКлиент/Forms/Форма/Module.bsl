
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОтборОткрытыхРейсов = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОткрытыхРейсов.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьПроведенныйОтчетВодителя");
	ОтборОткрытыхРейсов.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОткрытыхРейсов.ПравоеЗначение = Ложь;
	ОтборОткрытыхРейсов.Использование = Истина;
	
	Период.Вариант = ВариантСтандартногоПериода.Сегодня;
	ОтборДатаНачала = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаНачала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаРейса");
	ОтборДатаНачала.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборДатаНачала.ПравоеЗначение = Период.ДатаНачала;
	ОтборДатаНачала.Использование = Истина; 
	
	ОтборДатаОкончания = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаОкончания.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаРейса");
	ОтборДатаОкончания.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборДатаОкончания.ПравоеЗначение = Период.ДатаОкончания;
	ОтборДатаОкончания.Использование = Истина;
	
	Терминал = ПараметрыСеанса.ТерминалДоставки;
	Если ЗначениеЗаполнено(Терминал) Тогда
		ОтборТерминал = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборТерминал.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТерминалДоставки");
		ОтборТерминал.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборТерминал.ПравоеЗначение = Терминал;
		ОтборТерминал.Использование = Истина;
		Элементы.НадписьТерминалы.Заголовок = Терминал.Наименование;
	Иначе
		Элементы.НадписьТерминалы.Заголовок = "Все терминалы";
	КонецЕсли;
	ПолучитьКоличествоНезакрытыхРейсов();
	
	//Асеев 07.07.2022 (Задача № 4843)>>>
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиУчетаОбщиеСрезПоследних.ОбъединениеФункционалаЛогистаИКассира, ЛОЖЬ) КАК ОбъединениеФункционалаЛогистаИКассира
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Поле1) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаОбщие.СрезПоследних КАК НастройкиУчетаОбщиеСрезПоследних
	|		ПО (ИСТИНА)";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Объект.РежимОбъединенияФункционалаЛогистаИКассира = Выборка.ОбъединениеФункционалаЛогистаИКассира;
	//Асеев 07.07.2022 (Задача № 4843)<<<

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ПодключитьОбработчикОжидания("ОбработкаОжидания",5);
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОжидания() Экспорт
	ПолучитьКоличествоНезакрытыхРейсов();
КонецПроцедуры	

&НаСервере
Процедура ПолучитьКоличествоНезакрытыхРейсов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	докРейс.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Рейс КАК докРейс
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя КАК новаОтчетВодителя
	               |		ПО докРейс.РейсМестнойДоставки = новаОтчетВодителя.Рейс
	               |ГДЕ
	               |	НЕ ЕСТЬNULL(новаОтчетВодителя.Проведен, ЛОЖЬ)
	               |	И докРейс.ДатаРейса МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И НЕ докРейс.ПометкаУдаления
	               |	И докРейс.ТерминалДоставки = &ТерминалДоставки";
	Если ЗначениеЗаполнено(Терминал) Тогда
		Запрос.УстановитьПараметр("ТерминалДоставки",Терминал);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И докРейс.ТерминалДоставки = &ТерминалДоставки","");
	КонецЕсли;	
	Запрос.УстановитьПараметр("ДатаНачала",Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",Период.ДатаОкончания);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		ТекстЗаголовка = "Нет незакрытых рейсов";
	Иначе	
		Выборка = Результат.Выбрать();
		ТекстЗаголовка = "Количество незакрытых рейсов: " + Строка(Выборка.Количество());
	КонецЕсли;	
	Элементы.ДекорацияКоличествоНезакрытыхРейсов.Заголовок = ТекстЗаголовка;
КонецПроцедуры	

&НаКлиенте
Процедура ПоказыватьЗакрытыеРейсыПриИзменении(Элемент)
	УстановитьВидимостьЗакрытыхЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	УстановитьПериодЗаказов();
	ПолучитьКоличествоНезакрытыхРейсов();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗакрытыхЗаказов()
	Список.Отбор.Элементы[0].Использование = Не ПоказыватьЗакрытыеРейсы;	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодЗаказов()
	Список.Отбор.Элементы[1].ПравоеЗначение = Период.ДатаНачала;
	Список.Отбор.Элементы[2].ПравоеЗначение = ?(ЗначениеЗаполнено(Период.ДатаОкончания),Период.ДатаОкончания,'30991231235959');
КонецПроцедуры

//Асеев 07.07.2022 (Задача № 4843)>>>
&НаКлиенте
Процедура ОткрытиеЭлементаСпискаВыбора(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыбранныйЭлемент = ВыбранныйЭлемент.Значение;
		Если ВыбранныйЭлемент = "Отчет водителя" Тогда
			ОписаниеОповещенияЗакрытияФормыОтчетаВодителя = Новый ОписаниеОповещения("ОбработкаОповещенияЗакрытияФормыОтчетаВодителя",ЭтотОбъект);
			ОткрытьФорму("Документ.новаОтчетВодителя.ФормаОбъекта",Новый Структура("Ключ",СписокПараметров.ОтчетВодителя),ЭтотОбъект,,,,ОписаниеОповещенияЗакрытияФормыОтчетаВодителя);
		ИначеЕсли ВыбранныйЭлемент = "Приход ДС" Тогда
			ОписаниеОповещенияЗакрытияФормыОтчетаВодителя = Новый ОписаниеОповещения("ОбработкаОповещенияЗакрытияФормыОтчетаВодителя",ЭтотОбъект);
			ОткрытьФорму("Документ.ПриходДСПоОтчетуВодителя.ФормаОбъекта",Новый Структура("Ключ",СписокПараметров.ПриходДС),ЭтотОбъект,,,,ОписаниеОповещенияЗакрытияФормыОтчетаВодителя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//Асеев 07.07.2022 (Задача № 4843)<<<

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//Асеев 07.07.2022 (Задача № 4843)>>>
	Если Объект.РежимОбъединенияФункционалаЛогистаИКассира И Элемент.ТекущиеДанные.Закрыт Тогда
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Отчет водителя");
		СписокВыбора.Добавить("Приход ДС");
		СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОткрытиеЭлементаСпискаВыбора", ЭтотОбъект, Новый Структура("ОтчетВодителя,ПриходДС", Элемент.ТекущиеДанные.ОтчетВодителя, Элемент.ТекущиеДанные.ПриходДС)), "Открыть...");
	Иначе
		//Асеев 07.07.2022 (Задача № 4843)<<<
		ОписаниеОповещенияЗакрытияФормыОтчетаВодителя = Новый ОписаниеОповещения("ОбработкаОповещенияЗакрытияФормыОтчетаВодителя",ЭтотОбъект);
		КлючФормы = ?(ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОтчетВодителя),Элемент.ТекущиеДанные.ОтчетВодителя,ЗаполнитьНовыйОтчетВодителя(Элемент.ТекущиеДанные.РейсМестнойДоставки));
		ОткрытьФорму("Документ.новаОтчетВодителя.ФормаОбъекта",Новый Структура("Ключ",КлючФормы),ЭтотОбъект,,,,ОписаниеОповещенияЗакрытияФормыОтчетаВодителя);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНовыйОтчетВодителя(Рейс) 
	НовыйОтчет = Документы.новаОтчетВодителя.СоздатьДокумент();
	Если Константы.ПриВводеОтчетовВодителейОбновлятьРейсыИзМаршрутизации.Получить() Тогда
		Если Не lem.ПоРейсуВведеноПредварительноеЗакрытие(Рейс) Тогда		
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	Рейс.Идентификатор КАК Идентификатор,
			|	Рейс.ДатаРейса КАК ДатаРейса,
			|	Рейс.vr_РаспределительныйЦентр КАК РЦентр,
			|	ЕСТЬNULL(ПараметрыРегиональныхТерминаловСрезПоследних.МетодикаЛогистическойМаршрутизации, ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute)) КАК МетодикаМаршрутизации
			|ИЗ
			|	Документ.Рейс КАК Рейс
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
			|		ПО Рейс.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних КАК ПараметрыРегиональныхТерминаловСрезПоследних
			|		ПО Рейс.ТерминалДоставки = ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал
			|ГДЕ
			|	Рейс.РейсМестнойДоставки = &Рейс
			|	И Рейс.Проведен = ИСТИНА
			|	И ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, ЛОЖЬ) = ЛОЖЬ";			
			Зап.УстановитьПараметр("Рейс",Рейс);
			Рез = зап.Выполнить().Выбрать();
			Если Рез.Следующий() Тогда
				Если Рез.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute Тогда				
					ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);									
				КонецЕсли; 	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	НовыйОтчет.Заполнить(Рейс);
	НовыйОтчет.УдаленноеЗакрытие = baoВызовСервера.ПолучитьУдаленноеЗакрытиеДляТранспортаПоРейсу(Рейс);
	НовыйОтчет.ДокументВнесенВРучную = Истина;
	НовыйОтчет.ПодтянутьДанныеМобильногоПриложения();
	НовыйОтчет.ОбновитьИтоговыеПоказателиНаСервере(НовыйОтчет);
	НовыйОтчет.Записать();
	Возврат НовыйОтчет.Ссылка;
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияЗакрытияФормыОтчетаВодителя(Результат, Параметры) Экспорт
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Элементы.Список.Обновить();
КонецПроцедуры


#Область ОбновлениеДанныхИзВероута

&НаСервере
Процедура ОбновлениеДанныхПоРейсуИзВероута(ИдТранспорта, ДатаРейса, РаспределительныйЦентр = Неопределено)
	
	Если ОбщегоНазначения.ЭтоТестоваяСреда() Тогда
		ВидСервера = 2;
	Иначе	
		ВидСервера = 1;       
	КонецЕсли;
	
	ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов = 1;
	
	ТерминалДоставкиПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТерминалДоставки");
	
	Если ЗначениеЗаполнено(ТерминалДоставкиПользователя) Тогда
		ТерминалДоставки = ТерминалДоставкиПользователя;
	Иначе	
		ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж;
	КонецЕсли;
	
	
	Если РаспределительныйЦентр = Неопределено Тогда
		ЗагрузитьРасписаниеНаСервере(ИдТранспорта,ВидСервера,ТерминалДоставки,ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,ДатаРейса);
	Иначе
		СхемаПланирования = ОпределитьСхемуПланирования(ТерминалДоставки);
		ЗагрузитьРасписаниеНаСервереРаспредЦентры(ИдТранспорта,РаспределительныйЦентр,,ВидСервера,ТерминалДоставки,ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,ДатаРейса);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьРасписаниеНаСервере(ИДТранспорта = Неопределено, ВидСервера, ТерминалДоставки,ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,Дата) Экспорт
	
	// Вставить содержимое обработчика.
	ИДСессии = ПолучитьСессию(ВидСервера,ТерминалДоставки); 
	//Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&aocID=781";
	
	ИдЦентра = ПолучитьИДРаспредЦентра(ТерминалДоставки,ВидСервера);
	
	Если ИДТранспорта = Неопределено Тогда
		Если ВидСервера = 1 Тогда
			Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Дата, "ДЛФ=D") + "&aocID=" + ?(ИдЦентра = 0, "825", ИдЦентра);
		Иначе
			Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Дата, "ДЛФ=D") + "&aocID=" + ?(ИдЦентра = 0, "781", ИдЦентра);                              //781
		КонецЕсли;	
	Иначе
		Ресурс = "distribution-api/schedules/getScheduleByVehicleOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Дата, "ДЛФ=D") + "&vehicleID=" + Формат(ИДТранспорта, "ЧН=0; ЧГ=");
	КонецЕсли;
	
	Попытка
		Результат = ВыполнитьPostЗапрос(Ресурс,,,ТерминалДоставки,ВидСервера);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Х = 1;
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Результат);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Т = Новый ТекстовыйДокумент;
	
	ИФ = ПолучитьИмяВременногоФайла();
	Т.УстановитьТекст(СтрокаXML);
	Т.Записать(ИФ);
	
	Ф = Новый ДвоичныеДанные(ИФ);
	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	
	Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
	Выгр.Родитель = Справочники.ПакетыДанныхВероут.ЗагрузкаДанных;
	Выгр.Данные = Хр;
	Выгр.ДатаВыгрузки = ТекущаяДата();
	Выгр.ТипСервера = ВидСервера;
	Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.ЗагрузкаРасписания;
	Выгр.ТерминалДоставки = ТерминалДоставки;
	Если ИДТранспорта = Неопределено Тогда
		Выгр.ОбщаяВыгрузка = Истина;
	Иначе
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	Рейс.Ссылка КАК Рейс,
		|	Рейс.ТерминалДоставки КАК ТерминалДоставки
		|ИЗ
		|	Документ.Рейс КАК Рейс
		|ГДЕ
		|	Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
		|	И Рейс.Идентификатор = &Идентификатор";
		Зап.УстановитьПараметр("ДатаНач", НачалоДня(Дата));			
		Зап.УстановитьПараметр("ДатаКон", КонецДня(Дата));			
		Зап.УстановитьПараметр("Идентификатор", ИДТранспорта);	
		Рез = Зап.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			Выгр.Рейс = Рез.Рейс;
			Если ТерминалДоставки.Пустая() Тогда
				ТерминалДоставки = Рез.ТерминалДоставки;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	Выгр.ТипВыгрузки = 1;
	Выгр.Записать();
	
	Попытка
		СписокРейсов_ = Результат.scheduleResponse.vehicles.vehicle;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если ТипЗнч(СписокРейсов_) = Тип("ОбъектXDTO") Тогда
		СписокРейсов = Новый Массив;
		СписокРейсов.Добавить(СписокРейсов_);
	Иначе
		СписокРейсов = СписокРейсов_;
	КонецЕсли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ЗагрузкаРейсовВероут.Ссылка КАК Док,
	|	ЗагрузкаРейсовВероут.Рейсы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Рейс КАК Рейс,
	|		Рейс.Идентификатор КАК Идентификатор
	|	) КАК Рейсы
	|ИЗ
	|	Документ.ФормированиеРейсов КАК ЗагрузкаРейсовВероут
	|ГДЕ
	|	ЗагрузкаРейсовВероут.ДатаРейсов МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗагрузкаРейсовВероут.ПометкаУдаления = ЛОЖЬ
	|	И ЗагрузкаРейсовВероут.РежимЗагрузкиДанных = 1
	|	И ЗагрузкаРейсовВероут.ТерминалДоставки = &ТерминалДоставки";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Дата));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Дата));			
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);			
	Рез = Зап.Выполнить().Выбрать();
	
	СписокРейсовБД = Неопределено;
	
	//Асеев 17.03.2021 (Задача № 4491)>>>
	//НачатьТранзакцию();
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	//Асеев 17.03.2021 (Задача № 4491)<<<
	
	Если Не Рез.Следующий() Тогда
		Загрузка = Документы.ФормированиеРейсов.СоздатьДокумент();
		Загрузка.Дата = ТекущаяДата();
		Загрузка.ДатаРейсов = Дата;
		Загрузка.РежимЗагрузкиДанных = 1;
		Загрузка.axi_Загрузка = Ложь;
		Загрузка.ТерминалДоставки = ТерминалДоставки;
	Иначе
		Загрузка = Рез.Док.ПолучитьОбъект();
		Загрузка.Рейсы.Очистить();
		СписокРейсовБД = Рез.Рейсы.Выгрузить();
	КонецЕсли;	
	
	КолРейсов = 0;
	КолОш = 0;
	Для Каждого Тек_ Из СписокРейсов Цикл
		Если СписокРейсовБД = Неопределено Тогда
			Рейс = Документы.Рейс.СоздатьДокумент();
			Рейс.РежимЗагрузкиДанных = 1;
			Рейс.ДатаРейса = Дата;
		Иначе
			НайденныйРейс = СписокРейсовБД.Найти(Число(Тек_.id));
			Если НайденныйРейс = Неопределено Тогда
				Рейс = Документы.Рейс.СоздатьДокумент();
				Рейс.РежимЗагрузкиДанных = 1;
				Рейс.ДатаРейса = Дата;
			Иначе
				Рейс = НайденныйРейс.Рейс.ПолучитьОбъект();
				Рейс.Точки.Очистить();
				//Рейс.Заказы.Очистить();
				Струк = Новый Структура;
				Струк.Вставить("ЗаказДобавленВРучную", Ложь);
				Най = Рейс.Заказы.НайтиСтроки(Струк);
				
				Для Каждого ТекЗ Из Най Цикл
					Рейс.Заказы.Удалить(ТекЗ);
				КонецЦикла;	
				Рейс.Поездки.Очистить();
			КонецЕсли;	
		КонецЕсли;
		
		Рейс.Дата = Дата;
		Рейс.axi_Загрузка = Ложь;
		
		Если ЗначениеЗаполнено(ТерминалДоставки) Тогда
			Рейс.ТерминалДоставки = ТерминалДоставки;
		КонецЕсли;
		
		
		Рейс.Идентификатор = Число(Тек_.id);
		
		ТранспортВероут = Справочники.ТипыТранспортовВероут.НайтиПоНаименованию(Тек_.name);
		Если ТранспортВероут.Пустая() Тогда
			ТранспортВероут = Справочники.ТипыТранспортовВероут.СоздатьЭлемент();
			//+++ БАО 27.09.2017 №1880
			ИДЦентраДляПоиска = Формат(ИдЦентра, "ЧГ=0");
			
			ТранспортВероут.Владелец = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоРеквизиту("КодVeeroute", ИДЦентраДляПоиска);
			Если Не ЗначениеЗаполнено(ТранспортВероут.Владелец) Тогда
				ТранспортВероут.Владелец = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоНаименованию("Склад");
			КонецЕсли;	
			//--- БАО 27.09.2017 №1880
			ТранспортВероут.Наименование = Тек_.name;
			ТранспортВероут.Записать();
		КонецЕсли;	
		
		Рейс.Транспорт = ТранспортВероут.Ссылка;
		
		Тек = Тек_.run;
		Если ТипЗнч(Тек) = Тип("СписокXDTO") Тогда
			Тек = Тек[0];
		КонецЕсли;	
		Поездка = Рейс.Поездки.Добавить();
		Попытка
			Поездка.НомерПоездки = Тек.runNumber;
		Исключение
			КолОш = КолОш + 1;
			Сообщить("Ошибка загрузки! Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + ", идентификатор: " + СокрЛП(Рейс.Идентификатор) + ". Ошибка - " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецПопытки;
		КолРейсов = КолРейсов + 1;
		
		Поездка.ДатаПоездки = Тек.runDay;
		Поездка.ПланируемаяДистанция = Тек.planDistance;
		Поездка.ПланируемаяПродолжительностьПоездки = Тек.planDuration;
		Поездка.ПланируемоеВремяНачалаПоездки = ПолучитьДатуВероут(Тек.runStartTime);
		Поездка.ПланируемоеВремяОкончанияПоездки = ПолучитьДатуВероут(Тек.runEndTime);
		Попытка
			Поездка.ВремяНачалаДоступностиВодителя = ПолучитьДатуВероут(Тек.availabilityStartTime);
			Поездка.ВремяОкончанияДоступностиВодителя = ПолучитьДатуВероут(Тек.availabilityEndTime);
		исключение
			
		КонецПопытки;
		попытка
			Поездка.ОбщийВес = Тек.planWeight;
			Поездка.ОбщийОбъем = Тек.planVolume;
			Поездка.СтоимостьПоездки = Тек.cost;
		исключение
		конецпопытки        ;
		;
		Для Каждого ТекЛокация Из Тек.location Цикл
			Точка = Рейс.Точки.Добавить();
			Если ТекЛокация.locationType = "PICKUP" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.PICKUP;
			ИначеЕсли ТекЛокация.locationType = "DROP" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.DROP;
				Точка.НомерПоездки = ТекЛокация.Number;
			ИначеЕсли ТекЛокация.locationType = "BACK_TO_HOME" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.BACK_TO_HOME;
			КонецЕсли;
			
			Точка.Широта = ТекЛокация.latitude;
			Точка.Долгота = ТекЛокация.longitude;
			Точка.ПлановоеРасстояние = ТекЛокация.mileage;
			Точка.НаименованиеТочки = ТекЛокация.name;
			Точка.ПланируемоеВремяПрибытия = ПолучитьДатуВероут(ТекЛокация.planArrivalTime);
			Попытка
				Точка.ПланируемаяВремяОтправления = ПолучитьДатуВероут(ТекЛокация.planDepartureTime);
			Исключение
				
			КонецПопытки;	
			Точка.ВремяДвиженияПоПлану = ТекЛокация.planDrivingTime;
			Точка.ЗапланированнаяДлительностьОстановки = ТекЛокация.planStopDuration;
			
			Если Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.DROP Тогда
				Если ТипЗнч(ТекЛокация.order) = Тип("СписокXDTO") Тогда
					Для Каждого ТекЗаказ Из ТекЛокация.order Цикл
						НайденныеДанные = НайтиЗаказ(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						
						ДатаЗаказа = "";
						СтатусИМ = 0;
						Если НайденныеДанные = Неопределено Тогда
							//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
							НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
							Если НайденныеДанные = Неопределено Тогда
								Продолжить;
							Иначе
								ЗаказКДобавлению = НайденныеДанные.Заказ;
								ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
								СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
							КонецЕсли;	
						Иначе
							ЗаказКДобавлению = НайденныеДанные.Заказ;
							ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
							СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
						КонецЕсли;	
						
						//ЗаказКДобавлению = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						//Если ЗаказКДобавлению.Пустая() Тогда
						//	//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
						//	НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						//КонецЕсли;	
						
						Если Не ПроанализироватьДатуЗаказаНовая(ЗаказКДобавлению, Рейс.Ссылка, ДатаЗаказа, ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,Дата) Тогда
							Продолжить;
						КонецЕсли;	
						
						//Если Не ПроанализироватьДатуЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
						//	Продолжить;	
						//КонецЕсли;
						//Если Не ПроанализироватьСостояниеЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
						//	Продолжить;	
						//КонецЕсли;
						Если Не ПроанализироватьСостояниеЗаказаНовое(ЗаказКДобавлению, Рейс.Ссылка, СтатусИМ) Тогда
							Продолжить;	
						КонецЕсли;
						
						
						НайЗаказ = Рейс.Заказы.Найти(ЗаказКДобавлению);
						
						Если НайЗаказ <> Неопределено Тогда
							НовЗаказ = НайЗаказ;
							НовЗаказ.ЗагруженИзВероут = Истина;
						Иначе
							НовЗаказ = Рейс.Заказы.Добавить();;
						КонецЕсли;   
						
						НовЗаказ.Заказ = ЗаказКДобавлению;
						
						НовЗаказ.СтатусЗаказа = Справочники.СтатусыЗаказовВероут.НайтиПоНаименованию(ТекЗаказ.status);
						Если ТекЗаказ.task = "DROP" Тогда 
							НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.DROP;
						ИначеЕсли ТекЗаказ.task = "COLLECTION" Тогда 	
							НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.COLLECTION;
						КонецЕсли;
						попытка
							НовЗаказ.Объем = ТекЗаказ.volume;
							НовЗаказ.Вес = ТекЗаказ.weight;
						исключение
						конецпопытки;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ТекЛокация.order) = Тип("ОбъектXDTO") Тогда
					ТекЗаказ = ТекЛокация.order;
					
					//ЗаказКДобавлению = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
					//Если ЗаказКДобавлению.Пустая() Тогда
					//	ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
					//КонецЕсли;	
					
					НайденныеДанные = НайтиЗаказ(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
					
					ДатаЗаказа = "";
					СтатусИМ = 0;
					Если НайденныеДанные = Неопределено Тогда
						//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
						НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						Если НайденныеДанные = Неопределено Тогда
							Продолжить;
						Иначе
							ЗаказКДобавлению = НайденныеДанные.Заказ;
							ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
							СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
						КонецЕсли;	
					Иначе
						ЗаказКДобавлению = НайденныеДанные.Заказ;
						ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
						СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
					КонецЕсли;	
					
					
					
					
					Если Не ПроанализироватьДатуЗаказаНовая(ЗаказКДобавлению, Рейс.Ссылка, ДатаЗаказа, ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,Дата) Тогда
						Продолжить;	
					КонецЕсли;
					//Если Не ПроанализироватьСостояниеЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
					//	Продолжить;	
					//КонецЕсли;
					
					Если Не ПроанализироватьСостояниеЗаказаНовое(ЗаказКДобавлению, Рейс.Ссылка, СтатусИМ) Тогда
						Продолжить;	
					КонецЕсли;
					
					
					НайЗаказ = Рейс.Заказы.Найти(ЗаказКДобавлению);
					
					Если НайЗаказ <> Неопределено Тогда
						НовЗаказ = НайЗаказ;
						НовЗаказ.ЗагруженИзВероут = Истина;
					Иначе
						НовЗаказ = Рейс.Заказы.Добавить();
					КонецЕсли;
					НовЗаказ.Заказ = ЗаказКДобавлению;
					
					НовЗаказ.СтатусЗаказа = Справочники.СтатусыЗаказовВероут.НайтиПоНаименованию(ТекЗаказ.status);
					Если ТекЗаказ.task = "DROP" Тогда 
						НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.DROP;
					ИначеЕсли ТекЗаказ.task = "COLLECTION" Тогда 	
						НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.COLLECTION;
					КонецЕсли;
					попытка
						НовЗаказ.Объем = ТекЗаказ.volume;
						НовЗаказ.Вес = ТекЗаказ.weight;
					исключение
					конецпопытки;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Если Рейс.РейсМестнойДоставки.Пустая() Тогда
			нРейс = БизнесПроцессы.новаРейсМестнойДоставки.СоздатьБизнесПроцесс();
			нРейс.Дата = Дата;
			нРейс.ДатаНачала = НачалоДня(Дата) + 32400;
			нРейс.ДатаКонца = НачалоДня(Дата) + 82800;
			нРейс.РейсЗагруженИзВероут = Истина;
			нРейс.Записать();
			нРейс.Старт();
			
			Рейс.РейсМестнойДоставки = нРейс.Ссылка;
			
			//
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	новаЗадачаРейсаМестнойДоставки.Ссылка Как План
			|ИЗ
			|	Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
			|ГДЕ
			|	новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка = &Рейс
			|	И новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = ЗНАЧЕНИЕ(справочник.новаэтапыместнойдоставки.планированиеместнойдоставки)
			|	И новаЗадачаРейсаМестнойДоставки.Выполнена = ЛОЖЬ";
			Зап.УстановитьПараметр("Рейс", нРейс.Ссылка);			
			РезЗадач = Зап.Выполнить().Выбрать();
			Если РезЗадач.Следующий() Тогда
				Задача = РезЗадач.План.ПолучитьОбъект();
				Задача.ВыполнитьЗадачу();
			КонецЕсли;	
		КонецЕсли;
		
		//+++ БАО 08.06.2017 №1024 
		//Если Не Рейс.РейсЗакрыт Тогда
		Если Не baoВызовСервера.РейсЗакрыт(Рейс.Ссылка) Тогда
			//--- БАО 08.06.2017 №1024 	
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			Если Не Рейс.ПометкаУдаления Тогда
				Рейс.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Сообщить("Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + " не может быть проведен!", СтатусСообщения.ОченьВажное);
			КонецЕсли;	
			Сообщить("Загружен рейс " + СокрЛП(Рейс.Транспорт.Наименование) + ", идентификатор: " + СокрЛП(Рейс.Идентификатор), СтатусСообщения.Обычное);
		Иначе
			Сообщить("Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + " уже закрыт! Данные загружены не будут!", СтатусСообщения.ОченьВажное);
		КонецЕсли;	
		
		Если ИДТранспорта = Неопределено Тогда
			НовР = Загрузка.Рейсы.Добавить();
			НовР.Рейс = Рейс.Ссылка;
			// раскомментировать после обновления
			НовР.ВремяПрибытия = Поездка.ПланируемоеВремяОкончанияПоездки;
		КонецЕсли;
		// раскомментировать после обновления
		
	КонецЦикла;	
	
	Сообщить("_________________________________________________________________");
	Сообщить("Итог загрузки: " + Строка(КолРейсов) + " загружено!");
	Если КолОш = 0 Тогда
		Сообщить("Ошибок загрузки нет!");
	Иначе
		Сообщить("НЕ ЗАГРУЖЕНО рейсов: " + Строка(КолОш), СтатусСообщения.ОченьВажное);
	КонецЕсли;	
	Если ИДТранспорта = Неопределено Тогда	
		//+++ БАО 05.10.2017 №1180
		//---Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса;
		Если ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
			Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса;
		Иначе 		
			Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс;
		КонецЕсли;	
		//--- БАО 05.10.2017 №1180
		Загрузка.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;	
	ЗафиксироватьТранзакцию();
	Возврат Загрузка.Ссылка;
КонецФункции

&НаСервере
Функция ЗагрузитьРасписаниеНаСервереРаспредЦентры(ИДТранспорта = Неопределено, РаспределительныйЦентр = Неопределено, СхемаПланирования = Неопределено,ВидСервера,ТерминалДоставки,ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,Дата) Экспорт
	
	// Вставить содержимое обработчика.
	ИДСессии = ПолучитьСессию(ВидСервера,ТерминалДоставки); 
	//Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&aocID=781";
	Если РаспределительныйЦентр = Неопределено Тогда
		ИдЦентра = ПолучитьИДРаспредЦентра(ТерминалДоставки,ВидСервера);
	Иначе
		Если ВидСервера = 1 Тогда
			ИдЦентра = Формат(РаспределительныйЦентр.КодVeeroute, "ЧН=0; ЧГ=");
		Иначе
			ИдЦентра = Формат(РаспределительныйЦентр.КодVeerouteТест, "ЧН=0; ЧГ=");
		КонецеСли;
	КонецеСли;	
	
	Если ИДТранспорта = Неопределено Тогда
		Если ВидСервера = 1 Тогда
			Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Дата, "ДЛФ=D") + "&aocID=" + ?(ИдЦентра = 0, "825", ИдЦентра);
		Иначе
			Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Дата, "ДЛФ=D") + "&aocID=" + ?(ИдЦентра = 0, "781", ИдЦентра);                              //781
		КонецеСли;	
	Иначе
		Ресурс = "distribution-api/schedules/getScheduleByVehicleOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Дата, "ДЛФ=D") + "&vehicleID=" + Формат(ИДТранспорта, "ЧН=0; ЧГ=");
	КонецеСли;
	
	Попытка
		Результат = ВыполнитьPostЗапрос(Ресурс,,,ТерминалДоставки,ВидСервера);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Х = 1;
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Результат);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Т = Новый ТекстовыйДокумент;
	
	ИФ = ПолучитьИмяВременногоФайла();
	Т.УстановитьТекст(СтрокаXML);
	Т.Записать(ИФ);
	
	Ф = Новый ДвоичныеДанные(ИФ);
	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	
	Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
	Выгр.Родитель = Справочники.ПакетыДанныхВероут.ЗагрузкаДанных;
	Выгр.Данные = Хр;
	Выгр.ДатаВыгрузки = ТекущаяДата();
	Выгр.ТипСервера = ВидСервера;
	Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.ЗагрузкаРасписания;
	Выгр.ТерминалДоставки = ТерминалДоставки;
	Выгр.РаспределительныйЦентр = РаспределительныйЦентр;
	Выгр.СхемаПланирования = СхемаПланирования;
	Выгр.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если ИДТранспорта = Неопределено Тогда
		Выгр.ОбщаяВыгрузка = Истина;
	Иначе
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	Рейс.Ссылка КАК Рейс,
		|	Рейс.ТерминалДоставки КАК ТерминалДоставки
		|ИЗ
		|	Документ.Рейс КАК Рейс
		|ГДЕ
		|	Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
		|	И Рейс.Идентификатор = &Идентификатор";
		Зап.УстановитьПараметр("ДатаНач", НачалоДня(Дата));			
		Зап.УстановитьПараметр("ДатаКон", КонецДня(Дата));			
		Зап.УстановитьПараметр("Идентификатор", ИДТранспорта);	
		Рез = Зап.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			Выгр.Рейс = Рез.Рейс;
			Если ТерминалДоставки.Пустая() Тогда
				ТерминалДоставки = Рез.ТерминалДоставки;
			КонецеСли;	
		КонецеСли;	
	КонецеСли;	
	Выгр.ТипВыгрузки = 1;
	Выгр.Записать();
	
	Попытка
		СписокРейсов_ = Результат.scheduleResponse.vehicles.vehicle;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если ТипЗнч(СписокРейсов_) = Тип("ОбъектXDTO") Тогда
		СписокРейсов = Новый Массив;
		СписокРейсов.Добавить(СписокРейсов_);
	Иначе
		СписокРейсов = СписокРейсов_;
	КонецеСли;	
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ЗагрузкаРейсовВероут.Ссылка КАК Док,
	|	ЗагрузкаРейсовВероут.Рейсы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Рейс КАК Рейс,
	|		Рейс.Идентификатор КАК Идентификатор
	|	) КАК Рейсы
	|ИЗ
	|	Документ.ФормированиеРейсов КАК ЗагрузкаРейсовВероут
	|ГДЕ
	|	ЗагрузкаРейсовВероут.ДатаРейсов МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗагрузкаРейсовВероут.ПометкаУдаления = ЛОЖЬ
	|	И ЗагрузкаРейсовВероут.РежимЗагрузкиДанных = 1
	|	И ЗагрузкаРейсовВероут.ТерминалДоставки = &ТерминалДоставки";
	Если РаспределительныйЦентр <> Неопределено Тогда
		Зап.Текст = Зап.Текст + "	И ЗагрузкаРейсовВероут.РаспределительныйЦентр = &РаспределительныйЦентр";
		Зап.УстановитьПараметр("РаспределительныйЦентр", РаспределительныйЦентр);
	КонецеСли;	
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Дата));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Дата));			
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);			
	Рез = Зап.Выполнить().Выбрать();
	
	СписокРейсовБД = Неопределено;
	
	//Асеев 17.03.2021 (Задача № 4491)>>>
	//НачатьТранзакцию();
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	//Асеев 17.03.2021 (Задача № 4491)<<<
	
	Если Не Рез.Следующий() Тогда
		Загрузка = Документы.ФормированиеРейсов.СоздатьДокумент();
		Загрузка.Дата = ТекущаяДата();
		Загрузка.ДатаРейсов = Дата;
		Загрузка.РежимЗагрузкиДанных = 1;
		Загрузка.axi_Загрузка = Ложь;
		Загрузка.ТерминалДоставки = ТерминалДоставки;
		Загрузка.РаспределительныйЦентр = РаспределительныйЦентр;
		Загрузка.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute;
		
		// Якурнов 22.08.2018 9:57:04
		Загрузка.СхемаНазначенияНомеровПалетПоПолигонам = МаршрутизацияЗаказовСервер.ПолучитьСхемуНазначенияНомеровПалетПоПолигонам(ТерминалДоставки);
		
	Иначе
		Загрузка = Рез.Док.ПолучитьОбъект();
		Загрузка.Рейсы.Очистить();
		СписокРейсовБД = Рез.Рейсы.Выгрузить();
	КонецеСли;	
	
	КолРейсов = 0;
	КолОш = 0;
	Для Каждого Тек_ Из СписокРейсов Цикл
		Если СписокРейсовБД = Неопределено Тогда
			Рейс = Документы.Рейс.СоздатьДокумент();
			Рейс.РежимЗагрузкиДанных = 1;
			Рейс.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute;
			Рейс.ДатаРейса = Дата;
			Рейс.vr_РаспределительныйЦентр = РаспределительныйЦентр;
		Иначе
			НайденныйРейс = СписокРейсовБД.Найти(Число(Тек_.id));
			Если НайденныйРейс = Неопределено Тогда
				Рейс = Документы.Рейс.СоздатьДокумент();
				Рейс.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute;
				Рейс.РежимЗагрузкиДанных = 1;
				Рейс.ДатаРейса = Дата;
				Рейс.vr_РаспределительныйЦентр = РаспределительныйЦентр;
			Иначе
				Рейс = НайденныйРейс.Рейс.ПолучитьОбъект();
				Рейс.Точки.Очистить();
				//Рейс.Заказы.Очистить();
				Струк = Новый Структура;
				Струк.Вставить("ЗаказДобавленВРучную", Ложь);
				Най = Рейс.Заказы.НайтиСтроки(Струк);
				
				Для Каждого ТекЗ Из Най Цикл
					Рейс.Заказы.Удалить(ТекЗ);
				КонецЦикла;	
				Рейс.Поездки.Очистить();
			КонецеСли;	
		КонецеСли;
		
		Рейс.Дата = Дата;
		Рейс.axi_Загрузка = Ложь;
		
		Если ЗначениеЗаполнено(ЭтаФорма.ТерминалДоставки) Тогда
			Рейс.ТерминалДоставки = ЭтаФорма.ТерминалДоставки;
		КонецЕсли;
		
		
		Рейс.Идентификатор = Число(Тек_.id);
		
		ТранспортВероут = Справочники.ТипыТранспортовВероут.НайтиПоНаименованию(Тек_.name);
		Если ТранспортВероут.Пустая() Тогда
			ТранспортВероут = Справочники.ТипыТранспортовВероут.СоздатьЭлемент();
			//+++ БАО 27.09.2017 №1880
			//ИДЦентраДляПоиска = Формат(ИдЦентра, "ЧГ=0");
			
			Если Не ЗначениеЗаполнено(РаспределительныйЦентр) Тогда
				ТранспортВероут.Владелец = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоНаименованию("Склад");
			Иначе
				ТранспортВероут.Владелец = РаспределительныйЦентр;
			КонецеСли;
			
			//Если Не ЗначениеЗаполнено(ТранспортВероут.Владелец) Тогда
			//	ТранспортВероут.Владелец = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоНаименованию("Склад");
			//КонецЕсли;	
			//--- БАО 27.09.2017 №1880
			ТранспортВероут.Наименование = Тек_.name;
			ТранспортВероут.Записать();
		КонецЕсли;	
		
		Рейс.Транспорт = ТранспортВероут.Ссылка;
		
		Тек = Тек_.run;
		Если ТипЗнч(Тек) = Тип("СписокXDTO") Тогда
			Тек = Тек[0];
		КонецеСли;	
		Поездка = Рейс.Поездки.Добавить();
		Попытка
			Поездка.НомерПоездки = Тек.runNumber;
		Исключение
			КолОш = КолОш + 1;
			Сообщить("Ошибка загрузки! Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + ", идентификатор: " + СокрЛП(Рейс.Идентификатор) + ". Ошибка - " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецПопытки;
		КолРейсов = КолРейсов + 1;
		
		Поездка.ДатаПоездки = Тек.runDay;
		Поездка.ПланируемаяДистанция = Тек.planDistance;
		Поездка.ПланируемаяПродолжительностьПоездки = Тек.planDuration;
		Поездка.ПланируемоеВремяНачалаПоездки = ПолучитьДатуВероут(Тек.runStartTime);
		Поездка.ПланируемоеВремяОкончанияПоездки = ПолучитьДатуВероут(Тек.runEndTime);
		Попытка
			Поездка.ВремяНачалаДоступностиВодителя = ПолучитьДатуВероут(Тек.availabilityStartTime);
			Поездка.ВремяОкончанияДоступностиВодителя = ПолучитьДатуВероут(Тек.availabilityEndTime);
		исключение
			
		КонецПопытки;
		попытка
			Поездка.ОбщийВес = Тек.planWeight;
			Поездка.ОбщийОбъем = Тек.planVolume;
			Поездка.СтоимостьПоездки = Тек.cost;
		исключение
		конецпопытки        ;
		;
		Для Каждого ТекЛокация Из Тек.location Цикл
			Точка = Рейс.Точки.Добавить();
			Если ТекЛокация.locationType = "PICKUP" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.PICKUP;
			ИначеЕсли ТекЛокация.locationType = "DROP" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.DROP;
				Точка.НомерПоездки = ТекЛокация.Number;
			ИначеЕсли ТекЛокация.locationType = "BACK_TO_HOME" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.BACK_TO_HOME;
			КонецеСли;
			
			Точка.Широта = ТекЛокация.latitude;
			Точка.Долгота = ТекЛокация.longitude;
			Точка.ПлановоеРасстояние = ТекЛокация.mileage;
			Точка.НаименованиеТочки = ТекЛокация.name;
			Точка.ПланируемоеВремяПрибытия = ПолучитьДатуВероут(ТекЛокация.planArrivalTime);
			Попытка
				Точка.ПланируемаяВремяОтправления = ПолучитьДатуВероут(ТекЛокация.planDepartureTime);
			Исключение
				
			КонецПопытки;	
			Точка.ВремяДвиженияПоПлану = ТекЛокация.planDrivingTime;
			Точка.ЗапланированнаяДлительностьОстановки = ТекЛокация.planStopDuration;
			
			Если Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.DROP Тогда
				Если ТипЗнч(ТекЛокация.order) = Тип("СписокXDTO") Тогда
					Для Каждого ТекЗаказ Из ТекЛокация.order Цикл
						НайденныеДанные = НайтиЗаказ(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						
						ДатаЗаказа = "";
						СтатусИМ = 0;
						Если НайденныеДанные = Неопределено Тогда
							//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
							НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
							Если НайденныеДанные = Неопределено Тогда
								Продолжить;
							Иначе
								ЗаказКДобавлению = НайденныеДанные.Заказ;
								ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
								СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
							КонецеСли;	
						Иначе
							ЗаказКДобавлению = НайденныеДанные.Заказ;
							ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
							СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
						КонецеСли;	
						
						//ЗаказКДобавлению = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						//Если ЗаказКДобавлению.Пустая() Тогда
						//	//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
						//	НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						//КонецеСли;	
						
						Если Не ПроанализироватьДатуЗаказаНовая(ЗаказКДобавлению, Рейс.Ссылка, ДатаЗаказа,ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,Дата) Тогда
							Продолжить;
						КонецеСли;	
						
						//Если Не ПроанализироватьДатуЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
						//	Продолжить;	
						//КонецеСли;
						//Если Не ПроанализироватьСостояниеЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
						//	Продолжить;	
						//КонецеСли;
						Если Не ПроанализироватьСостояниеЗаказаНовое(ЗаказКДобавлению, Рейс.Ссылка, СтатусИМ) Тогда
							Продолжить;	
						КонецеСли;
						
						
						НайЗаказ = Рейс.Заказы.Найти(ЗаказКДобавлению);
						
						Если НайЗаказ <> Неопределено Тогда
							НовЗаказ = НайЗаказ;
							НовЗаказ.ЗагруженИзВероут = Истина;
						Иначе
							НовЗаказ = Рейс.Заказы.Добавить();;
						КонецеСли;   
						
						НовЗаказ.Заказ = ЗаказКДобавлению;
						
						НовЗаказ.СтатусЗаказа = Справочники.СтатусыЗаказовВероут.НайтиПоНаименованию(ТекЗаказ.status);
						Если ТекЗаказ.task = "DROP" Тогда 
							НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.DROP;
						ИначеЕсли ТекЗаказ.task = "COLLECTION" Тогда 	
							НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.COLLECTION;
						КонецеСли;
						попытка
							НовЗаказ.Объем = ТекЗаказ.volume;
							НовЗаказ.Вес = ТекЗаказ.weight;
						исключение
						конецпопытки;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ТекЛокация.order) = Тип("ОбъектXDTO") Тогда
					ТекЗаказ = ТекЛокация.order;
					
					//ЗаказКДобавлению = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
					//Если ЗаказКДобавлению.Пустая() Тогда
					//	ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
					//КонецеСли;	
					
					НайденныеДанные = НайтиЗаказ(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
					
					ДатаЗаказа = "";
					СтатусИМ = 0;
					Если НайденныеДанные = Неопределено Тогда
						//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
						НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						Если НайденныеДанные = Неопределено Тогда
							Продолжить;
						Иначе
							ЗаказКДобавлению = НайденныеДанные.Заказ;
							ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
							СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
						КонецеСли;	
					Иначе
						ЗаказКДобавлению = НайденныеДанные.Заказ;
						ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
						СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
					КонецеСли;	
					
					
					
					
					Если Не ПроанализироватьДатуЗаказаНовая(ЗаказКДобавлению, Рейс.Ссылка, ДатаЗаказа,ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,Дата) Тогда
						Продолжить;	
					КонецеСли;
					//Если Не ПроанализироватьСостояниеЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
					//	Продолжить;	
					//КонецеСли;
					
					Если Не ПроанализироватьСостояниеЗаказаНовое(ЗаказКДобавлению, Рейс.Ссылка, СтатусИМ) Тогда
						Продолжить;	
					КонецеСли;
					
					
					НайЗаказ = Рейс.Заказы.Найти(ЗаказКДобавлению);
					
					Если НайЗаказ <> Неопределено Тогда
						НовЗаказ = НайЗаказ;
						НовЗаказ.ЗагруженИзВероут = Истина;
					Иначе
						НовЗаказ = Рейс.Заказы.Добавить();
					КонецеСли;
					НовЗаказ.Заказ = ЗаказКДобавлению;
					
					НовЗаказ.СтатусЗаказа = Справочники.СтатусыЗаказовВероут.НайтиПоНаименованию(ТекЗаказ.status);
					Если ТекЗаказ.task = "DROP" Тогда 
						НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.DROP;
					ИначеЕсли ТекЗаказ.task = "COLLECTION" Тогда 	
						НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.COLLECTION;
					КонецеСли;
					попытка
						НовЗаказ.Объем = ТекЗаказ.volume;
						НовЗаказ.Вес = ТекЗаказ.weight;
					исключение
					конецпопытки;
				КонецеСли;	
			КонецеСли;	
		КонецЦикла;	
		
		Если Рейс.РейсМестнойДоставки.Пустая() Тогда
			нРейс = БизнесПроцессы.новаРейсМестнойДоставки.СоздатьБизнесПроцесс();
			нРейс.Дата = Дата;
			нРейс.ДатаНачала = НачалоДня(Дата) + 32400;
			нРейс.ДатаКонца = НачалоДня(Дата) + 82800;
			нРейс.РейсЗагруженИзВероут = Истина;
			нРейс.Записать();
			нРейс.Старт();
			
			Рейс.РейсМестнойДоставки = нРейс.Ссылка;
			
			//
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	новаЗадачаРейсаМестнойДоставки.Ссылка Как План
			|ИЗ
			|	Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
			|ГДЕ
			|	новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка = &Рейс
			|	И новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = ЗНАЧЕНИЕ(справочник.новаэтапыместнойдоставки.планированиеместнойдоставки)
			|	И новаЗадачаРейсаМестнойДоставки.Выполнена = ЛОЖЬ";
			Зап.УстановитьПараметр("Рейс", нРейс.Ссылка);			
			РезЗадач = Зап.Выполнить().Выбрать();
			Если РезЗадач.Следующий() Тогда
				Задача = РезЗадач.План.ПолучитьОбъект();
				Задача.ВыполнитьЗадачу();
			КонецеСли;	
		КонецЕсли;
		
		//+++ БАО 08.06.2017 №1024 
		//Если Не Рейс.РейсЗакрыт Тогда
		Если Не baoВызовСервера.РейсЗакрыт(Рейс.Ссылка) Тогда
			//--- БАО 08.06.2017 №1024 	
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			Если Не Рейс.ПометкаУдаления Тогда
				Рейс.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Сообщить("Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + " не может быть проведен!", СтатусСообщения.ОченьВажное);
			КонецЕсли;	
			Сообщить("Загружен рейс " + СокрЛП(Рейс.Транспорт.Наименование) + ", идентификатор: " + СокрЛП(Рейс.Идентификатор), СтатусСообщения.Обычное);
		Иначе
			Сообщить("Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + " уже закрыт! Данные загружены не будут!", СтатусСообщения.ОченьВажное);
		КонецеСли;	
		
		Если ИДТранспорта = Неопределено Тогда
			НовР = Загрузка.Рейсы.Добавить();
			НовР.Рейс = Рейс.Ссылка;
			// раскомментировать после обновления
			НовР.ВремяПрибытия = Поездка.ПланируемоеВремяОкончанияПоездки;
		КонецеСли;
		// раскомментировать после обновления
		
	КонецЦикла;	
	
	Сообщить("_________________________________________________________________");
	Сообщить("Итог загрузки: " + Строка(КолРейсов) + " загружено!");
	Если КолОш = 0 Тогда
		Сообщить("Ошибок загрузки нет!");
	Иначе
		Сообщить("НЕ ЗАГРУЖЕНО рейсов: " + Строка(КолОш), СтатусСообщения.ОченьВажное);
	КонецеСли;	
	Если ИДТранспорта = Неопределено Тогда	
		//+++ БАО 05.10.2017 №1180
		//---Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса;
		Если ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
			Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса;
		Иначе 		
			Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс;
		КонецЕсли;	
		//--- БАО 05.10.2017 №1180
		Загрузка.Записать(РежимЗаписиДокумента.Запись);
	КонецеСли;	
	ЗафиксироватьТранзакцию();
	Возврат Загрузка.Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьСхемуПланирования(ТерминалДоставки)
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	АктуальныеСхемыПланированияVeerouteСрезПоследних.СхемаПланированияVeerote КАК СхемаПланированияVeerote
	|ИЗ
	|	РегистрСведений.АктуальныеСхемыПланированияVeeroute.СрезПоследних(, ТерминалДоставки = &Терминал) КАК АктуальныеСхемыПланированияVeerouteСрезПоследних";
	Зап.УстановитьПараметр("Терминал", ТерминалДоставки);
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.СхемаПланированияVeerote;
	Иначе
		Если ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			Возврат Справочники.СхемыПланированияVeeroute.ДвухзоннаяСхема;
		ИначеЕсли ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда	
			Возврат Справочники.СхемыПланированияVeeroute.ОднозоннаяСхемаСПб;
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьДатуВероут(ДатаВероут)
	Попытка
		РезДата = Дата(Сред(ДатаВероут,7,4)+Сред(ДатаВероут,4,2)+лев(ДатаВероут,2)+Сред(ДатаВероут,12,2)+Сред(ДатаВероут,15,2)+ "00");	
	Исключение
		РезДата = Дата("00010101");
	Конецпопытки;
	Возврат РезДата;
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиЗаказ(НомерЗаказа)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	РеализацияТоваровУслуг.Дата КАК ДатаЗаказа,
	|	РеализацияТоваровУслуг.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер = &Номер";
	Зап.УстановитьПараметр("Номер", НомерЗаказа);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Выб.Заказ);
		Струк.Вставить("ДатаЗаказа", Выб.ДатаЗаказа);
		Струк.Вставить("СтатусИнтернетМагазина", Выб.СтатусИнтернетМагазина);
		Возврат Струк;
	Иначе	
		Возврат Неопределено;		
	КонецеСли;	
Конецфункции	

&НаСервереБезКонтекста
Функция НайтиЗабор(НомерЗаказа)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ЗаборТовара.Ссылка КАК Заказ,
	|	ЗаборТовара.Дата КАК ДатаЗаказа,
	|	ЗаборТовара.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Номер = &Номер";
	Зап.УстановитьПараметр("Номер", НомерЗаказа);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Выб.Заказ);
		Струк.Вставить("ДатаЗаказа", Выб.ДатаЗаказа);
		Струк.Вставить("СтатусИнтернетМагазина", Выб.СтатусИнтернетМагазина);
		Возврат Струк;
	Иначе	
		Возврат Неопределено;		
	КонецеСли;	
Конецфункции	

&НаСервереБезКонтекста
Функция ВернутьНомерБезСуффикса(Ном, Суффикс = "")
	Стр = "";
	Суффикс = "";
	Ном = СокрЛП(Ном);
	Для Сч = 1 По СтрДлина(Ном) Цикл
		Смв = Сред(Ном, Сч, 1);
		Если Смв = "_" Тогда
			НомСф = Сч + 1;
			Суффикс = Сред(Ном, НомСф, СтрДлина(Ном) - НомСф + 1);
			Прервать;
		КонецеСли;
		Стр = Стр + Смв;
	КонецЦикла;	
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция ПроанализироватьСостояниеЗаказаНовое(Заказ, Рейс, Статус)
	Если Статус = 4 Тогда
		ТекД = ТекущаяДата();
		
		Наб = РегистрыСведений.ЗаказыНеЗагруженныеВРейсы.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекД);
		Наб.Отбор.Заказ.Установить(Заказ);
		Наб.Отбор.Рейс.Установить(Рейс);
		Наб.Отбор.ПричинаПропускаЗагрузки.Установить(Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказОтклонен);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекД;
		Нов.Заказ = Заказ;
		Нов.ПричинаПропускаЗагрузки = Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказОтклонен;
		Нов.Рейс = Рейс;
		
		Наб.Записать();
		
		Возврат Ложь;
	КонецеСли;	
	Возврат Истина;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСессию(ВидСервера,ТерминалДоставки)
	
	Если ВидСервера = 1 Тогда
		Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресБоевогоСервера) тогда
			Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";
		Иначе                                                 //strizh
			Ресурс = "authentication/createSession?accountID=" + СокрЛП(ТерминалДоставки.vr_АккаунтБоевогоСервера) + "&user=" + СокрЛП(ТерминалДоставки.vr_БоевойСерверИмяПользователя) + "&password=" + СокрЛП(ТерминалДоставки.vr_БоевойСерверПарольПользователя);
		КонецеСли;	
	ИначеЕсли ВидСервера = 2 Тогда
		Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресТестовогоСервера) тогда
			Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";      //dzhigurda
		Иначе
			Ресурс = "authentication/createSession?accountID=" + СокрЛП(ТерминалДоставки.vr_АккаунтТестовогоСервера) + "&user=" + СокрЛП(ТерминалДоставки.vr_ТестовыйСерверИмяПользователя) + "&password=" + СокрЛП(ТерминалДоставки.vr_ТестовыйСерверПарольПользователя);
		КонецеСли;	
	КонецеСли;	
	
	//Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";
	////Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=dzhigurda";
	
	
	ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс,,,ТерминалДоставки,ВидСервера);
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
		#Если Клиент Тогда
			Сообщить("Некорректный ответ с сервера при получении сессии", СтатусСообщения.Важное);
		#КонецеСли
		Возврат Неопределено;
	Иначе
		Попытка
			Возврат ПолученныйОбъект.authResponse.sessionID;
		Исключение
			#Если Клиент Тогда
				Сообщить("Некорректный ответ с сервера при получении сессии", СтатусСообщения.Важное);
			#КонецЕсли	
		КонецПопытки;	
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИДРаспредЦентра(ТерминалДоставки,ВидСервера)
	Если ВидСервера = 1 Тогда
		Возврат Формат(ТерминалДоставки.vr_ИдРаспредЦентраБоевогоСервера, "ЧН=0; ЧГ=");;
	Иначе
		Возврат Формат(ТерминалДоставки.vr_ИдРаспредЦентраТестовогоСервера, "ЧН=0; ЧГ=");
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьPostЗапрос(Ресурс, СтрокаТекста = Неопределено, ВторойСервер = Ложь, ТерминалДоставки, ВидСервера);
	//Если не ВторойСервер Тогда
	//	Если Объект.ВидСервера = 1 Тогда
	//		Сервер = "prof.veeroute.com";   	
	//	Иначе
	//		Сервер = "trial3.veeroute.com";
	//	КонецЕСли;
	//Иначе
	//	//Сервер = "46.182.25.196";
	//	Сервер = "trial3.veeroute.com";
	//КонецЕсли;
	
	Если ВидСервера = 1 Тогда
		Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресБоевогоСервера) Тогда
			Сервер = "prof.veeroute.com";
		Иначе
			Сервер = ТерминалДоставки.vr_АдресБоевогоСервера;
		КонецеСли;	
	Иначе
		Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресТестовогоСервера) Тогда
			Сервер = "trial3.veeroute.com";
		Иначе
			Сервер = ТерминалДоставки.vr_АдресТестовогоСервера;
		КонецеСли;			
	КонецеСли;	
	
	ОбщийРесурс = "/rest/2/";
	
	РесурсНаСервере = ОбщийРесурс + Ресурс;
	
	
	Попытка
		Соединение = Новый HTTPСоединение(Сервер, , , , , 600);
	Исключение
		//#Если Клиент Тогда
		Сообщить("Не удалось установить соединение с сервером:" 
		+ Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		//#КонецеСли
		Возврат Неопределено;
	КонецПопытки;
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	
	//Формируем заголовок POST-запроса.
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/xml");
	
	
	
	//Создаём файл отправки - содержимое POST-запроса. 
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("xml");
	Если СтрокаТекста = Неопределено Тогда
		Запрос = Новый HTTPЗапрос(РесурсНаСервере);
		Запрос.УстановитьТелоИзСтроки(""); 
	Иначе
		Запрос = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовокHTTP);
		Запрос.УстановитьТелоИзСтроки(СтрокаТекста, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать); 
	КонецеСли;	
	
	
	//Попытка
	Соединение.ОтправитьДляОбработки(Запрос, ИмяФайлаРезультата);
	Соединение = Неопределено;
	//Исключение 
	//	//#Если Клиент Тогда
	//		Сообщить("Не удалось получить данные с сервера:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	//	//#КонецеСли
	//	Возврат Неопределено;
	//КонецПопытки;
	
	
	Т = Новый ТекстовыйДокумент;
	Т.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
	Стр_ = Т.ПолучитьТекст();
	Стр_ = СтрЗаменить(Стр_, """АвиаПарк""", "АвиаПарк");
	Стр_ = СтрЗаменить(Стр_, "&laquo", "&#1042");
	Стр_ = СтрЗаменить(Стр_, "&raquo", "&#1042");
	Стр_ = СтрЗаменить(Стр_, "&nbsp", "&#1042");
	
	Т.УстановитьТекст(Стр_);
	Т.Записать(ИмяФайлаРезультата);
	
	
	ФайлРезультата = Новый ЧтениеXML();
	ФайлРезультата.ОткрытьФайл(ИмяФайлаРезультата);
	Фабрика = Новый ФабрикаXDTO;
	Попытка
		Результат = Фабрика.ПрочитатьXML(ФайлРезультата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Результат;
КонецФункции	

&НаСервереБезКонтекста
Функция ПроанализироватьДатуЗаказаНовая(Заказ, Рейс, ДатаЗаказа, ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов,Дата)
	Если ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов Тогда
		Если НачалоДня(ДатаЗаказа) <> НачалоДня(Дата) Тогда
			ТекД = ТекущаяДата();
			
			Наб = РегистрыСведений.ЗаказыНеЗагруженныеВРейсы.СоздатьНаборЗаписей();
			Наб.Отбор.Период.Установить(ТекД);
			Наб.Отбор.Заказ.Установить(Заказ);
			Наб.Отбор.Рейс.Установить(Рейс);
			Наб.Отбор.ПричинаПропускаЗагрузки.Установить(Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказПеренесен);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекД;
			Нов.Заказ = Заказ;
			Нов.ПричинаПропускаЗагрузки = Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказПеренесен;
			Нов.Рейс = Рейс;
			
			Наб.Записать();
			
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	Возврат Истина;
КонецФункции	

#КонецОбласти

&НаКлиенте
Процедура ОткрытьПриемДСУдаленногоЗакрытия(Команда)
	
	ОткрытьФорму("Документ.ПриемДСОтЭкипажейУдаленногоЗакрытия.ФормаСписка");
	
КонецПроцедуры
