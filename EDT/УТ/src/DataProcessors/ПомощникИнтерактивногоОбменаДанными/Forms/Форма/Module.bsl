&НаКлиенте
Перем ЗакрытьФормуБезусловно;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
//Форма параметризуется двумя способами:
//Вариант 1:
// Параметр УзелИнформационнойБазы – задается ссылка на узле плана обмена, для которого выполняется помощник
//Вариант 2:
// Параметр КодУзлаИнформационнойБазы – код узла плана обмена,
//                          для которого выполняется помощник
// Параметр ИмяПланаОбмена – имя плана обмена менеджер которого используется для поиска
//            узла плана обмена с кодом, заданными в параметре КодУзлаИнформационнойБазы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем КодУзлаИнформационнойБазы;
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗапускИзДругогоПриложения = Ложь;
	
	Если Параметры.Свойство("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы) Тогда
		
		Объект.ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Объект.УзелИнформационнойБазы);
		
	ИначеЕсли Параметры.Свойство("КодУзлаИнформационнойБазы", КодУзлаИнформационнойБазы) Тогда
		
		ЭтоЗапускИзДругогоПриложения = Истина;
		
		Объект.УзелИнформационнойБазы = ПланыОбмена[Параметры.ИмяПланаОбмена].НайтиПоКоду(КодУзлаИнформационнойБазы);
		
		Если Объект.УзелИнформационнойБазы.Пустая() Тогда
			
			ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Настройка обмена данными не найдена.'"), Отказ);
			Возврат;
			
		КонецЕсли;
		
		Объект.ИмяПланаОбмена = Параметры.ИмяПланаОбмена;
		
	Иначе
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Непосредственное открытие помощника не предусмотрено.'"), Отказ);
		Возврат;
		
	КонецЕсли;
	
	Если Не ОбменДаннымиПовтИсп.ЭтоУзелУниверсальногоОбменаДанными(Объект.УзелИнформационнойБазы) Тогда
		
		// Интерактивное выполнение обмена данными поддерживается только для универсальных обменов с использованием правил конвертации объектов.
		ОбменДаннымиСервер.СообщитьОбОшибке(
			НСтр("ru = 'Для выбранного узла выполнение обмена данными с настройкой не предусмотрено.'"), Отказ);
		Возврат;
		
	КонецЕсли;
	
	МассивУзлов = ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена(Объект.ИмяПланаОбмена);
	
	// проверяем настройку обмена на соответствие фильтру
	Если МассивУзлов.Найти(Объект.УзелИнформационнойБазы) = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для выбранного узла сопоставление данных не предусмотрено.'"),,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	Параметры.Свойство("ВидТранспортаСообщенийОбмена", Объект.ВидТранспортаСообщенийОбмена);
	
	// задание вида транспорта сообщений обмена, если значение не было передано
	Если Не ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена) Тогда
		
		НастройкиТранспортаОбмена = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаДляУзла(Объект.УзелИнформационнойБазы);
		Объект.ВидТранспортаСообщенийОбмена = НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию;
		Если Не ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена) Тогда
			Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбменДаннымиСервер.ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(Объект.УзелИнформационнойБазы, Элементы.ВидТранспортаСообщенийОбмена);
	Параметры.Свойство("ВыполнитьСопоставлениеПриОткрытии", ВыполнитьСопоставлениеПриОткрытии);
	ВариантРаботыМастера = "ВыполнитьСопоставление";
	ОбновитьСтраницыНастроекТранспорта();
	СобытиеЖурналаРегистрацииЗагрузкаДанных = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(Объект.УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
	ЗакрытьФормуБезусловно = Ложь;
	
	Если ВыполнитьСопоставлениеПриОткрытии Тогда
		
		// если необходимо выполнить сопоставление при открытии помощника,
		// то переходим сразу к странице загрузки информации статистики при открытии
		ПодключитьОбработчикОжидания("ОбработчикОжиданияКомандаДалее", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Выйти из помощника интерактивного обмена данными?'");
	
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// удаляем временный каталог
	УдалитьВременныйКаталогСообщенийОбмена(Объект.ИмяВременногоКаталогаСообщенийОбмена);
	
	Оповестить("ЗакрытаФормаПомощникаСопоставленияОбъектов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыСопоставленияОбъектов" Тогда
		
		Отказ = Ложь;
		
		Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
		
		ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, Параметр);
		
		Если Отказ Тогда
			Предупреждение(НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
		Иначе
			
			РазвернутьДеревоИнформацииСтатистики(Параметр.КлючУникальности);
			
			Состояние(НСтр("ru = 'Сбор информации завершен'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаНачала

&НаКлиенте
Процедура ВидТранспортаСообщенийОбменаПриИзменении(Элемент)
	
	ВидТранспортаСообщенийОбменаПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоИнформацииСтатистики

&НаКлиенте
Процедура ДеревоИнформацииСтатистикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуСопоставления(Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Если Не УзелИспользуетсяВСценарииОбмена
		И ОткрытьПомощникСозданияСценарияОбменаДанными Тогда
		
		ПараметрыФормы = Новый Структура("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
		
		ОткрытьФормуМодально("Справочник.СценарииОбменовДанными.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
	// Обновляем все открытые динамические списки
	ОбменДаннымиКлиент.ОбновитьВсеОткрытыеДинамическиеСписки();
	
	ЗакрытьФормуБезусловно = Истина;
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаНачала

&НаКлиенте
Процедура ВыполнитьПереходДалее()
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогОбменаИнформацией(Команда)
	
	// Вызов сервера без контекста
	ИмяКаталога = ПолучитьИмяКаталогаНаСервере(Объект.ВидТранспортаСообщенийОбмена, Объект.УзелИнформационнойБазы);
	
	Если ПустаяСтрока(ИмяКаталога) Тогда
		Предупреждение(НСтр("ru = 'Не задан каталог обмена информацией.'"));
		Возврат;
	КонецЕсли;
	
	// открываем каталог в приложении explorer
	ЗапуститьПриложение(ИмяКаталога);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыТранспортаСообщенийОбмена(Команда)
	
	Отбор              = Новый Структура("Узел", Объект.УзелИнформационнойБазы);
	ЗначенияЗаполнения = Новый Структура("Узел", Объект.УзелИнформационнойБазы);
	
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "НастройкиТранспортаОбмена", ЭтаФорма);
	
	ОбновитьСтраницыНастроекТранспорта();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаИнформацииСтатистики

&НаКлиенте
Процедура ОбновитьИнформациюСопоставленияДляСтроки(Команда)
	
	Отказ = Ложь;
	
	ВыделенныеСтроки = Элементы.ДеревоИнформацииСтатистики.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		НСтрока = НСтр("ru = 'Выберите имя таблицы в поле статистической информации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"Объект.ИнформацияСтатистики",, Отказ);
		Возврат;
	КонецЕсли;
	
	КлючиСтрок = ПолучитьКлючиВыделенныхСтрок(ВыделенныеСтроки);
	
	Если КлючиСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
	
	ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючиСтрок[КлючиСтрок.ВГраница()]);
		
		Состояние(НСтр("ru = 'Сбор информации завершен'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюСопоставленияПолностью(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	КлючиСтрок = Новый Массив;
	
	ПолучитьКлючиВсехСтрок(КлючиСтрок, ДеревоИнформацииСтатистики.ПолучитьЭлементы());
	
	Если КлючиСтрок.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
		
		ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
		
		Состояние(НСтр("ru = 'Сбор информации завершен'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтоматическоеСопоставлениеПоУмолчанию(Команда)
	
	НСтрока = НСтр("ru = 'Автоматическое сопоставление может занять много времени. Продолжить?'");
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	КлючиСтрок = Новый Массив;
	
	ПолучитьКлючиВсехСтрок(КлючиСтрок, ДеревоИнформацииСтатистики.ПолучитьЭлементы());
	
	Если КлючиСтрок.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется автоматическое сопоставление по умолчанию...'"));
		
		ВыполнитьАвтоматическоеСопоставлениеПоУмолчаниюПоСтрокеНаСервере(Отказ, КлючиСтрок);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'При выполнении автоматического сопоставления возникли ошибки'"));
		
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
		
		Состояние(НСтр("ru = 'Автоматическое сопоставление завершено'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхВсехТаблиц(Команда)
	
	НСтрока = НСтр("ru = 'Выполнить загрузку всех данных в информационную базу?'");
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаДополнительнойИнформации.Видимость Тогда
		
		НСтрока = НСтр("ru = 'Имеются несопоставленные объекты.
					|При загрузке данных будут созданы дубли несопоставленных объектов. Продолжить?'");
		//
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	КлючиСтрок = Новый Массив;
	
	ПолучитьКлючиВсехСтрок(КлючиСтрок, ДеревоИнформацииСтатистики.ПолучитьЭлементы());
	
	Если КлючиСтрок.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется загрузка данных...'"));
		
		ВыполнитьЗагрузкуДанныхНаСервере(Отказ, КлючиСтрок);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		НСтрока = НСтр("ru = 'При загрузке данных возникли ошибки.
							|Перейти в журнал регистрации?'");
		//
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
			
		КонецЕсли;
		
	Иначе
		РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
		
		Состояние(НСтр("ru = 'Загрузка данных завершена.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхДляСтроки(Команда)
	
	Отказ = Ложь;
	
	ВыделенныеСтроки = Элементы.ДеревоИнформацииСтатистики.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		НСтрока = НСтр("ru = 'Выберите имя таблицы в поле статистической информации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"ДеревоИнформацииСтатистики",, Отказ);
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверкуНаличияСопоставленныхОбъектов(Отказ, ВыделенныеСтроки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КлючиСтрок = ПолучитьКлючиВыделенныхСтрок(ВыделенныеСтроки);
	
	Если КлючиСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется загрузка данных...'"));
	
	ВыполнитьЗагрузкуДанныхНаСервере(Отказ, КлючиСтрок);
	
	Если Отказ Тогда
		
		НСтрока = НСтр("ru = 'При загрузке данных возникли ошибки.
							|Перейти в журнал регистрации?'");
		//
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
			
		КонецЕсли;
		
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючиСтрок[КлючиСтрок.ВГраница()]);
		
		Состояние(НСтр("ru = 'Загрузка данных завершена.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставления(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ИспользоватьПредварительныйПросмотр Тогда
		Предупреждение(НСтр("ru = 'Для типа данных нельзя выполнить сопоставление объектов.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицыПриемника",            ТекущиеДанные.ИмяТаблицыПриемника);
	ПараметрыФормы.Вставить("ИмяТипаОбъектаТаблицыИсточника", ТекущиеДанные.ТипОбъектаСтрокой);
	ПараметрыФормы.Вставить("ПоляТаблицыПриемника",           ТекущиеДанные.ПоляТаблицы);
	ПараметрыФормы.Вставить("ПоляПоискаТаблицыПриемника",     ТекущиеДанные.ПоляПоиска);
	ПараметрыФормы.Вставить("ТипИсточникаСтрокой",            ТекущиеДанные.ТипИсточникаСтрокой);
	ПараметрыФормы.Вставить("ТипПриемникаСтрокой",            ТекущиеДанные.ТипПриемникаСтрокой);
	ПараметрыФормы.Вставить("ЭтоУдалениеОбъекта",             ТекущиеДанные.ЭтоУдалениеОбъекта);
	ПараметрыФормы.Вставить("ДанныеУспешноЗагружены",         ТекущиеДанные.ДанныеУспешноЗагружены);
	
	ПараметрыФормы.Вставить("УзелИнформационнойБазы",               Объект.УзелИнформационнойБазы);
	ПараметрыФормы.Вставить("ИмяФайлаСообщенияОбмена",              Объект.ИмяФайлаСообщенияОбмена);
	
	ОткрытьФорму("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма", ПараметрыФормы, ЭтаФорма, ТекущиеДанные.Ключ, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаОкончанияСопоставления

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтаФорма, "ВыгрузкаДанных");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПолучитьЗаголовокПакетаДанныхНаСервере(Отказ, ИнформацияСтатистикиАктуальна)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ПолучитьСообщениеОбменаВоВременныйКаталог(
			Отказ,
			ИдентификаторФайлаПакетаДанных,
			ИдентификаторФайла,
			ДлительнаяОперация,
			ИдентификаторОперации,
			WSПароль
	);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если ДлительнаяОперация Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ПриПолученииЗаголовкаПакетаДанныхНаСервере(Отказ, ИнформацияСтатистикиАктуальна);
		
	КонецЕсли;
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗаголовокПакетаДанныхНаСервереОкончаниеДлительнойОперации(Отказ, ИнформацияСтатистикиАктуальна)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ПолучитьСообщениеОбменаВоВременныйКаталогОкончаниеДлительнойОперации(
		Отказ,
		ИдентификаторФайлаПакетаДанных,
		ИдентификаторФайла,
		WSПароль
	);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если Не Отказ Тогда
		
		ПриПолученииЗаголовкаПакетаДанныхНаСервере(Отказ, ИнформацияСтатистикиАктуальна);
		
	КонецЕсли;
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииЗаголовкаПакетаДанныхНаСервере(Отказ, ИнформацияСтатистикиАктуальна)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ДанныеСтатистикиСопоставления = ПолучитьДанныеСтатистикиСопоставления();
	
	ИнформацияСтатистикиАктуальна = (ДанныеСтатистикиСопоставления.ИдентификаторФайлаПакетаДанных = ИдентификаторФайлаПакетаДанных);
	
	Если Не ИнформацияСтатистикиАктуальна Тогда
		
		// появился новый файл пакета данных; загружаем информацию из файла
		ОбработкаОбъект.ВыполнитьАнализСообщенияОбмена(Отказ);
		
		Если Не Отказ Тогда
			
			ЗаписатьДанныеСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы, ОбработкаОбъект.ТаблицаИнформацииСтатистики(), ИдентификаторФайлаПакетаДанных);
			
		КонецЕсли;
		
	Иначе
		
		// файл пакета данных не изменился; загружаем информацию из кэша
		ОбработкаОбъект.ИнформацияСтатистики.Загрузить(ДанныеСтатистикиСопоставления.ИнформацияСтатистикиСопоставленияОбъектов.Скопировать());
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// получаем статистическую информацию по сопоставлению
	ОбработкаОбъект.ПолучитьСтатистикуСопоставленияОбъектовПоСтроке(Отказ, ИндексыСтрок);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// сохраняем данные статистики сопоставления
	ЗаписатьДанныеСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы, ОбработкаОбъект.ТаблицаИнформацииСтатистики(), ИдентификаторФайлаПакетаДанных);
	
	ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтоматическоеСопоставлениеПоУмолчаниюПоСтрокеНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// выполняем автоматическое сопоставление и получаем статистическую информацию
	ОбработкаОбъект.ВыполнитьАвтоматическоеСопоставлениеПоУмолчаниюИПолучитьСтатистикуСопоставления(Отказ, ИндексыСтрок);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// сохраняем данные статистики сопоставления
	ЗаписатьДанныеСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы, ОбработкаОбъект.ТаблицаИнформацииСтатистики(), ИдентификаторФайлаПакетаДанных);
	
	ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// выполняем загрузку данных
	ОбработкаОбъект.ВыполнитьЗагрузкуДанных(Отказ, ИндексыСтрок);
	
	// получаем статистическую информацию по сопоставлению
	ОбработкаОбъект.ПолучитьСтатистикуСопоставленияОбъектовПоСтроке(Отказ, ИндексыСтрок);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// сохраняем данные статистики сопоставления
	ЗаписатьДанныеСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы, ОбработкаОбъект.ТаблицаИнформацииСтатистики(), ИдентификаторФайлаПакетаДанных);
	
	ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, ПараметрыОповещения)
	
	СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", ПараметрыОповещения.КлючУникальности));
	
	ЗаполнитьЗначенияСвойств(СтрокиТаблицы[0], ПараметрыОповещения, "ДанныеУспешноЗагружены");
	
	КлючиСтрок = Новый Массив;
	КлючиСтрок.Добавить(ПараметрыОповещения.КлючУникальности);
	
	ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики)
	
	КоллекцияЭлементовДерева = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	КоллекцияЭлементовДерева.Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева,
		ОбменДаннымиСервер.ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики)
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыДополнительнойИнформации()
	
	// если в таблице информации статистике есть хотя бы одна строка с сопоставлением меньшим 100%,
	// то группу дополнительной информации делаем видимой
	МассивСтрок = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("ИндексКартинки", 1));
	
	Элементы.ГруппаДополнительнойИнформации.Видимость = (МассивСтрок.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтатистикиСопоставления()
	Перем ДанныеСтатистикиСопоставления;
	
	ИмяФайла = ИмяФайлаДанныхСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы);
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() Тогда
		
		ДанныеСтатистикиСопоставления = ЗначениеИзФайла(ИмяФайла);
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтатистикиСопоставления) <> Тип("Структура") Тогда
		
		ДанныеСтатистикиСопоставления = Новый Структура("ИдентификаторФайлаПакетаДанных, ИнформацияСтатистикиСопоставленияОбъектов");
		
	КонецЕсли;
	
	Возврат ДанныеСтатистикиСопоставления;
	
КонецФункции

&НаСервере
Функция ПакетДанныхЗагруженПолностью()
	
	ТаблицаУспешныхЗагрузок = Объект.ИнформацияСтатистики.Выгрузить(Новый Структура("ДанныеУспешноЗагружены", Истина) ,"ДанныеУспешноЗагружены");
	
	Возврат ТаблицаУспешныхЗагрузок.Количество() = Объект.ИнформацияСтатистики.Количество();
	
КонецФункции

&НаСервере
Функция ВсеТаблицыОбъектовСопоставлены()
	
	Возврат (Объект.ИнформацияСтатистики.Выгрузить(,"КоличествоОбъектовНесопоставленных").Итог("КоличествоОбъектовНесопоставленных") = 0);
	
КонецФункции

&НаСервере
Процедура ПолучитьСтруктуруПроверокПриЗавершенииСопоставления(СтруктураПроверок)
	
	СтруктураПроверок.ПакетДанныхЗагруженПолностью   = ПакетДанныхЗагруженПолностью();
	СтруктураПроверок.ВсеТаблицыОбъектовСопоставлены = ВсеТаблицыОбъектовСопоставлены();
	
КонецПроцедуры

&НаСервере
Процедура ВидТранспортаСообщенийОбменаПриИзмененииНаСервере()
	
	ОбменЧерезВнешнееСоединение = (Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	ОбменЧерезВебСервис         = (Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	
	ОбменЧерезПодключениеККорреспонденту = ОбменЧерезВнешнееСоединение ИЛИ ОбменЧерезВебСервис;
	
	СтруктураПараметровПодключенияВнешнегоСоединения = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаДляУзла(Объект.УзелИнформационнойБазы);
	СтруктураПараметровПодключенияВнешнегоСоединения = УдалитьПрефиксВКлючахКоллекции(СтруктураПараметровПодключенияВнешнегоСоединения, "COM");
	
	Если ЭтоЗапускИзДругогоПриложения Тогда
		
		Элементы.ИнформационнаяНадписьНастройкиРасписания.Видимость = Ложь;
		
		ОткрытьПомощникСозданияСценарияОбменаДанными = Ложь;
		
	Иначе
		
		УзелИспользуетсяВСценарииОбмена = УзелИнформационнойБазыИспользуетсяВСценарииОбмена(Объект.УзелИнформационнойБазы);
		
		Элементы.ИнформационнаяНадписьНастройкиРасписания.Видимость = Не УзелИспользуетсяВСценарииОбмена И ПользователиБСП.РолиДоступны("ДобавлениеИзменениеОбменовДанными");
		
		ОткрытьПомощникСозданияСценарияОбменаДанными = ПользователиБСП.РолиДоступны("ДобавлениеИзменениеОбменовДанными");
		
	КонецЕсли;
	
	// Устанавливаем текущую таблицу переходов
	Если ОбменЧерезПодключениеККорреспонденту Тогда
		
		СценарийОбменаЧерезВнешнееСоединениеИлиВебСервис();
		
	Иначе
		
		СценарийОбменаЧерезОбычныеКаналыСвязи();
		
	КонецЕсли;
	
	УстановитьВидимостьКнопкиОткрытияКаталогаОбмена();
	
	Элементы.ПолучениеПароляПользователя.Видимость = Ложь;
	
	Если ОбменЧерезВебСервис Тогда
		
		// Получаем настройки подключения к веб-сервису корреспондента.
		// Настройки нужны, например, для периодического опроса корреспондента на предмет окончания длительной операции выгрузки данных.
		СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаWS(Объект.УзелИнформационнойБазы);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураНастроек, "WSURLВебСервиса, WSИмяПользователя, WSПароль, WSЗапомнитьПароль");
		
		Элементы.ПолучениеПароляПользователя.Видимость = Не WSЗапомнитьПароль;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет заданный литерал (префикс) в именах ключей переданной структуры.
// Создает новую структуру.
//
//  Параметры:
// Структура. Тип: Структура.
// Структура элементов, на основании которой необходимо создать новую структуру с ключами без заданного литерала.
//
// Литерал. Тип: Строка.
// Строка символов, которую необходимо исключить из имени ключей переданной структуры.
//
//  Возвращающее значение:
// Тип. Структура.
// Возвращаемая структура получается на основании копирования исходной структуры.
//
&НаСервере
Функция УдалитьПрефиксВКлючахКоллекции(Структура, Литерал)
	
	Результат = Новый Структура;
	
	Для Каждого Элемент Из Структура Цикл
		
		Результат.Вставить(СтрЗаменить(Элемент.Ключ, Литерал, ""), Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок)
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого Ключ ИЗ КлючиСтрок Цикл
		
		СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", Ключ));
		
		ИндексСтроки = Объект.ИнформацияСтатистики.Индекс(СтрокиТаблицы[0]);
		
		ИндексыСтрок.Добавить(ИндексСтроки);
		
	КонецЦикла;
	
	Возврат ИндексыСтрок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьСостоянияОбменовДанными(РезультатЗагрузкиДанных, РезультатВыгрузкиДанных, Знач УзелИнформационнойБазы)
	
	СостоянияОбменовДанными = РегистрыСведений.СостоянияОбменовДанными.СостоянияОбменовДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
	
	РезультатЗагрузкиДанных = СостоянияОбменовДанными["РезультатЗагрузкиДанных"];
	РезультатВыгрузкиДанных = СостоянияОбменовДанными["РезультатВыгрузкиДанных"];
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФайлаДанныхСтатистикиСопоставления(ИмяПланаОбмена, УзелИнформационнойБазы)
	
	Ключ = "ДанныеСтатистикиСопоставления[ИмяПланаОбмена][КодУзла]";
	
	Ключ = СтрЗаменить(Ключ, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	Ключ = СтрЗаменить(Ключ, "[КодУзла]",        ОбщегоНазначения.ПолучитьЗначениеРеквизита(УзелИнформационнойБазы, "Код"));
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), Ключ);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеСтатистикиСопоставления(ИмяПланаОбмена, УзелИнформационнойБазы, Знач ИнформацияСтатистики, ИдентификаторФайлаПакетаДанных)
	
	Если ТипЗнч(ИнформацияСтатистики) = Тип("ДанныеФормыКоллекция") Тогда
		
		ИнформацияСтатистики = ИнформацияСтатистики.Выгрузить();
		
	КонецЕсли;
	
	ДанныеСтатистикиСопоставления = Новый Структура;
	ДанныеСтатистикиСопоставления.Вставить("ИдентификаторФайлаПакетаДанных",            ИдентификаторФайлаПакетаДанных);
	ДанныеСтатистикиСопоставления.Вставить("ИнформацияСтатистикиСопоставленияОбъектов", ИнформацияСтатистики);
	
	ЗначениеВФайл(ИмяФайлаДанныхСтатистикиСопоставления(ИмяПланаОбмена, УзелИнформационнойБазы), ДанныеСтатистикиСопоставления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВременныйКаталогСообщенийОбмена(ИмяВременногоКаталога)
	
	Если Не ПустаяСтрока(ИмяВременногоКаталога) Тогда
		
		Попытка
			УдалитьФайлы(ИмяВременногоКаталога);
			ИмяВременногоКаталога = "";
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(СтрокаСообщенияОбОшибке, Событие)
	
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаНаСервере(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы)
	
	Возврат РегистрыСведений.НастройкиТранспортаОбмена.ИмяКаталогаОбменаИнформацией(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы);
	
КонецФункции

&НаСервереБезКонтекста
Функция УзелИнформационнойБазыИспользуетсяВСценарииОбмена(УзелИнформационнойБазы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|ГДЕ
	|		 СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И НЕ СценарииОбменовДаннымиНастройкиОбмена.Ссылка.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыНаСервере(Отказ)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(
														Отказ,
														Объект.УзелИнформационнойБазы,
														Ложь,
														Истина,
														Объект.ВидТранспортаСообщенийОбмена,
														ДлительнаяОперация,
														ИдентификаторОперации,
														ИдентификаторФайла,
														Истина,
														WSПароль
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницыНастроекТранспорта()
	
	РольДоступнаДобавлениеИзменениеОбменовДанными = ПользователиБСП.РолиДоступны("ДобавлениеИзменениеОбменовДанными");
	
	Элементы.НастроитьПараметрыТранспортаСообщенийОбмена.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
	Элементы.НастроитьПараметрыТранспортаСообщенийОбмена1.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
	
	НастроенныеВидыТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастроенныеВидыТранспорта(Объект.УзелИнформационнойБазы);
	
	ОбменДаннымиСервер.ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(Объект.УзелИнформационнойБазы, Элементы.ВидТранспортаСообщенийОбмена, НастроенныеВидыТранспорта);
	
	Объект.ВидТранспортаСообщенийОбмена = Неопределено;
	
	ВидТранспортаСообщенийОбменаПоУмолчанию = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(Объект.УзелИнформационнойБазы);
	
	Если Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора.НайтиПоЗначению(ВидТранспортаСообщенийОбменаПоУмолчанию) <> Неопределено Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = ВидТранспортаСообщенийОбменаПоУмолчанию;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена)
		И Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора.Количество() > 0 Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора[0].Значение;
		
	КонецЕсли;
	
	Элементы.ВидТранспортаСообщенийОбменаСтрокой.Заголовок = ?(Не ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена),
								НСтр("ru = '<Настройки транспорта не заданы>'"),
								Строка(Объект.ВидТранспортаСообщенийОбмена)
	);
	
	Элементы.СтраницыНастроекТранспорта.ТекущаяСтраница = ?(
							Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора.Количество() = 1,
							Элементы.СтраницаДоступенТолькоОдинВидТранспорта,
							Элементы.СтраницаВыборВидаТранспортаИзДоступных
	);
	
	ВидТранспортаСообщенийОбменаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопкиОткрытияКаталогаОбмена()
	
	ВидимостьКнопки = Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE
					ИЛИ Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FTP
	;
	
	Элементы.ОткрытьКаталогОбменаИнформацией.Видимость = ВидимостьКнопки;
	Элементы.ОткрытьКаталогОбменаИнформацией1.Видимость = ВидимостьКнопки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики ожидания

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	ДлительнаяОперацияСтрокаСообщенияОбОшибке = "";
	
	СостояниеОперации = ОбменДаннымиВызовСервера.СостояниеДлительнойОперации(ИдентификаторОперации,
																		WSURLВебСервиса,
																		WSИмяПользователя,
																		WSПароль,
																		ДлительнаяОперацияСтрокаСообщенияОбОшибке
	);
	
	Если СостояниеОперации = "Active" Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	Иначе
		
		Если СостояниеОперации <> "Completed" Тогда
			
			ДлительнаяОперацияЗавершенаСОшибкой = Истина;
			
		КонецЕсли;
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		
		ВыполнитьПереходДалее();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияКомандаДалее()
	
	КомандаДалее(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции мастера

&НаКлиенте
Процедура ВыполнитьПроверкуНаличияСопоставленныхОбъектов(Отказ, ВыделенныеСтроки)
	
	Для Каждого ИдентификаторСтроки ИЗ ВыделенныеСтроки Цикл
		
		СтрокаДерева = ДеревоИнформацииСтатистики.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.КоличествоОбъектовНесопоставленных <> 0 Тогда
			
			НСтрока = НСтр("ru = 'Имеются несопоставленные объекты.
						|При загрузке данных будут созданы дубли несопоставленных объектов. Продолжить?'");
			//
			Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКлючиВыделенныхСтрок(ВыделенныеСтроки)
	
	// возвращаемое значение функции
	КлючиСтрок = Новый Массив;
	
	Для Каждого ИдентификаторСтроки ИЗ ВыделенныеСтроки Цикл
		
		СтрокаДерева = ДеревоИнформацииСтатистики.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			
			КлючиСтрок.Добавить(СтрокаДерева.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КлючиСтрок;
КонецФункции

&НаКлиенте
Процедура ПолучитьКлючиВсехСтрок(КлючиСтрок, КоллекцияЭлементовДерева)
	
	Для Каждого СтрокаДерева ИЗ КоллекцияЭлементовДерева Цикл
		
		Если Не ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			
			КлючиСтрок.Добавить(СтрокаДерева.Ключ);
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьКлючиВсехСтрок(КлючиСтрок, КоллекцияЭлементов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовСтатусаОбменаДанными()
	
	Элементы.СтраницыСтатусаЗагрузкиДанных.ТекущаяСтраница = Элементы[ОбменДаннымиКлиент.СтраницыСтатусаЗагрузкиДанных()[РезультатЗагрузкиДанных]];
	Элементы.СтраницыСтатусаВыгрузкиДанных.ТекущаяСтраница = Элементы[ОбменДаннымиКлиент.СтраницыСтатусаВыгрузкиДанных()[РезультатВыгрузкиДанных]];
	
	Элементы.ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных.Заголовок = ОбменДаннымиКлиент.ЗаголовкиГиперссылокЗагрузкиДанных()[РезультатЗагрузкиДанных];
	Элементы.ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных.Заголовок = ОбменДаннымиКлиент.ЗаголовкиГиперссылокВыгрузкиДанных()[РезультатВыгрузкиДанных];
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоИнформацииСтатистики(КлючСтроки = "")
	
	КоллекцияЭлементов = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		
		Элементы.ДеревоИнформацииСтатистики.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
	// Позиционирование курсора в дереве значений
	Если Не ПустаяСтрока(КлючСтроки) Тогда
		
		ИдентификаторСтроки = 0;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Ключ", ИдентификаторСтроки, ДеревоИнформацииСтатистики.ПолучитьЭлементы(), КлючСтроки, Ложь);
		
		Элементы.ДеревоИнформацииСтатистики.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Внутренние процедуры и функции

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = ""
	)
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			//Возврат ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Элемент.ИмяКоманды = ИмяКоманды Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов

&НаКлиенте
Функция Подключаемый_СтраницаНачала_ПриПереходеДалее(Отказ)
	
	// Выполняем проверки заполнения реквизитов формы
	Если Объект.УзелИнформационнойБазы.Пустая() Тогда
		
		НСтрока = НСтр("ru = 'Укажите узел информационной базы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.УзелИнформационнойБазы",, Отказ);
		
	ИначеЕсли Объект.ВидТранспортаСообщенийОбмена.Пустая() Тогда
		
		НСтрока = НСтр("ru = 'Укажите вид транспорта сообщений обмена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ВидТранспортаСообщенийОбмена",, Отказ);
		
	ИначеЕсли ОбменЧерезВебСервис И ПустаяСтрока(WSПароль) Тогда
		
		НСтрока = НСтр("ru = 'Не указан пароль.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "WSПароль",, Отказ);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияПроверкиПодключения_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ОбменЧерезВебСервис Тогда
		
		ПроверитьПодключениеИСохранитьНастройки(Отказ);
		
		Если Отказ Тогда
			
			Предупреждение(НСтр("ru = 'Не удалось выполнить операцию.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьПодключениеИСохранитьНастройки(Отказ)
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ЭтаФорма);
	
	СообщениеПользователю = "";
	WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения,, СообщениеПользователю);
	Если WSПрокси = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,,"WSПароль",, Отказ);
		Возврат;
	КонецЕсли;
	
	Если WSЗапомнитьПароль Тогда
		
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
			
			// обновляем запись в РС
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Узел", Объект.УзелИнформационнойБазы);
			СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
			СтруктураЗаписи.Вставить("WSПароль", WSПароль);
			РегистрыСведений.НастройкиТранспортаОбмена.ОбновитьЗапись(СтруктураЗаписи);
			
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Загрузка данных

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияЗагрузкиДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	ИдентификаторФайла = "";
	ИдентификаторОперации = "";
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
		КлючТекущейСтрокиТаблицыИнформацииСтатистики = ТекущиеДанные.Ключ;
		
	КонецЕсли;
	
	ИнформацияСтатистикиАктуальна = Истина;
	
	ПолучитьЗаголовокПакетаДанныхНаСервере(Отказ, ИнформацияСтатистикиАктуальна);
	
	Если ДлительнаяОперация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Отказ Тогда
		
		Отказ = Ложь;
		
		// Устанавливаем новый сценарий в случае ошибки при загрузке данных
		Если ОбменЧерезПодключениеККорреспонденту Тогда
			
			СценарийОбменаЧерезВнешнееСоединениеИлиВебСервисПриОшибкеЗагрузки();
			
		Иначе
			
			СценарийОбменаЧерезОбычныеКаналыСвязиПриОшибкеЗагрузки();
			
		КонецЕсли;
		
	ИначеЕсли Не ИнформацияСтатистикиАктуальна Тогда
		
		// если информация устарела (есть новый файл пакета данных), то обновляем ее
		ОбновитьИнформациюСопоставленияПолностью(Неопределено);
		
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияЗагрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияЗагрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			// Устанавливаем новый сценарий в случае ошибки при загрузке данных
			Если ОбменЧерезПодключениеККорреспонденту Тогда
				
				СценарийОбменаЧерезВнешнееСоединениеИлиВебСервисПриОшибкеЗагрузки();
				
			Иначе
				
				СценарийОбменаЧерезОбычныеКаналыСвязиПриОшибкеЗагрузки();
				
			КонецЕсли;
			
			ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперацияСтрокаСообщенияОбОшибке, СобытиеЖурналаРегистрацииЗагрузкаДанных);
			
		Иначе
			
			ИнформацияСтатистикиАктуальна = Истина;
			
			ПолучитьЗаголовокПакетаДанныхНаСервереОкончаниеДлительнойОперации(Отказ, ИнформацияСтатистикиАктуальна);
			
			Если Отказ Тогда
				
				// Устанавливаем новый сценарий в случае ошибки при загрузке данных
				Если ОбменЧерезПодключениеККорреспонденту Тогда
					
					СценарийОбменаЧерезВнешнееСоединениеИлиВебСервисПриОшибкеЗагрузки();
					
				Иначе
					
					СценарийОбменаЧерезОбычныеКаналыСвязиПриОшибкеЗагрузки();
					
				КонецЕсли;
				
				Отказ = Ложь;
				
			ИначеЕсли Не ИнформацияСтатистикиАктуальна Тогда
				
				// если информация устарела (есть новый файл пакета данных), то обновляем ее
				ОбновитьИнформациюСопоставленияПолностью(Неопределено);
				
			Иначе
				
				РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтрокиТаблицыИнформацииСтатистики);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Выгрузка данных

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	ИдентификаторФайла = "";
	ИдентификаторОперации = "";
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыНаСервере(Отказ);
	
	Отказ = Ложь; // Позволяем выполнить переход на следующую страницу
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
									Объект.УзелИнформационнойБазы,
									"ВыгрузкаДанных",
									ДатаНачалаОперации,
									ДлительнаяОперацияСтрокаСообщенияОбОшибке
			);
			
		Иначе
			
			ОбменДаннымиВызовСервера.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(Объект.УзелИнформационнойБазы, ДатаНачалаОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_СтраницаИнформацииСтатистики_ПриПереходеДалее(Отказ)
	
	// Выполняем различные проверки
	СтруктураПроверок = Новый Структура("ПакетДанныхЗагруженПолностью, ВсеТаблицыОбъектовСопоставлены", Ложь, Ложь);
	
	ПолучитьСтруктуруПроверокПриЗавершенииСопоставления(СтруктураПроверок);
	
	Если Не СтруктураПроверок.ПакетДанныхЗагруженПолностью Тогда
		
		НСтрока = НСтр("ru = 'Не все данные загружены. Все равно продолжить?'");
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СтруктураПроверок.ВсеТаблицыОбъектовСопоставлены Тогда
		
		НСтрока = НСтр("ru = 'Не все объекты сопоставлены. Все равно продолжить?'");
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОкончанияСопоставления_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ПолучитьСостоянияОбменовДанными(РезультатЗагрузкиДанных, РезультатВыгрузкиДанных, Объект.УзелИнформационнойБазы);
	
	ОбновитьОтображениеЭлементовСтатусаОбменаДанными();
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника

&НаСервере
Процедура СценарийОбменаЧерезОбычныеКаналыСвязи()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала", "СтраницаНавигацииНачало",,, "СтраницаНачала_ПриПереходеДалее");
	
	// Загрузка данных
	ТаблицаПереходовНоваяСтрока(2, "СтраницаОжиданияЗагрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаОжиданияЗагрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаОжиданияЗагрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Сопоставление данных
	ТаблицаПереходовНоваяСтрока(5, "СтраницаИнформацииСтатистики", "СтраницаНавигацииПродолжение",,, "СтраницаИнформацииСтатистики_ПриПереходеДалее");
	
	// Выгрузка данных
	ТаблицаПереходовНоваяСтрока(6, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(9, "СтраницаОкончанияСопоставления", "СтраницаНавигацииОкончание",, "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезОбычныеКаналыСвязиПриОшибкеЗагрузки()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала", "СтраницаНавигацииНачало",,, "СтраницаНачала_ПриПереходеДалее");
	
	// Загрузка данных
	ТаблицаПереходовНоваяСтрока(2, "СтраницаОжиданияЗагрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаОжиданияЗагрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаОжиданияЗагрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Выгрузка данных
	ТаблицаПереходовНоваяСтрока(5, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(8, "СтраницаОкончанияСопоставления", "СтраницаНавигацииОкончание",, "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВнешнееСоединениеИлиВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	// Проверка подключения
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала",                      "СтраницаНавигацииНачало",,, "СтраницаНачала_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаОжиданияПроверкиПодключения", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияПроверкиПодключения_ОбработкаДлительнойОперации");
	
	// Загрузка данных
	ТаблицаПереходовНоваяСтрока(3, "СтраницаОжиданияЗагрузкиДанных",      "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаОжиданияЗагрузкиДанных",      "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "СтраницаОжиданияЗагрузкиДанных",      "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Сопоставление данных
	ТаблицаПереходовНоваяСтрока(6, "СтраницаИнформацииСтатистики",        "СтраницаНавигацииПродолжение",,, "СтраницаИнформацииСтатистики_ПриПереходеДалее");
	
	// Выгрузка данных
	ТаблицаПереходовНоваяСтрока(7, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(9, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(10, "СтраницаОкончанияСопоставления",      "СтраницаНавигацииОкончание",, "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВнешнееСоединениеИлиВебСервисПриОшибкеЗагрузки()
	
	ТаблицаПереходов.Очистить();
	
	// Проверка подключения
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала",                      "СтраницаНавигацииНачало",,, "СтраницаНачала_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаОжиданияПроверкиПодключения", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияПроверкиПодключения_ОбработкаДлительнойОперации");
	
	// Загрузка данных
	ТаблицаПереходовНоваяСтрока(3, "СтраницаОжиданияЗагрузкиДанных",      "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаОжиданияЗагрузкиДанных",      "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "СтраницаОжиданияЗагрузкиДанных",      "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияЗагрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Выгрузка данных
	ТаблицаПереходовНоваяСтрока(6, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "СтраницаОжиданияВыгрузкиДанных", "СтраницаНавигацииОжидание",,,,, Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(9, "СтраницаОкончанияСопоставления",      "СтраницаНавигацииОкончание",, "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры
