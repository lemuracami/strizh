
&НаКлиенте
Процедура ДатаРедактированияПриИзменении(Элемент)
	
	СписокСотрудниковАктуален = Ложь;
	
	Если ОбновитьСписок() Тогда
		СтараяДата = Объект.ДатаРедактирования;
	Иначе
		Объект.ДатаРедактирования = СтараяДата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалПриИзменении(Элемент)
	
	СписокСотрудниковАктуален = Ложь;
	
	ОбновитьСписок(Объект.тчГрафик.Количество());
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	ДатаРедактированияПриИзменении(Элементы.ДатаРедактирования);
КонецПроцедуры

&НаСервере
Функция ЕстьИзменения()
	Для Каждого стр Из Объект.тчГрафик Цикл
		Если стр.Водитель <> стр.СтарыйВодитель Или стр.Экспедитор <> стр.СтарыйЭкспедитор Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ОбновитьСписок(флСпрашивать = Истина)
	
	Если флСпрашивать Тогда
		Если ЕстьИзменения() Тогда
			Если Вопрос("Несохранные изменения будут удалены" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбновитьСписокНаСервере();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЗРейсов()
	
	ТЗРейсов.Очистить();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Транспорт КАК Транспорт,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.СформированныйРейс КАК СформированныйРейс
	            |ИЗ
	            |	РегистрСведений.СформированныйГрафикПоТранспорту.СрезПоследних(
	            |			&ДатаСреза,
	            |			Регион = &Регион
	            |				И ДатаРейса = &ДатаРейса) КАК СформированныйГрафикПоТранспортуСрезПоследних";
	Зап.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Зап.УстановитьПараметр("Регион", Объект.Терминал);
	Зап.УстановитьПараметр("ДатаРейса", Объект.ДатаРедактирования);
	
	Выборка = Зап.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТЗРейсов.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСписокНаСервере()
	
	Если Объект.Терминал.Пустая() Тогда
		Сообщить("Выберите терминал доставки!", СтатусСообщения.ОченьВажное);
		ЭтаФорма.ТекущийЭлемент = Элементы.Терминал;
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.тчГрафик.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущийТранспорт = Неопределено;
	Иначе
		ТекущиеДанные = Объект.тчГрафик.НайтиПоИдентификатору(ТекущаяСтрока);
		ТекущийТранспорт = ТекущиеДанные.Транспорт;
	КонецЕсли;
	
	ЗаполнитьТЗРейсов();
	
	РейсыНаДату = новаМестнаяДоставка.ПолучитьРейсыНаДату(Объект.ДатаРедактирования);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СформированныйГрафикПоТранспортуСрезПоследних.Транспорт КАК Транспорт,
	|	СформированныйГрафикПоТранспортуСрезПоследних.ТранспортВыйдетВРейс КАК ТранспортВыйдетВРейс,
	|	СформированныйГрафикПоТранспортуСрезПоследних.РольРейса КАК РольРейса,
	|	СформированныйГрафикПоТранспортуСрезПоследних.СменаРейса КАК СменаРейса
	|ПОМЕСТИТЬ ВТ_ДанныеПоПредыдущемуДнюМаршрутизации
	|ИЗ
	|	РегистрСведений.СформированныйГрафикПоТранспорту.СрезПоследних(&ПредыдущаяДатаРейсов, ДатаРейса = НАЧАЛОПЕРИОДА(&ПредыдущаяДатаРейсов, ДЕНЬ)) КАК СформированныйГрафикПоТранспортуСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"" "" КАК Т,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СформированныйГрафикПоТранспортуСрезПоследних.РольРейса, ЗНАЧЕНИЕ(Справочник.РолиТранспорта.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиТранспорта.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДополнительныеПараметрыТранспортаСрезПоследних.ОсновнаяРольТранспорта, ЗНАЧЕНИЕ(Справочник.РолиТранспорта.РольДоставки))
	|		ИНАЧЕ ЕСТЬNULL(СформированныйГрафикПоТранспортуСрезПоследних.РольРейса, ЗНАЧЕНИЕ(Справочник.РолиТранспорта.РольДоставки))
	|	КОНЕЦ КАК РольРейса,
	|	СформированныйГрафикПоТранспортуСрезПоследних.СменаРейса КАК Смена,
	|	ВыборкаФлагаДоступности.Транспорт КАК Транспорт,
	|	ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК Водитель,
	|	"" "" КАК Х,
	|	ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)) КАК Экспедитор,
	|	"" "" КАК Э,
	|	ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК СтарыйВодитель,
	|	ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)) КАК СтарыйЭкспедитор,
	|	ЕСТЬNULL(ВозможныеРейсы.НачалоПериода, &НачалоРейсаПоДефолту) КАК НачалоПериода,
	|	ЕСТЬNULL(СформированныйГрафикПоТранспортуСрезПоследних.ТранспортВыйдетВРейс, ЛОЖЬ) КАК ТранспортВыйдетВРейс
	|ПОМЕСТИТЬ ВТ_ДанныеГрафика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоступностьТранспорта.Транспорт КАК Транспорт,
	|		МАКСИМУМ(ДоступностьТранспорта.НачалоПериода) КАК НачалоПериода
	|	ИЗ
	|		РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	|	ГДЕ
	|		ДоступностьТранспорта.НачалоПериода <= &ДатаРедактирования
	|		И &УСЛОВИЕ_ТЕРМИНАЛ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоступностьТранспорта.Транспорт) КАК ВыборкаФлагаДоступности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	|		ПО ВыборкаФлагаДоступности.Транспорт = ДоступностьТранспорта.Транспорт
	|			И ВыборкаФлагаДоступности.НачалоПериода = ДоступностьТранспорта.НачалоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|		ПО (ВозможныеРейсы.Транспорт = ВыборкаФлагаДоступности.Транспорт)
	|			И (ВозможныеРейсы.НачалоПериода >= &ДатаРедактирования)
	|			И (ВозможныеРейсы.КонецПериода <= КОНЕЦПЕРИОДА(&ДатаРедактирования, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СформированныйГрафикПоТранспорту.СрезПоследних(, ДатаРейса = НАЧАЛОПЕРИОДА(&ДатаРедактирования, ДЕНЬ)) КАК СформированныйГрафикПоТранспортуСрезПоследних
	|		ПО ВыборкаФлагаДоступности.Транспорт = СформированныйГрафикПоТранспортуСрезПоследних.Транспорт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоПредыдущемуДнюМаршрутизации КАК ВТ_ДанныеПоПредыдущемуДнюМаршрутизации
	|		ПО ВыборкаФлагаДоступности.Транспорт = ВТ_ДанныеПоПредыдущемуДнюМаршрутизации.Транспорт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыТранспорта.СрезПоследних КАК ДополнительныеПараметрыТранспортаСрезПоследних
	|		ПО ВыборкаФлагаДоступности.Транспорт = ДополнительныеПараметрыТранспортаСрезПоследних.Транспорт
	|ГДЕ
	|	ДоступностьТранспорта.Доступен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаФлагаДоступности.Транспорт,
	|	ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)),
	|	ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)),
	|	ЕСТЬNULL(ВозможныеРейсы.НачалоПериода, &НачалоРейсаПоДефолту),
	|	ЕСТЬNULL(СформированныйГрафикПоТранспортуСрезПоследних.ТранспортВыйдетВРейс, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СформированныйГрафикПоТранспортуСрезПоследних.РольРейса, ЗНАЧЕНИЕ(Справочник.РолиТранспорта.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиТранспорта.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДополнительныеПараметрыТранспортаСрезПоследних.ОсновнаяРольТранспорта, ЗНАЧЕНИЕ(Справочник.РолиТранспорта.РольДоставки))
	|		ИНАЧЕ ЕСТЬNULL(СформированныйГрафикПоТранспортуСрезПоследних.РольРейса, ЗНАЧЕНИЕ(Справочник.РолиТранспорта.РольДоставки))
	|	КОНЕЦ,
	|	СформированныйГрафикПоТранспортуСрезПоследних.СменаРейса,
	|	ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)),
	|	ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеГрафика.Т КАК Т,
	|	ВТ_ДанныеГрафика.РольРейса КАК РольРейса,
	|	ВТ_ДанныеГрафика.Смена КАК СменаПредыдущегоРейса,
	|	ЕСТЬNULL(ЕСТЬNULL(ВТ_ДанныеГрафика.Смена, ДополнительныеПараметрыВодителейСрезПоследних.СменаМаршрутизации), ЗНАЧЕНИЕ(Справочник.Смены.Смена1)) КАК Смена,
	|	ВТ_ДанныеГрафика.Транспорт КАК Транспорт,
	|	ВТ_ДанныеГрафика.Водитель КАК Водитель,
	|	ВТ_ДанныеГрафика.Х КАК Х,
	|	ВТ_ДанныеГрафика.Экспедитор КАК Экспедитор,
	|	ВТ_ДанныеГрафика.Э КАК Э,
	|	ВТ_ДанныеГрафика.СтарыйВодитель КАК СтарыйВодитель,
	|	ВТ_ДанныеГрафика.СтарыйЭкспедитор КАК СтарыйЭкспедитор,
	|	ВТ_ДанныеГрафика.НачалоПериода КАК НачалоПериода,
	|	ВТ_ДанныеГрафика.ТранспортВыйдетВРейс КАК ТранспортВыйдетВРейс
	|ИЗ
	|	ВТ_ДанныеГрафика КАК ВТ_ДанныеГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыВодителей.СрезПоследних(&ДатаРедактирования, ) КАК ДополнительныеПараметрыВодителейСрезПоследних
	|		ПО ВТ_ДанныеГрафика.Водитель = ДополнительныеПараметрыВодителейСрезПоследних.Водитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДанныеГрафика.Транспорт.Наименование";

	Запрос.УстановитьПараметр("ДатаРедактирования", НачалоДня(Объект.ДатаРедактирования));
	Запрос.УстановитьПараметр("НачалоРейсаПоДефолту", НачалоДня(Объект.ДатаРедактирования) + 7 * 60 * 60);
	Запрос.УстановитьПараметр("ПредыдущаяДатаРейсов", КонецДня(Объект.ДатаРедактирования - 86400));
	
	// Михушкин --->> 
	//Если РольДоступна("РегиональныйЛогист") ИЛИ РольДоступна("Логист") Тогда		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УСЛОВИЕ_ТЕРМИНАЛ", "ДоступностьТранспорта.Транспорт.ТерминалДоставки = &ТерминалДоставки ИЛИ ДоступностьТранспорта.Транспорт.Родитель.ТерминалДоставки = &ТерминалДоставки");
		Запрос.УстановитьПараметр("ТерминалДоставки", Объект.Терминал);			
	//Иначе	
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УСЛОВИЕ_ТЕРМИНАЛ", "ИСТИНА");	
	//КонецЕсли;
	// <<--- Михушкин 

	РезультатЗапроса = Запрос.Выполнить();
	Объект.тчГрафик.Загрузить(РезультатЗапроса.Выгрузить());
	
	КоличествоРейсов = 0;
	Для Каждого стр Из Объект.тчГрафик Цикл
		стр.МожноРедактировать = РейсыНаДату.Найти(стр.Транспорт, "Транспорт") = Неопределено;
		Если стр.МожноРедактировать Тогда
			Если ЗначениеЗаполнено(стр.Водитель) Тогда
				стр.Х = "Х";
			КонецЕсли;
			Если ЗначениеЗаполнено(стр.Экспедитор) Тогда
				стр.Э = "Х";
			КонецЕсли;
			Если Стр.ТранспортВыйдетВРейс Тогда
				стр.Т = "V";
				КоличествоРейсов = КоличествоРейсов + 1;
			КонецеСли;
		Иначе
			Если Стр.ТранспортВыйдетВРейс Тогда
				стр.Т = "V";
				КоличествоРейсов = КоличествоРейсов + 1;
			КонецеСли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущийТранспорт <> Неопределено тогда
		СтрокиГрафика = Объект.тчГрафик.НайтиСтроки(Новый Структура("Транспорт", ТекущийТранспорт));
		Если СтрокиГрафика.Количество() Тогда
			Элементы.тчГрафик.ТекущаяСтрока = СтрокиГрафика[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники Тогда
		ЗаполнитьСотрудниковНаСервере();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Терминал = ПараметрыСеанса.ТерминалДоставки;
	Если Объект.Терминал.Пустая() Тогда
		Элементы.Терминал.Доступность = Истина;
	КонецЕсли;	
	Объект.ДатаРедактирования = ТекущаяДата() + 24 * 60 * 60;
	СтараяДата = Объект.ДатаРедактирования;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РолиТранспорта.Ссылка КАК Роль
	|ИЗ
	|	Справочник.РолиТранспорта КАК РолиТранспорта
	|ГДЕ
	|	РолиТранспорта.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Смены.Ссылка КАК Смена
	|ИЗ
	|	Справочник.Смены КАК Смены
	|ГДЕ
	|	Смены.ПометкаУдаления = ЛОЖЬ";
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	Элементы.тчГрафикРольРейса.СписокВыбора.ЗагрузитьЗначения(РезультатПакета[0].Выгрузить().ВыгрузитьКолонку("Роль"));
	Элементы.тчГрафикСмена.СписокВыбора.ЗагрузитьЗначения(РезультатПакета[1].Выгрузить().ВыгрузитьКолонку("Смена"));
	
	ОбновитьСписокНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВодителей(ТекущийВодитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Водители.Ссылка КАК Водитель
	|ИЗ
	|	Справочник.новаВодители КАК Водители
	|ГДЕ
	|	(НЕ Водители.Ссылка В (&Массив)
	|			ИЛИ Водители.Ссылка = &ТекущийВодитель)
	|	И Водители.ПометкаУдаления = ЛОЖЬ
	|	И Водители.ЭтоГруппа = ЛОЖЬ
	|	И Водители.Родитель <> &Уволенные
	|	И ИСТИНА";
	
	Если РольДоступна("РегиональныйЛогист") ИЛИ РольДоступна("Логист") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И Водители.Родитель.ТерминалДоставки = &ТерминалДоставки");
		Запрос.УстановитьПараметр("ТерминалДоставки", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТерминалДоставки"));
	КонецЕсли;
	Запрос.УстановитьПараметр("Массив", Объект.тчГрафик.Выгрузить(, "Водитель").ВыгрузитьКолонку("Водитель"));
	Запрос.УстановитьПараметр("ТекущийВодитель", ТекущийВодитель);
	Запрос.УстановитьПараметр("Уволенные", Константы.УволенныеВодители.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Водитель");
	
КонецФункции

&НаСервере
Функция ПолучитьИсключенияВодителей()
	
	Возврат Объект.тчГрафик.Выгрузить(, "Водитель").ВыгрузитьКолонку("Водитель");
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЭкспедиторов(ТекущийЭкспедитор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Экспедиторы.Ссылка КАК Экспедитор
	|ИЗ
	|	Справочник.новаЭкспедиторы КАК Экспедиторы
	|ГДЕ
	|	(НЕ Экспедиторы.Ссылка В (&Массив)
	|			ИЛИ Экспедиторы.Ссылка = &ТекущийЭкспедитор)
	|	И Экспедиторы.ПометкаУдаления = ЛОЖЬ
	|	И Экспедиторы.ЭтоГруппа = ЛОЖЬ
	|	И Экспедиторы.Родитель <> &Уволенные
	|	И ИСТИНА";
	
	Если РольДоступна("РегиональныйЛогист") ИЛИ РольДоступна("Логист") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И Экспедиторы.Родитель.ТерминалДоставки = &ТерминалДоставки");
		Запрос.УстановитьПараметр("ТерминалДоставки", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТерминалДоставки"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Массив", Объект.тчГрафик.Выгрузить(, "Экспедитор").ВыгрузитьКолонку("Экспедитор"));
	Запрос.УстановитьПараметр("ТекущийЭкспедитор", ТекущийЭкспедитор);
	Запрос.УстановитьПараметр("Уволенные", Константы.УволенныеЭкспедиторы.Получить());

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Экспедитор");
	
КонецФункции

&НаСервере
Функция ПолучитьИсключенияЭкспедиторов()
	
	Возврат Объект.тчГрафик.Выгрузить(, "Экспедитор").ВыгрузитьКолонку("Экспедитор");
	
КонецФункции


&НаКлиенте
Процедура тчГрафикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СменаПередИзменением = Неопределено;
	
	ТекущиеДанные = Элементы.тчГрафик.ТекущиеДанные;
	
	Если Поле.Имя = "тчГрафикХ" Тогда
		ТекущиеДанные.Водитель = Неопределено;
		ТекущиеДанные.Х = "";
	ИначеЕсли Поле.Имя = "тчГрафикЭ" Тогда
		ТекущиеДанные.Экспедитор = Неопределено;
		ТекущиеДанные.Э = "";
	ИначеЕсли Поле.Имя = "тчГрафикТ" Тогда
		Если Не ТекущиеДанные.МожноРедактировать Тогда
			Возврат;
		КонецЕсли;
		
	    ТекущиеДанные.ТранспортВыйдетВРейс = Не ТекущиеДанные.ТранспортВыйдетВРейс;
		Если ТекущиеДанные.ТранспортВыйдетВРейс Тогда
			ТекущиеДанные.Т = "V";
			КоличествоРейсов = КоличествоРейсов + 1;
		Иначе
			ТекущиеДанные.Т = "";
			КоличествоРейсов = КоличествоРейсов - 1;
		КонецЕсли;	
		
	ИначеЕсли Поле.Имя = "тчГрафикРольРейса" Тогда
		
		Если Не ТекущиеДанные.МожноРедактировать Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "тчГрафикВодитель" Тогда
		
		ТекущееЗначение = ТекущиеДанные.Водитель;
		
		//СписокЗначений = ПолучитьСписокВодителей(ТекущееЗначение);
		
		//ПараметрыФормы = Новый Структура("Список,ТекущийЭлемент,ЗаголовокФормы,ЗаголовокСсылки", СписокЗначений, ТекущееЗначение, "Выбор водителя", "Водитель");
		ПараметрыФормы = Новый Структура("ДатаРедактирования,Терминал,ИмяСправочника,ТекущийЭлемент,Исключения,ЗаголовокФормы,ЗаголовокСсылки", Объект.ДатаРедактирования, Объект.Терминал, "новаВодители", ТекущееЗначение, ПолучитьИсключенияВодителей(), "Водители", "Водитель");
		ТекЗначение = ОткрытьФормуМодально("Обработка.РедактированиеГрафикаРейсов.Форма.ФормаВыбора", ПараметрыФормы);
		
		Если ТекЗначение <> Неопределено Тогда
			ТекущиеДанные.Водитель = ТекЗначение;
			ТекущиеДанные.Х = "Х";
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "тчГрафикЭкспедитор" Тогда
		
		ТекущееЗначение = ТекущиеДанные.Экспедитор;
		
		//СписокЗначений = ПолучитьСписокЭкспедиторов(ТекущееЗначение);
		
		//ПараметрыФормы = Новый Структура("Список,ТекущийЭлемент,ЗаголовокФормы,ЗаголовокСсылки", СписокЗначений, ТекущееЗначение, "Выбор экспедитора", "Экспедитор");
		ПараметрыФормы = Новый Структура("ДатаРедактирования,Терминал,ИмяСправочника,ТекущийЭлемент,Исключения,ЗаголовокФормы,ЗаголовокСсылки", Объект.ДатаРедактирования, Объект.Терминал, "новаЭкспедиторы", ТекущееЗначение, ПолучитьИсключенияЭкспедиторов(), "Экспедиторы", "Экспедитор");
		ТекЗначение = ОткрытьФормуМодально("Обработка.РедактированиеГрафикаРейсов.Форма.ФормаВыбора", ПараметрыФормы);
		
		Если ТекЗначение <> Неопределено Тогда
			ТекущиеДанные.Экспедитор = ТекЗначение;
			ТекущиеДанные.Э = "Х";
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "тчГрафикСмена" Тогда
		СменаПередИзменением = ТекущиеДанные.Смена;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаИзмененияСмены(Знач ДокРейс)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", ДокРейс);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""У данного рейса зафиксирована маршрутизация, изменение смены невозможно."" КАК Ошибка
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|ГДЕ
	|	РейсЗаказы.Ссылка = &Рейс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""К рейсу привязаны полигоны и/или индивидуально маршрутизированые заказы, изменение смены невозможно.""
	|ИЗ
	|	РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
	|ГДЕ
	|	ПолигоныИКатегорииЗаказовДляРейсов.Рейс = &Рейс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""К рейсу привязаны полигоны и/или индивидуально маршрутизированые заказы, изменение смены невозможно.""
	|ИЗ
	|	РегистрСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СрезПоследних КАК ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних
	|ГДЕ
	|	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс = &Рейс";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ошибка;
	КонецЕсли;

	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаИзмененияСменыНаСервере(Знач ТЗРейсов, Знач Транспорт)
	
	НайСтроки = ТЗРейсов.НайтиСтроки(Новый Структура("Транспорт", Транспорт));
	Если НайСтроки.Количество() Тогда
		НайСтрока = НайСтроки[0];
		ДокРейс = НайСтрока.СформированныйРейс;
		Если ЗначениеЗаполнено(ДокРейс) Тогда
			Возврат ПроверкаИзмененияСмены(ДокРейс);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура тчГрафикПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если СменаПередИзменением = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.тчГрафик.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверкаИзмененияСменыНаСервере(ТЗРейсов, ТекущиеДанные.Транспорт);
	Если РезультатПроверки <> "" Тогда
		ТекущиеДанные.Смена = СменаПередИзменением;
		ПоказатьПредупреждение(, РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьГрафикНаСервере()
	
	//+Степанов Задача № 3459
	Если Не УчетКонтроляВремениСервер.ПроверитьСостояниеСобытия(ПредопределенноеЗначение("Справочник.СобытияКонтроляВремени.ПМФормированиеРейсов"),,Объект.Терминал) Тогда		
		Сообщить("В данный момент уже происходит формирование рейсов!");		
		Возврат Ложь;	
	Конецесли;
	//-Степанов Задача № 3459
	
	НаборЗаписей = РегистрыСведений.новаКалендарьВозможныхРейсов.СоздатьНаборЗаписей();
	ЕстьИзменения = Ложь;
	
	ЗаполнитьТЗРейсов();
	//пока в виде костыля
	
	ТекВр = ТекущаяДата();
	НаборЗаписейПоТранспорту = РегистрыСведений.СформированныйГрафикПоТранспорту.СоздатьНаборЗаписей();
	НаборЗаписейПоТранспорту.Отбор.Период.Установить(ТекВр);
	МассивЗаписанныхДанных = Новый Массив;
	//Асеев 12.03.2021 (Задача № 4491)>>>
	//НачатьТранзакцию();
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	//Асеев 12.03.2021 (Задача № 4491)<<<
	
	КонецПериода = Объект.ДатаРедактирования + 23 * 60 * 60;
	
	Для Каждого стр Из Объект.тчГрафик Цикл
		Если стр.Водитель <> стр.СтарыйВодитель Или стр.Экспедитор <> стр.СтарыйЭкспедитор Тогда
			
			НаборЗаписей.Отбор.Транспорт.Установить(стр.Транспорт);
			НаборЗаписей.Отбор.Водитель.Установить(стр.СтарыйВодитель);
			НаборЗаписей.Отбор.НачалоПериода.Установить(стр.НачалоПериода);
			Если ЗначениеЗаполнено(стр.СтарыйВодитель) Тогда
				НаборЗаписей.Прочитать();
				Если стр.Водитель <> стр.СтарыйВодитель Тогда
					НаборЗаписей.Удалить(0);
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Отбор.Водитель.Установить(стр.Водитель);
			
			Если ЗначениеЗаполнено(стр.Водитель) Тогда
				Если НаборЗаписей.Количество() = 0 Тогда
					Запись = НаборЗаписей.Добавить();
				Иначе
					Запись = НаборЗаписей[0];
				КонецЕсли;
				Запись.Транспорт = стр.Транспорт;
				Запись.Водитель = стр.Водитель;
				Запись.НачалоПериода = стр.НачалоПериода;
				Запись.Экспедитор = стр.Экспедитор;
				Запись.КонецПериода = КонецПериода;
				НаборЗаписей.Записать();
			КонецЕсли;

			ЕстьИзменения = Истина;
			
			//Сообщить(стр.Транспорт);
		КонецЕсли;
		
		Если МассивЗаписанныхДанных.Найти(Стр.Транспорт) = Неопределено Тогда
			Нов = НаборЗаписейПоТранспорту.Добавить();
			Нов.Период = ТекВр;
			Нов.ДатаРейса = Объект.ДатаРедактирования;
			Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Нов.Транспорт = Стр.Транспорт;
			Нов.ТранспортВыйдетВРейс = Стр.ТранспортВыйдетВРейс;
			Нов.Водитель = стр.Водитель;
			Нов.Экспедитор = стр.Экспедитор;
			Нов.Регион = Объект.Терминал;
			Нов.РольРейса = Стр.РольРейса;
			
			// Якурнов 18.10.2018 15:51:55  
			Нов.СменаРейса = ?(Стр.Смена = Справочники.Смены.ПустаяСсылка(), Справочники.Смены.Смена1, Стр.Смена);			
			
			НайСтроки = ТЗРейсов.НайтиСтроки(Новый Структура("Транспорт", Стр.Транспорт));
			Если НайСтроки.Количество() Тогда
				НайСтрока = НайСтроки[0];
				Нов.СформированныйРейс = НайСтрока.СформированныйРейс;
				
				//CeHbKA #2616 09.08.2019
				
				Если НЕ Нов.СформированныйРейс.Пустая() Тогда
					
					ДокРейс = Нов.СформированныйРейс.ПолучитьОбъект();
					
					Если ДокРейс.СменаРейса <> Нов.СменаРейса Тогда
						ДокРейс.СменаРейса = Нов.СменаРейса;
						Попытка				
							ДокРейс.Записать();
							Сообщить("Для рейса "+Стр.Транспорт+" поменялась смена, необходимо обновить данные в ПМ");
						Исключение				
							Сообщить("Не удалось изменить смену в рейсе "+Стр.Транспорт+" "+ДокРейс.Ссылка);
						КонецПопытки; 
						
					КонецЕсли; 
					
					ДокРейс = Неопределено;
					
				КонецЕсли; 
				//CeHbKA #2616 09.08.2019
				
			КонецЕсли;
			
			МассивЗаписанныхДанных.Добавить(Стр.Транспорт);
		КонецеСли;	
	КонецЦикла;
	
	НаборЗаписейПоТранспорту.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ОбновитьСписокНаСервере();
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьГрафик(Команда)
	
	Если ЗаписатьГрафикНаСервере() Тогда
		Оповестить("ОбновленКалендарьВозможныхРейсов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьИзменения() Тогда
		Отказ = Вопрос("Изменения не сохранены" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудниковНаСервере(ТекущийСотрудник = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.ДатаРедактирования) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаПланирования", Объект.ДатаРедактирования);
		Запрос.УстановитьПараметр("Терминал", Объект.Терминал);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровоеПеремещениеРаботниковОрганизацийСотрудники.ФизЛицо КАК ФизЛицо,
		|	КадровоеПеремещениеРаботниковОрганизацийСотрудники.ОсновнаяРольСотрудникаСтарая КАК РольДо,
		|	КадровоеПеремещениеРаботниковОрганизацийСотрудники.ОсновнаяРольСотрудника КАК РольПосле,
		|	КадровоеПеремещениеРаботниковОрганизацийСотрудники.ОсновноеНачислениеСтарое КАК ТарифДо,
		|	КадровоеПеремещениеРаботниковОрганизацийСотрудники.ОсновноеНачисление КАК ТарифПосле,
		|	КадровоеПеремещениеРаботниковОрганизацийСотрудники.Ссылка КАК ДокументПеремещения
		|ИЗ
		|	Документ.КадровоеПеремещениеРаботниковОрганизаций.Сотрудники КАК КадровоеПеремещениеРаботниковОрганизацийСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеРаботниковОрганизаций КАК КадровоеПеремещениеРаботниковОрганизаций
		|		ПО (КадровоеПеремещениеРаботниковОрганизаций.ДатаПланирования = &ДатаПланирования)
		|			И (КадровоеПеремещениеРаботниковОрганизаций.Терминал = &Терминал)
		|			И (КадровоеПеремещениеРаботниковОрганизаций.Проведен)
		|			И КадровоеПеремещениеРаботниковОрганизацийСотрудники.Ссылка = КадровоеПеремещениеРаботниковОрганизаций.Ссылка
		|			И (КадровоеПеремещениеРаботниковОрганизацийСотрудники.ДатаПеремещения = &ДатаПланирования)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КадровоеПеремещениеРаботниковОрганизацийСотрудники.ФизЛицо.Наименование";
		
		Объект.Сотрудники.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Если ТекущийСотрудник <> Неопределено Тогда
			ТекущиеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизЛицо", ТекущийСотрудник));
			Если ТекущиеСтроки.Количество() Тогда
				Элементы.Сотрудники.ТекущаяСтрока = ТекущиеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.Сотрудники.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПланирования", Объект.ДатаРедактирования);
	Запрос.УстановитьПараметр("Терминал", Объект.Терминал);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
	|ГДЕ
	|	ЗакрытыеЗаказы.Период = &ДатаПланирования
	|	И ЗакрытыеЗаказы.ТерминалДоставки = &Терминал";
	
	РазрешеноРедактированиеСотрудников = Запрос.Выполнить().Пустой();
	Элементы.СотрудникиДобавитьСотрудника.Доступность = РазрешеноРедактированиеСотрудников;
	Элементы.СотрудникиИзменитьСотрудника.Доступность = РазрешеноРедактированиеСотрудников;
	Элементы.СотрудникиУдалитьСотрудника.Доступность = РазрешеноРедактированиеСотрудников;
	
	СписокСотрудниковАктуален = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	
	ЗаполнитьСотрудниковНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормыДобавленияСотрудника()
	ВыбранныеФизЛица = Новый СписокЗначений;
	ВыбранныеФизЛица.ЗагрузитьЗначения(Объект.Сотрудники.Выгрузить(, "ФизЛицо").ВыгрузитьКолонку("ФизЛицо"));
	Возврат Новый Структура("ДатаРедактирования,Терминал,ВыбранныеФизЛица,ЗаголовокФормы", Объект.ДатаРедактирования, Объект.Терминал, ВыбранныеФизЛица, "Добавление сотрудника");
КонецФункции

&НаКлиенте
Функция УстановитьДоступностьЭлементов(ЗначениеДоступности)
	
	Элементы.ДатаРедактирования.Доступность = ЗначениеДоступности;
	Элементы.ГруппаСтраницы.Доступность = ЗначениеДоступности;
	Если ЗначениеДоступности Тогда
		Элементы.Терминал.Доступность = ДоступностьТерминала;
	Иначе
		ДоступностьТерминала = Элементы.Терминал.Доступность;
		Элементы.Терминал.Доступность = Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСотрудника(Команда)
	
	УстановитьДоступностьЭлементов(Ложь);
	
	ПараметрыФормы = ПолучитьПараметрыФормыДобавленияСотрудника();
	НовыйСотрудник = ОткрытьФормуМодально("Обработка.РедактированиеГрафикаРейсов.Форма.ФормаДобавленияСотрудника", ПараметрыФормы);
	Если НовыйСотрудник <> Неопределено Тогда
		ЗаполнитьСотрудниковНаСервере(НовыйСотрудник);
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСотрудника()
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(Ложь);

	ПараметрыФормы = Новый Структура("ДатаРедактирования,Терминал,ДокументПеремещения,ЗаголовокФормы", Объект.ДатаРедактирования, Объект.Терминал, ТекущиеДанные.ДокументПеремещения, "Изменение сотрудника");
	НовыйСотрудник = ОткрытьФормуМодально("Обработка.РедактированиеГрафикаРейсов.Форма.ФормаДобавленияСотрудника", ПараметрыФормы);
	Если НовыйСотрудник <> Неопределено Тогда
		ЗаполнитьСотрудниковНаСервере(НовыйСотрудник);
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСотрудника(Команда)
	
	ИзменениеСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если РазрешеноРедактированиеСотрудников Тогда
		ИзменениеСотрудника();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСотрудникаНаСервере(ДокументПеремещения)
	
	Док = ДокументПеремещения.ПолучитьОбъект();
	Док.УстановитьПометкуУдаления(Истина);
	
	ЗаполнитьСотрудниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Удалить сотрудника?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСотрудникаНаСервере(ТекущиеДанные.ДокументПеремещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники Тогда
		Если Не СписокСотрудниковАктуален Тогда
			ЗаполнитьСотрудниковНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПланированиеСотрудников(Команда)
	
	ОткрытьФорму("Отчет.ПланированиеСотрудников.ФормаОбъекта");
	
КонецПроцедуры
