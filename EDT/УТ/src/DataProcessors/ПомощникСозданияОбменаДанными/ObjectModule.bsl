Перем ПолеСтрокаСообщенияОбОшибке; // Строка - переменная содержит строку с сообщением об ошибке

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Выполняет действия при создании нового обмена данными:
// - создает или обновляет узлы текущего плана обмена
// - загружает правила конвертации данными из макета текущего плана обмена (если НЕ РИБ)
// - загружает правила регистрации данными из макета текущего плана обмена
// - загружает настройки транспорта сообщений обмена
// - устанавливает значение константы префикса информационной базы (если не задано)
// - выполняет регистрацию всех данных на текущем узле плана обмена с учетом правил регистрации объектов
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
// 
Процедура ВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ,
	НастройкаОтборовНаУзле,
	ЗначенияПоУмолчаниюНаУзле,
	РегистрироватьДанныеДляВыгрузки = Истина) Экспорт
	
	КодЭтогоУзла = ПолучитьКодУзлаЭтойБазы(ПрефиксИнформационнойБазыИсточника);
	КодНовогоУзла = ?(ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными", КодНовогоУзлаВторойБазы, ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(ПрефиксИнформационнойБазыПриемника));
	
	ВыполнитьДействияПоНастройкеОбменаДанными(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла, РегистрироватьДанныеДляВыгрузки);
	
КонецПроцедуры

Процедура ВыполнитьДействияПоНастройкеНовогоОбменаДаннымиВСервисе(Отказ,
	НастройкаОтборовНаУзле,
	ЗначенияПоУмолчаниюНаУзле,
	Знач КодЭтогоУзла,
	Знач КодНовогоУзла) Экспорт
	
	НастройкаОтборовНаУзле    = ПолучитьЗначенияНастройкиОтборов(НастройкаОтборовНаУзле);
	ЗначенияПоУмолчаниюНаУзле = ПолучитьЗначенияНастройкиОтборов(ЗначенияПоУмолчаниюНаУзле);
	
	ВыполнитьДействияПоНастройкеОбменаДанными(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла);
	
КонецПроцедуры

Процедура ВыполнитьДействияПоНастройкеНовогоОбменаДаннымиЧерезВебСервисВДвухБазах(Отказ,
	НастройкаОтборовНаУзле,
	ДлительнаяОперация,
	ИдентификаторОперацииСозданияОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПоУмолчаниюНаУзле = Новый Структура;
	
	ПолеСтрокаСообщенияОбОшибке = Неопределено;
	ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	ИспользоватьПараметрыТранспортаCOM = Ложь;
	
	КодЭтогоУзла = ПолучитьКодУзлаЭтойБазы(ПрефиксИнформационнойБазыИсточника);
	КодНовогоУзла = ПолучитьКодУзлаКорреспондента();
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ЭтотОбъект);
	
	Если ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения);
		
	ИначеЕсли ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения);
		
	Иначе
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения);
		
	КонецЕсли;
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// создаем новый узел
		СоздатьОбновитьУзлыПланаОбмена(НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла);
		
		// устанавливаем признак начальной выгрузки данных для узла
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
		
		// загружаем настройки транспорта сообщений
		ОбновитьНастройкиТранспортаСообщенийОбмена();
		
		// обновляем значение константы префикса ИБ
		Если Не ПрефиксИнформационнойБазыИсточникаУстановлен Тогда
			
			ОбновитьЗначениеКонстантыПрефиксаИнформационнойБазы();
			
		КонецЕсли;
		
		// Выгружаем параметры помощника в строку
		СтрокаПараметровМастераXML = ВыполнитьВыгрузкуПараметровМастера(Отказ);
		
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'При создании настройки обмена во второй информационной базе возникли ошибки.'");
		КонецЕсли;
		
		Если ВерсияКорреспондента_2_1_1_7 Тогда
			
			Сериализатор = Новый СериализаторXDTO(WSПрокси.ФабрикаXDTO);
			
			WSПрокси.CreateExchange(ИмяПланаОбмена, 
							СтрокаПараметровМастераXML, 
							Сериализатор.ЗаписатьXDTO(НастройкаОтборовНаУзле), 
							Сериализатор.ЗаписатьXDTO(ЗначенияПоУмолчаниюНаУзле)
			);
			
		ИначеЕсли ВерсияКорреспондента_2_0_1_6 Тогда
			
			Сериализатор = Новый СериализаторXDTO(WSПрокси.ФабрикаXDTO);
			
			WSПрокси.CreateExchange(ИмяПланаОбмена, 
							СтрокаПараметровМастераXML, 
							Сериализатор.ЗаписатьXDTO(НастройкаОтборовНаУзле), 
							Сериализатор.ЗаписатьXDTO(ЗначенияПоУмолчаниюНаУзле)
			);
			
		Иначе
			
			WSПрокси.CreateExchange(ИмяПланаОбмена, 
							СтрокаПараметровМастераXML, 
							ЗначениеВСтрокуВнутр(НастройкаОтборовНаУзле), 
							ЗначениеВСтрокуВнутр(ЗначенияПоУмолчаниюНаУзле)
			);
			
		КонецЕсли;
		
	Исключение
		
		СообщитьИнформациюОбОшибке(ИнформацияОбОшибке(), Отказ);
		
	КонецПопытки;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Возврат;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	// обновляем повторно используемые значения МРО
	ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
	
	// выполняем регистрацию изменений только справочников и ПВХ
	ЗарегистрироватьИзмененияСправочников(Отказ);
	
	// выполняем регистрацию изменений во второй ИБ
	WSПрокси.RegisterOnlyCatalogData(
			ИмяПланаОбмена,
			ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена),
			ДлительнаяОперация,
			ИдентификаторОперацииСозданияОбменаДанными
	);
	
КонецПроцедуры

Процедура ВыполнитьДействияПоНастройкеНовогоОбменаДаннымиЧерезВнешнееСоединение(Отказ,
	НастройкаОтборовНаУзле,
	ЗначенияПоУмолчаниюНаУзле,
	НастройкаОтборовНаУзлеБазыКорреспондента,
	ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента) Экспорт
	
	ПолеСтрокаСообщенияОбОшибке = Неопределено;
	ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.COM;
	ИспользоватьПараметрыТранспортаCOM = Истина;
	
	КодЭтогоУзла = ПолучитьКодУзлаЭтойБазы(ПрефиксИнформационнойБазыИсточника);
	КодНовогоУзла = ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(ПрефиксИнформационнойБазыПриемника);
	
	// Создаем внешнее соединение
	ВнешнееСоединение = ОбменДаннымиСервер.УстановитьВнешнееСоединение(ЭтотОбъект, ПолеСтрокаСообщенияОбОшибке);
	
	Если ВнешнееСоединение = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		// создаем новый узел
		СоздатьОбновитьУзлыПланаОбмена(НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла);
		
		// устанавливаем признак начальной выгрузки данных для узла
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
		
		// загружаем настройки транспорта сообщений
		ОбновитьНастройкиТранспортаСообщенийОбменаCOM();
		
		// обновляем значение константы префикса ИБ
		Если Не ПрефиксИнформационнойБазыИсточникаУстановлен Тогда
			
			ОбновитьЗначениеКонстантыПрефиксаИнформационнойБазы();
			
		КонецЕсли;
		
		// Выгружаем параметры помощника в строку
		СтрокаПараметровМастераXML = ВыполнитьВыгрузкуПараметровМастера(Отказ);
		
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'При создании настройки обмена во второй информационной базе возникли ошибки.'");
		КонецЕсли;
		
		// Получаем обработку помощника настройки обмена во второй базе
		ПомощникСозданияОбменаДанными = ВнешнееСоединение.Обработки.ПомощникСозданияОбменаДанными.Создать();
		ПомощникСозданияОбменаДанными.ИмяПланаОбмена = ИмяПланаОбмена;
		
		// Загружаем параметры помощника из строки в обработку помощника
		ПомощникСозданияОбменаДанными.ВнешнееСоединениеВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаПараметровМастераXML);
		
		Если Отказ Тогда
			Сообщение = НСтр("ru = 'При создании настройки обмена во второй информационной базе возникли ошибки: %1'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПомощникСозданияОбменаДанными.СтрокаСообщенияОбОшибке());
			ВызватьИсключение Сообщение;
		КонецЕсли;
		
		// Выполняем создание настройки обмена во второй ИБ через внешнее соединение
		Если ВерсияКорреспондента_2_1_1_7 ИЛИ ВерсияКорреспондента_2_0_1_6 Тогда
			
			ПомощникСозданияОбменаДанными.ВнешнееСоединениеВыполнитьДействияПоНастройкеНовогоОбменаДанными_2_0_1_6(Отказ,
														ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкаОтборовНаУзлеБазыКорреспондента),
														ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента),
														ПрефиксИнформационнойБазыПриемникаУстановлен,
														ПрефиксИнформационнойБазыПриемника
			);
			
		Иначе
			
			ПомощникСозданияОбменаДанными.ВнешнееСоединениеВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ,
														ЗначениеВСтрокуВнутр(НастройкаОтборовНаУзлеБазыКорреспондента),
														ЗначениеВСтрокуВнутр(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента),
														ПрефиксИнформационнойБазыПриемникаУстановлен,
														ПрефиксИнформационнойБазыПриемника
			);
			
		КонецЕсли;
		
		Если Отказ Тогда
			Сообщение = НСтр("ru = 'При создании настройки обмена во второй информационной базе возникли ошибки: %1'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПомощникСозданияОбменаДанными.СтрокаСообщенияОбОшибке());
			ВызватьИсключение Сообщение;
		КонецЕсли;
		
	Исключение
		
		СообщитьИнформациюОбОшибке(ИнформацияОбОшибке(), Отказ);
		
	КонецПопытки;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Возврат;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	// обновляем повторно используемые значения МРО
	ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
	
	// выполняем регистрацию изменений на узле плана обмена
	ЗарегистрироватьИзмененияДляОбмена(Отказ);
	
	// выполняем регистрацию изменений во второй ИБ через внешнее соединение
	ПомощникСозданияОбменаДанными.ВнешнееСоединениеЗарегистрироватьИзмененияДляОбмена();
	
КонецПроцедуры

Процедура ОбновитьНастройкиОбменаДанными(Отказ,
	ЗначенияПоУмолчаниюНаУзле,
	ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента,
	ДлительнаяОперация,
	ИдентификаторОперацииСозданияОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолеСтрокаСообщенияОбОшибке = Неопределено;
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ЭтотОбъект);
	
	Если ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения);
		
	ИначеЕсли ВерсияКорреспондента_2_0_1_6 Тогда
			
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения);
		
	Иначе
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения);
		
	КонецЕсли;
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// обновляем настройки для узла
		УзелИнформационнойБазыОбъект = УзелИнформационнойБазы.ПолучитьОбъект();
		
		// установка значений по умолчанию 
		ОбменДаннымиСобытия.УстановитьЗначенияПоУмолчаниюНаУзле(УзелИнформационнойБазыОбъект, ЗначенияПоУмолчаниюНаУзле);
		
		УзелИнформационнойБазыОбъект.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
		УзелИнформационнойБазыОбъект.Записать();
		
		// устанавливаем признак начальной выгрузки данных для узла
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
		
		Если ВерсияКорреспондента_2_1_1_7 ИЛИ ВерсияКорреспондента_2_0_1_6 Тогда
			
			Сериализатор = Новый СериализаторXDTO(WSПрокси.ФабрикаXDTO);
			
			WSПрокси.UpdateExchange(
								ИмяПланаОбмена,
								ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена),
								Сериализатор.ЗаписатьXDTO(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента)
			);
		Иначе
			
			WSПрокси.UpdateExchange(
								ИмяПланаОбмена,
								ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена),
								ЗначениеВСтрокуВнутр(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента)
			);
		КонецЕсли;
		
	Исключение
		
		СообщитьИнформациюОбОшибке(ИнформацияОбОшибке(), Отказ);
		
	КонецПопытки;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Возврат;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	// выполняем регистрацию изменений всех данных, кроме справочников и ПВХ
	ЗарегистрироватьИзмененияВсехДанныхКромеСправочников(Отказ);
	
	// выполняем регистрацию изменений во второй ИБ
	WSПрокси.RegisterAllDataExceptCatalogs(
			ИмяПланаОбмена,
			ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена),
			ДлительнаяОперация,
			ИдентификаторОперацииСозданияОбменаДанными
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы через внешнее соединение

Процедура ВнешнееСоединениеВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ, 
									НастройкаОтборовНаУзлеБазыКорреспондента, 
									ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, 
									ПрефиксИнформационнойБазыУстановлен, 
									ПрефиксИнформационнойБазы
	) Экспорт
	
	НастройкаОтборовНаУзле    = ПолучитьЗначенияНастройкиОтборов(ЗначениеИзСтрокиВнутр(НастройкаОтборовНаУзлеБазыКорреспондента));
	ЗначенияПоУмолчаниюНаУзле = ПолучитьЗначенияНастройкиОтборов(ЗначениеИзСтрокиВнутр(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента));
	
	ПолеСтрокаСообщенияОбОшибке = Неопределено;
	ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными";
	
	КодЭтогоУзла = ПолучитьКодУзлаЭтойБазы(ПрефиксИнформационнойБазыИсточника);
	КодНовогоУзла = КодНовогоУзлаВторойБазы;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменДанными") = Ложь Тогда
			
			Константы.ИспользоватьОбменДанными.Установить(Истина);
			
		КонецЕсли;
		
		// создаем новый узел
		СоздатьОбновитьУзлыПланаОбмена(НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла);
		
		// устанавливаем признак начальной выгрузки данных для узла
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
		
		// загружаем настройки транспорта сообщений
		ОбновитьНастройкиТранспортаСообщенийОбменаCOM();
		
		// обновляем значение константы префикса ИБ
		Если Не ПрефиксИнформационнойБазыУстановлен Тогда
			
			ЗначениеДоОбновления = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
			
			Если ЗначениеДоОбновления <> ПрефиксИнформационнойБазы Тогда
				
				Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СокрЛП(ПрефиксИнформационнойБазы));
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		СообщитьИнформациюОбОшибке(ИнформацияОбОшибке(), Отказ);
		
	КонецПопытки;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Возврат;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнешнееСоединениеВыполнитьДействияПоНастройкеНовогоОбменаДанными_2_0_1_6(Отказ, 
									НастройкаОтборовНаУзлеБазыКорреспондента, 
									ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, 
									ПрефиксИнформационнойБазыУстановлен, 
									ПрефиксИнформационнойБазы
	) Экспорт
	
	НастройкаОтборовНаУзле    = ПолучитьЗначенияНастройкиОтборов(ОбщегоНазначения.ЗначениеИзСтрокиXML(НастройкаОтборовНаУзлеБазыКорреспондента));
	ЗначенияПоУмолчаниюНаУзле = ПолучитьЗначенияНастройкиОтборов(ОбщегоНазначения.ЗначениеИзСтрокиXML(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента));
	
	ПолеСтрокаСообщенияОбОшибке = Неопределено;
	ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными";
	
	КодЭтогоУзла = ПолучитьКодУзлаЭтойБазы(ПрефиксИнформационнойБазыИсточника);
	КодНовогоУзла = КодНовогоУзлаВторойБазы;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменДанными") = Ложь Тогда
			
			Константы.ИспользоватьОбменДанными.Установить(Истина);
			
		КонецЕсли;
		
		// создаем новый узел
		СоздатьОбновитьУзлыПланаОбмена(НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла);
		
		// устанавливаем признак начальной выгрузки данных для узла
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
		
		// загружаем настройки транспорта сообщений
		ОбновитьНастройкиТранспортаСообщенийОбменаCOM();
		
		// обновляем значение константы префикса ИБ
		Если Не ПрефиксИнформационнойБазыУстановлен Тогда
			
			ЗначениеДоОбновления = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
			
			Если ЗначениеДоОбновления <> ПрефиксИнформационнойБазы Тогда
				
				Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СокрЛП(ПрефиксИнформационнойБазы));
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		СообщитьИнформациюОбОшибке(ИнформацияОбОшибке(), Отказ);
		
	КонецПопытки;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Возврат;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнешнееСоединениеЗарегистрироватьИзмененияДляОбмена() Экспорт
	
	// обновляем повторно используемые значения МРО
	ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
	
	// выполняем регистрацию изменений на узле плана обмена
	ЗарегистрироватьИзмененияДляОбмена(Ложь);
	
КонецПроцедуры

Процедура ВнешнееСоединениеВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаXML) Экспорт
	
	ВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаXML);
	
КонецПроцедуры

Процедура ВнешнееСоединениеОбновитьНастройкиОбменаДанными(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	ЗначенияПоУмолчаниюНаУзле = ПолучитьЗначенияНастройкиОтборов(ЗначенияПоУмолчаниюНаУзле);
	
	НачатьТранзакцию();
	Попытка
		
		// обновляем настройки для узла
		УзелИнформационнойБазыОбъект = УзелИнформационнойБазы.ПолучитьОбъект();
		
		// установка значений по умолчанию 
		ОбменДаннымиСобытия.УстановитьЗначенияПоУмолчаниюНаУзле(УзелИнформационнойБазыОбъект, ЗначенияПоУмолчаниюНаУзле);
		
		УзелИнформационнойБазыОбъект.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
		УзелИнформационнойБазыОбъект.Записать();
		
		// устанавливаем признак начальной выгрузки данных для узла
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

//

Процедура ВебСервисВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	НастройкаОтборовНаУзле    = ПолучитьЗначенияНастройкиОтборов(НастройкаОтборовНаУзле);
	ЗначенияПоУмолчаниюНаУзле = ПолучитьЗначенияНастройкиОтборов(ЗначенияПоУмолчаниюНаУзле);
	
	ВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ,
													НастройкаОтборовНаУзле,
													ЗначенияПоУмолчаниюНаУзле,
													Ложь
	);
	
КонецПроцедуры

// Выполняет выгрузку параметров помощника во временное хранилище для продолжения настройки обмена во второй базе
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
//  АдресВременногоХранилища – Строка – при успешной выгрузке xml-файла с настройками
//                                      в эту переменную записывается адрес временного хранилища,
//                                      по которому будут доступны данные файла на сервере и на клиенте
// 
Процедура ВыполнитьВыгрузкуПараметровМастераВоВременноеХранилище(Отказ, АдресВременногоХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Исключение
		ОбменДаннымиСервер.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Отказ);
		Возврат;
	КонецПопытки;
	
	СтрокаXML = ВыполнитьВыгрузкуПараметровМастера(Отказ);
	
	Если Не Отказ Тогда
		
		ЗаписьТекста.Записать(СтрокаXML);
		
	КонецЕсли;
	
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

// Выполняет выгрузку параметров помощника в константу для продолжения настройки обмена в подчиненном узле РИБ
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
// 
Процедура ВыполнитьВыгрузкуПараметровМастераВКонстанту(Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаXML = ВыполнитьВыгрузкуПараметровМастера(Отказ);
	
	Если Не Отказ Тогда
		
		Константы.НастройкиПодчиненногоУзлаРИБ.Установить(СтрокаXML);
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Метаданные.Константы.НастройкиПодчиненногоУзлаРИБ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку параметров помощника из временного хранилища для продолжения настройки обмена во второй базе
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
//  АдресВременногоХранилища – Строка – адрес временного хранилища с данными xml-файла для загрузки
//
Процедура ВыполнитьЗагрузкуПараметровМастераИзВременногоХранилища(Отказ, АдресВременногоХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	// получаем файл для считывания
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	СтрокаXML = ЧтениеТекста.Прочитать();
	
	// удаляем временный файл
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
	ВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаXML);
	
КонецПроцедуры

// Выполняет загрузку параметров помощника из константы для продолжения настройки обмена во второй базе
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
//
Процедура ВыполнитьЗагрузкуПараметровМастераИзКонстанты(Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаXML = Константы.НастройкиПодчиненногоУзлаРИБ.Получить();
	
	ВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаXML);
	
КонецПроцедуры

Процедура Инициализация(Узел) Экспорт
	
	УзелИнформационнойБазы = Узел;
	УзелИнформационнойБазыПараметры = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Узел, "Код, Наименование");
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	НаименованиеЭтойБазы = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыОбмена[ИмяПланаОбмена].ЭтотУзел(), "Наименование");
	НаименованиеВторойБазы = УзелИнформационнойБазыПараметры.Наименование;
	
	ПрефиксИнформационнойБазыПриемника = УзелИнформационнойБазыПараметры.Код;
	
	НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаДляУзла(Узел);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиТранспорта);
	
	ВидТранспортаСообщенийОбмена = НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
	
	ИспользоватьПараметрыТранспортаCOM = Ложь;
	ИспользоватьПараметрыТранспортаEMAIL = Ложь;
	ИспользоватьПараметрыТранспортаFILE = Ложь;
	ИспользоватьПараметрыТранспортаFTP = Ложь;
	
	Если ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		ИспользоватьПараметрыТранспортаFILE = Истина;
		
	ИначеЕсли ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
		
		ИспользоватьПараметрыТранспортаFTP = Истина;
		
	ИначеЕсли ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL Тогда
		
		ИспользоватьПараметрыТранспортаEMAIL = Истина;
		
	ИначеЕсли ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.COM Тогда
		
		ИспользоватьПараметрыТранспортаCOM = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции-свойства

// Сообщение об ошибке при обмене данными
//
// Тип: Строка
//
Функция СтрокаСообщенияОбОшибке() Экспорт
	
	Если ТипЗнч(ПолеСтрокаСообщенияОбОшибке) <> Тип("Строка") Тогда
		
		ПолеСтрокаСообщенияОбОшибке = "";
		
	КонецЕсли;
	
	Возврат ПолеСтрокаСообщенияОбОшибке;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные служебные процедуры и функции

Процедура ВыполнитьДействияПоНастройкеОбменаДанными(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла, РегистрироватьДанныеДляВыгрузки = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		// создаем/обновляем узлы плана обмена
		СоздатьОбновитьУзлыПланаОбмена(НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла);
		
		// устанавливаем признак начальной выгрузки данных для узла
		Если Не ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
			
			РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
			
		КонецЕсли;
		
		// загружаем настройки транспорта сообщений
		ОбновитьНастройкиТранспортаСообщенийОбмена();
		
		// обновляем значение константы префикса ИБ
		Если Не ПрефиксИнформационнойБазыИсточникаУстановлен Тогда
			
			ОбновитьЗначениеКонстантыПрефиксаИнформационнойБазы();
			
		КонецЕсли;
		
		Если ЭтоНастройкаРаспределеннойИнформационнойБазы
			И ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
			
			Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
			Константы.ИспользоватьОбменДанными.Установить(Истина);
			
		КонецЕсли;
		
	Исключение
		
		СообщитьИнформациюОбОшибке(ИнформацияОбОшибке(), Отказ);
		
	КонецПопытки;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Возврат;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если РегистрироватьДанныеДляВыгрузки Тогда
		
		// обновляем повторно используемые значения МРО
		ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
		
		Если Не ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
			
			// выполняем регистрацию изменений на узле плана обмена
			ЗарегистрироватьИзмененияДляОбмена(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбновитьУзлыПланаОбмена(НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, КодЭтогоУзла, КодНовогоУзла)
	
	МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
	
	// ОБНОВЛЯЕМ ЭТОТ УЗЕЛ ПРИ НЕОБХОДИМОСТИ
	
	// получение ссылки на этот узел плана обмена
	ЭтотУзел = МенеджерПланаОбмена.ЭтотУзел();
	
	Если ПустаяСтрока(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотУзел, "Код")) Тогда
		
		ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
		ЭтотУзелОбъект.Код = КодЭтогоУзла;
		ЭтотУзелОбъект.Наименование = НаименованиеЭтойБазы;
		ЭтотУзелОбъект.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
		ЭтотУзелОбъект.Записать();
		
	КонецЕсли;
	
	// ПОЛУЧАЕМ УЗЕЛ ДЛЯ ОБМЕНА
	
	Если ЭтоНастройкаРаспределеннойИнформационнойБазы
		И ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
		
		ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
		
		Если ГлавныйУзел = Неопределено Тогда
			
			ВызватьИсключение НСтр("ru = 'Главный узел для текущей информационной базы не определен.
							|Возможно, информационная база не является подчиненным узлом в РИБ.'"
			);
		КонецЕсли;
		
		НовыйУзел = ГлавныйУзел.ПолучитьОбъект();
		
	Иначе
		
		// СОЗДАЕМ/ОБНОВЛЯЕМ УЗЕЛ
		НовыйУзел = МенеджерПланаОбмена.НайтиПоКоду(КодНовогоУзла);
		
		Если НовыйУзел.Пустая() Тогда
			НовыйУзел = МенеджерПланаОбмена.СоздатьУзел();
			НовыйУзел.Код = КодНовогоУзла;
		Иначе
			НовыйУзел = НовыйУзел.ПолучитьОбъект();
		КонецЕсли;
		
		НовыйУзел.Наименование = НаименованиеВторойБазы;
		
	КонецЕсли;
	
	// установка значений отборов на новом узле
	ОбменДаннымиСобытия.УстановитьЗначенияОтборовНаУзле(НовыйУзел, НастройкаОтборовНаУзле);
	
	// установка значений по умолчанию на новом узле
	ОбменДаннымиСобытия.УстановитьЗначенияПоУмолчаниюНаУзле(НовыйУзел, ЗначенияПоУмолчаниюНаУзле);
	
	// сбрасываем счетчики сообщений
	НовыйУзел.НомерОтправленного = 0;
	НовыйУзел.НомерПринятого     = 0;
	
	НовыйУзел.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
	НовыйУзел.Записать();
	
	УзелИнформационнойБазы = НовыйУзел.Ссылка;
	
КонецПроцедуры

Процедура ОбновитьНастройкиТранспортаСообщенийОбмена()
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Узел",                                    УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", ВидТранспортаСообщенийОбмена);
	
	СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииВыгрузкиДанных", 200);
	СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииЗагрузкиДанных", 200);
	
	СтруктураЗаписи.Вставить("WSИспользоватьПередачуБольшогоОбъемаДанных", Истина);
	
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "CombiВидТранспортаСообщенийОбмена");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "EMAILМаксимальныйДопустимыйРазмерСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "EMAILСжиматьФайлИсходящегоСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "EMAILУчетнаяЗапись");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FILEКаталогОбменаИнформацией");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FILEСжиматьФайлИсходящегоСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСжиматьФайлИсходящегоСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеМаксимальныйДопустимыйРазмерСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПароль");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПассивноеСоединение");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПользователь");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПорт");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПуть");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "WSURLВебСервиса");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "WSИмяПользователя");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "WSПароль");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "WSЗапомнитьПароль");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "ПарольАрхиваСообщенияОбмена");
	
	// добавляем запись в РС
	РегистрыСведений.НастройкиТранспортаОбмена.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ОбновитьНастройкиТранспортаСообщенийОбменаCOM()
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Узел",                                    УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	
	СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииВыгрузкиДанных", 200);
	СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииЗагрузкиДанных", 200);
	
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "COMАутентификацияОперационнойСистемы");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "COMВариантРаботыИнформационнойБазы");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "COMИмяИнформационнойБазыНаСервере1СПредприятия");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "COMИмяПользователя");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "COMИмяСервера1СПредприятия");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "COMКаталогИнформационнойБазы");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "COMПарольПользователя");
	
	// добавляем запись в РС
	РегистрыСведений.НастройкиТранспортаОбмена.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, ИмяРеквизита)
	
	СтруктураЗаписи.Вставить(ИмяРеквизита, ЭтотОбъект[ИмяРеквизита]);
	
КонецПроцедуры

Процедура ОбновитьЗначениеКонстантыПрефиксаИнформационнойБазы()
	
	ЗначениеДоОбновления = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	
	Если ПустаяСтрока(ЗначениеДоОбновления)
		И ЗначениеДоОбновления <> ПрефиксИнформационнойБазыИсточника Тогда
		
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СокрЛП(ПрефиксИнформационнойБазыИсточника));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляОбмена(Отказ, Данные = Неопределено)
	
	Попытка
		ОбменДаннымиСервер.ЗарегистрироватьДанныеДляНачальнойВыгрузки(УзелИнформационнойБазы, Данные);
	Исключение
		СообщитьИнформациюОбОшибке(ИнформацияОбОшибке(), Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияСправочников(Отказ)
	
	Данные = ОбменДаннымиСервер.СправочникиПланаОбмена(ИмяПланаОбмена);
	
	Если Данные.Количество() > 0 Тогда
		
		ЗарегистрироватьИзмененияДляОбмена(Отказ, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияВсехДанныхКромеСправочников(Отказ)
	
	Данные = ОбменДаннымиСервер.ВсеДанныеПланаОбменаКромеСправочников(ИмяПланаОбмена);
	
	Если Данные.Количество() > 0 Тогда
		
		ЗарегистрироватьИзмененияДляОбмена(Отказ, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьВыгрузкуПараметровМастера(Отказ)
	
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ПараметрыНастройки");
		ЗаписьXML.ЗаписатьАтрибут("ВерсияФормата", ВерсияФорматаФайлаНастроекОбменаДанными());
		
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
		
		// выгрузка параметров мастера
		ЗаписьXML.ЗаписатьНачалоЭлемента("ОсновныеПараметрыОбмена");
		ВыгрузитьПараметрыМастера(ЗаписьXML);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ОсновныеПараметрыОбмена
		
		Если ИспользоватьПараметрыТранспортаEMAIL Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("УчетнаяЗаписьЭлектроннойПочты");
			ЗаписатьXML(ЗаписьXML, ?(ЗначениеЗаполнено(EMAILУчетнаяЗапись), EMAILУчетнаяЗапись.ПолучитьОбъект(), Неопределено));
			ЗаписьXML.ЗаписатьКонецЭлемента(); // УчетнаяЗаписьЭлектроннойПочты
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ПараметрыНастройки
		
	Исключение
		ОбменДаннымиСервер.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Отказ);
		Возврат "";
	КонецПопытки;
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ПолучитьЗначенияНастройкиОтборов(СтруктураНастроекВнешнегоСоединения)
	
	Результат = Новый Структура;
	
	// объектные типы
	Для Каждого НастройкаОтбора ИЗ СтруктураНастроекВнешнегоСоединения Цикл
		
		Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Структура") Тогда
			
			РезультатВложенный = Новый Структура;
			
			Для Каждого Элемент ИЗ НастройкаОтбора.Значение Цикл
				
				Если Найти(Элемент.Ключ, "_Ключ") > 0 Тогда
					
					Ключ = СтрЗаменить(Элемент.Ключ, "_Ключ", "");
					
					Массив = Новый Массив;
					
					Для Каждого ЭлементМассива Из Элемент.Значение Цикл
						
						Если Не ПустаяСтрока(ЭлементМассива) Тогда
							
							Значение = ЗначениеИзСтрокиВнутр(ЭлементМассива);
							
							Массив.Добавить(Значение);
							
						КонецЕсли;
						
					КонецЦикла;
					
					РезультатВложенный.Вставить(Ключ, Массив);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Результат.Вставить(НастройкаОтбора.Ключ, РезультатВложенный);
			
		Иначе
			
			Если Найти(НастройкаОтбора.Ключ, "_Ключ") > 0 Тогда
				
				Ключ = СтрЗаменить(НастройкаОтбора.Ключ, "_Ключ", "");
				
				Попытка
					Если ПустаяСтрока(НастройкаОтбора.Значение) Тогда
						Значение = Неопределено;
					Иначе
						Значение = ЗначениеИзСтрокиВнутр(НастройкаОтбора.Значение);
					КонецЕсли;
				Исключение
					Значение = Неопределено;
				КонецПопытки;
				
				Результат.Вставить(Ключ, Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// примитивные типы
	Для Каждого НастройкаОтбора Из СтруктураНастроекВнешнегоСоединения Цикл
		
		Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Структура") Тогда
			
			РезультатВложенный = Результат[НастройкаОтбора.Ключ];
			
			Если РезультатВложенный = Неопределено Тогда
				
				РезультатВложенный = Новый Структура;
				
			КонецЕсли;
			
			Для Каждого Элемент Из НастройкаОтбора.Значение Цикл
				
				Если Найти(Элемент.Ключ, "_Ключ") <> 0 Тогда
					
					Продолжить;
					
				ИначеЕсли НастройкаОтбора.Значение.Свойство(Элемент.Ключ + "_Ключ") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Массив = Новый Массив;
				
				Для Каждого ЭлементМассива Из Элемент.Значение Цикл
					
					Массив.Добавить(ЭлементМассива);
					
				КонецЦикла;
				
				РезультатВложенный.Вставить(Элемент.Ключ, Массив);
				
			КонецЦикла;
			
		Иначе
			
			Если Найти(НастройкаОтбора.Ключ, "_Ключ") <> 0 Тогда
				
				Продолжить;
				
			ИначеЕсли СтруктураНастроекВнешнегоСоединения.Свойство(НастройкаОтбора.Ключ + "_Ключ") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Результат.Вставить(НастройкаОтбора.Ключ, НастройкаОтбора.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКодУзлаЭтойБазы(Знач ПрефиксИнформационнойБазыЗаданныйПользователем)
	
	Если ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными"
		И ВерсияФорматаФайлаНастроекОбменаДанными = "1.0" Тогда
		
		Возврат КодПредопределенногоУзла;
		
	КонецЕсли;
	
	Результат = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = ПрефиксИнформационнойБазыЗаданныйПользователем;
		
		Если ПустаяСтрока(Результат) Тогда
			
			Возврат "000";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(Результат);
КонецФункции

Функция ПолучитьКодУзлаКорреспондента()
	
	Если Не ПустаяСтрока(КодУзлаКорреспондента) Тогда
		
		Возврат КодУзлаКорреспондента;
		
	КонецЕсли;
	
	Возврат ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(ПрефиксИнформационнойБазыПриемника);
КонецФункции

Процедура ПрочитатьПараметрыВСтруктуру(Отказ, СтрокаXML, СтруктураНастроек)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Исключение
		Отказ = Истина;
		ЧтениеXML = Неопределено;
		Возврат;
	КонецПопытки;
	
	Попытка
		
		ЧтениеXML.Прочитать(); // ПараметрыНастройки
		ВерсияФормата = ЧтениеXML.ПолучитьАтрибут("ВерсияФормата");
		ВерсияФорматаФайлаНастроекОбменаДанными = ?(ВерсияФормата = Неопределено, "1.0", ВерсияФормата);
		
		ЧтениеXML.Прочитать(); // ОсновныеПараметрыОбмена
		
		// зачитываем узел ОсновныеПараметрыОбмена
		СтруктураНастроек = СчитатьДанныеВСтуктуру(ЧтениеXML);
		
		Если СтруктураНастроек.Свойство("ИспользоватьПараметрыТранспортаEMAIL", ИспользоватьПараметрыТранспортаEMAIL)
			И ИспользоватьПараметрыТранспортаEMAIL Тогда
			
			// зачитываем узел УчетнаяЗаписьЭлектроннойПочты
			ЧтениеXML.Прочитать(); // УчетнаяЗаписьЭлектроннойПочты {НачалоЭлемента}
			
			СтруктураНастроек.Вставить("УчетнаяЗаписьЭлектроннойПочты", ПрочитатьXML(ЧтениеXML));
			
			ЧтениеXML.Прочитать(); // УчетнаяЗаписьЭлектроннойПочты {КонецЭлемента}
			
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	ЧтениеXML = Неопределено;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаXML) Экспорт
	
	Перем СтруктураНастроек;
	
	ПрочитатьПараметрыВСтруктуру(Отказ, СтрокаXML, СтруктураНастроек);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// выполняем проверку зачитанных параметров из файла
	Если СтруктураНастроек.Свойство("ИмяПланаОбмена")
		И СтруктураНастроек.ИмяПланаОбмена <> ИмяПланаОбмена Тогда
		
		ПолеСтрокаСообщенияОбОшибке = НСтр("ru = 'Файл содержит настройки обмена для другой информационной базы.'");
		ОбменДаннымиСервер.СообщитьОбОшибке(СтрокаСообщенияОбОшибке(), Отказ);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// заполняем свойства обработки значениями из файла
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		
		УчетнаяЗаписьЭлектроннойПочты = Неопределено;
		
		Если СтруктураНастроек.Свойство("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗаписьЭлектроннойПочты)
			И УчетнаяЗаписьЭлектроннойПочты <> Неопределено Тогда
			
			УчетнаяЗаписьЭлектроннойПочты.Записать();
			
		КонецЕсли;
		
		// Поддержка файла настроек обмена формата версии 1.0
		Если ВерсияФорматаФайлаНастроекОбменаДанными = "1.0" Тогда
			
			ЭтотОбъект.НаименованиеЭтойБазы = НСтр("ru = 'Эта информационная база'");
			ЭтотОбъект.НаименованиеВторойБазы = СтруктураНастроек.НаименованиеНастройкиВыполненияОбмена;
			ЭтотОбъект.КодНовогоУзлаВторойБазы = СтруктураНастроек.КодНовогоУзла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрефиксИнформационнойБазы = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	
	Если Не ПустаяСтрока(ПрефиксИнформационнойБазы)
		И ПрефиксИнформационнойБазы <> ПрефиксИнформационнойБазыИсточника Тогда
		
		ПолеСтрокаСообщенияОбОшибке = НСтр("ru = 'На первом этапе настройки обмена был неправильно указан префикс второй информационной базы.
				|Настройку обмена требуется начать заново.'");
		//
		ОбменДаннымиСервер.СообщитьОбОшибке(СтрокаСообщенияОбОшибке(), Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СчитатьДанныеВСтуктуру(ЧтениеXML)
	
	// возвращаемое значение функции
	Структура = Новый Структура;
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение НСтр("ru = 'Ошибка чтения XML'");
		
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		ИмяУзла = ЧтениеXML.Имя;
		
		Структура.Вставить(ИмяУзла, ПрочитатьXML(ЧтениеXML));
		
	КонецЦикла;
	
	ЧтениеXML.Прочитать();
	
	Возврат Структура;
	
КонецФункции

Процедура ВыгрузитьПараметрыМастера(ЗаписьXML)
	
	ДобавитьЗаписьXML(ЗаписьXML, "ИмяПланаОбмена");
	
	ЗаписатьXML(ЗаписьXML, НаименованиеЭтойБазы,   "НаименованиеВторойБазы", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, НаименованиеВторойБазы, "НаименованиеЭтойБазы", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыОбмена[ИмяПланаОбмена].ЭтотУзел(), "Код"), "КодНовогоУзлаВторойБазы", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ПрефиксИнформационнойБазыПриемника, "ПрефиксИнформационнойБазыИсточника", НазначениеТипаXML.Явное);
	
	// настройки транспорта сообщений обмена
	ДобавитьЗаписьXML(ЗаписьXML, "ВидТранспортаСообщенийОбмена");
	ДобавитьЗаписьXML(ЗаписьXML, "ПарольАрхиваСообщенияОбмена");
	
	Если ИспользоватьПараметрыТранспортаEMAIL Тогда
		
		ДобавитьЗаписьXML(ЗаписьXML, "EMAILМаксимальныйДопустимыйРазмерСообщения");
		ДобавитьЗаписьXML(ЗаписьXML, "EMAILСжиматьФайлИсходящегоСообщения");
		ДобавитьЗаписьXML(ЗаписьXML, "EMAILУчетнаяЗапись");
		
	КонецЕсли;
	
	Если ИспользоватьПараметрыТранспортаFILE Тогда
		
		ДобавитьЗаписьXML(ЗаписьXML, "FILEКаталогОбменаИнформацией");
		ДобавитьЗаписьXML(ЗаписьXML, "FILEСжиматьФайлИсходящегоСообщения");
		
	КонецЕсли;
	
	Если ИспользоватьПараметрыТранспортаFTP Тогда
		
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСжиматьФайлИсходящегоСообщения");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеМаксимальныйДопустимыйРазмерСообщения");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПароль");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПассивноеСоединение");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПользователь");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПорт");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПуть");
		
	КонецЕсли;
	
	Если ИспользоватьПараметрыТранспортаCOM Тогда
		
		ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(СтрокаСоединенияИнформационнойБазы());
		
		ВариантРаботыИнформационнойБазы             = ПараметрыПодключения.ВариантРаботыИнформационнойБазы;
		ИмяИнформационнойБазыНаСервере1СПредприятия = ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия;
		ИмяСервера1СПредприятия                     = ПараметрыПодключения.ИмяСервера1СПредприятия;
		КаталогИнформационнойБазы                   = ПараметрыПодключения.КаталогИнформационнойБазы;
		
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		АутентификацияОперационнойСистемы = ПользовательИБ.АутентификацияОС;
		ИмяПользователя                   = ПользовательИБ.Имя;
		
		ЗаписатьXML(ЗаписьXML, ВариантРаботыИнформационнойБазы,             "COMВариантРаботыИнформационнойБазы",             НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ИмяИнформационнойБазыНаСервере1СПредприятия, "COMИмяИнформационнойБазыНаСервере1СПредприятия", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ИмяСервера1СПредприятия,                     "COMИмяСервера1СПредприятия",                     НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, КаталогИнформационнойБазы,                   "COMКаталогИнформационнойБазы",                   НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, АутентификацияОперационнойСистемы,           "COMАутентификацияОперационнойСистемы",           НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ИмяПользователя,                             "COMИмяПользователя",                             НазначениеТипаXML.Явное);
		
	КонецЕсли;
	
	ДобавитьЗаписьXML(ЗаписьXML, "ИспользоватьПараметрыТранспортаEMAIL");
	ДобавитьЗаписьXML(ЗаписьXML, "ИспользоватьПараметрыТранспортаFILE");
	ДобавитьЗаписьXML(ЗаписьXML, "ИспользоватьПараметрыТранспортаFTP");
	
	// Поддержка файла настроек обмена формата версии 1.0
	ЗаписатьXML(ЗаписьXML, НаименованиеЭтойБазы, "НаименованиеНастройкиВыполненияОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыОбмена[ИмяПланаОбмена].ЭтотУзел(), "Код"), "КодНовогоУзла", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ОбщегоНазначения.ПолучитьЗначениеРеквизита(УзелИнформационнойБазы, "Код"),                 "КодПредопределенногоУзла", НазначениеТипаXML.Явное);
	
КонецПроцедуры

Процедура ДобавитьЗаписьXML(ЗаписьXML, ИмяРеквизита)
	
	ЗаписатьXML(ЗаписьXML, ЭтотОбъект[ИмяРеквизита], ИмяРеквизита, НазначениеТипаXML.Явное);
	
КонецПроцедуры

Процедура УдалитьВременныйФайл(ИмяВременногоФайла)
	
	Попытка
		
		Если Не ПустаяСтрока(ИмяВременногоФайла) Тогда
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура СообщитьИнформациюОбОшибке(ИнформацияОбОшибке, Отказ)
	
	ПолеСтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ОбменДаннымиСервер.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Отказ);
	
	ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииСозданиеОбменаДанными(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке());
	
КонецПроцедуры

Функция ВерсияФорматаФайлаНастроекОбменаДанными()
	
	Возврат "1.1";
	
КонецФункции
