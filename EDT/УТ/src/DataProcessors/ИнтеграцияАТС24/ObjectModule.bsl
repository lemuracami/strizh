Процедура ЗагрузитьМассивРейсов(МассивРейсов, ДокФормирования) Экспорт
	Если МассивРейсов.Количество() = 0 Тогда
		#Если Клиент Тогда
			Сообщить("Нет рейсов!");
		#КонецеСли
		Возврат;
	КонецеСли;	
	
	Док = ДокФормирования.ПолучитьОбъект();
	Док.Рейсы.Очистить();
	
	Для Каждого Тек Из МассивРейсов Цикл
		ПараметрыТранспорта = Тек.Получить("vehicle");
		МассивДоставок = Тек.Получить("order_list");
		НовР = Документы.РейсДоставки.СоздатьДокумент();
		НовР.Дата = ТекущаяДата();
		НовР.Грузоподъёмность = ПараметрыТранспорта.Получить("tonnage");
		НовР.НуженЭкспедитор = ПараметрыТранспорта.Получить("loader");
		НовР.ТТК = ПараметрыТранспорта.Получить("ttk");
		
		ТаблицаЗаказов = Новый ТаблицаЗначений;
		ТаблицаЗаказов.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		Для каждого ТД Из МассивДоставок Цикл
			Нов = ТаблицаЗаказов.Добавить();
			Нов.НомерЗаказа = ТД;
		КонецЦикла;
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	Таб.НомерЗаказа
		            |ПОМЕСТИТЬ ВТТаб
		            |ИЗ
		            |	&Таб КАК Таб
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ
		            |	РеализацияТоваровУслуг.Ссылка КАК Доставка,
		            |	ВТТаб.НомерЗаказа,
		            |	новаРайоныАдресов.Район
		            |ИЗ
		            |	ВТТаб КАК ВТТаб
		            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаРайоныАдресов КАК новаРайоныАдресов
		            |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ОсновнойКлассификаторРайонов КАК ОсновнойКлассификаторРайонов
		            |					ПО ОсновнойКлассификаторРайонов.Значение.Ссылка = новаРайоныАдресов.Классификатор.Ссылка
		            |				ПО (новаМестнаяДоставка.ТочкаПрибытия.Адрес.Ссылка = новаРайоныАдресов.Адрес.Ссылка)
		            |			ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
		            |		ПО ВТТаб.НомерЗаказа = РеализацияТоваровУслуг.Номер
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |УНИЧТОЖИТЬ ВТТаб";
		Зап.УстановитьПараметр("Таб", ТаблицаЗаказов);
		Доставки = Зап.Выполнить().Выгрузить();
		
		Для Каждого ТекДоставка Из Доставки Цикл
			Если ЗначениеЗаполнено(ТекДоставка.Доставка) Тогда
				Нов = НовР.Доставки.Добавить();
				Нов.Доставка = ТекДоставка.Доставка;
				Нов.ГеоРайон = ТекДоставка.Район;
			Иначе
				Нов = НовР.НенайденныеНомераДоставок.Добавить();
				Нов.Номер = ТекДоставка.НомерЗаказа;
			КонецЕсли;	
		КонецЦикла;
		НовР.Записать(РежимЗаписиДокумента.Запись);
		
		НовРейс = Док.Рейсы.Добавить();
		НовРейс.Рейс = НовР.Ссылка;
	КонецЦикла;	
	
	Док.ФормированиеЗавершено = Истина;
	Док.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры	

Процедура ЭкспортДанных(ДокФормирования) Экспорт
	Сервер = "api.striz.lunev.d2t.ru/import/main/114-72a28f3791bf2a92f19c40e64d535add/";
	Ресурс = "";
	Попытка
	    Соединение = Новый HTTPСоединение(Сервер);
	Исключение
		#Если Клиент Тогда
	    Сообщить("Не удалось установить соединение с сервером:" 
	        + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		#КонецеСли
		Возврат;
	КонецПопытки;
	
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РеализацияТоваровУслугТовары.Ссылка.Ссылка КАК Док,
	            |	СУММА(РеализацияТоваровУслугТовары.Вес) КАК Вес
	            |ПОМЕСТИТЬ ВТВеса
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	            |ГДЕ
	            |	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	РеализацияТоваровУслугТовары.Ссылка.Ссылка
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Ссылка,
	            |	СУММА(РеализацияТоваровУслугПодарочныеПозиции.Вес)
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	            |ГДЕ
	            |	РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Ссылка
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТВеса.Док,
	            |	СУММА(ВТВеса.Вес) КАК Вес
	            |ПОМЕСТИТЬ ВТВеса2
	            |ИЗ
	            |	ВТВеса КАК ВТВеса
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТВеса.Док
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	новаМестнаяДоставка.Номер КАК Номер,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
	            |	новаМестнаяДоставка.ВремяПрибытияС,
	            |	новаМестнаяДоставка.ВремяПрибытияПо,
	            |	ВТВеса2.Вес КАК Вес,
	            |	ВЫБОР
	            |		КОГДА КатегорииДоставки2014.Ссылка В (ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.КГТ1), ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.КГТ2), ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.СГТ2))
	            |			ТОГДА 1
	            |		ИНАЧЕ 0
	            |	КОНЕЦ КАК Экпедитор,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
	            |	РеализацияТоваровУслуг.Ссылка КАК Доставка
	            |ИЗ
	            |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВеса2 КАК ВТВеса2
	            |			ПО РеализацияТоваровУслуг.Ссылка = ВТВеса2.Док.Ссылка
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КатегорииДоставки2014 КАК КатегорииДоставки2014
	            |			ПО РеализацияТоваровУслуг.КатегорияДоставки = КатегорииДоставки2014.Категория
	            |		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
	            |		ПО новаМестнаяДоставка.Ссылка = новаЗадачаМестнойДоставки.БизнесПроцесс.Доставка.Ссылка
	            |ГДЕ
	            |	новаМестнаяДоставка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И новаЗадачаМестнойДоставки.Роль = ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	новаМестнаяДоставка.Номер,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование,
	            |	новаМестнаяДоставка.ВремяПрибытияС,
	            |	новаМестнаяДоставка.ВремяПрибытияПо,
	            |	ВТВеса2.Вес,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота,
	            |	РеализацияТоваровУслуг.Ссылка,
	            |	ВЫБОР
	            |		КОГДА КатегорииДоставки2014.Ссылка В (ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.КГТ1), ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.КГТ2), ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.СГТ2))
	            |			ТОГДА 1
	            |		ИНАЧЕ 0
	            |	КОНЕЦ
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Номер
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТВеса
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТВеса2";
				
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДокФормирования.ДатаДоставки));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДокФормирования.ДатаДоставки));			
	
	Рез = Зап.Выполнить();
	
	ОбщСоот = Новый Соответствие;
	
	Выб = Рез.Выгрузить();
	Мас = Новый Массив;
	Для Каждого Тек Из Выб Цикл
		Соот = Новый Соответствие;
		Соот.Вставить("uid", СокрЛП(Тек.Номер));
		Соот.Вставить("address", СокрЛП(Тек.Адрес));
		Соот.Вставить("dateFrom", ФорматДаты(Тек.ВремяПрибытияС));
		Соот.Вставить("dateTo", ФорматДаты(Тек.ВремяПрибытияПо));
		Соот.Вставить("weight", СокрЛП(Тек.Вес));
		Соот.Вставить("loader", СокрЛП(Тек.Экпедитор));
		Соот.Вставить("lat", СокрЛП(Тек.Широта));
		Соот.Вставить("lng", СокрЛП(Тек.Долгота));
		
		Мас.Добавить(Соот);
		Нов = ДокФормирования.ДоставкиКРаспределению.Добавить();
		Нов.Доставка = Тек.Доставка;
	КонецЦикла;	
	ДокФормирования.Записать(РежимЗаписиДокумента.Запись);
	ОбщСоот.Вставить("orderList", Мас);
	
	
	
	ЗапМ = Новый Запрос;
		ЗапМ.Текст = 
		"ВЫБРАТЬ
		|	ВыборкаФлагаДоступности.Транспорт КАК Транспорт,
		|	ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК Водитель,
		|	ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)) КАК Экспедитор,
		|	ЕСТЬNULL(ВозможныеРейсы.НачалоПериода, &НачалоРейсаПоДефолту) КАК НачалоПериода
		|ПОМЕСТИТЬ ВТТранспорт
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДоступностьТранспорта.Транспорт КАК Транспорт,
		|		МАКСИМУМ(ДоступностьТранспорта.НачалоПериода) КАК НачалоПериода
		|	ИЗ
		|		РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
		|	ГДЕ
		|		ДоступностьТранспорта.НачалоПериода <= &ДатаРедактирования
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДоступностьТранспорта.Транспорт) КАК ВыборкаФлагаДоступности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
		|		ПО ВыборкаФлагаДоступности.Транспорт = ДоступностьТранспорта.Транспорт
		|			И ВыборкаФлагаДоступности.НачалоПериода = ДоступностьТранспорта.НачалоПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
		|		ПО (ВозможныеРейсы.Транспорт = ВыборкаФлагаДоступности.Транспорт)
		|			И (ВозможныеРейсы.НачалоПериода >= &ДатаРедактирования)
		|			И (ВозможныеРейсы.КонецПериода <= КОНЕЦПЕРИОДА(&ДатаРедактирования, ДЕНЬ))
		|ГДЕ
		|	ДоступностьТранспорта.Доступен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВТТранспорт.Транспорт.Грузоподъемность = 0
		|			ТОГДА 900
		|		ИНАЧЕ ВТТранспорт.Транспорт.Грузоподъемность * 1000
		|	КОНЕЦ КАК Грузоподъемность,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТТранспорт.Транспорт.Ссылка) КАК КоличествоМашин,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТТранспорт.Экспедитор, ИСТИНА) = ИСТИНА
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Экспедитор
		|ИЗ
		|	ВТТранспорт КАК ВТТранспорт
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТТранспорт.Экспедитор, ИСТИНА) = ИСТИНА
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТТранспорт.Транспорт.Грузоподъемность = 0
		|			ТОГДА 900
		|		ИНАЧЕ ВТТранспорт.Транспорт.Грузоподъемность * 1000
		|	КОНЕЦ";

	ЗапМ.УстановитьПараметр("ДатаРедактирования", ДокФормирования.ДатаДоставки);
	ЗапМ.УстановитьПараметр("НачалоРейсаПоДефолту", НачалоДня(ДокФормирования.ДатаДоставки) + 7 * 60 * 60);

	МасМ = Новый Массив;
	ВыбМ = ЗапМ.Выполнить().Выгрузить();
	Для Каждого Тек Из ВыбМ Цикл
		Соот = Новый Соответствие;
		Соот.Вставить("tonnage", Тек.Грузоподъемность);
		Соот.Вставить("ttk", 0);
		Соот.Вставить("loader", Тек.Экспедитор);
		Соот.Вставить("count", Тек.КоличествоМашин);
		МасМ.Добавить(Соот);
	КонецЦикла;
	ОбщСоот.Вставить("vehicleList", МасМ);
	
	
	Соот = Новый Соответствие;
	Соот.Вставить("minCount", ДокФормирования.МинимальноеКоличествоДоставокНаРейс);
	Соот.Вставить("maxCount", ДокФормирования.МаксимальноеКоличествоДоставокНаРейс);
	Соот.Вставить("clientTime", ДокФормирования.ИнтервалОжиданияНаРазгрузке);
	
	ОбщСоот.Вставить("distribution", Соот);
	
	Стр = JSON.ЗаписатьJSON(ОбщСоот,Ложь);
	#Если Клиент Тогда
	    Сообщить(Стр);
	#КонецеСли	
	
    ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();

	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.UTF8);
	ФайлОтправки.Записать(Стр);   
	ФайлОтправки.Закрыть(); 
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ФайлОтправки = Новый Файл(ИмяФайлаОтправки); 
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер()); 
	ЗаголовокHTTP.Вставить("Content-Length", Строка(РазмерФайлаОтправки)); 
	
	
	Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки, Ресурс, ИмяФайлаРезультата, ЗаголовокHTTP);
	
	
	ФайлРезультата = Новый ЧтениеТекста(ИмяФайлаРезультата);
	Рез_ = ФайлРезультата.ПрочитатьСтроку();
	JS = JSON.ПрочитатьJSON(Рез_);
	#Если Клиент Тогда
		Сообщить(Рез_);	
		ОписаниеОшибки = JS.Получить("error");
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки);
			#КонецеСли
			ДокФормирования.Ошибка = ОписаниеОшибки;
			ДокФормирования.Записать(РежимЗаписиДокумента.Запись);
			Возврат;
		Иначе
			Результат = JS.Получить("result");
			Если Результат = Неопределено Тогда
				#Если Клиент Тогда
					Сообщить("Данные отсутствуют!");
				#КонецеСли	
			Иначе
				Ответ = Результат.Получить("distribution");
				Если Ответ = Неопределено Тогда
					#Если Клиент Тогда
						Сообщить("Данные по распределению отсутствуют!");
					#КонецеСли	
				Иначе
					Ид = Ответ.Получить("id");
					Если Ид <> Неопределено Тогда
						ДокФормирования.Идентификатор = Ид;
						ДокФормирования.Записать(РежимЗаписиДокумента.Запись);
					Иначе
						#Если Клиент Тогда
							Сообщить("ID распределения отсутствуют!");
						#КонецеСли	
					КонецеСли;	
				КонецеСли;	
			КонецеСли;	
		КонецеСли;	
	#КонецеСли	
КонецпРоцедуры	

Функция ФорматДаты(Д) 
	Возврат Формат(Д,"ДФ=yyyy-MM-dd") + "T" +  Формат(Д,"ДЛФ=T");
КонецФункции	

Процедура ИмпортДанных(ДокФормирования) Экспорт
	Сервер = "api.striz.lunev.d2t.ru/export/main/114-72a28f3791bf2a92f19c40e64d535add/";
	Ресурс = "";
	Попытка
	    Соединение = Новый HTTPСоединение(Сервер);
	Исключение
		#Если Клиент Тогда
	    	Сообщить("Не удалось установить соединение с сервером:" 
	        	 + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		#КонецеСли	
		Возврат;
	КонецПопытки;
	
	
	
	ОбщСоот = Новый Соответствие;
	ОбщСоот.Вставить("distribution", ДокФормирования.Идентификатор);
	
	Стр = JSON.ЗаписатьJSON(ОбщСоот,Ложь);
	#Если Клиент Тогда
    	Сообщить(Стр);
	#КонецеСли	
	
	
    ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();

	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.UTF8);
	ФайлОтправки.Записать(Стр);   
	ФайлОтправки.Закрыть(); 
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ФайлОтправки = Новый Файл(ИмяФайлаОтправки); 
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер()); 
	ЗаголовокHTTP.Вставить("Content-Length", Строка(РазмерФайлаОтправки)); 
	
	
	Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки, Ресурс, ИмяФайлаРезультата, ЗаголовокHTTP);
	
	Док = ДокФормирования.ПолучитьОбъект();
	
	ФайлРезультата = Новый ЧтениеТекста(ИмяФайлаРезультата);
	Рез_ = ФайлРезультата.ПрочитатьСтроку();
	Пока Рез_ <> Неопределено Цикл
		#Если Клиент Тогда
			Сообщить(Рез_);
		#КонецеСли	
		JS = JSON.ПрочитатьJSON(Рез_);
		ОписаниеОшибки = JS.Получить("error");
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки);
			#КонецеСли
			Док.Ошибка = ОписаниеОшибки;
			Док.Записать(РежимЗаписиДокумента.Запись);
			Возврат;
		Иначе
			Результат = JS.Получить("result");
			Если Результат = Неопределено Тогда
				#Если Клиент Тогда
					Сообщить("Данные отсутствуют!");
				#КонецеСли	
			Иначе
				МассивРейсов = Результат.Получить("distribution");
				Если МассивРейсов = Неопределено Тогда
					#Если Клиент Тогда
						Сообщить("Данные по рейсам отсутствуют!");
					#КонецеСли	
				ИначеЕсли МассивРейсов = "not ready" Тогда
					#Если Клиент Тогда
						Сообщить("Формирование распределения в процессе!");
					#КонецеСли	
				Иначе
					ЗагрузитьМассивРейсов(МассивРейсов, ДокФормирования);
				КонецеСли;	
			КонецеСли;	
		КонецеСли;	
		Рез_ = ФайлРезультата.ПрочитатьСтроку();
	КонецЦикла;	
КонецПроцедуры	

Процедура СформироватьЗапрос(ДатаДоставки) Экспорт
	НовД = Документы.ФормированиеРейсов.СоздатьДокумент();
	НовД.Дата = ТекущаяДата();
	НовД.МаксимальноеКоличествоДоставокНаРейс = Константы.МаксимальноеКоличествоДоставокНаРейс.Получить();
	НовД.МинимальноеКоличествоДоставокНаРейс = Константы.МинимальноеКоличествоДоставокНаРейс.Получить();
	НовД.ИнтервалОжиданияНаРазгрузке = Константы.ИнтервалОжиданияНаРазгрузке.Получить();
	НовД.ДатаДоставки = ДатаДоставки;
	НовД.Записать(РежимЗаписиДокумента.Запись);
	
	ЭкспортДанных(НовД);
КонецПроцедуры	

Процедура ПроверитьНаличиеДанных() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ФормированиеРейсов.Ссылка Как Док
	            |ИЗ
	            |	Документ.ФормированиеРейсов КАК ФормированиеРейсов
	            |ГДЕ
	            |	ФормированиеРейсов.ПометкаУдаления = ЛОЖЬ
	            |	И ФормированиеРейсов.ФормированиеЗавершено = ЛОЖЬ";
	Рез = Зап.Выполнить().Выгрузить();
	
	Для Каждого Тек Из Рез Цикл
		ИмпортДанных(Тек.Док);
	КонецЦикла;	
КонецПроцедуры	