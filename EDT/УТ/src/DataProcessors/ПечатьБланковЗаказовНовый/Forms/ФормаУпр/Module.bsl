
#Область КомандаСформировать

&НаКлиенте
Процедура ПечатьОзон(Заказ, Ном) 
	
	// вывод квитанции	
	Рез = oz_РаботаССервисом.ReportGet(Заказ, 1,, Истина, Ном); 	
	Если Рез.Код = 0 Тогда					
		ДвоичныеДанные = Рез.ReportData;	
		ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_Квитанция_" + СокрЛП(Заказ.Номер) + ".pdf";		
		ДвоичныеДанные.Записать(ПутьКФайлу);
		//ЭлементыФормы.PDF.LoadFile(ПутьКФайлу);
		//ЭлементыФормы.PDF.printAll();
		//ЭлементыФормы.PDF.printAll();
		ЗапуститьПриложение(ПутьКФайлу);
		СчетчикОзон = СчетчикОзон + 1;
		Элементы.НадписьOZON.Заголовок = "Печать OZON, кол. заказов " + Формат(СчетчикОзон, "");
	КонецЕсли;
	
	// вывод товарного чека
	Рез = oz_РаботаССервисом.ReportGet(Заказ, 1, "SAPostingCashMemo", Истина);		
	Если Рез.Код = 0 Тогда
		ДвоичныеДанные = Рез.ReportData;	
		ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_ТоварныйЧек_" + СокрЛП(Заказ.Номер) + ".pdf";		
		ДвоичныеДанные.Записать(ПутьКФайлу);
		//ЭлементыФормы.PDF2.LoadFile(ПутьКФайлу);
		////ЭлементыФормы.PDF.printAll();
		//ЭлементыФормы.PDF2.printAll();
		
		ЗапуститьПриложение(ПутьКФайлу);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьНаСервереПоРейсу()
		
	ТабличныйДокументПечати = Новый ТабличныйДокумент;
	ОбраоботкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбраоботкаОбъект.ПечатьПоРейсу(Объект.Рейс, ТабличныйДокументПечати);

	//CeHbKA 02.07.2019 #3283
	Событие = Справочники.СобытияКонтроляВремени.РаспечаткаБланковЗаказов;
	УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, Объект.Рейс, Истина);
	//CeHbKA 02.07.2019 #3283
	
	Возврат ТабличныйДокументПечати;
	
КонецФункции

&НаСервере
Функция СформироватьНаСервереПоДоставке()
	
	ТабличныйДокументПечати = Новый ТабличныйДокумент;
	ОбраоботкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбраоботкаОбъект.ПечатьПоДоставке2(Объект.Доставка, ТабличныйДокументПечати);
	
	Возврат ТабличныйДокументПечати;
	
КонецФункции

&НаСервере
Функция ЕстьДоставкаOZON(ПараметрыOZON)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ШтрихкодOZON, 0) КАК ШКОзон,
	|	ДополнительныеПараметрыЗаказа.Заказ,
	|	ДополнительныеПараметрыЗаказа.ДополнительныйНомерЗаказа
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|ГДЕ
	|	ДополнительныеПараметрыЗаказа.Заказ.Номер = &Номер");
	Запрос.УстановитьПараметр("Номер", СокрЛП(Объект.Доставка.Номер));		
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() И ЗначениеЗаполнено(Рез.ШКОзон) Тогда
		
		ПараметрыOZON = Новый Структура;
		ПараметрыOZON.Вставить("Ном", Рез.ДополнительныйНомерЗаказа);
		ПараметрыOZON.Вставить("Заказ",Рез.Заказ); 
		
		Возврат Истина;
		
	КОнецЕслИ;			
	
	Возврат Ложь;
		
КонецФункции	

&НаКлиенте
Процедура Сформировать(Команда)
	
	ТабличныйДокумент.Очистить();
	СчетчикОзон = 0;
	Элементы.НадписьOZON.Заголовок = "";
	Если ЗначениеЗаполнено(Объект.Рейс) Тогда
			
        ТабличныйДокумент = СформироватьНаСервереПоРейсу();   		
		 
	ИначеЕсли ЗначениеЗаполнено(Объект.Доставка) Тогда
		
		//ПараметрыOZON = Неопределено;
		//Если ЕстьДоставкаOZON(ПараметрыOZON) ТОгда			
		//	
		//	ТекстСообщения = "Заказ ОЗОН, номер заказа: " + СокрЛП(Объект.Доставка.Номер) + " ; Печать внешнего бланка (квитанции) + товарного чека OZONE";
		//	Сообщить(ТекстСообщения);
		//	
		//	Попытка		
		//		
		//		ПечатьОзон(ПараметрыOZON.Заказ, ПараметрыOZON.Ном);
		//		
		//	Исключение
		//		
		//		Сообщить("Не удалось вывести бланк, возможно, он уже открыт.");
		//		
		//	КонецПопытки;
		//	
		//Иначе
			
			ТабличныйДокумент = СформироватьНаСервереПоДоставке();
				
		//КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КомандаПечатьПоРейсуБезЯндекса

&НаСервере
Функция ПечатьПоРейсуБезЯндексаНаСервере()
	
	ТабличныйДокументПечати = Новый ТабличныйДокумент;
	ОбраоботкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбраоботкаОбъект.ПечатьПоРейсу(Объект.Рейс, ТабличныйДокументПечати, "БезДоставокЯндекс");

	Возврат ТабличныйДокументПечати;

КонецФункции

&НаКлиенте
Процедура ПечатьПоРейсуБезЯндекса(Команда)
	
	ТабличныйДокумент.Очистить();
	Если ЗначениеЗаполнено(Объект.Рейс) Тогда
		
		ТабличныйДокумент = ПечатьПоРейсуБезЯндексаНаСервере();
    
	КонецеСли;	

КонецПроцедуры

#КонецОбласти

#Область КомандаПечатьДоставокЯндекса

&НаСервере
Функция ПечатьДоставокЯндексаНаСервере()

	ТабличныйДокументПечати = Новый ТабличныйДокумент;
	ОбраоботкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбраоботкаОбъект.ПечатьПоРейсу(Объект.Рейс, ТабличныйДокументПечати, "ТолькоДоставкиЯндекс", Период);//Новый СтандартныйПериод(НачалоДня(Период.ДатаНачала), КонецДня(Период.ДатаОкончания))); 

	Возврат ТабличныйДокументПечати;

КонецФункции


&НаКлиенте
Процедура ПечатьДоставокЯндекса(Команда)
	
	ТабличныйДокумент.Очистить();
	
	Если Не ЗначениеЗаполнено(Период.ДатаНачала) И Не ЗначениеЗаполнено(Период.ДатаОкончания)  Тогда
		Предупреждение("Укажите период!!");
		ТекущийЭлемент = Элементы.НачПериода;
		Возврат;
	КонецеСли;
	
	ТабличныйДокумент = ПечатьДоставокЯндексаНаСервере();

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РейсПриИзменении(Элемент)
	
	Объект.Доставка = ПредопределенноеЗначение("БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка");

КонецПроцедуры

&НаКлиенте
Процедура ДоставкаПриИзменении(Элемент)
	
	Объект.Рейс = ПредопределенноеЗначение("БизнесПроцесс.новаРейсМестнойДоставки.ПустаяСсылка");
	
КонецПроцедуры

//CeHbKA #3283 02.07.2019 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекущийЧас = Час(ТекущаяДата());
	ДатаРейса = ?(ТекущийЧас>=0 И ТекущийЧас < 21, ТекущаяДата(), ТекущаяДата()+86400);
	ЗаполнитьСписокРейсов();
	
	//Асеев 30.08.2022 (Задача № 4883)>>>
	Если ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУчетаОбщиеСрезПоследних.НеПечататьБланкиЗаказовПоЗаказамДоставки КАК НеПечататьБланкиЗаказовПоЗаказамДоставки,
		|	НастройкиУчетаОбщиеСрезПоследних.ПечатьБланковЗаказовКоличествоПозицийВЗаказе КАК ПечатьБланковЗаказовКоличествоПозицийВЗаказе
		|ИЗ
		|	РегистрСведений.НастройкиУчетаОбщие.СрезПоследних КАК НастройкиУчетаОбщиеСрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект, Выборка);
		КонецЕсли;
	КонецЕсли;
	//Асеев 30.08.2022 (Задача № 4883)<<<
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРейсов(ИсточникДеревоРейсов = Неопределено)
	
	Если ИсточникДеревоРейсов <> Неопределено Тогда
		НовоеДерево = ДанныеФормыВЗначение(ИсточникДеревоРейсов, Тип("ДеревоЗначений"));
		ЗначениеВРеквизитФормы(НовоеДерево, "ДеревоРейсовПоГруппам");
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рейс.Ссылка КАК Рейс,
		|	Рейс.ДатаРейса КАК ДатаРейса,
		|	Рейс.НомерПалетты КАК НомерПалетты
		|ИЗ
		|	Документ.Рейс КАК Рейс
		|ГДЕ
		|	Рейс.Проведен
		|	И Рейс.ДатаРейса = &ДатаРейса
		|	И Рейс.ТерминалДоставки = &ТерминалДоставки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПалетты";
	
	Запрос.УстановитьПараметр("ДатаРейса", НачалоДня(ДатаРейса));
	Запрос.УстановитьПараметр("ТерминалДоставки", ПараметрыСеанса.ТерминалДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Элементы.ФормаПечатьПоГруппам.Доступность = НЕ РезультатЗапроса.Пустой();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокРейсов = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НС = СписокРейсов.Добавить();
		НС.Значение = ВыборкаДетальныеЗаписи.Рейс;
		НС.Представление = ""+ВыборкаДетальныеЗаписи.НомерПалетты + " (Рейс "+ВыборкаДетальныеЗаписи.Рейс + ")";
		
	КонецЦикла;
	
	ДеревоРейсовПоГруппам.ПолучитьЭлементы().Очистить();
	
	НоваяГруппа = Истина;
	НомерГруппы = 1;
	
	Для каждого СтрокаСпискаРейс Из СписокРейсов Цикл
		
		ИндексСтроки = СписокРейсов.Индекс(СтрокаСпискаРейс);
		Если ИндексСтроки > 0 Тогда
			НоваяГруппа = ИндексСтроки%10 = 0;
		КонецЕсли; 
		
		Если НоваяГруппа Тогда
			
			СтрокаДереваГруппа = ДеревоРейсовПоГруппам.ПолучитьЭлементы().Добавить();
			СтрокаДереваГруппа.Значение = НомерГруппы;
			СтрокаДереваГруппа.Отметка = Истина;
			
			НомерГруппы = НомерГруппы + 1;	
			
			НоваяГруппа = Ложь;
		КонецЕсли;
		
		СтрокаРейс = СтрокаДереваГруппа.ПолучитьЭлементы().Добавить();
		СтрокаРейс.Значение = СтрокаСпискаРейс.Значение;
		СтрокаРейс.Отметка = Истина;
		
	КонецЦикла; 
		
КонецПроцедуры // ()

&НаКлиенте
Процедура ПечатьПоГруппамИзменитьСостав(Команда)
	
	ОткрытьФорму("Обработка.ПечатьБланковЗаказовНовый.Форма.ФормаПечатиПоГруппам", Новый Структура("ДеревоРейсовПоГруппам", ДеревоРейсовПоГруппам), ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьПоГруппам(Команда)
		
	ПечатьПоГруппамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПечатьПоГруппамНаСервере()

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	//Макет = ОбработкаОбъект.ПолучитьМакет("МакетСписокРейсовПоГруппам");
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетУрезанный2");
	МакетБланки = ОбработкаОбъект.ПолучитьМакет("БланкЗаказов");

	ВывестиСписокРейсовПоГруппам(Макет);
	ВывестиБланкиЗаказовПоГруппам(Макет, МакетБланки);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСписокРейсовПоГруппам(Макет)

	ОбластьЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтрокаГруппа = Макет.ПолучитьОбласть("СтрокаГруппа");
	ОбластьСтрокаРейс	= Макет.ПолучитьОбласть("СтрокаРейс");
	
	ОбластьЗаголовок.Параметры.Дата = Формат(ДатаРейса, "ДФ=dd.MM.yyyy");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	НоваяГруппа = Истина;
	НомерГруппы = 1;
	
	Для каждого СтрокаДереваГруппа Из ДеревоРейсовПоГруппам.ПолучитьЭлементы() Цикл
		
		Если НЕ СтрокаДереваГруппа.Отметка Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбластьСтрокаГруппа.Параметры.НомерГруппы = СтрокаДереваГруппа.Значение;
		ТабличныйДокумент.Вывести(ОбластьСтрокаГруппа);
		
		Сч = 0;
		
		Для каждого СтрокаДереваРейс Из СтрокаДереваГруппа.ПолучитьЭлементы() Цикл
			
			Если НЕ СтрокаДереваРейс.Отметка Тогда
				Продолжить;	
			КонецЕсли; 	
			
			ОбластьСтрокаРейс.Параметры.Рейс			= СтрокаДереваРейс.Значение;
			ОбластьСтрокаРейс.Параметры.НомерСтроки		= Сч+1;
			ОбластьСтрокаРейс.Параметры.Номер			= СтрокаДереваРейс.Значение.Номер;
			ОбластьСтрокаРейс.Параметры.Водитель		= СтрокаДереваРейс.Значение.РейсМестнойДоставки.Водитель;
			ОбластьСтрокаРейс.Параметры.ГосНомер		= СтрокаДереваРейс.Значение.РейсМестнойДоставки.Транспорт.НомерГосударственнойРегистрации;
			ОбластьСтрокаРейс.Параметры.НомерПалетты	= СтрокаДереваРейс.Значение.НомерПалетты;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаРейс);

		КонецЦикла; 	
		
	КонецЦикла; 
	//Для каждого СтрокаСпискаРейс Из СписокРейсов Цикл
	//	
	//	ИндексСтроки = СписокРейсов.Индекс(СтрокаСпискаРейс);
	//	Если ИндексСтроки > 0 Тогда
	//		НоваяГруппа = ИндексСтроки%10 = 0;
	//	КонецЕсли; 
	//	
	//	Если НоваяГруппа Тогда
	//		ОбластьСтрокаГруппа.Параметры.НомерГруппы = НомерГруппы;
	//		ТабличныйДокумент.Вывести(ОбластьСтрокаГруппа);
	//		
	//		НомерГруппы = НомерГруппы + 1;	
	//		
	//		НоваяГруппа = Ложь;
	//	КонецЕсли; 
	//					
	//	ОбластьСтрокаРейс.Параметры.Рейс			= СтрокаСпискаРейс.Значение;
	//	ОбластьСтрокаРейс.Параметры.НомерСтроки		= ИндексСтроки+1;
	//	ОбластьСтрокаРейс.Параметры.Номер			= СтрокаСпискаРейс.Значение.Номер;
	//	ОбластьСтрокаРейс.Параметры.Водитель		= СтрокаСпискаРейс.Значение.РейсМестнойДоставки.Водитель;
	//	ОбластьСтрокаРейс.Параметры.ГосНомер		= СтрокаСпискаРейс.Значение.РейсМестнойДоставки.Транспорт.НомерГосударственнойРегистрации;
	//	ОбластьСтрокаРейс.Параметры.НомерПалетты	= СтрокаСпискаРейс.Значение.НомерПалетты;
	//	
	//	ТабличныйДокумент.Вывести(ОбластьСтрокаРейс);
	//	
	//КонецЦикла; 
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры // ()

&НаСервере
Процедура ВывестиСписокЗаказовРейса(Рейс, ТабличныйДокумент, Макет)
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("СписокЗаказовЗаголовок");
	ОбластьШапка = Макет.Получитьобласть("СписокЗаказовШапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("СписокЗаказовСтрока");
	ОбластьТовар = Макет.ПолучитьОбласть("СписокЗаказовТовар");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.НомерГосударственнойРегистрации КАК ГосНомер,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель.Наименование КАК ВодительНаименование,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Наименование КАК ЭкспедиторНаименование,
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс.НомерПалетты КАК НомерПалетты
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РейсЗаказы.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РейсЗаказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.ВладелецТовара
	|		ИНАЧЕ ЗаборТовара.Контрагент
	|	КОНЕЦ КАК ВладелецТовара,
	|	ВЫБОР
	|		КОГДА РейсЗаказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.ТипОплаты
	|		ИНАЧЕ ЗаборТовара.ТипОплаты
	|	КОНЕЦ КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА РейсЗаказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.Номер
	|		ИНАЧЕ ЗаборТовара.Номер
	|	КОНЕЦ КАК Номер,
	|	ПриходДСПоОтчетуВодителя.Ссылка КАК ПриходДС
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Т_Рейс
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя КАК новаОтчетВодителя
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходДСПоОтчетуВодителя КАК ПриходДСПоОтчетуВодителя
	|				ПО новаОтчетВодителя.Ссылка = ПриходДСПоОтчетуВодителя.ОтчетВодителя
	|					И (ПриходДСПоОтчетуВодителя.Проведен)
	|			ПО Т_Рейс.РейсМестнойДоставки = новаОтчетВодителя.Рейс
	|		ПО (Т_Рейс.Ссылка = &Рейс)
	|			И РейсЗаказы.Ссылка = Т_Рейс.Ссылка
	|			И (НЕ РейсЗаказы.УдаленИзРейса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|		ПО РейсЗаказы.Заказ = ЗаборТовара.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
	|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке
	|ПОМЕСТИТЬ ВТ_ПараметрыКонтрагентов
	|ИЗ
	|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
	|			,
	|			Контрагент В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.ВладелецТовара КАК ВладелецТовара
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ПараметрыКонтрагентовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВТ_Заказы.Номер КАК НомерЗаказа,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ВладелецТовара.Родитель.ОсновнойМагазин = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВТ_Заказы.ВладелецТовара.Наименование
	|		ИНАЧЕ ВТ_Заказы.ВладелецТовара.Родитель.ОсновнойМагазин.Наименование
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование
	|		ИНАЧЕ ЗаборТовара.АдресДоставки
	|	КОНЕЦ КАК Адрес,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.Телефон
	|		ИНАЧЕ ЗаборТовара.Телефон
	|	КОНЕЦ КАК Телефон,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА новаМестнаяДоставка.ВремяПрибытияС
	|		ИНАЧЕ ЗаборТовара.ВремяДоставкиС
	|	КОНЕЦ КАК ВремяПрибытияС,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА новаМестнаяДоставка.ВремяПрибытияПо
	|		ИНАЧЕ ЗаборТовара.ВремяДоставкиПо
	|	КОНЕЦ КАК ВремяПрибытияПо,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.ОбщийВес
	|		ИНАЧЕ ЗаборТовара.ВесЗабора
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.ОбъёмЗаказа
	|		ИНАЧЕ ЗаборТовара.ОбъемЗабора
	|	КОНЕЦ КАК Объем,
	|	РеализацияТоваровУслуг.КоличествоМест КАК КоличествоМест,
	|	НЕ ВЗ_Контроль.ЗаказКонтроль ЕСТЬ NULL КАК Контроль,
	|	ЕСТЬNULL(ВЗ_Поездки.Поездки, 0) + 1 КАК Поездки,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.Контрагент.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КонтактноеЛицо,
	|	ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|		И ((ТипыОплат.Ссылка = ЗНАЧЕНИЕ(Справочник.ТипыОплат.БезналичныйРасчет)
	|					И НЕ ЕСТЬNULL(ВТ_ПараметрыКонтрагентов.ОтключитьПроверкуБНЗаказов, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ПодписаниеИВозвратСопрДокументов, ЛОЖЬ))
	|				И НЕ ЕСТЬNULL(ВТ_ПараметрыКонтрагентов.СопроводительныеДокументыНаходятсяВКоробке, ЛОЖЬ)
	|			ИЛИ ВТ_Заказы.ВладелецТовара.Код = ""Shop_758"") КАК Документы,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.НомерВнешнегоЗаказа
	|		ИНАЧЕ ЗаборТовара.НомерВнешнегоЗаказа
	|	КОНЕЦ КАК НомерИМ,
	|	НЕ ВозвратТоваровОтПокупателя.Номер ЕСТЬ NULL КАК ЕстьВозврат,
	|	ТипыОплат.Наименование КАК ТипОплаты,
	|	ЕСТЬNULL(ПриходДСПоОтчетуВодителяДоставки.СуммаЗаказаКОплате, 0) КАК СуммаЗаказа
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|			ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|			ПО РеализацияТоваровУслуг.Номер = ВозвратТоваровОтПокупателя.Номер
	|		ПО ВТ_Заказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияЗаказовРасширенный.Заказ КАК ЗаказКонтроль
	|		ИЗ
	|			РегистрСведений.СостоянияЗаказовРасширенный КАК СостоянияЗаказовРасширенный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|				ПО СостоянияЗаказовРасширенный.Заказ = ВТ_Заказы.Заказ
	|					И (СостоянияЗаказовРасширенный.ПричинаОтказа.СторонаПретензии = ЗНАЧЕНИЕ(Перечисление.СторонаПретензий.Компания))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияЗаказов.Заказ
	|		ИЗ
	|			РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|				ПО СостоянияЗаказов.Заказ = ВТ_Заказы.Заказ
	|					И (СостоянияЗаказов.ПричинаОтказа.СторонаПретензии = ЗНАЧЕНИЕ(Перечисление.СторонаПретензий.Компания))) КАК ВЗ_Контроль
	|		ПО ВТ_Заказы.Заказ = ВЗ_Контроль.ЗаказКонтроль
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(ИСТИНА) КАК Поездки,
	|			СостоянияЗаказов.Заказ КАК Заказ
	|		ИЗ
	|			ВТ_Заказы КАК ВТ_Заказы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	|				ПО ВТ_Заказы.Заказ = СостоянияЗаказов.Заказ
	|					И (СостоянияЗаказов.Регистратор ССЫЛКА Документ.новаОтчетВодителя)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостоянияЗаказов.Заказ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			КОЛИЧЕСТВО(ИСТИНА),
	|			СостоянияЗаказовРасширенный.Заказ
	|		ИЗ
	|			ВТ_Заказы КАК ВТ_Заказы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовРасширенный КАК СостоянияЗаказовРасширенный
	|				ПО ВТ_Заказы.Заказ = СостоянияЗаказовРасширенный.Заказ
	|					И (СостоянияЗаказовРасширенный.Регистратор ССЫЛКА Документ.новаОтчетВодителя)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостоянияЗаказовРасширенный.Заказ) КАК ВЗ_Поездки
	|		ПО ВТ_Заказы.Заказ = ВЗ_Поездки.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|		ПО ВТ_Заказы.Заказ = ЗаборТовара.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыКонтрагентов КАК ВТ_ПараметрыКонтрагентов
	|		ПО ВТ_Заказы.ВладелецТовара = ВТ_ПараметрыКонтрагентов.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	|		ПО ВТ_Заказы.ТипОплаты = ТипыОплат.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходДСПоОтчетуВодителя.Доставки КАК ПриходДСПоОтчетуВодителяДоставки
	|		ПО ВТ_Заказы.ПриходДС = ПриходДСПоОтчетуВодителяДоставки.Ссылка
	|			И ВТ_Заказы.Заказ = ПриходДСПоОтчетуВодителяДоставки.Доставка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнер,
	|	НомерЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияЗаказов.Заказ КАК Заказ,
	|	СостоянияЗаказов.Период КАК Период,
	|	ВЫБОР СостоянияЗаказов.ПричинаОтказа.СторонаПретензии
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СторонаПретензий.Компания)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СторонаПретензий.Партнер)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Вина
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	|		ПО ВТ_Заказы.Заказ = СостоянияЗаказов.Заказ
	|			И (СостоянияЗаказов.Регистратор ССЫЛКА Документ.новаОтчетВодителя)
	|			И (СостоянияЗаказов.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияЗаказовРасширенный.Заказ,
	|	СостоянияЗаказовРасширенный.Период,
	|	ВЫБОР СостоянияЗаказовРасширенный.ПричинаОтказа.СторонаПретензии
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СторонаПретензий.Компания)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СторонаПретензий.Партнер)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовРасширенный КАК СостоянияЗаказовРасширенный
	|		ПО ВТ_Заказы.Заказ = СостоянияЗаказовРасширенный.Заказ
	|			И (СостоянияЗаказовРасширенный.Регистратор ССЫЛКА Документ.новаОтчетВодителя)
	|			И (СостоянияЗаказовРасширенный.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Заказ,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.КодМаркировки = """"
	|			ТОГДА РеализацияТоваровУслугТовары.ШтрихкодНоменклатуры.Код
	|		ИНАЧЕ РеализацияТоваровУслугТовары.КодМаркировки
	|	КОНЕЦ КАК ШКТовара,
	|	РеализацияТоваровУслугТовары.КодМаркировки КАК КодМаркировки,
	|	РеализацияТоваровУслугМестаЗаказа.ШтрихкодМеста КАК ШКМеста,
	|	1 КАК Порядок,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.МестаЗаказа КАК РеализацияТоваровУслугМестаЗаказа
	|			ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслугМестаЗаказа.Ссылка
	|				И РеализацияТоваровУслугТовары.КлючСвязиМеста = РеализацияТоваровУслугМестаЗаказа.КлючСвязиМеста
	|		ПО ВТ_Заказы.Заказ = РеализацияТоваровУслугТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	|	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
	|	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Артикул,
	|	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Наименование,
	|	РеализацияТоваровУслугПодарочныеПозиции.Количество,
	|	РеализацияТоваровУслугПодарочныеПозиции.ШтрихкодНоменклатуры,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугПодарочныеПозиции.КодМаркировки = """"
	|			ТОГДА РеализацияТоваровУслугПодарочныеПозиции.ШтрихкодНоменклатуры.Код
	|		ИНАЧЕ РеализацияТоваровУслугПодарочныеПозиции.КодМаркировки
	|	КОНЕЦ,
	|	РеализацияТоваровУслугПодарочныеПозиции.КодМаркировки,
	|	NULL,
	|	2,
	|	РеализацияТоваровУслугПодарочныеПозиции.НомерСтроки,
	|	РеализацияТоваровУслугПодарочныеПозиции.Цена
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	|		ПО ВТ_Заказы.Заказ = РеализацияТоваровУслугПодарочныеПозиции.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
	|	ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.КодМаркировки = """"
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры.Код
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.КодМаркировки
	|	КОНЕЦ КАК ШКТовара,
	|	ВозвратТоваровОтПокупателяТовары.КодМаркировки КАК КодМаркировки,
	|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	|	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|			ПО ВозвратТоваровОтПокупателя.Ссылка = ВозвратТоваровОтПокупателяТовары.Ссылка
	|		ПО (ВТ_Заказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг)
	|			И ВТ_Заказы.Номер = ВозвратТоваровОтПокупателя.Номер";
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатПакета[0].Выбрать();
	Выборка.Следующий();
	
	ПараметрыОбласти = ОбластьЗаголовок.Параметры;
	ПараметрыОбласти.ГосНомер = Строка(Выборка.ГосНомер) + Символы.ПС + Строка(Выборка.НомерПалетты);
	Если Выборка.ЭкспедиторНаименование = Null Тогда
		ПараметрыОбласти.Водитель = Выборка.ВодительНаименование;
	Иначе
		ПараметрыОбласти.Водитель = Строка(Выборка.ВодительНаименование) + Символы.ПС + Строка(Выборка.ЭкспедиторНаименование);
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	ВысотаСтрок = 27;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ВысотаСтрок = ВысотаСтрок + 39;
	
	Выборка = РезультатПакета[3].Выбрать();
	
	ТаблицаВины = РезультатПакета[4].Выгрузить();
	СтруктураЗаказ = Новый Структура("Заказ");
	
	ТаблицаТоваров = РезультатПакета[5].Выгрузить();
	ТаблицаТоваров.Индексы.Добавить("Заказ");
	ТаблицаВозвратов = РезультатПакета[6].Выгрузить();
	ТаблицаВозвратов.Индексы.Добавить("Заказ");
	
	ТаблицаТоваровЗаказаВывод = ТаблицаТоваров.СкопироватьКолонки();
	КолонкиТаблицы = ТаблицаТоваровЗаказаВывод.Колонки;
	КолонкиТаблицы.Удалить("Количество");
	КолонкиТаблицы.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	
	ПараметрыОбласти = ОбластьСтрока.Параметры;
	ПараметрыОбластиТовар = ОбластьТовар.Параметры;
	
	НомерСтроки = 0;
	ЛимитВысотыСтрок = 835;//820,835
	КоличествоСтрокТовара = 4;
	
	ТипРТУ = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	
	СтруктураТовар = Новый Структура("Номенклатура,Цена");
	
	ЦветВыделения = Новый Цвет(213,213,213);
	
	Пока Выборка.Следующий() Цикл
		СтруктураЗаказ.Заказ = Выборка.Заказ;
		
		//определить товары по заказу
		КоличествоТоваров = 0;
		ЕстьВозврат = Ложь;
		Если ТипЗнч(Выборка.Заказ) = ТипРТУ Тогда
			ТаблицаТоваровЗаказа = ТаблицаТоваров.Скопировать(СтруктураЗаказ);
			КоличествоТоваровЗаказа = ТаблицаТоваровЗаказа.Количество();
			ЕстьВозврат = Выборка.ЕстьВозврат;
			Если ЕстьВозврат Тогда
				ТаблицаВозвратовЗаказа = ТаблицаВозвратов.Скопировать(СтруктураЗаказ);
				ЕстьВозврат = ТаблицаВозвратовЗаказа.Количество();
			КонецЕсли;
			Если ЕстьВозврат Тогда
				//учесть товары возврата
				Если КоличествоТоваровЗаказа Тогда
					//положительный и отрицательный остаток = (товары рту - товары возврата)
					ТаблицаТоваровЗаказа.Сортировать("Порядок,НомерСтроки");
					СтрокиВозвратаКУдалению = Новый Массив;
					Для Каждого СтрокаТовараЗаказа Из ТаблицаТоваровЗаказа Цикл
						ЗаполнитьЗначенияСвойств(СтруктураТовар, СтрокаТовараЗаказа);
						СтрокиВозвратаЗаказа = ТаблицаВозвратовЗаказа.НайтиСтроки(СтруктураТовар);
						Если СтрокиВозвратаЗаказа.Количество() Тогда
							Для Каждого СтрокаВозвратаЗаказа Из СтрокиВозвратаЗаказа Цикл
								КоличествоКСписанию = Мин(СтрокаТовараЗаказа.Количество, СтрокаВозвратаЗаказа.Количество);
								Если КоличествоКСписанию Тогда
									СтрокаТовараЗаказа.Количество = СтрокаТовараЗаказа.Количество - КоличествоКСписанию;
									СтрокаВозвратаЗаказа.Количество = СтрокаВозвратаЗаказа.Количество - КоличествоКСписанию;
									Если Не СтрокаВозвратаЗаказа.Количество Тогда
										СтрокиВозвратаКУдалению.Добавить(СтрокаВозвратаЗаказа);
									КонецЕсли;
								КонецЕсли;
								Если Не СтрокаТовараЗаказа.Количество Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если СтрокиВозвратаКУдалению.Количество() Тогда
								Для Каждого СтрокаВозвратаЗаказа Из СтрокиВозвратаКУдалению Цикл
									ТаблицаВозвратовЗаказа.Удалить(СтрокаВозвратаЗаказа);
								КонецЦикла;
								СтрокиВозвратаКУдалению.Очистить();
							КонецЕсли;
							Если СтрокаТовараЗаказа.Количество Тогда
								ЗаполнитьЗначенияСвойств(ТаблицаТоваровЗаказаВывод.Добавить(), СтрокаТовараЗаказа);
							КонецЕсли;
						Иначе
							ЗаполнитьЗначенияСвойств(ТаблицаТоваровЗаказаВывод.Добавить(), СтрокаТовараЗаказа);
						Конецесли;
					КонецЦикла;
					Если ТаблицаВозвратовЗаказа.Количество() Тогда
						//остался возврат
						ТаблицаВозвратовЗаказа.Сортировать("НомерСтроки");
						Для Каждого СтрокаВозвратаЗаказа Из ТаблицаВозвратовЗаказа Цикл
							СтрокаТовараЗаказаВывод = ТаблицаТоваровЗаказаВывод.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТовараЗаказаВывод, СтрокаВозвратаЗаказа);
							СтрокаТовараЗаказаВывод.Количество = -СтрокаТовараЗаказаВывод.Количество;
						КонецЦикла;
					Иначе
						ЕстьВозврат = Ложь;
					КонецЕсли;
				Иначе
					//только товары возврата
					ТаблицаВозвратовЗаказа.Сортировать("НомерСтроки");
					Для Каждого СтрокаВозвратаЗаказа Из ТаблицаВозвратовЗаказа Цикл
						СтрокаТовараЗаказаВывод = ТаблицаТоваровЗаказаВывод.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТовараЗаказаВывод, СтрокаВозвратаЗаказа);
						СтрокаТовараЗаказаВывод.Количество = -СтрокаТовараЗаказаВывод.Количество;
					КонецЦикла;
				КонецЕсли;
			Иначе
				//только товары рту
				Если КоличествоТоваровЗаказа Тогда
					ТаблицаТоваровЗаказа.Сортировать("Порядок,НомерСтроки");
					Для Каждого СтрокаТовараЗаказа Из ТаблицаТоваровЗаказа Цикл
						ЗаполнитьЗначенияСвойств(ТаблицаТоваровЗаказаВывод.Добавить(), СтрокаТовараЗаказа);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			КоличествоТоваров = Мин(ТаблицаТоваровЗаказаВывод.Количество(), КоличествоСтрокТовара);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		ВысотаСтрокТоваров = 12.5 * КоличествоТоваров;
		Если ВысотаСтрок + 50 + ВысотаСтрокТоваров > ЛимитВысотыСтрок Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьШапка);
			ВысотаСтрок = 39;
		КонецЕсли;
		
		ПараметрыОбласти.Заполнить(Выборка);
		ПараметрыОбласти.НомерСтроки = НомерСтроки;
		ПараметрыОбласти.НомерЗаказа = СокрЛП(Выборка.НомерЗаказа);
		ИнтервалВЗаказе = Формат(Выборка.ВремяПрибытияС, "ДФ=HH:mm") + " - " + Формат(Выборка.ВремяПрибытияПо, "ДФ=HH:mm") + Символы.ПС + Выборка.ТипОплаты;
		Если Выборка.СуммаЗаказа Тогда
			ИнтервалВЗаказе = ИнтервалВЗаказе + Символы.ПС + Формат(Выборка.СуммаЗаказа, "ЧДЦ=2");
		КонецЕсли;
		ПараметрыОбласти.ИнтервалВЗаказе = ИнтервалВЗаказе;
		Если Выборка.КонтактноеЛицо <> "" Тогда
			ПараметрыОбласти.Телефон = ПараметрыОбласти.Телефон + Символы.ПС + Выборка.КонтактноеЛицо;
		КонецЕсли;
		
		Если Выборка.Документы И ЕстьВозврат Тогда
			СтрокаДокументы = "Документы/Возврат";
		ИначеЕсли Выборка.Документы Тогда
			СтрокаДокументы = "Документы";
		ИначеЕсли ЕстьВозврат Тогда
			СтрокаДокументы = "Возврат";
		Иначе
			СтрокаДокументы = "";
		КонецЕсли;
		ПараметрыОбласти.Документы = СтрокаДокументы;
		
		
		ВинаСтрижа = Ложь;
		
		КоличествоПоездок = Выборка.Поездки - 1;
		Если КоличествоПоездок Тогда
			ТаблицаВиныЗаказа = ТаблицаВины.Скопировать(СтруктураЗаказ, "Период,Вина");
			ТаблицаВиныЗаказа.Сортировать("Период Убыв");
			НомерП = 0;
			Для Каждого СтрокаВины Из ТаблицаВиныЗаказа Цикл
				НомерП = НомерП + 1;
				Если НомерП > 3 Тогда
					Прервать;
				КонецЕсли;
				Вина = СтрокаВины.Вина;
				Если Вина = 1 Тогда
					//Вина = Строка(КоличествоПоездок) + "-Вина Ст";
					ВинаСтрижа = Истина;
				//ИначеЕсли Вина = 2 Тогда
				//	Вина = Строка(КоличествоПоездок) + "-Вина Кл";
				//Иначе
				//	Вина = Строка(КоличествоПоездок) + "-Вина ?";
				КонецЕсли;
				//ПараметрыОбласти["П" + НомерП] = Вина;
				//КоличествоПоездок = КоличествоПоездок - 1;
			КонецЦикла;
		//	Пока НомерП < 3 Цикл
		//		НомерП = НомерП + 1;
		//		ПараметрыОбласти["П" + НомерП] = "";
		//	КонецЦикла;
		//Иначе
		//	ПараметрыОбласти.П1 = "";
		//	ПараметрыОбласти.П2 = "";
		//	ПараметрыОбласти.П3 = "";
		КонецЕсли;
		
		Если ВинаСтрижа Тогда
			ПараметрыОбласти.Поездки = Строка(Выборка.Поездки) + " (!!!)";
		КонецЕсли;
		
		ОбластьОформленияСтроки = ТабличныйДокумент.Вывести(ОбластьСтрока);
		ВысотаСтрок = ВысотаСтрок + 50;
		Если Выборка.Контроль Тогда
			ТабличныйДокумент.Область(ОбластьОформленияСтроки.Верх, 2, ОбластьОформленияСтроки.Низ, 2).ЦветФона = ЦветВыделения;
		КонецЕсли;
		Если ВинаСтрижа Тогда
			ТабличныйДокумент.Область(ОбластьОформленияСтроки.Верх, 10, ОбластьОформленияСтроки.Низ, 10).ЦветФона = ЦветВыделения;
		КонецЕсли;
		Если Выборка.Документы Или ЕстьВозврат Тогда
			ТабличныйДокумент.Область(ОбластьОформленияСтроки.Верх, 3, ОбластьОформленияСтроки.Низ, 3).ЦветФона = ЦветВыделения;
		КонецЕсли;
		
		//вывести товары
		Если КоличествоТоваров Тогда
			Для Каждого СтрокаТовара Из ТаблицаТоваровЗаказаВывод Цикл
				ПараметрыОбластиТовар.Заполнить(СтрокаТовара);
				ОбластьОформленияСтроки = ТабличныйДокумент.Вывести(ОбластьТовар);
				Если СтрокаТовара.Количество < 0 Тогда
					ТабличныйДокумент.Область(ОбластьОформленияСтроки.Верх, 1, ОбластьОформленияСтроки.Низ, 10).ЦветФона = ЦветВыделения;
				КонецЕсли;
				КоличествоТоваров = КоличествоТоваров - 1;
				Если Не КоличествоТоваров Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ТаблицаТоваровЗаказаВывод.Очистить();
			ВысотаСтрок = ВысотаСтрок + ВысотаСтрокТоваров;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБланкиЗаказовПоГруппам(Макет, МакетБланки)
	
	//ОбластьЗаголовокРейса = Макет.ПолучитьОбласть("ЗаголовокРейса");
	ОбластьСтрокаГруппа = Макет.ПолучитьОбласть("СтрокаГруппа");
	
	Для каждого СтрокаДереваГруппа Из ДеревоРейсовПоГруппам.ПолучитьЭлементы() Цикл
		
		Если НЕ СтрокаДереваГруппа.Отметка Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбластьСтрокаГруппа.Параметры.НомерГруппы = СтрокаДереваГруппа.Значение;
		ТабличныйДокумент.Вывести(ОбластьСтрокаГруппа);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		Для каждого СтрокаДереваРейс Из СтрокаДереваГруппа.ПолучитьЭлементы() Цикл
			
			Если НЕ СтрокаДереваРейс.Отметка Тогда
				Продолжить;	
			КонецЕсли; 	
			
			//Асеев 10.10.2022 (Задача № 4909)>>>
			//ОбластьЗаголовокРейса.Параметры.ГосНомер		= СтрокаДереваРейс.Значение.РейсМестнойДоставки.Транспорт.НомерГосударственнойРегистрации;
			//ОбластьЗаголовокРейса.Параметры.Водитель		= СтрокаДереваРейс.Значение.РейсМестнойДоставки.Водитель;
			//ТабличныйДокумент.Вывести(ОбластьЗаголовокРейса);
			ВывестиСписокЗаказовРейса(СтрокаДереваРейс.Значение, ТабличныйДокумент, МакетБланки);
			//Асеев 10.10.2022 (Задача № 4909)<<<
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			НапечататьЗаказ(СтрокаДереваРейс.Значение, ТабличныйДокумент);
			
			//CeHbKA 02.07.2019 #3283
			Событие = Справочники.СобытияКонтроляВремени.РаспечаткаБланковЗаказов;
			УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, СтрокаДереваРейс.Значение, Истина);
			//CeHbKA 02.07.2019 #3283
									
		КонецЦикла;
		
	КонецЦикла;		
	//Для каждого СтрокаСпискаРейс Из СписокРейсов Цикл
	//	
	//	ТабДок = Новый ТабличныйДокумент;
	//	
	//	ОбластьЗаголовокРейса.Параметры.ГосНомер		= СтрокаСпискаРейс.Значение.РейсМестнойДоставки.Транспорт.НомерГосударственнойРегистрации;
	//	ОбластьЗаголовокРейса.Параметры.Водитель		= СтрокаСпискаРейс.Значение.РейсМестнойДоставки.Водитель;
	//	ТабДок.Вывести(ОбластьЗаголовокРейса);
	//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	//			
	//	ОбработкаОбъект.ПечатьПоРейсу(СтрокаСпискаРейс.Значение, ТабДок);

	//	//CeHbKA 02.07.2019 #3283
	//	Событие = Справочники.СобытияКонтроляВремени.РаспечаткаБланковЗаказов;
	//	УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, Объект.Рейс, Истина);
	//	//CeHbKA 02.07.2019 #3283
	//	
	//	ТабличныйДокумент.Вывести(ТабДок);
	//	
	//КонецЦикла; 	
	
КонецПроцедуры // ()

&НаСервере
Процедура НапечататьЗаказ(Доставка, ТабДок)
	
	ОбработкаОбъект = Обработки.ПечатьБланковЗаказовНовый.Создать();
	//Асеев 30.08.2022 (Задача № 4883)>>>
	ОбработкаОбъект.НеПечататьБланкиЗаказовПоЗаказамДоставки = Объект.НеПечататьБланкиЗаказовПоЗаказамДоставки;
	ОбработкаОбъект.ПечатьБланковЗаказовКоличествоПозицийВЗаказе = Объект.ПечатьБланковЗаказовКоличествоПозицийВЗаказе;
	//Асеев 30.08.2022 (Задача № 4883)<<<
	ОбработкаОбъект.ПечатьПоРейсу(Доставка, ТабДок);

КонецПроцедуры // ()
 
&НаКлиенте
Процедура ДатаРейсаПриИзменении(Элемент)
	ЗаполнитьСписокРейсов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьСписокРейсов(ВыбранноеЗначение);
	
КонецПроцедуры
 
//CeHbKA #3283 02.07.2019 
