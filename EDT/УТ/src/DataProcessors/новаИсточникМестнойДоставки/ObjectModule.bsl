#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Фильтр журнала доставок по точке маршрута.
//
Перем Роль Экспорт; // <СправочникСсылка.новаРоли>

// Если Истина, то журнал отображает завершенные (архивные) доставки.
//
Перем Архив Экспорт; // <Булево>

// Фильтр журнала доставок по этапу перевозки.
//
Перем ЭтапПеревозки Экспорт; // <ЭтапПеревозки>

// Если Истина, то журнал будет содержать кнопки группового выделения.
//
Перем КнопкиГрупповогоВыделения Экспорт; // <Булево>

// Если Истина, то журнал будет содержать кнопки оперативной группировки районов.
//
Перем КнопкиГруппировкиРайонов Экспорт; // <Булево>

// Если Истина, то журнал будет содержать кнопки переноса доставок на другую дату.
//
Перем ПереносДоставки Экспорт; // <Булево>

// Если Истина, то журнал будет содержать кнопку отмены доставок.
//
Перем ОтменаДоставки Экспорт; // <Булево>

// Если Истина, то журнал будет содержать кнопку переноса старых доставок.
//
Перем ПланированиеДоставки Экспорт; // <Булево>

// Объект, содержащий табличную часть "Категории" - для отбора по категориям транспорта.
//
Перем КонтейнерКатегорий Экспорт; // <ПроизвольныйОбъект>

// Форма планирования доставки по карте, являющаяся одновременно и интерфейсом карты.
//
Перем икПодборПоКарте Экспорт; // <БизнесПроцесс.новаПланированиеМестнойДоставки.Форма.ПланированиеДоставкиПоКарте>

// Соответствие между объектами карты и строками дерева доставок.
//
Перем соСтрокиОбъектов Экспорт; // <Соответствие>

// Идентификатор первого объекта карты.
//
Перем ИдПервогоОбъекта Экспорт; // <Число>

Перем ИдПоследнегоОбъекта;
Перем соСкрытыеДоставки;
Перем тзШаблонПримитивов;
Перем ОсновнаяТочка;
Перем соИсключенныеИзРейсовДоставки;

Перем ЖурналНачалоПериода, ЖурналКонецПериода, Рейс;
Перем ПутьДоставкиОтбораПоРейсу;

Перем Вес;
Перем Объем;
Перем КоличествоЕдиницПеревозки;
Перем КоличествоЗаказов;
Перем ВсеТочкиДоставки;
Перем ВсеКонтрагенты;

Перем ОтборПоПериоду;

Перем ОтборДоставокПоПериоду;
Перем ЗначениеОсновнойКатегории;
Перем ТаблицаОсновногоБизнесПроцесса;

Перем соКартинкиДействий;

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	Роль = Неопределено;
	Архив = Неопределено;
	ЭтапПеревозки = Неопределено;
	КнопкиГрупповогоВыделения = Неопределено;
	КнопкиГруппировкиРайонов = Неопределено;
	ПереносДоставки = Неопределено;
	ОтменаДоставки = Неопределено;
	ПланированиеДоставки = Неопределено;
	КонтейнерКатегорий = Неопределено;
	икПодборПоКарте = Неопределено;
	соСтрокиОбъектов = Неопределено;
	ИдПервогоОбъекта = Неопределено;
	ИдПоследнегоОбъекта = Неопределено;
	соСкрытыеДоставки = Неопределено;
	тзШаблонПримитивов = Неопределено;
	ОсновнаяТочка = Неопределено;
	соИсключенныеИзРейсовДоставки = Неопределено;
	ЖурналНачалоПериода = Неопределено;
	ЖурналКонецПериода = Неопределено;
	Рейс = Неопределено;
	ПутьДоставкиОтбораПоРейсу = Неопределено;
	Вес = Неопределено;
	Объем = Неопределено;
	КоличествоЕдиницПеревозки = Неопределено;
	КоличествоЗаказов = Неопределено;
	ВсеТочкиДоставки = Неопределено;
	ВсеКонтрагенты = Неопределено;
	ОтборПоПериоду = Неопределено;
	ОтборДоставокПоПериоду = Неопределено;
	ЗначениеОсновнойКатегории = Неопределено;
	ТаблицаОсновногоБизнесПроцесса = Неопределено;
	соКартинкиДействий = Неопределено;
	
КонецПроцедуры

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если ДанныеСтроки.Группировка = NULL Тогда
		Если ДанныеСтроки.ОтсутствуетНаСкладе = Истина Тогда
				ОформлениеСтроки.ЦветФона = Новый Цвет(219, 112, 147);
		КонецЕсли;		

		Если ЗначениеЗаполнено(ДанныеСтроки.Вид) Тогда
			Если КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = Неопределено Тогда
				ОформлениеСтроки.Ячейки.Вид.УстановитьКартинку(соКартинкиДействий[ДанныеСтроки.Вид]);
			Иначе	
				ОформлениеСтроки.Ячейки[КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии].УстановитьКартинку(соКартинкиДействий[ДанныеСтроки.Вид]);
			КонецЕсли; 		
			
			Если ДанныеСтроки.Вид = Перечисления.новаВидыМестнойДоставки.ВнешнееПеремещение Тогда
				ОформлениеСтроки.ЦветФона = Новый Цвет(240, 128, 128);
			ИначеЕсли ДанныеСтроки.Вид = Перечисления.новаВидыМестнойДоставки.ВнутреннееПеремещение Тогда		
				ОформлениеСтроки.ЦветФона = Новый Цвет(246, 222, 179);
			ИначеЕсли ДанныеСтроки.Вид = Перечисления.новаВидыМестнойДоставки.Погрузка Тогда							
				ОформлениеСтроки.ЦветФона = Новый Цвет(208, 255, 208);
				
			Иначе
				
			КонецЕсли;
		Иначе		
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Долгота) Или Не ЗначениеЗаполнено(ДанныеСтроки.Широта) Тогда
			ОформлениеСтроки.ЦветТекста = Новый Цвет(240, 128, 128);
		КонецЕсли;

	Иначе
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
		
		Если КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "ОсновнойРайон" Тогда
			Если ТипЗнч(ДанныеСтроки.ОсновнойРайон) = Тип("СправочникСсылка.новаГруппыРайонов") Тогда
				ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 0, 255);		
			КонецЕсли;
			
		ИначеЕсли КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "ОсновнаяТочка" Тогда
			ОформлениеСтроки.Ячейки.ОсновнаяТочка.УстановитьТекст(ДанныеСтроки.ОсновнойКонтрагент_Пред);
		КонецЕсли;
	КонецЕсли;            
КонецПроцедуры

Процедура ПросуммироватьСтрокуДоставок(Строка)
	Если Строка.Источник <> ЭтотОбъект Тогда Возврат; КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Доставка) Тогда
		Вес = Вес + Строка.Вес;
		Объем = Объем + Строка.Объем;
		КоличествоЕдиницПеревозки = КоличествоЕдиницПеревозки + Строка.КоличествоЕдиницПеревозки;
		КоличествоЗаказов = КоличествоЗаказов + Строка.КоличествоЗаказов;
		
		Если ВсеТочкиДоставки.НайтиПоЗначению(Строка.ОсновнаяТочка) = Неопределено Тогда
			ВсеТочкиДоставки.Добавить(Строка.ОсновнаяТочка);
		КонецЕсли;	
		Если ВсеКонтрагенты.НайтиПоЗначению(Строка.ОсновнойКонтрагент) = Неопределено Тогда
			ВсеКонтрагенты.Добавить(Строка.ОсновнойКонтрагент);
		КонецЕсли;	
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из Строка.Строки Цикл
		ПросуммироватьСтрокуДоставок(ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
	ИначеЕсли Событие = "СнятьПометкуНетНаСкладе" Тогда
		Возврат Истина;
		
	ИначеЕсли Событие = "АктивизированаСтрока" Тогда
		Вес = 0;
		Объем = 0;
		КоличествоЕдиницПеревозки = 0;
		КоличествоЗаказов = 0;
		ВсеТочкиДоставки = Новый СписокЗначений();
		ВсеКонтрагенты = Новый СписокЗначений();
		
		Если Журнал.Дерево.ВыделенныеСтроки.Количество() = 1 Тогда
			СтрокиЖурнала = Журнал.Дерево.Значение.Строки;
			ТипКоличества = "Все";
		Иначе	     
			СтрокиЖурнала = Журнал.Дерево.ВыделенныеСтроки;
			ТипКоличества = "Выд";
		КонецЕсли;	
		
		//Для Каждого ВыделеннаяСтрока Из СтрокиЖурнала Цикл
		//	Если ВыделеннаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
		//	ПросуммироватьСтрокуДоставок(ВыделеннаяСтрока);
		//КонецЦикла;
		
		Текст = "";
		
		Если Вес > 0 Тогда
			Текст = Текст + ?(Текст = "", ТипКоличества+": ", " ") + Формат(Вес, "ЧЦ=15; ЧДЦ=2; ЧН=") + " кг";
		КонецЕсли;
		
		Если Объем > 0 Тогда
			Текст = Текст + ?(Текст = "", ТипКоличества+": ", " ") + Формат(Объем, "ЧЦ=10; ЧДЦ=3; ЧН=") + " куб. м";
		КонецЕсли;
		
		Если КоличествоЕдиницПеревозки > 0 Тогда
			Текст = Текст + ?(Текст = "", ТипКоличества+": ", " ") + Формат(КоличествоЕдиницПеревозки, "ЧЦ=10; ЧДЦ=2; ЧН=") + " мест";
		КонецЕсли;
		
		Если КоличествоЗаказов > 0 Тогда
			Текст = Текст + ?(Текст = "", ТипКоличества+": ", " ") + КоличествоЗаказов + " шт";    		
		КонецЕсли; 
		
		Если ВсеТочкиДоставки.Количество() > 0 Тогда
			Текст = Текст + ?(Текст = "", ТипКоличества+": ", " ") + ВсеТочкиДоставки.Количество() + " точки";    		
		КонецЕсли; 
		
		Если ВсеКонтрагенты.Количество() > 0 Тогда
			Текст = Текст + ?(Текст = "", ТипКоличества+": ", " ") + ВсеКонтрагенты.Количество() + " клиент(а)";    		
		КонецЕсли; 
		
		Журнал.УстановитьТекстЗаголовка(Текст);
		
	ИначеЕсли Событие = "УстановленФильтр" Тогда
		Если Параметр1.Свойство("ДатаНачала") Тогда
			ЖурналНачалоПериода = Параметр1.ДатаНачала;
		КонецЕсли;
		Если Параметр1.Свойство("ДатаКонца") Тогда
			Если ПереносДоставки Тогда
				ЖурналКонецПериода = НачалоДня(Параметр1.ДатаКонца) - 1;
				Журнал.УстановитьЗначениеИнструмента("ДатаПереноса", Параметр1.ДатаКонца);
			Иначе
				ЖурналКонецПериода = Параметр1.ДатаКонца;
			КонецЕсли;
		КонецЕсли;
		Если Параметр1.Свойство("Рейс") Тогда
			Рейс = Параметр1.Рейс;
		КонецЕсли;
		Если Параметр1.Свойство("ОсновнаяТочка") Тогда
	    	ОсновнаяТочка = Параметр1.ОсновнаяТочка;
		КонецЕсли;
		СформироватьОтбор();
		
	ИначеЕсли Событие = "ДобавленыДанныеВДерево" Тогда
		Если икПодборПоКарте <> Неопределено Тогда
			//Если тзШаблонПримитивов = Неопределено Тогда
			//	тзШаблонПримитивов = новаКарты.СоздатьТаблицуПримитивов(4, 1);
			//КонецЕсли;
			//
			//соСтрокиОбъектов = Новый Соответствие;
			//соСкрытыеДоставки = Новый Соответствие;
			//
			//Объект = ОтобразитьОбъектыНаКарте(Параметр1, ИдПервогоОбъекта, Ложь);
			//			
			//ПоследнийОбъект = Объект;
			//Объект = Объект + 1;
			//Пока Объект <= ИдПоследнегоОбъекта Цикл
			//	новаКонтекст.МенеджерКарт.СкрытьОбъект(икПодборПоКарте, Объект);
			//	
			//	Объект = Объект + 1;
			//КонецЦикла;
			//ИдПоследнегоОбъекта = ПоследнийОбъект;
			//
			//новаКонтекст.МенеджерКарт.ОбновитьИнтерфейсКарты(икПодборПоКарте);
			//новаКонтекст.МенеджерКарт.АктивизироватьИнтерфейс(икПодборПоКарте);
			//
			//соИсключенныеИзРейсовДоставки = Новый Соответствие;
		КонецЕсли;
		
		Если ПланированиеДоставки Тогда
			Если ЗначениеЗаполнено(ЖурналНачалоПериода) И ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
				Запрос = Новый Запрос;
				
				ПутьДоставки = "Задачи.БизнесПроцесс.Доставка";
				
				мсТекущиеТочкиДоставки = новаМестнаяДоставка.ПолучитьТекущиеТочкиДоставки(новаКонтекст);
				Если мсТекущиеТочкиДоставки.Количество() > 0 Тогда
					ОТБОР_ТОЧЕК_ДОСТАВКИ = " И " + ПутьДоставки + ".ТочкаОтправления В (&ТекущиеТочкиДоставки)";
					Запрос.УстановитьПараметр("ТекущиеТочкиДоставки", мсТекущиеТочкиДоставки);
				Иначе
					ОТБОР_ТОЧЕК_ДОСТАВКИ = "";
				КонецЕсли;
				
				мсТекущиеРайоны = новаМестнаяДоставка.ПолучитьТекущиеРайоны(новаКонтекст);
				Если мсТекущиеРайоны.Количество() > 0 Тогда
					РАЙОНЫ_ОТБОРА = "
					|ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.новаРайоныАдресов КАК РайоныОтбора
					|ПО
					|	РайоныОтбора.Классификатор = &КлассификаторРайонов И РайоныОтбора.Адрес = " + ПутьДоставки +".ОсновнаяТочка.Адрес";
					ОТБОР_РАЙОНОВ = " И РайоныОтбора.Район В (&ТекущиеРайоны)";
					Запрос.УстановитьПараметр("ТекущиеРайоны", мсТекущиеРайоны);
					Запрос.УстановитьПараметр("КлассификаторРайонов", новаКарты.ПолучитьТекущийКлассификаторРайонов());
				Иначе
					РАЙОНЫ_ОТБОРА = "";
					ОТБОР_РАЙОНОВ = "";
				КонецЕсли;
				
				Запрос.Текст = "ВЫБРАТЬ
				|	КОЛИЧЕСТВО(Задачи.Ссылка) КАК Количество
				|ИЗ
				|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(&Роль, НЕ Выполнена
				| И БизнесПроцесс.Доставка.ВремяОтправленияС < &ЖурналНачалоПериода
				| И БизнесПроцесс.Доставка.ВремяПрибытияС < &ЖурналНачалоПериода) КАК Задачи
				|" + РАЙОНЫ_ОТБОРА + "
				|ГДЕ Истина " + ОТБОР_ТОЧЕК_ДОСТАВКИ + ОТБОР_РАЙОНОВ;
				
				Запрос.УстановитьПараметр("Роль", Роль);
				Запрос.УстановитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
				
				КоличествоДоставокПрошлыхПериодов = Запрос.Выполнить().Выгрузить()[0].Количество;
				Если икПодборПоКарте = Неопределено Тогда
					Если КоличествоДоставокПрошлыхПериодов = 0 Тогда
						Журнал.УстановитьТекстДействия("");
					Иначе
						Журнал.УстановитьТекстДействия(Строка(КоличествоДоставокПрошлыхПериодов) + " старых!");
					КонецЕсли;
				Иначе
					икПодборПоКарте.УстановитьКоличествоДоставокПрошлогоПериода(КоличествоДоставокПрошлыхПериодов);
				КонецЕсли;
			Иначе
				Журнал.УстановитьТекстДействия("");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "Выбор" Тогда
		Параметр3 = Ложь;
		Если ЗначениеЗаполнено(Параметр1.Задача) Тогда
			ОткрытьЗначение(Параметр1.Задача);
		КонецЕсли;
		
	ИначеЕсли Событие = "НачатьПеретаскивание" Тогда
		Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
			мсДоставки = Новый Массив;
			
			Для Каждого стрДоставка Из Параметр1 Цикл
				Если стрДоставка.ОтсутствуетНаСкладе Тогда
					Продолжить;
				КонецеСли;	
				мсДоставки.Добавить(стрДоставка.Доставка);
			КонецЦикла;
			Если мсДоставки.Количество() > 0 Тогда
				Возврат Новый Структура("Вид, Доставки, УдаляемыеСтрокиИсточника", "ПланируемыеДоставки", мсДоставки, Параметр1);	
			КонецеСли;	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли Событие = "ПроверитьВозможностьПеретаскивания" Тогда
		Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
			Если Параметр1.Вид = "ДоставкиРейса" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		Возврат Ложь;
		
	ИначеЕсли Событие = "ПеретаскиваниеОкончено" Тогда
		Если Параметр1.Вид = "ДоставкиРейса" Тогда
			Параметр1.Журнал.УдалитьДоставки(Параметр1.Рейс, Параметр1.Доставки);
			//ИсключитьТочкиМаршрутаИзРейса(Параметр1.Рейс, Параметр1.Доставки);
		КонецЕсли;
		Возврат Истина;
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "СогласоватьДоставки" Тогда
			СогласоватьДоставки();
			
		ИначеЕсли Параметр1 = "ПовторитьДоставки" Тогда
			ПовторитьДоставки();
		ИначеЕсли Параметр1 = "СнятьПометкуНетНаСкладе" Тогда
			СнятьПометкуНетНаСкладе(Журнал.Дерево.ВыделенныеСтроки);
			Журнал.Обновить();

		ИначеЕсли Параметр1 = "ВыделитьВсеДоставки" Тогда
			УстановитьВыделениеДоставок(Журнал.Дерево.Значение.Строки, Истина);
			
		ИначеЕсли Параметр1 = "СнятьВыделениеДоставок" Тогда
			УстановитьВыделениеДоставок(Журнал.Дерево.Значение.Строки, Ложь);
			
		ИначеЕсли Параметр1 = "ДатаПереноса" Тогда
			ЖурналКонецПериода = НачалоДня(Параметр2.Значение) - 1;
			СформироватьОтбор();
			Журнал.Обновить();
			
		ИначеЕсли Параметр1 = "ПеренестиДоставки" Тогда
			ПеренестиДоставки();
			
		ИначеЕсли Параметр1 = "ОтменитьДоставки" Тогда
			ОтменитьДоставки();
			
		ИначеЕсли Параметр1 = "СоздатьДоставку" Тогда
			Если Журнал.ТекущиеДанные = Неопределено Тогда
				обДоставка = БизнесПроцессы.новаМестнаяДоставка.СоздатьБизнесПроцесс();
			Иначе
				Если ЗначениеЗаполнено(Журнал.ТекущиеДанные.Доставка) Тогда
					обДоставка = Журнал.ТекущиеДанные.Доставка.Скопировать();
				Иначе
					обДоставка = БизнесПроцессы.новаМестнаяДоставка.СоздатьБизнесПроцесс();
				КонецЕсли;
			КонецЕсли;
			ОткрытьЗначение(обДоставка);
		ИначеЕсли Параметр1 = "ПривязатьАдресаDaData" Тогда
			ПривязатьАдресаDaData();
		ИначеЕсли Параметр1 = "ЗагрузитьДоставки" Тогда
			Если ПараметрыСеанса.новаТекущийПользователь.ОсновнойПланЗагрузки <> Справочники.новаОбменыДанными.ПустаяСсылка() Тогда
				новаОбмены.ВыполнитьОбменПоНастройке(ПараметрыСеанса.новаТекущийПользователь.ОсновнойПланЗагрузки);
			Иначе
				Сообщить("Не заполнено значение основного плана импорта в настройках пользователя");
			КонецЕсли;
			Журнал.Обновить();
		ИначеЕсли Параметр1 = "ОбъединитьРайоны" Тогда
			ОбъединитьРайоны(ПолучитьВыделенныеРайоны());
			мсОбъекты = Новый Массив;
			мсОбъекты.Добавить("РегистрСведений.новаОперативнаяГруппировкаРайонов");
			новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
			
		ИначеЕсли Параметр1 = "РазъединитьРайоны" Тогда
			РазъединитьРайоны(ПолучитьВыделенныеРайоны());
			мсОбъекты = Новый Массив;
			мсОбъекты.Добавить("РегистрСведений.новаОперативнаяГруппировкаРайонов");
			новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
			
		ИначеЕсли Параметр1 = "РедактироватьГруппуДоставок" Тогда
			мсГруппа = Журнал.ПолучитьСтрокиНижнегоУровня(Журнал.Дерево.ВыделенныеСтроки);
			соДоставки = Новый Соответствие;
			Для Каждого Строка Из мсГруппа Цикл
				Если ЗначениеЗаполнено(Строка.Доставка) Тогда
					соДоставки.Вставить(Строка.Доставка);			
				КонецЕсли;
			КонецЦикла;
			
			мсДоставки = Новый Массив;
			Для Каждого ЭлДоставка Из соДоставки Цикл
				мсДоставки.Добавить(ЭлДоставка.Ключ);
			КонецЦикла;
			
			Форма = БизнесПроцессы.новаМестнаяДоставка.ПолучитьФорму("ФормаГрупповогоРедактирования",, Новый УникальныйИдентификатор());
			Форма.мсДоставки = мсДоставки;
			Форма.Открыть();
			
		ИначеЕсли Параметр1 = "ИзменитьОсновнуюКатегорию" Тогда
			Если ЗначениеЗаполнено(Журнал.ТекущиеДанные.Доставка) Тогда
				обДоставка = Журнал.ТекущиеДанные.Доставка.ПолучитьОбъект();
				стрКатегория = обДоставка.КатегорииТранспорта.Найти(ЗначениеОсновнойКатегории, "ЗначениеКатегории");
				Если стрКатегория = Неопределено Тогда
					обДоставка.КатегорииТранспорта.Добавить().ЗначениеКатегории = ЗначениеОсновнойКатегории;
					текКатегория = ЗначениеОсновнойКатегории;
				Иначе
					обДоставка.КатегорииТранспорта.Удалить(стрКатегория);
					текКатегория = Неопределено;
				КонецЕсли;
				обДоставка.Записать();
				Если Журнал.Дерево.Значение.Колонки.Найти("ОсновнаяКатегорияТранспорта") <> Неопределено Тогда
					Журнал.ТекущиеДанные.ОсновнаяКатегорияТранспорта = текКатегория;
					Журнал.ТекущиеДанные.ОсновнаяКатегорияТранспорта_Пред = СокрЛП(текКатегория);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "ВыполнитьДействие" Тогда
		Если ПланированиеДоставки Тогда
			ФормаПереноса = БизнесПроцессы.новаМестнаяДоставка.ПолучитьФорму("ПереносДоставки");
			ФормаПереноса.ДатаПереноса = ЖурналНачалоПериода;
			ФормаПереноса.Открыть();
		КонецЕсли;
		
	ИначеЕсли Событие = "ОкончаниеРедактирования" Тогда
		
		УстановитьВыделениеДоставок(Параметр1.Строки, Параметр1.Выбрана);
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();

	ИначеЕсли Событие = "УстановленФильтрПоКлассификатору" Тогда
		
		Если Параметр1 <> Неопределено Тогда
			КонструкторДанных.ДобавитьПараметр("КлассификаторРайонов", Параметр1)
		КонецЕсли;

	КонецЕсли;	
КонецФункции

// Возвращает таблицу районов текущих доставок.
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьРайоныИмеющиеДоставки() Экспорт
	Запрос = Новый Запрос;
	
	ПутьДоставки = "Задачи.БизнесПроцесс.Доставка";
	
	мсТекущиеТочкиДоставки = новаМестнаяДоставка.ПолучитьТекущиеТочкиДоставки(новаКонтекст);
	Если мсТекущиеТочкиДоставки.Количество() > 0 Тогда
		ОТБОР_ТОЧЕК_ДОСТАВКИ = " И " + ПутьДоставки + ".ТочкаОтправления В (&ТекущиеТочкиДоставки)";
		Запрос.УстановитьПараметр("ТекущиеТочкиДоставки", мсТекущиеТочкиДоставки);
	Иначе
		ОТБОР_ТОЧЕК_ДОСТАВКИ = "";
	КонецЕсли;
	
	мсТекущиеРайоны = новаМестнаяДоставка.ПолучитьТекущиеРайоны(новаКонтекст);
	Если мсТекущиеРайоны.Количество() > 0 Тогда
		ОТБОР_РАЙОНОВ = " И РайоныОтбора.Район В (&ТекущиеРайоны)";
		Запрос.УстановитьПараметр("ТекущиеРайоны", мсТекущиеРайоны);
	Иначе
		РАЙОНЫ_ОТБОРА = "";
		ОТБОР_РАЙОНОВ = "";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РАЗЛИЧНЫЕ(ЕСТЬNULL(ГруппыРайонов.Группа, РайоныОтбора.Район)) КАК Район
	|ИЗ
	|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(&Роль, НЕ Выполнена
	|	" + ОтборДоставокПоПериоду + ") КАК Задачи
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаРайоныАдресов КАК РайоныОтбора
	|ПО
	|	РайоныОтбора.Классификатор = &КлассификаторРайонов И РайоныОтбора.Адрес = " + ПутьДоставки +".ОсновнаяТочка.Адрес
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыРайонов
	|ПО
	|	ГруппыРайонов.Район = РайоныОтбора.Район
	|
	|ГДЕ Истина " + ОТБОР_ТОЧЕК_ДОСТАВКИ + ОТБОР_РАЙОНОВ + "
	|
	|УПОРЯДОЧИТЬ ПО ЕСТЬNULL(ГруппыРайонов.Группа, РайоныОтбора.Район) ВОЗР
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Роль", Роль);
	Запрос.УстановитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
	Запрос.УстановитьПараметр("ЖурналКонецПериода", ЖурналКонецПериода);
	Запрос.УстановитьПараметр("КлассификаторРайонов", новаКарты.ПолучитьТекущийКлассификаторРайонов());
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура УстановитьВыделениеДоставок(СтрокиДерева, Выделение)
	Строки = СтрокиДерева.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
	Для Каждого Строка Из Строки Цикл
		Строка.Выбрана = Выделение;
	КонецЦикла;
КонецПроцедуры

Процедура СогласоватьДоставки()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Согласовать текущие доставки?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.ДоставкаСогласована = Истина;
		обЗадача.Записать();
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

Процедура ПовторитьДоставки()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Повторить текущие доставки?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.ДоставкаПодтверждена = Истина;
		обЗадача.Записать();
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

Процедура СнятьПометкуНетНаСкладе(Стр)
	Если Стр.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	Если Стр[0].Группировка = NULL тогда	
		Ответ = Вопрос("Снять флаг ""Нет на складе"" с выбранных задач?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
		
		Для Каждого Д Из Стр Цикл
			Струк = Новый Структура;
			Струк.Вставить("Доставка", Д.Доставка.Ссылка);
			
			Если РегистрыСведений.ОтсутствующиеНаСкладеДоставки.ПолучитьПоследнее(ТекущаяДата(), Струк).ОтсутствуетНаСкладе Тогда
				Нов = Документы.РегистрацияСтатусаДоставки.СоздатьДокумент();
				Нов.Дата = ТекущаяДата();
				Нов.Доставка = Д.Доставка.Ссылка;
				Нов.Записать(РежимЗаписиДокумента.Запись);
				Нов.Записать(РежимЗаписиДокумента.Проведение);
			КонецеСли;	
		КонецЦикла;
	конецеСли;	
КонецПроцедуры

Процедура ПеренестиДоставки()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ВремяПереноса = НачалоДня(ЖурналКонецПериода + 1);
	
	Ответ = Вопрос("Перенести текущие доставки на " + Формат(ВремяПереноса, "ДФ=dd.MM.yyyy") + " ?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		обДоставка = ЭлЗадача.Ключ.БизнесПроцесс.Доставка.ПолучитьОбъект();
		
		ОкноПути = обДоставка.ВремяПрибытияС - обДоставка.ВремяОтправленияС;
		ОкноОтправления = обДоставка.ВремяОтправленияПо - обДоставка.ВремяОтправленияС;
		ВремяОтправления = обДоставка.ВремяОтправленияС - НачалоДня(обДоставка.ВремяОтправленияС);
		
		ОкноПрибытия = обДоставка.ВремяПрибытияПо - обДоставка.ВремяПрибытияС;
		ВремяПрибытия = обДоставка.ВремяПрибытияС - НачалоДня(обДоставка.ВремяПрибытияС);
		
		обДоставка.ВремяОтправленияС = ВремяПереноса + ВремяОтправления;
		обДоставка.ВремяОтправленияПо = обДоставка.ВремяОтправленияС + ОкноОтправления;
		
		обДоставка.ВремяПрибытияС = обДоставка.ВремяОтправленияС + ОкноПути;
		обДоставка.ВремяПрибытияПо = обДоставка.ВремяПрибытияС + ОкноПрибытия;
		
		обДоставка.Записать();
	КонецЦикла;
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
	
	Оповестить("ПереносДоставки");
КонецПроцедуры

Процедура ОтменитьДоставки()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Отменить текущие доставки?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	ъ = соЗадачи.Количество();
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		Состояние(ъ);
		ъ = ъ - 1;
		
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.ДоставкаОтменена = Истина;
		обЗадача.Записать();
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
	
	Оповестить("ОтменаДоставки");
КонецПроцедуры

Функция ПолучитьВыбранныеЗадачи()
	соЗадачи = Новый Соответствие;
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Выбрана", ЭтотОбъект, Истина), Истина);
	Если Строки.Количество() = 0 Тогда
		Предупреждение("Доставки не выбраны!");
		Возврат соЗадачи;
	КонецЕсли;
	Для Каждого Строка Из Строки Цикл
		Если ЗначениеЗаполнено(Строка.Задача) Тогда
			соЗадачи.Вставить(Строка.Задача);
		КонецЕсли;
	КонецЦикла;
	Возврат соЗадачи;
КонецФункции

Процедура СформироватьОтбор()
	КонструкторДанных.ДобавитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
	КонструкторДанных.ДобавитьПараметр("ЖурналКонецПериода", ЖурналКонецПериода);
	
	Если ЗначениеЗаполнено(ЖурналНачалоПериода) И ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И ((ВЫРАЗИТЬ(БизнесПроцесс КАК БизнесПроцесс." + ТаблицаОсновногоБизнесПроцесса + ").Доставка.ВремяОтправленияС МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода) ИЛИ (ВЫРАЗИТЬ(БизнесПроцесс КАК БизнесПроцесс." + ТаблицаОсновногоБизнесПроцесса + ").Доставка.ВремяПрибытияС МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода))";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналНачалоПериода) И Не ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И ((ВЫРАЗИТЬ(БизнесПроцесс КАК БизнесПроцесс." + ТаблицаОсновногоБизнесПроцесса + ").Доставка.ВремяОтправленияС >= &ЖурналНачалоПериода) ИЛИ (ВЫРАЗИТЬ(БизнесПроцесс КАК БизнесПроцесс." + ТаблицаОсновногоБизнесПроцесса + ").Доставка.ВремяПрибытияС >= &ЖурналНачалоПериода))";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналКонецПериода) И Не ЗначениеЗаполнено(ЖурналНачалоПериода) Тогда
		Отбор = " И ((ВЫРАЗИТЬ(БизнесПроцесс КАК БизнесПроцесс." + ТаблицаОсновногоБизнесПроцесса + ").Доставка.ВремяОтправленияС <= &ЖурналКонецПериода) ИЛИ (ВЫРАЗИТЬ(БизнесПроцесс КАК БизнесПроцесс." + ТаблицаОсновногоБизнесПроцесса + ").Доставка.ВремяПрибытияС <= &ЖурналКонецПериода))";
		
	Иначе
		Отбор = "";
	КонецЕсли;
	
	ОтборДоставокПоПериоду = Отбор;
	
	Если ЗначениеЗаполнено(Рейс) Тогда
		КонструкторДанных.ДобавитьПараметр("Рейс", Рейс);
		
		Отбор = Отбор + " И " + ПутьДоставкиОтбораПоРейсу + " В (ВЫБРАТЬ
		|				Доставка
		|			ИЗ
		|				РегистрСведений.новаЗаданияРейсов
		|			ГДЕ
		|				Рейс = &Рейс
		|			)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнаяТочка) Тогда
		КонструкторДанных.ДобавитьПараметр("ОсновнаяТочка", ОсновнаяТочка);
		Отбор = " И (БизнесПроцесс.Доставка.ОсновнаяТочка = &ОсновнаяТочка)";	
	КонецЕсли;
	
	// Михушкин - 06.06.2016 - Не показывать заказы по Питеру в Планировании Доставок --->> 
	Отбор = " И (ВЫРАЗИТЬ(БизнесПроцесс КАК БизнесПроцесс." + ТаблицаОсновногоБизнесПроцесса + ").Доставка.Номер В (
		|ВЫБРАТЬ
		|РеализацияТоваровУслуг.Номер
		|	ИЗ
		|Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		//|РеализацияТоваровУслуг.ТерминалДоставки <> ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.СПбСтриж)
		|РеализацияТоваровУслуг.ТерминалДоставки В(&Терминал)
		|  И РеализацияТоваровУслуг.СтатусИнтернетМагазина <> 4 И РеализацияТоваровУслуг.ПометкаУдаления = Ложь
		|  И РеализацияТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2))";			
	Если ЗначениеЗаполнено(ЖурналНачалоПериода) И ЗначениеЗаполнено(ЖурналКонецПериода) Тогда			
		КонструкторДанных.ДобавитьПараметр("Дата1", ЖурналНачалоПериода);
		КонструкторДанных.ДобавитьПараметр("Дата2", ЖурналКонецПериода);
	Иначе
		КонструкторДанных.ДобавитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
		КонструкторДанных.ДобавитьПараметр("Дата2", КонецДня(ТекущаяДата()));			
	КонецЕсли;
	
	СписокТерминал = Новый СписокЗначений;
	Если ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда		
		СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);	
	ИначеЕсли ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
		СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
	Иначе	
		СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
	КонецЕсли;
	КонструкторДанных.ДобавитьПараметр("Терминал", СписокТерминал);		
	// <<--- Михушкин 
		
	КонструкторДанных.УстановитьПатч("{ОТБОР_ПО_ПЕРИОДУ}", Отбор);
	
КонецПроцедуры

Процедура ПривязатьАдресаDaData() 
	Обр = Обработки.ПривязкаАдресовDaData.Создать();
	Обр.ДатаНачала = НачалоДня(ЖурналНачалоПериода);
	Обр.ДатаОкончания = КонецДня(ЖурналНачалоПериода);
	Обр.ВыполнитьПривязкуАдресов();
КонецПроцедуры	

Процедура Настроить()
	мсИнструменты = Новый Массив;
	ПараметрыЖурнала = Новый Структура("Инструменты, ОбновлятьПослеПеретаскивания", мсИнструменты, Истина);
	
	ТаблицаОсновногоБизнесПроцесса = "новаМестнаяДоставка";
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
		ПараметрыЖурнала.Вставить("ИсточникПеретаскивания", Истина);
		ПараметрыЖурнала.Вставить("ПриемникПеретаскивания", Истина);
		
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СоздатьДоставку", БиблиотекаКартинок.ДобавитьЭлементСписка, "Создать доставку", "Создать доставку"));
		
		ТаблицаОсновногоБизнесПроцесса = "новаПланированиеМестнойДоставки";
		
	ИначеЕсли Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки Тогда
		ТаблицаОсновногоБизнесПроцесса = "новаСогласованиеМестнойДоставки";
		
	ИначеЕсли Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки Тогда
		ТаблицаОсновногоБизнесПроцесса = "новаСопровождениеМестнойДоставки";
		
	КонецЕсли;
	
	
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПривязатьАдресаDaData", БиблиотекаКартинок.ДополнительныеПоляОтчета, "Привязать адреса", "Привязать адреса"));
	
	Если КнопкиГрупповогоВыделения Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ВыделитьВсеДоставки", БиблиотекаКартинок.УстановитьФлажки, "", "Выделить все доставки"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СнятьВыделениеДоставок", БиблиотекаКартинок.СнятьФлажки, "", "Снять выделение доставок"));
	КонецЕсли;
	
	Если ПереносДоставки Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, ТипЗначения, Значение, Формат", "ДатаПереноса",, "Дата переноса", "Дата переноса", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)), ТекущаяДата(), "ДФ=dd.MM.yyyy"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПеренестиДоставки", БиблиотекаКартинок.ВыполнитьЗадачу, "Перенести доставки", "Перенести доставки"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ОтменитьДоставки", БиблиотекаКартинок.новаДействиеОтмена, "Отменить доставки", "Отменить доставки"));
	КонецЕсли;
	
	Если ОтменаДоставки Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ОтменитьДоставки", БиблиотекаКартинок.новаДействиеОтмена, "Отменить доставки", "Отменить доставки"));		
	КонецЕсли;
		
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СогласоватьДоставки", БиблиотекаКартинок.ВыполнитьЗадачу, "Согласовать доставки", "Согласовать доставки"));
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки Тогда
			
		НеобходимоСогласование = новаМестнаяДоставка.НужноВыполнятьТочкуМаршрута(Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки);
		Если НеобходимоСогласование Тогда
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ЗагрузитьДоставки", БиблиотекаКартинок.новаДействиеЗагрузка, "Загрузить доставки", "Загрузить доставки по текущему плану обмена"));
		КонецЕсли;
	
	КонецЕсли;	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
		
		НеобходимоСогласование = новаМестнаяДоставка.НужноВыполнятьТочкуМаршрута(Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки);
		Если Не НеобходимоСогласование Тогда
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ЗагрузитьДоставки", БиблиотекаКартинок.новаДействиеЗагрузка, "Загрузить доставки", "Загрузить доставки по текущему плану обмена"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ОбработкаНедовозаМестнойДоставки Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПовторитьДоставки", БиблиотекаКартинок.ВыполнитьЗадачу, "Повторить доставки", "Повторить доставки"));
	КонецЕсли;
	
	Если КнопкиГруппировкиРайонов Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ОбъединитьРайоны", БиблиотекаКартинок.новаОбъединитьРайоны, "", "Объединить районы"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "РазъединитьРайоны", БиблиотекаКартинок.новаРазъединитьРайоны, "", "Разъединить районы"));
	КонецЕсли;
	
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "РедактироватьГруппуДоставок", БиблиотекаКартинок.новаГрупповоеРедактирование, "Редактировать группу",, Истина));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "СнятьПометкуНетНаСкладе", БиблиотекаКартинок.Содержание, "Снять пометку отсутствия на складе",, Истина));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка, Наименование ИЗ Справочник.новаЗначенияКатегорийТранспорта ГДЕ Владелец.ОсновнаяКатегория";
	тзОсновнаяКатегория = Запрос.Выполнить().Выгрузить();
	Если тзОсновнаяКатегория.Количество() = 0 Тогда
		ЗаголовокОсновнойКатегории = "";
		ЗначениеОсновнойКатегории = Неопределено;
	Иначе
		ЗаголовокОсновнойКатегории = тзОсновнаяКатегория[0].Ссылка.Владелец.Наименование;
		ЗначениеОсновнойКатегории = тзОсновнаяКатегория[0].Ссылка;
		
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ИзменитьОсновнуюКатегорию", Новый Картинка, ЗаголовокОсновнойКатегории,, Истина));
	КонецЕсли;
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	
	КонструкторДанных.ДобавитьПараметр("Роль", Роль);
		
	Если Архив Тогда
		КонструкторДанных.ТекстЗапроса = "
		|БизнесПроцесс.новаМестнаяДоставка КАК Доставки
		|
		|{СОЕДИНЕНИЯ}
		|";
		
		ПутьДоставки = "Доставки.Ссылка";
		ПутьДоставкиОтбораПоРейсу = "Ссылка";
		
		КонструкторДанных.ПостоянныйОтбор = "Завершен {ОТБОР_ПО_ПЕРИОДУ} {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ}";
		КонструкторДанных.ПостояннаяВыборка = ",
		|	Доставки.Ссылка КАК Задача,
		|	Доставки.Ссылка КАК Доставка,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.Вес, 0) КАК Вес,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.Объем, 0) КАК Объем,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.КоличествоЕдиницПеревозки, 0) КАК КоличествоЕдиницПеревозки,
		|	1 КАК КоличествоЗаказов";
		
	ИначеЕсли ЗначениеЗаполнено(ЭтапПеревозки) Тогда
		КонструкторДанных.ТекстЗапроса = "
		|РегистрСведений.новаМестныеДоставкиЭтаповПеревозки КАК ДоставкиЭтапа
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
		|ПО
		|	Доставки.Ссылка = ДоставкиЭтапа.Доставка
		|
		|{СОЕДИНЕНИЯ}
		|";
		
		ПутьДоставки = "Доставки.Ссылка";
		ПутьДоставкиОтбораПоРейсу = "Ссылка";

		КонструкторДанных.ПостоянныйОтбор = "ДоставкиЭтапа.Этап = &ЭтапПеревозки";
		КонструкторДанных.ДобавитьПараметр("ЭтапПеревозки", ЭтапПеревозки);
		
		КонструкторДанных.ПостояннаяВыборка = ",
		|	Доставки.Ссылка КАК Задача,
		|	Доставки.Ссылка КАК Доставка,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.Вес, 0) КАК Вес,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.Объем, 0) КАК Объем,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.КоличествоЕдиницПеревозки, 0) КАК КоличествоЕдиницПеревозки,
		|	1 КАК КоличествоЗаказов";
		
	Иначе
		Если КонтейнерКатегорий = Неопределено Тогда
			КонструкторДанных.ТекстЗапроса = "
			|Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(&Роль, НЕ Выполнена {ОТБОР_ПО_ПЕРИОДУ}) КАК Задачи
			|
			|{СОЕДИНЕНИЯ}
			|";
			
			КонструкторДанных.ПостоянныйОтбор = "Истина {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ}";
			
		Иначе
			КонструкторДанных.ТекстЗапроса = "
			|(ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка,
			|	Задачи.БизнесПроцесс КАК БизнесПроцесс,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Категории.ЗначениеКатегории.Владелец) КАК КоличествоВыбранныхКатегорий
			|ИЗ
			|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(&Роль, НЕ Выполнена {ОТБОР_ПО_ПЕРИОДУ}) КАК Задачи
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	БизнесПроцесс.новаМестнаяДоставка.КатегорииТранспорта КАК Категории
			|ПО
			|	Категории.Ссылка = Задачи.БизнесПроцесс.Доставка И Категории.ЗначениеКатегории В (&Категории)
			|
			|СГРУППИРОВАТЬ ПО Задачи.Ссылка, Задачи.БизнесПроцесс
			|) КАК Задачи
			|
			|{СОЕДИНЕНИЯ}
			|";
			
			КонструкторДанных.ПостоянныйОтбор = "Задачи.КоличествоВыбранныхКатегорий = Задачи.БизнесПроцесс.Доставка.КоличествоВыбранныхКатегорий {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ} {ОТБОР_АКТДОСТАВОК}";
			
			КонструкторДанных.ДобавитьПараметр("Категории", КонтейнерКатегорий.КатегорииТранспорта.ВыгрузитьКолонку("ЗначениеКатегории"));
		КонецЕсли;
		
		ПутьДоставки = "ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс." + ТаблицаОсновногоБизнесПроцесса + ").Доставка";
		ПутьДоставкиОтбораПоРейсу = "БизнесПроцесс.Доставка";
		
		КонструкторДанных.ПостояннаяВыборка = ",
		|	Задачи.Ссылка КАК Задача,
		|	" + ПутьДоставки + " КАК Доставка,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.Вес, 0) КАК Вес,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.Объем, 0) КАК Объем,
		|	ЕСТЬNULL(" + ПутьДоставки + ".Груз.КоличествоЕдиницПеревозки, 0) КАК КоличествоЕдиницПеревозки,
		|	1 КАК КоличествоЗаказов";
	КонецЕсли;
	
	мсТекущиеТочкиДоставки = новаМестнаяДоставка.ПолучитьТекущиеТочкиДоставки(новаКонтекст);
	Если мсТекущиеТочкиДоставки.Количество() > 0 Тогда
		КонструкторДанных.УстановитьПатч("{ОТБОР_ТОЧЕК_ДОСТАВКИ}", " И " + ПутьДоставки + ".ТочкаОтправления В (&ТекущиеТочкиДоставки)");
		КонструкторДанных.ДобавитьПараметр("ТекущиеТочкиДоставки", мсТекущиеТочкиДоставки);
	КонецЕсли;
	
	мсТекущиеРайоны = новаМестнаяДоставка.ПолучитьТекущиеРайоны(новаКонтекст);
	Если мсТекущиеРайоны.Количество() > 0 Тогда
		КонструкторДанных.УстановитьПатч("{СОЕДИНЕНИЯ}", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаРайоныАдресов КАК РайоныОтбора
		|ПО
		|	РайоныОтбора.Классификатор = &КлассификаторРайонов И РайоныОтбора.Адрес = " + ПутьДоставки +".ОсновнаяТочка.Адрес");
		КонструкторДанных.УстановитьПатч("{ОТБОР_РАЙОНОВ}", " И РайоныОтбора.Район В (&ТекущиеРайоны)");
		КонструкторДанных.ДобавитьПараметр("ТекущиеРайоны", мсТекущиеРайоны);
	КонецЕсли;
	
	КонструкторДанных.УстановитьПатч("{СОЕДИНЕНИЯ}", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|ПО
	|	Реализация.Номер = " + ПутьДоставки +".Номер");
	
	
	Терминал = ПараметрыСеанса.ТерминалДоставки;
	Если Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
		ТекстТерминал = " И Реализация.ТерминалДоставки.Код = 1";
	ИначеЕсли Терминал = Справочники.РегиональныеТерминалы.СПбСтриж Тогда	
	    ТекстТерминал = " И Реализация.ТерминалДоставки.Код = 2";
	Иначе
		ТекстТерминал = "";
	КонецЕсли;
	
	
	КонструкторДанных.УстановитьПатч("{ОТБОР_АКТДОСТАВОК}", " И Реализация.ПометкаУдаления = Ложь" + ТекстТерминал);
	
	СформироватьОтбор();
	
	КонструкторДанных.ДобавитьПоле("Выбрана", "");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Ложь");
	
	КонструкторДанных.ДобавитьПоле("Задача");
	КонструкторДанных.ДобавитьОтборПоля(, "Задачи.Ссылка");
	
	КонструкторДанных.ДобавитьПоле("Доставка");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки);

	КонструкторДанных.ДобавитьПоле("НомерДоставки", "Номер");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Номер");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Номер");
	
	КонструкторДанных.ДобавитьПоле("ДатаФормирования",, "ДФ='dd.MM.yyyy ЧЧ:мм:сс'");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Дата");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Дата");
	
	КонструкторДанных.ДобавитьПоле("ОсновнаяКатегорияТранспорта", ЗаголовокОсновнойКатегории);
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ОсновнаяКатегорияТранспорта");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ОсновнаяКатегорияТранспорта");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".ОсновнаяКатегорияТранспорта.Наименование");
	
	КонструкторДанных.ДобавитьПоле("ОсновнойКонтрагент", "Контрагент");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ОсновнойКонтрагент");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ОсновнойКонтрагент");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".ОсновнойКонтрагент.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Грузоотправитель");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Грузоотправитель");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Грузоотправитель");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".Грузоотправитель.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Грузополучатель");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Грузополучатель");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Грузополучатель");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".Грузополучатель.Наименование");
	
	КонструкторДанных.ДобавитьПоле("РайонОтправления");
	КонструкторДанных.ДобавитьВыборкуПоля(, "РайоныОтправления.Район");
	КонструкторДанных.ДобавитьОтборПоля(, "РайоныОтправления.Район");
	КонструкторДанных.ДобавитьСортировкуПоля("РайоныОтправления.Район.Наименование");
	КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаРайоныАдресов КАК РайоныОтправления
	|ПО
	|	РайоныОтправления.Классификатор = &КлассификаторРайонов И РайоныОтправления.Адрес = " + ПутьДоставки + ".ТочкаОтправления.Адрес");
	КонструкторДанных.ДобавитьПоле("ТочкаОтправления");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ТочкаОтправления");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ТочкаОтправления");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".ТочкаОтправления.Наименование");
	
	КонструкторДанных.ДобавитьПоле("ОтсутствуетНаСкладе", "Отсутствует на складе");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ЕстьNULL(ОтсутствующиеНаСкладеДоставки.ОтсутствуетНаСкладе, Ложь)");
	КонструкторДанных.ДобавитьОтборПоля(, "ЕстьNULL(ОтсутствующиеНаСкладеДоставки.ОтсутствуетНаСкладе, Ложь)");
	КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтсутствующиеНаСкладеДоставки.СрезПоследних() КАК ОтсутствующиеНаСкладеДоставки
	|ПО
	|	ОтсутствующиеНаСкладеДоставки.Доставка.Ссылка = " + ПутьДоставки + ".Ссылка");
	//
	//lem
	КонструкторДанных.ДобавитьПоле("ВладелецТовара", "Партнер");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Реализация.ВладелецТовара");
	КонструкторДанных.ДобавитьОтборПоля(, "Реализация.ВладелецТовара");
	//КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.ОтсутствующиеНаСкладеДоставки.СрезПоследних() КАК ОтсутствующиеНаСкладеДоставки
	//|ПО
	//|	ОтсутствующиеНаСкладеДоставки.Доставка.Ссылка = " + ПутьДоставки + ".Ссылка");
	
	//lem
	КонструкторДанных.ДобавитьПоле("ОсновнойРайон");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ЕСТЬNULL(ОсновныеГруппы.Группа, ЕСТЬNULL(ОсновныеРайоны.Район, ЗНАЧЕНИЕ(Справочник.новаГеоРайоны.ПустаяСсылка)))");
	КонструкторДанных.ДобавитьОтборПоля(, "ЕСТЬNULL(ОсновныеГруппы.Группа, ЕСТЬNULL(ОсновныеРайоны.Район, ЗНАЧЕНИЕ(Справочник.новаГеоРайоны.ПустаяСсылка)))");
	
	КонструкторДанных.ДобавитьСортировкуПоля("ОсновныеРайоны.Район.Наименование");
	КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаРайоныАдресов КАК ОсновныеРайоны
	|ПО
	|	ОсновныеРайоны.Классификатор = &КлассификаторРайонов И ОсновныеРайоны.Адрес = " + ПутьДоставки + ".ОсновнаяТочка.Адрес
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ОсновныеГруппы
	|ПО
	|	ОсновныеГруппы.Район = ОсновныеРайоны.Район
	|");

	КонструкторДанных.ДобавитьПоле("ОсновнаяТочка", "Точка");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ОсновнаяТочка");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ОсновнаяТочка");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".ОсновнаяТочка.Наименование");
		
	КонструкторДанных.ДобавитьПоле("ОсновнойАдрес", "Адрес");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ОсновнаяТочка.Адрес");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ОсновнаяТочка.Адрес");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".ОсновнаяТочка.Адрес.Наименование");
	
	КонструкторДанных.ДобавитьПоле("ИнтервалДоставкиСтрокой", "Интервал доставки строкой");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ИнтервалДоставкиСтрокой");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ИнтервалДоставкиСтрокой");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".ИнтервалДоставкиСтрокой");
	
	КонструкторДанных.ДобавитьПоле("КатегорииТранспорта", "Категории транспорта");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".КатегорииТранспортаСтрокой");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".КатегорииТранспортаСтрокой");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьДоставки + ".КатегорииТранспортаСтрокой.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Широта");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ОсновнаяТочка.Адрес.Широта");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ОсновнаяТочка.Адрес.Широта");
	
	КонструкторДанных.ДобавитьПоле("Долгота");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ОсновнаяТочка.Адрес.Долгота");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ОсновнаяТочка.Адрес.Долгота");
	
	КонструкторДанных.ДобавитьПоле("ВремяОтправленияС");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ВремяОтправленияС");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ВремяОтправленияС");
	
	КонструкторДанных.ДобавитьПоле("ВремяОтправленияПо");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ВремяОтправленияПо");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ВремяОтправленияПо");
	
	КонструкторДанных.ДобавитьПоле("ВремяПрибытияС");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ВремяПрибытияС");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ВремяПрибытияС");
	
	КонструкторДанных.ДобавитьПоле("ВремяПрибытияПо");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".ВремяПрибытияПо");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".ВремяПрибытияПо");
	
	КонструкторДанных.ДобавитьПоле("Вид");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Вид");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Вид");
	
	КонструкторДанных.ДобавитьПоле("Описание");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Груз.Описание");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Груз.Описание");
	
	КонструкторДанных.ДобавитьПоле("Маркировка");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Груз.Маркировка");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Груз.Маркировка");
	
	КонструкторДанных.ДобавитьПоле("Стоимость",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Груз.Стоимость");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Груз.Стоимость");
	КонструкторДанных.ДобавитьИтог("Стоимость");
	
	КонструкторДанных.ДобавитьПоле("Валюта");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Груз.Валюта");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Груз.Валюта");
	
	КонструкторДанных.ДобавитьПоле("Вес");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Груз.Вес");
	КонструкторДанных.ДобавитьИтог("Вес");
	
	КонструкторДанных.ДобавитьПоле("ОбщийВесТочки", "Вес точки");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ИтогиПоТочке.ОбщийВесТочки");
	КонструкторДанных.ДобавитьОтборПоля(, "ИтогиПоТочке.ОбщийВесТочки");
	КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ИтогиПоТочке
	|ПО
	|	ИтогиПоТочке.Точка = " + ПутьДоставки + ".ОсновнаяТочка");
	
	
	КонструкторДанных.ДобавитьВременнуюТаблицу("УНИЧТОЖИТЬ ИтогиПоТочке;
	|ВЫБРАТЬ
	|	Задачи.БизнесПроцесс.Доставка.ОсновнаяТочка КАК Точка,
	|	СУММА(Задачи.БизнесПроцесс.Доставка.Груз.Вес) КАК ОбщийВесТочки
	|
	|ПОМЕСТИТЬ ИтогиПоТочке
	|
	|ИЗ
	|		Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(&Роль, НЕ Выполнена {ОТБОР_ПО_ПЕРИОДУ}) КАК Задачи
	|
	|СГРУППИРОВАТЬ ПО Задачи.БизнесПроцесс.Доставка.ОсновнаяТочка
	|ИНДЕКСИРОВАТЬ ПО Задачи.БизнесПроцесс.Доставка.ОсновнаяТочка;",
	
	"ВЫБРАТЬ
	|	Задачи.БизнесПроцесс.Доставка.ОсновнаяТочка КАК Точка,
	|	СУММА(Задачи.БизнесПроцесс.Доставка.Груз.Вес) КАК ОбщийВесТочки
	|
	|ПОМЕСТИТЬ ИтогиПоТочке
	|
	|ИЗ
	|		Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(&Роль, Ложь) КАК Задачи
	|
	|СГРУППИРОВАТЬ ПО Задачи.БизнесПроцесс.Доставка.ОсновнаяТочка;");
	
	КонструкторДанных.ДобавитьПоле("Объем");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Груз.Объем");
	КонструкторДанных.ДобавитьИтог("Объем");
	
	КонструкторДанных.ДобавитьПоле("КоличествоЕдиницПеревозки", "Мест");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Груз.КоличествоЕдиницПеревозки");
	КонструкторДанных.ДобавитьИтог("КоличествоЕдиницПеревозки");
	
	КонструкторДанных.ДобавитьПоле("Палетт");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьДоставки + ".Груз.ПеревезеноПалетт");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьДоставки + ".Груз.ПеревезеноПалетт");
	КонструкторДанных.ДобавитьИтог("Палетт");
	
	КонструкторДанных.ДобавитьПоле("КоличествоЗаказов");
	КонструкторДанных.ДобавитьИтог("КоличествоЗаказов");
	
	КонструкторДанных.ДобавитьПоле("Комментарий");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ВЫРАЗИТЬ(" + ПутьДоставки + ".Комментарий КАК Строка(200))");
	КонструкторДанных.ДобавитьОтборПоля(, "ВЫРАЗИТЬ(" + ПутьДоставки + ".Комментарий КАК Строка(200))");
	
	КонструкторДанных.ДобавитьПараметр("КлассификаторРайонов", новаКарты.ПолучитьТекущийКлассификаторРайонов());
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Вид");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ОсновнойРайон");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ОсновнойАдрес");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ОсновнойКонтрагент", "ОсновнойАдрес");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("КатегорииТранспорта");
    КонструкторДанных.ДобавитьДоступнуюГруппировку("ИнтервалДоставкиСтрокой");
			
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Задача"));

	КонструкторДанных.СформироватьКолонки();
	
КонецПроцедуры

// Возвращает текущие доставки для автопланирования.
//
//  Параметры:
//    мсДоставки - <Неопределено, Массив> - список доставок или Неопределено
//    пКлассификаторРайонов - <СправочникСсылка.новаКлассификаторРайонов> основной классификатор
//
//  Возвращаемое значение:
//    <Структура[ДоставкиДляАвтопланирования]>
//
Функция ПолучитьДоставкиДляАвтоматическогоПланирования(Знач мсДоставки = Неопределено, Знач пКлассификаторРайонов = Неопределено) Экспорт
	
	//Формируем структуру результата
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("КатегорииТранспорта");
	Результат.Колонки.Добавить("Грузоотправитель");
	Результат.Колонки.Добавить("ТочкаОтправления");
	Результат.Колонки.Добавить("КоличествоЗонПогрузкиРазгрузки");
	Результат.Колонки.Добавить("Район");
	Результат.Колонки.Добавить("Доставка");
	Результат.Колонки.Добавить("ТочкаПрибытия");
	Результат.Колонки.Добавить("ШиротаТочкиПрибытия");
	Результат.Колонки.Добавить("ДолготаТочкиПрибытия");
	Результат.Колонки.Добавить("ВремяПрибытияС");
	Результат.Колонки.Добавить("ВремяПрибытияПо");
	Результат.Колонки.Добавить("ВремяРазгрузки");
	Результат.Колонки.Добавить("ВремяПогрузки");
	Результат.Колонки.Добавить("Вес");
	Результат.Колонки.Добавить("Объем");
	
	//Получаем список доставок и классификатор районов
	Если мсДоставки = Неопределено Тогда
		
		мсДоставки = Новый Массив;
		
		Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Группировка", NULL), Истина);
		Для Каждого Строка Из Строки Цикл
			мсДоставки.Добавить(Строка.Доставка);
		КонецЦикла;
	КонецЕсли;

	Если не ЗначениеЗаполнено(пКлассификаторРайонов) Тогда
		
		пКлассификаторРайонов = новаКарты.ПолучитьТекущийКлассификаторРайонов();
	КонецЕсли;

	//Получаем категории доставок
	КорниДереваПоДоставкам = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    МД.Ссылка КАК Доставка
	|    ,КТ.ЗначениеКатегории КАК КатегорияТранспорта
	|  ИЗ
	|    БизнесПроцесс.новаМестнаяДоставка КАК МД
	|    ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка.КатегорииТранспорта КАК КТ
	|      ПО
	|        МД.Ссылка = КТ.Ссылка
	|  ГДЕ
	|    МД.Ссылка В(&Доставки)
	|  ИТОГИ ПО
	|    Доставка
	|");
	
	Запрос.УстановитьПараметр("Доставки", мсДоставки);
	
	ВыборкаПоДоставкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДоставкам.Следующий() Цикл
		
		ВыборкаКатегорий = ВыборкаПоДоставкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		НайденнаяСтрокаКорня = Неопределено;
		Для каждого ТкущаяСтрокаКорня Из Результат.Строки Цикл
			
			КатегорииТранспортаСовпадают = Истина;
			КоличествоКатегорийТранспорта = 0;
			Пока ВыборкаКатегорий.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаКатегорий.КатегорияТранспорта) Тогда
					КатегорииТранспортаСовпадают = КатегорииТранспортаСовпадают и (ТкущаяСтрокаКорня.КатегорииТранспорта[ВыборкаКатегорий.КатегорияТранспорта] = Истина);
					КоличествоКатегорийТранспорта = КоличествоКатегорийТранспорта + 1;
				КонецЕсли;
			КонецЦикла;
			КатегорииТранспортаСовпадают = КатегорииТранспортаСовпадают и (ТкущаяСтрокаКорня.КатегорииТранспорта.Количество() = КоличествоКатегорийТранспорта);
			
			ВыборкаКатегорий.Сбросить();
			
			Если КатегорииТранспортаСовпадают Тогда
				
				НайденнаяСтрокаКорня = ТкущаяСтрокаКорня;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденнаяСтрокаКорня = Неопределено Тогда
			
			НайденнаяСтрокаКорня = Результат.Строки.Добавить();
			НайденнаяСтрокаКорня.КатегорииТранспорта = Новый Соответствие;
			
			Пока ВыборкаКатегорий.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаКатегорий.КатегорияТранспорта) Тогда
					НайденнаяСтрокаКорня.КатегорииТранспорта.Вставить(ВыборкаКатегорий.КатегорияТранспорта, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КорниДереваПоДоставкам.Вставить(ВыборкаПоДоставкам.Доставка, НайденнаяСтрокаКорня);
	КонецЦикла;
	
	//Получаем свойства доставок
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    Доставки.Ссылка КАК Доставка
	|    ,ЕСТЬNULL(ОсновныеГруппы.Группа, ОсновныеРайоны.Район) КАК Район
	|    ,Доставки.Грузоотправитель
	|    ,Доставки.ТочкаОтправления
	|    ,Доставки.ТочкаОтправления.КоличествоЗонПогрузкиРазгрузки КАК КоличествоЗонПогрузкиРазгрузки
	|    ,Доставки.ТочкаПрибытия
	|    ,Доставки.ТочкаПрибытия.Адрес.Широта КАК ШиротаТочкиПрибытия
	|    ,Доставки.ТочкаПрибытия.Адрес.Долгота КАК ДолготаТочкиПрибытия
	|    ,Доставки.ВремяПрибытияС
	|    ,Доставки.ВремяПрибытияПо
	|    ,Доставки.ВремяПребыванияГрузополучателя КАК ВремяРазгрузки
	|    ,Доставки.ВремяПребыванияГрузоотправителя КАК ВремяПогрузки
	|    ,Доставки.Груз.Вес КАК Вес
	|    ,Доставки.Груз.Объем КАК Объем
	|  ИЗ
	|    БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаРайоныАдресов КАК ОсновныеРайоны
	|      ПО
	|        ОсновныеРайоны.Классификатор = &КлассификаторРайонов
	|        И ОсновныеРайоны.Адрес = Доставки.ТочкаПрибытия.Адрес
	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ОсновныеГруппы
	|      ПО
	|        ОсновныеГруппы.Район = ОсновныеРайоны.Район
	|    ГДЕ
	|      Доставки.Ссылка В (&Доставки) 
	|  УПОРЯДОЧИТЬ ПО
	|    Район
	|  ИТОГИ ПО
	|    Доставка
	|  АВТОУПОРЯДОЧИВАНИЕ
	|";

	Запрос.УстановитьПараметр("Доставки", мсДоставки);
	Запрос.УстановитьПараметр("КлассификаторРайонов", пКлассификаторРайонов);
	
	ВыборкаПоДоставкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДоставкам.Следующий() Цикл
		
		ДетальнаяВыборка = ВыборкаПоДоставкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДетальнаяВыборка.Следующий();
		
		КореньДерева = КорниДереваПоДоставкам[ВыборкаПоДоставкам.Доставка];
		
		СтрокаТочкиОтправления = КореньДерева.Строки.Найти(ДетальнаяВыборка.ТочкаОтправления, "ТочкаОтправления");
		Если СтрокаТочкиОтправления  = Неопределено Тогда
			
			СтрокаТочкиОтправления = КореньДерева.Строки.Добавить();
			СтрокаТочкиОтправления.Грузоотправитель = ДетальнаяВыборка.Грузоотправитель;
			СтрокаТочкиОтправления.ТочкаОтправления = ДетальнаяВыборка.ТочкаОтправления;
			СтрокаТочкиОтправления.КоличествоЗонПогрузкиРазгрузки = ДетальнаяВыборка.КоличествоЗонПогрузкиРазгрузки;
		КонецЕсли;
		
		СтрокаРайона = СтрокаТочкиОтправления.Строки.Найти(ДетальнаяВыборка.Район, "Район");
		Если СтрокаРайона = Неопределено Тогда
			
			СтрокаРайона = СтрокаТочкиОтправления.Строки.Добавить();
			СтрокаРайона.Район = ДетальнаяВыборка.Район;
		КонецЕсли;
		
		СтрокаДоставки = СтрокаРайона.Строки.Добавить();
		СтрокаДоставки.Доставка = ВыборкаПоДоставкам.Доставка;
		СтрокаДоставки.ТочкаПрибытия = ДетальнаяВыборка.ТочкаПрибытия;
		СтрокаДоставки.ШиротаТочкиПрибытия = ДетальнаяВыборка.ШиротаТочкиПрибытия;
		СтрокаДоставки.ДолготаТочкиПрибытия = ДетальнаяВыборка.ДолготаТочкиПрибытия;
		СтрокаДоставки.ВремяПрибытияС = ДетальнаяВыборка.ВремяПрибытияС;
		СтрокаДоставки.ВремяПрибытияПо = ДетальнаяВыборка.ВремяПрибытияПо;
		СтрокаДоставки.ВремяРазгрузки = ДетальнаяВыборка.ВремяРазгрузки;
		СтрокаДоставки.ВремяПогрузки = ДетальнаяВыборка.ВремяПогрузки;
		СтрокаДоставки.Вес = ДетальнаяВыборка.Вес;
		СтрокаДоставки.Объем = ДетальнаяВыборка.Объем;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Убирает с карты исключенные из рейса доставки.
//
Процедура СкрытьИсключенныеИзРейсовДоставки() Экспорт
	Для Каждого ЭлОбъект Из соИсключенныеИзРейсовДоставки Цикл
		//новаКонтекст.МенеджерКарт.УстановитьВидимостьОбъекта(икПодборПоКарте, ЭлОбъект.Ключ, Ложь);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьВыделенныеРайоны()
	соРайоны = Новый Соответствие;
	Для Каждого ВыделеннаяСтрока Из Журнал.Дерево.ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыделеннаяСтрока.ОсновнойРайон) Тогда
			соРайоны.Вставить(ВыделеннаяСтрока.ОсновнойРайон);			
		КонецЕсли;
	КонецЦикла;
	
	Возврат соРайоны;
КонецФункции

Процедура ОбъединитьРайоны(соРайоны)
	нзРайоныГруппы = РегистрыСведений.новаОперативнаяГруппировкаРайонов.СоздатьНаборЗаписей();
	
	соРайоныБезГрупп = Новый Соответствие;
	Для Каждого ЭлРайон Из соРайоны Цикл
		Если ТипЗнч(ЭлРайон.Ключ) = Тип("СправочникСсылка.новаГеоРайоны") Тогда
			соРайоныБезГрупп.Вставить(ЭлРайон.Ключ);
		Иначе
			нзРайоныГруппы.Отбор.Группа.Установить(ЭлРайон.Ключ);
			нзРайоныГруппы.Прочитать();
			Для Каждого стрРайон Из нзРайоныГруппы Цикл
				соРайоныБезГрупп.Вставить(стрРайон.Район);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РазъединитьРайоны(соРайоны);
	
	тзРайоны = Новый ТаблицаЗначений;
	тзРайоны.Колонки.Добавить("Код");
	тзРайоны.Колонки.Добавить("Район");
	
	Для Каждого ЭлРайон Из соРайоныБезГрупп Цикл
		стрРайон = тзРайоны.Добавить();
		стрРайон.Район = ЭлРайон.Ключ;
		стрРайон.Код = стрРайон.Район.Код;
	КонецЦикла;
	
	тзРайоны.Сортировать("Код ВОЗР");
	
	ИмяГруппы = "";
	Для Каждого стрРайон Из тзРайоны Цикл
		ИмяГруппы = ИмяГруппы + ?(ИмяГруппы = "", "", ", ") + СокрЛП(стрРайон.Район);
	КонецЦикла;
	
	обГруппа = Справочники.новаГруппыРайонов.СоздатьЭлемент();
	обГруппа.Наименование = ИмяГруппы;
	обГруппа.ОсновнойРайон = тзРайоны[0].Район;
	обГруппа.Записать();
	
	нзРайоныГруппы.Отбор.Группа.Установить(обГруппа.Ссылка);
	нзРайоныГруппы.Очистить();
	Для Каждого стрРайон Из тзРайоны Цикл
		стрРайонГруппы = нзРайоныГруппы.Добавить();
		ЗаполнитьЗначенияСвойств(стрРайонГруппы, стрРайон);
		стрРайонГруппы.Группа = обГруппа.Ссылка;
	КонецЦикла;
	
	нзРайоныГруппы.Записать();
КонецПроцедуры

Процедура РазъединитьРайоны(соРайоны)
	нзРайоныГруппы = РегистрыСведений.новаОперативнаяГруппировкаРайонов.СоздатьНаборЗаписей();
	
	Для Каждого ЭлРайон Из соРайоны Цикл
		Если ТипЗнч(ЭлРайон.Ключ) = Тип("СправочникСсылка.новаГруппыРайонов") Тогда
			нзРайоныГруппы.Отбор.Группа.Установить(ЭлРайон.Ключ);
			нзРайоныГруппы.Очистить();
			нзРайоныГруппы.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает копию источника.
//
// Возвращаемое значение:
//  <ОбработкаОбъект.новаИсточникМестнойДоставки>
//
Функция Скопировать() Экспорт
	Приемник = Обработки.новаИсточникМестнойДоставки.Создать();
	ЗаполнитьЗначенияСвойств(Приемник, ЭтотОбъект, "Роль, Архив, КнопкиГруппировкиРайонов, КнопкиГрупповогоВыделения, ПереносДоставки, ОтменаДоставки, ПланированиеДоставки, ЭтапПеревозки");
	
	Возврат Приемник;
КонецФункции

Архив = Ложь;
КнопкиГруппировкиРайонов = Ложь;
КнопкиГрупповогоВыделения = Ложь;
ПереносДоставки = Ложь;
ОтменаДоставки = Ложь;
ПланированиеДоставки = Ложь;

ПутьДоставкиОтбораПоРейсу = "";
ИдПоследнегоОбъекта = -1;
соКартинкиДействий = Новый Соответствие;
соКартинкиДействий.Вставить(Перечисления.новаВидыМестнойДоставки.ПустаяСсылка(), БиблиотекаКартинок.новаПустаяКартинка);
соКартинкиДействий.Вставить(Перечисления.новаВидыМестнойДоставки.Погрузка, БиблиотекаКартинок.новаПогрузка);
соКартинкиДействий.Вставить(Перечисления.новаВидыМестнойДоставки.Разгрузка, БиблиотекаКартинок.новаРазгрузка);
соКартинкиДействий.Вставить(Перечисления.новаВидыМестнойДоставки.ВнутреннееПеремещение, БиблиотекаКартинок.новаПогрузкаИРазгрузка);
соКартинкиДействий.Вставить(Перечисления.новаВидыМестнойДоставки.ВнешнееПеремещение, БиблиотекаКартинок.новаДействиеЗагрузка);

#КонецЕсли