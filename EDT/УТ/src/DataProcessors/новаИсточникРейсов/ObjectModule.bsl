#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Фильтр журнала рейсов по точке маршрута.
//
Перем Роль Экспорт; // <СправочникСсылка.новаРоли>

// Если Истина, то журнал отображает завершенные (архивные) рейсы.
//
Перем Архив Экспорт; // <>

// Если Истина, то добавляет в журнал кнопку подбора доставок по карте в текущий рейс.
//
Перем Подбор Экспорт; // <Булево>

// Если Истина, то районы отображаются с учетом их оперативной группировки.
//
Перем ГруппироватьРайоны Экспорт; // <Булево>

Перем Карта Экспорт;

Перем ЖурналНачалоПериода, ЖурналКонецПериода;
//Перем ОтображатьТекущийРейсНаКарте;
Перем соИнтерфейсыОтображенияРейсов;

Перем тзСтилиРейсов;
Перем ОтображатьЗагрузкуРейсаВПроцентах;
Перем ЦветПерегрузки, ЦветВыгружен;

//Перем икМониторингТранспорта;
//Перем ОтображатьТрекиНаКарте;
Перем соРейсыНаКарте;
Перем ИндексТекущегоСтиля;

Перем ИсточникНаФорме;
Перем тзРейсы;

Перем ВводОтчетовВодителяВПланировании;
Перем ИспользоватьСборкиПоРейсам;

Перем РедактируемыйРейс;
Перем РедактированиеРейсов Экспорт;
Перем РедактируемыйМаршрут;
Перем РедактированиеМаршрутов Экспорт;
Перем КнопкаПанелиРедактированияМаршрута;
Перем КнопкаПанелиРедактированияРейса;

Перем ТекущийВидОтображенияРейсов;

//Перем ПоследняяАктивнаяСтрока;

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	Если соРейсыНаКарте <> Неопределено Тогда
		
		Для каждого КлючЗначение Из соРейсыНаКарте Цикл
			
			Журнал.ФормаЖурнала.ПолеКарты.УдалитьОбъект(КлючЗначение.Значение.Рейс);
			КлючЗначение.Значение.Рейс.ОтключитьВсеОбработчики();
			КлючЗначение.Значение.Рейс = Неопределено;
		КонецЦикла;
		
		соРейсыНаКарте.Очистить();
	КонецЕсли;
	
	Если тзСтилиРейсов <> Неопределено Тогда
		
		тзСтилиРейсов.Очистить();
	КонецЕсли;
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	Роль = Неопределено;
	Архив = Неопределено;
	Подбор = Неопределено;
	ГруппироватьРайоны = Неопределено;
	Карта = Неопределено;
	ЖурналНачалоПериода = Неопределено;
	ЖурналКонецПериода = Неопределено;
	соИнтерфейсыОтображенияРейсов = Неопределено;
	тзСтилиРейсов = Неопределено;
	ОтображатьЗагрузкуРейсаВПроцентах = Неопределено;
	ЦветПерегрузки = Неопределено;
	ЦветВыгружен = Неопределено;
	соРейсыНаКарте = Неопределено;
	ИндексТекущегоСтиля = Неопределено;
	ИсточникНаФорме = Неопределено;
	тзРейсы = Неопределено;
	ВводОтчетовВодителяВПланировании = Неопределено;
	ИспользоватьСборкиПоРейсам = Неопределено;
	РедактируемыйРейс = Неопределено;
	РедактированиеРейсов = Неопределено;
	КнопкаПанелиРедактированияРейса = Неопределено;
	ТекущийВидОтображенияРейсов = Неопределено;
	
КонецПроцедуры

Процедура УдалитьТочкиДоставкиИзРейса(ИдТочекМаршрута) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    ЗаданияРейса.Доставка
	|  ИЗ
	|    РегистрСведений.новаТочкиМаршрутаРейсов КАК ТочкиМаршрута
	|    ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК ЗаданияРейса
	|      ПО
	|        ТочкиМаршрута.Рейс = ЗаданияРейса.Рейс
	|        И ТочкиМаршрута.КодТочки = ЗаданияРейса.КодТочки
	|  ГДЕ
	|    ТочкиМаршрута.Рейс = &Рейс
	|    И ТочкиМаршрута.ИдТочки В (&ИдТочекМаршрута)
	|");
	
	Запрос.УстановитьПараметр("Рейс", РедактируемыйРейс);
	Запрос.УстановитьПараметр("ИдТочекМаршрута", ИдТочекМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Доставки = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Доставки.Добавить(Выборка.Доставка);
		КонецЦикла;
		
		МаршрутРейса = Обработки.новаИсточникМаршрутРейса.Создать();
		МаршрутРейса.УдалитьДоставки(РедактируемыйРейс, Доставки);
		
		Оповестить("ИзРейсаУдаленыДоставки", Доставки, Журнал);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыбореМаркеров(СписокМаркеров, Свойство)
	
	Если РедактируемыйРейс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокТочекМаршрута = Новый Массив;
	Для каждого Маркер Из СписокМаркеров Цикл
		
		СсылкаНаРейс = БизнесПроцессы.новаРейсМестнойДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(Маркер.Рейс.Рейс.Ид));
		Если СсылкаНаРейс = РедактируемыйРейс Тогда
			
			СписокТочекМаршрута.Добавить(Маркер.Данные.Точка.Ид);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		
		УдалитьТочкиДоставкиИзРейса(СписокТочекМаршрута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыделенииМаркеровОбластью(СписокДанных)
	
	Если РедактируемыйРейс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокТочекМаршрута = Новый Массив;
	Для каждого ИсточникДанных Из СписокДанных Цикл
		
		СсылкаНаРейс = БизнесПроцессы.новаРейсМестнойДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИсточникДанных.Точка.Рейс.Ид));
		Если СсылкаНаРейс = РедактируемыйРейс Тогда
			
			СписокТочекМаршрута.Добавить(ИсточникДанных.Точка.Ид);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		
		УдалитьТочкиДоставкиИзРейса(СписокТочекМаршрута);
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактироватьРейс(Кнопка = Неопределено)
	
	Если Не Журнал.ЕстьКарта Тогда
		Возврат;
	КонецЕсли;
	
	Журнал.ФормаЖурнала.УстановитьВидимостьКарты(Истина);
	
	Если Журнал.ФормаЖурнала.ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Журнал.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КнопкаПанелиРедактированияРейса = Неопределено Тогда
		КнопкаПанелиРедактированияРейса = Кнопка;
	КонецЕсли;
	
	Если КнопкаПанелиРедактированияРейса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если не КнопкаПанелиРедактированияРейса.Пометка Тогда
		
		Если ЗначениеЗаполнено(Журнал.Дерево.ТекущиеДанные.Рейс) Тогда
			
			Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
			Для Каждого Строка Из Строки Цикл
				Если Строка = Журнал.Дерево.ТекущиеДанные Тогда Продолжить; КонецЕсли;
				
				Если Строка.ОтображатьРейсНаКарте Тогда
					УдалитьРейсСКарты(Строка, Истина);
					Журнал.ОкончитьРедактированиеСтроки(Строка);
				КонецЕсли;
			КонецЦикла;
			
			НачатьВыдачуСтилейСНачала();
			
			Если ЗначениеЗаполнено(Журнал.Дерево.ТекущиеДанные.Рейс) Тогда
				ПоказатьРейсНаКарте(Журнал.Дерево.ТекущиеДанные);
				Журнал.ОкончитьРедактированиеСтроки(Журнал.Дерево.ТекущиеДанные);
			КонецЕсли;				
			
			НачатьРедактированиеРейса(Журнал.Дерево.ТекущиеДанные.Рейс);
			КнопкаПанелиРедактированияРейса.Пометка = Истина;
			КнопкаПанелиРедактированияРейса.Текст = "Завершить редактирование рейса";
		КонецЕсли;
		
	Иначе
		
		ЗавершитьРедактированиеРейса();
		КнопкаПанелиРедактированияРейса.Пометка = Ложь;
		КнопкаПанелиРедактированияРейса.Текст = "Изменить рейс";
	КонецЕсли;;
	
КонецПроцедуры

Процедура НачатьРедактированиеРейса(Рейс)
	
	РедактируемыйРейс = Рейс;
	
	Оповестить("НачалоРедактированияРейса", Рейс, Журнал);
	
КонецПроцедуры

Процедура ЗавершитьРедактированиеРейса()
	
	Если РедактируемыйРейс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ЗавершеноРедактированиеРейса", РедактируемыйРейс, Журнал);
	
	РедактируемыйРейс = Неопределено;
	
КонецПроцедуры

//Переключает отображаение рейсов
//
Процедура ИзменитьВидОтображения(Кнопка)
	
	Меню = Новый СписокЗначений;
	Меню.Добавить("МаршрутИТочки", "Маршрут и точки доставки", ТекущийВидОтображенияРейсов = "МаршрутИТочки");
	Меню.Добавить("Точки", "Только точки доставки", ТекущийВидОтображенияРейсов = "Точки");
	
	ВыбранныйЭлемент = Журнал.ВыбратьИзМеню(Меню, Кнопка);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = ТекущийВидОтображенияРейсов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидОтображенияРейсов = ВыбранныйЭлемент.Значение;
	
	ИзменитьВидОтображенияРейсовНаКарте();
	
КонецПроцедуры

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если ДанныеСтроки.Группировка <> NULL Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
		
		Если КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "ОсновнойРайон" Тогда
			Если ТипЗнч(ДанныеСтроки.ОсновнойРайон) = Тип("СправочникСсылка.новаГруппыРайонов") Тогда
				ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 0, 255);		
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки Тогда
		
		Если ДанныеСтроки.СопровождениеРейсаЗавершено Тогда
			Если Журнал.Дерево.Значение.Строки.Индекс(ДанныеСтроки) % 2 = 0 тогда
				ОформлениеСтроки.ЦветФона = Новый Цвет(208, 255, 208);
			Иначе
				ОформлениеСтроки.ЦветФона = Новый Цвет(192, 239, 192);
			КонецЕсли;
		Иначе
			Если Журнал.Дерево.Значение.Строки.Индекс(ДанныеСтроки) % 2 = 0 тогда
				ОформлениеСтроки.ЦветФона = Новый Цвет(250, 255, 198);
			Иначе
				ОформлениеСтроки.ЦветФона = Новый Цвет(234, 239, 182);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки
		Или Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки И ВводОтчетовВодителяВПланировании Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ОтчетВодителя) Тогда			
			
			БылоПредЗакрытие = БылоПредварительноеЗакрытие(ДанныеСтроки.ОтчетВодителя.Ссылка);
			
			Если БылоПредЗакрытие Тогда
				ОформлениеСтроки.ЦветФона = WebЦвета.НасыщенноНебесноГолубой;
			Иначе			  
				ОформлениеСтроки.ЦветФона = Новый Цвет(208, 255, 208);
			КонецЕсли;
			
			//УдаленноеЗакрытие = ДанныеСтроки.ОтчетВодителя.УдаленноеЗакрытие;
			//ОтчетВодителяВылВведенРучную = ДанныеСтроки.ОтчетВодителя.ДокументВнесенВРучную;
			//
			//Если УдаленноеЗакрытие И Не ОтчетВодителяВылВведенРучную Тогда
			//	ОформлениеСтроки.ЦветТекста = WebЦвета.АнтикБелый;
			//	ОформлениеСтроки.ЦветФона = WebЦвета.Коричневый;
			//КонецеСли;	
			//Если ДанныеСтроки.ПредварительноЗакрыт Тогда
			//	ОформлениеСтроки.ЦветФона = WebЦвета.НасыщенноНебесноГолубой;
			//Иначе			  
			//	ОформлениеСтроки.ЦветФона = Новый Цвет(208, 255, 208);
			//конецесли
		Иначе
			ОформлениеСтроки.ЦветФона = Новый Цвет(250, 255, 198);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.КартинкаРейса <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.Рейс.УстановитьКартинку(ДанныеСтроки.КартинкаРейса);
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Рейс.УстановитьТекст(ДанныеСтроки.Транспорт_Пред + " - " + ДанныеСтроки.Водитель_Пред + ?(ПустаяСтрока(ДанныеСтроки.Экспедитор_Пред), "", " - " + ДанныеСтроки.Экспедитор_Пред));
	ОформлениеСтроки.Ячейки.ВремяВыезда.УстановитьКартинку(БиблиотекаКартинок.новаПустаяКартинка);
	//ОформлениеСтроки.Ячейки.ДлительностьРейса.УстановитьТекст(Формат('00010101' + (ДанныеСтроки.ДатаКонца - ДанныеСтроки.ВремяВыезда), "ДФ=ЧЧ:мм"));
	
	Если ОтображатьЗагрузкуРейсаВПроцентах Тогда
		Если ДанныеСтроки.ЗагрузкаПоВесу <> 0 Тогда
			ОформлениеСтроки.Ячейки.ЗагрузкаПоВесу.УстановитьТекст(Строка(ДанныеСтроки.ЗагрузкаПоВесу) + " %");
		КонецЕсли;
		
		Если ДанныеСтроки.ЗагрузкаПоОбъему <> 0 Тогда
			ОформлениеСтроки.Ячейки.ЗагрузкаПоОбъему.УстановитьТекст(Строка(ДанныеСтроки.ЗагрузкаПоОбъему) + " %");
		КонецЕсли;
		
		Если ДанныеСтроки.ЗагрузкаПоЕдиницамПеревозки <> 0 Тогда
			ОформлениеСтроки.Ячейки.ЗагрузкаПоЕдиницамПеревозки.УстановитьТекст(Строка(ДанныеСтроки.ЗагрузкаПоЕдиницамПеревозки) + " %");
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.ПревышенВес Тогда
		ОформлениеСтроки.Ячейки.ЗагрузкаПоВесу.ЦветФона = ЦветПерегрузки;
	КонецЕсли;	
	
	//Если ИспользоватьСборкиПоРейсам Тогда
	//	Если (ДанныеСтроки.КоличествоДоставокДляСборки <> NULL) И (ДанныеСтроки.КоличествоДоставокДляСборки <> 0) Тогда
	//		ОформлениеСтроки.Ячейки.КоличествоДоставокДляСборки.ЦветФона = Новый Цвет(117, 255, 96);
	//		ОформлениеСтроки.Ячейки.КоличествоДоставокДляСборки.Шрифт = Новый Шрифт(,, Истина);
	//	КонецЕсли;	
	//КонецЕсли;	
	
	Если ДанныеСтроки.ПревышенОбъем Тогда
		ОформлениеСтроки.Ячейки.ЗагрузкаПоОбъему.ЦветФона = ЦветПерегрузки;
	КонецЕсли;	
	
	Если ДанныеСтроки.ПревышеноКоличествоЕдиницПеревозки Тогда
		ОформлениеСтроки.Ячейки.ЗагрузкаПоЕдиницамПеревозки.ЦветФона = ЦветПерегрузки;
	КонецЕсли;	
	
	ИдРейса = СокрЛП(ДанныеСтроки.Рейс.УникальныйИдентификатор());
	стРейсНаКарте = соРейсыНаКарте[ИдРейса];
	
	Если стРейсНаКарте <> Неопределено Тогда
		Если стРейсНаКарте.Стиль <> Неопределено Тогда
			ОформлениеСтроки.Ячейки.ОтображатьРейсНаКарте.УстановитьКартинку(стРейсНаКарте.Стиль.Картинка);
		КонецЕсли; 
	КонецЕсли;
	
	Если Роль <> Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
		Если ДанныеСтроки.СостояниеОбмена = Перечисления.новаСостоянияОбъектовДляОбмена.Выгружен Тогда
			ОформлениеСтроки.ЦветТекста	= ЦветВыгружен;	
			//ОформлениеСтроки.ЦветФона = Новый Цвет(250, 255, 198);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
		
	ИначеЕсли Событие = "АктивизированаСтрока" Тогда
		
		Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки И Параметр1 <> Неопределено Тогда
			Меню = Журнал.ПолучитьКонтекстноеМеню(ЭтотОбъект);
			Если ЗначениеЗаполнено(Параметр1.Рейс) Тогда
				СформироватьМенюПеремещенияВРейсы(Меню, Параметр1.Рейс, Параметр1.ОсновнойРайон);
			Иначе
				ОчиститьМенюПеремещенияВРейсы(Меню);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "ДобавленыДанныеВДерево" Тогда
		
	ИначеЕсли Событие = "ОкончаниеРедактирования" Тогда
		Если Параметр1.ОтображатьРейсНаКарте Тогда
			ПоказатьРейсНаКарте(Параметр1);
		Иначе
		    УдалитьРейсСКарты(Параметр1);
		КонецЕсли;
		
		ПересчитатьРейс = Ложь;
		обРейс = Параметр1.Рейс.ПолучитьОбъект();
		Если обРейс.ДатаНачалаФакт <> Параметр1.ДатаВыездаФакт Тогда
			Параметр1.ДатаВыездаФакт = НачалоДня(обРейс.ДатаНачала) + (Параметр1.ДатаВыездаФакт - НачалоДня(Параметр1.ДатаВыездаФакт));
			
			Если обРейс.ДатаНачалаФакт <> Параметр1.ДатаВыездаФакт Тогда
				обРейс.ДатаНачалаФакт = Параметр1.ДатаВыездаФакт;
				ПересчитатьРейс = Истина;
			КонецЕсли;
		КонецЕсли;
		Если обРейс.ДатаКонцаФакт <> Параметр1.ДатаВозвращенияФакт Тогда
			Параметр1.ДатаВозвращенияФакт = НачалоДня(обРейс.ДатаКонца) + (Параметр1.ДатаВозвращенияФакт - НачалоДня(Параметр1.ДатаВозвращенияФакт));
			
			Если обРейс.ДатаКонцаФакт <> Параметр1.ДатаВозвращенияФакт Тогда
					обРейс.ДатаКонцаФакт = Параметр1.ДатаВозвращенияФакт;
			КонецЕсли;
		КонецЕсли;
		
		Если обРейс.Модифицированность() Тогда
			обРейс.Записать();
		КонецЕсли;
		
		Если ПересчитатьРейс Тогда
			обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
			стРейс = обМаршрут.НачатьРедактирование(Параметр1.Рейс, обРейс);
			обМаршрут.ПересчитатьРейс_(стРейс);
			обМаршрут.ЗакончитьРедактирование(,Ложь);
			новаОбщиеПроцедуры.ОповеститьОбОбновлении("РегистрСведений.новаТочкиМаршрутаРейсов");
		КонецЕсли;
		
	ИначеЕсли Событие = "Выбор" Тогда
		Если Журнал.Дерево.ТекущаяКолонка.Имя = "ОтображатьРейсНаКарте" Тогда
			Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
			Для Каждого Строка Из Строки Цикл
				Если Строка = Журнал.Дерево.ТекущиеДанные Тогда Продолжить; КонецЕсли;
				
				Если Строка.ОтображатьРейсНаКарте Тогда
					УдалитьРейсСКарты(Строка, Истина);
					Журнал.ОкончитьРедактированиеСтроки(Строка);
				КонецЕсли;
			КонецЦикла;
			
			НачатьВыдачуСтилейСНачала();
			
			Если ЗначениеЗаполнено(Журнал.Дерево.ТекущиеДанные.Рейс) Тогда
				ПоказатьРейсНаКарте(Журнал.Дерево.ТекущиеДанные);
				Журнал.ОкончитьРедактированиеСтроки(Журнал.Дерево.ТекущиеДанные);
			КонецЕсли;				
			
		    Возврат Истина;
		КонецЕсли;
		
		Если Параметр1.ЗадачаРейса = NULL Тогда
			Если ЗначениеЗаполнено(Параметр1.Рейс) Тогда
				ФормаРейса = Параметр1.Рейс.ПолучитьФорму();
				ФормаРейса.ОтображатьКартуПриОткрытии = Параметр1.ОтображатьРейсНаКарте;
				ФормаРейса.Открыть();
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
		
		Если Параметр2.ТолькоПросмотр Или Параметр2.ДанныеФлажка <> "" Тогда
			Параметр3 = Ложь;
			
			Если Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки Тогда
				Если ЗначениеЗаполнено(Параметр1.ОтчетВодителя) Тогда
					//+++ Костя 051015 Модальное открытие формы
					ФормаДок = Параметр1.ОтчетВодителя.ПолучитьФорму();
					ФормаДок.ОткрытьМодально();
					//ОткрытьЗначение(Параметр1.ОтчетВодителя);
					//+++ Костя 051015 Модальное открытие формы
				Иначе
					обОтчет = Документы.новаОтчетВодителя.СоздатьДокумент();
					//обОтчет.Заполнить(Параметр1.Рейс); до новой формы
					
					Если Константы.ПриВводеОтчетовВодителейОбновлятьРейсыИзМаршрутизации.Получить() Тогда
						Если Не lem.ПоРейсуВведеноПредварительноеЗакрытие(Параметр1.Рейс) Тогда
							
							// МАС - 25.06.2018 - №2286 --->>
							//Зап = Новый Запрос;
							//Зап.Текст = "ВЫБРАТЬ
							//            |	Рейс.Идентификатор КАК Идентификатор,
							//            |	Рейс.ДатаРейса КАК ДатаРейса,
							//            |	Рейс.vr_РаспределительныйЦентр КАК РЦентр
							//            |ИЗ
							//            |	Документ.Рейс КАК Рейс
							//            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
							//            |		ПО Рейс.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
							//            |ГДЕ
							//            |	Рейс.РейсМестнойДоставки = &Рейс
							//            |	И Рейс.Проведен = ИСТИНА
							//            |	И ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, ЛОЖЬ) = ЛОЖЬ";
							
							Зап = Новый Запрос;
							Зап.Текст = "ВЫБРАТЬ
							            |	Рейс.Идентификатор КАК Идентификатор,
							            |	Рейс.ДатаРейса КАК ДатаРейса,
							            |	Рейс.vr_РаспределительныйЦентр КАК РЦентр,
							            |	ЕСТЬNULL(ПараметрыРегиональныхТерминаловСрезПоследних.МетодикаЛогистическойМаршрутизации, ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute)) КАК МетодикаМаршрутизации
							            |ИЗ
							            |	Документ.Рейс КАК Рейс
							            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
							            |		ПО Рейс.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
							            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних КАК ПараметрыРегиональныхТерминаловСрезПоследних
							            |		ПО Рейс.ТерминалДоставки = ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал
							            |ГДЕ
							            |	Рейс.РейсМестнойДоставки = &Рейс
							            |	И Рейс.Проведен = ИСТИНА
							            |	И ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, ЛОЖЬ) = ЛОЖЬ";
							// <<--- МАС
							
							Зап.УстановитьПараметр("Рейс", Параметр1.Рейс.Ссылка);
							Рез = зап.Выполнить().Выбрать();
							Если Рез.Следующий() Тогда
								// МАС - 25.06.2018 - №2286 --->> 
								//lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);
								Если Рез.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute Тогда				
									lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);									
								КонецЕсли; 
								// <<--- МАС
								
							КонецеСли;	
						КонецЕсли;
					КонецеСли;	
					
					
					обОтчет.Заполнить(Параметр1.Рейс);
					
					//+++ БАО 11.08.2017 №1638 
					обОтчет.УдаленноеЗакрытие = baoВызовСервера.ПолучитьУдаленноеЗакрытиеДляТранспортаПоРейсу(Параметр1.Рейс);
					обОтчет.ДокументВнесенВРучную = Истина;
					//--- БАО 11.08.2017 №1638 

					
					//обОтчет.Дата = ТекущаяДата();
					//обОтчет.Записать(РежимЗаписиДокумента.Запись);
					обОтчет.ПодтянутьДанныеМобильногоПриложения();
					//+++ Костя 051015 Модальное открытие формы
					//ФормаДок = обОтчет.ПолучитьФорму("ФормаДокументаУпр");
					
					// Михушкин !!! для новой формы !!! --->> 
					Пар = Новый Структура("Ключ", обОтчет.Ссылка);
					ФормаДок = ПолучитьФорму("Документ.новаотчетВодителя.Форма.ФормаДокументаУпр", Пар);
					ФормаДок.ОткрытьМодально();
					// <<--- Михушкин
					
					//////!!!!!!!! - для старой формы - !!!!!!!!!!
					//ФормаДок = обОтчет.ПолучитьФорму();
					//ФормаДок.ОткрытьМодально();		
					
					
					
					//ОткрытьЗначение(обОтчет);
					//+++ Костя 051015 Модальное открытие формы
				КонецЕсли;				
			Иначе
				ФормаРейса = Параметр1.Рейс.ПолучитьФорму();
				ФормаРейса.обЗадача = Параметр1.ЗадачаРейса.ПолучитьОбъект();
				ФормаРейса.ОтображатьКартуПриОткрытии = Параметр1.ОтображатьРейсНаКарте;
				ФормаРейса.Открыть();
				
				//ОткрытьЗначение(Параметр1.ЗадачаРейса);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "УстановленФильтр" Тогда
		Если Параметр1.Свойство("ДатаНачала") Тогда
			ЖурналНачалоПериода = Параметр1.ДатаНачала;
		КонецЕсли;
		Если Параметр1.Свойство("ДатаКонца") Тогда
			ЖурналКонецПериода = Параметр1.ДатаКонца;
		КонецЕсли;
		СформироватьОтбор();
		Журнал.ОчиститьВведенныеДанные(ЭтотОбъект);
		УдалитьВсеРейсыСКарты();
		
	ИначеЕсли Событие = "ИзменениеПараметров" Тогда
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "ВыделитьВсеРейсы" Тогда
			УстановитьВыделениеРейсов(Истина);
			
		ИначеЕсли Параметр1 = "СнятьВыделениеРейсов" Тогда
			УстановитьВыделениеРейсов(Ложь);
			
		ИначеЕсли Параметр1 = "ЗавершитьПланирование" Тогда
			
			Если КнопкаПанелиРедактированияРейса <> Неопределено и КнопкаПанелиРедактированияРейса.Пометка Тогда
				РедактироватьРейс(Параметр3);
			КонецЕсли;
			
			ЗавершитьПланированиеРейсов();
			
		ИначеЕсли Параметр1 = "ОптимизироватьМаршрут" Тогда
			
			Если КнопкаПанелиРедактированияРейса <> Неопределено и КнопкаПанелиРедактированияРейса.Пометка Тогда
				РедактироватьРейс(Неопределено);
			КонецЕсли;
			
			АвтоупорядочитьМаршруты();
			
		ИначеЕсли Параметр1 = "СодержимоеРейсов" Тогда // Евген
			СодержимоеРейсов();
		ИначеЕсли Параметр1 = "ПоискЗаказа" Тогда // Евген
			ПоискЗаказа();
		ИначеЕсли Параметр1 = "ПредварительноеЗакрытиеРейсов" Тогда // Евген
			ПредварительноеЗакрытиеРейсов();
			
		ИначеЕсли Параметр1 = "СоздатьСборки" Тогда
			СоздатьСборки();
			
		ИначеЕсли Параметр1 = "СоздатьОтчетыВодителей" Тогда
	    	СоздатьОтчетыВодителей();
	
		ИначеЕсли Параметр1 = "СогласоватьРейсы" Тогда
			СогласоватьРейсы();
			
		ИначеЕсли Параметр1 = "ПодготовитьРейсы" Тогда
			ПодготовитьРейсы();

		ИначеЕсли Параметр1 = "ПодготовитьИВыгрузитьРейсыВXML" Тогда
			СписокЗадач = ПолучитьВыбранныеЗадачи();
			Если СписокЗадач.Количество() > 0 Тогда
				ПодготовитьРейсы();
				Если ПараметрыСеанса.новаТекущийПользователь.ОсновнойПланВыгрузки <> Справочники.новаОбменыДанными.ПустаяСсылка() Тогда
					новаОбмены.ВыполнитьОбменПоНастройке(ПараметрыСеанса.новаТекущийПользователь.ОсновнойПланВыгрузки, Ложь, СписокЗадач,Истина);
				Иначе
					Сообщить("Не заполнено значение основного плана экспорта в настройках пользователя. Рейсы не выгружены!");
				КонецЕсли;
	  		КонецЕсли;
			
		ИначеЕсли Параметр1 = "ВыгрузитьРейсыВXML" Тогда
			Если ПараметрыСеанса.новаТекущийПользователь.ОсновнойПланВыгрузки <> Справочники.новаОбменыДанными.ПустаяСсылка() Тогда
				СписокЗадач = ПолучитьВыбранныеЗадачи();
				Если СписокЗадач.Количество() > 0 Тогда
					новаОбмены.ВыполнитьОбменПоНастройке(ПараметрыСеанса.новаТекущийПользователь.ОсновнойПланВыгрузки, Ложь, СписокЗадач,Ложь);
				КонецЕсли;
			Иначе
				Сообщить("Не заполнено значение основного плана экспорта в настройках пользователя. Рейсы не выгружены!");
	  		КонецЕсли;
						
		ИначеЕсли Параметр1 = "ЗафиксироватьВыполнение" Тогда
			ЗафиксироватьВыполнениеРейсов();
						
		ИначеЕсли Параметр1 = "СопроводитьПовторно" Тогда
			СопроводитьПовторно();
			
		ИначеЕсли Параметр1 = "РасформироватьРейсы" Тогда
			
			Если КнопкаПанелиРедактированияРейса <> Неопределено и КнопкаПанелиРедактированияРейса.Пометка Тогда
				РедактироватьРейс();
			КонецЕсли;
			
			РасформироватьРейсы();
			
		ИначеЕсли Параметр1 = "ВернутьРейсыНаПланирование" Тогда
			
			Если КнопкаПанелиРедактированияРейса <> Неопределено и КнопкаПанелиРедактированияРейса.Пометка Тогда
				РедактироватьРейс();
			КонецЕсли;
			
			ВернутьРейсыНаПланирование();
					
		ИначеЕсли Параметр1 = "Завершить" Тогда
			ЗавершитьРейсы();
			
		ИначеЕсли Параметр1 = "ПечатьРейса" Тогда
			РаспечататьРейс(Параметр3);
		ИначеЕсли Параметр1 = "ПоказатьКарту" Тогда
		    ПоказатьКарту();
		ИначеЕсли Параметр1 = "ВидОтображенияРейса" Тогда
			ИзменитьВидОтображения(Параметр3);
			
		ИначеЕсли Параметр1 = "РедактированиеРейса" Тогда
			
			РедактироватьРейс(Параметр3);
			
		ИначеЕсли Параметр1 = "ЗавершитьРедактированиеРейса" Тогда
			
			Если КнопкаПанелиРедактированияРейса <> Неопределено и КнопкаПанелиРедактированияРейса.Пометка Тогда
				РедактироватьРейс(Параметр3);
			КонецЕсли;
			
		ИначеЕсли Параметр1 = "РедактированиеМаршрута" Тогда
			РедактироватьМаршрут(Параметр3);
			
		ИначеЕсли Параметр1 = "НачатьПодбор" Тогда
			Если ЗначениеЗаполнено(Журнал.ТекущиеДанные) Тогда
				Если ЗначениеЗаполнено(Журнал.ТекущиеДанные.Рейс) Тогда
					Оповестить("НачатьПодборРейса", Журнал.ТекущиеДанные, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Параметр1 = "ВвестиОтчетВодителя" Тогда
			Если ЗначениеЗаполнено(Журнал.ТекущиеДанные) Тогда
				Если ЗначениеЗаполнено(Журнал.ТекущиеДанные.ОтчетВодителя) Тогда
					ОткрытьЗначение(Журнал.ТекущиеДанные.ОтчетВодителя);
				Иначе
					обОтчет = Документы.новаОтчетВодителя.СоздатьДокумент();
					//обОтчет.Заполнить(Журнал.ТекущиеДанные.Рейс); до новой формы
					Если Константы.ПриВводеОтчетовВодителейОбновлятьРейсыИзМаршрутизации.Получить() Тогда
						Если Не lem.ПоРейсуВведеноПредварительноеЗакрытие(Журнал.ТекущиеДанные.Рейс) Тогда
							
						
						Зап = Новый Запрос;
						Зап.Текст = "ВЫБРАТЬ
						            |	Рейс.Идентификатор КАК Идентификатор,
						            |	Рейс.ДатаРейса КАК ДатаРейса,
						            |	Рейс.vr_РаспределительныйЦентр КАК РЦентр,
						            |	ЕСТЬNULL(ПараметрыРегиональныхТерминаловСрезПоследних.МетодикаЛогистическойМаршрутизации, ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute)) КАК МетодикаМаршрутизации
						            |ИЗ
						            |	Документ.Рейс КАК Рейс
						            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
						            |		ПО Рейс.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
						            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних КАК ПараметрыРегиональныхТерминаловСрезПоследних
						            |		ПО Рейс.ТерминалДоставки = ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал
						            |ГДЕ
						            |	Рейс.РейсМестнойДоставки = &Рейс
						            |	И Рейс.Проведен = ИСТИНА
						            |	И ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, ЛОЖЬ) = ЛОЖЬ";
						Зап.УстановитьПараметр("Рейс", Журнал.ТекущиеДанные.Рейс.Ссылка);
						Рез = зап.Выполнить().Выбрать();
						Если Рез.Следующий() Тогда
							
							// МАС - 26.06.2018 - №2286 --->> 
							//lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);
							Если Рез.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute Тогда
								lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);
							КонецЕсли;
							// <<--- МАС 	
							
						КонецеСли;	
						КонецеСли;
					КонецеСли;	
					обОтчет.Заполнить(Журнал.ТекущиеДанные.Рейс);
					обОтчет.ПодтянутьДанныеМобильногоПриложения();
					
					//+++ БАО 11.08.2017 №1638 
					обОтчет.УдаленноеЗакрытие = baoВызовСервера.ПолучитьУдаленноеЗакрытиеДляТранспортаПоРейсу(Журнал.ТекущиеДанные.Рейс);
					обОтчет.ДокументВнесенВРучную = Истина;
					//--- БАО 11.08.2017 №1638 

					обОтчет.ОбновитьИтоговыеПоказателиНаСервере(обОтчет);
					
					ОткрытьЗначение(обОтчет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "ГруппируемыйМаркерВыбран"
	          или Событие = "ВыделенаГруппаГруппируемыхМаркеров" Тогда
		
		ПриВыбореМаркеров(Параметр1, Параметр2);
		
	ИначеЕсли Событие = "ГруппируемыеМаркераВыделеныОбластью" Тогда
		
		ПриВыделенииМаркеровОбластью(Параметр1);
		
	ИначеЕсли Событие = "НачатьПеретаскивание" Тогда
		Возврат Новый Структура("Вид, Рейсы", "РейсыМестнойДоставки", Параметр1);
		
	ИначеЕсли Событие = "ПроверитьВозможностьПеретаскивания" Тогда
		Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
			Если Параметр1.Вид = "ВозможныеРейсыМестнойДоставки" Тогда
				Возврат Истина;
			КонецЕсли;
			Если Параметр1.Вид = "ПланируемыеДоставки" Тогда
				Возврат Параметр2 <> Неопределено;
			КонецЕсли;
			Если Параметр1.Вид = "ДоставкиРейса" Тогда
				Если Параметр2 = Неопределено Тогда Возврат Ложь; КонецЕсли;
				Если Параметр2.Рейс = Параметр1.Рейс Тогда Возврат Ложь; КонецЕсли;
				
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли Событие = "ПеретаскиваниеОкончено" Тогда
		Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
			Если Параметр1.Вид = "ВозможныеРейсыМестнойДоставки" Тогда
				СоздатьРейсыПоВозможнымРейсам(Параметр1.ВозможныеРейсы);
				Возврат Истина;
			КонецЕсли;
			Если Параметр1.Вид = "ПланируемыеДоставки" Тогда
				ДобавитьДоставкиВРейс(Параметр2.Рейс, Параметр1.Доставки);
				Возврат Истина;
			КонецЕсли;
			Если Параметр1.Вид = "ДоставкиРейса" Тогда
				Если Параметр1.Рейс <> Параметр2.Рейс Тогда
					ПереместитьТочкиМаршрутаВРейс(Параметр1.Рейс, Параметр2.Рейс, Параметр1.Доставки);
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "ОтключитьКарту" Тогда
		соРейсыНаКарте.Очистить();
		
	ИначеЕсли Событие = "СобытиеСистемы" и Параметр1 = "ИзмененРейсМестнойДоставки" Тогда
		
		Журнал.Обновить();
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();
	КонецЕсли;	
КонецФункции

Процедура РаспечататьРейс(КнопкаПечатиРейса)
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка КАК Значение,
	|	Наименование КАК Представление
	|ИЗ
	|	Справочник.новаШаблоныПечатныхФорм
	|
	|ГДЕ
	|	НЕ ПометкаУдаления
	| И Ссылка <> ЗНАЧЕНИЕ(Справочник.новаШаблоныПечатныхФорм.ОсновныеПечатныеФормы)
	|
	|УПОРЯДОЧИТЬ ПО Наименование ВОЗР 
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	сзМеню = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(сзМеню.Добавить(), Выборка);				
	КонецЦикла;
	
	ЭлВыбор = Журнал.ВыбратьИзМеню(сзМеню, КнопкаПечатиРейса);
	Если ЭлВыбор = Неопределено Тогда Возврат; КонецЕсли;
	
	мсРейсы = Новый Массив;
	Для Каждого Задача Из соЗадачи Цикл
		мсРейсы.Добавить(Задача.Ключ.БизнесПроцесс)
	КонецЦикла; 
	новаПечатныеФормы.РаспечататьРейсы(мсРейсы, ЭлВыбор.Значение);
КонецПроцедуры

Процедура УстановитьВыделениеРейсов(Выделение)
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
	Для Каждого Строка Из Строки Цикл
		Строка.РейсВыбран = Выделение;
		Журнал.ОкончитьРедактированиеСтроки(Строка);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСледующийСтиль()
	Стиль = тзСтилиРейсов[ИндексТекущегоСтиля];
	
	ИндексТекущегоСтиля = ИндексТекущегоСтиля + 1;
	Если ИндексТекущегоСтиля >= тзСтилиРейсов.Количество() Тогда
		ИндексТекущегоСтиля = 0;
	КонецЕсли;
	
	Возврат Стиль;
КонецФункции

Процедура НачатьВыдачуСтилейСНачала()
	ИндексТекущегоСтиля = 0;
КонецПроцедуры

Процедура ПриОтображенииОтсутствующегоВБДРейса(РейсНаКарте) Экспорт
	Рейс = БизнесПроцессы.новаРейсМестнойДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(РейсНаКарте.Рейс.Ид));
	
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	обМаршрут.НачатьРедактирование(Рейс, Неопределено);
	обМаршрут.ПересчитатьРейсКСЛ(Рейс, Истина);
	обМаршрут.ЗакончитьРедактирование(,Ложь);
КонецПроцедуры

Процедура ПоказатьРейсНаКарте(СтрокаРейса)
	Если Не Журнал.ЕстьКарта Тогда Возврат; КонецЕсли;
	
	Журнал.ФормаЖурнала.УстановитьВидимостьКарты(Истина);
	Если Журнал.ФормаЖурнала.ПолеКарты = Неопределено Тогда Возврат; КонецЕсли;
	
	СтрокаРейса.ОтображатьРейсНаКарте = Истина;
	
	ИдРейса = СокрЛП(СтрокаРейса.Рейс.УникальныйИдентификатор());
	стРейсНаКарте = соРейсыНаКарте[ИдРейса];
	
	Если стРейсНаКарте = Неопределено Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		РейсНаКарте = КСЛ.Доставка_Карты_ОтображениеРейса();
		РейсНаКарте.Рейс.Ид = ИдРейса;
		РейсНаКарте.ОтображатьТрек = (ТекущийВидОтображенияРейсов = "МаршрутИТочки");
		РейсНаКарте.ПриОтображенииОтсутствующегоВБДРейса(ЭтотОбъект, "ПриОтображенииОтсутствующегоВБДРейса");
		СтильРейса = Неопределено;
		Если тзСтилиРейсов.Количество() <> 0 Тогда
			СтильРейса = ПолучитьСледующийСтиль();
			
			Стиль = КСЛ.ГрафическийИнтерфейс_Графика.СоздатьСтиль();
			Стиль.ЦветРейса = СокрЛП(СтильРейса.Цвет);
			РейсНаКарте.Стиль = Стиль;
		КонецЕсли;
		
		стРейсНаКарте = Новый Структура("Рейс, Стиль", РейсНаКарте, СтильРейса);
		
		соРейсыНаКарте.Вставить(ИдРейса, стРейсНаКарте);
		
		//ИндексЦвета = (соРейсыНаКарте.Количество() - 1) % тзСтилиРейсов.Количество();
		//СтрокаРейса.Стиль = тзСтилиРейсов[ИндексЦвета];
	КонецЕсли;
	
	Журнал.ФормаЖурнала.ПолеКарты.ДобавитьОбъект(стРейсНаКарте.Рейс);
	
	Если РедактируемыйРейс = Неопределено Тогда
		Журнал.ФормаЖурнала.ПолеКарты.УстановитьОптимальныйМасштаб();
	КонецЕсли;
	
КонецПроцедуры

//Обновляет рейсы на карте
//
Процедура ИзменитьВидОтображенияРейсовНаКарте()
	
	//Проверка
	Если Не Журнал.ЕстьКарта Тогда
		Возврат;
	КонецЕсли;
	
	Журнал.ФормаЖурнала.УстановитьВидимостьКарты(Истина);
	Если Журнал.ФормаЖурнала.ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Тело
	
	Для каждого КлючЗначение Из соРейсыНаКарте Цикл
		
		КлючЗначение.Значение.Рейс.ОтображатьТрек = (ТекущийВидОтображенияРейсов = "МаршрутИТочки");
		
		Журнал.ФормаЖурнала.ПолеКарты.ОбновитьОбъект(КлючЗначение.Значение.Рейс);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьРейсСКарты(СтрокаРейса, БезОбновленияКарты = Ложь)
	Если Не Журнал.ЕстьКарта Тогда Возврат; КонецЕсли;
	
	Если Журнал.ФормаЖурнала.ПолеКарты = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаРейса.ОтображатьРейсНаКарте = Ложь;
	
	ИдРейса = СокрЛП(СтрокаРейса.Рейс.УникальныйИдентификатор());
	
	стРейсНаКарте = соРейсыНаКарте[ИдРейса];
	Если стРейсНаКарте = Неопределено Тогда Возврат; КонецЕсли;
	
	Журнал.ФормаЖурнала.ПолеКарты.УдалитьОбъект(стРейсНаКарте.Рейс);
	стРейсНаКарте.Рейс.ОтключитьВсеОбработчики();
	соРейсыНаКарте.Удалить(ИдРейса);
	
	Если Не БезОбновленияКарты и РедактируемыйРейс = Неопределено Тогда
		Журнал.ФормаЖурнала.ПолеКарты.УстановитьОптимальныйМасштаб();
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьВсеРейсыСКарты()
	Для Каждого ЭлРейс Из соРейсыНаКарте Цикл
		Журнал.ФормаЖурнала.ПолеКарты.УдалитьОбъект(ЭлРейс.Значение.Рейс);
		ЭлРейс.Значение.Рейс.ОтключитьВсеОбработчики();
	КонецЦикла;
	
	соРейсыНаКарте.Очистить();
КонецПроцедуры

Процедура ПереместитьТочкиМаршрутаВРейс(РейсИсточник, РейсПриемник, Доставки)
	НачатьТранзакцию();
	
	обМаршрутИсточник = Обработки.новаИсточникМаршрутРейса.Создать();
	обМаршрутИсточник.АвтоСохранениеИзменений = Ложь;
	стРейсИсточник = обМаршрутИсточник.НачатьРедактирование(РейсИсточник, Неопределено);
	Для Каждого Доставка Из Доставки Цикл
		обМаршрутИсточник.УдалитьДоставку(РейсИсточник, Доставка);
	КонецЦикла;
		
	обМаршрутПриемник = Обработки.новаИсточникМаршрутРейса.Создать();
	обМаршрутПриемник.АвтоСохранениеИзменений = Ложь;
	стРейсПриемник = обМаршрутПриемник.НачатьРедактирование(РейсПриемник, Неопределено);
	Для Каждого Доставка Из Доставки Цикл
		обМаршрутПриемник.ДобавитьДоставку(РейсПриемник, Доставка);
	КонецЦикла;
	
	обМаршрутИсточник.ПересчитатьРейс_(стРейсИсточник, Истина, Истина);
	обМаршрутПриемник.ПересчитатьРейс_(стРейсПриемник, Истина, Истина);
	
	Если стРейсПриемник.Рейс.ПроверитьСоответствиеДоставокТранспорту() Тогда
		
		обМаршрутИсточник.СохранитьМаршрутРейса_(стРейсИсточник);
		стРейсИсточник.Рейс.Записать();
		
		обМаршрутПриемник.СохранитьМаршрутРейса_(стРейсПриемник);
		стРейсПриемник.Рейс.Записать();
	
		Если стРейсИсточник.Маршрут.Количество()=0 Тогда
			
			обМаршрутИсточник.РасформироватьРейс(стРейсИсточник.Ссылка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДоставкиВРейс(Рейс, Доставки) Экспорт
	
	НачатьТранзакцию();
	
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = обМаршрут.НачатьРедактирование(Рейс, Неопределено);
	Для Каждого Доставка Из Доставки Цикл
		обМаршрут.ДобавитьДоставку(Рейс, Доставка);
	КонецЦикла;
	
	обМаршрут.ПересчитатьРейс_(стРейс, Истина, Ложь);
	
	Если стРейс.Рейс.ПроверитьСоответствиеДоставокТранспорту() Тогда
		
		обМаршрут.ПересчитатьРейсКСЛ(Рейс, Истина);
		
		обМаршрут.ОбновитьЖурналы();
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		обМаршрут.ОбновитьЖурналы();
		ОтменитьТранзакцию();
		
	КонецЕсли;

КонецПроцедуры

Процедура РедактироватьМаршрут(Кнопка = Неопределено)
	
	Если Не Журнал.ЕстьКарта Тогда
		Возврат;
	КонецЕсли;
	
	Журнал.ФормаЖурнала.УстановитьВидимостьКарты(Истина);
	
	Если Журнал.ФормаЖурнала.ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Журнал.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КнопкаПанелиРедактированияМаршрута = Неопределено Тогда
		КнопкаПанелиРедактированияМаршрута = Кнопка;
	КонецЕсли;
	
	Если КнопкаПанелиРедактированияМаршрута = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если не КнопкаПанелиРедактированияМаршрута.Пометка Тогда
		
		Если ЗначениеЗаполнено(Журнал.Дерево.ТекущиеДанные.Рейс) Тогда
			
			Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
			Для Каждого Строка Из Строки Цикл
				Если Строка = Журнал.Дерево.ТекущиеДанные Тогда Продолжить; КонецЕсли;
				
				Если Строка.ОтображатьРейсНаКарте Тогда
					УдалитьРейсСКарты(Строка, Истина);
					Журнал.ОкончитьРедактированиеСтроки(Строка);
				КонецЕсли;
			КонецЦикла;
			
			НачатьВыдачуСтилейСНачала();
			
			Если ЗначениеЗаполнено(Журнал.Дерево.ТекущиеДанные.Рейс) Тогда
				ПоказатьРейсНаКарте(Журнал.Дерево.ТекущиеДанные);
				Журнал.ОкончитьРедактированиеСтроки(Журнал.Дерево.ТекущиеДанные);
			КонецЕсли;				
			
			НачатьРедактированиеМаршрута(Журнал.Дерево.ТекущиеДанные.Рейс);
			КнопкаПанелиРедактированияМаршрута.Пометка = Истина;
			КнопкаПанелиРедактированияМаршрута.Текст = "Завершить изменение последовательности";
		КонецЕсли;
		
	Иначе
		
		ЗавершитьРедактированиеМаршрута();
		КнопкаПанелиРедактированияМаршрута.Пометка = Ложь;
		КнопкаПанелиРедактированияМаршрута.Текст = "Изменить последовательность";
	КонецЕсли;;
	
КонецПроцедуры

Процедура ЗавершитьРедактированиеМаршрута()
	
	Если РедактируемыйМаршрут = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ЗавершеноРедактированиеМаршрута", РедактируемыйМаршрут, Журнал);
	
	РедактируемыйМаршрут = Неопределено;
	
КонецПроцедуры

Функция ПолучитьВыбранныеЗадачи()
	соЗадачи = Новый Соответствие;
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, РейсВыбран", ЭтотОбъект, Истина), Истина);
	Если Строки.Количество() = 0 Тогда
		Предупреждение("Рейсы не выбраны!");
		Возврат соЗадачи;
	КонецЕсли;
	Для Каждого Строка Из Строки Цикл
		Если ЗначениеЗаполнено(Строка.ЗадачаРейса) Тогда
			соЗадачи.Вставить(Строка.ЗадачаРейса, Строка);
		КонецЕсли;
	КонецЦикла;
	Возврат соЗадачи;
КонецФункции

Процедура СопроводитьПовторно()
	
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Сопроводить повторно текущие рейсы?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		
		новаМониторинг.НачатьСопровождениеРейса(ЭлЗадача.Ключ.БизнесПроцесс);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьВыполнениеРейсов()
	
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Зафиксировать выполнение текущих рейсов?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.РейсВыполнен = Истина;
		обЗадача.Записать();
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
	
КонецПроцедуры

Процедура СогласоватьРейсы()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Согласовать текущие рейсы?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Если Не Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки.ВыполнятьЭтап Тогда
		новаМестнаяДоставка.ПроверкаПереводаРейсовНаСопровождении(соЗадачи);
	КонецЕсли;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.РейсСогласован = Истина;
		обЗадача.Записать();
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

Процедура ПодготовитьРейсы()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Подготовить текущие рейсы?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	новаМестнаяДоставка.ПроверкаПереводаРейсовНаСопровождении(соЗадачи);
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
						
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.РейсПодготовлен = Истина;
		обЗадача.Записать();
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

Процедура ЗавершитьРейсы()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Завершить текущие рейсы?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	ЕстьОтказ = Ложь;
	ТекстПредупреждения = "Невозможно завершить рейсы, т.к. не введен отчет водителя:";
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обРейс = обЗадача.БизнесПроцесс.ПолучитьОбъект();
		Если обРейс.РейсМожноЗавершить() Тогда
			обЗадача.ВыполнитьЗадачу();
		Иначе
			ЕстьОтказ =	Истина;
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + Строка(обЗадача.БизнесПроцесс);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтказ ТОгда
		#Если Клиент Тогда
			Предупреждение(ТекстПредупреждения);
		#КонецЕсли
	КонецЕсли;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

Процедура СоздатьОтчетыВодителей()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Создать отчеты водителей по текущим рейсам?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		Рейс = ЭлЗадача.Ключ.БизнесПроцесс;
		Состояние(Рейс);
		
		ОтчетВодителя = Документы.новаОтчетВодителя.НайтиПоРеквизиту("Рейс", Рейс);
		Если ЗначениеЗаполнено(ОтчетВодителя) Тогда Продолжить; КонецЕсли;
		
		обОтчетВодителя = Документы.новаОтчетВодителя.СоздатьДокумент();
		//обОтчетВодителя.Заполнить(Рейс); до новой формы

		Если Константы.ПриВводеОтчетовВодителейОбновлятьРейсыИзМаршрутизации.Получить() Тогда
			Если lem.ПоРейсуВведеноПредварительноеЗакрытие(Рейс) Тогда
				Продолжить;
			КонецеСли;	
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			            |	Рейс.Идентификатор КАК Идентификатор,
			            |	Рейс.ДатаРейса КАК ДатаРейса,
			            |	Рейс.vr_РаспределительныйЦентр КАК РЦентр,
			            |	ЕСТЬNULL(ПараметрыРегиональныхТерминаловСрезПоследних.МетодикаЛогистическойМаршрутизации, ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute)) КАК МетодикаМаршрутизации
			            |ИЗ
			            |	Документ.Рейс КАК Рейс
			            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
			            |		ПО Рейс.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
			            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних КАК ПараметрыРегиональныхТерминаловСрезПоследних
			            |		ПО Рейс.ТерминалДоставки = ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал
			            |ГДЕ
			            |	Рейс.РейсМестнойДоставки = &Рейс
			            |	И Рейс.Проведен = ИСТИНА
			            |	И ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, ЛОЖЬ) = ЛОЖЬ";
			Зап.УстановитьПараметр("Рейс", Рейс.Ссылка);
			Рез = зап.Выполнить().Выбрать();
			Если Рез.Следующий() Тогда
				
				// МАС - 26.06.2018 - №2286 --->> 
				//lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);
				Если Рез.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute Тогда
					lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);
				КонецЕсли;
				// <<--- МАС
				
				
				
			КонецеСли;	
		КонецеСли;	
		обОтчетВодителя.Заполнить(Рейс);
		//обОтчетВодителя.ПодтянутьДанныеМобильногоПриложения();
		Форма = обОтчетВодителя.ПолучитьФорму();
		Форма.СохранитьИЗакрытьПослеОткрытия = Истина;
		Форма.Открыть();
		
		//+++ БАО 11.08.2017 №1638 
		обОтчетВодителя.УдаленноеЗакрытие = baoВызовСервера.ПолучитьУдаленноеЗакрытиеДляТранспортаПоРейсу(Рейс.Ссылка);
		обОтчетВодителя.ДокументВнесенВРучную = Истина;
		//--- БАО 11.08.2017 №1638 
		
		обОтчетВодителя.ПодтянутьДанныеМобильногоПриложения();
		обОтчетВодителя.ОбновитьИтоговыеПоказателиНаСервере(обОтчетВодителя);
		
		обОтчетВодителя.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	мсОбъекты.Добавить("Документ.новаОтчетВодителя");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

Процедура СодержимоеРейсов()
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, РейсВыбран", ЭтотОбъект, Истина), Истина);
	
	ФормаОтчета = Отчеты.СодержимоеАвтомобилей.ПолучитьФорму(,Журнал.ФормаЖурнала,"ЕдинственноеСодержимоеАвтомобилей");
	ФормаОтчета.Открыть();
	ФормаОтчета.СвязанныйЖурнал = Журнал;
	ФормаОтчета.флОткрытИзПланирования = Истина;
	ФормаОтчета.ПеренестиПараметрыСвязанногоЖурнала();
	//
	//Если Строки.Количество() = 0 Тогда
	//	ФормаОтчета.ОтборРейсов.Очистить();
	//Иначе
	//	Список = Новый СписокЗначений;
	//	Для Каждого Строка Из Строки Цикл
	//		Если ЗначениеЗаполнено(Строка.ЗадачаРейса) Тогда
	//			Список.Добавить(Строка.Рейс);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//ФормаОтчета.ДатаДоставки = Журнал.ФормаЖурнала.ДатаПланирования;
	//ФормаОтчета.ОтборРейсов = Список;
	ФормаОтчета.ЭлементыФормы.ДатаДоставки.Доступность = Ложь;
	ФормаОтчета.ЭлементыФормы.ОтборРейсов.Доступность = Ложь;
	ФормаОтчета.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.Результат, ФормаОтчета.ДанныеРасшифровки);
КонецПроцедуры

Процедура ЗавершитьПланированиеРейсов()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Завершить планирование текущих рейсов?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
			
	Если Не Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки.ВыполнятьЭтап 
		И Не Справочники.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки.ВыполнятьЭтап Тогда	
		новаМестнаяДоставка.ПроверкаПереводаРейсовНаСопровождении(соЗадачи);
	КонецЕсли;
    	
	//ВыборкаОкончаниеРаботыВодителей = новаМестнаяДоставка.ПолучитьКонецПериодаРаботыВодителей(соЗадачи, Журнал.ФормаЖурнала.ДатаПланирования);	
	
	//Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, РейсВыбран", ЭтотОбъект, Истина), Истина);
	//Для Каждого Строка Из Строки Цикл
	//	
	//	СтруктураПоиска = Новый Структура;
	//	СтруктураПоиска.Вставить("Водитель", Строка.Водитель);
	//	
	//	Если ВыборкаОкончаниеРаботыВодителей.НайтиСледующий(СтруктураПоиска) Тогда
	//		ВремяОкончанияРаботыВодителя = ВыборкаОкончаниеРаботыВодителей.КонецПериода;
	//		Если ВремяОкончанияРаботыВодителя < Строка.Рейс.ДатаКонца  Тогда
	//			//Если  Вопрос("Плановое время окончания рейса " + Строка.Рейс + " больше времени окончания рабочего дня водителя. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да  Тогда
	//			//	соЗадачи.Удалить(Строка.ЗадачаРейса);
	//			//КонецЕсли;
	//		КонецЕсли;	 
	//	Иначе
	//	КонецЕсли;
	//	ВыборкаОкончаниеРаботыВодителей.Сбросить();
	//		
	//	Если Строка.ОтображатьРейсНаКарте Тогда
	//		УдалитьРейсСКарты(Строка, Истина);
	//		Журнал.ОкончитьРедактированиеСтроки(Строка);
	//	КонецЕсли;
	//КонецЦикла;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.РейсЗапланирован = Истина;       
		БП = обЗадача.БизнесПроцесс.ПолучитьОбъект();
		БП.РейснадоПерепланировать = Ложь;
		БП.Записать();
		обЗадача.Записать();
		обЗадача.ВыполнитьЗадачу();
 	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

//Групповое автоматическое упорядочивание маршрутов рейсов
//
Процедура АвтоупорядочитьМаршруты()
	
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0
		Тогда Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Выполнить оптимизацию маршрута выбранных рейсов?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоСоседей = 6;
	//ВвестиЧисло(ЧислоСоседей, "Число соседей", 2, 0);
	
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, РейсВыбран", ЭтотОбъект, Истина), Истина);
	Для Каждого Строка Из Строки Цикл
		Если Строка.ОтображатьРейсНаКарте Тогда
			УдалитьРейсСКарты(Строка, Истина);
			Журнал.ОкончитьРедактированиеСтроки(Строка);
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент Тогда
		ФормаИндикатора = ПолучитьОбщуюФорму("новаФормаИндикатора", , "ПрогрессФормированияРейсов");
		ФормаИндикатора.Заголовок = "Оптимизация рейсов";
		ФормаИндикатора.МинимальноеЗначение = 0;
		ФормаИндикатора.МаксимальноеЗначение = соЗадачи.Количество();
		ФормаИндикатора.КартинкаЗаголовка = БиблиотекаКартинок.новаАвтоматическоеПланирование;
		ФормаИндикатора.ПодключитьОбработчикОжидания("АвтоЗакрытие", 1);
		ФормаИндикатора.Открыть();
	#КонецЕсли
	
	ШагПрогресса = 0;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл

		обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
		обМаршрут.НачатьРедактирование(ЭлЗадача.Ключ.БизнесПроцесс, Неопределено);
		
		#Если Клиент Тогда
			ФормаИндикатора.ОбновитьСостояние("Рейс местной доставки № " + ЭлЗадача.Ключ.БизнесПроцесс.Номер + " от " + Формат(ЭлЗадача.Ключ.БизнесПроцесс.Дата, "ДФ=дд.ММ.гггг") + " (" + (ШагПрогресса + 1) + " из " + соЗадачи.Количество() + ")");
		#КонецЕсли
		
		обМаршрут.АвтоупорядочитьМаршрут(ЭлЗадача.Ключ.БизнесПроцесс, ЧислоСоседей);

		#Если Клиент Тогда
			ШагПрогресса = ШагПрогресса + 1;
			ФормаИндикатора.ОбновитьЗначение(ШагПрогресса);
			
			ФормаИндикатора.ДатаПрерывания = ТекущаяДата();
			ОбработкаПрерыванияПользователя();
			ФормаИндикатора.ДатаПрерывания = Неопределено;
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
		ФормаИндикатора.Закрыть();
	#КонецЕсли
	
КонецПроцедуры

Процедура СоздатьСборки()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Создать сборки по выбранным рейсам?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		НесобранныеДоставки = новаМестнаяДоставка.ПолучитьНесобранныеДоставкиПоРейсу(обЗадача.БизнесПроцесс);
		Если НесобранныеДоставки.Количество() > 0 Тогда
			Сборка = Документы.новаСборкаНаСкладе.СоздатьДокумент();
			Сборка.Дата = ТекущаяДата();
			Сборка.Рейс = обЗадача.БизнесПроцесс;
			Сборка.Состав.Загрузить(НесобранныеДоставки);
			Сборка.Записать();
			Сообщить("Создана сборка: "+Сборка);
		КонецЕсли;	
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
	
	ФормаПечати = ПолучитьОбщуюФорму("новаФормаПечати",, "");
	ТД = ФормаПечати.ПолучитьТабличныйДокумент();

	ПечатнаяФорма = Отчеты.новаЛистСборкиПоМашине.Создать();
	ПечатнаяФорма.Владелец = Сборка;
	ТД.Очистить();
	Заголовок = "";
	Если Не ПечатнаяФорма.ВывестиНаПечать(Неопределено, ТД, Заголовок) Тогда Возврат; КонецЕсли;
	
	ПечатнаяФорма = Отчеты.новаЛистСборкиПоТочкам.Создать();
	ПечатнаяФорма.Владелец = Сборка;
	ТД.Очистить();
	Заголовок = "";
	Если Не ПечатнаяФорма.ВывестиНаПечать(Неопределено, ТД, Заголовок) Тогда Возврат; КонецЕсли;
	
КонецПроцедуры

Процедура РасформироватьРейсы()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Расформировать текущие рейсы?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		
		НачатьТранзакцию();
		
		УдалитьРейсСКарты(ЭлЗадача.Значение, Истина);
		
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.РейсОтменен = Истина;
		обЗадача.ВыполнитьЗадачу();
		
		РейсКСЛ = КСЛ.Доставка_Рейс();
		РейсКСЛ.Ид = Строка(обЗадача.БизнесПроцесс.УникальныйИдентификатор());
		РейсКСЛ.Удалить();
		
		РейсКСЛ = КСЛ.Сопровождение_СопровождениеРейса();
		РейсКСЛ.Ид = Строка(обЗадача.БизнесПроцесс.УникальныйИдентификатор());
		РейсКСЛ.Удалить();
	 	
		ЗафиксироватьТранзакцию();
	КонецЦикла;

	#Если Клиент Тогда
		
		мсТаблицы = Новый Массив;
		мсТаблицы.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
		мсТаблицы.Добавить("Задача.новаЗадачаМестнойДоставки");
		новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
		
		Оповестить("ОбновленКалендарьВозможныхРейсов");
	#КонецЕсли
КонецПроцедуры

Процедура СоздатьРейсыПоВозможнымРейсам(ВозможныеРейсы)
	Для Каждого ВозможныйРейс Из ВозможныеРейсы Цикл
		обРейс = БизнесПроцессы.новаРейсМестнойДоставки.СоздатьБизнесПроцесс();
		обРейс.Дата = ТекущаяДата();
		обРейс.Транспорт = ВозможныйРейс.Транспорт;
		обРейс.Водитель = ВозможныйРейс.Водитель;
		обРейс.Экспедитор = ВозможныйРейс.Экспедитор;//Бухаров 30.08
		обРейс.ДатаНачала = ВозможныйРейс.НачалоПериода;
		обРейс.ДатаКонца = ВозможныйРейс.КонецПериода;
		обРейс.НачалоРейса = ВозможныйРейс.НачалоРейса;
		обРейс.НачалоРейсаУказаноВручную = ЗначениеЗаполнено(обРейс.НачалоРейса);
		обРейс.КонецРейса = ВозможныйРейс.ТочкаВыезда;
		обРейс.ЧасовойПояс = ПараметрыСеанса.новаТекущийПользователь.ЧасовойПояс;
		обРейс.Записать();
		обРейс.Старт();
	КонецЦикла;
	
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
КонецПроцедуры

Процедура СформироватьОтбор()
	КонструкторДанных.ДобавитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
	КонструкторДанных.ДобавитьПараметр("ЖурналКонецПериода", ЖурналКонецПериода);
	
	Если ЗначениеЗаполнено(ЖурналНачалоПериода) И ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И (БизнесПроцесс.ДатаНачала МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода)";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналНачалоПериода) И Не ЗначениеЗаполнено(ЖурналКонецПериода) Тогда
		Отбор = " И БизнесПроцесс.ДатаНачала >= &ЖурналНачалоПериода";
		
	ИначеЕсли ЗначениеЗаполнено(ЖурналКонецПериода) И Не ЗначениеЗаполнено(ЖурналНачалоПериода) Тогда
		Отбор = " И БизнесПроцесс.ДатаНачала <= &ЖурналКонецПериода";
		
	Иначе
		Отбор = "";
	КонецЕсли;
	
	КонструкторДанных.УстановитьПатч("{ОТБОР_ПО_ПЕРИОДУ}", Отбор);	
	
КонецПроцедуры

Процедура Настроить()
	мсИнструменты = Новый Массив;
	ПараметрыЖурнала = Новый Структура("ИсточникПеретаскивания, ПриемникПеретаскивания, Инструменты", Истина, Истина, мсИнструменты);

	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ВидОтображенияРейса", Новый Картинка, "Вид", "Вид отображения рейса"));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ВыделитьВсеРейсы", БиблиотекаКартинок.УстановитьФлажки, "", "Выделить все рейсы"));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СнятьВыделениеРейсов", БиблиотекаКартинок.СнятьФлажки, "", "Снять выделение рейсов"));
	
	ВводОтчетовВодителяВПланировании = Константы.новаВводОтчетовВодителяВПланировании.Получить();
	ИспользоватьСборкиПоРейсам = Константы.новаИспользоватьСборкиПоРейсам.Получить(); 
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
		//Если Не ИспользоватьСборкиПоРейсам Тогда
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ЗавершитьПланирование", БиблиотекаКартинок.ВыполнитьЗадачу, "Завершить планирование", "Завершить планирование рейсов"));
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ОптимизироватьМаршрут", Новый Картинка, "Оптимизировать", "Оптимизировать маршруты рейсов"));
			
			//Евген 10.04.2013 {
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СодержимоеРейсов", Новый Картинка, "Товар рейсов", "Показать товар, который везется в рейсах"));
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПоискЗаказа", БиблиотекаКартинок.новаПоиск, "Поиск заказа", "Ну. Поиск заказа."));
			// } Евген
		//КонецЕсли;
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "РасформироватьРейсы", БиблиотекаКартинок.новаДействиеОтмена, "Расформировать рейсы", "Расформировать рейсы", Истина));
		
		Если ИспользоватьСборкиПоРейсам Тогда
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СоздатьСборки", БиблиотекаКартинок.ВыполнитьЗадачу, "Создать сборки", "Создать сборки"));
		КонецЕсли;
		
		Если ВводОтчетовВодителяВПланировании Тогда
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ВвестиОтчетВодителя", БиблиотекаКартинок.новаДействиеЗаполнение, "Отчет водителя", "Отчет водителя", Истина));
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СоздатьОтчетыВодителей", БиблиотекаКартинок.новаДействиеЗаполнение, "", "Создать отчеты водителей"));
		КонецЕсли;
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СогласоватьРейсы", БиблиотекаКартинок.ВыполнитьЗадачу, "Согласовать рейсы", "Согласовать рейсы"));
		Если Справочники.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки.ВыполнятьЭтап Тогда
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ВыгрузитьРейсыВXML", БиблиотекаКартинок.новаВыполнение, "Выгрузить рейсы в XML", "Выгрузить рейсы в XML"));
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПодготовитьИВыгрузитьРейсыВXML", БиблиотекаКартинок.новаВыполнение, "Подготовить и выгрузить рейсы в XML", "Подготовить и выгрузить рейсы в XML"));
		КонецЕсли; 
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ВернутьРейсыНаПланирование", БиблиотекаКартинок.новаДействиеОтмена, "Вернуть на планирование", "Вернуть рейсы на планирование", Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "РасформироватьРейсы", БиблиотекаКартинок.новаДействиеОтмена, "Расформировать рейсы", "Расформировать рейсы", Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПоказатьКарту", БиблиотекаКартинок.новаКарта, "Карта", "Показать карту"));
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПодготовитьРейсы", БиблиотекаКартинок.ВыполнитьЗадачу, "Подготовить рейсы", "Подготовить рейсы"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ВыгрузитьРейсыВXML", БиблиотекаКартинок.новаВыполнение, "Выгрузить рейсы в XML", "Выгрузить рейсы в XML"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПодготовитьИВыгрузитьРейсыВXML", БиблиотекаКартинок.новаВыполнение, "Подготовить и выгрузить рейсы в XML", "Подготовить и выгрузить рейсы в XML"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "ВернутьРейсыНаПланирование", БиблиотекаКартинок.новаДействиеОтмена, "Вернуть на планирование", "Вернуть рейсы на планирование", Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, КонтекстноеМеню", "РасформироватьРейсы", БиблиотекаКартинок.новаДействиеОтмена, "Расформировать рейсы", "Расформировать рейсы", Истина));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПоказатьКарту", БиблиотекаКартинок.новаКарта, "Карта", "Показать карту"));
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ЗафиксироватьВыполнение", БиблиотекаКартинок.ВыполнитьЗадачу, "Зафиксировать выполнение рейсов", "Зафиксировать выполнение рейсов"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СопроводитьПовторно", Новый Картинка, "Сопроводить повторно", "сопроводить повторно"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПоказатьКарту", БиблиотекаКартинок.новаКарта, "Карта", "Показать карту"));
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "Завершить", БиблиотекаКартинок.ВыполнитьЗадачу, "Завершить рейсы", "Завершить рейсы"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СоздатьОтчетыВодителей", БиблиотекаКартинок.новаДействиеЗаполнение, "", "Создать отчеты водителей"));
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПоказатьКарту", БиблиотекаКартинок.новаКарта, "Карта", "Показать карту"));
		
			//Евген 01.12.2016 {
			мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПредварительноеЗакрытиеРейсов", БиблиотекаКартинок.ЗначокКнигаПокупок16, "Предварительное закрытие рейсов", "Предварительное закрытие рейсов"));
			// } Евген
		
	КонецЕсли;
	
//	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, Триггер", "ОтображатьТекущийРейсНаКарте", БиблиотекаКартинок.новаКарта, "", "Отображать рейс на карте", Ложь));
//	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, Триггер", "ОтображатьТрекРейсовНаКарте", БиблиотекаКартинок.новаТрекНаКарте, "", "Отображать фактический трек на карте", Ложь));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ПечатьРейса", БиблиотекаКартинок.Печать, "", "Печать рейса", Ложь));
	
	Если РедактированиеРейсов Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "РедактированиеРейса", новый Картинка, "Изменить рейс", "Изменить рейс"));
	КонецЕсли;
	
	Если РедактированиеМаршрутов Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "РедактированиеМаршрута", новый Картинка, "Изменить последовательность", "Изменить последовательность"));
	КонецЕсли; 
	
	Если Подбор Тогда
		мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка, Триггер", "НачатьПодбор",, "Подбор", "Подобрать доставки по карте", Истина));
	КонецЕсли;
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	КонструкторДанных.ПостОбработчикДанных = ЭтотОбъект;
	
	КонструкторДанных.ДобавитьПараметр("Роль", Роль);
	
	СформироватьОтбор();
	
	Если Архив Тогда
		КонструкторДанных.ТекстЗапроса = "
		|БизнесПроцесс.новаРейсМестнойДоставки КАК Рейсы
		|{СОЕДИНЕНИЯ}
		|";
		
		ПутьРейса = "Рейсы.Ссылка";
		ПутьЗадачиРейса = "NULL";
		
		//КонструкторДанных.ПостоянныйОтбор = "Рейсы.Завершен {ОТБОР_ПО_ПЕРИОДУ} {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ}";
		КонструкторДанных.ПостоянныйОтбор = "Рейсы.Завершен {ОТБОР_ПО_ПЕРИОДУ} {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ} {ОТБОР_ТЕРМИНАЛ}";
	Иначе
		ПутьРейса = "Задачи.БизнесПроцесс";
		ПутьЗадачиРейса = "Задачи.Ссылка";
		
		КонструкторДанных.ТекстЗапроса = "
		|Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(&Роль, Не ПометкаУдаления И НЕ Выполнена {ОТБОР_ПО_ПЕРИОДУ}) КАК Задачи
		|{СОЕДИНЕНИЯ}
		|";
		
		КонструкторДанных.ПостоянныйОтбор = "Истина {ОТБОР_ТОЧЕК_ДОСТАВКИ} {ОТБОР_РАЙОНОВ} {ОТБОР_ТЕРМИНАЛ}";
	КонецЕсли;
	
	мсТекущиеТочкиДоставки = новаМестнаяДоставка.ПолучитьТекущиеТочкиДоставки(новаКонтекст);
	Если мсТекущиеТочкиДоставки.Количество() > 0 Тогда
		КонструкторДанных.УстановитьПатч("{ОТБОР_ТОЧЕК_ДОСТАВКИ}", "И " + ПутьРейса + ".НачалоРейса В (&ТекущиеТочкиДоставки)");
		КонструкторДанных.ДобавитьПараметр("ТекущиеТочкиДоставки", мсТекущиеТочкиДоставки);
	КонецЕсли;
	
	мсТекущиеРайоны = новаМестнаяДоставка.ПолучитьТекущиеРайоны(новаКонтекст);
	Если мсТекущиеРайоны.Количество() > 0 Тогда
		КонструкторДанных.УстановитьПатч("{СОЕДИНЕНИЯ}", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаРайоныАдресов КАК РайоныОтбора
		|ПО
		|	РайоныОтбора.Классификатор = &КлассификаторРайонов И РайоныОтбора.Адрес = " + ПутьРейса +".НачалоРейса.Адрес");
		КонструкторДанных.УстановитьПатч("{ОТБОР_РАЙОНОВ}", " И РайоныОтбора.Район В (&ТекущиеРайоны)");
		КонструкторДанных.ДобавитьПараметр("ТекущиеРайоны", мсТекущиеРайоны);
		КонструкторДанных.ДобавитьПараметр("КлассификаторРайонов", новаКарты.ПолучитьТекущийКлассификаторРайонов());
	КонецЕсли;
	
	//// Михушкин --->> 
	//Терминал = ПараметрыСеанса.ТерминалДоставки;
	//Если ЗначениеЗаполнено(Терминал) И Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда		
	//	ОтборТерминал = " И РейсМД.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж)";			
	//ИначеЕсли ЗначениеЗаполнено(Терминал) И Терминал = Справочники.РегиональныеТерминалы.СПбСтриж Тогда	
	//	ОтборТерминал = " И РейсМД.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.СПбСтриж)";
	//Иначе
	//	ОтборТерминал = "";	
	//КонецЕсли;
	//КонструкторДанных.УстановитьПатч("{ОТБОР_ТЕРМИНАЛ}", ОтборТерминал);
	//// <<--- Михушкин 
	
	КонструкторДанных.ПостояннаяВыборка = ",
	|	" + ПутьЗадачиРейса + " КАК ЗадачаРейса,
	|	" + ПутьРейса + " КАК Рейс,
	|	" + ПутьРейса + ".Транспорт КАК Транспорт,
	|	Представление(" + ПутьРейса + ".Транспорт) КАК Транспорт_Пред,
	|	" + ПутьРейса + ".Водитель КАК Водитель,
	|	Представление(" + ПутьРейса + ".Водитель) КАК Водитель_Пред,
	|	" + ПутьРейса + ".Экспедитор КАК Экспедитор,
	|	Представление(" + ПутьРейса + ".Экспедитор) КАК Экспедитор_Пред,
	|	Ложь КАК ОтображатьРейсНаКарте,
	|	Ложь КАК РейсВыбран,
	|	" + ПутьРейса + ".ДатаНачала КАК ВремяВыезда,
	|	" + ПутьРейса + ".ДатаКонца КАК ДатаКонца,
	|	" + ПутьРейса + ".ДатаНачалаФакт КАК ДатаВыездаФакт,
	|	" + ПутьРейса + ".ДатаКонцаФакт КАК ДатаВозвращенияФакт,
	|	" + ПутьРейса + ".Вес КАК Вес,
	|	" + ПутьРейса + ".Объем КАК Объем,
	|	" + ПутьРейса + ".Стоимость КАК СтоимостьРейса,
	|	" + ПутьРейса + ".КоличествоЕдиницПеревозки КАК КоличествоЕдиницПеревозкиРейса,
	|	" + ПутьРейса + ".ПеревезеноПалетт КАК ПалеттВРейсе,
	|	" + ПутьРейса + ".ПроцентЗагрузкиПоВесу КАК ПроцентЗагрузкиПоВесу,
	|	" + ПутьРейса + ".ПроцентЗагрузкиПоОбъему КАК ПроцентЗагрузкиПоОбъему,
	|	" + ПутьРейса + ".ПроцентЗагрузкиПоЕдиницамПеревозки КАК ПроцентЗагрузкиПоЕдиницамПеревозки,
	|	" + ПутьРейса + ".ПревышенВес КАК ПревышенВес,
	|	" + ПутьРейса + ".ПревышенОбъем КАК ПревышенОбъем,
	|	" + ПутьРейса + ".ПревышеноКоличествоЕдиницПеревозки КАК ПревышеноКоличествоЕдиницПеревозки,
	|	" + ПутьРейса + ".Транспорт.Грузоподъемность КАК Грузоподъемность,
	|	" + ПутьРейса + ".Транспорт.ОбъемКузова КАК ОбъемКузова,
	|	" + ПутьРейса + ".Транспорт.Вместимость КАК Вместимость,
	|	" + ПутьРейса + ".КоличествоТочекВРейсе КАК КоличествоТочекВРейсе,
	|	" + ПутьРейса + ".КоличествоДоставокВРейсе КАК КоличествоДоставокВРейсе
	|";
	
	//** ОтчетВодителя **//
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки
	 Или (Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки И ВводОтчетовВодителяВПланировании) Тогда
		КонструкторДанных.ДобавитьПоле("ОтчетВодителя");
		
		КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + ",
		|	ОтчетыВодителей.Ссылка КАК ОтчетВодителя,
		|	Представление(ОтчетыВодителей.Ссылка) КАК ОтчетВодителя_Пред";
		
		КонструкторДанных.УстановитьПатч("{СОЕДИНЕНИЯ}", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.новаОтчетВодителя КАК ОтчетыВодителей
		|ПО 	
		|	ОтчетыВодителей.Рейс = " + ПутьРейса + "
		| И НЕ ОтчетыВодителей.ПометкаУдаления
		|");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		
		КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + ",
		|	РейсМД.ТерминалДоставки КАК ТерминалДоставки";
		
		КонструкторДанных.УстановитьПатч("{СОЕДИНЕНИЯ}", "
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.Рейс КАК РейсМД
		|ПО 	
		|	РейсМД.РейсМестнойДоставки = " + ПутьРейса + "
		//| И НЕ РейсМД.ПометкаУдаления И РейсМД.ТерминалДоставки.Код = 1
		| И НЕ РейсМД.ПометкаУдаления И РейсМД.ТерминалДоставки  В(&Терминал)
		|");
		КонструкторДанных.ДобавитьПоле("ПредварительноЗакрыт");
		КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + ",
		|	естьNull(ОтчетыВодителей.БылоПредварительноеЗакрытие, Ложь) КАК ПредварительноЗакрыт";
		
		// Михушкин --->> 		 
		СписокТерминал = Новый СписокЗначений;
		Если ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда		
			СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);	
		ИначеЕсли ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
			СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		Иначе	
			СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
			СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
			СписокТерминал.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		КонецЕсли;
		КонструкторДанных.ДобавитьПараметр("Терминал", СписокТерминал);
		// <<--- Михушкин
	КонецЕсли;
	
	//** КоличествоДоставокДляСборки **//
	
	Если ИспользоватьСборкиПоРейсам Тогда
		
		КонструкторДанных.ДобавитьПоле("КоличествоДоставокДляСборки");
		
		КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + ",
		|	СборкиНаСкладе.Количество КАК КоличествоДоставокДляСборки ";
		
		КонструкторДанных.УстановитьПатч("{СОЕДИНЕНИЯ}", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаСостояниеСборокПоРейсам КАК СборкиНаСкладе 
		|ПО 	
		|	СборкиНаСкладе.Рейс = " + ПутьРейса + " 
		|");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	КонецЕсли;

	//** СопровождениеРейсаЗавершено **//
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки Тогда
		КонструкторДанных.ДобавитьПоле("СопровождениеРейсаЗавершено");
		КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + ",
		|    ВЫБОР
		|      КОГДА ТочкиМаршрутаНаСопровождении.Рейс ЕСТЬ NULL
		|        ТОГДА ИСТИНА
		|      КОГДА ТочкиМаршрутаНаСопровождении.КоличествоТочек = ТочкиМаршрутаНаСопровождении.КоличествоПосещенныхТочек
		|            И " + ПутьРейса + ".ДатаКонцаФакт <> ДАТАВРЕМЯ(1, 1, 1)
		|        ТОГДА ИСТИНА
		|      ИНАЧЕ ЛОЖЬ
		|    КОНЕЦ КАК СопровождениеРейсаЗавершено";
		
		КонструкторДанных.УстановитьПатч("{СОЕДИНЕНИЯ}", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
	 	|    (
		|      ВЫБРАТЬ
		|          ТочкиМаршрутаНаСопровождении.Рейс
		|          ,КОЛИЧЕСТВО(ТочкиМаршрутаНаСопровождении.КодТочки) КАК КоличествоТочек
		|          ,СУММА(
		|                  ВЫБОР
		|                    КОГДА ТочкиМаршрутаНаСопровождении.ДатаПрибытия <> ДАТАВРЕМЯ(1, 1, 1)
		|                      ТОГДА 1
		|                    ИНАЧЕ 0
		|                  КОНЕЦ
		|                ) КАК КоличествоПосещенныхТочек
		|        ИЗ
		|          РегистрСведений.новаТочкиМаршрутаРейсов КАК ТочкиМаршрутаНаСопровождении
		|        ГДЕ
		|          ТочкиМаршрутаНаСопровождении.Рейс В 
		|            (
		|              ВЫБРАТЬ
		|                  Задачи.БизнесПроцесс
		|                ИЗ
		|                  Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(&Роль, НЕ Выполнена {ОТБОР_ПО_ПЕРИОДУ}) КАК Задачи
		|            )
		|          И ТочкиМаршрутаНаСопровождении.МаршрутСопровождения
		|        СГРУППИРОВАТЬ ПО
		|          ТочкиМаршрутаНаСопровождении.Рейс
		|    ) КАК ТочкиМаршрутаНаСопровождении
		|ПО 	
		|	"+ ПутьРейса +".Ссылка = ТочкиМаршрутаНаСопровождении.Рейс
		|");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонецЕсли;

	//** СостояниеОбмена **//
	
	Если Роль <> Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
		КонструкторДанных.ДобавитьПоле("СостояниеОбмена");
		КонструкторДанных.ПостояннаяВыборка = КонструкторДанных.ПостояннаяВыборка + ",
		|	новаСостоянияОбъектовДляОбмена.Состояние КАК СостояниеОбмена";
		
		КонструкторДанных.УстановитьПатч("{СОЕДИНЕНИЯ}", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
	 	|	РегистрСведений.новаСостоянияОбъектовДляОбмена КАК новаСостоянияОбъектовДляОбмена
		|ПО 	
		|	"+ ПутьРейса +".Ссылка = новаСостоянияОбъектовДляОбмена.Объект.Ссылка
		|");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонецЕсли;
		
	КонструкторДанных.ДобавитьПоле("Рейс");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса);
    КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".Дата");
	
	КонструкторДанных.ДобавитьПоле("Транспорт");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".Транспорт");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".Транспорт.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Водитель");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".Водитель");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".Водитель.Наименование");
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки Тогда
		КонструкторДанных.ДобавитьПоле("ОтображатьРейсНаКарте", "Карта");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонецЕсли;
	
	КонструкторДанных.ДобавитьПоле("РейсВыбран", "");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	КонструкторДанных.ДобавитьПоле("ВремяВыезда",, "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".ДатаНачала");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".ДатаНачала");

	КонструкторДанных.ДобавитьПоле("ДатаКонца",, "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".ДатаКонца");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".ДатаКонца");
   		
	//КонструкторДанных.ДобавитьПоле("ДлительностьРейса", "Длительность рейса (план)" , "ДФ=ЧЧ:мм");
	//КонструкторДанных.ДобавитьВыборкуПоля(, "ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, -РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонца , " + ПутьРейса + ".ДатаНачала, МИНУТА))");
	//КонструкторДанных.ДобавитьОтборПоля(, "ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, -РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонца , " + ПутьРейса + ".ДатаНачала, МИНУТА))");
	КонструкторДанных.ДобавитьПоле("ДлительностьРейса", "Длительность рейса (план)" , "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонца , " + ПутьРейса + ".ДатаНачала, МИНУТА))");
	КонструкторДанных.ДобавитьОтборПоля(, "ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонца , " + ПутьРейса + ".ДатаНачала, МИНУТА))");
     	
		
	КонструкторДанных.ДобавитьПоле("ДатаВыездаФакт",, "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".ДатаНачалаФакт");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".ДатаНачалаФакт");

	КонструкторДанных.ДобавитьПоле("ДатаВозвращенияФакт",, "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".ДатаКонцаФакт");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".ДатаКонцаФакт");
    	
	//КонструкторДанных.ДобавитьПоле("ДлительностьРейсаФакт", "Длительность рейса (факт)" , "ДФ=ЧЧ:мм");
	//КонструкторДанных.ДобавитьВыборкуПоля(, "ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, -РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонцаФакт , " + ПутьРейса + ".ДатаНачалаФакт, МИНУТА))");
	//КонструкторДанных.ДобавитьОтборПоля(, "ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, -РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонцаФакт , " + ПутьРейса + ".ДатаНачалаФакт, МИНУТА))");
	//КонструкторДанных.ДобавитьСортировкуПоля("ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, -РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонцаФакт , " + ПутьРейса + ".ДатаНачалаФакт, МИНУТА))");
	КонструкторДанных.ДобавитьПоле("ДлительностьРейсаФакт", "Длительность рейса (факт)" , "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонцаФакт , " + ПутьРейса + ".ДатаНачалаФакт, МИНУТА))");
	КонструкторДанных.ДобавитьОтборПоля(, "ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонцаФакт , " + ПутьРейса + ".ДатаНачалаФакт, МИНУТА))");
    КонструкторДанных.ДобавитьСортировкуПоля("ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1,1,1), МИНУТА, РАЗНОСТЬДАТ(" + ПутьРейса + ".ДатаКонцаФакт , " + ПутьРейса + ".ДатаНачалаФакт, МИНУТА))");
	
	
	КонструкторДанных.ДобавитьПоле("РасстояниеПлан", "Расстояние (план)" , );
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".РасстояниеПлан");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".РасстояниеПлан"); 
    КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".РасстояниеПлан");

	КонструкторДанных.ДобавитьПоле("РасстояниеФакт", "Расстояние (факт)" , );
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".РасстояниеФакт");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".РасстояниеФакт"); 
    КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".РасстояниеФакт");
	
    	
	КонструкторДанных.ДобавитьПоле("Вес");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".Вес");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".Вес");
	
	КонструкторДанных.ДобавитьПоле("Объем");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".Объем");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".Объем");
	
	КонструкторДанных.ДобавитьПоле("СтоимостьРейса", "Сумма рейса");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	КонструкторДанных.ДобавитьПоле("КоличествоЕдиницПеревозкиРейса", "Мест рейса");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".КоличествоЕдиницПеревозки");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".КоличествоЕдиницПеревозки");
		
	КонструкторДанных.ДобавитьПоле("ПалеттВРейсе");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	 	
	КонструкторДанных.ДобавитьПоле("КоличествоДоставокДляСборки", "Для сборки");
	КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	КонструкторДанных.ДобавитьПоле("КоличествоТочекВРейсе");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".КоличествоТочекВРейсе");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".КоличествоТочекВРейсе");
	КонструкторДанных.ДобавитьИтог("КоличествоТочекВРейсе");
	
	КонструкторДанных.ДобавитьПоле("КоличествоДоставокВРейсе");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".КоличествоДоставокВРейсе");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".КоличествоДоставокВРейсе");
	КонструкторДанных.ДобавитьИтог("КоличествоДоставокВРейсе");
	
	КонструкторДанных.ДобавитьПоле("ОсновнойРайон");
	Если ГруппироватьРайоны Тогда
		КонструкторДанных.ДобавитьВыборкуПоля(, "ЕСТЬNULL(ГруппыРайонов.Группа, ЕСТЬNULL(" + ПутьРейса + ".ОсновнойРайон, ЗНАЧЕНИЕ(Справочник.новаГеоРайоны.ПустаяСсылка)))");
		КонструкторДанных.ДобавитьОтборПоля(, "ЕСТЬNULL(ГруппыРайонов.Группа, ЕСТЬNULL(" + ПутьРейса + ".ОсновнойРайон, ЗНАЧЕНИЕ(Справочник.новаГеоРайоны.ПустаяСсылка)))");
		КонструкторДанных.ДобавитьСортировкуПоля("ЕСТЬNULL(ГруппыРайонов.Группа.Наименование, " + ПутьРейса + ".ОсновнойРайон.Наименование)");
		КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыРайонов
		|ПО
		|	ГруппыРайонов.Район = " + ПутьРейса + ".ОсновнойРайон
		|");
	Иначе
		КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".ОсновнойРайон");
		КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".ОсновнойРайон");
		КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".ОсновнойРайон.Наименование");
	КонецЕсли;
	
	
	// Михушкин --->> 
	Терминал = ПараметрыСеанса.ТерминалДоставки;
	Если ЗначениеЗаполнено(Терминал) И Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда		
		ОтборТерминал = " И Задачи.БизнесПроцесс.Транспорт.Родитель.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж)";			
	ИначеЕсли ЗначениеЗаполнено(Терминал) И Терминал = Справочники.РегиональныеТерминалы.СПбСтриж Тогда	
		ОтборТерминал = " И Задачи.БизнесПроцесс.Транспорт.Родитель.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.СПбСтриж)";
	Иначе
		ОтборТерминал = "";	
	КонецЕсли;	
	КонструкторДанных.УстановитьПатч("{ОТБОР_ТЕРМИНАЛ}", ОтборТерминал);
	// <<--- Михушкин 
	
	КонструкторДанных.ДобавитьПоле("ПроцентЗагрузкиПоВесу", "% по весу");
	//КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".ПроцентЗагрузкиПоВесу");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".ПроцентЗагрузкиПоВесу");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".ПроцентЗагрузкиПоВесу");
	
	КонструкторДанных.ДобавитьПоле("ПроцентЗагрузкиПоОбъему", "% по объему");
	//КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".ПроцентЗагрузкиПоОбъему");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".ПроцентЗагрузкиПоОбъему");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".ПроцентЗагрузкиПоОбъему");
	
	КонструкторДанных.ДобавитьПоле("ПроцентЗагрузкиПоЕдиницамПеревозки", "% по местам");
	//КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".ПроцентЗагрузкиПоЕдиницамПеревозки");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".ПроцентЗагрузкиПоЕдиницамПеревозки");
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".ПроцентЗагрузкиПоЕдиницамПеревозки");
		
	Если ОтображатьЗагрузкуРейсаВПроцентах Тогда
		КонструкторДанных.ДобавитьПоле("ЗагрузкаПоВесу", "% по весу");
		КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".ПроцентЗагрузкиПоВесу");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		
		КонструкторДанных.ДобавитьПоле("ЗагрузкаПоОбъему", "% по объему");
		КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".ПроцентЗагрузкиПоОбъему");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		
		КонструкторДанных.ДобавитьПоле("ЗагрузкаПоЕдиницамПеревозки", "% по местам");
		КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".ПроцентЗагрузкиПоЕдиницамПеревозки");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	Иначе
		КонструкторДанных.ДобавитьПоле("ЗагрузкаПоВесу", "Вес");
		КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".Вес");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		
		КонструкторДанных.ДобавитьПоле("ЗагрузкаПоОбъему", "Объем");
		КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".Объем");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		
		КонструкторДанных.ДобавитьПоле("ЗагрузкаПоЕдиницамПеревозки", "Мест");
		КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".КоличествоЕдиницПеревозки");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	КонецЕсли;
 	
	КонструкторДанных.ДобавитьПоле("КонецРейсаСовпадаетСНачалом");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".КонецРейсаСовпадаетСНачалом");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".КонецРейсаСовпадаетСНачалом"); 
	КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".КонецРейсаСовпадаетСНачалом");
	
	КонструкторДанных.ДобавитьПоле("КоэффициентСкорости");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".КоэффициентСкорости");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".КоэффициентСкорости"); 
    КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".КоэффициентСкорости");
	
	КонструкторДанных.ДобавитьПоле("НомерРейса");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".Номер");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".Номер"); 
    КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".Номер");
	
	КонструкторДанных.ДобавитьПоле("НачалоРейса");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".НачалоРейса");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".НачалоРейса"); 
    КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".НачалоРейса");
	
	КонструкторДанных.ДобавитьПоле("КонецРейса");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".КонецРейса");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".КонецРейса"); 
    КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".КонецРейса");
		
	КонструкторДанных.ДобавитьПоле("ВидТС", "Вид ТС");
	КонструкторДанных.ДобавитьВыборкуПоля(, ПутьРейса + ".Транспорт.Вид");
	КонструкторДанных.ДобавитьОтборПоля(, ПутьРейса + ".Транспорт.Вид"); 
    КонструкторДанных.ДобавитьСортировкуПоля(ПутьРейса + ".Транспорт.Вид");
    	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Транспорт");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Водитель");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ОсновнойРайон");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Рейс"));

	КонструкторДанных.СформироватьКолонки();
	
КонецПроцедуры

Процедура НачатьРедактированиеМаршрута(Рейс)
	
	РедактируемыйМаршрут = Рейс;
	
	Оповестить("НачалоРедактированияМаршрута", Рейс, Журнал);
	
КонецПроцедуры

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
	дзДанные.Колонки.Добавить("ДляВыбораВсехСтрок", Новый ОписаниеТипов("Булево"));
	дзДанные.Колонки.Добавить("Стиль");
	дзДанные.Колонки.Добавить("КартинкаРейса");
	
	//Если дзДанные.Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	//ъ = 0;
	//Строки = дзДанные.Строки[0].Строки.НайтиСтроки(Новый Структура("ДляВыбораВсехСтрок", Ложь), Истина);
	//соРейсы = Новый Соответствие;
	//Для Каждого Строка Из Строки Цикл
	//	Если Не ЗначениеЗаполнено(Строка.Рейс) Тогда Продолжить; КонецЕсли;
	//	Стиль = тзСтилиРейсов[ъ];
	//	соРейсы.Вставить(Строка.Рейс, Стиль);
	//	
	//	Строка.Стиль = Стиль;
	//	
	//	ъ = ъ + 1;
	//	Если ъ = тзСтилиРейсов.Количество() Тогда ъ = 0; КонецЕсли;
	//КонецЦикла;
	
	//мсРейсыКУдалению = Новый Массив;
	//Для Каждого ЭлИнтерфейс Из соИнтерфейсыОтображенияРейсов Цикл
	//	Стиль = соРейсы[ЭлИнтерфейс.Ключ];
	//	Если Стиль = Неопределено Тогда
	//		мсРейсыКУдалению.Добавить(ЭлИнтерфейс.Ключ);
	//	Иначе
	//		ЭлИнтерфейс.Значение.Стиль = Стиль.Стиль;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого Рейс Из мсРейсыКУдалению Цикл
	//	новаКонтекст.МенеджерКарт.ОтключитьИнтерфейс(соИнтерфейсыОтображенияРейсов[Рейс]);
	//	соИнтерфейсыОтображенияРейсов.Удалить(Рейс);
	//КонецЦикла;
КонецПроцедуры

Процедура ОчиститьМенюПеремещенияВРейсы(Меню)
	ъ = Меню.Кнопки.Количество() - 1;
	Пока ъ >= 0 Цикл
		Кнопка = Меню.Кнопки[ъ];
		Если Лев(Кнопка.Имя, 5) = "РЕЙС_" Тогда
			новаРасширениеФорм.ОчиститьОбработчикиСобытия(Журнал.ФормаЖурнала, Кнопка, "Нажатие");
			Меню.Кнопки.Удалить(Кнопка);
		КонецЕсли;
		
		ъ = ъ - 1;
	КонецЦикла;
КонецПроцедуры

// Заполняет командную панель кнопками перемещения доставки в рейсы, содержащиеся в журнале.
//
// Параметры:
//  Меню         <КоманднаяПанель>
//  Рейс         <БизнесПроцессСсылка.новаРейсМестнойДоставки, Неопределено>: текущий рейс, в меню его быть не должно.
//  ТекущийРайон <СправочникСсылка.новаГеоРайоны>: район текущего рейса. Рейсы, в него входящие, должны располагаться
//                                                 первыми. 
//
Процедура СформироватьМенюПеремещенияВРейсы(Меню, Рейс, ТекущийРайон) Экспорт
	ОчиститьМенюПеремещенияВРейсы(Меню);
	
	тзРейсы = Новый ТаблицаЗначений;
	тзРейсы.Колонки.Добавить("Рейс");
	тзРейсы.Колонки.Добавить("Район");
	тзРейсы.Колонки.Добавить("ПорядокРайонов");
	тзРейсы.Колонки.Добавить("Представление");
	тзРейсы.Колонки.Добавить("ПерегрузкаПоВесу");
	тзРейсы.Колонки.Добавить("ПерегрузкаПоОбъему");
	тзРейсы.Колонки.Добавить("ИмяКнопки");
	
	//Если ТипЗнч(ТекущийРайон) = Тип("СправочникСсылка.новаГеоРайоны") Тогда
	//	соСоседниеРайоны = Новый Соответствие;	
	//	Для Каждого стрРайон Из ТекущийРайон.СоседниеРайоны Цикл
	//		соСоседниеРайоны.Вставить(стрРайон.Район);
	//	КонецЦикла;		
	//Иначе
	//	соСоседниеРайоны = Новый Соответствие;	
	//КонецЕсли;
	
	ИтогоВес = 0;
	ИтогоОбъем = 0;
	ИтогоМест = 0;
	
	Если Журнал.Дерево.Значение.Колонки.Найти("Доставка") <> Неопределено Тогда
		соРейсы = Новый Соответствие;
		РаспределитьРейсДляПеремещения(соРейсы, Журнал.Дерево.ТекущиеДанные);
		Для Каждого ВыделеннаяСтрока Из Журнал.Дерево.ВыделенныеСтроки Цикл
			РаспределитьРейсДляПеремещения(соРейсы, ВыделеннаяСтрока);
		КонецЦикла;
		
		Для Каждого ЭлРейс Из соРейсы Цикл
			Для Каждого ЭлДоставка Из ЭлРейс.Значение Цикл
				ИтогоВес = ИтогоВес - ЭлДоставка.Значение.Вес;
				ИтогоОбъем = ИтогоОбъем - ЭлДоставка.Значение.Объем;
				ИтогоМест = ИтогоМест - ЭлДоставка.Значение.КоличествоЕдиницПеревозки;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник", ЭтотОбъект), Истина);
	Для Каждого Строка Из Строки Цикл
		Если Не ЗначениеЗаполнено(Строка.Рейс) Тогда Продолжить; КонецЕсли;
		Если Строка.Рейс = Рейс Тогда Продолжить; КонецЕсли;
		
		стрРейс = тзРейсы.Добавить();
		стрРейс.Рейс = Строка.Рейс;
		стрРейс.Представление = СокрЛП(Строка.Водитель_Пред) + " - "
			+ СокрЛП(Строка.Транспорт_Пред) + " - "
			+ ?(Строка.Вес > 0, Формат(Строка.Вес, "ЧДЦ=3") + " кг (" + Формат(Строка.ПроцентЗагрузкиПоВесу, "ЧДЦ=0") + "%) - ", "")
			+ ?(Строка.Объем > 0, Формат(Строка.Объем, "ЧДЦ=3") + " м3 (" + Формат(Строка.ПроцентЗагрузкиПоОбъему, "ЧДЦ=0") + "%) - ", "")
			+ Формат(Строка.ДлительностьРейса, "ДФ=ЧЧ:мм") + " - "
			+ СокрЛП(Строка.ОсновнойРайон);
		стрРейс.Район = Строка.ОсновнойРайон;
		
		//стрРейс.ПерегрузкаПоВесу = (Строка.Вес + ИтогоВес) > Строка.Грузоподъемность * 1000;
		//стрРейс.ПерегрузкаПоОбъему = (Строка.Объем + ИтогоОбъем) > Строка.ОбъемКузова;
		
		//Если Строка.ОсновнойРайон = ТекущийРайон Тогда
		//	стрРейс.ПорядокРайонов = 2;
		//	
		//ИначеЕсли соСоседниеРайоны[ТекущийРайон] <> Неопределено Тогда
		//	стрРейс.ПорядокРайонов = 1;
		//	
		//Иначе
		//	стрРейс.ПорядокРайонов = 0;
		//КонецЕсли;
	КонецЦикла;	
	
	тзРейсы.Сортировать("Район ВОЗР, Представление ВОЗР");
	
	Действие = Неопределено;
	НомерКнопки = 0;
	Кнопки = Меню.Кнопки;
	ПредРайон = ТекущийРайон;
	Для Каждого стрРейс Из тзРейсы Цикл
		Если стрРейс.Район <> ПредРайон Тогда
			ИмяКнопки = "РЕЙС_" + СтрЗаменить(Строка(НомерКнопки), Символы.НПП, "");
			НомерКнопки = НомерКнопки + 1;
			
			Кнопка = Меню.Кнопки.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Подменю, СокрЛП(стрРейс.Район));
			
			Кнопки = Кнопка.Кнопки;
			ПредРайон = стрРейс.Район;
		КонецЕсли;
		
		ИмяКнопки = "РЕЙС_" + СтрЗаменить(Строка(НомерКнопки), Символы.НПП, "");
		НомерКнопки = НомерКнопки + 1;
		стрРейс.ИмяКнопки = ИмяКнопки;
		
		Кнопка = Кнопки.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, стрРейс.Представление);
		Если ИсточникНаФорме = Неопределено Тогда
			ИсточникНаФорме = новаРасширениеФорм.ДобавитьОбъектНаФорму(Журнал.ФормаЖурнала, ЭтотОбъект);
		КонецЕсли;
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Журнал.ФормаЖурнала, Кнопка,
			"Нажатие",
			0,
			ИсточникНаФорме + ".НажатиеКнопкиРейса(Параметр1);");
		
		//Если стрРейс.ПерегрузкаПоВесу И стрРейс.ПерегрузкаПоОбъему Тогда
		//	Кнопка.Картинка = БиблиотекаКартинок.новаПерегрузкаОбщая;
		//	
		//ИначеЕсли стрРейс.ПерегрузкаПоВесу Тогда
		//	Кнопка.Картинка = БиблиотекаКартинок.новаПерегрузкаПоВесу;
		//	
		//ИначеЕсли стрРейс.ПерегрузкаПоОбъему Тогда
		//	Кнопка.Картинка = БиблиотекаКартинок.новаПерегрузкаПоОбъему;
		//	
		//КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Обработчик события "Нажатие" кнопки меню перемещения доставки в рейсы.
//
// Параметры:
//  Кнопка <КнопкаКоманднойПанели>
//
Процедура НажатиеКнопкиРейса(Кнопка) Экспорт
	стрРейс = тзРейсы.Найти(Кнопка.Имя, "ИмяКнопки");
	Если стрРейс = Неопределено Тогда Возврат; КонецЕсли;
	
	соРейсы = Новый Соответствие;
	РаспределитьРейсДляПеремещения(соРейсы, Журнал.Дерево.ТекущиеДанные);
	Для Каждого ВыделеннаяСтрока Из Журнал.Дерево.ВыделенныеСтроки Цикл
		РаспределитьРейсДляПеремещения(соРейсы, ВыделеннаяСтрока);
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Для Каждого ЭлРейс Из соРейсы Цикл
		Если ЭлРейс.Ключ = стрРейс.Рейс Тогда Продолжить; КонецЕсли;
		
		обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
		стРейс = обМаршрут.НачатьРедактирование(ЭлРейс.Ключ, Неопределено);
		
		Для Каждого ЭлДоставка Из ЭлРейс.Значение Цикл
			обМаршрут.УдалитьДоставку(ЭлРейс.Ключ, ЭлДоставка.Ключ);
		КонецЦикла;
		
		обМаршрут.ЗакончитьРедактирование();
		стРейс.Рейс.Записать();
	КонецЦикла;
	
	обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = обМаршрут.НачатьРедактирование(стрРейс.Рейс, Неопределено);
	
	Для Каждого ЭлРейс Из соРейсы Цикл
		Если ЭлРейс.Ключ = стрРейс.Рейс Тогда Продолжить; КонецЕсли;
		
		Для Каждого ЭлДоставка Из ЭлРейс.Значение Цикл
			обМаршрут.ДобавитьДоставку(стрРейс.Рейс, ЭлДоставка.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	обМаршрут.ЗакончитьРедактирование();
	стРейс.Рейс.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Журнал.Обновить();
КонецПроцедуры

Процедура РаспределитьРейсДляПеремещения(соРейсы, Строка)
	Если Строка = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Рейс) И ЗначениеЗаполнено(Строка.Доставка) Тогда
		соДоставки = соРейсы[Строка.Рейс];
		Если соДоставки = Неопределено Тогда
			соДоставки = Новый Соответствие;
			соРейсы.Вставить(Строка.Рейс, соДоставки);
		КонецЕсли;
		
		соДоставки.Вставить(Строка.Доставка, Строка);
	КонецЕсли;
	
	Для Каждого ПодчСтрока Из Строка.Строки Цикл
		РаспределитьРейсДляПеремещения(соРейсы, ПодчСтрока);	
	КонецЦикла;
КонецПроцедуры

Процедура ПоказатьКарту()
	Если Не Журнал.ЕстьКарта Тогда Возврат; КонецЕсли;
	
	ПоказыватьКарту = Не Журнал.ФормаЖурнала.ЭлементыФормы.ДобЭлемент2.Кнопки.ПоказатьКарту.Пометка;
	Журнал.ФормаЖурнала.УстановитьВидимостьКарты(ПоказыватьКарту);
	Если Журнал.ФормаЖурнала.ПолеКарты = Неопределено Тогда Возврат; КонецЕсли;
КонецПроцедуры

Процедура ВернутьРейсыНаПланирование()
	
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Вернуть текущие рейсы на планирование?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		
		НачатьТранзакцию();
		
		УдалитьРейсСКарты(ЭлЗадача.Значение, Истина);
	    
		обЗадача = ЭлЗадача.Ключ.ПолучитьОбъект();
		обЗадача.РейсОтменен = Ложь;
		обЗадача.РейсСогласован = Ложь;
		обЗадача.РейсЗапланирован = Ложь;
		обЗадача.РейсВыполнен = Ложь;
		обЗадача.РейсПодготовлен = Ложь;
		обЗадача.РейсЗавершен = Ложь;
		
		обЗадача.ВыполнитьЗадачу();
						
	    ЗафиксироватьТранзакцию();
	КонецЦикла;

	#Если Клиент Тогда
		
		мсТаблицы = Новый Массив;
		мсТаблицы.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
		новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
		
	#КонецЕсли
 
КонецПроцедуры


Процедура ПоискЗаказа()
	Стр = "";
	Если Не ВвестиСтроку(Стр, "Укажите номер заказа", 6) Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Стр) Тогда
		Возврат;
	КонецеСли;	
	
	Д = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Стр);
	Если Д.Пустая() Тогда
		Предупреждение("Доставка № " + Стр + " не найдена в БД!");
		Возврат;
	КонецеСли;	
	//перебор рейсов
	
	Для Каждого Тек Из Журнал.Дерево.Значение.Строки Цикл
		Журнал.Дерево.развернуть(Тек, Истина);
		Най = Тек.Строки[0].Строки.Найти(Д.Ссылка);
		Если Най <> Неопределено Тогда
			Журнал.Дерево.ТекущаяСтрока = Най;
			Возврат;
		Иначе
			Журнал.Дерево.Свернуть(Тек);
		КонецеСли;	
	КонецЦикла;	
	Предупреждение("Доставка № " + Стр + " не найдена в текущийх рейсах!");
КонецПроцедуры	

Процедура ПредварительноеЗакрытиеРейсов()
	соЗадачи = ПолучитьВыбранныеЗадачи();
	Если соЗадачи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Ответ = Вопрос("Закрыть предварительно выбранные рейсы?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	НовД = Документы.ГрупповоеПредварительноеЗакрытиеРейсов.СоздатьДокумент();
	НовД.Дата = ТекущаяДата();
	НовД.ТипЗакрытия = Перечисления.ТипыПредварительногоЗакрытия.ПредварительноеЗакрытие;
	
	
	Реж = Константы.ПриВводеОтчетовВодителейОбновлятьРейсыИзМаршрутизации.Получить();
	
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		Рейс = ЭлЗадача.Ключ.БизнесПроцесс;
		Состояние(Рейс);
		
		Если lem.ПоРейсуВведеноПредварительноеЗакрытие(Рейс) Тогда
			Сообщить("Уже есть предварительное закрытие (обработка пропущена): " + Рейс.Транспорт.Наименование, СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецеСли;	
		
		
		
		ДокУжеЕсть = Ложь;
		ОтчетВодителя = Документы.новаОтчетВодителя.НайтиПоРеквизиту("Рейс", Рейс);
		Если Не ЗначениеЗаполнено(ОтчетВодителя) Тогда 
			
			Если Реж И Не ДокУжеЕсть Тогда
				
				Зап = Новый Запрос;
				Зап.Текст = "ВЫБРАТЬ
				            |	Рейс.Идентификатор КАК Идентификатор,
				            |	Рейс.ДатаРейса КАК ДатаРейса,
				            |	Рейс.vr_РаспределительныйЦентр КАК РЦентр,
				            |	ЕСТЬNULL(ПараметрыРегиональныхТерминаловСрезПоследних.МетодикаЛогистическойМаршрутизации, ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute)) КАК МетодикаМаршрутизации
				            |ИЗ
				            |	Документ.Рейс КАК Рейс
				            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
				            |		ПО Рейс.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
				            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних КАК ПараметрыРегиональныхТерминаловСрезПоследних
				            |		ПО Рейс.ТерминалДоставки = ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал
				            |ГДЕ
				            |	Рейс.РейсМестнойДоставки = &Рейс
				            |	И Рейс.Проведен = ИСТИНА
				            |	И ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, ЛОЖЬ) = ЛОЖЬ";
				Зап.УстановитьПараметр("Рейс", Рейс.Ссылка);
				Рез = зап.Выполнить().Выбрать();
				Если Рез.Следующий() Тогда
					
					// МАС - 26.06.2018 - №2286 --->> 
					//lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);
					Если Рез.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.МаршрутизацияVeeroute Тогда
						lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса, Рез.РЦентр);
					КонецЕсли;
					// <<--- МАС
					
				КонецеСли;	
			КонецеСли;				
			
			
			обОтчетВодителя = Документы.новаОтчетВодителя.СоздатьДокумент();
			обОтчетВодителя.Заполнить(Рейс);
			
			//+++ БАО 11.08.2017 №1638
			обОтчетВодителя.УдаленноеЗакрытие = baoВызовСервера.ПолучитьУдаленноеЗакрытиеДляТранспортаПоРейсу(Рейс.Ссылка);
			обОтчетВодителя.ДокументВнесенВРучную = Истина;
			//--- БАО 11.08.2017 №1638 

			
		Иначе
			обОтчетВодителя = ОтчетВодителя.ПолучитьОбъект();
			Если обОтчетВодителя.Проведен Тогда
				Сообщить("Отчет водителя проведен (обработка пропущена): " + Рейс.Транспорт.Наименование, СтатусСообщения.ОченьВажное);
				Продолжить;
			КонецеСли;	
			ДокУжеЕсть = Истина;
		КонецеСли;	
		
		
		//Если Реж И Не ДокУжеЕсть Тогда
		//	
		//	Зап = Новый Запрос;
		//	Зап.Текст = "ВЫБРАТЬ
		//	|	Рейс.Идентификатор,
		//	|	Рейс.ДатаРейса
		//	|ИЗ
		//	|	Документ.Рейс КАК Рейс
		//	|ГДЕ
		//	|	Рейс.РейсМестнойДоставки = &Рейс
		//	|	И Рейс.Проведен = ИСТИНА
		//	|	И Рейс.РейсЗакрыт = ЛОЖЬ";
		//	Зап.УстановитьПараметр("Рейс", Рейс.Ссылка);
		//	Рез = зап.Выполнить().Выбрать();
		//	Если Рез.Следующий() Тогда
		//		lem_Клиент.ОбновлениеДанныхПоРейсуИзВероута(Рез.Идентификатор, Рез.ДатаРейса);
		//	КонецеСли;	
		//КонецеСли;	  до новой формы
		
		
		//обОтчетВодителя.ПодтянутьДанныеМобильногоПриложения();
		
		//Форма = обОтчетВодителя.ПолучитьФорму();
		
		// Якурнов 03.08.2018 11:57:05
		Форма = обОтчетВодителя.ПолучитьФорму("ФормаДокумента");
		
		//Форма.СохранитьИЗакрытьПослеОткрытия = Истина;
		//Форма.Открыть();
		
		
		обОтчетВодителя.ПодтянутьДанныеМобильногоПриложения();
		обОтчетВодителя.ОбновитьИтоговыеПоказателиНаСервере(обОтчетВодителя);
		обОтчетВодителя.Записать(РежимЗаписиДокумента.Запись);
		
		Д = "";
		Форма.ЗакрытьИзСпискаРейсов(Д, Истина);
		Сообщить("Предварительное закрытие: " + Рейс.Транспорт.Наименование, СтатусСообщения.Информация);
		Если ЗначениеЗаполнено(Д) Тогда
			Нов = НовД.ПредварительныеЗакрытия.Добавить();
			Нов.ОтчетВодителя = обОтчетВодителя.Ссылка;
			Нов.ПредварительноеЗакрытиеРейса = Д.Ссылка;
		КонецЕСли;	
	КонецЦикла;
	
	НовД.Записать(РежимЗаписиДокумента.Запись);
	мсОбъекты = Новый Массив;
	мсОбъекты.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
	мсОбъекты.Добавить("Документ.новаОтчетВодителя");
	новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
	Журнал.Обновить();
КонецПроцедуры	

Функция БылоПредварительноеЗакрытие(ОтчетВодителя)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПредварительноеЗакрытиеРейса.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	                      |ГДЕ
	                      |	ПредварительноеЗакрытиеРейса.ОтчетВодителя = &ОтчетВодителя
	                      |	И ПредварительноеЗакрытиеРейса.Проведен");
	Запрос.УстановитьПараметр("ОтчетВодителя", ОтчетВодителя);
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда	
		Возврат Ложь;		
	Иначе	
		Возврат Истина;		
	КонецЕсли;	

КонецФункции // ()

Функция БылоУдаленноеЗакрытиеРейса(ОтчетВодителя)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПредварительноеЗакрытиеРейса.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	                      |ГДЕ
	                      |	ПредварительноеЗакрытиеРейса.ОтчетВодителя = &ОтчетВодителя
	                      |	И ПредварительноеЗакрытиеРейса.Проведен");
	Запрос.УстановитьПараметр("ОтчетВодителя", ОтчетВодителя);
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда	
		Возврат Ложь;		
	Иначе	
		Возврат Истина;		
	КонецЕсли;	

КонецФункции


ОтображатьТекущийРейсНаКарте = Истина;
соИнтерфейсыОтображенияРейсов = Новый Соответствие;

//ОтображатьТрекиНаКарте = Ложь;
соРейсыНаКарте = Новый Соответствие;

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	Ссылка 	КАК Стиль,
|	Красный КАК Красный,
|	Синий 	КАК Синий,
|	Зеленый КАК Зеленый
|ИЗ
|	Справочник.новаЦветовоеОформлениеРейсов
|ГДЕ 
| НЕ ПометкаУдаления
|УПОРЯДОЧИТЬ ПО Код ВОЗР";

тзСтилиРейсов = Запрос.Выполнить().Выгрузить();
тзСтилиРейсов.Колонки.Добавить("Картинка");
тзСтилиРейсов.Колонки.Добавить("Цвет");
Для Каждого стрСтильРейса Из тзСтилиРейсов Цикл
	стрСтильРейса.Цвет = Новый Цвет(стрСтильРейса.Красный,стрСтильРейса.Зеленый,стрСтильРейса.Синий);
	стрСтильРейса.Картинка = новаОбщиеПроцедуры.ПолучитьКартинкуЦвета(стрСтильРейса.Цвет);
КонецЦикла;
ИндексТекущегоСтиля = 0;

Архив = Ложь;
Подбор = Ложь;
ОтображатьЗагрузкуРейсаВПроцентах = Константы.новаОтображатьЗагрузкуРейсаВПроцентах.Получить();
ЦветПерегрузки = Новый Цвет(255, 200, 200);
ЦветВыгружен = Новый Цвет(255,0,128);//100,100,100);
ГруппироватьРайоны = Ложь;
РедактированиеРейсов = Ложь;
РедактированиеМаршрутов = Ложь;

ТекущийВидОтображенияРейсов = "МаршрутИТочки";

#КонецЕсли