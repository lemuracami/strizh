#Если Клиент Тогда

// Заголовок журнала.
//
Перем Заголовок Экспорт; // <Строка>

// Если Истина, то у дерева журнала устанавливается режим множественного выделения строк.
//
Перем МножественныйВыбор Экспорт; // <Булево>

// Если Истина, то журнал создается без кнопок стандартных действий.
//
Перем НеИмеетСтандартныхКнопок Экспорт; // <Булево>

// Если Истина, то журнал обновляется автоматически при изменении таблиц, входящих в его запрос.
// Для отслеживания изменений используется метод новаОбщиеПроцедуры.ОповеститьОбОбновлении().
//
Перем АвтоОбновление Экспорт; // <Булево>

// Цвет фона кнопки дополнительного действия.
//
Перем ЦветДействия Экспорт; // <Цвет>

// При отображении журнала активной становится последняя строка.
//
Перем ПерейтиККонцуСписка Экспорт; // <Булево>

// Цвет фона текущей строки журнала.
//
Перем ЦветФонаТекущейСтроки Экспорт; // <Цвет>

// Текущая строка журнала на момент возникновения события.
// Может анализироваться в обработчиках событий источников данных.
//
Перем ТекущиеДанные Экспорт; // <СтрокаДереваЗначений>

// Табличное поле, отображающее журнал.
//
Перем Дерево Экспорт; // <ТабличноеПоле>



// Истина, если текущая настройка имеет группировки.
//
Перем ЕстьИерархия Экспорт; // <Булево>

// Текущая выбранная настройка журнала.
//
Перем ТекущаяНастройка Экспорт; // <СтрокаТаблицыЗначений[НастройкаЖурнала]>

// Форма, на которой расположен журнал.
//
Перем ФормаЖурнала Экспорт; // <Форма>

// Панель, на которой расположен журнал.
//
Перем ПанельЖурнала Экспорт; // <Панель>

Перем ЕстьКарта Экспорт;

// Идентификатор журнала. Используется при сохранении/загрузке настроек журнала, инициализируется
// именем элемента-контейнера журнала.
//
Перем ИмяЖурнала Экспорт; // <Строка>

Перем КонтейнерЖурнала;
Перем РамкаЖурнала;
Перем КоманднаяПанельЖурнала;
Перем КнопкаПривязкиСпискаВыбора;
Перем МенеджерВременныхТаблиц;
Перем тзНастройки;
Перем КнопкаНастроек;
Перем КнопкаИсторияОтборов;
Перем КнопкаОтключитьОтбор;
Перем ЖурналНаФорме;
Перем фИсточникПеретаскивания;
Перем фПриемникПеретаскивания;
Перем ЭтоОбновление;
Перем КнопкаИнтерфейсаПериода;
Перем тзКолонкиИерархии;
Перем мсКолонкиШапки;
Перем ТипБулево;
Перем ЕстьПодвал;
Перем ИнтерфейсПолейМеню;
Перем КнопкаДействия;
Перем СбрасываемыйТриггер;
Перем КоличествоБлокировокДоступности;

// Добавляет новую настройку журнала. Конфигурирование настройки производится до добавления следующей, т.е.
// все вызовы изменяющих настройки методов действуют только на последнюю добавленную настройку.
//
// Параметры:
//  Имя           <Строка>: имя настройки.
//  Представление <Строка>: представление настройки.
//
Процедура ДобавитьНастройку(Имя, Представление = Неопределено) Экспорт
	Если Представление = Неопределено Тогда
		ПредставлениеНастройки = новаЖурналы.ПолучитьПредставлениеИзИмени(Имя);
	Иначе
		ПредставлениеНастройки = Представление;
	КонецЕсли;
	
	стрНастройка = тзНастройки.Добавить();
	стрНастройка.Имя = Имя;
	стрНастройка.Представление = ПредставлениеНастройки;
	стрНастройка.ДеревоИсточниковДанных = Новый ДеревоЗначений;
	стрНастройка.ДеревоИсточниковДанных.Колонки.Добавить("Источник");
	стрНастройка.ДеревоИсточниковДанных.Колонки.Добавить("Имя");
	стрНастройка.ДеревоИсточниковДанных.Колонки.Добавить("РеквизитыГруппировок");
	стрНастройка.ДеревоИсточниковДанных.Колонки.Добавить("Фильтр");
	стрНастройка.ИсточникиДанных = Новый Массив;
	
	стрНастройка.СтруктураКолонок = Новый ТаблицаЗначений;
	стрНастройка.СтруктураКолонок.Колонки.Добавить("Имя");
	стрНастройка.СтруктураКолонок.Колонки.Добавить("Положение");
	стрНастройка.СтруктураКолонок.Колонки.Добавить("Ширина");
	стрНастройка.СтруктураКолонок.Колонки.Добавить("Представление");
	стрНастройка.СтруктураКолонок.Колонки.Добавить("Источник");
	стрНастройка.СтруктураКолонок.Колонки.Добавить("Редактировать");
	стрНастройка.СтруктураКолонок.Колонки.Добавить("СохранятьДанные");
	стрНастройка.СтруктураКолонок.Колонки.Добавить("ИмяФлажка");
	стрНастройка.СтруктураКолонок.Колонки.Добавить("ОтображатьВПодвале", Новый ОписаниеТипов("Булево"));
	стрНастройка.СтруктураКолонок.Колонки.Добавить("НеВходитВСхемуОформления", Новый ОписаниеТипов("Булево"));
	стрНастройка.СтруктураКолонок.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	стрНастройка.СтруктураКолонок.Колонки.Добавить("Невидимая", Новый ОписаниеТипов("Булево"));
	стрНастройка.СтруктураКолонок.Колонки.Добавить("ВыбиратьИзБазы", Новый ОписаниеТипов("Булево"));
	
	стрНастройка.ИсторияОтборов = Новый ТаблицаЗначений;
	стрНастройка.ИсторияОтборов.Колонки.Добавить("Кнопка");
	стрНастройка.ИсторияОтборов.Колонки.Добавить("Отборы");
	стрНастройка.ИсторияОтборов.Колонки.Добавить("Представление");
	
	стрНастройка.РаскрытыеВетки = Новый Соответствие;
	
	стрНастройка.Инструменты = Новый ТаблицаЗначений;
	стрНастройка.Инструменты.Колонки.Добавить("Источник");
	стрНастройка.Инструменты.Колонки.Добавить("Порядок");
	стрНастройка.Инструменты.Колонки.Добавить("Имя");
	стрНастройка.Инструменты.Колонки.Добавить("Картинка");
	стрНастройка.Инструменты.Колонки.Добавить("Текст");
	стрНастройка.Инструменты.Колонки.Добавить("Подсказка");
	стрНастройка.Инструменты.Колонки.Добавить("Триггер");
	стрНастройка.Инструменты.Колонки.Добавить("КонтекстноеМеню", Новый ОписаниеТипов("Булево"));
	стрНастройка.Инструменты.Колонки.Добавить("ОсновноеМеню", Новый ОписаниеТипов("Булево"));
	стрНастройка.Инструменты.Колонки.Добавить("Тип");
	стрНастройка.Инструменты.Колонки.Добавить("ТипЗначения");
	стрНастройка.Инструменты.Колонки.Добавить("Значение");
	стрНастройка.Инструменты.Колонки.Добавить("ПолеВвода");
	
	стрНастройка.СортировкиПоУмолчанию = Новый ТаблицаЗначений;
	стрНастройка.СортировкиПоУмолчанию.Колонки.Добавить("Имя");
	стрНастройка.СортировкиПоУмолчанию.Колонки.Добавить("Направление");
	
	стрНастройка.ВведенныеДанныеИсточников = Новый Соответствие;
	стрНастройка.ДополнительныеДанныеИсточников = Новый Соответствие;
	стрНастройка.КонтекстныеМенюИсточников = Новый Соответствие;
КонецПроцедуры

// Указывает, что дерево журнала надо полностью развернуть при первом отображении.
//
Процедура РазворачиватьПолностью() Экспорт;
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	стрНастройка.РазворачиватьПолностью = Истина;
КонецПроцедуры

// Подключает к журналу источник данных.
//
// Параметры:
//  Источник         <ОбработкаОбъект[ИсточникДанныхЖурнала]>
//  ИсточникРодитель <ОбработкаОбъект[ИсточникДанныхЖурнала]>: если задан, то добаляемый источник
//                   становится подчиненным.
//  Фильтр           <Структура>: описание связи полей источника с источником-родителем.
//
Процедура ДобавитьИсточник(Источник, ИсточникРодитель = Неопределено, Фильтр = Неопределено) Экспорт
	
	Источник.Журнал = ЭтотОбъект;
	ОбработатьСобытие(Источник, "Инициализация", ИсточникРодитель);
	
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	
	дзИсточники = стрНастройка.ДеревоИсточниковДанных;
	Если ИсточникРодитель = Неопределено Тогда
		стрИсточник = дзИсточники.Строки.Добавить();
	Иначе
		Строки = дзИсточники.Строки.НайтиСтроки(Новый Структура("Источник", ИсточникРодитель), Истина);
		стрИсточник = Строки[0].Строки.Добавить();
	КонецЕсли;
	
	стрИсточник.Источник = Источник;
	стрИсточник.Фильтр = Фильтр;
	ОбработатьСобытие(Источник, "ВыбранаНастройка", стрНастройка.Имя);
	
	Если Источник.ПараметрыЖурнала.Свойство("ИнтерфейсВводаПериода") Тогда
		стрНастройка.ЕстьИнтерфейсВводаПериода = Истина;
		Если стрНастройка.НачалоПериода = Неопределено Тогда
			стрНастройка.НачалоПериода = Источник.ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода;
		Иначе
			Если Источник.ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода < стрНастройка.НачалоПериода Тогда
				стрНастройка.НачалоПериода = Источник.ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода;
			КонецЕсли;
		КонецЕсли;
		Если стрНастройка.КонецПериода = Неопределено Тогда
			стрНастройка.КонецПериода = Источник.ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода;
		Иначе
			Если ЗначениеЗаполнено(стрНастройка.КонецПериода) Тогда
				Если Источник.ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода > стрНастройка.КонецПериода
				 Или Не ЗначениеЗаполнено(Источник.ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода) Тогда
					стрНастройка.КонецПериода = Источник.ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ПараметрыЖурнала.Свойство("Инструменты") Тогда
		Для Каждого ИнструментИсточника Из Источник.ПараметрыЖурнала.Инструменты Цикл
			стрИнструмент = стрНастройка.Инструменты.Найти(ИнструментИсточника.Имя, "Имя");
			Если стрИнструмент = Неопределено Тогда
				стрИнструмент = стрНастройка.Инструменты.Добавить();
				ЗаполнитьЗначенияСвойств(стрИнструмент, ИнструментИсточника);
				стрИнструмент.Порядок = стрНастройка.Инструменты.Количество();
				стрИнструмент.Источник = Источник;
				стрИнструмент.Тип = ?(ИнструментИсточника.Свойство("ТипЗначения"), "ПолеВвода", "Кнопка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлТаблица Из Источник.КонструкторДанных.ТаблицыДанных Цикл
		стрНастройка.ТаблицыДанных.Вставить(ЭлТаблица.Ключ, Истина);
	КонецЦикла;
	
	стрНастройка.ИсточникиДанных.Добавить(Источник);
КонецПроцедуры

// Устанавливает ширину колонки, которая отображает иерархию.
//
// Параметры:
//  Ширина <Число>
//
Процедура УстановитьШиринуИерархии(Ширина) Экспорт
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	стрНастройка.ШиринаИерархии = Ширина;
КонецПроцедуры

// Добавляет колонку в журнал.
//
// Параметры:
//  ИмяКолонки    <Строка>: имя поля источника.
//  Положение     <ПоложениеКолонки>: положение колонки в журнале.
//  Ширина        <Число>
//  Источник      <ОбработкаОбъект[ИсточникДанныхЖурнала]>: можно задать конкретный источник,
//                                                          к которому принадлежит колонка.
//  Редактировать <РежимРедактированияКолонки>: можно указать режим редактирования колонки.
//
Процедура ДобавитьКолонку(ИмяКолонки, Положение, Ширина, Источник = Неопределено, Редактировать = Неопределено) Экспорт
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	стрКолонка = стрНастройка.СтруктураКолонок.Добавить();
	стрКолонка.Имя = ИмяКолонки;
	стрКолонка.Положение = Положение;
	стрКолонка.Ширина = Ширина;
	стрКолонка.Источник = Источник;
	Если Редактировать = "Программно" Тогда
	    стрКолонка.Редактировать = Неопределено;
		стрКолонка.СохранятьДанные = Истина;
		
	ИначеЕсли Редактировать = Истина Тогда
		стрКолонка.Редактировать = РежимРедактированияКолонки.Вход;
		стрКолонка.СохранятьДанные = Истина;
		
	ИначеЕсли Редактировать = Неопределено Тогда
	    стрКолонка.Редактировать = Неопределено;
		стрКолонка.СохранятьДанные = Ложь;
		
	Иначе
		стрКолонка.Редактировать = Редактировать;
		стрКолонка.СохранятьДанные = Истина;
	КонецЕсли;
КонецПроцедуры

// Добавляет флажок в колонку иерархии, для определенной группировки.
//
// Параметры:
//  ИмяКолонки     <Строка>: имя поля данных флажка.
//  ИмяГруппировки <Строка>: группировка, к которой добавляется флажок.
//
Процедура ИспользоватьФлажок(ИмяКолонки, ИмяГруппировки = Неопределено) Экспорт
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	Если ИмяГруппировки = Неопределено Тогда
		стрКолонка = стрНастройка.СтруктураКолонок[стрНастройка.СтруктураКолонок.Количество() - 1];
		стрКолонка.ИмяФлажка = ИмяКолонки;
	Иначе
		стрНастройка.ФлажкиГруппировок.Вставить(ИмяГруппировки, ИмяКолонки);
	КонецЕсли;
КонецПроцедуры

// Включает отображение в подвале для последней добавленной колонки.
//
Процедура ДобавитьВПодвал() Экспорт
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	стрКолонка = стрНастройка.СтруктураКолонок[стрНастройка.СтруктураКолонок.Количество() - 1];
	стрКолонка.ОтображатьВПодвале = Истина;
КонецПроцедуры

// Исключает последнюю добавленную колонку из пользовательских настроек оформления журнала.
//
Процедура ИсключитьИзСхемыОформления() Экспорт
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	стрКолонка = стрНастройка.СтруктураКолонок[стрНастройка.СтруктураКолонок.Количество() - 1];
	стрКолонка.НеВходитВСхемуОформления = Истина;
КонецПроцедуры

// Делает последнюю добавленную колонку невидимой.
//
Процедура СделатьНевидимой() Экспорт;
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	стрКолонка = стрНастройка.СтруктураКолонок[стрНастройка.СтруктураКолонок.Количество() - 1];
	стрКолонка.НеВходитВСхемуОформления = Истина;
	стрКолонка.Невидимая = Истина;
КонецПроцедуры

// Добавляет сортировку в журнал.
//
// Параметры:
//  Имя         <Строка>: колонка, по которой сортируем.
//  Направление <Строка>: направление сортировки.
//
Процедура ДобавитьСортировку(Имя, Направление) Экспорт
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	стрСортировка = стрНастройка.СортировкиПоУмолчанию.Добавить();
	стрСортировка.Имя = Имя;
	стрСортировка.Направление = Направление;
КонецПроцедуры

// Подключает журнал к форме.
//
// Параметры:
//  Форма   <Форма>
//  Элемент <ЭлементУправления>: элемент формы, на месте которого создается журнал.
//  Панель  <Панель>
//
Процедура ПодключитьИнтерфейс(Форма, Элемент, Панель = Неопределено, ТолькоПросмотр = Ложь) Экспорт
	
	ФормаЖурнала = Форма;
	ПанельЖурнала = Панель;
	КонтейнерЖурнала = Элемент;
	
	ЖурналНаФорме = новаРасширениеФорм.ДобавитьОбъектНаФорму(ФормаЖурнала, ЭтотОбъект);
	ИмяЖурнала = Элемент.Имя;
	
	У = Элемент.Верх;
	
	Если Заголовок <> Неопределено Тогда
		РамкаЖурнала = новаРасширениеФорм.ДобавитьЭлементНаФорму(ФормаЖурнала, Тип("РамкаГруппы"), Панель);
		РамкаЖурнала.Верх = У;
		РамкаЖурнала.Лево = Элемент.Лево;
		РамкаЖурнала.Ширина = Элемент.Ширина;
		РамкаЖурнала.Высота = 15;
		У = У + РамкаЖурнала.Высота;
		
		новаРасширениеФорм.СкопироватьПривязку(РамкаЖурнала, Элемент, ГраницаЭлементаУправления.Верх, ГраницаЭлементаУправления.Верх);
		новаРасширениеФорм.СкопироватьПривязку(РамкаЖурнала, Элемент, ГраницаЭлементаУправления.Лево, ГраницаЭлементаУправления.Лево);
		новаРасширениеФорм.СкопироватьПривязку(РамкаЖурнала, Элемент, ГраницаЭлементаУправления.Право, ГраницаЭлементаУправления.Право);
		новаРасширениеФорм.СкопироватьПривязку(РамкаЖурнала, Элемент, ГраницаЭлементаУправления.Низ, ГраницаЭлементаУправления.Верх);
		
		РамкаЖурнала.Заголовок = Заголовок;
	КонецЕсли;
	
	КнопкаПривязкиСпискаВыбора = новаРасширениеФорм.ДобавитьЭлементНаФорму(ФормаЖурнала, Тип("Кнопка"), Панель);
	КнопкаПривязкиСпискаВыбора.Верх = У;
	КнопкаПривязкиСпискаВыбора.Лево = Элемент.Лево;
	КнопкаПривязкиСпискаВыбора.Ширина = Элемент.Ширина;
	КнопкаПривязкиСпискаВыбора.Высота = 24;
	
	КоманднаяПанельЖурнала = новаРасширениеФорм.ДобавитьЭлементНаФорму(ФормаЖурнала, Тип("КоманднаяПанель"), Панель);
	КоманднаяПанельЖурнала.Верх = У;
	КоманднаяПанельЖурнала.Лево = Элемент.Лево;
	КоманднаяПанельЖурнала.Ширина = Элемент.Ширина;
	КоманднаяПанельЖурнала.Высота = 24;
		
	У = У + КоманднаяПанельЖурнала.Высота;
	
	новаРасширениеФорм.СкопироватьПривязку(КоманднаяПанельЖурнала, Элемент, ГраницаЭлементаУправления.Верх, ГраницаЭлементаУправления.Верх);
	новаРасширениеФорм.СкопироватьПривязку(КоманднаяПанельЖурнала, Элемент, ГраницаЭлементаУправления.Лево, ГраницаЭлементаУправления.Лево);
	новаРасширениеФорм.СкопироватьПривязку(КоманднаяПанельЖурнала, Элемент, ГраницаЭлементаУправления.Право, ГраницаЭлементаУправления.Право);
	новаРасширениеФорм.СкопироватьПривязку(КоманднаяПанельЖурнала, Элемент, ГраницаЭлементаУправления.Низ, ГраницаЭлементаУправления.Верх);
	
	КнопкаПривязкиСпискаВыбора.УстановитьПривязку(ГраницаЭлементаУправления.Верх, КоманднаяПанельЖурнала, ГраницаЭлементаУправления.Верх);
	КнопкаПривязкиСпискаВыбора.УстановитьПривязку(ГраницаЭлементаУправления.Лево, КоманднаяПанельЖурнала, ГраницаЭлементаУправления.Лево);
	КнопкаПривязкиСпискаВыбора.УстановитьПривязку(ГраницаЭлементаУправления.Право, КоманднаяПанельЖурнала, ГраницаЭлементаУправления.Право);
	КнопкаПривязкиСпискаВыбора.УстановитьПривязку(ГраницаЭлементаУправления.Низ, КоманднаяПанельЖурнала, ГраницаЭлементаУправления.Низ);
	
	
	Дерево = новаРасширениеФорм.ДобавитьЭлементНаФорму(ФормаЖурнала, Тип("ТабличноеПоле"), Панель);
	Дерево.Верх = У;
	Дерево.Лево = Элемент.Лево;
	Дерево.Ширина = Элемент.Ширина;
	Дерево.Высота = Элемент.Высота - (У - Элемент.Верх);
	Дерево.ТолькоПросмотр = ТолькоПросмотр;
	Дерево.АвтоКонтекстноеМеню = Ложь;
	Дерево.ИзменятьСоставСтрок = Ложь;
	Дерево.ИзменятьПозициюКолонок = Ложь;
	
	Дерево.УстановитьПривязку(ГраницаЭлементаУправления.Верх, КоманднаяПанельЖурнала, ГраницаЭлементаУправления.Низ);
	новаРасширениеФорм.СкопироватьПривязку(Дерево, Элемент, ГраницаЭлементаУправления.Лево, ГраницаЭлементаУправления.Лево);
	новаРасширениеФорм.СкопироватьПривязку(Дерево, Элемент, ГраницаЭлементаУправления.Право, ГраницаЭлементаУправления.Право);
	новаРасширениеФорм.СкопироватьПривязку(Дерево, Элемент, ГраницаЭлементаУправления.Низ, ГраницаЭлементаУправления.Низ);
	
	Дерево.ТипЗначения = Новый ОписаниеТипов("ДеревоЗначений");
	Дерево.Значение = Новый ДеревоЗначений;
	Если МножественныйВыбор Тогда
	    Дерево.РежимВыделения = РежимВыделенияТабличногоПоля.Множественный;
	КонецЕсли;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"ПриПолученииДанных",
		1,
		ЖурналНаФорме + ".ПриПолученииДанныхДерева(Параметр2);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"ПередРазворачиванием",
		2,
		ЖурналНаФорме + ".ПередРазворачиваниемДерева(Параметр2);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"ПередСворачиванием",
		2,
		ЖурналНаФорме + ".ПередСворачиваниемДерева(Параметр2);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"НачалоПеретаскивания",
		2,
		ЖурналНаФорме + ".НачалоПеретаскиванияДерева(Параметр2, Параметр3);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"ПроверкаПеретаскивания",
		4,
		ЖурналНаФорме + ".ПроверкаПеретаскиванияДерева(Параметр2, Параметр3, Параметр4, Параметр5);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"Перетаскивание",
		4,
		ЖурналНаФорме + ".ПеретаскиваниеДерева(Параметр2, Параметр3, Параметр4, Параметр5);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"Выбор",
		3,
		ЖурналНаФорме + ".ВыборДерева(Параметр2, Параметр3, Параметр4);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"ПриАктивизацииСтроки",
		0,
		ЖурналНаФорме + ".АктивизацияСтрокиДерева();");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"ПередНачаломИзменения",
		1,
		ЖурналНаФорме + ".НачалоИзмененияДерева(Параметр2);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, Дерево,
		"ПередОкончаниемРедактирования",
		3,
		ЖурналНаФорме + ".ОкончаниеРедактированияДерева(Параметр2, Параметр3, Параметр4);");
		
	Элемент.Видимость = Ложь;
	
	КоманднаяПанельЖурнала.ИсточникДействий = Дерево;
	
	Если тзНастройки.Количество() > 1 Тогда
		КнопкаНастроек = КоманднаяПанельЖурнала.Кнопки.Добавить("КнопкаНастроек", ТипКнопкиКоманднойПанели.Подменю);
		
		Для Каждого стрНастройка Из тзНастройки Цикл
			КнопкаНастройки = КнопкаНастроек.Кнопки.Добавить(стрНастройка.Имя, ТипКнопкиКоманднойПанели.Действие, стрНастройка.Представление);
			новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала,
				КнопкаНастройки,
				"Нажатие",
				0,
				ЖурналНаФорме + ".НажатиеКнопкиВыбораНастройки(Параметр1);");
		КонецЦикла;
	КонецЕсли;
	
	СоздатьКнопкиСтандартныхДействий(КоманднаяПанельЖурнала);
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, ФормаЖурнала,
		"ОбработкаОповещения",
		3,
		ЖурналНаФорме + ".ОбработкаОповещенияФормыЖурнала(Параметр1, Параметр2, Параметр3);");
		
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, ФормаЖурнала,
		"ПриЗакрытии",
		0,
		ЖурналНаФорме + ".ПриЗакрытииФормыЖурнала();");
		
	СоздатьКонтекстныеМеню();	
	
	ВыбратьНастройку(тзНастройки[0].Имя);
КонецПроцедуры

// Обработчик события "ПриЗакрытии" формы, к которой подключен журнал.
//
Процедура ПриЗакрытииФормыЖурнала() Экспорт
	
	ОповеститьВсеИсточники("ВыполнитьОсвобождениеРесурсов");
	
	ТекущиеДанные = Неопределено;
	Дерево = Неопределено;
	ФормаЖурнала = Неопределено;
	ПанельЖурнала = Неопределено;
	КонтейнерЖурнала = Неопределено;
	РамкаЖурнала = Неопределено;
	КоманднаяПанельЖурнала = Неопределено;
	КнопкаПривязкиСпискаВыбора = Неопределено;
	МенеджерВременныхТаблиц = Неопределено;
	тзНастройки = Неопределено;
	КнопкаНастроек = Неопределено;
	КнопкаИсторияОтборов = Неопределено;
	КнопкаОтключитьОтбор = Неопределено;
	ЖурналНаФорме = Неопределено;
	фИсточникПеретаскивания = Неопределено;
	фПриемникПеретаскивания = Неопределено;
	ЭтоОбновление = Неопределено;
	КнопкаИнтерфейсаПериода = Неопределено;
	тзКолонкиИерархии = Неопределено;
	мсКолонкиШапки = Неопределено;
	ТипБулево = Неопределено;
	ЕстьПодвал = Неопределено;
	ИнтерфейсПолейМеню = Неопределено;
	КнопкаДействия = Неопределено;
	СбрасываемыйТриггер = Неопределено;
	КоличествоБлокировокДоступности = Неопределено;
	
КонецПроцедуры

Процедура СоздатьКонтекстныеМеню()
	Для Каждого Настройка Из тзНастройки Цикл
		Для Каждого Инструмент Из Настройка.Инструменты Цикл
			Если Не Инструмент.КонтекстноеМеню Тогда Продолжить; КонецЕсли;
			
			Меню = Настройка.КонтекстныеМенюИсточников[Инструмент.Источник];
			Если Меню = Неопределено Тогда
				Меню = ФормаЖурнала.ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), новаОбщиеПроцедуры.УИД(), Ложь);
				Настройка.КонтекстныеМенюИсточников.Вставить(Инструмент.Источник, Меню);
			КонецЕсли;
			
			КнопкаИнструмента = Меню.Кнопки.Добавить(Инструмент.Имя, ТипКнопкиКоманднойПанели.Действие);
			КнопкаИнструмента.Картинка = Инструмент.Картинка;
			КнопкаИнструмента.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			
			Если Инструмент.Триггер = Неопределено Тогда
				новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, КнопкаИнструмента,
					"Нажатие",
					0,
					ЖурналНаФорме + ".ИспользоватьИнструментКонтекстногоМеню(Параметр1);");
			Иначе
				КнопкаИнструмента.Пометка = Инструмент.Триггер;
				
				новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, КнопкаИнструмента,
					"Нажатие",
					0,
					ЖурналНаФорме + ".ПереключитьТриггерКонтекстногоМеню(Параметр1);");
			КонецЕсли;
				
			КнопкаИнструмента.Текст = ?(ЗначениеЗаполнено(Инструмент.Текст), Инструмент.Текст, Инструмент.Подсказка);
			КнопкаИнструмента.Подсказка = ?(ЗначениеЗаполнено(Инструмент.Подсказка), Инструмент.Подсказка, Инструмент.Текст);
			КнопкаИнструмента.Пояснение = КнопкаИнструмента.Подсказка;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Обработчик события "ПриАктивизации" табличного поля журнала.
//
Процедура АктивизацияСтрокиДерева() Экспорт
	ТД = Дерево.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
			Источник.ОбработатьСобытие("АктивизированаСтрока", Неопределено);
		КонецЦикла;
		
		Дерево.КонтекстноеМеню = Неопределено;
	Иначе
		Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
			Если ТД.Источник = Источник Тогда
				Источник.ОбработатьСобытие("АктивизированаСтрока", ТД);
			Иначе
				Источник.ОбработатьСобытие("АктивизированаСтрока", Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Дерево.КонтекстноеМеню = ТекущаяНастройка.КонтекстныеМенюИсточников[ТД.Источник];
	КонецЕсли;
	
	Если ЦветФонаТекущейСтроки <> Неопределено Тогда
		Дерево.ОбновитьСтроки();
	КонецЕсли;
КонецПроцедуры



// Возвращает командную панель, используемую как контекстное меню заданного источника.
//
// Параметры:
//  Источник <ОбработкаОбъект[ИсточникДанныхЖурнала]>
//
// Возвращаемое значение:
//  <КоманднаяПанель>
//
Функция ПолучитьКонтекстноеМеню(Источник) Экспорт
	Возврат ТекущаяНастройка.КонтекстныеМенюИсточников[Источник];
КонецФункции

// Обработчик события "ОбработкаОповещения" формы, к которой подключен журнал.
//
// Параметры:
//  Событие  <Строка>
//  Параметр <ПроизвольноеЗначение>
//  Источник <ПроизвольноеЗначение>
//
Процедура ОбработкаОповещенияФормыЖурнала(Событие, Параметр, Источник) Экспорт
	Если Событие = "новаИзмененыТаблицы" Тогда
		Если АвтоОбновление Тогда
			фОбновлять = Ложь;
			Для Каждого Таблица Из Параметр Цикл
				Если ТекущаяНастройка.ТаблицыДанных[Таблица] <> Неопределено Тогда
					фОбновлять = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если фОбновлять Тогда Обновить(); КонецЕсли;
		КонецЕсли;
	Иначе
		ОповеститьВсеИсточники("СобытиеСистемы", Событие, Параметр, Источник);
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьКнопкиСтандартныхДействий(КоманднаяПанель)
	Если НеИмеетСтандартныхКнопок Тогда Возврат; КонецЕсли;
	
	Кнопка = КоманднаяПанель.Кнопки.Добавить("Настроить", ТипКнопкиКоманднойПанели.Действие, "Настроить журнал");
	Кнопка.Подсказка = "Настроить журнал";
	Кнопка.Пояснение = Кнопка.Подсказка;
	Кнопка.Картинка = БиблиотекаКартинок.новаНастройкаЖурнала;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала,
		Кнопка,
		"Нажатие",
		0,
		ЖурналНаФорме + ".Настроить();");
		
	Кнопка = КоманднаяПанель.Кнопки.Добавить("СохранитьСхемуОформления", ТипКнопкиКоманднойПанели.Действие, "Сохранить настройку");
	Кнопка.Подсказка = "Сохранить настройку";
	Кнопка.Пояснение = Кнопка.Подсказка;
	Кнопка.Картинка = БиблиотекаКартинок.новаСохранениеСхемыОформленияЖурнала;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала,
		Кнопка,
		"Нажатие",
		0,
		ЖурналНаФорме + ".СохранитьСхемуОформления();");
		
	КоманднаяПанель.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
	
	Кнопка = КоманднаяПанель.Кнопки.Добавить("ОтборИСортировка", ТипКнопкиКоманднойПанели.Действие, "Отбор и сортировка");
	Кнопка.Подсказка = "Отбор и сортировка";
	Кнопка.Пояснение = "Установить отбор и сортировку списка";
	Кнопка.Картинка = БиблиотекаКартинок.ОтборИСортировка;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала,
		Кнопка,
		"Нажатие",
		0,
		ЖурналНаФорме + ".ОтборИСортировка();");
		
	Кнопка = КоманднаяПанель.Кнопки.Добавить("ОтборПоТекущемуЗначению", ТипКнопкиКоманднойПанели.Действие, "Отбор по значению в текущей колонке");
	Кнопка.Подсказка = "Отбор по значению в текущей колонке";
	Кнопка.Пояснение = Кнопка.Подсказка;
	Кнопка.Картинка = БиблиотекаКартинок.ОтборПоТекущемуЗначению;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала,
		Кнопка,
		"Нажатие",
		0,
		ЖурналНаФорме + ".ОтборПоТекущемуЗначению();");
		
	КнопкаИсторияОтборов = КоманднаяПанель.Кнопки.Добавить("ИсторияОтборов", ТипКнопкиКоманднойПанели.Подменю, "История отборов");
	КнопкаИсторияОтборов.Подсказка = "История отборов";
	КнопкаИсторияОтборов.Пояснение = Кнопка.Подсказка;
	КнопкаИсторияОтборов.Картинка = БиблиотекаКартинок.ИсторияОтборов;
	
	КнопкаОтключитьОтбор = КоманднаяПанель.Кнопки.Добавить("ОтключитьОтбор", ТипКнопкиКоманднойПанели.Действие, "Отключить отбор");
	КнопкаОтключитьОтбор.Подсказка = "Отключить отбор";
	КнопкаОтключитьОтбор.Пояснение = Кнопка.Подсказка;
	КнопкаОтключитьОтбор.Картинка = БиблиотекаКартинок.ОтключитьОтбор;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала,
		КнопкаОтключитьОтбор,
		"Нажатие",
		0,
		ЖурналНаФорме + ".ОтключитьОтбор();");
	
	
	КоманднаяПанель.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
	
	Кнопка = КоманднаяПанель.Кнопки.Добавить("Обновить", ТипКнопкиКоманднойПанели.Действие, "Обновить");
	Кнопка.Подсказка = "Обновить журнал";
	Кнопка.Пояснение = Кнопка.Подсказка;
	Кнопка.Картинка = БиблиотекаКартинок.Обновить;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала,
		Кнопка,
		"Нажатие",
		0,
		ЖурналНаФорме + ".Обновить();");
		
КонецПроцедуры

// Открывает форму интерактивной настройки отображения журнала.
//
Процедура Настроить() Экспорт
	ФормаНастройки = ПолучитьФорму("ФормаНастройки");
	ФормаНастройки.Открыть();
КонецПроцедуры

// Открывает форму интерактивного сохранения настройки отображения журнала.
//
Процедура СохранитьСхемуОформления() Экспорт
	ФормаСохраненияСхемы = ПолучитьФорму("ФормаСохраненияСхемыОформления", ФормаЖурнала, ТекущаяНастройка);
	ФормаСохраненияСхемы.Открыть();
КонецПроцедуры

// Открывает форму интерактивной настройки отбора и сортировки журнала.
//
Процедура ОтборИСортировка() Экспорт
	ФормаОтбораИСортировки = ПолучитьФорму("ФормаОтбораИСортировки");
	ФормаОтбораИСортировки.Открыть();
КонецПроцедуры

// Устанавиливает в журнале отбор по значению текущей колонки текущей строки.
//
Процедура ОтборПоТекущемуЗначению() Экспорт
	Если Дерево.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если Дерево.ТекущаяКолонка = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Дерево.ТекущаяКолонка.Имя = "Иерархия" Тогда
		Если Дерево.ТекущиеДанные.Группировка = NULL Тогда Возврат; КонецЕсли;
		
		ИмяОтбора = Дерево.ТекущиеДанные.Источник.КонструкторДанных.Группировки[Дерево.ТекущиеДанные.Группировка];
	Иначе
		ИмяОтбора = Дерево.ТекущаяКолонка.Имя;
	КонецЕсли;
	
	Отбор = ТекущаяНастройка.Отборы.Найти(ИмяОтбора, "Отбор");
	Если Отбор = Неопределено Тогда Возврат; КонецЕсли;
	
	соЗначенияОтбора = Новый Соответствие;
	Попытка
		Для Каждого ВыделеннаяСтрока Из Дерево.ВыделенныеСтроки Цикл
			Значение = ВыделеннаяСтрока[ИмяОтбора];
			соЗначенияОтбора.Вставить(Значение, Истина);
		КонецЦикла;
		
		Значение = Дерево.ТекущиеДанные[ИмяОтбора];
		соЗначенияОтбора.Вставить(Значение, Истина);
	Исключение
		Возврат;
	КонецПопытки;
	
	сзЗначенияОтбора = Новый СписокЗначений;
	Для Каждого ЭлЗначение Из соЗначенияОтбора Цикл
		сзЗначенияОтбора.Добавить(ЭлЗначение.Ключ);
	КонецЦикла;
	
	Если сзЗначенияОтбора.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Отбор.Использование = Истина;
	Если сзЗначенияОтбора.Количество() = 1 Тогда
		Отбор.Значение = сзЗначенияОтбора[0].Значение;
		Отбор.ВидСравнения = ВидСравнения.Равно;
	Иначе
		Отбор.Значение = сзЗначенияОтбора;
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
	КонецЕсли;
	
	ДобавитьТекущийОтборВИсторию();
	НастроитьОтображениеОтборов();
	Обновить();	
КонецПроцедуры

// Сбрасывает установленный пользователем отбор журнала.
//
Процедура ОтключитьОтбор() Экспорт
	ТекущаяНастройка.Отборы.ЗаполнитьЗначения(Ложь, "Использование");
	НастроитьОтображениеОтборов();
	Обновить();	
КонецПроцедуры

// Отображает установленные отборы и сортировки на шапке табличного поля.
//
Процедура НастроитьОтображениеОтборов() Экспорт
	Если НеИмеетСтандартныхКнопок Тогда Возврат; КонецЕсли;	
	
	КнопкаОтключитьОтбор.Доступность = ТекущаяНастройка.Отборы.Найти(Истина, "Использование") <> Неопределено;
	
	Для Каждого Колонка Из Дерево.Колонки Цикл
		Если ПустаяСтрока(Колонка.ТекстШапки) Тогда Продолжить; КонецЕсли;
		
		стрОтбор = ТекущаяНастройка.Отборы.Найти(Колонка.Имя, "Отбор");
		стрСортировка = ТекущаяНастройка.Сортировки.Найти(Колонка.Имя, "Имя");
		
		Если стрОтбор = Неопределено Тогда
			фЕстьОтбор = Ложь;	
		Иначе
			фЕстьОтбор = стрОтбор.Использование;
		КонецЕсли;
		
		Если стрСортировка = Неопределено Тогда
			фЕстьСортировка = Ложь;	
		Иначе
			фЕстьСортировка = стрСортировка.Использование;
		КонецЕсли;
		
		Если фЕстьОтбор И фЕстьСортировка Тогда
			Колонка.КартинкаШапки = ?(стрСортировка.Направление = "ВОЗР", БиблиотекаКартинок.новаОтборИСортировкаПоКолонкеВозр, БиблиотекаКартинок.новаОтборИСортировкаПоКолонкеУбыв);
			
		ИначеЕсли фЕстьОтбор Тогда
			Колонка.КартинкаШапки = БиблиотекаКартинок.новаОтборПоКолонке;
			
		ИначеЕсли фЕстьСортировка Тогда
			Колонка.КартинкаШапки = ?(стрСортировка.Направление = "ВОЗР", БиблиотекаКартинок.новаСортировкаПоКолонкеВозр, БиблиотекаКартинок.новаСортировкаПоКолонкеУбыв);
			
		Иначе
			Колонка.КартинкаШапки = Новый Картинка;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Обработчик события "ПриПолученииДанных" табличного поля журнала.
//
// Параметры:
//  ОформленияСтрок <Массив(<ОформлениеСтроки>)>
//
Процедура ПриПолученииДанныхДерева(ОформленияСтрок) Экспорт
	Если ЕстьИерархия Тогда
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Если ОформлениеСтроки.ДанныеСтроки <> Неопределено Тогда
				Источник = ОформлениеСтроки.ДанныеСтроки.Источник;
				ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
				
				Если ЦветФонаТекущейСтроки <> Неопределено Тогда
					Если ДанныеСтроки = Дерево.ТекущиеДанные Тогда
						ОформлениеСтроки.ЦветФона = ЦветФонаТекущейСтроки;
					КонецЕсли;
				КонецЕсли; 
				
				Источник.ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки);
				
				Для Каждого стрКолонкаИерархии Из тзКолонкиИерархии Цикл
					Ячейка = ОформлениеСтроки.Ячейки[стрКолонкаИерархии.Колонка];
					Ячейка.Видимость = стрКолонкаИерархии.Источник = Источник И стрКолонкаИерархии.Группировки.Найти(ДанныеСтроки.Группировка) <> Неопределено;
					Ячейка.ТолькоПросмотр = ?(Ячейка.Видимость, Ячейка.ТолькоПросмотр, Истина);
				КонецЦикла;
			КонецЕсли;
		
			Для Каждого КолонкаШапки Из мсКолонкиШапки Цикл
				ОформлениеСтроки.Ячейки[КолонкаШапки].Видимость = Ложь;
			КонецЦикла;
		КонецЦикла;
	Иначе	
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
			Если ДанныеСтроки <> Неопределено Тогда
				Если ЦветФонаТекущейСтроки <> Неопределено Тогда
					Если ДанныеСтроки = Дерево.ТекущиеДанные Тогда
						ОформлениеСтроки.ЦветФона = ЦветФонаТекущейСтроки;
					КонецЕсли;
				КонецЕсли; 
				
				ДанныеСтроки.Источник.ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки);
			КонецЕсли;
			
			Для Каждого КолонкаШапки Из мсКолонкиШапки Цикл
				ОформлениеСтроки.Ячейки[КолонкаШапки].Видимость = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ВыбратьНастройку(ИмяНовойНастройки)
	ПредНастройка = Неопределено;
	Если ТекущаяНастройка <> Неопределено Тогда
		Если ТекущаяНастройка.Имя = ИмяНовойНастройки Тогда Возврат; КонецЕсли;
		
		Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
			ОбработатьСобытие(Источник, "ВыбранаДругаяНастройка");
		КонецЦикла;
		
		ПредНастройка = ТекущаяНастройка;
		
		Для Каждого ЭлДополнительныеДанные Из ТекущаяНастройка.ДополнительныеДанныеИсточников Цикл
			тзДополнительныеДанные = ЭлДополнительныеДанные.Значение;
			мсСкрываемыеДанные = тзДополнительныеДанные.ВыгрузитьКолонку("Данные");
			ОбработатьСобытие(ЭлДополнительныеДанные.Ключ, "СкрытыДанныеСтроки", мсСкрываемыеДанные);
		КонецЦикла;
		
		ОчиститьМеню();
	КонецЕсли;
	
	ТекущаяНастройка = тзНастройки.Найти(ИмяНовойНастройки, "Имя");
		
	Если КнопкаНастроек <> Неопределено Тогда
		КнопкаНастроек.Текст = ТекущаяНастройка.Представление;
	КонецЕсли;
	
	СформироватьИсториюОтборов();
	ПодготовитьДерево();
	ПодготовитьМеню();
	
	Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
		ОбработатьСобытие(Источник, "ВыбранаНастройка");	
	КонецЦикла;
	
	Если ПредНастройка <> Неопределено Тогда
		новаОтборы.ПеренестиОтборы(ТекущаяНастройка.Отборы, ПредНастройка.Отборы);
	КонецЕсли;
	
	Обновить();
КонецПроцедуры

Процедура ОтобразитьПериод()
	КнопкаИнтерфейсаПериода.Текст = " " + новаОбщиеПроцедуры.ПериодВСтроку(ТекущаяНастройка.НачалоПериода, ТекущаяНастройка.КонецПериода, "Без ограничения");
	
	//СнятьОтбор("НачалоПериода");
	//СнятьОтбор("КонецПериода");
	//
	//Если ЗначениеЗаполнено(ТекущаяНастройка.НачалоПериода) Тогда
	//	УстановитьОтбор("НачалоПериода", ТекущаяНастройка.НачалоПериода, ВидСравнения.БольшеИлиРавно);
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(ТекущаяНастройка.КонецПериода) Тогда
	//	УстановитьОтбор("КонецПериода", ТекущаяНастройка.КонецПериода, ВидСравнения.МеньшеИлиРавно);
	//КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор в журнале, как если бы его установил пользователь.
//
// Параметры:
//  Имя            <Строка>: имя колонки.
//  Значение       <ПроизвольноеЗначение>: значение отбора.
//  врВидСравнения <ВидСравнения>: вид сравнения.
//
Процедура УстановитьОтбор(Имя, Значение, врВидСравнения = Неопределено) Экспорт
	Отбор = ТекущаяНастройка.Отборы.Найти(Имя, "Отбор");
	Если Отбор <> Неопределено Тогда
		Отбор.Использование = Истина;
		Отбор.ВидСравнения = ?(врВидСравнения = Неопределено, ВидСравнения.Равно, врВидСравнения);
		Отбор.Значение = Значение;
	КонецЕсли;
КонецПроцедуры

// Сбрасывает установленный пользователем отбор по определенной колонке.
//
// Параметры:
//  Имя <Строка>: имя колонки.
//
Процедура СнятьОтбор(Имя) Экспорт
	Отбор = ТекущаяНастройка.Отборы.Найти(Имя, "Отбор");
	Если Отбор <> Неопределено Тогда
		Отбор.Использование = Ложь;
	КонецЕсли;
КонецПроцедуры

// Сбрасывает отметку кнопки инструмента.
//
// Параметры:
//  ИмяИнструмента <Строка>
//
Процедура СброситьТриггер(ИмяИнструмента) Экспорт
	Если СбрасываемыйТриггер <> Неопределено Тогда Возврат; КонецЕсли;
	
	СбрасываемыйТриггер = ИмяИнструмента;
	
	Для Каждого Кнопка Из ТекущаяНастройка.ДобавленныеКнопкиМеню Цикл
		Если Кнопка.Имя = ИмяИнструмента И Кнопка.Пометка Тогда
			ПереключитьТриггер(Кнопка);	
		КонецЕсли;
	КонецЦикла;
	
	СбрасываемыйТриггер = Неопределено;
КонецПроцедуры

Процедура СоздатьКнопкуМеню(Инструмент)
	КнопкаИнструмента = КоманднаяПанельЖурнала.Кнопки.Добавить(Инструмент.Имя, ТипКнопкиКоманднойПанели.Действие);
	Если ЗначениеЗаполнено(Инструмент.Картинка) Тогда
		КнопкаИнструмента.Картинка = Инструмент.Картинка;
	КонецЕсли;
	КнопкаИнструмента.Текст = Инструмент.Текст;
	КнопкаИнструмента.Подсказка = ?(ЗначениеЗаполнено(Инструмент.Подсказка), Инструмент.Подсказка, Инструмент.Текст);
	КнопкаИнструмента.Пояснение = КнопкаИнструмента.Подсказка;
	КнопкаИнструмента.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	
	Если Инструмент.Триггер = Неопределено Тогда
		новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, КнопкаИнструмента,
			"Нажатие",
			0,
			ЖурналНаФорме + ".ИспользоватьИнструмент(Параметр1);");
	Иначе
		КнопкаИнструмента.Пометка = Инструмент.Триггер;
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, КнопкаИнструмента,
			"Нажатие",
			0,
			ЖурналНаФорме + ".ПереключитьТриггер(Параметр1);");
	КонецЕсли;
	
	КнопкаИнструмента.Текст = Инструмент.Текст;
	
	ТекущаяНастройка.ДобавленныеКнопкиМеню.Добавить(КнопкаИнструмента);
КонецПроцедуры

Процедура СоздатьПолеВводаМеню(Инструмент)
	Если ИнтерфейсПолейМеню = Неопределено Тогда
		ИнтерфейсПолейМеню = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	КнопкаИнструмента = КоманднаяПанельЖурнала.Кнопки.Добавить(Инструмент.Имя, ТипКнопкиКоманднойПанели.Действие);
	КнопкаИнструмента.Текст = Инструмент.Текст;
	ТекущаяНастройка.ДобавленныеКнопкиМеню.Добавить(КнопкаИнструмента);
	
	ПолеВвода = новаРасширениеФорм.ДобавитьЭлементНаФорму(ФормаЖурнала, Тип("ПолеВвода"), ПанельЖурнала, ИнтерфейсПолейМеню);
	ПолеВвода.ТипЗначения = Инструмент.ТипЗначения;
	ПолеВвода.Значение = Инструмент.Значение;
	ПолеВвода.Подсказка = ?(ЗначениеЗаполнено(Инструмент.Подсказка), Инструмент.Подсказка, Инструмент.Текст);
	новаОбщиеПроцедуры.ПоместитьПолеВводаНаКоманднуюПанель(ФормаЖурнала, КоманднаяПанельЖурнала, КнопкаИнструмента, ПолеВвода);
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, ПолеВвода,
		"ПриИзменении",
		0,
		ЖурналНаФорме + ".ПриИзмененииПоляВводаМеню(Параметр1);");
	
	Инструмент.ПолеВвода = ПолеВвода;
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода инструмента.
//
// Параметры:
//  ПолеВвода <ПолеВвода>: измененное поле ввода.
//
Процедура ПриИзмененииПоляВводаМеню(ПолеВвода) Экспорт
	Инструмент = ТекущаяНастройка.Инструменты.Найти(ПолеВвода, "ПолеВвода");
	Если Инструмент = Неопределено Тогда Возврат; КонецЕсли;
	
	Инструмент.Значение = Инструмент.ПолеВвода.Значение;
	УстановитьЗначениеИнструмента(Инструмент.Имя, Инструмент.Значение);
	
	ИспользоватьИнструмент(Инструмент, Инструмент);
КонецПроцедуры

// Устанавливает значение инструмента с заданным именем.
//
// Параметры:
//  ИмяИнструмента <Строка>
//  Значение       <ПроизвольноеЗначение>
//
Процедура УстановитьЗначениеИнструмента(ИмяИнструмента, Значение) Экспорт
	Для Каждого стрНастройка Из тзНастройки Цикл
		стрИнструмент = стрНастройка.Инструменты.Найти(ИмяИнструмента, "Имя");
		Если стрИнструмент = Неопределено Тогда Продолжить; КонецЕсли;
		
		стрИнструмент.Значение = Значение;
		
		Если стрНастройка = ТекущаяНастройка Тогда
			стрИнструмент.ПолеВвода.Значение = Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПодготовитьМеню()
	Если ТекущаяНастройка.ЕстьИнтерфейсВводаПериода Тогда
		КнопкаИнтерфейсаПериода = КоманднаяПанельЖурнала.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Действие);
		КнопкаИнтерфейсаПериода.Картинка = БиблиотекаКартинок.УстановитьИнтервал;
		КнопкаИнтерфейсаПериода.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КнопкаИнтерфейсаПериода.Подсказка = "Выбор периода";
		КнопкаИнтерфейсаПериода.Пояснение = КнопкаИнтерфейсаПериода.Подсказка;
		ОтобразитьПериод();
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, КнопкаИнтерфейсаПериода,
			"Нажатие",
			0,
			ЖурналНаФорме + ".НастроитьПериод();");
			
		ТекущаяНастройка.ДобавленныеКнопкиМеню.Добавить(КнопкаИнтерфейсаПериода);
	КонецЕсли;
		
	Если ТекущаяНастройка.Инструменты.Количество() > 0 Тогда
		ТекущаяНастройка.Инструменты.Сортировать("Источник ВОЗР, Порядок ВОЗР");
		
		Кнопка = КоманднаяПанельЖурнала.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
		ТекущаяНастройка.ДобавленныеКнопкиМеню.Добавить(Кнопка);
		
		Для Каждого Инструмент Из ТекущаяНастройка.Инструменты Цикл
			Если Инструмент.КонтекстноеМеню И Не Инструмент.ОсновноеМеню Тогда Продолжить; КонецЕсли;
			
			Если Инструмент.Тип = "ПолеВвода" Тогда
				СоздатьПолеВводаМеню(Инструмент);
			Иначе
				СоздатьКнопкуМеню(Инструмент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет сделать выбор из меню аналогично стандартному методу формы ВыбратьИзМеню(), расположив меню под
// кнопкой командной панели журнала.
//
// Параметры:
//  сзМеню                <СписокЗначений>
//  КнопкаКоманднойПанели <КнопкаКоманднойПанели>
//
// Возвращаемое значение:
//  <ЭлементСпискаЗначений, Неопределено>
//
Функция ВыбратьИзМеню(сзМеню, КнопкаКоманднойПанели) Экспорт
	новаОбщиеПроцедуры.ПоместитьПолеВводаНаКоманднуюПанель(ФормаЖурнала, КоманднаяПанельЖурнала, КнопкаКоманднойПанели, КнопкаПривязкиСпискаВыбора);
	новаОбщиеПроцедуры.ОбновитьКомандныеПанели(ФормаЖурнала);
	
	ЭлВыбор = ФормаЖурнала.ВыбратьИзМеню(сзМеню, КнопкаПривязкиСпискаВыбора);
	
	новаОбщиеПроцедуры.УдалитьПолеВводаСКоманднойПанели(ФормаЖурнала, КнопкаПривязкиСпискаВыбора);
	
	Возврат ЭлВыбор;
КонецФункции

// Переключает отметку кнопки.
//
// Параметры:
//  КнопкаИнструмента <КнопкаКоманднойПанели>
//
Процедура ПереключитьТриггер(КнопкаИнструмента) Экспорт
	КнопкаИнструмента.Пометка = Не КнопкаИнструмента.Пометка;
	ИспользоватьИнструмент(КнопкаИнструмента, КнопкаИнструмента.Пометка);
КонецПроцедуры

// Вызывает обработку нажатия на кнопку инструмента в текущих источниках данных.
//
// Параметры:
//  КнопкаИнструмента <КнопкаКоманднойПанели>
//  Параметр          <ПроизвольноеЗначение>
//
Процедура ИспользоватьИнструмент(КнопкаИнструмента, Параметр = Неопределено) Экспорт
	Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
		ОбработатьСобытие(Источник, "ИспользованиеИнструмента", КнопкаИнструмента.Имя, Параметр, КнопкаИнструмента);
	КонецЦикла;
КонецПроцедуры

// Переключает отметку кнопки контекстного меню.
//
// Параметры:
//  КнопкаИнструмента <КнопкаКоманднойПанели>
//
Процедура ПереключитьТриггерКонтекстногоМеню(КнопкаИнструмента) Экспорт
	КнопкаИнструмента.Пометка = Не КнопкаИнструмента.Пометка;
	ИспользоватьИнструментКонтекстногоМеню(КнопкаИнструмента, КнопкаИнструмента.Пометка);
КонецПроцедуры

// Вызывает обработку нажатия на кнопку инструмента в текущих источниках данных.
//
// Параметры:
//  КнопкаИнструмента <КнопкаКоманднойПанели>
//  Параметр          <ПроизвольноеЗначение>
//
Процедура ИспользоватьИнструментКонтекстногоМеню(КнопкаИнструмента, Параметр = Неопределено) Экспорт
	Для Каждого ЭлКонтекстноеМеню Из ТекущаяНастройка.КонтекстныеМенюИсточников Цикл
		Если ЭлКонтекстноеМеню.Значение.Кнопки.Индекс(КнопкаИнструмента) = -1 Тогда Продолжить; КонецЕсли;
		
		ОбработатьСобытие(ЭлКонтекстноеМеню.Ключ, "ИспользованиеИнструмента", КнопкаИнструмента.Имя, Параметр);
		Прервать;
	КонецЦикла;
КонецПроцедуры

// Вызывает окно интерактивной настройки периода журнала.
//
Процедура НастроитьПериод() Экспорт
	НовыйПериод = новаОбщиеПроцедуры.РедактироватьПериод(ТекущаяНастройка.НачалоПериода, ТекущаяНастройка.КонецПериода);
	Если НовыйПериод = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущаяНастройка.НачалоПериода = НовыйПериод.ДатаНачала;
	ТекущаяНастройка.КонецПериода = НовыйПериод.ДатаОкончания;
	
	Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
		Если Не Источник.ПараметрыЖурнала.Свойство("ИнтерфейсВводаПериода") Тогда Продолжить; КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Источник.ПараметрыЖурнала.ИнтерфейсВводаПериода, ТекущаяНастройка);
		ОбработатьСобытие(Источник, "ИзменениеПараметров");
	КонецЦикла;
	
	ОтобразитьПериод();
	Обновить();
КонецПроцедуры

Процедура ОчиститьМеню()
	Если ИнтерфейсПолейМеню <> Неопределено Тогда
		новаРасширениеФорм.УдалитьЭлементыСФормы(ФормаЖурнала, ИнтерфейсПолейМеню);
	КонецЕсли;
	
	КнопкаИнтерфейсаПериода = Неопределено;
	Для Каждого Кнопка Из ТекущаяНастройка.ДобавленныеКнопкиМеню Цикл
		новаРасширениеФорм.ОчиститьОбработчикиСобытия(ФормаЖурнала, Кнопка);
		КоманднаяПанельЖурнала.Кнопки.Удалить(Кнопка);
	КонецЦикла;
	ТекущаяНастройка.ДобавленныеКнопкиМеню.Очистить();
КонецПроцедуры

Процедура ДобавитьКолонкиВДеревоДанных(НовыеКолонки)
	Для Каждого НоваяКолонка Из НовыеКолонки Цикл
		КолонкаДерева = Дерево.Значение.Колонки.Найти(НоваяКолонка.Имя);
		Если КолонкаДерева <> Неопределено Тогда Продолжить; КонецЕсли;
		Дерево.Значение.Колонки.Добавить(НоваяКолонка.Имя, НоваяКолонка.ТипЗначения);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьСтрокиВДеревоДанных(СтрокиПриемник, СтрокиИсточник, Источник)
	Для Каждого Строка Из СтрокиИсточник Цикл
		СтрокаПриемник = СтрокиПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, Строка);
		СтрокаПриемник.Источник = Источник;
		Если Строка.Строки.Количество() > 0 Тогда
			ДобавитьСтрокиВДеревоДанных(СтрокаПриемник.Строки, Строка.Строки, Источник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДетализируемыеСтрокиВДеревоДанных(СтрокиПриемник, СтрокиИсточник, Источник)
	Для Каждого Строка Из СтрокиИсточник Цикл
		СтрокаПриемник = СтрокиПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, Строка);
		СтрокаПриемник.Источник = Источник;
		Если Строка.Строки.Количество() = 0 Тогда
			СтрокаПриемник.Строки.Добавить();
		Иначе
			ДобавитьДетализируемыеСтрокиВДеревоДанных(СтрокаПриемник.Строки, Строка.Строки, Источник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДанныеВДеревоДанных(СтрокиДерева, дзДанные, Источник, Детализация)
	Строки = ?(дзДанные.Строки.Количество() = 0, дзДанные.Строки, дзДанные.Строки[0].Строки);
	Если Детализация Тогда
		ДобавитьДетализируемыеСтрокиВДеревоДанных(СтрокиДерева, Строки, Источник);
	Иначе
		ДобавитьСтрокиВДеревоДанных(СтрокиДерева, Строки, Источник);
	КонецЕсли;
	
	тзВведенныеДанные = ТекущаяНастройка.ВведенныеДанныеИсточников[Источник];
	Если тзВведенныеДанные <> Неопределено Тогда
		Для Каждого стрВведенныеДанные Из тзВведенныеДанные Цикл
			Строки = СтрокиДерева.НайтиСтроки(стрВведенныеДанные.Ключ, Истина);
			Если Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Строки[0], стрВведенныеДанные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработатьСобытие(Источник, "ДобавленыДанныеВДерево", СтрокиДерева);
КонецПроцедуры

Функция ПолучитьДанныеИсточника(стрИсточник, ТекущиеДанныеРодителя);
	Если стрИсточник.Родитель <> Неопределено Тогда
		Если стрИсточник.Фильтр <> Неопределено Тогда
			стФильтр = Новый Структура;
			Для Каждого ЭлФильтра Из стрИсточник.Фильтр Цикл
				стФильтр.Вставить(ЭлФильтра.Ключ, ТекущиеДанныеРодителя[ЭлФильтра.Значение]);
			КонецЦикла;
			ОбработатьСобытие(стрИсточник.Источник, "УстановленФильтр", стФильтр);
		КонецЕсли;
	КонецЕсли;
	
	КонструкторДанных = стрИсточник.Источник.КонструкторДанных;
	КонструкторДанных.ВыбранныеПоказатели = СформироватьВыбранныеПоказатели(ТекущаяНастройка);
	
	КонструкторДанных.УстановленныеОтборы = ТекущаяНастройка.Отборы.НайтиСтроки(Новый Структура("Использование", Истина));
	КонструкторДанных.УстановленныеСортировки = ТекущаяНастройка.Сортировки.НайтиСтроки(Новый Структура("Использование", Истина));
	
	дзДанные = КонструкторДанных.ПолучитьДанные();
	
	Возврат дзДанные;
КонецФункции

Функция ПолучитьПозицию()
	мсПозиция = Новый Массив;
	мсПозиция.Добавить(ПолучитьКлючСтроки(Дерево.ТекущиеДанные));
	Если Дерево.ТекущиеДанные <> Неопределено Тогда
		Если Дерево.ТекущиеДанные.Родитель = Неопределено Тогда
			ТекущиеСтроки = Дерево.Значение.Строки;			
		Иначе
			ТекущиеСтроки = Дерево.ТекущиеДанные.Родитель.Строки;
		КонецЕсли;
		Индекс = ТекущиеСтроки.Индекс(Дерево.ТекущиеДанные);
		Если Индекс > 0 Тогда
			мсПозиция.Добавить(ПолучитьКлючСтроки(ТекущиеСтроки[Индекс - 1]));
		КонецЕсли;
	КонецЕсли;
	
	Возврат мсПозиция;
КонецФункции

Процедура УстановитьПозицию(мсНоваяПозиция)
	Попытка
		Для Каждого НоваяПозиция Из мсНоваяПозиция Цикл
			ТекущаяСтрока = НайтиСтрокуПоКлючу(НоваяПозиция);
			Если ТекущаяСтрока <> Неопределено Тогда
				Дерево.ТекущаяСтрока = ТекущаяСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры

// Обновляет содержимое журнала.
//
Процедура Обновить() Экспорт
	ЭтоОбновление = Истина;
	Позиция = ПолучитьПозицию();
	
	Дерево.Значение.Строки.Очистить();
	ЗагрузитьДанныеВДерево(Дерево.Значение.Строки, ТекущаяНастройка.ДеревоИсточниковДанных.Строки);
	
	Для Каждого ЭлРаскрытаяВетка Из ТекущаяНастройка.РаскрытыеВетки Цикл
		Строки = Дерево.Значение.Строки;
		Для Каждого КлючСтроки Из ЭлРаскрытаяВетка.Значение Цикл
			НайденныеСтроки = Строки.НайтиСтроки(КлючСтроки);
			Если НайденныеСтроки.Количество() = 0 Тогда Прервать; КонецЕсли;
			
			Дерево.Развернуть(НайденныеСтроки[0]);
			
			Строки = НайденныеСтроки[0].Строки;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлДополнительныеДанные Из ТекущаяНастройка.ДополнительныеДанныеИсточников Цикл
		тзДополнительныеДанные = ЭлДополнительныеДанные.Значение;
		
		мсДанныеКУдалению = Новый Массив;
		мсУдаляемыеДанные = Новый Массив;
		Для Каждого стрДанные Из тзДополнительныеДанные Цикл
			Строка = НайтиСтрокуПоКлючу(стрДанные.Ключ);
			Если Строка = Неопределено Тогда
				мсДанныеКУдалению.Добавить(стрДанные);
				мсУдаляемыеДанные.Добавить(стрДанные.Данные);
			Иначе
				стрДанные.СтрокаДанных = Строка;
			КонецЕсли;
		КонецЦикла;
		Если мсДанныеКУдалению.Количество() = 0 Тогда Продолжить; КонецЕсли;
		
		ОбработатьСобытие(ЭлДополнительныеДанные.Ключ, "УдалениеДанныхСтроки", мсУдаляемыеДанные);
		
		Для Каждого стрДанные Из мсДанныеКУдалению Цикл
			тзДополнительныеДанные.Удалить(стрДанные);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлДополнительныеДанные Из ТекущаяНастройка.ДополнительныеДанныеИсточников Цикл
		тзДополнительныеДанные = ЭлДополнительныеДанные.Значение;
		ОбработатьСобытие(ЭлДополнительныеДанные.Ключ, "ОтображеныДанныеСтроки", тзДополнительныеДанные);
	КонецЦикла;
	
	Если ПерейтиККонцуСписка Тогда
		ПерейтиККонцуСписка = Ложь;
		
		Если Дерево.Значение.Строки.Количество() > 1 Тогда
			Попытка
				Дерево.ТекущаяСтрока = Дерево.Значение.Строки[Дерево.Значение.Строки.Количество() - 1];
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		УстановитьПозицию(Позиция);
	КонецЕсли;
	
	ЭтоОбновление = Ложь;
	
	Если ТекущаяНастройка.РазворачиватьПолностью Тогда
		Для Каждого Строка Из Дерево.Значение.Строки Цикл
			Дерево.Развернуть(Строка, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ПодогнатьШиринуКолонокПодШиринуТабличногоПоля();
КонецПроцедуры

Процедура ПодогнатьШиринуКолонокПодШиринуТабличногоПоля()
	мсИзменяемыеКолонки = Новый Массив;
	ОбщаяШиринаКолонок = 0;
	Для Каждого Колонка Из Дерево.Колонки Цикл
		Если Не Колонка.Видимость Тогда Продолжить; КонецЕсли;
		Если Не Колонка.Положение <> ПоложениеКолонки.НоваяКолонка Тогда Продолжить; КонецЕсли;
		
		Если Колонка.ИзменениеРазмера = ИзменениеРазмераКолонки.Изменять Тогда
			мсИзменяемыеКолонки.Добавить(Колонка);
		КонецЕсли;
		
		ОбщаяШиринаКолонок = ОбщаяШиринаКолонок + Колонка.Ширина;
	КонецЦикла;
	ШиринаСимвола = 50;
	
	ОбщаяШиринаКолонок = ОбщаяШиринаКолонок * ШиринаСимвола;
	Если ОбщаяШиринаКолонок < Дерево.Ширина Тогда Возврат; КонецЕсли;
	
	Для Каждого Колонка Из мсИзменяемыеКолонки Цикл
		Колонка.Ширина = 1;
	КонецЦикла;
	Возврат;
	
	Дельта = (ОбщаяШиринаКолонок - Дерево.Ширина) / ШиринаСимвола;
	целДельта = Цел(Дельта);
	Если Дельта > целДельта Тогда целДельта = целДельта + 1; КонецЕсли;
	
	Для Каждого Колонка Из мсИзменяемыеКолонки Цикл
		ДельтаКолонки = (Дельта * Колонка.Ширина) / ОбщаяШиринаКолонок;
		целДельтаКолонки = Цел(ДельтаКолонки);
		Если ДельтаКолонки > целДельтаКолонки Тогда целДельтаКолонки = целДельтаКолонки + 1; КонецЕсли;
		
		Колонка.Ширина = Колонка.Ширина - целДельтаКолонки;
		
		целДельта = целДельта - целДельтаКолонки;
		Если целДельта <= 0 Тогда Прервать; КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция НайтиСтрокуПоКлючу(Ключ)
	НайденнаяСтрока = Неопределено;
	Строки = Дерево.Значение.Строки;
	Для Каждого КлючСтроки Из Ключ Цикл
		НайденныеСтроки = Строки.НайтиСтроки(КлючСтроки);
		Если НайденныеСтроки.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
		
		НайденнаяСтрока = НайденныеСтроки[0];
		Строки = НайденнаяСтрока.Строки;
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
КонецФункции

Процедура ПодготовитьИсточникиДанных(Строки)
	Для Каждого Строка Из Строки Цикл
		ОбработатьСобытие(Строка.Источник, "ВыбранаНастройка", ТекущаяНастройка.Имя);
		
		Если Строка.Источник.КонструкторДанных.Группировки.Количество() > 0 Тогда
			ЕстьИерархия = Истина;
		КонецЕсли;
		
		Если Строка.Источник.ПараметрыЖурнала.Свойство("ИсточникПеретаскивания") Тогда
			фИсточникПеретаскивания = Истина;
		КонецЕсли;
		Если Строка.Источник.ПараметрыЖурнала.Свойство("ПриемникПеретаскивания") Тогда
			фПриемникПеретаскивания = Истина;
		КонецЕсли;
		
		Если Строка.Строки.Количество() > 0 Тогда
			ЕстьИерархия = Истина;
			ПодготовитьИсточникиДанных(Строка.Строки);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ДобавитьКолонкуВДерево(стрКолонка, стрКолонкаИсточника, ТекущийИсточник, Отображать)
	КолонкаДанных = Дерево.Значение.Колонки.Найти(стрКолонка.Имя);
	Если КолонкаДанных = Неопределено Тогда
		Если стрКолонка.Редактировать = Неопределено Тогда
			КолонкаДанных = Дерево.Значение.Колонки.Добавить(стрКолонка.Имя, стрКолонкаИсточника.ТипЗначения);
		Иначе
			КолонкаДанных = Дерево.Значение.Колонки.Добавить(стрКолонка.Имя, стрКолонкаИсточника.ТипЗначенияБезNULL);
		КонецЕсли;
	КонецЕсли; 
	
	Если стрКолонкаИсточника.ОтображатьПредставление И стрКолонка.Редактировать = Неопределено Тогда
		ДанныеКолонки = стрКолонка.Имя + "_Пред";
		КолонкаПредставления = Дерево.Значение.Колонки.Добавить(ДанныеКолонки, Новый ОписаниеТипов("Строка"));
	Иначе
		ДанныеКолонки = стрКолонка.Имя;
	КонецЕсли;
		
	Колонка = Дерево.Колонки.Добавить(стрКолонка.Имя, стрКолонкаИсточника.Представление);
	Колонка.ТекстШапки = стрКолонкаИсточника.Представление;
	Колонка.Видимость = Отображать;
	Если стрКолонкаИсточника.ТипЗначенияБезNULL.СодержитТип(ТипБулево) Тогда
		Колонка.ДанныеФлажка = ДанныеКолонки;
	Иначе
		Колонка.Данные = ДанныеКолонки;
	КонецЕсли;
	
	Колонка.Положение = стрКолонка.Положение;
	Если стрКолонка.Ширина <> 0 Тогда
		Если стрКолонка.Ширина >= 0 Тогда
			Колонка.Ширина = стрКолонка.Ширина;
		Иначе
			Колонка.Ширина = -стрКолонка.Ширина;
			Колонка.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять; 
		КонецЕсли;
	КонецЕсли;
	Колонка.Формат = стрКолонкаИсточника.Формат;
		
	Если стрКолонка.Редактировать = Неопределено Тогда
		Колонка.ТолькоПросмотр = Истина;
	Иначе
		Если ТипЗнч(стрКолонка.Редактировать) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Колонка, стрКолонка.Редактировать);		
			ЗаполнитьЗначенияСвойств(Колонка.ЭлементУправления, стрКолонка.Редактировать);		
		Иначе
			Колонка.РежимРедактирования = стрКолонка.Редактировать;
		КонецЕсли;
		Колонка.ТолькоПросмотр = Ложь;
		Колонка.ЭлементУправления.Формат = стрКолонкаИсточника.Формат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(стрКолонка.ИмяФлажка) Тогда
		КолонкаФлажка = Дерево.Значение.Колонки.Добавить(стрКолонка.ИмяФлажка, Новый ОписаниеТипов("Булево"));
		
		Колонка.ДанныеФлажка = стрКолонка.ИмяФлажка;
		ПодготовитьРедактированиеКолонки(стрКолонка.ИмяФлажка, ТекущийИсточник);
		Колонка.ТолькоПросмотр = Ложь;
		Колонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	КонецЕсли;
	
	Если стрКолонка.СохранятьДанные Тогда
		ПодготовитьРедактированиеКолонки(ДанныеКолонки, ТекущийИсточник);
	КонецЕсли;
	
	Если стрКолонка.ОтображатьВПодвале И Отображать Тогда
		ЕстьПодвал = Истина;
		Колонка.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложение.Право;
	Иначе
		Колонка.ОтображатьВПодвале = Ложь;
	КонецЕсли;
	
	Если стрКолонка.Невидимая Тогда
		Колонка.Видимость = Ложь;	
	КонецЕсли;
КонецПроцедуры

Процедура ПодготовитьРедактированиеКолонки(ДанныеКолонки, ТекущийИсточник)
	тзВведенныеДанныеИсточника = ТекущаяНастройка.ВведенныеДанныеИсточников[ТекущийИсточник];
	Если тзВведенныеДанныеИсточника = Неопределено Тогда
		тзВведенныеДанныеИсточника = Новый ТаблицаЗначений;
		тзВведенныеДанныеИсточника.Колонки.Добавить("Ключ");
		тзВведенныеДанныеИсточника.Колонки.Добавить("Группировка");
		ТекущаяНастройка.ВведенныеДанныеИсточников.Вставить(ТекущийИсточник, тзВведенныеДанныеИсточника);
	КонецЕсли;
	Если тзВведенныеДанныеИсточника.Колонки.Найти(ДанныеКолонки) = Неопределено Тогда
		тзВведенныеДанныеИсточника.Колонки.Добавить(ДанныеКолонки);
	КонецЕсли;
КонецПроцедуры

// Подготавливает журнал к отображению.
//
Процедура ПодготовитьДерево() Экспорт
	ЕстьПодвал = Ложь;
	
	Дерево.Колонки.Очистить();
	Дерево.Значение.Строки.Очистить();
	Дерево.Значение.Колонки.Очистить();
	Дерево.Значение.Колонки.Добавить("Источник");
	
	ЕстьИерархия = Ложь;
	фИсточникПеретаскивания = Ложь;
	фПриемникПеретаскивания = Ложь;
	ПодготовитьИсточникиДанных(ТекущаяНастройка.ДеревоИсточниковДанных.Строки);
	
	Дерево.РазрешитьНачалоПеретаскивания = фИсточникПеретаскивания;
	Дерево.РазрешитьПеретаскивание = фПриемникПеретаскивания;
	
	Если ТекущаяНастройка.СхемаОформления = Неопределено Тогда
		ТекущаяНастройка.СхемаОформления = ЗагрузитьСхемуОформленияЖурнала();
	КонецЕсли;
	
	Если ТекущаяНастройка.ВыбранныеПоказатели = Неопределено Тогда
		Если ТекущаяНастройка.СхемаОформления = Ложь Тогда
			ТекущаяНастройка.ВыбранныеПоказатели = ТекущаяНастройка.СтруктураКолонок.ВыгрузитьКолонку("Имя");
		Иначе
			ТекущаяНастройка.ВыбранныеПоказатели = ТекущаяНастройка.СхемаОформления.Показатели;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяНастройка.Отборы = Неопределено Тогда
		ТекущаяНастройка.Отборы = новаОтборы.ПолучитьТаблицуОтборов();
		фЗаполнитьОтборы = Истина;
	Иначе
		фЗаполнитьОтборы = Ложь;
	КонецЕсли;
	
	Если ТекущаяНастройка.Сортировки = Неопределено Тогда
		ТекущаяНастройка.Сортировки = Новый ТаблицаЗначений;
		ТекущаяНастройка.Сортировки.Колонки.Добавить("Имя");
		ТекущаяНастройка.Сортировки.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
		ТекущаяНастройка.Сортировки.Колонки.Добавить("Представление");
		ТекущаяНастройка.Сортировки.Колонки.Добавить("Направление");
		
		фЗаполнитьСортировки = Истина;
	Иначе
		фЗаполнитьСортировки = Ложь;
	КонецЕсли;
	
	Если ЕстьИерархия Тогда
		тзКолонкиИерархии = Новый ТаблицаЗначений;
		тзКолонкиИерархии.Колонки.Добавить("Источник");
		тзКолонкиИерархии.Колонки.Добавить("Колонка");
		тзКолонкиИерархии.Колонки.Добавить("Группировки", Новый ОписаниеТипов("Массив"));
		
		Если фЗаполнитьСортировки Тогда
			Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
				Для Каждого Группировка Из Источник.КонструкторДанных.Группировки Цикл
					стрСортировка = ТекущаяНастройка.Сортировки.Найти(Группировка, "Имя");
					Если стрСортировка = Неопределено Тогда
						стрКолонкаИсточника = Источник.КонструкторДанных.Колонки.Найти(Группировка);
						стрПолеИсточника = Источник.КонструкторДанных.тзПоля.Найти(Группировка);
						
						Если Не ЗначениеЗаполнено(стрПолеИсточника.ПутьСортировки) Тогда
							Если стрПолеИсточника.Выборки.Найти("{ВЫБОРКА_ВЕРХНЕГО_УРОВНЯ}", "Область") = Неопределено Тогда
								Если стрПолеИсточника.Отборы.Найти("{ОТБОР_ВЕРХНЕГО_УРОВНЯ}", "Область") = Неопределено Тогда Продолжить; КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						стрСортировка = ТекущаяНастройка.Сортировки.Добавить();
						стрСортировка.Имя = Группировка;
						стрСортировка.Представление = стрКолонкаИсточника.Представление;
						стрСортировка.Направление = "ВОЗР";
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	соНевидимыеКолонки = Новый Соответствие;
	Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
		Для Каждого стрКолонкаИсточника Из Источник.КонструкторДанных.Колонки Цикл
			соНевидимыеКолонки.Вставить(стрКолонкаИсточника.Имя, Новый Структура("Источник, Колонка", Источник, стрКолонкаИсточника));
		КонецЦикла;
	КонецЦикла;
	
	мсКолонкиШапки = Новый Массив;
	
	Дерево.Значение.Колонки.Добавить("Группировка", Новый ОписаниеТипов("Число, NULL"));
	
	Если ТекущаяНастройка.ПорядокКолонок = Неопределено Тогда
		Если ТекущаяНастройка.СхемаОформления = Ложь Тогда
			ТекущаяНастройка.ПорядокКолонок = Новый Массив;
			Для Каждого стрКолонка Из ТекущаяНастройка.СтруктураКолонок Цикл
				Если стрКолонка.НеВходитВСхемуОформления Тогда Продолжить; КонецЕсли;
				Если стрКолонка.Положение <> ПоложениеКолонки.НоваяКолонка Тогда Продолжить; КонецЕсли;
				
				ТекущаяНастройка.ПорядокКолонок.Добавить(стрКолонка.Имя);
			КонецЦикла;
		Иначе
			ТекущаяНастройка.ПорядокКолонок = ТекущаяНастройка.СхемаОформления.ПорядокКолонок;
		КонецЕсли;
	КонецЕсли;
	
	тзУпорядоченнаяСтруктураКолонок = ТекущаяНастройка.СтруктураКолонок.Скопировать();
	КоличествоКолонок = тзУпорядоченнаяСтруктураКолонок.Количество();
	текПорядок = 1;
	Для Каждого Колонка Из ТекущаяНастройка.ПорядокКолонок Цикл
		Если Не ЗначениеЗаполнено(Колонка) Тогда Продолжить; КонецЕсли;
		
		стрКолонка = тзУпорядоченнаяСтруктураКолонок.Найти(Колонка, "Имя");
		стрКолонка.Порядок = текПорядок;
		текПорядок = текПорядок + 1;
		
		ъ = тзУпорядоченнаяСтруктураКолонок.Индекс(стрКолонка) + 1;
		Пока ъ < КоличествоКолонок Цикл
			стрКолонка = тзУпорядоченнаяСтруктураКолонок[ъ];
			Если стрКолонка.Положение = ПоложениеКолонки.НоваяКолонка Тогда Прервать; КонецЕсли;
			
			стрКолонка.Порядок = текПорядок;
			текПорядок = текПорядок + 1;
			
			ъ = ъ + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого стрКолонка Из тзУпорядоченнаяСтруктураКолонок Цикл
		Если стрКолонка.Порядок <> 0 Тогда Продолжить; КонецЕсли;
		
		стрКолонка.Порядок = текПорядок;
		текПорядок = текПорядок + 1;
	КонецЦикла;
	
	тзУпорядоченнаяСтруктураКолонок.Сортировать("Порядок ВОЗР");
	
	Для Каждого стрУпорядоченнаяКолонка Из тзУпорядоченнаяСтруктураКолонок Цикл
		стрКолонка = ТекущаяНастройка.СтруктураКолонок.Найти(стрУпорядоченнаяКолонка.Имя, "Имя");
		
		Если Лев(стрКолонка.Имя, 1) = "!" Тогда
			ИмяКолонки = "КолонкаШапки" + СтрЗаменить(Строка(ТекущаяНастройка.СтруктураКолонок.Индекс(стрКолонка)), Символы.НПП, "");
			Колонка = Дерево.Колонки.Добавить(ИмяКолонки, Прав(стрКолонка.Имя, СтрДлина(стрКолонка.Имя) - 1));
			Колонка.ОтображатьВПодвале = Ложь;
			мсКолонкиШапки.Добавить(ИмяКолонки);
		    Продолжить;
		КонецЕсли;
		
		ТекущийИсточник = Неопределено;
		стрКолонкаИсточника = Неопределено;
		стрПолеИсточника = Неопределено;
		Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
			стрКолонкаИсточника = Источник.КонструкторДанных.Колонки.Найти(стрКолонка.Имя);
			Если стрКолонкаИсточника <> Неопределено Тогда
				ТекущийИсточник = Источник;
				стрПолеИсточника = ТекущийИсточник.КонструкторДанных.тзПоля.Найти(стрКолонка.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если стрКолонкаИсточника = Неопределено Тогда
			Сообщить("Колонка " + стрКолонка.Имя + " не найдена ни в одном источнике данных!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		стрКолонка.Представление = стрКолонкаИсточника.Представление;
		
		Если ТекущаяНастройка.ВыбранныеПоказатели.Найти(стрКолонка.Имя) = Неопределено Тогда Продолжить; КонецЕсли;
		
		соНевидимыеКолонки.Удалить(стрКолонка.Имя);
		
		Если ЗначениеЗаполнено(стрКолонкаИсточника.ТипЗначения) Тогда
			Если фЗаполнитьОтборы Тогда
				Если Не стрКолонкаИсточника.НеВходитВОтборИСортировку Тогда
					стрОтбор = ТекущаяНастройка.Отборы.Найти(стрКолонка.Имя, "Отбор");
					Если стрОтбор = Неопределено Тогда
						стрОтбор = ТекущаяНастройка.Отборы.Добавить();
						стрОтбор.Отбор = стрКолонка.Имя;
						стрОтбор.Представление = стрКолонкаИсточника.Представление;
						стрОтбор.ТипЗначения = стрКолонкаИсточника.ТипЗначенияБезNULL;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если фЗаполнитьСортировки Тогда
				ВключитьВСортировку = Истина;
				Если стрКолонкаИсточника.НеВходитВОтборИСортировку Тогда
					ВключитьВСортировку = Ложь;
				Иначе
					Если Не ЗначениеЗаполнено(стрПолеИсточника.ПутьСортировки) Тогда
						Если стрПолеИсточника.Выборки.Найти("{ВЫБОРКА_ВЕРХНЕГО_УРОВНЯ}", "Область") = Неопределено Тогда
							Если стрПолеИсточника.Отборы.Найти("{ОТБОР_ВЕРХНЕГО_УРОВНЯ}", "Область") = Неопределено Тогда
								ВключитьВСортировку = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ВключитьВСортировку Тогда
					стрСортировка = ТекущаяНастройка.Сортировки.Найти(стрКолонка.Имя, "Имя");
					Если стрСортировка = Неопределено Тогда
						стрСортировка = ТекущаяНастройка.Сортировки.Добавить();
						стрСортировка.Имя = стрКолонка.Имя;
						стрСортировка.Представление = стрКолонкаИсточника.Представление;
						стрСортировка.Направление = "ВОЗР";
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		стрКолонка.Представление = стрКолонкаИсточника.Представление;
		
		ДобавитьКолонкуВДерево(стрКолонка, стрКолонкаИсточника, ТекущийИсточник, Истина);
				
		Если стрКолонка.Источник <> Неопределено Тогда
			стрКолонкаИерархии = тзКолонкиИерархии.Добавить();
			стрКолонкаИерархии.Источник = стрКолонка.Источник;
			стрКолонкаИерархии.Колонка = стрКолонка.Имя;
			
			мсГруппировки = Новый Массив;
			Для Каждого Группировка Из стрКолонка.Источник.КонструкторДанных.Группировки Цикл
				мсВидимыеКолонки = стрКолонка.Источник.КонструкторДанных.ВидимостьПолей[Группировка];
				Если мсВидимыеКолонки = Неопределено Тогда Продолжить; КонецЕсли;
				
				Если мсВидимыеКолонки.Найти(стрКолонка.Имя) <> Неопределено Тогда
					мсГруппировки.Добавить(стрКолонка.Источник.КонструкторДанных.Группировки.Найти(Группировка));
				КонецЕсли;
			КонецЦикла;
			
			мсВидимыеКолонки = стрКолонка.Источник.КонструкторДанных.ВидимостьПолей[NULL];
			Если мсВидимыеКолонки <> Неопределено Тогда
				Если мсВидимыеКолонки.Найти(стрКолонка.Имя) <> Неопределено Тогда
					мсГруппировки.Добавить(NULL);
				КонецЕсли;
			КонецЕсли;
			
			стрКолонкаИерархии.Группировки = мсГруппировки;
		КонецЕсли;
	КонецЦикла;
	
	стКолонка = Новый Структура("Имя, Положение, Ширина, Представление, Редактировать, СохранятьДанные, ИмяФлажка, ОтображатьВПодвале, Невидимая",, ПоложениеКолонки.НоваяКолонка, 0, "", Неопределено, Ложь, Неопределено, Ложь, Ложь);
	Для Каждого ЭлНевидимаяКолонка Из соНевидимыеКолонки Цикл
		стКолонка.Имя = ЭлНевидимаяКолонка.Ключ;
		ДобавитьКолонкуВДерево(стКолонка, ЭлНевидимаяКолонка.Значение.Колонка, ЭлНевидимаяКолонка.Значение.Источник, Ложь);
	КонецЦикла;
	
	Если ЕстьИерархия Тогда
		РазмерИерархии = 0;
	
		Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
			НомерГруппировки = 0;
			Для Каждого Группировка Из Источник.КонструкторДанных.Группировки Цикл
				ДобавитьКолонкуВИерархию(Источник, НомерГруппировки, Группировка, РазмерИерархии);
				НомерГруппировки = НомерГруппировки + 1;
			КонецЦикла;
			
			ДобавитьКолонкуВИерархию(Источник, NULL, Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии, РазмерИерархии);
			
			Если фЗаполнитьСортировки Тогда
				стрСортировка = ТекущаяНастройка.Сортировки.Найти(Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии, "Имя");
				Если стрСортировка = Неопределено Тогда
					стрКолонкаИсточника = Неопределено;
					стрПолеИсточника = Неопределено;
					Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
						стрКолонкаИсточника = Источник.КонструкторДанных.Колонки.Найти(Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии);
						Если стрКолонкаИсточника <> Неопределено Тогда
							стрПолеИсточника = Источник.КонструкторДанных.тзПоля.Найти(Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии);
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если стрКолонкаИсточника <> Неопределено Тогда
						ВключитьВСортировку = Истина;
						Если стрКолонкаИсточника.НеВходитВОтборИСортировку Тогда
							ВключитьВСортировку = Ложь;
						Иначе
							Если Не ЗначениеЗаполнено(стрПолеИсточника.ПутьСортировки) Тогда
								Если стрПолеИсточника.Выборки.Найти("{ВЫБОРКА_ВЕРХНЕГО_УРОВНЯ}", "Область") = Неопределено Тогда
									Если стрПолеИсточника.Отборы.Найти("{ОТБОР_ВЕРХНЕГО_УРОВНЯ}", "Область") = Неопределено Тогда
										ВключитьВСортировку = Ложь;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если ВключитьВСортировку Тогда
							стрСортировка = ТекущаяНастройка.Сортировки.Добавить();
							стрСортировка.Имя = Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии;
							стрСортировка.Представление = стрКолонкаИсточника.Представление;
							стрСортировка.Направление = "ВОЗР";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
	Если фЗаполнитьОтборы Тогда
		Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
			Для Каждого Группировка Из Источник.КонструкторДанных.Группировки Цикл
				стрОтбор = ТекущаяНастройка.Отборы.Найти(Группировка, "Отбор");
				Если стрОтбор <> Неопределено Тогда Продолжить; КонецЕсли;
				
				стрКолонкаИсточника = Источник.КонструкторДанных.Колонки.Найти(Группировка, "Имя");
				Если стрКолонкаИсточника = Неопределено Тогда Продолжить; КонецЕсли;
				Если стрКолонкаИсточника.НеВходитВОтборИСортировку Тогда Продолжить; КонецЕсли;
				стрОтбор = ТекущаяНастройка.Отборы.Добавить();
				стрОтбор.Отбор = Группировка;
				стрОтбор.Представление = стрКолонкаИсточника.Представление;
				стрОтбор.ТипЗначения = стрКолонкаИсточника.ТипЗначенияБезNULL;
			КонецЦикла;
			
			стрОтбор = ТекущаяНастройка.Отборы.Найти(Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии, "Отбор");
			Если стрОтбор = Неопределено Тогда
				стрКолонкаИсточника = Источник.КонструкторДанных.Колонки.Найти(Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии, "Имя");
				Если стрКолонкаИсточника <> Неопределено Тогда
					Если Не стрКолонкаИсточника.НеВходитВОтборИСортировку Тогда
						стрОтбор = ТекущаяНастройка.Отборы.Добавить();
						стрОтбор.Отбор = Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии;
						стрОтбор.Представление = стрКолонкаИсточника.Представление;
						стрОтбор.ТипЗначения = стрКолонкаИсточника.ТипЗначенияБезNULL;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если фЗаполнитьСортировки Тогда
		Если ТекущаяНастройка.СхемаОформления = Ложь Тогда
			тзЗагружаемыеСортировки = ТекущаяНастройка.СортировкиПоУмолчанию;
		Иначе
			тзЗагружаемыеСортировки = ТекущаяНастройка.СхемаОформления.Сортировки;
		КонецЕсли;
		
		Индекс = 0;
		Для Каждого стрЗагружаемаяСортировка Из тзЗагружаемыеСортировки Цикл
			стрСортировка = ТекущаяНастройка.Сортировки.Найти(стрЗагружаемаяСортировка.Имя, "Имя");
			Если стрСортировка = Неопределено Тогда Продолжить; КонецЕсли;
			
			ТекущийИндекс = ТекущаяНастройка.Сортировки.Индекс(стрСортировка);
			Если ТекущийИндекс <> Индекс Тогда
				ТекущаяНастройка.Сортировки.Сдвинуть(стрСортировка, Индекс - ТекущийИндекс);
			КонецЕсли;
			
			стрСортировка.Использование = Истина;
			стрСортировка.Направление = стрЗагружаемаяСортировка.Направление;
			
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПодвал Тогда
		Дерево.Подвал = Истина;
	КонецЕсли;
	
	НастроитьОтображениеОтборов();
КонецПроцедуры

Функция ЗагрузитьСхемуОформленияЖурнала()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставКолонок,
	|   СкрытыеПоказатели,
	|   ПорядокКолонок,
	|   Сортировки
	|ИЗ
	|	РегистрСведений.новаОформлениеЖурналов
	|ГДЕ
	|	Схема = &Схема
	| И Журнал = &Журнал
	| И Настройка = &Настройка
	|";
	
	Запрос.УстановитьПараметр("Схема", ПараметрыСеанса.новаТекущаяСхемаОформленияЖурналов);
	Запрос.УстановитьПараметр("Журнал", ИмяЖурнала);
	Запрос.УстановитьПараметр("Настройка", ТекущаяНастройка.Имя);
	
	тзСхема = Запрос.Выполнить().Выгрузить();
	Если тзСхема.Количество() = 0 Тогда Возврат Ложь; КонецЕсли;
	Если тзСхема[0].СоставКолонок <> ПолучитьКлючСхемыОформления(ТекущаяНастройка) Тогда Возврат Ложь; КонецЕсли;
	
	мсВыбранныеПоказатели = ТекущаяНастройка.СтруктураКолонок.ВыгрузитьКолонку("Имя");
	стрСкрытыеПоказатели = СтрЗаменить(тзСхема[0].СкрытыеПоказатели, ",", Символы.ПС);
	КоличествоСкрытыхПоказателей = СтрЧислоСтрок(стрСкрытыеПоказатели);
	Для ъ = 1 По КоличествоСкрытыхПоказателей Цикл
		СкрытыйПоказатель = СтрПолучитьСтроку(стрСкрытыеПоказатели, ъ);
		
		Индекс = мсВыбранныеПоказатели.Найти(СкрытыйПоказатель);
		Если Индекс = Неопределено Тогда Продолжить; КонецЕсли;
		мсВыбранныеПоказатели.Удалить(Индекс);
	КонецЦикла;
	
	мсПорядокКолонок = Новый Массив;
	стрПорядокКолонок = СтрЗаменить(тзСхема[0].ПорядокКолонок, ",", Символы.ПС);
	КоличествоКолонок = СтрЧислоСтрок(стрПорядокКолонок);
	Для ъ = 1 По КоличествоКолонок Цикл
		мсПорядокКолонок.Добавить(СтрПолучитьСтроку(стрПорядокКолонок, ъ));
	КонецЦикла;
	
	тзЗагруженныеСортировки = ТекущаяНастройка.СортировкиПоУмолчанию.СкопироватьКолонки();
	стрСортировки = СтрЗаменить(тзСхема[0].Сортировки, ",", Символы.ПС);
	КоличествоСортировок = СтрЧислоСтрок(стрСортировки);
	Для ъ = 1 По КоличествоСортировок Цикл
		стрСортировка = СтрЗаменить(СтрПолучитьСтроку(стрСортировки, ъ), " ", Символы.ПС);
		
		стрЗагруженнаяСортировка = тзЗагруженныеСортировки.Добавить();
		стрЗагруженнаяСортировка.Имя = СтрПолучитьСтроку(стрСортировка, 1);
		стрЗагруженнаяСортировка.Направление = СтрПолучитьСтроку(стрСортировка, 2);
	КонецЦикла;
	
	Возврат Новый Структура("Схема, Показатели, ПорядокКолонок, Сортировки",
		ПараметрыСеанса.новаТекущаяСхемаОформленияЖурналов,
		мсВыбранныеПоказатели,
		мсПорядокКолонок,
		тзЗагруженныеСортировки);
КонецФункции

Процедура ДобавитьКолонкуВИерархию(Источник, Группировка, ИмяКолонки, РазмерИерархии)
	КолонкаИерархии = Дерево.Колонки[ИмяКолонки];
	КолонкаИерархии.ОтображатьИерархию = Истина;
	Если ТекущаяНастройка.ШиринаИерархии <> Неопределено Тогда
		КолонкаИерархии.Ширина = ТекущаяНастройка.ШиринаИерархии;
	КонецЕсли;
	
	Дерево.Колонки.Сдвинуть(КолонкаИерархии, РазмерИерархии - Дерево.Колонки.Индекс(КолонкаИерархии));
	КолонкаИерархии.Положение = ?(РазмерИерархии = 0, ПоложениеКолонки.НоваяКолонка, ПоложениеКолонки.НаСледующейСтроке);
	КолонкаИерархии.ОтображатьВШапке = РазмерИерархии = 0;
	КолонкаИерархии.ОтображатьВПодвале = РазмерИерархии = 0;
	КолонкаИерархии.Видимость = Истина;
	КолонкаИерархии.ТекстШапки = "";
	КолонкаИерархии.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложение.Право;
	
	ИмяФлажка = ТекущаяНастройка.ФлажкиГруппировок[ИмяКолонки];
	Если ИмяФлажка <> Неопределено Тогда
		КолонкаИерархии.ДанныеФлажка = ИмяФлажка;
		ПодготовитьРедактированиеКолонки(ИмяФлажка, Источник);
		КолонкаИерархии.ТолькоПросмотр = Ложь;
		КолонкаИерархии.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	КонецЕсли;
	
	Строки = тзКолонкиИерархии.НайтиСтроки(Новый Структура("Источник, Колонка", Источник, Группировка));
	Если Строки.Количество() = 0 Тогда
		стрКолонкаИерархии = тзКолонкиИерархии.Добавить();
		стрКолонкаИерархии.Источник = Источник;
		стрКолонкаИерархии.Колонка = ИмяКолонки;
	Иначе
		стрКолонкаИерархии = Строки[0];
	КонецЕсли;
	стрКолонкаИерархии.Группировки.Добавить(Группировка);
	
	Если Группировка <> NULL Тогда
		ъ = стрКолонкаИерархии.Группировки.Найти(NULL);
		Если ъ <> Неопределено Тогда стрКолонкаИерархии.Группировки.Удалить(ъ); КонецЕсли;
	КонецЕсли;
	
	РазмерИерархии = РазмерИерархии + 1;
КонецПроцедуры	

// Обработка события "Нажатие" кнопки выбора настройки журнала.
//
// Параметры:
//  КнопкаВыбораНастройки <КнопкаКоманднойПанели>
//
Процедура НажатиеКнопкиВыбораНастройки(КнопкаВыбораНастройки) Экспорт
	ВыбратьНастройку(КнопкаВыбораНастройки.Имя);
КонецПроцедуры

Функция ПолучитьКлючСтроки(Строка)
	мсКлюч = Новый Массив;
	
	текСтрока = Строка;
	Пока текСтрока <> Неопределено Цикл
		стКлюч = Новый Структура("Источник");
		КлючСтроки = текСтрока.Источник.КонструкторДанных.Ключи[текСтрока.Группировка];
		Для Каждого ЭлПоле Из КлючСтроки Цикл
			стКлюч.Вставить(ЭлПоле.Ключ);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(стКлюч, текСтрока);
		
		мсКлюч.Вставить(0, стКлюч);
		
		текСтрока = текСтрока.Родитель;
	КонецЦикла;
	
	Возврат мсКлюч;
КонецФункции

// Обработчик события "ПередСворачиванием" табличного поля журнала.
//
// Параметры:
//  Строка <СтрокаДереваЗначений>: сворачиваемая строка.
//
Процедура ПередСворачиваниемДерева(Строка) Экспорт
	Если Не ЭтоОбновление Тогда
		Для Каждого ПодчСтрока Из Строка.Строки Цикл
			Дерево.Свернуть(ПодчСтрока);
		КонецЦикла;
		
		УдаляемыйКлюч = ПолучитьКлючСтроки(Строка);
		ТекущаяНастройка.РаскрытыеВетки.Удалить(ЗначениеВСтрокуВнутр(УдаляемыйКлюч));
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьДанныеВДерево(СтрокиДерева, СтрокиИсточников)
	Для Каждого стрИсточник Из СтрокиИсточников Цикл
		дзДанные = ПолучитьДанныеИсточника(стрИсточник, СтрокиДерева.Родитель);
		дзДанные.Колонки.Добавить("Источник");
		ДобавитьКолонкиВДеревоДанных(дзДанные.Колонки);
		ДобавитьДанныеВДеревоДанных(СтрокиДерева, дзДанные, стрИсточник.Источник, стрИсточник.Строки.Количество() > 0);
	КонецЦикла;
КонецПроцедуры

// Обработчик события "ПередРазворачиванием" табличного поля журнала.
//
// Параметры:
//  Строка <СтрокаДереваЗначений>: сворачиваемая строка.
//
Процедура ПередРазворачиваниемДерева(Строка) Экспорт
	Если Не ЭтоОбновление Тогда
		НовыйКлюч = ПолучитьКлючСтроки(Строка);
		ТекущаяНастройка.РаскрытыеВетки.Вставить(ЗначениеВСтрокуВнутр(НовыйКлюч), НовыйКлюч);
	КонецЕсли;
	
	Если Строка.Строки.Количество() = 1 Тогда
		Если Строка.Строки[0].Источник = Неопределено Тогда
			Строка.Строки.Очистить();
			
			стрИсточник = ТекущаяНастройка.ДеревоИсточниковДанных.Строки.Найти(Строка.Источник, "Источник", Истина);
			Если стрИсточник = Неопределено Тогда Возврат; КонецЕсли;
			
			ПодготовитьИсточникиДанных(стрИсточник.Строки);
			ЗагрузитьДанныеВДерево(Строка.Строки, стрИсточник.Строки);
			
			Дерево.РазрешитьНачалоПеретаскивания = фИсточникПеретаскивания;
			Дерево.РазрешитьПеретаскивание = фПриемникПеретаскивания;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Добавляет текущий установленный пользователем отбор в историю отборов.
//
Процедура ДобавитьТекущийОтборВИсторию() Экспорт
	ПредставлениеОтборов = новаОтборы.ПолучитьПредставлениеОтборов(ТекущаяНастройка.Отборы);
	Если ПредставлениеОтборов = "" Тогда Возврат; КонецЕсли;
	
	стрОтбор = ТекущаяНастройка.ИсторияОтборов.Найти(ПредставлениеОтборов, "Представление");
	Если стрОтбор <> Неопределено Тогда Возврат; КонецЕсли;
	
	стрОтбор = ТекущаяНастройка.ИсторияОтборов.Вставить(0);
	стрОтбор.Отборы = новаОтборы.СкопироватьОтборы(ТекущаяНастройка.Отборы);
	стрОтбор.Представление = ПредставлениеОтборов;
	
	Если ТекущаяНастройка.ИсторияОтборов.Количество() > 10 Тогда
		ТекущаяНастройка.ИсторияОтборов.Удалить(ТекущаяНастройка.ИсторияОтборов[ТекущаяНастройка.ИсторияОтборов.Количество() - 1]);
	КонецЕсли;
	
	СформироватьИсториюОтборов();
КонецПроцедуры

Процедура СформироватьИсториюОтборов()
	ТекущаяНастройка.ИсторияОтборов.ЗаполнитьЗначения(Неопределено, "Кнопка");
	
	Если НеИмеетСтандартныхКнопок Тогда Возврат; КонецЕсли;
	
	Для Каждого Кнопка Из КнопкаИсторияОтборов.Кнопки Цикл
		новаРасширениеФорм.ОчиститьОбработчикиСобытия(ФормаЖурнала, Кнопка, "Нажатие");
	КонецЦикла;
	
	КнопкаИсторияОтборов.Кнопки.Очистить();	
	
	Для Каждого стрИстория Из ТекущаяНастройка.ИсторияОтборов Цикл
		Кнопка = КнопкаИсторияОтборов.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Действие, стрИстория.Представление);
		Кнопка.Подсказка = стрИстория.Представление;
		Кнопка.Пояснение = Кнопка.Подсказка;
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала,
			Кнопка,
			"Нажатие",
			0,
			ЖурналНаФорме + ".УстановитьОтборИзИстории(Параметр1);");
			
		стрИстория.Кнопка = Кнопка;
	КонецЦикла;
КонецПроцедуры

// Устанавливает текущим отбором один из истории отборов.
//
// Параметры:
//  Кнопка <КнопкаКоманднойПанели>: кнопка отбора истории.
//
Процедура УстановитьОтборИзИстории(Кнопка) Экспорт
	стрИстория = ТекущаяНастройка.ИсторияОтборов.Найти(Кнопка, "Кнопка");
	Если стрИстория = Неопределено Тогда Возврат; КонецЕсли;
	новаОтборы.ПеренестиОтборы(ТекущаяНастройка.Отборы, стрИстория.Отборы); 
	
	НастроитьОтображениеОтборов();
	Обновить();
КонецПроцедуры

// Возвращает все подчиненные строки для массива строк дерева журнала.
//
// Параметры:
//  ИсходныеСтроки <Массив(<СтрокаДереваЗначений>)>
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПодчиненныхСтрок]>
//
Функция ПолучитьСтрокиНижнегоУровня(ИсходныеСтроки) Экспорт
	тзИсходныеСтроки = Новый ТаблицаЗначений;
	тзИсходныеСтроки.Колонки.Добавить("Строка");
	тзИсходныеСтроки.Колонки.Добавить("Уровень");
	
	Для Каждого ИсхСтрока Из ИсходныеСтроки Цикл
		Если ИсхСтрока = Неопределено Тогда Продолжить; КонецЕсли;
		
		стрИсхСтрока = тзИсходныеСтроки.Добавить();
		стрИсхСтрока.Строка = ИсхСтрока;
		стрИсхСтрока.Уровень = ИсхСтрока.Уровень();
	КонецЦикла;
	
	тзИсходныеСтроки.Сортировать("Уровень УБЫВ");
	мсИсходныеСтроки = Новый Массив;
	НаибольшийУровень = тзИсходныеСтроки[0].Уровень;
	Для Каждого ИсхСтрока Из тзИсходныеСтроки Цикл
		Если ИсхСтрока.Уровень <> НаибольшийУровень Тогда Прервать; КонецЕсли;
		
		мсИсходныеСтроки.Добавить(ИсхСтрока.Строка);
	КонецЦикла;
	
	мсИтоговыеСтроки = Новый Массив;
	Для Каждого Строка Из мсИсходныеСтроки Цикл
		Если Строка.Группировка = NULL Тогда
			мсИтоговыеСтроки.Добавить(Строка);
		Иначе
			Строки = Строка.Строки.НайтиСтроки(Новый Структура("Группировка", NULL), Истина);			
			Для Каждого ДетальнаяСтрока Из Строки Цикл
				мсИтоговыеСтроки.Добавить(ДетальнаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат мсИтоговыеСтроки;
КонецФункции

// Обработчик события "НачалоПеретаскивания" табличного поля журнала.
//
// Параметры:
//  ПараметрыПеретаскивания <ПараметрыПеретаскивания>
//  СтандартнаяОбработка    <Булево>
//
Процедура НачалоПеретаскиванияДерева(ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		мсСтроки = Новый Массив;
		мсСтроки.Добавить(ПараметрыПеретаскивания.Значение);
	Иначе
		мсСтроки = ПараметрыПеретаскивания.Значение;
	КонецЕсли;	
	
	мсСтрокиДляПеретаскивания = ПолучитьСтрокиНижнегоУровня(мсСтроки);
	
	Если мсСтрокиДляПеретаскивания.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИсточникПеретаскивания = мсСтрокиДляПеретаскивания[0].Источник;
	
	Для Каждого Строка Из мсСтрокиДляПеретаскивания Цикл
		Если Строка.Источник <> ИсточникПеретаскивания Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ИсточникПеретаскивания.ПараметрыЖурнала.Свойство("ИсточникПеретаскивания") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	стОбъектПеретаскивания = ОбработатьСобытие(ИсточникПеретаскивания, "НачатьПеретаскивание", мсСтрокиДляПеретаскивания);
	Если стОбъектПеретаскивания = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	стОбъектПеретаскивания.Вставить("Источник", ИсточникПеретаскивания);
	стОбъектПеретаскивания.Вставить("ФормаПеретаскивания", ФормаЖурнала);
	
	ПараметрыПеретаскивания.Значение = стОбъектПеретаскивания;
КонецПроцедуры

// Обработчик события "ПроверкаПеретаскивания" табличного поля журнала.
//
// Параметры:
//  ПараметрыПеретаскивания <ПараметрыПеретаскивания>
//  СтандартнаяОбработка    <Булево>
//  Строка                  <СтрокаДереваЗначений>
//  Колонка                 <КолонкаДереваЗначений>
//
Процедура ПроверкаПеретаскиванияДерева(ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка) Экспорт
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Если ПараметрыПеретаскивания.Значение.Свойство("ФормаПеретаскивания")  Тогда
			Если ПараметрыПеретаскивания.Значение.ФормаПеретаскивания <> ФормаЖурнала Тогда
				СтандартнаяОбработка = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
			Если Не Источник.ПараметрыЖурнала.Свойство("ПриемникПеретаскивания") Тогда Продолжить; КонецЕсли;
					
			СтандартнаяОбработка = Не ОбработатьСобытие(Источник, "ПроверитьВозможностьПеретаскивания", ПараметрыПеретаскивания.Значение, Неопределено);
			Если Не СтандартнаяОбработка Тогда Возврат; КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Строка.Источник = Неопределено Тогда Возврат; КонецЕсли;
	Если Не Строка.Источник.ПараметрыЖурнала.Свойство("ПриемникПеретаскивания") Тогда Возврат; КонецЕсли;
	
	СтандартнаяОбработка = Не ОбработатьСобытие(Строка.Источник, "ПроверитьВозможностьПеретаскивания", ПараметрыПеретаскивания.Значение, Строка);
КонецПроцедуры

// Обработчик события "Перетаскивание" табличного поля журнала.
//
// Параметры:
//  ПараметрыПеретаскивания <ПараметрыПеретаскивания>
//  СтандартнаяОбработка    <Булево>
//  Строка                  <СтрокаДереваЗначений>
//  Колонка                 <КолонкаДереваЗначений>
//
Процедура ПеретаскиваниеДерева(ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка) Экспорт
	Если Строка = Неопределено Тогда
		ПриемникПеретаскивания = Неопределено;
		Для Каждого Источник Из ТекущаяНастройка.ИсточникиДанных Цикл
			Если Не Источник.ПараметрыЖурнала.Свойство("ПриемникПеретаскивания") Тогда Продолжить; КонецЕсли;
			
			Если ОбработатьСобытие(Источник, "ПеретаскиваниеОкончено", ПараметрыПеретаскивания.Значение, Неопределено) = Истина Тогда
				ПриемникПеретаскивания = Источник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПриемникПеретаскивания = Неопределено Тогда Возврат; КонецЕсли;
	Иначе
		ПриемникПеретаскивания = Строка.Источник;
		Если не ОбработатьСобытие(ПриемникПеретаскивания, "ПеретаскиваниеОкончено", ПараметрыПеретаскивания.Значение, Строка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИсточникПеретаскивания = ПараметрыПеретаскивания.Значение.Источник;
	ЖурналИсточник = ИсточникПеретаскивания.Журнал;
	ЖурналПриемник = ПриемникПеретаскивания.Журнал;
	
	Если ПараметрыПеретаскивания.Значение.Свойство("УдаляемыеСтрокиИсточника") Тогда
		Для Каждого УдаляемаяСтрока Из ПараметрыПеретаскивания.Значение.УдаляемыеСтрокиИсточника Цикл
			Попытка
				Родитель = УдаляемаяСтрока.Родитель;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если Родитель = Неопределено Тогда
				Строки = ЖурналИсточник.Дерево.Значение.Строки;
			Иначе
				Строки = Родитель.Строки;
			КонецЕсли;
			Строки.Удалить(УдаляемаяСтрока);
			ЖурналИсточник.УдалитьПустуюГруппуСтрок(Родитель);
		КонецЦикла;
	Иначе
		Если ИсточникПеретаскивания.ПараметрыЖурнала.Свойство("ОбновлятьПослеПеретаскивания") Тогда
			Если ИсточникПеретаскивания.ПараметрыЖурнала.ОбновлятьПослеПеретаскивания Тогда
				ЖурналИсточник.Обновить();
			КонецЕсли;
		Иначе
			//ЖурналИсточник.Обновить();	
		КонецЕсли;
	КонецЕсли;
	
	Если ЖурналПриемник <> ЖурналИсточник Тогда
		Если ПриемникПеретаскивания.ПараметрыЖурнала.Свойство("ОбновлятьПослеПеретаскивания") Тогда
			Если ПриемникПеретаскивания.ПараметрыЖурнала.ОбновлятьПослеПеретаскивания Тогда
				ЖурналПриемник.Обновить();
			КонецЕсли;
		Иначе
			//ЖурналПриемник.Обновить();	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Удаляет строку из дерева журнала вместе с ее родителями. Строки-родители удаляются только если
// удаляемая строка была в них едиственной строкой.
//
// Параметры:
//  УдаляемаяСтрока <СтрокаДереваЗначений>
//
Процедура УдалитьПустуюГруппуСтрок(УдаляемаяСтрока) Экспорт
	Если УдаляемаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	Если УдаляемаяСтрока.Строки.Количество() > 0 Тогда Возврат; КонецЕсли;
	
	Родитель = УдаляемаяСтрока.Родитель;
	Если Родитель = Неопределено Тогда
		Строки = Дерево.Значение.Строки;
	Иначе
		Строки = Родитель.Строки;
	КонецЕсли;
	Строки.Удалить(УдаляемаяСтрока);
	УдалитьПустуюГруппуСтрок(Родитель);
КонецПроцедуры

// Обработчик события "Выбор" табличного поля журнала.
//
// Параметры:
//  ВыбраннаяСтрока      <СтрокаДереваЗначений>
//  Колонка              <КолонкаДереваЗначений>
//  СтандартнаяОбработка <Булево>
//
Процедура ВыборДерева(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) Экспорт
	Если Колонка.Имя = "Иерархия" Тогда Возврат; КонецЕсли;
	
	ОбработатьСобытие(ВыбраннаяСтрока.Источник, "Выбор", ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
КонецПроцедуры

// Оповещает источник данных журнала о наступлении события.
//
// Параметры:
//  Источник  <ОбработкаОбъект[ИсточникДанныхЖурнала]>
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано источником данных.
//
Функция ОбработатьСобытие(Источник, Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Дерево <> Неопределено Тогда
		ТекущиеДанные = Дерево.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.Источник <> Источник Тогда
				ТекущиеДанные = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Источник.ОбработатьСобытие(Событие, Параметр1, Параметр2, Параметр3);
КонецФункции

// Оповещает все источники данных журнала о наступлении события.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано источником данных.
//
Функция ОповеститьВсеИсточники(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	ТекущиеДанные = Неопределено;
	
	ОбщийРезультат = Неопределено;
	Для Каждого стрНастройка Из тзНастройки Цикл
		Для Каждого Источник Из стрНастройка.ИсточникиДанных Цикл
			Результат = Источник.ОбработатьСобытие(Событие, Параметр1, Параметр2, Параметр3);
			Если Результат <> Неопределено Тогда
				ОбщийРезультат = Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбщийРезультат;
КонецФункции

// Обработчик события "ПриНачалеИзменения" табличного поля журнала.
//
// Параметры:
//  Отказ <Булево>
//
Процедура НачалоИзмененияДерева(Отказ) Экспорт
	ТекущийИсточник = Дерево.ТекущиеДанные.Источник;
	
	Если ОбработатьСобытие(ТекущийИсточник, "НачалоИзменения", Дерево.ТекущиеДанные, Дерево.ТекущаяКолонка.Имя) = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Обработчик события "ПриОкончанииРедактирования" табличного поля журнала.
//
// Параметры:
//  НоваяСтрока          <Булево>
//  ОтменаРедактирования <Булево>
//  Отказ                <Булево>
//
Процедура ОкончаниеРедактированияДерева(НоваяСтрока, ОтменаРедактирования, Отказ) Экспорт
	Если Дерево.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущийИсточник = Дерево.ТекущиеДанные.Источник;
	
	ОкончитьРедактированиеСтроки(Дерево.ТекущиеДанные);
		
	ОбработатьСобытие(ТекущийИсточник, "ОкончаниеРедактирования", Дерево.ТекущиеДанные);
КонецПроцедуры

Процедура ОчиститьВведенныеДанные(Источник) Экспорт
	Если ТекущаяНастройка = Неопределено Тогда Возврат; КонецЕсли;
	
	тзВведенныеДанные = ТекущаяНастройка.ВведенныеДанныеИсточников[Источник];
	Если тзВведенныеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	тзВведенныеДанные.Очистить();
КонецПроцедуры

// Завершает редактирование строки журнала. Внесенные изменения будут учтены при обновлении журнала.
//
// Параметры:
//  Строка   <СтрокаДереваЗначений>
//  Источник <ОбработкаОбъект[ИсточникДанныхЖурнала]>
//
Процедура ОкончитьРедактированиеСтроки(Строка, Источник = Неопределено) Экспорт
	Если Источник = Неопределено Тогда
		ТекущийИсточник = Строка.Источник;
	Иначе
		ТекущийИсточник = Источник;
	КонецЕсли;
	
	тзВведенныеДанные = ТекущаяНастройка.ВведенныеДанныеИсточников[ТекущийИсточник];
	Если тзВведенныеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	стКлючТекущейГруппировки = ТекущийИсточник.КонструкторДанных.Ключи[Строка.Группировка];
	Если стКлючТекущейГруппировки = Неопределено Тогда Возврат; КонецЕсли;
	
	стТест = Новый Структура("Источник", Истина);
	ЗаполнитьЗначенияСвойств(стТест, Строка);
	Если стТест.Источник <> Истина Тогда
		текСтрока = Строка.Родитель;
		Пока текСтрока <> Неопределено Цикл
			стКлюч = текСтрока.Источник.КонструкторДанных.Ключи[текСтрока.Группировка];
			Для Каждого ЭлКлюч Из стКлюч Цикл
				стКлючТекущейГруппировки.Вставить(ЭлКлюч.Ключ);
			КонецЦикла;
			
			текСтрока = текСтрока.Родитель;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлКлючевоеПоле Из стКлючТекущейГруппировки Цикл
		Если тзВведенныеДанные.Колонки.Найти(ЭлКлючевоеПоле.Ключ) = Неопределено Тогда
			тзВведенныеДанные.Колонки.Добавить(ЭлКлючевоеПоле.Ключ);
			тзВведенныеДанные.Индексы.Добавить(ЭлКлючевоеПоле.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	стТекущийКлюч = Новый Структура("Группировка", Строка.Группировка);
	Для Каждого ЭлКлючевоеПоле Из стКлючТекущейГруппировки Цикл
		стТекущийКлюч.Вставить(ЭлКлючевоеПоле.Ключ);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(стТекущийКлюч, Строка);
	Строки = тзВведенныеДанные.НайтиСтроки(стТекущийКлюч);
	Если Строки.Количество() = 0 Тогда
		стрДанные = тзВведенныеДанные.Добавить();
	Иначе
		стрДанные = Строки[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(стрДанные, Строка);
	стТекущийКлюч.Вставить("Источник", ТекущийИсточник);
	стрДанные.Ключ = стТекущийКлюч;
КонецПроцедуры

// Отменяет редактирование строки журнала, внесенные изменения сбрасываются.
//
// Параметры:
//  Строка <СтрокаДереваЗначений>
//
Процедура ОтменитьРедактированиеСтроки(Строка) Экспорт
	ТекущийИсточник = Строка.Источник;
	
	тзВведенныеДанные = ТекущаяНастройка.ВведенныеДанныеИсточников[ТекущийИсточник];
	стКлючТекущейГруппировки = ТекущийИсточник.КонструкторДанных.Ключи[Строка.Группировка];
	Если стКлючТекущейГруппировки = Неопределено Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлКлючевоеПоле Из стКлючТекущейГруппировки Цикл
		Если тзВведенныеДанные.Колонки.Найти(ЭлКлючевоеПоле.Ключ) = Неопределено Тогда
			тзВведенныеДанные.Колонки.Добавить(ЭлКлючевоеПоле.Ключ);
			тзВведенныеДанные.Индексы.Добавить(ЭлКлючевоеПоле.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	стТекущийКлюч = Новый Структура("Группировка", Строка.Группировка);
	Для Каждого ЭлКлючевоеПоле Из стКлючТекущейГруппировки Цикл
		стТекущийКлюч.Вставить(ЭлКлючевоеПоле.Ключ);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(стТекущийКлюч, Строка);
	Строки = тзВведенныеДанные.НайтиСтроки(стТекущийКлюч);
	Если Строки.Количество() > 0 Тогда
		тзВведенныеДанные.Удалить(Строки[0]);
	КонецЕсли;
КонецПроцедуры

// Устанавливает текст подвала колонок журнала.
//
// Параметры:
//  Источник <ОбработкаОбъект[ИсточникДанныхЖурнала]>
//  стПодвал <Структура>
//
Процедура УстановитьПодвал(Источник, стПодвал) Экспорт
	Если ТекущаяНастройка.ДеревоИсточниковДанных.Строки[0].Источник <> Источник Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлПодвал Из стПодвал Цикл
		Дерево.Колонки[ЭлПодвал.Ключ].ТекстПодвала = ЭлПодвал.Значение;
	КонецЦикла;
КонецПроцедуры

// Удаляет все колонки настройки журнала.
//
Процедура ОчиститьКолонки() Экспорт
	Для Каждого стрНастройка Из тзНастройки Цикл
		стрНастройка.СтруктураКолонок.Очистить();
		стрНастройка.ВыбранныеПоказатели = Неопределено;
		стрНастройка.Отборы = Неопределено;
	КонецЦикла;
	
	Для Каждого стрНастройка Из тзНастройки Цикл
		Для Каждого Источник Из стрНастройка.ИсточникиДанных Цикл
			ОбработатьСобытие(Источник, "Инициализация");			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Производит повторную инициализацию журнала.
//
Процедура ИнициализироватьПовторно() Экспорт
	ИмяТекущейНастройки = ТекущаяНастройка.Имя;
	ОчиститьМеню();
	ТекущаяНастройка = Неопределено;
	ВыбратьНастройку(ИмяТекущейНастройки);
КонецПроцедуры

// Возвращает строку-описатель состава колонок журнала.
//
// Параметры:
//  Настройка <СтрокаТаблицыЗначений[НастройкаЖурнала]>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьКлючСхемыОформления(Настройка) Экспорт
	Ключ = "";
	Для Каждого стрКолонка Из Настройка.СтруктураКолонок Цикл
		Если стрКолонка.НеВходитВСхемуОформления Тогда Продолжить; КонецЕсли;
		
		Ключ = Ключ + ?(Ключ = "", "", ",") + стрКолонка.Имя;
	КонецЦикла;
	
	Возврат Ключ;
КонецФункции

// Устанавливает текст заголовка журнала.
//
// Параметры:
//  Текст <Строка>
//
Процедура УстановитьТекстЗаголовка(Текст) Экспорт
	Если РамкаЖурнала = Неопределено Тогда Возврат; КонецЕсли;
	
	РамкаЖурнала.Заголовок = Заголовок + ?(ПустаяСтрока(Текст), "", "     ") + Текст + ?(ПустаяСтрока(Текст), "", "     ");
КонецПроцедуры

// Устанавливает представление действия журнала. Если указана пустая строка, кнопка действия не отображается.
//
// Параметры:
//  НовыйТекст <Строка>
//
Процедура УстановитьТекстДействия(НовыйТекст) Экспорт
	Если ПустаяСтрока(НовыйТекст) Тогда
		Если КнопкаДействия <> Неопределено Тогда
			КнопкаДействия.Видимость = Ложь;
		КонецЕсли;
	Иначе
		ШиринаКнопки = новаОбщиеПроцедуры.ШиринаТекста(НовыйТекст) + 10;
		
		Если КнопкаДействия = Неопределено Тогда
			КнопкаДействия = новаРасширениеФорм.ДобавитьЭлементНаФорму(ФормаЖурнала, Тип("Кнопка"), ПанельЖурнала, ЭтотОбъект);
			КнопкаДействия.Ширина = ШиринаКнопки;
			КнопкаДействия.Лево = КоманднаяПанельЖурнала.Лево + КоманднаяПанельЖурнала.Ширина - ШиринаКнопки - 1;
			КнопкаДействия.Верх = КоманднаяПанельЖурнала.Верх + 2;
			КнопкаДействия.Высота = 19;
			
			КнопкаДействия.УстановитьПривязку(ГраницаЭлементаУправления.Лево, КонтейнерЖурнала, ГраницаЭлементаУправления.Право);
			КнопкаДействия.УстановитьПривязку(ГраницаЭлементаУправления.Право, КонтейнерЖурнала, ГраницаЭлементаУправления.Право);
			КнопкаДействия.УстановитьПривязку(ГраницаЭлементаУправления.Верх, КонтейнерЖурнала, ГраницаЭлементаУправления.Верх);
			КнопкаДействия.УстановитьПривязку(ГраницаЭлементаУправления.Низ, КонтейнерЖурнала, ГраницаЭлементаУправления.Верх);
			
			новаРасширениеФорм.УстановитьОбработчикСобытия(ФормаЖурнала, КнопкаДействия,
				"Нажатие",
				0,
				ЖурналНаФорме + ".ВыполнитьДействие();");
		КонецЕсли;
		
		КнопкаДействия.Ширина = ШиринаКнопки;
		КнопкаДействия.Лево = КоманднаяПанельЖурнала.Лево + КоманднаяПанельЖурнала.Ширина - ШиринаКнопки - 1;
		
		КнопкаДействия.Видимость = Истина;
		КнопкаДействия.Заголовок = НовыйТекст;
		Если ЦветДействия <> Неопределено Тогда
			КнопкаДействия.ЦветФонаКнопки = ЦветДействия;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Нажатие" кнопки произвольного действия.
//
Процедура ВыполнитьДействие() Экспорт
	ОповеститьВсеИсточники("ВыполнитьДействие");	
КонецПроцедуры

Процедура ЗаблокироватьДоступность() Экспорт
	КоличествоБлокировокДоступности = КоличествоБлокировокДоступности + 1;
	
	Дерево.Доступность = Ложь;
	Если КоманднаяПанельЖурнала <> Неопределено Тогда
		КоманднаяПанельЖурнала.Доступность = Ложь;
	КонецЕсли;
	Если РамкаЖурнала <> Неопределено Тогда
		РамкаЖурнала.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура РазблокироватьДоступность() Экспорт
	КоличествоБлокировокДоступности = КоличествоБлокировокДоступности - 1;
	Если КоличествоБлокировокДоступности < 0 Тогда
		КоличествоБлокировокДоступности = 0;
	КонецЕсли;
	
	Если КоличествоБлокировокДоступности > 0 Тогда Возврат; КонецЕсли;
	
	Дерево.Доступность = Истина;
	Если КоманднаяПанельЖурнала <> Неопределено Тогда
		КоманднаяПанельЖурнала.Доступность = Истина;
	КонецЕсли;
	Если РамкаЖурнала <> Неопределено Тогда
		РамкаЖурнала.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

// Устанавливает признак ВыбиратьИзБазы для последней добавленной колонки.
// Если установлен этот признак, то колонка будет выбираться из базы вне
// зависимости от её видимости.
Процедура УстановитьПризнакВыбиратьИзБазы() Экспорт;
	стрНастройка = тзНастройки[тзНастройки.Количество() - 1];
	стрКолонка = стрНастройка.СтруктураКолонок[стрНастройка.СтруктураКолонок.Количество() - 1];
	стрКолонка.ВыбиратьИзБазы = Истина;
КонецПроцедуры

// Возвращает массив выбранных из базы показателей журнала, который состоит
// из массива ВыбранныхПоказателей настройки + те поля которые обязательны для выбора
//
// Параметры:
//  Настройка <СтрокаТаблицыЗначений[НастройкаЖурнала]>
//
// Возвращаемое значение:
//  <Массив>
//
Функция СформироватьВыбранныеПоказатели(Настройка) Экспорт
	
	МассивПоказателей = Новый Массив;
	
	Для каждого Элемент Из Настройка.ВыбранныеПоказатели Цикл
		МассивПоказателей.Добавить(Элемент);
	КонецЦикла;
	
	Для Каждого стрКолонка Из Настройка.СтруктураКолонок Цикл
		Если Не стрКолонка.ВыбиратьИзБазы Тогда Продолжить; КонецЕсли;
		Если МассивПоказателей.Найти(стрКолонка.Имя) = Неопределено Тогда
			МассивПоказателей.Добавить(стрКолонка.Имя);
		КонецЕсли; 
	КонецЦикла;
		
	Возврат МассивПоказателей;
	
КонецФункции

МножественныйВыбор = Ложь;
НеИмеетСтандартныхКнопок = Ложь;
АвтоОбновление = Истина;
ПерейтиККонцуСписка = Ложь;

тзНастройки = Новый ТаблицаЗначений;
тзНастройки.Колонки.Добавить("Имя");
тзНастройки.Колонки.Добавить("Представление");
тзНастройки.Колонки.Добавить("ДеревоИсточниковДанных");
тзНастройки.Колонки.Добавить("ИсточникиДанных");
тзНастройки.Колонки.Добавить("СтруктураКолонок");
тзНастройки.Колонки.Добавить("ПорядокКолонок");
тзНастройки.Колонки.Добавить("ВыбранныеПоказатели");
тзНастройки.Колонки.Добавить("Отборы");
тзНастройки.Колонки.Добавить("ИсторияОтборов");
тзНастройки.Колонки.Добавить("Сортировки");
тзНастройки.Колонки.Добавить("СортировкиПоУмолчанию");
тзНастройки.Колонки.Добавить("РаскрытыеВетки");
тзНастройки.Колонки.Добавить("ЕстьИнтерфейсВводаПериода", Новый ОписаниеТипов("Булево"));
тзНастройки.Колонки.Добавить("НачалоПериода");
тзНастройки.Колонки.Добавить("КонецПериода");
тзНастройки.Колонки.Добавить("ДобавленныеКнопкиМеню", Новый ОписаниеТипов("Массив"));
тзНастройки.Колонки.Добавить("Инструменты");
тзНастройки.Колонки.Добавить("ШиринаИерархии");
тзНастройки.Колонки.Добавить("ТаблицыДанных", Новый ОписаниеТипов("Соответствие"));
тзНастройки.Колонки.Добавить("ВведенныеДанныеИсточников");
тзНастройки.Колонки.Добавить("ДополнительныеДанныеИсточников");
тзНастройки.Колонки.Добавить("КонтекстныеМенюИсточников");
тзНастройки.Колонки.Добавить("РазворачиватьПолностью", Новый ОписаниеТипов("Булево"));
тзНастройки.Колонки.Добавить("ФлажкиГруппировок", Новый ОписаниеТипов("Соответствие"));
тзНастройки.Колонки.Добавить("СхемаОформления");

ЭтоОбновление = Ложь;
фИсточникПеретаскивания = Ложь;
фПриемникПеретаскивания = Ложь;

ТипБулево = Тип("Булево");

КоличествоБлокировокДоступности = 0;

ЕстьКарта = Ложь;
#КонецЕсли