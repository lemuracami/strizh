#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

// Дата, на которую рассчитываются курсы валют.
//
Перем ДатаРасчетаКурсовВалют Экспорт; // <Дата>

// Объект, содержащий метод ПриИзмененииСтатей(), вызываемый при изменении журнала статей.
//
Перем ОбработчикИзмененияСтатей Экспорт; // <ПроизвольныйОбъект>

// Если Истина, то журнал статей отображает только статьи доходов/расходов, связанные с местной доставкой.
//
Перем ДоходыРасходыДоставки Экспорт; // <Булево>

Перем соНередактируемыеСтатьи;
Перем соНередактируемыеАналитики;
Перем мсВидыАналитики;
Перем мсВидимыеСтатьи;
Перем соВидимыеСтатьи;

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	ДатаРасчетаКурсовВалют = Неопределено;
	ОбработчикИзмененияСтатей = Неопределено;
	ДоходыРасходыДоставки = Неопределено;
	соНередактируемыеСтатьи = Неопределено;
	соНередактируемыеАналитики = Неопределено;
	мсВидыАналитики = Неопределено;
	мсВидимыеСтатьи = Неопределено;
	соВидимыеСтатьи = Неопределено;
	
КонецПроцедуры

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	ОформлениеСтроки.Ячейки.Группа.УстановитьКартинку(БиблиотекаКартинок.новаГруппа);
	Если ДанныеСтроки.Группировка <> NULL Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Статья.УстановитьКартинку(БиблиотекаКартинок.новаЭлемент);
		
	Если ДанныеСтроки.Группировка = NULL Тогда
		Если ДанныеСтроки.Статья.ВидАналитики = Перечисления.новаВидыАналитикСтатейДоходовРасходов.Доставка И Не ДоходыРасходыДоставки Тогда
			ОформлениеСтроки.Ячейки.СпособРаспределения.УстановитьТекст("");
		КонецЕсли;
		
		Если соНередактируемыеСтатьи[ДанныеСтроки.Статья] <> Неопределено
		 Или соНередактируемыеАналитики[ДанныеСтроки.Статья.ВидАналитики] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(250, 255, 198);
		КонецЕсли;
	Иначе
		Если ДанныеСтроки.Группа = Справочники.новаСтатьиДоходовРасходов.Доходы И ДанныеСтроки.Статья = NULL Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(200, 255, 200);
			
		ИначеЕсли ДанныеСтроки.Группа = Справочники.новаСтатьиДоходовРасходов.Расходы И ДанныеСтроки.Статья = NULL Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(255, 200, 200);
			
		Иначе
			ОформлениеСтроки.ЦветФона = Новый Цвет(250, 255, 198);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
		
	ИначеЕсли Событие = "УстановленФильтр" Тогда
		
	ИначеЕсли Событие = "Выбор" Тогда
		
	ИначеЕсли Событие = "ДобавленыДанныеВДерево" Тогда
		Если Параметр1.Количество() = 0 Тогда Возврат Ложь; КонецЕсли;
		РассчитатьИтоги(Параметр1);	
		
	ИначеЕсли Событие = "ОкончаниеРедактирования" Тогда
		Строка = Параметр1;
		Пока Строка.Родитель <> Неопределено Цикл
			Если Строка.Родитель.Источник <> ЭтотОбъект Тогда Прервать; КонецЕсли;
			
			Строка = Строка.Родитель;
		КонецЦикла;
		
		Если ОбработчикИзмененияСтатей <> Неопределено Тогда
			тзСтатьи = ПолучитьСтатьиДоходовРасходов();
			ТекущаяСтатья = тзСтатьи.Найти(Параметр1.Статья, "Статья");
			ОбработчикИзмененияСтатей.ПриИзмененииСтатей(тзСтатьи, ТекущаяСтатья);
			Если ТекущаяСтатья <> Неопределено Тогда
				Параметр1.Сумма = ТекущаяСтатья.Сумма;
			КонецЕсли;
		КонецЕсли;
		РассчитатьИтоги(Строка.Строки);
		Оповестить("ИзмененыДоходыРасходы", ЭтотОбъект);
		
	ИначеЕсли Событие = "НачалоИзменения" Тогда
		Если Параметр1.Группировка <> NULL Тогда Возврат Истина; КонецЕсли;
		Если соНередактируемыеСтатьи[Параметр1.Статья] <> Неопределено Тогда Возврат Истина; КонецЕсли;
		Если соНередактируемыеАналитики[Параметр1.Статья.ВидАналитики] <> Неопределено Тогда Возврат Истина; КонецЕсли;
		
		Если Параметр1.Статья.ВидАналитики = Перечисления.новаВидыАналитикСтатейДоходовРасходов.Доставка И Не ДоходыРасходыДоставки Тогда
			Возврат Параметр2 <> "Комментарий";
		Иначе
			Если Параметр2 <> "Сумма" Тогда Возврат Ложь; КонецЕсли; 
			
			Если Не ДоходыРасходыДоставки Тогда
				Если Параметр1.СпособРаспределения = Перечисления.новаСпособыРаспределения.БезРаспределения Тогда Возврат Истина; КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();
	КонецЕсли;	
	
КонецФункции

// Устанавливает ограничение на выводимые в журнал статьи.
//
// Параметры:
//  мсНовыеВидыАналитики <Массив(<ПеречислениеСсылка.новаВидыАналитикСтатейДоходовРасходов>)>
//
Процедура УстановитьВидыАналитики(мсНовыеВидыАналитики) Экспорт
	мсВидыАналитики = мсНовыеВидыАналитики;
	Если КонструкторДанных <> Неопределено Тогда
		КонструкторДанных.ДобавитьПараметр("ВидыАналитики", мсВидыАналитики);
	КонецЕсли;
КонецПроцедуры

// Устанавливает ограничение на выводимые в журнал статьи.
//
// Параметры:
//  соНовыеВидимыеСтатьи <Соответствие(<СправочникСсылка.новаСтатьиДоходовРасходов>)>
//
Процедура УстановитьВидимыеСтатьи(соНовыеВидимыеСтатьи) Экспорт
	соВидимыеСтатьи = соНовыеВидимыеСтатьи;
	мсВидимыеСтатьи = Новый Массив;
	Если соВидимыеСтатьи <> Неопределено Тогда
		Для Каждого ЭлСтатья Из соВидимыеСтатьи Цикл
			мсВидимыеСтатьи.Добавить(ЭлСтатья.Ключ);
		КонецЦикла;
	КонецЕсли;
	Если КонструкторДанных <> Неопределено Тогда
		КонструкторДанных.ДобавитьПараметр("ВидимыеСтатьи", мсВидимыеСтатьи);
	КонецЕсли;
КонецПроцедуры

Процедура Настроить()
	ПараметрыЖурнала = Новый Структура;
	
	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	КонструкторДанных.ПостОбработчикДанных = ЭтотОбъект;
	
	КонструкторДанных.ТекстЗапроса = "
	|	Справочник.новаСтатьиДоходовРасходов КАК Статьи
	|";
	
	КонструкторДанных.ПостояннаяВыборка = ",
	|	Статьи.Ссылка КАК Статья,
	|	Представление(Статьи.Ссылка) КАК Статья_Пред,
	|	Статьи.Родитель КАК Группа,
	|	Представление(Статьи.Родитель) КАК Группа_Пред,
	|	ВЫБОР
	|		КОГДА Статьи.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.новаВидыАналитикСтатейДоходовРасходов.Доставка) ТОГДА ЗНАЧЕНИЕ(Перечисление.новаСпособыРаспределения.БезРаспределения)
	|		ИНАЧЕ Статьи.СпособРаспределенияПоУмолчанию
	|	КОНЕЦ КАК СпособРаспределения,
	|	0 КАК Сумма";
	
	КонструкторДанных.ПостоянныйОтбор = "НЕ Статьи.ПометкаУдаления И НЕ Статьи.ЭтоГруппа И (Статьи.ВидАналитики В (&ВидыАналитики) ИЛИ Статьи.Ссылка В (&ВидимыеСтатьи))";
	УстановитьВидыАналитики(мсВидыАналитики);
	УстановитьВидимыеСтатьи(соВидимыеСтатьи);
	
	КонструкторДанных.ДобавитьПоле("Статья");
	КонструкторДанных.ДобавитьОтборПоля(, "Статьи.Ссылка");
	
	КонструкторДанных.ДобавитьПоле("Группа");
	КонструкторДанных.ДобавитьОтборПоля(, "Статьи.Родитель");
	
	КонструкторДанных.ДобавитьПоле("СпособРаспределения");
	
	КонструкторДанных.ДобавитьПоле("Сумма",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьПоле("Комментарий",,, Новый ОписаниеТипов("Строка"));
	
	КонструкторДанных.ДобавитьПоле("Валюта");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Статьи.Валюта");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Группа",,, Истина);
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Статья"));

	КонструкторДанных.СформироватьКолонки();
	
КонецПроцедуры

// Рассчитывает итоги по иерархии статей доходов/расходов.
//
// Параметры:
//  Строки <СтрокиДереваЗначений>
//
Процедура РассчитатьИтоги(Строки) Экспорт
	Если Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Родитель = Строки.Родитель;
	Если Родитель <> Неопределено Тогда
		Родитель.Сумма = 0;
	КонецЕсли;
	
	Для Каждого Строка Из Строки Цикл
		Если новаДоходыРасходы.ЗаданаВалютаУпрУчета() Тогда
			Если Строка.Группировка <> NULL Тогда
				Строка.Валюта = новаДоходыРасходы.ПолучитьВалютуУпрУчета(новаКонтекст);
				//Строка.Валюта = новаКонтекст.ВалютаУпрУчета;
				Строка.Валюта_Пред = СокрЛП(Строка.Валюта);
			КонецЕсли;
		КонецЕсли;
				
		Если Строка.Строки.Количество() <> 0 Тогда
			РассчитатьИтоги(Строка.Строки);
		КонецЕсли;
		Если Родитель = Неопределено Тогда Продолжить; КонецЕсли;
		
		Если новаДоходыРасходы.ЗаданаВалютаУпрУчета() Тогда
			Родитель.Сумма = Родитель.Сумма + новаДоходыРасходы.ПересчитатьСуммуВВалютуУпрУчета(Строка.Сумма,
				Строка.Валюта, ДатаРасчетаКурсовВалют, новаКонтекст);	
		Иначе
			Родитель.Сумма = Родитель.Сумма + Строка.Сумма;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
	дзДанные.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
КонецПроцедуры

// Возвращает текущее содержимое журнала в виде таблицы.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСтатейДоходовРасходов]>
//
Функция ПолучитьСтатьиДоходовРасходов() Экспорт
	тзСтатьи = Новый ТаблицаЗначений;
	тзСтатьи.Колонки.Добавить("Статья");
	тзСтатьи.Колонки.Добавить("ИмяКолонки");
	тзСтатьи.Колонки.Добавить("СпособРаспределения");
	тзСтатьи.Колонки.Добавить("Сумма");
	тзСтатьи.Колонки.Добавить("Счетчик");
	
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Группировка", ЭтотОбъект, NULL), Истина);
	Для Каждого Строка Из Строки Цикл
		Если Строка.Статья.ВидАналитики = Перечисления.новаВидыАналитикСтатейДоходовРасходов.Рейс Тогда
			Если Не ЗначениеЗаполнено(Строка.СпособРаспределения) Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		стрСтатья = тзСтатьи.Добавить();
		ЗаполнитьЗначенияСвойств(стрСтатья, Строка);
		стрСтатья.ИмяКолонки = "Статья" + СтрЗаменить(Строка(стрСтатья.Статья.УникальныйИдентификатор()), "-", "_");
		стрСтатья.Счетчик = 1;
	КонецЦикла;
	
	Возврат тзСтатьи;
КонецФункции

// Запрещает редактирование переданных статей и устанавливает их суммы.
//
// Параметры:
//  соФиксированныеСтатьи <Соответствие(<СправочникСсылка.новаСтатьиДоходовРасходов>, <Число>)>
//
Процедура УстановитьФиксированныеСтатьи(соФиксированныеСтатьи) Экспорт
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Группировка", ЭтотОбъект, NULL), Истина);
	Для Каждого Строка Из Строки Цикл
		Если соНередактируемыеАналитики[Строка.Статья.ВидАналитики] <> Неопределено Тогда
			Строка.Сумма = 0;	
		КонецЕсли;	
	КонецЦикла;
	
	соНередактируемыеСтатьи = соФиксированныеСтатьи;
	Для Каждого ЭлСтатья Из соФиксированныеСтатьи Цикл
		Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Группировка, Статья", ЭтотОбъект, NULL, ЭлСтатья.Ключ), Истина);
		Для Каждого Строка Из Строки Цикл
			Строка.СпособРаспределения = Неопределено;
			Строка.Сумма = ЭлСтатья.Значение;
		КонецЦикла;
	КонецЦикла;
	РассчитатьИтоги(Журнал.Дерево.Значение.Строки);
КонецПроцедуры

// Запрещает редактирование статей, связанных с переданными видами аналитик.
//
// Параметры:
//  мсФиксированныеАналитики <Массив(<ПеречислениеСсылка.новаВидыАналитикСтатейДоходовРасходов>)>
//
Процедура УстановитьФиксированныеВидыАналитик(мсФиксированныеАналитики) Экспорт
	Для Каждого Аналитика Из мсФиксированныеАналитики Цикл
		соНередактируемыеАналитики.Вставить(Аналитика, Истина);
	КонецЦикла;
КонецПроцедуры

// Возвращает свернутые доходы и расходы.
//
// Возвращаемое значение:
//  <Структура(Доходы, Расходы: <Число>)>
//
Функция ПолучитьОбщиеДоходыРасходы() Экспорт
	ВсеДоходы = 0;
	ВсеРасходы = 0;
	
	Для Каждого Строка Из Журнал.Дерево.Значение.Строки Цикл
		Если Строка.Группа = Справочники.новаСтатьиДоходовРасходов.Доходы Тогда
			ВсеДоходы = ВсеДоходы + Строка.Сумма;
		Иначе
			ВсеРасходы = ВсеРасходы + Строка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Доходы, Расходы", ВсеДоходы, ВсеРасходы);
КонецФункции

// Возвращает массив строк журнала доходов/расходов, для которых разрешено редактирование.
//
// Возвращаемое значение:
//  <Массив(СтрокаДереваЗначений[СтрокаЖурналаДоходовРасходов])>
//
Функция ПолучитьРедактируемыеДоходыРасходы() Экспорт
	мсСтроки = Новый Массив;
	Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Группировка", ЭтотОбъект, NULL), Истина);
	Для Каждого Строка Из Строки Цикл
		Если Строка.Сумма = 0 И ПустаяСтрока(Строка.Комментарий) Тогда Продолжить; КонецЕсли;
		Если соНередактируемыеАналитики[Строка.Статья.ВидАналитики] <> Неопределено Тогда Продолжить; КонецЕсли;
		
		мсСтроки.Добавить(Строка);
	КонецЦикла;
	
	Возврат мсСтроки;
КонецФункции

ДоходыРасходыДоставки = Ложь;
мсВидыАналитики = Новый Массив;
соНередактируемыеАналитики = Новый Соответствие;
соНередактируемыеСтатьи = Новый Соответствие;

#КонецЕсли