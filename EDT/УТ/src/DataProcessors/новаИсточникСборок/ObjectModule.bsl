#Если Клиент Тогда

Перем КонструкторДанных Экспорт;
Перем ПараметрыЖурнала Экспорт;
Перем Журнал Экспорт;

Перем Рейс Экспорт;
Перем СборкаНаСкладе Экспорт;

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов()
	
	КонструкторДанных = Неопределено;
	ПараметрыЖурнала = Неопределено;
	Журнал = Неопределено;
	Рейс = Неопределено;
	СборкаНаСкладе = Неопределено;
	
КонецПроцедуры

Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если ДанныеСтроки.Группировка <> NULL Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
		Возврат;
	КонецЕсли;
КонецПроцедуры

Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	
	Если Событие = "Инициализация" Тогда
		
		Настроить();
		Возврат Истина;
		
	ИначеЕсли Событие = "Выбор" Тогда
		
		Если ЗначениеЗаполнено(Параметр1.Доставка) Тогда
			обДоставка = Параметр1.Доставка.ПолучитьОбъект();
			ФормаСборки = обДоставка.ПолучитьФорму();
			ФормаСборки.Открыть();
		ИначеЕсли ЗначениеЗаполнено(Параметр1.СборкаНаСкладе) Тогда
			обСборка = Параметр1.СборкаНаСкладе.ПолучитьОбъект();
			ФормаСборки = обСборка.ПолучитьФорму();
			ФормаСборки.Открыть();
		КонецЕсли;	
		
	ИначеЕсли Событие = "ВыполнитьОсвобождениеРесурсов" Тогда
		
		ВыполнитьОсвобождениеРесурсов();
	КонецЕсли;	
	
КонецФункции

Процедура Настроить()
	
	мсИнструменты = Новый Массив;
	ПараметрыЖурнала = Новый Структура("Инструменты", мсИнструменты);

	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ
	               |	новаСборкаНаСкладеСостав.МестнаяДоставка КАК Доставка,
	               |	новаСборкаНаСкладеСостав.МестнаяДоставка.Грузополучатель КАК Контрагент,
	               |	новаСборкаНаСкладеСостав.МестнаяДоставка.ТочкаПрибытия КАК ТочкаПрибытия,
	               |	новаСборкаНаСкладеСостав.МестнаяДоставка.Груз.Вес КАК Вес,
	               |	новаСборкаНаСкладеСостав.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.новаСборкаНаСкладе.Состав КАК новаСборкаНаСкладеСостав";
				   //|ГДЕ
				   //|	новаСборкаНаСкладеСостав.Ссылка.Рейс = &Рейс) КАК Сборки";
	Если Рейс <> Неопределено Тогда
		КонструкторДанных.ДобавитьПараметр("Рейс",Рейс);
		КонструкторДанных.ТекстЗапроса = КонструкторДанных.ТекстЗапроса + " ГДЕ новаСборкаНаСкладеСостав.Ссылка.Рейс = &Рейс";
	ИначеЕсли СборкаНаСкладе <> Неопределено Тогда
		КонструкторДанных.ДобавитьПараметр("СборкаНаСкладе",СборкаНаСкладе);
		КонструкторДанных.ТекстЗапроса = КонструкторДанных.ТекстЗапроса + " ГДЕ новаСборкаНаСкладеСостав.Ссылка = &СборкаНаСкладе";
	КонецЕсли;
	КонструкторДанных.ТекстЗапроса = КонструкторДанных.ТекстЗапроса + ") КАК Сборки";
	
				   
	КонструкторДанных.ПостояннаяВыборка = ",
	|	Сборки.Ссылка КАК СборкаНаСкладе,
	|	Представление(Сборки.Ссылка) КАК СборкаНаСкладе_Пред,
	|	Сборки.Доставка КАК Доставка,
	|	Представление(Сборки.Доставка) КАК Доставка_Пред,
	|	Сборки.Контрагент КАК Контрагент,
	|	Представление(Сборки.Контрагент) КАК Контрагент_Пред,
	|	Сборки.ТочкаПрибытия КАК ТочкаПрибытия,
	|	Представление(Сборки.ТочкаПрибытия) КАК ТочкаПрибытия_Пред,
	|	Сборки.Вес КАК Вес
	|";
	
	
	КонструкторДанных.ДобавитьПоле("СборкаНаСкладе");
	КонструкторДанных.ДобавитьСортировкуПоля("Сборки.Контрагент.Наименование");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("СборкаНаСкладе");
	
	КонструкторДанных.ДобавитьПоле("Доставка");
	КонструкторДанных.ДобавитьПоле("Контрагент");
	КонструкторДанных.ДобавитьПоле("ТочкаПрибытия");
	КонструкторДанных.ДобавитьПоле("Вес");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("СборкаНаСкладе"));

	КонструкторДанных.СформироватьКолонки();

КонецПроцедуры

#КонецЕсли