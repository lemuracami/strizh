
//**** Объявление переменных модуля ****//

Перем ИсточникПараметров Экспорт;
Перем ИсточникДоставок Экспорт;
Перем ИсточникТранспорта Экспорт;
Перем КСЛ;
Перем ПриниматьПлохиеРейсы;

Процедура ПодключитьКСЛ()
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		КСЛ = новаСерверКСЛ.Подключиться();
	#КонецЕсли
КонецПроцедуры

//**** Автопланирование ****//

//Возвращает доставки по складам
//
Функция ПолучитьДоставки()
	
	Возврат ИсточникДоставок.ПолучитьДоставкиДляАвтоматическогоПланирования(, СценарийПланирования.КлассификаторРайонов);
	
КонецФункции

//Возвращает список транспорта
//
Функция ПолучитьТранспорт()
	
	Результат = ИсточникТранспорта.ПолучитьТранспортДляАвтоматическогоПланирования(, СценарийПланирования.КлассификаторРайонов);
	Результат.Колонки.Добавить("КонецПредыдущегоРейса");
	
	Возврат Результат;
	
КонецФункции

//Добавляем созданные рейсы и не включённые доставки
//
//Процедура ПрименитьРезультатРешения(Результат, Транспорт, ТаблицаДоставок, ТочкаОтправления)
Процедура ПрименитьРезультатРешения(Результат, Транспорт, ДоставкиПоРайону, ТочкаОтправления)
		
	ОграниченияПоМаркамТранспорта = Новый Соответствие;
	Для каждого Ограничение Из СценарийПланирования.ОграниченияТранспорта Цикл
		
		ОграниченияПоМаркамТранспорта.Вставить(Ограничение.Марка, Ограничение);
	КонецЦикла;
	
	Если Результат.МаршрутыПоТранспорту <> Неопределено Тогда
		
		#Если Клиент Тогда
			
			ФормаИндикатора = ПолучитьОбщуюФорму("новаФормаИндикатора", , "ПрогрессПринятияРейсовПоРайону");
			ФормаИндикатора.Заголовок = "Оптимизация рейсов";
			ФормаИндикатора.МинимальноеЗначение = 0;
			ФормаИндикатора.МаксимальноеЗначение = Результат.МаршрутыПоТранспорту.Количество();
			ФормаИндикатора.КартинкаЗаголовка = БиблиотекаКартинок.новаАвтоматическоеПланирование;	
			ФормаИндикатора.Открыть();
		#КонецЕсли
		
		ИнтервалыДоступности = Результат.МаршрутыПоТранспорту.Ключи;
		
		ОбщееКоличествоРейсов = ИнтервалыДоступности.Количество();
		Для Индекс = 0 По ОбщееКоличествоРейсов - 1 Цикл
			
			#Если Клиент Тогда
				ФормаИндикатора.ОбновитьСостояние("Оптимизируется рейс №" + (Индекс + 1) + " из " + ОбщееКоличествоРейсов);
			#КонецЕсли
			
			ТекущийИнтервалДоступности = ИнтервалыДоступности.Получить(Индекс);
			Маршрут = Результат.МаршрутыПоТранспорту.Получить(ТекущийИнтервалДоступности).Маршрут;
			
			//Заполнение таблицы результата
			НайденныйИнтервалДоступности = Транспорт.Строки.Найти(Новый УникальныйИдентификатор(ТекущийИнтервалДоступности.ToString()), "ИдентификаторПериодаДоступности", Истина);
			
			НовыйРейс = РезультатПланирования.Строки.Добавить();
			НовыйРейс.Принят = Истина;
			НовыйРейс.РейсСоответствуетТребованиям = Истина;
			НовыйРейс.Иерархия = НайденныйИнтервалДоступности.Транспорт;
			НовыйРейс.Транспорт = НайденныйИнтервалДоступности.Транспорт;
			НовыйРейс.Водитель = НайденныйИнтервалДоступности.Водитель;
			НовыйРейс.Выезд = НайденныйИнтервалДоступности.НачалоПериода;
			НовыйРейс.Завершение = НайденныйИнтервалДоступности.ОкончаниеПериода;
			НовыйРейс.ТочкаСклада = ТочкаОтправления;
			Если ЗначениеЗаполнено(НайденныйИнтервалДоступности.НачалоРейса) Тогда
				НовыйРейс.ТочкаНачалаРейса = НайденныйИнтервалДоступности.НачалоРейса;
				НовыйРейс.ТочкаокончанияРейса = НайденныйИнтервалДоступности.НачалоРейса;
			Иначе
				Если ЗначениеЗаполнено(НайденныйИнтервалДоступности.КонецПредыдущегоРейса) Тогда
					НовыйРейс.ТочкаНачалаРейса = НайденныйИнтервалДоступности.КонецПредыдущегоРейса;
				Иначе
					НовыйРейс.ТочкаНачалаРейса = НовыйРейс.ТочкаСклада;
				КонецЕсли;
				НовыйРейс.ТочкаокончанияРейса = НовыйРейс.ТочкаСклада;
			КонецЕсли;
			НовыйРейс.Длительность = '00010101' + (НовыйРейс.Завершение - НовыйРейс.Выезд);
			
			НовыйРейс.Вес = 0;
			НовыйРейс.Объем = 0;
			ТекущаяТочкаДоставки = Неопределено;
			
			Маршрут = РешитьЗадачуКоммивояжера(НовыйРейс, Маршрут);
			
			Для ИндексДоставок = 0 По Маршрут.Количество() - 1 Цикл
				
				ТекущаяМестнаяДоставка = Маршрут.Получить(ИндексДоставок);
				
				ТочкаДоставки = Справочники.новаТочкиДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекущаяМестнаяДоставка.Ид));
				ДоставкаМаршрута = БизнесПроцессы.новаМестнаяДоставка.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекущаяМестнаяДоставка.ИдДоставки));
				
				Если ДоставкаМаршрута.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТочкаДоставки <> ТекущаяТочкаДоставки Тогда
					
					ТекущаяТочкаДоставки = ТочкаДоставки;
					
					НоваяТочкаМашрута = НовыйРейс.Строки.Добавить();
					НоваяТочкаМашрута.Иерархия = ТекущаяТочкаДоставки;
					НоваяТочкаМашрута.ТочкаМаршрута = ТекущаяТочкаДоставки;
				КонецЕсли;
				
				НоваяДоставкаМаршрута = НоваяТочкаМашрута.Строки.Добавить();
				НоваяДоставкаМаршрута.Иерархия = БизнесПроцессы.новаМестнаяДоставка.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекущаяМестнаяДоставка.ИдДоставки));
				НоваяДоставкаМаршрута.ДоставкаМаршрута = ДоставкаМаршрута;
				НоваяДоставкаМаршрута.Вес = ДоставкаМаршрута.Груз.Вес;
				НоваяДоставкаМаршрута.Объем = ДоставкаМаршрута.Груз.Объем;
				
				НоваяТочкаМашрута.Вес = НоваяТочкаМашрута.Вес + ДоставкаМаршрута.Груз.Вес;
				НоваяТочкаМашрута.Объем = НоваяТочкаМашрута.Объем + ДоставкаМаршрута.Груз.Объем;
				НоваяТочкаМашрута.КоличествоДоставокВРейсе = НоваяТочкаМашрута.КоличествоДоставокВРейсе + 1;
				
				НовыйРейс.Вес = НовыйРейс.Вес + ДоставкаМаршрута.Груз.Вес;
				НовыйРейс.Объем = НовыйРейс.Объем + ДоставкаМаршрута.Груз.Объем;
				НовыйРейс.КоличествоДоставокВРейсе = НовыйРейс.КоличествоДоставокВРейсе + 1;
				
			КонецЦикла;
			
			НовыйРейс.КоличествоТочекВРейсе = НовыйРейс.Строки.Количество();
			
			Если НайденныйИнтервалДоступности.Грузоподъемность <> 0 Тогда
				НовыйРейс.ПроцентЗагрузкиПоВесу = НовыйРейс.Вес / (НайденныйИнтервалДоступности.Грузоподъемность * 1000) * 100;
			КонецЕсли;
			Если НайденныйИнтервалДоступности.ОбъемКузова <> 0 Тогда
				НовыйРейс.ПроцентЗагрузкиПоОбъему = НовыйРейс.Объем / НайденныйИнтервалДоступности.ОбъемКузова * 100;
			КонецЕсли;
			
			ПересчитатьДлительностьПутьРейса(НовыйРейс);
			
			ограниченияПоМарке = ОграниченияПоМаркамТранспорта[НайденныйИнтервалДоступности.Марка];
			Если ограниченияПоМарке = Неопределено Тогда
				МинимальнаяЗагрузкаПоВесу = СценарийПланирования.МинимальнаяЗагрузкаПоВесу;
				МинимальнаяЗагрузкаПоОбъему = СценарийПланирования.МинимальнаяЗагрузкаПоОбъему;
				МинимальноеКоличествоТочекВРейсе = СценарийПланирования.МинимальноеКоличествоТочекВРейсе;
			Иначе
				МинимальнаяЗагрузкаПоВесу = ограниченияПоМарке.МинимальнаяЗагрузкаПоВесу;
				МинимальнаяЗагрузкаПоОбъему = ограниченияПоМарке.МинимальнаяЗагрузкаПоОбъему;
				МинимальноеКоличествоТочекВРейсе = ограниченияПоМарке.МинимальноеКоличествоТочекВРейсе;
			КонецЕсли;
			
			Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоВесу Тогда
				
				Если НовыйРейс.ПроцентЗагрузкиПоВесу < МинимальнаяЗагрузкаПоВесу Тогда
					
					НовыйРейс.РейсСоответствуетТребованиям = Ложь;
					НовыйРейс.Комментарий = "Недобор веса.";
				КонецЕсли;
			КонецЕсли;
			
			Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоОбъему Тогда
				
				Если НовыйРейс.ПроцентЗагрузкиПоОбъему < МинимальнаяЗагрузкаПоОбъему Тогда
					
					НовыйРейс.РейсСоответствуетТребованиям = Ложь;
					Если ЗначениеЗаполнено(НовыйРейс.Комментарий) Тогда
						НовыйРейс.Комментарий = НовыйРейс.Комментарий + " ";
					КонецЕсли;
					НовыйРейс.Комментарий = НовыйРейс.Комментарий + "Недобор объема.";
				КонецЕсли;
			КонецЕсли;
			
			Если НовыйРейс.КоличествоТочекВРейсе < МинимальноеКоличествоТочекВРейсе Тогда
				
				НовыйРейс.РейсСоответствуетТребованиям = Ложь;
				Если ЗначениеЗаполнено(НовыйРейс.Комментарий) Тогда
					НовыйРейс.Комментарий = НовыйРейс.Комментарий + " ";
				КонецЕсли;
				НовыйРейс.Комментарий = НовыйРейс.Комментарий + "Недобор точек маршрута.";
			КонецЕсли;
			
			Если не ( НовыйРейс.РейсСоответствуетТребованиям
			          или ПриниматьПлохиеРейсы) Тогда
				
				РезультатПланирования.Строки.Удалить(НовыйРейс);
				Продолжить;
			КонецЕсли;
			
			//Обновляем доступность транспорта
			НайденныеСтроки = Транспорт.Строки.НайтиСтроки(Новый Структура("ИдентификаторПериодаДоступности", Новый УникальныйИдентификатор(ТекущийИнтервалДоступности.ToString())), Истина);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если не СценарийПланирования.ТолькоОдинРейсНаТранспорт Тогда
					
					Если НайденнаяСтрока.ОкончаниеПериода > НовыйРейс.Завершение Тогда
						
						НайденнаяСтрока.НачалоПериода = НовыйРейс.Завершение;
						НайденнаяСтрока.КонецПредыдущегоРейса = НовыйРейс.ТочкаОкончанияРейса;
						
					Иначе
						
						Родитель = НайденнаяСтрока.Родитель;
						Родитель.Строки.Удалить(НайденнаяСтрока);
					КонецЕсли;
					
				Иначе
					
					Родитель = НайденнаяСтрока.Родитель;
					Родитель.Строки.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			#Если Клиент Тогда
				ФормаИндикатора.ОбновитьЗначение(Индекс + 1);
			#КонецЕсли
		КонецЦикла;
		
		#Если Клиент Тогда
			ФормаИндикатора.Закрыть();
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

//Выполняем задачу коммвиояжера для рейса
//
Функция РешитьЗадачуКоммивояжера(Рейс, Маршрут)
	
	КоличествоТочекВРейсе = 0;
	Для Индекс = 0 По Маршрут.Количество() - 1 Цикл
		
		ТочкаСтарогоМаршрута = Маршрут.Получить(Индекс);
		ДоставкаМаршрута = БизнесПроцессы.новаМестнаяДоставка.ПолучитьСсылку(Новый УникальныйИдентификатор(ТочкаСтарогоМаршрута.ИдДоставки));;
		Если ДоставкаМаршрута.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоТочекВРейсе = КоличествоТочекВРейсе + 1;
	КонецЦикла;
	
	Если КоличествоТочекВРейсе > СценарийПланирования.МаксимальноеКоличествоДоставокВРейсеДляАвтоматическойОптимизации Тогда
		Возврат Маршрут;
	КонецЕсли;
	
	//Оптимизация маршрута
	КоэффициентСкорости = ?(СценарийПланирования.КоэффициентСкорости <> 0, СценарийПланирования.КоэффициентСкорости, 1);;
	
	ПодключитьКСЛ();
	
	Выполнение = КСЛ.Доставка_ЗадачаКоммивояжера_РешениеЗадачиКоммивояжераНаКлиенте();
	
	СтартоваяТочка = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
	СтартоваяТочка.Ид = Строка(Рейс.ТочкаНачалаРейса.УникальныйИдентификатор());
	СтартоваяТочка.ВремяНачалаВременногоОкна = Рейс.Выезд;
	СтартоваяТочка.ВремяОкончанияВременногоОкна = Рейс.Завершение;
	
	ОкноДоступности = Рейс.ТочкаСклада.ПолучитьОбъект().ПолучитьОкноДоставки(ИсточникПараметров.ДатаПланирования);
	ВремяНачалаВременногоОкнаСклада = НачалоДня(ИсточникПараметров.ДатаПланирования) + (ОкноДоступности.ВремяНачала - '00010101');
	ВремяОкончанияВременногоОкнаСклада = НачалоДня(ИсточникПараметров.ДатаПланирования) + (ОкноДоступности.ВремяОкончания - '00010101');
	
	ТочкаСклада = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
	ТочкаСклада.Ид = Строка(Рейс.ТочкаСклада.УникальныйИдентификатор());
	ТочкаСклада.ВремяНачалаВременногоОкна = ВремяНачалаВременногоОкнаСклада;
	ТочкаСклада.ВремяОкончанияВременногоОкна = ВремяОкончанияВременногоОкнаСклада;
	
	КонечнаяТочка = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
	КонечнаяТочка.Ид = Строка(Рейс.ТочкаокончанияРейса.УникальныйИдентификатор());
	КонечнаяТочка.ВремяНачалаВременногоОкна = Рейс.Выезд;
	КонечнаяТочка.ВремяОкончанияВременногоОкна = Рейс.Завершение;
	
	ЭволюционирующийМаршрут = Выполнение.ПолучитьНовыйСписокМаршрута2();
	
	Для Индекс = 0 По Маршрут.Количество() - 1 Цикл
		
		ТочкаСтарогоМаршрута = Маршрут.Получить(Индекс);
		ДоставкаМаршрута = БизнесПроцессы.новаМестнаяДоставка.ПолучитьСсылку(Новый УникальныйИдентификатор(ТочкаСтарогоМаршрута.ИдДоставки));;
		Если ДоставкаМаршрута.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ТочкаМаршрута = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
		ТочкаМаршрута.Ид = ТочкаСтарогоМаршрута.Ид;
		ТочкаМаршрута.ИдДоставки = ТочкаСтарогоМаршрута.ИдДоставки;
		ТочкаМаршрута.ВремяНачалаВременногоОкна = ДоставкаМаршрута.ВремяПрибытияС;
		ТочкаМаршрута.ВремяОкончанияВременногоОкна = ДоставкаМаршрута.ВремяПрибытияПо;
		ТочкаМаршрута.ВремяПогрузки = ДоставкаМаршрута.ВремяПребыванияГрузоотправителя - '00010101';
		ТочкаМаршрута.ВремяРазгрузки = ДоставкаМаршрута.ВремяПребыванияГрузополучателя - '00010101';
		ТочкаМаршрута.Приоритет = 1; // Автопланирование не поддерживает приоритезацию точек
		
		ЭволюционирующийМаршрут.Добавить(ТочкаМаршрута);
	КонецЦикла;
	
	НовыйМаршрут = Выполнение.ОптимизироватьМаршрут(ЭволюционирующийМаршрут, КоэффициентСкорости, СтартоваяТочка, ТочкаСклада, КонечнаяТочка, 6);
	
	Возврат НовыйМаршрут;
	
КонецФункции

//Рассчитываем время и путь транспорта в рейсе
//
Процедура ПересчитатьДлительностьПутьРейса(Рейс)
	
	ПодключитьКСЛ();
	
	ПараметрыРасчета = КСЛ.Мониторинг_ХарактеристикиТранспорта();
	ПараметрыРасчета.ОптимизироватьМаршрутПоРасстоянию = Ложь;
	ПараметрыРасчета.УчитыватьПробки = Ложь;
	
	КоэффициентСкорости = ?(СценарийПланирования.КоэффициентСкорости <> 0, СценарийПланирования.КоэффициентСкорости, 1);;
	
	ТекущееВремя = 0;
	ТекущееРасстояние = 0;
	
	//Расчёт времени движения от старта рейса до склада
	ОкноДоступности = Рейс.ТочкаСклада.ПолучитьОбъект().ПолучитьОкноДоставки(ИсточникПараметров.ДатаПланирования);
	ВремяНачалаВременногоОкнаСклада = НачалоДня(ИсточникПараметров.ДатаПланирования) + (ОкноДоступности.ВремяНачала - '00010101');
	
	Если ЗначениеЗаполнено(Рейс.ТочкаНачалаРейса)
		 и Рейс.ТочкаНачалаРейса <> Рейс.ТочкаСклада Тогда
		
		НачальнаяТочка = КСЛ.МодельДанных_ГеоТочка();
		НачальнаяТочка.Широта = Рейс.ТочкаНачалаРейса.Адрес.Широта;
		НачальнаяТочка.Долгота = Рейс.ТочкаНачалаРейса.Адрес.Долгота;
		
		КонечнаяТочка = КСЛ.МодельДанных_ГеоТочка();
		КонечнаяТочка.Широта = Рейс.ТочкаСклада.Адрес.Широта;
		КонечнаяТочка.Долгота = Рейс.ТочкаСклада.Адрес.Долгота;
		
		Трек = КСЛ.Мониторинг_Карты_Маршрут();
		Трек.Начало = НачальнаяТочка;
		Трек.Конец = КонечнаяТочка;
		Трек.ХарактеристикиТранспорта = ПараметрыРасчета;
		
		Трек.Рассчитать();
		
		ТекущееВремя = ТекущееВремя + Трек.ДлительностьВЧасах * 3600 * КоэффициентСкорости;
		ТекущееРасстояние = ТекущееРасстояние + Трек.Расстояние / 1000;
	КонецЕсли;
	
	Если Рейс.Выезд + ТекущееВремя < ВремяНачалаВременногоОкнаСклада Тогда
		
		Рейс.Выезд = ВремяНачалаВременногоОкнаСклада - ТекущееВремя;
	КонецЕсли;
	
	//Рассчитываем время погрузки
	Для каждого ТочкаМаршрута Из Рейс.Строки Цикл
		
		Для каждого ДоставкаМаршрута Из ТочкаМаршрута.Строки Цикл
			
			ТекущееВремя = ТекущееВремя + (ДоставкаМаршрута.ДоставкаМаршрута.ВремяПребыванияГрузоотправителя - '00010101');
		КонецЦикла;
	КонецЦикла;
	
	//Рассчитываем время и расстояние маршрута
	ТочкаНачалаОтрезка = Рейс.точкаСклада;	
	
	Для каждого ТочкаМаршрута Из Рейс.Строки Цикл
		
		НачальнаяТочка = КСЛ.МодельДанных_ГеоТочка();
		НачальнаяТочка.Широта = ТочкаНачалаОтрезка.Адрес.Широта;
		НачальнаяТочка.Долгота = ТочкаНачалаОтрезка.Адрес.Долгота;
		
		КонечнаяТочка = КСЛ.МодельДанных_ГеоТочка();
		КонечнаяТочка.Широта = ТочкаМаршрута.ТочкаМаршрута.Адрес.Широта;
		КонечнаяТочка.Долгота = ТочкаМаршрута.ТочкаМаршрута.Адрес.Долгота;
		
		Трек = КСЛ.Мониторинг_Карты_Маршрут();
		Трек.Начало = НачальнаяТочка;
		Трек.Конец = КонечнаяТочка;
		Трек.ХарактеристикиТранспорта = ПараметрыРасчета;
		
		Трек.Рассчитать();
		
		ТекущееВремя = ТекущееВремя + Трек.ДлительностьВЧасах * 3600 * КоэффициентСкорости;
		ТекущееРасстояние = ТекущееРасстояние + Трек.Расстояние / 1000;
		
		ТочкаМаршрута.ПрибытиеВТочкуМаршрута = ТекущееВремя;
		ТочкаМаршрута.Выезд = Рейс.Выезд + ТекущееВремя;
		
		Для каждого ДоставкаМаршрута Из ТочкаМаршрута.Строки Цикл
			
			Если Рейс.Выезд + ТекущееВремя < ДоставкаМаршрута.ДоставкаМаршрута.ВремяПрибытияС Тогда
				ТекущееВремя = ДоставкаМаршрута.ДоставкаМаршрута.ВремяПрибытияС - Рейс.Выезд;
			КонецЕсли;
			
			ТекущееВремя = ТекущееВремя + (ДоставкаМаршрута.ДоставкаМаршрута.ВремяПребыванияГрузополучателя - '00010101')
		КонецЦикла;
		
		ТочкаМаршрута.УбытиеИзТочкиМаршрута = ТекущееВремя;
		ТочкаМаршрута.Завершение = Рейс.Выезд + ТекущееВремя;
		
		ТочкаНачалаОтрезка = ТочкаМаршрута.ТочкаМаршрута;
	КонецЦикла;
	
	//Расчёт Прибытия в конечную точку маршрута
	Если ЗначениеЗаполнено(Рейс.ТочкаОкончанияРейса)
		 и Рейс.ТочкаОкончанияРейса <> ТочкаНачалаОтрезка Тогда
		
		НачальнаяТочка = КСЛ.МодельДанных_ГеоТочка();
		НачальнаяТочка.Широта = ТочкаНачалаОтрезка.Адрес.Широта;
		НачальнаяТочка.Долгота = ТочкаНачалаОтрезка.Адрес.Долгота;
		
		КонечнаяТочка = КСЛ.МодельДанных_ГеоТочка();
		КонечнаяТочка.Широта = Рейс.ТочкаОкончанияРейса.Адрес.Широта;
		КонечнаяТочка.Долгота = Рейс.ТочкаОкончанияРейса.Адрес.Долгота;
		
		Трек = КСЛ.Мониторинг_Карты_Маршрут();
		Трек.Начало = НачальнаяТочка;
		Трек.Конец = КонечнаяТочка;
		Трек.ХарактеристикиТранспорта = ПараметрыРасчета;
		
		Трек.Рассчитать();
		
		ТекущееВремя = ТекущееВремя + Трек.ДлительностьВЧасах * 3600 * КоэффициентСкорости;
		ТекущееРасстояние = ТекущееРасстояние + Трек.Расстояние / 1000;
	КонецЕсли;
	
	Рейс.Завершение = Рейс.Выезд + ТекущееВремя;
	Рейс.Длительность = '00010101' + ТекущееВремя;
	Рейс.Пробег = ТекущееРасстояние;
	
КонецПроцедуры

//Возвращает количество сттрок дерева
//
Функция ПолучитьКоличествоСтрок(КоллекцияДерева)
	
	Результат = КоллекцияДерева.Количество();
	
	Для каждого СтрокаДерева Из КоллекцияДерева Цикл
		Результат = Результат + ПолучитьКоличествоСтрок(СтрокаДерева.Строки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Выполняется одна итерация автопланирования
//
Процедура ВыполнитьШагАвтопланирования(Доставки, Транспорт, ИтерацияАвтопланирования)
	
	ОграниченияПоМаркамТранспорта = Новый Соответствие;
	Для каждого Ограничение Из СценарийПланирования.ОграниченияТранспорта Цикл
		
		ОграниченияПоМаркамТранспорта.Вставить(Ограничение.Марка, Ограничение);
	КонецЦикла;
	
	ОграничениеПоСкладам = Новый Соответствие;
	Для каждого ТекущийСклад Из СценарийПланирования.Склады Цикл
		
		ОграничениеПоСкладам.Вставить(ТекущийСклад.Склад, Истина);
	КонецЦикла;
	
	ПодключитьКСЛ();
	
	#Если Клиент Тогда
		
		ФормаИндикатора = ПолучитьОбщуюФорму("новаФормаИндикатора", , "ПрогрессФормированияРейсов");
		ФормаИндикатора.Заголовок = "Автопланирование рейсов итерация: " + ИтерацияАвтопланирования;
		ФормаИндикатора.МинимальноеЗначение = 0;
		ФормаИндикатора.МаксимальноеЗначение = ПолучитьКоличествоСтрок(Доставки.Строки);
		ФормаИндикатора.КартинкаЗаголовка = БиблиотекаКартинок.новаАвтоматическоеПланирование;	
		ФормаИндикатора.Открыть();
	#КонецЕсли
	
	ШагПрогресса = 0;
	
	Для каждого ДоставкиПоКатегориям Из Доставки.Строки Цикл
		
		#Если Клиент Тогда
			ФормаИндикатора.ОбновитьСостояние("");
		#КонецЕсли
		
		ТранспортПоКатегориям = Неопределено;
		Для каждого ТекущийТранспортПоКатегориям Из Транспорт.Строки Цикл
			
			КатегорииТранспортаСовпадают = Ложь;
			
			//сналача определяется совпадение по списков владельцев (групп) категорий
			СписокВладельцевКатегорийДоставки = Новый СписокЗначений;
			Для Каждого ДоставкиПоКатегориямКатегория Из ДоставкиПоКатегориям.КатегорииТранспорта Цикл
				ВладелецКатегории = ДоставкиПоКатегориямКатегория.Ключ.Владелец;
				Если СписокВладельцевКатегорийДоставки.НайтиПоЗначению(ВладелецКатегории) = Неопределено Тогда
					СписокВладельцевКатегорийДоставки.Добавить(ВладелецКатегории);
				КонецЕсли;
			КонецЦикла;
			
			СовпадениеПоВладельцам = Истина;
			СписокВладельцевКатегорийТранспорт = Новый СписокЗначений;
			Для Каждого ТекущийТранспортПоКатегориямКатегория Из ТекущийТранспортПоКатегориям.КатегорииТранспорта Цикл
				
				ВладелецКатегории = ТекущийТранспортПоКатегориямКатегория.Ключ.Владелец;
				Если СписокВладельцевКатегорийТранспорт.НайтиПоЗначению(ВладелецКатегории) = Неопределено Тогда
					СписокВладельцевКатегорийТранспорт.Добавить(ВладелецКатегории);
				КонецЕсли;
				
				//проверка: множество владельцев из списка кат.транспорта входит в множество владельцев из списка кат.доставок 
				СовпадениеПоВладельцам = СовпадениеПоВладельцам И (СписокВладельцевКатегорийДоставки.НайтиПоЗначению(ВладелецКатегории) <> Неопределено);
				
				Если Не СовпадениеПоВладельцам Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СовпадениеПоВладельцам Тогда
				
				//проверка обратного включения
				Для Каждого ВладелецИзСписокаВладельцевКатегорийДоставки Из СписокВладельцевКатегорийДоставки Цикл
					Если СписокВладельцевКатегорийТранспорт.НайтиПоЗначению(ВладелецИзСписокаВладельцевКатегорийДоставки.Значение) = Неопределено Тогда
						СовпадениеПоВладельцам = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			//проверка значений категорий
			Если СовпадениеПоВладельцам Тогда 
				
				Для Каждого ТекущийТранспортПоКатегориямКатегория Из ТекущийТранспортПоКатегориям.КатегорииТранспорта Цикл
					Для Каждого ДоставкиПоКатегориямКатегория Из ДоставкиПоКатегориям.КатегорииТранспорта Цикл
						Если ДоставкиПоКатегориямКатегория.Ключ = ТекущийТранспортПоКатегориямКатегория.Ключ Тогда
							
							ВладелецКатегории = СписокВладельцевКатегорийДоставки.НайтиПоЗначению(ТекущийТранспортПоКатегориямКатегория.Ключ.Владелец);
							Если ВладелецКатегории <> Неопределено Тогда
								СписокВладельцевКатегорийДоставки.Удалить(ВладелецКатегории);
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				КатегорииТранспортаСовпадают = (СписокВладельцевКатегорийДоставки.Количество() = 0);
				
			Иначе
				
				КатегорииТранспортаСовпадают = Ложь;
				
			КонецЕсли;
			
			//КатегорииТранспортаСовпадают = (ТекущийТранспортПоКатегориям.КатегорииТранспорта.Количество() = ДоставкиПоКатегориям.КатегорииТранспорта.Количество());
			//Для каждого КатегорияТранспорта Из ДоставкиПоКатегориям.КатегорииТранспорта Цикл
			//	
			//	КатегорииТранспортаСовпадают = КатегорииТранспортаСовпадают И (ТекущийТранспортПоКатегориям.КатегорииТранспорта[КатегорияТранспорта.Ключ] = Истина);
			//КонецЦикла;
			
			Если КатегорииТранспортаСовпадают Тогда
				ТранспортПоКатегориям = ТекущийТранспортПоКатегориям;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТранспортПоКатегориям = Неопределено Тогда
			ШагПрогресса = ШагПрогресса + ПолучитьКоличествоСтрок(ДоставкиПоКатегориям.Строки) + 1;
			#Если Клиент Тогда
				ФормаИндикатора.ОбновитьЗначение(ШагПрогресса);
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		Для каждого ДоставкиПоСкладу Из ДоставкиПоКатегориям.Строки Цикл
			
			Если ОграничениеПоСкладам.Количество() > 0 Тогда
				
				Если ОграничениеПоСкладам[ДоставкиПоСкладу.Грузоотправитель] <> Истина Тогда
					ШагПрогресса = ШагПрогресса + ПолучитьКоличествоСтрок(ДоставкиПоСкладу.Строки) + 1;
					#Если Клиент Тогда
						ФормаИндикатора.ОбновитьЗначение(ШагПрогресса);
					#КонецЕсли
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			КоличествоРайонов = ДоставкиПоСкладу.Строки.Количество();
			НомерРайона = 0;
			
			Для каждого ДоставкиПоРайону Из ДоставкиПоСкладу.Строки Цикл
				
				НомерРайона = НомерРайона + 1;
				
				#Если Клиент Тогда
					ФормаИндикатора.ОбновитьСостояние("Склад " + ДоставкиПоСкладу.Грузоотправитель + " район " +  ДоставкиПоРайону.Район + " №" + НомерРайона + " из " + КоличествоРайонов);
				#КонецЕсли
				
				ТранспортПоВсемРайонам = ТранспортПоКатегориям.Строки.Найти(Неопределено, "Район");
				ТранспортПоРайону = ТранспортПоКатегориям.Строки.Найти(ДоставкиПоРайону.Район, "Район");
				
				Если ТранспортПоВсемРайонам = Неопределено
				     и ТранспортПоРайону = Неопределено Тогда
					
					ШагПрогресса = ШагПрогресса + ПолучитьКоличествоСтрок(ДоставкиПоРайону.Строки) + 1;
					#Если Клиент Тогда
						ФормаИндикатора.ОбновитьЗначение(ШагПрогресса);
					#КонецЕсли
					Продолжить;
				КонецЕсли;
				
				ДоставкиПоТочкамКластера = Новый Соответствие;
				
				ПостановкаКластеризации = КСЛ.Доставка_ЗадачаКластеризации_ПостановкаЗадачиКластеризации();
				ПостановкаКластеризации.КоличествоТочекВКластере = СценарийПланирования.КоличествоТочекВКластере;
				
				Для каждого Доставка Из ДоставкиПоРайону.Строки Цикл	
					
					ТекущаяТочка = КСЛ.Доставка_ЗадачаКластеризации_ТочкаКластера();
					ТекущаяТочка.Ид = Строка(Доставка.Доставка.УникальныйИдентификатор());					
					ТекущаяТочка.Широта = Доставка.ШиротаТочкиПрибытия;
					ТекущаяТочка.Долгота = Доставка.ДолготаТочкиПрибытия;
					
					ПостановкаКластеризации.Точки.Добавить(ТекущаяТочка);
					
					ДоставкиПоТочкамКластера.Вставить(ТекущаяТочка.Ид, Доставка);
				КонецЦикла;
				
				Выполнение = КСЛ.Доставка_ЗадачаКластеризации_РешениеЗадачиКластеризацииНаКлиенте();
				Выполнение.Постановка = ПостановкаКластеризации;
				
				Решение = Выполнение.ВыполнитьСинхронно();
				
				Для ИндексКластера = 0 По Решение.Кластера.Количество() - 1 Цикл
					
					ТекущийКластер = Решение.Кластера.Получить(ИндексКластера);
					
					ПостановкаЗадачи = КСЛ.Доставка_Автораспределение_РаспределениеТранспортаЗадание();
					
					ПостановкаЗадачи.МаксПроцентЗагрузкиПоВесу = 100;
					ПостановкаЗадачи.МаксПроцентЗагрузкиПоОбъему = 100;
					ПостановкаЗадачи.МаксВремяОбработкиЛистаОжидания = СценарийПланирования.МаксимальноеВремяОбработкиЛистаОжидания - '00010101';
					ПостановкаЗадачи.МаксВремяОптимизации = СценарийПланирования.МаксимальноеВремяОптимизации - '00010101';
					ПостановкаЗадачи.МножительСкорости = ?(СценарийПланирования.КоэффициентСкорости <> 0, СценарийПланирования.КоэффициентСкорости, 1);;
					
					ТочкаСклад = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
					ТочкаСклад.Ид = Строка(ДоставкиПоСкладу.ТочкаОтправления.УникальныйИдентификатор());
					
					ОкноДоступности = ДоставкиПоСкладу.ТочкаОтправления.ПолучитьОбъект().ПолучитьОкноДоставки(ИсточникПараметров.ДатаПланирования);
					ТочкаСклад.ВремяНачалаВременногоОкна = НачалоДня(ИсточникПараметров.ДатаПланирования) + (ОкноДоступности.ВремяНачала - '00010101');
					Если ЗначениеЗаполнено(ОкноДоступности.ВремяОкончания) Тогда
						ТочкаСклад.ВремяОкончанияВременногоОкна = НачалоДня(ИсточникПараметров.ДатаПланирования) + (ОкноДоступности.ВремяОкончания - '00010101');
					Иначе
						ТочкаСклад.ВремяОкончанияВременногоОкна = НачалоДня(ИсточникПараметров.ДатаПланирования) + 86399;
					КонецЕсли;
					//ПостановкаЗадачи.ЧислоЗонПогрузки = ДоставкиПоСкладу.КоличествоЗонПогрузкиРазгрузки;
					
					ПостановкаЗадачи.ТочкаСклад = ТочкаСклад;
					
					ВключенныеИнтервалыДоступности = Новый Соответствие;
					
					Если ТранспортПоВсемРайонам <> Неопределено Тогда
						
						Для каждого ИнтервалДоступности Из ТранспортПоВсемРайонам.Строки Цикл
							
							Если ВключенныеИнтервалыДоступности[ИнтервалДоступности.ИдентификаторПериодаДоступности] = Неопределено Тогда
								
								ТранспортМаршрута = КСЛ.Доставка_Автораспределение_Транспорт2();
								ТранспортМаршрута.Ид = Строка(ИнтервалДоступности.ИдентификаторПериодаДоступности);
								ОграничениеПоМарке = ОграниченияПоМаркамТранспорта[ИнтервалДоступности.Марка];
								Если ОграничениеПоМарке = Неопределено Тогда
									Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоВесу Тогда
										ТранспортМаршрута.МаксВес = ИнтервалДоступности.Грузоподъемность * 1000 * СценарийПланирования.МаксимальнаяЗагрузкаПоВесу / 100;
									Иначе
										ТранспортМаршрута.МаксВес = 1.7976931348623157 * Pow(10, 308);
									КонецЕсли;
									Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоОбъему Тогда
										ТранспортМаршрута.МаксОбъем = ИнтервалДоступности.ОбъемКузова * СценарийПланирования.МаксимальнаяЗагрузкаПоОбъему / 100;
									Иначе
										ТранспортМаршрута.МаксОбъем = 1.7976931348623157 * Pow(10, 308);
									КонецЕсли;
									Если не СценарийПланирования.НеКонтролироватьКоличествоТочекВРейсе Тогда
										ТранспортМаршрута.МаксЧислоПунктовДоставкиДляМашины = СценарийПланирования.МаксимальноеКоличествоТочекВРейсе;
									Иначе
										ТранспортМаршрута.МаксЧислоПунктовДоставкиДляМашины = 2147483647;
									КонецЕсли;
								Иначе
									Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоВесу Тогда
										ТранспортМаршрута.МаксВес = ИнтервалДоступности.Грузоподъемность * 1000 * ОграничениеПоМарке.МаксимальнаяЗагрузкаПоВесу / 100;
									Иначе
										ТранспортМаршрута.МаксВес = 1.7976931348623157 * Pow(10, 308);
									КонецЕсли;
									Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоОбъему Тогда
										ТранспортМаршрута.МаксОбъем = ИнтервалДоступности.ОбъемКузова * ОграничениеПоМарке.МаксимальнаяЗагрузкаПоОбъему / 100;
									Иначе
										ТранспортМаршрута.МаксОбъем = 1.7976931348623157 * Pow(10, 308);
									КонецЕсли;
									Если не СценарийПланирования.НеКонтролироватьКоличествоТочекВРейсе Тогда
										ТранспортМаршрута.МаксЧислоПунктовДоставкиДляМашины = ОграничениеПоМарке.МаксимальноеКоличествоТочек;
									Иначе
										ТранспортМаршрута.МаксЧислоПунктовДоставкиДляМашины = 2147483647;
									КонецЕсли;
								КонецЕсли;
								ТранспортМаршрута.ВремяНачалаРаботыМашины = ИнтервалДоступности.НачалоПериода;
								ТранспортМаршрута.ВремяКонцаРаботыМашины = ИнтервалДоступности.ОкончаниеПериода;
								Если ЗначениеЗаполнено(ИнтервалДоступности.НачалоРейса) Тогда
									ТранспортМаршрута.СтартоваяТочкаРейса.Ид = Строка(ИнтервалДоступности.НачалоРейса.УникальныйИдентификатор());
								Иначе
									Если ЗначениеЗаполнено(ИнтервалДоступности.КонецПредыдущегоРейса) Тогда
										ТранспортМаршрута.СтартоваяТочкаРейса.Ид = Строка(ИнтервалДоступности.КонецПредыдущегоРейса.УникальныйИдентификатор());
									Иначе
										ТранспортМаршрута.СтартоваяТочкаРейса.Ид = Строка(ДоставкиПоСкладу.ТочкаОтправления.УникальныйИдентификатор());
									КонецЕсли;
								КонецЕсли;
								ТранспортМаршрута.СтартоваяТочкаРейса.ВремяНачалаВременногоОкна = ИнтервалДоступности.НачалоПериода;
								ТранспортМаршрута.СтартоваяТочкаРейса.ВремяОкончанияВременногоОкна = ИнтервалДоступности.ОкончаниеПериода;
								Если ЗначениеЗаполнено(ИнтервалДоступности.НачалоРейса) Тогда
									ТранспортМаршрута.КонечнаяТочкаРейса.Ид = Строка(ИнтервалДоступности.НачалоРейса.УникальныйИдентификатор());
								Иначе
									ТранспортМаршрута.КонечнаяТочкаРейса.Ид = Строка(ДоставкиПоСкладу.ТочкаОтправления.УникальныйИдентификатор());
								КонецЕсли;
								ТранспортМаршрута.КонечнаяТочкаРейса.ВремяНачалаВременногоОкна = ИнтервалДоступности.НачалоПериода;
								ТранспортМаршрута.КонечнаяТочкаРейса.ВремяОкончанияВременногоОкна = ИнтервалДоступности.ОкончаниеПериода;
								
								ПостановкаЗадачи.СписокТранспорта.Добавить(ТранспортМаршрута);
								
								ВключенныеИнтервалыДоступности.Вставить(ИнтервалДоступности.ИдентификаторПериодаДоступности, Истина)
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ТранспортПоРайону <> Неопределено Тогда
						
						Для каждого ИнтервалДоступности Из ТранспортПоРайону.Строки Цикл
							
							Если ВключенныеИнтервалыДоступности[ИнтервалДоступности.ИдентификаторПериодаДоступности] = Неопределено Тогда
								
								ТранспортМаршрута = КСЛ.Доставка_Автораспределение_Транспорт2();
								ТранспортМаршрута.Ид = Строка(ИнтервалДоступности.ИдентификаторПериодаДоступности);
								ОграничениеПоМарке = ОграниченияПоМаркамТранспорта[ИнтервалДоступности.Марка];
								Если ОграничениеПоМарке = Неопределено Тогда
									Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоВесу Тогда
										ТранспортМаршрута.МаксВес = ИнтервалДоступности.Грузоподъемность * 1000 * СценарийПланирования.МаксимальнаяЗагрузкаПоВесу / 100;
									Иначе
										ТранспортМаршрута.МаксВес = 1.7976931348623157 * Pow(10, 308);
									КонецЕсли;
									Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоОбъему Тогда
										ТранспортМаршрута.МаксОбъем = ИнтервалДоступности.ОбъемКузова * СценарийПланирования.МаксимальнаяЗагрузкаПоОбъему / 100;
									Иначе
										ТранспортМаршрута.МаксОбъем = 1.7976931348623157 * Pow(10, 308);
									КонецЕсли;
									Если не СценарийПланирования.НеКонтролироватьКоличествоТочекВРейсе Тогда
										ТранспортМаршрута.МаксЧислоПунктовДоставкиДляМашины = СценарийПланирования.МаксимальноеКоличествоТочекВРейсе;
									Иначе
										ТранспортМаршрута.МаксЧислоПунктовДоставкиДляМашины = 2147483647;
									КонецЕсли;
								Иначе
									Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоВесу Тогда
										ТранспортМаршрута.МаксВес = ИнтервалДоступности.Грузоподъемность * 1000 * ОграничениеПоМарке.МаксимальнаяЗагрузкаПоВесу / 100;
									Иначе
										ТранспортМаршрута.МаксВес = 1.7976931348623157 * Pow(10, 308);
									КонецЕсли;
									Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоОбъему Тогда
										ТранспортМаршрута.МаксОбъем = ИнтервалДоступности.ОбъемКузова * ОграничениеПоМарке.МаксимальнаяЗагрузкаПоОбъему / 100;
									Иначе
										ТранспортМаршрута.МаксОбъем = 1.7976931348623157 * Pow(10, 308);
									КонецЕсли;
									Если не СценарийПланирования.НеКонтролироватьКоличествоТочекВРейсе Тогда
										ТранспортМаршрута.МаксЧислоПунктовДоставкиДляМашины = ОграничениеПоМарке.МаксимальноеКоличествоТочек;
									Иначе
										ТранспортМаршрута.МаксЧислоПунктовДоставкиДляМашины = 2147483647;
									КонецЕсли;
								КонецЕсли;
								ТранспортМаршрута.ВремяНачалаРаботыМашины = ИнтервалДоступности.НачалоПериода;
								ТранспортМаршрута.ВремяКонцаРаботыМашины = ИнтервалДоступности.ОкончаниеПериода;
								Если ЗначениеЗаполнено(ИнтервалДоступности.НачалоРейса) Тогда
									ТранспортМаршрута.СтартоваяТочкаРейса.Ид = Строка(ИнтервалДоступности.НачалоРейса.УникальныйИдентификатор());
								Иначе
									Если ЗначениеЗаполнено(ИнтервалДоступности.КонецПредыдущегоРейса) Тогда
										ТранспортМаршрута.СтартоваяТочкаРейса.Ид = Строка(ИнтервалДоступности.КонецПредыдущегоРейса.УникальныйИдентификатор());
									Иначе
										ТранспортМаршрута.СтартоваяТочкаРейса.Ид = Строка(ДоставкиПоСкладу.ТочкаОтправления.УникальныйИдентификатор());
									КонецЕсли;
								КонецЕсли;
								ТранспортМаршрута.СтартоваяТочкаРейса.ВремяНачалаВременногоОкна = ИнтервалДоступности.НачалоПериода;
								ТранспортМаршрута.СтартоваяТочкаРейса.ВремяОкончанияВременногоОкна = ИнтервалДоступности.ОкончаниеПериода;
								Если ЗначениеЗаполнено(ИнтервалДоступности.НачалоРейса) Тогда
									ТранспортМаршрута.КонечнаяТочкаРейса.Ид = Строка(ИнтервалДоступности.НачалоРейса.УникальныйИдентификатор());
								Иначе
									ТранспортМаршрута.КонечнаяТочкаРейса.Ид = Строка(ДоставкиПоСкладу.ТочкаОтправления.УникальныйИдентификатор());
								КонецЕсли;
								ТранспортМаршрута.КонечнаяТочкаРейса.ВремяНачалаВременногоОкна = ИнтервалДоступности.НачалоПериода;
								ТранспортМаршрута.КонечнаяТочкаРейса.ВремяОкончанияВременногоОкна = ИнтервалДоступности.ОкончаниеПериода;
								
								ПостановкаЗадачи.СписокТранспорта.Добавить(ТранспортМаршрута);
								
								ВключенныеИнтервалыДоступности.Вставить(ИнтервалДоступности.ИдентификаторПериодаДоступности, Истина)
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Для ИндексТочкиКластера = 0 По ТекущийКластер.Точки.Количество() - 1 Цикл
						
						ТекущаяТочкаКластера = ТекущийКластер.Точки.Получить(ИндексТочкиКластера);
						
						Доставка = ДоставкиПоТочкамКластера[ТекущаяТочкаКластера.Ид];
						
						ТочкаМаршрута = КСЛ.МодельДанных_Доставка_ЗадачаКоммивояжера_ВнутренниеДанныеЗадачиКоммивояжера_Маршрут_ТочкаМаршрута2();
						ТочкаМаршрута.Ид = Строка(Доставка.ТочкаПрибытия.УникальныйИдентификатор());
						ТочкаМаршрута.ИдДоставки = Строка(Доставка.Доставка.УникальныйИдентификатор());
						ТочкаМаршрута.ВремяНачалаВременногоОкна = Доставка.ВремяПрибытияС;
						ТочкаМаршрута.ВремяОкончанияВременногоОкна = Доставка.ВремяПрибытияПо;
						ТочкаМаршрута.ВремяРазгрузки = Доставка.ВремяРазгрузки - '00010101';
						ТочкаМаршрута.ВремяПогрузки = Доставка.ВремяПогрузки - '00010101';
						
						Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоВесу Тогда
							ТочкаМаршрута.Вес = Доставка.Вес;
						Иначе
							ТочкаМаршрута.Вес = 0;
						КонецЕсли;
						Если не СценарийПланирования.НеКонтролироватьЗагрузкуПоОбъему Тогда
							ТочкаМаршрута.Объем = Доставка.Объем;
						Иначе
							ТочкаМаршрута.Объем = 0;
						КонецЕсли;
						
						ПостановкаЗадачи.СписокТочекДоставки.Добавить(ТочкаМаршрута);
						
						ШагПрогресса = ШагПрогресса + 1;
					КонецЦикла;
					
					РещениеТранспортнойЗадачи = КСЛ.Доставка_Автораспределение_ВыполнениеАвтопланированияНаКлиенте();
					Результат = РещениеТранспортнойЗадачи.РаспределитьДоставкиПоМашинам(ПостановкаЗадачи);
					
					ПрименитьРезультатРешения(Результат, Транспорт, ДоставкиПоРайону, ДоставкиПоСкладу.ТочкаОтправления);
				КонецЦикла;
				
				ШагПрогресса = ШагПрогресса + 1;
				
				#Если Клиент Тогда
					ФормаИндикатора.ОбновитьЗначение(ШагПрогресса);
				#КонецЕсли
			КонецЦикла;
			
			ШагПрогресса = ШагПрогресса + 1;
		КонецЦикла;
		
		ШагПрогресса = ШагПрогресса + 1;
	КонецЦикла;
	
	#Если Клиент Тогда
		ФормаИндикатора.Закрыть();
	#КонецЕсли
	
КонецПроцедуры

//Удаление запланированных доставок - формирование списка проблемных доставок
//
Процедура ОбработатьДоставкиПоРезультатамШагаАвтоПланирования(Доставки)
	
	НеРаспределенныеДоставки = Новый Массив;
	РаспределенныеДоставки = Новый Соответствие;
	
	Для каждого ТекущийРейс Из РезультатПланирования.Строки Цикл
		
		Для каждого ТекущаяТочкаМаршрута Из ТекущийРейс.Строки Цикл
			
			Для каждого ТекущаяДоставкаМаршрута Из ТекущаяТочкаМаршрута.Строки Цикл
				
				РаспределенныеДоставки.Вставить(ТекущаяДоставкаМаршрута.ДоставкаМаршрута, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УдаляемыеСтроки = Новый Массив;
	
	Для каждого ДоставкиПоКатегориям Из Доставки.Строки Цикл
		
		Для каждого ДоставкиПоСкладу Из ДоставкиПоКатегориям.Строки Цикл
			
			Для каждого ДоставкиПоРайону Из ДоставкиПоСкладу.Строки Цикл
				
				Для каждого Доставка Из ДоставкиПоРайону.Строки Цикл
					
					Если РаспределенныеДоставки[Доставка.Доставка] = Истина Тогда
						УдаляемыеСтроки.Добавить(Доставка);
					Иначе
						НеРаспределенныеДоставки.Добавить(Доставка.Доставка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		
		АнализируемаяСтрока = УдаляемаяСтрока;
		
		Пока АнализируемаяСтрока.Родитель <> Неопределено Цикл
			
			Родитель = АнализируемаяСтрока.Родитель;
			Родитель.Строки.Удалить(АнализируемаяСтрока);
			АнализируемаяСтрока = Родитель;
			Если Родитель.Строки.Количество() <> 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если АнализируемаяСтрока.Родитель = Неопределено Тогда
			Если АнализируемаяСтрока.Строки.Количество() = 0 Тогда
				Доставки.Строки.Удалить(АнализируемаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Проверка на совпадение списков
//
Функция СпискиСовпадают(Список1, Список2)
	
	Результат = (Список1.Количество() = Список2.Количество());
	
	Если Результат Тогда
		
		Для каждого ЭлементСписок1 Из Список1 Цикл
			
			Результат = Результат и (Список2.Найти(ЭлементСписок1) <> Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Выполнение автопланирования
//
Процедура ВыполнитьАвтопланирование() Экспорт
	
	Если не ЗначениеЗаполнено(СценарийПланирования) Тогда
		#Если не ВнешнееСоединение Тогда
			Сообщить("Не указан сценарий автопланирорвания", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	РезультатПланирования.Строки.Очистить();
	НеРаспределенныеДоставки = Новый Массив;
	
	ИтерацияАвтопланирования = 0;
	
	Доставки = ПолучитьДоставки();
	Транспорт = ПолучитьТранспорт();
	
	ПриниматьПлохиеРейсы = Ложь;
	
	Пока Истина Цикл
		
		ПредылущиеПроблемныеДоставки = НеРаспределенныеДоставки;
		
		ИтерацияАвтопланирования = ИтерацияАвтопланирования + 1;
		
		ВыполнитьШагАвтопланирования(Доставки, Транспорт, ИтерацияАвтопланирования);
		ОбработатьДоставкиПоРезультатамШагаАвтоПланирования(Доставки);
		
		Если СпискиСовпадают(ПредылущиеПроблемныеДоставки, НеРаспределенныеДоставки) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПриниматьПлохиеРейсы = Истина;
	ВыполнитьШагАвтопланирования(Доставки, Транспорт, ИтерацияАвтопланирования + 1);
	ОбработатьДоставкиПоРезультатамШагаАвтоПланирования(Доставки);
	
КонецПроцедуры

//Формирование рейсов
//
Процедура СформироватьРейсы() Экспорт
	
	#Если Клиент Тогда
		
		ФормаИндикатора = ПолучитьОбщуюФорму("новаФормаИндикатора", , "ПрогрессЗаписиРейсовВБазу");
		ФормаИндикатора.Заголовок = "Запись рейсов";
		ФормаИндикатора.МинимальноеЗначение = 0;
		ФормаИндикатора.МаксимальноеЗначение = РезультатПланирования.Строки.Количество();
		ФормаИндикатора.КартинкаЗаголовка = БиблиотекаКартинок.новаАвтоматическоеПланирование;	
		ФормаИндикатора.Открыть();
	#КонецЕсли
	
	УдаляемыеСтроки = Новый Массив;
	
	НачатьТранзакцию();
	
	ШагПрогресса = 0;
	ОбщееКоличествоРейсов = РезультатПланирования.Строки.Количество();
	
	Для каждого ТекущийРейс Из РезультатПланирования.Строки Цикл
		
		#Если Клиент Тогда
			ФормаИндикатора.ОбновитьСостояние("Обрабатывается рейс №" + ШагПрогресса + " из " + ОбщееКоличествоРейсов);
		#КонецЕсли
		
		Если не ТекущийРейс.Принят Тогда
			
			ШагПрогресса = ШагПрогресса + 1;
			#Если Клиент Тогда
				ФормаИндикатора.ОбновитьЗначение(ШагПрогресса);
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		УдаляемыеСтроки.Добавить(ТекущийРейс);
		
		Рейс = БизнесПроцессы.новаРейсМестнойДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор());
		обРейс = БизнесПроцессы.новаРейсМестнойДоставки.СоздатьБизнесПроцесс();
		обРейс.УстановитьСсылкуНового(Рейс);
		обРейс.Дата = ТекущаяДата();
		обРейс.Транспорт = ТекущийРейс.Транспорт;
		обРейс.Водитель = ТекущийРейс.Водитель;
		обРейс.ДатаНачала = ТекущийРейс.Выезд;
		обРейс.ДатаКонца = ТекущийРейс.Завершение;
		обРейс.НачалоРейса = ТекущийРейс.ТочкаНачалаРейса;
		обРейс.КонецРейса = ТекущийРейс.ТочкаОкончанияРейса;
		обРейс.ЧасовойПояс = ПараметрыСеанса.новаТекущийПользователь.ЧасовойПояс;
		обРейс.КоэффициентСкорости = СценарийПланирования.КоэффициентСкорости;
		обРейс.МаксимальноеВремяОжидания = Константы.новаМаксимальноеВремяОжиданияРазгрузкиПоУмолчанию.Получить();
		
		обРейс.НачалоРейсаУказаноВручную = Истина;
		обРейс.КонецРейсаУказанВручную = Истина;
			
		обМаршрут = Обработки.новаИсточникМаршрутРейса.Создать();
		стРейс = обМаршрут.НачатьРедактирование(Рейс, обРейс);
		
		Для каждого ТекущаяТочкаМаршрута Из ТекущийРейс.Строки Цикл
			
			Для каждого ТекущаяДоставкаМаршрута Из ТекущаяТочкаМаршрута.Строки Цикл
				
				обМаршрут.ДобавитьДоставку(Рейс, ТекущаяДоставкаМаршрута.ДоставкаМаршрута);
			КонецЦикла;
		КонецЦикла;
		
		обМаршрут.ПересчитатьРейс_(стРейс, Истина);
		
		обРейс.Старт();
		
		ШагПрогресса = ШагПрогресса + 1;
		
		#Если Клиент Тогда
			ФормаИндикатора.ОбновитьЗначение(ШагПрогресса);
		#КонецЕсли
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	#Если Клиент Тогда
		
		мсТаблицы = Новый Массив;
		мсТаблицы.Добавить("Задача.новаЗадачаМестнойДоставки");
		мсТаблицы.Добавить("Задача.новаЗадачаРейсаМестнойДоставки");
		новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсТаблицы);
		
		Оповестить("ОбновленКалендарьВозможныхРейсов");
	#КонецЕсли
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		РезультатПланирования.Строки.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	#Если Клиент Тогда
		ФормаИндикатора.Закрыть();
	#КонецЕсли
	
КонецПроцедуры

РезультатПланирования.Колонки.Добавить("Принят", Новый ОписаниеТипов("Булево"));
РезультатПланирования.Колонки.Добавить("РейсСоответствуетТребованиям", Новый ОписаниеТипов("Булево"));
РезультатПланирования.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
РезультатПланирования.Колонки.Добавить("Иерархия", Новый ОписаниеТипов("БизнесПроцессСсылка.новаМестнаяДоставка, СправочникСсылка.новаТранспорт, СправочникСсылка.новаТочкиДоставки"));
РезультатПланирования.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.новаТранспорт"));
РезультатПланирования.Колонки.Добавить("ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
РезультатПланирования.Колонки.Добавить("ДоставкаМаршрута", Новый ОписаниеТипов("БизнесПроцессСсылка.новаМестнаяДоставка"));
РезультатПланирования.Колонки.Добавить("Водитель", Новый ОписаниеТипов("СправочникСсылка.новаВодители"));
РезультатПланирования.Колонки.Добавить("Выезд", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
РезультатПланирования.Колонки.Добавить("Завершение", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
РезультатПланирования.Колонки.Добавить("ПрибытиеВТочкуМаршрута", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
РезультатПланирования.Колонки.Добавить("УбытиеИзТочкиМаршрута", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
РезультатПланирования.Колонки.Добавить("ТочкаНачалаРейса", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
РезультатПланирования.Колонки.Добавить("ТочкаСклада", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
РезультатПланирования.Колонки.Добавить("ТочкаОкончанияРейса", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
РезультатПланирования.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
РезультатПланирования.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
РезультатПланирования.Колонки.Добавить("Пробег", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
РезультатПланирования.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Время)));
РезультатПланирования.Колонки.Добавить("КоличествоТочекВРейсе", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
РезультатПланирования.Колонки.Добавить("КоличествоДоставокВРейсе", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
РезультатПланирования.Колонки.Добавить("ПроцентЗагрузкиПоВесу", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
РезультатПланирования.Колонки.Добавить("ПроцентЗагрузкиПоОбъему", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
