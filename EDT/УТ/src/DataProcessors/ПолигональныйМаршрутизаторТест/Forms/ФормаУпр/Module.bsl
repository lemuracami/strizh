#Область РаботаСФильтрами

&НаКлиенте
Процедура УстановитьВыбранныйФильтр(Элемент)
	Струк = Новый Структура;
	Струк.Вставить("ЭлементФильтра", Элемент.Имя);
	
	НайденнаяСтрока = ТабЭлементовФильтра.НайтиСтроки(Струк)[0];
	
	
	Струк = Новый Структура;
	Струк.Вставить("ЭлементРодитель", НайденнаяСтрока.ЭлементРодитель);
	СоседниеЭлементы = ТабЭлементовФильтра.НайтиСтроки(Струк);
	
	
	Если ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 1 Или ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 0 Тогда
		Если СоседниеЭлементы.Количество() > 1 Тогда
			ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 2;
		Иначе
			ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = ЭтаФорма[Элемент.Имя];
		КонецеСли;	
	ИначеЕсли ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 2 Тогда //верхний флажок уже в третьем состоянии
		
		ЕстьПервоеСостояние = Ложь;
		ЕстьВтороеСостояние = Ложь;
		Для Каждого Тек Из СоседниеЭлементы Цикл
			Если ЭтаФорма[Тек.ЭлементФильтра] = 0 Тогда
				ЕстьПервоеСостояние = Истина;
			КонецЕсли;
			
			Если ЭтаФорма[Тек.ЭлементФильтра] = 1 Тогда
				ЕстьВтороеСостояние = Истина;
			КонецЕсли;
			
			Если ЕстьПервоеСостояние И ЕстьВтороеСостояние тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не ЕстьВтороеСостояние Тогда
			ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 0;
		ИначеЕсли Не ЕстьПервоеСостояние Тогда
			ЭтаФорма[НайденнаяСтрока.ЭлементРодитель] = 1;
		КонецеСли;	
	КонецеСли;	
	
	Если ЭтаФорма[НайденнаяСтрока.ЭлементФильтра] = 1 Тогда
		НайденнаяСтрока.Активен = Истина;
	ИначеЕсли ЭтаФорма[НайденнаяСтрока.ЭлементФильтра] = 0 Тогда	
		НайденнаяСтрока.Активен = Ложь;
	КонецЕсли;	
	
	ОбновитьДанные(Истина, Истина, Истина);
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВыбраннуюГруппуФильтров(Элемент)
	Если ЭтаФорма[Элемент.Имя] = 2 Тогда
		ЭтаФорма[Элемент.Имя] = 0;
	КонецеСли;	
	
	
	Струк = Новый Структура;
	Струк.Вставить("ЭлементРодитель", Элемент.Имя);
	
	НайденныеСтроки = ТабЭлементовФильтра.НайтиСтроки(Струк);
	Для Каждого Тек Из НайденныеСтроки Цикл
		ЭтаФорма[Тек.ЭлементФильтра] = ЭтаФорма[Элемент.Имя];
		Если ЭтаФорма[Элемент.Имя] = 1 Тогда
			Тек.Активен = Истина;
		ИначеЕсли ЭтаФорма[Элемент.Имя] = 0 Тогда
			Тек.Активен = Ложь;
		КонецеСли;	
	КонецЦикла;	
	ОбновитьДанные(Истина, Истина, Истина);
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементФильтраНаФорму(СтрокаТаблицы)
	Если Не СтрокаТаблицы.ЭтоГруппа Тогда
		ИмяДанных = "ФильтрКод" + СтрокаТаблицы.Код;
	Иначе
		ИмяДанных = "ГруппаФильтровКод" + СтрокаТаблицы.Код;
	КонецеСли;	
	
	
	Если СтрокаТаблицы.НомерКолонки = 0 Или СтрокаТаблицы.НомерКолонки = 1 Тогда
		РодительКолонки = "ГруппаФильтровПерваяКолонка";
	ИначеЕсли СтрокаТаблицы.НомерКолонки = 2 Тогда	
		РодительКолонки = "ГруппаФильтровВтораяКолонка";
	Иначе
		РодительКолонки = "ГруппаФильтровВтораяКолонка";
	КонецеСли;	
	
	
	НовыйЭлемент = Элементы.Добавить(ИмяДанных, Тип("ПолеФормы"), Элементы[РодительКолонки]);
	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	
	
	НовыйЭлемент.ПутьКДанным = ИмяДанных;
	
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	
	
	НовыйЭлемент.Заголовок = СтрокаТаблицы.Наименование;
	НовыйЭлемент.Ширина = 20;
	НовыйЭлемент.МаксимальнаяШирина = 20;
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	Если СтрокаТаблицы.ЭтоГруппа Тогда
		НовыйЭлемент.ТриСостояния = Истина;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "УстановитьВыбраннуюГруппуФильтров");
		НовыйЭлемент.ШрифтЗаголовка = Новый Шрифт(НовыйЭлемент.ШрифтЗаголовка,,,Истина); 
	Иначе
		НовыйЭлемент.ТриСостояния = Ложь;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "УстановитьВыбранныйФильтр");
	КонецеСли;	
	
	Если Не СтрокаТаблицы.ЭтоГруппа Тогда
		Нов = ТабЭлементовФильтра.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, СтрокаТаблицы);
		Нов.ЭлементФильтра = ИмяДанных;
		Нов.ЭлементРодитель = "ГруппаФильтровКод" + СтрокаТаблицы.КодРодителя;
		Нов.ЛогическаяОперация = "ИЛИ";
	КонецеСли;
	
	
КонецПроцедуры	

&НаСервере
Процедура ИнициализацияЭлементовФильтров()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ФильтрыОтбораДанныхПМ.ЭтоГруппа КАК ЭтоГруппа,
	            |	ФильтрыОтбораДанныхПМ.Наименование КАК Наименование,
	            |	ФильтрыОтбораДанныхПМ.СтрокаФильтраПолигонов КАК СтрокаФильтровПолигонов,
	            |	ФильтрыОтбораДанныхПМ.СтрокаФильтраРейсов КАК СтрокаФильтровРейсов,
	            |	ФильтрыОтбораДанныхПМ.Порядок КАК Порядок,
	            |	ФильтрыОтбораДанныхПМ.НомерКолонки КАК НомерКолонки,
	            |	ФильтрыОтбораДанныхПМ.Ссылка КАК Фильтр,
	            |	ФильтрыОтбораДанныхПМ.Родитель.Код КАК КодРодителя,
	            |	ФильтрыОтбораДанныхПМ.Родитель КАК Родитель,
	            |	ФильтрыОтбораДанныхПМ.Код КАК Код
	            |ИЗ
	            |	Справочник.ФильтрыОтбораДанныхПМ КАК ФильтрыОтбораДанныхПМ
	            |ГДЕ
	            |	ФильтрыОтбораДанныхПМ.ПометкаУдаления = ЛОЖЬ
	            |	И ФильтрыОтбораДанныхПМ.НеАктуально = ЛОЖЬ
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ЭтоГруппа УБЫВ,
	            |	Порядок";
	
	ТабЭлементов = Зап.Выполнить().Выгрузить();
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого Тек Из ТабЭлементов Цикл
		Если Не Тек.ЭтоГруппа Тогда
			ИмяДанных = "ФильтрКод" + Тек.Код;
		Иначе
			ИмяДанных = "ГруппаФильтровКод" + Тек.Код;
		КонецеСли;	
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяДанных, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0))));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	ТабЭлементовКопия = ТабЭлементов.Скопировать();
	
	
	Для Каждого Тек Из ТабЭлементов Цикл
		Если Не Тек.ЭтоГруппа Тогда
			Продолжить;
		КонецеСли;	
		ДобавитьЭлементФильтраНаФорму(Тек);
		
		Струк = Новый Структура;
		Струк.Вставить("Родитель", Тек.Фильтр);
		
		СтрокиПодчиненныхЭлементов = ТабЭлементовКопия.НайтиСтроки(Струк);
		Для Каждого ПодчиненныйЭлемент Из СтрокиПодчиненныхЭлементов Цикл
			ДобавитьЭлементФильтраНаФорму(ПодчиненныйЭлемент);
		КонецЦикла;	
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере
Функция СтрокаУсловийФильтра(Дерево)
	СтрокаФильтра = "";
	Для Каждого Тек Из ТабЭлементовФильтра Цикл
		Если Тек.Активен Тогда
			Если Дерево = "ДеревоПолигоновСЗаказами" Тогда
				Если СокрЛП(Тек.СтрокаФильтровПолигонов) <> "" Тогда
					СтрокаФильтра = СтрокаФильтра + " ИЛИ " + Тек.СтрокаФильтровПолигонов;
				КонецЕсли;	
			ИначеЕсли Дерево = "ДеревоРейсовСЗаказами" Тогда
				Если СокрЛП(Тек.СтрокаФильтровРейсов) <> "" Тогда
					СтрокаФильтра = СтрокаФильтра + " ИЛИ " + Тек.СтрокаФильтровРейсов;
				КонецеСли;	
			КонецеСли;	
		КонецеСли;	
	КонецЦикла;	
	Если ЗначениеЗаполнено(СтрокаФильтра) Тогда
		Возврат " И (" + Прав(СтрокаФильтра, СтрДлина(СтрокаФильтра) - 5) + ")";
	Иначе	
		Возврат "";
	КонецеСли;	
КонецФункции	
#КонецОбласти

#Область РаботаСДинамическимиПолямиДеревьев

&НаСервере
Процедура ДобавитьВОформлениеЭлементыДинамическихКолонок(КоллекцияПолей, Суффикс)
	Выб = ПолигональнаяМаршрутизацияСервер.ВыполнитьЗапросПоКолонкамБрейков(СхемаЛогистическихБрейков);
	
	ТипДоставка = Перечисления.ТипыЗаказов.Доставка;
	
	Стр = "";
	Пока Выб.Следующий() Цикл
		НазваниеКолонки = СтрЗаменить(Выб.НазваниеКолонки, " ", "");
		
		
		
		ОформляемоеПоле      = КоллекцияПолей.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки + Суффикс);
		Если Выб.ТипЗаказа = ТипДоставка Тогда
			ОформляемоеПоле      = КоллекцияПолей.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки + "_" + Суффикс);
		КонецеСли;
	КонецЦикла;
	
	
	ОформляемоеПоле      = КоллекцияПолей.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("NK" + Суффикс);
	ОформляемоеПоле      = КоллекцияПолей.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("NK_" + Суффикс);
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДерева()
	Выб = ПолигональнаяМаршрутизацияСервер.ВыполнитьЗапросПоКолонкамБрейков(СхемаЛогистическихБрейков);
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("ИмяКолонки");
	
	Стр = "";
	Пока Выб.Следующий() Цикл
		НазваниеКолонки = СтрЗаменить(Выб.НазваниеКолонки, " ", "");
		Нов = Таб.Добавить();
		Нов.ИмяКолонки = НазваниеКолонки;
	КонецЦикла;
	Возврат Таб;
КонецФункции	
#КонецОбласти


#Область РаботаСДеревомПолигонов
&НаСервере
Процедура РассчитатьИтоговоеКоличествоЗаказов()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказовИтого,
	            |	1 КАК ТипЗаказа
	            |ИЗ
	            |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	            |ГДЕ
	            |	ДополнительныеПараметрыЗаказа.Доставка <> ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка)
	            |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
	            |	И РеализацияТоваровУслуг.Дата Между &ДатаНач и &ДатаКон
	            |	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	            |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаборТовара.Ссылка),
	            |	2
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.ТерминалДоставки = &ТерминалДоставки
	            |	И ЗаборТовара.Дата Между &ДатаНач и &ДатаКон
	            |	И ЗаборТовара.ПометкаУдаления = ЛОЖЬ
	            |	И ЗаборТовара.СтатусИнтернетМагазина = 2";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	КоличествоЗаказовИтого = 0;
	
	Пока Выб.Следующий() Цикл
		Если Выб.ТипЗаказа = 1 Тогда
			КоличествоЗаказовИтого = Выб.КоличествоЗаказовИтого;
		ИначеЕсли Выб.ТипЗаказа = 2 Тогда	
			КоличествоЗаборовИтого = Выб.КоличествоЗаказовИтого;
		КонецеСли;	
	КонецЦикла;	
	
	
	Если ЗначениеЗаполнено(ЗаборнаяКатегория.АббревиатураКолонкиВПолигональномМаршрутизаторе) Тогда
		НазваниеКолонкиЗабора = ЗаборнаяКатегория.АббревиатураКолонкиВПолигональномМаршрутизаторе;
	Иначе
		НазваниеКолонкиЗабора = ЗаборнаяКатегория.Наименование;
	КонецеСли;
	
	НазваниеКолонкиЗабора = СокрЛП(СтрЗаменить(НазваниеКолонкиЗабора, " ", ""));
	
	Дерево = РеквизитФормыВЗначение("ДеревоПолигоновСЗаказами", Тип("ДеревоЗначений"));
	
	КоличествоНемаршрутизированныхЗаборов = 0;
	КоличествоНемаршрутизированныхЗаказов = 0;
	
	//МасНомеров = Новый Массив;
	
	Для Каждого Тек Из Дерево.Строки Цикл
		//Если Не ЗначениеЗаполнено(Тек.ПолигонМаршрутизации) Тогда
		//	КоличествоЗаказовИтого = КоличествоЗаказовИтого - Тек.Итого;
		//	КоличествоЗаборовИтого = КоличествоЗаборовИтого - Тек[НазваниеКолонкиЗабора];
		//	Продолжить;
		//КонецеСли;
		
		КоличествоНемаршрутизированныхЗаборов = КоличествоНемаршрутизированныхЗаборов + Тек[НазваниеКолонкиЗабора];
		КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов + Тек.Итого;
		//Для Каждого Т Из Тек.Строки Цикл
		//	Если МасНомеров.Найти(Т.НомерЗаказа) = Неопределено Тогда
		//		МасНомеров.Добавить(Т.НомерЗаказа);
		//	Иначе
		//		Сообщить("!!" + Строка(Т.ПолигонМаршрутизации) + " - " + Строка(Т.НомерЗаказа));
		//	КонецеСли;	
		//КонецЦикла;	
	КонецЦикла;	
	КоличествоНемаршрутизированныхЗаказов = КоличествоНемаршрутизированныхЗаказов - КоличествоНемаршрутизированныхЗаборов; //????? непонятно???
	
	//Если КоличествоНемаршрутизированныхЗаборов = 0 Тогда
	//	Элементы.КоличествоНемаршрутизированныхЗаборов.ЦветФона = Новый Цвет;
	//Иначе	
	//	Элементы.КоличествоНемаршрутизированныхЗаборов.ЦветФона = WebЦвета.Красный;		
	//КонецеСли;	
	//
	//Если КоличествоНемаршрутизированныхЗаказов = 0 Тогда
	//	Элементы.КоличествоНемаршрутизированныхЗаказов.ЦветФона = Новый Цвет;
	//Иначе	
	//	Элементы.КоличествоНемаршрутизированныхЗаказов.ЦветФона = WebЦвета.Красный;
	//КонецеСли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ОформлениеКолонки(ЭлементФормы, ИмяКолонки)
	ЭлементФормы.Ширина = 2;
	ЭлементФормы.МаксимальнаяШирина = 2;
	
	
	Если ИмяКолонки = "НомерЗаказа" Тогда
		ЭлементФормы.Заголовок = "№";
		ЭлементФормы.Ширина = 9;
		ЭлементФормы.МаксимальнаяШирина = 9;
		
	ИначеЕсли ИмяКолонки = "ПолигонМаршрутизации" Тогда	
		ЭлементФормы.Заголовок = "Полигон";
		ЭлементФормы.Ширина = 9;
		ЭлементФормы.МаксимальнаяШирина = 9;
	ИначеЕсли ИмяКолонки = "ЗаказСсылка" Или ИмяКолонки = "УИД" Или ИмяКолонки = "ВесЗаказа" Или ИмяКолонки = "Партнер" Или ИмяКолонки = "ВремяПрибытияС" Или ИмяКолонки = "ВремяПрибытияПо" Или ИмяКолонки = "ОбъемЗабора" Или ИмяКолонки = "КатегорияЗаказа" Тогда	
		ЭлементФормы.Видимость = Ложь;
	ИначеЕсли ИмяКолонки = "Итого" Тогда	
		ЭлементФормы.Заголовок = "Ит";
		ЭлементФормы.Шрифт = Новый Шрифт(ЭлементФормы.Шрифт,,,Истина);
		ЭлементФормы.Ширина = 3;
		ЭлементФормы.МаксимальнаяШирина = 3;
	ИначеЕсли ИмяКолонки = "Отметка" Тогда	
		ЭлементФормы.Заголовок = "V";
		ЭлементФормы.Ширина = 2;
		ЭлементФормы.МаксимальнаяШирина = 2;
		ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементФормы.ТриСостояния = Истина;
		ЭлементФормы.ТолькоПросмотр = Ложь;
		ЭлементФормы.УстановитьДействие("ПриИзменении", "ИзменениеФлажкаНаПолигонах"); 
	КонецеСли;	
КонецПроцедуры	

&НаСервере
Процедура УстановкаУсловногоОформленияСпискаПолигонов()
	//подсветка без полигона
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами.ПолигонМаршрутизации"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	ЭлементОтбора.ПравоеЗначение = Справочники.ПолигоныМаршрутизации.ПустаяСсылка();
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лосось);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", истина);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами");	     
	
	//скрытие текста полигона
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами.НомерЗаказа"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;	
	ЭлементОтбора.ПравоеЗначение = Справочники.ПолигоныМаршрутизации.ПустаяСсылка();
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПолигонМаршрутизации");
	
КонецПроцедуры	

&НаСервере
Процедура УстановкаУсловногоОформленияИтогов()
	//количество немаршр. заборов
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоНемаршрутизированныхЗаборов"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;	
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", истина);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоНемаршрутизированныхЗаборов");	     
	
	//скрытие текста полигона
	//ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПолигоновСЗаказами.НомерЗаказа"); 
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;	
	//ЭлементОтбора.ПравоеЗначение = Справочники.ПолигоныМаршрутизации.ПустаяСсылка();
	//ЭлементОтбора.Использование = Истина;
	//
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	//
	//ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПолигонМаршрутизации");
	
КонецПроцедуры	


&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	ОбновитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура РегионПриИзменении(Элемент)
	ОбновитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Если Поле.Имя = "НомерЗаказа" Тогда
		НомерЗаказа = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа;
		Если ЗначениеЗаполнено(НомерЗаказа) И ЗначениеЗаполнено(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации) Тогда
			ОткрытьФормуПодсказкиПоЗаказу(НомерЗаказа);
		ИначеЕсли ЗначениеЗаполнено(НомерЗаказа) И Не ЗначениеЗаполнено(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации) Тогда
			ПривязатьАдресЗаказаПоНомеруЗаказа(НомерЗаказа);
		КонецЕсли;	
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодсказкиПоЗаказу(НомерЗаказа)
	Ф = ПолучитьФорму("Обработка.ПолигональныйМаршрутизатор.Форма.ФормаПодсказкиПоЗаказу");
	Ф.НомерЗаказа = НомерЗаказа;
	Ф.СхемаМаршрутизации = ПолигональнаяСхемаКарты;
	Ф.ОткрытьМодально();
КонецПроцедуры	


&НаСервере
Функция ПолучитьПервыеКоординатыПолигона(Полигон)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	ПолигоныМаршрутизацииТочкиПолигона.Широта КАК Широта,
	            |	ПолигоныМаршрутизацииТочкиПолигона.Долгота КАК Долгота
	            |ИЗ
	            |	Справочник.ПолигоныМаршрутизации.ТочкиПолигона КАК ПолигоныМаршрутизацииТочкиПолигона
	            |ГДЕ
	            |	ПолигоныМаршрутизацииТочкиПолигона.Ссылка.Ссылка = &Полигон
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ПолигоныМаршрутизацииТочкиПолигона.НомерСтроки";
	Зап.УстановитьПараметр("Полигон", Полигон);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Выб.Следующий();
	Струк = Новый Структура;
	Струк.Вставить("Широта", Выб.Широта);
	Струк.Вставить("Долгота", Выб.Долгота);
	Возврат Струк;
КонецФункции	

&НаКлиенте
Процедура ДеревоПолигоновСЗаказамиПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоПолигоновСЗаказами.ТекущаяСтрока = Неопределено Или Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;
	
	Если Не ЗначениеЗаполнено(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации) Тогда
		Возврат;
	КонецеСли;	
	
	Координаты = ПолучитьПервыеКоординатыПолигона(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.ПолигонМаршрутизации);
	ВызовФункции = "MapUtils.ClickBallon('" + Формат(Координаты.Долгота, "ЧРД=.; ЧГ=") + "', '" + Формат(Координаты.Широта, "ЧРД=.; ЧГ=") + "')";    
	//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = ВызовФункции;
	//Иначе	
	//	Элементы.ПолеXTML.Документ.parentWindow.eval(ВызовФункции);
	//КонецеСли;
	ВыполнитьСкрипт(ВызовФункции);
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьПодсказкуПоЗаказуИзДереваПолигонов(Команда)
	НомерЗаказа = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа;
	Если ЗначениеЗаполнено(НомерЗаказа) Тогда
		ОткрытьФормуПодсказкиПоЗаказу(НомерЗаказа);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаказИТочкуДоставкиПоНомеруЗаказа(НомерЗаказа)
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	новаМестнаяДоставка.ТочкаПрибытия КАК ТочкаДоставки,
	            |	РеализацияТоваровУслуг.Ссылка КАК Заказ
	            |ИЗ
	            |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	            |ГДЕ
	            |	новаМестнаяДоставка.Номер = &Номер
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ЗаборТовара.ТочкаДоставки,
	            |	ЗаборТовара.Ссылка
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.Номер = &Номер";
	Зап.УстановитьПараметр("Номер", НомерЗаказа);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Струк = Новый Структура;
		
		Струк.Вставить("ТочкаДоставки", Выб.ТочкаДоставки);
		Струк.Вставить("Заказ", Выб.Заказ);
		Возврат Струк;
	Иначе
		Возврат Неопределено;
	КонецеСли;	
КонецФункции	

&НаКлиенте
Процедура ПривязатьАдресЗаказа(Команда)
	Если Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа) Тогда
		Возврат;
	КонецеСли;	
	ПривязатьАдресЗаказаПоНомеруЗаказа(Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные.НомерЗаказа);
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьАдресЗаказаПоНомеруЗаказа(НомерЗаказа) 
	СтрукВозврата = ПолучитьЗаказИТочкуДоставкиПоНомеруЗаказа(НомерЗаказа);
	ТочкаДоставки = СтрукВозврата.ТочкаДоставки;
	
	Если СтрукВозврата = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	Заказ = СтрукВозврата.Заказ;
	
	ТекущиеДанные = Элементы.ДеревоПолигоновСЗаказами.ТекущиеДанные; 
	Развернут = Элементы.ДеревоПолигоновСЗаказами.Развернут(ТекущиеДанные.ПолучитьИдентификатор());
	
	мОтбор = Новый Структура(); //запомнили 
	мОтбор.Вставить("ПолигонМаршрутизации", ТекущиеДанные.ПолигонМаршрутизации);
	мОтбор.Вставить("Номерзаказа", ТекущиеДанные.НомерЗаказа);
	
	П = Новый Структура;
	П.Вставить("Ключ", ТочкаДоставки);
	Ф = ПолучитьФорму("Справочник.новаТочкиДоставки.Форма.ФормаЭлемента2", П, ЭтаФорма);
	Ф.НадоПроизводитьПоискПолигона = Истина;
	Ф.Заказ = Заказ;
	Ф.ОткрытьМодально();
	
	ОбновитьДанные(Ложь, Истина, Истина);
	
	ИдентификаторСтроки = 0; 
	ПрекратитьПоиск = Ложь; 
	НайтиСтрокуДерева(ДеревоПолигоновСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск); 
	Элементы.ДеревоПолигоновСЗаказами.ТекущаяСтрока = ИдентификаторСтроки; 	
	
	Если Развернут Тогда
		Элементы.ДеревоПолигоновСЗаказами.Развернуть(Элементы.ДеревоПолигоновСЗаказами.ТекущаяСтрока);
	КонецеСли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоискЗаказаВПолигонахПриИзменении(Элемент)
	Если СокрЛП(ПоискЗаказаВПолигонах) = "" Тогда
		Возврат;
	КонецеСли;	
	мОтбор = Новый Структура(); //запомнили 
	мОтбор.Вставить("НомерЗаказа", ПоискЗаказаВПолигонах);
	
	ИдентификаторСтроки = 0; 
	ПрекратитьПоиск = Ложь; 
	НайтиСтрокуДерева(ДеревоПолигоновСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск, Истина); 
	Если ПрекратитьПоиск Тогда
		Элементы.ДеревоПолигоновСЗаказами.ТекущаяСтрока = ИдентификаторСтроки; 	
		Сообщить("Поиск завершен!");
		ПоискЗаказаВПолигонах = "";
	Иначе
		Сообщить("Заказ не найден!", СтатусСообщения.ОченьВажное);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаФлаговПолигоны(Команда)
	// Вставить содержимое обработчика.
	ПростановкаФлаговВДеревьях("ДеревоПолигоновСЗаказами", 0);
	ОтобразитьВсеВыделенныеТочкиНаКарте();
КонецПроцедуры

&НаКлиенте
Процедура ПростановкаФлаговПолигоны(Команда)
	ПростановкаФлаговВДеревьях("ДеревоПолигоновСЗаказами", 1);
	ОтобразитьВсеВыделенныеТочкиНаКарте();
КонецПроцедуры

&НаСервере
Функция ПолучитьПолигонПоИмени(ИмяПолигона)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПолигоныМаршрутизации.Ссылка КАК Полигон
	            |ИЗ
	            |	Справочник.ПолигоныМаршрутизации КАК ПолигоныМаршрутизации
	            |ГДЕ
	            |	ПолигоныМаршрутизации.Наименование ПОДОБНО &Наименование
	            |	И ПолигоныМаршрутизации.Владелец = &СхемаМаршрутизации";
	Зап.УстановитьПараметр("Наименование", ИмяПолигона + "%");
	Зап.УстановитьПараметр("СхемаМаршрутизации", ПолигональнаяСхемаКарты);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Полигон;
	Иначе
		Возврат Неопределено;
	КонецеСли;	
КонецФункции
#КонецОбласти 


#Область РаботаСФлажкамиТриСостояния
&НаКлиенте
Процедура ИзменениеФлажкаНаПолигонах(Элемент)
    ИДТекущейСтроки = Элементы["ДеревоПолигоновСЗаказами"].ТекущаяСтрока;

    Если ИДТекущейСтроки <> Неопределено Тогда

        ЭлементКоллекции = ЭтаФорма["ДеревоПолигоновСЗаказами"].НайтиПоИдентификатору(
            ИДТекущейСтроки);

        Если ЭлементКоллекции.Отметка = 2 Тогда
            ЭлементКоллекции.Отметка = 0;
        КонецЕсли;

		
		Если ЗначениеЗаполнено(ЭлементКоллекции.УИД) И ЭлементКоллекции.Отметка = 0 Тогда
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(ЭлементКоллекции.УИД);
		КонецеСли;	

		
        УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Отметка);

        Родитель = ЭлементКоллекции.ПолучитьРодителя();
        Пока Родитель <> Неопределено Цикл
            Родитель.Отметка = ?(УстановленоДляВсех(ЭлементКоллекции),
                ЭлементКоллекции.Отметка, 2);
            ЭлементКоллекции = Родитель;
            Родитель = ЭлементКоллекции.ПолучитьРодителя();
        КонецЦикла;

    КонецЕсли;	
	ОтобразитьВсеВыделенныеТочкиНаКарте();
КонецПроцедуры	

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)

    ПодчинЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из ПодчинЭлементы Цикл
        ТекЭлемент.Отметка = ЗначениеПометки;
		Если ЗначениеЗаполнено(ТекЭлемент.УИД) И ЗначениеПометки = 0 Тогда
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(ТекЭлемент.УИД);
		КонецеСли;	
        УстановкаФлажков(ТекЭлемент, ТекЭлемент.Отметка);
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция УстановленоДляВсех(ЭлементКоллекции)

	СоседниеЭлементы =
	ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
		Если ТекЭлемент.Отметка <> ЭлементКоллекции.Отметка Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;

КонецФункции  
#КонецОбласти


#Область ОбщиеПроцедурыРаботыСДеревом
&НаСервере
Процедура ЗаполнитьИдентификаторыВДереве(НазваниеДерева)
	Дерево = РеквизитФормыВЗначение(НазваниеДерева, Тип("ДеревоЗначений"));
	
	Для Каждого ТекПолигон Из Дерево.Строки Цикл
		Для Каждого ТекЗаказ Из ТекПолигон.Строки Цикл
			Если Не ЗначениеЗаполнено(ТекЗаказ.ЗаказСсылка) Тогда
				Продолжить;
			КонецеСли;	
			
			ТекЗаказ.УИД = Строка(ТекЗаказ.ЗаказСсылка.УникальныйИдентификатор());
		КонецЦикла;
		ТекПолигон.НомерЗаказа = "";
	КонецЦикла;	
	ЗначениеВРеквизитФормы(Дерево, НазваниеДерева);
	
КонецПроцедуры

&НаКлиенте 
Процедура НайтиСтрокуДерева(КоллекцияЭлементовДерева, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск, ИскатьТолькоПоНомеруЗаказа = Ложь) 
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
		Если ПрекратитьПоиск Тогда 
			Возврат; 
		КонецЕсли; 
		
		Если Не ИскатьТолькоПоНомеруЗаказа Тогда
			Если СтрокаДерева.ПолигонМаршрутизации = ТекущиеДанные.ПолигонМаршрутизации И СокрЛП(СтрокаДерева.НомерЗаказа) = СокРЛП(ТекущиеДанные.НомерЗаказа) Тогда 
				ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
				ПрекратитьПоиск = Истина; 
				Возврат; 
			КонецЕсли; 
		Иначе
			Если СокрЛП(СтрокаДерева.НомерЗаказа) = СокрЛП(ТекущиеДанные.НомерЗаказа) Тогда 
				ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
				ПрекратитьПоиск = Истина; 
				Возврат; 
			КонецЕсли; 
		КонецеСли;	
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы(); 
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда 
			НайтиСтрокуДерева(КоллекцияЭлементов, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск, ИскатьТолькоПоНомеруЗаказа); 
		КонецЕсли; 
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте 
Процедура НайтиСтрокуДереваИУстановитьФлаг(КоллекцияЭлементовДерева, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск) 
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
		Если ПрекратитьПоиск Тогда 
			Возврат; 
		КонецЕсли; 
		
		Если СтрокаДерева.УИД = ТекущиеДанные.УИД Тогда 
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
			СтрокаДерева.Отметка = 1;
			ПрекратитьПоиск = Истина; 
			Возврат; 
		КонецЕсли; 
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы(); 
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда 
			НайтиСтрокуДереваИУстановитьФлаг(КоллекцияЭлементов, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск); 
		КонецЕсли; 
	КонецЦикла; 	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФиксацияВыделенныхСтрокВДереве(ДанныеФормыДерево, ИмяДерева, СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек)
	//Дерево = РеквизитФормыВЗначение(ИмяДерева, Тип("ДеревоЗначений"));
	Дерево = ДанныеФормыВЗначение(ДанныеФормыДерево, Тип("ДеревоЗначений"));
	Если Дерево.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецеСли;	
	Если ИмяДерева = "ДеревоПолигоновСЗаказами" Тогда
		НомерДерева = 1;
	ИначеЕсли ИмяДерева = "ДеревоРейсовСЗаказами" Тогда	
		НомерДерева = 2;
	КонецеСли;	
	
	Струк = Новый Структура;
	Струк.Вставить("НомерДерева", НомерДерева);
	
	НайСтроки = СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.НайтиСтроки(Струк);
	Для Каждого Тек Из НайСтроки Цикл
		СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.Удалить(Тек);
	КонецЦикла;	
	
	
	Струк = Новый Структура;
	
	Струк.Вставить("Отметка", 1);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
	
	Для Каждого Тек Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(Тек.УИД) Тогда
			Продолжить;
		КонецеСли;
		
		Нов = СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.Добавить();
		Нов.УИД = Тек.УИД;
		Нов.НомерДерева = НомерДерева;
		Нов.НомерЗаказа = Тек.НомерЗаказа;
		Если Тек.ЗБ = 1 Тогда
			Нов.ТипЗаказа = 2;
		Иначе
			Нов.ТипЗаказа = 1;
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ФиксацияВыделенныхСтрокВДеревьях()
	 ФиксацияВыделенныхСтрокВДереве(ДеревоПолигоновСЗаказами, "ДеревоПолигоновСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
	 ФиксацияВыделенныхСтрокВДереве(ДеревоРейсовСЗаказами, "ДеревоРейсовСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
КонецПроцедуры	

&НаКлиенте
Процедура ВосстановитьВыделениеСтрокВДеревьях(ВыделенныйНомерДерева)
	Если СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.Количество() = 0 Тогда
		Возврат;
	КонецеСли;
	БылоДеревоПолигонов = Ложь;
	БылоДеревоРейсов = Ложь;
	Для Каждого Тек Из СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек Цикл
		Если ВыделенныйНомерДерева <> Тек.НомерДерева Тогда
			Продолжить;
		КонецеСли;	
		мОтбор = Новый Структура(); //запомнили 
		мОтбор.Вставить("УИД", Тек.УИД);
		
		ИдентификаторСтроки = 0; 
		ПрекратитьПоиск = Ложь; 
		Если Тек.НомерДерева = 1 Тогда
			НайтиСтрокуДереваИУстановитьФлаг(ДеревоПолигоновСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск); 
			БылоДеревоПолигонов = Истина;
		Иначе
			НайтиСтрокуДереваИУстановитьФлаг(ДеревоРейсовСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск); 
			БылоДеревоРейсов = Истина;
		КонецеСли;
		Если Не ПрекратитьПоиск Тогда
			Сообщить(?(Тек.ТипЗаказа = 1, "Доставка ", "Забор ") + СокрЛП(Тек.НомерЗаказа) + " не попадает под условия фильтра, он(она) не будет отображен на карте!");
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКартеНаСервере(Тек.УИД);
		КонецеСли;	
	КонецЦикла;
	
	Если БылоДеревоПолигонов Тогда
		ИнициализацияРодительскихФлажков("ДеревоПолигоновСЗаказами");
	КонецеСли;	
	
	Если БылоДеревоРейсов Тогда
		ИнициализацияРодительскихФлажков("ДеревоРейсовСЗаказами");
	КонецеСли;
	//СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек.Очистить();
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры	

&НаКлиенте
Процедура ИнициализацияРодительскихФлажков(Дерево)
	ЭлементыПервогоУровня = ЭтаФорма[Дерево].ПолучитьЭлементы();		
	Для Каждого ЭлементКоллекцииПУ Из ЭлементыПервогоУровня Цикл		
		ЭлементыВУ = ЭлементКоллекцииПУ.ПолучитьЭлементы();		
		Для Каждого ЭлементКоллекции Из ЭлементыВУ Цикл
			
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
				
			Пока Родитель <> Неопределено Цикл
				Родитель.Отметка = ?(УстановленоДляВсех(ЭлементКоллекции),
				ЭлементКоллекции.Отметка, 2);
				ЭлементКоллекции = Родитель;
				Родитель = ЭлементКоллекции.ПолучитьРодителя();
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиИзДерева(МассивЗначений, ИмяРеквизитаДерева)
	//Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
	Если ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		Дерево = ДанныеФормыВЗначение(ДеревоРейсовСЗаказами, Тип("ДеревоЗначений"));
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда	
		Дерево = ДанныеФормыВЗначение(ДеревоПолигоновСЗаказами, Тип("ДеревоЗначений"));
	КонецЕсли;	
	
	ТабРод = Новый ТаблицаЗначений;
	ТабРод.Колонки.Добавить("Родитель");
	ТабРод.Колонки.Добавить("Количество");
	
	Для Каждого Тек Из МассивЗначений Цикл
		Струк = Новый Структура;
		Струк.Вставить("ЗаказСсылка", Тек.Заказ);
		
		
		
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
		Для Каждого Стр Из НайденныеСтроки Цикл
			Нов = ТабРод.Добавить();
			Нов.Родитель = Стр.Родитель;
			Нов.Количество = 1;
			
			Стр.Родитель.Строки.Удалить(Стр);
		КонецЦикла;	
	КонецЦикла;
	
	Если ИмяРеквизитаДерева <> "ДеревоРейсовСЗаказами" Тогда
		ТабРод.Свернуть("Родитель", "Количество");
		Для Каждого Тек Из ТабРод Цикл
			Если Тек.Родитель.Отметка = 1 И Тек.Родитель.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Тек.Родитель);
			Иначе
				Тек.Родитель.Отметка = 0;
				Тек.Родитель.Итого = Тек.Родитель.Итого - Тек.Количество;
			КонецеСли;	
			ПересчитатьИтогПоСтрокеДерева(Тек.Родитель);
		КонецЦикла;	
	Иначе
		ТабРод.Свернуть("Родитель", "Количество");
		Для Каждого Тек Из ТабРод Цикл
			Если Тек.Родитель.Отметка = 1 И Тек.Родитель.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Тек.Родитель);
			Иначе
				Тек.Родитель.Отметка = 0;
				Тек.Родитель.Итого = Тек.Родитель.Итого - Тек.Количество;
			КонецеСли;
			ПересчитатьИтогПоСтрокеДерева(Тек.Родитель);
		КонецЦикла;			
	КонецЕсли;

	//ЗначениеВРеквизитФормы(Дерево, ИмяРеквизитаДерева);
	
	Если ИмяРеквизитаДерева = "ДеревоРейсовСЗаказами" Тогда
		//Дерево = ДанныеФормыВЗначение(ДеревоРейсовСЗаказами, Тип("ДеревоЗначений"));
		ЗначениеВДанныеФормы(Дерево, ДеревоРейсовСЗаказами);
	ИначеЕсли ИмяРеквизитаДерева = "ДеревоПолигоновСЗаказами" Тогда	
		//Дерево = ДанныеФормыВЗначение(ДеревоПолигоновСЗаказами, Тип("ДеревоЗначений"));
		ЗначениеВДанныеФормы(Дерево, ДеревоПолигоновСЗаказами);
	КонецЕсли;	
	
	
	СписокВыделенныхТочекНаКарте.Очистить();
КонецПроцедуры	

&НаСервере
Функция ПодготовитьСписокВыбранныхЗаказовДерева(ИмяРеквизитаДерева, МассивПереданныхНомеров = Неопределено)
	Если МассивПереданныхНомеров = Неопределено Тогда
		Дерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева, Тип("ДеревоЗначений"));
		
		//дерево еще не сформировалось в фоне
		Если Дерево.Колонки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецеСли;	
		
		Струк = Новый Структура;
		Струк.Вставить("Отметка", 1);
		
		МассивНомеров = Новый Массив;
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
		Для Каждого Тек Из НайденныеСтроки Цикл
			Если Тек.Родитель = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			Если Не ЗначениеЗаполнено(Тек.НомерЗаказа) Тогда
				Продолжить;
			КонецеСли;	
			МассивНомеров.Добавить(Тек.НомерЗаказа);
		КонецЦикла;
	Иначе
		МассивНомеров = МассивПереданныхНомеров;
	КонецеСли;
	
	Если МассивНомеров.Количество() <> 0 Тогда
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		            |	1 КАК ТипЗаказа,
		            |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
		            |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
		            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
		            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
		            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
		            |	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК КонтрагентНаименование,
		            |	новаМестнаяДоставка.ВремяПрибытияС КАК ВремяПрибытияС,
		            |	новаМестнаяДоставка.ВремяПрибытияПо КАК ВремяПрибытияПо,
		            |	РеализацияТоваровУслуг.ОбщийВес КАК ВесогабаритныйПоказатель
		            |ИЗ
		            |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		            |		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
		            |ГДЕ
		            |	РеализацияТоваровУслуг.Номер В(&МасНомеров)
		            |
		            |ОБЪЕДИНИТЬ ВСЕ
		            |
		            |ВЫБРАТЬ
		            |	ЗаборТовара.Ссылка,
		            |	2,
		            |	ЗаборТовара.Номер,
		            |	ЗаборТовара.НомерВнешнегоЗаказа,
		            |	ЗаборТовара.ТочкаДоставки.Адрес.Наименование,
		            |	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
		            |	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
		            |	ЗаборТовара.Контрагент.Наименование,
		            |	ЗаборТовара.ВремяДоставкиС,
		            |	ЗаборТовара.ВремяДоставкиПо,
		            |	ЗаборТовара.ОбъемЗабора
		            |ИЗ
		            |	Документ.ЗаборТовара КАК ЗаборТовара
		            |ГДЕ
		            |	ЗаборТовара.Номер В(&МасНомеров)";
		Зап.УстановитьПараметр("МасНомеров", МассивНомеров);
		
		Выб = Зап.Выполнить().Выбрать();
		
		МассивВозврата = Новый Массив;
		
		
		Пока Выб.Следующий() Цикл
			Струк = Новый Структура;
			Струк.Вставить("Заказ");
			Струк.Вставить("ТипЗаказа");
			Струк.Вставить("НомерЗаказа");
			Струк.Вставить("НомерЗаказаИМ");
			Струк.Вставить("Адрес");
			Струк.Вставить("Широта");
			Струк.Вставить("Долгота");
			Струк.Вставить("ИдентификаторЗаказа");
			Струк.Вставить("КонтрагентНаименование");
			Струк.Вставить("ВремяПрибытияС");
			Струк.Вставить("ВремяПрибытияПо");
			Струк.Вставить("ВесогабаритныйПоказатель");
			

			ЗаполнитьЗначенияСвойств(Струк, Выб);
			
			Струк.Адрес = СтрЗаменить(Струк.Адрес, "'", "");
			Струк.Адрес = СтрЗаменить(Струк.Адрес, """", "");
			
			Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, "'", "");
			Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, """", "");
			
			
			Струк.ИдентификаторЗаказа = Выб.Заказ.УникальныйИдентификатор();
			МассивВозврата.Добавить(Струк);
		КонецЦикла;	
		
		Возврат МассивВозврата;
	КонецеСли;
	Возврат Неопределено;
КонецФункции	

&НаСервере
Процедура ПересчитатьИтогПоСтрокеДерева(СтрокаДерева)
	ТабКолонок = СформироватьТаблицуКолонокДляРасчетаИтоговПоСтрокамДерева();
	
	
	Для Каждого СтрокаИмяКолонки Из ТабКолонок Цикл
		Попытка
			СтрокаДерева[СтрокаИмяКолонки.ИмяКолонки] = 0;
			Для Каждого Тек Из СтрокаДерева.Строки Цикл
				СтрокаДерева[СтрокаИмяКолонки.ИмяКолонки] = СтрокаДерева[СтрокаИмяКолонки.ИмяКолонки] + Тек[СтрокаИмяКолонки.ИмяКолонки];
			КонецЦикла;	
		Исключение
			
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ПростановкаФлаговВДеревьях(ИмяДерева, Значение)
	Дерево = РеквизитФормыВЗначение(ИмяДерева, Тип("ДеревоЗначений"));
	
	Струк = Новый Структура;
	
	Если Значение = 0 Тогда
		Струк.Вставить("Отметка", 1);
	ИначеЕсли Значение = 1 Тогда	
		Струк.Вставить("Отметка", 0);
	КонецеСли;	
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
	
	Для Каждого Тек Из НайденныеСтроки Цикл
		Тек.Отметка= Значение;
		УдалитьЗаказИзСпискаВыделенныхЗаказовНаКартеНаСервере(Тек.УИД);
	КонецЦикла;	
	
	Струк.Вставить("Отметка", 2);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Струк, Истина);
	
	Для Каждого Тек Из НайденныеСтроки Цикл
		Тек.Отметка= Значение;
		УдалитьЗаказИзСпискаВыделенныхЗаказовНаКартеНаСервере(Тек.УИД);
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(Дерево, ИмяДерева);
КонецПроцедуры	
#КонецОбласти

#Область РаботаСДеревомРейсов

&НаСервере
Процедура УстановкаУсловногоОформленияСпискаРейсов()
	//скрытие строк с пустым номером заказа
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.НомерЗаказа"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лосось);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НомерЗаказа_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Транспорт_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Водитель_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Отметка_Рейс");
		
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Итого_Рейс");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИтогоПредварительно_Рейс");
	
	
	ДобавитьВОформлениеЭлементыДинамическихКолонок(ЭлементОформления.Поля.Элементы, "_Рейс");
	

	//скрытие номера авто
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.НомерЗаказа"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Транспорт_Рейс");	
	
	//Сигнализация перегруженных авто
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.Итого"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;	
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.МаксимальноеКоличествоЗаказов");
	ЭлементОтбора.Использование = Истина;
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Итого_Рейс");	 //Итого_Рейс   ДеревоРейсовСЗаказами
	
	
	//Роль рейса забор
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.РольРейса"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Справочники.РолиТранспорта.РольЗабораТовара;
	ЭлементОтбора.Использование = Истина;
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоНебесноГолубой);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Транспорт_Рейс");	//Транспорт_Рейс
	
	//Роль рейса пеший
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.РольРейса"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Справочники.РолиТранспорта.РольПешегоКурьера;
	ЭлементОтбора.Использование = Истина;
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Хаки);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Транспорт_Рейс");	//Транспорт_Рейс
	
	
	//индивидуальная маршрутизация
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ИндивидуальнаяМаршрутизация"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.НейтральноБирюзовый);
	
	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами");	
	
	//проверенные документы
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.ДокументПроверен"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРейсовСЗаказами.НомерЗаказа"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЗеленаяЛужайка);
	
	ДобавитьВОформлениеЭлементыДинамическихКолонок(ЭлементОформления.Поля.Элементы, "_Рейс");
	
КонецПроцедуры	


&НаСервереБезКонтекста
Процедура ОформлениеКолонкиРейс(ЭлементФормы, ИмяКолонки)
	ЭлементФормы.Ширина = 2;
	ЭлементФормы.МаксимальнаяШирина = 2;
	Если ИмяКолонки = "НомерЗаказа" Тогда
		ЭлементФормы.Заголовок = "№";
		ЭлементФормы.Ширина = 9;
		ЭлементФормы.МаксимальнаяШирина = 9;
		
	ИначеЕсли ИмяКолонки = "ПолигонМаршрутизации" Тогда	
		ЭлементФормы.Заголовок = "Полигон";
		ЭлементФормы.Ширина = 9;
		ЭлементФормы.МаксимальнаяШирина = 9;
		ЭлементФормы.Видимость = Ложь;
	ИначеЕсли ИмяКолонки = "Водитель" Тогда	
		ЭлементФормы.Заголовок = "Водитель";
	ИначеЕсли ИмяКолонки = "МаксимальноеКоличествоЗаказов" Тогда
		ЭлементФормы.Видимость = Ложь;	
	ИначеЕсли ИмяКолонки = "ЗаказСсылка" Или ИмяКолонки = "ТранспортНаименование"Или ИмяКолонки = "ТранспортКод" Или ИмяКолонки = "УИД" Или ИмяКолонки = "ВесЗаказа" Или ИмяКолонки = "Партнер" Или ИмяКолонки = "ВремяПрибытияС" Или ИмяКолонки = "ВремяПрибытияПо" Или ИмяКолонки = "ОбъемЗабора" Или ИмяКолонки = "КатегорияЗаказа" Тогда
		ЭлементФормы.Видимость = Ложь;		
	ИначеЕсли ИмяКолонки = "ИндивидуальнаяМаршрутизация" Тогда
		ЭлементФормы.Видимость = Ложь;				
	ИначеЕсли ИмяКолонки = "Итого" Тогда	
		ЭлементФормы.Заголовок = "Итого";
		ЭлементФормы.Шрифт = Новый Шрифт(ЭлементФормы.Шрифт,,,Истина);
		ЭлементФормы.Ширина = 4;
		ЭлементФормы.МаксимальнаяШирина = 4;
	ИначеЕсли ИмяКолонки = "ИтогоПредварительно" Тогда	
		ЭлементФормы.Заголовок = "Итого_";
		ЭлементФормы.Шрифт = Новый Шрифт(ЭлементФормы.Шрифт,,,Истина);
		ЭлементФормы.Ширина = 4;
		ЭлементФормы.МаксимальнаяШирина = 4;
	ИначеЕсли ИмяКолонки = "Отметка" Тогда	
		ЭлементФормы.Заголовок = "V";
		ЭлементФормы.Ширина = 2;
		ЭлементФормы.МаксимальнаяШирина = 2;
		ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементФормы.ТриСостояния = Истина;
		ЭлементФормы.ТолькоПросмотр = Ложь;
		ЭлементФормы.УстановитьДействие("ПриИзменении", "ИзменениеФлажкаНаРейсах"); 
	ИначеЕсли ИмяКолонки = "Рейс" Или ИмяКолонки = "РольРейса" Или ИмяКолонки = "ДокументПроверен" Тогда	
		ЭлементФормы.Видимость = Ложь;
	ИначеЕсли ИмяКолонки = "Экспедитор" Тогда	
		ЭлементФормы.Видимость = Ложь;		
	КонецеСли;	
КонецПроцедуры	

//БезКонтекста
&НаСервере  
Процедура СформироватьРейсыНаСервере(ДатаРейсов, Регион)
	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Транспорт КАК Транспорт,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.СформированныйРейс КАК СформированныйРейс,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Водитель КАК Водитель,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Экспедитор КАК Экспедитор,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.РольРейса КАК РольРейса
	            |ИЗ
	            |	РегистрСведений.СформированныйГрафикПоТранспорту.СрезПоследних(
	            |			&ДатаСреза,
	            |			ДатаРейса = &ДатаРейсов
	            |				И Регион.Ссылка = &Регион) КАК СформированныйГрафикПоТранспортуСрезПоследних
	            |ГДЕ
	            |	СформированныйГрафикПоТранспортуСрезПоследних.ТранспортВыйдетВРейс = ИСТИНА";
	Зап.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("Регион", Регион);
	ВыборкаПоТранспортуДляРейсов = Зап.Выполнить().Выбрать();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ФормированиеРейсов.Ссылка КАК Док
	            |ИЗ
	            |	Документ.ФормированиеРейсовТест КАК ФормированиеРейсов
	            |ГДЕ
	            |	ФормированиеРейсов.ДатаРейсов = &ДатаРейсов
	            |	И ФормированиеРейсов.МетодикаМаршрутизации = ЗНАЧЕНИЕ(перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	            |	И ФормированиеРейсов.ПометкаУдаления = ЛОЖЬ
	            |	И ФормированиеРейсов.ТерминалДоставки = &ТерминалДоставки";
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	ВариантФормированияНомеровПалет = МаршрутизацияЗаказовСервер.ОпределитьАктуальныйРежимНазначенияНомеровПалет(Регион);
	
	ВыбФормирования = Зап.Выполнить().Выбрать();
	
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если ВыбФормирования.Следующий() Тогда
		ДокументФормирования = ВыбФормирования.Док.ПолучитьОбъект();
		ДокументФормирования.Рейсы.Очистить();
	Иначе
		ДокументФормирования = Документы.ФормированиеРейсовТест.СоздатьДокумент();
		ДокументФормирования.Дата = ТекущаяДата();
		ДокументФормирования.ДатаРейсов = ДатаРейсов;
		ДокументФормирования.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация;
		ДокументФормирования.РежимЗагрузкиДанных = 1;
		ДокументФормирования.РежимНазначенияНомеровПалет = ВариантФормированияНомеровПалет;
		ДокументФормирования.ФормироватьНомераПалетт = Истина;
		ДокументФормирования.ТерминалДоставки = Регион;
		ДокументФормирования.Записать(РежимЗаписиДокумента.Запись);
	КонецеСли;	
	
	
	ТаблицаРейсовКОтметкеОФормировании = Новый ТаблицаЗначений;
	ТаблицаРейсовКОтметкеОФормировании.Колонки.Добавить("Рейс", Новый ОписаниеТипов("ДокументСсылка.РейсТест"));
	ТаблицаРейсовКОтметкеОФормировании.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.новаТранспорт"));
	
	Пока ВыборкаПоТранспортуДляРейсов.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПоТранспортуДляРейсов.СформированныйРейс) Тогда
			Рейс = Документы.РейсТест.СоздатьДокумент();
			Рейс.Дата = ТекущаяДата();
			Рейс.ДатаРейса = ДатаРейсов;
			Рейс.ТерминалДоставки = Регион;
			Рейс.МетодикаМаршрутизации = Перечисления.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация;
			Рейс.РежимЗагрузкиДанных = 1;
			Если ЗначениеЗаполнено(ВыборкаПоТранспортуДляРейсов.РольРейса) Тогда
				Рейс.РольРейса = ВыборкаПоТранспортуДляРейсов.РольРейса;
			Иначе
				Рейс.РольРейса = Справочники.РолиТранспорта.РольДоставки;
			КонецеСли;
			
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			
			Рейс.СоздатьРейсМестнойДоставки();
						
			Рейс.Записать(РежимЗаписиДокумента.Проведение);
			
			Нов = ТаблицаРейсовКОтметкеОФормировании.Добавить();
			Нов.Рейс = Рейс.Ссылка;
			Нов.Транспорт = ВыборкаПоТранспортуДляРейсов.Транспорт;
			
		Иначе	
			Рейс = ВыборкаПоТранспортуДляРейсов.СформированныйРейс.ПолучитьОбъект();
		КонецеСли;
		
		ДанныеЭкипажа = Новый Структура;
		ДанныеЭкипажа.Вставить("Транспорт", ВыборкаПоТранспортуДляРейсов.Транспорт);
		ДанныеЭкипажа.Вставить("Водитель", ВыборкаПоТранспортуДляРейсов.Водитель);
		ДанныеЭкипажа.Вставить("Экспедитор", ВыборкаПоТранспортуДляРейсов.Экспедитор);
		
		
		Рейс.УстановитьЭкипаж(ДанныеЭкипажа, ТекущаяДата());
		
		
	    Нов = ДокументФормирования.Рейсы.Добавить();
		Нов.Рейс = Рейс.Ссылка;
		
		Сообщить("Сформирован рейс по " + ВыборкаПоТранспортуДляРейсов.Транспорт);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	МаршрутизацияЗаказовСервер.УстановитьСформированныеРейсыВГрафикеРейсов(ТаблицаРейсовКОтметкеОФормировании, ДатаРейсов, Регион, ТекущаяДата());	
	
	ДокументФормирования.Записать(РежимЗаписиДокумента.Запись);
	
	МассивЗагрузок = Новый Массив;
	МассивЗагрузок.Добавить(ДокументФормирования.Ссылка);
	
	МаршрутизацияЗаказовСервер.СформироватьНомераПалетт(МассивЗагрузок, ВариантФормированияНомеровПалет);
	
	
	
	ПрочитатьФормированиеРейсов(ДатаРейсов, Регион);
	
	Сообщить("Формирование рейсов завершено!");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСформированностьРейсов(ДатаРейсов, Терминал)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФормированиеРейсовРейсы.Рейс) КАК КоличествоРейсов
	            |ИЗ
	            |	Документ.ФормированиеРейсовТест.Рейсы КАК ФормированиеРейсовРейсы
	            |ГДЕ
	            |	ФормированиеРейсовРейсы.Рейс.ДатаРейса = &ДатаРейсов
	            |	И ФормированиеРейсовРейсы.Рейс.ПометкаУдаления = ЛОЖЬ
				|	И ФормированиеРейсовРейсы.Рейс.МетодикаМаршрутизации = Значение(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	            |	И ФормированиеРейсовРейсы.Ссылка.ПометкаУдаления = ЛОЖЬ
	            |	И ФормированиеРейсовРейсы.Ссылка.ТерминалДоставки = &ТерминалДоставки
	            |	И ФормированиеРейсовРейсы.Рейс.ТерминалДоставки = &ТерминалДоставки";
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("ТерминалДоставки", Терминал);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Если Выб.КоличествоРейсов <> 0 Тогда
			Возврат Выб.КоличествоРейсов;
		Иначе	
			Возврат Неопределено;
		КонецеСли;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура СформироватьРейсы(Команда)
	ДатаРейсов = ДатаПланирования;
	
	Если Регион.Пустая() Тогда
		Сообщить("Выберите регион доставки!", СтатусСообщения.ОченьВажное);
		ЭтаФорма.ТекущийЭлемент = Элементы.Регион;
		Возврат;
	КонецЕсли;	
	
	РезультатПроверки = ПроверитьСформированностьРейсов(ДатаРейсов, Регион);
	
	Если РезультатПроверки <> Неопределено Тогда
		ОтветВопроса = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьРейсыЗавершение", ЭтотОбъект, Новый Структура("ДатаРейсов", ДатаРейсов)), "Рейсы на дату " + Формат(ДатаРейсов, "ДЛФ=DD") + " уже существуют. Переформировать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
        Возврат;	
	КонецеСли;
	
	СформироватьРейсыФрагмент(ДатаРейсов);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРейсыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ДатаРейсов = ДополнительныеПараметры.ДатаРейсов;
	
	
	ОтветВопроса = РезультатВопроса;
	Если ОтветВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецеСли;	
	
	СформироватьРейсыФрагмент(ДатаРейсов);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРейсыФрагмент(Знач ДатаРейсов)
	
	СформироватьРейсыНаСервере(ДатаРейсов, Регион);
	ОбновитьДанные(Ложь, Ложь, Истина);
КонецПроцедуры


&НаКлиенте
Процедура УстановитьПолигоныИКатегории(Команда)
	Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Сообщить("Выберите рейс!");
		Возврат;
	КонецеСли;	
	
	Парам = Новый Структура;
	Парам.Вставить("ДатаПланирования", ДатаПланирования);
	Парам.Вставить("Регион", Регион);
	Парам.Вставить("Рейс", Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Рейс);
	Парам.Вставить("ПолигональнаяСхемаКарты", ПолигональнаяСхемаКарты);
	Парам.Вставить("ЗаборнаяКатегория", ЗаборнаяКатегория);
	Парам.Вставить("СхемаЛогистическихБрейков", СхемаЛогистическихБрейков);
	Парам.Вставить("Транспорт", Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Транспорт);
	Парам.Вставить("Водитель", Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Водитель);
	Парам.Вставить("КоличествоЗаказовМаксимум", Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.МаксимальноеКоличествоЗаказов);   
	Парам.Вставить("УстановкаПолигоновСУчетомКатегорийТранспорта", Объект.УстановкаПолигоновСУчетомКатегорийТранспорта);
	Парам.Вставить("СкрыватьУжеПривязанныеПолигоныВФормеПривязкиПолигонов", Объект.СкрыватьУжеПривязанныеПолигоныВФормеПривязкиПолигонов);
	
	ОткрытьФорму("Обработка.ПолигональныйМаршрутизатор.Форма.ФормаУстановкиПолигоновИКатегорийДляРейсов", Парам, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//ОбработкаОповещенияНаСервере(ИмяСобытия);
	Если ИмяСобытия = "ОбновитьДанныеПолигоновИЗаказовИДанныеРейсов_ПолигональнаяМаршрутизация" Тогда
		ОбновитьДанные(Ложь, Истина, Истина);
	КонецеСли;	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоРейсовСЗаказамиПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Элементы.ДеревоРейсовСЗаказамиКонтекстноеМенюРейсПроверен.Пометка = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен;
КонецПроцедуры

&НаКлиенте
Процедура ПоискЗаказаВРейсахПриИзменении(Элемент)
	Если СокрЛП(ПоискЗаказаВРейсах) = "" Тогда
		Возврат;
	КонецеСли;	
	
	мОтбор = Новый Структура(); //запомнили 
	мОтбор.Вставить("НомерЗаказа", ПоискЗаказаВРейсах);
	
	ИдентификаторСтроки = 0; 
	ПрекратитьПоиск = Ложь; 
	НайтиСтрокуДерева(ДеревоРейсовСЗаказами.ПолучитьЭлементы(), мОтбор, ИдентификаторСтроки, ПрекратитьПоиск, Истина); 
	Если ПрекратитьПоиск Тогда
		Элементы.ДеревоРейсовСЗаказами.ТекущаяСтрока = ИдентификаторСтроки; 	
		Сообщить("Поиск завершен!");
		ПоискЗаказаВРейсах = "";
	Иначе
		Сообщить("Заказ не найден!", СтатусСообщения.ОченьВажное);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаФлаговРейсы(Команда)
	ПростановкаФлаговВДеревьях("ДеревоРейсовСЗаказами", 0);
	ОтобразитьВсеВыделенныеТочкиНаКарте();
КонецПроцедуры

&НаКлиенте
Процедура ПростановкаФлаговРейсы(Команда)
	ПростановкаФлаговВДеревьях("ДеревоРейсовСЗаказами", 1);
	ОтобразитьВсеВыделенныеТочкиНаКарте();
КонецПроцедуры


&НаКлиенте
Процедура ДеревоРейсовСЗаказамиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРейсовСЗаказамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПодсчитатьИтогиПоКоличествуРейсов()
	СписокЭлементов = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
	
	РейсовВсего = 0;
	РейсовБезЗаказов = 0;
	РейсовСКоличествомЗаказовМеньше15 = 0;
	
	ТЗИтогиРейсов.Очистить();
	ТЗИтогиРейсовКопия = Новый ТаблицаЗначений;
	ТЗИтогиРейсовКопия.Колонки.Добавить("РольРейса", Новый ОписаниеТипов("СправочникСсылка.РолиТранспорта"));
	ТЗИтогиРейсовКопия.Колонки.Добавить("КоличествоИтого", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4, 0)));
	ТЗИтогиРейсовКопия.Колонки.Добавить("КоличествоБезЗаказов", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4, 0)));
	ТЗИтогиРейсовКопия.Колонки.Добавить("КоличествоМеньше15Заказов", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4, 0)));
	
	Для Каждого Тек Из СписокЭлементов Цикл
		РейсовВсего = РейсовВсего + 1;
		
		Нов = ТЗИтогиРейсовКопия.Добавить();
		Нов.РольРейса = Тек.РольРейса;
		Нов.КоличествоИтого = 1;
		Нов.КоличествоБезЗаказов = 0;
		Нов.КоличествоМеньше15Заказов = 0;
		
		Если Тек.Итого = 0 Тогда
			РейсовБезЗаказов = РейсовБезЗаказов + 1;
			Нов.КоличествоБезЗаказов = 1;
		ИначеЕсли Тек.Итого <= 15 Тогда
			РейсовСКоличествомЗаказовМеньше15 = РейсовСКоличествомЗаказовМеньше15 + 1;
			Нов.КоличествоМеньше15Заказов = 1;
		КонецеСли;	
		
	КонецЦикла;	
	ТЗИтогиРейсовКопия.Свернуть("РольРейса", "КоличествоИтого, КоличествоБезЗаказов, КоличествоМеньше15Заказов");
	
	Для Каждого Тек Из ТЗИтогиРейсовКопия Цикл
		Нов = ТЗИтогиРейсов.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
	КонецЦикла;	
	
	//ТЗИтогиРейсов.Загрузить(ТЗИтогиРейсовКопия);
КонецПроцедуры	

#КонецОбласти 


#Область РаботаСФлажкамиТриСостояния
&НаКлиенте
Процедура ИзменениеФлажкаНаРейсах(Элемент)
    ИДТекущейСтроки = Элементы["ДеревоРейсовСЗаказами"].ТекущаяСтрока;

    Если ИДТекущейСтроки <> Неопределено Тогда

        ЭлементКоллекции = ЭтаФорма["ДеревоРейсовСЗаказами"].НайтиПоИдентификатору(
            ИДТекущейСтроки);

        Если ЭлементКоллекции.Отметка = 2 Тогда
            ЭлементКоллекции.Отметка = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.УИД) И ЭлементКоллекции.Отметка = 0 Тогда
			УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(ЭлементКоллекции.УИД);
		КонецеСли;	
		
        УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Отметка);

        Родитель = ЭлементКоллекции.ПолучитьРодителя();
        Пока Родитель <> Неопределено Цикл
            Родитель.Отметка = ?(УстановленоДляВсех(ЭлементКоллекции),
                ЭлементКоллекции.Отметка, 2);
            ЭлементКоллекции = Родитель;
            Родитель = ЭлементКоллекции.ПолучитьРодителя();
        КонецЦикла;

    КонецЕсли;
	
	ОтобразитьВсеВыделенныеТочкиНаКарте();
КонецПроцедуры	
#КонецОбласти

&НаСервере
Функция ПолучитьМассивЗаказовПоУИД(МассивУИД)
	МассивСсылок = Новый Массив;
	
	Для Каждого Тек Из МассивУИД Цикл
		НайСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(Тек));
		Если Не ЗначениеЗаполнено(НайСсылка.Дата) Тогда
			НайСсылка = Документы.ЗаборТовара.ПолучитьСсылку(Новый УникальныйИдентификатор(Тек));
		КонецеСли;
		
		МассивСсылок.Добавить(НайСсылка);
	КонецЦикла;	
	
	
	Если МассивСсылок.Количество() <> 0 Тогда
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		            |	1 КАК ТипЗаказа,
		            |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
		            |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
		            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК Адрес,
		            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
		            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
		            |	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК КонтрагентНаименование
		            |ИЗ
		            |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		            |		ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
		            |ГДЕ
		            |	РеализацияТоваровУслуг.Ссылка В(&МасСсылок)
		            |
		            |ОБЪЕДИНИТЬ ВСЕ
		            |
		            |ВЫБРАТЬ
		            |	ЗаборТовара.Ссылка,
		            |	2,
		            |	ЗаборТовара.Номер,
		            |	ЗаборТовара.НомерВнешнегоЗаказа,
		            |	ЗаборТовара.ТочкаДоставки.Адрес.Наименование,
		            |	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
		            |	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
		            |	ЗаборТовара.Контрагент.Наименование
		            |ИЗ
		            |	Документ.ЗаборТовара КАК ЗаборТовара
		            |ГДЕ
		            |	ЗаборТовара.Ссылка В(&МасСсылок)";
		Зап.УстановитьПараметр("МасСсылок", МассивСсылок);
		
		Выб = Зап.Выполнить().Выбрать();
		
		МассивВозврата = Новый Массив;
		
		
		Пока Выб.Следующий() Цикл
			Струк = Новый Структура;
			Струк.Вставить("Заказ");
			Струк.Вставить("ТипЗаказа");
			Струк.Вставить("НомерЗаказа");
			Струк.Вставить("НомерЗаказаИМ");
			Струк.Вставить("Адрес");
			Струк.Вставить("Широта");
			Струк.Вставить("Долгота");
			Струк.Вставить("УИД");
			Струк.Вставить("КонтрагентНаименование");
			Струк.Вставить("НомерДерева");

			УИД = Выб.Заказ.УникальныйИдентификатор();
			
			
			ЗаполнитьЗначенияСвойств(Струк, Выб);
			
			
			СтрукП = Новый Структура;
			СтрукП.Вставить("УИД", Строка(УИД));
			НайСтроки = СписокТочекНаКартеТЗ.НайтиСтроки(СтрукП);
			Если НайСтроки.Количество() <> 0 Тогда
				Струк.НомерДерева = НайСтроки[0].НомерДерева;
			КонецеСли;	
			
			
			
			Струк.Адрес = СтрЗаменить(Струк.Адрес, "'", "");
			Струк.Адрес = СтрЗаменить(Струк.Адрес, """", "");
			
			Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, "'", "");
			Струк.КонтрагентНаименование = СтрЗаменить(Струк.КонтрагентНаименование, """", "");
			
			
			Струк.УИД = УИД;
		
			МассивВозврата.Добавить(Струк);
		КонецЦикла;	
		
		Возврат МассивВозврата;
	КонецеСли;
	Возврат Неопределено;
КонецФункции	

#Область ФункцииСиШарп

//&НаКлиенте
//Процедура ВыполнитьСкрипт(Команда)
//	Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
//		ДИВ = Элементы.ПолеXTML.Документ.getElementById("TEST");
//		
//		НашлиАтрибут = ДИВ.getAttributeNode("onclick");
//		Если НашлиАтрибут <> null Тогда
//			ДИВ.removeAttribute("onclick");
//		КонецЕсли; 
//		
//		Атрибут  = Элементы.ПолеXTML.Документ.createAttribute("onclick");
//		Атрибут.value = Команда;
//		ДИВ.attributes.setNamedItem(Атрибут); // привязываем атрибут
//		
//		ДИВ.click();
//	Иначе	
//		Элементы.ПолеXTML.Document.parentWindow.eval(Команда);
//	КонецеСли;	
//КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	
	Попытка
  Элементы.ПолеXTML.Документ.parentWindow.exec(Команда);
исключение
  Сообщить(ОписаниеОшибки());
  конецпопытки;
  Возврат;
    ДИВ = Элементы.ПолеXTML.Документ.getElementById("TEST");
    
    НашлиАтрибут = ДИВ.getAttributeNode("onclick");
    Если НашлиАтрибут <> null Тогда
        ДИВ.removeAttribute("onclick");
    КонецЕсли; 
    
    Атрибут  = Элементы.ПолеXTML.Документ.createAttribute("onclick");
    Атрибут.value = Команда;
    ДИВ.attributes.setNamedItem(Атрибут); // привязываем атрибут
    
    ДИВ.click();
        
КонецПроцедуры


&НаКлиенте
Функция MapsFrom1C_OnSelectPoints(Параметр1) Экспорт
	СтрокаСТочками = СтрЗаменить(Параметр1, ",", Символы.ПС);
	
	МассивУИД = Новый Массив;
	
	Для Сч = 1 По СтрЧислоСтрок(СтрокаСТочками) Цикл
		Точка = СтрПолучитьСтроку(СтрокаСТочками, Сч);
		
		Струк = Новый Структура;
		Струк.Вставить("УИД", Точка);
		НайСтрока = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Струк);
		
		Если НайСтрока.Количество() = 0 Тогда
			массивУИД.Добавить(Точка);
			НомерСтиля_v2 = 1;
			СменитьСтильМаркераСтроки(Точка, 1);
		Иначе
			НомерСтиля_v2 = 0;
			Если НайСтрока[0].НомерДерева = 1 Тогда
				НомерЦвета = 8;
			Иначе
				НомерЦвета = 0;
			КонецЕСли;	
			//Если НайСтрока[0].ТипЗаказа = 1 Тогда
				СменитьСтильМаркераСтроки(Точка, НомерЦвета);
			//Иначе
			//	СменитьСтильМаркераСтроки(Точка, НомерЦвета);
			//КонецеСли;
			Для СчВ = 0 По НайСтрока.Количество() - 1 Цикл
				СписокВыделенныхТочекНаКартеТЗ.Удалить(НайСтрока[СчВ]);
			КонецЦикла;	
		КонецеСли;	
	КонецЦикла;	
	
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		Если МассивУИД.Найти(Тек.УИД) = Неопределено Тогда
			МассивУИД.Добавить(Тек.УИД);
		КонецеСли;	
	КонецЦикла;	
	
	
	МассивЗаказов = ПолучитьМассивЗаказовПоУИД(МассивУИД);
	
	Если МассивЗаказов <> Неопределено Тогда
		Для Каждого Тек Из МассивЗаказов Цикл
			Струк = Новый Структура;
			Струк.Вставить("УИД", Строка(Тек.УИД));
			НайСтроки = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Струк);
			
			Если НайСтроки.Количество() <> 0 Тогда
				Продолжить;
			КонецеСли;	
			Нов = СписокВыделенныхТочекНаКартеТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Тек);
		КонецЦикла;	
	КонецЕсли;
	
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецФункции



&НаКлиенте
Функция MapsFrom1C_GetVenicleMenuItems() Экспорт
	Стр = "";
	
	Для Каждого Тек Из СписокРейсовДляКонтекстногоМеню Цикл
		НаимП = СтрЗаменить(Тек.Значение.НаимПунктаМеню, "_", Символы.ПС);
		//НаимП = СтрПолучитьСтроку(НаимП, 2);
		Стр = Стр + НаимП + "," + Тек.Представление + ";";
	КонецЦикла;	
	
	Стр = Стр + "";
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция MapsFrom1C_VenicleMenuCommand(Param) Экспорт
	
	//МассивНомеров = Новый Массив;
	//Для Каждого Тек Из СписокВыделенныхТочекНаКарте Цикл
	//	МассивНомеров.Добавить(Тек.Значение);
	//КонецЦикла;	
	
	//МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева("");
	//Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
	//	Сообщить("Не выделены заказы!");
	//	Возврат;
	//КонецеСли;	
	
	КодТранспорта = Param;
	
	
	Мас = Новый Массив;
	
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Тек.Заказ);
		Мас.Добавить(Струк);
	КонецЦикла;	
	
	Если Не МаршрутизацияЗакрыта Тогда
		Рез = ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(Мас, КодТранспорта, "");
		ОбновитьДанные(Истина, Истина, Истина);
	Иначе
		ПоложитьЗаказыВРейсИзДереваРейсов(Мас, КодТранспорта, ДатаПланирования, Регион);
		ОбновитьДанные(Истина, Истина, Истина);
	КонецеСли;	
	//ОчиститьТочкиНаКарте();
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	СписокВыделенныхТочекНаКартеТЗ.Очистить();
	
	Возврат "";
КонецФункции	
&НаКлиенте
Функция MapsFrom1C_ClickOnPoligon(Param) Экспорт
	//КоллекцияЭлементовДерева = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
	//
	//Полигон = ПолучитьПолигонПоИмени(Param);
	//
	//Если Полигон = Неопределено Тогда
	//	Возврат "";
	//КонецеСли;	
	//
	//Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
	//	Если СтрокаДерева.ПолигонМаршрутизации = Полигон Тогда 
	//		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
	//		Элементы.ДеревоПолигоновСЗаказами.ТекущаяСтрока = ИдентификаторСтроки;
	//	КонецЕсли; 
	//КонецЦикла; 	
	
	Возврат "";
КонецФункции



&НаСервере
Функция СнятьОтметкуВДеревьях(УИД)
	Струк = Новый Структура();
	Струк.Вставить("УИД", УИД);
	
	Най = СписокТочекНаКартеТЗ.НайтиСтроки(Струк);
	Если Най.Количество() Тогда
		ТипДерева = Най[0].НомерДерева;
	КонецеСли;	
	
	Если ТипДерева = 1 Тогда
		Д = РеквизитФормыВЗначение("ДеревоПолигоновСЗаказами", Тип("ДеревоЗначений"));
	Иначе
		Д = РеквизитФормыВЗначение("ДеревоРейсовСЗаказами", Тип("ДеревоЗначений"));
	КонецЕсли;	
	
	
	Строки = Д.Строки.НайтиСтроки(Струк, Истина);
	Если Строки.Количество() Тогда
		Для Каждого Тек Из Строки Цикл
			Тек.Отметка = Ложь;
		КонецЦикла;	
		Если ТипДерева = 1 Тогда
			ЗначениеВРеквизитФормы(Д, "ДеревоПолигоновСЗаказами");
		Иначе
			ЗначениеВРеквизитФормы(Д, "ДеревоРейсовСЗаказами");
		КонецеСли;	
	КонецеСли;	
	
	СписокТочекНаКартеТЗ.Удалить(Най[0]);
	
	Возврат ТипДерева;
КонецФункции

&НаКлиенте
Функция СнятьОтметкуВДеревьяхНаКлиенте(УИД)
	Струк = Новый Структура();
	Струк.Вставить("УИД", УИД);
	
	Най = СписокТочекНаКартеТЗ.НайтиСтроки(Струк);
	Если Най.Количество() Тогда
		ТипДерева = Най[0].НомерДерева;
	КонецеСли;	
	
	Если ТипДерева = 1 Тогда
		Д = ДеревоПолигоновСЗаказами;
	Иначе
		Д = ДеревоРейсовСЗаказами;
	КонецЕсли;	
	
	
	Строки = Д.ПолучитьЭлементы();
	Для Каждого Тек Из Строки Цикл
		СтрокиЗаказов = Тек.ПолучитьЭлементы();
		Для Каждого ТекЗаказ Из СтрокиЗаказов Цикл
			Если ТекЗаказ.УИД = УИД Тогда
				ТекЗаказ.Отметка = 0;
				УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(ТекЗаказ.УИД);
				Прервать;
			КонецеСли;	
		КонецЦикла;	
	КонецЦикла;	
	СписокТочекНаКартеТЗ.Удалить(Най[0]);
	
	Возврат ТипДерева;
КонецФункции


&НаКлиенте
Функция MapsFrom1C_OnDeletePointFromMap(Param) Экспорт
	ТипДерева = СнятьОтметкуВДеревьяхНаКлиенте(Param);
	Если ТипДерева = 1 Тогда
		ИнициализацияРодительскихФлажков("ДеревоПолигоновСЗаказами");
	Иначе	
		ИнициализацияРодительскихФлажков("ДеревоРейсовСЗаказами");
	КонецЕсли;	
	//Сообщить(Param);
	Возврат "";
КонецФункции

#КонецОбласти


#Область РаботаСПолемКарты

&НаКлиенте
Процедура СформироватьНадписьДекорацииВыделенныхЗаказов()
	МассивФорматированныхСтрок = Новый Массив;
	
	Если СписокВыделенныхТочекНаКартеТЗ.Количество() > 0 Тогда
		СтрокаВыделенныхЗаказовПоЗаказу = Новый ФорматированнаяСтрока("Заказы (" + Формат(СписокВыделенныхТочекНаКартеТЗ.Количество(), "") + " шт.): ",Новый Шрифт(,,Истина));
	Иначе	
		СтрокаВыделенныхЗаказовПоЗаказу = Новый ФорматированнаяСтрока("Заказы не выделены",Новый Шрифт(,,Истина));
	КонецеСли;
	
	МассивФорматированныхСтрок.Добавить(СтрокаВыделенныхЗаказовПоЗаказу); 
	
	Сч = 1;
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		СтрокаВыделенныхЗаказовПоЗаказу = Новый ФорматированнаяСтрока(СокрЛП(Тек.НомерЗаказа), Новый Шрифт(,,Истина), WebЦвета.Красный,, ПолучитьНавигационнуюСсылку(Тек.Заказ));
		МассивФорматированныхСтрок.Добавить(СтрокаВыделенныхЗаказовПоЗаказу);
		Если Сч <> СписокВыделенныхТочекНаКартеТЗ.Количество() Тогда
			МассивФорматированныхСтрок.Добавить(", ");
		КонецеСли;	
		
		Сч = Сч + 1;
	КонецЦикла;	
	
	Элементы.ДекорацияВыделенныеЗаказы.Заголовок = Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьЗаказИзСпискаВыделенныхЗаказовНаКарте(УИД)
	Струк = Новый Структура;
	Струк.Вставить("УИД", Строка(УИД));
	НайСтроки = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Струк);
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		СписокВыделенныхТочекНаКартеТЗ.Удалить(Тек);
	КонецЦикла;	
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаказИзСпискаВыделенныхЗаказовНаКартеНаСервере(УИД)
	Струк = Новый Структура;
	Струк.Вставить("УИД", Строка(УИД));
	НайСтроки = СписокВыделенныхТочекНаКартеТЗ.НайтиСтроки(Струк);
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		СписокВыделенныхТочекНаКартеТЗ.Удалить(Тек);
	КонецЦикла;	
КонецПроцедуры	



&НаКлиенте
Процедура ОчиститьВыделениеЗаказовНаКарте(Команда)
	имяСтиляДоставка = "cr1_1_2";
	имяСтиляЗабор = "tr1_1_2";
	НомерСтиля_v2 = 0;
	
	Для Каждого Тек Из СписокВыделенныхТочекНаКартеТЗ Цикл
		//Если Тек.ТипЗаказа = 1 Тогда
		//	СменитьСтильМаркераСтроки(Тек.УИД, имяСтиляДоставка, НомерСтиля_v2);
		//Иначе
		//	СменитьСтильМаркераСтроки(Тек.УИД, имяСтиляЗабор, НомерСтиля_v2);
		//КонецеСли;
		
		Если Тек.НомерДерева = 1 Тогда
			НомерЦвета = 8;
		Иначе
			НомерЦвета = 0;
		КонецеСли;
		СменитьСтильМаркераСтроки(Тек.УИД, НомерЦвета);
	КонецЦикла;	
	СписокВыделенныхТочекНаКартеТЗ.Очистить();
	
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтильМаркераСтроки(УИД, НомерЦвета)
	
	Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		ВызовФункции = "changeStyleByUID('" + УИД + "'," + НомерЦвета + ")";
	//Иначе	
	//	ВызовФункции = "changeStyleByUID('" + УИД + "','" + СтильМетки + "')";
	КонецеСли;	
	
	ВыполнитьСкрипт(ВызовФункции);
	
	//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда  Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = ВызовФункции;
	//Иначе	
	//	Элементы.ПолеXTML.Document.parentWindow.eval(ВызовФункции);
	//КонецеСли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеXTMLДокументСформирован(Элемент)
	ЭтаФорма.Элементы.ПолеXTML.Документ.parentWindow.SetForm1C(ЭтаФорма);
	ПолеXTMLБылоСформировано = Истина;
КонецПроцедуры


&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Возврат Обработки.ПолигональныйМаршрутизатор.ПолучитьМакет(ИмяМакета);
КонецФункции	

&НаКлиенте
Процедура ОбновитьПолеКарты(ШиринаКарты = Неопределено, ВысотаКарты = Неопределено)
	
	Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		Макет = ПолучитьМакетНаСервере("МакетСтриж_v2");
	Иначе	
		Макет = ПолучитьМакетНаСервере("МакетСтриж");
	КонецеСли;	
	
	КодХТМЛ = Макет.ПолучитьТекст();
	
	
	Если Объект.ВерсияКартыПолигональногоМаршрутизатора <> "v2" Тогда
		СтрокаСтиляНачальная = "CreateIconStyle('s8',""C:/icons_/kv2_5_x.gif"");";
		
		СтрокаСтиляИтоговая = "";
		
		имяКаталогаКартинок = "C:\icons_";
		КаталогКартинок = Новый Файл(имяКаталогаКартинок);
		Если КаталогКартинок.ЭтоКаталог() тогда
			МассивНайденных = НайтиФайлы(имяКаталогаКартинок, "*.gif");
			Для Каждого Файл из МассивНайденных Цикл 
				
				времСтрокаСтиля = СтрокаСтиляНачальная;
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "s8", сокрЛП(Файл.ИмяБезРасширения));
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "C:/icons_/kv2_5_x.gif", "C:/icons_/" + сокрЛП(Файл.Имя));
				
				СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + времСтрокаСтиля + символы.ПС;
				
			КонецЦикла; 
			
			МассивНайденных = НайтиФайлы(имяКаталогаКартинок, "*.png");
			Для Каждого Файл из МассивНайденных Цикл 
				
				времСтрокаСтиля = СтрокаСтиляНачальная;
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "s8", сокрЛП(Файл.ИмяБезРасширения));
				времСтрокаСтиля = стрЗаменить(времСтрокаСтиля, "C:/icons_/kv2_5_x.gif""", "C:/icons_/" + сокрЛП(Файл.Имя) + """, true");
				
				СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + времСтрокаСтиля + символы.ПС;
				
			КонецЦикла; 
		конецЕсли;	
		СтрокаСтиляИтоговая = СтрокаСтиляИтоговая + СтрокаСтиляНачальная + символы.ПС;
		
		КодХТМЛ = стрЗаменить(КодХТМЛ, "/*vstavkaStiley;", СтрокаСтиляИтоговая);
	КонецеСли;
	
	СтрокаЗапросаСкрипта = "";
	
	КодХТМЛ = стрЗаменить(КодХТМЛ, "^ЗапросОбновленияПолигонов^", СтрокаЗапросаСкрипта);		
	
	путьККаталогуКартинок = СтрЗаменить(КаталогПрограммы(), "\", "/");
	Если ШиринаКарты = Неопределено Или ВысотаКарты = Неопределено Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^РазмерыКарты^","width:900px;height:650px");
	Иначе
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^РазмерыКарты^","width:" + Формат(Ширина, "ЧГ=") + "px;height:" + Формат(Высота, "ЧГ=") + "px");
	КонецеСли;	
	
	Если ПолигональнаяСхемаКарты.Пустая() Тогда
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^","");
	Иначе	
		КодХТМЛ = СтрЗаменить(КодХТМЛ,"^ПараметрИдСхемы^",Формат(ПолигональнаяМаршрутизацияСервер.ИдентификаторСхемыПолигонов(ПолигональнаяСхемаКарты), "ЧГ="));
	КонецеСли;	
		
	ДанныеXTML = КодХТМЛ;
	
	ОбновитьДанные(Ложь);
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПолеКарты1(Команда)
	// Вставить содержимое обработчика.
	ОбновитьПолеКарты();
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьКарту(Команда)
	ИдСхемы = Формат(ПолигональнаяМаршрутизацияСервер.ИдентификаторСхемыПолигонов(ПолигональнаяСхемаКарты), "ЧГ=");
	
	//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = "removeAllOverlays(" + ИдСхемы + ")";
	//Иначе	
	//	Элементы.ПолеXTML.Документ.parentWindow.eval("removeAllOverlays(" + ИдСхемы + ")");
	//КонецеСли;	
	ВыполнитьСкрипт("removeAllOverlays(" + ИдСхемы + ")");
КонецПроцедуры
 
 
&НаКлиенте
Процедура ПоказатьВыбранныеЗаказыПолигоновНаКарте(РеквизитДерево)
	Если РеквизитДерево = "ДеревоПолигоновСЗаказами" Тогда
		имяСтиляДоставка = "cr1_1_2";
		имяСтиляЗабор = "tr1_1_2";
		НомерДерева = 1;
		НомерЦвета = 8;
	ИначеЕсли РеквизитДерево = "ДеревоРейсовСЗаказами" Тогда
		имяСтиляДоставка = "cr6_1";
		имяСтиляЗабор = "tr5_1";		
		НомерДерева = 2;
		НомерЦвета = 0;
	КонецеСли;	
	МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева(РеквизитДерево);
	Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
		//Сообщить("Не выделены заказы!");
		Возврат;
	КонецеСли;	
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого Тек Из МассивЗначений Цикл
		//Если Тек.ТипЗаказа = 1 Тогда
		//	ИмяСтиля = имяСтиляДоставка;
		//ИначеЕсли Тек.ТипЗаказа = 2 Тогда	
		//	ИмяСтиля = имяСтиляЗабор;
		//КонецеСли;
		Широта = Тек.Широта;
		Долгота = Тек.Долгота;
		
		Если Не ЗначениеЗаполнено(Широта) или Не ЗначениеЗаполнено(Долгота) Тогда
			Сообщить("Не определены координаты заказа " + СокрЛП(Тек.НомерЗаказа));
			Продолжить;
		КонецеСли;	
		//
		УИД_Дока = Строка(Тек.ИдентификаторЗаказа); 
		ОшибкаОтображенияТочки = Ложь;
		//Попытка
		//	Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		//		Если Тек.ТипЗаказа = 1 Тогда
		//			ВызовФункции = "showAddressCoord('" + Формат(Широта, "ЧРД=.; ЧГ=") + "', '" + Формат(Долгота, "ЧРД=.; ЧГ=")  + "', 'Заказ № " + сокрЛП(Тек.НомерЗаказа) + ", "  + сокрЛП(Тек.адрес) + "', '" + имяСтиля + "', '" + УИД_Дока + "', 0)";     //сокрЛП(Тек.КонтрагентНаименование)
		//		Иначе
		//			ВызовФункции = "showAddressCoord('" + Формат(Широта, "ЧРД=.; ЧГ=") + "', '" + Формат(Долгота, "ЧРД=.; ЧГ=")  + "', 'Забор № " + сокрЛП(Тек.НомерЗаказа) + ", "  + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + "', '" + имяСтиля + "', '" + УИД_Дока + "', 1)";    
		//		КонецеСли;	
		//		
		//	Иначе	
		//		Если Тек.ТипЗаказа = 1 Тогда
		//			ВызовФункции = "showAddressCoord('" + Формат(Широта, "ЧРД=.; ЧГ=") + "', '" + Формат(Долгота, "ЧРД=.; ЧГ=")  + "', 'Заказ № " + сокрЛП(Тек.НомерЗаказа) + ", "  + сокрЛП(Тек.адрес) + "', '" + имяСтиля + "', '" + УИД_Дока + "')";     //сокрЛП(Тек.КонтрагентНаименование)
		//		Иначе
		//			ВызовФункции = "showAddressCoord('" + Формат(Широта, "ЧРД=.; ЧГ=") + "', '" + Формат(Долгота, "ЧРД=.; ЧГ=")  + "', 'Забор № " + сокрЛП(Тек.НомерЗаказа) + ", "  + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + "', '" + имяСтиля + "', '" + УИД_Дока + "')";    
		//		КонецеСли;	
		//		//Элементы.ПолеXTML.Документ.parentWindow.eval(ВызовФункции);
		//	КонецеСли;
		//	//ВыполнитьСкрипт(ВызовФункции);
		//исключение
		//	Сообщить("Точка с адресом " + сокрЛП(Тек.адрес) + " не может быть отбражена на карте! Описание ошибки: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);	
		//	ОшибкаОтображенияТочки = Истина;
		//конецПопытки;
		
		
		СтрукJSON = Новый Структура;
		СтрукJSON.Вставить("lat", Формат(Широта, "ЧРД=.; ЧГ="));
		СтрукJSON.Вставить("lng", Формат(Долгота, "ЧРД=.; ЧГ="));
		СтрукJSON.Вставить("UID", УИД_Дока);
		СтрукJSON.Вставить("color", НомерЦвета);
		Если Тек.ТипЗаказа = 1 Тогда
			СтрукJSON.Вставить("type", 0);
			СтрукJSON.Вставить("contrag", "Заказ № " + сокрЛП(Тек.НомерЗаказа) + ", интервал с " + Формат(Тек.ВремяПрибытияС, "ДЛФ=T") + " по " + Формат(Тек.ВремяПрибытияПо, "ДЛФ=T") + ", " + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + ", вес " + Формат(Тек.ВесогабаритныйПоказатель, "ЧН=0") + "");
		Иначе
			СтрукJSON.Вставить("contrag", "Забор № " + сокрЛП(Тек.НомерЗаказа) + ", интервал с " + Формат(Тек.ВремяПрибытияС, "ДЛФ=T") + " по " + Формат(Тек.ВремяПрибытияПо, "ДЛФ=T") + ", " + сокрЛП(Тек.адрес) + ", " + сокрЛП(Тек.КонтрагентНаименование) + ", объём " + Формат(Тек.ВесогабаритныйПоказатель, "ЧН=0") + "");
			СтрукJSON.Вставить("type", 1);
		КонецЕсли;	
		
		МассивСтруктур.Добавить(СтрукJSON);
		
		
	
		
		//Если Не ОшибкаОтображенияТочки Тогда
			//СписокТочекНаКарте.Добавить(УИД_Дока);
			Нов = СписокТочекНаКартеТЗ.Добавить();
			Нов.УИД = УИД_Дока;
			Нов.НомерДерева = НомерДерева;
			Нов.НомерЗаказа = Тек.НомерЗаказа;
			Нов.ТипЗаказа = Тек.ТипЗаказа;
			Нов.Заказ = Тек.Заказ;
		//КонецеСли;	
	КонецЦикла;	
	
	лПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
	
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(лПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, МассивСтруктур, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	ВызовФункции = "showAddressCoordByArr(" + СтрокаJSON + ")";
	ВыполнитьСкрипт(ВызовФункции);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТочкиНаКарте()
	Если СписокТочекНаКартеТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;	
	
	МассивТочек = "[";
	
	Для Каждого Тек Из СписокТочекНаКартеТЗ Цикл
	
		УИД_Дока = Строка(Тек.УИД); 
		
		МассивТочек = МассивТочек + "'" + УИД_Дока + "',";
	КонецЦикла;	

	
	МассивТочек = Лев(МассивТочек, СтрДлина(МассивТочек) -1) + "]";
	
	ВызовФункции = "removePointByUIDArray(" + МассивТочек + ")";    
	
	//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
	//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = ВызовФункции;
	//Иначе	
	//	Элементы.ПолеXTML.Документ.parentWindow.eval(ВызовФункции);
	//КонецЕсли;	
	
	ВыполнитьСкрипт(ВызовФункции);
	
	СписокТочекНаКартеТЗ.Очистить();
	
	СписокВыделенныхТочекНаКарте.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура ОтобразитьВсеВыделенныеТочкиНаКарте()
	ОчиститьТочкиНаКарте();
	ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоРейсовСЗаказами");	
	ПоказатьВыбранныеЗаказыПолигоновНаКарте("ДеревоПолигоновСЗаказами");
	СформироватьНадписьДекорацииВыделенныхЗаказов();
КонецПроцедуры	

&НаСервере
Функция ПолучитьДанныеОтображенияМаркеровПолигонов()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ВЫБОР
	            |		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	            |				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	            |				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	            |			ТОГДА 1
	            |		ИНАЧЕ 2
	            |	КОНЕЦ КАК ТипАвто,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование КАК ГосНомер,
	            |	ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Наименование КАК НазваниеПолигона
	            |ИЗ
	            |	РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсамТест.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ПО ПолигоныИКатегорииЗаказовДляРейсов.Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	            |ГДЕ
	            |	ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ТерминалДоставки = &ТерминалДоставки
	            |	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Владелец = &СхемаПолигональнойМаршрутизации
	            |	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ПометкаУдаления = ЛОЖЬ
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВЫБОР
	            |		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	            |				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	            |				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	            |			ТОГДА 1
	            |		ИНАЧЕ 2
	            |	КОНЕЦ,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	            |	ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Наименование
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ВЫБОР
	            |		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	            |				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	            |				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	            |			ТОГДА 1
	            |		ИНАЧЕ 2
	            |	КОНЕЦ,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	            |	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Наименование
	            |ИЗ
	            |	РегистрСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СрезПоследних КАК ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсамТест.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныМаршрутизацииЗаказов.СрезПоследних КАК ПолигоныМаршрутизацииЗаказовСрезПоследних
	            |		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ = ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ
	            |			И (ПолигоныМаршрутизацииЗаказовСрезПоследних.СхемаМаршрутизации = &СхемаПолигональнойМаршрутизации)
	            |ГДЕ
	            |	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ТерминалДоставки = &ТерминалДоставки
	            |	И ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.ПометкаУдаления = ЛОЖЬ
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВЫБОР
	            |		КОГДА ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Заборный транспорт""
	            |				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер""
	            |				ИЛИ ПривязкаМашинКРейсамСрезПоследних.Транспорт.ТипТранспорта.Наименование = ""Транспортер с экспедитором""
	            |			ТОГДА 1
	            |		ИНАЧЕ 2
	            |	КОНЕЦ,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	            |	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Наименование";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	
	Зап.УстановитьПараметр("СхемаПолигональнойМаршрутизации", ПолигональнаяСхемаКарты);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Таб = Зап.Выполнить().Выгрузить();
	Таб.Свернуть("ТипАвто, ГосНомер, НазваниеПолигона");
	
	Возврат lem.ТабЗначВМассив(Таб);
КонецФункции

&НаКлиенте
Процедура ВыводАвтоНаКарту()
	Если Не ПолеXTMLБылоСформировано Тогда
		Возврат;
	КонецеСли;	
	
	ЕстьДанные = Истина;
	
	Если ПоказыватьАвтоНаКарте Тогда
		//сброс показанных авто
		Стр = "MapUtils.RemoveCars()";
		
		//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
		//Иначе
		//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
		//КонецеСли;	
		ВыполнитьСкрипт(Стр);
		
		//вывод авто
		Мас = ПолучитьДанныеОтображенияМаркеровПолигонов();	
		Стр = "MapUtils.ShowCars('[";
		Для Каждого Тек Из Мас Цикл
			Стр = Стр + "{polygonName:""" + СокрЛП(СтрЗаменить(Тек.НазваниеПолигона, Символы.ПС, "")) + """, carName:""" + Тек.ГосНомер + """, carType:" + Формат(Тек.ТипАвто) + "},";
		КонецЦикла;	
		Стр = Лев(Стр, СтрДлина(Стр) - 1) + "]')";
		
		Если Мас.Количество() = 0 Тогда
			ЕстьДанные = Ложь;
		КонецеСли;	
	Иначе
		Стр = "MapUtils.RemoveCars()";
	КонецеСли;	
	
	Если ЕстьДанные Тогда
		//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
		//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
		//Иначе	
		//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
		//КонецеСли;	
		ВыполнитьСкрипт(Стр);
	КонецеСли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказыватьАвтоНаКарте(Команда)
	// Вставить содержимое обработчика.
	ПоказыватьАвтоНаКарте = Не ПоказыватьАвтоНаКарте;
	ВыводАвтоНаКарту();
	Элементы.ФормаПоказыватьАвтоНаКарте.Пометка = ПоказыватьАвтоНаКарте;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВсехПолигоновСхемы(Схема)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПолигоныМаршрутизации.Ссылка КАК Ссылка
	            |ИЗ
	            |	Справочник.ПолигоныМаршрутизации КАК ПолигоныМаршрутизации
	            |ГДЕ
	            |	ПолигоныМаршрутизации.Владелец = &Схема
	            |	И ПолигоныМаршрутизации.ПометкаУдаления = ЛОЖЬ";
	Зап.УстановитьПараметр("Схема", Схема);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Мас = Новый Массив;
	
	Пока Выб.Следующий() Цикл
		Мас.Добавить(Выб.Ссылка);
	КонецЦикла;	
	
	Возврат Мас;
КонецФункции	

&НаКлиенте
Процедура ВыделениеПолигоновНаКарте()
	Если Не ПолеXTMLБылоСформировано Тогда
		Возврат;
	КонецеСли;	
		
	
	Мас = ПолучитьМассивВсехПолигоновСхемы(ПолигональнаяСхемаКарты);
	
	МасСтрокД = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
	
	ЕстьДанные = Истина;
	
	
	Если ВыделятьПолигоныНаКарте Тогда
		//сброс выделения
		Если ЕстьДанные Тогда
			Стр = "MapUtils.ChangeColor('[";
			Для Каждого Тек Из Мас Цикл
				Стр = Стр + "{name:""" + СокрЛП(СтрЗаменить(Тек, Символы.ПС, "")) + """, select:false},";				
			КонецЦикла;	
			Стр = Лев(Стр, СтрДлина(Стр) - 1) + "]')";
			
			//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
			//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
			//Иначе	
			//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
			//КонецЕсли;	
			ВыполнитьСкрипт(Стр);
		КонецеСли;
		
		
		
		Для Каждого Тек Из МасСтрокД Цикл
			Инд = Мас.Найти(Тек.ПолигонМаршрутизации);
			Если Инд <> Неопределено Тогда
				Мас.Удалить(Инд);
			КонецеСли; 
		КонецЦикла;	 
		
		Если Мас.Количество() = 0 Тогда
			ЕстьДанные = Ложь;
		КонецеСли;	
		//Выделение
		Если ЕстьДанные Тогда
			Стр = "MapUtils.ChangeColor('[";
			Для Каждого Тек Из Мас Цикл
				Стр = Стр + "{name:""" + СокрЛП(СтрЗаменить(Тек, Символы.ПС, "")) + """, select:true},";				
			КонецЦикла;	
			Стр = Лев(Стр, СтрДлина(Стр) - 1) + "]')";
			
			//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
			//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
			//Иначе	
			//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
			//КонецеСли;	
			ВыполнитьСкрипт(Стр);
		КонецеСли;
	Иначе
		Если ЕстьДанные Тогда
			Стр = "MapUtils.ChangeColor('[";
			Для Каждого Тек Из Мас Цикл
				Стр = Стр + "{name:""" + СокрЛП(СтрЗаменить(Тек, Символы.ПС, "")) + """, select:false},";				
			КонецЦикла;	
			Стр = Лев(Стр, СтрДлина(Стр) - 1) + "]')";
			
			//Если Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2" Тогда
			//	Элементы.ПолеXTML.Документ.parentWindow.evalValue = Стр;
			//Иначе	
			//	Элементы.ПолеXTML.Документ.parentWindow.eval(Стр);
			//КонецеСли;	
			ВыполнитьСкрипт(Стр);	
		КонецеСли;
	КонецеСли;
КонецПроцедуры	

&НаКлиенте
Процедура ВыделятьПолигоныНаКарте(Команда)
	ВыделятьПолигоныНаКарте = Не ВыделятьПолигоныНаКарте;
	ВыделениеПолигоновНаКарте();
	Элементы.ФормаВыделятьПолигоныНаКарте.Пометка = ВыделятьПолигоныНаКарте;
КонецПроцедуры

#КонецОбласти



#Область ОбщиеКоманды
&НаСервере
Процедура ЗафиксироватьМаршрутизацию()
	baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(ФормированиеРейсов.Ссылка, Истина);
	МаршрутизацияЗакрыта = Истина;
КонецПроцедуры	

&НаСервере
Процедура МаршрутизироватьПоУмолчаниюНаСервере()
	
	ЗапРейсов = Новый Запрос;
	ЗапРейсов.Текст = "ВЫБРАТЬ
	                  |	РейсДокумент.Ссылка КАК Рейс,
	                  |	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	                  |	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель
	                  |ИЗ
	                  |	Документ.РейсТест КАК РейсДокумент
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсамТест.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	                  |		ПО ПривязкаМашинКРейсамСрезПоследних.Рейс = РейсДокумент.Ссылка
	                  |ГДЕ
	                  |	РейсДокумент.ДатаРейса = &ДатаРейса
	                  |	И РейсДокумент.ТерминалДоставки = &ТерминалДоставки
	                  |	И РейсДокумент.Проведен = ИСТИНА";
	ЗапРейсов.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	ЗапРейсов.УстановитьПараметр("ТерминалДоставки", Регион);
	
	ВыбРейсов = ЗапРейсов.Выполнить().Выбрать();
	Пока ВыбРейсов.Следующий() Цикл
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	ПолигоныИКатегорииЗаказовДляРейсов.Полигон КАК Полигон,
		|	ПолигоныИКатегорииЗаказовДляРейсов.КатегорияЗаказа КАК КатегорияЗаказа
		|ПОМЕСТИТЬ ВТ_УжеНазначенныеПолигоныНаДругиеРейсы
		|ИЗ
		|	РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
		|ГДЕ
		|	ПолигоныИКатегорииЗаказовДляРейсов.Рейс <> &Рейс
		|	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.ДатаРейса = &ДатаРейса
		|	И ПолигоныИКатегорииЗаказовДляРейсов.Рейс.Проведен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыеПолигоныЭкипажейСрезПоследних.Полигон КАК Полигон
		|ПОМЕСТИТЬ ВТ_Полигоны
		|ИЗ
		|	РегистрСведений.ПланируемыеПолигоныЭкипажей.СрезПоследних(
		|			,
		|			СхемаПолигональнойМаршрутизации = &СхемаПолигональнойМаршрутизации
		|				И Водитель = &Водитель) КАК ПланируемыеПолигоныЭкипажейСрезПоследних
		|ГДЕ
		|	ПланируемыеПолигоныЭкипажейСрезПоследних.ПолигонУчитывается = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыеКатегорииЗаказовТранспортаСрезПоследних.Категория КАК Категория
		|ПОМЕСТИТЬ ВТ_Категории
		|ИЗ
		|	РегистрСведений.ПланируемыеКатегорииЗаказовТранспорта.СрезПоследних(
		|			,
		|			СхемаЛогистическихБрейков = &СхемаЛогистическихБрейков
		|				И Транспорт = &Транспорт) КАК ПланируемыеКатегорииЗаказовТранспортаСрезПоследних
		|ГДЕ
		|	ПланируемыеКатегорииЗаказовТранспортаСрезПоследних.КатегорияУчитывается = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Полигоны.Полигон КАК Полигон,
		|	ВТ_Категории.Категория КАК КатегорияЗаказа
		|ПОМЕСТИТЬ ВТ_ПолигоныИКатегории
		|ИЗ
		|	ВТ_Полигоны КАК ВТ_Полигоны,
		|	ВТ_Категории КАК ВТ_Категории
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПолигоныИКатегории.Полигон КАК Полигон,
		|	ВТ_ПолигоныИКатегории.КатегорияЗаказа КАК КатегорияЗаказа,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.Полигон, ИСТИНА) = ИСТИНА
		|				И ЕСТЬNULL(ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.КатегорияЗаказа, ИСТИНА) = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПолигонКатегорияСвободны
		|ИЗ
		|	ВТ_ПолигоныИКатегории КАК ВТ_ПолигоныИКатегории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УжеНазначенныеПолигоныНаДругиеРейсы КАК ВТ_УжеНазначенныеПолигоныНаДругиеРейсы
		|		ПО ВТ_ПолигоныИКатегории.Полигон = ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.Полигон
		|			И ВТ_ПолигоныИКатегории.КатегорияЗаказа = ВТ_УжеНазначенныеПолигоныНаДругиеРейсы.КатегорияЗаказа";
		Зап.УстановитьПараметр("СхемаПолигональнойМаршрутизации", ПолигональнаяСхемаКарты);
		Зап.УстановитьПараметр("Водитель", ВыбРейсов.Водитель);
		Зап.УстановитьПараметр("Транспорт", ВыбРейсов.Транспорт);
		Зап.УстановитьПараметр("СхемаЛогистическихБрейков", СхемаЛогистическихБрейков);
		Зап.УстановитьПараметр("Рейс", ВыбРейсов.Рейс);
		Зап.УстановитьПараметр("ДатаРейса", НачалоДня(ДатаПланирования));
		
		
		Рез = Зап.Выполнить();
		
		Если Рез.Пустой() Тогда
			Сообщить("Для экипажа не настроены данные по умолчанию!! (" + СокрЛП(ВыбРейсов.Транспорт) + ", " + СокрЛП(ВыбРейсов.Водитель) + ")", СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецеСли;	
		
		Выб = Рез.Выбрать();
		
		Наб = РегистрыСведений.ПолигоныИКатегорииЗаказовДляРейсов.СоздатьНаборЗаписей();
		Наб.Отбор.Рейс.Установить(ВыбРейсов.Рейс);
		
		Пока Выб.Следующий() Цикл
			Если Не Выб.ПолигонКатегорияСвободны Тогда
				Сообщить("Полигон " + СокрЛП(Выб.Полигон) + " и категория " + СокрЛП(Выб.КатегорияЗаказа) + " уже заняты другим транспортом! Назначение данных по умолчанию отменено! (" + СокрЛП(ВыбРейсов.Транспорт) + ", " + СокрЛП(ВыбРейсов.Водитель) + ")", СтатусСообщения.ОченьВажное);
				Продолжить;
			КонецеСли;	
			Нов = Наб.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Выб);
			Нов.Рейс = ВыбРейсов.Рейс;
			Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		КонецЦикла;	
		
		Наб.Записать();
	КонецЦикла;	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьДанныеМаршрутизации(ДатаПланирования, Регион) 
	Наб = РегистрыСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СоздатьНаборЗаписей();
	Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
	
	Наб.Записать();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Рейс.Ссылка КАК Рейс
	            |ИЗ
	            |	Документ.РейсТест КАК Рейс
	            |ГДЕ
	            |	Рейс.Проведен = ИСТИНА
	            |	И Рейс.ДатаРейса = &ДатаРейса
	            |	И Рейс.ТерминалДоставки = &ТерминалДоставки";
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Выб = зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		Наб = РегистрыСведений.ПолигоныИКатегорииЗаказовДляРейсов.СоздатьНаборЗаписей();
		Наб.Отбор.Рейс.Установить(Выб.Рейс);
		
		Наб.Записать();
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура МаршрутизироватьПоУмолчанию(Команда)
	От = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("МаршрутизироватьПоУмолчаниюЗавершение", ЭтотОбъект), "Все данные маршрутизации будут очищены и установлены по умолчанию. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизироватьПоУмолчаниюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	От = РезультатВопроса;
	
	Если От = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеМаршрутизации(ДатаПланирования, Регион);
		Сообщить("Очистка данных завершена!");
		МаршрутизироватьПоУмолчаниюНаСервере();
		ОбновитьДанные(Ложь);
		Сообщить("Маршрутизация по умолчанию завершена!");
	КонецеСли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОчиститьДанныеМаршрутизацииНаСервере(ДатаПланирования, Регион)
	// Вставить содержимое обработчика.
	ОчиститьДанныеМаршрутизации(ДатаПланирования, Регион)
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьДанныеМаршрутизации1(Команда)
	От = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьДанныеМаршрутизации1Завершение", ЭтотОбъект), "Данные маршрутизации будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеМаршрутизации1Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	От = РезультатВопроса;
	Если От = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеМаршрутизацииНаСервере(ДатаПланирования, Регион);
		ОбновитьДанные(Ложь);
		Сообщить("Очистка данных завершена!");
	КонецеСли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПунктаКонтекстногоМенюПолигонов_Рейсы(Элемент)
	МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева("ДеревоПолигоновСЗаказами");
	Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
		Сообщить("Не выделены заказы!");
		Возврат;
	КонецеСли;	
	
	КодТранспорта = СтрПолучитьСтроку(СтрЗаменить(Элемент.Имя, "_", Символы.ПС), 2);
	
	Если Не МаршрутизацияЗакрыта Тогда
		ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(МассивЗначений, КодТранспорта, "ДеревоПолигоновСЗаказами");
		ОбновитьДанные(Ложь, Ложь, Истина);
	Иначе
		ПоложитьЗаказыВРейсИзДереваПолигонов(МассивЗначений, КодТранспорта, ДатаПланирования);
		ОбновитьДанные(Ложь, Истина, Истина);
	КонецеСли;	
	//ОчиститьТочкиНаКарте();
	ОтобразитьВсеВыделенныеТочкиНаКарте();
КонецПроцедуры	

&НаКлиенте
Процедура ВыборПунктаКонтекстногоМенюРейсов_Рейсы(Элемент)
	МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева("ДеревоРейсовСЗаказами");
	Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
		Сообщить("Не выделены заказы!");
		Возврат;
	КонецеСли;	
	
	КодТранспорта = СтрПолучитьСтроку(СтрЗаменить(Элемент.Имя, "_", Символы.ПС), 2);
	Если Не МаршрутизацияЗакрыта Тогда
		ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(МассивЗначений, КодТранспорта, "ДеревоРейсовСЗаказами");
	Иначе
		ПоложитьЗаказыВРейсИзДереваРейсов(МассивЗначений, КодТранспорта, ДатаПланирования, Регион);
	КонецеСли;
	
	//ОчиститьТочкиНаКарте();
	ОтобразитьВсеВыделенныеТочкиНаКарте();
	ОбновитьДанные(Ложь, Ложь, Истина);
КонецПроцедуры	


&НаСервере
Функция ЗафиксироватьИндивидуальноМаршрутизированныеЗаказы(МассивЗначений, КодТранспорта, ИсточникВызова)
	
	Рейс = "";
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаТранспорт.Ссылка КАК Транспорт
	            |ПОМЕСТИТЬ ВТ_Транспорт
	            |ИЗ
	            |	Справочник.новаТранспорт КАК новаТранспорт
	            |ГДЕ
	            |	новаТранспорт.Код = &КодТранспорта
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс
	            |ИЗ
	            |	РегистрСведений.ПривязкаМашинКРейсамТест.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	            |		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт.Ссылка = ВТ_Транспорт.Транспорт.Ссылка";
	Зап.УстановитьПараметр("КодТранспорта", КодТранспорта);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Рейс = Выб.Рейс;
	Иначе
		Возврат Ложь;
	КонецеСли;	
	
	ТекПериод = ТекущаяДата();
	
	Для Каждого Тек Из МассивЗначений Цикл
		Наб = РегистрыСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СоздатьНаборЗаписей();
		Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
		Наб.Отбор.Заказ.Установить(Тек.Заказ);
		Наб.Отбор.Период.Установить(ТекПериод);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекПериод;
		Нов.Заказ = Тек.Заказ;
		Нов.ДатаПланирования = ДатаПланирования;
		Нов.Рейс = Рейс;
		Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Наб.Записать();
	КонецЦикла;	
	
	Если ИсточникВызова = "ДеревоПолигоновСЗаказами" Тогда
		УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоПолигоновСЗаказами");
	КонецеСли;	
	Возврат Истина;
КонецФункции	

&НаСервере
Функция УбратьИндивидуальнуюМаршрутизациюНаСервере()
	МассивЗначений = ПодготовитьСписокВыбранныхЗаказовДерева("ДеревоРейсовСЗаказами");
	Если Не ЗначениеЗаполнено(МассивЗначений) Тогда
		Сообщить("Не выделены заказы!");
		Возврат Ложь;
	КонецеСли;	
	ТекПериод = ТекущаяДата();
	
	Для Каждого Тек Из МассивЗначений Цикл
		Наб = РегистрыСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СоздатьНаборЗаписей();
		Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
		Наб.Отбор.Заказ.Установить(Тек.Заказ);
		Наб.Отбор.Период.Установить(ТекПериод);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекПериод;
		Нов.Заказ = Тек.Заказ;
		Нов.ДатаПланирования = ДатаПланирования;
		Нов.Рейс = "";
		
		Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Наб.Записать();
	КонецЦикла;
	
	//не работает, т.к. заказ может перейти на друг. рейс
	//УдалитьСтрокиИзДерева(МассивЗначений, "ДеревоРейсовСЗаказами");
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УбратьИндивидуальнуюМаршрутизацию(Команда)
	СтатусОбработки = УбратьИндивидуальнуюМаршрутизациюНаСервере();
	Если СтатусОбработки Тогда
		ОчиститьТочкиНаКарте();
		ОбновитьДанные(Ложь, Истина, Истина);
		//ОбновитьДанные(Ложь, Истина, Ложь);
		//ЭтаФорма.ОбновитьОтображениеДанных();
		//Элементы.ДеревоРейсовСЗаказами.Обновить();
	КонецеСли;	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьДанныеМаршрутизацииНаСервере()
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ КАК Заказ,
	            |	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс КАК Рейс,
	            |	ДополнительныеПараметрыЗаказа.ЛогистическийБрейк КАК КатегорияЗаказа,
	            |	ВЫБОР
	            |		КОГДА ТИПЗНАЧЕНИЯ(ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ) = ТИП(Документ.РеализацияТоваровУслуг)
	            |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Drop)
	            |		КОГДА ТИПЗНАЧЕНИЯ(ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ) = ТИП(Документ.ЗаборТовара)
	            |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Collection)
	            |	КОНЕЦ КАК ВидЗаказа
	            |ПОМЕСТИТЬ ВТ_ИндивидуальнаяМаршрутизация
	            |ИЗ
	            |	РегистрСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СрезПоследних(, ДатаПланирования = &ДатаНач) КАК ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |		ПО ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	            |ГДЕ
	            |	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс.Ссылка <> ЗНАЧЕНИЕ(Документ.РейсТест.ПустаяСсылка)
	            |	И ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ,
	            |	ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Рейс,
	            |	&ЗаборнаяКатегория,
	            |	ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Collection)
	            |ИЗ
	            |	РегистрСведений.ИндивидуальнаяМаршрутизацияПоРейсам.СрезПоследних(, ДатаПланирования = &ДатаНач) КАК ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних
	            |ГДЕ
	            |	ТИПЗНАЧЕНИЯ(ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ) = ТИП(Документ.ЗаборТовара)
	            |	И ИндивидуальнаяМаршрутизацияПоРейсамСрезПоследних.Заказ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	            |	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка) КАК ТипЗаказа,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ЛогистическийБрейк, ИСТИНА) = ИСТИНА
	            |			ТОГДА 1
	            |		КОГДА ДополнительныеПараметрыЗаказа.ЛогистическийБрейк = ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)
	            |			ТОГДА 1
	            |		ИНАЧЕ ДополнительныеПараметрыЗаказа.ЛогистическийБрейк
	            |	КОНЕЦ КАК КатегорияЗаказа
	            |ПОМЕСТИТЬ ВТ_Заказы_1
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктуальнаяСхемаЛогистическихБрейков.СрезПоследних КАК АктуальнаяСхемаЛогистическихБрейковСрезПоследних
	            |			ПО ДополнительныеПараметрыЗаказа.СхемаЛогистическихБрейков.Ссылка = АктуальнаяСхемаЛогистическихБрейковСрезПоследних.СхемаЛогистическихБрейков.Ссылка
	            |		ПО РеализацияТоваровУслуг.Ссылка = ДополнительныеПараметрыЗаказа.Заказ.Ссылка
	            |			И (ДополнительныеПараметрыЗаказа.Доставка <> ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка))
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	            |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
	            |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	РеализацияТоваровУслуг.Ссылка,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ЛогистическийБрейк, ИСТИНА) = ИСТИНА
	            |			ТОГДА 1
	            |		КОГДА ДополнительныеПараметрыЗаказа.ЛогистическийБрейк = ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)
	            |			ТОГДА 1
	            |		ИНАЧЕ ДополнительныеПараметрыЗаказа.ЛогистическийБрейк
	            |	КОНЕЦ
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ЗаборТовара.Ссылка,
	            |	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор),
	            |	&ЗаборнаяКатегория
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ЗаборТовара.СтатусИнтернетМагазина = 2
	            |	И ЗаборТовара.ПометкаУдаления = ЛОЖЬ
	            |	И ЗаборТовара.ТерминалДоставки = &ТерминалДоставки
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ЗаборТовара.Ссылка
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТ_Заказы_1.КатегорияЗаказа КАК КатегорияЗаказа,
	            |	ЕСТЬNULL(ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации, ЗНАЧЕНИЕ(Справочник.ПолигоныМаршрутизации.ПустаяСсылка)) КАК Полигон,
	            |	ВТ_Заказы_1.Заказ КАК Заказ,
	            |	ВТ_Заказы_1.ТипЗаказа КАК ТипЗаказа
	            |ПОМЕСТИТЬ ВТ_Заказы
	            |ИЗ
	            |	ВТ_Заказы_1 КАК ВТ_Заказы_1
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныМаршрутизацииЗаказов.СрезПоследних(, СхемаМаршрутизации.Ссылка = &СхемаМаршрутизации) КАК ПолигоныМаршрутизацииЗаказовСрезПоследних
	            |		ПО ВТ_Заказы_1.Заказ = ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ
	            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИндивидуальнаяМаршрутизация КАК ВТ_ИндивидуальнаяМаршрутизация
	            |		ПО ВТ_Заказы_1.Заказ = ВТ_ИндивидуальнаяМаршрутизация.Заказ
	            |ГДЕ
	            |	ЕСТЬNULL(ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации, ИСТИНА) <> ИСТИНА
	            |	И ЕСТЬNULL(ВТ_ИндивидуальнаяМаршрутизация.Заказ, ИСТИНА) = ИСТИНА
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТ_Заказы_1.КатегорияЗаказа,
	            |	ЕСТЬNULL(ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации, ЗНАЧЕНИЕ(Справочник.ПолигоныМаршрутизации.ПустаяСсылка)),
	            |	ВТ_Заказы_1.Заказ,
	            |	ВТ_Заказы_1.ТипЗаказа
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	РейсДокументДляПараметров.Ссылка КАК Рейс,
	            |	ПолигоныИКатегорииЗаказовДляРейсов.Полигон КАК Полигон,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ПолигоныИКатегорииЗаказовДляРейсов.КатегорияЗаказа, ИСТИНА) = ИСТИНА
	            |			ТОГДА ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)
	            |		КОГДА ПолигоныИКатегорииЗаказовДляРейсов.КатегорияЗаказа = ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)
	            |			ТОГДА 1
	            |		ИНАЧЕ ПолигоныИКатегорииЗаказовДляРейсов.КатегорияЗаказа
	            |	КОНЕЦ КАК КатегорияЗаказа
	            |ПОМЕСТИТЬ ВТ_РейсыСПараметрами
	            |ИЗ
	            |	Документ.РейсТест КАК РейсДокументДляПараметров
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
	            |		ПО (ПолигоныИКатегорииЗаказовДляРейсов.Рейс = РейсДокументДляПараметров.Ссылка)
	            |ГДЕ
	            |	РейсДокументДляПараметров.Проведен = ИСТИНА
	            |	И РейсДокументДляПараметров.ДатаРейса = &ДатаНач
	            |	И РейсДокументДляПараметров.МетодикаМаршрутизации = ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	            |	И РейсДокументДляПараметров.ТерминалДоставки = &ТерминалДоставки
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТ_РейсыСПараметрами.Рейс.Ссылка КАК Рейс,
	            |	ВТ_Заказы.Заказ.Ссылка КАК Заказ,
	            |	ВЫБОР
	            |		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	            |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Drop)
	            |		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	            |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Collection)
	            |	КОНЕЦ КАК ВидЗаказа,
	            |	ЛОЖЬ КАК ИндивидуальнаяМаршрутизация,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	            |	ВТ_Заказы.Заказ.Номер КАК ЗаказНомер
	            |ИЗ
	            |	ВТ_РейсыСПараметрами КАК ВТ_РейсыСПараметрами
	            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	            |		ПО ВТ_РейсыСПараметрами.Полигон = ВТ_Заказы.Полигон
	            |			И ВТ_РейсыСПараметрами.КатегорияЗаказа = ВТ_Заказы.КатегорияЗаказа
	            |			И (ЕСТЬNULL(ВТ_Заказы.Заказ, ИСТИНА) <> ИСТИНА)
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсамТест.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ПО ВТ_РейсыСПараметрами.Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТ_РейсыСПараметрами.Рейс.Ссылка,
	            |	ЕСТЬNULL(ВТ_РейсыСПараметрами.Полигон, """"),
	            |	ВТ_Заказы.Заказ.Ссылка,
	            |	ВЫБОР
	            |		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	            |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Drop)
	            |		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	            |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.Collection)
	            |	КОНЕЦ,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт,
	            |	ВТ_Заказы.Заказ.Номер
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка,
	            |	ВТ_ИндивидуальнаяМаршрутизация.Заказ.Ссылка,
	            |	ВТ_ИндивидуальнаяМаршрутизация.ВидЗаказа,
	            |	ИСТИНА,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт,
	            |	NULL
	            |ИЗ
	            |	ВТ_РейсыСПараметрами КАК ВТ_РейсыСПараметрами
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсамТест.СрезПоследних(, ) КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ПО ВТ_РейсыСПараметрами.Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИндивидуальнаяМаршрутизация КАК ВТ_ИндивидуальнаяМаршрутизация
	            |		ПО ВТ_РейсыСПараметрами.Рейс.Ссылка = ВТ_ИндивидуальнаяМаршрутизация.Рейс.Ссылка
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.Ссылка,
	            |	ВТ_ИндивидуальнаяМаршрутизация.Заказ.Ссылка,
	            |	ВТ_ИндивидуальнаяМаршрутизация.ВидЗаказа,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Рейс,
	            |	ЗаказНомер
	            |ИТОГИ ПО
	            |	Рейс";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	Зап.УстановитьПараметр("СхемаМаршрутизации", ПолигональнаяСхемаКарты);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	Зап.УстановитьПараметр("ЗаборнаяКатегория", ЗаборнаяКатегория);
	
	
	ВыбРейс = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	БылиЗаказы = Ложь;
	
	Пока ВыбРейс.Следующий() Цикл
		Рейс = ВыбРейс.Рейс.ПолучитьОбъект();
		Рейс.Заказы.Очистить();
		Выб = ВыбРейс.Выбрать();
		
		Пока Выб.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выб.Заказ) Тогда
				Продолжить;
			КонецеСли;	
			Нов = Рейс.Заказы.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Выб);
			БылиЗаказы = Истина;
		КонецЦикла;	
		Если БылиЗаказы Тогда
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			Рейс.Записать(РежимЗаписиДокумента.Проведение);
		КонецеСли;	
	КонецЦикла;	
	
	Если БылиЗаказы Тогда
		ЗафиксироватьМаршрутизацию();
		ЗафиксироватьТранзакцию();
		
		Сообщить("Маршрутизация зафиксирована!", СтатусСообщения.Обычное);
	Иначе
		Сообщить("Данных по маршрутизации не обнаружено! Маршрутизация не сформирована и закрыта не будет!", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДанныеМаршрутизации(Команда)
	От = Неопределено;
	
	Если Регион.Пустая() Тогда
		Сообщить("Выберите регион доставки!", СтатусСообщения.ОченьВажное);
		ЭтаФорма.ТекущийЭлемент = Элементы.Регион;
		Возврат;
	КонецЕсли;	
	
	//Если Не ПроверкаНаличияДанныхВКорзинеМаршрутизации(ДатаПланирования, Регион) Тогда
	//	Сообщить("В корзине маршрутизации обнаружены отложенные заказы. Фиксация данных маршрутизации невозможна.", СтатусСообщения.ОченьВажное);
	//	Возврат;
	//КонецеСли;	
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗафиксироватьДанныеМаршрутизацииЗавершение", ЭтотОбъект), "После фиксации данных дальнейшая модификация данных полигональной маршрутизации за дату " + Формат(ДатаПланирования, "ДЛФ=DD") + " будет невозможна. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНаличияДанныхВКорзинеМаршрутизации(ДатаПланирования, ТерминалДоставки)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КорзинаПолигональнойМаршрутизацииСрезПоследних.Заказ КАК Заказ
	            |ИЗ
	            |	РегистрСведений.КорзинаПолигональнойМаршрутизации.СрезПоследних(
	            |			,
	            |			ДатаПланирования = &ДатаПланирования
	            |				И ТерминалДоставки = &ТерминалДоставки) КАК КорзинаПолигональнойМаршрутизацииСрезПоследних
	            |ГДЕ
	            |	КорзинаПолигональнойМаршрутизацииСрезПоследних.ЗаказВКорзине = ИСТИНА";
	Зап.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	
	Рез = Зап.Выполнить();
	Возврат Рез.Пустой();
КонецФункции	

&НаКлиенте
Процедура ЗафиксироватьДанныеМаршрутизацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	От = РезультатВопроса;
	Если От = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьДанныеМаршрутизацииНаСервере();
		ОформлениеФормы();
	КонецеСли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаЗакрытогоРейсаНаСервере(Рейс)
	Возврат baoВызовСервера.РейсЗакрыт(Рейс);
КонецФункции

&НаКлиенте
Процедура ДеревоРейсовСЗаказамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	Если Поле.Имя = "Транспорт_Рейс" Тогда
		СтандартнаяОбработка = Ложь;
		Если ПроверкаЗакрытогоРейсаНаСервере(ТекущиеДанные.Рейс) Тогда
			Сообщить("Рейс закрыт!!", СтатусСообщения.ОченьВажное);
			Возврат;
		конецеСли;	
		ВыбратьЭкипаж(ТекущиеДанные.Рейс, ТекущиеДанные.Транспорт, ТекущиеДанные.Водитель, ТекущиеДанные.Экспедитор);
		ОбновитьДанные(Ложь, Ложь);
	ИначеЕсли Поле.Имя = "НомерЗаказа_Рейс" Тогда
		СтандартнаяОбработка = ложь;
		
		НомерЗаказа = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.НомерЗаказа;
		Если ЗначениеЗаполнено(НомерЗаказа) Тогда
			ОткрытьФормуПодсказкиПоЗаказу(НомерЗаказа);
		КонецЕсли;	
	КонецеСли;			
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭкипаж(Рейс, Транспорт, Водитель, Экспедитор)
	МаршрутизацияЗаказовКлиент.ВыбратьЭкипажДляРейсаТест(Рейс, ДатаПланирования, Транспорт, Водитель, Экспедитор, ЭтаФорма);
КонецПроцедуры	


&НаСервереБезКонтекста
Процедура ПроставитьКатегорииЗаказовНаСервере(ДатаПланирования, Регион, СхемаБрейков)
	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ДополнительныеПараметрыЗаказа.Заказ.Ссылка КАК Заказ
	            |ИЗ
	            |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |ГДЕ
	            |	ДополнительныеПараметрыЗаказа.Заказ.ТерминалДоставки = &ТерминалДоставки
	            |	И ДополнительныеПараметрыЗаказа.Заказ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ДополнительныеПараметрыЗаказа.ЛогистическийБрейк = ЗНАЧЕНИЕ(Справочник.ЛогистическиеБрейки.ПустаяСсылка)";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаПланирования));
	
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	МассивЗаказов = Новый Массив;
	
	Пока Выб.Следующий() Цикл
		МассивЗаказов.Добавить(Выб.Заказ);
	КонецЦикла;	
	
	МаршрутизацияЗаказовСервер.УстановитьЛогистическиеКатегорииЗаказов(МассивЗаказов);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьКатегорииЗаказов(Команда)
	Если Регион.Пустая() Тогда
		Сообщить("Выберите регион доставки!", СтатусСообщения.ОченьВажное);
		ЭтаФорма.ТекущийЭлемент = Элементы.Регион;
		Возврат;
	КонецЕсли;	
	
	
	ПроставитьКатегорииЗаказовНаСервере(ДатаПланирования, Регион, СхемаЛогистическихБрейков);
	
	Сообщить("Обработка завершена!");
	ОбновитьДанные(Ложь, Истина, Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РейсПроверенНаСервере(Рейс, Пометка)
	// Вставить содержимое обработчика.
	Параметры = Новый Структура;
	Параметры.Вставить("Период", ТекущаяДата());
	Параметры.Вставить("ДокументПроверен", Пометка);
	Параметры.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Параметры.Вставить("Документ", Рейс);
	
	Попытка
		ПроверкаДокументовСервер.УстановитьСтатусПроверкиДокумента(Параметры);
	Исключение
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура РейсПроверен(Команда)
	Если Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	Если РейсПроверенНаСервере(Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.Рейс, Не Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен) Тогда
		Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен = Не Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен;
		Элементы.ДеревоРейсовСЗаказамиКонтекстноеМенюРейсПроверен.Пометка = Элементы.ДеревоРейсовСЗаказами.ТекущиеДанные.ДокументПроверен;
	КонецеСли;	
КонецПроцедуры

#КонецОбласти


#Область РаботаСКорзиной
&НаСервере
Процедура ОбновитьКорзину()
	Корзина.Параметры.УстановитьЗначениеПараметра("ДатаНач", НачалоДня(ДатаПланирования));
	Корзина.Параметры.УстановитьЗначениеПараметра("ДатаКон", КонецДня(ДатаПланирования));
	Корзина.Параметры.УстановитьЗначениеПараметра("ТерминалДоставки", Регион);	
	Элементы.Корзина.Обновить();
Конецпроцедуры	
#КонецОбласти

#Область РаботаСКорзинойМаршрутизации
&НаСервере
Процедура ОбновитьКорзинуМаршрутизации()
	КорзинаМаршрутизации.Параметры.УстановитьЗначениеПараметра("ДатаПланирования", НачалоДня(ДатаПланирования));
	КорзинаМаршрутизации.Параметры.УстановитьЗначениеПараметра("ТерминалДоставки", Регион);	
	Элементы.КорзинаМаршрутизации.Обновить();
Конецпроцедуры	

&НаСервере
Процедура ЗаписатьДанныеКорзиныМаршрутизации(МассивСтрок, Режим = Истина)
	ТекВр = ТекущаяДата();
	
	Для Каждого Тек Из МассивСтрок Цикл
		Наб = РегистрыСведений.КорзинаПолигональнойМаршрутизации.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ТерминалДоставки.Установить(Регион);
		Наб.Отбор.ДатаПланирования.Установить(ДатаПланирования);
		Наб.Отбор.Заказ.Установить(Тек.Заказ);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекВр;
		Нов.ДатаПланирования = ДатаПланирования;
		Нов.ТерминалДоставки = Регион;
		Нов.Заказ = Тек.Заказ;
		Нов.ЗаказВКорзине = Режим;
		
		Наб.Записать();
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ПереместитьВыделенныеЗаказыИзДереваВКорзинуМаршрутизации(ИмяДерева)
	Если ИмяДерева = "ДеревоПолигоновСЗаказами" Тогда
		НомерДерева = 1;
	ИначеЕсли ИмяДерева = "ДеревоРейсовСЗаказами" Тогда	
		НомерДерева = 2;
	КонецеСли;
	
	Струк = Новый Структура;
	Струк.Вставить("НомерДерева", НомерДерева);
	
	НайСтроки = СписокТочекНаКартеТЗ.НайтиСтроки(Струк);
	
	ЗаписатьДанныеКорзиныМаршрутизации(НайСтроки, Истина);
	
	ОбновитьКорзинуМаршрутизации();
КонецПроцедуры	

&НаКлиенте
Процедура ПереместитьВыделенныеЗаказыИзДПВКорзину(Команда)
	// Вставить содержимое обработчика.
	ПереместитьВыделенныеЗаказыИзДереваВКорзинуМаршрутизации("ДеревоПолигоновСЗаказами");
	ОбновитьДанные(Ложь, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВыделенныеЗаказыИзДРВКорзину(Команда)
	// Вставить содержимое обработчика.
	ПереместитьВыделенныеЗаказыИзДереваВКорзинуМаршрутизации("ДеревоРейсовСЗаказами");
	ОбновитьДанные(Ложь, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УбратьВыделенныеЗаказыИзКорзины(Команда)
	// Вставить содержимое обработчика.
	Мас = Новый Массив;
	Для Каждого Тек Из Элементы.КорзинаМаршрутизации.ВыделенныеСтроки Цикл
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Элементы.КорзинаМаршрутизации.ДанныеСтроки(Тек).Заказ);
		Мас.Добавить(Струк);
	КонецЦикла;	
	
	ЗаписатьДанныеКорзиныМаршрутизации(Мас, Ложь);
	Элементы.КорзинаМаршрутизации.Обновить();
	ОбновитьДанные(Ложь, Истина, Истина);
КонецПроцедуры
#КонецОбласти



#Область РаботаСФормой
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	//СохранитьЗначение("ПериодАвтообновленияДанныхВПМ", Объект.ПериодАвтообновленияДанных);
	//СохранитьЗначенияНаСервере(Объект.ПериодАвтообновленияДанных);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьЗначенияНаСервере(ПериодАвтообновленияДанных)
	//СохранитьЗначение("ПериодАвтообновленияДанныхВПМ", ПериодАвтообновленияДанных);
КонецПроцедуры	

&НаСервере

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.ВерсияКартыПолигональногоМаршрутизатора = "v2";
	Объект.СкрыватьУжеПривязанныеПолигоныВФормеПривязкиПолигонов = Истина;
	Объект.УстановкаПолигоновСУчетомКатегорийТранспорта = Истина;
	ИнициализацияЭлементовФильтров();
	ОбновитьКорзину();
	Регион = ПараметрыСеанса.ТерминалДоставки;
	ОбновитьКорзинуМаршрутизации();
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеФормы()
	Если МаршрутизацияЗакрыта Тогда
		Элементы.ГруппаКарта.ЦветФона = WebЦвета.СеребристоСерый;
		Элементы.ГруппаДеревоПолигонов.ЦветФона = WebЦвета.СеребристоСерый;
		Элементы.ГруппаДеревоРейсов.ЦветФона = WebЦвета.СеребристоСерый;
		Элементы.ДеревоПолигоновСЗаказамиКонтекстноеМенюГруппаРейсов.Заголовок = "Положить заказ в рейс..";
		Элементы.ДеревоРейсовСЗаказамиКонтекстноеМенюГруппаРейсов.Заголовок = "Переложить заказ в рейс..";
		//Элементы.ГруппаКорзинаМаршрутизации.Доступность = Ложь;
	Иначе
		Элементы.ГруппаКарта.ЦветФона = WebЦвета.Коралловый;
		//Новый Цвет;
		Элементы.ГруппаДеревоПолигонов.ЦветФона = Новый Цвет;
		Элементы.ГруппаДеревоРейсов.ЦветФона = Новый Цвет;
		Элементы.ДеревоПолигоновСЗаказамиКонтекстноеМенюГруппаРейсов.Заголовок = "Маршрутизировать индивидуально..";
		Элементы.ДеревоРейсовСЗаказамиКонтекстноеМенюГруппаРейсов.Заголовок = "Маршрутизировать индивидуально..";
		//Элементы.ГруппаКорзинаМаршрутизации.Доступность = Истина;
	КонецеСли;
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры	

&НаСервере
Функция РольДоступнаНаСервере()
	Возврат РольДоступна("Админы");
КонецФункции	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//УстановкаКаталогаИконок();
	
	Если ТекущийРежимЗапуска() <> РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Если Не РольДоступнаНаСервере() Тогда
			Пар = "пароль";
			Если Не ВвестиСтроку(Пар, "Пароль", 10) Тогда
				Отказ = Истина;
				Возврат;
			ИначеЕсли Пар <> "6744" Тогда
				Отказ = Истина;
				Возврат;
			КонецеСли;	
		КонецеСли;
	КонецеСли;
	
	СхемаЛогистическихБрейков = МаршрутизацияЗаказовСервер.ОпределитьАктуальнуюСхемуЛогистическихБрейков();
	ЗаборнаяКатегория = МаршрутизацияЗаказовСервер.ПолучитьЗаборнуюКатегориюЗаказа(СхемаЛогистическихБрейков);
	
	Если Не ЗначениеЗаполнено(ЗаборнаяКатегория) Тогда
		Сообщить("Не определена логистическая категория для заборов! Открытие формы будет запрещено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	ДатаПланирования = ТекущаяДата();
	
	ПолигональнаяСхемаКарты = ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации();
	
	ОбновитьПолеКарты();
	
	//Объект.ПериодАвтообновленияДанных = ВосстановитьЗначение("ПериодАвтообновленияДанныхВПМ");
	Если Объект.ПериодАвтообновленияДанных = 0 Тогда
		Объект.ПериодАвтообновленияДанных = 120;
	КонецеСли;	
	
	//ПодключитьОбработчикОжидания("ОбновитьДанныеПМПоРегламенту", Объект.ПериодАвтообновленияДанных, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияСписковРеквизитовДереваПолигоновНаСервере()
	Если СписокДобавляемыхРеквизитов.Количество() <> 0 Тогда
		Мас = Новый Массив;
		Для Каждого Тек Из СписокДобавляемыхРеквизитов Цикл
			Мас.Добавить(Тек.Значение);
		КонецЦикла;	
		ИзменитьРеквизиты(,Мас);
		СписокДобавляемыхРеквизитов.Очистить();
		Для Каждого Тек Из СписокДобавляемыхЭлементов Цикл
			Элементы.Удалить(Элементы.Найти(Тек.Значение));
		КонецЦикла;
		СписокДобавляемыхЭлементов.Очистить();
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеПолигоновНаСервере() //ПараметрыДанных, ИдентификаторЗаданияОбновленияПолигонов
	ДеревоПолигоновСформировано = Ложь;
	
	
	
	АдресДереваПолигонов = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(МаршрутизацияЗакрыта);
	МассивПараметров.Добавить(ДатаПланирования);
	МассивПараметров.Добавить(ПолигональнаяСхемаКарты);
	МассивПараметров.Добавить(Регион);
	МассивПараметров.Добавить(ЗаборнаяКатегория);
	МассивПараметров.Добавить(СхемаЛогистическихБрейков);
	МассивПараметров.Добавить(СписокДобавляемыхРеквизитов);
	МассивПараметров.Добавить(СписокДобавляемыхЭлементов);
	//МассивПараметров.Добавить(ЭтаФорма);
	
	ТаблицаФильтров = РеквизитФормыВЗначение("ТабЭлементовФильтра", Тип("ТаблицаЗначений"));
	
	МассивСтруктурФильтра = lem.ТабЗначВМассив(ТаблицаФильтров);
	
	МассивПараметров.Добавить(МассивСтруктурФильтра);
	
	
	МассивПараметров.Добавить(АдресДереваПолигонов);
	
	
	 
	
	Задание = ФоновыеЗадания.Выполнить("ПолигональнаяМаршрутизацияСервер.ОбновитьДанныеДереваПолигоновНаСервере", МассивПараметров);
	
	ИдентификаторЗаданияОбновленияПолигонов = Задание.УникальныйИдентификатор;
КонецПроцедуры	


&НаСервере
Процедура ИнициализацияСписковРеквизитовДереваРейсовНаСервере()
	Если СписокДобавляемыхРеквизитовРейсы.Количество() <> 0 Тогда
		Мас = Новый Массив;
		Для Каждого Тек Из СписокДобавляемыхРеквизитовРейсы Цикл
			Мас.Добавить(Тек.Значение);
		КонецЦикла;	
		ИзменитьРеквизиты(,Мас);
		СписокДобавляемыхРеквизитовРейсы.Очистить();
		Для Каждого Тек Из СписокДобавляемыхЭлементовРейсы Цикл
			Элементы.Удалить(Элементы.Найти(Тек.Значение));
		КонецЦикла;
		СписокДобавляемыхЭлементовРейсы.Очистить();
	КонецЕсли;		
КонецПроцедуры	


&НаСервере
Процедура ОбновитьДанныеРейсовНаСервере()
	ДеревоРейсовСформировано = Ложь;
	//ФиксацияВыделенныхСтрокВДереве(ДеревоРейсовСЗаказами, "ДеревоРейсовСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
	
	
	
	АдресДереваРейсов = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(МаршрутизацияЗакрыта);
	МассивПараметров.Добавить(ДатаПланирования);
	МассивПараметров.Добавить(ПолигональнаяСхемаКарты);
	МассивПараметров.Добавить(Регион);
	МассивПараметров.Добавить(ЗаборнаяКатегория);
	МассивПараметров.Добавить(СхемаЛогистическихБрейков);
	МассивПараметров.Добавить(СписокДобавляемыхРеквизитовРейсы);
	МассивПараметров.Добавить(СписокДобавляемыхЭлементовРейсы);
	
	ТаблицаФильтров = РеквизитФормыВЗначение("ТабЭлементовФильтра", Тип("ТаблицаЗначений"));
	
	МассивСтруктурФильтра = lem.ТабЗначВМассив(ТаблицаФильтров);
	
	МассивПараметров.Добавить(МассивСтруктурФильтра);
	
	
	МассивПараметров.Добавить(АдресДереваРейсов);
	
	
	 
	
	Задание = ФоновыеЗадания.Выполнить("ПолигональнаяМаршрутизацияСервер.ОбновитьДанныеДереваРейсовНаСервере", МассивПараметров);
	
	ИдентификаторЗаданияОбновленияРейсов = Задание.УникальныйИдентификатор;
	
	
	//ПолигональнаяМаршрутизацияСервер.ОбновитьДанныеДереваПолигоновНаСервере(МаршрутизацияЗакрыта, ДатаПланирования, ПолигональнаяСхемаКарты, Регион, ЗаборнаяКатегория, СхемаЛогистическихБрейков, СписокДобавляемыхРеквизитов, СписокДобавляемыхЭлементов, ЭтаФорма, ТабЭлементовФильтра);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(ОбновлятьКарту = Истина, ОбновлятьПолигоны = Истина, ОбновлятьРейсы = Истина)
	ОбновитьДанныеНаСервере(ОбновлятьКарту, ОбновлятьПолигоны, ОбновлятьРейсы);
	
	Если ОбновлятьПолигоны Тогда
		
		
		Строки = ДеревоПолигоновСЗаказами.ПолучитьЭлементы();
		Строки.Очистить();
		
		УстановитьДоступностьЭлементовФормыОбновленияДанных(Ложь);
		Элементы.ГруппаСтраницаДлительнаяОперация.Видимость = Истина;
		Элементы.ГруппаСтраницаПолигонов.Видимость = Ложь;		
		ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоПолигонам", 1);
	КонецЕсли;	
	
	Если ОбновлятьРейсы Тогда
		
		
		Строки = ДеревоРейсовСЗаказами.ПолучитьЭлементы();
		Строки.Очистить();
		
		
		УстановитьДоступностьЭлементовФормыОбновленияДанных(Ложь);
		
		Элементы.ГруппаСтраницаДлительнаяОперацияРейсы.Видимость = Истина;
		Элементы.ГруппаСтраницаРейсов.Видимость = Ложь;		
		
		ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоРейсам", 1);
	КонецЕсли;
	
	
	Если ОбновлятьКарту Тогда
		ОчиститьКарту(Неопределено);
	КонецеСли;

	
	ОформлениеФормы();
	
	ВыводАвтоНаКарту();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(ОбновлятьКарту = Истина, ОбновлятьПолигоны = Истина, ОбновлятьРейсы = Истина)
	ПрочитатьФормированиеРейсов(ДатаПланирования, Регион);
	
	Если ОбновлятьПолигоны Тогда
		ФиксацияВыделенныхСтрокВДереве(ДеревоПолигоновСЗаказами, "ДеревоПолигоновСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
		ОбновитьДанныеПолигоновНаСервере();
	КонецЕсли;	
	
	Если ОбновлятьРейсы Тогда
		ФиксацияВыделенныхСтрокВДереве(ДеревоРейсовСЗаказами, "ДеревоРейсовСЗаказами", СписокТочекНаКартеТЗ_ДляВосстановленияВыделенныхТочек);
		ОбновитьДанныеРейсовНаСервере();
	КонецЕсли;
	
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеФормыНаСервере()
	ОбновитьУсловноеОформление();	
	ОбновитьКорзину();
	ОбновитьКорзинуМаршрутизации();	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	УстановкаУсловногоОформленияСпискаРейсов();
	УстановкаУсловногоОформленияСпискаПолигонов();
	УстановкаУсловногоОформленияИтогов();
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	//закрываемые элементы при закрытой маршрутизации
	Элементы["ФормаЗафиксироватьДанныеМаршрутизации"].Доступность = Не МаршрутизацияЗакрыта;
	//Элементы["ДеревоПолигоновСЗаказамиКонтекстноеМенюГруппаРейсов"].Доступность = Не МаршрутизацияЗакрыта;
	Элементы["СформироватьРейсы"].Доступность = Не МаршрутизацияЗакрыта;
	Элементы["ДеревоРейсовСЗаказамиОчиститьДанныеМаршрутизации"].Доступность = Не МаршрутизацияЗакрыта;
	Элементы["ДеревоРейсовСЗаказамиКонтекстноеМенюУстановитьПолигоныИКатегории"].Доступность = Не МаршрутизацияЗакрыта;
	Элементы["ДеревоРейсовСЗаказамиКонтекстноеМенюУбратьИндивидуальнуюМаршрутизацию"].Доступность = Не МаршрутизацияЗакрыта;
	
	//открываемые элементы при закрытой маршрутизации
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокКонтекстногоМенюРейсов()
	Для Каждого Тек Из СписокРейсовДляКонтекстногоМеню Цикл
		Элементы.Удалить(Элементы.Найти("ПунктМенюДереваПолигонов_" + Тек.Значение.НаимПунктаМеню));
		Команды.Удалить(Команды.Найти(Тек.Значение.ПунктКМенюПолигонов));
		
		Элементы.Удалить(Элементы.Найти("ПунктМенюДереваРейсов_" + Тек.Значение.НаимПунктаМеню));
		Команды.Удалить(Команды.Найти(Тек.Значение.ПунктКМенюРейсов));		
	КонецЦикла;	
	СписокРейсовДляКонтекстногоМеню.Очистить();
	
	Дерево = РеквизитФормыВЗначение("ДеревоРейсовСЗаказами", Тип("ДеревоЗначений"));
	
	Для Каждого Тек Из Дерево.Строки Цикл
		Если Не ЗначениеЗаполнено(Тек.Транспорт) Тогда
			Продолжить;
		КонецеСли;	
		НаимПункта = СокрЛП(Тек.ТранспортКод);
		НаимПунктаПользователя = СокрЛП(Тек.ТранспортНаименование);
		
		Струк = Новый Структура;
		Струк.Вставить("НаимПунктаМеню", НаимПункта);
		
		//команда для полигонов
        ИмяКоманды = "ПунктКМенюПолигонов_" + НаимПункта;
		
		Если ЭтаФорма.Команды.Найти(ИмяКоманды) <> Неопределено Тогда 
			Продолжить;
		КонецеСли;	
			
		
        Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
        Команда.Действие = "ВыборПунктаКонтекстногоМенюПолигонов_Рейсы";		
        Струк.Вставить("ПунктКМенюПолигонов", ИмяКоманды);
		
		//команда для рейсов
        ИмяКомандыР = "ПунктКМенюРейсов_" + НаимПункта;
        Команда = ЭтаФорма.Команды.Добавить(ИмяКомандыР);
        Команда.Действие = "ВыборПунктаКонтекстногоМенюРейсов_Рейсы";		
        Струк.Вставить("ПунктКМенюРейсов", ИмяКомандыР);
		
		
		СписокРейсовДляКонтекстногоМеню.Добавить(Струк, НаимПунктаПользователя);
		
		
		//элемент меню полигонов
		ЭлементМеню = Элементы.Добавить("ПунктМенюДереваПолигонов_" + НаимПункта, Тип("КнопкаФормы"), Элементы["ДеревоПолигоновСЗаказамиКонтекстноеМенюТранспорт"]);
		ЭлементМеню.Заголовок = НаимПунктаПользователя;
		ЭлементМеню.ИмяКоманды = ИмяКоманды;
		
		//элемент меню Рейсов
		ЭлементМеню = Элементы.Добавить("ПунктМенюДереваРейсов_" + НаимПункта, Тип("КнопкаФормы"), Элементы["ДеревоРейсовСЗаказамиКонтекстноеМенюТранспорт"]);
		ЭлементМеню.Заголовок = НаимПунктаПользователя;
		ЭлементМеню.ИмяКоманды = ИмяКомандыР;
		
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормыОбновленияДанных(ДоступностьПараметр)
	ФлагДоступности = ДоступностьПараметр;
	
	Если ФлагДоступности Тогда
		Если Не ДеревоПолигоновСформировано Или Не ДеревоРейсовСформировано Тогда
			ФлагДоступности = Ложь;
		КонецеСли;	
	КонецеСли;	
			
	
	Элементы.ФормаОбновитьПолеКарты.Доступность = ФлагДоступности;
	Элементы.ДатаПланирования.Доступность = ФлагДоступности;
	Элементы.Регион.Доступность = ФлагДоступности;
КонецПроцедуры	
#КонецОбласти


#Область СервисныеВозможности
&НаКлиенте
Процедура УстановитьПериодАвтообновления(Команда)
	ПериодАО = Объект.ПериодАвтообновленияДанных;
	Если ВвестиЗначение(ПериодАО, "Укажите период автообновления...", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Неотрицательный))) Тогда
		Объект.ПериодАвтообновленияДанных = ПериодАО;
		//СохранитьЗначение("ПериодАвтообновленияДанныхВПМ", ПериодАО);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПМПоРегламенту()
	//Если СписокТочекНаКарте.Количество() = 0 Тогда
	//	ОбновитьДанные();
	//	Сообщить("Автообновление " + ТекущаяДата());
	//КонецеСли;	
КонецПроцедуры	

#КонецОбласти

#Область ИнициализацияДанных

//БезКонтекста

&НаСервере
Процедура ПрочитатьФормированиеРейсов(ДатаРейсов, Регион)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ФормированиеРейсов.Ссылка КАК ФормированиеРейсов,
	            |	ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования КАК ЗакрытДляРедактирования
	            |ИЗ
	            |	Документ.ФормированиеРейсовТест КАК ФормированиеРейсов
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
	            |		ПО (ФормированиеРейсов.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ)
	            |ГДЕ
	            |	ФормированиеРейсов.ПометкаУдаления = ЛОЖЬ
	            |	И ФормированиеРейсов.ДатаРейсов = &ДатаПланирования
	            |	И ФормированиеРейсов.ТерминалДоставки = &ТерминалДоставки";
	
	Зап.УстановитьПараметр("ДатаПланирования", ДатаРейсов);
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		ФормированиеРейсов = Выб.ФормированиеРейсов;
		МаршрутизацияЗакрыта = Выб.ЗакрытДляРедактирования;
	Иначе
		ФормированиеРейсов = "";
		МаршрутизацияЗакрыта = Ложь;		
	КонецЕсли;	
КонецПроцедуры	


&НаСервере
Функция ПолучитьМакетИконокНаСервере()
	Возврат ПолучитьОбщийМакет("ИконкиПМ");
КонецФункции	


&наКлиенте
Процедура УстановкаКаталогаИконок()
	
	Ф = Новый Файл("C:\icons_");
	
	Если Не Ф.Существует() Тогда
		МакетАрхив = ПолучитьМакетИконокНаСервере();

		Путь = КаталогВременныхФайлов() + "icons.zip";
		
		МакетАрхив.Записать(Путь);	
		
		ЧтениеZip = Новый ЧтениеZipФайла(Путь);
		ЧтениеZip.ИзвлечьВсе("C:", РежимВосстановленияПутейФайловZIP.Восстанавливать);
	КонецеСли;	
КонецПроцедуры	
#КонецОбласти

#Область КомандыВРежимеЗафиксированнойМаршрутизации
&НаСервереБезКонтекста
Процедура ПоложитьЗаказыВРейсИзДереваПолигонов(МассивЗначений, КодТранспорта, ДатаПланирования)
	РейсПриемник = "";
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаТранспорт.Ссылка КАК Транспорт
	            |ПОМЕСТИТЬ ВТ_Транспорт
	            |ИЗ
	            |	Справочник.новаТранспорт КАК новаТранспорт
	            |ГДЕ
	            |	новаТранспорт.Код = &КодТранспорта
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс
	            |ИЗ
	            |	РегистрСведений.ПривязкаМашинКРейсамТест.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	            |		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт.Ссылка = ВТ_Транспорт.Транспорт.Ссылка";
	Зап.УстановитьПараметр("КодТранспорта", КодТранспорта);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		РейсПриемник = Выб.Рейс;
	Иначе
		Возврат;
	КонецеСли;
	
	Рейс = РейсПриемник.ПолучитьОбъект();
	Для Каждого Тек Из МассивЗначений Цикл
		Рейс.ДобавитьЗаказВРейс(Тек.Заказ);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоложитьЗаказыВРейсИзДереваРейсов(МассивЗначений, КодТранспорта, ДатаПланирования, Регион)
	РейсПриемник = "";
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаТранспорт.Ссылка КАК Транспорт
	            |ПОМЕСТИТЬ ВТ_Транспорт
	            |ИЗ
	            |	Справочник.новаТранспорт КАК новаТранспорт
	            |ГДЕ
	            |	новаТранспорт.Код = &КодТранспорта
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс
	            |ИЗ
	            |	РегистрСведений.ПривязкаМашинКРейсамТест.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	            |		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт.Ссылка = ВТ_Транспорт.Транспорт.Ссылка";
	Зап.УстановитьПараметр("КодТранспорта", КодТранспорта);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		РейсПриемник = Выб.Рейс.ПолучитьОбъект();
	Иначе
		Возврат;
	КонецеСли;
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РейсЗаказы.Ссылка КАК Рейс,
	            |	РейсЗаказы.Заказ КАК Заказ
	            |ИЗ
	            |	Документ.РейсТест.Заказы КАК РейсЗаказы
	            |ГДЕ
	            |	РейсЗаказы.Ссылка.Проведен = ИСТИНА
	            |	И РейсЗаказы.Ссылка.ДатаРейса = &ДатаРейса
	            |	И РейсЗаказы.Ссылка.ТерминалДоставки = &ТерминалДоставки
	            |	И РейсЗаказы.Заказ В (&МассивЗаказов)";
	Зап.УстановитьПараметр("ТерминалДоставки", Регион);
	Зап.УстановитьПараметр("ДатаРейса", ДатаПланирования);
	
	МасЗаказов = Новый Массив;
	Для Каждого Тек Из МассивЗначений Цикл
		МасЗаказов.Добавить(Тек.Заказ.Ссылка);
	КонецЦикла;	
	Зап.УстановитьПараметр("МассивЗаказов", МасЗаказов);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если РейсПриемник.Ссылка = Выб.Рейс Тогда
			Продолжить;
		КонецеСли;	
		РейсИсточник = Выб.Рейс.ПолучитьОбъект();
		РейсИсточник.УдалитьЗаказИзРейса(Выб.Заказ);
	КонецЦикла;
	
	Для Каждого Тек Из МассивЗначений Цикл
		РейсПриемник.ДобавитьЗаказВРейс(Тек.Заказ);
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьНастройкуФильтров(Команда)
	ОткрытьФорму("Справочник.ФильтрыОтбораДанныхПМ.ФормаСписка");
КонецПроцедуры

#КонецОбласти





#Область РаботаСДеревьямиВФоновомЗадании
&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗаданияПоПолигонам() Экспорт
	Результат = ПроверкаВыполненияФоновогоЗаданияПоПолигонамНаСервере(ИдентификаторЗаданияОбновленияПолигонов);
	Если Результат Тогда
		РазмещениеДанныхДереваПолигонов();
		Элементы.ГруппаСтраницаПолигонов.Видимость = Истина;
		Элементы.ГруппаСтраницаДлительнаяОперация.Видимость = Ложь;		
		ДеревоПолигоновСформировано = Истина;
		ВосстановитьВыделениеСтрокВДеревьях(1);
		ВыделениеПолигоновНаКарте();
		УстановитьДоступностьЭлементовФормыОбновленияДанных(Истина);
		ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоПолигонам");
		СвернутьДерево(Элементы.ДеревоПолигоновСЗаказами, ДеревоПолигоновСЗаказами);
		Элементы.ДеревоПолигоновСЗаказами.текущаяСтрока = 0;
	КонецеСли;	
КонецПроцедуры	

&НаСервере
Процедура РазмещениеДанныхДереваПолигонов()
		ДЗ = ПолучитьИзВременногоХранилища(АдресДереваПолигонов);
		РазместитьРеквизитыДереваПолигоновНаСервере(ДЗ);	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПроверкаВыполненияФоновогоЗаданияПоПолигонамНаСервере(ИдентификаторЗаданияОбновленияПолигонов) Экспорт
	ЗаданиеВыполненоУспешно = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияОбновленияПолигонов);
	//Если ЗаданиеВыполненоУспешно Тогда
		//ДЗ = ПолучитьИзВременногоХранилища(АдресДереваПолигонов);
		//РазместитьРеквизитыДереваПолигоновНаСервере(ДЗ);
	//КонецеСли;
	Возврат ЗаданиеВыполненоУспешно;
КонецФункции	



&НаСервере
Процедура РазмещениеДанныхДереваРейсов()
		ДЗ = ПолучитьИзВременногоХранилища(АдресДереваРейсов);
		РазместитьРеквизитыДереваРейсовНаСервере(ДЗ);	
КонецПроцедуры
	
&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗаданияПоРейсам() Экспорт
	Результат = ПроверкаВыполненияФоновогоЗаданияПоРейсамНаСервере(ИдентификаторЗаданияОбновленияРейсов);
	Если Результат Тогда
		РазмещениеДанныхДереваРейсов();
		Элементы.ГруппаСтраницаРейсов.Видимость = Истина;
		Элементы.ГруппаСтраницаДлительнаяОперацияРейсы.Видимость = Ложь;		
		ДеревоРейсовСформировано = Истина;
		ВосстановитьВыделениеСтрокВДеревьях(2);
		УстановитьДоступностьЭлементовФормыОбновленияДанных(Истина);
		ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗаданияПоРейсам");
		ПодсчитатьИтогиПоКоличествуРейсов();
		СвернутьДерево(Элементы.ДеревоРейсовСЗаказами, ДеревоРейсовСЗаказами);
		Элементы.ДеревоРейсовСЗаказами.текущаяСтрока = 0;
	КонецеСли;	
КонецПроцедуры	


&НаКлиенте
Процедура СвернутьДерево(ЭлементДерево, Дерево)
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	
	Для Каждого Тек Из ЭлементыДерева Цикл
		ЭлементДерево.Свернуть(Тек.ПолучитьИдентификатор());
	КонецЦикла;	
КонецПроцедуры	


&НаСервереБезКонтекста
Функция ПроверкаВыполненияФоновогоЗаданияПоРейсамНаСервере(ИдентификаторЗаданияОбновленияРейсов) Экспорт
	ЗаданиеВыполненоУспешно = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияОбновленияРейсов);
	
	
	//Если ЗаданиеВыполненоУспешно Тогда
		//ДЗ = ПолучитьИзВременногоХранилища(АдресДереваРейсов);
		//РазместитьРеквизитыДереваРейсовНаСервере(ДЗ);
		
		//Элементы.ГруппаСтраницаРейсов.Видимость = Истина;
		//Элементы.ГруппаСтраницаДлительнаяОперацияРейсы.Видимость = Ложь;
		
		
	//КонецеСли;
	
	Возврат ЗаданиеВыполненоУспешно;
КонецФункции	

&НаСервере
Процедура РазместитьРеквизитыДереваПолигоновНаСервере(ДеревоПолигонов)
	ИнициализацияСписковРеквизитовДереваПолигоновНаСервере();
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого Колонка Из ДеревоПолигонов.Колонки Цикл
		Если Колонка.Имя = "Отметка" Тогда
	    	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0)), "ДеревоПолигоновСЗаказами"));
		ИначеЕсли Колонка.Имя = "УИД" Тогда
	    	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)), "ДеревоПолигоновСЗаказами"));
		Иначе
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоПолигоновСЗаказами"));
		КонецеСли;
		
		Рекв = МассивДобавляемыхРеквизитов[МассивДобавляемыхРеквизитов.количество() - 1];
		СписокДобавляемыхРеквизитов.Добавить(Рекв.Путь + "." + Рекв.Имя);
	КонецЦикла;
	
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	ЗначениеВРеквизитФормы(ДеревоПолигонов, "ДеревоПолигоновСЗаказами");

	ТаблицаКолонок = МаршрутизацияЗаказовСервер.ПолучитьПараметрыКолонокКатегорийЗаказовДляМаршрутизатора(СхемаЛогистическихБрейков);	
	
	
	Для Каждого Колонка Из ДеревоПолигонов.Колонки Цикл
		РодительКолонки = "ДеревоПолигоновСЗаказами";
		ЗаголовокКолонки = "";
		
		Если Колонка.Имя = "НомерЗаказа" Или Колонка.Имя = "ПолигонМаршрутизации" Тогда
			РодительКолонки = "ДеревоПолигоновСЗаказами_ГруппаПолигонЗаказ";
		Иначе
			НайПараметрКолонки = ТаблицаКолонок.Найти(СтрЗаменить(Колонка.Имя, "_", ""));
			
			Если НайПараметрКолонки <> Неопределено Тогда
				РодительКолонки = "ДеревоПолигоновСЗаказами" + НайПараметрКолонки.Маршрутизатор_ГруппаКолонок;
			КонецеСли;	
		КонецЕсли;
		
		
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы[РодительКолонки]);
		СписокДобавляемыхЭлементов.Добавить(НовыйЭлемент.Имя);
	    НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		
		
		НовыйЭлемент.ПутьКДанным = "ДеревоПолигоновСЗаказами." + Колонка.Имя;
		
		НовыйЭлемент.ТолькоПросмотр = Истина;	
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;

		ОформлениеКолонки(НовыйЭлемент, Колонка.Имя);
	КонецЦикла;	
	
	
	ЗаполнитьИдентификаторыВДереве("ДеревоПолигоновСЗаказами");
	//УстановкаУсловногоОформленияСпискаПолигонов();
	РассчитатьИтоговоеКоличествоЗаказов();
КонецПроцедуры	

&НаСервере
Процедура РазместитьРеквизитыДереваРейсовНаСервере(ДеревоРейсов)
	ИнициализацияСписковРеквизитовДереваРейсовНаСервере();
	
    МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого Колонка Из ДеревоРейсов.Колонки Цикл
		Если Колонка.Имя = "Отметка" Тогда
        	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1, 0)), "ДеревоРейсовСЗаказами"));
		ИначеЕсли Колонка.Имя = "УИД" Тогда
	    	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)), "ДеревоРейсовСЗаказами"));			
		Иначе
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоРейсовСЗаказами"));
		КонецеСли;
		
		Рекв = МассивДобавляемыхРеквизитов[МассивДобавляемыхРеквизитов.количество() - 1];
		СписокДобавляемыхРеквизитовРейсы.Добавить(Рекв.Путь + "." + Рекв.Имя);
    КонецЦикла;
    ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

    ЗначениеВРеквизитФормы(ДеревоРейсов, "ДеревоРейсовСЗаказами");
	
	ТаблицаКолонок = МаршрутизацияЗаказовСервер.ПолучитьПараметрыКолонокКатегорийЗаказовДляМаршрутизатора(СхемаЛогистическихБрейков);		

	Для Каждого Колонка Из ДеревоРейсов.Колонки Цикл
		РодительКолонки = "ДеревоРейсовСЗаказами";
		ЗаголовокКолонки = "";
		
		Если Колонка.Имя = "Транспорт" Или Колонка.Имя = "НомерЗаказа" Тогда
			РодительКолонки = "ДеревоРейсовСЗаказами_ГруппаПолигонЗаказ";
		ИначеЕсли Колонка.Имя = "Водитель" Тогда
			РодительКолонки = "ДеревоРейсовСЗаказами_ГруппаЭкипаж";
		ИначеЕсли Колонка.Имя = "Итого" Или Колонка.Имя = "ИтогоПредварительно" Тогда
			РодительКолонки = "ДеревоРейсовСЗаказами_ГруппаИтоги";
		Иначе
			НайПараметрКолонки = ТаблицаКолонок.Найти(СтрЗаменить(Колонка.Имя, "_", ""));
			
			Если НайПараметрКолонки <> Неопределено Тогда
				РодительКолонки = "ДеревоРейсовСЗаказами" + НайПараметрКолонки.Маршрутизатор_ГруппаКолонок;
			КонецеСли;	
		КонецЕсли;
				
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя + "_Рейс", Тип("ПолеФормы"), Элементы[РодительКолонки]);
		СписокДобавляемыхЭлементовРейсы.Добавить(НовыйЭлемент.Имя);
        НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		
		
		НовыйЭлемент.ПутьКДанным = "ДеревоРейсовСЗаказами." + Колонка.Имя;
		
		НовыйЭлемент.ТолькоПросмотр = Истина;	
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;

		ОформлениеКолонкиРейс(НовыйЭлемент, Колонка.Имя);
	КонецЦикла;	
	ЗаполнитьИдентификаторыВДереве("ДеревоРейсовСЗаказами");
	//УстановкаУсловногоОформленияСпискаРейсов();
	ЗаполнитьСписокКонтекстногоМенюРейсов();
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ОчиститьДанныеЗафиксированнойМаршрутизации(Период, Терминал)
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	РейсТест.Ссылка КАК Рейс
	            |ИЗ
	            |	Документ.РейсТест КАК РейсТест
	            |ГДЕ
	            |	РейсТест.Проведен = ИСТИНА
	            |	И РейсТест.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
	            |	И РейсТест.МетодикаМаршрутизации = ЗНАЧЕНИЕ(Перечисление.МетодикаЛогистическойМаршрутизации.ПолигональнаяМаршрутизация)
	            |	И РейсТест.ТерминалДоставки = &ТерминалДоставки";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Период));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Период));
	Зап.УстановитьПараметр("ТерминалДоставки", Терминал);

	
	Выб = Зап.Выполнить().Выбрать();
	
	Попытка
		Пока Выб.Следующий() Цикл
			Д = Выб.Рейс.ПолучитьОбъект();
			Если Д.Проведен Тогда
				Д.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецеСли;
			
			Д.ПометкаУдаления = Истина;
			
			Д.Заказы.Очистить();
			
			Д.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;	
	Исключение	
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	
	Сообщить("Очистка выполнена!");	
	Возврат Истина;
КонецФункции


&НаСервере
Функция ОтчетПоМаршрутизацииСервер(Период, Терминал)
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ТекОбъект.ПолучитьМакет("ОтчетПоМаршрутизации");
	//СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных_4");

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
    Настройки = КомпоновщикНастроек.Настройки;
	
	//Терминал = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТерминалДоставки"));
	//Терминал.Значение = Терминал;
	//Терминал.Использование = Истина;
	
    
     //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
	ПериодОтчета = Новый СтандартныйПериод(НачалоДня(Период), КонецДня(Период));
	
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСтр",         ПериодОтчета);
	
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНач", НачалоДня(Период));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКон", КонецДня(Период));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	//Если Рейс <> Неопределено Тогда
	//	МакетКомпоновки.ЗначенияПараметров.НачДата.Значение = НачалоДня(Рейс.ДатаНачала);
	//	МакетКомпоновки.ЗначенияПараметров.КонДата.Значение = КонецДня(Рейс.ДатаКонца);
	//Иначе
	//	МакетКомпоновки.ЗначенияПараметров.НачДата.Значение = НачалоДня(ТекущаяДата());
	//	МакетКомпоновки.ЗначенияПараметров.КонДата.Значение = КонецДня(ТекущаяДата());
	//КонецеСли;	
	
    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ,Истина);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    ////Проверка на пустоту если не указан контрагент
    //Если Контрагент <> Неопределено Тогда 
    //    Возврат Результат;
    //Иначе
		//Если (Результат.ВысотаТаблицы-Результат.ФиксацияСверху)>1 Тогда
            Возврат Результат;
		//Иначе
		//    Возврат Неопределено;
		//КонецЕсли;
    //КонецЕсли;
КонецФункции	



&НаКлиенте
Процедура ОчиститьФактическуюМаршрутизацию(Команда)
	Пар = "оукотплопт";
	
	Если Не ЗначениеЗаполнено(ДатаПланирования) Или Регион.Пустая() Тогда
		Сообщить("Не заполнен регион или дата планирования!");
		Возврат;
	КонецЕсли;	
	
	Если Не ВвестиСтроку(Пар, "Пароль?", 20, Ложь) Тогда
		Возврат;
	КонецеСли;
	
	Если Пар <> "938734" Тогда
		Сообщить("Неверный пароль!");
		Возврат;
	КонецеСли;	
	
	От = Вопрос("Данные зафиксированной маршрутизации будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Если От = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеЗафиксированнойМаршрутизации(ДатаПланирования, Регион);
		ОбновитьДанные();
	КонецЕсли;	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоМаршрутизации(Команда)
	// Вставить содержимое обработчика.
	Таб = ОтчетПоМаршрутизацииСервер(ДатаПланирования, Регион);
	Таб.Показать();
КонецПроцедуры

#КонецОбласти
