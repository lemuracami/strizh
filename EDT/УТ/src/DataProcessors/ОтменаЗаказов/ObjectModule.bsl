
Функция ОтменитьЗаказы(ТаблицаНомеров) Экспорт
	
	ПоНомеруСтриж = СелекторТипаНомера = 1;
	
	ДатаОбработки = ТекущаяДата();
	
	ТаблицаНомеров.Свернуть("Номер");
	
	ТекстРазделитель =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	МассивТекстов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНомеров", ТаблицаНомеров);
	
	МассивТекстов.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаНомеров.Номер КАК Номер
	|ПОМЕСТИТЬ ВТ_НомераЗаказов
	|ИЗ
	|	&ТаблицаНомеров КАК ТаблицаНомеров");
	
	МассивТекстов.Добавить(ТекстРазделитель);
	
	Если ПоНомеруСтриж Тогда
		МассивТекстов.Добавить(
		"ВЫБРАТЬ
		|	ВТ_НомераЗаказов.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НомераЗаказов КАК ВТ_НомераЗаказов
		|		ПО РеализацияТоваровУслуг.Номер = ВТ_НомераЗаказов.Номер");
	Иначе
		Запрос.УстановитьПараметр("ВладелецТовара", Партнер);
		МассивТекстов.Добавить(
		"ВЫБРАТЬ
		|	ВТ_НомераЗаказов.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НомераЗаказов КАК ВТ_НомераЗаказов
		|		ПО РеализацияТоваровУслуг.НомерВнешнегоЗаказа = ВТ_НомераЗаказов.Номер
		|			И (РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара)");
	КонецЕсли;
	
	МассивТекстов.Добавить(ТекстРазделитель);
		
	МассивТекстов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	МАКСИМУМ(РейсЗаказы.Ссылка.ДатаРейса) КАК ДатаРейса
	|ПОМЕСТИТЬ ВТ_МаксДатыРейсов
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|		ПО РейсЗаказы.Заказ = ВТ_Заказы.Заказ
	|			И (НЕ РейсЗаказы.УдаленИзРейса)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Заказы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаксДатыРейсов.Заказ КАК Заказ,
	|	ВТ_МаксДатыРейсов.ДатаРейса КАК ДатаРейса,
	|	МАКСИМУМ(РейсЗаказы.Ссылка.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_МаксДатыДокументаРейс
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксДатыРейсов КАК ВТ_МаксДатыРейсов
	|		ПО РейсЗаказы.Заказ = ВТ_МаксДатыРейсов.Заказ
	|			И (НЕ РейсЗаказы.УдаленИзРейса)
	|			И РейсЗаказы.Ссылка.ДатаРейса = ВТ_МаксДатыРейсов.ДатаРейса
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаксДатыРейсов.Заказ,
	|	ВТ_МаксДатыРейсов.ДатаРейса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаксДатыДокументаРейс.Заказ КАК Заказ,
	|	МАКСИМУМ(РейсЗаказы.Ссылка) КАК Рейс
	|ПОМЕСТИТЬ ВТ_Рейсы
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксДатыДокументаРейс КАК ВТ_МаксДатыДокументаРейс
	|		ПО РейсЗаказы.Заказ = ВТ_МаксДатыДокументаРейс.Заказ
	|			И (НЕ РейсЗаказы.УдаленИзРейса)
	|			И РейсЗаказы.Ссылка.ДатаРейса = ВТ_МаксДатыДокументаРейс.ДатаРейса
	|			И РейсЗаказы.Ссылка.Дата = ВТ_МаксДатыДокументаРейс.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаксДатыДокументаРейс.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК Рейс,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор
	|ПОМЕСТИТЬ ВТ_Экипажи
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(
	|			,
	|			Рейс В
	|				(ВЫБРАТЬ
	|					ВТ_Рейсы.Рейс КАК Рейс
	|				ИЗ
	|					ВТ_Рейсы КАК ВТ_Рейсы)) КАК ПривязкаМашинКРейсамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НомераЗаказов.Номер КАК Номер,
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВТ_Рейсы.Рейс.Номер КАК НомерРейса,
	|	ВТ_Рейсы.Рейс.ДатаРейса КАК ДатаРейса,
	|	ВТ_Экипажи.Транспорт.Наименование КАК Транспорт,
	|	ВТ_Экипажи.Водитель.Наименование КАК Водитель,
	|	ВТ_Экипажи.Экспедитор.Наименование КАК Экспедитор,
	|	НЕ ВТ_Рейсы.Рейс ЕСТЬ NULL КАК ВРейсе,
	|	РеализацияТоваровУслуг.Номер КАК НомерСтриж,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК ВнешнийНомер,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
	|ИЗ
	|	ВТ_НомераЗаказов КАК ВТ_НомераЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Экипажи КАК ВТ_Экипажи
	|				ПО ВТ_Рейсы.Рейс = ВТ_Экипажи.Рейс
	|			ПО ВТ_Заказы.Заказ = ВТ_Рейсы.Заказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО ВТ_Заказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|		ПО ВТ_НомераЗаказов.Номер = ВТ_Заказы.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер");
	
	Запрос.Текст = СтрСоединить(МассивТекстов);
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	КоличествоВсего = ТаблицаЗаказов.Количество();
	
	СтрокиЗаказов = ТаблицаЗаказов.НайтиСтроки(Новый Структура("Заказ", Null));
	
	КоличествоНенайденных = СтрокиЗаказов.Количество();
	КоличествоНайденных = КоличествоВсего - КоличествоНенайденных;
		
	Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
		Сообщить("Не найден заказ " + СтрокаЗаказа.Номер);
	КонецЦикла;
	
	Если Не КоличествоНайденных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КоличествоНайденных > 100 И Не МассоваяОперация Тогда
		Сообщить("Массовая операция (> 100 заказов) не разрешена");
		Возврат Неопределено;
	КонецЕсли;
	
	//Сообщить("Процесс отмены...");
	//Возврат Неопределено;
	
	СтрокиЗаказов = ТаблицаЗаказов.НайтиСтроки(Новый Структура("ВРейсе", Истина));
	Если СтрокиЗаказов.Количество() Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		
		Макет = Обработки.ОтменаЗаказов.ПолучитьМакет("ЗаказыВРейсе");
		
		Область = Макет.ПолучитьОбласть("Шапка");
		ПараметрыОбласти = Область.Параметры;
		ПараметрыОбласти.Дата = ДатаОбработки;
		ТабДок.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Строка");
		ПараметрыОбласти = Область.Параметры;
		
		Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
			ПараметрыОбласти.Заполнить(СтрокаЗаказа);
			ПараметрыОбласти.НомерСтриж = СокрЛП(ПараметрыОбласти.НомерСтриж);
			ТабДок.Вывести(Область);
		КонецЦикла;
		
		ТемаПисьма = "Заказы в рейсе " + Формат(ДатаОбработки, "ДФ=dd.MM.yyyy");
		ТекстПисьма = "Заказы в рейсе " + ДатаОбработки;
		
		ИмяФайла = КаталогВременныхФайлов() + "ЗаказыВРейсе" + Формат(ДатаОбработки, "ДФ=ddMMyyHHmmss") + ".xls";
		
		ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
		
		МассивПолучателей = Новый Массив;
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
		Иначе
			МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
			МассивПолучателей.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
			МассивПолучателей.Добавить("logist@strizh-logistic.ru");
		КонецЕсли;
		
		lem.ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма, ИмяФайла);
		//Сообщить("Отправка письма закомментирована: " + ТемаПисьма);
		
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	КолонкиТаблицы = ТаблицаЗаказов.Колонки;
	КолонкиТаблицы.Добавить("ОбработкаПропущена", Новый ОписаниеТипов("Булево"));
	КолонкиТаблицы.Добавить("РезультатAPI");
	КолонкиТаблицы.Добавить("ОписаниеОшибки", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	
	Фиксация = Документы.ФиксацияГрупповойОперацииСЗаказами.СоздатьДокумент();
	Фиксация.ТипГрупповойОперации = Перечисления.ТипыГрупповыхОперацийСЗаказами.ОтменаЗаказов;
	
	Фиксация.Дата = ДатаОбработки;
	Фиксация.СелекторТипаНомера = СелекторТипаНомера;
	Фиксация.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Фиксация.Партнер = Партнер;
	Фиксация.Комментарий = Комментарий;
	Фиксация.ИнициаторСостояния = ИнициаторСостояния;
	Фиксация.ПричинаОтказаПереноса = ПричинаОтказаПереноса;
	
	ОбработкаВыполнена = Перечисления.СтатусыГрупповойОперацииСЗаказом.ОбработкаВыполнена;
	ОбработкаПропущена = Перечисления.СтатусыГрупповойОперацииСЗаказом.ОбработкаПропущена;
	
	//Асеев 25.01.2022 (Задача № 4975)>>>
	//СтруктураДоступаSync = Новый Структура("Логин,Пароль", "backoffice", "E146THy");
	reasonId = ПричинаОтказаПереноса.Код;
	who = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
	//Асеев 25.01.2022 (Задача № 4975)<<<
	
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
		
		Если СтрокаЗаказа.Заказ <> Null Тогда
			
			//Асеев 25.01.2022 (Задача № 4975)>>>
			//РезультатAPI = Неопределено;
			//
			//Попытка
			//	//ВызватьИсключение "тест_ошибка";
			//	РезультатAPI = ИнтеграцияССервисомSync.RefuseOrder(Число(СтрокаЗаказа.НомерСтриж), СтруктураДоступаSync);
			//Исключение
			//	СтрокаЗаказа.ОписаниеОшибки = ОписаниеОшибки();
			//КонецПопытки;
			//
			//СтрокаЗаказа.РезультатAPI = РезультатAPI;
			//
			//СтрокаФиксации = Фиксация.Заказы.Добавить();
			//СтрокаФиксации.Заказ = СтрокаЗаказа.Заказ;
			//
			//Если РезультатAPI = 1 Тогда
			//	СтрокаФиксации.Статус = ОбработкаВыполнена;
			//Иначе
			//	СтрокаФиксации.Статус = ОбработкаПропущена;
			//	СтрокаЗаказа.ОбработкаПропущена = Истина;
			//КонецЕсли;
			
			ПараметрыЗапроса = Новый Структура("orderId,reasonId,who", Число(СтрокаЗаказа.НомерСтриж), reasonId, who);
			
			СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке("cancelOrder", ПараметрыЗапроса,,,, Справочники.API.IntegrationService_v2);
			
			РезультатAPI = Неопределено;
			ОписаниеОшибки = Неопределено;
			Если СтруктураВозврата.Успешно Тогда
				СтруктураВозврата.Данные.Свойство("error", ОписаниеОшибки);
				Если ОписаниеОшибки <> Неопределено Тогда
					РезультатAPI = ОписаниеОшибки;
				КонецЕсли;
			Иначе
				ОписаниеОшибки = СтруктураВозврата.ОписаниеОшибки;
			КонецЕсли;
			
			СтрокаЗаказа.ОписаниеОшибки = ОписаниеОшибки;
			СтрокаЗаказа.РезультатAPI = РезультатAPI;
			
			СтрокаФиксации = Фиксация.Заказы.Добавить();
			СтрокаФиксации.Заказ = СтрокаЗаказа.Заказ;
			
			Если ОписаниеОшибки = Неопределено Тогда
				СтрокаФиксации.Статус = ОбработкаВыполнена;
			Иначе
				СтрокаФиксации.Статус = ОбработкаПропущена;
				СтрокаЗаказа.ОбработкаПропущена = Истина;
			КонецЕсли;
			//Асеев 25.01.2022 (Задача № 4975)<<<
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиЗаказов = ТаблицаЗаказов.НайтиСтроки(Новый Структура("ОбработкаПропущена", Истина));
	Если СтрокиЗаказов.Количество() Тогда
		
		ТемаПисьма = "Заказы, по которым невозможна отмена " + Формат(ДатаОбработки, "ДФ=dd.MM.yyyy");
		
		ТекстПисьма = Новый Массив;
		ТекстПисьма.Добавить("Заказы, по которым невозможна отмена " + ДатаОбработки);
		ТекстПисьма.Добавить("");
		Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
			//Асеев 25.01.2022 (Задача № 4975)>>>
			//Если СтрокаЗаказа.РезультатAPI <> Неопределено Тогда
			//	ТекстПисьма.Добавить("По заказу " + СокрЛП(СтрокаЗаказа.НомерСтриж) + " ответ метода RefuseOrder API: " + СтрокаЗаказа.РезультатAPI);
			//Иначе
			//	ТекстПисьма.Добавить("По заказу " + СокрЛП(СтрокаЗаказа.НомерСтриж) + " ошибка вызова метода RefuseOrder API: " + СтрокаЗаказа.ОписаниеОшибки);
			//КонецЕсли;
			Если СтрокаЗаказа.РезультатAPI <> Неопределено Тогда
				ТекстПисьма.Добавить("По заказу " + СокрЛП(СтрокаЗаказа.НомерСтриж) + " ответ метода cancelOrder API: " + СтрокаЗаказа.РезультатAPI);
			Иначе
				ТекстПисьма.Добавить("По заказу " + СокрЛП(СтрокаЗаказа.НомерСтриж) + " ошибка вызова метода cancelOrder API: " + СтрокаЗаказа.ОписаниеОшибки);
			КонецЕсли;
			//Асеев 25.01.2022 (Задача № 4975)<<<
		КонецЦикла;
		
		ТекстПисьма = СтрСоединить(ТекстПисьма, Символы.ПС);
		
		МассивПолучателей = Новый Массив;
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
		Иначе
			МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
			МассивПолучателей.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
			МассивПолучателей.Добавить("logist@strizh-logistic.ru");
		КонецЕсли;
		
		lem.ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма);
		
	КонецЕсли;
	
	Фиксация.Записать();
	
	Возврат Фиксация.Ссылка;
	
КонецФункции