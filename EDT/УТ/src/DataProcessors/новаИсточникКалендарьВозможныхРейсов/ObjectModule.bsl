#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

Перем ЖурналНачалоПериода, ЖурналКонецПериода;

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если Журнал.ЕстьИерархия Тогда
		Если ДанныеСтроки.Группировка <> NULL Тогда
			Если КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "Транспорт" Тогда
				ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
				ОформлениеСтроки.ЦветФона = Новый Цвет(216, 203, 166);
			ИначеЕсли КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "Водитель" Тогда
				ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
				ОформлениеСтроки.ЦветФона = Новый Цвет(200, 200, 255);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Группировка = NULL Тогда
		Если ДанныеСтроки.Отменен = Истина Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(255, 200, 200);
		
		ИначеЕсли ДанныеСтроки.Отменен = Ложь Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(200, 255, 200);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
	
	ИначеЕсли Событие = "Выбор" Тогда
		ВвестиНовуюКорректировкуВозможногоРейса(Параметр1.Документ);
		
	ИначеЕсли Событие = "ИзменениеПараметров" Тогда
		СформироватьОтбор();
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "КорректировкаВозможногоРейса" Тогда
			ВвестиНовуюКорректировкуВозможногоРейса();
		КонецЕсли;
	КонецЕсли;	
КонецФункции

Процедура ВвестиНовуюКорректировкуВозможногоРейса(Корректировка = Неопределено)
	Если Не ЗначениеЗаполнено(Корректировка) Тогда
		Если Журнал.ТекущиеДанные = Неопределено Тогда
			обКорректировка = Документы.новаКорректировкаВозможногоРейса.СоздатьДокумент();
			
		Иначе
			Если ЗначениеЗаполнено(Журнал.ТекущиеДанные.Документ) Тогда
				обКорректировка = Журнал.ТекущиеДанные.Документ.ПолучитьОбъект();
			Иначе
				Если ЗначениеЗаполнено(Журнал.ТекущиеДанные.Транспорт)
				   И ЗначениеЗаполнено(Журнал.ТекущиеДанные.Водитель) 
				   И ЗначениеЗаполнено(Журнал.ТекущиеДанные.НачалоПериода) Тогда
				
					обКорректировка = Документы.новаКорректировкаВозможногоРейса.СоздатьДокумент();
					обКорректировка.Транспорт = Журнал.ТекущиеДанные.Транспорт;
					обКорректировка.Водитель = Журнал.ТекущиеДанные.Водитель;
					обКорректировка.НачалоПериода = Журнал.ТекущиеДанные.НачалоПериода;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		обКорректировка = Корректировка.ПолучитьОбъект();
	КонецЕсли;
	
	Если обКорректировка <> Неопределено Тогда
 		Форма = обКорректировка.ПолучитьФорму("ФормаБыстрогоВвода");
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтбор()
	ЖурналНачалоПериода = ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода;
	ЖурналКонецПериода = ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода;
	ЖурналКонецПериода = ?(ЗначениеЗаполнено(ЖурналКонецПериода), ЖурналКонецПериода, '30000101');

	КонструкторДанных.ДобавитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
	КонструкторДанных.ДобавитьПараметр("ЖурналКонецПериода", ЖурналКонецПериода);
	
	Если ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода) И ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода) Тогда
		КонструкторДанных.ПостоянныйОтбор = "(ВозможныеРейсы.НачалоПериода МЕЖДУ &ЖурналНачалоПериода И &ЖурналКонецПериода)";
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода) И Не ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода) Тогда
		КонструкторДанных.ПостоянныйОтбор = "ВозможныеРейсы.НачалоПериода >= &ЖурналНачалоПериода";
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода) И Не ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода) Тогда
		КонструкторДанных.ПостоянныйОтбор = "ВозможныеРейсы.НачалоПериода <= &ЖурналКонецПериода";
		
	Иначе
		КонструкторДанных.ПостоянныйОтбор = "";
	КонецЕсли;
КонецПроцедуры

Процедура Настроить()
	ПериодПоУмолчанию = Новый Структура("НачалоПериода, КонецПериода", НачалоГода(ТекущаяДата()), КонецГода(ТекущаяДата()));
	мсИнструменты = Новый Массив;
	ПараметрыЖурнала = Новый Структура("ИнтерфейсВводаПериода, Инструменты", ПериодПоУмолчанию, мсИнструменты);

	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	
	СформироватьОтбор();
	
	КонструкторДанных.ТекстЗапроса = "
	|РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаКорректировкаКалендаряВозможныхРейсов КАК Корректировки
	|ПО
	|	ВозможныеРейсы.Транспорт = Корректировки.Транспорт
	| И ВозможныеРейсы.Водитель = Корректировки.Водитель
	| И НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, День) = Корректировки.НачалоПериода
	|
	|{СОЕДИНЕНИЯ}
	|";

	КонструкторДанных.ПостояннаяВыборка = ",
	|	ВозможныеРейсы.Транспорт КАК Транспорт,
	|	Представление(ВозможныеРейсы.Транспорт) КАК Транспорт_Пред,
	|	ВозможныеРейсы.Водитель КАК Водитель,
	|	Представление(ВозможныеРейсы.Водитель) КАК Водитель_Пред,
	|	ВозможныеРейсы.НачалоРейса КАК НачалоРейса,
	|	Представление(ВозможныеРейсы.НачалоРейса) КАК НачалоРейса_Пред,
	|	ВозможныеРейсы.НачалоПериода КАК НачалоПериода,
	|	ВозможныеРейсы.НачалоПериода КАК НачалоПериодаВремя,
	|	ВозможныеРейсы.КонецПериода КАК КонецПериода,
	|	Корректировки.Регистратор КАК Документ,
	|	Корректировки.Отменен КАК Отменен,
	|	Корректировки.НовыйЭкспедитор КАК НовыйЭкспедитор,
	|	Представление(Корректировки.НовыйЭкспедитор) КАК НовыйЭкспедитор_Пред,
	|	Корректировки.НовыйТранспорт КАК НовыйТранспорт,
	|	Представление(Корректировки.НовыйТранспорт) КАК НовыйТранспорт_Пред,
	|	Корректировки.НовыйВодитель КАК НовыйВодитель,
	|	Представление(Корректировки.НовыйВодитель) КАК НовыйВодитель_Пред,
	|	Корректировки.НовоеНачалоРейса КАК НовоеНачалоРейса,
	|	Представление(Корректировки.НовоеНачалоРейса) КАК НовоеНачалоРейса_Пред,
	|	Корректировки.НовоеНачалоПериода КАК НовоеНачалоПериода,
	|	Корректировки.НовыйКонецПериода КАК НовыйКонецПериода";
	
	КонструкторДанных.ДобавитьПоле("Транспорт");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Транспорт");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.Транспорт.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Водитель");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.Водитель");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.Водитель.Наименование");

	КонструкторДанных.ДобавитьПоле("НачалоРейса");
	КонструкторДанных.ДобавитьОтборПоля(, "ВозможныеРейсы.НачалоРейса");

	КонструкторДанных.ДобавитьПоле("НачалоПериода",, "ДФ=dd.MM.yyyy");
	КонструкторДанных.ДобавитьСортировкуПоля("ВозможныеРейсы.НачалоПериода");
	
	КонструкторДанных.ДобавитьПоле("НачалоПериодаВремя", "С", "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьСортировкуПоля("НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ)");
	
	КонструкторДанных.ДобавитьПоле("КонецПериода", "По", "ДФ=ЧЧ:мм");
	
	
	КонструкторДанных.ДобавитьПоле("НовыйЭкспедитор", "Экспедитор");
	КонструкторДанных.ДобавитьОтборПоля(, "Корректировки.НовыйЭкспедитор");
	КонструкторДанных.ДобавитьСортировкуПоля("Корректировки.НовыйЭкспедитор.Наименование");
	
	КонструкторДанных.ДобавитьПоле("НовыйТранспорт");
	КонструкторДанных.ДобавитьОтборПоля(, "Корректировки.НовыйТранспорт");
	КонструкторДанных.ДобавитьСортировкуПоля("Корректировки.НовыйТранспорт.Наименование");
	
	КонструкторДанных.ДобавитьПоле("НовыйВодитель");
	КонструкторДанных.ДобавитьОтборПоля(, "Корректировки.НовыйВодитель");
	КонструкторДанных.ДобавитьСортировкуПоля("Корректировки.НовыйВодитель.Наименование");
	
	КонструкторДанных.ДобавитьПоле("НовоеНачалоРейса");
	КонструкторДанных.ДобавитьОтборПоля(, "Корректировки.НовоеНачалоРейса");
	КонструкторДанных.ДобавитьСортировкуПоля("Корректировки.НовоеНачалоРейса.Наименование");
	
	КонструкторДанных.ДобавитьПоле("НовоеНачалоПериода", "С", "ДФ=ЧЧ:мм");
	КонструкторДанных.ДобавитьПоле("НовыйКонецПериода", "По", "ДФ=ЧЧ:мм");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Транспорт");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Водитель");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("НачалоПериода");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Транспорт, Водитель, НачалоПериода"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

#КонецЕсли