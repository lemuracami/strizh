Перем ТекущийЭтап, Прогресс;
Перем ДеревоНоменклатуры, НоменклатураКОбновлениюБрендов;
Перем СписокЗаказов, ТабличнаяЧастьЗаказов, СписокОткрытыхЗаказов;
Перем ДатаЗапроса;
Перем ГраницаЗаказов;
Перем ПодключениеКМагазину Экспорт;
Перем НормальныйХодВыполнения;
Перем ФлагАвтоматическогоЗапуска, ФлагЗаписиПослеКаждойСтроки, ФлагДобавленияЗамены, ФлагУдаленияОткрытыхЗаказов;
Перем ЛогФайл, ИмяФайла;
Перем ПутьКНастройкамЛогирования;
Перем ПрефиксКодовКонтрагентов;
//Перем ФормаПоискаАдреса;
Перем ОбъектПоискаАдреса;
Перем ПучокДокументов;
Перем СкладХраниения, СкладРеализацииПоКомиссии, СкладРеализацииПоДоставке, СкладРеализации;
Перем СписокЗагружаемойНоменклатуры;
Перем ТоварRestore;
Перем ВозниклаОшибка;
Перем РезНепр;
Перем Руб;
Перем Орг;
Перем ГрТов;
Перем ВН;
Перем 	ШтукиПер;      // шт.
Перем 	ВидНоменклатурыПер; // Товар
Перем РодТД;
Перем ДостПер;
Перем КомитентПер;
Перем РодКонтр;
Перем глМасДог;
//+++ БАО 31.05.2017 №926
Перем ИМ_TopDelivery;
Перем Код_ИМ_TopDelivery;
//--- БАО 31.05.2017 №926

//+++ БАО 01.06.2017 №926
Перем КонтрагентМагазин_Shop_248;
Перем КонтрагентМагазин_Shop_601;
Перем КонтрагентМагазин_Shop_752;
Перем Shop_602;
Перем Shop_612;
Перем КачествоНовый;
Перем РегиональныеТерминалы_СПбСтриж;
//--- БАО 01.06.2017 №926

//+++ БАО 02.06.2017 №926
Перем ПучокДокументовОбщий;
Перем ХранилищеОбъектовСравнения;
//--- БАО 02.06.2017 №926

//+++ БАО 05.07.2017 №1250
Перем ТаблицаЗаданий Экспорт ;
Перем НаСервере;
Перем МассивЗагруженныхНомеровЗаказов;
Перем ОбщийМассивСообщений;
Перем ВсеЗавершены;
Перем ХранилищеОбъектовСравнения_До;
Перем ОтключитьОбработчикОжидания Экспорт;
Перем ФормаСообщений;
Перем КоличествоЗаказов;
//--- БАО 05.07.2017 №1250 
//Асеев 16.02.2023 (Задача № 4995)>>>
Перем ТаблицаЗаказовКЗаборам;
//Асеев 16.02.2023 (Задача № 4995)<<<

Процедура ВыполнитьЭтапы(СписокЭтапов, АвтоматическийРежим = Ложь) Экспорт 
	
	//+++ БАО 27.06.2017 №1192 
	
	Если РежимСравнения Тогда
		//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);  
		ХранилищеОбъектовСравнения.Очистить();
	КонецЕсли;	
		
	//--- БАО 27.06.2017 №1192 	
	
	ПутьКНастройкамЛогирования = "C:\log1s\sqlserverflag.txt";
	НормальныйХодВыполнения = Истина;
	
	ФормаСообщений = Неопределено;
	
	Если СписокЭтапов.Количество() > 0 Тогда
		ФлагАвтоматическогоЗапуска = 0;
		ФлагЗаписиПослеКаждойСтроки = 1;
		ФлагДобавленияЗамены = 2;
		ИмяФайла = "";
		
		ПрочитатьНастройкиЛогирования();
		
		Если АвтоматическийРежим И (ФлагАвтоматическогоЗапуска = 0) Тогда
			
			Возврат;
		КонецЕсли;
		
		//+++ Костя К.В. 170815
		ТекущаяЗагрузкаДанных = Константы.ТекущаяЗагрузкаДанных.Получить();
		Если    ТекущаяЗагрузкаДанных = Перечисления.ТипыЗагрузкиИзАдминки.ПустаяСсылка() Тогда
			//ИЛИ ТекущаяЗагрузкаДанных = Перечисления.ТипыЗагрузкиИзАдминки.ОконныйРежим Тогда
			Константы.ТекущаяЗагрузкаДанных.Установить(Перечисления.ТипыЗагрузкиИзАдминки.ОконныйРежим);
		Иначе
			Если АвтоматическийРежим Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//--- Костя К.В. 170815
		
		Если ФлагДобавленияЗамены = 1 Тогда
			ЛогФайл.Прочитать(ИмяФайла);				
		КонецЕсли;
		
		

		Если ФормаСообщений <> Неопределено Тогда
			
			ФормаСообщений["Поток" + 0] = "";
			
			Для НомерПотока = 1 По  8 Цикл 
				
				ФормаСообщений.ЭлементыФормы["Поток" + НомерПотока].Видимость = Ложь;
				ФормаСообщений.ЭлементыФормы["НадписьПоток" + НомерПотока].Видимость = Ложь;
				ФормаСообщений.ЭлементыФормы["Индикатор" + НомерПотока].Видимость = Ложь;
				ФормаСообщений["Поток" + НомерПотока] = "";
				ФормаСообщений["Индикатор" + НомерПотока] = 0;
				
				ФормаСообщений.ЭлементыФормы["Поток" + НомерПотока].ЦветФонаПоля =  ЦветаСтиля.ЦветФонаПоля;
				
			КонецЦикла;	
			
			ФормаСообщений.ЭлементыФормы.КоманднаяПанель1.Кнопки.ПолучитьОбщийЛог.Доступность = Ложь;
			
		КонецЕсли;
		
		Лог("================== Начало загрузки "+?(АвтоматическийРежим, " (автоматический режим)", " (ручной режим)")+" ==================");
		Лог("Список активных пользователей:");
		ВывестиСписокАктивныхПользователей();
		//Лог("Загрузка данных с ТСД");
		//lem.РегламентЗагрузкаДанныхСТСД(Истина);
		//Константы.ФлагЗагрузкиДанныхСТСД.Установить(Ложь);
		Прогресс = 0;
		СледующееСостояние("Создание временных таблиц");
		
		//////lem.РегламентЗагрузкаДанныхСТСД(Истина);
		
		Попытка
			ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
			СоздатьВременныеТаблицы();
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Не удалось создать подключение: "+ОписаниеОшибки());
			lem.ОтправитьНормальноеСообщениеАдминам("Подключение при обмене", "Не удалось создать подключение: "+ОписаниеОшибки());
		КонецПопытки;
		
		Если НормальныйХодВыполнения Тогда
			
			ПодготовитьДанные(СписокЭтапов);			
			//CeHbKA #3587
			//ПодготовитьДанные_Новая(СписокЭтапов);
			//CeHbKA #3587
			ТекущийЭтап = 1;
			
			//+++ БАО 30.06.2017 №Для сравнения с прошлой версией
			Если РежимСравнения И ЗапускатьСтаруюВерсию Тогда
				
				ВывестиСообщение("================================================================");
				ВывестиСообщение("ЗАПУЩЕНА СТАРАЯ ВЕРСИЯ");
				ВывестиСообщение("================================================================");
				
				ТекущийЭтап = 1;
				
				ВыполнитьЭтап_До_30_06_2017("ЗагрузитьНовыеЗаказы", СписокЭтапов);
				ВыполнитьЭтап_До_30_06_2017("ЗагрузитьЗаказыНаЗавтра", СписокЭтапов);
				ВыполнитьЭтап_До_30_06_2017("ЗагрузитьЗаказыПоНомерам", СписокЭтапов);      
				ВыполнитьЭтап_До_30_06_2017("ЗагрузитьЗаказыПоДатеОтгрузки", СписокЭтапов);      
				ВыполнитьЭтап_До_30_06_2017("СпецЗагрузка", СписокЭтапов);
				
								
				ХранилищеОбъектовСравнения_До = ХранилищеОбъектовСравнения.Скопировать();
				ХранилищеОбъектовСравнения.Очистить();
				
			КонецЕсли;	
			//---БАО 30.06.2017 №Для сравнения с прошлой версией

			
			ВыполнитьЭтап("ЗаписатьКонтрагентов", СписокЭтапов);
			//ВыполнитьЭтап("СинхронизацияДереваНоменклатуры", СписокЭтапов);
			//ВыполнитьЭтап("ЗаписатьНоменклатуру", СписокЭтапов);
			//ВыполнитьЭтап("ОбновитьВсюНоменклатуру", СписокЭтапов);
			//ВыполнитьЭтап("ИзменениеПометкиУдаленияНоменклатуры", СписокЭтапов);
			
			ВыполнитьЭтап("ЗагрузитьНоменклатуруПоКодамСайта", СписокЭтапов);
			ВыполнитьЭтап("ЗагрузитьНоменклатуруПоКодамАдминки", СписокЭтапов);
			ВыполнитьЭтап("ЗагрузитьНовыеЗаказы", СписокЭтапов);
			ВыполнитьЭтап("ЗагрузитьЗаказыНаЗавтра", СписокЭтапов);
			ВыполнитьЭтап("ЗагрузитьЗаказыПоНомерам", СписокЭтапов);      
			ВыполнитьЭтап("ЗагрузитьЗаказыПоДатеОтгрузки", СписокЭтапов);      
			ВыполнитьЭтап("СпецЗагрузка", СписокЭтапов);
			
			//+++ Костя 170815
			// После выполнения загрузки сбросить константу
			Константы.ТекущаяЗагрузкаДанных.Установить(Перечисления.ТипыЗагрузкиИзАдминки.ПустаяСсылка());
			//--- Костя 170815
			
			
		КонецЕсли;
		
		ФлагЗаписиПослеКаждойСтроки = 1;
		ФлагДобавленияЗамены = 1;
		
		Лог("");

				
		ПодключениеКМагазину = 0;
		Если АвтоматическийРежим Тогда
			//ЗавершитьРаботуСистемы();
			ЛогФайл = Неопределено;
			#Если Клиент Тогда
				//ПрекратитьРаботуСистемы(Ложь);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

//+++ БАО 30.06.2017 №Для сравнения с прошлой версией

Функция ПодготовитьДокументКЗаполнению_До_30_06_2017(ДокОбъект, ОписаниеДействия = "", НомерЗаказа = 0)
	
	ДействиеСДокументом = "";
	Попытка
		Если ДокОбъект.ПометкаУдаления Тогда
			ДействиеСДокументом = "снять с удаления ";
			ДокОбъект.УстановитьПометкуУдаления(Ложь);
		ИначеЕсли ДокОбъект.Проведен Тогда
			ДействиеСДокументом = "распровести ";
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	Исключение
		Лог("!!! Ошибка. Не удалось " + ДействиеСДокументом + ДокОбъект + " " + ОписаниеОшибки());
		Если ЗначениеЗаполнено(НомерЗаказа) Тогда
			Лог("!!! " + ОписаниеДействия + НомерЗаказа + " прервано.");
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	ДобавитьВХранилищеОбъектовСравнения(ДокОбъект.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Функция ПометкаДокументаНаУдаление_До_30_06_2017(ДокОбъект)
	
	Если Не ДокОбъект.ПометкаУдаления Тогда
		Попытка
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			//+++ БАО 09.06.2017 №926
			Если ДокОбъект.Модифицированность()  Тогда
				ДокОбъект.Записать();
			КонецЕсли;	
			//--- БАО 09.06.2017 №926 
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			Лог("   --- Помечен на удаление " + ДокОбъект);
		Исключение
			ВывестиСообщение(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(ДокОбъект.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат Истина;
КонецФункции // ПометкаДокументаНаУдаление()

Процедура ВыполнитьЭтап_До_30_06_2017(КлючЭтапа, СписокЭтапов)
	Перем ПараметрыЭтапа;
	Если СписокЭтапов.Свойство(КлючЭтапа, ПараметрыЭтапа) Тогда
		Если Не НормальныйХодВыполнения Тогда
			Лог("Этап "+КлючЭтапа+" пропущен из-за возникших ранее ошибок");
			Возврат;
		КонецЕсли;
		
		ОписаниеЭтапа = "Этап "+ТекущийЭтап+" из "+СписокЭтапов.Количество()+" ("+КлючЭтапа+")";
		#Если Клиент Тогда 
			Состояние(ОписаниеЭтапа, ТекущийЭтап*100/СписокЭтапов.Количество());
		#КонецЕсли
		Лог(ОписаниеЭтапа);
		
		Если КлючЭтапа = "ЗаписатьКонтрагентов" Тогда
			
			ЗаписатьКонтрагентов(ПараметрыЭтапа);
			
		ИначеЕсли КлючЭтапа = "ЗаписатьНоменклатуру" Тогда
			
			//ЗаписатьНоменклатуру(ПараметрыЭтапа); // Добавить определение ставки НДС
			
		ИначеЕсли КлючЭтапа = "ОбновитьВсюНоменклатуру" Тогда
			
			//СинхронизацияДереваНоменклатуры(); //создание новых и изменение групп товаров, у которых она отличается
			
		ИначеЕсли КлючЭтапа = "ЗагрузитьНоменклатуруПоКодамСайта" Тогда
			ЗагрузитьНоменклатуруПоКодамСайта(ПараметрыЭтапа);
		ИначеЕсли КлючЭтапа = "ЗагрузитьНоменклатуруПоКодамАдминки" Тогда
			ЗагрузитьНоменклатуруПоКодамСайта(ПараметрыЭтапа);
		ИначеЕсли КлючЭтапа = "ИзменениеПометкиУдаленияНоменклатуры" Тогда
			
			ИзменениеПометкиУдаленияНоменклатуры(ПараметрыЭтапа);
			
		ИначеЕсли КлючЭтапа = "ЗагрузитьЗаказыНаЗавтра" Тогда
			ОбработатьЗаказы_До_30_06_2017(Ложь, ОписаниеЭтапа);
		ИначеЕсли КлючЭтапа = "ЗагрузитьНовыеЗаказы" Тогда
			
			ОбработатьЗаказы_До_30_06_2017(Истина, ОписаниеЭтапа);
 
			
		ИначеЕсли КлючЭтапа = "ЗагрузитьЗаказыПоДатеСоздания" Тогда
			ОбработатьЗаказы_До_30_06_2017(Ложь, ОписаниеЭтапа);
		ИначеЕсли КлючЭтапа = "ЗагрузитьЗаказыПоДатеОтгрузки" Тогда
			ОбработатьЗаказы_До_30_06_2017(Ложь, ОписаниеЭтапа);
		ИначеЕсли КлючЭтапа = "СпецЗагрузка" Тогда
			ОбработатьЗаказы_До_30_06_2017(Ложь, ОписаниеЭтапа);
		ИначеЕсли КлючЭтапа = "ЗагрузитьЗаказыПоНомерам" Тогда  
			ОбработатьЗаказы_До_30_06_2017(Ложь, ОписаниеЭтапа);
		КонецЕсли;
		ТекущийЭтап = ТекущийЭтап + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗаказы_До_30_06_2017(флОбновлятьДатуПоследнейЗагрузки, ОписаниеЭтапа)
	
	Перем Контрагент, Договор;
	Перем КонтрагентДПД, ТочкаДПД;
		
	#Область ЗагрузкаКонтрагентов //Магазинов	
	////+++ Костя  // ЗАГРУЗКА КОНТРАГЕНТОВ
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	
	ТЗ1 = Новый ТаблицаЗначений;
	ТЗ1.Колонки.Добавить("Номер"         , ОписаниеТиповСтрока);
	ТЗ1.Колонки.Добавить("КодКонтрагента", ОписаниеТиповСтрока);
	ТЗ1.Колонки.Добавить("КодВладельца"  , ОписаниеТиповСтрока);
	//ТЗ1.ЗагрузитьКолонку(МассивНомеров,"Номер");
	
	Если СписокЗаказов.Количество() >  0 Тогда
		
		//+++ БАО 31.05.2017 №926
		СписокСсылокНаКонтрагента = Новый Соответствие;
		//--- БАО 31.05.2017 №926
		
		Подключение = Евген.СоздатьПодключениеКИнтернетМагазину();
		//ПрефиксКодовКонтрагентов = "R";
		//ДатаЗапроса = НачалоДня(ТекущаяДата());
		
		Для Каждого Стр Из СписокЗаказов Цикл
			НоваяСтрТЗ1 = ТЗ1.Добавить();
			НоваяСтрТЗ1.Номер          = Формат(Стр.orderId_Ч, "ЧН=0; ЧГ=");
			НоваяСтрТЗ1.КодКонтрагента = "R"+Формат(Стр.UserId_Ч, "ЧН=0; ЧГ=");
			НоваяСтрТЗ1.КодВладельца   = "Shop_" + Формат(Стр.shop_Ч, "ЧН=0; ЧГ=");
		КонецЦикла;
		
		ЗапросПоКонтрагентам = Новый Запрос;
		ЗапросПоКонтрагентам.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросПоКонтрагентам.УстановитьПараметр("КодыКонтрагентов", ТЗ1);
		ЗапросПоКонтрагентам.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТабКодов.КодКонтрагента КАК СТРОКА(9)) КАК КодКонтрагента,
		|	ВЫРАЗИТЬ(ТабКодов.КодВладельца КАК СТРОКА(9)) КАК КодВладельца
		|ПОМЕСТИТЬ ВремТаб
		|ИЗ
		|	&КодыКонтрагентов КАК ТабКодов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодКонтрагента,
		|	КодВладельца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремТаб.КодКонтрагента КАК КодКонтрагента,
		|	ВремТаб.КодВладельца КАК КодВладельца,
		|	ЕСТЬNULL(Контрагенты.Ссылка, 0) КАК КонтрагентСсылка,
		|	ЕСТЬNULL(Магазины.Ссылка, 0) КАК ВладелецСсылка
		|ПОМЕСТИТЬ ТабНайденныхК
		|ИЗ
		|	ВремТаб КАК ВремТаб
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВремТаб.КодКонтрагента = Контрагенты.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Магазины
		|		ПО ВремТаб.КодВладельца = Магазины.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабНайденныхК.КодКонтрагента КАК КодКонтрагента,
		|	ТабНайденныхК.КодВладельца КАК КодВладельца,
		|	ТабНайденныхК.КонтрагентСсылка КАК КонтрСсылка,
		|	ТабНайденныхК.ВладелецСсылка КАК МагазинСсылка,
		|	ВЫБОР
		|		КОГДА ТабНайденныхК.КонтрагентСсылка = 0
		|				И ТабНайденныхК.ВладелецСсылка = 0
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТабНайденныхК.КонтрагентСсылка = 0
		|					ТОГДА 1
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТабНайденныхК.ВладелецСсылка = 0
		|							ТОГДА 2
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ПризнакКонтрВладелец
		|ИЗ
		|	ТабНайденныхК КАК ТабНайденныхК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Код КАК Код,
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.ОсновнойДоговорКонтрагента КАК ОсновнойДоговорКонтрагента,
		|	Контрагенты.ОсновнойДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорСПокупателем
		|ИЗ
		|	ВремТаб КАК ВремТаб
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|			ПО Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
		|				И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем))
		|		ПО ВремТаб.КодКонтрагента = Контрагенты.Код";		
		
		//НомераЗаказовБезКонтрагентов = ЗапросПоКонтрагентам.Выполнить().Выгрузить();
		Результат = ЗапросПоКонтрагентам.ВыполнитьПакет();
		НомераЗаказовБезКонтрагентов = Результат[2].Выгрузить();
		
		Выборка = Результат[3].Выбрать();
					
		Пока Выборка.Следующий() Цикл 
						
			СписокСсылокНаКонтрагента.Вставить(Выборка.Код, Новый Структура("Ссылка, ОсновнойДоговорКонтрагента, ВидДоговора, ДоговорСПокупателем",Выборка.Ссылка, Выборка.ОсновнойДоговорКонтрагента, Выборка.ВидДоговора, Выборка.ДоговорСПокупателем));
						
		КонецЦикла;	
		
		//--- БАО 31.05.2017 №926
		
		///////         1) записать справочник Контрагенты
		/////// 			2) обработать документ
		Если НомераЗаказовБезКонтрагентов.Количество() > 0 Тогда
			НовыеМагазины = "";
			НовыеКонтрагенты = "";
			Для Каждого Стр Из НомераЗаказовБезКонтрагентов Цикл
				Если Стр.ПризнакКонтрВладелец = 3 Тогда // контр и владелец не найден в 1С
					НовыеМагазины    = НовыеМагазины    + "," + СокрЛП(Сред(Стр.КодВладельца,6));
					НовыеКонтрагенты = НовыеКонтрагенты + "," + СокрЛП(Сред(Стр.КодКонтрагента,2));
				ИначеЕсли Стр.ПризнакКонтрВладелец = 2 Тогда // нет владельца-магазин
					НовыеМагазины = НовыеМагазины + "," + СокрЛП(Сред(Стр.КодВладельца,6));
				ИначеЕсли Стр.ПризнакКонтрВладелец = 1 Тогда // нет контрагента
					НовыеКонтрагенты = НовыеКонтрагенты + "," + СокрЛП(Сред(Стр.КодКонтрагента,2));
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;			
			// ***********************************************************************	
			// 1) Запрос к sql-базе для заполнения инфоДанных по контрагентам
			СписокКолонокДанныхКОнтрагентов = "userId, ИНН, КПП, Name, userComment, jurPerson, Email, ОКПО";		
			Если ЗначениеЗаполнено(НовыеКонтрагенты) Тогда
				RS = Евген.ЗапросКИнтернетМагазину("
				|SELECT
				|	C.userId,
				|	C.INN AS ИНН,
				|	C.KPP AS КПП,
				|	ISNULL(C.firstName, '') + ISNULL(' ' + C.middleName, '') + ISNULL(' ' + C.lastName, '') AS Name,
				|	C.comment   AS userComment,
				|	C.JurPerson   AS jurPerson,
				|	C.Email     AS Email,
				|	C.OKPO AS ОКПО,
				|	C.jurAddress AS ЮридическийАдрес,
				|	C.BIK AS БИК,
				|	C.RS AS НомерРасчетногоСчета		
				|FROM
				| 	_user C (NOLOCK)
				//|	_user C (NOLOCK)
				|WHERE
				|	C.userId IN "+"("+Сред(НовыеКонтрагенты,2)+")"+"
				//|GROUP BY
				//|	C.userId
				//|	C.INN
				|",Подключение);
				ДанныеНовыхКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
				RS=0;
				
				// 2) Создание, перезапись контрг.
				Если ДанныеНовыхКонтрагентов.Количество() > 0 Тогда
					
					РодительКонтрагентов = РодКонтр;
					
					
					Для Каждого Контр Из ДанныеНовыхКонтрагентов Цикл 
						
						КодКонтрагента = ПрефиксКодовКонтрагентов + ЧислоКСтрокеБезПробелов(Число(Контр.userId));
						//+++ БАО 30.05.2017 №926
						
						//НовыйКА = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
						
						НайденнаяСтрокаСписокСсылокНаКонтрагента = СписокСсылокНаКонтрагента.Получить(КодКонтрагента);
						
						Если   НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда
							НовыйКА = Справочники.Контрагенты.ПустаяСсылка();
						Иначе 
							НовыйКА = НайденнаяСтрокаСписокСсылокНаКонтрагента.Ссылка;
						КонецЕсли;	
							
						
						//--- БАО 30.05.2017 №926
						
						//флНовыйКонтрагент = НовыйКА = Неопределено;
						Если ЗначениеЗаполнено(НовыйКа) Тогда
							//Если флНовыйКонтрагент Тогда
							НовыйКА = НовыйКА.ПолучитьОбъект();
							флНовыйКонтрагент = Ложь;
						Иначе
							НовыйКА = Справочники.Контрагенты.СоздатьЭлемент();
							флНовыйКонтрагент = Истина;
						КонецЕсли;
						
						//Адрес = СокрЛП(УбратьНепечатныеСимволы(Контр.ЮридическийАдрес));
						ИНН = ОставитьТолькоЦифры(Контр.ИНН);
						Если СтрДлина(ИНН) > 7 Тогда
							НовыйКА.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ЮрЛицо;
							НовыйКА.ИНН = Лев(Контр.ИНН, 12);
							НовыйКА.КПП = Контр.КПП;
						Иначе
							НовыйКА.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ФизЛицо;
						КонецЕсли;
						НовыйКА.Наименование           = Контр.Name;
						НовыйКА.Код                    = КодКонтрагента;
						//НовыйКА.НаименованиеПолное     = Контр.Наименование;
						//НовыйКА.КодПоОКПО              = Контр.ОКПО;
						НовыйКА.Родитель               = РодительКонтрагентов;
						//НовыйКА.ДополнительноеОписание = Адрес;
						
						НовыйКА.jurPerson = Контр.jurPerson;
						НовыйКА.Покупатель             = Истина;
						Попытка
							НовыйКА.Записать();
							//ЗаписатьЛогОшибки(3, ?(флНовыйКонтрагент, "+++ Записан новый", "*** Перезаписан")+" контрагент "+НовыйКА+", ИНН: "+Контр.ИНН); 
							Лог(?(флНовыйКонтрагент, "+++ Записан новый", "*** Перезаписан")+" контрагент "+НовыйКА+", ИНН: "+Контр.ИНН);
							
							//+++ БАО 31.05.2017 №926
							
							ОсновнойДоговорКонтрагента = ПодготовитьДоговор(НовыйКА.Ссылка);
							
							Если флНовыйКонтрагент Тогда
								СписокСсылокНаКонтрагента.Вставить(Выборка.Код, Новый Структура("Ссылка, ОсновнойДоговорКонтрагента, ВидДоговора, ДоговорСПокупателем", НовыйКА.Ссылка, ОсновнойДоговорКонтрагента, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ,ОсновнойДоговорКонтрагента));									
							КонецЕсли;	
							//--- БАО 31.05.2017 №926	
							
						Исключение
							НормальныйХодВыполнения = Ложь;
							//ЗаписатьЛогОшибки(3, "!!!Ошибка записи нового контрагента: "+Контр.Name+", ИНН: "+Контр.ИНН+Символы.ПС+ОписаниеОшибки());
							Лог("!!!Ошибка записи нового контрагента: "+Контр.Name+", ИНН: "+Контр.ИНН+Символы.ПС+ОписаниеОшибки());
							Продолжить;
						КонецПопытки;
						
						//+++ БАО 27.06.2017 №1192
						ДобавитьВХранилищеОбъектовСравнения(НовыйКА.Ссылка);
						//--- БАО 27.06.2017 №1192
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			//***********************************************************************			
			////// 1) Запрос к sql на получение данных для заполнения инфо по контрагентам-Магазинам-владельцам
			////// 2) Создание, перезапись магазинов.
			Если ЗначениеЗаполнено(НовыеМагазины) Тогда
				pkv.ЗагрузкаИОбновлениеМагазинов();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	////--- Костя ///////////////// Конец загрузки КОНТРАГЕНТОВ /////////////////////////////////
	#КонецОбласти
	
	//+++ БАО 01.06.2017 №926
	ЗапросПоКонтрагентам = Новый Запрос;
	ЗапросПоКонтрагентам.Текст = "ВЫБРАТЬ
	                             |	новаСоответствиеКонтрагентов.новаКонтрагент КАК ОбъектУТЛ_Контрагент,
	                             |	новаСоответствиеКонтрагентов.Контрагент КАК Контрагент
	                             |ИЗ
	                             |	РегистрСведений.новаСоответствиеКонтрагентов КАК новаСоответствиеКонтрагентов
	                             |ГДЕ
	                             |	новаСоответствиеКонтрагентов.Контрагент В(&МассивКонтрагентов)";
	
	МассивКонтрагентов = Новый Массив;
	СписокОбъектУТЛ_Контрагент = Новый Соответствие;
	
	Если СписокЗаказов.Количество() >  0 Тогда
		
		Для Каждого СтрокаКонтрагент Из СписокСсылокНаКонтрагента Цикл 
			
			МассивКонтрагентов.Добавить(СтрокаКонтрагент.Значение.Ссылка);
			
		КонецЦикла;	
		
		ЗапросПоКонтрагентам.УстановитьПараметр("МассивКонтрагентов",МассивКонтрагентов);
		
		ВыборкаКонтрагентов = ЗапросПоКонтрагентам.Выполнить().Выбрать();
		
		Пока ВыборкаКонтрагентов.Следующий() Цикл 
			
			СписокОбъектУТЛ_Контрагент.Вставить(ВыборкаКонтрагентов.Контрагент, ВыборкаКонтрагентов.ОбъектУТЛ_Контрагент);
			
		КонецЦикла;	
		
	КонецЕсли;
		
	//--- БАО 01.06.2017 №926
	
	//+++ Костя 140915  //Запрос на поиск документов по номеру заказа
	#Область ПоискДокументовПоНомеруЗаказа
	
	ЗапросПоПоискуДокументов = Новый Запрос;
	ЗапросПоПоискуДокументов.УстановитьПараметр("ТаблицаЗаказы", ТЗ1);
	ЗапросПоПоискуДокументов.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросПоПоискуДокументов.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаЗаказы.Номер КАК СТРОКА(11)) КАК НомерЗаказа
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&ТаблицаЗаказы КАК ТаблицаЗаказы
	//+++ БАО 30.05.2017 №926
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаказа;
	//--- БАО 30.05.2017 №926
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаб.НомерЗаказа КАК НомерЗаказа,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(11)) КАК Номер,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Поступление,
	|	ПеремещениеТоваров.Ссылка КАК Перемещение,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат
	|ИЗ
	|	ВремТаб КАК ВремТаб
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ВремТаб.НомерЗаказа = ПоступлениеТоваровУслуг.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ВремТаб.НомерЗаказа = ПеремещениеТоваров.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ВремТаб.НомерЗаказа = ВозвратТоваровОтПокупателя.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВремТаб.НомерЗаказа = РеализацияТоваровУслуг.Номер";
	ДокументыПоЗаказу = ЗапросПоПоискуДокументов.Выполнить().Выгрузить();
	
	//+++ БАО 01.06.2017 №926
	//Пробуем добавить индекс при большом количестве документов
	Если ДокументыПоЗаказу.Количество() > 100 Тогда
		ДокументыПоЗаказу.Индексы.Добавить("НомерЗаказа");
	КонецЕсли;	
	//--- БАО 01.06.2017 №926
	
	#Конецобласти
	//--- Костя 140915
	
	ТоварRestore = Неопределено;//Бухаров
	
	МассивОбновленияОбъектовУТЛ = Новый Массив;
	//херим нова
	//УдалительИзРейсов = Обработки.новаИсточникМаршрутРейса.Создать();
	флСообщеноОбОтменеОбновленияДаты = Ложь;
	ДатаЗапрета = Дата(1, 1, 1);
	ГраницаЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	Если ГраницаЗапрета <> Неопределено Тогда
		ОбщаяДатаЗапрета = ГраницаЗапрета["ОбщаяДатаЗапретаРедактирования"];    
		Если ОбщаяДатаЗапрета <> Неопределено Тогда
			ДатаЗапрета = ОбщаяДатаЗапрета;			
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентДПД.Контрагент КАК КонтрагентДПД,
	               |	КонтрагентПитер.Контрагент КАК КонтрагентПитер,
	               |	ZStore.Ссылка КАК ZStore,
	               |	НашаОрганизация.Ссылка КАК НашаОрганизация,
	               |	СкладХраниения.Ссылка КАК СкладХраниения,
	               |	СкладРеализацииПоКомиссии.Ссылка КАК СкладРеализацииПоКомиссии,
	               |	СкладРеализацииПоДоставке.Ссылка КАК СкладРеализацииПоДоставке,
	               |	СкладРеализацииПоКомиссии.Ссылка КАК СкладРеализации,
	               |	СкладПитер.Ссылка КАК СкладПитер,
	               |	НашСчет.Ссылка КАК НашСчет,
	               |	РозничныйТипЦен.Ссылка КАК РозничныйТипЦен,
	               |	Рубли.Ссылка КАК Рубли,
	               |	ТочкаДПД.Ссылка КАК ТочкаДПД,
	               |	ТочкаПитер.Ссылка КАК ТочкаПитер,
	               |	ТочкаДПД.Адрес КАК ТочкаДПД_Адрес,
	               |	ТочкаПитер.Адрес КАК ТочкаПитер_Адрес
	               |ИЗ
	               |	РегистрСведений.новаСоответствиеКонтрагентов КАК КонтрагентДПД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаСоответствиеКонтрагентов КАК КонтрагентПитер
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТочкиДоставки КАК ТочкаПитер
	               |			ПО КонтрагентПитер.новаКонтрагент = ТочкаПитер.ВладелецТочки
	               |				И (ТочкаПитер.ПометкаУдаления = ЛОЖЬ)
	               |		ПО (КонтрагентПитер.Контрагент.Код = ""000000007"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ZStore
	               |		ПО (ZStore.Код = ""Shop_167"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК НашаОрганизация
	               |		ПО (НашаОрганизация.Код = ""000000001"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладХраниения
	               |		ПО (СкладХраниения.Код = ""000000001"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладРеализацииПоКомиссии
	               |		ПО (СкладРеализацииПоКомиссии.Код = ""000000003"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладРеализацииПоДоставке
	               |		ПО (СкладРеализацииПоДоставке.Код = ""000000004"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладПитер
	               |		ПО (СкладПитер.Код = ""000000006"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК НашСчет
	               |		ПО (НашСчет.Код = ""000000001"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК РозничныйТипЦен
	               |		ПО (РозничныйТипЦен.Код = ""000000001"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Рубли
	               |		ПО (Рубли.Код = ""643"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТочкиДоставки КАК ТочкаДПД
	               |		ПО (ТочкаДПД.ПометкаУдаления = ЛОЖЬ)
	               |			И КонтрагентДПД.новаКонтрагент = ТочкаДПД.ВладелецТочки
	               |ГДЕ
	               |	КонтрагентДПД.Контрагент.Код = ""000000006""";
	
	//+++ БАО 31.05.2017 №926
	
	//ZStore = Справочники.Контрагенты.НайтиПоКоду("Shop_167");//Бухаров
	//НашаОрганизация = Справочники.Организации.НайтиПоКоду("000000001"); //МС Логистик
	//СкладХраниения = Справочники.Склады.НайтиПоКоду("000000001");
	//СкладРеализацииПоКомиссии = Справочники.Склады.НайтиПоКоду("000000003");
	//СкладРеализацииПоДоставке = Справочники.Склады.НайтиПоКоду("000000004");
	//СкладРеализации = СкладРеализацииПоКомиссии; // Сейчас это не комиссия, а просто склад сборки
	//СкладПитер = Справочники.Склады.НайтиПоКоду("000000006");
	//НашСчет = Справочники.БанковскиеСчета.НайтиПоКоду("000000001");  //Альфа Банк
	//РозничныйТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"); //РознЦена
	//Рубли = Справочники.Валюты.НайтиПоКоду("643");
	//КонтрагентДПД = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Справочники.Контрагенты.НайтиПоКоду("000000006"));
	//ТочкаДПД = НайтиСпецТочку(КонтрагентДПД);
	//КонтрагентПитер = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Справочники.Контрагенты.НайтиПоКоду("000000007"));
	//ТочкаПитер = НайтиСпецТочку(КонтрагентПитер);
	
	ZStore                     = Неопределено;
	НашаОрганизация           = Неопределено;
	СкладХраниения            = Неопределено;
	СкладРеализацииПоКомиссии = Неопределено;
	СкладРеализацииПоДоставке = Неопределено;
	СкладРеализации           = Неопределено;
	СкладПитер                = Неопределено;
	НашСчет                   = Неопределено;
	РозничныйТипЦен           = Неопределено;
	Рубли                     = Неопределено;
	КонтрагентДПД             = Неопределено;
	ТочкаДПД                  = Неопределено;
	ТочкаДПД_Адрес            = Неопределено;				
	КонтрагентПитер           = Неопределено;
	ТочкаПитер                = Неопределено;
	ТочкаПитер_Адрес          = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ZStore                    = Выборка.ZStore ;
		НашаОрганизация           = Выборка.НашаОрганизация;
		СкладХраниения            = Выборка.СкладХраниения;
		СкладРеализацииПоКомиссии = Выборка.СкладРеализацииПоКомиссии;
		СкладРеализацииПоДоставке = Выборка.СкладРеализацииПоДоставке;
		СкладРеализации           = Выборка.СкладРеализации;
		СкладПитер                = Выборка.СкладПитер;
		НашСчет                   = Выборка.НашСчет;
		РозничныйТипЦен           = Выборка.РозничныйТипЦен;
		Рубли                     = Выборка.Рубли;
		КонтрагентДПД             = Выборка.КонтрагентДПД;
		ТочкаДПД                  = Выборка.ТочкаДПД;
		КонтрагентПитер           = Выборка.КонтрагентПитер;
		ТочкаПитер                = Выборка.ТочкаПитер;
		ТочкаДПД_Адрес            = Выборка.ТочкаДПД_Адрес;
		ТочкаПитер_Адрес          = Выборка.ТочкаПитер_Адрес;
	
	КонецЕсли;	

	
	//--- БАО 31.05.2017 №926
	
	Если Не ЗначениеЗаполнено(КонтрагентДПД) Или Не ЗначениеЗаполнено(ТочкаДПД) Тогда
		//Лог("!!! Ошибка. Не найден служебный контрагент DPD. Загрузка прервана.");
		//НормальныйХодВыполнения = Ложь;
		//флОбновлятьДатуПоследнейЗагрузки = Ложь;
		//Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(КонтрагентПитер) Или Не ЗначениеЗаполнено(ТочкаПитер) Тогда
		//Лог("!!! Ошибка. Не найден служебный контрагент для доставки в Питер. Загрузка прервана.");
		//НормальныйХодВыполнения = Ложь;
		//флОбновлятьДатуПоследнейЗагрузки = Ложь;
		//Возврат;
	КонецЕсли;
	
	КоличествоЗаказов = СписокЗаказов.Количество();
	Лог("К обработке " + СписокЗаказов.Количество() + " заказов");
	Если ЗначениеЗаполнено(ГраницаЗаказов) Тогда
		Лог("   Текущая граница заказов: " + ГраницаЗаказов);
	КонецЕсли;
	
	Счетчик = 0;
	ТекПроц = -1;
	сч = 0;
	флПропускатьЗагрузку = Ложь;
	Н = 0;
	
	//нахер нова
	//ФормаПоискаАдреса = Обработки.новаПоискАдреса.ПолучитьФорму();
	//нахер нова
	
	Попытка
		ОбъектПоискаАдреса = Обработки.новаПоискАдреса.Создать();
	исключение
		lem.ОтправитьНормальноеСообщениеАдминам("новаПоискАдреса", ОписаниеОшибки());	
	КонецПопытки;
	МассивЗагруженныхНомеровЗаказов = Новый Массив;
	
	#Область ИнициализацияОбщихСтрукту
	
	//+++ БАО 31.05.2017 №926
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(4);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Число",     , , , );  
	ТЗ_КодыТарифов      = Новый ТаблицаЗначений;
	ТЗ_КодыТарифов.Колонки.Добавить("Код",                  ОписаниеТиповСтрока);
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(11);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки);  
	ТЗ_РасчетныйБрейк   = Новый ТаблицаЗначений;
	ТЗ_РасчетныйБрейк.Колонки.Добавить("КодРасчетныйБрейк", ОписаниеТиповСтрока); 

	МассивКодовТранспортныеКомпании = Новый Массив;
	
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(9);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки);  
	ТЗ_МагазиновИТарифныеСетки   = Новый ТаблицаЗначений;
	ТЗ_МагазиновИТарифныеСетки.Колонки.Добавить("КодМагазина", ОписаниеТиповСтрока); 
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(11);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки);  
	ТЗ_МагазиновИТарифныеСетки.Колонки.Добавить("КодТарифныеСетки", ОписаниеТиповСтрока); 
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(150);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки);  
	ТЗ_МагазиновИТарифныеСетки.Колонки.Добавить("Адрес", ОписаниеТиповСтрока); 
	ТЗ_МагазиновИТарифныеСетки.Колонки.Добавить("АдресНеНайден", ОписаниеТиповСтрока); 
	
	МассивКодовОсновнойМагазин   = Новый Массив;
	МассивКодовТерминалПриемки   = Новый Массив;
	МассивКодовТерминалДоставки  = Новый Массив;
	МассивКодовЗаказов           = Новый Массив;
	МассивКодовКатегорияДоставки = Новый Массив;
	МассивСтатусЗаказа           = Новый Массив;
	МассивГосНомеров             = Новый Массив;
	МассивИнтернетМагазинЯндекса = Новый Массив;
	МассивНоменклатура           = Новый Массив;
	МассивСкладМагазина          = Новый Массив;
	МассивСтавкаНДС              = Новый Массив;
	
	Сч = 0;
	
	Для Каждого Заказ Из СписокЗаказов Цикл
		
		
		НоваяСтрока                   = ТЗ_КодыТарифов.Добавить();
		НоваяСтрока.Код               = Заказ.tariffType_Ч;      
		
		
		
		НоваяСтрока                   = ТЗ_РасчетныйБрейк.Добавить();
		НоваяСтрока.КодРасчетныйБрейк = Заказ.tariffCategoryId_Ч;
		
		МассивКодовТранспортныеКомпании.Добавить(Заказ.servicedelivery_Ч);
		
		Адрес = Заказ.Addr;
		Если Лев(Адрес, 11) = "Москва и МО" Тогда
			Адрес = СокрЛ(Сред(Адрес, 12));
		КонецЕсли;
		
		Если Лев(Адрес, 10) = "Москва г. " Тогда
			Адрес = "Москва, " + Сред(Адрес, 11);
		КонецЕсли;
		ЧВ = СтрЧислоВхождений(Адрес, "Москва");
		
		Если ЧВ >= 2 Тогда //   Или ЧВ = 0
			Адрес = СтрЗаменить(Адрес, "Москва", "");
			Адрес = "Москва, " + Адрес;
		КонецеСли;	
		
		Адрес = СокрП(Лев(Адрес, 150));
		АдресНеНайден = "<не найден> " + Адрес;
		
		НоваяСтрока                  = ТЗ_МагазиновИТарифныеСетки.Добавить();
		НоваяСтрока.КодМагазина      = ПреобразоватьКодМагазина(Заказ.shop_Ч);
		НоваяСтрока.КодТарифныеСетки = Формат(Заказ.tariffID_Ч, "ЧГ=");
		НоваяСтрока.Адрес            = Адрес;
		НоваяСтрока.АдресНеНайден    = АдресНеНайден;
		
   		МассивКодовОсновнойМагазин.Добавить(ПреобразоватьКодМагазина(Заказ.ParentID_Ч));
		
		МассивКодовТерминалПриемки.Добавить(Заказ.sourcePlaceId_Ч);
		МассивКодовТерминалДоставки.Добавить(Заказ.deliveryPlaceId_Ч);
		МассивКодовЗаказов.Добавить(ЧислоКСтрокеБезПробелов(Заказ.orderId_Ч));
		
		МассивКодовКатегорияДоставки.Добавить(Формат(Заказ.typeDelivery_Ч, "ЧГ="));
		МассивСтатусЗаказа.Добавить(Формат(Заказ.status_Ч, "ЧГ="));
		МассивГосНомеров.Добавить(СокрЛП(Заказ.carNumber));
		
		МассивИнтернетМагазинЯндекса.Добавить("248_"+?(Заказ.senderId=NULL,0,Заказ.senderId)); 
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнаяЧастьЗаказов из ТабличнаяЧастьЗаказов Цикл 
	
		МассивНоменклатура.Добавить(ЧислоКСтрокеБезПробелов(СтрокаТабличнаяЧастьЗаказов.skuId_Ч));
		МассивСкладМагазина.Добавить(СтрокаТабличнаяЧастьЗаказов.stockId_Ч);    
		МассивСтавкаНДС.Добавить(СтрокаТабличнаяЧастьЗаказов.NDS_Ч)
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ_КодыТарифов.Код КАК КодТарифа
	               |ПОМЕСТИТЬ ВТ_КодыТарифов
	               |ИЗ
	               |	&ТЗ_КодыТарифов КАК ТЗ_КодыТарифов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КодТарифа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_РасчетныйБрейк.КодРасчетныйБрейк КАК КодРасчетногоБрейка
	               |ПОМЕСТИТЬ ВТ_КодыРасчетныйБрейк
	               |ИЗ
	               |	&ТЗ_РасчетныйБрейк КАК ТЗ_РасчетныйБрейк
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КодРасчетногоБрейка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_МагазиновИТарифныеСетки.КодМагазина КАК КодМагазина,
	               |	ТЗ_МагазиновИТарифныеСетки.КодТарифныеСетки КАК КодТарифныеСетки,
	               |	ТЗ_МагазиновИТарифныеСетки.АдресНеНайден КАК АдресНеНайден,
	               |	ТЗ_МагазиновИТарифныеСетки.Адрес КАК Адрес
	               |ПОМЕСТИТЬ ВТ_МагазиныИТарифныеСетки
	               |ИЗ
	               |	&ТЗ_МагазиновИТарифныеСетки КАК ТЗ_МагазиновИТарифныеСетки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Адрес,
	               |	АдресНеНайден,
	               |	КодТарифныеСетки,
	               |	КодМагазина
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ТипыТарифов.Ссылка, ЗНАЧЕНИЕ(Справочник.ТипыТарифов.ОсновнаяТарифнаяСетка)) КАК ТипТарифа,
	               |	ВТ_КодыТарифов.КодТарифа КАК КодТарифа,
	               |	ЕСТЬNULL(РасчетныеБрейки.Ссылка, ЗНАЧЕНИЕ(Справочник.РасчетныеБрейки.ПустаяСсылка)) КАК РасчетныйБрейк,
	               |	ВТ_КодыРасчетныйБрейк.КодРасчетногоБрейка КАК КодРасчетногоБрейка
	               |ИЗ
	               |	ВТ_КодыТарифов КАК ВТ_КодыТарифов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыТарифов КАК ТипыТарифов
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РасчетныеБрейки КАК РасчетныеБрейки
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КодыРасчетныйБрейк КАК ВТ_КодыРасчетныйБрейк
	               |				ПО РасчетныеБрейки.Код = ВТ_КодыРасчетныйБрейк.КодРасчетногоБрейка
	               |			ПО ТипыТарифов.Ссылка = РасчетныеБрейки.Владелец
	               |		ПО ВТ_КодыТарифов.КодТарифа = ТипыТарифов.Код
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТранспортныеКомпании.Ссылка КАК ТранспортныеКомпании,
	               |	ТранспортныеКомпании.Код КАК КодТранспортныеКомпании
	               |ИЗ
	               |	Справочник.ТранспортныеКомпании КАК ТранспортныеКомпании
	               |ГДЕ
	               |	ТранспортныеКомпании.Код В(&МассивКодовТранспортныеКомпании)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МагазинСпр.Ссылка КАК Магазин,
	               |	ВТ_МагазиныИТарифныеСетки.КодМагазина КАК КодМагазина,
	               |	МагазинСпр.Автопоступление КАК Автопоступление,
	               |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКомитента,
	               |	ТарифныеСетки.Ссылка КАК ТарифнаяСетка,
	               |	новаТочкиДоставки.Ссылка КАК ТочкиДоставки,
	               |	новаАдреса.Ссылка КАК ссылкаАдрес,
	               |	МагазинСпр.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчет,
	               |	СкладыМагазиновПоУмолчанию.СкладМагазина.Код КАК КодСкладМагазинаПоУмолчанию,
	               |	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
	               |	СкладыМагазиновПоУмолчанию.СкладМагазина КАК СкладМагазинаПоУмолчанию,
	               |	ВТ_МагазиныИТарифныеСетки.Адрес КАК Адрес
	               |ИЗ
	               |	ВТ_МагазиныИТарифныеСетки КАК ВТ_МагазиныИТарифныеСетки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК МагазинСпр
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |			ПО МагазинСпр.Ссылка = ДоговорыКонтрагентов.Владелец
	               |				И (ДоговорыКонтрагентов.Наименование = ""Комиссионная торговля"")
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкладыМагазиновПоУмолчанию КАК СкладыМагазиновПоУмолчанию
	               |			ПО МагазинСпр.Ссылка = СкладыМагазиновПоУмолчанию.Магазин
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
	               |			ПО МагазинСпр.Ссылка = ПараметрыКонтрагентовСрезПоследних.Контрагент
	               |		ПО ВТ_МагазиныИТарифныеСетки.КодМагазина = МагазинСпр.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифныеСетки КАК ТарифныеСетки
	               |		ПО ВТ_МагазиныИТарифныеСетки.КодМагазина = ТарифныеСетки.Владелец.Код
	               |			И ВТ_МагазиныИТарифныеСетки.КодТарифныеСетки = ТарифныеСетки.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТочкиДоставки КАК новаТочкиДоставки
	               |		ПО (ВТ_МагазиныИТарифныеСетки.Адрес = ПОДСТРОКА(новаТочкиДоставки.Наименование, 1, 150)
	               |				ИЛИ ВТ_МагазиныИТарифныеСетки.АдресНеНайден = ПОДСТРОКА(новаТочкиДоставки.Наименование, 1, 150))
	               |			И ВТ_МагазиныИТарифныеСетки.КодМагазина = новаТочкиДоставки.ВладелецТочки.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаАдреса КАК новаАдреса
	               |		ПО ВТ_МагазиныИТарифныеСетки.Адрес = новаАдреса.Наименование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Магазин,
	               |	ТочкиДоставки,
	               |	ссылкаАдрес
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Т_ОсновнойМагазин.Ссылка КАК ОсновнойМагазин,
	               |	Т_ОсновнойМагазин.Код КАК КодОсновнойМагазин,
	               |	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	               |	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
	               |	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
	               |	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
	               |	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
	               |	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
	               |	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
				   |	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
	               |	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
	               |	ВЫБОР
	               |		КОГДА ПараметрыКонтрагентовСрезПоследних.Период ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьПараметрыОсновногоМагазина
	               |ИЗ
	               |	Справочник.Контрагенты КАК Т_ОсновнойМагазин
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
	               |		ПО Т_ОсновнойМагазин.ОсновнойМагазин = ПараметрыКонтрагентовСрезПоследних.Контрагент
	               |ГДЕ
	               |	Т_ОсновнойМагазин.ОсновнойМагазин.Код В(&МассивКодовОсновнойМагазин)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Т_ОсновнойМагазин.Ссылка,
	               |	Т_ОсновнойМагазин.Код,
	               |	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа,
	               |	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты,
	               |	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара,
	               |	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа,
	               |	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента,
	               |	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма,
	               |	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
				   |	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка,
	               |	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов,
	               |	ВЫБОР
	               |		КОГДА ПараметрыКонтрагентовСрезПоследних.Период ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ
	               |ИЗ
	               |	Справочник.Контрагенты КАК Т_ОсновнойМагазин
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
	               |		ПО Т_ОсновнойМагазин.ОсновнойМагазин = ПараметрыКонтрагентовСрезПоследних.Контрагент
	               |ГДЕ
	               |	Т_ОсновнойМагазин.ОсновнойМагазин = &ИМ_TopDelivery
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТерминалПриемки.Ссылка КАК ТерминалПриемки,
	               |	ТерминалПриемки.Код КАК КодТерминалПриемки,
	               |	ТерминалПриемки.Склад КАК СкладТерминалПриемки
	               |ИЗ
	               |	Справочник.РегиональныеТерминалы КАК ТерминалПриемки
	               |ГДЕ
	               |	ТерминалПриемки.Код В(&МассивКодовТерминалПриемки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТерминалДоставки.Ссылка КАК ТерминалДоставки,
	               |	ТерминалДоставки.Код КАК КодТерминалДоставки,
	               |	ТерминалДоставки.Склад КАК СкладТерминалДоставки
	               |ИЗ
	               |	Справочник.РегиональныеТерминалы КАК ТерминалДоставки
	               |ГДЕ
	               |	ТерминалДоставки.Код В(&МассивКодовТерминалДоставки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	новаМестнаяДоставка.Ссылка КАК обМестнаяДоставка,
	               |	новаМестнаяДоставка.Груз КАК Груз,
	               |	новаМестнаяДоставка.Номер КАК Код,
	               |	новаМестнаяДоставка.Грузоотправитель.ТочкаДоставки КАК ТочкаОтправления,
	               |	новаМестнаяДоставка.ТочкаОтправления.ВремяПребывания КАК ВремяПребывания
	               |ИЗ
	               |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	               |ГДЕ
	               |	новаМестнаяДоставка.Номер В(&МассивКодовЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаборТовара.Ссылка КАК ЗаборТовара,
	               |	ЗаборТовара.Номер КАК Код
	               |ИЗ
	               |	Документ.ЗаборТовара КАК ЗаборТовара
	               |ГДЕ
	               |	ЗаборТовара.Номер В(&МассивКодовЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КатегорииДоставки2014.Ссылка КАК КатегорииДоставки,
	               |	КатегорииДоставки2014.Код КАК Код
	               |ИЗ
	               |	Справочник.КатегорииДоставки2014 КАК КатегорииДоставки2014
	               |ГДЕ
	               |	КатегорииДоставки2014.Категория В(&МассивКодовКатегорияДоставки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусЗаказаИнтернетМагазина.Ссылка КАК СтатусЗаказаИнтернетМагазина,
	               |	СтатусЗаказаИнтернетМагазина.Код КАК Код
	               |ИЗ
	               |	Справочник.СтатусЗаказаИнтернетМагазина КАК СтатусЗаказаИнтернетМагазина
	               |ГДЕ
	               |	СтатусЗаказаИнтернетМагазина.Код В(&МассивСтатусЗаказа)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	новаТранспорт.Ссылка КАК Транспорт,
	               |	новаТранспорт.НомерГосударственнойРегистрации КАК Код
	               |ИЗ
	               |	Справочник.новаТранспорт КАК новаТранспорт
	               |ГДЕ
	               |	новаТранспорт.НомерГосударственнойРегистрации В(&МассивГосНомеров)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Фрахт.Ссылка КАК Фрахт,
	               |	Фрахт.Номер КАК Код
	               |ИЗ
	               |	Документ.Фрахт КАК Фрахт
	               |ГДЕ
	               |	Фрахт.Номер В(&МассивКодовЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	новаГруз.Ссылка КАК Груз,
	               |	новаГруз.Номер КАК Код
	               |ИЗ
	               |	Документ.новаГруз КАК новаГруз
	               |ГДЕ
	               |	новаГруз.Номер В(&МассивКодовЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК ИнтернетМагазинЯндекса,
	               |	Контрагенты.Код КАК Код
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Код В(&МассивИнтернетМагазинЯндекса)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	Номенклатура.Код КАК Код,
	               |	Номенклатура.Артикул КАК Артикул,
	               |	Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	               |	Номенклатура.СтавкаНДС КАК НДСТовара
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Код В(&МассивНоменклатура)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СкладыМагазинов.Ссылка КАК СкладМагазина,
	               |	СкладыМагазинов.Код КАК Код
	               |ИЗ
	               |	Справочник.СкладыМагазинов КАК СкладыМагазинов
	               |ГДЕ
	               |	СкладыМагазинов.Код В(&МассивСкладМагазина)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтавкиНДСФЗ54.Ссылка КАК СтавкаНДС,
	               |	СтавкиНДСФЗ54.КодВАдминке КАК Код
	               |ИЗ
	               |	Справочник.СтавкиНДСФЗ54 КАК СтавкиНДСФЗ54";
	
	Запрос.УстановитьПараметр("ТЗ_КодыТарифов",                  ТЗ_КодыТарифов);
	Запрос.УстановитьПараметр("МассивКодовТранспортныеКомпании", МассивКодовТранспортныеКомпании);
	Запрос.УстановитьПараметр("ТЗ_МагазиновИТарифныеСетки",      ТЗ_МагазиновИТарифныеСетки);
	Запрос.УстановитьПараметр("МассивКодовОсновнойМагазин",      МассивКодовОсновнойМагазин);
	Запрос.УстановитьПараметр("МассивКодовТерминалПриемки",      МассивКодовТерминалПриемки);
	Запрос.УстановитьПараметр("МассивКодовТерминалДоставки",     МассивКодовТерминалДоставки);
	Запрос.УстановитьПараметр("МассивКодовЗаказов",              МассивКодовЗаказов);
	Запрос.УстановитьПараметр("МассивКодовКатегорияДоставки",    МассивКодовКатегорияДоставки);
	Запрос.УстановитьПараметр("МассивГосНомеров",                МассивГосНомеров);
	Запрос.УстановитьПараметр("МассивИнтернетМагазинЯндекса",    МассивИнтернетМагазинЯндекса);
	Запрос.УстановитьПараметр("МассивНоменклатура",              МассивНоменклатура);
	Запрос.УстановитьПараметр("МассивСкладМагазина",             МассивСкладМагазина);
	Запрос.УстановитьПараметр("МассивСтавкаНДС",                 МассивСтавкаНДС);
	Запрос.УстановитьПараметр("ТЗ_РасчетныйБрейк",               ТЗ_РасчетныйБрейк);
	Запрос.УстановитьПараметр("ИМ_TopDelivery",                  ИМ_TopDelivery);
	Запрос.УстановитьПараметр("МассивСтатусЗаказа",              МассивСтатусЗаказа);

	
	
	РезультатПакета = Запрос.ВыполнитьПакет();   
	
	//Список тарифов  
	СписокТипТарифа = Новый Соответствие;

	Выборка = РезультатПакета[3].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТипТарифа.Вставить((Выборка.КодТарифа), Новый Структура("ТипТарифа, РасчетныйБрейк", Выборка.ТипТарифа, Выборка.РасчетныйБрейк));
		
	КонецЦикла;
	
	//Транспортная компания
	СписокТранспортныеКомпании = Новый Соответствие;
	Выборка = РезультатПакета[4].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТранспортныеКомпании.Вставить(СокрП(Выборка.КодТранспортныеКомпании), Выборка.ТранспортныеКомпании);
		
	КонецЦикла;
	
	//СписокМагазинов
	
	//СписокМагазинов = Новый Соответствие;
	//Выборка = РезультатПакета[5].Выбрать();
	//
	//Пока Выборка.Следующий() Цикл 
	//	
	//	СписокМагазинов.Вставить(СокрП(Выборка.КодМагазина), Новый Структура("Магазин, Автопоступление, ДоговорКомитента, ТарифнаяСетка, ТочкиДоставки, ссылкаАдрес, ОсновнойБанковскийСчет, КодСкладМагазинаПоУмолчанию, ПредварительноеЗакрытиеЗаказов, СкладМагазинаПоУмолчанию", 
	//		Выборка.Магазин, Выборка.Автопоступление, Выборка.ДоговорКомитента, Выборка.ТарифнаяСетка, Выборка.ТочкиДоставки, Выборка.ссылкаАдрес, Выборка.ОсновнойБанковскийСчет, СокрП(Выборка.КодСкладМагазинаПоУмолчанию), Выборка.ПредварительноеЗакрытиеЗаказов, Выборка.СкладМагазинаПоУмолчанию));
	//	
	//КонецЦикла;
	
	СписокМагазинов = РезультатПакета[5].Выгрузить();
	Для Каждого СтрокаСписокМагазинов Из СписокМагазинов Цикл
		СтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию = СокрП(СтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию)
	КонецЦикла;	
	
	//СписокОсновнойМагазин
	СписокОсновнойМагазин = Новый Соответствие;
	Выборка = РезультатПакета[6].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокОсновнойМагазин.Вставить(СокрП(Выборка.КодОсновнойМагазин), Новый Структура("ОсновнойМагазин, ЗапретЧастичногоВыкупа, ЗапретСменыОплаты, ВремяОжиданияПриЗабореТовара,
		|ВычисляемыйЗапретЧастичногоВыкупа, ПриёмИтогоСКлиента, МетодОплатыПодъёма, ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной, ОперативнаяПриемка, ПредварительноеЗакрытиеЗаказов, ЕстьПараметрыОсновногоМагазина", 
		Выборка.ОсновнойМагазин,  Выборка.ЗапретЧастичногоВыкупа,  Выборка.ЗапретСменыОплаты,  Выборка.ВремяОжиданияПриЗабореТовара,  Выборка.ВычисляемыйЗапретЧастичногоВыкупа,  
		Выборка.ПриёмИтогоСКлиента,  Выборка.МетодОплатыПодъёма, Выборка.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной, Выборка.ОперативнаяПриемка, Выборка.ПредварительноеЗакрытиеЗаказов, Выборка.ЕстьПараметрыОсновногоМагазина));
		
	КонецЦикла;
	
	
	//ТерминалПриемки
	СписокТерминалПриемки = Новый Соответствие;
	Выборка = РезультатПакета[7].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТерминалПриемки.Вставить((Выборка.КодТерминалПриемки), Выборка.ТерминалПриемки);
		
	КонецЦикла;
	
	//ТерминалДоставки
	СписокТерминалДоставки = Новый Соответствие;
	Выборка = РезультатПакета[8].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТерминалДоставки.Вставить((Выборка.КодТерминалДоставки), Новый Структура("ТерминалДоставки, СкладТерминалДоставки", Выборка.ТерминалДоставки, Выборка.СкладТерминалДоставки));
		
	КонецЦикла;
	
	СписокБПноваМестнаяДоставка = Новый Соответствие;
	Выборка = РезультатПакета[9].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокБПноваМестнаяДоставка.Вставить(СокрП(Выборка.Код), Новый Структура("обМестнаяДоставка, Груз, ТочкаОтправления, ВремяПребывания", Выборка.обМестнаяДоставка, Выборка.Груз, Выборка.ТочкаОтправления, Выборка.ВремяПребывания));
		
	КонецЦикла;
	
	//ЗаборТовара
	СписокЗаборТовара = Новый Соответствие;
	Выборка = РезультатПакета[10].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокЗаборТовара.Вставить(СокрП(Выборка.Код), Выборка.ЗаборТовара);
		
	КонецЦикла;
	
	//КатегорияДоставки	
	СписокКатегорияДоставки = Новый Соответствие;
	Выборка = РезультатПакета[11].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокКатегорияДоставки.Вставить(СокрП(Выборка.Код), Выборка.КатегорияДоставки);
		
	КонецЦикла;
	
	//СтатусЗаказа
	СписокСтатусЗаказа = Новый Соответствие;
	Выборка = РезультатПакета[12].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокСтатусЗаказа.Вставить(СокрП(Выборка.Код), Выборка.СтатусЗаказаИнтернетМагазина);
		
	КонецЦикла;
	
	//Траспорт по гос. номерам
	
	СписокТранспортПоГосНомерам = Новый Соответствие;
	Выборка = РезультатПакета[13].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТранспортПоГосНомерам.Вставить(СокрП(Выборка.Код), Выборка.Транспорт);
		
	КонецЦикла;
	
	//Фрахт
	СписокФрахт = Новый Соответствие;
	Выборка = РезультатПакета[14].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокФрахт.Вставить(СокрП(Выборка.Код), Выборка.Фрахт);
		
	КонецЦикла;
	
	//Груз
	СписокГруз = Новый Соответствие;
	Выборка = РезультатПакета[15].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокГруз.Вставить(СокрП(Выборка.Код), Выборка.Груз);
		
	КонецЦикла;
	
	ОбъектУТЛ_Рубли = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Рубли);
	
	//ИнтернетМагазинЯндекса
	СписокИнтернетМагазинЯндекса = Новый Соответствие;
	Выборка = РезультатПакета[16].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокИнтернетМагазинЯндекса.Вставить(СокрП(Выборка.Код), Выборка.ИнтернетМагазинЯндекса);
		
	КонецЦикла;
	
	//СписокНоменклатура
	СписокНоменклатура = Новый Соответствие;
	Выборка = РезультатПакета[17].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокНоменклатура.Вставить(СокрП(Выборка.Код), Новый Структура("Номенклатура, Артикул, ЕдиницаХраненияОстатков, НДСТовара" ,Выборка.Номенклатура, Выборка.Артикул, Выборка.ЕдиницаХраненияОстатков, Выборка.НДСТовара));
		
	КонецЦикла;
	
	
	//СписокСкладМагазина
	СписокСкладМагазина = Новый Соответствие;
	Выборка = РезультатПакета[18].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокСкладМагазина.Вставить((Выборка.Код), Выборка.СкладМагазина);
		
	КонецЦикла;

	//СписокСтавкаНДС 
	СписокСтавкаНДС  = Новый Соответствие;
	Выборка = РезультатПакета[19].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокСтавкаНДС.Вставить(СокрП(Выборка.Код), Выборка.СтавкаНДС);
		
	КонецЦикла;
	
	
	//--- БАО 31.05.2017 №926
	
	#КонецОбласти

	Сч = 1;
	
	#Область ОбработкаЗаказов
	
	Для Каждого Заказ Из СписокЗаказов Цикл
		
		//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
		ЗаписьДополнительныеПараметрыЗаказа = Новый Структура;
		//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа

		
		
		//Если Заказ.status_Ч = 4 И Заказ.Shop_Ч = 592 Тогда
		//	Лог("---- !!!!!!!     : Заказ Axiomus-SPB   !!!!!!!!!!!!!!!: " + Строка(Заказ.orderId_Ч) + " - пропущен");
		//	Продолжить;	
		//КонецЕсли;
		
		//+++ Костя 140915 // Если дата доставки не указана - не загружать.
		Если Заказ.deliveryDate_Д = Null Тогда 
			Лог("---- ОШИБКА: Не указана дата доставки, заказ: " + Строка(Заказ.orderId_Ч) + " -не загружен.");
			//МассивЗагруженныхНомеровЗаказов.Добавить(ЧислоКСтрокеБезПробелов(Заказ.Номер));
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
			НайденныеСтрокиТЧ = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайСтрТЧ Из НайденныеСтрокиТЧ Цикл 
				н = н + 1;
			КонецЦикла;
			
			Счетчик = Счетчик + 1;
			
			Продолжить;
			
		КонецЕсли;
		//--- Костя
		
		НовыйОбъект = Ложь;
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ВозниклаОшибка               = Ложь;
		флРазрешеноОбновлениеЗаказа  = Истина;
		флЗаполнятьРеализацию        = Ложь;
		флНужноЗаписыватьДоставку    = Ложь;
		флНужноЗаписыватьГруз        = Ложь;
		флЗаполнятьВозвратПоставщику = Ложь;
		флЗаполнятьПоступление       = Ложь;
		флЗаполнятьВозврат           = Ложь;

		//+++ БАО 30.06.2017 №1222   
		
		Если ЕстьОтборы Тогда
			
			Обрабатывать = Ложь;
			
			Если ОбрабатыватьЗаказы И  Заказ.selfDelivery_Ч = 0 Тогда
				
				Обрабатывать = Истина;
				
			КонецЕсли;	
								
			Если ОбрабатыватьЗаборы И  Заказ.selfDelivery_Ч = 2 Тогда
				
				Обрабатывать = Истина;
				
			КонецЕсли;	
			
			Если ОбрабатыватьФрахт И  Заказ.selfDelivery_Ч = 3 Тогда
				
				Обрабатывать = Истина;
				
			КонецЕсли;	
			
			Если Не Обрабатывать Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
				НайденныеСтрокиТЧ = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайСтрТЧ Из НайденныеСтрокиТЧ Цикл 
					СчетчикСтрокЗаказа = СчетчикСтрокЗаказа + 1;
				КонецЦикла;
				
				Счетчик = Счетчик + 1;
				
				Продолжить;
				
			КонецЕсли;	

			Если СтатусЗаказаОтменен И  Заказ.status_Ч <> 4 Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
				НайденныеСтрокиТЧ = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайСтрТЧ Из НайденныеСтрокиТЧ Цикл 
					СчетчикСтрокЗаказа = СчетчикСтрокЗаказа + 1;
				КонецЦикла;
				
				Счетчик = Счетчик + 1;
				
				Продолжить;
				
			КонецЕсли;	
					
		КонецЕсли;	

		
		Если (РежимСравнения) И Не (сч >= ПорцияС и сч <= ПорцияДо) Тогда
			
			Продолжить;			
			
		КонецЕсли;	
		
		//--- БАО 30.06.2017 №1222  
		
		Если Не Заказ.deliveryDate_Д = Null Тогда
			Если Заказ.deliveryDate_Д < '20000101' Тогда
				Заказ.deliveryDate_Д = Null;
			КонецЕсли;
		КонецЕсли;
		
		Если Заказ.completeDate_Д < '20000101' Тогда
			Заказ.completeDate_Д = ?(Заказ.deliveryDate_Д = Null, Заказ.createDate_Д, Заказ.deliveryDate_Д);
		КонецЕсли;
		
		СтатусЗаказа            = Заказ.status_Ч;
		НомерЗаказа             = Заказ.orderId_Ч;
		стрНомерЗаказа          = ЧислоКСтрокеБезПробелов(НомерЗаказа);
		ДатаСозданияЗаказа      = Заказ.createDate_Д;
		СтоимостьДоставки       = Заказ.deliveryPrice_Ч + Заказ.deliveryForMkadRUR_Ч;
		СтоимостьДоставкиДоМкад = Заказ.deliveryPrice_Ч;
		СтоимостьДоставкиЗаМкад = Заказ.deliveryForMkadRUR_Ч;
		ДатаЗакрытияЗаказа      = Заказ.completeDate_Д;
		БанковскаяКомиссия      = Заказ.BankKom_Ч;
		//Бухаров
		НомерВнешнегоЗаказа     = Заказ.orderIDImport;
		ТипОплаты               = Заказ.pay_type_Ч;
		КатегорияДоставки       = Заказ.typeDelivery_Ч;
		ОбщийВесЗаказа          = Заказ.OrderWeight_Ч;
		ЧистыеСД                = Заказ.serviceDCclean_Ч;
		
		КоличествоМестЗ         = Заказ.PiecesOfFreight_Ч;
		ОбъёмЗ                  = Заказ.orderVolume_Ч;
		ДатаПриемки             = Заказ.shipmentWHDate_Д;
		ТерминалПриемкиКод      = Заказ.sourcePlaceId_Ч;
		ТерминалДоставкиКод     = Заказ.deliveryPlaceId_Ч;
		
		//+++ БАО 31.05.2017 №926
		//ТерминалПриемки       = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТерминалПриемкиКод);
		//ТерминалДоставки      = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТерминалДоставкиКод);
		
		//Если ЗначениеЗаполнено(ТерминалДоставки) Тогда
		//	Если Не ТерминалДоставки.Склад.Пустая() Тогда
		//		СкладХраниения = ТерминалДоставки.Склад.Ссылка;
		//	КонецеСли;
		//КонецеСли;	

		ТерминалПриемки         = СписокТерминалПриемки.Получить(ТерминалПриемкиКод);
		
		НайденнаяСтрокаТерминалДоставки        = СписокТерминалДоставки.Получить(ТерминалДоставкиКод);
		Если НайденнаяСтрокаТерминалДоставки <> Неопределено Тогда
			ТерминалДоставки = НайденнаяСтрокаТерминалДоставки.ТерминалДоставки;
			СкладТерминалДоставки = НайденнаяСтрокаТерминалДоставки.СкладТерминалДоставки;
		Иначе
			ТерминалДоставки = Справочники.РегиональныеТерминалы.ПустаяСсылка();
			СкладТерминалДоставки = СкладХраниения;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТерминалДоставки) Тогда
			Если Не СкладТерминалДоставки.Пустая() Тогда
				СкладХраниения = СкладТерминалДоставки;
			КонецеСли;
		КонецеСли;	
				
		//--- БАО 31.05.2017 №926
		
		//+++ Костя 040915
		//МетодСозданияЗаказа
		Если Заказ.CreateWay_Ч > 0 Тогда
			КодМетодСозданияЗаказа = Заказ.CreateWay_Ч;
			Если 	  КодМетодСозданияЗаказа = 1 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_MMC;
			ИначеЕсли КодМетодСозданияЗаказа = 2 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Strizh;
			ИначеЕсли КодМетодСозданияЗаказа = 3 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Yandex;
			ИначеЕсли КодМетодСозданияЗаказа = 4 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.XLS;
			ИначеЕсли КодМетодСозданияЗаказа = 5 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.WEB_Интерфейс;
			ИначеЕсли КодМетодСозданияЗаказа = 6 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.Email_1C;
			ИначеЕсли КодМетодСозданияЗаказа = 7 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_MMCv2;
			ИначеЕсли КодМетодСозданияЗаказа = 8 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Strizh_Ext;	
			ИначеЕсли КодМетодСозданияЗаказа = 9 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.OZONE;				
			ИначеЕсли КодМетодСозданияЗаказа = 10 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.Copy;				
				
			Иначе 
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.ПустаяСсылка();
			КонецЕсли;
		Иначе 
			МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.ПустаяСсылка();
		КонецЕсли;
		//--- Костя 040915
		
		ТипТарифаЧ      = Заказ.tariffType_Ч;
		РасчетныйБрейкЧ = Заказ.tariffCategoryId_Ч;
		
		ТарифЧ          = Заказ.tariffID_Ч;

		//+++ БАО 31.05.2017 №926
		
		//ТипТарифа = Справочники.ТипыТарифов.НайтиПоКоду(ТипТарифаЧ);
		//Если ТипТарифа.Пустая() Тогда
		//	ТипТарифа = Справочники.ТипыТарифов.ОсновнаяТарифнаяСетка;
		//КонецЕСли;	
		//
		//ЗапБр = Новый Запрос;
		//ЗапБр.Текст = "ВЫБРАТЬ
		//|	РасчетныеБрейки.Ссылка КАК РасчетныйБрейк
		//|ИЗ
		//|	Справочник.РасчетныеБрейки КАК РасчетныеБрейки
		//|ГДЕ
		//|	РасчетныеБрейки.КодБрейка = &КодБрейка
		//|	И РасчетныеБрейки.Владелец.Ссылка = &Владелец";
		//ЗапБр.УстановитьПараметр("КодБрейка", РасчетныйБрейкЧ);			  
		//ЗапБр.УстановитьПараметр("Владелец", ТипТарифа);			  
		//
		//РезБр = ЗапБр.Выполнить();
		//
		//Если РезБр.Пустой() Тогда
		//	РасчетныйБрейк = Справочники.РасчетныеБрейки.ПустаяСсылка();
		//Иначе	
		//	ВыбБр = РезБр.Выбрать();
		//	Если ВыбБр.Следующий() Тогда
		//		РасчетныйБрейк = ВыбБр.РасчетныйБрейк;
		//	Иначе	
		//		РасчетныйБрейк = Справочники.РасчетныеБрейки.ПустаяСсылка();
		//	КонецеСли;	
		//КонецеСли;	
		
		НайденнаяСтрока = СписокТипТарифа.Получить(ТипТарифаЧ);
		
		Если НайденнаяСтрока <> Неопределено Тогда 
			
			ТипТарифа      = НайденнаяСтрока.ТипТарифа;
			РасчетныйБрейк = НайденнаяСтрока.РасчетныйБрейк;
			
		Иначе 
			
			ТипТарифа      = Справочники.ТипыТарифов.ОсновнаяТарифнаяСетка;
			РасчетныйБрейк = Справочники.РасчетныеБрейки.ПустаяСсылка();
			
		КонецЕсли;	

		
		//--- БАО 31.05.2017 №926
		
		АгВ  = Заказ.AgentComission_Ч;
		//Бухаров		
		
		Если флПропускатьЗагрузку Тогда
			Лог(" # " + стрНомерЗаказа);
			Продолжить;
		КонецЕсли;
		
		СД = Заказ.servicedelivery_Ч;
		
		//+++ БАО 31.05.2017 №926
		
		//ТранспортнаяКомпания = Справочники.ТранспортныеКомпании.НайтиПоКоду(СД);
		ТранспортнаяКомпания = СписокТранспортныеКомпании.Получить(СД);
		Если ТранспортнаяКомпания = Неопределено Тогда 
			ТранспортнаяКомпания = Справочники.ТранспортныеКомпании.ПустаяСсылка();
		КонецЕсли;	
		
		
		//+++ БАО 31.05.2017 №926
		//---КонтрагентМагазин = ПодготовитьМагазин(Заказ);
		//---ФлАвтоматическоеПоступление = КонтрагентМагазин.Автопоступление;
		
		//НайденнаяСтрокаСписокМагазинов = СписокМагазинов.Получить(ПреобразоватьКодМагазина(Заказ.shop_Ч));	
		
		
		Адрес = Заказ.Addr;
		Если Лев(Адрес, 11) = "Москва и МО" Тогда
			Адрес = СокрЛ(Сред(Адрес, 12));
		КонецЕсли;
		
		
		Если Лев(Адрес, 10) = "Москва г. " Тогда
			Адрес = "Москва, " + Сред(Адрес, 11);
		КонецЕсли;
		ЧВ = СтрЧислоВхождений(Адрес, "Москва");
		
		Если ЧВ >= 2 Тогда //   Или ЧВ = 0
			Адрес = СтрЗаменить(Адрес, "Москва", "");
			Адрес = "Москва, " + Адрес;
		КонецеСли;	
		
		Адрес = СокрП(Лев(Адрес, 150));

		Отбор = Новый Структура;
		Отбор.Вставить("КодМагазина", ПреобразоватьКодМагазина(Заказ.shop_Ч));
		Отбор.Вставить("Адрес", Адрес);
		
		НайденнаяСтрокаСписокМагазинов = Неопределено;
		
		НайденныеСтроки = СписокМагазинов.НайтиСтроки(Отбор);
		//Нашли по адресу
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденнаяСтрокаСписокМагазинов = НайденныеСтроки[0];
			
		Иначе 
			
			//По адресу не нашли ищем только магазин
			Отбор = Новый Структура;
			Отбор.Вставить("КодМагазина", ПреобразоватьКодМагазина(Заказ.shop_Ч));
			
			НайденныеСтроки = СписокМагазинов.НайтиСтроки(Отбор);
			//Нашли по адресу
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрокаСписокМагазинов = НайденныеСтроки[0];
			КонецЕсли;	
			
		КонецЕсли;	
		
		
		ОсновнойБанковскийСчет_КонтрагентМагазин = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда 
			
			КонтрагентМагазин = НайденнаяСтрокаСписокМагазинов.Магазин;
			ФлАвтоматическоеПоступление = НайденнаяСтрокаСписокМагазинов.Автопоступление;
			ОсновнойБанковскийСчет_КонтрагентМагазин = НайденнаяСтрокаСписокМагазинов.ОсновнойБанковскийСчет; 
			ДоговорМагазина = НайденнаяСтрокаСписокМагазинов.ДоговорКомитента;
			
			Если Не ЗначениеЗаполнено(ДоговорМагазина) Тогда
				ДоговорМагазина   = ПолучитьДоговорКомитента(КонтрагентМагазин, Истина); //Храним товар как комиссионный
				НайденнаяСтрокаСписокМагазинов.ДоговорКомитента = ДоговорМагазина;
			КонецЕсли;
			
			НайТариф = НайденнаяСтрокаСписокМагазинов.ТарифнаяСетка;;
			ПредварительноеЗакрытиеЗаказов = НайденнаяСтрокаСписокМагазинов.ПредварительноеЗакрытиеЗаказов;
			
		Иначе 
			
			КонтрагентМагазин = ПодготовитьМагазин(Заказ, Истина, ФлАвтоматическоеПоступление, СписокОсновнойМагазин);
			ДоговорМагазина   = ПолучитьДоговорКомитента(КонтрагентМагазин, Истина); //Храним товар как комиссионный
			НайТариф = Неопределено;
			ОсновнойБанковскийСчет_КонтрагентМагазин = Неопределено;
			ПредварительноеЗакрытиеЗаказов = Неопределено;
			
			
			
			//НайденнаяСтрокаСписокМагазинов.Вставить(ПреобразоватьКодМагазина(Заказ.shop_Ч), Новый Структура("Магазин, Автопоступление, ДоговорКомитента, ТарифнаяСетка, ТочкиДоставки, ссылкаАдрес, ОсновнойБанковскийСчет, КодСкладМагазинаПоУмолчанию, ПредварительноеЗакрытиеЗаказов, СкладМагазинаПоУмолчанию", 
			//	КонтрагентМагазин, ФлАвтоматическоеПоступление, ДоговорМагазина, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено));
			
			
			НайденнаяСтрокаСписокМагазинов = СписокМагазинов.Добавить();
			НайденнаяСтрокаСписокМагазинов.КодМагазина = Заказ.shop_Ч;
			
			НайденнаяСтрокаСписокМагазинов.Магазин = КонтрагентМагазин; 
			НайденнаяСтрокаСписокМагазинов.Автопоступление = ФлАвтоматическоеПоступление; 
			НайденнаяСтрокаСписокМагазинов.ДоговорКомитента = ДоговорМагазина; 
			НайденнаяСтрокаСписокМагазинов.ТарифнаяСетка = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ссылкаАдрес = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ОсновнойБанковскийСчет = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ПредварительноеЗакрытиеЗаказов = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.Адрес = Адрес; 

			
		КонецЕсли;	
		
		//--- БАО 31.05.2017 №926
		
		Лог("Обработка заказа " + стрНомерЗаказа + ", статус " + СтатусЗаказа + ", магазин " + КонтрагентМагазин + ?(ФлАвтоматическоеПоступление, " (автопоступление)", ""));
		Проц = Окр(сч * 100 / КоличествоЗаказов);
		Если Проц <> ТекПроц Тогда
			ТекПроц = Проц;
			#Если Клиент Тогда
				Состояние(ОписаниеЭтапа + " " + ТекПроц + "%");
			#КонецЕсли
		КонецЕсли;
		сч = сч + 1;
		
		//+++ БАО 31.05.2017 №926
		//Это уже сделал
		//--- БАО 31.05.2017 №926
		КонтрагентИДоговор = ПодобратьКонтрагентаИДоговор(Заказ, СписокСсылокНаКонтрагента);
		
		Если Не НормальныйХодВыполнения Тогда
			Возврат;
		КонецЕсли;
		КонтрагентИДоговор.Свойство("Контрагент", Контрагент);
		КонтрагентИДоговор.Свойство("Договор", Договор);
		Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Или 
			Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Или 
			Контрагент = Неопределено Или 
			Договор = Неопределено Тогда
			Лог("!!!Ошибка поиска контрагента или договора: <" + Контрагент + "> <" + Договор + ">");
			ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!!Ошибка поиска контрагента или договора: <" + Контрагент + "> <" + Договор + ">");
			//флОбновлятьДатуПоследнейЗагрузки = Ложь;
			Продолжить;
		КонецЕсли;
		//+++ БАО 31.05.2017 №926
		//Это не нужно, тем более лишнее разыминование
		//Если Договор.Владелец <> Контрагент Тогда
		//	Лог("!!!Ошибка: найденный договор относится к другому контрагенту: код контрагента = " + Контрагент.Код + ", код договора=" + Договор.Код);
		//	Продолжить;
		//КонецЕсли;
		//--- БАО 31.05.2017 №926
		
		
		
		ПучокДокументов = Новый Массив;
		ВозвратДок = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
		РеализацияДок = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		ПеремещениеДок = Документы.ПеремещениеТоваров.ПустаяСсылка();
		//ВозвратПоставщикуДок = Документы.ВозвратТоваровПоставщику.ПустаяСсылка();
		ПоступлениеДок = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
		//Бухаров
		//ОприходованиеДок = Документы.ОприходованиеТоваров.ПустаяСсылка();
		//СписаниеДок = Документы.СписаниеТоваров.ПустаяСсылка();
		ЗаборДок = Документы.ЗаборТовара.ПустаяСсылка();
		//
		
		Если ДатаЗакрытияЗаказа <= ДатаЗапрета Тогда
			флРазрешеноОбновлениеЗаказа = Ложь;
			Лог("!!! Дата закрытия меньше даты запрета. Загрузка заказа не производится");
		КонецЕсли;
		
		//ЭтоКомиссионнаяТорговля = (Заказ.pay_type_Ч = 1) Или (Заказ.pay_type_Ч = 5);
		//Если ЭтоКомиссионнаяТорговля Тогда
		//	СкладРеализации = СкладРеализацииПоКомиссии;
		//	//СкладРеализации = СкладХраниения; // Пока комиисиию пускаем без перемещения
		//Иначе
		//	СкладРеализации = СкладРеализацииПоДоставке;
		//КонецЕсли;
		
		//+++ БАО 31.05.2017 №926
		//Перенес наверх
		//ДоговорМагазина   = ПолучитьДоговорКомитента(КонтрагентМагазин, Истина); //Храним товар как комиссионный   
		//--- БАО 31.05.2017 №926

		Если ДоговорМагазина = Неопределено Тогда
			Лог("!!!Ошибка. Не найден договор для магазина " + КонтрагентМагазин);
			Лог("Загрузка заказа " + стрНомерЗаказа + " отменена");
			флРазрешеноОбновлениеЗаказа = Ложь;
		КонецЕсли;
				
		//ВывестиСообщение("Маг = " + Заказ.shopName);
		//НайТариф = Справочники.ТарифныеСетки.НайтиПоКоду(Формат(ТарифЧ, "ЧГ="));
		
		//+++ БАО 31.05.2017 №926
		//перенес наверх
		//НайТариф = Справочники.ТарифныеСетки.НайтиПоКоду(Формат(ТарифЧ, "ЧГ="),,, КонтрагентМагазин.Ссылка);
		//--- БАО 31.05.2017 №926
		
		//Если НайТариф.Владелец <> КонтрагентМагазин Тогда
		//	Лог("!!!Ошибка: найденный тариф относится к другому контрагенту: код контрагента = " + КонтрагентМагазин.Код + ", код тарифа=" + НайТариф.Код);
		//	//Продолжить;
		//	Зап = Новый Запрос;
		//	
		//	Зап.Текст = "ВЫБРАТЬ
		//	|	ТарифныеСетки.Ссылка КАК ТС
		//	|ИЗ
		//	|	Справочник.ТарифныеСетки КАК ТарифныеСетки
		//	|ГДЕ
		//	|	ТарифныеСетки.Владелец = &Владелец";
		//	Зап.УстановитьПараметр("Владелец", КонтрагентМагазин.Ссылка);			
		//	РезТС = Зап.Выполнить().Выгрузить();
		//	Если РезТС.Количество() = 1 Тогда
		//		НайТариф = РезТС[0].ТС;
		//	КонецеСли;	
		//КонецЕсли;
		
		//Поиск или создание доставки
		//+++ БАО 31.05.2017 №926
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	новаМестнаяДоставка.Ссылка КАК Ссылка,
		//               |	новаМестнаяДоставка.Груз КАК Груз
		//               |ИЗ
		//               |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		//               |ГДЕ
		//               |	новаМестнаяДоставка.Номер = &Номер";
		//Запрос.УстановитьПараметр("Номер", стрНомерЗаказа);
		//Выборка = Запрос.Выполнить().Выбрать();
		//флНужноУдалитьДоставку = Ложь;
		//Если Выборка.Следующий() Тогда
		//	обМестнаяДоставка = Выборка.Ссылка.ПолучитьОбъект();
		//	флНужноУдалитьДоставку = Истина;
		//Иначе
		//	обМестнаяДоставка = Неопределено;
		//КонецЕсли;
		
		НайденнаяСтрокаБПноваМестнаяДоставк = СписокБПноваМестнаяДоставка.Получить(стрНомерЗаказа);
		Если НайденнаяСтрокаБПноваМестнаяДоставк <> Неопределено Тогда
			
			обМестнаяДоставка = НайденнаяСтрокаБПноваМестнаяДоставк.обМестнаяДоставка.ПолучитьОбъект();
			флНужноУдалитьДоставку = Истина;
			
		Иначе
			
			обМестнаяДоставка = Неопределено;
			
		КонецЕсли;	
		
		//--- БАО 31.05.2017 №926
		
		обГруз = Неопределено;
		флИзменитьДоставкуВСвязиСИзменениемТипаДоставкиНаСамовывоз = Ложь;
		флЗабор = Ложь;
		флФрахт = Ложь;
		Фл = Ложь;
		Если флРазрешеноОбновлениеЗаказа Тогда
			Если Заказ.selfDelivery_Ч <> 0 Тогда
				Лог("   Доставка: самовывоз");
				Если Заказ.selfDelivery_Ч = 2 Тогда
					//+++ БАО 31.05.2017 №926
					//НайЗабор_ = Документы.ЗаборТовара.НайтиПоНомеру(стрНомерЗаказа);
					НайденнаяСтрокаЗаборТовара = СписокЗаборТовара.Получить(стрНомерЗаказа);
					Если НайденнаяСтрокаЗаборТовара = Неопределено Тогда
						НайЗабор_ = Документы.ЗаборТовара.ПустаяСсылка();
					Иначе 
						НайЗабор_ = НайденнаяСтрокаЗаборТовара;
					КонецЕсли;	
					
					//--- БАО 31.05.2017 №926
					
					НовыйОбъект = Ложь;
					Если НайЗабор_.Пустая() Тогда
						НайЗабор = Документы.ЗаборТовара.СоздатьДокумент();
						НовыйОбъект = Истина;
					Иначе
						НайЗабор = НайЗабор_.ПолучитьОбъект();
					КонецеСли;						
					
					НайЗабор.Дата = Заказ.deliveryDate_Д;
					Если Не ЗначениеЗаполнено(НайЗабор.Дата) Тогда
						НайЗабор.Дата = ТекущаяДата();
					КонецеСли;	
					НайЗабор.Номер = стрНомерЗаказа;
					НайЗабор.ДатаДоставки = Заказ.deliveryDate_Д;
					НайЗабор.Телефон = Заказ.Telephone;
					НайЗабор.Автор = Заказ.manager;
					НайЗабор.Контрагент = КонтрагентМагазин;
					НайЗабор.Комментарий = Заказ.comment;
					НайЗабор.АдресДоставки = Заказ.AddrFull;
					
					//+++ БАО 31.05.2017 №926
					
					//НайКат = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория", Число(КатегорияДоставки));
					//НайЗабор.КатегорияДоставки = Найкат.Ссылка;
					НайКат = СписокКатегорияДоставки.Получить(Число(КатегорияДоставки)); 
					Если НайКат = Неопределено Тогда 
						НайКат = Справочники.КатегорииДоставки2014.ПустаяСсылка();
					КонецЕсли;	
					НайЗабор.КатегорияДоставки = НайКат;
					
					//--- БАО 31.05.2017 №926
					
					НайЗабор.УслугиСД = Заказ.ServiceDC_Ч;
					Если СтатусЗаказа <> 3 Тогда
						//+++ БАО 31.05.2017 №926
						//НайЗабор.СтатусИнтернетМагазинаСпр = Справочники.СтатусЗаказаИнтернетМагазина.НайтиПоКоду(СтатусЗаказа);
						НайЗабор.СтатусИнтернетМагазинаСпр = СписокСтатусЗаказа.Получить(СтатусЗаказа);
						//--- БАО 31.05.2017 №926
						НайЗабор.СтатусИнтернетМагазина = СтатусЗаказа;
					КонецеСли;	
					НайЗабор.СтоимостьДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					НайЗабор.НомерВнешнегоЗаказа = НомерВнешнегоЗаказа;
					НайЗабор.ТерминалПриемки = ТерминалПриемки;
					НайЗабор.ТерминалДоставки = ТерминалДоставки;
                    //+++++Серегин М.В. 24.02.2016 14:54:02 
                    НайЗабор.ТипОплаты = ТипОплаты;
                    НайЗабор.Грузополучатель = Контрагент;
                    //-----Серегин М.В. 24.02.2016 14:54:03 
					НайЗабор.ТарифнаяСетка = НайТариф;
					Если Заказ.returnRefusalOrders_Ч = 1 Тогда
						НайЗабор.ЗаборСВозвратом = Истина;
					Иначе
						НайЗабор.ЗаборСВозвратом = Ложь;
					КонецеСли;	
					
					НайЗабор.Товары.Очистить();
					флЗабор = Истина;
					
					//+++ БАО 31.05.2017 №926
					//НайТр = Справочники.новаТранспорт.НайтиПоРеквизиту("НомерГосударственнойРегистрации", СокрЛП(Заказ.carNumber));
					//НайЗабор.Транспорт = НайТр.Ссылка;
					НайТр = СписокТранспортПоГосНомерам.Получить(СокрЛП(Заказ.carNumber));
					НайЗабор.Транспорт = НайТр;
					//--- БАО 31.05.2017 №926
					

					
					времяС = СтрокаКВремя(Заказ.timeDeliveryFrom);
					Если Не ЗначениеЗаполнено(времяС) Тогда
						времяС = 9;
					КонецЕсли;
					времяПо = СтрокаКВремя(Заказ.timeDeliveryTo);
					Если Не ЗначениеЗаполнено(времяПо) Тогда
						времяПо = 19;
					КонецЕсли;
					Если времяПо < времяС Тогда
						времяПо = времяС + 3;
						Если времяПо > 23 Тогда
							времяПо = 23;
							времяС = 20;
						КонецЕсли;
					КонецЕсли;
					
					Если времяС = времяПо Тогда
						ВремяПо = 20;
                    КонецЕсли;
                    
					
					
					ВремяПрибытияС_   = НачалоДня(Заказ.deliveryDate_Д) + времяС *60*60;
					ВремяПрибытияПо_  = НачалоДня(Заказ.deliveryDate_Д) + времяПо*60*60;
					
					
					//+++ БАО 01.06.2017 №926
					//---НайЗабор.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_);

					НайЗабор.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_, , НайденнаяСтрокаСписокМагазинов);
					Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
						НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = НайЗабор.ТочкаДоставки;
					КонецЕсли;
					
					//--- БАО 01.06.2017 №926
						
                    //+++++Серегин М.В. 01.03.2016 12:33:06 
                    НайЗабор.ВремяДоставкиС = ВремяПрибытияС_;
                    НайЗабор.ВремяДоставкиПо = ВремяПрибытияПо_;
                    //-----Серегин М.В. 01.03.2016 12:33:07 
					
					НайЗабор.ВесЗабора = ОбщийВесЗаказа;
					НайЗабор.ОбъемЗабора = ОбъёмЗ;
					
					
					Попытка
					// Михушкин --->> 
					НайЗабор.Записать(РежимЗаписиДокумента.Запись);
					// <<--- Михушкин 	
					
					Исключение		
						ДобавитьОшибочныйЗаказ(стрНомерЗаказа, "Ошибка записи Забора №: "+ стрНомерЗаказа + "; причина: " + ОписаниеОшибки());			
					КонецПопытки;

					
					ДобавитьОбновляемыйДокумент(НайЗабор, "2=Проведение, 3=Проведение, 5=Проведение", "   забор товаров", "!!!Ошибка: Не удалось провести Забор "+стрНомерЗаказа);
					флРазрешеноОбновлениеЗаказа = Ложь;
					
										
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(НайЗабор.Ссылка);
					//--- БАО 27.06.2017 №1192

				ИначеЕсли Заказ.selfDelivery_Ч = 3 Тогда
					//+++ БАО 01.06.2017 №926
					//---НайФрахт_ = Документы.Фрахт.НайтиПоНомеру(стрНомерЗаказа);
					НайденнаяСтрокаФрахт = СписокФрахт.Получить(стрНомерЗаказа);
					Если НайденнаяСтрокаФрахт = Неопределено Тогда
						НайФрахт_ = Документы.ЗаборТовара.ПустаяСсылка();
					Иначе 
						НайФрахт_ = НайденнаяСтрокаФрахт;
					КонецЕсли;	

					//--- БАО 01.06.2017 №926
					
					НовыйОбъект = Ложь;
					Если НайФрахт_.Пустая() Тогда
						НайФрахт = Документы.Фрахт.СоздатьДокумент();
						НовыйОбъект = Истина;
					Иначе
						НайФрахт = НайФрахт_.ПолучитьОбъект();
					КонецеСли;	
					
					
					НайФрахт.Дата = Заказ.deliveryDate_Д;
					НайФрахт.Номер = стрНомерЗаказа;
					НайФрахт.ДатаДоставки = Заказ.deliveryDate_Д;
					НайФрахт.Телефон = Заказ.Telephone;
					НайФрахт.Автор = Заказ.manager;
					НайФрахт.Контрагент = КонтрагентМагазин;
					НайФрахт.Комментарий = Заказ.comment;
					НайФрахт.АдресДоставки = Заказ.AddrFull;
					//НайКат = Справочники.КатегорииДоставки.НайтиПоРеквизиту("Категория", Число(КатегорияДоставки));
					//НайФрахт.КатегорияДоставки = Найкат.Ссылка;
					НайФрахт.УслугиСД = Заказ.ServiceDC_Ч;
					Если СтатусЗаказа <> 3 Тогда
						//+++ БАО 01.06.2017 №926
						//---НайФрахт.СтатусИнтернетМагазинаСпр = Справочники.СтатусЗаказаИнтернетМагазина.НайтиПоКоду(СтатусЗаказа);
						НайФрахт.СтатусИнтернетМагазинаСпр = СписокСтатусЗаказа.Получить(СтатусЗаказа);
						//--- БАО 01.06.2017 №926
						НайФрахт.СтатусИнтернетМагазина = СтатусЗаказа;
						
					КонецеСли;	
					//НайФрахт.СтоимостьДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					НайФрахт.НомерВнешнегоЗаказа = НомерВнешнегоЗаказа;
					НайФрахт.Товары.Очистить();
					НайФрахт.типоплаты = ТипОплаты;
					НайФрахт.СуммаДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					НайФрахт.Терминал = ТерминалПриемки;
					
					времяС = СтрокаКВремя(Заказ.timeDeliveryFrom);
					Если Не ЗначениеЗаполнено(времяС) Тогда
						времяС = 9;
					КонецЕсли;
					времяПо = СтрокаКВремя(Заказ.timeDeliveryTo);
					Если Не ЗначениеЗаполнено(времяПо) Тогда
						времяПо = 19;
					КонецЕсли;
					Если времяПо < времяС Тогда
						времяПо = времяС + 3;
						Если времяПо > 23 Тогда
							времяПо = 23;
							времяС = 20;
						КонецЕсли;
					КонецЕсли;
					
					Если времяС = времяПо Тогда
						ВремяПо = 20;
					КонецЕсли;	
					
					
					ВремяПрибытияС_   = НачалоДня(Заказ.deliveryDate_Д) + времяС *60*60;
					ВремяПрибытияПо_  = НачалоДня(Заказ.deliveryDate_Д) + времяПо*60*60;
					

					//+++ БАО 01.06.2017 №926
					//---НайФрахт.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_);
					НайФрахт.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_, , НайденнаяСтрокаСписокМагазинов);
					Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
						НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = НайФрахт.ТочкаДоставки;
					КонецЕсли;
					//--- БАО 01.06.2017 №926

					
					флФрахт = Истина;
					
					//+++ БАО 01.06.2017 №926
					//---НайТр = Справочники.новаТранспорт.НайтиПоРеквизиту("НомерГосударственнойРегистрации", СокрЛП(Заказ.carNumber));
					//---НайФрахт.Транспорт = НайТр.Ссылка;
					НайТр = СписокТранспортПоГосНомерам.Получить(СокрЛП(Заказ.carNumber));
					НайФрахт.Транспорт = НайТр;
					//--- БАО 01.06.2017 №926

					
					ДобавитьОбновляемыйДокумент(НайФрахт, "2=Проведение, 3=Проведение, 5=Проведение", "   фрахт", "!!!Ошибка: Не удалось провести Фрахт "+стрНомерЗаказа);
					флРазрешеноОбновлениеЗаказа = Ложь;					
				КонецеСли;	
			ИначеЕсли (Заказ.serviceDelivery_Ч = 2) Тогда
				Лог("   Доставка: ИМ Логистик");
			ИначеЕсли (Заказ.serviceDelivery_Ч > 3) Тогда
				Лог("   Доставка: неопределенная транспортная компания");
			ИначеЕсли Заказ.deliveryDate_Д = Null Тогда
				Лог("   Ошибка доставки: не определена дата доставки");
			ИначеЕсли Не ЗначениеЗаполнено(Заказ.Addr) Тогда
				Лог("   Ошибка доставки: не определен адрес доставки");
				Мас = Новый Массив;
				//Мас.Добавить("pavel.nechaev@strizh-logistic.ru");
				Мас.Добавить("logist@strizh-logistic.ru");
                //+++++Серегин М.В. 19.01.2016 11:55:57 
                //Мас.Добавить("yuriy.gnedov@strizh-logistic.ru");
                //-----Серегин М.В. 19.01.2016 11:55:59 
				lem.ОтправитьСообщение(Мас, "Не определен адрес доставки (" + СокрЛП(стрНомерЗаказа) + ")", "Не определен адрес доставки (" + СокрЛП(стрНомерЗаказа) + ")",,"Логистическая компания ""Стриж""");
			Иначе
				флНужноУдалитьДоставку = Ложь;										
				
				Если СтатусЗаказа = 2 Тогда
					флНужноЗаписыватьДоставку = Истина;
					флНужноЗаписыватьГруз = Истина;
				Иначе
					флНужноЗаписыватьДоставку = Ложь;
					флНужноЗаписыватьГруз = Ложь
				КонецЕсли;
				
				Если обМестнаяДоставка <> Неопределено Тогда
					флНужноЗаписыватьДоставку = Истина;
					//+++ БАО 02.06.2017 №926
					//--- Если ЗначениеЗаполнено(Выборка.Груз) Тогда
					//---	обГруз = Выборка.Груз.ПолучитьОбъект();
						
					Если НайденнаяСтрокаБПноваМестнаяДоставк <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаБПноваМестнаяДоставк.Груз) Тогда
						
						обГруз = НайденнаяСтрокаБПноваМестнаяДоставк.Груз.ПолучитьОбъект(); 
						
					//--- БАО 02.06.2017 №926	
						флНужноЗаписыватьГруз = Истина;
					Иначе
						
						
						//+++ БАО 01.06.2017 №926
						//---Най = Документы.новаГруз.НайтиПоНомеру(СокрЛП(стрНомерЗаказа));
						НайденнаяСтрокаГруз = СписокГруз.Получить(стрНомерЗаказа);
						Если НайденнаяСтрокаГруз = Неопределено Тогда
							Най = Документы.новаГруз.ПустаяСсылка();
						Иначе 
							Най = НайденнаяСтрокаГруз;
						КонецЕсли;	
						
						//--- БАО 01.06.2017 №926
						
						
						Если Най = Документы.новаГруз.ПустаяСсылка() Тогда
							обГруз = Документы.новаГруз.СоздатьДокумент();
						Иначе
							обГруз = най.ПолучитьОбъект();
						КонецеСли;	
					КонецЕсли;					
				Иначе
					обМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.СоздатьБизнесПроцесс();
					
					//+++ БАО 01.06.2017 №926
					
					//---Запрос.Текст = 
					//---"ВЫБРАТЬ
					//---|	новаГруз.Ссылка
					//---|ИЗ
					//---|	Документ.новаГруз КАК новаГруз
					//---|ГДЕ
					//---|	новаГруз.Номер = &Номер";
					//---Выборка = Запрос.Выполнить().Выбрать();
					//---Если Выборка.Следующий() Тогда
					//---	обГруз = Выборка.Ссылка.ПолучитьОбъект();
					//---Иначе
					//---	обГруз = Документы.новаГруз.СоздатьДокумент();
					//---КонецЕсли;
					
					
					//---Най = Документы.новаГруз.НайтиПоНомеру(СокрЛП(стрНомерЗаказа));
					НайденнаяСтрокаГруз = СписокГруз.Получить(стрНомерЗаказа);
					Если НайденнаяСтрокаГруз = Неопределено Тогда
						обГруз = Документы.новаГруз.СоздатьДокумент();
					Иначе 
						обГруз = НайденнаяСтрокаГруз.ПолучитьОбъект();;
					КонецЕсли;	
					
					//--- БАО 01.06.2017 №926

				КонецЕсли;
				
				Если флНужноЗаписыватьГруз Тогда
					обГруз.Дата = Заказ.deliveryDate_Д;
					обГруз.Номер = стрНомерЗаказа;
					//+++ БАО 01.06.2017 №926
					//обГруз.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Рубли);
					обГруз.Валюта = ОбъектУТЛ_Рубли;
					//--- БАО 01.06.2017 №926
					
					обГруз.Стоимость = Заказ.deliveryPrice_Ч + Заказ.deliveryForMkadRUR_Ч;
					обГруз.Спецификация.Очистить();
					Если Не ОбрабатыватьТолькоЗаказы Тогда
						ДобавитьОбновляемыйДокумент(обГруз, "2=Запись", "", "!!!Ошибка записи перечня доставки " + стрНомерЗаказа);
					КонецЕсли;
				КонецЕсли;
				
				Если флНужноЗаписыватьДоставку Тогда
					обМестнаяДоставка.ДоставкаИзмененаНаСамовывоз = Ложь;
					
					
					обМестнаяДоставка.Номер = стрНомерЗаказа;
					ДатаДо = обМестнаяДоставка.Дата;
					// обновление даты заказа
					обМестнаяДоставка.Дата = Заказ.deliveryDate_Д;
					
					
					обМестнаяДоставка.ДатаСоздания = Заказ.createDate_Д;
					обМестнаяДоставка.КатегорияДоставки = КатегорияДоставки;
					
					//+++ БАО 01.06.2017 №926
					//ххх СкладХранения меняется в цикле по непонятному алгоритму
					обМестнаяДоставка.Грузоотправитель  = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(СкладХраниения);
					обМестнаяДоставка.ТочкаОтправления  = обМестнаяДоставка.Грузоотправитель.ТочкаДоставки;
					обМестнаяДоставка.ВремяПребыванияГрузоотправителя = обМестнаяДоставка.ТочкаОтправления.ВремяПребывания;					
					//+++ БАО 01.06.2017 №926
					
					
					обМестнаяДоставка.ВремяОтправленияС = НачалоДня(Заказ.deliveryDate_Д) + (обМестнаяДоставка.ТочкаОтправления.ВремяРаботыНачало - '00010101');
					обМестнаяДоставка.ВремяОтправленияПо= НачалоДня(Заказ.deliveryDate_Д) + (обМестнаяДоставка.ТочкаОтправления.ВремяРаботыОкончание - '00010101');
					обМестнаяДоставка.КомментарийКАдресуДоставки = Заказ.addrComment;
					обМестнаяДоставка.ВремяПребыванияГрузополучателя = Дата(1,1,1,0,15,0);
					
					
					ОбМестнаяДоставка.Телефон = Заказ.Telephone;
					ОбМестнаяДоставка.Менеджер = Заказ.manager;
					ОбМестнаяДоставка.КоличествоМест = Заказ.PiecesOfFreight_Ч;
					
					времяС = СтрокаКВремя(Заказ.timeDeliveryFrom);
					Если Не ЗначениеЗаполнено(времяС) Тогда
						времяС = 9;
					КонецЕсли;
					времяПо = СтрокаКВремя(Заказ.timeDeliveryTo);
					Если Не ЗначениеЗаполнено(времяПо) Тогда
						времяПо = 19;
					КонецЕсли;
					Если времяПо < времяС Тогда
						времяПо = времяС + 3;
						Если времяПо > 23 Тогда
							времяПо = 23;
							времяС = 20;
						КонецЕсли;
					КонецЕсли;                      //Заказ.shopName + ": " + 
					
					обМестнаяДоставка.Комментарий = Заказ.comment;
					Если времяС = времяПо Тогда
						ВремяПо = 20;
					КонецЕсли;	
					обМестнаяДоставка.ВремяПрибытияС   = НачалоДня(Заказ.deliveryDate_Д) + времяС *60*60;
					обМестнаяДоставка.ВремяПрибытияПо  = НачалоДня(Заказ.deliveryDate_Д) + времяПо*60*60;
					обМестнаяДоставка.ВремяПребыванияГрузополучателя = 3*60;
					
					обМестнаяДоставка.СтоимостьДоставкиДоМКАД = СтоимостьДоставкиДоМкад;
					обМестнаяДоставка.СтоимостьДоставкиЗаМКАД = СтоимостьДоставкиЗаМкад;
					обМестнаяДоставка.Адрес = Заказ.AddrFull;
					
					обМестнаяДоставка.СуммаКассовогоОбслуживания = Заказ.cashService_Ч;
					
					
					Если Заказ.ispayed_Ч = 1 Тогда
						обМестнаяДоставка.Оплачен = Истина;
					КонецеСли;	
					
					//+++ БАО 01.06.2017 №926
					АдресТочкиПрибытия = "";
					//--- БАО 01.06.2017 №926
					Если Заказ.serviceDelivery_Ч = 1 Тогда
						обМестнаяДоставка.Грузополучатель = КонтрагентДПД;
						обМестнаяДоставка.ТочкаПрибытия = ТочкаДПД;
						АдресТочкиПрибытия = ТочкаДПД_Адрес;
					ИначеЕсли Заказ.serviceDelivery_Ч = 3 Тогда
						обМестнаяДоставка.Грузополучатель = КонтрагентПитер;
						обМестнаяДоставка.ТочкаПрибытия = ТочкаПитер;
						АдресТочкиПрибытия = ТочкаПитер_Адрес;
					Иначе
						//+++ БАО 01.06.2017 №926
						//---ВладелецТочки = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Контрагент);
						ВладелецТочки = СписокОбъектУТЛ_Контрагент.Получить(Контрагент);
						//--- БАО 01.06.2017 №926
						
						обМестнаяДоставка.Грузополучатель  = ВладелецТочки;
						//Попытка
						//	обМестнаяДоставка.Записать();
						//Исключение
						//	Лог("!!!   Ошибка при записи доставки!!!");
						//КонецПопытки;	
						Фл = Ложь;
						Если Не обМестнаяДоставка.АдресИзмененТК Тогда
							//+++ БАО 01.06.2017 №926
							//ХХХ нужно подумать
							//--- БАО 01.06.2017 №926
							
							//+++ БАО 02.06.2017 №926
							//--- обМестнаяДоставка.ТочкаПрибытия    = ПодобратьТочкуДоставкиПоАдресу(ВладелецТочки, Заказ.Addr, обМестнаяДоставка.ВремяПрибытияС, обМестнаяДоставка.ВремяПрибытияПо, Фл);
							обМестнаяДоставка.ТочкаПрибытия    = ПодобратьТочкуДоставкиПоАдресу(ВладелецТочки, Заказ.Addr, обМестнаяДоставка.ВремяПрибытияС, обМестнаяДоставка.ВремяПрибытияПо, Фл);
							//--- БАО 02.06.2017 №926
							
							//+++ БАО 01.06.2017 №926
							//ХХХ Костыль 
							АдресТочкиПрибытия = обМестнаяДоставка.ТочкаПрибытия.Наименование;
							//--- БАО 01.06.2017 №926
							
						КонецеСли;	
					КонецЕсли;
					Если Не обМестнаяДоставка.АдресИзмененТК Тогда
						Если обМестнаяДоставка.ТочкаПрибытия = Неопределено Тогда
							обМестнаяДоставка.ТочкаПрибытия = Справочники.новаТочкиДоставки.ПустаяСсылка();
							
						//+++ БАО 01.06.2017 №926
						//---ИначеЕсли Лев(обМестнаяДоставка.ТочкаПрибытия.Наименование, 12) = "<не найден> " Тогда
						ИначеЕсли Лев(АдресТочкиПрибытия, 12) = "<не найден> " Тогда
						//--- БАО 01.06.2017 №926
							
							обМестнаяДоставка.Комментарий = Заказ.shopName + ": Не найден адрес " + Заказ.Addr + " " + Заказ.comment;
						КонецЕсли;
					КонецеСли;;
				КонецЕсли;
				
			КонецЕсли;
			
			
			//Попытка	
			//	НайЗабор_ = Документы.ЗаборТовара.НайтиПоНомеру(стрНомерЗаказа);			
			//	Если НЕ НайЗабор_.Пустая() Тогда
			//		НайЗабор = НайЗабор_.ПолучитьОбъект();
			//		НайЗабор.СтатусИнтернетМагазинаСпр = Справочники.СтатусЗаказаИнтернетМагазина.НайтиПоКоду(СтатусЗаказа);
			//		НайЗабор.СтатусИнтернетМагазина = СтатусЗаказа;
			//		НайЗабор.Записать(РежимЗаписиДокумента.Запись);	
			//	КонецеСли;							
			//Исключение		
			//	ДобавитьОшибочныйЗаказ(стрНомерЗаказа, "Ошибка записи Забора №: "+ стрНомерЗаказа + "; причина: " + ОписаниеОшибки());			
			//КонецПопытки;
			
		КонецЕсли;
		
		Если Заказ.selfDelivery_Ч = 1 Тогда
			флИзменитьДоставкуВСвязиСИзменениемТипаДоставкиНаСамовывоз = Истина;
			
			Если обМестнаяДоставка <> Неопределено Тогда
				обМестнаяДоставка.ДоставкаИзмененаНаСамовывоз = Истина;
				обМестнаяДоставка.СтоимостьДоставкиДоМКАД = СтоимостьДоставкиДоМкад;
				обМестнаяДоставка.СтоимостьДоставкиЗаМКАД = СтоимостьДоставкиЗаМкад;
				Попытка
					обМестнаяДоставка.Записать();
					//+++ БАО 01.06.2017 №926
					//ХХХ возможно наверное убрать расшифровку
					СписокБПноваМестнаяДоставка.Вставить(Новый Структура("обМестнаяДоставка, Груз, ТочкаОтправления, ВремяПребывания", 
								обМестнаяДоставка.Ссылка, обМестнаяДоставка.Груз, обМестнаяДоставка.Грузоотправитель.ТочкаДоставки, обМестнаяДоставка.ТочкаОтправления.ВремяПребывания));
					//--- БАО 01.06.2017 №926
					
				Исключение
					Лог("!!!   Ошибка при записи доставки!!!");
				КонецПопытки;	
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(обМестнаяДоставка.Ссылка);
				//--- БАО 27.06.2017 №1192

			КонецеСли;	
		КонецеСли;
		
		Если Фл  Тогда
			Наб = РегистрыСведений.НепривязанныеАдреса.СоздатьНаборЗаписей();
			
			Наб.Отбор.Номер.Установить(обМестнаяДоставка.Номер);
			Наб.Прочитать();
			
			Нов = Наб.Добавить();
			Нов.Период = ТекущаяДата();
			Нов.Номер = обМестнаяДоставка.Номер;
			Нов.Адрес = Заказ.Addr;
			Наб.Записать();
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(Наб)
			//--- БАО 27.06.2017 №1192
			
		КонецеСли;	
		
		
		Если флИзменитьДоставкуВСвязиСИзменениемТипаДоставкиНаСамовывоз Тогда
			Если обМестнаяДоставка = Неопределено Тогда
				//--- БАО 01.06.2017 №926	
				//---обМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(стрНомерЗаказа);
				НайденнаяСтрокаБПноваМестнаяДоставк = СписокБПноваМестнаяДоставка.Получить(стрНомерЗаказа);
				Если НайденнаяСтрокаБПноваМестнаяДоставк <> Неопределено Тогда
					
					обМестнаяДоставка = НайденнаяСтрокаБПноваМестнаяДоставк.обМестнаяДоставка;
					
				Иначе
					
					обМестнаяДоставка  = БизнесПроцессы.новаМестнаяДоставка.ПустаяСсылка();
					
				КонецЕсли;
				//--- БАО 01.06.2017 №926
			Иначе	
				
			КонецеСли;	
			Если ТипЗнч(обМестнаяДоставка) = Тип("БизнесПроцессСсылка.новаМестнаяДоставка") Тогда
				Если Не обМестнаяДоставка.Пустая() Тогда
					обМестнаяДоставка = обМестнаяДоставка.ПолучитьОбъект();
				КонецеСли;	
			КонецеСЛи;
			
			Если ТипЗнч(обМестнаяДоставка) <> Тип("БизнесПроцессСсылка.новаМестнаяДоставка") Тогда
				//обМестнаяДоставка.Номер = стрНомерЗаказа + "abc";
				Попытка
					обМестнаяДоставка.записать();
				Исключение
					//обМестнаяДоставка.Номер = стрНомерЗаказа + "def";
					обМестнаяДоставка.записать();
				КонецПопытки;	
				
								
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(обМестнаяДоставка.Ссылка);
				//--- БАО 27.06.2017 №1192

			КонецеСли;	
		КонецеСли;	
		
		// Поиск или удаление возврата
		флЗаполнятьВозврат = Ложь;
		флНужноЗаписыватьВозврат = Ложь;
		
		//+++ Костя 140915
		Если стрдлина(стрНомерЗаказа) = 7 Тогда
			СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа+"    ", "НомерЗаказа");
		Иначе	
			СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа+"     ", "НомерЗаказа");
		КонецеСли;
		Если  СсылкиНаДокументы <> Неопределено Тогда
			ВозвратДок = ?(СсылкиНаДокументы.Возврат     = NULL, Неопределено, СсылкиНаДокументы.Возврат);
		КонецЕсли;			
		//ВозвратДок = НайтиДокумент("ВозвратТоваровОтПокупателя", стрНомерЗаказа); // Костя 140915
		//--- Костя 140915
		
		Если флРазрешеноОбновлениеЗаказа Тогда
			Если СтатусЗаказа = 4 Тогда
				Если ВозвратДок <> Неопределено Тогда
					Если Не ПометкаДокументаНаУдаление_До_30_06_2017(ВозвратДок.ПолучитьОбъект()) Тогда
						Лог("!!! Ошибка пометки на удаление возврата " + стрНомерЗаказа + " " + ОписаниеОшибки());
						ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!! Ошибка пометки на удаление возврата " + стрНомерЗаказа + " " + ОписаниеОшибки());
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
						флРазрешеноОбновлениеЗаказа = Ложь;
					КонецЕсли;
					ВозвратДок = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Если ВозвратДок <> Неопределено Тогда
					ВозвратДокОбъект = ВозвратДок.ПолучитьОбъект();
					Если ПодготовитьДокументКЗаполнению_До_30_06_2017(ВозвратДокОбъект, "Обновление возврата ", стрНомерЗаказа) Тогда
						Если ВозвратДокОбъект.Товары.Количество() > 0 Тогда
							ВозвратДокОбъект.Товары.Очистить();
							флНужноЗаписыватьВозврат = Истина;
							Попытка
								ВозвратДокОбъект.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								Лог("!!! Ошибка. Не удалось записать " + ВозвратДокОбъект + " " + ОписаниеОшибки());
							КонецПопытки;
							
							//+++ БАО 27.06.2017 №1192
							ДобавитьВХранилищеОбъектовСравнения(ВозвратДокОбъект.Ссылка);
							//--- БАО 27.06.2017 №1192

						КонецЕсли;
					Иначе
						ДобавитьОшибочныйЗаказ(НомерЗаказа, "Ошибка с возвратным документом");
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Поиск, создание или удаление поступления, реализации, перемещения, возврата поставщику
		Если (СтатусЗаказа = 2) Или (СтатусЗаказа = 3) Или (СтатусЗаказа = 4) Или (СтатусЗаказа = 5) Тогда
			          
			//+++ Костя 140915
			Если стрдлина(стрНомерЗаказа) = 7 Тогда
				СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа+"    ", "НомерЗаказа");//ДокументыПоЗаказу.Найти(стрНомерЗаказа, "НомерЗаказа");
			Иначе
				СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа+"     ", "НомерЗаказа");//ДокументыПоЗаказу.Найти(стрНомерЗаказа, "НомерЗаказа");
			КонецеСли;	
			
			Если  СсылкиНаДокументы <> Неопределено Тогда
				РеализацияДок  = ?(СсылкиНаДокументы.Заказ       = NULL, Неопределено, СсылкиНаДокументы.Заказ);
				ПеремещениеДок = ?(СсылкиНаДокументы.Перемещение = NULL, Неопределено, СсылкиНаДокументы.Перемещение);
				ВозвратДок     = ?(СсылкиНаДокументы.Возврат     = NULL, Неопределено, СсылкиНаДокументы.Возврат);
				ПоступлениеДок = ?(СсылкиНаДокументы.Поступление = NULL, Неопределено, СсылкиНаДокументы.Поступление);
			КонецЕсли;
			//РеализацияДок = НайтиДокумент("РеализацияТоваровУслуг", стрНомерЗаказа);
			//ПеремещениеДок = НайтиДокумент("ПеремещениеТоваров", стрНомерЗаказа);
			//ВозвратПоставщикуДок = НайтиДокумент("ВозвратТоваровПоставщику", стрНомерЗаказа);
			//ПоступлениеДок = НайтиДокумент("ПоступлениеТоваровУслуг", стрНомерЗаказа);
			//Бухаров - создание пересортицы
			//СписаниеДок = НайтиДокумент("СписаниеТоваров", стрНомерЗаказа);
			//ОприходованиеДок = НайтиДокумент("ОприходованиеТоваров", стрНомерЗаказа);
			//--- Костя 140915
			//
			
			флЗаполнятьРеализацию = Истина;
			
			// Поиск, создание или удаление Поступления от поставщика
			Если флРазрешеноОбновлениеЗаказа Тогда
				////Серегин М.В. 10.08.2015 11:53:36 устарело
				//Если ФлАвтоматическоеПоступление Тогда
				флЗаполнятьПоступление = Истина;
				Если ПоступлениеДок = Неопределено Тогда
					ПоступлениеДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					ПоступлениеДокОбъект.Номер = стрНомерЗаказа;
					Если СтатусЗаказа = 4 Тогда
						ПоступлениеДокОбъект.ПометкаУдаления = Истина;
					КонецЕсли;
				ИначеЕсли СтатусЗаказа = 4 Тогда
					Если ПоступлениеДок.ПоступлениеПодтверждено Тогда
						флЗаполнятьПоступление = Ложь;
					Иначе
						ПоступлениеДокОбъект = ПоступлениеДок.ПолучитьОбъект();
						Если Не ПометкаДокументаНаУдаление_До_30_06_2017(ПоступлениеДокОбъект) Тогда
							Лог("!!! Ошибка пометки на удаление поступления " + стрНомерЗаказа + " " + ОписаниеОшибки());
							ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!! Ошибка пометки на удаление поступления " + стрНомерЗаказа + " " + ОписаниеОшибки());
							//флОбновлятьДатуПоследнейЗагрузки = Ложь;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ПоступлениеДок.ПоступлениеПодтверждено Тогда
						флЗаполнятьПоступление = Ложь;
					Иначе
						ПоступлениеДокОбъект = ПоступлениеДок.ПолучитьОбъект();
						Если ПодготовитьДокументКЗаполнению_До_30_06_2017(ПоступлениеДокОбъект, "Обновление поступления ", стрНомерЗаказа) Тогда
							ПоступлениеДокОбъект.Товары.Очистить();
							ПоступлениеДокОбъект.ПодарочныеПозиции.Очистить();
							
						Иначе 
							//флОбновлятьДатуПоследнейЗагрузки = Ложь;
							ДобавитьОшибочныйЗаказ(НомерЗаказа, "Ошибка с документом поступления");
							флРазрешеноОбновлениеЗаказа = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если флЗаполнятьПоступление Тогда
					Если Заказ.createDate_Д + 3*24*60*60 >= ДатаЗакрытияЗаказа Тогда
						ПоступлениеДокОбъект.Дата                         = Заказ.createDate_Д;//ДатаЗакрытияЗаказа - 24*60*60;   //ДатаВечер(ДатаЗакрытияЗаказа) - 5
					Иначе
						ПоступлениеДокОбъект.Дата                         = ДатаЗакрытияЗаказа - 24*60*60;//ДатаЗакрытияЗаказа - 24*60*60;   //ДатаВечер(ДатаЗакрытияЗаказа) - 5
					КонецеСли;	
					ПоступлениеДокОбъект.ВидПоступления               = Перечисления.ВидыПоступленияТоваров.НаСклад;
					ПоступлениеДокОбъект.Организация                  = НашаОрганизация;
					
					//+++ БАО 01.06.2017 №926
					
					//---ПоступлениеДокОбъект.БанковскийСчетКонтрагента    = КонтрагентМагазин.ОсновнойБанковскийСчет;
					
					//Новый магазин - у него нет осн. банк. счет
					Если ОсновнойБанковскийСчет_КонтрагентМагазин = Неопределено Тогда
						 
					Иначе
						
						ПоступлениеДокОбъект.БанковскийСчетКонтрагента = ОсновнойБанковскийСчет_КонтрагентМагазин; 
						 
					КонецЕсли;
					
					//--- БАО 01.06.2017 №926
					
					ПоступлениеДокОбъект.ОтражатьВУправленческомУчете = Истина;
					ПоступлениеДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
					ПоступлениеДокОбъект.ОтражатьВНалоговомУчете      = Истина;
					//ПоступлениеДокОбъект.Комментарий                  = "Автопоступление. " + Заказ.comment;
					ПоступлениеДокОбъект.СкладОрдер                   = СкладХраниения;
					ПоступлениеДокОбъект.Контрагент                   = КонтрагентМагазин;
					ПоступлениеДокОбъект.ДоговорКонтрагента           = ДоговорМагазина;
					//ПоступлениеДокОбъект.Грузополучатель              = Контрагент;
					ПоступлениеДокОбъект.ТипЦен                       = РозничныйТипЦен;
					ПоступлениеДокОбъект.ВалютаДокумента              = Рубли;
					ПоступлениеДокОбъект.УчитыватьНДС                 = Истина;
					ПоступлениеДокОбъект.СуммаВключаетНДС             = Истина;
					ПоступлениеДокОбъект.КурсВзаиморасчетов           = 1;
					ПоступлениеДокОбъект.КратностьВзаиморасчетов      = 1;
					Если Не ОбрабатыватьТолькоЗаказы Тогда
						ДобавитьОбновляемыйДокумент(ПоступлениеДокОбъект, "2=Проведение, 3=Проведение, 5=Проведение", "   поступление товаров", "!!!Ошибка: Не удалось провести Поступление "+стрНомерЗаказа);
					КонецЕсли;	
				КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
			
			// Перемещение
			Если флРазрешеноОбновлениеЗаказа Тогда
				Если ПеремещениеДок = Неопределено Тогда
					ПеремещениеДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
					ПеремещениеДокОбъект.Номер = стрНомерЗаказа;
					Если СтатусЗаказа = 4 Тогда
						ПеремещениеДокОбъект.ПометкаУдаления = Истина;
					КонецЕсли;
				ИначеЕсли СтатусЗаказа = 4 Тогда
					ПеремещениеДокОбъект = ПеремещениеДок.ПолучитьОбъект();
					Если Не ПометкаДокументаНаУдаление_До_30_06_2017(ПеремещениеДокОбъект) Тогда
						Лог("!!! Ошибка пометки на удаление перемещения " + стрНомерЗаказа + " " + ОписаниеОшибки());
						ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!! Ошибка пометки на удаление перемещения " + стрНомерЗаказа + " " + ОписаниеОшибки());
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					КонецЕсли;
				Иначе
					ПеремещениеДокОбъект = ПеремещениеДок.ПолучитьОбъект();
					Если ПодготовитьДокументКЗаполнению_До_30_06_2017(ПеремещениеДокОбъект, "Обновление перемещения ", стрНомерЗаказа) Тогда
						ПеремещениеДокОбъект.Товары.Очистить();
					Иначе 
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
						ДобавитьОшибочныйЗаказ(НомерЗаказа, "Ошибка с документом перемещения");
						флРазрешеноОбновлениеЗаказа = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ПеремещениеДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа) - 2;
				ПеремещениеДокОбъект.ВидОперации                  = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
				ПеремещениеДокОбъект.Организация                  = НашаОрганизация;
				ПеремещениеДокОбъект.ОтражатьВУправленческомУчете = Истина;
				ПеремещениеДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
				ПеремещениеДокОбъект.ОтражатьВНалоговомУчете      = Истина;
				ПеремещениеДокОбъект.НДСвСтоимостиТоваров         = Истина;
				ПеремещениеДокОбъект.СкладОтправитель             = СкладХраниения;
				Если Заказ.serviceDelivery_Ч = 3 Тогда
					ПеремещениеДокОбъект.СкладПолучатель          = СкладПитер;
				Иначе
					ПеремещениеДокОбъект.СкладПолучатель          = СкладРеализации;
				КонецЕсли;
				Если Не ОбрабатыватьТолькоЗаказы Тогда
					ДобавитьОбновляемыйДокумент(ПеремещениеДокОбъект, "2=Проведение, 3=Проведение, 5=Проведение", "   перемещение", "!!!Ошибка: Не удалось провести Перемещение "+стрНомерЗаказа);
				КонецЕсли;	
			КонецЕсли;
			//НовыйОбъект = Ложь;
			// Реализация
			Если флРазрешеноОбновлениеЗаказа Тогда
				Если РеализацияДок = Неопределено Тогда
					РеализацияДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					НовыйОбъект = Истина;
					РеализацияДокОбъект.Номер = стрНомерЗаказа;
					НоваяСтараяРеализация = "   +++ Создана реализация ";
					Если СтатусЗаказа = 4 Тогда
						РеализацияДокОбъект.ПометкаУдаления = Истина;
						НоваяСтараяРеализация = "   +++ Создана удалённая реализация";
					КонецЕсли;
				ИначеЕсли СтатусЗаказа = 4 Тогда
					РеализацияДокОбъект = РеализацияДок.ПолучитьОбъект();
					Если Не ПометкаДокументаНаУдаление_До_30_06_2017(РеализацияДокОбъект) Тогда
						Лог("!!! Ошибка пометки на удаление реализации " + стрНомерЗаказа + " " + ОписаниеОшибки());
						ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!! Ошибка пометки на удаление реализации " + стрНомерЗаказа + " " + ОписаниеОшибки());
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					КонецЕсли;
					
					////заказы перестали удаляться
					// РеализацияДокОбъект.статусинтернетмагазина=4;
					// РеализацияДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					// //заказы перестали удаляться
					 
					НоваяСтараяРеализация = "   *** Перезаписана реализация";
					
					//Серегин М.В. 24.06.2015 15:36:32 отклоняем заказа для СтатусаСкладскогоУчета, чтобы эти заказы попадали в наборную ведомость для возврата
					////Серегин М.В. 13.08.2015 10:34:33 отменяем заказ из админки полюбому
					//ТекущееСостояниеЗаказа = smv.ПолучитьТекущееСостояниеЗаказа(РеализацияДок);
					//Если ТекущееСостояниеЗаказа.Количество() > 0 Тогда
					//    СтруктураПараметров = Новый Структура;
					//    Для каждого Стр Из ТекущееСостояниеЗаказа Цикл
					//        СтруктураПараметров.Вставить("Заказ",РеализацияДок);
					//        СтруктураПараметров.Вставить("Дата", ТекущаяДата());
					//        СтруктураПараметров.Вставить("РезультатДоставки", Стр.РезультатДоставки);
					//        СтруктураПараметров.Вставить("ПричинаНевыполнения",Стр.ПричинаНеВыполнения);
					//    КонецЦикла;
					//Иначе
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("Заказ",РеализацияДок);
					СтруктураПараметров.Вставить("Дата", ТекущаяДата());
					СтруктураПараметров.Вставить("РезультатДоставки", Справочники.новаРезультатМестнойДоставки.НеВыполнена);
					СтруктураПараметров.Вставить("ПричинаНевыполнения",Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда);
					СтруктураПараметров.Вставить("ДатаЗаказа",РеализацияДок.Дата);
					//КонецЕсли;
					smv.ОтклонитьЗаказПоСтатусуСкладскогоУчета(СтруктураПараметров);
					//Серегин М.В. 24.06.2015 15:36:34
					
				Иначе
					РеализацияДокОбъект = РеализацияДок.ПолучитьОбъект();
					Если ПодготовитьДокументКЗаполнению_До_30_06_2017(РеализацияДокОбъект, "Обновление реализации ", стрНомерЗаказа) Тогда
						РеализацияДокОбъект.Товары.Очистить();
						РеализацияДокОбъект.Услуги.Очистить();
						РеализацияДокОбъект.ПодарочныеПозиции.Очистить();
						
						НоваяСтараяРеализация = "   *** Обновлена реализация";
					Иначе 
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
						ДобавитьОшибочныйЗаказ(НомерЗаказа, "Ошибка с реализацией");
						флРазрешеноОбновлениеЗаказа = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				РеализацияДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа);
				//Бухаров
				РеализацияДокОбъект.ТипОплаты					 = ТипОплаты;
				РеализацияДокОбъект.НомерВнешнегоЗаказа			 = НомерВнешнегоЗаказа;
				РеализацияДокОбъект.КатегорияДоставки			 = КатегорияДоставки;
				//Бухаров
				РеализацияДокОбъект.ВидОперации                  = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
				РеализацияДокОбъект.Организация                  = НашаОрганизация;
				РеализацияДокОбъект.БанковскийСчетОрганизации    = НашСчет;
				РеализацияДокОбъект.ОтражатьВУправленческомУчете = Истина;
				РеализацияДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
				РеализацияДокОбъект.ОтражатьВНалоговомУчете      = Истина;
				РеализацияДокОбъект.ВидПередачи                  = Перечисления.ВидыПередачиТоваров.СоСклада;
				РеализацияДокОбъект.Комментарий                  = Заказ.comment;
				РеализацияДокОбъект.АгентскоеВознаграждение      = АгВ;
				РеализацияДокОбъект.СтраховойСбор                = Заказ.Insurance_Ч;
				Если Заказ.serviceDelivery_Ч = 3 Тогда
					РеализацияДокОбъект.Склад          			 = СкладПитер;
				Иначе
					РеализацияДокОбъект.Склад          			 = СкладРеализации;
				КонецЕсли;
				РеализацияДокОбъект.ТранспортнаяКомпания = ТранспортнаяКомпания;
				РеализацияДокОбъект.Контрагент                   = Контрагент;
				РеализацияДокОбъект.ДоговорКонтрагента           = Договор;
				РеализацияДокОбъект.Грузополучатель              = Контрагент;
				РеализацияДокОбъект.ТипЦен                       = РозничныйТипЦен;
				РеализацияДокОбъект.ВалютаДокумента              = Рубли;
				РеализацияДокОбъект.УчитыватьНДС                 = Истина;
				РеализацияДокОбъект.СуммаВключаетНДС             = Истина;
				РеализацияДокОбъект.КурсВзаиморасчетов           = 1;
				РеализацияДокОбъект.КратностьВзаиморасчетов      = 1;
				РеализацияДокОбъект.АдресДоставки                = Заказ.Addr;
				Если СтатусЗаказа <> 3 Тогда
					РеализацияДокОбъект.СтатусИнтернетМагазина       = СтатусЗаказа;
				КонецеСли;	
				РеализацияДокОбъект.ВладелецТовара               = КонтрагентМагазин;
				РеализацияДокОбъект.УслугиСД                     = Заказ.serviceDC_Ч;
				РеализацияДокОбъект.КомментарийСД                = Заказ.ReasonRrefusal;
				РеализацияДокОбъект.ТарифнаяСетка = ТипТарифа;
				РеализацияДокОбъект.РасчетныйБрейк = РасчетныйБрейк;
				РеализацияДокОбъект.ТарифнаяСеткаПартнера = НайТариф;
				РеализацияДокОбъект.Телефон = Заказ.Telephone;
				РеализацияДокОбъект.ПредоплатаПоКредиту = Заказ.SumByCard_Ч;
				РеализацияДокОбъект.УслугиСДЧистые = ЧистыеСД;
				РеализацияДокОбъект.МетодСозданияЗаказа = МетодСозданияЗаказа;
				РеализацияДокОбъект.ДополнениеКАдресуДоставки = Заказ.addrComment;
				РеализацияДокОбъект.ТерминалПриема = ТерминалПриемки;
				РеализацияДокОбъект.ТерминалДоставки = ТерминалДоставки;
				//РеализацияДокОбъект.ДатаПриемки = ДатаПриемки;
				РеализацияДокОбъект.КоличествоМест = КоличествоМестЗ;
				Если РеализацияДокОбъект.КоличествоМест = 0 Тогда
					РеализацияДокОбъект.КоличествоМест = 1;
				КонецеСли;	
				РеализацияДокОбъект.ОбъёмЗаказа = ОбъёмЗ;
				
				
				
				//+++ Костя 091115
				//Если КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_234 ")    
				//	ИЛИ КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_391 ") Тогда 
				//+++ БАО 22.05.2017 №874 
				
				НайДог = глМасДог.Найти(КонтрагентМагазин);
				
				Если НайДог <> Неопределено Тогда
					РеализацияДокОбъект.ЭтоДоговор = Истина;                              
				Иначе                                                                       
					РеализацияДокОбъект.ЭтоДоговор = Ложь;                                 
				КонецЕсли;//+++ Костя 091115
								
				//--- БАО 22.05.2017 №874 
				
			
				
				//Серегин М.В. 22.07.2015 18:22:44  
				//+++ БАО 01.06.2017 №926
				//---Если КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_248") Или КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_601") Тогда
				//---РеализацияДокОбъект.ИнтернетМагазинЯндекса = Справочники.Контрагенты.НайтиПоКоду("248_"+?(Заказ.senderId=NULL,0,Заказ.senderId));    
				Если КонтрагентМагазин = КонтрагентМагазин_Shop_248 Или КонтрагентМагазин = КонтрагентМагазин_Shop_601 Или КонтрагентМагазин = КонтрагентМагазин_Shop_752 Тогда
				//--- БАО 01.06.2017 №926	
					РеализацияДокОбъект.ИнтернетМагазинЯндекса = СписокИнтернетМагазинЯндекса.Получить("248_"+?(Заказ.senderId=NULL,0,Заказ.senderId));    
					
				КонецЕсли;
				//Серегин М.В. 22.07.2015 18:22:46 
				
				РеализацияДокОбъект.ОбщийВес = ОбщийВесЗаказа;
				ВпихнутьДоставку(РеализацияДокОбъект, СтоимостьДоставки);
				
				//+++ БАО 05.06.2017 №792
				//---ДобавитьОбновляемыйДокумент(РеализацияДокОбъект, "2=Запись, 3=Проведение, 5=Запись", НоваяСтараяРеализация, "!!!Ошибка: Не удалось провести Отгрузку "+стрНомерЗаказа);
				ДобавитьОбновляемыйДокумент(РеализацияДокОбъект, "2=Запись, 3=Проведение, 4=Запись, 5=Запись", НоваяСтараяРеализация, "!!!Ошибка: Не удалось провести Отгрузку "+стрНомерЗаказа);
				//--- БАО 05.06.2017 №792

				
                
                //+++++Серегин М.В. 18.02.2016 10:45:33 
				
				//+++ БАО 01.06.2017 №926
				//ХХХ тоже можно оптимизировать
				//--- БАО 01.06.2017 №926
				//УчИтого = ?(Smv.ПолучитьПараметрыКонтрагента(КонтрагентМагазин,ТекущаяДата()).ПриёмИтогоСКлиента = Истина, Истина,Ложь);
				//Если УчИтого Или МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Strizh_Ext Тогда
				//	РеализацияДокОбъект.УчитыватьИтогоКОплате = Истина;
				//Иначе
				//	РеализацияДокОбъект.УчитыватьИтогоКОплате = Ложь;
				//КонецЕсли;	
                //-----Серегин М.В. 18.02.2016 10:45:34 
			КонецЕсли;
			
		КонецЕсли;
		
		
		//заказы перестали удаляться  значениезаполнено(РеализацияДокОбъект)
		Если РеализацияДокОбъект <>неопределено тогда 
			попытка
				РеализацияДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(РеализацияДокОбъект.Ссылка);
				//--- БАО 27.06.2017 №1192

				//Если СтатусЗаказа = 3 или СтатусЗаказа = 4 Тогда
				//	РеализацияДокОбъект.Товары.Очистить(); //Муратов 10.05.2017
				//КонецЕсли;
				//+++ БАО 05.06.2017 №792
				Если СтатусЗаказа = 4 Тогда 
					РеализацияДокОбъект.Товары.Очистить();
				КонецЕсли;	
				//--- БАО 05.06.2017 №792
			исключение
				lem.ОтправитьНормальноеСообщениеАдминам("Запись документов", "!!!Ошибка записи реализации (новая)");
				ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!!Ошибка записи реализации (новая)");
			конецпопытки;
		конецесли;
		//заказы перестали удаляться
		
		
		Если СтатусЗаказа = 4 Тогда
			
			Если ВозвратДокОбъект <> Неопределено  Тогда
				
				ВозвратДокОбъект.Товары.Очистить();
				
			КонецЕсли;
			
			Если ПеремещениеДокОбъект <> Неопределено  Тогда
				
				ПеремещениеДокОбъект.Товары.Очистить();
				
			КонецЕсли;	
			
			Если ПоступлениеДокОбъект <> Неопределено  Тогда
				
				ПоступлениеДокОбъект.Товары.Очистить();
				ПоступлениеДокОбъект.ПодарочныеПозиции.Очистить();

			КонецЕсли;
			
			Если НайЗабор <> Неопределено  Тогда
				
				НайЗабор.Товары.Очистить();

			КонецЕсли;
			
		КонецЕсли;	
		//--- БАО 10.07.2017 №792

		
		
		//+++ БАО 23.05.2017 №876 
		Если флРазрешеноОбновлениеЗаказа И РеализацияДокОбъект <> Неопределено И РеализацияДокОбъект.Модифицированность()  = Ложь  Тогда
				
				//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
				//--- НаборДопСведений = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
				//--- НаборДопСведений.Отбор.Заказ.Установить(РеализацияДокОбъект.Ссылка);
				//--- НаборДопСведений.Прочитать();
				
				ЗаписьДополнительныеПараметрыЗаказа.Вставить("Заказ", РеализацияДокОбъект.Ссылка);
				
				
				//--- Если НаборДопСведений.Количество() Тогда
					
					//+++ БАО 05.06.2017 №926
					//--- НаборДопСведений[0].СтавкаНДСФЗПоДоставке = bao.ВернутьСтавкуНДСПоКодуАдминки(Заказ.NDSDelivery_Ч); 
					//--- БАО 05.06.2017 №926
					
				//--- Иначе
					
					//--- Нов = НаборДопСведений.Добавить();
					
					//--- Нов.Заказ = РеализацияДокОбъект.Ссылка;
					//--- Нов.СтавкаНДСФЗПоДоставке = bao.ВернутьСтавкуНДСПоКодуАдминки(Заказ.NDSDelivery_Ч);
					
				//--- КонецЕсли;											
				//--- НаборДопСведений.Записать();
				
				ЗаписьДополнительныеПараметрыЗаказа.Вставить("СтавкаНДСФЗПоДоставке", baoВызовСервера.ВернутьСтавкуНДСПоКодуАдминки(Заказ.NDSDelivery_Ч)); 
				
				//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа						
		КонецЕсли;		
		//--- БАО 23.05.2017 №876 	
		
		// Обработка строк заказа
		флЕстьСтроки = Н < ТабличнаяЧастьЗаказов.Количество();
		ИтСум = 0;
		////////////// Дефолтный склад
		Если НЕ ЗначениеЗаполнено(Заказ.stockId_Ч) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
			НайденныеСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
			
			//+++ БАО 01.06.2017 №926
			//магазин не нашли или новый
			Если НайденнаяСтрокаСписокМагазинов = Неопределено Или (НайденнаяСтрокаСписокМагазинов <> Неопределено И НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию = Неопределено) Тогда
			//--- БАО 01.06.2017 №926	
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СкладыМагазиновПоУмолчанию.СкладМагазина
			//+++ БАО 01.06.2017 №926
			|,  СкладыМагазиновПоУмолчанию.СкладМагазина.Код Как КодСкладМагазинаПоУмолчанию
			//--- БАО 01.06.2017 №926
			|ИЗ
			|	РегистрСведений.СкладыМагазиновПоУмолчанию КАК СкладыМагазиновПоУмолчанию
			|ГДЕ
			|	СкладыМагазиновПоУмолчанию.Магазин = &Магазин");
			Запрос.УстановитьПараметр("Магазин", КонтрагентМагазин);
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				СкладМагазинаЗаказа = Результат.СкладМагазина;
				Для Каждого СтрТовар Из НайденныеСтроки Цикл
					//+++ БАО 01.06.2017 №926
					//---СтрТовар.stockId_Ч = Число(СкладМагазинаЗаказа.Код);
					СтрТовар.stockId_Ч = Число(Результат.КодСкладМагазинаПоУмолчанию);
					//--- БАО 01.06.2017 №926
				КонецЦикла;							
			КонецЕсли;
			
			//+++ БАО 01.06.2017 №926
			ИначеЕсли	НайденнаяСтрокаСписокМагазинов <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию) Тогда  
				
				Для Каждого СтрТовар Из НайденныеСтроки Цикл
					СтрТовар.stockId_Ч = Число(НайденнаяСтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию);
				КонецЦикла;	
			
			КонецЕсли;
			//--- БАО 01.06.2017 №926
			
		КонецЕсли;
		
		//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
		//Лог("-----------------Начало блока добавления товаров по заказу: " + Заказ.orderId_Ч);
		//+++++Серегин М.В. 06.11.2015 18:33:31 
		#Область ОбработкаСтрок
		
		Пока флЕстьСтроки Цикл
			//+++++Серегин М.В. 09.11.2015 10:07:00 
			// Лог("-----------------Проверка флЕстьСтроки прошла успешно");
			//-----Серегин М.В. 09.11.2015 10:07:02 
			Стр = ТабличнаяЧастьЗаказов[Н];
			Если Стр.orderId_Ч = НомерЗаказа Тогда
				//+++++Серегин М.В. 09.11.2015 10:07:05 
				//Лог("-----------------Проверка Стр.orderId_Ч = НомерЗаказа прошла успешно");
				//-----Серегин М.В. 09.11.2015 10:07:07 
				Количество = Стр.cnt_Ч;
				Цена = Стр.Price_Ч;
				КодСайта = Стр.skuId_Ч;
				НачКоличество = Стр.fixedCount_Ч;
				//+++ БАО 01.06.2017 №926
				//---Товар = Справочники.Номенклатура.НайтиПоКоду(ЧислоКСтрокеБезПробелов(Стр.skuId_Ч));
				НайденнаяСтрокаТовар = СписокНоменклатура.Получить(ЧислоКСтрокеБезПробелов(Стр.skuId_Ч)); 
				Если НайденнаяСтрокаТовар <> Неопределено Тогда 
					Товар = НайденнаяСтрокаТовар.Номенклатура;
					Артикул = НайденнаяСтрокаТовар.Артикул;
					ЕдиницаХраненияОстатков = НайденнаяСтрокаТовар.ЕдиницаХраненияОстатков;
					НДСТовара = НайденнаяСтрокаТовар.НДСТовара;
				Иначе 
					Товар =  Справочники.Номенклатура.ПустаяСсылка();
					Артикул = Неопределено;
					ЕдиницаХраненияОстатков = Неопределено;
					НДСТовара = Неопределено;
				КонецЕсли;	
				//--- БАО 01.06.2017 №926
				
				//+++ Костя 25.08.2015
				// Склад магазина
				//+++ БАО 01.06.2017 №926
				//---СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду(Стр.stockId_Ч);
				СкладМагазина = СписокСкладМагазина.Получить(Стр.stockId_Ч);
				//--- БАО 01.06.2017 №926
				
				//--- Костя 25.08.2015
				
				//+++ БАО 01.06.2017 №926
				//--- //+++ БАО 23.05.2017 №876
				//--- СтавкаНДС = bao.ВернутьСтавкуНДСПоКодуАдминки(Стр.NDS_Ч);
				//--- //--- БАО 23.05.2017 №876
				СтавкаНДС = СписокСтавкаНДС.Получить(Строка(Стр.NDS_Ч));
				//+++ БАО 01.06.2017 №926
				
				Если Товар <> Справочники.Номенклатура.ПустаяСсылка() Тогда
					//+++ БАО 01.06.2017 №926
					//---ПроверитьИзменениеАртикула(Стр, Товар);
					ПроверитьИзменениеАртикула(Стр, Товар, Артикул);
					//--- БАО 01.06.2017 №926
				КонецЕсли;	
				
				Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
					
					//+++ БАО 01.06.2017 №926
					//---Товар = ЗаписатьНоменклатуру(Стр, Заказ, Стр.skuId_Ч, Стр.Shop_Ч);//Бухаров
					ЕдИзм = Неопределено;
					Товар = ЗаписатьНоменклатуру(Стр, Заказ, Стр.skuId_Ч, Стр.Shop_Ч, Справочники.Номенклатура.ПустаяСсылка(), Неопределено, ЕдИзм);
					ЕдиницаХраненияОстатков = ЕдИзм;
					Артикул = стр.articul; 
					НДСТовара = Перечисления.СтавкиНДС.НДС18;
					
					СписокНоменклатура.Вставить(ЧислоКСтрокеБезПробелов(стр.skuId_Ч), Новый Структура("Номенклатура, Артикул, ЕдиницаХраненияОстатков, НДСТовара", Товар, Артикул, ЕдиницаХраненияОстатков, НДСТовара));
					//--- БАО 01.06.2017 №926
					Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
						Лог("!!! Не найден товар с кодом " + ЧислоКСтрокеБезПробелов(Стр.skuId_Ч) + ". Загрузка прервана.");
						НормальныйХодВыполнения = Ложь;
						Возврат;
					КонецЕсли;
				КонецЕсли;				
				
				Если Не ЗначениеЗаполнено(Количество) Тогда
					//+++++Серегин М.В. 09.11.2015 10:07:52 
					//Лог("-----------------Количество = 0");
					//-----Серегин М.В. 09.11.2015 10:07:53 
					Количество = 0;
				КонецеСли;	
				
				Если флЗабор тогда
					Нов = НайЗабор.Товары.Добавить();
					Нов.Номенклатура = Товар;
					Нов.Количество = Количество;
					Нов.Цена = Цена;
					Нов.Сумма = Нов.Количество*Нов.Цена;
					Нов.Вес = Стр.weight_Ч;
				КонецеСли;	
				
				Если флФрахт тогда
					Нов = НайФрахт.Товары.Добавить();
					Нов.Номенклатура = Товар;
					Нов.Количество = Количество;
					Нов.Цена = Цена;
					Нов.Сумма = Нов.Количество*Нов.Цена;
					Нов.Вес = Стр.weight_Ч;
				КонецЕСли;
				Если флРазрешеноОбновлениеЗаказа Тогда
					//+++++Серегин М.В. 09.11.2015 10:08:04 
					//Лог("-----------------Проверка флРазрешеноОбновлениеЗаказа прошла успешно");
					//-----Серегин М.В. 09.11.2015 10:08:06 
					
					Если (Количество > 0) Тогда // И (Цена > 0)
						//+++++Серегин М.В. 09.11.2015 10:08:34 
						//Лог("-----------------Проверка (Количество > 0) прошла успешно");
						//-----Серегин М.В. 09.11.2015 10:08:36 
						//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
						//Лог("--------------------Начало добавления товаров по заказу: " + Заказ.orderId_Ч);
						//-----Серегин М.В. 06.11.2015 18:34:48 
						
						//+++ БАО 23.05.2017 №876
						
						//---ЗаполнитьТабличныеЧастиПучкаДокументов(Товар, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost); 
						ЗаполнитьТабличныеЧастиПучкаДокументов(Товар, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost, СтавкаНДС, ЕдиницаХраненияОстатков, НДСТовара); 
						
						//--- БАО 23.05.2017 №876
						
						//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
						//Лог("--------------------Конец добавления товаров по заказу: " + Заказ.orderId_Ч);
						//-----Серегин М.В. 06.11.2015 18:34:48 
					КонецЕсли;
					
					Если (Количество < 0) Тогда // И (Цена > 0)
						Если (СтатусЗаказа <> 4) И Не флЗаполнятьВозврат Тогда
							Если ВозвратДок = Неопределено Тогда //Не ЗначениеЗаполнено(ВозвратДок) Тогда // Костя 14092015
								ВозвратДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
							Иначе
								ВозвратДокОбъект = ВозвратДок.ПолучитьОбъект(); // Костя 140915
								Если ВозвратДокОбъект.Товары.Количество() > 0 Тогда
									ВозвратДокОбъект.Товары.Очистить();
									флНужноЗаписыватьВозврат = Истина;
								КонецЕсли;
							КонецЕсли;
							
							ВозвратДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа) - 10 * 60;
							ВозвратДокОбъект.Номер                        = стрНомерЗаказа;
							ВозвратДокОбъект.ОтражатьВУправленческомУчете = Истина;
							ВозвратДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
							ВозвратДокОбъект.ОтражатьВНалоговомУчете      = Истина;
							ВозвратДокОбъект.Организация                  = НашаОрганизация;
							ВозвратДокОбъект.СкладОрдер                   = СкладХраниения;
							ВозвратДокОбъект.ТипЦен                       = РозничныйТипЦен;
							ВозвратДокОбъект.ВалютаДокумента              = Рубли;
							ВозвратДокОбъект.КурсВзаиморасчетов           = 1;
							ВозвратДокОбъект.КратностьВзаиморасчетов      = 1;
							ВозвратДокОбъект.УчитыватьНДС                 = Истина;
							ВозвратДокОбъект.СуммаВключаетНДС             = Истина;
							ВозвратДокОбъект.Контрагент                   = Контрагент;
							ВозвратДокОбъект.ДоговорКонтрагента           = Договор;
							ВозвратДокОбъект.Комментарий                  = Заказ.comment + " /##/ " + Заказ.userComment;
							ВозвратДокОбъект.ВидПоступления               = Перечисления.ВидыПоступленияТоваров.НаСклад;
							ВозвратДокОбъект.НомерВнешнегоЗаказа          = НомерВнешнегоЗаказа;
							
							флЗаполнятьВозврат = Истина;
							Если Не ОбрабатыватьТолькоЗаказы Тогда
								ДобавитьОбновляемыйДокумент(ВозвратДокОбъект, "2=Запись, 3=Проведение, 5=Запись", "   возврат товаров", "!!!Ошибка: Не удалось провести Возврат "+стрНомерЗаказа);
							КонецЕсли;	
						КонецЕсли;
						
						Если флЗаполнятьВозврат Тогда
							//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
							//Лог("--------------------Начало добавления возвратных товаров по заказу: " + Заказ.orderId_Ч);
							//-----Серегин М.В. 06.11.2015 18:34:48 
							// Михушкин - исправление незаполнения СкладаМагазина в ТЧ Товары - 31.05.2016 --->> 
							Если НЕ ЗначениеЗаполнено(СкладМагазина) И ЗначениеЗаполнено(Заказ.stockId_Ч) Тогда
								СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч);	
							КонецЕсли;
							// <<--- Михушкин 
							
							//+++ БАО 01.06.2017 №926
							//---ЗаполнитьТабличныеЧастиПучкаДокументов(Товар, -Количество, -Количество, Цена, Истина, ТоварRestore, Стр.weight_Ч, СкладМагазина);//Бухаров\
							ЗаполнитьТабличныеЧастиПучкаДокументов(Товар, -Количество, -Количество, Цена, Истина, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost, СтавкаНДС, ЕдиницаХраненияОстатков, НДСТовара); 
							//--- БАО 01.06.2017 №926
							
							//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
							
							//Лог("--------------------Конец добавления возвратных товаров по заказу: " + Заказ.orderId_Ч);
							//-----Серегин М.В. 06.11.2015 18:34:48 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			н = н + 1;
			ИтСум = ИтСум + Цена*Количество;
			флЕстьСтроки = н < ТабличнаяЧастьЗаказов.Количество();
		КонецЦикла;
		//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
		//Лог("-----------------Конец блока добавления товаров по заказу: " + Заказ.orderId_Ч);
		//-----Серегин М.В. 06.11.2015 18:34:48 
		
		//#Область ОбработкаСтрок
		#КонецОбласти
		ДатаДоставкиОбновлена = Ложь;
		
		Если флРазрешеноОбновлениеЗаказа или флЗабор Или флФрахт Тогда
			
			
			Для Каждого эл Из ПучокДокументов Цикл
				Док = эл["Док"];       //Док, Действия, КомментарийДействия, СообщениеОбОшибке
				Действия = эл["Действия"];
				РежимЗаписи = ПолучитьРежимЗаписи(Действия, СтатусЗаказа);
                
                //+++++Серегин М.В. 18.02.2016 10:58:49
				Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
					//+++ БАО 01.06.2017 №926
					//ХХХ тут тоже можно оптимизировать
					//--- БАО 01.06.2017 №926
                    ПараметрыКонтрагента = smv.ПолучитьПараметрыКонтрагента(Док.Владелецтовара, ТекущаяДата());
                    Если ПараметрыКонтрагента.ВычисляемыйЗапретЧастичногоВыкупа = Истина Тогда
                        Если Заказ.total_Ч <> Док.Товары.Итог("Сумма")+ Док.Услуги.Итог("Сумма") Тогда
                            Док.ЗапретЧастичногоВыкупа = Истина;
                        КонецЕсли;
                    Иначе
                        Если ПараметрыКонтрагента.ЗапретЧастичногоВыкупа = Истина Тогда
                            Док.ЗапретЧастичногоВыкупа = Истина;
                        КонецЕсли;
					КонецЕсли;
					
					// Михушкин --->>
					//+++ БАО 01.06.2017 №926
					//---Если Док.ВладелецТовара = Справочники.Контрагенты.НайтиПоКоду("Shop_602") Тогда
					Если Док.ВладелецТовара = Shop_602 Тогда
					//--- БАО 01.06.2017 №926	
						
						Док.ЗапретЧастичногоВыкупа = Заказ.isPartialGiveoutDisabled;
					КонецЕсли;
					// <<--- Михушкин
                КонецЕсли;
                //-----Серегин М.В. 18.02.2016 10:58:50 
                
				Если РежимЗаписи = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Попытка
					Док.Записать(РежимЗаписи);
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(Док.Ссылка);
					//--- БАО 27.06.2017 №1192

					Комментарий = эл["КомментарийДействия"];
					Если ЗначениеЗаполнено(Комментарий) Тогда
						Лог(Комментарий);
					КонецЕсли;
					//Серегин М.В. 24.06.2015 17:01:16 добавление услуг
					Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда 
						//+++ БАО 01.06.2017 №926
						//ХХХ тут тоже можно оптимизировать
						//--- БАО 01.06.2017 №926
						smv.СинхронизацияУслугиПоЗаказам(Док.Ссылка);  
						
						Парам = Новый Структура;
						Парам.Вставить("Заказ", Док.Ссылка);
						Парам.Вставить("ОценочнаяСтоимость", Заказ.assessedCost_Ч);
						Парам.Вставить("КОплатеКлиентом"   , Заказ.total_Ч);			
						// Михушкин - 12.05.2016 --->> 
						Парам.Вставить("ПодъемОплачен"   , Заказ.liftingIsPayed);
						Если ЗначениеЗаполнено(Заказ.orderIDAdditional) Тогда			
							Парам.Вставить("ДополнительныйНомерЗаказа", Заказ.orderIDAdditional);
						КонецЕсли;			
						// <<--- Михушкин 	
						
						//+++ БАО 01.06.2017 №926
						//--- //+++ БАО 23.05.2017 №876
						//--- Парам.Вставить("СтавкаНДСФЗПоДоставке"   , bao.ВернутьСтавкуНДСПоКодуАдминки(Заказ.NDSDelivery_Ч));
						//--- //--- БАО 23.05.2017 №876
						Парам.Вставить("СтавкаНДСФЗПоДоставке", СписокСтавкаНДС.Получить(Строка(Заказ.NDSDelivery_Ч)));
						//--- БАО 01.06.2017 №926
						
						
						
						
                        ////+++++Серегин М.В. 24.03.2016 15:33:00										
						
						//+++ БАО 01.06.2017 №926
						//---Если Док.ВладелецТовара = Справочники.Контрагенты.НайтиПоКоду("Shop_612") Тогда
						//Если Док.ВладелецТовара = Shop_612 Тогда
						Если НЕ ПараметрыСеанса.oz_МагазинOZON.Пустая() Тогда
							Если Док.ВладелецТовара = ПараметрыСеанса.oz_МагазинOZON Тогда
								// Михушкин - 04.04.2016 --->> 
								//Штрихкод = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC bp_getOrderOzonBarcode "+СокрЛП(Док.Номер));
								//Парам.Вставить("ШтрихкодOZON"   , Штрихкод[0].BarCode);
								
								//+++ БАО 01.06.2017 №926
								//ХХХ тут тоже можно оптимизировать
								//--- БАО 01.06.2017 №926
								
								Данные = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC bp_getOrderOzonInfo "+СокрЛП(Док.Номер));	
								
								Если Данные.Количество() Тогда
									Парам.Вставить("nameOZON"   	, Данные[0].name);
									Парам.Вставить("ЧастичныйВыкупЗапрещен" , Данные[0].isPartialGiveoutDisabled);
									Парам.Вставить("ВозвратЗапрещен" , Данные[0].isClientReturnDisabled);
									Парам.Вставить("ШтрихкодOZON"   , Данные[0].BarCode);						
								КонецЕсли;
							КонецЕсли;
							
							// <<--- Михушкин 
						КонецЕсли;
                        ////-----Серегин М.В. 24.03.2016 15:33:01 
						
						// Михушкин - запись данных OKEY для Axiomus - 06.04.2016--->>
						//+++ БАО 01.06.2017 №926
						//--- Если Док.ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
						Если ТерминалДоставки = РегиональныеТерминалы_СПбСтриж Тогда
						//--- БАО 01.06.2017 №926	
							Если НЕ Док.СтатусИнтернетМагазина = 4 Тогда // если заказ не отклонен
								//+++ БАО 01.06.2017 №926
								//ХХХ тут тоже можно оптимизировать
								//--- БАО 01.06.2017 №926
								Данные = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC bp_getAxiomusOrderInfo "+СокрЛП(Док.Номер));
								Если Данные.Количество() Тогда	
									Парам.Вставить("okey", Данные[0].okey);
								КонецЕсли;
							КонецЕсли;
						    //Парам.Вставить("axiomusId"  , Данные[0].axiomusId);   // пока не ясно нужен или нет
						КонецЕсли;
						// <<--- Михушкин 
						
						
						// Михушкин - Установка признака предварительного закрытия - 30.06.2016
						
						//+++ БАО 01.06.2017 №926
						//Записан новый магаз
						Если ПредварительноеЗакрытиеЗаказов = Неопределено Тогда 
							//--- БАО 01.06.2017 №926
							
							ЗапросПризнакЗакрытия = Новый Запрос("ВЫБРАТЬ
							|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов, ЛОЖЬ) КАК ПредварительноеЗакрытие
							|ИЗ
							|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних");
							ЗапросПризнакЗакрытия.УстановитьПараметр("период", Док.Дата);	
							ЗапросПризнакЗакрытия.УстановитьПараметр("Контрагент", Док.ВладелецТовара);
							РезПризнакЗакрытия = ЗапросПризнакЗакрытия.Выполнить().Выбрать();
							Если РезПризнакЗакрытия.Следующий() Тогда
								Парам.Вставить("ПредварительноеЗакрытие" , РезПризнакЗакрытия.ПредварительноеЗакрытие);	
								
								//+++ БАО 06.06.2017 №926
								НайденнаяСтрокаСписокМагазинов.ПредварительноеЗакрытие = РезПризнакЗакрытия.ПредварительноеЗакрытие;
								//--- БАО 06.06.2017 №926
								
							КонецЕсли;
							
							//+++ БАО 01.06.2017 №926
						Иначе
							
							Парам.Вставить("ПредварительноеЗакрытие" , ПредварительноеЗакрытиеЗаказов);	
							
						КонецЕсли;
						//--- БАО 01.06.2017 №926
						
						
						
						//// Михушкин --->> 
						//НайБПМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Док.Номер));
						//Если ЗначениеЗаполнено(НайБПМестнаяДоставка) Тогда
						//	
						//	Если ЗначениеЗаполнено(НайБПМестнаяДоставка.ТочкаОтправления) И ЗначениеЗаполнено(НайБПМестнаяДоставка.ТочкаПрибытия) Тогда								
						//		АдресОтправления = НайБПМестнаяДоставка.ТочкаОтправления.Адрес;
						//		АдресПрибытия = НайБПМестнаяДоставка.ТочкаПрибытия.Адрес;		
						//		
						//		РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(Формат(АдресОтправления.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресОтправления.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."));
						//		Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда							
						//			Парам.Вставить("РасстояниеОтБазыПоДорогам" , РасстояниеПоДорогам);								
						//		КонецЕсли;
						//	КонецЕсли;	                                                                 					
						//КонецЕсли;			
						//// <<--- Михушкин 
						
						
                        //+++++Серегин М.В. 20.02.2016 15:57:06 
                        Парам.Вставить("СОжиданием", ?(Число(Заказ.serviceID)=8,Истина,Ложь));
						
						//Геннадий #4511 26.03.2021 ->
                        Парам.Вставить("ПодписаниеИВозвратСопрДокументов", ?(Число(Заказ.serviceIDdoc) = 24, Истина, Ложь));
						//Геннадий <-
						
						//-----Серегин М.В. 20.02.2016 15:57:08 
						
						//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						ЗаписьДополнительныеПараметрыЗаказа.Очистить();
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("Заказ", Парам.Заказ);
						Для Каждого СтрокаПарам Из Парам Цикл 
							ЗаписьДополнительныеПараметрыЗаказа.Вставить(СтрокаПарам.Ключ, СтрокаПарам.Значение);
						КонецЦикла;	
						//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа

                        
						////+++ Костя 070915 // Запись склада магазина реквизит- РС				
						//+++ Костя 261115
						Если Заказ.stockId_Ч > 0 Тогда
							//+++ БАО 01.06.2017 №926
							//--- Парам.Вставить("СкладМагазина", Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч));
														
							//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
							//--- Парам.Вставить("СкладМагазина", Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч));
							ЗаписьДополнительныеПараметрыЗаказа.Вставить("СкладМагазина", Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч));
							//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа

							//--- БАО 01.06.2017 №926
							Лог("---- Записан доп. параметр к заказу " 
							//+++ БАО 01.06.2017 №926
							//--- +Строка(Док.Номер) 
							+ "  СкладМагазина: " + Заказ.stockId_Ч); 
							//--- + "  СкладМагазина: " + СкладМагазина);// Костя 251115								
							//+ Строка(стрНомерЗаказа)); 
							//--- БАО 01.06.2017 №926
							
							
						Иначе
							//+++ БАО 01.06.2017 №926
							Если НайденнаяСтрокаСписокМагазинов = Неопределено Или (НайденнаяСтрокаСписокМагазинов <> Неопределено И НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию = Неопределено) Тогда
								//--- БАО 01.06.2017 №926
								Запрос = Новый Запрос(
								"ВЫБРАТЬ
								|	СкладыМагазиновПоУмолчанию.СкладМагазина
								|ИЗ
								|	РегистрСведений.СкладыМагазиновПоУмолчанию КАК СкладыМагазиновПоУмолчанию
								|ГДЕ
								|	СкладыМагазиновПоУмолчанию.Магазин = &Магазин");
								Запрос.УстановитьПараметр("Магазин", Док.ВладелецТовара);
								Результат = Запрос.Выполнить().Выбрать();
								Если Результат.Следующий() Тогда
									СкладМагазинаЗаказа = Результат.СкладМагазина;
								//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа 
								//--- Парам.Вставить("СкладМагазина", СкладМагазинаЗаказа);
								//--- lem.ЗаписатьДопПараметрыЗаказа(парам);
								ЗаписьДополнительныеПараметрыЗаказа.Вставить("СкладМагазина", СкладМагазинаЗаказа);
								//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа

									Лог("---- Записан доп. параметр к заказу " 
									//+++ БАО 01.06.2017 №926
									//---+Строка(Док.Номер) 
									//---+ "  СкладМагазина: " + Строка(СкладМагазинаЗаказа));     // Костя 251115								
									+ Строка(стрНомерЗаказа) + "  СкладМагазина: " + Заказ.stockId_Ч); 
									//--- БАО 01.06.2017 №926
								КонецЕсли;
								
								//+++ БАО 01.06.2017 №926
							ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию) Тогда 
								СкладМагазинаЗаказа = НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию;
								//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа 
								//--- Парам.Вставить("СкладМагазина", СкладМагазинаЗаказа);
								ЗаписьДополнительныеПараметрыЗаказа.Вставить("СкладМагазина", СкладМагазинаЗаказа);
								//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа

	
								Лог("---- Записан доп. параметр к заказу " 
								+ Строка(стрНомерЗаказа) + "  СкладМагазина");
							КонецЕсли;
							//--- БАО 01.06.2017 №926
						КонецЕсли;
						////+++ Костя 261115
						//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						//--- lem.ЗаписатьДопПараметрыЗаказа(парам);
						//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа

						Лог("---- Записан доп. параметр к заказу " 
						//+++ БАО 01.06.2017 №926
						//--- +Строка(Док.Номер) 
						+Строка(стрНомерЗаказа) 
						//--- БАО 01.06.2017 №926
						+ "  ОценочнаяСтоимость: " + Строка(Заказ.assessedCost_Ч) 
						+ "  КОплатеКлиентом: " + Строка(Заказ.total_Ч));     // Костя 251115
						Док.СформироватьДвиженияПоШтрихкодам();//+++ Костя 06112015 _ ШтрихКоды       
					КонецЕсли;
					//Серегин М.В. 24.06.2015 17:02:08 
					
					//// Запись Причины отклонения заказа в системе
					Если Заказ.ReasonRefusalID_Ч > 0 Тогда
						Если Заказ.ReasonRefusalID_Ч = 1 Тогда 
							ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненМагазином;
						ИначеЕсли Заказ.ReasonRefusalID_Ч = 2 Тогда 
							ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненПоПисьмуМагазина;
						ИначеЕсли Заказ.ReasonRefusalID_Ч = 3 Тогда 
							ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненЗаСрокомДавности;
						ИначеЕсли Заказ.ReasonRefusalID_Ч = 4 Тогда 
							ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.Дубль;						
						КонецЕсли;
						Парам = Новый Структура;
						Парам.Вставить("Заказ", РеализацияДокОбъект.Ссылка);
						Парам.Вставить("ПричинаОтклоненияЗаказа", ПричинаОтклоненияЗаказа);
						
						//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						//--- // Михушкин - исправление порочной логики перезаписи доп параметров --->>  
						//--- lem.ЗаписатьДопПараметрыЗаказа(парам);			
						//--- НабПарам = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
						//--- НабПарам.Отбор.Заказ.Установить(парам.Заказ);
						//--- НабПарам.Прочитать();
						//--- Если НабПарам.Количество() Тогда	
						//--- 	НабПарам[0].Заказ = парам.Заказ;
						//--- 	НабПарам[0].ПричинаОтклоненияЗаказа = парам.ПричинаОтклоненияЗаказа;
						//--- Иначе
						//--- 	Нов = НабПарам.Добавить();
						//--- 	ЗаполнитьЗначенияСвойств(Нов, парам);
						//--- КонецЕсли;											
						//--- НабПарам.Записать();
						//--- // <<--- Михушкин
						
						ЗаписьДополнительныеПараметрыЗаказа.Очистить();
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("Заказ", парам.Заказ); 
						Для Каждого СтрокаПарам Из Парам Цикл 
							ЗаписьДополнительныеПараметрыЗаказа.Вставить(СтрокаПарам.Ключ, СтрокаПарам.Значение);
						КонецЦикла;	
						
						//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа


					КонецЕсли;
					
											 
					
					//--- Костя 070915 //
					Если НовыйОбъект И (ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(Док) = Тип("ДокументОбъект.Фрахт") Или ТипЗнч(Док) = Тип("ДокументОбъект.ЗаборТовара")) Тогда
						МассивЗагруженныхНомеровЗаказов.Добавить(СокрЛП(Док.Номер));
					КонецеСли;
					
					//// Проверка количества товаров // Костя 210915 /// -> Не корректная проверка
					//Если (ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(Док) = Тип("ДокументОбъект.Фрахт") Или ТипЗнч(Док) = Тип("ДокументОбъект.ЗаборТовара")) Тогда
					//	ТоварыКоличествоИзАдминки = ТабличнаяЧастьЗаказов.Количество();
					//	ТоварыКоличествоВДоке     = Док.Товары.Количество();
					//	Если ТоварыКоличествоИзАдминки > ТоварыКоличествоВДоке Тогда
					//		Лог("!!! Ошибка ТЧ Товары!!! Не все товары загружены, заказ: " + Строка(Док.Номер));
					//	КонецЕсли;
					//КонецЕсли;
					//// Проверка количества товаров-------
					
				Исключение
					Лог(эл["СообщениеОбОшибке"] + Символы.ПС + ОписаниеОшибки());
					ДобавитьОшибочныйЗаказ(НомерЗаказа, эл["СообщениеОбОшибке"] + Символы.ПС + ОписаниеОшибки());
					//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					lem.ОтправитьНормальноеСообщениеАдминам("Запись документов", эл["СообщениеОбОшибке"] + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;	
			КонецЦикла;
			
			// теперь экземпляры получаем в момент получения перевозки    26.12.2018
			
			// Михушкин - Загрузка экземпляров товаров --->> 
			//Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			//	//+++ БАО 01.06.2017 №926
			//	//--- Если Док.ВладелецТовара = Справочники.Контрагенты.НайтиПоКоду("Shop_612") Тогда			
			//	//Если Док.ВладелецТовара = Shop_612 Тогда			
			//	Если НЕ ПараметрыСеанса.oz_МагазинOZON.Пустая() Тогда
			//		Если Док.ВладелецТовара = ПараметрыСеанса.oz_МагазинOZON Тогда
			//			
			//			//--- БАО 01.06.2017 №926	
			//			
			//			//+++ БАО 01.06.2017 №926
			//			//ХХХ тут тоже можно оптимизировать
			//			//--- БАО 01.06.2017 №926
			//			mas.ЗаполнитьРСoz_ЭкземплярыТоваровЗаказов(Док);		
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;	
			// <<--- Михушкин
			
				
						
			ОтразитьИсториюСостава = Ложь;
			
			Если ЗначениеЗаполнено(РеализацияДок) Тогда
				Если ЗначениеЗаполнено(РеализацияДок.Ссылка) Тогда
					ОтразитьИсториюСостава = Истина;
				КонецЕСли;	
			КонецеСли;		
			Если РеализацияДокОбъект <> Неопределено Тогда
				Если ЗначениеЗаполнено(РеализацияДокОбъект.Ссылка) Тогда
					ОтразитьИсториюСостава = Истина;
				КонецЕСли;	
			КонецеСли;		
			
			
			Если ОтразитьИсториюСостава Тогда
				Если Заказ.serviceDelivery_Ч <> 2 и Заказ.serviceDelivery_Ч <> 3 Тогда
					Если ЗначениеЗаполнено(РеализацияДок) Тогда
						lem.ОтразитьСоставЗаказаВИстории(РеализацияДок, РеализацияДок, Ложь);
					Иначе	
						lem.ОтразитьСоставЗаказаВИстории(РеализацияДокОбъект, РеализацияДокОбъект, Ложь);
					КонецеСли;	
				КонецеСли;
			КонецеСли;
            
            ////+++++Серегин М.В. 28.01.2016 12:00:57 было
            //Если ДатаДо <> Заказ.deliveryDate_Д Тогда
            
            //+++++Серегин М.В. 28.01.2016 12:01:08 стало
            Если ДатаДо = Неопределено Тогда
                ДатаДо = Дата("00010101");    
			КонецЕсли;
			
			
            Если НачалоДня(ДатаДо) <> НачалоДня(Заказ.deliveryDate_Д) Тогда //-----Серегин М.В. 28.01.2016 12:01:40 
                
				Если обМестнаяДоставка <> Неопределено Тогда
					Попытка
						Если обМестнаяДоставка.ЭтоНовый() Тогда
							обМестнаяДоставка.Записать();
						КонецеСли;
						ОбновитьДатуЗаказа(Заказ, обМестнаяДоставка, РеализацияДок);
						ДатаДоставкиОбновлена = Истина;
					исключение
					
					КонецПопытки;
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(обМестнаяДоставка.Ссылка);
					//--- БАО 27.06.2017 №1192

				КонецеСли;
			КонецеСли;	
			
			ВыборкаЗадачДоставки = Неопределено;
			Если флНужноЗаписыватьДоставку Тогда
				
				
				
				Если флНужноЗаписыватьГруз Тогда
					обМестнаяДоставка.Груз = обГруз.Ссылка;
				КонецЕсли;
				
				обМестнаяДоставка.СуммаБанковскойКомиссии = БанковскаяКомиссия;
				
				Попытка
					
					//======================долгий код
					
					
					
					Если Не (обМестнаяДоставка.ДоставкаВыполнена Или обМестнаяДоставка.ДоставкаВыполненаЧастично) Тогда
						// перенес в условие Если СтатусЗаказа = 4 Тогда lem 24.08.2016
						//ВыборкаЗадачДоставки = ПолучитьСписокЗадачДоставки(обМестнаяДоставка.Ссылка);
						//флНужноУдалитьДоставку = ВыборкаЗадачДоставки.Количество() > 0;
						// перенес в условие Если СтатусЗаказа = 4 Тогда lem 24.08.2016
						флУдалитьИзПланируемыхРейсов = Ложь;
						Если СтатусЗаказа = 4 Тогда
							обМестнаяДоставка.ДоставкаОтменена = Истина;
							обМестнаяДоставка.Завершен = Истина;
							флУдалитьИзПланируемыхРейсов = Истина;
							флНужноУдалитьДоставку=истина;
							// перенес в условие Если СтатусЗаказа = 4 Тогда lem 24.08.2016
							//ВыборкаЗадачДоставки = ПолучитьСписокЗадачДоставки(обМестнаяДоставка.Ссылка);
							//флНужноУдалитьДоставку = ВыборкаЗадачДоставки.Количество() > 0;
							// перенес в условие Если СтатусЗаказа = 4 Тогда lem 24.08.2016
						КонецЕсли;
						
						//флУдалитьИзПланируемыхРейсов = Ложь;
						Если СтатусЗаказа = 3 Тогда
							обМестнаяДоставка.Завершен = Истина;
							обМестнаяДоставка.ДоставкаВыполнена = Истина; 
							обМестнаяДоставка.ДоставкаОтменена = Ложь;
						КонецЕсли;
						
						Если СтатусЗаказа = 2 Тогда
							Если обМестнаяДоставка.Завершен Тогда
								обМестнаяДоставка.Завершен = Ложь;
								обМестнаяДоставка.ДоставкаОтменена = Ложь;
								Если Не флНужноУдалитьДоставку Тогда
									обМестнаяДоставка.Стартован = Ложь;
								КонецЕсли;
							КонецЕсли;
							флНужноУдалитьДоставку = Ложь;
						КонецЕсли;
						
						ЗапросПоискаРейсов = Новый Запрос;
						//херим нова
						//ЗапросПоискаРейсов.Текст =
						//"ВЫБРАТЬ
						//|	новаЗаданияРейсов.Рейс
						//|ИЗ
						//|	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
						//|ГДЕ
						//|	новаЗаданияРейсов.Доставка = &Доставка
						//|	И новаЗаданияРейсов.ЗаданиеВыполнено = ЛОЖЬ
						//|	И новаЗаданияРейсов.ЗаданиеВыполненоВручную = ЛОЖЬ
						//|	И новаЗаданияРейсов.Рейс.Стартован = ИСТИНА
						//|	И новаЗаданияРейсов.Рейс.РейсВыполнен = ЛОЖЬ
						//|	И новаЗаданияРейсов.Рейс.Завершен = ЛОЖЬ
						//|
						//|СГРУППИРОВАТЬ ПО
						//|	новаЗаданияРейсов.Рейс";
						//херим нова
						Если флУдалитьИзПланируемыхРейсов Тогда
							//+++ БАО 01.06.2017 №926
							//ХХХ  оптимизировать можно
							//--- БАО 01.06.2017 №926
							
							ЗапросПоискаРейсов.Текст = "ВЫБРАТЬ
							                           |	РейсЗаказы.Ссылка.Ссылка КАК Рейс,
							                           |	РейсЗаказы.Заказ.Ссылка КАК Заказ,
							                           |	РейсЗаказы.Ссылка.РейсМестнойДоставки КАК РейсМестнойДоставки,
							                           |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Транспорт КАК Транспорт,
							                           |	РейсЗаказы.Ссылка.ДатаРейса КАК ДатаНачала
							                           |ИЗ
							                           |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
							                           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
							                           |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
							                           |			ПО РейсЗаказы.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
							                           |		ПО (новаМестнаяДоставка.Номер = ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.РеализацияТоваровУслуг).Номер)
							                           |ГДЕ
							                           |	РейсЗаказы.Ссылка.ДатаРейса >= &ДатаРейса
							                           |	И РейсЗаказы.УдаленИзРейса = ЛОЖЬ
							                           |	И новаМестнаяДоставка.Ссылка = &Доставка
							                           |	И ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, ЛОЖЬ) = ЛОЖЬ";
							
							ЗапросПоискаРейсов.УстановитьПараметр("Доставка", обМестнаяДоставка.Ссылка);
							ЗапросПоискаРейсов.УстановитьПараметр("ДатаРейса", НачалоДня(ТекущаяДата()));
							ВыборкаРейсов = ЗапросПоискаРейсов.Выполнить().Выбрать();
							Пока ВыборкаРейсов.Следующий() Цикл
								Рейс = ВыборкаРейсов.Рейс;
								//Если НачалоДня(Рейс.ДатаНачала) <> НачалоДня(Заказ.deliveryDate_Д) Или флУдалитьИзПланируемыхРейсов Тогда
								//Если Час(ТекущаяДата()) < 10  Тогда	
									//херим нова
									
									//УдалительИзРейсов.Журнал = Новый Структура("Дерево", Новый Структура("Значение", Новый ДеревоЗначений));
									//УдалительИзРейсов.НачатьРедактирование(Рейс, Рейс.ПолучитьОбъект());
									//УдалительИзРейсов.УдалитьДоставку(Рейс, обМестнаяДоставка.Ссылка);
									//УдалительИзРейсов.ЗакончитьРедактирование(Рейс, Ложь);
									//
									//МассивОбновленияОбъектовУТЛ.Добавить(Рейс);
									
									//херим нова
									
									
									РейсОб = Рейс.ПолучитьОбъект();
									
									НайЗ = РейсОб.Заказы.Найти(ВыборкаРейсов.Заказ);
									Если НайЗ <> Неопределено Тогда
										РейсОб.Заказы.Удалить(НайЗ);
									КонецеСли;	
									
									РейсОб.Записать(РежимЗаписиДокумента.Запись);
									
									//+++ БАО 27.06.2017 №1192
									ДобавитьВХранилищеОбъектовСравнения(РейсОб.Ссылка);
									//--- БАО 27.06.2017 №1192

									
									Если РейсОб.Проведен Тогда
										РейсОб.Записать(РежимЗаписиДокумента.Проведение);
									КонецеСли;	
									
									Лог("   --- Доставка удалена из рейса " + Рейс.Транспорт + " от " + Формат(ВыборкаРейсов.ДатаНачала, "ДЛФ=DD"));
									//Серегин М.В. 01.07.2015 17:37:21
									ПериодОтбор = ТекущаяДата();
									//РеализацияОтбор = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(обМестнаяДоставка.Ссылка.Номер);
									//Если ЗначениеЗаполнено(РеализацияОтбор) Тогда
									
									НаборЗаписей = РегистрыСведений.УдаленныеДоставкиИзРейсов.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.Период.Установить(ПериодОтбор);
									НаборЗаписей.Отбор.Реализация.Установить(ВыборкаРейсов.Заказ);
									Запись = НаборЗаписей.Добавить();
									Запись.Период = ПериодОтбор;
									Запись.Реализация = ВыборкаРейсов.Заказ;
									Запись.Рейс = ВыборкаРейсов.РейсМестнойДоставки;
									Запись.Транспорт = ВыборкаРейсов.Транспорт;
									НаборЗаписей.Записать();
									
									//+++ БАО 27.06.2017 №1192
									ДобавитьВХранилищеОбъектовСравнения(НаборЗаписей)
									//--- БАО 27.06.2017 №1192

									//КонецЕсли;
									//Серегин М.В. 01.07.2015 17:37:22 
									
								//КонецЕсли;
							КонецЦикла;
						КонецеСли;
					Иначе
						Лог("   Доставка завершена");
					КонецЕсли;
					обМестнаяДоставка.Записать();
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(обМестнаяДоставка.Ссылка);
					//--- БАО 27.06.2017 №1192

					
					//херим нова
					//МассивОбновленияОбъектовУТЛ.Добавить(обМестнаяДоставка);
					//херим нова
					
					Если ДатаДо <> Заказ.deliveryDate_Д И НЕ ДатаДоставкиОбновлена Тогда
						Если обМестнаяДоставка.ЭтоНовый() Тогда
							обМестнаяДоставка.Записать();
							
							//+++ БАО 27.06.2017 №1192
							ДобавитьВХранилищеОбъектовСравнения(обМестнаяДоставка.Ссылка);
							//--- БАО 27.06.2017 №1192

						КонецеСли;
						ОбновитьДатуЗаказа(Заказ, обМестнаяДоставка, РеализацияДок);
					КонецеСли;	
					
					//======================долгий код

					Если Не обМестнаяДоставка.Стартован И Не СтатусЗаказа = 4 Тогда
						обМестнаяДоставка.Старт();
						//ОбновитьДатуЗаказа(Заказ, обМестнаяДоставка);
						Лог("   +++ Создана доставка");
					Иначе
						Лог("   *** Обновлена доставка");
					КонецЕсли;
				Исключение
					Лог("!!!Ошибка записи доставки " + стрНомерЗаказа + " " + ОписаниеОшибки());
					ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!!Ошибка записи доставки " + стрНомерЗаказа + " " + ОписаниеОшибки());
					//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					lem.ОтправитьНормальноеСообщениеАдминам("Запись документов", "!!!Ошибка записи доставки " + стрНомерЗаказа + " " + ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
			//+++ БАО 06.06.2017 №926
			//---- Если флНужноУдалитьДоставку И обМестнаяДоставка <> Неопределено Тогда
			//--- БАО 06.06.2017 №	
				//Если ВыборкаЗадачДоставки = Неопределено Тогда
				//	ВыборкаЗадачДоставки = ПолучитьСписокЗадачДоставки(обМестнаяДоставка.Ссылка);
				//КонецЕсли;
				//Лог("   --- Удаление задач доставки:");
				//Пока ВыборкаЗадачДоставки.Следующий() Цикл
				//	ЗадачаДоставки = ВыборкаЗадачДоставки.Ссылка.ПолучитьОбъект();
				//	Лог("     - " + ЗадачаДоставки);
				//	ЗадачаДоставки.ДоставкаОтменена = Истина;
				//	ЗадачаДоставки.ВыполнитьЗадачу();
				//КонецЦикла;
			//+++ БАО 06.06.2017 №926	
			//--- КонецЕсли;
			//--- БАО 06.06.2017 №926
			
			Если флРазрешеноОбновлениеЗаказа И (Не флЗаполнятьВозврат) И флНужноЗаписыватьВозврат Тогда
				Попытка
					ВозвратДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					Лог("   *** Записан возврат");
				Исключение
					lem.ОтправитьНормальноеСообщениеАдминам("Запись документов", "!!!Ошибка записи возврата");
					ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!!Ошибка записи возврата");
					//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					флРазрешеноОбновлениеЗаказа = Ложь;
				КонецПопытки;
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(ВозвратДокОбъект.Ссылка);
				//--- БАО 27.06.2017 №1192

			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивОбновленияОбъектовУТЛ.Количество() > 0 Тогда
			новаОбщиеПроцедуры.ОповеститьОбОбновлении(МассивОбновленияОбъектовУТЛ);
		КонецЕсли;
		
		//ВывестиСообщение("!!! Дату загрузки не обновляем =====================");
		//флОбновлятьДатуПоследнейЗагрузки = ЛОЖЬ;
		
		Если РежимСравнения Тогда 
			флОбновлятьДатуПоследнейЗагрузки = Ложь;
		КонецЕсли;	
		
		Если флОбновлятьДатуПоследнейЗагрузки Тогда
			Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
			Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЗаказов");
			Запись.Прочитать();
			Если Запись.Количество() = 0 Тогда
				НоваяЗапись = Запись.Добавить();
			Иначе
				НоваяЗапись = Запись[0];
			КонецЕсли;
			НоваяЗапись.Ключ = "ПоследняяЗагрузкаЗаказов";
			НоваяЗапись.Значение = ДатаВСтроку(Заказ.modifyDate_Д);
			Попытка
				Запись.Записать();
			Исключение
				Лог("Ошибка обновления границы новых заказов. " + ОписаниеОшибки());
			КонецПопытки;
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(Запись);
			//--- БАО 27.06.2017 №1192

		ИначеЕсли Не флСообщеноОбОтменеОбновленияДаты Тогда
			флСообщеноОбОтменеОбновленияДаты = Истина;
			Лог("!!! Смещение даты последнего обновления не ведется");
		КонецЕсли;
		
		//Евген.УстановитьРазрешениеПроведения(Ложь);
		
		//Если ФлагАвтоматическогоЗапуска = 1 Тогда
		//	ТекМин = Минута(ТекущаяДата());
		//	Если (ТекМин = 14) ИЛИ (ТекМин = 29) ИЛИ (ТекМин = 44) ИЛИ (ТекМин = 59) Тогда
		//		Лог("!!! Обмен завершен для возможности запуска следующего экземпляра обмена");
		//		флОбновлятьДатуПоследнейЗагрузки = Ложь;
		//		флПропускатьЗагрузку = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		
		// Михушкин --->> 
		Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			
			// Установка категории для расчета ЗП
			mas.УстановитьКатегориюДляРасчетаЗП(РеализацияДокОбъект.Ссылка);
			
			
			//+++ БАО 06.06.2017 №926
			//ХХХ надо допилить
			//--- БАО 06.06.2017 №926
			НайБПМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Док.Номер));
			Если ЗначениеЗаполнено(НайБПМестнаяДоставка) Тогда
				
				Если ЗначениеЗаполнено(НайБПМестнаяДоставка.ТочкаОтправления) И ЗначениеЗаполнено(НайБПМестнаяДоставка.ТочкаПрибытия) Тогда								
					АдресОтправления = НайБПМестнаяДоставка.ТочкаОтправления.Адрес;
					АдресПрибытия = НайБПМестнаяДоставка.ТочкаПрибытия.Адрес;		
					
					РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(Формат(АдресОтправления.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресОтправления.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."));
					Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда	
						
						//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						//--- НаборДопСведений = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
						//--- НаборДопСведений.Отбор.Заказ.Установить(Док.Ссылка);
						//--- НаборДопСведений.Прочитать();
						//--- Для каждого Стр Из НаборДопСведений Цикл
						//--- 	Стр.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;						
						//--- КонецЦикла;
						//--- НаборДопСведений.Записать();
						
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("Заказ", Док.Ссылка);
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("РасстояниеОтБазыПоДорогам", РасстояниеПоДорогам);
						
						//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						//Парам.Вставить("РасстояниеОтБазыПоДорогам" , РасстояниеПоДорогам);								
					КонецЕсли;
				КонецЕсли;	                                                                 					
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументОбъект.ЗаборТовара") Тогда
				
			Если ЗначениеЗаполнено(Док.ТерминалДоставки) И ЗначениеЗаполнено(Док.ТочкаДоставки) Тогда
				
				Если ЗначениеЗаполнено(Док.ТерминалДоставки.Склад) И ЗначениеЗаполнено(Док.ТерминалДоставки.Склад.ТочкаДоставки) Тогда
					
					АдресОтправления = Док.ТерминалДоставки.Склад.ТочкаДоставки.Адрес;
					АдресПрибытия    = Док.ТочкаДоставки.Адрес;
					
					РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(Формат(АдресОтправления.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресОтправления.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."));
					Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда	
						
						НаборДопСведений = РегистрыСведений.ДополнительныеПараметрыЗабора.СоздатьНаборЗаписей();
						НаборДопСведений.Отбор.Забор.Установить(Док.Ссылка);
						НаборДопСведений.Прочитать();
						Если НаборДопСведений.Количество() Тогда							
							Для каждого Стр Из НаборДопСведений Цикл
								Стр.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;						
							КонецЦикла;
						Иначе
						    НЗаписьЗабор = НаборДопСведений.Добавить();
							НЗаписьЗабор.Забор = Док.Ссылка;
							НЗаписьЗабор.Период = ТекущаяДата();
							НЗаписьЗабор.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;						
						КонецЕсли;
						
						НаборДопСведений.Записать();
						
						//+++ БАО 27.06.2017 №1192
						ДобавитьВХранилищеОбъектовСравнения(НаборДопСведений);
						//--- БАО 27.06.2017 №1192

					КонецЕсли;
					
				
				КонецЕсли;
				
			КонецЕсли;
											
		КонецЕсли;
		// <<--- Михушкин
		
		
		// Михушкин - Запись в РС РеализацияТоваровУслугИсторияРеквизитов - 25.07.2016 --->> 
		Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			Если Док.КоличествоМест = 0 Тогда
				Док.КоличествоМест = 1;	
			КонецЕсли;		
			mas.ЗаписьВРСРеализацияТоваровУслугИсторияРеквизитов(Док.Ссылка, Перечисления.СобытияЗаписиЗаказа.ЗагрузкаЗаказаИзФронта);
		КонецЕсли;
		// <<--- Михушкин 
				
						
		Най = РезНепр.Найти(Формат(НомерЗаказа, "ЧГ="));
		Если Не ВозниклаОшибка И Най <> Неопределено Тогда
			УстановитьОшибочныйЗаказаПрогруженным(НомерЗаказа, "");
		КонецеСли;
		
				
		//+++ БАО 22.06.2017 №1148
		//СтатусЗаказа            = Заказ.status_Ч;
		//НомерЗаказа             = Заказ.orderId_Ч;
		//стрНомерЗаказа          = ЧислоКСтрокеБезПробелов(НомерЗаказа);
		Если флРазрешеноОбновлениеЗаказа Тогда			
			рэИнтеграцияРэдЭкспресс.REDПередачаДанныхОСтатусах_ЗаказОтменен_РегистрацияДляОтправки(Заказ.selfDelivery_Ч, Заказ.status_Ч,  ЧислоКСтрокеБезПробелов(НомерЗаказа));
		КонецЕсли;	
		//--- БАО 22.06.2017 №1148 

		
		//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
		
		Если ЗаписьДополнительныеПараметрыЗаказа.Свойство("Заказ") Тогда
			НабПарам = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
			НабПарам.Отбор.Заказ.Установить(ЗаписьДополнительныеПараметрыЗаказа.Заказ);
			НабПарам.Прочитать();
			НабПарам.Очистить();
			
			Нов = НабПарам.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, ЗаписьДополнительныеПараметрыЗаказа);
			НабПарам.Записать();
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(НабПарам);
			//--- БАО 27.06.2017 №1192

		КонецЕсли;	
		
		
		//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа

		
	КонецЦикла; // По заказам
	
	#КонецОбласти
	
	
	
	Если ФлагУдаленияОткрытыхЗаказов Тогда
		Если ЗначениеЗаполнено(СписокОткрытыхЗаказов) Тогда
			Мас = СписокОткрытыхЗаказов.ВыгрузитьКолонку("Orderid_ч");
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	новаМестнаяДоставка.Ссылка Как Заказ
			|ИЗ
			|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
			|ГДЕ
			|	новаМестнаяДоставка.Номер В(&Мас)";
			Зап.УстановитьПараметр("Мас", Мас);
			Рез = Зап.Выполнить().Выгрузить();
			Стр = "";
			Для Каждого Тек Из Рез Цикл
				Заказ = Тек.Заказ.ПолучитьОбъект();
				Заказ.Дата = Тек.Заказ.Дата - 365*86400;
				
				
				ЧН = Час(Заказ.ВремяОтправленияС);
				ЧК = Час(Заказ.ВремяОтправленияПо);
				
				МН = Минута(Заказ.ВремяОтправленияС);
				МК = Минута(Заказ.ВремяОтправленияПо);
				
				ЧН_ = Час(Заказ.ВремяПрибытияС);
				ЧК_ = Час(Заказ.ВремяПрибытияПо);
				
				МН_ = Минута(Заказ.ВремяПрибытияС);
				МК_ = Минута(Заказ.ВремяПрибытияПо);
				
				
				Заказ.ВремяОтправленияС = Дата(Формат(Год(Заказ.Дата), "ЧГ=") + Формат(Месяц(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН, "ЧЦ=2; ЧВН=; ЧГ=") + Формат(МН, "ЧЦ=2; ЧВН=; ЧГ=") + "00");
				Заказ.ВремяОтправленияПо = Дата(Формат(Год(Заказ.Дата), "ЧГ=") + Формат(Месяц(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК, "ЧЦ=2; ЧВН=; ЧГ=") + Формат(МК, "ЧЦ=2; ЧВН=; ЧГ=") + "00");
				
				Заказ.ВремяПрибытияС = Дата(Формат(Год(Заказ.Дата), "ЧГ=") + Формат(Месяц(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН_, "ЧЦ=2; ЧВН=; ЧГ=") + Формат(МН_, "ЧЦ=2; ЧВН=; ЧГ=") + "00");
				Заказ.ВремяПрибытияПо = Дата(Формат(Год(Заказ.Дата), "ЧГ=") + Формат(Месяц(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК_, "ЧЦ=2; ЧВН=; ЧГ=") + Формат(МК_, "ЧЦ=2; ЧВН=; ЧГ=") + "00");
				
				Заказ.Записать();
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(Заказ.Ссылка);
				//--- БАО 27.06.2017 №119
				
				Стр = Стр + Строка(Тек.Заказ.Номер) + ",";
			КонецЦикла;	
			
			Если Стр <> "" Тогда
				МасП = Новый Массив;
				//МасП.Добавить("lemuracami@gmail.com");
				//lem.ОтправитьСообщение(МасП, "Удаленные открытые заказы", Стр, , "Логистическая компания ""Стриж""") ;		
			КонецЕсли;	
			
		КонецеСли;	
	КонецеСли;	
	
	
	// обновление загруженных номеров
	Если МассивЗагруженныхНомеровЗаказов.Количество() <> 0 Тогда
		ТекстЗ = "declare @t [dbo].Torder ";
		Для СчМ = 0 По МассивЗагруженныхНомеровЗаказов.Количество() - 1 Цикл
			ТекстЗ = ТекстЗ + "
			|insert into @t values (" + МассивЗагруженныхНомеровЗаказов.Получить(СчМ) + ")";
		КонецЦикла;	
		
		ТекстЗ = ТекстЗ + " EXEC dbo.import_setOrdersLoadedIn1c @t";
		
		//+++ БАО 13.09.2017 №
		Попытка
			Если ПодключениеКМагазину.State = 0	Тогда 
				ПодключениеКМагазину.Open(Евген.СтрокаПодключенияКИнтернетМагазину()); 
			КонецЕсли;	
		Исключение
		КонецПопытки;
		//--- БАО 13.09.2017 №

		
		Евген.ЗапросКИнтернетМагазину(ТекстЗ, ПодключениеКМагазину);
	КонецеСли;	
	
	//+++ БАО 28.06.2017 №1192
	Если РежимСравнения Тогда
		флОбновлятьДатуПоследнейЗагрузки = Ложь;	
	КонецЕсли;	
	//--- БАО 28.06.2017 №1192
	
	Если флОбновлятьДатуПоследнейЗагрузки Тогда
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЗаказов");
		Запись.Прочитать();
		ТекДата = '00010101';
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
			Попытка
				ТекДата = Вычислить("'" + НоваяЗапись.Значение + "'");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ТекДата < ДатаЗапроса Тогда
			НоваяЗапись.Ключ = "ПоследняяЗагрузкаЗаказов";
			НоваяЗапись.Значение = ДатаВСтроку(ДатаЗапроса);
			Попытка
				Запись.Записать();
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(Запись);
				//--- БАО 27.06.2017 №1192

				Лог("Установлена граница новых заказов " + ДатаЗапроса);
			Исключение
				Лог("Ошибка обновления границы новых заказов. " + ОписаниеОшибки());
			КонецПопытки;
		Иначе
			Лог("Установлена граница новых заказов " + ТекДата);
		КонецЕсли;
	КонецЕсли;
	

	
//+++ БАО 06.06.2017 №926

	//--- //+++ БАО 02.06.2017 №926
	//--- ВывестиСообщение("===== Начало сериализации");
	//--- СериализоватьПучок();
	//--- ВывестиСообщение("===== Конец сериализации");

	////--- БАО 02.06.2017 №926
//--- БАО 06.06.2017 №926	
	
КонецПроцедуры
//--- БАО 30.06.2017 №Для сравнения с прошлой версией

Процедура СоздатьВременныеТаблицы()
	Попытка 
		ЗапросКИнтернетМагазину("
		|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#orderList'))
		|	DROP TABLE #orderList
		|");
		ЗапросКИнтернетМагазину("
		|CREATE TABLE #orderList(
		|	orderId int,
		|	modifyDate datetime)
		|");
		ЗапросКИнтернетМагазину("
		|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#goodList'))
		|	DROP TABLE #goodList
		|");
		ЗапросКИнтернетМагазину("
		|CREATE TABLE #goodList(
		|	КодСайта int,
		|	Удален int,
		|	brandId int
		|)
		|");
	Исключение
		НормальныйХодВыполнения = Ложь;
		Лог("Ошибка создания временных таблиц: "+ОписаниеОшибки());
		lem.ОтправитьНормальноеСообщениеАдминам("Создание временных таблиц", "Ошибка создания временных таблиц: "+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция ЛидирующийНоль(зн)
	Если Зн < 10 Тогда
		Возврат "0"+Зн;
	Иначе
		Возврат Зн;
	КонецЕсли;	
КонецФункции

Функция ЗапросКИнтернетМагазину(ТекстЗапроса) Экспорт
	//ВывестиСообщение("======= Запрос =======");
	//ВывестиСообщение(ТекстЗапроса);
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = ПодключениеКМагазину;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandType = 1;
	Cmd.CommandTimeout = 120;
	Возврат Cmd.Execute();
КонецФункции // ЗапросКИнтернетМагазину()

Функция ДатаИз1С(Д, ЭтоКонец) Экспорт
	Возврат Формат(Год(Д),"ЧГ=0") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + " " +
	ЛидирующийНоль(Час(Д)) + ":" + ЛидирующийНоль(Минута(Д)) + ":" + ЛидирующийНоль(Секунда(Д)) +
	?(ЭтоКонец, ".998", "");
КонецФункции // ДатаИз1С()

Функция ПривестиСтрокуКДате(Строка, ФорматДаты="дмг")Экспорт
	Список = Новый Массив;
	
	Подстрока = "";
	Позиция = 1;
	ДлинаСтроки = СтрДлина(Строка) + 1;
	
	Пока Позиция <= ДлинаСтроки цикл
		Символ = Сред(Строка, Позиция, 1);
		Если (Символ >= "0") И (Символ <= "9") тогда
			Подстрока = Подстрока + Символ;
		ИначеЕсли Подстрока <> "" тогда
			Список.Добавить(Число(Подстрока));
			Подстрока = "";
		КонецЕсли;
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Если Список.Количество() < 3 тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ФорматДаты="дмг" тогда
		День = Список[0]; Месяц = Список[1]; Год = Список[2];
	ИначеЕсли ФорматДаты="мдг" тогда
		День = Список[1]; Месяц = Список[0]; Год = Список[2];
	ИначеЕсли ФорматДаты="гмд" тогда
		День = Список[2]; Месяц = Список[1]; Год = Список[0];
	Иначе
		День = 1; Месяц = 1; Год = 1;
	КонецЕсли;
	
	Час = 0; Минута = 0; Секунда = 0;
	Если Список.Количество() >= 5 тогда
		Час     = Список[3];
		Минута  = Список[4];
		Секунда = ?(Список.Количество() >= 6, Список[5], 0);
	КонецЕсли;
	
	Попытка
		Результат = Дата(Год, Месяц, День, Час, Минута, Секунда);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции    

Функция СоздатьТаблицу(RS, СписокКолонок) Экспорт
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		//Попытка //Широков для отладки
			Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
		//исключение                        //Широков для отладки
		//	ВывестиСообщение(СокрЛП(Лев(СписокКолонок, Разделитель - 1))); //Широков для отладки
		//конецпопытки; //Широков для отладки
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
			КонецЕсли;
		КонецЦикла;
		Rs.MoveNext()
	КонецЦикла;
	
	Возврат Таб;
КонецФункции

Процедура СледующееСостояние(Стр)
	Прогресс = Прогресс + 1;
	#Если Клиент Тогда
		//+++ БАО 06.07.2017 №1250
		//Состояние(Стр, Прогресс);
		
		ВывестиСообщение(Стр, -1);
		
		//--- БАО 06.07.2017 №1250 
		
	#КонецЕсли
КонецПроцедуры

Процедура ПодготовитьДанные(СписокЭтапов)
	Перем ПараметрыЭтапа;
	Перем ДатаНач, ДатаКон;
	
	ПрефиксКодовКонтрагентов = "R";
	
	ТаблицаБрендов = Новый ТаблицаЗначений;
	ДеревоНоменклатуры = Новый ТаблицаЗначений;
	НоменклатураКОбновлениюБрендов = Новый ТаблицаЗначений;
	СписокЗагружаемойНоменклатуры = Новый ТаблицаЗначений;
	ГраницаЗаказов = "";
	
	УсловиеЗапроса = "";
	КомментарийОшибкиЗапроса = "";
	ДелатьЗапросПоСпискуЗаказов = Истина;
	
	Если СписокЭтапов.Свойство("ЗагрузитьЗаказыПоНомерам", ПараметрыЭтапа) Тогда
		
		УсловиеЗапроса = "
		|	O.orderId IN (SELECT CAST(value AS int) FROM fn_Split('"+ПараметрыЭтапа+"', ','))
		|";
		КомментарийОшибкиЗапроса = "Ошибка заполнения номеров заказа (проверьте написание номеров)";
		
	ИначеЕсли СписокЭтапов.Свойство("ЗагрузитьНовыеЗаказы", ПараметрыЭтапа) Тогда
		
		ОтборОбновленияЗаказов = Новый Структура;
		ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЗаказов");
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
		Запись.Свойство("Значение", ДатаНач);
		ДатаЗапроса = НачалоДня(ТекущаяДата());
		Если ЗначениеЗаполнено(ДатаНач) Тогда
			Попытка
				ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
			Исключение
				Лог("Ошибочное значение даты последней загрузки доставок "+ДатаНач);
			КонецПопытки;
		Иначе
			Лог("Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказов)");
		КонецЕсли;
		ГраницаЗаказов = ДатаЗапроса;
		УсловиеЗапроса = "
		|	O.modifyDate > '"+ДатаИз1С(ДатаЗапроса, Ложь)+"'
		|";
		КомментарийОшибкиЗапроса = "Ошибка заполнения номеров измененных заказов";
		Попытка
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	getdate() AS curDate
			|");
			ДатаЗапроса = СоздатьТаблицу(RS, "curDate_Д")[0].curDate_Д;
			RS=0;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка получения текущего времени"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	ИначеЕсли СписокЭтапов.Свойство("ЗагрузитьЗаказыНаЗавтра", ПараметрыЭтапа) Тогда
		
		Завтра = КонецДня(ТекущаяДата()) + 1;
		УсловиеЗапроса = "
		|	O.deliveryDate BETWEEN '"+ДатаИз1С(Завтра, Ложь)+"' AND '"+ДатаИз1С(КонецДня(Завтра), Истина)+"'
		|";
		КомментарийОшибкиЗапроса = "Ошибка заполнения номеров заказов на завтра";
		
	ИначеЕсли СписокЭтапов.Свойство("ЗагрузитьЗаказыПоДатеОтгрузки", ПараметрыЭтапа) Тогда
		
		ПараметрыЭтапа.Свойство("ДатаНач", ДатаНач);
		ПараметрыЭтапа.Свойство("ДатаКон", ДатаКон);
		УсловиеЗапроса = "
		|	ISNULL(O.deliverydate, O.completeDate) BETWEEN '"+ДатаИз1С(ДатаНач, Ложь)+"' AND '"+ДатаИз1С(ДатаКон, Истина)+"'
		|";
		КомментарийОшибкиЗапроса = "Ошибка заполнения номеров заказа по дате отгрузки";
		
	ИначеЕсли СписокЭтапов.Свойство("СпецЗагрузка", ПараметрыЭтапа) Тогда
		
		УсловиеЗапроса = "
		|	S.internetShopID IN (177,182,183)
		|	AND O.status NOT IN (1, 4)
		|";
		КомментарийОшибкиЗапроса = "Ошибка спецзагрузки";
		
	Иначе 
		
		ДелатьЗапросПоСпискуЗаказов = Ложь;
		
	КонецЕсли;	
	
	Если ДелатьЗапросПоСпискуЗаказов Тогда
		СледующееСостояние("Подготовка таблицы заказов");
		Попытка
			// Добавляем условия к запросу:
			// 	- отбрасываем статус = 1 (новый заказ)
			//  - отбрасываем заказы, где есть позиция "Забор товара у поставщика"
			
			
			
//Широков			
			ЗапросКИнтернетМагазину("
//Р = ЗапросКИнтернетМагазину("
//Широков			

            |INSERT INTO
			|	#orderList (orderId, modifyDate)
			|SELECT
			|	O.orderId,
			|	O.modifyDate
			|FROM
			|	_order O (NOLOCK)
			|INNER JOIN
			|	settings S (NOLOCK) ON S.shopId = O.SettingID
			|LEFT JOIN
			|	(SELECT 
			|		orderId,
			|		count(*) AS lines
			|	FROM
			|		_orderItems (NOLOCK)
			|	GROUP BY
			|		orderId
			|	) T ON T.orderId = O.orderId
			//Серегин М.В. 06.07.2015 14:05:45 
			| LEFT JOIN
			|(SELECT 
			|orderId,
			|count(*) AS lines
			|FROM
			|ts_orderAdditionalService (NOLOCK)
			|GROUP BY
			|orderId
			|) TU ON TU.orderId = O.orderId
			//Серегин М.В. 06.07.2015 14:05:49 
			|WHERE " +
			УсловиеЗапроса + "
			|	AND O.status IN (2,3,4,5)
			|	AND (ISNULL(T.lines, 0) > 0 or o.selfDelivery IN (2, 3) or (ISNULL(TU.lines, 0) > 0 ))
			//|   AND (O.status <> 4 AND S.internetShopID <> 592)
			//|   AND S.internetShopID <> 179
			|");
			
			
			//Широков
			//|	O.orderId,
			//|	O.modifyDate
			//Таб = СоздатьТаблицу(Р, "orderId,modifyDate");
			//Широков
			
			
			Р = ЗапросКИнтернетМагазину("select orderid from #orderList");
			Таб = СоздатьТаблицу(Р, "orderID_Ч");
			Таб.Колонки.Добавить("Стр");
			Для Каждого Тек Из Таб Цикл
				Тек.Стр = Строка(Тек.orderid_Ч);
			КонецЦикла;	
			
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	НезагруженныеЗаказыСрезПоследних.Период КАК Дата,
			|	НезагруженныеЗаказыСрезПоследних.НомерЗаказа
			|ИЗ
			|	РегистрСведений.НезагруженныеЗаказы.СрезПоследних КАК НезагруженныеЗаказыСрезПоследних
			|ГДЕ
			|	НезагруженныеЗаказыСрезПоследних.Прогружен = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			
			РезНепр = зап.Выполнить().Выгрузить();
			Для каждого Тек Из РезНепр Цикл
				Най = Таб.Найти(Число(Тек.НомерЗаказа));
				Если Най <> Неопределено Тогда
					Продолжить;
				КонецеСли;	
				ЗапросКИнтернетМагазину("
				|INSERT INTO
				|	#orderList (orderId, modifyDate) VALUES (" + Тек.НомерЗаказа + ",'" + Евген.ДатаВSQL(Тек.Дата, Ложь) + "')");
			КонецЦикла;	
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог(КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	
	// Открытые заказы
	Если ФлагУдаленияОткрытыхЗаказов Тогда
		СледующееСостояние("Подготовка таблицы заказов");
		Попытка
			// Добавляем условия к запросу:
			// 	- отбрасываем статус = 1 (новый заказ)
			//  - отбрасываем заказы, где есть позиция "Забор товара у поставщика"
			ТТ = ЗапросКИнтернетМагазину("
			|SELECT
			|	O.orderId,
			|	O.modifyDate
			|FROM
			|	_order O (NOLOCK)
			|INNER JOIN
			|	settings S (NOLOCK) ON S.shopId = O.SettingID
			|LEFT JOIN
			|	(SELECT 
			|		orderId,
			|		count(*) AS lines
			|	FROM
			|		_orderItems (NOLOCK)
			|	GROUP BY
			|		orderId
			|	) T ON T.orderId = O.orderId
			|WHERE " +
			УсловиеЗапроса + "
			|	AND O.status IN (1)
			|	AND (ISNULL(T.lines, 0) > 0 or o.selfDelivery IN (2, 3)) 
			//|   AND S.internetShopID <> 179
			|");
			
			
			СписокОткрытыхЗаказов = СоздатьТаблицу(ТТ, "orderID_Ч");
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог(КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецеСли;
	
	Если ДелатьЗапросПоСпискуЗаказов Тогда
		Попытка	
			СледующееСостояние("Чтение таблицы заказов");
		    //+Степанов Задача № 3527 В запрос добавлены поля широты и долготы, запрос вынесен в отдельную функцию.
			RS = ЗапросКИнтернетМагазину(ТекстЗапросаСКоординатами());
			//RS = ЗапросКИнтернетМагазину("
			//|SELECT
			////Серегин М.В. 23.07.2015 14:42:08 
			//|   O.senderId                             AS SenderId,
			////Серегин М.В. 23.07.2015 14:42:09 
			//|	OL.orderId                             AS orderId,
			//|	OL.modifyDate						   AS modifyDate,
			//|	O.createDate                           AS createDate,
			//|	O.status                               AS status,
			//|	O.pay_type                             AS pay_type,
			//|	ISNULL(O.createWay, 0)                            AS createWay,
			//|	ISNULL(O.stockId, 0)                            AS stockId,
			//|	ISNULL(ST.stockName, 0)               AS stockName,
			//// ++Задача № 3363
			//|	ISNULL(ST.phoneNumber, '')             AS stockPhoneNumber,
			//|	ISNULL(ST.address, '')                 AS stockAddress,
			//// --Задача № 3363
			//|	ISNULL(ST.stockIdImport, 0)           AS stockIdImport,			
			//|	ISNULL(O.selfDelivery, 0)              AS selfDelivery,
			//|	ISNULL(O.serviceDelivery, 0)           AS serviceDelivery,
			//|	ISNULL(ISNULL(O.deliverydate, O.completeDate), O.createDate) AS completeDate,
			//|	O.comment                              AS comment,
			//|	ISNULL(O.deliveryPriceRUR, 0)          AS deliveryPrice,
			//|	ISNULL(O.deliveryForMkadRUR, 0)        AS deliveryForMkadRUR,
			//|	O.deliveryDate                         AS deliveryDate,
			//|	ISNULL(O.timeDeliveryFrom, '9' )       AS timeDeliveryFrom,
			//|	ISNULL(O.timeDeliveryTo,   '19')       AS timeDeliveryTo,
			//|	U.UserId         AS UserId,
			//|	U.firstName + ' ' + U.middleName + ' ' + U.lastName AS Name,
			//|	U.comment   AS userComment,
			//|	U.Email     AS Email,
			//|	ISNULL(O.serviceDC, 0)				   AS serviceDC,
			//|	ISNULL(O.ReasonRrefusal, '')		   AS ReasonRrefusal, 
			//|	ISNULL(O.ReasonRrefusalID,0)           AS ReasonRefusalID,			
			//|	[dbo].[fn_getUserAddrByOrderId41C] (O.orderId) AS Addr,
			//|	mvo.fulladdress	AS AddrFull,
			//|	mvo.cashService	AS cashService,
			//|	mvo.addrComment	AS addrComment,
			//|	mvo.Beznal	AS Beznal,
			//// Михушкин - 12.05.2016 --->> 
			//|	mvo.LiftingIsPayed  AS LiftingIsPayed,
			//|	mvo.orderIDAdditional  AS orderIDAdditional,
			//// <<--- Михушкин 
			//|	mvo.AgentComission AS AgentComission,
			//|	ISNULL(mvo.Insurance,0) AS Insurance,
			//|	mvo.BankKom AS BankKom,
			//|	ISNULL(S.internetShopID, 0) AS shop,
			//|	ISNULL(S.shopJurFace, '') AS shopJurFace,
			//|	ISNULL(S.textReceipt, '') AS textReceipt,
			//|	ISNULL(S.receiverID, '') AS receiverID,
			//|	ISNULL(S.shopTitle, '') AS shopTitle,
			//|	ISNULL(S.shopPhone, '') AS shopPhone,
			//|	sh.name AS shopName,
			//|	o.ispayed AS ispayed,
			//|	o.PiecesOfFreight AS PiecesOfFreight,
			//|	CI.carNumber AS carNumber,
			//|	RBS.amount AS SumByCard,
			//|	ISNULL(o.tariffType,1) AS tariffType,
			//|	ISNULL(o.tariffCategoryId,1) AS tariffCategoryId,
			//|	ISNULL(o.tariffID,1) AS tariffID,
			////|	ISNULL(s.parentid, -1) AS ParentID,
			//|	ISNULL(s2.InternetShopID, -1) AS ParentID,
			//|	ISNULL(mvo.returnRefusalOrders, 0) As returnRefusalOrders,
			////|	ISNULL(mvo.PiecesOfFreight , 1) As PiecesOfFreight,
			//|	ISNULL(mvo.orderVolume, 0) As orderVolume,
			//|	ISNULL(mvo.shipmentWHDate, '') As shipmentWHDate,
			//|	ISNULL(mvo.sourcePlaceId, 1) As sourcePlaceId,
			//|	ISNULL(mvo.deliveryPlaceId, 1) As deliveryPlaceId,
			////Бухаров
			//|	O.orderIDImport						   AS orderIDImport,
			//|	O.typeDelivery						   AS typeDelivery,
			//|	O.orderWeight						   AS orderWeight,
			//|	ISNULL(O.serviceDCclean, 0)						   AS serviceDCclean,
			//
			////+++ БАО 23.05.2017 №876 
			//|	ISNULL(O.NDSDelivery, -2)			   AS NDSDelivery ,
			////--- БАО 23.05.2017 №876 
			//
			////Бухаров
			////Марочкин
			//|	O.manager							   AS manager,
			//|	mvo.assessedCost							   AS assessedCost,
			//|	mvo.total							   AS total,
			//// Михушкин --->> 
			//|	ISNULL(mvo.isPartialGiveoutDisabled,0) AS isPartialGiveoutDisabled,
			//// <<--- Михушкин 
			////|	O.comment							   AS commentZ,
			//|	U.userTel							   AS Telephone,
			////Марочкин
			////+++++Серегин М.В. 20.02.2016 15:45:38 
			//|	ISNULL(STO.serviceID,0)					AS serviceID
			////-----Серегин М.В. 20.02.2016 15:45:39 
			//
			////+++ БАО 26.07.2017 №1488
			//|	, ISNULL(mvo.tariff_Rise, -1) AS tariff_Rise
			//|	,  ISNULL(mvo.who_pay_rise, -1)  AS who_pay_rise
			////--- БАО 26.07.2017 №1488
			//
			//|FROM
			//|	#orderList   OL (NOLOCK)
			//|INNER JOIN
			//|	_order       O (NOLOCK) ON O.orderId = OL.orderId
			//|LEFT JOIN
			//|	ts_stock 		   ST (NOLOCK) ON  O.stockId = ST.stockId
			//|INNER JOIN
			//|	_user        U (NOLOCK) ON O.userID = U.UserId
			//|INNER JOIN
			//|	mv_orders        mvo (NOLOCK) ON O.orderid = mvo.orderid			
			//|INNER JOIN
			//|	settings     S (NOLOCK) ON S.shopId = O.SettingID
			//|left JOIN
			//|	settings     S2 (NOLOCK) ON S2.shopId = S.ParentID			
			//|INNER JOIN
			//|	_InternetShops SH (NOLOCK) ON SH.internetShopID = S.internetShopID
			//|LEFT JOIN
			//|	_car       CI (NOLOCK) ON O.carId = CI.carId
			//|LEFT JOIN
			//|	_orderRBS       RBS (NOLOCK) ON O.orderId = RBS.orderId
			////+++++Серегин М.В. 20.02.2016 15:45:19 
			//|LEFT JOIN
			//|	ts_serviceToOrder STO (NOLOCK) ON O.orderId = STO.orderId AND STO.serviceID = 8
			////-----Серегин М.В. 20.02.2016 15:45:21 
			//
			//
			//|ORDER BY
			////|   O.selfDelivery DESC,
			////|	mvo.deliveryPlaceId ASC,
			//|	OL.modifyDate ASC,
			//|	OL.orderId ASC
			//|");  
			//-Степанов Задача № 3527
			//+++ БАО 26.07.2017 №1488
			
			////+++ БАО 23.05.2017 №876 
			////СписокЗаказов = СоздатьТаблицу(RS, "stockName,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, manager, Telephone,serviceID, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional");
			//СписокЗаказов = СоздатьТаблицу(RS, "stockName,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional");
			////--- БАО 23.05.2017 №876 
			
			// ++Задача № 3363
			//СписокЗаказов = СоздатьТаблицу(RS, "stockName,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise");
			//СписокЗаказов = СоздатьТаблицу(RS, "stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise");
			//+Степанов Задача № 3527 ДОбавлены колонки latitude и longitude  Задача № 3925 Добавлена колонка identifier
			
			//+Широков Задача 4323 29.10.2020
//			СписокЗаказов = СоздатьТаблицу(RS, "stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier");
			//СписокЗаказов = СоздатьТаблицу(RS, "stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId");
			//-Широков Задача 4323 29.10.2020
			//+Широков Задача 4401 13.01.2021
			//СписокЗаказов = СоздатьТаблицу(RS, "stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount");
			//-Широков Задача 4401 13.01.2021
			
			//+Широков Задача 4461 13.01.2021
			//СписокЗаказов = СоздатьТаблицу(RS, "stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, 
			//|userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, 
			//|tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourc??ePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, oversizedGoods ");
			
			//+Широков Задача 4521 02.04.2021
			//была строка по задаче 4461
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount");
			//добавил routingOperatorID
			//Широков Задача 4531 02.04.2021
			//добавил agregatorId  
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator");
			//+Широков Задача 4565 19.05.2021
			//добавил calcByVolumetricWeight, chargeableVolumetricWeight  
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator, agregatorId");
			//Асеев 29.09.2021 (Задача № 4667)>>>
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator, agregatorId,calcByVolumetricWeight_Ч,chargeableVolumetricWeight_Ч");
			//Асеев 25.10.2021 (Задача № 4695)>>>
			//Асеев 17.05.2022 (Задача № 4805)>>>			
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator, agregatorId,calcByVolumetricWeight_Ч,chargeableVolumetricWeight_Ч,pickupPointID_Ч,pnt_externalId,pnt_name,pnt_address,pnt_shopId_Ч");
			//Асеев 13.12.2022 (Задача № 4949)>>>
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,stockterminalId_Ч,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator, agregatorId,calcByVolumetricWeight_Ч,chargeableVolumetricWeight_Ч,pickupPointID_Ч,pnt_externalId,pnt_name,pnt_address,pnt_shopId_Ч");
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,stockterminalId_Ч,senderId,orderId_Ч, modifyDate_Д, shipmentDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator, agregatorId,calcByVolumetricWeight_Ч,chargeableVolumetricWeight_Ч,pickupPointID_Ч,pnt_externalId,pnt_name,pnt_address,pnt_shopId_Ч");
			//Асеев 31.10.2023 (Задача № 5157)>>>
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,stockterminalId_Ч,senderId,orderId_Ч, modifyDate_Д, shipmentDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator, agregatorId,calcByVolumetricWeight_Ч,chargeableVolumetricWeight_Ч,pickupPointID_Ч,pnt_externalId,pnt_name,pnt_address,pnt_shopId_Ч,deliveryServiceLevel_Ч");
			СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,stockterminalId_Ч,senderId,orderId_Ч, modifyDate_Д, shipmentDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator, agregatorId,calcByVolumetricWeight_Ч,chargeableVolumetricWeight_Ч,pickupPointID_Ч,pnt_externalId,pnt_name,pnt_address,pnt_shopId_Ч,deliveryServiceLevel_Ч,returnToSender_Ч");
			//Асеев 31.10.2023 (Задача № 5157)<<<
			//Асеев 13.12.2022 (Задача № 4949)<<<
			//Асеев 17.05.2022 (Задача № 4805)<<<
			//СписокЗаказов = СоздатьТаблицу(RS, "oversizedGoods, stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID, serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, identifier, deliveryCostCalculationTariffId, PrepaymentAmount, routingOperator, agregatorId,calcByVolumetricWeight_Ч,chargeableVolumetricWeight_Ч,pickupPointID_Ч,pnt_externalId,pnt_name,pnt_address,pnt_shopId_Ч,deliveryServiceLevel_Ч");
			//Асеев 25.10.2021 (Задача № 4695)<<<
			//Асеев 29.09.2021 (Задача № 4667)<<<
			//-Широков Задача 4565 19.05.2021
			//-Широков Задача 4521 02.04.2021
			//-Широков Задача 4461 13.01.2021
			//-Степанов Задача № 3527

			
			// --Задача № 3363
			
			//--- БАО 26.07.2017 №1488
			
			//+++ БАО 03.07.2017 №1238
			СписокЗаказов.Индексы.Добавить("");
			//--- БАО 03.07.2017 №1238

		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка чтения таблицы заказов"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		//CeHbKA 19.02.2019 #2831
		//СтрокаBarcodePackage = ?(ПараметрыСеанса.ЭтоТестоваяСреда, ", ISNULL(OP.BarcodePackage  , '')   AS BarcodePackage  ", ", ''   AS BarcodePackage");
		//CeHbKA 19.02.2019 #2831
		
		Попытка	
			СледующееСостояние("Чтение строк заказов");
			RS = ЗапросКИнтернетМагазину("            
			//Серегин М.В. 25.08.2015 17:29:36 новый          
			|SELECT
			|OL.orderId                AS orderId
			|,ISNULL(OP.itemAssessedCost, 0)     AS itemAssessedCost
			|,OL.modifyDate               AS modifyDate
			|,OP.eid                 AS eid
			|,OP.skuId                AS skuId
			|,OP.count-isnull(OP.missedcount, 0)          AS cnt
			|,ISNULL(OP.fixedCount, OP.count)          AS fixedCount
			|,OP.PriceUSD * OP.USD2RUR            AS Price
			|,P.internetShopId              AS Shop
			|,ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name AS Name
			|,P.code                 AS Articul
			|,OD.weight                AS [weight]
			|,productsRestore.skuId             AS skuIdrestore
			|,ISNULL(ST.stockId,0)              AS stockId
			|,ISNULL(ST.stockName, 0)           AS stockName
			// ++ Задача № 3363
			|,ISNULL(ST.phoneNumber, '')        AS stockPhoneNumber
			|,ISNULL(ST.address, '')            AS stockAddress
			// -- Задача № 3363
			//+++ БАО 23.05.2017 №876 
			|, ISNULL(OP.NDS, -2)   AS NDS 
			//--- БАО 23.05.2017 №876 
			//+++ БАО 04.10.2017 №1900 
			|, ISNULL(OP.Barcode , '')   AS Barcode 
			//--- БАО 04.10.2017 №1900 
			//CeHbKA 19.02.2019 #2831
			|, ISNULL(OP.BarcodePackage  , '')   AS BarcodePackage  
			//|, ''   AS BarcodePackage  
			//|"+СтрокаBarcodePackage+"
			//CeHbKA 19.02.2019 #2831
			//CeHbKA 23.09.2019 #3449 
			|, ISNULL(OP.excluded   , '')   AS excluded  
			//CeHbKA 27.09.2019 #3449 
			//CeHbKA 23.09.2019 #3545 
			|, ISNULL(OP.markingCode   , '')   AS markingCode  
			//CeHbKA 27.09.2019 #3545 
			|,ISNULL(ST.stockIdImport, 0)           AS stockIdImport
			//+Степанов Задача № 4007
			|,ISNULL(OP.goodsSellerId, 0) AS goodsSellerId 
			//-Степанов Задача № 4007
			|,1                  AS itemType
			//Асеев 17.05.2022 (Задача № 4805)>>>
			|,ISNULL(ST.terminalId, 0)           AS stockterminalId
			//Асеев 17.05.2022 (Задача № 4805)<<<
			//Асеев 22.06.2023 (Задача № 5071)>>>
            |,ISNULL(OP.orderItemType, 0)		AS orderItemType
			//Асеев 22.06.2023 (Задача № 5071)<<<
			|FROM
			| #orderList       OL  (NOLOCK)
			|INNER JOIN
			| _orderItems      OP  (NOLOCK) ON OL.orderId = OP.orderId
			|LEFT JOIN
			|ts_stock 		   ST (NOLOCK) ON  OP.stockId = ST.stockId
			|INNER JOIN
			| product          P   (NOLOCK) ON P.productId = OP.itemID
			|LEFT JOIN
			| brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
			|LEFT JOIN
			| objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
			|LEFT JOIN
			| objectDescription OD (NOLOCK) ON P.productId = OD.objectId    AND OD.objectTypeId = 2   
			|LEFT JOIN
			| category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
			|LEFT JOIN
			| (SELECT
			|  pRe.code       AS code,
			|  MAX(sRe.skuId) AS skuId
			| FROM                                                                   
			|  product   pRe (NOLOCK) 
			| LEFT JOIN                                                                   
			|  sku    sRe (NOLOCK) ON sRe.productId = pRe.productId AND sRe.objType = 1
			| WHERE
			|  pRe.internetShopID = 166
			| GROUP BY
			|  pRe.code
			| ) AS productsRestore ON productsRestore.code = p.code
			| 
			|UNION ALL
			|
			|SELECT  
			| OL.orderId        AS orderId
			|,null     AS itemAssessedCost
			| ,OL.modifyDate       AS modifyDate
			| ,null         AS eid
			| ,sRe.skuId         AS skuId
			| ,oas.quantity       AS cnt
			| ,null         AS fixedCount
			| ,oas.price        AS Price
			| ,s.internetShopID      AS Shop
			| ,aserv.title COLLATE database_default AS Name
			| ,cast(aserv.articul as varchar)       AS Articul
			| ,null         AS [weight]
			| ,null         AS stockID
			| ,null         AS stockName
			// Задача № 3363
			| ,null         AS stockPhoneNumber
			| ,null         AS stockAddress
			// Задача № 3363
			| ,null         AS stockIdImport
			//+++ БАО 23.05.2017 №876 
			| , -2	   AS NDS 
			//--- БАО 23.05.2017 №876 
			//+++ БАО 04.10.2017 №1900 
			|, null   AS Barcode 
			//CeHbKA 19.02.2019 #2831
			|, null   AS BarcodePackage  			
			//CeHbKA 19.02.2019 #2831
			//CeHbKA 23.09.2019 #3449 
			|, null   AS excluded  			
			//CeHbKA 23.09.2019 #3449 
			//CeHbKA 27.09.2019 #3545  
			|, null   AS markingCode  			
			//CeHbKA 27.09.2019 #3545  
			//--- БАО 04.10.2017 №1900 
			| ,null         AS skuIdrestore
			//+Степанов Задача № 4007
			| ,null         AS goodsSellerId
			//-Степанов Задача № 4007
			| ,2          AS itemType
			//Асеев 17.05.2022 (Задача № 4805)>>>
			| ,null         AS stockterminalId
			//Асеев 17.05.2022 (Задача № 4805)<<<
			//Асеев 22.06.2023 (Задача № 5071)>>>
            |,0			AS orderItemType
			//Асеев 22.06.2023 (Задача № 5071)<<<
			|FROM
			| #orderList       OL  (NOLOCK) 
			|INNER JOIN
			| ts_orderAdditionalService oas (NOLOCK) ON OL.orderId = oas.orderId
			|INNER JOIN 
			| ts_additionalService aserv (NOLOCK) ON oas.additionalServiceId = aserv.additionalServiceId
			|INNER JOIN 
			| settings s (NOLOCK) ON s.shopId = aserv.settingId
			|LEFT JOIN                                                                   
			| sku    sRe (NOLOCK) ON aserv.additionalServiceId = sRe.productId AND sRe.objType = 2
			|ORDER BY
			| modifyDate ASC,
			| orderId ASC,
			| itemType ASC,
			| eid ASC
			|");
			

			//+++ БАО 04.10.2017 №1900

			//---//+++ БАО 23.05.2017 №876 
			//---//ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName,"stockIdImport");
			//---ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, NDS_Ч, stockIdImport");
			//---//--- БАО 23.05.2017 №876 
			//ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, NDS_Ч, Barcode, stockIdImport");
			//--- БАО 04.10.2017 №1900
			
			////CeHbKA 19.02.2019 №2831
			//ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, NDS_Ч, Barcode, BarcodePackage, stockIdImport");
			////CeHbKA 19.02.2019 №2831			
			
			//++Задача № 3363
			//ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, stockIdImport");
			//--Задача № 3363
			
			//CeHbKA 23.09.2019 #3449 
			//ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, stockIdImport");
			//CeHbKA 23.09.2019 #3449 
			
			////CeHbKA 27.09.2019 #3545 
			//ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport");
			////CeHbKA 27.09.2019 #3545  
			
			//+Степанов Задача № 4007
			//Асеев 17.05.2022 (Задача № 4805)>>>
			//ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, goodsSellerId");
			//ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, stockterminalId_Ч, goodsSellerId");
			//Асеев 17.05.2022 (Задача № 4805)<<<
			//-Степанов Задача № 4007
			//Асеев 22.06.2023 (Задача № 5071)>>>
			ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, stockterminalId_Ч, goodsSellerId, orderItemType_Ч");
			//Асеев 22.06.2023 (Задача № 5071)<<<
			
			ТабличнаяЧастьЗаказов.Колонки.Добавить("Реж");
			Для Каждого Тек Из ТабличнаяЧастьЗаказов Цикл
				Тек.Реж = 1;
			КонецЦикла;	
			
			ТЗ2 = ТабличнаяЧастьЗаказов.Скопировать();
			ТЗ2.Свернуть("skuId_Ч", "Реж");
			
			Для Каждого Тек Из ТЗ2 Цикл
				Струк = Новый Структура;
				Струк.Вставить("skuId_Ч", Тек.skuId_Ч);
				НайСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(Струк);
				Для Сч = 0 По НайСтроки.Количество() - 1 Цикл
					Если НайСтроки[Сч].cnt_Ч = null тогда
						НайСтроки[Сч].cnt_Ч = 0;
					КонецеСли;	
					Если НайСтроки[Сч].cnt_Ч < 0 Тогда
						НайСтроки[Сч].Реж = 2;
					КонецеСли;	
				КонецЦикла;	
			КонецЦикла;	
			
			//+++ БАО 04.10.2017 №1900

					//			//+++ БАО 23.05.2017 №876 
					//			
					//				//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");
					//				  ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, NDS_Ч, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");
					//				
					//			//--- БАО 23.05.2017 №876 	
					
			//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, NDS_Ч, Barcode, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");
			//--- БАО 04.10.2017 №1900		
			
			////CeHbKA 19.02.2019 №2831			
			//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, NDS_Ч, Barcode, BarcodePackage, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");
			////CeHbKA 19.02.2019 №2831			
			
			//++Задача № 3363			
			//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");
			//--Задача № 3363	
			
			//CeHbKA 23.09.2019 #3449 
			//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");
			//CeHbKA 23.09.2019 #3449 
			
			////CeHbKA 27.09.2019 #3545  
			//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");
			////CeHbKA 27.09.2019 #3545  
			
			//+Степанов Задача № 4007 
			//Асеев 17.05.2022 (Задача № 4805)>>>
			//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, Реж, goodsSellerId", "cnt_Ч, fixedCount_Ч");
			//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, stockterminalId_Ч, Реж, goodsSellerId", "cnt_Ч, fixedCount_Ч");
			//Асеев 17.05.2022 (Задача № 4805)<<<
			//-Степанов Задача № 4007
			//Асеев 22.06.2023 (Задача № 5071)>>>
			ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, stockterminalId_Ч, Реж, goodsSellerId, orderItemType_Ч", "cnt_Ч, fixedCount_Ч");
			//Асеев 22.06.2023 (Задача № 5071)<<<
			
			RS=0;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка чтения строк заказов"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		//Асеев 16.02.2023 (Задача № 4995)>>>
		Попытка
			СледующееСостояние("Чтение заказов к заборам");
			RS = ЗапросКИнтернетМагазину("            
			|SELECT
			|OL.orderId                AS shipmentOrderId
			|,OS.orderId AS            OrderId
			|FROM
			| #orderList       OL  (NOLOCK)
			|INNER JOIN
			| ts_lm_orderShipments      OS (NOLOCK) ON OL.orderId = OS.shipmentOrderId
			|WHERE OS.isDeleted <> 1
			|");
			ТаблицаЗаказовКЗаборам = СоздатьТаблицу(RS,"shipmentOrderId_Ч,OrderId_Ч");
			КолонкиТаблицы = ТаблицаЗаказовКЗаборам.Колонки;
			КолонкиТаблицы.shipmentOrderId_Ч.Имя = "НомерЗабора";
			КолонкиТаблицы.OrderId_Ч.Имя = "НомерЗаказа";
			Для Каждого СтрокаТаблицы Из ТаблицаЗаказовКЗаборам Цикл
				СтрокаТаблицы.НомерЗабора = Формат(СтрокаТаблицы.НомерЗабора, "ЧГ=");
				СтрокаТаблицы.НомерЗаказа = Формат(СтрокаТаблицы.НомерЗаказа, "ЧГ=");
			КонецЦикла;
			ТаблицаЗаказовКЗаборам.Индексы.Добавить("НомерЗабора");
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка чтения заказов к заборам"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		//Асеев 16.02.2023 (Задача № 4995)<<<
	КонецЕсли;
	
	СписокКодовСайта = Неопределено;
	СписокКодовАдминки = Неопределено;
	ЗагрузкаПоКодамСайта = СписокЭтапов.Свойство("ЗагрузитьНоменклатуруПоКодамСайта", СписокКодовСайта);
	ЗагрузкаПоКодамАдминки = СписокЭтапов.Свойство("ЗагрузитьНоменклатуруПоКодамАдминки", СписокКодовАдминки);
	Если ЗагрузкаПоКодамСайта Или ЗагрузкаПоКодамАдминки Тогда
		Попытка	
			СледующееСостояние("Чтение списка товаров");
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	S.skuId                  AS skuId,
			|	P.internetShopId         AS Shop,
			|	ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name + ' ' + ISNULL(s.name, '') AS Name,
			|	P.code                   AS Articul,
			|	sh.name                  AS shopName
			|FROM
			|	sku              S   (NOLOCK)
			|LEFT JOIN
			//Серегин М.В. 25.08.2015 16:56:24 objType
			|	product          P   (NOLOCK) ON P.productId = S.productId AND S.objType = 1
			|LEFT JOIN
			|	brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
			|LEFT JOIN
			|	objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
			|LEFT JOIN
			|	category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
			|INNER JOIN
			|	_InternetShops   SH  (NOLOCK) ON SH.internetShopID = P.internetShopID
			|WHERE " +
			?(ЗагрузкаПоКодамСайта, "S.skuId IN (SELECT CAST(value AS int) FROM fn_Split('"+СписокКодовСайта+"', ','))", "") +
			?(ЗагрузкаПоКодамАдминки, "P.productId IN (SELECT CAST(value AS int) FROM fn_Split('"+СписокКодовАдминки+"', ','))", "")
			);
			СписокЗагружаемойНоменклатуры = СоздатьТаблицу(RS, "skuId_Ч, Name, Articul, Shop_Ч, shopName");
			RS=0;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка чтения списка товаров"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ЗаписатьКонтрагентов = Ложь;
	СписокКолонокДанныхКОнтрагентов = "userId_Ч, ИНН, КПП, Name, userComment, Email, jurPerson";
	Если СписокЭтапов.Свойство("ЗагрузитьКлиента", ПараметрыЭтапа) Тогда
		СледующееСостояние("Подготовка данных контрагента");
		Попытка
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	INN AS ИНН,
			|	KPP AS КПП,
			|	jurFace AS Наименование,
			|	OKPO AS ОКПО,
			|	jurAddress AS ЮридическийАдрес,
			|	jurPerson AS jurPerson,
			|	BIK AS БИК,
			|	RS AS НомерРасчетногоСчета 
			|FROM
			|	mn_user (NOLOCK)
			|WHERE
			|	INN = '"+СокрЛП(ПараметрыЭтапа)+"'
			//|	AND userId <> 83079
			|ORDER BY
			|	userId
			|");
			ДанныеКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
			RS=0;
			ЗаписатьКонтрагентов = ДанныеКонтрагентов.Количество() > 0;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка поиска контрагента"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	ИначеЕсли ДелатьЗапросПоСпискуЗаказов Тогда
		СледующееСостояние("Подготовка списка контрагентов");
		Попытка
			ЗапросКИнтернетМагазину("
			|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#clientList'))
			|	DROP TABLE #clientList
			|");
			
			ЗапросКИнтернетМагазину("
			|SELECT
			|	C.userId
			|INTO
			|	#clientList
			|FROM
			|	#orderList OL
			|INNER JOIN
			|	_order O (NOLOCK) ON O.orderId = OL.orderId
			|INNER JOIN
			|	_user C (NOLOCK) ON C.userId = O.userId
			//|WHERE
			//|	ISNULL(O.pay_type, 1) IN (2,4)
			//|	AND O.isInvoiceSending = 1
			//|	AND O.isIMLogistic = 0
			//|	AND C.INN IS NOT NULL
			//|	AND C.INN <> ''
			//|	AND O.userId <> 83079
			|GROUP BY
			|	C.userId
			//|	C.INN
			|");
			
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	userId
			|FROM
			|	#clientList
			|");
			
			ПредварительныйСписокКонтрагентов = Новый СписокЗначений;
			Пока НЕ Rs.EOF Цикл
				ПредварительныйСписокКонтрагентов.Добавить(ПрефиксКодовКонтрагентов + Формат(Rs.Fields("userId").Value, "ЧГ="));
				Rs.MoveNext()
			КонецЦикла;
			RS=0;
			
			СледующееСостояние("Поиск уже существующих котрагентов");
			УжеСуществующиеКонтрагенты = "";
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Контрагенты.Код
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Код В(&ПредварительныйСписок)
			|	И Контрагенты.Покупатель = ИСТИНА";
			Запрос.УстановитьПараметр("ПредварительныйСписок", ПредварительныйСписокКонтрагентов);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				УжеСуществующиеКонтрагенты = УжеСуществующиеКонтрагенты + "," + Сред(Выборка.Код, 2);
			КонецЦикла;
			
			СледующееСостояние("Подготовка данных котрагентов");
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	C.userId,
			|	C.INN AS ИНН,
			|	C.KPP AS КПП,
			|	ISNULL(C.firstName, '') + ISNULL(' ' + C.middleName, '') + ISNULL(' ' + C.lastName, '') AS Name,
			|	C.comment   AS userComment,
			|	C.JurPerson   AS jurPerson,
			|	C.Email     AS Email
			//|	C.jurFace AS Наименование,
			//|	C.OKPO AS ОКПО,
			//|	C.jurAddress AS ЮридическийАдрес,
			//|	C.BIK AS БИК,
			//|	C.RS AS НомерРасчетногоСчета 
			|FROM
			|	#clientList L
			|INNER JOIN
			|	_user C (NOLOCK) ON C.userId = L.userId " + 
			
			?(УжеСуществующиеКонтрагенты = "", "", "
			|WHERE
			|	L.userId NOT IN ("+Сред(УжеСуществующиеКонтрагенты, 2)+")") +
			
			"
			|ORDER BY
			|	L.userId
			|"); //ORDER BY userId: в случае нескольких записей по одному ИНН в карточке контрагента должны остаться данные для максимального userId
			
			ДанныеКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
			ЗаписатьКонтрагентов = ДанныеКонтрагентов.Количество() > 0;
			RS=0;
			
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка подготовки списка контрагентов"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;	
	
	Если ЗаписатьКонтрагентов И НормальныйХодВыполнения Тогда
		СписокЭтапов.Вставить("ЗаписатьКонтрагентов", ДанныеКонтрагентов);
	КонецЕсли;
	
	//+++ Костя
	ЗаписатьНовуюНоменклатуру(СписокЗаказов, ТабличнаяЧастьЗаказов);
	
	//+Степанов
	ЗагрузитьПоставщиков();
	//-Степанов
	
	СозданиеНовыхСкладов(СписокЗаказов);
	СозданиеНовыхСкладов(ТабличнаяЧастьЗаказов);
	//--- Костя
	
	//+++ Костя 150915
	//****************Если Магазин TopDelivery ИЛИ В группе* и СкладМагазина не указан задать TRANSFER@30	
	ИМ_TopDeliveryРодитель = РодТД;
	ЗапросТопДеливери = Новый Запрос;
	ЗапросТопДеливери.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Код КАК Код
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Родитель.ОсновнойМагазин = &ИМ_TopDelivery";
	ЗапросТопДеливери.УстановитьПараметр("ИМ_TopDelivery", ИМ_TopDeliveryРодитель);
	СписокМагазиновТопДеливери = ЗапросТопДеливери.Выполнить().Выгрузить();
	ОснКодТопДеливери = СписокМагазиновТопДеливери.Добавить();
	ОснКодТопДеливери.Код = 222;  // - Основной магазин TopDelivery
	
	Для Каждого СтрК Из СписокМагазиновТопДеливери Цикл
		КодМагазинаТ = СтрЗаменить(СтрК.Код, "Shop_","");//+ Формат(Стр.Код, "ЧН=0; ЧГ=");
		КодМагазинаТ = Число(СокрЛП(КодМагазинаТ));
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Shop_Ч", КодМагазинаТ);
		НайденныеСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого СтрТз Из НайденныеСтроки Цикл
				Если СтрТз.stockID_Ч = 0 Тогда
					СтрТз.stockID_Ч = 7; //- StockID=7 - TRANSFER@30
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//--- Костя 150915
	
КонецПроцедуры

//CeHbKA #3587 
Процедура ПодготовитьДанные_Новая(СписокЭтапов)
	Перем ПараметрыЭтапа;
	Перем ДатаНач, ДатаКон;
	
	ПрефиксКодовКонтрагентов = "R";
	
	ТаблицаБрендов = Новый ТаблицаЗначений;
	ДеревоНоменклатуры = Новый ТаблицаЗначений;
	НоменклатураКОбновлениюБрендов = Новый ТаблицаЗначений;
	СписокЗагружаемойНоменклатуры = Новый ТаблицаЗначений;
	ГраницаЗаказов = "";
	
	УсловиеЗапроса = "";
	КомментарийОшибкиЗапроса = "";
	ДелатьЗапросПоСпискуЗаказов = Истина;
	
	Если СписокЭтапов.Свойство("ЗагрузитьЗаказыПоНомерам", ПараметрыЭтапа) Тогда
		
		//CeHbKA
		//это не нужно
		//УсловиеЗапроса = "
		//|	O.orderId IN (SELECT CAST(value AS int) FROM fn_Split('"+ПараметрыЭтапа+"', ','))
		//|";
		//КомментарийОшибкиЗапроса = "Ошибка заполнения номеров заказа (проверьте написание номеров)";
		
		МассивНомеров = СтрРазделить(ПараметрыЭтапа, ", ;", Ложь);
		
		МассивЗаказов = Новый Массив;
		
		Для каждого НомерЗаказа Из МассивНомеров Цикл		
			СтруктураЗаказ = Новый Структура("OrderId", Число(СокрЛП(НомерЗаказа))); 
			МассивЗаказов.Добавить(СтруктураЗаказ);		
		КонецЦикла; 		
		//CeHbKA
		
	ИначеЕсли СписокЭтапов.Свойство("ЗагрузитьНовыеЗаказы", ПараметрыЭтапа) Тогда
		
		//CeHbKA
		//ОтборОбновленияЗаказов = Новый Структура;
		//ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЗаказов");
		//Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
		//Запись.Свойство("Значение", ДатаНач);
		//ДатаЗапроса = НачалоДня(ТекущаяДата());
		//Если ЗначениеЗаполнено(ДатаНач) Тогда
		//	Попытка
		//		ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		//	Исключение
		//		Лог("Ошибочное значение даты последней загрузки доставок "+ДатаНач);
		//	КонецПопытки;
		//Иначе
		//	Лог("Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказов)");
		//КонецЕсли;
		//ГраницаЗаказов = ДатаЗапроса;
		ДатаЗапроса = ТекущаяДата();
		//CeHbKA
		
	ИначеЕсли СписокЭтапов.Свойство("ЗагрузитьЗаказыНаЗавтра", ПараметрыЭтапа) Тогда
		
		Завтра = КонецДня(ТекущаяДата()) + 1;
		УсловиеЗапроса = "
		|	O.deliveryDate BETWEEN '"+ДатаИз1С(Завтра, Ложь)+"' AND '"+ДатаИз1С(КонецДня(Завтра), Истина)+"'
		|";
		КомментарийОшибкиЗапроса = "Ошибка заполнения номеров заказов на завтра";
		
	ИначеЕсли СписокЭтапов.Свойство("ЗагрузитьЗаказыПоДатеОтгрузки", ПараметрыЭтапа) Тогда
		
		ПараметрыЭтапа.Свойство("ДатаНач", ДатаНач);
		ПараметрыЭтапа.Свойство("ДатаКон", ДатаКон);
		УсловиеЗапроса = "
		|	ISNULL(O.deliverydate, O.completeDate) BETWEEN '"+ДатаИз1С(ДатаНач, Ложь)+"' AND '"+ДатаИз1С(ДатаКон, Истина)+"'
		|";
		КомментарийОшибкиЗапроса = "Ошибка заполнения номеров заказа по дате отгрузки";
		
	ИначеЕсли СписокЭтапов.Свойство("СпецЗагрузка", ПараметрыЭтапа) Тогда
		
		УсловиеЗапроса = "
		|	S.internetShopID IN (177,182,183)
		|	AND O.status NOT IN (1, 4)
		|";
		КомментарийОшибкиЗапроса = "Ошибка спецзагрузки";
		
	Иначе 
		
		ДелатьЗапросПоСпискуЗаказов = Ложь;
		
	КонецЕсли;	
	
	//CeHbKA #3587
	Если ДелатьЗапросПоСпискуЗаказов Тогда
		СледующееСостояние("Подготовка таблицы заказов");
		
		Попытка
			
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	НезагруженныеЗаказыСрезПоследних.Период КАК Дата,
			|	НезагруженныеЗаказыСрезПоследних.НомерЗаказа
			|ИЗ
			|	РегистрСведений.НезагруженныеЗаказы.СрезПоследних КАК НезагруженныеЗаказыСрезПоследних
			|ГДЕ
			|	НезагруженныеЗаказыСрезПоследних.Прогружен = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			
			РезНепр = зап.Выполнить().Выгрузить();
			
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог(КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	//CeHbKA #3587
	
	
	// Открытые заказы
	Если ФлагУдаленияОткрытыхЗаказов Тогда
		СледующееСостояние("Подготовка таблицы заказов");
		Попытка
			// Добавляем условия к запросу:
			// 	- отбрасываем статус = 1 (новый заказ)
			//  - отбрасываем заказы, где есть позиция "Забор товара у поставщика"
			ТТ = ЗапросКИнтернетМагазину("
			|SELECT
			|	O.orderId,
			|	O.modifyDate
			|FROM
			|	_order O (NOLOCK)
			|INNER JOIN
			|	settings S (NOLOCK) ON S.shopId = O.SettingID
			|LEFT JOIN
			|	(SELECT 
			|		orderId,
			|		count(*) AS lines
			|	FROM
			|		_orderItems (NOLOCK)
			|	GROUP BY
			|		orderId
			|	) T ON T.orderId = O.orderId
			|WHERE " +
			УсловиеЗапроса + "
			|	AND O.status IN (1)
			|	AND (ISNULL(T.lines, 0) > 0 or o.selfDelivery IN (2, 3)) 
			//|   AND S.internetShopID <> 179
			|");
			
			
			СписокОткрытыхЗаказов = СоздатьТаблицу(ТТ, "orderID_Ч");
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог(КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецеСли;
	
	//CeHbKA #3587
	Если ДелатьЗапросПоСпискуЗаказов Тогда
		Попытка	
			СледующееСостояние("Чтение таблицы заказов");
			
			ПараметрыЗапроса = Новый Структура();
			
			Если МассивЗаказов <> Неопределено Тогда
				ПараметрыЗапроса.Вставить("orders", МассивЗаказов);
			КонецЕсли; 
			
			Если ДатаЗапроса <> Неопределено Тогда
				ПараметрыЗапроса.Вставить("modifyDate", ДатаЗапроса);
			КонецЕсли; 
			
			СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(Перечисления.ВидыЗапросовWEBСервис.GetModifiedOrdersResult, ПараметрыЗапроса);
			
			СписокЗаказов = СоздатьТаблицу_Новая(СтруктураВозврата.Данные.GetModifiedOrdersResult.Data, "stockName,stockPhoneNumber,stockAddress,stockIdImport,senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockId_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, LiftingIsPayed, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, NDSDelivery_Ч , manager, Telephone,serviceID,serviceIDdoc, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч,Insurance_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, returnRefusalOrders_Ч, total_Ч, isPartialGiveoutDisabled, orderVolume_Ч, shipmentWHDate_Д, sourcePlaceId_Ч, deliveryPlaceId_Ч, orderIDAdditional, tariff_Rise, who_pay_rise, latitude, longitude, DataBarcodes");
			СписокЗаказов.Индексы.Добавить("");		
			
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка чтения таблицы заказов"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
				
		Попытка	
			СледующееСостояние("Чтение строк заказов");
			
			ТабличнаяЧастьЗаказов = Неопределено;
			
			Для каждого СтруктураЗаказ Из СтруктураВозврата.Данные.GetModifiedOrdersResult.Data Цикл
				//ТабличнаяЧастьЗаказов = СоздатьТаблицу(СтруктураЗаказ.DataItems, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport");		
				//ТабличнаяЧастьЗаказа = СоздатьТаблицу_Новая(СтруктураЗаказ.DataItems, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, weight_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport");
				//+Степанов 
				ТабличнаяЧастьЗаказа = СоздатьТаблицу_Новая(СтруктураЗаказ.DataItems, "itemAssessedCost, orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, weight_Ч, eid_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, goodsSellerId");
				//-Степанов
				Если ТабличнаяЧастьЗаказов = Неопределено Тогда
					ТабличнаяЧастьЗаказов = ТабличнаяЧастьЗаказа;
				Иначе
					ДополнитьТаблицу(ТабличнаяЧастьЗаказа, ТабличнаяЧастьЗаказов);
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если ТабличнаяЧастьЗаказов = Неопределено Тогда
				НормальныйХодВыполнения = Ложь;
				Лог("Нет заказов для загрузки");
				Возврат;
			КонецЕсли; 
			
			ТабличнаяЧастьЗаказов.Колонки.Добавить("skuIdrestore_Ч", Новый ОписаниеТипов("Строка"));
			ТабличнаяЧастьЗаказов.Колонки.Добавить("itemType", Новый ОписаниеТипов("Строка"));
			
			ТабличнаяЧастьЗаказов.Колонки.Добавить("Реж");
			Для Каждого Тек Из ТабличнаяЧастьЗаказов Цикл
				Тек.Реж = 1;
			КонецЦикла;	
			
			ТЗ2 = ТабличнаяЧастьЗаказов.Скопировать();
			ТЗ2.Свернуть("skuId_Ч", "Реж");
			
			Для Каждого Тек Из ТЗ2 Цикл
				Струк = Новый Структура;
				Струк.Вставить("skuId_Ч", Тек.skuId_Ч);
				НайСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(Струк);
				Для Сч = 0 По НайСтроки.Количество() - 1 Цикл
					Если НайСтроки[Сч].cnt_Ч = null тогда
						НайСтроки[Сч].cnt_Ч = 0;
					КонецеСли;	
					Если НайСтроки[Сч].cnt_Ч < 0 Тогда
						НайСтроки[Сч].Реж = 2;
					КонецеСли;	
				КонецЦикла;	
			КонецЦикла;	
			
			//ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");		
			//+Степанов Задача № 4007
			ТабличнаяЧастьЗаказов.Свернуть("itemAssessedCost,orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockPhoneNumber, stockAddress, NDS_Ч, Barcode, BarcodePackage, excluded, markingCode, stockIdImport, Реж, goodsSellerId", "cnt_Ч, fixedCount_Ч");					
			//-Степанов Задача № 4007
			
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка чтения строк заказов"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;			
	КонецЕсли;
	//CeHbKA #3587
		
	СписокКодовСайта = Неопределено;
	СписокКодовАдминки = Неопределено;
	ЗагрузкаПоКодамСайта = СписокЭтапов.Свойство("ЗагрузитьНоменклатуруПоКодамСайта", СписокКодовСайта);
	ЗагрузкаПоКодамАдминки = СписокЭтапов.Свойство("ЗагрузитьНоменклатуруПоКодамАдминки", СписокКодовАдминки);
	Если ЗагрузкаПоКодамСайта Или ЗагрузкаПоКодамАдминки Тогда
		Попытка	
			СледующееСостояние("Чтение списка товаров");
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	S.skuId                  AS skuId,
			|	P.internetShopId         AS Shop,
			|	ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name + ' ' + ISNULL(s.name, '') AS Name,
			|	P.code                   AS Articul,
			|	sh.name                  AS shopName
			|FROM
			|	sku              S   (NOLOCK)
			|LEFT JOIN
			//Серегин М.В. 25.08.2015 16:56:24 objType
			|	product          P   (NOLOCK) ON P.productId = S.productId AND S.objType = 1
			|LEFT JOIN
			|	brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
			|LEFT JOIN
			|	objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
			|LEFT JOIN
			|	category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
			|INNER JOIN
			|	_InternetShops   SH  (NOLOCK) ON SH.internetShopID = P.internetShopID
			|WHERE " +
			?(ЗагрузкаПоКодамСайта, "S.skuId IN (SELECT CAST(value AS int) FROM fn_Split('"+СписокКодовСайта+"', ','))", "") +
			?(ЗагрузкаПоКодамАдминки, "P.productId IN (SELECT CAST(value AS int) FROM fn_Split('"+СписокКодовАдминки+"', ','))", "")
			);
			СписокЗагружаемойНоменклатуры = СоздатьТаблицу(RS, "skuId_Ч, Name, Articul, Shop_Ч, shopName");
			RS=0;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка чтения списка товаров"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ЗаписатьКонтрагентов = Ложь;
	СписокКолонокДанныхКОнтрагентов = "userId_Ч, ИНН, КПП, Name, userComment, Email, jurPerson";
	Если СписокЭтапов.Свойство("ЗагрузитьКлиента", ПараметрыЭтапа) Тогда
		СледующееСостояние("Подготовка данных контрагента");
		Попытка
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	INN AS ИНН,
			|	KPP AS КПП,
			|	jurFace AS Наименование,
			|	OKPO AS ОКПО,
			|	jurAddress AS ЮридическийАдрес,
			|	jurPerson AS jurPerson,
			|	BIK AS БИК,
			|	RS AS НомерРасчетногоСчета 
			|FROM
			|	mn_user (NOLOCK)
			|WHERE
			|	INN = '"+СокрЛП(ПараметрыЭтапа)+"'
			//|	AND userId <> 83079
			|ORDER BY
			|	userId
			|");
			ДанныеКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
			RS=0;
			ЗаписатьКонтрагентов = ДанныеКонтрагентов.Количество() > 0;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка поиска контрагента"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	ИначеЕсли ДелатьЗапросПоСпискуЗаказов Тогда
		СледующееСостояние("Подготовка списка контрагентов");
		Попытка
			ЗапросКИнтернетМагазину("
			|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#clientList'))
			|	DROP TABLE #clientList
			|");
			
			ЗапросКИнтернетМагазину("
			|SELECT
			|	C.userId
			|INTO
			|	#clientList
			|FROM
			|	#orderList OL
			|INNER JOIN
			|	_order O (NOLOCK) ON O.orderId = OL.orderId
			|INNER JOIN
			|	_user C (NOLOCK) ON C.userId = O.userId
			//|WHERE
			//|	ISNULL(O.pay_type, 1) IN (2,4)
			//|	AND O.isInvoiceSending = 1
			//|	AND O.isIMLogistic = 0
			//|	AND C.INN IS NOT NULL
			//|	AND C.INN <> ''
			//|	AND O.userId <> 83079
			|GROUP BY
			|	C.userId
			//|	C.INN
			|");
			
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	userId
			|FROM
			|	#clientList
			|");
			
			ПредварительныйСписокКонтрагентов = Новый СписокЗначений;
			Пока НЕ Rs.EOF Цикл
				ПредварительныйСписокКонтрагентов.Добавить(ПрефиксКодовКонтрагентов + Формат(Rs.Fields("userId").Value, "ЧГ="));
				Rs.MoveNext()
			КонецЦикла;
			RS=0;
			
			СледующееСостояние("Поиск уже существующих котрагентов");
			УжеСуществующиеКонтрагенты = "";
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Контрагенты.Код
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Код В(&ПредварительныйСписок)
			|	И Контрагенты.Покупатель = ИСТИНА";
			Запрос.УстановитьПараметр("ПредварительныйСписок", ПредварительныйСписокКонтрагентов);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				УжеСуществующиеКонтрагенты = УжеСуществующиеКонтрагенты + "," + Сред(Выборка.Код, 2);
			КонецЦикла;
			
			СледующееСостояние("Подготовка данных котрагентов");
			RS = ЗапросКИнтернетМагазину("
			|SELECT
			|	C.userId,
			|	C.INN AS ИНН,
			|	C.KPP AS КПП,
			|	ISNULL(C.firstName, '') + ISNULL(' ' + C.middleName, '') + ISNULL(' ' + C.lastName, '') AS Name,
			|	C.comment   AS userComment,
			|	C.JurPerson   AS jurPerson,
			|	C.Email     AS Email
			//|	C.jurFace AS Наименование,
			//|	C.OKPO AS ОКПО,
			//|	C.jurAddress AS ЮридическийАдрес,
			//|	C.BIK AS БИК,
			//|	C.RS AS НомерРасчетногоСчета 
			|FROM
			|	#clientList L
			|INNER JOIN
			|	_user C (NOLOCK) ON C.userId = L.userId " + 
			
			?(УжеСуществующиеКонтрагенты = "", "", "
			|WHERE
			|	L.userId NOT IN ("+Сред(УжеСуществующиеКонтрагенты, 2)+")") +
			
			"
			|ORDER BY
			|	L.userId
			|"); //ORDER BY userId: в случае нескольких записей по одному ИНН в карточке контрагента должны остаться данные для максимального userId
			
			ДанныеКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
			ЗаписатьКонтрагентов = ДанныеКонтрагентов.Количество() > 0;
			RS=0;
			
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("Ошибка подготовки списка контрагентов"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;	
	
	Если ЗаписатьКонтрагентов И НормальныйХодВыполнения Тогда
		СписокЭтапов.Вставить("ЗаписатьКонтрагентов", ДанныеКонтрагентов);
	КонецЕсли;
	
	//+++ Костя
	ЗаписатьНовуюНоменклатуру(СписокЗаказов, ТабличнаяЧастьЗаказов);
	
	//+Степанов Задача № 4007
	ЗагрузитьПоставщиков();
	//-Степанов Задача № 4007
	
	СозданиеНовыхСкладов(СписокЗаказов);
	СозданиеНовыхСкладов(ТабличнаяЧастьЗаказов);
	//--- Костя
	
	//+++ Костя 150915
	//****************Если Магазин TopDelivery ИЛИ В группе* и СкладМагазина не указан задать TRANSFER@30	
	ИМ_TopDeliveryРодитель = РодТД;
	ЗапросТопДеливери = Новый Запрос;
	ЗапросТопДеливери.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Код КАК Код
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Родитель.ОсновнойМагазин = &ИМ_TopDelivery";
	ЗапросТопДеливери.УстановитьПараметр("ИМ_TopDelivery", ИМ_TopDeliveryРодитель);
	СписокМагазиновТопДеливери = ЗапросТопДеливери.Выполнить().Выгрузить();
	ОснКодТопДеливери = СписокМагазиновТопДеливери.Добавить();
	ОснКодТопДеливери.Код = 222;  // - Основной магазин TopDelivery
	
	Для Каждого СтрК Из СписокМагазиновТопДеливери Цикл
		КодМагазинаТ = СтрЗаменить(СтрК.Код, "Shop_","");//+ Формат(Стр.Код, "ЧН=0; ЧГ=");
		КодМагазинаТ = Число(СокрЛП(КодМагазинаТ));
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Shop_Ч", КодМагазинаТ);
		НайденныеСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого СтрТз Из НайденныеСтроки Цикл
				Если СтрТз.stockID_Ч = 0 Тогда
					СтрТз.stockID_Ч = 7; //- StockID=7 - TRANSFER@30
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//--- Костя 150915
	
КонецПроцедуры

Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьТаблицу_Новая(RS, СписокКолонок) Экспорт
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		//Попытка
		Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
	//исключение
	//	ВывестиСообщение(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
	//	конецпопытки;
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	
	Для каждого СтруктураДанные Из RS Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, СтруктураДанные[Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)]);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, СтруктураДанные[Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)]);
			ИначеЕсли ИмяКолонки = "DataBarcodes" Тогда
				НоваяСтрока.Установить(Кол - 1, СтруктураДанные[Лев(ИмяКолонки, СтрДлина(ИмяКолонки))]);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(СтруктураДанные[ИмяКолонки]));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	//Пока НЕ RS.EOF Цикл
	//	НоваяСтрока = Таб.Добавить();
	//	Для Кол = 1 По СписокКолонок.Количество() Цикл
	//		ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
	//		Суффикс = Прав(ИмяКолонки, 2);
	//		Если Суффикс = "_Ч" Тогда
	//			НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
	//		ИначеЕсли Суффикс = "_Д" Тогда
	//			НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
	//		Иначе
	//			НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
	//		КонецЕсли;
	//	КонецЦикла;
	//	Rs.MoveNext()
	//КонецЦикла;
	
	Возврат Таб;
КонецФункции
//CeHbKA #3587 

//+++ Костя
Процедура ЗагрузкаСкладовМагазинов(ИнфоПоСкладамМагазинов)
	
	/////////////////
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockId КАК ЧИСЛО(9)) КАК КодСклада,
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockIdImport КАК СТРОКА(20)) КАК ИдНаправления,	
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockName КАК СТРОКА(50)) КАК НаименованиеСклада,
	// ++Задача № 3363
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockPhoneNumber КАК СТРОКА(50)) КАК ТелефонСклада,
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockAddress КАК СТРОКА(100)) КАК АдресСклада,
	// --Задача № 3363
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.Shop_Ч КАК ЧИСЛО(4)) КАК ВладелецСклада,
	//Асеев 17.05.2022 (Задача № 4805)>>>
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockterminalId_Ч КАК ЧИСЛО(9)) КАК КодТерминала
	//Асеев 17.05.2022 (Задача № 4805)<<<
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&КодыСкладовМагазинов КАК КодыСкладовМагазинов
	|ГДЕ КодыСкладовМагазинов.stockId <> 0;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыСклада.КодСклада,
	|	КодыСклада.НаименованиеСклада,
	|	КодыСклада.ВладелецСклада,
	// ++Задача № 3363
	|	КодыСклада.ТелефонСклада,
	|	КодыСклада.АдресСклада,
	// --Задача № 3363
	|	ЕСТЬNULL(СкладыМагазинов.Ссылка, 0) КАК СкладМагазинаСсылка,
	|	КодыСклада.ИдНаправления,
	//Асеев 17.05.2022 (Задача № 4805)>>>
	|	РегиональныеТерминалы.Ссылка КАК Регион
	//Асеев 17.05.2022 (Задача № 4805)<<<
	|ПОМЕСТИТЬ СкладыМагазиновВБазе
	|ИЗ
	|	ВремТаб КАК КодыСклада
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладыМагазинов КАК СкладыМагазинов
	|		ПО КодыСклада.КодСклада = СкладыМагазинов.Код
	//Асеев 17.05.2022 (Задача № 4805)>>>
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы
	|		ПО КодыСклада.КодТерминала = РегиональныеТерминалы.Код
	//Асеев 17.05.2022 (Задача № 4805)<<<
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодСклада,
	|	НаименованиеСклада,
	|	ВладелецСклада,
	// ++Задача № 3363
	|	ТелефонСклада,
	|	АдресСклада,
	// --Задача № 3363
	|	СкладМагазинаСсылка,
	|	ИдНаправления,
	//Асеев 17.05.2022 (Задача № 4805)>>>
	|	Регион
	//Асеев 17.05.2022 (Задача № 4805)<<<
	|ИЗ
	|	СкладыМагазиновВБазе
	|ГДЕ
	|	СкладыМагазиновВБазе.СкладМагазинаСсылка = 0");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КодыСкладовМагазинов", ИнфоПоСкладамМагазинов);
	ТЗНовыеСкладыМагазинов = Запрос.Выполнить().Выгрузить();
	
	ИМ_TopDelivery = РодТД;
	
	Для Каждого Стр Из ТЗНовыеСкладыМагазинов Цикл
		
		КодВладельца = "Shop_" + Формат(Стр.ВладелецСклада, "ЧН=0; ЧГ=");
		
		НовыйСклад = Справочники.СкладыМагазинов.СоздатьЭлемент();
		НовыйСклад.Код          = Стр.КодСклада;
		НовыйСклад.Наименование = Стр.НаименованиеСклада;
		НовыйСклад.ИдентификаторНаправления = СокрЛП(Стр.ИдНаправления);
		
		// ++Задача № 3363
		НовыйСклад.ТелефонныйНомерПриЗабореТовара = СокрЛП(Стр.ТелефонСклада);
		НовыйСклад.Адрес = СокрЛП(Стр.АдресСклада);
		// --Задача № 3363
		
		//Асеев 17.05.2022 (Задача № 4805)>>>
		НовыйСклад.Регион = Стр.Регион;
		//Асеев 17.05.2022 (Задача № 4805)<<<
		
		Если Найти(Стр.НаименованиеСклада,"@") > 0 Тогда
			НовыйСклад.Владелец     = ИМ_TopDelivery;	
		Иначе
			НовыйСклад.Владелец     = Справочники.Контрагенты.НайтиПоКоду(КодВладельца);
		КонецЕсли;
		
		Попытка
			НовыйСклад.Записать();
			//pkv.ЗаписатьЛог(6, "   " + "+++ Записан новый склад: " +"stockID: " + Строка(Стр.КодСклада) +" :: Владелец:"+ Строка(КодВладельца));
		Исключение
			//pkv.ЗаписатьЛог(6, "   " + "--- Ошибка записи склада: " + ОписаниеОшибки()+" :: stockID:" + Строка(Стр.КодСклада) +" :: Владелец:"+ Строка(КодВладельца));
		КонецПопытки;
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(НовыйСклад.Ссылка);
		//--- БАО 27.06.2017 №1192
		
	КонецЦикла;
	
КонецПроцедуры
//--- Костя

Функция НайтиПокупателя(КодКонтрагента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Покупатель = ИСТИНА
	|	И Контрагенты.Код = &КодКонтрагента";
	Запрос.УстановитьПараметр("КодКонтрагента", КодКонтрагента);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[0].Ссылка;
	КонецЕсли;	
КонецФункции

Функция НайтиДоговорСПокупателем(Контрагент)
	Если Контрагент.ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		Возврат Неопределено;
	ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Возврат Контрагент.ОсновнойДоговорКонтрагента;
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Договоры.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА ДоговорыКонтрагентов.Наименование = ""Договор с покупателем""
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПредпочтениеДоговора
		|	ИЗ
		|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|	ГДЕ
		|		ДоговорыКонтрагентов.Владелец = &Владелец
		|		И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора) КАК Договоры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договоры.ПредпочтениеДоговора УБЫВ";
		Запрос.УстановитьПараметр("Владелец", Контрагент.Ссылка);
		Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 0 Тогда
			Возврат Результат[0].Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции // НайтиДоговорСПокупателем()

Функция ЗаполнитьДоговор(Контрагент, НаименованиеДоговора)
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	НовыйДоговор.ВалютаВзаиморасчетов  = Руб;
	НовыйДоговор.Организация           = Орг; 
	НовыйДоговор.ВидДоговора           = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НовыйДоговор.Наименование          = НаименованиеДоговора;
	НовыйДоговор.Владелец              = Контрагент.Ссылка;
	НовыйДоговор.Записать();
	Лог("   +++ Записан новый договор для " + Контрагент);
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(НовыйДоговор.Ссылка);
	//--- БАО 27.06.2017 №1192
		
	Возврат НовыйДоговор;
	
КонецФункции

//+++ БАО 31.05.2017 №926
//Функция ПодготовитьДоговор(Контрагент)
Функция ПодготовитьДоговор(Контрагент, НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено)
//--- БАО 31.05.2017 №926	

	//+++ БАО 31.05.2017 №926
	
	Если НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда 
		ОсновнойДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
	Иначе 
		ОсновнойДоговорКонтрагента = НайденнаяСтрокаСписокСсылокНаКонтрагента.ОсновнойДоговорКонтрагента;
	КонецЕсли;	
	
	//Если Контрагент.ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
	Если ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		//--- БАО 31.05.2017 №926
		
		Попытка
			Договор = ЗаполнитьДоговор(Контрагент, "Основной договор с покупателем");
			КонтрагентОбъект = Контрагент.ПолучитьОбъект();
			КонтрагентОбъект.ОсновнойДоговорКонтрагента = Договор.Ссылка;
			КонтрагентОбъект.Записать();
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(КонтрагентОбъект.Ссылка);
			//--- БАО 27.06.2017 №1192
			
			Возврат Договор.Ссылка;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("!!!Ошибка записи основного договора для "+Контрагент+", Код: "+Контрагент.Код+Символы.ПС+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		//+++ БАО 31.05.2017 №926	
		//ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	Иначе
		
		Если НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда 
			
			ВидДоговора = Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора;
		Иначе 
			
			ВидДоговора = НайденнаяСтрокаСписокСсылокНаКонтрагента.ВидДоговора;
		КонецЕсли;	
		
		Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда 
				
				ДоговорСПокупателем = НайтиДоговорСПокупателем(Контрагент); 
				
			Иначе 
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрокаСписокСсылокНаКонтрагента.ДоговорСПокупателем) Тогда
					ДоговорСПокупателем = НайтиДоговорСПокупателем(Контрагент); 
				Иначе 
					ДоговорСПокупателем = НайденнаяСтрокаСписокСсылокНаКонтрагента.ДоговорСПокупателем;
				КонецЕсли;	
				
			КонецЕсли;
			
			//Если НайтиДоговорСПокупателем(Контрагент) = Неопределено Тогда
			Если ДоговорСПокупателем = Неопределено Тогда
			//--- БАО 31.05.2017 №926	
			 Попытка
					Договор = ЗаполнитьДоговор(Контрагент, "Договор с покупателем");
					Возврат Договор.Ссылка;
				Исключение
					НормальныйХодВыполнения = Ложь;
					Лог("!!!Ошибка записи договора для "+Контрагент+", Код: "+Контрагент.Код+Символы.ПС+ОписаниеОшибки());
					Возврат Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	//+++ БАО 31.05.2017 №926
	//Возврат Контрагент.ОсновнойДоговорКонтрагента;
	Возврат ОсновнойДоговорКонтрагента;
	//--- БАО 31.05.2017 №926
	
КонецФункции

Функция ОставитьТолькоЦифры(Стр)
	Результат = "";
	поз = 0;
	сим = "";
	Пока поз < СтрДлина(Стр) Цикл 
		поз = поз + 1;
		сим = сред(Стр, поз, 1);
		Если Найти("1234567890", сим) > 0 Тогда
			Результат = Результат + сим;
		КонецЕсли;
	КонецЦикла;	  
	Возврат  Результат;
КонецФункции

Функция УбратьНепечатныеСимволы(Стр) Экспорт
	Стр = СтрЗаменить(Стр, Символы.НПП, " ");
	Результат = "";
	Для н=1 По СтрДлина(Стр) Цикл
		Сим = Сред(Стр, н, 1);
		Если КодСимвола(Сим) >= 32 Тогда
			Результат = Результат + Сим;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ПрочитатьНастройкиЛогирования()
	ЛогФайл = Новый("ТекстовыйДокумент");
	ФайлНастроек = Новый Файл(ПутьКНастройкамЛогирования);
	Если ФайлНастроек.Существует() Тогда
		Настр = Новый("ТекстовыйДокумент");
		Настр.Прочитать(ПутьКНастройкамЛогирования);
		Для н=1 По Настр.КоличествоСтрок() Цикл
			стр = ВРег(СокрЛП(Настр.ПолучитьСтроку(н)));
			Если ПустаяСтрока(стр) или (Лев(стр, 1) = ";") Тогда 
				Продолжить;
			КонецЕсли;
			Если Лев(стр, 4) = "MODE" Тогда
				Если Найти(стр, "AUTO") > 0 Тогда
					ФлагАвтоматическогоЗапуска = 1;
				Иначе 
					ФлагАвтоматическогоЗапуска = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если Лев(стр, 7) = "OUTTYPE" Тогда 
				Если Найти(стр, "ADD") > 0 Тогда
					ФлагДобавленияЗамены = 1;
				ИначеЕсли Найти(стр, "NOLOG") > 0 Тогда
					ФлагДобавленияЗамены = 0;
				Иначе 
					ФлагДобавленияЗамены = 2;
				КонецЕсли;
			КонецЕсли;
			
			Если Лев(стр, 8) = "OUTFILE=" Тогда
				ИмяФайла = СокрЛП(Сред(стр, 9));
			КонецЕсли;
			
			Если Лев(стр, 9) = "WRITEMODE" Тогда 
				Если Найти(стр, "WHOLE") > 0 Тогда
					ФлагЗаписиПослеКаждойСтроки = 0;
				Иначе 
					ФлагЗаписиПослеКаждойСтроки = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если Лев(стр, 11) = "DELETE_OPEN" Тогда 
				Если Найти(стр, "YEAH") > 0 Тогда
					ФлагУдаленияОткрытыхЗаказов = Истина;
				Иначе 
					ФлагУдаленияОткрытыхЗаказов = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Если ПустаяСтрока(ИмяФайла) Тогда 
			ФлагДобавленияЗамены = 0;
		КонецЕсли;
		
		ФайлЛога = Новый Файл(ИмяФайла);
		Если (ФлагДобавленияЗамены = 1) И НЕ ФайлЛога.Существует() Тогда
			ФлагДобавленияЗамены = 2;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьКонтрагентов(ДанныеКонтрагентов)
	Род = Справочники.Контрагенты.НайтиПоКоду("000000003");	
	
	//+++ БАО 30.05.2017 №926
	
	МассивКодовКонтрагентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка,
	               |	Контрагенты.Код КАК Код
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Покупатель = ИСТИНА
	               |	И Контрагенты.Код В(&КодКонтрагента)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Контрагенты.Ссылка";
	Для Каждого Стр Из ДанныеКонтрагентов Цикл
    	МассивКодовКонтрагентов.Добавить(ПрефиксКодовКонтрагентов + ЧислоКСтрокеБезПробелов(стр.userId_Ч));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КодКонтрагента", МассивКодовКонтрагентов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокПокупателей = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		СписокПокупателей.Вставить(Выборка.Код, Выборка.Ссылка);	
	КонецЦикла;	
	
	//--- БАО 30.05.2017 №926
	
	Для Каждого стр Из ДанныеКонтрагентов Цикл
		#Если Клиент Тогда 
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		КодКонтрагента = ПрефиксКодовКонтрагентов + ЧислоКСтрокеБезПробелов(стр.userId_Ч);
		
		//+++ БАО 30.05.2017 №926
		//НовыйКА = НайтиПокупателя(КодКонтрагента);
		НовыйКА =  СписокПокупателей.Получить(КодКонтрагента);
		//--- БАО 30.05.2017 №926
		
		флНовыйКонтрагент = НовыйКА = Неопределено;
		Если флНовыйКонтрагент Тогда
			НовыйКА = Справочники.Контрагенты.СоздатьЭлемент();
		Иначе
			НовыйКА = НовыйКА.ПолучитьОбъект();
		КонецЕсли;
		
		ИНН = ОставитьТолькоЦифры(стр.ИНН);
		Если СтрДлина(ИНН) > 7 Тогда
			НовыйКА.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ЮрЛицо;
			НовыйКА.ИНН = Лев(стр.ИНН, 12);
			НовыйКА.КПП = стр.КПП;
		Иначе
			НовыйКА.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
		
		
		НовыйКА.Наименование           = стр.Name;
		НовыйКА.Код                    = КодКонтрагента;
		НовыйКА.Родитель               = Род;
		
		НовыйКА.jurPerson = Стр.jurPerson;
		НовыйКА.Покупатель             = Истина;
		Попытка
			НовыйКА.Записать();
			Лог(?(флНовыйКонтрагент, "+++ Записан новый", "*** Перезаписан")+" контрагент "+НовыйКА+", ИНН: "+стр.ИНН);
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("!!!Ошибка записи нового контрагента: "+стр.Name+", ИНН: "+стр.ИНН+Символы.ПС+ОписаниеОшибки());
			Прервать;
		КонецПопытки;
		
		
		//+++ БАО 27.06.2017 №926
		ДобавитьВХранилищеОбъектовСравнения(НовыйКА.Ссылка);
		//--- БАО 27.06.2017 №926
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменениеПометкиУдаленияНоменклатуры(СписокНоменклатуры)
	Для Каждого стр Из СписокНоменклатуры Цикл
		Объект = стр.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Не стр.ПометкаУдаления;
		Попытка
			Объект.Записать();
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(Объект.Ссылка);
			//--- БАО 27.06.2017 №1192
			
			Если Объект.ПометкаУдаления Тогда
				Лог("--- Товар "+Объект+" помечен на удаление");
			Иначе
				Лог("*** Товар "+Объект+" снят с пометки на удаление");
			КонецЕсли;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("!!!Ошибка изменения признака удаления у "+Объект+стр.ИНН+Символы.ПС+ОписаниеОшибки());
			Прервать;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция ПреобразоватьКодМагазина(Код) Экспорт
	Возврат "Shop_" + Формат(Код, "ЧН=0; ЧГ=");
КонецФункции

Функция ПодготовитьРодителяНоменклатуры(ПараметрыЗаказа, КодМагазина)
	
	Если КодМагазина = 0 Тогда
		Возврат Справочники.Номенклатура.НайтиПоКоду("00000000002");  //Товары
	КонецЕсли;
	КодСайтаПапки = ПреобразоватьКодМагазина(КодМагазина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ИСТИНА
	|	И Номенклатура.Код = &Код";
	Запрос.УстановитьПараметр("Код", КодСайтаПапки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоваяПапка = Справочники.Номенклатура.СоздатьГруппу();
	НоваяПапка.Наименование     = ПараметрыЗаказа.shopName;
	НоваяПапка.Родитель         = ГрТов;  //Товары
	НоваяПапка.ВидНоменклатуры  = ВН;
	НоваяПапка.Код = КодСайтаПапки;
	
	Попытка
		НоваяПапка.Записать();
		Лог("+++ Записана новая папка товаров: " + ПараметрыЗаказа.shopName);
	Исключение
		Лог("!!!Ошибка записи новой папки товаров " + ПараметрыЗаказа.shopName + " (код магазина: " + КодМагазина + ")" + Символы.ПС + ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(НоваяПапка.Ссылка);
	//--- БАО 27.06.2017 №1192

	
	Возврат НоваяПапка.Ссылка;
	
КонецФункции // ПолучитьРодителяНоменклатуры()

Функция СформироватьНаименованиеТовара(ПрефиксКатегории, НаименованиеБренда, Наименование) Экспорт 
	Возврат СокрЛП(ПрефиксКатегории + " " + НаименованиеБренда + " " + Наименование);
КонецФункции

Функция СформироватьПолноеНаименованиеТовара(ПрефиксКатегории, НаименованиеБренда, НаименованиеАртикула) Экспорт 
	Возврат СокрЛП(ПрефиксКатегории + " " + НаименованиеБренда + " " + НаименованиеАртикула);
КонецФункции

Процедура ЗагрузитьНоменклатуруПоКодамСайта(Параметр)	
	
	//+Степанов Задача № 4007
	//ЗагрузитьПоставщиков();	
	//-Степанов Задача № 4007
	
	//+++ БАО 30.05.2017 №926
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки = Новый КвалификаторыСтроки(11);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,,,ПараметрыСтроки);  
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код"         , ОписаниеТиповСтрока);
	ТЗ.Колонки.Добавить("shopName"         , Новый ОписаниеТипов("Строка"));
	
	
	МассивКодовМагазинов = Новый Массив;
	Для Каждого стр Из СписокЗагружаемойНоменклатуры Цикл
		Если ЗначениеЗаполнено(стр.Shop_Ч) Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Код = ПреобразоватьКодМагазина(стр.Shop_Ч);
			НоваяСтрока.shopName = стр.shopName;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Код.Код КАК Код,
	               |	Код.shopName КАК shopName
	               |ПОМЕСТИТЬ ВТ_Коды
	               |ИЗ
	               |	&Код КАК Код
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	ВТ_Коды.Код КАК Код,
	               |	ВТ_Коды.shopName КАК shopName
	               |ИЗ
	               |	ВТ_Коды КАК ВТ_Коды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ВТ_Коды.Код = Номенклатура.Код
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	0,
	               |	NULL
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Код = ""00000000002""";
	
	Запрос.УстановитьПараметр("Код", ТЗ);
	
	СписокРодителейНоменклатур = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		
			СписокРодителейНоменклатур.Вставить(Выборка.Код, Выборка.Ссылка);
			
		Иначе 	
			
			НоваяПапка = Справочники.Номенклатура.СоздатьГруппу();
			НоваяПапка.Наименование     = Выборка.shopName;
			НоваяПапка.Родитель         = ГрТов;  //Товары
			НоваяПапка.ВидНоменклатуры  = ВН;
			НоваяПапка.Код = Выборка.Код;
			
			Попытка
				НоваяПапка.Записать();
				Лог("+++ Записана новая папка товаров: " + Выборка.shopName);
				СписокРодителейНоменклатур.Вставить(Выборка.Код, НоваяПапка.Ссылка);
			Исключение
				Лог("!!!Ошибка записи новой папки товаров " + Выборка.shopName + " (код магазина: " + Выборка.Код + ")" + Символы.ПС + ОписаниеОшибки());
				СписокРодителейНоменклатур.Вставить(Выборка.Код, Справочники.Номенклатура.ПустаяСсылка());
			КонецПопытки;
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(НоваяПапка.Ссылка);
			//--- БАО 27.06.2017 №1192
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	МассивКодовНомеклатур = Новый Массив;
	Для Каждого стр Из СписокЗагружаемойНоменклатуры Цикл
		Если ЗначениеЗаполнено(стр.Shop_Ч) Тогда
			МассивКодовНомеклатур.Добавить(ЧислоКСтрокеБезПробелов(стр.skuId_Ч));	
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Код КАК Код,
	               |	МАКСИМУМ(ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))) КАК ЕдИзм
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |		ПО Номенклатура.Ссылка = ЕдиницыИзмерения.Владелец
	               |ГДЕ
	               |	Номенклатура.Код В(&Код)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.Код";
	
	СписокСсылокНаНоменклатуру = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		
		СписокСсылокНаНоменклатуру.Вставить(Выборка.Код, Новый Структура("Ссылка, ЕдИзм",  Выборка.Ссылка, Выборка.ЕдИзм));
		
	КонецЦикла;	
	
	//--- БАО 30.05.2017 №926
	
	Для Каждого стр Из СписокЗагружаемойНоменклатуры Цикл
		Если ЗначениеЗаполнено(стр.Shop_Ч) Тогда
			//+++ БАО 30.05.2017 №926
				//ЗаписатьНоменклатуру(стр, стр, стр.skuId_Ч, стр.Shop_Ч);//Бухаров
				
				НайденныйТовар =  СписокСсылокНаНоменклатуру.Получить(ЧислоКСтрокеБезПробелов(стр.skuId_Ч));
				Если НайденныйТовар = Неопределено Тогда
					Товар = Справочники.Номенклатура.ПустаяСсылка();
					ЕдИзм = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
				Иначе 
					Товар = НайденныйТовар.Ссылка;
					ЕдИзм = НайденныйТовар.ЕдИзм;
				КонецЕсли;
				
				Родитель =  СписокРодителейНоменклатур.Получить(стр.Shop_Ч);
				Если Родитель = Неопределено Тогда
					Родитель = Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;
				
				ЗаписатьНоменклатуру(стр, стр, стр.skuId_Ч, стр.Shop_Ч, Товар, Родитель, ЕдИзм);//Бухаров
				
			//--- БАО 30.05.2017 №926	
		Иначе
			Лог("!!! Невозможно определить владельца товара (магазин): " + стр.skuId_Ч);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//+++ БАО 30.05.2017 №926
//Функция ЗаписатьНоменклатуру(стр, Заказ, КодТовара, КодМагазина)//Бухаров
Функция ЗаписатьНоменклатуру(стр, Заказ, КодТовара, КодМагазина, ТоварИзСписка = Неопределено, Родитель = Неопределено, ЕдИзм = Неопределено, ЕдиницаХраненияОстатков = Неопределено)//Бухаров
//--- БАО 30.05.2017 №926	
	
	//ШтукиПер = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");      // шт.
	//ВидНоменклатурыПер =  Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001"); // Товар
	
	флНовый = Ложь;
	//+++ БАО 30.05.2017 №926
	//---Товар = Справочники.Номенклатура.НайтиПоКоду(ЧислоКСтрокеБезПробелов(стр.skuId_Ч));
	Если ТоварИзСписка = Неопределено Тогда
		Товар = Справочники.Номенклатура.НайтиПоКоду(ЧислоКСтрокеБезПробелов(стр.skuId_Ч));
	Иначе
		Товар = ТоварИзСписка;
	КонецЕсли;	
	//--- БАО 30.05.2017 №926
	
	Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
		ТекТовар = Справочники.Номенклатура.СоздатьЭлемент();
		флНовый = Истина;
	Иначе
		ТекТовар = Товар.ПолучитьОбъект();
	КонецЕсли;
	
	//+++ БАО 30.05.2017 №926
	Если ЗначениеЗаполнено(Товар) Тогда
		ТекТовар.Родитель = Родитель;
	Иначе 
	//--- БАО 30.05.2017 №926	
		ТекТовар.Родитель                = ПодготовитьРодителяНоменклатуры(Заказ, КодМагазина);//Бухаров - добавил параметр код магазина
		
	//+++ БАО 30.05.2017 №926
	КонецЕсли;
	//--- БАО 30.05.2017 №926
	
	ТекТовар.Наименование            = стр.Name;
	ТекТовар.НаименованиеПолное      = стр.Name;
	ТекТовар.Код 				 	 = ЧислоКСтрокеБезПробелов(КодТовара);
	ТекТовар.БазоваяЕдиницаИзмерения = ШтукиПер;
	ТекТовар.ВидНоменклатуры         = ВидНоменклатурыПер;
	ТекТовар.Артикул				 = стр.articul;
	ТекТовар.СтавкаНДС               = Перечисления.СтавкиНДС.НДС18; // ++++++++++++++++++++++++++++++++++++++
	ТекТовар.ВестиУчетПоСериям       = Ложь;
	
	//+++ БАО 30.05.2017 №926
	
	Если ЗначениеЗаполнено(ЕдИзм) Тогда
		ТекТовар.ЕдиницаХраненияОстатков = ЕдИзм;
		ТекТовар.ЕдиницаДляОтчетов       = ЕдИзм;
	КонецЕсли;	
		
	//--- БАО 30.05.2017 №926
	
	Попытка
		ТекТовар.Записать();
		Лог("   " + ?(флНовый, "+++ Записан новый", "*** Обновлен") + " товар: "+ ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")");
	Исключение
		НормальныйХодВыполнения = Ложь;
		Лог("!!!Ошибка " + ?(флНовый, "записи нового", "обновления") + " товара: " + ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")" + Символы.ПС + ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(ТекТовар.Ссылка);
	//--- БАО 27.06.2017 №1192

	
	//+++ БАО 30.05.2017 №926
	
	// Записываем единицу хранения остатков и единицу для отчетов
	Если Не ЗначениеЗаполнено(ЕдИзм) Тогда
		
		//ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, ТекТовар.Ссылка);
		//Если ВыборкаЕдиниц.Следующий() Тогда
		//	НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
		//Иначе
			
		//--- БАО 30.05.2017 №926
		
			НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(ТекТовар.БазоваяЕдиницаИзмерения);
			НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = ТекТовар.БазоваяЕдиницаИзмерения;
			НайденнаяЕдиницаОбъект.Коэффициент             = 1;
			НайденнаяЕдиницаОбъект.Владелец                = ТекТовар.Ссылка;
			
			Попытка
				НайденнаяЕдиницаОбъект.Записать();
			Исключение
				//+++ххх БАО 30.05.2017 №926
				//не понял, мы же записали уже номенклатуру
				//---ххх БАО 30.05.2017 №926
				Возврат Справочники.Номенклатура.ПустаяСсылка();
			КонецПопытки;
			
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(НайденнаяЕдиницаОбъект.Ссылка);
			//--- БАО 27.06.2017 №1192

			НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
			
			ЕдИзм = НайденнаяЕдиница;
		//+++ БАО 30.05.2017 №926	
		//КонецЕсли;
		//--- БАО 30.05.2017 №926
		
		ТекТовар.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
		ТекТовар.ЕдиницаДляОтчетов       = НайденнаяЕдиница;
		Попытка
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(ТекТовар.Ссылка);
			//--- БАО 27.06.2017 №1192

			
			ТекТовар.Записать();
		Исключение
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		КонецПопытки;
		
	//+++ БАО 30.05.2017 №926
	КонецЕсли;
	//--- БАО 30.05.2017 №926
	
	Возврат ТекТовар.Ссылка;
КонецФункции

//+++ Костя
Процедура ЗаписатьНовуюНоменклатуру(СписокЗаказов, ТабличнаяЧастьЗаказов)//, ОбновлятьНоменклатуру)
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11));
	КодыТовара = Новый ТаблицаЗначений;
	КодыТовара.Колонки.Добавить("КодТовара", ОписаниеТиповСтрока);	
	Для Каждого СтрТовара Из ТабличнаяЧастьЗаказов Цикл
		НоваяСтрКодыТовара = КодыТовара.Добавить();
		НоваяСтрКодыТовара.КодТовара = Формат(СтрТовара.skuid_Ч, "ЧН=0; ЧГ=");
	КонецЦикла;
	//КодыТовара.Добавить().КодТовара = "12345666"; // ДЛЯ Т Е С Т А
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТчЗаказы.КодТовара КАК СТРОКА(11)) КАК КодТовара
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&ТЧЗаказы КАК ТчЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТовара.КодТовара КАК КодТовара,
	|	ЕСТЬNULL(Номенклатура.Ссылка, 0) КАК НоменклатураСсылка
	|ПОМЕСТИТЬ НоменклатураВБазе
	|ИЗ
	|	ВремТаб КАК КодыТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО КодыТовара.КодТовара = Номенклатура.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураВБазе.КодТовара КАК КодТовара,
	|	НоменклатураВБазе.НоменклатураСсылка
	|ИЗ
	|	НоменклатураВБазе КАК НоменклатураВБазе
	|ГДЕ
	|	НоменклатураВБазе.НоменклатураСсылка = 0");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЧЗаказы", КодыТовара);
	ТЗНовыеТовары = Запрос.Выполнить().Выгрузить();
	/////////////////////////////////////////////////////////////////////////////////
	
	//Штуки           = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // шт.
	//ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001");       // Товар
	СтавкаНДС18     = Перечисления.СтавкиНДС.НДС18;
	
	флНовый = Истина;
	//Штуки       = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	//ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001"); // Товар
	Для Каждого НовыйТовар Из ТЗНовыеТовары Цикл
		Стр = ТабличнаяЧастьЗаказов.Найти(Число(НовыйТовар.КодТовара), "skuId_Ч");
		
		//Для Каждого Стр Из ТабличнаяЧастьЗаказов Цикл 
		//	
		//	флНовый = Ложь;
		//	Товар = Справочники.Номенклатура.НайтиПоКоду(ЧислоКСтрокеБезПробелов(стр.skuId_Ч));
		//	
		//	Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
		ТекТовар = Справочники.Номенклатура.СоздатьЭлемент();
		//		флНовый = Истина;			
		//	Иначе
		//		//Если ОбновлятьНоменклатуру Тогда
		//			//ТекТовар = Товар.ПолучитьОбъект();
		//		//Иначе 
		//			Продолжить; // Перейти к след. позиции
		//		//КонецЕсли;
		//	КонецЕсли;
		
		Заказ       = СписокЗаказов.Найти(Число(Стр.orderId_Ч), "orderId_Ч");
		КодМагазина = Заказ.shop_Ч;
		КодТовара   = Стр.skuId_Ч;
		      // шт.
		
		
		ТекТовар.Родитель                = ПодготовитьРодителяНоменклатуры(Заказ, КодМагазина);//Бухаров - добавил параметр код магазина
		ТекТовар.Наименование            = стр.Name;
		ТекТовар.НаименованиеПолное      = стр.Name;
		ТекТовар.Код 				 	 = ЧислоКСтрокеБезПробелов(КодТовара);
		ТекТовар.БазоваяЕдиницаИзмерения = ШтукиПер;
		ТекТовар.ВидНоменклатуры         = ВидНоменклатурыПер;
		ТекТовар.Артикул				 = стр.articul;
		ТекТовар.СтавкаНДС               = СтавкаНДС18;
		ТекТовар.ВестиУчетПоСериям       = Ложь;
		
		Попытка
			ТекТовар.Записать();

			Лог("   " + ?(флНовый, "+++ Записан новый", "*** Обновлен") + " товар: "+ ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")");
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог("!!!Ошибка " + ?(флНовый, "записи нового", "обновления") + " товара: " + ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(ТекТовар.Ссылка);
		//--- БАО 27.06.2017 №1192

		
		// Записываем единицу хранения остатков и единицу для отчетов
		ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, ТекТовар.Ссылка);
		Если ВыборкаЕдиниц.Следующий() Тогда
			НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
		Иначе
			НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(ТекТовар.БазоваяЕдиницаИзмерения);
			НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = ТекТовар.БазоваяЕдиницаИзмерения;
			НайденнаяЕдиницаОбъект.Коэффициент             = 1;
			НайденнаяЕдиницаОбъект.Владелец                = ТекТовар.Ссылка;
			
			Попытка
				НайденнаяЕдиницаОбъект.Записать();

			Исключение
				Лог("!!!Ошибка " + "Ошибка записи ЕДИНИЦЫ ИЗМЕРЕНИЯ: " + НайденнаяЕдиница + " Для: " + ТекТовар);
			КонецПопытки;
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(НайденнаяЕдиницаОбъект.Ссылка);
			//--- БАО 27.06.2017 №1192
			
			НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		КонецЕсли;
		
		ТекТовар.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
		ТекТовар.ЕдиницаДляОтчетов       = НайденнаяЕдиница;
		
		Попытка
			ТекТовар.Записать();
			Лог("!!!Записан новый " + "   +++++ " +"ЕдИзм ХрОстатков: "+ ТекТовар.ЕдиницаХраненияОстатков + " ЕдИзм ДляОтчетов: "+ ТекТовар.ЕдиницаДляОтчетов);
		Исключение
			Лог("!!!Ошибка " + "   +++++ " + "ОШИБКА ЗАПИСИ" + "ЕдИзм ХрОстатков: "+ ТекТовар.ЕдиницаХраненияОстатков + " ЕдИзм ДляОтчетов: "+ ТекТовар.ЕдиницаДляОтчетов);
		КонецПопытки;
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(ТекТовар.Ссылка);
		//--- БАО 27.06.2017 №1192
		
	КонецЦикла;
	
КонецПроцедуры
//--- Костя

//+++ БАО 31.05.2017 №926
//Функция ПодобратьКонтрагентаИДоговор(ПараметрыЗаказа)
Функция ПодобратьКонтрагентаИДоговор(ПараметрыЗаказа, СписокСсылокНаКонтрагента = Неопределено)	
//--- БАО 31.05.2017 №926	
	
	КодКонтрагента = ПрефиксКодовКонтрагентов + ЧислоКСтрокеБезПробелов(ПараметрыЗаказа.userId_Ч);
	
	//+++ БАО 31.05.2017 №926
	Если СписокСсылокНаКонтрагента <> Неопределено Тогда 
		
		НайденнаяСтрокаСписокСсылокНаКонтрагента = СписокСсылокНаКонтрагента.Получить(КодКонтрагента);
		
		Если   НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда
			Контрагент = НайтиПокупателя(КодКонтрагента);
			Договор = ПодготовитьДоговор(Контрагент);
		Иначе 
			Контрагент = НайденнаяСтрокаСписокСсылокНаКонтрагента.Ссылка;
		    Договор = ПодготовитьДоговор(Контрагент, НайденнаяСтрокаСписокСсылокНаКонтрагента);
		КонецЕсли;	
		
	Иначе 					
		//--- БАО 31.05.2017 №926
		
		Контрагент = НайтиПокупателя(КодКонтрагента);
		Договор = ПодготовитьДоговор(Контрагент);
		
		//+++ БАО 31.05.2017 №926
	КонецЕсли;
	//--- БАО 31.05.2017 №926
	
	КонтрагентИДоговор = Новый Структура("Контрагент, Договор", Контрагент, Договор);
	Возврат КонтрагентИДоговор;
	
КонецФункции

Функция ЧислоКСтрокеБезПробелов(Чис) Экспорт
	Возврат Формат(Чис, "ЧН=0; ЧГ=");
КонецФункции

Функция ЦенаПоследнейЗакупки(ССылкаНаТовар, Дата)Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.Период < &Период
	|	И ПартииТоваровНаСкладах.Количество > 0
	|	И ПартииТоваровНаСкладах.Стоимость > 0
	|   И ПартииТоваровНаСкладах.Номенклатура=&Номенклатура
	|УПОРЯДОЧИТЬ ПО
	|	ПартииТоваровНаСкладах.Период УБЫВ";	
	Запрос.УстановитьПараметр("Номенклатура", ССылкаНаТовар);
	Запрос.УстановитьПараметр("Период", Дата);
	Тз = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Для каждого Стр Из ТЗ Цикл
			Возврат (Стр.Стоимость/Стр.Количество);
		КонецЦикла;
	КонецЕсли; 
КонецФункции // ЦенаПоследнейЗакупки()

Функция ПодготовитьДокументКЗаполнению(ДокОбъект, ОписаниеДействия = "", НомерЗаказа = 0)
	
	ДействиеСДокументом = "";
	Попытка
		Если ДокОбъект.ПометкаУдаления Тогда
			ДействиеСДокументом = "снять с удаления ";
			ДокОбъект.УстановитьПометкуУдаления(Ложь);
		ИначеЕсли ДокОбъект.Проведен Тогда
			ДействиеСДокументом = "распровести ";
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	Исключение
		Лог("!!! Ошибка. Не удалось " + ДействиеСДокументом + ДокОбъект + " " + ОписаниеОшибки());
		Если ЗначениеЗаполнено(НомерЗаказа) Тогда
			Лог("!!! " + ОписаниеДействия + НомерЗаказа + " прервано.");
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(ДокОбъект.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат Истина;
	
КонецФункции

Функция ПометкаДокументаНаУдаление(ДокОбъект)

	
	Если Не ДокОбъект.ПометкаУдаления Тогда
		Попытка
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			//+++ БАО 09.06.2017 №926
			Если ДокОбъект.Модифицированность()  Тогда
				ДокОбъект.Записать();
			КонецЕсли;	
			//--- БАО 09.06.2017 №926 
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			Лог("   --- Помечен на удаление " + ДокОбъект);
		Исключение
			ВывестиСообщение(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(ДокОбъект.Ссылка);
	//--- БАО 27.06.2017 №1192

	
	Возврат Истина;
	
КонецФункции // ПометкаДокументаНаУдаление()

Функция ДатаВечер(Дата1С)Экспорт
	Результат = Дата(Год(Дата1С), Месяц(Дата1С), День(Дата1С), 20, 0, 0);
	Возврат Результат;
КонецФункции

Функция НайтиЗакрытие(Заказ)
	Если Заказ = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
		Возврат Документы.ЗакрытиеЗаказовПокупателей.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ЗакрытиеЗаказовПокупателейЗаказы
	|ГДЕ
	|	ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя = &Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка.Проведен УБЫВ" ;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.ЗакрытиеЗаказовПокупателей.ПустаяСсылка();
	КонецЕсли; 
КонецФункции

//+++ БАО 01.06.2017 №926
//Функция ПодобратьАдрес(Адрес)
Функция ПодобратьАдрес(Адрес, НайденнаяСтрокаСписокМагазинов = Неопределено)
	
	Если НайденнаяСтрокаСписокМагазинов <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ссылкаАдрес) Тогда
		Возврат НайденнаяСтрокаСписокМагазинов.ссылкаАдрес;	
	КонецЕсли;	
	
	//Искали уже, но не нашли,
	//у добавленных магазинов ссылкаАдрес = Неопределено
	Если (НайденнаяСтрокаСписокМагазинов <> Неопределено И Не ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ссылкаАдрес))
		Или (НайденнаяСтрокаСписокМагазинов = Неопределено) Тогда
		//--- БАО 01.06.2017 №926	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	новаАдреса.Ссылка
		|ИЗ
		|	Справочник.новаАдреса КАК новаАдреса
		|ГДЕ
		|	новаАдреса.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", Адрес);
		
		ВыборкаАдреса = Запрос.Выполнить().Выбрать();
		Если ВыборкаАдреса.Следующий() Тогда
			Возврат ВыборкаАдреса.Ссылка;
		КонецЕсли;
		
		//+++ БАО 01.06.2017 №926
	КонецЕсли;
	//--- БАО 01.06.2017 №926
	
	//ОбъектПоискаАдреса.Адрес = Адрес;
	ОбъектПоискаАдреса.ОбластьПоискаКлассификатор = Ложь;
	ОбъектПоискаАдреса.ОбластьПоискаЯндекс = Истина;
	
	//+++ БАО 01.06.2017 №926
	//ххх Надо и это посмотреть
	//--- БАО 01.06.2017 №926
	
	тзАдреса = ОбъектПоискаАдреса.ПолучитьТаблицуАдресов(Адрес);
	Если тзАдреса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если тзАдреса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	строкаАдреса = тзАдреса[0];
	
	//Если Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Тогда
	//	Лог("!!!НЕ ОПРЕДЕЛЕН ДОМ "+Адрес);
	//КонецеСли;	
	
	СпособГеокодирования = Перечисления.СпособыГеокодирования.Яндекс;
	
	Если Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Или Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Долгота)) ИЛИ Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Широта)) Тогда
		// попытка гугел
		КоординатыГугл = РаботаСГеокодированием.Геокодирование_GoogleAPI(Адрес);
		Если КоординатыГугл = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			СтрокаАдреса.Широта = КоординатыГугл.Широта;
			СтрокаАдреса.Долгота = КоординатыГугл.Долгота;
			СтрокаАдреса.Наименование = Адрес;
			СпособГеокодирования = Перечисления.СпособыГеокодирования.Google;
		КонецеСли;	
	//ИначеЕсли Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Тогда
	//	Лог("!!!НЕ ОПРЕДЕЛЕН ДОМ "+Адрес);
	КонецЕсли;
	
	обАдрес = Справочники.новаАдреса.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(обАдрес, строкаАдреса);
	обАдрес.Наименование = Адрес;
	обАдрес.НаименованиеТочкиИнтереса = строкаАдреса.Наименование; // определившийся адрес для выгрузки в админку
	обАдрес.ВходитВКлассификатор = Ложь;
	обАдрес.СпособГеокодирования = СпособГеокодирования;
	Попытка
		обАдрес.Записать();
	Исключение
		Лог("!!!Ошибка записи нового адреса "+Адрес + " " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(обАдрес.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат обАдрес.Ссылка;
	
КонецФункции

//+++ БАО 01.06.2017 №926
//Функция ПодобратьТочкуДоставкиПоАдресу(ВладелецТочки, Адр, ВремяС, ВремяПо, Фл = Неопределено)
Функция ПодобратьТочкуДоставкиПоАдресу(ВладелецТочки, Адр, ВремяС, ВремяПо, Фл = Неопределено, НайденнаяСтрокаСписокМагазинов = Неопределено)
	
	Если НайденнаяСтрокаСписокМагазинов <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ТочкиДоставки) Тогда
		
		Возврат НайденнаяСтрокаСписокМагазинов.ТочкиДоставки; 
   	
   	КонецЕсли;
	
//--- БАО 01.06.2017 №926	
	
	Адрес = Адр;
	Если Лев(Адрес, 11) = "Москва и МО" Тогда
		Адрес = СокрЛ(Сред(Адрес, 12));
	КонецЕсли;
		
	
	Если Лев(Адрес, 10) = "Москва г. " Тогда
		Адрес = "Москва, " + Сред(Адрес, 11);
	КонецЕсли;
	ЧВ = СтрЧислоВхождений(Адрес, "Москва");
	
	Если ЧВ >= 2 Тогда //   Или ЧВ = 0
		Адрес = СтрЗаменить(Адрес, "Москва", "");
		Адрес = "Москва, " + Адрес;
	КонецеСли;	
	
	Адрес = СокрП(Лев(Адрес, 150));
	
	Если ЗначениеЗаполнено(ВладелецТочки) И ЗначениеЗаполнено(Адрес) Тогда
		
		//+++ БАО 01.06.2017 №926
		//т.е. точку доставки искали, но не нашли  или не искали
		Если (НайденнаяСтрокаСписокМагазинов <> Неопределено И Не ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ТочкиДоставки))
			Или (НайденнаяСтрокаСписокМагазинов = Неопределено)
			
			
			Тогда
			//--- БАО 01.06.2017 №926
			
			АдресНеНайден = "<не найден> " + Адрес;
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	новаТочкиДоставки.Ссылка
			|ИЗ
			|	Справочник.новаТочкиДоставки КАК новаТочкиДоставки
			|ГДЕ
			|	новаТочкиДоставки.ВладелецТочки = &ВладелецТочки
			|	И (новаТочкиДоставки.Наименование = &Наименование
			|			ИЛИ новаТочкиДоставки.Наименование = &Наименование2)";
			
			Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочки);
			Запрос.УстановитьПараметр("Наименование", Адрес);
			Запрос.УстановитьПараметр("Наименование2", АдресНеНайден);
			
			ВыборкаТочек = Запрос.Выполнить().Выбрать();
			Если ВыборкаТочек.Следующий() Тогда
				Возврат ВыборкаТочек.Ссылка;
			КонецЕсли;
			
			//+++ БАО 01.06.2017 №926
		КонецЕсли;
		//--- БАО 01.06.2017 №926
		
		обТочкаДоставки = Справочники.новаТочкиДоставки.СоздатьЭлемент();
		обТочкаДоставки.Наименование = Адрес;
		обТочкаДоставки.ВладелецТочки = ВладелецТочки;
		обТочкаДоставки.ВремяРаботыНачало = ВремяС;
		обТочкаДоставки.ВремяРаботыОкончание = ВремяПо;
		
		//+++ БАО 01.06.2017 №926
		//ссылкаАдрес = ПодобратьАдрес(Адрес);
		ссылкаАдрес = ПодобратьАдрес(Адрес, НайденнаяСтрокаСписокМагазинов);
		
		Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
			НайденнаяСтрокаСписокМагазинов.ссылкаАдрес = ссылкаАдрес;
		КонецЕсли;	
		
		//--- БАО 01.06.2017 №926
		
		Если ЗначениеЗаполнено(ссылкаАдрес) Тогда
			обТочкаДоставки.Адрес = ссылкаАдрес;
		Иначе
			Лог("!!!Не определены координаты точки доставки: " + Адрес);
			//lem.ОтправитьНормальноеСообщениеАдминам("Ошибка в поиске адреса", "Не определены координаты точки доставки: " + Адрес);
			
			Если Фл <> Неопределено Тогда
				Фл = Истина;
			КонецеСли;				
			
			//// делаем еще попытку
			//Лог("!!!Повторная попытка поиска адреса: " + Адрес);
			//ссылкаАдрес = ПодобратьАдрес(Адрес);
			//Если ЗначениеЗаполнено(ссылкаАдрес) Тогда
			//	обТочкаДоставки.Адрес = ссылкаАдрес;
			//Иначе
			//	Лог("!!!ПОПЫТКА 2 поиска адреса! Не определены координаты точки доставки: " + Адрес);
			//	////lem.ОтправитьНормальноеСообщениеАдминам("ПОПЫТКА 2: НЕ НАЙДЕН АДРЕС", "!!!Не определены координаты точки доставки: " + Адрес);
			//	обТочкаДоставки.Наименование = АдресНеНайден;
			//КонецЕсли;		
		КонецЕсли;
		
		Попытка
			обТочкаДоставки.Записать();
			
			Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
				НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = обТочкаДоставки;
			КонецЕсли;	

			
		Исключение
			Лог("!!!Ошибка записи точки доставки " + Адрес + " " + ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(обТочкаДоставки.Ссылка);
		//--- БАО 27.06.2017 №1192

		Возврат обТочкаДоставки.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ВпихнутьДоставку(Док, СтоимостьДоставки)
	
	// очистка старых записей по доставке
	Най = Док.Услуги.НайтиСтроки(Новый Структура("Номенклатура", ДостПер));
	Для Каждого Стр Из Най Цикл
		Док.Услуги.Удалить(Стр);	
	КонецЦикла;	
	
	Если СтоимостьДоставки > 0 Тогда
		стрУслуги = Док.Услуги.Добавить();
		стрУслуги.Номенклатура = ДостПер;
		стрУслуги.Содержание   = "Услуги по доставке товара";
		стрУслуги.Цена         = СтоимостьДоставки;
		стрУслуги.Количество   = 1;
		стрУслуги.СтавкаНДС    = Перечисления.СтавкиНДС.НДС18;
		стрУслуги.Сумма        = СтоимостьДоставки;
		стрУслуги.СуммаНДС     = СтоимостьДоставки * 18 / 118;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиДокумент(ВидДокумента = "РеализацияТоваровУслуг", стрНомерЗаказа)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ." + ВидДокумента + " КАК Док
	|ГДЕ
	|	Док.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", стрНомерЗаказа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


Процедура ОбновитьДатуЗаказа(ЗаказИ, Заказ, Реализация)
	
	СоздатьИзменениеДатыДоставки = Ложь;
	Реализация = ?(Реализация = Неопределено,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),Реализация.Ссылка);
	
	Если Реализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
		СоздатьИзменениеДатыДоставки = Истина;	
	Иначе
		ДокИзменениеДатыДоставки = Документы.ИзменениеДатыДоставки.НайтиПоРеквизиту("Заказ",Реализация);
		Если ДокИзменениеДатыДоставки.Пустая() Тогда
			СоздатьИзменениеДатыДоставки = Истина;
		КонецЕсли;
	КонецЕсли;
	
    //Если СоздатьИзменениеДатыДоставки Тогда
		НовД = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
		НовД.Дата = ТекущаяДата();
		НовД.ДатаДоставки = ЗаказИ.deliveryDate_Д;
		НовД.Доставка = Заказ.Ссылка;
		Новд.Заказ    = Реализация;
		НовД.Записать(РежимЗаписиДокумента.Запись);
		НовД.Записать(РежимЗаписиДокумента.Проведение);
    //КонецЕсли;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(НовД.Ссылка);
	//--- БАО 27.06.2017 №1192

КонецПроцедуры

//+++ БАО 31.05.2017 №926
//Функция ПодготовитьМагазин(Заказ)
Функция ПодготовитьМагазин(Заказ, СоздатьМагазин = Ложь, Автопоступление = Ложь, СписокОсновнойМагазин = Неопределено)	
	
	Если Не СоздатьМагазин Тогда
		//--- БАО 31.05.2017 №926	
		
		
		КодМагазина = ПреобразоватьКодМагазина(Заказ.shop_Ч);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Код = &Код";
		Запрос.УстановитьПараметр("Код", КодМагазина);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
		//+++ БАО 31.05.2017 №926
	КонецЕсли;
	//--- БАО 31.05.2017 №926

	
	НовыйМагазин = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйМагазин.Код = КодМагазина;
	НовыйМагазин.Наименование = Заказ.shopName;
	НовыйМагазин.НаименованиеПолное = Заказ.shopName;
	
	НовыйМагазин.ЗаголовокИнтернетМагазина = Заказ.shopTitle;
	НовыйМагазин.ТелефонИнтернетМагазина = Заказ.shopPhone;
	НовыйМагазин.РеквизитыНаБЗ = Заказ.textReceipt;       //shopJurFace
	
	НовыйМагазин.Родитель = КомитентПер; //Комитенты
	НовыйМагазин.Покупатель = Истина;
	НовыйМагазин.Поставщик = Истина;
	НовыйМагазин.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	НовыйМагазин.Автопоступление = Истина;
	НовыйМагазин.ПолучательID = Заказ.receiverID;
	
	//+++ БАО 31.05.2017 №926
	РодительИМ_TopDelivery = Ложь;
	//--- БАО 31.05.2017 №926
	
	Если ЗначениеЗаполнено(Заказ.receiverID) Тогда
		//+++ БАО 31.05.2017 №926
		//НайТД = Справочники.Контрагенты.НайтиПоНаименованию("ИМ TopDelivery", Истина);
		//Если НайТД.Пустая() Тогда
		//	НовГр = Справочники.Контрагенты.СоздатьГруппу();
		//	НовГр.Родитель = НовыйМагазин.Родитель;
		//	НовГр.Наименование = "ИМ TopDelivery";
		//	НовГр.Записать();
		//	НайТД = НовГр.Ссылка;
		//КонецеСли;	
		//НовыйМагазин.Родитель = НайТД.Ссылка;
		
		НовыйМагазин.Родитель = ИМ_TopDelivery;
		РодительИМ_TopDelivery = Истина;
		
		//--- БАО 31.05.2017 №926
		
	КонецеСли;	
	
	//+++ БАО 31.05.2017 №926
	Если СписокОсновнойМагазин = Неопределено Тогда
		//--- БАО 31.05.2017 №926	
		
		
		КодМагазина = ПреобразоватьКодМагазина(Заказ.ParentID_Ч);
		Если Заказ.ParentID_Ч > 0 Тогда
			КодМагазинаРод = ПреобразоватьКодМагазина(Заказ.ParentID_Ч);
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Магазин
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ОсновнойМагазин.Код = &Код";
			Зап.УстановитьПараметр("Код", КодМагазинаРод);	
			Рез = Зап.Выполнить().Выгрузить();
			Если Рез.Количество() <> 0 Тогда
				НовыйМагазин.Родитель = Рез[0].Магазин;
				
			//+++ БАО 03.08.2017 №1470
			Иначе
				
				ОсновнойМагазин = Справочники.Контрагенты.НайтиПоКоду(КодМагазинаРод);
				
				Если Не ЗначениеЗаполнено(ОсновнойМагазин) Тогда 
					RS = Евген.ЗапросКИнтернетМагазину(" 
					|SELECT
					|S.shopId, S.shopName, S.internetShopID
					|FROM 
					|settings S (NOLOCK)
					|WHERE
					|S.ShopID ='" + Заказ.ParentID_Ч + "'", ПодключениеКМагазину);
					
					КодМагазинаТаблица = СоздатьТаблицу(RS, "shopId, shopName, internetShopID");//СписокКолонокДанныхКОнтрагентов);
					RS=0;
					Если КодМагазинаТаблица.Количество() > 0 Тогда

						ОсновнойМагазин = Справочники.Контрагенты.СоздатьЭлемент();
						ОсновнойМагазин.Наименование = Заказ.shopName;
						ОсновнойМагазин.ОсновнойМагазин = ОсновнойМагазин;
						ОсновнойМагазин.Родитель = Справочники.Контрагенты.НайтиПоКоду("000000004"); //Комитенты
						ОсновнойМагазин.Код =  КодМагазинаРод;
						
						Попытка
							ОсновнойМагазин.Записать();
							//+++ БАО 27.06.2017 №1192
							ДобавитьВХранилищеОбъектовСравнения(ОсновнойМагазин.Ссылка);
							//--- БАО 27.06.2017 №1192
							
							Лог("+++ Записан основной магазин  "+ Заказ.shopName+" для shopId: "+ НовыйМагазин.Код); 
						Исключение
							Лог("!!!Ошибка записи основной магазина: "+ Заказ.shopName +" для shopId: "+ НовыйМагазин.Код + Символы.ПС + ОписаниеОшибки());
						КонецПопытки;
   						
					КонецЕсли;
					
				Иначе 
					
					ГруппаРодитель = Справочники.Контрагенты.СоздатьГруппу();
					ГруппаРодитель.Наименование = Заказ.shopName;
					ГруппаРодитель.ОсновнойМагазин = ОсновнойМагазин.Ссылка;
					ГруппаРодитель.Родитель = Справочники.Контрагенты.НайтиПоКоду("000000004"); //Комитенты

					
					Попытка
						ГруппаРодитель.Записать();
						
						ДобавитьВХранилищеОбъектовСравнения(ГруппаРодитель.Ссылка);

						Лог("+++ Записан магазин группа "+ Заказ.shopName+" для shopId: "+ НовыйМагазин.Код); 
					Исключение
						Лог("!!!Ошибка записи магазина группы: "+ Заказ.shopName +" для shopId: "+ НовыйМагазин.Код + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
					
					//Заполним параметры ГруппаРодитель
					ЗапросПК = Новый Запрос("ВЫБРАТЬ
					|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
					|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
					|	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
					|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
					|	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
					|	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
					|	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
					|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
					|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов
					|ИЗ
					|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
					|ГДЕ
					|	ПараметрыКонтрагентовСрезПоследних.Контрагент = &Контрагент");
					ЗапросПК.УстановитьПараметр("Контрагент", ГруппаРодитель.ОсновнойМагазин);	
					РезПК = ЗапросПК.Выполнить().Выгрузить();
					
					НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
					НаборПК.Отбор.Контрагент.Установить(ГруппаРодитель.Ссылка);
					НаборПК.Прочитать();
					НаборПК.Очистить();
					
					НЗаписьПК = НаборПК.Добавить();					
					ЗаполнитьЗначенияСвойств(НЗаписьПК, РезПК[0]);
					НЗаписьПК.Период =  ТекущаяДата();
					НЗаписьПК.Контрагент = ГруппаРодитель.Ссылка;
					
					НаборПК.Записать();	
					ДобавитьВХранилищеОбъектовСравнения(НаборПК)
					
					
				КонецЕсли;
				//--- БАО 03.08.2017 №1470
				
			КонецеСли;	
		КонецеСли;	
		
		//+++ БАО 31.05.2017 №926
	Иначе
		
		ParentID_Ч = Заказ.ParentID_Ч;
		
		Если РодительИМ_TopDelivery Тогда
			
			ParentID_Ч = Код_ИМ_TopDelivery;
			
		Иначе 
			
			ParentID_Ч = ПреобразоватьКодМагазина(Заказ.ParentID_Ч);
			
		КонецЕсли;	
			
		НайденнаяСтрокаОсновнойМагазин = СписокОсновнойМагазин.Получить(ParentID_Ч);
		Если НайденнаяСтрокаОсновнойМагазин <> Неопределено Тогда 
			НовыйМагазин.Родитель = НайденнаяСтрокаОсновнойМагазин.ОсновнойМагазин;	
		КонецЕсли;	
		
	КонецЕсли;
	//--- БАО 31.05.2017 №926
		
	НовыйМагазин.Записать();
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(НовыйМагазин.Ссылка);
	//--- БАО 27.06.2017 №1192

	
	
	// Михушкин - копируем ПараметрыКонтрагентов - 22.08.2016 --->> 
	Попытка		
		
		Если ЗначениеЗаполнено(НовыйМагазин.Родитель) Тогда
			//+++ БАО 31.05.2017 №926
			Если СписокОсновнойМагазин = Неопределено Тогда 
				//--- БАО 31.05.2017 №926	
				
				ЗапросПК = Новый Запрос("ВЫБРАТЬ
				                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
				                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
				                        |	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
				                        |	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
				                        |	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
				                        |	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
				                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
										|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
				                        |	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов
				                        |ИЗ
				                        |	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
				                        |ГДЕ
				                        |	ПараметрыКонтрагентовСрезПоследних.Контрагент = &Контрагент");
				ЗапросПК.УстановитьПараметр("Контрагент", НовыйМагазин.Родитель.ОсновнойМагазин.Ссылка);	
				РезПК = ЗапросПК.Выполнить().Выгрузить();
				
				НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
				НаборПК.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
				НаборПК.Прочитать();
				НаборПК.Очистить();
				
				НЗаписьПК = НаборПК.Добавить();					
				ЗаполнитьЗначенияСвойств(НЗаписьПК, РезПК[0]);
				НЗаписьПК.Период =  ТекущаяДата();
				НЗаписьПК.Контрагент = НовыйМагазин.Ссылка;
				
				НаборПК.Записать();	
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(НаборПК)
				//--- БАО 27.06.2017 №1192
				
				//+++ БАО 31.05.2017 №926
			ИначеЕсли НайденнаяСтрокаОсновнойМагазин <> Неопределено И НайденнаяСтрокаОсновнойМагазин.ЕстьПараметрыОсновногоМагазина Тогда 
				
				НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
				НаборПК.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
				НаборПК.Прочитать();
				НаборПК.Очистить();
				
				НЗаписьПК = НаборПК.Добавить();					
				ЗаполнитьЗначенияСвойств(НЗаписьПК, НайденнаяСтрокаОсновнойМагазин);
				НЗаписьПК.Период =  ТекущаяДата();
				НЗаписьПК.Контрагент = НовыйМагазин.Ссылка;
				
				НаборПК.Записать();	
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(НаборПК)
				//--- БАО 27.06.2017 №1192

				
			КонецЕсли;
			//--- БАО 31.05.2017 №926
			
			
		КонецЕсли;	
	Исключение	
	КонецПопытки;	
	// <<--- Михушкин
	
	
	Наб = РегистрыСведений.ПечататьБланкиПоКонтрагентам.СоздатьНаборЗаписей();
	Наб.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
	Нов = Наб.Добавить();
	Нов.Контрагент = НовыйМагазин.Ссылка;
	Наб.Записать();
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(Наб);
	//--- БАО 27.06.2017 №1192

	
	ДоговорКомиссии = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	ДоговорКомиссии.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	ДоговорКомиссии.ВалютаВзаиморасчетов  = Руб;
	ДоговорКомиссии.Организация           = Орг; 
	ДоговорКомиссии.ВидДоговора           = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ДоговорКомиссии.Наименование          = "Комиссионная торговля";
	ДоговорКомиссии.Владелец              = НовыйМагазин.Ссылка;
	ДоговорКомиссии.Записать();
	Лог("   +++ Записан договор комиссии для " + НовыйМагазин);
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(ДоговорКомиссии.Ссылка);
	//--- БАО 27.06.2017 №1192

	
	ДоговорДоставки = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	ДоговорДоставки.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	ДоговорДоставки.ВалютаВзаиморасчетов  = Руб;
	ДоговорДоставки.Организация           = Орг; 
	ДоговорДоставки.ВидДоговора           = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ДоговорДоставки.Наименование          = "Договор по доставке";
	ДоговорДоставки.Владелец              = НовыйМагазин.Ссылка;
	ДоговорДоставки.Записать();
	Лог("   +++ Записан договор доставки для " + НовыйМагазин);
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(ДоговорДоставки.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат НовыйМагазин.Ссылка;
КонецФункции

//+++ БАО 23.05.2017 №876
//Функция ЗаполнитьТабличныеЧастиПучкаДокументов(Товар, Количество, КоличествоПоступления, Цена, флВозврат, ТоварRestore, Вес, СкладМагазина, ОценочнаяСтоимость = Неопределено)//Бухаров - добавил ТоварRestore, если 
Функция ЗаполнитьТабличныеЧастиПучкаДокументов(Товар, Количество, КоличествоПоступления, Цена, флВозврат, ТоварRestore, Вес, СкладМагазина, ОценочнаяСтоимость = Неопределено, НДС = Неопределено, ЕдиницаХраненияОстатков = Неопределено, НДСТовара = Неопределено)//Бухаров - добавил ТоварRestore, если 
//--- БАО 23.05.2017 №876

    //+++ БАО 01.06.2017 №926
	Если ЕдиницаХраненияОстатков = Неопределено Тогда
		 ЕдиницаХраненияОстатков = Товар.ЕдиницаХраненияОстатков;
	КонецЕсли;
	
	Если НДСТовара = Неопределено Тогда
		
		НДСТовара = Товар.СтавкаНДС;
		
	КонецЕсли;
	 
	//--- БАО 01.06.2017 №926

	//+++++Серегин М.В. 17.02.2016 13:42:05 отключено Цена = Окр(Цена);
	Для Каждого элСтр Из ПучокДокументов Цикл
		эл = элСтр["Док"];
		ТипДокумента = ТипЗнч(эл);
		Если Не флВозврат Тогда
			Если ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
				БезВеса = Ложь;
				Если ЗначениеЗаполнено(Цена) Тогда
					СтрокаДокументаРеализация = эл.Товары.Добавить();
				Иначе	
					СтрокаДокументаРеализация = эл.ПодарочныеПозиции.Добавить();
					//БезВеса = Истина;
				КонецеСли;	
				СтрокаДокументаРеализация.Номенклатура     = Товар;
				
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаРеализация.СтавкаНДС        = Товар.СтавкаНДС;
				СтрокаДокументаРеализация.СтавкаНДС        = НДСТовара;
				//--- БАО 01.06.2017 №926
				СтрокаДокументаРеализация.Количество       = Количество;
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаРеализация.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаДокументаРеализация.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаДокументаРеализация.Цена             = Цена;
				СтрокаДокументаРеализация.Сумма            = Количество * Цена;
				СтрокаДокументаРеализация.Коэффициент      = 1;
				СтрокаДокументаРеализация.Склад            = СкладРеализации; // комиссия или доставка
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаРеализация.Качество         = Справочники.Качество.Новый;
				СтрокаДокументаРеализация.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				СтрокаДокументаРеализация.ОценочнаяСтоимость = ОценочнаяСтоимость;
				//Если Не БезВеса Тогда
				СтрокаДокументаРеализация.Вес         = Вес;
				//КонецеСли;
				//+++ Костя 25.08.2015
				СтрокаДокументаРеализация.СкладМагазина    = СкладМагазина;
				//--- Костя 25.08.2015
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДокументаРеализация, эл);
				//+++ БАО 23.05.2017 №876
				СтрокаДокументаРеализация.СтавкаНДСФЗ54 = НДС;
				//--- БАО 23.05.2017 №876
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
				Если ЗначениеЗаполнено(Цена) Тогда
					СтрокаПоступления = эл.Товары.Добавить();
				Иначе
					СтрокаПоступления = эл.ПодарочныеПозиции.Добавить();
				КонецеСЛи;	
				СтрокаПоступления.Номенклатура     = Товар;
				
				//+++ БАО 01.06.2017 №926
				//---СтрокаПоступления.СтавкаНДС        = Товар.СтавкаНДС;
				СтрокаПоступления.СтавкаНДС        = НДСТовара;
				//--- БАО 01.06.2017 №926

				//Если КоличествоПоступления <> 0 Тогда
				//	СтрокаПоступления.Количество       = КоличествоПоступления;
				//Иначе
				СтрокаПоступления.Количество       = Количество;
				//КонецеСли;
				
				//+++ БАО 01.06.2017 №926
				//---СтрокаПоступления.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаПоступления.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаПоступления.Цена             = Цена;
				СтрокаПоступления.Сумма            = Количество * Цена;
				СтрокаПоступления.Коэффициент      = 1;
				СтрокаПоступления.Склад            = СкладХраниения;
				//Серегин М.В. 01.09.2015 13:18:12 
				СтрокаПоступления.СкладМагазина    = СкладМагазина;
				//Серегин М.В. 01.09.2015 13:18:13 
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПоступления, эл);
				//Бухаров 09.08
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.СписаниеТоваров") Тогда 
				СтрокаСписания = эл.Товары.Добавить();
				СтрокаСписания.Номенклатура     = ТоварRestore;
				СтрокаСписания.ЕдиницаИзмерения = ТоварRestore.ЕдиницаХраненияОстатков;
				СтрокаСписания.Количество       = Количество;
				СтрокаСписания.Цена             = Цена;
				СтрокаСписания.Коэффициент      = 1;
				//+++ БАО 01.06.2017 №926
				//---СтрокаСписания.Качество         = Справочники.Качество.Новый;
				СтрокаСписания.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				СтрокаСписания.Сумма			= Количество * Цена;
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ОприходованиеТоваров") Тогда 
				СтрокаОприходования = эл.Товары.Добавить();
				СтрокаОприходования.Номенклатура     = Товар;
				//+++ БАО 01.06.2017 №926
				//---СтрокаОприходования.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаОприходования.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаОприходования.Количество       = Количество;
				СтрокаОприходования.Цена             = Цена;
				СтрокаОприходования.Сумма			 = Количество * Цена;
				СтрокаОприходования.Коэффициент      = 1;
				СтрокаОприходования.СуммаРегл 		 = СтрокаОприходования.Сумма;
				СтрокаОприходования.Качество         = КачествоНовый;
				если СтрокаОприходования.Сумма = 0 тогда
					СтрокаОприходования.Сумма = 1;
					СтрокаОприходования.СуммаРегл = 1;
				КонецеСли;	
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
				СтрокаПеремещения = эл.Товары.Добавить();
				СтрокаПеремещения.Номенклатура     = Товар;
				//+++ БАО 01.06.2017 №926
				//---СтрокаПеремещения.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаПеремещения.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаПеремещения.Количество       = Количество;
				СтрокаПеремещения.Цена             = Цена;
				СтрокаПеремещения.Коэффициент      = 1;
				//+++ БАО 01.06.2017 №926
				//---СтрокаПеремещения.Качество         = Справочники.Качество.Новый;
				СтрокаПеремещения.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
				СтрокаВозврата = эл.Товары.Добавить();
				СтрокаВозврата.Номенклатура     = Товар;
				//+++ БАО 01.06.2017 №926
				//---СтрокаВозврата.СтавкаНДС        = Товар.СтавкаНДС;
				СтрокаВозврата.СтавкаНДС        = НДСТовара;
				//--- БАО 01.06.2017 №926
				СтрокаВозврата.Количество       = Количество; //???????????????     КоличествоПоступления
				//+++ БАО 01.06.2017 №926
				//---СтрокаВозврата.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаВозврата.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаВозврата.Цена             = Цена;
				СтрокаВозврата.Сумма            = Количество * Цена;
				СтрокаВозврата.Коэффициент      = 1;
				СтрокаВозврата.Склад            = СкладРеализацииПоДоставке;
				//+++ БАО 01.06.2017 №926
				//---СтрокаВозврата.Качество         = Справочники.Качество.Новый;
				СтрокаВозврата.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаВозврата, эл);
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.новаГруз") Тогда
				СтрокаГруза = эл.Спецификация.Добавить();
				СтрокаГруза.Товар = Товар;
				СтрокаГруза.Количество = Количество;
				СтрокаГруза.Стоимость = Количество * Цена;
				СтрокаГруза.Стоимость = Количество * Цена;
				эл.Стоимость = эл.Стоимость + Количество * Цена; 
				СтрокаГруза.Вес = Вес;
			КонецЕсли;
			
		Иначе
			Если ТипДокумента = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
				СтрокаДокументаВозврат = эл.Товары.Добавить();
				СтрокаДокументаВозврат.Номенклатура     = Товар;
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаВозврат.СтавкаНДС        = Товар.СтавкаНДС;
				СтрокаДокументаВозврат.СтавкаНДС        = НДСТовара;
				//--- БАО 01.06.2017 №926
				
				СтрокаДокументаВозврат.Количество       = Количество;
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаВозврат.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаДокументаВозврат.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаДокументаВозврат.Цена             = Цена;
				СтрокаДокументаВозврат.Сумма            = Количество * Цена;
				СтрокаДокументаВозврат.Коэффициент      = 1;
				СтрокаДокументаВозврат.Склад            = СкладХраниения;
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаВозврат.Качество         = Справочники.Качество.Новый;
				СтрокаДокументаВозврат.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДокументаВозврат, эл);
				
				//+++ БАО 01.06.2017 №926
				//ХХХ тут тоже можно оптимизировать, но надо с пучком разобраться
				//--- БАО 01.06.2017 №926
				СтрокаДокументаВозврат.Себестоимость    = ЦенаПоследнейЗакупки(Товар, эл.Дата);
				
				
				//Серегин М.В. 01.09.2015 13:18:46 
				СтрокаДокументаВозврат.СкладМагазина    = СкладМагазина;
				//Серегин М.В. 01.09.2015 13:18:47 
				Если СтрокаДокументаВозврат.Себестоимость = 0 тогда
					Лог("!!! " + эл + " Товар " + Товар + " НовСеб=0");	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьДоговорКомитента(Комитент, флКомиссионнаяТорговля)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Наименование = &Наименование
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.ПометкаУдаления УБЫВ";
	Запрос.УстановитьПараметр("Владелец", Комитент);
	Запрос.УстановитьПараметр("Код", "000000001");
	Запрос.УстановитьПараметр("Наименование", ?(флКомиссионнаяТорговля, "Комиссионная торговля", "Договор по доставке"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ДобавитьОбновляемыйДокумент(ДокОбъект, Действия, КомментарийДействия, СообщениеОбОшибке)
	ПучокДокументов.Добавить(Новый Структура("Док, Действия, КомментарийДействия, СообщениеОбОшибке", ДокОбъект, Действия, КомментарийДействия, СообщениеОбОшибке));
	//+++ БАО 06.06.2017 №926
	
	//--- //+++ БАО 02.06.2017 №926
	//--- ПучокДокументовОбщий.Добавить(Новый Структура("Док, Действия, КомментарийДействия, СообщениеОбОшибке", ДокОбъект, Действия, КомментарийДействия, СообщениеОбОшибке));
	//--- //--- БАО 02.06.2017 №926
	
	//--- БАО 06.06.2017 №926
	
КонецПроцедуры

Функция НайтиСпецТочку(Контрагент)
	ЗапросТочек = Новый Запрос;
	ЗапросТочек.Текст =
	"ВЫБРАТЬ
	|	новаТочкиДоставки.Ссылка
	|ИЗ
	|	Справочник.новаТочкиДоставки КАК новаТочкиДоставки
	|ГДЕ
	|	новаТочкиДоставки.ВладелецТочки = &ВладелецТочки
	|	И новаТочкиДоставки.ПометкаУдаления = ЛОЖЬ";
	ЗапросТочек.УстановитьПараметр("ВладелецТочки", Контрагент);
	ВыборкаТочек = ЗапросТочек.Выполнить().Выбрать();
	Если ВыборкаТочек.Следующий() Тогда
		Возврат ВыборкаТочек.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//+++ БАО 01.06.2017 №926
//---Процедура ПроверитьИзменениеАртикула(Стр, Товар)
Процедура ПроверитьИзменениеАртикула(Стр, Товар, Артикул = Неопределено)
//--- БАО 01.06.2017 №926	

    //+++ БАО 01.06.2017 №926
	//---Если СокрЛП(стр.articul) = СокрЛП(Товар.Артикул) Тогда
	Если (Артикул = Неопределено И СокрЛП(стр.articul) = СокрЛП(Товар.Артикул)) Или
		(Артикул <> Неопределено И СокрЛП(стр.articul) = СокрЛП(Артикул))	Тогда
	//--- БАО 01.06.2017 №926
		Возврат;
	Иначе	
		Об = Товар.ПолучитьОбъект();
		Об.Артикул = СокрЛП(стр.articul);
		Об.Записать();
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(Об.Ссылка);
		//--- БАО 27.06.2017 №1192

	КонецеСли;
КонецПроцедуры	


Процедура ДобавитьОшибочныйЗаказ(СведенияОЗаказе, Ошибка)
	Наб = РегистрыСведений.НезагруженныеЗаказы.СоздатьНаборЗаписей();
	
	//Серегин М.В. 13.07.2015 17:40:57 Дата отбора
	ДатаОтбора  = ТекущаяДата(); 
	Наб.Отбор.Период.Установить(ДатаОтбора);
	Наб.Отбор.НомерЗаказа.Установить(Формат(СведенияОЗаказе, "ЧГ="));
	
	Нов = Наб.Добавить();                   
	Нов.Период = ДатаОтбора;
	Нов.НомерЗаказа = Формат(СведенияОЗаказе, "ЧГ=");
	Нов.Ошибка = Ошибка;
	
	Наб.Записать();
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(Наб);
	//--- БАО 27.06.2017 №1192

	
	ВозниклаОшибка = Истина;
КонецПроцедуры	


Процедура УстановитьОшибочныйЗаказаПрогруженным(СведенияОЗаказе, Ошибка)
	Наб = РегистрыСведений.НезагруженныеЗаказы.СоздатьНаборЗаписей();
	
	ДатаОтбора = ТекущаяДата();
	Наб.Отбор.Период.Установить(ДатаОтбора);
	Наб.Отбор.НомерЗаказа.Установить(Формат(СведенияОЗаказе, "ЧГ="));
	
	Нов = Наб.Добавить();
	Нов.Период = ДатаОтбора;
	Нов.НомерЗаказа = Формат(СведенияОЗаказе, "ЧГ=");
	Нов.Ошибка = Ошибка;
	Нов.Прогружен = Истина;
	
	Наб.Записать();
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(Наб)
	//--- БАО 27.06.2017 №1192

КонецПроцедуры	


Процедура ОбработатьЗаказы(флОбновлятьДатуПоследнейЗагрузки, ОписаниеЭтапа)
	
	Перем Контрагент, Договор;
	Перем КонтрагентДПД, ТочкаДПД;
	
		
	#Область ЗагрузкаКонтрагентов //Магазинов	
	////+++ Костя  // ЗАГРУЗКА КОНТРАГЕНТОВ
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	
	ТЗ1 = Новый ТаблицаЗначений;
	ТЗ1.Колонки.Добавить("Номер"         , ОписаниеТиповСтрока);
	ТЗ1.Колонки.Добавить("КодКонтрагента", ОписаниеТиповСтрока);
	ТЗ1.Колонки.Добавить("КодВладельца"  , ОписаниеТиповСтрока);
	//ТЗ1.ЗагрузитьКолонку(МассивНомеров,"Номер");
	
	//+Степанов Задача № 4007
	//ЗагрузитьПоставщиков();	
	//-Степанов Задача № 4007
	
	Если СписокЗаказов.Количество() >  0 Тогда
			
		//Асеев 29.09.2021 (Задача № 4667)>>>
		СписокПВЗ = Новый Соответствие;
		МассивПВЗ = Новый Массив;
		//Асеев 29.09.2021 (Задача № 4667)<<<
		
		
		//+++ БАО 31.05.2017 №926
		СписокСсылокНаКонтрагента = Новый Соответствие;
		//--- БАО 31.05.2017 №926
		
		Подключение = Евген.СоздатьПодключениеКИнтернетМагазину();
		//ПрефиксКодовКонтрагентов = "R";
		//ДатаЗапроса = НачалоДня(ТекущаяДата());
		
		Для Каждого Стр Из СписокЗаказов Цикл
			НоваяСтрТЗ1 = ТЗ1.Добавить();
			НоваяСтрТЗ1.Номер          = Формат(Стр.orderId_Ч, "ЧН=0; ЧГ=");
			НоваяСтрТЗ1.КодКонтрагента = "R"+Формат(Стр.UserId_Ч, "ЧН=0; ЧГ=");
			НоваяСтрТЗ1.КодВладельца   = "Shop_" + Формат(Стр.shop_Ч, "ЧН=0; ЧГ=");
			
			//Асеев 29.09.2021 (Задача № 4667)>>>
			Если Стр.pickupPointID_Ч Тогда
				МассивПВЗ.Добавить(Стр.pickupPointID_Ч);
			КонецЕсли;
			//Асеев 29.09.2021 (Задача № 4667)<<<
			
		КонецЦикла;
		
		//Асеев 29.09.2021 (Задача № 4667)>>>
		Если МассивПВЗ.Количество() Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивПВЗ", МассивПВЗ);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПунктыПВЗ.КодАдминки КАК pickupPointID_Ч,
			|	ПунктыПВЗ.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПунктыПВЗ КАК ПунктыПВЗ
			|ГДЕ
			|	ПунктыПВЗ.КодАдминки В(&МассивПВЗ)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокПВЗ.Вставить(Выборка.pickupPointID_Ч, Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
		//Асеев 29.09.2021 (Задача № 4667)<<<
		
		
		ЗапросПоКонтрагентам = Новый Запрос;
		ЗапросПоКонтрагентам.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросПоКонтрагентам.УстановитьПараметр("КодыКонтрагентов", ТЗ1);
		ЗапросПоКонтрагентам.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТабКодов.КодКонтрагента КАК СТРОКА(9)) КАК КодКонтрагента,
		|	ВЫРАЗИТЬ(ТабКодов.КодВладельца КАК СТРОКА(9)) КАК КодВладельца
		|ПОМЕСТИТЬ ВремТаб
		|ИЗ
		|	&КодыКонтрагентов КАК ТабКодов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодКонтрагента,
		|	КодВладельца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремТаб.КодКонтрагента КАК КодКонтрагента,
		|	ВремТаб.КодВладельца КАК КодВладельца,
		|	ЕСТЬNULL(Контрагенты.Ссылка, 0) КАК КонтрагентСсылка,
		|	ЕСТЬNULL(Магазины.Ссылка, 0) КАК ВладелецСсылка
		|ПОМЕСТИТЬ ТабНайденныхК
		|ИЗ
		|	ВремТаб КАК ВремТаб
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВремТаб.КодКонтрагента = Контрагенты.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Магазины
		|		ПО ВремТаб.КодВладельца = Магазины.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабНайденныхК.КодКонтрагента КАК КодКонтрагента,
		|	ТабНайденныхК.КодВладельца КАК КодВладельца,
		|	ТабНайденныхК.КонтрагентСсылка КАК КонтрСсылка,
		|	ТабНайденныхК.ВладелецСсылка КАК МагазинСсылка,
		|	ВЫБОР
		|		КОГДА ТабНайденныхК.КонтрагентСсылка = 0
		|				И ТабНайденныхК.ВладелецСсылка = 0
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТабНайденныхК.КонтрагентСсылка = 0
		|					ТОГДА 1
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТабНайденныхК.ВладелецСсылка = 0
		|							ТОГДА 2
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ПризнакКонтрВладелец
		|ИЗ
		|	ТабНайденныхК КАК ТабНайденныхК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Код КАК Код,
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.ОсновнойДоговорКонтрагента КАК ОсновнойДоговорКонтрагента,
		|	Контрагенты.ОсновнойДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорСПокупателем
		|ИЗ
		|	ВремТаб КАК ВремТаб
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|			ПО Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
		|				И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем))
		|		ПО ВремТаб.КодКонтрагента = Контрагенты.Код";		
		
		//НомераЗаказовБезКонтрагентов = ЗапросПоКонтрагентам.Выполнить().Выгрузить();
		Результат = ЗапросПоКонтрагентам.ВыполнитьПакет();
		НомераЗаказовБезКонтрагентов = Результат[2].Выгрузить();
		
		Выборка = Результат[3].Выбрать();
					
		Пока Выборка.Следующий() Цикл 
						
			СписокСсылокНаКонтрагента.Вставить(Выборка.Код, Новый Структура("Ссылка, ОсновнойДоговорКонтрагента, ВидДоговора, ДоговорСПокупателем",Выборка.Ссылка, Выборка.ОсновнойДоговорКонтрагента, Выборка.ВидДоговора, Выборка.ДоговорСПокупателем));
						
		КонецЦикла;	
		
		//--- БАО 31.05.2017 №926
		
		//+++ БАО 07.07.2017 №1250
		ЗапросПоКонтрагентам = Неопределено;
		//--- БАО 07.07.2017 №1250 
		
		///////         1) записать справочник Контрагенты
		/////// 			2) обработать документ
		Если НомераЗаказовБезКонтрагентов.Количество() > 0 Тогда
			НовыеМагазины = "";
			НовыеКонтрагенты = "";
			Для Каждого Стр Из НомераЗаказовБезКонтрагентов Цикл
				Если Стр.ПризнакКонтрВладелец = 3 Тогда // контр и владелец не найден в 1С
					НовыеМагазины    = НовыеМагазины    + "," + СокрЛП(Сред(Стр.КодВладельца,6));
					НовыеКонтрагенты = НовыеКонтрагенты + "," + СокрЛП(Сред(Стр.КодКонтрагента,2));
				ИначеЕсли Стр.ПризнакКонтрВладелец = 2 Тогда // нет владельца-магазин
					НовыеМагазины = НовыеМагазины + "," + СокрЛП(Сред(Стр.КодВладельца,6));
				ИначеЕсли Стр.ПризнакКонтрВладелец = 1 Тогда // нет контрагента
					НовыеКонтрагенты = НовыеКонтрагенты + "," + СокрЛП(Сред(Стр.КодКонтрагента,2));
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;			
			// ***********************************************************************	
			// 1) Запрос к sql-базе для заполнения инфоДанных по контрагентам
			СписокКолонокДанныхКОнтрагентов = "userId, ИНН, КПП, Name, userComment, jurPerson, Email, ОКПО";		
			Если ЗначениеЗаполнено(НовыеКонтрагенты) Тогда
				RS = Евген.ЗапросКИнтернетМагазину("
				|SELECT
				|	C.userId,
				|	C.INN AS ИНН,
				|	C.KPP AS КПП,
				|	ISNULL(C.firstName, '') + ISNULL(' ' + C.middleName, '') + ISNULL(' ' + C.lastName, '') AS Name,
				|	C.comment   AS userComment,
				|	C.JurPerson   AS jurPerson,
				|	C.Email     AS Email,
				|	C.OKPO AS ОКПО,
				|	C.jurAddress AS ЮридическийАдрес,
				|	C.BIK AS БИК,
				|	C.RS AS НомерРасчетногоСчета		
				|FROM
				| 	_user C (NOLOCK)
				//|	_user C (NOLOCK)
				|WHERE
				|	C.userId IN "+"("+Сред(НовыеКонтрагенты,2)+")"+"
				//|GROUP BY
				//|	C.userId
				//|	C.INN
				|",Подключение);
				ДанныеНовыхКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
				RS=0;
				
				// 2) Создание, перезапись контрг.
				Если ДанныеНовыхКонтрагентов.Количество() > 0 Тогда
					
					РодительКонтрагентов = РодКонтр;
					
					
					Для Каждого Контр Из ДанныеНовыхКонтрагентов Цикл 
						
						КодКонтрагента = ПрефиксКодовКонтрагентов + ЧислоКСтрокеБезПробелов(Число(Контр.userId));
						//+++ БАО 30.05.2017 №926
						
						//НовыйКА = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
						
						НайденнаяСтрокаСписокСсылокНаКонтрагента = СписокСсылокНаКонтрагента.Получить(КодКонтрагента);
						
						Если   НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда
							НовыйКА = Справочники.Контрагенты.ПустаяСсылка();
						Иначе 
							НовыйКА = НайденнаяСтрокаСписокСсылокНаКонтрагента.Ссылка;
						КонецЕсли;	
							
						//--- БАО 30.05.2017 №926
						
						//флНовыйКонтрагент = НовыйКА = Неопределено;
						Если ЗначениеЗаполнено(НовыйКа) Тогда
							//Если флНовыйКонтрагент Тогда
							НовыйКА = НовыйКА.ПолучитьОбъект();
							флНовыйКонтрагент = Ложь;
						Иначе
							НовыйКА = Справочники.Контрагенты.СоздатьЭлемент();
							флНовыйКонтрагент = Истина;
						КонецЕсли;
						
						//Адрес = СокрЛП(УбратьНепечатныеСимволы(Контр.ЮридическийАдрес));
						ИНН = ОставитьТолькоЦифры(Контр.ИНН);
						Если СтрДлина(ИНН) > 7 Тогда
							НовыйКА.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ЮрЛицо;
							НовыйКА.ИНН = Лев(Контр.ИНН, 12);
							НовыйКА.КПП = Контр.КПП;
						Иначе
							НовыйКА.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ФизЛицо;
						КонецЕсли;
						НовыйКА.Наименование           = Контр.Name;
						НовыйКА.Код                    = КодКонтрагента;
						//НовыйКА.НаименованиеПолное     = Контр.Наименование;
						//НовыйКА.КодПоОКПО              = Контр.ОКПО;
						НовыйКА.Родитель               = РодительКонтрагентов;
						//НовыйКА.ДополнительноеОписание = Адрес;
						
						НовыйКА.jurPerson = Контр.jurPerson;
						НовыйКА.Покупатель             = Истина;
						
						Попытка
							НовыйКА.Записать();
							//ЗаписатьЛогОшибки(3, ?(флНовыйКонтрагент, "+++ Записан новый", "*** Перезаписан")+" контрагент "+НовыйКА+", ИНН: "+Контр.ИНН); 
							Лог(?(флНовыйКонтрагент, "+++ Записан новый", "*** Перезаписан")+" контрагент "+НовыйКА+", ИНН: "+Контр.ИНН);
							
							//+++ БАО 31.05.2017 №926
							
							ОсновнойДоговорКонтрагента = ПодготовитьДоговор(НовыйКА.Ссылка);
							
							Если флНовыйКонтрагент Тогда
								//СписокСсылокНаКонтрагента.Вставить(Выборка.Код, Новый Структура("Ссылка, ОсновнойДоговорКонтрагента, ВидДоговора, ДоговорСПокупателем", НовыйКА.Ссылка, ОсновнойДоговорКонтрагента, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ,ОсновнойДоговорКонтрагента));									
								//CeHbKA #3587
								СтруктураКонтрагента = Новый Структура("Ссылка, ОсновнойДоговорКонтрагента, ВидДоговора, ДоговорСПокупателем", НовыйКА.Ссылка, ОсновнойДоговорКонтрагента, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ,ОсновнойДоговорКонтрагента);
								СписокСсылокНаКонтрагента.Вставить(КодКонтрагента, СтруктураКонтрагента);									
								//CeHbKA #3587
								
							КонецЕсли;	
							//--- БАО 31.05.2017 №926	
							
						Исключение
							НормальныйХодВыполнения = Ложь;
							//ЗаписатьЛогОшибки(3, "!!!Ошибка записи нового контрагента: "+Контр.Name+", ИНН: "+Контр.ИНН+Символы.ПС+ОписаниеОшибки());
							Лог("!!!Ошибка записи нового контрагента: "+Контр.Name+", ИНН: "+Контр.ИНН+Символы.ПС+ОписаниеОшибки());
							Продолжить;
						КонецПопытки;
						
						
						//+++ БАО 27.06.2017 №1192
						ДобавитьВХранилищеОбъектовСравнения(НовыйКА.Ссылка);
						//--- БАО 27.06.2017 №1192
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			//***********************************************************************			
			////// 1) Запрос к sql на получение данных для заполнения инфо по контрагентам-Магазинам-владельцам
			////// 2) Создание, перезапись магазинов.
			Если ЗначениеЗаполнено(НовыеМагазины) Тогда
				pkv.ЗагрузкаИОбновлениеМагазинов();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	////--- Костя ///////////////// Конец загрузки КОНТРАГЕНТОВ /////////////////////////////////
	#КонецОбласти
	
	//+++ БАО 01.06.2017 №926
	ЗапросПоКонтрагентам = Новый Запрос;
	ЗапросПоКонтрагентам.Текст = "ВЫБРАТЬ
	                             |	новаСоответствиеКонтрагентов.новаКонтрагент КАК ОбъектУТЛ_Контрагент,
	                             |	новаСоответствиеКонтрагентов.Контрагент КАК Контрагент
	                             |ИЗ
	                             |	РегистрСведений.новаСоответствиеКонтрагентов КАК новаСоответствиеКонтрагентов
	                             |ГДЕ
	                             |	новаСоответствиеКонтрагентов.Контрагент В(&МассивКонтрагентов)";
	
	МассивКонтрагентов = Новый Массив;
	СписокОбъектУТЛ_Контрагент = Новый Соответствие;
	
	Если СписокЗаказов.Количество() >  0 Тогда
		
		Для Каждого СтрокаКонтрагент Из СписокСсылокНаКонтрагента Цикл 
			
			МассивКонтрагентов.Добавить(СтрокаКонтрагент.Значение.Ссылка);
			
		КонецЦикла;	
		
		ЗапросПоКонтрагентам.УстановитьПараметр("МассивКонтрагентов",МассивКонтрагентов);
		
		ВыборкаКонтрагентов = ЗапросПоКонтрагентам.Выполнить().Выбрать();
		
		Пока ВыборкаКонтрагентов.Следующий() Цикл 
			
			СписокОбъектУТЛ_Контрагент.Вставить(ВыборкаКонтрагентов.Контрагент, ВыборкаКонтрагентов.ОбъектУТЛ_Контрагент);
			
		КонецЦикла;	
		
	КонецЕсли;
		
	//--- БАО 01.06.2017 №926
	
	//+++ Костя 140915  //Запрос на поиск документов по номеру заказа
	#Область ПоискДокументовПоНомеруЗаказа
	
	ЗапросПоПоискуДокументов = Новый Запрос;
	ЗапросПоПоискуДокументов.УстановитьПараметр("ТаблицаЗаказы", ТЗ1);
	ЗапросПоПоискуДокументов.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросПоПоискуДокументов.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаЗаказы.Номер КАК СТРОКА(11)) КАК НомерЗаказа
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&ТаблицаЗаказы КАК ТаблицаЗаказы
	//+++ БАО 30.05.2017 №926
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаказа;
	//--- БАО 30.05.2017 №926
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаб.НомерЗаказа КАК НомерЗаказа,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(11)) КАК Номер,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Поступление,
	|	ПеремещениеТоваров.Ссылка КАК Перемещение,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат
	|ИЗ
	|	ВремТаб КАК ВремТаб
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ВремТаб.НомерЗаказа = ПоступлениеТоваровУслуг.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ВремТаб.НомерЗаказа = ПеремещениеТоваров.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ВремТаб.НомерЗаказа = ВозвратТоваровОтПокупателя.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВремТаб.НомерЗаказа = РеализацияТоваровУслуг.Номер";
	ДокументыПоЗаказу = ЗапросПоПоискуДокументов.Выполнить().Выгрузить();
	
	//+++ БАО 01.06.2017 №926
	//Пробуем добавить индекс при большом количестве документов
	Если ДокументыПоЗаказу.Количество() > 100 Тогда
		ДокументыПоЗаказу.Индексы.Добавить("НомерЗаказа");
	КонецЕсли;	
	//--- БАО 01.06.2017 №926
	
	#Конецобласти
	//--- Костя 140915
	
	#Область ИнициализацияОбщихСтрукту
	
	ТоварRestore = Неопределено;//Бухаров
	
	МассивОбновленияОбъектовУТЛ = Новый Массив;
	//херим нова
	//УдалительИзРейсов = Обработки.новаИсточникМаршрутРейса.Создать();
	флСообщеноОбОтменеОбновленияДаты = Ложь;
	ДатаЗапрета = Дата(1, 1, 1);
	ГраницаЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	Если ГраницаЗапрета <> Неопределено Тогда
		ОбщаяДатаЗапрета = ГраницаЗапрета["ОбщаяДатаЗапретаРедактирования"];    
		Если ОбщаяДатаЗапрета <> Неопределено Тогда
			ДатаЗапрета = ОбщаяДатаЗапрета;			
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентДПД.Контрагент КАК КонтрагентДПД,
	               |	КонтрагентПитер.Контрагент КАК КонтрагентПитер,
	               |	ZStore.Ссылка КАК ZStore,
	               |	НашаОрганизация.Ссылка КАК НашаОрганизация,
	               |	СкладХраниения.Ссылка КАК СкладХраниения,
	               |	СкладРеализацииПоКомиссии.Ссылка КАК СкладРеализацииПоКомиссии,
	               |	СкладРеализацииПоДоставке.Ссылка КАК СкладРеализацииПоДоставке,
	               |	СкладРеализацииПоКомиссии.Ссылка КАК СкладРеализации,
	               |	СкладПитер.Ссылка КАК СкладПитер,
	               |	НашСчет.Ссылка КАК НашСчет,
	               |	РозничныйТипЦен.Ссылка КАК РозничныйТипЦен,
	               |	Рубли.Ссылка КАК Рубли,
	               |	ТочкаДПД.Ссылка КАК ТочкаДПД,
	               |	ТочкаПитер.Ссылка КАК ТочкаПитер,
	               |	ТочкаДПД.Адрес КАК ТочкаДПД_Адрес,
	               |	ТочкаПитер.Адрес КАК ТочкаПитер_Адрес
	               |ИЗ
	               |	РегистрСведений.новаСоответствиеКонтрагентов КАК КонтрагентДПД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаСоответствиеКонтрагентов КАК КонтрагентПитер
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТочкиДоставки КАК ТочкаПитер
	               |			ПО КонтрагентПитер.новаКонтрагент = ТочкаПитер.ВладелецТочки
	               |				И (ТочкаПитер.ПометкаУдаления = ЛОЖЬ)
	               |		ПО (КонтрагентПитер.Контрагент.Код = ""000000007"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ZStore
	               |		ПО (ZStore.Код = ""Shop_167"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК НашаОрганизация
	               |		ПО (НашаОрганизация.Код = ""000000001"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладХраниения
	               |		ПО (СкладХраниения.Код = ""000000001"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладРеализацииПоКомиссии
	               |		ПО (СкладРеализацииПоКомиссии.Код = ""000000003"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладРеализацииПоДоставке
	               |		ПО (СкладРеализацииПоДоставке.Код = ""000000004"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладПитер
	               |		ПО (СкладПитер.Код = ""000000006"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК НашСчет
	               |		ПО (НашСчет.Код = ""000000001"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК РозничныйТипЦен
	               |		ПО (РозничныйТипЦен.Код = ""000000001"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Рубли
	               |		ПО (Рубли.Код = ""643"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТочкиДоставки КАК ТочкаДПД
	               |		ПО (ТочкаДПД.ПометкаУдаления = ЛОЖЬ)
	               |			И КонтрагентДПД.новаКонтрагент = ТочкаДПД.ВладелецТочки
	               |ГДЕ
	               |	КонтрагентДПД.Контрагент.Код = ""000000006""";
	
	//+++ БАО 31.05.2017 №926
	
	//ZStore = Справочники.Контрагенты.НайтиПоКоду("Shop_167");//Бухаров
	//НашаОрганизация = Справочники.Организации.НайтиПоКоду("000000001"); //МС Логистик
	//СкладХраниения = Справочники.Склады.НайтиПоКоду("000000001");
	//СкладРеализацииПоКомиссии = Справочники.Склады.НайтиПоКоду("000000003");
	//СкладРеализацииПоДоставке = Справочники.Склады.НайтиПоКоду("000000004");
	//СкладРеализации = СкладРеализацииПоКомиссии; // Сейчас это не комиссия, а просто склад сборки
	//СкладПитер = Справочники.Склады.НайтиПоКоду("000000006");
	//НашСчет = Справочники.БанковскиеСчета.НайтиПоКоду("000000001");  //Альфа Банк
	//РозничныйТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"); //РознЦена
	//Рубли = Справочники.Валюты.НайтиПоКоду("643");
	//КонтрагентДПД = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Справочники.Контрагенты.НайтиПоКоду("000000006"));
	//ТочкаДПД = НайтиСпецТочку(КонтрагентДПД);
	//КонтрагентПитер = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Справочники.Контрагенты.НайтиПоКоду("000000007"));
	//ТочкаПитер = НайтиСпецТочку(КонтрагентПитер);
	
	ZStore                     = Неопределено;
	НашаОрганизация           = Неопределено;
	СкладХраниения            = Неопределено;
	СкладРеализацииПоКомиссии = Неопределено;
	СкладРеализацииПоДоставке = Неопределено;
	СкладРеализации           = Неопределено;
	СкладПитер                = Неопределено;
	НашСчет                   = Неопределено;
	РозничныйТипЦен           = Неопределено;
	Рубли                     = Неопределено;
	КонтрагентДПД             = Неопределено;
	ТочкаДПД                  = Неопределено;
	ТочкаДПД_Адрес            = Неопределено;				
	КонтрагентПитер           = Неопределено;
	ТочкаПитер                = Неопределено;
	ТочкаПитер_Адрес          = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ZStore                    = Выборка.ZStore ;
		НашаОрганизация           = Выборка.НашаОрганизация;
		СкладХраниения            = Выборка.СкладХраниения;
		СкладРеализацииПоКомиссии = Выборка.СкладРеализацииПоКомиссии;
		СкладРеализацииПоДоставке = Выборка.СкладРеализацииПоДоставке;
		СкладРеализации           = Выборка.СкладРеализации;
		СкладПитер                = Выборка.СкладПитер;
		НашСчет                   = Выборка.НашСчет;
		РозничныйТипЦен           = Выборка.РозничныйТипЦен;
		Рубли                     = Выборка.Рубли;
		КонтрагентДПД             = Выборка.КонтрагентДПД;
		ТочкаДПД                  = Выборка.ТочкаДПД;
		КонтрагентПитер           = Выборка.КонтрагентПитер;
		ТочкаПитер                = Выборка.ТочкаПитер;
		ТочкаДПД_Адрес            = Выборка.ТочкаДПД_Адрес;
		ТочкаПитер_Адрес          = Выборка.ТочкаПитер_Адрес;
	
	КонецЕсли;	

	
	//--- БАО 31.05.2017 №926
	
	Если Не ЗначениеЗаполнено(КонтрагентДПД) Или Не ЗначениеЗаполнено(ТочкаДПД) Тогда
		//Лог("!!! Ошибка. Не найден служебный контрагент DPD. Загрузка прервана.");
		//НормальныйХодВыполнения = Ложь;
		//флОбновлятьДатуПоследнейЗагрузки = Ложь;
		//Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(КонтрагентПитер) Или Не ЗначениеЗаполнено(ТочкаПитер) Тогда
		//Лог("!!! Ошибка. Не найден служебный контрагент для доставки в Питер. Загрузка прервана.");
		//НормальныйХодВыполнения = Ложь;
		//флОбновлятьДатуПоследнейЗагрузки = Ложь;
		//Возврат;
	КонецЕсли;
	
	КоличествоЗаказов = СписокЗаказов.Количество();
	Лог("К обработке " + СписокЗаказов.Количество() + " заказов");
	Если ЗначениеЗаполнено(ГраницаЗаказов) Тогда
		Лог("   Текущая граница заказов: " + ГраницаЗаказов);
	КонецЕсли;
	
	Счетчик = 0;
	ТекПроц = -1;
	сч = 0;
	флПропускатьЗагрузку = Ложь;
	
	//нахер нова
	//ФормаПоискаАдреса = Обработки.новаПоискАдреса.ПолучитьФорму();
	//нахер нова
	
	Попытка
		ОбъектПоискаАдреса = Обработки.новаПоискАдреса.Создать();
	исключение
		lem.ОтправитьНормальноеСообщениеАдминам("новаПоискАдреса", ОписаниеОшибки());	
	КонецПопытки;
	МассивЗагруженныхНомеровЗаказов = Новый Массив;

	
	//+++ БАО 31.05.2017 №926
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(4);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Число",     , , , );  
	ТЗ_КодыТарифов      = Новый ТаблицаЗначений;
	ТЗ_КодыТарифов.Колонки.Добавить("Код",                  ОписаниеТиповСтрока);
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(11);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки);  
	ТЗ_РасчетныйБрейк   = Новый ТаблицаЗначений;
	ТЗ_РасчетныйБрейк.Колонки.Добавить("КодРасчетныйБрейк", ОписаниеТиповСтрока); 

	МассивКодовТранспортныеКомпании = Новый Массив;
	
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(9);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки);  
	ТЗ_МагазиновИТарифныеСетки   = Новый ТаблицаЗначений;
	ТЗ_МагазиновИТарифныеСетки.Колонки.Добавить("КодМагазина", ОписаниеТиповСтрока); 
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(11);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки);  
	ТЗ_МагазиновИТарифныеСетки.Колонки.Добавить("КодТарифныеСетки", ОписаниеТиповСтрока); 
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки     = Новый КвалификаторыСтроки(150);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки);  
	ТЗ_МагазиновИТарифныеСетки.Колонки.Добавить("Адрес", ОписаниеТиповСтрока); 
	ТЗ_МагазиновИТарифныеСетки.Колонки.Добавить("АдресНеНайден", ОписаниеТиповСтрока); 
	
	МассивКодовОсновнойМагазин   = Новый Массив;
	МассивКодовТерминалПриемки   = Новый Массив;
	МассивКодовТерминалДоставки  = Новый Массив;
	МассивКодовЗаказов           = Новый Массив;
	МассивКодовКатегорияДоставки = Новый Массив;
	МассивСтатусЗаказа           = Новый Массив;
	МассивГосНомеров             = Новый Массив;
	МассивИнтернетМагазинЯндекса = Новый Массив;
	МассивНоменклатура           = Новый Массив;
	МассивСкладМагазина          = Новый Массив;
	МассивСтавкаНДС              = Новый Массив;
	//+Степанов Задача № 4007
	МассивПоставщики             = Новый Массив;
	//-Степанов Задача № 4007
	
	
	//+++ БАО 04.10.2017 №1900
	ТЗ_КодыНоменклатурыШтрихКоды = Новый ТаблицаЗначений;
	ПараметрыСтроки11     = Новый КвалификаторыСтроки(11);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки11);  
	ТЗ_КодыНоменклатурыШтрихКоды.Колонки.Добавить("КодНоменклатуры", ОписаниеТиповСтрока); 
	ПараметрыСтроки50     = Новый КвалификаторыСтроки(50);
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка",     , , , ПараметрыСтроки50); 
	ТЗ_КодыНоменклатурыШтрихКоды.Колонки.Добавить("КодШтрихкодыТоваров", ОписаниеТиповСтрока50); 
	
	//--- БАО 04.10.2017 №1900
	
	
	
	//+++ БАО 26.07.2017 №1488
	МассивТарифнаяСеткаПодъемаЗаказов = Новый Массив;
	
	//--- БАО 26.07.2017 №1488
	
	Сч = 0;
	
	Для Каждого Заказ Из СписокЗаказов Цикл
		
		//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
		ЗаписьДополнительныеПараметрыЗаказа = Новый Структура;

		//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
		
		НоваяСтрока                   = ТЗ_КодыТарифов.Добавить();
		НоваяСтрока.Код               = Заказ.tariffType_Ч;      
		
		
		
		НоваяСтрока                   = ТЗ_РасчетныйБрейк.Добавить();
		НоваяСтрока.КодРасчетныйБрейк = Заказ.tariffCategoryId_Ч;
		
		МассивКодовТранспортныеКомпании.Добавить(Заказ.servicedelivery_Ч);
		
		Адрес = Заказ.Addr;
		Если Лев(Адрес, 11) = "Москва и МО" Тогда
			Адрес = СокрЛ(Сред(Адрес, 12));
		КонецЕсли;
		
		Если Лев(Адрес, 10) = "Москва г. " Тогда
			Адрес = "Москва, " + Сред(Адрес, 11);
		КонецЕсли;
		ЧВ = СтрЧислоВхождений(Адрес, "Москва");
		
		Если ЧВ >= 2 Тогда //   Или ЧВ = 0
			Адрес = СтрЗаменить(Адрес, "Москва", "");
			Адрес = "Москва, " + Адрес;
		КонецеСли;	
		
		Адрес = СокрП(Лев(Адрес, 150));
		АдресНеНайден = "<не найден> " + Адрес;
		
		НоваяСтрока                  = ТЗ_МагазиновИТарифныеСетки.Добавить();
		НоваяСтрока.КодМагазина      = ПреобразоватьКодМагазина(Заказ.shop_Ч);
		НоваяСтрока.КодТарифныеСетки = Формат(Заказ.tariffID_Ч, "ЧГ=");
		НоваяСтрока.Адрес            = Адрес;
		НоваяСтрока.АдресНеНайден    = АдресНеНайден;
		
   		МассивКодовОсновнойМагазин.Добавить(ПреобразоватьКодМагазина(Заказ.ParentID_Ч));
		
		МассивКодовТерминалПриемки.Добавить(Заказ.sourcePlaceId_Ч);
		МассивКодовТерминалДоставки.Добавить(Заказ.deliveryPlaceId_Ч);
		МассивКодовЗаказов.Добавить(ЧислоКСтрокеБезПробелов(Заказ.orderId_Ч));
		
		МассивКодовКатегорияДоставки.Добавить(Формат(Заказ.typeDelivery_Ч, "ЧГ="));
		МассивСтатусЗаказа.Добавить(Формат(Заказ.status_Ч, "ЧГ="));
		МассивГосНомеров.Добавить(СокрЛП(Заказ.carNumber));
		
		МассивИнтернетМагазинЯндекса.Добавить("248_"+?(Заказ.senderId=NULL,0,Заказ.senderId)); 
		
		//+++ БАО 26.07.2017 №1488
		МассивТарифнаяСеткаПодъемаЗаказов.Добавить(Число(Заказ.tariff_Rise));
		//--- БАО 26.07.2017 №1488
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнаяЧастьЗаказов из ТабличнаяЧастьЗаказов Цикл 
	
		МассивНоменклатура.Добавить(ЧислоКСтрокеБезПробелов(СтрокаТабличнаяЧастьЗаказов.skuId_Ч));
		МассивСкладМагазина.Добавить(СтрокаТабличнаяЧастьЗаказов.stockId_Ч);    
		МассивСтавкаНДС.Добавить(СтрокаТабличнаяЧастьЗаказов.NDS_Ч);
		//+Степанов
		МассивПоставщики.Добавить(Число(СтрокаТабличнаяЧастьЗаказов.goodsSellerId));
		//-Степанов
				
		//+++ БАО 04.10.2017 №1900
		СтрокаТЗ_КодыНоменклатурыШтрихКоды = ТЗ_КодыНоменклатурыШтрихКоды.Добавить();
		СтрокаТЗ_КодыНоменклатурыШтрихКоды.КодНоменклатуры = ЧислоКСтрокеБезПробелов(СтрокаТабличнаяЧастьЗаказов.skuId_Ч);
		СтрокаТЗ_КодыНоменклатурыШтрихКоды.КодШтрихкодыТоваров = СтрокаТабличнаяЧастьЗаказов.Barcode;
		//--- БАО 04.10.2017 №1900

		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	//+Степанов Задача № 3911 Добавлено чтение НазначениеКодаИдентификацииКлиентаИССтрижа И КодИдентификацииКлиента из ПараметрыКонтрагентов 
	//+Степанов Задача № 4007 В пакет добавлен запрос поставщиков товаров.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ_КодыТарифов.Код КАК КодТарифа
	|ПОМЕСТИТЬ ВТ_КодыТарифов
	|ИЗ
	|	&ТЗ_КодыТарифов КАК ТЗ_КодыТарифов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_РасчетныйБрейк.КодРасчетныйБрейк КАК КодРасчетногоБрейка
	|ПОМЕСТИТЬ ВТ_КодыРасчетныйБрейк
	|ИЗ
	|	&ТЗ_РасчетныйБрейк КАК ТЗ_РасчетныйБрейк
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодРасчетногоБрейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_МагазиновИТарифныеСетки.КодМагазина КАК КодМагазина,
	|	ТЗ_МагазиновИТарифныеСетки.КодТарифныеСетки КАК КодТарифныеСетки,
	|	ТЗ_МагазиновИТарифныеСетки.АдресНеНайден КАК АдресНеНайден,
	|	ТЗ_МагазиновИТарифныеСетки.Адрес КАК Адрес
	|ПОМЕСТИТЬ ВТ_МагазиныИТарифныеСетки
	|ИЗ
	|	&ТЗ_МагазиновИТарифныеСетки КАК ТЗ_МагазиновИТарифныеСетки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Адрес,
	|	АдресНеНайден,
	|	КодТарифныеСетки,
	|	КодМагазина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТипыТарифов.Ссылка, ЗНАЧЕНИЕ(Справочник.ТипыТарифов.ОсновнаяТарифнаяСетка)) КАК ТипТарифа,
	|	ВТ_КодыТарифов.КодТарифа КАК КодТарифа,
	|	ЕСТЬNULL(РасчетныеБрейки.Ссылка, ЗНАЧЕНИЕ(Справочник.РасчетныеБрейки.ПустаяСсылка)) КАК РасчетныйБрейк,
	|	ВТ_КодыРасчетныйБрейк.КодРасчетногоБрейка КАК КодРасчетногоБрейка
	|ИЗ
	|	ВТ_КодыТарифов КАК ВТ_КодыТарифов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыТарифов КАК ТипыТарифов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РасчетныеБрейки КАК РасчетныеБрейки
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КодыРасчетныйБрейк КАК ВТ_КодыРасчетныйБрейк
	|				ПО РасчетныеБрейки.Код = ВТ_КодыРасчетныйБрейк.КодРасчетногоБрейка
	|			ПО ТипыТарифов.Ссылка = РасчетныеБрейки.Владелец
	|		ПО ВТ_КодыТарифов.КодТарифа = ТипыТарифов.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортныеКомпании.Ссылка КАК ТранспортныеКомпании,
	|	ТранспортныеКомпании.Код КАК КодТранспортныеКомпании
	|ИЗ
	|	Справочник.ТранспортныеКомпании КАК ТранспортныеКомпании
	|ГДЕ
	|	ТранспортныеКомпании.Код В(&МассивКодовТранспортныеКомпании)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МагазинСпр.Ссылка КАК Магазин,
	|	ВТ_МагазиныИТарифныеСетки.КодМагазина КАК КодМагазина,
	|	МагазинСпр.Автопоступление КАК Автопоступление,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКомитента,
	|	ТарифныеСетки.Ссылка КАК ТарифнаяСетка,
	|	новаТочкиДоставки.Ссылка КАК ТочкиДоставки,
	|	новаАдреса.Ссылка КАК ссылкаАдрес,
	|	МагазинСпр.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчет,
	|	СкладыМагазиновПоУмолчанию.СкладМагазина.Код КАК КодСкладМагазинаПоУмолчанию,
	|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
	|	СкладыМагазиновПоУмолчанию.СкладМагазина КАК СкладМагазинаПоУмолчанию,
	|	ВТ_МагазиныИТарифныеСетки.Адрес КАК Адрес,
	|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	|	ВЫБОР
	|		КОГДА ПараметрыКонтрагентовСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПараметрыКонтрагента,
	|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов1,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ) КАК ИспользоватьКодИдентификацииКлиента,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.НазначениеКодаИдентификацииКлиентаИССтрижа, ЛОЖЬ) КАК НазначениеКодаИдентификацииКлиентаИССтрижа
	|ИЗ
	|	ВТ_МагазиныИТарифныеСетки КАК ВТ_МагазиныИТарифныеСетки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК МагазинСпр
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО МагазинСпр.Ссылка = ДоговорыКонтрагентов.Владелец
	|				И (ДоговорыКонтрагентов.Наименование = ""Комиссионная торговля"")
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкладыМагазиновПоУмолчанию КАК СкладыМагазиновПоУмолчанию
	|			ПО МагазинСпр.Ссылка = СкладыМагазиновПоУмолчанию.Магазин
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
	|					,
	|					Контрагент.Код В
	|						(ВЫБРАТЬ
	|							ВТ_МагазиныИТарифныеСетки.КодМагазина КАК КодМагазина
	|						ИЗ
	|							ВТ_МагазиныИТарифныеСетки КАК ВТ_МагазиныИТарифныеСетки)) КАК ПараметрыКонтрагентовСрезПоследних
	|			ПО МагазинСпр.Ссылка = ПараметрыКонтрагентовСрезПоследних.Контрагент
	|		ПО ВТ_МагазиныИТарифныеСетки.КодМагазина = МагазинСпр.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифныеСетки КАК ТарифныеСетки
	|		ПО ВТ_МагазиныИТарифныеСетки.КодМагазина = ТарифныеСетки.Владелец.Код
	|			И ВТ_МагазиныИТарифныеСетки.КодТарифныеСетки = ТарифныеСетки.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТочкиДоставки КАК новаТочкиДоставки
	|		ПО (ВТ_МагазиныИТарифныеСетки.Адрес = ПОДСТРОКА(новаТочкиДоставки.Наименование, 1, 150)
	|				ИЛИ ВТ_МагазиныИТарифныеСетки.АдресНеНайден = ПОДСТРОКА(новаТочкиДоставки.Наименование, 1, 150))
	|			И ВТ_МагазиныИТарифныеСетки.КодМагазина = новаТочкиДоставки.ВладелецТочки.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаАдреса КАК новаАдреса
	|		ПО ВТ_МагазиныИТарифныеСетки.Адрес = новаАдреса.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин,
	|	ТочкиДоставки,
	|	ссылкаАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_ОсновнойМагазин.Ссылка КАК ОсновнойМагазин,
	|	Т_ОсновнойМагазин.Код КАК КодОсновнойМагазин,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
	|	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
	|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
	|	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
	|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
	|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
	|	ВЫБОР
	|		КОГДА ПараметрыКонтрагентовСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПараметрыОсновногоМагазина
	|ИЗ
	|	Справочник.Контрагенты КАК Т_ОсновнойМагазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО Т_ОсновнойМагазин.ОсновнойМагазин = ПараметрыКонтрагентовСрезПоследних.Контрагент
	|ГДЕ
	|	Т_ОсновнойМагазин.ОсновнойМагазин.Код В(&МассивКодовОсновнойМагазин)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т_ОсновнойМагазин.Ссылка,
	|	Т_ОсновнойМагазин.Код,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты,
	|	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара,
	|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента,
	|	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
	|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка,
	|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов,
	|	ВЫБОР
	|		КОГДА ПараметрыКонтрагентовСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	Справочник.Контрагенты КАК Т_ОсновнойМагазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО Т_ОсновнойМагазин.ОсновнойМагазин = ПараметрыКонтрагентовСрезПоследних.Контрагент
	|ГДЕ
	|	Т_ОсновнойМагазин.ОсновнойМагазин = &ИМ_TopDelivery
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТерминалПриемки.Ссылка КАК ТерминалПриемки,
	|	ТерминалПриемки.Код КАК КодТерминалПриемки,
	|	ТерминалПриемки.Склад КАК СкладТерминалПриемки
	|ИЗ
	|	Справочник.РегиональныеТерминалы КАК ТерминалПриемки
	|ГДЕ
	|	ТерминалПриемки.Код В(&МассивКодовТерминалПриемки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТерминалДоставки.Ссылка КАК ТерминалДоставки,
	|	ТерминалДоставки.Код КАК КодТерминалДоставки,
	|	ТерминалДоставки.Склад КАК СкладТерминалДоставки
	|ИЗ
	|	Справочник.РегиональныеТерминалы КАК ТерминалДоставки
	|ГДЕ
	|	ТерминалДоставки.Код В(&МассивКодовТерминалДоставки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаМестнаяДоставка.Ссылка КАК обМестнаяДоставка,
	|	новаМестнаяДоставка.Груз КАК Груз,
	|	новаМестнаяДоставка.Номер КАК Код,
	|	новаМестнаяДоставка.Грузоотправитель.ТочкаДоставки КАК ТочкаОтправления,
	|	новаМестнаяДоставка.ТочкаОтправления.ВремяПребывания КАК ВремяПребывания
	|ИЗ
	|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|ГДЕ
	|	новаМестнаяДоставка.Номер В(&МассивКодовЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаборТовара.Ссылка КАК ЗаборТовара,
	|	ЗаборТовара.Номер КАК Код
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Номер В(&МассивКодовЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КатегорииДоставки2014.Ссылка КАК КатегорииДоставки,
	|	КатегорииДоставки2014.Код КАК Код
	|ИЗ
	|	Справочник.КатегорииДоставки2014 КАК КатегорииДоставки2014
	|ГДЕ
	|	КатегорииДоставки2014.Категория В(&МассивКодовКатегорияДоставки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусЗаказаИнтернетМагазина.Ссылка КАК СтатусЗаказаИнтернетМагазина,
	|	СтатусЗаказаИнтернетМагазина.Код КАК Код
	|ИЗ
	|	Справочник.СтатусЗаказаИнтернетМагазина КАК СтатусЗаказаИнтернетМагазина
	|ГДЕ
	|	СтатусЗаказаИнтернетМагазина.Код В(&МассивСтатусЗаказа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Транспорт,
	|	новаТранспорт.НомерГосударственнойРегистрации КАК Код
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|ГДЕ
	|	новаТранспорт.НомерГосударственнойРегистрации В(&МассивГосНомеров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фрахт.Ссылка КАК Фрахт,
	|	Фрахт.Номер КАК Код
	|ИЗ
	|	Документ.Фрахт КАК Фрахт
	|ГДЕ
	|	Фрахт.Номер В(&МассивКодовЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаГруз.Ссылка КАК Груз,
	|	новаГруз.Номер КАК Код
	|ИЗ
	|	Документ.новаГруз КАК новаГруз
	|ГДЕ
	|	новаГруз.Номер В(&МассивКодовЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК ИнтернетМагазинЯндекса,
	|	Контрагенты.Код КАК Код
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Код В(&МассивИнтернетМагазинЯндекса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	Номенклатура.СтавкаНДС КАК НДСТовара
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код В(&МассивНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыМагазинов.Ссылка КАК СкладМагазина,
	|	СкладыМагазинов.Код КАК Код
	|ИЗ
	|	Справочник.СкладыМагазинов КАК СкладыМагазинов
	|ГДЕ
	|	СкладыМагазинов.Код В(&МассивСкладМагазина)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиНДСФЗ54.Ссылка КАК СтавкаНДС,
	|	СтавкиНДСФЗ54.КодВАдминке КАК Код
	|ИЗ
	|	Справочник.СтавкиНДСФЗ54 КАК СтавкиНДСФЗ54
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТарифыПодъемаЗаказовНаЭтаж.Ссылка КАК Ссылка,
	|	ТарифыПодъемаЗаказовНаЭтаж.КодТарифа КАК КодТарифа
	|ИЗ
	|	Справочник.ТарифыПодъемаЗаказовНаЭтаж КАК ТарифыПодъемаЗаказовНаЭтаж
	|ГДЕ
	|	ТарифыПодъемаЗаказовНаЭтаж.КодТарифа В(&МассивТарифнаяСеткаПодъемаЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_КодыНоменклатурыШтрихКоды.КодНоменклатуры КАК КодНоменклатуры,
	|	ТЗ_КодыНоменклатурыШтрихКоды.КодШтрихкодыТоваров КАК КодШтрихкодыТоваров
	|ПОМЕСТИТЬ ВТ_КодШтрихкодыТоваров
	|ИЗ
	|	&ТЗ_КодыНоменклатурыШтрихКоды КАК ТЗ_КодыНоменклатурыШтрихКоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КодШтрихкодыТоваров.КодНоменклатуры КАК КодНоменклатуры,
	|	ВТ_КодШтрихкодыТоваров.КодШтрихкодыТоваров КАК КодШтрихкодыТоваров,
	|	ЕСТЬNULL(ШтрихкодыТоваров.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыТоваров.ПустаяСсылка)) КАК ШтрихкодыТоваров,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	ВТ_КодШтрихкодыТоваров КАК ВТ_КодШтрихкодыТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыТоваров КАК ШтрихкодыТоваров
	|		ПО ВТ_КодШтрихкодыТоваров.КодНоменклатуры = ШтрихкодыТоваров.Владелец.Код
	|			И ВТ_КодШтрихкодыТоваров.КодШтрихкодыТоваров = ШтрихкодыТоваров.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_КодШтрихкодыТоваров.КодНоменклатуры = Номенклатура.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоставщикиТоваров.ИдентификаторВАдминке КАК ИдентификаторВАдминке,
	|	ПоставщикиТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПоставщикиТоваров КАК ПоставщикиТоваров
	|ГДЕ
	|	ПоставщикиТоваров.ИдентификаторВАдминке В(&ИдентификаторыПоставщиков)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыПозицийЗаказа.Ссылка КАК Ссылка,
	|	ТипыПозицийЗаказа.КодАдминки КАК КодАдминки
	|ИЗ
	|	Справочник.ТипыПозицийЗаказа КАК ТипыПозицийЗаказа
	|ГДЕ
	|	ТипыПозицийЗаказа.КодАдминки > 0";
	
	Запрос.УстановитьПараметр("ТЗ_КодыТарифов",                  ТЗ_КодыТарифов);
	Запрос.УстановитьПараметр("МассивКодовТранспортныеКомпании", МассивКодовТранспортныеКомпании);
	Запрос.УстановитьПараметр("ТЗ_МагазиновИТарифныеСетки",      ТЗ_МагазиновИТарифныеСетки);
	Запрос.УстановитьПараметр("МассивКодовОсновнойМагазин",      МассивКодовОсновнойМагазин);
	Запрос.УстановитьПараметр("МассивКодовТерминалПриемки",      МассивКодовТерминалПриемки);
	Запрос.УстановитьПараметр("МассивКодовТерминалДоставки",     МассивКодовТерминалДоставки);
	Запрос.УстановитьПараметр("МассивКодовЗаказов",              МассивКодовЗаказов);
	Запрос.УстановитьПараметр("МассивКодовКатегорияДоставки",    МассивКодовКатегорияДоставки);
	Запрос.УстановитьПараметр("МассивГосНомеров",                МассивГосНомеров);
	Запрос.УстановитьПараметр("МассивИнтернетМагазинЯндекса",    МассивИнтернетМагазинЯндекса);
	Запрос.УстановитьПараметр("МассивНоменклатура",              МассивНоменклатура);
	Запрос.УстановитьПараметр("МассивСкладМагазина",             МассивСкладМагазина);
	Запрос.УстановитьПараметр("МассивСтавкаНДС",                 МассивСтавкаНДС);
	Запрос.УстановитьПараметр("ТЗ_РасчетныйБрейк",               ТЗ_РасчетныйБрейк);
	Запрос.УстановитьПараметр("ИМ_TopDelivery",                  ИМ_TopDelivery);
	Запрос.УстановитьПараметр("МассивСтатусЗаказа",              МассивСтатусЗаказа);
	
	//+++ БАО 26.07.2017 №1488
	Запрос.УстановитьПараметр("МассивТарифнаяСеткаПодъемаЗаказов",              МассивТарифнаяСеткаПодъемаЗаказов);
	//--- БАО 26.07.2017 №1488

	//+++ БАО 04.10.2017 №1900
	Запрос.УстановитьПараметр("ТЗ_КодыНоменклатурыШтрихКоды",              ТЗ_КодыНоменклатурыШтрихКоды);
	//--- БАО 04.10.2017 №1900

	//+Степанов Задача № 4007 В пакет добавлен запрос поставщиков товаров.
	Запрос.УстановитьПараметр("ИдентификаторыПоставщиков", МассивПоставщики); 
	//-Степанов Задача № 4007 В пакет добавлен запрос поставщиков товаров.


	РезультатПакета = Запрос.ВыполнитьПакет();   
	
	//Список тарифов  
	СписокТипТарифа = Новый Соответствие;

	Выборка = РезультатПакета[3].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТипТарифа.Вставить((Выборка.КодТарифа), Новый Структура("ТипТарифа, РасчетныйБрейк", Выборка.ТипТарифа, Выборка.РасчетныйБрейк));
		
	КонецЦикла;
	
	//Транспортная компания
	СписокТранспортныеКомпании = Новый Соответствие;
	Выборка = РезультатПакета[4].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТранспортныеКомпании.Вставить(СокрП(Выборка.КодТранспортныеКомпании), Выборка.ТранспортныеКомпании);
		
	КонецЦикла;
	
	//СписокМагазинов
	
	//СписокМагазинов = Новый Соответствие;
	//Выборка = РезультатПакета[5].Выбрать();     
	//
	//Пока Выборка.Следующий() Цикл 
	//	
	//	СписокМагазинов.Вставить(СокрП(Выборка.КодМагазина), Новый Структура("Магазин, Автопоступление, ДоговорКомитента, ТарифнаяСетка, ТочкиДоставки, ссылкаАдрес, ОсновнойБанковскийСчет, КодСкладМагазинаПоУмолчанию, ПредварительноеЗакрытиеЗаказов, СкладМагазинаПоУмолчанию", 
	//		Выборка.Магазин, Выборка.Автопоступление, Выборка.ДоговорКомитента, Выборка.ТарифнаяСетка, Выборка.ТочкиДоставки, Выборка.ссылкаАдрес, Выборка.ОсновнойБанковскийСчет, СокрП(Выборка.КодСкладМагазинаПоУмолчанию), Выборка.ПредварительноеЗакрытиеЗаказов, Выборка.СкладМагазинаПоУмолчанию));
	//	
	//КонецЦикла;
	
	СписокМагазинов = РезультатПакета[5].Выгрузить();           
	Для Каждого СтрокаСписокМагазинов Из СписокМагазинов Цикл
		СтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию = СокрП(СтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию)
	КонецЦикла;	
	
	//СписокОсновнойМагазин
	СписокОсновнойМагазин = Новый Соответствие;
	Выборка = РезультатПакета[6].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокОсновнойМагазин.Вставить(СокрП(Выборка.КодОсновнойМагазин), Новый Структура("ОсновнойМагазин, ЗапретЧастичногоВыкупа, ЗапретСменыОплаты, ВремяОжиданияПриЗабореТовара,
		|ВычисляемыйЗапретЧастичногоВыкупа, ПриёмИтогоСКлиента, МетодОплатыПодъёма, ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной, ОперативнаяПриемка, ПредварительноеЗакрытиеЗаказов, ЕстьПараметрыОсновногоМагазина", 
		Выборка.ОсновнойМагазин,  Выборка.ЗапретЧастичногоВыкупа,  Выборка.ЗапретСменыОплаты,  Выборка.ВремяОжиданияПриЗабореТовара,  Выборка.ВычисляемыйЗапретЧастичногоВыкупа,  
		Выборка.ПриёмИтогоСКлиента,  Выборка.МетодОплатыПодъёма, Выборка.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной, Выборка.ОперативнаяПриемка, Выборка.ПредварительноеЗакрытиеЗаказов, Выборка.ЕстьПараметрыОсновногоМагазина));
		
	КонецЦикла;
	
	
	//ТерминалПриемки
	СписокТерминалПриемки = Новый Соответствие;
	Выборка = РезультатПакета[7].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТерминалПриемки.Вставить((Выборка.КодТерминалПриемки), Выборка.ТерминалПриемки);
		
	КонецЦикла;
	
	//ТерминалДоставки
	СписокТерминалДоставки = Новый Соответствие;
	Выборка = РезультатПакета[8].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТерминалДоставки.Вставить((Выборка.КодТерминалДоставки), Новый Структура("ТерминалДоставки, СкладТерминалДоставки", Выборка.ТерминалДоставки, Выборка.СкладТерминалДоставки));
		
	КонецЦикла;
	
	СписокБПноваМестнаяДоставка = Новый Соответствие;
	Выборка = РезультатПакета[9].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокБПноваМестнаяДоставка.Вставить(СокрП(Выборка.Код), Новый Структура("обМестнаяДоставка, Груз, ТочкаОтправления, ВремяПребывания", Выборка.обМестнаяДоставка, Выборка.Груз, Выборка.ТочкаОтправления, Выборка.ВремяПребывания));
		
	КонецЦикла;
	
	//ЗаборТовара
	СписокЗаборТовара = Новый Соответствие;
	Выборка = РезультатПакета[10].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокЗаборТовара.Вставить(СокрП(Выборка.Код), Выборка.ЗаборТовара);
		
	КонецЦикла;
	
	//КатегорияДоставки	
	СписокКатегорияДоставки = Новый Соответствие;
	Выборка = РезультатПакета[11].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокКатегорияДоставки.Вставить(СокрП(Выборка.Код), Выборка.КатегорияДоставки);
		
	КонецЦикла;
	
	//СтатусЗаказа
	СписокСтатусЗаказа = Новый Соответствие;
	Выборка = РезультатПакета[12].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокСтатусЗаказа.Вставить(СокрП(Выборка.Код), Выборка.СтатусЗаказаИнтернетМагазина);
		
	КонецЦикла;
	
	//Траспорт по гос. номерам
	
	СписокТранспортПоГосНомерам = Новый Соответствие;
	Выборка = РезультатПакета[13].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТранспортПоГосНомерам.Вставить(СокрП(Выборка.Код), Выборка.Транспорт);
		
	КонецЦикла;
	
	//Фрахт
	СписокФрахт = Новый Соответствие;
	Выборка = РезультатПакета[14].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокФрахт.Вставить(СокрП(Выборка.Код), Выборка.Фрахт);
		
	КонецЦикла;
	
	//Груз
	СписокГруз = Новый Соответствие;
	Выборка = РезультатПакета[15].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокГруз.Вставить(СокрП(Выборка.Код), Выборка.Груз);
		
	КонецЦикла;
	
	ОбъектУТЛ_Рубли = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Рубли);
	
	//ИнтернетМагазинЯндекса
	СписокИнтернетМагазинЯндекса = Новый Соответствие;
	Выборка = РезультатПакета[16].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокИнтернетМагазинЯндекса.Вставить(СокрП(Выборка.Код), Выборка.ИнтернетМагазинЯндекса);
		
	КонецЦикла;
	
	//СписокНоменклатура
	СписокНоменклатура = Новый Соответствие;
	Выборка = РезультатПакета[17].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокНоменклатура.Вставить(СокрП(Выборка.Код), Новый Структура("Номенклатура, Артикул, ЕдиницаХраненияОстатков, НДСТовара" ,Выборка.Номенклатура, Выборка.Артикул, Выборка.ЕдиницаХраненияОстатков, Выборка.НДСТовара));
		
	КонецЦикла;
	
	
	//СписокСкладМагазина
	СписокСкладМагазина = Новый Соответствие;
	Выборка = РезультатПакета[18].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокСкладМагазина.Вставить((Выборка.Код), Выборка.СкладМагазина);
		
	КонецЦикла;

	//СписокСтавкаНДС 
	СписокСтавкаНДС  = Новый Соответствие;
	Выборка = РезультатПакета[19].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокСтавкаНДС.Вставить(СокрП(Выборка.Код), Выборка.СтавкаНДС);
		
	КонецЦикла;
	
	//--- БАО 31.05.2017 №926
	
	
	//+++ БАО 26.07.2017 №1488
	
	СписокТарифнаяСеткаПодъемаЗаказов = Новый Соответствие;
	
	Выборка = РезультатПакета[20].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СписокТарифнаяСеткаПодъемаЗаказов.Вставить(Формат(Выборка.КодТарифа, "ЧГ=0"), Выборка.Ссылка);
		
	КонецЦикла;
	
	//--- БАО 26.07.2017 №1488
	
	
	//+++ БАО 26.07.2017 №1900
	
	ШтрихкодыТоваров = РезультатПакета[22].Выгрузить();
	
	Для Каждого СтрокаШтрихкодыТоваров Из ШтрихкодыТоваров Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаШтрихкодыТоваров.ШтрихкодыТоваров) И СтрокаШтрихкодыТоваров.КодШтрихкодыТоваров <> "" Тогда
			
			Попытка
				ШтрихКодОбъект = Справочники.ШтрихкодыТоваров.СоздатьЭлемент();
				ШтрихКодОбъект.Владелец = СтрокаШтрихкодыТоваров.Номенклатура;
				ШтрихКодОбъект.Код = СтрокаШтрихкодыТоваров.КодШтрихкодыТоваров;
				ШтрихКодОбъект.Записать();
					
				СтрокаШтрихкодыТоваров.ШтрихкодыТоваров = ШтрихКодОбъект.Ссылка;
				
			Исключение
				
				ЗаписьЖурналаРегистрации("ЗагрузкаИзИнтернетМагазина.Ошибка",УровеньЖурналаРегистрации.Ошибка,,, "Ошибка создания ШтрихкодыТоваров" + СтрокаШтрихкодыТоваров.КодШтрихкодыТоваров + " Ошибка " + ОписаниеОшибки()); 
				
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//--- БАО 26.07.2017 №1900
	
	//+Степанов Задача № 4007
	СписокПоставщики = Новый Соответствие;
	ВыборкаПоставщиков =  РезультатПакета[23].Выбрать();
	Пока ВыборкаПоставщиков.Следующий() Цикл
		СписокПоставщики.Вставить(ВыборкаПоставщиков.ИдентификаторВАдминке, ВыборкаПоставщиков.Ссылка); 	
	КонецЦикла;	
	//-Степанов Задача № 4007
	
	//Асеев 22.06.2023 (Задача № 5071)>>>
	СписокТиповПозицийЗаказа = Новый Соответствие;
	ВыборкаТиповПозиций = РезультатПакета[24].Выбрать();
	Пока ВыборкаТиповПозиций.Следующий() Цикл
		СписокТиповПозицийЗаказа.Вставить(ВыборкаТиповПозиций.КодАдминки, ВыборкаТиповПозиций.Ссылка);
	КонецЦикла;
	//Асеев 22.06.2023 (Задача № 5071)<<<
	
	#КонецОбласти
	
	Сч = 1;
	
	// определяем максимальное количество потоков
	ЧислоПотоков = ?(СписокЗаказов.Количество() >=8, 8,  СписокЗаказов.Количество());
	
	
	// объем порции данных для обработки каждым потоком
	
	
			
	// массив где будут храниться фоновые задания
    ТаблицаЗаданий = Новый ТаблицаЗначений;
	ТаблицаЗаданий.Колонки.Добавить("ГУИД");
	ТаблицаЗаданий.Колонки.Добавить("Задание");
	ТаблицаЗаданий.Колонки.Добавить("ИндексНачала");
	ТаблицаЗаданий.Колонки.Добавить("РазмерПроции");
	ТаблицаЗаданий.Колонки.Добавить("Прогресс");
	ТаблицаЗаданий.Колонки.Добавить("ОшибкиОбработаны");

	Если ЧислоПотоков > 0 Тогда
		
		Если РежимСравнения Тогда 
			
			Если ПорцияС <> 0 И ПорцияДо <> 0 И ПорцияС <= ПорцияДо Тогда
				
				СписокЗаказовДляТеста = СписокЗаказов.СкопироватьКолонки();
				
				ПорцияДоИтого = ?(ПорцияДо > СписокЗаказов.Количество(), СписокЗаказов.Количество(), ПорцияДо);
				
				Для СчетчикЦикла = ПорцияС - 1 По ПорцияДоИтого - 1 Цикл 
					
					СтрокаСписокЗаказовДляТеста = СписокЗаказовДляТеста.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСписокЗаказовДляТеста, СписокЗаказов[СчетчикЦикла]); 
					
				КонецЦикла;	
				
				СписокЗаказов =  СписокЗаказовДляТеста;
				
				ЧислоПотоков = ?(СписокЗаказов.Количество() >=8, 8,  СписокЗаказов.Количество());
				
				КоличествоЗаказов = СписокЗаказов.Количество();
				
				
			КонецЕсли;
			
			
			
		КонецЕсли;	
		
		
		Попытка
			
			Лог("Регистрация заказов для обработки");
			
			//Все Заказы в НезагруженныеЗаказы  
			ДатаЗаписиВНезагруженныеЗаказы  = ТекущаяДата(); 
			modifyDate_Д = СписокЗаказов[СписокЗаказов.Количество()-1].modifyDate_Д;
			
			Для Каждого Заказ Из СписокЗаказов Цикл 
				
				
				Наб = РегистрыСведений.НезагруженныеЗаказы.СоздатьНаборЗаписей();
				
				Наб.Отбор.Период.Установить(ДатаЗаписиВНезагруженныеЗаказы);
				Наб.Отбор.НомерЗаказа.Установить(Формат(Заказ.orderId_Ч, "ЧГ="));
				
				Нов = Наб.Добавить();                   
				Нов.Период = ДатаЗаписиВНезагруженныеЗаказы;
				Нов.НомерЗаказа = Формат(Заказ.orderId_Ч, "ЧГ=");
				Нов.Ошибка = "-";
				
				Наб.Записать();
				
				//+Широков Задача 4181
				ПолучательЗаказа = ЗаписатьПолучателиЗаказов(Справочники.Контрагенты.НайтиПоКоду("R"+Формат(Заказ.UserId_Ч, "ЧН=0; ЧГ=")), Заказ.Email, Заказ.Telephone);
				//-Широков Задача 4181
				
			КонецЦикла;
			
			
			Если флОбновлятьДатуПоследнейЗагрузки И Не РежимСравнения И Не ЕстьОтборы Тогда
				
				//+++ БАО 07.07.2017 №1250
				
				Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
				Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЗаказов");
				Запись.Прочитать();
				Если Запись.Количество() = 0 Тогда
					НоваяЗапись = Запись.Добавить();
				Иначе
					НоваяЗапись = Запись[0];
				КонецЕсли;
				НоваяЗапись.Ключ = "ПоследняяЗагрузкаЗаказов";
				НоваяЗапись.Значение = ДатаВСтроку(modifyDate_Д);
				Попытка
					Запись.Записать();
				Исключение
					Лог("Ошибка обновления границы новых заказов. " + ОписаниеОшибки());
				КонецПопытки;
				
				//--- БАО 07.07.2017 №1250 
				
			КонецЕсли;
			
		Исключение
			
			Лог("Ошибка при записи регистрации заказов для обработки. " + ОписаниеОшибки());
			
		КонецПопытки;
		
		Лог("Завершено - Регистрация заказов для обработки");

		
		ЧислоСтрокВТаблице = СписокЗаказов.Количество();

		
		РазмерПроции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков);
		
		ИМ_TopDeliveryГруппа = Справочники.Контрагенты.НайтиПоНаименованию("ИМ TopDelivery", Истина);
		ИМ_TopDeliveryГруппаКод =  ИМ_TopDeliveryГруппа.Код;
		
		Для НомерПотока = 1 По ЧислоПотоков Цикл 		  
			
			// определяем индекс для начала обработки данных данным потоком
			// разные потоки обрабатывают разные части таблицы
			ИндексНачала = (НомерПотока - 1)*РазмерПроции;	
			
			Если (НомерПотока = ЧислоПотоков) Тогда
				// если это последний поток, то он обрабатывает все оставшиеся данные
				// т.к. число потоков может не быть кратно количеству строк в таблице
				РазмерПроции = ЧислоСтрокВТаблице-(ЧислоПотоков*РазмерПроции)+РазмерПроции;			
			КонецЕсли;                                        		
			
			// определяем массив параметров для процедуры
			НаборПараметров = Новый Массив;
			
			#Область ЗаполнениеПараметров
			
			НаборПараметров.Добавить(НомерПотока);
			НаборПараметров.Добавить(ИндексНачала);
			НаборПараметров.Добавить(РазмерПроции);
			НаборПараметров.Добавить(ЕстьОтборы );
			НаборПараметров.Добавить(ОбрабатыватьЗаказы);
			НаборПараметров.Добавить(ОбрабатыватьФрахт);
			НаборПараметров.Добавить(ОбрабатыватьЗаборы);
			НаборПараметров.Добавить(РежимСравнения);
			НаборПараметров.Добавить(ПорцияС);
			НаборПараметров.Добавить(ПорцияДо);
			НаборПараметров.Добавить(СписокЗаказов);
			НаборПараметров.Добавить(ТабличнаяЧастьЗаказов );
			НаборПараметров.Добавить(СтатусЗаказаОтменен);
			НаборПараметров.Добавить(СписокТерминалПриемки);
			НаборПараметров.Добавить(СписокТерминалДоставки);
			НаборПараметров.Добавить(СкладХраниения);
			НаборПараметров.Добавить(СписокТипТарифа);
			НаборПараметров.Добавить(флПропускатьЗагрузку);
			НаборПараметров.Добавить(СписокТранспортныеКомпании);
			НаборПараметров.Добавить(СписокМагазинов);
			НаборПараметров.Добавить(СписокОсновнойМагазин );
			НаборПараметров.Добавить(КоличествоЗаказов);
			НаборПараметров.Добавить(ТекПроц);
			НаборПараметров.Добавить(СписокСсылокНаКонтрагента);
			НаборПараметров.Добавить(НормальныйХодВыполнения);
			НаборПараметров.Добавить(Контрагент);
			НаборПараметров.Добавить(Договор);
			НаборПараметров.Добавить(ДатаЗапрета);
			НаборПараметров.Добавить(СписокБПноваМестнаяДоставка);
			НаборПараметров.Добавить(СписокЗаборТовара);
			НаборПараметров.Добавить(СписокКатегорияДоставки);
			НаборПараметров.Добавить(СписокСтатусЗаказа);
			НаборПараметров.Добавить(СписокТранспортПоГосНомерам);
			НаборПараметров.Добавить(СписокФрахт);
			НаборПараметров.Добавить(СписокГруз);
			НаборПараметров.Добавить(ОбъектУТЛ_Рубли);
			НаборПараметров.Добавить(КонтрагентДПД);
			НаборПараметров.Добавить(ТочкаДПД);
			НаборПараметров.Добавить(ТочкаДПД_Адрес);
			НаборПараметров.Добавить(КонтрагентПитер);
			НаборПараметров.Добавить(ТочкаПитер);
			НаборПараметров.Добавить(ТочкаПитер_Адрес);
			НаборПараметров.Добавить(СписокОбъектУТЛ_Контрагент);
			НаборПараметров.Добавить(ДокументыПоЗаказу);
			НаборПараметров.Добавить(НашаОрганизация);
			НаборПараметров.Добавить(РозничныйТипЦен);
			НаборПараметров.Добавить(Рубли);
			НаборПараметров.Добавить(СкладПитер);
			НаборПараметров.Добавить(СкладРеализации);
			НаборПараметров.Добавить(НашСчет);
			НаборПараметров.Добавить(глМасДог);
			НаборПараметров.Добавить(КонтрагентМагазин_Shop_248);
			НаборПараметров.Добавить(КонтрагентМагазин_Shop_601);
			НаборПараметров.Добавить(КонтрагентМагазин_Shop_752);
			НаборПараметров.Добавить(СписокИнтернетМагазинЯндекса);
			НаборПараметров.Добавить(СписокНоменклатура);
			НаборПараметров.Добавить(СписокСкладМагазина);
			НаборПараметров.Добавить(СписокСтавкаНДС);
			НаборПараметров.Добавить(ТоварRestore);
			НаборПараметров.Добавить(Shop_602);
			НаборПараметров.Добавить(Shop_612);
			НаборПараметров.Добавить(РегиональныеТерминалы_СПбСтриж);
			НаборПараметров.Добавить(МассивЗагруженныхНомеровЗаказов);
			НаборПараметров.Добавить(МассивОбновленияОбъектовУТЛ);
			НаборПараметров.Добавить(флСообщеноОбОтменеОбновленияДаты);
			НаборПараметров.Добавить(РезНепр);
			НаборПараметров.Добавить(ПрефиксКодовКонтрагентов);
			НаборПараметров.Добавить(КомитентПер);
			НаборПараметров.Добавить(ИМ_TopDeliveryГруппа);
			НаборПараметров.Добавить(ИМ_TopDeliveryГруппаКод);
			НаборПараметров.Добавить(Руб);
			НаборПараметров.Добавить(Орг);
			НаборПараметров.Добавить(ДостПер);
			НаборПараметров.Добавить(ШтукиПер);
			НаборПараметров.Добавить(ВидНоменклатурыПер);
			НаборПараметров.Добавить(КачествоНовый);
			НаборПараметров.Добавить(СкладРеализацииПоДоставке);
			НаборПараметров.Добавить(ГрТов);
			НаборПараметров.Добавить(ВН);
			НаборПараметров.Добавить(ОписаниеЭтапа);
			НаборПараметров.Добавить(ИмяФайла);
			НаборПараметров.Добавить(ФлагДобавленияЗамены );
			НаборПараметров.Добавить(ФлагЗаписиПослеКаждойСтроки);
			НаборПараметров.Добавить(ДатаЗаписиВНезагруженныеЗаказы);
			//+++ БАО 26.07.2017 №1488
			НаборПараметров.Добавить(СписокТарифнаяСеткаПодъемаЗаказов);
			//--- БАО 26.07.2017 №1488
			//+++ БАО 04.10.2017 №1900
			НаборПараметров.Добавить(ШтрихкодыТоваров);
			//--- БАО 04.10.2017 №1900
			
			//+Степанов Задача № 4007
			НаборПараметров.Добавить(СписокПоставщики);
			//-Степанов Задача № 4007
			
			//Асеев 29.09.2021 (Задача № 4667)>>>
			НаборПараметров.Добавить(СписокПВЗ);
			//Асеев 29.09.2021 (Задача № 4667)<<<
			
			//Асеев 16.02.2023 (Задача № 4995)>>>
			НаборПараметров.Добавить(ТаблицаЗаказовКЗаборам);
			//Асеев 16.02.2023 (Задача № 4995)<<<
			
			//Асеев 22.06.2023 (Задача № 5071)>>>
			НаборПараметров.Добавить(СписокТиповПозицийЗаказа);
			//Асеев 22.06.2023 (Задача № 5071)<<<
			
			#КонецОбласти 
			
			// запуск фонового задания
			ГУИД = Новый УникальныйИдентификатор;
			
			
			#Если Клиент Тогда 
				
				
				Если ФормаСообщений <> Неопределено Тогда
					
					ФормаСообщений.ЭлементыФормы["Поток" + НомерПотока].Видимость = Истина;
					ФормаСообщений.ЭлементыФормы["НадписьПоток" + НомерПотока].Видимость = Истина;
					ФормаСообщений.ЭлементыФормы["Индикатор" + НомерПотока].Видимость = Истина;
					
				КонецЕсли;
				
			#КонецЕсли	
			
			
			Задание = ФоновыеЗадания.Выполнить("ЗагрузкаИзИнтернетМагазина.ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина", НаборПараметров, ГУИД, "ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина. Поток " + НомерПотока);
			
			// добавляем задание в массив, что бы потом отследить выполнение
			СтрокаЗаданий = ТаблицаЗаданий.Добавить();
			СтрокаЗаданий.ГУИД = Задание.УникальныйИдентификатор;
			СтрокаЗаданий.Задание = Задание;
			СтрокаЗаданий.ИндексНачала = ИндексНачала;
			СтрокаЗаданий.РазмерПроции = РазмерПроции ;
			СтрокаЗаданий.Прогресс = 0;
			СтрокаЗаданий.ОшибкиОбработаны = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтключитьОбработчикОжидания = Ложь;
	
	#Если Клиент Тогда 
		
						
	#Иначе
		
		НаСервере = Истина;
		
		ОбработатьОжиданияЗавершенияФоновыхНаСервере();
		
	#КонецЕсли	
	
	

	
	
//+++ БАО 06.06.2017 №926

	//--- //+++ БАО 02.06.2017 №926
	//--- ВывестиСообщение("===== Начало сериализации");
	//--- СериализоватьПучок();
	//--- ВывестиСообщение("===== Конец сериализации");

	////--- БАО 02.06.2017 №926
//--- БАО 06.06.2017 №926	
	
КонецПроцедуры

//+Широков  Задача 4181
Функция НайтиПолучателяЗаказов(нКод)
		ЗапросПолучатели = Новый Запрос;
		ЗапросПолучатели.Текст = "ВЫБРАТЬ
		|	ПолучателиЗаказов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПолучателиЗаказов КАК ПолучателиЗаказов
		|ГДЕ
		//|	ПолучателиЗаказов.Код = &Код";
		|	ПолучателиЗаказов.ИдентификаторАдминки = &Код";
		ЗапросПолучатели.УстановитьПараметр("Код",нКод);
		ВыборкаПолучатели = ЗапросПолучатели.Выполнить().Выбрать();
		Если ВыборкаПолучатели.Следующий() Тогда
			Возврат ВыборкаПолучатели.Ссылка;
		Иначе;	
			Возврат Неопределено;
		КонецЕсли;
КонецФункции

Функция ЗаписатьПолучателиЗаказов(НовыйКА, стрEmail, стрТелефон)
	СтрокаПолучатели = Неопределено;
	СсылкаСтрокаПолучатели =  НайтиПолучателяЗаказов(НовыйКА.Код);
	Если СсылкаСтрокаПолучатели = Неопределено Тогда
		СтрокаПолучатели = Справочники.ПолучателиЗаказов.СоздатьЭлемент();
		//27.10.2020
		//СтрокаПолучатели.Код = НовыйКА.Код;
	Иначе;	
		СтрокаПолучатели = СсылкаСтрокаПолучатели.ПолучитьОбъект();
	КонецЕсли;
	
	//27.10.2020
	СтрокаПолучатели.ИдентификаторАдминки = НовыйКА.Код;
		
	СтрокаПолучатели.ИНН = НовыйКА.ИНН;
	СтрокаПолучатели.КПП = НовыйКА.КПП;
	СтрокаПолучатели.Наименование = НовыйКА.Наименование;
	СтрокаПолучатели.НаименованиеПолное = НовыйКА.НаименованиеПолное;
	
	Если НЕ стрТелефон = Неопределено Тогда
		СтрокаПолучатели.Телефон = стрТелефон;
	КонецЕсли;
	
	Если НЕ стрEmail = Неопределено Тогда
		СтрокаПолучатели.email = стрEmail;
	КонецЕсли;
	
	СтрокаПолучатели.Записать();
	Возврат СтрокаПолучатели.Ссылка;
	
КонецФункции
//-Широков  Задача 4181


Процедура ОбработатьОжиданияЗавершенияФоновыхНаСервере() Экспорт 
	
	ВсеЗавершены = Истина;
	
	Если ТаблицаЗаданий = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Если НаСервере <> Неопределено И НаСервере Тогда
		
		Для Каждого ЭлементМассиваЗадания Из ТаблицаЗаданий Цикл 
			
			Попытка 
				
				ЭлементМассиваЗадания.Задание.ОжидатьЗавершения(); 
				
			Исключение
				
			КонецПопытки;	                                    
			
		КонецЦикла; 
		
		ОбработатьЗавершенныеЗадания();
		
		
	Иначе 
		
		
		ОбработатьЗавершенныеЗадания();
		
		#Если Клиент Тогда 
			
			ОбщийПрогресс = "";
			Счетчик = 1;
			
			Для Каждого ЭлементМассиваЗадания Из ТаблицаЗаданий Цикл 
				
				ВывестиСообщение(ОбщийПрогресс, Счетчик, ЭлементМассиваЗадания.Прогресс);
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
			
		#КонецЕсли	
		
	КонецЕсли;
	
	
	
	Если ВсеЗавершены Тогда
		
		Лог("================== Загрузка завершена ==================");
		
		Если ФормаСообщений <> Неопределено Тогда
			
			ФормаСообщений.ЭлементыФормы.КоманднаяПанель1.Кнопки.ПолучитьОбщийЛог.Доступность = Истина;
			
		КонецЕсли;	
		
		
		Если ФлагУдаленияОткрытыхЗаказов Тогда
			Если ЗначениеЗаполнено(СписокОткрытыхЗаказов) Тогда
				Мас = СписокОткрытыхЗаказов.ВыгрузитьКолонку("Orderid_ч");
				Зап = Новый Запрос;
				Зап.Текст = "ВЫБРАТЬ
				|	новаМестнаяДоставка.Ссылка Как Заказ
				|ИЗ
				|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
				|ГДЕ
				|	новаМестнаяДоставка.Номер В(&Мас)";
				Зап.УстановитьПараметр("Мас", Мас);
				Рез = Зап.Выполнить().Выгрузить();
				Стр = "";
				Для Каждого Тек Из Рез Цикл
					Заказ = Тек.Заказ.ПолучитьОбъект();
					Заказ.Дата = Тек.Заказ.Дата - 365*86400;
					
					
					ЧН = Час(Заказ.ВремяОтправленияС);
					ЧК = Час(Заказ.ВремяОтправленияПо);
					
					МН = Минута(Заказ.ВремяОтправленияС);
					МК = Минута(Заказ.ВремяОтправленияПо);
					
					ЧН_ = Час(Заказ.ВремяПрибытияС);
					ЧК_ = Час(Заказ.ВремяПрибытияПо);
					
					МН_ = Минута(Заказ.ВремяПрибытияС);
					МК_ = Минута(Заказ.ВремяПрибытияПо);
					
					
					Заказ.ВремяОтправленияС = Дата(Формат(Год(Заказ.Дата), "ЧГ=") + Формат(Месяц(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН, "ЧЦ=2; ЧВН=; ЧГ=") + Формат(МН, "ЧЦ=2; ЧВН=; ЧГ=") + "00");
					Заказ.ВремяОтправленияПо = Дата(Формат(Год(Заказ.Дата), "ЧГ=") + Формат(Месяц(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК, "ЧЦ=2; ЧВН=; ЧГ=") + Формат(МК, "ЧЦ=2; ЧВН=; ЧГ=") + "00");
					
					Заказ.ВремяПрибытияС = Дата(Формат(Год(Заказ.Дата), "ЧГ=") + Формат(Месяц(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН_, "ЧЦ=2; ЧВН=; ЧГ=") + Формат(МН_, "ЧЦ=2; ЧВН=; ЧГ=") + "00");
					Заказ.ВремяПрибытияПо = Дата(Формат(Год(Заказ.Дата), "ЧГ=") + Формат(Месяц(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Заказ.Дата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК_, "ЧЦ=2; ЧВН=; ЧГ=") + Формат(МК_, "ЧЦ=2; ЧВН=; ЧГ=") + "00");
					
					Заказ.Записать();
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(Заказ.Ссылка);
					//--- БАО 27.06.2017 №119
					
					Стр = Стр + Строка(Тек.Заказ.Номер) + ",";
				КонецЦикла;	
				
				Если Стр <> "" Тогда
					МасП = Новый Массив;
					//МасП.Добавить("lemuracami@gmail.com");
					//lem.ОтправитьСообщение(МасП, "Удаленные открытые заказы", Стр, , "Логистическая компания ""Стриж""") ;		
				КонецЕсли;	
				
			КонецеСли;	
		КонецеСли;	
		
		
		// обновление загруженных номеров
		ТекстЗ = "";
		
		Если МассивЗагруженныхНомеровЗаказов.Количество() <> 0 Тогда
			ТекстЗ = "declare @t [dbo].Torder ";
			Для СчМ = 0 По МассивЗагруженныхНомеровЗаказов.Количество() - 1 Цикл
				ТекстЗ = ТекстЗ + "
				|insert into @t values (" + МассивЗагруженныхНомеровЗаказов.Получить(СчМ) + ")";
			КонецЦикла;	
			
			//+++ БАО 13.09.2017 №
			Попытка  
				Если ПодключениеКМагазину = Неопределено Или ПодключениеКМагазину = 0 Тогда
					
					ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 	
					
				ИначеЕсли ПодключениеКМагазину.State = 0	Тогда 
					ПодключениеКМагазину.Open(Евген.СтрокаПодключенияКИнтернетМагазину()); 
				КонецЕсли;	
			Исключение
				
				ЗаписьЖурналаРегистрации("ЗагрузкаИзИнтернетМагазина", , ,, ОписаниеОшибки());
				
			КонецПопытки;
			//--- БАО 13.09.2017 №

			
			ТекстЗ = ТекстЗ + " EXEC dbo.import_setOrdersLoadedIn1c @t";
			
			Евген.ЗапросКИнтернетМагазину(ТекстЗ, ПодключениеКМагазину);
			
			
			ЗапЗаписьБрейков = Новый Запрос;
			ЗапЗаписьБрейков.Текст = "ВЫБРАТЬ
			|	РеализацияТоваровУслуг.Ссылка КАК Док
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Номер В(&МасНомеров)";
			ЗапЗаписьБрейков.УстановитьПараметр("МасНомеров", МассивЗагруженныхНомеровЗаказов);
			МасЗаказовДляБрейков = Новый Массив;
			ВыбБр = ЗапЗаписьБрейков.Выполнить().Выбрать();
			
			Пока ВыбБр.Следующий() Цикл
				МасЗаказовДляБрейков.Добавить(ВыбБр.Док);
			КонецЦикла;	
			
			МаршрутизацияЗаказовСервер.УстановитьЛогистическиеКатегорииЗаказов(МасЗаказовДляБрейков);
			
		КонецеСли;	
		
		Если Не РежимСравнения Тогда
			
			//Асеев 14.10.2022 (Задача № 4913)>>>
			МассивЗаказовЗон = Новый Массив;
			//Асеев 14.10.2022 (Задача № 4913)<<<
			
			ЗапПолигоны = Новый Запрос;
			ЗапПолигоны.Текст = "ВЫБРАТЬ
			                    |	новаМестнаяДоставка.Номер КАК НомерЗаказа,
			                    |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
			                    |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота
			                    |ИЗ
			                    |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
			                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			                    |		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
			                    |ГДЕ
			                    |	новаМестнаяДоставка.Номер В(&НомераЗаказов)
			                    |	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта <> 0
			                    |	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота <> 0
			                    |	И РеализацияТоваровУслуг.ТерминалДоставки.Код = 1
			                    |
			                    |ОБЪЕДИНИТЬ ВСЕ
			                    |
			                    |ВЫБРАТЬ
			                    |	ЗаборТовара.Номер,
			                    |	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
			                    |	ЗаборТовара.ТочкаДоставки.Адрес.Долгота
			                    |ИЗ
			                    |	Документ.ЗаборТовара КАК ЗаборТовара
			                    |ГДЕ
			                    |	ЗаборТовара.Номер В(&НомераЗаказов)
			                    |	И ЗаборТовара.ТочкаДоставки.Адрес.Широта <> 0
			                    |	И ЗаборТовара.ТочкаДоставки.Адрес.Долгота <> 0
			                    |	И ЗаборТовара.ТерминалДоставки.Код = 1";
			ЗапПолигоны.УстановитьПараметр("НомераЗаказов", МассивЗагруженныхНомеровЗаказов);
			
			РезПолигоны = ЗапПолигоны.Выполнить();
			Если Не РезПолигоны.Пустой() Тогда
				ВыбПолигоны = РезПолигоны.Выбрать();
				МассивСтрук = Новый Массив;
				Пока ВыбПолигоны.Следующий() Цикл
					Струк = Новый Структура;
					
					Струк.Вставить("НомерЗаказа", Число(ВыбПолигоны.НомерЗаказа));
					Струк.Вставить("Широта", ВыбПолигоны.Широта);
					Струк.Вставить("Долгота", ВыбПолигоны.Долгота);
					
					МассивСтрук.Добавить(Струк);
					
					//Асеев 14.10.2022 (Задача № 4913)>>>
					МассивЗаказовЗон.Добавить(ВыбПолигоны.НомерЗаказа);
					//Асеев 14.10.2022 (Задача № 4913)<<<
				КонецЦикла;	
				
				//+Широков 24.12.2020 по письму
				//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);
				//+Широков Задача 4193
				//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "Обработка.ЗагрузкаИзИнтернетМагазина.ОбработатьОжиданияЗавершенияФоновыхНаСервере(9639, 5)");
				ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "Обработка.ЗагрузкаИзИнтернетМагазина.ОбработатьОжиданияЗавершенияФоновыхНаСервере(9639, 5)", Истина);
				//-Широков Задача 4193
			//-Широков 24.12.2020 по письму
			
				//Асеев 14.10.2022 (Задача № 4913)>>>
				ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
				//Асеев 14.10.2022 (Задача № 4913)<<<
			КонецеСли;	
		КонецеСли;	
		
		//+++ БАО 28.06.2017 №1192
		Если РежимСравнения Тогда
			флОбновлятьДатуПоследнейЗагрузки = Ложь;
			//+++ БАО 06.07.2017 №1250
		Иначе 	
			флОбновлятьДатуПоследнейЗагрузки = Истина;	
			//--- БАО 06.07.2017 №1250 
		КонецЕсли;	
		//--- БАО 28.06.2017 №1192
		
		Если флОбновлятьДатуПоследнейЗагрузки Тогда
			                       
			//+++ БАО 07.07.2017 №1250
			
			//Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
			//Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЗаказов");
			//Запись.Прочитать();
			//ТекДата = '00010101';
			//Если Запись.Количество() = 0 Тогда
			//	НоваяЗапись = Запись.Добавить();
			//Иначе
			//	НоваяЗапись = Запись[0];
			//	Попытка
			//		ТекДата = Вычислить("'" + НоваяЗапись.Значение + "'");
			//	Исключение
			//	КонецПопытки;
			//КонецЕсли;
			//
			//Если ТекДата < ДатаЗапроса Тогда
			//	НоваяЗапись.Ключ = "ПоследняяЗагрузкаЗаказов";
			//	НоваяЗапись.Значение = ДатаВСтроку(ДатаЗапроса);
			//	Попытка
			//		Запись.Записать();
			//		
			//		//+++ БАО 27.06.2017 №1192
			//		ДобавитьВХранилищеОбъектовСравнения(Запись);
			//		//--- БАО 27.06.2017 №1192
			//		
			//		Лог("Установлена граница новых заказов " + ДатаЗапроса);
			//	Исключение
			//		Лог("Ошибка обновления границы новых заказов. " + ОписаниеОшибки());
			//	КонецПопытки;
			//Иначе
			//	Лог("Установлена граница новых заказов " + ТекДата);
			//КонецЕсли;
			
			//--- БАО 07.07.2017 №1250 
		КонецЕсли;
		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.APDEX_КлючевыеОперации.ЗагрузкаИзИнтернетМагазина_ЗагрузитьНовыеЗаказы, "Количество заказов = " + Формат(КоличествоЗаказов, "ЧГ=0") + " Запрос в инет магаз: " + ТекстЗ);
		
		#Если Клиент Тогда
			
			ОтключитьОбработчикОжидания = Истина;
			
			//+++ БАО 27.06.2017 №1192 
			
			Если (РежимСравнения) Тогда
				
				Лог("================================================================");
				Лог("ФОРМИРУЕТСЯ ДЕРЕВО");
				Лог("================================================================");
				
				
				ХранилищеОбъектовСравнения.Сортировать("ТипОбъект, НаименованиеОбъекта, Номер, Дата, Наименование");
				
				Отбор = Новый Структура;
				Отбор.Вставить("НаименованиеОбъекта", "Регистр");
				НайденныеСтроки = ХранилищеОбъектовСравнения.НайтиСтроки(Отбор);
				
				Регистры = ХранилищеОбъектовСравнения.Скопировать(НайденныеСтроки);
				
				ХранилищеОбъектовСравнения.Свернуть("Дата,
				|Наименование,
				|НаименованиеОбъекта,
				|Номер,
				|Ссылка,
				|ТипОбъект", 
				"СтруктураРеквизитов");
				
				
				Для Каждого Строка Из НайденныеСтроки Цикл 
					ХранилищеОбъектовСравнения.Удалить(Строка);	
				КонецЦикла;	
				
				Для Каждого Строка Из Регистры Цикл 
					НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;	
				
				
				ТабДок = ОбработатьХранилищеОбъектовСравнения(ХранилищеОбъектовСравнения, "После");
				
				
				
				Если ЗапускатьСтаруюВерсию Тогда
					
					ПутьДо = КаталогДляСохранения + "\После_" + СтрЗаменить(Строка(ТекущаяДата()), ":", " ") + " .mxl";
					
					
					ТабДок.Записать(ПутьДо);
					
					Лог("================================================================");
					Лог("ФОРМИРУЕТСЯ СТАРОЕ ДЕРЕВО");
					Лог("================================================================");
					
					
					ХранилищеОбъектовСравнения_До.Сортировать("ТипОбъект, НаименованиеОбъекта, Номер, Дата, Наименование");
					
					Отбор = Новый Структура;
					Отбор.Вставить("НаименованиеОбъекта", "Регистр");
					НайденныеСтроки = ХранилищеОбъектовСравнения_До.НайтиСтроки(Отбор);
					
					Регистры = ХранилищеОбъектовСравнения_До.Скопировать(НайденныеСтроки);
					
					ХранилищеОбъектовСравнения_До.Свернуть("Дата,
					|Наименование,
					|НаименованиеОбъекта,
					|Номер,
					|Ссылка,
					|ТипОбъект", 
					"СтруктураРеквизитов");
					
					
					Для Каждого Строка Из НайденныеСтроки Цикл 
						ХранилищеОбъектовСравнения_До.Удалить(Строка);	
					КонецЦикла;	
					
					Для Каждого Строка Из Регистры Цикл 
						НоваяСтрока = ХранилищеОбъектовСравнения_До.Добавить();	
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;	
					
					
					ТабДок = ОбработатьХранилищеОбъектовСравнения(ХранилищеОбъектовСравнения_До,  "До");
					
					ПутьПосле = КаталогДляСохранения + "\До_" + СтрЗаменить(Строка(ТекущаяДата()), ":", " ") + " .mxl";
					
					ТабДок.Записать(ПутьПосле);
					
					#Если Клиент Тогда 
						
						Если СравнитьФайлы Тогда
							
							Лог("================================================================");
							Лог("ФОРМИРУЕТСЯ СРАВНЕНИЕ");
							Лог("================================================================");
							
							
							Сравнение = Новый СравнениеФайлов;
							Сравнение.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;
							Сравнение.ПервыйФайл = ПутьДо;
							Сравнение.ВторойФайл = ПутьПосле;
							Сравнение.ПоказатьРазличия();
							
						КонецЕсли;
						
					#КонецЕсли
					
				КонецЕсли;	
				
				Если УдалитьОбъектыОтладки Тогда
					
					Попытка
						
						НачатьТранзакцию(РежимУправленияБлокировкойДанных .Управляемый);
						
						Для Каждого Строка Из ХранилищеОбъектовСравнения Цикл 
							
							Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
								Объект = Строка.Ссылка.ПолучитьОбъект();
								Объект.Удалить();
							КонецЕсли;	
							
						КонецЦикла;	
						
						ЗафиксироватьТранзакцию();
						
					Исключение
						
						Лог("Ошибка удаления объектов:" + ОписаниеОшибки());
						
					КонецПопытки;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			//--- БАО 27.06.2017 №1192 
			
		#КонецЕсли	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗавершенныеЗадания()
		
	СчетчикПотоков = 0;
	
	Если ТаблицаЗаданий = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Для Каждого ЭлементМассиваЗадания Из ТаблицаЗаданий Цикл 
		
		СчетчикПотоков = СчетчикПотоков + 1;
		
		//ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ЭлементМассиваЗадания.ГУИД);
		
		Отбор = Новый Структура;
		Отбор.Вставить("УникальныйИдентификатор", ЭлементМассиваЗадания.ГУИД);
		
		ФоновоеЗадание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		//На всякий случай
		Если ФоновоеЗадание = Неопределено Тогда
						
			ВывестиСообщение("Не найдено фоновое задание. Поток " + СчетчикПотоков, СчетчикПотоков);
			
			Продолжить;
			
		КонецЕсли;
		
		ФоновоеЗадание = ФоновоеЗадание[0];

		
		Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно И ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Завершено И Не ЭлементМассиваЗадания.ОшибкиОбработаны Тогда
			
			Инфо = ФоновоеЗадание.ИнформацияОбОшибке;
			СтрокаОшибки = НСтр("ru='Описание=';en='Description='") + Инфо.Описание + "'" + Символы.ПС + 
			НСтр("ru='ИмяМодуля=';en='ModuleName='") + Инфо.ИмяМодуля + "'" + Символы.ПС + 
			НСтр("ru='НомерСтроки=';en='LineNumber='") + Инфо.НомерСтроки + "'" + Символы.ПС + 
			НСтр("ru='ИсходнаяСтрока=';en='SourceLine='") + Инфо.ИсходнаяСтрока + "'" + Символы.ПС; 
			
			ВывестиСообщение("Поток " + СчетчикПотоков + ". В состоянии:" + ФоновоеЗадание.Состояние + Символы.ПС + СтрокаОшибки, СчетчикПотоков);
			
			
			Для СчетчикЗаказов = 1 По ЭлементМассиваЗадания.РазмерПроции  Цикл
				
				Индекс = ?(СчетчикЗаказов = 1, ЭлементМассиваЗадания.ИндексНачала, Индекс + 1);
				Заказ =  СписокЗаказов[Индекс];
				
				НомерЗаказа             = Заказ.orderId_Ч;
				стрНомерЗаказа          = ЧислоКСтрокеБезПробелов(НомерЗаказа);
				
				ДобавитьОшибочныйЗаказ(стрНомерЗаказа, "Фоновое завершено аварийно. " +  СтрокаОшибки);
				
			КонецЦикла;
			
			ЭлементМассиваЗадания.ОшибкиОбработаны = Истина;
			
			Если ФормаСообщений <> Неопределено Тогда
				ФормаСообщений.ЭлементыФормы["Поток" + СчетчикПотоков].ЦветФонаПоля =  ЦветаСтиля.ЦветОтрицательногоЧисла;
			КонецЕсли;	
			
			
		ИначеЕсли (НаСервере = Неопределено Или НаСервере = Ложь) И ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда 
			
			ВсеЗавершены = Ложь;
			
		КонецЕсли;	
		
		МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		
		Если МассивСообщений = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Количество = МассивСообщений.Количество();
		
		Для Каждого Сообщение Из МассивСообщений Цикл 
			
			
			Если Сообщение.Текст = "" Тогда
				
			ИначеЕсли СтрНайти(Сообщение.Текст,"Структура возврата") > 0 Тогда
				
				
				Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "Структура возврата" + Символы.ПС, "");
				СтруктураВозврата = ОбщегоНазначения.ЗначениеИзСтрокиXML(Сообщение.Текст);
				
	
				ХранилищеОбъектовСравненияПотока =  СтруктураВозврата.ХранилищеОбъектовСравнения;				
				МассивЗагруженныхНомеровЗаказовПотока =  СтруктураВозврата.МассивЗагруженныхНомеровЗаказов;
				
				Для Каждого СтрокаХранилищеОбъектовСравненияПотока Из ХранилищеОбъектовСравненияПотока Цикл 
					
					НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХранилищеОбъектовСравненияПотока); 
					
				КонецЦикла;	
				
				Для Каждого СтрокаМассива Из  МассивЗагруженныхНомеровЗаказовПотока Цикл 
					
					МассивЗагруженныхНомеровЗаказов.Добавить(СтрокаМассива);
					
				КонецЦикла;	
				
				
			ИначеЕсли СтрНайти(Сообщение.Текст,"Прогресс") > 0 Тогда
				
				ЭлементМассиваЗадания.Прогресс =  СтрЗаменить(Сообщение.Текст, "Прогресс" + Символы.ПС, "");
					
			Иначе 
					
				ВывестиСообщение(Сообщение.Текст, СчетчикПотоков);
				
			КонецЕсли;	
			
			
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

//+++ БАО 02.06.2017 №926

Процедура СериализоватьПучок()
	
		
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл("C:\Артур\1с\Задачи\Оптимизация загрузки\Данные_Новые.xml");
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Данные");
	
	Для Каждого СтрокаПучок Из ПучокДокументовОбщий Цикл 
	
		Данные = СтрокаПучок.Док;
		ЗаписатьXML(ЗаписьXML, Данные);
		
	КонецЦикла;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();

		
	ЗаписьXML.Закрыть();
	
	
КонецПроцедуры	

Процедура ДесериализоватьИзXMLНаСервере()
	
	тСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO); 
 
   тЧтениеXML = Новый ЧтениеXML;
   тЧтениеXML.ОткрытьФайл("C:\test.xml");
 
   тСсылка = тСериализаторXDTO.ПрочитатьXML(тЧтениеXML);
   
КонецПроцедуры
	
//--- БАО 02.06.2017 №926	

Функция ПолучитьСписокЗадачДоставки(Доставка)
	
	ЗапросПоискаЗадач = Новый Запрос;
	ЗапросПоискаЗадач.Текст =
	"ВЫБРАТЬ
	|	новаЗадачаМестнойДоставки.Ссылка
	|ИЗ
	|	Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
	|ГДЕ
	|	новаЗадачаМестнойДоставки.Выполнена = ЛОЖЬ
	|	И ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(новаЗадачаМестнойДоставки.БизнесПроцесс КАК БизнесПроцесс.новаМестнаяДоставка).ВедущаяЗадача.БизнесПроцесс КАК БизнесПроцесс.новаМестнаяДоставка)) = &БизнесПроцесс
	|			ИЛИ (ВЫРАЗИТЬ(новаЗадачаМестнойДоставки.БизнесПроцесс КАК БизнесПроцесс.новаМестнаяДоставка)) = &БизнесПроцесс
	|			ИЛИ (ВЫРАЗИТЬ(ВЫРАЗИТЬ(новаЗадачаМестнойДоставки.БизнесПроцесс КАК БизнесПроцесс.новаПланированиеМестнойДоставки).ВедущаяЗадача.БизнесПроцесс КАК БизнесПроцесс.новаПланированиеМестнойДоставки)) = &БизнесПроцесс
	|			ИЛИ (ВЫРАЗИТЬ(новаЗадачаМестнойДоставки.БизнесПроцесс КАК БизнесПроцесс.новаПланированиеМестнойДоставки)) = &БизнесПроцесс)";	
	ЗапросПоискаЗадач.УстановитьПараметр("БизнесПроцесс", Доставка);
	Возврат ЗапросПоискаЗадач.Выполнить().Выбрать();	
	
КонецФункции

Функция ПолучитьРежимЗаписи(Действия, СтатусЗаказа)
	РежимЗаписи = Неопределено;
	Если Не ЗначениеЗаполнено(Действия) Тогда
		Если СтатусЗаказа = 1 Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		ИначеЕсли СтатусЗаказа = 2 Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		ИначеЕсли СтатусЗаказа = 3 Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ИначеЕсли СтатусЗаказа = 4 Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		ИначеЕсли СтатусЗаказа = 5 Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		позДействия = Найти(Действия, Формат(СтатусЗаказа, "ЧН=0") + "=");
		Если позДействия > 0 Тогда
			Действия = Сред(Действия, позДействия + 2);
			позДействия = Найти(Действия, ",");
			Если позДействия > 0 Тогда
				Действия = Лев(Действия, позДействия - 1);
			КонецЕсли;
			позДействия = Найти(Действия, ";");
			Если позДействия > 0 Тогда
				Действия = Лев(Действия, позДействия - 1);
			КонецЕсли;
			позДействия = Найти(Действия, " ");
			Если позДействия > 0 Тогда
				Действия = Лев(Действия, позДействия - 1);
			КонецЕсли;
		КонецЕсли;
		Если Действия = "Запись" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		ИначеЕсли Действия = "ОтменаПроведения" Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		ИначеЕсли Действия = "Проведение" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РежимЗаписи;
КонецФункции

Функция ДатаВСтроку(Д) Экспорт 
	Возврат Формат(Год(Д), "ЧГ=") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + ЛидирующийНоль(Час(Д)) + ЛидирующийНоль(Минута(Д)) + ЛидирующийНоль(Секунда(Д));
КонецФункции

Функция СтрокаКВремя(стр);
	С = Лев(стр, 1);
	Если Не ЭтоЧисло(С) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Часы = Число(С);
	Минуты = 0;
	
	поз = 2;
	С = Сред(стр, 2, 1);
	Если ЭтоЧисло(С) Тогда
		Часы = Часы * 10 + Число(С);
		поз = поз + 1;
	КонецЕсли;
	
	Если Не ЭтоЧисло(Сред(стр, поз, 1)) Тогда
		поз = поз + 1;
		С = Сред(стр, поз, 1);
		Если ЭтоЧисло(С) Тогда
			//Есть минуты
			Минуты = Число(С);
			поз = поз + 1;
			С = Сред(стр, поз, 1);
			Если ЭтоЧисло(С) Тогда
				Минуты = Минуты * 10 + Число(С);
				Если Минуты < 60 Тогда
					Часы = Часы + Минуты / 60;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Часы < 24 Тогда
		Возврат Часы;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ЭтоЧисло(сим)
	Возврат ЗначениеЗаполнено(сим) И Найти("0123456789", сим) > 0;
КонецФункции

Процедура ВыполнитьЭтап(КлючЭтапа, СписокЭтапов)
	Перем ПараметрыЭтапа;
	Если СписокЭтапов.Свойство(КлючЭтапа, ПараметрыЭтапа) Тогда
		Если Не НормальныйХодВыполнения Тогда
			Лог("Этап "+КлючЭтапа+" пропущен из-за возникших ранее ошибок");
			Возврат;
		КонецЕсли;
		
		ОписаниеЭтапа = "Этап "+ТекущийЭтап+" из "+СписокЭтапов.Количество()+" ("+КлючЭтапа+")";
		#Если Клиент Тогда 
			Состояние(ОписаниеЭтапа, ТекущийЭтап*100/СписокЭтапов.Количество());
		#КонецЕсли
		Лог(ОписаниеЭтапа);
		
		Если КлючЭтапа = "ЗаписатьКонтрагентов" Тогда
			
			ЗаписатьКонтрагентов(ПараметрыЭтапа);
			
		ИначеЕсли КлючЭтапа = "ЗаписатьНоменклатуру" Тогда
			
			//ЗаписатьНоменклатуру(ПараметрыЭтапа); // Добавить определение ставки НДС
			
		ИначеЕсли КлючЭтапа = "ОбновитьВсюНоменклатуру" Тогда
			
			//СинхронизацияДереваНоменклатуры(); //создание новых и изменение групп товаров, у которых она отличается
			
		ИначеЕсли КлючЭтапа = "ЗагрузитьНоменклатуруПоКодамСайта" Тогда
			ЗагрузитьНоменклатуруПоКодамСайта(ПараметрыЭтапа);
		ИначеЕсли КлючЭтапа = "ЗагрузитьНоменклатуруПоКодамАдминки" Тогда
			ЗагрузитьНоменклатуруПоКодамСайта(ПараметрыЭтапа);
		ИначеЕсли КлючЭтапа = "ИзменениеПометкиУдаленияНоменклатуры" Тогда
			
			ИзменениеПометкиУдаленияНоменклатуры(ПараметрыЭтапа);
			
		ИначеЕсли КлючЭтапа = "ЗагрузитьЗаказыНаЗавтра" Тогда
			ОбработатьЗаказы(Ложь, ОписаниеЭтапа);
		ИначеЕсли КлючЭтапа = "ЗагрузитьНовыеЗаказы" Тогда
			
			//+++ БАО 29.06.2017 №1208 
			APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.APDEX_КлючевыеОперации.ЗагрузкаИзИнтернетМагазина_ЗагрузитьНовыеЗаказы);
			//--- БАО 29.06.2017 №1208 
			
			ОбработатьЗаказы(Истина, ОписаниеЭтапа);
			
			//+++ БАО 29.06.2017 №1208 
			Если ТипЗнч(СписокЗаказов) = Тип("ТаблицаЗначений") Тогда
				КоличествоЗаказов = СписокЗаказов.Количество();
			Иначе 
				КоличествоЗаказов = 0;
			КонецЕсли;	
			
			//--- БАО 29.06.2017 №1208 
			
		ИначеЕсли КлючЭтапа = "ЗагрузитьЗаказыПоДатеСоздания" Тогда
			ОбработатьЗаказы(Ложь, ОписаниеЭтапа);
		ИначеЕсли КлючЭтапа = "ЗагрузитьЗаказыПоДатеОтгрузки" Тогда
			ОбработатьЗаказы(Ложь, ОписаниеЭтапа);
		ИначеЕсли КлючЭтапа = "СпецЗагрузка" Тогда
			ОбработатьЗаказы(Ложь, ОписаниеЭтапа);
		ИначеЕсли КлючЭтапа = "ЗагрузитьЗаказыПоНомерам" Тогда  
			ОбработатьЗаказы(Ложь, ОписаниеЭтапа);
		КонецЕсли;
		ТекущийЭтап = ТекущийЭтап + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура Лог(Стр)
	//ВывестиСообщение(Стр);
	ВывестиСообщение(""+ТекущаяДата()+" "+Стр);
	Если ФлагДобавленияЗамены > 0 И ЗначениеЗаполнено(ИмяФайла) Тогда 
		ЛогФайл.ДобавитьСтроку(""+ТекущаяДата()+" "+Стр);
		Если ФлагЗаписиПослеКаждойСтроки = 1 Тогда
			Попытка
				ЛогФайл.Записать(ИмяФайла);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьТаблицу(Таб)
	Таб.ВыбратьСтроку(""+Таб.Количество()+" элементов");
КонецПроцедуры

Процедура СозданиеНовыхСкладов(ТаблицыЗнач)
	ИнфоПоСкладамМагазинов = Новый ТаблицаЗначений;
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	ИнфоПоСкладамМагазинов.Колонки.Добавить("Shop_Ч"   , ОписаниеТиповЧисло);
	ИнфоПоСкладамМагазинов.Колонки.Добавить("stockId"  , ОписаниеТиповЧисло);
	ИнфоПоСкладамМагазинов.Колонки.Добавить("stockName", ОписаниеТиповСтрока);
	ИнфоПоСкладамМагазинов.Колонки.Добавить("stockIdImport", ОписаниеТиповСтрока);
	// ++Задача № 3363
	ИнфоПоСкладамМагазинов.Колонки.Добавить("stockPhoneNumber", ОписаниеТиповСтрока);
	ИнфоПоСкладамМагазинов.Колонки.Добавить("stockAddress", ОписаниеТиповСтрока);
	// --Задача № 3363
	//Асеев 17.05.2022 (Задача № 4805)>>>
	ИнфоПоСкладамМагазинов.Колонки.Добавить("stockterminalId_Ч", ОписаниеТиповЧисло);
	//Асеев 17.05.2022 (Задача № 4805)<<<
	
	Для Каждого Стр Из ТаблицыЗнач Цикл
		Если ТипЗнч(Стр.StockId_Ч) = Тип("Null") Тогда
			StockId = 0;
		Иначе
			StockId = Стр.stockId_Ч;
		КонецЕсли;
		
		Если StockId > 0 Тогда 
			НоваяСтр = ИнфоПоСкладамМагазинов.Добавить();
			НоваяСтр.Shop_Ч        = Стр.Shop_Ч;
			НоваяСтр.stockID       = StockId;
			НоваяСтр.stockName     = Стр.stockName;
			НоваяСтр.stockIdImport = Стр.stockIdImport;
			// ++Задача № 3363
			НоваяСтр.stockPhoneNumber = Стр.stockPhoneNumber;
			НоваяСтр.stockAddress = Стр.stockAddress;
			// --Задача № 3363
			//Асеев 17.05.2022 (Задача № 4805)>>>
			НоваяСтр.stockterminalId_Ч = Стр.stockterminalId_Ч;
			//Асеев 17.05.2022 (Задача № 4805)<<<
			
		КонецЕсли;
	КонецЦикла;
	
	Если ИнфоПоСкладамМагазинов.Количество() > 0 Тогда // Загрузить склады магазинов
		ЗагрузкаСкладовМагазинов(ИнфоПоСкладамМагазинов);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиСписокАктивныхПользователей()
	СоединенияИнформационнойБазы = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из СоединенияИнформационнойБазы Цикл          
		Лог("Имя=" + Соединение.Пользователь.Имя + Символы.Таб +
		" Приложение=" + ПредставлениеПриложения(Соединение.ИмяПриложения) + Символы.Таб +
		" НачалоРаботы=" + Соединение.НачалоСеанса + Символы.Таб +
		" Имя компьютера=" + Соединение.ИмяКомпьютера);
	КонецЦикла;
КонецПроцедуры

//+++ БАО 27.06.2017 №926

Функция СоздатьТЗРевизитов()
	
	Реквизиты = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки = Новый КвалификаторыСтроки(20);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,,,ПараметрыСтроки);  
	Реквизиты.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	Реквизиты.Колонки.Добавить("Значение");
	
	Возврат Реквизиты;
	
КонецФункции	

Функция СоздатьТЗОбъетов()
	
	ХранилищеОбъектовСравнения = ЗагрузкаИзИнтернетМагазина.СоздатьТЗОбъетов();
	
КонецФункции	

Функция СоздатьТЗТЧ()
	
	Реквизиты = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки = Новый КвалификаторыСтроки(20);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,,,ПараметрыСтроки);  
	Реквизиты.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	Реквизиты.Колонки.Добавить("Значение", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Реквизиты;
	
КонецФункции	

Функция ДобавитьВХранилищеОбъектовСравнения(Ссылка);
	
	Если Не РежимСравнения Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Тип = ТипЗнч(Ссылка);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		
		НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
		НоваяСтрока.ТипОбъект = "Справочник";
		НоваяСтрока.НаименованиеОбъекта = Строка(Ссылка.Метаданные().Имя);
		
		
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.Наименование = Ссылка.Наименование;
		НоваяСтрока.Номер = Ссылка.Код;
		
	ИначеЕсли  Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		
		НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
		НоваяСтрока.ТипОбъект = "Документ";
		НоваяСтрока.НаименованиеОбъекта = Строка(Ссылка.Метаданные().Имя);
		
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.Номер = Ссылка.Номер;
		НоваяСтрока.Дата = Ссылка.Дата;
		
	ИначеЕсли  БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		
		НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
		НоваяСтрока.ТипОбъект = "БизнесПроцесс";
		НоваяСтрока.НаименованиеОбъекта = Строка(Ссылка.Метаданные().Имя);
		
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.Номер = Ссылка.Номер;
		НоваяСтрока.Дата = Ссылка.Дата;
	
		
	ИначеЕсли  СтрНайти(Ссылка.Метаданные().ПолноеИмя(), "РегистрСвед") > 0 Тогда
		
		Тип = ТипЗнч(Ссылка);
		
		НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
		
		ТЗРеквизиты = СоздатьТЗРевизитов();
			
		НоваяСтрока.ТипОбъект = "Регистр";
		НоваяСтрока.НаименованиеОбъекта = Строка(Ссылка.Метаданные().Имя);
			
		Для Каждого СтрокаНабора Из Ссылка Цикл 
			
			Для Каждого Измерение Из Метаданные.РегистрыСведений[Ссылка.Метаданные().Имя].СтандартныеРеквизиты  Цикл
				
				НоваяСтрокаТЗРеквизиты = ТЗРеквизиты.Добавить();
				НоваяСтрокаТЗРеквизиты.Наименование = Измерение.Имя;
				НоваяСтрокаТЗРеквизиты.Значение = СтрокаНабора[Измерение.Имя];
				
				Если Измерение.Имя = "Периода" Тогда
					НоваяСтрока.Дата = СтрокаНабора[Измерение.Имя];
				КонецЕсли;	
					
			КонецЦикла;
		
				
			Для Каждого Измерение Из Метаданные.РегистрыСведений[Ссылка.Метаданные().Имя].Измерения  Цикл
				
				НоваяСтрокаТЗРеквизиты = ТЗРеквизиты.Добавить();
				НоваяСтрокаТЗРеквизиты.Наименование = Измерение.Имя;
				НоваяСтрокаТЗРеквизиты.Значение = СтрокаНабора[Измерение.Имя];
				
				НоваяСтрока.Наименование = НоваяСтрока.Наименование + "" + НоваяСтрокаТЗРеквизиты.Значение + "-";
					
			КонецЦикла;
				
			Для Каждого Реквизит Из Метаданные.РегистрыСведений[Ссылка.Метаданные().Имя].Реквизиты Цикл
				
				НоваяСтрокаТЗРеквизиты = ТЗРеквизиты.Добавить();
				НоваяСтрокаТЗРеквизиты.Наименование = Реквизит.Имя;
				НоваяСтрокаТЗРеквизиты.Значение = СтрокаНабора[Реквизит.Имя];
					
			КонецЦикла;	
				
			Для Каждого Ресурс Из Метаданные.РегистрыСведений[Ссылка.Метаданные().Имя].Ресурсы  Цикл
				
				НоваяСтрокаТЗРеквизиты = ТЗРеквизиты.Добавить();
				НоваяСтрокаТЗРеквизиты.Наименование = Ресурс.Имя;
				НоваяСтрокаТЗРеквизиты.Значение = СтрокаНабора[Ресурс.Имя];
				
			КонецЦикла;	
				
		КонецЦикла;
		
		НоваяСтрока.СтруктураРеквизитов = ТЗРеквизиты;
			
	КонецЕсли;	
		
КонецФункции

Функция СоздатьОписаниеОбъекта();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Свойство");
	ТЗ.Колонки.Добавить("Значение");
	ТЗ.Колонки.Добавить("Тип");
	ТЗ.Колонки.Добавить("Состав");
	Возврат ТЗ;
	
КонецФункции	

Функция ОбработатьХранилищеОбъектовСравнения(ТЗ, ДоПосле = "")
	
	Если ВывестиДерево Или ЗапускатьСтаруюВерсию Тогда
		
		Дерево = СформироватьДерево(ТЗ);

		
		ТабДокумент = Новый ТабличныйДокумент;		
		
		Дерево(Дерево, 0, ТабДокумент);
		
		ТабДокумент.Показать(ДоПосле); 
		
	КонецЕсли;
	
	Если ВыводитьИзмененныеОбъекты Тогда
		
		ТабДокументОбъекты = Новый ТабличныйДокумент;	
		
		Макет = ПолучитьМакет("ИзмененныеОбъекты");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ТабДокументОбъекты.Вывести(ОбластьШапка);
		
		Для Каждого Строка Из  ТЗ Цикл 
			
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, Строка);
			ТабДокументОбъекты.Вывести(ОбластьСтрока);
			
		КонецЦикла;	
		
		ТабДокументОбъекты.Показать(ДоПосле); 
		
	КонецЕсли;	
	
	Возврат ТабДокумент;
	
КонецФункции

Функция СформироватьДерево(ТЗ)
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Свойство");
	Дерево.Колонки.Добавить("Значение");
	Дерево.Колонки.Добавить("Тип");
	Дерево.Колонки.Добавить("Счетчик");
	
	Для Каждого СтрокаХранилищеОбъектовСравнения Из ТЗ Цикл
		
		НоваяСтрокаДерева = Дерево.Строки.Добавить();
		
		Если  СтрокаХранилищеОбъектовСравнения.ТипОбъект <> "Регистр" Тогда
					
			Сч = 0;
			ОбработатьОбъект(СтрокаХранилищеОбъектовСравнения.НаименованиеОбъекта, СтрокаХранилищеОбъектовСравнения.Ссылка, НоваяСтрокаДерева, Сч);
			
		ИначеЕсли 	 СтрокаХранилищеОбъектовСравнения.ТипОбъект = "Регистр" Тогда
			
			Сч = 0;
			ОбработатьОбъект(СтрокаХранилищеОбъектовСравнения.НаименованиеОбъекта, СтрокаХранилищеОбъектовСравнения, НоваяСтрокаДерева, Сч, Ложь, Неопределено, Истина);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Дерево;

КонецФункции	

Процедура Дерево(МП,Уровень=0, ТабДокумент)
	
		
	Макет = ЭтотОбъект.ПолучитьМакет("Макет");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если Уровень > 0 Тогда
		ТабДокумент.НачатьГруппуСтрок(, Истина);
	КонецЕсли;	
	
	//Обходим строки текущего уровня дерева
	Для Каждого СтрДерева Из мп.Строки Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрДерева);
		ТабДокумент.Вывести(ОбластьСтрока, Уровень);
		
		Дерево(СтрДерева,Уровень+1, ТабДокумент);
		
	КонецЦикла;
	
	Если Уровень > 0 Тогда
		ТабДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;	
		 
КонецПроцедуры

Функция ОбработатьОбъект(ИмяРеквизита, Ссылка, СтрокаДерева, Счетчик, ЭтоТЧ = Ложь, СтрокаТЧ = Неопределено, ЭтоРегистр = Ложь) 
	
	Тип = ТипЗнч(Ссылка);
		
	Если  Ссылка <> Неопределено И
		(Справочники.ТипВсеСсылки().СодержитТип(Тип) Или
		Документы.ТипВсеСсылки().СодержитТип(Тип) Или
		БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Или
		ЭтоТЧ) Тогда
		
				
		СтрокаДерева.Свойство = ИмяРеквизита;
		СтрокаДерева.Счетчик = Счетчик; 
		
		Если Не ЭтоТЧ Тогда
			
			СтрокаДерева.Значение = Строка(Ссылка);   
			СтрокаДерева.Тип = Ссылка.Метаданные().ПолноеИмя();
			
		Иначе
			
			СтрокаДерева.Тип = "ТабличнаяЧасть"
			
			
		КонецЕсли;	
		
		Если Не ЭтоТЧ Тогда
			
			Для Каждого Ревизит Из Ссылка.Метаданные().СтандартныеРеквизиты Цикл  
				
				Если Ревизит.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли;
				Счетчик = Счетчик + 1;
				
				Если Счетчик > УровеньВложенности Тогда
					
				Иначе 
					ОбработатьОбъект(Ревизит.Имя, Ссылка[Ревизит.Имя], СтрокаДерева.Строки.Добавить(), Счетчик);	
				КонецЕсли;
				
				Счетчик = Счетчик - 1;
				
				
			КонецЦикла;
			
			Для Каждого Ревизит Из Ссылка.Метаданные().Реквизиты Цикл  
				
				Если Ревизит.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
				Если Счетчик > УровеньВложенности Тогда
					
				Иначе 
					ОбработатьОбъект(Ревизит.Имя, Ссылка[Ревизит.Имя], СтрокаДерева.Строки.Добавить(), Счетчик);	
				КонецЕсли;
				
				Счетчик = Счетчик - 1;
				
				
			КонецЦикла;
			
			Для Каждого Ревизит Из Ссылка.Метаданные().ТабличныеЧасти  Цикл 
				
				Для Каждого  СтрокаТЧ Из  Ссылка[Ревизит.Имя] Цикл
					
					Счетчик = Счетчик + 1;
					
					Если Счетчик > УровеньВложенности Тогда
						
					Иначе 
						ОбработатьОбъект(Ревизит, Ревизит, СтрокаДерева.Строки.Добавить(), Счетчик, Истина, СтрокаТЧ);	
					КонецЕсли;
					
					Счетчик = Счетчик - 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого Ревизит Из Ссылка.СтандартныеРеквизиты Цикл  
				
				Если Ревизит.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
				Если Счетчик > УровеньВложенности + 1 Тогда
					
				Иначе 
					ОбработатьОбъект(Ревизит.Имя, СтрокаТЧ[Ревизит.Имя], СтрокаДерева.Строки.Добавить(), Счетчик);	
				КонецЕсли;
				
				Счетчик = Счетчик - 1;
				
			КонецЦикла;

						
			Для Каждого Ревизит Из Ссылка.Реквизиты Цикл  
				
				Если Ревизит.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
				Если Счетчик > УровеньВложенности + 1 Тогда
					
				Иначе 
					ОбработатьОбъект(Ревизит.Имя, СтрокаТЧ[Ревизит.Имя], СтрокаДерева.Строки.Добавить(), Счетчик);	
				КонецЕсли;
				
				Счетчик = Счетчик - 1;
				
			КонецЦикла;
				
		КонецЕсли;	
		
	ИначеЕсли ЭтоРегистр Тогда
		
		СтрокаДерева.Свойство = ИмяРеквизита;
		СтрокаДерева.Счетчик = Счетчик; 
		СтрокаДерева.Тип = "Регистр." + Ссылка.НаименованиеОбъекта; 
		
		Для Каждого Ревизит Из Ссылка.СтруктураРеквизитов Цикл  
			
			Если Ревизит.Наименование = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
			Если Счетчик > УровеньВложенности + 1 Тогда
				
			Иначе 
				ОбработатьОбъект(Ревизит.Наименование, Ревизит.Значение, СтрокаДерева.Строки.Добавить(), Счетчик);	
			КонецЕсли;
			
			Счетчик = Счетчик - 1;
			
		КонецЦикла;
		
	Иначе 	
		
		СтрокаДерева.Свойство = ИмяРеквизита;
		СтрокаДерева.Значение = Строка(Ссылка);
		СтрокаДерева.Тип = Тип; 
		СтрокаДерева.Счетчик = Счетчик; 
		
	КонецЕсли;
	
КонецФункции	

Функция ВернутьВерсиюОбработки() Экспорт 
	
	Возврат ЗагрузкаИзИнтернетМагазина.ВернутьВерсиюОбработки();
	
КонецФункции	
//--- БАО 27.06.2017 №926

Процедура ВывестиСообщение(ТекстСообщения, Поток = 0, Прогресс = -1) Экспорт 
	
	#Если Клиент Тогда
		
		Если ФормаСообщений = Неопределено Тогда
			
			
			ФормаСообщений = ПолучитьФорму("ФормаНастройкиОбычная");
			ФормаСообщений["Поток" + 0] = "";
			
			Для НомерПотока = 1 По  8 Цикл 
				
				ФормаСообщений.ЭлементыФормы["Поток" + НомерПотока].Видимость = Ложь;
				ФормаСообщений.ЭлементыФормы["НадписьПоток" + НомерПотока].Видимость = Ложь;
				ФормаСообщений.ЭлементыФормы["Индикатор" + НомерПотока].Видимость = Ложь;
				
				ФормаСообщений["Поток" + НомерПотока] = "";
				ФормаСообщений["Индикатор" + НомерПотока] = 0;
				
				ФормаСообщений.ЭлементыФормы["Поток" + НомерПотока].ЦветФонаПоля =  ЦветаСтиля.ЦветФонаПоля;
				
			КонецЦикла;	
			
			ФормаСообщений.ЭлементыФормы.КоманднаяПанель1.Кнопки.ПолучитьОбщийЛог.Доступность = Ложь;
			
			ФормаСообщений.Открыть();
			
		ИначеЕсли Не ФормаСообщений.Открыта() Тогда	
			
			ФормаСообщений.Открыть();
			
		КонецЕсли;	
		
		Если Прогресс <> -1 И Прогресс <> Неопределено Тогда
			Попытка
				Число =  Число(Прогресс);
				ФормаСообщений["Индикатор" + Поток] = Число;
			Исключение
			КонецПопытки;	
		ИначеЕсли Поток = -1 Тогда
		ИначеЕсли Поток = 0 Тогда
			ФормаСообщений.Поток0 = ТекстСообщения  + Символы.ПС + ФормаСообщений.Поток0;
		Иначе
			ФормаСообщений["Поток" + Поток] = ТекстСообщения + Символы.ПС + ФормаСообщений["Поток" + Поток];
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры // ВывестиСообщение()

//+Степанов Задача № 3527
Функция ТекстЗапросаСКоординатами()
	//+Степанов Задача № 3925 Добавлено поле identifier 
	//ТекстЗапроса = "SELECT
	//|O.senderId                             AS SenderId,
	//|OL.orderId                             AS orderId,
	//|OL.modifyDate						   AS modifyDate,
	//|O.createDate                           AS createDate,
	//|O.status                               AS status,
	//|O.pay_type                             AS pay_type,
	//|ISNULL(O.createWay, 0)                            AS createWay,
	//|ISNULL(O.stockId, 0)                            AS stockId,
	//|ISNULL(ST.stockName, 0)               AS stockName,
	//|ISNULL(ST.phoneNumber, '')             AS stockPhoneNumber,
	//|ISNULL(ST.address, '')                 AS stockAddress,
	//|ISNULL(ST.stockIdImport, 0)           AS stockIdImport,			
	//|ISNULL(O.selfDelivery, 0)              AS selfDelivery,
	//|ISNULL(O.serviceDelivery, 0)           AS serviceDelivery,
	//|ISNULL(ISNULL(O.deliverydate, O.completeDate), O.createDate) AS completeDate,
	//|O.comment                              AS comment,
	//|ISNULL(O.deliveryPriceRUR, 0)          AS deliveryPrice,
	//|ISNULL(O.deliveryForMkadRUR, 0)        AS deliveryForMkadRUR,
	//|O.deliveryDate                         AS deliveryDate,
	//|ISNULL(O.timeDeliveryFrom, '9' )       AS timeDeliveryFrom,
	//|ISNULL(O.timeDeliveryTo,   '19')       AS timeDeliveryTo,
	//|U.UserId         AS UserId,
	//|U.firstName + ' ' + U.middleName + ' ' + U.lastName AS Name,
	//|U.comment   AS userComment,
	//|U.Email     AS Email,
	//|ISNULL(O.serviceDC, 0)				   AS serviceDC,
	//|ISNULL(O.ReasonRrefusal, '')		   AS ReasonRrefusal, 
	//|ISNULL(O.ReasonRrefusalID,0)           AS ReasonRefusalID,			
	//|[dbo].[fn_getUserAddrByOrderId41C] (O.orderId) AS Addr,
	//|mvo.fulladdress	AS AddrFull,
	//|mvo.cashService	AS cashService,
	//|mvo.addrComment	AS addrComment,
	//|mvo.Beznal	AS Beznal,
	//|mvo.LiftingIsPayed  AS LiftingIsPayed,
	//|mvo.orderIDAdditional  AS orderIDAdditional,
	//|mvo.AgentComission AS AgentComission,
	//|ISNULL(mvo.Insurance,0) AS Insurance,
	//|mvo.BankKom AS BankKom,
	//|ISNULL(S.internetShopID, 0) AS shop,
	//|ISNULL(S.shopJurFace, '') AS shopJurFace,
	//|ISNULL(S.textReceipt, '') AS textReceipt,
	//|ISNULL(S.receiverID, '') AS receiverID,
	//|ISNULL(S.shopTitle, '') AS shopTitle,
	//|ISNULL(S.shopPhone, '') AS shopPhone,
	//|sh.name AS shopName,
	//|o.ispayed AS ispayed,
	//|o.PiecesOfFreight AS PiecesOfFreight,
	//|CI.carNumber AS carNumber,
	//|RBS.amount AS SumByCard,
	//|ISNULL(o.tariffType,1) AS tariffType,
	//|ISNULL(o.tariffCategoryId,1) AS tariffCategoryId,
	//|ISNULL(o.tariffID,1) AS tariffID,
	//|ISNULL(s2.InternetShopID, -1) AS ParentID,
	//|ISNULL(mvo.returnRefusalOrders, 0) As returnRefusalOrders,
	//|ISNULL(mvo.orderVolume, 0) As orderVolume,
	//|ISNULL(mvo.shipmentWHDate, '') As shipmentWHDate,
	//|ISNULL(mvo.sourcePlaceId, 1) As sourcePlaceId,
	//|ISNULL(mvo.deliveryPlaceId, 1) As deliveryPlaceId,
	//|O.orderIDImport						   AS orderIDImport,
	//|O.typeDelivery						   AS typeDelivery,
	//|O.orderWeight						   AS orderWeight,
	//|ISNULL(O.serviceDCclean, 0)						   AS serviceDCclean,
	//|ISNULL(O.NDSDelivery, -2)			   AS NDSDelivery ,
	//|O.manager							   AS manager,
	//|mvo.assessedCost							   AS assessedCost,
	//|mvo.total							   AS total,
	//|ISNULL(mvo.isPartialGiveoutDisabled,0) AS isPartialGiveoutDisabled,
	//|U.userTel							   AS Telephone,
	//|ISNULL(STO.serviceID,0)					AS serviceID
	//|, ISNULL(mvo.tariff_Rise, -1) AS tariff_Rise
	//|,  ISNULL(mvo.who_pay_rise, -1)  AS who_pay_rise
	//|,ADR.lat latitude
	//|,ADR.lng longitude
	//|FROM
	//|#orderList   OL (NOLOCK)
	//|INNER JOIN
	//|_order       O (NOLOCK) ON O.orderId = OL.orderId
	//|LEFT JOIN
	//|ts_stock 		   ST (NOLOCK) ON  O.stockId = ST.stockId
	//|INNER JOIN
	//|_user        U (NOLOCK) ON O.userID = U.UserId
	//|INNER JOIN
	//|	mv_orders        mvo (NOLOCK) ON O.orderid = mvo.orderid			
	//|INNER JOIN
	//|settings     S (NOLOCK) ON S.shopId = O.SettingID
	//|left JOIN
	//|	settings     S2 (NOLOCK) ON S2.shopId = S.ParentID			
	//|INNER JOIN
	//|	_InternetShops SH (NOLOCK) ON SH.internetShopID = S.internetShopID
	//|LEFT JOIN
	//|	_car       CI (NOLOCK) ON O.carId = CI.carId
	//|LEFT JOIN
	//|	_orderRBS       RBS (NOLOCK) ON O.orderId = RBS.orderId
	//|LEFT JOIN
	//|	ts_serviceToOrder STO (NOLOCK) ON O.orderId = STO.orderId AND STO.serviceID = 8
	//|LEFT JOIN 
	//|    _userAddress ADR (NOLOCK) ON O.userAddressID = ADR.id
	//|ORDER BY
	//|	OL.modifyDate ASC,
	//|	OL.orderId ASC";
	ТекстЗапроса = "SELECT
	//Асеев 29.09.2021 (Задача № 4667)>>>
	|ISNULL(O.pickupPointID, 0)       AS pickupPointID,
	|pnt.externalId AS pnt_externalId,
	|pnt.name AS pnt_name,
	|pnt.address AS pnt_address,
	|pnt_stgs.internetShopID AS pnt_shopId,
	//Асеев 29.09.2021 (Задача № 4667)<<<
	//Асеев 25.10.2021 (Задача № 4695)>>>
	|ISNULL(O.deliveryServiceLevel, 0)       AS deliveryServiceLevel,
	//Асеев 25.10.2021 (Задача № 4695)<<<
	//+Широков Задача 4323 29.10.2020
	|ISNULL(O.deliveryCostCalculationTariffId, 0)       AS DeliveryCostCalculationTariffId, 
	//-Широков Задача 4323 29.10.2020
	//Асеев 13.12.2022 (Задача № 4949)>>>
	|O.shipmentDate AS shipmentDate,
	//Асеев 13.12.2022 (Задача № 4949)<<<
	//+Широков Задача 4401 13.01.2021
	|ISNULL(O.PrepaymentAmount, 0)       AS PrepaymentAmount, 
	//-Широков Задача 4401 13.01.2021
	
	//+Широков Задача 4461 13.01.2021
	|ISNULL(O.oversizedGoods, 0)       AS oversizedGoods, 
	//-Широков Задача 4461 13.01.2021
	
	//+Широков Задача 4521 02.04.2021
	|ISNULL(SR.internetShopID, 0)       AS routingOperator,
	//-Широков Задача 4521 02.04.2021
	
	//+Широков Задача 4531 02.04.2021
	|ISNULL(O.agregatorId  , 0)       AS agregatorId,
	//-Широков Задача 4531 02.04.2021
	//+Широков Задача 4565 19.05.2021
	//|ISNULL(O.calcByVolumetricWeight  , 0)       AS calcByVolumetricWeight,
	//|ISNULL(O.chargeableVolumetricWeight  , 0)       AS chargeableVolumetricWeight,
	|O.calcByVolumetricWeight       AS calcByVolumetricWeight,
	|O.chargeableVolumetricWeight       AS chargeableVolumetricWeight,
	//-Широков Задача 4565 19.05.2021
	
	|O.senderId                             AS SenderId,
	|OL.orderId                             AS orderId,
	|OL.modifyDate						   AS modifyDate,
	|O.createDate                           AS createDate,
	|O.status                               AS status,
	|O.pay_type                             AS pay_type,
	|ISNULL(O.createWay, 0)                            AS createWay,
	|ISNULL(O.stockId, 0)                            AS stockId,
	|ISNULL(ST.stockName, 0)               AS stockName,
	|ISNULL(ST.phoneNumber, '')             AS stockPhoneNumber,
	|ISNULL(ST.address, '')                 AS stockAddress,
	|ISNULL(ST.stockIdImport, 0)           AS stockIdImport,
	//Асеев 17.05.2022 (Задача № 4805)>>>
	|ISNULL(ST.terminalId, 0)           AS stockterminalId,
	//Асеев 17.05.2022 (Задача № 4805)<<<
	//Асеев 31.10.2023 (Задача № 5157)>>>
	|ISNULL(OCarg.returnToSender, 0)           AS returnToSender,
	//Асеев 31.10.2023 (Задача № 5157)<<<
	|ISNULL(O.selfDelivery, 0)              AS selfDelivery,
	|ISNULL(O.serviceDelivery, 0)           AS serviceDelivery,
	|ISNULL(ISNULL(O.deliverydate, O.completeDate), O.createDate) AS completeDate,
	|O.comment                              AS comment,
	|ISNULL(O.deliveryPriceRUR, 0)          AS deliveryPrice,
	|ISNULL(O.deliveryForMkadRUR, 0)        AS deliveryForMkadRUR,
	|O.deliveryDate                         AS deliveryDate,
	|ISNULL(O.timeDeliveryFrom, '9' )       AS timeDeliveryFrom,
	|ISNULL(O.timeDeliveryTo,   '19')       AS timeDeliveryTo,
	|U.UserId         AS UserId,
	|U.firstName + ' ' + U.middleName + ' ' + U.lastName AS Name,
	|U.comment   AS userComment,
	|U.Email     AS Email,
	|ISNULL(O.serviceDC, 0)				   AS serviceDC,
	|ISNULL(O.ReasonRrefusal, '')		   AS ReasonRrefusal, 
	|ISNULL(O.ReasonRrefusalID,0)           AS ReasonRefusalID,			
	|[dbo].[fn_getUserAddrByOrderId41C] (O.orderId) AS Addr,
	|mvo.fulladdress	AS AddrFull,
	|mvo.cashService	AS cashService,
	|mvo.addrComment	AS addrComment,
	|mvo.Beznal	AS Beznal,
	|mvo.LiftingIsPayed  AS LiftingIsPayed,
	|mvo.orderIDAdditional  AS orderIDAdditional,
	|mvo.AgentComission AS AgentComission,
	|ISNULL(mvo.Insurance,0) AS Insurance,
	|mvo.BankKom AS BankKom,
	|ISNULL(S.internetShopID, 0) AS shop,
	|ISNULL(S.shopJurFace, '') AS shopJurFace,
	|ISNULL(S.textReceipt, '') AS textReceipt,
	|ISNULL(S.receiverID, '') AS receiverID,
	|ISNULL(S.shopTitle, '') AS shopTitle,
	|ISNULL(S.shopPhone, '') AS shopPhone,
	|sh.name AS shopName,
	|o.ispayed AS ispayed,
	|o.PiecesOfFreight AS PiecesOfFreight,
	|CI.carNumber AS carNumber,
	|RBS.amount AS SumByCard,
	|ISNULL(o.tariffType,1) AS tariffType,
	|ISNULL(o.tariffCategoryId,1) AS tariffCategoryId,
	|ISNULL(o.tariffID,1) AS tariffID,
	|ISNULL(s2.InternetShopID, -1) AS ParentID,
	|ISNULL(mvo.returnRefusalOrders, 0) As returnRefusalOrders,
	|ISNULL(mvo.orderVolume, 0) As orderVolume,
	|ISNULL(mvo.shipmentWHDate, '') As shipmentWHDate,
	|ISNULL(mvo.sourcePlaceId, 1) As sourcePlaceId,
	|ISNULL(mvo.deliveryPlaceId, 1) As deliveryPlaceId,
	|O.orderIDImport						   AS orderIDImport,
	|O.typeDelivery						   AS typeDelivery,
	|O.orderWeight						   AS orderWeight,
	|ISNULL(O.serviceDCclean, 0)						   AS serviceDCclean,
	|ISNULL(O.NDSDelivery, -2)			   AS NDSDelivery ,
	|O.manager							   AS manager,
	|mvo.assessedCost							   AS assessedCost,
	|mvo.total							   AS total,
	|ISNULL(mvo.isPartialGiveoutDisabled,0) AS isPartialGiveoutDisabled,
	|U.userTel							   AS Telephone,
	|ISNULL(STO.serviceID,0)					AS serviceID
	//Геннадий #4511 30.03.2021 ->
	|, ISNULL(STOdoc.serviceID,0)					AS serviceIDdoc
	//Геннадий <-
	|, ISNULL(mvo.tariff_Rise, -1) AS tariff_Rise
	|,  ISNULL(mvo.who_pay_rise, -1)  AS who_pay_rise
	|,ADR.lat latitude
	|,ADR.lng longitude
	|,O.identifier identifier
	|FROM
	|#orderList   OL (NOLOCK)
	|INNER JOIN
	|_order       O (NOLOCK) ON O.orderId = OL.orderId
	|LEFT JOIN
	|ts_stock 		   ST (NOLOCK) ON  O.stockId = ST.stockId
	|INNER JOIN
	|_user        U (NOLOCK) ON O.userID = U.UserId
	|INNER JOIN
	|	mv_orders        mvo (NOLOCK) ON O.orderid = mvo.orderid			
	|INNER JOIN
	|settings     S (NOLOCK) ON S.shopId = O.SettingID
	
	//+Широков Задача 4521 02.04.2021
	|LEFT JOIN
	|	settings     SR (NOLOCK) ON SR.shopId = O.routingOperatorID			
	//-Широков Задача 4521 02.04.2021
	
	//Асеев 29.09.2021 (Задача № 4667)>>>
	|LEFT JOIN
	|	pickuppoint	pnt (NOLOCK) on O.pickupPointID = pnt.id
	|LEFT JOIN
	|	settings pnt_stgs (NOLOCK) on pnt.settingId = pnt_stgs.shopId
	//Асеев 29.09.2021 (Задача № 4667)<<<
	
	|left JOIN
	|	settings     S2 (NOLOCK) ON S2.shopId = S.ParentID			
	|INNER JOIN
	|	_InternetShops SH (NOLOCK) ON SH.internetShopID = S.internetShopID
	|LEFT JOIN
	|	_car       CI (NOLOCK) ON O.carId = CI.carId
	|LEFT JOIN
	|	_orderRBS       RBS (NOLOCK) ON O.orderId = RBS.orderId
	|LEFT JOIN
	//Геннадий #4511 29.03.2021 ->
	|	ts_serviceToOrder STO (NOLOCK) ON O.orderId = STO.orderId AND STO.serviceID = 8
	|LEFT JOIN
	|	ts_serviceToOrder STOdoc (NOLOCK) ON O.orderId = STOdoc.orderId AND STOdoc.serviceID = 24 AND STOdoc.count > 0	
	//Геннадий <-
	|LEFT JOIN 
	|    _userAddress ADR (NOLOCK) ON O.userAddressID = ADR.id
	//Асеев 31.10.2023 (Задача № 5157)>>>
	|LEFT JOIN 
	|     _orderCargo OCarg (NOLOCK) ON O.orderId = OCarg.orderId
	//Асеев 31.10.2023 (Задача № 5157)<<<
	|ORDER BY
	|	OL.modifyDate ASC,
	|	OL.orderId ASC";
	Возврат ТекстЗапроса
КонецФункции	
//-Степанов Задача № 3527

Процедура ЗагрузитьПоставщиков() Экспорт
	ЕстьОшибки = Ложь;
	ДатаЗагрузки = ДатаИз1С(ТекущаяДата(), Ложь);
	//ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыРегламентныхЗаданий.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ПараметрыРегламентныхЗаданий КАК ПараметрыРегламентныхЗаданий
	               |ГДЕ
	               |	ПараметрыРегламентныхЗаданий.Ключ = ""ДатаПоследнейЗагрузкиПоставщиковТоваров""";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаЗапроса = Выборка.Значение;
	Иначе	
		ДатаЗапроса = ДатаИз1С(НачалоГода(ТекущаяДата()), Ложь);
	КонецЕсли;	
	
	ТекстЗапроса = "select Id,inn,name,modifyDate,phoneNumber
	|from tb_goodsSeller
	|where modifyDate >= '#modifyDate'";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#modifyDate", ДатаЗапроса);
	RS = Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину); 
	ТаблицаПоставщиков = Новый ТаблицаЗначений;
	ТаблицаПоставщиков.Колонки.Добавить("ИдентификаторВАдминке", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(11, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПоставщиков.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаПоставщиков.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(12, ДопустимаяДлина.Переменная)));
	ТаблицаПоставщиков.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = ТаблицаПоставщиков.Добавить();
		НоваяСтрока.ИдентификаторВАдминке = RS.Fields("Id").Value;
		НоваяСтрока.Наименование = RS.Fields("name").Value;
		НоваяСтрока.ИНН = RS.Fields("inn").Value;
		НоваяСтрока.Телефон = RS.Fields("phoneNumber").Value;
		Rs.MoveNext()	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗДанныхИзАдминки.Наименование КАК Наименование,
	               |	ТЗДанныхИзАдминки.ИНН КАК ИНН,
	               |	ТЗДанныхИзАдминки.Телефон КАК Телефон,
	               |	ТЗДанныхИзАдминки.ИдентификаторВАдминке КАК ИдентификаторВАдминке
	               |ПОМЕСТИТЬ втДанныеИзАдминки
	               |ИЗ
	               |	&ТЗДанныхИзАдминки КАК ТЗДанныхИзАдминки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втДанныеИзАдминки.Наименование КАК Наименование,
	               |	втДанныеИзАдминки.ИНН КАК ИНН,
	               |	втДанныеИзАдминки.Телефон КАК Телефон,
	               |	втДанныеИзАдминки.ИдентификаторВАдминке КАК ИдентификаторВАдминке,
	               |	ПоставщикиТоваров.Ссылка КАК НайденныйПоставщик
	               |ИЗ
	               |	втДанныеИзАдминки КАК втДанныеИзАдминки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоставщикиТоваров КАК ПоставщикиТоваров
	               |		ПО втДанныеИзАдминки.ИдентификаторВАдминке = ПоставщикиТоваров.ИдентификаторВАдминке";
	Запрос.УстановитьПараметр("ТЗДанныхИзАдминки", ТаблицаПоставщиков);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		флНовый = Истина;
		Если Выборка.НайденныйПоставщик = Null Тогда
			ПоставщикОбъект = Справочники.ПоставщикиТоваров.СоздатьЭлемент();
		Иначе
			ПоставщикОбъект = Выборка.НайденныйПоставщик.ПолучитьОбъект();
			флНовый = Ложь;
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(ПоставщикОбъект, Выборка);
		Попытка
			ПоставщикОбъект.Записать();
			Лог("   " + ?(флНовый, "+++ Записан новый", "*** Обновлен") + " поставщик: "+ Выборка.Наименование + " (код сайта: " + СокрЛП(Строка(Выборка.ИдентификаторВАдминке)) + ")");
		Исключение
			НормальныйХодВыполнения = Ложь;
			ЕстьОшибки = Истина;
			Лог("!!!Ошибка " + ?(флНовый, "записи нового", "обновления") + " поставщика: " + Выборка.Наименование + " (код сайта: " + СокрЛП(Строка(Выборка.ИдентификаторВАдминке)) + ")" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;	
	КонецЦикла;	

	
	
	Если Не ЕстьОшибки Тогда
		НаборЗаписей = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ключ.Установить("ДатаПоследнейЗагрузкиПоставщиковТоваров");
		Запись = НаборЗаписей.Добавить();
		Запись.Значение = ДатаЗагрузки;
		Запись.Ключ = "ДатаПоследнейЗагрузкиПоставщиковТоваров";
		НаборЗаписей.Записать();
	КонецЕсли;	
КонецПроцедуры	


ФлагУдаленияОткрытыхЗаказов = Ложь;
СписокОткрытыхЗаказов = Неопределено;
Руб                = Справочники.Валюты.НайтиПоНаименованию("руб.");
Орг                = Справочники.Организации.НайтиПоКоду("000000001");
ГрТов              = Справочники.Номенклатура.НайтиПоКоду("00000000002");
ВидНоменклатурыПер = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001");
ШтукиПер           = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");      // шт.
ВидНоменклатурыПер = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001"); // Товар
РодТД              = Справочники.Контрагенты.НайтиПоКоду("Shop_222");
ДостПер            = Справочники.Номенклатура.НайтиПоКоду("У1");
КомитентПер        = Справочники.Контрагенты.НайтиПоКоду("000000004");
РодКонтр           = Справочники.Контрагенты.НайтиПоКоду("000000003");


//+++ БАО 22.05.2017 №874 
//глМасДог = Новый Массив;
//глМасДог.Добавить(Справочники.Контрагенты.НайтиПоКоду("Shop_234 "));
//глМасДог.Добавить(Справочники.Контрагенты.НайтиПоКоду("Shop_391 "));
глМасДог = baoВызовСервера.ПолучитьМассивДоговорников();
//--- БАО 22.05.2017 №874 

//+++ БАО 31.05.2017 №926
ИМ_TopDelivery = Справочники.Контрагенты.НайтиПоНаименованию("ИМ TopDelivery", Истина);
Если ИМ_TopDelivery.Пустая() Тогда
	НовГр = Справочники.Контрагенты.СоздатьГруппу();
	НовГр.Родитель = КомитентПер;
	НовГр.Наименование = "ИМ TopDelivery";
	НовГр.Записать();
	ИМ_TopDelivery = НовГр.Ссылка;
КонецеСли;

Код_ИМ_TopDelivery = ИМ_TopDelivery.Код; 

//--- БАО 31.05.2017 №926

//+++ БАО 01.06.2017 №926

КонтрагентМагазин_Shop_248 = Справочники.Контрагенты.НайтиПоКоду("Shop_248");
КонтрагентМагазин_Shop_601 = Справочники.Контрагенты.НайтиПоКоду("Shop_601");
КонтрагентМагазин_Shop_752 = Справочники.Контрагенты.НайтиПоКоду("Shop_752");
КачествоНовый = Справочники.Качество.Новый;
Shop_602 = Справочники.Контрагенты.НайтиПоКоду("Shop_602");

Если НЕ ПараметрыСеанса.ЭтоТестоваяСреда Тогда
	Shop_612 = Справочники.Контрагенты.НайтиПоКоду("Shop_612");
Иначе
	// Якурнов 10.10.2018 14:28:37
	Shop_612 = Справочники.Контрагенты.НайтиПоКоду("Shop_179");
КонецЕсли;

РегиональныеТерминалы_СПбСтриж =  Справочники.РегиональныеТерминалы.СПбСтриж;
//--- БАО 01.06.2017 №926

//+++ БАО 02.06.2017 №926
ПучокДокументовОбщий = Новый Массив;
//--- БАО 02.06.2017 №926

СоздатьТЗОбъетов();

