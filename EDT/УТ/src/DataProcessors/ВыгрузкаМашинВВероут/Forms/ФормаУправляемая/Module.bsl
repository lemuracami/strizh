#Область Транспорт

//&НаСервере
&НаКлиенте
Процедура ВыгрузитьМашиныНаСервере()
	ИДСессии = ПолучитьСессию();
	СоздатьТранспорт(ИДСессии);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМашины(Команда)
	ВыгрузитьМашиныНаСервере();
КонецПроцедуры

//&НаСервере
&НаКлиенте
Функция СоздатьТранспорт(ИДСессии)
	Мас = Новый Массив;
	
	Тип_apiRequest = ФабрикаXDTO.Тип("http://veeroute.com", "apiRequest");
	apiRequest = ФабрикаXDTO.Создать(Тип_apiRequest);
	
	Тип_vehiclesDetails = ФабрикаXDTO.Тип("http://veeroute.com", "vehiclesDetails");
	vehiclesDetails = ФабрикаXDTO.Создать(Тип_vehiclesDetails);
	
	Тип_arrayOfVehicle = ФабрикаXDTO.Тип("http://veeroute.com", "arrayOfVehicle");
	arrayOfVehicle = ФабрикаXDTO.Создать(Тип_arrayOfVehicle);
	
	Тип_vehicle = ФабрикаXDTO.Тип("http://veeroute.com", "vehicle");
	Тип_homeLocation = ФабрикаXDTO.Тип("http://veeroute.com", "homeLocation");
	Тип_ArrayvehicleRequirements = ФабрикаXDTO.Тип("http://veeroute.com", "ArrayvehicleRequirements");
	Тип_vehicleRequirement = ФабрикаXDTO.Тип("http://veeroute.com", "vehicleRequirement");
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВыборкаФлагаДоступности.Транспорт КАК Транспорт,
	//	|	ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК Водитель,
	//	|	"" "" КАК Х,
	//	|	ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)) КАК Экспедитор,
	//	|	"" "" КАК Э,
	//	|	ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК СтарыйВодитель,
	//	|	ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)) КАК СтарыйЭкспедитор,
	//	|	ЕСТЬNULL(ВозможныеРейсы.НачалоПериода, &НачалоРейсаПоДефолту) КАК НачалоПериода
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		ДоступностьТранспорта.Транспорт КАК Транспорт,
	//	|		МАКСИМУМ(ДоступностьТранспорта.НачалоПериода) КАК НачалоПериода
	//	|	ИЗ
	//	|		РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	//	|	ГДЕ
	//	|		ДоступностьТранспорта.НачалоПериода <= &ДатаРедактирования
	//	|	
	//	|	СГРУППИРОВАТЬ ПО
	//	|		ДоступностьТранспорта.Транспорт) КАК ВыборкаФлагаДоступности
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	//	|		ПО ВыборкаФлагаДоступности.Транспорт = ДоступностьТранспорта.Транспорт
	//	|			И ВыборкаФлагаДоступности.НачалоПериода = ДоступностьТранспорта.НачалоПериода
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	//	|		ПО (ВозможныеРейсы.Транспорт = ВыборкаФлагаДоступности.Транспорт)
	//	|			И (ВозможныеРейсы.НачалоПериода >= &ДатаРедактирования)
	//	|			И (ВозможныеРейсы.КонецПериода <= КОНЕЦПЕРИОДА(&ДатаРедактирования, ДЕНЬ))
	//	|ГДЕ
	//	|	ДоступностьТранспорта.Доступен
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ВыборкаФлагаДоступности.Транспорт.Наименование";
	
	//Запрос.УстановитьПараметр("ДатаРедактирования", ВыбраннаяДата);
	//Запрос.УстановитьПараметр("НачалоРейсаПоДефолту", НачалоДня(ВыбраннаяДата) + 7 * 60 * 60);
	//
	//ВыбМ = Запрос.Выполнить().Выгрузить();
	//
	//
	//ВсеМашины = Новый Запрос;
	//ВсеМашины.Текст = "ВЫБРАТЬ
	//                  |	новаТранспорт.Ссылка,
	//                  |	новаТранспорт.ТипТранспорта
	//                  |ИЗ
	//                  |	Справочник.новаТранспорт КАК новаТранспорт
	//                  |ГДЕ
	//                  |	новаТранспорт.ПометкаУдаления = ЛОЖЬ";
	//				  
	//ВыбВсехМашин = ВсеМашины.Выполнить();
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ВыборкаФлагаДоступности.Транспорт КАК Транспорт,
	|   ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК Водитель,
	|   "" "" КАК Х,
	|   ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)) КАК Экспедитор,
	|   "" "" КАК Э,
	|   ЕСТЬNULL(ВозможныеРейсы.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК СтарыйВодитель,
	|   ЕСТЬNULL(ВозможныеРейсы.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)) КАК СтарыйЭкспедитор,
	|   ЕСТЬNULL(ВозможныеРейсы.НачалоПериода, &НачалоРейсаПоДефолту) КАК НачалоПериода
	|ПОМЕСТИТЬ ВТ_ТранспортПоВозможнымРейсам
	|ИЗ
	|   Справочник.новаТранспорт КАК новаТранспорт
	|       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|           ДоступностьТранспорта.Транспорт КАК Транспорт,
	|           МАКСИМУМ(ДоступностьТранспорта.НачалоПериода) КАК НачалоПериода
	|       ИЗ
	|           РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	|       ГДЕ
	|           ДоступностьТранспорта.НачалоПериода <= &ДатаРедактирования
	|       
	|       СГРУППИРОВАТЬ ПО
	|           ДоступностьТранспорта.Транспорт) КАК ВыборкаФлагаДоступности
	|           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	|           ПО ВыборкаФлагаДоступности.Транспорт = ДоступностьТранспорта.Транспорт
	|               И ВыборкаФлагаДоступности.НачалоПериода = ДоступностьТранспорта.НачалоПериода
	|           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|           ПО (ВозможныеРейсы.Транспорт = ВыборкаФлагаДоступности.Транспорт)
	|               И (ВозможныеРейсы.НачалоПериода >= &ДатаРедактирования)
	|               И (ВозможныеРейсы.КонецПериода <= КОНЕЦПЕРИОДА(&ДатаРедактирования, ДЕНЬ))
	|       ПО (ВыборкаФлагаДоступности.Транспорт = новаТранспорт.Ссылка)
	|ГДЕ
	|   ДоступностьТранспорта.Доступен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   новаТранспорт.Ссылка.Наименование КАК name,
	|   ВТ_ТранспортПоВозможнымРейсам.Водитель,
	|   ВТ_ТранспортПоВозможнымРейсам.Экспедитор,
	|   ВЫБОР
	|       КОГДА ВТ_ТранспортПоВозможнымРейсам.Водитель ЕСТЬ NULL 
	|               И ВТ_ТранспортПоВозможнымРейсам.Экспедитор ЕСТЬ NULL 
	|           ТОГДА ИСТИНА
	|       ИНАЧЕ ЛОЖЬ
	|   КОНЕЦ КАК suspended,
	|   ИСТИНА КАК active,
	|   новаТранспорт.ЦенаЗаКилометр КАК costByDistance,
	|   новаТранспорт.Грузоподъемность * 1000 КАК maxWeight,
	|   новаТранспорт.МаксимальнаяСкорость КАК averageSpeed,
	|   ""Склад"" КАК areaOfControl,
	|   новаТранспорт.ОбъемКузова КАК maxVolume,
	|   ВЫБОР
	|       КОГДА ВТ_ТранспортПоВозможнымРейсам.Экспедитор = ЗНАЧЕНИЕ(Справочник.НоваЭкспедиторы.ПустаяСсылка)
	|               ИЛИ ВТ_ТранспортПоВозможнымРейсам.Экспедитор ЕСТЬ NULL 
	|           ТОГДА новаТранспорт.ТипТранспорта
	|       ИНАЧЕ ВЫБОР
	|               КОГДА новаТранспорт.ТипТранспорта.ТипТранспортаПриЭкспедировании = ЗНАЧЕНИЕ(Справочник.ТипыТранспортаДляЛогистики.ПустаяСсылка)
	|                       ИЛИ новаТранспорт.ТипТранспорта.ТипТранспортаПриЭкспедировании ЕСТЬ NULL 
	|                   ТОГДА новаТранспорт.ТипТранспорта
	|               ИНАЧЕ новаТранспорт.ТипТранспорта.ТипТранспортаПриЭкспедировании
	|           КОНЕЦ
	|   КОНЕЦ КАК ТипыТранспортаДляЛогистики,
	|   новаТранспорт.Ссылка,
	|   ""город Москва, Огородный пр-д, 20, стр. 1"" КАК address,
	|   ЕСТЬNULL(новаТранспорт.ТипТранспорта.Цвет, """") КАК color,
	|   ЕСТЬNULL(новаТранспорт.ТипТранспорта.ЗаборныйТранспорт, ЛОЖЬ) КАК ЗаборныйТранспорт
	|ИЗ
	|   Справочник.новаТранспорт КАК новаТранспорт
	|       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТранспортПоВозможнымРейсам КАК ВТ_ТранспортПоВозможнымРейсам
	|       ПО (ВТ_ТранспортПоВозможнымРейсам.Транспорт = новаТранспорт.Ссылка)
	|ГДЕ
	|   НЕ новаТранспорт.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ДатаРедактирования", Объект.Дата);
	Запрос.УстановитьПараметр("НачалоРейсаПоДефолту", НачалоДня(Объект.Дата) + 7 * 60 * 60);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		vehicle = ФабрикаXDTO.Создать(Тип_vehicle);
		ЗаполнитьЗначенияСвойств(vehicle, ВыборкаДетальныеЗаписи);
		
		vehicle.costByDistance = Строка(ВыборкаДетальныеЗаписи.costByDistance);
		vehicle.color = СокрЛП(ВыборкаДетальныеЗаписи.color);
		
		
		ArrayvehicleRequirements = ФабрикаXDTO.Создать(Тип_ArrayvehicleRequirements);
		Если ВыборкаДетальныеЗаписи.ЗаборныйТранспорт Тогда
			vehicleRequirement = ФабрикаXDTO.Создать(Тип_vehicleRequirement);
			vehicleRequirement.name = "Забор";
			vehicleRequirement.abbreviation = "З";
			ArrayvehicleRequirements.vehicleRequirement.Добавить(vehicleRequirement);
		Иначе
			Для каждого Стр Из ВыборкаДетальныеЗаписи.ТипыТранспортаДляЛогистики.ДоступныеКатегорииЗаказов Цикл
				vehicleRequirement = ФабрикаXDTO.Создать(Тип_vehicleRequirement);
				vehicleRequirement.name = Стр.КатегорияДоставки.Наименование;
				vehicleRequirement.abbreviation = Лев(Стр.КатегорияДоставки.Наименование,1)+Прав(Стр.КатегорияДоставки.Наименование,1);
				ArrayvehicleRequirements.vehicleRequirement.Добавить(vehicleRequirement);
			КонецЦикла;
		КонецЕсли;
		
		vehicle.vehicleRequirements = ArrayvehicleRequirements;
		
		arrayOfVehicle.vehicle.Добавить(vehicle);
	КонецЦикла;
	
	
	vehiclesDetails.vehicles = arrayOfVehicle;
	
	apiRequest.sessionID = ИДСессии;
	apiRequest.vehiclesDetails = vehiclesDetails;
	
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, apiRequest);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	
	Ресурс = "distribution-api/objects/importVehicles";
	ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML);
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO")  Тогда
		#Если Клиент Тогда
			Сообщить("Некорректный ответ с сервера при создании транспорта", СтатусСообщения.Важное);
		#КонецеСли
		Возврат Неопределено;
	Иначе
		Попытка
			Ошибка = ПолученныйОбъект.objects.updatedObject.ПолучитьXDTO("errors");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		#Если Клиент Тогда
			Сообщить("Возникла ошибка при создании транспорта", СтатусСообщения.Важное);
		#КонецеСли
	КонецеСли	
КонецФункции	

#КонецОбласти 


#Область Водители

//&НаСервере
&НаКлиенте
Процедура ВыгрузитьВодителейНаСервере()
	ИДСессии = ПолучитьСессию();
	СоздатьВодителей(ИДСессии);
КонецПроцедуры

//&НаСервере
&НаКлиенте
Функция СоздатьВодителей(ИДСессии)
	
	Тип_apiRequest = ФабрикаXDTO.Тип("http://veeroute.com/performer", "apiRequest");
	apiRequest = ФабрикаXDTO.Создать(Тип_apiRequest);
	
	Тип_performersDetails = ФабрикаXDTO.Тип("http://veeroute.com/performer", "performersDetails");
	performersDetails = ФабрикаXDTO.Создать(Тип_performersDetails);
	
	Тип_arrayOfPerformers = ФабрикаXDTO.Тип("http://veeroute.com/performer", "arrayOfPerformers");
	arrayOfPerformers = ФабрикаXDTO.Создать(Тип_arrayOfPerformers);
	
	Тип_performer = ФабрикаXDTO.Тип("http://veeroute.com/performer", "performer");
	Тип_homeLocation = ФабрикаXDTO.Тип("http://veeroute.com/performer", "homeLocation");
	Тип_startLocation = ФабрикаXDTO.Тип("http://veeroute.com/performer", "startLocation");
	Тип_ArrayOfAvailabilities = ФабрикаXDTO.Тип("http://veeroute.com/performer", "ArrayOfAvailabilities");
	Тип_availabilitie = ФабрикаXDTO.Тип("http://veeroute.com/performer", "availabilitie");
	
	МассивДней = Новый Массив;
	МассивДней.Добавить("monday");
	МассивДней.Добавить("tuesday");
	МассивДней.Добавить("wednesday");
	МассивДней.Добавить("thursday");
	МассивДней.Добавить("friday");
	МассивДней.Добавить("saturday");
	МассивДней.Добавить("sunday");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ВозможныеРейсы.Водитель КАК Водитель
	|ПОМЕСТИТЬ ВТ_Водители
	|ИЗ
	|   Справочник.новаТранспорт КАК новаТранспорт
	|       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|           ДоступностьТранспорта.Транспорт КАК Транспорт,
	|           МАКСИМУМ(ДоступностьТранспорта.НачалоПериода) КАК НачалоПериода
	|       ИЗ
	|           РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	|       ГДЕ
	|           ДоступностьТранспорта.НачалоПериода <= &ДатаРедактирования
	|       
	|       СГРУППИРОВАТЬ ПО
	|           ДоступностьТранспорта.Транспорт) КАК ВыборкаФлагаДоступности
	|           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	|           ПО ВыборкаФлагаДоступности.Транспорт = ДоступностьТранспорта.Транспорт
	|               И ВыборкаФлагаДоступности.НачалоПериода = ДоступностьТранспорта.НачалоПериода
	|           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|           ПО (ВозможныеРейсы.Транспорт = ВыборкаФлагаДоступности.Транспорт)
	|               И (ВозможныеРейсы.НачалоПериода >= &ДатаРедактирования)
	|               И (ВозможныеРейсы.КонецПериода <= КОНЕЦПЕРИОДА(&ДатаРедактирования, ДЕНЬ))
	|       ПО (ВыборкаФлагаДоступности.Транспорт = новаТранспорт.Ссылка)
	|ГДЕ
	|   ДоступностьТранспорта.Доступен
	|   И НЕ ВозможныеРейсы.Водитель ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ""login_"" + новаВодители.Код КАК login,
	|   ""password"" КАК password,
	|   новаВодители.Наименование КАК name,
	|   ""email@email.com"" КАК email,
	|   ЕСТЬNULL(новаВодители.ОсновнойТелефон.Наименование, """") КАК phone,
	|   Смены.СтоимостьЧаса КАК priceForOneHour,
	|   ""Склад"" КАК areaOfControl,
	|   Смены.ВремяНачалаРаботыВодителей КАК from1,
	|   Смены.ВремяОкончанияРаботыВодителей КАК to,
	|   """" КАК address
	|ИЗ
	|   ВТ_Водители КАК ВТ_Водители
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаВодители КАК новаВодители
	|           ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены КАК Смены
	|           ПО (Смены.Ссылка = &Смена)
	|       ПО ВТ_Водители.Водитель = новаВодители.Ссылка";
	
	Запрос.УстановитьПараметр("Смена", Объект.Смена);
	Запрос.УстановитьПараметр("ДатаРедактирования",Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		performer = ФабрикаXDTO.Создать(Тип_performer);
		ЗаполнитьЗначенияСвойств(performer, ВыборкаДетальныеЗаписи);
		
		ArrayOfAvailabilities = ФабрикаXDTO.Создать(Тип_ArrayOfAvailabilities);
		Для каждого Стр Из МассивДней Цикл
			availabilitie = ФабрикаXDTO.Создать(Тип_availabilitie);
			availabilitie.weekDay = Стр;
			availabilitie.from = Формат(ВыборкаДетальныеЗаписи.from1,"ДФ=HH:mm");
			availabilitie.to = Формат(ВыборкаДетальныеЗаписи.to,"ДФ=HH:mm");
			ArrayOfAvailabilities.availabilitie.Добавить(availabilitie);
		КонецЦикла;
		//performer.startLocation = ФабрикаXDTO.Создать(Тип_startLocation);
		//performer.startLocation.address = ВыборкаДетальныеЗаписи.address;
		//performer.homeLocation = ФабрикаXDTO.Создать(Тип_homeLocation);
		//performer.homeLocation.address = ВыборкаДетальныеЗаписи.address;
		
		performer.availabilities = ArrayOfAvailabilities;
		
		arrayOfPerformers.performer.Добавить(performer);
	КонецЦикла;
	
	performersDetails.performers = arrayOfPerformers;
	apiRequest.sessionID = ИДСессии;
	apiRequest.performersDetails = performersDetails;
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, apiRequest);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	
	Ресурс = "distribution-api/objects/importPerformers";
	ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML);
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO")  Тогда
		#Если Клиент Тогда
			Сообщить("Некорректный ответ с сервера при создании транспорта", СтатусСообщения.Важное);
		#КонецеСли
		Возврат Неопределено;
	Иначе
		Попытка
			Ошибка = ПолученныйОбъект.objects.updatedObject.ПолучитьXDTO("errors");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		#Если Клиент Тогда
			Сообщить("Возникла ошибка при создании транспорта", СтатусСообщения.Важное);
		#КонецеСли
	КонецеСли	
	
	
КонецФункции // СоздатьВодителей()

&НаКлиенте
Процедура ВыгрузитьВодителей(Команда)
	Если ЗначениеЗаполнено(Объект.Смена) Тогда
		ВыгрузитьВодителейНаСервере();
	Иначе 
		Сообщить("Заполните Смену!");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область Заказы

&НаСервере
//&НаКлиенте
Процедура ВыгрузитьЗаказыНаСервере()
	//ИДСессии = ПолучитьСессию();
	СоздатьОбновитьЗаказы();//ИДСессии);
	
	//Попытка
	//	СоздатьОбновитьЗаказы(3, Истина);
	//Исключение
	//	
	//КонецПопытки;	
КонецПроцедуры

&НаСервере
//&НаКлиенте
Процедура ВыгрузитьЗаборыНаСервере()
	ИДСессии = ПолучитьСессию();
	СоздатьОбновитьЗаборы(ИДСессии);
	//Попытка
	//	ИДСессии = ПолучитьСессиюВторогоСервера();
	//	СоздатьОбновитьЗаборы(ИДСессии, 3, Истина);
	//Исключение
	//	
	//КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаказы(Команда)
	
	Если Объект.ВидВыгрузки = 2 И Объект.ЗаказКВыгрузке.Пустая() Тогда
		Предупреждение("Выбран режим выгрузки одного заказа, но при этом не указан заказ!! Выгрузка произведена не будет!");
		Возврат;
	КонецеСли;	
	
	Если Объект.ВидВыгрузки = 3 И СокрЛП(Объект.НомераЗаказов) = "" Тогда
		Предупреждение("Выбран режим выгрузки по списку заказов, но при этом не указаны номера заказов!! Выгрузка произведена не будет!");
		Возврат;
	КонецеСли;	
	
	
	МожноВыгружать = may.ПроверкаНаОконченностьСобытия(Справочники.СобытияКонтроляВремени.ВыгрузкаИз1СВВероут, ТерминалДоставки);
	Если Не МожноВыгружать Тогда
		Предупреждение("Уже происходит выгрузка данных в вероут!! Выгрузка произведена не будет!");
		Возврат;
	КонецеСли;	
	
	Сообщить("Старт выгрузки " + Формат(ТекущаяДата(), "ДЛФ=T"));
	may.ВыгрузкаИз1СВВероут(Ложь, ТерминалДоставки);
	
	Если ФлажокВыгрузитьЗаказы = ФлажокВыгрузитьЗаборы Тогда // Все
		ВыгрузитьЗаказыНаСервере();
		ВыгрузитьЗаборыНаСервере();
	ИначеЕсли ФлажокВыгрузитьЗаказы = 1 И ФлажокВыгрузитьЗаборы = 0 Тогда // Заказы
		ВыгрузитьЗаказыНаСервере();  
	ИначеЕсли ФлажокВыгрузитьЗаказы = 0 И ФлажокВыгрузитьЗаборы = 1 Тогда // Заборы
		ВыгрузитьЗаборыНаСервере();
	КонецЕсли;
	
	may.ВыгрузкаИз1СВВероут(Истина, ТерминалДоставки);
	Сообщить("Окончание выгрузки " + Формат(ТекущаяДата(), "ДЛФ=T"));
	
КонецПроцедуры

//&НаКлиенте
&НаСервере
Процедура УдалитьОтмененныеЗаказы()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаМестнаяДоставка.Ссылка КАК новаМестнаяДоставка,
	            |	новаМестнаяДоставка.Номер КАК Номер
	            |ИЗ
	            |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И (РеализацияТоваровУслуг.СтатусИнтернетМагазина = 4
	            |			ИЛИ РеализацияТоваровУслуг.СтатусИнтернетМагазина = 1)
	            |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ДатыДоставок.Доставка.Ссылка,
	            |	ДатыДоставок.Доставка.Номер
	            |ИЗ
	            |	РегистрСведений.ДатыДоставок КАК ДатыДоставок
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО ДатыДоставок.Доставка.Номер = РеализацияТоваровУслуг.Номер
	            |ГДЕ
	            |	ДатыДоставок.ДатаДоставки > &ДатаКон
	            |	И ДатыДоставок.Период МЕЖДУ &ДатаНач2 И &ДатаКон2
	            |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	НачалоВыборкиПереноса = НачалоДня(Объект.Дата - 86400) + 28000;
	Зап.УстановитьПараметр("ДатаНач2", НачалоВыборкиПереноса);
	Зап.УстановитьПараметр("ДатаКон2", НачалоВыборкиПереноса + 86400);
	
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	
	Тип_save = ФабрикаXDTO.Тип("http://veeroute.com/delete", "apiRequest");
	DeleteOrders = ФабрикаXDTO.Создать(Тип_save);
	
	Тип_order = ФабрикаXDTO.Тип("http://veeroute.com/delete", "order");
	
	Тип_orders = ФабрикаXDTO.Тип("http://veeroute.com/delete", "orders");
	orders = ФабрикаXDTO.Создать(Тип_orders);
	
	Результат = Зап.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ЕстьКУдалению = Ложь;
	
	ИтКол = 0;
	КоличествоПричин = Число(Формат(Месяц(Объект.Дата), "ЧЦ=2; ЧН=00; ЧВН=") + Формат(День(Объект.Дата), "ЧЦ=2; ЧН=00; ЧВН="));
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		order = ФабрикаXDTO.Создать(Тип_order);
		
		Заказ = ВыборкаДетальныеЗаписи.новаМестнаяДоставка;
		
		//ЗапросПоКолСостояний = Новый Запрос(
		//"ВЫБРАТЬ
		//|	КОЛИЧЕСТВО(СостоянияЗаказов.ПричинаНеВыполнения) КАК КоличествоПричин
		//|ИЗ
		//|	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
		//|ГДЕ
		//|	СостоянияЗаказов.Доставка = &Доставка
		//|	И (СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки)
		//|			ИЛИ СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
		//|	И ТИПЗНАЧЕНИЯ(СостоянияЗаказов.Регистратор) = ТИП(Документ.новаотчетВодителя)");
		//ЗапросПоКолСостояний.УстановитьПараметр("Доставка", Заказ);
		//РезультатСостояний = ЗапросПоКолСостояний.Выполнить().Выгрузить();
		//КоличествоПричин   = РезультатСостояний[0].КоличествоПричин;
		Если КоличествоПричин = 0 Тогда
			НомерЗаказа = СокрЛП(ВыборкаДетальныеЗаписи.Номер);
		Иначе	
			НомерЗаказа = СокрЛП(ВыборкаДетальныеЗаписи.Номер) + "_" + Формат(КоличествоПричин, "ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");	
		КонецЕсли;	
		order.orderReference         = НомерЗаказа;
		orders.order.Добавить(order);
		Сообщить("Удален = " + НомерЗаказа, СтатусСообщения.Важное);
		ЕстьКУдалению = Истина;
		ИтКол = ИтКол + 1;
	КонецЦикла;
	
	
	Если ЕстьКУдалению Тогда
		ИДСессии = ПолучитьСессию(); 
		DeleteOrders.sessionID = ИДСессии;
		DeleteOrders.orders = orders;
		
		ЗаписьXML = Новый ЗаписьXML;	
		ЗаписьXML.УстановитьСтроку(); 
		ЗаписьXML.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, DeleteOrders);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Т = Новый ТекстовыйДокумент;
		ИФ = ПолучитьИмяВременногоФайла();
		Т.УстановитьТекст(СтрокаXML);
		Т.Записать(ИФ);
		
		Ф = Новый ДвоичныеДанные(ИФ);
		Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
		
		Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
		Выгр.Родитель = Справочники.ПакетыДанныхВероут.Заказы;
		Выгр.Данные = Хр;
		Выгр.ДатаВыгрузки = ТекущаяДата();
		Выгр.ТипСервера = Объект.ВидСервера;
		Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.УдалениеЗаказа;
		Выгр.ТипВыгрузки = 2;
		Выгр.КоличествоЗаказов = ИтКол;
		Выгр.ТерминалДоставки = ТерминалДоставки;
		Выгр.Записать();
		
		
		Ресурс = "distribution-api/orders/delete";
		ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML);
		
		Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
			Выгр.ОшибкаПолученияДанныхОтСервера = Истина;
			Выгр.Записать();
			#Если Клиент Тогда
				Сообщить("Некорректный ответ с сервера при выгрузке заказов", СтатусСообщения.Важное);
			#КонецеСли
		Иначе
			Попытка
				Ошибка = ПолученныйОбъект.objects.updatedObject.ПолучитьXDTO("errors");
			Исключение
				
			КонецПопытки;
			//#Если Клиент Тогда
			//	Сообщить("Возникла ошибка при выгрузке заказов", СтатусСообщения.Важное);
			//#КонецеСли
			
			ЗаписатьСтатусВыгрузкиВВероут(ПолученныйОбъект, "Заказ",, Выгр);
			
		КонецЕсли;	
		
	КонецЕСли;
КонецПроцедуры	


&НаСервере
Процедура ЗаписатьОшибкуПолученияДанныхОтВероута() 
	
КонецПроцедуры	

&НаСервере
//&НаКлиенте
Процедура УдалитьВсеЗаказы()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаМестнаяДоставка.Ссылка КАК новаМестнаяДоставка,
	            |	новаМестнаяДоставка.Номер КАК Номер
	            |ИЗ
	            |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ДатыДоставок.Доставка.Ссылка,
	            |	ДатыДоставок.Доставка.Номер
	            |ИЗ
	            |	РегистрСведений.ДатыДоставок КАК ДатыДоставок
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО ДатыДоставок.Доставка.Номер = РеализацияТоваровУслуг.Номер
	            |ГДЕ
	            |	ДатыДоставок.ДатаДоставки > &ДатаКон
	            |	И ДатыДоставок.Период МЕЖДУ &ДатаНач2 И &ДатаКон2
	            |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	НачалоВыборкиПереноса = НачалоДня(Объект.Дата - 86400) + 28000;
	Зап.УстановитьПараметр("ДатаНач2", НачалоВыборкиПереноса);
	Зап.УстановитьПараметр("ДатаКон2", НачалоВыборкиПереноса + 86400);
	
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	
	
	// lem убрал этот отбор 29.05
	// Михушкин - 25.04.2016 - добавлен отбор по терминалу доставки --->> 	
	//Если ЗначениеЗаполнено(ТерминалДоставки) Тогда	
	//	Зап.Текст = СтрЗаменить(Зап.Текст, "&УсловиеТерминал_1", "РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки");	
	//	Зап.Текст = СтрЗаменить(Зап.Текст, "&УсловиеТерминал_2", "ДатыДоставок.Заказ.ТерминалДоставки = &ТерминалДоставки");	
	//	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	//Иначе
	//	Зап.Текст = СтрЗаменить(Зап.Текст, "&УсловиеТерминал_1", "ИСТИНА");
	//	Зап.Текст = СтрЗаменить(Зап.Текст, "&УсловиеТерминал_2", "ИСТИНА");
	//КонецЕсли;
	// <<--- Михушкин 
	// lem убрал этот отбор 29.05
	
	Тип_save = ФабрикаXDTO.Тип("http://veeroute.com/delete", "apiRequest");
	DeleteOrders = ФабрикаXDTO.Создать(Тип_save);
	
	Тип_order = ФабрикаXDTO.Тип("http://veeroute.com/delete", "order");
	
	Тип_orders = ФабрикаXDTO.Тип("http://veeroute.com/delete", "orders");
	orders = ФабрикаXDTO.Создать(Тип_orders);
	
	Результат = Зап.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ЕстьКУдалению = Ложь;
	
	ИтКол = 0;
	КоличествоПричин =  Число(Формат(Месяц(Объект.Дата), "ЧЦ=2; ЧН=00; ЧВН=") + Формат(День(Объект.Дата), "ЧЦ=2; ЧН=00; ЧВН="));
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		order = ФабрикаXDTO.Создать(Тип_order);
		
		Заказ = ВыборкаДетальныеЗаписи.новаМестнаяДоставка;
		
		//ЗапросПоКолСостояний = Новый Запрос(
		//"ВЫБРАТЬ
		//|	КОЛИЧЕСТВО(СостоянияЗаказов.ПричинаНеВыполнения) КАК КоличествоПричин
		//|ИЗ
		//|	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
		//|ГДЕ
		//|	СостоянияЗаказов.Доставка = &Доставка
		//|	И (СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки)
		//|			ИЛИ СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
		//|	И ТИПЗНАЧЕНИЯ(СостоянияЗаказов.Регистратор) = ТИП(Документ.новаотчетВодителя)");
		//ЗапросПоКолСостояний.УстановитьПараметр("Доставка", Заказ);
		//РезультатСостояний = ЗапросПоКолСостояний.Выполнить().Выгрузить();
		//КоличествоПричин   = РезультатСостояний[0].КоличествоПричин;
		Если КоличествоПричин = 0 Тогда
			НомерЗаказа = СокрЛП(ВыборкаДетальныеЗаписи.Номер);
		Иначе	
			НомерЗаказа = СокрЛП(ВыборкаДетальныеЗаписи.Номер) + "_" + Формат(КоличествоПричин, "ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");	
		КонецЕсли;	
		order.orderReference         = НомерЗаказа;
		orders.order.Добавить(order);
		//Сообщить("Удален = " + НомерЗаказа, СтатусСообщения.Важное);
		ЕстьКУдалению = Истина;
		ИтКол = ИтКол + 1;
	КонецЦикла;
	
	
	Если ЕстьКУдалению Тогда
		ИДСессии = ПолучитьСессию(); 
		DeleteOrders.sessionID = ИДСессии;
		DeleteOrders.orders = orders;
		
		ЗаписьXML = Новый ЗаписьXML;	
		ЗаписьXML.УстановитьСтроку(); 
		ЗаписьXML.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, DeleteOrders);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Т = Новый ТекстовыйДокумент;
		
		ИФ = ПолучитьИмяВременногоФайла();
		Т.УстановитьТекст(СтрокаXML);
		Т.Записать(ИФ);
		
		Ф = Новый ДвоичныеДанные(ИФ);
		Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
		
		Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
		Выгр.Родитель = Справочники.ПакетыДанныхВероут.Заказы;
		Выгр.Данные = Хр;
		Выгр.ДатаВыгрузки = ТекущаяДата();
		Выгр.ТипСервера = Объект.ВидСервера;
		Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.УдалениеЗаказа;
		Выгр.ТипВыгрузки = 2;
		Выгр.КоличествоЗаказов = ИтКол;
		Выгр.ТерминалДоставки = ТерминалДоставки;
		Выгр.УстановитьНовыйКод();
		Выгр.Записать();
		Ресурс = "distribution-api/orders/delete";
		ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML);
		
		Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
			Выгр.ОшибкаПолученияДанныхОтСервера = Истина;
			Выгр.Записать();
			
			#Если Клиент Тогда
				Сообщить("Некорректный ответ с сервера при выгрузке заказов", СтатусСообщения.Важное);
			#КонецеСли
		Иначе
			Попытка
				Ошибка = ПолученныйОбъект.objects.updatedObject.ПолучитьXDTO("errors");
			Исключение
				
			КонецПопытки;
			//#Если Клиент Тогда
			//	Сообщить("Возникла ошибка при выгрузке заказов", СтатусСообщения.Важное);
			//#КонецеСли
			
			ЗаписатьСтатусВыгрузкиВВероут(ПолученныйОбъект, "Заказ",, Выгр);
			
		КонецЕсли;	
		
	КонецЕСли;
КонецПроцедуры	



//&НаКлиенте
&НаСервере
Процедура УдалитьОтмененныеЗаборы()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗаборТовара.Ссылка КАК Ссылка,
	            |	ЗаборТовара.Номер КАК Номер,
	            |	ЗаборТовара.Дата КАК Дата,
	            |	ЗаборТовара.Контрагент КАК Контрагент,
	            |	ЗаборТовара.Телефон КАК Телефон,
	            |	ЗаборТовара.Комментарий КАК Комментарий,
	            |	ЗаборТовара.ДатаДоставки КАК ДатаДоставки,
	            |	ЗаборТовара.КатегорияДоставки КАК КатегорияДоставки,
	            |	ЗаборТовара.СуммаДокумента КАК СуммаДокумента,
	            |	ЗаборТовара.ТочкаДоставки КАК ТочкаДоставки
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ЗаборТовара.СтатусИнтернетМагазина = 4
	            |	И ЗаборТовара.ТерминалДоставки = &ТерминалДоставки";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);

	
	Тип_save = ФабрикаXDTO.Тип("http://veeroute.com/delete", "apiRequest");
	DeleteOrders = ФабрикаXDTO.Создать(Тип_save);
	
	Тип_order = ФабрикаXDTO.Тип("http://veeroute.com/delete", "order");
	
	Тип_orders = ФабрикаXDTO.Тип("http://veeroute.com/delete", "orders");
	orders = ФабрикаXDTO.Создать(Тип_orders);
	
	Результат = Зап.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ЕстьКУдалению = Ложь;
	
	ИтКол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		order = ФабрикаXDTO.Создать(Тип_order);
		
		order.orderReference         = ВыборкаДетальныеЗаписи.Номер;
		orders.order.Добавить(order);
		Сообщить("Удален = " + ВыборкаДетальныеЗаписи.Номер, СтатусСообщения.Важное);
		ЕстьКУдалению = Истина;
		ИтКол = ИтКол + 1;
	КонецЦикла;
	
	
	Если ЕстьКУдалению Тогда
		ИДСессии = ПолучитьСессию(); 
		DeleteOrders.sessionID = ИДСессии;
		DeleteOrders.orders = orders;
		
		ЗаписьXML = Новый ЗаписьXML;	
		ЗаписьXML.УстановитьСтроку(); 
		ЗаписьXML.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, DeleteOrders);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Т = Новый ТекстовыйДокумент;
		ИФ = ПолучитьИмяВременногоФайла();
		Т.УстановитьТекст(СтрокаXML);
		Т.Записать(ИФ);
		
		Ф = Новый ДвоичныеДанные(ИФ);
		Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
		
		Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
		Выгр.Родитель = Справочники.ПакетыДанныхВероут.Заборы;
		Выгр.Данные = Хр;
		Выгр.ДатаВыгрузки = ТекущаяДата();
		Выгр.ТипСервера = Объект.ВидСервера;
		Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.УдалениеЗаказа;
		Выгр.ТипВыгрузки = 2;	
		Выгр.КоличествоЗаказов = ИтКол;
		Выгр.ТерминалДоставки = ТерминалДоставки;
		Выгр.Записать();
		
		
		Ресурс = "distribution-api/orders/delete";
		ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML);
		
		Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
			Выгр.ОшибкаПолученияДанныхОтСервера = Истина;
			Выгр.Записать();
			
			#Если Клиент Тогда
				Сообщить("Некорректный ответ с сервера при выгрузке заказов", СтатусСообщения.Важное);
			#КонецеСли
		Иначе
			Попытка
				Ошибка = ПолученныйОбъект.objects.updatedObject.ПолучитьXDTO("errors");
			Исключение
				
			КонецПопытки;
			//#Если Клиент Тогда
			//	Сообщить("Возникла ошибка при выгрузке заказов", СтатусСообщения.Важное);
			//#КонецеСли
			
			ЗаписатьСтатусВыгрузкиВВероут(ПолученныйОбъект, "Забор",, Выгр);
			
		КонецЕсли;	
		
	КонецЕСли;
КонецПроцедуры	

//&НаКлиенте
&НаСервере
Процедура УдалитьВсеЗаборы()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗаборТовара.Ссылка КАК Ссылка,
	            |	ЗаборТовара.Номер КАК Номер,
	            |	ЗаборТовара.Дата КАК Дата,
	            |	ЗаборТовара.Контрагент КАК Контрагент,
	            |	ЗаборТовара.Телефон КАК Телефон,
	            |	ЗаборТовара.Комментарий КАК Комментарий,
	            |	ЗаборТовара.ДатаДоставки КАК ДатаДоставки,
	            |	ЗаборТовара.КатегорияДоставки КАК КатегорияДоставки,
	            |	ЗаборТовара.СуммаДокумента КАК СуммаДокумента,
	            |	ЗаборТовара.ТочкаДоставки КАК ТочкаДоставки
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ЗаборТовара.ТерминалДоставки = &ТерминалДоставки";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	
	
	
	Тип_save = ФабрикаXDTO.Тип("http://veeroute.com/delete", "apiRequest");
	DeleteOrders = ФабрикаXDTO.Создать(Тип_save);
	
	Тип_order = ФабрикаXDTO.Тип("http://veeroute.com/delete", "order");
	
	Тип_orders = ФабрикаXDTO.Тип("http://veeroute.com/delete", "orders");
	orders = ФабрикаXDTO.Создать(Тип_orders);
	
	Результат = Зап.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ЕстьКУдалению = Ложь;
	
	ИтКол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		order = ФабрикаXDTO.Создать(Тип_order);
		
		order.orderReference         = ВыборкаДетальныеЗаписи.Номер;
		orders.order.Добавить(order);
		Сообщить("Удален = " + ВыборкаДетальныеЗаписи.Номер, СтатусСообщения.Важное);
		ЕстьКУдалению = Истина;
		ИтКол = ИтКол + 1;
	КонецЦикла;
	
	
	Если ЕстьКУдалению Тогда
		ИДСессии = ПолучитьСессию(); 
		DeleteOrders.sessionID = ИДСессии;
		DeleteOrders.orders = orders;
		
		ЗаписьXML = Новый ЗаписьXML;	
		ЗаписьXML.УстановитьСтроку(); 
		ЗаписьXML.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, DeleteOrders);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Т = Новый ТекстовыйДокумент;
		ИФ = ПолучитьИмяВременногоФайла();
		Т.УстановитьТекст(СтрокаXML);
		Т.Записать(ИФ);
		
		Ф = Новый ДвоичныеДанные(ИФ);
		Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
		
		Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
		Выгр.Родитель = Справочники.ПакетыДанныхВероут.Заборы;
		Выгр.Данные = Хр;
		Выгр.ДатаВыгрузки = ТекущаяДата();
		Выгр.ТипСервера = Объект.ВидСервера;
		Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.УдалениеЗаказа;
		Выгр.ТипВыгрузки = 2;	
		Выгр.КоличествоЗаказов = ИтКол;
		Выгр.ТерминалДоставки = ТерминалДоставки;
		Выгр.Записать();
		
		
		Ресурс = "distribution-api/orders/delete";
		ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML);
		
		Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
			Выгр.ОшибкаПолученияДанныхОтСервера = Истина;
			Выгр.Записать();
			
			#Если Клиент Тогда
				Сообщить("Некорректный ответ с сервера при выгрузке заказов", СтатусСообщения.Важное);
			#КонецеСли
		Иначе
			Попытка
				Ошибка = ПолученныйОбъект.objects.updatedObject.ПолучитьXDTO("errors");
			Исключение
				
			КонецПопытки;
			//#Если Клиент Тогда
			//	Сообщить("Возникла ошибка при выгрузке заказов", СтатусСообщения.Важное);
			//#КонецеСли
			
			ЗаписатьСтатусВыгрузкиВВероут(ПолученныйОбъект, "Забор",, Выгр);
			
		КонецЕсли;	
		
	КонецЕСли;
КонецПроцедуры	

//&НаКлиенте
&НаСервере
Функция ПодготовитьСписокВыгруженныхЗаказов()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	СтатусыВыгрузкиВВероут.Заказ КАК Заказ,
	            |	СтатусыВыгрузкиВВероут.Суффикс КАК Суффикс,
	            |	новаМестнаяДоставка.Ссылка КАК Доставка
	            |ИЗ
	            |	РегистрСведений.СтатусыВыгрузкиВВероут КАК СтатусыВыгрузкиВВероут
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО (ВЫРАЗИТЬ(СтатусыВыгрузкиВВероут.Заказ КАК Документ.РеализацияТоваровУслуг).Номер = новаМестнаяДоставка.Номер)
	            |ГДЕ
	            |	СтатусыВыгрузкиВВероут.ДатаПланирования МЕЖДУ &ДатаНач И &ДатаКон
	            |	И (СтатусыВыгрузкиВВероут.СтатусВыгрузки_ = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиВВероут.Created)
	            |			ИЛИ СтатусыВыгрузкиВВероут.СтатусВыгрузки_ = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиВВероут.Updated))
	            |	И СтатусыВыгрузкиВВероут.Данные.ТерминалДоставки = &ТерминалДоставки";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);

	
	Возврат Зап.Выполнить().Выгрузить();
КонецФункции	


&НаСервере
//&НаКлиенте
Процедура СоздатьОбновитьЗаказы(ДнейВперед = 0, ВторойСервер = Ложь)//ИДСессии)
	
	
	
	Тип_apiRequest = ФабрикаXDTO.Тип("http://veeroute.com/save", "apiRequest");
	apiRequest = ФабрикаXDTO.Создать(Тип_apiRequest);
	
	
	Если Не ВторойСервер тогда
		Если Объект.ВидВыгрузки = 1 Тогда
			УдалитьВсеЗаказы();
		КонецеСли;	
		ТабВыгруженных = ПодготовитьСписокВыгруженныхЗаказов();
	Иначе
		ТабВыгруженных = Новый ТаблицаЗначений;
		ТабВыгруженных.Колонки.Добавить("Доставка");
	конецесли;
	 
	
	
	//////////////////////-------------------оптимизируем-------------------------------////////////////////
	
	
	 //|	ВЫБОР
	 //|		КОГДА ВТ.Заказ.ВладелецТовара.Код = ""Shop_601""
	 //|				ИЛИ ВТ.Заказ.ВладелецТовара.Код = ""Shop_181""
	 //|				ИЛИ ВТ.Заказ.ВладелецТовара.Код = ""Shop_227""
	 //|				ИЛИ ВТ.Заказ.ВладелецТовара.Родитель.Код = ""Shop_92""
	 //|			ТОГДА ИСТИНА
	 //|		ИНАЧЕ ЛОЖЬ
	 //|	КОНЕЦ КАК КонтрагентПешихКурьеров,
	
	
	Запрос = Новый Запрос(
	
	 "ВЫБРАТЬ
	 |	новаМестнаяДоставка.Ссылка КАК новаМестнаяДоставка,
	 |	новаМестнаяДоставка.ТочкаПрибытия.Наименование КАК ОсновнаяТочка,
	 |	новаМестнаяДоставка.ВремяПрибытияС КАК ВремяПрибытияС,
	 |	новаМестнаяДоставка.ВремяПрибытияПо КАК ВремяПрибытияПо,
	 |	новаМестнаяДоставка.Дата,
	 |	новаЗадачаМестнойДоставки.Выполнена,
	 |	КатегорииДоставки2014.Ссылка КАК КатегорияДоставки,
	 |	КатегорииДоставки2014.ВесПоУмолчанию,
	 |	КатегорииДоставки2014.ОбъемПоУмолчанию,
	 |	КатегорииДоставки2014.КоличествоМинутНаРазгрузку,
	 |	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК ИМ,
	 |	новаМестнаяДоставка.ТочкаПрибытия.АдресИзЯндекса КАК АдресИзЯндекса,
	 |	новаМестнаяДоставка.ТочкаПрибытия,
	 |	КатегорииДоставки2014ПродолжительностьРазгрузкиПоКомитентам.ПродолжительностьРазгрузки,
	 |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	 |	РеализацияТоваровУслуг.ВладелецТовара.Код КАК КодИМ,
	 |	РеализацияТоваровУслуг.ВладелецТовара,
	 |	РеализацияТоваровУслуг.СуммаДокумента
	 |ПОМЕСТИТЬ ВТ
	 |ИЗ
	 |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
	 |		ПО новаМестнаяДоставка.Ссылка = новаЗадачаМестнойДоставки.БизнесПроцесс
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	 |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииДоставки2014.ПродолжительностьРазгрузкиПоКомитентам КАК КатегорииДоставки2014ПродолжительностьРазгрузкиПоКомитентам
	 |			ПО РеализацияТоваровУслуг.ВладелецТовара = КатегорииДоставки2014ПродолжительностьРазгрузкиПоКомитентам.Комитент
	 |				И РеализацияТоваровУслуг.КатегорияДоставки = КатегорииДоставки2014ПродолжительностьРазгрузкиПоКомитентам.Ссылка.Категория
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КатегорииДоставки2014 КАК КатегорииДоставки2014
	 |			ПО РеализацияТоваровУслуг.КатегорияДоставки = КатегорииДоставки2014.Категория
	 |		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.новаГруз КАК новаГруз
	 |		ПО новаМестнаяДоставка.Груз = новаГруз.Ссылка
	 |ГДЕ
	 |	новаЗадачаМестнойДоставки.ТочкаМаршрута.Ссылка = &Ссылка
	 |	И новаЗадачаМестнойДоставки.Выполнена = &ВыпоненныеЗаказы
	 |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	 |	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	 |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
	 |	И &УсловиеТерминал
	 |	И &УсловиеЗаказ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ.новаМестнаяДоставка,
	 |	ВТ.ОсновнаяТочка,
	 |	ВТ.ВремяПрибытияС,
	 |	ВТ.ВремяПрибытияПо,
	 |	ВТ.Дата,
	 |	ВТ.Выполнена,
	 |	ВТ.КатегорияДоставки,
	 |	ВТ.ВесПоУмолчанию,
	 |	ВТ.ОбъемПоУмолчанию,
	 |	ВТ.КоличествоМинутНаРазгрузку,
	 |	ВТ.ИМ,
	 |	ВТ.АдресИзЯндекса,
	 |	ВТ.ТочкаПрибытия,
	 |	ВТ.ПродолжительностьРазгрузки,
	 |	ВТ.Заказ,
	 |	ВТ.КодИМ,
	 |	ВТ.новаМестнаяДоставка.ОсновнойКонтрагент.Наименование КАК ОсновнойКонтрагентНаименование,
	 |	ВТ.новаМестнаяДоставка.Телефон КАК Телефон,
	 |	ЕСТЬNULL(ВТ.новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта, 0) КАК Широта,
	 |	ЕСТЬNULL(ВТ.новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота, 0) КАК Долгота,
	 |	ВЫБОР
	 |		КОГДА ВТ.новаМестнаяДоставка.Груз.Объем = 0
	 |			ТОГДА ВТ.Заказ.ОбъёмЗаказа
	 |		ИНАЧЕ ВТ.новаМестнаяДоставка.Груз.Объем
	 |	КОНЕЦ КАК ГрузОбъем,
	 |	ВЫБОР
	 |		КОГДА ВТ.новаМестнаяДоставка.Груз.Вес = 0
	 |			ТОГДА ВТ.Заказ.ОбщийВес
	 |		ИНАЧЕ ВТ.новаМестнаяДоставка.Груз.Вес
	 |	КОНЕЦ КАК ГрузВес,
	 |	ВТ.Заказ.Номер КАК НомерЗаказа,
	 |	ВЫБОР
	 |		КОГДА ВТ.КодИМ = ""Shop_604""
	 |			ТОГДА ИСТИНА
	 |		КОГДА ВТ.КодИМ = ""Shop_391""
	 |			ТОГДА ИСТИНА
	 |		КОГДА ВТ.ВладелецТовара.Родитель.ОсновнойМагазин.Код = ""Shop_234""
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК ЭтоДоговор,
	 |	новаГруз.Спецификация.(
	 |		Ссылка,
	 |		НомерСтроки,
	 |		Товар.Артикул КАК Арт,
	 |		Товар.Код КАК КодТовара,
	 |		Товар.Наименование КАК Наим,
	 |		Товар,
	 |		Количество,
	 |		ЕдиницаИзмерения,
	 |		Вес,
	 |		Объем,
	 |		Стоимость,
	 |		Валюта,
	 |		КодТНВЭД,
	 |		НомерГТД,
	 |		Страна,
	 |		Серия
	 |	),
	 |	ВТ.СуммаДокумента,
	 |	ВТ.Заказ.Комментарий,
	 |	ДополнительныеПараметрыЗаказа.КОплатеКлиентом,
	 |	ВТ.Заказ.УчитыватьИтогоКОплате КАК УчитыватьИтогоКОплате,
	 |	ВТ.Заказ.ТипОплаты КАК ТипОплаты,
	 |	ВЫБОР
	 |		КОГДА ВТ.Заказ.ВладелецТовара.Код = ""Shop_601""
	 |				ИЛИ ВТ.Заказ.ВладелецТовара.Код = ""Shop_752""
	 |				ИЛИ ВТ.Заказ.ВладелецТовара.Код = ""Shop_441""
	 |				ИЛИ ВТ.Заказ.ВладелецТовара.Код = ""Shop_604""
	 |				ИЛИ ВТ.Заказ.ВладелецТовара.Код = ""Shop_234""
	 |				ИЛИ ВТ.Заказ.ВладелецТовара.Код = ""Shop_202""	 
	 |				ИЛИ ВТ.Заказ.ВладелецТовара.Код = ""Shop_227""
	 |				ИЛИ ВТ.Заказ.ВладелецТовара.Родитель.Код = ""Shop_1914""
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК КонтрагентПешихКурьеров,
	 |	ВЫБОР
	 |		КОГДА ВТ.Заказ.ВладелецТовара.Код = ""Shop_180""
	 |				И (ВТ.КатегорияДоставки = ЗНАЧЕНИЕ(справочник.КатегорииДоставки2014.МГТ1)
	 |					ИЛИ ВТ.КатегорияДоставки = ЗНАЧЕНИЕ(справочник.КатегорииДоставки2014.МГТ2)
	 |					ИЛИ ВТ.КатегорияДоставки = ЗНАЧЕНИЕ(справочник.КатегорииДоставки2014.СГТ1))
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК ПроектКораблик
	 |ИЗ
	 |	ВТ КАК ВТ
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.новаГруз КАК новаГруз
	 |		ПО ВТ.новаМестнаяДоставка.Груз.Ссылка = новаГруз.Ссылка
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	 |		ПО ВТ.Заказ.Ссылка = ДополнительныеПараметрыЗаказа.Заказ.Ссылка");
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Ссылка", БизнесПроцессы.новаМестнаяДоставка.ТочкиМаршрута.ПланированиеДоставки);
	Запрос.УстановитьПараметр("ВыпоненныеЗаказы", ?(ФлажокВыпоненные = 1, Истина, Ложь));
	
	// Михушкин - 25.04.2016 - добавлен отбор по терминалу доставки --->>
	Если ЗначениеЗаполнено(ТерминалДоставки) Тогда	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТерминал", "РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки");	
		Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТерминал", "ИСТИНА");
	КонецЕсли;
	// <<--- Михушкин
	
	
	Если Объект.ВидВыгрузки = 2 Тогда	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗаказ", "РеализацияТоваровУслуг.Ссылка = &ВыгрЗаказ");	
		Запрос.УстановитьПараметр("ВыгрЗаказ", Объект.ЗаказКВыгрузке.Ссылка);
	ИначеЕсли Объект.ВидВыгрузки = 3 Тогда	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗаказ", "РеализацияТоваровУслуг.Номер В(&МасНомеров)");
		
		МассивНомеров = Новый Массив;
		Для СчСтрок = 1 По СтрЧислоСтрок(Объект.НомераЗаказов) Цикл
			МассивНомеров.Добавить(СтрПолучитьСтроку(Объект.НомераЗаказов, СчСтрок));
		КонецЦикла;	
		
		Запрос.УстановитьПараметр("МасНомеров", МассивНомеров);		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗаказ", "ИСТИНА");
	КонецЕсли;
	
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
		
	
	КоличествоЗаказовКВыгрузке = Результат.Выгрузить().Количество();
	Если КоличествоЗаказовКВыгрузке > 0 Тогда
		Сообщить("===== Всего заказов к выгрузке: " + Строка(КоличествоЗаказовКВыгрузке) + " =====");
	Иначе
		Сообщить("===== Нет заказов по выбранному периоду и статусу ");
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	Тип_save = ФабрикаXDTO.Тип("http://veeroute.com/", "apiRequest");
	importOrders = ФабрикаXDTO.Создать(Тип_save);
	
	Тип_order = ФабрикаXDTO.Тип("http://veeroute.com/", "order");
	order = ФабрикаXDTO.Создать(Тип_order);
	
	Тип_orders = ФабрикаXDTO.Тип("http://veeroute.com/", "orders");
	orders = ФабрикаXDTO.Создать(Тип_orders);
	
	Тип_client = ФабрикаXDTO.Тип("http://veeroute.com/", "client");
	//client = ФабрикаXDTO.Создать(Тип_client);
	
	Тип_location = ФабрикаXDTO.Тип("http://veeroute.com/", "location");
	//location = ФабрикаXDTO.Создать(Тип_location);
	
	Тип_type = ФабрикаXDTO.Тип("http://veeroute.com/", "type");
	//type = ФабрикаXDTO.Создать(Тип_type);
	
	Тип_attributes = ФабрикаXDTO.Тип("http://veeroute.com/", "attributes");
	//attributes = ФабрикаXDTO.Создать(Тип_attributes);
	
	Тип_dropWindow = ФабрикаXDTO.Тип("http://veeroute.com/", "dropWindow");
	//dropWindow = ФабрикаXDTO.Создать(Тип_dropWindow);
	
	Тип_dropWindows = ФабрикаXDTO.Тип("http://veeroute.com/", "dropWindows");
	//dropWindows = ФабрикаXDTO.Создать(Тип_dropWindows);
	
	Тип_orderItem = ФабрикаXDTO.Тип("http://veeroute.com/", "orderItem");
	orderItem = ФабрикаXDTO.Создать(Тип_orderItem);
	
	Тип_orderItems = ФабрикаXDTO.Тип("http://veeroute.com/", "orderItems");
	//orderItems = ФабрикаXDTO.Создать(Тип_orderItems);
	
	
	Тип_dynamicAttributes = ФабрикаXDTO.Тип("http://veeroute.com/", "dynamicAttributes");
	
	Тип_Attribute = ФабрикаXDTO.Тип("http://veeroute.com/", "attribute");

	Тип_vehicleRequirements = ФабрикаXDTO.Тип("http://veeroute.com/", "vehicleRequirements");
	Тип_vehicleRequirement = ФабрикаXDTO.Тип("http://veeroute.com/", "vehicleRequirement");
	
	
	
	
	dynamicAttributes = ФабрикаXDTO.Создать(Тип_dynamicAttributes);
	///////////////////////////////////////////////////////////////////////////////
	
	КолПропущено = 0;
	
	ТабСуффиксов = Новый ТаблицаЗначений;
	ТабСуффиксов.Колонки.Добавить("Номер");
	ТабСуффиксов.Колонки.Добавить("НомерВ");
	
	СписокПропущенных = Новый Массив;
	
	ИтКол = 0;
	КоличествоПричин = Число(Формат(Месяц(Объект.Дата), "ЧЦ=2; ЧН=00; ЧВН=") + Формат(День(Объект.Дата), "ЧЦ=2; ЧН=00; ЧВН="));
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		order = ФабрикаXDTO.Создать(Тип_order);
		
		Заказ = ВыборкаДетальныеЗаписи.новаМестнаяДоставка;
		//
		//ЗапросПоКолСостояний = Новый Запрос(
		//"ВЫБРАТЬ
		//|	КОЛИЧЕСТВО(СостоянияЗаказов.ПричинаНеВыполнения) КАК КоличествоПричин
		//|ИЗ
		//|	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
		//|ГДЕ
		//|	СостоянияЗаказов.Доставка = &Доставка
		//|	И (СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки)
		//|			ИЛИ СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
		//|	И (ТИПЗНАЧЕНИЯ(СостоянияЗаказов.Регистратор) = ТИП(Документ.новаотчетВодителя)
		//|			ИЛИ ТИПЗНАЧЕНИЯ(СостоянияЗаказов.Регистратор) = ТИП(Документ.ИзменениеДатыДоставки))");
		//ЗапросПоКолСостояний.УстановитьПараметр("Доставка", Заказ);
		//РезультатСостояний = ЗапросПоКолСостояний.Выполнить().Выгрузить();
		//КоличествоПричин   = РезультатСостояний[0].КоличествоПричин;
		
		//КоличествоПричин = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КоличествоПричин), ВыборкаДетальныеЗаписи.КоличествоПричин, 0);
		
		Если КоличествоПричин = 0 Тогда
			НомерЗаказа = СокрЛП(ВыборкаДетальныеЗаписи.НомерЗаказа);
		Иначе	
			Струк = Новый Структура;
			Струк.Вставить("Доставка", Заказ);
			
			// проверка на возникновение дублей
			Най = ТабВыгруженных.НайтиСтроки(Струк);
			УжеВыгруженСДругимСуффиксом = Ложь;
			Для Каждого Тек Из Най Цикл
				Если Тек.Суффикс <> КоличествоПричин Тогда 
					УжеВыгруженСДругимСуффиксом = Истина;
					Прервать;
				КонецеСли;	
			КонецЦикла;	
			
			Если УжеВыгруженСДругимСуффиксом Тогда
				Сообщить("Заказ: " + СокрЛП(Заказ.Номер) + " уже был выгружен сегодня с другим суффиксом!", СтатусСообщения.Внимание);
				КолПропущено = КолПропущено + 1;
				СписокПропущенных.Добавить(ВыборкаДетальныеЗаписи.Заказ);
				Продолжить;
			КонецеСли;	
			
			НомерЗаказа = СокрЛП(ВыборкаДетальныеЗаписи.НомерЗаказа) + "_" + Формат(КоличествоПричин, "ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");	
		КонецЕсли;			
		
		НовС = ТабСуффиксов.Добавить();
		НовС.Номер = СокрЛП(ВыборкаДетальныеЗаписи.НомерЗаказа);
		НовС.НомерВ = СокрЛП(НомерЗаказа);
		
		client = ФабрикаXDTO.Создать(Тип_client);
		
		client.name = ВыборкаДетальныеЗаписи.ОсновнойКонтрагентНаименование; 
		client.contactPerson = ВыборкаДетальныеЗаписи.ОсновнойКонтрагентНаименование; 
		client.contactNumber = ВыборкаДетальныеЗаписи.Телефон;
		
		location = ФабрикаXDTO.Создать(Тип_location);
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АдресИзЯндекса) Тогда
			Адр = СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.ОсновнаяТочка), ">", "");
			Адр = СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.ОсновнаяТочка), "<", "");
		Иначе
			Адр = СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.АдресИзЯндекса), ">", "");
			Адр = СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.АдресИзЯндекса), "<", "");
		КонецеСли;	
		
		location.name      = Адр;
		location.address   = Адр; 
		location.latitude  = ВыборкаДетальныеЗаписи.Широта; 
		location.longitude = ВыборкаДетальныеЗаписи.Долгота;
		
		КатегорияДоставки = ВыборкаДетальныеЗаписи.КатегорияДоставки;
		ПродолжительностьРазгрузки = ВыборкаДетальныеЗаписи.ПродолжительностьРазгрузки; 
		ОбъемГруза        = ВыборкаДетальныеЗаписи.ГрузОбъем;
		type       = ФабрикаXDTO.Создать(Тип_type);
		attributes = ФабрикаXDTO.Создать(Тип_attributes);
		
		ВесПоТоварам = 0;
		orderItems = ФабрикаXDTO.Создать(Тип_orderItems);  
		
		Товар = ВыборкаДетальныеЗаписи.Спецификация.Выбрать();
		
		Пока Товар.Следующий() Цикл
			orderItem = ФабрикаXDTO.Создать(Тип_orderItem);	
			Тов = СтрЗаменить(Строка(Товар.Наим), ">", "");
			Тов = СтрЗаменить(Строка(Тов), "<", "");
			Тов = СтрЗаменить(Строка(Тов), "&", " ");
			orderItem.name    = Тов;
			Если ЗначениеЗаполнено(Товар.Арт) Тогда
				orderItem.barcode = Товар.Арт;
			Иначе
				orderItem.barcode = Товар.КодТовара;
			КонецеСли;	
			orderItems.orderitem.Добавить(orderItem);
			ВесПоТоварам = ВесПоТоварам + Товар.Вес;
		КонецЦикла;
		order.orderItems.Добавить(orderItems);
		
		
		Если ВыборкаДетальныеЗаписи.ГрузВес <> 0 Тогда
			order.capacity = ВыборкаДетальныеЗаписи.ГрузВес;
		ИначеЕсли ВесПоТоварам <> 0 Тогда
			order.capacity = ВесПоТоварам;			
		Иначе
			order.capacity = ВыборкаДетальныеЗаписи.ВесПоУмолчанию;			
		КонецеСли;
		
		ПешийКурьер = Ложь;
		Если Не ЗначениеЗаполнено(order.capacity) Тогда
			order.capacity = 0;
		КонецеСли;	
		
		
		ПроектКораблик = Ложь;
		
		
		Если ВыборкаДетальныеЗаписи.ПроектКораблик Тогда
			ПроектКораблик = Истина;
		КонецеСли;	
		
		Если ВыборкаДетальныеЗаписи.КонтрагентПешихКурьеров И Не ПроектКораблик Тогда
			//Если ?(ОбъемГруза = 0, ВыборкаДетальныеЗаписи.ОбъемПоУмолчанию, ОбъемГруза) <= 0.02 Тогда
			Если ?(ОбъемГруза = 0, ВыборкаДетальныеЗаписи.ОбъемПоУмолчанию, ОбъемГруза) <= 0.035 Тогда
				Если Число(order.capacity) > 0 И Число(order.capacity) <= 2 Тогда
					// добавляем проверку на интервал
					ЧасС = Час(ВыборкаДетальныеЗаписи.ВремяПрибытияС);
					Если ЧасС < 13 Тогда
					//окончание проверки на интервал
					
						Если ВыборкаДетальныеЗаписи.ТипОплаты = 4 Или ВыборкаДетальныеЗаписи.ТипОплаты = 7 Тогда
							ПешийКурьер = Истина;
						ИначеЕсли ВыборкаДетальныеЗаписи.ТипОплаты = 1 Тогда
							Если ВыборкаДетальныеЗаписи.УчитыватьИтогоКОплате Тогда
								Если Макс(ВыборкаДетальныеЗаписи.КОплатеКлиентом, - ВыборкаДетальныеЗаписи.КОплатеКлиентом) <= 5000 Тогда//Если ВыборкаДетальныеЗаписи.КОплатеКлиентом = 0 Тогда
									ПешийКурьер = Истина;
								КонецеСли;
								
								// теперь обратно делаем до пяти тысяч, это просто пиздец, а не логистика //lemuracami//
								//Если ВыборкаДетальныеЗаписи.КОплатеКлиентом = 0 Тогда
								//	ПешийКурьер = истина;
								//КонецеСли;	
							Иначе
								Если Макс(ВыборкаДетальныеЗаписи.СуммаДокумента, - ВыборкаДетальныеЗаписи.СуммаДокумента) <= 5000 Тогда//Если ВыборкаДетальныеЗаписи.СуммаДокумента = 0 Тогда
									ПешийКурьер = Истина;
								КонецеСли;
								//Если ВыборкаДетальныеЗаписи.СуммаДокумента = 0 Тогда
								//	ПешийКурьер = истина;
								//КонецеСли;	
							КонецеСли;	
						КонецеСли;	
					КонецеСли;
				КонецесЛи;	
			КонецеСли;	
		КонецеСли;	
		
		
		
		vehicleRequirements = ФабрикаXDTO.Создать(Тип_vehicleRequirements);
		//vehicleRequirements.value = СтрЗаменить(ВыборкаДетальныеЗаписи.ИМ, """", "");
		vehicleRequirement = ФабрикаXDTO.Создать(Тип_vehicleRequirement);
		
		
		Если ПроектКораблик Тогда
		    vehicleRequirement.name = "Кораблик";
		ИначеЕсли Не ПешийКурьер Тогда
			Если Не ВыборкаДетальныеЗаписи.ЭтоДоговор Тогда
				Если СокрЛП(ВыборкаДетальныеЗаписи.КодИМ) = "Shop_316" Тогда
					vehicleRequirement.name = "MMАвиапарк";	
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.КодИМ) = "Shop_256" Тогда
					vehicleRequirement.name = "ММ Белая Дача";		
				ИначеЕсли КатегорияДоставки = Справочники.КатегорииДоставки2014.КГТ1 Или КатегорияДоставки = Справочники.КатегорииДоставки2014.КГТ2 Или КатегорияДоставки = Справочники.КатегорииДоставки2014.МГТ1 Или КатегорияДоставки = Справочники.КатегорииДоставки2014.МГТ2 Тогда
					vehicleRequirement.name = Строка(КатегорияДоставки.Родитель);
				Иначе	
					vehicleRequirement.name = Строка(КатегорияДоставки);
				КонецеСли;
			Иначе
				// изменено 20.02.2017 type.name = "ДиректКредит и ПосКредит";
				vehicleRequirement.name = "Пешие курьеры";
			КонецеСли;
		Иначе
			vehicleRequirement.name = "Пешие курьеры";
		КонецеСли;
		vehicleRequirements.vehicleRequirement.Добавить(vehicleRequirement);
		
		
		vehicleRequirement = ФабрикаXDTO.Создать(Тип_vehicleRequirement);
		
		
		ЧасС = Час(ВыборкаДетальныеЗаписи.ВремяПрибытияС);
		Если ЧасС >= 17 Тогда
			vehicleRequirement.name = "После 17:00"
		Иначе	
			vehicleRequirement.name = "До 17:00"
		КонецеСли;	
		
		vehicleRequirements.vehicleRequirement.Добавить(vehicleRequirement);
		
		
		
		
		
		ЧасС = Час(ВыборкаДетальныеЗаписи.ВремяПрибытияС);
		Если ЧасС >= 15 Тогда
			vehicleRequirement = ФабрикаXDTO.Создать(Тип_vehicleRequirement);
			vehicleRequirement.name = "После 15:00";
			vehicleRequirements.vehicleRequirement.Добавить(vehicleRequirement);
		КонецеСли;	
		
		
		
		
		order.vehicleRequirements = vehicleRequirements;
		
		
		
		//attributes.attribute = //Строка(КатегорияДоставки);
		order.volume = ?(ОбъемГруза = 0, ВыборкаДетальныеЗаписи.ОбъемПоУмолчанию, ОбъемГруза);
        
        Если ПродолжительностьРазгрузки = NULL Тогда
            Минут = КатегорияДоставки.КоличествоМинутНаРазгрузку;
        Иначе
            Минут = ПродолжительностьРазгрузки;
        КонецЕсли;
        
		Если Минут > 0 Тогда
			ВремяРазгрузки = Дата(1, 1, 1, 0, Минут, 0);
			order.durationDrop = Формат(ВремяРазгрузки,"ДЛФ=T");
		КонецЕсли;
		// Вес
		dynamicAttributes = ФабрикаXDTO.Создать(Тип_dynamicAttributes);
		Attribute = ФабрикаXDTO.Создать(Тип_Attribute);
		Attribute.name = "name_internet";
		Attribute.value = СтрЗаменить(ВыборкаДетальныеЗаписи.ИМ, """", "");
		
		dynamicAttributes.attribute.Добавить(Attribute);
		
		//+++ БАО 09.10.2017 №
		
		Если Объект.ВидСервера = 2 Тогда
			
			Для Каждого Строка_vehicleRequirement Из vehicleRequirements.vehicleRequirement Цикл 
				
				Attribute = ФабрикаXDTO.Создать(Тип_Attribute);
				Attribute.name = "vehicleReq";
				Attribute.value = СтрЗаменить(Строка_vehicleRequirement.name, """", "");
				
				dynamicAttributes.attribute.Добавить(Attribute);
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		//--- БАО 09.10.2017 №
		
		order.dynamicAttributes.Добавить(dynamicAttributes);
		//type.attributes.Добавить(attributes);
		
		//type.name = "Тип заказа (Тип транспортного средства требуемый для перевозки)."   +
		//"Для каждого заказа может быть указан только один типа."             +
		//"Значение типа должно совпадать со значениями в справочнике «Типы машин» расположенном на экране «Настройки».";
		
		////Начало временного окна для работы в пункте назначения. 
		////Формат зависит от локализации в конфигурации аккаунта. 
		//Например, для Англии формат - “DD/MM/YYYY HH:MM”. Для России - “ДД.ММ.ГГГГ ЧЧ:ММ” 
		dropWindow = ФабрикаXDTO.Создать(Тип_dropWindow);
		dropWindow.start = Формат(ВыборкаДетальныеЗаписи.ВремяПрибытияС + (86400*ДнейВперед),"ДФ='дд.ММ.гггг ЧЧ:мм'");  
		dropWindow.end = Формат(ВыборкаДетальныеЗаписи.ВремяПрибытияПо + (86400*ДнейВперед),"ДФ='дд.ММ.гггг ЧЧ:мм'");
		dropWindows = ФабрикаXDTO.Создать(Тип_dropWindows);
		dropWindows.dropWindow.Добавить(dropWindow);
		//"Конструкция содержащая информация о допустимых окнах для разгрузки/погрузки товара на территории клиента."+ 
		//"Каждая должна содержать в себе минимум одну конструкцию dropWindow, ее описание приведено ниже. Если заказ имеет несколько допустимых окон, ."+
		//"то заказ должен содержать несколько конструкций dropWindow вложенных в одну dropWindows";
		order.dropWindows.Добавить(dropWindows);
		////////////////
		
		
		Комм = СтрЗаменить(ВыборкаДетальныеЗаписи.ЗаказКомментарий, "quot", "");
		Комм = СтрЗаменить(Комм, "&", "");
		Комм = СтрЗаменить(Комм, "<", "");
		Комм = СтрЗаменить(Комм, ">", "");
		Комм = СтрЗаменить(Комм, Символы.ПС, " ");

				

		order.additionalinstructions = Комм;
		
		order.areaOfControl          = "Склад";
		order.date                   = Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yyyy");
		order.client                 = client;
		order.location = location;
		//order.collection             = ;//"Признак определяющий вид заказа. Возможные значения: true/false." +
		//-"Если указан true, создается заказ вида сбор, Если указан false, создается заказ вида доставка." +
		//--"В случае отсутствия значения, автоматически будет проставлено значение false и создан заказ вида доставка.";      
		/////////
		
		//order.dynamicAttributes = ;
		
		//Товары = Заказ.Груз.Спецификация;
		order.orderReference         = НомерЗаказа;
		order.price                  = Формат(Окр(ВыборкаДетальныеЗаписи.СуммаДокумента),"ЧГ="); //сумма заказа
		//order.priority               = 1; // 1 – Низкий 2 – Средний 3 – Высокий
		//order.type.Добавить(type);    
		//order.type.Добавить(type2);    
		
		orders.order.Добавить(order);	
		ИтКол = ИтКол + 1;
	КонецЦикла;
	
	//Если ВторойСервер Тогда
	//	ИДСессии = ПолучитьСессиюВторогоСервера();
	//Иначе	
		ИДСессии = ПолучитьСессию(); // При большом кол-ве заказов, пока заполнится XML, сессия становится не активной.
	//КонецеСли;	
	importOrders.sessionID = ИДСессии;
	importOrders.orders = orders;
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, importOrders);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Т = Новый ТекстовыйДокумент;

	ИФ = ПолучитьИмяВременногоФайла();
	Т.УстановитьТекст(СтрокаXML);
	Т.Записать(ИФ);
	
    Ф = Новый ДвоичныеДанные(ИФ);
    Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	
	Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
	Выгр.Родитель = Справочники.ПакетыДанныхВероут.Заказы;
	Выгр.Данные = Хр;
	Выгр.ДатаВыгрузки = ТекущаяДата();
	Выгр.ТипСервера = Объект.ВидСервера;
	Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.ВыгрузкаЗаказа;
	Если Объект.ВидВыгрузки = 1 Тогда
		Выгр.ОбщаяВыгрузка = Истина;
	ИначеЕсли Объект.ВидВыгрузки = 2 Тогда		
		Выгр.Заказ = Объект.ЗаказКВыгрузке;
	КонецеСли;
	Для Каждого Тек Из СписокПропущенных Цикл
		Нов = Выгр.Пропущенные.Добавить();
		Нов.Заказ = Тек;
	КонецЦикла;	
	Выгр.ТипВыгрузки = 1;
	Выгр.КоличествоЗаказов = ИтКол;
	Выгр.ТерминалДоставки = ТерминалДоставки;
	Выгр.Записать();
	
	Ресурс = "distribution-api/orders/save";
	//lem.ОтправитьНормальноеСообщениеАдминам("старт отправки файла на сервер вероут", "старт отправки файла на сервер вероут");
	ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML, ВторойСервер);
	//lem.ОтправитьНормальноеСообщениеАдминам("окончание отправки файла на сервер вероут", "окончание отправки файла на сервер вероут");
	
	//Попытка
	//	ИДСессии = ПолучитьСессиюВторогоСервера(); // При большом кол-ве заказов, пока заполнится XML, сессия становится не активной.
	//	importOrders.sessionID = ИДСессии;
	//	importOrders.orders = orders;
	//	
	//	ЗаписьXML = Новый ЗаписьXML;	
	//	ЗаписьXML.УстановитьСтроку(); 
	//	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	//
	//	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, importOrders);
	//	СтрокаXML2 = ЗаписьXML.Закрыть();
	//	ПолученныйОбъект2 = ВыполнитьPostЗапрос(Ресурс, СтрокаXML2, Истина);
	//Исключение
	//	
	//КонецПопытки;	
	
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
		Выгр.ОшибкаПолученияДанныхОтСервера = Истина;
		Выгр.Записать();
		
		//#Если Клиент Тогда
		Сообщить("Некорректный ответ с сервера при выгрузке заказов", СтатусСообщения.Важное);
		//#КонецеСли
	Иначе
		Попытка
			Ошибка = ПолученныйОбъект.error.errorCode + ПолученныйОбъект.error.errorMessage;//ПолученныйОбъект.error.updatedObject.ПолучитьXDTO("errors");
			Сообщить(Ошибка);
			ЗаписыватьСтатусы = Ложь;
		Исключение
			ЗаписыватьСтатусы = Истина;
		КонецПопытки;
		
		Если ЗаписыватьСтатусы И Не ВторойСервер Тогда
			ЗаписатьСтатусВыгрузкиВВероут(ПолученныйОбъект, "Заказ", КолПропущено, Выгр, Истина);
		КонецЕсли;
		
	КонецЕсли;	
	//Если Не ВторойСервер Тогда
	//	ВыгрузитьСуффиксыВАдминку(ТабСуффиксов);	
	//КонецеСли;	
КонецПроцедуры // СоздатьОбновитьЗаказы()

&НаКлиенте
//&НаСервере
Процедура ВыгрузитьСуффиксыВАдминку(ТабСуффиксов)
	СтрЗ = "DECLARE @t [dbo].[TOrderVeeRouteReference] ";
	
	Для Каждого Тек Из ТабСуффиксов Цикл
		СтрЗ = СтрЗ + "INSERT INTO @t VALUES (" + Тек.Номер + ", '" + Тек.НомерВ + "')" + Символы.ПС;
	КонецЦикла;	

    СтрЗ = СтрЗ + "EXEC [dbo].[sp_addOrderVeeRouteReference] @t";
	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	Евген.ЗапросКИнтернетМагазину(СтрЗ, Подкл);
КонецПроцедуры	
	

&НаСервере
//&НаКлиенте
Процедура СоздатьОбновитьЗаборы(ИДСессии, ДнейВперед = 0, ВторойСервер = Ложь)
	
	Тип_apiRequest = ФабрикаXDTO.Тип("http://veeroute.com/save", "apiRequest");
	apiRequest = ФабрикаXDTO.Создать(Тип_apiRequest);
	
	Если Не ВторойСервер Тогда
		УдалитьОтмененныеЗаборы();
	КонецеСли;	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаборТовара.Ссылка,
	|	ЗаборТовара.Номер,
	|	ЗаборТовара.Дата,
	|	ЗаборТовара.Контрагент,
	|	ЗаборТовара.Телефон,
	|	ЗаборТовара.Комментарий,
	|	ЗаборТовара.ДатаДоставки,
	|	ЗаборТовара.КатегорияДоставки,
	|	ЗаборТовара.СуммаДокумента,
	|	ЗаборТовара.ТочкаДоставки.Наименование КАК ТочкаДоставки,
	|	ЗаборТовара.ТочкаДоставки КАК ТочкаПрибытия,
	|	ЗаборТовара.ТочкаДоставки.АдресИзЯндекса КАК АдресИзЯндекса,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара, 0) КАК ВремяОжиданияПриЗабореТовара,
	|	ЗаборТовара.ОбъемЗабора,
	|	ЗаборТовара.ВесЗабора,
	|	ЗаборТовара.Контрагент.Наименование,
	|	ЕСТЬNULL(ЗаборТовара.ТочкаДоставки.Адрес.Широта, 0) КАК Широта,
	|	ЕСТЬNULL(ЗаборТовара.ТочкаДоставки.Адрес.Долгота, 0) КАК Долгота,
	|	ЗаборТовара.ТочкаДоставки.ВремяПребывания,
	|	ЗаборТовара.ТочкаДоставки.ВремяРаботыНачало,
	|	ЗаборТовара.ТочкаДоставки.ВремяРаботыОкончание,
	|	ЗаборТовара.Контрагент.Код,
	|	ВЫБОР
	|		КОГДА ЗаборТовара.ОбъемЗабора >= 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбъемБольшеЛибоРавноКуб
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&ДатаКон, ) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО ЗаборТовара.Контрагент = ПараметрыКонтрагентовСрезПоследних.Контрагент
	|ГДЕ
	|	НЕ ЗаборТовара.ПометкаУдаления
	|	И ЗаборТовара.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗаборТовара.СтатусИнтернетМагазина = 2 И &УсловиеТерминал");
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	
	Если ЗначениеЗаполнено(ТерминалДоставки) Тогда	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТерминал", "ЗаборТовара.ТерминалДоставки = &ТерминалДоставки");	
		Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТерминал", "ИСТИНА");
	КонецЕсли;
	
	
	//Запрос.УстановитьПараметр("Ссылка", БизнесПроцессы.новаМестнаяДоставка.ТочкиМаршрута.ПланированиеДоставки);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Сообщить("===== Всего ЗАБОРОВ к выгрузке: " + Строка(Результат.Выгрузить().Количество()) + " =====");
	
	///////////////////////////////////////////////////////////////////////////////
	Тип_save = ФабрикаXDTO.Тип("http://veeroute.com/", "apiRequest");
	importOrders = ФабрикаXDTO.Создать(Тип_save);
	
	Тип_order = ФабрикаXDTO.Тип("http://veeroute.com/", "order");
	order = ФабрикаXDTO.Создать(Тип_order);
	
	Тип_orders = ФабрикаXDTO.Тип("http://veeroute.com/", "orders");
	orders = ФабрикаXDTO.Создать(Тип_orders);
	
	Тип_client = ФабрикаXDTO.Тип("http://veeroute.com/", "client");
	//client = ФабрикаXDTO.Создать(Тип_client);
	
	Тип_location = ФабрикаXDTO.Тип("http://veeroute.com/", "location");
	//location = ФабрикаXDTO.Создать(Тип_location);
	
	Тип_type = ФабрикаXDTO.Тип("http://veeroute.com/", "type");
	//type = ФабрикаXDTO.Создать(Тип_type);
	
	Тип_attributes = ФабрикаXDTO.Тип("http://veeroute.com/", "attributes");
	//attributes = ФабрикаXDTO.Создать(Тип_attributes);
	
	Тип_dropWindow = ФабрикаXDTO.Тип("http://veeroute.com/", "dropWindow");
	//dropWindow = ФабрикаXDTO.Создать(Тип_dropWindow);
	
	Тип_dropWindows = ФабрикаXDTO.Тип("http://veeroute.com/", "dropWindows");
	//dropWindows = ФабрикаXDTO.Создать(Тип_dropWindows);
	
	Тип_orderItem = ФабрикаXDTO.Тип("http://veeroute.com/", "orderItem");
	orderItem = ФабрикаXDTO.Создать(Тип_orderItem);
	
	Тип_orderItems = ФабрикаXDTO.Тип("http://veeroute.com/", "orderItems");
	//orderItems = ФабрикаXDTO.Создать(Тип_orderItems);
	
	Тип_vehicleRequirements = ФабрикаXDTO.Тип("http://veeroute.com/", "vehicleRequirements");
	Тип_vehicleRequirement = ФабрикаXDTO.Тип("http://veeroute.com/", "vehicleRequirement");
	
	
	Тип_dynamicAttributes = ФабрикаXDTO.Тип("http://veeroute.com/", "dynamicAttributes");
	
	///////////////////////////////////////////////////////////////////////////////
	ИтКол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		order = ФабрикаXDTO.Создать(Тип_order);
		
		Забор = ВыборкаДетальныеЗаписи.Ссылка;
		
		client = ФабрикаXDTO.Создать(Тип_client);
		client.name = ВыборкаДетальныеЗаписи.КонтрагентНаименование; 
		client.contactPerson = ВыборкаДетальныеЗаписи.КонтрагентНаименование; 
		client.contactNumber = ВыборкаДетальныеЗаписи.Телефон;
				
		location = ФабрикаXDTO.Создать(Тип_location);
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АдресИзЯндекса) Тогда
			Адр = СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.ТочкаДоставки), ">", "");
			Адр = СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.ТочкаДоставки), "<", "");
		Иначе
			Адр = СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.АдресИзЯндекса), ">", "");
			Адр = СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.АдресИзЯндекса), "<", "");
		КонецеСли;	
		
		
		location.name      = Адр;
		location.address   = Адр; 
		location.latitude  = ВыборкаДетальныеЗаписи.Широта; 
		location.longitude = ВыборкаДетальныеЗаписи.Долгота;
				
		КатегорияДоставки = ВыборкаДетальныеЗаписи.КатегорияДоставки;
		//type       = ФабрикаXDTO.Создать(Тип_type);
		//attributes = ФабрикаXDTO.Создать(Тип_attributes);
		//type.attributes.Добавить(attributes);
		//
		//
		//Если ВыборкаДетальныеЗаписи.ОбъемБольшеЛибоРавноКуб Тогда
		//	type.name = "Забор больше 1м3";
		//Иначе
		//	type.name = "Забор меньше 1м3";
		//КонецеСли;	
		
		//Забор больше 1м3         Забор меньше 1м3
		
		//Если СокрЛП(ВыборкаДетальныеЗаписи.КонтрагентКод) = "Shop_248" Или СокрЛП(ВыборкаДетальныеЗаписи.КонтрагентКод) = "Shop_601" Тогда
		//	type.name = "СборYD";
		//ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.КонтрагентКод) = "Shop_438" Тогда
		//	type.name = "СборAX";
		//Иначе
		//	type.name = "Забор";
		//КонецеСли;	
		
		//type.name = "Тип заказа (Тип транспортного средства требуемый для перевозки)."   +
		//"Для каждого заказа может быть указан только один типа."             +
		//"Значение типа должно совпадать со значениями в справочнике «Типы машин» расположенном на экране «Настройки».";
		
		
		
		
		
		vehicleRequirements = ФабрикаXDTO.Создать(Тип_vehicleRequirements);
		//vehicleRequirements.value = СтрЗаменить(ВыборкаДетальныеЗаписи.ИМ, """", "");
		vehicleRequirement = ФабрикаXDTO.Создать(Тип_vehicleRequirement);
		
		Если ВыборкаДетальныеЗаписи.ОбъемБольшеЛибоРавноКуб Тогда
			vehicleRequirement.name = "Забор больше 1м3";
		Иначе	
			vehicleRequirement.name = "Забор меньше 1м3";
		КонецеСли;	
			
		vehicleRequirements.vehicleRequirement.Добавить(vehicleRequirement);
		
		///////
		
		vehicleRequirement = ФабрикаXDTO.Создать(Тип_vehicleRequirement);
		
		Если СокрЛП(ВыборкаДетальныеЗаписи.КонтрагентКод) = "Shop_248" Или СокрЛП(ВыборкаДетальныеЗаписи.КонтрагентКод) = "Shop_601" Или СокрЛП(ВыборкаДетальныеЗаписи.КонтрагентКод) = "Shop_752" Тогда
			vehicleRequirement.name = "СборYD";
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.КонтрагентКод) = "Shop_438" Тогда
			vehicleRequirement.name = "СборAX";
		Иначе
			vehicleRequirement.name = "Забор";
		КонецеСли;	
			
		vehicleRequirements.vehicleRequirement.Добавить(vehicleRequirement);
		
		order.vehicleRequirements = vehicleRequirements;
		
		
		// Объём
		order.volume = ВыборкаДетальныеЗаписи.ОбъемЗабора;
		// Вес
		order.capacity = ВыборкаДетальныеЗаписи.ВесЗабора;			
		
		
		
        Если ВыборкаДетальныеЗаписи.ВремяОжиданияПриЗабореТовара = 0 Тогда
            ВремяРазгрузки = ВыборкаДетальныеЗаписи.ТочкаДоставкиВремяПребывания;
        Иначе
            ВремяРазгрузки = Дата(1, 1, 1, 0, ВыборкаДетальныеЗаписи.ВремяОжиданияПриЗабореТовара, 0);
        КонецЕсли;
        order.durationDrop = Формат(ВремяРазгрузки,"ДЛФ=T");

		////Начало временного окна для работы в пункте назначения. 
		////Формат зависит от локализации в конфигурации аккаунта. 
		//Например, для Англии формат - “DD/MM/YYYY HH:MM”. Для России - “ДД.ММ.ГГГГ ЧЧ:ММ” 
		dropWindow = ФабрикаXDTO.Создать(Тип_dropWindow);
		//ДнейВперед = 0;
		Попытка
		dropWindow.start = Формат((Началодня(ВыборкаДетальныеЗаписи.Дата) - (НачалоДня("00010101")-ВыборкаДетальныеЗаписи.ТочкаДоставкиВремяРаботыНачало) + ДнейВперед*86400),"ДФ='дд.ММ.гггг ЧЧ:мм'");  
		dropWindow.end = Формат((Началодня(ВыборкаДетальныеЗаписи.Дата) - (НачалоДня("00010101")-ВыборкаДетальныеЗаписи.ТочкаДоставкиВремяРаботыОкончание) + ДнейВперед*86400),"ДФ='дд.ММ.гггг ЧЧ:мм'");
	Исключение
		Сообщить(ВыборкаДетальныеЗаписи.Номер);
		КонецПопытки;
		dropWindows = ФабрикаXDTO.Создать(Тип_dropWindows);
		dropWindows.dropWindow.Добавить(dropWindow);
		//"Конструкция содержащая информация о допустимых окнах для разгрузки/погрузки товара на территории клиента."+ 
		//"Каждая должна содержать в себе минимум одну конструкцию dropWindow, ее описание приведено ниже. Если заказ имеет несколько допустимых окон, ."+
		//"то заказ должен содержать несколько конструкций dropWindow вложенных в одну dropWindows";
		order.dropWindows.Добавить(dropWindows);
		////////////////
				
		order.additionalinstructions = ВыборкаДетальныеЗаписи.Комментарий;
		order.areaOfControl          = "Склад";
		order.date                   = Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yyyy");
		order.client                 = client;
		order.location               = location;
		order.collection             = Истина;//"Признак определяющий вид заказа. Возможные значения: true/false." +
		//-"Если указан true, создается заказ вида сбор, Если указан false, создается заказ вида доставка." +
		//--"В случае отсутствия значения, автоматически будет проставлено значение false и создан заказ вида доставка.";      
		/////////
		
		//order.dynamicAttributes = ;
		
		
		
		//Товары = Забор.Товары;
		//orderItems = ФабрикаXDTO.Создать(Тип_orderItems);
		//Для Каждого Товар Из Товары Цикл
		//	orderItem = ФабрикаXDTO.Создать(Тип_orderItem);				
		//	orderItem.name    = Строка(Товар.Номенклатура);
		//	orderItem.barcode = Товар.Номенклатура.Артикул;
		//	orderItems.orderitem.Добавить(orderItem);
		//КонецЦикла;
		//order.orderItems.Добавить(orderItems);
		order.orderReference         = СокрЛП(ВыборкаДетальныеЗаписи.Номер);
		//order.price                  = Формат(Забор.Груз.Стоимость,"ЧГ="); //сумма заказа
		//order.priority               = 1; // 1 – Низкий 2 – Средний 3 – Высокий
		//order.type.Добавить(type);    
		
		orders.order.Добавить(order);	
		ИтКол = ИтКол + 1;
	КонецЦикла;
	
	importOrders.sessionID = ИДСессии;
	importOrders.orders = orders;
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, importOrders);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	
	Т = Новый ТекстовыйДокумент;

	ИФ = ПолучитьИмяВременногоФайла();
	Т.УстановитьТекст(СтрокаXML);
	Т.Записать(ИФ);
	
    Ф = Новый ДвоичныеДанные(ИФ);
    Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	
	Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
	Выгр.Родитель = Справочники.ПакетыДанныхВероут.Заборы;
	Выгр.Данные = Хр;
	Выгр.ДатаВыгрузки = ТекущаяДата();
	Выгр.ТипСервера = Объект.ВидСервера;
	Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.ВыгрузкаЗаказа;
	Выгр.ТипВыгрузки = 2;	
	Выгр.КоличествоЗаказов = ИтКол;
	Выгр.ТерминалДоставки = ТерминалДоставки;
	Выгр.Записать();
	
	
	Ресурс = "distribution-api/orders/save";
	Если Не ВторойСервер Тогда
		ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML);
	Иначе
		ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML, Истина);
	КонецЕСли;	
	
	Ошибка = "";
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
			Выгр.ОшибкаПолученияДанныхОтСервера = Истина;
			Выгр.Записать();
		
		#Если Клиент Тогда
			Сообщить("Некорректный ответ с сервера при выгрузке заказов", СтатусСообщения.Важное);
		#КонецеСли
	Иначе
		Попытка
			//Ошибка = ПолученныйОбъект.objects.updatedObject.ПолучитьXDTO("errors");
			Ошибка = ПолученныйОбъект.ПолучитьXDTO("error");
		Исключение
			
		КонецПопытки;
		//#Если Клиент Тогда
		//	Сообщить("Возникла ошибка при выгрузке заказов", СтатусСообщения.Важное);
		//#КонецеСли
		
		Если Ошибка <> "" Тогда
			Выгр.КодОшибкиВыгрузки = Ошибка.errorCode;
			Выгр.ОшибкаВыгрузки = Ошибка.errorMessage;
			Выгр.Записать();
		КонецеСли;	
		
		Если Ошибка = "" Тогда
			Если Не ВторойСервер Тогда
				ЗаписатьСтатусВыгрузкиВВероут(ПолученныйОбъект, "Забор",, Выгр, истина);
			КонецеСли;	
		КонецеСли;
		
	КонецЕсли;	
		
КонецПроцедуры // СоздатьОбновитьЗаборы()

&НаСервере
//&НаКлиенте
Процедура ЗаписатьСтатусВыгрузкиВВероут(ПолученныйОбъект, ТипЗаказа, КолПропущено = 0, Выгрузка, Комм = Ложь)
	
	ПустР = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Если ТипЗнч(ПолученныйОбъект.orders.order) = Тип("СписокXDTO") Тогда // Список
		СписокСтатусовЗаказов = ПолученныйОбъект.orders.order;
		
		ЗаказовВыгружено = 0;
		ЗаказовСОшибкой  = 0;
		ЗаказовОбновлено = 0;
		
		Таб = Новый ТаблицаЗначений;
		Таб.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		Для Каждого Стр Из СписокСтатусовЗаказов Цикл
			Суффикс = "";
			Нов = Таб.Добавить();
			Нов.Номер = ВернутьНомерБезСуффикса(Стр.orderReference, Суффикс);
		КонецЦикла;	
		
		Зап = Новый Запрос;
		Если ТипЗаказа = "Заказ" Тогда
			Зап.Текст = "ВЫБРАТЬ
			|	Таб.Номер
			|ПОМЕСТИТЬ ТабНомеров
			|ИЗ
			|	&Таб КАК Таб
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслуг.Ссылка КАК Док,
			|	ТабНомеров.Номер КАК Номер
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабНомеров КАК ТабНомеров
			|		ПО РеализацияТоваровУслуг.Номер = ТабНомеров.Номер";
			Зап.УстановитьПараметр("Таб", Таб);
		Иначе
			Зап.Текст = "ВЫБРАТЬ
			|	Таб.Номер
			|ПОМЕСТИТЬ ТабНомеров
			|ИЗ
			|	&Таб КАК Таб
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаборТовара.Ссылка КАК Док,
			|	ТабНомеров.Номер КАК Номер
			|ИЗ
			|	Документ.ЗаборТовара КАК ЗаборТовара
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабНомеров КАК ТабНомеров
			|		ПО ЗаборТовара.Номер = ТабНомеров.Номер";
			Зап.УстановитьПараметр("Таб", Таб);
		КонецеСли;			
		РезНом = Зап.Выполнить().Выгрузить();
		
		
		ТекД = ТекущаяДата();
		НаборЗаписей = РегистрыСведений.СтатусыВыгрузкиВВероут.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекД);
		НаборЗаписей.Отбор.ВидСервера.Установить(Объект.ВидСервера);
		НаборЗаписей.Отбор.Данные.Установить(Выгрузка.Ссылка);
		
		
		ТабСтатусов = Новый ТаблицаЗначений;
		ТабСтатусов.Колонки.Добавить("Заказ");
		ТабСтатусов.Колонки.Добавить("НомерСтрокиДанных");
		
		Для Каждого Стр Из СписокСтатусовЗаказов Цикл	
			ТекстОшибки = "";
			Попытка
				ОшибкиВыгрузки = Стр.ПолучитьXDTO("errors");
			Исключение
				ОшибкиВыгрузки = Неопределено;
			КонецПопытки;
			
			НомерЗаказа    = Стр.orderReference;
			СтатусВыгрузки = Стр.Status;
			
			Если ОшибкиВыгрузки <> Неопределено Тогда
				Если ТипЗнч(ОшибкиВыгрузки.error) = Тип("СписокXDTO") Тогда // Список ошибок
					Для Каждого СтрОшибка Из ОшибкиВыгрузки.error Цикл
						
						ТекстОшибки = ТекстОшибки + СтрОшибка.errorCode +": "+ СтрОшибка.errorMessage + Символы.ПС;
						
					КонецЦикла;
				Иначе
					ТекстОшибки = ОшибкиВыгрузки.error.errorCode +": "+ ОшибкиВыгрузки.error.errorMessage;
				КонецЕсли;
			КонецЕсли;
			//ТекстОшибки    = ?(ОшибкиВыгрузки = Неопределено, "", ОшибкиВыгрузки.error.errorCode +": "+ ОшибкиВыгрузки.error.errorMessage);
			
			
			//ОПТИМИЗИРОВАТЬ
			//ЗаказДок = ?(ТипЗаказа = "Заказ", Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВернутьНомерБезСуффикса(НомерЗаказа, Суффикс)), Документы.ЗаборТовара.НайтиПоНомеру(НомерЗаказа));
			
			//ОПТИМИЗИРОВАТЬ
			Струк = Новый Структура;
			Струк.Вставить("Номер", ВернутьНомерБезСуффикса(НомерЗаказа, Суффикс));
			НайД = РезНом.НайтиСтроки(Струк);
			
			Если НайД.Количество() <> 0 Тогда
				ЗаказДок = НайД[0].Док;
			Иначе
				ЗаказДок = ПустР;
			КонецеСли;	
			
			Если НЕ ЗаказДок.Пустая() Тогда
				
				НайСт = ТабСтатусов.Найти(ЗаказДок);
				
				Если НайСт = Неопределено Тогда
					НовСт = ТабСтатусов.Добавить();
					НовСт.Заказ = ЗаказДок;
					НовСт.НомерСтрокиДанных = 1;
					НомерСтрокиДанных = 1;
				Иначе
					НомерСтрокиДанных = НайСт.НомерСтрокиДанных + 1;
					НайСт.НомерСтрокиДанных = НайСт.НомерСтрокиДанных + 1;
				КонецеСли;	
								
				НовЗапись = НаборЗаписей.Добавить();
				НовЗапись.Заказ = ЗаказДок;
				НовЗапись.СтатусВыгрузки_ = Перечисления.СтатусыВыгрузкиВВероут[СтатусВыгрузки];
				НовЗапись.ТекстОшибки    = ТекстОшибки;
				НовЗапись.Период         = ТекД;
				НовЗапись.ДатаПланирования = Объект.Дата;
				Если ЗначениеЗаполнено(Суффикс) Тогда
					НовЗапись.Суффикс = Число(Суффикс);
				КонецеСли;	
				НовЗапись.ВидСервера = Объект.ВидСервера;
				НовЗапись.Данные = Выгрузка.Ссылка;
				НовЗапись.НомерСтрокиДанных = НомерСтрокиДанных; 
			КонецЕсли;
			
			// Сообщение пользователю >>>
			Если СтатусВыгрузки = "Error" Тогда 
				ЗаказовСОшибкой  = ЗаказовСОшибкой + 1;
				
			ИначеЕсли СтатусВыгрузки = "Created" Тогда
				ЗаказовВыгружено = ЗаказовВыгружено + 1;
			ИначеЕсли СтатусВыгрузки = "Updated" Тогда
				ЗаказовОбновлено = ЗаказовОбновлено + 1;
			КонецЕсли;
			// Сообщение пользователю <<<
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);

		
		// Сообщение пользователю >>>
		ТекстСообщения = "=== Количество " + ТипЗаказа+"ов ===" + 
		Символы.ПС + ?(ЗаказовВыгружено>0, "= Создано: "+Строка(ЗаказовВыгружено),"")+
		Символы.ПС + ?(КолПропущено>0, "= Пропущено: "+Строка(КолПропущено),"")+
		Символы.ПС + ?(ЗаказовОбновлено>0, "== Обновлено: "+Строка(ЗаказовОбновлено),"") +
		Символы.ПС + ?(ЗаказовСОшибкой>0,  "=== Ошибка выгрузки: "+Строка(ЗаказовСОшибкой),"")+
		Символы.ПС + "=== = = = =  = = = = ===";
		Если Комм Тогда
			Сообщить(ТекстСообщения);
		КонецеСли;	
		// Сообщение пользователю <<<
		
	ИначеЕсли ТипЗнч(ПолученныйОбъект.orders.order) = Тип("ОбъектXDTO") Тогда // Один заказ
		Попытка
			ОшибкаВыгрузки = ПолученныйОбъект.orders.order.ПолучитьXDTO("errors");
		Исключение
			ОшибкаВыгрузки = Неопределено;
		КонецПопытки;
		
		Если ОшибкиВыгрузки <> Неопределено Тогда
			Если ТипЗнч(ОшибкиВыгрузки.error) = Тип("СписокXDTO") Тогда // Список ошибок
				Для Каждого СтрОшибка Из ОшибкиВыгрузки.error Цикл
					ТекстОшибки = ТекстОшибки + СтрОшибка.errorCode +": "+ СтрОшибка.errorMessage + Символы.ПС;
				КонецЦикла;
			Иначе
				ТекстОшибки = ОшибкиВыгрузки.error.errorCode +": "+ ОшибкиВыгрузки.error.errorMessage;
			КонецЕсли;
		КонецЕсли;		
		
		НомерЗаказа    = ПолученныйОбъект.orders.order.orderReference;
		СтатусВыгрузки = ПолученныйОбъект.orders.order.status;		
		//ТекстОшибки    = ?(ОшибкаВыгрузки = Неопределено, "", ОшибкаВыгрузки.error.errorCode +": "+ ОшибкаВыгрузки.error.errorMessage);		
		// Добавление записей в РС
		Суффикс = "";
		ЗаказДок = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВернутьНомерБезСуффикса(НомерЗаказа, Суффикс));
		Если НЕ ЗаказДок.Пустая() Тогда
			ТекД = ТекущаяДата();
			НаборЗаписей = РегистрыСведений.СтатусыВыгрузкиВВероут.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заказ.Установить(ЗаказДок);
			НаборЗаписей.Отбор.Период.Установить(ТекД);
			НаборЗаписей.Отбор.ВидСервера.Установить(Объект.ВидСервера);
			НаборЗаписей.Отбор.Данные.Установить(Выгрузка.Ссылка);
			
			НовЗапись = НаборЗаписей.Добавить();
			НовЗапись.Заказ = ЗаказДок;
			НовЗапись.СтатусВыгрузки_ = Перечисления.СтатусыВыгрузкиВВероут[СтатусВыгрузки];
			НовЗапись.ТекстОшибки    = ТекстОшибки;
			НовЗапись.Период         = ТекД;
			НовЗапись.ДатаПланирования = Объект.Дата;
			Если ЗначениеЗаполнено(Суффикс) Тогда
				НовЗапись.Суффикс = Число(Суффикс);
			КонецеСли;	
			НовЗапись.ВидСервера = Объект.ВидСервера;
			НовЗапись.Данные = Выгрузка.Ссылка;
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		ТекстСообщения = "";
		// Сообщение пользователю >>>
		Если СтатусВыгрузки = "Error" Тогда 
			ТекстСообщения = "Ошибка выгрузки " + ТипЗаказа+"а: " + НомерЗаказа + " : " + ТекстОшибки;
		ИначеЕсли СтатусВыгрузки = "Created" Тогда
			ТекстСообщения = "Выгружен " + ТипЗаказа+": " + НомерЗаказа;
		ИначеЕсли СтатусВыгрузки = "Updated" Тогда
			ТекстСообщения = "Обновлен " + ТипЗаказа+": " + НомерЗаказа;
		КонецЕсли;
		Если ТекстСообщения = "" Тогда
			//	
		Иначе
			Если Комм Тогда
				Сообщить(ТекстСообщения);
			КонецеСли;	
		КонецЕсли;
		// Сообщение пользователю <<<
		
	Иначе
		//...
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ГеоРайоны

//&НаСервере
//Процедура ВыгрузитьГеоРайоныНаСервере()
//  СформироватьXMLПоГеорайонам();
//КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьГеоРайоны(Команда)
	//ВыгрузитьГеоРайоныНаСервере();
	СформироватьXMLПоГеорайонам();
КонецПроцедуры

&НаКлиенте
Функция СформироватьXMLПоГеорайонам()
	
	Тип_areas = ФабрикаXDTO.Тип("http://www.nova-areas.ru", "areas");
	Массив_areas = ФабрикаXDTO.Создать(Тип_areas);
	
	Тип_area = ФабрикаXDTO.Тип("http://www.nova-areas.ru", "area");
	
	Тип_ribs = ФабрикаXDTO.Тип("http://www.nova-areas.ru", "ribs");
	Тип_dots = ФабрикаXDTO.Тип("http://www.nova-areas.ru", "dots");
	Тип_rib = ФабрикаXDTO.Тип("http://www.nova-areas.ru", "rib");
	Тип_dot = ФабрикаXDTO.Тип("http://www.nova-areas.ru", "dot");
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   новаГеоРайоны.Наименование,
	|   новаГеоРайоны.Точки.(
	|       Ссылка,
	|       НомерСтроки,
	|       Широта,
	|       Долгота
	|   ),
	|   новаГеоРайоны.Ребра.(
	|       Ссылка,
	|       НомерСтроки,
	|       Широта1,
	|       Долгота1,
	|       Широта2,
	|       Долгота2
	|   )
	|ИЗ
	|   Справочник.новаГеоРайоны КАК новаГеоРайоны
	|ГДЕ
	|   НЕ новаГеоРайоны.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		area = ФабрикаXDTO.Создать(Тип_area);
		area.name = ВыборкаДетальныеЗаписи.Наименование;
		
		Массив_dots = ФабрикаXDTO.Создать(Тип_dots);
		ВыборкаТочки = ВыборкаДетальныеЗаписи.Точки.Выбрать();
		Пока ВыборкаТочки.Следующий() Цикл
			dot = ФабрикаXDTO.Создать(Тип_dot);
			dot.latitude = ВыборкаТочки.Широта;
			dot.longitude = ВыборкаТочки.Долгота;
			Массив_dots.dot.Добавить(dot);
		КонецЦикла;
		area.dots = Массив_dots;
		
		Массив_ribs = ФабрикаXDTO.Создать(Тип_ribs);
		ВыборкаРебра =ВыборкаДетальныеЗаписи.Ребра.Выбрать();
		Пока ВыборкаРебра.Следующий() Цикл
			rib = ФабрикаXDTO.Создать(Тип_rib);
			rib.latitude1 = ВыборкаРебра.Широта1;
			rib.longitude1 = ВыборкаРебра.Долгота1;
			rib.latitude2 = ВыборкаРебра.Широта2;
			rib.longitude2 = ВыборкаРебра.Долгота2;
			Массив_ribs.rib.Добавить(rib);
		КонецЦикла;
		area.ribs = Массив_ribs;
		
		Массив_areas.area.Добавить(area);    
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);
	ЗаписьXML.ОткрытьФайл(Объект.АдресФайла,ПараметрыЗаписиXML); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Массив_areas);
	ФайлXML = ЗаписьXML.Закрыть();
	
КонецФункции // СформироватьXMLПоГеорайонам()

#КонецОбласти 

#Область Прочие

&НаСервере
//&НаКлиенте
Функция ВыполнитьPostЗапрос(Ресурс, СтрокаТекста = Неопределено, ВторойСервер = Ложь);
	//Если не ВторойСервер Тогда
	//	Если Объект.ВидСервера = 1 Тогда
	//		Сервер = "prof.veeroute.com";   	
	//	Иначе
	//		Сервер = "trial3.veeroute.com";
	//	КонецЕСли;
	//Иначе
	//	//Сервер = "46.182.25.196";
	//	Сервер = "trial3.veeroute.com";
	//КонецЕсли;
	
	Если Объект.ВидСервера = 1 Тогда
		Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресБоевогоСервера) Тогда
			Сервер = "prof.veeroute.com";
		Иначе
			Сервер = ТерминалДоставки.vr_АдресБоевогоСервера;
		КонецеСли;	
	Иначе
		Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресТестовогоСервера) Тогда
			Сервер = "trial3.veeroute.com";
		Иначе
			Сервер = ТерминалДоставки.vr_АдресТестовогоСервера;
		КонецеСли;			
	КонецеСли;	
	
	ОбщийРесурс = "/rest/2/";
	
	РесурсНаСервере = ОбщийРесурс + Ресурс;
	
	
	Попытка
		Соединение = Новый HTTPСоединение(Сервер, , , , , 600);
	Исключение
		//#Если Клиент Тогда
			Сообщить("Не удалось установить соединение с сервером:" 
			+ Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		//#КонецеСли
		Возврат Неопределено;
	КонецПопытки;
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	
	//Формируем заголовок POST-запроса.
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/xml");
	
	
	
	//Создаём файл отправки - содержимое POST-запроса. 
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("xml");
	Если СтрокаТекста = Неопределено Тогда
		Запрос = Новый HTTPЗапрос(РесурсНаСервере);
		Запрос.УстановитьТелоИзСтроки(""); 
	Иначе
		Запрос = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовокHTTP);
		Запрос.УстановитьТелоИзСтроки(СтрокаТекста, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать); 
	КонецеСли;	
	
	
	//Попытка
		Соединение.ОтправитьДляОбработки(Запрос, ИмяФайлаРезультата);
		Соединение = Неопределено;
	//Исключение 
	//	//#Если Клиент Тогда
	//		Сообщить("Не удалось получить данные с сервера:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	//	//#КонецеСли
	//	Возврат Неопределено;
	//КонецПопытки;
	
	
	Т = Новый ТекстовыйДокумент;
	Т.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
	Стр_ = Т.ПолучитьТекст();
	Стр_ = СтрЗаменить(Стр_, """АвиаПарк""", "АвиаПарк");
	Стр_ = СтрЗаменить(Стр_, "&laquo", "&#1042");
	Стр_ = СтрЗаменить(Стр_, "&raquo", "&#1042");
	Стр_ = СтрЗаменить(Стр_, "&nbsp", "&#1042");
	
	Т.УстановитьТекст(Стр_);
	Т.Записать(ИмяФайлаРезультата);
	
	
	ФайлРезультата = Новый ЧтениеXML();
	ФайлРезультата.ОткрытьФайл(ИмяФайлаРезультата);
	Фабрика = Новый ФабрикаXDTO;
	Попытка
		Результат = Фабрика.ПрочитатьXML(ФайлРезультата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Результат;
КонецФункции	

&НаСервере
//&НаКлиенте
//&НаКлиенте
Функция ПолучитьСессию()
	
	Если Объект.ВидСервера = 1 Тогда
		Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресБоевогоСервера) тогда
			Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";
		Иначе                                                 //strizh
			Ресурс = "authentication/createSession?accountID=" + СокрЛП(ТерминалДоставки.vr_АккаунтБоевогоСервера) + "&user=" + СокрЛП(ТерминалДоставки.vr_БоевойСерверИмяПользователя) + "&password=" + СокрЛП(ТерминалДоставки.vr_БоевойСерверПарольПользователя);
		КонецеСли;	
	ИначеЕсли Объект.ВидСервера = 2 Тогда
		Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресТестовогоСервера) тогда
			Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";      //dzhigurda
		Иначе
			Ресурс = "authentication/createSession?accountID=" + СокрЛП(ТерминалДоставки.vr_АккаунтТестовогоСервера) + "&user=" + СокрЛП(ТерминалДоставки.vr_ТестовыйСерверИмяПользователя) + "&password=" + СокрЛП(ТерминалДоставки.vr_ТестовыйСерверПарольПользователя);
		КонецеСли;	
	КонецеСли;	
		
	//Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";
	////Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=dzhigurda";
	
	
	ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс);
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
		#Если Клиент Тогда
			Сообщить("Некорректный ответ с сервера при получении сессии", СтатусСообщения.Важное);
		#КонецеСли
		Возврат Неопределено;
	Иначе
		Возврат ПолученныйОбъект.authResponse.sessionID;
	КонецеСли	
КонецФункции	

//&НаКлиенте
//&НаСервере
//Функция ПолучитьСессиюВторогоСервера()
//	
//	//ид склада 840
//	
//	Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";
//	ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс,,Истина);
//	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
//		#Если Клиент Тогда
//			Сообщить("Некорректный ответ с сервера при получении сессии", СтатусСообщения.Важное);
//		#КонецеСли
//		Возврат Неопределено;
//	Иначе
//		Возврат ПолученныйОбъект.authResponse.sessionID;
//	КонецеСли	
//КонецФункции

&НаКлиенте
Процедура ИзменитьРеквизитыТранспорта(Команда)
	ОткрытьФорму("Обработка.ВыгрузкаМашинВВероут.Форма.ФормаЗаполненияРеквизитовТранспорта");
КонецПроцедуры

&НаКлиенте
Процедура АдресФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; 
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите файл"; 
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "XML-файл (*.xml)|*.xml"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	Диалог.Каталог = "С:\"; 
	Если Диалог.Выбрать() Тогда 
		Объект.АдресФайла = Диалог.ПолноеИмяФайла; 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
//&НаКлиенте
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ТекущаяДата() > Дата(2017, 11, 15, 13, 0, 0) Тогда
		Сообщить("Обмен данных с помощью этой обработки запрещен!" + Символы.ПС + "Используйте ""Местная доставка-Интеграция с VeeRoute-Выгрузка машин в Veeroute (по распределительным центрам)""");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Объект.Дата = ТекущаяДата();
	Объект.ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов = Истина;
	ФлажокВыпоненные = 2;
	ФлажокВыгрузитьЗаказы = Истина;
	Объект.ВидСервера = 1;
	//+++ БАО 26.07.2017 №1504 
	//Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование) = "Администратор УТЛ" Или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование) = "Тыщенко Игорь" Тогда
	//	Элементы.ВидСервера.Доступность = Истина;
	//	Элементы.ФлажокВыпоненные.Доступность = Истина;
	//Иначе
	//	Элементы.ВидСервера.Доступность = Ложь;
	//	Элементы.ФлажокВыпоненные.Доступность = Ложь;
	//КонецЕсли;	
	//
	//Если Найти(Константы.БазаСД.Получить(), "test") > 0 Тогда
	//	Объект.ВидСервера = 2;
	//КонецеСли;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Объект.ВидСервера = 2;
	КонецеСли;

	
	Если РольДоступна("ВыгрузкаЗаказовВТестовыйVeeroute") Или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование) = "Администратор УТЛ" Тогда
		Элементы.ВидСервера.Доступность = Истина;
		Элементы.ФлажокВыпоненные.Доступность = Истина;
	Иначе
		Элементы.ВидСервера.Доступность = Ложь;
		Элементы.ФлажокВыпоненные.Доступность = Ложь;
	КонецЕсли;	
	
	//--- БАО 26.07.2017 №1504 
	
	
	ТерминалДоставкиПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТерминалДоставки");
	
	Если ЗначениеЗаполнено(ТерминалДоставкиПользователя) Тогда
		ТерминалДоставки = ТерминалДоставкиПользователя;
	Иначе	
		ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж;
	КонецеСли;	
	
	Если Не РольДоступна("Админы") Тогда
		Элементы.ТерминалДоставки.ТолькоПросмотр = Истина;
	КонецеСли;	
	
	
	Объект.ВидВыгрузки = 1;
	ПриУстановкеВидаВыгрузки();
	
	Если ИмяПользователя() = "АдминистраторУТЛ" Тогда
		
		Элементы.ТестированиеРасписания.Видимость = Истина;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
//&НаКлиенте
Процедура УдалитьВсеЗаказыНаСервере()
	УдалитьВсеЗаказы();
	УдалитьВсеЗаборы();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеЗаказы1(Команда)
	От = Вопрос("Удалить все заказы?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	
	Если От = КодВозвратаДиалога.Да Тогда
		УдалитьВсеЗаказыНаСервере();
	КонецеСли;	
КонецПроцедуры


Функция ВернутьНомерБезСуффикса(Ном, Суффикс = "")
	Стр = "";
	Суффикс = "";
	Ном = СокрЛП(Ном);
	Для Сч = 1 По СтрДлина(Ном) Цикл
		Смв = Сред(Ном, Сч, 1);
		Если Смв = "_" Тогда
			НомСф = Сч + 1;
			Суффикс = Сред(Ном, НомСф, СтрДлина(Ном) - НомСф + 1);
			Прервать;
		КонецеСли;
		Стр = Стр + Смв;
	КонецЦикла;	
	Возврат Стр;
КонецФункции	


Функция ПолучитьДатуВероут(ДатаВероут)
	Попытка
		РезДата = Дата(Сред(ДатаВероут,7,4)+Сред(ДатаВероут,4,2)+лев(ДатаВероут,2)+Сред(ДатаВероут,12,2)+Сред(ДатаВероут,15,2)+ "00");	
	Исключение
		РезДата = Дата("00010101");
	Конецпопытки;
	Возврат РезДата;
КонецФункции	

Функция ПроанализироватьДатуЗаказа(Заказ, Рейс)
	Если Объект.ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов Тогда
		Если НачалоДня(Заказ.Дата) <> НачалоДня(Объект.Дата) Тогда
			ТекД = ТекущаяДата();
			
			Наб = РегистрыСведений.ЗаказыНеЗагруженныеВРейсы.СоздатьНаборЗаписей();
			Наб.Отбор.Период.Установить(ТекД);
			Наб.Отбор.Заказ.Установить(Заказ);
			Наб.Отбор.Рейс.Установить(Рейс);
			Наб.Отбор.ПричинаПропускаЗагрузки.Установить(Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказПеренесен);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекД;
			Нов.Заказ = Заказ;
			Нов.ПричинаПропускаЗагрузки = Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказПеренесен;
			Нов.Рейс = Рейс;
			
			Наб.Записать();
			
			Возврат Ложь;
		КонецеСли;	
	КонецеСли;	
	Возврат Истина;
КонецФункции	



Функция ПроанализироватьДатуЗаказаНовая(Заказ, Рейс, ДатаЗаказа)
	Если Объект.ПропускЗагрузкиЗаказовСДатойДоставкиОтличнойОтДатыРейсов Тогда
		Если НачалоДня(ДатаЗаказа) <> НачалоДня(Объект.Дата) Тогда
			ТекД = ТекущаяДата();
			
			Наб = РегистрыСведений.ЗаказыНеЗагруженныеВРейсы.СоздатьНаборЗаписей();
			Наб.Отбор.Период.Установить(ТекД);
			Наб.Отбор.Заказ.Установить(Заказ);
			Наб.Отбор.Рейс.Установить(Рейс);
			Наб.Отбор.ПричинаПропускаЗагрузки.Установить(Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказПеренесен);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекД;
			Нов.Заказ = Заказ;
			Нов.ПричинаПропускаЗагрузки = Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказПеренесен;
			Нов.Рейс = Рейс;
			
			Наб.Записать();
			
			Возврат Ложь;
		КонецеСли;	
	КонецеСли;	
	Возврат Истина;
КонецФункции	



Функция ПроанализироватьСостояниеЗаказа(Заказ, Рейс)
	Если Заказ.СтатусИнтернетМагазина = 4 Тогда
		ТекД = ТекущаяДата();
		
		Наб = РегистрыСведений.ЗаказыНеЗагруженныеВРейсы.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекД);
		Наб.Отбор.Заказ.Установить(Заказ);
		Наб.Отбор.Рейс.Установить(Рейс);
		Наб.Отбор.ПричинаПропускаЗагрузки.Установить(Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказОтклонен);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекД;
		Нов.Заказ = Заказ;
		Нов.ПричинаПропускаЗагрузки = Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказОтклонен;
		Нов.Рейс = Рейс;
		
		Наб.Записать();
		
		Возврат Ложь;
	КонецеСли;	
	Возврат Истина;
КонецФункции	


Функция ПроанализироватьСостояниеЗаказаНовое(Заказ, Рейс, Статус)
	Если Статус = 4 Тогда
		ТекД = ТекущаяДата();
		
		Наб = РегистрыСведений.ЗаказыНеЗагруженныеВРейсы.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекД);
		Наб.Отбор.Заказ.Установить(Заказ);
		Наб.Отбор.Рейс.Установить(Рейс);
		Наб.Отбор.ПричинаПропускаЗагрузки.Установить(Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказОтклонен);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекД;
		Нов.Заказ = Заказ;
		Нов.ПричинаПропускаЗагрузки = Перечисления.ПричиныНепривязкиЗаказовПриВыгрузкеИзВероута.ЗаказОтклонен;
		Нов.Рейс = Рейс;
		
		Наб.Записать();
		
		Возврат Ложь;
	КонецеСли;	
	Возврат Истина;
КонецФункции	



Функция НайтиЗаказ(НомерЗаказа)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	            |	РеализацияТоваровУслуг.Дата КАК ДатаЗаказа,
	            |	РеализацияТоваровУслуг.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Номер = &Номер";
	Зап.УстановитьПараметр("Номер", НомерЗаказа);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Выб.Заказ);
		Струк.Вставить("ДатаЗаказа", Выб.ДатаЗаказа);
		Струк.Вставить("СтатусИнтернетМагазина", Выб.СтатусИнтернетМагазина);
		Возврат Струк;
	Иначе	
		Возврат Неопределено;		
	КонецеСли;	
Конецфункции	


Функция НайтиЗабор(НомерЗаказа)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗаборТовара.Ссылка КАК Заказ,
	            |	ЗаборТовара.Дата КАК ДатаЗаказа,
	            |	ЗаборТовара.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.Номер = &Номер";
	Зап.УстановитьПараметр("Номер", НомерЗаказа);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Выб.Заказ);
		Струк.Вставить("ДатаЗаказа", Выб.ДатаЗаказа);
		Струк.Вставить("СтатусИнтернетМагазина", Выб.СтатусИнтернетМагазина);
		Возврат Струк;
	Иначе	
		Возврат Неопределено;		
	КонецеСли;	
Конецфункции	



Функция ПолучитьИДРаспредЦентра()
	Если Объект.ВидСервера = 1 Тогда
		Возврат Формат(ТерминалДоставки.vr_ИдРаспредЦентраБоевогоСервера, "ЧН=0; ЧГ=");;
	Иначе
		Возврат Формат(ТерминалДоставки.vr_ИдРаспредЦентраТестовогоСервера, "ЧН=0; ЧГ=");
	КонецеСли;	
КонецФункции	

&НаСервере
//&НаКлиенте
Функция ЗагрузитьРасписаниеНаСервере(ИДТранспорта = Неопределено) Экспорт
	
	// Вставить содержимое обработчика.
	ИДСессии = ПолучитьСессию(); 
	//Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&aocID=781";
	
	ИдЦентра = ПолучитьИДРаспредЦентра();
	
	Если ИДТранспорта = Неопределено Тогда
		Если Объект.ВидСервера = 1 Тогда
			Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&aocID=" + ?(ИдЦентра = 0, "825", ИдЦентра);
		Иначе
			Ресурс = "distribution-api/schedules/getScheduleByAOCOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&aocID=" + ?(ИдЦентра = 0, "781", ИдЦентра);                              //781
		КонецеСли;	
	Иначе
		Ресурс = "distribution-api/schedules/getScheduleByVehicleOnDate?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&vehicleID=" + Формат(ИДТранспорта, "ЧН=0; ЧГ=");
	КонецеСли;
	
	Попытка
	Результат = ВыполнитьPostЗапрос(Ресурс);
Исключение
	Возврат Неопределено;
	КонецПопытки;
	Х = 1;
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Результат);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Т = Новый ТекстовыйДокумент;

	ИФ = ПолучитьИмяВременногоФайла();
	Т.УстановитьТекст(СтрокаXML);
	Т.Записать(ИФ);
	
    Ф = Новый ДвоичныеДанные(ИФ);
    Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	
	Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
	Выгр.Родитель = Справочники.ПакетыДанныхВероут.ЗагрузкаДанных;
	Выгр.Данные = Хр;
	Выгр.ДатаВыгрузки = ТекущаяДата();
	Выгр.ТипСервера = Объект.ВидСервера;
	Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.ЗагрузкаРасписания;
	Выгр.ТерминалДоставки = ТерминалДоставки;
	Если ИДТранспорта = Неопределено Тогда
		Выгр.ОбщаяВыгрузка = Истина;
	Иначе
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	Рейс.Ссылка КАК Рейс,
		            |	Рейс.ТерминалДоставки КАК ТерминалДоставки
		            |ИЗ
		            |	Документ.Рейс КАК Рейс
		            |ГДЕ
		            |	Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
		            |	И Рейс.Идентификатор = &Идентификатор";
		Зап.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));			
		Зап.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));			
		Зап.УстановитьПараметр("Идентификатор", ИДТранспорта);	
		Рез = Зап.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			Выгр.Рейс = Рез.Рейс;
			Если ТерминалДоставки.Пустая() Тогда
				ТерминалДоставки = Рез.ТерминалДоставки;
			КонецеСли;	
		КонецеСли;	
	КонецеСли;	
	Выгр.ТипВыгрузки = 1;
	Выгр.Записать();
	
	Попытка
	СписокРейсов_ = Результат.scheduleResponse.vehicles.vehicle;
Исключение
	Возврат Неопределено;
	КонецПопытки;
	Если ТипЗнч(СписокРейсов_) = Тип("ОбъектXDTO") Тогда
		СписокРейсов = Новый Массив;
		СписокРейсов.Добавить(СписокРейсов_);
	Иначе
		СписокРейсов = СписокРейсов_;
	КонецеСли;	
	
    Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗагрузкаРейсовВероут.Ссылка КАК Док,
	            |	ЗагрузкаРейсовВероут.Рейсы.(
	            |		Ссылка КАК Ссылка,
	            |		НомерСтроки КАК НомерСтроки,
	            |		Рейс КАК Рейс,
	            |		Рейс.Идентификатор КАК Идентификатор
	            |	) КАК Рейсы
	            |ИЗ
	            |	Документ.ФормированиеРейсов КАК ЗагрузкаРейсовВероут
	            |ГДЕ
	            |	ЗагрузкаРейсовВероут.ДатаРейсов МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ЗагрузкаРейсовВероут.ПометкаУдаления = ЛОЖЬ
	            |	И ЗагрузкаРейсовВероут.РежимЗагрузкиДанных = 1
	            |	И ЗагрузкаРейсовВероут.ТерминалДоставки = &ТерминалДоставки";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));			
	Зап.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);			
	Рез = Зап.Выполнить().Выбрать();
	
	СписокРейсовБД = Неопределено;
	
	НачатьТранзакцию();
	
	Если Не Рез.Следующий() Тогда
		Загрузка = Документы.ФормированиеРейсов.СоздатьДокумент();
		Загрузка.Дата = ТекущаяДата();
		Загрузка.ДатаРейсов = Объект.Дата;
		Загрузка.РежимЗагрузкиДанных = 1;
		Загрузка.axi_Загрузка = Ложь;
		Загрузка.ТерминалДоставки = ТерминалДоставки;
	Иначе
		Загрузка = Рез.Док.ПолучитьОбъект();
		Загрузка.Рейсы.Очистить();
		СписокРейсовБД = Рез.Рейсы.Выгрузить();
	КонецеСли;	
	
	КолРейсов = 0;
	КолОш = 0;
	Для Каждого Тек_ Из СписокРейсов Цикл
		Если СписокРейсовБД = Неопределено Тогда
			Рейс = Документы.Рейс.СоздатьДокумент();
			Рейс.РежимЗагрузкиДанных = 1;
			Рейс.ДатаРейса = Объект.Дата;
		Иначе
			НайденныйРейс = СписокРейсовБД.Найти(Число(Тек_.id));
			Если НайденныйРейс = Неопределено Тогда
				Рейс = Документы.Рейс.СоздатьДокумент();
				Рейс.РежимЗагрузкиДанных = 1;
				Рейс.ДатаРейса = Объект.Дата;
			Иначе
				Рейс = НайденныйРейс.Рейс.ПолучитьОбъект();
				Рейс.Точки.Очистить();
				//Рейс.Заказы.Очистить();
				Струк = Новый Структура;
				Струк.Вставить("ЗаказДобавленВРучную", Ложь);
				Най = Рейс.Заказы.НайтиСтроки(Струк);
				
				Для Каждого ТекЗ Из Най Цикл
					Рейс.Заказы.Удалить(ТекЗ);
				КонецЦикла;	
				Рейс.Поездки.Очистить();
			КонецеСли;	
		КонецеСли;
		
		Рейс.Дата = Объект.Дата;
		Рейс.axi_Загрузка = Ложь;
		
		Если ЗначениеЗаполнено(ЭтаФорма.ТерминалДоставки) Тогда
			Рейс.ТерминалДоставки = ЭтаФорма.ТерминалДоставки;
		КонецЕсли;
			
		
		Рейс.Идентификатор = Число(Тек_.id);
		
		ТранспортВероут = Справочники.ТипыТранспортовВероут.НайтиПоНаименованию(Тек_.name);
		Если ТранспортВероут.Пустая() Тогда
			ТранспортВероут = Справочники.ТипыТранспортовВероут.СоздатьЭлемент();
			//+++ БАО 27.09.2017 №1880
			ИДЦентраДляПоиска = Формат(ИдЦентра, "ЧГ=0");
			
			ТранспортВероут.Владелец = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоРеквизиту("КодVeeroute", ИДЦентраДляПоиска);
			Если Не ЗначениеЗаполнено(ТранспортВероут.Владелец) Тогда
				ТранспортВероут.Владелец = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоНаименованию("Склад");
			КонецЕсли;	
			//--- БАО 27.09.2017 №1880
			ТранспортВероут.Наименование = Тек_.name;
			ТранспортВероут.Записать();
		КонецЕсли;	
		
		Рейс.Транспорт = ТранспортВероут.Ссылка;
		
		Тек = Тек_.run;
		Если ТипЗнч(Тек) = Тип("СписокXDTO") Тогда
			Тек = Тек[0];
		КонецеСли;	
		Поездка = Рейс.Поездки.Добавить();
		Попытка
			Поездка.НомерПоездки = Тек.runNumber;
		Исключение
			КолОш = КолОш + 1;
			Сообщить("Ошибка загрузки! Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + ", идентификатор: " + СокрЛП(Рейс.Идентификатор) + ". Ошибка - " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецПопытки;
		КолРейсов = КолРейсов + 1;

		Поездка.ДатаПоездки = Тек.runDay;
		Поездка.ПланируемаяДистанция = Тек.planDistance;
		Поездка.ПланируемаяПродолжительностьПоездки = Тек.planDuration;
		Поездка.ПланируемоеВремяНачалаПоездки = ПолучитьДатуВероут(Тек.runStartTime);
		Поездка.ПланируемоеВремяОкончанияПоездки = ПолучитьДатуВероут(Тек.runEndTime);
		Попытка
		Поездка.ВремяНачалаДоступностиВодителя = ПолучитьДатуВероут(Тек.availabilityStartTime);
		Поездка.ВремяОкончанияДоступностиВодителя = ПолучитьДатуВероут(Тек.availabilityEndTime);
	исключение
		
		КонецПопытки;
		попытка
		Поездка.ОбщийВес = Тек.planWeight;
		Поездка.ОбщийОбъем = Тек.planVolume;
		Поездка.СтоимостьПоездки = Тек.cost;
	исключение
	конецпопытки        ;
	;
		Для Каждого ТекЛокация Из Тек.location Цикл
			Точка = Рейс.Точки.Добавить();
			Если ТекЛокация.locationType = "PICKUP" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.PICKUP;
			ИначеЕсли ТекЛокация.locationType = "DROP" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.DROP;
				Точка.НомерПоездки = ТекЛокация.Number;
			ИначеЕсли ТекЛокация.locationType = "BACK_TO_HOME" Тогда
				Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.BACK_TO_HOME;
			КонецеСли;
			
			Точка.Широта = ТекЛокация.latitude;
			Точка.Долгота = ТекЛокация.longitude;
			Точка.ПлановоеРасстояние = ТекЛокация.mileage;
			Точка.НаименованиеТочки = ТекЛокация.name;
			Точка.ПланируемоеВремяПрибытия = ПолучитьДатуВероут(ТекЛокация.planArrivalTime);
			Попытка
				Точка.ПланируемаяВремяОтправления = ПолучитьДатуВероут(ТекЛокация.planDepartureTime);
			Исключение
				
			КонецПопытки;	
			Точка.ВремяДвиженияПоПлану = ТекЛокация.planDrivingTime;
			Точка.ЗапланированнаяДлительностьОстановки = ТекЛокация.planStopDuration;
			
			Если Точка.ТипРасположения = Перечисления.ТипыРасположенияТочки.DROP Тогда
				Если ТипЗнч(ТекЛокация.order) = Тип("СписокXDTO") Тогда
					Для Каждого ТекЗаказ Из ТекЛокация.order Цикл
						НайденныеДанные = НайтиЗаказ(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						
						ДатаЗаказа = "";
						СтатусИМ = 0;
						Если НайденныеДанные = Неопределено Тогда
							//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
							НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
							Если НайденныеДанные = Неопределено Тогда
								Продолжить;
							Иначе
								ЗаказКДобавлению = НайденныеДанные.Заказ;
								ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
								СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
							КонецеСли;	
						Иначе
							ЗаказКДобавлению = НайденныеДанные.Заказ;
							ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
							СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
						КонецеСли;	
						
						//ЗаказКДобавлению = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						//Если ЗаказКДобавлению.Пустая() Тогда
						//	//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
						//	НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						//КонецеСли;	
						
						Если Не ПроанализироватьДатуЗаказаНовая(ЗаказКДобавлению, Рейс.Ссылка, ДатаЗаказа) Тогда
							Продолжить;
						КонецеСли;	
						
						//Если Не ПроанализироватьДатуЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
						//	Продолжить;	
						//КонецеСли;
						//Если Не ПроанализироватьСостояниеЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
						//	Продолжить;	
						//КонецеСли;
						Если Не ПроанализироватьСостояниеЗаказаНовое(ЗаказКДобавлению, Рейс.Ссылка, СтатусИМ) Тогда
							Продолжить;	
						КонецеСли;
						
						
						НайЗаказ = Рейс.Заказы.Найти(ЗаказКДобавлению);
						
						Если НайЗаказ <> Неопределено Тогда
							НовЗаказ = НайЗаказ;
							НовЗаказ.ЗагруженИзВероут = Истина;
						Иначе
							НовЗаказ = Рейс.Заказы.Добавить();;
						КонецеСли;   
						
						НовЗаказ.Заказ = ЗаказКДобавлению;
						
						НовЗаказ.СтатусЗаказа = Справочники.СтатусыЗаказовВероут.НайтиПоНаименованию(ТекЗаказ.status);
						Если ТекЗаказ.task = "DROP" Тогда 
							НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.DROP;
						ИначеЕсли ТекЗаказ.task = "COLLECTION" Тогда 	
							НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.COLLECTION;
						КонецеСли;
						попытка
						НовЗаказ.Объем = ТекЗаказ.volume;
						НовЗаказ.Вес = ТекЗаказ.weight;
					исключение
						конецпопытки;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ТекЛокация.order) = Тип("ОбъектXDTO") Тогда
					ТекЗаказ = ТекЛокация.order;
					
					//ЗаказКДобавлению = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
					//Если ЗаказКДобавлению.Пустая() Тогда
					//	ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
					//КонецеСли;	
					
					НайденныеДанные = НайтиЗаказ(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
					
					ДатаЗаказа = "";
					СтатусИМ = 0;
					Если НайденныеДанные = Неопределено Тогда
						//ЗаказКДобавлению = Документы.ЗаборТовара.НайтиПоНомеру(ТекЗаказ.orderReference);
						НайденныеДанные = НайтиЗабор(ВернутьНомерБезСуффикса(ТекЗаказ.orderReference));
						Если НайденныеДанные = Неопределено Тогда
							Продолжить;
						Иначе
							ЗаказКДобавлению = НайденныеДанные.Заказ;
							ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
							СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
						КонецеСли;	
					Иначе
						ЗаказКДобавлению = НайденныеДанные.Заказ;
						ДатаЗаказа = НайденныеДанные.ДатаЗаказа;
						СтатусИМ = НайденныеДанные.СтатусИнтернетМагазина;
					КонецеСли;	
					
					
					
					
					Если Не ПроанализироватьДатуЗаказаНовая(ЗаказКДобавлению, Рейс.Ссылка, ДатаЗаказа) Тогда
						Продолжить;	
					КонецеСли;
					//Если Не ПроанализироватьСостояниеЗаказа(ЗаказКДобавлению, Рейс.Ссылка) Тогда
					//	Продолжить;	
					//КонецеСли;
					
					Если Не ПроанализироватьСостояниеЗаказаНовое(ЗаказКДобавлению, Рейс.Ссылка, СтатусИМ) Тогда
						Продолжить;	
					КонецеСли;
					
					
					НайЗаказ = Рейс.Заказы.Найти(ЗаказКДобавлению);
					
					Если НайЗаказ <> Неопределено Тогда
						НовЗаказ = НайЗаказ;
						НовЗаказ.ЗагруженИзВероут = Истина;
					Иначе
						НовЗаказ = Рейс.Заказы.Добавить();
					КонецеСли;
					НовЗаказ.Заказ = ЗаказКДобавлению;
					
					НовЗаказ.СтатусЗаказа = Справочники.СтатусыЗаказовВероут.НайтиПоНаименованию(ТекЗаказ.status);
					Если ТекЗаказ.task = "DROP" Тогда 
						НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.DROP;
					ИначеЕсли ТекЗаказ.task = "COLLECTION" Тогда 	
						НовЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.COLLECTION;
					КонецеСли;
					попытка
					НовЗаказ.Объем = ТекЗаказ.volume;
					НовЗаказ.Вес = ТекЗаказ.weight;
				исключение
					конецпопытки;
				КонецеСли;	
			КонецеСли;	
		КонецЦикла;	
		
		Если Рейс.РейсМестнойДоставки.Пустая() Тогда
			нРейс = БизнесПроцессы.новаРейсМестнойДоставки.СоздатьБизнесПроцесс();
			нРейс.Дата = Объект.Дата;
			нРейс.ДатаНачала = НачалоДня(Объект.Дата) + 32400;
			нРейс.ДатаКонца = НачалоДня(Объект.Дата) + 82800;
			нРейс.РейсЗагруженИзВероут = Истина;
			нРейс.Записать();
			нРейс.Старт();
			
			Рейс.РейсМестнойДоставки = нРейс.Ссылка;
			
			//
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			            |	новаЗадачаРейсаМестнойДоставки.Ссылка Как План
			            |ИЗ
			            |	Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
			            |ГДЕ
			            |	новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка = &Рейс
			            |	И новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = ЗНАЧЕНИЕ(справочник.новаэтапыместнойдоставки.планированиеместнойдоставки)
			            |	И новаЗадачаРейсаМестнойДоставки.Выполнена = ЛОЖЬ";
			Зап.УстановитьПараметр("Рейс", нРейс.Ссылка);			
			РезЗадач = Зап.Выполнить().Выбрать();
			Если РезЗадач.Следующий() Тогда
				Задача = РезЗадач.План.ПолучитьОбъект();
				Задача.ВыполнитьЗадачу();
			КонецеСли;	
		КонецЕсли;
		
		//+++ БАО 08.06.2017 №1024 
		//Если Не Рейс.РейсЗакрыт Тогда
		Если Не baoВызовСервера.РейсЗакрыт(Рейс.Ссылка) Тогда
		//--- БАО 08.06.2017 №1024 	
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			Если Не Рейс.ПометкаУдаления Тогда
				Рейс.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Сообщить("Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + " не может быть проведен!", СтатусСообщения.ОченьВажное);
			КонецЕсли;	
			Сообщить("Загружен рейс " + СокрЛП(Рейс.Транспорт.Наименование) + ", идентификатор: " + СокрЛП(Рейс.Идентификатор), СтатусСообщения.Обычное);
		Иначе
			Сообщить("Рейс " + СокрЛП(Рейс.Транспорт.Наименование) + " уже закрыт! Данные загружены не будут!", СтатусСообщения.ОченьВажное);
		КонецеСли;	
		
		Если ИДТранспорта = Неопределено Тогда
			НовР = Загрузка.Рейсы.Добавить();
			НовР.Рейс = Рейс.Ссылка;
			// раскомментировать после обновления
			НовР.ВремяПрибытия = Поездка.ПланируемоеВремяОкончанияПоездки;
		КонецеСли;
		// раскомментировать после обновления
		
	КонецЦикла;	
	
	Сообщить("_________________________________________________________________");
	Сообщить("Итог загрузки: " + Строка(КолРейсов) + " загружено!");
	Если КолОш = 0 Тогда
		Сообщить("Ошибок загрузки нет!");
	Иначе
		Сообщить("НЕ ЗАГРУЖЕНО рейсов: " + Строка(КолОш), СтатусСообщения.ОченьВажное);
	КонецеСли;	
	Если ИДТранспорта = Неопределено Тогда	
		//+++ БАО 05.10.2017 №1180
		//---Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса;
		Если ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
			Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса;
		Иначе 		
			Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс;
		КонецЕсли;	
		//--- БАО 05.10.2017 №1180
		Загрузка.Записать(РежимЗаписиДокумента.Запись);
	КонецеСли;	
	ЗафиксироватьТранзакцию();
	Возврат Загрузка.Ссылка;
КонецФункции

&НаСервере
//&НаКлиенте
//+++ БАО 27.06.2017 №1180
//---Процедура СформироватьНомераПалетт(Загрузка)
Процедура СформироватьНомераПалетт(Загрузка) Экспорт 
//--- БАО 27.06.2017 №1180

#Область ПеренесеновВОбщийМодуль
//+++ БАО 06.10.2017 №1918 - перенесли в общий модуль



//Док = Загрузка.ПолучитьОбъект();
	
//	Зап = Новый Запрос;
 //   Если Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.Случайно Или не значениезаполнено(Загрузка.РежимНазначенияНомеровПалет) Тогда
 //   	Зап.Текст = "ВЫБРАТЬ
 //   	|	ЗагрузкаРейсовВероутРейсы.Рейс.Ссылка КАК Рейс
 //   	|ИЗ
 //   	|	Документ.ЗагрузкаРейсовВероут.Рейсы КАК ЗагрузкаРейсовВероутРейсы
 //   	|ГДЕ
 //   	|	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка = &Док
 //   	|
 //   	|УПОРЯДОЧИТЬ ПО
 //   	|	ЗагрузкаРейсовВероутРейсы.Рейс.Транспорт.Наименование";
 //   ИначеЕсли Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоВремениОкончанияРейса Тогда
 //   	Зап.Текст = "ВЫБРАТЬ
 //   	|	РейсПоездки.ПланируемоеВремяОкончанияПоездки КАК ВремяПрибытия,
 //   	|	РейсПоездки.Ссылка.Ссылка КАК Рейс
 //   	|ИЗ
 //   	|	Документ.Рейс.Поездки КАК РейсПоездки
 //   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаРейсовВероут.Рейсы КАК ЗагрузкаРейсовВероутРейсы
 //   	|		ПО РейсПоездки.Ссылка.Ссылка = ЗагрузкаРейсовВероутРейсы.Рейс.Ссылка
 //   	|ГДЕ
 //   	|	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка = &Док
 //   	|
 //   	|УПОРЯДОЧИТЬ ПО
 //   	|	ПланируемоеВремяОкончанияПоездки УБЫВ";
 //   ИначеЕсли Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса Тогда
 //   	Зап.Текст = "ВЫБРАТЬ
 //   	            |	РейсПоездки.ПланируемоеВремяОкончанияПоездки КАК ВремяПрибытия,
 //   	            |	РейсПоездки.Ссылка.Ссылка КАК Рейс,
 //   	            |	ВЫБОР
 //   	            |		КОГДА РейсПоездки.Ссылка.Транспорт.Наименование ПОДОБНО ""Ларгус%""
 //   	            |			ТОГДА 3
 //   	            |		КОГДА РейсПоездки.Ссылка.Транспорт.Наименование ПОДОБНО ""WW%""
 //   	            |			ТОГДА 1
 //   	            |		ИНАЧЕ 2
 //   	            |	КОНЕЦ КАК Приоритет
 //   	            |ИЗ
 //   	            |	Документ.Рейс.Поездки КАК РейсПоездки
 //   	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаРейсовВероут.Рейсы КАК ЗагрузкаРейсовВероутРейсы
 //   	            |		ПО РейсПоездки.Ссылка.Ссылка = ЗагрузкаРейсовВероутРейсы.Рейс.Ссылка
 //   	            |ГДЕ
 //   	            |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка = &Док
 //   	            |
 //   	            |УПОРЯДОЧИТЬ ПО
 //   	            |	Приоритет,
 //   	            |	РейсПоездки.ПланируемоеВремяОкончанияПоездки УБЫВ";
 //   	
 //   //+++ БАО 27.06.2017 №1180
 //   
 //   ИначеЕсли Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс Тогда
 //   
 //   //--- БАО 27.06.2017 №1180
 //   	
 //   КонецеСли;	
 //   
 //
 //   //+++ БАО 27.06.2017 №1180
 //   ТекущийПрефикс = 0;
 //   
 //   //Для Тестов
 //   //Док = Документы.ЗагрузкаРейсовВероут.НайтиПоНомеру("000000910");
 //   //ПолучитьФорма("Обработка.ВыгрузкаМашинВВероут.Форма.ФормаУправляемая").СформироватьНомераПалетт(Док);
 //   Если Загрузка.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс Тогда
 //   	
 //   //+++ БАО 27.06.2017 №926
 //		Рез = bao.СформироватьНомераПалетПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс(Загрузка.Ссылка)
 //   //--- БАО 27.06.2017 №1180
 //   
 //   Иначе
 //   
 //   	Зап.УстановитьПараметр("Док", Загрузка.Ссылка);			
 //   	
 //   	Рез = Зап.Выполнить().Выгрузить(); 
 //   	
 //   	НП = 1; 
 //   
 //   	Для Каждого Тек Из Рез Цикл
 //   		
 //   	Рейс = Тек.Рейс.ПолучитьОбъект();
 //   	Рейс.НомерПалетты = НП;
 //   	
 //   			
 //   	Попытка
 //   		
 //   		Рейс.Записать(РежимЗаписиДокумента.Запись);
 //   		
 //   	Исключение

 //   	КонецПопытки;
 //   	
 //   	НП = НП + 1;
 //   	
 //   КонецЦикла;	
 //   
 //   //+++ БАО 27.06.2017 №1180
 //   КонецЕсли;
 //   //--- БАО 27.06.2017 №1180
 

	
	//Док.ФормироватьНомераПалетт = Истина;
	//Док.Записать(РежимЗаписиДокумента.Запись);
	//      
	
	//--- БАО 06.10.2017 №1180
	
#КонецОбласти	

	Рез = baoВызовСервера.СформироватьНомераПалетт(Загрузка);

	//+++++Серегин М.В. 25.03.2016 10:09:06 
    ПерепривязатьМашиныКЗаборам(Рез.ВыгрузитьКолонку("Рейс"));
    //-----Серегин М.В. 25.03.2016 10:09:07 
    
КонецПроцедуры

//
&НаСервере
Процедура ПерепривязатьМашиныКЗаборам(МассивРейсов)

    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПривязкаМашинКРейсамСрезПоследних.Рейс,
        |   ПривязкаМашинКРейсамСрезПоследних.Транспорт,
        |   ПривязкаМашинКРейсамСрезПоследних.Водитель,
        |   ПривязкаМашинКРейсамСрезПоследних.Экспедитор
        |ПОМЕСТИТЬ ВТ_Рейсы
        |ИЗ
        |   РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
        |ГДЕ
        |   НЕ ПривязкаМашинКРейсамСрезПоследних.Транспорт = &Транспорт
        |   И ПривязкаМашинКРейсамСрезПоследних.Рейс В(&Рейсы)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   РейсЗаказы.Заказ КАК Забор,
        |   ВТ_Рейсы.Рейс,
        |   ВТ_Рейсы.Транспорт,
        |   ВТ_Рейсы.Водитель,
        |   ВТ_Рейсы.Экспедитор
        |ИЗ
        |   ВТ_Рейсы КАК ВТ_Рейсы
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
        |       ПО ВТ_Рейсы.Рейс = РейсЗаказы.Ссылка
        |ГДЕ
        |   РейсЗаказы.Заказ ССЫЛКА Документ.ЗаборТовара";
    
    Запрос.УстановитьПараметр("Рейсы", МассивРейсов);
    Запрос.УстановитьПараметр("Транспорт", Справочники.новаТранспорт.ПустаяСсылка());
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ЗаборОбъект = ВыборкаДетальныеЗаписи.Забор.ПолучитьОбъект();
        ЗаборОбъект.Транспорт = ВыборкаДетальныеЗаписи.Транспорт;
        ЗаборОбъект.Водитель = ВыборкаДетальныеЗаписи.Водитель;
        ЗаборОбъект.Экспедитор = ВыборкаДетальныеЗаписи.Экспедитор;
        ЗаборОбъект.Записать(РежимЗаписиДокумента.Запись);
    КонецЦикла;

КонецПроцедуры // ()


	
&НаКлиенте
Процедура ЗагрузитьРасписание(Команда)
	МожноЗагружать = may.ПроверкаНаОконченностьСобытия(Справочники.СобытияКонтроляВремени.ЗагрузкаРейсовИзВероут, ТерминалДоставки);
	Если Не МожноЗагружать Тогда
		Предупреждение("Уже происходит загрузка данных из вероута!! Выгрузка произведена не будет!");
		Возврат;
	КонецеСли;	
	
	may.ЗагрузкаРейсовИзВероут(Ложь, ТерминалДоставки);
	Загрузка = ЗагрузитьРасписаниеНаСервере();
	may.ЗагрузкаРейсовИзВероут(Истина, ТерминалДоставки);
	Если Не Загрузка.ФормироватьНомераПалетт Тогда
		От = Вопрос("Сформировать номера палетт?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если От = КодВозвратаДиалога.Да Тогда
			СформироватьНомераПалетт(Загрузка.Ссылка);
		КонецеСли;	
	КонецеСли;
	
	Предупреждение("Загрузка данных завершена!");
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьРейсы(Команда)
	ОткрытьФорму("Документ.Рейс.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтатусыВыгрузки(Команда)
	ОткрытьФорму("РегистрСведений.СтатусыВыгрузкиВВероут.ФормаСписка");
КонецПроцедуры

&НаСервере
Процедура ЗагрПНаСервере()
	// Вставить содержимое обработчика.
	СформироватьНомераПалетт(Загр.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрП(Команда)
	ЗагрПНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриУстановкеВидаВыгрузки()
	Если Объект.ВидВыгрузки = 1 Тогда
		Элементы.ЗаказКВыгрузке.Доступность = Ложь;
	ИначеЕсли Объект.ВидВыгрузки = 2 Тогда	
		Элементы.ЗаказКВыгрузке.Доступность = Истина;
	ИначеЕсли Объект.ВидВыгрузки = 3 Тогда	
		Элементы.ЗаказКВыгрузке.Доступность = Ложь;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ВидВыгрузкиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПриУстановкеВидаВыгрузки();
	
	Если Объект.ВидВыгрузки = 3 Тогда	
		Элементы.ГруппаПраваяЧасть.Видимость = Истина;
	Иначе
		Элементы.ГруппаПраваяЧасть.Видимость = Ложь;
	КонецеСли;
КонецПроцедуры

//+++ БАО 13.07.2017 №1338 
&НаСервере
Функция  ИмпортГотовогоРасписанияВВероут(МассивСсылок) Экспорт 
	
	Если ТипЗнч(МассивСсылок) <> Тип("Массив") Тогда 
		
	    Ссылка = МассивСсылок;
		
		Массив = Новый Массив;
		Массив.Добавить(Ссылка);
		
	Иначе 
		
		Массив = МассивСсылок;
		
	КонецЕсли;	
	
	
		
	
	Тип_save = ФабрикаXDTO.Тип("http://veeroute.com/schedules", "apiRequest");     	
	Тип_runs = ФабрикаXDTO.Тип("http://veeroute.com/schedules", "runs");
	Тип_run = ФабрикаXDTO.Тип("http://veeroute.com/schedules", "run");
	Тип_orders = ФабрикаXDTO.Тип("http://veeroute.com/schedules", "orders");
	Тип_order = ФабрикаXDTO.Тип("http://veeroute.com/schedules", "order");

	apiRequest = ФабрикаXDTO.Создать(Тип_save);
	
	runs = ФабрикаXDTO.Создать(Тип_runs);
	
	apiRequest.runs = runs;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", Массив);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РейсЗаказы.Ссылка.Транспорт.Наименование КАК vehicleName,
	               |	РейсЗаказы.Ссылка.ДатаРейса КАК allocationDate,
	               |	1 КАК number,
	               |	РейсЗаказы.НомерСтроки КАК sequence,
	               |	РейсЗаказы.Заказ.Номер КАК НомерЗаказа,
	               |	РейсЗаказы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Рейс.Заказы КАК РейсЗаказы
	               |ГДЕ
	               |	РейсЗаказы.Ссылка В (&МассивСсылок)
	               |ИТОГИ
	               |	МАКСИМУМ(vehicleName),
	               |	МАКСИМУМ(allocationDate),
	               |	МАКСИМУМ(number)
	               |ПО
	               |	Ссылка";

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);  
	
	ИДСессии = ПолучитьСессию(); 
	
	Пока Выборка.Следующий() Цикл 
		
		run = ФабрикаXDTO.Создать(Тип_run);
		orders = ФабрикаXDTO.Создать(Тип_orders);
		
		apiRequest.sessionID = ИДСессии;
		run.vehicleName = СтрЗаменить(Выборка.vehicleName, " ","");
		//run.driverName = Выборка.driverName;
		run.allocationDate = "" + Формат(Выборка.allocationDate,"ДФ=dd.MM.yyyy") + "";

		run.number = Выборка.number;
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			order = ФабрикаXDTO.Создать(Тип_order);
			order.reference =  СокрЛП(ВыборкаДетальныеЗаписи.НомерЗаказа) +"_"+ Формат(Выборка.allocationDate, "ДФ=MMdd");
			order.sequence = ВыборкаДетальныеЗаписи.sequence;
			run.order.Добавить(order);
			
		КонецЦикла;
		
				
		apiRequest.runs.run.Добавить(run);
		
	КонецЦикла;
	
	//При большом кол-ве заказов, пока заполнится XML, сессия становится не активной.

	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, apiRequest);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Т = Новый ТекстовыйДокумент;
	
	ИФ = ПолучитьИмяВременногоФайла();
	Т.УстановитьТекст(СтрокаXML);
	Т.Записать(ИФ);
	
	Ф = Новый ДвоичныеДанные(ИФ);
	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	
	Выгр = Справочники.ПакетыДанныхВероут.СоздатьЭлемент();
	Выгр.Родитель = Справочники.ПакетыДанныхВероут.Расписание;
	Выгр.Данные = Хр;
	Выгр.ДатаВыгрузки = ТекущаяДата();
	Выгр.ТипСервера = Объект.ВидСервера;
	Выгр.ТипОперации = Перечисления.ВидыОперацийVeeroute.ВыгрузкаРасписания;
	Выгр.ТипВыгрузки = 1;
	//Выгр.КоличествоЗаказов = ИтКол;
	Выгр.ТерминалДоставки = ТерминалДоставки;
	Выгр.Записать();

	ИдЦентра = ПолучитьИДРаспредЦентра();
	//Ресурс = "/rest/2/distribution-api/schedules/import";
	
	Если Объект.ВидСервера = 1 Тогда   //БОЕВОЙ !!!!
		Ресурс = "distribution-api/schedules/import?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&aocID=" + ?(ИдЦентра = 0, "825", ИдЦентра);
		Иначе
		Ресурс = "distribution-api/schedules/import?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&aocID=" + ?(ИдЦентра = 0, "781", ИдЦентра);                              //781
	КонецеСли;	
	
	ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, СтрокаXML, Ложь);
	//ПолученныйОбъект = Неопределено;
	
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
		
		Выгр.ОшибкаПолученияДанныхОтСервера = Истина;
		Выгр.Записать();
		
		Сообщить("Некорректный ответ с сервера при выгрузке заказов", СтатусСообщения.Важное);
		
	Иначе
		
		Попытка
			Ошибка = ПолученныйОбъект.runs.run.error.errorCode + " - " + ПолученныйОбъект.runs.run.error.errorMessage;
			Возврат Ошибка;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции	

&НаСервере
Процедура ТестВыгрузкаДанныхРасписанияНаСервере()
	
	Если ЗначениеЗаполнено(РейсДляТестирования) Тогда 
		
		Ошибка = ИмпортГотовогоРасписанияВВероут(РейсДляТестирования);
		Сообщить(Ошибка);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТестВыгрузкаДанныхРасписания(Команда)
	ТестВыгрузкаДанныхРасписанияНаСервере();
КонецПроцедуры

//--- БАО 13.07.2017 №1338 


// МАС - 19.09.2017 - №1844 --->> 
Процедура ПолучитьДанныеПоЗонамЗаказов() Экспорт
	
	ИДСессии = ПолучитьСессию(); 
	
	Ресурс = "distribution-api/orders/getOrdersWithZone?sessionID=" + ИДСессии + "&date=" + Формат(Объект.Дата, "ДЛФ=D") + "&aocID=825";	
	
	Попытка	
		Результат = ВыполнитьPostЗапрос(Ресурс);		
	Исключение
		// обработать исключение	
	КонецПопытки;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("zoneId");
	ТЗ.Колонки.Добавить("zoneName");
	ТЗ.Колонки.Добавить("OrderID");
	ТЗ.Колонки.Добавить("Зона");
	ТЗ.Колонки.Добавить("Заказ");
	
	// обход результата
	Если Результат.OrdersWithZoneResponse.orders.order.Количество() Тогда
		
		ТекВр = НачалоДня(Объект.Дата);
		
		Для каждого Стр Из Результат.OrdersWithZoneResponse.orders.order Цикл
			
			Попытка				
				Если ЗначениеЗаполнено(Стр.zoneId) Тогда			
					НСтр = ТЗ.Добавить();
					НСтр.zoneId   = Число(СтрЗаменить(Стр.zoneId, Символы.НПП, ""));
					НСтр.zoneName = Стр.zoneName;
					НСтр.OrderID  = Лев(СокрЛП(Стр.referenceNumber), 7);
				Иначе
					НСтр = ТЗ.Добавить();
				    НСтр.zoneId   = -5;
					НСтр.zoneName = "Пустая зона";
					НСтр.OrderID  = Лев(СокрЛП(Стр.referenceNumber), 7);			
				КонецЕсли;							
				
			Исключение
				НСтр = ТЗ.Добавить();
			    НСтр.zoneId   = -5;
				НСтр.zoneName = "Пустая зона";
				НСтр.OrderID  = Лев(СокрЛП(Стр.referenceNumber), 7);		
			КонецПопытки;					
		
		КонецЦикла;	
		
		СписокЗон = ТЗ.ВыгрузитьКолонку("zoneId");
		
		ЗапросЗоны = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                          |	ЗоныПланированияVeeroute.Ссылка КАК Зона,
		                          |	ЗоныПланированияVeeroute.ИдентификаторЗоныVeeroute КАК zoneId
		                          |ИЗ
		                          |	Справочник.ЗоныПланированияVeeroute КАК ЗоныПланированияVeeroute
		                          |ГДЕ
		                          |	ЗоныПланированияVeeroute.ИдентификаторЗоныVeeroute В(&СписокЗон)
		                          |	И ЗоныПланированияVeeroute.ПометкаУдаления = ЛОЖЬ");
		ЗапросЗоны.УстановитьПараметр("СписокЗон", СписокЗон);
		ЗоныТЗ = ЗапросЗоны.Выполнить().Выгрузить();	
		
		
		Для каждого СтЗона Из ТЗ Цикл
			
			НайЗона = ЗоныТЗ.НайтиСтроки(Новый Структура("zoneId", СтЗона.zoneId));
			Если НайЗона.Количество() Тогда
				СтЗона.Зона = НайЗона[0].Зона;
			Иначе	
			    СтЗона.Зона = СоздатьЭлементСправочника_ЗоныПланированияVeeroute(СтЗона);
				НЗона = ЗоныТЗ.Добавить();
				НЗона.Зона = СтЗона.Зона;
				НЗона.zoneId = СтЗона.zoneId;
			КонецЕсли;		
			
		КонецЦикла;
		
		
		СписокЗаказов = ТЗ.ВыгрузитьКолонку("OrderID");
		
		ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		                            |	РеализацияТоваровУслуг.Номер КАК OrderID
		                            |ИЗ
		                            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		                            |ГДЕ
		                            |	РеализацияТоваровУслуг.Номер В(&СписокЗаказов)
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ РАЗЛИЧНЫЕ
		                            |	ЗаборТовара.Ссылка,
		                            |	ЗаборТовара.Номер
		                            |ИЗ
		                            |	Документ.ЗаборТовара КАК ЗаборТовара
		                            |ГДЕ
		                            |	ЗаборТовара.Номер В(&СписокЗаказов)");
		ЗапросЗаказы.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
		ЗаказыТЗ = ЗапросЗаказы.Выполнить().Выгрузить();
			
		
		Для каждого СтЗак Из ЗаказыТЗ Цикл	
			СтЗак.OrderID = СокрЛП(СтЗак.OrderID);			
		КонецЦикла;	
		
		
		
		
		Для каждого Ст Из ТЗ Цикл
			
			//НайЗона = ЗоныТЗ.НайтиСтроки(Новый Структура("zoneId", Ст.zoneId));
			//Если НайЗона.Количество() Тогда
			//	Ст.Зона = НайЗона[0].Зона;
			//Иначе	
			//    Ст.Зона = СоздатьЭлементСправочника_ЗоныПланированияVeeroute(Ст);
			//КонецЕсли;
			
			
			НайЗаказ = ЗаказыТЗ.НайтиСтроки(Новый Структура("OrderID", Ст.OrderID));
			Если НайЗаказ.Количество() Тогда
				Ст.Заказ = НайЗаказ[0].Заказ;
			Иначе	
			    Ст.Заказ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			КонецЕсли;
			
				
			
			//Запись в РС НазначенныеЗоныПланированияVeeroute
			Если ЗначениеЗаполнено(Ст.Заказ) Тогда
				
				Набор = РегистрыСведений.НазначенныеЗоныПланированияVeeroute.СоздатьНаборЗаписей(); 
				Набор.Отбор.Заказ.Установить(Ст.Заказ);
				Набор.Отбор.Период.Установить(ТекВр);
				Набор.Прочитать();
				Набор.Очистить();
				
				НЗапись = Набор.Добавить();
				НЗапись.Период = ТекВр;
				НЗапись.Заказ = Ст.Заказ;
				НЗапись.ЗонаПланирования = Ст.Зона;
				
				Набор.Записать();			
			
			КонецЕсли;		
			
		КонецЦикла;
	
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоЗонамЗаказов1(Команда)
	
	ПолучитьДанныеПоЗонамЗаказов();
	ПоказатьПредупреждение(, "Данные загружены");
	
КонецПроцедуры


Функция СоздатьЭлементСправочника_ЗоныПланированияVeeroute(Ст)

	НЭлемент = Справочники.ЗоныПланированияVeeroute.СоздатьЭлемент();
	НЭлемент.Наименование = Ст.zoneName;
	НЭлемент.ИдентификаторЗоныVeeroute = Ст.zoneId;
	НЭлемент.Владелец = ТерминалДоставки;
	НЭлемент.Записать();

	Возврат НЭлемент.Ссылка;
	
КонецФункции // ()

// <<--- МАС 


#КонецОбласти 

