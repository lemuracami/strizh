
#Область МаршрутизацияСервер

&НаСервере
Функция МаршрутизацияСервер_ПолучитьТипАдресаФинальнойТочкиМаршрутаРейса(ВыбранныйРейс) Экспорт
	Возврат ВыбранныйРейс.ТипФинальнойТочкиМаршрута;
КонецФункции

&НаСервере
Процедура МаршрутизацияСервер_ЗафиксироватьФинальнуюТочкуРейса(Данные, ВыбранныйРейс) Экспорт
	Рейс = ВыбранныйРейс.ПолучитьОбъект();
	Рейс.ТипФинальнойТочкиМаршрута = Данные.ТипАдреса;
	Рейс.АдресФинальнойТочкиМаршрута = Данные.ТипАдреса;
	Рейс.ШиротаФинальнойТочкиМаршрута = Данные.Широта;
	Рейс.ДолготаФинальнойТочкиМаршрута = Данные.РаспознанныйАдрес;
	Рейс.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

&НаСервере
Функция МаршрутизацияСервер_РаспечатанМЛ(ВыбранныйРейс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", ВыбранныйРейс);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.КонтрольВремени КАК КонтрольВремени
	|ГДЕ
	|	КонтрольВремени.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста)
	|	И КонтрольВремени.Рейс = &Рейс";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ПолучитьГеокоординатыТекущейТочки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Рейс.ТерминалДоставки.Склад.ТочкаДоставки.Адрес.Широта КАК Широта,
	|	Рейс.ТерминалДоставки.Склад.ТочкаДоставки.Адрес.Долгота КАК Долгота
	|ИЗ
	|	Документ.Рейс КАК Рейс
	|ГДЕ
	|	Рейс.Ссылка = &Рейс";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Новый Структура("latitude,longitude", Выборка.Широта, Выборка.Долгота);
	
КонецФункции

&НаСервере
Функция МаршрутизацияСервер_НадоЗапрашиватьЯММаршрутизациюПослеФиксацииМаршрута() Экспорт
	Возврат Константы.ЗапрашиватьЯндексМаршрутизациюПослеПостроенияМаршрута.Получить();
КонецФункции

&НаСервере
Функция МаршрутизацияСервер_СобратьДанныеЗаказовДляМаршрутизацииЯМ(ВыбранныйРейс) Экспорт
	Зап = Новый Запрос;
	Зап.УстановитьПараметр("ТаблицаПорядка", Объект.ПорядокЗаказов.Выгрузить());
	Зап.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПорядка.Заказ КАК Заказ,
	|	ТаблицаПорядка.ПорядокМаршрутизации КАК ПорядокМаршрутизации
	|ПОМЕСТИТЬ ВТ_Порядок
	|ИЗ
	|	&ТаблицаПорядка КАК ТаблицаПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номер, ЗаборТовара.Номер) КАК Номер,
	|	ВТ_Порядок.ПорядокМаршрутизации КАК ПорядокСортировки
	|ИЗ
	|	ВТ_Порядок КАК ВТ_Порядок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВТ_Порядок.Заказ = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|		ПО ВТ_Порядок.Заказ = ЗаборТовара.Ссылка";
	//Зап.Текст = "ВЫБРАТЬ
	//            |	Заказ.Номер КАК Номер,
	//            |	Заказ.ПорядокСортировки КАК ПорядокСортировки,
	//            |	Заказ.Ссылка КАК Заказ
	//            |ИЗ
	//            |	Документ.Заказ КАК Заказ
	//            |ГДЕ
	//            |	Заказ.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.РезультатыДоставки.КДоставке)
	//            |	И Заказ.Рейс = &Рейс";
	Зап.УстановитьПараметр("Рейс", ВыбранныйРейс);
	
	МасСтруктур = Новый Массив;
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Струк = Новый Структура;
		Струк.Вставить("strizhId", Выб.Номер);
		Струк.Вставить("routeIndex", Выб.ПорядокСортировки);
		МасСтруктур.Добавить(Струк);
	КонецЦикла;	                      
	
	Возврат МасСтруктур;
КонецФункции
#КонецОбласти

#Область МаршрутизацияКлиент

&НаКлиенте
Функция МаршрутизацияКлиент_ЗапуститьМаршрутизациюЯМ(ВыбранныйРейс) Экспорт
	ДанныеТекущейТочки = Неопределено;
	ВыбранноеВремя = Неопределено;
	Если Не МаршрутизацияСервер_РаспечатанМЛ(ВыбранныйРейс) Тогда
		СписокВремени = МаршрутизацияКлиент_СформироватьСписокВремени();
		ВыбранноеВремя = СписокВремени.ВыбратьЭлемент("Время выезда");
		Если ВыбранноеВремя = Неопределено Тогда
			Возврат Неопределено;
		КонецеСли;	
		
		//выбор конечной точки
		//Если МаршрутизацияСервер_ПолучитьТипАдресаФинальнойТочкиМаршрутаРейса(ВыбранныйРейс) = 0 Тогда
		//	ФормаВводаАдреса = ПолучитьФорму("Обработка.РМПостроенияМаршрутаЭкипажами.Форма.ФормаВводаАдреса");
		//	Результат = ФормаВводаАдреса.ОткрытьМодально();
		//	Если Результат <> Неопределено Тогда
		//		МаршрутизацияСервер_ЗафиксироватьФинальнуюТочкуРейса(Результат, ВыбранныйРейс);
		//	КонецеСли;		
		//КонецеСли;	
	Иначе
		//ДанныеМ = ОбщегоНазначенияКлиент.ТекущиеКоординаты();
		//
		//
		//Если ДанныеМ <> Неопределено Тогда
		//	ДанныеТекущейТочки = Новый Структура;
		//	ДанныеТекущейТочки.Вставить("latitude", ДанныеМ.Координаты.Широта);
		//	ДанныеТекущейТочки.Вставить("longitude", ДанныеМ.Координаты.Долгота);
		//	//Сообщить("Широта: " + Строка(ДанныеМ.Координаты.Широта) + ", долгота: " + ДанныеМ.Координаты.Долгота);
		//Иначе
		//	Сообщить("Не могу получить текущие координаты!");
		//	Возврат Неопределено;
		//КонецеСли;
		
			//ДанныеТекущейТочки = Новый Структура;
			//ДанныеТекущейТочки.Вставить("latitude", 55.782061);
			//ДанныеТекущейТочки.Вставить("longitude", 37.570858);
			
		ДанныеТекущейТочки = ПолучитьГеокоординатыТекущейТочки();
	КонецеСли;
	
	СтрукФинАдреса = Новый Структура;
	
	СтрукФинАдреса.Вставить("ТипАдреса", Объект.ТипФинальнойТочкиМаршрута);
	СтрукФинАдреса.Вставить("ШиротаДолгота", СтрЗаменить(СокРЛП(Объект.ШиротаФинальнойТочкиМаршрута) + ";" + СокрЛП(Объект.ДолготаФинальнойТочкиМаршрута), ",", "."));

	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеТекущейТочки", ДанныеТекущейТочки);
	СтруктураВозврата.Вставить("ФинальныйАдрес", СтрукФинАдреса);
	
	Если ВыбранноеВремя <> Неопределено Тогда
		СтруктураВозврата.Вставить("ВыбранноеВремя", ВыбранноеВремя.Значение);
	Иначе	
		СтруктураВозврата.Вставить("ВыбранноеВремя", Неопределено);
	КонецеСли;	
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Функция МаршрутизацияКлиент_СформироватьСписокВремени()
	СейчасМинут = Минута(ТекущаяДата());
	ОкрМинут = Окр(СейчасМинут + 5, -1);
	СейчасЧасов = Час(ТекущаяДата());
	СейчасДень = День(ТекущаяДата());
	//СейчасМесяц = Месяц(ТекущаяДата());
	
	СписокВыбора = Новый СписокЗначений;
	
	Для Сч = 1 По 18 Цикл
		Если ОкрМинут = 60 Тогда
			СейчасЧасов = СейчасЧасов + 1;
			ОкрМинут = 0;
		КонецеСли;	
		
		Если СейчасЧасов = 24 Тогда
			СейчасДень = СейчасДень + 1;
			СейчасЧасов = 0;
		КонецеСли;	
		
		//ДеньКонцаМесяца = День(КонецМеся);
		
		СписокВыбора.Добавить(Дата(Год(ТекущаяДата()), Месяц(ТекущаяДата()), СейчасДень, СейчасЧасов, ОкрМинут, 0), Формат(СейчасЧасов, "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(ОкрМинут, "ЧЦ=2; ЧН=00; ЧВН="));
		ОкрМинут = ОкрМинут + 10;
	КонецЦикла;	
	Возврат СписокВыбора;
КонецФункции

#КонецОбласти





&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДанныеXTML = ПолучитьКодXTMLНаСервере();
	
	//МассивДоступныхКнопок = Новый Массив;
	//МассивДоступныхКнопок.Добавить(Элементы.ФормаПоказатьЗаказы);
	//УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
КонецПроцедуры

Функция ПолучитьКодXTMLНаСервере()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних.ВерсияСтраницыМаршрутизацииМП.СодержимоеСтраницыМашрутизации КАК КодXTML
	            |ИЗ
	            |	РегистрСведений.ТекущаяВерсияСтраницыМаршрутизацииМП.СрезПоследних КАК ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних";
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		КодXTML = Выб.КодXTML; 
	КонецеСли;	
	КоординатыЦентраКарты = "";
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТерминалДоставки.ШиротаЦентраЗоны) И ЗначениеЗаполнено(ПараметрыСеанса.ТерминалДоставки.ДолготаЦентраЗоны) тогда
		КоординатыЦентраКарты = "[" + Формат(ПараметрыСеанса.ТерминалДоставки.ШиротаЦентраЗоны, "ЧРД=.; ЧГ=") + ", " + Формат(ПараметрыСеанса.ТерминалДоставки.ДолготаЦентраЗоны, "ЧРД=.; ЧГ=") + "]";
	Иначе
		КоординатыЦентраКарты = "[55.755819, 37.617644]";
	КонецЕсли;	
	КодXTML = СтрЗаменить(КодXTML, "^geoCenter^", КоординатыЦентраКарты);
	Возврат КодXTML;
КонецФункции	


&НаКлиенте
Процедура ПолеXTMLДокументСформирован(Элемент)
	//ОкноБраузера = Элементы.ПолеXTML.Документ.DefaultView;
	//ОкноБраузера.WebKitUsage = Истина;	
	//ПолеXTMLБылоСформировано = Истина;
	//ПодключитьОбработчикОжидания("ПоказатьЗаказыОбработчикОжидания", 6, Истина);
	//ПП = Элементы.ПолеXTML.Документ.DefaultView;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаказыОбработчикОжидания()
	ПоказатьЗаказы(Неопределено);	
Конецпроцедуры	

//+Степанов Подключаемый обработчик события "При нажатии", нужен при использовании WebKit
&НаКлиенте
Процедура Подключаемая_ПолеXTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если Не ПроверяемMessage Тогда
		Возврат;
	КонецеСли;	
	//Если Элементы.ПолеXTML.Документ.defaultView.FormEvent <> Неопределено Тогда
	//	ИмяСобытия = Элементы.ПолеXTML.Документ.defaultView.FormEvent.messageName;
	//	ПолученныеДанные = Элементы.ПолеXTML.Документ.defaultView.FormEvent.messageData;
	//	Если ИмяСобытия = "OnEndRoute" Тогда
	//		ФлагНеПустойМаршрутизации = ФиксацияМаршрутизации(ПолученныеДанные);
	//	КонецЕСли;	
	//	
	//	//Если ИмяСобытия = "ClickOnPoligon" Тогда
	//	//	MapsFrom1C_ClickOnPoligon(ПолученныеДанные);
	//	//ИначеЕсли ИмяСобытия = "OnSelectPoint" Тогда
	//	//	MapsFrom1C_OnSelectPoints(ПолученныеДанные);
	//	//ИначеЕсли ИмяСобытия = "OnDeletePointFromMap" Тогда	
	//	//	MapsFrom1C_OnDeletePointFromMap(ПолученныеДанные);	
	//	//ИначеЕсли ИмяСобытия = "VenicleMenuCommand " Тогда
	//	//	MapsFrom1C_VenicleMenuCommand(ПолученныеДанные);
	//	//ИначеЕсли ИмяСобытия = "CalcRoute" Тогда	
	//	//	MapsFrom1C_CalcRoute(ПолученныеДанные);
	//	//ИначеЕсли ИмяСобытия = "VenicleMenuCommand" Тогда	
	//	//	MapsFrom1C_VenicleMenuCommand(ПолученныеДанные);
	//	//КонецЕсли;	
	//КонецЕсли
	Если Элементы.ПолеXTML.Документ.defaultView.FormEvent <> Неопределено Тогда
		ИмяСобытия = Элементы.ПолеXTML.Документ.defaultView.FormEvent.messageName;
		ПолученныеДанные = Элементы.ПолеXTML.Документ.defaultView.FormEvent.messageData;
		Если ИмяСобытия = "OnEndRoute" Тогда
			ПараметрыОтвета = ОткрытьФормуМодально("Обработка.РМПостроенияМаршрутаЭкипажами.Форма.ФормаВводаАдреса",, ЭтаФорма);
			Если ПараметрыОтвета <> Неопределено Тогда
				Объект.ТипФинальнойТочкиМаршрута = ПараметрыОтвета.ТипАдреса;
				Объект.АдресФинальнойТочкиМаршрута = ПараметрыОтвета.РаспознанныйАдрес;
				Объект.ШиротаФинальнойТочкиМаршрута = ПараметрыОтвета.Широта;
				Объект.ДолготаФинальнойТочкиМаршрута = ПараметрыОтвета.Долгота;
			Иначе
				Объект.ТипФинальнойТочкиМаршрута = Неопределено;
				Объект.АдресФинальнойТочкиМаршрута = Неопределено;
				Объект.ШиротаФинальнойТочкиМаршрута = Неопределено;
				Объект.ДолготаФинальнойТочкиМаршрута = Неопределено;
			КонецЕсли;
			ФлагНеПустойМаршрутизации = ФиксацияМаршрутизации(ПолученныеДанные);
		КонецЕСли;	
		
		//Если ИмяСобытия = "ClickOnPoligon" Тогда
		//	MapsFrom1C_ClickOnPoligon(ПолученныеДанные);
		//ИначеЕсли ИмяСобытия = "OnSelectPoint" Тогда
		//	MapsFrom1C_OnSelectPoints(ПолученныеДанные);
		//ИначеЕсли ИмяСобытия = "OnDeletePointFromMap" Тогда	
		//	MapsFrom1C_OnDeletePointFromMap(ПолученныеДанные);	
		//ИначеЕсли ИмяСобытия = "VenicleMenuCommand " Тогда
		//	MapsFrom1C_VenicleMenuCommand(ПолученныеДанные);
		//ИначеЕсли ИмяСобытия = "CalcRoute" Тогда	
		//	MapsFrom1C_CalcRoute(ПолученныеДанные);
		//ИначеЕсли ИмяСобытия = "VenicleMenuCommand" Тогда	
		//	MapsFrom1C_VenicleMenuCommand(ПолученныеДанные);
		//КонецЕсли;	
	КонецЕсли
	
КонецПроцедуры


&НаСервере
Процедура ОчиститьПорядокЗаказов()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Заказ.Ссылка КАК Заказ
	            |ИЗ
	            |	Документ.Заказ КАК Заказ
	            |ГДЕ
	            |	Заказ.Рейс = &Рейс";
	Зап.УстановитьПараметр("Рейс", Рейс.Ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Док = Выб.Заказ.ПолучитьОбъект();
		Док.ПорядокСортировки = 0;
		Док.Записать();
	КонецЦикла;	
КонецПроцедуры	


&НаСервере
Функция ФиксацияМаршрутизации_Старая(Данные)
	ОчиститьПорядокЗаказов();
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат Ложь;
	КонецЕсли;	
	СтрокаДанных = СтрЗаменить(Данные, ",", Символы.ПС);
	Для Порядок = 1 По СтрЧислоСтрок(СтрокаДанных) Цикл
		НовыйGUID = Новый УникальныйИдентификатор(СтрПолучитьСтроку(СтрокаДанных, Порядок));

		Док = Документы.Заказ.ПолучитьСсылку(НовыйGUID).ПолучитьОбъект();
		Док.ПорядокСортировки = Порядок;
		Док.Записать();
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ФиксацияМаршрутизации(Данные)
	//ОчиститьПорядокЗаказов();
	Объект.ПорядокЗаказов.Очистить();
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаПорядка = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаПорядка.Колонки;
	КолонкиТаблицы.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	КолонкиТаблицы.Добавить("Забор", Новый ОписаниеТипов("ДокументСсылка.ЗаборТовара"));
	КолонкиТаблицы.Добавить("ПорядокМаршрутизации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	
	СтрокаДанных = СтрЗаменить(Данные, ",", Символы.ПС);
	Для Порядок = 1 По СтрЧислоСтрок(СтрокаДанных) Цикл
		
		СтрокаID = СтрПолучитьСтроку(СтрокаДанных, Порядок);
		
		НовыйGUID = Новый УникальныйИдентификатор(СтрокаID);

		Заказ = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(НовыйGUID);
		Забор = Документы.ЗаборТовара.ПолучитьСсылку(НовыйGUID);
		
		//СтрокаПорядка = Объект.ПорядокЗаказов.Добавить();
		//СтрокаПорядка.Заказ = Заказ;
		//СтрокаПорядка.Порядок = Порядок;
		
		//Док = Заказ.ПолучитьОбъект();
		//Док.ПорядокСортировки = Порядок;
		//Док.Записать();
		
		СтрокаПорядка = ТаблицаПорядка.Добавить();
		СтрокаПорядка.Заказ = Заказ;
		СтрокаПорядка.Забор = Забор;
		СтрокаПорядка.ПорядокМаршрутизации = Порядок;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПорядка", ТаблицаПорядка);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПорядка.Заказ КАК Заказ,
	|	ТаблицаПорядка.Забор КАК Забор,
	|	ТаблицаПорядка.ПорядокМаршрутизации КАК ПорядокМаршрутизации
	|ПОМЕСТИТЬ ВТ_Порядок
	|ИЗ
	|	&ТаблицаПорядка КАК ТаблицаПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РейсЗаказы.Заказ КАК Заказ,
	|	ВТ_Порядок.ПорядокМаршрутизации КАК ПорядокМаршрутизации
	|ИЗ
	|	ВТ_Порядок КАК ВТ_Порядок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	|		ПО (РейсЗаказы.Ссылка = &Рейс)
	|			И (РейсЗаказы.Заказ В (ВТ_Порядок.Заказ, ВТ_Порядок.Забор))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокМаршрутизации";
	
	ТаблицаПорядка = Запрос.Выполнить().Выгрузить();
	
	Объект.ПорядокЗаказов.Загрузить(ТаблицаПорядка);
	
	НовДок = Документы.ФиксацияМаршрутизацииРейса.СоздатьДокумент();
	НовДок.Рейс = Рейс;
	НовДок.Дата = ТекущаяДата();
	НовДок.РучнаяМаршрутизацияМП = Истина;
	НовДок.МаршрутизацияНаРабочемМестеЭкипажа = Истина;
	НовДок.ТипФинальнойТочкиМаршрута = Объект.ТипФинальнойТочкиМаршрута;
	НовДок.АдресФинальнойТочкиМаршрута = Объект.АдресФинальнойТочкиМаршрута;
	НовДок.ШиротаФинальнойТочкиМаршрута = Объект.ШиротаФинальнойТочкиМаршрута;
	НовДок.ДолготаФинальнойТочкиМаршрута = Объект.ДолготаФинальнойТочкиМаршрута;
	НовДок.Заказы.Загрузить(ТаблицаПорядка);
	НовДок.Записать();
	
	Возврат Истина;
КонецФункции


&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	//Элементы.ПолеXTML.Документ.parentWindow.exec(Команда);
	
	Попытка
		Элементы.ПолеXTML.Документ.defaultView.exec(Команда);	
	Исключение
		Сообщить(ОписаниеОшибки());
	конецпопытки;
	
	Возврат;
	//ДИВ = Элементы.ПолеXTML.Документ.getElementById("TEST");
	//
	//НашлиАтрибут = ДИВ.getAttributeNode("onclick");
	//Если НашлиАтрибут <> null Тогда
	//	ДИВ.removeAttribute("onclick");
	//КонецЕсли; 
	//
	//Атрибут  = Элементы.ПолеXTML.Документ.createAttribute("onclick");
	//Атрибут.value = Команда;
	//ДИВ.attributes.setNamedItem(Атрибут); // привязываем атрибут
	//
	//ДИВ.click();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗаказов()
	Зап = Новый Запрос;
	
	Зап.Текст =
	"ВЫБРАТЬ
	|	ФиксацияМаршрутизацииРейсаЗаказы.Заказ КАК Заказ,
	|	МАКСИМУМ(ФиксацияМаршрутизацииРейса.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыФиксаций
	|ИЗ
	|	Документ.ФиксацияМаршрутизацииРейса.Заказы КАК ФиксацияМаршрутизацииРейсаЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФиксацияМаршрутизацииРейса КАК ФиксацияМаршрутизацииРейса
	|		ПО (ФиксацияМаршрутизацииРейса.Рейс = &Рейс)
	|			И (НЕ ФиксацияМаршрутизацииРейса.ПометкаУдаления)
	|			И ФиксацияМаршрутизацииРейсаЗаказы.Ссылка = ФиксацияМаршрутизацииРейса.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	|		ПО (РейсЗаказы.Ссылка = &Рейс)
	|			И (НЕ РейсЗаказы.УдаленИзРейса)
	|			И ФиксацияМаршрутизацииРейсаЗаказы.Заказ = РейсЗаказы.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ФиксацияМаршрутизацииРейсаЗаказы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФиксацияМаршрутизацииРейсаЗаказы.Заказ КАК Заказ,
	|	МАКСИМУМ(ФиксацияМаршрутизацииРейсаЗаказы.Ссылка) КАК Фиксация
	|ПОМЕСТИТЬ ВТ_ПоследниеФиксации
	|ИЗ
	|	Документ.ФиксацияМаршрутизацииРейса КАК ФиксацияМаршрутизацииРейса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФиксацияМаршрутизацииРейса.Заказы КАК ФиксацияМаршрутизацииРейсаЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеДатыФиксаций КАК ВТ_ПоследниеДатыФиксаций
	|			ПО ФиксацияМаршрутизацииРейсаЗаказы.Заказ = ВТ_ПоследниеДатыФиксаций.Заказ
	|				И ФиксацияМаршрутизацииРейсаЗаказы.Ссылка.Дата = ВТ_ПоследниеДатыФиксаций.Дата
	|		ПО (ФиксацияМаршрутизацииРейса.Рейс = &Рейс)
	|			И ФиксацияМаршрутизацииРейса.Ссылка = ФиксацияМаршрутизацииРейсаЗаказы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ФиксацияМаршрутизацииРейсаЗаказы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РейсЗаказы.Заказ КАК Ссылка,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номер, ЗаборТовара.Номер) КАК OrderId,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияС, ЗаборТовара.ВремяДоставкиС) КАК ВремяПрибытияС,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияПо, ЗаборТовара.ВремяДоставкиПо) КАК ВремяПрибытияПо,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Адрес.Широта, ЗаборТовара.ТочкаДоставки.Адрес.Широта) КАК Lat,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Адрес.Долгота, ЗаборТовара.ТочкаДоставки.Адрес.Долгота) КАК Lng,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Наименование, ЗаборТовара.ТочкаДоставки.Наименование) КАК Address,
	|	ЕСТЬNULL(ФиксацияМаршрутизацииРейсаЗаказы.ПорядокМаршрутизации, 0) КАК RouteIndex,
	|	ВЫБОР
	|		КОГДА РейсЗаказы.ВидЗаказа = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.DROP)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК orderType
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО РейсЗаказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеФиксации КАК ВТ_ПоследниеФиксации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФиксацияМаршрутизацииРейса.Заказы КАК ФиксацияМаршрутизацииРейсаЗаказы
	|			ПО ВТ_ПоследниеФиксации.Фиксация = ФиксацияМаршрутизацииРейсаЗаказы.Ссылка
	|				И ВТ_ПоследниеФиксации.Заказ = ФиксацияМаршрутизацииРейсаЗаказы.Заказ
	|		ПО РейсЗаказы.Заказ = ВТ_ПоследниеФиксации.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|		ПО РейсЗаказы.Заказ = ЗаборТовара.Ссылка
	|ГДЕ
	|	РейсЗаказы.Ссылка = &Рейс
	|	И НЕ РейсЗаказы.УдаленИзРейса
	|	И РейсЗаказы.ВидЗаказа В (ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.DROP), ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.COLLECTION))";
	
	//Зап.Текст =
	//"ВЫБРАТЬ
	//|	РейсЗаказы.Заказ КАК Ссылка,
	//|	РеализацияТоваровУслуг.Номер КАК OrderId,
	//|	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияС КАК ВремяПрибытияС,
	//|	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияПо КАК ВремяПрибытияПо,
	//|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Адрес.Широта КАК Lat,
	//|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Адрес.Долгота КАК Lng,
	//|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Наименование КАК Address,
	//|	0 КАК RouteIndex,
	//|	1 КАК orderType
	//|ИЗ
	//|	Документ.Рейс.Заказы КАК РейсЗаказы
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	//|		ПО РейсЗаказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|		ПО РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	//|ГДЕ
	//|	РейсЗаказы.Ссылка = &Рейс
	//|	И НЕ РейсЗаказы.УдаленИзРейса
	//|	И РейсЗаказы.ВидЗаказа = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.DROP)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	РейсЗаказы.Заказ,
	//|	ЗаборТовара.Номер,
	//|	ЗаборТовара.ВремяДоставкиС,
	//|	ЗаборТовара.ВремяДоставкиПо,
	//|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
	//|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
	//|	ЗаборТовара.ТочкаДоставки.Наименование,
	//|	0,
	//|	2
	//|ИЗ
	//|	Документ.Рейс.Заказы КАК РейсЗаказы
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	//|		ПО РейсЗаказы.Заказ = ЗаборТовара.Ссылка
	//|ГДЕ
	//|	РейсЗаказы.Ссылка = &Рейс
	//|	И НЕ РейсЗаказы.УдаленИзРейса
	//|	И РейсЗаказы.ВидЗаказа = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.COLLECTION)";
	
	//Зап.Текст = "ВЫБРАТЬ
	//            |	Заказ.Ссылка КАК Ссылка,
	//            |	Заказ.Номер КАК OrderId,
	//            |	Заказ.ВремяДоставки КАК Interval,
	//            |	Заказ.Широта КАК Lat,
	//            |	Заказ.Долгота КАК Lng,
	//            |	Заказ.Адрес КАК Address,
	//            |	Заказ.ПорядокСортировки КАК RouteIndex,
	//            |	ВЫБОР
	//            |		КОГДА Заказ.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипЗаказа.Доставка)
	//            |			ТОГДА 1
	//            |		КОГДА Заказ.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипЗаказа.Забор)
	//            |			ТОГДА 2
	//            |	КОНЕЦ КАК orderType
	//            |ИЗ
	//            |	Документ.Заказ КАК Заказ
	//            |ГДЕ
	//            |	Заказ.Рейс = &Рейс
	//            |	И (Заказ.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.РезультатыДоставки.ПустаяСсылка)
	//            |			ИЛИ Заказ.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.РезультатыДоставки.КДоставке))
	//            |	И Заказ.СнятьСДоставки = ЛОЖЬ";
	Зап.УстановитьПараметр("Рейс", Рейс);
	Рез = Зап.Выполнить();
	Выб = Рез.Выбрать();
	МассивЗаказов = Новый Массив;
	Пока Выб.Следующий() Цикл
		СтруктурЗаказа = Новый Структура;
		Для каждого ТекКолонка Из Рез.Колонки Цикл
			Если ТекКолонка.Имя <> "Ссылка" И ТекКолонка.Имя <> "ВремяПрибытияС"  И ТекКолонка.Имя <> "ВремяПрибытияПо" Тогда
				СтруктурЗаказа.Вставить(ТекКолонка.Имя, Выб[ТекКолонка.Имя]);
			ИначеЕсли ТекКолонка.Имя = "ВремяПрибытияС" Тогда
				СтруктурЗаказа.Вставить("Interval", Формат(Выб.ВремяПрибытияС, "ДЛФ=T") + " : " + Формат(Выб.ВремяПрибытияПо, "ДЛФ=T"));				
			ИначеЕсли ТекКолонка.Имя = "Ссылка" Тогда
				СтруктурЗаказа.Вставить("UID", Строка(Выб.Ссылка.УникальныйИдентификатор()));
			КонецеСли;	
		КонецЦикла;	
		МассивЗаказов.Добавить(СтруктурЗаказа);
	КонецЦикла;	
	
	 Возврат МассивЗаказов;
КонецФункции	

&НаКлиенте
Процедура ПоказатьЗаказы(Команда)
	
	МассивЗаказов = ПолучитьСписокЗаказов();
	
	лПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
	
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(лПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, МассивЗаказов, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть(); 
	
	ВыполнитьСкрипт("STZ.RemoveAllPoints()");
	
	//Сообщить(СтрокаJSON);
	
	ВызовФункции = "STZ.ShowAddressCoordByArr(" + СтрокаJSON + ")";
	//ВызовФункции = "STZ.showMessage(" + СтрокаJSON + ")";    
	//ВызовФункции = "STZ.showMessage('хай')";

	ВыполнитьСкрипт(ВызовФункции);
	
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаНачатьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаРедактироватьМаршрут);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ПолеXTML.УстановитьДействие("ПриНажатии","Подключаемая_ПолеXTMLПриНажатии");
	
	Для Каждого Тек Из ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		Тек.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТочки(Команда)
	ВыполнитьСкрипт("STZ.RemoveAllPoints()");
//ВыполнитьСкрипт("showContext()");
//ВыполнитьСкрипт("STZ.uuidv4()");
//ВыполнитьСкрипт("STZ.isNumber(1)");
КонецПроцедуры

&НаКлиенте
Процедура НачатьМаршрутизацию(Команда)
	ВыполнитьСкрипт("STZ.StartRoute()");
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаЗафиксироватьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаОтменитьМаршрутизацию);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьМаршрутизацию(Команда)
	ВыполнитьСкрипт("STZ.EndRoute()");
	ПроверяемMessage = Истина;
	Подключаемая_ПолеXTMLПриНажатии(Неопределено, Неопределено, Неопределено);
	ПроверяемMessage = Ложь;
	
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаНачатьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаРедактироватьМаршрут);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	Если ФлагНеПустойМаршрутизации Тогда
		ЗапуститьМаршрутизациюЯМ();
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьМаршрутизацию(Команда)
	ВыполнитьСкрипт("STZ.CancelRoute()");
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаНачатьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаРедактироватьМаршрут);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьМаршрут(Команда)
	ВыполнитьСкрипт("STZ.EditRoute()");
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаЗафиксироватьМаршрутизацию);
	МассивДоступныхКнопок.Добавить(Элементы.ФормаОтменитьМаршрутизацию);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКнопок(МассивДоступныхКнопок)
	Для Каждого Тек Из ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		Тек.Видимость = Ложь;
	КонецЦикла;
	
	Для Каждого Тек Из МассивДоступныхКнопок Цикл
		Тек.Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры	


//&НаСервере
//Функция СобратьДанныеЗаказовДляМаршрутизацииЯМ(ВыбранныйРейс) Экспорт
//	Зап = Новый Запрос;
//	Зап.Текст = "ВЫБРАТЬ
//	            |	Заказ.Номер КАК Номер,
//	            |	Заказ.ПорядокСортировки КАК ПорядокСортировки,
//	            |	Заказ.Ссылка КАК Заказ
//	            |ИЗ
//	            |	Документ.Заказ КАК Заказ
//	            |ГДЕ
//	            |	Заказ.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.РезультатыДоставки.КДоставке)
//	            |	И Заказ.Рейс = &Рейс";
//	Зап.УстановитьПараметр("Рейс", ВыбранныйРейс.Ссылка);
//	
//	МасСтруктур = Новый Массив;
//	
//	Выб = Зап.Выполнить().Выбрать();
//	Пока Выб.Следующий() Цикл
//		Струк = Новый Структура;
//		Струк.Вставить("strizhId", Выб.Номер);
//		Струк.Вставить("routeIndex", Выб.ПорядокСортировки);
//		МасСтруктур.Добавить(Струк);
//	КонецЦикла;	                      
//	
//	Возврат МасСтруктур;
//КонецФункции


Функция ВыгрузитьДанныеРучнойМаршрутизацииНаСервере()
//	МасСтруктур = СобратьДанныеЗаказовДляМаршрутизацииЯМ(Рейс);
//	
//	ОтветМетода = МодульОбмен_http.Маршрутизация_ВыгрузитьДанныеРучнойМаршрутизации(, Рейс.НомерРейса, МасСтруктур);
//	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ЗапуститьМаршрутизациюЯМ()
	//Если Не НадоЗапрашиватьЯММаршрутизациюПослеФиксацииМаршрутаСервер() Тогда
	//	ВыгрузитьДанныеРучнойМаршрутизацииНаСервере();
	//	Возврат;
	//КонецЕсли;
	
	РезультатОбработки = МаршрутизацияКлиент_ЗапуститьМаршрутизациюЯМ(Рейс);
	Если РезультатОбработки <> Неопределено Тогда
		ФинальныйАдрес = Неопределено;
		Если РезультатОбработки.ФинальныйАдрес.ТипАдреса = 2 Тогда
			ФинальныйАдрес = "Склад";
		ИначеЕсли РезультатОбработки.ФинальныйАдрес.ТипАдреса = 3 Тогда	
			ФинальныйАдрес = РезультатОбработки.ФинальныйАдрес.ШиротаДолгота;
		КонецЕсли;	
		
		Если РезультатОбработки.ВыбранноеВремя = Неопределено Тогда
			РезультатЗапуска = ЗапуститьМаршрутизациюНаСервере(Неопределено, РезультатОбработки.ДанныеТекущейТочки, ФинальныйАдрес);
		Иначе
			РезультатЗапуска = ЗапуститьМаршрутизациюНаСервере(РезультатОбработки.ВыбранноеВремя, РезультатОбработки.ДанныеТекущейТочки, ФинальныйАдрес);
		КонецЕсли;	
		Если РезультатЗапуска Тогда
			//Сообщить("Выполняется запрос на маршрутизацию ЯМ...");
			
			ПодключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации", 3, Ложь);
			ПоказатьПредупреждение(, "Выполняется запрос на маршрутизацию ЯМ...", 3);
		Иначе
			//сбой в запуске маршрутизации Яндекса, фиксируем ручную маршрутизацию
			ВыгрузитьДанныеРучнойМаршрутизацииНаСервере();
		КонецЕсли;	
	КонецеСли;
КонецПроцедуры

&НаСервере
Функция НадоЗапрашиватьЯММаршрутизациюПослеФиксацииМаршрутаСервер()
	//Возврат МаршрутизацияСервер.НадоЗапрашиватьЯММаршрутизациюПослеФиксацииМаршрута();
	Возврат Истина;
КонецФункции	

&НаСервере
Функция МаршрутизацияЯндекс_НачатьМаршрутизациюНаСервереПоРейсу(ОбщееСоединениеHTTP = "", НомерРейса, МассивСтруктурЗаказов = Неопределено, ДанныеТекущейТочки = Неопределено, ВыбранноеВремя, ДанныеФинальнойТочки = Неопределено, УчитыватьПорядок = Ложь) Экспорт
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("tripId", НомерРейса);
	Если МассивСтруктурЗаказов <> Неопределено Тогда
		СтруктураВызова.Вставить("orders", МассивСтруктурЗаказов);
	КонецеСли;	
	
	
	Если ВыбранноеВремя <> Неопределено Тогда
		СтруктураВызова.Вставить("startTime", ВыбранноеВремя);
	КонецеСли;	
	
	Если УчитыватьПорядок Тогда
		СтруктураВызова.Вставить("useRouteIndex", Истина);
	конецеСли;	
		
	Если ДанныеТекущейТочки <> Неопределено Тогда
		СтруктураВызова.Вставить("currentPoint", ДанныеТекущейТочки);
	КонецеСли;	
	
	Если ДанныеФинальнойТочки <> Неопределено Тогда
		//СтруктураВызова.Вставить("pointReturnAddress", Строка(ДанныеФинальнойТочки.Широта) + ";" + Строка(ДанныеФинальнойТочки.Долгота));
		СтруктураВызова.Вставить("pointReturnAddress", ДанныеФинальнойТочки);
	КонецеСли;	
	
	//СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	//РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "putTaskYandexRouting", ОбщееСоединениеHTTP);
	
	ОтветМетода = Новый Структура;
	
	ВозниклаОшибка = Ложь;
	//ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
	ДанныеВызова = РаботаСМобильнымПриложениемЭкипажейСервер.ПоставитьЗадачуЯндексМаршрутизации(СтруктураВызова);
	Если ВозниклаОшибка Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	КонецеСли;	   
	
	
	Если Не ЗначениеЗаполнено(ДанныеВызова.idQuery) Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	Иначе
		ОтветМетода.Вставить("РезультатВызова", Истина);
		ОтветМетода.Вставить("ИдЗапроса", ДанныеВызова.idQuery);
		Возврат ОтветМетода;
	КонецеСли;	
КонецФункции

//&НаКлиенте
//Функция ПолучитьДопПараметрыРейсаЯМаршрутизации() Экспорт
//	Струк = Новый Структура;
//	Струк.Вставить("typeFinalPoint", Объект.ТипФинальнойТочкиМаршрута);
//	Струк.Вставить("addressFinalPoint", Объект.АдресФинальнойТочкиМаршрута);
//	Струк.Вставить("latFinalPoint", Объект.ШиротаФинальнойТочкиМаршрута);
//	Струк.Вставить("longFinalPoint", Объект.ДолготаФинальнойТочкиМаршрута);
//	Возврат Струк;
//КонецФункции


&НаСервере
Функция ЗапуститьМаршрутизациюНаСервере(ВыбранноеВремя, ДанныеТекущейТочки, ДанныеФинальнойТочки = Неопределено)
	// Вставить содержимое обработчика.
	МасСтруктур = МаршрутизацияСервер_СобратьДанныеЗаказовДляМаршрутизацииЯМ(Рейс);
	
	СчетчикЗапросовРезультатовМаршрутизации = 0;
	ОтветМетода = МаршрутизацияЯндекс_НачатьМаршрутизациюНаСервереПоРейсу(, Рейс.Номер, МасСтруктур, ДанныеТекущейТочки, ВыбранноеВремя, ДанныеФинальнойТочки, Истина);
	Если ОтветМетода.Свойство("ИдЗапроса") Тогда		
		//ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.СветлоЗеленый;
		ОтправленЗапросНаМаршрутизацию = Истина;
		ИдентификаторЗаданияМаршрутизацииЯндекс = ОтветМетода.ИдЗапроса;
		Возврат Истина;
	Иначе
		//ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = WebЦвета.Оранжевый; 
		ОтправленЗапросНаМаршрутизацию = Ложь;
		ИдентификаторЗаданияМаршрутизацииЯндекс = "";
		Возврат Ложь;
	КонецеСли;
КонецФункции	

&НаКлиенте
Процедура ПолучитьРезультатМаршрутизации()
	Если ЗначениеЗаполнено(ИдентификаторЗаданияМаршрутизацииЯндекс) Тогда
		СчетчикЗапросовРезультатовМаршрутизации = СчетчикЗапросовРезультатовМаршрутизации + 1;
		Если ПолучитьРезультатыМаршрутизацииНаСервере() Тогда
			ОтключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации");
			//Сообщить("Данные Яндекс маршрутизации загружены");
			ПоказатьПредупреждение(,"Данные Яндекс маршрутизации загружены", 2);
		КонецеСли;
		Если СчетчикЗапросовРезультатовМаршрутизации >= 20 Тогда
			ОтключитьОбработчикОжидания("ПолучитьРезультатМаршрутизации");
			ВыгрузитьДанныеРучнойМаршрутизацииНаСервере();
		КонецеСли;	
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ПолучитьРезультатыМаршрутизацииНаСервере()
	
	СтруктураВызова = Новый Структура("idQuery,tripId,ID", ИдентификаторЗаданияМаршрутизацииЯндекс, Рейс.Номер);
	
	РеквизитыФиксацииМаршрутизации = Новый Структура("МаршрутизацияНаРабочемМестеЭкипажа,ТипФинальнойТочкиМаршрута,АдресФинальнойТочкиМаршрута,ШиротаФинальнойТочкиМаршрута,ДолготаФинальнойТочкиМаршрута", Истина, Объект.ТипФинальнойТочкиМаршрута, Объект.АдресФинальнойТочкиМаршрута, Объект.ШиротаФинальнойТочкиМаршрута, Объект.ДолготаФинальнойТочкиМаршрута);
	
	СтруктураОтвета = РаботаСМобильнымПриложениемЭкипажейСервер.ПолучитьРезультатЯндексМаршрутизации(СтруктураВызова, РеквизитыФиксацииМаршрутизации);
	Если Не СтруктураОтвета.error Тогда
		ИдентификаторЗаданияМаршрутизацииЯндекс = "";
		Возврат Истина;
	КонецЕсли;
	Сообщить("Результат маршрутизации не получен: " + СтруктураОтвета.errorText);
	
	//ОтветМетода = МодульОбмен_http.МаршрутизацияЯндекс_ПолучитьДанныеМаршрутизацииНаСервереПоРейсу(,ИдентификаторЗаданияМаршрутизацииЯндекс, Рейс.НомерРейса);	
	//Если ОтветМетода.РезультатВызова Тогда
	//	//УстановитьПорядокМаршрутизацииНаЗаказах(ОтветМетода.ДанныеМаршрутизации);
	//	ИдентификаторЗаданияМаршрутизацииЯндекс = "";
	//	//ЭтаФорма.Элементы.ЗапуститьМаршрутизацию.ЦветФона = Новый Цвет;
	//	Возврат Истина;
	//КонецеСли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура РейсПриИзменении()
	МассивДоступныхКнопок = Новый Массив;
	МассивДоступныхКнопок.Добавить(Элементы.ФормаПоказатьЗаказы);
	УправлениеДоступностьюКнопок(МассивДоступныхКнопок);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКод(Команда)
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ВводКода", ЭтотОбъект),, "Код доступа", 10);
КонецПроцедуры

&НаКлиенте
Процедура ВводКода(КодДоступа, Параметры) Экспорт
	
	Если КодДоступа = Неопределено Или ПустаяСтрока(КодДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	ВводКодаНаСервере(КодДоступа);
	
	Если Рейс.Пустая() Тогда
		ПоказатьПредупреждение(, "Код не найден, либо он устарел!");
		Возврат;
	КонецЕсли;
	
	РейсПриИзменении();
	
	ПодключитьОбработчикОжидания("ОбработчикЗакончитьМаршрутизацию", 600, Истина);//10 мин
	
КонецПроцедуры

&НаСервере
Процедура ВводКодаНаСервере(КодДоступа)
	
	//Сообщить("Поиск " + КодДоступа);
	Сейчас = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Сейчас - 1800);//-30 мин
	Запрос.УстановитьПараметр("КодДоступа", КодДоступа);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КодыДоступаКФункционалуМашрутизации.Рейс КАК Рейс,
	|	КодыДоступаКФункционалуМашрутизации.Рейс.Номер КАК НомерРейса,
	|	КодыДоступаКФункционалуМашрутизации.Рейс.ДатаРейса КАК ДатаРейса,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор,
	|	КодыДоступаКФункционалуМашрутизации.Рейс.КоличествоДоставок КАК КоличествоЗаказов,
	|	КодыДоступаКФункционалуМашрутизации.Рейс.КоличествоЗаборов КАК КоличествоЗаборов,
	|	КодыДоступаКФункционалуМашрутизации.КодДоступа КАК КодДоступа,
	|	КодыДоступаКФункционалуМашрутизации.УзелМП КАК УзелМП
	|ИЗ
	|	РегистрСведений.КодыДоступаКФункционалуМашрутизации КАК КодыДоступаКФункционалуМашрутизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО КодыДоступаКФункционалуМашрутизации.Рейс = ПривязкаМашинКРейсамСрезПоследних.Рейс
	|ГДЕ
	|	КодыДоступаКФункционалуМашрутизации.Период >= &Период
	|	И КодыДоступаКФункционалуМашрутизации.КодДоступа = &КодДоступа
	|	И НЕ КодыДоступаКФункционалуМашрутизации.КодДоступаИспользован
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодыДоступаКФункционалуМашрутизации.Период УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Рейс = Неопределено;
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Рейс = Выборка.Рейс;
	НомерРейса = Выборка.НомерРейса;
	ДатаРейса = Выборка.ДатаРейса;
	Водитель = Выборка.Водитель;
	Экспедитор = Выборка.Экспедитор;
	КоличествоЗаказов = Выборка.КоличествоЗаказов;
	КоличествоЗаборов = Выборка.КоличествоЗаборов;
	
	Элементы.ВвестиКод.Видимость = Ложь;
	Элементы.ДекорацияВвестиКод.Видимость = Ложь;
	Элементы.ЗакончитьМаршрутизацию.Видимость = Истина;
	//Элементы.ПолеXTML.Доступность = Истина;
	
	ЗаписьРегистра = РегистрыСведений.КодыДоступаКФункционалуМашрутизации.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Период = Сейчас;
	ЗаписьРегистра.Рейс = Рейс;
	ЗаписьРегистра.КодДоступа = Выборка.КодДоступа;
	ЗаписьРегистра.КодДоступаИспользован = Истина;
	ЗаписьРегистра.УзелМП = Выборка.УзелМП;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьМаршрутизациюНаСервере()
	
	Рейс = Неопределено;
	НомерРейса = "";
	ДатаРейса = Неопределено;
	Водитель = Неопределено;
	Экспедитор = Неопределено;
	КоличествоЗаказов = Неопределено;
	КоличествоЗаборов = Неопределено;
	Элементы.ВвестиКод.Видимость = Истина;
	Элементы.ДекорацияВвестиКод.Видимость = Истина;
	Элементы.ЗакончитьМаршрутизацию.Видимость = Ложь;
	//Элементы.ПолеXTML.Доступность = Ложь;
	
	Для Каждого Тек Из ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		Тек.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакончитьМаршрутизацию() Экспорт
	
	//ВыполнитьСкрипт("STZ.CancelRoute()");
	ВыполнитьСкрипт("STZ.RemoveAllPoints()");
	
	ЗакончитьМаршрутизациюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьМаршрутизацию(Команда)
	
	ОтключитьОбработчикОжидания("ОбработчикЗакончитьМаршрутизацию");
	
	//ВыполнитьСкрипт("STZ.CancelRoute()");
	ВыполнитьСкрипт("STZ.RemoveAllPoints()");
	
	ЗакончитьМаршрутизациюНаСервере();
	
КонецПроцедуры
