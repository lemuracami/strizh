#Если Клиент Тогда

// Предопределенное свойство. Содержит объект, предоставляющий данные универсальному журналу.
//
Перем КонструкторДанных Экспорт; // <ОбработкаОбъект.новаКонструкторЗапроса>

// Предопределенное свойство. Контейнер параметров источника.
//
Перем ПараметрыЖурнала Экспорт; // <Структура[ПараметрыИсточникаУниверсальногоЖурнала]>

// Предопределенное свойство. Универсальный журнал, к которому подключен источник.
//
Перем Журнал Экспорт; // <ОбработкаОбъект.новаУниверсальныйЖурнал>

Перем СекундВДне;
Перем ЖурналНачалоПериода, ЖурналКонецПериода;

// Предопределенная процедура. Вызывается при выводе строки журнала.
//
// Параметры:
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <СтрокаДереваЗначений>
//
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если Журнал.ЕстьИерархия Тогда
		Если ДанныеСтроки.Группировка <> NULL Тогда
			Если КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "Транспорт" Тогда
				ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
				ОформлениеСтроки.ЦветФона = Новый Цвет(244, 229, 187);
			ИначеЕсли КонструкторДанных.Группировки[ДанныеСтроки.Группировка] = "Водитель" Тогда
				ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
				ОформлениеСтроки.ЦветФона = Новый Цвет(220, 220, 255);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Группировка = NULL Тогда
		ОформлениеСтроки.ЦветФона = ?(ЗначениеЗаполнено(ДанныеСтроки.ГрафикРаботы), Новый Цвет(200, 255, 200),  Новый Цвет(255, 200, 200));
		
		Если ДанныеСтроки.НачалоПериода < ЖурналНачалоПериода Или ДанныеСтроки.НачалоПериода = '00010101' Тогда
			ОформлениеСтроки.Ячейки.НачалоПериода.УстановитьТекст("<<");
			ОформлениеСтроки.Ячейки.НачалоПериода.Шрифт = Новый Шрифт(,, Истина);
			ОформлениеСтроки.Ячейки.НачалоПериода.ЦветТекста = Новый Цвет(0, 0, 255);
		КонецЕсли;
		
		Если ДанныеСтроки.КонецПериода > ЖурналКонецПериода Или ДанныеСтроки.КонецПериода = '30000101' Тогда
			ОформлениеСтроки.Ячейки.КонецПериода.УстановитьТекст(">>");
			ОформлениеСтроки.Ячейки.КонецПериода.Шрифт = Новый Шрифт(,, Истина);
			ОформлениеСтроки.Ячейки.КонецПериода.ЦветТекста = Новый Цвет(0, 0, 255);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Предопределенная процедура. Обработчик событий журнала.
//
// Параметры:
//  Событие   <Строка>: имя события.
//  Параметр1 <ПроизвольноеЗначение>
//  Параметр2 <ПроизвольноеЗначение>
//  Параметр3 <ПроизвольноеЗначение>
//
// Возвращаемое значение:
//  <Булево>: Истина, если событие обработано.
//
Функция ОбработатьСобытие(Событие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	Если Событие = "Инициализация" Тогда
		Настроить();
		Возврат Истина;
	
	ИначеЕсли Событие = "Выбор" Тогда
		ВвестиНовыйПериодРаботы(Параметр1);
		
	ИначеЕсли Событие = "ИзменениеПараметров" Тогда
		СформироватьОтбор();
		
	ИначеЕсли Событие = "ИспользованиеИнструмента" Тогда
		Если Параметр1 = "НовыйПериодРаботы" Тогда
			ВвестиНовыйПериодРаботы(Неопределено);
		КонецЕсли;
	КонецЕсли;	
КонецФункции

Процедура ВвестиНовыйПериодРаботы(ТекущаяСтрока)
	обПланирование = Документы.новаПланированиеРаботыВодителей.СоздатьДокумент();
	
	стрПериод = обПланирование.РаботаВодителей.Добавить();
	Если ТекущаяСтрока = Неопределено Тогда
		стрПериод.ГрафикРаботы = Константы.новаГрафикРаботыПоУмолчанию.Получить();
	Иначе
		стрПериод.Транспорт = Журнал.ТекущиеДанные.Транспорт;
		стрПериод.Водитель = Журнал.ТекущиеДанные.Водитель;
		стрПериод.Экспедитор =  Журнал.ТекущиеДанные.Экспедитор;
		стрПериод.НачалоПериода = Журнал.ТекущиеДанные.НачалоПериода;
		стрПериод.КонецПериода = ?(Журнал.ТекущиеДанные.КонецПериода = '30000101', '00010101', Журнал.ТекущиеДанные.КонецПериода);
		стрПериод.ГрафикРаботы = ?(ЗначениеЗаполнено(Журнал.ТекущиеДанные.ГрафикРаботы), Журнал.ТекущиеДанные.ГрафикРаботы, Константы.новаГрафикРаботыПоУмолчанию.Получить());
	КонецЕсли;
	
	Форма = обПланирование.ПолучитьФорму("ФормаБыстрогоВвода");
	Форма.Открыть();
КонецПроцедуры

Процедура СформироватьОтбор()
	ЖурналНачалоПериода = ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода;
	ЖурналКонецПериода = ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода;
	ЖурналКонецПериода = ?(ЗначениеЗаполнено(ЖурналКонецПериода), ЖурналКонецПериода, '30000101');

	КонструкторДанных.ДобавитьПараметр("ЖурналНачалоПериода", ЖурналНачалоПериода);
	КонструкторДанных.ДобавитьПараметр("ЖурналКонецПериода", ЖурналКонецПериода);
	
	Если ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода) И ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода) Тогда
		КонструкторДанных.ПостоянныйОтбор = "ГрафикиРаботы.НачалоПериода <= &ЖурналКонецПериода И ГрафикиРаботы.КонецПериода >= &ЖурналНачалоПериода";
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода) И Не ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода) Тогда
		КонструкторДанных.ПостоянныйОтбор = "ГрафикиРаботы.КонецПериода >= &ЖурналНачалоПериода";
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.КонецПериода) И Не ЗначениеЗаполнено(ПараметрыЖурнала.ИнтерфейсВводаПериода.НачалоПериода) Тогда
		КонструкторДанных.ПостоянныйОтбор = "ГрафикиРаботы.НачалоПериода <= &ЖурналКонецПериода";
		
	Иначе
		КонструкторДанных.ПостоянныйОтбор = "";
	КонецЕсли;
КонецПроцедуры

Процедура Настроить()
	ПериодПоУмолчанию = Новый Структура("НачалоПериода, КонецПериода", НачалоГода(ТекущаяДата()), КонецГода(ТекущаяДата()));
	мсИнструменты = Новый Массив;
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст", "НовыйПериодРаботы", БиблиотекаКартинок.ДобавитьЭлементСписка, "Ввести период работы"));
	ПараметрыЖурнала = Новый Структура("ИнтерфейсВводаПериода, Инструменты", ПериодПоУмолчанию, мсИнструменты);

	КонструкторДанных = новаЖурналы.НовыйКонструкторЗапроса();
	КонструкторДанных.ПостОбработчикДанных = ЭтотОбъект;
	
	СформироватьОтбор();
	
	КонструкторДанных.ТекстЗапроса = "
	|РегистрСведений.новаГрафикиРаботыВодителей КАК ГрафикиРаботы
	|{СОЕДИНЕНИЯ}
	|";

	КонструкторДанных.ПостояннаяВыборка = ",
	|	ГрафикиРаботы.Транспорт КАК Транспорт,
	|	Представление(ГрафикиРаботы.Транспорт) КАК Транспорт_Пред,
	|	ГрафикиРаботы.Водитель КАК Водитель,
	|	Представление(ГрафикиРаботы.Водитель) КАК Водитель_Пред,
	|	ГрафикиРаботы.Экспедитор КАК Экспедитор,
	|	Представление(ГрафикиРаботы.Экспедитор) КАК Экспедитор_Пред,
	|	ГрафикиРаботы.НачалоПериода КАК НачалоПериода,
	|	ГрафикиРаботы.КонецПериода КАК КонецПериода,
	|	ГрафикиРаботы.Документ.Комментарий КАК Комментарий,
	|	ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|	Представление(ГрафикиРаботы.ГрафикРаботы) КАК ГрафикРаботы_Пред";
	
	КонструкторДанных.ДобавитьПоле("Транспорт");
	КонструкторДанных.ДобавитьОтборПоля(, "ГрафикиРаботы.Транспорт");
	КонструкторДанных.ДобавитьСортировкуПоля("ГрафикиРаботы.Транспорт.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Водитель");
	КонструкторДанных.ДобавитьОтборПоля(, "ГрафикиРаботы.Водитель");
	КонструкторДанных.ДобавитьСортировкуПоля("ГрафикиРаботы.Водитель.Наименование");

	КонструкторДанных.ДобавитьПоле("Экспедитор");
	КонструкторДанных.ДобавитьОтборПоля(, "ГрафикиРаботы.Экспедитор");
	КонструкторДанных.ДобавитьСортировкуПоля("ГрафикиРаботы.Экспедитор.Наименование");
	
	КонструкторДанных.ДобавитьПоле("ГрафикРаботы");
	КонструкторДанных.ДобавитьОтборПоля(, "ГрафикиРаботы.ГрафикРаботы");
	КонструкторДанных.ДобавитьСортировкуПоля("ГрафикиРаботы.ГрафикРаботы.Наименование");
	
	КонструкторДанных.ДобавитьПоле("НачалоПериода");
	КонструкторДанных.ДобавитьПоле("КонецПериода");
	
	КонструкторДанных.ДобавитьПоле("Комментарий");
	КонструкторДанных.ДобавитьОтборПоля(, "ГрафикиРаботы.Документ.Комментарий");
	КонструкторДанных.ДобавитьСортировкуПоля("ГрафикиРаботы.Документ.Комментарий");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Транспорт");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Водитель");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Транспорт, Водитель, НачалоПериода"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

Процедура ОбработатьПериоды(Периоды)
	Если Периоды.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Периоды.Сортировать("НачалоПериода ВОЗР");
	
	мсПериоды = Новый Массив;
	Для Каждого Период Из Периоды Цикл мсПериоды.Добавить(Период); КонецЦикла;
	
	ПоследнийПериод = ЖурналНачалоПериода;
	ПоследнийПериодДата = '00010101';
	Для Каждого Период Из мсПериоды Цикл
		Если Период.НачалоПериода > ПоследнийПериод Тогда
			НовыйПериод = Периоды.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПериод, Период);
			НовыйПериод.Комментарий = "";
			НовыйПериод.ГрафикРаботы = Справочники.новаГрафикиРаботы.ПустаяСсылка();
			НовыйПериод.ГрафикРаботы_Пред = "";
			НовыйПериод.НачалоПериода = ПоследнийПериодДата;
			НовыйПериод.КонецПериода = Период.НачалоПериода - СекундВДне;
		КонецЕсли;
		ПоследнийПериод = Период.КонецПериода + СекундВДне;
		ПоследнийПериодДата = ПоследнийПериод;
	КонецЦикла;
	
	Если ПоследнийПериод < ЖурналКонецПериода Тогда
		НовыйПериод = Периоды.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПериод, Период);
		НовыйПериод.Комментарий = "";
		НовыйПериод.ГрафикРаботы = Справочники.новаГрафикиРаботы.ПустаяСсылка();
		НовыйПериод.ГрафикРаботы_Пред = "";
		НовыйПериод.НачалоПериода = ПоследнийПериодДата;
		НовыйПериод.КонецПериода = '30000101';
	КонецЕсли;
	
	Периоды.Сортировать("НачалоПериода ВОЗР");
КонецПроцедуры

Процедура ОбработатьГруппировку(Строки)
	Для Каждого Строка Из Строки Цикл
		Если Строка.Группировка = 0 Тогда
			ОбработатьПериоды(Строка.Строки);
		Иначе
			ОбработатьГруппировку(Строка.Строки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Предопределенная процедура. Вызывается источником данных для обработки результата запроса.
//
// Параметры:
//  дзДанные <ДеревоЗначений>
//
Процедура ПостОбработкаДанных(дзДанные) Экспорт
	Если дзДанные.Строки.Количество() > 0 Тогда
		ОбработатьГруппировку(дзДанные.Строки[0].Строки);
	КонецЕсли;
КонецПроцедуры

СекундВДне = 60 * 60 * 24;

#КонецЕсли