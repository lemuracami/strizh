
//Возвращает COM объект класса Запрос
//
Функция ПолучитьЗапрос()
	
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		КСЛ = новаСерверКСЛ.Подключиться();
	#КонецЕсли
	Результат = КСЛ.МодельДанных_Запрос();
	
	Возврат Результат;
	
КонецФункции

//Проверка классификатора сервера на заполненность
//
//  Возвращаемое значение:
//    <Булево> - Ичтина - классификатор пуст
//
Функция ТребуетсяОбновлениеАдресовНаСервере() Экспорт
	
	Запрос = ПолучитьЗапрос();
	Запрос.Текст = 
	"SELECT {MSSQL TOP 1}
	|    !Ид
	|    ,!Наименование
	|  FROM
	|    !Регионы
	|  {PGSQL LIMIT 1}
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат (РезультатЗапроса.Количество = 0);
	
КонецФункции

//Обновление списка регионов
//
Процедура ОбновитьСписокРегионов() Экспорт
	
	ВыбранныеРегионы = Новый Соответствие;
	Для каждого Регион Из Регионы Цикл
		
		Если Регион.Использовать Тогда
			ВыбранныеРегионы.Вставить(Регион.GUID, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Регионы.Очистить();
	
	Запрос = ПолучитьЗапрос();
	Запрос.Текст = 
	"SELECT
	|    !Ид
	|    ,!Наименование
	|  FROM
	|    !Регионы
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Для Индекс = 0 по РезультатЗапроса.Количество - 1 Цикл
		
		СтрокаРезультата = РезультатЗапроса.Строки.Получить(Индекс);
		
		НоваяСтрока = Регионы.Добавить();
		НоваяСтрока.GUID = СтрокаРезультата.ПолучитьСтроку(0);
		НоваяСтрока.Наименование = СтрокаРезультата.ПолучитьСтроку(1);
		НоваяСтрока.Использовать = (ВыбранныеРегионы[НоваяСтрока.GUID] <> Неопределено);
	КонецЦикла;
	
КонецПроцедуры

//Обновление списка населенных пунктов
//
Процедура ОбновитьСписокНаселенныхПунктов() Экспорт
	
	ВыбранныеРегионы = "";
	Для каждого Регион Из Регионы Цикл
		
		Если Регион.Использовать Тогда
			Если ЗначениеЗаполнено(ВыбранныеРегионы) Тогда
				ВыбранныеРегионы = ВыбранныеРегионы + ", '" + Регион.GUID + "'";
			Иначе
				ВыбранныеРегионы = "'" + Регион.GUID + "'";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранныеРегионы = "" Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеНаселенныеПункты = Новый Соответствие;
	Для каждого НаселенныйПункт Из НаселенныеПункты Цикл
		
		Если НаселенныйПункт.Использовать Тогда
			ВыбранныеНаселенныеПункты.Вставить(НаселенныйПункт.GUID, Истина);
		КонецЕсли;
	КонецЦикла;
	
	НаселенныеПункты.Очистить();
	
	Запрос = ПолучитьЗапрос();
	Запрос.Текст = 
	"SELECT
	|    !Ид
	|    ,!Наименование
	|    ,!Регион
	|  FROM
	|    !НаселенныеПункты
	|  WHERE
	|    (!ЭтоГруппа = false)
	|    AND !Регион IN (" + ВыбранныеРегионы + ")";
	
	РезультатЗапроса = Запрос.Выполнить();
	Для Индекс = 0 по РезультатЗапроса.Количество - 1 Цикл
		
		СтрокаРезультата = РезультатЗапроса.Строки.Получить(Индекс);
		
		НоваяСтрока = НаселенныеПункты.Добавить();
		НоваяСтрока.GUID = СтрокаРезультата.ПолучитьСтроку(0);
		НоваяСтрока.Владелец = СтрокаРезультата.ПолучитьСтроку(2);
		НоваяСтрока.Наименование = СтрокаРезультата.ПолучитьСтроку(1);
		НоваяСтрока.Использовать = (ВыбранныеНаселенныеПункты[НоваяСтрока.GUID] <> Неопределено);
	КонецЦикла;
	
КонецПроцедуры

//Загружает адреса на сервер
//
//  Параметры:
//    <Объект реализущий методы ПриИзмененииСтатуса(<Строка>), ПриЗавершенииЗагрузки() и поле Загрузчик;
//    млм Неопределено>
//
Процедура ЗагрузитьАдресаНаСервер(ОбработчикСобытий= Неопределено) Экспорт
	
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		КСЛ = новаСерверКСЛ.Подключиться();
	#КонецЕсли
	
	Если ОбработчикСобытий.Загрузчик <> Неопределено Тогда
		ОбработчикСобытий.Загрузчик.ОтключитьВсеОбработчики();
	КонецЕсли;
	
	Загрузчик = КСЛ.Геоинформация_АдресныйКлассификатор_ЗагрузкаАдресногоКлассификатора();
	Если ОбработчикСобытий <> Неопределено Тогда
		Загрузчик.ПриИзмененииСостояния(ОбработчикСобытий, "ПриИзмененииСтатуса");
		Загрузчик.ПриЗавершенииЗагрузки(ОбработчикСобытий, "ПриЗавершенииЗагрузки");
	КонецЕсли;
	Загрузчик.Загрузить();
	
	ОбработчикСобытий.Загрузчик = Загрузчик;
	
КонецПроцедуры

//Загрузка отмеченных регионов
//
Процедура ЗагрузтьРегионы()
	
	ПояснениеОперации = "Загрузка Регионов";
	ПрогрессОперации = 0;
	
	ЗагруженныеРегионы = Новый ТаблицаЗначений;
	ЗагруженныеРегионы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.новаРегионы"));
	ЗагруженныеРегионы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Для каждого Регион Из Регионы Цикл
		
		Если Регион.Использовать Тогда
			НоваяСтрока = ЗагруженныеРегионы.Добавить();
			НоваяСтрока.Ссылка = Справочники.новаРегионы.ПолучитьСсылку(Новый УникальныйИдентификатор(Регион.GUID));
			НоваяСтрока.Наименование = Регион.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка
	|    ,Наименование
	|  ПОМЕСТИТЬ ЗагруженныеРегионы
	|  ИЗ
	|    &ЗагруженныеРегионы КАК ЗагруженныеРегионы
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|    ЗагруженныеРегионы.Ссылка
	|    ,ЗагруженныеРегионы.Наименование
	|  ИЗ
	|    ЗагруженныеРегионы КАК ЗагруженныеРегионы
	|    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаРегионы КАК Регионы
	|      ПО
	|        ЗагруженныеРегионы.Ссылка = Регионы.Ссылка
	|  ГДЕ
	|    Регионы.Ссылка ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("ЗагруженныеРегионы", ЗагруженныеРегионы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Индекс = 0;
		Количество = Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			
			обРегион = Справочники.новаРегионы.СоздатьЭлемент();
			обРегион.ДополнительныеСвойства.Вставить("Синхронизирован", Истина);
			обРегион.УстановитьСсылкуНового(Выборка.Ссылка);
			обРегион.Владелец = Справочники.новаСтраны.Россия;
			обРегион.Наименование = Выборка.Наименование;
			обРегион.Записать();
			
			Индекс = Индекс + 1;
			ПрогрессОперации = 30 + Цел(70 * Индекс / Количество);
			ОбщийПрогресс = Цел(5 * Индекс / Количество);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Загрузка населенных пунктов
//
Процедура ЗагрузтьНаселенныеПункты()
	
	ПояснениеОперации = "Загрузка населенных пунктов";
	ПрогрессОперации = 0;
	
	ЗагруженныеНаселенныеПункты = Новый ТаблицаЗначений;
	ЗагруженныеНаселенныеПункты.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.новаНаселенныеПункты"));
	ЗагруженныеНаселенныеПункты.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.новаРегионы"));
	ЗагруженныеНаселенныеПункты.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Для каждого НаселенныйПункт Из НаселенныеПункты Цикл
		
		Если НаселенныйПункт.Использовать Тогда
			НоваяСтрока = ЗагруженныеНаселенныеПункты.Добавить();
			НоваяСтрока.Ссылка = Справочники.новаНаселенныеПункты.ПолучитьСсылку(Новый УникальныйИдентификатор(НаселенныйПункт.GUID));
			НоваяСтрока.Владелец = Справочники.новаРегионы.ПолучитьСсылку(Новый УникальныйИдентификатор(НаселенныйПункт.Владелец));
			НоваяСтрока.Наименование = НаселенныйПункт.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка
	|    ,Владелец
	|    ,Наименование
	|  ПОМЕСТИТЬ ЗагруженныеНаселенныеПункты
	|  ИЗ
	|    &ЗагруженныеНаселенныеПункты КАК ЗагруженныеНаселенныеПункты
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|    ЗагруженныеНаселенныеПункты.Ссылка
	|    ,ЗагруженныеНаселенныеПункты.Владелец
	|    ,ЗагруженныеНаселенныеПункты.Наименование
	|  ИЗ
	|    ЗагруженныеНаселенныеПункты КАК ЗагруженныеНаселенныеПункты
	|    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаНаселенныеПункты КАК НаселенныеПункты
	|      ПО
	|        ЗагруженныеНаселенныеПункты.Ссылка = НаселенныеПункты.Ссылка
	|  ГДЕ
	|    НаселенныеПункты.Ссылка ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("ЗагруженныеНаселенныеПункты", ЗагруженныеНаселенныеПункты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Индекс = 0;
		Количество = Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			
			обНаселенныйПункт = Справочники.новаНаселенныеПункты.СоздатьЭлемент();
			обНаселенныйПункт.ДополнительныеСвойства.Вставить("Синхронизирован", Истина);
			обНаселенныйПункт.УстановитьСсылкуНового(Выборка.Ссылка);
			обНаселенныйПункт.Владелец = ?(ЗначениеЗаполнено(Выборка.Владелец), Выборка.Владелец, Справочники.новаСтраны.Россия);
			обНаселенныйПункт.Наименование = Выборка.Наименование;
			обНаселенныйПункт.Записать();
			
			Индекс = Индекс + 1;
			ПрогрессОперации = 30 + Цел(70 * Индекс / Количество);
			ОбщийПрогресс = Цел(5 * Индекс / Количество);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Загрузка улиц
//
Процедура ЗагрузитьУлицыНаселенныхПунктов()
	
	ПояснениеОперации = "Загрузка Улиц";
	ПрогрессОперации = 0;
	
	ВыбранныеНаселенныеПункты = "";
	Для каждого НаселенныйПункт Из НаселенныеПункты Цикл
		
		Если НаселенныйПункт.Использовать Тогда
			Если ЗначениеЗаполнено(ВыбранныеНаселенныеПункты) Тогда
				ВыбранныеНаселенныеПункты = ВыбранныеНаселенныеПункты + ", '" + НаселенныйПункт.GUID + "'";
			Иначе
				ВыбранныеНаселенныеПункты = "'" + НаселенныйПункт.GUID + "'";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗагруженныеУлицы = Новый ТаблицаЗначений;
	ЗагруженныеУлицы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.новаУлицы"));
	ЗагруженныеУлицы.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.новаНаселенныеПункты"));
	ЗагруженныеУлицы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Запрос = ПолучитьЗапрос();
	Запрос.Текст = 
	"SELECT
	|    !Ид
	|    ,!Наименование
	|    ,!НаселенныйПункт
	|  FROM
	|    !Улицы
	|  WHERE
	|    (!ЭтоГруппа = false)
	|    AND !НаселенныйПункт IN (" + ВыбранныеНаселенныеПункты + ")";
	
	РезультатЗапроса = Запрос.Выполнить();
	Для Индекс = 0 по РезультатЗапроса.Количество - 1 Цикл
		
		СтрокаРезультата = РезультатЗапроса.Строки.Получить(Индекс);
		
		НоваяСтрока = ЗагруженныеУлицы.Добавить();
		НоваяСтрока.Ссылка = Справочники.новаУлицы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультата.ПолучитьСтроку(0)));
		НоваяСтрока.Наименование = СтрокаРезультата.ПолучитьСтроку(1);
		НоваяСтрока.Владелец = Справочники.новаНаселенныеПункты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультата.ПолучитьСтроку(2)));
	КонецЦикла;
	
	ПрогрессОперации = 25;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка
	|    ,Владелец
	|    ,Наименование
	|  ПОМЕСТИТЬ ЗагруженныеУлицы
	|  ИЗ
	|    &ЗагруженныеУлицы КАК ЗагруженныеУлицы
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|    ЗагруженныеУлицы.Ссылка
	|    ,ЗагруженныеУлицы.Владелец
	|    ,ЗагруженныеУлицы.Наименование
	|  ИЗ
	|    ЗагруженныеУлицы КАК ЗагруженныеУлицы
	|    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаУлицы КАК УлицыНаселенныхПунктов
	|      ПО
	|        ЗагруженныеУлицы.Ссылка = УлицыНаселенныхПунктов.Ссылка
	|  ГДЕ
	|    УлицыНаселенныхПунктов.Ссылка ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("ЗагруженныеУлицы", ЗагруженныеУлицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Индекс = 0;
		Количество = Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			
			обУлица = Справочники.новаУлицы.СоздатьЭлемент();
			обУлица.ДополнительныеСвойства.Вставить("Синхронизирован", Истина);
			обУлица.УстановитьСсылкуНового(Выборка.Ссылка);
			обУлица.Владелец = Выборка.Владелец;
			обУлица.Наименование = Выборка.Наименование;
			обУлица.Записать();
			
			Индекс = Индекс + 1;
			ПрогрессОперации = 30 + Цел(70 * Индекс / Количество);
			ОбщийПрогресс = 5 + Цел(10 * Индекс / Количество);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Загрузка адресов
//
Процедура ЗагрузитьДома()
	
	ПояснениеОперации = "Загрузка домов: Чтение данных из КСЛ";
	ПрогрессОперации = 0;
	
	ВыбранныеНаселенныеПункты = "";
	Для каждого НаселенныйПункт Из НаселенныеПункты Цикл
		
		Если НаселенныйПункт.Использовать Тогда
			Если ЗначениеЗаполнено(ВыбранныеНаселенныеПункты) Тогда
				ВыбранныеНаселенныеПункты = ВыбранныеНаселенныеПункты + ", '" + НаселенныйПункт.GUID + "'";
			Иначе
				ВыбранныеНаселенныеПункты = "'" + НаселенныйПункт.GUID + "'";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗагруженныеДома = Новый ТаблицаЗначений;
	ЗагруженныеДома.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.новаАдреса"));
	ЗагруженныеДома.Колонки.Добавить("Регион", Новый ОписаниеТипов("СправочникСсылка.новаРегионы"));
	ЗагруженныеДома.Колонки.Добавить("НаселенныйПункт", Новый ОписаниеТипов("СправочникСсылка.новаНаселенныеПункты"));
	ЗагруженныеДома.Колонки.Добавить("Улица", Новый ОписаниеТипов("СправочникСсылка.новаУлицы"));
	ЗагруженныеДома.Колонки.Добавить("Дом", Новый ОписаниеТипов("Строка"));
	ЗагруженныеДома.Колонки.Добавить("Корпус", Новый ОписаниеТипов("Строка"));
	ЗагруженныеДома.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число"));
	ЗагруженныеДома.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число"));
	ЗагруженныеДома.Колонки.Добавить("ТипТочкиИнтереса", Новый ОписаниеТипов("СправочникСсылка.новаТипыТочекИнтереса"));
	ЗагруженныеДома.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Запрос = ПолучитьЗапрос();
	
	ПоследнийИд = "00000000-0000-0000-0000-000000000000";
	ЕстьДанные = Истина;
	КоличествоПрочитанныхАдресов = 0;
	
	Пока ЕстьДанные Цикл
		
		Запрос.Текст = "
		|SELECT {MSSQL TOP 512}
		|    !Ид
		|    ,!Регион
		|    ,!НаселенныйПункт
		|    ,!Улица
		|    ,!Дом
		|    ,!Корпус
		|    ,!Широта
		|    ,!Долгота
		|    ,!ТипТочкиИнтереса
		|    ,!Наименование
		|  FROM
		|    !Адреса
		|  WHERE
		|    (!ЭтоГруппа = false)
		|    AND ( !НаселенныйПункт IN (" + ВыбранныеНаселенныеПункты + ")
		|          OR !ТипТочкиИнтереса <> '00000000-0000-0000-0000-000000000000')
		|    AND !Ид > '" + ПоследнийИд + "'
		|  ORDER BY
		|    !Ид
		|  {PGSQL LIMIT 512}
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанные = не РезультатЗапроса.Пустой;
		
		Если ЕстьДанные Тогда
			Для Индекс = 0 по РезультатЗапроса.Количество - 1 Цикл
				
				СтрокаРезультата = РезультатЗапроса.Строки.Получить(Индекс);
				
				НоваяСтрока = ЗагруженныеДома.Добавить();
				НоваяСтрока.Ссылка = Справочники.новаАдреса.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультата.ПолучитьСтроку(0)));
				НоваяСтрока.Регион = Справочники.новаРегионы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультата.ПолучитьСтроку(1)));
				НоваяСтрока.НаселенныйПункт = Справочники.новаНаселенныеПункты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультата.ПолучитьСтроку(2)));
				НоваяСтрока.Улица = Справочники.новаУлицы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультата.ПолучитьСтроку(3)));
				НоваяСтрока.Дом = СтрокаРезультата.ПолучитьСтроку(4);
				НоваяСтрока.Корпус = СтрокаРезультата.ПолучитьСтроку(5);
				НоваяСтрока.Широта = СтрокаРезультата.ПолучитьСтроку(6);
				НоваяСтрока.Долгота = СтрокаРезультата.ПолучитьСтроку(7);
				НоваяСтрока.ТипТочкиИнтереса = Справочники.новаТипыТочекИнтереса.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультата.ПолучитьСтроку(8)));
				НоваяСтрока.Наименование = СтрокаРезультата.ПолучитьСтроку(9);
			КонецЦикла;
			
			ПоследнийИд = СтрокаРезультата.ПолучитьСтроку(0);
			
			КоличествоПрочитанныхАдресов = КоличествоПрочитанныхАдресов + РезультатЗапроса.Количество;
			#Если Клиент Тогда
				Состояние(КоличествоПрочитанныхАдресов);
			#КонецЕсли
		КонецЕсли;
		
		ПрогрессОперации = ПрогрессОперации + 1;
		ПрогрессОперации = ?(ПрогрессОперации < 100, ПрогрессОперации, 0)
	КонецЦикла;

	ПрогрессОперации = 0;
	
	ПояснениеОперации = "Загрузка домов: Запись данных в базу 1С";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка
	|    ,Регион
	|    ,НаселенныйПункт
	|    ,Улица
	|    ,Дом
	|    ,Корпус
	|    ,Широта
	|    ,Долгота
	|    ,ТипТочкиИнтереса
	|    ,Наименование
	|  ПОМЕСТИТЬ ЗагруженныеДома
	|  ИЗ
	|    &ЗагруженныеДома КАК ЗагруженныеДома
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|    ЗагруженныеДома.Ссылка
	|    ,ЗагруженныеДома.Регион
	|    ,ЗагруженныеДома.НаселенныйПункт
	|    ,ЗагруженныеДома.Улица
	|    ,ЗагруженныеДома.Дом
	|    ,ЗагруженныеДома.Корпус
	|    ,ЗагруженныеДома.Широта
	|    ,ЗагруженныеДома.Долгота
	|    ,ЗагруженныеДома.ТипТочкиИнтереса
	|    ,ЗагруженныеДома.Наименование
	|  ИЗ
	|    ЗагруженныеДома КАК ЗагруженныеДома
	|    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаАдреса КАК Дома
	|      ПО
	|        ЗагруженныеДома.Ссылка = Дома.Ссылка
	|  ГДЕ
	|    Дома.Ссылка ЕСТЬ NULL
	|    ИЛИ ЗагруженныеДома.Широта <> Дома.Широта
	|    ИЛИ ЗагруженныеДома.Долгота <> Дома.Долгота
	|");
	
	Запрос.УстановитьПараметр("ЗагруженныеДома", ЗагруженныеДома);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Индекс = 0;
		Количество = Выборка.Количество();
		
		СписокАдресов = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			СписокАдресов.Добавить(Выборка.Ссылка);
			
			обДома = Выборка.Ссылка.ПолучитьОбъект();
			Если обДома = Неопределено Тогда
				обДома = Справочники.новаАдреса.СоздатьЭлемент();
				обДома.УстановитьСсылкуНового(Выборка.Ссылка);
			КонецЕсли;
			обДома.ДополнительныеСвойства.Вставить("Синхронизирован", Истина);
			обДома.Страна = Справочники.новаСтраны.Россия;
			обДома.Регион = Выборка.Регион;
			обДома.НаселенныйПункт = Выборка.НаселенныйПункт;
			обДома.Улица = Выборка.Улица;
			обДома.Дом = Выборка.Дом;
			обДома.Корпус = Выборка.Корпус;
			обДома.Широта = Выборка.Широта;
			обДома.Долгота = Выборка.Долгота;
			обДома.ТочкаИнтереса = ЗначениеЗаполнено(Выборка.ТипТочкиИнтереса);
			обДома.НаименованиеТочкиИнтереса = ?(ЗначениеЗаполнено(Выборка.ТипТочкиИнтереса), Выборка.Наименование, "");
			обДома.ТипТочкиИнтереса = Выборка.ТипТочкиИнтереса;
			обДома.Наименование = Выборка.Наименование;
			обДома.ВходитВКлассификатор = Истина;
			
			обДома.ДополнительныеСвойства.Вставить("ПакетнаяЗагрузка", Истина);
			
			обДома.Записать();
		
			Индекс = Индекс + 1;
			ПрогрессОперации = 5 + Цел(95 * Индекс / Количество);
			ОбщийПрогресс = 15 + Цел(40 * Индекс / Количество);
		КонецЦикла;
		
		ПрогрессОперации = 0;
		ПояснениеОперации = "Загрузка домов: Определение районов адресов";
		
		тзГеоРайоны = новаКарты.РассчитатьГеоРайоныАдресов(, , , , СписокАдресов);
		тзГеоРайоны.Индексы.Добавить("Адрес");
		
		ПрогрессОперации = 50;
		ПояснениеОперации = "Загрузка домов: Запись соответствия адресов районам";
		
		Индекс = 0;
		Количество = тзГеоРайоны.Количество();
		
		ПрогрессОперации = 70;
		
		Для каждого ОбновляемыйАдрес Из СписокАдресов Цикл
			
			
			НайденныеСтроки = тзГеоРайоны.НайтиСтроки(Новый Структура("Адрес", ОбновляемыйАдрес));
			
			НаборЗаписей = РегистрыСведений.новаРайоныАдресов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Адрес.Установить(ОбновляемыйАдрес);
			НаборЗаписей.Отбор.УказанВручную.Установить(Ложь);
			НаборЗаписей.Очистить();
			
			Для Каждого стрРайон Из НайденныеСтроки Цикл
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, стрРайон);
				Запись.Адрес = ОбновляемыйАдрес;
				Запись.УказанВручную = Ложь;
			
				Индекс = Индекс + 1;
				ПрогрессОперации = 50 + Цел(30 * Индекс / Количество);
				ОбщийПрогресс = 55 + Цел(40 * Индекс / Количество);
			КонецЦикла;
			
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Загрузка типов точек интереса
//
Процедура ЗагрузитьТипыТочекИнтереса()
	
	ПояснениеОперации = "Загрузка типов точек интереса";
	ПрогрессОперации = 0;
	
	ЗагруженныеТипы= Новый ТаблицаЗначений;
	ЗагруженныеТипы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.новаТипыТочекИнтереса"));
	ЗагруженныеТипы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Запрос = ПолучитьЗапрос();
	Запрос.Текст = 
	"SELECT
	|    !Ид
	|    ,!Наименование
	|  FROM
	|    !ТипыТочекИнтереса
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Для Индекс = 0 по РезультатЗапроса.Количество - 1 Цикл
		
		СтрокаРезультата = РезультатЗапроса.Строки.Получить(Индекс);
		
		НоваяСтрока = ЗагруженныеТипы.Добавить();
		НоваяСтрока.Ссылка = Справочники.новаТипыТочекИнтереса.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультата.ПолучитьСтроку(0)));
		НоваяСтрока.Наименование = СтрокаРезультата.ПолучитьСтроку(1);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка
	|    ,Наименование
	|  ПОМЕСТИТЬ ЗагруженныеТипы
	|  ИЗ
	|    &ЗагруженныеТипы КАК ЗагруженныеТипы
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|    ЗагруженныеТипы.Ссылка
	|    ,ЗагруженныеТипы.Наименование
	|  ИЗ
	|    ЗагруженныеТипы КАК ЗагруженныеТипы
	|    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТипыТочекИнтереса КАК ТипыТочекИнтереса
	|      ПО
	|        ЗагруженныеТипы.Ссылка = ТипыТочекИнтереса.Ссылка
	|  ГДЕ
	|    ТипыТочекИнтереса.Ссылка ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("ЗагруженныеТипы", ЗагруженныеТипы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Индекс = 0;
		Количество = Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			
			ТипТочкиИнтереса = Справочники.новаТипыТочекИнтереса.СоздатьЭлемент();
			ТипТочкиИнтереса.ДополнительныеСвойства.Вставить("Синхронизирован", Истина);
			ТипТочкиИнтереса.УстановитьСсылкуНового(Выборка.Ссылка);
			ТипТочкиИнтереса.Наименование = Выборка.Наименование;
			ТипТочкиИнтереса.Записать();
			
			Индекс = Индекс + 1;
			ПрогрессОперации = 95 + Цел(5 * Индекс / Количество);
			ОбщийПрогресс = Цел(5 * Индекс / Количество);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Загрузка адресов с сервера КСЛ
//
Процедура ЗагрузитьАдреса() Экспорт
	
	ПояснениеОперации = "";
	ПрогрессОперации = 0;
	ОбщийПрогресс = 0;
	
	Загружать= Ложь;
	Для каждого НаселенныйПункт Из НаселенныеПункты Цикл
		Загружать = Загружать или НаселенныйПункт.Использовать;
	КонецЦикла;
	
	Если Загружать Тогда
		ЗагрузтьРегионы();
		ЗагрузтьНаселенныеПункты();
		ОбщийПрогресс = 5;
		ЗагрузитьУлицыНаселенныхПунктов();
		ОбщийПрогресс = 15;
		ЗагрузитьДома();
		ОбщийПрогресс = 95;
		ЗагрузитьТипыТочекИнтереса();
		ОбщийПрогресс = 100;
	КонецЕсли;
	
КонецПроцедуры