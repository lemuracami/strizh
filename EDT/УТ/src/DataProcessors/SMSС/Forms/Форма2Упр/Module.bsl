//&НаКлиенте
//перем ФорматыСообщений,СписокСтатусов,СписокОшибок,ЧасовыеПоясы,  ПоследнееИД,ПоследнийНомер;
&НаСервере
перем SMSC_CHARSET;
Перем ЕСТЬ_ПРОКСИ;		// Флаг использования PROXY-сервера
Перем ПРОКСИ_АДРЕС;
Перем ПРОКСИ_ПОРТ;
Перем ПРОКСИ_ЛОГИН;
Перем ПРОКСИ_ПАРОЛЬ;

&НаКлиенте
Процедура Кн_фамилия(Команда)
	Если Найти(Сообщение, "%f%") = 0 тогда  
		Сообщение=Сообщение+" %f% ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИмя(Команда)
	Если Найти(Сообщение, "%i%") = 0 тогда
		Сообщение=Сообщение+" %i% ";	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтчество(Команда)
	Если Найти(Сообщение, "%o%") = 0 тогда
		Сообщение=Сообщение+" %o% ";		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалить(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавить(Команда)
	
	ПараметрыПодбора=новый Структура("ЗакрыватьПриВыборе" , Ложь);
	ОткрытьФорму("Справочник."+ВыбСправочник+".ФормаВыбора", ПараметрыПодбора, Элементы.СписокКлиентов);
	//спр=Справочники.Контрагенты.НайтиПоКоду("Ю00000035");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьГруппу(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КнопкаSMSC_RUНажатие(Команда)
	ЗапуститьПриложение("www.smsc.ru");	
КонецПроцедуры


&НаКлиенте
Процедура СообщениеПриИзменении(Элемент)
	ДлинаСообщения = СтрДлина(Сообщение);
	Если ДлинаСообщения > 800 тогда
		Элементы.ВсегоСимволов.ЦветТекста = Новый Цвет(255, 0, 0);
	Иначе
		Элементы.ВсегоСимволов.ЦветТекста = Новый Цвет(0, 0, 255);
	КонецЕсли;
	ВсегоСимволов = ДлинаСообщения;
КонецПроцедуры


&НаКлиенте
Процедура флДатаОтправкиПриИзменении(Элемент)
	Элементы.ДатаОтправки.Доступность = флДатаОтправки;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	//сообщить("ылвоайпй");
КонецПроцедуры

&НаКлиенте
Процедура СписокКлиентовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Отбор = Новый Структура();
	Отбор.Вставить("Клиент",ВыбранноеЗначение);
	стр=СписокКлиентов.НайтиСтроки(Отбор);
	если стр.Количество()=0 тогда
		зн=СписокКлиентов.Добавить();
		зн.Клиент=ВыбранноеЗначение;
	конецесли;
КонецПроцедуры


&НаСервере
Функция ПолучитьСписокРеквизитов(знач _имя_спр)
	перем сп2;
	сп2 = новый Массив;
	сп2.Добавить("Наименование");
	
	Для Каждого Реквизит Из Метаданные.Справочники[_имя_спр].Реквизиты Цикл
		Сп2.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	возврат(сп2);
конецфункции

&НаСервере
Функция ПолучитьСписокСправочников()
	перем сп;
	сп = новый Массив;
	
	Для Каждого Реквизит Из Метаданные.Справочники Цикл
		Сп.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	возврат(сп);
конецфункции


&НаКлиенте
Процедура ВыбСправочникНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	перем сп_выб,_спис;
	
	//СтандартнаяОбработка=Ложь;
	
	_спис=ПолучитьСписокСправочников();
	сп_выб=Элементы.ВыбСправочник.СписокВыбора;
	сп_выб.ЗагрузитьЗначения(_спис);

КонецПроцедуры

&НаКлиенте
Процедура ВыбФИОНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	перем _имя_справочника,_спис2,сп_выб;
	//СтандартнаяОбработка=Ложь;
	_имя_справочника=Элементы.ВыбСправочник.ТекстРедактирования;
	_спис2=новый Массив;
	_спис2=ПолучитьСписокРеквизитов(_имя_справочника);
	сп_выб=Элементы.ВыбФИО.СписокВыбора;
	сп_выб.ЗагрузитьЗначения(_спис2);

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТабЧастейСправочника(_имя_спр)
	перем м;
	м=новый Массив;
	если _имя_спр="" тогда
		возврат(м);
	конецесли;
	
	Для Каждого Реквизит Из Метаданные.Справочники[_имя_спр].ТабличныеЧасти Цикл
		м.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	возврат(м);
	
конецфункции

&НаСервере
функция ПолучитьСписокРегистровСведений()
	перем м;
	м=новый Массив;
	
	Для Каждого Реквизит Из Метаданные.РегистрыСведений Цикл
		м.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	возврат(м);
конецфункции

&НаСервере
Функция ПолучитьСписокРеквизитовТабЧастейСправочника(_имя_спр,_имя_тч)
	перем м;
	м=новый Массив;
	если (_имя_спр="")или(_имя_тч="") тогда
		возврат(м);
	конецесли;
	
	//сообщить(_имя_спр);
	//сообщить(_имя_тч);
	
	Для Каждого Реквизит Из Метаданные.Справочники[_имя_спр].ТабличныеЧасти[_имя_тч].Реквизиты Цикл
		м.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	возврат(м);
	
конецфункции

&НаСервере
функция ПолучитьСписокИзмеренийРегистраСведений(_имя_рег)
	перем м;
	м=новый Массив;
	
	если _имя_рег="" тогда возврат(м); конецесли;
	
	Для Каждого Реквизит Из Метаданные.РегистрыСведений[_имя_рег].Измерения Цикл
		м.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	возврат(м);
конецфункции

&НаСервере
функция ПолучитьСписокРесурсовРегистраСведений(_имя_рег)
	перем м;
	м=новый Массив;
	
	если _имя_рег="" тогда возврат(м); конецесли;
	
	Для Каждого Реквизит Из Метаданные.РегистрыСведений[_имя_рег].Ресурсы Цикл
		м.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	возврат(м);
конецфункции


&НаКлиенте
Процедура ВыбТелефонНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	перем _спис;
	
	_источник=Элементы.ИсточникКИ.ТекстРедактирования;
	
	если _источник="Табличная часть справочника" тогда
		_спис=ПолучитьСписокРеквизитовТабЧастейСправочника(Элементы.ВыбСправочник.ТекстРедактирования,Элементы.РесурсКИ.ТекстРедактирования);
		Элементы.ВыбТелефон.СписокВыбора.ЗагрузитьЗначения(_спис);
	иначеесли _источник="Регистр сведений" тогда
		_спис=ПолучитьСписокРесурсовРегистраСведений(Элементы.РесурсКИ.ТекстРедактирования);
		Элементы.ВыбТелефон.СписокВыбора.ЗагрузитьЗначения(_спис);
	иначеесли _источник="Реквизит справочника" тогда
		_спис2=ПолучитьСписокРеквизитов(Элементы.ВыбСправочник.ТекстРедактирования);
		Элементы.ВыбТелефон.СписокВыбора.ЗагрузитьЗначения(_спис2);
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКИНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	перем м;
	м=новый Массив;
	м.Добавить("Табличная часть справочника");
	м.Добавить("Регистр сведений");
	м.Добавить("Реквизит справочника");
	Элементы.ИсточникКИ.СписокВыбора.ЗагрузитьЗначения(м);
КонецПроцедуры

&НаКлиенте
Процедура РесурсКИНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	перем _спис;
	_источник=Элементы.ИсточникКИ.ТекстРедактирования;//ВыделенныйТекст;
	если _источник="Табличная часть справочника" тогда
		_спис=ПолучитьСписокТабЧастейСправочника(Элементы.ВыбСправочник.ТекстРедактирования);//ВыделенныйТекст);
		Элементы.РесурсКИ.СписокВыбора.ЗагрузитьЗначения(_спис);
	иначеесли _источник="Регистр сведений" тогда
		_спис=ПолучитьСписокРегистровСведений();
		Элементы.РесурсКИ.СписокВыбора.ЗагрузитьЗначения(_спис);
	иначеесли _источник="Реквизит справочника" тогда
		
	конецесли;

КонецПроцедуры

&НаСервере
процедура установить_тип_таблицы(знач _имя_спр)
		
	СписокКлиентов.Очистить();
	
конецпроцедуры

&НаКлиенте
Процедура ВыбСправочникПриИзменении(Элемент)
	ВыбФИО="";
	ИсточникКИ="";
	РесурсКИ="";
	ВыбТелефон="";
	СвязатьПоПолюКИ="";
	ТипКИ="";
	
	СписокКлиентов.Очистить();
	
	//установить_тип_таблицы(ВыбСправочник);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
		
КонецПроцедуры

&НаКлиенте
Процедура СвязатьПоПолюНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	перем _спис;
	
	_источник=Элементы.ИсточникКИ.ТекстРедактирования;//ВыделенныйТекст;
	
	если _источник="Регистр сведений" тогда
		_спис=ПолучитьСписокИзмеренийРегистраСведений(Элементы.РесурсКИ.ТекстРедактирования);//ВыделенныйТекст);
		Элементы.СвязатьПоПолю.СписокВыбора.ЗагрузитьЗначения(_спис);
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКИПриИзменении(Элемент)
	РесурсКИ="";
	СвязатьПоПолюКИ="";
	ВыбТелефон="";
	ТипКИ="";
КонецПроцедуры

&НаКлиенте
Процедура РесурсКИПриИзменении(Элемент)
	СвязатьПоПолюКИ="";
	ВыбТелефон="";
	ТипКИ="";
КонецПроцедуры

&НаКлиенте
Процедура ТипКИНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	перем _спис;
	
	_источник=Элементы.ИсточникКИ.ТекстРедактирования;//ВыделенныйТекст;
	
	если _источник="Регистр сведений" тогда
		_спис=ПолучитьСписокИзмеренийРегистраСведений(Элементы.РесурсКИ.ТекстРедактирования);//ВыделенныйТекст);
		Элементы.ТипКИ.СписокВыбора.ЗагрузитьЗначения(_спис);
	конецесли;
	ТипКИ="";
КонецПроцедуры


&НаСервере
функция ФорматыСообщений(_фс)
	возврат(?(_фс,"flash=1",""));
конецфункции

&НаСервере
функция СписокСтатусов(_сс)
	перем _СписокСтатусов;
	_СписокСтатусов = Новый СписокЗначений;
	_СписокСтатусов.Добавить(-1, "Ожидает отправки");
	_СписокСтатусов.Добавить(0,  "Передано оператору");
	_СписокСтатусов.Добавить(1,  "Доставлено");
	_СписокСтатусов.Добавить(2,  "Статус не получен");
	_СписокСтатусов.Добавить(3,  "Просрочено");
	_СписокСтатусов.Добавить(20, "Невозможно доставить");
	_СписокСтатусов.Добавить(21, "Неизвестный статус");
	_СписокСтатусов.Добавить(22, "Неверный номер");
	_СписокСтатусов.Добавить(23, "Запрещено");
	_СписокСтатусов.Добавить(24, "Недостаточно средств");
	возврат(_СписокСтатусов.НайтиПоЗначению(_сс).Представление);
конецфункции

&НаСервере
функция СписокОшибок(_со)
	перем _СписокОшибок;
	_СписокОшибок = Новый СписокЗначений;
	_СписокОшибок.Добавить(-1, "Ошибка в параметрах");
	_СписокОшибок.Добавить(-2, "Неверный логин или пароль");
	_СписокОшибок.Добавить(-3, "Недостаточно средств на счету Клиента");
	_СписокОшибок.Добавить(-4, "IP-адрес временно заблокирован");
	_СписокОшибок.Добавить(-5, "Неверный формат даты");
	_СписокОшибок.Добавить(-6, "Сообщение запрещено");
	_СписокОшибок.Добавить(-7, "Неверный формат номера телефона");
	_СписокОшибок.Добавить(-8, "Сообщение на указанный номер не может быть доставлено");
	_СписокОшибок.Добавить(-9, "Попытка отправки более двух одинаковых запросов в течение минуты");
	_СписокОшибок.Добавить(-10, "Превышен лимит запросов в сутки");	
	
	возврат(_СписокОшибок.НайтиПоЗначению(_со));
конецфункции

&НаКлиенте
процедура заполнить_по_умолчанию()
	
	если ВыбСправочник="" тогда
		ВыбСправочник="Контрагенты";
		ВыбФИО="НаименованиеПолное";
		ИсточникКИ="Табличная часть справочника";
		РесурсКИ="КонтактнаяИнформация";
		ВыбТелефон="НомерТелефона";
	конецесли;
	
	если (SMSC_ЧасовойПояс<=8)и(SMSC_ЧасовойПояс>=-16) тогда иначе SMSC_ЧасовойПояс=3; конецесли;
	
конецпроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-16, "GMT -12 Меридиан смены дат");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-15, "GMT -11 Самоа");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-14, "GMT -10 Гавайи");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-13, "GMT -09 Аляска");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-12, "GMT -08 Тихоокеанское время");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-11, "GMT -07 Горное время (США и Канада)");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-10, "GMT -06 Мехико");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-9,  "GMT -05 Богота");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-8,  "GMT -04 Атлантическое время");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-7,  "GMT -03 Бразилия, Гренландия");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-6,  "GMT -02 Среднеатлантическое время");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-5,  "GMT -01 Азорские острова");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-4,  "GMT +00 Время по Гринвичу: Лондон");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-3,  "GMT +01 Амстердам, Берлин");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-2,  "GMT +02 Афины, Киев, Минск, Калининград");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(-1,  "GMT +03 Найроби, Ирак, Кувейт");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(0,   "GMT +04 Москва, Баку, Ереван, Тбилиси");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(1,   "GMT +05 Исламабад, Ташкент, Карачи");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(2,   "GMT +06 Екатеринбург, Алма-Ата");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(3,   "GMT +07 Омск, Новосибирск, Бангкок");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(4,   "GMT +08 Красноярск, Гонконг, Пекин");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(5,   "GMT +09 Иркутск, Сеул, Токио");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(6,   "GMT +10 Якутск, Сидней, Гуам");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(7,   "GMT +11 Владивосток, Соломоновы острова");
	Элементы.ЧасовыеПоясы1.СписокВыбора.Добавить(8,   "GMT +12 Магадан, Камчатка, Новая Зеландия"); 	
                  
	Для Сч = 0 По 7 Цикл
		Элементы.СрокЖизниSMS.СписокВыбора.Добавить(24-Сч*2, Строка(24-Сч*2));
	КонецЦикла;
	Для Сч = 0 По 8 Цикл
		Элементы.СрокЖизниSMS.СписокВыбора.Добавить(9-Сч, Строка(9-Сч));
	КонецЦикла;
	СрокЖизниSMS = 24;
	
	СтатусСтрока 	= "";
	ДатаОтправки 	= ТекущаяДата(); // для отложенной отправки
	
	заполнить_по_умолчанию();
	
КонецПроцедуры


//***************************************************************************************
// ВНУТРЕННИЕ СЛУЖЕБНЫЕ ФУНКЦИИ

//***************************************************************************************
// Функция преобразования строки вида х,у в список значений
//
&НаСервере
Функция Строка2Список(Стр)       
	
	Перем Рез;
	    
	Рез = Новый СписокЗначений;
	Сч = 1;
	
	Для Сч = 1 По 4 Цикл
	    
		Поз = Найти(Стр, ","); 
		
		Если Поз = 0 Тогда
		    Рез.Добавить(Стр);
		    Прервать;                 
		Иначе	
			Рез.Добавить(Лев(Стр,Поз-1));
		КонецЕсли;	 
		
		Стр = Сред(Стр, Поз+1, СтрДлина(Стр)-Поз);
		
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // Строка2Список()

&НаСервере
функция Hex(КС)
	
	_Hex = Новый Массив(16);
	_Hex[0]="0";
	_Hex[1]="1";
	_Hex[2]="2";
	_Hex[3]="3";
	_Hex[4]="4";
	_Hex[5]="5";
	_Hex[6]="6";
	_Hex[7]="7";
	_Hex[8]="8";
	_Hex[9]="9";
	_Hex[10]="A";
	_Hex[11]="B";
	_Hex[12]="C";
	_Hex[13]="D";
	_Hex[14]="E";
	_Hex[15]="F";	
	
	возврат(_Hex[Цел(КС/16)] + _Hex[Цел(КС%16)]);
	
конецфункции
//***************************************************************************************  
&НаСервере
Функция URLEncode(Стр1)
             
	Рез = ""; 
	Стр= СокрЛП(Стр1);
	Для Сч=1 По СтрДлина(Стр) Цикл
 
		Символ = Сред(Стр, Сч, 1);
		КС = КодСимвола(Символ);
		
		Рез = Рез + "%"+ Hex(Цел(КС/256)) + "%"+ Hex(КС%256);
		
	КонецЦикла;
 
	Возврат Рез;
КонецФункции // URLEncode()

//*******************************************************************************
// Переводит время в формате Unix DateTimeStamp в строку с датой, временем 
//
// Пареметры: 
// ШтампВремени - штамп времени в формате Unix
//
&НаСервере
Функция Unix2Date (ШтампВремени)  
	
	Возврат Дата("19700101000000") + ШтампВремени;
	
КонецФункции // Unix2Date()

//***************************************************************************************
// Функция получения баланса
//
// без параметров
//
// возвращает баланс в виде строки или 0 в случае ошибки
//
&НаСервере
Функция ПолучитьБаланс()
	        
    Ответ = _SMSC_ПослатьКоманду("balance"); // (balance) или (0, -error)
	Рез = Число(Ответ[0].Значение);

	Если SMSC_DEBUG1 Тогда

        Если Рез >= 0 тогда
            Сообщить("Сумма на счете: " +  Рез + " руб.");
        Иначе
            Сообщить("Ошибка № " +  Строка(-Число(Ответ[1].Значение)));
		КонецЕсли;	

	КонецЕсли;
        
	Возврат Рез;
	
КонецФункции // ПолучитьБаланс()    

&НаСервере
Процедура ОбновитьБаланс()
	
	Рез = ПолучитьБаланс(); 
    Если Рез >= 0 тогда
		ТекущийБаланс = Строка(Рез) + " руб.";
	Иначе
		ТекущийБаланс = "Ошибка!";
	КонецЕсли;	
	
КонецПроцедуры //ОбновитьБаланс()

//***************************************************************************************
// Функция чтения адреса 
//
               

//***************************************************************************************
// Функция вызова запроса. Формирует URL и делает 3 попытки чтения.
//

&НаСервере
Функция _SMSC_ПрочитатьАдрес(Сервер, РесурсНаСервере, _Параметры) Экспорт
	
	Перем Рез;	 
	
	ЕСТЬ_ПРОКСИ = Ложь;
	
	Прокси = Неопределено;
	Если ЕСТЬ_ПРОКСИ Тогда
        Прокси = Новый ИнтернетПрокси;
        Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
        Прокси.Пользователь = ПРОКСИ_ЛОГИН; 
        Прокси.Пароль = ПРОКСИ_ПАРОЛЬ; 
		Прокси.Установить("http" + ?(SMSC_HTTPS1=1, "s", ""), ПРОКСИ_АДРЕС, ПРОКСИ_ПОРТ);
	КонецЕсли;
	
	Попытка
        Соединение = Новый HTTPСоединение(Сервер, , , , Прокси, ?(SMSC_HTTPS1=1, Истина, Ложь));
	Исключение
	    Сообщить("Не удалось установить соединение с сервером:" 
	        + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	    Возврат "";
	КонецПопытки;

	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	РесурсПараметры = РесурсНаСервере+"?"+_Параметры;
	Если СтрДлина(РесурсПараметры) < 2000 Тогда // GET 
		
		Попытка
			Соединение.Получить(РесурсПараметры, ИмяФайлаРезультата);
		    Соединение = Неопределено;
		Исключение 
			Сообщить("Не удалось получить данные с сервера", СтатусСообщения.Важное);
			Возврат "";
		КонецПопытки;
			
	Иначе // POST	
		
		//Создаём файл отправки - содержимое POST-запроса. 
		ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
		ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI, Символы.ПС, ЛОЖЬ);
		ФайлОтправки.ЗаписатьСтроку(_Параметры); 
		ФайлОтправки.Закрыть(); 

		//Формируем заголовок POST-запроса.
	    ЗаголовокHTTP = Новый Соответствие();
	    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	    ФайлОтправки = Новый Файл(ИмяФайлаОтправки); 
	    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер()); 
		ЗаголовокHTTP.Вставить("Content-Length", Строка(РазмерФайлаОтправки)); 

		Попытка
	 		Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки, РесурсНаСервере, ИмяФайлаРезультата, ЗаголовокHTTP);
			Соединение = Неопределено;
		Исключение 
			Сообщить("Не удалось получить данные с сервера:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат "";
		КонецПопытки;
		
	КонецЕсли;	
		
	ФайлРезультата = Новый ЧтениеТекста(ИмяФайлаРезультата);
	Рез = ФайлРезультата.ПрочитатьСтроку();
	
	Возврат Рез;
	
КонецФункции //_SMSC_ПрочитатьАдрес()

&НаСервере
Функция _SMSC_ПослатьКоманду(Команда, Аргументы = "") 

	Сервер = "smsc.ru";
	Ресурс = "/sys/" + Команда + ".php";
    _Параметры = "login=" + СокрЛП(URLEncode(SMSC_LOGIN1)) + "&psw=" + СокрЛП(URLEncode(SMSC_PASSWORD1)) + "&fmt=1&charset=utf-16" + 
		?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");
	
	Для Сч = 1 По 3 Цикл
    	
		Если Сч > 1 Тогда
    	    Для Сч2 = 1 По 2000 Цикл
				у = Сч2; // Небольшой таймаут
			КонецЦикла;
		КонецЕсли;
			
		Если Сч = 3 Тогда
			Сервер = "www2.smsc.ru";
		КонецЕсли;	
		
		Рез = _SMSC_ПрочитатьАдрес(Сервер, Ресурс, _Параметры);
		
		Если НЕ ПустаяСтрока(Рез) Тогда
		    Прервать;
		КонецЕсли;
		
	КонецЦикла;   
	
	Если ПустаяСтрока (Рез)  Тогда

		Если SMSC_DEBUG = 1 Тогда
	        Сообщить("Ошибка чтения адреса: "+ Сервер + Ресурс + "?" + _Параметры);
		КонецЕсли;                                                    
		
		Рез = "," // Фиктивный ответ
		
	КонецЕсли;                       
	
	Возврат Строка2Список(Рез);
	
КонецФункции // _SMSC_ПослатьКоманду()

&НаСервере
Функция ПолучитьСтатус(ИД, Телефон) 
     
	Ответ = _SMSC_ПослатьКоманду("status", "phone=" + URLEncode(Телефон) + "&id=" + XMLСтрока(ИД));

    // (status, time, err) или (0, -error)

    Если SMSC_DEBUG = 1 Тогда

		Рез1 = Число(Ответ[0].Значение);
		Рез2 = Число(Ответ[1].Значение);
		
		Если (Рез2 >= 0) Тогда
        	Сообщить ("Статус SMS = " + Рез1 +  ?(Рез2 > 0, ", время изменения статуса - " + Ответ[1].Значение, ""));
        Иначе
            Сообщить ("Ошибка № " + Строка(-Рез2));
		КонецЕсли;	
		
    КонецЕсли;

    Возврат Ответ;
	
КонецФункции // ПолучитьСтатус()

&НаКлиенте
Процедура КнопкаБаланс(Команда)
	Рез = ПолучитьБаланс(); 
	
    Если Рез >= 0 тогда
		
		Статус("Сумма на счете: " + Рез + " руб.");  
		ТекущийБаланс = Строка(Рез) + " руб.";
		
	Иначе

		Статус("Ошибка получения баланса!", 1);
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура Статус(Сообщение, флОшибка = 0)
	
	Элементы.СтатусСтрока.Заголовок = "";
	Если флОшибка = 1 Тогда
		Элементы.СтатусСтрока.ЦветТекста = Новый Цвет(255, 0, 0);
	Иначе
		Элементы.СтатусСтрока.ЦветТекста = Новый Цвет(0, 128, 0);
	КонецЕсли;
	Элементы.СтатусСтрока.Заголовок = Сообщение;

КонецПроцедуры // Статус()

&НаКлиенте
Процедура КнопкаСтатус(Команда)
	Если ПоследнееИД = 0 Тогда
	
		Статус("Нет отправленных сообщений!", 1);
		Возврат;                        
		
	КонецЕсли;
        
	Ответ = ПолучитьСтатус(ПоследнееИД, ПоследнийНомер);
	Рез1 = Число(Ответ[0].Значение);
	Рез2 = Число(Ответ[1].Значение);
	
	Если Рез2 >= 0 Тогда
		Статус(ПоследнийНомер + ": " + СписокСтатусов(Рез1));
	Иначе	
		Статус("Ошибка получения статуса последнего сообщения!", 1);
	КонецЕсли;
	
	Возврат;
КонецПроцедуры

&НаСервере
функция Запрос_по_контрагентам(МассивКлиентов,ВыбСправочник,ВыбФИО,ИсточникКИ,РесурсКИ,СвязатьПоПолюКИ,ТипКИ,УсловиеТипаКИ,ВыбТелефон) // Возвращает таблицу значений "Ссылка,Номер"
	
	_тб=новый ТаблицаЗначений;
	_тб.Колонки.Добавить("Номер",новый ОписаниеТипов("Строка"));
	_тб.Колонки.Добавить("ФИО",новый ОписаниеТипов("Строка"));
	
	если ИсточникКИ="Табличная часть справочника" тогда  
		тз="
		| ВЫБРАТЬ Ссылка,"+ВыбТелефон+" КАК Тлф, Ссылка."+ВыбФИО+" КАК ФИО
		| ИЗ Справочник."+ВыбСправочник+"."+РесурсКИ+" КАК ТК
		| ГДЕ (Ссылка В ИЕРАРХИИ(&масс_кл)) 
		|";
		
		//сообщить(тз);
		
		запрос=новый Запрос(тз);
		запрос.УстановитьПараметр("масс_кл",МассивКлиентов);
		
		рез=запрос.Выполнить();
		
		выборка=рез.Выбрать();
		пока выборка.Следующий() цикл
			_с=_тб.Добавить();
			_с.ФИО=выборка.ФИО;
			_с.Номер=выборка.Тлф;
		конеццикла;
		
	иначеесли ИсточникКИ="Регистр сведений" тогда
		
		тз="
		| ВЫБРАТЬ "+СвязатьПоПолюКИ+" КАК Поле1,"+ТипКИ+" КАК Поле2,"+ВыбТелефон+" КАК Тлф
		| ИЗ РегистрСведений."+РесурсКИ+" КАК ТК
		| ГДЕ ("+СвязатьПоПолюКИ+" В ИЕРАРХИИ(&масс_кл))
		//И("+ТипКИ+"=&УсловиеТипаКИ)
		|";
		
		//сообщить(тз);
		
		запрос=новый Запрос(тз);
		запрос.УстановитьПараметр("масс_кл",МассивКлиентов);
		запрос.УстановитьПараметр("УсловиеТипаКИ",УсловиеТипаКИ);
		
		рез=запрос.Выполнить();
		
		выборка=рез.Выбрать();
		пока выборка.Следующий() цикл
			
			если нрег(сокрлп(строка(выборка.Поле2)))=нрег(УсловиеТипаКИ) тогда
				_с=_тб.Добавить();
				_с.ФИО=строка(выборка.Поле1[ВыбФИО]);
				_с.Номер=выборка.Тлф;
			конецесли;
		конеццикла;
				
	иначеесли ИсточникКИ="Реквизит справочника" тогда
		
		тз="
		| ВЫБРАТЬ Ссылка,"+ВыбТелефон+" КАК Тлф, Ссылка."+ВыбФИО+" КАК ФИО
		| ИЗ Справочник."+ВыбСправочник+" КАК ТК
		| ГДЕ (Ссылка В ИЕРАРХИИ(&масс_кл)) 
		|";
		
		//сообщить(тз);
		
		запрос=новый Запрос(тз);
		запрос.УстановитьПараметр("масс_кл",МассивКлиентов);
		
		рез=запрос.Выполнить();
		
		выборка=рез.Выбрать();
		пока выборка.Следующий() цикл
			_с=_тб.Добавить();
			_с.ФИО=выборка.ФИО;
			_с.Номер=выборка.Тлф;
		конеццикла;
		
	конецесли;
	
	возврат(_тб);
	
конецфункции

&НаСервере
Процедура ОбработатьОтправкуSMS(флПолучитьСтоимость = Ложь)
	                                
	Если флПолучитьСтоимость Тогда
		Статус("Запрашиваем стоимость SMS...");
	Иначе	
		Статус("Отправляем SMS...");
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(SMSC_LOGIN1)) Тогда
		Статус("Введите логин", 1);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(SMSC_PASSWORD1)) Тогда
		Статус("Введите пароль", 1);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Сообщение) Тогда
		Статус("Введите текст SMS", 1);
		Возврат;
	КонецЕсли;
	
	ИспФИО = Ложь;
	Если ОтправлятьТолькоДоп=Ложь Тогда

		Если ПустаяСтрока(ВыбСправочник) Тогда
			Статус("Выберите справочник", 1);
			Возврат;
		КонецЕсли;     
		
		Если ПустаяСтрока(ВыбТелефон) Тогда
			Статус("Выберите поле справочника с номером телефона", 1);
			Возврат;
		КонецЕсли;     
		
		Если (Найти(Сообщение, "%f%") > 0) или (Найти(Сообщение, "%i%") > 0) или (Найти(Сообщение, "%o%") > 0) тогда

			Если ПустаяСтрока(ВыбФИО) тогда
				Статус("Выберите поле справочника с ФИО отправителя", 1);
				Возврат;
			КонецЕсли;
			ИспФИО = Истина;

		КонецЕсли;
		
	КонецЕсли;       
	
	масс_кл=новый Массив;
	для каждого стр_кл из СписокКлиентов цикл
		масс_кл.Добавить(стр_кл.клиент.ссылка);
	конеццикла;

	//тз_результат_запроса=новый ТаблицаЗначений;
	//тз_результат_запроса.Колонки.Добавить("Номер",новый ОписаниеТипов("Строка"));
	//тз_результат_запроса.Колонки.Добавить("ФИО",новый ОписаниеТипов("Строка"));
	
	тз_результат_запроса=Запрос_по_контрагентам(масс_кл,ВыбСправочник,ВыбФИО,ИсточникКИ,РесурсКИ,СвязатьПоПолюКИ,ТипКИ,УсловиеТипаКИ,ВыбТелефон);
	
	//возврат;
	
	НомераТелефонов = "";
	Пер = 1;
	ДатаОтправкиСтрока = "";
	ВыборкаБыла = 0;
	Если (флДатаОтправки = 1) и Не флПолучитьСтоимость тогда
		
		Если ДатаОтправки = Неопределено тогда
			флДатаОтправки = 0;
		Иначе	                                  

			Мин_н = Прав("0" + Минута(ДатаОтправки), 2); 
			Час_н = Прав("0" + Час(ДатаОтправки), 2); 
			День_н = Прав("0" + День(ДатаОтправки), 2); 
			Мес_н = Прав("0" + Месяц(ДатаОтправки), 2); 
			Год_н = Год(ДатаОтправки);
			Год_н = СтрЗаменить(Год_н, " ", "");
			Год_н = Прав(СтрЗаменить(Год_н, Символ(160), ""), 2);
			ДатаОтправкиСтрока = День_н + "." + Мес_н + "." + Год_н + " " + Час_н + ":" + Мин_н;

		КонецЕсли;

	КонецЕсли;	

	СтрокаСообщений = "";   
	Если (ОтправлятьТолькоДоп=Ложь) и (СписокКлиентов.Количество() > 0) тогда

		//Результат = Запрос.Выполнить();
		//Выборка = Результат.Выбрать();

		
		//Пока Выборка.Следующий() Цикл
		для каждого _стр из тз_результат_запроса цикл
			
			Если ПустаяСтрока(_стр.Номер) Тогда 
				Продолжить; 
			Конецесли;

			ВремСообщение = Сообщение;
			НомерТелефона = СокрЛП(_стр.Номер);
			Пар="";

			Если ИспФИО Тогда

				ФИО = СокрЛП(_стр.ФИО);//Ссылка[ВыбФИО]);
				ФИО = СтрЗаменить(ФИО, Символ(13)," ");
				ФИО = СтрЗаменить(ФИО, Символ(10)," ");
				ФИО = СокрЛП(ФИО);     

				Если СтрЧислоВхождений(ФИО, " ") < 2 Тогда
				    // Считаем, что отчества нет, удаляем макрос
					ВремСообщение = СтрЗаменить(ВремСообщение, "%o%", "");
				ИначеЕсли СтрЧислоВхождений(ФИО, " ") < 1 Тогда
				    // Считаем, что имени нет, удаляем макрос
					ВремСообщение = СтрЗаменить(ВремСообщение, "%i%", "");
				КонецЕсли;

				Поз = Найти(ФИО," ");
				Для Сч = 1 по 3 цикл

					Если Сч = 1 тогда 
						ВремСообщение = СтрЗаменить(ВремСообщение, "%f%", Лев(ФИО, Поз)); 
					ИначеЕсли Сч = 2 Тогда
						ВремСообщение = СтрЗаменить(ВремСообщение, "%i%", ?(Поз = 0, ФИО, Лев(ФИО, Поз)));
					Иначе
						ВремСообщение = СтрЗаменить(ВремСообщение, "%o%", ФИО);
					Конецесли;
					ФИО = Прав(ФИО, СтрДлина(ФИО) - Поз);
					Поз = Найти(ФИО, " ");
						
				КонецЦикла;     
					
				ВремСообщение = СтрЗаменить(ВремСообщение, Символы.ПС, "\n");
                СтрокаСообщений = СтрокаСообщений + ?(ПустаяСтрока(СтрокаСообщений), "", Символы.ПС) + НомерТелефона + ":" + ВремСообщение;
				
			Иначе	

				ДобавитьТелефон(НомерТелефона, НомераТелефонов);
				
			КонецЕсли;			

			Если флПолучитьСтоимость = Ложь Тогда
				ПоследнийНомер = НомерТелефона;
			КонецЕсли;

			ВыборкаБыла = 1;

		КонецЦикла;

	КонецЕсли; 
	
	флОтправки = 0; 
	СтоимостьSMS = 0;
	КоличествоSMS = 0;
	Если НЕ ПустаяСтрока(ДопНомера) тогда

		ВремДопНомера = СокрЛП(ДопНомера);
		ВремДопНомера = СтрЗаменить(ВремДопНомера, Символ(10), " ");
		ВремДопНомера = СокрЛП(ВремДопНомера);
		Поз = Найти(ВремДопНомера, " ");
		Пока Поз > 0 Цикл                  

			ДобавитьТелефон(СокрЛП(Лев(ВремДопНомера, Поз)), НомераТелефонов);
			ВремДопНомера = Прав(ВремДопНомера, СтрДлина(ВремДопНомера) - Поз);
			Поз = Найти(ВремДопНомера," ");

		КонецЦикла;

		Если ВремДопНомера<>"" тогда 
 
			ДобавитьТелефон(ВремДопНомера, НомераТелефонов);
            ВыборкаБыла = 1;
			
		КонецЕсли;

	КонецЕсли;

    Если НЕ ПустаяСтрока(НомераТелефонов) Тогда
        
		ВремСообщение = СтрЗаменить(Сообщение, Символ(10), "\n");
		ВремСообщение = СтрЗаменить(ВремСообщение, "%f%", "");
		ВремСообщение = СтрЗаменить(ВремСообщение, "%i%", "");
		ВремСообщение = СтрЗаменить(ВремСообщение, "%o%", ""); 
		
		СтрокаСообщений = СтрокаСообщений + ?(ПустаяСтрока(СтрокаСообщений), "", Символы.ПС) + НомераТелефонов + ":" + ВремСообщение ;
	    
    КонецЕсли;

	Если НЕ флПолучитьСтоимость и НЕ ПустаяСтрока(СтрокаСообщений) Тогда

		Ответ = ПослатьSMS("", "", Транслит, ДатаОтправкиСтрока, 0, флФлэш, SMSC_Отправитель, "tz=" + SMSC_ЧасовойПояс + "&valid=" + СрокЖизниSMS + "&list=" + URLEncode(СтрокаСообщений));
		Если Число(Ответ[1].Значение) > 0 Тогда
		    ТекущийБаланс = СокрЛП(Ответ[3].Значение) + " руб.";
		КонецЕсли;

	ИначеЕсли флПолучитьСтоимость и НЕ ПустаяСтрока(СтрокаСообщений) Тогда

		Ответ = ПолучитьСтоимость("", "", Транслит, SMSC_Отправитель, "&list=" + URLEncode(СтрокаСообщений));

	КонецЕсли;

	Если ВыборкаБыла = 0 Тогда

		Статус("Не выбрано ни одного номера для отправки!", 1);
		Возврат;
		
	Иначе	

		флОтправки = Число(Ответ[1].Значение); 
		флОтправкиДоп = флОтправки;
		
		Если (флОтправки > 0) и НЕ флПолучитьСтоимость Тогда
			СтоимостьSMS = Число(Ответ[2].Значение);
			КоличествоSMS = Число(Ответ[1].Значение);
		    ПоследнееИД = Число(Ответ[0].Значение); 
			ПоследнийНомер = ?(ПустаяСтрока(ВремДопНомера), ПоследнийНомер, ВремДопНомера);
		ИначеЕсли (флОтправки > 0) и флПолучитьСтоимость Тогда
			СтоимостьSMS = Число(Ответ[0].Значение);
			КоличествоSMS = Число(Ответ[1].Значение);
		КонецЕсли;
	
	КонецЕсли;
	       
	Если НЕ флПолучитьСтоимость Тогда
	    
		Если флОтправки < 0 Тогда                                      
			Статус("Ошибка отправки сообщений: " + СписокОшибок(флОтправки).Представление, 1);
		Иначе
			Статус("Сообщение отправлено. Количество SMS: " + КоличествоSMS + "; Стоимость SMS: " + СтоимостьSMS + " руб.");
			
			ОбновитьЗапись_ПараметрыРегламентныхЗаданий("РассылкаОбУехавшихЗаказах");
			
		КонецЕсли;	
		
	Иначе
		
		Если флОтправки < 0 Тогда                                      
			Статус("Ошибка получения стоимости сообщений: " + СписокОшибок(флОтправки).Представление, 1);
		Иначе                           
			Статус("Количество SMS: " + КоличествоSMS + "; Стоимость SMS: " + СтоимостьSMS + " руб.");
			
			ОбновитьЗапись_ПараметрыРегламентныхЗаданий("РассылкаОбУехавшихЗаказах");
			
		КонецЕсли;	

	КонецЕсли;

КонецПроцедуры // ОбработатьОтправкуSMS()

&НаСервере
Функция ПолучитьСтоимость(Телефоны, Сообщение, Транслит = Ложь, Отправитель = "", ДопПараметры = "")

    Ответ = _SMSC_ПослатьКоманду("send", "cost=1&phones=" + URLEncode(Телефоны) + "&mes=" + URLEncode(Сообщение) + 
					?(ПустаяСтрока(Отправитель), "", "&sender=" + URLEncode(Отправитель)) + 
					"&translit=" + ?(Транслит,1,0) + ?(ПустаяСтрока(ДопПараметры), "", "&" + ДопПараметры));

    // (cost, cnt) или (0, -error)

    Если SMSC_DEBUG = 1 Тогда
		
		Рез1 = Число(Ответ[0].Значение);
		Рез2 = Число(Ответ[1].Значение);
        Если (Рез2 > 0) Тогда
            Сообщить ("Стоимость рассылки: " + Рез1 + " руб. Всего SMS: " + Рез2);
        Иначе
            Сообщить ("Ошибка № " + Строка(-Рез2));
		КонецЕсли;	

	КонецЕсли;

    Возврат Ответ;
	
КонецФункции


&НаСервере
Функция ПослатьSMS(Телефоны, Сообщение, Транслит = Ложь, Время = "", ИД = 0, ФорматСообщения = 0, Отправитель = "", ДопПараметры = "")
              
    Ответ = _SMSC_ПослатьКоманду ("send", "cost=3&phones=" + URLEncode(Телефоны) + "&mes=" + URLEncode(Сообщение) + 
                    "&translit=" + ?(Транслит,1,0) + "&id=" + XMLСтрока(ИД) + ?(ФорматСообщения > 0, "&" + ФорматыСообщений(ФорматСообщения), "") +
					?(ПустаяСтрока(Отправитель), "", "&sender=" + URLEncode(Отправитель)) + 
                    ?(ПустаяСтрока(Время), "", "&time=" + URLEncode(Время)) +
					?(ПустаяСтрока(ДопПараметры), "", "&" + ДопПараметры));

    // (id, cnt, cost, balance) или (id, -error)

    Если SMSC_DEBUG = 1 Тогда

		РезИД = Число(Ответ[0].Значение);
		Рез = Число(Ответ[1].Значение);
		Если (Рез > 0) Тогда
            Сообщить ("Сообщение отправлено успешно. ID: " + РезИД + ", всего SMS: " + Ответ[1].Значение + 
					", стоимость: " + Ответ[2].Значение + " руб., баланс: " + Ответ[3].Значение + " руб.");
        Иначе       
            Сообщить ("Ошибка № " + Строка(-Рез) + ?(РезИД > 0, ", ID: " + РезИД, ""));
		КонецЕсли;	

	КонецЕсли;

    Возврат Ответ;
	
КонецФункции // ПослатьSMS()

&НаСервере
Процедура ДобавитьТелефон(НомерТелефона, НомераТелефонов)
	          
	НомераТелефонов = НомераТелефонов + ?(ПустаяСтрока(НомераТелефонов), "", ",") + СтрЗаменить(СтрЗаменить(НомерТелефона, ":", ","), ";", ",");
	
КонецПроцедуры // ДобавитьТелефон() 

&НаКлиенте
Процедура КнопкаСтоимость(Команда)
	ОбработатьОтправкуSMS(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтправить(Команда)
	ОбработатьОтправкуSMS();
КонецПроцедуры


Процедура ОбновитьЗапись_ПараметрыРегламентныхЗаданий(Ключ)

	Если Ключ = "" Тогда
		Возврат;	
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Запись.Отбор.Ключ.Установить(Ключ);
	Запись.Прочитать();
	Если Запись.Количество() = 0 Тогда
		НоваяЗапись = Запись.Добавить();
	Иначе
		НоваяЗапись = Запись[0];
	КонецЕсли;
	НоваяЗапись.Ключ = Ключ;
	НоваяЗапись.Значение = ДатаВСтроку(ТекДата);
	Попытка
		Запись.Записать();
	Исключение
		#Если Клиент Тогда
			Сообщить("Проблема с обновлением даты ПараметрыРегламентныхЗаданий");
		#КонецЕсли
	КонецПопытки;

КонецПроцедуры


Функция ДатаВСтроку(Д)
	Возврат Формат(Год(Д), "ЧГ=") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + ЛидирующийНоль(Час(Д)) + ЛидирующийНоль(Минута(Д)) + ЛидирующийНоль(Секунда(Д));
КонецФункции

Функция ЛидирующийНоль(зн)
	Если Зн < 10 Тогда
		Возврат "0"+Зн;
	Иначе
		Возврат Зн;
	КонецЕсли;	
КонецФункции