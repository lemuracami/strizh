
// Маска доступных файлов, выбираемых в диалоге
//
Перем МаскаФайла Экспорт; // <Строка>

// Задача импорта данных
//
Перем Задание Экспорт; // <СправочникСсылка.новаЗадачаИмпортаДанных>

#Если Клиент Тогда

// Выполняет настройку фильтра импорта по образцу из файла
//
Процедура НастроитьПоОбразцу() Экспорт
	ОбразецФайлаЗагрузки = Задание.Образец;
	Если СокрЛП(ОбразецФайлаЗагрузки) = "" Тогда
		новаОбщиеПроцедуры.ВыбратьФайл(ОбразецФайлаЗагрузки, "Укажите образец", МаскаФайла);
		Если СокрЛП(ОбразецФайлаЗагрузки) = "" Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			Оповестить("ВыбранОбразецФайлаИмпорта", Новый Структура("Задание, Образец", Задание, ОбразецФайлаЗагрузки));
		КонецЕсли;
	КонецЕсли;
	
	тзНастройкаФильтра = Новый ТаблицаЗначений;
	тзНастройкаФильтра.Колонки.Добавить("Ид");
	тзНастройкаФильтра.Колонки.Добавить("Представление");
			
	дбфОбразец = Новый XBase;
	дбфОбразец.ОткрытьФайл(ОбразецФайлаЗагрузки,, Истина);
	Для Каждого Поле Из дбфОбразец.Поля Цикл
		стрНастройкаФильтра = тзНастройкаФильтра.Добавить();
		стрНастройкаФильтра.Ид = Поле.Имя;
		стрНастройкаФильтра.Представление = Поле.Имя;
	КонецЦикла;
	
	Оповестить("СохраненаНастройкаФильтраИмпорта", Новый Структура("Задание, НастройкаФильтра", Задание, тзНастройкаФильтра));
КонецПроцедуры
#КонецЕсли

// Получает данные для фильтра импорта из файла
//
// Параметры:
//  ИмяФайла       <Строка>
//  тзСоставДанных <ТаблицаЗначений>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьДанные(ИмяФайла, тзСоставДанных) Экспорт
	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("ИдСтроки");
	Для Каждого стрСоставДанных Из тзСоставДанных Цикл
		тзДанные.Колонки.Добавить(стрСоставДанных.Ид,, стрСоставДанных.Представление);
	КонецЦикла;
	
    дбфДанные = Новый XBase;
	дбфДанные.ОткрытьФайл(ИмяФайла,, Истина);
	дбфДанные.Первая();
	ъ = дбфДанные.КоличествоЗаписей();
	Если ъ > 0 Тогда
		Пока Истина Цикл
	#Если Клиент Тогда
			Состояние("Чтение " + ИмяФайла + " " + Строка(ъ));
	#КонецЕсли
			ъ = ъ - 1;
			
			стрДанные = тзДанные.Добавить();
			стрДанные.ИдСтроки = дбфДанные.НомерЗаписи();
			Для Каждого стрСоставДанных Из тзСоставДанных Цикл
				стрДанные[стрСоставДанных.Ид] = СокрЛП(дбфДанные[стрСоставДанных.Ид]);
			КонецЦикла;
			
			Если Не дбфДанные.Следующая() Тогда Прервать; КонецЕсли;
		КонецЦикла;	
	КонецЕсли; 
	
	Возврат тзДанные;
КонецФункции

МаскаФайла = "Файлы DBF|*.dbf";

