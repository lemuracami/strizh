
Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ПробитыеЧеки 
	Движения.ПробитыеЧеки.Записывать = Истина;
	Движения.ПробитыеЧеки.Очистить();
	
	//Движения.ОтклоненияКоличестваУКассиров.Записывать = Истина;
	//Движения.ОтклоненияКоличестваУКассиров.Очистить();
	
	Движения.УчетДенежныхСредствКассиром.Записывать = Истина;
	Движения.УчетДенежныхСредствКассиром.Очистить();
	
    Движения.ЖурналККМ.Записывать = Истина;
	Движения.ЖурналККМ.Очистить();
	
	Для Каждого ТекСтрокаЧеки Из Чеки Цикл
		Если Не ТекСтрокаЧеки.Чек.ЧекПробитНаККМ Тогда
			Продолжить;
		КонецеСли;	
		
		Если Не ТекСтрокаЧеки.ЧекПробитОшибочно Тогда
			Движение = Движения.ПробитыеЧеки.Добавить();
			Движение.Период = ТекСтрокаЧеки.Чек.Дата;
			Движение.Отдел = ТекСтрокаЧеки.Отдел;
			Движение.Доставка = ТекСтрокаЧеки.Доставка;
			Движение.Номенклатура = ТекСтрокаЧеки.Номенклатура;
			Движение.Чек = ТекСтрокаЧеки.Чек;
			Движение.СуммаЧека = ТекСтрокаЧеки.Чек.СуммаДокумента;
		КонецЕсли;
		
		
		Движение = Движения.ЖурналККМ.Добавить();
		Движение.Период = ТекСтрокаЧеки.Чек.Дата;
		Движение.КассаККМ = ТекСтрокаЧеки.Чек.КассаККМ;
		Движение.ВидОперации = ТекСтрокаЧеки.Чек.ВидОперации;
		Движение.Отдел = ТекСтрокаЧеки.Отдел.Ссылка;
		Движение.Секция = ТекСтрокаЧеки.Чек.Секция;
		Движение.ЧекККМ = ТекСтрокаЧеки.Чек;
		Движение.ЧекПробитОшибочно = ТекСтрокаЧеки.ЧекПробитОшибочно;
		Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;
		Движение.ТипОплаты = ТекСтрокаЧеки.Чек.ТипОплаты;
		Движение.Кассир = ТекСтрокаЧеки.Чек.Ответственный;
	КонецЦикла;

	
	//Для Каждого Тек Из Товары Цикл
	//	Если Тек.НовоеКоличество <> Тек.Количество Тогда
	//		Най = Неопределено;
	//		Най = Доставки.Найти(Тек.Доставка);
	//		Если Най <> Неопределено Тогда
	//			Нов = Движения.ОтклоненияКоличестваУКассиров.Добавить();
	//			Нов.Заказ = Тек.Доставка;
	//			Нов.Кассир = Ответственный;
	//			Нов.Количество = Тек.НовоеКоличество - Тек.Количество;
	//			Нов.Сумма = Тек.СуммаНовая - Тек.Сумма;
	//			Нов.ККМ = Най.ККМ;
	//			Нов.ИнтернетМагазин = Най.Контрагент;
	//			Нов.Номенклатура = Тек.Номенклатура;
	//			Нов.Период = Дата;
	//		Иначе	
	//			Продолжить;
	//		КонецеСли;	
	//	КонецеСли;	
	//КонецЦикла;
	
	
	Для Каждого ТекСтрокаЧеки Из Чеки Цикл
		Если Не ТекСтрокаЧеки.Чек.ЧекПробитНаККМ Тогда
			Продолжить;
		КонецеСли;	
		
		Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(ТекСтрокаЧеки.Доставка.номер);
		
		Если Не Дост.Пустая() Тогда
			Если Не Дост.ДоставкаИзмененаНаСамовывоз Тогда
				Продолжить;
			КонецеСли;
		КонецеСли;	
		
		Если Не ТекСтрокаЧеки.ЧекПробитОшибочно Тогда
			НайД = Доставки.Найти(ТекСтрокаЧеки.Доставка);
			
            Если НайД <> Неопределено Тогда
                ПеремТипЗаказа = smv.ПолучитьТипЗаказаNew(ТекСтрокаЧеки.Доставка);
				Движение = Движения.УчетДенежныхСредствКассиром.Добавить();
				Движение.Период = ТекСтрокаЧеки.Чек.Дата;
				Движение.ЮрЛицо = НайД.ЮрЛицо;
				Движение.Заказ = ТекСтрокаЧеки.Доставка;
				Движение.ТипЗаказа = ПеремТипЗаказа;
				Движение.ИнтернетМагазин = НайД.Контрагент;
				Движение.ТипОплаты = НайД.ТипОплаты;
				Движение.Спецсчет = НайД.Спецсчет;
                
                Если ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда //Доставка
                    Движение.Сумма = 0;
                    Движение.СуммаДоставки = ТекСтрокаЧеки.Чек.СуммаДокумента;
                Иначе
                    Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;
                    Движение.СуммаДоставки = 0;
                КонецЕсли;
                //-----Серегин М.В. 09.10.2015 14:10:22 
            КонецеСли;
        КонецЕсли;
        
        //-----Серегин М.В. 16.10.2015 15:00:56
	КонецЦикла;
    
    ДвиженияУчетДенежныхСредствКассиромРасширеный();
	
	//CeHbKA
	ДвиженияВзиморасчетыСКомитентами(Отказ);
	
КонецПроцедуры

Процедура ДвиженияУчетДенежныхСредствКассиромРасширеный()
    Движения.УчетДенежныхСредствКассиромРасширеный.Записывать = Истина;
    Движения.УчетДенежныхСредствКассиромРасширеный.Очистить();
    
    //ввел переменную для формирования верных движений по учету количества дотавлено/не доставлено
    //По хорошему нужно переделать движения по человечески, сейчас и долго и с костылем.
    //В том числе и по старому регистру.
    ПеременнаяДоставка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
    
    Для Каждого ТекСтрокаЧеки Из Чеки Цикл
		Если Не ТекСтрокаЧеки.Чек.ЧекПробитНаККМ Тогда
		    Продолжить;
		КонецеСли;	
        
        Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(ТекСтрокаЧеки.Доставка.номер);
		
		//lem, 26.11.2017, убираем этот блок кода, в кассовый отчет не попадают заказы, которые переделаны с доставкина самовывоз
		Если Не Дост.Пустая() Тогда
		    Если Не Дост.ДоставкаИзмененаНаСамовывоз Тогда
		        Продолжить;
		    КонецеСли;
		КонецеСли;	
		//end lem, 26.11.2017, убираем этот блок кода, в кассовый отчет не попадают заказы, которые переделаны с доставкина самовывоз
        
        Если Не ТекСтрокаЧеки.ЧекПробитОшибочно Тогда
            НайД = Доставки.Найти(ТекСтрокаЧеки.Доставка);
            
            Если НайД <> Неопределено Тогда
                ТО = НайД.ТипОплаты;
                //Если ТО = Справочники.ТипыОплат.Терминал
                //    ИЛИ ТО = Справочники.ТипыОплат.Наличные 
                //    ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
                ТипЗаказа = smv.ПолучитьТипЗаказаNew(ТекСтрокаЧеки.Доставка);
                Движение = Движения.УчетДенежныхСредствКассиромРасширеный.ДобавитьПриход();
                Движение.Период = ТекСтрокаЧеки.Чек.Дата;
                Движение.ЮрЛицо = НайД.ЮрЛицо;
                Движение.Заказ = ТекСтрокаЧеки.Доставка;
                Движение.ТипЗаказа = ТипЗаказа;
                Движение.ИнтернетМагазин = НайД.Контрагент;
				//CeHbKA #22.07.2019
				Если ЗначениеЗаполнено(НайД.Контрагент) Тогда
					Если Не НайД.Контрагент.Родитель.ОсновнойМагазин.Пустая() Тогда
						Движение.ИнтернетМагазин = НайД.Контрагент.Родитель.ОсновнойМагазин;
					Иначе
						Движение.ИнтернетМагазин = НайД.Контрагент;
					КонецеСли;
				КонецЕсли;
				//CeHbKA #22.07.2019				
				
                Движение.ТипОплаты = НайД.ТипОплаты;
                Движение.Спецсчет = НайД.Спецсчет;
				
				
				// МАС - 05.06.2017 - №982 --->> 
				Движение.ТерминалДоставки = ЭтотОбъект.ТерминалДоставки;
				// <<--- МАС 
                
                //Получим сумму документа возврата
                //СуммаВозврата = 0;
                //Если ТипЗаказа = Перечисления.ТипыЗаказов.Возврат Тогда
                //    СуммаВозврата = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(ТекСтрокаЧеки.Доставка.Номер,ТекСтрокаЧеки.Доставка.Дата).СуммаДокумента;
                //КонецЕсли;
                СуммаВозврата = НайД.СуммаВозврата;
                
                ////+++++Серегин М.В. 19.10.2015 15:17:03 до
                ////Движения по суммам
                //Если ТО = Справочники.ТипыОплат.Наличные ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
                //    Если ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда //Доставка
                //        Движение.СуммаДоставки = ТекСтрокаЧеки.Чек.СуммаДокумента;
                //    Иначе
                //        Движение.СуммаНаличные = ТекСтрокаЧеки.Чек.СуммаДокумента;
                //        Движение.СуммаВозврата = СуммаВозврата;
                //    КонецЕсли;
                //    
                //ИначеЕсли ТО = Справочники.ТипыОплат.Терминал Тогда
                //    
                //    Если ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда //Доставка
                //        Движение.СуммаДоставки = ТекСтрокаЧеки.Чек.СуммаДокумента;
                //    Иначе
                //        Движение.СуммаБезНаличные = ТекСтрокаЧеки.Чек.СуммаДокумента+СуммаВозврата;
                //    КонецЕсли;
                //КонецЕсли;
                //+++++Серегин М.В. 19.10.2015 15:17:11 после
                
                
                //Движение по состоянию заказа
                //Получим текущее состояние заказа 
                СостояниеЗаказа = smv.ПолучитьСостояниеЗаказаНаДату(ТекСтрокаЧеки.Доставка, КонецДня(Дата));
                Если СостояниеЗаказа.Количество()>0 Тогда
                    РезультатДоставки =  СостояниеЗаказа[0].РезультатДоставки;
                    ПричинаНеВыполнения = СостояниеЗаказа[0].ПричинаНеВыполнения;
                    ПричинаОтказа = СостояниеЗаказа[0].ПричинаОтказа;
                    Движение.РезультатДоставки = РезультатДоставки;
                    Движение.ПричинаНеВыполнения = ПричинаНеВыполнения;
                    Движение.ПричинаОтказаПереноса = ПричинаОтказа;
                КонецЕсли;
                
                Если ТО = Справочники.ТипыОплат.Наличные ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
                    Если ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда //Доставка
                        Движение.СуммаДоставки = ТекСтрокаЧеки.Чек.СуммаДокумента;
                        Движение.СуммаНаличные = ТекСтрокаЧеки.Чек.СуммаДокумента;
						//Движение.ЗачтенныйАванс = 
                    Иначе
                        //+++++Серегин М.В. 23.11.2015 14:14:08 
                    
                        //Дабы не было неверных движений по суммам, т.к. движения идут увы не по заказу а по чекам
                        // нужен этот костыль
						Если ПеременнаяДоставка<> ТекСтрокаЧеки.Доставка Тогда
							Если ТекСтрокаЧеки.Чек.ТипКассовогоЧека <> Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
                            	Движение.СуммаНаличные = ТекСтрокаЧеки.Чек.СуммаДокумента;// по новой логике не нужно+СуммаВозврата; //+++++Серегин М.В. 16.12.2015 16:38:53 
							КонецеСли;	
                            Движение.СуммаВозвратаНаличные = -СуммаВозврата;
                        Иначе
							Если ТекСтрокаЧеки.Чек.ТипКассовогоЧека <> Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
                            	Движение.СуммаНаличные = ТекСтрокаЧеки.Чек.СуммаДокумента;
							КонецеСли;	
                            Движение.СуммаВозвратаНаличные = 0;
                        КонецЕсли;
                        //-----Серегин М.В. 23.11.2015 14:14:11 
                        
                        //Если РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена 
                        //    ИЛИ РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                        //    Движение.Выполнено          = 1;
                        //Иначе
                        //    Если ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
                        //        ИЛИ ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь
                        //        ИЛИ ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
                        //        Движение.Перенос        = 1;
                        //    КонецЕсли;
                        //    Движение.НеВыполнено        = 1;
                        //КонецЕсли;
                    КонецЕсли;
                    
                ИначеЕсли ТО = Справочники.ТипыОплат.Терминал Тогда
                    
                    Если ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда //Доставка
                        Движение.СуммаДоставки = ТекСтрокаЧеки.Чек.СуммаДокумента;
                        Движение.СуммаБезНаличные = ТекСтрокаЧеки.Чек.СуммаДокумента;
                    Иначе
                        //+++++Серегин М.В. 23.11.2015 14:15:32 
                        //Дабы не было неверных движений по суммам, т.к. движения идут увы не по заказу а по чекам
                        // нужен этот костыль
						Если ПеременнаяДоставка<> ТекСтрокаЧеки.Доставка Тогда
							Если ТекСтрокаЧеки.Чек.ТипКассовогоЧека <> Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
                            	Движение.СуммаБезНаличные = ТекСтрокаЧеки.Чек.СуммаДокумента;// по новой логике не нужно+СуммаВозврата;+СуммаВозврата;//+++++Серегин М.В. 16.12.2015 16:38:56 
							КонецеСли;	
                            Движение.СуммаВозвратаБезНаличные = -СуммаВозврата;
						Иначе
							Если ТекСтрокаЧеки.Чек.ТипКассовогоЧека <> Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
                            	Движение.СуммаБезНаличные = ТекСтрокаЧеки.Чек.СуммаДокумента;
							КонецеСли;	
                            Движение.СуммаВозвратаБезНаличные = 0;
                        КонецЕсли;
                        //-----Серегин М.В. 23.11.2015 14:15:51 
                    
                        //Если РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена 
                        //    ИЛИ РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                        //    Движение.Выполнено          = 1;
                        //Иначе
                        //    Если ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
                        //        ИЛИ ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь
                        //        ИЛИ ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
                        //        Движение.Перенос        = 1;
                        //    КонецЕсли;
                        //    Движение.НеВыполнено        = 1;
                        //КонецЕсли;
                    КонецЕсли;
                КонецЕсли;
                
                Если НЕ ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда
                    
                    //Дабы не было неверных движений по количеству доставлен/недоставлено, т.к. движения идут увы не по заказу а по чекам
                    // нужен этот костыль
                    Если ПеременнаяДоставка<> ТекСтрокаЧеки.Доставка Тогда
                        КоличествоДоставлено_НеДоставлено = 1;
                    Иначе
                        КоличествоДоставлено_НеДоставлено = 0;
                    КонецЕсли;
                    ПеременнаяДоставка = ТекСтрокаЧеки.Доставка;
                    //Конец костыля
                    
                    Если РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена 
                        ИЛИ РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                        Движение.Выполнено          = КоличествоДоставлено_НеДоставлено;
                    Иначе
                        Если ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
                            ИЛИ ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь
                            ИЛИ ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
                            Движение.Перенос        = КоличествоДоставлено_НеДоставлено;
                        КонецЕсли;
                        Движение.НеВыполнено        = КоличествоДоставлено_НеДоставлено;
                    КонецЕсли;
                КонецЕсли;
                //-----Серегин М.В. 19.10.2015 15:17:13 
                    
                    
                //КонецЕсли;
				
				//Если ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда
				//	
				//Иначе	
					
				//КонецЕсли;	
				
				
				Если НайД.ТипОплаты = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
					Движение.СуммаНаличные = 0;
					Движение.СуммаБезНаличные = 0;
					Движение.СуммаВозвратаНаличные = 0;
					Движение.СуммаВозвратаБезНаличные = 0;
					Движение.СуммаДоставки = 0;
					Движение.ЗачтенныйАванс = ТекСтрокаЧеки.Чек.СуммаДокумента;
				КонецЕСли;	
            КонецеСли;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

Процедура ДвиженияВзиморасчетыСКомитентами(Отказ) Экспорт
	
    Движения.ВзаиморасчетыСКомитентамиПоЗаказам.Записывать = Истина;
    Движения.ВзаиморасчетыСКомитентамиПоЗаказам.Очистить();
	
	//Задача № 2540
	ТаблицаДвиженийВзаиморасчетовСКомитентами = РегистрыНакопления.ВзаиморасчетыСКомитентами.ТаблицаДвиженийПоРегистру();
	//Задача № 2540
	
	ТЗ = Движения.УчетДенежныхСредствКассиромРасширеный.Выгрузить();
	ТЗ.Колонки.ЮрЛицо.Имя = "Организация";
	ТЗ.Колонки.ИнтернетМагазин.Имя = "Комитент";
	ТЗ.Колонки.Добавить("ДатаВозникновенияЗадолженности");
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("Период"),"ДатаВозникновенияЗадолженности");
	ТЗ.Колонки.Добавить("Сумма");
	
	Для каждого СтрокаТЗ Из ТЗ Цикл
		
		Если СтрокаТЗ.СуммаНаличные <> 0 Тогда
			СтрокаТЗ.Сумма = СтрокаТЗ.СуммаНаличные;
		КонецЕсли; 
		Если СтрокаТЗ.СуммаБезНаличные <> 0 Тогда
			СтрокаТЗ.Сумма = СтрокаТЗ.СуммаБезНаличные;
		КонецЕсли; 
		Если СтрокаТЗ.СуммаВозвратаНаличные <> 0 Тогда
			СтрокаТЗ.Сумма = СтрокаТЗ.СуммаВозвратаНаличные;
		КонецЕсли; 
		Если СтрокаТЗ.СуммаВозвратаБезНаличные <> 0 Тогда
			СтрокаТЗ.Сумма = СтрокаТЗ.СуммаВозвратаБезНаличные;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Организация) Тогда
			//Переварюха В.В. Задача № 3483 20.09.2019 11:07:00
			ОсновнойДоговор = СтрокаТЗ.Заказ.ВладелецТовара.ОсновнойДоговорКонтрагента;
			ОсновнойМагазин = СтрокаТЗ.Заказ.ВладелецТовара.Родитель.ОсновнойМагазин;
			
			Если ЗначениеЗаполнено(ОсновнойДоговор) 
				И НЕ ОсновнойДоговор.ПометкаУдаления Тогда
				
				СтрокаТЗ.Организация = ОсновнойДоговор.Организация;
				
			ИначеЕсли ЗначениеЗаполнено(ОсновнойМагазин) Тогда
				
				Если ЗначениеЗаполнено(ОсновнойМагазин.ОсновнойДоговорКонтрагента) 
					И НЕ ОсновнойМагазин.ОсновнойДоговорКонтрагента.ПометкаУдаления Тогда
					
					СтрокаТЗ.Организация = ОсновнойМагазин.ОсновнойДоговорКонтрагента.Организация;
					
				КонецЕсли;
				
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Отсутствует основной договор у подчиненного "+СтрокаТЗ.Заказ.ВладелецТовара+" и головного магазинов ";
				Сообщение.Сообщить();
				
				Отказ = Истина;
			КонецЕсли;
			//Переварюха В.В. Задача № 3483 20.09.2019 11:07:00
		КонецЕсли; 
		
		//Задача № 2540
		ЗаполнитьЗначенияСвойств(ТаблицаДвиженийВзаиморасчетовСКомитентами.Добавить(),  СтрокаТЗ);
		//Задача № 2540
		
	КонецЦикла; 
	
	Движения.ВзаиморасчетыСКомитентамиПоЗаказам.Загрузить(ТЗ);
	
	//Задача № 2540
	Движения.ВзаиморасчетыСКомитентами.СоздатьДвижения(ЭтотОбъект, ТаблицаДвиженийВзаиморасчетовСКомитентами);
	//Задача № 2540
	
КонецПроцедуры

Процедура ДвиженияВзиморасчетыСКомитентами_Старая() Экспорт

    Движения.ВзаиморасчетыСКомитентамиПоЗаказам.Записывать = Истина;
    Движения.ВзаиморасчетыСКомитентамиПоЗаказам.Очистить();
		
    //ввел переменную для формирования верных движений по учету количества дотавлено/не доставлено
    //По хорошему нужно переделать движения по человечески, сейчас и долго и с костылем.
    //В том числе и по старому регистру.
    ПеременнаяДоставка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	//Задача № 2540
	ТаблицаДвиженийВзаиморасчетовСКомитентами = РегистрыНакопления.ВзаиморасчетыСКомитентами.ТаблицаДвиженийПоРегистру();
	//Задача № 2540
	
    Для Каждого ТекСтрокаЧеки Из Чеки Цикл
        Если Не ТекСтрокаЧеки.Чек.ЧекПробитНаККМ Тогда
            Продолжить;
        КонецеСли;	
        
        Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(ТекСтрокаЧеки.Доставка.номер);
		
		//lem, 26.11.2017, убираем этот блок кода, в кассовый отчет не попадают заказы, которые переделаны с доставкина самовывоз
		Если Не Дост.Пустая() Тогда
		    Если Не Дост.ДоставкаИзмененаНаСамовывоз Тогда
		        Продолжить;
		    КонецеСли;
		КонецеСли;	
		//end lem, 26.11.2017, убираем этот блок кода, в кассовый отчет не попадают заказы, которые переделаны с доставкина самовывоз
        
        Если Не ТекСтрокаЧеки.ЧекПробитОшибочно Тогда
            НайД = Доставки.Найти(ТекСтрокаЧеки.Доставка);
            
            Если НайД <> Неопределено Тогда
                ТО = НайД.ТипОплаты;
                //Если ТО = Справочники.ТипыОплат.Терминал
                //    ИЛИ ТО = Справочники.ТипыОплат.Наличные 
                //    ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
                ТипЗаказа = smv.ПолучитьТипЗаказаNew(ТекСтрокаЧеки.Доставка);
                Движение = Движения.ВзаиморасчетыСКомитентамиПоЗаказам.ДобавитьПриход();
                Движение.Период = ТекСтрокаЧеки.Чек.Дата;
                Движение.Организация = НайД.ЮрЛицо;
                Движение.Комитент = НайД.Контрагент;
				Движение.ДатаВозникновенияЗадолженности = ТекСтрокаЧеки.Чек.Дата;
                Движение.ТипЗаказа = ТипЗаказа;
                Движение.Заказ = ТекСтрокаЧеки.Доставка;
				
				Если НЕ ЗначениеЗаполнено(Движение.Организация) Тогда
					Движение.Организация = ТекСтрокаЧеки.Доставка.ВладелецТовара.ОсновнойДоговорКонтрагента.Организация;
				КонецЕсли; 
				                
                //Получим сумму документа возврата
                //СуммаВозврата = 0;
                //Если ТипЗаказа = Перечисления.ТипыЗаказов.Возврат Тогда
                //    СуммаВозврата = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(ТекСтрокаЧеки.Доставка.Номер,ТекСтрокаЧеки.Доставка.Дата).СуммаДокумента;
                //КонецЕсли;
                СуммаВозврата = НайД.СуммаВозврата;                
                
                //Движение по состоянию заказа
                //Получим текущее состояние заказа 
                СостояниеЗаказа = smv.ПолучитьСостояниеЗаказаНаДату(ТекСтрокаЧеки.Доставка, КонецДня(Дата));
                Если СостояниеЗаказа.Количество()>0 Тогда
                    РезультатДоставки =  СостояниеЗаказа[0].РезультатДоставки;
                    ПричинаНеВыполнения = СостояниеЗаказа[0].ПричинаНеВыполнения;
                    ПричинаОтказа = СостояниеЗаказа[0].ПричинаОтказа;
					//Движение.РезультатДоставки = РезультатДоставки;
					//Движение.ПричинаНеВыполнения = ПричинаНеВыполнения;
					//Движение.ПричинаОтказаПереноса = ПричинаОтказа;
                КонецЕсли;
                
                Если ТО = Справочники.ТипыОплат.Наличные ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
                    Если ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда //Доставка
						//Движение.СуммаДоставки = ТекСтрокаЧеки.Чек.СуммаДокумента;
                        Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;
                    Иначе
                        //+++++Серегин М.В. 23.11.2015 14:14:08 
                    
                        //Дабы не было неверных движений по суммам, т.к. движения идут увы не по заказу а по чекам
                        // нужен этот костыль
						Если ПеременнаяДоставка<> ТекСтрокаЧеки.Доставка Тогда
							Если ТекСтрокаЧеки.Чек.ТипКассовогоЧека <> Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
                            	Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;// по новой логике не нужно+СуммаВозврата; //+++++Серегин М.В. 16.12.2015 16:38:53 
							КонецеСли;	
							//CeHbKA
							//вот эта строчка была закоменчена из-за кода внизу
							//Движение.СуммаВозвратаНаличные = -СуммаВозврата;
							Движение.Сумма = -СуммаВозврата;
                        Иначе
							Если ТекСтрокаЧеки.Чек.ТипКассовогоЧека <> Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
                            	Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;
							КонецеСли;	
							//Движение.СуммаВозвратаНаличные = 0;
                        КонецЕсли;
                        //-----Серегин М.В. 23.11.2015 14:14:11 
                        
                    КонецЕсли;
                    
                ИначеЕсли ТО = Справочники.ТипыОплат.Терминал Тогда
                    
                    Если ТекСтрокаЧеки.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1") Тогда //Доставка
						//Движение.СуммаДоставки = ТекСтрокаЧеки.Чек.СуммаДокумента;
                        Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;
                    Иначе
                        //+++++Серегин М.В. 23.11.2015 14:15:32 
                        //Дабы не было неверных движений по суммам, т.к. движения идут увы не по заказу а по чекам
                        // нужен этот костыль
						Если ПеременнаяДоставка<> ТекСтрокаЧеки.Доставка Тогда
							Если ТекСтрокаЧеки.Чек.ТипКассовогоЧека <> Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
                            	Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;// по новой логике не нужно+СуммаВозврата;+СуммаВозврата;//+++++Серегин М.В. 16.12.2015 16:38:56 
							Иначе
								Движение.Сумма = -СуммаВозврата;
							КонецеСли;	
							//Движение.СуммаВозвратаБезНаличные = -СуммаВозврата;
						Иначе
							Если ТекСтрокаЧеки.Чек.ТипКассовогоЧека <> Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
                            	Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;
							КонецеСли;	
							//Движение.СуммаВозвратаБезНаличные = 0;
                        КонецЕсли;
                        //-----Серегин М.В. 23.11.2015 14:15:51 
                    
                    КонецЕсли;
                КонецЕсли;                    
				
				
				//CeHbKA
				//Если Движение.ТипЗаказа = Перечисления.ТипыЗаказов.Возврат Тогда
				//	Движение.Сумма = ?(Движение.Сумма = 0, -СуммаВозврата, Движение.Сумма);
				//КонецЕсли; 
				
                //КонецЕсли;
				
				//Задача № 2540
				ЗаполнитьЗначенияСвойств(ТаблицаДвиженийВзаиморасчетовСКомитентами.Добавить(),  Движение);
				//Задача № 2540

            КонецеСли;
        КонецЕсли;
    КонецЦикла;
	
	//Задача № 2540
	Движения.ВзаиморасчетыСКомитентами.СоздатьДвижения(ЭтотОбъект, ТаблицаДвиженийВзаиморасчетовСКомитентами);
	//Задача № 2540

КонецПроцедуры
 
Процедура ПроверкаВозможностиЗаписи(Отказ)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
                |   ОтчетОРозничныхПродажахФормированияЧеков.Ссылка.Ссылка КАК Док
                |ИЗ
                |   Документ.ОтчетОРозничныхПродажах.ФормированияЧеков КАК ОтчетОРозничныхПродажахФормированияЧеков
                |ГДЕ
                |   ОтчетОРозничныхПродажахФормированияЧеков.Ссылка.Проведен = ИСТИНА
                |   И ОтчетОРозничныхПродажахФормированияЧеков.ФормированиеЧеков.Ссылка = &Док";
	Зап.УстановитьПараметр("Док", ЭтотОбъект.Ссылка);
	
	Отказ = Не Зап.Выполнить().Пустой();			
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	ПроверкаВозможностиЗаписи(Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецеСли;	
		
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка
	            |ИЗ
	            |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	            |ГДЕ
	            |	ПечатьЧековПоДоставкамЧеки.Чек.ЧекПробитНаККМ = ложь
	            |	И ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка = &ВыбДок";
				
	зап.УстановитьПараметр("ВыбДок", ЭтотОбъект.Ссылка);
	
	Рез = Зап.Выполнить();
	ВсеЧекиПробиты = Рез.Пустой();
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка КАК Док,
	            |	СУММА(ЧекККМТовары.Сумма) КАК СуммаЧеков,
	            |	СУММА(ВЫБОР
	            |			КОГДА ПечатьЧековПоДоставкамЧеки.Чек.ЧекПробитНаККМ
	            |				ТОГДА ЧекККМТовары.Сумма
	            |			ИНАЧЕ 0
	            |		КОНЕЦ) КАК СуммаПробитыхЧеков,
	            |	СУММА(ВЫБОР
	            |			КОГДА ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно
	            |				ТОГДА ЧекККМТовары.Сумма
	            |			ИНАЧЕ 0
	            |		КОНЕЦ) КАК СуммаОшибочныхЧеков
	            |ИЗ
	            |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
	            |		ПО ПечатьЧековПоДоставкамЧеки.Чек.Ссылка = ЧекККМТовары.Ссылка.Ссылка
	            |ГДЕ
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка = &Док
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка";
	Зап.УстановитьПараметр("Док", Ссылка);
	Рез = Зап.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Рез);
	КонецЕСли;	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Чеки.Очистить();
	Товары.Очистить();
	Доставки.Очистить();
	Рейс = БизнесПроцессы.новаРейсМестнойДоставки.ПустаяСсылка();
КонецПроцедуры
