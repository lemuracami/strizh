
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()
&НаКлиенте
// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	//ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	//												Серия, Качество, Единица,
	//												Количество, ВалютаДокумента,
	//												Неопределено, мУказаниеСкладовВТЧ,
	//												ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	//Если      ИмяТекСтраницы = "Товары" Тогда
	//	ОбработкаПодбора(Товары, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
	//	ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
	//	ОбработкаПодбора(Услуги, СтруктураПодбора);
	//Иначе
	//	Предупреждение("На странице """
	//				   + ИмяТекСтраницы
	//				   + """ подбор номенклатуры не предусмотрен.");
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	//ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	//												Неопределено, Неопределено,
	//												Неопределено, 1,
	//												ВалютаДокумента, Номер,
	//												мУказаниеСкладовВТЧ,
	//												ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	//Если      ИмяТекСтраницы = "Товары" Тогда
	//	ОбработкаПодбора(Товары, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
	//	ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
	//	ОбработкаПодбора(Услуги, СтруктураПодбора);
	//Иначе
	//	Предупреждение("На странице """
	//				   + ИмяТекСтраницы
	//				   + """ подбор номенклатуры не предусмотрен.");
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	//Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
	//	Возврат Результат;
	//КонецЕсли;

	//ДисконтнаяКарта = Карта;
	//ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()
&НаКлиенте
// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()
&НаКлиенте
Функция СШКРейс(ВыбР) Экспорт
	Если ЗначениеЗаполнено(ВыбР) Тогда
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПечатьЧековПоДоставкам.Ссылка Как Док
		            |ИЗ
		            |	Документ.ПечатьЧековПоДоставкам КАК ПечатьЧековПоДоставкам
		            |ГДЕ
		            |	ПечатьЧековПоДоставкам.Рейс = &Рейс";
		Зап.УстановитьПараметр("Рейс", ВыбР);			
		Рез = Зап.Выполнить().Выгрузить();
		Если Не Рез.Количество() = 0 Тогда
			Док = Рез[0].Док;
			Ф = Док.ПолучитьФорму("ФормаДокумента");
			Ф.Открыть();
			Сообщить("Документ уже создан!");
		Иначе	
			//+++ БАО 19.06.2017 №1126
			//Ф = ОткрытьФорму("Документ.ПечатьЧековПоДоставкам.ФормаОбъекта");			
			//Ф.Объект.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
			//Ф.Объект.Дата = ТекущаяДата();
			//Ф.Объект.Рейс = ВыбР;			
			//Ф.ЗаполнитьДоставкиИТовары(Неопределено);

			Если ВернутьПечататьЧекНаСервереККМТранспорта(ВыбР) Тогда 
				ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтветПечататьЧекНаСервереККМ", ЭтотОбъект, ВыбР), "По данному транспорту установлен режим печати чеков в мобильном приложении. Вы уверены, что хотите распечатать чеки сейчас?", РежимДиалогаВопрос.ДаНет);	
			Иначе 
				Доработать_СШКРейс(ВыбР);
			КонецЕсли;	
				
			//--- БАО 19.06.2017 №1126
		КонецеСли;	
	Иначе
		Возврат Ложь;
	КонецеСли;	
	Возврат Истина;
КонецФункции	

//+++ БАО 19.06.2017 №1126
&НаКлиенте
Процедура Доработать_СШКРейс(Рейс)
	
	Ф = ОткрытьФорму("Документ.ПечатьЧековПоДоставкам.ФормаОбъекта");			
	Ф.Объект.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
	Ф.Объект.Дата = ТекущаяДата();
	Ф.Объект.Рейс = Рейс;			
	Ф.ЗаполнитьДоставкиИТовары(Неопределено);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ВернутьПечататьЧекНаСервереККМТранспорта(Рейс)
	
	//+++ БАО 09.08.2017 №
	//---Возврат Рейс.Транспорт.ПечататьЧекНаСервереККМ;
	Струк = Новый Структура;
	Струк.Вставить("Транспорт", Рейс.Транспорт);
		
	ДополнительныеПараметрыТранспорта = РегистрыСведений.ДополнительныеПараметрыТранспорта.ПолучитьПоследнее(КонецДня(ТекущаяДата()), Струк);
	ПечататьЧекНаСервереККМ = ?(ДополнительныеПараметрыТранспорта.РежимПечатиЧеков = Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ, Истина, Ложь);
	Возврат ПечататьЧекНаСервереККМ;
	
	//--- БАО 09.08.2017 №

	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветПечататьЧекНаСервереККМ(РезультатВопроса, ПараметрыОповещения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда	
		
		Доработать_СШКРейс(ПараметрыОповещения);
		
	КонецЕсли;

КонецПроцедуры
//--- БАО 19.06.2017 №1126


&НаКлиенте
Функция СШКЗаказы(Стр) Экспорт
	Если ЗначениеЗаполнено(Стр) Тогда
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	ПечатьЧековПоДоставкамДоставки.Ссылка.Ссылка Как Док
		|ИЗ
		|	Документ.ПечатьЧековПоДоставкам.Доставки КАК ПечатьЧековПоДоставкамДоставки
		|ГДЕ
		|	ПечатьЧековПоДоставкамДоставки.Доставка.Ссылка = &ВыбДост";
		Зап.УстановитьПараметр("ВыбДост", Стр.Реализация.Ссылка);
		
		рез = Зап.Выполнить().Выгрузить();
		
		Если Не Рез.Количество() = 0 Тогда
			Док = Рез[0].Док;
			Ф = Док.ПолучитьФорму("ФормаДокумента");
			Ф.Открыть();
			Сообщить("Документ уже создан!");
		Иначе	
			Ф = ОткрытьФорму("Документ.ПечатьЧековПоДоставкам.ФормаОбъекта");
			Ф.Объект.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
			Ф.Объект.Дата = ТекущаяДата();
			Ф.ДобавитьСтрокуСамовывоза(Стр.Реализация);
			
			
		КонецеСли;	
	Иначе
		Возврат Ложь;
	КонецеСли;	
	Возврат истина;
КонецФункции	
&НаКлиенте
// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

&НаКлиенте
Процедура ПоискПоНомеруЗаказа(Команда)
	Если ЗначениеЗаполнено(НомерЗаказа) Тогда
		Зап = Новый Запрос; 
		Зап.Текст = "ВЫБРАТЬ
		|	ПечатьЧековПоДоставкамДоставки.Ссылка.Номер
		|ИЗ
		|	Документ.ПечатьЧековПоДоставкам.Доставки КАК ПечатьЧековПоДоставкамДоставки
		|ГДЕ
		|	ПечатьЧековПоДоставкамДоставки.Доставка.Номер = &Номер
		|
		|СГРУППИРОВАТЬ ПО
		|	ПечатьЧековПоДоставкамДоставки.Ссылка.Номер";
		Зап.УстановитьПараметр("Номер", Формат(НомерЗаказа, "ЧГ="));
		
		Рез = Зап.Выполнить().Выбрать();
		
		Мас = Новый Массив;
		Если Рез.Количество() = 0 Тогда
			ОчиститьПоиск(Команда);
		Иначе
			Пока Рез.Следующий() Цикл
				Мас.Добавить(Рез.Номер);
			КонецЦикла;	
			//Список.Отбор.элементы[0].ПравоеЗначение = Мас;
			//Список.Отбор.элементы[0].Использование = Истина;
			
		ИП = "Номер";
		ПЗ = Мас;
		Исп = Истина;
		ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(Список.Отбор,
								ИП,
								ПЗ,
								,
								,
								Исп,
								,
								);
			
		КонецеСли;	
		
	Иначе
		ОчиститьПоиск(Команда);
	КонецЕСлИ;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	// Вставить содержимое обработчика.
	//Список.Отбор.элементы[0].Использование = Ложь;
		ИП = "Номер";
		ПЗ = Новый Массив;
		Исп = Ложь;
		ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(Список.Отбор,
								ИП,
								ПЗ,
								,
								,
								Исп,
								,
								);
	
	НомерЧека = "";
	НомерЗаказа = "";
	ТранспортПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНомеруЧека(Команда)
	Если ЗначениеЗаполнено(НомерЧека) Тогда
		
		Зап = Новый Запрос; 
		Зап.Текст = "ВЫБРАТЬ
		|	ПечатьЧековПоДоставкамЧеки.Ссылка.Номер
		|ИЗ
		|	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
		|ГДЕ
		|	ПечатьЧековПоДоставкамЧеки.Чек.НомерЧекаККМ = &Номер
		|
		|СГРУППИРОВАТЬ ПО
		|	ПечатьЧековПоДоставкамЧеки.Ссылка.Номер";
		Зап.УстановитьПараметр("Номер", НомерЧека);
		
		Рез = Зап.Выполнить().Выбрать();
		Мас = Новый Массив;
		Если Рез.Количество() = 0 Тогда
			ОчиститьПоиск(Команда);
		Иначе
			Пока Рез.Следующий() Цикл
				Мас.Добавить(Рез.Номер);
			КонецЦикла;	
		ИП = "Номер";
		ПЗ = Мас;
		Исп = Истина;
		ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(Список.Отбор,
								ИП,
								ПЗ,
								,
								,
								Исп,
								,
								);
		КонецеСли;	
	Иначе
		ОчиститьПоиск(Команда);
	КонецЕСли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоТранспорту(Команда)
	Если ЗначениеЗаполнено(ТранспортПоиска) Тогда
		
		Зап = Новый Запрос; 
		Зап.Текст = "ВЫБРАТЬ
		            |	ПечатьЧековПоДоставкам.Ссылка.Номер КАК Номер
		            |ИЗ
		            |	Документ.ПечатьЧековПоДоставкам КАК ПечатьЧековПоДоставкам
		            |ГДЕ
		            |	ПечатьЧековПоДоставкам.Рейс.Транспорт = &Транспорт
		            |
		            |СГРУППИРОВАТЬ ПО
		            |	ПечатьЧековПоДоставкам.Ссылка.Номер";
		Зап.УстановитьПараметр("Транспорт", ТранспортПоиска);
		
		Рез = Зап.Выполнить().Выбрать();
		Мас = Новый Массив;
		Если Рез.Количество() = 0 Тогда
			ОчиститьПоиск(Команда);
		Иначе
			Пока Рез.Следующий() Цикл
				Мас.Добавить(Рез.Номер);
			КонецЦикла;	
		ИП = "Номер";
		ПЗ = Мас;
		Исп = Истина;
		ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(Список.Отбор,
								ИП,
								ПЗ,
								,
								,
								Исп,
								,
								);
		КонецеСли;	
	Иначе
		ОчиститьПоиск(Команда);
	КонецЕСли;
КонецПроцедуры

&НаКлиенте
Процедура СписокРейсов(Команда)
    ОткрытьФорму("Отчет.СписокРейсовСоШтрихкодами.Форма.ФормаОтчета");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиПользователей.Пользователь КАК Пользователь,
	                      |	НастройкиПользователей.Настройка КАК Настройка,
	                      |	НастройкиПользователей.Значение КАК Значение
	                      |ИЗ
	                      |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                      |ГДЕ
	                      |	НастройкиПользователей.Пользователь = &Пользователь
	                      |	И НастройкиПользователей.Настройка = &Настройка");
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ТерминалДоставки);
	Рез = Запрос.Выполнить().Выбрать();
	
	ТерминалСпис = Новый Массив;
	
	Если Рез.Следующий() Тогда		
		Если Рез.Значение = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ИначеЕсли Рез.Значение = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		Иначе
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		КонецЕсли;	
	Иначе		
		ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());	
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ТерминалДоставки", ТерминалСпис);
	
	
КонецПроцедуры


