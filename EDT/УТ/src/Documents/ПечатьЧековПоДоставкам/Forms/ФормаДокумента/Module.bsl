//Перем Фл;      |$ДопУсловия
	            //|$ДопУсловия
&НаКлиенте
Перем ФормаХодаПечатиЧеков Экспорт;
				
//&НаКлиенте     
Функция ЗаполнитьДокументСервер(Док) Экспорт
    #Область Устарело
    ////Серегин М.В. 26.08.2015 14:41:02 старый запрос 
    //Зап = Новый Запрос;
    //Зап.Текст = "ВЫБРАТЬ
    //            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация,
    //            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Спецсчет,
    //            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент,
    //            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты,
    //            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки
    //            |ПОМЕСТИТЬ ВТЮрлица
    //            |ИЗ
    //            |	РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних(&ДатаЗапроса, ) КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
    //            |ГДЕ
    //            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки = ЗНАЧЕНИЕ(перечисление.типызаказов.доставка)
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |ВЫБРАТЬ
    //            |	ПробитыеЧекиОбороты.Доставка
    //            |ПОМЕСТИТЬ ВТУжеПробитыеЧеки
    //            |ИЗ
    //            |	РегистрНакопления.ПробитыеЧеки.Обороты(&НачПрЧеки, &КонПрЧеки, , ) КАК ПробитыеЧекиОбороты
    //            |
    //            |СГРУППИРОВАТЬ ПО
    //            |	ПробитыеЧекиОбороты.Доставка
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |ВЫБРАТЬ
    //            |	новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
    //            |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
    //            |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
    //            |	новаЗаданияРейсов.Доставка.Оплачен,
    //            |	новаРейсМестнойДоставки.Ссылка КАК Рейс,
    //            |	РеализацияТоваровУслуг.Ссылка КАК Доставка,
    //            |	ТипыОплат.Ссылка КАК ТипОплаты,
    //            |	РеализацияТоваровУслуг.ПредоплатаПоКредиту
    //            |ПОМЕСТИТЬ ВТТранспорт
    //            |ИЗ
    //            |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    //            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    //            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
    //            |			ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
    //            |		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
    //            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
    //            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    //            |			ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
    //            |		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
    //            |ГДЕ
    //            |	новаЗадачаРейсаМестнойДоставки.Роль = &ВыбЭтап
    //            |	И РеализацияТоваровУслуг.ТипОплаты В (1, 2, 5)
    //            |$ДопУсловия
    //            |СГРУППИРОВАТЬ ПО
    //            |	РеализацияТоваровУслуг.Номер,
    //            |	новаЗаданияРейсов.Рейс.Транспорт,
    //            |	новаЗаданияРейсов.Доставка.Оплачен,
    //            |	новаРейсМестнойДоставки.Ссылка,
    //            |	РеализацияТоваровУслуг.ВладелецТовара,
    //            |	РеализацияТоваровУслуг.Ссылка,
    //            |	ТипыОплат.Ссылка,
    //            |	РеализацияТоваровУслуг.ПредоплатаПоКредиту
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |ВЫБРАТЬ
    //            |	СУММА(новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД) КАК СтоимостьДоставки,
    //            |	ВТТранспорт.Контрагент,
    //            |	ВТТранспорт.Доставка,
    //            |	ВТТранспорт.Контрагент.ПечататьЧеки КАК ПечататьЧеки,
    //            |	ВЫБОР
    //            |		КОГДА ВТТранспорт.ПредоплатаПоКредиту = 0
    //            |			ТОГДА ВЫБОР
    //            |					КОГДА ВТТранспорт.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    //            |						ТОГДА &ОснВар
    //            |					ИНАЧЕ ВТТранспорт.Контрагент.ВариантПечатиЧеков
    //            |				КОНЕЦ
    //            |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    //            |	КОНЕЦ КАК ВариантПечатиЧеков,
    //            |	&ТЗ КАК ТипЗаказа,
    //            |	ВТТранспорт.ТипОплаты,
    //            |	ВТТранспорт.Контрагент.ПлательщикНДС КАК НДС,
    //            |	СУММА(ВТТранспорт.ПредоплатаПоКредиту) КАК ПредоплатаПоКредиту
    //            |ПОМЕСТИТЬ ВТЗаказы
    //            |ИЗ
    //            |	ВТТранспорт КАК ВТТранспорт
    //            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
    //            |		ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер
    //            |
    //            |СГРУППИРОВАТЬ ПО
    //            |	ВТТранспорт.Контрагент,
    //            |	ВТТранспорт.Доставка,
    //            |	ВТТранспорт.Контрагент.ПечататьЧеки,
    //            |	ВТТранспорт.ТипОплаты,
    //            |	ВТТранспорт.Контрагент.ПлательщикНДС,
    //            |	ВЫБОР
    //            |		КОГДА ВТТранспорт.ПредоплатаПоКредиту = 0
    //            |			ТОГДА ВЫБОР
    //            |					КОГДА ВТТранспорт.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    //            |						ТОГДА &ОснВар
    //            |					ИНАЧЕ ВТТранспорт.Контрагент.ВариантПечатиЧеков
    //            |				КОНЕЦ
    //            |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    //            |	КОНЕЦ
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |ВЫБРАТЬ
    //            |	ВТЗаказы.СтоимостьДоставки КАК СуммаУслуг,
    //            |	ВТЗаказы.Контрагент,
    //            |	ВТЗаказы.Доставка,
    //            |	ВТЗаказы.ПечататьЧеки,
    //            |	ВТЗаказы.ВариантПечатиЧеков,
    //            |	ВТЗаказы.ТипЗаказа,
    //            |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТоваров,
    //            |	ВТЗаказы.ТипОплаты,
    //            |	ВТЗаказы.НДС,
    //            |	ВТЗаказы.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту
    //            |ПОМЕСТИТЬ ВТСуммыРеализации
    //            |ИЗ
    //            |	ВТЗаказы КАК ВТЗаказы
    //            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    //            |		ПО ВТЗаказы.Доставка.Ссылка = РеализацияТоваровУслугТовары.Ссылка.Ссылка
    //            |ГДЕ
    //            |	НЕ ВТЗаказы.Доставка В
    //            |				(ВЫБРАТЬ
    //            |					ВТУжеПробитыеЧеки.Доставка
    //            |				ИЗ
    //            |					ВТУжеПробитыеЧеки)
    //            |
    //            |СГРУППИРОВАТЬ ПО
    //            |	ВТЗаказы.ТипЗаказа,
    //            |	ВТЗаказы.Контрагент,
    //            |	ВТЗаказы.Доставка,
    //            |	ВТЗаказы.ВариантПечатиЧеков,
    //            |	ВТЗаказы.ПечататьЧеки,
    //            |	ВТЗаказы.СтоимостьДоставки,
    //            |	ВТЗаказы.ТипОплаты,
    //            |	ВТЗаказы.НДС,
    //            |	ВТЗаказы.ПредоплатаПоКредиту
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |ВЫБРАТЬ
    //            |	ВТСуммыРеализации.СуммаУслуг,
    //            |	ВТСуммыРеализации.Контрагент,
    //            |	ВТСуммыРеализации.Доставка,
    //            |	ВТСуммыРеализации.ПечататьЧеки,
    //            |	ВТСуммыРеализации.ВариантПечатиЧеков,
    //            |	ВТСуммыРеализации.ТипЗаказа,
    //            |	ВТСуммыРеализации.СуммаТоваров,
    //            |	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка КАК Возврат,
    //            |	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК СуммаВозврата,
    //            |	ВТСуммыРеализации.ТипОплаты,
    //            |	ВЫБОР
    //            |		КОГДА ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков = 0
    //            |			ТОГДА 10
    //            |		ИНАЧЕ ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков
    //            |	КОНЕЦ КАК КратностьЧеков,
    //            |	ВЫБОР
    //            |		КОГДА ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
    //            |				ИЛИ ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ВКредит)
    //            |			ТОГДА ВТСуммыРеализации.Контрагент.ККМНаличнойОплаты
    //            |		ИНАЧЕ ВТСуммыРеализации.Контрагент.ККМТерминал
    //            |	КОНЕЦ КАК ККМ,
    //            |	ВТСуммыРеализации.НДС,
    //            |	ВТСуммыРеализации.Контрагент.РазрешитьРедактированиеКоличестваВПечатиЧеков КАК РазрешитьРедактированиеКоличества,
    //            |	ВТСуммыРеализации.ПредоплатаПоКредиту,
    //            |	ВТЮрлица.Организация КАК ЮрЛицо,
    //            |	ВТЮрлица.Спецсчет,
    //            |	ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин КАК ОсновнойМагазин
    //            |ИЗ
    //            |	ВТЮрлица КАК ВТЮрлица
    //            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыРеализации КАК ВТСуммыРеализации
    //            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
    //            |			ПО ВТСуммыРеализации.Доставка.Номер = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
    //            |		ПО ВТЮрлица.Контрагент.Ссылка = ВТСуммыРеализации.Контрагент.Ссылка
    //            |			И ВТЮрлица.ТипОплаты.Ссылка = ВТСуммыРеализации.ТипОплаты.Ссылка
    //            |
    //            |СГРУППИРОВАТЬ ПО
    //            |	ВТСуммыРеализации.Контрагент,
    //            |	ВТСуммыРеализации.Доставка,
    //            |	ВТСуммыРеализации.ПечататьЧеки,
    //            |	ВТСуммыРеализации.ВариантПечатиЧеков,
    //            |	ВТСуммыРеализации.ТипЗаказа,
    //            |	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка,
    //            |	ВТСуммыРеализации.СуммаТоваров,
    //            |	ВТСуммыРеализации.СуммаУслуг,
    //            |	ВТСуммыРеализации.ТипОплаты,
    //            |	ВТСуммыРеализации.НДС,
    //            |	ВТСуммыРеализации.Контрагент.РазрешитьРедактированиеКоличестваВПечатиЧеков,
    //            |	ВТСуммыРеализации.ПредоплатаПоКредиту,
    //            |	ВЫБОР
    //            |		КОГДА ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков = 0
    //            |			ТОГДА 10
    //            |		ИНАЧЕ ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков
    //            |	КОНЕЦ,
    //            |	ВЫБОР
    //            |		КОГДА ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
    //            |				ИЛИ ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ВКредит)
    //            |			ТОГДА ВТСуммыРеализации.Контрагент.ККМНаличнойОплаты
    //            |		ИНАЧЕ ВТСуммыРеализации.Контрагент.ККМТерминал
    //            |	КОНЕЦ,
    //            |	ВТЮрлица.Организация,
    //            |	ВТЮрлица.Спецсчет
    //            |
    //            |УПОРЯДОЧИТЬ ПО
    //            |	ВТСуммыРеализации.Контрагент.Приоритет,
    //            |	ВТСуммыРеализации.Доставка.Номер
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |УНИЧТОЖИТЬ ВТТранспорт
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |УНИЧТОЖИТЬ ВТЗаказы
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |УНИЧТОЖИТЬ ВТУжеПробитыеЧеки
    //            |;
    //            |
    //            |////////////////////////////////////////////////////////////////////////////////
    //            |УНИЧТОЖИТЬ ВТСуммыРеализации";
    
    ////+++++Серегин М.В. 09.03.2016 16:48:11 устарело
    //    Зап = Новый Запрос;
    //Зап.Текст = 
    //"ВЫБРАТЬ
    //|   ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация,
    //|   ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Спецсчет,
    //|   ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент,
    //|   ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты,
    //|   ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки
    //|ПОМЕСТИТЬ ВТЮрлица
    //|ИЗ
    //|   РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних(&ДатаЗапроса, ) КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
    //|ГДЕ
    //|   ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки = ЗНАЧЕНИЕ(перечисление.типызаказов.доставка)
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ
    //|   ПробитыеЧекиОбороты.Доставка
    //|ПОМЕСТИТЬ ВТУжеПробитыеЧеки
    //|ИЗ
    //|   РегистрНакопления.ПробитыеЧеки.Обороты(&НачПрЧеки, &КонПрЧеки, , ) КАК ПробитыеЧекиОбороты
    //|
    //|СГРУППИРОВАТЬ ПО
    //|   ПробитыеЧекиОбороты.Доставка
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ
    //|   новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
    //|   РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
    //|   РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
    //|   новаЗаданияРейсов.Доставка.Оплачен,
    //|   новаРейсМестнойДоставки.Ссылка КАК Рейс,
    //|   РеализацияТоваровУслуг.Ссылка КАК Доставка,
    //|   ТипыОплат.Ссылка КАК ТипОплаты,
    //|   РеализацияТоваровУслуг.ПредоплатаПоКредиту,
    //|   РеализацияТоваровУслуг.УчитыватьИтогоКОплате
    //|ПОМЕСТИТЬ ВТТранспорт
    //|ИЗ
    //|   РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    //|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    //|           ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
    //|           ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
    //|       ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
    //|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
    //|           ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    //|           ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
    //|       ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
    //|ГДЕ
    //|   новаЗадачаРейсаМестнойДоставки.Роль = &ВыбЭтап
    //|   И РеализацияТоваровУслуг.ТипОплаты В (1, 2, 5)
    //|$ДопУсловия
    //|СГРУППИРОВАТЬ ПО
    //|   РеализацияТоваровУслуг.Номер,
    //|   новаЗаданияРейсов.Рейс.Транспорт,
    //|   новаЗаданияРейсов.Доставка.Оплачен,
    //|   новаРейсМестнойДоставки.Ссылка,
    //|   РеализацияТоваровУслуг.ВладелецТовара,
    //|   РеализацияТоваровУслуг.Ссылка,
    //|   ТипыОплат.Ссылка,
    //|   РеализацияТоваровУслуг.ПредоплатаПоКредиту,
    //|   РеализацияТоваровУслуг.УчитыватьИтогоКОплате
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ
    //|   СУММА(новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД) КАК СтоимостьДоставки,
    //|   ВТТранспорт.Контрагент,
    //|   ВТТранспорт.Доставка,
    //|   ВТТранспорт.Контрагент.ПечататьЧеки КАК ПечататьЧеки,
    //|   ВЫБОР
    //|       КОГДА ВТТранспорт.УчитыватьИтогоКОплате
    //|           ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    //|       ИНАЧЕ ВЫБОР
    //|               КОГДА ВТТранспорт.ПредоплатаПоКредиту = 0
    //|                   ТОГДА ВЫБОР
    //|                           КОГДА ВТТранспорт.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    //|                               ТОГДА &ОснВар
    //|                           ИНАЧЕ ВТТранспорт.Контрагент.ВариантПечатиЧеков
    //|                       КОНЕЦ
    //|               ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    //|           КОНЕЦ
    //|   КОНЕЦ КАК ВариантПечатиЧеков,
    //|   &ТЗ КАК ТипЗаказа,
    //|   ВТТранспорт.ТипОплаты,
    //|   ВТТранспорт.Контрагент.ПлательщикНДС КАК НДС,
    //|   СУММА(ВТТранспорт.ПредоплатаПоКредиту) КАК ПредоплатаПоКредиту,
    //|   МАКСИМУМ(ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КОплатеКлиентом, 0)) КАК КОплатеКлиентом,
    //|   МАКСИМУМ(ВЫБОР
    //|           КОГДА ВТТранспорт.Контрагент = КонтрагентЯндекс.Значение.Ссылка
    //|               ТОГДА ИСТИНА
    //|           ИНАЧЕ ЛОЖЬ
    //|       КОНЕЦ) КАК ЧекиПоКОплатеКлиентом
    //|ПОМЕСТИТЬ ВТЗаказы
    //|ИЗ
    //|   ВТТранспорт КАК ВТТранспорт
    //|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
    //|           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
    //|           ПО новаМестнаяДоставка.Номер = ДополнительныеПараметрыЗаказа.Заказ.Номер
    //|       ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер,
    //|   Константа.КонтрагентЯндекс КАК КонтрагентЯндекс
    //|
    //|СГРУППИРОВАТЬ ПО
    //|   ВТТранспорт.Контрагент,
    //|   ВТТранспорт.Доставка,
    //|   ВТТранспорт.Контрагент.ПечататьЧеки,
    //|   ВТТранспорт.ТипОплаты,
    //|   ВТТранспорт.Контрагент.ПлательщикНДС,
    //|   ВЫБОР
    //|       КОГДА ВТТранспорт.УчитыватьИтогоКОплате
    //|           ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    //|       ИНАЧЕ ВЫБОР
    //|               КОГДА ВТТранспорт.ПредоплатаПоКредиту = 0
    //|                   ТОГДА ВЫБОР
    //|                           КОГДА ВТТранспорт.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    //|                               ТОГДА &ОснВар
    //|                           ИНАЧЕ ВТТранспорт.Контрагент.ВариантПечатиЧеков
    //|                       КОНЕЦ
    //|               ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    //|           КОНЕЦ
    //|   КОНЕЦ
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ
    //|   ВТЗаказы.СтоимостьДоставки КАК СуммаУслуг,
    //|   ВТЗаказы.Контрагент,
    //|   ВТЗаказы.Доставка,
    //|   ВТЗаказы.ПечататьЧеки,
    //|   ВТЗаказы.ВариантПечатиЧеков,
    //|   ВТЗаказы.ТипЗаказа,
    //|   СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТоваров,
    //|   ВТЗаказы.ТипОплаты,
    //|   ВТЗаказы.НДС,
    //|   ВТЗаказы.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту,
    //|   МАКСИМУМ(ВТЗаказы.КОплатеКлиентом) КАК КОплатеКлиентом,
    //|   МАКСИМУМ(ВТЗаказы.ЧекиПоКОплатеКлиентом) КАК ЧекиПоКОплатеКлиентом
    //|ПОМЕСТИТЬ ВТСуммыРеализации
    //|ИЗ
    //|   ВТЗаказы КАК ВТЗаказы
    //|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    //|       ПО ВТЗаказы.Доставка.Ссылка = РеализацияТоваровУслугТовары.Ссылка.Ссылка
    //|ГДЕ
    //|   НЕ ВТЗаказы.Доставка В
    //|               (ВЫБРАТЬ
    //|                   ВТУжеПробитыеЧеки.Доставка
    //|               ИЗ
    //|                   ВТУжеПробитыеЧеки)
    //|
    //|СГРУППИРОВАТЬ ПО
    //|   ВТЗаказы.ТипЗаказа,
    //|   ВТЗаказы.Контрагент,
    //|   ВТЗаказы.Доставка,
    //|   ВТЗаказы.ВариантПечатиЧеков,
    //|   ВТЗаказы.ПечататьЧеки,
    //|   ВТЗаказы.СтоимостьДоставки,
    //|   ВТЗаказы.ТипОплаты,
    //|   ВТЗаказы.НДС,
    //|   ВТЗаказы.ПредоплатаПоКредиту
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ
    //|   ВТСуммыРеализации.СуммаУслуг,
    //|   ВТСуммыРеализации.Контрагент,
    //|   ВТСуммыРеализации.Доставка,
    //|   ВТСуммыРеализации.ПечататьЧеки,
    //|   ВТСуммыРеализации.ВариантПечатиЧеков,
    //|   ВТСуммыРеализации.ТипЗаказа,
    //|   ВТСуммыРеализации.СуммаТоваров,
    //|   ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка КАК Возврат,
    //|   СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК СуммаВозврата,
    //|   ВТСуммыРеализации.ТипОплаты,
    //|   ВЫБОР
    //|       КОГДА ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков = 0
    //|           ТОГДА 10
    //|       ИНАЧЕ ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков
    //|   КОНЕЦ КАК КратностьЧеков,
    //|   ВЫБОР
    //|       КОГДА ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
    //|               ИЛИ ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ВКредит)
    //|           ТОГДА ВТСуммыРеализации.Контрагент.ККМНаличнойОплаты
    //|       ИНАЧЕ ВТСуммыРеализации.Контрагент.ККМТерминал
    //|   КОНЕЦ КАК ККМ,
    //|   ВТСуммыРеализации.НДС,
    //|   ВТСуммыРеализации.Контрагент.РазрешитьРедактированиеКоличестваВПечатиЧеков КАК РазрешитьРедактированиеКоличества,
    //|   ВТСуммыРеализации.ПредоплатаПоКредиту,
    //|   ВТЮрлица.Организация КАК ЮрЛицо,
    //|   ВТЮрлица.Спецсчет,
    //|   ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин КАК ОсновнойМагазин,
    //|   МАКСИМУМ(ВТСуммыРеализации.КОплатеКлиентом) КАК КОплатеКлиентом,
    //|   МАКСИМУМ(ВТСуммыРеализации.ЧекиПоКОплатеКлиентом) КАК ЧекиПоКОплатеКлиентомСтарая,
    //|   МАКСИМУМ(ВТСуммыРеализации.Доставка.УчитыватьИтогоКОплате) КАК ЧекиПоКОплатеКлиентом
    //|ИЗ
    //|   ВТЮрлица КАК ВТЮрлица
    //|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыРеализации КАК ВТСуммыРеализации
    //|           ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
    //|           ПО ВТСуммыРеализации.Доставка.Номер = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
    //|       ПО ВТЮрлица.Контрагент.Ссылка = ВТСуммыРеализации.Контрагент.Ссылка
    //|           И ВТЮрлица.ТипОплаты.Ссылка = ВТСуммыРеализации.ТипОплаты.Ссылка
    //|
    //|СГРУППИРОВАТЬ ПО
    //|   ВТСуммыРеализации.Контрагент,
    //|   ВТСуммыРеализации.Доставка,
    //|   ВТСуммыРеализации.ПечататьЧеки,
    //|   ВТСуммыРеализации.ВариантПечатиЧеков,
    //|   ВТСуммыРеализации.ТипЗаказа,
    //|   ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка,
    //|   ВТСуммыРеализации.СуммаТоваров,
    //|   ВТСуммыРеализации.СуммаУслуг,
    //|   ВТСуммыРеализации.ТипОплаты,
    //|   ВТСуммыРеализации.НДС,
    //|   ВТСуммыРеализации.Контрагент.РазрешитьРедактированиеКоличестваВПечатиЧеков,
    //|   ВТСуммыРеализации.ПредоплатаПоКредиту,
    //|   ВТЮрлица.Организация,
    //|   ВТЮрлица.Спецсчет,
    //|   ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин,
    //|   ВЫБОР
    //|       КОГДА ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков = 0
    //|           ТОГДА 10
    //|       ИНАЧЕ ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков
    //|   КОНЕЦ,
    //|   ВЫБОР
    //|       КОГДА ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
    //|               ИЛИ ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ВКредит)
    //|           ТОГДА ВТСуммыРеализации.Контрагент.ККМНаличнойОплаты
    //|       ИНАЧЕ ВТСуммыРеализации.Контрагент.ККМТерминал
    //|   КОНЕЦ
    //|
    //|УПОРЯДОЧИТЬ ПО
    //|   ВТСуммыРеализации.Контрагент.Приоритет,
    //|   ВТСуммыРеализации.Доставка.Номер
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|УНИЧТОЖИТЬ ВТТранспорт
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|УНИЧТОЖИТЬ ВТЗаказы
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|УНИЧТОЖИТЬ ВТУжеПробитыеЧеки
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|УНИЧТОЖИТЬ ВТСуммыРеализации";
   
    #КонецОбласти 	
    
    //Серегин М.В. 26.08.2015 14:41:11 Новый запрос 
    Зап = Новый Запрос;
		
	///////////////////////рабоче места, связки ккм
	
	// Якурнов 16.07.2018 16:49:17
	#Область ЗапросКоторыйБылРабочий 
	
   Зап.Текст = 
    "ВЫБРАТЬ
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация КАК Организация,
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Спецсчет КАК Спецсчет,
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент КАК Контрагент,
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты КАК ТипОплаты,
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки КАК ТипДоставки
    |ПОМЕСТИТЬ ВТЮрлица
    |ИЗ
    |	РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних(&ДатаЗапроса, ) КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
    |ГДЕ
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки = ЗНАЧЕНИЕ(перечисление.типызаказов.доставка)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ПробитыеЧекиОбороты.Доставка КАК Доставка
    |ПОМЕСТИТЬ ВТУжеПробитыеЧеки
    |ИЗ
    |	РегистрНакопления.ПробитыеЧеки.Обороты(&НачПрЧеки, &КонПрЧеки, , ) КАК ПробитыеЧекиОбороты
    |
    |СГРУППИРОВАТЬ ПО
    |	ПробитыеЧекиОбороты.Доставка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
    |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
    |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
    |	новаЗаданияРейсов.Доставка.Оплачен КАК ДоставкаОплачен,
    |	новаРейсМестнойДоставки.Ссылка КАК Рейс,
    |	РеализацияТоваровУслуг.Ссылка КАК Доставка,
    |	ТипыОплат.Ссылка КАК ТипОплаты,
    |	РеализацияТоваровУслуг.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту,
    |	РеализацияТоваровУслуг.УчитыватьИтогоКОплате КАК УчитыватьИтогоКОплате,
    |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа, ЛОЖЬ) КАК ВычисляемыйЗапретЧастичногоВыкупа
    |ПОМЕСТИТЬ ВТТранспорт
    |ИЗ
    |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
    |			ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
    |			ПО РеализацияТоваровУслуг.ВладелецТовара = ПараметрыКонтрагентовСрезПоследних.Контрагент
    |		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
    |		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
    |ГДЕ
    |	новаЗадачаРейсаМестнойДоставки.Роль = &ВыбЭтап
    |	И РеализацияТоваровУслуг.ТипОплаты В (1, 2, 5)
    |	И &ДопУсловия
    |
    |СГРУППИРОВАТЬ ПО
    |	РеализацияТоваровУслуг.Номер,
    |	новаЗаданияРейсов.Рейс.Транспорт,
    |	новаЗаданияРейсов.Доставка.Оплачен,
    |	новаРейсМестнойДоставки.Ссылка,
    |	РеализацияТоваровУслуг.ВладелецТовара,
    |	РеализацияТоваровУслуг.Ссылка,
    |	ТипыОплат.Ссылка,
    |	РеализацияТоваровУслуг.ПредоплатаПоКредиту,
    |	РеализацияТоваровУслуг.УчитыватьИтогоКОплате,
    |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа, ЛОЖЬ)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	СУММА(новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД) КАК СтоимостьДоставки,
    |	ВТТранспорт.Контрагент КАК Контрагент,
    |	ВТТранспорт.Доставка КАК Доставка,
    |	ВТТранспорт.Контрагент.ПечататьЧеки КАК ПечататьЧеки,
    |	ВЫБОР
    |		КОГДА ВТТранспорт.УчитыватьИтогоКОплате
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТТранспорт.ПредоплатаПоКредиту = 0
    |					ТОГДА ВЫБОР
    |							КОГДА ВТТранспорт.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |								ТОГДА &ОснВар
    |							ИНАЧЕ ВТТранспорт.Контрагент.ВариантПечатиЧеков
    |						КОНЕЦ
    |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |			КОНЕЦ
    |	КОНЕЦ КАК ВариантПечатиЧеков,
    |	&ТЗ КАК ТипЗаказа,
    |	ВТТранспорт.ТипОплаты КАК ТипОплаты,
    |	ВТТранспорт.Контрагент.ПлательщикНДС КАК НДС,
    |	СУММА(ВТТранспорт.ПредоплатаПоКредиту) КАК ПредоплатаПоКредиту,
    |	МАКСИМУМ(ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КОплатеКлиентом, 0)) КАК КОплатеКлиентом,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ВТТранспорт.Контрагент = КонтрагентЯндекс.Значение.Ссылка
    |				ТОГДА ИСТИНА
    |			ИНАЧЕ ЛОЖЬ
    |		КОНЕЦ) КАК ЧекиПоКОплатеКлиентом,
    |	ВТТранспорт.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
    |	ВЫБОР
    |		КОГДА ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.ПустаяСсылка)
    |			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС18)
    |		ИНАЧЕ ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке
    |	КОНЕЦ КАК СтавкаНДСФЗ54ПоДоставке
    |ПОМЕСТИТЬ ВТЗаказы
    |ИЗ
    |	ВТТранспорт КАК ВТТранспорт
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
    |			ПО новаМестнаяДоставка.Номер = ДополнительныеПараметрыЗаказа.Заказ.Номер
    |		ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер,
    |	Константа.КонтрагентЯндекс КАК КонтрагентЯндекс
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТТранспорт.Контрагент,
    |	ВТТранспорт.Доставка,
    |	ВТТранспорт.Контрагент.ПечататьЧеки,
    |	ВТТранспорт.ТипОплаты,
    |	ВТТранспорт.Контрагент.ПлательщикНДС,
    |	ВЫБОР
    |		КОГДА ВТТранспорт.УчитыватьИтогоКОплате
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТТранспорт.ПредоплатаПоКредиту = 0
    |					ТОГДА ВЫБОР
    |							КОГДА ВТТранспорт.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |								ТОГДА &ОснВар
    |							ИНАЧЕ ВТТранспорт.Контрагент.ВариантПечатиЧеков
    |						КОНЕЦ
    |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |			КОНЕЦ
    |	КОНЕЦ,
    |	ВТТранспорт.ВычисляемыйЗапретЧастичногоВыкупа,
    |	ВЫБОР
    |		КОГДА ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.ПустаяСсылка)
    |			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС18)
    |		ИНАЧЕ ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке
    |	КОНЕЦ
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТЗаказы.СтоимостьДоставки КАК СуммаУслуг,
    |	ВТЗаказы.Контрагент КАК Контрагент,
    |	ВТЗаказы.Доставка КАК Доставка,
    |	ВТЗаказы.ПечататьЧеки КАК ПечататьЧеки,
    |	ВТЗаказы.ВариантПечатиЧеков КАК ВариантПечатиЧеков,
    |	ВТЗаказы.ТипЗаказа КАК ТипЗаказа,
    |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТоваров,
    |	ВТЗаказы.ТипОплаты КАК ТипОплаты,
    |	ВТЗаказы.НДС КАК НДС,
    |	ВТЗаказы.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту,
    |	МАКСИМУМ(ВТЗаказы.КОплатеКлиентом) КАК КОплатеКлиентом,
    |	МАКСИМУМ(ВТЗаказы.ЧекиПоКОплатеКлиентом) КАК ЧекиПоКОплатеКлиентом,
    |	ВТЗаказы.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
    |	ВТЗаказы.СтавкаНДСФЗ54ПоДоставке КАК СтавкаНДСФЗ54ПоДоставке
    |ПОМЕСТИТЬ ВТСуммыРеализации
    |ИЗ
    |	ВТЗаказы КАК ВТЗаказы
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    |		ПО ВТЗаказы.Доставка.Ссылка = РеализацияТоваровУслугТовары.Ссылка.Ссылка
    |ГДЕ
    |	НЕ ВТЗаказы.Доставка В
    |				(ВЫБРАТЬ
    |					ВТУжеПробитыеЧеки.Доставка
    |				ИЗ
    |					ВТУжеПробитыеЧеки)
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТЗаказы.ТипЗаказа,
    |	ВТЗаказы.Контрагент,
    |	ВТЗаказы.Доставка,
    |	ВТЗаказы.ВариантПечатиЧеков,
    |	ВТЗаказы.ПечататьЧеки,
    |	ВТЗаказы.СтоимостьДоставки,
    |	ВТЗаказы.ТипОплаты,
    |	ВТЗаказы.НДС,
    |	ВТЗаказы.ПредоплатаПоКредиту,
    |	ВТЗаказы.ВычисляемыйЗапретЧастичногоВыкупа,
    |	ВТЗаказы.СтавкаНДСФЗ54ПоДоставке
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТСуммыРеализации.СуммаУслуг КАК СуммаУслуг,
    |	ВТСуммыРеализации.Контрагент КАК Контрагент,
    |	ВТСуммыРеализации.Доставка КАК Доставка,
    |	ВТСуммыРеализации.ПечататьЧеки КАК ПечататьЧеки,
    |	ВТСуммыРеализации.ВариантПечатиЧеков КАК ВариантПечатиЧековСтарая,
    |	ВТСуммыРеализации.ТипЗаказа КАК ТипЗаказа,
    |	ВТСуммыРеализации.СуммаТоваров КАК СуммаТоваров,
    |	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка КАК Возврат,
    |	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК СуммаВозврата,
    |	ВТСуммыРеализации.ТипОплаты КАК ТипОплаты,
    |	ВЫБОР
    |		КОГДА ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков = 0
    |			ТОГДА 10
    |		ИНАЧЕ ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков
    |	КОНЕЦ КАК КратностьЧеков,
    |	ВЫБОР
    |		КОГДА ЕСТЬNULL(СвязкаККМККМПоРабочимМестам.ККМ, ИСТИНА) <> ИСТИНА
    |			ТОГДА СвязкаККМККМПоРабочимМестам.ККМ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
    |						ИЛИ ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ВКредит)
    |					ТОГДА ВТСуммыРеализации.Контрагент.ККМНаличнойОплаты
    |				ИНАЧЕ ВТСуммыРеализации.Контрагент.ККМТерминал
    |			КОНЕЦ
    |	КОНЕЦ КАК ККМ,
    |	ВТСуммыРеализации.НДС КАК НДС,
    |	ВТСуммыРеализации.Контрагент.РазрешитьРедактированиеКоличестваВПечатиЧеков КАК РазрешитьРедактированиеКоличества,
    |	ВТСуммыРеализации.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту,
    |	ВТЮрлица.Организация КАК ЮрЛицо,
    |	ВТЮрлица.Спецсчет КАК Спецсчет,
    |	ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин КАК ОсновнойМагазин,
    |	МАКСИМУМ(ВТСуммыРеализации.КОплатеКлиентом) КАК КОплатеКлиентом,
    |	МАКСИМУМ(ВТСуммыРеализации.ЧекиПоКОплатеКлиентом) КАК ЧекиПоКОплатеКлиентомСтарая,
    |	МАКСИМУМ(ВТСуммыРеализации.Доставка.УчитыватьИтогоКОплате
    |			И ВТСуммыРеализации.Доставка.ЗапретЧастичногоВыкупа) КАК ЧекиПоКОплатеКлиентом,
    |	ВЫБОР
    |		КОГДА ВТСуммыРеализации.ВычисляемыйЗапретЧастичногоВыкупа
    |				И ВТСуммыРеализации.СуммаТоваров + ВТСуммыРеализации.СуммаУслуг <> ВТСуммыРеализации.КОплатеКлиентом
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |		КОГДА ВТСуммыРеализации.ВычисляемыйЗапретЧастичногоВыкупа
    |				И ВТСуммыРеализации.СуммаТоваров + ВТСуммыРеализации.СуммаУслуг = ВТСуммыРеализации.КОплатеКлиентом
    |			ТОГДА ВЫБОР
    |					КОГДА ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |						ТОГДА &ОснВар
    |					ИНАЧЕ ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков
    |				КОНЕЦ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТСуммыРеализации.Доставка.УчитыватьИтогоКОплате
    |						И ВТСуммыРеализации.Доставка.ЗапретЧастичногоВыкупа
    |					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |				ИНАЧЕ ВЫБОР
    |						КОГДА ВТСуммыРеализации.ПредоплатаПоКредиту = 0
    |							ТОГДА ВЫБОР
    |									КОГДА ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |										ТОГДА &ОснВар
    |									ИНАЧЕ ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков
    |								КОНЕЦ
    |						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |					КОНЕЦ
    |			КОНЕЦ
    |	КОНЕЦ КАК ВариантПечатиЧеков,
    |	СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ.Ссылка КАК СвязкаККМ,
    |	ВТСуммыРеализации.СтавкаНДСФЗ54ПоДоставке КАК СтавкаНДСФЗ54ПоДоставке
    |ИЗ
    |	ВТЮрлица КАК ВТЮрлица
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыРеализации КАК ВТСуммыРеализации
    |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
    |			ПО ВТСуммыРеализации.Доставка.Номер = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязкиККМПоКонтрагентам.СрезПоследних КАК СвязкиККМПоКонтрагентамСрезПоследних
    |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиККМ.ККМПоРабочимМестам КАК СвязкаККМККМПоРабочимМестам
    |				ПО СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ.Ссылка = СвязкаККМККМПоРабочимМестам.Ссылка.Ссылка
    |					И (СвязкаККМККМПоРабочимМестам.РабочееМесто.Ссылка = &РабочееМесто)
    |			ПО ВТСуммыРеализации.Контрагент.Ссылка = СвязкиККМПоКонтрагентамСрезПоследних.Контрагент.Ссылка
    |				И ВТСуммыРеализации.ТипОплаты.Ссылка = СвязкиККМПоКонтрагентамСрезПоследних.ТипОплаты.Ссылка
    |		ПО (ВТЮрлица.Контрагент.Ссылка В (ВТСуммыРеализации.Контрагент.Ссылка, ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин.Ссылка))
    |			И ВТЮрлица.ТипОплаты.Ссылка = ВТСуммыРеализации.ТипОплаты.Ссылка
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТСуммыРеализации.Контрагент,
    |	ВТСуммыРеализации.Доставка,
    |	ВТСуммыРеализации.ПечататьЧеки,
    |	ВТСуммыРеализации.ВариантПечатиЧеков,
    |	ВТСуммыРеализации.ТипЗаказа,
    |	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка,
    |	ВТСуммыРеализации.СуммаТоваров,
    |	ВТСуммыРеализации.СуммаУслуг,
    |	ВТСуммыРеализации.ТипОплаты,
    |	ВТСуммыРеализации.НДС,
    |	ВТСуммыРеализации.Контрагент.РазрешитьРедактированиеКоличестваВПечатиЧеков,
    |	ВТСуммыРеализации.ПредоплатаПоКредиту,
    |	ВТЮрлица.Организация,
    |	ВТЮрлица.Спецсчет,
    |	ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин,
    |	ВЫБОР
    |		КОГДА ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков = 0
    |			ТОГДА 10
    |		ИНАЧЕ ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков
    |	КОНЕЦ,
    |	ВЫБОР
    |		КОГДА ВТСуммыРеализации.ВычисляемыйЗапретЧастичногоВыкупа
    |				И ВТСуммыРеализации.СуммаТоваров + ВТСуммыРеализации.СуммаУслуг <> ВТСуммыРеализации.КОплатеКлиентом
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |		КОГДА ВТСуммыРеализации.ВычисляемыйЗапретЧастичногоВыкупа
    |				И ВТСуммыРеализации.СуммаТоваров + ВТСуммыРеализации.СуммаУслуг = ВТСуммыРеализации.КОплатеКлиентом
    |			ТОГДА ВЫБОР
    |					КОГДА ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |						ТОГДА &ОснВар
    |					ИНАЧЕ ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков
    |				КОНЕЦ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТСуммыРеализации.Доставка.УчитыватьИтогоКОплате
    |						И ВТСуммыРеализации.Доставка.ЗапретЧастичногоВыкупа
    |					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |				ИНАЧЕ ВЫБОР
    |						КОГДА ВТСуммыРеализации.ПредоплатаПоКредиту = 0
    |							ТОГДА ВЫБОР
    |									КОГДА ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |										ТОГДА &ОснВар
    |									ИНАЧЕ ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков
    |								КОНЕЦ
    |						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |					КОНЕЦ
    |			КОНЕЦ
    |	КОНЕЦ,
    |	СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ.Ссылка,
    |	ВЫБОР
    |		КОГДА ЕСТЬNULL(СвязкаККМККМПоРабочимМестам.ККМ, ИСТИНА) <> ИСТИНА
    |			ТОГДА СвязкаККМККМПоРабочимМестам.ККМ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
    |						ИЛИ ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ВКредит)
    |					ТОГДА ВТСуммыРеализации.Контрагент.ККМНаличнойОплаты
    |				ИНАЧЕ ВТСуммыРеализации.Контрагент.ККМТерминал
    |			КОНЕЦ
    |	КОНЕЦ,
    |	ВТСуммыРеализации.СтавкаНДСФЗ54ПоДоставке
    |
    |УПОРЯДОЧИТЬ ПО
    |	ВТСуммыРеализации.Контрагент.Приоритет,
    |	ВТСуммыРеализации.Доставка.Номер
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТТранспорт
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТЗаказы
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТУжеПробитыеЧеки
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТСуммыРеализации";
#КонецОбласти
 	
	// Якурнов 16.07.2018 15:55:44
#Область ЗапросНовый
	
    Зап.Текст = 
    "ВЫБРАТЬ
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация КАК Организация,
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Спецсчет КАК Спецсчет,
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент КАК Контрагент,
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты КАК ТипОплаты,
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки КАК ТипДоставки
    |ПОМЕСТИТЬ ВТЮрлица
    |ИЗ
    |	РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних(&ДатаЗапроса, ) КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
    |ГДЕ
    |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки = ЗНАЧЕНИЕ(перечисление.типызаказов.доставка)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ПробитыеЧекиОбороты.Доставка КАК Доставка
    |ПОМЕСТИТЬ ВТУжеПробитыеЧеки
    |ИЗ
    |	РегистрНакопления.ПробитыеЧеки.Обороты(&НачПрЧеки, &КонПрЧеки, , ) КАК ПробитыеЧекиОбороты
    |
    |СГРУППИРОВАТЬ ПО
    |	ПробитыеЧекиОбороты.Доставка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
    |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
    |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
    |	новаЗаданияРейсов.Доставка.Оплачен КАК ДоставкаОплачен,
    |	новаРейсМестнойДоставки.Ссылка КАК Рейс,
    |	РеализацияТоваровУслуг.Ссылка КАК Доставка,
    |	ТипыОплат.Ссылка КАК ТипОплаты,
    |	РеализацияТоваровУслуг.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту,
    |	РеализацияТоваровУслуг.УчитыватьИтогоКОплате КАК УчитыватьИтогоКОплате,
    |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа, ЛОЖЬ) КАК ВычисляемыйЗапретЧастичногоВыкупа
    |ПОМЕСТИТЬ ВТТранспорт
    |ИЗ
    |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
    |			ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
    |			ПО РеализацияТоваровУслуг.ВладелецТовара = ПараметрыКонтрагентовСрезПоследних.Контрагент
    |		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
    |		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
    |ГДЕ
    |	новаЗадачаРейсаМестнойДоставки.Роль = &ВыбЭтап
    |	И РеализацияТоваровУслуг.ТипОплаты В (1, 2, 5)
    |	И &ДопУсловия
    |
    |СГРУППИРОВАТЬ ПО
    |	РеализацияТоваровУслуг.Номер,
    |	новаЗаданияРейсов.Рейс.Транспорт,
    |	новаЗаданияРейсов.Доставка.Оплачен,
    |	новаРейсМестнойДоставки.Ссылка,
    |	РеализацияТоваровУслуг.ВладелецТовара,
    |	РеализацияТоваровУслуг.Ссылка,
    |	ТипыОплат.Ссылка,
    |	РеализацияТоваровУслуг.ПредоплатаПоКредиту,
    |	РеализацияТоваровУслуг.УчитыватьИтогоКОплате,
    |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа, ЛОЖЬ)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	СУММА(новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД) КАК СтоимостьДоставки,
    |	ВТТранспорт.Контрагент КАК Контрагент,
    |	ВТТранспорт.Доставка КАК Доставка,
    |	ВТТранспорт.Контрагент.ПечататьЧеки КАК ПечататьЧеки,
    |	ВЫБОР
    |		КОГДА ВТТранспорт.УчитыватьИтогоКОплате
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТТранспорт.ПредоплатаПоКредиту = 0
    |					ТОГДА ВЫБОР
    |							КОГДА ВТТранспорт.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |								ТОГДА &ОснВар
    |							ИНАЧЕ ВТТранспорт.Контрагент.ВариантПечатиЧеков
    |						КОНЕЦ
    |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |			КОНЕЦ
    |	КОНЕЦ КАК ВариантПечатиЧеков,
    |	&ТЗ КАК ТипЗаказа,
    |	ВТТранспорт.ТипОплаты КАК ТипОплаты,
    |	ВТТранспорт.Контрагент.ПлательщикНДС КАК НДС,
    |	СУММА(ВТТранспорт.ПредоплатаПоКредиту) КАК ПредоплатаПоКредиту,
    |	МАКСИМУМ(ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КОплатеКлиентом, 0)) КАК КОплатеКлиентом,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ВТТранспорт.Контрагент = КонтрагентЯндекс.Значение.Ссылка
    |				ТОГДА ИСТИНА
    |			ИНАЧЕ ЛОЖЬ
    |		КОНЕЦ) КАК ЧекиПоКОплатеКлиентом,
    |	ВТТранспорт.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
    |	ВЫБОР
    |		КОГДА ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.ПустаяСсылка)
    |			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС18)
    |		ИНАЧЕ ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке
    |	КОНЕЦ КАК СтавкаНДСФЗ54ПоДоставке
    |ПОМЕСТИТЬ ВТЗаказы
    |ИЗ
    |	ВТТранспорт КАК ВТТранспорт
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
    |			ПО новаМестнаяДоставка.Номер = ДополнительныеПараметрыЗаказа.Заказ.Номер
    |		ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер,
    |	Константа.КонтрагентЯндекс КАК КонтрагентЯндекс
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТТранспорт.Контрагент,
    |	ВТТранспорт.Доставка,
    |	ВТТранспорт.Контрагент.ПечататьЧеки,
    |	ВТТранспорт.ТипОплаты,
    |	ВТТранспорт.Контрагент.ПлательщикНДС,
    |	ВЫБОР
    |		КОГДА ВТТранспорт.УчитыватьИтогоКОплате
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТТранспорт.ПредоплатаПоКредиту = 0
    |					ТОГДА ВЫБОР
    |							КОГДА ВТТранспорт.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |								ТОГДА &ОснВар
    |							ИНАЧЕ ВТТранспорт.Контрагент.ВариантПечатиЧеков
    |						КОНЕЦ
    |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |			КОНЕЦ
    |	КОНЕЦ,
    |	ВТТранспорт.ВычисляемыйЗапретЧастичногоВыкупа,
    |	ВЫБОР
    |		КОГДА ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.ПустаяСсылка)
    |			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС18)
    |		ИНАЧЕ ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке
    |	КОНЕЦ
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТЗаказы.СтоимостьДоставки КАК СуммаУслуг,
    |	ВТЗаказы.Контрагент КАК Контрагент,
    |	ВТЗаказы.Доставка КАК Доставка,
    |	ВТЗаказы.ПечататьЧеки КАК ПечататьЧеки,
    |	ВТЗаказы.ВариантПечатиЧеков КАК ВариантПечатиЧеков,
    |	ВТЗаказы.ТипЗаказа КАК ТипЗаказа,
    |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТоваров,
    |	ВТЗаказы.ТипОплаты КАК ТипОплаты,
    |	ВТЗаказы.НДС КАК НДС,
    |	ВТЗаказы.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту,
    |	МАКСИМУМ(ВТЗаказы.КОплатеКлиентом) КАК КОплатеКлиентом,
    |	МАКСИМУМ(ВТЗаказы.ЧекиПоКОплатеКлиентом) КАК ЧекиПоКОплатеКлиентом,
    |	ВТЗаказы.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
    |	ВТЗаказы.СтавкаНДСФЗ54ПоДоставке КАК СтавкаНДСФЗ54ПоДоставке
    |ПОМЕСТИТЬ ВТСуммыРеализации
    |ИЗ
    |	ВТЗаказы КАК ВТЗаказы
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    |		ПО ВТЗаказы.Доставка.Ссылка = РеализацияТоваровУслугТовары.Ссылка.Ссылка
    |ГДЕ
    |	НЕ ВТЗаказы.Доставка В
    |				(ВЫБРАТЬ
    |					ВТУжеПробитыеЧеки.Доставка
    |				ИЗ
    |					ВТУжеПробитыеЧеки)
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТЗаказы.ТипЗаказа,
    |	ВТЗаказы.Контрагент,
    |	ВТЗаказы.Доставка,
    |	ВТЗаказы.ВариантПечатиЧеков,
    |	ВТЗаказы.ПечататьЧеки,
    |	ВТЗаказы.СтоимостьДоставки,
    |	ВТЗаказы.ТипОплаты,
    |	ВТЗаказы.НДС,
    |	ВТЗаказы.ПредоплатаПоКредиту,
    |	ВТЗаказы.ВычисляемыйЗапретЧастичногоВыкупа,
    |	ВТЗаказы.СтавкаНДСФЗ54ПоДоставке
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	СвязкиККМККМПоРабочимМестам.Ссылка.Ссылка КАК СвязкаККМ,
    |	СвязкиККМККМПоРабочимМестам.ККМ КАК ККМ
    |ПОМЕСТИТЬ ВТСвязкиККМ
    |ИЗ
    |	Справочник.СвязкиККМ.ККМПоРабочимМестам КАК СвязкиККМККМПоРабочимМестам
    |ГДЕ
    |	СвязкиККМККМПоРабочимМестам.РабочееМесто = &РабочееМесто
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	СвязкиККМККМПоПользователям.Ссылка.Ссылка,
    |	СвязкиККМККМПоПользователям.ККМ
    |ИЗ
    |	Справочник.СвязкиККМ.ККМПоПользователям КАК СвязкиККМККМПоПользователям
    |ГДЕ
    |	СвязкиККМККМПоПользователям.Пользователь = &ТекущийПользователь
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТСуммыРеализации.СуммаУслуг КАК СуммаУслуг,
    |	ВТСуммыРеализации.Контрагент КАК Контрагент,
    |	ВТСуммыРеализации.Доставка КАК Доставка,
    |	ВТСуммыРеализации.ПечататьЧеки КАК ПечататьЧеки,
    |	ВТСуммыРеализации.ВариантПечатиЧеков КАК ВариантПечатиЧековСтарая,
    |	ВТСуммыРеализации.ТипЗаказа КАК ТипЗаказа,
    |	ВТСуммыРеализации.СуммаТоваров КАК СуммаТоваров,
    |	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка КАК Возврат,
    |	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК СуммаВозврата,
    |	ВТСуммыРеализации.ТипОплаты КАК ТипОплаты,
    |	ВЫБОР
    |		КОГДА ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков = 0
    |			ТОГДА 10
    |		ИНАЧЕ ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков
    |	КОНЕЦ КАК КратностьЧеков,
    |	ВТСуммыРеализации.НДС КАК НДС,
    |	ВТСуммыРеализации.Контрагент.РазрешитьРедактированиеКоличестваВПечатиЧеков КАК РазрешитьРедактированиеКоличества,
    |	ВТСуммыРеализации.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту,
    |	ВТЮрлица.Организация КАК ЮрЛицо,
    |	ВТЮрлица.Спецсчет КАК Спецсчет,
    |	ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин КАК ОсновнойМагазин,
    |	МАКСИМУМ(ВТСуммыРеализации.КОплатеКлиентом) КАК КОплатеКлиентом,
    |	МАКСИМУМ(ВТСуммыРеализации.ЧекиПоКОплатеКлиентом) КАК ЧекиПоКОплатеКлиентомСтарая,
    |	МАКСИМУМ(ВТСуммыРеализации.Доставка.УчитыватьИтогоКОплате
    |			И ВТСуммыРеализации.Доставка.ЗапретЧастичногоВыкупа) КАК ЧекиПоКОплатеКлиентом,
    |	ВЫБОР
    |		КОГДА ВТСуммыРеализации.ВычисляемыйЗапретЧастичногоВыкупа
    |				И ВТСуммыРеализации.СуммаТоваров + ВТСуммыРеализации.СуммаУслуг <> ВТСуммыРеализации.КОплатеКлиентом
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |		КОГДА ВТСуммыРеализации.ВычисляемыйЗапретЧастичногоВыкупа
    |				И ВТСуммыРеализации.СуммаТоваров + ВТСуммыРеализации.СуммаУслуг = ВТСуммыРеализации.КОплатеКлиентом
    |			ТОГДА ВЫБОР
    |					КОГДА ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |						ТОГДА &ОснВар
    |					ИНАЧЕ ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков
    |				КОНЕЦ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТСуммыРеализации.Доставка.УчитыватьИтогоКОплате
    |						И ВТСуммыРеализации.Доставка.ЗапретЧастичногоВыкупа
    |					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |				ИНАЧЕ ВЫБОР
    |						КОГДА ВТСуммыРеализации.ПредоплатаПоКредиту = 0
    |							ТОГДА ВЫБОР
    |									КОГДА ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |										ТОГДА &ОснВар
    |									ИНАЧЕ ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков
    |								КОНЕЦ
    |						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |					КОНЕЦ
    |			КОНЕЦ
    |	КОНЕЦ КАК ВариантПечатиЧеков,
    |	СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ.Ссылка КАК СвязкаККМ,
    |	ВТСуммыРеализации.СтавкаНДСФЗ54ПоДоставке КАК СтавкаНДСФЗ54ПоДоставке,
    |	ВЫБОР
    |		КОГДА ЕСТЬNULL(ВТСвязкиККМ.ККМ, ИСТИНА) <> ИСТИНА
    |			ТОГДА ВТСвязкиККМ.ККМ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
    |						ИЛИ ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ВКредит)
    |					ТОГДА ВТСуммыРеализации.Контрагент.ККМНаличнойОплаты
    |				ИНАЧЕ ВТСуммыРеализации.Контрагент.ККМТерминал
    |			КОНЕЦ
    |	КОНЕЦ КАК ККМ
    |ИЗ
    |	ВТЮрлица КАК ВТЮрлица
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыРеализации КАК ВТСуммыРеализации
    |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
    |			ПО ВТСуммыРеализации.Доставка.Номер = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязкиККМПоКонтрагентам.СрезПоследних КАК СвязкиККМПоКонтрагентамСрезПоследних
    |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвязкиККМ КАК ВТСвязкиККМ
    |				ПО СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ = ВТСвязкиККМ.СвязкаККМ
    |			ПО ВТСуммыРеализации.Контрагент.Ссылка = СвязкиККМПоКонтрагентамСрезПоследних.Контрагент.Ссылка
    |				И ВТСуммыРеализации.ТипОплаты.Ссылка = СвязкиККМПоКонтрагентамСрезПоследних.ТипОплаты.Ссылка
    |		ПО (ВТЮрлица.Контрагент.Ссылка В (ВТСуммыРеализации.Контрагент.Ссылка, ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин.Ссылка))
    |			И ВТЮрлица.ТипОплаты.Ссылка = ВТСуммыРеализации.ТипОплаты.Ссылка
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТСуммыРеализации.Контрагент,
    |	ВТСуммыРеализации.Доставка,
    |	ВТСуммыРеализации.ПечататьЧеки,
    |	ВТСуммыРеализации.ВариантПечатиЧеков,
    |	ВТСуммыРеализации.ТипЗаказа,
    |	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка,
    |	ВТСуммыРеализации.СуммаТоваров,
    |	ВТСуммыРеализации.СуммаУслуг,
    |	ВТСуммыРеализации.ТипОплаты,
    |	ВТСуммыРеализации.НДС,
    |	ВТСуммыРеализации.Контрагент.РазрешитьРедактированиеКоличестваВПечатиЧеков,
    |	ВТСуммыРеализации.ПредоплатаПоКредиту,
    |	ВТЮрлица.Организация,
    |	ВТЮрлица.Спецсчет,
    |	ВТСуммыРеализации.Контрагент.Родитель.ОсновнойМагазин,
    |	ВЫБОР
    |		КОГДА ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков = 0
    |			ТОГДА 10
    |		ИНАЧЕ ВТСуммыРеализации.Контрагент.КратностьПозицийПечатьЧеков
    |	КОНЕЦ,
    |	ВЫБОР
    |		КОГДА ВТСуммыРеализации.ВычисляемыйЗапретЧастичногоВыкупа
    |				И ВТСуммыРеализации.СуммаТоваров + ВТСуммыРеализации.СуммаУслуг <> ВТСуммыРеализации.КОплатеКлиентом
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |		КОГДА ВТСуммыРеализации.ВычисляемыйЗапретЧастичногоВыкупа
    |				И ВТСуммыРеализации.СуммаТоваров + ВТСуммыРеализации.СуммаУслуг = ВТСуммыРеализации.КОплатеКлиентом
    |			ТОГДА ВЫБОР
    |					КОГДА ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |						ТОГДА &ОснВар
    |					ИНАЧЕ ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков
    |				КОНЕЦ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТСуммыРеализации.Доставка.УчитыватьИтогоКОплате
    |						И ВТСуммыРеализации.Доставка.ЗапретЧастичногоВыкупа
    |					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |				ИНАЧЕ ВЫБОР
    |						КОГДА ВТСуммыРеализации.ПредоплатаПоКредиту = 0
    |							ТОГДА ВЫБОР
    |									КОГДА ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков В (NULL, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ПустаяСсылка))
    |										ТОГДА &ОснВар
    |									ИНАЧЕ ВТСуммыРеализации.Контрагент.ВариантПечатиЧеков
    |								КОНЕЦ
    |						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧеков.ОбщийЧек)
    |					КОНЕЦ
    |			КОНЕЦ
    |	КОНЕЦ,
    |	СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ.Ссылка,
    |	ВТСуммыРеализации.СтавкаНДСФЗ54ПоДоставке,
    |	ВЫБОР
    |		КОГДА ЕСТЬNULL(ВТСвязкиККМ.ККМ, ИСТИНА) <> ИСТИНА
    |			ТОГДА ВТСвязкиККМ.ККМ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.Наличные)
    |						ИЛИ ВТСуммыРеализации.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.ВКредит)
    |					ТОГДА ВТСуммыРеализации.Контрагент.ККМНаличнойОплаты
    |				ИНАЧЕ ВТСуммыРеализации.Контрагент.ККМТерминал
    |			КОНЕЦ
    |	КОНЕЦ
    |
    |УПОРЯДОЧИТЬ ПО
    |	ВТСуммыРеализации.Контрагент.Приоритет,
    |	ВТСуммыРеализации.Доставка.Номер
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТТранспорт
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТЗаказы
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТУжеПробитыеЧеки
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТСуммыРеализации
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВТСвязкиККМ";
	
	#КонецОбласти
	
    Зап.УстановитьПараметр("ОснВар", Перечисления.ВариантыПечатиЧеков.ЧекиПоПозициям);
    Зап.УстановитьПараметр("ВыбЭтап", Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки.Ссылка);
    Зап.УстановитьПараметр("ТЗ", Перечисления.ТипыЗаказов.Доставка);
    Зап.УстановитьПараметр("ТЧ", Перечисления.ВидыОперацийЧекККМ.Продажа);
    
    Зап.УстановитьПараметр("НачПрЧеки", НачалоДня(Док.Дата));
    Зап.УстановитьПараметр("КонПрЧеки", КонецДня(Док.Дата));
    Зап.УстановитьПараметр("ДатаЗапроса", КонецДня(Объект.Дата));
	Зап.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	
	// Якурнов 16.07.2018 16:25:35
	Зап.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
    
    ДопУсловия = "ИСТИНА";
    Если ЗначениеЗаполнено(Док.ПериодС) И ЗначениеЗаполнено(Док.ПериодПо) Тогда
        Зап.УстановитьПараметр("ДатаНач", НачалоДня(Док.ПериодС));
        Зап.УстановитьПараметр("ДатаКон", КонецДня(Док.ПериодПо));
        ДопУсловия = ДопУсловия + " И новаРейсМестнойДоставки.Дата МЕЖДУ &ДатаНач И &ДатаКон ";
    КонецеСли;
	
    Если ЗначениеЗаполнено(Док.Контрагент) Тогда
        ////Серегин М.В. 22.07.2015 12:23:04 старый код
        //ДопУсловия = ДопУсловия + " И ЗакрытыеЗаказыОбороты.РеализацияТоваровУслуг.ВладелецТовара = &Контр ";
        //Серегин М.В. 22.07.2015 12:23:11 новый
		ДопУсловия = ДопУсловия + " И РеализацияТоваровУслуг.ВладелецТовара = &Контр ";
		Зап.УстановитьПараметр("Контр", Док.Контрагент);
	КонецеСли;	
	
	Если ЗначениеЗаполнено(Док.Рейс) Тогда
		ДопУсловия = ДопУсловия + " И новаРейсМестнойДоставки.Ссылка = &Рейс ";
		Зап.УстановитьПараметр("Рейс", Док.Рейс);
	КонецеСли;	
	
	Зап.Текст = СтрЗаменить(Зап.Текст, "&ДопУсловия", ДопУсловия);
	
	Объект.Доставки.Загрузить(Зап.Выполнить().Выгрузить());
	
	//ЗапПоКассирамККМ = Новый Запрос;
	//ЗапПоКассирамККМ.Текст = "ВЫБРАТЬ
	//                         |	СостояниеСменККМСрезПоследних.Кассир КАК Кассир,
	//                         |	СостояниеСменККМСрезПоследних.ККМ КАК ККМ
	//                         |ИЗ
	//                         |	РегистрСведений.СостояниеСменККМ.СрезПоследних(&ДатаЗапроса, ) КАК СостояниеСменККМСрезПоследних
	//                         |ГДЕ
	//                         |	СостояниеСменККМСрезПоследних.СостояниеСмены = ЗНАЧЕНИЕ(Перечисление.состояниесменккм.сменаоткрыта)";
	//ЗапПоКассирамККМ.УстановитьПараметр("ДатаЗапроса", КонецДня(Объект.Дата));
	//ТабККМСКассирами = ЗапПоКассирамККМ.Выполнить().Выгрузить();
	
	//Для Каждого Тек Из Объект.Доставки Цикл
	//	Если Не ЗначениеЗаполнено(Тек.ВариантДоставки) Тогда
	//		Тек.ВариантДоставки = Перечисления.ВариантыПечатиЧеков.ЧекиПоПозициям;
	//	КонецЕсли;	
	//КонецЦикла;	
	Для Каждого Тек Из Объект.Доставки Цикл
		Если ЗначениеЗаполнено(Тек.Контрагент.Родитель.ОсновнойМагазин) Тогда
			Тек.ПечататьЧеки = Тек.Контрагент.Родитель.ОсновнойМагазин.ПечататьЧеки;
			Тек.КратностьЧеков = Тек.Контрагент.Родитель.ОсновнойМагазин.КратностьПозицийПечатьЧеков;
			Если Тек.КратностьЧеков = 0 Тогда
				Тек.КратностьЧеков = 10;
			КонецЕсли;	
			
			//////логика по связке ККМ основного магазина============================================
			Связка = Неопределено;
			Тек.ККМ = lem.ПолучитьККМИзСвязкиККМ(Тек.Контрагент.Родитель.ОсновнойМагазин, Тек.ТипОплаты, Связка);
			Тек.СвязкаККМ = Связка;
			Если Тек.ККМ.Пустая() Тогда
				Если Тек.ТипОплаты = Справочники.ТипыОплат.Наличные Или Тек.ТипОплаты = Справочники.ТипыОплат.Наличные Тогда
					Тек.ККМ = Тек.Контрагент.Родитель.ОсновнойМагазин.ККМНаличнойОплаты;
				Иначе
					Тек.ККМ = Тек.Контрагент.Родитель.ОсновнойМагазин.ККМТерминал;
				КонецеСли;
			КонецЕсли;
			
			
			
			
			
			Тек.НДС = Тек.Контрагент.Родитель.ОсновнойМагазин.ПлательщикНДС;   
			Тек.РазрешитьРедактированиеКоличества = Тек.Контрагент.Родитель.ОсновнойМагазин.РазрешитьРедактированиеКоличестваВПечатиЧеков;
			
			Струк = Новый Структура;
			Струк.Вставить("Контрагент", Тек.Контрагент.Родитель.ОсновнойМагазин.Ссылка);
			Струк.Вставить("ТипОплаты", Тек.ТипОплаты.Ссылка);
			
			Най = РегистрыСведений.ЮридическоеЛицоПоДоставкеКонтрагента.ПолучитьПоследнее(КонецДня(Объект.Дата), Струк);
			Если Най <> Неопределено Тогда
				Тек.Юрлицо = Най.Организация;
				Тек.Спецсчет = Най.Спецсчет;
			КонецеСли;	
		КонецеСли;	
		
		
		Если Тек.ПечататьЧеки Тогда
			Если Не ЗначениеЗаполнено(Тек.ККМ) Тогда
				Тек.ПечататьЧеки = Ложь;
			КонецеСли;	
		КонецеСли;
		
		Если ЗначениеЗаполнено(Тек.ККМ) Тогда
			//НайКассир = ТабККМСКассирами.Найти(Тек.ККМ);
			//Если НайКассир <> Неопределено Тогда
			//попытка
				Тек.КассирНаЧек = УчетКассировСервер.ПолучитьКассира(Тек.ЮрЛицо,Тек.ККМ); 
			//исключение
			//	
			//	конецпопытки;
				
				//НайКассир.Кассир;
			//КонецеСли;	
		КонецеСли;	
	КонецЦикла;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент,
	            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты,
	            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки,
	            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация,
	            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Спецсчет
	            |ПОМЕСТИТЬ ВТЮрлица
	            |ИЗ
	            |	РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних(&ДатаЗапроса, ) КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
	            |ГДЕ
	            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки = ЗНАЧЕНИЕ(перечисление.типызаказов.доставка)
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ПробитыеЧеки.Доставка
	            |ПОМЕСТИТЬ ВТУжеПробитыеЧеки
	            |ИЗ
	            |	РегистрНакопления.ПробитыеЧеки КАК ПробитыеЧеки
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПробитыеЧеки.Доставка
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
	            |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	            |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	            |	новаЗаданияРейсов.Доставка.Оплачен,
	            |	новаРейсМестнойДоставки.Ссылка КАК Рейс,
	            |	РеализацияТоваровУслуг.Ссылка КАК Доставка,
	            |	ТипыОплат.Ссылка КАК ТипОплаты
	            |ПОМЕСТИТЬ ВТТранспорт
	            |ИЗ
	            |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	            |			ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
	            |		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
	            |			ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
	            |		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
	            |ГДЕ
	            |	новаЗадачаРейсаМестнойДоставки.Роль = &ВыбЭтап
	            |	И РеализацияТоваровУслуг.ТипОплаты В (1, 2, 5)
				|$ДопУсловия
	            |СГРУППИРОВАТЬ ПО
	            |	РеализацияТоваровУслуг.Номер,
	            |	новаЗаданияРейсов.Рейс.Транспорт,
	            |	новаЗаданияРейсов.Доставка.Оплачен,
	            |	новаРейсМестнойДоставки.Ссылка,
	            |	РеализацияТоваровУслуг.ВладелецТовара,
	            |	РеализацияТоваровУслуг.Ссылка,
	            |	ТипыОплат.Ссылка
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	СУММА(новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД) КАК СтоимостьДоставки,
	            |	ВТТранспорт.Контрагент,
	            |	ВТТранспорт.Доставка,
	            |	ВТТранспорт.Контрагент.ПечататьЧеки КАК ПечататьЧеки,
	            |	NULL КАК ВариантПечатиЧеков,
	            |	NULL КАК ТипЗаказа,
	            |	ВТТранспорт.ТипОплаты
	            |ПОМЕСТИТЬ ВТЗаказы
	            |ИЗ
	            |	ВТТранспорт КАК ВТТранспорт
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТТранспорт.Контрагент,
	            |	ВТТранспорт.Доставка,
	            |	ВТТранспорт.Контрагент.ПечататьЧеки,
	            |	ВТТранспорт.ТипОплаты
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТЗаказы.Доставка,
	            |	РеализацияТоваровУслугТовары.Номенклатура,
	            |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	            |	РеализацияТоваровУслугТовары.Цена,
	            |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	            |	ВТЗаказы.ТипОплаты,
	            |	ВТЗаказы.Контрагент.Приоритет КАК КонтрагентПриоритет,
	            |	ВТЗаказы.Доставка.Номер КАК ДоставкаНомер,
	            |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	            |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК НовоеКоличество,
	            |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаНовая,
	            |	ВТЮрлица.Организация КАК ЮрЛицо,
	            |	ВТЮрлица.Спецсчет
	            |ИЗ
	            |	ВТЗаказы КАК ВТЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	            |		ПО ВТЗаказы.Доставка.Ссылка = РеализацияТоваровУслугТовары.Ссылка.Ссылка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЮрлица КАК ВТЮрлица
	            |		ПО ВТЗаказы.Контрагент = ВТЮрлица.Контрагент
	            |			И ВТЗаказы.ТипОплаты = ВТЮрлица.ТипОплаты
	            |ГДЕ
	            |	НЕ ВТЗаказы.Доставка В
	            |				(ВЫБРАТЬ
	            |					ВТУжеПробитыеЧеки.Доставка
	            |				ИЗ
	            |					ВТУжеПробитыеЧеки)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТЗаказы.Доставка,
	            |	РеализацияТоваровУслугТовары.Номенклатура,
	            |	РеализацияТоваровУслугТовары.Цена,
	            |	ВТЗаказы.ТипОплаты,
	            |	ВТЗаказы.Контрагент.Приоритет,
	            |	ВТЗаказы.Доставка.Номер,
	            |	РеализацияТоваровУслугТовары.НомерСтроки,
	            |	ВТЮрлица.Организация,
	            |	ВТЮрлица.Спецсчет
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ВТЗаказы.Доставка,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	            |	СУММА(-ВозвратТоваровОтПокупателяТовары.Количество),
	            |	ВозвратТоваровОтПокупателяТовары.Цена,
	            |	СУММА(-ВозвратТоваровОтПокупателяТовары.Сумма),
	            |	ВТЗаказы.ТипОплаты,
	            |	ВТЗаказы.Контрагент.Приоритет,
	            |	ВТЗаказы.Доставка.Номер,
	            |	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	            |	-ВозвратТоваровОтПокупателяТовары.Количество,
	            |	-ВозвратТоваровОтПокупателяТовары.Сумма,
	            |	ВТЮрлица.Организация,
	            |	ВТЮрлица.Спецсчет
	            |ИЗ
	            |	ВТЗаказы КАК ВТЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	            |		ПО ВТЗаказы.Доставка.Номер = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЮрлица КАК ВТЮрлица
	            |		ПО ВТЗаказы.Контрагент = ВТЮрлица.Контрагент
	            |			И ВТЗаказы.ТипОплаты = ВТЮрлица.ТипОплаты
	            |ГДЕ
	            |	НЕ ВТЗаказы.Доставка В
	            |				(ВЫБРАТЬ
	            |					ВТУжеПробитыеЧеки.Доставка
	            |				ИЗ
	            |					ВТУжеПробитыеЧеки)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТЗаказы.Доставка,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	            |	ВозвратТоваровОтПокупателяТовары.Цена,
	            |	ВТЗаказы.ТипОплаты,
	            |	ВТЗаказы.Контрагент.Приоритет,
	            |	ВТЗаказы.Доставка.Номер,
	            |	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	            |	-ВозвратТоваровОтПокупателяТовары.Количество,
	            |	-ВозвратТоваровОтПокупателяТовары.Сумма,
	            |	ВТЮрлица.Организация,
	            |	ВТЮрлица.Спецсчет
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	КонтрагентПриоритет,
	            |	ДоставкаНомер,
	            |	НомерСтроки
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТТранспорт
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТЗаказы
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТУжеПробитыеЧеки";
	Зап.УстановитьПараметр("ВыбЭтап", Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки.Ссылка);
	
	Если ЗначениеЗаполнено(Док.ПериодС) И ЗначениеЗаполнено(Док.ПериодПо) Тогда
		Зап.УстановитьПараметр("ДатаНач", НачалоДня(Док.ПериодС));
		Зап.УстановитьПараметр("ДатаКон", КонецДня(Док.ПериодПо));
		ДопУсловия = ДопУсловия + " И новаРейсМестнойДоставки.Дата МЕЖДУ &ДатаНач И &ДатаКон ";
	КонецеСли;
	
	ДопУсловия = "";
    Если ЗначениеЗаполнено(Док.Контрагент) Тогда
        ////Серегин М.В. 22.07.2015 12:25:30 старый код
        //ДопУсловия = ДопУсловия + " И ЗакрытыеЗаказыОбороты.РеализацияТоваровУслуг.ВладелецТовара = &Контр ";
        //Серегин М.В. 22.07.2015 12:25:36 новый
		ДопУсловия = ДопУсловия + " И РеализацияТоваровУслуг.ВладелецТовара = &Контр ";
		Зап.УстановитьПараметр("Контр", Док.Контрагент);
	КонецеСли;	
	
	Если ЗначениеЗаполнено(Док.Рейс) Тогда
		ДопУсловия = ДопУсловия + " И новаРейсМестнойДоставки.Ссылка = &Рейс ";
		Зап.УстановитьПараметр("Рейс", Док.Рейс);
	КонецеСли;	
	
	Зап.УстановитьПараметр("ДатаЗапроса", КонецДня(Объект.Дата));
	Зап.Текст = СтрЗаменить(Зап.Текст, "$ДопУсловия", ДопУсловия);
	
	Объект.Товары.Загрузить(Зап.Выполнить().Выгрузить());
	
КонецФункции	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Если Параметры.Свойство("Объект") Тогда
	//	Объект = Параметры.Объект;
	//КонецЕсли;
	
	СписокДоставок.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Доставка", Null);
	
	СписокЧеков.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
	СписокЧеков.Параметры.УстановитьЗначениеПараметра("Доставка", Null);
	
	
	Если Объект.ТерминалДоставки.Пустая() Тогда
		// Михушкин - 30.05.2017 --->>  
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиПользователей.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Пользователь = &Пользователь
		|	И НастройкиПользователей.Настройка = &Настройка");
		Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ТерминалДоставки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Объект.ТерминалДоставки = ?(ЗначениеЗаполнено(Выборка.Значение), Выборка.Значение, Справочники.РегиональныеТерминалы.МоскваСтриж);			
		Иначе
			Объект.ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж;	
		КонецЕсли;
		
		// <<--- Михушкин
	КонецеСли;
	
	//Если Не ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
	//	Объект.РабочееМесто = ПараметрыСеанса.РабочееМесто;
	//КонецеСли;	
	//+Степанов Задача № 3625 
	УстановитьВозможностьРедактированияККМ();	
	//-Степанов Задача № 3625 
КонецПроцедуры

&НаКлиенте
Процедура СписокДоставокПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	Если Элементы.СписокДоставок.ТекущиеДанные <> Неопределено Тогда
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Доставка", Элементы.СписокДоставок.ТекущиеДанные.Доставка);
		СписокЧеков.Параметры.УстановитьЗначениеПараметра("Доставка", Элементы.СписокДоставок.ТекущиеДанные.Доставка);
		Элементы.СписокНоменклатуры.Обновить();
		 
		СписокЧековПослеОбновления();
		Элементы.СписокЧеков.Обновить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.ОтделТоваров) Тогда
		Объект.ОтделТоваров = Константы.ОтделТоваров.Получить();
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Объект.ОтделУслуг) Тогда
		Объект.ОтделУслуг = Константы.ОтделУслуг.Получить();
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Объект.ТипЗаказа) Тогда
		Объект.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
	КонецеСли;	
	
	//Если Не ЗначениеЗаполнено(Объект.Касса) Тогда
	//	Объект.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяКассаККМ");
	//КонецЕСли;	
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.РабочееМесто = ПараметрыСеанса.РабочееМесто;
	КонецЕСли;	
	
	Если Не ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	КонецЕСли;	
	
	
	//Если Не ЗначениеЗаполнено(Объект.ПериодС) Тогда
	//	Объект.ПериодС = ТекущаяДата();
	//КонецеСли;	
	//
	//Если Не ЗначениеЗаполнено(Объект.ПериодПо) Тогда
	//	Объект.ПериодПо = ТекущаяДата();
	//КонецеСли;	
	
	УстановитьДоступностьРеквизитов(Объект.Доставки.Количество()=0);
	ТолькоПросмотр = Не ОпределитьДоступностьФормыДляРедактирования(Объект.Ссылка);
	
	//Если ЧекиНапечатаны Тогда
	//	ТолькоПросмотр = Истина;
	//КонецеСли;
	
	Если Не Объект.РабочееМесто.Пустая() Тогда
		Если Объект.РабочееМесто <> ПараметрыСеанса.РабочееМесто Тогда    
			ТолькоПросмотр = Истина;
			Элементы.РабочееМесто.ЦветТекста = WebЦвета.НейтральноФиолетовоКрасный;
		КонецеСли;
	КонецеСли;
	
	//Если Не ТолькоПросмотр И Не Объект.РабочееМесто.Пустая() Тогда
	//	Если Объект.РабочееМесто <> ПараметрыСеанса.РабочееМесто Тогда
	//		ТолькоПросмотр = Истина;
	//		Элементы.РабочееМесто.ЦветТекста = WebЦвета.НейтральноФиолетовоКрасный;
	//	КонецеСли;
	//КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоставкиИТовары(Команда) Экспорт
	
	Если Объект.ТипЗаказа <> Перечисления.ТипыЗаказов.Доставка Тогда
		Возврат;
	КонецеСли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Объект.Проведен Тогда
			От = Вопрос("Документ проведен. Отменить проведение документа?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			Если От = КодВозвратаДиалога.Да Тогда
				Парам = Новый Структура;
				Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
				Записать(Парам);
			Иначе	
				Возврат;
			КонецеСли;
		КонецеСли;
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		От = Вопрос("Документ не записан. Записать документ?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если От = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе	
			Возврат;
		КонецеСли;
	КонецеСли;	
	
	Если Объект.Доставки.Количество() <> 0 Или Объект.Товары.Количество() <> 0 Или Объект.Чеки.Количество() <> 0 Тогда
		От = Вопрос("Табличные части документа не пусты. При заполнении данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если От = КодВозвратаДиалога.Да Тогда
			Объект.Доставки.Очистить();
			Объект.Чеки.Очистить();
			Объект.Товары.Очистить();
			Записать();
		Иначе
			Возврат;
		КонецЕСли;	
	КонецеСли;	
	
	
	//+++ БАО 19.06.2017 №1126
	
	//// Вставить содержимое обработчика.
	//Если (ЗначениеЗаполнено(Объект.ПериодПо) И ЗначениеЗаполнено(Объект.ПериодС)) Или ЗначениеЗаполнено(Объект.Рейс) Или ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//		ЗаполнитьДокументСервер(Объект.Ссылка);
	//		
	//		Записать();
	//		
	//		СписокДоставок.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
	//		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
	//		СписокДоставокПриАктивизацииСтроки(Неопределено);
	//		Элементы.СписокДоставок.Обновить();
	//		Элементы.СписокНоменклатуры.Обновить();
	//		
	//	Иначе
	//		Сообщить("Не установлен ни один критерий отбора!", СтатусСообщения.Важное);
	//		Возврат;
	//КонецеСли;	
	//УстановитьДоступностьРеквизитов(Объект.Доставки.Количество()=0);
	
	//При сканировании Команда <> Неопределено и вопрос мы задаем там
	Если Команда <> Неопределено И ВернутьПечататьЧекНаСервереККМТранспорта(Объект.Рейс) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтветПечататьЧекНаСервереККМ", ЭтотОбъект), "По данному транспорту установлен режим печати чеков в мобильном приложении. Вы уверены, что хотите распечатать чеки сейчас?", РежимДиалогаВопрос.ДаНет);	
	Иначе 
        ДоработатьЗаполнитьДоставкиИТовары();
	КонецЕсли;	
	
	//--- БАО 19.06.2017 №1126
	
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры



//+++ БАО 19.06.2017 №1126
&НаКлиенте
Процедура ДоработатьЗаполнитьДоставкиИТовары()
	
	Если (ЗначениеЗаполнено(Объект.ПериодПо) И ЗначениеЗаполнено(Объект.ПериодС)) Или ЗначениеЗаполнено(Объект.Рейс) Или ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗаполнитьДокументСервер(Объект.Ссылка);
			
			Записать();
			
			СписокДоставок.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
			СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
			СписокДоставокПриАктивизацииСтроки(Неопределено);
			Элементы.СписокДоставок.Обновить();
			Элементы.СписокНоменклатуры.Обновить();
			
		Иначе
			Сообщить("Не установлен ни один критерий отбора!", СтатусСообщения.Важное);
			Возврат;
	КонецеСли;	
	УстановитьДоступностьРеквизитов(Объект.Доставки.Количество()=0);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ВернутьПечататьЧекНаСервереККМТранспорта(Рейс)
	
	//+++ БАО 09.08.2017 №
	//---Возврат Рейс.Транспорт.ПечататьЧекНаСервереККМ;
	Струк = Новый Структура;
	Струк.Вставить("Транспорт", Рейс.Транспорт);
		
	ДополнительныеПараметрыТранспорта = РегистрыСведений.ДополнительныеПараметрыТранспорта.ПолучитьПоследнее(КонецДня(ТекущаяДата()), Струк);
	ПечататьЧекНаСервереККМ = ?(ДополнительныеПараметрыТранспорта.РежимПечатиЧеков = Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ, Истина, Ложь);
	Возврат ПечататьЧекНаСервереККМ;
	
	//--- БАО 09.08.2017 №
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветПечататьЧекНаСервереККМ(РезультатВопроса, КакиетоПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда	
		
		ДоработатьЗаполнитьДоставкиИТовары();
		
	КонецЕсли;

КонецПроцедуры
//--- БАО 19.06.2017 №1126


&НаКлиенте
Процедура УстановитьДоступностьРеквизитов(Дост)
	Элементы.Отбор.Доступность = Дост;
	Элементы.ПериодС.Доступность = Дост;
	Элементы.ПериодПо.Доступность = Дост;
	Элементы.Контрагент.Доступность = Дост;
	Элементы.кнЗаполнить.Доступность = Дост;
	Элементы.кнПериод.Доступность = Дост;
	Элементы.ТипЗаказа.Доступность = Дост;
КонецПроцедуры	


&НаКлиенте
Процедура ВыбратьПериод(Команда)
	Д = Новый ДиалогРедактированияСтандартногоПериода;
	Д.Период.ДатаНачала = Объект.ПериодС;
	Д.Период.ДатаОкончания = Объект.ПериодПо;
	Если Д.Редактировать() Тогда
		Объект.ПериодС = Д.Период.ДатаНачала;
		Объект.ПериодПо = Д.Период.ДатаОкончания;
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыДокумента(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Объект.Проведен Тогда
			От = Вопрос("Документ проведен. Отменить проведение документа?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			Если От = КодВозвратаДиалога.Да Тогда
				Парам = Новый Структура;
				Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
				Записать(Парам);
			Иначе	
				Возврат;
			КонецеСли;
		КонецеСли;
	КонецеСли;	
	
	
	От = Вопрос("Очистить документ?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);	
	Если От = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецеСли;	
	
	УстановитьДоступностьРеквизитов(Истина);
	Объект.Доставки.Очистить();
	Объект.Товары.Очистить();
	Объект.Чеки.Очистить();
	Записать();
	Элементы.СписокНоменклатуры.Обновить();
	Элементы.СписокЧеков.Обновить();
	СписокЧековПослеОбновления();
	Элементы.СписокДоставок.Обновить();
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры

&НаКлиенте
Функция СоздатьОбновитьЧек(СтавкаНДС, Касса, ИскатьЧек, Отв, ЭтоУслуга, Чек, ТаблицаТоваров, НомерСтроки, НоменклатураДоставки, ВидОперации, Кол, Цена, Реал, Секция, ТипОплаты, ЧекОсн = Неопределено, СтавкаНДСФЗ54ПоДоставке = "", КассирНаЧек = "", КодМаркировкиТовара = "")
	Чек = Неопределено;
	ИскатьЧек = Ложь;
	
	
	
	
	если Не ЗначениеЗаполнено(Чек) Тогда
		Если ИскатьЧек Тогда
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	ЧекККМ.Ссылка КАК Д
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ
			|ГДЕ
			|	ЧекККМ.Реализация = &Реализация";
			
			Если ЗначениеЗаполнено(НоменклатураДоставки) Тогда
				Зап.Текст = Зап.Текст + "
				| И ЧекККм.НоменклатураДоставки = &Ном";
				Зап.УстановитьПараметр("Ном", НоменклатураДоставки);
			КонецеСли;	
			Зап.УстановитьПараметр("Реализация", Реал.Ссылка);
			Выб = Зап.Выполнить().Выбрать();
			Если Выб.Следующий() Тогда
				Д_ = Выб.Д;
				Если Д_.ЧекПробитнаККМ тогда
					Чек = Д_.Ссылка;
					Возврат Истина;
				КонецеСли;	
				Д = Д_.ПолучитьОбъект();
			Иначе
				Д = Документы.ЧекККМ.СоздатьДокумент();
			КонецЕсли;	
		Иначе
			Д = Документы.ЧекККМ.СоздатьДокумент();
		КонецеСли;
	Иначе
		Д = Чек.ПолучитьОбъект();
		Если Чек.ЧекПробитнаККМ тогда
			Возврат Истина;
		КонецеСли;	
		
	КонецеСли;
	
	Д.СтавкаНДС = СтавкаНДС;
	
	Д.ТипОплаты = ТипОплаты;
	Д.ВидОперации = ВидОперации;
	Модуль = 1;
	Если Кол < 0 Тогда
		//Д.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
		Д.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
		Модуль = -1;
		Д.ТипКассовогоЧека = Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода;
	Иначе
		Д.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
		Д.ТипКассовогоЧека = Перечисления.ТипыКассовыхЧеков.ЧекПрихода;
	КонецеСли;	
	Д.Ответственный = Отв;
	Д.Дата = Объект.Дата;
	Д.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	Д.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
	//Д.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
	Если ЭтоУслуга Тогда
		Д.Склад = Константы.ОтделУслуг.Получить();
	Иначе
		Д.Склад = Константы.ОтделТоваров.Получить();
	КонецеСли;
	Д.Товары.Очистить();
	д.Оплата.Очистить();
	Д.Секция = Секция;
	Д.ТипЦен = Д.Склад.ТипЦенРозничнойТорговли;
	Если ТаблицаТоваров <> Неопределено Тогда
		Для Каждого Тек Из ТаблицаТоваров Цикл
			Тек.Количество = Тек.НовоеКоличество;
		КонецЦикла;	
		Д.СуммаДокумента = Модуль*ТаблицаТоваров.Итог("Сумма");
		Д.Товары.Загрузить(ТаблицаТоваров);
	Иначе
		Д.СуммаДокумента = Кол*Цена;
		Нов = Д.Товары.Добавить();
		Нов.Коэффициент = 1;
		Нов.Номенклатура = НоменклатураДоставки;
		Нов.Количество = Модуль*Кол;
		Нов.Цена = Цена;
		Нов.Сумма = Нов.Цена*Нов.Количество;
		Нов.ЕдиницаИзмерения = НоменклатураДоставки.ЕдиницаХраненияОстатков;
		Нов.артикул = СокрЛП(НоменклатураДоставки.Артикул);
		Нов.СтавкаНДСФЗ54 = СтавкаНДСФЗ54ПоДоставке;
	КонецеСли;
	
	Ст18 = Справочники.СтавкиНДСФЗ54.НДС18;
	
	Для Каждого Тек Из Д.Товары Цикл
		Если Не ЗначениеЗаполнено(Тек.СтавкаНДСФЗ54) Тогда
			Тек.СтавкаНДСФЗ54 = Ст18;
		КонецеСли;	
	КонецЦикла;	
	
	Нов = Д.Оплата.Добавить();	
	Если ТипОплаты.БезналичнаяОплата Тогда
		Нов.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Терминал;
	ИначеЕсли ТипОплаты = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
		Нов.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
	Иначе	
		Нов.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
	КонецеСли;	
	Нов.Сумма = Д.СуммаДокумента;
	
	Д.Реализация = Реал.Ссылка;
	Д.НоменклатураДоставки = НоменклатураДоставки;
	
	Д.КассаККМ = Касса;
	//Объект.Касса;
	Д.Кассир = КассирНаЧек;
	
	Д.Записать(РежимЗаписиДокумента.Запись); 
	
	////Если ЗначениеЗаполнено(КассирНаЧек) Тогда
	////	Парам = Новый Структура;
	////	Парам.Вставить("Кассир", КассирНаЧек);
	////	lem.ЗафиксироватьДопПараметрыВЧеке(Д.Ссылка, Парам);
	////КонецеСли;
	
	//Струк = Новый Структура;
	//Струк.Вставить("НомерСтроки", НомерСтроки);
	//
	//Най = Объект.ПлатежныеПоручения.НайтиСтроки(Струк);
	//Най[0].ПлатежноеПоручение = Д.Ссылка;
	//Най[0].АктуальностьПП = Истина;
	
	
	Чек = Д.Ссылка;
	
	Возврат Д.Проведен;
КонецФункции

&НаСервере
Функция ОпределитьДоступностьФормыДляРедактирования(Док)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ 
	            |	ПечатьЧековПоДоставкамЧеки.Чек.ЧекПробитНаККМ КАК ЧекПробитНаККМ
	            |ИЗ
	            |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	            |ГДЕ
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка = &Док
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПечатьЧековПоДоставкамЧеки.Чек.ЧекПробитНаККМ";
	Зап.УстановитьПараметр("Док", Док);
	
	Таб = Зап.Выполнить().Выгрузить();
	
	МожноРедактировать = Ложь;
	ЕстьПробитыеЧеки = Ложь;
	ЕстьНеПробитыеЧеки = Ложь;
	Если Таб.Количество() <> 0 Тогда
		Для Каждого Тек Из Таб Цикл
			Если Тек.ЧекПробитНаККМ Тогда
				ЕстьПробитыеЧеки = Истина;
			Иначе
				ЕстьНеПробитыеЧеки = Истина;
			КонецеСли;
		КонецЦикла;
	Иначе
		МожноРедактировать = Истина;
		Возврат МожноРедактировать;
	КонецеСли;	
	
	
	Если ЕстьПробитыеЧеки И ЕстьНеПробитыеЧеки Тогда
		МожноРедактировать = Истина;
	ИначеЕсли ЕстьПробитыеЧеки Тогда
		МожноРедактировать = Ложь;
	ИначеЕсли ЕстьНеПробитыеЧеки Тогда	
		МожноРедактировать = Истина;
	КонецеСли;	
	
	Возврат МожноРедактировать;
КонецФункции

&НаКлиенте
Процедура ДополнитьТаблицуНовымКоличеством(Таб, Стр)
	Таб.Колонки.Добавить("НовоеКоличество");
	Для Каждого Тек Из Таб Цикл
		Струк = Новый Структура;
		Струк.Вставить("Доставка", Стр.Доставка);
		Струк.Вставить("Номенклатура", Тек.Номенклатура);
		Струк.Вставить("КодМаркировки", Тек.КодМаркировки);
		
		Най = Объект.Товары.НайтиСтроки(Струк);
		Если Най.Количество() = 1 Тогда
			Тек.НовоеКоличество = Най[0].НовоеКоличество;
			Тек.Сумма = Окр(Тек.Цена*Тек.НовоеКоличество, 2);
		Иначе
			Тек.НовоеКоличество = Тек.Количество;
			Тек.Сумма = Окр(Тек.Цена*Тек.НовоеКоличество, 2);
		КонецЕСли;	
	КонецЦикла;	
КонецПроцедуры	


Процедура ДополнитьТаблицуВозвратом(Таб, Возвр)
	Если ЗначениеЗаполнено(Возвр) Тогда
		Для Каждого Тек Из Возвр.Товары Цикл
			Нов = таб.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Тек);
			Нов.Количество = - Нов.Количество;
			Нов.НовоеКоличество = - Нов.Количество;
		КонецЦикла;	
	КонецеСли;	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьЧеки(Команда, Фл = Ложь)
	// Вставить содержимое обработчика.
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Табличная часть не заполнена!");
		Возврат;
	КонецеСли;
	ПоискЧековПоДоставкам = Истина;
	Если Не Фл Тогда
		Если Объект.Чеки.Количество() <> 0 Тогда
			От = Вопрос("Список чеков не пустой. При заполнении данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			Если От = КодВозвратаДиалога.Да Тогда
				Объект.Чеки.Очистить();
				Записать();
			Иначе
				Возврат;
			КонецЕСли;	
		КонецеСли;	
	Иначе
		ПоискЧековПоДоставкам = Ложь;
	КонецЕСли;
	
	
	
	Зап2 = Новый Запрос;
	
	Зап2.Текст = "ВЫБРАТЬ
	             |	ПечатьДвойныхЧековСрезПоследних.Контрагент
	             |ИЗ
	             |	РегистрСведений.ПечатьДвойныхЧеков.СрезПоследних(&ДатаЗапроса, ) КАК ПечатьДвойныхЧековСрезПоследних
	             |ГДЕ
	             |	ПечатьДвойныхЧековСрезПоследних.ПечататьДвойныеЧеки = ИСТИНА";
	Зап2.УстановитьПараметр("ДатаЗапроса", КонецДня(Объект.Дата));
	ДвЧ = Зап2.Выполнить().Выгрузить();
	
	ПоискЧековПоДоставкам = Ложь;
	НачатьТранзакцию();
	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПечатьЧековПоДоставкамЧеки.НомерСтроки КАК НомерСтроки,
	            |	ПечатьЧековПоДоставкамЧеки.Доставка КАК Доставка,
	            |	ПечатьЧековПоДоставкамЧеки.Номенклатура КАК Номенклатура,
	            |	ПечатьЧековПоДоставкамЧеки.Чек КАК Чек,
	            |	ПечатьЧековПоДоставкамЧеки.Контрагент КАК Контрагент,
	            |	ПечатьЧековПоДоставкамЧеки.Доставка.Номер КАК НомерЗаказа
	            |ИЗ
	            |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	            |ГДЕ
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка = &Док";
	Зап.УстановитьПараметр("Док", Объект.Ссылка);
	Рез = Зап.Выполнить().Выгрузить();
	
	//ТабСоздаваемыхЧеков = Новый ТаблицаЗначений;
	//ТабСоздаваемыхЧеков.Колонки.добавить();
	СТ18 = Справочники.СтавкиНДСФЗ54.НДС18;
	
	ТС = "Заказ";
	ИнициализироватьФормуХодаОбработки("Создание чеков по заказам", ТС, 0, Объект.Доставки.Количество());
	
	Для Каждого Тек Из Объект.Доставки Цикл
		ТС = "Заказ: " + Тек.Доставка.Номер;
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(ТС, 1);
		Если Не Тек.ПечататьЧеки Тогда
			Продолжить;
        КонецеСли;
        //+++++Серегин М.В. 13.01.2016 18:30:14 
		//Если Объект.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз Тогда 
		//	Если Тек.ТипОплаты = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
		//        Сообщить("По доставке: "+Тек.Доставка+" чеки не созданы."+Символы.ПС+"Запрещено печать чеки по самовыозу оплаченому в магазине."); 
		//        Продолжить;
		//    КонецЕсли;
		//КонецЕсли;
        //-----Серегин М.В. 13.01.2016 18:30:34 
		
		
		Струк = Новый Структура;
		Струк.Вставить("Доставка", Тек.Доставка);
		НайСтр = Объект.Чеки.НайтиСтроки(Струк);
		Если НайСтр.Количество() <> 0 Тогда
			Продолжить;
		КонецеСли;	
		
		ТабТоваров = Неопределено;
		Ч = Неопределено;
		
		
		
		Если Тек.НДС Тогда
			Ст = Объект.СтавкаНДС;
			СекТ = Тек.ТипОплаты.СекцияТоваровНДС;
			//СекУ = Тек.ТипОплаты.СекцияТоваровНДС;

		Иначе
			Ст = Перечисления.СтавкиНДС.ПустаяСсылка();
			СекТ = Тек.ТипОплаты.СекцияТоваров;
		КонецеСли;
		
		ДвойнойЧек = Ложь;
		Если ДвЧ.Найти(Тек.Контрагент) <> Неопределено Тогда
			ДвойнойЧек = Истина;
		КонецеСли;	
		ККМ1 = Тек.ККМ;
		СчетчикДо = 1;
		
		ПервыйТипОплаты = Тек.ТипОплаты;
		Тек.ПечатьДвойныхЧеков = Ложь;
		Если ДвойнойЧек Тогда
			СчетчикДо = 2;
			ПервыйТипОплаты = Тек.ТипОплаты;
			ВторойТипОплаты = Тек.ТипОплаты;
			Если ПервыйТипОплаты = Справочники.ТипыОплат.Наличные Тогда
				ВторойТипОплаты = Справочники.ТипыОплат.Терминал;
				ККМ1 = Тек.Контрагент.ККМНаличнойОплаты;
				ККМ2 = Тек.Контрагент.ККМТерминал;
			ИначеЕсли ПервыйТипОплаты = Справочники.ТипыОплат.Терминал Тогда	
				ВторойТипОплаты = Справочники.ТипыОплат.Наличные;
				ККМ2 = Тек.Контрагент.ККМНаличнойОплаты;
				ККМ1 = Тек.Контрагент.ККМТерминал;				
			КонецеСли;
			Тек.ПечатьДвойныхЧеков = Истина;
		КонецеСли;	
		
		Для Счетчик = 1 По СчетчикДо Цикл
			
			Если Счетчик = 1 Тогда
				ТО = ПервыйТипОплаты;
				ККМ = ККМ1;
			ИначеЕсли Счетчик = 2 Тогда	
				ТО = ВторойТипОплаты;
				ККМ = ККМ2;
			КонецеСли;
			
		Если Тек.ВариантПечатиЧеков = Перечисления.ВариантыПечатиЧеков.ОбщийЧек Тогда 
			ТабТоваров = Тек.Доставка.Товары.Выгрузить();
			ДополнитьТаблицуНовымКоличеством(ТабТоваров, Тек);
			
			// предусмотреть чек на возврат
			Таб = ТабТоваров.Скопировать();
			Таб.Очистить();
			
			ДополнитьТаблицуВозвратом(Таб, Тек.Возврат);
			Если НЕ Тек.ЧекиПоКОплатеКлиентом Тогда //Серегин М.В. 31.08.2015 11:16:16  И НЕ Тек.ЧекиПоКОплатеКлиентом создание чека не для яндекса |||//Тек.СуммаТоваров <> 0 И
                
                Если Тек.ТипОплаты = Справочники.ТипыОплат.ВКредит Тогда
					ТабТоваров.Очистить();
					ИтСум = Тек.СуммаТоваров - Тек.ПредоплатаПоКредиту;
					
					Нов = ТабТоваров.Добавить();
					Нов.Коэффициент = 1;
					Нов.Номенклатура = Константы.НоменклатураКредита.Получить();
					Нов.Количество = 1;
					Нов.НовоеКоличество = 1;
					Нов.Цена = ИтСум;
					Нов.Сумма = ИтСум;
					Нов.ЕдиницаИзмерения = Нов.Номенклатура.ЕдиницаХраненияОстатков;
					Нов.СтавкаНДСФЗ54 = Ст18;
					//Нов.артикул = СокрЛП(Нов.Номенклатура.Артикул);
				ИначеЕсли Тек.ТипОплаты = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
					//Для Каждого ТекТов из ТабТоваров Цикл
					//	ТекТов.Цена = 0;
					//	ТекТов.Сумма = 0;
					//КонецЦикла;	
				КонецЕСли;
				
				//здесь дополняем по ФЗ54
				СоздатьОбновитьЧек(Ст, ККМ, Истина, Объект.Ответственный, Ложь, Ч, ТабТоваров, Тек.НомерСтроки, Неопределено, Перечисления.ВидыОперацийЧекККМ.Продажа, 0, 0, тек.Доставка, СекТ, ТО,,Тек.СтавкаНДСФЗ54ПоДоставке, Тек.КассирНаЧек);
				Нов = Объект.Чеки.Добавить();
				Нов.Доставка = Тек.Доставка;
				Нов.Чек = Ч.Ссылка;
				Нов.ПробитьЧек = Истина;
				Нов.Отдел = Константы.ОтделТоваров.Получить();
				Нов.Контрагент = Тек.Доставка.ВладелецТовара;
                
            ИначеЕсли  Тек.ЧекиПоКОплатеКлиентом И Тек.КОплатеКлиентом >0 Тогда //Серегин М.В. 01.09.2015 11:41:53 создание чека для яндекса по к оплате клиентом
                ТабТоваров.Очистить();
                Нов = ТабТоваров.Добавить();
                Нов.Коэффициент = 1;
                Нов.Номенклатура = Константы.НоменклатураЧекиККМ.Получить();
                Нов.Количество = 1;
                Нов.НовоеКоличество = 1;
                Нов.Цена = Тек.КОплатеКлиентом;
                Нов.Сумма = Тек.КОплатеКлиентом;
                Нов.ЕдиницаИзмерения = Нов.Номенклатура.ЕдиницаХраненияОстатков;
				Нов.СтавкаНДСФЗ54 = Ст18;
                СоздатьОбновитьЧек(Ст, ККМ, Истина, Объект.Ответственный, Ложь, Ч, ТабТоваров, Тек.НомерСтроки, Неопределено, Перечисления.ВидыОперацийЧекККМ.Продажа, 0, 0, тек.Доставка, СекТ, ТО,,,Тек.КассирНаЧек);
                Нов = Объект.Чеки.Добавить();
                Нов.Доставка = Тек.Доставка;
                Нов.Чек = Ч.Ссылка;
                Нов.ПробитьЧек = Истина;
                Нов.Отдел = Константы.ОтделТоваров.Получить();
                Нов.Контрагент = Тек.Доставка.ВладелецТовара;
                //Серегин М.В. 01.09.2015 11:41:56 
			конецеСли;	
			
			Если Тек.СуммаВозврата <> 0 И Тек.СуммаТоваров <> 0 И НЕ Тек.ЧекиПоКОплатеКлиентом  Тогда //Серегин М.В. 26.08.2015 15:58:51  И НЕ Тек.ЧекиПоКОплатеКлиентом 
				СоздатьОбновитьЧек(Ст, ККМ, Истина, Объект.Ответственный, Ложь, Ч, Таб, Тек.НомерСтроки, Неопределено, Перечисления.ВидыОперацийЧекККМ.Возврат, 0, 0, тек.Доставка, СекТ, ТО, Ч,,Тек.КассирНаЧек);
				Нов = Объект.Чеки.Добавить();
				Нов.Доставка = Тек.Доставка;
				Нов.Чек = Ч.Ссылка;
				Нов.ПробитьЧек = Истина;
				Нов.Отдел = Константы.ОтделТоваров.Получить();
				Нов.Контрагент = Тек.Доставка.ВладелецТовара;
			конецеСли;	
			Таб = Неопределено;
			
			Если НЕ Тек.ЧекиПоКОплатеКлиентом Тогда //Серегин М.В. 26.08.2015 15:58:51  И НЕ Тек.ЧекиПоКОплатеКлиентом ////Тек.СуммаУслуг <> 0 И
				Если Тек.ТипОплаты = Справочники.ТипыОплат.ВКредит Тогда
					ТабТоваров.Очистить();
					ИтСум = Мин(Тек.СуммаТоваров + Тек.СуммаУслуг - Тек.ПредоплатаПоКредиту, Тек.СуммаУслуг);
					
					Нов = ТабТоваров.Добавить();
					Нов.Коэффициент = 1;
					Нов.Номенклатура = Константы.НоменклатураКредита.Получить();
					Нов.Количество = 1;
					Нов.НовоеКоличество = 1;
					Нов.Цена = ИтСум;
					Нов.Сумма = ИтСум;
					Нов.ЕдиницаИзмерения = Нов.Номенклатура.ЕдиницаХраненияОстатков;
					Нов.СтавкаНДСФЗ54 = Ст18;
					//Нов.артикул = СокрЛП(Нов.Номенклатура.Артикул);
					СоздатьОбновитьЧек(Ст, ККМ, ПоискЧековПоДоставкам, Объект.Ответственный, Истина, Ч, ТабТоваров, Тек.НомерСтроки, Константы.УслугаДоставки.Получить(), Перечисления.ВидыОперацийЧекККМ.Продажа, 0, 0, тек.Доставка, Тек.ТипОплаты.СекцияУслуг, ТО,,Тек.СтавкаНДСФЗ54ПоДоставке, Тек.КассирНаЧек);
				Иначе
					СоздатьОбновитьЧек(Ст, ККМ, ПоискЧековПоДоставкам, Объект.Ответственный, Истина, Ч, Неопределено, Тек.НомерСтроки, Константы.УслугаДоставки.Получить(), Перечисления.ВидыОперацийЧекККМ.Продажа, 1, Тек.СуммаУслуг, тек.Доставка, Тек.ТипОплаты.СекцияУслуг, ТО, ,Тек.СтавкаНДСФЗ54ПоДоставке, Тек.КассирНаЧек);
				КонецЕСли;
				
				
				
				Нов = Объект.Чеки.Добавить();
				Нов.Доставка = Тек.Доставка;
				Нов.Чек = Ч.Ссылка;
				Нов.ПробитьЧек = Истина;
				Нов.Номенклатура = Константы.УслугаДоставки.Получить();
				Нов.Отдел = Константы.ОтделУслуг.Получить();
				Нов.Контрагент = Тек.Доставка.ВладелецТовара;
			конецеСли;
			
			
			ТабТоваров = Неопределено;

		ИначеЕсли Тек.ВариантПечатиЧеков = Перечисления.ВариантыПечатиЧеков.ЧекиПоПозициям Тогда     //здесь дополняем по ФЗ54
			ТабТоваров = Тек.Доставка.Товары.Выгрузить();
			ДополнитьТаблицуНовымКоличеством(ТабТоваров, Тек);
			ДополнитьТаблицуВозвратом(ТабТоваров, Тек.Возврат);
			Для Каждого ТТ Из ТабТоваров Цикл
				//если ТТ.Сумма = 0 Тогда
				//	Продолжить;
				//конецеСли;	
				СоздатьОбновитьЧек(Ст, ККМ, Истина, Объект.Ответственный, Ложь, Ч, Неопределено, Тек.НомерСтроки, ТТ.Номенклатура, Перечисления.ВидыОперацийЧекККМ.Продажа, ТТ.НовоеКоличество, ТТ.Цена, тек.Доставка, СекТ, ТО, Ч, ,Тек.КассирНаЧек);
				Нов = Объект.Чеки.Добавить();
				Нов.Доставка = Тек.Доставка;
				Нов.Номенклатура = ТТ.Номенклатура;
				Нов.Чек = Ч.Ссылка;
				Нов.ПробитьЧек = Истина;
				Нов.Отдел = Константы.ОтделТоваров.Получить();
				Нов.Контрагент = Тек.Доставка.ВладелецТовара;
			конецЦикла;	
			Если Тек.СуммаУслуг <> 0 Тогда
				СоздатьОбновитьЧек(Ст, ККМ, ПоискЧековПоДоставкам, Объект.Ответственный, Истина, Ч, Неопределено, Тек.НомерСтроки, Константы.УслугаДоставки.Получить(), Перечисления.ВидыОперацийЧекККМ.Продажа, 1, Тек.СуммаУслуг, тек.Доставка, Тек.ТипОплаты.СекцияУслуг, ТО,,Тек.СтавкаНДСФЗ54ПоДоставке, Тек.КассирНаЧек);
				Нов = Объект.Чеки.Добавить();
				Нов.Доставка = Тек.Доставка;
				Нов.Номенклатура = Константы.УслугаДоставки.Получить();
				Нов.Чек = Ч.Ссылка;
				Нов.ПробитьЧек = Истина;
				Нов.Отдел = Константы.ОтделУслуг.Получить();
				Нов.Контрагент = Тек.Доставка.ВладелецТовара;				
			конецеСли;
		ИначеЕсли Тек.ВариантПечатиЧеков = Перечисления.ВариантыПечатиЧеков.ЧекиПоТоварам Тогда   //здесь дополняем по ФЗ54
			ТабТоваров = Тек.Доставка.Товары.Выгрузить();
			ДополнитьТаблицуНовымКоличеством(ТабТоваров, Тек);
			ДополнитьТаблицуВозвратом(ТабТоваров, Тек.Возврат);
			Для Каждого ТТ Из ТабТоваров Цикл
				//если ТТ.Сумма = 0 Тогда
				//	Продолжить;
				//конецеСли;
				Если ТТ.НовоеКоличество < 0 Тогда
					МодульКол = - ТТ.НовоеКоличество;
					Кол = - 1;
				Иначе
					МодульКол = ТТ.НовоеКоличество;
					Кол = 1;
				КонецеСли;
				
				Для Сч = 1 По МодульКол Цикл
					СоздатьОбновитьЧек(Ст, ККМ, Ложь, Объект.Ответственный, Ложь, Ч, Неопределено, Тек.НомерСтроки, ТТ.Номенклатура, Перечисления.ВидыОперацийЧекККМ.Продажа, Кол, ТТ.Цена, тек.Доставка, СекТ, ТО, Ч, ,Тек.КассирНаЧек);
					Нов = Объект.Чеки.Добавить();
					Нов.Доставка = Тек.Доставка;
					Нов.Номенклатура = ТТ.Номенклатура;
					Нов.Чек = Ч.Ссылка;
					Нов.ПробитьЧек = Истина;
					Нов.Отдел = Константы.ОтделТоваров.Получить();
					Нов.Контрагент = Тек.Доставка.ВладелецТовара;
				КонецЦикла;	
			конецЦикла;	
			Если Тек.СуммаУслуг <> 0 Тогда
				СоздатьОбновитьЧек(Ст, ККМ, ПоискЧековПоДоставкам, Объект.Ответственный, Истина, Ч, Неопределено, Тек.НомерСтроки, Константы.УслугаДоставки.Получить(), Перечисления.ВидыОперацийЧекККМ.Продажа, 1, Тек.СуммаУслуг, тек.Доставка, Тек.ТипОплаты.СекцияУслуг, ТО,,Тек.СтавкаНДСФЗ54ПоДоставке, Тек.КассирНаЧек);
				Нов = Объект.Чеки.Добавить();
				Нов.Доставка = Тек.Доставка;
				Нов.Номенклатура = Константы.УслугаДоставки.Получить();
				Нов.Чек = Ч.Ссылка;
				Нов.ПробитьЧек = Истина;
				Нов.Отдел = Константы.ОтделУслуг.Получить();
				Нов.Контрагент = Тек.Доставка.ВладелецТовара;				
			конецеСли;	
		ИначеЕсли Тек.ВариантПечатиЧеков = Перечисления.ВариантыПечатиЧеков.ЧекиПоКратностиКоличества Тогда
			ТабТоваров = Тек.Доставка.Товары.Выгрузить();
			ДополнитьТаблицуНовымКоличеством(ТабТоваров, Тек);
			ДополнитьТаблицуВозвратом(ТабТоваров, Тек.Возврат);
			Для Каждого ТТ Из ТабТоваров Цикл
				//если ТТ.Сумма = 0 Тогда
				//	Продолжить;
				//конецеСли;
				Если ТТ.НовоеКоличество < 0 Тогда
					МодульКол = - ТТ.НовоеКоличество;
					Кол = - 1;
				Иначе
					МодульКол = ТТ.НовоеКоличество;
					Кол = 1;
				КонецеСли;
				
				Кратность = Тек.КратностьЧеков;
				КолПолныхЦиклов = Цел(МодульКол/Кратность);
				ОстПозиции = МодульКол - КолПолныхЦиклов*Кратность;
				
				Для Сч = 1 По КолПолныхЦиклов Цикл
					СоздатьОбновитьЧек(Ст, ККМ, Ложь, Объект.Ответственный, Ложь, Ч, Неопределено, Тек.НомерСтроки, ТТ.Номенклатура, Перечисления.ВидыОперацийЧекККМ.Продажа, Кратность, ТТ.Цена, тек.Доставка, СекТ, ТО, Ч,ТТ.СтавкаНДСФЗ54,Тек.КассирНаЧек);
					Нов = Объект.Чеки.Добавить();
					Нов.Доставка = Тек.Доставка;
					Нов.Номенклатура = ТТ.Номенклатура;
					Нов.Чек = Ч.Ссылка;
					Нов.ПробитьЧек = Истина;
					Нов.Отдел = Константы.ОтделТоваров.Получить();
					Нов.Контрагент = Тек.Доставка.ВладелецТовара;
				КонецЦикла;	
				
				Для Сч = 1 По ОстПозиции Цикл
					СоздатьОбновитьЧек(Ст, ККМ, Ложь, Объект.Ответственный, Ложь, Ч, Неопределено, Тек.НомерСтроки, ТТ.Номенклатура, Перечисления.ВидыОперацийЧекККМ.Продажа, 1, ТТ.Цена, тек.Доставка, СекТ, ТО, Ч,ТТ.СтавкаНДСФЗ54,Тек.КассирНаЧек);
					Нов = Объект.Чеки.Добавить();
					Нов.Доставка = Тек.Доставка;
					Нов.Номенклатура = ТТ.Номенклатура;
					Нов.Чек = Ч.Ссылка;
					Нов.ПробитьЧек = Истина;
					Нов.Отдел = Константы.ОтделТоваров.Получить();
					Нов.Контрагент = Тек.Доставка.ВладелецТовара;
				КонецЦикла;	
			конецЦикла;	
			Если Тек.СуммаУслуг <> 0 Тогда
				СоздатьОбновитьЧек(Ст, ККМ, ПоискЧековПоДоставкам, Объект.Ответственный, Истина, Ч, Неопределено, Тек.НомерСтроки, Константы.УслугаДоставки.Получить(), Перечисления.ВидыОперацийЧекККМ.Продажа, 1, Тек.СуммаУслуг, тек.Доставка, Тек.ТипОплаты.СекцияУслуг, ТО,,Тек.СтавкаНДСФЗ54ПоДоставке, Тек.КассирНаЧек);
				Нов = Объект.Чеки.Добавить();
				Нов.Доставка = Тек.Доставка;
				Нов.Номенклатура = Константы.УслугаДоставки.Получить();
				Нов.Чек = Ч.Ссылка;
				Нов.ПробитьЧек = Истина;
				Нов.Отдел = Константы.ОтделУслуг.Получить();
				Нов.Контрагент = Тек.Доставка.ВладелецТовара;				
			конецеСли;						
		КонецеСли;
		
		//чек возврат Прихода ФЗ 54 - по всем варианатам печати обычного чека - один вариант печати чека возврат прихода
		Если Тек.СуммаВозврата <> 0 Тогда 
			Таб = Тек.Возврат.Товары.Выгрузить();
			Таб.Колонки.Добавить("НовоеКоличество");
			Для Каждого ТекТовВ Из Таб Цикл
				ТекТовВ.НовоеКоличество = ТекТовВ.Количество;
			КонецЦикла;	
			
			СоздатьОбновитьЧек(Ст, ККМ, Истина, Объект.Ответственный, Ложь, Ч, Таб, Тек.НомерСтроки, Неопределено, Перечисления.ВидыОперацийЧекККМ.Продажа, -1, 0, тек.Доставка, СекТ, ТО,,Тек.СтавкаНДСФЗ54ПоДоставке, Тек.КассирНаЧек);
			Нов = Объект.Чеки.Добавить();
			Нов.Доставка = Тек.Доставка;
			Нов.Чек = Ч.Ссылка;
			Нов.ПробитьЧек = Истина;
			Нов.Отдел = Константы.ОтделТоваров.Получить();
			Нов.Контрагент = Тек.Доставка.ВладелецТовара;
		КонецеСли;
		//чек возврат Прихода ФЗ 54 - по всем варианатам печати обычного чека - один вариант печати чека возврат прихода

		
		КонецЦикла;
	КонецЦикла;	
	ЗакрытьФормуОбработкиДанных();
	Записать();
	СписокЧеков.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
	СписокДоставокПриАктивизацииСтроки(Неопределено);
	Элементы.СписокЧеков.Обновить();
	СписокЧековПослеОбновления();
	
	ЗафиксироватьТранзакцию();
	//Прочитать();
	//ТолькоПросмотр = Не ОпределитьДоступностьФормыДляРедактирования(Объект.Ссылка);
	Фл = Ложь;
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧеки(Команда, ТекДоставка = Неопределено)
	// Вставить содержимое обработчика.
	Если ТекДоставка = Неопределено Тогда
		ТекДоставка = Элементы.СписокДоставок.ТекущиеДанные;
	КонецеСли;	
	Если ТекДоставка = Неопределено Тогда
		Возврат;
	КонецеСли;	
	
	Д = ТекДоставка.Доставка;
    
    ////+++++Серегин М.В. 13.01.2016 18:22:57
    //Если ТекДоставка.СписокДоставокТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз Тогда 
    //    Если ТекДоставка = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
    //        Сообщить("Запрещено печать чеки по самовыозу оплаченому в магазине.");
    //        Возврат;
    //    КонецЕсли;
    //КонецЕсли;
    ////-----Серегин М.В. 13.01.2016 18:22:59 
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПечатьЧековПоДоставкамЧеки.Чек КАК Чек,
	            |	ПечатьЧековПоДоставкамЧеки.Чек.КассаККМ КАК ККМ,
	            |	ПечатьЧековПоДоставкамЧеки.Чек.КассаККМ.ККМИнтегрированаВСерверККМ КАК ККМИнтегрированаВСерверККМ,
	            |	ПечатьЧековПоДоставкамЧеки.Чек.КассаККМ.Терминал.СерверККМ КАК СерверККМ,
	            |	ПечатьЧековПоДоставкамЧеки.Чек.КассаККМ.ВерсияПлатформыATOL КАК ВерсияПлатформыATOL
	            |ИЗ
	            |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	            |ГДЕ
	            |	ПечатьЧековПоДоставкамЧеки.Чек.ЧекПробитНаККМ = ЛОЖЬ
	            |	И ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка = &Док
	            |	И ПечатьЧековПоДоставкамЧеки.ПробитьЧек = ИСТИНА
	            |	И ПечатьЧековПоДоставкамЧеки.Доставка.Ссылка = &Дост
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ПечатьЧековПоДоставкамЧеки.Чек.Номер";
	Зап.УстановитьПараметр("Док", Объект.Ссылка);
	Зап.УстановитьПараметр("Дост", Д.Ссылка);
	
	Выб = Зап.Выполнить().Выгрузить();
	
	ТабККМ = Выб.Скопировать();
	ТабККМ.Колонки.Добавить("Кол");
	ТабККМ.Колонки.Добавить("СерверККТ");
	
	Для Каждого Тек Из ТабККМ ЦИкл
		Тек.Кол = 1;
	КонецЦикла;	
	
	ТабККМ.Свернуть("ККМ, ККМИнтегрированаВСерверККМ, СерверККМ, СерверККТ, ВерсияПлатформыATOL", "Кол");
	
	Для Каждого Тек Из ТабККМ Цикл
		Если Тек.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			Ответ = РаботаСКассовымСерверомСервер.ЗахватитьККМНаСервереККМ(Тек.ККМ, Тек.СерверККМ, Объект.Ссылка);
			Если Не Ответ.Результат Тогда
				Сообщить("ККМ " + Строка(Тек.ККМ) + " не может быть захвачена для печати чеков! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		//Тек.СерверККТ = ККМ_ФЗ_54.ПодключитьсяКККМ(Тек.ККМ);
		Если Тек.ВерсияПлатформыATOL = Перечисления.ВерсииПлатформыATOL.Версия_5_0 Тогда
			//Тек.СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(Тек.ККМ);
		Иначе	
			Тек.СерверККТ = ККМ_ФЗ_54.ИнициализироватьСерверККТ();
			ККМ_ФЗ_54.ДобавитьУстройствоATOL(Тек.СерверККТ, Тек.ККМ);
		КонецеСли;	
	КонецЦикла;	
	
	Для Каждого Тек Из Выб Цикл
		Чек = Тек.Чек.ПолучитьОбъект();
		Если Не Тек.ККМИнтегрированаВСерверККМ Тогда
			ФормаДокумента = Чек.ПолучитьФорму("ФормаДокумента");
			ФормаДокумента.Открыть();
		КонецеСли;	
		Ответ = "";
		Отказ = Ложь;
		
		Най = ТабККМ.Найти(Тек.ККМ);
		
		Если Тек.ВерсияПлатформыATOL = Перечисления.ВерсииПлатформыATOL.Версия_5_0 Тогда
			Чек.ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента);
		Иначе	
			Если Най <> Неопределено Тогда
				Чек.ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента,, Най.СерверККТ, 1);
			иначе	
				Чек.ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента);
			КонецеСли;
		Конецесли;
		
		//Чек.Записать(РежимЗаписиДокумента.Запись); оптимизация НГ
		Если Не Тек.ККМИнтегрированаВСерверККМ Тогда
			ФормаДокумента.Закрыть();
		КонецеСли;	
		Если Отказ Тогда
			Сообщить("Чек № " + СокрЛП(Чек.Номер) + ", ошибка пробития: " + Ответ, СтатусСообщения.Важное);
		КонецеСли;	
	КонецЦикла;
	
	Для Каждого Тек Из ТабККМ Цикл
		Если Тек.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			Ответ = РаботаСКассовымСерверомСервер.ОтпуститьККМНаСервереККМ(Тек.ККМ, Тек.СерверККМ, Объект.Ссылка);
			Если Не Ответ.Результат Тогда
				Сообщить("ККМ " + Строка(Тек.ККМ) + " не может быть освобождена на сервере ККМ! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
			КонецЕсли;			
		КонецЕсли;	
		//ККМ_ФЗ_54.ОтключитьсяОтККМ(Тек.СерверККТ, 1);
		Тек.СерверККТ = "";
	КонецЦикла;	
	
	
	Струк = Новый Структура;
	Струк.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(Струк);
	Элементы.СписокЧеков.Обновить();
	СписокЧековПослеОбновления();
	Элементы.СписокНоменклатуры.Обновить();
	Элементы.СписокДоставок.Обновить();	
	ТолькоПросмотр = Не ОпределитьДоступностьФормыДляРедактирования(Объект.Ссылка);
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиСЧеков(Команда)
	Для Каждого Тек Из Объект.Чеки Цикл
		Если Тек.Доставка = Элементы.СписокДоставок.ТекущиеДанные.Доставка Тогда
			Тек.ПробитьЧек = Ложь;
		КонецеСли;	
	КонецЦикла;	
	Записать();
	Элементы.СписокЧеков.Обновить();
	СписокЧековПослеОбновления();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиНаЧеки(Команда)
	Для Каждого Тек Из Объект.Чеки Цикл
		Если Тек.Доставка = Элементы.СписокДоставок.ТекущиеДанные.Доставка Тогда
			Тек.ПробитьЧек = Истина;
		КонецеСли;	
	КонецЦикла;	
	Записать();
	Элементы.СписокЧеков.Обновить();
	СписокЧековПослеОбновления();
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьПометкиНаЧеки(Команда)
	Для Каждого Тек Из Объект.Чеки Цикл
		Если Тек.Доставка = Элементы.СписокДоставок.ТекущиеДанные.Доставка Тогда
			Тек.ПробитьЧек = Не Тек.ПробитьЧек;
		КонецЕСли;	
	КонецЦикла;	
	Записать();
	Элементы.СписокЧеков.Обновить();
	СписокЧековПослеОбновления();
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры

&НаКлиенте
Процедура СписокЧековВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокЧековПробитьЧек" Тогда
		Струк = Новый Структура;
		Струк.Вставить("Чек", Элементы.СписокЧеков.ТекущиеДанные.Чек);
		Най = Объект.Чеки.НайтиСтроки(Струк);
		Если Най.Количество() = 1 Тогда
			Най[0].ПробитьЧек = Не Най[0].ПробитьЧек;
		КонецеСли;	
		Записать();
		Элементы.СписокЧеков.Обновить();
		СписокЧековПослеОбновления();
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()
&НаКлиенте
// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	//ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	//												Серия, Качество, Единица,
	//												Количество, ВалютаДокумента,
	//												Неопределено, мУказаниеСкладовВТЧ,
	//												ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	//Если      ИмяТекСтраницы = "Товары" Тогда
	//	ОбработкаПодбора(Товары, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
	//	ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
	//	ОбработкаПодбора(Услуги, СтруктураПодбора);
	//Иначе
	//	Предупреждение("На странице """
	//				   + ИмяТекСтраницы
	//				   + """ подбор номенклатуры не предусмотрен.");
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	//ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	//												Неопределено, Неопределено,
	//												Неопределено, 1,
	//												ВалютаДокумента, Номер,
	//												мУказаниеСкладовВТЧ,
	//												ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	//Если      ИмяТекСтраницы = "Товары" Тогда
	//	ОбработкаПодбора(Товары, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
	//	ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
	//	ОбработкаПодбора(Услуги, СтруктураПодбора);
	//Иначе
	//	Предупреждение("На странице """
	//				   + ИмяТекСтраницы
	//				   + """ подбор номенклатуры не предусмотрен.");
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()
&НаКлиенте

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	//Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
	//	Возврат Результат;
	//КонецЕсли;

	//ДисконтнаяКарта = Карта;
	//ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()
&НаКлиенте
// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()
&НаКлиенте
Функция СШКРейс(ВыбР) Экспорт
	Если ЗначениеЗаполнено(ВыбР) Тогда
		Объект.Рейс = ВыбР.Ссылка;
		ЗаполнитьДоставкиИТовары(Неопределено);
	Иначе
		Возврат Ложь;
	КонецеСли;	
	Возврат Истина;
КонецФункции	
&НаКлиенте
// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

&НаКлиенте
Функция СШКЗаказы(Стр) Экспорт
	ДобавитьСтрокуСамовывоза(Стр.Реализация);
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ДобавитьСтрокуСамовывоза(Самовывоз) Экспорт
	Если Объект.ТипЗаказа <> Перечисления.ТипыЗаказов.Самовывоз Тогда
		Возврат Ложь;
	КонецеСли;	
	Если Не Самовывоз.ВладелецТовара.ПечататьЧеки Тогда
		Если ЗначениеЗаполнено(Самовывоз.ВладелецТовара.Родитель.ОсновнойМагазин) Тогда
			если Не Самовывоз.ВладелецТовара.Родитель.ОсновнойМагазин.ПечататьЧеки Тогда
				Сообщить("Не печатаем чеки!");
				Возврат Ложь;
			КонецеСли;
		Иначе	
			Сообщить("Не печатаем чеки!");
			Возврат Ложь;
		КонецеСли;
	КонецЕСли;	
	Зап = Новый Запрос;
	зап.Текст = "ВЫБРАТЬ
	            |	ПечатьЧековПоДоставкамДоставки.Ссылка.Ссылка КАК Док
	            |ИЗ
	            |	Документ.ПечатьЧековПоДоставкам.Доставки КАК ПечатьЧековПоДоставкамДоставки
	            |ГДЕ
	            |	Выразить(ПечатьЧековПоДоставкамДоставки.Доставка Как Документ.РеализацияТоваровУслуг).Ссылка = &Дост
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПечатьЧековПоДоставкамДоставки.Ссылка.Ссылка";
				//|	И ПечатьЧековПоДоставкамДоставки.Ссылка.Ссылка = &Док";
				
	Зап.УстановитьПараметр("Дост", Самовывоз.Ссылка);
	//Зап.УстановитьПараметр("Док", Объект.Ссылка);
	Рез = Зап.Выполнить();
	//Если Рез.Пустой() Тогда
		Записать();
		Нов = Объект.Доставки.Добавить();
		Нов.Доставка = Самовывоз.Ссылка;
		Нов.СуммаТоваров = Самовывоз.Товары.Итог("Сумма");
		
		Нов.Контрагент = Самовывоз.ВладелецТовара;
		Нов.ПечататьЧеки = Самовывоз.ВладелецТовара.ПечататьЧеки;
		
		Связка = Неопределено;
		ТипОплатыПоискаККМ = Справочники.ТипыОплат.НайтиПоКоду(Самовывоз.ТипОплаты);
		Если ТипОплатыПоискаККМ = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
			ТипОплатыПоискаККМ = Справочники.ТипыОплат.Наличные;
		КонецеСли;
		
		Нов.ККМ = lem.ПолучитьККМИзСвязкиККМ(Нов.Контрагент, ТипОплатыПоискаККМ, Связка);
		Нов.СвязкаККМ = Связка;
		Если Нов.ККМ.Пустая() Тогда
			Если Самовывоз.ТипОплаты = 1 Или Самовывоз.ТипОплаты = 2 Или Самовывоз.ТипОплаты = 7 Тогда
				Нов.ККМ = Самовывоз.ВладелецТовара.КкмНаличнойОплаты;
			Иначе
				Нов.ККМ = Самовывоз.ВладелецТовара.ККМТерминал;
			КонецеСли;
		КонецеСли;
		
		
		Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Самовывоз.Номер);
		Если ЗначениеЗаполнено(Дост) Тогда
			Нов.СуммаУслуг = Дост.СтоимостьДоставкиДоМКАД + Дост.СтоимостьДоставкиЗаМКАД;
		КонецЕсли;
		
		Если Нов.СуммаУслуг = 0 Тогда
			Нов.СуммаУслуг = Самовывоз.Услуги.итог("Сумма");
		КонецЕсли;
		
		
		
		Если Не ЗначениеЗаполнено(Нов.Ккм) Тогда
			Нов.ПечататьЧеки = Ложь;
			Сообщить("Не определена ККМ!", СтатусСообщения.ОченьВажное);
		КонецеСли;	
		//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяКассаККМ");
        //Серегин М.В. 26.08.2015 14:32:53 
        КОплатеКлиентом = ПолучитьКОплатеКлиентом(Самовывоз);
        Нов.КОплатеКлиентом = КОплатеКлиентом;
        Если Самовывоз.УчитыватьИтогоКОплате И Самовывоз.ЗапретЧастичногоВыкупа Тогда//+++++Серегин М.В. 18.02.2016 11:55:36 было Самовывоз.ВладелецТовара = Константы.КонтрагентЯндекс.Получить() Тогда
            Нов.ВариантПечатиЧеков = Перечисления.ВариантыПечатиЧеков.ОбщийЧек;
            Нов.ЧекиПоКОплатеКлиентом = Истина;
        //Серегин М.В. 26.08.2015 14:38:55
        Иначе
            Если ЗначениеЗаполнено(Нов.Контрагент.ВариантПечатиЧеков) Тогда
                Нов.ВариантПечатиЧеков = Нов.Контрагент.ВариантПечатиЧеков;
            Иначе
                Нов.ВариантПечатиЧеков = Перечисления.ВариантыПечатиЧеков.ЧекиПоПозициям;
            КонецеСли;	
        КонецЕсли;
		Нов.кратностьчеков = Самовывоз.ВладелецТовара.КратностьПозицийПечатьЧеков;
		Нов.РазрешитьРедактированиеКоличества = Самовывоз.ВладелецТовара.РазрешитьРедактированиеКоличестваВПечатиЧеков;
		
		Нов.ТипЗаказа = Объект.ТипЗаказа;
		ДВ = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Самовывоз.Номер, Самовывоз.Дата);
		Нов.Возврат = ДВ.Ссылка;
		Если ЗначениеЗаполнено(Нов.Возврат) Тогда
			Нов.СуммаВозврата = Нов.Возврат.Товары.Итог("Сумма");
		КонецЕсли;	
		ТО = Справочники.ТипыОплат.НайтиПоКоду(Самовывоз.ТипОплаты);
		Нов.ТипОплаты = ТО.Ссылка;
		Нов.НДС = Самовывоз.ВладелецТовара.ПлательщикНДС;
		Нов.ПредоплатаПоКредиту = Самовывоз.ПредоплатаПоКредиту;
		Если Нов.ТипОплаты = Справочники.ТипыОплат.ВКредит И Нов.ПредоплатаПоКредиту > 0 Тогда
			Нов.ВариантПечатиЧеков = Перечисления.ВариантыПечатиЧеков.ОбщийЧек;
		КонецеСли;	
		
		Если Нов.ТипОплаты = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
			Нов.СуммаПредоплаты = Нов.СуммаУслуг + Нов.СуммаТоваров - Нов.СуммаВозврата;
			//Нов.СуммаУслуг = 0;
			//Нов.СуммаТоваров = 0;
			//Нов.СуммаВозврата = 0;
		КонецеСли;	
		
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Нов.Доставка);
		Нов.СтавкаНДСФЗ54ПоДоставке = РегистрыСведений.ДополнительныеПараметрыЗаказа.Получить(Струк).СтавкаНДСФЗПоДоставке;
		
		
		Струк = Новый Структура;
		Струк.Вставить("Контрагент", Нов.Контрагент);
		Струк.Вставить("ТипДоставки", Нов.ТипЗаказа);
		Струк.Вставить("ТипОплаты", Нов.ТипОплаты);
		
		Срез = РегистрыСведений.ЮридическоеЛицоПоДоставкеКонтрагента.ПолучитьПоследнее(Нов.Доставка.Дата, Струк);
		Нов.ЮрЛицо = Срез.Организация;
		Нов.Спецсчет = Срез.Спецсчет;
		
		
		//ЗапПоКассирамККМ = Новый Запрос;
		//ЗапПоКассирамККМ.Текст = "ВЫБРАТЬ
		//|	СостояниеСменККМСрезПоследних.Кассир КАК Кассир,
		//|	СостояниеСменККМСрезПоследних.ККМ КАК ККМ
		//|ИЗ
		//|	РегистрСведений.СостояниеСменККМ.СрезПоследних(&ДатаЗапроса, ) КАК СостояниеСменККМСрезПоследних
		//|ГДЕ
		//|	СостояниеСменККМСрезПоследних.СостояниеСмены = ЗНАЧЕНИЕ(Перечисление.состояниесменккм.сменаоткрыта)";
		//ЗапПоКассирамККМ.УстановитьПараметр("ДатаЗапроса", КонецДня(Объект.Дата));
		//ТабККМСКассирами = ЗапПоКассирамККМ.Выполнить().Выгрузить();
		
		Если ЗначениеЗаполнено(Нов.Контрагент.Родитель.ОсновнойМагазин) Тогда
			Нов.ПечататьЧеки = Нов.Контрагент.Родитель.ОсновнойМагазин.ПечататьЧеки;
			Нов.КратностьЧеков = Нов.Контрагент.Родитель.ОсновнойМагазин.КратностьПозицийПечатьЧеков;
			Если Нов.КратностьЧеков = 0 Тогда
				Нов.КратностьЧеков = 10;
			КонецЕсли;	
			
			ТипОплатыПоискаККМ = Нов.ТипОплаты;
			Если ТипОплатыПоискаККМ = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
				ТипОплатыПоискаККМ = Справочники.ТипыОплат.Наличные;
			КонецеСли;
			
			
			Нов.ККМ = lem.ПолучитьККМИзСвязкиККМ(Нов.Контрагент.Родитель.ОсновнойМагазин, ТипОплатыПоискаККМ);
			Если Нов.ККМ.Пустая() Тогда
				Если Нов.ТипОплаты = Справочники.ТипыОплат.Наличные Или Нов.ТипОплаты = Справочники.ТипыОплат.Наличные Тогда
					Нов.ККМ = Нов.Контрагент.Родитель.ОсновнойМагазин.ККМНаличнойОплаты;
				Иначе
					Нов.ККМ = Нов.Контрагент.Родитель.ОсновнойМагазин.ККМТерминал;
				КонецеСли;
			КонецеСли;
		
			Нов.НДС = Нов.Контрагент.Родитель.ОсновнойМагазин.ПлательщикНДС;   
			Нов.РазрешитьРедактированиеКоличества = Нов.Контрагент.Родитель.ОсновнойМагазин.РазрешитьРедактированиеКоличестваВПечатиЧеков;
			
			Струк = Новый Структура;
			Струк.Вставить("Контрагент", Нов.Контрагент.Родитель.ОсновнойМагазин.Ссылка);
			Струк.Вставить("ТипОплаты", Нов.ТипОплаты.Ссылка);
			
			Най = РегистрыСведений.ЮридическоеЛицоПоДоставкеКонтрагента.ПолучитьПоследнее(КонецДня(Объект.Дата), Струк);
			
			Нов.Юрлицо = Най.Организация;
			Нов.Спецсчет = Най.Спецсчет;
			
			//Если ЗначениеЗаполнено(Нов.ККМ) Тогда
			//	НайКассир = ТабККМСКассирами.Найти(Нов.ККМ);
			//	Если НайКассир <> Неопределено Тогда
			//		Нов.КассирНаЧек = НайКассир.Кассир;
			//	КонецеСли;	
			//КонецеСли;	
			
			Если ЗначениеЗаполнено(Нов.ККМ) Тогда
				//НайКассир = ТабККМСКассирами.Найти(Тек.ККМ);
				//Если НайКассир <> Неопределено Тогда
				//попытка
				Нов.КассирНаЧек = УчетКассировСервер.ПолучитьКассира(Нов.ЮрЛицо,Нов.ККМ); 
			//исключение
			//	
			//	конецпопытки;
				//НайКассир.Кассир;
				//КонецеСли;	
			КонецеСли;	
			
		КонецеСли;	
		
		
		Для Каждого Тек Из Самовывоз.Товары Цикл
			Нов2 = Объект.Товары.Добавить();
			Нов2.Доставка = Самовывоз.Ссылка;
			Нов2.Номенклатура = Тек.Номенклатура;
			Нов2.Количество = Тек.Количество;
			Нов2.Цена = Тек.Цена;
			Нов2.Сумма = Тек.Сумма;
			Нов2.НовоеКоличество = Нов2.Количество;
			Нов2.СуммаНовая = Тек.Сумма;
			Нов2.КодМаркировки = Тек.КодМаркировки;
		КонецЦикла;	
		Струк = Новый Структура;
		Струк.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Записать(Струк);
		
		СписокДоставок.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Док", Объект.Ссылка);
		
		Элементы.СписокДоставок.Обновить();
		Элементы.СписокНоменклатуры.Обновить();
		
		//Элементы.СписокДоставок.ТекущаяСтрока
		//СписокДоставокПриАктивизацииСтроки(Неопределено);
		
		Фл = истина;
		СоздатьЧеки(Неопределено, Истина);
		От = Вопрос("Пробить чек?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Если От = КодВозвратаДиалога.Да Тогда
			//Струк = Новый Структура;
			//Струк.Вставить("Доставка", Нов.Доставка);
			//НайСтр = Объект.Чеки.НайтиСтроки(НайСТр);
			//
			//Для Сч = 0 По НайСтр.Количество() - 1 Цикл
			//	
			//КонецЦикла;	
			ПробитьЧеки(Неопределено, Нов);
		КонецЕСли;
		
	//CeHbKA
	Нов.ЮрЛицо = Нов.Доставка.ВладелецТовара.ОсновнойДоговорКонтрагента.Организация;
	
	//Иначе
	//	Выб = Рез.Выбрать();
	//	Если Выб.Следующий() Тогда
	//		Сообщить("данная доставка уже вбита в пробитии чеков № " + СокрЛП(Выб.Док.Номер) + "!", СтатусСообщения.ОченьВажное);
	//	КонецЕСли;	
	//КонецеСли;
	Возврат Истина;
КонецФункции


&НаКлиенте
Процедура ЧекПробитОшибочно(Команда)
	// Вставить содержимое обработчика.
	Струк = Новый Структура;
	Струк.Вставить("Чек", Элементы.СписокЧеков.ТекущиеДанные.Чек);
	Най = Объект.Чеки.НайтиСтроки(Струк);
	Если Най.Количество() = 1 Тогда
		Если Най[0].ЧекПробитОшибочно И ПараметрыСеанса.ПрименяетсяФЗ54 Тогда
			Сообщить("Нельзя снять признак ""Чек пробит ошибочно""!!");
			Возврат;
		КонецеСли;	
		
		Най[0].ЧекПробитОшибочно = Не Най[0].ЧекПробитОшибочно;
		ВЧ = СоздатьЧекВозвратПриходаПоФЗ54(Струк.Чек);
		Если ВЧ <> Неопределено Тогда
			Най[0].ЧекВозвратаПрихода = ВЧ.Ссылка;
			ПробитьЧекВозвратПриходаПоФЗ54(ВЧ.Ссылка);
			
		КонецеСли;	
		Записать();
		Элементы.СписокЧеков.Обновить();
	КонецеСли;
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры


&НаКлиенте
Функция СоздатьЧекВозвратПриходаПоФЗ54(ИсходныйЧек) 
	Если Не ПараметрыСеанса.ПрименяетсяФЗ54 Тогда
		Возврат Неопределено;
	КонецеСли;	
	
	//ВозвратныйЧек = ИсходныйЧек.Скопировать();
	//ВозвратныйЧек.ТипКассовогоЧека = Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода;
	//ВозвратныйЧек.ЧекПробитНаККМ = Ложь;
	//ВозвратныйЧек.НомерЧекаККМ = 0;
	//ВозвратныйЧек.ЧекПробитОшибочно = Ложь;
	//ВозвратныйЧек.НомерСменыККМ = 0;
	//ВозвратныйЧек.Ответственный = Объект.Ответственный;
	//ВозвратныйЧек.Дата = Объект.Дата;
	//
	//ВозвратныйЧек.Записать(РежимЗаписиДокумента.Запись);
	//
	//Возврат ВозвратныйЧек;
	Возврат РаботаСЧекамиККМСервер.СоздатьЧекНаОснованииЧека(ИсходныйЧек, Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода, Объект.Ответственный);
КонецФункции	


&НаКлиенте
Функция ПробитьЧекВозвратПриходаПоФЗ54(ВозвратныйЧекСсылка) 
	Если Не ПараметрыСеанса.ПрименяетсяФЗ54 Тогда
		Возврат Неопределено;
	КонецеСли;	
	
	ВозвратныйЧек = ВозвратныйЧекСсылка.ПолучитьОбъект();
	
	Ответ = "";
	Отказ = Ложь;
	
	Если ВозвратныйЧек.КассаККМ.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Ответ = РаботаСКассовымСерверомСервер.ЗахватитьККМНаСервереККМ(ВозвратныйЧек.КассаККМ, ВозвратныйЧек.КассаККМ.Терминал.СерверККМ, Объект.Ссылка);
		Если Не Ответ.Результат Тогда
			Сообщить("ККМ " + Строка(ВозвратныйЧек.КассаККМ) + " не может быть захвачена для печати чеков! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
			Возврат ВозвратныйЧек;
		КонецЕсли;	
	КонецЕсли;	
	Если ВозвратныйЧек.КассаККМ.ВерсияПлатформыATOL = Перечисления.ВерсииПлатформыATOL.Версия_5_0 Тогда
		СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(ВозвратныйЧек.КассаККМ);
	Иначе	
		СерверККТ = ККМ_ФЗ_54.ИнициализироватьСерверККТ();
		ККМ_ФЗ_54.ДобавитьУстройствоATOL(СерверККТ, ВозвратныйЧек.КассаККМ);
	КонецеСли;	
	
	ВозвратныйЧек.ПровестиИРаспечататьЧек(Ответ, Отказ, Неопределено,, СерверККТ, 1);
	Если Отказ Тогда
		Сообщить("Чек № " + СокрЛП(ВозвратныйЧек.Номер) + ", ошибка пробития: " + Ответ, СтатусСообщения.Важное);
	КонецеСли;	
	
	
	Если ВозвратныйЧек.КассаККМ.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Ответ = РаботаСКассовымСерверомСервер.ОтпуститьККМНаСервереККМ(ВозвратныйЧек.КассаККМ, ВозвратныйЧек.КассаККМ.Терминал.СерверККМ, Объект.Ссылка);
		Если Не Ответ.Результат Тогда
			Сообщить("ККМ " + Строка(ВозвратныйЧек.КассаККМ) + " не может быть освобождена для печати чеков! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
			Возврат ВозвратныйЧек;
		КонецЕсли;	
	КонецЕсли;	
	СерверККТ = Неопределено;
	Возврат Истина;
КонецФункции	


&НаКлиенте
Процедура СписокЧековПриАктивизацииСтроки(Элемент)
	//Тек = Элементы.СписокЧеков.ТекущиеДанные;
	//Элементы.СписокЧековЧекПробитОшибочно.Пометка = Ложь;
	//Если Тек <> Неопределено Тогда
	//	Элементы.СписокЧековЧекПробитОшибочно.Пометка = Тек.ЧекПробитОшибочно;
	//КонецеСли;	
	СписокЧековПослеОбновления();
КонецПроцедуры

&НаКлиенте
Процедура СписокЧековПослеОбновления()
	Тек = Элементы.СписокЧеков.ТекущиеДанные;
	Элементы.СписокЧековЧекПробитОшибочно.Пометка = Ложь;
	
	Если Тек <> Неопределено Тогда
		Элементы.СписокЧековЧекПробитОшибочно.Пометка = Тек.ЧекПробитОшибочно;
		Элементы.СписокЧековЧекПробитОшибочно.Доступность = Истина;
	Иначе	
		Элементы.СписокЧековЧекПробитОшибочно.Доступность = Ложь;
	КонецеСли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка КАК Док,
	            |	СУММА(ЧекККМТовары.Сумма) КАК СуммаЧеков,
	            |	СУММА(ВЫБОР
	            |			КОГДА ПечатьЧековПоДоставкамЧеки.Чек.ЧекПробитНаККМ
	            |				ТОГДА ЧекККМТовары.Сумма
	            |			ИНАЧЕ 0
	            |		КОНЕЦ) КАК СуммаПробитыхЧеков,
	            |	СУММА(ВЫБОР
	            |			КОГДА ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно
	            |				ТОГДА ЧекККМТовары.Сумма
	            |			ИНАЧЕ 0
	            |		КОНЕЦ) КАК СуммаОшибочныхЧеков
	            |ИЗ
	            |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
	            |		ПО ПечатьЧековПоДоставкамЧеки.Чек.Ссылка = ЧекККМТовары.Ссылка.Ссылка
	            |ГДЕ
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка = &Док
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка";
	Зап.УстановитьПараметр("Док", Объект.Ссылка);
	Рез = Зап.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Рез);
	КонецЕСли;	
КонецПроцедуры

&НаКлиенте
Процедура НомерДоставкиПриИзменении(Элемент)
	Реал = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(СокрЛП(Элементы.НомерДоставки.ТекстРедактирования));    //, ТекущаяДата()
	Если Не Реал.Пустая() Тогда
		// Вставить содержимое обработчика.
		
		Если Реал.ТипОплаты = 10 Тогда // Задача № 2917
			Сообщить("Доставка с типом оплаты ""Без расчетов"" не может быть добавлена");
			Возврат; 
		Конецесли;	
		
		ДобавитьСтрокуСамовывоза(Реал);
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Не Объект.ПометкаУдаления Тогда
		Попытка
			Парам = Новый Структура;
			Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			Записать(Парам);
		Исключение
			
		КонецПопытки;	
	КонецеСли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиПоДоставкеПробитыОшибочно(Команда)
	Струк = Новый Структура;
	Струк.Вставить("Доставка", Элементы.СписокДоставок.ТекущиеДанные.Доставка);
	Най = Объект.Чеки.НайтиСтроки(Струк);
	Для Сч = 0 По Най.Количество() - 1 Цикл
		Если Най[Сч].ЧекПробитОшибочно И ПараметрыСеанса.ПрименяетсяФЗ54 Тогда
			Сообщить("Нельзя снять признак ""Чек пробит ошибочно""!!");
			Возврат;
		КонецеСли;	
		
		ВЧ = СоздатьЧекВозвратПриходаПоФЗ54(Най[Сч].Чек);
		Если ВЧ <> Неопределено Тогда
			ПробитьЧекВозвратПриходаПоФЗ54(ВЧ.Ссылка);
			Най[Сч].ЧекВозвратаПрихода = ВЧ.Ссылка;
		КонецеСли;	
		
		
		Най[Сч].ЧекПробитОшибочно = Истина;
	КонецЦикла;	
	Записать();
	Элементы.СписокЧеков.Обновить();
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокНоменклатурыКоличествоНовое" Тогда
		Если Не Элементы.СписокДоставок.ТекущиеДанные.РазрешитьРедактированиеКоличества Тогда
			Возврат;
		КонецеСли;
		
		Ч = Элементы.СписокНоменклатуры.ТекущиеДанные.КоличествоНовое;
		Если ВвестиЧисло(Ч, "Введите количество...", 15, 2) Тогда
			Струк = Новый Структура;
			Струк.Вставить("Доставка", Элементы.СписокНоменклатуры.ТекущиеДанные.Доставка);
			Струк.Вставить("Номенклатура", Элементы.СписокНоменклатуры.ТекущиеДанные.Номенклатура);
			Струк.Вставить("КодМаркировки", Элементы.СписокНоменклатуры.ТекущиеДанные.КодМаркировки);
			Най = Объект.Товары.НайтиСтроки(Струк);
			Если Най.Количество() = 1 Тогда
				Най[0].НовоеКоличество = Ч;
				Най[0].СуммаНовая = Окр(Най[0].Цена * Най[0].НовоеКоличество);
			КонецеСли;	
		КонецЕсли;	
		Записать();
		Элементы.СписокНоменклатуры.Обновить();
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ИнициализироватьФормуХодаОбработки(НаименованиеОбработкиДанных, Знач ТекстСообщения = "", Знач ПроцентПрибавления = 0, МаксимальноеЗначение = 100)
	
	ФормаХодаПечатиЧеков = Неопределено;
	ФормаХодаПечатиЧеков = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	ФормаХодаПечатиЧеков.НаименованиеОбработкиДанных = НаименованиеОбработкиДанных;
	ФормаХодаПечатиЧеков.КомментарийОбработкиДанных = ТекстСообщения;	
	ФормаХодаПечатиЧеков.Значение = ПроцентПрибавления;
	ФормаХодаПечатиЧеков.МаксимальноеЗначение = МаксимальноеЗначение;
	
	Если Не ФормаХодаПечатиЧеков.Открыта() Тогда
		ФормаХодаПечатиЧеков.Открыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуОбработкиДанных()
	
	Если ФормаХодаПечатиЧеков <> Неопределено Тогда
		
		Если ФормаХодаПечатиЧеков.Открыта() Тогда
			ФормаХодаПечатиЧеков.Закрыть();
		КонецЕсли;
		
		ФормаХодаПечатиЧеков = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНовоеСообщениеВФормеХодаОбработки(Знач ТекстСообщения, Знач ПроцентПрибавления = 0)
	
	ФормаХодаПечатиЧеков.КомментарийОбработкиДанных = ТекстСообщения;	
	ФормаХодаПечатиЧеков.Значение = ФормаХодаПечатиЧеков.Значение + ПроцентПрибавления;
			
КонецПроцедуры



&НаКлиенте
Процедура ПробитьВсеЧеки(Команда)	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПечатьЧековПоДоставкамЧеки.Чек КАК Чек,
	            |	ПечатьЧековПоДоставкамЧеки.Доставка КАК Доставка,
	            |	ПечатьЧековПоДоставкамЧеки.Доставка.ВладелецТовара.Наименование КАК Магазин,
	            |	ПечатьЧековПоДоставкамЧеки.Чек.КассаККМ.ККМИнтегрированаВСерверККМ КАК ККМИнтегрированаВСерверККМ,
	            |	ПечатьЧековПоДоставкамЧеки.Чек.КассаККМ.Терминал.СерверККМ КАК СерверККМ,
	            |	ПечатьЧековПоДоставкамЧеки.Чек.КассаККМ КАК ККМ
	            |ИЗ
	            |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	            |ГДЕ
	            |	ПечатьЧековПоДоставкамЧеки.Чек.ЧекПробитНаККМ = ЛОЖЬ
	            |	И ПечатьЧековПоДоставкамЧеки.Ссылка.Ссылка = &Док
	            |	И ПечатьЧековПоДоставкамЧеки.ПробитьЧек = ИСТИНА
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ПечатьЧековПоДоставкамЧеки.Чек.Номер
	            |ИТОГИ ПО
	            |	Доставка";
	Зап.УстановитьПараметр("Док", Объект.Ссылка);
	
	Выб = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);;
	
	// работа с блокировкой ККМ
	ТабККМ = Новый ТаблицаЗначений;
	ТабККМ.Колонки.Добавить("Кол");
	ТабККМ.Колонки.Добавить("ККМИнтегрированаВСерверККМ");
	ТабККМ.Колонки.Добавить("ККМ");
	ТабККМ.Колонки.Добавить("СерверККМ");
	ТабККМ.Колонки.Добавить("СерверККТ");
	//ТабККМ.Колонки.Добавить("НомерУстройства");
	
	
	Пока Выб.Следующий() Цикл
		ВыбЧ = Выб.Выбрать();
		Пока ВыбЧ.Следующий() Цикл
			Нов = ТабККМ.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, ВыбЧ);
			Нов.Кол = 1;
		КонецЦикла;	
	КонецЦикла;
	
	
	
	ТабККМ.Свернуть("ККМ, ККМИнтегрированаВСерверККМ, СерверККМ, СерверККТ", "Кол");
	СчУстройств = 1;
	Для Каждого Тек Из ТабККМ Цикл
		Если Тек.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			Ответ = РаботаСКассовымСерверомСервер.ЗахватитьККМНаСервереККМ(Тек.ККМ, Тек.СерверККМ, Объект.Ссылка);
			Если Не Ответ.Результат Тогда
				Сообщить("ККМ " + Строка(Тек.ККМ) + " не может быть захвачена для печати чеков! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		//Тек.НомерУстройства = СчУстройств;
		//СчУстройств = СчУстройств + 1;
		//ККМ_ФЗ_54.ПодключитьсяКУстройствуККМ(СерверККТ, Тек.ККМ, Тек.НомерУстройства);
		Если Тек.ККМ.ВерсияПлатформыATOL = Перечисления.ВерсииПлатформыATOL.Версия_5_0 Тогда
			Тек.СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(Тек.ККМ);
		Иначе	
			Тек.СерверККТ = ККМ_ФЗ_54.ИнициализироватьСерверККТ();
			ККМ_ФЗ_54.ДобавитьУстройствоATOL(Тек.СерверККТ, Тек.ККМ);
		КонецеСли;	
	КонецЦикла;	
	// работа с блокировкой ККМ	
	Выб.Сбросить();
	
	ТС = "Заказ";
	ИнициализироватьФормуХодаОбработки("Печать чеков по заказам", ТС, 0, Объект.Чеки.Количество());
	
	
	Пока Выб.Следующий() Цикл
		Дост = Выб.Доставка;
		//От = Вопрос("Пробить чеки по доставке " + СокрЛП(Дост.Номер) + " по магазину " + СокрЛП(Выб.Магазин), РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
		//Если От = КодВозвратаДиалога.Отмена Тогда
		//	Прервать;
		//ИначеЕсли От = КодВозвратаДиалога.Нет Тогда	
		//	Продолжить;
		//КонецеСли;
		
		ВыбЧ = Выб.Выбрать();
		Пока ВыбЧ.Следующий() Цикл
			ТС = "Заказ: " + СокрЛП(Дост.Номер);
			ОтобразитьНовоеСообщениеВФормеХодаОбработки(ТС, 1);
			Чек = ВыбЧ.Чек.ПолучитьОбъект();
			Если Не Тек.ККМИнтегрированаВСерверККМ Тогда
				ФормаДокумента = Чек.ПолучитьФорму("ФормаДокумента");
				ФормаДокумента.Открыть();
			КонецеСли;	
			Ответ = "";
			Отказ = Ложь;
			Най = ТабККМ.Найти(ВыбЧ.ККМ);
			
			Если Най <> Неопределено Тогда
				Чек.ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента, , Най.СерверККТ, 1);
			Иначе	
				Чек.ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента);
			КонецеСли;	
			//Чек.ЧекПробитНаККМ = истина;
			//Чек.Записать(РежимЗаписиДокумента.Запись);
			Если Не Тек.ККМИнтегрированаВСерверККМ Тогда
				ФормаДокумента.Закрыть();
			КонецеСли;	
			Если Отказ Тогда
				Сообщить("Чек № " + СокрЛП(Чек.Номер) + ", ошибка пробития: " + Ответ, СтатусСообщения.Важное);
			КонецеСли;	
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Тек Из ТабККМ Цикл
		Если Тек.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			Ответ = РаботаСКассовымСерверомСервер.ОтпуститьККМНаСервереККМ(Тек.ККМ, Тек.СерверККМ, Объект.Ссылка);
			Если Не Ответ.Результат Тогда
				Сообщить("ККМ " + Строка(Тек.ККМ) + " не может быть освобождена на сервере ККМ! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
			КонецЕсли;			
		КонецЕсли;
		//ККМ_ФЗ_54.ОтключитьсяОтУстройстваККМ(Тек.СерверККТ, 1);
		Тек.СерверККТ = "";
	КонецЦикла;	
	
	ЗакрытьФормуОбработкиДанных();
	
	
	Струк = Новый Структура;
	Струк.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(Струк);
	Элементы.СписокЧеков.Обновить();
	СписокЧековПослеОбновления();
	Элементы.СписокНоменклатуры.Обновить();
	Элементы.СписокДоставок.Обновить();	
	ТолькоПросмотр = Не ОпределитьДоступностьФормыДляРедактирования(Объект.Ссылка);
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры

//
&НаСервере
Функция ПолучитьКОплатеКлиентом(Заказ)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ДополнительныеПараметрыЗаказа.КОплатеКлиентом
        |ИЗ
        |   РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
        |ГДЕ
        |   ДополнительныеПараметрыЗаказа.Заказ = &Заказ";
    
    Запрос.УстановитьПараметр("Заказ", Заказ);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.КОплатеКлиентом;
    Иначе
        Возврат 0 ;
    КонецЕсли;
КонецФункции // ПолучитьКОплатеКлиентом()

&НаКлиенте
Процедура ПробитьЧекВозвратПрихода(Команда)
	Если Элементы.СписокЧеков.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецеСли;	
	Струк = Новый Структура;
	Струк.Вставить("Чек", Элементы.СписокЧеков.ТекущиеДанные.Чек);
	Най = Объект.Чеки.НайтиСтроки(Струк);
	Если Най.Количество() = 1 Тогда
		Если Не Най[0].ЧекПробитОшибочно Тогда
			Сообщить("Исходный чек не аннулирован!");
			Возврат;
		КонецеСли;	
		
		ВЧ = Най[0].ЧекВозвратаПрихода;
		Если ВЧ.Пустая() Тогда
			Сообщить("Чека Возврат прихода по этому чеку не существует!");
			Возврат;
		КонецеСли;	
		
		ПробитьЧекВозвратПриходаПоФЗ54(ВЧ);
		Записать();
		Элементы.СписокЧеков.Обновить();
	КонецеСли;
	//+Степанов Задача № 3625
	УстановитьВозможностьРедактированияККМ();
	//-Степанов Задача № 3625
КонецПроцедуры

//+Степанов Задача № 3625 
&НаСервере
Процедура УстановитьВозможностьРедактированияККМ()
	Если Объект.Проведен Тогда
		МожноИзменятьККМ = Ложь;
	Иначе		
		МассивЧековДокумента = Новый Массив;
		Для Каждого СтрокаТЧ Из Объект.Чеки Цикл
			МассивЧековДокумента.Добавить(СтрокаТЧ.Чек);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЧекККМ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Ссылка В(&Чеки)
		|	И ЧекККМ.ЧекПробитНаККМ";
		Запрос.УстановитьПараметр("Чеки",МассивЧековДокумента);
		Результат = Запрос.Выполнить();
		МожноИзменятьККМ = Результат.Пустой();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДоставокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если МожноИзменятьККМ И (Поле.Имя = "СписокДоставокСвязкаККМ" Или Поле.Имя = "СписокДоставокККМ") Тогда
		ДополнительныеПараметры = Новый Структура("ИмяПоля",Поле.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросОСменеККМ",ЭтаФорма,ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения,"Будет изменена ККМ. Продолжить?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросОСменеККМ(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.ИмяПоля = "СписокДоставокСвязкаККМ" Тогда
			ОткрытьФорму("Справочник.СвязкиККМ.ФормаВыбора",,Элементы.СписокДоставок);	
		Иначе
			ККМ = ПолучитьККМПоСвязке(Элементы.СписокДоставок.ТекущиеДанные.СвязкаККМ);
			Если ККМ = Неопределено Тогда
				ПоказатьПредупреждение(,"Не удалось определить ККМ по связке!");
			Иначе
				УстановитьНовуюККМ(ККМ,Элементы.СписокДоставок.ТекущиеДанные.Доставка);
			КонецЕсли;	
		КонецЕсли;
		Если ДополнительныеПараметры.ИмяПоля = "СписокДоставокККМ" Тогда
			Элементы.СписокДоставок.Обновить();
			Элементы.СписокЧеков.Обновить();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура СписокДоставокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ККМ = ПолучитьККМПоСвязке(ВыбранноеЗначение);	
	Если ККМ = Неопределено Тогда
		ПоказатьПредупреждение(,"Не удалось определить ККМ по связке!");
	Иначе
		УстановитьНовуюККМ(ККМ,Элементы.СписокДоставок.ТекущиеДанные.Доставка,ВыбранноеЗначение);
	КонецЕсли;	
	Элементы.СписокДоставок.Обновить();
	Элементы.СписокЧеков.Обновить();
КонецПроцедуры

&НаСервере
Функция ПолучитьККМПоСвязке(Связка)
	Если Связка.РежимРаботыСвязки = 0 Тогда
		СтрокаТЧСвязки = Связка.ККМПоРабочимМестам.Найти(ПараметрыСеанса.РабочееМесто);
	ИначеЕсли Связка.РежимРаботыСвязки = 2 Тогда
		СтрокаТЧСвязки = Связка.ККМПоПользователям.Найти(ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;	
	Если СтрокаТЧСвязки = Неопределено Тогда 
		Возврат Неопределено
	Иначе
		Возврат СтрокаТЧСвязки.ККМ
	КонецЕсли;	
КонецФункции	

&НаСервере
Процедура УстановитьНовуюККМ(ККМ,Доставка,Связка = Неопределено)
	СтрокиЧековККМ = Объект.Чеки.НайтиСтроки(Новый Структура("Доставка",Доставка));	
	Для Каждого СтрокаЧекаККМ Из СтрокиЧековККМ Цикл
		ЧекККМОбъект = СтрокаЧекаККМ.Чек.ПолучитьОбъект();
		ЧекККМОбъект.КассаККМ = ККМ;
		Попытка
			РежимЗаписи = ?(ЧекККМОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
			ЧекККМОбъект.Записать(РежимЗаписи);
		Исключение
			Сообщить("Не удалось изменить кассу ККМ в " + Строка(СтрокаЧекаККМ.Чек));
		КонецПопытки;	
	КонецЦикла;	
	СтрокиДоставки = Объект.Доставки.НайтиСтроки(Новый Структура("Доставка",Доставка));
	Для Каждого СтрокаДоставки Из СтрокиДоставки Цикл
		СтрокаДоставки.ККМ = ККМ;
		Если Связка <> Неопределено Тогда
			СтрокаДоставки.СвязкаККМ = Связка;
		КонецЕсли;	
	КонецЦикла;	
	Записать();
КонецПроцедуры	
//-Степанов Задача № 3625 

Фл = Ложь;

