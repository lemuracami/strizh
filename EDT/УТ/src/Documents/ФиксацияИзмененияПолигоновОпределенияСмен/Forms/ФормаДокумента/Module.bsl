
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЗначенияЗаполнения") тогда
		
		Если Параметры.ЗначенияЗаполнения.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
		КонецеслИ;
	
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		//Объект.Регион = ПараметрыСеанса.ТерминалДоставки;
		Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Объект.Смена = Справочники.Смены.Смена2;
		АктивнаяСхемаПолигональнойМаршрутизацииИзРегистра =  РегистрыСведений.АктивнаяСхемаПолигональнойМаршрутизации.ПолучитьПоследнее(Объект.ДатаРейсов, Новый Структура("РегиональныйТерминал", Объект.Регион));
		Объект.АктивнаяСхемаПолигональнойМаршрутизации  = АктивнаяСхемаПолигональнойМаршрутизацииИзРегистра.СхемаПолигональнойМаршрутизации;
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьТабличныеЧастиДокумента(Объект);
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 ЗаполнитьСоответствияКодовИНаименованийПолигонов();
	 
	 Если Объект.Ссылка.Пустая() И Объект.ГруппыПолигонов.Количество() > 0 Тогда
		 ЭтаФорма.Модифицированность = Истина;
	 Конецесли;	
	 
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОбработатьСменыЗаказов();	
	ЗаполнитьСоответствияКодовИНаименованийПолигоновНаСервере();

КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ОбновитьДанныеПоПолигонам(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПерезаполненияДокумента", ЭтотОбъект),
	"Перезаполнить данные по группам полигонов и полигонам на основании исторических данных?" + 
	Символы.ПС + 
	"Табличные части будут очищены!",
	РежимДиалогаВопрос.ОКОтмена)
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ГруппыПолигоновГруппаПолигоновУчитываетсяПриИзменении(Элемент)
	
	Если Элементы.ГруппыПолигонов.ТекущиеДанные.ГруппаПолигоновУчитывается = 2 Тогда
		Элементы.ГруппыПолигонов.ТекущиеДанные.ГруппаПолигоновУчитывается = 0;
	КонецЕсли;	
	
	УстановитьАктуальныеСостоянияПолигонов(Элементы.ГруппыПолигонов.ТекущиеДанные.ГруппаПолигонов, Элементы.ГруппыПолигонов.ТекущиеДанные.ГруппаПолигоновУчитывается);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолигоныПолигонУчитываетсяПриИзменении(Элемент)
	
	УстановитьАктуальныеСостоянияГруппПолигонов();

КонецПроцедуры

&НаКлиенте
Процедура ГруппыПолигоновГруппаПолигоновОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокиГрупп = Объект.ГруппыПолигонов.НайтиСтроки(Новый Структура("ГруппаПолигонов", ВыбранноеЗначение)); 
	Если СтрокиГрупп.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Группа полигонов " + СокрЛП(ВыбранноеЗначение) + " уже есть в списке!",СтрокиГрупп[0].ГруппаПолигонов,"ГруппыПолигонов.ГруппаПолигонов");
		
	Иначе
		
		Элементы.ГруппыПолигонов.ТекущиеДанные.ГруппаПолигоновУчитывается = Истина;
		
		ЗаполнитьПолигоныПоГруппе(ВыбранноеЗначение);
		ЗаполнитьСоответствияКодовИНаименованийПолигонов(ВыбранноеЗначение);

		//Элементы.Полигоны.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПолигонов", ВыбранноеЗначение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПолигоновПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеГруппПолигонов = Элементы.ГруппыПолигонов.ТекущиеДанные;
	Если Не ТекущиеДанныеГруппПолигонов = Неопределено Тогда
		
		//Элементы.ГруппыПолигоновГруппаПолигонов.ТолькоПросмотр = ЗначениеЗаполнено(ТекущиеДанныеГруппПолигонов.ГруппаПолигонов);			
		//Если ЗначениеЗаполнено(ТекущиеДанныеГруппПолигонов.ГруппаПолигонов) Тогда
		//	Элементы.Полигоны.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПолигонов", ТекущиеДанныеГруппПолигонов.ГруппаПолигонов);
		//КонецЕсли;
		
		ВыбраннаяГруппаПолигонов = ТекущиеДанныеГруппПолигонов.ГруппаПолигонов;
		
	Конецесли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолигоныПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеПолигонов = Элементы.Полигоны.ТекущиеДанные;
	Если Не ТекущиеДанныеПолигонов = Неопределено Тогда
		
		Элементы.ПолигоныНомерПолигонаМаршрутизации.ТолькоПросмотр = ЗначениеЗаполнено(ТекущиеДанныеПолигонов.НомерПолигонаМаршрутизации);			
		
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолигоныНомерПолигонаМаршрутизацииПриИзменении(Элемент)
	
	ТекДанные = Элементы.Полигоны.ТекущиеДанные;
	Отбор = Новый Структура("НомерПолигонаМаршрутизации",ТекДанные.НомерПолигонаМаршрутизации);
	СтрокиНомеров = Объект.Полигоны.НайтиСтроки(Отбор);
	Если СтрокиНомеров.Количество() > 1 Тогда
		Сообщить("Такая строка уже есть!!!");
		ТекДанные.НаименованиеПолигона = "";
		ТекДанные.НомерПолигонаМаршрутизации = 0;
	Иначе	
		//ТекДанные.ГруппаПолигонов = Элементы.Группыполигонов.ТекущиеДанные.ГруппаПолигонов;
		ТекДанные.НаименованиеПолигона = ПолучитьНаименованиеПолигонаПоНомеру(ТекДанные.НомерПолигонаМаршрутизации);
		ТекДанные.ПолигонУчитывается = Истина;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ГруппыПолигоновПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолигоныПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВопросПерезаполненияДокумента(Результат, ДополнительныеПараметры)  Экспорт
	
	Если Результат = кодВозвратаДиалога.ОК Тогда
		
		ОбновитьДанныеПоПолигонамНаСервере();
		ЗаполнитьСоответствияКодовИНаименованийПолигонов();

	Конецесли;	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьНаименованиеПолигонаПоНомеру(НомерПолигона);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПолигоныМаршрутизации.Наименование КАК НаименованиеПолигона
	|ИЗ
	|	Справочник.ПолигоныМаршрутизации КАК ПолигоныМаршрутизации
	|ГДЕ
	|	ПолигоныМаршрутизации.Порядок = &НомерПолигона
	|	И ПолигоныМаршрутизации.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.АктивнаяСхемаПолигональнойМаршрутизации);
	Запрос.УстановитьПараметр("НомерПолигона",НомерПолигона);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НаименованиеПолигона;
	Иначе
		Возврат "Полигон с таким номером не найден";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолигоныПоГруппе(ВыбраннаяГруппаПолигонов)
	
	Для каждого Полигон Из ВыбраннаяГруппаПолигонов.ПолигоныМаршрутизации Цикл
		
		СтрПолигона = Объект.Полигоны.Добавить();
		СтрПолигона.ГруппаПолигонов = ВыбраннаяГруппаПолигонов;
		СтрПолигона.НомерПолигонаМаршрутизации =  Полигон.НомерПолигона;
		СтрПолигона.ПолигонУчитывается = Истина;
		
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСоответствияКодовИНаименованийПолигоновНаСервере(ВыбраннаяГруппаПолигонов = Неопределено)
	
	КоллекцияОбхода = Объект.Полигоны;
	Если Не ВыбраннаяГруппаПолигонов = Неопределено Тогда
		
		КоллекцияОбхода = Объект.Полигоны.НайтиСтроки(Новый Структура("ГруппаПолигонов", ВыбраннаяГруппаПолигонов));
		
	КонецЕсли;	
	
	Для Каждого Элем из КоллекцияОбхода Цикл
		Элем.НаименованиеПолигона = ПолучитьНаименованиеПолигонаПоНомеру(Элем.НомерПолигонаМаршрутизации);
	КонецЦикла;	

Конецпроцедуры

&НаКлиенте
Процедура ЗаполнитьСоответствияКодовИНаименованийПолигонов(ВыбраннаяГруппаПолигонов = Неопределено)
	
	КоллекцияОбхода = Объект.Полигоны;
	Если Не ВыбраннаяГруппаПолигонов = Неопределено Тогда
		
		КоллекцияОбхода = Объект.Полигоны.НайтиСтроки(Новый Структура("ГруппаПолигонов", ВыбраннаяГруппаПолигонов));
		
	КонецЕсли;	
	
	Для Каждого Элем из КоллекцияОбхода Цикл
		Элем.НаименованиеПолигона = ПолучитьНаименованиеПолигонаПоНомеру(Элем.НомерПолигонаМаршрутизации);
	КонецЦикла;	
	
КонецПроцедуры

&наСервере
Процедура УстановитьАктуальныеСостоянияГруппПолигонов()
	//
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.УстановитьАктуальныеСостоянияГруппПолигонов(Объект);
	 
Конецпроцедуры	

&наСервере
Процедура УстановитьАктуальныеСостоянияПолигонов(ГруппаПолигонов, Состояние)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.УстановитьАктуальныеСостоянияПолигонов(Объект, ГруппаПолигонов, Состояние);

Конецпроцедуры

&НаСервере
Процедура ОбновитьДанныеПоПолигонамНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличныеЧастиДокумента(Объект);

КонецПроцедуры

#КонецОбласти