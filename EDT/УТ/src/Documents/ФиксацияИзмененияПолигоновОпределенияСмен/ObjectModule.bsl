Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.ПолигоныОпределенияСменыМаршрутизации.Записывать = Истина;
	Движения.ПолигоныОпределенияСменыМаршрутизации.Очистить();
	
	Для Каждого СтрокаПолигона Из Полигоны Цикл	
		
		Движение = Движения.ПолигоныОпределенияСменыМаршрутизации.Добавить();
		Движение.Регистратор = ЭтотОбъект.ссылка;
		Движение.Период = ЭтотОбъект.Дата;
		ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект);
		
		Движение.ГруппаПолигоновМаршрутизации = СтрокаПолигона.ГруппаПолигонов; 
		Движение.НомерПолигонаМаршрутизации = СтрокаПолигона.НомерПолигонаМаршрутизации;
		Движение.ПолигонУчитывается = СтрокаПолигона.ПолигонУчитывается;
		
	КонецЦикла;

	//Движения.Записать();
	
	//ОбработатьСменыЗаказов();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка тогда
		Возврат;
	КонецЕсли;	
	
	МассивУдаляемыхСтрокПолигонов = Новый Массив;
	
	Для Каждого СтрокаПолигонов Из Полигоны Цикл
		
		Если СтрокаПолигонов.ГруппаПолигонов = Справочники.ГруппыПолигоновМаршрутизации.ПустаяСсылка() тогда
			Продолжить;
		КонецЕсли;	
		                                
		ГруппаПолигонов = ГруппыПолигонов.Найти(СтрокаПолигонов.ГруппаПолигонов, "ГруппаПолигонов");
		
		Если ГруппаПолигонов = Неопределено тогда
			
			МассивУдаляемыхСтрокПолигонов.Добавить(СтрокаПолигонов);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого СтрокаУдаляемыхПолигонов Из МассивУдаляемыхСтрокПолигонов Цикл
		
		Полигоны.Удалить(СтрокаУдаляемыхПолигонов);
		
	КонецЦикла;	
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьСменыЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|		ПО РеализацияТоваровУслуг.Ссылка = ДополнительныеПараметрыЗаказа.Заказ
		|ГДЕ
		|	РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
		|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И НЕ ДополнительныеПараметрыЗаказа.Доставка = ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка)";
	
	//Запрос.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Запрос.УстановитьПараметр("ТерминалДоставки", Регион);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаРейсов));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаРейсов));
	// меняем на интервал, обрабатываем только заданную дату, Марочкин, 18.03.2020
	
	МассивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	//МаршрутизацияЗаказовСервер.УстановкаСменыДляЗаказов(МассивЗаказов);
	//CeHbKA #3301 18.03.2020
	МаршрутизацияЗаказовСервер.УстановкаСменыДляЗаказов_Новая(МассивЗаказов);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТабличныеЧастиДокумента(Док)  Экспорт
	
	Док.ГруппыПолигонов.Очистить();
	Док.Полигоны.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.Период КАК Период,
		|	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.ГруппаПолигоновМаршрутизации КАК ГруппаПолигоновМаршрутизации,
		|	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.НомерПолигонаМаршрутизации КАК НомерПолигонаМаршрутизации,
		|	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.ПолигонУчитывается КАК ПолигонУчитывается
		|ПОМЕСТИТЬ ВТ_ПервичныйСрез
		|ИЗ
		|	РегистрСведений.ПолигоныОпределенияСменыМаршрутизации.СрезПоследних(
		|			,
		|			ДатаРейсов <= &ДатаРейсов
		|				И Смена = &Смена
		|				И Регион = &Терминал) КАК ПолигоныОпределенияСменыМаршрутизацииСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПервичныйСрез.ГруппаПолигоновМаршрутизации КАК ГруппаПолигоновМаршрутизации,
		|	ВТ_ПервичныйСрез.НомерПолигонаМаршрутизации КАК НомерПолигонаМаршрутизации,
		|	ВТ_ПервичныйСрез.ПолигонУчитывается КАК ПолигонУчитывается
		|ПОМЕСТИТЬ ВТ_Срез
		|ИЗ
		|	ВТ_ПервичныйСрез КАК ВТ_ПервичныйСрез
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервичныйСрез КАК ВТ_ПервичныйСрез1
		|		ПО ВТ_ПервичныйСрез.ГруппаПолигоновМаршрутизации = ВТ_ПервичныйСрез1.ГруппаПолигоновМаршрутизации
		|			И ВТ_ПервичныйСрез.НомерПолигонаМаршрутизации = ВТ_ПервичныйСрез1.НомерПолигонаМаршрутизации
		|			И (ВТ_ПервичныйСрез1.Период > ВТ_ПервичныйСрез.Период)
		|ГДЕ
		|	ВТ_ПервичныйСрез1.Период ЕСТЬ NULL
		|	И ВТ_ПервичныйСрез.ПолигонУчитывается
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.Ссылка КАК ГруппаПолигонов,
		|	ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.НомерПолигона КАК НомерПолигонаМаршрутизации,
		|	ЕСТЬNULL(ВТ_Срез.ПолигонУчитывается, ЛОЖЬ) КАК ПолигонУчитывается
		|ПОМЕСТИТЬ ВТ_Итог
		|ИЗ
		|	Справочник.ГруппыПолигоновМаршрутизации.ПолигоныМаршрутизации КАК ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Срез КАК ВТ_Срез
		|		ПО ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.Ссылка = ВТ_Срез.ГруппаПолигоновМаршрутизации
		|			И ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.НомерПолигона = ВТ_Срез.НомерПолигонаМаршрутизации
		|ГДЕ
		|	ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Срез.ГруппаПолигоновМаршрутизации
		|			ИЗ
		|				ВТ_Срез)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Итог.ГруппаПолигонов КАК ГруппаПолигонов,
		|	ВТ_Итог.НомерПолигонаМаршрутизации КАК НомерПолигонаМаршрутизации,
		|	ВТ_Итог.ПолигонУчитывается КАК ПолигонУчитывается
		|ИЗ
		|	ВТ_Итог КАК ВТ_Итог
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Срез.ГруппаПолигоновМаршрутизации,
		|	ВТ_Срез.НомерПолигонаМаршрутизации,
		|	ВТ_Срез.ПолигонУчитывается
		|ИЗ
		|	ВТ_Срез КАК ВТ_Срез
		|ГДЕ
		|	НЕ ВТ_Срез.НомерПолигонаМаршрутизации В
		|				(ВЫБРАТЬ
		|					ВТ_Итог.НомерПолигонаМаршрутизации
		|				ИЗ
		|					ВТ_Итог)";
	
	Запрос.УстановитьПараметр("ДатаРейсов", Док.ДатаРейсов);
	Запрос.УстановитьПараметр("Смена", Док.Смена);
	Запрос.УстановитьПараметр("Терминал", Док.Регион);
	
	СписокПолигонов = Запрос.Выполнить().Выгрузить();
	СписокГрупп = СписокПолигонов.Скопировать(,"ГруппаПолигонов");
	СписокГрупп.Свернуть("ГруппаПолигонов");
	
	Для Каждого СтрокаГруппаМаршрутизации Из СписокГрупп Цикл
		
		ТекущийПолигонЗаполнения = СтрокаГруппаМаршрутизации.ГруппаПолигонов;
		
		Если Не ТекущийПолигонЗаполнения.Пустая() Тогда
			СтрокаГруппДокумента  = Док.ГруппыПолигонов.Добавить();
			СтрокаГруппДокумента.ГруппаПолигонов = ТекущийПолигонЗаполнения;
		КонецЕсли;
	
		СтрокиПолигонов = СписокПолигонов.НайтиСтроки(новый Структура("ГруппаПолигонов", ТекущийПолигонЗаполнения));
		
		Для Каждого СтрокаПолигона Из СтрокиПолигонов Цикл
			СтрокаПолигоновДокумента = Док.Полигоны.добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПолигоновДокумента, СтрокаПолигона);
		КонецЦикла;	 
		
	КонецЦикла;
	
	УстановитьАктуальныеСостоянияГруппПолигонов(Док);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьАктуальныеСостоянияГруппПолигонов(Док) Экспорт
	
	Для Каждого СтрокаГруппаПолигонов Из Док.ГруппыПолигонов Цикл
		
		СтрокиПолигонов = Док.Полигоны.НайтиСтроки(Новый Структура("ГруппаПолигонов", СтрокаГруппаПолигонов.ГруппаПолигонов));
		СтрокиПолигоновИстина = Док.Полигоны.НайтиСтроки(Новый Структура("ГруппаПолигонов, ПолигонУчитывается", СтрокаГруппаПолигонов.ГруппаПолигонов, Истина));
		
		Если СтрокиПолигонов.Количество() = 0 Тогда
			СтрокаГруппаПолигонов.ГруппаПолигоновУчитывается = 0;
			Возврат;
		КонецЕсли;	
		
		Если  СтрокиПолигоновИстина.Количество() = 0 Тогда
			СтрокаГруппаПолигонов.ГруппаПолигоновУчитывается = 0;
		Иначе
			Если СтрокиПолигоновИстина.Количество() = СтрокиПолигонов.Количество() Тогда
				СтрокаГруппаПолигонов.ГруппаПолигоновУчитывается = 1;
			Иначе				
				СтрокаГруппаПолигонов.ГруппаПолигоновУчитывается = 2;
			Конецесли;
		Конецесли;
		
	КонецЦикла;	
	
Конецпроцедуры

&НаСервере
Процедура УстановитьАктуальныеСостоянияПолигонов(Док, ГруппаПолигонов, Состояние) экспорт
	
	СтрокиПолигонов = Док.Полигоны.НайтиСтроки(Новый Структура("ГруппаПолигонов", ГруппаПолигонов));
	Для Каждого СтрокаПолигона Из СтрокиПолигонов Цикл
		СтрокаПолигона.ПолигонУчитывается = Состояние;
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти