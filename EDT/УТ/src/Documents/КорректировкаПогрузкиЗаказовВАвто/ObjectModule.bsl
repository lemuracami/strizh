
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Зап = Новый запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КорректировкаПогрузкиЗаказовВАвтоЗаказы.Заказ КАК Заказ,
	            |	ВЫБОР
	            |		КОГДА КорректировкаПогрузкиЗаказовВАвтоЗаказы.ПогрузкаИсточник.Рейс.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.ПустаяСсылка)
	            |			ТОГДА КорректировкаПогрузкиЗаказовВАвтоЗаказы.ПогрузкаПриемник.Рейс.ТерминалДоставки
	            |		ИНАЧЕ КорректировкаПогрузкиЗаказовВАвтоЗаказы.ПогрузкаИсточник.Рейс.ТерминалДоставки
	            |	КОНЕЦ КАК Терминал
	            |ИЗ
	            |	Документ.КорректировкаПогрузкиЗаказовВАвто.Заказы КАК КорректировкаПогрузкиЗаказовВАвтоЗаказы
	            |ГДЕ
	            |	КорректировкаПогрузкиЗаказовВАвтоЗаказы.РежимМодификации = ЗНАЧЕНИЕ(Перечисление.РежимыМодификацииПогрузкиВАвто.ПерекидкаЗаказа)
	            |	И КорректировкаПогрузкиЗаказовВАвтоЗаказы.Ссылка.Ссылка = &Док";
				
	Зап.УстановитьПараметр("Док", Ссылка);			
	Рез = Зап.Выполнить().Выгрузить();
	
	
//+++ БАО 02.08.2017 №1550	

	//Список = Новый СписокЗначений;
	//Массив = Рез.ВыгрузитьКолонку("Заказ");
	//Список.ЗагрузитьЗначения(Массив);
	Список = Рез.Скопировать(, "Заказ, Терминал");
	
//--- БАО 02.08.2017 №1550

	
	lem.ЗафиксироватьМестонахождениеЗаказа(Список, Справочники.ВидыМестонахожденияЗаказа.НаСкладе, Ссылка);
	
	
	Движения.НезагруженныеЗаказыВАвто.Записывать = Истина;
	Движения.НезагруженныеЗаказыВАвто.Очистить();
	Для Каждого ТекСтрокаЗаказы Из Заказы Цикл
		Движение = Движения.НезагруженныеЗаказыВАвто.Добавить();
		Движение.Период = Дата;
		Движение.Заказ = ТекСтрокаЗаказы.Заказ;
		
		Если ЗначениеЗаполнено(ТекСтрокаЗаказы.ПогрузкаПриемник) Тогда
			Движение.Рейс = ТекСтрокаЗаказы.ПогрузкаПриемник.Рейс;
		ИначеЕсли ЗначениеЗаполнено(ТекСтрокаЗаказы.ПогрузкаИсточник) Тогда
			Движение.Рейс = ТекСтрокаЗаказы.ПогрузкаИсточник.Рейс;
		КонецЕсли;
		
		Если ТекСтрокаЗаказы.РежимМодификации = Перечисления.РежимыМодификацииПогрузкиВАвто.ЗаказНеПоместился Тогда
			Движение.СтатусПогрузки = Перечисления.СтатусыПогрузкиЗаказовВАвто.ЗаказНеЗагружен;
		Иначе
			Движение.СтатусПогрузки = Перечисления.СтатусыПогрузкиЗаказовВАвто.ЗаказЗагружен;
		КонецЕсли;			
	КонецЦикла;

	
	Попытка
		ОтражениеЗаказовВРегистреОтвязокОтРейсов();
	Исключение
		
	КонецПопытки;	
КонецПроцедуры


Процедура ОтражениеЗаказовВРегистреОтвязокОтРейсов() Экспорт
	Для Каждого Тек Из Заказы Цикл
		Если Тек.РежимМодификации = Перечисления.РежимыМодификацииПогрузкиВАвто.ПерекидкаЗаказа Или Тек.РежимМодификации = Перечисления.РежимыМодификацииПогрузкиВАвто.ДобавлениеЗаказа Тогда
			Наб = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
			ТекВр = ТекущаяДата();
			Наб.Отбор.Период.Установить(ТекВр);
			Наб.Отбор.Рейс.Установить(Тек.ПогрузкаПриемник.Рейс);
			
			
			
			Нов = Наб.Добавить();
			Нов.Период = ТекВр;
			Нов.Рейс = Тек.ПогрузкаПриемник.Рейс;
			Нов.Заказ = Тек.Заказ;
			Нов.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ОтменаОтвязки;
			//РаботаСАдминкойСервер.ОчиститьТранспортПоЗаказу(Тек.Заказ.Номер); //оптимизировать
			
			// Якурнов 06.08.2018 14:05:14
			Нов.ДокументРегистратор = Ссылка;
			Наб.Записать();
			//Попытка
				РейсОбъект = Тек.ПогрузкаПриемник.Рейс.ПолучитьОбъект();
				РейсОбъект.Записать(РежимЗаписиДокумента.Запись);
				РейсОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
			//КонецПопытки;
		КонецеСли;
	КонецЦикла;	
КонецПроцедуры
