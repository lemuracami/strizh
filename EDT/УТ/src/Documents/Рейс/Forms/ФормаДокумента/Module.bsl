
&НаКлиенте
Процедура ЗаказыПередНачаломИзменения(Элемент, Отказ)
	//Отказ = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьДобавленияЗаказаВРейс(ДатаРейса, Заказ)
	Стр = Неопределено;
	
	Если НачалоДня(Заказ.Дата) <> НачалоДня(ДатаРейса) Тогда
		Стр = Новый Структура;
		Стр.Вставить("Результат", Ложь);
		Стр.Вставить("Причина", " неверная дата доставки заказа.");
	КонецеСли;
	
	Если Заказ.СтатусИнтернетМагазина <> 2 Тогда
		Стр = Новый Структура;
		Стр.Вставить("Результат", Ложь);
		Стр.Вставить("Причина", " неверный статус заказа (выполнен или отклонен).");
	КонецеСли;
	
	Если Стр = Неопределено Тогда
		Стр = Новый Структура;
		Стр.Вставить("Результат", Истина);
	КонецеСли;	
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ЗаказыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элементы.Заказы.ТекущиеДанные.ЗаказДобавленВРучную = Истина;
		Элементы.Заказы.ТекущиеДанные.ЗагруженИзВероут = Ложь;
	КонецеСли;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	       
	
	// МАС - 05.07.2018 - низя копировать рейс --->> 	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Отказ = Истина; 
		Сообщить("Копирование документов запрещено");
	КонецЕсли;	
	// <<--- МАС
	

	//+++ БАО 08.06.2017 №1024 
	//ТолькоПросмотр = Объект.РейсЗакрыт;
	ТолькоПросмотр = baoВызовСервера.РейсЗакрыт(Объект.Ссылка);
	//--- БАО 08.06.2017 №1024 
	
	// Михушкин --->>
	Если РольДоступна("РегиональныйЛогист") Тогда	
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	// <<--- Михушкин
	
	СписокЭкипажей.Параметры.УстановитьЗначениеПараметра("Рейс", Объект.Ссылка);	
	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	РейсЗаказы.Заказ.Номер КАК НомерЗаказа,
		            |	РейсЗаказы.НомерСтроки КАК НомерСтроки,
		            |	ВЫБОР
		            |		КОГДА ТИПЗНАЧЕНИЯ(РейсЗаказы.Заказ) = ТИП(Документ.ЗаборТовара)
		            |			ТОГДА РейсЗаказы.Заказ.Контрагент
		            |		ИНАЧЕ РейсЗаказы.Заказ.ВладелецТовара
		            |	КОНЕЦ КАК Контрагент
		            |ИЗ
		            |	Документ.Рейс.Заказы КАК РейсЗаказы
		            |ГДЕ
		            |	РейсЗаказы.Ссылка.Ссылка = &Док
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	РейсЗаказы.НомерСтроки";
		Зап.УстановитьПараметр("Док", Объект.Ссылка);
		
		Выб = Зап.Выполнить().Выбрать();
		
		Пока Выб.Следующий() Цикл
			СтрокаД = Объект.Заказы.Получить(Выб.НомерСтроки - 1);
			СтрокаД.НомерЗаказа = Выб.НомерЗаказа;
			СтрокаД.Контрагент = Выб.Контрагент;
		КонецЦикла	
	КонецЕсли;
	
	// МАС - 28.07.2017 - №1438 --->>
	ДобавитьПоляСтатусовПогрузкиЗаказов();	
	ЗаполнитьПоляСтатусовПогрузкиЗаказов();
	ДобавитьУсловноеОформлениеПолейСтатусовПогрузкиЗаказов();
	Элементы.Заказы.Обновить();
	// <<--- МАС
	
	
	// МАС - 26.09.2017 - №1846 --->> 
	Элементы.НадписьСменаНомера.Видимость = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОперативноеНазначениеТАНаРейсСрезПоследних.Период КАК Период,
	                      |	ОперативноеНазначениеТАНаРейсСрезПоследних.Рейс КАК Рейс,
	                      |	ОперативноеНазначениеТАНаРейсСрезПоследних.ТА КАК ТА
	                      |ИЗ
	                      |	РегистрСведений.ОперативноеНазначениеТАНаРейс.СрезПоследних(, Рейс = &Рейс) КАК ОперативноеНазначениеТАНаРейсСрезПоследних");
	Запрос.УстановитьПараметр("Рейс", Объект.Ссылка);
	РезТА = Запрос.Выполнить().Выбрать();
	Если РезТА.Следующий() Тогда
		НовыйНомерТА = РезТА.ТА;
		Элементы.НадписьСменаНомера.Видимость = Истина;	
		Элементы.НадписьСменаНомера.Заголовок = "По рейсу изменен номер телефона: " + СокрЛП(НовыйНомерТА);
	КонецЕсли;	
	// <<--- МАС 
	
	
	Если РольДоступна("Админы") Тогда	
		Элементы.РейсМестнойДоставки.ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	Если Не Объект.Ссылка.Пустая() Тогда
		ОтветПроверки = ПроверкаНаДублиЗаказовНаСервере();
		Если ОтветПроверки.ЕстьДубли Тогда 
			Отказ = Истина;
			Сообщить(ОтветПроверки.СтрокаЗаказов, СтатусСообщения.ОченьВажное);
			Возврат;
		КонецеСли;	
	КонецеСли;	
	
	//+++ БАО 14.08.2017 №1674
	Сч = 1;
	
	Для Каждого СтрокаТЧ Из Объект.Заказы Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Документ не записан - Не указан заказ в строке " + Сч +  "!";
			Сообщение.Поле = "Заказы[" + Формат(Сч, "ЧГ=0") + "].Заказ";
			Сообщение.Сообщить();
			Отказ = Истина;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	//--- БАО 14.08.2017 №1674
	
КонецПроцедуры


//в модуле формы по причине проверки только в интерактивном режиме
Функция ПроверкаНаДублиЗаказовНаСервере()
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	РейсЗаказы.Заказ,
	//            |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РейсЗаказы.Заказ) КАК КоличествоДублей
	//            |ПОМЕСТИТЬ ВТ_КоличествоДублей
	//            |ИЗ
	//            |	Документ.Рейс.Заказы КАК РейсЗаказы
	//            |ГДЕ
	//            |	РейсЗаказы.Ссылка.Ссылка = &Док
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РейсЗаказы.Заказ
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	ВТ_КоличествоДублей.Заказ.Номер Как Заказ,
	//            |	ВТ_КоличествоДублей.КоличествоДублей
	//            |ИЗ
	//            |	ВТ_КоличествоДублей КАК ВТ_КоличествоДублей
	//            |ГДЕ
	//            |	ВТ_КоличествоДублей.КоличествоДублей > 1";
	//Зап.УстановитьПараметр("Док", Объект.Ссылка);
	//Рез = Зап.Выполнить();
	
	Таб = Объект.Заказы.Выгрузить();
	Таб.Колонки.Добавить("Кол");
	Для Сч = 0 По Таб.Количество() - 1 Цикл
		Таб[Сч].Кол = 1;
	КонецЦикла;
	
	Таб.Свернуть("Заказ", "Кол");
	
	ЕстьДубли = Ложь;
	
	Стр = "Обнаружены дубли заказов: ";

	Для Сч = 0 По Таб.Количество() - 1 Цикл
		Если Таб[Сч].Кол > 1 Тогда
			ЕстьДубли = Истина;
			Стр = Стр + СокрЛП(Таб[Сч].Заказ.Номер) + ";"
		КонецЕсли;	
	КонецЦикла;	
	
	СтрукОтвета = Новый Структура;
	
	Если Не ЕстьДубли Тогда 
		СтрукОтвета.Вставить("ЕстьДубли", Ложь);
	Иначе	
		СтрукОтвета.Вставить("ЕстьДубли", Истина);
		СтрукОтвета.Вставить("СтрокаЗаказов", Стр);
	КонецеСли;	
	Возврат СтрукОтвета;
КонецФункции	

&НаКлиенте
Процедура ЗаказыЗаказПриИзменении(Элемент)
	Если Элементы.Заказы.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.Заказы.ТекущиеДанные.Заказ) Тогда
			Если ЗначениеЗаполнено(Элементы.Заказы.ТекущиеДанные.Заказ) Тогда
				Результат = ПроверитьВозможностьДобавленияЗаказаВРейс(Объект.ДатаРейса, Элементы.Заказы.ТекущиеДанные.Заказ);
				
				Если Не Результат.Результат Тогда
					Предупреждение("Этот заказ нельзя добавитьв рейс, причина:" + Результат.Причина);
					Элементы.Заказы.ТекущиеДанные.Заказ = "";
					Возврат;
				КонецеСли;	
			КонецеСЛи;
			
			// Якурнов 19.07.2018 13:50:20
			Если ТипЗнч(Элементы.Заказы.ТекущиеДанные.Заказ) = ТИП("ДокументСсылка.ЗаборТовара") Тогда
				Элементы.Заказы.ТекущиеДанные.Контрагент = Элементы.Заказы.ТекущиеДанные.Заказ.Контрагент;
			Иначе 	
				Элементы.Заказы.ТекущиеДанные.Контрагент = Элементы.Заказы.ТекущиеДанные.Заказ.ВладелецТовара;
			КонецЕсли;
			
			Элементы.Заказы.ТекущиеДанные.НомерЗаказа = Элементы.Заказы.ТекущиеДанные.Заказ.Номер;
			Если ТипЗнч(Элементы.Заказы.ТекущиеДанные.Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда
				Элементы.Заказы.ТекущиеДанные.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовВероут.COLLECTION");
			ИначеЕсли ТипЗнч(Элементы.Заказы.ТекущиеДанные.Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
				Элементы.Заказы.ТекущиеДанные.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовВероут.DROP");
			КонецеСли;	
		КонецЕсли;
	КонецеСли;
КонецПроцедуры


Процедура ДобавитьПоляСтатусовПогрузкиЗаказов()
	 
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("Состояние", Новый ОписаниеТипов("Строка"), "Объект.Заказы", "Состояние", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("Загружен", Новый ОписаниеТипов("Булево"), "Объект.Заказы", "Загружен", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("Причина", Новый ОписаниеТипов("ПеречислениеСсылка.ПричиныНеЗагрузкиЗаказовВТранспорт"), "Объект.Заказы", "Причина не загрузки товара в машину", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("НеУчитывать", Новый ОписаниеТипов("Булево"), "Объект.Заказы", "НеУчитывать", Истина));
	
	ИзменитьРеквизиты(нРеквизиты);
	
	Элементы.ЗаказыНомерСтроки.ФиксацияВТаблице = ФиксацияВТаблице.Лево;

	нЭлемент = Элементы.Добавить("Загружен", Тип("ПолеФормы"), Элементы.Заказы); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Заказы.Загружен";
	нЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	нЭлемент.Видимость = Ложь;
	
	нЭлемент = Элементы.Добавить("Состояние", Тип("ПолеФормы"), Элементы.Заказы); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	нЭлемент.ПутьКДанным = "Объект.Заказы.Состояние";
	
	нЭлемент = Элементы.Добавить("Причина", Тип("ПолеФормы"), Элементы.Заказы); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	нЭлемент.ПутьКДанным = "Объект.Заказы.Причина";
	
	// МАС - 22.08.2017 - №1614 --->> 
	нЭлемент = Элементы.Добавить("НеУчитывать", Тип("ПолеФормы"), Элементы.Заказы); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Заказы.НеУчитывать";
	нЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	нЭлемент.Видимость = Ложь;
	// <<--- МАС 
	

КонецПроцедуры


Процедура ЗаполнитьПоляСтатусовПогрузкиЗаказов()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РейсЗаказы.Заказ КАК Заказ,
	                      |	ЕСТЬNULL(УчетПогрузкиЗаказовВТранспортСрезПоследних.ЗаказЗагружен, ЛОЖЬ) КАК ЗаказЗагружен,
	                      |	УчетПогрузкиЗаказовВТранспортСрезПоследних.ПричинаНеЗагрузкиЗаказов КАК ПричинаНеЗагрузкиЗаказов,
	                      |	ВозвратТоваровОтПокупателя.Ссылка КАК ДокВозврат
	                      |ИЗ
	                      |	Документ.Рейс.Заказы КАК РейсЗаказы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетПогрузкиЗаказовВТранспорт.СрезПоследних КАК УчетПогрузкиЗаказовВТранспортСрезПоследних
	                      |		ПО РейсЗаказы.Заказ = УчетПогрузкиЗаказовВТранспортСрезПоследних.Заказ
	                      |			И (УчетПогрузкиЗаказовВТранспортСрезПоследних.ЭтапПогрузкиЗаказов = ЗНАЧЕНИЕ(Справочник.ЭтапыПогрузкиЗаказовВТранспорт.ПогрузкаВАвто))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	                      |		ПО РейсЗаказы.Заказ.Номер = ВозвратТоваровОтПокупателя.Номер
	                      |ГДЕ
	                      |	РейсЗаказы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		Най = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Рез.Заказ));
		Для каждого Ст Из Най Цикл			
			Ст.Загружен = Рез.ЗаказЗагружен;
			Ст.Причина = Рез.ПричинаНеЗагрузкиЗаказов;		
			// МАС - 22.08.2017 - №1614 --->> 
			Если ТипЗнч(Рез.Заказ) = Тип("ДокументСсылка.ЗаборТовара") 
				ИЛИ ТипЗнч(Рез.Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(Рез.ДокВозврат) И НЕ Рез.Заказ.Товары.Количество() И НЕ Рез.Заказ.ПодарочныеПозиции.Количество() Тогда
				Ст.НеУчитывать = Истина;
			Иначе
				Ст.НеУчитывать = Ложь;
			КонецЕсли;
			// <<--- МАС 		
		КонецЦикла;
		
	КонецЦикла;
	

КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеПолейСтатусовПогрузкиЗаказов()

	//ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Состояние");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Загружен");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Состояние");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Загружен");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лосось);
		
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Состояние");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.НеУчитывать");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	

КонецПроцедуры

//+++ БАО 31.07.2017 №1524

&НаКлиенте
Процедура ЗаказыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 2 Тогда
		
		ЗаказыПеретаскиваниеОбработатьПриемникИсточник(ПараметрыПеретаскивания);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 2 И  ПараметрыПеретаскивания.Значение[1].Тип = "Рейс"  И  ПараметрыПеретаскивания.Значение[1].Номер <> Объект.Номер Тогда
		
		Если Объект.Ссылка = "" Или ЭтаФорма.Модифицированность Тогда
			
			Ответ = Вопрос("Перекидывание заказов возможно только из записанного документа. Записать?", РежимДиалогаВопрос.ДаНет); 
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				
				ПараметрыПеретаскивания.Значение[1].Вставить("СтатусЗаписи", "Не записан");
				СтандартнаяОбработка = Ложь;
				Возврат;
				
			КонецЕсли;	
			
			Записать();
			
		КонецЕсли;	
		
		ПараметрыПеретаскивания.Значение[1].Вставить("ФормаПриемник", ЭтаФорма);
		
		СтандартнаяОбработка = Ложь;		
		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ЗаказыПеретаскиваниеОбработатьПриемникИсточник(ПараметрыПеретаскивания)
	
	//Приемник был изменен, но не записан
	Если ПараметрыПеретаскивания.Значение[1].Свойство("СтатусЗаписи") И  ПараметрыПеретаскивания.Значение[1].СтатусЗаписи = "Не записан" Или Не ПараметрыПеретаскивания.Значение[1].Свойство("ФормаПриемник")   Тогда
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Попытка
		
		НачатьТранзакцию();
		
		ПриемникОтправленВВероут = Ложь;
		ИсточникОтправленВВероут = Ложь;
		
		ТекстОшибки = "";  
		Заказ = Строка(ПараметрыПеретаскивания.Значение[1].Заказ);
		ЗаказСсылка = ПараметрыПеретаскивания.Значение[1].Заказ;
		РейсИсточник = ПараметрыПеретаскивания.Значение[1].Ссылка;
		РейсИсточникСтрока = Строка(РейсИсточник);	
		
		ФормаПриемник = ПараметрыПеретаскивания.Значение[1].ФормаПриемник;
		
		Если ТипЗнч(ФормаПриемник) <> Тип("Структура") Тогда

			ТекущаяСтрокаПриемник = ФормаПриемник.Элементы.Заказы.ТекущаяСтрока;
			
		КонецЕсли;	
		
		ФормаИсточник = ПараметрыПеретаскивания.Значение[1].ФормаИсточник;
		РейсПриемник = ФормаПриемник.Объект.Ссылка;
		ТекущаяСтрокаИсточник = ФормаИсточник.Элементы.Заказы.ТекущаяСтрока;
		РейсПриемникСтрока = Строка(РейсПриемник);
		
		НоваяСтруктура = Новый Структура;
		Для Каждого ЭлементСтруктуры Из ПараметрыПеретаскивания.Значение[1] Цикл 
			
			Если ЭлементСтруктуры.Ключ = "ФормаИсточник" Или ЭлементСтруктуры.Ключ = "ФормаПриемник"  Тогда
				
				Продолжить;
			
			КонецЕсли;
			
			НоваяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЦикла;	
		
		
		ЗаказыПеретаскиваниеЗаписатьДокументыНаСервере(НоваяСтруктура, РейсПриемник, РейсИсточник);
		
		Если ТипЗнч(ФормаПриемник) <> Тип("Структура") Тогда
			
			
			ФормаПриемник.Прочитать();
			ФормаПриемник.Элементы.Заказы.ТекущаяСтрока =  ТекущаяСтрокаПриемник + 1;
			
		КонецЕсли;
		
		ФормаИсточник.Прочитать();
		ФормаИсточник.Элементы.Заказы.ТекущаяСтрока =  ПараметрыПеретаскивания.Значение[1].НомерСтроки-1;

		
		Ф = ПолучитьФорму("Обработка.ВыгрузкаМашинВВероут.Форма.ФормаУправляемая", Неопределено, Неопределено);
		Ф.Объект.Дата = ТекущаяДата();
  
		
		Ошибка = "";
		
		//Тестовый
		//Ф.Объект.ВидСервера = 2;
		//Боевой
		//Ф.Объект.ВидСервера = 1; 
		
		Попытка
			Ошибка = Ф.ИмпортГотовогоРасписанияВВероут(ФормаПриемник.Объект.Ссылка);
		Исключение
		    Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		
		Если Ошибка <> "" Тогда
			ВызватьИсключение Ошибка;	
		КонецЕсли;
		ПриемникОтправленВВероут = Истина;


		Попытка
			Ошибка = Ф.ИмпортГотовогоРасписанияВВероут(ФормаИсточник.Объект.Ссылка);
		Исключение
		    Ошибка = ОписаниеОшибки();
		КонецПопытки;

		Если Ошибка <> "" Тогда
			ВызватьИсключение Ошибка;	
		КонецЕсли;
		ИсточникОтправленВВероут = Истина;
		

		ЗаписатьИсточникПриПеретаскивании(ЗаказСсылка, РейсИсточник, РейсПриемник, ТекстОшибки);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Сообщить("Возникла ошибка при перекидывании заказа. Действие отменено.");
					
		ФормаИсточник.Прочитать();
		ФормаИсточник.Элементы.Заказы.ТекущаяСтрока =  ТекущаяСтрокаИсточник;

		
		Если ТипЗнч(ФормаПриемник) <> Тип("Структура") Тогда
			
			ФормаПриемник.Прочитать();
			ФормаПриемник.Элементы.Заказы.ТекущаяСтрока =  ТекущаяСтрокаПриемник;
			
		КонецЕсли;
	
		ТекстОшибки = ОписаниеОшибки();
		
		//ЗаписьЖурналаРегистрации("Рейс.Перекидка",УровеньЖурналаРегистрации.Ошибка,,, 
		//"" + ТекущаяДата() + " " + ПараметрыПеретаскивания.Значение[1].Номер + " " +  Заказ + " " + 
		//Объект.Ссылка +  ?(ТекстОшибки = "", Ложь, Истина) +  " " + УправлениеПользователями.ОпределитьТекущегоПользователя() + " " + ТекстОшибки);
		
			
		Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(ПредопределенноеЗначение("Перечисление.ВидыСобытийУведомленияАбонентов.РейсПерекидка_ОшибкаПерекидки"));
		
		Если Мас.Количество() > 0 Тогда
			
			ТекстПисьма =  "" + ТекущаяДата() + " Приемник " + РейсПриемникСтрока + " Источник " + РейсИсточникСтрока + ". Заказ " +  Заказ + " " + Символы.ПС +  "Пользователь: " + УправлениеПользователями.ОпределитьТекущегоПользователя() + Символы.ПС + " " + ТекстОшибки;
			
			lem.ОтправитьСообщение(Мас, "Ошибка при перекидке заказа", ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст); 		
			
		КонецЕсли;
		
		Если ПриемникОтправленВВероут Тогда
			
			Ошибка = "";
			
			Попытка
				Ошибка = Ф.ИмпортГотовогоРасписанияВВероут(ФормаПриемник.Объект.Ссылка);
			Исключение
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
			
			
			Если Ошибка <> "" Тогда
				
				Если Мас.Количество() > 0 Тогда
					
					ТекстПисьма =  "" + ТекущаяДата() + " Приемник:" + РейсИсточникСтрока;
					
					lem.ОтправитьСообщение(Мас, "Ошибка при откате в вероуте", ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст); 		
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ИсточникОтправленВВероут Тогда
			
			Ошибка = "";
			
			Попытка
				Ошибка = Ф.ИмпортГотовогоРасписанияВВероут(ФормаИсточник.Объект.Ссылка);
			Исключение
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
			
			
			Если Ошибка <> "" Тогда
				
				Если Мас.Количество() > 0 Тогда
					
					ТекстПисьма =  "" + ТекущаяДата() + " Источник:" + РейсИсточникСтрока;
					
					lem.ОтправитьСообщение(Мас, "Ошибка при откате в вероуте", ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст); 		
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		ЗаписатьИсточникПриПеретаскивании(ЗаказСсылка, РейсИсточник, РейсПриемник, ТекстОшибки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаказыПеретаскиваниеЗаписатьДокументыНаСервере(НоваяСтруктура, РейсПриемник, РейсИсточник);
	
	ОбъектПриемник =  РейсПриемник.ПолучитьОбъект();
	ОбъектИсточник =  РейсИсточник.ПолучитьОбъект();
	
	НоваяСтрока = ОбъектПриемник.Заказы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтруктура);	
	Если ОбъектПриемник.Проведен Тогда
		ОбъектПриемник.Записать(РежимЗаписиДокумента.Проведение);
	Иначе 	                      
		ОбъектПриемник.Записать();
	КонецЕсли;	
	
	ОбъектИсточник.Заказы.Удалить(НоваяСтруктура.НомерСтроки-1);
	Если ОбъектИсточник.Проведен Тогда
		ОбъектИсточник.Записать(РежимЗаписиДокумента.Проведение);
	Иначе 	                      
		ОбъектИсточник.Записать();
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьИсточникПриПеретаскивании(ЗаказСсылка, РейсИсточник, РейсПриемник, ТекстОшибки)
	
	МенеджерЗаписи  = РегистрыСведений.УчетПерекидкиЗаказовМеждуРейсами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Заказ = ЗаказСсылка;
		
	МенеджерЗаписи.РейсИсточник = РейсИсточник;
	МенеджерЗаписи.РейсПриемник = РейсПриемник;
	МенеджерЗаписи.ВозниклаОшибка = ?(ТекстОшибки = "", Ложь, Истина);
		
	МенеджерЗаписи.Пользователь = УправлениеПользователями.ОпределитьТекущегоПользователя();
	МенеджерЗаписи.ОписаниеОшибки = ТекстОшибки;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Объект.Ссылка = "" Или ЭтаФорма.Модифицированность Тогда
		
		Ответ = Вопрос("Перекидывание заказов возможно только из записанного документа. Записать?", РежимДиалогаВопрос.ДаНет); 
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			
			Выполнение = Ложь;
			Возврат;
			
		КонецЕсли;	
		
		Записать();
		
	КонецЕсли;	
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено  Тогда
		
		Структура = Новый Структура;
		                                                             
		Структура.Вставить("Тип", "Рейс") ;
		Структура.Вставить("Номер",Объект.Номер);
		
		Структура.Вставить("Вес",ТекДанные.Вес);
		Структура.Вставить("ВидЗаказа",ТекДанные.ВидЗаказа);
		Структура.Вставить("ЗагруженИзВероут",ТекДанные.ЗагруженИзВероут);
		Структура.Вставить("Заказ",ТекДанные.Заказ);
		Структура.Вставить("ЗаказДобавленВРучную",ТекДанные.ЗаказДобавленВРучную);
		Структура.Вставить("ИсходныйНомерСтроки",ТекДанные.ИсходныйНомерСтроки);
		Структура.Вставить("НомерЗаказа",ТекДанные.НомерЗаказа);
		Структура.Вставить("НомерПоездки",ТекДанные.НомерПоездки);
		Структура.Вставить("Объем",ТекДанные.Объем);
		Структура.Вставить("ПродолжительностьОперации",ТекДанные.ПродолжительностьОперации);
		Структура.Вставить("СтатусЗаказа",ТекДанные.СтатусЗаказа) ;
		Структура.Вставить("УдаленИзРейса",ТекДанные.УдаленИзРейса) ;
		Структура.Вставить("Ссылка",Объект.Ссылка);
		Структура.Вставить("НомерСтроки",ТекДанные.НомерСтроки);
		Структура.Вставить("ФормаИсточник", ЭтаФорма);
		
		ПараметрыПеретаскивания.Значение.Добавить(Структура);


	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработчикОшиданияАктивизацииСтрокиНаКлиенте() Экспорт 	
	
	//СписокРейсов = ПолучитьРейсыНаСегодняКромеТекущего(Объект.Ссылка);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьРейсыНаСегодняКромеТекущего(Рейс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РейсДокумент.Транспорт.Наименование КАК Транспорт,
	               |	ВЫБОР
	               |		КОГДА ПривязкаМашинКРейсамСрезПоследних.Период ЕСТЬ NULL
	               |			ТОГДА ""Не привязан""
	               |		ИНАЧЕ ПривязкаМашинКРейсамСрезПоследних.Водитель.Наименование
	               |	КОНЕЦ КАК Водитель,
	               |	РейсДокумент.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Рейс КАК РейсДокумент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	               |		ПО РейсДокумент.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	               |ГДЕ
	               |	РейсДокумент.ДатаРейса МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаРейса, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаРейса, ДЕНЬ)
	               |	И РейсДокумент.Ссылка <> &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Транспорт,
	               |	Водитель";
				   
	Запрос.УстановитьПараметр("Ссылка", Рейс);			   
//	Запрос.УстановитьПараметр("ДатаРейса", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаРейса", Дата(2017,07,28));

	
	СтруктураВозврата = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СтруктураВозврата.Вставить(Выборка.Транспорт + " - " + Выборка.Водитель, Строка(Выборка.Ссылка.УникальныйИдентификатор()) ); 	
		
	КонецЦикла;	
	
	
	Возврат СтруктураВозврата;
	
КонецФункции	

&НаКлиенте
Процедура ПерекинутьЗаказВДругойРейс(Команда)
	
	Если Элементы.Заказы.ТолькоПросмотр  Или ЭтаФорма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка = "" Или ЭтаФорма.Модифицированность Тогда
		
		Ответ = Вопрос("Перекидывание заказов возможно только из записанного документа. Записать?", РежимДиалогаВопрос.ДаНет); 
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
			
		КонецЕсли;	
		
		Записать();
		
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущийРейс", Объект.Ссылка);
		ПараметрыФормы.Вставить("Заказ", ТекущиеДанные.Заказ);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Ответ = ОткрытьФормуМодально("Документ.Рейс.Форма.ФормаВыбораРейса", ПараметрыФормы, ЭтаФорма);
		
		Если Ответ <> Неопределено Тогда
			
			ПараметрыПеретаскивания = Новый Структура;	
			
			Значение  = Новый Структура;
			
			Значение.Вставить("Заказ",  ТекущиеДанные.Заказ);
			Значение.Вставить("Ссылка",  Объект.Ссылка);
			Значение.Вставить("ФормаИсточник",  ЭтаФорма);
			
			СтруктураФормы = Новый Структура;
			СтруктураОбъект = Новый Структура;
			СтруктураОбъект.Вставить("Ссылка", Ответ);
			СтруктураФормы.Вставить("Объект", СтруктураОбъект);
			
			
			Значение.Вставить("ФормаПриемник",  СтруктураФормы);
			Значение.Вставить("СтатусЗаписи",  "Записан");
			Значение.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
			
			Массив = Новый Массив;
			Массив.Добавить("Пусто");
			Массив.Добавить(Значение);
			
			ПараметрыПеретаскивания.Вставить("Пусто", "Пусто");
			ПараметрыПеретаскивания.Вставить("Значение", Массив);
			
		
			Если ЗаказыПеретаскиваниеОбработатьПриемникИсточник(ПараметрыПеретаскивания) Тогда
				
				//НомерСтроки = Элементы.Заказы.ТекущаяСтрока - 1;
				//ЭтаФорма.Прочитать();
				//Элементы.Заказы.ТекущаяСтрока = НомерСтроки;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВедомости(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Перед печатью ведомости документ необходимо записать!");
	Иначе
		ТабличныйДокумент = Документы.Рейс.ПолучитьТабличныйДокументИДанныеЗаказовКОтвязке_Старая(, Объект.Ссылка);
		ТабличныйДокумент.Показать();
	КонецЕсли;	
КонецПроцедуры

//МАС - 21.09.2017 - №1846 - Оперативное назначение ТА --->>
&НаКлиенте
Процедура СменитьНомерТА(Команда)
		
	Парам = Новый Структура("Рейс", Объект.Ссылка);
	Парам.Вставить("НомерРейса", Объект.РейсМестнойДоставки.Номер);
	ОткрытьФорму("Справочник.ТелефонныеАппараты.ФормаВыбора",, ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеВыбораНовогоТА", ЭтотОбъект, Парам));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНовогоТА(Пар1, Пар2) Экспорт

	
	Если ЗначениеЗаполнено(Пар1) И ЗначениеЗаполнено(Пар2) Тогда
		ПослеВыбораНовогоТАНаСервере(Пар1, Пар2);	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПослеВыбораНовогоТАНаСервере(Пар1, Пар2)
			// пишем в регистр
		РейсСсылка = Пар2.Рейс.Ссылка;
				
		ТекВр = НачалоДня(ТекущаяДата());
		Набор = РегистрыСведений.ОперативноеНазначениеТАНаРейс.СоздатьНаборЗаписей();
		Набор.Отбор.Рейс.Установить(РейсСсылка);
		Набор.Отбор.Период.Установить(ТекВр);
		Набор.Прочитать();
		Набор.Очистить();
		
		НЗапись = Набор.Добавить();
		НЗапись.Период = ТекВр;
		НЗапись.Рейс = РейсСсылка;
		НЗапись.ТА = Пар1;	
		
		Набор.Записать();
		
		
		// пуляем в админку	
		tripId = Формат(Число(Пар2.НомерРейса), "ЧГ=");
		temporary_phone = Пар1.Телефон;
		
		Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
		ТекстЗапроса = "EXEC import_setTripTemporary_phoneFrom1C " + tripId + ",'" + temporary_phone + "'";
		Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Соединение);
		Евген.ОтключитьсяОтADO(Соединение);
	
КонецПроцедуры	

//CeHbKA 11/01/2017
&НаКлиенте
Процедура ЗаказыЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
				
		РезультатПроверки = ПроверкаВыбранногоЗаказа(ВыбранноеЗначение, Объект.ДатаРейса, Объект.Ссылка);
		
		Если РезультатПроверки.Количество() > 0 Тогда
						
			ТекстСообщения = "ВНИМАНИЕ! "+Символы.ПС+""+ВыбранноеЗначение+" уже используется в рейсах:";
			//Сообщить("ВНИМАНИЕ! "+Символы.ПС+""+ВыбранноеЗначение+" уже используется в рейсах:", СтатусСообщения.ОченьВажное);
			
			Для каждого СтрокаСоотв Из РезультатПроверки Цикл
				//Сообщить("- "+СтрокаСоотв.Ключ+" "+СтрокаСоотв.Значение, СтатусСообщения.ОченьВажное);	
				ТекстСообщения = ТекстСообщения + Символы.ПС + "- "+СтрокаСоотв.Ключ+" "+СтрокаСоотв.Значение;	
			КонецЦикла;
			
			ПоказатьПредупреждение(,ТекстСообщения,,);
	
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаВыбранногоЗаказа(Заказ, ДатаДокумента, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РейсЗаказы.Ссылка КАК ДокументРейс,
		|	РейсЗаказы.Заказ КАК Заказ,
		|	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Транспорт, ЗНАЧЕНИЕ(Справочник.новаТранспорт.ПустаяСсылка)) КАК Транспорт
		|ИЗ
		|	Документ.Рейс.Заказы КАК РейсЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
		|		ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
		|ГДЕ
		|	РейсЗаказы.Ссылка <> &Ссылка
		|	И РейсЗаказы.Заказ = &Заказ
		|	И РейсЗаказы.Ссылка.Проведен
		|	И РейсЗаказы.Ссылка.ДатаРейса МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ РейсЗаказы.УдаленИзРейса";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СоотвРейсТранспорт = Новый Соответствие;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СоотвРейсТранспорт.Вставить(Выборка.ДокументРейс, Выборка.Транспорт);
		КонецЦикла; 
		
		Возврат СоотвРейсТранспорт;
		
	КонецЕсли; 
	
	Возврат Новый Соответствие;
	
КонецФункции // ()

&НаКлиенте
Процедура ЗаказыЗаказАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

//CeHbKA 11/01/2017
 
// <<--- МАС

