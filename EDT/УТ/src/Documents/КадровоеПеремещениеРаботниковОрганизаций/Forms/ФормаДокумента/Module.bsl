
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//CeHbKA 13.05.2019 #3103
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Терминал = ПараметрыСеанса.ТерминалДоставки;
		Объект.Терминал = ?(Объект.Терминал.Пустая(), Справочники.РегиональныеТерминалы.МоскваСтриж, Объект.Терминал);
		Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;	
	//CeHbKA 13.05.2019 #3103
	
КонецПроцедуры

//&НаСервере
//Функция ПолучитьБэйджНаСервере(ТекСотрудник)
//	
//	// ищем бэйдж
//	Запрос = Новый Запрос("ВЫБРАТЬ
//	                      |	БэйджиСотрудников.Ссылка КАК Ссылка,
//	                      |	УчетБэйджейСотрудниковСрезПервых.Сотрудник КАК Сотрудник,
//	                      |	ЕСТЬNULL(УчетБэйджейСотрудниковСрезПервых.БэйджАктуален, ЛОЖЬ) КАК БэйджАктуален
//	                      |ИЗ
//	                      |	Справочник.БэйджиСотрудников КАК БэйджиСотрудников
//	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетБэйджейСотрудников.СрезПервых КАК УчетБэйджейСотрудниковСрезПервых
//	                      |		ПО БэйджиСотрудников.Владелец = УчетБэйджейСотрудниковСрезПервых.Сотрудник
//	                      |ГДЕ
//	                      |	БэйджиСотрудников.Владелец = &Владелец");
//	Запрос.УстановитьПараметр("Владелец", ТекСотрудник);
//	Рез = Запрос.Выполнить().Выбрать();
//	
//	Если Рез.Следующий() Тогда			
//		Если Рез.БэйджАктуален Тогда			
//			
//			Возврат Рез.ссылка;		
//		Иначе
//		    Сообщить("Бэйдж сотрудника более не актуален. ");
//			Возврат Неопределено;	
//		КонецЕсли;				
//	Иначе
//		Сообщить("Нет назначенного бейджа. ");
//		Возврат Неопределено;	
//	КонецЕсли;
//	
//	
//КонецФункции


&НаКлиенте
Процедура ПечатьБэйджей(Команда)
	
	МассивБэйджей = Новый Массив;
	
	Для каждого Чел Из Объект.Сотрудники Цикл
	
		Бэйдж = ПолучитьБэйджНаСервере(Чел.Сотрудник);	
	    Если Бэйдж = Неопределено Тогда	
			//// вопрос о создании бэйджа
			//Парам = Новый Структура("Сотрудник", ТекСотрудник);
			//ТекстВопроса = "Создать и назначить бэйдж на сотрудника " + ТекСотрудник + "?";
			//ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьБэйдж", ЭтотОбъект, Парам), ТекстВопроса, РежимДиалогаВопрос.ДаНет);   
			Бэйдж = mas.СоздатьБэйджСотрудника(Чел.Сотрудник);
		Иначе				
		КонецЕсли;
		МассивБэйджей.Добавить(Бэйдж);
		
	КонецЦикла;
	
	
	Если МассивБэйджей.Количество() Тогда		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент = mas.ПечатьБэйджаГрупповая(МассивБэйджей, ТабличныйДокумент);	
		ТабличныйДокумент.Показать();		
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьБэйдж(Парам1, Парам2) Экспорт

	Если Парам1 = КодВозвратаДиалога.Да Тогда 
		Бэйдж = mas.СоздатьБэйджСотрудника(Парам2.Сотрудник);	
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		mas.НапечататьБэйджНаСервере(Бэйдж.Ссылка, ТабличныйДокумент);
		ТабличныйДокумент.Показать();
	Иначе	
	КонецЕсли;
	
КонецПроцедуры

// печать бэйджа
Процедура НапечататьБэйджНаСервере(БэйджСсылка, ТабличныйДокумент)

		
	Макет = Справочники.БэйджиСотрудников.ПолучитьМакет("Бэйдж");
	//ТабличныйДокумент = Новый ТабличныйДокумент;	
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Должность = "";
	Если ТипЗнч(БэйджСсылка.Владелец) = Тип("СправочникСсылка.новаВодители") Тогда		
		Должность = "Водитель";	
	ИначеЕсли ТипЗнч(БэйджСсылка.Владелец) = Тип("СправочникСсылка.новаЭкспедиторы") Тогда	
		Должность = "Экспедитор";	
	КонецЕсли;
	
	ОбластьБэйджа = Макет.ПолучитьОбласть("ОбластьБэйджа");
	
	ОбластьБэйджа.Параметры.ФИО = БэйджСсылка.Владелец.Наименование;		
	ОбластьБэйджа.Параметры.Должность = Должность;
	ОбластьБэйджа.Параметры.Штрихкод = may.ПолучитьШКCode_39(СокрЛП(БэйджСсылка.Код));	

	ТабличныйДокумент.Вывести(ОбластьБэйджа);
	

КонецПроцедуры


Функция ПолучитьБэйджНаСервере(Владелец) Экспорт
	
	// ищем бэйдж
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БэйджиСотрудников.Ссылка КАК Ссылка,
	                      |	УчетБэйджейСотрудниковСрезПервых.Сотрудник КАК Сотрудник,
	                      |	ЕСТЬNULL(УчетБэйджейСотрудниковСрезПервых.БэйджАктуален, ЛОЖЬ) КАК БэйджАктуален
	                      |ИЗ
	                      |	Справочник.БэйджиСотрудников КАК БэйджиСотрудников
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетБэйджейСотрудников.СрезПервых КАК УчетБэйджейСотрудниковСрезПервых
	                      |		ПО БэйджиСотрудников.Владелец = УчетБэйджейСотрудниковСрезПервых.Сотрудник
	                      |ГДЕ
	                      |	БэйджиСотрудников.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда			
		Если Рез.БэйджАктуален Тогда			
			
			Возврат Рез.ссылка;		
		Иначе
		    Сообщить("Бэйдж сотрудника более не актуален: " + Владелец);
			Возврат Неопределено;	
		КонецЕсли;				
	Иначе
		Сообщить("Нет назначенного бейджа: " + Владелец);
		Возврат Неопределено;	
	КонецЕсли;
	
	
КонецФункции

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	ЗаполнитьДанныеСотрудника();
		
КонецПроцедуры

//Переварюха В.В. Задача № 3649 07.11.2019
&НаКлиенте
Процедура СотрудникиДолжностьПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Сотрудники.ТекущиеДанные;
	ДанныеДолжности = ПолучитьДанныеДолжности(ТекСтрока.Должность);
	ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеДолжности);
	
КонецПроцедуры
//Переварюха В.В. Задача № 3649 07.11.2019

//Асеев 20.03.2023 (Задача № 5015)>>>
Функция ПолучитьДанныеДолжности(Знач Должность)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолжностиОрганизаций.РольСотрудника КАК ОсновнаяРольСотрудника
	|ИЗ
	|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|ГДЕ
	|	ДолжностиОрганизаций.Ссылка = &Должность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеДолжности = Новый Структура("ОсновнаяРольСотрудника");
	ЗаполнитьЗначенияСвойств(ДанныеДолжности, Выборка);
	
	Возврат ДанныеДолжности;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудника(Знач Сотрудник, Знач Организация, Знач ДатаПеремещения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(ДатаПеремещения), ДатаПеремещения - 1, ДатаПеремещения));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	новаВодители.ФизЛицо
	|ИЗ
	|	Справочник.новаВодители КАК новаВодители
	|ГДЕ
	|	новаВодители.Ссылка = &Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	новаЭкспедиторы.ФизЛицо
	|ИЗ
	|	Справочник.новаЭкспедиторы КАК новаЭкспедиторы
	|ГДЕ
	|	новаЭкспедиторы.Ссылка = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФизЛицо.ФизЛицо КАК ФизЛицо,
	|	ВТ_РаботникиОрганизаций.Подразделение КАК ПодразделениеСтарое,
	|	ВТ_РаботникиОрганизаций.Должность КАК ДолжностьСтарая,
	|	ВТ_РаботникиОрганизаций.ГрафикУчетаРабочегоВремени КАК ГрафикРаботыСтарый,
	|	ВТ_РаботникиОрганизаций.ОсновноеНачисление КАК ОсновноеНачислениеСтарое,
	|	ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника КАК ОсновнаяРольСотрудникаСтарая
	|ИЗ
	|	ВТ_ФизЛицо КАК ВТ_ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			РаботникиОрганизации.Подразделение КАК Подразделение,
	|			РаботникиОрганизации.Должность КАК Должность,
	|			РаботникиОрганизации.ГрафикУчетаРабочегоВремени КАК ГрафикУчетаРабочегоВремени,
	|			РаботникиОрганизации.ОсновноеНачисление КАК ОсновноеНачисление
	|		ИЗ
	|			ВТ_ФизЛицо КАК ВТ_ФизЛицо
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации_Уволен
	|					ПО РаботникиОрганизации.Период < РаботникиОрганизации_Уволен.Период
	|						И (РаботникиОрганизации_Уволен.Организация = &Организация)
	|						И РаботникиОрганизации.ФизЛицо = РаботникиОрганизации_Уволен.ФизЛицо
	|						И (РаботникиОрганизации_Уволен.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.Уволен))
	|				ПО (РаботникиОрганизации.Период <= &Период)
	|					И (РаботникиОрганизации.Организация = &Организация)
	|					И ВТ_ФизЛицо.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|					И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
	|		ГДЕ
	|			РаботникиОрганизации_Уволен.Период ЕСТЬ NULL
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			РаботникиОрганизации.Период УБЫВ) КАК ВТ_РаботникиОрганизаций
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних(
	|				,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВТ_ФизЛицо.ФизЛицо КАК ФизЛицо
	|					ИЗ
	|						ВТ_ФизЛицо КАК ВТ_ФизЛицо)) КАК ДополнительныеПараметрыФизЛицСрезПоследних
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеСотрудника = Новый Структура("ФизЛицо,ПодразделениеСтарое,ДолжностьСтарая,ГрафикРаботыСтарый,ОсновноеНачислениеСтарое,ОсновнаяРольСотрудникаСтарая");
	ЗаполнитьЗначенияСвойств(ДанныеСотрудника, Выборка);
	
	Возврат ДанныеСотрудника;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеСотрудника()
	
	ТекСтрока = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПеремещения) Тогда
		ТекСтрока.ДатаПеремещения = ТекущаяДата();
	КонецЕсли;
	ДанныеСотрудника = ПолучитьДанныеСотрудника(ТекСтрока.Сотрудник, Объект.Организация, ТекСтрока.ДатаПеремещения);
	ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеСотрудника);
	ТекСтрока.Подразделение = ТекСтрока.ПодразделениеСтарое;
	ТекСтрока.Должность = ТекСтрока.ДолжностьСтарая;
	ТекСтрока.ГрафикРаботы = ТекСтрока.ГрафикРаботыСтарый;
	ТекСтрока.ОсновноеНачисление = ТекСтрока.ОсновноеНачислениеСтарое;
	ТекСтрока.ОсновнаяРольСотрудника = ТекСтрока.ОсновнаяРольСотрудникаСтарая;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаПриемаПриИзменении(Элемент)
	
	СтрокаСотрудника = Элементы.Сотрудники.ТекущиеДанные;
	
	Если СтрокаСотрудника.ДатаПеремещения < НачалоДня(Объект.Дата) Тогда
		ПоказатьПредупреждение(, "Дата перемещения не может быть раньше даты документа!");
		СтрокаСотрудника.ДатаПеремещения = Объект.Дата;
	КонецЕсли;
	
	ЗаполнитьДанныеСотрудника();
	
КонецПроцедуры
//Асеев 20.03.2023 (Задача № 5015)<<<

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДатаДокумента = НачалоДня(Объект.Дата);
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Если СтрокаСотрудника.ДатаПеремещения < ДатаДокумента Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, "Дата перемещения в строке " + СтрокаСотрудника.НомерСтроки + " не может быть раньше даты документа!");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

