#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Объект.Терминал = ПараметрыСеанса.ТерминалДоставки;
		Объект.Терминал = ?(Объект.Терминал.Пустая(), Справочники.РегиональныеТерминалы.МоскваСтриж, Объект.Терминал);
		Объект.Период = НачалоМесяца(ТекущаяДата());
		//Геннадий #3395 08.07.2020 ->
		Объект.ВидЗанятости = Перечисления.зпВидыЗанятости.ОсновнаяЗанятость;
		//Геннадий #3395 08.07.2020 <-
	Иначе
		ТабличнаяЧастьВТаблицуФормы();
	КонецЕсли; 
	
	НастройкаОтображенияФормы();
	УстановитьОформлениеСтрок();
	
	ВосстановитьНастройки();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	МесяцРегистрацииСтрокой = ПолучитьПредставлениеМесяца(Объект.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Объект.График.Очистить();
	
	Для каждого ТекСтрокаТЗ Из ТаблицаГрафика Цикл
		
		Для Сч = 1 По 31 Цикл
			
			ЗначениеДня = ТекСтрокаТЗ["ЗначениеДня"+Сч];
			
			Если ЗначениеЗаполнено(ЗначениеДня) Тогда
				
				НС = Объект.График.Добавить();
				НС.ФизЛицо 				= ТекСтрокаТЗ.ФизЛицо;
				НС.ДолжностьСотрудника 	= ТекСтрокаТЗ.ДолжностьСотрудника;
				НС.Подразделение 		= ТекСтрокаТЗ.Подразделение;
				НС.Дата 				= Объект.Период + ((Сч - 1) * 86400);
				
				Если ТипЗнч(ЗначениеДня) 		= Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени") Тогда
					НС.ВидОтработанногоВремени 	= ЗначениеДня;
					НС.РольСотрудника 			= ТекСтрокаТЗ.ДолжностьСотрудника;
				ИначеЕсли ТипЗнч(ЗначениеДня) = Тип("СправочникСсылка.РолиСотрудников") Тогда				
					НС.РольСотрудника 			= ЗначениеДня;
					НС.ВидОтработанногоВремени 	= ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.Работа");
				КонецЕсли;
				
			КонецЕсли; 	
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область ЭлементыФормы

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "МесяцРегистрацииСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	//ПериодРегистрацииПриИзменении();
	НастройкаОтображенияФормы();
	
	//Переварюха В.В. 04.02.2020
	ПересчитатьТаблицуСвод();
	//Переварюха В.В. 04.02.2020
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриИзменении(Элемент)
	
	ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "МесяцРегистрацииСтрокой", Модифицированность);
	
	//ПериодРегистрацииПриИзменении();
	
	НастройкаОтображенияФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "МесяцРегистрацииСтрокой", Направление, Модифицированность);
	
	//ПериодРегистрацииПриИзменении();
	
	НастройкаОтображенияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросЧиститьТЧ", ЭтаФорма, "ТаблицаГрафика");
	
	Если ТаблицаГрафика.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, "Табличная часть будет очищена."+Символы.ПС+"Продолжить?", РежимДиалогаВопрос.ДаНет);	
	Иначе
		ПослеОтветаНаВопросЧиститьТЧ(КодВозвратаДиалога.Да, "ТаблицаГрафика");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросЧиститьТЧ(Результат, ИмяТЧ) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 
	
	//CeHbKA 08.12.2020
	Если ИмяТЧ = "ТаблицаГрафика" Тогда
		ЗаполнитьТаблицуГрафика();
	ИначеЕсли ИмяТЧ = "УчетПоЧасовойОплаты" Тогда	
		ЗаполнитьЧасыНаСервере();
	КонецЕсли; 	
	//CeHbKA 08.12.2020
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ЗаполнитьТаблицуГрафика()

	МассивСотрудниковБезФизЛиц = ЗаполнитьНаСервере();	

	//CeHbKA 10.11.2020
	//перенесено из ЗаполнитьНаСервере()
	Для каждого ТекСтрока Из ТаблицаГрафика Цикл
								
		Для Сч = 1 По День(КонецМесяца(Объект.Период)) Цикл
			ТекСтрока["ЗначениеДня"+Сч] = ТекСтрока.ЗначениеДня1;
			ТекСтрока["ПредставлениеДня"+Сч] = ?(ТипЗнч(ТекСтрока.ЗначениеДня1) = Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"), ТекСтрока.ЗначениеДня1.БуквенныйКод, ТекСтрока.ЗначениеДня1);			
		КонецЦикла;
		
		ТекСтрока["ПредставлениеДня"] = ПересчитатьКоличествоРабочихДнейВСтроке(ТекСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	//CeHbKA 10.11.2020
	
	Для каждого ПустойСотрудник Из МассивСотрудниковБезФизЛиц Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "У сотрудника "+ПустойСотрудник+" не заполнено Физ.лицо!";
		Сообщение.Сообщить(); 
	КонецЦикла; 	

КонецПроцедуры // ()
 
//CeHbKA #4381 04.12.2020
&НаКлиенте
Процедура ЗаполнитьЧасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросЧиститьТЧ", ЭтаФорма, "УчетПоЧасовойОплаты");
	
	Если ТаблицаГрафика.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, "Табличная часть будет очищена."+Символы.ПС+"Продолжить?", РежимДиалогаВопрос.ДаНет);	
	Иначе
		ПослеОтветаНаВопросЧиститьТЧ(КодВозвратаДиалога.Да, "УчетПоЧасовойОплаты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧасыНаСервере()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    //2.1
		"ВЫБРАТЬ
		|	ГрафикРаботыСотрудниковГрафик.ФизЛицо КАК ФизЛицо,
		|	ГрафикРаботыСотрудниковГрафик.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ГрафикРаботыСотрудниковГрафик.Дата КАК ДатаДень,
		|	ГрафикРаботыСотрудниковГрафик.РольСотрудника КАК РольСотрудника
		|ПОМЕСТИТЬ ВТ_1
		|ИЗ
		|	Документ.ГрафикРаботыСотрудников.График КАК ГрафикРаботыСотрудниковГрафик
		|ГДЕ
		|	ГрафикРаботыСотрудниковГрафик.Ссылка = &Ссылка
		|	И ГрафикРаботыСотрудниковГрафик.РольСотрудника.Начисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.УчетЧасов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_1.ФизЛицо КАК ФизЛицо,
		|	ВТ_1.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ВТ_1.ДатаДень КАК ДатаДень,
		|	ВТ_1.РольСотрудника КАК РольСотрудника,
		|	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Рейс, ЗНАЧЕНИЕ(Документ.Рейс.ПустаяСсылка)) КАК Рейс,
		|	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК Водитель,
		|	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Экспедитор, ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)) КАК Экспедитор
		|ПОМЕСТИТЬ ВТ_2
		|ИЗ
		|	ВТ_1 КАК ВТ_1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
		|		ПО (НАЧАЛОПЕРИОДА(ВТ_1.ДатаДень, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПривязкаМашинКРейсамСрезПоследних.Рейс.ДатаРейса, ДЕНЬ))
		|			И ВТ_1.ФизЛицо = ПривязкаМашинКРейсамСрезПоследних.Водитель.ФизЛицо
		|ГДЕ
		|	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Рейс, ЗНАЧЕНИЕ(Документ.Рейс.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.Рейс.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_2.ФизЛицо КАК ФизЛицо,
		|	ВТ_2.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ВТ_2.ДатаДень КАК Дата,
		|	ВТ_2.РольСотрудника КАК РольСотрудника,
		|	ВТ_2.Рейс КАК Рейс,
		|	ВТ_2.Водитель КАК Водитель,
		|	ВТ_2.Экспедитор КАК Экспедитор,
		|	ВЫБОР
		|		КОГДА ВТ_2.Экспедитор <> ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.зпСоставЭкипажа.ВодительСЭкспедитором)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.зпСоставЭкипажа.ВодительБезЭкспедитора)
		|	КОНЕЦ КАК СоставЭкипажа,
		|	ВТ_2.РольСотрудника.Начисление КАК Начисление,
		|	ЕСТЬNULL(СформированныйГрафикПоТранспортуСрезПоследних.РольРейса, ЗНАЧЕНИЕ(Справочник.РолиТранспорта.ПустаяСсылка)) КАК РольРейса
		|ПОМЕСТИТЬ ВТ_3
		|ИЗ
		|	ВТ_2 КАК ВТ_2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СформированныйГрафикПоТранспорту.СрезПоследних КАК СформированныйГрафикПоТранспортуСрезПоследних
		|		ПО ВТ_2.Рейс = СформированныйГрафикПоТранспортуСрезПоследних.СформированныйРейс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_3.ФизЛицо КАК ФизЛицо,
		|	ВТ_3.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ВТ_3.Дата КАК Дата,
		|	ВТ_3.РольСотрудника КАК РольСотрудника,
		|	ВТ_3.Рейс КАК Рейс,
		|	ВТ_3.Водитель КАК Водитель,
		|	ВТ_3.Экспедитор КАК Экспедитор,
		|	ВТ_3.СоставЭкипажа КАК СоставЭкипажа,
		|	ВТ_3.Начисление КАК Начисление,
		|	ВТ_3.РольРейса КАК РольРейса,
		|	ЕСТЬNULL(КонтрольВремениСрезПоследнихНачало.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяОт,
		|	ЕСТЬNULL(КонтрольВремениСрезПоследнихКонец.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяДо
		|ПОМЕСТИТЬ ВТ_4
		|ИЗ
		|	ВТ_3 КАК ВТ_3
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольВремени.СрезПоследних(, ОкончаниеСобытия = ЛОЖЬ) КАК КонтрольВремениСрезПоследнихНачало
		|		ПО (КонтрольВремениСрезПоследнихНачало.Рейс = ВТ_3.Рейс)
		|			И (КонтрольВремениСрезПоследнихНачало.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольВремени.СрезПоследних(, ОкончаниеСобытия = ИСТИНА) КАК КонтрольВремениСрезПоследнихКонец
		|		ПО (КонтрольВремениСрезПоследнихКонец.Рейс = ВТ_3.Рейс)
		|			И (КонтрольВремениСрезПоследнихКонец.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.ЗакрытиеРейсаЛогист))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_4.Рейс КАК Рейс,
		|	СУММА(ЕСТЬNULL(ЗакрытыеЗаказы.ФрахтЧасов, 0)) КАК ФрахтЧасов
		|ПОМЕСТИТЬ ВТ_5
		|ИЗ
		|	ВТ_4 КАК ВТ_4
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
		|		ПО (НАЧАЛОПЕРИОДА(ВТ_4.Рейс.ДатаРейса, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗакрытыеЗаказы.Регистратор.ДатаЗакрытия, ДЕНЬ))
		|			И ВТ_4.Рейс = ЗакрытыеЗаказы.Регистратор.Рейс
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_4.Рейс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_4.ФизЛицо КАК ФизЛицо,
		|	ВТ_4.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ВТ_4.Дата КАК Дата,
		|	ВТ_4.РольСотрудника КАК РольСотрудника,
		|	ВТ_4.Рейс КАК Рейс,
		|	ВТ_4.Водитель КАК Водитель,
		|	ВТ_4.Экспедитор КАК Экспедитор,
		|	ВТ_4.СоставЭкипажа КАК СоставЭкипажа,
		|	ВТ_4.Начисление КАК Начисление,
		|	ВТ_4.РольРейса КАК РольРейса,
		|	ВТ_4.ВремяОт КАК ВремяОт,
		|	ВТ_4.ВремяДо КАК ВремяДо,
		|	ЕСТЬNULL(ВТ_5.ФрахтЧасов, 0) КАК ФрахтЧасов
		|ПОМЕСТИТЬ ВТ_6
		|ИЗ
		|	ВТ_4 КАК ВТ_4
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_5 КАК ВТ_5
		|		ПО ВТ_4.Рейс = ВТ_5.Рейс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_6.ФизЛицо КАК ФизЛицо,
		|	ВТ_6.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ВТ_6.Дата КАК Дата,
		|	ВТ_6.РольСотрудника КАК РольСотрудника,
		|	ВТ_6.Рейс КАК Рейс,
		|	ВТ_6.Водитель КАК Водитель,
		|	ВТ_6.Экспедитор КАК Экспедитор,
		|	ВТ_6.СоставЭкипажа КАК СоставЭкипажа,
		|	ВТ_6.Начисление КАК Начисление,
		|	ВТ_6.РольРейса КАК РольРейса,
		|	ВЫБОР
		|		КОГДА ВТ_6.РольРейса = ЗНАЧЕНИЕ(Справочник.РолиТранспорта.ПустаяСсылка)
		|				И ВТ_6.РольСотрудника = ЗНАЧЕНИЕ(Справочник.РолиСотрудников.НочнойВодитель)
		|			ТОГДА НАЧАЛОПЕРИОДА(ВТ_6.ВремяОт, ДЕНЬ)
		|		ИНАЧЕ ВТ_6.ВремяОт
		|	КОНЕЦ КАК ВремяОт,
		|	ВЫБОР
		|		КОГДА ВТ_6.РольРейса = ЗНАЧЕНИЕ(Справочник.РолиТранспорта.РольЗабораТовара)
		|			ТОГДА ВТ_6.ВремяДо
		|		КОГДА ВТ_6.РольРейса = ЗНАЧЕНИЕ(Справочник.РолиТранспорта.ПустаяСсылка)
		|				И ВТ_6.РольСотрудника = ЗНАЧЕНИЕ(Справочник.РолиСотрудников.НочнойВодитель)
		|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_6.ВремяОт, ДЕНЬ), ЧАС, ВТ_6.Начисление.КоличествоРабочихЧасов)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТ_6.ВремяДо, ЧАС, ВТ_6.ФрахтЧасов)
		|	КОНЕЦ КАК ВремяДо,
		|	ВТ_6.ФрахтЧасов КАК ФрахтЧасов,
		|	ВЫБОР
		|		КОГДА ВТ_6.РольРейса = ЗНАЧЕНИЕ(Справочник.РолиТранспорта.РольЗабораТовара)
		|			ТОГДА РАЗНОСТЬДАТ(ВТ_6.ВремяОт, ВТ_6.ВремяДо, ЧАС)
		|		ИНАЧЕ РАЗНОСТЬДАТ(ВТ_6.ВремяОт, ДОБАВИТЬКДАТЕ(ВТ_6.ВремяДо, ЧАС, ВТ_6.ФрахтЧасов), ЧАС)
		|	КОНЕЦ КАК ЧасовОтработано
		|ПОМЕСТИТЬ ВТ_7
		|ИЗ
		|	ВТ_6 КАК ВТ_6
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_4
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_5
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_6
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_7.ФизЛицо КАК ФизЛицо,
		|	ВТ_7.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ВТ_7.Дата КАК Дата,
		|	ВТ_7.РольСотрудника КАК РольСотрудника,
		|	ВТ_7.Рейс КАК Рейс,
		|	ВТ_7.Водитель КАК Водитель,
		|	ВТ_7.Экспедитор КАК Экспедитор,
		|	ВТ_7.СоставЭкипажа КАК СоставЭкипажа,
		|	ВТ_7.Начисление КАК Начисление,
		|	ВТ_7.РольРейса КАК РольРейса,
		|	ВТ_7.ВремяОт КАК ВремяОт,
		|	ВТ_7.ВремяДо КАК ВремяДо,
		|	ВТ_7.ФрахтЧасов КАК ФрахтЧасов,
		|	ВЫБОР
		|		КОГДА ВТ_7.Начисление.УчетЧасовПереработки
		|				И ВТ_7.ЧасовОтработано > ВТ_7.Начисление.КоличествоРабочихЧасов
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_7.ЧасовОтработано - ВТ_7.Начисление.КоличествоРабочихЧасов > 0
		|							И ВТ_7.ЧасовОтработано - ВТ_7.Начисление.КоличествоРабочихЧасов < 100
		|						ТОГДА ВТ_7.ЧасовОтработано - ВТ_7.Начисление.КоличествоРабочихЧасов
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЧасовПереработки,
		|	ВЫБОР
		|		КОГДА ВТ_7.Начисление.УчетЧасовПереработки
		|				И ВТ_7.ЧасовОтработано > ВТ_7.Начисление.КоличествоРабочихЧасов
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_7.Начисление.КоличествоРабочихЧасов < 0
		|							ИЛИ ВТ_7.Начисление.КоличествоРабочихЧасов > 100
		|						ТОГДА 0
		|					ИНАЧЕ ВТ_7.Начисление.КоличествоРабочихЧасов
		|				КОНЕЦ
		|		КОГДА ВТ_7.РольРейса = ЗНАЧЕНИЕ(Справочник.РолиТранспорта.ПустаяСсылка)
		|				И ВТ_7.РольСотрудника = ЗНАЧЕНИЕ(Справочник.РолиСотрудников.НочнойВодитель)
		|			ТОГДА РАЗНОСТЬДАТ(ВТ_7.ВремяДо, ВТ_7.ВремяОт, ЧАС)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_7.ЧасовОтработано < 0
		|						ИЛИ ВТ_7.ЧасовОтработано > 100
		|					ТОГДА 0
		|				ИНАЧЕ ВТ_7.ЧасовОтработано
		|			КОНЕЦ
		|	КОНЕЦ КАК ЧасовОтработано
		|ИЗ
		|	ВТ_7 КАК ВТ_7
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_7.ДолжностьСотрудника.ПорядокВыводаРоли,
		|	ВТ_7.ФизЛицо.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.УчетПоЧасовойОплаты.Загрузить(РезультатЗапроса.Выгрузить());
		
КонецПроцедуры
//CeHbKA #4381 04.12.2020

#КонецОбласти 

#Область СобытияПолейВвода
// Обработчики событий поля ввода.

&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ТекущаяДата());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ГрафикРаботыСотрудников.Форма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		Представление = ПолучитьПредставлениеМесяца(Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
	НастройкаОтображенияФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ТекущаяДата());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
		
		Модифицированность = Истина;
	 	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаГрафикаФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Терминал.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьПредупреждение(,"Укажите терминал!",,);
		
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГрафикаФизЛицоПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ТаблицаГрафика.ТекущиеДанные;
	
	СтруктураСотрудника = ПолучитьДанныеСотрудника(ТекущаяСтрока.ФизЛицо);
	
	//Геннадий 20.07.2020 ->
	//ЗаполнитьЗначенияСвойств приводило к заполнению значения 1го дня, даже если документ формируется не с начала месяца
	//ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСотрудника);
	ТекущаяСтрока.ДолжностьСотрудника = СтруктураСотрудника.ДолжностьСотрудника; 
	//Геннадий 20.07.2020 <-	
	
	//Геннадий 20.07.2020 ->
	Если ЕслиОсновнойВидЗанятости() Тогда
		//Геннадий 09.06.2020 ->	
		//если добавление сотрудника в пределах текущего месяца, расчет с текущего дня, иначе с первого дня месяца
		номерДняНачалаЗаполнения = 1;
		Если Месяц(ТекущаяДата()) = Месяц(Объект.Период) Тогда
			номерДняНачалаЗаполнения = День(ТекущаяДата());	
		КонецЕсли;
		//Геннадий 09.06.2020 <-	
		
		Для Сч = номерДняНачалаЗаполнения По День(КонецМесяца(Объект.Период)) Цикл
			//Геннадий 20.07.2020 ->
			//ТекущаяСтрока["ЗначениеДня"+Сч] 	 = ТекущаяСтрока.ЗначениеДня1;
			//ТекущаяСтрока["ПредставлениеДня"+Сч] = ?(ТекущаяСтрока.ЗначениеДня1 = ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.Работа"), "Я", "");
			ТекущаяСтрока["ЗначениеДня"+Сч] 	 = СтруктураСотрудника.ЗначениеДня1;
			ТекущаяСтрока["ПредставлениеДня"+Сч] = ?(СтруктураСотрудника.ЗначениеДня1 = ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.Работа"), "Я", "");
			//Геннадий 20.07.2020 <-	
		КонецЦикла;
	КонецЕсли;
	//Геннадий 20.07.2020 <-	
	
	УстановитьОформлениеСтрок();

КонецПроцедуры

&НаСервере
Функция ЕслиОсновнойВидЗанятости()
	
	Возврат Объект.ВидЗанятости = Перечисления.зпВидыЗанятости.ОсновнаяЗанятость;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаГрафикаПриАктивизацииЯчейки(Элемент)

	ТекСтрока = Элементы.ТаблицаГрафика.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	Если СтрНайти(Элемент.ТекущийЭлемент.Имя, "ТаблицаГрафикаЗначениеДня") = 0
		И СтрНайти(Элемент.ТекущийЭлемент.Имя, "ТаблицаГрафикаПредставлениеДня") = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекСтрока.ДолжностьСотрудника) Тогда
		СписокВыбора = ПолучитьСписокВыбораЗначенияДня(ТекСтрока.ДолжностьСотрудника);
	Иначе
		СписокВыбора = ПолучитьСписокВыбораЗначенияДня();		
	КонецЕсли; 
	
	Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
	
	Для каждого СтрокаСЗ Из СписокВыбора Цикл
		НС = Элемент.ТекущийЭлемент.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтрокаСЗ);
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьСрезПоследнихСтатусыСогласования(Дата, ФизЛицо)

	ФизЛицоГрОтбор = Новый Структура();
	ФизЛицоГрОтбор.Вставить("ФизЛицо", ФизЛицо);
	ФизЛицоГрОтбор.Вставить("График", Объект.Ссылка);
	
	НаборЗаписей = РегистрыСведений.СтатусыСогласованияГрафикаССотрудниками.СрезПоследних(ТекущаяДата(), ФизЛицоГрОтбор);
	
	Если (НаборЗаписей.Количество() = 0) ИЛИ (НЕ НаборЗаписей[0].ГрафикСогласован) Тогда
		Возврат Ложь;
	Иначе	
	    Возврат Истина;
	КонецЕсли; 

КонецФункции // ПолучитьСрезПоследнихСтатусыСогласования()


&НаКлиенте
Процедура ТаблицаГрафикаПредставлениеДняОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомерДня 		= СтрЗаменить(Элемент.Имя, "ТаблицаГрафикаПредставлениеДня", "");
	ТекущаяСтрока 	= Элементы.ТаблицаГрафика.ТекущиеДанные;
	ТекущаяСтрока["ЗначениеДня" + НомерДня] = ВыбранноеЗначение;
	ЭлементЛегенды 	= Легенда.НайтиПоЗначению(ВыбранноеЗначение);
	ТекущаяСтрока["ПредставлениеДня" + НомерДня] = ЭлементЛегенды.Представление;
		
	//Переварюха В.В. 12.02.2020
	УстанавливаемоеЗначениеДляВыбранногоПериода = УстанавливаемоеЗначениеДня(ВыбранноеЗначение);
	Если ВыбранноеЗначение.ИмяПредопределенныхДанных = ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.Уволен") Тогда
		//УстановитьОформлениеДнейУвольнения(НомерДня);
	КонецЕсли;
	
	Если УстанавливаемоеЗначениеДляВыбранногоПериода = Неопределено Тогда
	//	Возврат;
	Иначе
		УстановитьЗначенияДней(УстанавливаемоеЗначениеДляВыбранногоПериода, ТекущаяСтрока);
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
	//Переварюха В.В. 12.02.2020
	
	//Геннадий 02.06.2020 ->
	ТекущаяСтрока["ПредставлениеДня"] = ПересчитатьКоличествоРабочихДнейВСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
	//Геннадий 02.06.2020 <-
	
КонецПроцедуры

//Геннадий 02.06.2020 ->
&НаКлиенте
Функция ПересчитатьКоличествоРабочихДнейВСтроке(ИдентификаторСтроки)
	
	ТекущаяСтрока = ТаблицаГрафика.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПоследнийДеньМесяца = День(КонецМесяца(Объект.Период));
	
	колвоРабочихДнейФЛ = 0;
	Для Сч = 1 По ПоследнийДеньМесяца Цикл
		Если ТипЗнч(ТекущаяСтрока["ЗначениеДня"+Сч]) = Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени") ТОгда
			Если ТекущаяСтрока["ЗначениеДня"+Сч].РабочееВремя Тогда
				колвоРабочихДнейФЛ = колвоРабочихДнейФЛ + 1;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущаяСтрока["ЗначениеДня"+Сч]) = Тип("СправочникСсылка.РолиСотрудников") ТОгда 
			колвоРабочихДнейФЛ = колвоРабочихДнейФЛ + 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат колвоРабочихДнейФЛ;		
		
КонецФункции
//Геннадий 02.06.2020 <-

//Переварюха В.В. 04.02.2020
&НаКлиенте
Процедура Свод(Команда)
	
	Элементы.ФормаСвод.Пометка = НЕ Элементы.ФормаСвод.Пометка;
	
	Элементы.ГруппаСвод.Видимость = Элементы.ФормаСвод.Пометка;
		
	Если Элементы.ФормаСвод.Пометка Тогда
	
		//ПересчитатьТаблицуСвод();	
	    ПересчитатьТаблицуСводНовая();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТаблицуСводНовая()
	
	//для расчета итогов по колонкам
	//расчет ведется по: водитель штатный, водитель наемный, водитель выходного дня, вечерний водитель
	//заборные водители различных категорий
	МассивДолжностейРасчетаИтогов = Новый Массив;
	МассивДолжностейРасчетаИтогов.Добавить(Справочники.РолиСотрудников.ВечернийВодитель);
	МассивДолжностейРасчетаИтогов.Добавить(Справочники.РолиСотрудников.НаемныйВодитель);
	МассивДолжностейРасчетаИтогов.Добавить(Справочники.РолиСотрудников.ШтатныйВодитель);
	МассивДолжностейРасчетаИтогов.Добавить(Справочники.РолиСотрудников.НайтиПоКоду("000000013"));//Водитель выходного дня
	
	//итоги по колонкам (дням)
	МассивИтоговПоДням = Новый Массив(31);
	
	ТаблДолжностей = ТаблицаГрафика.Выгрузить(, "ДолжностьСотрудника");
	ТаблДолжностей.Свернуть("ДолжностьСотрудника");//получаем все должности по документу
	ТаблДолжностей.Колонки.Добавить("РасчетИтогов");
	
	ТаблицаСвод.Очистить();
	ПоследнийДеньМесяца = День(КонецМесяца(Объект.Период));
	
	Для Каждого строкаТаблицаДолжностей Из ТаблДолжностей Цикл
		
		расчетИтога = ?(Не МассивДолжностейРасчетаИтогов.Найти(строкаТаблицаДолжностей.ДолжностьСотрудника) = Неопределено, Истина, Ложь);
		
		ПараметрыОтбора = Новый Структура("ДолжностьСотрудника", строкаТаблицаДолжностей.ДолжностьСотрудника);
		таблСотрудников = ТаблицаГрафика.НайтиСтроки(ПараметрыОтбора);
		
		//добавим строку в сво
		СтрокаСвод 		= ТаблицаСвод.Добавить();			
		СтрокаСвод.Роль	= строкаТаблицаДолжностей.ДолжностьСотрудника;
		МассивКоличествоРаботающихВДень	= Новый Массив(ПоследнийДеньМесяца);
		
		//расчет работающих сотрудников по текущей должности на каждый день месяца
		Для Каждого строкаТаблСотрудников Из таблСотрудников Цикл 
			Для Сч = 1 По ПоследнийДеньМесяца Цикл
				Если Не ТипЗнч(строкаТаблСотрудников["ЗначениеДня"+Сч]) = Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени") И ЗначениеЗаполнено(строкаТаблСотрудников["ЗначениеДня"+Сч]) Тогда
					МассивКоличествоРаботающихВДень[Сч - 1] = ?(МассивКоличествоРаботающихВДень[Сч - 1] = Неопределено, 1, МассивКоличествоРаботающихВДень[Сч - 1] + 1);
					
					//расчет итогов по дням для выбранных должностей
					Если расчетИтога Тогда
						МассивИтоговПоДням[Сч-1] = ?(МассивИтоговПоДням[Сч - 1] = Неопределено, 1, МассивИтоговПоДням[Сч - 1] + 1);
					КонецЕсли;
					
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		//отобразим на форме, разделён расчет и вывод строки на форму
		Для Сч = 1 По ПоследнийДеньМесяца Цикл
			СтрокаСвод["День"+Сч] = Строка(МассивКоличествоРаботающихВДень[Сч - 1]) + "/" + Строка(таблСотрудников.Количество());
		КонецЦикла;
		
	КонецЦикла;
	
	Для Сч = 1 По ПоследнийДеньМесяца Цикл
		
		//Геннадий 03.06.2020 ->
		Элементы["ТаблицаСводДень"+Сч].ТекстПодвала = МассивИтоговПоДням[Сч-1];//ТаблицаСвод.Итог("День"+Сч);
		//Геннадий 03.06.2020 <-
		
	КонецЦикла;
	
КонецПроцедуры// ПолучитьТаблицу()

&НаКлиенте
Процедура ПересчитатьТаблицуСвод()
	
	ТаблицаСвод.Очистить();
	
	ПоследнийДеньМесяца = День(КонецМесяца(Объект.Период));
		
	Для каждого СтрокаТаблицаГрафика Из ТаблицаГрафика Цикл
		
		Если СтрокаТаблицаГрафика.ДолжностьСотрудника.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураОтбора = Новый Структура("ДолжностьСотрудника", СтрокаТаблицаГрафика.ДолжностьСотрудника);
		КоличествоСотрудниковПоДолжности = ТаблицаГрафика.НайтиСтроки(СтруктураОтбора).Количество();
		
		СтруктураОтбора = Новый Структура("Роль", СтрокаТаблицаГрафика.ДолжностьСотрудника);
		МассивСтрок = ТаблицаСвод.НайтиСтроки(СтруктураОтбора);
		
		СтрокаСвод = Неопределено;
		Для каждого НайденнаяСтрока из МассивСтрок цикл
			СтрокаСвод = НайденнаяСтрока;
		КонецЦикла;
		Если СтрокаСвод = Неопределено Тогда
			СтрокаСвод 		= ТаблицаСвод.Добавить();			
			СтрокаСвод.Роль = СтрокаТаблицаГрафика.ДолжностьСотрудника;
		КонецЕсли;
		
		рабочихДн = 0;
		Для Сч = 1 По ПоследнийДеньМесяца Цикл
			
			Если Не ТипЗнч(СтрокаТаблицаГрафика["ЗначениеДня"+Сч]) = Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени") И ЗначениеЗаполнено(СтрокаТаблицаГрафика["ЗначениеДня"+Сч]) Тогда
				СтрокаСвод["День"+Сч] = СтрокаСвод["День"+Сч] + 1;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
			
	Для Сч = 1 По ПоследнийДеньМесяца Цикл
		
		Элементы["ТаблицаСводДень"+Сч].ТекстПодвала = ТаблицаСвод.Итог("День"+Сч);
		
	КонецЦикла;
	
	//Для каждого СтрокаТаблицаСвод Из ТаблицаСвод Цикл		
	//	
	//	Итог = 0;
	//	Для Сч = 1 По ПоследнийДеньМесяца Цикл			
	//		Итог = Итог + СтрокаТаблицаСвод["День"+Сч];	
	//	КонецЦикла;
	//	СтрокаТаблицаСвод.Итого = Итог; 
	//
	//КонецЦикла;
	
	//Элементы.ТаблицаСводИтого.ТекстПодвала = ТаблицаСвод.Итог("Итого");
		
КонецПроцедуры// ПолучитьТаблицу()

&НаСервере
Функция Явка()

	Возврат Справочники.КлассификаторИспользованияРабочегоВремени.Работа;	

КонецФункции // Явка()

//Переварюха В.В. 04.02.2020

#КонецОбласти 

#Область СлужебныеПроцедуры

// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
&НаКлиенте
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ТекущаяДата());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с управляемыми формами.
//

// Получает значение реквизита формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  ПутьРеквизита - Строка - путь к данным реквизита формы, например: "Объект.МесяцНачисления".
//
// Возвращаемое значение:
//  Произвольный - реквизит формы.
//
&НаКлиенте
Функция ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	НовОбъект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		НовОбъект = НовОбъект[МассивИмен[Сч]]
	КонецЦикла;
	
	Возврат НовОбъект[ПоследнееПоле];
	
КонецФункции

// Устанавливает значение реквизиту формы.
// Параметры:
//  Форма - УправляемаяФорма - форма-владелец реквизита.
//  ПутьРеквизита - Строка - путь к данным, например: "Объект.МесяцНачисления".
//  Значение - Произвольный - устанавливаемое значение.
//  ТолькоЕслиНеЗаполнен - Булево - позволяет не устанавливать значение реквизита,
//                                  если у него уже установлено какое-то значение.
&НаКлиенте
Процедура УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение, ТолькоЕслиНеЗаполнен = Ложь) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	НовОбъект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		НовОбъект = НовОбъект[МассивИмен[Сч]]
	КонецЦикла;
	Если НЕ ТолькоЕслиНеЗаполнен ИЛИ НЕ ЗначениеЗаполнено(НовОбъект[ПоследнееПоле]) Тогда
		НовОбъект[ПоследнееПоле] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтображенияФормы()

	ОграниченныеПрава = РольДоступна("РедактированиеГрафикаСотрудникаОграниченныеПрава");
	ТекущийДень = День(ТекущаяДата());
	
	СписокВыбора = ПолучитьСписокВыбораЗначенияДня();
	
	Для Сч = 1  По 31 Цикл
		
		Элементы["ТаблицаГрафикаЗначениеДня"+Сч].СписокВыбора.Очистить();		
		
		Для каждого СтрокаСЗ Из СписокВыбора Цикл			
			НоваяСтрокаСЗ = Элементы["ТаблицаГрафикаЗначениеДня"+Сч].СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСЗ, СтрокаСЗ);
		КонецЦикла; 
		//Элементы["ТаблицаГрафикаЗначениеДня"+Сч].СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		//Для каждого СтрокаСЗ Из Элементы["ТаблицаГрафикаЗначениеДня"+Сч].СписокВыбора Цикл
		//	СтрокаСЗ.Представление = "ыы";
		//КонецЦикла; 
	КонецЦикла; 	
	
	ПоследнийДеньМесяца = День(КонецМесяца(Объект.Период));
	
	Для Сч = 1 По 31 Цикл

		Элементы["ТаблицаГрафикаГруппа"+Сч].Видимость = Истина;
		Элементы["ТаблицаГрафикаГруппа"+Сч].ЦветТекстаЗаголовка = Новый Цвет();
		Элементы["ТаблицаГрафикаГруппа"+Сч].Ширина = 1;
		Элементы["ТаблицаГрафикаГруппа"+Сч].РастягиватьПоГоризонтали = Ложь;
		Элементы["ТаблицаГрафикаГруппа"+Сч].ФиксацияВТаблице = ФиксацияВТаблице.Право;
		
		Элементы["ТаблицаГрафикаГруппа"+Сч].ЦветФонаЗаголовка = Новый Цвет();
		Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].ЦветФона = Новый Цвет();
		
		Если ОграниченныеПрава И (Месяц(Объект.Период) = Месяц(ТекущаяДата())) И (Сч < ТекущийДень) Тогда
			Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].Доступность = НЕ ОграниченныеПрава;
		ИначеЕсли ОграниченныеПрава И (Месяц(Объект.Период) < Месяц(ТекущаяДата())) Тогда
			Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].Доступность = НЕ ОграниченныеПрава;
		КонецЕсли;
		
		Если (Месяц(Объект.Период) = Месяц(ТекущаяДата())) И (Сч < ТекущийДень) Тогда
			Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].ЦветФона = WebЦвета.Серый;
		ИначеЕсли Месяц(Объект.Период) < Месяц(ТекущаяДата()) Тогда
			Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].ЦветФона = WebЦвета.Серый;
		КонецЕсли;
		
		//Элементы["ТаблицаГрафикаЗначениеДня"+Сч].РастягиватьПоГоризонтали = Ложь;
		//Элементы["ТаблицаГрафикаЗначениеДня"+Сч].АвтоМаксимальнаяШирина = Ложь;
		//Элементы["ТаблицаГрафикаЗначениеДня"+Сч].Ширина = 1;
		//Элементы["ТаблицаГрафикаЗначениеДня"+Сч].КнопкаВыбора = Ложь;
		
		Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].РастягиватьПоГоризонтали = Истина;
		Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].АвтоМаксимальнаяШирина = Ложь;
		Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].Ширина = 7;
		
		//Переварюха В.В. 04.02.2020
		Элементы["ТаблицаСводДень"+Сч].Видимость = Истина;
		Элементы["ТаблицаСводДень"+Сч].Ширина = 2;
		Элементы["ТаблицаСводДень"+Сч].АвтоМаксимальнаяШирина = Ложь;
		//Переварюха В.В. 04.02.2020
		
		Если Сч > ПоследнийДеньМесяца Тогда
			Элементы["ТаблицаГрафикаГруппа"+Сч].Видимость = Ложь;
			//Переварюха В.В. 04.02.2020
			Элементы["ТаблицаСводДень"+Сч].Видимость = Ложь;
			//Переварюха В.В. 04.02.2020
			Продолжить;
		КонецЕсли; 
		
		ДеньДата = Дата(Год(Объект.Период),Месяц(Объект.Период),Сч);
		
		Если ДеньНедели(ДеньДата) >=6 Тогда
			Элементы["ТаблицаГрафикаГруппа"+Сч].ЦветТекстаЗаголовка = WebЦвета.Красный;
			Элементы["ТаблицаГрафикаГруппа"+Сч].ЦветФонаЗаголовка = WebЦвета.ЛососьТемный;
			Элементы["ТаблицаГрафикаПредставлениеДня"+Сч].ЦветФона = WebЦвета.ЛососьТемный;
		КонецЕсли;
		
		Если Месяц(Объект.Период) = Месяц(ТекущаяДата()) Тогда
			ТекущийДень = День(ТекущаяДата());
			Элементы["ТаблицаГрафикаГруппа"+ТекущийДень].ЦветФонаЗаголовка = WebЦвета.Синий;
		КонецЕсли;
		
		Элементы["таблицаГрафикаЗначениеДня"+Сч].Видимость = Ложь;
						
	КонецЦикла; 
	
КонецПроцедуры // ()
 
&НаСервере
Функция ПолучитьСписокВыбораЗначенияДня(Роль = Неопределено)

	Легенда.Очистить();
	Легенда.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь, 		"" + Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь.БуквенныйКод);
	Легенда.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск, 	"" + Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск.БуквенныйКод);
	
	Легенда.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни, 	"" + Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.БуквенныйКод);
	Легенда.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Уволен, 			"" + Справочники.КлассификаторИспользованияРабочегоВремени.Уволен.БуквенныйКод);
	Легенда.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы, 		"" + Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы.БуквенныйКод);
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь, 		"" + Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь.БуквенныйКод 		+ " (Больничный)");
	СписокВыбора.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск, "" + Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск.БуквенныйКод 	+ " (Отпуск)");
	
	//Геннадий 22.07.2021 ++
	//Переписка от 21.07.2021: Re:Автоматическое начисление ФОТа на основании реализованного Графика
	Если Объект.ВидЗанятости = Перечисления.зпВидыЗанятости.ОсновнаяЗанятость Тогда
		СписокВыбора.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни, 	"" + Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.БуквенныйКод		+ " (Выходной)");
	КонецЕсли;
	//Геннадий 22.07.2021 --
	
	СписокВыбора.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Уволен, 		"" + Справочники.КлассификаторИспользованияРабочегоВремени.Уволен.БуквенныйКод			+ " (Уволен)");
	СписокВыбора.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы, 		"" + Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы.БуквенныйКод			+ " (Прогул)");
	
	
	ВыборкаРоль = Справочники.РолиСотрудников.Выбрать();
	
	Пока ВыборкаРоль.Следующий() Цикл
		
		СписокВыбора.Добавить(ВыборкаРоль.Ссылка);	
		Легенда.Добавить(ВыборкаРоль.Ссылка, ВыборкаРоль.ПредставлениеРоли);			
		
		Если Роль <> Неопределено Тогда
			
			НетПодходящейРоли = Истина;
			
			Для каждого ТекСтрокаВозможнаяРоль Из Роль.ВозможныеРоли Цикл
				Если ТекСтрокаВозможнаяРоль.Роль = ВыборкаРоль.Ссылка Тогда
					НетПодходящейРоли = Ложь;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НетПодходящейРоли Тогда
				СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению(ВыборкаРоль.Ссылка));
				Легенда.Удалить(Легенда.НайтиПоЗначению(ВыборкаРоль.Ссылка));	
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат СписокВыбора;	

КонецФункции // ()

Функция ПолучитьРезультатЗапросаПоСотрудникам(Терминал, Подразделение = Неопределено, ФизЛицо = Неопределено)

	Запрос = Новый Запрос;
	//Геннадий #3395 09.04.2021 ->
	//Исходный запрос не учитывает вариант, если сотрудник принят на работу не в начале месяца
	//Если делать срез на конец месяца, то не будут учитываться сотрудники, уволенные втечение месяца
	
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	//	|	РаботникиОрганизацииСрезПоследних.ФизЛицо КАК ФизЛицо,
	//	|	ВЫБОР 
	//	|		КОГДА ЕСТЬNULL(ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника, Значение(Справочник.РолиСотрудников.ПустаяСсылка)) <> Значение(Справочник.РолиСотрудников.ПустаяСсылка) 
	//	|			ТОГДА Значение(Справочник.КлассификаторИспользованияРабочегоВремени.Работа) 
	//	|		ИНАЧЕ НЕОПРЕДЕЛЕНО 
	//	|	КОНЕЦ КАК ЗначениеДня1,
	//	|	ЕСТЬNULL(ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника, Значение(Справочник.РолиСотрудников.ПустаяСсылка)) КАК ДолжностьСотрудника,
	//	|	РаботникиОрганизацииСрезПоследних.Подразделение КАК Подразделение
	//	|ИЗ
	//	|	РегистрСведений.РаботникиОрганизации.СрезПоследних(&НачалоМесяца, ) КАК РаботникиОрганизацииСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних КАК ДополнительныеПараметрыФизЛицСрезПоследних
	//	|		ПО РаботникиОрганизацииСрезПоследних.ФизЛицо = ДополнительныеПараметрыФизЛицСрезПоследних.ФизЛицо
	//	|ГДЕ
	//	|	РаботникиОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию)
	//	|	И ВЫБОР
	//	|			КОГДА &Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	//	|				ТОГДА РаботникиОрганизацииСрезПоследних.Подразделение = &Подразделение
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И ВЫБОР
	//	|			КОГДА &ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	//	|				ТОГДА РаботникиОрганизацииСрезПоследних.ФизЛицо = &ФизЛицо
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И РаботникиОрганизацииСрезПоследних.Терминал = &Терминал
	//	|
	//	//Геннадий 15.05.2020 ->
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника.ПорядокВыводаРоли,
	//	//|	РаботникиОрганизацииСрезПоследних.Сотрудник.Наименование
	//	|	РаботникиОрганизацииСрезПоследних.ФизЛицо.Наименование
	//	|";
	//	//Геннадий <-
	
	//Переработанный запрос:
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	               |	РаботникиОрганизацииСрезПоследних.ФизЛицо КАК ФизЛицо,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ЗначениеДня1,
	               |	ЕСТЬNULL(ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) КАК ДолжностьСотрудника,
	               |	РаботникиОрганизацииСрезПоследних.Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ ВТ_Принятые
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизации.СрезПоследних(&НачалоМесяцаРасчета, ) КАК РаботникиОрганизацииСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних КАК ДополнительныеПараметрыФизЛицСрезПоследних
	               |		ПО РаботникиОрганизацииСрезПоследних.ФизЛицо = ДополнительныеПараметрыФизЛицСрезПоследних.ФизЛицо
	               |ГДЕ
	               |	РаботникиОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию)
	               |	И ВЫБОР
	               |			КОГДА &Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	               |				ТОГДА РаботникиОрганизацииСрезПоследних.Подразделение = &Подразделение
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |				ТОГДА РаботникиОрганизацииСрезПоследних.ФизЛицо = &ФизЛицо
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И РаботникиОрганизацииСрезПоследних.Терминал = &Терминал
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РаботникиОрганизации.Сотрудник,
	               |	РаботникиОрганизации.ФизЛицо,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ,
	               |	ЕСТЬNULL(ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)),
	               |	РаботникиОрганизации.Подразделение
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц КАК ДополнительныеПараметрыФизЛиц
	               |		ПО РаботникиОрганизации.ФизЛицо = ДополнительныеПараметрыФизЛиц.ФизЛицо
	               |			И (ДополнительныеПараметрыФизЛиц.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета)
	               |ГДЕ
	               |	РаботникиОрганизации.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
	               |	И РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию)
	               |	И ВЫБОР
	               |			КОГДА &Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	               |				ТОГДА РаботникиОрганизации.Подразделение = &Подразделение
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |				ТОГДА РаботникиОрганизации.ФизЛицо = &ФизЛицо
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И РаботникиОрганизации.Терминал = &Терминал
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Принятые.Сотрудник КАК Сотрудник,
	               |	ВТ_Принятые.ФизЛицо КАК ФизЛицо,
	               |	ВТ_Принятые.ЗначениеДня1 КАК ЗначениеДня1,
	               |	ВТ_Принятые.ДолжностьСотрудника КАК ДолжностьСотрудника,
	               |	ВТ_Принятые.Подразделение КАК Подразделение
	               |ИЗ
	               |	ВТ_Принятые КАК ВТ_Принятые
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_Принятые.ДолжностьСотрудника.ПорядокВыводаРоли,
	               |	ВТ_Принятые.ФизЛицо.Наименование";
	
	
	//Геннадий #3395 09.04.2021 <-
	
	Запрос.УстановитьПараметр("Подразделение", ?(ЗначениеЗаполнено(Подразделение), Подразделение, Справочники.Подразделения.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.УстановитьПараметр("ФизЛицо", ?(ЗначениеЗаполнено(ФизЛицо),ФизЛицо, Справочники.ФизическиеЛица.ПустаяСсылка()));
	//Геннадий 10.06.2020 ->
	//поиск данных по сотруднику на текущий день
	Если ФизЛицо <> Неопределено Тогда
		Запрос.УстановитьПараметр("НачалоМесяцаРасчета", 	КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("КонецМесяцаРасчета", 	КонецМесяца(Объект.Период));//КонецДня(ТекущаяДата()));//
	Иначе
		Запрос.УстановитьПараметр("НачалоМесяцаРасчета", 	НачалоМесяца(Объект.Период));
		Запрос.УстановитьПараметр("КонецМесяцаРасчета", 	КонецМесяца(Объект.Период));
	КонецЕсли;
	//Геннадий 10.06.2020 <-
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ()
 
&НаСервере
Функция ЗаполнитьНаСервере()
	
	РезультатЗапроса = ПолучитьРезультатЗапросаПоСотрудникам(Объект.Терминал, Объект.Подразделение);
		
	МассивСотрудниковБезФизЛиц = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.НайтиСледующий(Новый Структура("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка())) Цикл
		МассивСотрудниковБезФизЛиц.Добавить(Выборка.Сотрудник);
	КонецЦикла; 
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	//Переварюха В.В. 04.02.2020
	ТаблицаЗапроса.Свернуть("ФизЛицо, ЗначениеДня1, ДолжностьСотрудника",);
	//Переварюха В.В. 04.02.2020
	ТаблицаГрафика.Загрузить(ТаблицаЗапроса);
	
	//CeHbKA 10.11.2020
	//закомментил из-за дублирования кода
	//Для каждого ТекСтрока Из ТаблицаГрафика Цикл
	//							
	//	Для Сч = 1 По День(КонецМесяца(Объект.Период)) Цикл
	//		ТекСтрока["ЗначениеДня"+Сч] = ТекСтрока.ЗначениеДня1;
	//		ТекСтрока["ПредставлениеДня"+Сч] = ?(ТипЗнч(ТекСтрока.ЗначениеДня1) = Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"), ТекСтрока.ЗначениеДня1.БуквенныйКод, ТекСтрока.ЗначениеДня1);			
	//	КонецЦикла;
	//			
	//КонецЦикла;
	
	УстановитьОформлениеСтрок();
	
	Возврат МассивСотрудниковБезФизЛиц;
	
КонецФункции

&НаСервере
Процедура ТабличнаяЧастьВТаблицуФормы()
		
	Запрос = Новый Запрос;
	//Поляков 20.05.2020 ->
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Ссылка КАК Ссылка,
		|	ГрафикРаботыСотрудниковГрафик.ФизЛицо КАК ФизЛицо,
		|	ГрафикРаботыСотрудниковГрафик.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ГрафикРаботыСотрудниковГрафик.Подразделение КАК Подразделение,
		|	ГрафикРаботыСотрудниковГрафик.Дата КАК Дата,
		|	ГрафикРаботыСотрудниковГрафик.ВидОтработанногоВремени КАК ВидОтработанногоВремени,
		|	ГрафикРаботыСотрудниковГрафик.РольСотрудника КАК РольСотрудника
		|ПОМЕСТИТЬ ДокТЧ
		|ИЗ
		|	&ДокТЧ КАК ГрафикРаботыСотрудниковГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокТЧ.Ссылка КАК Ссылка,
		|	ДокТЧ.ФизЛицо КАК ФизЛицо,
		|	ДокТЧ.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ДокТЧ.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ДокТЧ.ДолжностьСотрудника.ПорядокВыводаРоли КАК ПорядокДолжностиСотрудника,
		|	ДокТЧ.Подразделение КАК Подразделение,
		|	ДЕНЬ(ДокТЧ.Дата) КАК НомерДня,
		|	ВЫБОР
		|		КОГДА ДокТЧ.ВидОтработанногоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|			ТОГДА ДокТЧ.ВидОтработанногоВремени
		|		КОГДА ДокТЧ.РольСотрудника <> ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)
		|			ТОГДА ДокТЧ.РольСотрудника
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ЗначениеДня,
		|	ДокТЧ.ВидОтработанногоВремени КАК ВидОтработанногоВремени,
		|	ДокТЧ.РольСотрудника КАК РольСотрудника,
		|	ЕСТЬNULL(СтатусыСогласованияГрафикаССотрудникамиСрезПоследних.ГрафикСогласован, ЛОЖЬ) КАК Согласован
		|ИЗ
		|	ДокТЧ КАК ДокТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСогласованияГрафикаССотрудниками.СрезПоследних(
		|				,
		|				График В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ДокТЧ.Ссылка КАК Ссылка
		|					ИЗ
		|						ДокТЧ КАК ДокТЧ)) КАК СтатусыСогласованияГрафикаССотрудникамиСрезПоследних
		|		ПО ДокТЧ.Ссылка = СтатусыСогласованияГрафикаССотрудникамиСрезПоследних.График
		|			И ДокТЧ.ФизЛицо = СтатусыСогласованияГрафикаССотрудникамиСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокДолжностиСотрудника,
		|	ФизЛицоНаименование
		|ИТОГИ
		|
		//Геннадий 25.05.2020 ->
		//|	МАКСИМУМ(ДолжностьСотрудника),
		//|	МАКСИМУМ(Подразделение)
		|	МАКСИМУМ(Подразделение),
		|	МАКСИМУМ(ДолжностьСотрудника),
		|	МАКСИМУМ(ПорядокДолжностиСотрудника),
		|	МАКСИМУМ(ФизЛицоНаименование)
		//Геннадий 25.05.2020 <-
		|
		|ПО
		|	ФизЛицо";
	//Поляков 20.05.2020 <-
	
	Запрос.УстановитьПараметр("ДокТЧ", 	Объект.График.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	
	ВыборкаФизЛицо 		= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФизЛицо.Следующий() Цикл
		
		НС = ТаблицаГрафика.Добавить();
		НС.ФизЛицо 				= ВыборкаФизЛицо.ФизЛицо;
		НС.ДолжностьСотрудника 	= ВыборкаФизЛицо.ДолжностьСотрудника;
		НС.Подразделение 		= ВыборкаФизЛицо.Подразделение;
		
		ВыборкаДетальныеЗаписи 	= ВыборкаФизЛицо.Выбрать();
		
		//Геннадий 02.06.2020 ->
		колвоРабочихДнейФЛ = 0;
		//Геннадий 02.06.2020 <-
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			//НС["ЗначениеДня"+ВыборкаДетальныеЗаписи.НомерДня] = ВыборкаДетальныеЗаписи.ЗначениеДня;	
			
			Если ВыборкаДетальныеЗаписи.ВидОтработанногоВремени = ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.Работа") Тогда
				ЗначениеДня 		= ВыборкаДетальныеЗаписи.РольСотрудника;
				ПредставлениеДня 	= ?(ВыборкаДетальныеЗаписи.РольСотрудника = ВыборкаДетальныеЗаписи.ДолжностьСотрудника, ВыборкаДетальныеЗаписи.ВидОтработанногоВремени.БуквенныйКод, ЗначениеДня.ПредставлениеРоли);
			Иначе	
				ЗначениеДня 		= ВыборкаДетальныеЗаписи.ВидОтработанногоВремени;		
				ПредставлениеДня 	= ЗначениеДня.БуквенныйКод;
			КонецЕсли; 
						
			НС["ЗначениеДня" 		+ ВыборкаДетальныеЗаписи.НомерДня]	= ЗначениеДня;	
			НС["ПредставлениеДня" 	+ ВыборкаДетальныеЗаписи.НомерДня] 	= ПредставлениеДня ;	
			
			НС.Согласован = ВыборкаДетальныеЗаписи.Согласован;
			
			//Геннадий 02.06.2020 ->
			Если Не ТипЗнч(ЗначениеДня) = Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени") Тогда
				колвоРабочихДнейФЛ = колвоРабочихДнейФЛ + 1;
			КонецЕсли;			
			//Геннадий 02.06.2020 <-
			
		КонецЦикла;        
		
		//Геннадий 02.06.2020 ->
		НС["ПредставлениеДня"] = колвоРабочихДнейФЛ;
		//Геннадий 02.06.2020 <-
		
	КонецЦикла;
	
КонецПроцедуры// ()

&НаСервере
Функция ПолучитьДанныеСотрудника(ФизЛицо)
	
	РезультатЗапроса = ПолучитьРезультатЗапросаПоСотрудникам(Объект.Терминал, , ФизЛицо);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//Переварюха В.В. 04.02.2020 
	//СтруктураСотрудника = Новый Структура("ДолжностьСотрудника, Подразделение, ЗначениеДня1");
	СтруктураСотрудника = Новый Структура("ДолжностьСотрудника, ЗначениеДня1");
	//Переварюха В.В. 04.02.2020
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураСотрудника, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат СтруктураСотрудника;
	
КонецФункции // ()

//Переварюха В.В. 12.02.2020
&НаСервереБезКонтекста
Функция УстанавливаемоеЗначениеДня(ЗначениеДня)

	Если (ЗначениеДня = Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
		ИЛИ (ЗначениеДня = Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь)
		ИЛИ (ЗначениеДня = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		ИЛИ (ЗначениеДня = Справочники.КлассификаторИспользованияРабочегоВремени.Уволен) Тогда
		
		Возврат ЗначениеДня;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура УстановитьЗначенияДней(ЗначениеДня, ТекущаяСтрока)

	ТекущееЧислоСтрокой = Прав(Элементы.ТаблицаГрафика.ТекущийЭлемент.Имя, (СтрДлина(Элементы.ТаблицаГрафика.ТекущийЭлемент.Имя) - 30));
	
	Попытка
	    ТекущееЧислоМесяца = Число(ТекущееЧислоСтрокой);
		ПеремСтандартныйПериод.ДатаНачала = Дата(Год(Объект.Период), Месяц(Объект.Период), ТекущееЧислоМесяца);
		ПеремСтандартныйПериод.ДатаОкончания = Дата(Год(Объект.Период), Месяц(Объект.Период), ТекущееЧислоМесяца);
	Исключение

	КонецПопытки;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПеремСтандартныйПериод;
	Если Диалог.Редактировать() Тогда 
	    ПеремСтандартныйПериод = Диалог.Период;
		
		ДеньНачало = День(ПеремСтандартныйПериод.ДатаНачала);
		ДеньОкончание = День(ПеремСтандартныйПериод.ДатаОкончания);
		
		Для Сч = ДеньНачало По ДеньОкончание Цикл
		
			ТекущаяСтрока["ЗначениеДня"+Сч] = ЗначениеДня;
			ТекущаяСтрока["ПредставлениеДня"+Сч] = ЗначениеДня.БуквенныйКод;
		
		КонецЦикла;
		 
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеСтрок()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьОформлениеДнейУвольнения();

	Для каждого ТекСтрока Из ТаблицаГрафика Цикл
				
		Для Сч = 1 По День(КонецМесяца(Объект.Период)) Цикл
			Если ТекСтрока["ЗначениеДня"+Сч] = Справочники.КлассификаторИспользованияРабочегоВремени.Уволен Тогда
				//УстановитьОформлениеДнейУвольнения(Сч);	
			КонецЕсли;	
		КонецЦикла;
		
		Сравнение = ТекСтрока.ДолжностьСотрудника.ЦветВыделения;
		
		ОписаниеСвета = СтрРазделить(Сравнение,",");
		
		Если ОписаниеСвета.Количество() = 3 Тогда
			ЭлементОформленияСогласован = УсловноеОформление.Элементы.Добавить();
			ЭлементОформленияСогласован.Представление = ""+ТекСтрока.ФизЛицо+"_Согласован";
			ЭлементОформленияСогласован.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(ОписаниеСвета[0], ОписаниеСвета[1], ОписаниеСвета[2]));
			ЭлементОформленияСогласован.Использование = Истина;
			
			ЭлементОтбораСогласован = ЭлементОформленияСогласован.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораСогласован.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ТаблицаГрафика.Согласован");   
			ЭлементОтбораСогласован.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораСогласован.ПравоеЗначение    = Истина;
			ЭлементОтбораСогласован.Использование     = Истина;		
			
			ЭлементОтбораСогласован = ЭлементОформленияСогласован.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораСогласован.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ТаблицаГрафика.ФизЛицо");   
			ЭлементОтбораСогласован.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораСогласован.ПравоеЗначение    = ТекСтрока.ФизЛицо;
			ЭлементОтбораСогласован.Использование     = Истина;		
			
			ПолеОформленияСогласован      = ЭлементОформленияСогласован.Поля.Элементы.Добавить();
			ПолеОформленияСогласован.Поле = Новый ПолеКомпоновкиДанных("ТаблицаГрафикаФизЛицо");
			ПолеОформленияСогласован.Использование = Истина;		
		КонецЕсли; 
		
		ИмяУО = ТекСтрока.ДолжностьСотрудника.Наименование;
		ЭлементОУНайден = Ложь;
		
		Если Сравнение = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлУО Из УсловноеОформление.Элементы Цикл
			Если ЭлУО.Представление = ИмяУО Тогда
				ЭлементОУНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементОУНайден Тогда
			Продолжить;
		КонецЕсли;
				
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Представление = ИмяУО;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(ОписаниеСвета[0], ОписаниеСвета[1], ОписаниеСвета[2]));
		ЭлементОформления.Использование = Истина;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ТаблицаГрафика.ДолжностьСотрудника");   
		ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение    = ТекСтрока.ДолжностьСотрудника;
		ЭлементОтбора.Использование     = Истина;
		
				
		ПолеОформления      = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаГрафикаДолжностьСотрудника");
		ПолеОформления.Использование = Истина;
				
		Для Сч = 1 По День(КонецМесяца(Объект.Период)) Цикл
		
				ЭлементОформленияКр = УсловноеОформление.Элементы.Добавить();
				ЭлементОформленияКр.Представление = "Прогул"+Сч;
				ЭлементОформленияКр.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
				ЭлементОформленияКр.Использование = Истина;
				
				ЭлементОтбораКр = ЭлементОформленияКр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораКр.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ТаблицаГрафика.ЗначениеДня"+Сч);   
				ЭлементОтбораКр.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораКр.ПравоеЗначение    = Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы;
				ЭлементОтбораКр.Использование     = Истина;
				
						
				ПолеОформления      = ЭлементОформленияКр.Поля.Элементы.Добавить();
				ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаГрафикаПредставлениеДня"+Сч);
				ПолеОформления.Использование = Истина;
			
				ЭлементОформленияКр = УсловноеОформление.Элементы.Добавить();
				ЭлементОформленияКр.Представление = "Фрахты"+Сч;
				ЭлементОформленияКр.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Оранжевый);
				ЭлементОформленияКр.Использование = Истина;
				
				ЭлементОтбораКр = ЭлементОформленияКр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораКр.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ТаблицаГрафика.ЗначениеДня"+Сч);   
				ЭлементОтбораКр.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораКр.ПравоеЗначение    = Справочники.РолиСотрудников.Фрахты;
				ЭлементОтбораКр.Использование     = Истина;
				
						
				ПолеОформления      = ЭлементОформленияКр.Поля.Элементы.Добавить();
				ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаГрафикаПредставлениеДня"+Сч);
				ПолеОформления.Использование = Истина;

				Если ТекСтрока["ЗначениеДня"+Сч] = Справочники.КлассификаторИспользованияРабочегоВремени.Уволен Тогда
					НомерТекСтр = ТекСтрока;
				КонецЕсли;
				
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьОформлениеДнейУвольнения()
	
	//ЭлементОформленияКр = УсловноеОформление.Элементы.Добавить();
	//ЭлементОформленияКр.Представление = "УволенПоСтроке";
	//ЭлементОформленияКр.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
	//ЭлементОформленияКр.Использование = Истина;
	//
	//ЭлементОтбораКр = ЭлементОформленияКр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	////ЭлементОтбораКр.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ТаблицаГрафика.ЗначениеДня"+НомерДня);   
	////ЭлементОтбораКр.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
	////ЭлементОтбораКр.ПравоеЗначение    = Справочники.КлассификаторИспользованияРабочегоВремени.Уволен;
	////ЭлементОтбораКр.Использование     = Истина;
	//ЭлементОтбораКр.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ТаблицаГрафика.ПредставлениеДня"+НомерДня);   
	//ЭлементОтбораКр.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбораКр.ПравоеЗначение    = "У";
	//ЭлементОтбораКр.Использование     = Истина;
		
	Для Сч = 1 По День(КонецМесяца(Объект.Период)) Цикл
		
		ЭлементОформленияКр = УсловноеОформление.Элементы.Добавить();
		ЭлементОформленияКр.Представление = "УволенПоСтроке"+Сч;
		ЭлементОформленияКр.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
		ЭлементОформленияКр.Использование = Истина;
		
		ЭлементОтбораКр = ЭлементОформленияКр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбораКр.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ТаблицаГрафика.ПредставлениеДня"+Сч);   
		ЭлементОтбораКр.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораКр.ПравоеЗначение    = "У";
		ЭлементОтбораКр.Использование     = Истина;
		
		ПолеОформления      = ЭлементОформленияКр.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаГрафикаПредставлениеДня"+Сч);
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикСогласован(Команда)
	
	Если Элементы.ТаблицаГрафика.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Модифицированность Тогда
		ПоказатьПредупреждение(,"Сначала запишите и проведите документ!",,);
		Возврат;
	КонецЕсли; 
	
	ФизЛицо = Элементы.ТаблицаГрафика.ТекущиеДанные.ФизЛицо; 
	ДолжностьСотрудника = Элементы.ТаблицаГрафика.ТекущиеДанные.ДолжностьСотрудника;
	
	ГрафикСогласованНаСервере(ФизЛицо, ДолжностьСотрудника);
	
	Элементы.ТаблицаГрафика.ТекущиеДанные.Согласован = Истина;
	
	Элементы.ТаблицаГрафикаГрафикСогласован.Пометка = Истина;
	Элементы.ТаблицаГрафикаГрафикСогласован.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ГрафикСогласованНаСервере(ФизЛицо, ДолжностьСотрудника)
	
	МенеджерЗаписи = РегистрыСведений.СтатусыСогласованияГрафикаССотрудниками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.График = Объект.Ссылка;
	МенеджерЗаписи.ФизЛицо = ФизЛицо;
	МенеджерЗаписи.ГрафикСогласован = Истина;
	МенеджерЗаписи.Записать();

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоВариантуГрафик(Команда)
	
	СписокЗначений = ЗаполнитьПоВариантуГрафикСервер();
	
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = СписокЗначений.ВыбратьЭлемент();
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДни = ЭлементСписка.Значение.Дни;
	//ДеньВыходной
	Понедельник = Неопределено;
	Вторник 	= Неопределено;	
	Среда 		= Неопределено;	
	Четверг 	= Неопределено;
	Пятница 	= Неопределено;
	Суббота 	= Неопределено;
	Воскресенье = Неопределено;
	
	Для каждого СтрокаТабДень Из ТаблицаДни Цикл
		
		Если СтрокаТабДень.Выходной Тогда
			Если СтрокаТабДень.ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Понедельник") Тогда
				Понедельник = 1;
			КонецЕсли;
			Если СтрокаТабДень.ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Вторник") Тогда
				Вторник 	= 2;
			КонецЕсли;
			Если СтрокаТабДень.ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Среда") Тогда
				Среда 		= 3;
			КонецЕсли;
			Если СтрокаТабДень.ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Четверг") Тогда
				Четверг 	= 4;
			КонецЕсли;
			Если СтрокаТабДень.ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Пятница") Тогда
				Пятница 	= 5;
			КонецЕсли;
			Если СтрокаТабДень.ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Суббота") Тогда
				Суббота 	= 6;
			КонецЕсли;
			Если СтрокаТабДень.ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Воскресенье") Тогда
				Воскресенье = 7;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Геннадий 25.05.2020 ->
	//работа через индексы массива приводит к ошибке - выход за пределы массива, при редактировании таблицы
	
	//ТекСтрока = Элементы.ТаблицаГрафика.ТекущаяСтрока;
	ТекДанные = Элементы.ТаблицаГрафика.ТекущиеДанные;
	//Геннадий 25.05.2020 <-
	
	СтруктураБуквенныйКод = ПолучитьСтруктуруБуквенныйКодВыходныеРабота();
	
	//если добавление сотрудника в пределах текущего месяца, расчет с текущего дня, иначе с первого дня месяца
	номерДняНачалаЗаполнения = 1;
	Если Месяц(ТекущаяДата()) = Месяц(Объект.Период) Тогда
		номерДняНачалаЗаполнения = День(ТекущаяДата());	
	КонецЕсли;
	
	Для Сч = номерДняНачалаЗаполнения По День(КонецМесяца(Объект.Период)) Цикл//заполнение только с текущего дня
		ТекущийДеньНедели = ДеньНедели(Дата(Год(Объект.Период), Месяц(Объект.Период), Сч));
		
		Если (ТекущийДеньНедели = Понедельник)
			ИЛИ (ТекущийДеньНедели = Вторник)
			ИЛИ (ТекущийДеньНедели = Среда)
			ИЛИ (ТекущийДеньНедели = Четверг)
			ИЛИ (ТекущийДеньНедели = Пятница)
			ИЛИ (ТекущийДеньНедели = Суббота)
			ИЛИ (ТекущийДеньНедели = Воскресенье) Тогда
			
			//Геннадий 25.05.2020 ->
			//ТаблицаГрафика[ТекСтрока]["ПредставлениеДня"+Сч] 	= СтруктураБуквенныйКод.ВыходныеДни; 
			//ТаблицаГрафика[ТекСтрока]["ЗначениеДня"+Сч] 		= ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни"); 
			ТекДанные["ПредставлениеДня"+Сч] 	= СтруктураБуквенныйКод.ВыходныеДни; 
			ТекДанные["ЗначениеДня"+Сч] 		= ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни"); 
			//Геннадий 25.05.2020 <-

		Иначе
			
			//Геннадий 25.05.2020 ->
			//ТаблицаГрафика[ТекСтрока]["ПредставлениеДня"+Сч] 	= СтруктураБуквенныйКод.Работа;
			//ТаблицаГрафика[ТекСтрока]["ЗначениеДня"+Сч] 		= ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.Работа"); 
			ТекДанные["ПредставлениеДня"+Сч] 	= СтруктураБуквенныйКод.Работа; 
			ТекДанные["ЗначениеДня"+Сч] 		= ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.Работа"); 
			//Геннадий 25.05.2020 <-
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруБуквенныйКодВыходныеРабота()

	ВыходныеДни = ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни");
	Работа = ПредопределенноеЗначение("Справочник.КлассификаторИспользованияРабочегоВремени.Работа");
	
	СтруктураБуквенныйКод = Новый Структура;
	СтруктураБуквенныйКод.Вставить("ВыходныеДни", 	ВыходныеДни.БуквенныйКод);
	СтруктураБуквенныйКод.Вставить("Работа", 		Работа.БуквенныйКод);
	
	Возврат СтруктураБуквенныйКод;
	
КонецФункции // ()
 

&НаСервере
Функция ЗаполнитьПоВариантуГрафикСервер()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыГрафиковСотрудников.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВариантыГрафиковСотрудников КАК ВариантыГрафиковСотрудников
		|ГДЕ
		|	НЕ ВариантыГрафиковСотрудников.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокЗначений = Новый СписокЗначений;
	
	Выборка = РезультатЗапроса.Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		СписокЗначений.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции


&НаКлиенте
Процедура ТаблицаГрафикаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Пометка = ПолучитьСрезПоследнихСтатусыСогласования(ТекущаяДата(), Элемент.ТекущиеДанные.ФизЛицо);
	
	Пометка = Элемент.ТекущиеДанные.Согласован;
	
	Элементы.ТаблицаГрафикаГрафикСогласован.Пометка = Пометка;
	Элементы.ТаблицаГрафикаГрафикСогласован.Доступность = НЕ Пометка;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	КлючНастроек = "Документ.ГрафикРаботыСотрудников";
	Настройки = Новый Соответствие;

	Настройки.Вставить("ТаблицаЗначений", ЭтаФорма.ТаблицаГрафика.Выгрузить());

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Документ.ГрафикРаботыСотрудников", КлючНастроек, Настройки);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()

	КлючНастроек = "Обработка.ГрафикРаботыСотрудников";

	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ГрафикРаботыСотрудников", КлючНастроек);

	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда

		ЗначениеИзНастройки = ЗначениеНастроек.Получить("ТаблицаЗначений");

		ЭтаФорма.ТаблицаГрафика.Загрузить(ЗначениеИзНастройки);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СохранитьНастройки();
КонецПроцедуры

//Геннадий 04.06.2020 ->
&НаКлиенте
Процедура ОбновитьСвод(Команда)
	
	Если Элементы.ФормаСвод.Пометка Тогда	
	    ПересчитатьТаблицуСводНовая();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировать(Команда)
	СортироватьТаблицуСервер()
КонецПроцедуры

&НаСервере
Процедура СортироватьТаблицуСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаГрафика.ФизЛицо КАК ФизЛицо,
		|	ТаблицаГрафика.ЗначениеДня1 КАК ЗначениеДня1,
		|	ТаблицаГрафика.ЗначениеДня2 КАК ЗначениеДня2,
		|	ТаблицаГрафика.ЗначениеДня3 КАК ЗначениеДня3,
		|	ТаблицаГрафика.ЗначениеДня4 КАК ЗначениеДня4,
		|	ТаблицаГрафика.ЗначениеДня5 КАК ЗначениеДня5,
		|	ТаблицаГрафика.ЗначениеДня6 КАК ЗначениеДня6,
		|	ТаблицаГрафика.ЗначениеДня7 КАК ЗначениеДня7,
		|	ТаблицаГрафика.ЗначениеДня8 КАК ЗначениеДня8,
		|	ТаблицаГрафика.ЗначениеДня9 КАК ЗначениеДня9,
		|	ТаблицаГрафика.ЗначениеДня10 КАК ЗначениеДня10,
		|	ТаблицаГрафика.ЗначениеДня11 КАК ЗначениеДня11,
		|	ТаблицаГрафика.ЗначениеДня12 КАК ЗначениеДня12,
		|	ТаблицаГрафика.ЗначениеДня13 КАК ЗначениеДня13,
		|	ТаблицаГрафика.ЗначениеДня14 КАК ЗначениеДня14,
		|	ТаблицаГрафика.ЗначениеДня15 КАК ЗначениеДня15,
		|	ТаблицаГрафика.ЗначениеДня16 КАК ЗначениеДня16,
		|	ТаблицаГрафика.ЗначениеДня17 КАК ЗначениеДня17,
		|	ТаблицаГрафика.ЗначениеДня18 КАК ЗначениеДня18,
		|	ТаблицаГрафика.ЗначениеДня19 КАК ЗначениеДня19,
		|	ТаблицаГрафика.ЗначениеДня20 КАК ЗначениеДня20,
		|	ТаблицаГрафика.ЗначениеДня21 КАК ЗначениеДня21,
		|	ТаблицаГрафика.ЗначениеДня22 КАК ЗначениеДня22,
		|	ТаблицаГрафика.ЗначениеДня23 КАК ЗначениеДня23,
		|	ТаблицаГрафика.ЗначениеДня24 КАК ЗначениеДня24,
		|	ТаблицаГрафика.ЗначениеДня25 КАК ЗначениеДня25,
		|	ТаблицаГрафика.ЗначениеДня26 КАК ЗначениеДня26,
		|	ТаблицаГрафика.ЗначениеДня27 КАК ЗначениеДня27,
		|	ТаблицаГрафика.ЗначениеДня28 КАК ЗначениеДня28,
		|	ТаблицаГрафика.ЗначениеДня29 КАК ЗначениеДня29,
		|	ТаблицаГрафика.ЗначениеДня30 КАК ЗначениеДня30,
		|	ТаблицаГрафика.ЗначениеДня31 КАК ЗначениеДня31,
		|	ТаблицаГрафика.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ТаблицаГрафика.Подразделение КАК Подразделение,
		|	ТаблицаГрафика.ПредставлениеДня1 КАК ПредставлениеДня1,
		|	ТаблицаГрафика.ПредставлениеДня2 КАК ПредставлениеДня2,
		|	ТаблицаГрафика.ПредставлениеДня3 КАК ПредставлениеДня3,
		|	ТаблицаГрафика.ПредставлениеДня4 КАК ПредставлениеДня4,
		|	ТаблицаГрафика.ПредставлениеДня5 КАК ПредставлениеДня5,
		|	ТаблицаГрафика.ПредставлениеДня6 КАК ПредставлениеДня6,
		|	ТаблицаГрафика.ПредставлениеДня7 КАК ПредставлениеДня7,
		|	ТаблицаГрафика.ПредставлениеДня8 КАК ПредставлениеДня8,
		|	ТаблицаГрафика.ПредставлениеДня9 КАК ПредставлениеДня9,
		|	ТаблицаГрафика.ПредставлениеДня10 КАК ПредставлениеДня10,
		|	ТаблицаГрафика.ПредставлениеДня11 КАК ПредставлениеДня11,
		|	ТаблицаГрафика.ПредставлениеДня12 КАК ПредставлениеДня12,
		|	ТаблицаГрафика.ПредставлениеДня13 КАК ПредставлениеДня13,
		|	ТаблицаГрафика.ПредставлениеДня14 КАК ПредставлениеДня14,
		|	ТаблицаГрафика.ПредставлениеДня15 КАК ПредставлениеДня15,
		|	ТаблицаГрафика.ПредставлениеДня16 КАК ПредставлениеДня16,
		|	ТаблицаГрафика.ПредставлениеДня17 КАК ПредставлениеДня17,
		|	ТаблицаГрафика.ПредставлениеДня18 КАК ПредставлениеДня18,
		|	ТаблицаГрафика.ПредставлениеДня19 КАК ПредставлениеДня19,
		|	ТаблицаГрафика.ПредставлениеДня20 КАК ПредставлениеДня20,
		|	ТаблицаГрафика.ПредставлениеДня21 КАК ПредставлениеДня21,
		|	ТаблицаГрафика.ПредставлениеДня22 КАК ПредставлениеДня22,
		|	ТаблицаГрафика.ПредставлениеДня23 КАК ПредставлениеДня23,
		|	ТаблицаГрафика.ПредставлениеДня24 КАК ПредставлениеДня24,
		|	ТаблицаГрафика.ПредставлениеДня25 КАК ПредставлениеДня25,
		|	ТаблицаГрафика.ПредставлениеДня26 КАК ПредставлениеДня26,
		|	ТаблицаГрафика.ПредставлениеДня27 КАК ПредставлениеДня27,
		|	ТаблицаГрафика.ПредставлениеДня28 КАК ПредставлениеДня28,
		|	ТаблицаГрафика.ПредставлениеДня29 КАК ПредставлениеДня29,
		|	ТаблицаГрафика.ПредставлениеДня30 КАК ПредставлениеДня30,
		|	ТаблицаГрафика.ПредставлениеДня31 КАК ПредставлениеДня31,
		|	ТаблицаГрафика.ПредставлениеДня КАК ПредставлениеДня,
		|	ТаблицаГрафика.Согласован КАК Согласован
		|ПОМЕСТИТЬ ВТ_ГрафикРаботы
		|ИЗ
		|	&ТаблицаГрафика КАК ТаблицаГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ГрафикРаботы.ФизЛицо КАК ФизЛицо,
		|	ВТ_ГрафикРаботы.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ВТ_ГрафикРаботы.ЗначениеДня1 КАК ЗначениеДня1,
		|	ВТ_ГрафикРаботы.ЗначениеДня2 КАК ЗначениеДня2,
		|	ВТ_ГрафикРаботы.ЗначениеДня3 КАК ЗначениеДня3,
		|	ВТ_ГрафикРаботы.ЗначениеДня4 КАК ЗначениеДня4,
		|	ВТ_ГрафикРаботы.ЗначениеДня5 КАК ЗначениеДня5,
		|	ВТ_ГрафикРаботы.ЗначениеДня6 КАК ЗначениеДня6,
		|	ВТ_ГрафикРаботы.ЗначениеДня7 КАК ЗначениеДня7,
		|	ВТ_ГрафикРаботы.ЗначениеДня8 КАК ЗначениеДня8,
		|	ВТ_ГрафикРаботы.ЗначениеДня9 КАК ЗначениеДня9,
		|	ВТ_ГрафикРаботы.ЗначениеДня10 КАК ЗначениеДня10,
		|	ВТ_ГрафикРаботы.ЗначениеДня11 КАК ЗначениеДня11,
		|	ВТ_ГрафикРаботы.ЗначениеДня12 КАК ЗначениеДня12,
		|	ВТ_ГрафикРаботы.ЗначениеДня13 КАК ЗначениеДня13,
		|	ВТ_ГрафикРаботы.ЗначениеДня14 КАК ЗначениеДня14,
		|	ВТ_ГрафикРаботы.ЗначениеДня15 КАК ЗначениеДня15,
		|	ВТ_ГрафикРаботы.ЗначениеДня16 КАК ЗначениеДня16,
		|	ВТ_ГрафикРаботы.ЗначениеДня17 КАК ЗначениеДня17,
		|	ВТ_ГрафикРаботы.ЗначениеДня18 КАК ЗначениеДня18,
		|	ВТ_ГрафикРаботы.ЗначениеДня19 КАК ЗначениеДня19,
		|	ВТ_ГрафикРаботы.ЗначениеДня20 КАК ЗначениеДня20,
		|	ВТ_ГрафикРаботы.ЗначениеДня21 КАК ЗначениеДня21,
		|	ВТ_ГрафикРаботы.ЗначениеДня22 КАК ЗначениеДня22,
		|	ВТ_ГрафикРаботы.ЗначениеДня23 КАК ЗначениеДня23,
		|	ВТ_ГрафикРаботы.ЗначениеДня24 КАК ЗначениеДня24,
		|	ВТ_ГрафикРаботы.ЗначениеДня25 КАК ЗначениеДня25,
		|	ВТ_ГрафикРаботы.ЗначениеДня26 КАК ЗначениеДня26,
		|	ВТ_ГрафикРаботы.ЗначениеДня27 КАК ЗначениеДня27,
		|	ВТ_ГрафикРаботы.ЗначениеДня28 КАК ЗначениеДня28,
		|	ВТ_ГрафикРаботы.ЗначениеДня29 КАК ЗначениеДня29,
		|	ВТ_ГрафикРаботы.ЗначениеДня30 КАК ЗначениеДня30,
		|	ВТ_ГрафикРаботы.ЗначениеДня31 КАК ЗначениеДня31,
		|	ВТ_ГрафикРаботы.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ВТ_ГрафикРаботы.ДолжностьСотрудника.ПорядокВыводаРоли КАК ПорядокДолжностиСотрудника,
		|	ВТ_ГрафикРаботы.Подразделение КАК Подразделение,
		|	ВТ_ГрафикРаботы.ПредставлениеДня1 КАК ПредставлениеДня1,
		|	ВТ_ГрафикРаботы.ПредставлениеДня2 КАК ПредставлениеДня2,
		|	ВТ_ГрафикРаботы.ПредставлениеДня3 КАК ПредставлениеДня3,
		|	ВТ_ГрафикРаботы.ПредставлениеДня4 КАК ПредставлениеДня4,
		|	ВТ_ГрафикРаботы.ПредставлениеДня5 КАК ПредставлениеДня5,
		|	ВТ_ГрафикРаботы.ПредставлениеДня6 КАК ПредставлениеДня6,
		|	ВТ_ГрафикРаботы.ПредставлениеДня7 КАК ПредставлениеДня7,
		|	ВТ_ГрафикРаботы.ПредставлениеДня8 КАК ПредставлениеДня8,
		|	ВТ_ГрафикРаботы.ПредставлениеДня9 КАК ПредставлениеДня9,
		|	ВТ_ГрафикРаботы.ПредставлениеДня10 КАК ПредставлениеДня10,
		|	ВТ_ГрафикРаботы.ПредставлениеДня11 КАК ПредставлениеДня11,
		|	ВТ_ГрафикРаботы.ПредставлениеДня12 КАК ПредставлениеДня12,
		|	ВТ_ГрафикРаботы.ПредставлениеДня13 КАК ПредставлениеДня13,
		|	ВТ_ГрафикРаботы.ПредставлениеДня14 КАК ПредставлениеДня14,
		|	ВТ_ГрафикРаботы.ПредставлениеДня15 КАК ПредставлениеДня15,
		|	ВТ_ГрафикРаботы.ПредставлениеДня16 КАК ПредставлениеДня16,
		|	ВТ_ГрафикРаботы.ПредставлениеДня17 КАК ПредставлениеДня17,
		|	ВТ_ГрафикРаботы.ПредставлениеДня18 КАК ПредставлениеДня18,
		|	ВТ_ГрафикРаботы.ПредставлениеДня19 КАК ПредставлениеДня19,
		|	ВТ_ГрафикРаботы.ПредставлениеДня20 КАК ПредставлениеДня20,
		|	ВТ_ГрафикРаботы.ПредставлениеДня21 КАК ПредставлениеДня21,
		|	ВТ_ГрафикРаботы.ПредставлениеДня22 КАК ПредставлениеДня22,
		|	ВТ_ГрафикРаботы.ПредставлениеДня23 КАК ПредставлениеДня23,
		|	ВТ_ГрафикРаботы.ПредставлениеДня24 КАК ПредставлениеДня24,
		|	ВТ_ГрафикРаботы.ПредставлениеДня25 КАК ПредставлениеДня25,
		|	ВТ_ГрафикРаботы.ПредставлениеДня26 КАК ПредставлениеДня26,
		|	ВТ_ГрафикРаботы.ПредставлениеДня27 КАК ПредставлениеДня27,
		|	ВТ_ГрафикРаботы.ПредставлениеДня28 КАК ПредставлениеДня28,
		|	ВТ_ГрафикРаботы.ПредставлениеДня29 КАК ПредставлениеДня29,
		|	ВТ_ГрафикРаботы.ПредставлениеДня30 КАК ПредставлениеДня30,
		|	ВТ_ГрафикРаботы.ПредставлениеДня31 КАК ПредставлениеДня31,
		|	ВТ_ГрафикРаботы.ПредставлениеДня КАК ПредставлениеДня,
		|	ВТ_ГрафикРаботы.Согласован КАК Согласован
		|ИЗ
		|	ВТ_ГрафикРаботы КАК ВТ_ГрафикРаботы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДолжностьСотрудника.ПорядокВыводаРоли,
		|	ФизЛицо.Наименование
		|";
	
	
	Запрос.УстановитьПараметр("ТаблицаГрафика", ТаблицаГрафика.Выгрузить());
	ТаблицаГрафика.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры
//Геннадий 04.06.2020 <-

//Переварюха В.В. 12.02.2020
#КонецОбласти 

