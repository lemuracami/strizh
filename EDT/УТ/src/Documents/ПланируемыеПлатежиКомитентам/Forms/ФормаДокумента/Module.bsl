//////////////////////////////ФОРМА
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//CeHbKA #20.07.2020
	ГруппаПодменю = Элементы.Добавить("ГруппаВыгрузитьПодменю", Тип("ГруппаФормы"), Элементы.ФормаКоманднаяПанель);
	ГруппаПодменю.Вид = ВидГруппыФормы.Подменю;
	ГруппаПодменю.Заголовок = "Выгрузка (по статьям)";
	//CeHbKA #20.07.2020
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаПлатежа	= ТекущаяДата();
		Объект.Пользователь	= ПараметрыСеанса.ТекущийПользователь.Ссылка;
		//заполним ТЧ ДоступныеРасчетныеСчета
		ЗаполнитьДоступныеРасчетныеСчета();
	КонецЕсли; 
	
	СоздатьДеревоНаСервере(Истина);
	
	Элементы.ФормаДокументПроверен.Пометка = ПроверкаДокументовСервер.ПолучитьСтатусПроверкиДокумента(Объект.Ссылка);	
				
	ИзменитьУсловноеОформление();	
	
	// - Дробница Р. Задача № 2548
	////Видимость только в тестовой среде
	//Элементы.ФормаЗаполнитьПоРегиструПоСтатьям.Видимость = ПараметрыСеанса.ЭтоТестоваяСреда;
	//Элементы.ФормаВыгрузкаВБухПоСтатьям.Видимость = ПараметрыСеанса.ЭтоТестоваяСреда;

	// Дробница Р. Задача № 2548 - 
	
	//CeHbKA #20.07.2020
	Если Элементы.ФормаДокументПроверен.Пометка Тогда
		УдалитьКнопкиВыгрузки();
		ДобавитьКнопкиВыгрузки();
	КонецЕсли; 
	//CeHbKA #20.07.2020
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКнопкиВыгрузки()

	//пробежим по организациям
	Для каждого СтрокаДЗ из ЭтаФорма["ДеревоПлатежей"].ПолучитьЭлементы() цикл
		
		//Добавляем новую команду
		ИмяКоманды = "ВыгрузитьПоОрганизации"+СтрокаДЗ.Измерение.ИНН;
		ЗаголовокКнопки = "Выгрузка (по статьям)  "+СтрокаДЗ.Измерение;		
		ДобавитьКнопкуВыгрузки(ИмяКоманды, ЗаголовокКнопки);
		
	КонецЦикла;
	
	//добавим общую команду
	ИмяКоманды = "ВыгрузитьПоОрганизацииОбщая";
	ЗаголовокКнопки = "Выгрузка (по статьям) общая";
	ДобавитьКнопкуВыгрузки(ИмяКоманды, ЗаголовокКнопки);
	

КонецПроцедуры // ()
 

&НаСервере
Процедура ДобавитьКнопкуВыгрузки(ИмяКоманды, ЗаголовокКнопки)

	НоваяКоманда = Команды.Добавить(ИмяКоманды);
	НоваяКоманда.Действие = "ВыгрузкаВБухПоСтатьям";
	НоваяКоманда.Заголовок = ЗаголовокКнопки;
	
	НовыйЭлемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы["ГруппаВыгрузитьПодменю"]);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;	

КонецПроцедуры // ()

&НаСервере
Процедура УдалитьКнопкиВыгрузки()

	//элементы
	МассивУдаляемыхЭлементов = Новый Массив;
	
	Для каждого КнопкаФормы Из Элементы["ГруппаВыгрузитьПодменю"].ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(КнопкаФормы);	
	КонецЦикла; 

	Для каждого КнопкаФормы Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(КнопкаФормы);
	КонецЦикла; 
	
	//команды
	МассивУдаляемыхКоманд = Новый Массив;
	
	Для каждого Команда Из Команды Цикл
		Если СтрНайти(Команда.Имя, "ВыгрузитьПоОрганизации") > 0 Тогда
			МассивУдаляемыхКоманд.Добавить(Команда);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого Команда Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(Команда);
	КонецЦикла; 
	
КонецПроцедуры // ()
 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверкаДокумента(Элементы.ФормаДокументПроверен.Пометка);
	
	ДеревоПлатежейПересчитатьПодвал();
	
	Элементы.ДеревоПлатежей.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;	
	
	ИзменитьЗаголовокКнопкиРазвертка();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ДеревовТЧ(ТекущийОбъект);
	
	Если НЕ Отказ Тогда		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповеститьОВыборе("ОбновитьСтатус");
		
КонецПроцедуры

//////////////////////////////ДЕРЕВО ЗНАЧЕНИЙ
&НаСервере
Процедура ЗаполнитьДоступныеРасчетныеСчета()
	
	//ООО СТРИЖ
	НС = Объект.ДоступныеРасчетныеСчета.Добавить();
	НС.Организация = Справочники.Организации.НайтиПоКоду("00-000001");
	НС.РасчетныйСчет = Справочники.БанковскиеСчета.НайтиПоКоду("000000006",,,НС.Организация);

	//АО "СТРИЖ-Логистик"
	НС = Объект.ДоступныеРасчетныеСчета.Добавить();
	НС.Организация = Справочники.Организации.НайтиПоКоду("00-000005");
	НС.РасчетныйСчет = Справочники.БанковскиеСчета.НайтиПоКоду("000000005",,,НС.Организация);
	
	//CeHbKA #2278 дополнение 1 15.07.2021
	НС = Объект.ДоступныеРасчетныеСчета.Добавить();
	НС.Организация = Справочники.Организации.НайтиПоКоду("00-000012");
	НС.РасчетныйСчет = Справочники.БанковскиеСчета.НайтиПоКоду("000000007",,,НС.Организация);	
	
	НС = Объект.ДоступныеРасчетныеСчета.Добавить();
	НС.Организация = Справочники.Организации.НайтиПоКоду("00-000013");
	НС.РасчетныйСчет = Справочники.БанковскиеСчета.НайтиПоКоду("000000008",,,НС.Организация);		
	//CeHbKA #2278 дополнение 1 15.07.2021
		
КонецПроцедуры // ()
 
&НаСервере
Процедура СоздатьДеревоНаСервере(ЗаполнитьПоТЧ = Ложь, ПоСтатьям = Ложь)

	Если ЗаполнитьПоТЧ И Не ПоСтатьям Тогда
		
		Для Каждого СтрокаТЧ Из Объект.ПлатежиКИсполнению Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасчетовСКомитентами) Тогда
				ПоСтатьям = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	
	//1
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ДеревоЗначений"));
	ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДеревоПлатежей", ОписаниеТипаВыбора, "", "Дерево платежей"));	
	
	//2
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);            
	МассивКД = Новый Массив;
	МассивКД.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивКД, , ,КД);
	
	СтрокаОписанияТипов = ?(Не ПоСтатьям, 
	"СправочникСсылка.Организации, СправочникСсылка.Контрагенты", 
	"СправочникСсылка.Организации, СправочникСсылка.Контрагенты, СправочникСсылка.СтатьиРасчетовСКомитентами");
	
	ОписаниеТиповИзмерение = Новый ОписаниеТипов(ОписаниеТиповДата,СтрокаОписанияТипов);	
	
	ОписаниеТиповРасчетныйСчет = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	КЧ = Новый КвалификаторыЧисла(15, 2);
    ОписаниеЧисла = Новый ОписаниеТипов("Число", КЧ);
	
	//3
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Измерение", ОписаниеТиповИзмерение, "Измерение");
	Дерево.Колонки.Добавить("СуммаОрганизации", ОписаниеЧисла, "ИТОГО");
	Дерево.Колонки.Добавить("ДнейПросрочено", ОписаниеЧисла, "Дней просрочено");	
	Дерево.Колонки.Добавить("Просрочено", ОписаниеЧисла, "Просрочено");	
	Дерево.Колонки.Добавить("СуммаЗадолженности", ОписаниеЧисла, "Сумма задолженности"); 
	
	Если ЗаполнитьПоТЧ Тогда
		Для каждого ТекСтрока Из Объект.ДоступныеРасчетныеСчета Цикл
			//Дерево.Колонки.Добавить("РС"+ТекСтрока.НомерСтроки, ОписаниеТиповБулево, ТекСтрока.РасчетныйСчет.НомерСчета);
			Дерево.Колонки.Добавить("РС"+ТекСтрока.НомерСтроки, ОписаниеЧисла, ТекСтрока.РасчетныйСчет.НомерСчета);
		КонецЦикла; 
	КонецЕсли; 
	
	Дерево.Колонки.Добавить("СуммаУменьшения", ОписаниеЧисла, "Сумма уменьшения");
	
	Дерево.Колонки.Добавить("Редактировать", ОписаниеЧисла, "Редактировать");	
	
	//Дерево.Колонки.Добавить("Булево", ОписаниеТиповБулево, "Булево");
		
	Для Каждого Колонка Из Дерево.Колонки Цикл
		
	    МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоПлатежей", Колонка.Заголовок));
		 		 
	 КонецЦикла;
	
	//4
	ИзменитьРеквизиты(МассивРеквизитов);      
	
	//5
	ДеревоПлатежей = Элементы.Добавить("ДеревоПлатежей", Тип("ТаблицаФормы"), Элементы.ГруппаДерево);
	ДеревоПлатежей.ПутьКДанным = "ДеревоПлатежей";
	ДеревоПлатежей.Отображение = ОтображениеТаблицы.Дерево;	
	
	ДеревоПлатежей.АвтоВводНовойСтроки = Ложь;
	
   	ДеревоПлатежей.УстановитьДействие("ПриИзменении", 					 "ДеревоПлатежейПриИзменении");	
	ДеревоПлатежей.УстановитьДействие("ПередНачаломИзменения", "ДеревоПлатежейПередНачаломИзменения");	
	   //ТаблицаПолейВыбора.УстановитьДействие("ПередУдалением",			"ТЗНПередУдалением");	
	   
	//ГруппаИзмерение = Элементы.Добавить("ДеревоГруппа", Тип("ГруппаФормы"), ДеревоПлатежей); 
	//ГруппаИзмерение.Вид = ВидГруппыФормы.ГруппаКолонок;
	//ГруппаИзмерение.ОтображатьВШапке = Ложь;
	//ГруппаИзмерение.Группировка = ГруппировкаКолонок.Горизонтальная;
	//ГруппаИзмерение.Ширина = 10;
	
	//7
	Для Каждого Колонка Из Дерево.Колонки Цикл
		
		//Если (Колонка.Имя = "Измерение") ИЛИ (Колонка.Имя = "СуммаОрганизации") Тогда
		//	ЭлементРодитель = ГруппаИзмерение;
		//Иначе
			ЭлементРодитель = ДеревоПлатежей;
		//КонецЕсли; 
		
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), ЭлементРодитель);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ДеревоПлатежей." + Колонка.Имя;
		НовыйЭлемент.Ширина = 10;
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
		Если Колонка.Имя = "Измерение" Тогда
			НовыйЭлемент.Ширина = 20;
			НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		ИначеЕсли Колонка.Имя = "СуммаОрганизации" Тогда
			НовыйЭлемент.Ширина = 15;
		КонецЕсли; 
		
		//Если Колонка.ТипЗначения = ОписаниеТиповБулево Тогда
		Если Колонка.Имя = "РС1"
			ИЛИ Колонка.Имя = "РС2"
		//CeHbKA #2278 дополнение 1 15.07.2021		
			ИЛИ Колонка.Имя = "РС3" 
			ИЛИ Колонка.Имя = "РС4" Тогда
		//CeHbKA #2278 дополнение 1 15.07.2021
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.ТриСостояния = Истина;
		КонецЕсли; 
		
		//Если Колонка.ТипЗначения = ОписаниеТиповБулево 
		Если Колонка.Имя = "РС1"
			ИЛИ Колонка.Имя = "РС2"
			//CeHbKA #2278 дополнение 1 15.07.2021
			ИЛИ Колонка.Имя = "РС3" 
			ИЛИ Колонка.Имя = "РС4"
			//CeHbKA #2278 дополнение 1 15.07.2021
			ИЛИ Колонка.Имя = "СуммаУменьшения" Тогда
			НовыйЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли; 
		
		Если Колонка.Имя = "СуммаУменьшения" Тогда
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоПлатежейСуммаУменьшенияПриИзменении");
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоПлатежейСуммаУменьшенияПриИзменении");			
		КонецЕсли; 
		
		//Если Колонка.ТипЗначения = ОписаниеТиповБулево Тогда 
		Если Колонка.Имя = "РС1"
			ИЛИ Колонка.Имя = "РС2"
			//CeHbKA #2278 дополнение 1 15.07.2021
			ИЛИ Колонка.Имя = "РС3" 
			ИЛИ Колонка.Имя = "РС4" Тогда
			//CeHbKA #2278 дополнение 1 15.07.2021
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоПлатежейОплачиватьПриИзменении");
		КонецЕсли; 
		
	КонецЦикла;
	
	//7
	//заполняем данными
	ТЧВДерево(Дерево, ПоСтатьям);
		
	//8
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПлатежей");
	
	//9
	Элементы.Редактировать.Видимость = Ложь;
	Элементы.ДеревоПлатежейКоманднаяПанель.Видимость = Ложь;
	Элементы.ДеревоПлатежей.ИзменятьПорядокСтрок = Ложь;
	Элементы.ДеревоПлатежей.ИзменятьСоставСтрок = Ложь;
	Элементы.ДеревоПлатежей.РазрешитьНачалоПеретаскивания = Ложь;
	Элементы.ДеревоПлатежей.РазрешитьПеретаскивание = Ложь;
	//Элементы.ДеревоПлатежей.ЧередованиеЦветовСтрок = Истина;
	Элементы.ДеревоПлатежей.Подвал = Истина;
		
	//10
	//ЗаполнитьДанныеТаблицыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДеревоНаСервере()

	МассивРеквизитов = ПолучитьРеквизиты();
	
	Для каждого РеквизитФормы Из МассивРеквизитов Цикл
		
		Если РеквизитФормы.Имя = "ДеревоПлатежей" Тогда
			
			УдаляемыеРеквизиты = Новый Массив;
			УдаляемыеРеквизиты.Добавить("ДеревоПлатежей");
			
			ИзменитьРеквизиты(, УдаляемыеРеквизиты);
			
		КонецЕсли; 
		
	КонецЦикла; 
		
КонецПроцедуры


&НаСервере
Процедура ТЧвДеревоПоСтатьям(Дерево)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокТЧ.Организация КАК Организация,
	|	ДокТЧ.Комитент КАК Комитент,
	|	ДокТЧ.ДатаЗадолженности КАК ДатаЗадолженности,
	|	ДокТЧ.СтатьяРасчетовСКомитентами КАК СтатьяРасчетовСКомитентами,
	|	ДокТЧ.СуммаЗадолженности КАК СуммаЗадолженности,
	|	ДокТЧ.СуммаУменьшенияПлатежа КАК СуммаУменьшенияПлатежа,
	|	ДокТЧ.РасчетныйСчет КАК РасчетныйСчет,
	|	ДокТЧ.ДнейПросрочено КАК ДнейПросрочено,
	|	ДокТЧ.Просрочена КАК Просрочена,
	|	ДокТЧ.Оплачивать КАК Оплачивать
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	&ДокТЧ КАК ДокТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТЧ.Организация КАК Организация,
	|	ДокТЧ.Комитент КАК Комитент,
	|	ДокТЧ.ДатаЗадолженности КАК ДатаЗадолженности,
	|	ДокТЧ.СтатьяРасчетовСКомитентами КАК СтатьяРасчетовСКомитентами,
	|	ДокТЧ.СуммаЗадолженности КАК СуммаЗадолженности,
	|	ДокТЧ.СуммаУменьшенияПлатежа КАК СуммаУменьшенияПлатежа,
	|	ДокТЧ.РасчетныйСчет КАК РасчетныйСчет,
	|	ДокТЧ.ДнейПросрочено КАК ДнейПросрочено,
	|	ДокТЧ.Просрочена КАК Просрочена,
	|	ДокТЧ.Оплачивать КАК Оплачивать
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|УПОРЯДОЧИТЬ ПО
	|	Организация.Код,
	|	Комитент.Наименование,
	|	ДатаЗадолженности,
	|	СтатьяРасчетовСКомитентами
	|ИТОГИ ПО
	|	Организация,
	|	Комитент,
	|	ДатаЗадолженности";	
	Запрос.УстановитьПараметр("ДокТЧ", Объект.ПлатежиКИсполнению.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//запрос с итогами
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		СтрокаОрганизация			= Дерево.Строки.Добавить();
		СтрокаОрганизация.Измерение = ВыборкаОрганизация.Организация;
		
		ВыборкаКомитент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКомитент.Следующий() Цикл
	
			СтрокаКомитент			 = СтрокаОрганизация.Строки.Добавить();
			СтрокаКомитент.Измерение = ВыборкаКомитент.Комитент;
			
			ВыборкаДатаЗадолженности = ВыборкаКомитент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаДатаЗадолженности.Следующий() Цикл
								
				СтрокаДата						= СтрокаКомитент.Строки.Добавить();
				СтрокаДата.Измерение			= ВыборкаДатаЗадолженности.ДатаЗадолженности;
				
				ВыборкаДетальныеЗаписи = ВыборкаДатаЗадолженности.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					СтрокаСтатья						= СтрокаДата.Строки.Добавить();
					СтрокаСтатья.Измерение				= ВыборкаДетальныеЗаписи.СтатьяРасчетовСКомитентами;
					СтрокаСтатья.СуммаЗадолженности		= ВыборкаДетальныеЗаписи.СуммаЗадолженности;
					СтрокаСтатья.СуммаУменьшения		= ВыборкаДетальныеЗаписи.СуммаУменьшенияПлатежа;
					СтрокаСтатья.ДнейПросрочено			= ВыборкаДетальныеЗаписи.ДнейПросрочено;
					
					Для каждого Колонка Из Дерево.Колонки Цикл
						Если Колонка.Заголовок = ВыборкаДетальныеЗаписи.РасчетныйСчет.НомерСчета Тогда
							СтрокаСтатья[Колонка.Имя]			= ВыборкаДетальныеЗаписи.Оплачивать;
							СтрокаДата[Колонка.Имя]				= СтрокаДата[Колонка.Имя] + ВыборкаДетальныеЗаписи.Оплачивать; 
							СтрокаСтатья.Редактировать			= СтрЗаменить(Колонка.Имя, "РС", "");
							СтрокаДата.Редактировать			= СтрокаСтатья.Редактировать;
							СтрокаКомитент.Редактировать			= СтрокаСтатья.Редактировать;
							СтрокаОрганизация.Редактировать 	= СтрокаСтатья.Редактировать;						
							СтрокаСтатья.СуммаОрганизации		= ?(ВыборкаДетальныеЗаписи.Оплачивать, ВыборкаДетальныеЗаписи.СуммаЗадолженности, 0);
						КонецЕсли; 
					КонецЦикла; 
					
					СтрокаОрганизация.СуммаЗадолженности = СтрокаОрганизация.СуммаЗадолженности + СтрокаСтатья.СуммаЗадолженности;
					СтрокаКомитент.СуммаЗадолженности	 = СтрокаКомитент.СуммаЗадолженности + СтрокаСтатья.СуммаЗадолженности;
					СтрокаДата.СуммаЗадолженности	 	 = СтрокаДата.СуммаЗадолженности + СтрокаСтатья.СуммаЗадолженности;

					
					СтрокаОрганизация.СуммаУменьшения	 = СтрокаОрганизация.СуммаУменьшения + СтрокаСтатья.СуммаУменьшения;
					СтрокаКомитент.СуммаУменьшения		 = СтрокаКомитент.СуммаУменьшения + СтрокаСтатья.СуммаУменьшения;
					СтрокаДата.СуммаУменьшения		 	 = СтрокаДата.СуммаУменьшения + СтрокаСтатья.СуммаУменьшения;

					
					//СтрокаОрганизация.ДнейПросрочено	 = СтрокаОрганизация.ДнейПросрочено + СтрокаДата.ДнейПросрочено;
					СтрокаКомитент.ДнейПросрочено		 = Макс(СтрокаКомитент.ДнейПросрочено,СтрокаСтатья.ДнейПросрочено);				
					СтрокаДата.ДнейПросрочено		 	 = Макс(СтрокаДата.ДнейПросрочено,СтрокаСтатья.ДнейПросрочено);	
					
					СтрокаОрганизация.СуммаОрганизации	 = СтрокаОрганизация.СуммаОрганизации + СтрокаСтатья.СуммаОрганизации;
					СтрокаКомитент.СуммаОрганизации		 = СтрокаКомитент.СуммаОрганизации + СтрокаСтатья.СуммаОрганизации;
					СтрокаДата.СуммаОрганизации		 	 = СтрокаДата.СуммаОрганизации + СтрокаСтатья.СуммаОрганизации;

					
					Если ВыборкаДетальныеЗаписи.Просрочена Тогда
						
						СтрокаСтатья.Просрочено			 = ВыборкаДетальныеЗаписи.СуммаЗадолженности;
						
						СтрокаОрганизация.Просрочено	 = СтрокаОрганизация.Просрочено + СтрокаСтатья.Просрочено;
						СтрокаКомитент.Просрочено		 = СтрокаКомитент.Просрочено + СтрокаСтатья.Просрочено;
						СтрокаДата.Просрочено		 	 = СтрокаДата.Просрочено + СтрокаСтатья.Просрочено;

						
					КонецЕсли; 
					
				КонецЦикла;
				
				//посчитаем состояние галки для 3 уровня
				Для каждого Колонка Из Дерево.Колонки Цикл
					
					Если Найти(Колонка.Имя, "РС") > 0 Тогда
						
						Если СтрокаДата[Колонка.Имя] = 0 Тогда
						ИначеЕсли СтрокаДата[Колонка.Имя] = СтрокаДата.Строки.Количество() Тогда
							СтрокаДата[Колонка.Имя] = 1;
						Иначе
							СтрокаДата[Колонка.Имя] = 2;
						КонецЕсли; 
						
						СтрокаКомитент[Колонка.Имя] = СтрокаКомитент[Колонка.Имя] + СтрокаДата[Колонка.Имя]; 
						
					КонецЕсли; 
					
				КонецЦикла; 
			
			КонецЦикла;
			
			//посчитаем состояние галки для 2 уровня
			Для каждого Колонка Из Дерево.Колонки Цикл
				
				Если Найти(Колонка.Имя, "РС") > 0 Тогда

					Если СтрокаКомитент[Колонка.Имя] = 0 Тогда
					ИначеЕсли СтрокаКомитент[Колонка.Имя] = СтрокаКомитент.Строки.Количество() Тогда
						СтрокаКомитент[Колонка.Имя] = 1;
					Иначе
						СтрокаКомитент[Колонка.Имя] = 2;
					КонецЕсли; 
					
					СтрокаОрганизация[Колонка.Имя] = СтрокаОрганизация[Колонка.Имя] + СтрокаКомитент[Колонка.Имя]; 
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЦикла;
				
		//посчитаем состояние галки для 1 уровня
		Для каждого Колонка Из Дерево.Колонки Цикл
			
			Если Найти(Колонка.Имя, "РС") > 0 Тогда
				
				Если СтрокаОрганизация[Колонка.Имя] = 0 Тогда
				ИначеЕсли СтрокаКомитент[Колонка.Имя] = СтрокаОрганизация.Строки.Количество() Тогда
					СтрокаОрганизация[Колонка.Имя] = 1;
				Иначе
					СтрокаОрганизация[Колонка.Имя] = 2;
				КонецЕсли; 
								
			КонецЕсли; 
			
		КонецЦикла; 
			
	КонецЦикла;
		
КонецПроцедуры // ()

&НаСервере
Процедура ТЧвДерево(Дерево, ПоСтатьям = Ложь)
	
	Если ПоСтатьям Тогда 
		ТЧвДеревоПоСтатьям(Дерево);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокТЧ.Организация КАК Организация,
	|	ДокТЧ.Комитент КАК Комитент,
	|	ДокТЧ.ДатаЗадолженности КАК ДатаЗадолженности,
	|	ДокТЧ.СуммаЗадолженности КАК СуммаЗадолженности,
	|	ДокТЧ.СуммаУменьшенияПлатежа КАК СуммаУменьшенияПлатежа,
	|	ДокТЧ.РасчетныйСчет КАК РасчетныйСчет,
	|	ДокТЧ.ДнейПросрочено КАК ДнейПросрочено,
	|	ДокТЧ.Просрочена КАК Просрочена,
	|	ДокТЧ.Оплачивать КАК Оплачивать
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	&ДокТЧ КАК ДокТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТЧ.Организация КАК Организация,
	|	ДокТЧ.Комитент КАК Комитент,
	|	ДокТЧ.ДатаЗадолженности КАК ДатаЗадолженности,
	|	ДокТЧ.СуммаЗадолженности КАК СуммаЗадолженности,
	|	ДокТЧ.СуммаУменьшенияПлатежа КАК СуммаУменьшенияПлатежа,
	|	ДокТЧ.РасчетныйСчет КАК РасчетныйСчет,
	|	ДокТЧ.ДнейПросрочено КАК ДнейПросрочено,
	|	ДокТЧ.Просрочена КАК Просрочена,
	|	ДокТЧ.Оплачивать КАК Оплачивать
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|УПОРЯДОЧИТЬ ПО
	|	Организация.Код,
	|	Комитент.Наименование,
	|	ДатаЗадолженности
	|ИТОГИ ПО
	|	Организация,
	|	Комитент";
	Запрос.УстановитьПараметр("ДокТЧ", Объект.ПлатежиКИсполнению.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//запрос с итогами
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		СтрокаОрганизация			= Дерево.Строки.Добавить();
		СтрокаОрганизация.Измерение = ВыборкаОрганизация.Организация;
		
		ВыборкаКомитент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКомитент.Следующий() Цикл
	
			СтрокаКомитент			 = СтрокаОрганизация.Строки.Добавить();
			СтрокаКомитент.Измерение = ВыборкаКомитент.Комитент;
			
			ВыборкаДетальныеЗаписи = ВыборкаКомитент.Выбрать();
	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

				СтрокаДата						= СтрокаКомитент.Строки.Добавить();
				СтрокаДата.Измерение			= ВыборкаДетальныеЗаписи.ДатаЗадолженности;
				СтрокаДата.СуммаЗадолженности	= ВыборкаДетальныеЗаписи.СуммаЗадолженности;
				СтрокаДата.СуммаУменьшения		= ВыборкаДетальныеЗаписи.СуммаУменьшенияПлатежа;
				СтрокаДата.ДнейПросрочено		= ВыборкаДетальныеЗаписи.ДнейПросрочено;
				
				Для каждого Колонка Из Дерево.Колонки Цикл
					Если Колонка.Заголовок = ВыборкаДетальныеЗаписи.РасчетныйСчет.НомерСчета Тогда
						СтрокаДата[Колонка.Имя]			= ВыборкаДетальныеЗаписи.Оплачивать;
						СтрокаКомитент[Колонка.Имя]		= СтрокаКомитент[Колонка.Имя] + ВыборкаДетальныеЗаписи.Оплачивать; 
						СтрокаДата.Редактировать		= СтрЗаменить(Колонка.Имя, "РС", "");
						СтрокаКомитент.Редактировать	= СтрокаДата.Редактировать;
						СтрокаОрганизация.Редактировать = СтрокаДата.Редактировать;						
						СтрокаДата.СуммаОрганизации		= ?(ВыборкаДетальныеЗаписи.Оплачивать, ВыборкаДетальныеЗаписи.СуммаЗадолженности, 0);
					КонецЕсли; 
				КонецЦикла; 
								
				СтрокаОрганизация.СуммаЗадолженности = СтрокаОрганизация.СуммаЗадолженности + СтрокаДата.СуммаЗадолженности;
				СтрокаКомитент.СуммаЗадолженности	 = СтрокаКомитент.СуммаЗадолженности + СтрокаДата.СуммаЗадолженности;
				
				СтрокаОрганизация.СуммаУменьшения	 = СтрокаОрганизация.СуммаУменьшения + СтрокаДата.СуммаУменьшения;
				СтрокаКомитент.СуммаУменьшения		 = СтрокаКомитент.СуммаУменьшения + СтрокаДата.СуммаУменьшения;
				
				//СтрокаОрганизация.ДнейПросрочено	 = СтрокаОрганизация.ДнейПросрочено + СтрокаДата.ДнейПросрочено;
				СтрокаКомитент.ДнейПросрочено		 = Макс(СтрокаКомитент.ДнейПросрочено,СтрокаДата.ДнейПросрочено);				
				
				СтрокаОрганизация.СуммаОрганизации	 = СтрокаОрганизация.СуммаОрганизации + СтрокаДата.СуммаОрганизации;
				СтрокаКомитент.СуммаОрганизации		 = СтрокаКомитент.СуммаОрганизации + СтрокаДата.СуммаОрганизации;
				
				Если ВыборкаДетальныеЗаписи.Просрочена Тогда
					
					СтрокаДата.Просрочено			 = ВыборкаДетальныеЗаписи.СуммаЗадолженности;
					
					СтрокаОрганизация.Просрочено	 = СтрокаОрганизация.Просрочено + СтрокаДата.Просрочено;
					СтрокаКомитент.Просрочено		 = СтрокаКомитент.Просрочено + СтрокаДата.Просрочено;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			//посчитаем состояние галки для 2 уровня
			Для каждого Колонка Из Дерево.Колонки Цикл
				
				Если Найти(Колонка.Имя, "РС") > 0 Тогда

					Если СтрокаКомитент[Колонка.Имя] = 0 Тогда
					ИначеЕсли СтрокаКомитент[Колонка.Имя] = СтрокаКомитент.Строки.Количество() Тогда
						СтрокаКомитент[Колонка.Имя] = 1;
					Иначе
						СтрокаКомитент[Колонка.Имя] = 2;
					КонецЕсли; 
					
					СтрокаОрганизация[Колонка.Имя] = СтрокаОрганизация[Колонка.Имя] + СтрокаКомитент[Колонка.Имя]; 
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЦикла;
				
		//посчитаем состояние галки для 1 уровня
		Для каждого Колонка Из Дерево.Колонки Цикл
			
			Если Найти(Колонка.Имя, "РС") > 0 Тогда
				
				Если СтрокаОрганизация[Колонка.Имя] = 0 Тогда
				ИначеЕсли СтрокаКомитент[Колонка.Имя] = СтрокаОрганизация.Строки.Количество() Тогда
					СтрокаОрганизация[Колонка.Имя] = 1;
				Иначе
					СтрокаОрганизация[Колонка.Имя] = 2;
				КонецЕсли; 
								
			КонецЕсли; 
			
		КонецЦикла; 
			
	КонецЦикла;
		
КонецПроцедуры // ()
 
&НаСервере
Процедура ДеревовТЧ(ТекущийОбъект)

	ТекущийОбъект.ПлатежиКИсполнению.Очистить();
	Рекурсия(РеквизитФормыВЗначение("ДеревоПлатежей"), ТекущийОбъект);	

КонецПроцедуры
 
&НаСервере
Процедура Рекурсия(СтрокаРодитель, ТекущийОбъект)

	Для каждого ТекСтрока Из СтрокаРодитель.Строки Цикл
		
		Если ТекСтрока.Уровень() = 2 Тогда
			
			Если ТекСтрока.Строки.Количество() = 0 Тогда
				
				НомерОплачиваемогоСчета = Неопределено;
				
				Если ТекСтрока.РС1 Тогда
					НомерОплачиваемогоСчета = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы["РС1"].Заголовок;
				КонецЕсли; 
				
				Если ТекСтрока.РС2 Тогда
					НомерОплачиваемогоСчета = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы["РС2"].Заголовок;
				КонецЕсли; 
				
				//CeHbKA #2278 дополнение 1 15.07.2021
				Если ТекСтрока.РС3 Тогда
					НомерОплачиваемогоСчета = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы["РС3"].Заголовок;
				КонецЕсли; 
				
				Если ТекСтрока.РС4 Тогда
					НомерОплачиваемогоСчета = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы["РС4"].Заголовок;
				КонецЕсли; 
				//CeHbKA #2278 дополнение 1 15.07.2021
				
				ДобавитьИзменитьСтрокуТЧ(ТекущийОбъект,
										СтрокаРодитель.Родитель.Измерение, //Организация 
										СтрокаРодитель.Измерение, //Комитент 
										ТекСтрока.Измерение, //ДатаЗадолженности
										,
										ТекСтрока.СуммаЗадолженности, 
										НомерОплачиваемогоСчета,
										ТекСтрока.СуммаУменьшения,
										ТекСтрока.Просрочено,
										ТекСтрока.ДнейПросрочено);
			Иначе
				
				Для Каждого СтрокаСтатьи Из ТекСтрока.Строки Цикл
					
					НомерОплачиваемогоСчета = Неопределено;
					
					Если СтрокаСтатьи.РС1 Тогда
						НомерОплачиваемогоСчета = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы["РС1"].Заголовок;
					КонецЕсли; 
					
					Если СтрокаСтатьи.РС2 Тогда
						НомерОплачиваемогоСчета = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы["РС2"].Заголовок;
					КонецЕсли; 
					
					//CeHbKA #2278 дополнение 1 15.07.2021
					Если ТекСтрока.РС3 Тогда
						НомерОплачиваемогоСчета = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы["РС3"].Заголовок;
					КонецЕсли; 
					
					Если ТекСтрока.РС4 Тогда
						НомерОплачиваемогоСчета = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы["РС4"].Заголовок;
					КонецЕсли; 
					//CeHbKA #2278 дополнение 1 15.07.2021
					
					ДобавитьИзменитьСтрокуТЧ(ТекущийОбъект,
							СтрокаРодитель.Родитель.Измерение, //Организация 
							СтрокаРодитель.Измерение, //Комитент 
							ТекСтрока.Измерение, //ДатаЗадолженности
							СтрокаСтатьи.Измерение, //СтатьяРасчетовСКомитентами
							СтрокаСтатьи.СуммаЗадолженности, 
							НомерОплачиваемогоСчета,
							СтрокаСтатьи.СуммаУменьшения,
							СтрокаСтатьи.Просрочено,
							СтрокаСтатьи.ДнейПросрочено);
					
				КонецЦикла;
				
			КонецЕсли;	
		Иначе
			Рекурсия(ТекСтрока, ТекущийОбъект);
		КонецЕсли; 
		
	КонецЦикла; 	

КонецПроцедуры
 
&НаСервере
Процедура ДобавитьИзменитьСтрокуТЧ(ТекущийОбъект, Организация, Комитент, ДатаЗадолженности, СтатьяРасчетовСКомитентами = Неопределено, СуммаЗадолженности, НомерОплачиваемогоСчета, СуммаУменьшенияПлатежа, Просрочена, ДнейПросрочено)
		
	НС = ТекущийОбъект.ПлатежиКИсполнению.Добавить();
	НС.Организация = Организация;
	НС.Комитент = Комитент;
	НС.ДатаЗадолженности = ДатаЗадолженности;
	НС.СуммаЗадолженности = СуммаЗадолженности;
	НС.Просрочена = Просрочена;
	НС.ДнейПросрочено = ДнейПросрочено;
	НС.СтатьяРасчетовСКомитентами = СтатьяРасчетовСКомитентами;
	
	Для каждого ТекСтрока Из ТекущийОбъект.ДоступныеРасчетныеСчета Цикл
		Если ТекСтрока.Организация = Организация Тогда
			НС.РасчетныйСчет = ТекСтрока.РасчетныйСчет;	
		КонецЕсли; 
	КонецЦикла; 
	
	//Если НомерОплачиваемогоСчета <> Неопределено Тогда
	//	Для каждого ТекСтрока Из ТекущийОбъект.ДоступныеРасчетныеСчета Цикл
	//		Если ТекСтрока.РасчетныйСчет.НомерСчета = НомерОплачиваемогоСчета Тогда
	//			//НС.РасчетныйСчет = ТекСтрока.РасчетныйСчет;	
	//			//НС.Организация = НС.РасчетныйСчет.Владелец;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЕсли; 
	НС.Оплачивать = ?(НомерОплачиваемогоСчета = Неопределено, Ложь, Истина);
	НС.СуммаУменьшенияПлатежа = СуммаУменьшенияПлатежа;
	
КонецПроцедуры // ()
 
&НаСервере
//Параметры:
// ПоСтатьям - Булево - Заполнить ТЧ с учетом СтатьяРасчетовСКомитентами
//
Процедура ЗаполнитьТЧПоРегистру(ПоСтатьям = Ложь)
		
	Запрос = Новый Запрос;
	#Область ТестЗапроса
	Если НЕ ПоСтатьям Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокТЧ.Организация КАК Организация,
		|	ДокТЧ.РасчетныйСчет КАК РасчетныйСчет
		|ПОМЕСТИТЬ РС
		|ИЗ
		|	&ДокТЧ КАК ДокТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКомитентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКомитентамиОстатки.Комитент КАК Комитент,
		|	ВзаиморасчетыСКомитентамиОстатки.ДатаВозникновенияЗадолженности КАК ДатаЗадолженности,
		|	ВзаиморасчетыСКомитентамиОстатки.СуммаОстаток КАК СуммаЗадолженности,
		|	ЕСТЬNULL(РС.РасчетныйСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК РасчетныйСчет
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКомитентамиПоЗаказам.Остатки(
		|			&ДатаПлатежа,
		|			Организация В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					РС.Организация КАК Организация
		|				ИЗ
		|					РС КАК РС)) КАК ВзаиморасчетыСКомитентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РС КАК РС
		|		ПО ВзаиморасчетыСКомитентамиОстатки.Организация = РС.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Организация КАК Организация,
		|	Данные.Комитент КАК Комитент,
		|	Данные.ДатаЗадолженности КАК ДатаЗадолженности,
		|	Данные.СуммаЗадолженности КАК СуммаЗадолженности,
		|	Данные.РасчетныйСчет КАК РасчетныйСчет,
		|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности, ЗНАЧЕНИЕ(Перечисление.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням)) КАК СпособКонтроляДнейЗадолженности,
		|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга, 0) КАК КоличествоДнейДоПросрочкиДолга
		|ПОМЕСТИТЬ Данные2
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
		|				&ДатаПлатежа,
		|				Контрагент В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Данные.Комитент КАК Контрагент
		|					ИЗ
		|						Данные КАК Данные)) КАК ПараметрыКонтрагентовСрезПоследних
		|		ПО Данные.Комитент = ПараметрыКонтрагентовСрезПоследних.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные2.Организация КАК Организация,
		|	Данные2.Комитент КАК Комитент,
		|	Данные2.ДатаЗадолженности КАК ДатаЗадолженности,
		|	Данные2.СуммаЗадолженности КАК СуммаЗадолженности,
		|	Данные2.РасчетныйСчет КАК РасчетныйСчет,
		|	Данные2.СпособКонтроляДнейЗадолженности КАК СпособКонтроляДнейЗадолженности,
		|	Данные2.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
		|	МИНИМУМ(ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаКалендаря,
		|	СУММА(ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.Пятидневка, 0)) КАК ПятидневкаДней,
		|	СУММА(ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.КалендарныеДни, 0)) КАК КалендарныхДней
		|ИЗ
		|	Данные2 КАК Данные2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО Данные2.ДатаЗадолженности < РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаПлатежа)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные2.Организация,
		|	Данные2.Комитент,
		|	Данные2.ДатаЗадолженности,
		|	Данные2.СуммаЗадолженности,
		|	Данные2.РасчетныйСчет,
		|	Данные2.СпособКонтроляДнейЗадолженности,
		|	Данные2.КоличествоДнейДоПросрочкиДолга
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные2.Комитент.Наименование";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокТЧ.Организация КАК Организация,
		|	ДокТЧ.РасчетныйСчет КАК РасчетныйСчет
		|ПОМЕСТИТЬ РС
		|ИЗ
		|	&ДокТЧ КАК ДокТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКомитентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКомитентамиОстатки.Комитент КАК Комитент,
		|	ВзаиморасчетыСКомитентамиОстатки.ДатаВозникновенияЗадолженности КАК ДатаЗадолженности,
		|	ВзаиморасчетыСКомитентамиОстатки.СуммаОстаток КАК СуммаЗадолженности,
		|	ЕСТЬNULL(РС.РасчетныйСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК РасчетныйСчет,
		|	ВзаиморасчетыСКомитентамиОстатки.СтатьяРасчетовСКомитентами КАК СтатьяРасчетовСКомитентами
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКомитентами.Остатки(
		|			&ДатаПлатежа,
		|			Организация В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					РС.Организация КАК Организация
		|				ИЗ
		|					РС КАК РС)) КАК ВзаиморасчетыСКомитентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РС КАК РС
		|		ПО ВзаиморасчетыСКомитентамиОстатки.Организация = РС.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Организация КАК Организация,
		|	Данные.Комитент КАК Комитент,
		|	Данные.ДатаЗадолженности КАК ДатаЗадолженности,
		|	Данные.СуммаЗадолженности КАК СуммаЗадолженности,
		|	Данные.РасчетныйСчет КАК РасчетныйСчет,
		|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности, ЗНАЧЕНИЕ(Перечисление.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням)) КАК СпособКонтроляДнейЗадолженности,
		|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга, 0) КАК КоличествоДнейДоПросрочкиДолга,
		|	Данные.СтатьяРасчетовСКомитентами КАК СтатьяРасчетовСКомитентами
		|ПОМЕСТИТЬ Данные2
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
		|				&ДатаПлатежа,
		|				Контрагент В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Данные.Комитент КАК Контрагент
		|					ИЗ
		|						Данные КАК Данные)) КАК ПараметрыКонтрагентовСрезПоследних
		|		ПО Данные.Комитент = ПараметрыКонтрагентовСрезПоследних.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные2.Организация КАК Организация,
		|	Данные2.Комитент КАК Комитент,
		|	Данные2.ДатаЗадолженности КАК ДатаЗадолженности,
		|	Данные2.СуммаЗадолженности КАК СуммаЗадолженности,
		|	Данные2.РасчетныйСчет КАК РасчетныйСчет,
		|	Данные2.СпособКонтроляДнейЗадолженности КАК СпособКонтроляДнейЗадолженности,
		|	Данные2.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
		|	МИНИМУМ(ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаКалендаря,
		|	СУММА(ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.Пятидневка, 0)) КАК ПятидневкаДней,
		|	СУММА(ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.КалендарныеДни, 0)) КАК КалендарныхДней,
		|	Данные2.СтатьяРасчетовСКомитентами  КАК СтатьяРасчетовСКомитентами
		|ИЗ
		|	Данные2 КАК Данные2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО Данные2.ДатаЗадолженности < РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаПлатежа)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные2.Организация,
		|	Данные2.Комитент,
		|	Данные2.ДатаЗадолженности,
		|	Данные2.СтатьяРасчетовСКомитентами,
		|	Данные2.СуммаЗадолженности,
		|	Данные2.РасчетныйСчет,
		|	Данные2.СпособКонтроляДнейЗадолженности,
		|	Данные2.КоличествоДнейДоПросрочкиДолга
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные2.Комитент.Наименование";

	КонецЕсли;
	#КонецОбласти
	Запрос.УстановитьПараметр("ДокТЧ", Объект.ДоступныеРасчетныеСчета.Выгрузить());
	Запрос.УстановитьПараметр("ДатаПлатежа", КонецДня(Объект.ДатаПлатежа));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Объект.ПлатежиКИсполнению.Очистить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		НС = Объект.ПлатежиКИсполнению.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ВыборкаДетальныеЗаписи);
		
		Если ВыборкаДетальныеЗаписи.СпособКонтроляДнейЗадолженности = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
			НС.ДнейПросрочено = ?((ВыборкаДетальныеЗаписи.КалендарныхДней-ВыборкаДетальныеЗаписи.КоличествоДнейДоПросрочкиДолга) < 0, 0, ВыборкаДетальныеЗаписи.КалендарныхДней-ВыборкаДетальныеЗаписи.КоличествоДнейДоПросрочкиДолга);
		ИначеЕсли	ВыборкаДетальныеЗаписи.СпособКонтроляДнейЗадолженности = Перечисления.СпособыКонтроляДнейЗадолженности.ПоРабочимДням Тогда
			НС.ДнейПросрочено = ?((ВыборкаДетальныеЗаписи.ПятидневкаДней-ВыборкаДетальныеЗаписи.КоличествоДнейДоПросрочкиДолга) < 0, 0, ВыборкаДетальныеЗаписи.ПятидневкаДней-ВыборкаДетальныеЗаписи.КоличествоДнейДоПросрочкиДолга);
		КонецЕсли; 
		
		НС.Просрочена = (НС.ДнейПросрочено > 0);
		
	КонецЦикла;
	
КонецПроцедуры // ()
 

//////////////////////////////ИНТЕРФЕЙС
&НаСервере
Процедура ИзменитьУсловноеОформление()

	УсловноеОформлениеФормы = ЭтаФорма.УсловноеОформление.Элементы;
		
	////оплачивать зеленый
	//НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	//НовыйЭлемент.Использование = Истина;
	//
	//Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	//Отбор.Использование = Истина;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.РС1");
	//Отбор.ПравоеЗначение = 0;
	//
	//ЦветФона = НовыйЭлемент.Оформление.Элементы.Найти("ЦветФона");
	//ЦветФона.Значение = WebЦвета.ЗеленаяЛужайка;
	//ЦветФона.Использование = Истина;
	//
	//Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	//Поле.Поле = Новый ПолеКомпоновкиДанных("Измерение");
	//Поле.Использование = Истина;
	//
	////оплачивать зеленый
	//НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	//НовыйЭлемент.Использование = Истина;
	//
	//Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	//Отбор.Использование = Истина;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.РС2");
	//Отбор.ПравоеЗначение = 0;
	//
	//ЦветФона = НовыйЭлемент.Оформление.Элементы.Найти("ЦветФона");
	//ЦветФона.Значение = WebЦвета.ЗеленаяЛужайка;
	//ЦветФона.Использование = Истина;
	//
	//Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	//Поле.Поле = Новый ПолеКомпоновкиДанных("Измерение");
	//Поле.Использование = Истина;
	
	//выделение комитентов светло-серым
	СписокКомитентов = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из Объект.ПлатежиКИсполнению Цикл
		СписокКомитентов.Добавить(СтрокаТЧ.Комитент);
	КонецЦикла; 
	
	НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.Измерение");
	Отбор.ПравоеЗначение = СписокКомитентов;
	
	ЦветФона = НовыйЭлемент.Оформление.Элементы.Найти("ЦветФона");
	ЦветФона.Значение = WebЦвета.СеребристоСерый;
	ЦветФона.Использование = Истина;
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Измерение");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаОрганизации");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДнейПросрочено");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаЗадолженности");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаУменьшения");
	Поле.Использование = Истина;	
	
	//просрочка красным
	НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.Просрочено");
	Отбор.ПравоеЗначение = 0;
	
	ЦветТекста = НовыйЭлемент.Оформление.Элементы.Найти("ЦветТекста");
	ЦветТекста.Значение = WebЦвета.Красный;
	ЦветТекста.Использование = Истина;
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Измерение");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаОрганизации");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДнейПросрочено");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаЗадолженности");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаУменьшения");
	Поле.Использование = Истина;	
		
	//выделение верхнего уровня жирным	
	СписокОрганизаций = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из Объект.ДоступныеРасчетныеСчета Цикл
		СписокОрганизаций.Добавить(СтрокаТЧ.Организация);
	КонецЦикла; 
	
	НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.Измерение");
	Отбор.ПравоеЗначение = СписокОрганизаций;
	
	ШрифтОрганизации = НовыйЭлемент.Оформление.Элементы.Найти("Шрифт");
	ШрифтОрганизации.Использование = Истина;
	ШрифтОрганизации.Значение = Новый Шрифт(ШрифтОрганизации.Значение,,,Истина);

	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Измерение");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаОрганизации");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаЗадолженности");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаУменьшения");
	Поле.Использование = Истина;	
	
	//выделение верхнего уровня черным	
	СписокОрганизаций = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из Объект.ДоступныеРасчетныеСчета Цикл
		СписокОрганизаций.Добавить(СтрокаТЧ.Организация);
	КонецЦикла; 
	
	НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.Измерение");
	Отбор.ПравоеЗначение = СписокОрганизаций;
	
	ЦветТекста = НовыйЭлемент.Оформление.Элементы.Найти("ЦветТекста");
	ЦветТекста.Значение = WebЦвета.Черный;
	ЦветТекста.Использование = Истина;

	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Измерение");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаОрганизации");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДнейПросрочено");
	Поле.Использование = Истина;	
	
	//Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	//Поле.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
	//Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаЗадолженности");
	Поле.Использование = Истина;	
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СуммаУменьшения");
	Поле.Использование = Истина;	
	
	//редактирование
	НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//CeHbKA #2278 дополнение 1 15.07.2021
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	//CeHbKA #2278 дополнение 1 15.07.2021
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.Редактировать");
	//Отбор.ПравоеЗначение = 1;
	//CeHbKA #2278 дополнение 1 15.07.2021
	Отбор.ПравоеЗначение = 2;
	//CeHbKA #2278 дополнение 1 15.07.2021
	
	ЦветФона = НовыйЭлемент.Оформление.Элементы.Найти("ЦветФона");
	ЦветФона.Значение = WebЦвета.Серый;
	ЦветФона.Использование = Истина;
		
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("РС2");
	Поле.Использование = Истина;	
	
	НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//CeHbKA #2278 дополнение 1 15.07.2021
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	//CeHbKA #2278 дополнение 1 15.07.2021
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.Редактировать");
	//Отбор.ПравоеЗначение = 2;
	//CeHbKA #2278 дополнение 1 15.07.2021
	Отбор.ПравоеЗначение = 1;
	//CeHbKA #2278 дополнение 1 15.07.2021
	
	ЦветФона = НовыйЭлемент.Оформление.Элементы.Найти("ЦветФона");
	ЦветФона.Значение = WebЦвета.Серый;
	ЦветФона.Использование = Истина;
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("РС1");
	Поле.Использование = Истина;		
	
	//CeHbKA #2278 дополнение 1 15.07.2021
	НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.Редактировать");
	Отбор.ПравоеЗначение = 3;
	
	ЦветФона = НовыйЭлемент.Оформление.Элементы.Найти("ЦветФона");
	ЦветФона.Значение = WebЦвета.Серый;
	ЦветФона.Использование = Истина;
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("РС3");
	Поле.Использование = Истина;		
	
	НовыйЭлемент = УсловноеОформлениеФормы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Отбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.Редактировать");
	Отбор.ПравоеЗначение = 4;
	
	ЦветФона = НовыйЭлемент.Оформление.Элементы.Найти("ЦветФона");
	ЦветФона.Значение = WebЦвета.Серый;
	ЦветФона.Использование = Истина;
	
	Поле = НовыйЭлемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("РС4");
	Поле.Использование = Истина;		
	//CeHbKA #2278 дополнение 1 15.07.2021
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ДеревоПлатежейПриИзменении(Элемент)

	Модифицированность = Истина;	

КонецПроцедуры // ()

&НаКлиенте
Процедура ДеревоПлатежейСуммаУменьшенияПриИзменении(Элемент)

	ИдСтроки = Элементы.ДеревоПлатежей.ТекущаяСтрока;
	
	ТекСтрока = ЭтаФорма["ДеревоПлатежей"].НайтиПоИдентификатору(ИдСтроки);
	
	ДеревоПлатежейИзменитьРодительскиеСтроки(ТекСтрока);
	
	ДеревоПлатежейПересчитатьПодвал();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДеревоПлатежейОплачиватьПриИзменении(Элемент)

	ИдСтроки = Элементы.ДеревоПлатежей.ТекущаяСтрока;
	
	ТекСтрока = ЭтаФорма["ДеревоПлатежей"].НайтиПоИдентификатору(ИдСтроки);
	
	Если Элемент.Имя = "РС1" Тогда
		ТекСтрока.РС2 = Ложь;
		//CeHbKA #2278 дополнение 1 15.07.2021
		ТекСтрока.РС3 = Ложь;
		ТекСтрока.РС4 = Ложь;
		//CeHbKA #2278 дополнение 1 15.07.2021
	КонецЕсли;
	
	Если Элемент.Имя = "РС2" Тогда
		ТекСтрока.РС1 = Ложь;
		//CeHbKA #2278 дополнение 1 15.07.2021
		ТекСтрока.РС3 = Ложь;
		ТекСтрока.РС4 = Ложь;
		//CeHbKA #2278 дополнение 1 15.07.2021
	КонецЕсли;
	
	//CeHbKA #2278 дополнение 1 15.07.2021
	Если Элемент.Имя = "РС3" Тогда
		ТекСтрока.РС1 = Ложь;
		ТекСтрока.РС2 = Ложь;
		ТекСтрока.РС4 = Ложь;
	КонецЕсли;
	
	Если Элемент.Имя = "РС4" Тогда
		ТекСтрока.РС1 = Ложь;
		ТекСтрока.РС2 = Ложь;
		ТекСтрока.РС3 = Ложь;
	КонецЕсли;
	//CeHbKA #2278 дополнение 1 15.07.2021
	
	ТекСтрока.РС1 = ?(ТекСтрока.РС1 = 2, 0, ТекСтрока.РС1);
	ТекСтрока.РС2 = ?(ТекСтрока.РС2 = 2, 0, ТекСтрока.РС2);
	
	//CeHbKA #2278 дополнение 1 15.07.2021
	ТекСтрока.РС3 = ?(ТекСтрока.РС3 = 2, 0, ТекСтрока.РС3);
	ТекСтрока.РС4 = ?(ТекСтрока.РС4 = 2, 0, ТекСтрока.РС4);
	//CeHbKA #2278 дополнение 1 15.07.2021
	
	Если ТипЗнч(ТекСтрока.Измерение) <> Тип("СправочникСсылка.Организации") Тогда
		//ТекСтрока.СуммаОрганизации = ?(ТекСтрока.РС1+ТекСтрока.РС2>0, ТекСтрока.СуммаЗадолженности, 0);
		//CeHbKA #2278 дополнение 1 15.07.2021
		ТекСтрока.СуммаОрганизации = ?(ТекСтрока.РС1+ТекСтрока.РС2+ТекСтрока.РС3+ТекСтрока.РС4>0, ТекСтрока.СуммаЗадолженности, 0);
		//CeHbKA #2278 дополнение 1 15.07.2021
	КонецЕсли; 
	
	ДеревоПлатежейИзменитьПодчинённыеСтроки(ТекСтрока);

	ДеревоПлатежейИзменитьРодительскиеСтроки(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейИзменитьРодительскиеСтроки(СтрокаДерево)

	Родитель = СтрокаДерево.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат
	КонецЕсли; 
	
	Родитель.СуммаУменьшения = 0;
	Родитель.СуммаОрганизации = 0;
	
	ИтогоРС1 = 0;
	ИтогоРС2 = 0;
	//CeHbKA #2278 дополнение 1 15.07.2021
	ИтогоРС3 = 0;
	ИтогоРС4 = 0;
	//CeHbKA #2278 дополнение 1 15.07.2021
	

	Для каждого ТекСтрока Из Родитель.ПолучитьЭлементы() Цикл
		
		Родитель.СуммаУменьшения = Родитель.СуммаУменьшения + ТекСтрока.СуммаУменьшения;
		Родитель.СуммаОрганизации = Родитель.СуммаОрганизации + ТекСтрока.СуммаОрганизации;
		
		ИтогоРС1 = ИтогоРС1 + ТекСтрока.РС1;
		ИтогоРС2 = ИтогоРС2 + ТекСтрока.РС2;
		
		//CeHbKA #2278 дополнение 1 15.07.2021
		ИтогоРС3 = ИтогоРС3 + ТекСтрока.РС3;
		ИтогоРС4 = ИтогоРС4 + ТекСтрока.РС4;
		//CeHbKA #2278 дополнение 1 15.07.2021
				
	КонецЦикла; 

	Если ИтогоРС1 = 0 Тогда
		Родитель.РС1 = 0;
	ИначеЕсли ИтогоРС1 = Родитель.ПолучитьЭлементы().Количество() Тогда
		Родитель.РС1 = 1;
	Иначе
		Родитель.РС1 = 2;
	КонецЕсли; 
	
	Если ИтогоРС2 = 0 Тогда
		Родитель.РС2 = 0;
	ИначеЕсли ИтогоРС2 = Родитель.ПолучитьЭлементы().Количество() Тогда
		Родитель.РС2 = 1;
	Иначе
		Родитель.РС2 = 2;
	КонецЕсли; 

	//CeHbKA #2278 дополнение 1 15.07.2021
	Если ИтогоРС3 = 0 Тогда
		Родитель.РС3 = 0;
	ИначеЕсли ИтогоРС3 = Родитель.ПолучитьЭлементы().Количество() Тогда
		Родитель.РС3 = 1;
	Иначе
		Родитель.РС3 = 2;
	КонецЕсли; 
	
	Если ИтогоРС4 = 0 Тогда
		Родитель.РС4 = 0;
	ИначеЕсли ИтогоРС4 = Родитель.ПолучитьЭлементы().Количество() Тогда
		Родитель.РС4 = 1;
	Иначе
		Родитель.РС4 = 2;
	КонецЕсли; 	
	//CeHbKA #2278 дополнение 1 15.07.2021
	
	ДеревоПлатежейИзменитьРодительскиеСтроки(Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейИзменитьПодчинённыеСтроки(СтрокаДерево)
	
	Для каждого СтрокаПодчиненная Из СтрокаДерево.ПолучитьЭлементы() Цикл
		СтрокаПодчиненная.РС1 = СтрокаДерево.РС1;	
		СтрокаПодчиненная.РС2 = СтрокаДерево.РС2;
		//CeHbKA #2278 дополнение 1 15.07.2021
		СтрокаПодчиненная.РС3 = СтрокаДерево.РС3;	
		СтрокаПодчиненная.РС4 = СтрокаДерево.РС4;
		//CeHbKA #2278 дополнение 1 15.07.2021
		
		//Если (СтрокаПодчиненная.РС1+СтрокаПодчиненная.РС2) = 1  Тогда
		//CeHbKA #2278 дополнение 1 15.07.2021
		Если (СтрокаПодчиненная.РС1+СтрокаПодчиненная.РС2+СтрокаПодчиненная.РС3+СтрокаПодчиненная.РС4) = 1  Тогда
		//CeHbKA #2278 дополнение 1 15.07.2021
			СтрокаПодчиненная.СуммаОрганизации = СтрокаПодчиненная.СуммаЗадолженности;
		Иначе
			СтрокаПодчиненная.СуммаОрганизации = 0;
		КонецЕсли; 
		
		Если СтрокаПодчиненная.ПолучитьЭлементы().Количество()> 0 Тогда
			ДеревоПлатежейИзменитьПодчинённыеСтроки(СтрокаПодчиненная)
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры // ()
 
&НаКлиенте
Процедура ДеревоПлатежейПересчитатьПодвал()

	ИтогСуммаУменьшения		= 0;
	ИтогСуммаЗадолженности	= 0;
	ИтогДнейПросрочено		= 0;
	ИтогПросрочено			= 0;
	
	Для каждого ТекСтрока Из ЭтаФорма["ДеревоПлатежей"].ПолучитьЭлементы() Цикл
		
		ИтогСуммаУменьшения		= ИтогСуммаУменьшения + ТекСтрока.СуммаУменьшения;
		ИтогСуммаЗадолженности	= ИтогСуммаЗадолженности + ТекСтрока.СуммаЗадолженности;
		ИтогДнейПросрочено		= ИтогДнейПросрочено + ТекСтрока.ДнейПросрочено;
		ИтогПросрочено			= ИтогПросрочено + ТекСтрока.Просрочено;
	КонецЦикла; 
	
	ШрифтПодвала = Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.Просрочено.ШрифтПодвала;
	ШрифтПодвала = Новый Шрифт(ШрифтПодвала,,,Истина);
	
	Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.СуммаУменьшения.ТекстПодвала	= ИтогСуммаУменьшения;
	Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.СуммаЗадолженности.ТекстПодвала = ИтогСуммаЗадолженности;	
	Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.ДнейПросрочено.ТекстПодвала		= ИтогДнейПросрочено;	
	Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.Просрочено.ТекстПодвала			= ИтогПросрочено;	
	
	Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.СуммаУменьшения.ШрифтПодвала	= ШрифтПодвала;
	Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.СуммаЗадолженности.ШрифтПодвала = ШрифтПодвала;	
	Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.ДнейПросрочено.ШрифтПодвала		= ШрифтПодвала;		
	Элементы.ДеревоПлатежей.ПодчиненныеЭлементы.Просрочено.ШрифтПодвала			= ШрифтПодвала;

КонецПроцедуры // ()

&НаКлиенте
Процедура ДеревоПлатежейПередНачаломИзменения(Элемент, Отказ)

	ИдСтроки = Элементы.ДеревоПлатежей.ТекущаяСтрока;
	
	ТекСтрока = ЭтаФорма["ДеревоПлатежей"].НайтиПоИдентификатору(ИдСтроки);
	
	//редактировать можно только элементы 3-го уровня
	Если Элемент.ТекущийЭлемент.Имя = "СуммаУменьшения"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "РС1"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "РС2" 
		//CeHbKA #2278 дополнение 1 15.07.2021
		ИЛИ Элемент.ТекущийЭлемент.Имя = "РС3"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "РС4" Тогда
		//CeHbKA #2278 дополнение 1 15.07.2021
		
		СтрокаРодитель = Элементы.ДеревоПлатежей.ТекущиеДанные.ПолучитьРодителя();
		
		Отказ = (СтрокаРодитель = Неопределено);
				
	КонецЕсли; 	
	
	Если Элемент.ТекущийЭлемент.Имя = "РС1"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "РС2"
		//CeHbKA #2278 дополнение 1 15.07.2021
		ИЛИ Элемент.ТекущийЭлемент.Имя = "РС3" 
		ИЛИ Элемент.ТекущийЭлемент.Имя = "РС4" Тогда
		//CeHbKA #2278 дополнение 1 15.07.2021
		
		//у каждой организации можно редактировать только свой РС
		Если НЕ Отказ Тогда
			
			Если ТипЗнч(СтрокаРодитель.Измерение) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтрокаОрганизация = СтрокаРодитель.ПолучитьРодителя();
			ИначеЕсли ТипЗнч(СтрокаРодитель.Измерение) = Тип("Дата") Тогда
				СтрокаОрганизация = СтрокаРодитель.ПолучитьРодителя().ПолучитьРодителя();	
			Иначе
				СтрокаОрганизация = СтрокаРодитель;
			КонецЕсли; 
			
			Попытка
				Отказ = (СтрокаОрганизация.Измерение.ОсновнойБанковскийСчет.НомерСчета <> Элемент.ТекущийЭлемент.Заголовок);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры


//////////////////////////////КОМАНДЫ
&НаКлиенте
Процедура Заполнить(Элемент)
	
	Модифицированность = Истина;
		
	УдалитьДеревоНаСервере();
	
	//заполняем ТЧ по дате
	ЗаполнитьТЧПоРегистру();
	
	СоздатьДеревоНаСервере(Истина);
	
	Элементы.ДеревоПлатежей.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;	
	
	ДеревоПлатежейПересчитатьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРегиструПоСтатьям(Команда)
	
	Модифицированность = Истина;
		
	УдалитьДеревоНаСервере();
	
	//заполняем ТЧ по дате
	ЗаполнитьТЧПоРегистру(Истина);
	
	СоздатьДеревоНаСервере(Истина, Истина);
	
	Элементы.ДеревоПлатежей.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;	
	
	ДеревоПлатежейПересчитатьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ДокументПроверен(Команда)
	
	Если Модифицированность = Истина Тогда
		Сообщить("Документ должен быть записан!");
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаДокументПроверен.Пометка = НЕ Элементы.ФормаДокументПроверен.Пометка;	
	
	ПроверкаДокумента(Элементы.ФормаДокументПроверен.Пометка);
	
	УстановитьСтатусДокументовВводДанныхНаСервере(Элементы.ФормаДокументПроверен.Пометка);
	
	//CeHbKA #20.07.2020
	Если Элементы.ФормаДокументПроверен.Пометка Тогда
		УдалитьКнопкиВыгрузки();
		ДобавитьКнопкиВыгрузки();
	КонецЕсли; 
	//CeHbKA #20.07.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДокумента(ДокументПроверен = Ложь)
	
	ЭтаФорма.ТолькоПросмотр	= ДокументПроверен;
	
	ПараметрыСтатуса = Новый Структура;
	ПараметрыСтатуса.Вставить("Период", ТекущаяДата());
	ПараметрыСтатуса.Вставить("ДокументПроверен", Элементы.ФормаДокументПроверен.Пометка);
	ПараметрыСтатуса.Вставить("Документ", Объект.Ссылка);
	
	Если ПроверкаДокументовСервер.ПолучитьСтатусПроверкиДокумента(Объект.Ссылка) <> 
		Элементы.ФормаДокументПроверен.Пометка Тогда
		ПроверкаДокументовСервер.УстановитьСтатусПроверкиДокумента(ПараметрыСтатуса);
	КонецЕсли; 
	
	Элементы.ФормаЗаполнитьПоРегистру.Доступность = НЕ ДокументПроверен;
	Элементы.ФормаДокументПроверен.Доступность	  = РольДоступна("ПодготовкаПланируемыхПлатежей");
	Элементы.ФормаВыгрузкаВБух.Доступность		  = РольДоступна("СозданиеПлатежныхДокументовПоПланируемымПлатежам") И ДокументПроверен;
	Элементы.ФормаВыгрузкаВБухПоСтатьям.Доступность	= РольДоступна("СозданиеПлатежныхДокументовПоПланируемымПлатежам") И ДокументПроверен;
	Элементы.ДеревоПлатежей.ТолькоПросмотр		  = ДокументПроверен;
	
КонецПроцедуры // ()

&НаСервере
Процедура УстановитьСтатусДокументовВводДанныхНаСервере(ДокументПроверен)
	
	//+Степанов Задача № 3439
	//ПлатежиКомитентамСервер.УстановитьСтатусДокументовВводДанных(Объект.ПлатежиКИсполнению.Выгрузить(), ДокументПроверен); 
	ПлатежиКомитентамСервер.УстановитьСтатусДокументовВводДанных(Объект.ПлатежиКИсполнению.Выгрузить(), ДокументПроверен,Объект.Ссылка);
	//-Степанов
КонецПроцедуры // ()
 
&НаКлиенте
Процедура КнопкаРазвертка(Команда)
	
	Развёртка = НЕ Развёртка;
	Элементы.ФормаКнопкаРазвертка.Пометка = Развёртка;
	
	ИзменитьЗаголовокКнопкиРазвертка();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаголовокКнопкиРазвертка()

	Если Элементы.ФормаКнопкаРазвертка.Пометка Тогда
		ЗаголовокКнопки = "Свернуть";	
	Иначе
		ЗаголовокКнопки = "Развернуть";	
	КонецЕсли; 
	
	Элементы.ФормаКнопкаРазвертка.Заголовок = ЗаголовокКнопки;

	Для каждого СтрокаДерева Из ЭтотОбъект.ДеревоПлатежей.ПолучитьЭлементы() Цикл
		ИзменитьУровеньГруппировкиДереваЗначений(СтрокаДерева);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУровеньГруппировкиДереваЗначений(СтрокаРодитель)
	
	Для каждого СтрокаДерева Из СтрокаРодитель.ПолучитьЭлементы() Цикл 
		
		ИдСтроки = СтрокаДерева.ПолучитьИдентификатор();
		
		Если Развёртка Тогда
			Элементы.ДеревоПлатежей.Развернуть(ИдСтроки);	
		Иначе
			Элементы.ДеревоПлатежей.Свернуть(ИдСтроки);	
		КонецЕсли; 
		
		ИзменитьУровеньГруппировкиДереваЗначений(СтрокаДерева);
		
	КонецЦикла; 

КонецПроцедуры // ()
 


//////////////////////////////ВЫГРУЗКА
&НаКлиенте
Процедура ВыгрузкаВБух(Команда)
	
	Если Модифицированность 
		ИЛИ Объект.Ссылка.Пустая() Тогда
		Сообщить("Сначала запишите документ!");
		Возврат;
	КонецЕсли; 
	
	ВыгрузкаВБухНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВБухПоСтатьям(Команда)
			
	Если Модифицированность 
		ИЛИ Объект.Ссылка.Пустая() Тогда
		Сообщить("Сначала запишите документ!");
		Возврат;
	КонецЕсли; 
	
	//CeHbKA 16.07.2020
	СообщениеОбОшибке = ПроверитьИННУКонтрагентов();
		
	Если СообщениеОбОшибке <> "" Тогда
		Сообщить(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;	
	//CeHbKA 16.07.2020
	
	ИННОрганизации = СтрЗаменить(Команда.Имя, "ВыгрузитьПоОрганизации", "");
	ИННОрганизации = СтрЗаменить(ИННОрганизации, "Общая", "");
	
	ВыгрузкаВБухНаСервере(Истина, ИННОрганизации);

КонецПроцедуры

//CeHbKA 16.07.2020
&НаКлиенте
Функция ПроверитьИННУКонтрагентов()
	
	СообщениеОбОшибке = "";
	
	Для каждого СтрокаТЧ из Объект.ПлатежиКИсполнению цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Комитент.ИНН) Тогда
			СообщениеОбОшибке = "У контрагента "+СтрокаТЧ.Комитент+" не заполнен ИНН! Выгрузка невозможна!";
		КонецЕсли;			
	КонецЦикла;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции
//CeHbKA 16.07.2020

&НаСервере
Процедура ВыгрузкаВБухНаСервере(ПоСтатьям = Ложь, ИННОрганизации = "")

	ДатаПроведения = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументПланируемыхПлатежей,
	|	ДокТЧ.Организация КАК Организация,
	|	ДокТЧ.Комитент КАК Комитент,
	|	ДокТЧ.ДатаЗадолженности КАК ДатаЗадолженности,
	|	ДокТЧ.СуммаЗадолженности КАК СуммаЗадолженности,
	|	ДокТЧ.СуммаУменьшенияПлатежа КАК СуммаУменьшенияПлатежа,
	|	ДокТЧ.СуммаЗадолженности - ДокТЧ.СуммаУменьшенияПлатежа КАК СуммаПлатежа,
	|	ДокТЧ.СтатьяРасчетовСКомитентами КАК СтатьяРасчетовСКомитентами
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	&ДокТЧ КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Оплачивать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТЧ.Организация КАК Организация,
	|	ДокТЧ.Комитент КАК Комитент,
	|	ДокТЧ.ДатаЗадолженности КАК ДатаЗадолженности,
	|	СУММА(ДокТЧ.СуммаЗадолженности) КАК СуммаЗадолженности,
	|	СУММА(ДокТЧ.СуммаУменьшенияПлатежа) КАК СуммаУменьшенияПлатежа,
	|	СУММА(ДокТЧ.СуммаПлатежа) КАК СуммаПлатежа,
	|	ЕСТЬNULL(ИсточникиДанныхБазы1С.Ссылка, ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхБазы1С.ПустаяСсылка)) КАК ПараметрыБД,
	|	ДокТЧ.ДокументПланируемыхПлатежей КАК ДокументПланируемыхПлатежей,
	|	ЕСТЬNULL(ИсторияСостоянийПлатежныхДокументовСрезПоследних.ПлатежноеПоручение, НЕОПРЕДЕЛЕНО) КАК ПлатежноеПоручение,
	|	ДокТЧ.СтатьяРасчетовСКомитентами КАК СтатьяРасчетовСКомитентами
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхБазы1С КАК ИсточникиДанныхБазы1С
	|		ПО ДокТЧ.Организация = ИсточникиДанныхБазы1С.Владелец
	|			И (ИсточникиДанныхБазы1С.ТипКонфигурации = ЗНАЧЕНИЕ(Перечисление.ТипыКонфигураций1С.Бухгалтерия_3_0))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийПлатежныхДокументов.СрезПоследних(, ДокументПланируемыхПлатежей = &Ссылка) КАК ИсторияСостоянийПлатежныхДокументовСрезПоследних
	|		ПО ДокТЧ.ДокументПланируемыхПлатежей = ИсторияСостоянийПлатежныхДокументовСрезПоследних.ДокументПланируемыхПлатежей
	|			И ДокТЧ.Комитент = ИсторияСостоянийПлатежныхДокументовСрезПоследних.Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТЧ.Организация,
	|	ДокТЧ.Комитент,
	|	ДокТЧ.ДатаЗадолженности,
	|	ДокТЧ.СтатьяРасчетовСКомитентами,
	|	ЕСТЬNULL(ИсточникиДанныхБазы1С.Ссылка, ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхБазы1С.ПустаяСсылка)),
	|	ДокТЧ.ДокументПланируемыхПлатежей,
	|	ЕСТЬNULL(ИсторияСостоянийПлатежныхДокументовСрезПоследних.ПлатежноеПоручение, НЕОПРЕДЕЛЕНО)
	|ИТОГИ
	|	СУММА(СуммаПлатежа),
	|	МАКСИМУМ(ПараметрыБД),
	|	МАКСИМУМ(ПлатежноеПоручение)
	|ПО
	|	Организация,
	|	Комитент,
	|	ДатаЗадолженности";
	
	Запрос.УстановитьПараметр("ДокТЧ", Объект.ПлатежиКИсполнению.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Возврат; //тех.заглушка
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	//1 - побежим по организациям
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		//CeHbKA #20.07.2020
		Если ИННОрганизации <> "" Тогда
			Если ВыборкаОрганизация.Организация.ИНН <> СокрЛП(ИННОрганизации) Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		//CeHbKA #20.07.2020
				
		Если ВыборкаОрганизация.ПараметрыБД.Пустая() Тогда
			//сформировать сообщение
			Сообщить("Для организации "+ВыборкаОрганизация.Организация+" не найден Источник Данных Базы 1С (см.справочник)");
			Продолжить;
		КонецЕсли; 
		
		//2 - подключимся через COM
		ПараметрыБД = ВыборкаОрганизация.ПараметрыБД;
		
		СтруктураCOM = ПлатежиКомитентамСервер.ПолучитьСоединениеСБазой(ПараметрыБД);
		
		Если СтруктураCOM = Неопределено Тогда
			//сформировать сообщение
			Сообщить("Не удалось установить соединение для организации "+ВыборкаОрганизация.Организация);
			Продолжить;
		КонецЕсли; 
		
		Соединение = СтруктураCOM.Соединение;
		БазаБух = СтруктураCOM.БазаБух;
		
		//3 - побежим по документам
		БазаБух.НачатьТранзакцию();
		
		ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаКонтрагент.Комитент.ИНН) Тогда
				Сообщить("У контрагента "+ВыборкаКонтрагент.Комитент+" не заполнен ИНН!");
				Сообщить("Синхронизация прервана");					
				БазаБух.ОтменитьТранзакцию();
				ОтменитьТранзакцию();
				Возврат;	
			КонецЕсли; 			
			
			//4 - создаем новый док или получаем текущий
			Если НЕ ЗначениеЗаполнено(ВыборкаКонтрагент.ПлатежноеПоручение) Тогда
				ДокументБух = БазаБух.Документы.ПлатежноеПоручение.СоздатьДокумент();
				Состояние = Перечисления.СостоянияПлатежныжДокументов.ПлатежныйДокументСоздан;
			Иначе
				
				УИД = БазаБух.NewObject("УникальныйИдентификатор", Строка(ВыборкаКонтрагент.ПлатежноеПоручение));
				ДокументБух = БазаБух.Документы.ПлатежноеПоручение.GetRef(УИД).ПолучитьОбъект();
				Состояние = Перечисления.СостоянияПлатежныжДокументов.ПлатежныйДокументОбновлен;
				
				ДокументБух.ДатыОплат.Очистить();
				ДокументБух.СтатьиОплат.Очистить();

			КонецЕсли; 
						
			//5 - заполняем реквизиты документа
			ДокументБух.Дата = ТекущаяДата(); //
			ДокументБух.Организация = БазаБух.Справочники.Организации.НайтиПоРеквизиту("ИНН", ВыборкаКонтрагент.Организация.ИНН );
			ДокументБух.ВидНалоговогоОбязательства = БазаБух.Перечисления.ВидыПлатежейВГосБюджет.Налог;
			ДокументБух.СчетОрганизации = ДокументБух.Организация.ОсновнойБанковскийСчет;
			ДокументБух.Контрагент = БазаБух.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ВыборкаКонтрагент.Комитент.ИНН);
			ДокументБух.СчетКонтрагента = ДокументБух.Контрагент.ОсновнойБанковскийСчет;
			ДокументБух.СуммаДокумента = ВыборкаКонтрагент.СуммаПлатежа;
			ДокументБух.СтавкаНДС = БазаБух.Перечисления.СтавкиНДС.БезНДС;
			ДокументБух.ВидПлатежа = "Электронно";
			ДокументБух.ОчередностьПлатежа = 5;
			ДокументБух.ВалютаДокумента = БазаБух.Справочники.Валюты.НайтиПоКоду("643");
			ДокументБух.ТекстПлательщика = ДокументБух.Организация.НаименованиеПолное;
			ДокументБух.ТекстПолучателя = ДокументБух.Контрагент.НаименованиеПолное;
			ДокументБух.Комментарий = "Выгружено из УТЛ";
			ДокументБух.ИННПлательщика = ДокументБух.Организация.ИНН;
			ДокументБух.КПППлательщика = ДокументБух.Организация.КПП;
			ДокументБух.ИННПолучателя = ДокументБух.Контрагент.ИНН;
			ДокументБух.КПППолучателя = ДокументБух.Контрагент.КПП;
			ДокументБух.Ответственный = БазаБух.ПараметрыСеанса.ТекущийПользователь;
			ДокументБух.ПеречислениеВБюджет = Ложь;
			ДокументБух.СчетКонтрагента = ДокументБух.Контрагент.ОсновнойБанковскийСчет;
			
			ДокументБух.СтатьяДвиженияДенежныхСредств = БазаБух.Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Доход Принципалов (воз-т, переч  )");
			ДокументБух.ВидОперации = БазаБух.Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			ДокументБух.ПометкаУдаления = Ложь;
			
		    ВариантПечати = ПолучитьПараметрыПечатиОтчетаКонтрагента(ВыборкаКонтрагент.Комитент);
						
		    Если ВариантПечати <> Перечисления.ВариантыПечатиОтчетовАгента.ЗаказчикИсполнитель Тогда
				ДокументБух.НазначениеПлатежа = "Перечисление торговой выручки интернет-магазина, полученной за ";
			КонецЕсли;
			
			//6 - заполним ТЧ ДатыОплат
			ВыборкаДетальныеЗаписи = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //ВыборкаКонтрагент.Выбрать();
			
			НДС18 = Ложь;
			НДС20 = Ложь;
			
			ЗапятаяПослеДаты = "";
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НС = ДокументБух.ДатыОплат.Добавить();
				НС.ДатаНачала = ВыборкаДетальныеЗаписи.ДатаЗадолженности;
				НС.ДатаОкончания = ВыборкаДетальныеЗаписи.ДатаЗадолженности;
				ДокументБух.НазначениеПлатежа = ДокументБух.НазначениеПлатежа + ЗапятаяПослеДаты + Формат(ВыборкаДетальныеЗаписи.ДатаЗадолженности, "ДФ=dd.MM.yyyy") + " ";
				//+" - "+ВыборкаДетальныеЗаписи.СуммаПлатежа+" руб."+Символы.ПС;				
				
				Если ПоСтатьям Тогда
					
					  ВыборкаПоСтатьям = ВыборкаДетальныеЗаписи.Выбрать();
					  Пока ВыборкаПоСтатьям.Следующий() Цикл
						  
						  СтрокаСтатьяОплаты = ДокументБух.СтатьиОплат.Добавить();
                          СтрокаСтатьяОплаты.КодСтатьиОплаты = СокрЛП(ВыборкаПоСтатьям.СтатьяРасчетовСКомитентами.Код);
						  СтрокаСтатьяОплаты.ДатаВозникновенияЗадолженности = ВыборкаДетальныеЗаписи.ДатаЗадолженности;
						  
					  КонецЦикла;
					  
				КонецЕсли;	
				
				НДС18 = ?(ВыборкаДетальныеЗаписи.ДатаЗадолженности < Дата(2019,1,1), Истина, НДС18);
				НДС20 = ?(ВыборкаДетальныеЗаписи.ДатаЗадолженности >= Дата(2019,1,1), Истина, НДС20);
				
				ЗапятаяПослеДаты = ", ";
				
			КонецЦикла; 
			
			//проверка на смешивание дат
			Если НДС18 И НДС20 Тогда
				Сообщить("У контрагента "+ВыборкаКонтрагент.Комитент+" отмечены даты за 2018 и 2019 год одновременно!");
				Сообщить("Синхронизация прервана");					
				БазаБух.ОтменитьТранзакцию();
				ОтменитьТранзакцию();
				Возврат;	
			КонецЕсли; 
			
			//заполняем договор и ставку НДС
			Набор = БазаБух.РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(ДокументБух.Организация);
			Набор.Отбор.Контрагент.Установить(ДокументБух.Контрагент);
			Набор.Отбор.ВидДоговора.Установить(БазаБух.Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

			Набор.Прочитать();

			Договор = Неопределено;

			Если Набор.Количество() > 0 Тогда
				Договор = Набор.Получить(0).Договор;
			КонецЕсли; 

			Если Договор <> Неопределено Тогда
				
				ДокументБух.ДоговорКонтрагента = Договор;
				
				Если БазаБух.String(Договор.СпособЗаполненияСтавкиНДС) = БазаБух.String(БазаБух.Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически) Тогда
					
					Если НДС18 Тогда
						СтавкаНДС = БазаБух.Перечисления.СтавкиНДС.НДС18;
					КонецЕсли; 
					Если НДС20 Тогда
						СтавкаНДС = БазаБух.Перечисления.СтавкиНДС.НДС20;
					КонецЕсли; 
					ПроцентНДС = БазаБух.УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
					СуммаНДС   = Окр(ДокументБух.СуммаДокумента * ПроцентНДС / (100 + ПроцентНДС), 2);					
					ДокументБух.СуммаНДС = СуммаНДС;					
										
				Иначе
					СтавкаНДС = БазаБух.Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;				
			Иначе				
				СтавкаНДС = БазаБух.Перечисления.СтавкиНДС.БезНДС;				
			КонецЕсли; 			
			
			ДокументБух.СтавкаНДС = СтавкаНДС;
			
			//заполняем назначение платежа
		    Если ВариантПечати = Перечисления.ВариантыПечатиОтчетовАгента.ЗаказчикИсполнитель Тогда
				НазначениеПлатежа = ДокументБух.НазначениеПлатежа;
				ДокументБух.НазначениеПлатежа = "Оплата по заключенному  договору №"+ДокументБух.ДоговорКонтрагента.Номер+" от "+Формат(ДокументБух.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy")+" за товар, реализованный "+НазначениеПлатежа;
			Иначе	
				ДокументБух.НазначениеПлатежа = ДокументБух.НазначениеПлатежа + ", согласно Агентского договора №"+ДокументБух.ДоговорКонтрагента.Номер+" от "+Формат(ДокументБух.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
			КонецЕсли;	
				
			БазаБух.Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ДокументБух, Неопределено, Истина, Истина);
			
			ВыборкаДетальныеЗаписи.Сбросить();
						
			//7 - проверим контрагента
			Если ДокументБух.Контрагент.Пустая() Тогда
				Сообщить("Не удалось найти контрагента по ИНН"+ВыборкаКонтрагент.Комитент.ИНН+" в базе бухгалтерии");
				Сообщить("Синхронизация прервана");					
				БазаБух.ОтменитьТранзакцию();
				ОтменитьТранзакцию();
				Возврат;	
			КонецЕсли; 
			
			//8 - проведём
			Попытка			
				ДокументБух.Записать(БазаБух.РежимЗаписиДокумента.Проведение);	
				Сообщить("Платежное поручение для "+ВыборкаКонтрагент.Комитент+" от "+Формат(ДокументБух.Дата,"ДФ=dd.MM.yyyy")+" успешно передано");
			Исключение				
				Сообщить("Не удалось провести документ №"+ДокументБух.Номер+" от "+Формат(ДокументБух.Дата,"ДФ=dd.MM.yyyy")+" по контрагенту "+ВыборкаКонтрагент.Комитент);
				Сообщить("Синхронизация прервана");					
				БазаБух.ОтменитьТранзакцию();
				ОтменитьТранзакцию();
				Возврат;	
			КонецПопытки; 
			
			//9 - запишем сведения в РС						
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
				Набор = РегистрыСведений.ИсторияСостоянийПлатежныхДокументов.СоздатьНаборЗаписей();
				Набор.Отбор.ДокументПланируемыхПлатежей.Установить(Объект.Ссылка);
				Набор.Отбор.Организация.Установить(ВыборкаОрганизация.Организация);
				
				Набор.Прочитать();
				
				Запись = Набор.Добавить();
				Запись.Период = ДатаПроведения+1;
				Запись.Организация = ВыборкаОрганизация.Организация;
				Запись.ДокументПланируемыхПлатежей = Объект.Ссылка;
				Запись.ИсточникДанных = ПараметрыБД;
				Запись.Контрагент = ВыборкаКонтрагент.Комитент;
				Запись.ДатаВозникновенияЗадолженности = ВыборкаДетальныеЗаписи.ДатаЗадолженности;
				
				НовыйДокСсылка = БазаБух.Документы.ПлатежноеПоручение.НайтиПоНомеру(ДокументБух.Номер, ДокументБух.Дата);
				Запись.ПлатежноеПоручение = Новый УникальныйИдентификатор(БазаБух.String(НовыйДокСсылка.УникальныйИдентификатор()));
				
				Запись.Сумма = ВыборкаДетальныеЗаписи.СуммаПлатежа;
				Запись.СостояниеПлатежногоДокумента = Состояние;
				
				Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
				Запись.НомерПлатежногоДокумента = ДокументБух.Номер;
				Запись.ДатаПлатежногоДокумента = ДокументБух.Дата;
				
				Набор.Записать();
				
			КонецЦикла; 
					
		КонецЦикла;
		
		БазаБух.ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	//10 - закроем COM
	Соединение = Неопределено;
	БазаБух = Неопределено;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПолучитьПараметрыПечатиОтчетаКонтрагента (Контрагент)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ПараметрыПечатиОтчетовАгента.ВариантПечати
    |ИЗ
    |   РегистрСведений.ПараметрыПечатиОтчетовАгента КАК ПараметрыПечатиОтчетовАгента
    |ГДЕ
    |   ПараметрыПечатиОтчетовАгента.Контрагент В (&Контрагент)";
    
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.ВариантПечати;
    Иначе
        Возврат Перечисления.ВариантыПечатиОтчетовАгента.ПринциалАгент;
    КонецЕсли;;
КонецФункции
 