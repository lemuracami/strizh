&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МесяцРасчетаСтрокой = ПолучитьПредставлениеМесяца(Объект.МесяцРасчета);
	Элементы.ФормаЗаполнить.Доступность = Не Объект.Проведен;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.МесяцРасчета   = НачалоМесяца(ТекущаяДата());
		Объект.Регион 		  = ПараметрыСеанса.ТерминалДоставки;
		Объект.Пользователь   = ПараметрыСеанса.ТекущийПользователь;
		Объект.СхемаРасчетаЗП = зпРаботаСРасчетомЗарплатыСервер.ПолучитьАктивнуюСхемуРасчетаЗП(ТекущаяДата(), Объект.Регион);
		Объект.ТарифРасчетаЗП = зпРаботаСРасчетомЗарплатыСервер.ПолучитьАктивныйТарифРасчетаЗП(ТекущаяДата(), Объект.СхемаРасчетаЗП);
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//заполнение периода в виде строки
&НаКлиенте
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
КонецФункции

&НаКлиенте
Процедура МесяцРасчетаПриИзменении(Элемент)
	ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцРасчета", "МесяцРасчетаСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцРасчета", "МесяцРасчетаСтрокой", , );
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцРасчета", "МесяцРасчетаСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
	//CeHbKA 11.12.2020
	ЗаполнитьАктивныйСхемуИТарифЗП();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		//ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		//ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ТекущаяДата());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.зпНачислениеЗП.Форма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		Представление = ПолучитьПредставлениеМесяца(Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
	//НастройкаОтображенияФормы();
	
	//CeHbKA 11.12.2020
	ЗаполнитьАктивныйСхемуИТарифЗП();
		
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ТекущаяДата());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
		
		Модифицированность = Истина;
	 	
	КонецЕсли;
	
	//CeHbKA 11.12.2020
	ЗаполнитьАктивныйСхемуИТарифЗП();
	
КонецПроцедуры 

// Получает значение реквизита формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  ПутьРеквизита - Строка - путь к данным реквизита формы, например: "Объект.МесяцНачисления".
//
// Возвращаемое значение:
//  Произвольный - реквизит формы.
//
&НаКлиенте
Функция ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	НовОбъект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		НовОбъект = НовОбъект[МассивИмен[Сч]]
	КонецЦикла;
	
	Возврат НовОбъект[ПоследнееПоле];
	
КонецФункции

// Устанавливает значение реквизиту формы.
// Параметры:
//  Форма - УправляемаяФорма - форма-владелец реквизита.
//  ПутьРеквизита - Строка - путь к данным, например: "Объект.МесяцНачисления".
//  Значение - Произвольный - устанавливаемое значение.
//  ТолькоЕслиНеЗаполнен - Булево - позволяет не устанавливать значение реквизита,
//                                  если у него уже установлено какое-то значение.
&НаКлиенте
Процедура УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение, ТолькоЕслиНеЗаполнен = Ложь) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	НовОбъект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		НовОбъект = НовОбъект[МассивИмен[Сч]]
	КонецЦикла;
	Если НЕ ТолькоЕслиНеЗаполнен ИЛИ НЕ ЗначениеЗаполнено(НовОбъект[ПоследнееПоле]) Тогда
		НовОбъект[ПоследнееПоле] = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ТекущаяДата());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//заполнение табличной части документа
&НаКлиенте
Процедура ОбработатьВопросПерезаполнитьДокумент(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНачисленияПоЗаказам();	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.НачисленияПоЗаказам.Количество() > 0 Тогда
		Оповещение 		= Новый ОписаниеОповещения("ОбработатьВопросПерезаполнитьДокумент", ЭтотОбъект, ); // Прописываем название процедуры-обработчика.
		ПоказатьВопрос(	Оповещение, "Внимание данные документы будут перезаполнены! Перезаполнить документ?", 
		РежимДиалогаВопрос.ДаНет, 0, 
		КодВозвратаДиалога.Нет, "Внимание!!!");
	Иначе	
		ЗаполнитьНачисленияПоЗаказам();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоЗаказам()
	
	//ПересчитатьНачисленияПоЧасовойОплаты();
	//Возврат;
	
	Объект.НачисленияПоЗаказам.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизацииСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	ЕСТЬNULL(ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) КАК Должность,
		|	РаботникиОрганизацииСрезПоследних.Состояние КАК Состояние,
		|	&НачалоМесяцаРасчета КАК Период
		|ПОМЕСТИТЬ ВТ_Принятые_1
		|ИЗ
		|	РегистрСведений.РаботникиОрганизации.СрезПоследних(&НачалоМесяцаРасчета, ) КАК РаботникиОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних(&НачалоМесяцаРасчета, ) КАК ДополнительныеПараметрыФизЛицСрезПоследних
		|		ПО РаботникиОрганизацииСрезПоследних.ФизЛицо = ДополнительныеПараметрыФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	РаботникиОрганизацииСрезПоследних.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|	И РаботникиОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию)
		|	И РаботникиОрганизацииСрезПоследних.Терминал = &Регион
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник,
		|	РаботникиОрганизации.ФизЛицо,
		|	ЕСТЬNULL(ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)),
		|	РаботникиОрганизации.Состояние,
		|	РаботникиОрганизации.Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц КАК ДополнительныеПараметрыФизЛиц
		|		ПО РаботникиОрганизации.ФизЛицо = ДополнительныеПараметрыФизЛиц.ФизЛицо
		|			И (ДополнительныеПараметрыФизЛиц.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета)
		|ГДЕ
		|	РаботникиОрганизации.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|	И РаботникиОрганизации.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
		|	И РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию)
		|	И РаботникиОрганизации.Терминал = &Регион
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизации.Сотрудник,
		|	РаботникиОрганизации.ФизЛицо,
		|	РаботникиОрганизации.Должность,
		|	РаботникиОрганизации.Состояние,
		|	РаботникиОрганизации.Период,
		|	НАЧАЛОПЕРИОДА(ДополнительныеПараметрыФизЛиц.Период, ДЕНЬ),
		|	ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Принятые_1.Сотрудник КАК Сотрудник,
		|	ВТ_Принятые_1.ФизЛицо КАК ФизЛицо,
		|	ВТ_Принятые_1.Должность КАК Должность,
		|	ВТ_Принятые_1.Состояние КАК Состояние,
		|	ВТ_Принятые_1.Период КАК Период
		|ПОМЕСТИТЬ ВТ_Принятые
		|ИЗ
		|	ВТ_Принятые_1 КАК ВТ_Принятые_1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		|	ЕСТЬNULL(ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) КАК Должность,
		|	РаботникиОрганизации.Состояние КАК Состояние,
		|	РаботникиОрганизации.Период КАК Период
		|ПОМЕСТИТЬ ВТ_Уволенные
		|ИЗ
		|	РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц КАК ДополнительныеПараметрыФизЛиц
		|		ПО РаботникиОрганизации.ФизЛицо = ДополнительныеПараметрыФизЛиц.ФизЛицо
		|			И (ДополнительныеПараметрыФизЛиц.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета)
		|ГДЕ
		|	РаботникиОрганизации.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|	И РаботникиОрганизации.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
		|	И РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.Уволен)
		|	И РаботникиОрганизации.Терминал = &Регион
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизации.Сотрудник,
		|	РаботникиОрганизации.ФизЛицо,
		|	РаботникиОрганизации.Должность,
		|	РаботникиОрганизации.Состояние,
		|	РаботникиОрганизации.Период,
		|	НАЧАЛОПЕРИОДА(ДополнительныеПараметрыФизЛиц.Период, ДЕНЬ),
		|	ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Принятые.Сотрудник КАК Сотрудник,
		|	ВТ_Принятые.ФизЛицо КАК ФизЛицо,
		|	ВТ_Принятые.Должность КАК Должность,
		|	ВТ_Принятые.Период КАК ПериодС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_Уволенные.Период, &КонецМесяцаРасчета) <= ВТ_Принятые.Период
		|			ТОГДА &КонецМесяцаРасчета
		|		ИНАЧЕ ЕСТЬNULL(ВТ_Уволенные.Период, &КонецМесяцаРасчета)
		|	КОНЕЦ КАК ПериодПо
		|ПОМЕСТИТЬ ВТ_Работники
		|ИЗ
		|	ВТ_Принятые КАК ВТ_Принятые
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Уволенные КАК ВТ_Уволенные
		|		ПО ВТ_Принятые.ФизЛицо = ВТ_Уволенные.ФизЛицо
		|			И ВТ_Принятые.Сотрудник = ВТ_Уволенные.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыйГрафикРаботыСотрудников.Дата КАК Дата,
		|	ПланируемыйГрафикРаботыСотрудников.ФизЛицо КАК ФизЛицо,
		|	ПланируемыйГрафикРаботыСотрудников.РольСотрудника КАК РольСотрудника,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.ВидДня, ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)) = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|				ИЛИ ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.ВидДня, ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)) = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|				ИЛИ ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.ВидДня, ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)) = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВыходнойДень,
		|	ПланируемыйГрафикРаботыСотрудников.ВидЗанятости КАК ВидЗанятости
		|ПОМЕСТИТЬ ВТ_ПланируемыйГрафикРаботыСотрудников
		|ИЗ
		|	РегистрСведений.ПланируемыйГрафикРаботыСотрудников КАК ПланируемыйГрафикРаботыСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО ПланируемыйГрафикРаботыСотрудников.Дата = РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ГДЕ
		|	ПланируемыйГрафикРаботыСотрудников.Дата МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
		|	И ПланируемыйГрафикРаботыСотрудников.Терминал = &Регион
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПланируемыйГрафикРаботыСотрудников.Дата КАК ДеньМесяца,
		|	ВТ_ПланируемыйГрафикРаботыСотрудников.ФизЛицо КАК ФизЛицо,
		|	ВТ_ПланируемыйГрафикРаботыСотрудников.РольСотрудника КАК РольСотрудника,
		|	ЕСТЬNULL(ВТ_Работники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
		|	ЕСТЬNULL(ВТ_Работники.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность,
		|	ЕСТЬNULL(ВТ_Работники.ПериодС, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодС,
		|	ЕСТЬNULL(ВТ_Работники.ПериодПо, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодПо,
		|	ВТ_ПланируемыйГрафикРаботыСотрудников.ЭтоВыходнойДень КАК ЭтоВыходнойДень,
		|	ВТ_ПланируемыйГрафикРаботыСотрудников.ВидЗанятости КАК ВидЗанятости
		|ПОМЕСТИТЬ ВТ_РаботникиДолжностьРоль
		|ИЗ
		|	ВТ_ПланируемыйГрафикРаботыСотрудников КАК ВТ_ПланируемыйГрафикРаботыСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работники КАК ВТ_Работники
		|		ПО ВТ_ПланируемыйГрафикРаботыСотрудников.ФизЛицо = ВТ_Работники.ФизЛицо
		|			И ВТ_ПланируемыйГрафикРаботыСотрудников.Дата >= ВТ_Работники.ПериодС
		|			И ВТ_ПланируемыйГрафикРаботыСотрудников.Дата <= ВТ_Работники.ПериодПо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Период КАК Период,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Регистратор КАК Регистратор,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ДатаРасчета КАК ДатаРасчета,
		|	ВТ_РаботникиДолжностьРоль.ВидЗанятости КАК ВидЗанятости,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Рейс КАК Рейс,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.СоставЭкипажа КАК СоставЭкипажа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ТипЗаказа КАК ТипЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Заказ КАК Заказ,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.КатегорияЗаказа КАК КатегорияЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ЗонаДоставки КАК ЗонаДоставки,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ЕСТЬNULL(ВТ_РаботникиДолжностьРоль.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность,
		|	ЕСТЬNULL(ВТ_РаботникиДолжностьРоль.РольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) КАК РольСотрудника,
		|	ЕСТЬNULL(ВТ_РаботникиДолжностьРоль.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
		|	ЕСТЬNULL(ВТ_РаботникиДолжностьРоль.ЭтоВыходнойДень, ЛОЖЬ) КАК ЭтоВыходнойДень,
		|	ВЫБОР КОГДА зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.УровеньОбслуживанияЗаказа = ЗНАЧЕНИЕ(Перечисление.УровниОбслуживания.ПустаяСсылка) ТОГДА 
		|				ЗНАЧЕНИЕ(Перечисление.УровниОбслуживания.СтандартныйУровень)
		|		ИНАЧЕ зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.УровеньОбслуживанияЗаказа КОНЕЦ КАК УровеньОбслуживанияЗаказа
		|
		|ПОМЕСТИТЬ ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл
		|ИЗ
		|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(
		|			&КонецМесяцаРасчета,
		|			Регион = &Регион
		|				И СхемаРасчетаЗП = &СхемаРасчетаЗП
		|				И (ДатаРасчета МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиДолжностьРоль КАК ВТ_РаботникиДолжностьРоль
		|		ПО зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ФизЛицо = ВТ_РаботникиДолжностьРоль.ФизЛицо
		|			И (НАЧАЛОПЕРИОДА(зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Период, ДЕНЬ) = ВТ_РаботникиДолжностьРоль.ДеньМесяца)
		|ГДЕ
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Регион = &Регион
		|	И зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ФизЛицо.ГруппаФизЛиц = &ГруппаФизЛиц
		|	И ВТ_РаботникиДолжностьРоль.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость)
		|;
		|
		//Геннадий #4275 19.04.2022 ++
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.Период КАК Период,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.Регистратор КАК Регистратор,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.ДатаРасчета КАК ДатаРасчета,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.ВидЗанятости КАК ВидЗанятости,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.Рейс КАК Рейс,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.ФизЛицо КАК ФизЛицо,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.СоставЭкипажа КАК СоставЭкипажа,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.ТипЗаказа КАК ТипЗаказа,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.Заказ КАК Заказ,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.КатегорияЗаказа КАК КатегорияЗаказа,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.ЗонаДоставки КАК ЗонаДоставки,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ЕСТЬNULL(ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность,
		|	ЕСТЬNULL(ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.РольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) КАК РольСотрудника,
		|	ЕСТЬNULL(ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
		|	ЕСТЬNULL(ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.ЭтоВыходнойДень, ЛОЖЬ) КАК ЭтоВыходнойДень,
		|	зпНачисления.Ссылка КАК Начисление
		|
		|ПОМЕСТИТЬ ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам
		|ИЗ
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.зпНачисления КАК зпНачисления
		|		ПО ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам_УрОбсл.УровеньОбслуживанияЗаказа = зпНачисления.УровеньОбслуживанияДоставки 
		|			И зпНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.ПоЗаказу)
		|			И НЕ зпНачисления.ПометкаУдаления  		
		|;
		//Геннадий #4275 19.04.2022 --		
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Период КАК Период,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ВидЗанятости КАК ВидЗанятости,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Рейс КАК Рейс,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ФизЛицо КАК ФизЛицо,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.СоставЭкипажа КАК СоставЭкипажа,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ТипЗаказа КАК ТипЗаказа,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Заказ КАК Заказ,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.КатегорияЗаказа КАК КатегорияЗаказа,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ЗонаДоставки КАК ЗонаДоставки,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Должность КАК ДолжностьСотрудника,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.РольСотрудника КАК РольСотрудника,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Сотрудник КАК Сотрудник,
		//Геннадий #4275 03.11.2021 ++
		//| ЕСТЬNULL(зпТарификацияЗППоЗаказам.Тариф, 0)
		|	ВЫБОР
		|		КОГДА ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Начисление = ЗНАЧЕНИЕ(Перечисление.УровниОбслуживания.VIPУровень)
		|			ТОГДА зпСтавкиОплатыПоНачислениям.СтавкаЗаЗаказ
		|		ИНАЧЕ ЕСТЬNULL(зпТарификацияЗППоЗаказам.Тариф, 0)
		|	КОНЕЦ КАК Сумма,
		//Геннадий #4275 03.11.2021 --
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Заказ.Номер КАК ЗаказНомер,
		|	ЕСТЬNULL(зпТарификацияЗППоЗаказам.СхемаРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпСхемыРасчетаЗП.ПустаяСсылка)) КАК СхемаРасчетаЗП,
		|	ЕСТЬNULL(зпТарификацияЗППоЗаказам.ТарифРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпТарифыРасчетаЗП.ПустаяСсылка)) КАК ТарифРасчетаЗП,
		//Геннадий #4275 03.11.2021 ++
		//|	ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоставкаЗаказа) КАК Начисление,
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Начисление КАК Начисление,
		//Геннадий #4275 03.11.2021 --
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ЭтоВыходнойДень КАК ЭтоВыходнойДень
		|ИЗ
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам КАК ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпТарификацияЗППоЗаказам КАК зпТарификацияЗППоЗаказам
		|		ПО ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ТипЗаказа = зпТарификацияЗППоЗаказам.ТипЗаказа
		|			И ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.СоставЭкипажа = зпТарификацияЗППоЗаказам.СоставЭкипажа
		|			И ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Должность = зпТарификацияЗППоЗаказам.Должность
		|			И ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.РольСотрудника = зпТарификацияЗППоЗаказам.Роль
		|			И ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.КатегорияЗаказа = зпТарификацияЗППоЗаказам.КатегорияЗаказа
		|			И ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ЗонаДоставки = зпТарификацияЗППоЗаказам.ЗонаДоставки
		|			И (зпТарификацияЗППоЗаказам.СхемаРасчетаЗП = &СхемаРасчетаЗП)
		|			И (зпТарификацияЗППоЗаказам.ТарифРасчетаЗП = &ТарифРасчетаЗП)
		//Геннадий #4275 03.11.2021 ++
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
		|		ПО ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Должность = зпСтавкиОплатыПоНачислениям.Должность
		|			И ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.РольСотрудника = зпСтавкиОплатыПоНачислениям.Роль
		|			И ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.СоставЭкипажа = зпСтавкиОплатыПоНачислениям.СоставЭкипажа
		|			И ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.Начисление = зпСтавкиОплатыПоНачислениям.Начисление
		//Геннадий #4275 03.11.2021 --
		|ГДЕ
		|	ВТ_зпИсходныеДанныеРасчетаЗППоЗаказам.ФизЛицо.ГруппаФизЛиц = &ГруппаФизЛиц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Период,
		|	ВТ_РаботникиДолжностьРоль.ВидЗанятости,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Рейс,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ФизЛицо,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.СоставЭкипажа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ТипЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Заказ,
		|	ЗНАЧЕНИЕ(Справочник.зпКатегорииЗаказов.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.зпЗоныДоставки.ПустаяСсылка),
		|	0,
		|	ЕСТЬNULL(ВТ_РаботникиДолжностьРоль.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ВТ_РаботникиДолжностьРоль.РольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)),
		|	ЕСТЬNULL(ВТ_РаботникиДолжностьРоль.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)),
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Сумма,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Заказ.Номер,
		|	&СхемаРасчетаЗП,
		|	&ТарифРасчетаЗП,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Начисление,
		|	ЕСТЬNULL(ВТ_РаботникиДолжностьРоль.ЭтоВыходнойДень, ЛОЖЬ)
		|ИЗ
		|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.СрезПоследних(
		|			&КонецМесяцаРасчета,
		|			Регион = &Регион
		|				И СхемаРасчетаЗП = &СхемаРасчетаЗП
		|				И (ДатаРасчета МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиДолжностьРоль КАК ВТ_РаботникиДолжностьРоль
		|		ПО зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ФизЛицо = ВТ_РаботникиДолжностьРоль.ФизЛицо
		|			И (НАЧАЛОПЕРИОДА(зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Период, ДЕНЬ) = ВТ_РаботникиДолжностьРоль.ДеньМесяца)
		|ГДЕ
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Регион = &Регион
		|	И зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ФизЛицо.ГруппаФизЛиц = &ГруппаФизЛиц
		|	И ВТ_РаботникиДолжностьРоль.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_РаботникиДолжностьРоль.ДеньМесяца,
		|	ВТ_РаботникиДолжностьРоль.ВидЗанятости,
		|	ЗНАЧЕНИЕ(Документ.Рейс.ПустаяСсылка),
		|	ВТ_РаботникиДолжностьРоль.ФизЛицо,
		|	ЗНАЧЕНИЕ(Перечисление.зпСоставЭкипажа.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.ПустаяСсылка),
		|	NULL,
		|	ЗНАЧЕНИЕ(Справочник.зпКатегорииЗаказов.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.зпЗоныДоставки.ПустаяСсылка),
		|	NULL,
		|	ВТ_РаботникиДолжностьРоль.Должность,
		|	ВТ_РаботникиДолжностьРоль.РольСотрудника,
		|	ВТ_РаботникиДолжностьРоль.Сотрудник,
		|	ЕСТЬNULL(зпСтавкиОплатыПоНачислениям.СтавкаЗаСмену, 0),
		|	"""",
		|	&СхемаРасчетаЗП,
		|	&ТарифРасчетаЗП,
		|	ЗНАЧЕНИЕ(Справочник.зпНачисления.ПустаяСсылка),
		|	ВТ_РаботникиДолжностьРоль.ЭтоВыходнойДень
		|ИЗ
		|	ВТ_РаботникиДолжностьРоль КАК ВТ_РаботникиДолжностьРоль
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
		|		ПО ВТ_РаботникиДолжностьРоль.Должность = зпСтавкиОплатыПоНачислениям.Должность
		|			И ВТ_РаботникиДолжностьРоль.РольСотрудника = зпСтавкиОплатыПоНачислениям.Роль
		|ГДЕ
		|	ВТ_РаботникиДолжностьРоль.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.Совместительство)
		|	И ВТ_РаботникиДолжностьРоль.ФизЛицо.ГруппаФизЛиц = &ГруппаФизЛиц
		|	И зпСтавкиОплатыПоНачислениям.СхемаРасчетаЗП = &СхемаРасчетаЗП
		|	И зпСтавкиОплатыПоНачислениям.ТарифРасчетаЗП = &ТарифРасчетаЗП";
		//CeHbKA #4381 12.12.2020
		
		
	Запрос.УстановитьПараметр("НачалоМесяцаРасчета", 	НачалоМесяца(Объект.МесяцРасчета));
	Запрос.УстановитьПараметр("КонецМесяцаРасчета", 	КонецМесяца(Объект.МесяцРасчета));
	
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", 		Объект.СхемаРасчетаЗП);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", 		Объект.ТарифРасчетаЗП);
	Запрос.УстановитьПараметр("Регион", 				Объект.Регион);
	
	//Геннадий #4611 06.07.2021 ->
	Запрос.УстановитьПараметр("ГруппаФизЛиц", 			Объект.ГруппаФизЛиц);
	//Геннадий <-
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрока = Объект.НачисленияПоЗаказам.Добавить();	
		ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	//CeHbKA #4397 15.12.2020
	ПересчитатьМинимальныеСтавкиНаСервере();
	//CeHbKA #4397 15.12.2020
	
	//Геннадий #4457 29.01.2021 ->
	ПересчитатьНачисленияПоЧасовойОплаты();	
	//Геннадий 29.01.2021 <-
	
	//Геннадий #4681 28.09.2021 ->
	ПересчитатьНачисленияПоСменам();
	//Геннадий 28.09.2021 <-
	
КонецПроцедуры 

//CeHbKA #4397 15.12.2020
&НаКлиенте
Процедура ПересчитатьМинимальныеСтавки(Команда)
	ПересчитатьМинимальныеСтавкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьМинимальныеСтавкиНаСервере()

	Объект.ПримененныеМинимальныеСтавки.Очистить();
	
	//2. Делаем копию ТЧ.НачисленияПоЗаказам в ТЗ, сворачиваем её по дням (в свертке убираем поля Рейс, ТипЗаказа, Заказ, КатегорияЗаказа, ЗонаДоставки),
	//с суммированием поля Сумма.
	ТЗ_Копия = Объект.НачисленияПоЗаказам.Выгрузить();
	ТЗ_Копия.Свернуть("Период, ФизЛицо, Начисление, СоставЭкипажа, ВидЗанятости, ДолжностьСотрудника, РольСотрудника, ЭтоВыходнойДень", "Сумма");
	
	//3. С помощью запроса соединяем данные, полученные в п.1 с данными, полученными в п.2 (с отбором по Начисление = ДоставкаЗаказа), 
	//получаем данные по физлицам, ролям, должностям и дням, которые попадают под критерий минимальной ставки (заработанное за день меньше минимальной ставки).
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияТЧ.Период КАК Период,
		|	НачисленияТЧ.ФизЛицо КАК ФизЛицо,
		|	НачисленияТЧ.Начисление КАК Начисление,
		|	НачисленияТЧ.СоставЭкипажа КАК СоставЭкипажа,
		|	НачисленияТЧ.ВидЗанятости КАК ВидЗанятости,
		|	НачисленияТЧ.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	НачисленияТЧ.РольСотрудника КАК РольСотрудника,
		|	НачисленияТЧ.ЭтоВыходнойДень КАК ЭтоВыходнойДень,
		|	НачисленияТЧ.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТ_Начисления
		|ИЗ
		|	&НачисленияТЧ КАК НачисленияТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Начисления.Период КАК Период,
		|	ВТ_Начисления.ФизЛицо КАК ФизЛицо,
		|	ВТ_Начисления.Начисление КАК Начисление,
		|	ВТ_Начисления.СоставЭкипажа КАК СоставЭкипажа,
		|	ВТ_Начисления.ВидЗанятости КАК ВидЗанятости,
		|	ВТ_Начисления.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	ВТ_Начисления.РольСотрудника КАК РольСотрудника,
		|	СУММА(ВТ_Начисления.Сумма) КАК РасчетнаяСумма,
		|	ЕСТЬNULL(зпМинимальныеСтавки.СхемаРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпСхемыРАсчетаЗП.ПустаяСсылка)) КАК СхемаРасчётаЗП,
		|	ЕСТЬNULL(зпМинимальныеСтавки.ТарифРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпТарифыРасчетаЗП.ПустаяСсылка)) КАК ТарифРасчетаЗП,
		|	ЕСТЬNULL(зпМинимальныеСтавки.МинимальнаяСтавка, 0) КАК СуммаПоМинимальнойСтавке,
		|	ВТ_Начисления.ЭтоВыходнойДень КАК ЭтоВыходнойДень
		|ИЗ
		|	ВТ_Начисления КАК ВТ_Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпМинимальныеСтавки КАК зпМинимальныеСтавки
		|		ПО ВТ_Начисления.ДолжностьСотрудника = зпМинимальныеСтавки.Должность
		|			И ВТ_Начисления.РольСотрудника = зпМинимальныеСтавки.Роль
		|			И ВТ_Начисления.СоставЭкипажа = зпМинимальныеСтавки.СоставЭкипажа
		|			И (зпМинимальныеСтавки.СхемаРасчетаЗП = &СхемаРасчетаЗП)
		|			И (зпМинимальныеСтавки.ТарифРасчетаЗП = &ТарифРасчетаЗП)
		|ГДЕ
		|	(ВТ_Начисления.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоставкаЗаказа)
		|			ИЛИ ВТ_Начисления.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ОплатаПодъемаНаЭтажПриДоставкеЗаказа))
		|	И НЕ ВТ_Начисления.ЭтоВыходнойДень
		|	И ВТ_Начисления.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость)
		|	И ЕСТЬNULL(зпМинимальныеСтавки.МинимальнаяСтавка, 0) > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Начисления.Период,
		|	ВТ_Начисления.ФизЛицо,
		|	ВТ_Начисления.Начисление,
		|	ВТ_Начисления.СоставЭкипажа,
		|	ВТ_Начисления.ВидЗанятости,
		|	ВТ_Начисления.ДолжностьСотрудника,
		|	ВТ_Начисления.РольСотрудника,
		|	ВТ_Начисления.ЭтоВыходнойДень,
		|	ЕСТЬNULL(зпМинимальныеСтавки.СхемаРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпСхемыРАсчетаЗП.ПустаяСсылка)),
		|	ЕСТЬNULL(зпМинимальныеСтавки.ТарифРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпТарифыРасчетаЗП.ПустаяСсылка)),
		|	ЕСТЬNULL(зпМинимальныеСтавки.МинимальнаяСтавка, 0)
		|ИТОГИ ПО
		|	Период,
		|	ФизЛицо";
	
		//"ВЫБРАТЬ
		//|	НачисленияТЧ.Период КАК Период,
		//|	НачисленияТЧ.ФизЛицо КАК ФизЛицо,
		//|	НачисленияТЧ.Начисление КАК Начисление,
		//|	НачисленияТЧ.СоставЭкипажа КАК СоставЭкипажа,
		//|	НачисленияТЧ.ВидЗанятости КАК ВидЗанятости,
		//|	НачисленияТЧ.ДолжностьСотрудника КАК ДолжностьСотрудника,
		//|	НачисленияТЧ.РольСотрудника КАК РольСотрудника,
		//|	НачисленияТЧ.ЭтоВыходнойДень КАК ЭтоВыходнойДень,
		//|	НачисленияТЧ.Сумма КАК Сумма
		//|ПОМЕСТИТЬ ВТ_Начисления
		//|ИЗ
		//|	&НачисленияТЧ КАК НачисленияТЧ
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ВТ_Начисления.Период КАК Период,
		//|	ВТ_Начисления.ФизЛицо КАК ФизЛицо,
		//|	ВТ_Начисления.Начисление КАК Начисление,
		//|	ВТ_Начисления.СоставЭкипажа КАК СоставЭкипажа,
		//|	ВТ_Начисления.ВидЗанятости КАК ВидЗанятости,
		//|	ВТ_Начисления.ДолжностьСотрудника КАК ДолжностьСотрудника,
		//|	ВТ_Начисления.РольСотрудника КАК РольСотрудника,
		//|	СУММА(ВТ_Начисления.Сумма) КАК РасчетнаяСумма,
		//|	ЕСТЬNULL(зпМинимальныеСтавки.СхемаРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпСхемыРАсчетаЗП.ПустаяСсылка)) КАК СхемаРасчётаЗП,
		//|	ЕСТЬNULL(зпМинимальныеСтавки.ТарифРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпТарифыРасчетаЗП.ПустаяСсылка)) КАК ТарифРасчетаЗП,
		//|	СУММА(ЕСТЬNULL(зпМинимальныеСтавки.МинимальнаяСтавка, 0)) КАК СуммаПоМинимальнойСтавке,
		//|	ВТ_Начисления.ЭтоВыходнойДень КАК ЭтоВыходнойДень
		//|ИЗ
		//|	ВТ_Начисления КАК ВТ_Начисления
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпМинимальныеСтавки КАК зпМинимальныеСтавки
		//|		ПО ВТ_Начисления.ДолжностьСотрудника = зпМинимальныеСтавки.Должность
		//|			И ВТ_Начисления.РольСотрудника = зпМинимальныеСтавки.Роль
		//|			И ВТ_Начисления.СоставЭкипажа = зпМинимальныеСтавки.СоставЭкипажа
		//|			И (зпМинимальныеСтавки.СхемаРасчетаЗП = &СхемаРасчетаЗП)
		//|			И (зпМинимальныеСтавки.ТарифРасчетаЗП = &ТарифРасчетаЗП)
		//|ГДЕ
		//|	ВТ_Начисления.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоставкаЗаказа)
		//|	И НЕ ВТ_Начисления.ЭтоВыходнойДень
		////Геннадий 04.08.2021 ->
		//|	И ВТ_Начисления.ВидЗанятости = Значение(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость)
		////Геннадий <-
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ВТ_Начисления.Период,
		//|	ВТ_Начисления.ФизЛицо,
		//|	ВТ_Начисления.Начисление,
		//|	ВТ_Начисления.СоставЭкипажа,
		//|	ВТ_Начисления.ВидЗанятости,
		//|	ВТ_Начисления.ДолжностьСотрудника,
		//|	ВТ_Начисления.РольСотрудника,
		//|	ВТ_Начисления.ЭтоВыходнойДень,
		//|	ЕСТЬNULL(зпМинимальныеСтавки.СхемаРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпСхемыРАсчетаЗП.ПустаяСсылка)),
		//|	ЕСТЬNULL(зпМинимальныеСтавки.ТарифРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпТарифыРасчетаЗП.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("НачисленияТЧ", ТЗ_Копия);
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", Объект.СхемаРасчетаЗП);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", Объект.ТарифРасчетаЗП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	////4. Обрабатываем полученный результат:
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	Если ВыборкаДетальныеЗаписи.РасчетнаяСумма >= ВыборкаДетальныеЗаписи.СуммаПоМинимальнойСтавке Тогда
	//		Продолжить;	
	//	КонецЕсли; 
	//	
	//	//4.1 Обходим ТЧ.НачисленияПоЗаказам, по полученным в п. 3 данным выставляем в ТЧ.НачисленияПоЗаказам.ОплатаПоМинимальнойСтавке = Истина. 
	//	//По всем остальным строкам выставляем ТЧ.НачисленияПоЗаказам.ОплатаПоМинимальнойСтавке = Ложь.
	//	СтруктураОтбора = Новый Структура("Период, ФизЛицо, Начисление, СоставЭкипажа, ДолжностьСотрудника, РольСотрудника");
	//	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаДетальныеЗаписи);
	//	
	//	НайденныеСтроки = Объект.НачисленияПоЗаказам.НайтиСтроки(СтруктураОтбора);
	//	
	//	Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
	//		СтрокаТЧ.ОплатаПоМинимальнойСтавке = Истина;
	//	КонецЦикла; 
	//	
	//	//4.2 Полученные данные в п.3 пишем в ТЧ.ПримененныеМинимальныеСтавки. В РасчетнаяСумма пишем сумму, 
	//	//которая полузчилась по факту за день у этого сотрудника (которая не "дотянула" до минимальной ставки).		
	//	НС = Объект.ПримененныеМинимальныеСтавки.Добавить();
	//	ЗаполнитьЗначенияСвойств(НС, ВыборкаДетальныеЗаписи);
	//	
	//КонецЦикла;	

	ВыборкаПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПериод.Следующий() Цикл
		// Вставить обработку выборки ВыборкаПериод
	
		ВыборкаФизЛицо = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаФизЛицо.Следующий() Цикл
			// Вставить обработку выборки ВыборкаФизЛицо
	
			
			ВыборкаДетальныеЗаписи = ВыборкаФизЛицо.Выбрать();
			
			//Геннадий #4397 18.04.2022 ++ 
			СуммаПодъема 		= 0;
			СуммаДоставкаПодъем = ВыборкаФизЛицо.РасчетнаяСумма;
			//Геннадий #4397 18.04.2022 --
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если СуммаДоставкаПодъем >= ВыборкаДетальныеЗаписи.СуммаПоМинимальнойСтавке Тогда
					Продолжить;	
				КонецЕсли; 
				
				//4.1 Обходим ТЧ.НачисленияПоЗаказам, по полученным в п. 3 данным выставляем в ТЧ.НачисленияПоЗаказам.ОплатаПоМинимальнойСтавке = Истина. 
				//По всем остальным строкам выставляем ТЧ.НачисленияПоЗаказам.ОплатаПоМинимальнойСтавке = Ложь.
				СтруктураОтбора = Новый Структура("Период, ФизЛицо, Начисление, СоставЭкипажа, ДолжностьСотрудника, РольСотрудника");
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаДетальныеЗаписи);
				
				НайденныеСтроки = Объект.НачисленияПоЗаказам.НайтиСтроки(СтруктураОтбора);
				
				Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
					СтрокаТЧ.ОплатаПоМинимальнойСтавке = Истина;
				КонецЦикла; 
				
				//4.2 Полученные данные в п.3 пишем в ТЧ.ПримененныеМинимальныеСтавки. В РасчетнаяСумма пишем сумму, 
				//которая полузчилась по факту за день у этого сотрудника (которая не "дотянула" до минимальной ставки).		
				НС = Объект.ПримененныеМинимальныеСтавки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ВыборкаДетальныеЗаписи);
				
				//Геннадий #4397 18.04.2022 ++ 
				Если ВыборкаДетальныеЗаписи.Начисление = Справочники.зпНачисления.ОплатаПодъемаНаЭтажПриДоставкеЗаказа Тогда
					
					СуммаПодъема 				= ВыборкаДетальныеЗаписи.РасчетнаяСумма;//потребуется на следующем шаге цикла
					НС.СуммаПоМинимальнойСтавке = СуммаПодъема;
					
				ИначеЕсли ВыборкаДетальныеЗаписи.Начисление = Справочники.зпНачисления.ДоставкаЗаказа Тогда	
					
					НС.СуммаПоМинимальнойСтавке = ВыборкаДетальныеЗаписи.СуммаПоМинимальнойСтавке - СуммаПодъема;
					
				КонецЕсли;
				//Геннадий #4397 18.04.2022 --
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры // ()
 //CeHbKA #4397 15.12.2020

//Геннадий #4457 29.01.2021 ->
&НаСервере
Процедура ПересчитатьНачисленияПоЧасовойОплаты()
	
	Объект.НачисленияПоЧасовойОплаты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	зпУчетЧасов.Дата КАК Период,
		|	зпУчетЧасов.Регистратор КАК Регистратор,
		|	зпУчетЧасов.НомерСтроки КАК НомерСтроки,
		|	зпУчетЧасов.Активность КАК Активность,
		|	зпУчетЧасов.Терминал КАК Терминал,
		|	зпУчетЧасов.ФизЛицо КАК ФизЛицо,
		|	зпУчетЧасов.Дата КАК Дата,
		|	зпУчетЧасов.ВидЗанятости КАК ВидЗанятости,
		|	зпУчетЧасов.Начисление КАК Начисление,
		|	зпУчетЧасов.РольСотрудника КАК РольСотрудника,
		|	зпУчетЧасов.ДолжностьСотрудника КАК ДолжностьСотрудника,
		|	зпУчетЧасов.ЧасовОтработано КАК ЧасовОтработано,
		|	зпУчетЧасов.ЧасовПереработки КАК ЧасовПереработки,
		|	зпУчетЧасов.СоставЭкипажа КАК СоставЭкипажа,
		|	зпУчетЧасов.Рейс КАК Рейс,
		|	зпСтавкиОплатыПоНачислениям.СтавкаЗаСмену КАК СтавкаЗаСмену,
		|	зпСтавкиОплатыПоНачислениям.СтавкаЗаЧасПереработки КАК СтавкаЗаЧасПереработки,
		|	зпСтавкиОплатыПоНачислениям.СтавкаЗаСмену КАК СуммаОтработано,
		|	зпУчетЧасов.ЧасовПереработки * зпСтавкиОплатыПоНачислениям.СтавкаЗаЧасПереработки КАК СуммаПереработка,
		|	зпСтавкиОплатыПоНачислениям.СтавкаЗаСмену + зпУчетЧасов.ЧасовПереработки * зпСтавкиОплатыПоНачислениям.СтавкаЗаЧасПереработки КАК СуммаИтого
		|ИЗ
		|	РегистрСведений.зпУчетЧасов КАК зпУчетЧасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
		|		ПО зпУчетЧасов.СоставЭкипажа = зпСтавкиОплатыПоНачислениям.СоставЭкипажа
		|			И зпУчетЧасов.Начисление = зпСтавкиОплатыПоНачислениям.Начисление
		|			И зпУчетЧасов.РольСотрудника = зпСтавкиОплатыПоНачислениям.Роль
		|			И зпУчетЧасов.ДолжностьСотрудника = зпСтавкиОплатыПоНачислениям.Должность
		|ГДЕ
		|	зпУчетЧасов.Терминал = &Терминал
		|	И зпУчетЧасов.Дата >= НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
		|	И зпУчетЧасов.Дата <= КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
		//Геннадий #4611 22.07.2021 ++
		|	И зпУчетЧасов.ФизЛицо.ГруппаФизЛиц = &ГруппаФизЛиц
		//Геннадий #4611 22.07.2021 --
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо,
		|	Период";
	
	//Геннадий #4611 22.07.2021 ++
	Запрос.УстановитьПараметр("ГруппаФизЛиц", 	Объект.ГруппаФизЛиц);
	//Геннадий #4611 22.07.2021 --
	Запрос.УстановитьПараметр("Терминал", 		Объект.Регион);
	Запрос.УстановитьПараметр("Дата", 			Объект.МесяцРасчета);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Объект.НачисленияПоЧасовойОплаты.Загрузить(РезультатЗапроса);
	
КонецПроцедуры
//Геннадий 29.01.2021 <-

//Геннадий #4681 28.09.2021 ->
&НаСервере
Процедура ПересчитатьНачисленияПоСменам()

	Объект.НачислениеПоСменам.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	               |	РаботникиОрганизацииСрезПоследних.ФизЛицо КАК ФизЛицо,
	               |	ЕСТЬNULL(ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) КАК Должность,
	               |	РаботникиОрганизацииСрезПоследних.Состояние КАК Состояние,
	               |	&НачалоМесяцаРасчета КАК Период
	               |ПОМЕСТИТЬ ВТ_Принятые_1
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизации.СрезПоследних(&НачалоМесяцаРасчета, ) КАК РаботникиОрганизацииСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних(&НачалоМесяцаРасчета, ) КАК ДополнительныеПараметрыФизЛицСрезПоследних
	               |		ПО РаботникиОрганизацииСрезПоследних.ФизЛицо = ДополнительныеПараметрыФизЛицСрезПоследних.ФизЛицо
	               |ГДЕ
	               |	РаботникиОрганизацииСрезПоследних.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |	И РаботникиОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию)
	               |	И РаботникиОрганизацииСрезПоследних.Терминал = &Регион
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РаботникиОрганизации.Сотрудник,
	               |	РаботникиОрганизации.ФизЛицо,
	               |	ЕСТЬNULL(ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)),
	               |	РаботникиОрганизации.Состояние,
	               |	РаботникиОрганизации.Период
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц КАК ДополнительныеПараметрыФизЛиц
	               |		ПО РаботникиОрганизации.ФизЛицо = ДополнительныеПараметрыФизЛиц.ФизЛицо
	               |			И (ДополнительныеПараметрыФизЛиц.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета)
	               |ГДЕ
	               |	РаботникиОрганизации.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |	И РаботникиОрганизации.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
	               |	И РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию)
	               |	И РаботникиОрганизации.Терминал = &Регион
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РаботникиОрганизации.Сотрудник,
	               |	РаботникиОрганизации.ФизЛицо,
	               |	РаботникиОрганизации.Должность,
	               |	РаботникиОрганизации.Состояние,
	               |	РаботникиОрганизации.Период,
	               |	НАЧАЛОПЕРИОДА(ДополнительныеПараметрыФизЛиц.Период, ДЕНЬ),
	               |	ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Принятые_1.Сотрудник КАК Сотрудник,
	               |	ВТ_Принятые_1.ФизЛицо КАК ФизЛицо,
	               |	ВТ_Принятые_1.Должность КАК Должность,
	               |	ВТ_Принятые_1.Состояние КАК Состояние,
	               |	ВТ_Принятые_1.Период КАК Период
	               |ПОМЕСТИТЬ ВТ_Принятые
	               |ИЗ
	               |	ВТ_Принятые_1 КАК ВТ_Принятые_1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	               |	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	               |	ЕСТЬNULL(ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника, ЗНАЧЕНИЕ(Справочник.РолиСотрудников.ПустаяСсылка)) КАК Должность,
	               |	РаботникиОрганизации.Состояние КАК Состояние,
	               |	РаботникиОрганизации.Период КАК Период
	               |ПОМЕСТИТЬ ВТ_Уволенные
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц КАК ДополнительныеПараметрыФизЛиц
	               |		ПО РаботникиОрганизации.ФизЛицо = ДополнительныеПараметрыФизЛиц.ФизЛицо
	               |			И (ДополнительныеПараметрыФизЛиц.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета)
	               |ГДЕ
	               |	РаботникиОрганизации.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |	И РаботникиОрганизации.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
	               |	И РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.Уволен)
	               |	И РаботникиОрганизации.Терминал = &Регион
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РаботникиОрганизации.Сотрудник,
	               |	РаботникиОрганизации.ФизЛицо,
	               |	РаботникиОрганизации.Должность,
	               |	РаботникиОрганизации.Состояние,
	               |	РаботникиОрганизации.Период,
	               |	НАЧАЛОПЕРИОДА(ДополнительныеПараметрыФизЛиц.Период, ДЕНЬ),
	               |	ДополнительныеПараметрыФизЛиц.ОсновнаяРольСотрудника
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Принятые.Сотрудник КАК Сотрудник,
	               |	ВТ_Принятые.ФизЛицо КАК ФизЛицо,
	               |	ВТ_Принятые.Должность КАК Должность,
	               |	ВТ_Принятые.Период КАК ПериодС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Уволенные.Период, &КонецМесяцаРасчета) <= ВТ_Принятые.Период
	               |			ТОГДА &КонецМесяцаРасчета
	               |		ИНАЧЕ ЕСТЬNULL(ВТ_Уволенные.Период, &КонецМесяцаРасчета)
	               |	КОНЕЦ КАК ПериодПо
	               |ПОМЕСТИТЬ ВТ_Работники
	               |ИЗ
	               |	ВТ_Принятые КАК ВТ_Принятые
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Уволенные КАК ВТ_Уволенные
	               |		ПО ВТ_Принятые.ФизЛицо = ВТ_Уволенные.ФизЛицо
	               |			И ВТ_Принятые.Сотрудник = ВТ_Уволенные.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПланируемыйГрафикРаботыСотрудников.Дата КАК ДеньМесяца,
	               |	ПланируемыйГрафикРаботыСотрудников.ФизЛицо КАК ФизЛицо,
	               |	ПланируемыйГрафикРаботыСотрудников.РольСотрудника КАК РольСотрудника,
	               |	ЕСТЬNULL(ВТ_Работники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	               |	ЕСТЬNULL(ВТ_Работники.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность,
	               |	ЕСТЬNULL(ВТ_Работники.ПериодС, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодС,
	               |	ЕСТЬNULL(ВТ_Работники.ПериодПо, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодПо,
	               |	ПланируемыйГрафикРаботыСотрудников.ВидЗанятости КАК ВидЗанятости
	               |ПОМЕСТИТЬ ВТ_РаботникиДолжностьРоль
	               |ИЗ
	               |	РегистрСведений.ПланируемыйГрафикРаботыСотрудников КАК ПланируемыйГрафикРаботыСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работники КАК ВТ_Работники
	               |		ПО ПланируемыйГрафикРаботыСотрудников.ФизЛицо = ВТ_Работники.ФизЛицо
	               |			И ПланируемыйГрафикРаботыСотрудников.Дата >= ВТ_Работники.ПериодС
	               |			И ПланируемыйГрафикРаботыСотрудников.Дата <= ВТ_Работники.ПериодПо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПланируемыйГрафикРаботыСотрудников.ФизЛицо КАК ФизЛицо,
	               |	ПланируемыйГрафикРаботыСотрудников.Дата КАК Период,
	               |	ПланируемыйГрафикРаботыСотрудников.ВидЗанятости КАК ВидЗанятости,
	               |	ПланируемыйГрафикРаботыСотрудников.ВидОтработанногоВремени КАК ВидОтработанногоВремени,
	               |	ПланируемыйГрафикРаботыСотрудников.РольСотрудника КАК РольСотрудника,
	               |	ВТ_РаботникиДолжностьРоль.Должность КАК ДолжностьСотрудника,
				   |	ЗНАЧЕНИЕ(Справочник.зпНачисления.ОплатаПоСменам) КАК Начисление,
	               |	зпСтавкиОплатыПоНачислениям.СтавкаЗаСмену КАК СтавкаЗаСмену,
	               |	зпСтавкиОплатыПоНачислениям.СтавкаЗаЧасПереработки КАК СтавкаЗаЧасПереработки,
				   |	зпСтавкиОплатыПоНачислениям.СтавкаЗаСмену КАК СуммаИтого	
	               |ИЗ
	               |	РегистрСведений.ПланируемыйГрафикРаботыСотрудников КАК ПланируемыйГрафикРаботыСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиДолжностьРоль КАК ВТ_РаботникиДолжностьРоль
	               |		ПО ПланируемыйГрафикРаботыСотрудников.ФизЛицо = ВТ_РаботникиДолжностьРоль.ФизЛицо
	               |			И (НАЧАЛОПЕРИОДА(ПланируемыйГрафикРаботыСотрудников.Период, ДЕНЬ) = ВТ_РаботникиДолжностьРоль.ДеньМесяца)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
	               |		ПО ПланируемыйГрафикРаботыСотрудников.РольСотрудника = зпСтавкиОплатыПоНачислениям.Роль
	               |ГДЕ
	               |	ПланируемыйГрафикРаботыСотрудников.РольСотрудника.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ОплатаПоСменам)
	               |	И ПланируемыйГрафикРаботыСотрудников.Терминал = &Регион
	               |	И ПланируемыйГрафикРаботыСотрудников.Дата МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
	               |	И зпСтавкиОплатыПоНачислениям.СхемаРасчетаЗП = &СхемаРасчетаЗП
	               |	И зпСтавкиОплатыПоНачислениям.ТарифРасчетаЗП = &ТарифРасчетаЗП
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПланируемыйГрафикРаботыСотрудников.ФизЛицо,
	               |	ПланируемыйГрафикРаботыСотрудников.Дата,
	               |	ПланируемыйГрафикРаботыСотрудников.ВидЗанятости,
	               |	ПланируемыйГрафикРаботыСотрудников.ВидОтработанногоВремени,
	               |	ПланируемыйГрафикРаботыСотрудников.РольСотрудника,
	               |	ВТ_РаботникиДолжностьРоль.Должность,
	               |	зпСтавкиОплатыПоНачислениям.СтавкаЗаСмену,
	               |	зпСтавкиОплатыПоНачислениям.СтавкаЗаЧасПереработки";
	
	Запрос.УстановитьПараметр("НачалоМесяцаРасчета", 	НачалоМесяца(Объект.МесяцРасчета));
	Запрос.УстановитьПараметр("КонецМесяцаРасчета", 	КонецМесяца(Объект.МесяцРасчета));
	
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", 		Объект.СхемаРасчетаЗП);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", 		Объект.ТарифРасчетаЗП);
	Запрос.УстановитьПараметр("Регион", 				Объект.Регион);
	Запрос.УстановитьПараметр("ГруппаФизЛиц", 			Объект.ГруппаФизЛиц);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Объект.НачислениеПоСменам.Загрузить(РезультатЗапроса);

КонецПроцедуры
//Геннадий 28.09.2021 <-

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Если Не Параметры.Ключ.Пустая() Тогда
	//	Отказ = ДокументЗакрытДляИзменения();				
	//КонецЕсли;	
	
	Если Не Отказ Тогда
		Объект.СуммаНачисленийПоЗаказам = Объект.НачисленияПоЗаказам.Итог("Сумма");
		ОбновитьКраткоеСодержаниеДокумента();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ДокументЗакрытДляИзменения()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект.ПроверитьДокументНаЗакрытиеДляИзменения();
КонецФункции

&НаКлиенте
Процедура НачисленияПоЗаказамПриИзменении(Элемент)
	Объект.СуммаНачисленийПоЗаказам = Объект.НачисленияПоЗаказам.Итог("Сумма");
КонецПроцедуры

&НаСервере
Процедура ОбновитьКраткоеСодержаниеДокумента()
	
	Объект.КраткоеСодержаниеДокумента = "";
	ФизЛицаТЗ = Объект.НачисленияПоЗаказам.Выгрузить(, "ФизЛицо");
	ФизЛицаТЗ.Свернуть("ФизЛицо");
	
	счетчик = 0;
	Для Каждого строкаТЧ Из ФизЛицаТЗ Цикл
		
		Если ПустаяСтрока(Объект.КраткоеСодержаниеДокумента) Тогда
			Объект.КраткоеСодержаниеДокумента = строкаТЧ.ФизЛицо;
		Иначе
			Объект.КраткоеСодержаниеДокумента = Объект.КраткоеСодержаниеДокумента + ": " + строкаТЧ.ФизЛицо;
		КонецЕсли;
		счетчик = счетчик + 1;
		Если счетчик = 5 Тогда Прервать; КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеНачисления(Команда)
	
	ЗакрытьДокументДляИзменения(Элементы.ФормаЗакрытиеНачисления.Пометка);
	Элементы.ФормаЗакрытиеНачисления.Пометка = Не Элементы.ФормаЗакрытиеНачисления.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьДокументДляИзменения(ЗакрытьДокумент)

	РСМенеджер = РегистрыСведений.ДокументыЗакрытыеДляИзменения.СоздатьМенеджерЗаписи();
	РСМенеджер.Документ 			= Объект.Ссылка;
	РСМенеджер.ДокументРегистратор 	= Объект.Ссылка;
	РСМенеджер.Активность 	= Истина;
	РСМенеджер.ЗакрытДляРедактирования = Не ЗакрытьДокумент;
	РСМенеджер.Период 		= ТекущаяДата();
	РСМенеджер.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	РСМенеджер.Записать();
	
КонецПроцедуры

//CeHbKA 11.12.2020
&НаКлиенте
Процедура РегионПриИзменении(Элемент)

	ЗаполнитьАктивныйСхемуИТарифЗП();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАктивныйСхемуИТарифЗП()

	Объект.СхемаРасчетаЗП = зпРаботаСРасчетомЗарплатыСервер.ПолучитьАктивнуюСхемуРасчетаЗП(Объект.МесяцРасчета, Объект.Регион);
	Объект.ТарифРасчетаЗП = зпРаботаСРасчетомЗарплатыСервер.ПолучитьАктивныйТарифРасчетаЗП(Объект.МесяцРасчета, Объект.СхемаРасчетаЗП);	

КонецПроцедуры // ()
//CeHbKA 11.12.2020
 