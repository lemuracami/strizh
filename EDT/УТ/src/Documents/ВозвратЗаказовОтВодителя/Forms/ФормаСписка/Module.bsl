
&НаСервере
Функция ПоискДокументаНаСервере(НомерР)	Экспорт 
	
	Склад = Неопределено;
	
	Рейс = Документы.Рейс.НайтиПоНомеру(СокрЛП(НомерР));
	
	Если НЕ ЗначениеЗаполнено(Рейс) Тогда		
		Сообщить("Не найден рейс с номером " + СокрЛП(НомерРейса));	
		Возврат Неопределено;	
	КонецЕсли;
	
	ЗапросСклад = Новый Запрос("ВЫБРАТЬ
			                   |	НастройкиПользователей.Значение
			                   |ИЗ
			                   |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			                   |ГДЕ
			                   |	НастройкиПользователей.Пользователь = &Пользователь
			                   |	И НастройкиПользователей.Настройка = &Настройка");
	ЗапросСклад.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	ЗапросСклад.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.Склад);
	РезСклад = ЗапросСклад.Выполнить().Выбрать();
	
	Если РезСклад.Следующий() Тогда	
		Склад = РезСклад.Значение;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Сообщить("Отсутствует значение настройки пользователя ""Склад """);	
		Возврат Неопределено;
	КонецЕсли;
	
	//Асеев 16.09.2020 (Задача № 4249)>>>
	УдаленноеЗакрытиеИлиПодтверждение = ТумблерОтбора = 2 Или ТумблерОтбора = 3;
	Если УдаленноеЗакрытиеИлиПодтверждение Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Рейс", Рейс);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВозвратЗаказовОтВодителя.Ссылка КАК Ссылка,
		|	ВозвратЗаказовОтВодителя.УдаленноеЗакрытие КАК УдаленноеЗакрытие,
		|	ВозвратЗаказовОтВодителя.РежимПодтвержденияУдаленногоЗакрытия КАК РежимПодтвержденияУдаленногоЗакрытия
		|ИЗ
		|	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
		|ГДЕ
		|	ВозвратЗаказовОтВодителя.Рейс = &Рейс
		|	И ВозвратЗаказовОтВодителя.Склад = &Склад";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТаблицаДокументов = Результат.Выгрузить();
		СтрокаУдаленноеЗакрытие = ТаблицаДокументов.Найти(Истина, "УдаленноеЗакрытие");
		СтрокаРежимПодтвержденияУдаленногоЗакрытия = ТаблицаДокументов.Найти(Истина, "РежимПодтвержденияУдаленногоЗакрытия");
		Если СтрокаУдаленноеЗакрытие <> Неопределено И СтрокаРежимПодтвержденияУдаленногоЗакрытия <> Неопределено Тогда
			Возврат СтрокаРежимПодтвержденияУдаленногоЗакрытия.Ссылка;
		ИначеЕсли СтрокаУдаленноеЗакрытие <> Неопределено Тогда
			ДокументВозврат = Документы.ВозвратЗаказовОтВодителя.СоздатьДокумент();	
			ДокументВозврат.Дата = ТекущаяДата();
			ДокументВозврат.Рейс = Рейс;
			ДокументВозврат.Склад = Склад;
			ДокументВозврат.ДокументУдаленногоЗакрытия = СтрокаУдаленноеЗакрытие.Ссылка;
			ДокументВозврат.РежимПодтвержденияУдаленногоЗакрытия = Истина;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		//Асеев 16.09.2020 (Задача № 4249)<<<
		
		// ищем документ по Рейс-Склад
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВозвратЗаказовОтВодителя.Ссылка
		|ИЗ
		|	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
		|ГДЕ
		|	ВозвратЗаказовОтВодителя.Рейс = &Рейс
		|	И ВозвратЗаказовОтВодителя.Склад = &Склад");
		Запрос.УстановитьПараметр("Рейс", Рейс);
		Запрос.УстановитьПараметр("Склад", Склад);
		Рез = Запрос.Выполнить().Выбрать();		
		
		Если Рез.Следующий() Тогда
			ДокументВозврат = Рез.Ссылка.ПолучитьОбъект();	
			//+++ БАО 13.10.2017 №1920 
			ДокументВозврат.Рейс = Рейс;
			//--- БАО 13.10.2017 №1920
			
		Иначе
			ДокументВозврат = Документы.ВозвратЗаказовОтВодителя.СоздатьДокумент();	
			ДокументВозврат.Дата = ТекущаяДата();
			ДокументВозврат.Рейс = Рейс;
			ДокументВозврат.Склад = Склад;
			//ДокументВозврат.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЕсли;
	
	//+++ БАО 13.10.2017 №1920 
	//----ЗаполнитьДокументПоРейсу(ДокументВозврат, Рейс);
	ДокументВозврат.ЗаполнитьПоРейсуНаСервере(ДокументВозврат, Истина);
	//--- БАО 13.10.2017 №1920
	
	Если ДокументВозврат.Доставки.Количество() Тогда		
		ДокументВозврат.Записать(РежимЗаписиДокумента.Запись);		
		Возврат ДокументВозврат.Ссылка;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
	ЭтаФорма.Элементы.Список.Обновить();
	
	
	Если ДокументВозврат.Доставки.Количество() Тогда		
		ДокументВозврат.Записать(РежимЗаписиДокумента.Запись);		
		Возврат ДокументВозврат.Ссылка;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

//Асеев 16.09.2020 (Задача № 4249)>>>
&НаКлиенте
Процедура ПоискДокументаНаКлиенте(НомерРейса)
	
	Док = ПоискДокументаНаСервере(НомерРейса);
	
	Если ЗначениеЗаполнено(Док) Тогда	
		Док.ПолучитьФорму("ФормаДокумента").Открыть();		
	ИначеЕсли ТумблерОтбора = 2 Или ТумблерОтбора = 3 Тогда 
		//УдаленноеЗакрытиеИлиПодтверждение
		ПоказатьПредупреждение(, "Не найден документ удаленного закрытия или его подтверждение! Смените режим отображения документов в списке!");
	КонецЕсли;	
	
КонецПроцедуры
//Асеев 16.09.2020 (Задача № 4249)<<<

&НаКлиенте
Процедура ПоискДокумента(Команда) Экспорт 
	
	//Асеев 16.09.2020 (Задача № 4249)>>>
	//Док = ПоискДокументаНаСервере(НомерРейса);
	//
	//Если ЗначениеЗаполнено(Док) Тогда	
	//	Док.ПолучитьФорму("ФормаДокумента").Открыть();		
	//КонецЕсли;	
	ПоискДокументаНаКлиенте(НомерРейса);
	//Асеев 16.09.2020 (Задача № 4249)<<<
	
КонецПроцедуры



&НаКлиенте
// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	
	// получим человеческий номер рейса
	НомерР = Сред(Данные, 4, 9);
	
	//Асеев 16.09.2020 (Задача № 4249)>>>
	//Док = ПоискДокументаНаСервере(НомерР);
	//
	//Если ЗначениеЗаполнено(Док) Тогда	
	//	Док.ПолучитьФорму("ФормаДокумента").Открыть();		
	//КонецЕсли;
	ПоискДокументаНаКлиенте(НомерР);
	//Асеев 16.09.2020 (Задача № 4249)<<<

	//ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
	
	//Если Данные <> Неопределено И Данные <> "" Тогда
	//	
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//	                      |	ВозвратЗаказовОтВодителя.Ссылка
	//	                      |ИЗ
	//	                      |	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
	//	                      |ГДЕ
	//	                      |	ВозвратЗаказовОтВодителя.Рейс.Номер = &Номер
	//	                      |	И ВозвратЗаказовОтВодителя.ПометкаУдаления = ЛОЖЬ");
	//	Запрос.УстановитьПараметр("", );
	//	Рез = Запрос.Выполнить().Выбрать();
	//	
	//	Если Рез.Количество() Тогда		
	//		Док = Рез.Ссылка;
	//		Док
	//	Иначе
	//		Возврат ;	
	//	КонецЕсли;		
	//
	//КонецЕсли;
	
	

КонецПроцедуры // ВнешнееСобытие()

&НаКлиенте
// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	//ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	//												Серия, Качество, Единица,
	//												Количество, ВалютаДокумента,
	//												Неопределено, мУказаниеСкладовВТЧ,
	//												ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	//Если      ИмяТекСтраницы = "Товары" Тогда
	//	ОбработкаПодбора(Товары, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
	//	ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
	//	ОбработкаПодбора(Услуги, СтруктураПодбора);
	//Иначе
	//	Предупреждение("На странице """
	//				   + ИмяТекСтраницы
	//				   + """ подбор номенклатуры не предусмотрен.");
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

&НаКлиенте
// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	//ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	//												Неопределено, Неопределено,
	//												Неопределено, 1,
	//												ВалютаДокумента, Номер,
	//												мУказаниеСкладовВТЧ,
	//												ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	//Если      ИмяТекСтраницы = "Товары" Тогда
	//	ОбработкаПодбора(Товары, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
	//	ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
	//	ОбработкаПодбора(Услуги, СтруктураПодбора);
	//Иначе
	//	Предупреждение("На странице """
	//				   + ИмяТекСтраницы
	//				   + """ подбор номенклатуры не предусмотрен.");
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

&НаКлиенте
// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	//Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
	//	Возврат Результат;
	//КонецЕсли;

	//ДисконтнаяКарта = Карта;
	//ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

&НаКлиенте
// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

&НаКлиенте
Функция СШКРейс(ВыбР) Экспорт
	Если ЗначениеЗаполнено(ВыбР) Тогда
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПечатьЧековПоДоставкам.Ссылка Как Док
		            |ИЗ
		            |	Документ.ПечатьЧековПоДоставкам КАК ПечатьЧековПоДоставкам
		            |ГДЕ
		            |	ПечатьЧековПоДоставкам.Рейс = &Рейс";
		Зап.УстановитьПараметр("Рейс", ВыбР);			
		Рез = Зап.Выполнить().Выгрузить();
		Если Не Рез.Количество() = 0 Тогда
			Док = Рез[0].Док;
			Ф = Док.ПолучитьФорму("ФормаДокумента");
			Ф.Открыть();
			Сообщить("Документ уже создан!");
		Иначе	
			Ф = ОткрытьФорму("Документ.ПечатьЧековПоДоставкам.ФормаОбъекта");			
			Ф.Объект.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
			Ф.Объект.Дата = ТекущаяДата();
			Ф.Объект.Рейс = ВыбР;
			Ф.ЗаполнитьДоставкиИТовары(Неопределено);
		КонецеСли;	
	Иначе
		Возврат Ложь;
	КонецеСли;	
	Возврат Истина;
КонецФункции	

//&НаКлиенте
//Функция СШКЗаказы(Стр) Экспорт
//	Если ЗначениеЗаполнено(Стр) Тогда
//		Зап = Новый Запрос;
//		Зап.Текст = "ВЫБРАТЬ
//		|	ПечатьЧековПоДоставкамДоставки.Ссылка.Ссылка Как Док
//		|ИЗ
//		|	Документ.ПечатьЧековПоДоставкам.Доставки КАК ПечатьЧековПоДоставкамДоставки
//		|ГДЕ
//		|	ПечатьЧековПоДоставкамДоставки.Доставка.Ссылка = &ВыбДост";
//		Зап.УстановитьПараметр("ВыбДост", Стр.Реализация.Ссылка);
//		
//		рез = Зап.Выполнить().Выгрузить();
//		
//		Если Не Рез.Количество() = 0 Тогда
//			Док = Рез[0].Док;
//			Ф = Док.ПолучитьФорму("ФормаДокумента");
//			Ф.Открыть();
//			Сообщить("Документ уже создан!");
//		Иначе	
//			Ф = ОткрытьФорму("Документ.ПечатьЧековПоДоставкам.ФормаОбъекта");
//			Ф.Объект.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
//			Ф.Объект.Дата = ТекущаяДата();
//			Ф.ДобавитьСтрокуСамовывоза(Стр.Реализация);
//			
//			
//		КонецеСли;	
//	Иначе
//		Возврат Ложь;
//	КонецеСли;	
//	Возврат истина;
//КонецФункции	

&НаКлиенте
// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

&НаКлиенте
Процедура ПриЗакрытии()
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
КонецПроцедуры


Функция ПроверкаНаЧастичку(ДокДанныеМП)
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура,
	                      |	СУММА(ДанныеЗаказаВодителяДоставленныеТовары.КоличествоДоставлено) КАК КоличествоДоставлено
	                      |ПОМЕСТИТЬ ВТ_Данные
	                      |ИЗ
	                      |	Документ.ДанныеЗаказаВодителя.ДоставленныеТовары КАК ДанныеЗаказаВодителяДоставленныеТовары
	                      |ГДЕ
	                      |	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.Ссылка = &СсылкаМП
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслугТовары.Номенклатура,
	                      |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
	                      |ПОМЕСТИТЬ ВТ_Реализация
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка.Ссылка = &СсылкаРеализация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РеализацияТоваровУслугТовары.Номенклатура
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
	                      |	СУММА(РеализацияТоваровУслугПодарочныеПозиции.Количество)
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	                      |ГДЕ
	                      |	РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Ссылка = &СсылкаРеализация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Данные.Номенклатура,
	                      |	ВТ_Реализация.Количество - ВТ_Данные.КоличествоДоставлено КАК КоличествоНеДоставлено
	                      |ИЗ
	                      |	ВТ_Данные КАК ВТ_Данные
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реализация КАК ВТ_Реализация
	                      |		ПО ВТ_Данные.Номенклатура = ВТ_Реализация.Номенклатура");
	Запрос.УстановитьПараметр("СсылкаМП", ДокДанныеМП);
	Запрос.УстановитьПараметр("СсылкаРеализация", ДокДанныеМП.Реализация);
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		Если Рез.КоличествоНеДоставлено = NULL Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Рез.КоличествоНеДоставлено > 0 Тогда		
			Возврат	Истина;		
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	

КонецФункции // ()

&НаКлиенте
Процедура ПечатьАПП(Команда)
	
	ПечатныйДокумент = Новый ТабличныйДокумент;
	ПечатныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатныйДокумент.Автомасштаб = Истина;
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Объект = ТекДанные.Ссылка;
	ПечатьНаСервере(ПечатныйДокумент, Объект);
	
	
	ПечатныйДокумент.ФиксацияСверху = 3;
	ПечатныйДокумент.ПолеСлева = 3;

	ПечатныйДокумент.ОтображатьЗаголовки = Ложь;
	ПечатныйДокумент.ОтображатьСетку     = Ложь;
	ПечатныйДокумент.ТолькоПросмотр      = Истина;
	
	ПечатныйДокумент.Показать();
	
КонецПроцедуры

Процедура ПечатьНаСервере(ПечатныйДокумент, Объект)

	//ДокОбъект = ДанныеФормыВЗначение("Список", ); 
	
	ДокОбъект = Объект.ПолучитьОбъект(); 
	ДокОбъект.ПечатьАПП(ПечатныйДокумент);


КонецПроцедуры                                          

//+++ БАО 22.08.2017 №1730
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	bao.ДобавитьОтборДинСпискаПоДоступнымПользователюТерминалам(Список);
	
	//Асеев 16.09.2020 (Задача № 4247)>>>
	УстановитьНадписьТумблерОтбора();
	//Асеев 16.09.2020 (Задача № 4247)<<<
	
КонецПроцедуры

//&НаСервере
//Процедура СоздатьДокументПередачаЗаказовНаВозвратНаСервере()
//	
//	До
//	
//КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПередачаЗаказовНаВозврат(Команда)
	
	ОткрытьФорму("Документ.ПередачаЗаказовНаВозврат.Форма.ФормаДокумента", Новый Структура("Ключ", ПредопределенноеЗначение("Документ.ПередачаЗаказовНаВозврат.ПустаяСсылка")));
	
	//СоздатьДокументПередачаЗаказовНаВозвратНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыНаВозврат(Команда)
	
	ОткрытьФорму("Документ.ПередачаЗаказовНаВозврат.Форма.ФормаСписка");
	
КонецПроцедуры

//Асеев 16.09.2020 (Задача № 4247)>>>
&НаСервере
Процедура УстановитьНадписьТумблерОтбора()
	
	СписокВыбора = Элементы.ТумблерОтбора.СписокВыбора;
	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ТумблерОтбора);
	Если ЭлементСписка <> Неопределено Тогда
		Элементы.НадписьТумблерОтбора.Заголовок = ЭлементСписка.Представление;
	Иначе
		Элементы.НадписьТумблерОтбора.Заголовок = "Неизвестный отбор";
	КонецЕсли;
	Если ТумблерОтбора = 2 Или ТумблерОтбора = 3 Тогда
		//УдаленноеЗакрытие Или Подтверждение
		Элементы.НадписьТумблерОтбора.ЦветТекста = WebЦвета.Синий;
	Иначе
		Элементы.НадписьТумблерОтбора.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТумблерОтбораПриИзмененииНаСервере()
	
	ИмяОтбора = "ТумблерОтбора";
	
	ОбщегоНазначенияКлиентСервер83.УдалитьЭлементыГруппыОтбора(Список.Отбор,, ИмяОтбора);
	
	Если ТумблерОтбора = 1 Тогда
		//ФактСдача
		ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер83.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, ИмяОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "УдаленноеЗакрытие", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "ДокументУдаленногоЗакрытия",, ВидСравненияКомпоновкиДанных.НеЗаполнено,, Истина);
	ИначеЕсли ТумблерОтбора = 2 Тогда
		//УдаленноеЗакрытие
		ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер83.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, ИмяОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "УдаленноеЗакрытие", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ИначеЕсли ТумблерОтбора = 3 Тогда
		//Подтверждение
		ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер83.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, ИмяОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "РежимПодтвержденияУдаленногоЗакрытия", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	КонецЕсли;
	
	УстановитьНадписьТумблерОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ТумблерОтбораПриИзменении(Элемент)
	ТумблерОтбораПриИзмененииНаСервере();
КонецПроцедуры
//Асеев 16.09.2020 (Задача № 4247)<<<

//--- БАО 22.08.2017 №1730

