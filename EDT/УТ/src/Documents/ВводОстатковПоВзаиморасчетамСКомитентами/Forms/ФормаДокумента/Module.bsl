
&НаКлиенте
Процедура ЗаполнитьТекущимиОстатками(Команда)
	
	ЗаполнитьТекущимиОстаткамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиОстаткамиБезЗаказов(Команда)
	
	ЗаполнитьТекущимиОстаткамиБезЗаказовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущимиОстаткамиНаСервере()
	
	Объект.СписаниеОстатковПоЗаказам.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКомитентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКомитентамиОстатки.Комитент КАК Комитент,
		|	ВзаиморасчетыСКомитентамиОстатки.ДатаВозникновенияЗадолженности КАК ДатаВозникновенияЗадолженности,
		|	ВзаиморасчетыСКомитентамиОстатки.ТипЗаказа КАК ТипЗаказа,
		|	ВзаиморасчетыСКомитентамиОстатки.Заказ КАК Заказ,
		|	-ВзаиморасчетыСКомитентамиОстатки.СуммаОстаток КАК Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) КАК ВидДвижения
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКомитентамиПоЗаказам.Остатки КАК ВзаиморасчетыСКомитентамиОстатки
		|ГДЕ
		//|	ВзаиморасчетыСКомитентамиОстатки.СуммаОстаток <> 0
		|	ВЫБОР
		|			КОГДА &Комитент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВзаиморасчетыСКомитентамиОстатки.Комитент = &Комитент
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Комитент", Объект.Комитент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.СписаниеОстатковПоЗаказам.Загрузить(РезультатЗапроса.Выгрузить());
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущимиОстаткамиБезЗаказовНаСервере()
	
	//СтатьяРасчетовСКомитентами
	
	Объект.СписаниеОстатков.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКомитентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКомитентамиОстатки.Комитент КАК Комитент,
		|	ВзаиморасчетыСКомитентамиОстатки.ДатаВозникновенияЗадолженности КАК ДатаВозникновенияЗадолженности,
		|	-ВзаиморасчетыСКомитентамиОстатки.СуммаОстаток КАК Сумма,
		|	ВзаиморасчетыСКомитентамиОстатки.СтатьяРасчетовСКомитентами КАК СтатьяРасчетовСКомитентами,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) КАК ВидДвижения
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКомитентами.Остатки КАК ВзаиморасчетыСКомитентамиОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Комитент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВзаиморасчетыСКомитентамиОстатки.Комитент = &Комитент
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Комитент", Объект.Комитент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.СписаниеОстатков.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ПродублироватьВведенныеЗаписиПоЗаказамНаСервере()
	
	Объект.ВводОстатков.Очистить();
	Объект.СписаниеОстатков.Очистить();
	
	ЗаписиВводаОстатков = Объект.ВводОстатковПоЗаказам.Выгрузить();
	ЗаписиВводаОстатков.Свернуть("Организация, Комитент, ДатаВозникновенияЗадолженности, Корректировка, ВидДвижения", "Сумма");	
	ЗаписиВводаОстатков.Колонки.Добавить("СтатьяРасчетовСКомитентами", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасчетовСКомитентами"));
	ЗаписиВводаОстатков.ЗаполнитьЗначения(Справочники.СтатьиРасчетовСКомитентами.ВыручкаПоЗаказам, "СтатьяРасчетовСКомитентами");

	Объект.ВводОстатков.Загрузить(ЗаписиВводаОстатков);
	
	
	ЗаписиСписанияОстатков = Объект.СписаниеОстатковПоЗаказам.Выгрузить();
	ЗаписиСписанияОстатков.Свернуть("Организация, Комитент, ДатаВозникновенияЗадолженности, Корректировка, ВидДвижения", "Сумма");	
	ЗаписиСписанияОстатков.Колонки.Добавить("СтатьяРасчетовСКомитентами", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасчетовСКомитентами"));
	ЗаписиСписанияОстатков.ЗаполнитьЗначения(Справочники.СтатьиРасчетовСКомитентами.ВыручкаПоЗаказам, "СтатьяРасчетовСКомитентами");

	Объект.СписаниеОстатков.Загрузить(ЗаписиСписанияОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ПродублироватьВведенныеЗаписиПоЗаказам(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПродублироватьЗаписиПоЗаказам", ЭтотОбъект), "При дублировании записей табл.части ВводОстатков и СписаниеОстатков будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродублироватьЗаписиПоЗаказам(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса =КодВОзвратаДиалога.Да Тогда
		
		ПродублироватьВведенныеЗаписиПоЗаказамНаСервере();

	Конецесли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодборЗаказов(Команда)
	
	СтруктураОтбора = Новый Структура("ВладелецТовара", Объект.Комитент); 
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Документ.ВводОстатковПоВзаиморасчетамСКомитентами.Форма.ФормаПодбораЗаказов", ПараметрыОткрытия, Элементы.ВводОстатковПоЗаказам,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	//ПодборЗаказовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодборЗаказовНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказам(Команда)
	
	Объект.ВводОстатков.Очистить();
	
	Для каждого ТекСтрока Из Объект.ВводОстатковПоЗаказам Цикл
		НС = Объект.ВводОстатков.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ТекСтрока);
		НС.СтатьяРасчетовСКомитентами = ПредопределенноеЗначение("Справочник.СтатьиРасчетовСКомитентами.ВыручкаПоЗаказам");
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводОстатковПоЗаказамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеСтроки = ПолучитьДанныеЗаказа(ВыбранноеЗначение);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Заказ) Тогда
		Сообщить("Не найдено данных по заказу "+ВыбранноеЗначение);
		Возврат;
	КонецЕсли; 
	
	НС = Объект.ВводОстатковПоЗаказам.Добавить();
	ЗаполнитьЗначенияСвойств(НС, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЗаказа(Заказ)

	СтруктураПолей = Новый Структура(); 
	Для каждого Колонка Из Объект.СписаниеОстатковПоЗаказам.Выгрузить().Колонки Цикл
		СтруктураПолей.Вставить(Колонка.Имя);	
	КонецЦикла; 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВзаиморасчетыСКомитентамиПоЗаказамОбороты.Период КАК Период,
		|	ВзаиморасчетыСКомитентамиПоЗаказамОбороты.Регистратор КАК Регистратор,
		|	ВзаиморасчетыСКомитентамиПоЗаказамОбороты.Организация КАК Организация,
		|	ВзаиморасчетыСКомитентамиПоЗаказамОбороты.Комитент КАК Комитент,
		|	ВзаиморасчетыСКомитентамиПоЗаказамОбороты.ДатаВозникновенияЗадолженности КАК ДатаВозникновенияЗадолженности,
		|	ВзаиморасчетыСКомитентамиПоЗаказамОбороты.ТипЗаказа КАК ТипЗаказа,
		|	ВзаиморасчетыСКомитентамиПоЗаказамОбороты.Заказ КАК Заказ,
		|	ВзаиморасчетыСКомитентамиПоЗаказамОбороты.СуммаОборот КАК Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) КАК ВидДвижения
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКомитентамиПоЗаказам.Обороты(, , Регистратор, Заказ = &Заказ) КАК ВзаиморасчетыСКомитентамиПоЗаказамОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПолей, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат СтруктураПолей;
	
КонецФункции // ()
 