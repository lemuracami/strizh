
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Регион = ПараметрыСеанса.ТерминалДоставки;
		Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Объект.ПериодРасчета = КонецМесяца(ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
КонецФункции

&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ТекущаяДата());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	НовОбъект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		НовОбъект = НовОбъект[МассивИмен[Сч]]
	КонецЦикла;
	
	Возврат НовОбъект[ПоследнееПоле];
	
КонецФункции

&НаКлиенте
Процедура УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение, ТолькоЕслиНеЗаполнен = Ложь) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	НовОбъект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		НовОбъект = НовОбъект[МассивИмен[Сч]]
	КонецЦикла;
	Если НЕ ТолькоЕслиНеЗаполнен ИЛИ НЕ ЗначениеЗаполнено(НовОбъект[ПоследнееПоле]) Тогда
		НовОбъект[ПоследнееПоле] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = НачалоМесяца(Значение);//в документе храним конец месяца
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	//УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, КонецМесяца(Значение));//в документе храним конец месяца
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		//УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, КонецМесяца(Значение));//в документе храним конец месяца
		Представление = ПолучитьПредставлениеМесяца(Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = НачалоМесяца(Значение);//в документе храним конец месяца
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ТекущаяДата());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.зпНачислениеЗП.Форма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаСтрокойПриИзменении(Элемент)
	ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРасчета", "ПериодРасчетаСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРасчета", "ПериодРасчетаСтрокой", , );
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = НачалоМесяца(Значение);//в документе храним конец месяца
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ТекущаяДата());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		//УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, КонецМесяца(Значение));//в документе храним конец месяца
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
		
		Модифицированность = Истина;
	 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРасчета", "ПериодРасчетаСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПериодРасчетаСтрокой = ПолучитьПредставлениеМесяца(Объект.ПериодРасчета);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.ПериодРасчета));
	Запрос.УстановитьПараметр("Регион", Объект.Регион);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Рейс.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Рейсы
	|ИЗ
	|	Документ.Рейс КАК Рейс
	|ГДЕ
	|	Рейс.ДатаРейса МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Рейс.ТерминалДоставки = &Регион
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоЗаказовРасчетПроцентаВыполняемости.Рейс КАК Рейс,
	|	СУММА(КоличествоЗаказовРасчетПроцентаВыполняемости.КоличествоЗаказов) КАК КоличествоЗаказов
	|ПОМЕСТИТЬ ВТ_ЗаказыПроцентаВыполняемости
	|ИЗ
	|	РегистрСведений.КоличествоЗаказовРасчетПроцентаВыполняемости КАК КоличествоЗаказовРасчетПроцентаВыполняемости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО КоличествоЗаказовРасчетПроцентаВыполняемости.Рейс = ВТ_Рейсы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоЗаказовРасчетПроцентаВыполняемости.Рейс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.Роль КАК Роль,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ВидЗанятости КАК ВидЗанятости,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.Рейс КАК Рейс,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.СоставЭкипажа КАК СоставЭкипажа,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ВыполненоЗаказовПроцент КАК ПроцентВыполненияЗаказов,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.КоличествоЗаказовВыполненных + зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.КоличествоЗаказовОтказСЗаездом + зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.КоличествоЗаказовПереносСЗаездом КАК КоличествоЗаказовВыполненныхОтказыПереносы,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ОбщееКоличествоЗаказов КАК ОбщееКоличествоЗаказов,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.СпособРасчетаПроцентаВыполняемости КАК СпособРасчетаПроцентаВыполняемости
	|ПОМЕСТИТЬ ВТ_зпИсходныеДанныеРасчетаЗППоРейсам
	|ИЗ
	|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоРейсам.СрезПоследних(
	|			,
	|			Рейс В
	|				(ВЫБРАТЬ
	|					ВТ_Рейсы.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_Рейсы КАК ВТ_Рейсы)) КАК зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_ДатыРейсов.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.Рейс) КАК Рейс
	|ПОМЕСТИТЬ ВТ_ПоследниеРейсы
	|ИЗ
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам КАК ВТ_зпИсходныеДанныеРасчетаЗППоРейсам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ФизЛицо КАК ФизЛицо,
	|			МАКСИМУМ(ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.Рейс.ДатаРейса) КАК ДатаРейса
	|		ИЗ
	|			ВТ_зпИсходныеДанныеРасчетаЗППоРейсам КАК ВТ_зпИсходныеДанныеРасчетаЗППоРейсам
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ФизЛицо) КАК ВЗ_ДатыРейсов
	|		ПО ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ФизЛицо = ВЗ_ДатыРейсов.ФизЛицо
	|			И ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.Рейс.ДатаРейса = ВЗ_ДатыРейсов.ДатаРейса
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_ДатыРейсов.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.Рейс КАК Рейс,
	|	зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.ОсновноеНачисление КАК ОсновноеНачисление,
	|	зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.СуммаИтого КАК СуммаНачисленнойЗП,
	|	зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.СуммаМинимальнойСтавки КАК СуммаМинимальнойСтавки,
	|	зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.СуммаМинимальнойСтавки - зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.СуммаИтого КАК ДоплатаДоМинимальнойСтавки
	|ПОМЕСТИТЬ ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП
	|ИЗ
	|	РегистрСведений.зпИсходныеДанныеРасчетаМинимальнойЗП.СрезПоследних(
	|			,
	|			Рейс В
	|				(ВЫБРАТЬ
	|					ВТ_Рейсы.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_Рейсы КАК ВТ_Рейсы)) КАК зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних
	|ГДЕ
	|	зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.ПрименяетсяМинимальнаяСтавка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.ДатаРасчета КАК ДатаРасчета,
	|	зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.Ссылка КАК Документ,
	|	зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.ФизЛицо КАК ФизЛицо,
	|	зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	СУММА(зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ДополнительныеНачисленияУдержания
	|ИЗ
	|	Документ.зпФиксацияДополнительныхНачисленийУдержаний.НачисленияУдержания КАК зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.зпФиксацияДополнительныхНачисленийУдержаний КАК зпФиксацияДополнительныхНачисленийУдержаний
	|		ПО (зпФиксацияДополнительныхНачисленийУдержаний.ПериодРасчета МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|			И (зпФиксацияДополнительныхНачисленийУдержаний.Регион = &Регион)
	|			И (зпФиксацияДополнительныхНачисленийУдержаний.Проведен)
	|			И зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.Ссылка = зпФиксацияДополнительныхНачисленийУдержаний.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.ФизЛицо,
	|	зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.НачислениеУдержание,
	|	зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.Ссылка,
	|	зпФиксацияДополнительныхНачисленийУдержанийНачисленияУдержания.ДатаРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДополнительныеНачисленияУдержания.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизЛица
	|ИЗ
	|	ВТ_ДополнительныеНачисленияУдержания КАК ВТ_ДополнительныеНачисленияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_МаксПериодыПриема
	|ИЗ
	|	РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФизЛица КАК ВТ_ФизЛица
	|		ПО (РаботникиОрганизации.Период <= &ОкончаниеПериода)
	|			И РаботникиОрганизации.ФизЛицо = ВТ_ФизЛица.ФизЛицо
	|			И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.Организация КАК Организация,
	|	РаботникиОрганизации.ОсновноеНачисление КАК ОсновноеНачисление
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксПериодыПриема КАК ВТ_МаксПериодыПриема
	|		ПО РаботникиОрганизации.Период = ВТ_МаксПериодыПриема.Период
	|			И РаботникиОрганизации.ФизЛицо = ВТ_МаксПериодыПриема.ФизЛицо
	|			И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(ВложенныйЗапрос.Тариф) КАК Тариф,
	|	ВложенныйЗапрос.Рейс КАК Рейс,
	|	ВложенныйЗапрос.Начисление КАК Начисление,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.ЧасовОтработано) КАК ЧасовОтработано,
	|	СУММА(ВложенныйЗапрос.Километраж) КАК Километраж,
	|	ВложенныйЗапрос.ДокументНачисления КАК ДокументНачисления,
	|	ВложенныйЗапрос.ДатаРасчета КАК ДатаРасчета
	|ПОМЕСТИТЬ ВТ_Расчет
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.ФизЛицо КАК ФизЛицо,
	|		ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.ОсновноеНачисление КАК Тариф,
	|		ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.Рейс КАК Рейс,
	|		ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаДоМинимальногоРазмераОплаты) КАК Начисление,
	|		ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.ДоплатаДоМинимальнойСтавки КАК Сумма,
	|		0 КАК ЧасовОтработано,
	|		0 КАК Километраж,
	|		NULL КАК ДокументНачисления,
	|		NULL КАК ДатаРасчета
	|	ИЗ
	|		ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП КАК ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ФизЛицо,
	|		зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Начисление,
	|		зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Рейс,
	|		ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоставкаЗаказа),
	|		зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.СуммаРасчетаЗП,
	|		0,
	|		0,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(
	|				,
	|				Рейс В
	|					(ВЫБРАТЬ
	|						ВТ_Рейсы.Ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_Рейсы КАК ВТ_Рейсы)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ФизЛицо,
	|		зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ОсновноеНачисление,
	|		зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.Рейс,
	|		зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.Начисление,
	|		зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.СуммаОплаты,
	|		зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ЧасовОтработано,
	|		0,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.зпИсходныеДанныеРасчетаЗПЧасы.СрезПоследних(
	|				,
	|				Рейс В
	|					(ВЫБРАТЬ
	|						ВТ_Рейсы.Ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_Рейсы КАК ВТ_Рейсы)) КАК зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.ФизЛицо,
	|		зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.ОсновноеНачисление,
	|		зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.Рейс,
	|		зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.Начисление,
	|		зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.Сумма,
	|		0,
	|		зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.ТарифицируемыйКилометражПоРейсу,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.СрезПоследних(
	|				,
	|				Рейс В
	|					(ВЫБРАТЬ
	|						ВТ_Рейсы.Ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_Рейсы КАК ВТ_Рейсы)) КАК зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ФизЛицо,
	|		зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ОсновноеНачисление,
	|		зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Рейс,
	|		зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Начисление,
	|		зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Сумма,
	|		0,
	|		0,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.СрезПоследних(
	|				,
	|				Рейс В
	|					(ВЫБРАТЬ
	|						ВТ_Рейсы.Ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_Рейсы КАК ВТ_Рейсы)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ДополнительныеНачисленияУдержания.ФизЛицо,
	|		ВТ_Организации.ОсновноеНачисление,
	|		ВТ_ПоследниеРейсы.Рейс,
	|		ВТ_ДополнительныеНачисленияУдержания.НачислениеУдержание,
	|		ВТ_ДополнительныеНачисленияУдержания.Сумма,
	|		0,
	|		0,
	|		ВТ_ДополнительныеНачисленияУдержания.Документ,
	|		ВТ_ДополнительныеНачисленияУдержания.ДатаРасчета
	|	ИЗ
	|		ВТ_ДополнительныеНачисленияУдержания КАК ВТ_ДополнительныеНачисленияУдержания
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеРейсы КАК ВТ_ПоследниеРейсы
	|			ПО ВТ_ДополнительныеНачисленияУдержания.ФизЛицо = ВТ_ПоследниеРейсы.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
	|			ПО ВТ_ДополнительныеНачисленияУдержания.ФизЛицо = ВТ_Организации.ФизЛицо
	|	ГДЕ
	|		ВТ_ДополнительныеНачисленияУдержания.НачислениеУдержание ССЫЛКА Справочник.зпНачисления) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Рейс,
	|	ВложенныйЗапрос.Начисление,
	|	ВложенныйЗапрос.ДокументНачисления,
	|	ВложенныйЗапрос.ДатаРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_Расчет.ДатаРасчета, ВТ_Расчет.Рейс.ДатаРейса) КАК ДатаРасчета,
	|	ВТ_Расчет.ФизЛицо КАК ФизЛицо,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.Роль КАК РольСотрудника,
	|	ВТ_Расчет.Тариф КАК Тариф,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ВидЗанятости КАК ВидЗанятости,
	|	ВТ_Расчет.Рейс КАК Рейс,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.СоставЭкипажа КАК СоставЭкипажа,
	|	ВТ_Расчет.Начисление КАК Начисление,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ПроцентВыполненияЗаказов КАК ПроцентВыполненияЗаказов,
	|	ВТ_Расчет.Сумма КАК Сумма,
	|	ВТ_Расчет.ЧасовОтработано КАК ЧасовОтработано,
	|	ВТ_Расчет.Километраж КАК Километраж,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ОбщееКоличествоЗаказов КАК ОбщееКоличествоЗаказов,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.СпособРасчетаПроцентаВыполняемости, ЗНАЧЕНИЕ(Справочник.СпособыРасчетаПроцентаВыполняемости.ПустаяСсылка)) В (ЗНАЧЕНИЕ(Справочник.СпособыРасчетаПроцентаВыполняемости.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.СпособыРасчетаПроцентаВыполняемости.Способ2023))
	|			ТОГДА ВТ_ЗаказыПроцентаВыполняемости.КоличествоЗаказов
	|		ИНАЧЕ ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.КоличествоЗаказовВыполненныхОтказыПереносы
	|	КОНЕЦ КАК КоличествоЗаказовВыполненныхПоАлгоритмуРасчета,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.СпособРасчетаПроцентаВыполняемости КАК СпособРасчетаПроцентаВыполняемости,
	|	ВТ_Расчет.ДокументНачисления КАК ДокументНачисления
	|ИЗ
	|	ВТ_Расчет КАК ВТ_Расчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_зпИсходныеДанныеРасчетаЗППоРейсам КАК ВТ_зпИсходныеДанныеРасчетаЗППоРейсам
	|		ПО ВТ_Расчет.ФизЛицо = ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ФизЛицо
	|			И ВТ_Расчет.Рейс = ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказыПроцентаВыполняемости КАК ВТ_ЗаказыПроцентаВыполняемости
	|		ПО ВТ_Расчет.Рейс = ВТ_ЗаказыПроцентаВыполняемости.Рейс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Расчет.ФизЛицо.Наименование,
	|	ЕСТЬNULL(ВТ_Расчет.ДатаРасчета, ВТ_Расчет.Рейс.ДатаРейса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДополнительныеНачисленияУдержания.ДатаРасчета КАК ДатаРасчета,
	|	ВТ_ДополнительныеНачисленияУдержания.ФизЛицо КАК ФизЛицо,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.Роль КАК РольСотрудника,
	|	ВТ_Организации.ОсновноеНачисление КАК Тариф,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ВидЗанятости КАК ВидЗанятости,
	|	ВТ_ПоследниеРейсы.Рейс КАК Рейс,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.СоставЭкипажа КАК СоставЭкипажа,
	|	ВТ_ДополнительныеНачисленияУдержания.НачислениеУдержание КАК Удержание,
	|	ВТ_ДополнительныеНачисленияУдержания.Сумма КАК Сумма,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ВТ_ДополнительныеНачисленияУдержания.Документ КАК ДокументУдержания
	|ИЗ
	|	ВТ_ДополнительныеНачисленияУдержания КАК ВТ_ДополнительныеНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеРейсы КАК ВТ_ПоследниеРейсы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_зпИсходныеДанныеРасчетаЗППоРейсам КАК ВТ_зпИсходныеДанныеРасчетаЗППоРейсам
	|			ПО ВТ_ПоследниеРейсы.ФизЛицо = ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.ФизЛицо
	|				И ВТ_ПоследниеРейсы.Рейс = ВТ_зпИсходныеДанныеРасчетаЗППоРейсам.Рейс
	|		ПО ВТ_ДополнительныеНачисленияУдержания.ФизЛицо = ВТ_ПоследниеРейсы.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
	|		ПО ВТ_ДополнительныеНачисленияУдержания.ФизЛицо = ВТ_Организации.ФизЛицо
	|ГДЕ
	|	ВТ_ДополнительныеНачисленияУдержания.НачислениеУдержание ССЫЛКА Справочник.зпУдержания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДополнительныеНачисленияУдержания.ФизЛицо.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.Рейс.ДатаРейса КАК ДатаРасчета,
	|	ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.ФизЛицо КАК ФизЛицо,
	|	ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.СуммаНачисленнойЗП КАК СуммаНачисленнойЗП,
	|	ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.СуммаМинимальнойСтавки КАК СуммаМинимальнойСтавки,
	|	ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.ДоплатаДоМинимальнойСтавки КАК ДоплатаДоМинимальнойСтавки
	|ИЗ
	|	ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП КАК ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_зпИсходныеДанныеРасчетаМинимальнойЗП.ФизЛицо.Наименование,
	|	ДатаРасчета";
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Объект.Начисления.Загрузить(РезультатПакета[10].Выгрузить());
	Объект.Удержания.Загрузить(РезультатПакета[11].Выгрузить());
	Объект.ПрименяемыеМинимальныеСтавки.Загрузить(РезультатПакета[12].Выгрузить());
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	ЗаполнитьДокументНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборПоТекущемуФизЛицуНаСервере()
	
	ТекущаяКнопка = Элементы.НачисленияОтборПоТекущемуФизЛицу;
	Если ТекущаяКнопка.Пометка Тогда
		//произойдет отжатие
		Элементы.Начисления.ОтборСтрок = Неопределено;
		Элементы.Удержания.ОтборСтрок = Неопределено;
		Элементы.ПрименяемыеМинимальныеСтавки.ОтборСтрок = Неопределено;
		ТекущаяКнопка.Пометка = Ложь;
		ТекущаяКнопка.Заголовок = "Отбор по текущему ФЛ";
	Иначе
		//произойдет нажатие
		ТекСтрока = Элементы.Начисления.ТекущаяСтрока;
		Если ТекСтрока <> Неопределено Тогда
			СтрокаНачислений = Объект.Начисления.НайтиПоИдентификатору(ТекСтрока);
			СтруктураОтбора = Новый ФиксированнаяСтруктура("ФизЛицо", СтрокаНачислений.ФизЛицо);
			Элементы.Начисления.ОтборСтрок = СтруктураОтбора;
			Элементы.Удержания.ОтборСтрок = СтруктураОтбора;
			Элементы.ПрименяемыеМинимальныеСтавки.ОтборСтрок = СтруктураОтбора;
			ТекущаяКнопка.Пометка = Истина;
			ТекущаяКнопка.Заголовок = СтрокаНачислений.ФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТекущемуФизЛицу(Команда)
	ОтборПоТекущемуФизЛицуНаСервере();
КонецПроцедуры
