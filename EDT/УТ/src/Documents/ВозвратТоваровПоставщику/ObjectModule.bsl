Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мКурсДокумента;
Перем мКратностьДокумента;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем мУдалятьДвижения;

Перем мПартнерУведомлен;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА



Функция ДобавитьТоварыПоЗакрытиюЗаказов(ДокументЗакрытия = Неопределено, ВыбЗаказ = Неопределено) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ЗакрытиеЗаказовТовары.Номенклатура,
	|	СУММА(ЗакрытиеЗаказовТовары.КоличествоВозвращено) КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументПоступления,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.Склад,
	|	ЗакрытиеЗаказовТовары.Ссылка.Ссылка КАК ЗакрытиеЗаказов,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК ВнешнийНомерЗаказа,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДоставки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(новаМестнаяДоставка.Ссылка, 1) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Самовывоз)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|	КОНЕЦ КАК ТипЗаказа,
	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество,
	|	новаМестнаяДоставка.Ссылка КАК Доставка
	|ИЗ
	|	Документ.ЗакрытиеЗаказов.Товары КАК ЗакрытиеЗаказовТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ЗакрытиеЗаказовТовары.Номенклатура.Ссылка = ПоступлениеТоваровУслугТовары.Номенклатура.Ссылка
	|			И ЗакрытиеЗаказовТовары.Доставка.Номер = ПоступлениеТоваровУслугТовары.Ссылка.Номер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|			ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	|		ПО (ВЫРАЗИТЬ(ЗакрытиеЗаказовТовары.Реализация КАК Документ.РеализацияТоваровУслуг).Ссылка = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	ЗакрытиеЗаказовТовары.КоличествоВозвращено <> 0
	|	";
	
	Если ДокументЗакрытия <> Неопределено Тогда
		Зап.Текст = Зап.Текст + " И ЗакрытиеЗаказовТовары.Ссылка.Ссылка = &ЗакрытиеЗаказов";
		Зап.УстановитьПараметр("ЗакрытиеЗаказов", ДокументЗакрытия.Ссылка);			
	КонецеСли;
	
	
	Если ВыбЗаказ <> Неопределено Тогда
		Зап.Текст = Зап.Текст + " И ВЫРАЗИТЬ(ЗакрытиеЗаказовТовары.Реализация КАК Документ.РеализацияТоваровУслуг).Ссылка = &ВыбЗаказ";
		Зап.УстановитьПараметр("ВыбЗаказ", ВыбЗаказ.Ссылка);			
	КонецеСли;
	
	Зап.Текст = Зап.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ЗакрытиеЗаказовТовары.Номенклатура,
	|	ЗакрытиеЗаказовТовары.Ссылка.Ссылка,
	|	ПоступлениеТоваровУслугТовары.Склад,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа,
	|	РеализацияТоваровУслуг.Дата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(новаМестнаяДоставка.Ссылка, 1) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Самовывоз)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|	КОНЕЦ,
	|	новаМестнаяДоставка.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Ссылка.Номер,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки";
	
	
	Рез = Зап.Выполнить().Выгрузить();
	
	
	
	
	ДобавилиТовар = Ложь;
	Для Каждого Тек Из Рез Цикл
		Струк = Новый Структура;
		Струк.Вставить("ДокументПоступления", Тек.ДокументПоступления);
		Струк.Вставить("Номенклатура", Тек.Номенклатура);
		
		Най = Товары.НайтиСтроки(Струк);
		Если Най.Количество() <> 0 Тогда
			#Если Клиент Тогда
				Сообщить("Товар " + СокрЛП(Тек.номенклатура.Наименование) + " по заказу № " + СокрЛП(Тек.ДокументПоступления) + " уже присутствует в документе!");
			#КонецеСли	
			Продолжить;
		КонецеСли;
		
		Нов = Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(Нов, Тек);
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Нов, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Нов, ЭтотОбъект);
		
		
		Если Не ЗначениеЗаполнено(Тек.Доставка) Тогда
			Нов.ПричинаВозврата = Перечисления.ПричинаВозврата.Возврат;
		Иначе
			Струк = Новый Структура;
			Струк.Вставить("Доставка", Тек.Доставка.Ссылка);
			
			Зап = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(КонецДня(Дата), Струк);
			Если Зап.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена Тогда
				Нов.ПричинаВозврата = Перечисления.ПричинаВозврата.Возврат;
			ИначеЕсли Зап.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
				Нов.ПричинаВозврата = Перечисления.ПричинаВозврата.Отказ;
			ИначеЕсли Зап.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
				Если Зап.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.НетНаСкладе Или Не ЗначениеЗаполнено(Зап.ПричинаНеВыполнения) Или Зап.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Тогда
					Нов.ПричинаВозврата = Перечисления.ПричинаВозврата.Возврат;				
				ИначеЕсли Зап.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда Или Зап.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
					Нов.ПричинаВозврата = Перечисления.ПричинаВозврата.Отказ;				
				КонецеСли;
			Иначе
				Нов.ПричинаВозврата = Перечисления.ПричинаВозврата.Возврат;				
			КонецеСли;	
		КонецеСли;	
		
		Нов.КоличествоМестТовара = 1;
		
		Если ЗначениеЗаполнено(Нов.ДокументПоступления) Тогда
			Струк = Новый Структура;
			Струк.Вставить("Доставка", БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Нов.ДокументПоступления.Номер).Ссылка);
			Най = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(КонецДня(КонецДня(Дата)), Струк);
			Если Най.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
				Нов.СтатусДоставки = 3;
			ИначеЕсли Най.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена Тогда
				Нов.СтатусДоставки = 2;
			КонецЕсли;	
			//Если РезУже <> Неопределено Тогда
			//	Най = РезУже.Найти(СтрокаТабличнойЧасти.ДокументПоступления);
			//	Если Най <> Неопределено Тогда
			//		СтрокаТабличнойЧасти.СтатусДоставки = 1;
			//	КонецеСли;	
			//КонецеСли;	
		КонецеСли;	
		
		
		ДобавилиТовар = истина;
	КонецЦикла;	
	
	
	Если ДобавилиТовар Тогда
		МасД = Товары.ВыгрузитьКолонку("ДокументПоступления");
		Зап2 = Новый Запрос;
		Зап2.Текст = "ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.ДокументПоступления.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.ДокументПоступления.Ссылка В(&МасДок)";
		Зап2.УстановитьПараметр("МасДок", МасД);
		Зап2.УстановитьПараметр("Контрагент", Контрагент);
		Рез = Зап2.Выполнить().Выгрузить();
		
		Для Каждого Тек Из Товары Цикл
			Най = Рез.Найти(Тек.ДокументПоступления);
			Если Най <> Неопределено Тогда
				Тек.СтатусДоставки = 1;
			КонецеСли;	
		КонецЦикла;	
	КонецеСли;		
	
	Если ДобавилиТовар И ДокументЗакрытия <> Неопределено Тогда
		Нов = ЗакрытияЗаказов.Добавить();
		Нов.ЗакрытиеЗаказов = ДокументЗакрытия.Ссылка;
	ИначеЕсли Не ДобавилиТовар И ДокументЗакрытия = Неопределено И ВыбЗаказ <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("По заказу " + СокрЛП(ВыбЗаказ.Номер) + " нет данных по закрытию! Данные будут сформированы по документу поступления!");
		#КонецеСли	
	КонецеСли;	
	Возврат ДобавилиТовар;
КонецФункции

Процедура ЗаполнитьЗаказыКВозврату() Экспорт
	
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//            |	ЗакрытыеЗаказы.Период КАК Дата
	//            |ИЗ
	//            |	РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
	//            |
	//            |УПОРЯДОЧИТЬ ПО
	//            |	Дата УБЫВ";
	//РезД = Зап.Выполнить().Выгрузить();
	//ЗакрытаяДата = КонецДня(РезД[0].Дата - 86400);
	//
	//
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	//            |	СостоянияЗаказовСрезПоследних.РезультатДоставки,
	//            |	СостоянияЗаказовСрезПоследних.ПричинаНеВыполнения,
	//            |	СостоянияЗаказовСрезПоследних.ПричинаОтказа,
	//            |	ПоступлениеТоваровУслуг.Ссылка КАК Поступление
	//            |ИЗ
	//            |	РегистрСведений.СостоянияЗаказов.СрезПоследних(&КонДата, ) КАК СостоянияЗаказовСрезПоследних
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//            |				ПО РеализацияТоваровУслуг.Номер = ПоступлениеТоваровУслуг.Номер
	//            |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	//            |		ПО СостоянияЗаказовСрезПоследних.Доставка.Ссылка = новаМестнаяДоставка.Ссылка
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	//            |	И СостоянияЗаказовСрезПоследних.РезультатДоставки В (ЗНАЧЕНИЕ(Справочник.НоваРезультатМестнойДоставки.ВыполненаЧастично), ЗНАЧЕНИЕ(Справочник.НоваРезультатМестнойДоставки.НеВыполнена))
	//            |	И РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка,
	//            |	СостоянияЗаказовСрезПоследних.РезультатДоставки,
	//            |	СостоянияЗаказовСрезПоследних.ПричинаНеВыполнения,
	//            |	СостоянияЗаказовСрезПоследних.ПричинаОтказа,
	//            |	ПоступлениеТоваровУслуг.Ссылка";
	//Зап.УстановитьПараметр("НачДата", НачалоДня(ЗакрытаяДата - (ГлубинаПросмотраВозможныхВозвратов * 86400)));			
	//Зап.УстановитьПараметр("КонДата", КонецДня(ЗакрытаяДата));			
	//Зап.УстановитьПараметр("ВладелецТовара", Контрагент.Ссылка);	
	//
	//Таб = Зап.Выполнить().Выгрузить();
	//ЗаказыКВозврату.Очистить();
	//Для Каждого Тек Из таб Цикл
	//	Нов = ЗаказыКВозврату.Добавить();
	//	ЗаполнитьЗначенияСвойств(Нов, Тек);
	//	Най = Товары.Найти(Тек.Поступление);
	//	Если Най = Неопределено Тогда
	//		Нов.НетНаСканере = Истина;
	//	КонецеСли;	
	//КонецЦикла;	
	//
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	МАКСИМУМ(ДанныеЗаказаВодителя.Ссылка) КАК Ссылка,
	//            |	ДанныеЗаказаВодителя.Реализация
	//            |ПОМЕСТИТЬ ВТДанныеМП
	//            |ИЗ
	//            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	ДанныеЗаказаВодителя.Реализация
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка КАК Заказ,
	//            |	ИсторияСоставаЗаказов.Номенклатура,
	//            |	ИсторияСоставаЗаказов.Цена,
	//            |	ИсторияСоставаЗаказов.Количество
	//            |ИЗ
	//            |	РегистрСведений.СостоянияЗаказов.СрезПоследних(&КонДата, ) КАК СостоянияЗаказовСрезПоследних
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСоставаЗаказов КАК ИсторияСоставаЗаказов
	//            |				ПО РеализацияТоваровУслуг.Ссылка = ИсторияСоставаЗаказов.Заказ.Ссылка
	//            |					И РеализацияТоваровУслуг.Ссылка = ИсторияСоставаЗаказов.ДокументРегистратор.Ссылка
	//            |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	//            |		ПО СостоянияЗаказовСрезПоследних.Доставка.Ссылка = новаМестнаяДоставка.Ссылка
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	//            |	И СостоянияЗаказовСрезПоследних.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.НоваРезультатМестнойДоставки.ВыполненаЧастично)
	//            |	И РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара
	//            |	И ИсторияСоставаЗаказов.ТипТабличнойЧасти = ЗНАЧЕНИЕ(перечисление.типытабличныхчастей.товары)
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ИсторияСоставаЗаказов.Номенклатура,
	//            |	ИсторияСоставаЗаказов.Цена,
	//            |	ИсторияСоставаЗаказов.Количество
	//            |
	//            |ОБЪЕДИНИТЬ ВСЕ
	//            |
	//            |ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура,
	//            |	0,
	//            |	-ДанныеЗаказаВодителяДоставленныеТовары.КоличествоДоставлено
	//            |ИЗ
	//            |	РегистрСведений.СостоянияЗаказов.СрезПоследних(&КонДата, ) КАК СостоянияЗаказовСрезПоследних
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя.ДоставленныеТовары КАК ДанныеЗаказаВодителяДоставленныеТовары
	//            |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеМП КАК ВТДанныеМП
	//            |					ПО ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.Ссылка = ВТДанныеМП.Ссылка.Ссылка
	//            |						И ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.Реализация = ВТДанныеМП.Реализация.Ссылка
	//            |				ПО (ДанныеЗаказаВодителяДоставленныеТовары.Ссылка.Реализация.Ссылка = РеализацияТоваровУслуг.Ссылка)
	//            |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	//            |		ПО СостоянияЗаказовСрезПоследних.Доставка.Ссылка = новаМестнаяДоставка.Ссылка
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	//            |	И СостоянияЗаказовСрезПоследних.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.НоваРезультатМестнойДоставки.ВыполненаЧастично)
	//            |	И РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура,
	//            |	-ДанныеЗаказаВодителяДоставленныеТовары.КоличествоДоставлено
	//            |
	//            |ОБЪЕДИНИТЬ ВСЕ
	//            |
	//            |ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ИсторияСоставаЗаказов.Номенклатура,
	//            |	ИсторияСоставаЗаказов.Цена,
	//            |	ИсторияСоставаЗаказов.Количество
	//            |ИЗ
	//            |	РегистрСведений.СостоянияЗаказов.СрезПоследних(&КонДата, ) КАК СостоянияЗаказовСрезПоследних
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСоставаЗаказов КАК ИсторияСоставаЗаказов
	//            |				ПО РеализацияТоваровУслуг.Ссылка = ИсторияСоставаЗаказов.Заказ.Ссылка
	//            |					И РеализацияТоваровУслуг.Ссылка = ИсторияСоставаЗаказов.ДокументРегистратор.Ссылка
	//            |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	//            |		ПО СостоянияЗаказовСрезПоследних.Доставка.Ссылка = новаМестнаяДоставка.Ссылка
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	//            |	И СостоянияЗаказовСрезПоследних.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.НоваРезультатМестнойДоставки.НеВыполнена)
	//            |	И РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара
	//            |	И ИсторияСоставаЗаказов.ТипТабличнойЧасти = ЗНАЧЕНИЕ(перечисление.типытабличныхчастей.товары)
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ИсторияСоставаЗаказов.Номенклатура,
	//            |	ИсторияСоставаЗаказов.Цена,
	//            |	ИсторияСоставаЗаказов.Количество
	//            |
	//            |ОБЪЕДИНИТЬ ВСЕ
	//            |
	//            |ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ИсторияСоставаЗаказов.Номенклатура,
	//            |	ИсторияСоставаЗаказов.Цена,
	//            |	ИсторияСоставаЗаказов.Количество
	//            |ИЗ
	//            |	РегистрСведений.СостоянияЗаказов.СрезПоследних(&КонДата, ) КАК СостоянияЗаказовСрезПоследних
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСоставаЗаказов КАК ИсторияСоставаЗаказов
	//            |				ПО РеализацияТоваровУслуг.Ссылка = ИсторияСоставаЗаказов.Заказ.Ссылка
	//            |					И РеализацияТоваровУслуг.Ссылка = ИсторияСоставаЗаказов.ДокументРегистратор.Ссылка
	//            |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	//            |		ПО СостоянияЗаказовСрезПоследних.Доставка.Ссылка = новаМестнаяДоставка.Ссылка
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	//            |	И СостоянияЗаказовСрезПоследних.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.НоваРезультатМестнойДоставки.ВыполненаЧастично)
	//            |	И РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара
	//            |	И ИсторияСоставаЗаказов.ТипТабличнойЧасти = ЗНАЧЕНИЕ(перечисление.типытабличныхчастей.ПодарочныеПозиции)
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ИсторияСоставаЗаказов.Номенклатура,
	//            |	ИсторияСоставаЗаказов.Цена,
	//            |	ИсторияСоставаЗаказов.Количество
	//            |
	//            |ОБЪЕДИНИТЬ ВСЕ
	//            |
	//            |ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ИсторияСоставаЗаказов.Номенклатура,
	//            |	ИсторияСоставаЗаказов.Цена,
	//            |	ИсторияСоставаЗаказов.Количество
	//            |ИЗ
	//            |	РегистрСведений.СостоянияЗаказов.СрезПоследних(&КонДата, ) КАК СостоянияЗаказовСрезПоследних
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСоставаЗаказов КАК ИсторияСоставаЗаказов
	//            |				ПО РеализацияТоваровУслуг.Ссылка = ИсторияСоставаЗаказов.Заказ.Ссылка
	//            |					И РеализацияТоваровУслуг.Ссылка = ИсторияСоставаЗаказов.ДокументРегистратор.Ссылка
	//            |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	//            |		ПО СостоянияЗаказовСрезПоследних.Доставка.Ссылка = новаМестнаяДоставка.Ссылка
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	//            |	И СостоянияЗаказовСрезПоследних.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.НоваРезультатМестнойДоставки.НеВыполнена)
	//            |	И РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара
	//            |	И ИсторияСоставаЗаказов.ТипТабличнойЧасти = ЗНАЧЕНИЕ(перечисление.типытабличныхчастей.ПодарочныеПозиции)
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка.Ссылка,
	//            |	ИсторияСоставаЗаказов.Номенклатура,
	//            |	ИсторияСоставаЗаказов.Цена,
	//            |	ИсторияСоставаЗаказов.Количество
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |УНИЧТОЖИТЬ ВТДанныеМП";
	//Зап.УстановитьПараметр("НачДата", НачалоДня(ЗакрытаяДата - (ГлубинаПросмотраВозможныхВозвратов * 86400)));			
	//Зап.УстановитьПараметр("КонДата", КонецДня(ЗакрытаяДата));			
	//Зап.УстановитьПараметр("ВладелецТовара", Контрагент.Ссылка);	
	//
	//Таб = Зап.Выполнить().Выгрузить();
	//Таб.Свернуть("Заказ, Номенклатура", "Цена, Количество");
	//НоменклатураКВозврату.Очистить();
	//Для Каждого Тек Из таб Цикл
	//	Если Не ЗначениеЗаполнено(Тек.Количество) Тогда
	//		Продолжить;
	//	КонецеСли;	
	//	
	//	Нов = НоменклатураКВозврату.Добавить();
	//	ЗаполнитьЗначенияСвойств(Нов, Тек);
	//	Нов.Сумма = Нов.Количество*Нов.Цена;
	//	
	//	Най = Товары.Найти(Нов.Номенклатура);
	//	Если Най = Неопределено Тогда
	//		Нов.НетКВозврату = Истина;
	//		Най = ЗаказыКВозврату.Найти(Нов.Заказ);
	//		Если Най <> Неопределено Тогда
	//			Если Не Най.НетНаСканере Тогда
	//				Най.НетНаСканере = Истина;
	//			КонецЕсли;	
	//		КонецеСли;	
	//	КонецеСли;			
	//КонецЦикла;
	//
	//Таб = НоменклатураКВозврату.Выгрузить();
	//Таб.Свернуть("Заказ", "Сумма");
	
	//Для Каждого Тек Из Таб Цикл
	//	Най = ЗаказыКВозврату.Найти(Тек.Заказ);
	//	Если Най <> Неопределено Тогда
	//		Най.СуммаВозврата = Тек.Сумма;
	//	КонецеСли;	
	//КонецЦикла;	
КонецПроцедуры	


Функция ВыгрузитьВXML(Кат) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК Артикул,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК Наименование,
	|	ВозвратТоваровПоставщикуТовары.Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО ПоступлениеТоваровУслуг.Номер = РеализацияТоваровУслуг.Номер
	|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер В(&МасНомеров)
	|	И ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &ВыбДок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЗП.Номер,
	|	ВЗП.НомерВнешнегоЗаказа,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование,
	|	ВозвратТоваровПоставщикуТовары.Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВЗП
	|		ПО ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Ссылка = ВЗП.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &ВыбДок
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВнешнегоЗаказа,
	|	Наименование";
	
	
	
	МасНомеров = Новый Массив;
	Таб = товары.Выгрузить(,"Номенклатура, ДокументПоступления, ВозвратТоваровОтПокупателя");
	Таб.Колонки.Добавить("НомерЗаказа");
	
	Для Каждого Тек Из Таб Цикл
		Если ЗначениеЗаполнено(Тек.ДокументПоступления) Тогда
			Тек.НомерЗаказа = Тек.ДокументПоступления.Номер;
		ИначеЕсли ЗначениеЗаполнено(Тек.ВозвратТоваровОтПокупателя) Тогда	
			Тек.НомерЗаказа = Тек.ВозвратТоваровОтПокупателя.Номер;
		КонецЕсли;	
	КонецЦикла;	
	
	МасНомеров = Таб.ВыгрузитьКолонку("НомерЗаказа");
	
	Зап.УстановитьПараметр("МасНомеров", МасНомеров);
	Зап.УстановитьПараметр("ВыбДок", ЭтотОбъект.Ссылка);
	
	Таб = Зап.Выполнить().Выгрузить();
	
	Г = Новый УникальныйИдентификатор;
	
	ПутьКФайлу = Кат + "\" + Строка(Г) + "_Upload_WoC.xml";
	
	В = Новый ЗаписьXML;
	В.ОткрытьФайл(ПутьКФайлу); 
	В.ЗаписатьОбъявлениеXML(); 
	В.ЗаписатьНачалоЭлемента("body"); 
	В.ЗаписатьНачалоЭлемента("DocType");
	В.ЗаписатьТекст("ReturnOrder"); 
	В.ЗаписатьКонецЭлемента();
	
	В.ЗаписатьНачалоЭлемента("IDLogistic");
	В.ЗаписатьТекст("MCLog"); 
	В.ЗаписатьКонецЭлемента();
	
	
	В.ЗаписатьНачалоЭлемента("ReturnDate");
	В.ЗаписатьТекст(СтрЗаменить(Формат(Дата, "ДФ=dd.MM.yyyy"),".","/"));
	В.ЗаписатьКонецЭлемента();
	
	
	В.ЗаписатьНачалоЭлемента("Orders");
	Для Каждого Тек Из Таб Цикл
		В.ЗаписатьНачалоЭлемента("Order");
		В.ЗаписатьАтрибут("ID", СокрЛП(Тек.НомерВнешнегоЗаказа));
		В.ЗаписатьАтрибут("ProductID", СокрЛП(Тек.Артикул));
		В.ЗаписатьАтрибут("ProductName", СокрЛП(Тек.Наименование));
		В.ЗаписатьАтрибут("ProductQTY", Формат(Тек.Количество, "ЧДЦ=0; ЧГ="));
		В.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	
	В.ЗаписатьКонецЭлемента();
	В.ЗаписатьКонецЭлемента();
	В.Закрыть();
	
	Ф = Новый ДвоичныеДанные(ПутьКФайлу);
	
	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(6));
	
	Наб = РегистрыСведений.ВыгрузкиXML.СоздатьНаборЗаписей();
	Наб.Отбор.Документ.Установить(ЭтотОбъект.Ссылка);
	наб.Отбор.Период.Установить(ТекущаяДата());
	
	Нов = наб.Добавить();
	Нов.Документ = ЭтотОбъект.Ссылка;
	Нов.Период = ТекущаяДата();
	Нов.ВыгрузкаXML = Хр;
	Нов.Формат = Перечисления.ФорматыXMLПартнеров.ВозвратДетскийМир;
	Нов.GUID = Г;
	
	Наб.Записать();
	Возврат Г;
КонецФункции


Функция ВыгрузитьВXMLTD(Кат) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ЗакрытыеЗаказыОбороты.Реализация.Ссылка КАК Заказ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ новаОтчетВодителяЗадания.Ссылка.Ссылка) КАК КоличествоВыездов
	|ПОМЕСТИТЬ ВТКоличествоВыездов
	|ИЗ
	|	РегистрНакопления.ЗакрытыеЗаказы.Обороты(&НачДата, &КонДата, , ИнтернетМагазин В (&МасКонтр)) КАК ЗакрытыеЗаказыОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	|		ПО ЗакрытыеЗаказыОбороты.Реализация.Номер = новаОтчетВодителяЗадания.Задание.Номер
	|ГДЕ
	|	новаОтчетВодителяЗадания.ПричинаНевыполнения.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПричиныНевыполненияДоставки.ПереносСЗаездом))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытыеЗаказыОбороты.Реализация.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа,
	|	ВЫБОР
	|		КОГДА ЗакрытыеЗаказы.ТипОплаты.Код = 1
	|			ТОГДА ЕСТЬNULL(ЗакрытыеЗаказы.СуммаОценочная, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьЗаказа,
	|	ЕСТЬNULL(ЗакрытыеЗаказы.ОплаченоКлиентовНал, 0) КАК Оплачено,
	|	ЕСТЬNULL(ВТКоличествоВыездов.КоличествоВыездов, 0) КАК КоличествоДопВыездов,
	|	ЕСТЬNULL(ЗакрытыеЗаказы.УслугиСД, 0) КАК СтоимостьДоставки,
	|	ЕСТЬNULL(ЗакрытыеЗаказы.КассовоеОбслуживание, 0) КАК КО,
	|	ЕСТЬNULL(РасчетУслугСДОбороты.СуммаОборот, 0) КАК Подъем
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
	|			ПО РеализацияТоваровУслуг.Ссылка = ЗакрытыеЗаказы.Реализация.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоВыездов КАК ВТКоличествоВыездов
	|			ПО РеализацияТоваровУслуг.Ссылка = ВТКоличествоВыездов.Заказ.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетУслугСД.Обороты(, , , ПоказательУслуг.Ссылка = ЗНАЧЕНИЕ(Справочник.показателиРасчетаУслугСД.Подъем)) КАК РасчетУслугСДОбороты
	|			ПО РеализацияТоваровУслуг.Ссылка = РасчетУслугСДОбороты.Реализация.Ссылка
	|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКоличествоВыездов";
	
	
	
	МасНомеров = Новый Массив;
	Таб = товары.Выгрузить(,"Номенклатура, ДокументПоступления, ВозвратТоваровОтПокупателя");
	Таб.Колонки.Добавить("НомерЗаказа");
	
	Для Каждого Тек Из Таб Цикл
		Если ЗначениеЗаполнено(Тек.ДокументПоступления) Тогда
			Тек.НомерЗаказа = Тек.ДокументПоступления.Номер;
		ИначеЕсли ЗначениеЗаполнено(Тек.ВозвратТоваровОтПокупателя) Тогда	
			Тек.НомерЗаказа = Тек.ВозвратТоваровОтПокупателя.Номер;
		КонецЕсли;	
	КонецЦикла;	
	
	МасНомеров = Таб.ВыгрузитьКолонку("НомерЗаказа");
	
	Зап.УстановитьПараметр("МасНомеров", МасНомеров);
	Зап.УстановитьПараметр("ВыбДок", ЭтотОбъект.Ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Г = Новый УникальныйИдентификатор;
	
	ПутьКФайлу = Кат + "\" + Строка(Г) + "_Upload_TD.xml";
	
	В = Новый ЗаписьXML;
	В.ОткрытьФайл(ПутьКФайлу); 
	В.ЗаписатьОбъявлениеXML(); 
	В.ЗаписатьНачалоЭлемента("unloading_from_subagent"); 
	В.ЗаписатьНачалоЭлемента("unload_type");
	В.ЗаписатьТекст("subagent_week_report"); 
	В.ЗаписатьКонецЭлемента();
	
	
	В.ЗаписатьНачалоЭлемента("ctPartner");
	
	В.ЗаписатьНачалоЭлемента("id");
	В.ЗаписатьТекст("56"); 
	В.ЗаписатьКонецЭлемента();
	
	В.ЗаписатьНачалоЭлемента("jurFace");
	В.ЗаписатьСекциюCDATA("ЗАО «СТРИЖ-Логистик»"); 
	В.ЗаписатьКонецЭлемента();
	
	В.ЗаписатьКонецЭлемента();
	
	
	В.ЗаписатьНачалоЭлемента("ctReportInfo");
	
	В.ЗаписатьНачалоЭлемента("date_crate");
	В.ЗаписатьТекст(Формат(Дата, "ДФ=dd.MM.yyyy"));
	В.ЗаписатьКонецЭлемента();
	
	В.ЗаписатьНачалоЭлемента("period");
	В.ЗаписатьТекст(Формат(НачалоПериодаВыборки, "ДФ=dd.MM.yyyy") + "-" + Формат(КонецПериодаВыборки, "ДФ=dd.MM.yyyy"));
	В.ЗаписатьКонецЭлемента();
	
	
	В.ЗаписатьКонецЭлемента();
	
	
	В.ЗаписатьНачалоЭлемента("Orders");
	
	Пока Выб.Следующий() Цикл
		В.ЗаписатьНачалоЭлемента("Order");
		
		В.ЗаписатьНачалоЭлемента("ctOrderIdentity");
		
		В.ЗаписатьНачалоЭлемента("orderId");
		В.ЗаписатьТекст(Выб.Номер);
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("barcode");
		В.ЗаписатьТекст(Выб.НомерВнешнегоЗаказа);
		В.ЗаписатьКонецЭлемента();
		
		Ном2 = СтрПолучитьСтроку(СтрЗаменить(Выб.НомерВнешнегоЗаказа, "*", Символы.ПС), 2);
		
		В.ЗаписатьНачалоЭлемента("webshopNumber");
		В.ЗаписатьТекст(Ном2);
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьКонецЭлемента();
		
		
		
		
		В.ЗаписатьНачалоЭлемента("ctOrderWeightVolume");
		
		В.ЗаписатьНачалоЭлемента("weight");
		В.ЗаписатьТекст(0);
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("length");
		В.ЗаписатьТекст(0);
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("width");
		В.ЗаписатьТекст(0);
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("height");
		В.ЗаписатьТекст(0);
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьКонецЭлемента();
		
		
		
		В.ЗаписатьНачалоЭлемента("ctOrderPaidParams");
		
		В.ЗаписатьНачалоЭлемента("client_cost");
		В.ЗаписатьТекст(Формат(Выб.СтоимостьЗаказа), "ЧДЦ=; ЧГ=");
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("client_paid");
		В.ЗаписатьТекст(Формат(Выб.Оплачено), "ЧДЦ=; ЧГ=");
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("ctOrderPartnerServiceCostParams");
		
		В.ЗаписатьНачалоЭлемента("deliveryCost");
		В.ЗаписатьТекст(Формат(Выб.СтоимостьДоставки), "ЧДЦ=; ЧГ=");
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("receptPaidCost");
		В.ЗаписатьТекст(Формат(Выб.КО), "ЧДЦ=; ЧГ=");
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("returnCost");
		В.ЗаписатьТекст(Формат(0), "ЧДЦ=; ЧГ=");
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("liftCost");
		В.ЗаписатьТекст(Формат(Выб.Подъем), "ЧДЦ=; ЧГ=");
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("additionalExitCost");
		В.ЗаписатьТекст(Формат(Выб.КоличествоДопВыездов), "ЧДЦ=; ЧГ=");
		В.ЗаписатьКонецЭлемента();
		
		В.ЗаписатьНачалоЭлемента("correctCost");
		В.ЗаписатьТекст(Формат(0), "ЧДЦ=; ЧГ=");
		В.ЗаписатьКонецЭлемента();
		
		
		В.ЗаписатьКонецЭлемента();
		
		
		В.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	
	В.ЗаписатьКонецЭлемента();
	В.ЗаписатьКонецЭлемента();
	В.Закрыть();
	
	Ф = Новый ДвоичныеДанные(ПутьКФайлу);
	
	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(6));
	
	Наб = РегистрыСведений.ВыгрузкиXML.СоздатьНаборЗаписей();
	Наб.Отбор.Документ.Установить(ЭтотОбъект.Ссылка);
	наб.Отбор.Период.Установить(ТекущаяДата());
	
	Нов = наб.Добавить();
	Нов.Документ = ЭтотОбъект.Ссылка;
	Нов.Период = ТекущаяДата();
	Нов.ВыгрузкаXML = Хр;
	Нов.Формат = Перечисления.ФорматыXMLПартнеров.ВозвратTopDelivery;
	Нов.GUID = Г;
	
	Наб.Записать();
	Возврат Г;
КонецФункции


#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьВозвратаПоставщику()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	Контрагент,
		|	Организация,
		|	СуммаДокумента,
		|	ВалютаДокумента,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС,
		|	Товары.(
		|		Номенклатура,
		|		ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
		|		Количество,
		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
		|		Цена,
		|		Сумма,
		|		СуммаНДС,
		|		ХарактеристикаНоменклатуры КАК Характеристика,
		|		СерияНоменклатуры КАК Серия
		|	),
		|	ВозвратнаяТара.(
		|		Номенклатура,
		|		ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
		|		Количество,
		|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
		|		Цена,
		|		Сумма
		|	)
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки,
		|	ВозвратнаяТара.НомерСтроки
		|";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";
		
		Макет = ПолучитьМакет("Накладная");
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Возврат поставщику");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
		ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.Получатель = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Сумма    = 0;
		СуммаНДС = 0;
		Ном      = 0;
		
		// Товары
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.НомерСтроки = Ном;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Вывести(ОбластьМакета);
			
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
		КонецЦикла;
		
		// Тара
		Пока ВыборкаСтрокТара.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьМакета.Параметры.НомерСтроки = Ном;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Товар) + " (возвратная тара)";
			ТабДокумент.Вывести(ОбластьМакета);
			
			Сумма = Сумма    + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
		+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьВозвратаПоставщику()
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьТОРГ12()
		
		ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ТоварКод = "Артикул";
		Иначе
			ТоварКод = "Код";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза",          Дата);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
		Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Дата КАК ДатаДокумента,
		|	Номер КАК НомерДокумента,
		|	Организация КАК Руководители,
		|	Организация КАК Организация,
		|	Контрагент КАК Контрагент,
		|	Организация КАК Поставщик,
		|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
		|	      ТОГДА Контрагент
		|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
		|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
		|	      ТОГДА Организация
		|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
		|	БанковскийСчетОрганизации КАК БанковскийСчет,
		|	Контрагент КАК Плательщик,
		|	Сделка,
		|	ДоговорКонтрагента.Представление КАК Основание,
		|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
		|	Подразделение,
		|	ВалютаДокумента,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС
		|
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику,
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
		|ПО
		|	ОтветственныеЛица.СтруктурнаяЕдиница = ВозвратТоваровПоставщику.Склад
		|
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
		|";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			
			// Документ оформлен в валюте взаиморасчетов
			Запрос.УстановитьПараметр("Курс", ЭтотОбъект.КурсВзаиморасчетов);
			Запрос.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);
			
		Иначе
			
			// Документ оформлен в валюте регламентированного учета
			Запрос.УстановитьПараметр("Курс", 1);
			Запрос.УстановитьПараметр("Кратность", 1);
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                    КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "   КАК ТоварКод,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК БазоваяЕдиницаНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
		|	ВложенныйЗапрос.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
		|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
		|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
		|	КОНЕЦ КАК МассаБрутто,
		|	ВложенныйЗапрос.Характеристика      КАК Характеристика,
		|	ВложенныйЗапрос.Серия               КАК Серия,
		|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
		|	ВложенныйЗапрос.Цена                КАК Цена,
		|	ВложенныйЗапрос.Количество          КАК Количество,
		|	ВложенныйЗапрос.КоличествоМест      КАК КоличествоМест,
		|	ВложенныйЗапрос.Сумма               КАК Сумма,
		|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
		|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка               КАК Метка
		|ИЗ
		|
		|	(
		|	ВЫБРАТЬ
		|		ВозвратТоваровПоставщику.Номенклатура,
		|		ВозвратТоваровПоставщику.Коэффициент,
		|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
		|		ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест,
		|		ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест.Коэффициент     КАК КоэффициентМест,
		|		ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры КАК Характеристика,
		|		ВозвратТоваровПоставщику.СерияНоменклатуры          КАК Серия,
		|		ВозвратТоваровПоставщику.СтавкаНДС,
		|		ВозвратТоваровПоставщику.Цена * &Курс / &Кратность            КАК Цена,
		|		СУММА(ВозвратТоваровПоставщику.Количество)                    КАК Количество,
		|		СУММА(ВозвратТоваровПоставщику.КоличествоМест)                КАК КоличествоМест,
		|		СУММА(ВозвратТоваровПоставщику.Сумма    * &Курс / &Кратность) КАК Сумма,
		|		СУММА(ВозвратТоваровПоставщику.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
		|		МИНИМУМ(ВозвратТоваровПоставщику.НомерСтроки)                 КАК НомерСтроки,
		|		0                                                             КАК Метка
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
		|	ГДЕ
		|		ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|		ВозвратТоваровПоставщику.Номенклатура,
		|		ВозвратТоваровПоставщику.Коэффициент,
		|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
		|		ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест,
		|		ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры,
		|		ВозвратТоваровПоставщику.СерияНоменклатуры,
		|		ВозвратТоваровПоставщику.СтавкаНДС,
		|		ВозвратТоваровПоставщику.Цена
		|
		|	) КАК ВложенныйЗапрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Номенклатура                    КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		|	ВозвратТоваровПоставщику.Номенклатура." + ТоварКод + "   КАК ТоварКод,
		|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
		|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
		|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
		|	NULL                                                  КАК ВидУпаковки,
		|	NULL                                                  КАК КоличествоВОдномМесте,
		|	ВозвратТоваровПоставщику.МассаБрутто КАК МассаБрутто,
		|	NULL                                                  КАК Характеристика,
		|	NULL                                                  КАК Серия,
		|	""Без НДС""                                           КАК СтавкаНДС,
		|	ВозвратТоваровПоставщику.Цена                         КАК Цена,
		|	ВозвратТоваровПоставщику.Количество                   КАК Количество,
		|	NULL                                                  КАК КоличествоМест,
		|	ВозвратТоваровПоставщику.Сумма                        КАК Сумма,
		|	0                                                     КАК СуммаНДС,
		|	ВозвратТоваровПоставщику.НомерСтроки                  КАК НомерСтроки,
		|	2                                                     КАК Метка
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		ВозвратТоваровПоставщику.Номенклатура                                  КАК Номенклатура,
		|		СУММА(ВозвратТоваровПоставщику.Количество *
		|			ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.Вес) КАК МассаБрутто,
		|		ВозвратТоваровПоставщику.Цена * &Курс / &Кратность                     КАК Цена,
		|		СУММА(ВозвратТоваровПоставщику.Количество)                             КАК Количество,
		|		СУММА(ВозвратТоваровПоставщику.Сумма * &Курс / &Кратность)             КАК Сумма,
		|		МИНИМУМ(ВозвратТоваровПоставщику.НомерСтроки)                          КАК НомерСтроки
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ВозвратТоваровПоставщику
		|	ГДЕ
		|		ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
		|	СГРУППИРОВАТЬ ПО
		|		ВозвратТоваровПоставщику.Номенклатура,
		|		ВозвратТоваровПоставщику.Цена
		|) КАК ВозвратТоваровПоставщику
		|
		|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
		|";
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху              = 0;
		ТабДокумент.ПолеСлева               = 5;
		ТабДокумент.ПолеСнизу               = 0;
		ТабДокумент.ПолеСправа              = 5;
		ТабДокумент.АвтоМасштаб             = Истина;
		ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";
		
		Макет = ПолучитьОбщийМакет("ТОРГ12");
		
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,      Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
		СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента);
		СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
		СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ОбластьМакета.Параметры.Основание = Шапка.Основание;
		Иначе
			Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
				ОбластьМакета.Параметры.Основание = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.Сделка, Строка(Шапка.Сделка.Метаданные().Синоним));
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
		ОбластьМакета.Параметры.ДатаДокумента  = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг""");
		
		Если Шапка.Организация = Шапка.Грузоотправитель Тогда
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		ОбластьМакета.Параметры.Подразделение                = Шапка.Подразделение;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакета.Параметры.АдресДоставки                = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		ОбластьМакета.Параметры.ПредставлениеПоставщика      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПредставлениеПлательщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		
		// Выводим всевозможные коды
		ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
		ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакета.Параметры.ПоставщикПоОКПО  = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПлательщикПоОКПО = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ОснованиеНомер   = "";
		ОбластьМакета.Параметры.ОснованиеДата    = "";
		ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы   = 1;
		
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// инициализация итогов по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаНаСтранице       = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// инициализация итогов по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСумма       = 0;
		ИтогоНДС         = 0;
		Ном              = 0;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
			+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
			+ ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");
			
			СуммаСНДС = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
			
			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
				МассаБрутто = 0;
			Иначе
				МассаБрутто = ВыборкаСтрок.МассаБрутто;
				МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
			КонецЕсли;
			
			Мест        = ВыборкаСтрок.КоличествоМест;
			Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
			
			Количество  = ВыборкаСтрок.Количество;
			СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
			ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
			ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
			ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
			ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
			
			Если Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
			Иначе
				ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
			КонецЕсли;
			
			Если Ном = 1 Тогда // первая срока
				
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				Если Ном = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				КонецЕсли;		
				
				Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
					
					ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// очистим итоги по странице
					ИтогоМассаБруттоНаСтранице = 0;
					ИтогоМестНаСтранице        = 0;
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаНаСтранице       = 0;
					ИтогоНДСНаСтранице         = 0;
					ИтогоСуммаСНДСНаСтранице   = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// увеличим итоги по странице
			ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
			ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
			
			// увеличим итоги по дукументу
			ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
			ИтогоМест        = ИтогоМест        + Мест;
			ИтогоКоличество  = ИтогоКоличество  + Количество;
			ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
		
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
		ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
		ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
		ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
		ОбластьМакета.Параметры.ФИОГлавБухгалтера     = Бухгалтер;
		ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		ФамилияИмяОтчествоФизЛица                     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
		ФамилияИмяОтчествоКладовщика                  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ОбластьМакета.Параметры.ФИОКладовщика         = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);
		
		ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
		ОбластьМакета.Параметры.ДатаДокументаДень     = """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""";
		ОбластьМакета.Параметры.ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
		ОбластьМакета.Параметры.ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
			ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
		КонецЕсли;
		
		Если ИтогоМест > 0 Тогда
			ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
		КонецЕсли;
		
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьТОРГ12()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "Накладная"  Тогда
			ТабДокумент = ПечатьВозвратаПоставщику();
		ИначеЕсли ИмяМакета = "ТОРГ12" тогда
			ТабДокумент = ПечатьТОРГ12();
		ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
			ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");		
		ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
			ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
		КонецЕсли;
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));
		
	КонецПроцедуры // Печать()
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Накладная", "Возврат поставщику");
	СтруктураМакетов.Вставить("ТОРГ12", "ТОРГ-12 (Товарная накладная)");
	СтруктураМакетов.Вставить("СерийныеНомера", "Список серийных номеров");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ" , "Расход с розничных складов в ценах АТТ");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция возвращает сделки из табличных частей документа основания.
// Если документ основания содержит в своих табличных частях поле "Заказ поставщику" (сделка)
// тогда, для корректного заполнения документа необходимо выбрать сделку.
//
// Параметры:
// ДокументОснованиеИмя - имя документа из которого необходимо получить сделки
// ТабличныеЧасти       - структура с именами табличных частей, из которых необходимо получать сделки
// ДокументОснование    - документ основание
//
// Возвращаемое значение:
// Структура, Ключ      - ПараметрСделка содержит выбранную сделку
//            Ключ      - СтрокаУсловияСделки содержит строку условия которая ограничивает заказы в табличной части документа из основного запроса.
Функция ПолучитьСделки(ДокументОснованиеИмя, ТабличныеЧасти, ДокументОснование) Экспорт
	Перем ПараметрСделка;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ТекстЗапроса = "";
	ДобавитьСтрокуПоместить = Истина;
	Для Каждого ИмяТаблицы Из ТабличныеЧасти Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	Номенклатура    КАК Номенклатура,
		|	ЗаказПоставщику КАК ЗаказПоставщику
		|" + ?(ДобавитьСтрокуПоместить, "ПОМЕСТИТЬ ВременнаяТоварыДокумент ", "") + "
		|ИЗ
		|	Документ." + ДокументОснованиеИмя + "." + ИмяТаблицы.Ключ + " КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &ДокументОснование
		|";
		ДобавитьСтрокуПоместить = Ложь;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, ЗаказПоставщику
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗаказПоставщику
	|ИЗ
	|	ВременнаяТоварыДокумент
	|";
	ТекстЗапроса = Сред(ТекстЗапроса, 12);
	Запрос.Текст = ТекстЗапроса;
	
	МассивТаблиц = Запрос.ВыполнитьПакет();
	СписокСделок = Новый СписокЗначений();
	ТаблицаСделок = МассивТаблиц[1].Выгрузить();
	Для Каждого СтрокаСделка Из ТаблицаСделок Цикл
		СписокСделок.Добавить(СтрокаСделка.ЗаказПоставщику, ?(ЗначениеЗаполнено(СтрокаСделка.ЗаказПоставщику), СтрокаСделка.ЗаказПоставщику, "Пустой заказ"));
	КонецЦикла;
	Если СписокСделок.Количество() = 0 Тогда
		возврат Новый Структура();
	ИначеЕсли СписокСделок.Количество() = 1 Тогда
		ПараметрСделка = СписокСделок.Получить(0).Значение;
	Иначе
		ФормаВыбораЗаказа = ПолучитьОбщуюФорму("ФормаВыбораЗаказа");
		ФормаВыбораЗаказа.НачальноеЗначениеВыбора = Новый Структура("СписокВыбора, ЗаполнитьСписокВыбора", СписокСделок, Ложь);
		ФормаВыбораЗаказа.ОткрытьМодально();
		Если НЕ ФормаВыбораЗаказа.ВыбраноЗначение Тогда
			возврат Новый Структура();
		КонецЕсли;
		ПараметрСделка = ФормаВыбораЗаказа.ВыбранноеЗначение;
	КонецЕсли;
	возврат Новый Структура("ПараметрСделка", ПараметрСделка);
КонецФункции // ПолучитьСделки()

// Возвращает текстовые участки запроса, выполняемого
// при заполнении на основании ТЧ Товары
Процедура ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры)
	
	ПолеОстаткиОрганизации = "
	|	ОстаткиОрганизации.КоличествоОстаток                 КАК КоличествоОстатокОрганизации,";
	
	СоединениеТоваровОрганизаций = "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Организация = &Организация) КАК ОстаткиОрганизации
	|ПО
	|	Док.Номенклатура               = ОстаткиОрганизации.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры";
	
КонецПроцедуры

Процедура УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка)
	
	КоличествоПоДокументу = Мин(Выборка.КоличествоПоДокументу, 
	?(Выборка.КоличествоОстатокОрганизации=NULL, 0, Выборка.КоличествоОстатокОрганизации));
	
КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, СтруктураПолученияСделок, СкладИзШапки = Истина) Экспорт
	
	Если СтруктураПолученияСделок.Отказ Тогда
		возврат;
	КонецЕсли;
	
	ОтражатьВРегламентированномУчете = Организация.ОтражатьВРегламентированномУчете;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОснование.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказ",        Неопределено);
	Запрос.УстановитьПараметр("СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	
	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ОснованиеЗаказ       = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"));
	ОснованиеЗаказПокупателя = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя"));
	ТоварКомитента       = (ДокументОснование.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	ВедениеВзаиморасчетовПоСчетам = ДокументОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
	
	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	ТабличнаяЧастьИмя = "Товары";
	СтрокаУсловияСделки = "";
	ПараметрСделка = Сделка;
	Если ОснованиеЗаказ ИЛИ ВедениеВзаиморасчетовПоСчетам Тогда
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Если ОснованиеЗаказ Тогда
				ПараметрСделка = ДокументОснование;
			Иначе
				ПараметрСделка = ДокументОснование.Сделка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтруктураПолученияСделок.ПолучатьСделки Тогда
			СтруктураПараметрСделка = ПолучитьСделки(ДокументОснованиеИмя, СтруктураПолученияСделок.СтруктураТабличныхЧастей, ДокументОснование);
			Если СтруктураПараметрСделка.Количество() = 0 Тогда
				СтруктураПолученияСделок.Отказ = Истина;
				возврат;
			КонецЕсли;
			СтрокаУсловияСделки = " И Док.ЗаказПоставщику = &СделкаДокумент ";
			ПараметрСделка = СтруктураПараметрСделка.ПараметрСделка;
		ИначеЕсли ОснованиеПоступление Тогда
			СтрокаУсловияСделки = " И Док.ЗаказПоставщику = &СделкаДокумент ";
		КонецЕсли;
		Запрос.УстановитьПараметр("СделкаДокумент", ПараметрСделка);
	КонецЕсли;
	
	Если СкладИзШапки
		ИЛИ ОснованиеЗаказ Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.Товары.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;
	
	Если СтруктураПолученияСделок.ИзменитьСделкуВШапке Тогда
		Сделка = ПараметрСделка;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);
	
	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + "." + ТабличнаяЧастьИмя + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|";
	// Сформируем участки запроса
	ПолеОстаткиОрганизации = "";
	СоединениеТоваровОрганизаций = "";
	
	Если ОтражатьВРегламентированномУчете Тогда
		ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                КАК КратностьДокумента,
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов   КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.КурсВзаиморасчетов                        КАК КурсВзаиморасчетов,
	|	Док.Ссылка.КратностьВзаиморасчетов                   КАК КратностьВзаиморасчетов,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,"
	+   ?(ОснованиеЗаказПокупателя, "Док.Номенклатура.СтавкаНДС КАК СтавкаНДС,",	"Док.СтавкаНДС,") + "
	|	ВЫРАЗИТЬ(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(10,3))
	|														КАК КоличествоПоДокументу,
	|	ЕстьNull(Остатки.КоличествоОстаток,0)+ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)  КАК КоличествоОстаток,
	|	ЕстьNull(Резервы.КоличествоОстаток,0)                КАК КоличествоРезервОстаток,
	|	ЕстьNull(РезервыПоДокументу.КоличествоОстаток,0)     КАК КоличествоРезервПоДокументуОстаток,"
	+	ПолеОстаткиОрганизации + "
	|	Док.Цена,";
	
	Если ОснованиеПоступление Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.СерияНоменклатуры,
		|	Док.Склад,";
	КонецЕсли; 
	
	Если ТоварКомитента Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ОстаткиПолученных.КоличествоОстаток            КАК КоличествоОстатокПолученных,
		|	ОстаткиПолученных.СуммаВзаиморасчетовОстаток   КАК СуммаПолученныхПолученных,";
		
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|	Док.ХарактеристикаНоменклатуры,";
	
	Запрос.Текст = Запрос.Текст + "
	|	Док.Заказ КАК ЗаказПокупателя";
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + "." + ТабличнаяЧастьИмя + " КАК Док";
	
	Если ТоварКомитента Тогда
		Запрос.УстановитьПараметр("СделкаРегистр", ?(ЗначениеЗаполнено(ПараметрСделка), ПараметрСделка, Неопределено));
		Запрос.Текст = Запрос.Текст + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПолученные.Остатки(,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|	                                           И СтатусПолучения      = &СтатусПолучения
		|	                                           И Сделка               = &СделкаРегистр
		|	                                                     ) КАК ОстаткиПолученных
		|ПО
		|	Док.Номенклатура = ОстаткиПолученных.Номенклатура 
		|   И Док.ХарактеристикаНоменклатуры = ОстаткиПолученных.ХарактеристикаНоменклатуры
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Остатки
	|ПО
	|	Док.Номенклатура               = Остатки.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры "+
	?(ОснованиеПоступление,"И Док.Склад = Остатки.Склад","")+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРознице.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК ОстаткиВРознице
	|ПО
	|	Док.Номенклатура               = ОстаткиВРознице.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = ОстаткиВРознице.ХарактеристикаНоменклатуры "+
	?(ОснованиеПоступление,"И Док.Склад = ОстаткиВРознице.Склад","")+"
	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Резервы.ХарактеристикаНоменклатуры  "
	+?(ОснованиеПоступление,"И Док.Склад = Резервы.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК РезервыПоДокументу
	|ПО
	|	Док.Номенклатура               = РезервыПоДокументу.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = РезервыПоДокументу.ХарактеристикаНоменклатуры "
	+?(ОснованиеПоступление,"И Док.Склад = РезервыПоДокументу.Склад","")+"
	|";
	
	Если ОснованиеЗаказПокупателя Тогда
		Запрос.Текст = Запрос.Текст + "И &ДокументОснование = РезервыПоДокументу.ДокументРезерва";
	Иначе
		Запрос.Текст = Запрос.Текст + "И Док.Заказ = РезервыПоДокументу.ДокументРезерва";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	
	|"
	+ СоединениеТоваровОрганизаций + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование " + СтрокаУсловияСделки + "
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ТабОстатки = РезультатЗапроса.Выгрузить();
	КолонкиСвертки = "Номенклатура,ХарактеристикаНоменклатуры,КоличествоОстаток,КоличествоРезервОстаток";
	Если ОснованиеПоступление Тогда
		КолонкиСвертки = "Номенклатура,ХарактеристикаНоменклатуры,Склад,КоличествоОстаток,КоличествоРезервОстаток";
	КонецЕсли;
	
	ТабОстатки.Свернуть(КолонкиСвертки);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.КоличествоОстаток) Тогда
			Продолжить; // товары, отстутствующие на складе, в документ не добавляем
		КонецЕсли;
		
		КоличествоПоДокументу = Выборка.КоличествоПоДокументу;
		
		Если ОтражатьВРегламентированномУчете Тогда
			УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка);
		КонецЕсли;
		
		Если ТоварКомитента Тогда
			КоличествоПолученных = ?(Выборка.КоличествоОстатокПолученных = NULL, 0, Выборка.КоличествоОстатокПолученных);
			СуммаВзаиморасчетовПолученных = ?(Выборка.СуммаПолученныхПолученных = NULL, 0, Выборка.СуммаПолученныхПолученных);
		КонецЕсли;
		
		КоличествоРезервПоДокументуОстаток = ?(Выборка.КоличествоРезервПоДокументуОстаток=NULL, 0, Выборка.КоличествоРезервПоДокументуОстаток);
		КоличествоРезервОстаток = ?(Выборка.КоличествоРезервОстаток=NULL, 0, Выборка.КоличествоРезервОстаток);
		
		// Сначала (Сч = 1) спишем резервы по заказам, а затем если количество еще
		// не израсходовано, возмем его из свободного остатка (Сч = 2)		
		Для Сч = 1 По 2 Цикл
			
			Если Сч = 1 Тогда
				Если Не ЗначениеЗаполнено(Выборка.КоличествоОстаток) 
					ИЛИ Не ЗначениеЗаполнено(Выборка.ЗаказПокупателя) Тогда
					Продолжить;
				Иначе
					СписКоличество = Мин(КоличествоПоДокументу, Мин(Выборка.КоличествоОстаток, КоличествоРезервПоДокументуОстаток));
				КонецЕсли;
			Иначе
				Если Не ЗначениеЗаполнено(Выборка.КоличествоОстаток) 
					ИЛИ (Выборка.КоличествоОстаток - КоличествоРезервОстаток) = 0 Тогда
					Продолжить;
				Иначе
					СписКоличество = Мин(КоличествоПоДокументу, Выборка.КоличествоОстаток - КоличествоРезервОстаток);
				КонецЕсли;
			КонецЕсли;
			
			// Не дадим списать больше чем был общий остаток по номенклатуре
			СтруктПоиск = Новый Структура;
			СтруктПоиск.Вставить("Номенклатура",               Выборка.Номенклатура);
			СтруктПоиск.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
			Если ОснованиеПоступление Тогда
				СтруктПоиск.Вставить("Склад",               Выборка.Склад);
			КонецЕсли;
			
			СтрокиСОстатком = ТабОстатки.НайтиСтроки(СтруктПоиск);
			Если СтрокиСОстатком.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СписКоличество = Мин(СписКоличество, СтрокиСОстатком[0].КоличествоОстаток);
			Если Сч = 1 Тогда 
				СтрокиСОстатком[0].КоличествоРезервОстаток = Макс(СтрокиСОстатком[0].КоличествоРезервОстаток - СписКоличество,0);
			Иначе
				//проверка возможности списать из свободного остатка
				Если СтрокиСОстатком[0].КоличествоОстаток - СтрокиСОстатком[0].КоличествоРезервОстаток < СписКоличество Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтрокиСОстатком[0].КоличествоОстаток = СтрокиСОстатком[0].КоличествоОстаток - СписКоличество;
			
			Если СтрокиСОстатком[0].КоличествоОстаток = 0 Тогда
				ТабОстатки.Удалить(СтрокиСОстатком[0]);
			КонецЕсли;
			
			
			Если ТоварКомитента Тогда
				СписКоличество = Мин(СписКоличество, КоличествоПолученных);
			КонецЕсли;
			
			Если СписКоличество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Товары.Добавить();
			
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			
			// Дубли строк (например, совпадающая номенклатура и характиеристика, разные серии) 
			// в документе-основании не отслеживаем, считаем, что при необходимости пользователь 
			// сам должен выбрать нужную строку, а не нужную удалить.
			СтрокаТабличнойЧасти.Количество       = СписКоличество * Выборка.КоэффициентХраненияОстатков / Выборка.Коэффициент;
			КоличествоПоДокументу                 = КоличествоПоДокументу - СписКоличество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
			
			Если ТоварКомитента Тогда
				
				СтрокаТабличнойЧасти.Цена         = СуммаВзаиморасчетовПолученных / КоличествоПолученных / (Выборка.КоэффициентХраненияОстатков / Выборка.Коэффициент);
				
				// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаВзаиморасчетов, ВалютаДокумента, 
				Выборка.КурсВзаиморасчетов, Курс,
				Выборка.КратностьВзаиморасчетов, Кратность);
				
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				Истина,
				Выборка.УчитыватьНДС,
				Выборка.СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				
				СтрокаТабличнойЧасти.Цена         = Выборка.Цена;
				
				// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
				Выборка.КурсДокумента, Курс,
				Выборка.КратностьДокумента, Кратность);
				
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
			
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			Если ОснованиеПоступление Тогда
				СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
				СтрокаТабличнойЧасти.Склад             = Выборка.Склад;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			
			Если Сч = 1 Тогда
				СтрокаТабличнойЧасти.Заказ     = Выборка.ЗаказПокупателя;
			Иначе
				СтрокаТабличнойЧасти.Заказ     = Неопределено;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.ДокументПоступления = ДокументОснование;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованиюУпр(ДокументОснование, СтруктураПолученияСделок, СкладИзШапки = Истина) Экспорт
	
	Если СтруктураПолученияСделок.Отказ Тогда
		возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.ВозвратнаяТара.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	
	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	
	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ОснованиеЗаказ       = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"));
	СтрокаУсловияСделки = "";
	
	ВедениеВзаиморасчетовПоСчетам = ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
	ПараметрСделка = Сделка;
	Если ОснованиеЗаказ ИЛИ ВедениеВзаиморасчетовПоСчетам Тогда
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Если ОснованиеЗаказ Тогда
				ПараметрСделка = ДокументОснование;
			Иначе
				ПараметрСделка = ДокументОснование.Сделка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтруктураПолученияСделок.ПолучатьСделки Тогда
			Если ОснованиеПоступление И НЕ ВедениеВзаиморасчетовПоСчетам Тогда
				СтруктураПараметрСделка = ПолучитьСделки(ДокументОснованиеИмя, СтруктураПолученияСделок.СтруктураТабличныхЧастей, ДокументОснование);
				Если СтруктураПараметрСделка.Количество() = 0 Тогда
					СтруктураПолученияСделок.Отказ = Истина;
					возврат;
				КонецЕсли;
				ПараметрСделка = СтруктураПараметрСделка.ПараметрСделка;
			КонецЕсли;
			СтрокаУсловияСделки = " И Док.ЗаказПоставщику = &СделкаДокумент";
			Запрос.УстановитьПараметр("СделкаДокумент", ПараметрСделка);
		ИначеЕсли ОснованиеПоступление Тогда
			СтрокаУсловияСделки = " И Док.ЗаказПоставщику = &СделкаДокумент";
			Запрос.УстановитьПараметр("СделкаДокумент", ПараметрСделка);
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(ПараметрСделка), ПараметрСделка, Неопределено));
	
	Если СтруктураПолученияСделок.ИзменитьСделкуВШапке Тогда
		Сделка = ПараметрСделка;
	КонецЕсли;
	
	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументОснование";
	
	// Сформируем участки запроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|		1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент  КАК КоэффициентХраненияОстатков,"
	+ ?(СкладИзШапки, "&Склад", "Док.Склад")+"                          КАК Склад,
	|	ЕстьNull(Остатки.КоличествоОстаток,0)                 КАК КоличествоОстатокКомпании,
	|	Док.Количество                                        КАК КоличествоПоДокументу,
	|	Док.Цена,
	|	Док.Заказ КАК ЗаказПокупателя,
	|	ЕстьNull(ОстаткиНаСкладах.КоличествоОстаток,0) + ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)  КАК КоличествоОстатокНаСкладах,
	|	ЕстьNull(Резервы.КоличествоОстаток,0)                 КАК КоличествоРезервОстаток,
	|	ЕстьNull(РезервыПоДокументу.КоличествоОстаток,0)      КАК КоличествоРезервПоДокументуОстаток
	
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПолученные.Остатки(,  Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                                         И ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                         И СтатусПолучения = &СтатусПолучения
	|	                                                         И Сделка = &Сделка
	|	                                            ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура 
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|	И Склад в (&МассивСклады) ) КАК ОстаткиНаСкладах
	|ПО
	|	Док.Номенклатура               = ОстаткиНаСкладах.Номенклатура "+
	?(не СкладИзШапки,"И Док.Склад = ОстаткиНаСкладах.Склад","")+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРознице.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК ОстаткиВРознице
	|ПО
	|	Док.Номенклатура               = ОстаткиВРознице.Номенклатура "+
	?(не СкладИзШапки,"И Док.Склад = ОстаткиВРознице.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура "
	+?(не СкладИзШапки,"И Док.Склад = Резервы.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК РезервыПоДокументу
	|ПО
	|	Док.Номенклатура               = РезервыПоДокументу.Номенклатура "
	+?(не СкладИзШапки,"И Док.Склад = РезервыПоДокументу.Склад","")+"
	| И Док.Заказ = РезервыПоДокументу.ДокументРезерва
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование И
	|	Остатки.КоличествоОстаток > 0 " + СтрокаУсловияСделки + "
	|	И ЕстьNull(ОстаткиНаСкладах.КоличествоОстаток,0)+ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)>0
	|ИТОГИ Максимум(КоличествоОстатокКомпании), Максимум(КоличествоОстатокНаСкладах), Максимум(КоличествоРезервОстаток) ПО Склад, Док.Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Курс      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ВыборкаСклад = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклад.Следующий() Цикл
		ВыборкаНоменклатура = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			КоличествоОстатокКомпании  = ВыборкаНоменклатура.КоличествоОстатокКомпании;
			КоличествоОстатокНаСкладах = ВыборкаНоменклатура.КоличествоОстатокНаСкладах;
			КоличествоРезервОстаток    = ВыборкаНоменклатура.КоличествоРезервОстаток;
			Выборка = ВыборкаНоменклатура.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если КоличествоОстатокКомпании=0 Тогда
					Продолжить; // товары, отстутствующие на складе, в документ не добавляем
				КонецЕсли;
				
				РезервПоДокументу = Выборка.КоличествоРезервПоДокументуОстаток;
				ДоступноКСписанию = Мин(КоличествоОстатокКомпании, Выборка.КоличествоПоДокументу, 
				Макс(КоличествоОстатокНаСкладах - (КоличествоРезервОстаток-РезервПоДокументу), 0));
				
				Если  ДоступноКСписанию <=0 Тогда 
					Продолжить; 
				КонецЕсли;
				
				//количество из резерва
				Если РезервПоДокументу > 0 Тогда
					РезервПоДокументу = Мин(РезервПоДокументу, ДоступноКСписанию);
					СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
					
					СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
					СтрокаВозвратнойТары.Количество   = РезервПоДокументу;
					СтрокаВозвратнойТары.Цена         = Выборка.Цена;
					
					СтрокаВозвратнойТары.Заказ = Выборка.ЗаказПокупателя;
					
					// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
					СтрокаВозвратнойТары.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
					Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, Курс,
					Выборка.КратностьДокумента, Кратность);
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
					
					Если СкладИзШапки Тогда
						СтрокаВозвратнойТары.Склад = Склад;
					Иначе
						СтрокаВозвратнойТары.Склад = ?(ЗначениеЗаполнено(Выборка.Склад), Выборка.Склад, Склад);
					КонецЕсли;
					
					КоличествоОстатокКомпании  = КоличествоОстатокКомпании - РезервПоДокументу;
					КоличествоОстатокНаСкладах = КоличествоОстатокНаСкладах - РезервПоДокументу;
					ДоступноКСписанию = ДоступноКСписанию - РезервПоДокументу;
					КоличествоРезервОстаток = Макс(КоличествоРезервОстаток - РезервПоДокументу,0);
					Если ДоступноКСписанию = 0 ИЛИ КоличествоОстатокКомпании<=0 или КоличествоОстатокНаСкладах<=0 Тогда 
						Продолжить; 
					КонецЕсли;
				КонецЕсли;
				
				//количество из свободного остатка
				СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
				
				СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
				СтрокаВозвратнойТары.Количество   = ДоступноКСписанию;
				СтрокаВозвратнойТары.Цена         = Выборка.Цена;
				
				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаВозвратнойТары.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
				Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, Курс,
				Выборка.КратностьДокумента, Кратность);
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
				
				Если СкладИзШапки Тогда
					СтрокаВозвратнойТары.Склад = Склад;
				Иначе
					СтрокаВозвратнойТары.Склад = ?(ЗначениеЗаполнено(Выборка.Склад), Выборка.Склад, Склад);
				КонецЕсли;
				
				КоличествоОстатокКомпании = КоличествоОстатокКомпании - ДоступноКСписанию;
				КоличествоОстатокНаСкладах = КоличествоОстатокНаСкладах - ДоступноКСписанию;
				Если КоличествоОстатокКомпании<=0 или КоличествоОстатокНаСкладах<=0 Тогда 
					Прервать; 
				КонецЕсли;
			КонецЦикла;  //Пока Выборка.Следующий() Цикл
		КонецЦикла;  //Пока ВыборкаНоменклатура.Следующий() Цикл
	КонецЦикла; //Пока ВыборкаСклад.Следующий() цикл
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

// Заолняет табличную часть по сериям номенклатуры при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 
	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  (Не мУказаниеСкладовВТЧ) И (ЗначениеЗаполнено(Склад));
	
	СкладОстатков = ?(СкладИзШапки, Склад, Товары.ВыгрузитьКолонку("Склад"));
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОстатков, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();
	
	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	
	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();
	
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтруктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);
		
		флЗаполнятьИзРезервов = ложь;
		ТекЗаказ = ИсходнаяСтрока.Заказ;
		Если ТипЗнч(ТекЗаказ)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда
			Если ТекЗаказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтруктураПоиска.Вставить("ДокументРезерва",    ТекЗаказ);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;
			
			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.ДокументПоступления        = ИсходнаяСтрока.ДокументПоступления;
			НоваяСтрока.Заказ			           = ИсходнаяСтрока.Заказ;
			НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
			НоваяСтрока.Склад                      = ИсходнаяСтрока.Склад;
			НоваяСтрока.Количество                 = СписанноеКоличество; 
			
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Если Не ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.ДокументПоступления        = ИсходнаяСтрока.ДокументПоступления;
				НоваяСтрока.Заказ			           = ИсходнаяСтрока.Заказ;
				НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
				НоваяСтрока.Склад                      = ИсходнаяСтрока.Склад;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента)
	
	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.КоличествоДок = NULL Тогда
			СтрокаТаблицы.КоличествоДок = 0;
		КонецЕсли;
		
		СтрокаТаблицы.Количество  = - СтрокаТаблицы.КоличествоДок;
	КонецЦикла;
	
	// важен порядок: сначала Регл, потом Упр
	// (использование колонки Стоимость как врем. переменной)
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ (СтруктураШапкиДокумента.НДСВключенВСтоимость) Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, 
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
		КратностьВзаиморасчетов);
		
		
		СтрокаТаблицы.НДСУпр = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, 
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТары.Колонки.Добавить("Количество");
	ТаблицаТары.Колонки.Добавить("Стоимость");
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.Количество  = СтрокаТаблицы.КоличествоДок;
		
	КонецЦикла;
	
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)
	
	ТаблицаТары.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
		ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов");
	ДанныеДоговора = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, Дата);
	
	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, 
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ поставщику""!");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТовары();
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	СтруктураОбязательныхПолей.Вставить("ЕдиницаИзмерения");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("Качество");
	СтруктураОбязательныхПолей.Удалить("Сумма");
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Складов с видом НТТ здесь быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	// Вызовем общую процедуру для проверки проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Складов с видом НТТ здесь быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
			Движения.ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			
			Движения.ТоварыВРознице.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
			Движения.ТоварыВРознице.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			ОтборСкладОптовый   = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			ОтборСкладРозничный = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
			
			ТаблицаТоварыОпт  = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладОптовый  ).Выгрузить();
			ТаблицаТоварыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладРозничный).Выгрузить();
			
			СтруктТаблицДокументаОпт = Новый Структура;
			СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам",    ТаблицаТоварыОпт);
			
			СтруктТаблицДокументаРозн = Новый Структура;
			СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозн);
			
			ТаблицыДанныхДокументаОпт  = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
			ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице,  СтруктТаблицДокументаРозн);
			
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт,  Дата);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице,  ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозн, Дата);
			
			// Движения расход по ТАРЕ
			ТаблицаТараОпт    = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре, ОтборСкладОптовый  ).Выгрузить();
			ТаблицаТараРозн   = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре, ОтборСкладРозничный).Выгрузить();
			
			СтруктТаблицДокументаОпт  = Новый Структура;
			СтруктТаблицДокументаРозн = Новый Структура;
			
			СтруктТаблицДокументаОпт .Вставить("ТаблицаПоТаре", ТаблицаТараОпт);
			СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТаре", ТаблицаТараРозн);
			
			ТаблицыДанныхДокументаОпт  = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
			ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице,  СтруктТаблицДокументаРозн);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт,  "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРозн, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаОпт,  Дата);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице,  ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаРозн, Дата);
			
		КонецЕсли;
		
	Иначе
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
			Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		// ТОВАРЫ, ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
		Если НЕ Отказ Тогда
			
			ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
			ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
			
			ТаблицаПоТареПлюс = ТаблицаПоТаре.Скопировать();
			ТаблицаПоТареПлюс.Колонки.Удалить(ТаблицаПоТареПлюс.Колонки.Количество);
			ТаблицаПоТареПлюс.Колонки.КоличествоДок.Имя = "Количество";
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварамПлюс);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",       ТаблицаПоТареПлюс);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ Закупки.
	Если НЕ Отказ Тогда
		
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    КопияТаблицыТоваров);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.Закупки, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "ТаблицаПоТоварам");
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			ИЛИ (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом) Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.Сделка);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Закупки, Неопределено, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам",ТаблицаПоТоварам);
		
		ТаблицаАвансов = Новый ТаблицаЗначений;
		ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаАвансов, Отказ, Заголовок);
		
	КонецЕсли;
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	Отказ, Заголовок, СтруктураШапкиДокумента);
	
	// Проводить по партиям сразу если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;
	
	// Зарегистрируем в последовательности УУ
	Если ОтражатьВУправленческомУчете Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
		ЗаписьРегистрации.Период      = Дата;
	КонецЕсли;
	
	Если ПроводитьПоПартиям Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		
	Иначе
		
		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результатам запросов формирует движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		НаборДвижений = Движения.ТоварыКПередачеОрганизаций;
		
		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
		ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПлюс, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,      "ДокументПередачи");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.ТоварыКПередачеОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

// Формирует движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ВидДвиженияНакопления.Расход, Отказ, Заголовок);
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
			Если ТипЗНЧ(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				
				// Движения по заказам поставщикам.
				НаборДвижений = Движения.ЗаказыПоставщикам;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    СтруктураШапкиДокумента.Сделка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ Закупки.
			ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
			
			// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина));
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыПолученные.
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыПолученные.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок);
				Движения.ТоварыПолученные.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, Отказ, Заголовок);
			КонецЕсли;      
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
				
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",         СтруктураШапкиДокумента.Сделка);
				КонецЕсли;
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина));
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;      
			
		КонецЕсли;
		
		ТаблицаПоТоварамИзРезерва = УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТаблицаПоТоварам);
		ТаблицаПоТареИзРезерва    = УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТаблицаПоТаре);
		
		Если ТаблицаПоТоварамИзРезерва.Количество() > 0 ИЛИ ТаблицаПоТареИзРезерва.Количество() > 0 Тогда
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамИзРезерва);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареИзРезерва);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаАвансов, Отказ, Заголовок) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;
		
		Если ТабЧасть.Количество()> 0 Тогда 
			
			Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
				УчетНДСФормированиеДвижений.СформироватьДвиженияВозвратаПоставщикуПоРегистрамНДС(СтруктураШапкиДокумента, ТаблицаДокумента.Значение, Движения, Отказ, Заголовок);
			КонецЕсли; 
			
			УчетНДСФормированиеДвижений.ОтразитьВозвратПоставщикуПоРегиструРасчетовСПоставщикамиНДС(СтруктураШапкиДокумента, Движения, ТаблицаДокумента.Значение, Отказ, Заголовок, УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
			
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	
	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТоварам.Колонки.Заказ.Имя = "ЗаказПартии";
	
	// Количество из колонки КоличествоДок
	ТаблицаПоТоварам.Колонки.Удалить("Количество");
	ТаблицаПоТоварам.Колонки.КоличествоДок.Имя = "Количество";
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам[ТаблицаДвижений.Индекс(Строка)];
		Строка.ДокументПартии = СтрокаТЧ.ДокументЗакупки;
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
		
	КонецЦикла;
	
	Для каждого СтрокаТоваров из ТаблицаПоТоварам Цикл
		
		Если ЗначениеЗаполнено (СтрокаТоваров.ЗаказПартии) тогда
			
			Если СтрокаТоваров.ЗаказПартии.Метаданные().Имя = "ЗаказПокупателя"  тогда
				ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].ЗаказСписания = СтрокаТоваров.ЗаказПартии;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если ПУ по складам не ведется - очистим склад
	Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;		 
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТаре.Колонки.Заказ.Имя = "ЗаказПартии";
	ТаблицаПоТаре.Колонки.Удалить("Количество");
	ТаблицаПоТаре.Колонки.КоличествоДок.Имя = "Количество";
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
		
	КонецЦикла;
	
	// Если ПУ по складам не ведется - очистим склад
	Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;		 
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                      , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                               , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                               , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                     , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"                  , "РасчетыВУсловныхЕдиницах");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"                         , "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора"                     , "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом"    , "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации"         , "ОтражатьВРегламентированномУчете"          , "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                               , "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"              , "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                 , "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий"             , "НеВключатьНДСВСтоимостьПартий");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам",                     "ВедениеУчетаПоПроектам");
	
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента() 

// Процедура формирует таблицы документа, вляиющие на состояние расчетов с контрагентами.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();
	
	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ"              , "Заказ");
	СтруктураПолей.Вставить("Качество"           , "Качество");
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("ВидСклада"          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Цена"               , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ДокументЗакупки"    , "ДокументПоступления");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	"Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
		И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;
	
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, ?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, Истина, СтруктураШапкиДокумента.НДСВключенВСтоимость), мВалютаРегламентированногоУчета);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ТипОснования <> Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		И ТипОснования <> Тип("ДокументСсылка.ЗаказПоставщику")
		И ТипОснования <> Тип("ДокументСсылка.НаборнаяВедомостьДляВозврата") Тогда
		
		Если Не ЗначениеЗаполнено(ТерминалОбработки) Тогда  //Задача № 3045
			ТерминалОбработки = ПараметрыСеанса.ТерминалДоставки;	
		КонецЕсли;
		
		возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = Основание.СкладОрдер.Склад;
		Иначе
			Склад = Основание.СкладОрдер;
		КонецЕсли;
		
		Сделка = Основание.Сделка; // заполняем сделку заказом поставщику
		
		Если Основание.Проведен Тогда
			
			// Заполним табличные части по поступлению Товаров.
			СтруктураПолученияСделок = Новый Структура();
			СтруктураПолученияСделок.Вставить("ПолучатьСделки"          , Истина);
			СтруктураПолученияСделок.Вставить("ИзменитьСделкуВШапке"    , Истина);
			СтруктураПолученияСделок.Вставить("Отказ"                   , Ложь);
			СтруктураПолученияСделок.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, ВозвратнаяТара"));
			ЗаполнитьТоварыПоОснованиюУпр(Основание, СтруктураПолученияСделок, Ложь);
			СтруктураПолученияСделок.Вставить("ПолучатьСделки", Ложь);
			СтруктураПолученияСделок.Вставить("ИзменитьСделкуВШапке", Ложь);
			СтруктураПолученияСделок.Вставить("СтруктураТабличныхЧастей", Новый Структура());
			ЗаполнитьВозвратнуюТаруПоОснованиюУпр(Основание, СтруктураПолученияСделок, Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ВалютаДокумента              = Основание.ВалютаДокумента;
		ДоговорКонтрагента           = Основание.ДоговорКонтрагента;
		Комментарий                  = Основание.Комментарий;
		Контрагент                   = Основание.Контрагент;
		КратностьВзаиморасчетов      = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов           = Основание.КурсВзаиморасчетов;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Склад                        = Основание.Склад;
		СуммаВключаетНДС             = Основание.СуммаВключаетНДС;
		СуммаДокумента               = Основание.СуммаДокумента;
		ТипЦен                       = Основание.ТипЦен;
		УчитыватьНДС                 = Основание.УчитыватьНДС;
		
		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СтавкаНДС                  = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                      = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                   = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаТовары.Цена;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Сделка = Основание; // заполняем сделку заказом поставщику
		
		Если Сделка.Проведен Тогда
			// Заполним табличные части по заказу поставщику.
			СтруктураПолученияСделок = Новый Структура();
			СтруктураПолученияСделок.Вставить("ПолучатьСделки"          , Ложь);
			СтруктураПолученияСделок.Вставить("ИзменитьСделкуВШапке"    , Истина);
			СтруктураПолученияСделок.Вставить("Отказ"                   , Ложь);
			СтруктураПолученияСделок.Вставить("СтруктураТабличныхЧастей", Новый Структура());
			ЗаполнитьТоварыПоОснованиюУпр(Сделка, СтруктураПолученияСделок);
			СтруктураПолученияСделок.Вставить("ИзменитьСделкуВШапке"    , Ложь);
			ЗаполнитьВозвратнуюТаруПоОснованиюУпр(Сделка, СтруктураПолученияСделок);
		КонецЕсли;
		//    //Серегин М.В. 08.05.2015 12:11:20 устарело 
		//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.НаборнаяВедомостьДляВозврата") Тогда
		//        ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		//        Сделка = Основание;
		//        Дата = ТекущаяДата();
		//        Контрагент = Основание.ИнтернетМагазин;
		//        ДоговорКонтрагента = Основание.ИнтернетМагазин.ОсновнойДоговорКонтрагента;
		//        //Найдем склад текущего пользовотеля
		//        ТекушийПользователь = глЗначениеПеременной("глТекущийПользователь");
		//        Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекушийПользователь, "ОсновнойСклад");
		//        СкладМагазина = Основание.СкладМагазина;
		//        Если Склад = Неопределено Тогда 
		//            Склад = Справочники.Склады.ПустаяСсылка();
		//        КонецЕсли;
		//        Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
		//            НайденнаяСтрока = Основание.Заказы.Найти(ТекСтрокаТовары.ЗаказРеализация,"Заказ");
		//            Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда 
		//                Если НайденнаяСтрока.ЗаказНайден Тогда
		//                    НоваяСтрока = Товары.Добавить();
		//                    ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
		//                    НоваяСтрока.Склад = Склад;
		//                    НоваяСтрока.ВнешнийНомерЗаказа = НайденнаяСтрока.Заказ.НомерВнешнегоЗаказа;
		//                    НоваяСтрока.Качество = Справочники.Качество.Новый;
		//                    НоваяСтрока.ТипЗаказа = НайденнаяСтрока.ТипЗаказа;
		//                    НоваяСтрока.КоличествоМестТовара = НайденнаяСтрока.КоличествоМестТовара;
		//                КонецЕсли;
		//            КонецЕсли;
		//        КонецЦикла;
		//    //Серегин М.В. 15.05.2015 11:48:37
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	Если мСтруктураПараметровВзаиморасчетов.Свойство("Дата") Тогда
		мСтруктураПараметровВзаиморасчетов.Дата = ТекущаяДата();
	КонецЕсли;	
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// МАС - 20.03.2018 - чтобы принимать решение об отправке писем после записи --->> 	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	// <<--- МАС
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//// Проверка на наличие созданного отправления
	//Если ЗначениеЗаполнено(oz_CarriageID) Тогда	
	//	Отказ = Истина;	
	//КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если СкладИзШапки 
			Или НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если СкладИзШапки 
			Или НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, ?(Не ПоставщикуВыставляетсяСчетФактураНаВозврат, "СчетФактураПолученный", "СчетФактураВыданный"));
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, ?(Не ПоставщикуВыставляетсяСчетФактураНаВозврат, "СчетФактураПолученный", "СчетФактураВыданный"));
	
	// МАС - 19.03.2018 - № --->> 
	Если ДополнительныеСвойства["РежимЗаписи"] = РежимЗаписиДокумента.Проведение И СтатусВозврата = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.ПодготовленКВозврату") И НЕ ЗначениеЗаполнено(мПартнерУведомлен) Тогда			
		УведомитьПартнераПоПочте();		
		мПартнерУведомлен = Истина;
	ИначеЕсли ДополнительныеСвойства["РежимЗаписи"] = РежимЗаписиДокумента.ОтменаПроведения И ОтправлениеРасформировано И НЕ ЗначениеЗаполнено(мПартнерУведомлен) Тогда	
		УведомитьПартнераПоПочте(Истина);
		мПартнерУведомлен = Истина;
	КонецЕсли;	
	// <<--- МАС 
	
	
КонецПроцедуры

// Заполняет по шапке документа дерево параметров, нужных при проведении
// (упр. учет)
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)
	
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	//
	//Если мУдалятьДвижения Тогда
	//	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	//КонецЕсли;
	
	// Подготовим структуру шапки документа
	//ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
	
	//// Проверим правильность заполнения шапки документа
	//ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	//
	//// Подготовим таблицу товаров для проведения.
	//ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	//
	//// Получим необходимые данные для проведения и проверки заполнения данных 
	//// по табличной части "Возвратная тара".
	//СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	//СтруктураПолей.Удалить ("Количество");
	//СтруктураПолей.Вставить("КоличествоДок"      , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	//СтруктураПолей.Вставить("Заказ"              , "Заказ");
	//СтруктураПолей.Вставить("Склад"              , "Склад");
	//СтруктураПолей.Вставить("ВидСклада"          , "Склад.ВидСклада");
	//СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	//					  "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	//РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	//// Подготовим таблицу тары для проведения.
	//ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	//// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	//ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	//
	//ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;   
	//
	//мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	//
	//СтруктураПодготовленныхТаблиц = Новый Структура("Товары", ТаблицаПоТоварам);
	//мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	//УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	//                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
	//												Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ.
	//Если ОтражатьВБухгалтерскомУчете 
	// Или ОтражатьВНалоговомУчете Тогда
	//	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
	//	                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
	//	                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
	//	                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	//КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		//ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
		УстановитьСтатусСкладскогоУчета();
		//Серегин М.В. 17.06.2015 14:38:29 движения п орегистру накопления Расчет услуг СД
		Если СтатусВозврата = Справочники.СтатусыСкладскогоУчета.ВозвратПринятМагазином Тогда
			ДвиженияРасчетУслугСД();
		КонецЕсли;
		//Серегин М.В. 17.06.2015 14:38:56 
		Если Не Контрагент.Пустая() Тогда
			Если СокрЛП(Контрагент.Код) <> "Shop_181" Тогда
				//Выбираем режим, в зависимости от режима будет обновлен статус 1 - в пути, 2 - вернули (3 - подготовлен)
				Если СтатусВозврата = Справочники.СтатусыСкладскогоУчета.ВозвратОтправлен Тогда
					Отказ = ОбновлениеСтатусовВАдминке(1);
					// МАС - 13.04.2018 - № --->> 
				ИначеЕсли СтатусВозврата = Справочники.СтатусыСкладскогоУчета.ПодготовленКВозврату Тогда
					Отказ = ОбновлениеСтатусовВАдминке(3);
					// <<--- МАС 	
				ИначеЕсли СтатусВозврата = Справочники.СтатусыСкладскогоУчета.ВозвратПринятМагазином Тогда
					Отказ = ОбновлениеСтатусовВАдминке(2);
				КонецЕсли;     
			КонецеСли;	
		КонецеСли;	
	КонецЕсли;
	
	
	
	// МАС - 06.03.2018 - списание остатков при установке статуса "ПринятИМ" --->> 
	Если НЕ Отказ Тогда
		
		Если ЭтотОбъект.СтатусВозврата = Справочники.СтатусыСкладскогоУчета.ВозвратПринятМагазином 
			И ТипЗнч(ЭтотОбъект.Сделка) = Тип("ДокументСсылка.НаборнаяВедомостьДляВозврата") 
			И ЭтотОбъект.Сделка.НовыйМеханизм Тогда			
			
			СписокМеню = ПолучитьСписокСтатусов();			
			ДокументОбъектГУССУ = Документы.ГрупповаяУстановкаСтатусовСкладскогоУчета.СоздатьДокумент();
			ДокументОбъектГУССУ.Дата = ТекущаяДата();
			ДокументОбъектГУССУ.Основание = Ссылка;
			ДокументОбъектГУССУ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ДокументОбъектГУССУ.СтатусСкладскогоУчета = СтатусВозврата;
			
			ДокументОбъектГУССУ.ТерминалОбработки = ТерминалОбработки; //Задача № 3047 
			
			Выборка = ПолучитьДанныеЗаказы();
			
			Пока Выборка.Следующий() Цикл      
				СтрокаТЧ = ДокументОбъектГУССУ.СтатусыЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ,Выборка);
				СтрокаТЧ.СтатусСкладскогоУчета = СтатусВозврата;				
			КонецЦикла;
			
			ДокументОбъектГУССУ.Записать(РежимЗаписиДокумента.Проведение);
			//ТекущийСтатусВозврата = СтатусВозврата;
			
		КонецЕсли;	
		
	КонецЕсли;
	// <<--- МАС	
	
	
	// МАС - 12.07.2018 - № --->> 
	Если НЕ Отказ Тогда				
		МассивЗаказов = Товары.ВыгрузитьКолонки("Реализация");
		МассивЗаказов.Свернуть("Реализация");
		МодифицироватьПризнакОбработкиВозврата(МассивЗаказов, Истина);			
	КонецЕсли;
	// <<--- МАС 
	
	
	
КонецПроцедуры // ОбработкаПроведения()


Функция ПолучитьДанныеЗаказы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ВозвратТоваровПоставщикуТовары.Ссылка.СтатусВозврата КАК СтатусСкладскогоУчета,
	|   РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|   ВозвратТоваровПоставщикуТовары.ТипЗаказа КАК ТипЗаказа
	|ИЗ
	|   Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|       ПО (ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер, ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Номер) = РеализацияТоваровУслуг.Номер)
	|ГДЕ
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|   ВозвратТоваровПоставщикуТовары.Ссылка.СтатусВозврата,
	|   РеализацияТоваровУслуг.Ссылка,
	|   ВозвратТоваровПоставщикуТовары.ТипЗаказа";
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//    "ВЫБРАТЬ
	//    |	ВозвратТоваровПоставщикуТовары.Ссылка.СтатусВозврата КАК СтатусСкладскогоУчета,
	//    |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	//    |	ВозвратТоваровПоставщикуТовары.ТипЗаказа КАК ТипЗаказа,
	//    |	ВЫБОР
	//    |		КОГДА СтатусыСкладскогоУчета.Период ЕСТЬ NULL
	//    |			ТОГДА ЛОЖЬ
	//    |		ИНАЧЕ ИСТИНА
	//    |	КОНЕЦ КАК ЕстьСтатусПринятИМ
	//    |ПОМЕСТИТЬ ВТ
	//    |ИЗ
	//    |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	//    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
	//    |			ПО РеализацияТоваровУслуг.Ссылка = СтатусыСкладскогоУчета.Заказ
	//    |				И (СтатусыСкладскогоУчета.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ВозвратПринятМагазином))
	//    |				И (СтатусыСкладскогоУчета.Регистратор <> &Ссылка)
	//    |		ПО (ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер, ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Номер) = РеализацияТоваровУслуг.Номер)
	//    |ГДЕ
	//    |	ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &Ссылка
	//    |
	//    |СГРУППИРОВАТЬ ПО
	//    |	ВозвратТоваровПоставщикуТовары.Ссылка.СтатусВозврата,
	//    |	РеализацияТоваровУслуг.Ссылка,
	//    |	ВозвратТоваровПоставщикуТовары.ТипЗаказа,
	//    |	ВЫБОР
	//    |		КОГДА СтатусыСкладскогоУчета.Период ЕСТЬ NULL
	//    |			ТОГДА ЛОЖЬ
	//    |		ИНАЧЕ ИСТИНА
	//    |	КОНЕЦ
	//    |;
	//    |
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |ВЫБРАТЬ
	//    |	ВТ.СтатусСкладскогоУчета КАК СтатусСкладскогоУчета,
	//    |	ВТ.Заказ КАК Заказ,
	//    |	ВТ.ТипЗаказа КАК ТипЗаказа,
	//    |	ВТ.ЕстьСтатусПринятИМ КАК ЕстьСтатусПринятИМ
	//    |ИЗ
	//    |	ВТ КАК ВТ
	//    |ГДЕ
	//    |	ВТ.ЕстьСтатусПринятИМ = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
	
КонецФункции // ПолучитьДанныеТЧЗаказы()


Функция ПолучитьСписокСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ИсторияСтатусовСкладскогоУчетаВозвратовПоставщикуСрезПоследних.СтатусСкладскогоУчета
	|ПОМЕСТИТЬ ВТ_СтатусВозврата
	|ИЗ
	|   РегистрСведений.ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.СрезПоследних КАК ИсторияСтатусовСкладскогоУчетаВозвратовПоставщикуСрезПоследних
	|ГДЕ
	|   ИсторияСтатусовСкладскогоУчетаВозвратовПоставщикуСрезПоследних.ВозвратПоставщику = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   СтатусыСкладскогоУчета.Ссылка КАК СтатусСкладскогоУчета
	|ИЗ
	|   ВТ_СтатусВозврата КАК ВТ_СтатусВозврата
	|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
	|       ПО (ВТ_СтатусВозврата.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ПодготовленКВозврату))
	|ГДЕ
	|   СтатусыСкладскогоУчета.Ссылка В(&Массив1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   СтатусыСкладскогоУчета.Ссылка
	|ИЗ
	|   ВТ_СтатусВозврата КАК ВТ_СтатусВозврата
	|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
	|       ПО (ВТ_СтатусВозврата.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ВозвратОтправлен))
	|ГДЕ
	|   СтатусыСкладскогоУчета.Ссылка В(&Массив2)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Массив1 = Новый Массив;
	Массив1.Добавить(Справочники.СтатусыСкладскогоУчета.ВозвратОтправлен);
	Массив1.Добавить(Справочники.СтатусыСкладскогоУчета.ВозвратПринятМагазином);
	Запрос.УстановитьПараметр("Массив1", Массив1);
	Массив2 = Новый Массив;
	Массив2.Добавить(Справочники.СтатусыСкладскогоУчета.ВозвратПринятМагазином);
	Запрос.УстановитьПараметр("Массив2", Массив2);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокМеню = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокМеню.Добавить(ВыборкаДетальныеЗаписи.СтатусСкладскогоУчета);
	КонецЦикла;
	Возврат СписокМеню;
	
КонецФункции // ПолучитьСписокСтатусов()


Функция ОбновлениеСтатусовВАдминке(Режим) Экспорт
	
	Сп = Новый Массив;
	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	Для Каждого Тек Из Товары Цикл
		Если Не ЗначениеЗаполнено(Тек.ДокументПоступления) Тогда
			Продолжить;
		КонецеСли;	
		Если Сп.Найти(Тек.ДокументПоступления.Ссылка) = Неопределено Тогда
			//Серегин М.В. 21.08.2015 11:12:07 проверка на наличие реализации
			Реализация = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.ДокументПоступления.Номер);
			Если НЕ ЗначениеЗаполнено(Реализация) Тогда //нет реализации нельзя дальше двигаться, Отказ ставим в истину
				Сообщить("По поступлению №: "+Тек.ДокументПоступления.Номер+" нет документа ""Реализация товаров и услуг""!!!",СтатусСообщения.Важное);
				Возврат Истина;
			КонецЕсли;
			//Серегин М.В. 21.08.2015 11:12:46 
			Сп.Добавить(Тек.ДокументПоступления.Ссылка);
		КонецеСли;	
	КонецЦикла;	
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	СтатусыЗаказов.Заказ КАК Заказ,
	|	РеализацияТоваровУслуг.Номер КАК Номер
	|ИЗ
	|	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ((ВЫРАЗИТЬ(СтатусыЗаказов.Заказ КАК Документ.РеализацияТоваровУслуг)) = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	СтатусыЗаказов.Статус = 313
	|	И СтатусыЗаказов.ДокументРегистратор = &Док";
	Зап.УстановитьПараметр("Док", Ссылка);	
	
	Рез = Зап.Выполнить();
	Если Не Рез.Пустой() Тогда
		Возврат Ложь;
	КонецеСли;	
	
	
	
	Для Каждого Тек Из Сп Цикл
		
		Струк = Новый Структура;
		Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Тек.Номер);
		Если Дост.Пустая() Тогда
			Вар = 1;	
		Иначе	
			Струк.Вставить("Доставка", Дост.Номер);
			Най = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(КонецДня(Дата), Струк);
			Если Най.РезультатДоставки.Пустая() Тогда
				Вар = 2;
			Иначе
				Вар = 1;
			КонецеСли;	
		КонецеСли;	
		
		//Серегин М.В. 21.08.2015 11:04:52 костыль, находим реализации
		Реализация = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.Номер);
		//Серегин М.В. 21.08.2015 11:04:54
		
		//блок закомментирован 10.06.2019, дублирование отправки статусов, begin
		// Задача № 2813
		//СтатусКОтправке = Неопределено;
		//Если Вар = 2 И Режим = 1 Тогда
		//	СтатусКОтправке = 312;
		//ИначеЕсли Вар = 2 И Режим = 2 Тогда
		//	СтатусКОтправке = 313;
		//ИначеЕсли Вар = 2 И Режим = 3 Тогда
		//	СтатусКОтправке = 314;
		//ИначеЕсли Вар = 1 И Режим = 1 Тогда
		//	СтатусКОтправке = 412;
		//ИначеЕсли Вар = 1 И Режим = 2 Тогда
		//	СтатусКОтправке = 413;
		//ИначеЕсли Вар = 1 И Режим = 3 Тогда
		//	СтатусКОтправке = 413;
		//КонецЕсли;
		//
		//Если Не СтатусКОтправке = Неопределено Тогда
		//	
		//	Если РаботаСоСтатусамиЗаказовСервер.СохранитьСтатус(Реализация, СтатусКОтправке, Ссылка,,ТерминалОбработки) Тогда
		//		//Задача № 3027	//Если lem.СохранитьСтатус(Реализация, СтатусКОтправке, Ссылка) Тогда
		//		
		//		Если (ЗначениеЗаполнено(ОтправленныйСтатус) И ОтправленныйСтатус <> СтатусКОтправке) ИЛИ (НЕ ЗначениеЗаполнено(ОтправленныйСтатус)) Тогда
		//			
		//			ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ProcessingTerminal", Число(ТерминалОбработки.Код));// Задача № 3027
		//			
		//			МассивСтатусов = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(Тек.Номер, СтатусКОтправке, "Возврат поставщику",,,,ДопПараметрыСтатуса);
		//			СтруктураВозврата = mas.ОтправитьМассивСтатусовЗаказов(МассивСтатусов);
		//			
		//			Если  СтруктураВозврата.Успешно Тогда
		//				ОтправленныйСтатус = СтатусКОтправке;
		//			КонецЕслИ;
		//			
		//		КонецЕСли;
		//		
		//	КонецЕСли;
		//	
		//КонецЕсли;	
		// Задача № 2813
		
		//блок закомментирован 10.06.2019, дублирование отправки статусов, end
		
		
		
		
		// Отключено в рамках Задача № 2813
		//   	Если Вар = 2 Тогда
		//   		Если Режим = 1 Тогда
		//   			СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Тек.Номер), "ЧГ=") + ",312,'Возврат поставщику'";
		//   			Если lem.СохранитьСтатус(Реализация, 312, Ссылка) Тогда
		//   				Если (ЗначениеЗаполнено(ОтправленныйСтатус) И ОтправленныйСтатус <> 312) ИЛИ (НЕ ЗначениеЗаполнено(ОтправленныйСтатус)) Тогда				
		//   					ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   					Если ДС <> Неопределено Тогда
		//   						ОтправленныйСтатус = 312;
		//   					КонецЕсли;
		//   				КонецЕсли;					
		//   			КонецЕСли;	
		//   		ИначеЕСли Режим = 2 Тогда
		//   			СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Тек.Номер), "ЧГ=") + ",313,'Возврат поставщику'";
		//   			Если lem.СохранитьСтатус(Реализация, 313, Ссылка) Тогда
		//   				//ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   				Если (ЗначениеЗаполнено(ОтправленныйСтатус) И ОтправленныйСтатус <> 313) ИЛИ (НЕ ЗначениеЗаполнено(ОтправленныйСтатус)) Тогда				
		//   					ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   					Если ДС <> Неопределено Тогда
		//   						ОтправленныйСтатус = 313;
		//   					КонецЕсли;
		//   				КонецЕсли;
		//   			КонецеСли;
		//   		// МАС - 13.04.2018 - № --->> 
		//   		ИначеЕСли Режим = 3 Тогда
		//   			СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Тек.Номер), "ЧГ=") + ",314,'Возврат поставщику'";
		//   			Если lem.СохранитьСтатус(Реализация, 314, Ссылка) Тогда
		//   				//ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   				Если (ЗначениеЗаполнено(ОтправленныйСтатус) И ОтправленныйСтатус <> 314) ИЛИ (НЕ ЗначениеЗаполнено(ОтправленныйСтатус)) Тогда				
		//   					ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   					Если ДС <> Неопределено Тогда
		//   						ОтправленныйСтатус = 314;
		//   					КонецЕсли;
		//   				КонецЕсли;
		//   			КонецеСли;
		//
		//   			
		//   			
		//   		// <<--- МАС 			
		//   		КонецеСли;
		//   	ИначеЕсли Вар = 1 Тогда
		//   		Если Режим = 1 Тогда
		//   			СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Тек.Номер), "ЧГ=") + ",412,'Возврат поставщику'";
		//   			Если lem.СохранитьСтатус(Реализация, 412, Ссылка) Тогда
		//   				//ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   				Если (ЗначениеЗаполнено(ОтправленныйСтатус) И ОтправленныйСтатус <> 412) ИЛИ (НЕ ЗначениеЗаполнено(ОтправленныйСтатус)) Тогда				
		//   					ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   					Если ДС <> Неопределено Тогда
		//   						ОтправленныйСтатус = 412;
		//   					КонецЕсли;
		//   				КонецЕсли;
		//   			КонецеСли;	
		//   		ИначеЕСли Режим = 2 Тогда
		//   			СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Тек.Номер), "ЧГ=") + ",413,'Возврат поставщику'";
		//   			Если lem.СохранитьСтатус(Реализация, 413, Ссылка) Тогда
		//   				//ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   				Если (ЗначениеЗаполнено(ОтправленныйСтатус) И ОтправленныйСтатус <> 413) ИЛИ (НЕ ЗначениеЗаполнено(ОтправленныйСтатус)) Тогда				
		//   					ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   					Если ДС <> Неопределено Тогда
		//   						ОтправленныйСтатус = 413;
		//   					КонецЕсли;
		//   				КонецЕсли;
		//   			КонецеСли;	
		//   		// МАС - 13.04.2018 - № --->> 
		//   		ИначеЕСли Режим = 3 Тогда
		//   			СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Тек.Номер), "ЧГ=") + ",414,'Возврат поставщику'";
		//   			Если lem.СохранитьСтатус(Реализация, 414, Ссылка) Тогда
		//   				//ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   				Если (ЗначениеЗаполнено(ОтправленныйСтатус) И ОтправленныйСтатус <> 414) ИЛИ (НЕ ЗначениеЗаполнено(ОтправленныйСтатус)) Тогда				
		//   					ДС = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
		//   					Если ДС <> Неопределено Тогда
		//   						ОтправленныйСтатус = 414;
		//   					КонецЕсли;
		//   				КонецЕсли;
		//   			КонецеСли;
		//   		// <<--- МАС 	
		//   		КонецеСли;
		//   	КонецеСли;	
		// Отключено в рамках Задача № 2813	
		
		
		// МАС - 23.04.2018 - №2232 --->>    нихуя не работает, закомменчено 28.08.2018
		Если Режим = 3 Тогда
			
			//ПутьКФайлу = КаталогВременныхФайлов() +  "" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_SetOrdersProperties_" + СокрЛП(Строка(ЭтотОбъект.Номер)) + ".xml";			
			
			ЗаписьXML = Новый ЗаписьXML; 
			//Открываем файл для записи, указываем кодировку
			ЗаписьXML.УстановитьСтроку("UTF-8");
			//ЗаписьXML.ОткрытьФайл(ПутьКФайлу, "UTF-8"); 
			// Записываем объявление XML 
			ЗаписьXML.ЗаписатьОбъявлениеXML();  
			
			// Начало элемента Properties 
			ЗаписьXML.ЗаписатьНачалоЭлемента("Properties"); 
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Order");
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("OrderId");
			ЗаписьXML.ЗаписатьТекст(Формат(Сокрлп(Тек.Номер), "ЧГ="));
			ЗаписьXML.ЗаписатьКонецЭлемента(); // OrderId
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Properties"); 
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Property");  // Property
			ЗаписьXML.ЗаписатьНачалоЭлемента("Name");
			ЗаписьXML.ЗаписатьТекст("ReturnReceipt");
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Name
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Value");
			ЗаписьXML.ЗаписатьТекст(ЭтотОбъект.Номер);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Value
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("TypeName");
			ЗаписьXML.ЗаписатьТекст("Int32");
			ЗаписьXML.ЗаписатьКонецЭлемента(); // TypeName
			ЗаписьXML.ЗаписатьКонецЭлемента();  // Property
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Property");  // Property
			ЗаписьXML.ЗаписатьНачалоЭлемента("Name");
			ЗаписьXML.ЗаписатьТекст("ReturnReceiptDate");
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Name
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Value");				
			//ЗаписьXML.ЗаписатьТекст(Евген.ДатаВSQL(ЭтотОбъект.Дата, Ложь));
			ЗаписьXML.ЗаписатьТекст(ДатаВSQL(ЭтотОбъект.Дата, Ложь));
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Value
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("TypeName");
			ЗаписьXML.ЗаписатьТекст("DateTime");
			ЗаписьXML.ЗаписатьКонецЭлемента(); // TypeName
			ЗаписьXML.ЗаписатьКонецЭлемента();  // Property
			
			//+Степанов Задача № 3167
			Если Сделка.Метаданные().Реквизиты.Найти("СтатусВозврата") <> Неопределено И Сделка.СтатусВозврата = Справочники.СтатусыСкладскогоУчета.Возврат2 Тогда
				ReturnReceiptType = "2";
			Иначе
				ReturnReceiptType = "1";	
			КонецЕсли;	
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Property");  // Property
			ЗаписьXML.ЗаписатьНачалоЭлемента("Name");
			ЗаписьXML.ЗаписатьТекст("ReturnReceiptType");
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Name
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Value");
			ЗаписьXML.ЗаписатьТекст(ReturnReceiptType);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Value
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("TypeName");
			ЗаписьXML.ЗаписатьТекст("Int32");
			ЗаписьXML.ЗаписатьКонецЭлемента(); // TypeName
			ЗаписьXML.ЗаписатьКонецЭлемента();  // Property
			//-Степанов
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// Конец элемента Properties
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
			СтрXML = ЗаписьXML.Закрыть();
			
			// пихаем в админку	
			
			//ТекстЗапроса = "EXEC SetOrdersProperties " + "'" + СтрXML + "'";	
			
			// Якурнов: 
			// >>>>>>>> Начало 23.10.2018 16:53:46 >>>>>>>>
			СтрРед = СтрЗаменить(СтрXML,"<?xml version=""1.0"" encoding=""UTF-8""?>",""); 
			
			СтрНач = "DECLARE @Properties xml ="  + "'" + СтрРед + "'" + Символы.ПС;
			
			ТекстЗапроса = СтрНач + "EXEC SetOrdersProperties @Properties";
			
			// <<<<<<<< Конец 23.10.2018 16:53:46 <<<<<<<<
			
			Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);		
			//<<--- МАС
			
		КонецЕсли;
		
		// Якурнов 22.10.2018 16:19:37 Перенесено  
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	


Функция ДатаВSQL(Д, ЭтоКонец) 
	
	Возврат Формат(Год(Д),"ЧГ=0") + "-" + ЛидирующийНоль(Месяц(Д)) + "-" + ЛидирующийНоль(День(Д)) + " " +
	ЛидирующийНоль(Час(Д)) + ":" + ЛидирующийНоль(Минута(Д)) + ":" + ЛидирующийНоль(Секунда(Д)) +
	?(ЭтоКонец, ".998", "");
	
КонецФункции


Функция ЛидирующийНоль(зн) 
	
	Если Зн < 10 Тогда
		Возврат "0"+Зн;
	Иначе
		Возврат Зн;
	КонецЕсли;
	
КонецФункции


Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	//Удаление движений истории статусов
	//НаборЗаписей = РегистрыСведений.ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Период.Установить(Дата);
	//НаборЗаписей.Отбор.ВозвратПоставщику.Установить(Ссылка);
	//НаборЗаписей.Записать();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.Период КАК Период,
	|	ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.ВозвратПоставщику КАК ВозвратПоставщику
	|ИЗ
	|	РегистрСведений.ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику КАК ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику
	|ГДЕ
	|	ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.ВозвратПоставщику = &Ссылка
	|	И ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.ДокументРегистратор = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ВозвратПоставщику.Установить(Выборка.ВозвратПоставщику);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// МАС - 12.03.2018 - Распроведение и пометка на удаление дока ГрупповаяУстановкаСтатусовСкладскогоУчета --->> 
	Если ТипЗнч(ЭтотОбъект.Сделка) = Тип("ДокументСсылка.НаборнаяВедомостьДляВозврата") И НЕ ЭтотОбъект.Сделка.Пустая() И ЭтотОбъект.Сделка.НовыйМеханизм Тогда		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ГрупповаяУстановкаСтатусовСкладскогоУчета.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ГрупповаяУстановкаСтатусовСкладскогоУчета КАК ГрупповаяУстановкаСтатусовСкладскогоУчета
		|ГДЕ
		|	ГрупповаяУстановкаСтатусовСкладскогоУчета.Основание = &Ссылка
		|	И ГрупповаяУстановкаСтатусовСкладскогоУчета.ПометкаУдаления = ЛОЖЬ
		|	И ГрупповаяУстановкаСтатусовСкладскогоУчета.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ВозвратПринятМагазином)");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Рез = Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() Цикл		
			ДокОбъект = Рез.Ссылка.ПолучитьОбъект();	
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокОбъект.ПометкаУдаления = Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);		
		КонецЦикла;		
	КонецЕсли;
	// <<--- МАС 
	
	
	// МАС - 12.07.2018 - № --->> 
	Если НЕ Отказ Тогда				
		МассивЗаказов = Товары.ВыгрузитьКолонки("Реализация");
		МассивЗаказов.Свернуть("Реализация");
		МодифицироватьПризнакОбработкиВозврата(МассивЗаказов, Ложь);			
	КонецЕсли;
	// <<--- МАС
	
	
КонецПроцедуры

// Функция удаляет из исходной таблицы строки по которым не надо делать резерв товаров под заказ покупателя.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТабТовары)
	
	// Если в ТЧ есть ссылки на заказы, то надо списать резерв
	ТаблицаПоТоварамИзРезерва = ТабТовары.Скопировать();
	ТаблицаПоТоварамИзРезерва.Колонки.Добавить("ДокументРезерва");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.Заказ;
			//для ТЧ Возвратная тара в таблице хранятся положительные количества, для них не требуется изменять знак
			СтрокаТаблицы.Количество = ?(СтрокаТаблицы.Количество>0,СтрокаТаблицы.Количество,-СтрокаТаблицы.Количество);
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамИзРезерва;
	
КонецФункции // УдалитьСтрокиБезРезерваПодЗаказПокупателя()

Функция ПечатьДМ() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ТолькоПросмотр = Истина;
	//ТабДок.Защита = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	//ТабДок.Показать();
	
	Макет = ПолучитьМакет("Макет");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	СтрокаМ = Макет.ПолучитьОбласть("СтрокаДет");
	Итоги = Макет.ПолучитьОбласть("СтрокаИт");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	//Договор = Справочники.Контрагенты.НайтиПоКоду("Shop_169").ОсновнойДоговорКонтрагента;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Покупатель,
	|	ВозвратТоваровПоставщику.СуммаДокумента,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка = Запрос.Выполнить().Выбрать();
	
	Если ЗапросШапка.Следующий() Тогда
		Шапка.Параметры.Заполнить(ЗапросШапка);
		//СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Покупатель, ЗапросШапка.Дата);
		Шапка.Параметры.Грузополучатель = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Контрагент, ЗапросШапка.Дата), "ПолноеНаименование,ИНН, КПП, ЮридическийАдрес,");		
		//Шапка.Параметры.Контрагент = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование");
		//Шапка.Параметры.ИНН = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН");
		//Шапка.Параметры.КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП");
		//Шапка.Параметры.Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес");
		Шапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
		Шапка.Параметры.ТекДата = Формат(ЗапросШапка.Дата, "ДФ=dd.MM.yyyy");
		Шапка.Параметры.Договор = "Договор № " + ЗапросШапка.ДоговорКонтрагента.Номер + " от " + Формат(ЗапросШапка.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
		
		ТабДок.Вывести(Шапка);
	КонецЕсли;	
	
	ЗапросПоТоварам = Новый  Запрос;
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателя.НомерВнешнегоЗаказа, """") КАК НомерВнешнегоЗаказа2
	|ПОМЕСТИТЬ ВТВОП
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0) КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Сумма, 0) КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК НДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТВОП.НомерВнешнегоЗаказа2, ИСТИНА) = ИСТИНА
	|			ТОГДА ЕСТЬNULL(РеализацияТоваровУслуг.НомерВнешнегоЗаказа, """") + ЕСТЬNULL(ВТВОП.НомерВнешнегоЗаказа2, """")
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслуг.НомерВнешнегоЗаказа, """")
	|	КОНЕЦ КАК НомерЗаказа,
	|	ВозвратТоваровПоставщикуТовары.КоличествоМестТовара
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВОП КАК ВТВОП
	|		ПО ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Ссылка = ВТВОП.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаказа,
	|	Номенклатура
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма)
	|ПО
	|	НомерЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВОП";
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);							
	Результат = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Количество = 0;
	СчСтрокОбщий = 0;
	НПП = 1;
	ИтС = 0;
	ИтК = 0;
	массивСтрокСИтогом = Новый Массив;
	Пока Результат.Следующий() Цикл 
		массивСтрокСИтогом.Очистить();
		
		//Дет = Результат.Выбрать();
		//СчСтрок = 0;
		//Пока Дет.Следующий() Цикл
		//	СчСтрок = СчСтрок + 1;
		//	
		//	СтрокаМ.Параметры.Заполнить(Дет);
		//	СтрокаМ.Параметры.Арт = СокрЛП(Дет.Номенклатура.Артикул);
		//	СтрокаМ.Параметры.НПП = НПП;
		//	//СчСтрокОбщий = СчСтрокОбщий + 1;
		//	//ТабДок.Вывести(СтрокаМ);
		//	массивСтрокСИтогом.Добавить(СтрокаМ);
		//	
		//КонецЦикла;	
		//Помещается = Ложь;
		//Если ТабДок.ПроверитьВывод(массивСтрокСИтогом) тогда	
		//	Помещается = Истина;
		//КонецеСли;	
		//
		//Если Не Помещается Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецеСли;
		
		Дет = Результат.Выбрать();
		СчСтрок = 0;
		Пока Дет.Следующий() Цикл
			СчСтрок = СчСтрок + 1;
			
			СтрокаМ.Параметры.Заполнить(Дет);
			СтрокаМ.Параметры.Арт = СокрЛП(Дет.Номенклатура.Артикул);
			СтрокаМ.Параметры.НПП = НПП;
			СчСтрокОбщий = СчСтрокОбщий + 1;
			ТабДок.Вывести(СтрокаМ);
			
		КонецЦикла;	
		
		
		Обл = ТабДок.Область(16 + СчСтрокОбщий - СчСтрок, 5, 15 + СчСтрокОбщий, 5);
		Обл.Объединить();
		Обл.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
		Итоги.Параметры.Заполнить(Результат);
		ТабДок.Вывести(Итоги);
		СчСтрокОбщий = СчСтрокОбщий + 1;
		Попытка
			ИтК = ИтК + Результат.Количество;
			ИтС = ИтС + Результат.Сумма;
		исключение
			рр = 1;
		КонецПопытки;
		НПП = НПП + 1;
		
		Обл = ТабДок.Область(15 + СчСтрокОбщий - СчСтрок, 2, 14 + СчСтрокОбщий, 2);
		Обл.Объединить();
		Обл.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЦикла;
	
	Подвал.Параметры.СтрПропись = "Всего количество переданных заказов составило " + Строка(НПП - 1) + " (" + Лев(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь"), СтрДлина(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь")) - 6) + "), на " + Формат(ИтС, "ЧДЦ=2") + " руб. (" + ЧислоПрописью(ИтС,,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2") + ").";  
	
	//НДС = Результат.Итог("НДС");
	//ФормСтрока = "Л = ru_RU; ДП = Истина";
	//ПарПредмета="рубль,рубля,рублей,м,копейка,копейки,копеек,ж,2";
	//Итоги.Параметры.СуммаCНДС = НРег(ЧислоПрописью(Награда, ФормСтрока, ПарПредмета));
	//Итоги.Параметры.СуммаБезНДС = НРег(ЧислоПрописью((Награда-НДС), ФормСтрока, ПарПредмета));
	//Итоги.Параметры.СуммаПереданныхЗаказов = НРег(ЧислоПрописью(Награда, ФормСтрока, ПарПредмета));
	
	Итоги.Параметры.Сумма = ИтС;
	Итоги.Параметры.Количество = ИтК;
	Итоги.Параметры.ндИтог = "Итого:";
	ТабДок.Вывести(Итоги);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСверху = 3;
	ТабДок.ПолеСнизу = 3;
	ТабДок.ПолеСлева = 3;
	ТабДок.ПолеСправа = 3;
	ТабДок.ИмяПараметровПечати = "Возврат_ДетскийМир";
	ТабДок.Вывести(Подвал);
	
	Возврат ТабДок;
КонецФункции // Печать(ТабДок, ВозвратТовара)()

Функция Печать003() Экспорт
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ТолькоПросмотр = Истина;
	//ТабДок.Защита = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	//ТабДок.Показать();
	
	Макет = ПолучитьМакет("Макет");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	СтрокаМ = Макет.ПолучитьОбласть("СтрокаДет");
	//Итоги = Макет.ПолучитьОбласть("СтрокаИт");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	//Договор = Справочники.Контрагенты.НайтиПоКоду("Shop_169").ОсновнойДоговорКонтрагента;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Покупатель,
	|	ВозвратТоваровПоставщику.СуммаДокумента,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка = Запрос.Выполнить().Выбрать();
	
	Если ЗапросШапка.Следующий() Тогда
		Шапка.Параметры.Заполнить(ЗапросШапка);
		//СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Покупатель, ЗапросШапка.Дата);
		//Шапка.Параметры.Грузополучатель = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Контрагент, ЗапросШапка.Дата), "ПолноеНаименование,ИНН, КПП, ЮридическийАдрес,");		
		//Шапка.Параметры.Контрагент = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование");
		//Шапка.Параметры.ИНН = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН");
		//Шапка.Параметры.КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП");
		//Шапка.Параметры.Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес");
		Шапка.Параметры.НомерДок = "Накладная на возврат № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + " от " + Формат(Ссылка.Дата, "ДЛФ=DD");
		Шапка.Параметры.ДатаНакладной = Формат(ЗапросШапка.Дата, "ДФ=dd.MM.yyyy");
		//Шапка.Параметры.Договор = "Договор № " + ЗапросШапка.ДоговорКонтрагента.Номер + " от " + Формат(ЗапросШапка.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
		Шапка.Параметры.Агент = "ООО «Логистическая компания «Стриж»";
		Шапка.Параметры.Адрес = "г. Москва, Огородный проезд, д. 20, стр. 1";
		Шапка.Параметры.Телефон = "--------";
		
		Шапка.Параметры.Принципал = "ООО ""БТ Торговые решения""";
		Шапка.Параметры.АдресСклада = "----------";
		Шапка.Параметры.ТелефонПринципал = "+7 (495) 54-54-003";
		Шапка.Параметры.Основание = "";
		
		ТабДок.Вывести(Шапка);
	КонецЕсли;	
	
	ЗапросПоТоварам = Новый  Запрос;
	//ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	//						|	ВозвратТоваровОтПокупателя.Ссылка,
	//						|	ЕСТЬNULL(ВозвратТоваровОтПокупателя.НомерВнешнегоЗаказа, """") КАК НомерВнешнегоЗаказа2
	//						|ПОМЕСТИТЬ ВТВОП
	//						|ИЗ
	//						|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	//						|;
	//						|
	//						|////////////////////////////////////////////////////////////////////////////////
	//						|ВЫБРАТЬ
	//						|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	//						|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0) КАК Количество,
	//						|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//						|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	//						|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Сумма, 0) КАК Сумма,
	//						|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК НДС,
	//						|	ЕСТЬNULL(РеализацияТоваровУслуг.НомерВнешнегоЗаказа, """") + ЕСТЬNULL(ВТВОП.НомерВнешнегоЗаказа2, """") КАК НомерЗаказа
	//						|ИЗ
	//						|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	//						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	//						|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
	//						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//						|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	//						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВОП КАК ВТВОП
	//						|		ПО ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Ссылка = ВТВОП.Ссылка
	//						|ГДЕ
	//						|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	//						|
	//						|УПОРЯДОЧИТЬ ПО
	//						|	НомерЗаказа,
	//						|	Номенклатура
	//						|ИТОГИ
	//						|	СУММА(Количество),
	//						|	СУММА(Сумма)
	//						|ПО
	//						|	НомерЗаказа
	//						|;
	//						|
	//						|////////////////////////////////////////////////////////////////////////////////
	//						|УНИЧТОЖИТЬ ВТВОП";
	
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателя.НомерВнешнегоЗаказа, """") КАК НомерВнешнегоЗаказа2
	|ПОМЕСТИТЬ ВТВОП
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0) КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Сумма, 0) КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК НДС,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.НомерВнешнегоЗаказа, """") + ЕСТЬNULL(ВТВОП.НомерВнешнегоЗаказа2, """") КАК НомерЗаказа,
	|	ВозвратТоваровПоставщикуТовары.ПричинаВозврата,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВОП КАК ВТВОП
	|		ПО ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Ссылка = ВТВОП.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаказа,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВОП";
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);							
	Результат_ = ЗапросПоТоварам.Выполнить().Выгрузить();   //ОбходРезультатаЗапроса.ПоГруппировкам
	Результат_.Колонки.Добавить("НомЧ");
	Для Каждого Тек Из Результат_ Цикл
		Попытка
			Тек.НомЧ = Число(Тек.НомерЗаказа);
		Исключение
			
		КонецПопытки;	
	КонецЦикла;	
	
	
	Результат_.Сортировать("НомЧ");
	
	Количество = 0;
	СчСтрокОбщий = 0;
	НПП = 1;
	ИтС = 0;
	ИтК = 0;
	массивСтрокСИтогом = Новый Массив;
	Для Каждого Результат Из Результат_ Цикл 
		//массивСтрокСИтогом.Очистить();
		
		
		ЗаполнитьЗначенияСвойств(СтрокаМ.Параметры, Результат);
		СтрокаМ.Параметры.нпп = нпп;
		//Дет = Результат.Выбрать();
		//СчСтрок = 0;
		//Пока Дет.Следующий() Цикл
		//	СчСтрок = СчСтрок + 1;
		//	
		//	СтрокаМ.Параметры.Заполнить(Дет);
		//	СтрокаМ.Параметры.Арт = СокрЛП(Дет.Номенклатура.Артикул);
		//	СтрокаМ.Параметры.НПП = НПП;
		//	//СчСтрокОбщий = СчСтрокОбщий + 1;
		//	//ТабДок.Вывести(СтрокаМ);
		//	массивСтрокСИтогом.Добавить(СтрокаМ);
		//	
		//КонецЦикла;	
		//Помещается = Ложь;
		//Если ТабДок.ПроверитьВывод(массивСтрокСИтогом) тогда	
		//	Помещается = Истина;
		//КонецеСли;	
		//
		//Если Не Помещается Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецеСли;
		
		//Дет = Результат.Выбрать();
		//СчСтрок = 0;
		//Пока Дет.Следующий() Цикл
		//	СчСтрок = СчСтрок + 1;
		//	
		//	СтрокаМ.Параметры.Заполнить(Дет);
		//	СтрокаМ.Параметры.Арт = СокрЛП(Дет.Номенклатура.Артикул);
		//	СтрокаМ.Параметры.НПП = НПП;
		//	СчСтрокОбщий = СчСтрокОбщий + 1;
		//	ТабДок.Вывести(СтрокаМ);
		//	
		//КонецЦикла;	
		
		
		//Обл = ТабДок.Область(16 + СчСтрокОбщий - СчСтрок, 5, 15 + СчСтрокОбщий, 5);
		//Обл.Объединить();
		//Обл.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		//Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
		//Итоги.Параметры.Заполнить(Результат);
		//ТабДок.Вывести(Итоги);
		//СчСтрокОбщий = СчСтрокОбщий + 1;
		//Попытка
		//	ИтК = ИтК + Результат.Количество;
		//	ИтС = ИтС + Результат.Сумма;
		//исключение
		//	рр = 1;
		//КонецПопытки;
		НПП = НПП + 1;
		ТабДок.Вывести(СтрокаМ);
		ИтС = ИтС + Результат.Сумма;
		//Обл = ТабДок.Область(15 + СчСтрокОбщий - СчСтрок, 2, 14 + СчСтрокОбщий, 2);
		//Обл.Объединить();
		//Обл.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		//Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЦикла;
	
	//Подвал.Параметры.СтрПропись = "Всего количество переданных заказов составило " + Строка(НПП - 1) + " (" + Лев(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь"), СтрДлина(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь")) - 6) + "), на " + Формат(ИтС, "ЧДЦ=2") + " руб. (" + ЧислоПрописью(ИтС,,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2") + ").";  
	Подвал.Параметры.КолСтрока = Лев(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь"), СтрДлина(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь")) - 6);
	Подвал.Параметры.ИтогоСтоимость = ИтС;
	
	//НДС = Результат.Итог("НДС");
	//ФормСтрока = "Л = ru_RU; ДП = Истина";
	//ПарПредмета="рубль,рубля,рублей,м,копейка,копейки,копеек,ж,2";
	//Итоги.Параметры.СуммаCНДС = НРег(ЧислоПрописью(Награда, ФормСтрока, ПарПредмета));
	//Итоги.Параметры.СуммаБезНДС = НРег(ЧислоПрописью((Награда-НДС), ФормСтрока, ПарПредмета));
	//Итоги.Параметры.СуммаПереданныхЗаказов = НРег(ЧислоПрописью(Награда, ФормСтрока, ПарПредмета));
	
	//Итоги.Параметры.Сумма = ИтС;
	//Итоги.Параметры.Количество = ИтК;
	//Итоги.Параметры.ндИтог = "Итого:";
	ТабДок.Вывести(Подвал);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСверху = 3;
	ТабДок.ПолеСнизу = 3;
	ТабДок.ПолеСлева = 3;
	ТабДок.ПолеСправа = 3;
	ТабДок.ИмяПараметровПечати = "Возврат_ММ";
	//ТабДок.Вывести(Подвал);
	
	Возврат ТабДок;
КонецФункции	

Процедура ВыгрузкаTopDeliveryWS() Экспорт //urn:DetMir.ru:TransComp:Common http://89.175.169.9:18297/dir/wsdl?p=sa/20ded8f9431739239005bc9bdbc6a3d5
	Если Не ЗначениеЗаполнено(НомерТранспортнойНакладной) Тогда
		#Если Клиент Тогда
			Предупреждение("Укажите номер ТН (вкладка ""Дополнительно"")!");
		#КонецЕсли
		Возврат;
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Упаковщик) Тогда
		#Если Клиент Тогда
			Предупреждение("Укажите упаковщика (вкладка ""Дополнительно"")!");
		#КонецЕсли
		Возврат;
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &ВыбДок
	|	И РеализацияТоваровУслуг.Номер В(&МасНомеров)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа";
	МасНомеров = Новый Массив;
	Таб = товары.Выгрузить(,"Номенклатура, ДокументПоступления, ВозвратТоваровОтПокупателя");
	Таб.Колонки.Добавить("НомерЗаказа");
	
	Для Каждого Тек Из Таб Цикл
		Если ЗначениеЗаполнено(Тек.ДокументПоступления) Тогда
			Тек.НомерЗаказа = Тек.ДокументПоступления.Номер;
		ИначеЕсли ЗначениеЗаполнено(Тек.ВозвратТоваровОтПокупателя) Тогда	
			Тек.НомерЗаказа = Тек.ВозвратТоваровОтПокупателя.Номер;
		КонецЕсли;	
	КонецЦикла;	
	
	МасНомеров = Таб.ВыгрузитьКолонку("НомерЗаказа");
	
	Зап.УстановитьПараметр("МасНомеров", МасНомеров);
	Зап.УстановитьПараметр("ВыбДок", ЭтотОбъект.Ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	
	
	//http://is.ixapek.dev.is.topdelivery.ru/api/soap/p/1.0/index.php?WSDL
	
	WSОпр = Новый WSОпределения("http://is.topdelivery.ru/api/soap/p/1.0/index.php?WSDL", "tdsoap", "fc7a00f11c1bfa9f5b69e0be9117738e");	
	Прокси = Новый WSПрокси(WSОпр, "http://is.topdelivery.ru/api/soap/p/1.0/", "partnerSoapGate", "partnerSoapGateSoap");
	
	
	Прокси.Пользователь = "tdsoap"; 
	Прокси.Пароль = "fc7a00f11c1bfa9f5b69e0be9117738e"; 
	
	
	Пакет = Прокси.ФабрикаXDTO.Пакеты.Получить("http://is.topdelivery.ru/api/soap/p/1.0/");
	
	
	ТипАут = Пакет.Получить("ctAuth");
	НовАут = Прокси.ФабрикаXDTO.Создать(ТипАут);
	
	НовАут.login = "strizh";
	НовАут.password = "CxO9uGHIds";
	
	
	ТипПарОтпр = Пакет.Получить("ctAddShipmentParams");
	НовПарОтпр = Прокси.ФабрикаXDTO.Создать(ТипПарОтпр);
	
	НовПарОтпр.packer = СокрЛП(Упаковщик.Наименование);
	
	ТипОтправка = Пакет.Получить("ctShipmentDirection");
	НовОтправка = Прокси.ФабрикаXDTO.Создать(ТипОтправка);
	НовОтправка.type = "TO_WEBSHOP";
	НовОтправка.receiverId = 598;
	НовОтправка.directionName = "TO_WEBSHOP" + "@" + Строка(НовОтправка.receiverId);
	
	НовПарОтпр.direction = НовОтправка;
	
	
	Пока Выб.Следующий() Цикл
		ТипЗаказ = Пакет.Получить("ctAddShipmentOrder");
		НовЗаказ = Прокси.ФабрикаXDTO.Создать(ТипЗаказ);
		
		
		ТипИдЗаказа = Пакет.Получить("ctOrderIdentity");
		НовИдЗаказа = Прокси.ФабрикаXDTO.Создать(ТипИдЗаказа);
		Ном2 = СтрПолучитьСтроку(СтрЗаменить(Выб.НомерВнешнегоЗаказа, "*", Символы.ПС), 2);
		
		//НовИдЗаказа.orderId = 0;
		НовИдЗаказа.barcode = Выб.НомерВнешнегоЗаказа;
		НовИдЗаказа.webshopNumber = Ном2;
		
		НовЗаказ.orderIdentity = НовИдЗаказа;
		
		//ТипГабариты = Пакет.Получить("ctOrderWeightVolume");
		//НовГабариты = Прокси.ФабрикаXDTO.Создать(ТипГабариты);
		//
		//ТипОбъем = Пакет.Получить("ctVolume");
		//НовОбъем = Прокси.ФабрикаXDTO.Создать(ТипОбъем);
		//
		//
		//НовГабариты.weight = 1;
		//
		//НовОбъем.length = 1;
		//НовОбъем.width = 1;
		//НовОбъем.height = 1;
		//
		//НовГабариты.Volume = НовОбъем;
		//
		//
		//НовЗаказ.sizes = НовГабариты;
		
		НовЗаказ.placesCount = 1;
		НовПарОтпр.orders.Добавить(НовЗаказ);
	КонецЦикла;	
	
	ТипОтправкаВПутиПар = Пакет.Получить("ctSetShipmentOnTheWayParams");
	НовОтправкаВпутиПар = Прокси.ФабрикаXDTO.Создать(ТипОтправкаВПутиПар);
	
	НовОтправкаВпутиПар.contacts = СокрЛП(Ответственный.Наименование);
	НовОтправкаВпутиПар.responsibleFace = 1;
	
	НовОтправкаВпутиПар.transportDocNumber = СокрЛП(НомерТранспортнойНакладной);
	
	ТипПарамЗабора = Пакет.Получить("ctShipmentIntakeParams");
	НовПарамЗабора = Прокси.ФабрикаXDTO.Создать(ТипПарамЗабора);
	
	НовПарамЗабора.need = 1;
	НовПарамЗабора.address = "Огородный проезд, д. 20, строение 1";
	НовПарамЗабора.contacts = СокрЛП(Ответственный.Наименование); 
	
	
	ТипИнтервал = Пакет.Получить("ctTimeInterval");
	НовИнтервал = Прокси.ФабрикаXDTO.Создать(ТипИнтервал);
	
	НовИнтервал.date = НачалоДня(ТекущаяДата() + 86400);
	НачД =  Формат(НачалоДня(ТекущаяДата()) + 1, "ДЛФ=T");
	Если СтрДлина(НачД) = 7 Тогда
		НачД = "0" + НачД;
	КонецеСли;
	
	НовИнтервал.bTime = НачалоДня(ТекущаяДата());
	НовИнтервал.eTime = КонецДня(ТекущаяДата());
	
	НовПарамЗабора.intakeDate = НовИнтервал; 
	
	НовОтправкаВпутиПар.intake = НовПарамЗабора;
	
	ТипМесто = Пакет.Получить("ctShipmentPlace");
	НовМесто = Прокси.ФабрикаXDTO.Создать(ТипМесто);
	
	НовМесто.number = 1;
	НовМесто.weight = 1;
	
	НовОтправкаВпутиПар.places.Добавить(НовМесто);
	
	НовПарОтпр.setOnTheWay = НовОтправкаВпутиПар;
	НовПарОтпр.freighterId = 0;
	
	
	Пар1 = "";
	Пар2 = "";
	Пар3 = "";
	//ЗаписьXML = Новый ЗаписьXML;	
	//        ЗаписьXML.УстановитьСтроку(); 
	//        ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	//  Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, НовПарОтпр);
	//    
	// СтрокаXML = ЗаписьXML.Закрыть();
	Прокси.addShipment(НовАут, НовПарОтпр, Пар1, Пар2, Пар3);
	
	ТекД = ТекущаяДата();
	
	Наб = РегистрыСведений.СтатусыВыгрузокTD.СоздатьНаборЗаписей();
	Наб.Отбор.Возврат.Установить(Ссылка);
	Наб.Отбор.Период.Установить(ТекД);
	
	Нов = Наб.Добавить();
	Нов.Возврат = Ссылка;
	Нов.Период = ТекД; 
	Нов.Номер =  Пар2.shipmentId;
	Нов.Статус = Пар2.status;
	Нов.Результат = Пар2.message;
	
	Наб.Записать();
	#Если Клиент Тогда
		Предупреждение("Отправка создана! (результат = " + СокрЛП(Нов.Результат) + ", статус = " + СокрЛП(Нов.Статус) + ", номер = " + СокрЛП(Нов.Номер) + ")");
	#КонецЕсли
	//Серегин М.В. 16.07.2015 16:24:17 
	СтатусВыгрузкиТД = Пар2.shipmentId; 
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
	КонецПопытки;
	//Серегин М.В. 16.07.2015 16:24:21 
КонецПроцедуры


//СтрокаКодов = "";

//МасКодов = Новый Массив;
//Для Каждого Тек Из Товары Цикл
//	К = "0";
//	Если ЗначениеЗаполнено(Тек.ДокументПоступления) Тогда
//		К = СокрЛП(Тек.ДокументПоступления.Номер);
//	ИначеЕсли Не Тек.ВозвратТоваровОтПокупателя.Пустая() Тогда
//		К = СокрЛП(Тек.ВозвратТоваровОтПокупателя.Номер);
//	Иначе	
//		Продолжить;
//	КонецеСли;
//	
//	Най = МасКодов.Найти(К);
//	Если Най = Неопределено Тогда
//		МасКодов.Добавить(К);
//	КонецеСли;	
//КонецЦикла;	
//
//Сч = 1;
//Для Каждого Тек Из МасКодов Цикл
//	Если Сч <> МасКодов.Количество() Тогда
//		СтрокаКодов = СтрокаКодов + Тек + ",";
//	Иначе
//		СтрокаКодов = СтрокаКодов + Тек;
//	КонецеСли;	
//	Сч = Сч + 1;
//КонецЦикла;	


//СтрокаЗапроса = "SELECT
//|	OP.orderId                      AS orderId,
//|	OP.skuId                        AS skuId,
//|	OP.count-isnull(OP.missedcount, 0)                        AS cnt,
//|	ISNULL(OP.fixedCount, OP.count) AS fixedCount,
//|	OP.PriceUSD * OP.USD2RUR        AS Price,
//|	P.internetShopId                AS Shop,
//|	ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name AS Name,
//|	P.code                          AS Articul,
//|	OD.weight                          AS weight
//|FROM
//|	_orderItems      OP  (NOLOCK)
//|INNER JOIN
//|	product          P   (NOLOCK) ON P.productId = OP.itemID
//|LEFT JOIN
//|	brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
//|LEFT JOIN
//|	objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
//|LEFT JOIN
//|	objectDescription OD (NOLOCK) ON P.productId = OD.objectId    AND OD.objectTypeId = 2			
//|LEFT JOIN
//|	category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
//|	WHERE OP.orderid IN(" + СтрокаКодов + ")
////|ORDER BY
////|	OL.modifyDate ASC,
////|	OL.orderId ASC,
////|	OP.eid ASC			
//|";
//RS = Евген.ЗапросКИнтернетМагазину(СтрокаЗапроса, евген.СоздатьПодключениеКИнтернетМагазину());
//ТабличнаяЧастьЗаказов = Евген.СоздатьТаблицу(RS, "orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, weight_Ч");

//Струк = Новый Структура;
//Струк.Вставить("skuId_Ч", Число(Тек.Номенклатура.Код));
//Струк.Вставить("orderId_Ч", К);
//
//
//НайПр = ТабличнаяЧастьЗаказов.НайтиСтроки(Струк);
//Если НайПр.Количество() = 0 Тогда
//	Продолжить;
//КонецеСли;	


//Заказ.ProductID = Число(НайПр[0].Articul);


Процедура ВыгрузкаДМ() Экспорт
	
	// МАС - 13.02.2018 - № --->> 
	//Прокси = WSСсылки.DM_4_WORK.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_MvmtDoc_OutService", "HTTP_Port");
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси = WSСсылки.DM_2022_TEST.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_MvmtDoc_OutService", "HTTP_Port");	
		Прокси.Пользователь = "WS_STRIZH";
		Прокси.Пароль = "Lq}28~br";
	Иначе
		
		//Прокси = WSСсылки.DM_2018_WORK.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_MvmtDoc_OutService", "HTTP_Port");	
		Прокси = WSСсылки.DM_2022_WORK.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_MvmtDoc_OutService", "HTTP_Port");	
		Прокси.Пользователь = "WS_STRIZH";
		Прокси.Пароль = "Os$4qS}bl";
	КонецеСли;	
	// <<--- МАС 
	
	
	////+++++Серегин М.В. 06.11.2015 17:49:00 Для теста
	//Прокси = WSСсылки.DM_4_test.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_MvmtDoc_OutService", "HTTP_Port");
	////-----Серегин М.В. 06.11.2015 17:49:19 
	
	//Прокси.Пользователь = "WS_STRIZH";
	//Прокси.Пароль = "UGEiW\5#(XUc\~}]~h";
	
	//Прокси.Пользователь = "WS_STRIZH_L";
	//Прокси.Пароль = "7AyS)+%5%R8AEz";
	
	//Прокси.Пользователь = "WS_STRIZH";
	//Прокси.Пароль = "Os$4qS}bl";
	
	
	ТипОтправка = Прокси.ФабрикаXDTO.Пакеты.Получить("urn:DetMir.ru:TransComp:Common").Получить("TransCompMvmtDoc");
	Отправка = Прокси.ФабрикаXDTO.Создать(ТипОтправка);
	Если СокрЛП(Контрагент.Код) = "Shop_428" Тогда
		Отправка.IDLogistic = "STRIZH";
	ИначеЕсли СокрЛП(Контрагент.Код) = "Shop_169" Тогда
		Отправка.IDLogistic = "MCLog";
	КонецеСли;
	
	Отправка.DocType = "ReturnOrder";
	Отправка.ReturnDate = Дата;
	Отправка.DocNumber = СокрЛП(Номер) + "_" + Формат(Год(Дата), "ЧГ=");
	
	МассивЗаказов = Прокси.ФабрикаXDTO.Создать(ТипОтправка.Свойства.Получить("Orders").Тип);
	
	Для Каждого Тек Из Товары Цикл
		
		Если Тек.Количество = 0 Тогда
			Сообщить("В строке № " + Строка(Тек.НомерСтроки) + " не указано количество. Передача накладной будет прекращена!", СтатусСообщения.ОченьВажное);
			Возврат;
		КонецеСли;	
		
		Заказ = Прокси.ФабрикаXDTO.Создать(ТипОтправка.Свойства.Получить("Orders").Тип.Свойства.Получить("Order").Тип);
		
		Заказ.ID = Тек.ВнешнийНомерЗаказа;
		
		К = 0;
		Если ЗначениеЗаполнено(Тек.ДокументПоступления) Тогда
			К = Число(Тек.ДокументПоступления.Номер);
		ИначеЕсли Не Тек.ВозвратТоваровОтПокупателя.Пустая() Тогда
			К = Число(Тек.ВозвратТоваровОтПокупателя.Номер);
		Иначе	
			Продолжить;
		КонецеСли;
		
		
		Заказ.ProductID = СокрЛП(Тек.Номенклатура.Артикул);
		Заказ.ProductName = СокрЛП(Тек.Номенклатура.Наименование);
		Заказ.ProductQTY = Тек.Количество;
		
		МассивЗаказов.Order.Добавить(Заказ);
	КонецЦикла; 
	Отправка.Orders = МассивЗаказов;
	//Серегин М.В. 26.08.2015 18:45:42
	Если ЗначениеЗаполнено(СкладМагазина) Тогда 
		Отправка.Storage = СокрЛП(СкладМагазина.ИдентификаторНаправления);
	КонецЕсли;
	//Серегин М.В. 26.08.2015 18:47:36 
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку(); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Отправка);
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Прокси.TransComp_MvmtDoc_Out(Отправка);
	
	Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РассылкиКонтрагентов.Почта
		|ИЗ
		|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
		|ГДЕ
		|	РассылкиКонтрагентов.Контрагент = &Контрагент
		|	И РассылкиКонтрагентов.ТипРассылки = &ТипРассылки";
		Запрос.УстановитьПараметр("Контрагент", Контрагент.Ссылка);
		Запрос.УстановитьПараметр("ТипРассылки", Перечисления.ТипыРассылки.СкладскаяРассылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		МасП = Новый Массив;
		
		Выб = РезультатЗапроса.Выбрать();
		Пока Выб.Следующий() Цикл
			МасП.Добавить(Выб.Почта);
		КонецЦикла;	
		
		
		Г = СокрЛП(Номер) + "_" + Формат(Дата, "ДФ=yyyy-MM-dd");
		Таб = ПечатьДМ();
		ФП = КаталогВременныхФайлов() +  "\" + Строка(Г) + "_Upload_WoC.xls";
		
		Таб.Записать(ФП, ТипФайлаТабличногоДокумента.XLS);
		
		Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			lem.ОтправитьСообщение(МасП, "Возврат товара", , ФП, "Логистическая компания ""Стриж""");
		КонецеСли;	
	КонецеСли;
КонецПроцедуры	


Функция СтатусВыгрузкиДМ() Экспорт
	
	//Прокси = WSСсылки.DM_StatusDlv.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_GetDlvStatus_OutService", "HTTP_Port");
	Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		//Прокси = WSСсылки.DM_StatusDlv_2018_09_27.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_GetDlvStatus_OutService", "HTTP_Port");
		Прокси = WSСсылки.DM_StatusDlv_2022_05_25.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_GetDlvStatus_OutService", "HTTP_Port");
		Прокси.Пользователь = "WS_STRIZH";
		Прокси.Пароль = "Os$4qS}bl";
		
	Иначе
		//Прокси = WSСсылки.DM_StatusDlv_2018_09_27_test.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_GetDlvStatus_OutService", "HTTP_Port");
		Прокси = WSСсылки.DM_StatusDlv_2022_05_25_test.СоздатьWSПрокси("urn:DetMir.ru:TransComp:Common", "TransComp_GetDlvStatus_OutService", "HTTP_Port");
		Прокси.Пользователь = "WS_STRIZH";
		Прокси.Пароль = "Lq}28~br";
		
	КонецеСли;	
	//Прокси.Пользователь = "WS_STRIZH";
	//Прокси.Пароль = "UGEiW\5#(XUc\~}]~h";
	//Прокси.Пользователь = "WS_STRIZH_L";
	//Прокси.Пароль = "7AyS)+%5%R8AEz";
	
	//Прокси.Пользователь = "WS_STRIZH";
	//Прокси.Пароль = "Os$4qS}bl";
	
	Пар1 = "";
	Пар2 = "";
	Пар3 = "";
	Пар4 = "";
	ДополнительныеПараметры = Новый Структура;
	
	Попытка
		Если СокрЛП(Контрагент.Код) = "Shop_428" Тогда
			//Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			//	Прокси.GetDlvStatus_Sync("STRIZH", СокрЛП(Номер) + "_" + Формат(Год(Дата), "ЧГ="), Пар1, Пар2, Пар3);
			//Иначе
			Прокси.GetDlvStatus_Sync("STRIZH", СокрЛП(Номер) + "_" + Формат(Год(Дата), "ЧГ="), Пар1, Пар2, Пар3, Пар4);
			//КонецЕсли;	
		ИначеЕсли СокрЛП(Контрагент.Код) = "Shop_169" Тогда 
			Прокси.GetDlvStatus_Sync("MCLog", СокрЛП(Номер) + "_" + Формат(Год(Дата), "ЧГ="), Пар1, Пар2, Пар3);
		КонецеСли;	
		Струк = Новый Структура;
		ДополнительныеПараметры.Вставить("дмНомерСозданногоДокумента", Пар1);
		ДополнительныеПараметры.Вставить("ТипОперации", Перечисления.ТипыОперацийИнтеграцияДМПоВозвратам.ПроверкаСтатусаВозврата);
		//Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		//	Струк.Вставить("Ответ", Пар3);
		//	ДополнительныеПараметры.Вставить("дмКомментарийКСтатусу", Пар3);
		//	
		//	Струк.Вставить("Ответ", Пар2);
		//	ДополнительныеПараметры.Вставить("дмСтатус", Пар2);
		//	
		//Иначе
		Струк.Вставить("Ответ", Пар4);
		ДополнительныеПараметры.Вставить("дмКомментарийКСтатусу", Пар4);
		
		Струк.Вставить("Ответ", Пар3);
		ДополнительныеПараметры.Вставить("дмСтатус", Пар3);
		
		Струк.Вставить("Ответ", Пар2);
		ДополнительныеПараметры.Вставить("дмНомерЕдиницыОбработки", Пар2);
		
		//КонецеСли;
		
		
		РаботаСВозвратамиСервер.ЗаписатьДополнительныеПараметрыПоВозврату(Ссылка, ДополнительныеПараметры);
		
		Возврат Струк;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьТабДокШКТранспортировки() Экспорт
	ТабДок = Новый ТабличныйДокумент;
	Мак = ПолучитьМакет("ШК_ЕО_ДМ");
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПараметрыИнтеграцииВозвратКомитентуСрезПоследних.дмНомерЕдиницыОбработки КАК дмНомерЕдиницыОбработки,
	|	ПараметрыИнтеграцииВозвратКомитентуСрезПоследних.Документ.Номер КАК НомерДокумента
	|ИЗ
	|	РегистрСведений.ПараметрыИнтеграцииВозвратКомитенту.СрезПоследних КАК ПараметрыИнтеграцииВозвратКомитентуСрезПоследних
	|ГДЕ
	|	ПараметрыИнтеграцииВозвратКомитентуСрезПоследних.Документ = &Док
	|	И ПараметрыИнтеграцииВозвратКомитентуСрезПоследних.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийИнтеграцияДМПоВозвратам.ПроверкаСтатусаВозврата)";
	Зап.УстановитьПараметр("Док", Ссылка);
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Мак.Параметры.Штрихкод = may.ШтрихкодCode128(Выб.дмНомерЕдиницыОбработки);
		Мак.Параметры.НаимШК = Выб.дмНомерЕдиницыОбработки;
		Мак.Параметры.НомерДок = Выб.НомерДокумента;
		ТабДок.Вывести(Мак);
	Иначе
		Сообщить("Отсутствуют данные о возврате! Проверьте статус возврата в ДМ!", СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат ТабДок;
КонецФункции

Процедура ВыгрузкаTopDeliveryWS_2() Экспорт 
	Если Не ЗначениеЗаполнено(НомерТранспортнойНакладной) Тогда
		#Если Клиент Тогда
			Предупреждение("Укажите номер ТН (вкладка ""Дополнительно"")!");
		#КонецЕсли
		Возврат;
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Упаковщик) Тогда
		#Если Клиент Тогда
			Предупреждение("Укажите упаковщика (вкладка ""Дополнительно"")!");
		#КонецЕсли
		Возврат;
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа,
	|	РеализацияТоваровУслуг.ВладелецТовара.ПолучательID КАК ПолучательID
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &ВыбДок
	|	И РеализацияТоваровУслуг.Номер В(&МасНомеров)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа,
	|	РеализацияТоваровУслуг.ВладелецТовара.ПолучательID
	|ИТОГИ ПО
	|	ПолучательID";
	МасНомеров = Новый Массив;
	Таб = товары.Выгрузить(,"Номенклатура, ДокументПоступления, ВозвратТоваровОтПокупателя");
	Таб.Колонки.Добавить("НомерЗаказа");
	
	Для Каждого Тек Из Таб Цикл
		Если ЗначениеЗаполнено(Тек.ДокументПоступления) Тогда
			Тек.НомерЗаказа = Тек.ДокументПоступления.Номер;
		ИначеЕсли ЗначениеЗаполнено(Тек.ВозвратТоваровОтПокупателя) Тогда	
			Тек.НомерЗаказа = Тек.ВозвратТоваровОтПокупателя.Номер;
		КонецЕсли;	
	КонецЦикла;	
	
	МасНомеров = Таб.ВыгрузитьКолонку("НомерЗаказа");
	
	Зап.УстановитьПараметр("МасНомеров", МасНомеров);
	Зап.УстановитьПараметр("ВыбДок", ЭтотОбъект.Ссылка);
	
	ВыбОбщ = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	//http://is.ixapek.dev.is.topdelivery.ru/api/soap/p/1.0/index.php?WSDL
	
	WSОпр = Новый WSОпределения("http://is.topdelivery.ru/api/soap/p/1.0/index.php?WSDL", "tdsoap", "fc7a00f11c1bfa9f5b69e0be9117738e");	
	Прокси = Новый WSПрокси(WSОпр, "http://is.topdelivery.ru/api/soap/p/1.0/", "partnerSoapGate", "partnerSoapGateSoap");
	
	
	Прокси.Пользователь = "tdsoap"; 
	Прокси.Пароль = "fc7a00f11c1bfa9f5b69e0be9117738e"; 
	
	
	Пакет = Прокси.ФабрикаXDTO.Пакеты.Получить("http://is.topdelivery.ru/api/soap/p/1.0/");
	ТекД = ТекущаяДата();
	
	СтрОтпр = "";
	Пока ВыбОбщ.Следующий() Цикл
		ТипАут = Пакет.Получить("ctAuth");
		НовАут = Прокси.ФабрикаXDTO.Создать(ТипАут);
		
		НовАут.login = "strizh";
		НовАут.password = "CxO9uGHIds";
		
		
		ТипПарОтпр = Пакет.Получить("ctAddShipmentParams");
		НовПарОтпр = Прокси.ФабрикаXDTO.Создать(ТипПарОтпр);
		
		НовПарОтпр.packer = СокрЛП(Упаковщик.Наименование);
		
		ТипОтправка = Пакет.Получить("ctShipmentDirection");
		НовОтправка = Прокси.ФабрикаXDTO.Создать(ТипОтправка);
		Если ЗначениеЗаполнено(ВыбОбщ.получательID) Тогда
			Стр_ = СтрЗаменить(СокрЛП(ВыбОбщ.получательID), "@", Символы.ПС);
			Стр_ = СтрЗаменить(Стр_, "INTERCITY", "TRANSFER");
			НовОтправка.type = СтрПолучитьСтроку(Стр_, 1);
			НовОтправка.receiverId = СтрПолучитьСтроку(Стр_, 2);		
			НовОтправка.directionName = СокрЛП(ВыбОбщ.получательID);
		Иначе	
			НовОтправка.type = "TO_WEBSHOP";
			НовОтправка.receiverId = 598;
			НовОтправка.directionName = "TO_WEBSHOP" + "@" + Строка(НовОтправка.receiverId);
		КонецеСли;	
		
		
		НовПарОтпр.direction = НовОтправка;
		
		Выб = ВыбОбщ.Выбрать();
		Пока Выб.Следующий() Цикл
			ТипЗаказ = Пакет.Получить("ctAddShipmentOrder");
			НовЗаказ = Прокси.ФабрикаXDTO.Создать(ТипЗаказ);
			
			
			ТипИдЗаказа = Пакет.Получить("ctOrderIdentity");
			НовИдЗаказа = Прокси.ФабрикаXDTO.Создать(ТипИдЗаказа);
			Ном2 = СтрПолучитьСтроку(СтрЗаменить(Выб.НомерВнешнегоЗаказа, "*", Символы.ПС), 2);
			
			//НовИдЗаказа.orderId = 0;
			НовИдЗаказа.barcode = Выб.НомерВнешнегоЗаказа;
			НовИдЗаказа.webshopNumber = Ном2;
			
			НовЗаказ.orderIdentity = НовИдЗаказа;
			
			//ТипГабариты = Пакет.Получить("ctOrderWeightVolume");
			//НовГабариты = Прокси.ФабрикаXDTO.Создать(ТипГабариты);
			//
			//ТипОбъем = Пакет.Получить("ctVolume");
			//НовОбъем = Прокси.ФабрикаXDTO.Создать(ТипОбъем);
			//
			//
			//НовГабариты.weight = 1;
			//
			//НовОбъем.length = 1;
			//НовОбъем.width = 1;
			//НовОбъем.height = 1;
			//
			//НовГабариты.Volume = НовОбъем;
			//
			//
			//НовЗаказ.sizes = НовГабариты;
			
			НовЗаказ.placesCount = 1;
			НовПарОтпр.orders.Добавить(НовЗаказ);
		КонецЦикла;	
		
		ТипОтправкаВПутиПар = Пакет.Получить("ctSetShipmentOnTheWayParams");
		НовОтправкаВпутиПар = Прокси.ФабрикаXDTO.Создать(ТипОтправкаВПутиПар);
		
		НовОтправкаВпутиПар.contacts = СокрЛП(Ответственный.Наименование);
		НовОтправкаВпутиПар.responsibleFace = 1;
		
		НовОтправкаВпутиПар.transportDocNumber = СокрЛП(НомерТранспортнойНакладной);
		
		ТипПарамЗабора = Пакет.Получить("ctShipmentIntakeParams");
		НовПарамЗабора = Прокси.ФабрикаXDTO.Создать(ТипПарамЗабора);
		
		НовПарамЗабора.need = 1;
		НовПарамЗабора.address = "Огородный проезд, д. 20, строение 1";
		НовПарамЗабора.contacts = СокрЛП(Ответственный.Наименование); 
		
		
		ТипИнтервал = Пакет.Получить("ctTimeInterval");
		НовИнтервал = Прокси.ФабрикаXDTO.Создать(ТипИнтервал);
		
		НовИнтервал.date = НачалоДня(ТекущаяДата() + 86400);
		НачД =  Формат(НачалоДня(ТекущаяДата()) + 1, "ДЛФ=T");
		Если СтрДлина(НачД) = 7 Тогда
			НачД = "0" + НачД;
		КонецеСли;
		
		НовИнтервал.bTime = НачалоДня(ТекущаяДата());
		НовИнтервал.eTime = КонецДня(ТекущаяДата());
		
		НовПарамЗабора.intakeDate = НовИнтервал; 
		
		НовОтправкаВпутиПар.intake = НовПарамЗабора;
		
		ТипМесто = Пакет.Получить("ctShipmentPlace");
		НовМесто = Прокси.ФабрикаXDTO.Создать(ТипМесто);
		
		НовМесто.number = 1;
		НовМесто.weight = 1;
		
		НовОтправкаВпутиПар.places.Добавить(НовМесто);
		
		НовПарОтпр.setOnTheWay = НовОтправкаВпутиПар;
		Если НовОтправка.type = "TO_WEBSHOP" Тогда
			НовПарОтпр.freighterId = 0;
		Иначе	
			НовПарОтпр.freighterId = 7;
		КонецеСли;	
		
		
		Пар1 = "";
		Пар2 = "";
		Пар3 = "";
		ЗаписьXML = Новый ЗаписьXML;	
		ЗаписьXML.УстановитьСтроку(); 
		ЗаписьXML.ЗаписатьОбъявлениеXML(); 
		
		Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, НовПарОтпр);
		
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Хр = Новый ХранилищеЗначения(СтрокаXML, новый СжатиеДанных(9));
		
		Прокси.addShipment(НовАут, НовПарОтпр, Пар1, Пар2, Пар3);
		
		
		
		Наб = РегистрыСведений.СтатусыВыгрузокTD.СоздатьНаборЗаписей();
		Наб.Отбор.Возврат.Установить(Ссылка);
		Наб.Отбор.Период.Установить(ТекД);
		
		Нов = Наб.Добавить();
		Нов.Возврат = Ссылка;
		Нов.Период = ТекД; 
		Нов.Номер =  Пар2.shipmentId;
		Нов.Статус = Пар2.status;
		Нов.Результат = Пар2.message;
		Нов.ТипОтправки = НовОтправка.directionName;
		Нов.Данные = Хр;
		
		Наб.Записать();
		СтрОтпр = СтрОтпр + "Отправка создана! (результат = " + СокрЛП(Нов.Результат) + ", статус = " + СокрЛП(Нов.Статус) + ", номер = " + СокрЛП(Нов.Номер) + ")" + Символы.ПС;
		
		//Серегин М.В. 16.07.2015 16:24:17 
		СтатусВыгрузкиТД = Пар2.shipmentId; 
		//Серегин М.В. 16.07.2015 16:24:21 
	КонецЦикла;
	//Серегин М.В. 20.07.2015 10:59:38 
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
	КонецПопытки;
	//Серегин М.В. 20.07.2015 10:59:40 
	#Если Клиент Тогда
		Предупреждение(СтрОтпр);
	#КонецеСли	
КонецПроцедуры


Процедура УстановитьСтатусСкладскогоУчета()
	
	Движения.СтатусыСкладскогоУчета.Очистить();
	Движения.СтатусыСкладскогоУчета.Записывать = Истина;
	
	// МАС - 25.06.2018 - при статусе "Возвращен в ИМ" движения делает док Групповая Установка --->> 
	//Если СтатусВозврата.Пустая() Тогда		
	Если СтатусВозврата.Пустая() 
		ИЛИ (СтатусВозврата = Справочники.СтатусыСкладскогоУчета.ВозвратПринятМагазином И ТипЗнч(ЭтотОбъект.Сделка) = Тип("ДокументСсылка.НаборнаяВедомостьДляВозврата") И ЭтотОбъект.Сделка.НовыйМеханизм) Тогда
		// <<--- МАС 	
		Возврат;
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|   ВозвратТоваровПоставщикуТовары.Ссылка.СтатусВозврата КАК СтатусСкладскогоУчета,
	|   РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Дата КАК Период,
	|   ВЫБОР
	|       КОГДА ВозвратТоваровПоставщикуТовары.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.ПустаяСсылка)
	|           ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|       ИНАЧЕ ВозвратТоваровПоставщикуТовары.ТипЗаказа
	|   КОНЕЦ КАК ТипЗаказа
	|ИЗ
	|   Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|       ПО (ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер, ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Номер) = РеализацияТоваровУслуг.Номер)
	|ГДЕ
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &Док
	|
	|СГРУППИРОВАТЬ ПО
	|   ВозвратТоваровПоставщикуТовары.Ссылка.СтатусВозврата,
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Дата,
	|   РеализацияТоваровУслуг.Ссылка,
	|   ВЫБОР
	|       КОГДА ВозвратТоваровПоставщикуТовары.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.ПустаяСсылка)
	|           ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|       ИНАЧЕ ВозвратТоваровПоставщикуТовары.ТипЗаказа
	|   КОНЕЦ";
	
	Зап.УстановитьПараметр("Док", Ссылка);
	Рез = Зап.Выполнить().Выгрузить();
	
	Для Каждого Тек Из Рез Цикл
		Нов = Движения.СтатусыСкладскогоУчета.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
		Если НЕ ЗначениеЗаполнено(Тек.ТипЗаказа) Тогда
			Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;        
		КонецЕсли;
	КонецЦикла;
	
	//Заполнение истории статусов
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ответственный",ПараметрыСеанса.ТекущийПользователь);
	ПараметрыОтбора.Вставить("СтатусВозврата", СтатусВозврата);
	
	//+++++Серегин М.В. 06.10.2015 14:56:30
	//НаборЗаписей = РегистрыСведений.ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Период.Установить(Дата);
	//НаборЗаписей.Отбор.ВозвратПоставщику.Установить(Ссылка);
	////НаборЗаписей.Отбор.Ответственный.Установить(ПараметрыСеанса.ТекущийПользователь);
	////НаборЗаписей.Отбор.СтатусСкладскогоУчета.Установить(СтатусВозврата);
	//
	//Запись = НаборЗаписей.Добавить();
	//Запись.Период = Дата;
	//Запись.ВозвратПоставщику = Ссылка;
	//Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//Запись.СтатусСкладскогоУчета = СтатусВозврата;
	//Запись.ДатаИзменения = ТекущаяДата();
	//НаборЗаписей.Записать();
	//-----Серегин М.В. 06.10.2015 15:00:34
	ТекДата = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекДата);
	НаборЗаписей.Отбор.ВозвратПоставщику.Установить(Ссылка);
	ЗаписьРегистра = НаборЗаписей.Добавить();
	ЗаписьРегистра.Период = ТекДата;
	ЗаписьРегистра.ВозвратПоставщику = Ссылка;
	ЗаписьРегистра.СтатусСкладскогоУчета = СтатусВозврата;
	ЗаписьРегистра.ДокументРегистратор = Ссылка;
	ЗаписьРегистра.ДатаИзменения = ТекДата;
	ЗаписьРегистра.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НаборЗаписей.Записать();
	
КонецПроцедуры	

Процедура ДвиженияРасчетУслугСД()
	
	Движения.РасчетУслугСД.Очистить();
	Движения.РасчетУслугСД.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Организация КАК ЮрЛицо,
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Контрагент КАК Партнер,
	|   НазначениеУслугПоКонтрагентам.Сумма,
	|   НазначениеУслугПоКонтрагентам.Показатель КАК ПоказательУслуг,
	|   ВозвратТоваровПоставщикуТовары.ВнешнийНомерЗаказа,
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Дата КАК Период,
	|   РеализацияТоваровУслуг.Ссылка КАК Реализация
	|ИЗ
	|   Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеУслугПоКонтрагентам КАК НазначениеУслугПоКонтрагентам
	|       ПО ВозвратТоваровПоставщикуТовары.Ссылка.Контрагент = НазначениеУслугПоКонтрагентам.Контрагент
	|           И (НазначениеУслугПоКонтрагентам.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаУслугСД.ВозвратТоваровПоставщику))
	|       ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|       ПО ВозвратТоваровПоставщикуТовары.ВнешнийНомерЗаказа = РеализацияТоваровУслуг.НомерВнешнегоЗаказа
	|ГДЕ
	|   ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Организация,
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Контрагент,
	|   НазначениеУслугПоКонтрагентам.Сумма,
	|   НазначениеУслугПоКонтрагентам.Показатель,
	|   ВозвратТоваровПоставщикуТовары.ВнешнийНомерЗаказа,
	|   ВозвратТоваровПоставщикуТовары.Ссылка.Дата,
	|   РеализацияТоваровУслуг.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|   Реализация
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТекстСообщения="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Если нет нужных записей в РС НазначениеУслугПоКонтрагентам и нет реализации движения не делаем
		Если ВыборкаДетальныеЗаписи.ПоказательУслуг = NULL Тогда
			//ТекстСообщения = ТекстСообщения + "По заказу: "+ ВыборкаДетальныеЗаписи.ВнешнийНомерЗаказа + " у контрагента не задана сумма услуги по возврату. Запись в регистр ""Расчет услуг СД"" не была сделана"+Символы.ПС;
			Продолжить;
		ИначеЕсли ВыборкаДетальныеЗаписи.Реализация = NULL Тогда
			//ТекстСообщения = ТекстСообщения + "По заказу: "+ ВыборкаДетальныеЗаписи.ВнешнийНомерЗаказа + " не найден документ реализации. Запись в регистр ""Расчет услуг СД"" не была сделана"+Символы.ПС;
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.РасчетУслугСД.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	//ошибки
	//Если ТекстСообщения <> "" Тогда
	//    #Если Клиент Тогда
	//        Сообщить(ТекстСообщения); 
	//    #КонецЕсли
	//КонецЕсли;
КонецПроцедуры

// Якурнов 30.10.2018 16:25:38 Переделка в экспортную 
Функция oz_ОтправитьДанныеВозвратовВОзон() Экспорт
	
	//Если СокрЛП(Контрагент.Код) = "Shop_612" Тогда		 
	МагазинОЗОН = ПараметрыСеанса.oz_МагазинOZON;
	
	Если МагазинОЗОН.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Контрагент <> МагазинОЗОН Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;	
	ТаблицаВозвратов = Новый ТаблицаЗначений;
	ТаблицаВозвратов.Колонки.Добавить("Заказ");
	ТаблицаВозвратов.Колонки.Добавить("id");
	ТаблицаВозвратов.Колонки.Добавить("name");	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	oz_ОтказныеЭкземплярыТоваров.Заказ,
	//               |	oz_ОтказныеЭкземплярыТоваров.Номенклатура,
	//               |	oz_ОтказныеЭкземплярыТоваров.Штрихкод,
	//               |	oz_ОтказныеЭкземплярыТоваров.Наименование,
	//               |	ВозвратТоваровПоставщикуЗаказыКВозврату.РезультатДоставки,
	//               |	oz_ОтказныеЭкземплярыТоваров.Номенклатура.Артикул КАК name,
	//               |	oz_ОтказныеЭкземплярыТоваров.id КАК id
	//               |ИЗ
	//               |	Документ.ВозвратТоваровПоставщику.ЗаказыКВозврату КАК ВозвратТоваровПоставщикуЗаказыКВозврату
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.oz_ОтказныеЭкземплярыТоваров КАК oz_ОтказныеЭкземплярыТоваров
	//               |		ПО ВозвратТоваровПоставщикуЗаказыКВозврату.Заказ = oz_ОтказныеЭкземплярыТоваров.Заказ
	//               |ГДЕ
	//               |	ВозвратТоваровПоставщикуЗаказыКВозврату.Ссылка = &Ссылка
	//               |	И oz_ОтказныеЭкземплярыТоваров.ПометкаУдаления = ЛОЖЬ
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	NULL,
	//               |	NULL,
	//               |	NULL,
	//               |	NULL,
	//               |	ВозвратТоваровПоставщикуЗаказыКВозврату.РезультатДоставки,
	//               |	ДополнительныеПараметрыЗаказа.nameOZON,
	//               |	ВозвратТоваровПоставщикуЗаказыКВозврату.Заказ.НомерВнешнегоЗаказа
	//               |ИЗ
	//               |	Документ.ВозвратТоваровПоставщику.ЗаказыКВозврату КАК ВозвратТоваровПоставщикуЗаказыКВозврату
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	//               |		ПО ВозвратТоваровПоставщикуЗаказыКВозврату.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	//               |ГДЕ
	//               |	ВозвратТоваровПоставщикуЗаказыКВозврату.РезультатДоставки = &РезультатДоставки_НЕВыполнена
	//               |	И ВозвратТоваровПоставщикуЗаказыКВозврату.Ссылка = &Ссылка";
	//РезультатДоставки_НЕВыполнена = Справочники.новаРезультатМестнойДоставки.НайтиПоКоду("000000003");
	//Запрос.УстановитьПараметр("РезультатДоставки_НЕВыполнена", РезультатДоставки_НЕВыполнена);
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	//Рез = Запрос.Выполнить().Выбрать();
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ oz_ОтказныеЭкземплярыТоваров.Ссылка) КАК Ссылка,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.oz_ЭкземплярыТоваровЗаказов КАК oz_ЭкземплярыТоваровЗаказов
	|		ПО ВозвратТоваровПоставщикуТовары.Номенклатура = oz_ЭкземплярыТоваровЗаказов.Номенклатура
	|			И ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = oz_ЭкземплярыТоваровЗаказов.Заказ.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.oz_ОтказныеЭкземплярыТоваров КАК oz_ОтказныеЭкземплярыТоваров
	|		ПО ВозвратТоваровПоставщикуТовары.Номенклатура = oz_ОтказныеЭкземплярыТоваров.Номенклатура
	|			И (oz_ОтказныеЭкземплярыТоваров.ПометкаУдаления = ЛОЖЬ)
	|			И ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = oz_ОтказныеЭкземплярыТоваров.Заказ.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Заказ.НомерВнешнегоЗаказа КАК name,
	|	ДополнительныеПараметрыЗаказа.nameOZON КАК id
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|ГДЕ
	|	ВТ.Ссылка = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	oz_ОтказныеЭкземплярыТоваров.Номенклатура.Артикул,
	|	oz_ОтказныеЭкземплярыТоваров.id
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.oz_ОтказныеЭкземплярыТоваров КАК oz_ОтказныеЭкземплярыТоваров
	|		ПО ВозвратТоваровПоставщикуТовары.Номенклатура = oz_ОтказныеЭкземплярыТоваров.Номенклатура
	|			И (oz_ОтказныеЭкземплярыТоваров.ПометкаУдаления = ЛОЖЬ)
	|			И ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = oz_ОтказныеЭкземплярыТоваров.Заказ.Номер
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.name,
	|	ВТ_Итог.id
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	|	ВТ_Итог.name <> """"");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	Рез = Запрос.Выполнить().Выбрать();	
	
	
	Пока Рез.Следующий() Цикл
		НСтр = ТаблицаВозвратов.Добавить();
		НСтр.id = СтрЗаменить(Рез.id, Символы.НПП, "");
		НСтр.name = Рез.name;		
	КонецЦикла;
	
	//ТаблицаВозвратов.Сортировать("Заказ");
	
	Заказ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();  // Пока для логирования отправляет пустой заказ, требуется доработка	
	Попытка
		Результат = oz_РаботаССервисом.ArticleReturnedSend(ТаблицаВозвратов, Заказ, Ссылка);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	// Пишем идентификатор перевозки
	Если НЕ Отказ И ЗначениеЗаполнено(Результат.CarriageID) Тогда				
		oz_CarriageID = СтрЗаменить(Результат.CarriageID, Символы.НПП, "");	
		ЭтотОбъект.ОбменДанными.Загрузка = Истина;
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	
	Возврат Отказ;
	
	
КонецФункции // ()

// МАС - 11.01.2018 - № --->> 
Процедура УдалитьЗаказИзОтправления(Заказ) Экспорт
	
	
	// Помечаем заказ как изъятый из отправки		
	ДокПоступление = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(СокрЛП(Заказ.Номер));
	Если ЗначениеЗаполнено(ДокПоступление) Тогда		
		Най = Товары.НайтиСтроки(Новый Структура("ДокументПоступления", ДокПоступление));
		Для каждого Стр Из Най Цикл	
			Стр.ПозицияУдаленаИзОтправки = Истина;		
		КонецЦикла;			
	КонецЕсли;
	
	
	// Корректируем записи по РС СтатусыСкладскогоУчета	
	МассивИзъятий = Новый Массив;
	Набор = Движения.СтатусыСкладскогоУчета;		
	Для каждого Стр Из Набор Цикл		
		Если Стр.Заказ = Заказ Тогда	
			МассивИзъятий.Добавить(Стр);	
		КонецЕсли;			
	КонецЦикла;
	
	Для каждого СтрУд Из МассивИзъятий Цикл	
		Набор.Удалить(СтрУд);		
	КонецЦикла;
	
	Набор.Записать();
	
	
КонецПроцедуры // ()
// <<--- МАС 



// МАС - 19.03.2018 - Рассылка списка подготовленных возвратов по контрагентам --->> 
Процедура УведомитьПартнераПоПочте(Расформирование = Ложь) Экспорт
	
	
	МасП = Новый Массив;
	
	//Геннадий 21.12.2020 ->
	СтрокаСписокПолучателей = "";
	//Геннадий <-
			
	//МасП.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
	
	Если СкладМагазина.Пустая() Тогда
		
		//Запрос = Новый Запрос("ВЫБРАТЬ
		//                      |	СкладыМагазинов.Ссылка КАК Ссылка,
		//                      |	СкладыМагазинов.EmailДляРассылки КАК EmailДляРассылки,
		//                      |	СкладыМагазинов.УведомлятьПартнера КАК УведомлятьПартнера
		//                      |ИЗ
		//                      |	Справочник.СкладыМагазинов КАК СкладыМагазинов
		//                      |ГДЕ
		//                      |	СкладыМагазинов.Владелец = &Владелец
		//                      |	И СкладыМагазинов.СкладПоУмолчанию = ИСТИНА");	
		//Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Контрагент);
		//Рез = Запрос.Выполнить().Выбрать();	
		//Если Рез.Следующий() Тогда		
		//	Если Рез.УведомлятьПартнера Тогда	
		//		МасП.Добавить(СокрЛП(Рез.EmailДляРассылки));			
		//	КонецЕсли;		
		//КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СкладыМагазиновАдресаРассылкиУведомлений.Почта КАК Почта,
		|	СкладыМагазиновАдресаРассылкиУведомлений.Уведомлять КАК Уведомлять
		|ИЗ
		|	Справочник.СкладыМагазинов.АдресаРассылкиУведомлений КАК СкладыМагазиновАдресаРассылкиУведомлений
		|ГДЕ
		|	СкладыМагазиновАдресаРассылкиУведомлений.Ссылка.Владелец = &Владелец
		|	И СкладыМагазиновАдресаРассылкиУведомлений.Ссылка.НеИспользуется = ЛОЖЬ");	
		Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Контрагент);
		Рез = Запрос.Выполнить().Выбрать();		
		Пока Рез.Следующий() Цикл			
			Если Рез.Уведомлять Тогда	
				МасП.Добавить(СокрЛП(Рез.Почта));			
				//Геннадий 21.12.2020 ->
				СтрокаСписокПолучателей = ?(ПустаяСтрока(СтрокаСписокПолучателей), СокрЛП(Рез.Почта), СтрокаСписокПолучателей + ";" + СокрЛП(Рез.Почта));
				//Геннадий <-
			КонецЕсли;		
		КонецЦикла;			
	Иначе		
		Для каждого Стр Из СкладМагазина.АдресаРассылкиУведомлений Цикл
			Если Стр.Уведомлять Тогда			
				МасП.Добавить(СокрЛП(Стр.Почта));				
				//Геннадий 21.12.2020 ->
				СтрокаСписокПолучателей = ?(ПустаяСтрока(СтрокаСписокПолучателей), СокрЛП(Стр.Почта), СтрокаСписокПолучателей + ";" + СокрЛП(Стр.Почта));
				//Геннадий <-
			КонецЕсли;					
		КонецЦикла;						
		
	КонецЕсли;	
	
	//Геннадий #4415 24.12.2020 ->
	НастройкаОтправкиОтчета = Справочники.НастройкиАвтоматическойОтправкиОтчетов.НайтиПоКоду("00000000036");//Рассылка ВН
	//Геннадий <-
	
	Если МасП.Количество() И НЕ ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		Если Расформирование Тогда
			
			ТекстПисьма = "Внимание! накладная на возврат № " + СокрЛП(ЭтотОбъект.Номер) + Символы.ПС + "Данное письмо сформировано автоматически, не отвечайте на него.";	
			//Геннадий #4415 24.12.2020 ->
			Ошибка = "";
			//Асеев 31.10.2024 (Задача № 5339)>>>
			ОператорРассылки = lem.ОпределитьОператораРассылки(НастройкаОтправкиОтчета, Контрагент);
			//Асеев 31.10.2024 (Задача № 5339)<<<
			Если ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
				СообщениеОтправлено = lem.ОтправитьСообщение(МасП, "Расформирование возвратной накладной", ТекстПисьма,, "Стриж Логистик",,,,Ошибка);		
			ИначеЕсли ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
				ОбработкаUnion 		= Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
				СообщениеОтправлено = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, "Расформирование возвратной накладной", ТекстПисьма,, "Стриж Логистик",,,,Ошибка);
			КонецЕсли;
			ЗаписьВоВнешнийЛогПриОтправкеИнформации(Ошибка,, СообщениеОтправлено, ЭтотОбъект.Контрагент, СтрокаСписокПолучателей, НастройкаОтправкиОтчета, ОператорРассылки);	
			//Геннадий <-
			
		Иначе
			Если ЗначениеЗаполнено(ЭтотОбъект.Сделка) Тогда				
				
				ТабДок = Новый ТабличныйДокумент;
				
				//Асеев 20.05.2022 (Задача № 4809)>>>
				Если ЭтотОбъект.ТипВозврата = Справочники.ТипыВозврата.ВнесистемныйВозврат Тогда
					Документы.ВозвратТоваровПоставщику.ПечатьВнесистемнойВозвратнойНакладной(ТабДок, ЭтотОбъект.Ссылка);
				Иначе
					//Асеев 20.05.2022 (Задача № 4809)<<<
					
					//Геннадий 25.11.2021 ++
					//для яндекс.доставки рассылка ВН по иной форме
					Если (ЭтотОбъект.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_833") И 
						(ЭтотОбъект.СкладМагазина.Код = 40187 ИЛИ ЭтотОбъект.СкладМагазина.Код = 9578 ИЛИ ЭтотОбъект.СкладМагазина.Код = 9577)) ИЛИ 
						
						(ЭтотОбъект.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_883") И  
						(ЭтотОбъект.СкладМагазина.Код = 82803 ИЛИ ЭтотОбъект.СкладМагазина.Код = 82804 ИЛИ ЭтотОбъект.СкладМагазина.Код = 82805)) Тогда
						
						ПечатьВозвратнойНакладнойЯндекс(ТабДок);
					Иначе
						//исходный вариант:
						ПечатьВозвратнойНакладной(ТабДок);
					КонецЕсли;
					//Геннадий 25.11.2021 --
				КонецЕсли;
				
				ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + СокрЛП(ЭтотОбъект.Номер) + ".xls";
				ТабДок.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
				
				ТекстПисьма = "Добрый день! Подготовлена накладная на возврат № " + СокрЛП(ЭтотОбъект.Номер) + " (состав возврата во вложении)." + Символы.ПС + "Ожидайте, что в ближайшее время Вам будут возвращены данные заказы.";

				//Геннадий #4415 24.12.2020 ->
				Ошибка = "";
				//Асеев 31.10.2024 (Задача № 5339)>>>
				ОператорРассылки = lem.ОпределитьОператораРассылки(НастройкаОтправкиОтчета, Контрагент);
				//Асеев 31.10.2024 (Задача № 5339)<<<
				Если ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
					СообщениеОтправлено = lem.ОтправитьСообщение(МасП, "Возвратная накладная № " + СокрЛП(ЭтотОбъект.Номер), ТекстПисьма, ПутьКФайлу, "Стриж Логистик",,,,Ошибка);		
				ИначеЕсли ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
					ОбработкаUnion 		= Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
					СообщениеОтправлено = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, "Возвратная накладная № " + СокрЛП(ЭтотОбъект.Номер), ТекстПисьма, ПутьКФайлу, "Стриж Логистик",,,,Ошибка);
				КонецЕсли;
				ЗаписьВоВнешнийЛогПриОтправкеИнформации(Ошибка, ПутьКФайлу, СообщениеОтправлено, ЭтотОбъект.Контрагент, СтрокаСписокПолучателей, НастройкаОтправкиОтчета, ОператорРассылки);
				//Геннадий <-
				
			КонецЕсли;
			
		КонецЕсли;			
		
	КонецЕсли;						
	
КонецПроцедуры
// <<--- МАС 

//Геннадий 21.12.2020 <-
Процедура ЗаписьВоВнешнийЛогПриОтправкеИнформации(ТекстОшибки = "", ПутьКФайлу = Неопределено, СообщениеОтправлено, КонтрагентДляРассылки, СтрокаСписокПолучателей, Настройка, ОператорРассылки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Настройка = Справочники.НастройкиАвтоматическойОтправкиОтчетов.НайтиПоКоду("00000000036");//Рассылка ВН
	
	ПараметрыЗаписи 					= ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);
	ПараметрыЗаписи.НастройкаОтправки	= Настройка;
	
	ПараметрыЗаписи.Контрагент 			= КонтрагентДляРассылки;		
	ПараметрыЗаписи.ПериодФормирования 	= ТекущаяДата();
	
	Если Не ПутьКФайлу = Неопределено Тогда
		ПараметрыЗаписи.ДвоичныеДанныеВыгрузки 	= Новый ДвоичныеДанные(ПутьКФайлу);
	КонецЕсли;
	
	ПараметрыЗаписи.GUID 				= Новый УникальныйИдентификатор;
	ПараметрыЗаписи.СписокПолучателей 	= СтрокаСписокПолучателей;
	
	ПараметрыЗаписи.ВидОтчетаСпр		= Справочники.ВидыОтправляемыхОтчетов.РассылкаВН;
	ПараметрыЗаписи.ВидОтчета			= Настройка.Отчет;//Перечисления.ВидыОтправляемыхОтчетов.ДетализацияОплатКомитентам;
	
	ПараметрыЗаписи.ТекстОшибки			= ТекстОшибки;
	ПараметрыЗаписи.ОтчетОтправлен		= СообщениеОтправлено;
	ПараметрыЗаписи.ОператорРассылки	= ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования;
	
	ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//Геннадий <-


// МАС - 12.07.2018 - № --->> 
Процедура МодифицироватьПризнакОбработкиВозврата(МассивЗаказов, ПризнакОбработкиВозврата) Экспорт
	
	
	Если МассивЗаказов.Количество() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПозицииКВозврату.ТерминалДоставки КАК ТерминалДоставки,
		|	ПозицииКВозврату.ИнтернетМагазин КАК ИнтернетМагазин,
		|	ПозицииКВозврату.Вскрытый КАК Вскрытый,
		|	ПозицииКВозврату.ДокументИсточник КАК ДокументИсточник,
		|	ПозицииКВозврату.Заказ КАК Заказ,
		|	ПозицииКВозврату.Номенклатура КАК Номенклатура,
		|	ПозицииКВозврату.ШтрихкодНоменклатурыИзмерение КАК ШтрихкодНоменклатурыИзмерение
		|ИЗ
		|	РегистрСведений.ПозицииКВозврату КАК ПозицииКВозврату
		|ГДЕ
		|	ПозицииКВозврату.Заказ В(&МассивЗаказов)");
		
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
		РезТЗ = Запрос.Выполнить().Выгрузить();
		
		Для каждого Ст Из РезТЗ Цикл	
			
			Набор = РегистрыСведений.ПозицииКВозврату.СоздатьНаборЗаписей();
			Набор.Отбор.ТерминалДоставки.Установить(Ст.ТерминалДоставки);
			Набор.Отбор.ИнтернетМагазин.Установить(Ст.ИнтернетМагазин);
			Набор.Отбор.Вскрытый.Установить(Ст.Вскрытый);
			Набор.Отбор.ДокументИсточник.Установить(Ст.ДокументИсточник);
			Набор.Отбор.Заказ.Установить(Ст.Заказ);
			Набор.Отбор.Номенклатура.Установить(Ст.Номенклатура);
			//Асеев 17.09.2021 (Задача № 4669)>>>
			Набор.Отбор.ШтрихкодНоменклатурыИзмерение.Установить(Ст.ШтрихкодНоменклатурыИзмерение);
			//Асеев 17.09.2021 (Задача № 4669)<<<
			
			Набор.Прочитать();
			
			Для каждого Зап Из Набор Цикл				
				Зап.ВозвратОбработан = ПризнакОбработкиВозврата;				
			КонецЦикла;
			
			Набор.Записать();
			
		КонецЦикла;	
		
	КонецЕсли;
	
	
КонецПроцедуры
// <<--- МАС

Процедура ПечатьВозвратнойНакладной(ТабДок) Экспорт
	
	
	//ТабДок = Новый ТабличныйДокумент;	
	
	СтатусВ = ЭтотОбъект.Сделка.СтатусВозврата;
	
	Если СтатусВ = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2") Тогда	
		Макет = ЭтотОбъект.Сделка.ПолучитьОбъект().ПолучитьМакет("ВозвратнаяНакладнаяПоВскрытым");	
	Иначе	
		Макет = ЭтотОбъект.Сделка.ПолучитьОбъект().ПолучитьМакет("ВозвратнаяНакладнаяПоНЕВскрытым");
	КонецЕсли;
	
	
	//+Степанов Задача № 3963 В запрос добавлена связь таблиц по коду маркировки.
	//+Степанов В запрос добалена свзяь таблиц по цене номенклатуры.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	                      |	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	                      |	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	                      |	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	                      |	ВозвратТоваровПоставщикуТовары.КоличествоМестЗаказа КАК КоличествоМестЗаказа,
	                      |	ВозвратТоваровПоставщикуТовары.ШтрихкодНоменклатуры.Код КАК ШтрихкодНоменклатуры,
	                      |	ВозвратТоваровПоставщикуТовары.КоличествоМестТовара КАК КоличествоМестТовара,
	                      |	ВозвратТоваровПоставщикуТовары.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	                      |	ВозвратТоваровПоставщикуТовары.Ссылка.Номер КАК НомерВозвратаПоставщику,
	                      |	НаборнаяВедомостьДляВозврата.Ссылка КАК Ссылка,
	                      |	ВозвратТоваровПоставщикуТовары.ПозицияУдаленаИзОтправки КАК ПозицияУдаленаИзОтправки,
	                      |	ВозвратТоваровПоставщикуТовары.СтатусСкладскогоУчета КАК СтатусСкладскогоУчета,
	                      |	ВозвратТоваровПоставщикуТовары.ДатаДоставки КАК ДатаДоставки,
	                      |	ВозвратТоваровПоставщикуТовары.НеНайденНаТСД КАК НеНайденНаТСД,
	                      |	ВозвратТоваровПоставщикуТовары.Вес КАК Вес,
	                      |	ВозвратТоваровПоставщикуТовары.ПричинаВозврата КАК ПричинаВозврата,
	                      |	ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя,
	                      |	ВозвратТоваровПоставщикуТовары.КоличествоМест КАК КоличествоМест,
	                      |	ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер КАК НомерЗаказа,
	                      |	НаборнаяВедомостьДляВозврата.Номер КАК НомерНаборной,
	                      |	ПоступлениеТоваровУслугТовары.СкладМагазина КАК СкладМагазина,
	                      |	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК Артикул,
	                      |	ВозвратТоваровПоставщикуТовары.Ссылка.СкладМагазина КАК СкладПартнера,
	                      |	ВозвратТоваровПоставщикуТовары.КодМаркировки КАК КодМаркировки
	                      |ИЗ
	                      |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НаборнаяВедомостьДляВозврата КАК НаборнаяВедомостьДляВозврата
	                      |		ПО ВозвратТоваровПоставщикуТовары.Ссылка.Ссылка = НаборнаяВедомостьДляВозврата.ВозвратПоставщику
	                      |			И (НаборнаяВедомостьДляВозврата.ПометкаУдаления = ЛОЖЬ)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	                      |		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления = ПоступлениеТоваровУслугТовары.Ссылка
	                      |			И ВозвратТоваровПоставщикуТовары.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	                      |			И ВозвратТоваровПоставщикуТовары.КодМаркировки = ПоступлениеТоваровУслугТовары.КодМаркировки
	                      |			И ВозвратТоваровПоставщикуТовары.Цена = ПоступлениеТоваровУслугТовары.Цена
	                      |ГДЕ
	                      |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	                      |	И ВозвратТоваровПоставщикуТовары.ПозицияУдаленаИзОтправки = ЛОЖЬ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерЗаказа");	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	
	
	Если Рез.Количество() Тогда
		
		
		ЮрАдрес    = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ЭтотОбъект.Контрагент, "Юридический");	
		ТекстГрузополучатель = "" + ЭтотОбъект.Контрагент.НаименованиеПолное + ", ИНН" + ЭтотОбъект.Контрагент.ИНН  + ", " + ЭтотОбъект.Контрагент.КПП + "," + ЮрАдрес;
		ТекстГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЭтотОбъект.Грузоотправитель, ЭтотОбъект.Дата);
		
		// МАС - 20.03.2018 - № --->> 
		ЭтоКораблик = ?(ЭтотОбъект.Контрагент.Код = "Shop_180 ", Истина, Ложь);
		// <<--- МАС 
		
		
		ОблИтогиПоЗаказу = Макет.ПолучитьОбласть("СтрокаИтогПоЗаказу");
		
		// шапка
		ОблШапка = Макет.ПолучитьОбласть("Шапка");
		ОблШапка.Параметры.НомерНаборной = ЭтотОбъект.Сделка.Номер;	
		ОблШапка.Параметры.НомерВозврата = ЭтотОбъект.Номер;
		ОблШапка.Параметры.ДатаСоставления = Формат(ЭтотОбъект.Дата, "ДФ=dd.MM.yyyy");	
		СкладПартнера = Рез[0].СкладПартнера;
		Если ЗначениеЗаполнено(СкладПартнера) Тогда
			ОблШапка.Параметры.СкладВозвратаПартнера = "" + СкладПартнера.Наименование + "  (" + СкладПартнера.Адрес + ")";		
		Иначе
		КонецЕсли;
		
		ОблШапка.Параметры.ДатаВозврата = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");	
		ОблШапка.Параметры.Договор = "Договор №  от ";
		ОблШапка.Параметры.ТипВозврата = Рез[0].СтатусСкладскогоУчета;	
		ОблШапка.Параметры.Грузополучатель = ТекстГрузополучатель;
		ОблШапка.Параметры.Грузоотправитель = ЭтотОбъект.ДоговорКонтрагента.Организация;
		
		ТабДок.Вывести(ОблШапка);
		
		
		// Строки 
		ОблНПП_Пустая = Макет.ПолучитьОбласть("ПустыеОбласти|ОбластьНПП");
		ОблЗаказ_Пустая = Макет.ПолучитьОбласть("ПустыеОбласти|ОбластьЗаказ");	
		ОблНПП = Макет.ПолучитьОбласть("Строка|ОбластьНПП");
		ОблЧасть1 = Макет.ПолучитьОбласть("Строка|ВертикальнаяОбласть1");
		ОблЗаказ = Макет.ПолучитьОбласть("Строка|ОбластьЗаказ");	
		ОблЧасть2 = Макет.ПолучитьОбласть("Строка|ВертикальнаяОбласть2");	
		
		Если СтатусВ = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат1") Тогда
			ОблКолМест = Макет.ПолучитьОбласть("Строка|ОбластьКолМест");
			ОблКолМест_Пустая = Макет.ПолучитьОбласть("ПустыеОбласти|ОбластьКолМест");		
		КонецЕсли;
		
		
		
		НПП = 1; 
		ПредЗаказ = Неопределено;  
		ВыводитьСтрЗаказ = Истина;	
		КоличествоПоЗаказу = 0; 
		СуммаПоЗаказу = 0; 
		КоличествоОбщее = 0; 
		СуммаОбщая = 0;
		//КоличествоПозицийВЗаказе = 0;	
		КоличествоМестПоДокументу = 0;
		ВсегоЗаказов = 0;
		
		
		Для каждого Стр Из Рез Цикл
			
			
			Если (ПредЗаказ <> СокрЛП(Стр.НомерЗаказа) И ПредЗаказ <> Неопределено) Тогда	// выводим строку итогов	
				ОблИтогиПоЗаказу.Параметры.КоличествоПоЗаказу = КоличествоПоЗаказу;
				ОблИтогиПоЗаказу.Параметры.СуммаПоЗаказу = СуммаПоЗаказу;														
				ТабДок.Вывести(ОблИтогиПоЗаказу);
				КоличествоПоЗаказу = 0; СуммаПоЗаказу = 0;	
				КоличествоПозицийВЗаказе = 0;					
			КонецЕсли;		
			
			КоличествоПоЗаказу = КоличествоПоЗаказу + Стр.Количество;
			СуммаПоЗаказу = СуммаПоЗаказу + Стр.Сумма;
			
			КоличествоОбщее = КоличествоОбщее + Стр.Количество;
			СуммаОбщая = СуммаОбщая + Стр.Сумма;
			
			
			// Номер
			Если ПредЗаказ <> СокрЛП(Стр.НомерЗаказа) Тогда		
				ОблНПП.Параметры.НПП = НПП;
				ТабДок.Вывести(ОблНПП);
				ПредЗаказ = СокрЛП(Стр.НомерЗаказа);
				ВыводитьСтрЗаказ = Истина;
				НПП = НПП + 1;	
				ВсегоЗаказов = ВсегоЗаказов + 1;
				КоличествоМестПоДокументу = КоличествоМестПоДокументу + Стр.КоличествоМестТовара;
			Иначе
				ТабДок.Вывести(ОблНПП_Пустая);
			КонецЕсли;
			
			
			// строка часть1
			ОблЧасть1.Параметры.Заполнить(Стр);			
			ТабДок.Присоединить(ОблЧасть1);
			
			
			// строка заказ
			Если ВыводитьСтрЗаказ Тогда	
				// МАС - 20.03.2018 - костыль для кораблика --->> 			 
				//Если ЭтоКораблик Тогда
				//	ОблЗаказ.Параметры.НомерЗаказа = "" + Стр.ВнешнийНомерЗаказа;
				//Иначе
				//	ОблЗаказ.Параметры.НомерЗаказа = "" + Стр.ВнешнийНомерЗаказа + Символы.ПС + Стр.НомерЗаказа;
				//КонецЕсли;
				// <<--- МАС
				
				//CeHbKA 20.11.2020 по письму Ю.Семеновй от 20.11.2020
				Если ЭтоКораблик Тогда
					ОблЗаказ.Параметры.ВнешнийНомерЗаказа = "" + Стр.ВнешнийНомерЗаказа;
				Иначе
					ОблЗаказ.Параметры.ВнешнийНомерЗаказа = "" + Стр.ВнешнийНомерЗаказа;					
					ОблЗаказ.Параметры.НомерЗаказа = "" + Стр.НомерЗаказа;
				КонецЕсли;
				//CeHbKA 20.11.2020 по письму Ю.Семеновй от 20.11.2020
				
				ТабДок.Присоединить(ОблЗаказ);					
				Если СтатусВ = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат1") Тогда
					ОблКолМест.Параметры.КоличествоМестТовара = Число(Стр.КоличествоМестТовара);
					ТабДок.Присоединить(ОблКолМест);		
				КонецЕсли;				
				ВыводитьСтрЗаказ = Ложь;
			Иначе
				ТабДок.Присоединить(ОблЗаказ_Пустая);
				Если СтатусВ = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат1") Тогда
					ТабДок.Присоединить(ОблКолМест_Пустая);	
				КонецЕсли;		
			КонецЕсли;
			
			
			// строка часть2
			ОблЧасть2.Параметры.Заполнить(Стр);			
			ТабДок.Присоединить(ОблЧасть2);
			
			
			// строка "итоги" для последнего заказа
			Если Стр = Рез[Рез.Количество() - 1] Тогда			
				ОблИтогиПоЗаказу.Параметры.КоличествоПоЗаказу = КоличествоПоЗаказу;
				ОблИтогиПоЗаказу.Параметры.СуммаПоЗаказу = СуммаПоЗаказу;														
				ТабДок.Вывести(ОблИтогиПоЗаказу);	
			КонецЕсли; 
			
		КонецЦикла;
		
		
		// строка с итогами
		ОблСтрокаИтогиОбщие = Макет.ПолучитьОбласть("СтрокаИтогиОбщие");
		ОблСтрокаИтогиОбщие.Параметры.КоличествоОбщее = КоличествоОбщее;
		ОблСтрокаИтогиОбщие.Параметры.СуммаОбщая = СуммаОбщая;
		ТабДок.Вывести(ОблСтрокаИтогиОбщие);		
		
		
		// Подвал
		ОблПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Если СтатусВ = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2") Тогда		
			ОблПодвал.Параметры.КолМестТоваровНадпись =	"Количество товарных позиций:";	
			ОблПодвал.Параметры.КоличествоМестТоваровПоДокументу = КоличествоОбщее;
		Иначе	
			ОблПодвал.Параметры.КолМестТоваровНадпись =	"Количество мест:";		
			ОблПодвал.Параметры.КоличествоМестТоваровПоДокументу = КоличествоМестПоДокументу;		
		КонецЕсли;
		
		
		ТекстИтогиПрописью = "Всего количество переданных заказов составило " + ВсегоЗаказов + " (" + ФормированиеПечатныхФорм.КоличествоПрописью(ВсегоЗаказов) + "), на сумму " + Формат(СуммаОбщая, "ЧДЦ=2") + " руб. (" + ОбщегоНазначения.СформироватьСуммуПрописью3(СуммаОбщая) + ")";
		ОблПодвал.Параметры.ИтогиПрописью = ТекстИтогиПрописью;
		
		ТабДок.Вывести(ОблПодвал);
		
	КонецЕсли;
	
	
	
КонецПроцедуры


Функция ПечатьВозвратнойНакладной_ММС003(ТабДок) Экспорт
	
	//ТабДок = Новый ТабличныйДокумент;
	//ТабДок.ТолькоПросмотр = Истина;
	////ТабДок.Защита = Истина;
	//ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	//ТабДок.ОтображатьСетку = Ложь;
	//ТабДок.ОтображатьЗаголовки = Ложь;
	//ТабДок.Показать();
	
	Макет = ПолучитьМакет("ВозвратМедиаМаркт");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	СтрокаМ = Макет.ПолучитьОбласть("СтрокаДет");
	//Итоги = Макет.ПолучитьОбласть("СтрокаИт");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	//Договор = Справочники.Контрагенты.НайтиПоКоду("Shop_169").ОсновнойДоговорКонтрагента;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Покупатель,
	|	ВозвратТоваровПоставщику.СуммаДокумента,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Организация КАК Организация1,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента,
	|	ВозвратТоваровПоставщику.Сделка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка = Запрос.Выполнить().Выбрать();
	
	Если ЗапросШапка.Следующий() Тогда
		Шапка.Параметры.Заполнить(ЗапросШапка);
		//СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Покупатель, ЗапросШапка.Дата);
		//Шапка.Параметры.Грузополучатель = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Контрагент, ЗапросШапка.Дата), "ПолноеНаименование,ИНН, КПП, ЮридическийАдрес,");		
		//Шапка.Параметры.Контрагент = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование");
		//Шапка.Параметры.ИНН = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН");
		//Шапка.Параметры.КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП");
		//Шапка.Параметры.Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес");
		
		//Шапка.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Организация, ЗапросШапка.Дата), "ПолноеНаименование,ИНН, КПП, ЮридическийАдрес,");		
		
		////+++++Серегин М.В. 25.01.2016 15:25:26 старый код
		//Шапка.Параметры.НомерДок = "Накладная на возврат № " + ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект) + " от " + Формат(СсылкаНаОбъект.Дата, "ДЛФ=DD");
		//+++++Серегин М.В. 25.01.2016 15:25:43 новый
		Шапка.Параметры.НомерДок = "Накладная на возврат № " + Ссылка.Номер + " от " + Формат(Ссылка.Дата, "ДЛФ=DD");
		//-----Серегин М.В. 25.01.2016 15:25:47 
		
		Шапка.Параметры.ДатаНакладной = Формат(ЗапросШапка.Дата, "ДФ=dd.MM.yyyy");
		Если ЗначениеЗаполнено(ЗапросШапка.Сделка) Тогда 
			Если ТипЗнч(ЗапросШапка.Сделка) = Тип("ДокументСсылка.НаборнаяВедомостьДляВозврата") Тогда
				Шапка.Параметры.НомерНабНакладной = ЗапросШапка.Сделка.Номер;
			КонецЕсли;	
		Иначе
			Шапка.Параметры.НомерНабНакладной = "";
		КонецЕсли;
		//Шапка.Параметры.Договор = "Договор № " + ЗапросШапка.ДоговорКонтрагента.Номер + " от " + Формат(ЗапросШапка.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
		Шапка.Параметры.Агент = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Организация, ЗапросШапка.Дата), "ПолноеНаименование");
		Шапка.Параметры.Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЗапросШапка.Организация, ЗапросШапка.Дата), "ЮридическийАдрес");
		Шапка.Параметры.Телефон = "--------";
		
		Шапка.Параметры.Принципал = СокрЛП(Ссылка.Контрагент.НаименованиеПолное);              // "ООО ""БТ Торговые решения""
		Если ЗначениеЗаполнено(Ссылка.СкладМагазина) Тогда // Костя 140915
			АдресСклада = Ссылка.СкладМагазина.Наименование + ", " + Ссылка.СкладМагазина.Адрес;
		Иначе                                                      //  -      -
			АдресСклада = "----------";                            // -        -
		КонецЕсли;                                                 //-          -
		Шапка.Параметры.АдресСклада = АдресСклада;                 // Костя 140915
		Шапка.Параметры.ТелефонПринципал = "+7 (495) 54-54-003";
		Шапка.Параметры.Основание = "";
		
		ТабДок.Вывести(Шапка);
	КонецЕсли;	
	
	ЗапросПоТоварам = Новый  Запрос;
	//ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	//						|	ВозвратТоваровОтПокупателя.Ссылка,
	//						|	ЕСТЬNULL(ВозвратТоваровОтПокупателя.НомерВнешнегоЗаказа, """") КАК НомерВнешнегоЗаказа2
	//						|ПОМЕСТИТЬ ВТВОП
	//						|ИЗ
	//						|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	//						|;
	//						|
	//						|////////////////////////////////////////////////////////////////////////////////
	//						|ВЫБРАТЬ
	//						|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	//						|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0) КАК Количество,
	//						|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//						|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	//						|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Сумма, 0) КАК Сумма,
	//						|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК НДС,
	//						|	ЕСТЬNULL(РеализацияТоваровУслуг.НомерВнешнегоЗаказа, """") + ЕСТЬNULL(ВТВОП.НомерВнешнегоЗаказа2, """") КАК НомерЗаказа
	//						|ИЗ
	//						|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	//						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	//						|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
	//						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//						|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	//						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВОП КАК ВТВОП
	//						|		ПО ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Ссылка = ВТВОП.Ссылка
	//						|ГДЕ
	//						|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	//						|
	//						|УПОРЯДОЧИТЬ ПО
	//						|	НомерЗаказа,
	//						|	Номенклатура
	//						|ИТОГИ
	//						|	СУММА(Количество),
	//						|	СУММА(Сумма)
	//						|ПО
	//						|	НомерЗаказа
	//						|;
	//						|
	//						|////////////////////////////////////////////////////////////////////////////////
	//						|УНИЧТОЖИТЬ ВТВОП";
	
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	|   ВозвратТоваровОтПокупателя.Ссылка,
	|   ЕСТЬNULL(ВозвратТоваровОтПокупателя.НомерВнешнегоЗаказа, """") КАК НомерВнешнегоЗаказа2
	|ПОМЕСТИТЬ ВТВОП
	|ИЗ
	|   Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|   ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0) КАК Количество,
	|   ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|   ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|   ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Сумма, 0) КАК Сумма,
	|   ВозвратТоваровПоставщикуТовары.СуммаНДС КАК НДС,
	|   ЕСТЬNULL(РеализацияТоваровУслуг.НомерВнешнегоЗаказа, """") + ЕСТЬNULL(ВТВОП.НомерВнешнегоЗаказа2, """") КАК НомерЗаказа,
	|   ВозвратТоваровПоставщикуТовары.ПричинаВозврата,
	|   ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК Артикул,
	|   РеализацияТоваровУслуг.Номер КАК НомерЗаказаТК,
	|   ВозвратТоваровПоставщикуТовары.КоличествоМестТовара,
	|   ВозвратТоваровПоставщикуТовары.ВнешнийНомерЗаказа
	|ИЗ
	|   Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|       ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
	|       ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|       ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления.Номер = РеализацияТоваровУслуг.Номер
	|       ЛЕВОЕ СОЕДИНЕНИЕ ВТВОП КАК ВТВОП
	|       ПО ВозвратТоваровПоставщикуТовары.ВозвратТоваровОтПокупателя.Ссылка = ВТВОП.Ссылка
	|ГДЕ
	|   ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|   ВозвратТоваровПоставщикуТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВОП";
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);							
	Результат_ = ЗапросПоТоварам.Выполнить().Выгрузить();   //ОбходРезультатаЗапроса.ПоГруппировкам
	Результат_.Колонки.Добавить("НомЧ");
	Для Каждого Тек Из Результат_ Цикл
		Попытка
			Тек.НомЧ = Число(Тек.НомерЗаказа);
		Исключение
			
		КонецПопытки;	
	КонецЦикла;	
	
	
	//Результат_.Сортировать("НомЧ");
	
	Количество = 0;
	СчСтрокОбщий = 0;
	НПП = 1;
	ИтС = 0;
	ИтК = 0;
	массивСтрокСИтогом = Новый Массив;
	Для Каждого Результат Из Результат_ Цикл 
		//массивСтрокСИтогом.Очистить();
		
		
		ЗаполнитьЗначенияСвойств(СтрокаМ.Параметры, Результат);
		СтрокаМ.Параметры.нпп = нпп;
		//Серегин М.В. 05.06.2015 14:02:02 временный костыль
		Если НЕ ЗначениеЗаполнено(Результат.НомерЗаказа) Тогда
			СтрокаМ.Параметры.НомерЗаказа = Результат.ВнешнийНомерЗаказа;
			НайденаяРеализация  = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа",Результат.ВнешнийНомерЗаказа);
			Если ЗначениеЗаполнено(НайденаяРеализация)Тогда 
				СтрокаМ.Параметры.НомерЗаказаТК = НайденаяРеализация.Номер;        
			КонецЕсли;
			
		КонецЕсли;
		//Серегин М.В. 05.06.2015 14:09:03 
		//Дет = Результат.Выбрать();
		//СчСтрок = 0;
		//Пока Дет.Следующий() Цикл
		//	СчСтрок = СчСтрок + 1;
		//	
		//	СтрокаМ.Параметры.Заполнить(Дет);
		//	СтрокаМ.Параметры.Арт = СокрЛП(Дет.Номенклатура.Артикул);
		//	СтрокаМ.Параметры.НПП = НПП;
		//	//СчСтрокОбщий = СчСтрокОбщий + 1;
		//	//ТабДок.Вывести(СтрокаМ);
		//	массивСтрокСИтогом.Добавить(СтрокаМ);
		//	
		//КонецЦикла;	
		//Помещается = Ложь;
		//Если ТабДок.ПроверитьВывод(массивСтрокСИтогом) тогда	
		//	Помещается = Истина;
		//КонецеСли;	
		//
		//Если Не Помещается Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецеСли;
		
		//Дет = Результат.Выбрать();
		//СчСтрок = 0;
		//Пока Дет.Следующий() Цикл
		//	СчСтрок = СчСтрок + 1;
		//	
		//	СтрокаМ.Параметры.Заполнить(Дет);
		//	СтрокаМ.Параметры.Арт = СокрЛП(Дет.Номенклатура.Артикул);
		//	СтрокаМ.Параметры.НПП = НПП;
		//	СчСтрокОбщий = СчСтрокОбщий + 1;
		//	ТабДок.Вывести(СтрокаМ);
		//	
		//КонецЦикла;	
		
		
		//Обл = ТабДок.Область(16 + СчСтрокОбщий - СчСтрок, 5, 15 + СчСтрокОбщий, 5);
		//Обл.Объединить();
		//Обл.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		//Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
		//Итоги.Параметры.Заполнить(Результат);
		//ТабДок.Вывести(Итоги);
		//СчСтрокОбщий = СчСтрокОбщий + 1;
		//Попытка
		//	ИтК = ИтК + Результат.Количество;
		//	ИтС = ИтС + Результат.Сумма;
		//исключение
		//	рр = 1;
		//КонецПопытки;
		НПП = НПП + 1;
		ТабДок.Вывести(СтрокаМ);
		ИтС = ИтС + Результат.Сумма;
		//Обл = ТабДок.Область(15 + СчСтрокОбщий - СчСтрок, 2, 14 + СчСтрокОбщий, 2);
		//Обл.Объединить();
		//Обл.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		//Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЦикла;
	
	//Подвал.Параметры.СтрПропись = "Всего количество переданных заказов составило " + Строка(НПП - 1) + " (" + Лев(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь"), СтрДлина(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь")) - 6) + "), на " + Формат(ИтС, "ЧДЦ=2") + " руб. (" + ЧислоПрописью(ИтС,,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2") + ").";  
	Подвал.Параметры.КолСтрока = Лев(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь"), СтрДлина(ЧислоПрописью(НПП - 1, "Л = ru_RU; ДП = Истина; НД=Ложь")) - 6);
	Подвал.Параметры.ИтогоСтоимость = ИтС;
	
	//НДС = Результат.Итог("НДС");
	//ФормСтрока = "Л = ru_RU; ДП = Истина";
	//ПарПредмета="рубль,рубля,рублей,м,копейка,копейки,копеек,ж,2";
	//Итоги.Параметры.СуммаCНДС = НРег(ЧислоПрописью(Награда, ФормСтрока, ПарПредмета));
	//Итоги.Параметры.СуммаБезНДС = НРег(ЧислоПрописью((Награда-НДС), ФормСтрока, ПарПредмета));
	//Итоги.Параметры.СуммаПереданныхЗаказов = НРег(ЧислоПрописью(Награда, ФормСтрока, ПарПредмета));
	
	//Итоги.Параметры.Сумма = ИтС;
	//Итоги.Параметры.Количество = ИтК;
	//Итоги.Параметры.ндИтог = "Итого:";
	ТабДок.Вывести(Подвал);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСверху = 3;
	ТабДок.ПолеСнизу = 3;
	ТабДок.ПолеСлева = 3;
	ТабДок.ПолеСправа = 3;
	ТабДок.ИмяПараметровПечати = "Возврат_ММ";
	//ТабДок.Вывести(Подвал);
	
	Возврат ТабДок;
	
КонецФункции // Печать(ТабДок, ВозвратТовара)()

//Геннадий 10.11.2021 ++
Функция ПечатьВозвратнойНакладнойЯндекс(ТабДок) Экспорт
	
	Макет = ПолучитьМакет("ВозвратнаяНакладнаяЯндекс");
	Шапка 		= Макет.ПолучитьОбласть("Шапка");
	СтрокаТабл 	= Макет.ПолучитьОбласть("СтрокаТабл");
	Подвал 		= Макет.ПолучитьОбласть("Подвал");
	
	ШапкаПараметры = Новый Структура;
	ШапкаПараметры.Вставить("Организация", 		Ссылка.Организация);
	ШапкаПараметры.Вставить("ИННКПП", 			Ссылка.Организация.ИНН + "/" + Ссылка.Организация.КПП);
	ШапкаПараметры.Вставить("ДатаСоставления", 	Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy"));
	ШапкаПараметры.Вставить("Контрагент", 		"ООО ""Сток-Трейдинг""");
	ШапкаПараметры.Вставить("Адрес", 			"141060, Москвоская обл., г. Королев, мкрн. Больево, ул. Прудная, д. 10, п. 2");
	ШапкаПараметры.Вставить("НомерСклада", 		"");
	
	ЗаполнитьЗначенияСвойств(Шапка.Параметры, ШапкаПараметры);
	ТабДок.Вывести(Шапка);
	
	номерСтроки 		= 0;
	Для Каждого строкаТЧ Из Ссылка.Товары Цикл
				
		номерСтроки = номерСтроки + 1;
		
		СтрокаПараметры = Новый Структура;
		СтрокаПараметры.Вставить("НомерСтроки", 	номерСтроки);
		СтрокаПараметры.Вставить("ЮрЛицо", 			"Реинвент (ООО)");//строкаТЧ.Реализация.ВладелецТовара);
		номерСимволаСлэш 							= Найти(строкаТЧ.ВнешнийНомерЗаказа, "/");
		СтрокаПараметры.Вставить("ЦРМ", 			Сред(строкаТЧ.ВнешнийНомерЗаказа, номерСимволаСлэш + 1, СтрДлина(строкаТЧ.ВнешнийНомерЗаказа) - номерСимволаСлэш));
		СтрокаПараметры.Вставить("НомерКО", 		);
		СтрокаПараметры.Вставить("ПланНакладная", 	);
		СтрокаПараметры.Вставить("Трансп", 			);
		СтрокаПараметры.Вставить("Артикул", 		строкаТЧ.Номенклатура.Артикул);
		СтрокаПараметры.Вставить("Наименование", 	строкаТЧ.Номенклатура);
		
		СтрокаПараметры.Вставить("КолвоШтук", 		строкаТЧ.Количество);
		СтрокаПараметры.Вставить("МеткаВозврата", 	);                       
		
		ЗаполнитьЗначенияСвойств(СтрокаТабл.Параметры, СтрокаПараметры);
		ТабДок.Вывести(СтрокаТабл);
	КонецЦикла;
	
	ВремТЗ = Ссылка.Товары.Выгрузить(,"Номенклатура");
	ВремТЗ.Свернуть("Номенклатура", );
	
	ПодвалПараметры = Новый Структура;
	ПодвалПараметры.Вставить("КолвоПринятыхВозвр", 	Ссылка.Товары.Итог("Количество"));
	ПодвалПараметры.Вставить("КолвоПринятыхАрт", 	ВремТЗ.Количество());
	ЗаполнитьЗначенияСвойств(Подвал.Параметры, 		ПодвалПараметры);
	ТабДок.Вывести(Подвал);
	
	Возврат ТабДок;
	
КонецФункции
//Геннадий 10.11.2021 --

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
мСтруктураПараметровВзаиморасчетов.Вставить("ЭтоВозврат", Истина);

УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

мУказаниеСкладовВТЧ    = (УказаниеСкладов     = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации)
Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);

