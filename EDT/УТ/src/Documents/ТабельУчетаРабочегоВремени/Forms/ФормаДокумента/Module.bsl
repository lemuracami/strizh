
&НаСервере
Процедура СформироватьКолонки()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	КоллФормы = РеквизитФормыВЗначение("ТаблицаОтработанногоВремени");
	
	Для каждого ТекКол из КоллФормы.Колонки Цикл
		Если Найти(ТекКол.Имя, "День") Тогда
	    	МассивУдаляемыхРеквизитов.Добавить("ТаблицаОтработанногоВремени."+ТекКол.Имя);
		КонецеСли;	
	КонецЦикла;
	КолДней = ДеньГода(КонецМесяца(Объект.Период)) - ДеньГода(НачалоМесяца(Объект.Период)) + 1;
	Для Сч = 1 По 31 Цикл
		Най = Элементы.Найти("День" + Строка(Сч));
		Если Най <> Неопределено Тогда
			Элементы.Удалить(Най);
		КонецеСли;	
		
		Най = Элементы.Найти("ДеньВ" + Строка(Сч));
		Если Най <> Неопределено Тогда
			Элементы.Удалить(Най);
		КонецеСли;	
		
		Най = Элементы.Найти("ДеньГр" + Строка(Сч));
		Если Най <> Неопределено Тогда
			Элементы.Удалить(Най);
		КонецеСли;	
		
		Най = Элементы.Найти("Группа" + Строка(Сч));
		Если Най <> Неопределено Тогда
			Элементы.Удалить(Най);
		КонецеСли;	
		
		Най = Элементы.Найти("ГруппаГр" + Строка(Сч));
		Если Най <> Неопределено Тогда
			Элементы.Удалить(Най);
		КонецеСли;	
		
	КонецЦикла;	
	
	//Если Объект.ОтработанноеВремя.Количество() = 0 Тогда
		
		ТипД = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный));
		ТипКл = Новый ОписаниеТипов("СправочникСсылка.КлассификаторИспользованияРабочегоВремени");
		Для Сч = 1 По КолДней Цикл 
			РеквизитФормы = Новый РеквизитФормы("День" + Строка(Сч), ТипД, "ТаблицаОтработанногоВремени", Строка(Сч)); 
			МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы); 
			
			РеквизитФормы = Новый РеквизитФормы("ДеньГр" + Строка(Сч), ТипД, "ТаблицаОтработанногоВремени", Строка(Сч)); 
			МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы); 
			
			РеквизитФормы = Новый РеквизитФормы("ДеньВ" + Строка(Сч), ТипКл, "ТаблицаОтработанногоВремени", ""); 
			МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы); 			
		КонецЦикла;
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
		
		
		Для Сч = 1 По КолДней Цикл
			ЭлементГр = Элементы.Добавить("Группа" + Строка(Сч), Тип("ГруппаФормы"), Элементы.ТаблицаОтработанногоВремени); 
			ЭлементГр.Группировка = ГруппировкаКолонок.Вертикальная;
			
			ЭлементГр2 = Элементы.Добавить("ГруппаГр" + Строка(Сч), Тип("ГруппаФормы"), ЭлементГр); 
			ЭлементГр2.Группировка = ГруппировкаКолонок.Вертикальная;
			
			ДН = ДеньНедели(НачалоМесяца(Объект.Период) + 86400*(Сч-1));
			
			
			Элемент = Элементы.Добавить("День" + Строка(Сч), Тип("ПолеФормы"), ЭлементГр2); 
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ТаблицаОтработанногоВремени." + "День" + Строка(Сч);
			Если ДН = 6 Или ДН = 7 Тогда
				Элемент.ЦветФона = WebЦвета.ЛососьТемный;
				Элемент.ЦветФонаЗаголовка = WebЦвета.ЛососьТемный;
			КонецеСли;	
			Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,Истина);
			Элемент.Ширина = 2;
			Элемент.УстановитьДействие("ПриИзменении", "ПриИзмененииПоказателя");
			
			Элемент = Элементы.Добавить("ДеньВ" + Строка(Сч), Тип("ПолеФормы"), ЭлементГр2); 
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ТаблицаОтработанногоВремени." + "ДеньВ" + Строка(Сч);
			Если ДН = 6 Или ДН = 7 Тогда
				Элемент.ЦветФонаЗаголовка = WebЦвета.ЛососьТемный;
			КонецеСли;	
			Элемент.ЦветФона = WebЦвета.НейтральноЗеленый;
			Элемент.Ширина = 3;
			Элемент.КнопкаОткрытия = Ложь;
			Элемент.КнопкаВыбора = Ложь;
			Элемент.Заголовок = " ";
			
			Элемент = Элементы.Добавить("ДеньГр" + Строка(Сч), Тип("ПолеФормы"), ЭлементГр); 
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ТаблицаОтработанногоВремени." + "ДеньГр" + Строка(Сч);
			Элемент.ТолькоПросмотр = Истина;
			Элемент.ЦветФона = WebЦвета.Серебряный;
			Элемент.ЦветФонаЗаголовка = WebЦвета.Серебряный;
			Элемент.Ширина = 2;
			Элемент.Видимость = Ложь;
		КонецЦикла;		
	//КонецеСли;
КонецПроцедуры	

&НаКлиенте
Процедура ПриИзмененииПоказателя()
	ИмяКолонки = Элементы.ТаблицаОтработанногоВремени.ТекущийЭлемент.Имя;
	Значение = Элементы.ТаблицаОтработанногоВремени.ТекущиеДанные[ИмяКолонки];
	НомерКолонки = Число(Прав(ИмяКолонки, СтрДлина(ИмяКолонки) - 4));
	ДН = ДеньНедели(НачалоМесяца(Объект.Период) + 86400*(НомерКолонки-1));
	
	Если Значение > 0 Тогда
		Элементы.ТаблицаОтработанногоВремени.ТекущиеДанные["ДеньВ" + Строка(НомерКолонки)] = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
	Иначе
		Если Дн = 6 Или Дн = 7 Тогда
			Элементы.ТаблицаОтработанногоВремени.ТекущиеДанные["ДеньВ" + Строка(НомерКолонки)] = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни;
		Иначе
			Элементы.ТаблицаОтработанногоВремени.ТекущиеДанные["ДеньВ" + Строка(НомерКолонки)] = Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск;
		КонецеСли;	
    конецеСли;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицу()
	ТаблицаОтработанногоВремени.Очистить();
	Таб = РеквизитФормыВЗначение("ТаблицаОтработанногоВремени");
	Для Каждого Тек Из Объект.ВремяПоГрафику Цикл
		ТекД = День(Тек.Дата);
		Если ТекД = 1 Тогда
			ТекСтрока = Таб.Добавить();
			ТекСтрока.Сотрудник = Тек.Сотрудник;
			ТекСтрока.График = Тек.График;
		КонецеСли;	
		
		ТекСтрока["ДеньГр" + Строка(ТекД)] = Тек.ЧасовПоГрафику;
	КонецЦикла;	
	
	Если Объект.ОтработанноеВремя.Количество() <> 0 Тогда
		Для Каждого Тек Из Объект.ОтработанноеВремя Цикл
			ТекД = День(Тек.Дата);
			Струк = Новый Структура;
			Струк.Вставить("Сотрудник", Тек.Сотрудник);
			НайСтрока = Таб.НайтиСтроки(Струк);
			
			Если НайСтрока = Неопределено Тогда
				ТекСтрока = Таб.Добавить();
				ТекСтрока.Сотрудник = Тек.Сотрудник;
				ТекСтрока.График = Тек.График;			
			КонецеСли;	
			НайСтрока[0]["День" + Строка(ТекД)] = Тек.ОтработаноЧасов;
			НайСтрока[0]["ДеньВ" + Строка(ТекД)] = Тек.ВидОтработанногоВремени;
		КонецЦикла;	
    Иначе
        //+++++Серегин М.В. 21.01.2016 18:28:22  КолДней = ДеньГода(КонецМесяца(Объект.Период)) - ДеньГода(НачалоМесяца(Объект.Период)) + 1;
        Если Объект.ВидПериодаРасчета = Перечисления.ПериодыРасчетаЗП.ПолныйМесяц Тогда 
            
            КолДней = ДеньГода(КонецМесяца(Объект.Период)) - ДеньГода(НачалоМесяца(Объект.Период)) + 1;
        Иначе
            КолДней = 15;
        КонецЕсли;
        //-----Серегин М.В. 21.01.2016 18:29:37 
		Сч = 1;
		Для Каждого Тек Из Таб Цикл
			Для Сч = 1 По КолДней Цикл
				Тек["День" + Строка(Сч)] = Тек["ДеньГр" + Строка(Сч)];
				Если Тек["День" + Строка(Сч)] <> 0 Тогда
					Тек["ДеньВ" + Строка(Сч)] = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
				Иначе
					Тек["ДеньВ" + Строка(Сч)] = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни;
				КонецеСли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецеСли;
	
	ЗначениеВРеквизитФормы(Таб, "ТаблицаОтработанногоВремени");
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Период = НачалоМесяца(ТекущаяДата());
	КонецеСли;	
	СформироватьКолонки();
	ЗаполнитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СформироватьКолонки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)
	Если Объект.Подразделение.Пустая() Тогда
		Предупреждение("Укажите подразделение!");
		Возврат;
	КонецеСли;	
	
	
	Если Не СпроситьУдалитьДанные() Тогда
		Возврат;
	КонецеСли;	
	
	ЗаполнитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Функция СпроситьУдалитьДанные()
	Если Объект.ВремяПоГрафику.Количество() <> 0 Или Объект.ОтработанноеВремя.Количество() <> 0 Тогда
		От = Вопрос("Табличная часть не пуста. При заполнении она будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если От = КодВозвратаДиалога.Да Тогда
			ТаблицаОтработанногоВремени.Очистить();
			Объект.ВремяПоГрафику.Очистить();
			Объект.ОтработанноеВремя.Очистить();
			Записать();
			Возврат истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Возврат Истина;
	КонецеСли;
КонецФункции	

&НаСервере
Процедура ЗаполнитьДанныеНаСервере()
    Если Объект.Подразделение.Наименование = "ИТ Отдел" Тогда
        Зап = Новый Запрос;
        Зап.Текст = "ВЫБРАТЬ
        |	Сотрудники.Ссылка КАК Сотрудник,
        |	ГрафикиРаботы.Ссылка КАК График,
        |	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
        |	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ЧасовПоГрафику,
        |	ВЫБОР
        |		КОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение = 0
        |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
        |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
        |	КОНЕЦ КАК ВидОтработанногоВремени
        |ИЗ
        |	РегистрСведений.РаботникиОрганизации.СрезПоследних(&ДатаЗапроса, ) КАК РаботникиОрганизацииСрезПоследних
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
        |		ПО РаботникиОрганизацииСрезПоследних.Сотрудник = Сотрудники.Ссылка
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы КАК ГрафикиРаботы
        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
        |			ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Ссылка = ГрафикиРаботы.Ссылка)
        |		ПО РаботникиОрганизацииСрезПоследних.ГрафикУчетаРабочегоВремени = ГрафикиРаботы.Ссылка
        |ГДЕ
        |	РаботникиОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.состояниеработникаорганизации.ПринятНаРаботуВОрганизацию)
        |	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(перечисление.ВидыУчетаВремени.ПоЧасам)
        |	И ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(&ДатаЗапроса, МЕСЯЦ)
        |	И РаботникиОрганизацииСрезПоследних.Подразделение = &Подразделение
        |
        |УПОРЯДОЧИТЬ ПО
        |	Сотрудник,
        |	Дата";
    ИначеЕсли Объект.Подразделение.Наименование = "Отдел логистики" Тогда
        //+++++Серегин М.В. 22.01.2016 13:35:36 
        Зап = Новый Запрос;
        Зап.Текст = ТекстЗапросаЗаполнениеНаСервере();
        //-----Серегин М.В. 22.01.2016 13:35:39 
    КонецЕсли;
    
        //+++++Серегин М.В. 21.01.2016 18:10:27 
        Если Объект.ВидПериодаРасчета = Перечисления.ПериодыРасчетаЗП.ПолныйМесяц Тогда
            ДатаЗапроса = КонецМесяца(Объект.Период);
        Иначе
            ДатаЗапроса = КонецДня(Объект.Период+86400*14);
        КонецЕсли;
        //-----Серегин М.В. 21.01.2016 18:10:28
        Зап.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);			
        Зап.УстановитьПараметр("Подразделение", Объект.Подразделение);
        
        //+++++Серегин М.В. 22.01.2016 13:34:33 
        Зап.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаЗапроса));			
        Зап.УстановитьПараметр("КонецПериода", ДатаЗапроса);
        //-----Серегин М.В. 22.01.2016 13:34:38 
        
        Рез = Зап.Выполнить().Выгрузить();
        
        
		Объект.ВремяПоГрафику.Загрузить(Рез);      		
		
		
		// Михушкин - добавляем  --->> 
		Если Объект.Подразделение.Наименование = "Отдел логистики" Тогда
			
			
			// получим данные по поездкам
			ЗапросМагистраль = Новый Запрос("ВЫБРАТЬ
			                                |	УчетПоездокМагистрали.Дата,
			                                |	УчетПоездокМагистрали.ДатаОкончанияПоездки,
			                                |	УчетПоездокМагистрали.Водитель КАК Сотрудник
			                                |ИЗ
			                                |	Документ.УчетПоездокМагистрали КАК УчетПоездокМагистрали
			                                |ГДЕ
			                                |	УчетПоездокМагистрали.Дата >= &Дата1
			                                |	И УчетПоездокМагистрали.ДатаОкончанияПоездки <= &Дата2
			                                |	И УчетПоездокМагистрали.Проведен
			                                |ИТОГИ ПО
			                                |	Сотрудник");
			ЗапросМагистраль.УстановитьПараметр("Дата1", НачалоМесяца(ДатаЗапроса));
			ЗапросМагистраль.УстановитьПараметр("Дата2", КонецДня(ДатаЗапроса));
			РезМагистральСотрудник = ЗапросМагистраль.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока РезМагистральСотрудник.Следующий() Цикл
				
				// сформируем график
				ТабГрафика = Новый ТаблицаЗначений;
				ТабГрафика.Колонки.Добавить("Дата");
				ТабГрафика.Колонки.Добавить("Сотрудник"); 
				ТабГрафика.Колонки.Добавить("График");
				ТабГрафика.Колонки.Добавить("ЧасовПоГрафику");
								
				
				НДень = НачалоМесяца(ДатаЗапроса);
				
				Пока НДень < КонецДня(ДатаЗапроса) Цикл		
					Нстр = ТабГрафика.Добавить();
					Нстр.Дата = НачалоДня(НДень);			
					Нстр.Сотрудник = РезМагистральСотрудник.Сотрудник;
					Нстр.График = Справочники.ГрафикиРаботы.НайтиПоНаименованию("Смены");
					Нстр.ЧасовПоГрафику = 0;		
					НДень = НДень + 86400;
				КонецЦикла;
				
						
				Рез = РезМагистральСотрудник.Выбрать();
				
				Пока Рез.Следующий() Цикл					
					НайДень1 = ТабГрафика.НайтиСтроки(Новый Структура("Дата", НачалоДня(Рез.Дата)));	
					Если НайДень1.Количество() Тогда					
						НайДень1[0].Сотрудник = Рез.Сотрудник;
						//НайДень1[0].График = Справочники.ГрафикиРаботы.НайтиПоНаименованию("Смены");
					    НайДень1[0].ЧасовПоГрафику = 8;			
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Рез.ДатаОкончанияПоездки) Тогда					
						НайДень2 = ТабГрафика.НайтиСтроки(Новый Структура("Дата", НачалоДня(Рез.ДатаОкончанияПоездки)));	
						Если НайДень2.Количество() Тогда					
							НайДень2[0].Сотрудник = Рез.Сотрудник;
							//НайДень2[0].График = Справочники.ГрафикиРаботы.НайтиПоНаименованию("Смены");
						    НайДень2[0].ЧасовПоГрафику = 8;			
						КонецЕсли;					
					КонецЕсли;					
				КонецЦикла;
				
				
				Для каждого Тек Из ТабГрафика Цикл					
					НТек = Объект.ВремяПоГрафику.Добавить();
					ЗаполнитьЗначенияСвойств(НТек, Тек);			
				КонецЦикла;	
				
				ТабГрафика.Очистить();
		
			КонецЦикла;
			
		КонецЕсли;
		// <<--- Михушкин 
		
		
        ЗаполнитьТаблицу();
		
    КонецПроцедуры
    
Функция ТекстЗапросаЗаполнениеНаСервере()
        //+++++Серегин М.В. 22.01.2016 13:35:00 
        //    Зап = Новый Запрос;
        //    Зап.Текст = "ВЫБРАТЬ
        //                |   РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
        //                |   ГрафикиРаботы.Ссылка КАК График,
        //                |   ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
        //                |   ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ЧасовПоГрафику,
        //                |   ВЫБОР
        //                |       КОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение = 0
        //                |           ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
        //                |       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
        //                |   КОНЕЦ КАК ВидОтработанногоВремени
        //                |ПОМЕСТИТЬ ВТ_ГрафикРабот
        //                |ИЗ
        //                |   РегистрСведений.РаботникиОрганизации.СрезПоследних(&ДатаЗапроса, ) КАК РаботникиОрганизацииСрезПоследних
        //                |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы КАК ГрафикиРаботы
        //                |           ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
        //                |           ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Ссылка = ГрафикиРаботы.Ссылка)
        //                |       ПО РаботникиОрганизацииСрезПоследних.ГрафикУчетаРабочегоВремени = ГрафикиРаботы.Ссылка
        //                |ГДЕ
        //                |   РаботникиОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.состояниеработникаорганизации.ПринятНаРаботуВОрганизацию)
        //                |   И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(перечисление.ВидыУчетаВремени.ПоЧасам)
        //                |   И ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(&ДатаЗапроса, МЕСЯЦ)
        //                |   И РаботникиОрганизацииСрезПоследних.Подразделение = &Подразделение
        //                |   И ГрафикиРаботыПоВидамВремени.Дата <= &ДатаЗапроса
        //                |;
        //                |
        //                |////////////////////////////////////////////////////////////////////////////////
        //                |ВЫБРАТЬ
        //                |   ВТ_ГрафикРабот.Сотрудник КАК Сотрудник,
        //                |   ВТ_ГрафикРабот.График,
        //                |   ВТ_ГрафикРабот.Дата КАК Дата,
        //                |   ВТ_ГрафикРабот.ЧасовПоГрафику,
        //                |   ВТ_ГрафикРабот.ВидОтработанногоВремени,
        //                |   КОЛИЧЕСТВО(ЗакрытыеЗаказы.Регистратор) КАК Регистратор
        //                |ПОМЕСТИТЬ ВТ_Итог
        //                |ИЗ
        //                |   ВТ_ГрафикРабот КАК ВТ_ГрафикРабот
        //                |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
        //                |       ПО ВТ_ГрафикРабот.Дата = ЗакрытыеЗаказы.Период
        //                |           И (ВТ_ГрафикРабот.Сотрудник = ЗакрытыеЗаказы.Водитель
        //                |               ИЛИ ВТ_ГрафикРабот.Сотрудник = ЗакрытыеЗаказы.Экспедитор)
        //                |
        //                |СГРУППИРОВАТЬ ПО
        //                |   ВТ_ГрафикРабот.Сотрудник,
        //                |   ВТ_ГрафикРабот.График,
        //                |   ВТ_ГрафикРабот.ВидОтработанногоВремени,
        //                |   ВТ_ГрафикРабот.ЧасовПоГрафику,
        //                |   ВТ_ГрафикРабот.Дата
        //                |;
        //                |
        //                |////////////////////////////////////////////////////////////////////////////////
        //                |ВЫБРАТЬ
        //                |   ВТ_Итог.Сотрудник КАК Сотрудник,
        //                |   ВТ_Итог.График,
        //                |   ВТ_Итог.Дата КАК Дата,
        //                |   ВТ_Итог.ВидОтработанногоВремени,
        //                |   ВЫБОР
        //                |       КОГДА ВТ_Итог.Регистратор > 0
        //                |           ТОГДА ВТ_Итог.ЧасовПоГрафику
        //                |       ИНАЧЕ 0
        //                |   КОНЕЦ КАК ЧасовПоГрафику
        //                |ИЗ
        //                |   ВТ_Итог КАК ВТ_Итог
        //                |
        //                |УПОРЯДОЧИТЬ ПО
        //                |   Сотрудник,
        //                |   Дата";
        //-----Серегин М.В. 22.01.2016 13:35:34 
        
        Возврат "ВЫБРАТЬ
                |   РаботникиОрганизации.Сотрудник,
                |   РаботникиОрганизации.Период КАК ДатаУвольнения,
                |   РаботникиОрганизации.ГрафикУчетаРабочегоВремени
                |ПОМЕСТИТЬ ВТ_УволенныеВПериоде
                |ИЗ
                |   РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
                |ГДЕ
                |   РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.состояниеработникаорганизации.Уволен)
                |   И РаботникиОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
                |   И РаботникиОрганизации.Подразделение = &Подразделение
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |   РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
                |   ГрафикиРаботы.Ссылка КАК График,
                |   ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
                |   ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ЧасовПоГрафику,
                |   ВЫБОР
                |       КОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение = 0
                |           ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
                |       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
                |   КОНЕЦ КАК ВидОтработанногоВремени
                |ПОМЕСТИТЬ ВТ_ГрафикРабот
                |ИЗ
                |   РегистрСведений.РаботникиОрганизации.СрезПоследних(&ДатаЗапроса, ) КАК РаботникиОрганизацииСрезПоследних
                |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы КАК ГрафикиРаботы
                |           ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
                |           ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Ссылка = ГрафикиРаботы.Ссылка)
                |       ПО РаботникиОрганизацииСрезПоследних.ГрафикУчетаРабочегоВремени = ГрафикиРаботы.Ссылка
                |ГДЕ
                |   РаботникиОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.состояниеработникаорганизации.ПринятНаРаботуВОрганизацию)
                |   И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(перечисление.ВидыУчетаВремени.ПоЧасам)
                |   И ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(&ДатаЗапроса, МЕСЯЦ)
                |   И РаботникиОрганизацииСрезПоследних.Подразделение = &Подразделение
                |   И ГрафикиРаботыПоВидамВремени.Дата <= &ДатаЗапроса
                |
                |ОБЪЕДИНИТЬ ВСЕ
                |
                |ВЫБРАТЬ
                |   ВТ_УволенныеВПериоде.Сотрудник,
                |   ГрафикиРаботы.Ссылка,
                |   ГрафикиРаботыПоВидамВремени.Дата,
                |   ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
                |   ВЫБОР
                |       КОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение = 0
                |           ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
                |       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
                |   КОНЕЦ
                |ИЗ
                |   Справочник.ГрафикиРаботы КАК ГрафикиРаботы
                |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
                |       ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Ссылка = ГрафикиРаботы.Ссылка)
                |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УволенныеВПериоде КАК ВТ_УволенныеВПериоде
                |       ПО (ВТ_УволенныеВПериоде.ГрафикУчетаРабочегоВремени = ГрафикиРаботы.Ссылка)
                |ГДЕ
                |   ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(перечисление.ВидыУчетаВремени.ПоЧасам)
                |   И ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(&ДатаЗапроса, МЕСЯЦ)
                |   И ГрафикиРаботыПоВидамВремени.Дата < ВТ_УволенныеВПериоде.ДатаУвольнения
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |   ВТ_ГрафикРабот.Сотрудник КАК Сотрудник,
                |   ВТ_ГрафикРабот.График,
                |   ВТ_ГрафикРабот.Дата КАК Дата,
                |   ВТ_ГрафикРабот.ЧасовПоГрафику,
                |   ВТ_ГрафикРабот.ВидОтработанногоВремени,
                |   КОЛИЧЕСТВО(ЗакрытыеЗаказы.Регистратор) КАК Регистратор
                |ПОМЕСТИТЬ ВТ_Итог
                |ИЗ
                |   ВТ_ГрафикРабот КАК ВТ_ГрафикРабот
                |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
                |       ПО ВТ_ГрафикРабот.Дата = ЗакрытыеЗаказы.Период
                |           И (ВТ_ГрафикРабот.Сотрудник = ЗакрытыеЗаказы.Водитель
                |               ИЛИ ВТ_ГрафикРабот.Сотрудник = ЗакрытыеЗаказы.Экспедитор)
                |
                |СГРУППИРОВАТЬ ПО
                |   ВТ_ГрафикРабот.Сотрудник,
                |   ВТ_ГрафикРабот.График,
                |   ВТ_ГрафикРабот.ВидОтработанногоВремени,
                |   ВТ_ГрафикРабот.ЧасовПоГрафику,
                |   ВТ_ГрафикРабот.Дата
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |   ВТ_Итог.Сотрудник КАК Сотрудник,
                |   ВТ_Итог.График,
                |   ВТ_Итог.Дата КАК Дата,
                |   ВТ_Итог.ВидОтработанногоВремени,
                |   ВЫБОР
                |       КОГДА ВТ_Итог.Регистратор > 0
                |           ТОГДА ВТ_Итог.ЧасовПоГрафику
                |       ИНАЧЕ 0
                |   КОНЕЦ КАК ЧасовПоГрафику
                |ИЗ
                |   ВТ_Итог КАК ВТ_Итог
                |
                |УПОРЯДОЧИТЬ ПО
                |   Сотрудник,
                |   Дата";
        
        
    КонецФункции // ()
    

Процедура ЗаписатьТаблицуВОбъект()
	Таб = РеквизитФормыВЗначение("ТаблицаОтработанногоВремени");
	Объект.ОтработанноеВремя.Очистить();
	
	Для Каждого Тек Из Таб Цикл
		КолДней = ДеньГода(КонецМесяца(Объект.Период)) - ДеньГода(НачалоМесяца(Объект.Период)) + 1;
		Для Сч = 1 По КолДней Цикл
			Нов = Объект.ОтработанноеВремя.Добавить();
			Нов.Сотрудник = Тек.Сотрудник;
			Нов.Дата = НачалоМесяца(Объект.Период) + 86400*Сч - 1;
			Нов.ОтработаноЧасов = Тек["День" + Строка(Сч)];
			Нов.ВидОтработанногоВремени = Тек["ДеньВ" + Строка(Сч)];
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	ЗаписатьТаблицуВОбъект();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтработанногоВремениПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтработанногоВремениПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	Если Не СпроситьУдалитьДанные() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецеСли;	
	
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(МесяцСтрока, Объект.Период);
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Объект.Период);
	
	//Объект.Период = ПериодРегистрации;
	//УстановитьДатыНачалаИОкончанияПериодов();
	//
	//
	//УстановитьЗаголовокФормыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Не СпроситьУдалитьДанные() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецеСли;	

	НачЗн = Объект.Период;
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(МесяцСтрока, СтандартнаяОбработка, Объект.Период, ЭтаФорма);
	
	Если НачЗн <> Объект.Период Тогда
		СформироватьКолонки();
	КонецеСли;	
	
	//Объект.Период = Период;
	//УстановитьДатыНачалаИОкончанияПериодов();
	//
	//Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
	//	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	//	ОформитьЗаголовкиДнейМесяца();
	//КонецЕсли;
	//
	//УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Не СпроситьУдалитьДанные() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецеСли;	
	Объект.Период = ДобавитьМесяц(Объект.Период, Направление);
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Объект.Период);
	
	//Объект.Период = ПериодРегистрации;	
	
	//УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	//УстановитьДатыНачалаИОкончанияПериодов();
	//
	//Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
	//	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	//	ОформитьЗаголовкиДнейМесяца();
	//КонецЕсли;	
	//
	//УстановитьЗаголовокФормыДокумента();
	СформироватьКолонки();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	//РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	//РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
	//Объект.Период = ПериодРегистрации;
	//УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	//УстановитьДатыНачалаИОкончанияПериодов();
	//
	//Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
	//	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	//	ОформитьЗаголовкиДнейМесяца();
	//КонецЕсли;
	//
	//УстановитьЗаголовокФормыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Объект.Период);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СформироватьКолонки();
КонецПроцедуры
