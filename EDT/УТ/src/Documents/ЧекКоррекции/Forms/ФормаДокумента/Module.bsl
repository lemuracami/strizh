
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Документ = РеквизитФормыВЗначение("Объект");
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Документ, глЗначениеПеременной("глТекущийПользователь"));
		
		Документ.ТипРасчета =  Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
		Документ.ТипКоррекции = Перечисления.ТипКоррекцииККМ.СамостоятельнаяОперация;
		Документ.ТипОплаты = Справочники.ТипыОплат.Наличные;
		Документ.СтавкаНДС = Справочники.СтавкиНДСФЗ54.НДС18;
		Документ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		ОрганизацияПриИзмененииНаСервере();
		
		Если Не ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		
			Элементы.ФормаНапечататьЧекКоррекции.Доступность = Ложь;
	
		КонецЕсли;	
		
		ЗначениеВРеквизитФормы(Документ, "Объект");
		
	Иначе 
		
		СписокКасс = ЗаполнитьСписокККМПоОрганизации(Объект.Организация);
		
		Элементы.ФормаНапечататьЧекКоррекции.Доступность = Ложь;
		
		
		Элементы.КассаККМ.СписокВыбора.ЗагрузитьЗначения(СписокКасс);
		
		СписокКассиров = ПолучитьСписокКассирововОрганизации(Объект.Организация);
		
		СписокКассиров.Добавить(Объект.Кассир);
	
		Элементы.Кассир.СписокВыбора.ЗагрузитьЗначения(СписокКассиров);
		
		Для Каждого КассаСписка Из СписокКасс Цикл 
			
			Если Объект.КассаККМ = КассаСписка Тогда 
				Элементы.ФормаНапечататьЧекКоррекции.Доступность = Истина;
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если  Элементы.КассаККМ.СписокВыбора.НайтиПоЗначению(Объект.КассаККМ) = Неопределено Тогда
		
			Элементы.КассаККМ.СписокВыбора.Добавить(Объект.КассаККМ);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если Объект.ЧекПробитНаККМ Тогда
		
		ТолькоПросмотр = Истина;
		Элементы.ФормаКоманднаяПанель.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКассирововОрганизации(Организация, Первую = Ложь)

	
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НазначениеКассировПоОрганизациямСрезПоследних.Кассир КАК Кассир,
	                      |	НазначениеКассировПоОрганизациямСрезПоследних.Порядок КАК Порядок,
	                      |	НазначениеКассировПоОрганизациямСрезПоследних.График КАК График,
	                      |	ЕСТЬNULL(НазначениеКассировПоОрганизациямСрезПоследних.УчитываетсяПриНазначении, ЛОЖЬ) КАК УчитываетсяПриНазначении
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрСведений.НазначениеКассировПоОрганизациям.СрезПоследних(
	                      |			,
	                      |			Организация = &Организация
	                      |				) КАК НазначениеКассировПоОрганизациямСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Кассир КАК Кассир,
	                      |	ВТ.Порядок КАК Порядок,
	                      |	ВТ.График КАК График,
	                      |	ВТ.УчитываетсяПриНазначении КАК УчитываетсяПриНазначении
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |ГДЕ
	                      |	ВТ.УчитываетсяПриНазначении = ИСТИНА");
	Запрос.УстановитьПараметр("Организация", Организация);
	ТЗ_Кассиры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Кассир");

	
	Если Первую Тогда
		
		Если ТЗ_Кассиры.Количество() > 0 Тогда
			
			Возврат ТЗ_Кассиры[0];
			
		Иначе 
			
			Возврат Справочники.Кассиры.ПустаяСсылка();
			
		КонецЕсли;			
	
	Иначе
	
		Возврат ТЗ_Кассиры;		
	
	КонецЕсли;

	
КонецФункции	

&НаСервереБезКонтекста
Функция  ЗаполнитьСписокККМПоОрганизации(Организация, Первую = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязкиККМККМПоРабочимМестам.ККМ КАК ККМ
	|ИЗ
	|	Справочник.СвязкиККМ.ККМПоРабочимМестам КАК СвязкиККМККМПоРабочимМестам
	|ГДЕ
	|	СвязкиККМККМПоРабочимМестам.Ссылка.ПометкаУдаления = Ложь
	|	И СвязкиККМККМПоРабочимМестам.РабочееМесто = &РабочееМесто
	|	И СвязкиККМККМПоРабочимМестам.ККМ.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМесто);
	
	
	КассыККМ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ККМ");

	
	Если Первую Тогда
		
		Если КассыККМ.Количество() > 0 Тогда
			
			Возврат КассыККМ[0];
			
		Иначе 
			
			Возврат Справочники.КассыККМ.ПустаяСсылка();
			
		КонецЕсли;			
	
	Иначе
	
		Возврат КассыККМ;		
	
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция  НапечататьЧекКоррекцииНаСервере(Ответ, Отказ)
	
	Отказ = Ложь;
	Результат = Истина;
	Ответ     = "";
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Записать(ПараметрыЗаписи);

	Если Объект.ЧекПробитНаККМ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДопПараметрыЧека = Новый Структура;
	
	Структура = ПолучитьДопПараметрыЧека();

	ОнлайнКасса = Структура.ОнлайнКасса;
	ТипКассовогоЧека = Структура.ТипКассовогоЧека;
	СерверККМ = Структура.СерверККМ;
	ККМИнтегрированаВСерверККМ = Структура.ККМИнтегрированаВСерверККМ;
	 
	ДопПараметрыЧека.Вставить("ОнлайнКасса", ОнлайнКасса);
	ДопПараметрыЧека.Вставить("ТипКассовогоЧека", ТипКассовогоЧека);
	ДопПараметрыЧека.Вставить("ТипОплаты", Объект.ТипОплаты);
	
	НомерДокументаККМ = 0;
	ПараметрыЧека = "";

	ДопПараметрыЧека.Вставить("КодТипаОплатыНаККМ", Структура.КодОплатыНаККМ);
	//ДопПараметрыЧека.Вставить("АдресИнформирования", "checks@strizh-logistic.ru"); 
	//ДопПараметрыЧека.Вставить("АдресИнформирования", "couriers.service@checks.ru");  
	ДопПараметрыЧека.Вставить("АдресИнформирования", "checks@gl.ru");
	НаимКассира = "Кассир 1";
	Если Не Объект.Кассир.Пустая() Тогда
		НаимКассира = Структура.НаименованиеКассира;
	КонецеСли;	
	
	ДопПараметрыЧека.Вставить("Кассир", НаимКассира);
	Если Объект.ТипКоррекции = Перечисления.ТипКоррекцииККМ.СамостоятельнаяОперация Тогда
		ДопПараметрыЧека.Вставить("ТипКоррекции", 0);
	ИначеЕсли Объект.ТипКоррекции = Перечисления.ТипКоррекцииККМ.ОперацияПоПредписанию Тогда
		ДопПараметрыЧека.Вставить("ТипКоррекции", 1);
	КонецеСли;	
	
	ДопПараметрыЧека.Вставить("ТипРасчета", Объект.ТипРасчета);
	ДопПараметрыЧека.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	ДопПараметрыЧека.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС", Объект.ОрганизацияНеЯвляетсяПлательщикомНДС);
	ДопПараметрыЧека.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	ДопПараметрыЧека.Вставить("СуммаНДС", Объект.СуммаНДС);
	ДопПараметрыЧека.Вставить("ДатаДокументаОснования", Объект.ДатаДокументаОснования);
	ДопПараметрыЧека.Вставить("НомерДокументаОснования", Объект.НомерДокументаОснования);
	ДопПараметрыЧека.Вставить("Предписание", Объект.Предписание);
	ДопПараметрыЧека.Вставить("НомерВнешнегоЗаказа", "");
	
	Если ТипЗнч(Объект.ОснованиеДляКоррекции) = Тип("Строка") Тогда
		ДопПараметрыЧека.Вставить("ОснованиеКоррекции", Объект.ОснованиеДляКоррекции);
	Иначе
		ДопПараметрыЧека.Вставить("ОснованиеКоррекции", "Кассовый чек");
	КонецеСли;	
	
	Если ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		Ответ = РаботаСКассовымСерверомСервер.ЗахватитьККМНаСервереККМ(Объект.КассаККМ, СерверККМ, Объект.Ссылка);
		Если Не Ответ.Результат Тогда
			
			Ответ     = "ККМ " + Строка(Объект.КассаККМ) + " не может быть захвачена для печати чеков! Описание проблемы: " + Ответ.Описание;
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Ложь;

		КонецЕсли;	
		
	КонецЕсли;	
	
	
	//СерверККТ = ККМ_ФЗ_54.ИнициализироватьСерверККТ();
	//ККМ_ФЗ_54.ДобавитьУстройствоATOL(СерверККТ, Объект.КассаККМ);
	СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(Объект.КассаККМ);

	
	ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_05(СерверККТ, Объект.КассаККМ, , ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека);
	
	//+++ БАО 06.10.2017 №1918
	//---Если Не ОтветФЗ Тогда
	Если Не ОтветФЗ.Результат Тогда
		Попытка
			ККМ_ФЗ_54.ЗаписьЛогаОшибкиККМ(ОтветФЗ.КодОшибки, ОтветФЗ.ТекстОшибки, Объект.КассаККМ, Объект.Ссылка);				
		Исключение
		КонецПопытки;

	//--- БАО 06.10.2017 №1918
		
		ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(СерверККТ, Объект.КассаККМ);
		Результат = Ложь;
		Ответ = "Ошибка при пробитии чека ФЗ54";
		Отказ = Истина;
		Возврат Ложь;
		
	Иначе
		
		Объект.НомерСменыККМ = ПараметрыЧека.НомерСмены;
		Объект.НомерЧекаККМ = ПараметрыЧека.НомерЧека;
		Объект.ЧекПробитНаККМ = Истина;

		Результат = Истина;
		Ответ = "";
		Отказ = Ложь;
		
	КонецеСли;	
	
	ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(СерверККТ, Объект.КассаККМ);
	
	Если ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		Ответ = РаботаСКассовымСерверомСервер.ОтпуститьККМНаСервереККМ(Объект.КассаККМ, СерверККМ, Объект.Ссылка);
		Если Не Ответ.Результат Тогда
			Сообщить("ККМ " + Строка(Объект.КассаККМ) + " не может быть освобождена на сервере ККМ! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
	КонецЕсли;	

	СерверККМ = "";
	
	Попытка
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		
		Записать(ПараметрыЗаписи);

	Исключение
		Ответ     = "Не удалось записать документ с установленными параметрами пробитого чека.";
		Отказ     = Истина;
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Функция ПолучитьДопПараметрыЧека()
	
	ОнлайнКасса = Объект.КассаККМ.ОнлайнКасса;
	
	
	Если Объект.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
		ТипКассовогоЧека = Перечисления.ТипыКассовыхЧеков.ЧекКоррекцииПрихода;
	Иначе 	
		ТипКассовогоЧека = Перечисления.ТипыКассовыхЧеков.ЧекКоррецииРасхода;
	КонецЕсли;
	
	
	КодОплатыНаККМ = Объект.ТипОплаты.КодОплатыНаККМ;
	
	НаименованиеКассира = Объект.Кассир.Наименование;
	
	СерверККМ =	Объект.КассаККМ.Терминал.СерверККМ;
	
	ККМИнтегрированаВСерверККМ = Объект.КассаККМ.ККМИнтегрированаВСерверККМ; 
	
	ВерсияПлатформыATOL = Объект.КассаККМ.ВерсияПлатформыATOL;
	НомерВнешнегоЗаказа = "";
	
	Возврат Новый Структура("ОнлайнКасса, ТипКассовогоЧека, КодОплатыНаККМ, НаименованиеКассира, СерверККМ, ККМИнтегрированаВСерверККМ, ВерсияПлатформыATOL, НомерВнешнегоЗаказа", ОнлайнКасса, ТипКассовогоЧека, КодОплатыНаККМ, НаименованиеКассира, СерверККМ, ККМИнтегрированаВСерверККМ, ВерсияПлатформыATOL, НомерВнешнегоЗаказа);

КонецФункции

&НаКлиенте
Процедура НапечататьЧекКоррекции(Команда)
	
	Перем Ответ;
	Перем Отказ;

	
	Если Не ЗначениеЗаполнено(Объект.ОснованиеДляКоррекции) Тогда
		Предупреждение("Укажите основание для коррекции!");
		ТекущийЭлемент = Элементы.ОснованиеДляКоррекции;
		Возврат;
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Объект.ДатаДокументаОснования) Тогда
		Предупреждение("Укажите дату основания коррекции!");
		ТекущийЭлемент = Элементы.ДатаДокументаОснования;
		Возврат;
	КонецеСли;	
	
	Если Не ЗначениеЗаполнено(Объект.НомерДокументаОснования) Тогда
		Предупреждение("Укажите номер основания коррекции!");
		ТекущийЭлемент = Элементы.НомерДокументаОснования;
		Возврат;
	КонецеСли;	
	
	
	Если НапечататьЧекКоррекцииНаСервере(Ответ, Отказ) Тогда
		Закрыть();
	Иначе
		Предупреждение(?(Отказ, "Возможны расхождения ИБ и ленты ФР! ", "") + Ответ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Объект.КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	Объект.Кассир = Справочники.Кассиры.ПустаяСсылка();
	
	Элементы.КассаККМ.СписокВыбора.Очистить();
	Элементы.Кассир.СписокВыбора.Очистить();
	
	СписокКасс = ЗаполнитьСписокККМПоОрганизации(Объект.Организация);
	
	
	Если СписокКасс.Количество() > 0 Тогда
			
		Объект.КассаККМ = СписокКасс[0];
		Элементы.КассаККМ.СписокВыбора.ЗагрузитьЗначения(СписокКасс);
		
	КонецЕсли;	
	
	СписокКассиров = ПолучитьСписокКассирововОрганизации(Объект.Организация);
	
	Если СписокКассиров.Количество() > 0 Тогда
			
		Объект.Кассир = СписокКассиров[0];
		Элементы.Кассир.СписокВыбора.ЗагрузитьЗначения(СписокКассиров);
		
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(Объект.Дата, Отказ, Объект.Организация);
	Объект.ОрганизацияНеЯвляетсяПлательщикомНДС = ?(Отказ, Истина, ПараметрыУП.ОрганизацияНеЯвляетсяПлательщикомНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы();
	
	Если Не ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		
		Элементы.ФормаНапечататьЧекКоррекции.Доступность = Ложь;
		
	Иначе 	
		
		Элементы.ФормаНапечататьЧекКоррекции.Доступность = Истина;
	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	УстановитьДоступностьЭлементовФормы();
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОснованиеДляКоррекцииПриИзмененииНаСервере()
	
	Если ТипЗнч(Объект.ОснованиеДляКоррекции) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Объект.НомерДокументаОснования = Формат(Объект.ОснованиеДляКоррекции.НомерЧекаККМ, "ЧГ=0");
	Иначе
		Объект.НомерДокументаОснования = "";
	КонецЕсли;

	
	Если ЗначениеЗаполнено(Объект.ОснованиеДляКоррекции) 
		И НЕ ТипЗнч(Объект.ОснованиеДляКоррекции) = Тип("Строка") Тогда
		
		Объект.ДатаДокументаОснования = Объект.ОснованиеДляКоррекции.Дата;
		Объект.Организация = Объект.ОснованиеДляКоррекции.Организация;
		
		ОрганизацияПриИзмененииНаСервере();

		Объект.КассаККМ    = Объект.ОснованиеДляКоррекции.КассаККМ;
		
		Элементы.КассаККМ.СписокВыбора.Добавить(Объект.КассаККМ); 
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерДокументаОснования) Тогда
			Объект.НомерДокументаОснования = Объект.ОснованиеДляКоррекции.Номер;
		КонецЕсли;
		
		Объект.Кассир = Объект.ОснованиеДляКоррекции.Кассир;
		Если ЗначениеЗаполнено(Объект.Кассир) Тогда
			Элементы.Кассир.СписокВыбора.Добавить(Объект.Кассир); 
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОснованиеДляКоррекцииПриИзменении(Элемент)
	
	ОснованиеДляКоррекцииПриИзмененииНаСервере();
	УстановитьДоступностьЭлементовФормы();
	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если  Объект.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда
		
		Объект.СуммаНДС = 0;
		
	Иначе 
		
		Если Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДСФЗ54.НДС10") Тогда
			СтавкаНДС = 10;
		ИначеЕсли Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДСФЗ54.НДС18") Тогда
			СтавкаНДС = 18;
		ИначеЕсли Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДСФЗ54.НДС20") Тогда
			СтавкаНДС = 20;
		Иначе
			СтавкаНДС = 0;
		КонецЕсли;
		
		Объект.СуммаНДС = Объект.СуммаДокумента * СтавкаНДС / 100;
		
	КонецЕсли;												   
	
КонецПроцедуры


&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

