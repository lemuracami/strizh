Перем СуммаЗП;
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПодключениеКИМ = Евген.СоздатьПодключениеКИнтернетМагазину();
	// Вставить содержимое обработчика.
	ПроизвестиКорректировкуЗаписейРНЗакрытыеЗаказы(ПодключениеКИМ);
	ПроизвестиКорректировкуЗаписейРНРасчетУслугСД(ПодключениеКИМ);
	//ПроизвестиКорректировкуЗаписейРНДоходыКомпании();
	
	СуммаЗП = Новый ТаблицаЗначений;
	СуммаЗП.Колонки.Добавить("Фактическая");
	СуммаЗП.Колонки.Добавить("ПослеКор");
	СуммаЗП.Колонки.Добавить("УчастникЭкипажа");
	
	ПроизвестиКорректировкуЗаписейРНУчетЗП();
	ПроизвестиКорректировкуЗаписейРНОперативнаяЭкономикаЗаказов();
	ПроизвестиКорректировкуЗаписейСводПозарплате();
	
	//CeHbKA
	//ПроизвестиКорректировкуЗаписейРНВзаиморасчетыСКомитентами();
	
	//Геннадий #4277 14.10.2020 ->
	ПроизвестиКорректировкуЗаписейРС(Отказ);
	//Геннадий #4277 14.10.2020 <-
	
КонецПроцедуры

Процедура ПроизвестиКорректировкуЗаписейРНЗакрытыеЗаказы(ПодключениеКИМ)
	
	Движения.ЗакрытыеЗаказы.Очистить();
	Движения.ЗакрытыеЗаказы.Записывать = Истина;
	Движения.ЗакрытыеЗаказы.БлокироватьДляИзменения = Истина;
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗакрытыеЗаказы.Период КАК Период,
	            |	ЗакрытыеЗаказы.Регистратор КАК Регистратор,
	            |	ЗакрытыеЗаказы.НомерСтроки КАК НомерСтроки,
	            |	ЗакрытыеЗаказы.Активность КАК Активность,
	            |	ЗакрытыеЗаказы.ЮрЛицо КАК ЮрЛицо,
	            |	ЗакрытыеЗаказы.ТипЗаказа КАК ТипЗаказа,
	            |	ЗакрытыеЗаказы.Транспорт КАК Транспорт,
	            |	ЗакрытыеЗаказы.ИнтернетМагазин КАК ИнтернетМагазин,
	            |	ЗакрытыеЗаказы.КатегорияДоставки КАК КатегорияДоставки,
	            |	ЗакрытыеЗаказы.Водитель КАК Водитель,
	            |	ЗакрытыеЗаказы.Экспедитор КАК Экспедитор,
	            |	ЗакрытыеЗаказы.Клиент КАК Клиент,
	            |	ЗакрытыеЗаказы.Реализация КАК Реализация,
	            |	ЗакрытыеЗаказы.ТипОплаты КАК ТипОплаты,
	            |	ЗакрытыеЗаказы.СтатусЗаказа КАК СтатусЗаказа,
	            |	ЗакрытыеЗаказы.ПричинаНевыполнения КАК ПричинаНевыполнения,
	            |	ЗакрытыеЗаказы.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина,
	            |	ЗакрытыеЗаказы.ПричинаОтказа КАК ПричинаОтказа,
	            |	ЗакрытыеЗаказы.VIPДоставка КАК VIPДоставка,
	            |	ЗакрытыеЗаказы.ВидVip КАК ВидVip,
	            |	ЗакрытыеЗаказы.ТарифнаяСетка КАК ТарифнаяСетка,
	            |	ЗакрытыеЗаказы.РасчетныйБрейк КАК РасчетныйБрейк,
	            |	ЗакрытыеЗаказы.ТарифнаяСеткаПартнера КАК ТарифнаяСеткаПартнера,
	            |	ЗакрытыеЗаказы.ЗонаТарификации КАК ЗонаТарификации,
	            |	ЗакрытыеЗаказы.ПричинаОтклоненияЗаказа КАК ПричинаОтклоненияЗаказа,
	            |	ЗакрытыеЗаказы.Партнер КАК Партнер,
	            |	ЗакрытыеЗаказы.ТерминалДоставки КАК ТерминалДоставки,
	            |	ЗакрытыеЗаказы.ТерминалПриёма КАК ТерминалПриёма,
	            |	ЗакрытыеЗаказы.ОбъемныйБрейк КАК ОбъемныйБрейк,
	            |	ЗакрытыеЗаказы.СуммаОценочная КАК СуммаОценочная,
	            |	ЗакрытыеЗаказы.СуммаПолученная КАК СуммаПолученная,
	            |	ЗакрытыеЗаказы.СуммаДоставкиДоМКАД КАК СуммаДоставкиДоМКАД,
	            |	ЗакрытыеЗаказы.СуммаДоставкиЗаМКАД КАК СуммаДоставкиЗаМКАД,
	            |	ЗакрытыеЗаказы.УслугиСД КАК УслугиСД,
	            |	ЗакрытыеЗаказы.БанковскаяКомиссия КАК БанковскаяКомиссия,
	            |	ЗакрытыеЗаказы.КассовоеОбслуживание КАК КассовоеОбслуживание,
	            |	ЗакрытыеЗаказы.СуммаВозврата КАК СуммаВозврата,
	            |	ЗакрытыеЗаказы.Масса КАК Масса,
	            |	ЗакрытыеЗаказы.СуммаЧастичногоВозврата КАК СуммаЧастичногоВозврата,
	            |	ЗакрытыеЗаказы.ОплаченоКлиентовНал КАК ОплаченоКлиентовНал,
	            |	ЗакрытыеЗаказы.АгентскоеВознаграждение КАК АгентскоеВознаграждение,
	            |	ЗакрытыеЗаказы.ПредоплатаПоКредиту КАК ПредоплатаПоКредиту,
	            |	ЗакрытыеЗаказы.УслугиСДЧистые КАК УслугиСДЧистые,
	            |	ЗакрытыеЗаказы.СтраховойСбор КАК СтраховойСбор,
	            |	ЗакрытыеЗаказы.ФактическийВес КАК ФактическийВес,
	            |	ЗакрытыеЗаказы.ОбъемЗабора КАК ОбъемЗабора,
	            |	ЗакрытыеЗаказы.ОбъемЗабораПоЗаказам КАК ОбъемЗабораПоЗаказам,
	            |	ЗакрытыеЗаказы.Поступление КАК Поступление,
	            |	ЗакрытыеЗаказы.Списание КАК Списание,
	            |	ЗакрытыеЗаказы.Оприходование КАК Оприходование,
	            |	ЗакрытыеЗаказы.Перемещение КАК Перемещение,
	            |	ЗакрытыеЗаказы.Доставка КАК Доставка,
	            |	ЗакрытыеЗаказы.Возврат КАК Возврат,
	            |	ЗакрытыеЗаказы.ПризнакВозврата КАК ПризнакВозврата,
	            |	ЗакрытыеЗаказы.ОценочнаяСтоимость КАК ОценочнаяСтоимость,
	            |	ЗакрытыеЗаказы.КоличествоПереносовСЗаездами КАК КоличествоПереносовСЗаездами,
	            |	ЗакрытыеЗаказы.СтоимостьПереносовСЗаездами КАК СтоимостьПереносовСЗаездами,
	            |	ЗакрытыеЗаказы.ТарифицируемыйВес КАК ТарифицируемыйВес,
	            |	ЗакрытыеЗаказы.КоличествоТарифицируемыхРейсов КАК КоличествоТарифицируемыхРейсов,
				//Асеев 21.05.2021 (Задача № 4571)>>>
				|	ЗакрытыеЗаказы.ТарификацияПоОбъемномуВесу КАК ТарификацияПоОбъемномуВесу,
				|	ЗакрытыеЗаказы.ТарифицируемыйОбъемныйВес КАК ТарифицируемыйОбъемныйВес
				//Асеев 21.05.2021 (Задача № 4571)<<<
	            |ИЗ
	            |	РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
	            |ГДЕ
	            |	ЗакрытыеЗаказы.Регистратор = &Закрытие
	            |	И ЗакрытыеЗаказы.Реализация = &Заказ";
				
	Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);
	Зап.УстановитьПараметр("Заказ", Заказ);
	
	Выб = Зап.Выполнить().Выбрать();
    СтарыйВес = 0;
	Пока Выб.Следующий() Цикл
		Нов = Движения.ЗакрытыеЗаказы.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
        Нов.СуммаОценочная = - Нов.СуммаОценочная;
		Нов.СуммаПолученная = - Нов.СуммаПолученная;
		Нов.СуммаДоставкиДоМКАД = - Нов.СуммаДоставкиДоМКАД;
		Нов.СуммаДоставкиЗаМКАД = - Нов.СуммаДоставкиЗаМКАД;
		Нов.УслугиСД = - Нов.УслугиСД;
		Нов.БанковскаяКомиссия = - Нов.БанковскаяКомиссия;
		Нов.КассовоеОбслуживание = - Нов.КассовоеОбслуживание;
		Нов.СуммаВозврата = - Нов.СуммаВозврата;
		Нов.Масса = - Нов.Масса;
		Нов.СуммаЧастичногоВозврата = - Нов.СуммаЧастичногоВозврата;
		Нов.ОплаченоКлиентовНал = - Нов.ОплаченоКлиентовНал;
		Нов.АгентскоеВознаграждение = - Нов.АгентскоеВознаграждение;
		Нов.ПредоплатаПоКредиту = - Нов.ПредоплатаПоКредиту;
		Нов.УслугиСДЧистые = - Нов.УслугиСДЧистые;
		Нов.СтраховойСбор = - Нов.СтраховойСбор;
		Нов.ФактическийВес = - Нов.ФактическийВес;
		Нов.ОбъемЗабора = - Нов.ОбъемЗабора;
		Нов.ОбъемЗабораПоЗаказам = - Нов.ОбъемЗабораПоЗаказам;
		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		Нов.Регистратор = Ссылка;
		Нов.Корректировка = Истина;
		Нов.ТарифицируемыйВес = - Нов.ТарифицируемыйВес;
		//Асеев 21.05.2021 (Задача № 4571)>>>
		//СтарыйВес = -Нов.ТарифицируемыйВес;
		Нов.ТарифицируемыйОбъемныйВес = - Нов.ТарифицируемыйОбъемныйВес;
		Если ТарификацияПоОбъемномуВесу Тогда
			СтарыйВес = -Нов.ТарифицируемыйОбъемныйВес;
		Иначе
			СтарыйВес = -Нов.ТарифицируемыйВес;
		КонецЕсли;
		//Асеев 21.05.2021 (Задача № 4571)<<<
		
		Нов.КоличествоТарифицируемыхРейсов = - Нов.КоличествоТарифицируемыхРейсов;
		
		//новые данные
		Нов = Движения.ЗакрытыеЗаказы.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.УслугиСД  = УслугиСД + Подъем;
		Нов.УслугиСДЧистые = ЧистыеУслугиСД;
		Нов.Регистратор = Ссылка;
		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		Нов.VIPДоставка = VIPЗаказ;
		Нов.ОбъемныйБрейк = ОбъемныйБрейк;
		Нов.КатегорияДоставки = КатегорияДоставки;
		Нов.РасчетныйБрейк = РасчетныйБрейк;
		//Асеев 21.05.2021 (Задача № 4571)>>>
		//Нов.ТарифицируемыйВес = ВесЗаказа;
		Если ТарификацияПоОбъемномуВесу Тогда
			Нов.ТарификацияПоОбъемномуВесу = Истина;
			Нов.ТарифицируемыйОбъемныйВес = ТарифицируемыйОбъемныйВес;
		Иначе
			Нов.ТарифицируемыйВес = ВесЗаказа;
		КонецЕсли;
		//Асеев 21.05.2021 (Задача № 4571)<<<
	КонецЦикла;	
	
	//Асеев 21.05.2021 (Задача № 4571)>>>
	//Если ЗначениеЗаполнено(КомментарийСД) Тогда
	//	Комм = "'" + СокрЛП(КомментарийСД) + "'";
	//Иначе
	//	Комм = "null";
	//КонецеСли;
	//
	//Если ВесЗаказа <> 0 тогда
	//	ВесВбазу = Формат(ВесЗаказа, "ЧРД=.; ЧН=0; ЧГ=");
	//Иначе
	//	ВесВбазу = "null";
	//КонецЕсли;
	//Асеев 21.05.2021 (Задача № 4571)<<<
	
	
	Если НЕ НеВыгружатьДанныеВАдминку Тогда		
		
		// ++ Задача № 3403
		//ТекстЗапроса = "
		//|EXEC import_setServiceDCFrom1C " + СокрЛП(Заказ.Номер) + "," + Формат(УслугиСД + Подъем , "ЧРД=.; ЧН=0; ЧГ=") + "," + Формат(ЧистыеУслугиСД, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Комм + ", " + ВесВбазу + "
		//|";
		//Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКИМ);	
		КорректировкаУслугСДВАдминке();
		// -- Задача № 3403
		
		//Асеев 21.05.2021 (Задача № 4571)>>>
		Если ТарификацияПоОбъемномуВесу Тогда
			Если СтарыйВес <> ТарифицируемыйОбъемныйВес Тогда
				
				СтрЗапроса = "declare @ords [dbo].[TorderChargeableVolumetricWeight]";
				
				СтрЗапроса = СтрЗапроса + " insert into @ords(orderId, orderChargeableVolumetricWeight)
				| values ("+Формат(СокрЛП(Заказ.Номер), "ЧГ=")+ ", " + Формат(ТарифицируемыйОбъемныйВес, "ЧРД=.; ЧН=0; ЧГ=") +")";
				
				СтрЗапроса = СтрЗапроса + " EXEC [dbo].import_setOrderChargeableVolumetricWeight @ords";
				Евген.ЗапросКИнтернетМагазину(СтрЗапроса, ПодключениеКИМ);
			КонецЕсли;
		Иначе
			//Асеев 21.05.2021 (Задача № 4571)<<<
			Если СтарыйВес <> ВесЗаказа Тогда
				
				СтрЗапроса = "declare @ords [dbo].[TorderActualOrderWeight]";
				
				СтрЗапроса = СтрЗапроса + " insert into @ords(orderId, actualOrderWeight)
				| values ("+Формат(СокрЛП(Заказ.Номер), "ЧГ=")+ ", " + Формат(ВесЗаказа, "ЧРД=.; ЧН=0; ЧГ=") +")";
				
				СтрЗапроса = СтрЗапроса + " EXEC [dbo].import_setOrderActualWeight @ords";
				Евген.ЗапросКИнтернетМагазину(СтрЗапроса, ПодключениеКИМ);
			КонецЕсли;
		КонецЕсли;
		//Асеев 04.03.2024 (Задача № 4571)>>>
		Если ОбъемЗаказа <> ОбъемЗаказаСтарый Тогда
			СтрЗапроса = "declare @ords [dbo].[TorderVolume]";
			
			СтрЗапроса = СтрЗапроса + " insert into @ords(orderId, orderVolume)
			| values ("+Формат(СокрЛП(Заказ.Номер), "ЧГ=")+ ", " + Формат(ОбъемЗаказа, "ЧРД=.; ЧН=0; ЧГ=") +")";
			
			СтрЗапроса = СтрЗапроса + " EXEC [dbo].import_setOrderVolume @ords";
			Евген.ЗапросКИнтернетМагазину(СтрЗапроса, ПодключениеКИМ);
		КонецЕсли;
		//Асеев 04.03.2024 (Задача № 4571)<<<
	КонецЕсли;
	
	
КонецПроцедуры	

Процедура ПроизвестиКорректировкуЗаписейРНРасчетУслугСД(ПодключениеКИМ)
	
	Движения.РасчетУслугСД.Очистить();
	Движения.РасчетУслугСД.Записывать = Истина;
	//Движения.РасчетУслугСД.БлокироватьДляИзменения = Истина;
	
	Зап = Новый Запрос;
	
	//Асеев 02.06.2022 (Задача № 4815)>>>
	//Зап.Текст = "ВЫБРАТЬ
	//            |	РасчетУслугСД.Период,
	//            |	РасчетУслугСД.Регистратор,
	//            |	РасчетУслугСД.НомерСтроки,
	//            |	РасчетУслугСД.Активность,
	//            |	РасчетУслугСД.ТерминалДоставки,
	//            |	РасчетУслугСД.ТерминалПриема,
	//            |	РасчетУслугСД.ЮрЛицо,
	//            |	РасчетУслугСД.Партнер,
	//            |	РасчетУслугСД.Реализация,
	//            |	РасчетУслугСД.Рейс,
	//            |	РасчетУслугСД.ПоказательУслуг,
	//            |	РасчетУслугСД.Тариф,
	//            |	РасчетУслугСД.Сумма,
	//            |	РасчетУслугСД.Доставка,
	//            |	КорректировкаУслугСДРасшифровкаУслугСД.СуммаДляИзменения,
	//            |	КорректировкаУслугСДРасшифровкаУслугСД.Услуга,
	//            |	КорректировкаУслугСДРасшифровкаУслугСД.Ссылка,
	//            |	КорректировкаУслугСДРасшифровкаУслугСД.Тариф КАК ТарифНовый
	//            |ИЗ
	//            |	РегистрНакопления.РасчетУслугСД КАК РасчетУслугСД
	//            |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.КорректировкаУслугСД.РасшифровкаУслугСД КАК КорректировкаУслугСДРасшифровкаУслугСД
	//            |		ПО РасчетУслугСД.ПоказательУслуг.Ссылка = КорректировкаУслугСДРасшифровкаУслугСД.Услуга.Ссылка
	//            |			И (ВЫРАЗИТЬ(РасчетУслугСД.Реализация КАК Документ.РеализацияТоваровУслуг).Ссылка = ВЫРАЗИТЬ(КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.Заказ КАК Документ.РеализацияТоваровУслуг).Ссылка)
	//            |			И (ВЫРАЗИТЬ(РасчетУслугСД.Регистратор КАК Документ.ЗакрытиеЗаказов).Ссылка = КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.ЗакрытиеЗаказов.Ссылка)
	//            |ГДЕ
	//            |	((ВЫРАЗИТЬ(РасчетУслугСД.Регистратор КАК Документ.ЗакрытиеЗаказов)) = &Закрытие
	//            |			ИЛИ КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.ЗакрытиеЗаказов.Ссылка = &Закрытие
	//            |				И КорректировкаУслугСДРасшифровкаУслугСД.Ссылка = &Док)
	//            |	И ((ВЫРАЗИТЬ(РасчетУслугСД.Реализация КАК Документ.РеализацияТоваровУслуг)) = &Заказ
	//            |			ИЛИ ВЫРАЗИТЬ(КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.Заказ КАК Документ.РеализацияТоваровУслуг).Ссылка = &Заказ)
	//            |
	//            |УПОРЯДОЧИТЬ ПО
	//            |	ПоказательУслуг УБЫВ";
	Зап.Текст =
	"ВЫБРАТЬ
	|	РасчетУслугСД.ПоказательУслуг КАК ПоказательУслуг,
	|	РасчетУслугСД.Тариф КАК Тариф,
	|	РасчетУслугСД.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_РасчетУслугСД
	|ИЗ
	|	РегистрНакопления.РасчетУслугСД КАК РасчетУслугСД
	|ГДЕ
	|	РасчетУслугСД.Регистратор = &ЗакрытиеЗаказов
	|	И РасчетУслугСД.Реализация = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаУслугСДРасшифровкаУслугСД.СуммаДляИзменения КАК СуммаДляИзменения,
	|	КорректировкаУслугСДРасшифровкаУслугСД.Услуга КАК Услуга,
	|	КорректировкаУслугСДРасшифровкаУслугСД.Тариф КАК Тариф
	|ПОМЕСТИТЬ ВТ_Корректировка
	|ИЗ
	|	Документ.КорректировкаУслугСД.РасшифровкаУслугСД КАК КорректировкаУслугСДРасшифровкаУслугСД
	|ГДЕ
	|	КорректировкаУслугСДРасшифровкаУслугСД.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакрытиеЗаказов.ДатаЗакрытия КАК Период,
	|	ВЗ_РасчетУслугСД_ОбщиеДанные.ТерминалДоставки КАК ТерминалДоставки,
	|	ВЗ_РасчетУслугСД_ОбщиеДанные.ТерминалПриема КАК ТерминалПриема,
	|	ВЗ_РасчетУслугСД_ОбщиеДанные.ЮрЛицо КАК ЮрЛицо,
	|	ВЗ_РасчетУслугСД_ОбщиеДанные.Партнер КАК Партнер,
	|	&Заказ КАК Реализация,
	|	ВЗ_РасчетУслугСД_ОбщиеДанные.Рейс КАК Рейс,
	|	ВЗ_ДанныеКорректировки.ПоказательУслуг КАК ПоказательУслуг,
	|	ВЗ_ДанныеКорректировки.Тариф КАК Тариф,
	|	ВЗ_ДанныеКорректировки.Сумма КАК Сумма,
	|	ВЗ_РасчетУслугСД_ОбщиеДанные.Доставка КАК Доставка,
	|	ВЗ_ДанныеКорректировки.СуммаДляИзменения КАК СуммаДляИзменения,
	|	ВЗ_ДанныеКорректировки.Услуга КАК Услуга,
	|	ВЗ_ДанныеКорректировки.ТарифНовый КАК ТарифНовый
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_РасчетУслугСД.ПоказательУслуг КАК ПоказательУслуг,
	|		ВТ_РасчетУслугСД.Тариф КАК Тариф,
	|		ВТ_РасчетУслугСД.Сумма КАК Сумма,
	|		ВТ_Корректировка.СуммаДляИзменения КАК СуммаДляИзменения,
	|		ВТ_Корректировка.Услуга КАК Услуга,
	|		ВТ_Корректировка.Тариф КАК ТарифНовый
	|	ИЗ
	|		ВТ_РасчетУслугСД КАК ВТ_РасчетУслугСД
	|			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Корректировка КАК ВТ_Корректировка
	|			ПО ВТ_РасчетУслугСД.ПоказательУслуг = ВТ_Корректировка.Услуга) КАК ВЗ_ДанныеКорректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			РасчетУслугСД.ТерминалДоставки КАК ТерминалДоставки,
	|			РасчетУслугСД.ТерминалПриема КАК ТерминалПриема,
	|			РасчетУслугСД.ЮрЛицо КАК ЮрЛицо,
	|			РасчетУслугСД.Партнер КАК Партнер,
	|			РасчетУслугСД.Рейс КАК Рейс,
	|			РасчетУслугСД.Доставка КАК Доставка
	|		ИЗ
	|			РегистрНакопления.РасчетУслугСД КАК РасчетУслугСД
	|		ГДЕ
	|			РасчетУслугСД.Регистратор = &ЗакрытиеЗаказов
	|			И РасчетУслугСД.Реализация = &Заказ) КАК ВЗ_РасчетУслугСД_ОбщиеДанные
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
	|		ПО (ЗакрытиеЗаказов.Ссылка = &ЗакрытиеЗаказов)";
	//Асеев 02.06.2022 (Задача № 4815)<<<
				
	Зап.УстановитьПараметр("ЗакрытиеЗаказов", ЗакрытиеЗаказов);
	Зап.УстановитьПараметр("Заказ", Заказ);
	Зап.УстановитьПараметр("Ссылка", Ссылка);
	
	//Если ТипЗнч(Ссылка.Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда
	//	Зап.Текст = СтрЗаменить(Зап.Текст, "КАК Документ.РеализацияТоваровУслуг)", "КАК Документ.ЗаборТовара)");
	//КонецЕсли;	
	
	//Таб = Зап.Выполнить().Выгрузить();
	Тек = Зап.Выполнить().Выбрать();
	
	//Для Каждого Тек Из Таб Цикл
	Пока Тек.Следующий() Цикл
		ТабУ = Новый ТаблицаЗначений;
		
		ТабУ.Колонки.Добавить("Услуга");
		ТабУ.Колонки.Добавить("СуммаДляИзменения");
		//Если ЗначениеЗаполнено(Тек.Регистратор) Тогда
		Если Тек.ПоказательУслуг <> Null Тогда
			//сторно имеющейся записи
			Нов = Движения.РасчетУслугСД.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Тек);
			Нов.Сумма = - Нов.Сумма;
			Нов.Корректировка = Истина;
			//Нов.Регистратор = Ссылка;
			//Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
			
			НовУсл = ТабУ.Добавить();
			НовУсл.Услуга = Нов.ПоказательУслуг;
			НовУсл.СуммаДляИзменения = Нов.Сумма;
		КонецеСли;
		
		//корректируем услуги в админке
		Если НЕ НеВыгружатьДанныеВАдминку Тогда
			ОбновитьУслугиВАдминке(ПодключениеКИМ, Подъем, ТабУ, 0);
		КонецЕсли;
		//корректируем услуги в админке
		ТабУ.Очистить();
		
		//новые данные
		Нов = Движения.РасчетУслугСД.Добавить();
		//Если ЗначениеЗаполнено(Тек.Регистратор) Тогда
		Если Тек.ПоказательУслуг <> Null Тогда
			//взять поля из имеющейся записи
			ЗаполнитьЗначенияСвойств(Нов, Тек);
		Иначе
			//ЗаполнитьЗначенияСвойств(Нов, Таб[0]);
			ЗаполнитьЗначенияСвойств(Нов, Тек);
			//в корректировке услуга, которой изначально не было
			Нов.ПоказательУслуг = Тек.Услуга;
			Нов.Тариф = Тек.ТарифНовый;
		КонецеСли;
		Если Тек.ПоказательУслуг = Справочники.ПоказателиРасчетаУслугСД.ОсновнаяЧасть Тогда
			Нов.Сумма  = УслугиСД;
		Иначе	
			Нов.Сумма  = Тек.СуммаДляИзменения;	
		КонецеСли;	
		//Нов.Регистратор = Ссылка;
		//Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		
		НовУсл = ТабУ.Добавить();
		НовУсл.Услуга = Нов.ПоказательУслуг;
		НовУсл.СуммаДляИзменения = Нов.Сумма;
		
		
		//корректируем услуги в админке
		Если НЕ НеВыгружатьДанныеВАдминку Тогда
			ОбновитьУслугиВАдминке(ПодключениеКИМ, Подъем, ТабУ, 1);
		КонецЕсли;
		//корректируем услуги в админке
	КонецЦикла;	
	
	
	
	
	
	
	
	//// ------------------- новый код  !!!!!!!!!!
	
	//Движения.РасчетУслугСД.Очистить();
	//Движения.РасчетУслугСД.Записывать = Истина;
	//
	//Зап = Новый Запрос;
	//
	//Зап.Текст = "ВЫБРАТЬ
	//            |	РасчетУслугСД.Период,
	//            |	РасчетУслугСД.Регистратор,
	//            |	РасчетУслугСД.НомерСтроки,
	//            |	РасчетУслугСД.Активность,
	//            |	РасчетУслугСД.ТерминалДоставки,
	//            |	РасчетУслугСД.ТерминалПриема,
	//            |	РасчетУслугСД.ЮрЛицо,
	//            |	РасчетУслугСД.Партнер,
	//            |	РасчетУслугСД.Реализация,
	//            |	РасчетУслугСД.Рейс,
	//            |	РасчетУслугСД.ПоказательУслуг,
	//            |	РасчетУслугСД.Тариф,
	//            |	РасчетУслугСД.Сумма,
	//            |	РасчетУслугСД.Доставка,
	//            |	КорректировкаУслугСДРасшифровкаУслугСД.СуммаДляИзменения,
	//            |	КорректировкаУслугСДРасшифровкаУслугСД.Услуга,
	//            |	КорректировкаУслугСДРасшифровкаУслугСД.Ссылка,
	//            |	КорректировкаУслугСДРасшифровкаУслугСД.Тариф КАК ТарифНовый
	//            |ИЗ
	//            |	Документ.КорректировкаУслугСД.РасшифровкаУслугСД КАК КорректировкаУслугСДРасшифровкаУслугСД
	//            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетУслугСД КАК РасчетУслугСД
	//            |		ПО (РасчетУслугСД.ПоказательУслуг.Ссылка = КорректировкаУслугСДРасшифровкаУслугСД.Услуга.Ссылка)
	//            |			И (ВЫРАЗИТЬ(РасчетУслугСД.Реализация КАК Документ.РеализацияТоваровУслуг).Ссылка = ВЫРАЗИТЬ(КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.Заказ КАК Документ.РеализацияТоваровУслуг).Ссылка)
	//            |			И (ВЫРАЗИТЬ(РасчетУслугСД.Регистратор КАК Документ.ЗакрытиеЗаказов).Ссылка = КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.ЗакрытиеЗаказов.Ссылка)
	//            |ГДЕ
	//            |	((ВЫРАЗИТЬ(РасчетУслугСД.Регистратор КАК Документ.ЗакрытиеЗаказов)) = &Закрытие
	//            |			ИЛИ КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.ЗакрытиеЗаказов.Ссылка = &Закрытие
	//            |				И КорректировкаУслугСДРасшифровкаУслугСД.Ссылка = &Док)
	//            |	И ((ВЫРАЗИТЬ(РасчетУслугСД.Реализация КАК Документ.РеализацияТоваровУслуг)) = &Заказ
	//            |			ИЛИ ВЫРАЗИТЬ(КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.Заказ КАК Документ.РеализацияТоваровУслуг).Ссылка = &Заказ)
	//            |
	//            |УПОРЯДОЧИТЬ ПО
	//            |	РасчетУслугСД.ПоказательУслуг УБЫВ";
	//			
	//			
	//Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);
	//Зап.УстановитьПараметр("Заказ", Заказ);
	//Зап.УстановитьПараметр("Док", Ссылка);
	//
	//Если ТипЗнч(Ссылка.Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда
	//	Зап.Текст = СтрЗаменить(Зап.Текст, "КАК Документ.РеализацияТоваровУслуг)", "КАК Документ.ЗаборТовара)");
	//КонецЕсли;	
	//
	//Таб = Зап.Выполнить().Выгрузить();
	//
	//
	//Для каждого Тек Из Таб Цикл
	//
	//
	//	Если ЗначениеЗаполнено(Тек.Сумма) Тогда
	//		ТабУ = Новый ТаблицаЗначений;		
	//		ТабУ.Колонки.Добавить("Услуга");
	//		ТабУ.Колонки.Добавить("СуммаДляИзменения");
	//		
	//		Если ЗначениеЗаполнено(Тек.Регистратор) Тогда
	//			Нов = Движения.РасчетУслугСД.Добавить();
	//			ЗаполнитьЗначенияСвойств(Нов, Тек);
	//			Нов.Сумма = - Нов.Сумма;
	//			Нов.Корректировка = Истина;
	//			Нов.Регистратор = Ссылка;
	//			Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
	//			
	//			НовУсл = ТабУ.Добавить();
	//			НовУсл.Услуга = Нов.ПоказательУслуг;
	//			НовУсл.СуммаДляИзменения = Нов.Сумма;
	//		КонецеСли;
	//		
	//		//корректируем услуги в админке
	//		ОбновитьУслугиВАдминке(ПодключениеКИМ, Подъем, ТабУ, 0);
	//		//корректируем услуги в админке
	//		ТабУ.Очистить();
	//	КонецЕсли;
	//	
	//	
	//	
	//	//новые данные
	//	Если ЗначениеЗаполнено(Тек.Сумма) Тогда
	//		Нов = Движения.РасчетУслугСД.Добавить();
	//		Если ЗначениеЗаполнено(Тек.Регистратор) Тогда 
	//			ЗаполнитьЗначенияСвойств(Нов, Тек);
	//		Иначе
	//			ЗаполнитьЗначенияСвойств(Нов, Таб[0]);
	//			Нов.ПоказательУслуг = Тек.Услуга;
	//			Нов.Тариф = Тек.ТарифНовый;
	//		КонецеСли;
	//		Если Тек.ПоказательУслуг = Справочники.ПоказателиРасчетаУслугСД.ОсновнаяЧасть Тогда
	//			Нов.Сумма  = УслугиСД;
	//		Иначе	
	//			Нов.Сумма  = Тек.СуммаДляИзменения;	
	//		КонецеСли;	
	//		Нов.Регистратор = Ссылка;
	//		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
	//		
	//		НовУсл = ТабУ.Добавить();
	//		НовУсл.Услуга = Нов.ПоказательУслуг;
	//		НовУсл.СуммаДляИзменения = Нов.Сумма;
	//					
	//		//корректируем услуги в админке
	//		ОбновитьУслугиВАдминке(ПодключениеКИМ, Подъем, ТабУ, 1);
	//		//корректируем услуги в админке
	//		
	//	Иначе
	//		Нов = Движения.РасчетУслугСД.Добавить();		
	//		Нов.Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Заказ.Номер);
	//		Нов.Регистратор = Ссылка;
	//		Нов.ТерминалДоставки = Заказ.ТерминалДоставки;
	//		Нов.ТерминалПриема = ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), Заказ.ТерминалПриема, Заказ.ТерминалПриемки);
	//		Нов.ЮрЛицо = Заказ;
	//		
	//		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда			
	//			Если ЗначениеЗаполнено(Заказ.ВладелецТовара) Тогда 
	//				Если Не Заказ.ВладелецТовара.Родитель.ОсновнойМагазин.Пустая() Тогда
	//					Нов.Партнер = Заказ.ВладелецТовара.Родитель.ОсновнойМагазин;
	//				Иначе
	//					Нов.Партнер = Заказ.ВладелецТовара;
	//				КонецеСли;
	//			КонецЕсли;			   
	//			
	//		ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда				
	//			Если ЗначениеЗаполнено(Заказ.Контрагент) Тогда 
	//				Если Не Заказ.Контрагент.Родитель.ОсновнойМагазин.Пустая() Тогда
	//					Нов.Партнер = Заказ.Контрагент.Родитель.ОсновнойМагазин;
	//				Иначе
	//					Нов.Партнер = Заказ.Контрагент;
	//				КонецеСли;
	//			КонецЕсли;						
	//		КонецЕсли;
	//		
	//		Нов.Реализация = Заказ.Ссылка;
	//		Нов.Рейс = ЗакрытиеЗаказов.Рейс;;
	//		Нов.ПоказательУслуг = Тек.Услуга;
	//		Нов.Тариф = Тек.Тариф;
	//		Нов.Сумма = Тек.СуммаДляИзменения;	
	//		
	//		
	//		НовУсл = ТабУ.Добавить();
	//		НовУсл.Услуга = Нов.ПоказательУслуг;
	//		НовУсл.СуммаДляИзменения = Нов.Сумма;
	//					
	//		//корректируем услуги в админке
	//		ОбновитьУслугиВАдминке(ПодключениеКИМ, Подъем, ТабУ, 1);
	//		//корректируем услуги в админке
	//	КонецЕсли;		
	//	
	//КонецЦикла;
	
	
КонецПроцедуры	


Процедура ПроизвестиКорректировкуЗаписейРНДоходыКомпании()
	
	Движения.ДоходыКомпании.Очистить();
	Движения.ДоходыКомпании.Записывать = Истина;
	Движения.ДоходыКомпании.БлокироватьДляИзменения = Истина;
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ДоходыКомпании.Период,
	            |	ДоходыКомпании.Регистратор,
	            |	ДоходыКомпании.НомерСтроки,
	            |	ДоходыКомпании.Активность,
	            |	ДоходыКомпании.СтатьяДоходов,
	            |	ДоходыКомпании.ИнтернетМагазин,
	            |	ДоходыКомпании.Реализация,
	            |	ДоходыКомпании.ТипЗаказа,
	            |	ДоходыКомпании.Сумма
	            |ИЗ
	            |	РегистрНакопления.ДоходыКомпании КАК ДоходыКомпании
	            |ГДЕ
	            |	ДоходыКомпании.Регистратор = &Закрытие
	            |	И ДоходыКомпании.Реализация = &Заказ";
				
	Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);
	Зап.УстановитьПараметр("Заказ", Заказ);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		Нов = Движения.ДоходыКомпании.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.Сумма = - Нов.Сумма;
		Нов.Регистратор = Ссылка;
		Нов.Корректировка = Истина;
		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		
		//новые данные
		Нов = Движения.ДоходыКомпании.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.Сумма  = УслугиСД;
		Нов.Регистратор = Ссылка;
		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
	КонецЦикла;	
	
КонецПроцедуры	


Процедура ПроизвестиКорректировкуЗаписейРНОперативнаяЭкономикаЗаказов()
	
	Движения.ОперативнаяЭкономикаЗаказов.Очистить();
	Движения.ОперативнаяЭкономикаЗаказов.Записывать = Истина;
	Движения.ОперативнаяЭкономикаЗаказов.БлокироватьДляИзменения = Истина;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОперативнаяЭкономикаЗаказов.Период,
	                      |	ОперативнаяЭкономикаЗаказов.Регистратор,
	                      |	ОперативнаяЭкономикаЗаказов.НомерСтроки,
	                      |	ОперативнаяЭкономикаЗаказов.Активность,
	                      |	ОперативнаяЭкономикаЗаказов.Партнер,
	                      |	ОперативнаяЭкономикаЗаказов.ИнтернетМагазин,
	                      |	ОперативнаяЭкономикаЗаказов.ТипЗаказа,
	                      |	ОперативнаяЭкономикаЗаказов.Заказ,
	                      |	ОперативнаяЭкономикаЗаказов.ДоходРасход,
	                      |	ОперативнаяЭкономикаЗаказов.Статья,
	                      |	ОперативнаяЭкономикаЗаказов.Рейс,
	                      |	ОперативнаяЭкономикаЗаказов.Сумма,
	                      |	ОперативнаяЭкономикаЗаказов.Показатель,
	                      |	ОперативнаяЭкономикаЗаказов.Транспорт,
	                      |	ОперативнаяЭкономикаЗаказов.Водитель,
	                      |	ОперативнаяЭкономикаЗаказов.Экспедитор,
	                      |	ОперативнаяЭкономикаЗаказов.Корректировка,
	                      |	КорректировкаУслугСДРасшифровкаУслугСД.СуммаДляИзменения,
	                      |	КорректировкаУслугСДРасшифровкаУслугСД.Услуга,
	                      |	КорректировкаУслугСДРасшифровкаУслугСД.Тариф
	                      |ИЗ
	                      |	Документ.КорректировкаУслугСД.РасшифровкаУслугСД КАК КорректировкаУслугСДРасшифровкаУслугСД
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОперативнаяЭкономикаЗаказов КАК ОперативнаяЭкономикаЗаказов
	                      |		ПО КорректировкаУслугСДРасшифровкаУслугСД.Услуга = ОперативнаяЭкономикаЗаказов.Статья.ПоказательРасчетаСД
	                      |			И КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.ЗакрытиеЗаказов = ОперативнаяЭкономикаЗаказов.Регистратор
	                      |			И КорректировкаУслугСДРасшифровкаУслугСД.Ссылка.Заказ = ОперативнаяЭкономикаЗаказов.Заказ
	                      |ГДЕ
	                      |	КорректировкаУслугСДРасшифровкаУслугСД.Ссылка = &Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		//сторно
		Если ЗначениеЗаполнено(Рез.Сумма) Тогда
			НЗапись = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
			ЗаполнитьЗначенияСвойств(НЗапись, Рез);
			НЗапись.Сумма = - Рез.Сумма;
			НЗапись.Корректировка = Истина;
			НЗапись.Регистратор = Ссылка;
			НЗапись.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		КонецеСли;
				
		//новое движение
		Если ЗначениеЗаполнено(Рез.Сумма) Тогда			
			НЗапись = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
			ЗаполнитьЗначенияСвойств(НЗапись, Рез);
			НЗапись.Сумма = Рез.СуммаДляИзменения;
			НЗапись.Регистратор = Ссылка;	
			НЗапись.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		Иначе
			НЗапись = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
			НЗапись.Регистратор = Ссылка;
			НЗапись.Водитель = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Водитель;
			НЗапись.Экспедитор = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Экспедитор;
			НЗапись.Транспорт = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Транспорт;
			НЗапись.Статья = Справочники.СтатьиДоходовКомпании.НайтиПоРеквизиту("ПоказательРасчетаСД", Рез.Услуга);
			
			НЗапись.Рейс = ЗакрытиеЗаказов.Рейс;
			
			Если ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Если ЗначениеЗаполнено(Заказ.ВладелецТовара) Тогда 
					Если Не Заказ.ВладелецТовара.Родитель.ОсновнойМагазин.Пустая() Тогда
						НЗапись.Партнер = Заказ.ВладелецТовара.Родитель.ОсновнойМагазин;
					Иначе
						НЗапись.Партнер = Заказ.ВладелецТовара;
					КонецеСли;
				КонецЕсли;
			    НЗапись.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
				
			ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда
				
				Если ЗначениеЗаполнено(Заказ.Контрагент) Тогда 
					Если Не Заказ.Контрагент.Родитель.ОсновнойМагазин.Пустая() Тогда
						НЗапись.Партнер = Заказ.Контрагент.Родитель.ОсновнойМагазин;
					Иначе
						НЗапись.Партнер = Заказ.Контрагент;
					КонецеСли;
				КонецЕсли;				
				НЗапись.ТипЗаказа = Перечисления.ТипыЗаказов.Забор;
				
			КонецЕсли;
			
			НЗапись.ДоходРасход = Перечисления.ДоходРасход.Доход;
			НЗапись.Заказ = Заказ;
			НЗапись.ИнтернетМагазин = ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), Заказ.ВладелецТовара, Заказ.Контрагент);
			НЗапись.Корректировка = Ложь;
			НЗапись.Сумма = Рез.СуммаДляИзменения;
			НЗапись.Регистратор = Ссылка;
			НЗапись.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		КонецЕсли;
		
		
	КонецЦикла;
					  
	
	
	// Услуги СД
	ЗапросСД = новый Запрос("ВЫБРАТЬ
	                        |	ОперативнаяЭкономикаЗаказов.Период,
	                        |	ОперативнаяЭкономикаЗаказов.Регистратор,
	                        |	ОперативнаяЭкономикаЗаказов.НомерСтроки,
	                        |	ОперативнаяЭкономикаЗаказов.Активность,
	                        |	ОперативнаяЭкономикаЗаказов.Партнер,
	                        |	ОперативнаяЭкономикаЗаказов.ИнтернетМагазин,
	                        |	ОперативнаяЭкономикаЗаказов.ТипЗаказа,
	                        |	ОперативнаяЭкономикаЗаказов.Заказ,
	                        |	ОперативнаяЭкономикаЗаказов.ДоходРасход,
	                        |	ОперативнаяЭкономикаЗаказов.Статья,
	                        |	ОперативнаяЭкономикаЗаказов.Рейс,
	                        |	ОперативнаяЭкономикаЗаказов.Сумма,
	                        |	ОперативнаяЭкономикаЗаказов.Показатель,
	                        |	ОперативнаяЭкономикаЗаказов.Транспорт,
	                        |	ОперативнаяЭкономикаЗаказов.Водитель,
	                        |	ОперативнаяЭкономикаЗаказов.Экспедитор,
	                        |	ОперативнаяЭкономикаЗаказов.Корректировка
	                        |ИЗ
	                        |	РегистрНакопления.ОперативнаяЭкономикаЗаказов КАК ОперативнаяЭкономикаЗаказов
	                        |ГДЕ
	                        |	ОперативнаяЭкономикаЗаказов.Статья В(&Статья)
	                        |	И ОперативнаяЭкономикаЗаказов.Регистратор = &Регистратор
	                        |	И ОперативнаяЭкономикаЗаказов.Заказ = &Заказ");
	ЗапросСД.УстановитьПараметр("Регистратор", ЗакрытиеЗаказов);
	ЗапросСД.УстановитьПараметр("Заказ", Заказ);
	
	СтатьяСписок = Новый СписокЗначений;
	СтатьяСписок.Добавить(Справочники.СтатьиДоходовКомпании.УслугиСД);
	СтатьяСписок.Добавить(Справочники.СтатьиЗатратКомпании.СтоимостьПодъемаОплачиваемая);
	//СтатьяСписок.Добавить(Справочники.СтатьиДоходовКомпании.УслугиСДЧистые);
	ЗапросСД.УстановитьПараметр("Статья", СтатьяСписок);
	
	РезТЗ = ЗапросСД.Выполнить().Выгрузить();
	
	Для каждого Стр Из РезТЗ Цикл		
		// ПодъемВодитель
		Если Стр.Статья = Справочники.СтатьиЗатратКомпании.СтоимостьПодъемаОплачиваемая Тогда		
			//сторно
			НЗапись = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
			ЗаполнитьЗначенияСвойств(НЗапись, Стр);
			НЗапись.Сумма = - Стр.Сумма;
			НЗапись.Корректировка = Истина;
			НЗапись.Регистратор = Ссылка;
			НЗапись.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		КонецЕсли;

		// УслугиСД
		Если Стр.Статья = Справочники.СтатьиДоходовКомпании.УслугиСД Тогда		
			//сторно
			НЗапись = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
			ЗаполнитьЗначенияСвойств(НЗапись, Стр);
			НЗапись.Сумма = - Стр.Сумма;
			НЗапись.Корректировка = Истина;
			НЗапись.Регистратор = Ссылка;	
			НЗапись.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		КонецЕсли;
	КонецЦикла;
	
	//новое движение ПодъемВодитель
	Если ПодъемВодитель <> 0 Тогда
		
		НЗапись = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
		НЗапись.Сумма = ПодъемВодитель;
		НЗапись.Статья = Справочники.СтатьиЗатратКомпании.СтоимостьПодъемаОплачиваемая;	
		НЗапись.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		НЗапись.Регистратор = Ссылка;
		НЗапись.Водитель = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Водитель;
		НЗапись.Экспедитор = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Экспедитор;
		НЗапись.Транспорт = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Транспорт;	
		НЗапись.Рейс = ЗакрытиеЗаказов.Рейс;
		НЗапись.ДоходРасход = Перечисления.ДоходРасход.Расход;
		НЗапись.Заказ = Заказ;
		НЗапись.ИнтернетМагазин = ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), Заказ.ВладелецТовара, Заказ.Контрагент);
		НЗапись.Корректировка = Ложь;
		
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
			Если ЗначениеЗаполнено(Заказ.ВладелецТовара) Тогда 
				Если Не Заказ.ВладелецТовара.Родитель.ОсновнойМагазин.Пустая() Тогда
					НЗапись.Партнер = Заказ.ВладелецТовара.Родитель.ОсновнойМагазин;
				Иначе
					НЗапись.Партнер = Заказ.ВладелецТовара;
				КонецеСли;
			КонецЕсли;
		    НЗапись.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;	
		ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда	
			Если ЗначениеЗаполнено(Заказ.Контрагент) Тогда 
				Если Не Заказ.Контрагент.Родитель.ОсновнойМагазин.Пустая() Тогда
					НЗапись.Партнер = Заказ.Контрагент.Родитель.ОсновнойМагазин;
				Иначе
					НЗапись.Партнер = Заказ.Контрагент;
				КонецеСли;
			КонецЕсли;				
			НЗапись.ТипЗаказа = Перечисления.ТипыЗаказов.Забор;		
		КонецЕсли;
			
	КонецЕсли;
	
	
		
	
	
	
	//новое движение УслугиСД
	Если ЧистыеУслугиСД <> 0 Тогда
		
		НЗапись = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
		НЗапись.Сумма = ЧистыеУслугиСД;
		НЗапись.Статья = Справочники.СтатьиДоходовКомпании.УслугиСД;	
		НЗапись.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		НЗапись.Регистратор = Ссылка;
		НЗапись.Водитель = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Водитель;
		НЗапись.Экспедитор = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Экспедитор;
		НЗапись.Транспорт = ЗакрытиеЗаказов.Рейс.РейсМестнойДоставки.Транспорт;	
		НЗапись.Рейс = ЗакрытиеЗаказов.Рейс;
		НЗапись.ДоходРасход = Перечисления.ДоходРасход.Доход;
		НЗапись.Заказ = Заказ;
		НЗапись.ИнтернетМагазин = ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), Заказ.ВладелецТовара, Заказ.Контрагент);
		НЗапись.Корректировка = Ложь;
		
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
			Если ЗначениеЗаполнено(Заказ.ВладелецТовара) Тогда 
				Если Не Заказ.ВладелецТовара.Родитель.ОсновнойМагазин.Пустая() Тогда
					НЗапись.Партнер = Заказ.ВладелецТовара.Родитель.ОсновнойМагазин;
				Иначе
					НЗапись.Партнер = Заказ.ВладелецТовара;
				КонецеСли;
			КонецЕсли;
		    НЗапись.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;	
		ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда	
			Если ЗначениеЗаполнено(Заказ.Контрагент) Тогда 
				Если Не Заказ.Контрагент.Родитель.ОсновнойМагазин.Пустая() Тогда
					НЗапись.Партнер = Заказ.Контрагент.Родитель.ОсновнойМагазин;
				Иначе
					НЗапись.Партнер = Заказ.Контрагент;
				КонецеСли;
			КонецЕсли;				
			НЗапись.ТипЗаказа = Перечисления.ТипыЗаказов.Забор;		
		КонецЕсли;	
	
	КонецЕсли;
	
	//Корректировка ЗП
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ОперативнаяЭкономикаЗаказов.Период,
	            |	ОперативнаяЭкономикаЗаказов.Регистратор,
	            |	ОперативнаяЭкономикаЗаказов.НомерСтроки,
	            |	ОперативнаяЭкономикаЗаказов.Активность,
	            |	ОперативнаяЭкономикаЗаказов.Партнер,
	            |	ОперативнаяЭкономикаЗаказов.ИнтернетМагазин,
	            |	ОперативнаяЭкономикаЗаказов.ТипЗаказа,
	            |	ОперативнаяЭкономикаЗаказов.Заказ,
	            |	ОперативнаяЭкономикаЗаказов.ДоходРасход,
	            |	ОперативнаяЭкономикаЗаказов.Статья,
	            |	ОперативнаяЭкономикаЗаказов.Рейс,
	            |	ОперативнаяЭкономикаЗаказов.Сумма,
	            |	ОперативнаяЭкономикаЗаказов.Показатель,
	            |	ОперативнаяЭкономикаЗаказов.Транспорт,
	            |	ОперативнаяЭкономикаЗаказов.Водитель,
	            |	ОперативнаяЭкономикаЗаказов.Экспедитор,
	            |	ОперативнаяЭкономикаЗаказов.Корректировка
	            |ИЗ
	            |	РегистрНакопления.ОперативнаяЭкономикаЗаказов КАК ОперативнаяЭкономикаЗаказов
	            |ГДЕ
	            |	ОперативнаяЭкономикаЗаказов.Регистратор = &Закрытие
	            |	И ОперативнаяЭкономикаЗаказов.Заказ = &Заказ
	            |	И ОперативнаяЭкономикаЗаказов.Статья = ЗНАЧЕНИЕ(Справочник.СтатьиЗатратКомпании.ЗаработнаяПлата)";
				
	Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);
	Зап.УстановитьПараметр("Заказ", Заказ);
	
	Выб = Зап.Выполнить().Выбрать();
	СтрЗп = 0;
	Пока Выб.Следующий() Цикл
		Нов = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.Сумма = - Нов.Сумма;
		Нов.Регистратор = Ссылка;
		Нов.Корректировка = Истина;
		
		//новые данные
		Нов = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.Сумма  = СуммаЗП[СтрЗп].ПослеКор;
		Нов.Регистратор = Ссылка;
		Нов.Корректировка = Ложь;
		
		СтрЗп = СтрЗп + 1;
	КонецЦикла;	
КонецПроцедуры	


Процедура ОбновитьУслугиВАдминке(ПодключениеКИМ, СуммаПодъема, ТабУслуг, КоличествоУслуг)
	who = СокрЛП(Оператор.Наименование);
	orderID = СокрЛП(Заказ.Номер);
	Если СуммаПодъема > 0 Тогда
		price = Формат(СуммаПодъема, "ЧРД=.; ЧН=0; ЧГ=");
		ТекстЗапроса = "
		|DECLARE @t TOrderService
		|INSERT INTO @t ([orderID],[serviceID],[who],[cnt],[price]) VALUES (" +orderID +",6,'"+who+"',1,"+price+")
		|EXEC import_updateOrdersServices @t
		|";
		Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКИМ);
	КонецЕсли;
	
	Для каждого СтрСУ Из ТабУслуг Цикл
		price = Формат(СтрСУ.СуммаДляИзменения, "ЧРД=.; ЧН=0; ЧГ=");
		serviceID = СтрСУ.Услуга.НомерПоказателяАдминки;
		Если serviceID <> 6 Тогда
			ТекстЗапроса = "
			|DECLARE @t TOrderService
			|INSERT INTO @t ([orderID],[serviceID],[who],[cnt],[price]) VALUES (" +orderID +","+serviceID+",'"+who+"',1,"+price+")
			|EXEC import_updateOrdersServices @t
			|";
			Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКИМ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Вставить содержимое обработчика.
	ПодключениеКИМ = Евген.СоздатьПодключениеКИнтернетМагазину();
	ОтменитьКорректировкуЗаписейРНРасчетУслугСД(ПодключениеКИМ);  
	ОтменитьКорректировкуЗаписейРНЗакрытыеЗаказы(ПодключениеКИМ);
	
КонецПроцедуры


Процедура ОтменитьКорректировкуЗаписейРНРасчетУслугСД(ПодключениеКИМ)
	
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	РасчетУслугСД.ПоказательУслуг КАК Услуга,
	            |	РасчетУслугСД.Сумма КАК СуммаДляИзменения,
	            |	ЗакрытиеЗаказовЗаказы.Показатель2 КАК Подъем
	            |ИЗ
	            |	РегистрНакопления.РасчетУслугСД КАК РасчетУслугСД
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	            |		ПО РасчетУслугСД.Регистратор = ЗакрытиеЗаказовЗаказы.Ссылка
	            |			И РасчетУслугСД.Реализация = ЗакрытиеЗаказовЗаказы.Реализация
	            |ГДЕ
	            |	РасчетУслугСД.Регистратор = &Закрытие
	            |	И РасчетУслугСД.Реализация = &Заказ";
				
	Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);
	Зап.УстановитьПараметр("Заказ", Заказ);
	Таб = Зап.Выполнить().Выгрузить();
	
	//корректируем услуги в админке
	Если НЕ НеВыгружатьДанныеВАдминку Тогда
		ОбновитьУслугиВАдминке(ПодключениеКИМ, Подъем, РасшифровкаУслугСД, 0);
	КонецЕсли;
	//корректируем услуги в админке
	
	
	СуммаСтарогоПодъема = 0;
	Если Таб.Количество() <> 0 Тогда
		СуммаСтарогоПодъема = Таб[0].Подъем;
	КонецеСли;
	
	//корректируем услуги в админке
	Если НЕ НеВыгружатьДанныеВАдминку Тогда
		ОбновитьУслугиВАдминке(ПодключениеКИМ, СуммаСтарогоПодъема, Таб, 1);
	КонецЕсли;	
	//корректируем услуги в админке
	
	
КонецПроцедуры	

Процедура ОтменитьКорректировкуЗаписейРНЗакрытыеЗаказы(ПодключениеКИМ)
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗакрытиеЗаказовЗаказы.Показатель1 КАК УслугиСД,
	            |	ЗакрытиеЗаказовЗаказы.УслугиСДЧистые,
	            |	ЗакрытиеЗаказовЗаказы.Показатель2 КАК Подъем,
	            |	ЗакрытиеЗаказовЗаказы.ТарифицируемыйВес,
				//Асеев 21.05.2021 (Задача № 4571)>>>
				|	ЗакрытиеЗаказовЗаказы.ТарификацияПоОбъемномуВесу,
				|	ЗакрытиеЗаказовЗаказы.ТарифицируемыйОбъемныйВес
				//Асеев 21.05.2021 (Задача № 4571)<<<
	            |ИЗ
	            |	Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	            |ГДЕ
	            |	ЗакрытиеЗаказовЗаказы.Реализация = &Заказ
	            |	И ЗакрытиеЗаказовЗаказы.Ссылка = &Закрытие";
	Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);
	Зап.УстановитьПараметр("Заказ", Заказ);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		//Асеев 21.05.2021 (Задача № 4571)>>>
		//Если Выб.ТарифицируемыйВес <> 0 тогда
		//	ВесВбазу = Формат(Выб.ТарифицируемыйВес, "ЧРД=.; ЧН=0; ЧГ=");
		//Иначе
		//	ВесВбазу = "null";
		//КонецЕсли;
		//Асеев 21.05.2021 (Задача № 4571)<<<
		
		Если НЕ НеВыгружатьДанныеВАдминку Тогда
			// ++ Задача № 3403
			//ТекстЗапроса = "
			//|EXEC import_setServiceDCFrom1C " + СокрЛП(Заказ.Номер) + "," + Формат(Выб.УслугиСД + Выб.Подъем, "ЧРД=.; ЧН=0; ЧГ=") + "," + Формат(Выб.УслугиСДЧистые, "ЧРД=.; ЧН=0; ЧГ=") + ",null," + ВесВбазу + "
			//|";
			//Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКИМ);
			
			//Асеев 21.05.2021 (Задача № 4571)>>>
			//ОтменаКорректировки = Новый Структура("УслугиСД,Подъем,УслугиСДЧистые,ВесВбазу",
			//Выб.УслугиСД,  Выб.Подъем, Выб.УслугиСДЧистые, Выб.ТарифицируемыйВес);
			//КорректировкаУслугСДВАдминке(ОтменаКорректировки);
			Если Выб.ТарификацияПоОбъемномуВесу Тогда
				ВесВбазу = Выб.ТарифицируемыйОбъемныйВес;
			Иначе
				ВесВбазу = Выб.ТарифицируемыйВес;
			КонецЕсли;
			ОтменаКорректировки = Новый Структура("УслугиСД,Подъем,УслугиСДЧистые,ВесВбазу",
			Выб.УслугиСД,  Выб.Подъем, Выб.УслугиСДЧистые, ВесВбазу);
			КорректировкаУслугСДВАдминке(ОтменаКорректировки);
			//Асеев 21.05.2021 (Задача № 4571)<<<

			// -- Задача № 3403 
		КонецЕсли;
	КонецеСли;	
	
КонецПроцедуры	

Процедура ПроизвестиКорректировкуЗаписейРНУчетЗП()
	
	Движения.РасчетЗарплаты.Очистить();
	Движения.РасчетЗарплаты.Записывать = Истина;
	Движения.РасчетЗарплаты.БлокироватьДляИзменения = Истина;
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	РасчетЗарплаты.Период,
	            |	РасчетЗарплаты.Регистратор,
	            |	РасчетЗарплаты.НомерСтроки,
	            |	РасчетЗарплаты.Активность,
	            |	РасчетЗарплаты.Регион,
	            |	РасчетЗарплаты.ЮрЛицо,
	            |	РасчетЗарплаты.Партнер,
	            |	РасчетЗарплаты.ВидТарифаРасчетаЗП,
	            |	РасчетЗарплаты.ТипЭкипажа,
	            |	РасчетЗарплаты.ТипТранспорта,
	            |	РасчетЗарплаты.Транспорт,
	            |	РасчетЗарплаты.НаёмныйЭкипаж,
	            |	РасчетЗарплаты.Услуга,
	            |	РасчетЗарплаты.УчастникЭкипажа,
	            |	РасчетЗарплаты.КатегорияДоставки,
	            |	РасчетЗарплаты.ФизЛицо,
	            |	РасчетЗарплаты.ТипДоставки,
	            |	РасчетЗарплаты.Доставка,
	            |	РасчетЗарплаты.Территориальность,
	            |	РасчетЗарплаты.VIPДоставка,
	            |	РасчетЗарплаты.ВидVip,
	            |	РасчетЗарплаты.ВидВыполненияДоставки,
	            |	РасчетЗарплаты.РасчетПоМинимальнойСтоимости,
	            |	РасчетЗарплаты.РасчетныйБрейк,
	            |	РасчетЗарплаты.ТарифнаяСетка,
	            |	РасчетЗарплаты.ТарифнаяСеткаПартнера,
	            |	РасчетЗарплаты.ЗонаТарификации,
	            |	РасчетЗарплаты.ОбъёмЗабора,
	            |	РасчетЗарплаты.КатегорияЗаказаДляРасчетаЗП,
	            |	РасчетЗарплаты.ПравилаОпределенияКатегорииЗаказаДляЗП,
	            |	РасчетЗарплаты.Сумма,
	            |	РасчетЗарплаты.Подъём,
	            |	РасчетЗарплаты.ДоставкаБП,
	            |	РасчетЗарплаты.ОтработаноЧасов
	            |ИЗ
	            |	РегистрНакопления.РасчетЗарплаты КАК РасчетЗарплаты
	            |ГДЕ
	            |	РасчетЗарплаты.Регистратор = &Закрытие
	            |	И РасчетЗарплаты.Доставка = &Заказ";
				
	Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);
	Зап.УстановитьПараметр("Заказ", Заказ);
	
	Выб = Зап.Выполнить().Выбрать();
	
	ТипЭкипажа = "";
	Тарифы = may.ПолучитьТарифы(ЗакрытиеЗаказов.ДатаЗакрытия);
	ТарифыНаем = may.ПолучитьТарифыНаем(ЗакрытиеЗаказов.ДатаЗакрытия);
	
	Пока Выб.Следующий() Цикл
		Нов = Движения.РасчетЗарплаты.Добавить();
		
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.Сумма  = - Нов.Сумма;
		Нов.Подъём = - Нов.Подъём;
		Нов.Регистратор = Ссылка;
		Нов.Корректировка = Истина;
		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		
		
		Если ТипЭкипажа = "" Тогда
			ТипЭкипажа = Выб.ТипЭкипажа;
		КонецеСли;	
		
		Если ТипЭкипажа = Перечисления.ТипыТарифовРасчетаЗарплаты.ЭкипажПолный Тогда
			СуммаПодъема = Окр(ПодъемВодитель/2);
		Иначе
			СуммаПодъема = ПодъемВодитель;
		КонецеСли;	
		//СуммаЗП = - Нов.Сумма;	
		Стр = СуммаЗП.Добавить();
		Стр.Фактическая = - Нов.Сумма;
		Стр.ПослеКор = - Нов.Сумма;
		//новые данные
		Нов = Движения.РасчетЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.КатегорияДоставки  = КатегорияДоставки;
		Нов.КатегорияЗаказаДляРасчетаЗП  = КатегорияДоставки;
		Нов.РасчетныйБрейк  = РасчетныйБрейк;
		ПолучитьСуммуВЗП(Стр, Нов, ЗакрытиеЗаказов.Заказы.Найти(Заказ,"Реализация"), Тарифы, ТарифыНаем);
		Нов.Сумма  = Стр.ПослеКор;
		Нов.Подъём = СуммаПодъема;
		Нов.Регистратор = Ссылка;
		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		Нов.Корректировка = Ложь;
		
	КонецЦикла;	
	
	Движения.РасчетЗарплаты.БлокироватьДляИзменения = Истина;
	
КонецПроцедуры

Процедура ПолучитьСуммуВЗП(Стр, Нов, Тек, Тарифы, ТарифыНаем)
	ДатаЗакрытия = Нов.Период;
	//Если Не Тек.Водитель.Пустая() И Не Тек.Экспедитор.Пустая() Тогда
	//	ВариантЭ = Перечисления.ТипыТарифовРасчетаЗарплаты.ЭкипажПолный;
	//ИначеЕсли Не Тек.Водитель.Пустая() Тогда
	//	ВариантЭ = Перечисления.ТипыТарифовРасчетаЗарплаты.ЭкипажБезЭкспедитора;
	//Иначе
	//	Сообщить("Отсутствует экипаж: " + СокрЛП(Тек.Номер), СтатусСообщения.ОченьВажное);
	//	Возврат;
	//КонецеСли;
	
	Струк = Новый Структура;
	Струк.Вставить("ФизЛицо", Тек.Водитель);
	РежимРасчетаВ = РегистрыСведений.МетодикаРасчетаЗППоФизЛицам.ПолучитьПоследнее(ДатаЗакрытия, Струк);
	Если РежимРасчетаВ.Оклад Тогда
		Возврат;
	КонецЕсли;
	Струк = Новый СТруктура;
	Струк.Вставить("ТипЭкипажа", Нов.ТипЭкипажа);
	Струк.Вставить("УчастникЭкипажа", Нов.УчастникЭкипажа);
	Стр.УчастникЭкипажа = Нов.УчастникЭкипажа;
	Струк.Вставить("КатегорияДоставки", Нов.КатегорияЗаказаДляРасчетаЗП);

	Струк3 = Новый Структура;
	Струк3.Вставить("Транспорт", Тек.Транспорт);
	ТП = РегистрыСведений.ТипыТранспорта.ПолучитьПоследнее(КонецДня(ДатаЗакрытия), Струк3).ТипТранспорта;
	Если Не ЗначениеЗаполнено(ТП) Тогда
		ТП = Справочники.ТипыТранспортаДляРасчетаЗП.Основной;
	КонецеСли;	
	Струк.Вставить("ТипТранспорта", ТП);
	Струк.Вставить("ТипЗаказа", Тек.ТипЗаказа);	
	Струк.Вставить("Регион", Тек.ТерминалДоставки);
	Струк.Вставить("ВидТарифаРасчетаЗП", Нов.ВидТарифаРасчетаЗП);

	
	Если Не Нов.НаёмныйЭкипаж Тогда
		Най = Тарифы.НайтиСтроки(Струк);
	Иначе
		Най = ТарифыНаем.НайтиСтроки(Струк);
	КонецеСли;
	
	Если Нов.Территориальность = Перечисления.ТерриториальностьДоставок.ДоставкаВПределахМКАД Тогда
		СумДоМкад = 1;
		СумЗаМкад = 0;
	Иначе
		СумЗаМкад = 1;
		СумДоМкад = 0;
	КонецеСли;
	
	Если Тек.VIPДоставка Тогда
		Коэф = 2;
	Иначе
		Коэф = 1;
	КонецеСли;
				
	Если Най.Количество() = 1 Тогда
		Если СумДоМКАд = 1 Тогда
			Стр.ПослеКор = Коэф*Най[0].СтоимостьДоМКАД;
		ИначеЕсли СумЗаМКАд = 1 Тогда
			Стр.ПослеКор = Коэф*Най[0].СтоимостьЗаМКАД;
		КонецеСли;	
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗапрета = Константы.ЗакрытаяДата.Получить();
	
	Если ЗначениеЗаполнено(ДатаЗапрета) Тогда
		Если ЗакрытиеЗаказов.ДатаЗакрытия <= ДатаЗапрета Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Асеев 07.03.2024 (Задача № 5227)>>>
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если ЭтоНовый() Тогда
			СсылкаНаДокумент = Документы.КорректировкаУслугСД.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНаДокумент);
		Иначе
			СсылкаНаДокумент = Ссылка;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗакрытиеЗаказов", ЗакрытиеЗаказов);
		Запрос.УстановитьПараметр("Документ", СсылкаНаДокумент);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РежимыПроверокДокументовПриИзмененииСрезПоследних_Закрытие.ОбластьПроверкиДанных КАК ОбластьПроверкиДанных,
		|	РежимыПроверокДокументовПриИзмененииСрезПоследних_Закрытие.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.РежимыПроверокДокументовПриИзменении.СрезПоследних(, Документ = &ЗакрытиеЗаказов) КАК РежимыПроверокДокументовПриИзмененииСрезПоследних_Закрытие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РежимыПроверокДокументовПриИзменении.СрезПоследних(, Документ = &Документ) КАК РежимыПроверокДокументовПриИзмененииСрезПоследних_Документ
		|		ПО РежимыПроверокДокументовПриИзмененииСрезПоследних_Закрытие.ОбластьПроверкиДанных = РежимыПроверокДокументовПриИзмененииСрезПоследних_Документ.ОбластьПроверкиДанных
		|			И (РежимыПроверокДокументовПриИзмененииСрезПоследних_Документ.ОтключитьПроверку)
		|ГДЕ
		|	РежимыПроверокДокументовПриИзмененииСрезПоследних_Закрытие.ОтключитьПроверку
		|	И РежимыПроверокДокументовПриИзмененииСрезПоследних_Документ.ОбластьПроверкиДанных ЕСТЬ NULL";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Период = ТекущаяДата();
			НаборЗаписей = РегистрыСведений.РежимыПроверокДокументовПриИзменении.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Период);
			НаборЗаписей.Отбор.Документ.Установить(СсылкаНаДокумент);
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаписьРегистра = НаборЗаписей.Добавить();
				ЗаписьРегистра.Период = Период;
				ЗаписьРегистра.Документ = СсылкаНаДокумент;
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
				ЗаписьРегистра.ОтключитьПроверку = Истина;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		зпРаботаСРасчетомЗарплатыСервер.ПередЗаписьюДокументаЗП(Отказ, РежимЗаписи, ЭтотОбъект, СсылкаНаДокумент);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Асеев 07.03.2024 (Задача № 5227)<<<
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//Асеев 20.02.2023 (Задача № 4277)>>>
		Если ЗонаДоставкиЗаказаДляРасчетаЗПНовая.Пустая() И Не ЗонаДоставкиЗаказаДляРасчетаЗП.Пустая() И ЗначениеЗаполнено(Заказ) Тогда
			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(Заказ);
			
			СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьСоответствиеЗаказовИЗон(МассивЗаказов);
			
			Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда
				ЗонаДоставкиЗаказаДляРасчетаЗПНовая = СоответствиеЗонИЗаказов[Заказ];
			КонецЕсли;
			
			Если ЗонаДоставкиЗаказаДляРасчетаЗПНовая.Пустая() И Не ЗонаДоставкиЗаказаДляРасчетаЗП.Пустая() Тогда
				Отказ = Истина;
				Сообщить("Зона доставки для расчета з/п не определена");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//Асеев 20.02.2023 (Задача № 4277)<<<
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроизвестиКорректировкуЗаписейСводПозарплате()
	
	Движения.СводПоЗарплате.Очистить();
	Движения.СводПоЗарплате.Записывать = Истина;
	Движения.СводПоЗарплате.БлокироватьДляИзменения = Истина;
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗакрытиеЗаказовЗаказы.ПодъемВодитель,
	            |	ЗакрытиеЗаказовЗаказы.Водитель,
	            |	ЗакрытиеЗаказовЗаказы.Экспедитор,
	            |	ЗакрытиеЗаказовЗаказы.Ссылка.ТерминалДоставки,
	            |	ЗакрытиеЗаказовЗаказы.Ссылка.ДатаЗакрытия
	            |ИЗ
	            |	Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	            |ГДЕ
	            |	ЗакрытиеЗаказовЗаказы.Реализация.Ссылка = &Заказ
	            |	И ЗакрытиеЗаказовЗаказы.Ссылка.Ссылка = &Закрытие
	            |	И ЗакрытиеЗаказовЗаказы.Закрыть = ИСТИНА";
	Зап.УстановитьПараметр("Заказ", Заказ);			
	Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);			
	
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		КорректировкаСуммыПодъема =  - Выб.ПодъемВодитель + ПодъемВодитель;
		
		
		Если ЗначениеЗаполнено(Выб.Экспедитор) Тогда
			КорректировкаСуммыПодъема = КорректировкаСуммыПодъема/2;
			Нов = Движения.СводПоЗарплате.Добавить();
			Нов.Регион = Выб.ТерминалДоставки;
			Нов.ТипРасчетаЗарплаты = Перечисления.ТипыРасчетаЗарплаты.СдельныйРасчетПоДоставкам;
			Нов.УчастникЭкипажа = Перечисления.УчастникЭкипажа.Экспедитор;
			Нов.ФизЛицо = Выб.Экспедитор;
			Нов.ТипНУ = Перечисления.ТипыНУЭкипажей.РасчетЗП;
			Нов.Сумма = ПолСуммуКорПоЗП(КорректировкаСуммыПодъема, Нов.УчастникЭкипажа);
			Нов.Корректировка = Истина;
			Нов.Период = Выб.ДатаЗакрытия;
		КонецеСли;	
		
		Нов = Движения.СводПоЗарплате.Добавить();
		Нов.Регион = Выб.ТерминалДоставки;
		Нов.ТипРасчетаЗарплаты = Перечисления.ТипыРасчетаЗарплаты.СдельныйРасчетПоДоставкам;
		Нов.УчастникЭкипажа = Перечисления.УчастникЭкипажа.Водитель;
		Нов.ФизЛицо = Выб.Водитель;
		Нов.ТипНУ = Перечисления.ТипыНУЭкипажей.РасчетЗП;
		Нов.Сумма = ПолСуммуКорПоЗП(КорректировкаСуммыПодъема, Нов.УчастникЭкипажа);
		Нов.Корректировка = Истина;
		Нов.Период = Выб.ДатаЗакрытия;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолСуммуКорПоЗП(Сумма, УчастникЭкипажа)	
	Стр = СуммаЗП.Найти(УчастникЭкипажа);
	ДобавочнаяСумма = 0;
	Если Стр <> Неопределено Тогда
		ДобавочнаяСумма = Стр.ПослеКор - Стр.Фактическая;	
	КонецЕсли;
	Возврат Сумма + ДобавочнаяСумма;
КонецФункции

//CeHbKA
Процедура ПроизвестиКорректировкуЗаписейРНВзаиморасчетыСКомитентами()
	
	Движения.ВзаиморасчетыСКомитентами.Очистить();
	Движения.ВзаиморасчетыСКомитентами.Записывать = Истина;
	Движения.ВзаиморасчетыСКомитентами.БлокироватьДляИзменения = Истина;
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ВзаиморасчетыСКомитентами.Период КАК Период,
	            |	ВзаиморасчетыСКомитентами.Регистратор КАК Регистратор,
	            |	ВзаиморасчетыСКомитентами.НомерСтроки КАК НомерСтроки,
	            |	ВзаиморасчетыСКомитентами.Активность КАК Активность,
	            |	ВзаиморасчетыСКомитентами.Организация КАК Организация,
	            |	ВзаиморасчетыСКомитентами.Комитент КАК Комитент,
	            |	ВзаиморасчетыСКомитентами.ДатаВозникновенияЗадолженности КАК ДатаВозникновенияЗадолженности,
	            |	ВзаиморасчетыСКомитентами.ТипЗаказа КАК ТипЗаказа,
	            |	ВзаиморасчетыСКомитентами.Заказ КАК Заказ,
	            |	ВзаиморасчетыСКомитентами.Сумма КАК Сумма
	            |ИЗ
	            |	РегистрНакопления.ВзаиморасчетыСКомитентами КАК ВзаиморасчетыСКомитентами
	            |ГДЕ
	            |	ВзаиморасчетыСКомитентами.Регистратор = &Закрытие
	            |	И ВзаиморасчетыСКомитентами.Заказ = &Заказ";
				
	Зап.УстановитьПараметр("Закрытие", ЗакрытиеЗаказов);
	Зап.УстановитьПараметр("Заказ", Заказ);

	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл		
		Нов = Движения.ВзаиморасчетыСКомитентами.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.Сумма = - Нов.Сумма;
		Нов.Регистратор = Ссылка;
		Нов.Корректировка = Истина;
		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;
		
		//новые данные
		Нов = Движения.ВзаиморасчетыСКомитентами.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		Нов.Сумма  = ПолученоСПокупателя;
		Нов.Регистратор = Ссылка;
		Нов.Период = ЗакрытиеЗаказов.ДатаЗакрытия;		
	КонецЦикла;	
	
КонецПроцедуры
 
Процедура КорректировкаУслугСДВАдминке(ОтменаКорректировки = Неопределено)
	
	// ++Задача № 3403

	OrderId  		= Число(Заказ.Номер);
	
	ТекстКорректировки = "Установка";
	Если ОтменаКорректировки = Неопределено Тогда
		ServiceDC		 = УслугиСД + Подъем;
		ServiceDCclean   = ЧистыеУслугиСД;
		Comment          = КомментарийСД;
		//Асеев 21.05.2021 (Задача № 4571)>>>
		//ChargeableWeight = ВесЗаказа;
		Если ТарификацияПоОбъемномуВесу Тогда
			ChargeableWeight = ТарифицируемыйОбъемныйВес;
		Иначе
			ChargeableWeight = ВесЗаказа;
		КонецЕсли;
		//Асеев 21.05.2021 (Задача № 4571)<<<
	Иначе
		ServiceDC		 = ОтменаКорректировки.УслугиСД + ОтменаКорректировки.Подъем;
		ServiceDCclean   = ОтменаКорректировки.УслугиСДЧистые;
		Comment          = "";
		ChargeableWeight = ОтменаКорректировки.ВесВбазу;
		ТекстКорректировки = "Отмена";
	КонецЕсли;

	ПараметрыЗаказа = Новый Структура("order", Новый Структура("OrderId, ServiceDC, ServiceDCclean, Comment, ChargeableWeight",
	OrderId, ServiceDC, ServiceDCclean, Comment, ChargeableWeight));
			
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		ФайлДляКонтроля = "D:\tmp\SetServiceDc_" + ТекстКорректировки + "_" + СокрЛП(OrderId) + ".json";
		ТолькоСохранитьФайл = Ложь;
	Иначе
		ФайлДляКонтроля = Неопределено;
		ТолькоСохранитьФайл = Ложь;
	КонецЕсли;
		
	ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetServiceDcResult;
	РезультатОтправки = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(ВидЗапроса, ПараметрыЗаказа, ФайлДляКонтроля, ТолькоСохранитьФайл);	
	
	// --Задача № 3403		
	
КонецПроцедуры	
// подъем водителя надо учесть в ОперативнойЭкономике

//Геннадий #4277 13.10.2020 ->
//процедура вызывается при создании нового документа КорректировкаУслугСД из док.ЗакрытиеЗаказов
Функция ЗаполнитьЗначенияПоДаннымЗакрытиеЗаказов(НовыйДок, ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("СхемаРасчетаЗП", 						Справочники.зпСхемыРасчетаЗП.ПустаяСсылка());
	ДанныеДляЗаполнения.Вставить("КатегорияЗаказаДляРасчетаЗП", 		Справочники.зпКатегорииЗаказов.ПустаяСсылка());
	ДанныеДляЗаполнения.Вставить("КатегорияЗаказаДляРасчетаЗПНовая", 	Справочники.зпКатегорииЗаказов.ПустаяСсылка());
	ДанныеДляЗаполнения.Вставить("ЗонаДоставкиЗаказаДляРасчетаЗП", 		Справочники.зпЗоныДоставки.ПустаяСсылка());
	ДанныеДляЗаполнения.Вставить("ЗонаДоставкиЗаказаДляРасчетаЗПНовая", Справочники.зпЗоныДоставки.ПустаяСсылка());
	ДанныеДляЗаполнения.Вставить("ЗапретПерерасчетаЗП", Ложь);
	
	Если НовыйДок Тогда		
		
		//получим схему расчета ЗП
		ДанныеДляЗаполнения.СхемаРасчетаЗП = зпРаботаСРасчетомЗарплатыСервер.ПолучитьАктивнуюСхемуРасчетаЗП(ДатаЗакрытия, ЗакрытиеЗаказов.ТерминалДоставки);
		
		//рассчитаем КатегориюЗаказа и ЗонуДоставки
		ПолучитьКатегориюИЗонуЗаказа(ДанныеДляЗаполнения);
		
		//рассчитаем НОВЫЕ значения КатегорииЗаказа и ЗоныДоставки
		ПолучитьНовыеЗначенияКатегорииИЗоныЗаказа(ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора, ДанныеДляЗаполнения);
		
		//проверим закрытие периода для расчета ЗП
		ДанныеДляЗаполнения.ЗапретПерерасчетаЗП = ПроверитьЗакрытиеРасчетногоПериода();
		
	КонецЕсли;	
	
	Возврат ДанныеДляЗаполнения; 
	
КонецФункции

Процедура ПолучитьКатегориюИЗонуЗаказа(ДанныеДляЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.КатегорияЗаказа КАК КатегорияЗаказа,
	|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ЗонаДоставки КАК ЗонаДоставки
	|ИЗ
	|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(
	|			&Период,
	|			Рейс = &Рейс
	|				И Заказ = &Заказ) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних";
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Период", КонецДня(ДатаЗакрытия) - 1);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	//3.2.1 Сначала пробуем заполнить по данным зпИсходныеДанныеРасчетаЗППоЗаказам (отбор по Рейс, Заказ и СхемаРасчетаЗП).
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда

		ДанныеДляЗаполнения.КатегорияЗаказаДляРасчетаЗП 	= ВыборкаДетальныеЗаписи.КатегорияЗаказа;
		ДанныеДляЗаполнения.ЗонаДоставкиЗаказаДляРасчетаЗП 	= ВыборкаДетальныеЗаписи.ЗонаДоставки;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНовыеЗначенияКатегорииИЗоныЗаказа(ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора, ДанныеДляЗаполнения)
	
	//3.2.2 Если данных на этапе 3.2.1 нет - то пробуем получить Категорию и Зону (как в связанной задаче, п. 10 и 11)  исходя из данных заказа (вес, объем, координаты).		
	
	//Получим зону доставки заказа
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(Заказ);
	
	СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьСоответствиеЗаказовИЗон(МассивЗаказов);
	
	//CeHbKA 09.11.2020
	Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда
		ДанныеДляЗаполнения.ЗонаДоставкиЗаказаДляРасчетаЗПНовая = СоответствиеЗонИЗаказов.Получить(Заказ);
	КонецЕсли;	
	//CeHbKA 09.11.2020
		
	//Получим Категорию заказов
	ДанныеДляЗаполнения.КатегорияЗаказаДляРасчетаЗПНовая 	= ПолучитьНовоеЗначениеКатегорииЗаказов(ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора, ДанныеДляЗаполнения);	

КонецПроцедуры

Функция ПолучитьНовоеЗначениеКатегорииЗаказов(ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора, ДанныеДляЗаполнения)
	
	//Геннадий 15.04.2021 ->
	//замена на универсальную процедуру
	//Асеев 04.07.2023 (Задача № 4101)>>>
	//ДанныеДляРасчета = Новый Структура("ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора, Заказ", ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора, Заказ);
	ДанныеДляРасчета = Новый Структура("ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора, Заказ, УровеньОбслуживанияЗаказа", ТипЗаказа, ТарифицируемыйВес, ОбъемЗабора, Заказ, УровеньОбслуживанияНовый);
	//Асеев 04.07.2023 (Задача № 4101)<<<
	ДанныеКатегорииЗаказа = зпРаботаСРасчетомЗарплатыСервер.ПолучитьКатегориюЗаказа(ДанныеДляЗаполнения.СхемаРасчетаЗП, ДанныеДляРасчета);
	//Геннадий 15.04.2021 <-
	
	Возврат ДанныеКатегорииЗаказа.КатегорияЗаказа;
	
КонецФункции

Функция ПроверитьЗакрытиеРасчетногоПериода()
	
	//3.3 При  вводе нового документа заполняем реквизит ЗапретПерерасчетаЗП, на основании РС зпЗакрытыеРасчетныеПериоды (по ЗакрытиеЗаказов.ТерминалДоставки и ДатаЗакрытия). 
	//Если в РС есть запись удовлетворяющая условиям (РасчетныйПериод в РС описывает месяц), то выставляем реквизит в истина.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	зпЗакрытыеРасчетныеПериодыСрезПоследних.ПериодЗакрыт КАК ПериодЗакрыт
		|ИЗ
		|	РегистрСведений.зпЗакрытыеРасчетныеПериоды.СрезПоследних(
		|			,
		|			Регион = &Регион
		|				И РасчетныйПериод = &РасчетныйПериод) КАК зпЗакрытыеРасчетныеПериодыСрезПоследних";
	
	Запрос.УстановитьПараметр("РасчетныйПериод", 	НачалоМесяца(ДатаЗакрытия));
	Запрос.УстановитьПараметр("Регион", 			ЗакрытиеЗаказов.ТерминалДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ?(ВыборкаДетальныеЗаписи.Следующий(), Истина, Ложь);
	
КонецФункции

//Корректировку записей выполняем если новые значения отличаются от исходных
Процедура ПроизвестиКорректировкуЗаписейРС(Отказ)

	Если Рейс.Пустая() Или ЗапретПерерасчетаЗП Или ДанныеЗПЗакрытыДляИзменения Тогда
		Возврат;
	КонецЕсли;
	
	//Движения.зпИсходныеДанныеРасчетаЗППоЗаказам.Записывать = Истина;
	Движения.зпИсходныеДанныеРасчетаЗППоЗаказам.Очистить();
	
	//Движения.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.Записывать = Истина;
	Движения.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.Очистить();
	
	Если КатегорияЗаказаДляРасчетаЗП <> КатегорияЗаказаДляРасчетаЗПНовая Или
		ЗонаДоставкиЗаказаДляРасчетаЗП <> ЗонаДоставкиЗаказаДляРасчетаЗПНовая Или
		УровеньОбслуживания <> УровеньОбслуживанияНовый Тогда
		
		//получим движения документа в РС.зпИсходныеДанныеРасчетаЗППоЗаказам
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Регион КАК Регион,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ДатаРасчета КАК ДатаРасчета,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ВидЗанятости КАК ВидЗанятости,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.СоставЭкипажа КАК СоставЭкипажа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Роль КАК Роль,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ТипЗаказа КАК ТипЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ПолигонМаршрутизацииЗаказа КАК ПолигонМаршрутизацииЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ПолигонМаршрутизацииСоСложнойПарковкой КАК ПолигонМаршрутизацииСоСложнойПарковкой,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ПричинаНевыполненияДоставки КАК ПричинаНевыполненияДоставки,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Начисление КАК Начисление,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Широта КАК Широта,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Долгота КАК Долгота,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ТарифРасчетаЗП КАК ТарифРасчетаЗП
		|ПОМЕСТИТЬ ВТ_Движения
		|ИЗ
		|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(
		|			&Период,
		|			Рейс = &Рейс
		|				И Заказ = &Заказ) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ПериодКорректировки КАК Период,
		|	ВТ_Движения.Регион КАК Регион,
		|	ВТ_Движения.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
		|	ВТ_Движения.ДатаРасчета КАК ДатаРасчета,
		|	ВТ_Движения.ВидЗанятости КАК ВидЗанятости,
		|	&Рейс КАК Рейс,
		|	ВТ_Движения.ФизЛицо КАК ФизЛицо,
		|	ВТ_Движения.СоставЭкипажа КАК СоставЭкипажа,
		|	ВТ_Движения.Роль КАК Роль,
		|	ВТ_Движения.ТипЗаказа КАК ТипЗаказа,
		|	&Заказ КАК Заказ,
		|	&КатегорияЗаказаДляРасчетаЗПНовая КАК КатегорияЗаказа,
		|	&ЗонаДоставкиЗаказаДляРасчетаЗПНовая КАК ЗонаДоставки,
		|	&УровеньОбслуживанияНовый КАК УровеньОбслуживанияЗаказа,
		|	ВТ_Движения.ПолигонМаршрутизацииЗаказа КАК ПолигонМаршрутизацииЗаказа,
		|	ВТ_Движения.ПолигонМаршрутизацииСоСложнойПарковкой КАК ПолигонМаршрутизацииСоСложнойПарковкой,
		|	ВЗ_РасчетЗП.Тариф КАК СуммаРасчетаЗП,
		|	ВТ_Движения.ПричинаНевыполненияДоставки КАК ПричинаНевыполненияДоставки,
		|	ВТ_Движения.Начисление КАК Начисление,
		|	ВТ_Движения.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ВТ_Движения.Широта КАК Широта,
		|	ВТ_Движения.Долгота КАК Долгота,
		|	ВТ_Движения.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
		|	&ВесЗаказа КАК ВесЗаказа
		|ИЗ
		|	ВТ_Движения КАК ВТ_Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТ_Движения.ФизЛицо КАК ФизЛицо,
		|			МАКСИМУМ(зпТарификацияЗППоЗаказам.Тариф) КАК Тариф
		|		ИЗ
		|			ВТ_Движения КАК ВТ_Движения
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпТарификацияЗППоЗаказам КАК зпТарификацияЗППоЗаказам
		|				ПО ВТ_Движения.СхемаРасчетаЗП = зпТарификацияЗППоЗаказам.СхемаРасчетаЗП
		|					И ВТ_Движения.ТарифРасчетаЗП = зпТарификацияЗППоЗаказам.ТарифРасчетаЗП
		|					И ВТ_Движения.Роль = зпТарификацияЗППоЗаказам.Роль
		|					И ВТ_Движения.Начисление = зпТарификацияЗППоЗаказам.ОсновноеНачисление
		|					И ВТ_Движения.СоставЭкипажа = зпТарификацияЗППоЗаказам.СоставЭкипажа
		|					И ВТ_Движения.ТипЗаказа = зпТарификацияЗППоЗаказам.ТипЗаказа
		|					И (зпТарификацияЗППоЗаказам.КатегорияЗаказа = &КатегорияЗаказаДляРасчетаЗПНовая)
		|					И (зпТарификацияЗППоЗаказам.ЗонаДоставки = &ЗонаДоставкиЗаказаДляРасчетаЗПНовая)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ_Движения.ФизЛицо) КАК ВЗ_РасчетЗП
		|		ПО ВТ_Движения.ФизЛицо = ВЗ_РасчетЗП.ФизЛицо";
		
		Запрос.УстановитьПараметр("Рейс", Рейс);
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("Период", Дата - 1);
		Запрос.УстановитьПараметр("ПериодКорректировки", Дата);
		Запрос.УстановитьПараметр("КатегорияЗаказаДляРасчетаЗПНовая", КатегорияЗаказаДляРасчетаЗПНовая);
		Запрос.УстановитьПараметр("ЗонаДоставкиЗаказаДляРасчетаЗПНовая", ЗонаДоставкиЗаказаДляРасчетаЗПНовая);
		Запрос.УстановитьПараметр("УровеньОбслуживанияНовый", УровеньОбслуживанияНовый);
		Запрос.УстановитьПараметр("ВесЗаказа", ВесЗаказа);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Движения.зпИсходныеДанныеРасчетаЗППоЗаказам.Загрузить(Результат.Выгрузить());
			
			ДокументыКПерерасчету();
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ПодъемВодитель <> ПодъемВодительСтарый Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Рейс", Рейс);
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("Период", Дата - 1);
		Запрос.УстановитьПараметр("ПериодКорректировки", Дата);
		Запрос.УстановитьПараметр("ПодъемВодитель", ПодъемВодитель);
		Запрос.УстановитьПараметр("ВесЗаказа", ВесЗаказа);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ПериодКорректировки КАК Период,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Регион КАК Регион,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Начисление КАК Начисление,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ДатаРасчета КАК ДатаРасчета,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ВидЗанятости КАК ВидЗанятости,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Рейс КАК Рейс,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.СоставЭкипажа КАК СоставЭкипажа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ТипЗаказа КАК ТипЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Заказ КАК Заказ,
		|	&ПодъемВодитель * зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ПроцентОплатыПодъемаЗаказа / 100 КАК Сумма,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.БрейкРасчетПодъема КАК БрейкРасчетПодъема,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.СпособПодъема КАК СпособПодъема,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Этаж КАК Этаж,
		|	&ВесЗаказа КАК ВесЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ПроцентОплатыПодъемаЗаказа КАК ПроцентОплатыПодъемаЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.ОсновноеНачисление КАК ОсновноеНачисление,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.СрезПоследних(
		|			&Период,
		|			Рейс = &Рейс
		|				И Заказ = &Заказ
		|				И Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ОплатаПодъемаНаЭтажПриДоставкеЗаказа)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Движения.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.Загрузить(Результат.Выгрузить());
		Иначе
			Запрос.УстановитьПараметр("ЗакрытиеЗаказов", ЗакрытиеЗаказов);
			Запрос.УстановитьПараметр("ОсновноеНачислениеВодитель", ОсновноеНачислениеВодитель);
			Запрос.УстановитьПараметр("ОсновноеНачислениеЭкспедитор", ОсновноеНачислениеЭкспедитор);
			Запрос.УстановитьПараметр("ПроцентОплатыПодъемаЗаказаВодитель", ПроцентОплатыПодъемаЗаказаВодитель);
			Запрос.УстановитьПараметр("ПроцентОплатыПодъемаЗаказаЭкспедитор", ПроцентОплатыПодъемаЗаказаЭкспедитор);
			Запрос.УстановитьПараметр("ДатаЗакрытия", КонецДня(ДатаЗакрытия));
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	&ПериодКорректировки КАК Период,
			|	ЗакрытиеЗаказовЗаказы.Ссылка.ТерминалДоставки КАК Регион,
			|	ЗакрытиеЗаказовЗаказы.Ссылка.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
			|	ЗакрытиеЗаказовЗаказы.Ссылка.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
			|	ЗНАЧЕНИЕ(Справочник.зпНачисления.ОплатаПодъемаНаЭтажПриДоставкеЗаказа) КАК Начисление,
			|	ЗакрытиеЗаказовЗаказы.Ссылка.ДатаЗакрытия КАК ДатаРасчета,
			|	ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость) КАК ВидЗанятости,
			|	&Рейс КАК Рейс,
			|	ЗакрытиеЗаказовЗаказы.Водитель.ФизЛицо КАК ФизЛицо,
			|	ВЫБОР
			|		КОГДА ЗакрытиеЗаказовЗаказы.Экспедитор = ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.зпСоставЭкипажа.ВодительБезЭкспедитора)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.зпСоставЭкипажа.ВодительСЭкспедитором)
			|	КОНЕЦ КАК СоставЭкипажа,
			|	ВЫБОР
			|		КОГДА &Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
			|	КОНЕЦ КАК ТипЗаказа,
			|	&Заказ КАК Заказ,
			|	&ПодъемВодитель * &ПроцентОплатыПодъемаЗаказаВодитель / 100 КАК Сумма,
			|	&ВесЗаказа КАК ВесЗаказа,
			|	&ПроцентОплатыПодъемаЗаказаВодитель КАК ПроцентОплатыПодъемаЗаказа,
			|	&ОсновноеНачислениеВодитель КАК ОсновноеНачисление,
			|	ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника КАК Роль
			|ИЗ
			|	Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних(
			|				&ДатаЗакрытия,
			|				ФизЛицо В
			|					(ВЫБРАТЬ ПЕРВЫЕ 1
			|						ЗакрытиеЗаказовЗаказы.Водитель.ФизЛицо КАК ВодительФизЛицо
			|					ИЗ
			|						Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
			|					ГДЕ
			|						ЗакрытиеЗаказовЗаказы.Ссылка = &ЗакрытиеЗаказов
			|						И ЗакрытиеЗаказовЗаказы.Реализация = &Заказ)) КАК ДополнительныеПараметрыФизЛицСрезПоследних
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ЗакрытиеЗаказовЗаказы.Ссылка = &ЗакрытиеЗаказов
			|	И ЗакрытиеЗаказовЗаказы.Реализация = &Заказ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	&ПериодКорректировки,
			|	ЗакрытиеЗаказовЗаказы.Ссылка.ТерминалДоставки,
			|	ЗакрытиеЗаказовЗаказы.Ссылка.СхемаРасчетаЗП,
			|	ЗакрытиеЗаказовЗаказы.Ссылка.ТарифРасчетаЗП,
			|	ЗНАЧЕНИЕ(Справочник.зпНачисления.ОплатаПодъемаНаЭтажПриДоставкеЗаказа),
			|	ЗакрытиеЗаказовЗаказы.Ссылка.ДатаЗакрытия,
			|	ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость),
			|	&Рейс,
			|	ЗакрытиеЗаказовЗаказы.Экспедитор.ФизЛицо,
			|	ЗНАЧЕНИЕ(Перечисление.зпСоставЭкипажа.ВодительСЭкспедитором),
			|	ВЫБОР
			|		КОГДА &Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
			|	КОНЕЦ,
			|	&Заказ,
			|	&ПодъемВодитель * &ПроцентОплатыПодъемаЗаказаЭкспедитор / 100,
			|	&ВесЗаказа,
			|	&ПроцентОплатыПодъемаЗаказаЭкспедитор,
			|	&ОсновноеНачислениеЭкспедитор,
			|	ЗНАЧЕНИЕ(Справочник.РолиСотрудников.Экспедитор)
			|ИЗ
			|	Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
			|ГДЕ
			|	ЗакрытиеЗаказовЗаказы.Ссылка = &ЗакрытиеЗаказов
			|	И ЗакрытиеЗаказовЗаказы.Реализация = &Заказ
			|	И ЗакрытиеЗаказовЗаказы.Экспедитор <> ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)";
			
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				Движения.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.Загрузить(Результат.Выгрузить());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Движения.зпИсходныеДанныеРасчетаЗППоЗаказам.Записать();
	Движения.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.Записать();
	
	//Асеев 21.09.2023 (Задача № 5125)>>>
	Движения.эк_ЗатратыЗаработнаяПлата.Записывать = Истина;
	Движения.эк_ЗатратыЗаработнаяПлата.Очистить();
	
	РегистрыСведений.эк_ЗатратыЗаработнаяПлата.ЗаполнитьДвижения(Движения.эк_ЗатратыЗаработнаяПлата, Движения.зпИсходныеДанныеРасчетаЗППоЗаказам, Движения.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления);
	//Асеев 21.09.2023 (Задача № 5125)<<<
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗакрытиеЗаказов", ЗакрытиеЗаказов);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗакрытиеЗаказовЗаказы.Ссылка.ТерминалДоставки КАК ТерминалДоставки,
	|	ЗакрытиеЗаказовЗаказы.Ссылка.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	ЗакрытиеЗаказовЗаказы.Ссылка.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ЗакрытиеЗаказовЗаказы.Ссылка.ДатаЗакрытия КАК ДатаЗакрытия,
	|	ЗакрытиеЗаказовЗаказы.Водитель.ФизЛицо КАК Водитель,
	|	ЗакрытиеЗаказовЗаказы.Экспедитор.ФизЛицо КАК Экспедитор
	|ИЗ
	|	Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	|ГДЕ
	|	ЗакрытиеЗаказовЗаказы.Ссылка = &ЗакрытиеЗаказов
	|	И ЗакрытиеЗаказовЗаказы.Реализация = &Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Движения.зпИсходныеДанныеРасчетаМинимальнойЗП.Очистить();
	//Асеев 27.05.2024 (Задача № 5275)>>>
	Движения.зпИсходныеДанныеРасчетаМинимальнойЗП.Записать();//не учитывать собственные движения при перепроведении
	//Асеев 27.05.2024 (Задача № 5275)<<<
	Движения.зпИсходныеДанныеРасчетаМинимальнойЗП.Записывать = Истина;
	
	//Асеев 07.03.2024 (Задача № 5227)>>>
	Если РегистрыСведений.РежимыПроверокДокументовПриИзменении.ПолучитьРазрешенияДокумента(Ссылка, Перечисления.ОбластиПроверокИзмененияДанных.зп_ФиксацияЗП) Тогда
		ПолнаяБлокировка = Неопределено;
	Иначе
		ПолнаяБлокировка = РегистрыСведений.зпИсходныеДанныеРасчетаМинимальнойЗП.ПолнаяБлокировкаФормирования(Выборка.ТерминалДоставки, Выборка.ДатаЗакрытия, Дата);
	КонецЕсли;
	//Асеев 07.03.2024 (Задача № 5227)<<<
	Если ПолнаяБлокировка = Неопределено Тогда
		
		ТаблицаДанных = РегистрыСведений.зпИсходныеДанныеРасчетаМинимальнойЗП.ПолучитьТаблицуДанных(Дата, Выборка.ТерминалДоставки, Выборка.СхемаРасчетаЗП, Выборка.ТарифРасчетаЗП, Выборка.ДатаЗакрытия, Рейс, Выборка.Водитель, Выборка.Экспедитор);
		
		Движения.зпИсходныеДанныеРасчетаМинимальнойЗП.Загрузить(ТаблицаДанных);
		
		//Асеев 27.09.2023 (Задача № 5129)>>>
		РегистрыСведений.эк_ЗатратыЗаработнаяПлата.РаспределитьМинимальнуюЗП(Движения.эк_ЗатратыЗаработнаяПлата, Движения.зпИсходныеДанныеРасчетаМинимальнойЗП);
		//Асеев 27.09.2023 (Задача № 5129)<<<
		
	ИначеЕсли ПолнаяБлокировка Тогда
		Отказ = Истина;
		Сообщить("Произведена фиксация месяца по минимальной з/п " + Формат(Выборка.ДатаЗакрытия, "ДФ='MMMM yyyy'"));
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ДокументыКПерерасчету()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	зпНачислениеЗПНачисленияПоЗаказам.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.зпНачислениеЗП.НачисленияПоЗаказам КАК зпНачислениеЗПНачисленияПоЗаказам
		|ГДЕ
		|	зпНачислениеЗПНачисленияПоЗаказам.Рейс = &Рейс
		|	И зпНачислениеЗПНачисленияПоЗаказам.Заказ = &Заказ
		|	И НЕ зпНачислениеЗПНачисленияПоЗаказам.Ссылка.ПометкаУдаления
		|	И зпНачислениеЗПНачисленияПоЗаказам.Ссылка.Регион = &Регион";
	
	Запрос.УстановитьПараметр("Заказ", 	Заказ);
	Запрос.УстановитьПараметр("Регион", ЗакрытиеЗаказов.ТерминалДоставки);
	Запрос.УстановитьПараметр("Рейс", 	ЗакрытиеЗаказов.Рейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.зпДокументыКПерерасчету.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ВыборкаДетальныеЗаписи.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество()Тогда
			Запись = НаборЗаписей[0];
			Запись.Документ = ВыборкаДетальныеЗаписи.Ссылка;
			Запись.Период	 			= ТекущаяДата();
			Запись.ТребуетсяПерерасчет 	= Истина;
			Запись.ОснованиеПерерасчета = Ссылка;
		Иначе
			Запись = НаборЗаписей.Добавить();
			Запись.Документ = ВыборкаДетальныеЗаписи.Ссылка;
			Запись.Период	 			= ТекущаяДата();
			Запись.ТребуетсяПерерасчет 	= Истина;
			Запись.ОснованиеПерерасчета = Ссылка;
			
		КонецЕсли;
		
		ТекстСообщения = "Заказ " + Заказ.Номер + "; Рейс " + ЗакрытиеЗаказов.Рейс + "; Изменено " + 
				КатегорияЗаказаДляРасчетаЗП + " на " + КатегорияЗаказаДляРасчетаЗПНовая + "; " + 
				ЗонаДоставкиЗаказаДляРасчетаЗП + " на " + ЗонаДоставкиЗаказаДляРасчетаЗПНовая;
		
		НаборЗаписей.Записать();			
		ОтправитьЭлектронноеСообщение(ТекстСообщения);
		
	КонецЦикла;
КонецПроцедуры	

Процедура ОтправитьЭлектронноеСообщение(ТекстСообщения)
	
	СписокПолучателей 	= Новый СписокЗначений;
	СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	СписокПолучателей.Добавить("a.pryalkin@strizh-logistic.ru");
	СписокПолучателей.Добавить("g.polyakov@strizh-logistic.ru");
	
	ТемаС 				= "Требуется перерасчет!";
	ТекстС 				= ТекстСообщения;
	ИмяОтправителя 		= "Сервер 1С";
	ОбратныйАдрес 		= "noreply2@strizh-logistic.ru";
	Ошибка 				= "";
	
	Сообщение 			= Неопределено;
	
	lem.ОтправитьСообщение(СписокПолучателей, ТемаС, ТекстС,, ИмяОтправителя, ОбратныйАдрес,, Сообщение, Ошибка,,,);
	
КонецПроцедуры
//Геннадий #4277 13.10.2020 <-

Процедура ПриКопировании(ОбъектКопирования)
	
	//Асеев 07.02.2024 (Задача № 5225)>>>
	ДанныеЗПЗакрытыДляИзменения = Ложь;
	//Асеев 07.02.2024 (Задача № 5225)<<<
	
КонецПроцедуры

