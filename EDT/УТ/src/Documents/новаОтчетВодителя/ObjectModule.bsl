
Функция ЛогированиеСтатусов()
	//ТекВр = ТекущаяДата();
	////+++++Серегин М.В. 09.11.2015 16:33:26 
	//БлокировкаДанных = Новый БлокировкаДанных;
	//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ИсторияСтатусовЗаказов");
	//ЭлементБлокировки.УстановитьЗначение("Период",ТекВр);
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	//БлокировкаДанных.Заблокировать();
	////-----Серегин М.В. 09.11.2015 16:33:28 
	//
	//Наб = РегистрыСведений.ИсторияСтатусовЗаказовКУдалению.СоздатьНаборЗаписей();
	//наб.Отбор.Период.Установить(ТекВр);
	//
	//
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка КАК Док,
	//            |	новаМестнаяДоставка.Ссылка
	//            |ИЗ
	//            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |		ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	//            |ГДЕ
	//            |	новаМестнаяДоставка.Ссылка В(&МасСсылок)";
	//			
	//МасСсылок = Задания.ВыгрузитьКолонку("Задание");
	//Зап.УстановитьПараметр("МасСсылок", МасСсылок);			
	//Рез = Зап.Выполнить().Выгрузить();
	//
	//
	//Для Каждого Тек Из Задания Цикл
	//	Нов = Наб.Добавить();
	//	ЗаполнитьЗначенияСвойств(Нов, Тек);
	//	Нов.Период = ТекВр;
	//	Нов.ОтчетВодителя = Ссылка;
	//	Най = Рез.Найти(тек.Задание);
	//	Если Най <> Неопределено Тогда
	//		Нов.Заказ = Най.Док;
	//	КонецеСли;	
	//КонецЦикла;	
	//Наб.Записать();
КонецФункции	
	
Функция СоздатьТаблицу(RS, СписокКолонок) Экспорт
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
			КонецЕсли;
		КонецЦикла;
		Rs.MoveNext()
	КонецЦикла;
	
	Возврат Таб;
КонецФункции

Функция ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину) Экспорт
	//Сообщить("======= Запрос =======");
	//Сообщить(ТекстЗапроса);
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = ПодключениеКМагазину;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandType = 1;
	Попытка
	Возврат Cmd.Execute();
Исключение
	
	КонецПопытки;
КонецФункции // ЗапросКИнтернетМагазину()

Процедура ОбработкаЗаполнения(Основание)
	                                            
	Рейс = Основание;
	Транспорт = Рейс.Транспорт;
	Водитель = Рейс.Водитель;
	Экспедитор = Рейс.Экспедитор;
	
	//Асеев 24.06.2022 (Задача № 4825)>>>
	Зап = Новый Запрос;
	//Зап.Текст =
	//"ВЫБРАТЬ
	//|	Рейс.ТерминалДоставки КАК ТерминалДоставки,
	//|	НастройкиУчетаОбщиеСрезПоследних.ОбъединениеФункционалаЛогистаИКассира
	//|		И Рейс.ТерминалДоставки <> ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.СПбСтриж) КАК ОбъединениеФункционалаЛогистаИКассира
	//|ИЗ
	//|	Документ.Рейс КАК Рейс
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаОбщие.СрезПоследних КАК НастройкиУчетаОбщиеСрезПоследних
	//|		ПО (ИСТИНА)
	//|ГДЕ
	//|	Рейс.РейсМестнойДоставки = &РейсМестнойДоставки";
	//Асеев 24.06.2022 (Задача № 4825)<<<
	
	//Асеев 19.05.2023 (Задача № 5043)>>>
	Зап.Текст =
	"ВЫБРАТЬ
	|	Рейс.ТерминалДоставки КАК ТерминалДоставки
	|ПОМЕСТИТЬ ВТ_Рейс
	|ИЗ
	|	Документ.Рейс КАК Рейс
	|ГДЕ
	|	Рейс.РейсМестнойДоставки = &РейсМестнойДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	зпАктивнаяСхемаРасчетаЗПСрезПоследних.СхемаРасчетаЗП КАК СхемаРасчетаЗП
	|ПОМЕСТИТЬ ВТ_АктивнаяСхемаРасчетаЗП
	|ИЗ
	|	РегистрСведений.зпАктивнаяСхемаРасчетаЗП.СрезПоследних(
	|			&НачалоРейса,
	|			Регион В
	|				(ВЫБРАТЬ
	|					ВТ_Рейс.ТерминалДоставки КАК ТерминалДоставки
	|				ИЗ
	|					ВТ_Рейс КАК ВТ_Рейс)) КАК зпАктивнаяСхемаРасчетаЗПСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Рейс.ТерминалДоставки КАК ТерминалДоставки,
	|	НастройкиУчетаОбщиеСрезПоследних.ОбъединениеФункционалаЛогистаИКассира
	|		И ВТ_Рейс.ТерминалДоставки <> ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.СПбСтриж) КАК ОбъединениеФункционалаЛогистаИКассира,
	|	ВТ_АктивнаяСхемаРасчетаЗП.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	зпАктивныйТарифРасчетаЗПСрезПоследних.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ВЗ_Водитель.ОсновноеНачисление КАК ОсновноеНачислениеВодитель,
	|	ВЗ_Экспедитор.ОсновноеНачисление КАК ОсновноеНачислениеЭкспедитор
	|ИЗ
	|	ВТ_Рейс КАК ВТ_Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктивнаяСхемаРасчетаЗП КАК ВТ_АктивнаяСхемаРасчетаЗП
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаОбщие.СрезПоследних КАК НастройкиУчетаОбщиеСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпАктивныйТарифРасчетаЗП.СрезПоследних(
	|				&НачалоРейса,
	|				СхемаРасчетаЗП В
	|					(ВЫБРАТЬ
	|						ВТ_АктивнаяСхемаРасчетаЗП.СхемаРасчетаЗП КАК СхемаРасчетаЗП
	|					ИЗ
	|						ВТ_АктивнаяСхемаРасчетаЗП КАК ВТ_АктивнаяСхемаРасчетаЗП)) КАК зпАктивныйТарифРасчетаЗПСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			РаботникиОрганизации.ОсновноеНачисление КАК ОсновноеНачисление
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.новаВодители КАК новаВодители
	|				ПО (новаВодители.Ссылка = &Водитель)
	|					И (РаботникиОрганизации.Период <= &КонецРейса)
	|					И РаботникиОрганизации.ФизЛицо = новаВодители.ФизЛицо
	|					И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			РаботникиОрганизации.Период УБЫВ) КАК ВЗ_Водитель
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			РаботникиОрганизации.ОсновноеНачисление КАК ОсновноеНачисление
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.новаЭкспедиторы КАК новаЭкспедиторы
	|				ПО (новаЭкспедиторы.Ссылка = &Экспедитор)
	|					И (РаботникиОрганизации.Период <= &КонецРейса)
	|					И РаботникиОрганизации.ФизЛицо = новаЭкспедиторы.ФизЛицо
	|					И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			РаботникиОрганизации.Период УБЫВ) КАК ВЗ_Экспедитор
	|		ПО (ИСТИНА)";
	//Асеев 19.05.2023 (Задача № 5043)<<<
	
	Зап.УстановитьПараметр("РейсМестнойДоставки", Рейс);
	Зап.УстановитьПараметр("НачалоРейса", Рейс.ДатаНачала);
	Зап.УстановитьПараметр("КонецРейса", КонецДня(Рейс.ДатаНачала));
	Зап.УстановитьПараметр("Водитель", Водитель);
	Зап.УстановитьПараметр("Экспедитор", Экспедитор);
	РезЗап = Зап.Выполнить().Выбрать();
	РезЗап.Следующий();	
	ТерминалДоставки = РезЗап.ТерминалДоставки;
	РежимОбъединенияФункционалаЛогистаИКассира = РезЗап.ОбъединениеФункционалаЛогистаИКассира;
	СхемаРасчетаЗП = РезЗап.СхемаРасчетаЗП;
	ТарифРасчетаЗП = РезЗап.ТарифРасчетаЗП;
	ОсновноеНачислениеВодитель = РезЗап.ОсновноеНачислениеВодитель;
	ОсновноеНачислениеЭкспедитор = РезЗап.ОсновноеНачислениеЭкспедитор;
	
	
	ДоходыРасходы.Очистить();
	Для Каждого стрДоходРасход Из Рейс.ДоходыРасходы Цикл
		ЗаполнитьЗначенияСвойств(ДоходыРасходы.Добавить(), стрДоходРасход);
	КонецЦикла;
	
	//Асеев 20.08.2021 (Задача № 4643)>>>
	//Запрос = новый Запрос("ВЫБРАТЬ
	//                      |	РейсЗаказы.Ссылка КАК Ссылка,
	//                      |	РейсЗаказы.Заказ КАК Заказ,
	//                      |	РейсЗаказы.Вес КАК Вес,
	//                      |	РейсЗаказы.Заказ.Номер КАК Номер,
	//                      |	ТипыОплат.Ссылка КАК ТипОплаты,
	//                      |	РейсЗаказы.Заказ.ЭтоДоговор КАК ЭтоДоговор
	//                      |ПОМЕСТИТЬ ВТ_Заказы
	//                      |ИЗ
	//                      |	Документ.Рейс.Заказы КАК РейсЗаказы
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	//                      |		ПО РейсЗаказы.Заказ.ТипОплаты = ТипыОплат.Код
	//                      |ГДЕ
	//                      |	РейсЗаказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	//                      |	И РейсЗаказы.УдаленИзРейса = ЛОЖЬ
	//                      |	И РейсЗаказы.Ссылка.РейсМестнойДоставки = &РейсМестнойДоставки
	//                      |	И РейсЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_Заказы.Ссылка КАК Ссылка,
	//                      |	ВТ_Заказы.Заказ КАК Заказ,
	//                      |	ВТ_Заказы.Вес КАК Вес,
	//                      |	ВТ_Заказы.Номер КАК Номер,
	//                      |	ВТ_Заказы.ТипОплаты КАК ТипОплаты,
	//                      |	ВТ_Заказы.ЭтоДоговор КАК ЭтоДоговор,
	//                      |	новаМестнаяДоставка.Ссылка КАК Задание,
	//                      |	новаМестнаяДоставка.ТочкаПрибытия КАК АдресПосле,
	//                      |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК АдресДо
	//                      |ИЗ
	//                      |	ВТ_Заказы КАК ВТ_Заказы
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//                      |		ПО ВТ_Заказы.Номер = новаМестнаяДоставка.Номер");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РейсЗаказы.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	РейсЗаказы.Вес КАК Вес,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	ТипыОплат.Ссылка КАК ТипОплаты,
	|	РеализацияТоваровУслуг.ЭтоДоговор КАК ЭтоДоговор,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (Рейс.РейсМестнойДоставки = &РейсМестнойДоставки)
	|			И (НЕ Рейс.ПометкаУдаления)
	|			И РейсЗаказы.Ссылка = Рейс.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	|			ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
	|		ПО (НЕ РейсЗаказы.УдаленИзРейса)
	|			И РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
	|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке
	|ПОМЕСТИТЬ ВТ_ПараметрыКонтрагентов
	|ИЗ
	|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
	|			,
	|			Контрагент В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.ВладелецТовара КАК ВладелецТовара
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ПараметрыКонтрагентовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Ссылка КАК Ссылка,
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВТ_Заказы.Вес КАК Вес,
	|	ВТ_Заказы.Номер КАК Номер,
	|	ВТ_Заказы.ТипОплаты КАК ТипОплаты,
	|	ВТ_Заказы.ЭтоДоговор КАК ЭтоДоговор,
	|	новаМестнаяДоставка.Ссылка КАК Задание,
	|	новаМестнаяДоставка.ТочкаПрибытия КАК АдресПосле,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК АдресДо,
	|	НЕ &РежимОбъединенияФункционалаЛогистаИКассира
	|		И ДополнительныеПараметрыЗаказа.ПодписаниеИВозвратСопрДокументов КАК ТребуетсяПодписаниеИВозвратСопрДокументов,
	|	НЕ &РежимОбъединенияФункционалаЛогистаИКассира
	|		И ВТ_Заказы.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.БезналичныйРасчет)
	|		И НЕ ЕСТЬNULL(ВТ_ПараметрыКонтрагентов.ОтключитьПроверкуБНЗаказов, ЛОЖЬ) КАК ТребуетсяПодписаниеИВозвратБНДокументов,
	|	ДополнительныеПараметрыЗаказа.УровеньОбслуживанияЗаказа КАК УровеньОбслуживанияЗаказа,
	|	ВТ_ПараметрыКонтрагентов.СопроводительныеДокументыНаходятсяВКоробке КАК СопрДокументыВКоробке
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО ВТ_Заказы.Номер = новаМестнаяДоставка.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыКонтрагентов КАК ВТ_ПараметрыКонтрагентов
	|		ПО ВТ_Заказы.ВладелецТовара = ВТ_ПараметрыКонтрагентов.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ";
	//Асеев 20.08.2021 (Задача № 4643)<<<
	
	Запрос.УстановитьПараметр("РейсМестнойДоставки", Рейс);
	//Асеев 02.09.2022 (Задача № 4889)>>>
	Запрос.УстановитьПараметр("РежимОбъединенияФункционалаЛогистаИКассира", РежимОбъединенияФункционалаЛогистаИКассира);
	//Асеев 02.09.2022 (Задача № 4889)<<<
	
	//Геннадий #4101 05.03.2021 ->
	//Рез = Запрос.Выполнить().Выбрать();
	РезультатЗапроса = Запрос.Выполнить();
	Рез 			 = РезультатЗапроса.Выбрать();
	МассивЗаказов 	 = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Заказ");
	СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьСоответствиеЗаказовИЗон(МассивЗаказов);
	//Геннадий <-
	
	Пока Рез.Следующий() Цикл
		
		//Геннадий #4101 05.03.2021 ->
		//ЗаполнитьЗначенияСвойств(Задания.Добавить(), Рез);
		стрЗадания = Задания.Добавить();
		ЗаполнитьЗначенияСвойств(стрЗадания, Рез);
		
		Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда
			стрЗадания.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов.Получить(стрЗадания.Заказ);
		КонецЕсли;
		//Геннадий <-
		
	КонецЦикла;
		
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// В рамках Задача № 2975
	МассивПроверкиЗаборов = Новый Массив;
	Для Каждого СтрЗабор Из Заборы Цикл
		
		Если СтрЗабор.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена 
			И  СтрЗабор.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка() Тогда
			МассивПроверкиЗаборов.Добавить("Нет причины невыполнения для " + Строка(СтрЗабор.Забор));
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если МассивПроверкиЗаборов.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(МассивПроверкиЗаборов, Символы.ПС));
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	// В рамках Задача № 2975
	
	//Геннадий #4101 05.03.2021 -> заккоментированно 06.04.2023
	//Если ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
	//	стрЗаданияЗонаДоставки = Задания.Найти(Справочники.зпЗоныДоставки.ПустаяСсылка(), "ЗонаДоставкиЗП");
	//	стрЗаборыЗонаДоставки  = Заборы.Найти(Справочники.зпЗоныДоставки.ПустаяСсылка(),  "ЗонаДоставкиЗП");
	//	Если стрЗаданияЗонаДоставки <> Неопределено Или стрЗаборыЗонаДоставки <> Неопределено Тогда
	//		Сообщить("Заказ имеет неверные координаты! Измените адрес доставки заказа!");
	//		Отказ = Истина;
	//		Возврат;		
	//	КонецЕсли;
	//КонецЕсли;
	//Геннадий <-
	
	// Михушкин - 31.10.2016 --->> 
	Попытка		
		ЗапРейс = Новый Запрос("ВЫБРАТЬ
		                      |	Рейс.Ссылка
		                      |ИЗ
		                      |	Документ.Рейс КАК Рейс
		                      |ГДЕ
		                      |	Рейс.РейсМестнойДоставки = &РейсМестнойДоставки");
		ЗапРейс.УстановитьПараметр("РейсМестнойДоставки", Рейс);
		РезРейс = ЗапРейс.Выполнить().Выбрать();
		/////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////////////////////результат этого запроса используется и далее в процедуре проведения
		Если РезРейс.Следующий() Тогда
			РейсСсылка = РезРейс.Ссылка;
			//+Степанов Задача № 3439
			//baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(РейсСсылка, Истина);
			baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(РейсСсылка, Истина,Ссылка);
			//-Степанов
		КонецЕсли;
		
	Исключение		
		//#Если Клиент Тогда
			ТекстОшибки = ОписаниеОшибки();
			Сообщить("Не удалось установить признак ""Рейс закрыт"" для документа (" + Рейс + ")" + Символы.ПС + "Описание ошибки: " + ТекстОшибки);
		//#КонецЕсли
	КонецПопытки;
	// <<--- Михушкин 
	
	//Асеев 02.09.2022 (Задача № 4889)>>>
	РежимРазделенияФункционалаЛогистаИКассира = Не РежимОбъединенияФункционалаЛогистаИКассира;
	//Асеев 02.09.2022 (Задача № 4889)<<<
	
	Для Каждого Тек Из Задания Цикл	
		
		Если Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки ИЛИ Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			Если Не ЗначениеЗаполнено(Тек.ДатаПереноса) Тогда
				//#Если Клиент Тогда
					Сообщить("Не заполнена дата переноса по заказу №" + СокрЛП(Тек.Задание.Номер));
				//#КонецЕсли
				Отказ = Истина;
				Возврат;
			КонецеСли;	
			
//+++ БАО 10.10.2017 № 1928 
			
			Если  ЗначениеЗаполнено(Тек.ДатаПереноса) И  Тек.ДатаПереноса < НачалоДня(Дата) Тогда
				//#Если Клиент Тогда
				Сообщить("Нельзя переносить заявки на прошлую дату. Заказ №"  + СокрЛП(Тек.Задание.Номер)); 
				//#КонецЕсли
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;	
			
			
			Если  ЗначениеЗаполнено(Тек.ДатаПереноса) И  Тек.ДатаПереноса >= Дата + 60*60*24*14 Тогда
				//#Если Клиент Тогда
				Сообщить("Заказ перенесен на будущую дату больше чем на 14 дней. Заказ №"  + СокрЛП(Тек.Задание.Номер)); 
				//#КонецЕсли
			КонецЕсли;	

//--- БАО 10.10.2017 №1928 
			
			
		КонецеСли;
		
		//Асеев 02.09.2022 (Задача № 4889)>>>
		Если РежимРазделенияФункционалаЛогистаИКассира Тогда
		//Асеев 02.09.2022 (Задача № 4889)<<<
			//Асеев 20.08.2021 (Задача № 4643)>>>
			Если (Тек.ТребуетсяПодписаниеИВозвратБНДокументов Или Тек.ТребуетсяПодписаниеИВозвратСопрДокументов) И Не (Тек.СопрДокументПоступил Или Тек.СопрДокументНеПоступил) Тогда
				Сообщить("По заказу №"  + СокрЛП(Тек.Задание.Номер) + " не отмечено поступление/непоступление безнальных/сопроводительных документов."); 
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			//Асеев 20.08.2021 (Задача № 4643)<<<
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Движения.ДатыДоставок.Записывать = Истина;
	Движения.ОтсутствующиеНаСкладеДоставки.Записывать = Истина;
	Движения.ОтсутствующиеНаСкладеДоставки.Очистить();
    
    
    БлокировкаДанных = Новый БлокировкаДанных;
    ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ДатыДоставок");
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
    ЭлементБлокировки.ИсточникДанных = Задания;
    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Доставка", "Задание");

    ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОтсутствующиеНаСкладеДоставки");
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
    ЭлементБлокировки.ИсточникДанных = Задания;
    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Доставка", "Задание");
    
    ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СостоянияЗаказов");
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
    ЭлементБлокировки.ИсточникДанных = Задания;
    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Доставка", "Задание");
    
    БлокировкаДанных.Заблокировать();
    //-----Серегин М.В. 09.11.2015 15:28:26 
	
	//Асеев 03.10.2023 (Задача № 5137)>>>
	//ИзменятьДатыДоставки = Документы.новаОтчетВодителя.ВыполнятьИзменениеДатыДоставки(Ссылка);
	ИзменятьДатыДоставки = Ложь;
	//Асеев 03.10.2023 (Задача № 5137)<<<

	ИзменениеДатДоставок();
	
	//Асеев 02.06.2021 (Задача № 4587)>>>
	ИзменениеДатыДоставкиЗаказаСБудущейДатойДоставки();
	//Асеев 02.06.2021 (Задача № 4587)<<<
	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
    
	
	//Задача № 3617 Переварюха В.В. 23.11.2019		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер КАК Номер
		|ИЗ
		|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО новаОтчетВодителя.Задание.Номер = РеализацияТоваровУслуг.Номер
		|ГДЕ
		|	новаОтчетВодителя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураЗапроса = Новый Структура;
		Попытка
		СтруктураЗапроса.Вставить("OrderId", Число(Выборка.Номер));
		Исключение
		СтруктураЗапроса.Вставить("OrderId", 0);
		КонецПопытки;
		
		СтруктураЗапроса.Вставить("EventDate", ТекущаяДата());
		СтруктураЗапроса.Вставить("Trip", СокрЛП(Рейс.Номер));
		СтруктураЗапроса.Вставить("Who", ПользователиИнформационнойБазы.ТекущийПользователь().Имя); 
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураЗапроса);
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("changes",МассивПараметров);
				
		СтруктураВозврата 
		= ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(Перечисления.ВидыЗапросовWEBСервис.FinalizationPendingChangesResult, ПараметрыЗапроса);

		Если НЕ СтруктураВозврата.Успешно Тогда
					
			Мас = Новый Массив;
			Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
			Мас.Добавить("a.pryalkin@strizh-logistic.ru");
			Мас.Добавить("v.perevaruha@strizh-logistic.ru");
			
			lem.ОтправитьСообщение(Мас,
			"Ошибка выполнения метода 'FinalizationPendingChanges'", 
			"Ошибка выполнения метода 'FinalizationPendingChanges' при проведении документа 'ОтчетВодителя':" 
			+ Ссылка + "Номер заказа " + Выборка.Номер);
			
		КонецЕсли;
	
	КонецЦикла;
	//Задача № 3617 Переварюха В.В. 23.11.2019
	
	
	ОбновлениеСтатусовВАдминке(РежимЗаписиДокумента.Проведение);	
	
	
	Движения.СостоянияЗаказов.Записывать = Истина;
	
	// Задача № 2991 ---
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	новаОтчетВодителяЗадания.Ссылка.Дата КАК Период,
		|	новаОтчетВодителяЗадания.Ссылка КАК Ссылка,
		|	новаОтчетВодителяЗадания.НомерСтроки КАК НомерСтроки,
		|	новаОтчетВодителяЗадания.Задание КАК Доставка,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	новаОтчетВодителяЗадания.РезультатДоставки КАК РезультатДоставки,
		|	новаОтчетВодителяЗадания.ПричинаНевыполнения КАК ПричинаНевыполнения,
		|	новаОтчетВодителяЗадания.ПричинаОтказа КАК ПричинаОтказа,
		|	новаОтчетВодителяЗадания.ПричинаОтказа.СторонаПретензии КАК СторонаПретензий,
		|	новаОтчетВодителяЗадания.ДатаПереноса КАК ДатаПереноса,
		|	новаОтчетВодителяЗадания.ИнициаторСостояния КАК Инициатор,
		|	ДокументРейс.Ссылка КАК Рейс,
		|	ДокументРейс.ДатаРейса КАК ДатаДоставки
		|ИЗ
		|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслуг.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК ДокументРейс
		|		ПО новаОтчетВодителяЗадания.Ссылка.Рейс = ДокументРейс.РейсМестнойДоставки
		|ГДЕ
		|	новаОтчетВодителяЗадания.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.СостоянияЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
		
		Если  Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Рейс) Тогда
			Движение.ДатаДоставки =  ВыборкаДетальныеЗаписи.Заказ.Дата;
		КонецЕсли;	
		
	КонецЦикла;
	
	//Асеев 02.09.2022 (Задача № 4889)>>>
	Если РежимРазделенияФункционалаЛогистаИКассира Тогда
		//Асеев 02.09.2022 (Задача № 4889)<<<
		//Асеев 20.08.2021 (Задача № 4643)>>>
		Движения.СтатусыДвиженияПриложенныхДокументов.Очистить();
		Движения.СтатусыДвиженияПриложенныхДокументов.Записывать = Истина;
		//Асеев 20.08.2021 (Задача № 4643)<<<
	КонецЕсли;
	
	// --- Задача № 2991
	
	Для Каждого Тек Из Задания Цикл
		
		// Отключено в рамках задачи 2991
		//Нов = Движения.СостоянияЗаказов.Добавить();
		//Нов.Доставка = Тек.Задание.Ссылка;
		//
		//Най = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.Задание.Номер);
		//Нов.Заказ = Най.Ссылка;
		//
		//Нов.РезультатДоставки = Тек.РезультатДоставки;
		//Нов.ПричинаНеВыполнения = Тек.ПричинаНевыполнения;
		//Нов.ПричинаОтказа = Тек.ПричинаОтказа;
		//Нов.СторонаПретензий = Тек.ПричинаОтказа.СторонаПретензии;
		//
		//// но такая логика не подходит для закрытия
		//// МАС - 11.07.2017 - №1322 --->> 
		////Нов.Период = Рейс.Дата;
		////Нов.Период = Дата;
		//// <<--- МАС 
		////возвращаем Нов.Период = Дата;
		//
		//Нов.Период = Дата;
		//// но такая логика не подходит для закрытия
		//
		//
		//
		//Нов.ДатаПереноса = Тек.ДатаПереноса;
		//// Михушкин --->> 
		////Нов.Экспедитор = ЭтотОбъект.Экспедитор;
		////Нов.Водитель   = ЭтотОбъект.Водитель;
		//// <<--- Михушкин 
		//
		//Нов.Инициатор = Тек.ИнициаторСостояния; //Задача № 2869
		// Отключено в рамках задачи 2991
		
		Струк = Новый Структура;
		Струк.Вставить("Доставка", Тек.Задание.Ссылка);
		
		Стат = РегистрыСведений.ОтсутствующиеНаСкладеДоставки.ПолучитьПоследнее(Дата, Струк).ОтсутствуетНаСкладе;
		
		Если Стат Тогда
			Нов = Движения.ОтсутствующиеНаСкладеДоставки.Добавить();
			Нов.Доставка = Тек.Задание.Ссылка;
			Нов.Период = Дата;
			Нов.ОтсутствуетНаСкладе = Ложь;
		КонецЕСли;	
		
		
		//Асеев 02.09.2022 (Задача № 4889)>>>
		Если РежимРазделенияФункционалаЛогистаИКассира Тогда
			//Асеев 02.09.2022 (Задача № 4889)<<<
			//Асеев 20.08.2021 (Задача № 4643)>>>
			Если Тек.ТребуетсяПодписаниеИВозвратБНДокументов Или Тек.ТребуетсяПодписаниеИВозвратСопрДокументов Тогда
				Если Тек.СопрДокументПоступил Тогда
					Движение = Движения.СтатусыДвиженияПриложенныхДокументов.Добавить();
					Движение.Период = Дата;
					Движение.Регион = ТерминалДоставки;
					Движение.Заказ = Тек.Заказ;
					Движение.ВидПриложенногоДокумента = Справочники.ВидыПриложенныхДокументов.СопроводительныеДокументы;
					Движение.Статус = Справочники.СтатусыДвиженияПриложенныхДокументов.ДокументыВозвращеныВТК;
				ИначеЕсли Тек.СопрДокументНеПоступил Тогда
					Движение = Движения.СтатусыДвиженияПриложенныхДокументов.Добавить();
					Движение.Период = Дата;
					Движение.Регион = ТерминалДоставки;
					Движение.Заказ = Тек.Заказ;
					Движение.ВидПриложенногоДокумента = Справочники.ВидыПриложенныхДокументов.СопроводительныеДокументы;
					Движение.Статус = Справочники.СтатусыДвиженияПриложенныхДокументов.ДокументыНеВозвращеныВТК;
				КонецЕсли;
			КонецЕсли;
			//Асеев 20.08.2021 (Задача № 4643)<<<	
		КонецЕсли;
		
    КонецЦикла;
    
    
	
	ЗаписатьПутевойЛист(РежимЗаписиДокумента.Проведение);
	Если Не Отказ Тогда
		УчетЗарплаты();
		//ЛогированиеСтатусов();
		//ЗаписатьАдресаВИсторию();
		
		//Асеев 24.09.2020 (Задача № 4271)>>>
		//Если Транспорт <> Справочники.новаТранспорт.НайтиПоКоду("000524")//KIA В 062 НК 777
		//	И Транспорт <> Справочники.новаТранспорт.НайтиПоКоду("000233")//Тойота С 876 ТР 197
		//	Тогда
		//	ЗаписьСкладскихСтатусов();
		//КонецЕсли;
		//Асеев 24.09.2020 (Задача № 4271)<<<
		
		//ПодготовкаЗаказовНаВторуюОчередь();
        //+++++Серегин М.В. 06.11.2015 14:59:16 
        ДвиженияСтатусыДоговоров();
        //-----Серегин М.В. 06.11.2015 14:59:18 
        ДвиженияСостоянияЗаказовРасширенный();
		
		// Якурнов 09.10.2018 14:50:09 Перенесено в ЗакрытиеЗаказов и модуль ОЗОНа
		//Отказ = ВыполнитьОбменДаннымиOZON();
	КонецЕсли;
	
	
	// Михушкин --->> 		
	//АктуализироватьДанныеПредварительноЗакрытыхЗаказов();
	АктуализироватьДанныеПредварительноЗакрытыхЗаказов_Новое(ИзменятьДатыДоставки);
	// <<--- Михушкин 
	
	Если Не Отказ Тогда
		ЗакрытьПредварительныеЗакрытия();
	КонецЕсли;	
	
	//+++ БАО 02.06.2017 №958 
	Если ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж Или ТерминалДоставки = Справочники.РегиональныеТерминалы.ПустаяСсылка() Тогда
	//--- БАО 02.06.2017 №958  
	
		//+++ БАО 25.05.2017 №894
		ОбработкаСобытийИУведомленийСервер.ОбработкаСобытийИУведомлений_ПроведениеДокумента(Ссылка, Отказ);
		//--- БАО 25.05.2017 №894
	
	//+++ БАО 02.06.2017 №958 
	КонецЕсли;
	//--- БАО 02.06.2017 №958  
	
	ДвижениеПоСтатусамПредварительногоЗакрытияРейсов();
	
	
	
	Если ЗначениеЗаполнено(РезРейс.Ссылка) Тогда
		Событие = Справочники.СобытияКонтроляВремени.ЗакрытиеРейсаЛогист;
		УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, РезРейс.Ссылка, Истина);
	КонецеСли;	
	
	//CeHbKA #4101 28.07.2020
	ДанныеПоЗаказам = ВыполнитьДвиженияПоРСзпИсходныеДанныеРасчетаЗППоЗаказам();
	//CeHbKA #4101 28.07.2020
	
	//Асеев 25.01.2024 (Задача № 5217)>>>
	КоличествоЗаказовВыполняемости = ВыполнитьДвиженияПоРСКоличествоЗаказовРасчетПроцентаВыполняемости();
	ДанныеПоЗаказам.Вставить("КоличествоЗаказовВыполняемости", КоличествоЗаказовВыполняемости);
	//Асеев 25.01.2024 (Задача № 5217)<<<
	
	//Асеев 06.03.2023 (Задача № 5001)>>>
	ВыполнитьДвиженияПоРСзпИсходныеДанныеРасчетаЗППоРейсам(ДанныеПоЗаказам);
	//Асеев 06.03.2023 (Задача № 5001)<<<

	//Асеев 06.06.2023 (Задача № 5051)>>>
	ВыполнитьДвиженияПоРСзпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления();
	//Асеев 06.06.2023 (Задача № 5051)<<<
	
	//Асеев 23.05.2023 (Задача № 5047)>>>
	ВыполнитьДвиженияПоРСзпИсходныеДанныеРасчетаЗПЧасы();
	//Асеев 23.05.2023 (Задача № 5047)<<<

	//Асеев 21.09.2023 (Задача № 5125)>>>
	Движения.эк_ЗатратыЗаработнаяПлата.Записывать = Истина;
	Движения.эк_ЗатратыЗаработнаяПлата.Очистить();
	
	РегистрыСведений.эк_ЗатратыЗаработнаяПлата.ЗаполнитьДвижения(Движения.эк_ЗатратыЗаработнаяПлата, Движения.зпИсходныеДанныеРасчетаЗППоЗаказам);
	//Асеев 21.09.2023 (Задача № 5125)<<<
	
	//Асеев 27.09.2023 (Задача № 5129)>>>
	РегистрыСведений.эк_ЗатратыЗаработнаяПлата.РаспределитьЧасы(Движения.эк_ЗатратыЗаработнаяПлата, Движения.зпИсходныеДанныеРасчетаЗПЧасы, Движения.зпИсходныеДанныеРасчетаЗППоЗаказам);
	
	РегистрыСведений.эк_ЗатратыЗаработнаяПлата.РаспределитьДопНачисленияРейсов(Движения.эк_ЗатратыЗаработнаяПлата, Движения.зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления, Движения.зпИсходныеДанныеРасчетаЗППоЗаказам);
	//Асеев 27.09.2023 (Задача № 5129)<<<
	
	//Асеев 03.11.2023 (Задача № 5161)>>>
	ВыполнитьДвиженияПоРСэкУчетПроизводственныхОпераций();
	//Асеев 03.11.2023 (Задача № 5161)<<<
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Мас = Задания.ВыгрузитьКолонку("Задание");
	ЗапросДатаПозже = Новый Запрос("ВЫБРАТЬ
	|	ДатыДоставок.Период,
	|	ДатыДоставок.Регистратор,
	|	ДатыДоставок.НомерСтроки,
	|	ДатыДоставок.Активность,
	|	ДатыДоставок.Доставка,
	|	ДатыДоставок.Заказ,
	|	ДатыДоставок.ПричинаИзмененияДаты,
	|	ДатыДоставок.ПричинаИзмененияДатыСпр,
	|	ДатыДоставок.ДатаДоставки
	|ИЗ
	|	РегистрСведений.ДатыДоставок КАК ДатыДоставок
	|ГДЕ
	|	ДатыДоставок.Период >= &Дата
	|	И ДатыДоставок.Заказ В (&Мас)
	|	И ДатыДоставок.Регистратор <> &Регистратор");
	ЗапросДатаПозже.УстановитьПараметр("Дата", Дата);
	ЗапросДатаПозже.УстановитьПараметр("Мас", Мас);
	ЗапросДатаПозже.УстановитьПараметр("Регистратор", Ссылка);
	Рез = ЗапросДатаПозже.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	ЗаписатьПутевойЛист(РежимЗаписиДокумента.ОтменаПроведения);
	Если Не Отказ Тогда
		ОткатитьДатуДоставки();
	КонецеСли;	
КонецПроцедуры

Процедура ЗаписатьПутевойЛист(РежимЗаписи) Экспорт
	
	Перем ПутевойЛистОбъект;
	#Если Клиент Тогда
	Форма = ЭтотОбъект.ПолучитьФорму();
	Если Форма.Открыта() Тогда
		кзПутевойЛист = новаУчетГСМ.ПолучитьКлючЗначениеПутевойЛистИзРасширенияФормы(Форма);
		Если кзПутевойЛист<>Неопределено Тогда
			ПутевойЛистОбъект = кзПутевойЛист.Значение;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	Если ПутевойЛистОбъект = Неопределено И не Рейс.ПутевойЛист.Пустая() Тогда
		ПутевойЛистОбъект = Рейс.ПутевойЛист.ПолучитьОбъект();
	КонецЕсли;
	Если ПутевойЛистОбъект <> Неопределено Тогда
		ПутевойЛистОбъект.Записать(РежимЗаписи);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСписокТоваровДоставки(Доставка)
	Запрос = Новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", Доставка.Номер);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	//ИмяТабличнойЧасти = "Задания";

	//// Укажем, что надо проверить:
	//СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения");   // Сумма

	//// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	//СтруктураОбязательныхПолей.Вставить("Склад");

	//Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
	//	СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	//КонецЕсли;

	//Если УчитыватьНДС Тогда
	//	СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	//КонецЕсли;
	//Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	// ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
	//	СтруктураОбязательныхПолей.Вставить("Качество");
	//КонецЕсли;

	//ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	//УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	//// Складов с видом НТТ здесь быть не должно.
	//УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");

	//// Вызовем общую процедуру для проверки проверки.
	//ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры

//Асеев 20.02.2024 (Задача № 5237)>>>
Процедура ПроверитьЗоныДоставкиЗП()
	
	ПустаяЗона = Справочники.зпЗоныДоставки.ПустаяСсылка();
	СтруктураЗона = Новый Структура("ЗонаДоставкиЗП", ПустаяЗона);
	
	СтрокиЗаказы = Задания.НайтиСтроки(СтруктураЗона);
	СтрокиЗаборы = Заборы.НайтиСтроки(СтруктураЗона);
	
	Если Не (СтрокиЗаказы.Количество() Или СтрокиЗаборы.Количество()) Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Задания.Выгрузить(СтрокиЗаказы, "Заказ").ВыгрузитьКолонку("Заказ");
	Для Каждого СтрокаЗаказа Из СтрокиЗаборы Цикл
		МассивЗаказов.Добавить(СтрокаЗаказа.Забор);
	КонецЦикла;
	
	СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьСоответствиеЗаказовИЗон(МассивЗаказов);
	Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда
		Для Каждого СтрокаЗаказа Из СтрокиЗаказы Цикл
			СтрокаЗаказа.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов[СтрокаЗаказа.Заказ];
		КонецЦикла;
		Для Каждого СтрокаЗаказа Из СтрокиЗаборы Цикл
			СтрокаЗаказа.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов[СтрокаЗаказа.Забор];
		КонецЦикла;
	КонецЕсли;
	
	СтрокиЗаказы = Задания.НайтиСтроки(СтруктураЗона);
	СтрокиЗаборы = Заборы.НайтиСтроки(СтруктураЗона);
	
	Если Не (СтрокиЗаказы.Количество() Или СтрокиЗаборы.Количество()) Тогда
		Возврат;
	КонецЕсли;
	
	ТемаПисьма = "Отсутствует зона доставки ЗП в отчете водителя " + Номер;
	ТекстПисьма = Новый Массив;
	ТекстПисьма.Добавить(ТемаПисьма);
	Для Каждого СтрокаЗаказа Из СтрокиЗаказы Цикл
		ТекстПисьма.Добавить("Заказ " + СтрокаЗаказа.Заказ.Номер);
	КонецЦикла;
	Для Каждого СтрокаЗаказа Из СтрокиЗаборы Цикл
		ТекстПисьма.Добавить("Забор " + СтрокаЗаказа.Забор.Номер);
	КонецЦикла;
	ТекстПисьма.Добавить("");
	ТекстПисьма.Добавить(ТекущаяДата());
	
	ТекстПисьма = СтрСоединить(ТекстПисьма, Символы.ПС);
	
	МассивПолучателей = Новый Массив;
	МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
	МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	
	lem.ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры
//Асеев 20.02.2024 (Задача № 5237)<<<

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//+Степанов
	 Если РежимЗаписи <> РежимЗаписиДокумента.Запись
			И РегистрыСведений.КонтрольВремени.ВыполняетсяСобытиеМаршрутизации(ТерминалДоставки) Тогда
		Сообщить("Выполняется событие маршрутизации! Документы закрыты для изменения!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//-Степанов
	
	//Асеев 25.12.2023 (Задача № 5193)>>>
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если РегистрыСведений.КонтрольВремени.ПаузаОтФиксацииМаршрутизации(ТерминалДоставки) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Асеев 25.12.2023 (Задача № 5193)<<<
	
	Если ЭтоНовый() Тогда
		ОбновлятьЗаказыВАдминке = Истина;
	КонецеСли;
	
	
    ОбходитьПроверки = Ложь;
	Если ДополнительныеСвойства.Свойство("ОбходПроверок")  Тогда
		ОбходитьПроверки = Истина;
	КонецЕсли;	

	
	Если Не ОбходитьПроверки Тогда
		//+++ БАО 08.06.2017 №1024 
		//Отказ = РейсЗакрыт;
		Отказ = baoВызовСервера.РейсЗакрыт(Ссылка);
		
		//--- БАО 08.06.2017 №1024 
		
		Если Отказ Тогда
			Сообщить("Рейс Закрыт");
			Возврат;
		КонецеСли;	
		
		Если Ozon_ДанныеВыгружены Тогда
			Сообщить("Ozon_ДанныеВыгружены");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецеСли;
	
	//Асеев 20.02.2024 (Задача № 5237)>>>
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьЗоныДоставкиЗП();
	КонецЕсли;
	//Асеев 20.02.2024 (Задача № 5237)<<<
	
	// МАС - 14.12.2017 - № --->> 
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПредварительноеЗакрытиеРейса.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	                      |ГДЕ
	                      |	ПредварительноеЗакрытиеРейса.ОтчетВодителя = &ОтчетВодителя
	                      |	И ПредварительноеЗакрытиеРейса.Проведен");
	Запрос.УстановитьПараметр("ОтчетВодителя", ЭтотОбъект.Ссылка);
	Выб = Запрос.Выполнить();
	Если Выб.Пустой() Тогда
		ЭтотОбъект.БылоПредварительноеЗакрытие = Ложь;
	Иначе	
	    ЭтотОбъект.БылоПредварительноеЗакрытие = Истина;
	КонецЕсли;
	// <<--- МАС 
		
	
	Если Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		// проверка на наличие другого проведенного документа по рейсу
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	новаОтчетВодителя.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.новаОтчетВодителя КАК новаОтчетВодителя
		                      |ГДЕ
		                      |	новаОтчетВодителя.Рейс = &Рейс
		                      |	И новаОтчетВодителя.Ссылка <> &Ссылка
		                      |	И новаОтчетВодителя.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("Рейс", Рейс);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Рез = Запрос.Выполнить().Выбрать();
			
		Если Рез.Следующий() И ЗначениеЗаполнено(Рез.Ссылка) Тогда	
			#Если Клиент Тогда
				ПоказатьПредупреждение(, "По рейсу " + Рейс + " уже существует документ Отчет Водителя");
			#КонецЕсли
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецеСли;
	
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого Тек Из Задания Цикл
			Если Тек.РезультатДоставки.Пустая() Тогда
				Отказ = Истина;
				//#Если Клиент Тогда
				//+++ БАО 14.08.2017 №
				//---	Сообщить("Нет данных по заказу " + Тек.Заказ, СтатусСообщения.ОченьВажное);
					Сообщить("Нет данных по заданию " + Тек.Задание, СтатусСообщения.ОченьВажное);
				//--- БАО 14.08.2017 №	
				//#КонецЕсли	
				Возврат;
			КонецеСли;	
			
			Если Не Тек.РезультатДоставки.Пустая() Тогда
				Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена Тогда
					Если Не Тек.ПричинаНевыполнения.Пустая() Тогда
						Отказ = Истина;
						//#Если Клиент Тогда
						//+++ БАО 14.08.2017 №
						//---Сообщить("Заказ выполнен, при этом указана причина невыполнения: " + Тек.Заказ, СтатусСообщения.ОченьВажное);
						Сообщить("Заказ выполнен, при этом указана причина невыполнения: " + Тек.Задание, СтатусСообщения.ОченьВажное);
						//--- БАО 14.08.2017 №
						//#КонецЕсли	
					КонецеСли;	
				КонецеСли;	
				
				Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
					Если Тек.ПричинаНевыполнения.Пустая() Тогда
						Отказ = Истина;
						//#Если Клиент Тогда
						//+++ БАО 14.08.2017 №
						//----Сообщить("Заказ не выполнен, при этом не указана причина невыполнения: " + Тек.Заказ, СтатусСообщения.ОченьВажное);
						Сообщить("Заказ не выполнен, при этом не указана причина невыполнения: " + Тек.Задание, СтатусСообщения.ОченьВажное);
						//--- БАО 14.08.2017 №
						//#КонецЕсли	
					КонецеСли;	
				КонецеСли;	
			КонецеСли;	
		КонецЦикла;
		
		
		
		
		
		
		
		//Для Каждого Тек Из Задания Цикл
		//	Тек.АдресПослеТекст = СокрЛП(Тек.АдресПосле.Адрес.Наименование);
		//КонецЦикла;
		
		
		
		
		
		
        //+++++Серегин М.В. 15.03.2016 14:53:06 
		Для каждого Стр Из Заборы Цикл
			
			//+++ БАО 08.06.2017 №1020
			////Если Стр.ОбъемныйБрейкПоДаннымЭкипажа.Пустая() Тогда
			//Если Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена И Стр.ОбъемныйБрейкПоДаннымЭкипажа.Пустая() Тогда
			////--- БАО 08.06.2017 №1020	
			//	Сообщить("Не заполнен Объемный Брейк по забру:" + Строка(Стр.Забор));
			//	Отказ = Истина;
			//	Возврат;
			//КонецЕсли;
			// 
	
			Если Стр.РезультатДоставки.Пустая() Тогда
				
				//Сообщить("РезультатДоставки.Пустая " + Строка(Стр.НомерСтроки));
				Сообщить("По забору не указан результат доставки: " + СокрЛП(Стр.Забор.Номер), СтатусСообщения.ОченьВажное);
				Отказ = Истина;
				Возврат;
			КонецеСли;	
			
			Если Не Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена И Стр.ПричинаОтказа.Пустая() Тогда
				//#Если Клиент Тогда
					Сообщить("Забор не выполнен, при этом не указана причина отказа/переноса: " + Стр.Забор, СтатусСообщения.ОченьВажное);
				//#КонецЕсли	
				
				
				Отказ = Истина;
				Возврат;
			КонецеСли;	
			
        КонецЦикла;
        //-----Серегин М.В. 15.03.2016 14:53:08 
		
		//+Степанов Убрал запрос в цикле и ошибку при установке параметров.
		// Михушкин --->> 	
		//раскомментировали проверку, по письму Тумакова Чт 18.07.2019 14:40
		//Для каждого Тек Из Задания Цикл			
		//	Если Тек.ПричинаОтказа = Справочники.ПричиныОтказаПереноса.НайтиПоНаименованию("Неверный адрес") ИЛИ Тек.ПричинаОтказа = Справочники.ПричиныОтказаПереноса.НайтиПоНаименованию("Не верный адрес") ИЛИ Тек.ПричинаОтказа = Справочники.ПричиныОтказаПереноса.НайтиПоНаименованию("Смена адреса") Тогда
		//						
		//		Запрос = Новый Запрос("ВЫБРАТЬ
		//		                      |	ИсторияСменыАдреса.Задание,
		//		                      |	ИсторияСменыАдреса.АдресДо,
		//		                      |	ИсторияСменыАдреса.АдресПосле,
		//		                      |	ИсторияСменыАдреса.ТочкаДо,
		//		                      |	ИсторияСменыАдреса.ТочкаПосле
		//		                      |ИЗ
		//		                      |	РегистрСведений.ИсторияСменыАдреса КАК ИсторияСменыАдреса
		//		                      |ГДЕ
		//		                      |	ИсторияСменыАдреса.Задание = &Задание
		//		                      |	И ИсторияСменыАдреса.ИсточникИзменений = &ИсточникИзменений"); 
		//		Запрос.УстановитьПараметр("ИсточникИзменений", ?(ЭтоНовый(), ЭтотОбъект.ПолучитьСсылкуНового(), ЭтотОбъект.Ссылка));
		//		Запрос.УстановитьПараметр("Задание", Тек.Задание);
		//		
		//		Если Запрос.Выполнить().Пустой() Тогда			
		//			//#Если Клиент Тогда
		//				Сообщить("Для заказа №" + СокрЛП(Тек.Задание.Номер) + " не установлен новый адрес! (Причина отказа: " + Тек.ПричинаОтказа + ")");
		//			//#КонецЕсли						
		//			Отказ = Истина;
		//			Возврат;
		//		КонецЕсли;						
		//	КонецЕсли;	
		//	
		//КонецЦикла;
		
		МассивПричинОтказаПереноса = Новый Массив;
		Причина1 = Справочники.ПричиныОтказаПереноса.НайтиПоНаименованию("Неверный адрес");
		Если ЗначениеЗаполнено(Причина1) Тогда
			МассивПричинОтказаПереноса.Добавить(Причина1);
		КонецЕсли;	
		Причина2 = Справочники.ПричиныОтказаПереноса.НайтиПоНаименованию("Не верный адрес");
		Если ЗначениеЗаполнено(Причина2) Тогда
			МассивПричинОтказаПереноса.Добавить(Причина2);
		КонецЕсли;
		Причина3 = Справочники.ПричиныОтказаПереноса.НайтиПоНаименованию("Смена адреса");
		Если ЗначениеЗаполнено(Причина3) Тогда
			МассивПричинОтказаПереноса.Добавить(Причина3);
		КонецЕсли;
		Причина4 = Справочники.ПричиныОтказаПереноса.НайтиПоКоду("00000000020");
		Если ЗначениеЗаполнено(Причина4) Тогда
			МассивПричинОтказаПереноса.Добавить(Причина4);
		КонецЕсли;

		ТаблицаЗаданий = Задания.Выгрузить(,"Задание,ПричинаОтказа");
		ТаблицаЗаданий.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("ДокументСсылка.новаОтчетВодителя"));
		ТаблицаЗаданий.ЗаполнитьЗначения(?(ЭтоНовый(), ЭтотОбъект.ПолучитьСсылкуНового(), ЭтотОбъект.Ссылка),"Ссылка");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Задания.Задание КАК Задание,
		               |	Задания.Ссылка КАК Ссылка,
		               |	Задания.ПричинаОтказа КАК ПричинаОтказа
		               |ПОМЕСТИТЬ втЗадания
		               |ИЗ
		               |	&Задания КАК Задания
		               |ГДЕ
		               |	Задания.ПричинаОтказа В(&ПричиныОтказа)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втЗадания.Задание КАК Задание,
		               |	ИсторияСменыАдреса.АдресПосле КАК АдресПосле,
		               |	втЗадания.ПричинаОтказа КАК ПричинаОтказа
		               |ИЗ
		               |	втЗадания КАК втЗадания
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСменыАдреса КАК ИсторияСменыАдреса
		               |		ПО втЗадания.Задание = ИсторияСменыАдреса.Задание
		               |			И втЗадания.Ссылка = ИсторияСменыАдреса.ИсточникИзменений";
		Запрос.УстановитьПараметр("Задания",ТаблицаЗаданий);
		Запрос.УстановитьПараметр("ПричиныОтказа",МассивПричинОтказаПереноса);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.АдресПосле) Тогда
				Сообщить("Для заказа №" + СокрЛП(Выборка.Задание.Номер) + " не установлен новый адрес! (Причина отказа: " + Строка(Выборка.ПричинаОтказа) + ")");	
				Отказ = Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		// <<--- Михушкин         ----------------здесь попытка сделать задачу по поиску макс. брейка
		//Для каждого Стр Из Заборы Цикл
		//	НайСтр = ДанныеМобильногоПриложения.Найти(Стр.Забор);
		//	//Если НайСтр = Неопределено Тогда
		//		БрейкТЧЗаб = Стр.ОбъемныйБрейкПоДаннымЭкипажа;
		//		Если Стр.ОбъемЗабораПоДаннымПартнера > БрейкТЧЗаб.ОбъемДо ИЛИ Стр.ОбъемЗабораПоДаннымПартнера < БрейкТЧЗаб.ОбъемОт Тогда
		//			БрейкИзЗпроса = ПолучитьБрейкСогласноОбъемуПартнера(Стр.Забор, Стр.ОбъемЗабораПоДаннымПартнера);	
		//		КонецЕсли;
		//		Если БрейкИзЗпроса = Неопределено Тогда
		//			БрейкИзЗпроса = БрейкТЧЗаб;	
		//		КонецЕсли;
		//		may.ВыгрузкаДанныхЗабораВАдминкуОбщее(БрейкИзЗпроса, Стр.Забор);	
		//	//КонецЕсли;
		//КонецЦикла;             ----------------здесь попытка сделать задачу по поиску макс. брейка

		
		//+++ БАО 22.05.2017 №858
		
		
		//Для каждого Стр Из Заборы Цикл
		//	НайСтр = ДанныеМобильногоПриложения.Найти(Стр.Забор);
		//	Если НайСтр = Неопределено Тогда
		//		may.ВыгрузкаДанныхЗабораВАдминкуОбщее(Стр.ОбъемныйБрейкПоДаннымЭкипажа, Стр.Забор);	
		//	КонецЕсли;
		
		//КонецЦикла;
		
		Для каждого Стр Из Заборы Цикл
			НайСтр = ДанныеМобильногоПриложения.Найти(Стр.Забор);
			//Если НайСтр = Неопределено Тогда
				БрейкТЧЗаб = Стр.ОбъемныйБрейкПоДаннымЭкипажа;
				БрейкИзЗпроса = Неопределено;
				Если Стр.ОбъемЗабораПоДаннымПартнера <> 0 И
					Стр.ОбъемЗабораПоДаннымПартнера > БрейкТЧЗаб.ОбъемДо   Тогда
					БрейкИзЗпроса = ПолучитьБрейкСогласноОбъемуПартнера(Стр.Забор, Стр.ОбъемЗабораПоДаннымПартнера);	
				КонецЕсли;
				Если БрейкИзЗпроса = Неопределено Тогда
					БрейкИзЗпроса = БрейкТЧЗаб;	
				КонецЕсли;
				may.ВыгрузкаДанныхЗабораВАдминкуОбщее(БрейкИзЗпроса, Стр.Забор);	
			//КонецЕсли;
		КонецЦикла;  		
		
		//--- БАО 22.05.2017 №858
		
	КонецеСли;
	

	Если НЕ Отказ И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда	
		Дата = ТекущаяДата();	
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьБрейкСогласноОбъемуПартнера(Забор,ОбъемФ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъемныеБрейки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъемныеБрейки КАК ОбъемныеБрейки
		|ГДЕ
		|	ОбъемныеБрейки.Владелец = &Владелец
		|	И ОбъемныеБрейки.ОбъемОт <= &Объем
		|	И ОбъемныеБрейки.ОбъемДо >= &Объем";

	Запрос.УстановитьПараметр("Объем", ОбъемФ);
	Запрос.УстановитьПараметр("Владелец", Забор.ТарифнаяСетка);

	РезМ = Запрос.Выполнить().Выбрать();
	Пока РезМ.Следующий() Цикл
		Возврат РезМ.Ссылка;
	КонецЦикла;		
	Возврат Неопределено;
КонецФункции

Процедура УстановитьДатуВАдминке(НомерЗ, ДатаЗ)
	Попытка
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
	Исключение
		НормальныйХодВыполнения = Ложь;
		Возврат;
	КонецПопытки;
	
	// ++Задача № 3381
	
	//Ткст = "
	//|UPDATE _order
	//|SET DeliveryDate = '" + Евген.ДатаВSQL(ДатаЗ, Ложь) + "', whoLastChange = '"+ПараметрыСеанса.ТекущийПользователь+"'
	//| WHERE orderId = " + Формат(НомерЗ, "ЧГ=") + "
	//|EXEC mp_saveOrderHistory " + Формат(НомерЗ, "ЧГ=");
	//ЗапросКИнтернетМагазину(Ткст, ПодключениеКМагазину);
	
	Если УдаленноеЗакрытие Тогда
		ИмяПользователяСменыДаты = "Удаленное закрытие";
	Иначе
		ИмяПользователяСменыДаты = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
	КонецеСли;
	
	ПараметрыЗаказа = Новый Структура("OrderId, DeliveryDate, Who",
	Число(НомерЗ), ДатаЗ, ИмяПользователяСменыДаты);
	
	ПараметрыЗапроса = новый Массив;
	ПараметрыЗапроса.Добавить(ПараметрыЗаказа);
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		//++Переварюха В.В.
		//ФайлДляКонтроля = "D:\tmp\SetOrdersDeliveryDate_" + СокрЛП(НомерЗ) + ".json";  // закоментировал
		ФайлДляКонтроля = ПолучитьИмяВременногоФайла(".json");
		//--Переварюха В.В.
		ТолькоСохранитьФайл = Ложь;
	Иначе
		ФайлДляКонтроля = Неопределено;
		ТолькоСохранитьФайл = Ложь;
	КонецЕсли;
		
	РезультатОтправки = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(
	Перечисления.ВидыЗапросовWEBСервис.SetOrdersDeliveryDateResult,
	ПараметрыЗапроса,
	ФайлДляКонтроля, 
	ТолькоСохранитьФайл);
	
	// --Задача № 3381
	
    ////Серегин М.В. 30.07.2015 17:16:30 старый код
    //Ткст = "
    //|UPDATE _order
    //|SET carid = 0
    //| WHERE orderId = " + Формат(НомерЗ, "ЧГ=") + "
    //|EXEC mp_saveOrderHistory " + Формат(НомерЗ, "ЧГ=");
    //ЗапросКИнтернетМагазину(Ткст, ПодключениеКМагазину);
    ////Серегин М.В. 30.07.2015 17:16:37 новый
    Ткст = "
	|EXEC p1c_removeCarriageFromOrder " + Формат(НомерЗ, "ЧГ=") + "
	|EXEC mp_saveOrderHistory " + Формат(НомерЗ, "ЧГ=");
	ЗапросКИнтернетМагазину(Ткст, ПодключениеКМагазину);
    //Серегин М.В. 30.07.2015 17:16:39 
	
КонецПроцедуры	

Процедура ОткатитьДатуДоставки()
	
	МассивЗаказовДляОпределенияСмены = Новый Массив; //Задача № 3345
	
	Для Каждого Тек Из Задания Цикл
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена И (Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Или Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь) И ЗначениеЗаполнено(Тек.ДатаПереноса) Тогда
			
			ЗапросДатаПозже = Новый Запрос("ВЫБРАТЬ
			                               |	ДатыДоставок.Период,
			                               |	ДатыДоставок.Регистратор,
			                               |	ДатыДоставок.НомерСтроки,
			                               |	ДатыДоставок.Активность,
			                               |	ДатыДоставок.Доставка,
			                               |	ДатыДоставок.Заказ,
			                               |	ДатыДоставок.ПричинаИзмененияДаты,
			                               |	ДатыДоставок.ПричинаИзмененияДатыСпр,
			                               |	ДатыДоставок.ДатаДоставки
			                               |ИЗ
			                               |	РегистрСведений.ДатыДоставок КАК ДатыДоставок
			                               |ГДЕ
			                               |	ДатыДоставок.Период >= &Дата
			                               |	И ДатыДоставок.Заказ = &Заказ
			                               |	И ДатыДоставок.Регистратор <> &Регистратор");
			ЗапросДатаПозже.УстановитьПараметр("Дата", Дата);
			ЗапросДатаПозже.УстановитьПараметр("Заказ", Тек.Задание);
			ЗапросДатаПозже.УстановитьПараметр("Регистратор", Ссылка);
			Рез = ЗапросДатаПозже.Выполнить();
			
			Если НЕ Рез.Пустой() Тогда
				Продолжить;		
			КонецЕсли;
			
			
			
			Стр = Новый Структура;
			Стр.Вставить("Доставка", Тек.Задание.Ссылка);
			НайПред = РегистрыСведений.ДатыДоставок.ПолучитьПоследнее(Дата - 1, Стр);
			Если ЗначениеЗаполнено(НайПред.ДатаДоставки) Тогда
				Д = Тек.Задание.ПолучитьОбъект();
				Д.Дата = НайПред.ДатаДоставки;  
				
				ЧН = Час(Д.ВремяОтправленияС);
				ЧК = Час(Д.ВремяОтправленияПо);
				
				МН = Минута(Д.ВремяОтправленияС);
				МК = Минута(Д.ВремяОтправленияПо);
				
				ЧН_ = Час(Д.ВремяПрибытияС);
				ЧК_ = Час(Д.ВремяПрибытияПо);
				
				МН_ = Минута(Д.ВремяПрибытияС);
				МК_ = Минута(Д.ВремяПрибытияПо);
				
				
				Д.ВремяОтправленияС = Дата(Формат(Год(Тек.ДатаПереноса), "ЧГ=") + Формат(Месяц(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
				Д.ВремяОтправленияПо = Дата(Формат(Год(Тек.ДатаПереноса), "ЧГ=") + Формат(Месяц(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
				
				Д.ВремяПрибытияС = Дата(Формат(Год(Тек.ДатаПереноса), "ЧГ=") + Формат(Месяц(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
				Д.ВремяПрибытияПо = Дата(Формат(Год(Тек.ДатаПереноса), "ЧГ=") + Формат(Месяц(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
				
				Д.Записать();
				
				//Струк = Новый Структура;
				//Струк.Вставить("Доставка", Д.Ссылка);
				//Най = РегистрыСведений.ОтсутствующиеНаСкладеДоставки.ПолучитьПоследнее(Дата-1, Струк);
				//Если ЗначениеЗаполнено(най.ОтсутствуетНаСкладе) Тогда
				//	Наб = РегистрыСведений.ОтсутствующиеНаСкладеДоставки.СоздатьНаборЗаписей();
				//	Наб.Отбор.Доставка.Установить(Д.Ссылка);
				//	Наб.Отбор.Период.Установить(Дата);
				//	Наб.Прочитать();
				//	Если наб.Количество() <> 0 тогда
				//		Наб.Удалить(Наб[0]);
				//	КонецЕСли;	
				//КонецеСлИ;	
				
				Д_ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Д.Номер); // , Д.Дата
				Если Не Д_.Пустая() Тогда
					Док = Д_.ПолучитьОбъект();
					Док.Дата = НайПред.ДатаДоставки;
					УстановитьДатуВАдминке(Д.Номер, НайПред.ДатаДоставки);
					Док.Записать(РежимЗаписиДокумента.Запись);
					Если Док.Проведен Тогда
						Док.Записать(РежимЗаписиДокумента.Проведение);
					КонецеСли;	
					
					МассивЗаказовДляОпределенияСмены.Добавить(Док.Ссылка); //Задача № 3345
					
				КонецеСли;	
				
				Д_ = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Д.Номер, Д.Дата); // , Д.Дата
				Если Не Д_.Пустая() Тогда
					Док = Д_.ПолучитьОбъект();
					Док.Дата = НайПред.ДатаДоставки;
					Док.Записать(РежимЗаписиДокумента.Запись);
					Если Док.Проведен Тогда
						Док.Записать(РежимЗаписиДокумента.Проведение);
					КонецеСли;	
				КонецеСли;	
				
			КонецеСли;
		КонецеСли;
	КонецЦикла;	
	
	МаршрутизацияЗаказовСервер.УстановкаСменыДляЗаказов(МассивЗаказовДляОпределенияСмены); //Задача № 3345
	
КонецПроцедуры	

Процедура ИзменениеДатДоставок()
	
	МассивЗаказовДляОпределенияСмены = Новый Массив; //Задача № 3345
	
	Для Каждого Тек Из Задания Цикл
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена И (Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Или Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь) И ЗначениеЗаполнено(Тек.ДатаПереноса) Тогда
			Нов = Движения.ДатыДоставок.Добавить();
			Нов.Доставка = Тек.Задание;
			Нов.ДатаДоставки = Тек.ДатаПереноса;
			Нов.Период = Дата;
			Д = Тек.Задание.ПолучитьОбъект();
			Д.Дата = Тек.ДатаПереноса;
			
			ЧН = Час(Д.ВремяОтправленияС);
			ЧК = Час(Д.ВремяОтправленияПо);
			
			МН = Минута(Д.ВремяОтправленияС);
			МК = Минута(Д.ВремяОтправленияПо);
			
			ЧН_ = Час(Д.ВремяПрибытияС);
			ЧК_ = Час(Д.ВремяПрибытияПо);
			
			МН_ = Минута(Д.ВремяПрибытияС);
			МК_ = Минута(Д.ВремяПрибытияПо);
			
			
			Д.ВремяОтправленияС = Дата(Формат(Год(Тек.ДатаПереноса), "ЧГ=") + Формат(Месяц(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
			Д.ВремяОтправленияПо = Дата(Формат(Год(Тек.ДатаПереноса), "ЧГ=") + Формат(Месяц(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
			
			Д.ВремяПрибытияС = Дата(Формат(Год(Тек.ДатаПереноса), "ЧГ=") + Формат(Месяц(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
			Д.ВремяПрибытияПо = Дата(Формат(Год(Тек.ДатаПереноса), "ЧГ=") + Формат(Месяц(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(Тек.ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
			
			Д.Записать();
			
			
			//Струк = Новый Структура;
			//Струк.Вставить("Доставка", Д.Ссылка);
			//Най = РегистрыСведений.ОтсутствующиеНаСкладеДоставки.ПолучитьПоследнее(Дата, Струк);
			//Если ЗначениеЗаполнено(най.ОтсутствуетНаСкладе) Тогда
			//	Наб = РегистрыСведений.ОтсутствующиеНаСкладеДоставки.СоздатьНаборЗаписей();
			//	Наб.Отбор.Доставка.Установить(Д.Ссылка);
			//	Наб.Отбор.Период.Установить(Дата);
			//	Наб.Прочитать();
			//	Если наб.Количество() <> 0 тогда
			//		Наб.Удалить(Наб[0]);
			//	КонецЕСли;	
			//	Нов = Наб.Добавить();
			//	Нов.Период = Дата;
			//	Нов.Доставка = Д.Ссылка;
			//	Нов.ОтсутствуетНаСкладе = Ложь;
			//	//Попытка
			//	Наб.Записать();
			////Исключение
			//	
			//	//КонецПопытки;
			//КонецеСлИ;	
			
			УстановитьДатуВАдминке(Д.Номер, Тек.ДатаПереноса);

			Д_ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Д.Номер);  // , Д.Дата
			Если Не Д_.Пустая() Тогда
				Док = Д_.ПолучитьОбъект();
				Док.Дата = Тек.ДатаПереноса;
				Док.Записать(РежимЗаписиДокумента.Запись);
				Если Док.Проведен Тогда
					Док.Записать(РежимЗаписиДокумента.Проведение);
				КонецеСли;	
				
				МассивЗаказовДляОпределенияСмены.Добавить(Док.Ссылка); //Задача № 3345
				
			КонецеСли;
			
			Д_ = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Д.Номер, Дата); // , Д.Дата
			Если Не Д_.Пустая() Тогда
				Док = Д_.ПолучитьОбъект();
				Док.Дата = Тек.ДатаПереноса;
				Док.Записать(РежимЗаписиДокумента.Запись);
				Если Док.Проведен Тогда
					Док.Записать(РежимЗаписиДокумента.Проведение);
				КонецеСли;	
			КонецеСли;
			
		КонецеСли;	
	КонецЦикла;
	
	МаршрутизацияЗаказовСервер.УстановкаСменыДляЗаказов(МассивЗаказовДляОпределенияСмены); //Задача № 3345
	
КонецПроцедуры	

//Асеев 02.06.2021 (Задача № 4587)>>>
Процедура ИзменениеДатыДоставкиЗаказаСБудущейДатойДоставки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("РейсМестнойДоставки", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредварительноеЗакрытиеРейсаЗаказы.Заказ КАК Заказ
	|ПОМЕСТИТЬ ВТ_ПредварительноЗакрытыеЗаказы
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПредварительноеЗакрытиеРейса.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	|	ГДЕ
	|		ПредварительноеЗакрытиеРейса.ОтчетВодителя = &Ссылка
	|		И ПредварительноеЗакрытиеРейса.Проведен
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ПредварительноеЗакрытиеРейса.Дата УБЫВ) КАК ВЗ_ПредварительноеЗакрытие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПредварительноеЗакрытиеРейса.Заказы КАК ПредварительноеЗакрытиеРейсаЗаказы
	|		ПО ВЗ_ПредварительноеЗакрытие.Ссылка = ПредварительноеЗакрытиеРейсаЗаказы.Ссылка
	|			И (ПредварительноеЗакрытиеРейсаЗаказы.ПредварительноеЗакрытие)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаОтчетВодителяЗадания.Заказ КАК Заказ,
	|	новаОтчетВодителяЗадания.Задание КАК Доставка,
	|	новаОтчетВодителяЗадания.Заказ.Дата КАК ДатаДоставкиСтарая,
	|	Рейс.ДатаРейса КАК ДатаДоставки,
	|	новаОтчетВодителяЗадания.Заказ.ТерминалДоставки КАК ТерминалДоставки,
	|	НастройкиУчетаОбщиеСрезПоследних.ПричинаОтказаПереносаПриВыполненииЗаказаСРанееПеренесеннойДатой КАК ПричинаОтказаПереноса
	|ИЗ
	|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (новаОтчетВодителяЗадания.Ссылка = &Ссылка)
	|			И (Рейс.РейсМестнойДоставки = &РейсМестнойДоставки)
	|			И (новаОтчетВодителяЗадания.РезультатДоставки В (ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.Выполнена), ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ВыполненаЧастично)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредварительноЗакрытыеЗаказы КАК ВТ_ПредварительноЗакрытыеЗаказы
	|		ПО новаОтчетВодителяЗадания.Заказ = ВТ_ПредварительноЗакрытыеЗаказы.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаОбщие.СрезПоследних КАК НастройкиУчетаОбщиеСрезПоследних
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВТ_ПредварительноЗакрытыеЗаказы.Заказ ЕСТЬ NULL
	|	И НАЧАЛОПЕРИОДА(новаОтчетВодителяЗадания.Заказ.Дата, ДЕНЬ) > Рейс.ДатаРейса";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//Сообщить("Отладка: " + Выборка.Заказ);
		Док = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.ДатаДоставки = Выборка.ДатаДоставки;
		Док.ДатаДоставкиСтарая = Выборка.ДатаДоставкиСтарая;
		Док.ПричинаИзмененияДаты = Перечисления.ПричиныИзмененияДатыДоставки.ВыполнениеЗаказаСПеренесеннойДатойДоставки;
		Док.Заказ = Выборка.Заказ;
		Док.Доставка = Выборка.Доставка;
		Док.КорректироватьДатуВАдминке = Истина;
		Док.ИнициаторСостояния = Перечисления.ИнициаторыСостояния.ТранспортнаяКомпания;
		Док.ПричинаОтказаПереноса = Выборка.ПричинаОтказаПереноса;
		Док.ТерминалОбработки = Выборка.ТерминалДоставки;
		Док.ОтчетВодителя = Ссылка;
		Док.Записать(РежимЗаписиДокумента.Запись);
		Док.Записать(РежимЗаписиДокумента.Проведение);
		//Сообщить("Отладка: " + Док);
	КонецЦикла;
	
КонецПроцедуры
//Асеев 02.06.2021 (Задача № 4587)<<<


Процедура ЗаполнитьЗаборы() 
	may.ЗаполнитьЗаборыНоваОтчетВодителя(Заборы, Рейс);    
КонецПроцедуры


 Процедура ПодтянутьДанныеМобильногоПриложения() Экспорт
	
	ЗаполнитьЗаборы();
	
	Задания.Очистить();
	
	//Асеев 20.08.2021 (Задача № 4643)>>>
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	РейсЗаказы.Ссылка КАК Ссылка,
	//                      |	РейсЗаказы.Заказ КАК Заказ,
	//                      |	РейсЗаказы.Вес КАК Вес,
	//                      |	РейсЗаказы.Заказ.Номер КАК Номер,
	//                      |	ТипыОплат.Ссылка КАК ТипОплаты,
	//                      |	РейсЗаказы.Заказ.ЭтоДоговор КАК ЭтоДоговор
	//                      |ПОМЕСТИТЬ ВТ
	//                      |ИЗ
	//                      |	Документ.Рейс.Заказы КАК РейсЗаказы
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	//                      |		ПО РейсЗаказы.Заказ.ТипОплаты = ТипыОплат.Код
	//                      |ГДЕ
	//                      |	РейсЗаказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	//                      |	И РейсЗаказы.УдаленИзРейса = ЛОЖЬ
	//                      |	И РейсЗаказы.Ссылка.РейсМестнойДоставки = &РейсМестнойДоставки
	//                      |
	//                      |ИНДЕКСИРОВАТЬ ПО
	//                      |	Номер
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ.Ссылка КАК Ссылка,
	//                      |	ВТ.Заказ КАК Заказ,
	//                      |	ВТ.Вес КАК Вес,
	//                      |	ВТ.Номер КАК Номер,
	//                      |	новаМестнаяДоставка.Ссылка КАК Задание,
	//                      |	ВТ.ТипОплаты КАК ТипОплаты,
	//                      |	новаМестнаяДоставка.ТочкаПрибытия КАК АдресПосле,
	//                      |	ВТ.ЭтоДоговор КАК ЭтоДоговор,
	//                      |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК АдресДо
	//                      |ИЗ
	//                      |	ВТ КАК ВТ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//                      |		ПО ВТ.Номер = новаМестнаяДоставка.Номер");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РейсЗаказы.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	РейсЗаказы.Вес КАК Вес,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	ТипыОплат.Ссылка КАК ТипОплаты,
	|	РеализацияТоваровУслуг.ЭтоДоговор КАК ЭтоДоговор,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (Рейс.РейсМестнойДоставки = &РейсМестнойДоставки)
	|			И (НЕ Рейс.ПометкаУдаления)
	|			И РейсЗаказы.Ссылка = Рейс.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	|			ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
	|		ПО (НЕ РейсЗаказы.УдаленИзРейса)
	|			И РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
	|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке
	|ПОМЕСТИТЬ ВТ_ПараметрыКонтрагентов
	|ИЗ
	|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
	|			,
	|			Контрагент В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.ВладелецТовара КАК ВладелецТовара
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ПараметрыКонтрагентовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Ссылка КАК Ссылка,
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВТ_Заказы.Вес КАК Вес,
	|	ВТ_Заказы.Номер КАК Номер,
	|	ВТ_Заказы.ТипОплаты КАК ТипОплаты,
	|	ВТ_Заказы.ЭтоДоговор КАК ЭтоДоговор,
	|	новаМестнаяДоставка.Ссылка КАК Задание,
	|	новаМестнаяДоставка.ТочкаПрибытия КАК АдресПосле,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК АдресДо,
	|	НЕ &РежимОбъединенияФункционалаЛогистаИКассира
	|		И ДополнительныеПараметрыЗаказа.ПодписаниеИВозвратСопрДокументов КАК ТребуетсяПодписаниеИВозвратСопрДокументов,
	|	НЕ &РежимОбъединенияФункционалаЛогистаИКассира
	|		И ВТ_Заказы.ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.БезналичныйРасчет)
	|		И НЕ ЕСТЬNULL(ВТ_ПараметрыКонтрагентов.ОтключитьПроверкуБНЗаказов, ЛОЖЬ) КАК ТребуетсяПодписаниеИВозвратБНДокументов,
	|	ДополнительныеПараметрыЗаказа.УровеньОбслуживанияЗаказа КАК УровеньОбслуживанияЗаказа,
	|	ВТ_ПараметрыКонтрагентов.СопроводительныеДокументыНаходятсяВКоробке КАК СопрДокументыВКоробке
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО ВТ_Заказы.Номер = новаМестнаяДоставка.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыКонтрагентов КАК ВТ_ПараметрыКонтрагентов
	|		ПО ВТ_Заказы.ВладелецТовара = ВТ_ПараметрыКонтрагентов.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ";
	//Асеев 20.08.2021 (Задача № 4643)<<<
	
	Запрос.УстановитьПараметр("РейсМестнойДоставки", Рейс);
	//Асеев 02.09.2022 (Задача № 4889)>>>
	Запрос.УстановитьПараметр("РежимОбъединенияФункционалаЛогистаИКассира", РежимОбъединенияФункционалаЛогистаИКассира);
	//Асеев 02.09.2022 (Задача № 4889)<<<
	// <<--- МАС
	
	//Геннадий #4101 16.03.2021 ->
	//Рез = Запрос.Выполнить().Выбрать();
	РезультатЗапроса = Запрос.Выполнить();
	Рез 			 = РезультатЗапроса.Выбрать();
	МассивЗаказов 	 = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Заказ");
	СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьСоответствиеЗаказовИЗон(МассивЗаказов);
	//Геннадий <-
	
	Пока Рез.Следующий() Цикл
		
		//Геннадий #4101 09.03.2021 ->
		//ЗаполнитьЗначенияСвойств(Задания.Добавить(), Рез);
		стрЗадания = Задания.Добавить();
		ЗаполнитьЗначенияСвойств(стрЗадания, Рез);
		
		Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда	                                       
			стрЗадания.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов.Получить(Рез.Заказ);	
		КонецЕсли;
		//Геннадий <-
	
	КонецЦикла;	
	
	Мас = Задания.ВыгрузитьКолонку("Задание");

	
	//Если Не Константы.ПриСозданииОтчетаВодителяУчитыватьДанныеМобильногоПриложения.Получить() Тогда
	//	Возврат;
	//КонецеСли;
    //Серегин М.В. 21.07.2015 18:20:47 еще один костыль (инициализаия типов оплат)
	//Для Каждого СтрЗадания Из Задания Цикл
	//    НайденаяРеализация = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(СтрЗадания.Задание.Номер);
	//    Если ЗначениеЗаполнено(НайденаяРеализация) Тогда 
	//        ТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(НайденаяРеализация.ТипОплаты);
	//    Иначе
	//        ТипОплаты = Справочники.ТипыОплат.ПустаяСсылка();
	//    КонецЕсли;
	//    СтрЗадания.ТипОплаты = ТипОплаты;    
	//КонецЦикла;
    //Серегин М.В. 21.07.2015 18:21:08 
	
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	ТипыОплат.Ссылка КАК ТипОплаты,
	//            |	новаОтчетВодителяЗадания.Задание.Ссылка КАК Задание
	//            |ИЗ
	//            |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |		ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслуг.Номер
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	//            |		ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
	//            |ГДЕ
	//            |	новаОтчетВодителяЗадания.Ссылка.Ссылка = &Док
	//            |
	//            |УПОРЯДОЧИТЬ ПО
	//            |	новаОтчетВодителяЗадания.НомерСтроки";
	//			
	//Зап.УстановитьПараметр("Док", Ссылка);	
	//Выб = Зап.Выполнить().Выбрать();
	//Пока Выб.Следующий() Цикл
	//	Най = Задания.Найти(Выб.задание);
	//	Если Най <> Неопределено Тогда
	//		Най.ТипОплаты = Выб.ТипОплаты;
	//	КонецеСли;	
	//КонецЦикла;	
	
	
		
	//Зап.Текст = "ВЫБРАТЬ
	//			|	ДанныеЗаказаВодителя.Ссылка КАК Док,
	//			|	ДанныеЗаказаВодителя.ВерсияДанных,
	//			|	ДанныеЗаказаВодителя.ПометкаУдаления,
	//			|	ДанныеЗаказаВодителя.Номер КАК Номер,
	//			|	ДанныеЗаказаВодителя.Дата,
	//			|	ДанныеЗаказаВодителя.Проведен,
	//			|	ДанныеЗаказаВодителя.Реализация,
	//			|	ДанныеЗаказаВодителя.Водитель,
	//			|	ДанныеЗаказаВодителя.Статус,
	//			|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
	//			|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
	//			|	ДанныеЗаказаВодителя.ДатаПереноса,
	//			|	ДанныеЗаказаВодителя.Транспорт,
	//			|	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	//			|		Ссылка,
	//			|		НомерСтроки,
	//			|		Номенклатура,
	//			|		КоличествоДоставлено
	//			|	),
	//			|	новаМестнаяДоставка.Ссылка КАК Доставка,
	//			|	ДанныеЗаказаВодителя.Реализация.Номер КАК НомерДоставки
	//			|ИЗ
	//			|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//			|		ПО ДанныеЗаказаВодителя.Реализация.Номер = новаМестнаяДоставка.Номер,
	//			|	Константа.ОсновнойТипПривязкиТелефонов КАК ОсновнойТипПривязкиТелефонов
	//			|ГДЕ
	//			|	ДанныеЗаказаВодителя.Дата МЕЖДУ &Дата И &ДатаОкончания
	//			|	И новаМестнаяДоставка.Ссылка В(&Мас)
	//			|	И ДанныеЗаказаВодителя.Проведен = ИСТИНА
	//			|	И ВЫБОР
	//			|			КОГДА ОсновнойТипПривязкиТелефонов.Значение = ЗНАЧЕНИЕ(перечисление.типыпривязкителефонов.ктранспорту)
	//			|					ИЛИ ОсновнойТипПривязкиТелефонов.Значение = ЗНАЧЕНИЕ(перечисление.типыпривязкителефонов.ПустаяСсылка)
	//			|				ТОГДА ДанныеЗаказаВодителя.Транспорт = &ВыбТранспорт
	//			|			ИНАЧЕ ВЫБОР
	//			|					КОГДА ОсновнойТипПривязкиТелефонов.Значение = ЗНАЧЕНИЕ(перечисление.типыпривязкителефонов.кводителю)
	//			|						ТОГДА ДанныеЗаказаВодителя.Водитель = &ВыбВодитель
	//			|					ИНАЧЕ ИСТИНА
	//			|				КОНЕЦ
	//			|		КОНЕЦ
	//			|
	//			|УПОРЯДОЧИТЬ ПО
	//			|	НомерДоставки,
	//			|	Номер";
	
	Зап = Новый Запрос;			
	Зап.Текст =
	"ВЫБРАТЬ
	|	ДанныеЗаказаВодителя.Ссылка КАК Док,
	|	ДанныеЗаказаВодителя.ВерсияДанных КАК ВерсияДанных,
	|	ДанныеЗаказаВодителя.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеЗаказаВодителя.Номер КАК Номер,
	|	ДанныеЗаказаВодителя.Дата КАК Дата,
	|	ДанныеЗаказаВодителя.ДатаДоставки КАК ДатаДоставки,
	|	ДанныеЗаказаВодителя.Проведен КАК Проведен,
	|	ДанныеЗаказаВодителя.Реализация КАК Реализация,
	|	ДанныеЗаказаВодителя.Водитель КАК Водитель,
	|	ДанныеЗаказаВодителя.Статус КАК Статус,
	|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки КАК ПричинаНеВыполненияДоставки,
	|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса КАК ПричинаОтказаПереноса,
	|	ДанныеЗаказаВодителя.ДатаПереноса КАК ДатаПереноса,
	|	ДанныеЗаказаВодителя.Транспорт КАК Транспорт,
	|	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		КоличествоДоставлено КАК КоличествоДоставлено
	|	) КАК ДоставленныеТовары,
	|	новаМестнаяДоставка.Ссылка КАК Доставка,
	|	ДанныеЗаказаВодителя.Реализация.Номер КАК НомерДоставки,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат,
	|	ДанныеЗаказаВодителя.ТипОплаты КАК ТипОплаты,
	|	ДанныеЗаказаВодителя.ТипЗаказа КАК ТипЗаказа,
	|	ДанныеЗаказаВодителя.Забор КАК Забор,
	|	ТипыОплат.Ссылка КАК ТипОплатыРеализация,
	|	ТипыОплат.Код КАК ТипОплатыРеализацияКод,
	|	ДанныеЗаказаВодителя.ВозвратНаДоставку КАК ВозвратНаДоставку
	|ИЗ
	|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО ДанныеЗаказаВодителя.Реализация.Номер = новаМестнаяДоставка.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ДанныеЗаказаВодителя.Реализация.Номер = ВозвратТоваровОтПокупателя.Номер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	|		ПО ДанныеЗаказаВодителя.Реализация.ТипОплаты = ТипыОплат.Код
	|ГДЕ
	|	ДанныеЗаказаВодителя.Рейс.РейсМестнойДоставки = &РейсМестнойДоставки
	|	И новаМестнаяДоставка.Ссылка В(&Мас)
	|	И ДанныеЗаказаВодителя.ПометкаУдаления = ЛОЖЬ
	|	И ДанныеЗаказаВодителя.ТипЗаказа <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЗаказаВодителя.Ссылка,
	|	ДанныеЗаказаВодителя.ВерсияДанных,
	|	ДанныеЗаказаВодителя.ПометкаУдаления,
	|	ДанныеЗаказаВодителя.Номер,
	|	ДанныеЗаказаВодителя.Дата,
	|	ДанныеЗаказаВодителя.ДатаДоставки,
	|	ДанныеЗаказаВодителя.Проведен,
	|	ДанныеЗаказаВодителя.Реализация,
	|	ДанныеЗаказаВодителя.Водитель,
	|	ДанныеЗаказаВодителя.Статус,
	|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
	|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
	|	ДанныеЗаказаВодителя.ДатаПереноса,
	|	ДанныеЗаказаВодителя.Транспорт,
	|	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		КоличествоДоставлено
	|	),
	|	NULL,
	|	ДанныеЗаказаВодителя.Реализация.Номер,
	|	NULL,
	|	ДанныеЗаказаВодителя.ТипОплаты,
	|	ДанныеЗаказаВодителя.ТипЗаказа,
	|	ДанныеЗаказаВодителя.Забор,
	|	NULL,
	|	NULL,
	|	ДанныеЗаказаВодителя.ВозвратНаДоставку
	|ИЗ
	|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	|ГДЕ
	|	ДанныеЗаказаВодителя.Рейс.РейсМестнойДоставки = &РейсМестнойДоставки
	|	И ДанныеЗаказаВодителя.ПометкаУдаления = ЛОЖЬ
	|	И ДанныеЗаказаВодителя.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реализация,
	|	Забор,
	|	ДатаДоставки,
	|	Дата,
	|	Док"; 
				
	//Зап.УстановитьПараметр("Дата", Рейс.ДатаНачала - 3600);			
	//Зап.УстановитьПараметр("ДатаОкончания", Рейс.ДатаНачала + 86400);			
	Зап.УстановитьПараметр("Мас", Мас);			
	//Зап.УстановитьПараметр("ВыбТранспорт", Транспорт);			
	//Зап.УстановитьПараметр("ВыбВодитель", Водитель);			
	//CeHbKA #3981 13.05.2020
	Зап.УстановитьПараметр("РейсМестнойДоставки", Рейс);			
	//CeHbKA #3981 13.05.2020
	
	Рез = Зап.Выполнить().Выгрузить();
	ДанныеМобильногоПриложения.Очистить();
	
	Пред = Неопределено;
	Сч = 0;
	
	МасЧаст = Новый Массив;
	Для Каждого Тек Из Рез Цикл	
		
		Нов = ДанныеМобильногоПриложения.Добавить();
		Нов.Доставка = Тек.Доставка;
		Нов.Документ = Тек.Док;
        //Серегин М.В. 23.06.2015 10:34:29
        //Костыль если в реализации тип оплаты не нал или терминал
		Если ЗначениеЗаполнено(Тек.Реализация) Тогда	
			//Если Тек.Реализация.ТипОплаты <> Справочники.ТипыОплат.Наличные.Код И Тек.Реализация.ТипОплаты <> Справочники.ТипыОплат.Терминал.Код Тогда
			Если Тек.ТипОплатыРеализацияКод <> 1 И Тек.ТипОплатыРеализацияКод <> 5 Тогда
			    Нов.ТипОплаты = Справочники.ТипыОплат.ПустаяСсылка();
			иначе
			    Нов.ТипОплаты = Тек.ТипОплаты;
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(Тек.Забор) Тогда				
			//Если Тек.Забор.ТипОплаты <> Справочники.ТипыОплат.Наличные.Код И Тек.Забор.ТипОплаты <> Справочники.ТипыОплат.Терминал.Код Тогда
	            Нов.ТипОплаты = Справочники.ТипыОплат.ПустаяСсылка();
			//иначе
			//    Нов.ТипОплаты = Тек.ТипОплаты;
			//КонецЕсли;	
		КонецЕсли;
       
        Нов.Реализация = Тек.Реализация;
		Нов.ТипЗаказа = Тек.ТипЗаказа;
		Нов.Забор = Тек.Забор;
		
		
		//CeHbKA 26.11.2019			
		//вынесено чуть ниже
		
		////Серегин М.В. 23.06.2015 10:34:31 
		//ИтКол = 0;
		//Для Каждого ТекТов Из Тек.ДоставленныеТовары Цикл
		//	ИтКол = ИтКол + ТекТов.КоличествоДоставлено;
		//КонецЦикла;	
		//Если ЗначениеЗаполнено(Тек.Возврат) Тогда
		//	КолВ = Тек.Возврат.Товары.Итог("Количество");
		//Иначе
		//	КолВ = 0;
		//КонецеСли;	
		//
		//
		//Если ИтКол <> Тек.Реализация.Товары.Итог("Количество") + Тек.Реализация.ПодарочныеПозиции.Итог("Количество") - КолВ Тогда
		//    //Серегин М.В. 13.07.2015 13:53:19 дополнительное условие если были не доставлены услуги по заказам, тогда это частичка
		//    //старое условие оставляю (предыдущее) на случай если водители не будут отклонять услуги по заказам
		//	Если ИтКол <> ПолучитьКоличествоТоваровБезУслугПоЗаказам(Тек.Реализация) - КолВ Тогда
		//		МасЧаст.Добавить(Тек.Доставка);
		//    КонецЕсли;
		//КонецЕсли;
		
		//CeHbKA 26.11.2019			
		
		//Геннадий 21.10.2020 ->
		//по переписке с Тумаковым, проблема в том, что заборы автоматом не проставлялись как выполненные
		//исходный код:
		
		//Если Пред = Неопределено Тогда
		//	Пред = Тек.Доставка;
		//ИначеЕсли Пред <> Тек.Доставка И ЗначениеЗаполнено(Тек.Доставка) Тогда
		//	Пред = Тек.Доставка;
		//	ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;			 
		//ИначеЕсли Пред <> Тек.Доставка И ЗначениеЗаполнено(Тек.Забор) Тогда
		//	Пред = Тек.Забор;
		//	ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;
		//КонецеСли;	
		
		Если Пред = Неопределено Тогда
			Если ЗначениеЗаполнено(Тек.Реализация) Тогда
				Пред = Тек.Реализация;
			ИначеЕсли ЗначениеЗаполнено(Тек.Забор) Тогда
				Пред = Тек.Забор;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Тек.Реализация) Тогда
			Если Пред <> Тек.Реализация Тогда
				Пред = Тек.Реализация;
				ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;			 
			КонецЕсли;
		ИначеЕсли Пред <> Тек.Забор И ЗначениеЗаполнено(Тек.Забор) Тогда
			Если Пред <> Тек.Забор Тогда
				Пред = Тек.Забор;
				ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;
			КонецЕсли;
		КонецеСли;	
		//Геннадий <-
		
		Сч = Сч + 1;			
	КонецЦикла;	
	
	Если ДанныеМобильногоПриложения.Количество() > 0 Тогда
		ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;
	КонецеСли;	
	
	//CeHbKA 26.11.2019			
	Для Каждого Тек Из Рез Цикл	
		
		ИндексСтрокиТЧ = Рез.Индекс(Тек);
		
		Если НЕ ДанныеМобильногоПриложения[ИндексСтрокиТЧ].АктуальныеДанные Тогда
			Продолжить;
		КонецЕсли; 
		
		//Асеев 28.10.2024 (Задача № 5337)>>>
		Если Тек.ВозвратНаДоставку Тогда
			Продолжить;
		КонецЕсли;
		//Асеев 28.10.2024 (Задача № 5337)<<<
		
		//Серегин М.В. 23.06.2015 10:34:31 
		ИтКол = 0;
		Для Каждого ТекТов Из Тек.ДоставленныеТовары Цикл
			ИтКол = ИтКол + ТекТов.КоличествоДоставлено;
		КонецЦикла;	
		Если ЗначениеЗаполнено(Тек.Возврат) Тогда
			КолВ = Тек.Возврат.Товары.Итог("Количество");
		Иначе
			КолВ = 0;
		КонецеСли;	
		
		
		Если ИтКол <> Тек.Реализация.Товары.Итог("Количество") + Тек.Реализация.ПодарочныеПозиции.Итог("Количество") - КолВ Тогда
		    //Серегин М.В. 13.07.2015 13:53:19 дополнительное условие если были не доставлены услуги по заказам, тогда это частичка
		    //старое условие оставляю (предыдущее) на случай если водители не будут отклонять услуги по заказам
			Если ИтКол <> ПолучитьКоличествоТоваровБезУслугПоЗаказам(Тек.Реализация) - КолВ Тогда
				МасЧаст.Добавить(Тек.Доставка);
		    КонецЕсли;
		КонецЕсли;

	КонецЦикла;	
	//CeHbKA 26.11.2019
	
	Для Каждого Тек Из ДанныеМобильногоПриложения Цикл
		
		// Михушкин - добавлено ветвление для забора заказа
		Если Тек.ТипЗаказа = Перечисления.ТипыЗаказов.Забор Тогда // Забор заказа
			
			Если Не Тек.АктуальныеДанные Тогда
				Продолжить;
			КонецЕсли;	
			НайЗаборы = Заборы.Найти(Тек.Забор);
			Если НайЗаборы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//Асеев 28.10.2024 (Задача № 5337)>>>
			Если Тек.Документ.ВозвратНаДоставку Тогда
				Продолжить;
			КонецЕсли;
			//Асеев 28.10.2024 (Задача № 5337)<<<
			Если Тек.Документ.ПричинаНеВыполненияДоставки.Пустая() Тогда
				НайЗаборы.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;	
				НайЗаборы.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка();
				//НайЗаборы.Перенесено = ложь;
				НайЗаборы.ПричинаОтказа = Справочники.ПричиныОтказаПереноса.ПустаяСсылка();
			Иначе
				НайЗаборы.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
				НайЗаборы.ПричинаНевыполнения = Тек.Документ.ПричинаНеВыполненияДоставки;
				НайЗаборы.ПричинаОтказа = Тек.Документ.ПричинаОтказаПереноса;	
			КонецЕсли;
			НайЗаборы.ОбъемныйБрейкПоДаннымЭкипажа = Тек.Документ.ОбъемныйБрейк;
			
		Иначе // НЕ Забор заказа
			
			Если Не Тек.АктуальныеДанные Тогда
				Продолжить;
			КонецЕсли;
			Най = Задания.Найти(Тек.Доставка);
			//Серегин М.В. 23.06.2015 10:19:24 тип оплаты
			Если ЗначениеЗаполнено(Тек.ТипОплаты) Тогда
	            Най.ТипОплаты = Тек.ТипОплаты;
			Иначе
			    Най.ТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(Тек.Реализация.ТипОплаты);
			КонецЕсли;
			
			//Асеев 28.10.2024 (Задача № 5337)>>>
			Если Тек.Документ.ВозвратНаДоставку Тогда
				Продолжить;
			КонецЕсли;
			//Асеев 28.10.2024 (Задача № 5337)<<<
			
	        //Серегин М.В. 23.06.2015 10:19:26 
			Если Тек.Документ.ПричинаНеВыполненияДоставки.Пустая() Тогда
				НайР = МасЧаст.Найти(Тек.Доставка);
				Если НайР = Неопределено Тогда
					Най.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;
				Иначе
					Най.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично;
				КонецЕсли;	
				Най.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка();
				Най.ПричинаОтказа = Справочники.ПричиныОтказаПереноса.ПустаяСсылка();
				Най.Перенесено = ложь;
				Най.ДатаПереноса = дата("00010101");
				//Асеев 20.08.2021 (Задача № 4643)>>>
				Най.ТребуетсяПодписаниеИВозвратБНДокументов = Ложь;
				Най.ТребуетсяПодписаниеИВозвратСопрДокументов = Ложь;
				//Асеев 20.08.2021 (Задача № 4643)<<<
			Иначе
				Най.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
				Най.ПричинаНевыполнения = Тек.Документ.ПричинаНеВыполненияДоставки;
				Най.ПричинаОтказа = Тек.Документ.ПричинаОтказаПереноса;
				Если Най.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Най.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
					Най.Перенесено = Истина;
					Най.ДатаПереноса = ?(ЗначениеЗаполнено(Тек.Документ.ДатаПереноса), Тек.Документ.ДатаПереноса, (НачалоДня(Рейс.Дата) + 86400));
					//Асеев 20.08.2021 (Задача № 4643)>>>
					Если Най.СопрДокументыВКоробке Тогда
						Най.ТребуетсяПодписаниеИВозвратБНДокументов = Ложь;
						Най.ТребуетсяПодписаниеИВозвратСопрДокументов = Ложь;
					КонецЕсли;
				Иначе
					Най.ТребуетсяПодписаниеИВозвратБНДокументов = Ложь;
					Най.ТребуетсяПодписаниеИВозвратСопрДокументов = Ложь;
					//Асеев 20.08.2021 (Задача № 4643)<<<
				КонецЕсли;
			КонецЕсли;	
		
		КонецЕсли;		
			
	КонецЦикла;	
	
	//Для Каждого Тек Из Задания Цикл
	//	Тек.НедостаточноДанных = Ложь;
	//	Най = ДанныеМобильногоПриложения.Найти(Тек.Задание);
	//	Если Най = Неопределено Тогда
	//		Тек.НедостаточноДанных = Истина;
	//		Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
	//		Тек.ДатаПереноса = НачалоДня(Дата + 172800);
	//		Тек.Выполнено = Ложь;
	//		Тек.Перенесено = Истина;
	//		Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь;
	//	КонецеСли;	
	//КонецЦикла;		
	
	ЗаполнитьТЧДанныеСклада();

	Заполнить_ПринятыеЗаказыТовары_ПоДаннымСклада();
	
	Заполнить_ТоварыКВозвратуПоДаннымМП();	
	
	Записать(РежимЗаписиДокумента.Запись);
	
	Для каждого Ст Из Задания Цикл	
		Ст.ЕстьДанныеМП = Ложь;			
	КонецЦикла;
	
	ЗапросМП = Новый Запрос;
	ЗапросМП.Текст =
	"ВЫБРАТЬ
	|	новаОтчетВодителяЗадания.Задание КАК Задание
	|ИЗ
	|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя.ДанныеМобильногоПриложения КАК новаОтчетВодителяДанныеМобильногоПриложения
	|		ПО (новаОтчетВодителяЗадания.Ссылка = &Ссылка)
	|			И (новаОтчетВодителяДанныеМобильногоПриложения.Ссылка = &Ссылка)
	|			И новаОтчетВодителяЗадания.Задание = новаОтчетВодителяДанныеМобильногоПриложения.Доставка
	|			И (новаОтчетВодителяДанныеМобильногоПриложения.АктуальныеДанные)";
	ЗапросМП.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	РезМП = ЗапросМП.Выполнить().Выбрать();
	
	Пока РезМП.Следующий() Цикл
		НайМП = Задания.НайтиСтроки(Новый Структура("Задание", РезМП.Задание));	
		Для каждого СтМП Из НайМП Цикл	
			СтМП.ЕстьДанныеМП = Истина;			
		КонецЦикла;
	КонецЦикла;
	
	Дата = ТекущаяДата();
	
	Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры	

Процедура ПодготовкаЗаказовНаВторуюОчередь()
	Движения.ЗаказыКПереносуНаВторуюОчередь.Записывать = Истина;
	Движения.ЗаказыКПереносуНаВторуюОчередь.Очистить();
	
	Для Каждого Тек Из Задания Цикл
		Если Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь Тогда
			Нов = Движения.ЗаказыКПереносуНаВторуюОчередь.Добавить();
			Нов.Период = Дата;
			Нов.ДатаПереноса = Тек.ДатаПереноса;
			Нов.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.Задание.Номер);
			Нов.ТипПереноса = Перечисления.ВидыОперацийПереносаЗаказов.ПереносНаПослезавтра;
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	Префикс = "В";
КонецПроцедуры

Процедура УчетЗарплаты()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТарифыРасчетаЗППоКомитентамСрезПоследних.Комитент,
	            |	ТарифыРасчетаЗППоКомитентамСрезПоследних.ТарифЗП Как ВидТарифаЗП
	            |ИЗ
	            |	РегистрСведений.ТарифыРасчетаЗППоКомитентам.СрезПоследних(&ДатаСреза, ) КАК ТарифыРасчетаЗППоКомитентамСрезПоследних";
	Зап.УстановитьПараметр("ДатаСреза", КонецДня(Дата));	
	ТарифыПоКомитентам = Зап.Выполнить().Выгрузить();
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТарифыРасчетаЗПСрезПоследних.ТипЭкипажа,
	            |	ТарифыРасчетаЗПСрезПоследних.УчастникЭкипажа,
	            |	ТарифыРасчетаЗПСрезПоследних.КатегорияДоставки,
	            |	ТарифыРасчетаЗПСрезПоследних.СтоимостьДоМКАД,
	            |	ТарифыРасчетаЗПСрезПоследних.СтоимостьЗаМКАД,
	            |	ТарифыРасчетаЗПСрезПоследних.ТипЗаказа,
	            |	ТарифыРасчетаЗПСрезПоследних.СтоимостьЧас,
	            |	ТарифыРасчетаЗПСрезПоследних.ВидТарифаРасчетаЗП,
	            |	ТарифыРасчетаЗПСрезПоследних.Регион
	            |ИЗ
	            |	РегистрСведений.ТарифыРасчетаЗП.СрезПоследних(&ДатаЗапроса, ) КАК ТарифыРасчетаЗПСрезПоследних";
	Зап.УстановитьПараметр("ДатаЗапроса", КонецДня(Дата));
	
	
	Тарифы = Зап.Выполнить().Выгрузить();
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.ТипЭкипажа,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.УчастникЭкипажа,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.КатегорияДоставки,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.СтоимостьДоМКАД,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.СтоимостьЗаМКАД,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.ТипЗаказа,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.СтоимостьЧас,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.ВидТарифаРасчетаЗП,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.Регион
	            |ИЗ
	            |	РегистрСведений.ТарифыРасчетаЗПНаемники.СрезПоследних(&ДатаЗапроса, ) КАК ТарифыРасчетаЗПНаемникиСрезПоследних";
	Зап.УстановитьПараметр("ДатаЗапроса", КонецДня(Дата));
	
	ТарифыНаем = Зап.Выполнить().Выгрузить();
	
	МетодикаПримененияПериода = РегистрыСведений.МетодикаРасчетаЗППоПредприятию.ПолучитьПоследнее(Дата).ТипПримененияПериода;	
	
	Если Не Водитель.Пустая() И Не Экспедитор.Пустая() Тогда
		ВариантЭ = Перечисления.ТипыТарифовРасчетаЗарплаты.ЭкипажПолный;
	ИначеЕсли Не Водитель.Пустая() Тогда
		ВариантЭ = Перечисления.ТипыТарифовРасчетаЗарплаты.ЭкипажБезЭкспедитора;
	Иначе
		Возврат;
	КонецеСли;	
    
    //+++++Серегин М.В. 09.11.2015 16:28:38 
	Движения.РасчетЗарплаты.Очистить();
    //Движения.РасчетЗарплаты.Записывать = Истина;
    Движения.РасчетЗарплаты.БлокироватьДляИзменения = Истина;
    Движения.РасчетЗарплаты.Записать();
    
	Движения.СводПоЗарплате.Очистить();
    //Движения.СводПоЗарплате.Записывать = Истина;
    Движения.СводПоЗарплате.БлокироватьДляИзменения = Истина;
    Движения.СводПоЗарплате.Записать();
    //-----Серегин М.В. 09.11.2015 16:28:41 
	
	Движения.ОперативнаяЭкономикаЗаказов.Очистить();
    Движения.ОперативнаяЭкономикаЗаказов.БлокироватьДляИзменения = Истина;
    Движения.ОперативнаяЭкономикаЗаказов.Записать();
	
	
	
	Струк = Новый Структура;
	Струк.Вставить("ФизЛицо", Водитель);
	РежимРасчетаВ = РегистрыСведений.МетодикаРасчетаЗППоФизЛицам.ПолучитьПоследнее(Дата, Струк);
	
	Струк = Новый Структура;
	Струк.Вставить("ФизЛицо", Экспедитор);
	РежимРасчетаЭ = РегистрыСведений.МетодикаРасчетаЗППоФизЛицам.ПолучитьПоследнее(Дата, Струк);
	
	
	Для Каждого Тек Из Задания Цикл
		Если Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			ДокРеал = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.Задание.Номер);
			Кат = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория",ДокРеал.КатегорияДоставки);
			
			Струк = Новый Структура;
			Струк.Вставить("Комитент", ДокРеал.ВладелецТовара);
			РежимРасчетаПоКонтрагенту = РегистрыСведений.ТарифыРасчетаЗППоКомитентам.ПолучитьПоследнее(Дата, Струк);
			
			Если Не РежимРасчетаВ.Оклад И Не РежимРасчетаВ.НеУчаствуетВФот Тогда
				
				Нов = Движения.РасчетЗарплаты.Добавить();
				Нов.Период = Дата;
				Нов.ФизЛицо = Водитель;
				Нов.ТипЭкипажа = ВариантЭ;
				Нов.УчастникЭкипажа = Перечисления.УчастникЭкипажа.Водитель;
				Нов.Транспорт = Транспорт;
				Нов.Доставка = ДокРеал;
				Нов.ДоставкаБП = Тек.Задание;
				Нов.ВидВыполненияДоставки = Перечисления.ВидыВыполненияДоставокЭкипажами.ПереносСЗаездом;
				Нов.КатегорияДоставки = Кат;
				Нов.ТипДоставки = Перечисления.ТипыЗаказов.Доставка;
				Если Тек.Задание.ТочкаПрибытия.Москва Тогда
					СумДоМкад = 1;
					Нов.Территориальность = Перечисления.ТерриториальностьДоставок.ДоставкаВПределахМКАД;
				Иначе
					СумЗаМкад = 1;
					Нов.Территориальность = Перечисления.ТерриториальностьДоставок.ДоставкаЗаПределыМКАД;
				КонецеСли;
				Нов.Регион = ДокРеал.ТерминалДоставки;
				
				// Михушкин - экономика --->> 
				НовЭК = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
				НовЭК.ДоходРасход = Перечисления.ДоходРасход.Расход;
				НовЭК.Период = Дата;
				НовЭК.Водитель = Водитель;
				//НовЭК.Экспедитор = Док.Экспедитор;
				НовЭК.Транспорт = Транспорт;								
				Если ТипЗнч(ДокРеал) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда				
					НовЭК.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;				
				ИначеЕсли ТипЗнч(ДокРеал) = Тип("ДокументСсылка.ЗаборТовара") Тогда
				    НовЭК.ТипЗаказа = Перечисления.ТипыЗаказов.Забор;
				ИначеЕсли ТипЗнч(ДокРеал) = Тип("ДокументСсылка.Фрахт") Тогда
				    НовЭК.ТипЗаказа = Перечисления.ТипыЗаказов.Фрахт;				
				КонецЕсли;				 
				НовЭК.Заказ = ДокРеал;
				НовЭК.ИнтернетМагазин = ДокРеал.ВладелецТовара;		
				//НовЭК.Показатель = ;
				НовЭК.Регистратор = Ссылка;
				НовЭК.Рейс = Рейс;
				НовЭК.Статья = Справочники.СтатьиЗатратКомпании.ЗаработнаяПлата;
				// <<--- Михушкин 
				
				
				// Михушкин --->> 
				Если ЗначениеЗаполнено(ДокРеал) Тогда
					КонтрагентПартнер = ДокРеал.ВладелецТовара;	
					Если Не КонтрагентПартнер.Родитель.ОсновнойМагазин.Пустая() Тогда
						Нов.Партнер = КонтрагентПартнер.Родитель.ОсновнойМагазин;
						НовЭК.Партнер = КонтрагентПартнер.Родитель.ОсновнойМагазин;
					Иначе
						Нов.Партнер = КонтрагентПартнер;
						НовЭК.Партнер = КонтрагентПартнер;
					КонецеСли;
				КонецЕсли;
				// <<--- Михушкин 
				
				Струк = Новый СТруктура;
				Струк.Вставить("ТипЭкипажа", ВариантЭ);
				Струк.Вставить("УчастникЭкипажа", Перечисления.УчастникЭкипажа.Водитель);
				Струк.Вставить("КатегорияДоставки", Кат);
				Струк.Вставить("ТипЗаказа", Перечисления.ТипыЗаказов.Доставка);
				Струк.Вставить("Регион", ДокРеал.ТерминалДоставки);
				
				// Михушкин - 19.09 --->> 
				ОтборРегион = Новый Структура("Регион", ДокРеал.ТерминалДоставки);
				// <<--- Михушкин
				
				Если Не ЗначениеЗаполнено(РежимРасчетаПоКонтрагенту.ТарифЗП) Тогда
					Если Не ЗначениеЗаполнено(РежимРасчетаВ.ВидТарифаЗП) Тогда
						Если МетодикаПримененияПериода = Перечисления.ТипыПримененияПериодаТарифаРасчетаЗП.ПустаяСсылка() Или МетодикаПримененияПериода = Перечисления.ТипыПримененияПериодаТарифаРасчетаЗП.ДатаПриемаФизлица Тогда
							Если ЗначениеЗаполнено(Нов.ФизЛицо.ДатаПриемаНаРаботу) Тогда
								Тариф = РегистрыСведений.ТарифыРасчетаЗППоДатеПриема.ПолучитьПоследнее(КонецДня(Нов.ФизЛицо.ДатаПриемаНаРаботу)).Тариф;
								Если Не ЗначениеЗаполнено(Тариф) Тогда
									Тариф = РегистрыСведений.ОсновныеТарифыРасчетаЗП.ПолучитьПоследнее(КонецДня(Дата), ОтборРегион).Тариф;
								КонецеСли;	
							Иначе
								Тариф = РегистрыСведений.ОсновныеТарифыРасчетаЗП.ПолучитьПоследнее(КонецДня(Дата), ОтборРегион).Тариф;
							КонецеСли;	
						ИначеЕсли МетодикаПримененияПериода = Перечисления.ТипыПримененияПериодаТарифаРасчетаЗП.ДатаЗаказа Тогда
							Тариф = РегистрыСведений.ОсновныеТарифыРасчетаЗП.ПолучитьПоследнее(КонецДня(Дата), ОтборРегион).Тариф;
						КонецеСли;	
						Если Не ЗначениеЗаполнено(Тариф) Тогда
							Тариф = Справочники.ВидыТарифовРасчетаЗП.Основной;
						КонецеСли;	
						Струк.Вставить("ВидТарифаРасчетаЗП", Тариф);
						Нов.ВидТарифаРасчетаЗП = Тариф;
					Иначе
						Струк.Вставить("ВидТарифаРасчетаЗП", РежимРасчетаВ.ВидТарифаЗП);
						Нов.ВидТарифаРасчетаЗП = РежимРасчетаВ.ВидТарифаЗП;
					КонецеСли;
				иначе
					Струк.Вставить("ВидТарифаРасчетаЗП", РежимРасчетаПоКонтрагенту.ТарифЗП);
					Нов.ВидТарифаРасчетаЗП = РежимРасчетаПоКонтрагенту.ТарифЗП;
				КонецЕсли;
				
				СтрукТр = Новый Структура;
				СтрукТр.Вставить("Транспорт", Транспорт);
				Наем = РегистрыСведений.НаёмныйТранспорт.ПолучитьПоследнее(КонецДня(Дата), СтрукТр).Наемник;
				Если Не Наем Тогда
					Най = Тарифы.НайтиСтроки(Струк);
				Иначе
					Най = ТарифыНаем.НайтиСтроки(Струк);
					Нов.НаёмныйЭкипаж = Истина;
				КонецеСли;
				Если Най.Количество() = 1 Тогда
					Если СумДоМКАд = 1 Тогда
						Нов.Сумма = Най[0].СтоимостьДоМКАД;
						НовЭК.Сумма = Най[0].СтоимостьДоМКАД;
					ИначеЕсли СумЗаМКАд = 1 Тогда
						Нов.Сумма = Най[0].СтоимостьЗаМКАД;
						НовЭК.Сумма = Най[0].СтоимостьЗаМКАД;
					КонецеСли;	
				КонецеСли;	
				
				Нов2 = Движения.СводПоЗарплате.Добавить();
				Нов2.ТипРасчетаЗарплаты = Перечисления.ТипыРасчетаЗарплаты.СдельныйРасчетПоДоставкам;
				Нов2.Период = Дата;
				Нов2.ПоказательКоличества = 1;
				Нов2.Сумма = Нов.Сумма;
				Нов2.УчастникЭкипажа = Перечисления.УчастникЭкипажа.Водитель;
				Нов2.ФизЛицо = Водитель;
                //+++++Серегин М.В. 29.02.2016 12:15:46 
                Нов2.ТипНУ = Перечисления.ТипыНУЭкипажей.РасчетЗП;
                //-----Серегин М.В. 29.02.2016 12:15:47 
			КонецеСли;
			
			Если ВариантЭ = Перечисления.ТипыТарифовРасчетаЗарплаты.ЭкипажПолный Тогда
				Если Не РежимРасчетаЭ.Оклад И Не РежимРасчетаЭ.НеУчаствуетВФот Тогда
					Нов = Движения.РасчетЗарплаты.Добавить();
					Нов.Период = Дата;
					Нов.ФизЛицо = Экспедитор;
					Нов.ТипЭкипажа = ВариантЭ;
					Нов.УчастникЭкипажа = Перечисления.УчастникЭкипажа.Экспедитор;
					Нов.Транспорт = Транспорт;
					Нов.Доставка = ДокРеал;
					Нов.ДоставкаБП = Тек.Задание;
					Нов.КатегорияДоставки = Кат;
					Нов.ВидВыполненияДоставки = Перечисления.ВидыВыполненияДоставокЭкипажами.ПереносСЗаездом;
					Нов.ТипДоставки = Перечисления.ТипыЗаказов.Доставка;
					Если Тек.Задание.ТочкаПрибытия.Москва Тогда
						СумДоМкад = 1;
						Нов.Территориальность = Перечисления.ТерриториальностьДоставок.ДоставкаВПределахМКАД;
					Иначе
						СумЗаМкад = 1;
						Нов.Территориальность = Перечисления.ТерриториальностьДоставок.ДоставкаЗаПределыМКАД;
					КонецеСли;
					Нов.Регион = ДокРеал.ТерминалДоставки;
					
					// Михушкин - экономика --->> 
					НовЭК = Движения.ОперативнаяЭкономикаЗаказов.Добавить();
					
					НовЭК.ДоходРасход = Перечисления.ДоходРасход.Расход;
					НовЭК.Период = Дата;
					//НовЭК.Водитель = Док.Водитель;
					НовЭК.Экспедитор = Экспедитор;
					НовЭК.Транспорт = Транспорт;
					
					Если ТипЗнч(ДокРеал) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда				
						НовЭК.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;				
					ИначеЕсли ТипЗнч(ДокРеал) = Тип("ДокументСсылка.ЗаборТовара") Тогда
					    НовЭК.ТипЗаказа = Перечисления.ТипыЗаказов.Забор;
					ИначеЕсли ТипЗнч(ДокРеал) = Тип("ДокументСсылка.Фрахт") Тогда
					    НовЭК.ТипЗаказа = Перечисления.ТипыЗаказов.Фрахт;				
					КонецЕсли;
					
					НовЭК.Заказ = ДокРеал;
					НовЭК.ИнтернетМагазин = ДокРеал.ВладелецТовара;		
					//НовЭК.Показатель = ;
					НовЭК.Регистратор = Ссылка;
					НовЭК.Рейс = Рейс;
					НовЭК.Статья = Справочники.СтатьиЗатратКомпании.ЗаработнаяПлата;
					// <<--- Михушкин 
					
					
					// Михушкин --->> 
					Если ЗначениеЗаполнено(ДокРеал) Тогда
						КонтрагентПартнер = ДокРеал.ВладелецТовара;	
						Если Не КонтрагентПартнер.Родитель.ОсновнойМагазин.Пустая() Тогда
							Нов.Партнер = КонтрагентПартнер.Родитель.ОсновнойМагазин;
							НовЭК.Партнер = КонтрагентПартнер.Родитель.ОсновнойМагазин;
						Иначе
							Нов.Партнер = КонтрагентПартнер;
							НовЭК.Партнер = КонтрагентПартнер;
						КонецеСли;
					КонецЕсли;
					// <<--- Михушкин
					
					
					Струк = Новый СТруктура;
					Струк.Вставить("ТипЭкипажа", ВариантЭ);
					Струк.Вставить("УчастникЭкипажа", Перечисления.УчастникЭкипажа.Экспедитор);
					Струк.Вставить("КатегорияДоставки", Кат);
					Струк.Вставить("ТипЗаказа", Перечисления.ТипыЗаказов.Доставка);
					Струк.Вставить("Регион", ДокРеал.ТерминалДоставки);
					
					// Михушкин - 19.09 --->> 
					ОтборРегион = Новый Структура("Регион", ДокРеал.ТерминалДоставки);
					// <<--- Михушкин
					
					Если Не ЗначениеЗаполнено(РежимРасчетаПоКонтрагенту.ТарифЗП) Тогда
						Если Не ЗначениеЗаполнено(РежимРасчетаЭ.ВидТарифаЗП) Тогда
							Если МетодикаПримененияПериода = Перечисления.ТипыПримененияПериодаТарифаРасчетаЗП.ПустаяСсылка() Или МетодикаПримененияПериода = Перечисления.ТипыПримененияПериодаТарифаРасчетаЗП.ДатаПриемаФизлица Тогда
								Если ЗначениеЗаполнено(Нов.ФизЛицо.ДатаПриемаНаРаботу) Тогда
									Тариф = РегистрыСведений.ТарифыРасчетаЗППоДатеПриема.ПолучитьПоследнее(КонецДня(Нов.ФизЛицо.ДатаПриемаНаРаботу)).Тариф;
									Если Не ЗначениеЗаполнено(Тариф) Тогда
										Тариф = РегистрыСведений.ОсновныеТарифыРасчетаЗП.ПолучитьПоследнее(КонецДня(Дата), ОтборРегион).Тариф;
									КонецеСли;	
								Иначе
									Тариф = РегистрыСведений.ОсновныеТарифыРасчетаЗП.ПолучитьПоследнее(КонецДня(Дата), ОтборРегион).Тариф;
								КонецеСли;	
							ИначеЕсли МетодикаПримененияПериода = Перечисления.ТипыПримененияПериодаТарифаРасчетаЗП.ДатаЗаказа Тогда
								Тариф = РегистрыСведений.ОсновныеТарифыРасчетаЗП.ПолучитьПоследнее(КонецДня(Дата), ОтборРегион).Тариф;
							КонецеСли;	
							Если Не ЗначениеЗаполнено(Тариф) Тогда
								Тариф = Справочники.ВидыТарифовРасчетаЗП.Основной;
							КонецеСли;	
							Струк.Вставить("ВидТарифаРасчетаЗП", Тариф);
							Нов.ВидТарифаРасчетаЗП = Тариф;
						Иначе
							Струк.Вставить("ВидТарифаРасчетаЗП", РежимРасчетаЭ.ВидТарифаЗП);
							Нов.ВидТарифаРасчетаЗП = РежимРасчетаЭ.ВидТарифаЗП;
						КонецеСли;	
					иначе
						Струк.Вставить("ВидТарифаРасчетаЗП", РежимРасчетаПоКонтрагенту.ТарифЗП);
						Нов.ВидТарифаРасчетаЗП = РежимРасчетаПоКонтрагенту.ТарифЗП;
					КонецЕсли;
					
					СтрукТр = Новый Структура;
					СтрукТр.Вставить("Транспорт", Транспорт);
					Наем = РегистрыСведений.НаёмныйТранспорт.ПолучитьПоследнее(КонецДня(Дата), СтрукТр).Наемник;
					Если Не Наем Тогда
						Най = Тарифы.НайтиСтроки(Струк);
					Иначе
						Най = ТарифыНаем.НайтиСтроки(Струк);
						Нов.НаёмныйЭкипаж = Истина;
					КонецеСли;
					
					
					Най = Тарифы.НайтиСтроки(Струк);
					Если Най.Количество() = 1 Тогда
						Если СумДоМКАд = 1 Тогда
							Нов.Сумма = Най[0].СтоимостьДоМКАД;
							НовЭК.Сумма = Най[0].СтоимостьДоМКАД;
						ИначеЕсли СумЗаМКАд = 1 Тогда
							Нов.Сумма = Най[0].СтоимостьЗаМКАД;
							НовЭК.Сумма = Най[0].СтоимостьЗаМКАД;
						КонецеСли;	
					КонецеСли;	
					
                    Нов2 = Движения.СводПоЗарплате.Добавить();
                    Нов2.ТипРасчетаЗарплаты = Перечисления.ТипыРасчетаЗарплаты.СдельныйРасчетПоДоставкам;
                    Нов2.Период = Дата;
                    Нов2.ПоказательКоличества = 1;
                    Нов2.Сумма = Нов.Сумма;
                    Нов2.УчастникЭкипажа = Перечисления.УчастникЭкипажа.Экспедитор;
                    Нов2.ФизЛицо = Экспедитор;
                    //+++++Серегин М.В. 29.02.2016 12:15:46 
                    Нов2.ТипНУ = Перечисления.ТипыНУЭкипажей.РасчетЗП;
                    //-----Серегин М.В. 29.02.2016 12:15:47 
                КонецеСли;
			КонецеСли;	
			
		КонецЕСли;	
    КонецЦикла;	
    
    //+++++Серегин М.В. 09.11.2015 16:28:38 
    Движения.РасчетЗарплаты.БлокироватьДляИзменения = Истина;
    Движения.РасчетЗарплаты.Записать();
    
    Движения.СводПоЗарплате.БлокироватьДляИзменения = Истина;
    Движения.СводПоЗарплате.Записать();
    //-----Серегин М.В. 09.11.2015 16:28:41 
	
	Движения.ОперативнаяЭкономикаЗаказов.БлокироватьДляИзменения = Истина;
    Движения.ОперативнаяЭкономикаЗаказов.Записать();

КонецПроцедуры

Процедура ПодтянутьДанныеЛогиста() Экспорт
	Мас = Задания.ВыгрузитьКолонку("Задание");
	Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//			|	ДанныеЗаказаВодителя.Ссылка КАК Док,
	//			|	ДанныеЗаказаВодителя.ВерсияДанных,
	//			|	ДанныеЗаказаВодителя.ПометкаУдаления,
	//			|	ДанныеЗаказаВодителя.Номер КАК Номер,
	//			|	ДанныеЗаказаВодителя.Дата,
	//			|	ДанныеЗаказаВодителя.Проведен,
	//			|	ДанныеЗаказаВодителя.Реализация,
	//			|	ДанныеЗаказаВодителя.Водитель,
	//			|	ДанныеЗаказаВодителя.Статус,
	//			|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
	//			|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
	//			|	ДанныеЗаказаВодителя.ДатаПереноса,
	//			|	ДанныеЗаказаВодителя.Транспорт,
	//			|	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	//			|		Ссылка,
	//			|		НомерСтроки,
	//			|		Номенклатура,
	//			|		КоличествоДоставлено
	//			|	),
	//			|	новаМестнаяДоставка.Ссылка КАК Доставка,
	//			|	ДанныеЗаказаВодителя.Реализация.Номер КАК НомерДоставки
	//			|ИЗ
	//			|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//			|		ПО ДанныеЗаказаВодителя.Реализация.Номер = новаМестнаяДоставка.Номер,
	//			|	Константа.ОсновнойТипПривязкиТелефонов КАК ОсновнойТипПривязкиТелефонов
	//			|ГДЕ
	//			|	ДанныеЗаказаВодителя.Дата МЕЖДУ &Дата И &ДатаОкончания
	//			|	И новаМестнаяДоставка.Ссылка В(&Мас)
	//			|	И ДанныеЗаказаВодителя.Проведен = ИСТИНА
	//			|	И ВЫБОР
	//			|			КОГДА ОсновнойТипПривязкиТелефонов.Значение = ЗНАЧЕНИЕ(перечисление.типыпривязкителефонов.ктранспорту)
	//			|					ИЛИ ОсновнойТипПривязкиТелефонов.Значение = ЗНАЧЕНИЕ(перечисление.типыпривязкителефонов.ПустаяСсылка)
	//			|				ТОГДА ДанныеЗаказаВодителя.Транспорт = &ВыбТранспорт
	//			|			ИНАЧЕ ВЫБОР
	//			|					КОГДА ОсновнойТипПривязкиТелефонов.Значение = ЗНАЧЕНИЕ(перечисление.типыпривязкителефонов.кводителю)
	//			|						ТОГДА ДанныеЗаказаВодителя.Водитель = &ВыбВодитель
	//			|					ИНАЧЕ ИСТИНА
	//			|				КОНЕЦ
	//			|		КОНЕЦ
	//			|
	//			|УПОРЯДОЧИТЬ ПО
	//			|	НомерДоставки,
	//			|	Номер";
				
	Зап.Текст = "ВЫБРАТЬ
	            |	ВводДанныхОСостоянииЗаказа.Ссылка КАК Док,
	            |	ВводДанныхОСостоянииЗаказа.ВерсияДанных,
	            |	ВводДанныхОСостоянииЗаказа.ПометкаУдаления,
	            |	ВводДанныхОСостоянииЗаказа.Номер КАК Номер,
	            |	ВводДанныхОСостоянииЗаказа.Дата,
	            |	ВводДанныхОСостоянииЗаказа.Проведен,
	            |	ВводДанныхОСостоянииЗаказа.Водитель,
	            |	ВводДанныхОСостоянииЗаказа.ДатаПереноса,
	            |	ВводДанныхОСостоянииЗаказа.Транспорт,
	            |	новаМестнаяДоставка.Ссылка КАК Доставка,
	            |	ВводДанныхОСостоянииЗаказа.ПричинаНевыполнения,
	            |	ВводДанныхОСостоянииЗаказа.ПричинаОтказа,
	            |	ВводДанныхОСостоянииЗаказа.Заказ
	            |ИЗ
	            |	Документ.ВводДанныхОСостоянииЗаказа КАК ВводДанныхОСостоянииЗаказа
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО ВводДанныхОСостоянииЗаказа.Заказ.Номер = новаМестнаяДоставка.Номер
	            |ГДЕ
	            |	ВводДанныхОСостоянииЗаказа.Дата МЕЖДУ &Дата И &ДатаОкончания
	            |	И новаМестнаяДоставка.Ссылка В(&Мас)
	            |	И ВводДанныхОСостоянииЗаказа.Проведен = ИСТИНА
	            |	И (ВводДанныхОСостоянииЗаказа.Водитель = &ВыбВодитель
	            |			ИЛИ ВводДанныхОСостоянииЗаказа.Транспорт = &ВыбТранспорт)
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Номер";
				
	Зап.УстановитьПараметр("Дата", НачалоДня(Рейс.ДатаНачала));			
	Зап.УстановитьПараметр("ДатаОкончания", Рейс.ДатаНачала + 86400);			
	Зап.УстановитьПараметр("Мас", Мас);			
	Зап.УстановитьПараметр("ВыбТранспорт", Транспорт);			
	Зап.УстановитьПараметр("ВыбВодитель", Водитель);			
	
	Рез = Зап.Выполнить().Выгрузить();
	ДанныеЛогиста.Очистить();
	
	Пред = Неопределено;
	Сч = 0;
	
	Для Каждого Тек Из Рез Цикл
		Нов = ДанныеЛогиста.Добавить();
		Нов.Доставка = Тек.Доставка;
		Нов.Документ = Тек.Док;
		
		Если Пред = Неопределено Тогда
			Пред = Тек.Доставка;
		ИначеЕсли Пред <> Тек.Доставка Тогда
			Пред = Тек.Доставка;
			ДанныеЛогиста[Сч - 1].АктуальныеДанные = Истина;
		КонецеСли;	
		Сч = Сч + 1;
	КонецЦикла;	
	Если ДанныеЛогиста.Количество() > 0 Тогда
		ДанныеЛогиста[Сч - 1].АктуальныеДанные = Истина;
	КонецеСли;	
	
	
	Для Каждого Тек Из ДанныеЛогиста Цикл
		Если Не Тек.АктуальныеДанные Тогда
			Продолжить;
		КонецеСли;	
		Най = Задания.Найти(Тек.Доставка);
		Най.РезультатДоставки = Тек.Документ.РезультатДоставки;
		Най.ПричинаНевыполнения = Тек.Документ.ПричинаНевыполнения;
		Най.ПричинаОтказа = Тек.Документ.ПричинаОтказа;
		Най.Перенесено = ложь;
		Най.ДатаПереноса = дата("00010101");
		Если Най.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Най.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			Най.Перенесено = Истина;
			Най.ДатаПереноса = Тек.Документ.ДатаПереноса;
		КонецеСли;	
	КонецЦикла;	
	//Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры	

Процедура ЗаписатьАдресаВИсторию() Экспорт
	ТекВр = ТекущаяДата();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	            |	новаОтчетВодителяЗадания.Задание.Ссылка КАК Задание,
	            |	новаОтчетВодителяЗадания.АдресПослеТекст КАК Адрес,
	            |	новаОтчетВодителяЗадания.ПричинаОтказа.Ссылка КАК ПричинаОтказаПереноса,
	            |	новаОтчетВодителяЗадания.Ссылка.Ссылка КАК Документ
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	            |		ПО РеализацияТоваровУслуг.Номер = новаОтчетВодителяЗадания.Задание.Номер
	            |ГДЕ
	            |	новаОтчетВодителяЗадания.Ссылка = &Док
	            |	И новаОтчетВодителяЗадания.ПричинаОтказа.ТребоватьВводНовогоАдреса = ИСТИНА";
				
	Зап.УстановитьПараметр("Док", Ссылка);
	Выб = Зап.Выполнить().Выгрузить();
    
	
	
	Для Каждого Тек Из Выб Цикл
		Наб = РегистрыСведений.ИсторияАдресов.СоздатьНаборЗаписей();
		Наб.Отбор.Документ.Установить(Ссылка);
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.Заказ.Установить(Тек.Заказ);
		Наб.Отбор.ПричинаОтказаПереноса.Установить(Тек.ПричинаОтказаПереноса);
		
		Нов = Наб.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
		Нов.Период = ТекВр;
		
		
		Наб.Записать();
	конецЦикла;
КонецПроцедуры	


Функция ПолучитьДанныеОбновлениеСтатусовВАдминке()
//|	новаОтчетВодителя.Доставка.ТерминалДоставки КАК Терминал

    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	ВЫБОР
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.Выполнена)
        |			ТОГДА 231
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ВыполненаЧастично)
        |			ТОГДА 237
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом)
        |			ТОГДА 238
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда)
        |			ТОГДА 235
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки)
        |			ТОГДА 232
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь)
        |			ТОГДА 232
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом)
        |			ТОГДА 236
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.НетНаСкладе)
        |			ТОГДА 235
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.НеДоставлен)
        |			ТОГДА 235
        |		ИНАЧЕ 401
        |	КОНЕЦ КАК Статус,
        |	новаОтчетВодителя.Ссылка КАК ДокументРегистратор,
        |	ЛОЖЬ КАК ПредварительноеЗакрытие,
        |	РеализацияТоваровУслуг.Ссылка КАК Реализация,
        |	РеализацияТоваровУслуг.ТерминалДоставки.Ссылка КАК Терминал,
        |	РеализацияТоваровУслуг.Номер КАК Номер,
        |	новаОтчетВодителя.ИнициаторСостояния КАК ИнициаторСостояния,
        |	новаОтчетВодителя.ПричинаОтказа КАК ПричинаОтказа //CeHbKA #3227 21.06.2019
        |ИЗ
        |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителя
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |		ПО новаОтчетВодителя.Задание.Номер = РеализацияТоваровУслуг.Номер
        |ГДЕ
        |	новаОтчетВодителя.Ссылка = &Ссылка";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
        
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

//CeHbKA 12.03.2021
Функция ПолучитьДанныеОбновлениеСтатусовВАдминке_Новая() Экспорт
//|	новаОтчетВодителя.Доставка.ТерминалДоставки КАК Терминал

    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	ВЫБОР
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.Выполнена)
        |			ТОГДА 231
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ВыполненаЧастично)
        |			ТОГДА 237
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом)
        |			ТОГДА 238
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда)
        |			ТОГДА 235
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки)
        |			ТОГДА 232
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь)
        |			ТОГДА 232
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом)
        |			ТОГДА 236
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.НетНаСкладе)
        |			ТОГДА 235
        |		КОГДА новаОтчетВодителя.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
        |				И новаОтчетВодителя.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.НеДоставлен)
        |			ТОГДА 235
        |		ИНАЧЕ 401
        |	КОНЕЦ КАК Статус,
        |	новаОтчетВодителя.Ссылка КАК ДокументРегистратор,
        |	ЛОЖЬ КАК ПредварительноеЗакрытие,
        |	РеализацияТоваровУслуг.Ссылка КАК Реализация,
        |	РеализацияТоваровУслуг.ТерминалДоставки.Ссылка КАК Терминал,
        |	РеализацияТоваровУслуг.Номер КАК Номер,
        |	новаОтчетВодителя.ИнициаторСостояния КАК ИнициаторСостояния,
        |	новаОтчетВодителя.ПричинаОтказа КАК ПричинаОтказа
        |ИЗ
        |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителя
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |		ПО новаОтчетВодителя.Задание.Номер = РеализацияТоваровУслуг.Номер
        |ГДЕ
        |	новаОтчетВодителя.Ссылка = &Ссылка
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	231,
        |	новаОтчетВодителяЗаборы.Ссылка,
        |	ЛОЖЬ,
        |	новаОтчетВодителяЗаборы.Забор,
        |	новаОтчетВодителяЗаборы.Забор.ТерминалДоставки.Ссылка,
        |	новаОтчетВодителяЗаборы.Забор.Номер,
        |	новаОтчетВодителяЗаборы.ИнициаторСостояния,
        |	новаОтчетВодителяЗаборы.ПричинаОтказа
        |ИЗ
        |	Документ.новаОтчетВодителя.Заборы КАК новаОтчетВодителяЗаборы
        |ГДЕ
        |	новаОтчетВодителяЗаборы.Ссылка = &Ссылка
        |	И новаОтчетВодителяЗаборы.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.Выполнена)";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
        
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции
//CeHbKA 12.03.2021

Процедура ОбновлениеСтатусовВАдминке(Режим) Экспорт
	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	Период = ТекущаяДата();

	
	// сформируем таблицу данных для по статусам
	//ТаблицаДанных = ПолучитьДанныеОбновлениеСтатусовВАдминке();
	//CeHbKA 12.03.2021
	ТаблицаДанных = ПолучитьДанныеОбновлениеСтатусовВАдминке_Новая();
	//CeHbKA 12.03.2021
	
	
	Если Режим = РежимЗаписиДокумента.Проведение Тогда
		
		//Задача № 2869
		СопоставлениеИнициатора = РаботаСАдминкойСервер.СопоставлениеИнициатораСостоянияДляАдминки();
		//Задача № 2869
		
		// Задача № 2813
		МассивСтатусов = Неопределено;
		Для каждого Стр Из ТаблицаДанных Цикл
			Если Стр.Статус <> 401 Тогда
				//Задача № 2869
				ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("Initiator", РаботаСАдминкойСервер.ИнициаторСостоянияВАдминку(Стр.ИнициаторСостояния, СопоставлениеИнициатора));				
				//Задача № 2869
				
				// Задача № 3027
				ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ProcessingTerminal", Число(ТерминалДоставки.Код), ДопПараметрыСтатуса);
				// Задача № 3027

				//CeHbKA #3227 21.06.2019
				Если Стр.Статус = 232 ИЛИ Стр.Статус = 235 ИЛИ Стр.Статус = 236 ИЛИ Стр.Статус = 238 Тогда 
					Если НЕ Стр.ПричинаОтказа.Пустая() Тогда
						ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ReasonId", СокрЛП(Стр.ПричинаОтказа.Код), ДопПараметрыСтатуса); 
						ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ReasonRefusal", СокрЛП(Стр.ПричинаОтказа.Наименование), ДопПараметрыСтатуса); // Задача № 3027
					КонецЕсли;	
				КонецЕсли; 
				//CeHbKA #3227 21.06.2019
				
				//Переварюха В.В. Задача № 3631 28.10.2019
				Если УдаленноеЗакрытие Тогда
					
					ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("Who","Удаленное закрытие экипажем",ДопПараметрыСтатуса);	
				
				Иначе
					
					ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("Who","Закрытие логистом",ДопПараметрыСтатуса);	
				
				КонецЕсли;
				//Переварюха В.В. Задача № 3631 28.10.2019
				
				//Асеев 26.04.2024 (Задача № 5267)>>>
				ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("OperationId", 2, ДопПараметрыСтатуса);
				//Асеев 26.04.2024 (Задача № 5267)<<<
				
				МассивСтатусов = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(Стр.Номер, Стр.Статус, "Отчет водителя",,Дата,МассивСтатусов, ДопПараметрыСтатуса);
			КонецЕсли;
		КонецЦикла;	
		СтруктураВозврата = mas.ОтправитьМассивСтатусовЗаказов(МассивСтатусов);
		// Задача № 2813
		
		//// --- Отключено в рамках Задача № 2813
		//СтрТекстЗапроса="";
		//Стр2 = "";
		//ТекстСоставлен = Ложь;
		//Статус = 0;
		////ТаблицаДанных = ПолучитьДанныеОбновлениеСтатусовВАдминке();
		//
		//Для каждого Стр Из ТаблицаДанных Цикл
		//	Если Стр.Статус <> 401 Тогда
		//		Статус = Стр.Статус;
		//		//Если Стр.ПредварительноеЗакрытие Тогда
		//			
		//			// текст для текущих статусов
		//            СтрТекстЗапроса = СтрТекстЗапроса + "(" +Формат(Сокрлп(Стр.Номер), "ЧГ=") + ","+Стр.Статус+",'Приход ДС по отчету водителя'"+")"+",";
		//			
		//			// текст для финальных статусов
		//			//Стр2 = Стр2 + "
		//			//|INSERT INTO @t ([orderID],[FinalStatusID],[who]) VALUES (" + Сокрлп(Стр.Реализация.Номер) + "," + Строка(Стр.Статус) + ",'" + ПараметрыСеанса.ТекущийПользователь + "')";
		//			ТекстСоставлен = Истина;
		//				
		//		//КонецЕсли;	
		//    КонецЕсли;     
		//КонецЦикла;
		// 
		//
		//// текущий статус
		//Если ТекстСоставлен И ЗначениеЗаполнено(СтрТекстЗапроса) Тогда
		//	ДлинаТекста = СтрДлина(СтрТекстЗапроса);
		//	СтрТекстЗапроса = Лев(СтрТекстЗапроса,ДлинаТекста-1);
		//	ТекстЗапроса = "
		//	|DECLARE @t TOrderStatusId
		//	|INSERT INTO @t (orderID, statusId, comment) VALUES " +
		//	СтрТекстЗапроса +" EXEC import_setOrdersStatusIDFrom1C @t";
		//	Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);		
		//КонецЕсли;
		//
		//
		////// финальный статус
		////Если Статус <> 0 Тогда			
		////	Стр2 = "DECLARE @t TOrderFinalStatus   " + Стр2 + " EXEC import_setOrderFinalStatus @t";
		////	Евген.ЗапросКИнтернетМагазину(Стр2, Подкл);
		////КонецеСли;
		//
		//// --- Отключено в рамках Задача № 2813
	КонецЕсли;
	
	//костыль
	ТаблицаДанных.Колонки.Добавить("БылоЗакрытие");
	
	РаботаСоСтатусамиЗаказовСервер.СохранитьСтатусы(ТаблицаДанных,,ТерминалДоставки);
	// Задача № 3027 //smv.СохранитьСтатус(ТаблицаДанных);
	
	//smv.СохранитьФинальныйСтатус(ТаблицаДанных);
	
КонецПроцедуры


Процедура ЗакрытьПредварительныеЗакрытия()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПредварительноеЗакрытиеРейса.Ссылка КАК Док,
	            |	ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, Ложь) КАК РейсЗакрыт
	            |ИЗ
	            |	Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
	            |		ПО ПредварительноеЗакрытиеРейса.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
	            |ГДЕ
	            |	ПредварительноеЗакрытиеРейса.ОтчетВодителя.Ссылка = &Отчет";
	Зап.УстановитьПараметр("Отчет", Ссылка);			
	
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		Если Не Выб.РейсЗакрыт Тогда
			
			//+++ БАО 13.06.2017 №1024  
			//Д = Выб.Док.ПолучитьОбъект();
			//Д.ОбменДанными.Загрузка = истина;
			//Д.РейсЗакрыт = Истина;
			//Д.Записать(РежимЗаписиДокумента.Запись);
			//+Степанов Задача № 3439
			//baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(Выб.Док, Истина);
			baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(Выб.Док, Истина,Ссылка);
			//-Степанов
			//--- БАО 13.06.2017 №1024  
			
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	


Процедура ЗаписьСкладскихСтатусов()
    Движения.СтатусыСкладскогоУчета.Записывать = Истина;
    Движения.СтатусыСкладскогоУчета.Очистить();
	
	
	ЗапНомеров = Новый Запрос;
	
	ЗапНомеров.Текст = "ВЫБРАТЬ
	                   |	новаОтчетВодителяЗадания.Задание.Номер КАК Номер
	                   |ИЗ
	                   |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	                   |ГДЕ
	                   |	новаОтчетВодителяЗадания.Ссылка.Ссылка = &Док";
	ЗапНомеров.УстановитьПараметр("Док", Ссылка);
	ТабНомеров = ЗапНомеров.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");;
	
    Зап = Новый Запрос;
    ////Серегин М.В. 15.05.2015 16:16:31  старый запрос
    //Зап.Текст = "ВЫБРАТЬ
    //            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
    //            |	ВЫБОР
    //            |		КОГДА новаОтчетВодителяЗадания.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентабеззаезда)
    //            |				ИЛИ новаОтчетВодителяЗадания.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентасзаездом)
    //            |				ИЛИ новаОтчетВодителяЗадания.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.нетнаскладе)
    //            |			ТОГДА ЗНАЧЕНИЕ(справочник.статусыскладскогоучета.возврат1)
    //            |		ИНАЧЕ ВЫБОР
    //            |				КОГДА новаОтчетВодителяЗадания.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.ВыполненаЧастично)
    //            |					ТОГДА ЗНАЧЕНИЕ(справочник.статусыскладскогоучета.возврат2)
    //            |			КОНЕЦ
    //            |	КОНЕЦ КАК СтатусСкладскогоУчета,
    //            |	новаОтчетВодителяЗадания.Ссылка.Дата КАК Период
    //            |ИЗ
    //            |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
    //            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
    //            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    //            |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
    //            |		ПО новаОтчетВодителяЗадания.Задание.Ссылка = новаМестнаяДоставка.Ссылка
    //            |ГДЕ
    //            |	новаОтчетВодителяЗадания.Ссылка.Ссылка = &Док
    //            |	И (новаОтчетВодителяЗадания.ПричинаНевыполнения В (ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентабеззаезда), ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентасзаездом), ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.нетнаскладе))
    //            |			ИЛИ новаОтчетВодителяЗадания.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.ВыполненаЧастично))";
    //Серегин М.В. 15.05.2015 16:17:00 новый запрос 
    Зап.Текст = "ВЫБРАТЬ
                |	СтатусыСкладскогоУчетаСрезПоследних.Заказ
                |ПОМЕСТИТЬ ВТ_СтатусыСкладскогоУчета
                |ИЗ
                |	РегистрСведений.СтатусыСкладскогоУчета.СрезПоследних(&ДатаСреза, Заказ.Номер В (&Мас)) КАК СтатусыСкладскогоУчетаСрезПоследних
                |
                |СГРУППИРОВАТЬ ПО
                |	СтатусыСкладскогоУчетаСрезПоследних.Заказ
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
                |	ВЫБОР
                |		КОГДА новаОтчетВодителяЗадания.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентабеззаезда)
                |				ИЛИ новаОтчетВодителяЗадания.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.неДоставлен)
                |			ТОГДА ЗНАЧЕНИЕ(справочник.статусыскладскогоучета.возврат1)
                |		ИНАЧЕ ВЫБОР
                |				КОГДА новаОтчетВодителяЗадания.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.ВыполненаЧастично)
                |						ИЛИ новаОтчетВодителяЗадания.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентасзаездом)
                |						ИЛИ НЕ ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ NULL 
                |							И (НЕ новаОтчетВодителяЗадания.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.неДоставлен)
                |								ИЛИ НЕ новаОтчетВодителяЗадания.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентабеззаезда))
                |					ТОГДА ЗНАЧЕНИЕ(справочник.статусыскладскогоучета.возврат2)
                |			КОНЕЦ
                |	КОНЕЦ КАК СтатусСкладскогоУчета,
                |	новаОтчетВодителяЗадания.Ссылка.Дата КАК Период,
                |	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат,
                |	РеализацияТоваровУслуг.Товары.(
                |		Ссылка,
                |		НомерСтроки,
                |		ЕдиницаИзмерения,
                |		ЕдиницаИзмеренияМест,
                |		Качество,
                |		Количество,
                |		КоличествоМест,
                |		Коэффициент,
                |		Номенклатура,
                |		ПроцентСкидкиНаценки,
                |		СерияНоменклатуры,
                |		СпособСписанияОстаткаТоваров,
                |		СтавкаНДС,
                |		Сумма,
                |		СуммаНДС,
                |		ХарактеристикаНоменклатуры,
                |		Цена,
                |		Склад,
                |		ПроцентАвтоматическихСкидок,
                |		УсловиеАвтоматическойСкидки,
                |		ЗначениеУсловияАвтоматическойСкидки,
                |		КлючСтроки,
                |		КлючСвязи,
                |		ЗаказПокупателя,
                |		Вес
                |	),
                |	новаОтчетВодителяЗадания.РезультатДоставки,
                |	РеализацияТоваровУслуг.ПодарочныеПозиции.(
                |		Ссылка,
                |		НомерСтроки,
                |		ЕдиницаИзмерения,
                |		ЕдиницаИзмеренияМест,
                |		Качество,
                |		Количество,
                |		КоличествоМест,
                |		Коэффициент,
                |		Номенклатура,
                |		ПроцентСкидкиНаценки,
                |		СерияНоменклатуры,
                |		СпособСписанияОстаткаТоваров,
                |		СтавкаНДС,
                |		Сумма,
                |		СуммаНДС,
                |		ХарактеристикаНоменклатуры,
                |		Цена,
                |		Склад,
                |		ПроцентАвтоматическихСкидок,
                |		УсловиеАвтоматическойСкидки,
                |		ЗначениеУсловияАвтоматическойСкидки,
                |		КлючСтроки,
                |		КлючСвязи,
                |		ЗаказПокупателя,
                |		Вес
                |	)
                |ИЗ
                |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
                |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
                |				ПО РеализацияТоваровУслуг.Номер = ВозвратТоваровОтПокупателя.Номер
                |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
                |		ПО новаОтчетВодителяЗадания.Задание.Ссылка = новаМестнаяДоставка.Ссылка
                |ГДЕ
                |	(новаОтчетВодителяЗадания.ПричинаНевыполнения В (ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентабеззаезда), ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.отказклиентасзаездом), ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.НеДоставлен))
                |			ИЛИ новаОтчетВодителяЗадания.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.ВыполненаЧастично)
                |			ИЛИ НЕ ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ NULL 
                |				И новаОтчетВодителяЗадания.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.Выполнена))
                |	И новаОтчетВодителяЗадания.Ссылка.Ссылка = &Док
                |
                |ОБЪЕДИНИТЬ ВСЕ
                |
                |ВЫБРАТЬ
                |	РеализацияТоваровУслуг.Ссылка,
                |	ЗНАЧЕНИЕ(справочник.статусыскладскогоучета.ЗаказВыполнен),
                |	новаОтчетВодителяЗадания.Ссылка.Дата,
                |	ВозвратТоваровОтПокупателя.Ссылка,
                |	РеализацияТоваровУслуг.Товары.(
                |		Ссылка,
                |		НомерСтроки,
                |		ЕдиницаИзмерения,
                |		ЕдиницаИзмеренияМест,
                |		Качество,
                |		Количество,
                |		КоличествоМест,
                |		Коэффициент,
                |		Номенклатура,
                |		ПроцентСкидкиНаценки,
                |		СерияНоменклатуры,
                |		СпособСписанияОстаткаТоваров,
                |		СтавкаНДС,
                |		Сумма,
                |		СуммаНДС,
                |		ХарактеристикаНоменклатуры,
                |		Цена,
                |		Склад,
                |		ПроцентАвтоматическихСкидок,
                |		УсловиеАвтоматическойСкидки,
                |		ЗначениеУсловияАвтоматическойСкидки,
                |		КлючСтроки,
                |		КлючСвязи,
                |		ЗаказПокупателя,
                |		Вес
                |	),
                |	NULL,
                |	ПУСТАЯТАБЛИЦА.(, , , , , , , , , , , , , , , , , , , , , , , , )
                |ИЗ
                |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
                |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
                |				ПО РеализацияТоваровУслуг.Номер = ВозвратТоваровОтПокупателя.Номер
                |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатусыСкладскогоУчета КАК ВТ_СтатусыСкладскогоУчета
                |				ПО РеализацияТоваровУслуг.Ссылка = ВТ_СтатусыСкладскогоУчета.Заказ
                |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
                |		ПО новаОтчетВодителяЗадания.Задание.Ссылка = новаМестнаяДоставка.Ссылка
                |ГДЕ
                |	ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ NULL 
                |	И новаОтчетВодителяЗадания.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.Выполнена)
                |	И новаОтчетВодителяЗадания.Ссылка.Ссылка = &Док";       
    
    Зап.УстановитьПараметр("Док", Ссылка);	
    Зап.УстановитьПараметр("ДатаСреза",Ссылка.Дата);
	Зап.УстановитьПараметр("Мас",ТабНомеров);
	
	Рез = Зап.Выполнить();
	Выб = Рез.Выгрузить();
    
    //+++++Серегин М.В. 09.11.2015 16:38:50 
    БлокировкаДанных = Новый БлокировкаДанных;
    ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтатусыСкладскогоУчета");
    ЭлементБлокировки.УстановитьЗначение("Период",Дата);
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
    ЭлементБлокировки.ИсточникДанных = Рез;
    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
    БлокировкаДанных.Заблокировать();
    //-----Серегин М.В. 09.11.2015 16:38:52 
    
    Для Каждого Тек Из Выб Цикл
        Если Тек.Возврат = NULL Тогда
            Нов = Движения.СтатусыСкладскогоУчета.Добавить();
            ЗаполнитьЗначенияСвойств(Нов, Тек);
            Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
        ИначеЕсли Тек.Товары.Количество() = 0 И Тек.ПодарочныеПозиции.Количество() = 0 Тогда
            Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена ИЛИ Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                Нов = Движения.СтатусыСкладскогоУчета.Добавить();
                ЗаполнитьЗначенияСвойств(Нов, Тек);
                Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат2;
                Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Возврат;
			КонецЕсли;
			
		// Якурнов 21.09.2018 16:48:18
		ИначеЕсли Тек.Товары.Количество() > 0 И Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
            Нов = Движения.СтатусыСкладскогоУчета.Добавить();
            ЗаполнитьЗначенияСвойств(Нов, Тек);
            Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Возврат;
			
        ИначеЕсли Тек.Возврат.Товары.Количество()=0  Тогда
            //Это выполненая доставка ничего делать не нужно
        Иначе
            Нов = Движения.СтатусыСкладскогоУчета.Добавить();
            ЗаполнитьЗначенияСвойств(Нов, Тек);
            Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Обмен;
        КонецЕсли;
    КонецЦикла;	
		
		
КонецПроцедуры	

#Область smv  //Серегин М.В. 13.07.2015 13:19:07

//Функция возвращает количество товара в табичных частях "Товары" и "Подарочные позиции" без услуг по заказам
Функция ПолучитьКоличествоТоваровБезУслугПоЗаказам(Ссылка)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   РеализацияТоваровУслугТовары.Количество
        |ПОМЕСТИТЬ ВТ_Товары
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |ГДЕ
        |   РеализацияТоваровУслугТовары.Ссылка = &Ссылка
        |   И НЕ РеализацияТоваровУслугТовары.Номенклатура.Артикул В
        |               (ВЫБРАТЬ
        |                   УслугиПоЗаказам.Артикул
        |               ИЗ
        |                   Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |               ГДЕ
        |                   НЕ УслугиПоЗаказам.ПометкаУдаления)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугПодарочныеПозиции.Количество
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
        |ГДЕ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка = &Ссылка
        |   И НЕ РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Артикул В
        |               (ВЫБРАТЬ
        |                   УслугиПоЗаказам.Артикул
        |               ИЗ
        |                   Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |               ГДЕ
        |                   НЕ УслугиПоЗаказам.ПометкаУдаления)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СУММА(ВТ_Итог.Количество) КАК Количество
        |ПОМЕСТИТЬ ВТ_Итог
        |ИЗ
        |   ВТ_Товары КАК ВТ_Итог
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЕСТЬNULL(ВТ_Итог.Количество, 0) КАК Количество
        |ИЗ
        |   ВТ_Итог КАК ВТ_Итог";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.Количество;
    Иначе
        Возврат 0;
    КонецЕсли;
       
КонецФункции

Процедура ДвиженияСтатусыДоговоров()
    
    Движения.СтатусыДоговоров.Очистить();
    Движения.СтатусыДоговоров.Записывать = Истина;
    ТаблицаДвижений = СформироватьТаблицуДвиженияСтатусыДоговоров(); 
    
    //+++++Серегин М.В. 09.11.2015 16:38:50 
    БлокировкаДанных = Новый БлокировкаДанных;
    ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтатусыДоговоров");
    ЭлементБлокировки.УстановитьЗначение("Период",Дата);
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
    ЭлементБлокировки.ИсточникДанных = ТаблицаДвижений;
    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
    БлокировкаДанных.Заблокировать();
    //-----Серегин М.В. 09.11.2015 16:38:52 
    
    Для каждого Стр Из ТаблицаДвижений Цикл
        Движение = Движения.СтатусыДоговоров.Добавить();
        Движение.Период = Дата;
        ЗаполнитьЗначенияСвойств(Движение,Стр);
    КонецЦикла;

КонецПроцедуры

Функция СформироватьТаблицуДвиженияСтатусыДоговоров()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   РеализацияТоваровУслуг.Ссылка КАК Заказ,
        |   &СтатусДоговора КАК Статус
        |ИЗ
        |   Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |       ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслуг.Номер
        |           И (РеализацияТоваровУслуг.ЭтоДоговор)
        |ГДЕ
        |   новаОтчетВодителяЗадания.Ссылка = &Ссылка
        |   И новаОтчетВодителяЗадания.РезультатДоставки = &РезультатДоставки";
    
    Запрос.УстановитьПараметр("РезультатДоставки", Справочники.новаРезультатМестнойДоставки.Выполнена);
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    Запрос.УстановитьПараметр("СтатусДоговора", Справочники.СтатусыДоговоров.Подписан);
    
    Возврат Запрос.Выполнить().Выгрузить();    


КонецФункции // СформироватьТаблицуДвиженияСтатусыДоговоров()


Процедура ДвиженияСостоянияЗаказовРасширенный() Экспорт // Для проверки, ОТКЛЮЧИТЬ!!!

    Движения.СостоянияЗаказовРасширенный.Очистить();
    Движения.СостоянияЗаказовРасширенный.Записывать = Истина;
	
	// Задача № 2991
	
	//Для каждого Стр Из Заборы Цикл
	//     Движение = Движения.СостоянияЗаказовРасширенный.Добавить();
	//     Движение.Период = Дата;
	//     Движение.Заказ = Стр.Забор;
	//     ЗаполнитьЗначенияСвойств(Движение,Стр);
	//	 Движение.СторонаПретензий = Стр.ПричинаОтказа.СторонаПретензии;
	//КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	новаОтчетВодителяЗаборы.Ссылка КАК Ссылка,
		|	новаОтчетВодителяЗаборы.Ссылка.Дата КАК Период,
		|	новаОтчетВодителяЗаборы.НомерСтроки КАК НомерСтроки,
		|	новаОтчетВодителяЗаборы.Забор КАК Заказ,
		|	новаОтчетВодителяЗаборы.РезультатДоставки КАК РезультатДоставки,
		|	новаОтчетВодителяЗаборы.ПричинаНевыполнения КАК ПричинаНевыполнения,
		|	новаОтчетВодителяЗаборы.ПричинаОтказа КАК ПричинаОтказа,
		|	новаОтчетВодителяЗаборы.ПричинаОтказа.СторонаПретензии КАК СторонаПретензий,
		|	новаОтчетВодителяЗаборы.Адрес КАК Адрес,
		|	новаОтчетВодителяЗаборы.ОбъемныйБрейкПоДаннымЭкипажа КАК ОбъемныйБрейкПоДаннымЭкипажа,
		|	новаОтчетВодителяЗаборы.ОбъемЗабораПоДаннымПартнера КАК ОбъемЗабораПоДаннымПартнера,
		|	новаОтчетВодителяЗаборы.ИнициаторСостояния КАК ИнициаторСостояния,
		|	Рейс.Ссылка КАК Рейс,
		|	Рейс.ДатаРейса КАК ДатаДоставки
		|ИЗ
		|	Документ.новаОтчетВодителя.Заборы КАК новаОтчетВодителяЗаборы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
		|		ПО новаОтчетВодителяЗаборы.Ссылка.Рейс = Рейс.РейсМестнойДоставки
		|ГДЕ
		|	новаОтчетВодителяЗаборы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.СостоянияЗаказовРасширенный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаДетальныеЗаписи);
		
		Если  Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Рейс) Тогда
			Движение.ДатаДоставки =  ВыборкаДетальныеЗаписи.Заказ.Дата;
		КонецЕсли;
		
	КонецЦикла;
	
	// Задача № 2991

КонецПроцедуры

Функция ВыполнитьОбменДаннымиOZON() Экспорт

	// Михушкин --->> 
	Отказ = Ложь;
	ЕстьРезультатОтправки = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	новаОтчетВодителяЗадания.Ссылка,
	                      |	новаОтчетВодителяЗадания.НомерСтроки,
	                      |	новаОтчетВодителяЗадания.Задание,
	                      |	новаОтчетВодителяЗадания.Выполнено,
	                      |	новаОтчетВодителяЗадания.РезультатДоставки,
	                      |	новаОтчетВодителяЗадания.Перенесено,
	                      |	новаОтчетВодителяЗадания.ПричинаНевыполнения,
	                      |	новаОтчетВодителяЗадания.ДатаПереноса,
	                      |	новаОтчетВодителяЗадания.ПричинаОтказа,
	                      |	новаОтчетВодителяЗадания.НедостаточноДанных,
	                      |	новаОтчетВодителяЗадания.АдресДо,
	                      |	новаОтчетВодителяЗадания.АдресПосле,
	                      |	новаОтчетВодителяЗадания.АдресПослеТекст,
	                      |	новаОтчетВодителяЗадания.ТипОплаты,
	                      |	новаОтчетВодителяЗадания.НовыйИнтервалДоставки,
	                      |	РеализацияТоваровУслуг.Ссылка КАК Заказ
	                      |ИЗ
	                      |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |		ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслуг.Номер
	                      |ГДЕ
	                      |	новаОтчетВодителяЗадания.Ссылка = &Ссылка
						  |	И РеализацияТоваровУслуг.ВладелецТовара = &МагазинОзон");
						  //|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МагазинОзон", Справочники.Контрагенты.НайтиПоКоду("Shop_612"));
	Стр = Запрос.Выполнить().Выбрать();
			 
	//Для каждого Стр Из Задания Цикл
	Пока Стр.Следующий() Цикл	
	// <<--- Михушкин		
	    ЕстьРезультатОтправки = Ложь;
        ТаблицаДопПараметры = Smv.ПолучитьДополнительныеПараметрыЗаказовПоНомеру(Стр.Задание.Номер);
        Если ТаблицаДопПараметры.Количество()>0 Тогда
            Штрихкод = ТаблицаДопПараметры[0].ШтрихкодOZON;    
        КонецЕсли;
        
        Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда 
            Продолжить; 
        КонецЕсли;
        
        Если Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда Тогда
            ReturnReasonID = oz_РаботаССервисом.ПолучитьReturnReasonID(Стр.ПричинаОтказа);
			Попытка
				Результат = oz_РаботаССервисом.PostingReturn(Штрихкод, ReturnReasonID, Стр.Заказ, Ссылка);	
				
				Если Результат <> Неопределено И Результат.Код = 0 Тогда		
					Ozon_ДанныеВыгружены = Истина;		
				КонецЕсли;
				
				Метод = Перечисления.oz_Методы.PostingReturn;
				ЕстьРезультатОтправки = Истина;
			Исключение	
				Сообщить("Ошибка выполнения запроса к Ozon");
				//Отказ = Истина;
			КонецПопытки;                 
			
        ИначеЕсли Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки
            ИЛИ Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь
            ИЛИ Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			Попытка
				Результат = oz_РаботаССервисом.PostingDeliveryDateChange(Штрихкод, Стр.Задание.ВремяПрибытияС, Стр.Задание.ВремяПрибытияПо, Стр.Заказ, Ссылка);
				
				Если Результат <> Неопределено И Результат.Код = 0 Тогда		
					Ozon_ДанныеВыгружены = Истина;		
				КонецЕсли;
				
				Метод = Перечисления.oz_Методы.PostingDeliveryDateChange;
				ЕстьРезультатОтправки = Истина;
			Исключение
				Сообщить("Ошибка выполнения запроса к Ozon");
				//Отказ = Истина;
			КонецПопытки;
			        Иначе
            Если Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
				//ТаблицаОтказныхПозиций = ПолучитьТаблицаОтказныхПозиций(Стр.Задание.Номер); 
				//Результат = oz_РаботаССервисом.PostingGiveout(Штрихкод, Стр.ТипОплаты.Код, ТаблицаОтказныхПозиций, Стр.Заказ);
				//Метод = Перечисления.oz_Методы.PostingGiveout;
			ИначеЕсли Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
				ТаблицаОтказныхПозиций_ВсеТовары = ПолучитьТаблицаОтказныхПозиций_ВсеТовары(Стр.Заказ, ?(Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом, Справочники.ПричиныОтказаПереноса.ПустаяСсылка(), Стр.ПричинаОтказа)); 
				Попытка
					Результат = oz_РаботаССервисом.PostingGiveout(Штрихкод, ?(Стр.ТипОплаты = Справочники.ТипыОплат.Наличные, 1, 0), ТаблицаОтказныхПозиций_ВсеТовары, Стр.Заказ, Ссылка);
					
					Если Результат <> Неопределено И Результат.Код = 0 Тогда		
						Ozon_ДанныеВыгружены = Истина;		
					КонецЕсли;
					
					Метод = Перечисления.oz_Методы.PostingGiveout;
					ЕстьРезультатОтправки = Истина;
				Исключение
					Сообщить("Ошибка выполнения запроса к Ozon");
					//Отказ = Истина;	
				КонецПопытки;
				
			Иначе
				Попытка
					Результат = oz_РаботаССервисом.PostingGiveout(Штрихкод, ?(Стр.ТипОплаты = Справочники.ТипыОплат.Наличные, 1, 0), Неопределено, Стр.Заказ, Ссылка);
					
					Если Результат <> Неопределено И Результат.Код = 0 Тогда		
						Ozon_ДанныеВыгружены = Истина;		
					КонецЕсли;
					
					Метод = Перечисления.oz_Методы.PostingGiveout;
					ЕстьРезультатОтправки = Истина;
				Исключение
					Сообщить("Ошибка выполнения запроса к Ozon");
					//Отказ = Истина;	
				КонецПопытки;
   				
            КонецЕсли;
		КонецЕсли;
		
		//// логирование
		//Если ЕстьРезультатОтправки Тогда	
		//	oz_РаботаССервисом.ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(Результат, Метод, Стр.Заказ);		
		//КонецЕсли;
		    
	КонецЦикла; 
	
	Возврат Отказ;
    
КонецФункции

Функция ПолучитьТаблицаОтказныхПозиций(НомерЗаказа)
	
	
	
	Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	новаОтчетВодителяДанныеМобильногоПриложения.Документ
    |ПОМЕСТИТЬ ВТ
    |ИЗ
    |	Документ.новаОтчетВодителя.ДанныеМобильногоПриложения КАК новаОтчетВодителяДанныеМобильногоПриложения
    |ГДЕ
    |	новаОтчетВодителяДанныеМобильногоПриложения.Доставка.Номер = &Номер
    |	И новаОтчетВодителяДанныеМобильногоПриложения.АктуальныеДанные = ИСТИНА
    |	И новаОтчетВодителяДанныеМобильногоПриложения.Ссылка.Ссылка = &Ссылка
    |
    |СГРУППИРОВАТЬ ПО
    |	новаОтчетВодителяДанныеМобильногоПриложения.Документ
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Штрихкод КАК Barcode,
    |	ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаOZON.ID КАК ReturnReasonID
    |ИЗ
    |	ВТ КАК ВТ
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя.ОтказныеЭкземплярыТоваров КАК ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВзаимосвязьПричинВозвратаOZON КАК ВзаимосвязьПричинВозвратаOZON
    |			ПО ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Ссылка.ПричинаОтказаПереноса = ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаУТЛ
    |		ПО ВТ.Документ = ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Ссылка.Ссылка";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);


    
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|   ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Штрихкод КАК Barcode,
	//|   ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаOZON.ID КАК ReturnReasonID
	//|ИЗ
	//|   Документ.ДанныеЗаказаВодителя.ОтказныеЭкземплярыТоваров КАК ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров
	//|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВзаимосвязьПричинВозвратаOZON КАК ВзаимосвязьПричинВозвратаOZON
	//|       ПО ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Ссылка.ПричинаОтказаПереноса = ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаУТЛ
	//|ГДЕ
	//|   ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Ссылка.Реализация.Номер = &Номер";
    
	//Запрос.УстановитьПараметр("Номер", Номер);
    
    
    Таблица = Запрос.Выполнить().Выгрузить();
	
	ПричинаПоУмолчанию = Справочники.oz_ПричиныВозврата.НайтиПоКоду("6");	
	Для каждого Стр Из Таблица Цикл		
		Если НЕ ЗначениеЗаполнено(Стр.ReturnReasonID) Тогда		
			Стр.ReturnReasonID = ПричинаПоУмолчанию.ID;			
		КонецЕсли;		
	КонецЦикла;
	
    Если Таблица.Количество()>0 Тогда
        Возврат Таблица;
    Иначе
        Возврат Неопределено
    КонецЕсли;
    
КонецФункции // Получить()


Функция ПолучитьТаблицаОтказныхПозиций_ВсеТовары(Заказ, ПричинаОтказа)
		
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	oz_ЭкземплярыТоваровЗаказов.Заказ,
	                      |	oz_ЭкземплярыТоваровЗаказов.Номенклатура,
	                      |	oz_ЭкземплярыТоваровЗаказов.Экземпляр,
	                      |	oz_ЭкземплярыТоваровЗаказов.Штрихкод,
	                      |	oz_ЭкземплярыТоваровЗаказов.id
	                      |ИЗ
	                      |	РегистрСведений.oz_ЭкземплярыТоваровЗаказов КАК oz_ЭкземплярыТоваровЗаказов
	                      |ГДЕ
	                      |	oz_ЭкземплярыТоваровЗаказов.Заказ = &Заказ");
   	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Рез = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Стр Из Рез Цикл
		oz_СоздатьОтказнойЭкземпляр(Стр);		
	КонецЦикла;					
	
	ПричинаВозвратаOZON = Неопределено;
	ЗапросПричина = Новый Запрос("ВЫБРАТЬ
	                             |	oz_ЭкземплярыТоваровЗаказов.Штрихкод КАК Barcode,
	                             |	ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаOZON КАК ReturnReasonID
	                             |ИЗ
	                             |	РегистрСведений.ВзаимосвязьПричинВозвратаOZON КАК ВзаимосвязьПричинВозвратаOZON,
	                             |	РегистрСведений.oz_ЭкземплярыТоваровЗаказов КАК oz_ЭкземплярыТоваровЗаказов
	                             |ГДЕ
	                             |	ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаУТЛ = &ПричинаВозвратаУТЛ
	                             |	И oz_ЭкземплярыТоваровЗаказов.Заказ = &Заказ");
	ЗапросПричина.УстановитьПараметр("Заказ", Заказ);							 
	ЗапросПричина.УстановитьПараметр("ПричинаВозвратаУТЛ", ПричинаОтказа);
	ТабВозвратов = ЗапросПричина.Выполнить().Выгрузить();
	
	ПричинаПоУмолчанию = Справочники.oz_ПричиныВозврата.НайтиПоКоду("6");	
	Для каждого Стр Из ТабВозвратов Цикл		
		Если НЕ ЗначениеЗаполнено(Стр.ReturnReasonID) Тогда		
			Стр.ReturnReasonID = ПричинаПоУмолчанию.ID;			
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ТабВозвратов;
	
	
КонецФункции // Получить()


Процедура oz_СоздатьОтказнойЭкземпляр(СтрокаРез)
	
	ЭкземплярСпр = Справочники.oz_ОтказныеЭкземплярыТоваров.НайтиПоРеквизиту("Штрихкод", СтрокаРез.Штрихкод);
	
	Если НЕ ЗначениеЗаполнено(ЭкземплярСпр) Тогда		
		ЭкземплярСпр = Справочники.oz_ОтказныеЭкземплярыТоваров.СоздатьЭлемент();
		ЭкземплярСпр.Наименование = "" + СтрокаРез.Номенклатура;
		ЭкземплярСпр.Заказ = СтрокаРез.Заказ;
		ЭкземплярСпр.Номенклатура = СтрокаРез.Номенклатура;
		ЭкземплярСпр.id = СтрокаРез.id;
		ЭкземплярСпр.Штрихкод = СтрокаРез.Штрихкод;	
		ЭкземплярСпр.Записать();
	КонецЕсли;
	
	Набор = РегистрыСведений.oz_ЭкземплярыТоваровЗаказов.СоздатьНаборЗаписей();
	Набор.Отбор.Заказ.Установить(СтрокаРез.Заказ);
	Набор.Отбор.Номенклатура.Установить(СтрокаРез.Номенклатура);
	Набор.Отбор.Штрихкод.Установить(СтрокаРез.Штрихкод);
	Набор.Прочитать();
	
	Для каждого Стр Из Набор Цикл
		Стр.Экземпляр = ЭкземплярСпр.Ссылка;		
	КонецЦикла;
	
	Попытка	
		Набор.Записать();
	Исключение	
	КонецПопытки;
	

КонецПроцедуры

#КонецОбласти 


Процедура ЗаполнитьТЧДанныеСклада()

	// заполним ТЧ ДанныеСклада
	ДанныеСклада.Очистить();	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВозвратЗаказовОтВодителя.Ссылка
	                      |ИЗ
	                      |	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
	                      |ГДЕ
	                      |	ВозвратЗаказовОтВодителя.Рейс = &Рейс
	                      |	И ВозвратЗаказовОтВодителя.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Рейс", ЭтотОбъект.Рейс);	
	Рез = Запрос.Выполнить().Выбрать();	
	Пока Рез.Следующий() Цикл
		Нстр = ДанныеСклада.Добавить();
		Нстр.ВозвратЗаказовОтВодителя = Рез.Ссылка;	
	КонецЦикла;
	
	
	
	//// Заполним ЗаказыВозвращеныНаСклад
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.Ссылка,
	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.ВозвратЗаказовОтВодителя,
	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.Заказ,
	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.Ожидается,
	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.ПринятСкладом
	//                      |ПОМЕСТИТЬ ВТ
	//                      |ИЗ
	//                      |	Документ.новаОтчетВодителя.ПринятыеЗаказыПоДаннымСклада КАК новаОтчетВодителяПринятыеЗаказыПоДаннымСклада
	//                      |ГДЕ
	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.Ссылка.Ссылка = &Ссылка
	//                      |	И новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.ПринятСкладом
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ.Ссылка,
	//                      |	ВТ.Заказ,
	//                      |	новаМестнаяДоставка.Ссылка КАК Задание
	//                      |ИЗ
	//                      |	ВТ КАК ВТ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//                      |		ПО ВТ.Заказ.Номер = новаМестнаяДоставка.Номер");
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Рез = Запрос.Выполнить().Выбрать();
	//
	//Пока Рез.Следующий() Цикл
	//	Най = Задания.НайтиСтроки(Новый Структура("Задание", Рез.Задание));
	//	Для каждого Стр Из Най Цикл			
	//		Стр.ЗаказыВозвращеныНаСклад = Истина;		
	//	КонецЦикла;
	//КонецЦикла;
			
	
КонецПроцедуры


// Михушкин - изменение логики проведения в связи с предварительным закрытием - 04.10.2016 --->> 
// Актуализация данных
Процедура АктуализироватьДанныеПредварительноЗакрытыхЗаказов()
	
	МассивЗаказовДляОпределенияСмены = Новый Массив; //Задача № 3345
	
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ПредварительноеЗакрытиеРейса.Ссылка
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	                      |ГДЕ
	                      |	ПредварительноеЗакрытиеРейса.Проведен
	                      |	И ПредварительноеЗакрытиеРейса.ОтчетВодителя = &ОтчетВодителя
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПредварительноеЗакрытиеРейса.Дата УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.Заказ,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.РезультатДоставки,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ТекущаяДатаДоставки,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПричинаНевыполнения,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПричинаОтказа,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ДатаПереноса,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПредварительноеЗакрытие
	                      |ПОМЕСТИТЬ ВТ_предварительное
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПредварительноеЗакрытиеРейса.Заказы КАК ПредварительноеЗакрытиеРейсаЗаказы
	                      |		ПО ВТ.Ссылка = ПредварительноеЗакрытиеРейсаЗаказы.Ссылка.Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПредварительноеЗакрытие,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ДатаПереноса,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.РезультатДоставки,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПричинаОтказа,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ТекущаяДатаДоставки,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПричинаНевыполнения,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_предварительное.Заказ,
	                      |	ВТ_предварительное.РезультатДоставки,
	                      |	ВТ_предварительное.ТекущаяДатаДоставки,
	                      |	ВТ_предварительное.ПричинаНевыполнения,
	                      |	ВТ_предварительное.ПричинаОтказа,
	                      |	ВТ_предварительное.ДатаПереноса,
	                      |	ВТ_предварительное.ПредварительноеЗакрытие,
	                      |	новаОтчетВодителяЗадания.РезультатДоставки КАК РезультатДоставкиФакт,
	                      |	новаОтчетВодителяЗадания.ПричинаНевыполнения КАК ПричинаНевыполненияФакт
	                      |ИЗ
	                      |	ВТ_предварительное КАК ВТ_предварительное
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	                      |		ПО ВТ_предварительное.Заказ.Номер = новаОтчетВодителяЗадания.Задание.Номер
	                      |ГДЕ
	                      |	новаОтчетВодителяЗадания.Ссылка = &ОтчетВодителя");
	Запрос.УстановитьПараметр("ОтчетВодителя", ЭтотОбъект.Ссылка);	
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		Если (Рез.ПричинаНевыполненияФакт = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки ИЛИ Рез.ПричинаНевыполненияФакт = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом) И Рез.ПредварительноеЗакрытие Тогда
			
			Най = Задания.НайтиСтроки(новый Структура("Задание", БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Рез.Заказ.Номер))));



			Если Най.Количество() Тогда
				               

				ДатаПереноса = Неопределено;	
				Если Най[0].РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена ИЛИ Най[0].РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда									
					ДатаПереноса = Рейс.Дата;				
				ИначеЕсли ЗначениеЗаполнено(Най[0].ДатаПереноса) Тогда				
					ДатаПереноса = Най[0].ДатаПереноса;							
				КонецЕсли;
				
				
				
				// изменение даты доставки
				Если ДатаПереноса <> Неопределено Тогда				
					НовД = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
					НовД.Дата = ТекущаяДата();
					НовД.ДатаДоставки = Най[0].ДатаПереноса;
					НовД.Доставка = Най[0].Задание;
					Новд.Заказ    = Рез.Заказ;
					Попытка					
						НовД.Записать(РежимЗаписиДокумента.Запись);
						НовД.Записать(РежимЗаписиДокумента.Проведение);	
					Исключение	
						#Если Клиент Тогда
							Сообщить("Не удалось изменить дату доставки для заказа " + Рез.Заказ);
						#КонецЕсли	
					КонецПопытки;			
				КонецЕсли;				
			КонецЕсли;	
			
			
			
			//отвязка от рейса
			ЗапросРейс = Новый Запрос("ВЫБРАТЬ
			                          |	РейсЗаказы.Ссылка
			                          |ИЗ
			                          |	Документ.Рейс.Заказы КАК РейсЗаказы
			                          |ГДЕ
			                          |	РейсЗаказы.Заказ = &Заказ
			                          |	И РейсЗаказы.Ссылка.Дата > &Дата
			                          |
			                          |СГРУППИРОВАТЬ ПО
			                          |	РейсЗаказы.Ссылка");
			ЗапросРейс.УстановитьПараметр("Заказ", Рез.Заказ);	
			ЗапросРейс.УстановитьПараметр("Дата", Рейс.Дата);
			РезРейс = ЗапросРейс.Выполнить().Выбрать();
			
			ТекВр = ТекущаяДата();

			Пока РезРейс.Следующий() Цикл			
				Набор = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
				Набор.Отбор.Период.Установить(ТекВр);

				НЗапись = Набор.Добавить();
				НЗапись.Заказ = Рез.Заказ;
				НЗапись.Рейс  = РезРейс.Ссылка;
				НЗапись.Период = ТекВр;
				НЗапись.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ПредварительноеЗакрытиеРейса;
				
				// Якурнов 06.08.2018 14:15:52
				НЗапись.ДокументРегистратор = Ссылка;

				Попытка
					Набор.Записать();	
				Исключение	
				КонецПопытки;
				
				// проводим все рейсы из выборки
				РейсОбъект = РезРейс.Ссылка.ПолучитьОбъект();
				РейсОбъект.Записать(РежимЗаписиДокумента.Запись);
				Попытка
					РейсОбъект.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение
					#Если Клиент Тогда
						Сообщить("Проведение документа " + РейсОбъект.Ссылка + " не удалось");
					#КонецЕсли
				КонецПопытки;
							
			КонецЦикла;		
				
		КонецЕсли;	
		
		
		Если Рез.ПредварительноеЗакрытие И (Рез.ПричинаНевыполненияФакт <> Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки И Рез.ПричинаНевыполненияФакт <> Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом) Тогда
			
			НоваяДата = Неопределено;
			ЗапросДата = Новый Запрос("ВЫБРАТЬ
			                          |	ПредварительноеЗакрытиеРейсаЗаказы.Ссылка.Ссылка КАК Ссылка,
			                          |	ПредварительноеЗакрытиеРейсаЗаказы.ТекущаяДатаДоставки
			                          |ИЗ
			                          |	Документ.ПредварительноеЗакрытиеРейса.Заказы КАК ПредварительноеЗакрытиеРейсаЗаказы
			                          |ГДЕ
			                          |	ПредварительноеЗакрытиеРейсаЗаказы.Заказ = &Заказ
			                          |
			                          |УПОРЯДОЧИТЬ ПО
			                          |	ПредварительноеЗакрытиеРейсаЗаказы.Ссылка.Дата");
			ЗапросДата.УстановитьПараметр("Заказ", Рез.Заказ);

			РезДата = ЗапросДата.Выполнить().Выбрать();	



			Если РезДата.Следующий() Тогда
				
				НоваяДата = РезДата.ТекущаяДатаДоставки;
					
				Если НачалоДня(Рез.Заказ.Дата) <> НачалоДня(НоваяДата) Тогда
				
					//ИзменениеДатДоставок(Рез.Заказ.Номер, Рез.ТекущаяДатаДоставки);	
					
					Нов = Движения.ДатыДоставок.Добавить();
					ДоставкаБП = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Рез.Заказ.Номер);
					Нов.Доставка = ДоставкаБП;
					Нов.ДатаДоставки = НоваяДата;
					Нов.Период = ТекущаяДата();
					Д = ДоставкаБП.ПолучитьОбъект();
					Д.Дата = НоваяДата;
					
					ЧН = Час(Д.ВремяОтправленияС);
					ЧК = Час(Д.ВремяОтправленияПо);
					
					МН = Минута(Д.ВремяОтправленияС);
					МК = Минута(Д.ВремяОтправленияПо);
					
					ЧН_ = Час(Д.ВремяПрибытияС);
					ЧК_ = Час(Д.ВремяПрибытияПо);
					
					МН_ = Минута(Д.ВремяПрибытияС);
					МК_ = Минута(Д.ВремяПрибытияПо);		
					
					Д.ВремяОтправленияС = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					Д.ВремяОтправленияПо = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					
					Д.ВремяПрибытияС = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН_, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + "00");
					Д.ВремяПрибытияПо = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					Д.Записать();
					
					
					
					УстановитьДатуВАдминке(Д.Номер, НоваяДата);

					Д_ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Д.Номер);  // , Д.Дата
					Если Не Д_.Пустая() Тогда
						Док = Д_.ПолучитьОбъект();
						Док.Дата = НоваяДата;
						Док.Записать(РежимЗаписиДокумента.Запись);
						Если Док.Проведен Тогда
							Док.Записать(РежимЗаписиДокумента.Проведение);
						КонецеСли;	
						
						МассивЗаказовДляОпределенияСмены.Добавить(Док.Ссылка); //Задача № 3345
						
					КонецеСли;
					
					Д_ = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Д.Номер, Дата); // , Д.Дата
					Если Не Д_.Пустая() Тогда
						Док = Д_.ПолучитьОбъект();
						Док.Дата = НоваяДата;
						Док.Записать(РежимЗаписиДокумента.Запись);
						Если Док.Проведен Тогда
							Док.Записать(РежимЗаписиДокумента.Проведение);
						КонецеСли;	
					КонецеСли;
				
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;

	
	КонецЦикла;
		
	МаршрутизацияЗаказовСервер.УстановкаСменыДляЗаказов(МассивЗаказовДляОпределенияСмены); //Задача № 3345
	
КонецПроцедуры


Процедура АктуализироватьДанныеПредварительноЗакрытыхЗаказов_Новое(ИзменятьДатыДоставки)

	МассивЗаказовДляОпределенияСмены = Новый Массив; //Задача № 3345
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ПредварительноеЗакрытиеРейса.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	                      |ГДЕ
	                      |	ПредварительноеЗакрытиеРейса.Проведен
	                      |	И ПредварительноеЗакрытиеРейса.ОтчетВодителя = &ОтчетВодителя
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПредварительноеЗакрытиеРейса.Дата УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.Заказ КАК Заказ,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.РезультатДоставки КАК РезультатДоставки,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ТекущаяДатаДоставки КАК ТекущаяДатаДоставки,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПричинаНевыполнения КАК ПричинаНевыполнения,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПричинаОтказа КАК ПричинаОтказа,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ДатаПереноса КАК ДатаПереноса,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПредварительноеЗакрытие КАК ПредварительноеЗакрытие
	                      |ПОМЕСТИТЬ ВТ_предварительное
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПредварительноеЗакрытиеРейса.Заказы КАК ПредварительноеЗакрытиеРейсаЗаказы
	                      |		ПО ВТ.Ссылка = ПредварительноеЗакрытиеРейсаЗаказы.Ссылка.Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПредварительноеЗакрытие,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ДатаПереноса,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.РезультатДоставки,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПричинаОтказа,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ТекущаяДатаДоставки,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.ПричинаНевыполнения,
	                      |	ПредварительноеЗакрытиеРейсаЗаказы.Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_предварительное.Заказ КАК Заказ,
	                      |	ВТ_предварительное.РезультатДоставки КАК РезультатДоставки,
	                      |	ВТ_предварительное.ТекущаяДатаДоставки КАК ТекущаяДатаДоставки,
	                      |	ВТ_предварительное.ПричинаНевыполнения КАК ПричинаНевыполнения,
	                      |	ВТ_предварительное.ПричинаОтказа КАК ПричинаОтказа,
	                      |	ВТ_предварительное.ДатаПереноса КАК ДатаПереноса,
	                      |	ВТ_предварительное.ПредварительноеЗакрытие КАК ПредварительноеЗакрытие,
	                      |	новаОтчетВодителяЗадания.РезультатДоставки КАК РезультатДоставкиФакт,
	                      |	новаОтчетВодителяЗадания.ПричинаНевыполнения КАК ПричинаНевыполненияФакт,
	                      |	новаОтчетВодителяЗадания.ДатаПереноса КАК ДатаПереносаФакт,
	                      |	новаМестнаяДоставка.Ссылка КАК Доставка
	                      |ИЗ
	                      |	ВТ_предварительное КАК ВТ_предварительное
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	                      |		ПО ВТ_предварительное.Заказ.Номер = новаОтчетВодителяЗадания.Задание.Номер
	                      |			И (новаОтчетВодителяЗадания.Ссылка = &ОтчетВодителя)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	                      |		ПО ВТ_предварительное.Заказ.Номер = новаМестнаяДоставка.Номер");
	Запрос.УстановитьПараметр("ОтчетВодителя", ЭтотОбъект.Ссылка);	
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		
		Если Рез.ПредварительноеЗакрытие Тогда // предварительное закрытие -->
			
			
			
			// Если перенос
			Если Рез.ПричинаНевыполненияФакт = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки ИЛИ Рез.ПричинаНевыполненияФакт = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			
				Если ИзменятьДатыДоставки Тогда
				
				// Изменение даты
				Если НачалоДня(Рез.Заказ.Дата) <> НачалоДня(Рез.ДатаПереносаФакт) Тогда
					
					НоваяДата = Рез.ДатаПереносаФакт;
					
					Нов = Движения.ДатыДоставок.Добавить();
					Нов.Доставка = Рез.Доставка;
					Нов.ДатаДоставки = НоваяДата;
					Нов.Период = ТекущаяДата();
					Д = Рез.Доставка.ПолучитьОбъект();
					Д.Дата = НоваяДата;
					
					ЧН = Час(Д.ВремяОтправленияС);
					ЧК = Час(Д.ВремяОтправленияПо);
					
					МН = Минута(Д.ВремяОтправленияС);
					МК = Минута(Д.ВремяОтправленияПо);
					
					ЧН_ = Час(Д.ВремяПрибытияС);
					ЧК_ = Час(Д.ВремяПрибытияПо);
					
					МН_ = Минута(Д.ВремяПрибытияС);
					МК_ = Минута(Д.ВремяПрибытияПо);		
					
					Д.ВремяОтправленияС = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					Д.ВремяОтправленияПо = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					
					Д.ВремяПрибытияС = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					Д.ВремяПрибытияПо = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					Д.Записать();
					
					
					
					УстановитьДатуВАдминке(Д.Номер, НоваяДата);

					Д_ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Д.Номер);  // , Д.Дата
					Если Не Д_.Пустая() Тогда
						Док = Д_.ПолучитьОбъект();
						Док.Дата = НоваяДата;
						Док.Записать(РежимЗаписиДокумента.Запись);
						Если Док.Проведен Тогда
							Док.Записать(РежимЗаписиДокумента.Проведение);
						КонецеСли;
						
						МассивЗаказовДляОпределенияСмены.Добавить(Док.Ссылка); //Задача № 3345
						
					КонецеСли;
					
					Д_ = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Д.Номер, Дата); // , Д.Дата
					Если Не Д_.Пустая() Тогда
						Док = Д_.ПолучитьОбъект();
						Док.Дата = НоваяДата;
						Док.Записать(РежимЗаписиДокумента.Запись);
						Если Док.Проведен Тогда
							Док.Записать(РежимЗаписиДокумента.Проведение);
						КонецеСли;	
					КонецеСли;
					
					
					
					//// МАС - 31.07.2017 - №1508 --->> 
					//ТекВр = ТекущаяДата();
					//ЗапросОтвязка = Новый Запрос("ВЫБРАТЬ
					//                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Период КАК Период,
					//                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Заказ КАК Заказ,
					//                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Рейс КАК Рейс,
					//                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.ТипОтвязки КАК ТипОтвязки,
					//                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.ЗаказНайден КАК ЗаказНайден,
					//                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.ВосстановлениеРегламентом КАК ВосстановлениеРегламентом,
					//                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Рейс.Дата КАК РейсДата
					//                             |ИЗ
					//                             |	РегистрСведений.ЗаказыКОтвязкеОтРейсов.СрезПоследних(
					//                             |			,
					//                             |			Заказ = &Заказ
					//                             |				И ТипОтвязки = ЗНАЧЕНИЕ(Перечисление.ТипыОтвязкиЗаказовОтМашин.ПредварительноеЗакрытиеРейса)) КАК ЗаказыКОтвязкеОтРейсовСрезПоследних
					//                             |ГДЕ
					//                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Рейс.Дата > &ДатаРейса");
					//ЗапросОтвязка.УстановитьПараметр("Заказ", Рез.Заказ);
					//ЗапросОтвязка.УстановитьПараметр("ДатаРейса", Рейс.Дата);
					//РезОтвязка = ЗапросОтвязка.Выполнить().Выбрать();
					//
					//Для каждого Ст Из РезОтвязка Цикл
					//
					//	Набор = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
					//	Набор.Отбор.Период.Установить(ТекВр);

					//	НЗапись = Набор.Добавить();
					//	НЗапись.Заказ = Рез.Заказ;
					//	НЗапись.Рейс  = РезОтвязка.Рейс;
					//	НЗапись.Период = ТекВр;
					//	НЗапись.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ОтменаОтвязки;

					//	Попытка
					//		Набор.Записать();	
					//	Исключение	
					//	КонецПопытки;	
					//	
					//	// проводим рейс
					//	РейсОбъект = РезОтвязка.Рейс.ПолучитьОбъект();												
					//	Попытка
					//		РейсОбъект.Записать(РежимЗаписиДокумента.Запись);	
					//	Исключение		
					//	КонецПопытки;
					//
					//КонецЦикла;
					//// <<--- МАС 
					
				
				КонецЕсли;
				КонецЕсли;
				
							
				// ----------------- отвязка
				Если НачалоДня(Рез.ДатаПереноса) <> НачалоДня(Рез.ДатаПереносаФакт) Тогда
					
					//отвязка от рейса						
					ЗапросРейс = Новый Запрос("ВЫБРАТЬ
					                          |	РейсЗаказы.Ссылка КАК Ссылка
					                          |ИЗ
					                          |	Документ.Рейс.Заказы КАК РейсЗаказы
					                          |ГДЕ
					                          |	РейсЗаказы.Заказ = &Заказ
					                          |	И РейсЗаказы.Ссылка.ДатаРейса < &ДатаНачалоДня
					                          |	И РейсЗаказы.Ссылка.Проведен
					                          |
					                          |СГРУППИРОВАТЬ ПО
					                          |	РейсЗаказы.Ссылка");
					ЗапросРейс.УстановитьПараметр("Заказ", Рез.Заказ);	
					ЗапросРейс.УстановитьПараметр("ДатаКонецДня", КонецДня(Рез.ДатаПереноса));
					ЗапросРейс.УстановитьПараметр("ДатаНачалоДня", НачалоДня(Рез.ДатаПереносаФакт));
					РезРейс = ЗапросРейс.Выполнить().Выбрать();
					
					ТекВр = ТекущаяДата();

					Пока РезРейс.Следующий() Цикл			
						
						Набор = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
						Набор.Отбор.Период.Установить(ТекВр);

						НЗапись = Набор.Добавить();
						НЗапись.Заказ = Рез.Заказ;
						НЗапись.Рейс  = РезРейс.Ссылка;
						НЗапись.Период = ТекВр;
						НЗапись.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ПредварительноеЗакрытиеРейса;
						
						// Якурнов 06.08.2018 14:40:05
						НЗапись.ДокументРегистратор = Ссылка;

						Попытка
							Набор.Записать();	
						Исключение	
						КонецПопытки;
						
						// проводим все рейсы из выборки
						РейсОбъект = РезРейс.Ссылка.ПолучитьОбъект();
						
						//+++ БАО 08.06.2017 №1024 
						//Если НЕ РейсОбъект.РейсЗакрыт Тогда
						Если Не baoВызовСервера.РейсЗакрыт(РейсОбъект.Ссылка) Тогда
						//--- БАО 08.06.2017 №1024 
							
							Попытка
								РейсОбъект.Записать(РежимЗаписиДокумента.Запись);	
							Исключение		
							КонецПопытки;
							
							Попытка
								РейсОбъект.Записать(РежимЗаписиДокумента.Проведение);	
							Исключение
								#Если Клиент Тогда
									Сообщить("Проведение документа " + РейсОбъект.Ссылка + " не удалось");
								#КонецЕсли
							КонецПопытки;
							
						КонецЕсли;
					
					КонецЦикла;	// отвязка от рейса
							
					
				КонецЕсли; // <<-- отвязка
				
				
				
				
				//Отмена отвязки 	
				Если НачалоДня(Рез.ДатаПереноса) = НачалоДня(Рез.ДатаПереносаФакт) Тогда
					ТекВр = ТекущаяДата();
					ЗапросОтвязка = новый Запрос("ВЫБРАТЬ
					                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Период,
					                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Заказ,
					                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Рейс,
					                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.ТипОтвязки,
					                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.ЗаказНайден,
					                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.ВосстановлениеРегламентом
					                             |ИЗ
					                             |	Документ.Рейс КАК РейсДок
					                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыКОтвязкеОтРейсов.СрезПоследних(&Период, ) КАК ЗаказыКОтвязкеОтРейсовСрезПоследних
					                             |		ПО ЗаказыКОтвязкеОтРейсовСрезПоследних.Рейс = РейсДок.Ссылка
					                             |ГДЕ
					                             |	ЗаказыКОтвязкеОтРейсовСрезПоследних.Заказ = &Заказ
					                             |	И РейсДок.РейсМестнойДоставки = &Рейс");
					ЗапросОтвязка.УстановитьПараметр("Период", ТекВр);	
					ЗапросОтвязка.УстановитьПараметр("Рейс", Рейс);
					ЗапросОтвязка.УстановитьПараметр("Заказ", Рез.Заказ);
					РезОтвязка = ЗапросОтвязка.Выполнить().Выбрать();
					
					Если РезОтвязка.Следующий() Тогда
					
						Если РезОтвязка.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ПредварительноеЗакрытиеРейса Тогда
										
							ЗапросРейс = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
							                          |	РейсЗаказы.Ссылка КАК Ссылка
							                          |ИЗ
							                          |	Документ.Рейс.Заказы КАК РейсЗаказы
							                          |ГДЕ
							                          |	РейсЗаказы.Заказ = &Заказ
							                          |	И РейсЗаказы.Ссылка.ДатаРейса > &Дата
							                          |	И РейсЗаказы.Ссылка.Проведен
							                          |
							                          |СГРУППИРОВАТЬ ПО
							                          |	РейсЗаказы.Ссылка");
							ЗапросРейс.УстановитьПараметр("Заказ", Рез.Заказ);	
							ЗапросРейс.УстановитьПараметр("Дата", КонецДня(Дата));
						
							РезРейс = ЗапросРейс.Выполнить().Выбрать();
							
							
							Пока РезРейс.Следующий() Цикл			
								Набор = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
								Набор.Отбор.Период.Установить(ТекВр);

								НЗапись = Набор.Добавить();
								НЗапись.Заказ = Рез.Заказ;
								НЗапись.Рейс  = РезРейс.Ссылка;
								НЗапись.Период = ТекВр;
								НЗапись.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ОтменаОтвязки;

								Попытка
									Набор.Записать();	
								Исключение	
								КонецПопытки;
								
								// проводим все рейсы из выборки
								РейсОбъект = РезРейс.Ссылка.ПолучитьОбъект();
																
								//+++ БАО 08.06.2017 №1024 
								//Если НЕ РейсОбъект.РейсЗакрыт Тогда	
								Если Не baoВызовСервера.РейсЗакрыт(РейсОбъект.Ссылка) Тогда
								//--- БАО 08.06.2017 №1024 
	
									Попытка			
										РейсОбъект.Записать(РежимЗаписиДокумента.Запись);	
									исключение			
									конецПопытки;
									
									Попытка
										РейсОбъект.Записать(РежимЗаписиДокумента.Проведение);	
									Исключение
										#Если Клиент Тогда
											Сообщить("Проведение документа " + РейсОбъект.Ссылка + " не удалось");
										#КонецЕсли
									КонецПопытки;
									
								КонецЕсли;
								
							КонецЦикла;	
												
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЕсли;  //Отмена отвязки
				
					
				
				
			Иначе // нет переноса		
				
				НоваяДата = Рез.ТекущаяДатаДоставки;
				
				Если ИзменятьДатыДоставки Тогда
				
				// ---------------- возврат даты								
				Если НачалоДня(Рез.Заказ.Дата) <> НачалоДня(НоваяДата) Тогда	
					
					Нов = Движения.ДатыДоставок.Добавить();
					Нов.Доставка = Рез.Доставка;
					Нов.ДатаДоставки = НоваяДата;
					Нов.Период = ТекущаяДата();
					Д = Рез.Доставка.ПолучитьОбъект();
					Д.Дата = НоваяДата;
					
					ЧН = Час(Д.ВремяОтправленияС);
					ЧК = Час(Д.ВремяОтправленияПо);
					
					МН = Минута(Д.ВремяОтправленияС);
					МК = Минута(Д.ВремяОтправленияПо);
					
					ЧН_ = Час(Д.ВремяПрибытияС);
					ЧК_ = Час(Д.ВремяПрибытияПо);
					
					МН_ = Минута(Д.ВремяПрибытияС);
					МК_ = Минута(Д.ВремяПрибытияПо);		
					
					Д.ВремяОтправленияС = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					Д.ВремяОтправленияПо = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					
					Д.ВремяПрибытияС = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					Д.ВремяПрибытияПо = Дата(Формат(Год(НоваяДата), "ЧГ=") + Формат(Месяц(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(НоваяДата), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
					Д.Записать();
					
					
					
					УстановитьДатуВАдминке(Д.Номер, НоваяДата);

					Д_ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Д.Номер);  // , Д.Дата
					Если Не Д_.Пустая() Тогда
						Док = Д_.ПолучитьОбъект();
						Док.Дата = НоваяДата;
						Док.Записать(РежимЗаписиДокумента.Запись);
						Если Док.Проведен Тогда
							Док.Записать(РежимЗаписиДокумента.Проведение);
						КонецеСли;	
						
						МассивЗаказовДляОпределенияСмены.Добавить(Док.Ссылка); //Задача № 3345

					КонецеСли;
					
					Д_ = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Д.Номер, Дата); // , Д.Дата
					Если Не Д_.Пустая() Тогда
						Док = Д_.ПолучитьОбъект();
						Док.Дата = НоваяДата;
						Док.Записать(РежимЗаписиДокумента.Запись);
						Если Док.Проведен Тогда
							Док.Записать(РежимЗаписиДокумента.Проведение);
						КонецеСли;	
					КонецеСли;
				
				КонецЕсли;
				КонецЕсли;
				
				// ----------------- отвязка от рейса	
				
				// МАС - 19.07.2018 - № --->> 
				ТекВр = ТекущаяДата();
				
				Набор = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
				Набор.Отбор.Период.Установить(ТекВр);

				НЗапись = Набор.Добавить();
				НЗапись.Заказ = Рез.Заказ;
				//НЗапись.Рейс  = РезРейс.Ссылка;
				НЗапись.Период = ТекВр;
				НЗапись.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ПредварительноеЗакрытиеРейса;
				
				// Якурнов 06.08.2018 14:39:02
				НЗапись.ДокументРегистратор = Ссылка;

				Попытка
					Набор.Записать();	
				Исключение	
				КонецПопытки;
				// <<--- МАС 
				
				
				
				ЗапросРейс = Новый Запрос("ВЫБРАТЬ
				                          |	РейсЗаказы.Ссылка КАК Ссылка
				                          |ИЗ
				                          |	Документ.Рейс.Заказы КАК РейсЗаказы
				                          |ГДЕ
				                          |	РейсЗаказы.Заказ = &Заказ
				                          |	И РейсЗаказы.Ссылка.ДатаРейса > &ДатаКонецДня
				                          |	И РейсЗаказы.Ссылка.Проведен
				                          |
				                          |СГРУППИРОВАТЬ ПО
				                          |	РейсЗаказы.Ссылка");
				ЗапросРейс.УстановитьПараметр("Заказ", Рез.Заказ);	
				ЗапросРейс.УстановитьПараметр("ДатаКонецДня", КонецДня(Рез.ТекущаяДатаДоставки));
				//ЗапросРейс.УстановитьПараметр("ДатаНачалоДня", НачалоДня(НоваяДата));
				РезРейс = ЗапросРейс.Выполнить().Выбрать();			

				Пока РезРейс.Следующий() Цикл			
					
					//Набор = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
					//Набор.Отбор.Период.Установить(ТекВр);

					//НЗапись = Набор.Добавить();
					//НЗапись.Заказ = Рез.Заказ;
					//НЗапись.Рейс  = РезРейс.Ссылка;
					//НЗапись.Период = ТекВр;
					//НЗапись.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.ПредварительноеЗакрытиеРейса;

					//Попытка
					//	Набор.Записать();	
					//Исключение	
					//КонецПопытки;
					
					// проводим все рейсы из выборки
					РейсОбъект = РезРейс.Ссылка.ПолучитьОбъект();
					
					//+++ БАО 08.06.2017 №1024 
					//Если НЕ РейсОбъект.РейсЗакрыт Тогда	
					Если Не baoВызовСервера.РейсЗакрыт(РейсОбъект.Ссылка) Тогда
					//--- БАО 08.06.2017 №1024
								
						Попытка
							РейсОбъект.Записать(РежимЗаписиДокумента.Запись);	
						Исключение		
						КонецПопытки;
						
						Попытка
							РейсОбъект.Записать(РежимЗаписиДокумента.Проведение);	
						Исключение
							#Если Клиент Тогда
								Сообщить("Проведение документа " + РейсОбъект.Ссылка + " не удалось");
							#КонецЕсли
						КонецПопытки;
						
					КонецЕсли;
				
				КонецЦикла;	// отвязка от рейса <--
				
			
			КонецЕсли;  
			
			
		КонецЕсли; // предварительное закрытие <--
					
		
	КонецЦикла;
	
	МаршрутизацияЗаказовСервер.УстановкаСменыДляЗаказов(МассивЗаказовДляОпределенияСмены); //Задача № 3345	

КонецПроцедуры

//+++ БАО 10.08.2017 №1626 
//Взял из формы
//Убрал объект

Процедура Заполнить_ПринятыеЗаказыТовары_ПоДаннымСклада() Экспорт 
	
	
	ПринятыеЗаказыПоДаннымСклада.Очистить();
	
	СписокВозвратов = Новый СписокЗначений;
	
	ЗапросРейсы = Новый Запрос("ВЫБРАТЬ
				|	ВозвратЗаказовОтВодителя.Ссылка
				|ИЗ
				|	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
				|ГДЕ
				|	ВозвратЗаказовОтВодителя.Рейс.РейсМестнойДоставки = &РейсМестнойДоставки
				|	И ВозвратЗаказовОтВодителя.Проведен
				|
				|СГРУППИРОВАТЬ ПО
				|	ВозвратЗаказовОтВодителя.Ссылка");
	ЗапросРейсы.УстановитьПараметр("РейсМестнойДоставки", Рейс);	
	РезРейсы = ЗапросРейсы.Выполнить().Выбрать();
	
	Пока РезРейсы.Следующий() Цикл	
		СписокВозвратов.Добавить(РезРейсы.Ссылка);				
	КонецЦикла;
	
	
	//ПринятыеЗаказыПоДаннымСклада
	ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ
	                            |	ВозвратЗаказовОтВодителяДоставки.Доставка КАК Заказ,
	                            |	ВозвратЗаказовОтВодителяДоставки.КВозврату КАК КВозврату,
	                            |	ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью КАК ПринятНаСкладеПолностью,
	                            |	ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично КАК ПринятНаСкладеЧастично,
	                            |	ВозвратЗаказовОтВодителяДоставки.Ссылка КАК ДокВозврат,
	                            |	ВЫБОР
	                            |		КОГДА ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью = ИСТИНА
	                            |			ТОГДА 1
	                            |		КОГДА ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично = ИСТИНА
	                            |			ТОГДА 1
	                            |		ИНАЧЕ 0
	                            |	КОНЕЦ КАК Порядок,
	                            |	новаМестнаяДоставка.Ссылка КАК БПДоставка,
	                            |	ВозвратЗаказовОтВодителяДоставки.ВидПроблемы КАК ВидПроблемы,
	                            |	ВозвратЗаказовОтВодителяДоставки.ЭтоДоговор КАК ЭтоДоговор
	                            |ИЗ
	                            |	Документ.ВозвратЗаказовОтВодителя.Доставки КАК ВозвратЗаказовОтВодителяДоставки
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	                            |		ПО ВозвратЗаказовОтВодителяДоставки.Доставка.Номер = новаМестнаяДоставка.Номер
	                            |ГДЕ
	                            |	ВозвратЗаказовОтВодителяДоставки.Ссылка В(&СписокВозвратов)
	                            |	И ВозвратЗаказовОтВодителяДоставки.Ссылка.ПометкаУдаления = ЛОЖЬ
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Порядок УБЫВ");
	ЗапросЗаказы.УстановитьПараметр("СписокВозвратов", СписокВозвратов);	
	РезЗаказы = ЗапросЗаказы.Выполнить().Выбрать();
	
	
	Пока РезЗаказы.Следующий() Цикл	 
		Если РезЗаказы.КВозврату ИЛИ РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично Тогда
			
			Если ПринятыеЗаказыПоДаннымСклада.НайтиСтроки(Новый Структура("Заказ", РезЗаказы.Заказ)).Количество() Тогда				
				Если НЕ РезЗаказы.ПринятНаСкладеПолностью И НЕ РезЗаказы.ПринятНаСкладеЧастично Тогда					
					Продолжить;				
				КонецЕсли;		
			КонецЕсли;
			
			НСтр = ПринятыеЗаказыПоДаннымСклада.Добавить();	
			НСтр.ВозвратЗаказовОтВодителя = РезЗаказы.ДокВозврат;
			НСтр.Заказ = РезЗаказы.Заказ;
			НСтр.Ожидается = РезЗаказы.КВозврату;
			НСтр.ПринятСкладом = ?(РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично, Истина, Ложь);   
			
			//установка флага ЗаказыВозвращеныНаСклад
			Най = Задания.НайтиСтроки(Новый Структура("Задание", РезЗаказы.БПДоставка));
			Для каждого Стр Из Най Цикл	
				Если РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично Тогда		
					Стр.ЗаказыВозвращеныНаСклад = Истина;		
				КонецЕсли;	
				// МАС - 22.06.2017 - №1158  --->> 
				Стр.ВидПроблемы = РезЗаказы.ВидПроблемы;
				// <<--- МАС 
			КонецЦикла;
			
		КонецЕсли;		 
	КонецЦикла;
	
	
	ТЗПринятыеЗаказыПоДаннымСклада = ПринятыеЗаказыПоДаннымСклада.Выгрузить();
	ТЗПринятыеЗаказыПоДаннымСклада.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Ожидается,ПринятСкладом");
	//Объект.ПринятыеЗаказыПоДаннымСклада.Загрузить(ТЗПринятыеЗаказыПоДаннымСклада);
	//Объект.ПринятыеЗаказыПоДаннымСклада.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Ожидается,ПринятСкладом");
	
	
	ПринятыеТоварыПоДаннымСклада.Очистить();
	
	// ПринятыеТоварыПоДаннымСклада 
	ЗапросТовары = Новый Запрос("ВЫБРАТЬ
				|	ВозвратЗаказовОтВодителяТовары.Ссылка КАК ВозвратЗаказовОтВодителя,
				|	ВозвратЗаказовОтВодителяТовары.Доставка КАК Заказ,
				|	ВозвратЗаказовОтВодителяТовары.Номенклатура КАК Товар,
				|	ВозвратЗаказовОтВодителяТовары.Количество КАК КоличествоПринято,
				|	ВозвратЗаказовОтВодителяТовары.Цена,
				|	ВозвратЗаказовОтВодителяТовары.Сумма,
				|	ВозвратЗаказовОтВодителяТовары.КоличествоИсходное КАК КоличествоОжидается,
				|	ВозвратЗаказовОтВодителяТовары.ПринятНаСкладе,
				|	ВЫБОР
				|		КОГДА ВозвратЗаказовОтВодителяТовары.ПринятНаСкладе
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК Порядок
				|ИЗ
				|	Документ.ВозвратЗаказовОтВодителя.Товары КАК ВозвратЗаказовОтВодителяТовары
				|ГДЕ
				|	ВозвратЗаказовОтВодителяТовары.Ссылка В(&СписокВозвратов)
				|	И ВозвратЗаказовОтВодителяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
				|
				|УПОРЯДОЧИТЬ ПО
				|	Порядок УБЫВ");
	ЗапросТовары.УстановитьПараметр("СписокВозвратов", СписокВозвратов);	
	ТЗРезТовары = ЗапросТовары.Выполнить().Выгрузить();
	
	//Пока РезТовары.Следующий() Цикл
	Для каждого Стр Из ТЗРезТовары Цикл
	
		
		Если ПринятыеТоварыПоДаннымСклада.НайтиСтроки(Новый Структура("Товар", Стр.Товар)).Количество() И ПринятыеТоварыПоДаннымСклада.НайтиСтроки(Новый Структура("Заказ", Стр.Заказ)).Количество() Тогда				
			Если НЕ Стр.ПринятНаСкладе Тогда					
				Продолжить;				
			КонецЕсли;		
		КонецЕсли;
		
		НСтр = ПринятыеТоварыПоДаннымСклада.Добавить();
		НСтр.ВозвратЗаказовОтВодителя = Стр.ВозвратЗаказовОтВодителя;
		НСтр.Заказ = Стр.Заказ;
		НСтр.КоличествоОжидается = Стр.КоличествоОжидается;
		НСтр.КоличествоПринято = Стр.КоличествоПринято;
		НСтр.Товар = Стр.Товар;		 
		
	КонецЦикла;
	
	ТЗТов = ПринятыеТоварыПоДаннымСклада.Выгрузить();
	ТЗТов.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Товар,КоличествоОжидается,КоличествоПринято");
	ПринятыеТоварыПоДаннымСклада.Загрузить(ТЗТов);
	//Объект.ПринятыеТоварыПоДаннымСклада.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Товар,КоличествоОжидается,КоличествоПринято");
	
	
КонецПроцедуры

Процедура ДвижениеПоСтатусамПредварительногоЗакрытияРейсов()
	Движения.СтатусыПредварительногоЗакрытияРейсов.Очистить();
	Движения.СтатусыПредварительногоЗакрытияРейсов.Записывать = Истина;
	
	//Асеев 17.08.2023 (Задача № 5105)>>>
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	новаОтчетВодителяЗадания.Заказ КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПредварительногоЗакрытияРейсов.РейсЗакрытОкончательно) КАК СтатусПредварительногоЗакрытияРейса,
	|	Рейс.Ссылка КАК РейсРесурс,
	|	Рейс.ДатаРейса КАК ДатаРейса,
	|	ВЫБОР
	|		КОГДА новаОтчетВодителяЗадания.ДатаПереноса = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Рейс.ДатаРейса
	|		ИНАЧЕ новаОтчетВодителяЗадания.ДатаПереноса
	|	КОНЕЦ КАК ДатаДоставкиЗаказа,
	|	Рейс.Ссылка КАК Рейс,
	|	&Пользователь КАК Пользователь
	|ИЗ
	|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (новаОтчетВодителяЗадания.Ссылка = &Ссылка)
	|			И (Рейс.РейсМестнойДоставки = &Рейс)
	|			И (Рейс.Проведен)";
	
	Движения.СтатусыПредварительногоЗакрытияРейсов.Загрузить(Запрос.Выполнить().Выгрузить());
	//Асеев 17.08.2023 (Задача № 5105)<<<
	
КонецПроцедуры	

//Процедура Заполнить_ПринятыеЗаказыТовары_ПоДаннымСклада()
//	 
//	 СписокВозвратов = Новый СписокЗначений;
//	 
//	 ЗапросРейсы = Новый Запрос("ВЫБРАТЬ
//	                       |	ВозвратЗаказовОтВодителя.Ссылка
//	                       |ИЗ
//	                       |	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
//	                       |ГДЕ
//	                       |	ВозвратЗаказовОтВодителя.Рейс.РейсМестнойДоставки = &РейсМестнойДоставки
//	                       |	И ВозвратЗаказовОтВодителя.Проведен
//	                       |
//	                       |СГРУППИРОВАТЬ ПО
//	                       |	ВозвратЗаказовОтВодителя.Ссылка");
//	ЗапросРейсы.УстановитьПараметр("РейсМестнойДоставки", Рейс);	
//	РезРейсы = ЗапросРейсы.Выполнить().Выбрать();
//	
//	Пока РезРейсы.Следующий() Цикл	
//		СписокВозвратов.Добавить(РезРейсы.Ссылка);				
//	КонецЦикла;
//	
//	 //Для каждого Стр Из ДанныеСклада Цикл	
//	 //	СписокВозвратов.Добавить(Стр.ВозвратЗаказовОтВодителя);		 
//	 //КонецЦикла;

//	 
//	 //ПринятыеЗаказыПоДаннымСклада
//	 ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ
//	                             |	ВозвратЗаказовОтВодителяДоставки.Доставка КАК Заказ,
//	                             |	ВозвратЗаказовОтВодителяДоставки.КВозврату,
//	                             |	ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью,
//	                             |	ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично,
//	                             |	ВозвратЗаказовОтВодителяДоставки.Ссылка КАК ДокВозврат,
//	                             |	ВЫБОР
//	                             |		КОГДА ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью = ИСТИНА
//	                             |			ТОГДА 1
//	                             |		КОГДА ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично = ИСТИНА
//	                             |			ТОГДА 1
//	                             |		ИНАЧЕ 0
//	                             |	КОНЕЦ КАК Порядок,
//	                             |	новаМестнаяДоставка.Ссылка КАК БПДоставка
//	                             |ИЗ
//	                             |	Документ.ВозвратЗаказовОтВодителя.Доставки КАК ВозвратЗаказовОтВодителяДоставки
//	                             |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
//	                             |		ПО ВозвратЗаказовОтВодителяДоставки.Доставка.Номер = новаМестнаяДоставка.Номер
//	                             |ГДЕ
//	                             |	ВозвратЗаказовОтВодителяДоставки.Ссылка.Ссылка В(&СписокВозвратов)
//	                             |	И ВозвратЗаказовОтВодителяДоставки.Ссылка.ПометкаУдаления = ЛОЖЬ
//	                             |
//	                             |УПОРЯДОЧИТЬ ПО
//	                             |	Порядок УБЫВ");
//	 ЗапросЗаказы.УстановитьПараметр("СписокВозвратов", СписокВозвратов);	
//	 РезЗаказы = ЗапросЗаказы.Выполнить().Выбрать();
//	 
//	 
//	 Пока РезЗаказы.Следующий() Цикл	 
//		 Если РезЗаказы.КВозврату ИЛИ РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично Тогда
//			 
//			Если ПринятыеЗаказыПоДаннымСклада.НайтиСтроки(Новый Структура("Заказ", РезЗаказы.Заказ)).Количество() Тогда				
//				Если НЕ РезЗаказы.ПринятНаСкладеПолностью И НЕ РезЗаказы.ПринятНаСкладеЧастично Тогда					
//					Продолжить;				
//				КонецЕсли;		
//			КонецЕсли;
//			
//		 	НСтр = ПринятыеЗаказыПоДаннымСклада.Добавить();	
//			НСтр.ВозвратЗаказовОтВодителя = РезЗаказы.ДокВозврат;
//			НСтр.Заказ = РезЗаказы.Заказ;
//			НСтр.Ожидается = РезЗаказы.КВозврату;
//			НСтр.ПринятСкладом = ?(РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично, Истина, Ложь);   
//			
//			//установка флага ЗаказыВозвращеныНаСклад
//			Най = Задания.НайтиСтроки(Новый Структура("Задание", РезЗаказы.БПДоставка));
//			Для каждого Стр Из Най Цикл
//				
//				Если РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично Тогда				
//					Стр.ЗаказыВозвращеныНаСклад = Истина;				
//				КонецЕсли;
//						
//			КонецЦикла;
//		 
//		 КонецЕсли;		 
//	 КонецЦикла;
//	 	 
//	 ПринятыеЗаказыПоДаннымСклада.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Ожидается,ПринятСкладом");
//	 
//	 
//	 
//	 
//	 // ПринятыеТоварыПоДаннымСклада 
//	 ЗапросТовары = Новый Запрос("ВЫБРАТЬ
//	                             |	ВозвратЗаказовОтВодителяТовары.Ссылка,
//	                             |	ВозвратЗаказовОтВодителяТовары.Доставка КАК Заказ,
//	                             |	ВозвратЗаказовОтВодителяТовары.Номенклатура КАК Товар,
//	                             |	ВозвратЗаказовОтВодителяТовары.Количество,
//	                             |	ВозвратЗаказовОтВодителяТовары.Цена,
//	                             |	ВозвратЗаказовОтВодителяТовары.Сумма,
//	                             |	ВозвратЗаказовОтВодителяТовары.КоличествоИсходное,
//	                             |	ВозвратЗаказовОтВодителяТовары.ПринятНаСкладе,
//	                             |	ВЫБОР
//	                             |		КОГДА ВозвратЗаказовОтВодителяТовары.ПринятНаСкладе
//	                             |			ТОГДА 1
//	                             |		ИНАЧЕ 0
//	                             |	КОНЕЦ КАК Порядок
//	                             |ИЗ
//	                             |	Документ.ВозвратЗаказовОтВодителя.Товары КАК ВозвратЗаказовОтВодителяТовары
//	                             |ГДЕ
//	                             |	ВозвратЗаказовОтВодителяТовары.Ссылка.Ссылка В(&СписокВозвратов)
//	                             |	И ВозвратЗаказовОтВодителяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
//	                             |
//	                             |УПОРЯДОЧИТЬ ПО
//	                             |	Порядок УБЫВ");
//	 ЗапросТовары.УстановитьПараметр("СписокВозвратов", СписокВозвратов);	
//	 РезТовары = ЗапросТовары.Выполнить().Выбрать();
//	 
//	 Пока РезТовары.Следующий() Цикл
//		 
//		 Если ПринятыеТоварыПоДаннымСклада.НайтиСтроки(Новый Структура("Товар", РезТовары.Товар)).Количество() И ПринятыеТоварыПоДаннымСклада.НайтиСтроки(Новый Структура("Заказ", РезТовары.Заказ)).Количество() Тогда				
//			Если НЕ РезТовары.ПринятНаСкладе Тогда					
//				Продолжить;				
//			КонецЕсли;		
//		 КонецЕсли;
//		
//		 НСтр = ПринятыеТоварыПоДаннымСклада.Добавить();
//		 НСтр.ВозвратЗаказовОтВодителя = РезТовары.Ссылка;
//		 НСтр.Заказ = РезТовары.Заказ;
//		 НСтр.КоличествоОжидается = РезТовары.КоличествоИсходное;
//		 НСтр.КоличествоПринято = РезТовары.Количество;
//		 НСтр.Товар = РезТовары.Товар;		 
//		 
//	 КонецЦикла;
//	 
//	 ПринятыеТоварыПоДаннымСклада.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Товар,КоличествоОжидается,КоличествоПринято");
//	 
//	 
//	 
//	 
//	 // Заполним ЗаказыВозвращеныНаСклад
//	//Запрос = Новый Запрос("ВЫБРАТЬ
//	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.Ссылка,
//	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.ВозвратЗаказовОтВодителя,
//	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.Заказ,
//	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.Ожидается,
//	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.ПринятСкладом
//	//                      |ПОМЕСТИТЬ ВТ
//	//                      |ИЗ
//	//                      |	Документ.новаОтчетВодителя.ПринятыеЗаказыПоДаннымСклада КАК новаОтчетВодителяПринятыеЗаказыПоДаннымСклада
//	//                      |ГДЕ
//	//                      |	новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.Ссылка.Ссылка = &Ссылка
//	//                      |	И новаОтчетВодителяПринятыеЗаказыПоДаннымСклада.ПринятСкладом
//	//                      |;
//	//                      |
//	//                      |////////////////////////////////////////////////////////////////////////////////
//	//                      |ВЫБРАТЬ
//	//                      |	ВТ.Ссылка,
//	//                      |	ВТ.Заказ,
//	//                      |	новаМестнаяДоставка.Ссылка КАК Задание
//	//                      |ИЗ
//	//                      |	ВТ КАК ВТ
//	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
//	//                      |		ПО ВТ.Заказ.Номер = новаМестнаяДоставка.Номер");
//	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	//Рез = Запрос.Выполнить().Выбрать();
//		
//	//Пока Рез.Следующий() Цикл
//	//	Най = Задания.НайтиСтроки(Новый Структура("Задание", Рез.Задание));
//	//	Для каждого Стр Из Най Цикл			
//	//		Стр.ЗаказыВозвращеныНаСклад = Истина;		
//	//	КонецЦикла;
//	//КонецЦикла;
//	
//	
// 
// КонецПроцедуры
// 

//--- БАО 10.08.2017 №1626 
 
 Процедура Заполнить_ТоварыКВозвратуПоДаннымМП() Экспорт 
	 
	// Сначала сформируем таблицу заказов 
	ТабВозвратныхЗаказов = Новый ТаблицаЗначений;
	ТабВозвратныхЗаказов.Колонки.Добавить("Заказ");
	ТабВозвратныхЗаказов.Колонки.Добавить("ВозвратТоваров");
	ТабВозвратныхЗаказов.Колонки.Добавить("РезультатДоставки");
	ТабВозвратныхЗаказов.Колонки.Добавить("ПричинаНеВыполненияДоставки");
	ТабВозвратныхЗаказов.Колонки.Добавить("ДанныеМП");
	ТабВозвратныхЗаказов.Колонки.Добавить("КВозврату");

	
 	Зап = Новый Запрос;					
	Зап.Текст = "ВЫБРАТЬ
	            |	ДанныеЗаказаВодителя.Ссылка КАК Док,
	            |	ДанныеЗаказаВодителя.Номер КАК Номер,
	            |	ДанныеЗаказаВодителя.Дата КАК Дата,
	            |	ДанныеЗаказаВодителя.Проведен,
	            |	ДанныеЗаказаВодителя.Реализация,
	            |	ДанныеЗаказаВодителя.Водитель,
	            |	ДанныеЗаказаВодителя.Статус,
	            |	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
	            |	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
	            |	ДанныеЗаказаВодителя.ДатаПереноса,
	            |	ДанныеЗаказаВодителя.Транспорт,
	            |	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	            |		Ссылка,
	            |		НомерСтроки,
	            |		Номенклатура,
	            |		КоличествоДоставлено
	            |	),
	            |	новаМестнаяДоставка.Ссылка КАК Доставка,
	            |	ДанныеЗаказаВодителя.Реализация.Номер КАК НомерДоставки,
	            |	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат,
	            |	ДанныеЗаказаВодителя.ТипОплаты,
	            |	ДанныеЗаказаВодителя.ТипЗаказа,
	            |	ДанныеЗаказаВодителя.Забор,
	            |	1 КАК Кол,
	            |	ВЫБОР
	            |		КОГДА ВозвратЗаказовОтВодителяДоставки.Ссылка ЕСТЬ NULL 
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ КАК УжеВернули
	            |ИЗ
	            |	Константа.ОсновнойТипПривязкиТелефонов КАК ОсновнойТипПривязкиТелефонов,
	            |	Документ.Рейс.Заказы КАК РейсЗаказы
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |				ПО (РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер)
	            |			ПО ДанныеЗаказаВодителя.Реализация.Номер = новаМестнаяДоставка.Номер
	            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	            |			ПО ДанныеЗаказаВодителя.Реализация.Номер = ВозвратТоваровОтПокупателя.Номер
	            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратЗаказовОтВодителя.Доставки КАК ВозвратЗаказовОтВодителяДоставки
	            |			ПО ДанныеЗаказаВодителя.Реализация = ВозвратЗаказовОтВодителяДоставки.Доставка
	            |				И (ВозвратЗаказовОтВодителяДоставки.Ссылка.Проведен)
	            |				И (ВозвратЗаказовОтВодителяДоставки.Ссылка.Дата МЕЖДУ &Дата И &ДатаОкончания)
	            |				И (ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью = ИСТИНА
	            |					ИЛИ ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично = ИСТИНА)
	            |		ПО РейсЗаказы.Заказ = ДанныеЗаказаВодителя.Реализация
	            |ГДЕ
	            |	ДанныеЗаказаВодителя.Дата МЕЖДУ &Дата И &ДатаОкончания
	            |	И ДанныеЗаказаВодителя.Проведен = ИСТИНА
	            |	И (ДанныеЗаказаВодителя.Водитель = &ВыбВодитель
	            |			ИЛИ ДанныеЗаказаВодителя.Транспорт = &ВыбТранспорт)
	            |	И ДанныеЗаказаВодителя.ТипЗаказа <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	            |	И РейсЗаказы.Ссылка.РейсМестнойДоставки = &БПРейс
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ДанныеЗаказаВодителя.Ссылка,
	            |	ДанныеЗаказаВодителя.Номер,
	            |	ДанныеЗаказаВодителя.Дата,
	            |	ДанныеЗаказаВодителя.Проведен,
	            |	ДанныеЗаказаВодителя.Реализация,
	            |	ДанныеЗаказаВодителя.Водитель,
	            |	ДанныеЗаказаВодителя.Статус,
	            |	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
	            |	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
	            |	ДанныеЗаказаВодителя.ДатаПереноса,
	            |	ДанныеЗаказаВодителя.Транспорт,
	            |	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	            |		Ссылка,
	            |		НомерСтроки,
	            |		Номенклатура,
	            |		КоличествоДоставлено
	            |	),
	            |	NULL,
	            |	ДанныеЗаказаВодителя.Реализация.Номер,
	            |	NULL,
	            |	ДанныеЗаказаВодителя.ТипОплаты,
	            |	ДанныеЗаказаВодителя.ТипЗаказа,
	            |	ДанныеЗаказаВодителя.Забор,
	            |	1,
	            |	ВЫБОР
	            |		КОГДА ВозвратЗаказовОтВодителяДоставки.Ссылка ЕСТЬ NULL 
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ
	            |ИЗ
	            |	Константа.ОсновнойТипПривязкиТелефонов КАК ОсновнойТипПривязкиТелефонов,
	            |	Документ.Рейс.Заказы КАК РейсЗаказы
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратЗаказовОтВодителя.Доставки КАК ВозвратЗаказовОтВодителяДоставки
	            |			ПО ДанныеЗаказаВодителя.Реализация = ВозвратЗаказовОтВодителяДоставки.Доставка
	            |				И (ВозвратЗаказовОтВодителяДоставки.Ссылка.Проведен)
	            |				И (ВозвратЗаказовОтВодителяДоставки.Ссылка.Дата МЕЖДУ &Дата И &ДатаОкончания)
	            |				И (ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью = ИСТИНА
	            |					ИЛИ ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично = ИСТИНА)
	            |		ПО РейсЗаказы.Заказ = ДанныеЗаказаВодителя.Реализация
	            |ГДЕ
	            |	ДанныеЗаказаВодителя.Дата МЕЖДУ &Дата И &ДатаОкончания
	            |	И ДанныеЗаказаВодителя.Проведен = ИСТИНА
	            |	И (ДанныеЗаказаВодителя.Водитель = &ВыбВодитель
	            |			ИЛИ ДанныеЗаказаВодителя.Транспорт = &ВыбТранспорт)
	            |	И ДанныеЗаказаВодителя.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	            |	И РейсЗаказы.Ссылка.РейсМестнойДоставки = &БПРейс
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Дата УБЫВ";
				
	Зап.УстановитьПараметр("Дата", НачалоДня(Рейс.Дата));			
	Зап.УстановитьПараметр("ДатаОкончания", НачалоДня(Рейс.Дата) + 86400);			
	Зап.УстановитьПараметр("ВыбТранспорт", Транспорт);			
	Зап.УстановитьПараметр("ВыбВодитель", Водитель);	
	Зап.УстановитьПараметр("БПРейс", Рейс);
	
	РезТЗ = Зап.Выполнить().Выгрузить();
	
	Для Каждого Тек Из РезТЗ Цикл	
		
		
		// проверка не было ли уже этой реализации
		НайТекДоставка = ТабВозвратныхЗаказов.НайтиСтроки(Новый Структура("Заказ", Тек.Реализация));
		Если НайТекДоставка.Количество() Тогда
			Продолжить;	
		КонецЕсли;
		
		// заполняем ТоварыКВозвратуПоДаннымМП
		Нов = ТабВозвратныхЗаказов.Добавить();
		
		Нов.ДанныеМП = Тек.Док;
		Нов.Заказ = Тек.Реализация;	
		Если ЗначениеЗаполнено(Тек.Возврат) Тогда
			Нов.ВозвратТоваров = Тек.Возврат;
		КонецЕсли;
	
		
		Если ЗначениеЗаполнено(Тек.Возврат) Тогда		
			ЭтоЧастичка = Ложь;		
		Иначе		
			ЭтоЧастичка = ПроверкаНаЧастичку(Тек.Док);			
		КонецЕсли;
		
		Нов.КВозврату = Ложь;
		Если ЗначениеЗаполнено(Тек.ПричинаНеВыполненияДоставки) ИЛИ ЭтоЧастичка ИЛИ ЗначениеЗаполнено(Тек.Возврат) Тогда
			
			Нов.КВозврату = Истина;

			Если Тек.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
				ИЛИ Тек.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом 
				ИЛИ Тек.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда 
				ИЛИ Тек.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
				
					Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;				
			Иначе
				Если ЭтоЧастичка Тогда	
					Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично;
				ИначеЕсли ЗначениеЗаполнено(Тек.Возврат) Тогда	
					Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
				Иначе
					Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;					
				КонецЕсли;									
			КонецЕсли;			
		КонецЕсли;				
			
	КонецЦикла;	

	ТабВозвратныхЗаказов.Свернуть("Заказ,ВозвратТоваров,РезультатДоставки,ПричинаНеВыполненияДоставки,ДанныеМП,КВозврату");
	
	
	// заполняем ТЧ ТоварыКВозвратуПоДаннымМП
	Для каждого Стр Из ТабВозвратныхЗаказов Цикл	
		
		// ------------- Частичный возврат
		Если ЗначениеЗаполнено(Стр.ВозвратТоваров) Тогда
								
			ЗапросВозвраты = Новый Запрос("ВЫБРАТЬ
			                              |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
			                              |	ВозвратТоваровОтПокупателяТовары.Количество,
			                              |	ВозвратТоваровОтПокупателяТовары.Цена,
			                              |	ВозвратТоваровОтПокупателяТовары.Сумма
			                              |ИЗ
			                              |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			                              |ГДЕ
			                              |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка");
			ЗапросВозвраты.УстановитьПараметр("Ссылка", Стр.ВозвратТоваров);
			РезВозвраты = ЗапросВозвраты.Выполнить().Выгрузить();
			
			Для каждого Тек Из РезВозвраты Цикл				
				НовТ = ТоварыКВозвратуПоДаннымМП.Добавить();
				НовТ.ДанныеМП = Стр.ДанныеМП;
				НовТ.Заказ = Стр.Заказ;
				НовТ.Товар = Тек.Номенклатура;
				НовТ.КоличествоОжидается = Тек.Количество;					
			КонецЦикла;
					
			
		ИначеЕсли Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда			
			
			ЗапросЧастичка = Новый Запрос("ВЫБРАТЬ
			                              |	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура,
			                              |	СУММА(ДанныеЗаказаВодителяДоставленныеТовары.КоличествоДоставлено) КАК КоличествоДоставлено
			                              |ПОМЕСТИТЬ ВТ_Данные
			                              |ИЗ
			                              |	Документ.ДанныеЗаказаВодителя.ДоставленныеТовары КАК ДанныеЗаказаВодителяДоставленныеТовары
			                              |ГДЕ
			                              |	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка = &СсылкаМП
			                              |
			                              |СГРУППИРОВАТЬ ПО
			                              |	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ
			                              |	РеализацияТоваровУслугТовары.Номенклатура,
			                              |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
			                              |ПОМЕСТИТЬ ВТ_Реализация
			                              |ИЗ
			                              |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			                              |ГДЕ
			                              |	РеализацияТоваровУслугТовары.Ссылка = &СсылкаРеализация
			                              |
			                              |СГРУППИРОВАТЬ ПО
			                              |	РеализацияТоваровУслугТовары.Номенклатура
			                              |
			                              |ОБЪЕДИНИТЬ ВСЕ
			                              |
			                              |ВЫБРАТЬ
			                              |	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
			                              |	СУММА(РеализацияТоваровУслугПодарочныеПозиции.Количество)
			                              |ИЗ
			                              |	Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
			                              |ГДЕ
			                              |	РеализацияТоваровУслугПодарочныеПозиции.Ссылка = &СсылкаРеализация
			                              |
			                              |СГРУППИРОВАТЬ ПО
			                              |	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ
			                              |	ВТ_Данные.Номенклатура,
			                              |	ВТ_Реализация.Количество - ВТ_Данные.КоличествоДоставлено КАК КоличествоНеДоставлено
			                              |ИЗ
			                              |	ВТ_Данные КАК ВТ_Данные
			                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реализация КАК ВТ_Реализация
			                              |		ПО ВТ_Данные.Номенклатура = ВТ_Реализация.Номенклатура");
						  
			
			Если ЗначениеЗаполнено(Стр.ДанныеМП) Тогда
				
				ЗапросЧастичка.УстановитьПараметр("СсылкаМП", Стр.ДанныеМП);
				ЗапросЧастичка.УстановитьПараметр("СсылкаРеализация", Стр.Заказ);
				РезЧастичка = ЗапросЧастичка.Выполнить().Выгрузить();
				
				Для каждого СтрТ Из РезЧастичка Цикл
					
					Если СтрТ.КоличествоНеДоставлено = NULL Тогда
						Продолжить;	
					КонецЕсли;
					
					Если СтрТ.КоличествоНеДоставлено > 0 Тогда		
						НовТ = ТоварыКВозвратуПоДаннымМП.Добавить();
						НовТ.ДанныеМП = Стр.ДанныеМП;
						НовТ.Заказ = Стр.Заказ;
						НовТ.Товар = СтрТ.Номенклатура;
						НовТ.КоличествоОжидается = СтрТ.КоличествоНеДоставлено;												
					КонецЕсли;	
					
				КонецЦикла;			
				
			КонецЕсли;
						 
		
			
		// ------------- Полный возврат	
		ИначеЕсли Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена ИЛИ НЕ Стр.КВозврату Тогда	
		
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ПоступлениеТоваровУслугТовары.Номенклатура,
			                      |	ПоступлениеТоваровУслугТовары.Количество,
			                      |	ПоступлениеТоваровУслугТовары.Цена,
			                      |	ПоступлениеТоваровУслугТовары.Сумма,
			                      |	УслугиПоЗаказам.Ссылка
			                      |ПОМЕСТИТЬ ВТ
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
			                      |		ПО ПоступлениеТоваровУслугТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
			                      |ГДЕ
			                      |	ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
			                      |
			                      |ОБЪЕДИНИТЬ ВСЕ
			                      |
			                      |ВЫБРАТЬ
			                      |	ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура,
			                      |	СУММА(ПоступлениеТоваровУслугПодарочныеПозиции.Количество),
			                      |	ПоступлениеТоваровУслугПодарочныеПозиции.Цена,
			                      |	СУММА(ПоступлениеТоваровУслугПодарочныеПозиции.Сумма),
			                      |	УслугиПоЗаказам.Ссылка
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.ПодарочныеПозиции КАК ПоступлениеТоваровУслугПодарочныеПозиции
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
			                      |		ПО ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
			                      |ГДЕ
			                      |	ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура,
			                      |	ПоступлениеТоваровУслугПодарочныеПозиции.Цена,
			                      |	УслугиПоЗаказам.Ссылка
			                      |;
			                      |
			                      |////////////////////////////////////////////////////////////////////////////////
			                      |ВЫБРАТЬ
			                      |	ВТ.Номенклатура,
			                      |	СУММА(ВТ.Количество) КАК Количество,
			                      |	ВТ.Цена,
			                      |	СУММА(ВТ.Сумма) КАК Сумма
			                      |ИЗ
			                      |	ВТ КАК ВТ
			                      |ГДЕ
			                      |	ВТ.Ссылка ЕСТЬ NULL 
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	ВТ.Номенклатура,
			                      |	ВТ.Цена");
			Запрос.УстановитьПараметр("Номер", Стр.Заказ.Номер);
			Рез = Запрос.Выполнить().Выгрузить();
			
			Для каждого Тек Из Рез Цикл				
				НовТ = ТоварыКВозвратуПоДаннымМП.Добавить();
				НовТ.ДанныеМП = Стр.ДанныеМП;
				НовТ.Заказ = Стр.Заказ;
				НовТ.Товар = Тек.Номенклатура;
				НовТ.КоличествоОжидается = Тек.Количество;				
			КонецЦикла;
							
		КонецЕсли;	
		
	КонецЦикла;	
	
	
 КонецПроцедуры
 
 
 
 Функция ПроверкаНаЧастичку(ДокДанныеМП)
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура,
	                      |	СУММА(ДанныеЗаказаВодителяДоставленныеТовары.КоличествоДоставлено) КАК КоличествоДоставлено
	                      |ПОМЕСТИТЬ ВТ_Данные
	                      |ИЗ
	                      |	Документ.ДанныеЗаказаВодителя.ДоставленныеТовары КАК ДанныеЗаказаВодителяДоставленныеТовары
	                      |ГДЕ
	                      |	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка = &СсылкаМП
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслугТовары.Номенклатура,
	                      |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
	                      |ПОМЕСТИТЬ ВТ_Реализация
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка = &СсылкаРеализация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РеализацияТоваровУслугТовары.Номенклатура
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
	                      |	СУММА(РеализацияТоваровУслугПодарочныеПозиции.Количество)
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	                      |ГДЕ
	                      |	РеализацияТоваровУслугПодарочныеПозиции.Ссылка = &СсылкаРеализация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Данные.Номенклатура,
	                      |	ВТ_Реализация.Количество - ВТ_Данные.КоличествоДоставлено КАК КоличествоНеДоставлено
	                      |ИЗ
	                      |	ВТ_Данные КАК ВТ_Данные
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реализация КАК ВТ_Реализация
	                      |		ПО ВТ_Данные.Номенклатура = ВТ_Реализация.Номенклатура");
	Запрос.УстановитьПараметр("СсылкаМП", ДокДанныеМП);
	Запрос.УстановитьПараметр("СсылкаРеализация", ДокДанныеМП.Реализация);
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		Если Рез.КоличествоНеДоставлено = NULL Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Рез.КоличествоНеДоставлено > 0 Тогда		
			Возврат	Истина;		
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	

КонецФункции // ()

//+++ БАО 10.08.2017 №1626
//Перенес из формы

Процедура ОбновитьДанныеМПНаСервере(Объект)  Экспорт 
	
	Приоритет = Константы.ПриоритетЗагрузкиДанныхВОтчетВодителя.Получить();
	Если Приоритет.Пустая() Или Приоритет = Перечисления.ПриоритетыЗагрузкиДанныхВОтчетВодителя.ПриоритетДанныхЛогиста Тогда
		ПодтянутьДанныеМобильногоПриложения();
		ПодтянутьДанныеЛогиста();
	ИначеЕсли Приоритет = Перечисления.ПриоритетыЗагрузкиДанныхВОтчетВодителя.ПриоритетДанныхМП Тогда	
		ПодтянутьДанныеЛогиста();
		ПодтянутьДанныеМобильногоПриложения();
	КонецеСли;
	
	// Михушкин - 06.03.2017 - заполняем старый адрес из РС ИсторияСменыАдреса при наличии записей по документу  --->> 
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИсторияСменыАдресаСрезПоследних.Задание,
	|	ИсторияСменыАдресаСрезПоследних.АдресДо,
	|	ИсторияСменыАдресаСрезПоследних.АдресПосле,
	|	ИсторияСменыАдресаСрезПоследних.ТочкаДо,
	|	ИсторияСменыАдресаСрезПоследних.ТочкаПосле
	|ИЗ
	|	РегистрСведений.ИсторияСменыАдреса.СрезПоследних(, ИсточникИзменений = &ИсточникИзменений) КАК ИсторияСменыАдресаСрезПоследних"); 
	Запрос.УстановитьПараметр("ИсточникИзменений", Объект.Ссылка);	
	ТЗСменаАдреса = Запрос.Выполнить().Выгрузить();
	
	//Геннадий #4101 16.03.2021 ->
	МассивДанных  = Новый Массив;
	//Геннадий <-
	
	Для Каждого Тек Из Объект.Задания Цикл
		
		НайСм = ТЗСменаАдреса.НайтиСтроки(Новый Структура("Задание", Тек.Задание));
		Если НайСм.Количество() Тогда
			Тек.АдресДо = СокрЛП(НайСм[0].АдресДо);	
		Иначе
			Тек.АдресДо = СокрЛП(Тек.Задание.ТочкаПрибытия.Адрес.Наименование);
		КонецЕсли;		
		
		Тек.АдресПосле = Тек.Задание.ТочкаПрибытия.Ссылка;
		Тек.АдресПослеТекст = СокрЛП(Тек.Задание.ТочкаПрибытия.Ссылка.Наименование);
		
		//Геннадий #4101 16.03.2021 ->
		//заполним массив данных для отправки запроса к админке
		СтруктураТочки = Новый Структура;
		СтруктураТочки.Вставить("НомерЗаказа",  Число(СокрЛП(Тек.Заказ.Номер)));
		СтруктураТочки.Вставить("ТипЗаказа", 	Перечисления.ТипыЗаказов.Доставка);
		СтруктураТочки.Вставить("Регион", 		Объект.ТерминалДоставки);
		СтруктураТочки.Вставить("Широта", 		Тек.АдресПосле.Адрес.Широта);
		СтруктураТочки.Вставить("Долгота",		Тек.АдресПосле.Адрес.Долгота);
		МассивДанных.Добавить(СтруктураТочки);
		//Геннадий <-
		
		//Асеев 20.08.2021 (Задача № 4643)>>>
		Если Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			Если Тек.СопрДокументыВКоробке Тогда
				Тек.ТребуетсяПодписаниеИВозвратСопрДокументов = Ложь;
				Тек.ТребуетсяПодписаниеИВозвратБНДокументов = Ложь;
			КонецЕсли;
		Иначе
			Тек.ТребуетсяПодписаниеИВозвратСопрДокументов = Ложь;
			Тек.ТребуетсяПодписаниеИВозвратБНДокументов = Ложь;
		КонецЕсли;
		//Асеев 20.08.2021 (Задача № 4643)<<<
		
	КонецЦикла;	
	
	//Геннадий #4101 16.03.2021 ->
	//отправим запрос в админку
	СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьЗоныЗаказов(МассивДанных);
	Для Каждого ТекДанные Из Объект.Задания Цикл
		Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда
			ТекДанные.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов.Получить(ТекДанные.Заказ);
		КонецЕсли;
	КонецЦикла;
	//Геннадий <-
	
	//Для Каждого Тек Из Объект.Задания Цикл
	//	Тек.АдресДо = СокрЛП(Тек.Задание.ТочкаПрибытия.Адрес.Наименование);
	//	Тек.АдресПосле = Тек.Задание.ТочкаПрибытия.Ссылка;
	//КонецЦикла;		
	// <<--- Михушкин
	
	Для каждого Ст Из Объект.Задания Цикл	
		Ст.ЕстьДанныеМП = Ложь;			
	КонецЦикла;
	
	ЗапросМП = Новый Запрос;
	ЗапросМП.Текст =
	"ВЫБРАТЬ
	|	новаОтчетВодителяЗадания.Задание КАК Задание
	|ИЗ
	|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя.ДанныеМобильногоПриложения КАК новаОтчетВодителяДанныеМобильногоПриложения
	|		ПО (новаОтчетВодителяЗадания.Ссылка = &Ссылка)
	|			И (новаОтчетВодителяДанныеМобильногоПриложения.Ссылка = &Ссылка)
	|			И новаОтчетВодителяЗадания.Задание = новаОтчетВодителяДанныеМобильногоПриложения.Доставка
	|			И (новаОтчетВодителяДанныеМобильногоПриложения.АктуальныеДанные)";
	ЗапросМП.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезМП = ЗапросМП.Выполнить().Выбрать();
	
	Пока РезМП.Следующий() Цикл
		НайМП = Объект.Задания.НайтиСтроки(Новый Структура("Задание", РезМП.Задание));	
		Для каждого СтМП Из НайМП Цикл	
			СтМП.ЕстьДанныеМП = Истина;			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьИтоговыеПоказателиНаСервере(Объект, РежимОткрытия = Ложь, ВсегоБезнальныхЗаказов = 0, ЗаказовКВозврату = 0, ЗаборовВыполнено = 0, ЗаказовВыполнено= 0, 
	ЗаказовВыполненоЧастично = 0,
	ЗаказовНеВыполнено = 0,
	ПереносовСЗаездом = 0,
	ПереносовБезЗаезда = 0,
	ОтказовБезЗаезда = 0,
	ОтказовСЗаездом = 0, 
	ЗаборовНеВыполнено = 0
	) Экспорт
	
	ЗаказовВыполнено = 0;
	ЗаказовВыполненоЧастично = 0;
	ЗаказовНеВыполнено = 0;
	ПереносовСЗаездом = 0;
	ПереносовБезЗаезда = 0;
	ОтказовСЗаездом = 0;
	ОтказовБезЗаезда = 0;
	ЗаборовВыполнено = 0;
	ЗаборовНеВыполнено = 0;
	ЗаказовКВозврату = 0;
	ВсегоБезнальныхЗаказов = 0;

	//+++ БАО 08.06.2017 №1024 
	//Если НЕ Объект.РейсЗакрыт Или Не РежимОткрытия Тогда	
	Если НЕ baoВызовСервера.РейсЗакрыт(Объект.Ссылка) Или Не РежимОткрытия Тогда	
	//--- БАО 08.06.2017 №1024 
				
		ИтогоНаличные = 0;
		ИтогоТерминал = 0;	
		
		Зап = Новый Запрос();
		Зап.Текст = "ВЫБРАТЬ
		            |	РеализацияТоваровУслугТовары.Номенклатура,
		            |	РеализацияТоваровУслугТовары.Ссылка.Ссылка КАК Доставка,
		            |	РеализацияТоваровУслугТовары.Количество,
		            |	РеализацияТоваровУслугТовары.Количество КАК ИсходноеКоличество,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА РеализацияТоваровУслугТовары.Цена
		            |		ИНАЧЕ 0
		            |	КОНЕЦ КАК Цена,
		            |	ВЫБОР
		            |		КОГДА ВЫБОР
		            |					КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |						ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |					ИНАЧЕ ТипыОплат.Код
		            |				КОНЕЦ = 1
		            |				ИЛИ ВЫБОР
		            |					КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |						ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |					ИНАЧЕ ТипыОплат.Код
		            |				КОНЕЦ = 2
		            |			ТОГДА РеализацияТоваровУслугТовары.Сумма
		            |		ИНАЧЕ 0
		            |	КОНЕЦ КАК Сумма,
		            |	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД
		            |		ИНАЧЕ 0
		            |	КОНЕЦ КАК СуммаДоставки,
		            |	новаОтчетВодителяЗадания.ПричинаНевыполнения,
		            |	новаОтчетВодителяЗадания.ПричинаОтказа КАК ПричинаОтказаПереноса,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация КАК ЮрЛицо,
		            |	ТипыОплат.Ссылка КАК ТипОплатыСтарый,
		            |	РеализацияТоваровУслугТовары.Ссылка.ВладелецТовара КАК ИнтернетМагазин,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Спецсчет КАК Спецсчет,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ЧекиНеПечатаются,
		            |	РеализацияТоваровУслугТовары.Ссылка.ПредоплатаПоКредиту КАК ПредоплатаБанка,
		            |	новаОтчетВодителяЗадания.РезультатДоставки,
		            |	ВЫБОР
		            |		КОГДА НЕ(ВЫБОР
		            |							КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |								ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |							ИНАЧЕ ТипыОплат.Код
		            |						КОНЕЦ = 1
		            |						ИЛИ ВЫБОР
		            |							КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |								ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |							ИНАЧЕ ТипыОплат.Код
		            |						КОНЕЦ = 2)
		            |				И новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА РеализацияТоваровУслугТовары.Сумма
		            |		ИНАЧЕ 0
		            |	КОНЕЦ КАК СуммаБезнал,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |			ТОГДА новаОтчетВодителяЗадания.ТипОплаты
		            |		ИНАЧЕ ТипыОплат.Ссылка
		            |	КОНЕЦ КАК ТипОплаты,
		            |	ЛОЖЬ КАК ЭтоПодарочнаяПозиция,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КОплатеКлиентом, 0)
		            |		ИНАЧЕ 0
		            |	КОНЕЦ КАК КОплатеКлиентом,
		            |	ВЫБОР
		            |		КОГДА РеализацияТоваровУслугТовары.Ссылка.ВладелецТовара = КонтрагентЯндекс.Значение
		            |			ТОГДА ИСТИНА
		            |		ИНАЧЕ ЛОЖЬ
		            |	КОНЕЦ КАК УчитыватьКОплатеКлиентомСтарая,
		            |	новаОтчетВодителяЗадания.ДатаПереноса,
		            |	РеализацияТоваровУслугТовары.Ссылка.ЭтоДоговор,
		            |	РеализацияТоваровУслугТовары.Ссылка.УчитыватьИтогоКОплате КАК УчитыватьКОплатеКлиентом,
		            |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ПредварительноеЗакрытие, ЛОЖЬ) КАК ПредварительноеЗакрытие
		            |ИЗ
		            |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних(&ДатаЗапроса, ) КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
		            |			ПО РеализацияТоваровУслугТовары.Ссылка.ВладелецТовара.Ссылка = ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент.Ссылка
		            |				И РеализацияТоваровУслугТовары.Ссылка.ТипОплаты = ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты.Код
		            |				И (ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка))
		            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
		            |			ПО РеализацияТоваровУслугТовары.Ссылка.ТипОплаты = ТипыОплат.Код
		            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		            |			ПО РеализацияТоваровУслугТовары.Ссылка.Номер = ВозвратТоваровОтПокупателя.Номер
		            |		ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслугТовары.Ссылка.Номер
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		            |		ПО новаОтчетВодителяЗадания.Задание = новаМестнаяДоставка.Ссылка
		            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		            |		ПО новаОтчетВодителяЗадания.Задание.Номер = ДополнительныеПараметрыЗаказа.Заказ.Номер,
		            |	Константа.КонтрагентЯндекс КАК КонтрагентЯндекс
		            |ГДЕ
		            |	новаОтчетВодителяЗадания.Ссылка.Ссылка = &ОтчетВодителя
		            |
		            |ОБЪЕДИНИТЬ ВСЕ
		            |
		            |ВЫБРАТЬ
		            |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		            |	РеализацияТоваровУслуг.Ссылка,
		            |	-ВозвратТоваровОтПокупателяТовары.Количество,
		            |	-ВозвратТоваровОтПокупателяТовары.Количество,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА ВозвратТоваровОтПокупателяТовары.Цена
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	ВЫБОР
		            |		КОГДА ВЫБОР
		            |					КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |						ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |					ИНАЧЕ ТипыОплат.Код
		            |				КОНЕЦ = 1
		            |				ИЛИ ВЫБОР
		            |					КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |						ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |					ИНАЧЕ ТипыОплат.Код
		            |				КОНЕЦ = 2
		            |			ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	новаОтчетВодителяЗадания.ПричинаНевыполнения,
		            |	новаОтчетВодителяЗадания.ПричинаОтказа,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация,
		            |	ТипыОплат.Ссылка,
		            |	РеализацияТоваровУслуг.ВладелецТовара,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Спецсчет,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ЧекиНеПечатаются,
		            |	РеализацияТоваровУслуг.ПредоплатаПоКредиту,
		            |	новаОтчетВодителяЗадания.РезультатДоставки,
		            |	ВЫБОР
		            |		КОГДА НЕ(ВЫБОР
		            |							КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |								ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |							ИНАЧЕ ТипыОплат.Код
		            |						КОНЕЦ = 1
		            |						ИЛИ ВЫБОР
		            |							КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |								ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |							ИНАЧЕ ТипыОплат.Код
		            |						КОНЕЦ = 2)
		            |				И новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |			ТОГДА новаОтчетВодителяЗадания.ТипОплаты
		            |		ИНАЧЕ ТипыОплат.Ссылка
		            |	КОНЕЦ,
		            |	ЛОЖЬ,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КОплатеКлиентом, 0)
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	ВЫБОР
		            |		КОГДА РеализацияТоваровУслуг.ВладелецТовара = КонтрагентЯндекс.Значение
		            |			ТОГДА ИСТИНА
		            |		ИНАЧЕ ЛОЖЬ
		            |	КОНЕЦ,
		            |	новаОтчетВодителяЗадания.ДатаПереноса,
		            |	РеализацияТоваровУслуг.ЭтоДоговор,
		            |	РеализацияТоваровУслуг.УчитыватьИтогоКОплате,
		            |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ПредварительноеЗакрытие, ЛОЖЬ)
		            |ИЗ
		            |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
		            |				ПО РеализацияТоваровУслуг.ВладелецТовара.Ссылка = ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент.Ссылка
		            |					И РеализацияТоваровУслуг.ТипОплаты = ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты.Код
		            |					И (ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка))
		            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
		            |				ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
		            |			ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = РеализацияТоваровУслуг.Номер
		            |		ПО новаОтчетВодителяЗадания.Задание.Номер = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		            |		ПО новаОтчетВодителяЗадания.Задание = новаМестнаяДоставка.Ссылка
		            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		            |		ПО новаОтчетВодителяЗадания.Задание.Номер = ДополнительныеПараметрыЗаказа.Заказ.Номер,
		            |	Константа.КонтрагентЯндекс КАК КонтрагентЯндекс
		            |ГДЕ
		            |	новаОтчетВодителяЗадания.Ссылка.Ссылка = &ОтчетВодителя
		            |
		            |ОБЪЕДИНИТЬ ВСЕ
		            |
		            |ВЫБРАТЬ
		            |	РеализацияТоваровУслугПП.Номенклатура,
		            |	РеализацияТоваровУслугПП.Ссылка.Ссылка,
		            |	РеализацияТоваровУслугПП.Количество,
		            |	РеализацияТоваровУслугПП.Количество,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА РеализацияТоваровУслугПП.Цена
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	ВЫБОР
		            |		КОГДА ВЫБОР
		            |					КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |						ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |					ИНАЧЕ ТипыОплат.Код
		            |				КОНЕЦ = 1
		            |				ИЛИ ВЫБОР
		            |					КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |						ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |					ИНАЧЕ ТипыОплат.Код
		            |				КОНЕЦ = 2
		            |			ТОГДА РеализацияТоваровУслугПП.Сумма
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	ВозвратТоваровОтПокупателя.Ссылка,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	новаОтчетВодителяЗадания.ПричинаНевыполнения,
		            |	новаОтчетВодителяЗадания.ПричинаОтказа,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация,
		            |	ТипыОплат.Ссылка,
		            |	РеализацияТоваровУслугПП.Ссылка.ВладелецТовара,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Спецсчет,
		            |	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ЧекиНеПечатаются,
		            |	РеализацияТоваровУслугПП.Ссылка.ПредоплатаПоКредиту,
		            |	новаОтчетВодителяЗадания.РезультатДоставки,
		            |	ВЫБОР
		            |		КОГДА НЕ(ВЫБОР
		            |							КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |								ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |							ИНАЧЕ ТипыОплат.Код
		            |						КОНЕЦ = 1
		            |						ИЛИ ВЫБОР
		            |							КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |								ТОГДА новаОтчетВодителяЗадания.ТипОплаты.Код
		            |							ИНАЧЕ ТипыОплат.Код
		            |						КОНЕЦ = 2)
		            |				И новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА РеализацияТоваровУслугПП.Сумма
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.ТипОплаты <> ЗНАЧЕНИЕ(Справочник.ТипыОплат.пустаяСсылка)
		            |			ТОГДА новаОтчетВодителяЗадания.ТипОплаты
		            |		ИНАЧЕ ТипыОплат.Ссылка
		            |	КОНЕЦ,
		            |	ИСТИНА,
		            |	ВЫБОР
		            |		КОГДА новаОтчетВодителяЗадания.РезультатДоставки <> ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
		            |			ТОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КОплатеКлиентом, 0)
		            |		ИНАЧЕ 0
		            |	КОНЕЦ,
		            |	ВЫБОР
		            |		КОГДА РеализацияТоваровУслугПП.Ссылка.ВладелецТовара = КонтрагентЯндекс.Значение
		            |			ТОГДА ИСТИНА
		            |		ИНАЧЕ ЛОЖЬ
		            |	КОНЕЦ,
		            |	новаОтчетВодителяЗадания.ДатаПереноса,
		            |	РеализацияТоваровУслугПП.Ссылка.ЭтоДоговор,
		            |	РеализацияТоваровУслугПП.Ссылка.УчитыватьИтогоКОплате,
		            |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ПредварительноеЗакрытие, ЛОЖЬ)
		            |ИЗ
		            |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПП
		            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних(&ДатаЗапроса, ) КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
		            |			ПО РеализацияТоваровУслугПП.Ссылка.ВладелецТовара.Ссылка = ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент.Ссылка
		            |				И РеализацияТоваровУслугПП.Ссылка.ТипОплаты = ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты.Код
		            |				И (ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка))
		            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
		            |			ПО РеализацияТоваровУслугПП.Ссылка.ТипОплаты = ТипыОплат.Код
		            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		            |			ПО РеализацияТоваровУслугПП.Ссылка.Номер = ВозвратТоваровОтПокупателя.Номер
		            |		ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслугПП.Ссылка.Номер
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		            |		ПО новаОтчетВодителяЗадания.Задание = новаМестнаяДоставка.Ссылка
		            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		            |		ПО новаОтчетВодителяЗадания.Задание.Номер = ДополнительныеПараметрыЗаказа.Заказ.Номер,
		            |	Константа.КонтрагентЯндекс КАК КонтрагентЯндекс
		            |ГДЕ
		            |	новаОтчетВодителяЗадания.Ссылка.Ссылка = &ОтчетВодителя";
		Зап.УстановитьПараметр("ОтчетВодителя", Объект.Ссылка);
		Зап.УстановитьПараметр("ДатаЗапроса", КонецДня(ТекущаяДата()));
		
		РезТЗ = Зап.Выполнить().Выгрузить();
			
		
		
		Для Каждого Тек Из РезТЗ Цикл
			Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
				
				Зап = Новый Запрос;						
				Зап.Текст = "ВЫБРАТЬ
				            |	РеализацияТоваровУслугТовары.Номенклатура,
				            |	РеализацияТоваровУслугТовары.Количество - новаОтчетВодителяПринятыеТоварыПоДаннымСклада.КоличествоПринято КАК Кол
				            |ИЗ
				            |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя.ПринятыеТоварыПоДаннымСклада КАК новаОтчетВодителяПринятыеТоварыПоДаннымСклада
				            |		ПО РеализацияТоваровУслугТовары.Номенклатура = новаОтчетВодителяПринятыеТоварыПоДаннымСклада.Товар
				            |			И РеализацияТоваровУслугТовары.Ссылка.Ссылка = новаОтчетВодителяПринятыеТоварыПоДаннымСклада.Заказ
				            |ГДЕ
				            |	РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер
				            |	И новаОтчетВодителяПринятыеТоварыПоДаннымСклада.Ссылка.Ссылка = &Ссылка
				            |АВТОУПОРЯДОЧИВАНИЕ";
				Зап.УстановитьПараметр("Ссылка", Объект.Ссылка);			
				Зап.УстановитьПараметр("Номер", Тек.Доставка.Номер);			
				Рез = Зап.Выполнить().Выгрузить();
			
				
				Реал = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.Доставка.Номер);
				Струк = Новый Структура;
				Струк.Вставить("Доставка", Реал.Ссылка);
				
				Мас = РезТЗ.НайтиСтроки(Струк);
				Для Каждого Стр Из Мас Цикл
					Най = Рез.Найти(Стр.Номенклатура);
					Если най = Неопределено Тогда
						Стр.Количество = 0;
						Стр.Сумма = 0;
						Стр.СуммаБезнал = 0;
						//ПересчитатьДоставку(Реал);
					Иначе
						Если Най.Кол <> Стр.Количество Тогда
							Стр.Количество = Най.Кол;
	                        Если Реал.Ссылка.ТипОплаты = 1 ИЛИ Реал.Ссылка.ТипОплаты = 2 Тогда
	                            Стр.Сумма = Окр(Стр.Цена*Стр.Количество, 2);
	                        Иначе
	                            //Надо определить по типу оплаты что это безнал
	                            Стр.СуммаБезнал = Окр(Стр.Цена*Стр.Количество, 2);
	                        КонецЕсли;
							//ПересчитатьДоставку(Реал);
						КонецеСли;	
					КонецеСли;	
				КонецЦикла;	
			ИначеЕсли Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда	
				Реал = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.Доставка.Номер);
				Струк = Новый Структура;
				Струк.Вставить("Доставка", Реал.Ссылка);
				
				Мас = РезТЗ.НайтиСтроки(Струк);
				Для Каждого Стр Из Мас Цикл
					Стр.Количество = 0;
					Стр.Сумма = 0;
	                Стр.СуммаБезнал = 0;
					//ПересчитатьДоставку(Реал);
				КонецЦикла;	
			КонецеСли;	
			
		КонецЦикла;
		
		
		ИтогоНаличные = 0;
		ИтогоТерминал = 0;	
		
		
		ЗапросРасчет = Новый Запрос("ВЫБРАТЬ
		                            |	РезТЗ.Возврат,
		                            |	РезТЗ.Доставка,
		                            |	РезТЗ.КОплатеКлиентом,
		                            |	РезТЗ.РезультатДоставки,
		                            |	РезТЗ.Сумма,
									|	РезТЗ.СуммаБезнал,
		                            |	РезТЗ.СуммаДоставки,
		                            |	РезТЗ.ТипОплаты,
		                            |	РезТЗ.УчитыватьКОплатеКлиентом
		                            |ПОМЕСТИТЬ ВТ
		                            |ИЗ
		                            |	&РезТЗ КАК РезТЗ
		                            |;
		                            |
		                            |////////////////////////////////////////////////////////////////////////////////
		                            |ВЫБРАТЬ
		                            |	ВТ.Возврат,
		                            |	ВТ.Доставка,
		                            |	МАКСИМУМ(ЕСТЬNULL(ВТ.КОплатеКлиентом, 0)) КАК КОплатеКлиентом,
		                            |	ВТ.РезультатДоставки,
		                            |	СУММА(ЕСТЬNULL(ВТ.Сумма, 0)) КАК Сумма,
									|	СУММА(ЕСТЬNULL(ВТ.СуммаБезнал, 0)) КАК СуммаБезнал,
		                            |	МАКСИМУМ(ЕСТЬNULL(ВТ.СуммаДоставки, 0)) КАК СуммаДоставки,
		                            |	ВТ.ТипОплаты,
		                            |	ЕСТЬNULL(ВТ.УчитыватьКОплатеКлиентом, ЛОЖЬ) КАК УчитыватьКОплатеКлиентом
		                            |ИЗ
		                            |	ВТ КАК ВТ
		                            |
		                            |СГРУППИРОВАТЬ ПО
		                            |	ВТ.ТипОплаты,
		                            |	ВТ.РезультатДоставки,
		                            |	ВТ.Возврат,
		                            |	ВТ.Доставка,
		                            |	ЕСТЬNULL(ВТ.УчитыватьКОплатеКлиентом, ЛОЖЬ)");
		ЗапросРасчет.УстановитьПараметр("РезТЗ", РезТЗ);
		РезТЗРасчет = ЗапросРасчет.Выполнить().Выгрузить();
		
		Для каждого СтрРасчет Из РезТЗРасчет Цикл
			
			//СтрСтоимость = 0;
			
			
			Если СтрРасчет.ТипОплаты = Справочники.ТипыОплат.Наличные Тогда
				
				Если СтрРасчет.УчитыватьКОплатеКлиентом Тогда				
					ИтогоНаличные = ИтогоНаличные + СтрРасчет.КОплатеКлиентом;	
					//СтрСтоимость = СтрРасчет.КОплатеКлиентом;
				Иначе
					ИтогоНаличные = ИтогоНаличные + СтрРасчет.Сумма + СтрРасчет.СуммаДоставки;	
					//СтрСтоимость = СтрРасчет.Сумма + СтрРасчет.СуммаДоставки;
				КонецЕсли;
				
			ИначеЕсли СтрРасчет.ТипОплаты = Справочники.ТипыОплат.Терминал Тогда	
				
				Если СтрРасчет.УчитыватьКОплатеКлиентом Тогда				
					ИтогоТерминал = ИтогоТерминал + СтрРасчет.КОплатеКлиентом;	
					//СтрСтоимость = СтрРасчет.КОплатеКлиентом;
				Иначе
					ИтогоТерминал = ИтогоТерминал + СтрРасчет.СуммаБезнал + СтрРасчет.СуммаДоставки;	
					//СтрСтоимость = СтрРасчет.СуммаБезнал + СтрРасчет.СуммаДоставки;
				КонецЕсли;
			
			КонецЕсли;	
					
			//Если СтрСтоимость <> 0 Тогда			
			//	НомСтр = СтрРасчет.Доставка.Номер;
			//	НайСт = Объект.Задания.НайтиСтроки(Новый Структура("Задание", БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НомСтр)));
			//	Если НайСт.Количество() Тогда			
			//		НайСт[0].Стоимость = СтрСтоимость;				
			//	КонецЕсли;					
			//КонецЕсли;		
		
		КонецЦикла;
		
		Объект.ИтогоНаличные = ИтогоНаличные;
		Объект.ИтогоТерминал = ИтогоТерминал;
		
	КонецЕсли;
	
	//Асеев 03.03.2023 (Задача № 5003)>>>
	//счКоличествоЗаказовОтказСЗаездом = 0;
	счКоличествоЗаборовОтказСЗаездом = 0;
	//счКоличествоЗаказовПереносСЗаездом = 0;
	//счКоличествоЗаказовДоставленЧастично = 0;
	//счКоличествоЗаказовОтказБезЗаезда = 0;
	счКоличествоЗаборовОтказБезЗаезда = 0;
	//счКоличествоЗаказовПеренос = 0;
	//Асеев 03.03.2023 (Задача № 5003)<<<

	Для Каждого Стр Из Объект.Задания Цикл
		Если Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена Или Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
			ЗаказовВыполнено = ЗаказовВыполнено + 1;			
			Если Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
				ЗаказовВыполненоЧастично = ЗаказовВыполненоЧастично + 1;
				ЗаказовКВозврату = ЗаказовКВозврату + 1;
			КонецЕсли;
		Иначе//Если Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
			ЗаказовНеВыполнено = ЗаказовНеВыполнено + 1;
			ЗаказовКВозврату = ЗаказовКВозврату + 1;
			Если Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
				ПереносовСЗаездом = ПереносовСЗаездом + 1;
			ИначеЕсли Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Тогда
				ПереносовБезЗаезда = ПереносовБезЗаезда + 1;
			ИначеЕсли Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
				ОтказовСЗаездом = ОтказовСЗаездом + 1;
			ИначеЕсли Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда Тогда
				ОтказовБезЗаезда = ОтказовБезЗаезда + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.ТипОплаты = Справочники.ТипыОплат.БезналичныйРасчет Тогда		
			ВсегоБезнальныхЗаказов = ВсегоБезнальныхЗаказов + 1;			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Стр Из Объект.Заборы Цикл
	    Если Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена Или Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
			ЗаборовВыполнено = ЗаборовВыполнено + 1;			
		Иначе//Если Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
			ЗаборовНеВыполнено = ЗаборовНеВыполнено + 1;
			//Асеев 03.03.2023 (Задача № 5003)>>>
			Если Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
				счКоличествоЗаборовОтказСЗаездом = счКоличествоЗаборовОтказСЗаездом + 1;
			ИначеЕсли Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда Тогда
				счКоличествоЗаборовОтказБезЗаезда = счКоличествоЗаборовОтказБезЗаезда + 1;
			КонецЕсли;
			//Асеев 03.03.2023 (Задача № 5003)<<<
		КонецЕсли;	
	КонецЦикла;	
	
	//Асеев 03.03.2023 (Задача № 5003)>>>
	Объект.КоличествоЗаказовОтказСЗаездом = ОтказовСЗаездом;
	Объект.КоличествоЗаборовОтказСЗаездом = счКоличествоЗаборовОтказСЗаездом;
	Объект.КоличествоЗаказовПереносСЗаездом = ПереносовСЗаездом;
	Объект.КоличествоЗаказовДоставленЧастично = ЗаказовВыполненоЧастично;
	Объект.КоличествоЗаказовОтказБезЗаезда = ОтказовБезЗаезда;
	Объект.КоличествоЗаборовОтказБезЗаезда = счКоличествоЗаборовОтказБезЗаезда;
	Объект.КоличествоЗаказовПеренос = ПереносовСЗаездом + ПереносовБезЗаезда;
	//Асеев 03.03.2023 (Задача № 5003)<<<
	
	Объект.КоличествоЗаказов = Объект.Задания.Количество();	
	
	Объект.ВыполненоЗаказов = ЗаказовВыполнено;

	Объект.КоличествоЗаборов = Объект.Заборы.Количество();
	
	Объект.ВыполненоЗаборов = ЗаборовВыполнено;

	Объект.КоличествоЗаказовКВозврату = ЗаказовКВозврату;
	
	Объект.КоличествоБезнальныхЗаказов = ВсегоБезнальныхЗаказов;

КонецПроцедуры

//--- БАО 10.08.2017 №1626

//CeHbKA #4101 28.07.2020
Функция ВыполнитьДвиженияПоРСзпИсходныеДанныеРасчетаЗППоЗаказам() Экспорт
	
	Движения.зпИсходныеДанныеРасчетаЗППоЗаказам.Записывать = Истина;
	Движения.зпИсходныеДанныеРасчетаЗППоЗаказам.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивнаяСхемаПолигональнойМаршрутизацииСрезПоследних.СхемаПолигональнойМаршрутизации КАК СхемаПолигональнойМаршрутизации
	|ПОМЕСТИТЬ ВТ_АктивнаяСхемаПолигональнойМаршрутизации
	|ИЗ
	|	РегистрСведений.АктивнаяСхемаПолигональнойМаршрутизации.СрезПоследних(&НачалоРейса, РегиональныйТерминал = &ТерминалДоставки) КАК АктивнаяСхемаПолигональнойМаршрутизацииСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаОтчетВодителяЗадания.Задание КАК Задание,
	|	новаОтчетВодителяЗадания.ПричинаНевыполнения КАК ПричинаНевыполнения,
	|	новаОтчетВодителяЗадания.РезультатДоставки КАК РезультатДоставки,
	|	новаОтчетВодителяЗадания.ЗонаДоставкиЗП КАК ЗонаДоставкиЗП,
	|	новаОтчетВодителяЗадания.УровеньОбслуживанияЗаказа КАК УровеньОбслуживанияЗаказа,
	|	новаОтчетВодителяЗадания.Заказ КАК Заказ,
	|	ВТ_АктивнаяСхемаПолигональнойМаршрутизации.СхемаПолигональнойМаршрутизации КАК СхемаПолигональнойМаршрутизации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка) КАК ТипЗаказа,
	|	NULL КАК АдресПосле
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктивнаяСхемаПолигональнойМаршрутизации КАК ВТ_АктивнаяСхемаПолигональнойМаршрутизации
	|		ПО (ИСТИНА)
	|ГДЕ
	|	новаОтчетВодителяЗадания.Ссылка = &Ссылка
	|	И новаОтчетВодителяЗадания.ПричинаНевыполнения В (ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом), ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	новаОтчетВодителяЗаборы.ПричинаНевыполнения,
	|	новаОтчетВодителяЗаборы.РезультатДоставки,
	|	новаОтчетВодителяЗаборы.ЗонаДоставкиЗП,
	|	ЗНАЧЕНИЕ(Перечисление.УровниОбслуживания.СтандартныйУровень),
	|	новаОтчетВодителяЗаборы.Забор,
	|	ВТ_АктивнаяСхемаПолигональнойМаршрутизации.СхемаПолигональнойМаршрутизации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор),
	|	новаОтчетВодителяЗаборы.АдресПосле
	|ИЗ
	|	Документ.новаОтчетВодителя.Заборы КАК новаОтчетВодителяЗаборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктивнаяСхемаПолигональнойМаршрутизации КАК ВТ_АктивнаяСхемаПолигональнойМаршрутизации
	|		ПО (ИСТИНА)
	|ГДЕ
	|	новаОтчетВодителяЗаборы.Ссылка = &Ссылка
	|	И новаОтчетВодителяЗаборы.ПричинаНевыполнения В (ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ КАК Заказ,
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации КАК ПолигонМаршрутизации,
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Порядок КАК НомерПолигона,
	|	МАКСИМУМ(НЕ зпВидыПолигоновПарковкиНомераПолигоновПарковки_Стандартные.Ссылка ЕСТЬ NULL) КАК СтандартнаяОплата,
	|	МАКСИМУМ(НЕ зпВидыПолигоновПарковкиНомераПолигоновПарковки_Повышенные.Ссылка ЕСТЬ NULL) КАК ПовышеннаяОплата
	|ПОМЕСТИТЬ ВТ_ПолигоныМаршрутизации
	|ИЗ
	|	РегистрСведений.ПолигоныМаршрутизацииЗаказов.СрезПоследних(
	|			&НачалоРейса,
	|			(Заказ, СхемаМаршрутизации) В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.Заказ КАК Заказ,
	|					ВТ_Заказы.СхемаПолигональнойМаршрутизации КАК СхемаПолигональнойМаршрутизации
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ПолигоныМаршрутизацииЗаказовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.зпВидыПолигоновПарковки.НомераПолигоновПарковки КАК зпВидыПолигоновПарковкиНомераПолигоновПарковки_Стандартные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпСхемыРасчетаЗП КАК зпСхемыРасчетаЗП_Стандартные
	|			ПО (зпСхемыРасчетаЗП_Стандартные.Ссылка = &СхемаРасчетаЗП)
	|				И зпВидыПолигоновПарковкиНомераПолигоновПарковки_Стандартные.Ссылка = зпСхемыРасчетаЗП_Стандартные.ВидПолигоновПарковкиСтандарт
	|		ПО ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Порядок = зпВидыПолигоновПарковкиНомераПолигоновПарковки_Стандартные.НомерПолигона
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.зпВидыПолигоновПарковки.НомераПолигоновПарковки КАК зпВидыПолигоновПарковкиНомераПолигоновПарковки_Повышенные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпСхемыРасчетаЗП КАК зпСхемыРасчетаЗП_Повышенные
	|			ПО (зпСхемыРасчетаЗП_Повышенные.Ссылка = &СхемаРасчетаЗП)
	|				И зпВидыПолигоновПарковкиНомераПолигоновПарковки_Повышенные.Ссылка = зпСхемыРасчетаЗП_Повышенные.ВидПолигоновПарковкиПовышеннаяОплата
	|		ПО ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Порядок = зпВидыПолигоновПарковкиНомераПолигоновПарковки_Повышенные.НомерПолигона
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ,
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации,
	|	ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеПараметрыПолигоновМаршрутизацииСрезПоследних.НомерПолигона КАК НомерПолигона,
	|	ДополнительныеПараметрыПолигоновМаршрутизацииСрезПоследних.ПолигонСоСложнойПарковкой КАК ПолигонСоСложнойПарковкой
	|ПОМЕСТИТЬ ВТ_ПараметрыПолигонов
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыПолигоновМаршрутизации.СрезПоследних(
	|			&НачалоРейса,
	|			НомерПолигона В
	|				(ВЫБРАТЬ
	|					ВТ_ПолигоныМаршрутизации.НомерПолигона КАК НомерПолигона
	|				ИЗ
	|					ВТ_ПолигоныМаршрутизации КАК ВТ_ПолигоныМаршрутизации)) КАК ДополнительныеПараметрыПолигоновМаршрутизацииСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачалоРейса КАК Период,
	|	&ТерминалДоставки КАК Регион,
	|	&НачалоРейса КАК ДатаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость) КАК ВидЗанятости,
	|	&Рейс КАК РейсМестнойДоставки,
	|	Рейс.Ссылка КАК Рейс,
	|	ВТ_Заказы.ТипЗаказа КАК ТипЗаказа,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|			ТОГДА новаМестнаяДоставка.ТочкаПрибытия
	|		ИНАЧЕ ЗаборТовара.ТочкаДоставки
	|	КОНЕЦ КАК ТочкаДоставки,
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ТарифицируемыйВес, 0) КАК ТарифицируемыйВес,
	|	ЕСТЬNULL(ЗаборТовара.ОбъемЗабора, 0) КАК ОбъемЗабора,
	|	ВТ_Заказы.ПричинаНевыполнения КАК ПричинаНевыполнения,
	|	ВТ_Заказы.РезультатДоставки КАК РезультатДоставки,
	|	ВТ_Заказы.ЗонаДоставкиЗП КАК ЗонаДоставки,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|			ТОГДА новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта
	|		ИНАЧЕ ВТ_Заказы.АдресПосле.Адрес.Широта
	|	КОНЕЦ КАК Широта,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|			ТОГДА новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота
	|		ИНАЧЕ ВТ_Заказы.АдресПосле.Адрес.Долгота
	|	КОНЕЦ КАК Долгота,
	|	ВТ_Заказы.УровеньОбслуживанияЗаказа КАК УровеньОбслуживанияЗаказа,
	|	ВТ_ПолигоныМаршрутизации.ПолигонМаршрутизации КАК ПолигонМаршрутизацииЗаказа,
	|	ВТ_ПараметрыПолигонов.ПолигонСоСложнойПарковкой КАК ПолигонМаршрутизацииСоСложнойПарковкой,
	|	ВТ_Заказы.ПричинаНевыполнения КАК ПричинаНевыполненияДоставки,
	|	ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника КАК Роль,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|				И ВТ_Заказы.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка)
	|				И ЕСТЬNULL(ВТ_ПараметрыПолигонов.ПолигонСоСложнойПарковкой, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЗаказовВыполненныхПлатнаяПарковка,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|				И ВТ_Заказы.ПричинаНевыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом)
	|				И ЕСТЬNULL(ВТ_ПараметрыПолигонов.ПолигонСоСложнойПарковкой, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЗаказовПереносСЗаездомПлатнаяПарковка,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|				И ВТ_Заказы.ПричинаНевыполнения В (ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
	|				И ЕСТЬNULL(ВТ_ПолигоныМаршрутизации.СтандартнаяОплата, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	|				И ВТ_Заказы.ПричинаНевыполнения В (ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
	|				И ЕСТЬNULL(ВТ_ПолигоныМаршрутизации.ПовышеннаяОплата, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (Рейс.РейсМестнойДоставки = &Рейс)
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО ВТ_Заказы.Задание = новаМестнаяДоставка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|		ПО ВТ_Заказы.Заказ = ЗаборТовара.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПолигоныМаршрутизации КАК ВТ_ПолигоныМаршрутизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыПолигонов КАК ВТ_ПараметрыПолигонов
	|			ПО ВТ_ПолигоныМаршрутизации.НомерПолигона = ВТ_ПараметрыПолигонов.НомерПолигона
	|		ПО ВТ_Заказы.Заказ = ВТ_ПолигоныМаршрутизации.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних(&КонецРейса, ФизЛицо = &ФизЛицоВодителя) КАК ДополнительныеПараметрыФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|ИТОГИ
	|	СУММА(КоличествоЗаказовВыполненныхПлатнаяПарковка),
	|	СУММА(КоличествоЗаказовПереносСЗаездомПлатнаяПарковка),
	|	СУММА(КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт),
	|	СУММА(КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НачалоРейса", Рейс.ДатаНачала);
	Запрос.УстановитьПараметр("КонецРейса", КонецДня(Рейс.ДатаНачала));
	Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", СхемаРасчетаЗП);
	
	ФизЛицоВодителя = Водитель.ФизЛицо;
	
	Запрос.УстановитьПараметр("ФизЛицоВодителя", ФизЛицоВодителя);
	
	ДанныеПоЗаказам = Новый Структура("КоличествоЗаказовВыполненныхПлатнаяПарковка,КоличествоЗаказовПереносСЗаездомПлатнаяПарковка,КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт,КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата", 0, 0, 0, 0);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ДанныеПоЗаказам;
	КонецЕсли;

	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеПоЗаказам, Выборка);
	
	ФизЛицоЭкспедитора = Экспедитор.ФизЛицо;
	РольЭкспедитора = Справочники.РолиСотрудников.Экспедитор;

	ЕстьЭкспедитор = Не Экспедитор.Пустая();
	Если ЕстьЭкспедитор Тогда
		СоставЭкипажа = Перечисления.зпСоставЭкипажа.ВодительСЭкспедитором;
	Иначе
		СоставЭкипажа = Перечисления.зпСоставЭкипажа.ВодительБезЭкспедитора;
	КонецЕсли;
	
	ТаблицаДвижений = Движения.зпИсходныеДанныеРасчетаЗППоЗаказам.ВыгрузитьКолонки();
	НомерСтроки = 0;
	
	Выборка = Выборка.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДвижения = ТаблицаДвижений.Добавить();
		СтрокаДвижения.Активность = Истина;
		
		ЗаполнитьЗначенияСвойств(СтрокаДвижения, Выборка);
		СтрокаДвижения.СхемаРасчетаЗП = СхемаРасчетаЗП;
		СтрокаДвижения.ТарифРасчетаЗП = ТарифРасчетаЗП;
		СтрокаДвижения.СоставЭкипажа = СоставЭкипажа;
		СтрокаДвижения.ФизЛицо = ФизЛицоВодителя;
		
		ДанныеКатегорииЗаказа = зпРаботаСРасчетомЗарплатыСервер.ПолучитьКатегориюЗаказа(СтрокаДвижения.СхемаРасчетаЗП, Выборка);
		СтрокаДвижения.КатегорияЗаказа 		= ДанныеКатегорииЗаказа.КатегорияЗаказа;
		СтрокаДвижения.ЗначениеПоказателя 	= ДанныеКатегорииЗаказа.Показатель;
		
		СтрокаДвижения.Начисление = ОсновноеНачислениеВодитель;
		СтрокаДвижения.ВесЗаказа = Выборка.ТарифицируемыйВес;
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДвижения.НомерСтроки = НомерСтроки;

		Если ЕстьЭкспедитор Тогда
			СтрокаДвиженияЭкспедитор = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвиженияЭкспедитор, СтрокаДвижения);
			
			СтрокаДвиженияЭкспедитор.ФизЛицо = ФизЛицоЭкспедитора;
			СтрокаДвиженияЭкспедитор.Начисление = ОсновноеНачислениеЭкспедитор;
			СтрокаДвиженияЭкспедитор.Роль = РольЭкспедитора;
			
			НомерСтроки = НомерСтроки + 1;
			СтрокаДвиженияЭкспедитор.НомерСтроки = НомерСтроки;
		КонецЕсли;
	КонецЦикла;		
	
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДвижений.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДвижений.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	ТаблицаДвижений.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ТаблицаДвижений.Роль КАК Роль,
	|	ТаблицаДвижений.Начисление КАК Начисление,
	|	ТаблицаДвижений.СоставЭкипажа КАК СоставЭкипажа,
	|	ТаблицаДвижений.ТипЗаказа КАК ТипЗаказа,
	|	ТаблицаДвижений.КатегорияЗаказа КАК КатегорияЗаказа,
	|	ТаблицаДвижений.ЗонаДоставки КАК ЗонаДоставки
	|ПОМЕСТИТЬ ВТ_Движения
	|ИЗ
	|	&ТаблицаДвижений КАК ТаблицаДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Движения.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(зпТарификацияЗППоЗаказам.Тариф) КАК Тариф
	|ИЗ
	|	ВТ_Движения КАК ВТ_Движения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпТарификацияЗППоЗаказам КАК зпТарификацияЗППоЗаказам
	|		ПО ВТ_Движения.СхемаРасчетаЗП = зпТарификацияЗППоЗаказам.СхемаРасчетаЗП
	|			И ВТ_Движения.ТарифРасчетаЗП = зпТарификацияЗППоЗаказам.ТарифРасчетаЗП
	|			И ВТ_Движения.Роль = зпТарификацияЗППоЗаказам.Роль
	|			И ВТ_Движения.Начисление = зпТарификацияЗППоЗаказам.ОсновноеНачисление
	|			И ВТ_Движения.СоставЭкипажа = зпТарификацияЗППоЗаказам.СоставЭкипажа
	|			И ВТ_Движения.ТипЗаказа = зпТарификацияЗППоЗаказам.ТипЗаказа
	|			И ВТ_Движения.КатегорияЗаказа = зпТарификацияЗППоЗаказам.КатегорияЗаказа
	|			И ВТ_Движения.ЗонаДоставки = зпТарификацияЗППоЗаказам.ЗонаДоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Движения.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		Выборка.Следующий();
		СтрокаДвижения.СуммаРасчетаЗП = Выборка.Тариф;
	КонецЦикла;
	
	Движения.зпИсходныеДанныеРасчетаЗППоЗаказам.Загрузить(ТаблицаДвижений);
	
	Возврат ДанныеПоЗаказам;
	
КонецФункции
//CeHbKA #4101 28.07.2020

//Асеев 25.01.2024 (Задача № 5217)>>>
Функция ВыполнитьДвиженияПоРСКоличествоЗаказовРасчетПроцентаВыполняемости() Экспорт
	
	Движения.КоличествоЗаказовРасчетПроцентаВыполняемости.Очистить();
	Движения.КоличествоЗаказовРасчетПроцентаВыполняемости.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("новаРейс", Рейс);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", ТарифРасчетаЗП);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Рейс.РейсМестнойДоставки.ДатаНачала КАК Период,
	|	Рейс.Ссылка КАК Рейс,
	|	новаОтчетВодителяЗадания.РезультатДоставки КАК РезультатДоставки,
	|	новаОтчетВодителяЗадания.ПричинаНевыполнения КАК ПричинаНеВыполненияДоставки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка) КАК ТипЗаказа,
	|	зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости КАК СпособРасчетаВыполняемости,
	|	КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоЗаказов
	|ИЗ
	|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.ПричинаНеВыполненияДоставки КАК ПричинаНеВыполненияДоставки,
	|			СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.ПричинаОтказаПереноса КАК ПричинаОтказаПереноса,
	|			МАКСИМУМ(СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.Учитывать) КАК Учитывать
	|		ИЗ
	|			Справочник.СпособыРасчетаПроцентаВыполняемости.ПричиныОтказаПереноса КАК СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпТарифыРасчетаЗП КАК зпТарифыРасчетаЗП
	|				ПО (зпТарифыРасчетаЗП.Ссылка = &ТарифРасчетаЗП)
	|					И СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.Ссылка = зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.ПричинаНеВыполненияДоставки,
	|			СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.ПричинаОтказаПереноса) КАК ВЗ_ПричиныОтказаПереноса
	|		ПО новаОтчетВодителяЗадания.ПричинаНевыполнения = ВЗ_ПричиныОтказаПереноса.ПричинаНеВыполненияДоставки
	|			И новаОтчетВодителяЗадания.ПричинаОтказа = ВЗ_ПричиныОтказаПереноса.ПричинаОтказаПереноса
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок.ПричинаНеВыполненияДоставки КАК ПричинаНеВыполненияДоставки,
	|			МАКСИМУМ(СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок.Учитывать) КАК Учитывать
	|		ИЗ
	|			Справочник.СпособыРасчетаПроцентаВыполняемости.ПричиныНеВыполненияДоставок КАК СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпТарифыРасчетаЗП КАК зпТарифыРасчетаЗП
	|				ПО (зпТарифыРасчетаЗП.Ссылка = &ТарифРасчетаЗП)
	|					И СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок.Ссылка = зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок.ПричинаНеВыполненияДоставки) КАК ВЗ_ПричиныНеВыполненияДоставок
	|		ПО новаОтчетВодителяЗадания.ПричинаНевыполнения = ВЗ_ПричиныНеВыполненияДоставок.ПричинаНеВыполненияДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (Рейс.РейсМестнойДоставки = &новаРейс)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.зпТарифыРасчетаЗП КАК зпТарифыРасчетаЗП
	|		ПО (зпТарифыРасчетаЗП.Ссылка = &ТарифРасчетаЗП)
	|ГДЕ
	|	новаОтчетВодителяЗадания.Ссылка = &Ссылка
	|	И (новаОтчетВодителяЗадания.РезультатДоставки В (ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.Выполнена), ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ВыполненаЧастично))
	|			ИЛИ ЕСТЬNULL(ВЗ_ПричиныОтказаПереноса.Учитывать, ВЗ_ПричиныНеВыполненияДоставок.Учитывать))
	|
	|СГРУППИРОВАТЬ ПО
	|	новаОтчетВодителяЗадания.ПричинаНевыполнения,
	|	новаОтчетВодителяЗадания.РезультатДоставки,
	|	зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости,
	|	Рейс.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Рейс.РейсМестнойДоставки.ДатаНачала,
	|	Рейс.Ссылка,
	|	новаОтчетВодителяЗаборы.РезультатДоставки,
	|	новаОтчетВодителяЗаборы.ПричинаНевыполнения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор),
	|	зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости,
	|	КОЛИЧЕСТВО(ИСТИНА)
	|ИЗ
	|	Документ.новаОтчетВодителя.Заборы КАК новаОтчетВодителяЗаборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.ПричинаНеВыполненияДоставки КАК ПричинаНеВыполненияДоставки,
	|			СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.ПричинаОтказаПереноса КАК ПричинаОтказаПереноса,
	|			МАКСИМУМ(СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.Учитывать) КАК Учитывать
	|		ИЗ
	|			Справочник.СпособыРасчетаПроцентаВыполняемости.ПричиныОтказаПереноса КАК СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпТарифыРасчетаЗП КАК зпТарифыРасчетаЗП
	|				ПО (зпТарифыРасчетаЗП.Ссылка = &ТарифРасчетаЗП)
	|					И СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.Ссылка = зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.ПричинаНеВыполненияДоставки,
	|			СпособыРасчетаПроцентаВыполняемостиПричиныОтказаПереноса.ПричинаОтказаПереноса) КАК ВЗ_ПричиныОтказаПереноса
	|		ПО новаОтчетВодителяЗаборы.ПричинаНевыполнения = ВЗ_ПричиныОтказаПереноса.ПричинаНеВыполненияДоставки
	|			И новаОтчетВодителяЗаборы.ПричинаОтказа = ВЗ_ПричиныОтказаПереноса.ПричинаОтказаПереноса
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок.ПричинаНеВыполненияДоставки КАК ПричинаНеВыполненияДоставки,
	|			МАКСИМУМ(СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок.Учитывать) КАК Учитывать
	|		ИЗ
	|			Справочник.СпособыРасчетаПроцентаВыполняемости.ПричиныНеВыполненияДоставок КАК СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпТарифыРасчетаЗП КАК зпТарифыРасчетаЗП
	|				ПО (зпТарифыРасчетаЗП.Ссылка = &ТарифРасчетаЗП)
	|					И СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок.Ссылка = зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СпособыРасчетаПроцентаВыполняемостиПричиныНеВыполненияДоставок.ПричинаНеВыполненияДоставки) КАК ВЗ_ПричиныНеВыполненияДоставок
	|		ПО новаОтчетВодителяЗаборы.ПричинаНевыполнения = ВЗ_ПричиныНеВыполненияДоставок.ПричинаНеВыполненияДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (Рейс.РейсМестнойДоставки = &новаРейс)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.зпТарифыРасчетаЗП КАК зпТарифыРасчетаЗП
	|		ПО (зпТарифыРасчетаЗП.Ссылка = &ТарифРасчетаЗП)
	|ГДЕ
	|	новаОтчетВодителяЗаборы.Ссылка = &Ссылка
	|	И (новаОтчетВодителяЗаборы.РезультатДоставки В (ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.Выполнена), ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ВыполненаЧастично))
	|			ИЛИ ЕСТЬNULL(ВЗ_ПричиныОтказаПереноса.Учитывать, ВЗ_ПричиныНеВыполненияДоставок.Учитывать))
	|
	|СГРУППИРОВАТЬ ПО
	|	новаОтчетВодителяЗаборы.ПричинаНевыполнения,
	|	новаОтчетВодителяЗаборы.РезультатДоставки,
	|	зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости,
	|	Рейс.Ссылка";
	
	ТаблицаРасчета = Запрос.Выполнить().Выгрузить();
	
	Движения.КоличествоЗаказовРасчетПроцентаВыполняемости.Загрузить(ТаблицаРасчета);
	
	Возврат ТаблицаРасчета.Итог("КоличествоЗаказов");
	
КонецФункции
//Асеев 25.01.2024 (Задача № 5217)<<<

//Асеев 06.03.2023 (Задача № 5001)>>>
Процедура ВыполнитьДвиженияПоРСзпИсходныеДанныеРасчетаЗППоРейсам(ДанныеПоЗаказам) Экспорт
	
	Движения.зпИсходныеДанныеРасчетаЗППоРейсам.Очистить();
	Движения.зпИсходныеДанныеРасчетаЗППоРейсам.Записывать = Истина;
	
	ДатаРасчета = Рейс.ДатаНачала;
	ВремяЗакрытияРейса = ТекущаяДата();
	
	ФизЛицоВодителя = Водитель.ФизЛицо;
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("новаРейс", Рейс);
	Запрос.УстановитьПараметр("НачалоРейса", ДатаРасчета);
	Запрос.УстановитьПараметр("КонецРейса", КонецДня(ДатаРасчета));
	Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	Запрос.УстановитьПараметр("ФизЛицоВодителя", ФизЛицоВодителя);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", ТарифРасчетаЗП);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Рейс.Ссылка КАК Рейс,
	|	ВЗ_ФиксацияМаршрутизации.ФиксацияМаршрутизации КАК ДокументФиксацииМаршрутизации,
	|	ВЗ_ФиксацияМаршрутизации.Пробег КАК ПланируемыйПробег,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)) КАК ЭтоВыходнойДень,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)) КАК ЭтоПраздничныйДень,
	|	ВЗ_РаспечаткаМаршрутногоЛиста.Период КАК ВремяПечатиМЛ,
	|	ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника КАК Роль,
	|	ВЗ_ФиксацияМаршрутизации.ОбщееВремяМаршрута / 3600 КАК ОбщееВремяМаршрута,
	|	зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости КАК СпособРасчетаПроцентаВыполняемости,
	|	НЕ зпТарифыРасчетаЗП.СпособРасчетаПроцентаВыполняемости В (ЗНАЧЕНИЕ(Справочник.СпособыРасчетаПроцентаВыполняемости.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.СпособыРасчетаПроцентаВыполняемости.Способ2023)) КАК УчитыватьЗаказыВыполняемости
	|ИЗ
	|	Документ.Рейс КАК Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ФиксацияМаршрутизацииРейса.Ссылка КАК ФиксацияМаршрутизации,
	|			ФиксацияМаршрутизацииРейса.Пробег КАК Пробег,
	|			ФиксацияМаршрутизацииРейса.ОбщееВремяМаршрута КАК ОбщееВремяМаршрута
	|		ИЗ
	|			Документ.ФиксацияМаршрутизацииРейса КАК ФиксацияМаршрутизацииРейса
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|					КонтрольВремени.Период КАК Период,
	|					КонтрольВремени.Рейс КАК Рейс
	|				ИЗ
	|					Документ.Рейс КАК Т_Рейс
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольВремени КАК КонтрольВремени
	|						ПО (Т_Рейс.РейсМестнойДоставки = &новаРейс)
	|							И (КонтрольВремени.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста))
	|							И Т_Рейс.Ссылка = КонтрольВремени.Рейс
	|							И (НЕ КонтрольВремени.ОкончаниеСобытия)
	|				
	|				УПОРЯДОЧИТЬ ПО
	|					Период УБЫВ) КАК ВЗ_ПечатьМЛ
	|				ПО ВЗ_ПечатьМЛ.Рейс = ФиксацияМаршрутизацииРейса.Рейс
	|					И ВЗ_ПечатьМЛ.Период >= ФиксацияМаршрутизацииРейса.Дата
	|					И (НЕ ФиксацияМаршрутизацииРейса.ПометкаУдаления)
	|					И (ФиксацияМаршрутизацииРейса.ЯндексМаршрутизацияМП)
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ФиксацияМаршрутизацииРейса.Дата УБЫВ,
	|			ФиксацияМаршрутизацииРейса.Ссылка УБЫВ) КАК ВЗ_ФиксацияМаршрутизации
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО Рейс.ДатаРейса = РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|			И (ГОД(Рейс.ДатаРейса) = РегламентированныйПроизводственныйКалендарь.Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			КонтрольВремени.Период КАК Период
	|		ИЗ
	|			Документ.Рейс КАК Т_Рейс
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольВремени КАК КонтрольВремени
	|				ПО (Т_Рейс.РейсМестнойДоставки = &новаРейс)
	|					И (КонтрольВремени.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста))
	|					И Т_Рейс.Ссылка = КонтрольВремени.Рейс
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Период) КАК ВЗ_РаспечаткаМаршрутногоЛиста
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних(&КонецРейса, ФизЛицо = &ФизЛицоВодителя) КАК ДополнительныеПараметрыФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.зпТарифыРасчетаЗП КАК зпТарифыРасчетаЗП
	|		ПО (зпТарифыРасчетаЗП.Ссылка = &ТарифРасчетаЗП)
	|ГДЕ
	|	Рейс.РейсМестнойДоставки = &новаРейс";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	КоличествоЗаказовВыполненныхПлатнаяПарковка = ДанныеПоЗаказам.КоличествоЗаказовВыполненныхПлатнаяПарковка;
	КоличествоЗаказовПереносСЗаездомПлатнаяПарковка = ДанныеПоЗаказам.КоличествоЗаказовПереносСЗаездомПлатнаяПарковка;
	КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт = ДанныеПоЗаказам.КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт;
	КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата = ДанныеПоЗаказам.КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата;
	КоличествоЗаказовВыполняемости = ДанныеПоЗаказам.КоличествоЗаказовВыполняемости;
	
	ЕстьЭкспедитор = Не Экспедитор.Пустая();
	Если ЕстьЭкспедитор Тогда
		СоставЭкипажа = Перечисления.зпСоставЭкипажа.ВодительСЭкспедитором;
	Иначе
		СоставЭкипажа = Перечисления.зпСоставЭкипажа.ВодительБезЭкспедитора;
	КонецЕсли;
	
	Движение = Движения.зпИсходныеДанныеРасчетаЗППоРейсам.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	Движение.Период = ДатаРасчета;
	Движение.Регион = ТерминалДоставки;
	Движение.СхемаРасчетаЗП = СхемаРасчетаЗП;
	Движение.ТарифРасчетаЗП = ТарифРасчетаЗП;
	Движение.ДатаРасчета = ДатаРасчета;
	Движение.ВидЗанятости = Перечисления.зпВидыЗанятости.ОсновнаяЗанятость;
	Движение.ФизЛицо = ФизЛицоВодителя;
	Движение.СоставЭкипажа = СоставЭкипажа;
	Движение.ОбщееКоличествоЗаказов = КоличествоЗаказов + КоличествоЗаборов;
	Движение.КоличествоЗаказовВыполненных = ВыполненоЗаказов + ВыполненоЗаборов;
	Движение.КоличествоЗаказовОтказСЗаездом = КоличествоЗаказовОтказСЗаездом + КоличествоЗаборовОтказСЗаездом;
	Движение.КоличествоЗаказовПереносСЗаездом = КоличествоЗаказовПереносСЗаездом;
	Движение.КоличествоЗаказовОтказБезЗаезда = КоличествоЗаказовОтказБезЗаезда + КоличествоЗаборовОтказБезЗаезда;
	Движение.КоличествоЗаказовПеренос = КоличествоЗаказовПеренос;
	Движение.КоличествоЗаказовДоставленЧастично = КоличествоЗаказовДоставленЧастично;
	Движение.КоличествоЗаказовВыполненныхПлатнаяПарковка = КоличествоЗаказовВыполненныхПлатнаяПарковка;
	Движение.КоличествоЗаказовПереносСЗаездомПлатнаяПарковка = КоличествоЗаказовПереносСЗаездомПлатнаяПарковка;
	Движение.ВремяЗакрытияРейса = ВремяЗакрытияРейса;
	Если Движение.ОбщееКоличествоЗаказов Тогда
		Если Выборка.УчитыватьЗаказыВыполняемости Тогда
			Движение.ВыполненоЗаказовПроцент = КоличествоЗаказовВыполняемости / Движение.ОбщееКоличествоЗаказов * 100;
		Иначе
			Движение.ВыполненоЗаказовПроцент = (Движение.КоличествоЗаказовВыполненных + Движение.КоличествоЗаказовОтказСЗаездом + КоличествоЗаказовПереносСЗаездом) / Движение.ОбщееКоличествоЗаказов * 100;
		КонецЕсли;
	Иначе
		Движение.ВыполненоЗаказовПроцент = 0;
	КонецЕсли;
	Движение.КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт = КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт;
	Движение.КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата = КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата;
	Движение.ПробегУчетный = Движение.ПланируемыйПробег;
	
	Если ЕстьЭкспедитор Тогда
		ДвижениеЭкспедитор = Движения.зпИсходныеДанныеРасчетаЗППоРейсам.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеЭкспедитор, Движение);
		ДвижениеЭкспедитор.ФизЛицо = Экспедитор.ФизЛицо;
		ДвижениеЭкспедитор.Роль = Справочники.РолиСотрудников.Экспедитор;
	КонецЕсли;
	
КонецПроцедуры
//Асеев 06.03.2023 (Задача № 5001)<<<

Процедура РассчитатьзпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияДоплатаЗаПробег(ТаблицаПоРейсам)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаПоРейсам);
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", СхемаРасчетаЗП);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", ТарифРасчетаЗП);
	Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходныеДанные.Период КАК Период,
	|	ИсходныеДанные.ДатаРасчета КАК ДатаРасчета,
	|	ИсходныеДанные.Рейс КАК Рейс,
	|	ИсходныеДанные.ФизЛицо КАК ФизЛицо,
	|	ИсходныеДанные.СоставЭкипажа КАК СоставЭкипажа,
	|	ИсходныеДанные.Роль КАК Роль,
	|	ИсходныеДанные.ПробегУчетный КАК ПланируемыйПробег,
	|	ИсходныеДанные.ОсновноеНачисление КАК ОсновноеНачисление
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.ОсновноеНачисление КАК ОсновноеНачисление,
	|	зпБрейки.Ссылка КАК Ссылка,
	|	МИНИМУМ(зпБрейкиГраницыБрейка_Мин.ЗначениеОт) КАК ЗначениеОт
	|ПОМЕСТИТЬ ВТ_БрейкМинимальногоПробегаПоРейсу
	|ИЗ
	|	Справочник.зпБрейки КАК зпБрейки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпТарифыРасчетаЗП КАК зпТарифыРасчетаЗП
	|		ПО (зпТарифыРасчетаЗП.Ссылка = &ТарифРасчетаЗП)
	|			И зпБрейки.Владелец = зпТарифыРасчетаЗП.СхемаБрейковПробегаПоРейсу
	|			И (НЕ зпБрейки.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпБрейки.ГраницыБрейка КАК зпБрейкиГраницыБрейка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|			ПО (ВТ_ИсходныеДанные.ПланируемыйПробег МЕЖДУ зпБрейкиГраницыБрейка.ЗначениеОт И зпБрейкиГраницыБрейка.ЗначениеДо)
	|		ПО зпБрейки.Ссылка = зпБрейкиГраницыБрейка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.зпБрейки.ГраницыБрейка КАК зпБрейкиГраницыБрейка_Мин
	|		ПО зпБрейки.Ссылка = зпБрейкиГраницыБрейка_Мин.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДанные.ОсновноеНачисление,
	|	зпБрейки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Период,
	|	&ТерминалДоставки КАК Регион,
	|	&СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	&ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаПробег) КАК Начисление,
	|	ВложенныйЗапрос.ДатаРасчета КАК ДатаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость) КАК ВидЗанятости,
	|	ВложенныйЗапрос.Рейс КАК Рейс,
	|	ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
	|	ВложенныйЗапрос.СоставЭкипажа КАК СоставЭкипажа,
	|	ВложенныйЗапрос.ОсновноеНачисление КАК ОсновноеНачисление,
	|	ВложенныйЗапрос.ПланируемыйПробег КАК ОбщийКилометражПоРейсу,
	|	ВложенныйЗапрос.БрейкПробегаПоРейсу КАК БрейкПробегаПоРейсу,
	|	ВложенныйЗапрос.СтавкаЗаКилометрПробега КАК СтавкаЗаКилометрПробега,
	|	ВложенныйЗапрос.ПланируемыйПробег - ВложенныйЗапрос.ЗначениеОт КАК ТарифицируемыйКилометражПоРейсу,
	|	(ВложенныйЗапрос.ПланируемыйПробег - ВложенныйЗапрос.ЗначениеОт) * ВложенныйЗапрос.СтавкаЗаКилометрПробега КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ИсходныеДанные.Период КАК Период,
	|		ВТ_ИсходныеДанные.ДатаРасчета КАК ДатаРасчета,
	|		ВТ_ИсходныеДанные.Рейс КАК Рейс,
	|		ВТ_ИсходныеДанные.ФизЛицо КАК ФизЛицо,
	|		ВТ_ИсходныеДанные.СоставЭкипажа КАК СоставЭкипажа,
	|		ВТ_ИсходныеДанные.ПланируемыйПробег КАК ПланируемыйПробег,
	|		ВТ_ИсходныеДанные.ОсновноеНачисление КАК ОсновноеНачисление,
	|		ВТ_БрейкМинимальногоПробегаПоРейсу.Ссылка КАК БрейкПробегаПоРейсу,
	|		ВТ_БрейкМинимальногоПробегаПоРейсу.ЗначениеОт КАК ЗначениеОт,
	|		МАКСИМУМ(зпСтавкиОплатыПоНачислениям.СтавкаЗаКилометрПробега) КАК СтавкаЗаКилометрПробега
	|	ИЗ
	|		РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|			ПО (зпСтавкиОплатыПоНачислениям.СхемаРасчетаЗП = &СхемаРасчетаЗП)
	|				И (зпСтавкиОплатыПоНачислениям.ТарифРасчетаЗП = &ТарифРасчетаЗП)
	|				И зпСтавкиОплатыПоНачислениям.ОсновноеНачисление = ВТ_ИсходныеДанные.ОсновноеНачисление
	|				И (зпСтавкиОплатыПоНачислениям.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаПробег))
	|				И зпСтавкиОплатыПоНачислениям.Роль = ВТ_ИсходныеДанные.Роль
	|				И зпСтавкиОплатыПоНачислениям.СоставЭкипажа = ВТ_ИсходныеДанные.СоставЭкипажа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БрейкМинимальногоПробегаПоРейсу КАК ВТ_БрейкМинимальногоПробегаПоРейсу
	|			ПО зпСтавкиОплатыПоНачислениям.ОсновноеНачисление = ВТ_БрейкМинимальногоПробегаПоРейсу.ОсновноеНачисление
	|				И зпСтавкиОплатыПоНачислениям.БрейкМинимальногоПробегаПоРейсу = ВТ_БрейкМинимальногоПробегаПоРейсу.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ИсходныеДанные.Период,
	|		ВТ_ИсходныеДанные.ДатаРасчета,
	|		ВТ_ИсходныеДанные.Рейс,
	|		ВТ_ИсходныеДанные.ФизЛицо,
	|		ВТ_ИсходныеДанные.СоставЭкипажа,
	|		ВТ_ИсходныеДанные.ПланируемыйПробег,
	|		ВТ_ИсходныеДанные.ОсновноеНачисление,
	|		ВТ_БрейкМинимальногоПробегаПоРейсу.Ссылка,
	|		ВТ_БрейкМинимальногоПробегаПоРейсу.ЗначениеОт) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

//Асеев 26.12.2023 (Задача № 5191)>>>
Процедура РассчитатьзпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияДоплатаЗаЭкспедирование(ТаблицаПоРейсам)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаПоРейсам);
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", СхемаРасчетаЗП);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", ТарифРасчетаЗП);
	Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходныеДанные.Период КАК Период,
	|	ИсходныеДанные.ДатаРасчета КАК ДатаРасчета,
	|	ИсходныеДанные.Рейс КАК Рейс,
	|	ИсходныеДанные.ФизЛицо КАК ФизЛицо,
	|	ИсходныеДанные.СоставЭкипажа КАК СоставЭкипажа,
	|	ИсходныеДанные.Роль КАК Роль,
	|	ИсходныеДанные.ОсновноеНачисление КАК ОсновноеНачисление
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Период КАК Период,
	|	&ТерминалДоставки КАК Регион,
	|	&СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	&ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаЭкспедирование) КАК Начисление,
	|	ВТ_ИсходныеДанные.ДатаРасчета КАК ДатаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость) КАК ВидЗанятости,
	|	ВТ_ИсходныеДанные.Рейс КАК Рейс,
	|	ВТ_ИсходныеДанные.ФизЛицо КАК ФизЛицо,
	|	ВТ_ИсходныеДанные.СоставЭкипажа КАК СоставЭкипажа,
	|	ВТ_ИсходныеДанные.Роль КАК Роль,
	|	ВТ_ИсходныеДанные.ОсновноеНачисление КАК ОсновноеНачисление,
	|	МАКСИМУМ(зпСтавкиОплатыПоНачислениям.ФиксированнаяСтавка) КАК Сумма
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
	|		ПО (зпСтавкиОплатыПоНачислениям.СхемаРасчетаЗП = &СхемаРасчетаЗП)
	|			И (зпСтавкиОплатыПоНачислениям.ТарифРасчетаЗП = &ТарифРасчетаЗП)
	|			И ВТ_ИсходныеДанные.ОсновноеНачисление = зпСтавкиОплатыПоНачислениям.ОсновноеНачисление
	|			И (зпСтавкиОплатыПоНачислениям.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаЭкспедирование))
	|			И ВТ_ИсходныеДанные.Роль = зпСтавкиОплатыПоНачислениям.Роль
	|			И ВТ_ИсходныеДанные.СоставЭкипажа = зпСтавкиОплатыПоНачислениям.СоставЭкипажа
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДанные.Рейс,
	|	ВТ_ИсходныеДанные.ОсновноеНачисление,
	|	ВТ_ИсходныеДанные.Период,
	|	ВТ_ИсходныеДанные.СоставЭкипажа,
	|	ВТ_ИсходныеДанные.Роль,
	|	ВТ_ИсходныеДанные.ДатаРасчета,
	|	ВТ_ИсходныеДанные.ФизЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры
//Асеев 26.12.2023 (Задача № 5191)<<<

//Асеев 14.06.2023 (Задача № 5061)>>>
Процедура РассчитатьзпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияДоплатаЗаПарковку(ТаблицаПоРейсам)
	
	СтрокаТаблицы = ТаблицаПоРейсам[0];
	Если Не (СтрокаТаблицы.КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт Или СтрокаТаблицы.КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", СхемаРасчетаЗП);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", ТарифРасчетаЗП);
	Запрос.УстановитьПараметр("ОсновноеНачисление", СтрокаТаблицы.ОсновноеНачисление);
	Запрос.УстановитьПараметр("Роль", СтрокаТаблицы.Роль);
	Запрос.УстановитьПараметр("СоставЭкипажа", СтрокаТаблицы.СоставЭкипажа);
	Запрос.УстановитьПараметр("КоличествоСтандарт", СтрокаТаблицы.КоличествоЗаказовПлатнаяПарковкаЗонаСтандарт);
	Запрос.УстановитьПараметр("КоличествоПовышенная", СтрокаТаблицы.КоличествоЗаказовПлатнаяПарковкаЗонаПовышеннаяОплата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаПарковку) КАК Начисление,
	|	ВЗ_Ставки.СтавкаЗаПарковку КАК Сумма,
	|	ВЗ_Ставки.ВидПолигоновПарковки КАК ВидПолигонаПарковки
	|ИЗ
	|	(ВЫБРАТЬ
	|		зпСтавкиОплатыПоНачислениям.ВидПолигоновПарковки КАК ВидПолигоновПарковки,
	|		МАКСИМУМ(зпСтавкиОплатыПоНачислениям.СтавкаЗаПарковку) КАК СтавкаЗаПарковку
	|	ИЗ
	|		РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпСхемыРасчетаЗП КАК зпСхемыРасчетаЗП
	|			ПО (зпСтавкиОплатыПоНачислениям.СхемаРасчетаЗП = &СхемаРасчетаЗП)
	|				И (зпСтавкиОплатыПоНачислениям.ТарифРасчетаЗП = &ТарифРасчетаЗП)
	|				И (зпСтавкиОплатыПоНачислениям.ОсновноеНачисление = &ОсновноеНачисление)
	|				И (зпСтавкиОплатыПоНачислениям.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаПарковку))
	|				И (зпСтавкиОплатыПоНачислениям.Роль = &Роль)
	|				И (зпСтавкиОплатыПоНачислениям.СоставЭкипажа = &СоставЭкипажа)
	|				И (зпСхемыРасчетаЗП.Ссылка = &СхемаРасчетаЗП)
	|				И (зпСтавкиОплатыПоНачислениям.ВидПолигоновПарковки В (зпСхемыРасчетаЗП.ВидПолигоновПарковкиСтандарт, зпСхемыРасчетаЗП.ВидПолигоновПарковкиПовышеннаяОплата))
	|				И (зпСтавкиОплатыПоНачислениям.СтавкаЗаПарковку > 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		зпСтавкиОплатыПоНачислениям.ВидПолигоновПарковки) КАК ВЗ_Ставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпСхемыРасчетаЗП КАК зпСхемыРасчетаЗП
	|		ПО (зпСхемыРасчетаЗП.Ссылка = &СхемаРасчетаЗП)
	|			И (ВЫБОР
	|				КОГДА &КоличествоСтандарт > 0
	|						И &КоличествоПовышенная = 0
	|					ТОГДА ВЗ_Ставки.ВидПолигоновПарковки = зпСхемыРасчетаЗП.ВидПолигоновПарковкиСтандарт
	|				КОГДА &КоличествоСтандарт = 0
	|						И &КоличествоПовышенная > 0
	|					ТОГДА ВЗ_Ставки.ВидПолигоновПарковки = зпСхемыРасчетаЗП.ВидПолигоновПарковкиПовышеннаяОплата
	|				КОГДА &КоличествоПовышенная > 2
	|					ТОГДА ВЗ_Ставки.ВидПолигоновПарковки = зпСхемыРасчетаЗП.ВидПолигоновПарковкиПовышеннаяОплата
	|				ИНАЧЕ ВЗ_Ставки.ВидПолигоновПарковки = зпСхемыРасчетаЗП.ВидПолигоновПарковкиСтандарт
	|			КОНЕЦ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Движение = Движения.зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
	КонецЕсли;
	
КонецПроцедуры
//Асеев 14.06.2023 (Задача № 5061)<<<

//Асеев 06.06.2023 (Задача № 5055)>>>
Процедура ВыполнитьДвиженияПоРСзпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления() Экспорт
	
	Движения.зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.Записывать = Истина;
	Движения.зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.Очистить();
	
	ТаблицаПоРейсам = Движения.зпИсходныеДанныеРасчетаЗППоРейсам.Выгрузить();
	ТаблицаПоРейсам.Сортировать("НомерСтроки");
	ТаблицаПоРейсам.Колонки.Добавить("ОсновноеНачисление", Новый ОписаниеТипов("СправочникСсылка.зпНачисления"));
	Для Каждого СтрокаТаблицы Из ТаблицаПоРейсам Цикл
		Если СтрокаТаблицы.НомерСтроки = 1 Тогда
			СтрокаТаблицы.ОсновноеНачисление = ОсновноеНачислениеВодитель;
		Иначе
			СтрокаТаблицы.ОсновноеНачисление = ОсновноеНачислениеЭкспедитор;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьзпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияДоплатаЗаПробег(ТаблицаПоРейсам);
	
	//Асеев 14.06.2023 (Задача № 5061)>>>
	РассчитатьзпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияДоплатаЗаПарковку(ТаблицаПоРейсам);
	//Асеев 14.06.2023 (Задача № 5061)<<<
	
	//Асеев 26.12.2023 (Задача № 5191)>>>
	РассчитатьзпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияДоплатаЗаЭкспедирование(ТаблицаПоРейсам);
	//Асеев 26.12.2023 (Задача № 5191)<<<
	
КонецПроцедуры
//Асеев 06.06.2023 (Задача № 5055)<<<

Процедура РассчитатьзпИсходныеДанныеРасчетаЗПЧасыСтавкаЗаЧас(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т_Рейс.Ссылка КАК Рейс,
	|	Т_Рейс.ДатаРейса КАК ДатаРасчета,
	|	ВЗ_ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
	|	ВЫРАЗИТЬ(ВЗ_ОсновныеНачисления.ОсновноеНачисление КАК Справочник.зпНачисления) КАК ОсновноеНачисление,
	|	ВЗ_ОсновныеНачисления.Роль КАК Роль,
	|	ВЗ_РаспечаткаМаршрутногоЛиста.Период КАК ВремяНачалаСобытия
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Документ.Рейс КАК Т_Рейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			КонтрольВремени.Период КАК Период
	|		ИЗ
	|			РегистрСведений.КонтрольВремени КАК КонтрольВремени
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Т_Рейс
	|				ПО (Т_Рейс.РейсМестнойДоставки = &Рейс)
	|					И (КонтрольВремени.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста))
	|					И КонтрольВремени.Рейс = Т_Рейс.Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Период) КАК ВЗ_РаспечаткаМаршрутногоЛиста
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			&ФизЛицоВодителя КАК ФизЛицо,
	|			&ОсновноеНачислениеВодитель КАК ОсновноеНачисление,
	|			ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника КАК Роль
	|		ИЗ
	|			РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних(&КонецРейса, ФизЛицо = &ФизЛицоВодителя) КАК ДополнительныеПараметрыФизЛицСрезПоследних
	|		ГДЕ
	|			&ФиксироватьПоВодителю
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			&ФизЛицоЭкспедитора,
	|			&ОсновноеНачислениеЭкспедитор,
	|			ЗНАЧЕНИЕ(Справочник.РолиСотрудников.Экспедитор)
	|		ГДЕ
	|			&ФиксироватьПоЭкспедитору) КАК ВЗ_ОсновныеНачисления
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Т_Рейс.РейсМестнойДоставки = &Рейс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачалоРейса КАК Период,
	|	&ТерминалДоставки КАК Регион,
	|	&СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	&ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ВЗ_ЧасовОтработаноФактически.ОсновноеНачисление КАК ОсновноеНачисление,
	|	ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость) КАК ВидЗанятости,
	|	ВЗ_ЧасовОтработаноФактически.ДатаРасчета КАК ДатаРасчета,
	|	ВЗ_ЧасовОтработаноФактически.Рейс КАК Рейс,
	|	ВЗ_ЧасовОтработаноФактически.ФизЛицо КАК ФизЛицо,
	|	ВЗ_ЧасовОтработаноФактически.ОсновноеНачисление КАК Начисление,
	|	&СоставЭкипажа КАК СоставЭкипажа,
	|	ВЗ_ЧасовОтработаноФактически.Роль КАК Роль,
	|	ВЗ_ЧасовОтработаноФактически.ЧасовОтработаноФактически КАК ЧасовОтработаноФактически,
	|	ВЫБОР
	|		КОГДА ВЗ_ЧасовОтработаноФактически.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧас)
	|			ТОГДА ВЗ_ЧасовОтработаноФактически.ЧасовОтработаноФактически + ВЗ_ЧасовОтработаноФактически.ДобавляемоеКоличествоЧасов
	|		ИНАЧЕ ВЗ_ЧасовОтработаноФактически.ЧасовОтработаноФактически
	|	КОНЕЦ КАК ЧасовОтработано,
	|	ВЫБОР
	|		КОГДА ВЗ_ЧасовОтработаноФактически.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧас)
	|			ТОГДА ВЫРАЗИТЬ((ВЗ_ЧасовОтработаноФактически.ЧасовОтработаноФактически + ВЗ_ЧасовОтработаноФактически.ДобавляемоеКоличествоЧасов) * ВЗ_ЧасовОтработаноФактически.СтоимостьЧаса КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ ВЗ_ЧасовОтработаноФактически.СтоимостьСмены
	|	КОНЕЦ КАК СуммаОплаты,
	|	ВЗ_ЧасовОтработаноФактически.ВремяНачалаСобытия КАК ВремяНачалаСобытия,
	|	&Дата КАК ВремяОкончанияСобытия,
	|	ВЗ_ЧасовОтработаноФактически.СтоимостьЧаса КАК СтоимостьЧаса,
	|	ВЗ_ЧасовОтработаноФактически.СтоимостьСмены КАК СтоимостьСмены,
	|	ВЗ_ЧасовОтработаноФактически.ВремяПечатиМЛ КАК ВремяПечатиМЛ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЗ_ВремяНачалаСобытия.ОсновноеНачисление КАК ОсновноеНачисление,
	|		ВЗ_ВремяНачалаСобытия.ДатаРасчета КАК ДатаРасчета,
	|		ВЗ_ВремяНачалаСобытия.Рейс КАК Рейс,
	|		ВЗ_ВремяНачалаСобытия.ФизЛицо КАК ФизЛицо,
	|		ВЗ_ВремяНачалаСобытия.Роль КАК Роль,
	|		ВЗ_ВремяНачалаСобытия.СпособРасчета КАК СпособРасчета,
	|		ВЗ_ВремяНачалаСобытия.ДобавляемоеКоличествоЧасов КАК ДобавляемоеКоличествоЧасов,
	|		ВЗ_ВремяНачалаСобытия.СтавкаЗаЧас КАК СтавкаЗаЧас,
	|		ВЗ_ВремяНачалаСобытия.ВремяНачалаСобытия КАК ВремяНачалаСобытия,
	|		ВЗ_ВремяНачалаСобытия.СтоимостьЧаса КАК СтоимостьЧаса,
	|		ВЗ_ВремяНачалаСобытия.СтоимостьСмены КАК СтоимостьСмены,
	|		ВЗ_ВремяНачалаСобытия.ВремяПечатиМЛ КАК ВремяПечатиМЛ,
	|		ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ВЗ_ВремяНачалаСобытия.ВремяНачалаСобытия, &Дата, СЕКУНДА) / 3600 КАК ЧИСЛО(10, 2)) КАК ЧасовОтработаноФактически
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_Данные.ОсновноеНачисление КАК ОсновноеНачисление,
	|			ВТ_Данные.ДатаРасчета КАК ДатаРасчета,
	|			ВТ_Данные.Рейс КАК Рейс,
	|			ВТ_Данные.ФизЛицо КАК ФизЛицо,
	|			ВТ_Данные.Роль КАК Роль,
	|			ВТ_Данные.ОсновноеНачисление.СпособРасчета КАК СпособРасчета,
	|			ЕСТЬNULL(ВЗ_СтавкиЗаЧас.ДобавляемоеКоличествоЧасов, 0) КАК ДобавляемоеКоличествоЧасов,
	|			ЕСТЬNULL(ВЗ_СтавкиЗаЧас.СтавкаЗаЧас, 0) КАК СтавкаЗаЧас,
	|			ВЫБОР
	|				КОГДА ВТ_Данные.ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧас)
	|						И ЕСТЬNULL(ВЗ_СтавкиЗаЧас.ВремяНачалаРейсаРасчетное, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|						И ВТ_Данные.ВремяНачалаСобытия > ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_Данные.ВремяНачалаСобытия, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВЗ_СтавкиЗаЧас.ВремяНачалаРейсаРасчетное, СЕКУНДА))
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_Данные.ВремяНачалаСобытия, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВЗ_СтавкиЗаЧас.ВремяНачалаРейсаРасчетное, СЕКУНДА))
	|				ИНАЧЕ ВТ_Данные.ВремяНачалаСобытия
	|			КОНЕЦ КАК ВремяНачалаСобытия,
	|			ВЫБОР
	|				КОГДА ВТ_Данные.ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧас)
	|					ТОГДА ЕСТЬNULL(ВЗ_СтавкиЗаЧас.СтавкаЗаЧас, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК СтоимостьЧаса,
	|			ВЫБОР
	|				КОГДА ВТ_Данные.ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧас)
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ВЗ_СтавкиЗаЧас.СтавкаЗаСмену, 0)
	|			КОНЕЦ КАК СтоимостьСмены,
	|			ВЫБОР
	|				КОГДА ВТ_Данные.ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧас)
	|						И ЕСТЬNULL(ВЗ_СтавкиЗаЧас.ВремяНачалаРейсаРасчетное, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ВТ_Данные.ВремяНачалаСобытия
	|			КОНЕЦ КАК ВремяПечатиМЛ
	|		ИЗ
	|			ВТ_Данные КАК ВТ_Данные
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ВТ_Данные.ОсновноеНачисление КАК ОсновноеНачисление,
	|					ВТ_Данные.Роль КАК Роль,
	|					МАКСИМУМ(зпСтавкиОплатыПоНачислениям.СтавкаЗаЧас) КАК СтавкаЗаЧас,
	|					МАКСИМУМ(зпСтавкиОплатыПоНачислениям.ДобавляемоеКоличествоЧасов) КАК ДобавляемоеКоличествоЧасов,
	|					МАКСИМУМ(зпСтавкиОплатыПоНачислениям.СтавкаЗаСмену) КАК СтавкаЗаСмену,
	|					МАКСИМУМ(зпСтавкиОплатыПоНачислениям.ВремяНачалаРейсаРасчетное) КАК ВремяНачалаРейсаРасчетное
	|				ИЗ
	|					ВТ_Данные КАК ВТ_Данные
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
	|						ПО (зпСтавкиОплатыПоНачислениям.СхемаРасчетаЗП = &СхемаРасчетаЗП)
	|							И (зпСтавкиОплатыПоНачислениям.ТарифРасчетаЗП = &ТарифРасчетаЗП)
	|							И ВТ_Данные.ОсновноеНачисление = зпСтавкиОплатыПоНачислениям.ОсновноеНачисление
	|							И ВТ_Данные.ОсновноеНачисление = зпСтавкиОплатыПоНачислениям.Начисление
	|							И ВТ_Данные.Роль = зпСтавкиОплатыПоНачислениям.Роль
	|							И (зпСтавкиОплатыПоНачислениям.СоставЭкипажа = &СоставЭкипажа)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ВТ_Данные.ОсновноеНачисление,
	|					ВТ_Данные.Роль) КАК ВЗ_СтавкиЗаЧас
	|				ПО ВТ_Данные.ОсновноеНачисление = ВЗ_СтавкиЗаЧас.ОсновноеНачисление
	|					И ВТ_Данные.Роль = ВЗ_СтавкиЗаЧас.Роль) КАК ВЗ_ВремяНачалаСобытия) КАК ВЗ_ЧасовОтработаноФактически";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.зпИсходныеДанныеРасчетаЗПЧасы.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

//Асеев 08.06.2023 (Задача № 5059)>>>
Процедура РассчитатьзпИсходныеДанныеРасчетаЗПЧасыСтавкаЗаЧасПереработки(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т_Рейс.Ссылка КАК Рейс,
	|	Т_Рейс.ДатаРейса КАК ДатаРасчета,
	|	ВЗ_ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
	|	ВЗ_ОсновныеНачисления.ОсновноеНачисление КАК ОсновноеНачисление,
	|	ВЗ_ОсновныеНачисления.Роль КАК Роль,
	|	ВЗ_РаспечаткаМаршрутногоЛиста.Период КАК ВремяНачалаСобытия,
	|	&Дата КАК ВремяОкончанияСобытия,
	|	ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ВЗ_РаспечаткаМаршрутногоЛиста.Период, &Дата, СЕКУНДА) / 3600 КАК ЧИСЛО(10, 2)) КАК ЧасовОтработаноФактически
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Документ.Рейс КАК Т_Рейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			КонтрольВремени.Период КАК Период
	|		ИЗ
	|			РегистрСведений.КонтрольВремени КАК КонтрольВремени
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Т_Рейс
	|				ПО (Т_Рейс.РейсМестнойДоставки = &Рейс)
	|					И (КонтрольВремени.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста))
	|					И КонтрольВремени.Рейс = Т_Рейс.Ссылка
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Период) КАК ВЗ_РаспечаткаМаршрутногоЛиста
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			&ФизЛицоВодителя КАК ФизЛицо,
	|			&ОсновноеНачислениеВодитель КАК ОсновноеНачисление,
	|			ДополнительныеПараметрыФизЛицСрезПоследних.ОсновнаяРольСотрудника КАК Роль
	|		ИЗ
	|			РегистрСведений.ДополнительныеПараметрыФизЛиц.СрезПоследних(&КонецРейса, ФизЛицо = &ФизЛицоВодителя) КАК ДополнительныеПараметрыФизЛицСрезПоследних
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			&ФизЛицоЭкспедитора,
	|			&ОсновноеНачислениеЭкспедитор,
	|			ЗНАЧЕНИЕ(Справочник.РолиСотрудников.Экспедитор)
	|		ГДЕ
	|			&ФиксироватьПоЭкспедитору) КАК ВЗ_ОсновныеНачисления
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Т_Рейс.РейсМестнойДоставки = &Рейс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачалоРейса КАК Период,
	|	&ТерминалДоставки КАК Регион,
	|	&СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	&ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	ВТ_Данные.ОсновноеНачисление КАК ОсновноеНачисление,
	|	ЗНАЧЕНИЕ(Перечисление.зпВидыЗанятости.ОсновнаяЗанятость) КАК ВидЗанятости,
	|	ВТ_Данные.ДатаРасчета КАК ДатаРасчета,
	|	ВТ_Данные.Рейс КАК Рейс,
	|	ВТ_Данные.ФизЛицо КАК ФизЛицо,
	|	ВЗ_СтавкиЗаЧас.Начисление КАК Начисление,
	|	&СоставЭкипажа КАК СоставЭкипажа,
	|	ВТ_Данные.Роль КАК Роль,
	|	ВТ_Данные.ЧасовОтработаноФактически КАК ЧасовОтработаноФактически,
	|	ВТ_Данные.ЧасовОтработаноФактически + ВЗ_СтавкиЗаЧас.ДобавляемоеКоличествоЧасов КАК ЧасовОтработано,
	|	ВЫБОР
	|		КОГДА ВТ_Данные.ЧасовОтработаноФактически + ВЗ_СтавкиЗаЧас.ДобавляемоеКоличествоЧасов - ВЗ_СтавкиЗаЧас.ЗначениеОт > 0
	|			ТОГДА ВЫРАЗИТЬ((ВТ_Данные.ЧасовОтработаноФактически + ВЗ_СтавкиЗаЧас.ДобавляемоеКоличествоЧасов - ВЗ_СтавкиЗаЧас.ЗначениеОт) * ВЗ_СтавкиЗаЧас.СтавкаЗаЧас КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОплаты,
	|	ВЗ_СтавкиЗаЧас.БрейкЧасовПереработки КАК БрейкЧасовПереработки,
	|	ВЫБОР
	|		КОГДА ВТ_Данные.ЧасовОтработаноФактически + ВЗ_СтавкиЗаЧас.ДобавляемоеКоличествоЧасов - ВЗ_СтавкиЗаЧас.ЗначениеОт > 0
	|			ТОГДА ВТ_Данные.ЧасовОтработаноФактически + ВЗ_СтавкиЗаЧас.ДобавляемоеКоличествоЧасов - ВЗ_СтавкиЗаЧас.ЗначениеОт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовПереработки,
	|	ВТ_Данные.ВремяНачалаСобытия КАК ВремяНачалаСобытия,
	|	ВТ_Данные.ВремяОкончанияСобытия КАК ВремяОкончанияСобытия,
	|	ВЗ_СтавкиЗаЧас.СтавкаЗаЧас КАК СтоимостьЧаса
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЗ_СтавкиЗаЧас.ОсновноеНачисление КАК ОсновноеНачисление,
	|			ВЗ_СтавкиЗаЧас.Роль КАК Роль,
	|			ВЗ_СтавкиЗаЧас.Начисление КАК Начисление,
	|			ВЗ_СтавкиЗаЧас.СтавкаЗаЧас КАК СтавкаЗаЧас,
	|			ВЗ_СтавкиЗаЧас.ДобавляемоеКоличествоЧасов КАК ДобавляемоеКоличествоЧасов,
	|			ВЗ_СтавкиЗаЧас.БрейкЧасовПереработки КАК БрейкЧасовПереработки,
	|			МИНИМУМ(зпБрейкиГраницыБрейка.ЗначениеОт) КАК ЗначениеОт
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВТ_Данные.ОсновноеНачисление КАК ОсновноеНачисление,
	|				ВТ_Данные.Роль КАК Роль,
	|				зпСтавкиОплатыПоНачислениям.Начисление КАК Начисление,
	|				МАКСИМУМ(зпСтавкиОплатыПоНачислениям.СтавкаЗаЧас) КАК СтавкаЗаЧас,
	|				МАКСИМУМ(зпСтавкиОплатыПоНачислениям.ДобавляемоеКоличествоЧасов) КАК ДобавляемоеКоличествоЧасов,
	|				МАКСИМУМ(зпСтавкиОплатыПоНачислениям.БрейкЧасовПереработки) КАК БрейкЧасовПереработки
	|			ИЗ
	|				ВТ_Данные КАК ВТ_Данные
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
	|					ПО (зпСтавкиОплатыПоНачислениям.СхемаРасчетаЗП = &СхемаРасчетаЗП)
	|						И (зпСтавкиОплатыПоНачислениям.ТарифРасчетаЗП = &ТарифРасчетаЗП)
	|						И ВТ_Данные.ОсновноеНачисление = зпСтавкиОплатыПоНачислениям.ОсновноеНачисление
	|						И (зпСтавкиОплатыПоНачислениям.Начисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧасПереработки))
	|						И ВТ_Данные.Роль = зпСтавкиОплатыПоНачислениям.Роль
	|						И (зпСтавкиОплатыПоНачислениям.СоставЭкипажа = &СоставЭкипажа)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТ_Данные.ОсновноеНачисление,
	|				ВТ_Данные.Роль,
	|				зпСтавкиОплатыПоНачислениям.Начисление) КАК ВЗ_СтавкиЗаЧас
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпБрейки.ГраницыБрейка КАК зпБрейкиГраницыБрейка
	|				ПО ВЗ_СтавкиЗаЧас.БрейкЧасовПереработки = зпБрейкиГраницыБрейка.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВЗ_СтавкиЗаЧас.ОсновноеНачисление,
	|			ВЗ_СтавкиЗаЧас.Роль,
	|			ВЗ_СтавкиЗаЧас.Начисление,
	|			ВЗ_СтавкиЗаЧас.СтавкаЗаЧас,
	|			ВЗ_СтавкиЗаЧас.ДобавляемоеКоличествоЧасов,
	|			ВЗ_СтавкиЗаЧас.БрейкЧасовПереработки) КАК ВЗ_СтавкиЗаЧас
	|		ПО ВТ_Данные.ОсновноеНачисление = ВЗ_СтавкиЗаЧас.ОсновноеНачисление
	|			И ВТ_Данные.Роль = ВЗ_СтавкиЗаЧас.Роль";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.зпИсходныеДанныеРасчетаЗПЧасы.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры
//Асеев 08.06.2023 (Задача № 5059)<<<

//Асеев 23.05.2023 (Задача № 5047)>>>
Процедура ВыполнитьДвиженияПоРСзпИсходныеДанныеРасчетаЗПЧасы() Экспорт
	
	Движения.зпИсходныеДанныеРасчетаЗПЧасы.Записывать = Истина;
	Движения.зпИсходныеДанныеРасчетаЗПЧасы.Очистить();
	
	ЕстьЭкспедитор = Не Экспедитор.Пустая();
	
	//Асеев 23.06.2023 (Задача № 5075)>>>
	//РассчитатьзпИсходныеДанныеРасчетаЗПЧасыСтавкаЗаЧас + ЗаСмену
	//Асеев 23.06.2023 (Задача № 5075)<<<
	СпособРасчета = ОсновноеНачислениеВодитель.СпособРасчета;
	ФиксироватьПоВодителю = (СпособРасчета = Перечисления.зпСпособыРасчетаНачислений.СтавкаЗаЧас) Или (СпособРасчета = Перечисления.зпСпособыРасчетаНачислений.СтавкаЗаСмену);
	Если ЕстьЭкспедитор Тогда
		СпособРасчета = ОсновноеНачислениеЭкспедитор.СпособРасчета;
		ФиксироватьПоЭкспедитору = (СпособРасчета = Перечисления.зпСпособыРасчетаНачислений.СтавкаЗаЧас) Или (СпособРасчета = Перечисления.зпСпособыРасчетаНачислений.СтавкаЗаСмену);
		СоставЭкипажа = Перечисления.зпСоставЭкипажа.ВодительСЭкспедитором;
	Иначе
		ФиксироватьПоЭкспедитору = Ложь;
		СоставЭкипажа = Перечисления.зпСоставЭкипажа.ВодительБезЭкспедитора;
	КонецЕсли;
	
	ФизЛицоВодителя = Водитель.ФизЛицо;
	ФизЛицоЭкспедитора = Экспедитор.ФизЛицо;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("НачалоРейса", Рейс.ДатаНачала);
	Запрос.УстановитьПараметр("КонецРейса", КонецДня(Рейс.ДатаНачала));
	Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ФизЛицоВодителя", ФизЛицоВодителя);
	Запрос.УстановитьПараметр("ФизЛицоЭкспедитора", ФизЛицоЭкспедитора);
	Запрос.УстановитьПараметр("ОсновноеНачислениеВодитель", ОсновноеНачислениеВодитель);
	Запрос.УстановитьПараметр("ОсновноеНачислениеЭкспедитор", ОсновноеНачислениеЭкспедитор);
	Запрос.УстановитьПараметр("ФиксироватьПоВодителю", ФиксироватьПоВодителю);
	Запрос.УстановитьПараметр("ФиксироватьПоЭкспедитору", ФиксироватьПоЭкспедитору);
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", СхемаРасчетаЗП);
	Запрос.УстановитьПараметр("ТарифРасчетаЗП", ТарифРасчетаЗП);
	Запрос.УстановитьПараметр("СоставЭкипажа", СоставЭкипажа);
	
	Если ФиксироватьПоВодителю Или ФиксироватьПоЭкспедитору Тогда
		РассчитатьзпИсходныеДанныеРасчетаЗПЧасыСтавкаЗаЧас(Запрос);
	КонецЕсли;
	
	//Асеев 08.06.2023 (Задача № 5059)>>>
	Запрос.УстановитьПараметр("ФиксироватьПоЭкспедитору", ЕстьЭкспедитор);
	
	РассчитатьзпИсходныеДанныеРасчетаЗПЧасыСтавкаЗаЧасПереработки(Запрос);
	//Асеев 08.06.2023 (Задача № 5059)<<<
	
КонецПроцедуры
//Асеев 23.05.2023 (Задача № 5047)<<<

//Асеев 03.11.2023 (Задача № 5161)>>>
Процедура ВыполнитьДвиженияПоРСэкУчетПроизводственныхОпераций()
	
	Движения.экУчетПроизводственныхОпераций.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	новаОтчетВодителяЗадания.Заказ КАК Заказ,
	|	Рейс.ТерминалДоставки КАК Регион,
	|	ЗНАЧЕНИЕ(Справочник.экВидыПроизводственныхОпераций.ПередачаЗаказовВРейс) КАК ВидОперации,
	|	ЛОЖЬ КАК ОбратныйПоток
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (Рейс.РейсМестнойДоставки = &Рейс)
	|ГДЕ
	|	новаОтчетВодителяЗадания.Ссылка = &Ссылка";
	
	ТаблицаДвижений = РегистрыСведений.экУчетПроизводственныхОпераций.ПолучитьТаблицуДвижений(Запрос);
	
	Движения.экУчетПроизводственныхОпераций.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры
//Асеев 03.11.2023 (Задача № 5161)<<<



