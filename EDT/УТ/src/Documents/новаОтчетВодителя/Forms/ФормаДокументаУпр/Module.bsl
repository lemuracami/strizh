
&НаКлиенте
Процедура ЗаданияПередУдалением(Элемент, Отказ)
	//Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаборыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

//Асеев 20.08.2021 (Задача № 4643)>>>
&НаСервереБезКонтекста
Функция ПолучитьИнформациюПриСменеРезультатаДоставки(Знач ВходныеДанные)
	
	ВыходныеДанные = Новый Структура("ТребуетсяПодписаниеИВозвратСопрДокументов,ТребуетсяПодписаниеИВозвратБНДокументов");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ВходныеДанные.Заказ);
	Запрос.УстановитьПараметр("ТипОплаты", ВходныеДанные.ТипОплаты);
	Запрос.УстановитьПараметр("ПричинаНевыполнения", ВходныеДанные.ПричинаНевыполнения);
	Запрос.УстановитьПараметр("СопрДокументыВКоробке", ВходныеДанные.СопрДокументыВКоробке);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПричинаНевыполнения В (ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки), ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
	|		И НЕ &СопрДокументыВКоробке
	|		И ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ПодписаниеИВозвратСопрДокументов, ЛОЖЬ) КАК ТребуетсяПодписаниеИВозвратСопрДокументов,
	|	&ПричинаНевыполнения В (ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки), ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
	|		И НЕ &СопрДокументыВКоробке
	|		И &ТипОплаты = ЗНАЧЕНИЕ(Справочник.ТипыОплат.БезналичныйРасчет)
	|		И НЕ ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов, ЛОЖЬ) КАК ТребуетсяПодписаниеИВозвратБНДокументов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент В
	|					(ВЫБРАТЬ
	|						РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
	|					ИЗ
	|						Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|					ГДЕ
	|						РеализацияТоваровУслуг.Ссылка = &Заказ)) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО (ДополнительныеПараметрыЗаказа.Заказ = &Заказ)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ВыходныеДанные, Выборка);
	Если Не (Выборка.ТребуетсяПодписаниеИВозвратСопрДокументов Или Выборка.ТребуетсяПодписаниеИВозвратБНДокументов) Тогда
		ВыходныеДанные.Вставить("СопрДокументПоступил");
		ВыходныеДанные.Вставить("СопрДокументНеПоступил");
	КонецЕсли;
	
	Возврат ВыходныеДанные;
	
КонецФункции
//Асеев 20.08.2021 (Задача № 4643)<<<

&НаКлиенте
Процедура ЗаданияРезультатДоставкиПриИзменении(Элемент)
	Если Элементы.Задания.ТекущиеДанные.РезультатДоставки <> ПредопределенноеЗначение("Справочник.новаРезультатМестнойДоставки.НеВыполнена") Тогда
		Элементы.Задания.ТекущиеДанные.Перенесено = Ложь;
		Элементы.Задания.ТекущиеДанные.ПричинаНевыполнения = "";
		Элементы.Задания.ТекущиеДанные.ПричинаОтказа = "";
		Элементы.Задания.ТекущиеДанные.ДатаПереноса = "";
	КонецЕсли;
	//Асеев 20.08.2021 (Задача № 4643)>>>
	Если Не Объект.РежимОбъединенияФункционалаЛогистаИКассира Тогда
		ВходныеДанные = Новый Структура("Заказ,ТипОплаты,ПричинаНевыполнения,СопрДокументыВКоробке");
		ЗаполнитьЗначенияСвойств(ВходныеДанные, Элементы.Задания.ТекущиеДанные);
		ЗаполнитьЗначенияСвойств(Элементы.Задания.ТекущиеДанные, ПолучитьИнформациюПриСменеРезультатаДоставки(ВходныеДанные));
	КонецЕсли;
	//Асеев 20.08.2021 (Задача № 4643)<<<
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияПричинаНевыполненияПриИзменении(Элемент)
	Если Элементы.Задания.ТекущиеДанные.ПричинаНевыполнения = ПредопределенноеЗначение("Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки") 
		Или Элементы.Задания.ТекущиеДанные.ПричинаНевыполнения = ПредопределенноеЗначение("Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом") Тогда
		Элементы.Задания.ТекущиеДанные.Перенесено = Истина;
	Иначе
		Элементы.Задания.ТекущиеДанные.Перенесено = Ложь;
		Элементы.Задания.ТекущиеДанные.ДатаПереноса = "";
	КонецЕсли;	
	//Асеев 20.08.2021 (Задача № 4643)>>>
	Если Не Объект.РежимОбъединенияФункционалаЛогистаИКассира Тогда
		ВходныеДанные = Новый Структура("Заказ,ТипОплаты,ПричинаНевыполнения,СопрДокументыВКоробке");
		ЗаполнитьЗначенияСвойств(ВходныеДанные, Элементы.Задания.ТекущиеДанные);
		ЗаполнитьЗначенияСвойств(Элементы.Задания.ТекущиеДанные, ПолучитьИнформациюПриСменеРезультатаДоставки(ВходныеДанные));
	КонецЕсли;
	//Асеев 20.08.2021 (Задача № 4643)<<<
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//+++ БАО 08.06.2017 №1024 
	//ТолькоПросмотр = Объект.РейсЗакрыт;
	ТолькоПросмотр = baoВызовСервера.РейсЗакрыт(Объект.Ссылка);
	//--- БАО 08.06.2017 №1024 
	
	ПредварительноеЗакрытиеРейса.Параметры.УстановитьЗначениеПараметра("ОтчетВодителя", Объект.Ссылка);
	
	//Асеев 16.03.2021 (по письму Re: Ошибка)>>>
	Элементы.ФормаОбновитьДанныеЭкипажа.Доступность = Не Объект.Проведен;
	//Асеев 16.03.2021 (по письму Re: Ошибка)<<<
	
	//Асеев 24.06.2022 (Задача № 4825)>>>
	Элементы.ФормаКомандаПриходДС.Видимость = Объект.РежимОбъединенияФункционалаЛогистаИКассира;
	Элементы.ФормаКомандаПриходДС.Доступность = Объект.РежимОбъединенияФункционалаЛогистаИКассира И Объект.Проведен;
	//Асеев 24.06.2022 (Задача № 4825)<<<
	
	//Асеев 02.09.2022 (Задача № 4889)>>>
	РежимРазделенияФункционалаЛогистаИКассира = Не Объект.РежимОбъединенияФункционалаЛогистаИКассира;
	Элементы.ТребуетсяПодписаниеИВозврат.Видимость = РежимРазделенияФункционалаЛогистаИКассира;
	Элементы.ЗаданияОтборСопр.Видимость = РежимРазделенияФункционалаЛогистаИКассира;
	Элементы.ЗаданияОтборБНал.Видимость = РежимРазделенияФункционалаЛогистаИКассира;
	//Асеев 02.09.2022 (Задача № 4889)<<<
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСуммы();
	
	ОбновитьИтоговыеПоказатели(Истина);
	
		
	// МАС - 24.01.2018 - для предотвращения ситуации, когда реквизит не записался и предварительные закрытия не отображаются --->> 
	//Элементы.ПредварительноеЗакрытиеРейса.Видимость = Объект.БылоПредварительноеЗакрытие;
	Если Объект.БылоПредварительноеЗакрытие Тогда	
		Элементы.ПредварительноеЗакрытиеРейса.Видимость = Истина;		
	Иначе	
		Элементы.ПредварительноеЗакрытиеРейса.Видимость = ЕстьПроведенноеПредварительноеЗакрытие();		
	КонецЕсли;	
	// <<--- МАС 
	

	ТолькоПросмотр = Объект.Проведен;
	
	ОбновитьОбъемыСпискаЗаборов();
	ЭтаФорма.ОбновитьОтображениеДанных();
	
	
КонецПроцедуры

//+++ БАО 10.08.2017 №1626
&НаСервере
Процедура ОбновитьИтоговыеПоказатели(РежимОткрытия = Ложь);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");

	ВсегоБезнальныхЗаказов = 0;
	ЗаказовКВозврату = 0;
	ЗаборовВыполнено = 0; 
	ЗаказовВыполнено = 0;
	
	ЗаказовВыполненоЧастично = 0;
	ЗаказовНеВыполнено = 0;
	ПереносовСЗаездом = 0;
	ПереносовБезЗаезда = 0;
	ОтказовБезЗаезда = 0;
	ОтказовСЗаездом = 0;
	ЗаборовНеВыполнено = 0;
	
	ДокументОбъект.ОбновитьИтоговыеПоказателиНаСервере(ДокументОбъект, РежимОткрытия, ВсегоБезнальныхЗаказов, ЗаказовКВозврату, ЗаборовВыполнено, ЗаказовВыполнено,
	ЗаказовВыполненоЧастично,
	ЗаказовНеВыполнено,
	ПереносовСЗаездом,
	ПереносовБезЗаезда,
	ОтказовБезЗаезда,
	ОтказовСЗаездом, 
	ЗаборовНеВыполнено);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Элементы.ИтогоНаличные_Значение.Заголовок = "" + Объект.ИтогоНаличные + " руб";
	Элементы.ИтогоТерминал_Значение.Заголовок = "" + Объект.ИтогоТерминал + " руб";
	Элементы.КоличествоБезнальныхЗаказов_Значение.Заголовок = "" + ВсегоБезнальныхЗаказов;
	Элементы.КоличествоЗаказовКВозврату_Значение.Заголовок = "" + ЗаказовКВозврату;
	Элементы.ЗаборовВсегоВыполнено_Значение.Заголовок = "" + ЗаборовВыполнено;
	Элементы.ЗаказовВсегоВыполнено_Значение.Заголовок = "" + ЗаказовВыполнено;
	
	Элементы.ЗаказовВыполненоЧастично_Значение.Заголовок = ЗаказовВыполненоЧастично;
	Элементы.ЗаказовНеВыполнено_Значение.Заголовок = ЗаказовНеВыполнено;
	Элементы.ПереносовСЗаездом_Значение.Заголовок = ПереносовСЗаездом;
	Элементы.ПереносовБезЗаезда_Значение.Заголовок = ПереносовБезЗаезда;
	Элементы.ОтказовБезЗаезда_Значение.Заголовок = ОтказовБезЗаезда;
	Элементы.ОтказовСЗаездом_Значение.Заголовок = ОтказовСЗаездом;	
	
КонецПроцедуры
//--- БАО 10.08.2017 №1626

&НаКлиенте
Процедура ЗакрытьПредварительно(Команда)
	  
	Если Объект.Проведен Тогда
		СтрокаТранспорт = "";
		Если Не Объект.Транспорт.Пустая() Тогда
		 	СтрокаТранспорт = СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Транспорт,"Наименование"));
		КонецеСли;	
		Сообщить("Рейс нельзя закрыть предварительно, документ уже проведен! (" + СтрокаТранспорт + ")");		 		 
	Иначе
		Объект.БылоПредварительноеЗакрытие = Истина; 
		ЗаполнитьОткрыть();
	КонецЕсли;	 	 
	 
КонецПроцедуры


&НаКлиенте
Процедура ЗакрытьИзСпискаРейсов(Док, НеОткрыватьИПроводить) Экспорт
	Если Объект.Проведен Тогда
		СтрокаТранспорт = "";
		Если Не Объект.Транспорт.Пустая() Тогда
			СтрокаТранспорт = СокрЛП(Объект.Транспорт.Наименование);
		КонецеСли;	
		Сообщить("Рейс нельзя закрыть предварительно, документ уже проведен! (" + СтрокаТранспорт + ")");		 		 
	Иначе	
		Объект.БылоПредварительноеЗакрытие = истина;
		//новаКонтекст.СборщикМусора.ЗарегистрироватьОбъектТребующийОчистки(ЭтаФорма);
		//СоздатьИнтерфейсСхемНачисленияЗарплаты(ПолучитьСхемыНачисленияЗарплаты());
		//СформироватьЖурналСтатей();
		//СформироватьЖурналЗаданий();
		
		//ИсточникЗаданий.ПередЗаписью();	
		
		ЗаполнитьОткрыть(Док, НеОткрыватьИПроводить);
	КонецЕсли;	 	 
Конецпроцедуры

&НаКлиенте
Процедура ЗаполнитьОткрыть(Док = "", НеОткрыватьИПроводить = Ложь)
	 	 
	//Записать();
	
	НужноЗакрыватьПредварительно = Ложь;
	Для каждого Стр Из Объект.Задания Цикл
		
		// Если стоит выполнено и перенесено одновременно
		Если Стр.РезультатДоставки = ПредопределенноеЗначение("Справочник.новаРезультатМестнойДоставки.Выполнена") 
			И (Стр.ПричинаНевыполнения = ПредопределенноеЗначение("Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки") 
				Или Стр.ПричинаНевыполнения = ПредопределенноеЗначение("Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом")) Тогда		
			НужноЗакрыватьПредварительно = Ложь;
			Сообщить("Заказ не может быть выполнен и перенесён одновременно: " + Стр.Задание);
			Возврат;	
		КонецЕсли;
		
		// Если стоит перенос, но не заполнена дата переноса
		Если НЕ ЗначениеЗаполнено(Стр.ДатаПереноса) 
			И (Стр.ПричинаНевыполнения = ПредопределенноеЗначение("Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки") 
				Или Стр.ПричинаНевыполнения = ПредопределенноеЗначение("Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом")) Тогда		
			НужноЗакрыватьПредварительно = Ложь;
			Сообщить("По заказу " + Стр.Задание + " не заполнена дата переноса!");
			Возврат;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(Стр.РезультатДоставки) ИЛИ ЗначениеЗаполнено(Стр.ДатаПереноса) Тогда	
			НужноЗакрыватьПредварительно = Истина;			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	Если НужноЗакрыватьПредварительно Тогда	
		
		
		ДокументПЗР = СоздатьДокументПЗР(Объект.Ссылка,НеОткрыватьИПроводить);	 
		
		Если Открыта() Тогда
			ЭтаФорма.Закрыть();	
		КонецеСли;	
		
		Если Не НеОткрыватьИПроводить Тогда		
			//ОткрытьЗначение(ДокументПЗР);
			ОткрытьФорму("Документ.ПредварительноеЗакрытиеРейса.ФормаОбъекта",Новый Структура("Ключ",ДокументПЗР),ЭтотОбъект.ВладелецФормы);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДокументПЗР(СсылкаДляЗаполнения, Проведение) 
	ПЗР = Документы.ПредварительноеЗакрытиеРейса.СоздатьДокумент();
	ПЗР.ЗаполнитьДокумент(СсылкаДляЗаполнения);
	Если Проведение Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;	
	ПЗР.Записать(РежимЗаписи);	
	Возврат ПЗР.Ссылка;
КонецФункции	


&НаКлиенте
Процедура ЗаданияПриИзменении(Элемент)
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеМП(Команда)
	
	//+++ БАО 08.06.2017 №1024 
	//Если Объект.РейсЗакрыт Тогда		
	Если baoВызовСервера.РейсЗакрыт(Объект.Ссылка) Тогда		
	//--- БАО 08.06.2017 №1024 	
		Сообщить("Рейс закрыт.");
		Возврат;		
	КонецЕсли;
	
	
	ОбновитьДанныеМПНаСервере();
	ОбновитьИтоговыеПоказатели();
	ОбновитьОбъемыСпискаЗаборов();
	ЭтаФорма.ОбновитьОтображениеДанных();
	
	Модифицированность = Истина;
	
КонецПроцедуры

//+++ БАО 10.08.2017 №1626
&НаСервере
Процедура ОбновитьДанныеМПНаСервере() Экспорт 
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");

	ДокументОбъект.ОбновитьДанныеМПНаСервере(ДокументОбъект);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры	
//--- БАО 10.08.2017 №1626

Процедура ПодтянутьДанныеМобильногоПриложения() Экспорт
	
	ЗаполнитьЗаборы();
	
	Объект.Задания.Очистить();
	
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	РейсЗаказы.Ссылка,
	                      |	РейсЗаказы.Заказ,
	                      |	РейсЗаказы.Вес,
	                      |	РейсЗаказы.Заказ.Номер КАК Номер,
	                      |	новаМестнаяДоставка.Ссылка КАК Задание,
	                      |	ТипыОплат.Ссылка КАК ТипОплаты,
	                      |	новаМестнаяДоставка.ТочкаПрибытия КАК АдресПосле,
						  //+++ БАО 25.05.2017 №874 
						  |	РейсЗаказы.Заказ.ЭтоДоговор КАК ЭтоДоговор,
						  //--- БАО 25.05.2017 №874 
	                      |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК АдресДо
	                      |ИЗ
	                      |	Документ.Рейс.Заказы КАК РейсЗаказы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	                      |		ПО РейсЗаказы.Заказ.Номер = новаМестнаяДоставка.Номер
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	                      |		ПО РейсЗаказы.Заказ.ТипОплаты = ТипыОплат.Код
	                      |ГДЕ
	                      |	РейсЗаказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	                      |	И РейсЗаказы.УдаленИзРейса = ЛОЖЬ
	                      |	И РейсЗаказы.Ссылка.РейсМестнойДоставки = &РейсМестнойДоставки");
	Запрос.УстановитьПараметр("РейсМестнойДоставки", Объект.Рейс);	
	
	//Геннадий #4101 09.03.2021 ->
	//Рез = Запрос.Выполнить().Выбрать();
	РезультатЗапроса = Запрос.Выполнить();
	Рез 			 = РезультатЗапроса.Выбрать();
	МассивЗаказов 	 = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Заказ");
	СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьСоответствиеЗаказовИЗон(МассивЗаказов);
	//Геннадий <-
	
	Пока Рез.Следующий() Цикл
		
		//Геннадий #4101 09.03.2021 ->
		стрЗадания = Объект.Задания.Добавить();
		ЗаполнитьЗначенияСвойств(стрЗадания, Рез);
		
		Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда	                                       
			стрЗадания.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов.Получить(Рез.Заказ);	
		КонецЕсли;
		//Геннадий <-
		
	КонецЦикла;
	
	
	
	
	Мас = Объект.Задания.Выгрузить(,"Задание");
	
	Зап = Новый Запрос;				
	Зап.Текст = "ВЫБРАТЬ
	            |	ДанныеЗаказаВодителя.Ссылка КАК Док,
	            |	ДанныеЗаказаВодителя.ВерсияДанных,
	            |	ДанныеЗаказаВодителя.ПометкаУдаления,
	            |	ДанныеЗаказаВодителя.Номер КАК Номер,
	            |	ДанныеЗаказаВодителя.Дата,
	            |	ДанныеЗаказаВодителя.Проведен,
	            |	ДанныеЗаказаВодителя.Реализация,
	            |	ДанныеЗаказаВодителя.Водитель,
	            |	ДанныеЗаказаВодителя.Статус,
	            |	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
	            |	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
	            |	ДанныеЗаказаВодителя.ДатаПереноса,
	            |	ДанныеЗаказаВодителя.Транспорт,
	            |	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	            |		Ссылка,
	            |		НомерСтроки,
	            |		Номенклатура,
	            |		КоличествоДоставлено
	            |	),
	            |	новаМестнаяДоставка.Ссылка КАК Доставка,
	            |	ДанныеЗаказаВодителя.Реализация.Номер КАК НомерДоставки,
	            |	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат,
	            |	ДанныеЗаказаВодителя.ТипОплаты,
	            |	ДанныеЗаказаВодителя.ТипЗаказа,
	            |	ДанныеЗаказаВодителя.Забор,
	            |	ТипыОплат.Ссылка КАК ТипОплатыРеализация,
	            |	ТипыОплат.Код КАК ТипОплатыРеализацияКод
	            |ИЗ
	            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО ДанныеЗаказаВодителя.Реализация.Номер = новаМестнаяДоставка.Номер
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	            |		ПО ДанныеЗаказаВодителя.Реализация.Номер = ВозвратТоваровОтПокупателя.Номер
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	            |		ПО ДанныеЗаказаВодителя.Реализация.ТипОплаты = ТипыОплат.Код,
	            |	Константа.ОсновнойТипПривязкиТелефонов КАК ОсновнойТипПривязкиТелефонов
	            |ГДЕ
	            |	ДанныеЗаказаВодителя.Дата МЕЖДУ &Дата И &ДатаОкончания
	            |	И новаМестнаяДоставка.Ссылка В(&Мас)
	            |	И ДанныеЗаказаВодителя.Проведен = ИСТИНА
	            |	И (ДанныеЗаказаВодителя.Водитель = &ВыбВодитель
	            |			ИЛИ ДанныеЗаказаВодителя.Транспорт = &ВыбТранспорт)
	            |	И ДанныеЗаказаВодителя.ТипЗаказа <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ДанныеЗаказаВодителя.Ссылка,
	            |	ДанныеЗаказаВодителя.ВерсияДанных,
	            |	ДанныеЗаказаВодителя.ПометкаУдаления,
	            |	ДанныеЗаказаВодителя.Номер,
	            |	ДанныеЗаказаВодителя.Дата,
	            |	ДанныеЗаказаВодителя.Проведен,
	            |	ДанныеЗаказаВодителя.Реализация,
	            |	ДанныеЗаказаВодителя.Водитель,
	            |	ДанныеЗаказаВодителя.Статус,
	            |	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
	            |	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
	            |	ДанныеЗаказаВодителя.ДатаПереноса,
	            |	ДанныеЗаказаВодителя.Транспорт,
	            |	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	            |		Ссылка,
	            |		НомерСтроки,
	            |		Номенклатура,
	            |		КоличествоДоставлено
	            |	),
	            |	NULL,
	            |	ДанныеЗаказаВодителя.Реализация.Номер,
	            |	NULL,
	            |	ДанныеЗаказаВодителя.ТипОплаты,
	            |	ДанныеЗаказаВодителя.ТипЗаказа,
	            |	ДанныеЗаказаВодителя.Забор,
	            |	NULL,
	            |	NULL
	            |ИЗ
	            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя,
	            |	Константа.ОсновнойТипПривязкиТелефонов КАК ОсновнойТипПривязкиТелефонов
	            |ГДЕ
	            |	ДанныеЗаказаВодителя.Дата МЕЖДУ &Дата И &ДатаОкончания
	            |	И ДанныеЗаказаВодителя.Проведен = ИСТИНА
	            |	И (ДанныеЗаказаВодителя.Водитель = &ВыбВодитель
	            |			ИЛИ ДанныеЗаказаВодителя.Транспорт = &ВыбТранспорт)
	            |	И ДанныеЗаказаВодителя.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Реализация,
	            |	Номер";
				
	Зап.УстановитьПараметр("Дата", Объект.Рейс.ДатаНачала);			
	Зап.УстановитьПараметр("ДатаОкончания", Объект.Рейс.ДатаНачала + 86400);			
	Зап.УстановитьПараметр("Мас", Мас);			
	Зап.УстановитьПараметр("ВыбТранспорт", Объект.Транспорт);			
	Зап.УстановитьПараметр("ВыбВодитель", Объект.Водитель);			
	
	Рез = Зап.Выполнить().Выгрузить();
	Объект.ДанныеМобильногоПриложения.Очистить();
	
	Пред = Неопределено;
	Сч = 0;
	
	МасЧаст = Новый Массив;
	Для Каждого Тек Из Рез Цикл	

		Нов = Объект.ДанныеМобильногоПриложения.Добавить();
		Нов.Доставка = Тек.Доставка;
		Нов.Документ = Тек.Док;
        //Серегин М.В. 23.06.2015 10:34:29
        //Костыль если в реализации тип оплаты не нал или терминал
		Если ЗначениеЗаполнено(Тек.Реализация) Тогда	
			//Если Тек.Реализация.ТипОплаты <> Справочники.ТипыОплат.Наличные.Код И Тек.Реализация.ТипОплаты <> Справочники.ТипыОплат.Терминал.Код Тогда
			Если Тек.ТипОплатыРеализацияКод <> 1 И Тек.ТипОплатыРеализацияКод <> 5 Тогда
			    Нов.ТипОплаты = Справочники.ТипыОплат.ПустаяСсылка();
			иначе
			    Нов.ТипОплаты = Тек.ТипОплаты;
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(Тек.Забор) Тогда				
			//Если Тек.Забор.ТипОплаты <> Справочники.ТипыОплат.Наличные.Код И Тек.Забор.ТипОплаты <> Справочники.ТипыОплат.Терминал.Код Тогда
	            Нов.ТипОплаты = Справочники.ТипыОплат.ПустаяСсылка();
			//иначе
			//    Нов.ТипОплаты = Тек.ТипОплаты;
			//КонецЕсли;	
		КонецЕсли;
       
        Нов.Реализация = Тек.Реализация;
		Нов.ТипЗаказа = Тек.ТипЗаказа;
		Нов.Забор = Тек.Забор;
	
        //Серегин М.В. 23.06.2015 10:34:31 
		ИтКол = 0;
		Для Каждого ТекТов Из Тек.ДоставленныеТовары Цикл
			ИтКол = ИтКол + ТекТов.КоличествоДоставлено;
		КонецЦикла;	
		Если ЗначениеЗаполнено(Тек.Возврат) Тогда
			КолВ = Тек.Возврат.Товары.Итог("Количество");
		Иначе
			КолВ = 0;
		КонецеСли;	
        
        
        Если ИтКол <> Тек.Реализация.Товары.Итог("Количество") + Тек.Реализация.ПодарочныеПозиции.Итог("Количество") - КолВ Тогда
            //Серегин М.В. 13.07.2015 13:53:19 дополнительное условие если были не доставлены услуги по заказам, тогда это частичка
            //старое условие оставляю (предыдущее) на случай если водители не будут отклонять услуги по заказам
            Если ИтКол <> ПолучитьКоличествоТоваровБезУслугПоЗаказам(Тек.Реализация) - КолВ Тогда
                МасЧаст.Добавить(Тек.Доставка);
            КонецЕсли;
        КонецЕсли;
		
		//Геннадий 21.10.2020 ->
		//по переписке с Тумаковым, проблема в том, что заборы автоматом не проставлялись как выполненные
		//исходный код:
		
		//Если Пред = Неопределено Тогда
		//	Пред = Тек.Доставка;
		//ИначеЕсли Пред <> Тек.Доставка И ЗначениеЗаполнено(Тек.Доставка) Тогда
		//	Пред = Тек.Доставка;
		//	Объект.ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;			 
		//ИначеЕсли Пред <> Тек.Доставка И ЗначениеЗаполнено(Тек.Забор) Тогда
		//	Пред = Тек.Забор;
		//	Объект.ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;
		//КонецеСли;	
		
		Если Пред = Неопределено Тогда
			Если ЗначениеЗаполнено(Тек.Реализация) Тогда
				Пред = Тек.Реализация;
			ИначеЕсли ЗначениеЗаполнено(Тек.Забор) Тогда
				Пред = Тек.Забор;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Тек.Реализация) Тогда
			Если Пред <> Тек.Реализация Тогда
				Пред = Тек.Реализация;
				Объект.ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;			 
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Тек.Забор) Тогда
			Если Пред <> Тек.Забор Тогда
				Пред = Тек.Забор;
				Объект.ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;
			КонецЕсли;
		КонецеСли;	
		//Геннадий <-
		
		Сч = Сч + 1;			
	КонецЦикла;	
	
	Если Объект.ДанныеМобильногоПриложения.Количество() > 0 Тогда
		Объект.ДанныеМобильногоПриложения[Сч - 1].АктуальныеДанные = Истина;
	КонецеСли;	
	
	
	Для Каждого Тек Из Объект.ДанныеМобильногоПриложения Цикл
		
		// Михушкин - добавлено ветвление для забора заказа
		Если Тек.ТипЗаказа = Перечисления.ТипыЗаказов.Забор Тогда // Забор заказа
			
			Если Не Тек.АктуальныеДанные Тогда
				Продолжить;
			КонецеСли;
			
			НайЗаборы = Объект.Заборы.НайтиСтроки(Новый Структура("Забор", Тек.Забор));
			
			ЕСли НЕ НайЗаборы.Количество() Тогда
				Продолжить;
			КонецеСли;	
			
			Если Тек.Документ.ПричинаНеВыполненияДоставки.Пустая() Тогда
				НайЗаборы[0].РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;	
				НайЗаборы[0].ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка();
				//НайЗаборы[0].Перенесено = ложь;
				НайЗаборы[0].ПричинаОтказа = Справочники.ПричиныОтказаПереноса.ПустаяСсылка();
				НайЗаборы[0].ИнициаторСостояния = "";
			Иначе
				НайЗаборы[0].РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
				НайЗаборы[0].ПричинаНевыполнения = Тек.Документ.ПричинаНеВыполненияДоставки;
				НайЗаборы[0].ПричинаОтказа = Тек.Документ.ПричинаОтказаПереноса;	
				НайЗаборы[0].ИнициаторСостояния = НайЗаборы[0].ПричинаОтказа.ИнициаторСостояния;
			КонецеСли;
			
		Иначе // НЕ Забор заказа
			
			Если Не Тек.АктуальныеДанные Тогда
				Продолжить;
			КонецеСли;	
			Най = Объект.Задания.НайтиСтроки(Новый Структура("Задание", Тек.Доставка));
	        //Серегин М.В. 23.06.2015 10:19:24 тип оплаты
	        Если ЗначениеЗаполнено(Тек.ТипОплаты) Тогда
	            Най[0].ТипОплаты = Тек.ТипОплаты;
			Иначе
			    Най[0].ТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(Тек.Реализация.ТипОплаты);
			КонецЕсли;
			
	        //Серегин М.В. 23.06.2015 10:19:26 
			Если Тек.Документ.ПричинаНеВыполненияДоставки.Пустая() Тогда
				НайР = МасЧаст.Найти(Тек.Доставка);
				Если НайР = Неопределено Тогда
					Най[0].РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;
				Иначе
					Най[0].РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично;
				КонецеСли;	
				Най[0].ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка();
				Най[0].ПричинаОтказа = Справочники.ПричиныОтказаПереноса.ПустаяСсылка();
				Най[0].Перенесено = ложь;
				Най[0].ИнициаторСостояния = "";
				Най[0].ДатаПереноса = дата("00010101");
			Иначе
				Най[0].РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
				Най[0].ПричинаНевыполнения = Тек.Документ.ПричинаНеВыполненияДоставки;
				Най[0].ПричинаОтказа = Тек.Документ.ПричинаОтказаПереноса;
				Если Най[0].ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Най[0].ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
					Най[0].Перенесено = Истина;
					Най[0].ДатаПереноса = ?(ЗначениеЗаполнено(Тек.Документ.ДатаПереноса), Тек.Документ.ДатаПереноса, (НачалоДня(Объект.Рейс.Дата) + 86400));
				КонецеСли;
				Най[0].ИнициаторСостояния = Най[0].ПричинаОтказа.ИнициаторСостояния;
			КонецеСли;	
		
		КонецЕсли;		
			
	КонецЦикла;	
	
	ЗаполнитьСуммы();
	
	ЗаполнитьТЧДанныеСклада();

	Заполнить_ПринятыеЗаказыТовары_ПоДаннымСклада();
	
	Заполнить_ТоварыКВозвратуПоДаннымМП();	
	
	Дата = ТекущаяДата();
	
	//Записать();
		
	
КонецПроцедуры

Процедура ЗаполнитьЗаборы()
	may.ЗаполнитьЗаборыНоваОтчетВодителя(Объект.Заборы, Объект.Рейс);   
КонецПроцедуры

//Функция возвращает количество товара в табичных частях "Товары" и "Подарочные позиции" без услуг по заказам
Функция ПолучитьКоличествоТоваровБезУслугПоЗаказам(Ссылка)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   РеализацияТоваровУслугТовары.Количество
        |ПОМЕСТИТЬ ВТ_Товары
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |ГДЕ
        |   РеализацияТоваровУслугТовары.Ссылка = &Ссылка
        |   И НЕ РеализацияТоваровУслугТовары.Номенклатура.Артикул В
        |               (ВЫБРАТЬ
        |                   УслугиПоЗаказам.Артикул
        |               ИЗ
        |                   Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |               ГДЕ
        |                   НЕ УслугиПоЗаказам.ПометкаУдаления)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугПодарочныеПозиции.Количество
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
        |ГДЕ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка = &Ссылка
        |   И НЕ РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Артикул В
        |               (ВЫБРАТЬ
        |                   УслугиПоЗаказам.Артикул
        |               ИЗ
        |                   Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |               ГДЕ
        |                   НЕ УслугиПоЗаказам.ПометкаУдаления)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СУММА(ВТ_Итог.Количество) КАК Количество
        |ПОМЕСТИТЬ ВТ_Итог
        |ИЗ
        |   ВТ_Товары КАК ВТ_Итог
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЕСТЬNULL(ВТ_Итог.Количество, 0) КАК Количество
        |ИЗ
        |   ВТ_Итог КАК ВТ_Итог";
    
    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.Количество;
    Иначе
        Возврат 0;
    КонецЕсли;
       
КонецФункции

Процедура ПодтянутьДанныеЛогиста() Экспорт
	
	Мас = Объект.Задания.Выгрузить(,"Задание");
	Зап = Новый Запрос;
					
	Зап.Текст = "ВЫБРАТЬ
	            |	ВводДанныхОСостоянииЗаказа.Ссылка КАК Док,
	            |	ВводДанныхОСостоянииЗаказа.ВерсияДанных,
	            |	ВводДанныхОСостоянииЗаказа.ПометкаУдаления,
	            |	ВводДанныхОСостоянииЗаказа.Номер КАК Номер,
	            |	ВводДанныхОСостоянииЗаказа.Дата,
	            |	ВводДанныхОСостоянииЗаказа.Проведен,
	            |	ВводДанныхОСостоянииЗаказа.Водитель,
	            |	ВводДанныхОСостоянииЗаказа.ДатаПереноса,
	            |	ВводДанныхОСостоянииЗаказа.Транспорт,
	            |	новаМестнаяДоставка.Ссылка КАК Доставка,
	            |	ВводДанныхОСостоянииЗаказа.ПричинаНевыполнения,
	            |	ВводДанныхОСостоянииЗаказа.ПричинаОтказа,
	            |	ВводДанныхОСостоянииЗаказа.Заказ
	            |ИЗ
	            |	Документ.ВводДанныхОСостоянииЗаказа КАК ВводДанныхОСостоянииЗаказа
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО ВводДанныхОСостоянииЗаказа.Заказ.Номер = новаМестнаяДоставка.Номер
	            |ГДЕ
	            |	ВводДанныхОСостоянииЗаказа.Дата МЕЖДУ &Дата И &ДатаОкончания
	            |	И новаМестнаяДоставка.Ссылка В(&Мас)
	            |	И ВводДанныхОСостоянииЗаказа.Проведен = ИСТИНА
	            |	И (ВводДанныхОСостоянииЗаказа.Водитель = &ВыбВодитель
	            |			ИЛИ ВводДанныхОСостоянииЗаказа.Транспорт = &ВыбТранспорт)
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Номер";
				
	Зап.УстановитьПараметр("Дата", НачалоДня(Объект.Рейс.ДатаНачала));			
	Зап.УстановитьПараметр("ДатаОкончания", Объект.Рейс.ДатаНачала + 86400);			
	Зап.УстановитьПараметр("Мас", Мас);			
	Зап.УстановитьПараметр("ВыбТранспорт", Объект.Транспорт);			
	Зап.УстановитьПараметр("ВыбВодитель", Объект.Водитель);			
	
	Рез = Зап.Выполнить().Выгрузить();
	Объект.ДанныеЛогиста.Очистить();
	
	Пред = Неопределено;
	Сч = 0;
	
	Для Каждого Тек Из Рез Цикл
		Нов = Объект.ДанныеЛогиста.Добавить();
		Нов.Доставка = Тек.Доставка;
		Нов.Документ = Тек.Док;
		
		Если Пред = Неопределено Тогда
			Пред = Тек.Доставка;
		ИначеЕсли Пред <> Тек.Доставка Тогда
			Пред = Тек.Доставка;
			Объект.ДанныеЛогиста[Сч - 1].АктуальныеДанные = Истина;
		КонецеСли;	
		Сч = Сч + 1;
	КонецЦикла;	
	Если Объект.ДанныеЛогиста.Количество() > 0 Тогда
		Объект.ДанныеЛогиста[Сч - 1].АктуальныеДанные = Истина;
	КонецеСли;	
	
	
	Для Каждого Тек Из Объект.ДанныеЛогиста Цикл
		Если Не Тек.АктуальныеДанные Тогда
			Продолжить;
		КонецеСли;	
		Най = Объект.Задания.Найти(Тек.Доставка);
		Най.РезультатДоставки = Тек.Документ.РезультатДоставки;
		Най.ПричинаНевыполнения = Тек.Документ.ПричинаНевыполнения;
		Най.ПричинаОтказа = Тек.Документ.ПричинаОтказа;
		Най.Перенесено = ложь;
		Най.ДатаПереноса = дата("00010101");
		Если Най.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Най.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			Най.Перенесено = Истина;
			Най.ДатаПереноса = Тек.Документ.ДатаПереноса;
		КонецеСли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьТЧДанныеСклада()

	// заполним ТЧ ДанныеСклада
	Объект.ДанныеСклада.Очистить();	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВозвратЗаказовОтВодителя.Ссылка
	                      |ИЗ
	                      |	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
	                      |ГДЕ
	                      |	ВозвратЗаказовОтВодителя.Рейс = &Рейс
	                      |	И ВозвратЗаказовОтВодителя.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Рейс", Объект.Рейс);	
	Рез = Запрос.Выполнить().Выбрать();	
	
	Пока Рез.Следующий() Цикл
		Нстр = Объект.ДанныеСклада.Добавить();
		Нстр.ВозвратЗаказовОтВодителя = Рез.Ссылка;	
	КонецЦикла;			
	
КонецПроцедуры

Процедура Заполнить_ПринятыеЗаказыТовары_ПоДаннымСклада()
	
	//+++ БАО 10.08.2017 №1626
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить_ПринятыеЗаказыТовары_ПоДаннымСклада();	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	//Объект.ПринятыеЗаказыПоДаннымСклада.Очистить();
	//
	//СписокВозвратов = Новый СписокЗначений;
	//
	//ЗапросРейсы = Новый Запрос("ВЫБРАТЬ
	//			|	ВозвратЗаказовОтВодителя.Ссылка
	//			|ИЗ
	//			|	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
	//			|ГДЕ
	//			|	ВозвратЗаказовОтВодителя.Рейс.РейсМестнойДоставки = &РейсМестнойДоставки
	//			|	И ВозвратЗаказовОтВодителя.Проведен
	//			|
	//			|СГРУППИРОВАТЬ ПО
	//			|	ВозвратЗаказовОтВодителя.Ссылка");
	//ЗапросРейсы.УстановитьПараметр("РейсМестнойДоставки", Объект.Рейс);	
	//РезРейсы = ЗапросРейсы.Выполнить().Выбрать();
	//
	//Пока РезРейсы.Следующий() Цикл	
	//	СписокВозвратов.Добавить(РезРейсы.Ссылка);				
	//КонецЦикла;
	//
	//
	////ПринятыеЗаказыПоДаннымСклада
	//ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ
	//                            |	ВозвратЗаказовОтВодителяДоставки.Доставка КАК Заказ,
	//                            |	ВозвратЗаказовОтВодителяДоставки.КВозврату КАК КВозврату,
	//                            |	ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью КАК ПринятНаСкладеПолностью,
	//                            |	ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично КАК ПринятНаСкладеЧастично,
	//                            |	ВозвратЗаказовОтВодителяДоставки.Ссылка КАК ДокВозврат,
	//                            |	ВЫБОР
	//                            |		КОГДА ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью = ИСТИНА
	//                            |			ТОГДА 1
	//                            |		КОГДА ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично = ИСТИНА
	//                            |			ТОГДА 1
	//                            |		ИНАЧЕ 0
	//                            |	КОНЕЦ КАК Порядок,
	//                            |	новаМестнаяДоставка.Ссылка КАК БПДоставка,
	//                            |	ВозвратЗаказовОтВодителяДоставки.ВидПроблемы КАК ВидПроблемы,
	//                            |	ВозвратЗаказовОтВодителяДоставки.ЭтоДоговор КАК ЭтоДоговор
	//                            |ИЗ
	//                            |	Документ.ВозвратЗаказовОтВодителя.Доставки КАК ВозвратЗаказовОтВодителяДоставки
	//                            |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//                            |		ПО ВозвратЗаказовОтВодителяДоставки.Доставка.Номер = новаМестнаяДоставка.Номер
	//                            |ГДЕ
	//                            |	ВозвратЗаказовОтВодителяДоставки.Ссылка.Ссылка В(&СписокВозвратов)
	//                            |	И ВозвратЗаказовОтВодителяДоставки.Ссылка.ПометкаУдаления = ЛОЖЬ
	//                            |
	//                            |УПОРЯДОЧИТЬ ПО
	//                            |	Порядок УБЫВ");
	//ЗапросЗаказы.УстановитьПараметр("СписокВозвратов", СписокВозвратов);	
	//РезЗаказы = ЗапросЗаказы.Выполнить().Выбрать();
	//
	//
	//Пока РезЗаказы.Следующий() Цикл	 
	//	Если РезЗаказы.КВозврату ИЛИ РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично Тогда
	//		
	//		Если Объект.ПринятыеЗаказыПоДаннымСклада.НайтиСтроки(Новый Структура("Заказ", РезЗаказы.Заказ)).Количество() Тогда				
	//			Если НЕ РезЗаказы.ПринятНаСкладеПолностью И НЕ РезЗаказы.ПринятНаСкладеЧастично Тогда					
	//				Продолжить;				
	//			КонецЕсли;		
	//		КонецЕсли;
	//		
	//		НСтр = Объект.ПринятыеЗаказыПоДаннымСклада.Добавить();	
	//		НСтр.ВозвратЗаказовОтВодителя = РезЗаказы.ДокВозврат;
	//		НСтр.Заказ = РезЗаказы.Заказ;
	//		НСтр.Ожидается = РезЗаказы.КВозврату;
	//		НСтр.ПринятСкладом = ?(РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично, Истина, Ложь);   
	//		
	//		//установка флага ЗаказыВозвращеныНаСклад
	//		Най = Объект.Задания.НайтиСтроки(Новый Структура("Задание", РезЗаказы.БПДоставка));
	//		Для каждого Стр Из Най Цикл	
	//			Если РезЗаказы.ПринятНаСкладеПолностью ИЛИ РезЗаказы.ПринятНаСкладеЧастично Тогда		
	//				Стр.ЗаказыВозвращеныНаСклад = Истина;		
	//			КонецЕсли;	
	//			// МАС - 22.06.2017 - №1158  --->> 
	//			Стр.ВидПроблемы = РезЗаказы.ВидПроблемы;
	//			// <<--- МАС 
	//		КонецЦикла;
	//		
	//	КонецЕсли;		 
	//КонецЦикла;
	//
	//
	//ТЗПринятыеЗаказыПоДаннымСклада = Объект.ПринятыеЗаказыПоДаннымСклада.Выгрузить();
	//ТЗПринятыеЗаказыПоДаннымСклада.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Ожидается,ПринятСкладом");
	////Объект.ПринятыеЗаказыПоДаннымСклада.Загрузить(ТЗПринятыеЗаказыПоДаннымСклада);
	////Объект.ПринятыеЗаказыПоДаннымСклада.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Ожидается,ПринятСкладом");
	//
	//
	//Объект.ПринятыеТоварыПоДаннымСклада.Очистить();
	//
	//// ПринятыеТоварыПоДаннымСклада 
	//ЗапросТовары = Новый Запрос("ВЫБРАТЬ
	//			|	ВозвратЗаказовОтВодителяТовары.Ссылка КАК ВозвратЗаказовОтВодителя,
	//			|	ВозвратЗаказовОтВодителяТовары.Доставка КАК Заказ,
	//			|	ВозвратЗаказовОтВодителяТовары.Номенклатура КАК Товар,
	//			|	ВозвратЗаказовОтВодителяТовары.Количество КАК КоличествоПринято,
	//			|	ВозвратЗаказовОтВодителяТовары.Цена,
	//			|	ВозвратЗаказовОтВодителяТовары.Сумма,
	//			|	ВозвратЗаказовОтВодителяТовары.КоличествоИсходное КАК КоличествоОжидается,
	//			|	ВозвратЗаказовОтВодителяТовары.ПринятНаСкладе,
	//			|	ВЫБОР
	//			|		КОГДА ВозвратЗаказовОтВодителяТовары.ПринятНаСкладе
	//			|			ТОГДА 1
	//			|		ИНАЧЕ 0
	//			|	КОНЕЦ КАК Порядок
	//			|ИЗ
	//			|	Документ.ВозвратЗаказовОтВодителя.Товары КАК ВозвратЗаказовОтВодителяТовары
	//			|ГДЕ
	//			|	ВозвратЗаказовОтВодителяТовары.Ссылка.Ссылка В(&СписокВозвратов)
	//			|	И ВозвратЗаказовОтВодителяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	//			|
	//			|УПОРЯДОЧИТЬ ПО
	//			|	Порядок УБЫВ");
	//ЗапросТовары.УстановитьПараметр("СписокВозвратов", СписокВозвратов);	
	//ТЗРезТовары = ЗапросТовары.Выполнить().Выгрузить();
	//
	////Пока РезТовары.Следующий() Цикл
	//Для каждого Стр Из ТЗРезТовары Цикл
	//
	//	
	//	Если Объект.ПринятыеТоварыПоДаннымСклада.НайтиСтроки(Новый Структура("Товар", Стр.Товар)).Количество() И Объект.ПринятыеТоварыПоДаннымСклада.НайтиСтроки(Новый Структура("Заказ", Стр.Заказ)).Количество() Тогда				
	//		Если НЕ Стр.ПринятНаСкладе Тогда					
	//			Продолжить;				
	//		КонецЕсли;		
	//	КонецЕсли;
	//	
	//	НСтр = Объект.ПринятыеТоварыПоДаннымСклада.Добавить();
	//	НСтр.ВозвратЗаказовОтВодителя = Стр.ВозвратЗаказовОтВодителя;
	//	НСтр.Заказ = Стр.Заказ;
	//	НСтр.КоличествоОжидается = Стр.КоличествоОжидается;
	//	НСтр.КоличествоПринято = Стр.КоличествоПринято;
	//	НСтр.Товар = Стр.Товар;		 
	//	
	//КонецЦикла;
	//
	//ТЗТов = Объект.ПринятыеТоварыПоДаннымСклада.Выгрузить();
	//ТЗТов.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Товар,КоличествоОжидается,КоличествоПринято");
	//Объект.ПринятыеТоварыПоДаннымСклада.Загрузить(ТЗТов);
	////Объект.ПринятыеТоварыПоДаннымСклада.Свернуть("ВозвратЗаказовОтВодителя,Заказ,Товар,КоличествоОжидается,КоличествоПринято");
//--- БАО 10.08.2017 №1626	
КонецПроцедуры

Процедура Заполнить_ТоварыКВозвратуПоДаннымМП()
	
	// Сначала сформируем таблицу заказов 
	ТабВозвратныхЗаказов = Новый ТаблицаЗначений;
	ТабВозвратныхЗаказов.Колонки.Добавить("Заказ");
	ТабВозвратныхЗаказов.Колонки.Добавить("ВозвратТоваров");
	ТабВозвратныхЗаказов.Колонки.Добавить("РезультатДоставки");
	ТабВозвратныхЗаказов.Колонки.Добавить("ПричинаНеВыполненияДоставки");
	ТабВозвратныхЗаказов.Колонки.Добавить("ДанныеМП");
	ТабВозвратныхЗаказов.Колонки.Добавить("КВозврату");
	
	
	Зап = Новый Запрос;					
	Зап.Текст = "ВЫБРАТЬ
				|	ДанныеЗаказаВодителя.Ссылка КАК Док,
				|	ДанныеЗаказаВодителя.Номер КАК Номер,
				|	ДанныеЗаказаВодителя.Дата КАК Дата,
				|	ДанныеЗаказаВодителя.Проведен,
				|	ДанныеЗаказаВодителя.Реализация,
				|	ДанныеЗаказаВодителя.Водитель,
				|	ДанныеЗаказаВодителя.Статус,
				|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
				|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
				|	ДанныеЗаказаВодителя.ДатаПереноса,
				|	ДанныеЗаказаВодителя.Транспорт,
				|	ДанныеЗаказаВодителя.ДоставленныеТовары.(
				|		Ссылка,
				|		НомерСтроки,
				|		Номенклатура,
				|		КоличествоДоставлено
				|	),
				|	новаМестнаяДоставка.Ссылка КАК Доставка,
				|	ДанныеЗаказаВодителя.Реализация.Номер КАК НомерДоставки,
				|	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат,
				|	ДанныеЗаказаВодителя.ТипОплаты,
				|	ДанныеЗаказаВодителя.ТипЗаказа,
				|	ДанныеЗаказаВодителя.Забор,
				|	1 КАК Кол,
				|	ВЫБОР
				|		КОГДА ВозвратЗаказовОтВодителяДоставки.Ссылка ЕСТЬ NULL 
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК УжеВернули
				|ИЗ
				|	Константа.ОсновнойТипПривязкиТелефонов КАК ОсновнойТипПривязкиТелефонов,
				|	Документ.Рейс.Заказы КАК РейсЗаказы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|				ПО (РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер)
				|			ПО ДанныеЗаказаВодителя.Реализация.Номер = новаМестнаяДоставка.Номер
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
				|			ПО ДанныеЗаказаВодителя.Реализация.Номер = ВозвратТоваровОтПокупателя.Номер
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратЗаказовОтВодителя.Доставки КАК ВозвратЗаказовОтВодителяДоставки
				|			ПО ДанныеЗаказаВодителя.Реализация = ВозвратЗаказовОтВодителяДоставки.Доставка
				|				И (ВозвратЗаказовОтВодителяДоставки.Ссылка.Проведен)
				|				И (ВозвратЗаказовОтВодителяДоставки.Ссылка.Дата МЕЖДУ &Дата И &ДатаОкончания)
				|				И (ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью = ИСТИНА
				|					ИЛИ ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично = ИСТИНА)
				|		ПО РейсЗаказы.Заказ = ДанныеЗаказаВодителя.Реализация
				|ГДЕ
				|	ДанныеЗаказаВодителя.Дата МЕЖДУ &Дата И &ДатаОкончания
				|	И ДанныеЗаказаВодителя.Проведен = ИСТИНА
				|	И (ДанныеЗаказаВодителя.Водитель = &ВыбВодитель
				|			ИЛИ ДанныеЗаказаВодителя.Транспорт = &ВыбТранспорт)
				|	И ДанныеЗаказаВодителя.ТипЗаказа <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
				|	И РейсЗаказы.Ссылка.РейсМестнойДоставки = &БПРейс
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеЗаказаВодителя.Ссылка,
				|	ДанныеЗаказаВодителя.Номер,
				|	ДанныеЗаказаВодителя.Дата,
				|	ДанныеЗаказаВодителя.Проведен,
				|	ДанныеЗаказаВодителя.Реализация,
				|	ДанныеЗаказаВодителя.Водитель,
				|	ДанныеЗаказаВодителя.Статус,
				|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки,
				|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса,
				|	ДанныеЗаказаВодителя.ДатаПереноса,
				|	ДанныеЗаказаВодителя.Транспорт,
				|	ДанныеЗаказаВодителя.ДоставленныеТовары.(
				|		Ссылка,
				|		НомерСтроки,
				|		Номенклатура,
				|		КоличествоДоставлено
				|	),
				|	NULL,
				|	ДанныеЗаказаВодителя.Реализация.Номер,
				|	NULL,
				|	ДанныеЗаказаВодителя.ТипОплаты,
				|	ДанныеЗаказаВодителя.ТипЗаказа,
				|	ДанныеЗаказаВодителя.Забор,
				|	1,
				|	ВЫБОР
				|		КОГДА ВозвратЗаказовОтВодителяДоставки.Ссылка ЕСТЬ NULL 
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ
				|ИЗ
				|	Константа.ОсновнойТипПривязкиТелефонов КАК ОсновнойТипПривязкиТелефонов,
				|	Документ.Рейс.Заказы КАК РейсЗаказы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратЗаказовОтВодителя.Доставки КАК ВозвратЗаказовОтВодителяДоставки
				|			ПО ДанныеЗаказаВодителя.Реализация = ВозвратЗаказовОтВодителяДоставки.Доставка
				|				И (ВозвратЗаказовОтВодителяДоставки.Ссылка.Проведен)
				|				И (ВозвратЗаказовОтВодителяДоставки.Ссылка.Дата МЕЖДУ &Дата И &ДатаОкончания)
				|				И (ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеПолностью = ИСТИНА
				|					ИЛИ ВозвратЗаказовОтВодителяДоставки.ПринятНаСкладеЧастично = ИСТИНА)
				|		ПО РейсЗаказы.Заказ = ДанныеЗаказаВодителя.Реализация
				|ГДЕ
				|	ДанныеЗаказаВодителя.Дата МЕЖДУ &Дата И &ДатаОкончания
				|	И ДанныеЗаказаВодителя.Проведен = ИСТИНА
				|	И (ДанныеЗаказаВодителя.Водитель = &ВыбВодитель
				|			ИЛИ ДанныеЗаказаВодителя.Транспорт = &ВыбТранспорт)
				|	И ДанныеЗаказаВодителя.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
				|	И РейсЗаказы.Ссылка.РейсМестнойДоставки = &БПРейс
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ";
	
	Зап.УстановитьПараметр("Дата", НачалоДня(Объект.Рейс.Дата));			
	Зап.УстановитьПараметр("ДатаОкончания", НачалоДня(Объект.Рейс.Дата) + 86400);			
	Зап.УстановитьПараметр("ВыбТранспорт", Объект.Транспорт);			
	Зап.УстановитьПараметр("ВыбВодитель", Объект.Водитель);	
	Зап.УстановитьПараметр("БПРейс", Объект.Рейс);
	
	РезТЗ = Зап.Выполнить().Выгрузить();
	
	Для Каждого Тек Из РезТЗ Цикл	
		
		
		// проверка не было ли уже этой реализации
		НайТекДоставка = ТабВозвратныхЗаказов.НайтиСтроки(Новый Структура("Заказ", Тек.Реализация));
		Если НайТекДоставка.Количество() Тогда
			Продолжить;	
		КонецЕсли;
		
		// заполняем ТоварыКВозвратуПоДаннымМП
		Нов = ТабВозвратныхЗаказов.Добавить();
		
		Нов.ДанныеМП = Тек.Док;
		Нов.Заказ = Тек.Реализация;	
		Если ЗначениеЗаполнено(Тек.Возврат) Тогда
			Нов.ВозвратТоваров = Тек.Возврат;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Тек.Возврат) Тогда		
			ЭтоЧастичка = Ложь;		
		Иначе		
			ЭтоЧастичка = ПроверкаНаЧастичку(Тек.Док);			
		КонецЕсли;
		
		Нов.КВозврату = Ложь;
		Если ЗначениеЗаполнено(Тек.ПричинаНеВыполненияДоставки) ИЛИ ЭтоЧастичка ИЛИ ЗначениеЗаполнено(Тек.Возврат) Тогда
			
			Нов.КВозврату = Истина;
			
			Если Тек.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
				ИЛИ Тек.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом 
				ИЛИ Тек.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда 
				ИЛИ Тек.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
				
				Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;				
			Иначе
				Если ЭтоЧастичка Тогда	
					Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично;
				ИначеЕсли ЗначениеЗаполнено(Тек.Возврат) Тогда	
					Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
				Иначе
					Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;					
				КонецЕсли;									
			КонецЕсли;			
		КонецЕсли;				
		
	КонецЦикла;	
	
	ТабВозвратныхЗаказов.Свернуть("Заказ,ВозвратТоваров,РезультатДоставки,ПричинаНеВыполненияДоставки,ДанныеМП,КВозврату");
	
	
	Объект.ТоварыКВозвратуПоДаннымМП.Очистить();
	
	// заполняем ТЧ ТоварыКВозвратуПоДаннымМП
	Для каждого Стр Из ТабВозвратныхЗаказов Цикл	
		
		// ------------- Частичный возврат
		Если ЗначениеЗаполнено(Стр.ВозвратТоваров) Тогда
			
			ЗапросВозвраты = Новый Запрос("ВЫБРАТЬ
						|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
						|	ВозвратТоваровОтПокупателяТовары.Количество,
						|	ВозвратТоваровОтПокупателяТовары.Цена,
						|	ВозвратТоваровОтПокупателяТовары.Сумма
						|ИЗ
						|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
						|ГДЕ
						|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка");
			ЗапросВозвраты.УстановитьПараметр("Ссылка", Стр.ВозвратТоваров);
			РезВозвраты = ЗапросВозвраты.Выполнить().Выгрузить();
			
			Для каждого Тек Из РезВозвраты Цикл				
				НовТ = Объект.ТоварыКВозвратуПоДаннымМП.Добавить();
				НовТ.ДанныеМП = Стр.ДанныеМП;
				НовТ.Заказ = Стр.Заказ;
				НовТ.Товар = Тек.Номенклатура;
				НовТ.КоличествоОжидается = Тек.Количество;					
			КонецЦикла;
			
			
		ИначеЕсли Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда			
			
			ЗапросЧастичка = Новый Запрос("ВЫБРАТЬ
						|	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура,
						|	СУММА(ДанныеЗаказаВодителяДоставленныеТовары.КоличествоДоставлено) КАК КоличествоДоставлено
						|ПОМЕСТИТЬ ВТ_Данные
						|ИЗ
						|	Документ.ДанныеЗаказаВодителя.ДоставленныеТовары КАК ДанныеЗаказаВодителяДоставленныеТовары
						|ГДЕ
						|	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка = &СсылкаМП
						|
						|СГРУППИРОВАТЬ ПО
						|	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	РеализацияТоваровУслугТовары.Номенклатура,
						|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
						|ПОМЕСТИТЬ ВТ_Реализация
						|ИЗ
						|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
						|ГДЕ
						|	РеализацияТоваровУслугТовары.Ссылка = &СсылкаРеализация
						|
						|СГРУППИРОВАТЬ ПО
						|	РеализацияТоваровУслугТовары.Номенклатура
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
						|	СУММА(РеализацияТоваровУслугПодарочныеПозиции.Количество)
						|ИЗ
						|	Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
						|ГДЕ
						|	РеализацияТоваровУслугПодарочныеПозиции.Ссылка = &СсылкаРеализация
						|
						|СГРУППИРОВАТЬ ПО
						|	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ВТ_Данные.Номенклатура,
						|	ВТ_Реализация.Количество - ВТ_Данные.КоличествоДоставлено КАК КоличествоНеДоставлено
						|ИЗ
						|	ВТ_Данные КАК ВТ_Данные
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реализация КАК ВТ_Реализация
						|		ПО ВТ_Данные.Номенклатура = ВТ_Реализация.Номенклатура");
			
			
			Если ЗначениеЗаполнено(Стр.ДанныеМП) Тогда
				
				ЗапросЧастичка.УстановитьПараметр("СсылкаМП", Стр.ДанныеМП);
				ЗапросЧастичка.УстановитьПараметр("СсылкаРеализация", Стр.Заказ);
				РезЧастичка = ЗапросЧастичка.Выполнить().Выгрузить();
				
				Для каждого СтрТ Из РезЧастичка Цикл
					
					Если СтрТ.КоличествоНеДоставлено = NULL Тогда
						Продолжить;	
					КонецЕсли;
					
					Если СтрТ.КоличествоНеДоставлено > 0 Тогда		
						НовТ = Объект.ТоварыКВозвратуПоДаннымМП.Добавить();
						НовТ.ДанныеМП = Стр.ДанныеМП;
						НовТ.Заказ = Стр.Заказ;
						НовТ.Товар = СтрТ.Номенклатура;
						НовТ.КоличествоОжидается = СтрТ.КоличествоНеДоставлено;												
					КонецЕсли;	
					
				КонецЦикла;			
				
			КонецЕсли;
			
			
			
		// ------------- Полный возврат	
		ИначеЕсли Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена ИЛИ НЕ Стр.КВозврату Тогда	
			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
						|	ПоступлениеТоваровУслугТовары.Номенклатура,
						|	ПоступлениеТоваровУслугТовары.Количество,
						|	ПоступлениеТоваровУслугТовары.Цена,
						|	ПоступлениеТоваровУслугТовары.Сумма,
						|	УслугиПоЗаказам.Ссылка
						|ПОМЕСТИТЬ ВТ
						|ИЗ
						|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
						|		ПО ПоступлениеТоваровУслугТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
						|ГДЕ
						|	ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура,
						|	СУММА(ПоступлениеТоваровУслугПодарочныеПозиции.Количество),
						|	ПоступлениеТоваровУслугПодарочныеПозиции.Цена,
						|	СУММА(ПоступлениеТоваровУслугПодарочныеПозиции.Сумма),
						|	УслугиПоЗаказам.Ссылка
						|ИЗ
						|	Документ.ПоступлениеТоваровУслуг.ПодарочныеПозиции КАК ПоступлениеТоваровУслугПодарочныеПозиции
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
						|		ПО ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
						|ГДЕ
						|	ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер
						|
						|СГРУППИРОВАТЬ ПО
						|	ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура,
						|	ПоступлениеТоваровУслугПодарочныеПозиции.Цена,
						|	УслугиПоЗаказам.Ссылка
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ВТ.Номенклатура,
						|	СУММА(ВТ.Количество) КАК Количество,
						|	ВТ.Цена,
						|	СУММА(ВТ.Сумма) КАК Сумма
						|ИЗ
						|	ВТ КАК ВТ
						|ГДЕ
						|	ВТ.Ссылка ЕСТЬ NULL 
						|
						|СГРУППИРОВАТЬ ПО
						|	ВТ.Номенклатура,
						|	ВТ.Цена");
			Запрос.УстановитьПараметр("Номер", Стр.Заказ.Номер);
			Рез = Запрос.Выполнить().Выгрузить();
			
			Для каждого Тек Из Рез Цикл				
				НовТ = Объект.ТоварыКВозвратуПоДаннымМП.Добавить();
				НовТ.ДанныеМП = Стр.ДанныеМП;
				НовТ.Заказ = Стр.Заказ;
				НовТ.Товар = Тек.Номенклатура;
				НовТ.КоличествоОжидается = Тек.Количество;				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	
КонецПроцедуры

Функция ПроверкаНаЧастичку(ДокДанныеМП)
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
				|	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура,
				|	СУММА(ДанныеЗаказаВодителяДоставленныеТовары.КоличествоДоставлено) КАК КоличествоДоставлено
				|ПОМЕСТИТЬ ВТ_Данные
				|ИЗ
				|	Документ.ДанныеЗаказаВодителя.ДоставленныеТовары КАК ДанныеЗаказаВодителяДоставленныеТовары
				|ГДЕ
				|	ДанныеЗаказаВодителяДоставленныеТовары.Ссылка = &СсылкаМП
				|
				|СГРУППИРОВАТЬ ПО
				|	ДанныеЗаказаВодителяДоставленныеТовары.Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	РеализацияТоваровУслугТовары.Номенклатура,
				|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
				|ПОМЕСТИТЬ ВТ_Реализация
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка = &СсылкаРеализация
				|
				|СГРУППИРОВАТЬ ПО
				|	РеализацияТоваровУслугТовары.Номенклатура
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
				|	СУММА(РеализацияТоваровУслугПодарочныеПозиции.Количество)
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
				|ГДЕ
				|	РеализацияТоваровУслугПодарочныеПозиции.Ссылка = &СсылкаРеализация
				|
				|СГРУППИРОВАТЬ ПО
				|	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Данные.Номенклатура,
				|	ВТ_Реализация.Количество - ВТ_Данные.КоличествоДоставлено КАК КоличествоНеДоставлено
				|ИЗ
				|	ВТ_Данные КАК ВТ_Данные
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реализация КАК ВТ_Реализация
				|		ПО ВТ_Данные.Номенклатура = ВТ_Реализация.Номенклатура");
	Запрос.УстановитьПараметр("СсылкаМП", ДокДанныеМП);
	Запрос.УстановитьПараметр("СсылкаРеализация", ДокДанныеМП.Реализация);
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		Если Рез.КоличествоНеДоставлено = NULL Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Рез.КоличествоНеДоставлено > 0 Тогда		
			Возврат	Истина;		
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
	
КонецФункции // ()

&НаКлиенте
Процедура СменаАдреса(Команда)
	
	Если Объект.Проведен Тогда	
		Сообщить("Документ проведен");
		Возврат;	
	КонецЕсли;
	
	//Геннадий #4101 09.03.2021 ->
	Если ЭтаФорма.ТекущийЭлемент.Имя = "Задания" Тогда
		ТекДанные = Элементы.Задания.ТекущиеДанные;
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "Заборы" Тогда
		ТекДанные = Элементы.Заборы.ТекущиеДанные;
	КонецЕсли;
	//Геннадий <-
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//П = Новый Структура;
	//П.Вставить("ТочкаДоставки", ТекДанные.АдресПосле);	
	//ОткрытьФорму("Обработка.новаПоискАдреса.Форма.Форма", П, ЭтаФорма);
	
	//Геннадий #4101 09.03.2021 ->
	//исходный вариант: 
	//// Якурнов 14.08.2018 11:53:15
	//АдресПосле = ПолучитьНаименованиеАдреса(ТекДанные.АдресПосле);
	//
	//СтрПараметров = Новый Структура;
	//СтрПараметров.Вставить("Адрес",АдресПосле);
	////+Степанов
	//СтрПараметров.Вставить("НомерЗаказа",ПолучитьНомерЗадания(ТекДанные.Задание));
	////-Степанов
	
	СтрПараметров = Новый Структура;
	Если ЭтаФорма.ТекущийЭлемент.Имя = "Задания" Тогда
		
		АдресПосле = ПолучитьНаименованиеАдреса(ТекДанные.АдресПосле);
		СтрПараметров.Вставить("Адрес", 		АдресПосле);
		СтрПараметров.Вставить("НомерЗаказа", 	ПолучитьНомерЗадания(ТекДанные.Задание));
		
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "Заборы" Тогда
		
		Адрес = ТекДанные.Адрес;
		СтрПараметров.Вставить("Адрес", 		Адрес);
		СтрПараметров.Вставить("НомерЗаказа", 	ПолучитьНомерЗадания(ТекДанные.Забор));
		
	КонецЕсли;
	//Геннадий <-
	
	СтрПараметров.Вставить("ЭтоОтчетВодителя",Истина);//Широков Задача 4369
		
	ОткрытьФорму("Обработка.новаПоискАдреса.Форма.ФормаУпр",СтрПараметров,ЭтаФорма);

		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерЗадания(Задание)
	Возврат Задание.Номер
КонецФункции	

// Якурнов 14.08.2018 11:56:30
&НаСервере
Функция ПолучитьНаименованиеАдреса(АдресПосле)
	Возврат АдресПосле.Наименование;
КонецФункции


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		ТекДанные = Элементы.Задания.ТекущиеДанные;
		Элементы.Задания.ТекущиеДанные.АдресПосле = ВыбранноеЗначение;
		Элементы.Задания.ТекущиеДанные.АдресПослеТекст = ВыбранноеЗначение.Наименование;	
		ЭтотОбъект.Записать();
		//ЗаписатьСменуАдреса();
	КонецЕсли;
	
	Элементы.Задания.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранАдрес" Тогда		
		Если ЗначениеЗаполнено(Параметр) Тогда			
			//Геннадий #4101 05.03.2021 ->
			//ТекДанные = Элементы.Задания.ТекущиеДанные;
			//НоваяТочка = СоздатьНовуюТочкуНаСервере(Параметр, ТекДанные.Задание);
			Если ЭтаФорма.ТекущийЭлемент.Имя = "Задания" Тогда
				ТекДанные  = Элементы.Задания.ТекущиеДанные;
				НоваяТочка = СоздатьНовуюТочкуНаСервере_Новая(Параметр, ТекДанные.Задание, ТекДанные.Заказ);
			ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "Заборы" Тогда
				ТекДанные  = Элементы.Заборы.ТекущиеДанные;
				НоваяТочка = СоздатьНовуюТочкуНаСервере_Новая(Параметр, ТекДанные.Забор);
			КонецЕсли;
			//Геннадий <-
			
			ТекДанные.АдресПосле = НоваяТочка;
			//+Степанов Через точку на клиенте значение не получается.
			//ТекДанные.АдресПослеТекст = НоваяТочка.Наименование;
			ТекДанные.АдресПослеТекст = ОбщегоНазначения.ПолучитьРеквизитОбъекта(НоваяТочка,"Наименование");
			//-Степанов
			
			//Геннадий #4101 10.03.2021 ->
			СтруктураТочки = Новый Структура;
			Если ЭтаФорма.ТекущийЭлемент.Имя = "Задания" Тогда
				СтруктураТочки.Вставить("НомерЗаказа",  Число(СокрЛП(ПолучитьНомерЗадания(ТекДанные.Заказ))));
				СтруктураТочки.Вставить("ТипЗаказа", 	ПредопределенноеЗначение("Перечисление.ТипыЗаказов.Доставка"));
			ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "Заборы" Тогда
				СтруктураТочки.Вставить("НомерЗаказа",  Число(СокрЛП(ПолучитьНомерЗадания(ТекДанные.Забор))));
				СтруктураТочки.Вставить("ТипЗаказа", 	ПредопределенноеЗначение("Перечисление.ТипыЗаказов.Забор"));
			КонецЕсли;
			СтруктураТочки.Вставить("Регион", 	Объект.ТерминалДоставки);
			ЗаполнитьКоординаты(СтруктураТочки, НоваяТочка);
			
			МассивДанных  = Новый Массив;
			МассивДанных.Добавить(СтруктураТочки);
			
			//ТекДанные.ЗонаДоставкиЗП = ПолучитьЗонуДоставкиПоНовомуАдресу(МассивДанных);
			СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьЗоныЗаказов(МассивДанных);
			Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда
				Если ЭтаФорма.ТекущийЭлемент.Имя = "Задания" Тогда
					ТекДанные.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов.Получить(ТекДанные.Заказ);
				ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "Заборы" Тогда
					ТекДанные.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов.Получить(ТекДанные.Забор);
				КонецЕсли;
			КонецЕсли;
			//Геннадий <-
			
			ЭтотОбъект.Записать();
			//ЗаписатьСменуАдреса();
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСменуАдреса()

	//ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.новаОтчетВодителя"));	
	//ДокОбъект.ЗаписатьАдресаВИсторию();

КонецПроцедуры

Функция СоздатьНовуюТочкуНаСервере(Адрес, Задание)
	
	СтараяТочка = Задание.ТочкаПрибытия;
	
	НТочка = справочники.новаТочкиДоставки.СоздатьЭлемент();
	НТочка.Заполнить(СтараяТочка);
	НТочка.Адрес = Адрес;
	НТочка.Наименование = Строка(Адрес);
	НТочка.Записать();
	
	БПМестнаяДоставка = Задание.ПолучитьОбъект();
	БПМестнаяДоставка.ТочкаПрибытия = НТочка.Ссылка;
	БПМестнаяДоставка.Адрес = НТочка.Адрес;
	БПМестнаяДоставка.Записать();
	
	ЛогироватьСменуАдреса(Задание, СтараяТочка, НТочка.Ссылка);
	// lem привязка полигонов
	Если ЗначениеЗаполнено(Адрес.Долгота) И ЗначениеЗаполнено(Адрес.Широта) Тогда
		МассивСтрук = Новый Массив;
		
		Струк = Новый Структура;
		
		Струк.Вставить("НомерЗаказа", Число(СокрЛП(БПМестнаяДоставка.Номер)));
		Струк.Вставить("Широта", Адрес.Широта);
		Струк.Вставить("Долгота", Адрес.Долгота);
		МассивСтрук.Добавить(Струк);
		
		//+Широков 24.12.2020 по письму
		//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "Документ.новаОтчетВодителя.ФормаДокументаУпр.СоздатьНовуюТочкуНаСервере(1458, 3) ");	
		//-Широков 24.12.2020 по письму
		
		//Асеев 14.10.2022 (Задача № 4913)>>>
		МассивЗаказовЗон = Новый Массив;
		МассивЗаказовЗон.Добавить(БПМестнаяДоставка.Номер);
		ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
		//Асеев 14.10.2022 (Задача № 4913)<<<
		
	КонецеСли;
	// lem привязка полигонов
	
	Возврат НТочка.Ссылка;	
	
КонецФункции // ()

Процедура ЛогироватьСменуАдреса(Задание, СтараяТочка, НТочка)

	ТекВр = ТекущаяДата();
	Набор = РегистрыСведений.ИсторияСменыАдреса.СоздатьНаборЗаписей();
	Набор.Отбор.Задание.Установить(Задание);
	Набор.Прочитать();
	
	Нзапись = Набор.Добавить();
	Нзапись.Задание = Задание;
	Нзапись.Период = ТекВр;
	Нзапись.ТочкаДо = СтараяТочка;
	Нзапись.ТочкаПосле = НТочка.Ссылка;
	Нзапись.АдресДо = Строка(СтараяТочка.Адрес);
	Нзапись.ИсточникИзменений = Объект.Ссылка;
	Нзапись.АдресПосле = Строка(НТочка.Адрес);
	
	Набор.Записать();
	
	//+++ БАО 14.06.2017 №1068
	рэИнтеграцияРэдЭкспресс.REDОбновитАдресПолучателя__РегистрацияДляОтправки(Объект.Ссылка ,Задание, Нзапись.АдресПосле);
	//--- БАО 14.06.2017 №1068 
	
	//+++ БАО 06.10.2017 №1912 
	
	//+Широков Задача 4369
	//Попытка
	//	ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
	//	
	//	Ткст = "exec [dbo].[ChangeOrderUserAddress]" + Задание.Номер + ",'" + Нзапись.АдресПосле + "','""',' ' ";
	//	bao.ЗапросКИнтернетМагазину(Ткст, ПодключениеКМагазину);
	//	// + Строка(ПараметрыСеанса.ТекущийПользователь) + " новаОтчетВодителя.ФормаДокументаУпр ЛогироватьСменуАдреса " +
	//	
	//Исключение
	//КонецПопытки;
	//-Широков Задача 4369
	
	
	//--- БАО 06.10.2017 №1912 
	
	

КонецПроцедуры


Процедура ЗаполнитьСуммы()

	//Заполнение сумм
	ЗапросСуммы = Новый Запрос("ВЫБРАТЬ
	                           |	новаОтчетВодителяЗадания.Задание,
	                           |	РеализацияТоваровУслуг.СуммаДокумента,
	                           |	РеализацияТоваровУслуг.Ссылка
	                           |ИЗ
	                           |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                           |		ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслуг.Номер
	                           |ГДЕ
	                           |	новаОтчетВодителяЗадания.Ссылка = &Ссылка");
	ЗапросСуммы.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ТЗСуммы = ЗапросСуммы.Выполнить().Выгрузить();	
	
	Для каждого СтрЗад Из Объект.Задания Цикл
		
		НайСуммы = ТЗСуммы.НайтиСтроки(Новый Структура("Задание", СтрЗад.Задание));
		Если НайСуммы.Количество() Тогда	
			СтрЗад.Стоимость = НайСуммы[0].СуммаДокумента;			
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаборыПриАктивизацииСтроки(Элемент)
	ТекСтрк = Элементы.Заборы.ТекущиеДанные;
	Если ТекСтрк <> Неопределено Тогда
		
		МассивЗначенийСпискаВыборка = ПолучитьЗначенияСпискаВыбораЗаборыОбъемныйБрейкПоДаннымЭкипажа(ТекСтрк.Забор);
		
		Элементы.ЗаборыОбъемныйБрейкПоДаннымЭкипажа.СписокВыбора.Очистить();
		Для Каждого ЭлементОтбора Из МассивЗначенийСпискаВыборка Цикл
			Элементы.ЗаборыОбъемныйБрейкПоДаннымЭкипажа.СписокВыбора.Добавить(ЭлементОтбора.Ссылка,ЭлементОтбора.Наименование);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияСпискаВыбораЗаборыОбъемныйБрейкПоДаннымЭкипажа(Забор)
	МассивЗначений = Новый Массив;
	Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбъемныеБрейки.Ссылка,
			|	ОбъемныеБрейки.Наименование
			|ИЗ
			|	Справочник.ОбъемныеБрейки КАК ОбъемныеБрейки
			|ГДЕ
			|	ОбъемныеБрейки.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Забор.ТарифнаяСетка);	
	РезМ = Запрос.Выполнить().Выбрать();
	Пока РезМ.Следующий() Цикл
		СтруктураЭлементаОтбора = Новый Структура("Ссылка, Наименование",РезМ.Ссылка,РезМ.Наименование);
		МассивЗначений.Добавить(СтруктураЭлементаОтбора);
	КонецЦикла;	
	Возврат МассивЗначений
КонецФункции	

&НаСервере
Процедура ОбновитьОбъемыСпискаЗаборов() Экспорт
	Для Каждого Тек Из Объект.Заборы Цикл
		Если Не Тек.ОбъемныйБрейкПоДаннымЭкипажа.Пустая() Тогда
			Тек.ОбъемБрейкаОт = Тек.ОбъемныйБрейкПоДаннымЭкипажа.ОбъемОт;
			Тек.ОбъемБрейкаДо = Тек.ОбъемныйБрейкПоДаннымЭкипажа.ОбъемДо;
		Иначе
			Тек.ОбъемБрейкаОт = 0;
			Тек.ОбъемБрейкаДо = 0;
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ЗаборыОбъемныйБрейкПоДаннымЭкипажаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ОбновитьОбъемыСпискаЗаборов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаборыОбъемныйБрейкПоДаннымЭкипажаПриИзменении(Элемент)
	ЗаборыОбъемныйБрейкПоДаннымЭкипажаПриИзмененииНаСервере();
КонецПроцедуры

Функция ЕстьПроведенноеПредварительноеЗакрытие()

	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПредварительноеЗакрытиеРейса.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	                      |ГДЕ
	                      |	ПредварительноеЗакрытиеРейса.Проведен = ИСТИНА
	                      |	И ПредварительноеЗакрытиеРейса.ОтчетВодителя = &ОтчетВодителя");
	
		Запрос.УстановитьПараметр("ОтчетВодителя", Объект.Ссылка);
		Рез = Запрос.Выполнить();
		
		Если Рез.Пустой() Тогда		
			Возврат Ложь;	
		Иначе		
			Возврат Истина;		
		КонецЕсли;	
		
	Иначе		
		
		Возврат Ложь;
		
	КонецЕсли;	
		

КонецФункции // ()

&НаСервере
Функция ПолучитьЗначениеРеквизитаСсылкиНаСервере(СсылкаОбъекта, ИмяРеквизита)
	
	Возврат  СсылкаОбъекта[ИмяРеквизита];
	
КонецФункции	

&НаКлиенте
Процедура ЗаданияПричинаОтказаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Элементы.Задания.ТекущиеДанные.ПричинаОтказа) Тогда
		Элементы.Задания.ТекущиеДанные.ИнициаторСостояния 	= ПолучитьЗначениеРеквизитаСсылкиНаСервере(Элементы.Задания.ТекущиеДанные.ПричинаОтказа, "ИнициаторСостояния");//Элементы.Задания.ТекущиеДанные.ПричинаОтказа.ИнициаторСостояния;
		Элементы.Задания.ТекущиеДанные.СторонаПретензий 	= ПолучитьЗначениеРеквизитаСсылкиНаСервере(Элементы.Задания.ТекущиеДанные.ПричинаОтказа, "СторонаПретензии");//Элементы.Задания.ТекущиеДанные.ПричинаОтказа.СторонаПретензии; // Задача № 3055
	Иначе
		Элементы.Задания.ТекущиеДанные.ИнициаторСостояния 	= "";
		Элементы.Задания.ТекущиеДанные.СторонаПретензий 	= ""; // Задача № Заборы
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ЗаборыПричинаОтказаПриИзменении(Элемент)	
	Если ЗначениеЗаполнено(Элементы.Заборы.ТекущиеДанные.ПричинаОтказа) Тогда
		Элементы.Заборы.ТекущиеДанные.СторонаПретензий = ПолучитьЗначениеРеквизитаСсылкиНаСервере(Элементы.Заборы.ТекущиеДанные.ПричинаОтказа, "СторонаПретензии");//Элементы.Заборы.ТекущиеДанные.ПричинаОтказа.СторонаПретензии; // Задача № 3055
	Иначе
		Элементы.Заборы.ТекущиеДанные.СторонаПретензий = ""; // Задача № 3055
	КонецЕсли;		
КонецПроцедуры

//+Степанов Задача № 3817
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = Не ЗаполненыПричиныОтказовПереносов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполненыПричиныОтказовПереносов()
	ПричиныЗаполнены = Истина;
	Для Каждого СтрокаТЧ Из Объект.Задания Цикл
		Если СтрокаТЧ.ПричинаНевыполнения.ТребоватьВводПричиныОтказаПереноса И Не ЗначениеЗаполнено(СтрокаТЧ.ПричинаОтказа) Тогда
			Сообщить("У доставки " + СтрокаТЧ.Задание.Номер + " в строке " + Строка(СтрокаТЧ.номерСтроки) + " не заполнена причина переноса(отказа)");
			ПричиныЗаполнены = Ложь;
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаТЧ Из Объект.Заборы Цикл
		Если СтрокаТЧ.ПричинаНевыполнения.ТребоватьВводПричиныОтказаПереноса И Не ЗначениеЗаполнено(СтрокаТЧ.ПричинаОтказа) Тогда
			Сообщить("У забора " + СтрокаТЧ.Забор.Номер + " строке " + Строка(СтрокаТЧ.номерСтроки) + " не заполнена причина переноса(отказа)");
			ПричиныЗаполнены = Ложь;
		КонецЕсли;
	КонецЦикла;	
	Возврат ПричиныЗаполнены
КонецФункции	
//-Степанов Задача № 3817

//Геннадий #4101 10.03.2021 ->
&НаСервере
Функция СоздатьНовуюТочкуНаСервере_Новая(Адрес, Задание, Заказ = Неопределено)
	
	Если ТипЗнч(Задание) = Тип("БизнесПроцессСсылка.новаМестнаяДоставка") Тогда
		СтараяТочка = Задание.ТочкаПрибытия;
	ИначеЕсли ТипЗнч(Задание) = Тип("ДокументСсылка.ЗаборТовара") Тогда
		СтараяТочка = Задание.ТочкаДоставки;
	КонецЕсли;
	
	НТочка = справочники.новаТочкиДоставки.СоздатьЭлемент();
	НТочка.Заполнить(СтараяТочка);
	НТочка.Адрес 		= Адрес;
	НТочка.Наименование = Строка(Адрес);
	НТочка.Записать();
	
	Если ТипЗнч(Задание) = Тип("БизнесПроцессСсылка.новаМестнаяДоставка") Тогда
		БПМестнаяДоставка 				= Задание.ПолучитьОбъект();
		БПМестнаяДоставка.ТочкаПрибытия = НТочка.Ссылка;
		БПМестнаяДоставка.Адрес 		= НТочка.Адрес;
		БПМестнаяДоставка.Записать();
		
		ЛогироватьСменуАдреса(Задание, СтараяТочка, НТочка.Ссылка);//текущее логирование по БизнесПроцессу.новаМестнаяДоставка
		
	ИначеЕсли ТипЗнч(Задание) = Тип("ДокументСсылка.ЗаборТовара") Тогда
		
		докЗабор 				= Задание.ПолучитьОбъект();
		докЗабор.ТочкаДоставки 	= НТочка.Ссылка;
		докЗабор.АдресДоставки	= НТочка.Адрес;
		докЗабор.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес.Долгота) И ЗначениеЗаполнено(Адрес.Широта) Тогда
		
		//Асеев 14.10.2022 (Задача № 4913)>>>
		МассивЗаказовЗон = Новый Массив;
		//Асеев 14.10.2022 (Задача № 4913)<<<
		
		МассивСтрук = Новый Массив;
		Струк = Новый Структура;
		
		Если ТипЗнч(Задание) = Тип("БизнесПроцессСсылка.новаМестнаяДоставка") Тогда
			//Асеев 14.10.2022 (Задача № 4913)>>>
			МассивЗаказовЗон.Добавить(Заказ);
			//Асеев 14.10.2022 (Задача № 4913)<<<
			Струк.Вставить("НомерЗаказа", 	Число(СокрЛП(БПМестнаяДоставка.Номер)));
		ИначеЕсли ТипЗнч(Задание) = Тип("ДокументСсылка.ЗаборТовара") Тогда
			//Асеев 14.10.2022 (Задача № 4913)>>>
			МассивЗаказовЗон.Добавить(Задание);
			//Асеев 14.10.2022 (Задача № 4913)<<<
			Струк.Вставить("НомерЗаказа", 	Число(СокрЛП(Задание.Номер)));
		КонецЕсли;	
		Струк.Вставить("Широта", 	Адрес.Широта);
		Струк.Вставить("Долгота",	Адрес.Долгота);
		МассивСтрук.Добавить(Струк);
		
		//+Широков 24.12.2020 по письму
		//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "Документ.новаОтчетВодителя.ФормаДокументаУпр.СоздатьНовуюТочкуНаСервере(1458, 3) ");	
		//-Широков 24.12.2020 по письму
		
		//Асеев 04.09.2024 (Задача № 5317)>>>
		ТарификацияУслугСервер.ЗагрузкаЗонТарификацииПартнеровЗаказов(МассивЗаказовЗон);
		//Асеев 04.09.2024 (Задача № 5317)<<<
		
		//Асеев 14.10.2022 (Задача № 4913)>>>
		ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
		//Асеев 14.10.2022 (Задача № 4913)<<<
		
	КонецеСли;
	
	Возврат НТочка.Ссылка;	
	
КонецФункции

&НаСервере
Функция ЗаполнитьКоординаты(СтруктураТочки, НоваяТочка)
	
	СтруктураТочки.Вставить("Широта", 	НоваяТочка.Адрес.Широта);
	СтруктураТочки.Вставить("Долгота",	НоваяТочка.Адрес.Долгота);
	
	Возврат СтруктураТочки;
	
КонецФункции
//Геннадий <-

//Асеев 16.03.2021 (по письму Re: Ошибка)>>>
&НаКлиенте
Процедура ОбновитьДанныеЭкипажа(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьДанныеЭкипажаВопрос", ЭтотОбъект), "Обновить данные экипажа?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЭкипажаВопрос(РезультатВопроса, Параметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбновитьДанныеЭкипажаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЭкипажаНаСервере()
	
	Модифицированность = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РейсМестнойДоставки", Объект.Рейс);
	Запрос.УстановитьПараметр("КонецРейса", КонецДня(Объект.Рейс.ДатаНачала));
	//Асеев 19.05.2023 (Задача № 5043)>>>
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	//|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор
	//|ИЗ
	//|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс.РейсМестнойДоставки = &РейсМестнойДоставки) КАК ПривязкаМашинКРейсамСрезПоследних";
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор
	|ПОМЕСТИТЬ ВТ_Экипаж
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс.РейсМестнойДоставки = &РейсМестнойДоставки) КАК ПривязкаМашинКРейсамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Экипаж.Водитель КАК Водитель,
	|	ВТ_Экипаж.Экспедитор КАК Экспедитор,
	|	ВЗ_Водитель.ОсновноеНачисление КАК ОсновноеНачислениеВодитель,
	|	ВЗ_Экспедитор.ОсновноеНачисление КАК ОсновноеНачислениеЭкспедитор
	|ИЗ
	|	ВТ_Экипаж КАК ВТ_Экипаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			РаботникиОрганизации.ОсновноеНачисление КАК ОсновноеНачисление
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Экипаж КАК ВТ_Экипаж
	|				ПО (РаботникиОрганизации.Период <= &КонецРейса)
	|					И РаботникиОрганизации.ФизЛицо = ВТ_Экипаж.Водитель.ФизЛицо
	|					И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			РаботникиОрганизации.Период УБЫВ) КАК ВЗ_Водитель
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			РаботникиОрганизации.ОсновноеНачисление КАК ОсновноеНачисление
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Экипаж КАК ВТ_Экипаж
	|				ПО (РаботникиОрганизации.Период <= &КонецРейса)
	|					И РаботникиОрганизации.ФизЛицо = ВТ_Экипаж.Экспедитор.ФизЛицо
	|					И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			РаботникиОрганизации.Период УБЫВ) КАК ВЗ_Экспедитор
	|		ПО (ИСТИНА)";
	//Асеев 19.05.2023 (Задача № 5043)<<<
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Объект.Водитель = Выборка.Водитель;
	Объект.Экспедитор = Выборка.Экспедитор;
	Объект.ОсновноеНачислениеВодитель = Выборка.ОсновноеНачислениеВодитель;
	Объект.ОсновноеНачислениеЭкспедитор = Выборка.ОсновноеНачислениеЭкспедитор;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ФормаОбновитьДанныеЭкипажа.Доступность = Не ТекущийОбъект.Проведен;
	
	//Асеев 24.06.2022 (Задача № 4825)>>>
	Элементы.ФормаКомандаПриходДС.Видимость = ТекущийОбъект.РежимОбъединенияФункционалаЛогистаИКассира;
	Элементы.ФормаКомандаПриходДС.Доступность = ТекущийОбъект.РежимОбъединенияФункционалаЛогистаИКассира И ТекущийОбъект.Проведен;
	//Асеев 24.06.2022 (Задача № 4825)<<<
	
КонецПроцедуры
//Асеев 16.03.2021 (по письму Re: Ошибка)<<<

//Асеев 20.08.2021 (Задача № 4643)>>>
&НаСервере
Процедура УстановитьОтборЗадания()
	
	Если Элементы.ЗаданияОтборБНал.Пометка Тогда
		Элементы.Задания.ОтборСтрок = Новый ФиксированнаяСтруктура("ТребуетсяПодписаниеИВозвратБНДокументов", Истина);
	ИначеЕсли Элементы.ЗаданияОтборСопр.Пометка Тогда
		Элементы.Задания.ОтборСтрок = Новый ФиксированнаяСтруктура("ТребуетсяПодписаниеИВозвратСопрДокументов", Истина);
	Иначе
		Элементы.Задания.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборБНалНаСервере()
	
	Элементы.ЗаданияОтборБНал.Пометка = Не Элементы.ЗаданияОтборБНал.Пометка;
	Если Элементы.ЗаданияОтборБНал.Пометка И Элементы.ЗаданияОтборСопр.Пометка Тогда
		Элементы.ЗаданияОтборСопр.Пометка = Ложь;
	КонецЕсли;
	УстановитьОтборЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБНал(Команда)
	ОтборБНалНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборСопрНаСервере()
	
	Элементы.ЗаданияОтборСопр.Пометка = Не Элементы.ЗаданияОтборСопр.Пометка;
	Если Элементы.ЗаданияОтборСопр.Пометка И Элементы.ЗаданияОтборБНал.Пометка Тогда
		Элементы.ЗаданияОтборБНал.Пометка = Ложь;
	КонецЕсли;
	УстановитьОтборЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСопр(Команда)
	ОтборСопрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияСопрДокументПоступилПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Задания.ТекущиеДанные;
	Если ТекСтрока.СопрДокументПоступил Тогда
		ТекСтрока.СопрДокументНеПоступил = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияСопрДокументНеПоступилПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Задания.ТекущиеДанные;
	Если ТекСтрока.СопрДокументНеПоступил Тогда
		ТекСтрока.СопрДокументПоступил = Ложь;
	КонецЕсли;
	
КонецПроцедуры
//Асеев 20.08.2021 (Задача № 4643)<<<

//Асеев 24.06.2022 (Задача № 4825)>>>
&НаСервере
Функция ПолучитьПриходДСНаСервере()
	
	Если Модифицированность Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходДСПоОтчетуВодителя.Ссылка КАК ПриходДС
	|ИЗ
	|	Документ.ПриходДСПоОтчетуВодителя КАК ПриходДСПоОтчетуВодителя
	|ГДЕ
	|	ПриходДСПоОтчетуВодителя.ОтчетВодителя = &ОтчетВодителя";
	Запрос.УстановитьПараметр("ОтчетВодителя", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПриходДС;
	КонецЕсли;
	
	ПриходДС = Документы.ПриходДСПоОтчетуВодителя.СоздатьДокумент();
	ПриходДС.Дата = ТекущаяДата();
	ПриходДС.ОтчетВодителя = Объект.Ссылка;
	ПриходДС.РежимОбъединенияФункционалаЛогистаИКассира = Объект.РежимОбъединенияФункционалаЛогистаИКассира;
	ПриходДС.Оператор = ПараметрыСеанса.ТекущийПользователь;
	ПриходДС.ТерминалДоставки = Объект.ТерминалДоставки;
	ПриходДС.ЗаполнитьНаСервере();
	//Асеев 03.10.2022 (Задача № 4905)>>>
	ПриходДС.ПересчитатьИтогиПоДоставкам();
	//Асеев 03.10.2022 (Задача № 4905)<<<		
	
	ПриходДС.Записать();
	
	Возврат ПриходДС.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура КомандаПриходДС(Команда)
	
	ОткрытьФорму("Документ.ПриходДСПоОтчетуВодителя.Форма.ФормаДокумента", Новый Структура("Ключ", ПолучитьПриходДСНаСервере()));
	
КонецПроцедуры
//Асеев 24.06.2022 (Задача № 4825)<<<

&НаКлиенте
Процедура ЗаборыПриИзменении(Элемент)
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

