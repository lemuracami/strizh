//Процедура заполняет документ данными из выборки
Процедура ЗаполнитьНаСервере(Данные,Контрагент) Экспорт
    ЭтотОбъект.Услуги.Очистить();
    ЭтотОбъект.Контрагент = Контрагент;
    ЭтотОбъект.Дата = ТекущаяДата();
    //Серегин М.В. 27.05.2015 18:30:44 
    ////временно!!!!!!!!!!!!!!
    ЭтотОбъект.Получатель ="evgeniy.marochkin@strizh-logistic.ru";
    //Серегин М.В. 27.05.2015 18:30:46 
    Для каждого Стр Из Данные Цикл
        СтрокаУслуги = ЭтотОбъект.Услуги.Добавить();
        ЗаполнитьЗначенияСвойств(СтрокаУслуги,Стр,,"Телефон");
        СтрокаУслуги.ИнтервалДоставки = Строка(Стр.ВремяДоставкиС)+"-"+Строка(Стр.ВремяДоставкиПО);
        СтрокаУслуги.ДатаДоставки = Стр.ДатаДоставки;
        
        //Заполнение номенклатуры
        Для каждого СтрНоменклатура Из Стр.Спецификация Цикл
            Если ЗначениеЗаполнено(СтрокаУслуги.Номенклатура) Тогда
                СтрокаУслуги.Номенклатура =СтрокаУслуги.Номенклатура+Символы.ПС+Строка(СтрНоменклатура.Товар);
            Иначе
                СтрокаУслуги.Номенклатура =Строка(СтрНоменклатура.Товар);
            КонецЕсли;
        КонецЦикла;
        
        //Заполнение телефонов
        МассивТелефонов = smv.ПолучитьМассивНомеровДляУслуг(Стр.Телефон);
        Для каждого Стр Из МассивТелефонов Цикл
            Если ЗначениеЗаполнено(СтрокаУслуги.Телефон) Тогда
                СтрокаУслуги.Телефон =СтрокаУслуги.Телефон+Символы.ПС+Стр;
            Иначе
                СтрокаУслуги.Телефон =Стр;
            КонецЕсли;
            
        КонецЦикла;
    КонецЦикла;
    
    Попытка
        ЭтотОбъект.Записать();
        Для каждого Стр Из ЭтотОбъект.Услуги Цикл
            НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Период.Установить(ЭтотОбъект.Дата); 
            НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(Стр.НомерВнешнегоЗаказа); 
            НаборЗаписей.Отбор.Услуга.Установить(Стр.Услуга);  
            НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);  
            Запись = НаборЗаписей.Добавить();
            Запись.Период = ЭтотОбъект.Дата;
            Запись.НомерВнешнегоЗаказа = Стр.НомерВнешнегоЗаказа;
            Запись.Услуга = Стр.Услуга;
            Запись.Контрагент = Контрагент;
            Запись.Стоимость = Стр.СтоимостьУслуги;
            Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.СформированДокумент;
            Запись.СформированныйДокумент = ЭтотОбъект.Ссылка;
            НаборЗаписей.Записать();
        КонецЦикла;
    Исключение
	#Если Клиент Тогда
	Сообщить(ОписаниеОшибки());
	#КонецЕсли
    КонецПопытки;
КонецПроцедуры // ЗаполнитьНаСервере()

Процедура СформироватьИОтправить() Экспорт 
    Результат  = СформироватьОтчет(ЭтотОбъект.Ссылка);  
    Если Результат = Неопределено Тогда
        Возврат;
    КонецеСли;
	МасП = Новый Массив;
    МасП.Добавить(Получатель);
    МасП.Добавить("syn@strizh-logistic.ru");
	МасП.Добавить("v.yakurnov@strizh-logistic.ru");
    МасП.Добавить("irina.shevchuk@strizh-logistic.ru");
    МасП.Добавить("techustanovka@yandex.ru");
	//МасП.Добавить("dmitry.romanov@strizh-logistic.ru");
    //+++++Серегин М.В. 19.01.2016 12:02:00 
	//МасП.Добавить("yuriy.gnedov@strizh-logistic.ru");
    //-----Серегин М.В. 19.01.2016 12:02:02
    
	ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + "РЕЕСТ_ОБЩИЙ_MEDIAMARKT" + ".xls";
	Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	Отпр = lem.ОтправитьСообщение(МасП, "РЕЕСТ_ОБЩИЙ_"+ВРег(Контрагент), "РЕЕСТ_ОБЩИЙ_"+ВРег(Контрагент), ПутьКФайлу, "Логистическая компания ""Стриж""");
    Если Отпр Тогда
        Попытка
            ЭтотОбъект.Дата = ЭтотОбъект.Дата+1;
            ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);	
            Для каждого Стр Из ЭтотОбъект.Услуги Цикл
                НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
                НаборЗаписей.Отбор.Период.Установить(ЭтотОбъект.Дата); 
                НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(Стр.НомерВнешнегоЗаказа); 
                НаборЗаписей.Отбор.Услуга.Установить(Стр.Услуга);  
                НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);  
                Запись = НаборЗаписей.Добавить();
                Запись.Период = ЭтотОбъект.Дата;
                Запись.НомерВнешнегоЗаказа = Стр.НомерВнешнегоЗаказа;
                Запись.Услуга = Стр.Услуга;
                Запись.Контрагент = Контрагент;
                Запись.Стоимость = Стр.СтоимостьУслуги;
                Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ОтправленаПоПочте;
                Запись.СформированныйДокумент = ЭтотОбъект.Ссылка;
                НаборЗаписей.Записать();
            КонецЦикла;
        Исключение
	#Если Клиент Тогда
	Сообщить(ОписаниеОшибки());
	#КонецЕсли
        КонецПопытки;
    КонецЕсли;
КонецПроцедуры

Функция СформироватьОтчет(Ссылка) Экспорт
    СхемаКомпоновкиДанных = ПолучитьМакет("Макет");
    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек2.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек2.Настройки;
    
     //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка",Ссылка);
    
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    //Проверка на пустоту
    Если (Результат.ВысотаТаблицы-Результат.ФиксацияСверху)>0 Тогда
        Возврат Результат;
    Иначе
        Возврат Неопределено;
    КонецЕсли;
    
КонецФункции	
