#Область КомандыФормы

//////////////////////////////////////-------------Заполнение------------////////////////////////////////
&НаКлиенте
Процедура Заполнить(Команда)
    
    Если Объект.Проведен Тогда
        От = Вопрос("Для заполнения необходимо отменить проведение документа. Отменить проведение?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    ИначеЕсли Модифицированность = Истина Тогда 
        От = Вопрос("Для заполнения необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;
    
    Если Объект.Заказы.Количество() <> 0 Или Объект.ПриходныеДокументы.Количество() <> 0 Или Объект.ДокументыТСД.Количество() <> 0 Тогда
        От = Вопрос("Табличные части не пусты. При заполнении они будет очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Нет Тогда
            Возврат;
        КонецеСли;	
    КонецеСли;
    
    //Получим объект и вызовем его процедуру
    ДокументОбъект = ЗаполнитьНаСервере();
    ЗначениеВДанныеФормы(ДокументОбъект,Объект);
    ЗаполнитьДанныеФото();
    
    УстановитьДоступностьЭлементов();
    Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНаСервере() Экспорт
    ДокументОбъект =Объект.Ссылка.ПолучитьОбъект(); 
    ДокументОбъект.ЗаполнитьНаСервере();
    Возврат ДокументОбъект;
КонецФункции

&НаСервере
Функция ПолучитьДанныеФотоПоЗаказам()
    Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрикрепленныеФайлы.Данные.Ссылка) КАК КоличествоФото,
	            |	ПрикрепленныеФайлы.Заказ
	            |ИЗ
	            |	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	            |ГДЕ
	            |	ПрикрепленныеФайлы.Документ = &Документ
	            |	И ПрикрепленныеФайлы.Данные.ТипДокумента = ЗНАЧЕНИЕ(справочник.ТипыПрикрепленныхДокументов.ФотографияЗаказа)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПрикрепленныеФайлы.Заказ";
	Зап.УстановитьПараметр("Документ", Объект.Ссылка);			
	Рез = Зап.Выполнить().Выгрузить();
	Возврат Рез;
КонецФункции	

Процедура ЗаполнитьДанныеФото()
	Таб = ПолучитьДанныеФотоПоЗаказам();
	
	Для Каждого Тек Из Объект.Заказы Цикл
		Най = Таб.Найти(Тек.Заказ);
		Если Най = Неопределено Тогда
			Тек.Фото = "Фото: 0";
		Иначе
			Тек.Фото = "Фото: " + Строка(Най.КоличествоФото);;
		КонецеСли;	
    КонецЦикла;	
КонецПроцедуры	


&НаСервере
Функция ПодгрузитьСмену2НаСервере()
    ДокументОбъект =Объект.Ссылка.ПолучитьОбъект(); 
    ДокументОбъект.ПодгрузитьДанныеСмена2();
    Возврат ДокументОбъект;
    
КонецФункции

//Подтягиваем данные в документ по второй смене, видимость кнопки только по 003 (ПриСозданииНаСервере)
&НаКлиенте
Процедура ПодгрузитьСмену2(Команда)
    ДокументОбъект = ПодгрузитьСмену2НаСервере();
    ЗначениеВДанныеФормы(ДокументОбъект,Объект);
    Парам = Новый Структура;
    Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
    Записать(Парам);
    //ЭтаФорма.Прочитать();
КонецПроцедуры

&НаСервере
Процедура ПодгрузитьПредыдущиеДанныеНаСервере()
    
    Для каждого Стр Из Объект.ЗаказыВременная Цикл
        МассивСтрок =  Объект.Заказы.НайтиСтроки(Новый Структура("Заказ",Стр.Заказ));    
        
        Для каждого СтрМассивСтрок Из МассивСтрок Цикл
            //Ситуация когда в ТЧ заказы стоят две галки Прихода
            Если СтрМассивСтрок.ЕстьВПриходе И СтрМассивСтрок.ЕстьВПриходеЗаполнено Тогда
                
                //В тч ЗаказыВременная ЕстьВПриходе и не заполнено, меняем предыдущими данными  
                Если Стр.ЕстьВПриходе И НЕ Стр.ЕстьВПриходеЗаполнено Тогда
                    ПерезаполнитьСтрокиТЧПриход(СтрМассивСтрок,Стр);
                    
                    //В тч ЗаказыВременная галок прихода нет и документприхода = документуприхода новому  
                ИначеЕсли НЕ Стр.ЕстьВПриходе И НЕ Стр.ЕстьВПриходеЗаполнено И СтрМассивСтрок.ДокументПрихода = Стр.ДокументПрихода Тогда
                    ПерезаполнитьСтрокиТЧПриход(СтрМассивСтрок,Стр);
                    //Ищем строки в ТЧ Документы ПриходныеДокументы и ставим Учитывать в Ложь
                    МассивСтрокПриходныеДокументы = Объект.ПриходныеДокументы.НайтиСтроки(Новый Структура("ПриходныйДокумент",СтрМассивСтрок.ДокументПрихода));
                    Для каждого СтрПД Из МассивСтрокПриходныеДокументы Цикл
                        СтрПД.Учитывать = Ложь;
                    КонецЦикла;
                    
                КонецЕсли;
            Иначе //галок нет
                Если НЕ Стр.ЕстьВПриходе И Стр.ЕстьВПриходеЗаполнено Тогда
                    ПерезаполнитьСтрокиТЧПриход(СтрМассивСтрок,Стр);
                КонецЕсли;
            КонецЕсли;
            
            //Ситуация когда в ТЧ заказы стоят две галки Сканера
            Если СтрМассивСтрок.ЕстьНаСканере И СтрМассивСтрок.ЕстьНаСканереЗаполнено Тогда
                Если Стр.ЕстьНаСканере И НЕ Стр.ЕстьНаСканереЗаполнено Тогда
                    ПерезаполнитьСтрокиТЧСканер(СтрМассивСтрок,Стр);
                КонецЕсли;
            Иначе //галок нет
                Если НЕ Стр.ЕстьНаСканере И Стр.ЕстьНаСканереЗаполнено Тогда
                    ПерезаполнитьСтрокиТЧСканер(СтрМассивСтрок,Стр);
                КонецЕсли;
            КонецЕсли;
            
            
        КонецЦикла;
        
    КонецЦикла;
КонецПроцедуры

//МассивСтрок - перезаполняемые данные
//Стр - новые данные
&НаСервере
Процедура ПерезаполнитьСтрокиТЧПриход(СтрМассивСтрок,Стр)
    СтрМассивСтрок.ЕстьВПриходе = Стр.ЕстьВПриходе;
    СтрМассивСтрок.ЕстьВПриходеЗаполнено = Стр.ЕстьВПриходеЗаполнено;
    СтрМассивСтрок.СуммаВПриходе = Стр.СуммаВПриходе;
    СтрМассивСтрок.КоличествоВПриходе = Стр.КоличествоВПриходе;
    
КонецПроцедуры // ПерезаполнитьСтрокиТЧ()
            
//МассивСтрок - перезаполняемые данные
//Стр - новые данные
&НаСервере
Процедура ПерезаполнитьСтрокиТЧСканер(СтрМассивСтрок,Стр)
    СтрМассивСтрок.ЕстьНаСканере = Стр.ЕстьНаСканере;
    СтрМассивСтрок.ЕстьНаСканереЗаполнено = Стр.ЕстьНаСканереЗаполнено;
    СтрМассивСтрок.СуммаНаСканере = Стр.СуммаНаСканере;
    СтрМассивСтрок.КоличествоНаСканере = Стр.КоличествоНаСканере;
    
КонецПроцедуры // ПерезаполнитьСтрокиТЧ()


&НаКлиенте
Процедура ПодгрузитьПредыдущиеДанные(Команда)
    Если Модифицированность = Истина Тогда 
        От = Вопрос("Необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;
    ПодгрузитьПредыдущиеДанныеНаСервере();
    ПересчитатьИтоги();
    Модифицированность = Истина;
КонецПроцедуры



///////////////////////////////////////-----------Очистка------------////////////////////////////////

&НаКлиенте
Процедура Очистить(Команда)
    Если Модифицированность = Истина Тогда 
        От = Вопрос("Необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
            Записать(Парам);
            От = Вопрос("ВАЖНО БУДЕТ ОЧИЩЕН ""АКТ РАСХОЖДЕНИЙ"", ОТМЕНЕНЫ ПОДТВЕРЖДЕНИЯ ПОСТУПЛЕНИЙ И ОЧИЩЕНЫ ТАБЛИЧНЫЕ ЧАСТИ!!! Продолжить? ", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
            Если От = КодВозвратаДиалога.Да Тогда
                Если Объект.Проведен Тогда
                    От = Вопрос("Для очистки необходимо отменить проведение документа. Отменить проведение? ", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
                    Если От = КодВозвратаДиалога.Да Тогда
                        Парам = Новый Структура;
                        Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
                        Записать(Парам);
                    Иначе
                        Возврат;
                    КонецеСли;
                КонецЕсли;
            Иначе
                Возврат;
            КонецЕсли;
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;

    
    //начало транзакции
    НачатьТранзакцию();
    
    ИнициализироватьВременныйТаблицы();
    //Очищаем данные
    Объект.Заказы.Очистить(); 
    Объект.ДокументыТСД.Очистить(); 
    Объект.ПриходныеДокументы.Очистить();
    
    //очистка поступлений
    ЕстьОшибки  = ОтмененаПодтвержденныхПоступлений();
    //Если были ошибки отменяем транзакцию
    Если ЕстьОшибки Тогда 
        ОтменитьТранзакцию();
        ЭтаФорма.Прочитать();
        Возврат;
    КонецЕсли;
    Объект.ПодтвержденныеПоступления.Очистить();
    
    //очистка акта расхождения
    ЕстьОшибки = ОчиститьАктРасхождения();
    Если ЕстьОшибки Тогда 
        ОтменитьТранзакцию();
        ЭтаФорма.Прочитать();
        Возврат;
    КонецЕсли;
    
    ПересчитатьИтоги();
    
    //Конец транзакции
    ЗафиксироватьТранзакцию();
    ТолькоПросмотр = Ложь;
    УстановитьДоступностьЭлементов();
    Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВременныйТаблицы()
    Объект.ЗаказыВременная.Загрузить(Объект.Заказы.Выгрузить());
КонецПроцедуры // ИнициализироватьВременныйТаблицы()

&НаСервере
Функция ОтмененаПодтвержденныхПоступлений()
    
    Для каждого Стр Из Объект.ПодтвержденныеПоступления Цикл
        ПоступлениеОбъект = Стр.ПоступлениеТоваровУслуг.ПолучитьОбъект();
        ПоступлениеОбъект.ПоступлениеПодтверждено = Ложь;
        ПоступлениеОбъект.ДатаВходящегоДокумента = Дата("00010101");;
        ПоступлениеОбъект.НомерВходящегоДокумента = "";
        Попытка
            ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Запись);
        Исключение
            Сообщить(ОписаниеОшибки());
            Возврат Истина;
        КонецПопытки;
    КонецЦикла;
    
    //Цикл завершился успешно значить ошибок нет возвращаем ложь
    Возврат Ложь;
КонецФункции //     

&НаСервере
Функция ОчиститьАктРасхождения()
    Если ЗначениеЗаполнено(Объект.АктРасхожденияПоПриходу) Тогда
        АктОбъект = Объект.АктРасхожденияПоПриходу.ПолучитьОбъект();
        АктОбъект.Заказы.Очистить();
        АктОбъект.Товары.Очистить();
        АктОбъект.ТоварыРасхождения.Очистить();
        Попытка
            Если АктОбъект.Проведен Тогда
                АктОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
            Иначе
                АктОбъект.Записать(РежимЗаписиДокумента.Запись);
            КонецЕсли;
            Возврат Ложь;
        Исключение
            Сообщить(ОписаниеОшибки());
            Возврат Истина;
        КонецПопытки;
    Иначе
        Возврат Ложь;
    КонецЕсли;
КонецФункции // ОчиститьАктРасхождения()



//////////////////////////////////////-------------Печать------------////////////////////////////////
&НаКлиенте
Процедура ПечатьПриходнойНакладной() Экспорт
	Таб = Новый ТабличныйДокумент;
	Мак = ПолучитьМакетНаСервере();
	
	ОблШ = Мак.ПолучитьОбласть("Шапка");
	ОблС = Мак.ПолучитьОбласть("Строка");
	ОблП = Мак.ПолучитьОбласть("Подвал");
	
	
	ОблШ.Параметры.СтрПоставщик = СокрЛП(Объект.Контрагент.НаименованиеПолное);
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		ОблШ.Параметры.НомерДатаПоставщика = СокрЛП(Объект.ПриходныеДокументы[0].ПриходныйДокумент.НомерВходящегоДокумента) + " от " + Формат(Объект.ПриходныеДокументы[0].ПриходныйДокумент.ДатаВходящегоДокумента, "ДЛФ=DD");
	Иначе
		ОблШ.Параметры.НомерДатаПоставщика = СокрЛП(Объект.ПриходныеДокументы[0].ПриходныйДокумент.НомерВходящегоДокумента);
	КонецеСли;	
	
	ОблШ.Параметры.СтрЗаголовокНакладной = "Приходная накладная № " + СокрЛП(Объект.Номер) + Формат(Объект.Дата, "ДЛФ=DD");
	
	Таб.Вывести(ОблШ);
	
	НПП = 1;
	Для Каждого Тек Из Объект.Заказы Цикл
		ОблС.Параметры.НПП = НПП;
		НПП = НПП + 1;
		
		ОблС.Параметры.НомерЗаказа = Тек.НомерЗаказа;
		
		Если НЕ Тек.Заказ.Пустая() Тогда
			ОблС.Параметры.ДатаДоставки = Тек.Заказ.Дата;
		Иначе
			ОблС.Параметры.ДатаДоставки = "--------";
		КонецеСли;	
		
		Если Тек.ЕстьНаСканере Тогда
			ОблС.Параметры.ЕстьНаСкладе = "V";
		Иначе
			ОблС.Параметры.ЕстьНаСкладе = "";
		КонецЕсли;	
		
		Если Тек.ЕстьВПриходе Тогда
			ОблС.Параметры.ЕстьВАктеПП = "V";
		Иначе
			ОблС.Параметры.ЕстьВАктеПП = "";
		КонецеСли;
		
		Если Тек.СостояниеЗаказа = Справочники.СостоянияЗаказа.Брак Тогда
			ОблС.Параметры.Брак = "V";
		Иначе
			ОблС.Параметры.Брак = "";
		КонецеСли;
		
		
		ОблС.Параметры.Комментарий = Тек.Комментарий;
		Таб.Вывести(ОблС);
		ЕстьДанные = Истина;
	КонецЦикла;	
	
	Таб.Вывести(ОблП);
	
	Если ЕстьДанные Тогда
		Таб.показать("Приходная накладная");
	Иначе
		Сообщить("Данные отсутствуют!", СтатусСообщения.Информация);
	КонецеСли;	
КонецПроцедуры	


&НаСервере
Функция ПолучитьМакетНаСервере()
	ДОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДОбъект.ПолучитьМакет("ОтчетПоПриходу");
	Возврат Макет;
КонецФункции	

&НаКлиенте
Процедура ПечатьНакладной(Команда)
	// Вставить содержимое обработчика.
	ПечатьПриходнойНакладной();
КонецПроцедуры



////////////////////////////////////-----------Прочие-------------/////////////////////////////////
&НаСервере
Функция  ЗакрытНаСервере()
    ДокументОбъект =Объект.Ссылка.ПолучитьОбъект(); 
    Закрыт = ДокументОбъект.ЗакрытьДокумент();
    СтуктураПараметров = Новый Структура;
    СтуктураПараметров.Вставить("ДокументОбъект",ДокументОбъект);
    СтуктураПараметров.Вставить("Закрыт",Закрыт);
    Возврат СтуктураПараметров;
КонецФункции

//Закрываем документ
&НаКлиенте
Процедура Закрыт(Команда)
    
    Если НЕ Объект.Закрыт Тогда
        Если НЕ Объект.Проведен Тогда
            От = Вопрос("Для закрытия необходимо проведение документа. Провести?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
            Если От = КодВозвратаДиалога.Да Тогда
                Парам = Новый Структура;
                Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
                Записать(Парам);
            Иначе
                Возврат;
            КонецеСли;
        КонецЕсли;
        
        СтуктураПараметров = ЗакрытНаСервере();
        Если НЕ СтуктураПараметров.Закрыт Тогда
            Предупреждение("Есть расхождения, нельзя закрыть докумет!");
            Возврат;
        КонецЕсли;
        
    Иначе
        СтуктураПараметров = ЗакрытНаСервере();
    КонецЕсли;
    //СтуктураПараметров = ЗакрытНаСервере();
    //Если НЕ СтуктураПараметров.Закрыт Тогда
    //    Предупреждение("Есть расхождения, нельзя закрыть докумет!");
    //    Возврат;
    //КонецЕсли;
    
    ДокументОбъект = СтуктураПараметров.ДокументОбъект;
    ЗначениеВДанныеФормы(ДокументОбъект,Объект);
    //ЭтаФорма.Прочитать();
    ТолькоПросмотр = Объект.Закрыт;
    //Элементы.ФормаСоздатьАктРасхождения.Доступность = НЕ Объект.Закрыт;
    //Элементы.ФормаПодтвердитьПоступления.Доступность = НЕ Объект.Закрыт;
    //Элементы.ФормаОчистить.Доступность = НЕ Объект.Закрыт;
    //Элементы.ФормаЗаполнить.Доступность = НЕ Объект.Закрыт;
    УстановитьДоступностьЭлементов();
    
    Парам = Новый Структура;
    Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
    Записать(Парам);
КонецПроцедуры


&НаСервере
Функция СоздатьАктРасхожденияНаСервере()
    ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
    Акт = ДокументОбъект.Создать_ОткрытьАктРасхожденияПоПриходу();
    //СтуктураПараметров = Новый Структура;
    //СтуктураПараметров.Вставить("ДокументОбъект",ДокументОбъект);
    //СтуктураПараметров.Вставить("Акт",Акт);
    Возврат Акт;
КонецФункции

//Создание/Открытие акта
&НаКлиенте
Процедура СоздатьАктРасхождения(Команда)
    
    Если Модифицированность = Истина Тогда 
        От = Вопрос("Необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;
    
    Акт = СоздатьАктРасхожденияНаСервере();
    Если Акт <> Неопределено Тогда
        ОткрытьЗначение(Акт.Ссылка);
        Объект.АктРасхожденияПоПриходу = Акт.Ссылка;
        Парам = Новый Структура;
        Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
        Записать(Парам);
    Иначе
        Сообщить("Расходжений нет.", СтатусСообщения.Важное);
        //Модифицированность = Ложь;
    КонецЕсли;
    УстановитьДоступностьЭлементов();
    
КонецПроцедуры


&НаСервере
Процедура ПодтвердитьПоступленияНаСервере()
    //Получим выборку по поступлениям (только когда все три галочки стоят)
    ДанныеВыборки = ПолучитьПоступленияДляПодтверждения();
    Объект.ПодтвержденныеПоступления.Очистить();
    Пока ДанныеВыборки.Следующий() Цикл
        ПоступлениеОбъект = ДанныеВыборки.ПоступлениеТоваровУслуг.ПолучитьОбъект();
        //Если заполнен документ прихода значит галочки по приходу проставлены автоматически
        //иначе вручную, тогда берем дату и номер из реквизитов объекта
        Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда 
            ПоступлениеОбъект.ДатаВходящегоДокумента = Объект.ДатаВходящегоДокумента;
            ПоступлениеОбъект.НомерВходящегоДокумента = Объект.НомерВходящегоДокумента;
        ИначеЕсли  ЗначениеЗаполнено(ДанныеВыборки.ДокументПрихода) Тогда
            ПоступлениеОбъект.ДатаВходящегоДокумента = ДанныеВыборки.ДокументПрихода.ДатаВходящегоДокумента;
            ПоступлениеОбъект.НомерВходящегоДокумента = ДанныеВыборки.ДокументПрихода.НомерВходящегоДокумента;
        КонецЕсли;
        ПоступлениеОбъект.ПоступлениеПодтверждено = Истина;
        Попытка
            Если ПоступлениеОбъект.Проведен Тогда
                ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
            Иначе
                ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Запись);
            КонецЕсли;
            //Заполняем ТЧПодтвержденныеПоступления нашего объекта 
            СтрокаТЧПП = Объект.ПодтвержденныеПоступления.Добавить();
            ЗаполнитьЗначенияСвойств(СтрокаТЧПП,ДанныеВыборки);
        Исключение
            Сообщить(ОписаниеОшибки());
        КонецПопытки;
    КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПодтвердитьПоступления(Команда)
    
    Если Модифицированность = Истина Тогда 
        От = Вопрос("Необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) ИЛИ НЕ ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
        Если Не ПроверитьЗаполнениеПриходныхДокументов() Тогда
            От = Вопрос("Не заполнены ""Номер/Дата входящего документа"", но есть приходные документы.Хотите продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
            Если От = КодВозвратаДиалога.Нет Тогда
                Возврат;
            КонецеСли;
        Иначе
            Предупреждение("Не заполнены ""Номер/Дата входящего документа"".");
            Возврат;
        КонецЕсли;
    КонецЕсли;
    
    ПодтвердитьПоступленияНаСервере();
    Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПодтвежденныеПоступления;
    //Пробуем записать наш объект
    Попытка
        Парам = Новый Структура;
        Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
        Записать(Парам);
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
    УстановитьДоступностьЭлементов();
КонецПроцедуры

//Проверяем на заполненость даты и номера входящего документа
//Возвращает Истину - значит есть ошибки, Ложь - все гуд
&НаСервере
Функция ПроверитьЗаполнениеПриходныхДокументов()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   МАКСИМУМ(ВЫБОР
        |           КОГДА ПриходЗаказовНаСклад.НомерВходящегоДокумента = &НомерВходящегоДокумента
        |                   ИЛИ ПриходЗаказовНаСклад.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
        |               ТОГДА ИСТИНА
        |           ИНАЧЕ ЛОЖЬ
        |       КОНЕЦ) КАК ЕстьОшибки
        |ПОМЕСТИТЬ ВТ
        |ИЗ
        |   Документ.ПриходЗаказовНаСклад КАК ПриходЗаказовНаСклад
        |ГДЕ
        |   ПриходЗаказовНаСклад.Ссылка В(&МассивСсылок)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТ.ЕстьОшибки
        |ИЗ
        |   ВТ КАК ВТ
        |ГДЕ
        |   ВТ.ЕстьОшибки <> NULL";
    
    Запрос.УстановитьПараметр("ДатаВходящегоДокумента", Дата("00010101"));
    Запрос.УстановитьПараметр("МассивСсылок", Объект.ПриходныеДокументы.Выгрузить().ВыгрузитьКолонку("ПриходныйДокумент"));
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", "");
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.ЕстьОшибки;
    Иначе
        Возврат Истина;
    КонецЕсли;;
    

КонецФункции // ()

//
&НаСервере
Функция ПолучитьПоступленияДляПодтверждения()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваровУслуг,
        |   ФактическийПриходЗаказовНаСкладЗаказы.ДокументПрихода
        |ИЗ
        |   Документ.ФактическийПриходЗаказовНаСклад.Заказы КАК ФактическийПриходЗаказовНаСкладЗаказы
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
        |       ПО ФактическийПриходЗаказовНаСкладЗаказы.Заказ.Номер = ПоступлениеТоваровУслуг.Номер
        |ГДЕ
        |   ФактическийПриходЗаказовНаСкладЗаказы.Ссылка = &Ссылка
        |   И ФактическийПриходЗаказовНаСкладЗаказы.ЕстьВПриходеЗаполнено
        |   И ФактическийПриходЗаказовНаСкладЗаказы.ЕстьНаСканереЗаполнено";
    
    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    
    Возврат Запрос.Выполнить().Выбрать();

КонецФункции // ПолучитьПоступленияДляПодтверждения()



#КонецОбласти 

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьПериодВыборки();
	КонецеСли;	
    ЗагруженныйДокумент = "Документ";
    //СписокДокументов.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
    
	ТолькоПросмотр = Объект.Закрыт;
    
    УстановитьУсловноеОформление();
	УстановитьДоступностьЭлементов();
	
	
	
	//Если Объект.ОперативнаяПриемкаЗаказов Тогда	
	//	//ПолучитьФорму("Документ.ФактическийПриходЗаказовНаСклад.Форма.ФормаДокументаОперативнаяПриемка").Открыть();	
	//	ОткрытьФорму("Документ.ФактическийПриходЗаказовНаСклад.Форма.ФормаДокументаОперативнаяПриемка");
	//КонецЕсли;
	
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	lem.ОбновлениеДанныхПриложенныхДокументов(Объект, МассивЗаписанныхДокументов, ЭтаФорма);
	
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
	
	Если Объект.Ссылка.Пустая() Тогда
		объект.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	КонецеСли;	
    Если Параметры.Ключ.Пустая() Тогда
        Объект.Дата = ТекущаяДата();   
    КонецЕсли;
    
	ЗаполнитьДанныеФото();
    
    //Серегин М.В. 31.07.2015 11:57:12 
    Если Объект.Контрагент.Код = "Shop_181 " Тогда
        Элементы.ЗаказыПодгрузитьСмену2.Видимость = Истина;
    Иначе
        Элементы.ЗаказыПодгрузитьСмену2.Видимость = Ложь;
	КонецЕсли;
	
	//Асеев 01.12.2020 (по письму Re: Заказ ЭККО.)>>>
	ИмяОтбора = "СканированиеВДокументе";
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер83.СоздатьГруппуЭлементовОтбора(ЛогСканирования.Отбор.Элементы, ИмяОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "baseId", 3, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "objectId", Объект.Номер, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "operationId", 5, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	//Асеев 01.12.2020 (по письму Re: Заказ ЭККО.)<<<

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    Если Модифицированность = Истина Тогда 
        Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;    
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьПриложенныеДокументыВБД();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьДанныеФото();
КонецПроцедуры



//&НаСервере
Процедура УстановитьПериодВыборки()
    
    //Если Объект.Заказы.Количество() = 0 
    //    И Объект.ДокументыТСД.Количество() = 0 
    //    И Объект.ПриходныеДокументы.Количество() = 0 
    //    И Объект.ПодтвержденныеПоступления.Количество() = 0 Тогда
        
        Если Час(ТекущаяДата()) < 15 Тогда
            ////Серегин М.В. 01.07.2015 14:33:24 старый код 
            //Объект.ДатаНачалаВыборки = Дата(Год(Объект.Дата), Месяц(Объект.Дата), День(Объект.Дата - 86400), 16, 0, 0);
            //Серегин М.В. 01.07.2015 14:33:27 новый код
            Объект.ДатаНачалаВыборки = Дата(Год(Объект.Дата - 86400), Месяц(Объект.Дата - 86400), День(Объект.Дата - 86400), 11, 0, 0);
            //Серегин М.В. 01.07.2015 14:33:45 
            Объект.ДатаОкончанияВыборки = Дата(Год(Объект.Дата), Месяц(Объект.Дата), День(Объект.Дата), 11, 0, 0);		
        Иначе	
            Объект.ДатаНачалаВыборки = Дата(Год(Объект.Дата), Месяц(Объект.Дата), День(Объект.Дата), 11, 0, 0);
            ////Серегин М.В. 01.07.2015 14:34:52 старый код 
            //Объект.ДатаОкончанияВыборки = Дата(Год(Объект.Дата), Месяц(Объект.Дата), День(Объект.Дата + 86400), 04, 0, 0);
            //Серегин М.В. 01.07.2015 14:34:56 новый код
            Объект.ДатаОкончанияВыборки = Дата(Год(Объект.Дата + 86400), Месяц(Объект.Дата + 86400), День(Объект.Дата + 86400), 11, 0, 0);
            //Серегин М.В. 01.07.2015 14:35:10 
            
        КонецеСли;	
    //КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьПериодВыборки();
    //ЭтаФорма.Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ПосмотретьДокумент(Неопределено);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Предупреждение("Запишите документ!");
		Возврат;
	КонецеСли;	
	
	//ОТКЛЮЧЕНО в рамках задачи #3931 27.04.2020
	//Если Поле.Имя = "ЗаказыФото" Тогда
	//	Ф = ПолучитьФорму("ОбщаяФорма.РаботаСФотографиями");
	//	Ф.Заказ = Элементы.Заказы.ТекущиеДанные.Заказ;
	//	Ф.Документ = Объект.Ссылка;
	//	Ф.ТипПрикрепляемыхДокументов = Справочники.ТипыПрикрепленныхДокументов.ФотографияЗаказа;
	//	Ф.Открыть();
	//КонецеСли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьДанныеФото();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьНадписьФото" Тогда
		ЗаполнитьДанныеФото();
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЕстьВСистемеПриИзменении(Элемент)
    ТекущиеДанные =  Элементы.Заказы.ТекущиеДанные;
    Если ТекущиеДанные.ЕстьВСистеме Тогда
        ТекущиеДанные.СуммаВСистеме = ПолучитьСуммуЗаказа(ТекущиеДанные.Заказ.Номер);
        ТекущиеДанные.КоличествоВСистеме = ПолучитьКоличествоЗаказа(ТекущиеДанные.Заказ.Номер);
        ТекущиеДанные.ЕстьВСистемеЗаполнено = ТекущиеДанные.ЕстьВСистеме;
    Иначе
        ТекущиеДанные.СуммаВСистеме = 0;
        ТекущиеДанные.КоличествоВСистеме = 0;
        ТекущиеДанные.ЕстьВСистемеЗаполнено = ТекущиеДанные.ЕстьВСистеме;
    КонецЕсли; 
    ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЕстьВПриходеПриИзменении(Элемент)
    ТекущиеДанные =  Элементы.Заказы.ТекущиеДанные;
    Если ТекущиеДанные.ЕстьВПриходе Тогда
        ТекущиеДанные.СуммаВприходе = ПолучитьСуммуЗаказа(ТекущиеДанные.Заказ.Номер);
        ТекущиеДанные.КоличествоВПриходе = ПолучитьКоличествоЗаказа(ТекущиеДанные.Заказ.Номер);
        ТекущиеДанные.ЕстьВПриходеЗаполнено = ТекущиеДанные.ЕстьВПриходе;
    Иначе
        ТекущиеДанные.СуммаВПриходе = 0;
        ТекущиеДанные.КоличествоВПриходе = 0;
        ТекущиеДанные.ЕстьВПриходеЗаполнено = ТекущиеДанные.ЕстьВПриходе;   
    КонецЕсли;
    ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЕстьНаСканереПриИзменении(Элемент)
    ТекущиеДанные =  Элементы.Заказы.ТекущиеДанные;
    Если ТекущиеДанные.ЕстьНаСканере Тогда
        ТекущиеДанные.СуммаНаСканере = ПолучитьСуммуЗаказа(ТекущиеДанные.Заказ.Номер);
        ТекущиеДанные.КоличествоНаСканере = ПолучитьКоличествоЗаказа(ТекущиеДанные.Заказ.Номер);
        ТекущиеДанные.ЕстьНаСканереЗаполнено = ТекущиеДанные.ЕстьНаСканере;   
    Иначе
        ТекущиеДанные.СуммаНаСканере = 0;
        ТекущиеДанные.КоличествоНаСканере = 0;
        ТекущиеДанные.ЕстьНаСканереЗаполнено = ТекущиеДанные.ЕстьНаСканере;   
    КонецЕсли; 
    ПересчитатьИтоги();
КонецПроцедуры

&НаСервере
Функция ПолучитьСуммуЗаказа(Номер)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
        |ИЗ
        |   (ВЫБРАТЬ
        |       ПоступлениеТоваровУслугТовары.Ссылка.Номер КАК Номер,
        |       ПоступлениеТоваровУслугТовары.Сумма КАК Сумма
        |   ИЗ
        |       Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
        |   ГДЕ
        |       ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
        |   
        |   ОБЪЕДИНИТЬ ВСЕ
        |   
        |   ВЫБРАТЬ
        |       ПоступлениеТоваровУслугУслуги.Ссылка.Номер,
        |       ПоступлениеТоваровУслугУслуги.Сумма
        |   ИЗ
        |       Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
        |   ГДЕ
        |       ПоступлениеТоваровУслугУслуги.Ссылка.Номер = &Номер) КАК ВложенныйЗапрос";
    
    Запрос.УстановитьПараметр("Номер", Номер);
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.Сумма;
    Иначе
        Возврат 0;
    КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьКоличествоЗаказа(Номер)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СУММА(ВложенныйЗапрос.Количество) КАК Количество
        |ИЗ
        |   (ВЫБРАТЬ
        |       ПоступлениеТоваровУслугТовары.Ссылка.Номер КАК Номер,
        |       ПоступлениеТоваровУслугТовары.Количество КАК Количество
        |   ИЗ
        |       Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
        |   ГДЕ
        |       ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
        |   
        |   ОБЪЕДИНИТЬ ВСЕ
        |   
        |   ВЫБРАТЬ
        |       ПоступлениеТоваровУслугУслуги.Ссылка.Номер,
        |       ПоступлениеТоваровУслугУслуги.Количество
        |   ИЗ
        |       Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
        |   ГДЕ
        |       ПоступлениеТоваровУслугУслуги.Ссылка.Номер = &Номер) КАК ВложенныйЗапрос";
    
    Запрос.УстановитьПараметр("Номер", Номер);
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.Количество;
    Иначе
        Возврат 0;
    КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаказыЕстьНаСканереЗаполненоПриИзменении(Элемент)
    Если Объект.Проведен Тогда
        От = Вопрос("Для изменения данных необходимо отменить проведение документа. Отменить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
            Записать(Парам);
        Иначе
            Элементы.Заказы.ТекущиеДанные.ЕстьНаСканереЗаполнено = НЕ Элементы.Заказы.ТекущиеДанные.ЕстьНаСканереЗаполнено;
            Возврат;
        КонецеСли;
    КонецЕсли;
        
    ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
    Если ТекущиеДанные.ЗаказНаУстановку Тогда
        ТекущиеДанные.ЕстьНаСканереЗаполнено = ТекущиеДанные.ЗаказНаУстановку; 
    Иначе
        Если ТекущиеДанные.ЕстьНаСканереЗаполнено Тогда
            ТекущиеДанные.СуммаНаСканере = ПолучитьСуммуЗаказа(ТекущиеДанные.Заказ.Номер);
            ТекущиеДанные.КоличествоНаСканере = ПолучитьКоличествоЗаказа(ТекущиеДанные.Заказ.Номер);
            //ТекущиеДанные.ЕстьВПриходе = ТекущиеДанные.ЕстьВПриходеЗаполнено;
        Иначе
            ТекущиеДанные.СуммаНаСканере = 0;
            ТекущиеДанные.КоличествоНаСканере = 0;
            //ТекущиеДанные.ЕстьВПриходе = ТекущиеДанные.ЕстьВПриходеЗаполнено;   
        КонецЕсли;
        ПересчитатьИтоги();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрупповаяПометкаИстина(Команда)
    Если Объект.Проведен Тогда
        От = Вопрос("Для изменения данных необходимо отменить проведение документа. Отменить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;
    // Вставить содержимое обработчика.
    для Каждого Тек Из Объект.Заказы Цикл
    	Тек.ЕстьВПриходеЗаполнено = Истина;
        ПриИзмененииГалкиЕстьВПриходеЗаполнено(Тек);
    КонецЦикла;
    ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ГрупповаяПометкаЛожь(Команда)
    Если Объект.Проведен Тогда
        От = Вопрос("Для изменения данных необходимо отменить проведение документа. Отменить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;
    // Вставить содержимое обработчика.
    для Каждого Тек Из Объект.Заказы Цикл
    	Тек.ЕстьВПриходеЗаполнено = Ложь;
        ПриИзмененииГалкиЕстьВПриходеЗаполнено(Тек);
    КонецЦикла;
    ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ГрупповаяПометкаИнверсия(Команда)
    Если Объект.Проведен Тогда
        От = Вопрос("Для изменения данных необходимо отменить проведение документа. Отменить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;
    для Каждого Тек Из Объект.Заказы Цикл
    	Тек.ЕстьВПриходеЗаполнено = Не Тек.ЕстьВПриходеЗаполнено;
        ПриИзмененииГалкиЕстьВПриходеЗаполнено(Тек);
    КонецЦикла;	
    ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГалкиЕстьВПриходеЗаполнено(ТекущиеДанные)

    Если ТекущиеДанные.ЕстьВПриходеЗаполнено Тогда
        ТекущиеДанные.СуммаВприходе = ПолучитьСуммуЗаказа(ТекущиеДанные.Заказ.Номер);
        ТекущиеДанные.КоличествоВПриходе = ПолучитьКоличествоЗаказа(ТекущиеДанные.Заказ.Номер);
        //ТекущиеДанные.ЕстьВПриходе = ТекущиеДанные.ЕстьВПриходеЗаполнено;
    Иначе
        ТекущиеДанные.СуммаВПриходе = 0;
        ТекущиеДанные.КоличествоВПриходе = 0;
        //ТекущиеДанные.ЕстьВПриходе = ТекущиеДанные.ЕстьВПриходеЗаполнено;   
    КонецЕсли;
    //ПересчитатьИтоги();

КонецПроцедуры // ПриИзмененииГалкиЕстьВПриходеЗаполнено()

//Изменение галки
&НаКлиенте
Процедура ЗаказыЕстьВПриходеЗаполненоПриИзменении(Элемент)
    Если Объект.Проведен Тогда
        От = Вопрос("Для изменения данных необходимо отменить проведение документа. Отменить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
            Записать(Парам);
        Иначе
            Элементы.Заказы.ТекущиеДанные.ЕстьВПриходеЗаполнено = НЕ Элементы.Заказы.ТекущиеДанные.ЕстьВПриходеЗаполнено;
            Возврат;
        КонецеСли;
    КонецЕсли;
    ТекущиеДанные =  Элементы.Заказы.ТекущиеДанные;
    Если ТекущиеДанные.ЕстьВПриходеЗаполнено Тогда
        ТекущиеДанные.СуммаВприходе = ПолучитьСуммуЗаказа(ТекущиеДанные.Заказ.Номер);
        ТекущиеДанные.КоличествоВПриходе = ПолучитьКоличествоЗаказа(ТекущиеДанные.Заказ.Номер);
        //ТекущиеДанные.ЕстьВПриходе = ТекущиеДанные.ЕстьВПриходеЗаполнено;
    Иначе
        ТекущиеДанные.СуммаВПриходе = 0;
        ТекущиеДанные.КоличествоВПриходе = 0;
        //ТекущиеДанные.ЕстьВПриходе = ТекущиеДанные.ЕстьВПриходеЗаполнено;   
    КонецЕсли;
    ПересчитатьИтоги();
КонецПроцедуры


&НаКлиенте
Процедура ПриходныеДокументыПередНачаломИзменения(Элемент, Отказ)
    Если Объект.Проведен Тогда
        От = Вопрос("Для очистки необходимо отменить проведение документа. Отменить проведение?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
            Записать(Парам);
        Иначе
            Отказ=Истина;
        КонецеСли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриходныеДокументыУчитыватьПриИзменении(Элемент)
    ТекущиеДанные = Элементы.ПриходныеДокументы.ТекущиеДанные;
    МассивСтрок = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументПрихода",ТекущиеДанные.ПриходныйДокумент));
    Для каждого Стр Из МассивСтрок Цикл
        Если Стр.ЕстьВПриходеЗаполнено = Стр.ЕстьВПриходе Тогда
            Стр.ЕстьВПриходе = ТекущиеДанные.Учитывать;
            Стр.ЕстьВПриходеЗаполнено =  ТекущиеДанные.Учитывать;
            ПриИзмененииГалкиЕстьВПриходеЗаполнено(Стр);
        КонецЕсли;
    КонецЦикла;
    ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ПриходныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриходныеДокументыПередУдалением(Элемент, Отказ)
    Отказ=Истина;
КонецПроцедуры

#КонецОбласти

#Область Оформление

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
    
    Если Объект.Заказы.Количество() = 0 
        И Объект.ДокументыТСД.Количество() = 0 
        И Объект.ПриходныеДокументы.Количество() = 0 
        И Объект.ПодтвержденныеПоступления.Количество() = 0 Тогда
        Элементы.Дата.ТолькоПросмотр = Ложь;
    Иначе
        Элементы.Дата.ТолькоПросмотр = Истина;
    КонецЕсли;
    Элементы.ФормаСоздатьАктРасхождения.Доступность = НЕ Объект.Закрыт;
    Элементы.ФормаПодтвердитьПоступления.Доступность = НЕ Объект.Закрыт;
    Элементы.ФормаОчистить.Доступность = НЕ Объект.Закрыт;
	//Если Объект.АктРасхожденияПоПриходу.Заказы.Количество()>0 ИЛИ Объект.ПодтвержденныеПоступления.Количество()>0 ИЛИ Объект.Закрыт Тогда
	//    Элементы.ФормаЗаполнить.Доступность = Ложь;
	//    Элементы.ФормаПодгрузитьПредыдущиеДанные.Доступность = Ложь;
	//    Элементы.ЗаказыДобавитьЗаказ.Доступность = Ложь;
	//    Элементы.Заказы.ТолькоПросмотр = Истина;
	//    Элементы.ПриходныеДокументы.ТолькоПросмотр = Истина;
	//    Элементы.Контрагенты.ТолькоПросмотр = Истина;
	//    Элементы.СкладМагазина.ТолькоПросмотр = Истина;
	//Иначе
        Элементы.ФормаЗаполнить.Доступность = Истина;
        Элементы.ФормаПодгрузитьПредыдущиеДанные.Доступность = Истина;
        Элементы.ЗаказыДобавитьЗаказ.Доступность = Истина;
        Элементы.Заказы.ТолькоПросмотр = Ложь;
        Элементы.ПриходныеДокументы.ТолькоПросмотр = Ложь;
        Элементы.Контрагенты.ТолькоПросмотр = Ложь;
        Элементы.СкладМагазина.ТолькоПросмотр = Ложь;
	//КонецЕсли;

КонецПроцедуры // УстановитьДоступностьЭлементов()

&НаСервере
Функция УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Получить(5).Использование = Не УсловноеОформление.Элементы.Получить(5).Использование;	
	Возврат УсловноеОформление.Элементы.Получить(5).Использование;
КонецФункции	

&НаКлиенте
Процедура Расхождения(Команда)
    Если Модифицированность = Истина Тогда 
        От = Вопрос("Необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
        Если От = КодВозвратаДиалога.Да Тогда
            Парам = Новый Структура;
            Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
            Записать(Парам);
        Иначе
            Возврат;
        КонецеСли;
    КонецЕсли;
    Элементы.ЗаказыРасхождения.Пометка = УстановитьУсловноеОформление();
    ЭтаФорма.Прочитать();
КонецПроцедуры

&НаСервере
Функция РасхожденияНаСервере()
    ЭлементОформления = УсловноеОформление.Элементы.Добавить();
    
    // Создаем условие отбора
    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыЕстьВПриходеЗаполнено"); // имя поля
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
    ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыЕстьНаСканереЗаполнено");
    ЭлементОтбора.Использование = Истина;
    
    //Элементы.Заказы.ОтборСтрок
    
    Элемент = ЭлементОформления.Оформление.Элементы[20];
    Элемент.Значение = Истина;
    
    Элемент.Использование = Истина;
    
    ////Добавим поля оформления, если ничего не добавлять, то система применит оформления ко всей строке:
    //
    //// Создаем поля оформления
    //ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
    //ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Заказы");
    //ПолеОформления.Использование = Истина;
    Возврат НЕ Элемент.Значение;
    
КонецФункции // РасхожденияНаСервере()

#КонецОбласти 

#Область Прочие

Процедура ЗаписатьПриложенныеДокументыВБД()
	Если МассивПриложенныхДокументов.Количество() <> 0 Тогда
				
		Для Каждого Тек Из МассивПриложенныхДокументов Цикл
            НовСпр = Справочники.ПрикрепленныеФайлы.СоздатьЭлемент();
			НовСпр.РасширениеДокумента = Тек.РасширениеДокумента;
			НовСпр.ТипДокумента = Справочники.ТипыПрикрепленныхДокументов.АктПриемаПередачи;
			НовСпр.ДатаСоздания = ТекущаяДата();
			НовСпр.Данные = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Тек.АдресПриложения));
			НовСпр.Наименование = СокрЛП(НовСпр.ТипДокумента.Наименование);
			НовСпр.Пользователь = глЗначениеПеременной("глТекущийПользователь");
			НовСпр.Записать();
			
			//CeHbKA #3749 14.04.2020
			ДД = ПолучитьИзВременногоХранилища(Тек.АдресПриложения).Получить();
			ИдентификаторВнешнихДанных = ВнешниеДанныеСервер.ЗаписатьДанныеВоВнешнееХранилищеДанных(Тек.ИмяФайла, Тек.РасширениеДокумента, , ДД, Объект.Ссылка, Справочники.ТипыПрикрепленныхДокументов.АктПриемаПередачи);			
			//CeHbKA #3749 14.04.2020
						
			Наб = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
			
			Наб.Отбор.Документ.Установить(Объект.Ссылка);
			Наб.Отбор.Данные.Установить(НовСпр.Ссылка);
			
			Для Каждого Тек Из Объект.Заказы Цикл
				Если Тек.ЕстьВПриходе Тогда
					Нов = Наб.Добавить();
					Нов.Данные = НовСпр.Ссылка;
					Нов.Документ = Объект.Ссылка;
					Нов.Заказ = Тек.Заказ;
					Нов.ИнтернетМагазин = Нов.Заказ.ВладелецТовара;
					//CeHbKA #3749 14.04.2020
					Нов.ИдентификаторВнешнихДанных = ИдентификаторВнешнихДанных;
					//CeHbKA #3749 14.04.2020
				КонецеСли;
			КонецЦикла;
			
			Наб.Записать();
						
		КонецЦикла;	
		Элементы.СписокДокументов.Обновить();
		МассивПриложенныхДокументов.Очистить();
		lem.ОбновлениеДанныхПриложенныхДокументов(Объект, МассивЗаписанныхДокументов, ЭтаФорма);
	КонецеСли;	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьДокумент(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Предупреждение("Запишите документ!");
		Возврат;
	КонецеСли;	
	
	
	// Вставить содержимое обработчика.
	Д = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Д.ПолноеИмяФайла = "";
	Фильтр = "Документы PDF" 
	+ "(*.pdf)|*.pdf|Картинки (*.jpg)|*.jpg";
	Д.Фильтр = Фильтр;
	Д.МножественныйВыбор = Ложь;
	Д.Заголовок = "Выберите документ";
	Если Д.Выбрать() Тогда
		
		НовСтр = МассивПриложенныхДокументов.Добавить();
		НовИд = ЭтаФорма.УникальныйИдентификатор;
		
		ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Д.ПолноеИмяФайла));
		АдресПриложения = ПоместитьВоВременноеХранилище(ЛокХранилище, НовИд);
		
		НовСтр.АдресПриложения = АдресПриложения;
		НовСтр.УникальныйИдентификатор = НовИд;
		НовСтр.РасширениеДокумента = Прав(Д.ПолноеИмяФайла, 3);
		НовСтр.ИмяФайла = Справочники.ТипыПрикрепленныхДокументов.АктПриемаПередачи.Наименование + "." + НовСтр.РасширениеДокумента;
		Модифицированность = Истина;
	КонецеСли;
	ЗаписатьПриложенныеДокументыВБД();
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьДокумент(Команда)
	// Вставить содержимое обработчика.
	Тек = Элементы.СписокДокументов.ТекущаяСтрока;
	
	
	
	Если Тек <> Неопределено Тогда
		Струк = Новый Структура;
		Струк.Вставить("Ссылка", Тек.Ссылка);
		Най = МассивЗаписанныхДокументов.НайтиСтроки(Струк);
		Если Най.Количество() <> 0 тОгда
			Хр = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Най[0].АдресПриложения));
			Дв = Хр.Получить().Получить();
			Попытка
				Дв.Записать(КаталогВременныхФайлов() + "\" + Най[0].ИмяФайла);
			Исключение
				Предупреждение("Произошла ошибка при открытии документа. Возможно, документ уже открыт.");
				Возврат;
			КонецПопытки;	
			ЗапуститьПриложение(КаталогВременныхФайлов() + "\" + Най[0].ИмяФайла);
		КонецеСли;	
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоги()
    Объект.СуммаВСистеме = Объект.Заказы.Итог("СуммаВСистеме");
    Объект.СуммаВПриходе = Объект.Заказы.Итог("СуммаВПриходе");
    Объект.СуммаНаСканере = Объект.Заказы.Итог("СуммаНаСканере");
    
    ИтогоЕстьВСистеме = Объект.Заказы.НайтиСтроки(Новый Структура("ЕстьВСистемеЗаполнено",Истина)).Количество();
    Объект.ИтогоЕстьВСистеме = ИтогоЕстьВСистеме;
    ////Серегин М.В. 11.08.2015 16:18:02 старый вариант
    //ИтогоЕстьВПриходе = Объект.Заказы.НайтиСтроки(Новый Структура("ЕстьВПриходе",Истина)).Количество();
    //Объект.ИтогоЕстьВПриходе = ИтогоЕстьВПриходе;
    //Серегин М.В. 11.08.2015 16:18:14 новый
    ИтогоЕстьВПриходе = Объект.Заказы.НайтиСтроки(Новый Структура("ЕстьВПриходеЗаполнено",Истина)).Количество();
    Объект.ИтогоЕстьВПриходе = ИтогоЕстьВПриходе;
    
    ИтогоЕстьНаСканере = Объект.Заказы.НайтиСтроки(Новый Структура("ЕстьНаСканереЗаполнено",Истина)).Количество();
    Объект.ИтогоЕстьНаСканере = ИтогоЕстьНаСканере;
    
    Объект.КоличествоВСистеме = Объект.Заказы.Итог("КоличествоВСистеме");
    Объект.КоличествоВПриходе = Объект.Заказы.Итог("КоличествоВПриходе");
    Объект.КоличествоНаСканере = Объект.Заказы.Итог("КоличествоНаСканере");
КонецПроцедуры // ПересчитатьИтоги()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
    КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
    ТЧКонтрагенты = Объект.Контрагенты;
    ТЧКонтрагенты.Очистить();
    СтрокаТЧ = ТЧКонтрагенты.Добавить();
    СтрокаТЧ.Контрагент = Объект.Контрагент;
    Если Объект.Контрагент.ЗаполнятьФактическийПриходПоГруппе Тогда
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   Контрагенты.Ссылка КАК Контрагент
        |ИЗ
        |   Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |   Контрагенты.Родитель.ОсновнойМагазин = &ОсновнойМагазин";
        
        Запрос.УстановитьПараметр("ОсновнойМагазин", Объект.Контрагент);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            СтрокаТЧ = ТЧКонтрагенты.Добавить();
            ЗаполнитьЗначенияСвойств(СтрокаТЧ,ВыборкаДетальныеЗаписи);
        КонецЦикла;
        
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриходныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Д = Новый Структура("Ключ", Элементы.ПриходныеДокументы.ТекущиеДанные.ПриходныйДокумент.Ссылка);
	Форма = ОткрытьФорму("Документ.ПриходЗаказовНаСклад.ФормаОбъекта", Д, ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьЗаказ(Команда)
    МассивКонтрагентов = ПолучитьКонтрагентов();
    СписокОтбора = Новый СписокЗначений;
    СписокОтбора.ЗагрузитьЗначения(МассивКонтрагентов);
    
    ФормаВыбора = ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаВыбора",,Элементы.Заказы);
    ФормаВыбора.Отбор.ВладелецТовара.ВидСравнения = ВидСравнения.ВСписке;
    ФормаВыбора.Отбор.ВладелецТовара.Значение = СписокОтбора;
    ФормаВыбора.Отбор.ВладелецТовара.Использование = Истина;
    ФормаВыбора.Открыть();
    
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтрагентов()
    Возврат Объект.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент");
КонецФункции // ПолучитьКонтрагентов()

&НаКлиенте
Процедура ЗаказыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда // обработка события кнопки "добавить заказ"
        ЗаказыОбработкаВыбораДобавитьЗаказНаСервере(ВыбранноеЗначение);
    КонецЕсли;
    
    //Пересчет итогов
    ПересчитатьИтоги();
КонецПроцедуры

&НаСервере
Процедура ЗаказыОбработкаВыбораДобавитьЗаказНаСервере(ВыбранноеЗначение)
    
    СменаПоДефолту = Справочники.Смены.Смена1;
    
    //Заполнение ТЧ Заказы
    СтрокаТЧЗаказы = Объект.Заказы.Добавить();
    СтрокаТЧЗаказы.Заказ = ВыбранноеЗначение;
    СтрокаТЧЗаказы.НомерЗаказа = ВыбранноеЗначение.НомерВнешнегоЗаказа;
    СтрокаТЧЗаказы.ЕстьВСистеме = Истина;
    СтрокаТЧЗаказы.ЕстьВСистемеЗаполнено = Истина;
    СтрокаТЧЗаказы.СуммаВСистеме = ПолучитьСуммуЗаказа(ВыбранноеЗначение.Номер); 
    СтрокаТЧЗаказы.КоличествоВСистеме =  ПолучитьКоличествоЗаказа(ВыбранноеЗначение.Номер);
    СтрокаТЧЗаказы.Смена = СменаПоДефолту;
    СтрокаТЧЗаказы.Контрагент = ВыбранноеЗначение.ВладелецТовара;
    
    //Заполнение данных по приходу
    ЗаполнениеДанныхПрихода (СтрокаТЧЗаказы,ВыбранноеЗначение,СменаПоДефолту);
    
    //Заполнение данных по ТСД
    ЗаполнениеДанныхТСД(СтрокаТЧЗаказы,ВыбранноеЗначение,СменаПоДефолту);
    Если ЭтоЗаказНаУстановку(ВыбранноеЗначение.Номер) Тогда
        СтрокаТЧЗаказы.ЗаказНаУстановку = Истина;
        СтрокаТЧЗаказы.ЕстьНаСканере = Истина; 
        СтрокаТЧЗаказы.ЕстьНаСканереЗаполнено = Истина;
        СтрокаТЧЗаказы.СуммаНаСканере = ПолучитьСуммуЗаказа(ВыбранноеЗначение.Номер);
        СтрокаТЧЗаказы.КоличествоНаСканере = ПолучитьКоличествоЗаказа(ВыбранноеЗначение.Номер);
    КонецЕсли;
КонецПроцедуры

//
&НаСервере
Процедура ЗаполнениеДанныхПрихода(Строка,Заказ,СменаПоДефолту)
    
    //Ищем наш заказ в приходных документах по Реализации
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
                   |    ПриходЗаказовНаСкладЗаказы.Ссылка КАК ДокументПрихода,
                   |    ПриходЗаказовНаСкладЗаказы.КоличествоМест
                   |ИЗ
                   |    Документ.ПриходЗаказовНаСклад.Заказы КАК ПриходЗаказовНаСкладЗаказы
                   |ГДЕ
                   |    ПриходЗаказовНаСкладЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
                   |    И ПриходЗаказовНаСкладЗаказы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
                   |    И ПриходЗаказовНаСкладЗаказы.Ссылка.Контрагент В(&Контрагент)
                   |    И ПриходЗаказовНаСкладЗаказы.Ссылка.СкладМагазина В(&СкладМагазина)
                   |    И ПриходЗаказовНаСкладЗаказы.Заказ = &Заказ
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    ПриходЗаказовНаСкладЗаказы.Ссылка УБЫВ";
		
		Запрос.УстановитьПараметр("ДатаНач", Объект.ДатаНачалаВыборки);		
		Запрос.УстановитьПараметр("ДатаКон", Объект.ДатаОкончанияВыборки);		
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент"));
        Запрос.УстановитьПараметр("Заказ", Заказ);
        
        Если НЕ ЗначениеЗаполнено(Объект.СкладМагазина) Тогда
            Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ПриходЗаказовНаСклад.СкладМагазина В (&СкладМагазина)","");    
        КонецЕсли;
        Запрос.УстановитьПараметр("СкладМагазина", Объект.СкладМагазина);
		Выборка = Запрос.Выполнить().Выбрать();
        
        //Если есть приходный документ заполняем приходные данные в нашем документе
        Пока Выборка.Следующий() Цикл
            Строка.ЕстьВПриходе = Истина;
            Строка.ЕстьВПриходеЗаполнено = Истина;
            Строка.СуммаВПриходе = ПолучитьСуммуЗаказа(Заказ.Номер);
            Строка.КоличествоВПриходе = ПолучитьКоличествоЗаказа(Заказ.Номер);
            Строка.ДокументПрихода = Выборка.ДокументПрихода;
            Строка.КоличествоМестПриход = Выборка.КоличествоМест;
            
            //Ищем найденный приход в ТЧ Приходные документы
            НайденыйПриход = Объект.ПриходныеДокументы.НайтиСтроки(Новый Структура("ПриходныйДокумент",Строка.ДокументПрихода));
            
            //Если не нашли совпадений (или тч пустая), то добавляем строку
            Если НайденыйПриход.Количество() = 0 Тогда
                СтрокаПриходы = Объект.ПриходныеДокументы.Добавить();
                СтрокаПриходы.Учитывать = Истина;
                СтрокаПриходы.ПриходныйДокумент = Строка.ДокументПрихода;
                СтрокаПриходы.Смена = СменаПоДефолту;
            КонецЕсли;
        КонецЦикла;
    
    
КонецПроцедуры // ()

//
&НаСервере
Процедура ЗаполнениеДанныхТСД(Строка,Заказ, СменаПоДефолту)
    
    //Ищем наш заказ в  документах ТСД по Реализации
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
                   |    ЗагрузкаСТСДШтрихкоды.Ссылка КАК ЗагрузкаСТСД,
                   |    ЗагрузкаСТСДШтрихкоды.КоличествоМест
                   |ИЗ
                   |    Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
                   |ГДЕ
                   |    ЗагрузкаСТСДШтрихкоды.Ссылка.ПометкаУдаления = ЛОЖЬ
                   |    И ЗагрузкаСТСДШтрихкоды.Контрагент.Ссылка В(&Контрагент)
                   |    И ЗагрузкаСТСДШтрихкоды.Ссылка.ДатаДокумента МЕЖДУ &ДатаНач И &ДатаКон
                   |    И ЗагрузкаСТСДШтрихкоды.Заказ = &Заказ
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    ЗагрузкаСТСДШтрихкоды.Ссылка УБЫВ";
    
    Запрос.УстановитьПараметр("ДатаНач", Объект.ДатаНачалаВыборки);		
    Запрос.УстановитьПараметр("ДатаКон", Объект.ДатаОкончанияВыборки);
    Запрос.УстановитьПараметр("Заказ", Заказ);
    Запрос.УстановитьПараметр("Контрагент", Объект.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент"));
    Выборка = Запрос.Выполнить().Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Строка.ЕстьНаСканере = Истина;
        Строка.ЕстьНаСканереЗаполнено = Истина;
        Строка.СуммаНаСканере = ПолучитьСуммуЗаказа(Заказ.Номер);
        Строка.КоличествоНаСканере = ПолучитьКоличествоЗаказа(Заказ.Номер);
        Строка.КоличествоМестСканировано = Выборка.КоличествоМест; 
        
            //Ищем найденный приход в ТЧ ДокументыТСД
            НайденыйТСД = Объект.ДокументыТСД.НайтиСтроки(Новый Структура("ЗагрузкаСТСД",Выборка.ЗагрузкаСТСД));
            
            //Если не нашли совпадений (или тч пустая), то добавляем строку
            Если НайденыйТСД.Количество() = 0 Тогда
                СтрокаТСД = Объект.ДокументыТСД.Добавить();
                СтрокаТСД.ЗагрузкаСТСД = Выборка.ЗагрузкаСТСД;
                СтрокаТСД.Смена = СменаПоДефолту;
            КонецЕсли;
    КонецЦикла;
    

КонецПроцедуры // ЗаполнениеДанныхТСД()

Функция ЭтоЗаказНаУстановку(Номер)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер,
        |   ВозвратТоваровОтПокупателяТовары.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ КАК ЭтоУслугаПоЗаказам
        |ПОМЕСТИТЬ ВТ
        |ИЗ
        |   Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугТовары.Ссылка.Номер,
        |   РеализацияТоваровУслугТовары.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО РеализацияТоваровУслугТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер,
        |   РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТ.Номер КАК Номер,
        |   ВТ.Номенклатура,
        |   МАКСИМУМ(ВТ.ЭтоУслугаПоЗаказам) КАК ЭтоУслугаПоЗаказам
        |ИЗ
        |   ВТ КАК ВТ
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТ.Номер,
        |   ВТ.Номенклатура
        |
        |УПОРЯДОЧИТЬ ПО
        |   Номер
        |АВТОУПОРЯДОЧИВАНИЕ";
    
    Запрос.УстановитьПараметр("Номер", Номер);
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Если РезультатЗапроса.Количество()> 0 Тогда //это значит пустые табличные части
        ЕстьНоменклатура = РезультатЗапроса.Найти(Ложь,"ЭтоУслугаПоЗаказам");
        Если ЕстьНоменклатура = Неопределено Тогда
            Возврат Истина; //только услуги
        Иначе
            Возврат Ложь; //есть номенклатура
        КонецЕсли;
    Иначе
        Возврат Ложь; //есть номенклатура
    КонецЕсли;
    
КонецФункции // ()

&НаКлиенте
Процедура ДокументыТСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ДокументыТСД.ТекущиеДанные <> Неопределено Тогда
		Д = Новый Структура("Ключ", Элементы.ДокументыТСД.ТекущиеДанные.ЗагрузкаСТСД);
		Форма = ПолучитьФорму("Документ.ЗагрузкаСТСД.ФормаОбъекта", Д, ЭтаФорма);
		Форма.Открыть();
	КонецеСли;	
КонецПроцедуры



#КонецОбласти 
