Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;
Перем АвтоЗначенияРеквизитов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И Не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, , Ложь);
	
	Если Прав(НомерПечать,3)="000" И Дата < '20120709' Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(НЕ ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.ПлательщикИНН           = "ИНН " + ?(ПустаяСтрока(ИННПлательщика), Организация.ИНН, СокрЛП(ИННПлательщика));
	Обл.Параметры.ПлательщикКПП           = "КПП " + ?(ПустаяСтрока(КППплательщика),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0",""),СокрЛП(КППплательщика));	
	
	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент="";
	Иначе	
		СтрКорреспондент= " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТекстПлательщикПечать=?(ПустаяСтрока(Организация.НаименованиеПлательщикаПриПеречисленииНалогов),
								?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика)),Организация.НаименованиеПлательщикаПриПеречисленииНалогов+СтрКорреспондент);
	Иначе
        ТекстПлательщикПечать=?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
		
	КонецЕсли;
	
	Обл.Параметры.Плательщик              = ТекстПлательщикПечать;
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;

	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;
	
	Если НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Контрагент.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	Иначе
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Организация.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Организация.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	КонецЕсли;
		
	Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность             = ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа             = "";

	// Реквизиты для перечисления в бюджет
	
	Если ПеречислениеВБюджет Тогда
		
		ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет();
		
		Обл.Параметры.СтатусСоставителя   = ?(ПустаяСтрока(СтатусСоставителя),"0",СокрЛП(СтатусСоставителя));
		Обл.Параметры.КодБК               = ?(ПустаяСтрока(КодБК),"",СокрЛП(КодБК));
		Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(КодОКАТО),
			?(ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, "0", ""),
			СокрЛП(КодОКАТО));
		Обл.Параметры.ПоказательОснования = ?(ПустаяСтрока(ПоказательОснования),"0",СокрЛП(ПоказательОснования));
		Обл.Параметры.ПоказательНомера    = ?(ПустаяСтрока(ПоказательНомера),"0",СокрЛП(ПоказательНомера));
		Обл.Параметры.ПоказательДаты      = ?(ПоказательДаты = '00010101000000',"0",Формат(ПоказательДаты,"ДФ='дд.ММ.гггг'"));
		Обл.Параметры.ПоказательТипа      = ?(ПустаяСтрока(ПоказательТипа),"0",СокрЛП(ПоказательТипа));
		Если (ПустаяСтрока(ПоказательПериода)) ИЛИ (ПоказательПериода = "  .  .    ") Тогда
			Обл.Параметры.ПоказательПериода = "0";
		Иначе
			Обл.Параметры.ПоказательПериода = СокрЛП(ПоказательПериода);
		КонецЕсли;
		
	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение","Платежное поручение");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = СчетОрганизации.ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

Процедура ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если П101 = "08" Тогда
		
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Статус ""08"" соответствует виду перечисления ""Иной платеж"".");
		
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		
	Иначе
		
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			СписокОшибок.ДобавитьЗначение("Возможно, неверно заполнено поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				СписокОшибок.Добавить("При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
				
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 12)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 4)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 2)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)или
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				СписокОшибок.Добавить("При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					СписокОшибок.Добавить("При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			СписокОшибок.Добавить("Неверно указано значение в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			СписокОшибок.Добавить("Неверно указано значение в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если П101 = "08" Тогда
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Статус ""08"" соответствует виду перечисления ""Иной платеж"".");
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Возможно, следует указать значение в поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если (СтрЗаменить(СокрЛП(П106), "0", "") <> "")
		И (Найти("ДЕ, ПО, КВ, КТ, ИД, ИП, ТУ, БД, ИН, КП", П106) = 0) Тогда
		СписокОшибок.Добавить("Неверно указано значение в поле ""Основание платежа"" на закладке ""Перечисление в бюджет""."); 
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(П107) Тогда
		СписокОшибок.Добавить("Возможно, следует указать значение в поле ""Код таможенного органа"" на закладке ""Перечисление в бюджет""."); 
	КонецЕсли;
	
	Если (СтрЗаменить(П110,"0","") <> "") 
		И (Найти("ТП, ШТ, ЗД, ПЕ", П110) = 0) Тогда
		СписокОшибок.Добавить("Неверно указано значение в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если П101 <> "08" Тогда
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Вид перечисления ""Иной платеж"" соответствует статусу составителя ""08"".");
	КонецЕсли;
		
	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П106, "0", "") <> "" Тогда 
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П107, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П108, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П109, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Не следует заполнять поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П110, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()
	
	СписокОшибок = Новый СписокЗначений();
	
	П101 = СокрЛП(СтатусСоставителя);
	П104 = СокрЛП(КодБК);
	П105 = СокрЛП(КодОКАТО);
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		П105 = ?(ПустаяСтрока(П105), "0", П105);
	КонецЕсли;
	П106 = СокрЛП(ПоказательОснования);
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(ПоказательПериода, ".", ""))) = 1, "", ПоказательПериода);
	П107 = ?(СокрЛП(СтрЗаменить(ПоказательПериода, ".", "")) = "0", "", ПоказательПериода);
	П108 = СокрЛП(ПоказательНомера);
	П109 = ?(НЕ ЗначениеЗаполнено(ПоказательДаты), "0", Строка(ПоказательДаты));
	П110 = СокрЛП(ПоказательТипа);
	
	// Проверки, обшие для всех видов перечислений в бюджет
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", П101) = 0) 
		ИЛИ ПустаяСтрока(СокрЛП(П101)) Тогда
		СписокОшибок.Добавить("Неверное значение поля ""Статус составителя"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если (СтрЗаменить(П104, "0", "") = "") И (Найти(П101, "07") = 0) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""КБК"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	// Проверки, зависящие от вида перечисления в бюджет
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	Иначе
		ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	КонецЕсли;
	
	//Выводим список найденных ошибок
	
	Для Ном = 0 по СписокОшибок.Количество()-1 Цикл
		Сообщить(СписокОшибок.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		СтруктураПолей.Вставить("ФизЛицо","Не указано подотчетное лицо");
		СтруктураПолей.Вставить("ВалютаВзаиморасчетовРаботника","Не указана валюта взаиморасчетов с подотчетным лицом");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей = Новый Структура("Организация, СуммаДокумента");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента", "Не указан банковский счет, на который производится перевод!");
	Иначе
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда 

		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");

		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;

            //Если ЗначениеЗаполнено(Организация) 
            //	И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
            //	ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
            //КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

	//Движения по расчетам для ДНС
	Если ЕстьРасчетыСКонтрагентами и ОтражатьВБухгалтерскомУчете и Оплачено Тогда
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, Заголовок)
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок);
	
	Если СтруктураПараметров = Ложь Тогда
		//Ошибка при подготовке табдлиц. 
		// Указанный вид операции не влияет на расчеты с контрагентами.
		Возврат;
	КонецЕсли; 
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметров, ЭтотОбъект);

КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)

	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",            РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаПолучатель", СчетКонтрагента);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствПолучатель",  Перечисления.ВидыДенежныхСредств.Безналичные);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("ФизЛицо",                    ФизЛицо);
		мСтруктураПараметровДенежныхСредств.Вставить("РасчетныйДокументРаботника", РасчетныйДокументРаботника);
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)

	Если ОтраженоВОперУчете И (НЕ Оплачено) И (Режим = РежимПроведенияДокумента.Оперативный)
		И (НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет) Тогда

		ЕстьРазрешение=УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезЗаявки();
		
		УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
			СчетОрганизации,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
					
		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(СчетОрганизации,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+СчетОрганизации.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
			|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);

			Если НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ОтраженоВОперУчете Тогда

		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
		
		Если Не Отказ Тогда
			УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,РасчетыВозврат);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция СформироватьСтруктуруКурсыВалютУпр()

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

	СтруктураКурсыВалют = УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаОплаты = '00010101', Дата, КонецДня(ДатаОплаты)));

	Возврат СтруктураКурсыВалют;

КонецФункции

// Процедура выполняет заполнение суммы документа и суммы взаиморасчетов по регистру расчетов с подотчетными лицами
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ФизЛицо",              ФизЛицо);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокументРаботника);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			Организация = &Организация
	|				И ФизЛицо = &ФизЛицо
	|				И РасчетныйДокумент = &РасчетныйДокумент
	|				И Валюта = &ВалютаВзаиморасчетов) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
		    ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		    СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		    СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями статуса отправителя
//
Функция ПолучитьСписокСтатусовОтправителя() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Список.Добавить("02", "02 - налоговый агент");
	Список.Добавить("03", "03 - организация федеральной почтовой связи, оформившая расчетный документ на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами");
	Список.Добавить("04", "04 - налоговый орган");
	Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Список.Добавить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо");
	Список.Добавить("07", "07 - таможенный орган");
	Список.Добавить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) – индивидуальный предприниматель");
	Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) – частный нотариус");
	Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) – адвокат, учредивший адвокатский кабинет");
	Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) – глава крестьянского (фермерского) хозяйства");
	Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) – иное физическое лицо – клиент банка (владелец счета)");
	Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
	Список.Добавить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами без открытия банковского счета");
	Список.Добавить("16", "16 - участник внешнеэкономической деятельности - физическое лицо");
	Список.Добавить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель");
	Список.Добавить("18", "18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей");
	Список.Добавить("19", "19 - организации, оформившие расчетный документ на перечисление на счет органа Федерального казначейства денежных средств, удержанных из заработка (дохода) должника - физического лица в счет погашения задолженности по таможенным платежам");
	Список.Добавить("20", "20 - кредитная организация, оформившая расчетный документ по каждому платежу физического лица на перечисление таможенных платежей, уплачиваемых физическими лицами без открытия банковского счета");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокСтатусовОтправителя()

// Возвращает список показателей основания п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями основания
//
Функция ПолучитьСписокОснованийНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - платежи текущего года");
	Список.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим налоговым периодам");
	Список.Добавить("БФ","БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета");
	Список.Добавить("ТР", "ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа");
	Список.Добавить("РС", "РС - погашение рассроченной задолженности");
	Список.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	Список.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	Список.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	Список.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	Список.Добавить("АП", "АП - погашение задолженности по акту проверки");
	Список.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийНалоговогоПлатежа()

// Возвращает список показателей основания п/п на перечисление в бюджет таможенного платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями основания
//
Функция ПолучитьСписокОснованийТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ДЕ", "ДЕ - таможенная декларация");
	Список.Добавить("ПО", "ПО - таможенный приходный ордер");
	Список.Добавить("КВ", "КВ - постановление-квитанция (при уплате штрафа)");
	Список.Добавить("КТ", "КТ - форма корректировки таможенной стоимости и таможенных платежей");
	Список.Добавить("ИД", "ИД - исполнительный документ");
	Список.Добавить("ИП", "ИП - инкассовое поручение");
	Список.Добавить("ТУ", "ТУ - требование об уплате таможенных платежей");
	Список.Добавить("БД", "БД - документы бухгалтерских служб таможенных органов");
	Список.Добавить("ИН", "ИН - документ инкассации");
	Список.Добавить("КП", "КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийТаможенногоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями типа
//
Функция ПолучитьСписокПоказателейТипаНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("НС", "НС - уплата налога или сбора");
	Список.Добавить("ПЛ", "ПЛ - уплата платежа");
	Список.Добавить("ГП", "ГП - уплата пошлины");
	Список.Добавить("ВЗ", "ВЗ - уплата взноса");
	Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");
	Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
	Список.Добавить("АШ", "АШ - административные штрафы");
	Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаНалоговогоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет таможенного платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями типа
//
Функция ПолучитьСписокПоказателейТипаТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - текущий платеж");
	Список.Добавить("ШТ", "ШТ - уплата штрафа");
	Список.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаТаможенногоПлатежа()

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                       			, "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                       			, "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "КонтролироватьДенежныеСредстваКомитента"       , "КонтролироватьДенежныеСредстваКомитента");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("КурсДокумента", КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента", КратностьДокумента);

	ДатаДвижений=?(Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты),Дата);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Основание = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
		возврат;
	КонецЕсли;

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	УправлениеДенежнымиСредствами.ЗаполнитьРасходПоОснованию(
		ЭтотОбъект, Основание, 
		УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	РасчетыВозврат=УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.",Отказ, Заголовок);
	КонецЕсли;
	
	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплата(), Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтраженоВОперУчете Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата, ВалютаДокумента, Ссылка, "ПлатежноеПоручениеИсходящее");
	
	ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);

	СтруктураКурсыВалют = СформироватьСтруктуруКурсыВалютУпр();
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете тогда
		Для каждого СтрокаОплаты из ТаблицаПлатежейУпр Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
					мВалютаРегламентированногоУчета, Истина, Отказ, Заголовок, "Строка " + СтрокаОплаты.НомерСтроки + " - ",
					СтрокаОплаты.ВалютаВзаиморасчетов, СтрокаОплаты.РасчетыВУсловныхЕдиницах);
		КонецЦикла;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
		
		
		//Если ТаблицаДатОплат.Количество() = 0 Тогда
		//	Движения.ФинансоваяЗадолженностьПоКомитентам.Записывать = Истина;
		//	Движения.ФинансоваяЗадолженностьПоКомитентам.Очистить();
		//
		//	Нов = Движения.ФинансоваяЗадолженностьПоКомитентам.Добавить();
		//	Нов.ВидДвижения = ВидДвиженияНакопления.Расход;
		//	Нов.Контрагент = Контрагент;
		//	Нов.Организация = Организация;
		//	Нов.СуммаКомитента = СуммаДокумента;
		//	Нов.Период = Дата;
		//	Нов.ПериодВозникновенияЗадолженности = Дата;
		//	Нов.Сумма = СуммаДокумента;
		//Иначе
		//	Для Каждого Тек Из ТаблицаДатОплат Цикл
		//		Движения.ФинансоваяЗадолженностьПоКомитентам.Записывать = Истина;
		//		Движения.ФинансоваяЗадолженностьПоКомитентам.Очистить();
		//	
		//		Нов = Движения.ФинансоваяЗадолженностьПоКомитентам.Добавить();
		//		Нов.ВидДвижения = ВидДвиженияНакопления.Расход;
		//		Нов.Контрагент = Контрагент;
		//		Нов.Организация = Организация;
		//		Нов.СуммаКомитента = СуммаДокумента;
		//		Нов.Период = Дата;
		//		Нов.Сумма = СуммаДокумента;
		//		Нов.ПериодВозникновенияЗадолженности = Тек.ДатаДоставки;
		//	КонецЦикла;	
		//КонецеСли;	

	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	СтруктураДействий = Новый Структура("ПроверитьНомер, УстановитьДоговор");
	УправлениеДенежнымиСредствами.ВыполнитьДействияПередЗаписьюПлатежногоДокумента(ЭтотОбъект, СтруктураДействий, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЧастичнаяОплата Тогда
		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

		Сообщить("По документу "+ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента)+" уже прошла частичная оплата.
		|Перед отменой проведения документа необходимо отменить проведение платежных ордеров.");
		Отказ=Истина;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
