
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Для Каждого стрГрафик Из РаботаВодителей Цикл
		Если Не ЗначениеЗаполнено(стрГрафик.Водитель) Тогда
			Сообщить("Строка " + Строка(стрГрафик.НомерСтроки) + ": не указан водитель!", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(стрГрафик.Транспорт) Тогда
			Сообщить("Строка " + Строка(стрГрафик.НомерСтроки) + ": не указан транспорт!", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(стрГрафик.НачалоПериода) Тогда
			Сообщить("Строка " + Строка(стрГрафик.НомерСтроки) + ": не указано начало периода!", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрГрафик.НачалоПериода) И ЗначениеЗаполнено(стрГрафик.КонецПериода) И стрГрафик.НачалоПериода > стрГрафик.КонецПериода Тогда
			Сообщить("Строка " + Строка(стрГрафик.НомерСтроки) + ": начало периода больше окончания!", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ГрафикиВодителей.Транспорт КАК Транспорт,
	               |	ГрафикиВодителей.Водитель КАК Водитель,
	               |	ГрафикиВодителей.Экспедитор КАК Экспедитор,
	               |	ГрафикиВодителей.НачалоПериода КАК НачалоПериода,
	               |	ГрафикиВодителей.КонецПериода КАК КонецПериода,
	               |	ГрафикиВодителей.КодПериода КАК КодПериода,
	               |	ГрафикиВодителей.ГрафикРаботы КАК ГрафикРаботы,
	               |	ГрафикиВодителей.Документ КАК Документ,
	               |	ИСТИНА КАК НеИзменен,
	               |	ЛОЖЬ КАК Удален
	               |ИЗ
	               |	РегистрСведений.новаГрафикиРаботыВодителей КАК ГрафикиВодителей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.новаПланированиеРаботыВодителей.РаботаВодителей КАК ИзменяемыеПериоды
	               |		ПО (ИзменяемыеПериоды.Ссылка = &Ссылка)
	               |			И ГрафикиВодителей.Транспорт = ИзменяемыеПериоды.Транспорт
	               |			И ГрафикиВодителей.Водитель = ИзменяемыеПериоды.Водитель
	               |ГДЕ
	               |	(НЕ ИзменяемыеПериоды.Ссылка ЕСТЬ NULL )";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	тзПериоды = Запрос.Выполнить().Выгрузить();
	
	СекундВДне = 60 * 60 * 24;
	
	стОтбор = Новый Структура("Транспорт, Водитель, Удален", Неопределено, Неопределено,  Ложь);
	ДатаПересчетаКалендаряВозможныхРейсов = '30010101';
	мсТранспорт = Новый Массив;
	мсВодители = Новый Массив;
	мсЭкспедиторы = Новый Массив;    //
	
	Для Каждого стрГрафик Из РаботаВодителей Цикл
		Если стрГрафик.НачалоПериода < ДатаПересчетаКалендаряВозможныхРейсов Тогда
			ДатаПересчетаКалендаряВозможныхРейсов = стрГрафик.НачалоПериода;
		КонецЕсли;
		
		Если мсТранспорт.Найти(стрГрафик.Транспорт) = Неопределено Тогда мсТранспорт.Добавить(стрГрафик.Транспорт); КонецЕсли;
		Если мсВодители.Найти(стрГрафик.Водитель) = Неопределено Тогда мсВодители.Добавить(стрГрафик.Водитель); КонецЕсли;
		Если мсЭкспедиторы.Найти(стрГрафик.Экспедитор) = Неопределено Тогда мсЭкспедиторы.Добавить(стрГрафик.Экспедитор); КонецЕсли;
		
		стОтбор.Транспорт = стрГрафик.Транспорт;
		стОтбор.Водитель = стрГрафик.Водитель;
		Периоды = тзПериоды.НайтиСтроки(стОтбор);
		
		НачалоПериода = стрГрафик.НачалоПериода;
		КонецПериода = ?(ЗначениеЗаполнено(стрГрафик.КонецПериода), стрГрафик.КонецПериода, '30000101');
		
		//Если ЗначениеЗаполнено(стрГрафик.ГрафикРаботы) Тогда
		//	Для Каждого Период Из Периоды Цикл
		//		Если (Период.КонецПериода + СекундВДне) < НачалоПериода Тогда Продолжить; КонецЕсли;
		//		Если (Период.НачалоПериода - СекундВДне) > КонецПериода Тогда Продолжить; КонецЕсли;
		//		Период.Удален = Истина;
		//		
		//		Если Период.НачалоПериода < НачалоПериода Тогда
		//			НачалоПериода = Период.НачалоПериода;
		//		КонецЕсли;
		//		Если Период.КонецПериода > КонецПериода Тогда
		//			КонецПериода = Период.КонецПериода;
		//		КонецЕсли;
		//	КонецЦикла;
		//	
		//	Период = тзПериоды.Добавить();
		//	ЗаполнитьЗначенияСвойств(Период, стрГрафик);
		//	Период.НачалоПериода = НачалоПериода;
		//	Период.КонецПериода = КонецПериода;
		//	Период.КодПериода = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		//Иначе
			Для Каждого Период Из Периоды Цикл
				Если Период.КонецПериода < НачалоПериода Тогда Продолжить; КонецЕсли;
				Если Период.НачалоПериода > КонецПериода Тогда Продолжить; КонецЕсли;
				Период.Удален = Истина;
				
				Если Период.НачалоПериода < НачалоПериода Тогда
					НовыйПериод = тзПериоды.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйПериод, Период,, "Удален, НеИзменен");
					НовыйПериод.КонецПериода = НачалоПериода - СекундВДне;
					НовыйПериод.КодПериода = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
				КонецЕсли;
				Если Период.КонецПериода > КонецПериода И Период.КонецПериода < '30000101' Тогда
					НовыйПериод = тзПериоды.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйПериод, Период,, "Удален, НеИзменен");
					НовыйПериод.НачалоПериода = КонецПериода + СекундВДне;
					НовыйПериод.КодПериода = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
				КонецЕсли;
			КонецЦикла;
			
			Период = тзПериоды.Добавить();
			ЗаполнитьЗначенияСвойств(Период, стрГрафик);
			Период.НачалоПериода = НачалоПериода;
			Период.КонецПериода = КонецПериода;
			Период.КодПериода = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			Период.Документ = Ссылка;
			
//		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.новаГрафикиРаботыВодителей.СоздатьНаборЗаписей();
	Для Каждого стрПериод Из тзПериоды Цикл
		Если стрПериод.Удален = Истина Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Транспорт.Установить(стрПериод.Транспорт);
			НаборЗаписей.Отбор.Водитель.Установить(стрПериод.Водитель);
			НаборЗаписей.Отбор.НачалоПериода.Установить(стрПериод.НачалоПериода);
			НаборЗаписей.Отбор.КонецПериода.Установить(стрПериод.КонецПериода);
			НаборЗаписей.Записать();
			
		ИначеЕсли стрПериод.НеИзменен <> Истина Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Добавить();
			НаборЗаписей.Отбор.Транспорт.Установить(стрПериод.Транспорт);
			НаборЗаписей.Отбор.Водитель.Установить(стрПериод.Водитель);
			НаборЗаписей.Отбор.НачалоПериода.Установить(стрПериод.НачалоПериода);
			НаборЗаписей.Отбор.КонецПериода.Установить(стрПериод.КонецПериода);
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], стрПериод);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаПересчетаКалендаряВозможныхРейсов <> Неопределено Тогда
		новаТранспорт.РассчитатьКалендарьВозможныхРейсов(ДатаПересчетаКалендаряВозможныхРейсов,, мсТранспорт, мсВодители, мсЭкспедиторы);
	КонецЕсли;
КонецПроцедуры

