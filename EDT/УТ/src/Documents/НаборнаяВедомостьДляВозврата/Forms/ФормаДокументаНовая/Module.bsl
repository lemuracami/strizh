
&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	
	
	Если Элементы.Заказы.ТекущиеДанные <> Неопределено Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЗаказРеализация", Элементы.Заказы.ТекущиеДанные.Заказ); 
	КонецЕСли;	
	
	
	Если Элементы.Заказы.ТекущиеДанные <> Неопределено Тогда
		Элементы.МестаПоЗаказам.ОтборСтрок = Новый ФиксированнаяСтруктура("Заказ", Элементы.Заказы.ТекущиеДанные.Заказ); 
	КонецЕСли;
	
	
	Ном = 1; 
	Если Элементы.Заказы.ТекущиеДанные <> Неопределено Тогда	
		МасСтрок = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказРеализация", Элементы.Заказы.ТекущиеДанные.Заказ));
	    Для каждого Стр Из МасСтрок Цикл	
			Стр.НомерС = Ном;	
			Ном = Ном + 1;	
		КонецЦикла;			
	КонецЕсли;				
	
	
КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда)
    Если Объект.Заказы.Количество() > 0 Тогда
        Режим = РежимДиалогаВопрос.ДаНет;
        Текст = "ru = ""Табличные части будут очищены.Продолжить?"";"
        + " en = ""Do you want to continue?""";
        Ответ = Вопрос(НСтр(Текст), Режим, 0);
        Если Ответ = КодВозвратаДиалога.Нет Тогда
            Возврат;
        Иначе
            Объект.Заказы.Очистить();
            Объект.Товары.Очистить();
        КонецЕсли;
    КонецЕсли;
    ЗаполнитьСерверМ(ПолучитьДанныеИзрегистра());
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСерверМ(ДанныеВыборки, ПроверкаНаТСД = Истина) Экспорт
	
	//ДанныеВыборки = ПолучитьДанныеИзрегистра();
	Для каждого Стр Из ДанныеВыборки Цикл
		//Сообщить(Стр.Заказ);
        //Серегин М.В. 05.08.2015 17:05:02 новый костыль проверку на наличие в ТСД для всех кроме Возвратов
        Если Стр.ТипЗаказа <> Перечисления.ТипыЗаказов.Возврат И ПроверкаНаТСД Тогда
			// МАС - 23.10.2017 - № --->> 			
			//Если НЕ ЕстьНаТСД(Стр.Заказ) Тогда
			Если НЕ Стр.ЕстьНаТСД Тогда
			// <<--- МАС 
                 Продолжить;
            КонецЕсли;
        КонецЕсли;
        //Серегин М.В. 05.08.2015 17:05:06 
        //Серегин М.В. 03.07.2015 14:35:59 проверяем заказ на наличие номенклатуры, тех услуги не нужны
        Если НЕ ВЗаказеТолькоУслугиПоЗаказам(Стр.Заказ.Номер) Тогда 
            //Серегин М.В. 11.06.2015 12:11:19 
            ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка();
            Таблица  = smv.ПолучитьТекущееСостояниеЗаказа(Стр.Заказ);
            Для каждого СтрТаблицы Из Таблица Цикл
                ПричинаНеВыполнения = СтрТаблицы.ПричинаНеВыполнения;    
            КонецЦикла;
            //Серегин М.В. 11.06.2015 12:11:21 
            
            //Строка = Объект.Заказы.Добавить();
            //ЗаполнитьЗначенияСвойств(Строка,Стр);
            Если Стр.ТипЗаказа = Перечисления.ТипыЗаказов.Возврат Тогда
                ЭтоВозврат = Истина;
            Иначе
                ЭтоВозврат = Ложь;
            КонецЕсли;
            
            //Серегин М.В. 15.09.2015 12:00:42 для костыля по складам возвратов 
            КонтрагентТопДеливери = Справочники.Контрагенты.НайтиПоКоду("Shop_222");
            СкладТопДеливери = Справочники.СкладыМагазинов.НайтиПоКоду("7");
            //Серегин М.В. 15.09.2015 12:00:44 
            
            Если Стр.ТекущийСтатус = Справочники.СтатусыСкладскогоУчета.Возврат1 Тогда
                ДанныеВыборкиТовары = ПолучитьДанныеТоварыВозврат1(Стр.Заказ,ЭтоВозврат,КонтрагентТопДеливери,СкладТопДеливери);
            ИначеЕсли ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
                ДанныеВыборкиТовары = ПолучитьДанныеТоварыВозврат1(Стр.Заказ,ЭтоВозврат,КонтрагентТопДеливери,СкладТопДеливери);
                //Серегин М.В. 08.07.2015 15:25:23 очередной костыль (((
            ИначеЕсли Стр.ТекущийСтатус = Справочники.СтатусыСкладскогоУчета.Возврат2 И 
                (Стр.ТипЗаказа = Перечисления.ТипыЗаказов.Обмен ИЛИ Стр.ТипЗаказа = Перечисления.ТипыЗаказов.Возврат) Тогда
               ДанныеВыборкиТовары = ПолучитьДанныеТоварыВозвратОбмен(Стр.Заказ,КонтрагентТопДеливери,СкладТопДеливери);
               //Серегин М.В. 08.07.2015 15:39:54 
            Иначе
                ДанныеВыборкиТовары = ПолучитьДанныеТоварыВозврат2(Стр.Заказ,ЭтоВозврат,КонтрагентТопДеливери,СкладТопДеливери);
            КонецЕсли;
            
            Для каждого СтрТовары Из ДанныеВыборкиТовары Цикл
                СтрокаТовары = Объект.Товары.Добавить();
                СтрокаТовары.ЗаказРеализация = Стр.Заказ;
                СтрокаТовары.Контрагент = Стр.Контрагент;
                СтрокаТовары.СтатусСкладскогоУчета = Стр.ТекущийСтатус;
                Если БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Стр.Заказ.Номер).Пустая() Тогда 
                    СтрокаТовары.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
                Иначе
                    СтрокаТовары.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
                КонецЕсли;
                ЗаполнитьЗначенияСвойств(СтрокаТовары,СтрТовары);
            КонецЦикла;
            //Серегин М.В. 25.08.2015 10:47:40 Заполняет ТЧ Заказы после Товаров если есть строки в т.ч товары по этому заказу
            //КОСТЫЛЬ
            Если Объект.Товары.Количество()> 0 Тогда
                НайденыеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказРеализация",Стр.Заказ));
                Если НайденыеСтроки.Количество()>0 Тогда
                    Строка = Объект.Заказы.Добавить();
                    ЗаполнитьЗначенияСвойств(Строка,Стр);
                    Строка.СкладМагазина = Объект.СкладМагазина;
                КонецЕсли;
            КонецЕсли;
            //Серегин М.В. 25.08.2015 10:47:55 
            
        КонецЕсли;
	КонецЦикла;
	
	
	
	//// МАС - 18.01.2018 - № --->> 
	//Если Объект.НовыйМеханизм Тогда	
	//	Если НЕ Объект.Вскрытые И НЕ Объект.ШКПоМестам Тогда		
	//		Для каждого Стр Из Объект.Заказы Цикл		
	//			Стр.ЗаказПодтвержденКСборке = Истина;		
	//		КонецЦикла;
	//		Объект.СоставСформирован = Истина;			
	//	КонецЕсли;
	//	
	//	Записать();
	//КонецЕсли;
	//
	//
	//// <<--- МАС 
	
		
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОсновныеСерверМ(Контр,ВозвратМ,СкладМаг) Экспорт
	
	Объект.ИнтернетМагазин = Контр;
	Объект.СтатусВозврата = ВозвратМ;
	Объект.Дата = ТекущаяДата();
	Объект.СкладМагазина = СкладМаг;	
	
КонецПроцедуры


&НаСервере
Функция ПолучитьДанныеИзрегистра()
    ////Серегин М.В. 05.08.2015 17:01:35 старый запрос
    //Запрос = Новый Запрос;
    //Запрос.Текст = 
    //"ВЫБРАТЬ
    //|   СтатусыСкладскогоУчета.Заказ,
    //|   МАКСИМУМ(СтатусыСкладскогоУчета.Период) КАК Период,
    //|   МАКСИМУМ(ВЫБОР
    //|           КОГДА СтатусыСкладскогоУчета.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ЗаказНеВозвратный)
    //|               ТОГДА ИСТИНА
    //|           ИНАЧЕ ЛОЖЬ
    //|       КОНЕЦ) КАК НеВозвратныйЗаказ
    //|ПОМЕСТИТЬ ВТ_СрезПослдедних
    //|ИЗ
    //|   РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
    //|ГДЕ
    //|   СтатусыСкладскогоУчета.Заказ.ВладелецТовара = &Контрагент
    //|   И (СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.новаОтчетВодителя
    //|           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ЗакрытиеЗаказов
    //|           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ДанныеЗаказаСамовывоза
    //|           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.УстановкаСтатусовСкладскогоУчета
    //|           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
    //|           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.НаборнаяВедомостьДляВозврата)
    //|
    //|СГРУППИРОВАТЬ ПО
    //|   СтатусыСкладскогоУчета.Заказ
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ
    //|   СтатусыСкладскогоУчета.Заказ,
    //|   СтатусыСкладскогоУчета.СтатусСкладскогоУчета КАК ТекущийСтатус,
    //|   СтатусыСкладскогоУчета.ТипЗаказа
    //|ИЗ
    //|   РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
    //|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СрезПослдедних КАК ВТ_СрезПослдедних
    //|       ПО СтатусыСкладскогоУчета.Заказ = ВТ_СрезПослдедних.Заказ
    //|           И СтатусыСкладскогоУчета.Период = ВТ_СрезПослдедних.Период
    //|           И (НЕ ВТ_СрезПослдедних.НеВозвратныйЗаказ)
    //|ГДЕ
    //|   СтатусыСкладскогоУчета.Заказ.ВладелецТовара = &Контрагент
    //|   И СтатусыСкладскогоУчета.СтатусСкладскогоУчета В(&СтатусСкладскогоУчета)
    //|   И СтатусыСкладскогоУчета.ТипЗаказа = &ТипЗаказа
    //|   И ВТ_СрезПослдедних.Заказ В
    //|           (ВЫБРАТЬ
    //|               ВТ_СрезПослдедних.Заказ
    //|           ИЗ
    //|               ВТ_СрезПослдедних КАК ВТ_СрезПослдедних
    //|                   ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
    //|                   ПО
    //|                       ВТ_СрезПослдедних.Заказ.Номер = ЗагрузкаСТСДШтрихкоды.Штрихкод
    //|           ГДЕ
    //|               ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД = &ТипЗагрузкиТСД
    //|       
    //|           ОБЪЕДИНИТЬ ВСЕ
    //|       
    //|           ВЫБРАТЬ
    //|               ВТ_СрезПослдедних.Заказ
    //|           ИЗ
    //|               ВТ_СрезПослдедних КАК ВТ_СрезПослдедних
    //|                   ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
    //|                   ПО
    //|                       ВТ_СрезПослдедних.Заказ.НомерВнешнегоЗаказа = ЗагрузкаСТСДШтрихкоды.Штрихкод
    //|           ГДЕ
    //|               ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД = &ТипЗагрузкиТСД)";
    //Серегин М.В. 05.08.2015 17:01:41 новый
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	СтатусыСкладскогоУчета.Заказ КАК Заказ,
    |	МАКСИМУМ(СтатусыСкладскогоУчета.Период) КАК Период,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА СтатусыСкладскогоУчета.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ЗаказНеВозвратный)
    |				ТОГДА ИСТИНА
    |			ИНАЧЕ ЛОЖЬ
    |		КОНЕЦ) КАК НеВозвратныйЗаказ
    |ПОМЕСТИТЬ ВТ_СрезПослдедних
    |ИЗ
    |	РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
    |ГДЕ
    |	ИСТИНА
    |	И СтатусыСкладскогоУчета.Заказ.ВладелецТовара В(&Контрагент)
    |	И (СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.новаОтчетВодителя
    |			ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ЗакрытиеЗаказов
    |			ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ДанныеЗаказаСамовывоза
    |			ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.УстановкаСтатусовСкладскогоУчета
    |			ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
    |			ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.НаборнаяВедомостьДляВозврата
    |			ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ЗагрузкаСТСД)
    |
    |СГРУППИРОВАТЬ ПО
    |	СтатусыСкладскогоУчета.Заказ
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	СтатусыСкладскогоУчета.Заказ КАК Заказ,
    |	СтатусыСкладскогоУчета.СтатусСкладскогоУчета КАК ТекущийСтатус,
    |	СтатусыСкладскогоУчета.ТипЗаказа КАК ТипЗаказа,
    |	СтатусыСкладскогоУчета.Заказ.ВладелецТовара КАК Контрагент,
    |	ВТ_СрезПослдедних.Заказ.КоличествоМест КАК КоличествоМестТовара,
    |	ВЫБОР
    |		КОГДА ЗагрузкаСТСДШтрихкоды.Ссылка ЕСТЬ NULL
    |			ТОГДА ЛОЖЬ
    |		ИНАЧЕ ИСТИНА
    |	КОНЕЦ КАК ЕстьНаТСД
    |ИЗ
    |	РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СрезПослдедних КАК ВТ_СрезПослдедних
    |		ПО СтатусыСкладскогоУчета.Заказ = ВТ_СрезПослдедних.Заказ
    |			И СтатусыСкладскогоУчета.Период = ВТ_СрезПослдедних.Период
    |			И (НЕ ВТ_СрезПослдедних.НеВозвратныйЗаказ)
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
    |		ПО (СтатусыСкладскогоУчета.Заказ.Номер = ЗагрузкаСТСДШтрихкоды.Штрихкод
    |				ИЛИ СтатусыСкладскогоУчета.Заказ.НомерВнешнегоЗаказа = ЗагрузкаСТСДШтрихкоды.Штрихкод
    |				ИЛИ СтатусыСкладскогоУчета.Заказ = ЗагрузкаСТСДШтрихкоды.Заказ)
    |			И (ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД В (&ТипЗагрузкиТСД))
    |			И (ЗагрузкаСТСДШтрихкоды.Ссылка.Дата >= &ДатаНач)
    |ГДЕ
    |	ИСТИНА
    |	И СтатусыСкладскогоУчета.Заказ.ВладелецТовара В(&Контрагент)
    |	И СтатусыСкладскогоУчета.СтатусСкладскогоУчета В(&СтатусСкладскогоУчета)
    |	И СтатусыСкладскогоУчета.ТипЗаказа = &ТипЗаказа";
    
    ////Серегин М.В. 25.08.2015 18:35:49 
    //Запрос.УстановитьПараметр("Контрагент",Объект.ИнтернетМагазин);
    //Серегин М.В. 25.08.2015 18:36:05 
    Запрос.УстановитьПараметр("Контрагент",Объект.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент"));
    //+++++Серегин М.В. 29.09.2015 12:34:08 
    Если ЗначениеЗаполнено(Объект.СкладМагазина) И Объект.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент").Количество()=0 Тогда
        МассивНомеров = ПолучитьНомераЗаказовСоСкладами();
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"И СтатусыСкладскогоУчета.Заказ.ВладелецТовара В(&Контрагент)","И СтатусыСкладскогоУчета.Заказ.Номер В(&МассивНомеров)");
        Запрос.УстановитьПараметр("МассивНомеров",МассивНомеров);
    КонецЕсли;
    //-----Серегин М.В. 29.09.2015 12:34:11 
	
	// МАС - 23.10.2017 - № --->> 
	ТипыЗагрузки = Новый СписокЗначений;
    ТипыЗагрузки.Добавить(Перечисления.ТипыЗагрузкиТСД.ПриходWiFi);
    ТипыЗагрузки.Добавить(Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRoute);
	ТипыЗагрузки.Добавить(Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRouteСВесом);
    Запрос.УстановитьПараметр("ТипЗагрузкиТСД",ТипыЗагрузки);
		
	Запрос.УстановитьПараметр("ДатаНач", ДобавитьМесяц(НачалоДня(ТекущаяДата()),-3));
	// <<--- МАС  
    
	//Запрос.УстановитьПараметр("ТипЗагрузкиТСД",Перечисления.ТипыЗагрузкиТСД.ПриходWiFi);
    
    Если ЗначениеЗаполнено(Объект.СтатусВозврата) Тогда
        Запрос.УстановитьПараметр("СтатусСкладскогоУчета",Объект.СтатусВозврата);
    Иначе
        СписокСтатусСкладскогоУчета = Новый СписокЗначений;
        СписокСтатусСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.Возврат1);
        СписокСтатусСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.Возврат2);
        Запрос.УстановитьПараметр("СтатусСкладскогоУчета",СписокСтатусСкладскогоУчета);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект.ТипЗаказа) Тогда
        Запрос.УстановитьПараметр("ТипЗаказа",Объект.ТипЗаказа);
    Иначе 
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"И СтатусыСкладскогоУчета.ТипЗаказа = &ТипЗаказа","");
    КонецЕсли;
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ()


// Выборка из табличных частей ВозвратТоваровОтПокупателяТовары и РеализацияТоваровУслугТовары
&НаСервере
Функция ПолучитьДанныеТоварыВозврат1(РеализацияТоваровУслугСсылка,ЭтоВозврат,КонтрагентТопДеливери,СкладТопДеливери)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
        |	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
        |	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
        |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
        |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
        |	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент,
        |	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
        |	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
        |	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
        |	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
        |	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
        |	ПоступлениеТоваровУслугТовары.СерияНоменклатуры КАК СерияНоменклатуры,
        |	ПоступлениеТоваровУслугТовары.Склад КАК Склад,
        |	ПоступлениеТоваровУслугТовары.ПриходныйОрдер КАК ПриходныйОрдер,
        |	ПоступлениеТоваровУслугТовары.КлючСвязи КАК КлючСвязи,
        |	ПоступлениеТоваровУслугТовары.Ссылка.НомерВходящегоДокументаЭлектронногоОбмена КАК ВнешнийНомерЗаказа,
        |	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК ДатаДоставки,
        |	ПоступлениеТоваровУслугТовары.КоличествоМест КАК КоличествоМест,
        |	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументПоступления,
        |	ВЫБОР
        |		КОГДА ПоступлениеТоваровУслугТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
        |				И ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &ТопДеливери
        |			ТОГДА &СкладТопДеливери
        |		ИНАЧЕ ПоступлениеТоваровУслугТовары.СкладМагазина
        |	КОНЕЦ КАК СкладМагазина,
        |	ПоступлениеТоваровУслугТовары.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры
        |ПОМЕСТИТЬ ВТ_Итог
        |ИЗ
        |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
        |ГДЕ
        |	ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
        |	И НЕ &ЭтоВозврат
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	ПоступлениеТоваровУслугПодарочныеПозиции.НомерСтроки,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Количество,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.ЕдиницаИзмерения,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.ЕдиницаИзмеренияМест,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Коэффициент,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Цена,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Сумма,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.СтавкаНДС,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.СуммаНДС,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.ХарактеристикаНоменклатуры,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.СерияНоменклатуры,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Склад,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.ПриходныйОрдер,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.КлючСвязи,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.НомерВходящегоДокументаЭлектронногоОбмена,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Дата,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.КоличествоМест,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка,
        |	ВЫБОР
        |		КОГДА ПоступлениеТоваровУслугПодарочныеПозиции.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
        |				И ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Контрагент = &ТопДеливери
        |			ТОГДА &СкладТопДеливери
        |		ИНАЧЕ ПоступлениеТоваровУслугПодарочныеПозиции.СкладМагазина
        |	КОНЕЦ,
        |	ПоступлениеТоваровУслугПодарочныеПозиции.ШтрихкодНоменклатуры
        |ИЗ
        |	Документ.ПоступлениеТоваровУслуг.ПодарочныеПозиции КАК ПоступлениеТоваровУслугПодарочныеПозиции
        |ГДЕ
        |	ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер
        |	И НЕ &ЭтоВозврат
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
        |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
        |	ВозвратТоваровОтПокупателяТовары.Количество,
        |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
        |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмеренияМест,
        |	ВозвратТоваровОтПокупателяТовары.Коэффициент,
        |	ВозвратТоваровОтПокупателяТовары.Цена,
        |	ВозвратТоваровОтПокупателяТовары.Сумма,
        |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
        |	ВозвратТоваровОтПокупателяТовары.СуммаНДС,
        |	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры,
        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры,
        |	ВозвратТоваровОтПокупателяТовары.Склад,
        |	ВозвратТоваровОтПокупателяТовары.ПриходныйОрдер,
        |	ВозвратТоваровОтПокупателяТовары.КлючСвязи,
        |	ВозвратТоваровОтПокупателяТовары.Ссылка.НомерВходящегоДокументаЭлектронногоОбмена,
        |	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата,
        |	ВозвратТоваровОтПокупателяТовары.КоличествоМест,
        |	ПоступлениеТоваровУслуг.Ссылка,
        |	ВЫБОР
        |		КОГДА ВозвратТоваровОтПокупателяТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
        |				И ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент = &ТопДеливери
        |			ТОГДА &СкладТопДеливери
        |		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СкладМагазина
        |	КОНЕЦ,
        |	ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры
        |ИЗ
        |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
        |		ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = ПоступлениеТоваровУслуг.Номер
        |ГДЕ
        |	ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = &Номер
        |	И &ЭтоВозврат
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТ_Итог.НомерСтроки КАК НомерСтроки,
        |	ВТ_Итог.Номенклатура КАК Номенклатура,
        |	ВТ_Итог.Количество КАК Количество,
        |	ВТ_Итог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
        |	ВТ_Итог.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
        |	ВТ_Итог.Коэффициент КАК Коэффициент,
        |	ВТ_Итог.Цена КАК Цена,
        |	ВТ_Итог.Сумма КАК Сумма,
        |	ВТ_Итог.СтавкаНДС КАК СтавкаНДС,
        |	ВТ_Итог.СуммаНДС КАК СуммаНДС,
        |	ВТ_Итог.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
        |	ВТ_Итог.СерияНоменклатуры КАК СерияНоменклатуры,
        |	ВТ_Итог.Склад КАК Склад,
        |	ВТ_Итог.ПриходныйОрдер КАК ПриходныйОрдер,
        |	ВТ_Итог.КлючСвязи КАК КлючСвязи,
        |	ВТ_Итог.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
        |	ВТ_Итог.ДатаДоставки КАК ДатаДоставки,
        |	ВТ_Итог.КоличествоМест КАК КоличествоМест,
        |	ВТ_Итог.ДокументПоступления КАК ДокументПоступления,
        |	ВТ_Итог.СкладМагазина КАК СкладМагазина,
        |	МАКСИМУМ(ЗакрытиеЗаказовЗаказы.Ссылка) КАК ЗакрытиеЗаказов,
        |	ВТ_Итог.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры
        |ИЗ
        |	ВТ_Итог КАК ВТ_Итог
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
        |		ПО (ЗакрытиеЗаказовЗаказы.Закрыть
        |				ИЛИ ЗакрытиеЗаказовЗаказы.Отклонить)
        |			И (&Номер = ВЫРАЗИТЬ(ЗакрытиеЗаказовЗаказы.Реализация КАК Документ.РеализацияТоваровУслуг).Номер)
        |ГДЕ
        |	ИСТИНА
        |	И ВТ_Итог.СкладМагазина = &СкладМагазина
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_Итог.НомерСтроки,
        |	ВТ_Итог.Номенклатура,
        |	ВТ_Итог.Количество,
        |	ВТ_Итог.ЕдиницаИзмерения,
        |	ВТ_Итог.ЕдиницаИзмеренияМест,
        |	ВТ_Итог.Коэффициент,
        |	ВТ_Итог.Цена,
        |	ВТ_Итог.Сумма,
        |	ВТ_Итог.СтавкаНДС,
        |	ВТ_Итог.СуммаНДС,
        |	ВТ_Итог.ХарактеристикаНоменклатуры,
        |	ВТ_Итог.СерияНоменклатуры,
        |	ВТ_Итог.Склад,
        |	ВТ_Итог.ПриходныйОрдер,
        |	ВТ_Итог.КлючСвязи,
        |	ВТ_Итог.ВнешнийНомерЗаказа,
        |	ВТ_Итог.ДатаДоставки,
        |	ВТ_Итог.КоличествоМест,
        |	ВТ_Итог.ДокументПоступления,
        |	ВТ_Итог.СкладМагазина,
        |	ВТ_Итог.ШтрихкодНоменклатуры";
    
    Запрос.УстановитьПараметр("Номер", РеализацияТоваровУслугСсылка.Номер);
    Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
    Запрос.УстановитьПараметр("СкладМагазина", Объект.СкладМагазина);
    Запрос.УстановитьПараметр("ТопДеливери",КонтрагентТопДеливери);
    Запрос.УстановитьПараметр("СкладТопДеливери",СкладТопДеливери);
    
    //Серегин М.В. 25.08.2015 10:11:58 если не заполнен склад магазин
    Если НЕ ЗначениеЗаполнено(Объект.СкладМагазина) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ВТ_Итог.СкладМагазина = &СкладМагазина","");
    КонецЕсли;
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Возврат РезультатЗапроса;
КонецФункции // ()


&НаСервере
Функция ПолучитьДанныеТоварыВозврат2(РеализацияТоваровУслугСсылка,ЭтоВозврат,КонтрагентТопДеливери,СкладТопДеливери)
    
    Запрос = Новый Запрос;
	//Асеев 02.09.2020 (Задача № 4189)>>>
	//- в запросе КодМаркировки брать из данных регистра
	//- связывание с Документ.ПоступлениеТоваровУслуг.Товары надо выполнлять после свертки ТЧ Товары ПТУ
	//- связывание с Документ.ВозвратТоваровОтПокупателя.Товары надо выполнлять после свертки ТЧ Товары Возврата
	//- во все связи по Номенклатуре с ТЧ ПТУ добавить связь по КодуМаркировки
	//- во все связи по Номенклатуре с ТЧ Возврата связь по КодуМаркировки пока не добавляется
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ДанныеЧастичныхЗаказовОстатки.Заказ КАК ЗаказРеализация,
	//|	ДанныеЧастичныхЗаказовОстатки.Номенклатура КАК Номенклатура,
	//|	ДанныеЧастичныхЗаказовОстатки.СуммаОстаток КАК Сумма,
	//|	ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток КАК Количество,
	//|	ПоступлениеТоваровУслугТовары.КоличествоМест КАК КоличествоМест,
	//|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
	//|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	//|	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент,
	//|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	//|	ПоступлениеТоваровУслугТовары.СуммаНДС / ПоступлениеТоваровУслугТовары.Количество * ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток КАК СуммаНДС,
	//|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	//|	ПоступлениеТоваровУслугТовары.Склад КАК Склад,
	//|	ПоступлениеТоваровУслугТовары.КлючСвязи КАК КлючСвязи,
	//|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК ДатаДоставки,
	//|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументПоступления,
	//|	ВЫБОР
	//|		КОГДА ПоступлениеТоваровУслугТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//|				И ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &ТопДеливери
	//|			ТОГДА &СкладТопДеливери
	//|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СкладМагазина
	//|	КОНЕЦ КАК СкладМагазина,
	//|	ПоступлениеТоваровУслугТовары.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры
	//|ПОМЕСТИТЬ ВТ_Итог
	//|ИЗ
	//|	РегистрНакопления.ДанныеЧастичныхЗаказов.Остатки(&Период, Заказ = &Заказ) КАК ДанныеЧастичныхЗаказовОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	//|		ПО ДанныеЧастичныхЗаказовОстатки.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	//|			И ДанныеЧастичныхЗаказовОстатки.Заказ.Номер = ПоступлениеТоваровУслугТовары.Ссылка.Номер
	//|ГДЕ
	//|	НЕ &ЭтоВозврат
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ДанныеЧастичныхЗаказовОстатки.Заказ,
	//|	ДанныеЧастичныхЗаказовОстатки.Номенклатура,
	//|	ДанныеЧастичныхЗаказовОстатки.СуммаОстаток,
	//|	ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток,
	//|	ВозвратТоваровОтПокупателяТовары.КоличествоМест,
	//|	ВозвратТоваровОтПокупателяТовары.Цена,
	//|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
	//|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмеренияМест,
	//|	ВозвратТоваровОтПокупателяТовары.Коэффициент,
	//|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	//|	ВозвратТоваровОтПокупателяТовары.СуммаНДС / ВозвратТоваровОтПокупателяТовары.Количество * ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток,
	//|	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры,
	//|	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры,
	//|	ВозвратТоваровОтПокупателяТовары.Склад,
	//|	ВозвратТоваровОтПокупателяТовары.КлючСвязи,
	//|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата,
	//|	ПоступлениеТоваровУслуг.Ссылка,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровОтПокупателяТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//|				И ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент = &ТопДеливери
	//|			ТОГДА &СкладТопДеливери
	//|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СкладМагазина
	//|	КОНЕЦ,
	//|	ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры
	//|ИЗ
	//|	РегистрНакопления.ДанныеЧастичныхЗаказов.Остатки(&Период, Заказ = &Заказ) КАК ДанныеЧастичныхЗаказовОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|			ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = ПоступлениеТоваровУслуг.Номер
	//|		ПО ДанныеЧастичныхЗаказовОстатки.Номенклатура = ВозвратТоваровОтПокупателяТовары.Номенклатура
	//|			И ДанныеЧастичныхЗаказовОстатки.Заказ.Номер = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
	//|ГДЕ
	//|	&ЭтоВозврат
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Итог.ЗаказРеализация КАК ЗаказРеализация,
	//|	ВТ_Итог.Номенклатура КАК Номенклатура,
	//|	ВТ_Итог.Сумма КАК Сумма,
	//|	ВТ_Итог.Количество КАК Количество,
	//|	ВТ_Итог.КоличествоМест КАК КоличествоМест,
	//|	ВТ_Итог.Цена КАК Цена,
	//|	ВТ_Итог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	ВТ_Итог.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	//|	ВТ_Итог.Коэффициент КАК Коэффициент,
	//|	ВТ_Итог.СтавкаНДС КАК СтавкаНДС,
	//|	ВТ_Итог.СуммаНДС КАК СуммаНДС,
	//|	ВТ_Итог.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|	ВТ_Итог.СерияНоменклатуры КАК СерияНоменклатуры,
	//|	ВТ_Итог.Склад КАК Склад,
	//|	ВТ_Итог.КлючСвязи КАК КлючСвязи,
	//|	ВТ_Итог.ДатаДоставки КАК ДатаДоставки,
	//|	ВТ_Итог.ДокументПоступления КАК ДокументПоступления,
	//|	ВТ_Итог.СкладМагазина КАК СкладМагазина,
	//|	МАКСИМУМ(ЗакрытиеЗаказовЗаказы.Ссылка) КАК ЗакрытиеЗаказов,
	//|	ВТ_Итог.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры
	//|ИЗ
	//|	ВТ_Итог КАК ВТ_Итог
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	//|		ПО (ЗакрытиеЗаказовЗаказы.Закрыть
	//|				ИЛИ ЗакрытиеЗаказовЗаказы.Отклонить)
	//|			И (ВТ_Итог.ЗаказРеализация.Ссылка = ВЫРАЗИТЬ(ЗакрытиеЗаказовЗаказы.Реализация КАК Документ.РеализацияТоваровУслуг).Ссылка)
	//|ГДЕ
	//|	ИСТИНА
	//|	И ВТ_Итог.СкладМагазина = &СкладМагазина
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_Итог.ЗаказРеализация,
	//|	ВТ_Итог.Номенклатура,
	//|	ВТ_Итог.ЕдиницаИзмерения,
	//|	ВТ_Итог.ЕдиницаИзмеренияМест,
	//|	ВТ_Итог.СтавкаНДС,
	//|	ВТ_Итог.ХарактеристикаНоменклатуры,
	//|	ВТ_Итог.СерияНоменклатуры,
	//|	ВТ_Итог.Склад,
	//|	ВТ_Итог.ДатаДоставки,
	//|	ВТ_Итог.ДокументПоступления,
	//|	ВТ_Итог.СкладМагазина,
	//|	ВТ_Итог.Сумма,
	//|	ВТ_Итог.Количество,
	//|	ВТ_Итог.КоличествоМест,
	//|	ВТ_Итог.Цена,
	//|	ВТ_Итог.Коэффициент,
	//|	ВТ_Итог.СуммаНДС,
	//|	ВТ_Итог.КлючСвязи,
	//|	ВТ_Итог.ШтрихкодНоменклатуры";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЧастичныхЗаказовОстатки.Заказ КАК Заказ,
	|	ДанныеЧастичныхЗаказовОстатки.Номенклатура КАК Номенклатура,
	|	ДанныеЧастичныхЗаказовОстатки.КодМаркировки КАК КодМаркировки,
	|	ДанныеЧастичныхЗаказовОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ДанныеЧастичныхЗаказовОстатки
	|ИЗ
	|	РегистрНакопления.ДанныеЧастичныхЗаказов.Остатки(&Период, Заказ = &Заказ) КАК ДанныеЧастичныхЗаказовОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
	|	СУММА(ПоступлениеТоваровУслугТовары.КоличествоМест) КАК КоличествоМест,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Цена) КАК Цена,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Коэффициент) КАК Коэффициент,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(ПоступлениеТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.СерияНоменклатуры) КАК СерияНоменклатуры,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Склад) КАК Склад,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.КлючСвязи) КАК КлючСвязи,
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаДоставки,
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументПоступления,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|				И ПоступлениеТоваровУслуг.Контрагент = &ТопДеливери
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СкладМагазина
	|	КОНЕЦ КАК СкладМагазина,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.ШтрихкодНоменклатуры) КАК ШтрихкодНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ ПоступлениеТоваровУслугТовары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО (ПоступлениеТоваровУслуг.Номер = &Номер)
	|			И ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслуг.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЧастичныхЗаказовОстатки КАК ДанныеЧастичныхЗаказовОстатки
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ДанныеЧастичныхЗаказовОстатки.Номенклатура
	|			И ПоступлениеТоваровУслугТовары.КодМаркировки = ДанныеЧастичныхЗаказовОстатки.КодМаркировки
	|ГДЕ
	|	НЕ &ЭтоВозврат
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КодМаркировки,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|				И ПоступлениеТоваровУслуг.Контрагент = &ТопДеливери
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СкладМагазина
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.КоличествоМест) КАК КоличествоМест,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.Цена) КАК Цена,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.Коэффициент) КАК Коэффициент,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры) КАК СерияНоменклатуры,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.Склад) КАК Склад,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.КлючСвязи) КАК КлючСвязи,
	|	ВозвратТоваровОтПокупателя.Дата КАК ДатаДоставки,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоступления,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|				И ВозвратТоваровОтПокупателя.Контрагент = &ТопДеливери
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СкладМагазина
	|	КОНЕЦ КАК СкладМагазина,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры) КАК ШтрихкодНоменклатуры,
	|	МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.КодМаркировки) КАК КодМаркировки
	|ПОМЕСТИТЬ ВозвратТоваровОтПокупателяТовары
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ПО (ПоступлениеТоваровУслуг.Номер = &Номер)
	|		ПО (ВозвратТоваровОтПокупателя.Номер = &Номер)
	|			И ВозвратТоваровОтПокупателяТовары.Ссылка = ВозвратТоваровОтПокупателя.Ссылка
	|ГДЕ
	|	&ЭтоВозврат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|				И ВозвратТоваровОтПокупателя.Контрагент = &ТопДеливери
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СкладМагазина
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЧастичныхЗаказовОстатки.Заказ КАК ЗаказРеализация,
	|	ДанныеЧастичныхЗаказовОстатки.Номенклатура КАК Номенклатура,
	|	ДанныеЧастичныхЗаказовОстатки.КодМаркировки КАК КодМаркировки,
	|	ДанныеЧастичныхЗаказовОстатки.СуммаОстаток КАК Сумма,
	|	ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Количество, 0) <> 0
	|			ТОГДА ПоступлениеТоваровУслугТовары.КоличествоМест / ПоступлениеТоваровУслугТовары.Количество * ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.КоличествоМест
	|	КОНЕЦ КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Количество, 0) <> 0
	|			ТОГДА ПоступлениеТоваровУслугТовары.СуммаНДС / ПоступлениеТоваровУслугТовары.Количество * ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.Склад КАК Склад,
	|	ПоступлениеТоваровУслугТовары.КлючСвязи КАК КлючСвязи,
	|	ПоступлениеТоваровУслугТовары.ДатаДоставки КАК ДатаДоставки,
	|	ПоступлениеТоваровУслугТовары.ДокументПоступления КАК ДокументПоступления,
	|	ПоступлениеТоваровУслугТовары.СкладМагазина КАК СкладМагазина,
	|	ПоступлениеТоваровУслугТовары.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ДанныеЧастичныхЗаказовОстатки КАК ДанныеЧастичныхЗаказовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоступлениеТоваровУслугТовары КАК ПоступлениеТоваровУслугТовары
	|		ПО ДанныеЧастичныхЗаказовОстатки.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ДанныеЧастичныхЗаказовОстатки.КодМаркировки = ПоступлениеТоваровУслугТовары.КодМаркировки
	|ГДЕ
	|	НЕ &ЭтоВозврат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЧастичныхЗаказовОстатки_Возвраты.Заказ,
	|	ДанныеЧастичныхЗаказовОстатки_Возвраты.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.КодМаркировки,
	|	ДанныеЧастичныхЗаказовОстатки_Возвраты.СуммаОстаток,
	|	ДанныеЧастичныхЗаказовОстатки_Возвраты.КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Количество, 0) <> 0
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.КоличествоМест / ВозвратТоваровОтПокупателяТовары.Количество * ДанныеЧастичныхЗаказовОстатки_Возвраты.КоличествоОстаток
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.КоличествоМест
	|	КОНЕЦ,
	|	ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
	|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмеренияМест,
	|	ВозвратТоваровОтПокупателяТовары.Коэффициент,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Количество, 0) <> 0
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.СуммаНДС / ВозвратТоваровОтПокупателяТовары.Количество * ДанныеЧастичныхЗаказовОстатки_Возвраты.КоличествоОстаток
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СуммаНДС
	|	КОНЕЦ,
	|	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры,
	|	ВозвратТоваровОтПокупателяТовары.Склад,
	|	ВозвратТоваровОтПокупателяТовары.КлючСвязи,
	|	ВозвратТоваровОтПокупателяТовары.ДатаДоставки,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПоступления,
	|	ВозвратТоваровОтПокупателяТовары.СкладМагазина,
	|	ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеЧастичныхЗаказовОстатки.Заказ КАК Заказ,
	|		ДанныеЧастичныхЗаказовОстатки.Номенклатура КАК Номенклатура,
	|		СУММА(ДанныеЧастичныхЗаказовОстатки.СуммаОстаток) КАК СуммаОстаток,
	|		СУММА(ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		ДанныеЧастичныхЗаказовОстатки КАК ДанныеЧастичныхЗаказовОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеЧастичныхЗаказовОстатки.Заказ,
	|		ДанныеЧастичныхЗаказовОстатки.Номенклатура) КАК ДанныеЧастичныхЗаказовОстатки_Возвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВозвратТоваровОтПокупателяТовары КАК ВозвратТоваровОтПокупателяТовары
	|		ПО ДанныеЧастичныхЗаказовОстатки_Возвраты.Номенклатура = ВозвратТоваровОтПокупателяТовары.Номенклатура
	|ГДЕ
	|	&ЭтоВозврат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.ЗаказРеализация КАК ЗаказРеализация,
	|	ВТ_Итог.Номенклатура КАК Номенклатура,
	|	ВТ_Итог.Сумма КАК Сумма,
	|	ВТ_Итог.Количество КАК Количество,
	|	ВТ_Итог.КоличествоМест КАК КоличествоМест,
	|	ВТ_Итог.Цена КАК Цена,
	|	ВТ_Итог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Итог.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	ВТ_Итог.Коэффициент КАК Коэффициент,
	|	ВТ_Итог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Итог.СуммаНДС КАК СуммаНДС,
	|	ВТ_Итог.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Итог.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВТ_Итог.Склад КАК Склад,
	|	ВТ_Итог.КлючСвязи КАК КлючСвязи,
	|	ВТ_Итог.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_Итог.ДокументПоступления КАК ДокументПоступления,
	|	ВТ_Итог.СкладМагазина КАК СкладМагазина,
	|	МАКСИМУМ(ЗакрытиеЗаказовЗаказы.Ссылка) КАК ЗакрытиеЗаказов,
	|	ВТ_Итог.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры,
	|	ВТ_Итог.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	|		ПО (ЗакрытиеЗаказовЗаказы.Закрыть
	|				ИЛИ ЗакрытиеЗаказовЗаказы.Отклонить)
	|			И (ВТ_Итог.ЗаказРеализация = ЗакрытиеЗаказовЗаказы.Реализация)
	|ГДЕ
	|	ИСТИНА
	|	И ВТ_Итог.СкладМагазина = &СкладМагазина
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Итог.ЗаказРеализация,
	|	ВТ_Итог.Номенклатура,
	|	ВТ_Итог.ЕдиницаИзмерения,
	|	ВТ_Итог.ЕдиницаИзмеренияМест,
	|	ВТ_Итог.СтавкаНДС,
	|	ВТ_Итог.ХарактеристикаНоменклатуры,
	|	ВТ_Итог.СерияНоменклатуры,
	|	ВТ_Итог.Склад,
	|	ВТ_Итог.ДатаДоставки,
	|	ВТ_Итог.ДокументПоступления,
	|	ВТ_Итог.СкладМагазина,
	|	ВТ_Итог.Сумма,
	|	ВТ_Итог.Количество,
	|	ВТ_Итог.КоличествоМест,
	|	ВТ_Итог.Цена,
	|	ВТ_Итог.Коэффициент,
	|	ВТ_Итог.СуммаНДС,
	|	ВТ_Итог.КлючСвязи,
	|	ВТ_Итог.ШтрихкодНоменклатуры,
	|	ВТ_Итог.КодМаркировки";
	Запрос.УстановитьПараметр("Номер", ОбщегоНазначения.ПолучитьРеквизитОбъекта(РеализацияТоваровУслугСсылка, "Номер"));
	//Асеев 02.09.2020 (Задача № 4189)<<<
	
    Запрос.УстановитьПараметр("Период", ТекущаяДата());
    Запрос.УстановитьПараметр("Заказ", РеализацияТоваровУслугСсылка);
    Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
    Запрос.УстановитьПараметр("СкладМагазина", Объект.СкладМагазина);
    Запрос.УстановитьПараметр("ТопДеливери",КонтрагентТопДеливери);
    Запрос.УстановитьПараметр("СкладТопДеливери",СкладТопДеливери);
    
    //Серегин М.В. 25.08.2015 10:11:58 если не заполнен склад магазин
    Если НЕ ЗначениеЗаполнено(Объект.СкладМагазина) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ВТ_Итог.СкладМагазина = &СкладМагазина","");
    КонецЕсли;
    
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    //+++++Серегин М.В. 17.12.2015 10:51:13 новый костыль
    //Причина:
    //    860134 
    //Документ отчет водителя сделал движение Возврат2 (т.к. отказ с заездом у нас это Возврат2), при заполнении Наборной ведомости алгоритм смотрит на 
    //Возврат2 (это частичка) и ищет в РН ДанныеЧастичныхЗаказов, там ничего нет соответственно в наборную ведомость ничего не попадает.
    //А идет по алгоритму частички, потому что документ ПриходДС сделал движения со статусом ОтказКлиентаБезЗаезда (был бы изначальный ОтказКлиентаСЗаездом, 
    //все заполнилось бы, т.к. пошло бы по алгоритму полного возврата). Поменяли статус видимо руками.
    //Поэтому проверяем результат на пустоту и если он пустой, тогда делаем запрос по полному возврату.
    Если РезультатЗапроса.Количество()> 0 Тогда
        Возврат РезультатЗапроса;
    Иначе
        Возврат ПолучитьДанныеТоварыВозврат1(РеализацияТоваровУслугСсылка,ЭтоВозврат,КонтрагентТопДеливери,СкладТопДеливери);
    КонецЕсли;
    //-----Серегин М.В. 17.12.2015 10:52:42 
    
КонецФункции // ()


&НаСервере
Функция ПолучитьДанныеТоварыВозвратОбмен(РеализацияТоваровУслугСсылка,КонтрагентТопДеливери,СкладТопДеливери)
    
    Запрос = Новый Запрос;
	//Асеев 02.09.2020 (Задача № 4189)>>>
	//- в запросе КодМаркировки брать из данных регистра
	//- связывание с Документ.ПоступлениеТоваровУслуг.Товары надо выполнлять после свертки ТЧ Товары ПТУ
	//- во все связи по Номенклатуре с ТЧ ПТУ добавить связь по КодуМаркировки
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	РеализацияТоваровУслуг.Ссылка КАК ЗаказРеализация,
	//|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	//|	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
	//|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
	//|	ВозвратТоваровОтПокупателяТовары.КоличествоМест КАК КоличествоМест,
	//|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	//|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	//|	ВозвратТоваровОтПокупателяТовары.Коэффициент КАК Коэффициент,
	//|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	//|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
	//|	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	//|	ВозвратТоваровОтПокупателяТовары.Склад КАК Склад,
	//|	ВозвратТоваровОтПокупателяТовары.КлючСвязи КАК КлючСвязи,
	//|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК ДатаДоставки,
	//|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоступления,
	//|	ВозвратТоваровОтПокупателяТовары.Ссылка.НомерВнешнегоЗаказа КАК ВнешнийНомерЗаказа,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровОтПокупателяТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//|				И ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент = &ТопДеливери
	//|			ТОГДА &СкладТопДеливери
	//|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СкладМагазина
	//|	КОНЕЦ КАК СкладМагазина,
	//|	ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры
	//|ПОМЕСТИТЬ ВТ_Итог
	//|ИЗ
	//|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = ПоступлениеТоваровУслуг.Номер
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = РеализацияТоваровУслуг.Номер
	//|ГДЕ
	//|	ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = &Номер
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ДанныеЧастичныхЗаказовОстатки.Заказ.Ссылка,
	//|	ДанныеЧастичныхЗаказовОстатки.Номенклатура,
	//|	ДанныеЧастичныхЗаказовОстатки.СуммаОстаток,
	//|	ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток,
	//|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	//|	ПоступлениеТоваровУслугТовары.Цена,
	//|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	//|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
	//|	ПоступлениеТоваровУслугТовары.Коэффициент,
	//|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	//|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	//|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
	//|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
	//|	ПоступлениеТоваровУслугТовары.Склад,
	//|	ПоступлениеТоваровУслугТовары.КлючСвязи,
	//|	ДанныеЧастичныхЗаказовОстатки.Заказ.Дата,
	//|	ПоступлениеТоваровУслуг.Ссылка,
	//|	ДанныеЧастичныхЗаказовОстатки.Заказ.НомерВнешнегоЗаказа,
	//|	ВЫБОР
	//|		КОГДА ПоступлениеТоваровУслугТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//|				И ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &ТопДеливери
	//|			ТОГДА &СкладТопДеливери
	//|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СкладМагазина
	//|	КОНЕЦ,
	//|	ПоступлениеТоваровУслугТовары.ШтрихкодНоменклатуры
	//|ИЗ
	//|	РегистрНакопления.ДанныеЧастичныхЗаказов.Остатки(&Период, ВЫРАЗИТЬ(Заказ КАК Документ.РеализацияТоваровУслуг).Номер = &Номер) КАК ДанныеЧастичныхЗаказовОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	//|		ПО ДанныеЧастичныхЗаказовОстатки.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	//|			И (ВЫРАЗИТЬ(ДанныеЧастичныхЗаказовОстатки.Заказ КАК Документ.РеализацияТоваровУслуг).Номер = ПоступлениеТоваровУслугТовары.Ссылка.Номер)
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|		ПО (ВЫРАЗИТЬ(ДанныеЧастичныхЗаказовОстатки.Заказ КАК Документ.РеализацияТоваровУслуг).Номер = ПоступлениеТоваровУслуг.Номер)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Итог.ЗаказРеализация КАК ЗаказРеализация,
	//|	ВТ_Итог.Номенклатура КАК Номенклатура,
	//|	ВТ_Итог.Сумма КАК Сумма,
	//|	ВТ_Итог.Количество КАК Количество,
	//|	ВТ_Итог.КоличествоМест КАК КоличествоМест,
	//|	ВТ_Итог.Цена КАК Цена,
	//|	ВТ_Итог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	ВТ_Итог.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	//|	ВТ_Итог.Коэффициент КАК Коэффициент,
	//|	ВТ_Итог.СтавкаНДС КАК СтавкаНДС,
	//|	ВТ_Итог.СуммаНДС КАК СуммаНДС,
	//|	ВТ_Итог.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|	ВТ_Итог.СерияНоменклатуры КАК СерияНоменклатуры,
	//|	ВТ_Итог.Склад КАК Склад,
	//|	ВТ_Итог.КлючСвязи КАК КлючСвязи,
	//|	ВТ_Итог.ДатаДоставки КАК ДатаДоставки,
	//|	ВТ_Итог.ДокументПоступления КАК ДокументПоступления,
	//|	ВТ_Итог.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	//|	ВТ_Итог.СкладМагазина КАК СкладМагазина,
	//|	МАКСИМУМ(ЗакрытиеЗаказовЗаказы.Ссылка) КАК ЗакрытиеЗаказов,
	//|	ВТ_Итог.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры
	//|ИЗ
	//|	ВТ_Итог КАК ВТ_Итог
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	//|		ПО (ЗакрытиеЗаказовЗаказы.Закрыть
	//|				ИЛИ ЗакрытиеЗаказовЗаказы.Отклонить)
	//|			И (ВТ_Итог.ЗаказРеализация.Ссылка = ВЫРАЗИТЬ(ЗакрытиеЗаказовЗаказы.Реализация КАК Документ.РеализацияТоваровУслуг).Ссылка)
	//|ГДЕ
	//|	ИСТИНА
	//|	И ВТ_Итог.СкладМагазина = &СкладМагазина
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_Итог.ЗаказРеализация,
	//|	ВТ_Итог.Номенклатура,
	//|	ВТ_Итог.ЕдиницаИзмерения,
	//|	ВТ_Итог.ЕдиницаИзмеренияМест,
	//|	ВТ_Итог.СтавкаНДС,
	//|	ВТ_Итог.ХарактеристикаНоменклатуры,
	//|	ВТ_Итог.СерияНоменклатуры,
	//|	ВТ_Итог.Склад,
	//|	ВТ_Итог.ДатаДоставки,
	//|	ВТ_Итог.ДокументПоступления,
	//|	ВТ_Итог.СкладМагазина,
	//|	ВТ_Итог.ВнешнийНомерЗаказа,
	//|	ВТ_Итог.Сумма,
	//|	ВТ_Итог.Количество,
	//|	ВТ_Итог.КоличествоМест,
	//|	ВТ_Итог.Цена,
	//|	ВТ_Итог.Коэффициент,
	//|	ВТ_Итог.СуммаНДС,
	//|	ВТ_Итог.КлючСвязи,
	//|	ВТ_Итог.ШтрихкодНоменклатуры";
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЧастичныхЗаказовОстатки.Заказ КАК Заказ,
	|	ДанныеЧастичныхЗаказовОстатки.Номенклатура КАК Номенклатура,
	|	ДанныеЧастичныхЗаказовОстатки.КодМаркировки КАК КодМаркировки,
	|	ДанныеЧастичныхЗаказовОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ДанныеЧастичныхЗаказовОстатки
	|ИЗ
	|	РегистрНакопления.ДанныеЧастичныхЗаказов.Остатки(&Период, Заказ = &Заказ) КАК ДанныеЧастичныхЗаказовОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
	|	СУММА(ПоступлениеТоваровУслугТовары.КоличествоМест) КАК КоличествоМест,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Цена) КАК Цена,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Коэффициент) КАК Коэффициент,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(ПоступлениеТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.СерияНоменклатуры) КАК СерияНоменклатуры,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Склад) КАК Склад,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.КлючСвязи) КАК КлючСвязи,
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаДоставки,
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументПоступления,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|				И ПоступлениеТоваровУслуг.Контрагент = &ТопДеливери
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СкладМагазина
	|	КОНЕЦ КАК СкладМагазина,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.ШтрихкодНоменклатуры) КАК ШтрихкодНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ ПоступлениеТоваровУслугТовары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО (ПоступлениеТоваровУслуг.Номер = &Номер)
	|			И ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслуг.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЧастичныхЗаказовОстатки КАК ДанныеЧастичныхЗаказовОстатки
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ДанныеЧастичныхЗаказовОстатки.Номенклатура
	|			И ПоступлениеТоваровУслугТовары.КодМаркировки = ДанныеЧастичныхЗаказовОстатки.КодМаркировки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КодМаркировки,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|				И ПоступлениеТоваровУслуг.Контрагент = &ТопДеливери
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СкладМагазина
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Заказ КАК ЗаказРеализация,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.КодМаркировки КАК КодМаркировки,
	|	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
	|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
	|	ВозвратТоваровОтПокупателяТовары.КоличествоМест КАК КоличествоМест,
	|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	ВозвратТоваровОтПокупателяТовары.Коэффициент КАК Коэффициент,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВозвратТоваровОтПокупателяТовары.Склад КАК Склад,
	|	ВозвратТоваровОтПокупателяТовары.КлючСвязи КАК КлючСвязи,
	|	ВозвратТоваровОтПокупателя.Дата КАК ДатаДоставки,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоступления,
	|	ВозвратТоваровОтПокупателя.НомерВнешнегоЗаказа КАК ВнешнийНомерЗаказа,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|				И ВозвратТоваровОтПокупателя.Контрагент = &ТопДеливери
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СкладМагазина
	|	КОНЕЦ КАК СкладМагазина,
	|	ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО (ПоступлениеТоваровУслуг.Номер = &Номер)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО (ВозвратТоваровОтПокупателя.Номер = &Номер)
	|			И ВозвратТоваровОтПокупателяТовары.Ссылка = ВозвратТоваровОтПокупателя.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЧастичныхЗаказовОстатки.Заказ,
	|	ДанныеЧастичныхЗаказовОстатки.Номенклатура,
	|	ДанныеЧастичныхЗаказовОстатки.КодМаркировки,
	|	ДанныеЧастичныхЗаказовОстатки.СуммаОстаток,
	|	ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Количество, 0) <> 0
	|			ТОГДА ПоступлениеТоваровУслугТовары.КоличествоМест / ПоступлениеТоваровУслугТовары.Количество * ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.КоличествоМест
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Количество, 0) <> 0
	|			ТОГДА ПоступлениеТоваровУслугТовары.СуммаНДС / ПоступлениеТоваровУслугТовары.Количество * ДанныеЧастичныхЗаказовОстатки.КоличествоОстаток
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.Склад,
	|	ПоступлениеТоваровУслугТовары.КлючСвязи,
	|	РеализацияТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслугТовары.ДокументПоступления,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа,
	|	ПоступлениеТоваровУслугТовары.СкладМагазина,
	|	ПоступлениеТоваровУслугТовары.ШтрихкодНоменклатуры
	|ИЗ
	|	ДанныеЧастичныхЗаказовОстатки КАК ДанныеЧастичныхЗаказовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоступлениеТоваровУслугТовары КАК ПоступлениеТоваровУслугТовары
	|		ПО ДанныеЧастичныхЗаказовОстатки.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ДанныеЧастичныхЗаказовОстатки.КодМаркировки = ПоступлениеТоваровУслугТовары.КодМаркировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслуг.Ссылка = &Заказ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.ЗаказРеализация КАК ЗаказРеализация,
	|	ВТ_Итог.Номенклатура КАК Номенклатура,
	|	ВТ_Итог.Сумма КАК Сумма,
	|	ВТ_Итог.Количество КАК Количество,
	|	ВТ_Итог.КоличествоМест КАК КоличествоМест,
	|	ВТ_Итог.Цена КАК Цена,
	|	ВТ_Итог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Итог.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	ВТ_Итог.Коэффициент КАК Коэффициент,
	|	ВТ_Итог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Итог.СуммаНДС КАК СуммаНДС,
	|	ВТ_Итог.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Итог.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВТ_Итог.Склад КАК Склад,
	|	ВТ_Итог.КлючСвязи КАК КлючСвязи,
	|	ВТ_Итог.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_Итог.ДокументПоступления КАК ДокументПоступления,
	|	ВТ_Итог.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	|	ВТ_Итог.СкладМагазина КАК СкладМагазина,
	|	МАКСИМУМ(ЗакрытиеЗаказовЗаказы.Ссылка) КАК ЗакрытиеЗаказов,
	|	ВТ_Итог.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры,
	|	ВТ_Итог.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	|		ПО (ЗакрытиеЗаказовЗаказы.Закрыть
	|				ИЛИ ЗакрытиеЗаказовЗаказы.Отклонить)
	|			И ВТ_Итог.ЗаказРеализация = ЗакрытиеЗаказовЗаказы.Реализация
	|ГДЕ
	|	ИСТИНА
	|	И ВТ_Итог.СкладМагазина = &СкладМагазина
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Итог.ЗаказРеализация,
	|	ВТ_Итог.Номенклатура,
	|	ВТ_Итог.ЕдиницаИзмерения,
	|	ВТ_Итог.ЕдиницаИзмеренияМест,
	|	ВТ_Итог.СтавкаНДС,
	|	ВТ_Итог.ХарактеристикаНоменклатуры,
	|	ВТ_Итог.СерияНоменклатуры,
	|	ВТ_Итог.Склад,
	|	ВТ_Итог.ДатаДоставки,
	|	ВТ_Итог.ДокументПоступления,
	|	ВТ_Итог.СкладМагазина,
	|	ВТ_Итог.ВнешнийНомерЗаказа,
	|	ВТ_Итог.Сумма,
	|	ВТ_Итог.Количество,
	|	ВТ_Итог.КоличествоМест,
	|	ВТ_Итог.Цена,
	|	ВТ_Итог.Коэффициент,
	|	ВТ_Итог.СуммаНДС,
	|	ВТ_Итог.КлючСвязи,
	|	ВТ_Итог.ШтрихкодНоменклатуры,
	|	ВТ_Итог.КодМаркировки";
	Запрос.УстановитьПараметр("Заказ", РеализацияТоваровУслугСсылка);
    Запрос.УстановитьПараметр("Номер", ОбщегоНазначения.ПолучитьРеквизитОбъекта(РеализацияТоваровУслугСсылка, "Номер"));
	//Асеев 02.09.2020 (Задача № 4189)<<<
    
    Запрос.УстановитьПараметр("Период", ТекущаяДата());
    Запрос.УстановитьПараметр("СкладМагазина", Объект.СкладМагазина);
    Запрос.УстановитьПараметр("ТопДеливери",КонтрагентТопДеливери);
    Запрос.УстановитьПараметр("СкладТопДеливери",СкладТопДеливери);
    
    //Серегин М.В. 25.08.2015 10:11:58 если не заполнен склад магазин
    Если НЕ ЗначениеЗаполнено(Объект.СкладМагазина) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ВТ_Итог.СкладМагазина = &СкладМагазина","");
    КонецЕсли;
    
    
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Возврат РезультатЗапроса;
КонецФункции // ()


Функция ЕстьНаТСД(Заказ)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   РеализацияТоваровУслуг.Ссылка
        |ИЗ
        |   Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |ГДЕ
        |   РеализацияТоваровУслуг.Ссылка = &Ссылка
        |   И РеализацияТоваровУслуг.Ссылка В
        |           (ВЫБРАТЬ
        |               РеализацияТоваровУслуг.Ссылка
        |           ИЗ
        |               Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |                   ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
        |                   ПО
        |                       РеализацияТоваровУслуг.Ссылка.Номер = ЗагрузкаСТСДШтрихкоды.Штрихкод
        |           ГДЕ
        |               ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД В (&ТипЗагрузкиТСД)
        |               И РеализацияТоваровУслуг.Ссылка = &Ссылка
        |       
        |           ОБЪЕДИНИТЬ ВСЕ
        |       
        |           ВЫБРАТЬ
        |               РеализацияТоваровУслуг.Ссылка
        |           ИЗ
        |               Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |                   ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
        |                   ПО
        |                       РеализацияТоваровУслуг.Ссылка.НомерВнешнегоЗаказа = ЗагрузкаСТСДШтрихкоды.Штрихкод
        |           ГДЕ
        |               ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД В (&ТипЗагрузкиТСД)
        |               И РеализацияТоваровУслуг.Ссылка = &Ссылка
        |       
        |           ОБЪЕДИНИТЬ ВСЕ
        |       
        |           ВЫБРАТЬ
        |               РеализацияТоваровУслуг.Ссылка
        |           ИЗ
        |               Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |                   ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
        |                   ПО
        |                       РеализацияТоваровУслуг.Ссылка = ЗагрузкаСТСДШтрихкоды.Заказ
        |           ГДЕ
        |               ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД В (&ТипЗагрузкиТСД)
        |               И РеализацияТоваровУслуг.Ссылка = &Ссылка)";
    
    Запрос.УстановитьПараметр("Ссылка", Заказ);
    ТипыЗагрузки = Новый СписокЗначений;
    ТипыЗагрузки.Добавить(Перечисления.ТипыЗагрузкиТСД.ПриходWiFi);
    ТипыЗагрузки.Добавить(Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRoute);
	ТипыЗагрузки.Добавить(Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRouteСВесом);
    Запрос.УстановитьПараметр("ТипЗагрузкиТСД",ТипыЗагрузки);
    Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Следующий() Тогда
       Возврат Истина;
   Иначе
       Возврат Ложь;
   КонецЕсли;
КонецФункции // ЕстьНаТСД()


&НаКлиенте
Процедура ЗагрузитьСТСД(Команда)
	
	//Подгрузим данные с ТСД
	lem.РегламентЗагрузкаДанныхСТСД(Истина);
        
    //Получим данные из Документа ЗагрузкаСТСД
    РезультатЗапроса = ПолучитьДанныеЗагрузкаСТСД(Объект.Ссылка);
	
    Если РезультатЗапроса.Количество() > 0 Тогда
        //Обрезаем первую строку
        ЗагрузкаСТСДСсылка = РезультатЗапроса[0].ЗагрузкаСТСД;
        ТабличнаяЧастьЗагрузкаСТСД = ЗагрузкаСТСДСсылка.Штрихкоды.Выгрузить();
        ТабличнаяЧастьЗагрузкаСТСД.Удалить(0);
    Иначе
        Возврат;
        Сообщить("Не найдена взаимосвязь документа с документом Загрузка с ТСД!");
    КонецЕсли;
    
    //Костыль форматируем Штрихкод
    Для каждого Стр Из ТабличнаяЧастьЗагрузкаСТСД Цикл
       Стр.Штрихкод = СокрЛП(Стр.Штрихкод);
    КонецЦикла;
    
    //Меняем дополняем данные в табличной части Заказы
    Для каждого Стр Из Объект.Заказы Цикл
        НайденнаяСтрокаЗагрузкаСТСД = ТабличнаяЧастьЗагрузкаСТСД.Найти(СокрЛП(Стр.Заказ.Номер),"Штрихкод");    
        Если НайденнаяСтрокаЗагрузкаСТСД <> Неопределено Тогда
            Стр.ЗаказНайден = Истина; 
            Стр.ТекущийСтатус = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.ПодготовленКВозврату");
            Стр.КоличествоМестТовара = НайденнаяСтрокаЗагрузкаСТСД.КоличествоМест;
            
            //Временно!!! меняем статус в табличной части товары
            НайденыеСтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказРеализация",Стр.Заказ));
            Для каждого СтрокаТовары Из НайденыеСтрокиТовары Цикл
                СтрокаТовары.СтатусСкладскогоУчета = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.ПодготовленКВозврату");    
            КонецЦикла;       
        КонецЕсли;
    КонецЦикла; 
    

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьДанныеЗагрузкаСТСД(Ссылка)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ВзаимосвязьДокументов.Документ1 КАК ЗагрузкаСТСД,
        |   ВзаимосвязьДокументов.Документ2 КАК НаборнаяВедомость
        |ИЗ
        |   РегистрСведений.ВзаимосвязьДокументов КАК ВзаимосвязьДокументов
        |ГДЕ
        |   ВзаимосвязьДокументов.Документ2 = &Ссылка
        |
        |УПОРЯДОЧИТЬ ПО
        |   ЗагрузкаСТСД УБЫВ
        |АВТОУПОРЯДОЧИВАНИЕ";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Возврат РезультатЗапроса;
КонецФункции // ПолучитьДанныеЗагрузкаСТСД()


&НаСервереБезКонтекста
Функция ВЗаказеТолькоУслугиПоЗаказам(Номер)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер,
        |   ВозвратТоваровОтПокупателяТовары.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ КАК ЭтоУслугаПоЗаказам
        |ПОМЕСТИТЬ ВТ
        |ИЗ
        |   Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугТовары.Ссылка.Номер,
        |   РеализацияТоваровУслугТовары.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО РеализацияТоваровУслугТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугУслуги.Ссылка.Номер,
        |   РеализацияТоваровУслугУслуги.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО РеализацияТоваровУслугУслуги.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   РеализацияТоваровУслугУслуги.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер,
        |   РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ПоступлениеТоваровУслугТовары.Ссылка.Номер,
        |   ПоступлениеТоваровУслугТовары.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ПоступлениеТоваровУслугТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ПоступлениеТоваровУслугУслуги.Ссылка.Номер,
        |   ПоступлениеТоваровУслугУслуги.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ПоступлениеТоваровУслугУслуги.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер,
        |   ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.ПоступлениеТоваровУслуг.ПодарочныеПозиции КАК ПоступлениеТоваровУслугПодарочныеПозиции
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТ.Номер КАК Номер,
        |   ВТ.Номенклатура,
        |   МАКСИМУМ(ВТ.ЭтоУслугаПоЗаказам) КАК ЭтоУслугаПоЗаказам
        |ИЗ
        |   ВТ КАК ВТ
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТ.Номер,
        |   ВТ.Номенклатура
        |
        |УПОРЯДОЧИТЬ ПО
        |   Номер
        |АВТОУПОРЯДОЧИВАНИЕ";
    
    Запрос.УстановитьПараметр("Номер", Номер);
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    ЕстьНоменклатура = РезультатЗапроса.Найти(Ложь,"ЭтоУслугаПоЗаказам");
    Если ЕстьНоменклатура = Неопределено Тогда
        Возврат Истина; //только услуги
    Иначе
        Возврат Ложь; //есть номенклатура
    КонецЕсли;
    
КонецФункции // ()


&НаКлиенте
Процедура ЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
   Отказ = Истина; 
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
    Отказ = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    Отказ = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
    Отказ = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Асеев 20.05.2022 (Задача № 4809)>>>
	//Если НЕ Параметры.Ключ.Пустая() Тогда
	//    ЕстьДокументыВозврата = ПроверитьНаличиеВозвратов();
	//    Если ЕстьДокументыВозврата Тогда
	//        ЭтаФорма.ТолькоПросмотр = Истина;
	//    Иначе 
	//        ЭтаФорма.ТолькоПросмотр = Ложь;
	//    КонецЕсли;
	//    ВозвратСоздан = ЭтаФорма.ТолькоПросмотр; 
	//КонецЕсли;		
	//
	//Если Объект.Вскрытые Тогда	
	//	Элементы.Группа_Товары.Видимость = Истина;		
	//Иначе	
	//	Элементы.Группа_Товары.Видимость = Ложь;	
	//КонецЕсли;
	//
	//Элементы.ЗаказыПерепроверен.Видимость = Ложь;
	//
	//// МАС - 15.05.2018 - № --->> 
	////Элементы.МестаПоЗаказам.Видимость = Объект.ШКПоМестам;
	//Если Объект.Магистраль Тогда
	//    Элементы.МестаПоЗаказам.Видимость = НЕ Объект.Вскрытые;
	//Иначе		
	//	Элементы.МестаПоЗаказам.Видимость = Объект.ШКПоМестам;
	//КонецЕсли;
	//// <<--- МАС 
	//	
	//Элементы.ФормаПодтвердитьСоставОтправки.Пометка     = Объект.СоставСформирован;
	//Элементы.ФормаПодтвердитьСоставОтправки.Доступность = НЕ Объект.СоставСформирован;		
	//Элементы.ФормаСоздатьВозвратТоваровПоставщику.Пометка = Объект.ДокументОтгрузкиСоздан;		
	//Элементы.ФормаСоздатьВозвратТоваровПоставщику.Видимость   = НЕ Объект.Магистраль;
	//Элементы.СоздатьВнутреннееПеремещение.Видимость   = Объект.Магистраль;	
	//Элементы.СоздатьВнутреннееПеремещение.Доступность = Объект.СоставСформирован И НЕ ЗначениеЗаполнено(Объект.ДокВнутреннееПеремещение);
	//Элементы.ЧастичноСобранные.Видимость = Ложь;
	//
	//Если Объект.ДокументОтгрузкиСоздан ИЛИ НЕ Объект.СоставСформирован Тогда	
	//	Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Ложь;		
	//Иначе	
	//	Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Истина;	
	//КонецЕсли;	
	//
	//Элементы.ВозвратПоставщику_Гиперссылка.Видимость = ЗначениеЗаполнено(Объект.ВозвратПоставщику);
	//Элементы.ЗаказыЗаказНайден.Видимость = Объект.СоставСформирован;
	//Элементы.ЗаказыСобраноМест.Видимость = НЕ Объект.Вскрытые И НЕ Объект.ШКПоМестам;
	//Элементы.ЗаказыКоличествоМестТовара.Видимость = НЕ Объект.Вскрытые И НЕ Объект.ШКПоМестам;
	//Элементы.ЗаказыКоличествоМестТовара1.Видимость = НЕ Элементы.ЗаказыКоличествоМестТовара.Видимость;		
	//Элементы.ЗаказыПоказатьСкрытьТовары.Доступность = НЕ Объект.Вскрытые;
	//
	//Элементы.ИнтернетМагазин.Видимость  = НЕ Объект.Магистраль;
	//Элементы.СкладМагазина.Видимость    = НЕ Объект.Магистраль;
	////Элементы.ЗаказыКонтрагент.Видимость = Объект.Магистраль;	
	//Элементы.ЗаказыКонтрагент.Видимость = Истина;
	//
	//Элементы.ЗаказыТекущийСтатус.Видимость = НЕ Объект.Магистраль;
	//
	//Элементы.СтраницаНеопознанныеШК.Заголовок = "Неопознанные ШК (" + Объект.НеопознанныеШтрихкоды.Количество() + ")";
	//
	//ЗаполнитьДнейСВозникновенияВозвратногоСтатуса();
	//
	//// Для не вскрытых проставим признак "ЗаказПодтвержденКСборке" и минуем этап подтверждения состава
	//Если НЕ Объект.Вскрытые И НЕ Объект.СоставСформирован Тогда		
	//	Для каждого Стр Из Объект.Заказы Цикл	
	//		Стр.ЗаказПодтвержденКСборке = Истина;		
	//	КонецЦикла;	
	//	
	//	ПодтвердитьНаСервере();		
	//	Элементы.ФормаПодтвердитьСоставОтправки.Пометка     = Истина;
	//	Элементы.ФормаПодтвердитьСоставОтправки.Доступность = Ложь;
	//	Элементы.СоздатьВнутреннееПеремещение.Доступность = Истина;
	//						
	//	//ЗаполнитьДнейСВозникновенияВозвратногоСтатуса();	
	//	//ОбновитьДоступностьЭлементов();
	//	//ОбновитьОтображениеДанных();		
	//КонецЕсли;
	//
	//ЗаполнитьДнейСВозникновенияВозвратногоСтатуса();	
	//ОбновитьДоступностьЭлементов();
	//ОбновитьОтображениеДанных();
	//
	////Если Объект.Вскрытые И Объект.ШКПоТоварам Тогда	
	////	Элементы.ТоварыКоличествоСобрано.Видимость = Ложь;	
	////Иначе
	////	Элементы.ТоварыКоличествоСобрано.Видимость = Ложь;
	////КонецЕсли;
	//
	////+Степанов Задача № 3975
	//ПозиционированиеПриСканировании = Истина;
	//УстановитьВидимостьТЧ();
	////-Степанов Задача № 3975
	//Асеев 20.05.2022 (Задача № 4809)<<<
	
КонецПроцедуры

//Асеев 20.05.2022 (Задача № 4809)>>>
&НаСервере
Процедура СоздатьВнесистемныйВозвратТоваровПоставщикуНаСервере()
	
	Если Модифицированность Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	СтрОтвет = ПолучитьДокНаборная();	
	СтрокаОшибок = СтрОтвет.СтрокаОшибок;
	ДокСсылка = СтрОтвет.ДокСсылка;
	
	Если СтрокаОшибок <> "" Тогда
		Сообщить("У контрагента(ов): "+СтрокаОшибок+" не выбран основной договор!"); 
		Возврат;
	КонецЕсли;
	
	ДокВозвратПоставщику = СоздатьНаОснованииИПоместитьВОбъектИВернутьФорму(ДокСсылка);
	ЭтаФорма.ТолькоПросмотр = Истина;	   	
	
	Элементы.ФормаСоздатьВозвратТоваровПоставщику.Пометка     = Истина;
	Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Ложь;
	
	Объект.ДокументОтгрузкиСоздан = Истина;
	
	Объект.ВозвратПоставщику = ДокВозвратПоставщику;
	Элементы.ВозвратПоставщику_Гиперссылка.Видимость = Истина;
	
	Записать();	
	
КонецПроцедуры
//Асеев 20.05.2022 (Задача № 4809)<<<

&НаКлиенте
Процедура СоздатьВозвратТоваровПоставщику(Команда)
	
	//Асеев 20.05.2022 (Задача № 4809)>>>
	Если Объект.ТипВозврата = ПредопределенноеЗначение("Справочник.ТипыВозврата.ВнесистемныйВозврат") Тогда
		
		СоздатьВнесистемныйВозвратТоваровПоставщикуНаСервере();
		
		Если ЗначениеЗаполнено(Объект.ВозвратПоставщику) Тогда
			ОткрытьФорму("Документ.ВозвратТоваровПоставщику.Форма.ФормаДокументаУпр", Новый Структура("Ключ", Объект.ВозвратПоставщику), ЭтаФорма);				
			
			Закрыть();
		КонецЕсли;
		
	Иначе
		//Асеев 20.05.2022 (Задача № 4809)<<<
		
		ЕстьПомеченныеКакНенужные = Ложь;	
		ЕстьСобранныеЗаказы = Ложь;
		СоздаватьВозврат = Ложь;
		
		Для каждого Стр Из Объект.Заказы Цикл	
			Если Стр.ЗаказНайден Тогда		
				ЕстьСобранныеЗаказы = Истина;			
			КонецЕсли;	
		КонецЦикла;
		
		
		Для каждого Стр Из Объект.Заказы Цикл	
			Если Стр.ПометкаНеВозвратныйЗаказ Тогда		
				ЕстьПомеченныеКакНенужные = Истина;			
			КонецЕсли;	
		КонецЦикла;
		
		
		Если НЕ ЕстьСобранныеЗаказы И НЕ ЕстьПомеченныеКакНенужные Тогда		
			Сообщить("Нет собранных заказов");
			Возврат;			
		КонецЕсли;
		
		ЕстьДокументыВозврата = ПроверитьНаличиеВозвратов();
		Если ЕстьДокументыВозврата Тогда
			Сообщить("Документы возврата уже созданы!");
			Возврат;
		КонецЕсли;
		
		
		ЕстьПодтвержденныеНесобранные = Ложь;	
		НайНеСоб = Объект.Заказы.НайтиСтроки(Новый Структура("ЗаказПодтвержденКСборке", Истина));
		Для каждого Ст Из НайНеСоб Цикл		
			Если НЕ Ст.ЗаказНайден И НЕ Ст.ПометкаНеВозвратныйЗаказ Тогда	
				ЕстьПодтвержденныеНесобранные = Истина;		
			КонецЕсли;	
		КонецЦикла;
		
		Если ЕстьПодтвержденныеНесобранные Тогда
			От = Вопрос("Остались неподтверждённые заказы, продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			Если От = КодВозвратаДиалога.Да Тогда			
				СоздаватьВозврат = Истина;					
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			СоздаватьВозврат = Истина;
		КонецЕсли;	
		
		
		
		
		
		// Этап контроля изъятия частично собранных из отправки --- >>>
		КИзъятию.Очистить();
		НуженЭтапИзъятия = Ложь;
		МассивНесобранных = Новый Массив;
		
		// Если есть частично собранные, сообщаем список и готовим его для сканирования
		Для каждого СтрЗак Из Объект.Заказы Цикл	
			Если СтрЗак.ЗаказПодтвержденКСборке И НЕ СтрЗак.ЗаказНайден Тогда		
				МассивНесобранных.Добавить(СтрЗак.Заказ);		
			КонецЕсли;		
		КонецЦикла;
		
		
		Если МассивНесобранных.Количество() Тогда
			
			Если Объект.Вскрытые Тогда	
				Для каждого СтрМас Из МассивНесобранных Цикл		
					НайТов = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказРеализация", СтрМас));	
					Для каждого СтрТ Из НайТов Цикл		
						Если СтрТ.КоличествоСобрано > 0 Тогда		
							НСтр = КИзъятию.Добавить();
							НСтр.Заказ = СтрМас;
							НСтр.КолТовара = СтрТ.КоличествоСобрано;
							НСтр.Товар = СтрТ.Номенклатура;	
							НСтр.ШтрихкодПозиции = СтрТ.ШтрихкодНоменклатуры;
						КонецЕсли;				
					КонецЦикла;		
				КонецЦикла;									
			ИначеЕсли Объект.ШКПоМестам Тогда			
				Для каждого СтрМас Из МассивНесобранных Цикл		
					НайМесто = Объект.МестаПоЗаказам.НайтиСтроки(Новый Структура("Заказ", СтрМас));	
					Для каждого СтрМ Из НайМесто Цикл		
						Если СтрМ.Подтверждено Тогда					
							НСтр = КИзъятию.Добавить();
							НСтр.Заказ = СтрМас;
							НСтр.Место = СтрМ.МестоЗаказа;
							НСтр.ШтрихкодПозиции = СтрМ.Штрихкод;
						КонецЕсли;				
					КонецЦикла;		
				КонецЦикла;	
			Иначе			
				Для каждого СтрМас Из МассивНесобранных Цикл		
					НайМесто = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", СтрМас));	
					Для каждого СтрЗ Из НайМесто Цикл		
						Если СтрЗ.СобраноМест > 0 Тогда				
							НСтр = КИзъятию.Добавить();
							НСтр.Заказ = СтрЗ.Заказ;
							НСтр.КолМест = СтрЗ.СобраноМест;
							
							НайШК = Объект.Штрихкоды.НайтиСтроки(Новый Структура("Заказ", СтрЗ.Заказ));
							Если НайШК.Количество() Тогда					
								НСтр.ШтрихкодПозиции = НайШК[0].Штрихкод;						
							КонецЕсли;
							
						КонецЕсли;				
					КонецЦикла;		
				КонецЦикла;	
			КонецЕсли;
			
			Если КИзъятию.Количество() Тогда
				От = Вопрос("Внимание! Есть заказы, собранные не полностью. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
				Если От = КодВозвратаДиалога.Да Тогда			
					СоздаватьВозврат = Ложь;	
					НуженЭтапИзъятия = Истина;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				СоздаватьВозврат = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если НуженЭтапИзъятия Тогда		
			ЭтапИзъятия = Истина;
			Элементы.ЧастичноСобранные.Видимость = Истина;
			
			Если Объект.Вскрытые И Объект.ШКПоТоварам Тогда		
				Элементы.КИзъятиюКолТовара.Видимость = Истина;	
				Элементы.КИзъятиюПозицияИзъятаИзОтправки.Видимость = Ложь;
			Иначе		
				Элементы.КИзъятиюКолТовара.Видимость = Ложь;
				Элементы.КИзъятиюПозицияИзъятаИзОтправки.Видимость = Истина;	
			КонецЕсли;
			
			Элементы.ГруппаСтраницыЗаказы.ТекущаяСтраница = Элементы.ЧастичноСобранные;
			
		КонецЕсли;	// Этап контроля изъятия частично собранных из отправки --- <<<	
		
		
		
		// этап перепроверки
		НуженЭтапПерепроверки = Ложь;	
		Если НЕ Объект.Вскрытые И НуженЭтапПерепроверки И НЕ Объект.ПерепроверкаВыполнена Тогда	
			
			НайЗаказыСобраны = Объект.Заказы.НайтиСтроки(Новый Структура("ЗаказНайден", Истина));
			ШКПоМестам = Объект.ШКПоМестам;
			Для каждого СтрЗаказ Из НайЗаказыСобраны Цикл							
				Если ШКПоМестам Тогда				
					НайМеста = Объект.МестаПоЗаказам.НайтиСтроки(Новый Структура("Заказ", СтрЗаказ.Заказ));			
					Для каждого СтрМесто Из НайМеста Цикл					
						НСтр = ТЗПерепроверка.Добавить();
						НСтр.Заказ = СтрЗаказ.Заказ;
						//НСтр.КолМест = СтрЗаказ.КоличествоМестТовара;
						НСтр.Место = СтрМесто.МестоЗаказа;
						НСтр.ШтрихкодПозиции = СтрМесто.Штрихкод;			
					КонецЦикла;			
				Иначе
					НСтр = ТЗПерепроверка.Добавить();
					НСтр.Заказ = СтрЗаказ.Заказ;
					НСтр.КолМест = СтрЗаказ.КоличествоМестТовара;				
				КонецЕсли;		
			КонецЦикла;
			
			Элементы.ЗаказыПерепроверен.Видимость = Истина;
			ЭтапПерепроверки = Истина;		
			Возврат;	
			
		КонецЕсли;
		
		
		
		// Создание документа Возврат товаров поставщику
		Если СоздаватьВозврат Тогда
			
			Если ЕстьПомеченныеКакНенужные И НЕ ЕстьСобранныеЗаказы Тогда
				
				Парам = Новый Структура;
				Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
				Записать(Парам);
				Закрыть();
				Сообщить("Заказы успешно помечены как невозвратные");			
			Иначе	
				
				Если Модифицированность = Истина Тогда 
					Парам = Новый Структура;
					//Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
					Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
					Записать(Парам);		
				КонецЕсли;	
				
				СтрОтвет = ПолучитьДокНаборная();	
				СтрокаОшибок = СтрОтвет.СтрокаОшибок;
				ДокСсылка = СтрОтвет.ДокСсылка;
				
				Если СтрокаОшибок <> "" Тогда
					Сообщить("У контрагента(ов): "+СтрокаОшибок+" не выбран основной договор!"); 
					Возврат;
				КонецЕсли;
				
				ДокВозвратПоставщику = СоздатьНаОснованииИПоместитьВОбъектИВернутьФорму(ДокСсылка);
				ЭтаФорма.ТолькоПросмотр = Истина;	   	
				
				Элементы.ФормаСоздатьВозвратТоваровПоставщику.Пометка     = Истина;
				Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Ложь;
				
				Объект.ДокументОтгрузкиСоздан = Истина;
				
				Объект.ВозвратПоставщику = ДокВозвратПоставщику;
				Элементы.ВозвратПоставщику_Гиперссылка.Видимость = Истина;
				
				Записать();	
				
				ОбновитьОтображениеДанных();	
				
				ОткрытьФорму("Документ.ВозвратТоваровПоставщику.Форма.ФормаДокументаУпр", Новый Структура("Ключ", ДокВозвратПоставщику), ЭтаФорма);				
				
				Закрыть();
				
			КонецЕсли;			
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры


Функция ПолучитьДокНаборная()

	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.НаборнаяВедомостьДляВозврата"));
	
	СтрокаОшибок = ДокОбъект.ПроверитьНаличиеДоговоров();
	
	СтрДанные = Новый Структура();
	СтрДанные.Вставить("СтрокаОшибок", СтрокаОшибок);
	СтрДанные.Вставить("ДокСсылка", ДокОбъект.Ссылка);
	
	Возврат СтрДанные;
		
КонецФункции // ()


Функция СоздатьНаОснованииИПоместитьВОбъектИВернутьФорму(ДокументСсылка)

	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ДокМассив = ДокументОбъект.СоздатьНаОснованииИВернуть();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	Возврат ДокМассив[0].Ссылка;
	
	
КонецФункции


&НаКлиенте
Процедура ЗаказыЗаказНайденПриИзменении(Элемент)
	
	//Если Элементы.Заказы.ТекущиеДанные.ЗаказНайден Тогда 
	//    Элементы.Заказы.ТекущиеДанные.ТекущийСтатус = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.ПодготовленКВозврату");  
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИнтернетМагазинПриИзменении(Элемент)
    ИнтернетМагазинПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ИнтернетМагазинПриИзмененииНаСервере()
    ТЧКонтрагенты = Объект.Контрагенты;
    ТЧКонтрагенты.Очистить();
    Если ЗначениеЗаполнено(Объект.ИнтернетМагазин) Тогда
        СтрокаТЧ = ТЧКонтрагенты.Добавить();
        СтрокаТЧ.Контрагент = Объект.ИнтернетМагазин;
    КонецЕсли;
    Если Объект.ИнтернетМагазин.ЗаполнятьНаборнуюВедомостьПоГруппе Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   Контрагенты.Ссылка КАК Контрагент
        |ИЗ
        |   Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |   Контрагенты.Родитель.ОсновнойМагазин = &ОсновнойМагазин";
        
        Запрос.УстановитьПараметр("ОсновнойМагазин", Объект.ИнтернетМагазин);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            СтрокаТЧ = ТЧКонтрагенты.Добавить();
            ЗаполнитьЗначенияСвойств(СтрокаТЧ,ВыборкаДетальныеЗаписи);
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры


Функция ПолучитьНомераЗаказовСоСкладами()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СтатусыСкладскогоУчета.Заказ,
        |   МАКСИМУМ(СтатусыСкладскогоУчета.Период) КАК Период,
        |   МАКСИМУМ(ВЫБОР
        |           КОГДА СтатусыСкладскогоУчета.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ЗаказНеВозвратный)
        |               ТОГДА ИСТИНА
        |           ИНАЧЕ ЛОЖЬ
        |       КОНЕЦ) КАК НеВозвратныйЗаказ
        |ПОМЕСТИТЬ ВТ_СрезПослдедних
        |ИЗ
        |   РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
        |ГДЕ
        |   (СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.новаОтчетВодителя
        |           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ЗакрытиеЗаказов
        |           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ДанныеЗаказаСамовывоза
        |           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.УстановкаСтатусовСкладскогоУчета
        |           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
        |           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.НаборнаяВедомостьДляВозврата
        |           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ГрупповаяУстановкаСтатусовСкладскогоУчета
        |           ИЛИ СтатусыСкладскогоУчета.Регистратор ССЫЛКА Документ.ЗагрузкаСТСД)
        |
        |СГРУППИРОВАТЬ ПО
        |   СтатусыСкладскогоУчета.Заказ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СтатусыСкладскогоУчета.Заказ,
        |   СтатусыСкладскогоУчета.СтатусСкладскогоУчета КАК ТекущийСтатус,
        |   СтатусыСкладскогоУчета.ТипЗаказа,
        |   СтатусыСкладскогоУчета.Заказ.ВладелецТовара КАК Контрагент
        |ПОМЕСТИТЬ ВТ_СписокЗаказов
        |ИЗ
        |   РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СрезПослдедних КАК ВТ_СрезПослдедних
        |       ПО СтатусыСкладскогоУчета.Заказ = ВТ_СрезПослдедних.Заказ
        |           И СтатусыСкладскогоУчета.Период = ВТ_СрезПослдедних.Период
        |           И (НЕ ВТ_СрезПослдедних.НеВозвратныйЗаказ)
        |ГДЕ
        |   СтатусыСкладскогоУчета.СтатусСкладскогоУчета В(&СтатусСкладскогоУчета)
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   СтатусыСкладскогоУчета.Заказ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугТовары.Ссылка.Номер
        |ПОМЕСТИТЬ ВТ_Итого
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокЗаказов КАК ВТ_СписокЗаказов
        |       ПО РеализацияТоваровУслугТовары.Ссылка.Номер = ВТ_СписокЗаказов.Заказ.Номер
        |ГДЕ
        |   РеализацияТоваровУслугТовары.СкладМагазина = &СкладМагазина
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокЗаказов КАК ВТ_СписокЗаказов
        |       ПО РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер = ВТ_СписокЗаказов.Заказ.Номер
        |ГДЕ
        |   РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина = &СкладМагазина
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
        |ИЗ
        |   Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокЗаказов КАК ВТ_СписокЗаказов
        |       ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = ВТ_СписокЗаказов.Заказ.Номер
        |ГДЕ
        |   ВозвратТоваровОтПокупателяТовары.СкладМагазина = &СкладМагазина
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ПоступлениеТоваровУслугТовары.Ссылка.Номер
        |ИЗ
        |   Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокЗаказов КАК ВТ_СписокЗаказов
        |       ПО ПоступлениеТоваровУслугТовары.Ссылка.Номер = ВТ_СписокЗаказов.Заказ.Номер
        |ГДЕ
        |   ПоступлениеТоваровУслугТовары.СкладМагазина = &СкладМагазина
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер
        |ИЗ
        |   Документ.ПоступлениеТоваровУслуг.ПодарочныеПозиции КАК ПоступлениеТоваровУслугПодарочныеПозиции
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокЗаказов КАК ВТ_СписокЗаказов
        |       ПО ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер = ВТ_СписокЗаказов.Заказ.Номер
        |ГДЕ
        |   ПоступлениеТоваровУслугПодарочныеПозиции.СкладМагазина = &СкладМагазина
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТ_Итого.Номер
        |ИЗ
        |   ВТ_Итого КАК ВТ_Итого
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТ_Итого.Номер";
	
    Запрос.УстановитьПараметр("СкладМагазина", Объект.СкладМагазина);
    СписокСтатусСкладскогоУчета = Новый СписокЗначений;
    СписокСтатусСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.Возврат1);
    СписокСтатусСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.Возврат2);
    Запрос.УстановитьПараметр("СтатусСкладскогоУчета",СписокСтатусСкладскогоУчета);
       
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	
    
КонецФункции // ПолучитьНомераЗаказовСоСкладами()


Функция ПроверитьНаличиеВозвратов()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   ВозвратТоваровПоставщику.Ссылка
        |ИЗ
        |   Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
        |ГДЕ
        |   ВозвратТоваровПоставщику.Сделка = &Сделка
        |   И НЕ ВозвратТоваровПоставщику.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Сделка", Объект.Ссылка);    
    РезультатЗапроса = Запрос.Выполнить();   
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат Истина
    Иначе
        Возврат Ложь
    КонецЕсли;
   
КонецФункции


&НаКлиенте
Процедура ПодтвердитьСоставОтправки(Команда)
	
	
	НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("ЗаказПодтвержденКСборке", Истина));
	
	Если НЕ НайЗак.Количество() Тогда	
		Сообщить("Нет подтвержденных к сборке заказов");
		Возврат;	
	КонецЕсли;
	
	ПодтвердитьНаСервере();		
	Элементы.ФормаПодтвердитьСоставОтправки.Пометка     = Истина;
	Элементы.ФормаПодтвердитьСоставОтправки.Доступность = Ложь;
	Элементы.СоздатьВнутреннееПеремещение.Доступность = Истина;
	
	ОбновитьДоступностьЭлементов();
	ОбновитьОтображениеДанных();
	
	//НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("ЗаказПодтвержденКСборке", Истина));
	Если НайЗак.Количество() Тогда	
		Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайЗак[0]);	
	КонецЕсли;	
		
	ЗаполнитьДнейСВозникновенияВозвратногоСтатуса();
	
	
КонецПроцедуры


Процедура ПодтвердитьНаСервере()

	Объект.СоставСформирован = Истина;
	
	Для каждого Эл Из ЭтаФорма.УсловноеОформление.Элементы Цикл		
		Если Эл.Представление = "ЗаказыУдалены" Тогда		
			Эл.Использование = Истина;		
		КонецЕсли;				
	КонецЦикла;
	
	
	Для каждого Стр Из УсловноеОформление.Элементы Цикл				
		Если Стр.Представление = "ПодтвержденКСборке" Тогда			
			Стр.Использование = Истина;
		КонецЕсли;		
	КонецЦикла;
	
	Элементы.Заказы.Обновить();	
	
	Записать();

КонецПроцедуры


&НаКлиенте
Процедура ОтменитьНабор(Команда)
	
	Если Объект.ДокументОтгрузкиСоздан Тогда
		Сообщить("Документ отгрузки создан, нельзя отменить набор.");	
	Иначе	
		ОО = Новый ОписаниеОповещения("ОтменитьНаборПроцедура", ЭтаФорма, Новый Структура("", ));	
		ПоказатьВопрос(ОО, "Вы уверены, что хотите отменить набор?", РежимДиалогаВопрос.ДаНет);		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ЧастичноСобранные(Команда)
	
	Элементы.ЗаказыЧастичноСобранные.Пометка = НЕ Элементы.ЗаказыЧастичноСобранные.Пометка;	
	УстановитьОтборЧастичноСобранные(Элементы.ЗаказыЧастичноСобранные.Пометка);
		
КонецПроцедуры


Процедура УстановитьОтборЧастичноСобранные(Установить)
	
	Для каждого Стр Из УсловноеОформление.Элементы Цикл				
		Если Стр.Представление = "ЧастичноСобранные" Тогда			
			Стр.Использование = Установить;
		КонецЕсли;		
	КонецЦикла;
		
	НайСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("СобранЧастично", Истина));
	Если НайСтроки.Количество() Тогда		
		Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайСтроки[0]);
	КонецЕсли;
	

КонецПроцедуры


&НаКлиенте
Процедура ОтменитьНаборПроцедура(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Заказы.Очистить();
		Объект.Товары.Очистить();
		
		Если Объект.Проведен Тогда	
			ПарЗап = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
			Записать(ПарЗап);			
		КонецЕсли;
		
		ПарЗап = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Объект.ПометкаУдаления = Истина;
		Записать(ПарЗап);
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Асеев 20.05.2022 (Задача № 4809)>>>
	Если Объект.ТипВозврата = Справочники.ТипыВозврата.ВнесистемныйВозврат Тогда
		Элементы.ГруппаВозврат.Видимость = Ложь;
		Элементы.ГруппаВнесистемныйВозврат.Видимость = Истина;
		
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаДокументНаборнаяВедомостьДляВозвратаПечать.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаДокументНаборнаяВедомостьДляВозвратаПечатьПредварительная.Видимость = Ложь;
		Элементы.ФормаПодтвердитьСоставОтправки.Видимость = Ложь;
		Элементы.СоздатьВнутреннееПеремещение.Видимость = Ложь;
		Элементы.ПоменятьТипВозвратаПоДокументу.Видимость = Ложь;
		Элементы.ОтменитьНабор.Видимость = Ложь;
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ЕстьДокументыВозврата = ПроверитьНаличиеВозвратов();
			Если ЕстьДокументыВозврата Тогда
				ЭтаФорма.ТолькоПросмотр = Истина;
			Иначе 
				ЭтаФорма.ТолькоПросмотр = Ложь;
			КонецЕсли;
			
			Если Объект.ДокументОтгрузкиСоздан Тогда	
				Элементы.ФормаСоздатьВозвратТоваровПоставщику.Пометка     = Истина;
				Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Ложь;		
			Иначе	
				Элементы.ФормаСоздатьВозвратТоваровПоставщику.Пометка     = Ложь;
				Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Истина;	
			КонецЕсли;	
			
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаВозврат.Видимость = Истина;
		Элементы.ГруппаВнесистемныйВозврат.Видимость = Ложь;
		ОбновитьДоступностьЭлементов();
		
		//перенесено из ПриОткрытии
		Если НЕ Параметры.Ключ.Пустая() Тогда
			ЕстьДокументыВозврата = ПроверитьНаличиеВозвратов();
			Если ЕстьДокументыВозврата Тогда
				ЭтаФорма.ТолькоПросмотр = Истина;
			Иначе 
				ЭтаФорма.ТолькоПросмотр = Ложь;
			КонецЕсли;
			ВозвратСоздан = ЭтаФорма.ТолькоПросмотр; 
		КонецЕсли;		
		
		Если Объект.Вскрытые Тогда	
			Элементы.Группа_Товары.Видимость = Истина;		
		Иначе	
			Элементы.Группа_Товары.Видимость = Ложь;	
		КонецЕсли;
		
		Элементы.ЗаказыПерепроверен.Видимость = Ложь;
		
		// МАС - 15.05.2018 - № --->> 
		//Элементы.МестаПоЗаказам.Видимость = Объект.ШКПоМестам;
		Если Объект.Магистраль Тогда
			Элементы.МестаПоЗаказам.Видимость = НЕ Объект.Вскрытые;
		Иначе		
			Элементы.МестаПоЗаказам.Видимость = Объект.ШКПоМестам;
		КонецЕсли;
		// <<--- МАС 
		
		Элементы.ФормаПодтвердитьСоставОтправки.Пометка     = Объект.СоставСформирован;
		Элементы.ФормаПодтвердитьСоставОтправки.Доступность = НЕ Объект.СоставСформирован;		
		Элементы.ФормаСоздатьВозвратТоваровПоставщику.Пометка = Объект.ДокументОтгрузкиСоздан;		
		Элементы.ФормаСоздатьВозвратТоваровПоставщику.Видимость   = НЕ Объект.Магистраль;
		Элементы.СоздатьВнутреннееПеремещение.Видимость   = Объект.Магистраль;	
		Элементы.СоздатьВнутреннееПеремещение.Доступность = Объект.СоставСформирован И НЕ ЗначениеЗаполнено(Объект.ДокВнутреннееПеремещение);
		Элементы.ЧастичноСобранные.Видимость = Ложь;
		
		Если Объект.ДокументОтгрузкиСоздан ИЛИ НЕ Объект.СоставСформирован Тогда	
			Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Ложь;		
		Иначе	
			Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Истина;	
		КонецЕсли;	
		
		Элементы.ВозвратПоставщику_Гиперссылка.Видимость = ЗначениеЗаполнено(Объект.ВозвратПоставщику);
		Элементы.ЗаказыЗаказНайден.Видимость = Объект.СоставСформирован;
		Элементы.ЗаказыСобраноМест.Видимость = НЕ Объект.Вскрытые И НЕ Объект.ШКПоМестам;
		Элементы.ЗаказыКоличествоМестТовара.Видимость = НЕ Объект.Вскрытые И НЕ Объект.ШКПоМестам;
		Элементы.ЗаказыКоличествоМестТовара1.Видимость = НЕ Элементы.ЗаказыКоличествоМестТовара.Видимость;		
		Элементы.ЗаказыПоказатьСкрытьТовары.Доступность = НЕ Объект.Вскрытые;
		
		Элементы.ИнтернетМагазин.Видимость  = НЕ Объект.Магистраль;
		Элементы.СкладМагазина.Видимость    = НЕ Объект.Магистраль;
		//Элементы.ЗаказыКонтрагент.Видимость = Объект.Магистраль;	
		Элементы.ЗаказыКонтрагент.Видимость = Истина;
		
		Элементы.ЗаказыТекущийСтатус.Видимость = НЕ Объект.Магистраль;
		
		Элементы.СтраницаНеопознанныеШК.Заголовок = "Неопознанные ШК (" + Объект.НеопознанныеШтрихкоды.Количество() + ")";
		
		ЗаполнитьДнейСВозникновенияВозвратногоСтатуса();
		
		// Для не вскрытых проставим признак "ЗаказПодтвержденКСборке" и минуем этап подтверждения состава
		Если НЕ Объект.Вскрытые И НЕ Объект.СоставСформирован Тогда		
			Для каждого Стр Из Объект.Заказы Цикл	
				Стр.ЗаказПодтвержденКСборке = Истина;		
			КонецЦикла;	
			
			ПодтвердитьНаСервере();		
			Элементы.ФормаПодтвердитьСоставОтправки.Пометка     = Истина;
			Элементы.ФормаПодтвердитьСоставОтправки.Доступность = Ложь;
			Элементы.СоздатьВнутреннееПеремещение.Доступность = Истина;
			
			//ЗаполнитьДнейСВозникновенияВозвратногоСтатуса();	
			//ОбновитьДоступностьЭлементов();
			//ОбновитьОтображениеДанных();		
		КонецЕсли;
		
		ЗаполнитьДнейСВозникновенияВозвратногоСтатуса();	
		ОбновитьДоступностьЭлементов();
		//ОбновитьОтображениеДанных();
		
		//Если Объект.Вскрытые И Объект.ШКПоТоварам Тогда	
		//	Элементы.ТоварыКоличествоСобрано.Видимость = Ложь;	
		//Иначе
		//	Элементы.ТоварыКоличествоСобрано.Видимость = Ложь;
		//КонецЕсли;
		
		//+Степанов Задача № 3975
		ПозиционированиеПриСканировании = Истина;
		УстановитьВидимостьТЧ();
		//-Степанов Задача № 3975
		
	КонецЕсли;
	//Асеев 20.05.2022 (Задача № 4809)<<<
		
КонецПроцедуры


Процедура ОбновитьДоступностьЭлементов()

	
	//Элементы.ЗаказыКонтрагент.Видимость = Объект.Магистраль;
	//Элементы.ЗаказыКонтрагент.Видимость = Ложь;
	
	Если Объект.СоставСформирован Тогда	
		//Элементы.ЗаказыПометкаНеНужногоЗаказа.Видимость = Ложь;	
		Элементы.ЗаказыЗаказПодтвержденКСборке.Видимость = Ложь;
		Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Истина;
	Иначе	
		//Элементы.ЗаказыПометкаНеНужногоЗаказа.Видимость = Истина;
		Элементы.ЗаказыЗаказПодтвержденКСборке.Видимость = Истина;
		Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Ложь;
	КонецЕсли;
		
	Элементы.ЗаказыЗаказНайден.Видимость = Объект.СоставСформирован;		
	Элементы.МестаПоЗаказамПодтверждено.Видимость = Объект.ШКПоМестам;	
	
	// МАС - 15.05.2018 - № --->> 
	//Элементы.Группа_МестаПоЗаказам.Видимость = Объект.ШКПоМестам И НЕ Объект.Вскрытые;
	Если Объект.Магистраль Тогда	
		Элементы.Группа_МестаПоЗаказам.Видимость = НЕ Объект.Вскрытые;		
	Иначе	
		Элементы.Группа_МестаПоЗаказам.Видимость = Объект.ШКПоМестам И НЕ Объект.Вскрытые;	
	КонецЕсли;
	// <<--- МАС 
	
	
	// Информирование о расформированном отправлении
	Элементы.Надпись_отправлениеРасформировано.Видимость = Ложь;
	Если Объект.ВозвратПоставщику.ОтправлениеРасформировано Тогда	
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ЗаказыКонтекстноеМенюИзменитьТипВозврата.Доступность = Ложь;
		Элементы.Надпись_отправлениеРасформировано.Заголовок = "Отправление расформировано!";
		Элементы.Надпись_отправлениеРасформировано.Видимость = Истина;
	КонецЕсли;
	
	// доступность полей табличных частей
	Если Объект.СоставСформирован Тогда	
		Элементы.ЗаказыСобраноМест.ТолькоПросмотр = Ложь;
		Элементы.МестаПоЗаказамПодтверждено.ТолькоПросмотр = Ложь;
		Элементы.ТоварыКоличествоСобрано.ТолькоПросмотр = Ложь;
		Элементы.ЗаказыПометкаНеНужногоЗаказа.ТолькоПросмотр = Ложь;
	Иначе	
		Элементы.ЗаказыСобраноМест.ТолькоПросмотр = Истина;	
		Элементы.МестаПоЗаказамПодтверждено.ТолькоПросмотр = Истина;
		Элементы.ТоварыКоличествоСобрано.ТолькоПросмотр = Истина;		
		Элементы.ЗаказыПометкаНеНужногоЗаказа.ТолькоПросмотр = Истина;
	КонецЕсли;
			
	Элементы.ЗаказыПерепроверен.Видимость = ЭтапПерепроверки;	
		
	Элементы.ПоменятьТипВозвратаПоДокументу.Доступность = Объект.СоставСформирован И НЕ Объект.ДокументОтгрузкиСоздан;
	
	// МАС - 25.04.2018 - № --->> 
	Если Объект.Магистраль И ЗначениеЗаполнено(Объект.ДокВнутреннееПеремещение) Тогда	
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ЗаказыКонтекстноеМенюИзменитьТипВозврата.Доступность = Ложь;
		Элементы.СоздатьВнутреннееПеремещение.Доступность = Ложь;
		Элементы.ОтменитьНабор.Доступность = Ложь;
	КонецЕсли;
		
	Если Объект.Магистраль Тогда	
		//Элементы.ПоменятьТипВозвратаПоДокументу.Доступность = Ложь;	
		//Элементы.ЗаказыКонтекстноеМенюИзменитьТипВозврата.Доступность = Ложь;
		//Элементы.ЗаказыКонтекстноеМенюСкрытьЗаказВМеханизмеВозвратов.Доступность = Ложь;
		Элементы.ЗаказыКонтекстноеМенюКнопка1.Доступность = Ложь;	
		Элементы.ЗаказыКонтекстноеМенюКнопка1.Видимость = Ложь;
		Если НЕ Объект.Вскрытые Тогда
			Элементы.ЗаказыКоличествоМестТовара.Видимость = Истина;
			Элементы.ЗаказыСобраноМест.Видимость = Истина;			
		КонецЕсли;	
	КонецЕсли;	
	// <<--- МАС 
	
	Элементы.ЗаказыПоказатьСкрытьТовары.Видимость = Объект.Магистраль И НЕ Объект.Вскрытые;
	
				
КонецПроцедуры

//Асеев 20.05.2022 (Задача № 4809)>>>
&НаСервере
Процедура ОбработатьСканированиеВнесистемногоВозвратаНаСервере(ВходящиеДанные)
	
	Данные = СокрЛП(ВходящиеДанные);
	
	Попытка
		ЗаписатьДанныеСканированияВоВнешнийЛог(Неопределено, Данные, Объект.Номер);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	СтрокиВозврата = Объект.ВнесистемныйВозврат.НайтиСтроки(Новый Структура("Идентификатор", Данные));
	Если СтрокиВозврата.Количество() Тогда
		СтрокаВозврата = СтрокиВозврата[0];
		СтрокаВозврата.Количество = СтрокаВозврата.Количество + 1;
	Иначе
		СтрокаВозврата = Объект.ВнесистемныйВозврат.Добавить();
		СтрокаВозврата.Идентификатор = Данные;
		СтрокаВозврата.Количество = 1;
	КонецЕсли;
	
	Элементы.ВнесистемныйВозврат.ТекущаяСтрока = СтрокаВозврата.ПолучитьИдентификатор();
	
	Модифицированность = Истина;
	
КонецПроцедуры
//Асеев 20.05.2022 (Задача № 4809)<<<

&НаКлиенте
// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если НЕ Источник = "Сканер штрихкода" Тогда
		Возврат;
	КонецЕсли;		
  
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;	
	
	//Асеев 20.05.2022 (Задача № 4809)>>>
	Если Объект.ТипВозврата = ПредопределенноеЗначение("Справочник.ТипыВозврата.ВнесистемныйВозврат") Тогда
		
		ОбработатьСканированиеВнесистемногоВозвратаНаСервере(Данные);
		
	Иначе
	//Асеев 20.05.2022 (Задача № 4809)<<<
		
		//+Степанов Задача № 3975
		Элементы.НадписьДанныеЗаказа.Заголовок = "";
		Элементы.НадписьДанныеЗаказа.ЦветТекста = WebЦвета.ЛимонноЗеленый;
		//-Степанов Задача № 3975
		
		Сигнал = Ложь;	
		
		//+Степанов Задача № 3975
		//ТекДанные = Элементы.Заказы.ТекущиеДанные;
		//Если ТекДанные <> Неопределено Тогда			
		//	ТекЗаказ = ТекДанные.Заказ;
		//КонецЕсли;
		Если ПозиционированиеПриСканировании Тогда
			ТекДанные = Элементы.Заказы.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда			
				ТекЗаказ = ТекДанные.Заказ;
			КонецЕсли;	
		КонецЕсли;	
		//-Степанов Задача № 3975
		
		Если ЭтапИзъятия Тогда	
			ОбработатьИзъятие(СокрЛП(Данные), Сигнал);
		ИначеЕсли ЭтапПерепроверки Тогда	
			ОбработатьПерепроверку(СокрЛП(Данные), Сигнал);
		Иначе	
			//+Степанов Задача № 3975
			//ОбработатьШК(СокрЛП(Данные), ТекЗаказ, Сигнал, Объект.СоставСформирован);		
			Если ПозиционированиеПриСканировании Тогда
				ОбработатьШК(СокрЛП(Данные), ТекЗаказ, Сигнал, Объект.СоставСформирован);	
			Иначе
				ОбработатьШК(СокрЛП(Данные), ТекущийЗаказ, Сигнал, Объект.СоставСформирован);
			КонецЕсли;	
			//+Степанов Задача № 3975
		КонецЕсли;			
		
		
		
		Если Сигнал Тогда		
			Сигнал();  // пик!
			//Сообщить("пик!");	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВнешнееСобытие()



Процедура ОбработатьПерепроверку(Данные, Сигнал)

	НайШК = Объект.Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Данные));
	Если НайШК.Количество() Тогда
		
		Если Объект.ШКПоМестам Тогда
			Если ЗначениеЗаполнено(НайШК[0].МестоЗаказа) Тогда 		
				
				Най = ТЗПерепроверка.НайтиСтроки(Новый Структура("Место", НайШК[0].МестоЗаказа));	
				Для каждого Стр Из Най Цикл
					
					Стр.ПозицияПодтверждена = Истина;	
					Сигнал = Ложь;		
					
					НайЗ = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
					Для каждого Ст Из НайЗ Цикл
						Ст.Перепроверен = Истина;		
					КонецЦикла;
					
				КонецЦикла;
			Иначе
				Сигнал = Истина;										
			КонецЕсли;			
		Иначе			
			Если ЗначениеЗаполнено(НайШК[0].Заказ) Тогда			
				
				Най = ТЗПерепроверка.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
				Для каждого Стр Из Най Цикл			
					
					Стр.КолМестСобрано = ?(Стр.КолМестСобрано < Стр.КолМест, Стр.КолМестСобрано + 1, Стр.КолМестСобрано);
					Если Стр.КолМестСобрано >= Стр.КолМест Тогда		
						Стр.ПозицияПодтверждена = Истина;	
						НайЗ = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
						Для каждого Ст Из НайЗ Цикл
							Ст.Перепроверен = Истина;		
						КонецЦикла;
					КонецЕсли;									
					Сигнал = Ложь;
					
				КонецЦикла;
			Иначе
				Сигнал = Истина;	
			КонецЕсли;	
			
		КонецЕсли;		
	Иначе		
		Сигнал = Истина;		
	КонецЕсли;
	
			
	Если НЕ Сигнал Тогда
		НайОсталось = ТЗПерепроверка.НайтиСтроки(Новый Структура("ПозицияПодтверждена", Ложь));	
		Если НЕ НайОсталось.Количество() Тогда			
			Сообщить("Перепроверка выполнена. Все позиции подтверждены");
			ЭтапПерепроверки = Ложь;
			Объект.ПерепроверкаВыполнена = Истина;
			Записать();		
		КонецЕсли;
	КонецЕсли;	
	
	ОбновитьДоступностьЭлементов();
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьИзъятие(Данные, Сигнал, РучнойВвод = Ложь)
	
	
	НайШК = Объект.Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Данные));	
	Если НЕ НайШК.Количество() И Строка(Лев(Данные, 5)) = "37000" Тогда
		Данные = Лев(Данные, 12);		
	КонецЕсли;	
	НайШК = Объект.Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Данные));
	
	
	// Логируем время пика
	//+Степанов Задача № 3935
	//НЛог = Объект.ЛогСканированияШК.Добавить();
	//НЛог.Период = ТекущаяДата();
	//ШК = СокрЛП(Данные);
	Заказ = Неопределено;
	//НЛог.Штрихкод = СокрЛП(Данные);
	Если НайШК.Количество() Тогда	
		//НЛог.Заказ = НайШК[0].Заказ;	
		Заказ = НайШК[0].Заказ;
	КонецЕсли;
	//НЛог.Комментарий = "Изъятие";	
	//НЛог.РучнойВвод = РучнойВвод;
	Попытка
		ЗаписатьДанныеСканированияВоВнешнийЛог(Заказ,СокрЛП(Данные),Объект.Номер);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	//-Степанов Задача № 3935

	
	Если НайШК.Количество() Тогда	
				
		Сигнал = Ложь;
		
		// ----------- это ШК товра
		Если ЗначениеЗаполнено(НайШК[0].Товар) Тогда  			
			Най = КИзъятию.НайтиСтроки(Новый Структура("Товар", НайШК[0].Товар));		
			Для каждого Стр Из Най Цикл
				Стр.КолТовара = ?(Стр.КолТовара > 0, Стр.КолТовара - 1, 0);		
				СнятьПризнакСобранного(НайШК[0].Заказ, "Товар", Данные);
				Сигнал = Истина;
				
				Если Стр.КолТовара = 0 Тогда			
					Стр.ПозицияИзъятаИзОтправки = Истина;			
				КонецЕсли;
			КонецЦикла;		
			
		// ------- это ШК Места заказа	
		ИначеЕсли ЗначениеЗаполнено(НайШК[0].МестоЗаказа) Тогда 		
			Най = КИзъятию.НайтиСтроки(Новый Структура("Место", НайШК[0].МестоЗаказа));	
			Для каждого Стр Из Най Цикл
				Стр.ПозицияИзъятаИзОтправки = Истина;						
				СнятьПризнакСобранного(НайШК[0].Заказ, "Место", Данные);
				Сигнал = Истина;			
			КонецЦикла;		
			
		// ---------- это ШК заказа	
		Иначе 			
			Най = КИзъятию.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));	
			Для каждого Стр Из Най Цикл
				Стр.КолМест = Стр.КолМест - 1;			
				Если Стр.КолМест <= 0 Тогда	
					Стр.КолМест = 0;
					ПозицияИзъятаИзОтправки = Истина;			
					СнятьПризнакСобранного(НайШК[0].Заказ, "Заказ", Данные);
					Сигнал = Истина;
				КонецЕсли;						
			КонецЦикла;		
			
		КонецЕсли;		
		
		
		// проверка на попадание в полностью несобранные
		Если НЕ Сигнал Тогда
			НайНеСобранные = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
			Для каждого Стр Из НайНеСобранные Цикл		
				Если НЕ Стр.ЗаказНайден Тогда			
					Сигнал = Истина;					
				КонецЕсли;					
			КонецЦикла;		
		КонецЕсли;	
		
	Иначе
						
		// пишем в ТЧ НеопознанныеШтрихкоды
		НСтр = Объект.НеопознанныеШтрихкоды.Добавить();
		НСтр.Штрихкод = Данные;
		Элементы.СтраницаНеопознанныеШК.Заголовок = "Неопознанные ШК (" + Объект.НеопознанныеШтрихкоды.Количество() + ")";
		
		//Сообщить("ШК не найден (" + Данные + ")");
		Сигнал = Истина;		
	КонецЕсли;
		
	
	НайНеИзъятые = КИзъятию.НайтиСтроки(Новый Структура("ПозицияИзъятаИзОтправки", Ложь));
	Если НЕ НайНеИзъятые.Количество() Тогда	
		Сообщить("Все лишние позиции убраны из отправления");	
		ЭтапИзъятия = Ложь;	
		Элементы.ГруппаСтраницыЗаказы.ТекущаяСтраница = Элементы.СтраницаЗаказы;
		Элементы.ЧастичноСобранные.Видимость = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры


Процедура СнятьПризнакСобранного(Заказ, ТипПозиции, ШКПозиции);

	
	Если ТипПозиции = "Товар" Тогда
		
		НайТов = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказРеализация", Заказ));
		Для каждого Стр Из НайТов Цикл	
			Если Стр.ШтрихкодНоменклатуры = ШКПозиции Тогда
				Стр.КоличествоСобрано = ?(Стр.КоличествоСобрано > 0, Стр.КоличествоСобрано - 1, 0);				
			КонецЕсли;		
		КонецЦикла;		
		
	ИначеЕсли ТипПозиции = "Место" Тогда
		
		НайМесто = Объект.МестаПоЗаказам.НайтиСтроки(Новый Структура("Заказ", Заказ));
		Для каждого Стр Из НайМесто Цикл	
			Если Стр.Штрихкод = ШКПозиции Тогда
				Стр.Подтверждено = Ложь;				
			КонецЕсли;		
		КонецЦикла;	
		
	ИначеЕсли ТипПозиции = "Заказ" Тогда
		
		НайЗаказ = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
		Для каждого Стр Из НайЗаказ Цикл	
			Если Стр.Заказ = Заказ Тогда
				Стр.СобраноМест = ?(Стр.СобраноМест > 0, Стр.СобраноМест - 1, 0);				
			КонецЕсли;		
		КонецЦикла;		
	КонецЕсли;	
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШК(Данные, ТекЗаказ, Сигнал, СоставСформирован, РучнойВвод = Ложь)
	
	//CeHbKA #4073 16.07.2020	
	Если СтрДлина(Данные) > 100 Тогда
		
		Данные = Лев(Данные, 31);
		
		НайШК = Новый Массив;
		
		Для каждого СтрокаТЧ из Объект.Штрихкоды цикл
			Если СтрНайти(Данные, СтрокаТЧ.Штрихкод) > 0 Тогда
				НайШК.Добавить(СтрокаТЧ);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	Иначе	
		НайШК = Объект.Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Данные));	
		Если НЕ НайШК.Количество() И Строка(Лев(Данные, 5)) = "37000" Тогда
			Данные = Лев(Данные, 12);		
		КонецЕсли;	
		НайШК = Объект.Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Данные));				
	КонецЕсли;	
	//CeHbKA #4073 16.07.2020
	
	Сигнал = Истина;	
	
	//НайШК = Объект.Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Данные));	
	//Если НЕ НайШК.Количество() И Строка(Лев(Данные, 5)) = "37000" Тогда
	//	Данные = Лев(Данные, 12);		
	//КонецЕсли;	
	//НайШК = Объект.Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Данные));		
	
	
	//// Логируем время пика
	//+Степанов Задача № 3935
	//НЛог = Объект.ЛогСканированияШК.Добавить();
	//НЛог.Период = ТекущаяДата();
	//ШК = СокрЛП(Данные);
	//НЛог.Штрихкод = ШК;
	Заказ = Неопределено;
	Если НайШК.Количество() Тогда	
		//НЛог.Заказ = НайШК[0].Заказ;	
		Заказ = НайШК[0].Заказ;
	КонецЕсли;
	//НЛог.Комментарий = "Сканирование";	
	//НЛог.РучнойВвод = РучнойВвод;
	Попытка
		ЗаписатьДанныеСканированияВоВнешнийЛог(Заказ,СокрЛП(Данные),Объект.Номер);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	//-Степанов Задача № 3935
	
	Если НайШК.Количество() Тогда	
		
		Если НЕ СоставСформирован Тогда
			
			Если ЗначениеЗаполнено(НайШК[0].Заказ) Тогда	
				НайЗ = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));	
				Для каждого СтЗ Из НайЗ Цикл				
					СтЗ.ЗаказПодтвержденКСборке = Истина;		
					//+Степанов Задача № 3975 
					Если ПозиционированиеПриСканировании Тогда
						Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(СтЗ);  // спозиционируемся на заказе
					Иначе
						ТекущийЗаказ = СтЗ.Заказ;
						Элементы.НадписьДанныеЗаказа.Заголовок = ПолучитьНомерЗаказа(СтЗ.Заказ);
						Элементы.НадписьДанныеЗаказа.ЦветТекста = WebЦвета.ЛимонноЗеленый;
					КонецЕсли;
					//-Степанов Задача № 3975
					Сигнал = Ложь;
				КонецЦикла;		
			КонецЕсли;	
			
		Иначе		
					
			
			НайСостав = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
						
			Если НайСостав.Количество() = 0 Тогда
				//+Степанов Задача № 3975
				//Сообщить("Заказ " + НайШК[0].Заказ.Номер + "отсутствует в составе наборной ведомости!", СтатусСообщения.ОченьВажное);
				Если ПозиционированиеПриСканировании Тогда
					Сообщить(Строка(НайШК[0].Заказ) + " отсутствует в составе наборной ведомости!", СтатусСообщения.ОченьВажное);
				Иначе	
					Элементы.НадписьДанныеЗаказа.Заголовок = "Заказ " + ПолучитьНомерЗаказа(НайШК[0].Заказ) + " отсутствует в составе наборной ведомости!";
					Элементы.НадписьДанныеЗаказа.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				//-Степанов Задача № 3975
				Возврат;
			КонецеСли;
			
			//+Степанов Задача № 3975
			Элементы.НадписьДанныеЗаказа.Заголовок = ПолучитьНомерЗаказа(НайШК[0].Заказ);
			Элементы.НадписьДанныеЗаказа.ЦветТекста = WebЦвета.ЛимонноЗеленый;
			//-Степанов Задача № 3975
			
			Если НайСостав[0].ЗаказПодтвержденКСборке Тогда  // если заказ подтвержден к сборке >>>		
			
				Если ЗначениеЗаполнено(НайШК[0].Товар) И Объект.ШКПоТоварам Тогда // ----------- это ШК товра
					
					Если ЗначениеЗаполнено(ТекЗаказ) Тогда
							
						ОбрабатываемаяСтрока = НайШК[0];					
						Для каждого СтШК Из НайШК Цикл			
							Если СтШК.Заказ = ТекЗаказ Тогда			
								ОбрабатываемаяСтрока = СтШК;	
							    Прервать;
							КонецЕсли;					
						КонецЦикла;
												
						НайТовар = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ОбрабатываемаяСтрока.Товар));
										
						Для каждого Ст Из НайТовар Цикл	
							// МАС - 09.07.2018 - № --->> 						
							//Если ОбрабатываемаяСтрока.Заказ = ТекЗаказ Тогда		
							Если Ст.ЗаказРеализация = ТекЗаказ Тогда
							// <<--- МАС
								Ст.КоличествоСобрано = Ст.КоличествоСобрано + 1;	// + 1 место к количеству собранного товара			
								//+Степанов Задача № 3975 
								Если ПозиционированиеПриСканировании Тогда
									Элементы.Товары.ТекущаяСтрока = Объект.Товары.Индекс(Ст);  // спозиционируемся на Товаре
								КонецЕсли;	
								//-Степанов Задача № 3975
								Сигнал = Ложь;
								ОбновитьСостояниеПоЗаказу(ТекЗаказ);	
							КонецЕсли;								
						КонецЦикла;
															
					КонецЕсли;		
					
				ИначеЕсли ЗначениеЗаполнено(НайШК[0].МестоЗаказа) Тогда // ------- это ШК Места заказа	
					
					Если Объект.ШКПоМестам Тогда		
						НайМесто = Объект.МестаПоЗаказам.НайтиСтроки(Новый Структура("МестоЗаказа", НайШК[0].МестоЗаказа));			
						Для каждого СтМ Из НайМесто Цикл						
							СтМ.Подтверждено = Истина; 
							Сигнал = Ложь;
							НайЗ = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
							Если НайЗ.Количество() Тогда				
								//+Степанов Задача № 3975 
								Если ПозиционированиеПриСканировании Тогда
									Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайЗ[0]);  // спозиционируемся на заказе	
								Иначе
									ТекущийЗаказ = НайЗ[0].Заказ;
								КонецЕсли;	
								//-Степанов Задача № 3975 	
							КонецЕсли;	
							ОбновитьСостояниеПоЗаказу(НайШК[0].Заказ);				
						КонецЦикла;		
					КонецЕсли;		
					
					
					Если Объект.ШКПоТоварам И Объект.Вскрытые Тогда								
						НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
						Если НайЗак.Количество() И НайЗак[0].ЗаказПодтвержденКСборке Тогда		
							//+Степанов Задача № 3975
							Если ПозиционированиеПриСканировании Тогда 
								Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайЗак[0]);  // спозиционируемся на заказе	
							Иначе
								ТекущийЗаказ = НайЗак[0].Заказ;
							КонецЕсли;	
							//-Степанов Задача № 3975
							Сигнал = Ложь;
						КонецЕсли;			
					КонецЕсли;
					
					
					Если НЕ Объект.Вскрытые И НЕ Объект.ШКПоМестам Тогда						
						НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
						Для каждого СтЗ Из НайЗак Цикл							
							Если СтЗ.ПометкаНеВозвратныйЗаказ Тогда
								Сообщить("Внимание! Сканированный штрихкод ("+ Данные +") принадлежит заказу, который был исключен из собираемой партии : " + СтЗ.Заказ);			
								Сигнал = Истина;
							Иначе
								СтЗ.СобраноМест = СтЗ.СобраноМест + 1;  // + 1 место к заказу
								//+Степанов 
								Если СтЗ.КоличествоМестТовара >= СтЗ.СобраноМест Тогда
								//Если СтЗ.КоличествоМестТовара <= СтЗ.СобраноМест Тогда
									СтЗ.ЗаказНайден = Истина;										
								КонецЕсли;
								Сигнал = Ложь;
								//+Степанов Задача № 3975
								Если ПозиционированиеПриСканировании Тогда
									Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайЗак[0]);  // спозиционируемся на заказе
								Иначе
									ТекущийЗаказ = НайЗак[0].Заказ;
								КонецЕсли;	
								//-Степанов Задача № 3975
							КонецЕсли;										
						КонецЦикла;			
					КонецЕсли;					
					
				Иначе // ---------- это ШК заказа
					
					// проверка на переход к следующему заказу, при частичной сборке текущего
					Если Объект.Вскрытые И Объект.ШКПоТоварам Тогда											
						НайЗ = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", ТекЗаказ));
						Если НайЗ.Количество() Тогда
							Если НайЗ[0].СобранЧастично Тогда
								//Сообщить("Текущий заказ собран не полностью");
								//+Степанов Задача № 3975
								Элементы.НадписьДанныеЗаказа.Заголовок = "Текущий заказ собран не полностью";
								Элементы.НадписьДанныеЗаказа.ЦветТекста = WebЦвета.Красный;
								//-Степанов Задача № 3975
								Сигнал = Истина;	
								Возврат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
										
					НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", НайШК[0].Заказ));
					
					Если НайЗак.Количество() И НайЗак[0].ЗаказПодтвержденКСборке Тогда
						
						Если (Объект.Вскрытые И Объект.ШКПоТоварам) ИЛИ Объект.ШКПоМестам Тогда								
							//+Степанов Задача № 3975
							Если ПозиционированиеПриСканировании Тогда
								Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайЗак[0]);  // спозиционируемся на заказе	
							Иначе
								ТекущийЗаказ = НайЗак[0].Заказ;
							КонецЕсли;	
							//-Степанов Задача № 3975
							Сигнал = Ложь;
						Иначе
							Если НЕ Объект.Вскрытые Тогда
								
								Для каждого СтЗ Из НайЗак Цикл	
									Если СтЗ.ПометкаНеВозвратныйЗаказ Тогда
										Сообщить("Внимание! Сканированный штрихкод ("+ Данные +") принадлежит заказу, который был исключен из собираемой партии : " + СтЗ.Заказ);								
										//+Степанов Задача № 3975
										Элементы.НадписьДанныеЗаказа.Заголовок = "Внимание! Сканированный штрихкод ("+ Данные +") принадлежит заказу, который был исключен из собираемой партии : " + Строка(СтЗ.Заказ);
										Элементы.НадписьДанныеЗаказа.ЦветТекста = WebЦвета.Красный;
										//-Степанов Задача № 3975

										Сигнал = Истина;
									Иначе
										СтЗ.СобраноМест = СтЗ.СобраноМест + 1;  // + 1 место к заказу
										Если СтЗ.КоличествоМестТовара >= СтЗ.СобраноМест Тогда										
											СтЗ.ЗаказНайден = Истина;										
										КонецЕсли;					
										Сигнал = Ложь;
										//+Степанов Задача № 3975
										Если ПозиционированиеПриСканировании Тогда
											Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайЗак[0]);  // спозиционируемся на заказе
										Иначе
											ТекущийЗаказ = НайЗак[0].Заказ;
										КонецЕсли;	
										//-Степанов Задача № 3975
									КонецЕсли;											
								КонецЦикла;
													
							Иначе
								Если Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайЗак[0]) Тогда								
									// ничего не происходит, так как ШК по товарам нет, подразумевается изменение кол собранных товаров руками 
									Сигнал = Истина;							
								Иначе									
									//+Степанов Задача № 3975
									Если ПозиционированиеПриСканировании Тогда
										Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(НайЗак[0]);  // спозиционируемся на заказе
									Иначе
										ТекущийЗаказ = НайЗак[0].Заказ;
									КонецЕсли;
									//-Степанов Задача № 3975
									Сигнал = Ложь;
								КонецЕсли;										    			
							КонецЕсли;
														
						КонецЕсли;				
					
					КонецЕсли;					
					
				КонецЕсли;	
			
			КонецЕсли; // если заказ подтвержден к сборке <<<	
			
		КонецЕсли;				
			
	
	Иначе // ШК не найден среди ШК
		
		// пишем в ТЧ НеопознанныеШтрихкоды
		НСтр = Объект.НеопознанныеШтрихкоды.Добавить();
		НСтр.Штрихкод = Данные;
		Элементы.СтраницаНеопознанныеШК.Заголовок = "Неопознанные ШК (" + Объект.НеопознанныеШтрихкоды.Количество() + ")";
		//+Степанов
		Элементы.НадписьДанныеЗаказа.Заголовок = "Не найдено";
		Элементы.НадписьДанныеЗаказа.ЦветТекста = WebЦвета.Красный;
		//-Степанов
		//Сообщить("ШК не найден (" + Данные + ")");
		Сигнал = Истина;		
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьСкрытьТовары(Команда)
	
	Элементы.Группа_Товары.Видимость = НЕ Элементы.Группа_Товары.Видимость;
 	Элементы.ЗаказыПоказатьСкрытьТовары.Пометка = НЕ Элементы.ЗаказыПоказатьСкрытьТовары.Пометка;
	
КонецПроцедуры


&НаКлиенте
Процедура ВозвратПоставщику_ГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Документ.ВозвратТоваровПоставщику.Форма.ФормаДокументаУпр", Новый Структура("Ключ", Объект.ВозвратПоставщику), ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыКоличествоСобраноПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ОбновитьСостояниеПоЗаказу(ТекДанные.ЗаказРеализация);
	
	Элементы.Товары.ВыделенныеСтроки.Очистить();
	Элементы.Товары.ТекущийЭлемент = Неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура МестаПоЗаказамПодтвержденоПриИзменении(Элемент)
	
	ТекДанные = Элементы.МестаПоЗаказам.ТекущиеДанные;
	ОбновитьСостояниеПоЗаказу(ТекДанные.Заказ);
		
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыСобраноМестПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	ОбновитьСостояниеПоЗаказу(ТекДанные.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеПоЗаказу(Заказ)
	
	ЗаказСобранЧастично = Ложь;
	
	Если Объект.Вскрытые Тогда	
		
		НайТ = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказРеализация", Заказ));
		ЗаказСобран = Истина;		
		Для каждого СтрТ Из НайТ Цикл		
			Если СтрТ.Количество > СтрТ.КоличествоСобрано Тогда			
				ЗаказСобран = Ложь;	
				ЗаказСобранЧастично = Истина;
			КонецЕсли;				
		КонецЦикла;	
		
		НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));	
		Для каждого СтрЗ Из НайЗак Цикл			
			СтрЗ.ЗаказНайден = ЗаказСобран;		
			СтрЗ.СобранЧастично = ЗаказСобранЧастично;
		КонецЦикла;	
		
	ИначеЕсли Объект.ШКПоМестам Тогда 
		
		НайМ = Объект.МестаПоЗаказам.НайтиСтроки(Новый Структура("Заказ", Заказ));
		ЗаказСобран = Истина;		
		Для каждого СтрМ Из НайМ Цикл		
			Если НЕ СтрМ.Подтверждено Тогда			
				ЗаказСобран = Ложь;
				ЗаказСобранЧастично = Истина;
			КонецЕсли;				
		КонецЦикла;
		
		НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));	
		Для каждого СтрЗ Из НайЗак Цикл			
			СтрЗ.ЗаказНайден = ЗаказСобран;	
			СтрЗ.СобранЧастично = ЗаказСобранЧастично;
		КонецЦикла;
	Иначе	
				
		НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
		Для каждого СтрЗ Из НайЗак Цикл
			Если СтрЗ.КоличествоМестТовара <= СтрЗ.СобраноМест Тогда		
				СтрЗ.ЗаказНайден = Истина;
			Иначе
				СтрЗ.СобранЧастично = Истина;
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;	
	
	
	//Если ЗаказСобранЧастично Тогда		
	//	Най = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	//    Для каждого Ст Из Най Цикл	
	//		Ст.СобранЧастично = Истина;		
	//	КонецЦикла;			
	//КонецЕсли;
	
	
	Элементы.ЗаказыПроставитьВсе.Доступность = НЕ Объект.СоставСформирован;
	Элементы.ЗаказыСнятьВсе.Доступность      = НЕ Объект.СоставСформирован;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВернутьЗаказНаКомплектацию(Команда)
		
	ТекДанные = Элементы.Заказы.ТекущиеДанные;			
	Если ТекДанные <> Неопределено Тогда	
			
		ЗаказПринятИМ = ЗаказПринятИМ(ТекДанные.Заказ);	 // Проверим, не принят ли заказ магазином
		
		Если ЗаказПринятИМ Тогда	
			#Если Клиент Тогда
				Сообщить("Заказ был возвращен в ИМ. Его нельзя вернуть на комплектацию");	
			#КонецЕсли					
			
		Иначе			
			Если Объект.ДокументОтгрузкиСоздан Тогда	
				ОО = Новый ОписаниеОповещения("ВернутьЗаказПослеОтвета", ЭтаФорма, Новый Структура("Заказ", ТекДанные.Заказ));	
				ПоказатьВопрос(ОО, "Возврат уже сформирован. Всё-равно убрать заказ из отправки и вернуть его на комплектацию?", РежимДиалогаВопрос.ДаНет);				
			Иначе		
				// отмечаем заказ как удаленный из отправки
				НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", ТекДанные.Заказ));
				Для каждого Стр Из НайЗак Цикл	
					//Стр.ЗаказУдаленИзОтправки = Истина;		
					Стр.ЗаказПодтвержденКСборке = Ложь;
				КонецЦикла;				
				Модифицированность = Истина;
				
			КонецЕсли;			
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры


&НаКлиенте
Процедура ВернутьЗаказПослеОтвета(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда		
		ВернутьЗаказНаКомплектациюНаСервере(Параметры.Заказ);		
		Записать();
	КонецЕсли;		

КонецПроцедуры


Процедура ВернутьЗаказНаКомплектациюНаСервере(Заказ)
		 
	Попытка			
		// обработаем документ ВозвратПоставщику
		ВозвратОбъект = Объект.ВозвратПоставщику.ПолучитьОбъект();
		ВозвратОбъект.УдалитьЗаказИзОтправления(Заказ);
		ВозвратОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		// отмечаем заказ как удаленный из отправки
		НайЗак = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
		Для каждого Стр Из НайЗак Цикл	
			//Стр.ЗаказУдаленИзОтправки = Истина;	
			Стр.ЗаказПодтвержденКСборке = Ложь;
		КонецЦикла;			
	Исключение	
		
		ТекстОшибки = ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить("Не удалось изъять заказ из отправки: " + ТекстОшибки + Символы.ПС + " Попробуйте повторить операцию позднее");	
		#КонецЕсли			
	КонецПопытки;
	
КонецПроцедуры


Функция ЗаказПринятИМ(Заказ)

	ЗаказПринятИМ = Ложь;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтатусыСкладскогоУчета.Период КАК Период,
	                      |	СтатусыСкладскогоУчета.СтатусСкладскогоУчета КАК СтатусСкладскогоУчета,
	                      |	СтатусыСкладскогоУчета.Заказ КАК Заказ
	                      |ИЗ
	                      |	РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
	                      |ГДЕ
	                      |	СтатусыСкладскогоУчета.Заказ = &Заказ
	                      |	И СтатусыСкладскогоУчета.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ВозвратПринятМагазином)");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		ЗаказПринятИМ = Истина;	
	КонецЕсли;	
	
	Возврат ЗаказПринятИМ;	
	
КонецФункции // ()


&НаКлиенте
Процедура ПоказатьСкрытьМеста(Команда)
	
	Элементы.Группа_МестаПоЗаказам.Видимость = НЕ Элементы.Группа_МестаПоЗаказам.Видимость;
 	Элементы.ЗаказыПоказатьСкрытьМеста.Пометка = НЕ Элементы.ЗаказыПоказатьСкрытьМеста.Пометка;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьТипВозврата(Команда)
		
	ТекДанные = Элементы.Заказы.ТекущиеДанные;			
	Если ТекДанные <> Неопределено Тогда	
		
		Спис = Новый СписокЗначений;
		Спис.Добавить(ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат1"), "НЕ вскрытый");
		Спис.Добавить(ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2"), "Вскрытый");			
		Парам = Новый Структура("Заказ", ТекДанные.Заказ);
		Парам.Вставить("ТипЗаказа", ТекДанные.ТипЗаказа);
		
		ОО = Новый ОписаниеОповещения("ИзменитьТипВозвратаПослеОтвета", ЭтаФорма, Парам);
		ПоказатьВыборИзСписка(ОО, Спис);
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ИзменитьТипВозвратаПослеОтвета(Результат, Параметры) Экспорт
	//+Степанов
	Если Результат <> Неопределено Тогда
		ТекДанные = Элементы.Заказы.ТекущиеДанные;
		Если ТекДанные.ТекущийСтатус <> Результат.Значение Тогда
		
			ИзменитьТипВозвратаНаСервере(Параметры.Заказ, Результат.Значение, Параметры.ТипЗаказа);	
		Иначе
			Сообщить("Тип возврата не изменён");
		КонецЕсли;			
	КонецЕсли;
	//-Степанов
КонецПроцедуры


Процедура ИзменитьТипВозвратаНаСервере(Заказ, ТипВозврата, ТипЗаказа)

	Струк = Новый Структура;
	Струк.Вставить("Заказ", Заказ);
	Состояние = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(Объект.Дата, Струк);
	
	
	ДокументОбъект = Документы.УстановкаСтатусовСкладскогоУчета.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДата();
	ДокументОбъект.Заказ = Заказ;
	ДокументОбъект.СтатусСкладскогоУчета = ТипВозврата;
	ДокументОбъект.ТипЗаказа = ТипЗаказа;
	
	ДокументОбъект.РезультатДоставки = Состояние.РезультатДоставки;
	ДокументОбъект.ПричинаНевыполнения = Состояние.ПричинаНевыполнения;
	ДокументОбъект.ТерминалОбработки = ПараметрыСеанса.ТерминалДоставки;
	//ДокументОбъект.axi = axi;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НайЗ = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
		Для каждого Ст Из НайЗ Цикл
			Ст.ЗаказУдаленИзОтправки = Истина;
			//Ст.ЗаказУдаленИзОтправки = Истина;
			Ст.ЗаказПодтвержденКСборке = Ложь;
		КонецЦикла;
		
	Исключение
	    #Если Клиент Тогда
	        Сообщить(ОписаниеОшибки());    
	    #КонецЕсли
	КонецПопытки;

КонецПроцедуры


Процедура ЗаполнитьДнейСВозникновенияВозвратногоСтатуса() 

	
	ТекВр = ТекущаяДата();
	
	СписокЗаказов = Объект.Заказы.Выгрузить(, "Заказ");
	СтатусСкладскогоУчета = Новый Массив;
	СтатусСкладскогоУчета.Добавить(ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат1"));
	СтатусСкладскогоУчета.Добавить(ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2"));
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтатусыСкладскогоУчета.Период КАК Период,
	                      |	СтатусыСкладскогоУчета.Заказ КАК Заказ
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
	                      |ГДЕ
	                      |	СтатусыСкладскогоУчета.Заказ В(&СписокЗаказов)
	                      |	И СтатусыСкладскогоУчета.СтатусСкладскогоУчета В(&СтатусСкладскогоУчета)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МИНИМУМ(ВТ.Период) КАК Период,
	                      |	ВТ.Заказ КАК Заказ
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.Заказ");		
	Запрос.УстановитьПараметр("СтатусСкладскогоУчета", СтатусСкладскогоУчета);
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл		
		
		КолДней = (НачалоДня(ТекВр)-НачалоДня(Рез.Период)) /(60*60*24);			
		НайЗ = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Рез.Заказ));
		Для каждого Ст Из НайЗ Цикл		
			Ст.ДнейВозврата = КолДней;			
		КонецЦикла;		
		
	КонецЦикла;
	

КонецПроцедуры


&НаКлиенте
Процедура ПроставитьВсе(Команда)
	
	Если НЕ Объект.СоставСформирован Тогда	
		Для каждого Стр Из Объект.Заказы Цикл	
			Стр.ЗаказПодтвержденКСборке = Истина;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Если НЕ Объект.СоставСформирован Тогда
		Для каждого Стр Из Объект.Заказы Цикл	
			Стр.ЗаказПодтвержденКСборке = Ложь;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВвестиШК(Команда)
	
	СтрокаЗнач = "";
	ОО = Новый ОписаниеОповещения("ПослеВводаШК", ЭтаФорма, Новый Структура("", ));	
	ПоказатьВводСтроки(ОО, СтрокаЗнач);				
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеВводаШК(Результат, Парам) Экспорт
	
	//Асеев 20.05.2022 (Задача № 4809)>>>
	Если Объект.ТипВозврата = ПредопределенноеЗначение("Справочник.ТипыВозврата.ВнесистемныйВозврат") Тогда
		Если Не ПустаяСтрока(Результат) Тогда
			ОбработатьСканированиеВнесистемногоВозвратаНаСервере(Результат);
		КонецЕсли;
	Иначе
		//Асеев 20.05.2022 (Задача № 4809)<<<
		
		//+Степанов Задача № 3975
		Если ПозиционированиеПриСканировании Тогда	
			ТекДанные = Элементы.Заказы.ТекущиеДанные;
		КонецЕсли;
		//-Степанов Задача № 3975
		
		
		Сигнал = Ложь;
		Если ЗначениеЗаполнено(Результат) Тогда
			
			Если ЭтапИзъятия Тогда	
				ОбработатьИзъятие(СокрЛП(Результат), Сигнал);
			ИначеЕсли ЭтапПерепроверки Тогда	
				ОбработатьПерепроверку(СокрЛП(Результат), Сигнал);
			Иначе
				//+Степанов Задача № 3975
				Если ПозиционированиеПриСканировании Тогда
					ОбработатьШК(СокрЛП(Результат), ТекДанные.Заказ, Сигнал, Объект.СоставСформирован, Истина);			
				Иначе
					ОбработатьШК(СокрЛП(Результат), ТекущийЗаказ, Сигнал, Объект.СоставСформирован, Истина);	
				КонецЕсли;
				//-Степанов Задача № 3975
			КонецЕсли;		
			//ОбработатьШК(СокрЛП(Результат), ТекДанные.Заказ, Сигнал, Объект.СоставСформирован, Истина);	
			
			
			Если Сигнал Тогда		
				Сигнал();  // пик!
				//Сообщить("пик!");	
			КонецЕсли;		
		Иначе	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПриАктивизацииЯчейки(Элемент)
	
	
	Если Объект.Заказы.Количество() Тогда		
		Для каждого Ст Из Объект.Заказы Цикл	
			Ст.ТекущаяСтрока = Ложь;		
		КонецЦикла;	
		ТекСтрока = Элементы.Заказы.ТекущаяСтрока;
		Если ТекСтрока <> Неопределено Тогда		
			Объект.Заказы[ТекСтрока].ТекущаяСтрока = Истина;			
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.Заказы.ВыделенныеСтроки.Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура КИзъятиюПозицияИзъятаИзОтправкиПриИзменении(Элемент)
	
	//НайНеИзъятые = КИзъятию.НайтиСтроки(Новый Структура("ПозицияИзъятаИзОтправки", Ложь));
	//Если НЕ НайНеИзъятые.Количество() Тогда	
	//	Сообщить("Все лишние позиции убраны из отправления");	
	//	ЭтапИзъятия = Ложь;	
	//	Элементы.ГруппаСтраницыЗаказы.ТекущаяСтраница = Элементы.СтраницаЗаказы;
	//	Элементы.ЧастичноСобранные.Видимость = Ложь;
	//КонецЕсли;
	
	Сигнал = Ложь;
	ТекДанные = Элементы.КИзъятию.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда	
		ОбработатьИзъятие(ТекДанные.ШтрихкодПозиции, Сигнал); 		
	КонецЕсли;
		
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	ЗаполнитьДнейСВозникновенияВозвратногоСтатуса();	
	
КонецПроцедуры


&НаКлиенте
Процедура НеСобранные(Команда)
		
	Элементы.ЗаказыНеСобранные.Пометка = НЕ Элементы.ЗаказыНеСобранные.Пометка;	
	УстановитьОтборНЕСобранные(Элементы.ЗаказыНеСобранные.Пометка);
	
КонецПроцедуры


Процедура УстановитьОтборНЕСобранные(Установить)

	Для каждого Стр Из УсловноеОформление.Элементы Цикл				
		Если Стр.Представление = "НЕСобранные" Тогда			
			Стр.Использование = Установить;
		КонецЕсли;		
	КонецЦикла;	
	
	Элементы.Заказы.Обновить();
	
	Для каждого СтрЗ Из Объект.Заказы Цикл	
		Если НЕ СтрЗ.ЗаказНайден И НЕ СтрЗ.СобранЧастично Тогда		
			Элементы.Заказы.ТекущаяСтрока = Объект.Заказы.Индекс(СтрЗ);	
		    Прервать;			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьВнутреннееПеремещение(Команда)
	
	СоздатьВнутреннееПеремещениеНаСервере();
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры


Процедура СоздатьВнутреннееПеремещениеНаСервере()
	
	
	//  проверки
	МожноСоздавать = Ложь;
	Для каждого Стр Из Объект.Заказы Цикл	
		Если Стр.ЗаказНайден И НЕ Стр.ЗаказУдаленИзОтправки Тогда		
			МожноСоздавать = Истина;			
		КонецЕсли;		
	КонецЦикла;
	
	
	
	// создадим и заполним перемещение
	Если МожноСоздавать Тогда
		
		НДок = Документы.ВнутреннееПеремещениеЗаказов.СоздатьДокумент();
		НДок.Дата = ТекущаяДата();
		
		ТерминалПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТерминалДоставки");
		Если НЕ ЗначениеЗаполнено(ТерминалПользователя) Тогда	
			ТерминалПользователя = ПредопределенноеЗначение("Справочник.РегиональныеТерминалы.СПбСтриж");			
		КонецЕсли;
		НДок.ТерминалОтправки  = ТерминалПользователя; 		
		НДок.ТерминалПолучения = Объект.Заказы[0].Заказ.ТерминалПриема;
		НДок.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Для каждого Ст Из Объект.Заказы Цикл
			Если Ст.ЗаказНайден И НЕ Ст.ЗаказУдаленИзОтправки Тогда			
				НСт = НДок.Заказы.Добавить();	
				НСт.Заказ = Ст.Заказ;
				НСт.КоличествоМест = Ст.КоличествоМестТовара;
				НСт.КоличествоМестПередано = Ст.КоличествоМестТовара;
				НСт.КоличествоМестСканировано = Ст.КоличествоМестТовара;
				НСт.КОтправлению = Истина;		
				НСт.Отправлено = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		НДок.Записать(РежимЗаписиДокумента.Запись);
			
		Объект.ДокВнутреннееПеремещение = НДок.Ссылка;
		
		ОбновитьДоступностьЭлементов();
		
		Записать();
		
		Сообщить("Подготовлен документ на магистраль №" + НДок.Номер);
		
	Иначе
		Сообщить("Нет собранных заказов");
	КонецЕсли;
		 

КонецПроцедуры


&НаКлиенте
Процедура ПоменятьТипВозвратаПоДокументу(Команда)

	
	Отказ = Ложь;
	
	Если Объект.СоставСформирован Тогда
		Если Объект.ДокументОтгрузкиСоздан Тогда
			Сообщить("Возврат создан, операция невозможна");						
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ДокВнутреннееПеремещение.Пустая() Тогда
			Сообщить("Внутреннее перемещение создано, операция невозможна");						
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе	
		Сообщить("Смена типа возврата по документу возможна только для сформированного состава отгрузки");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Парам = Новый Структура("Отказ", Отказ);
	ОО = Новый ОписаниеОповещения("ПоменятьТипВозвратаПоДокументу_ПослеПредупреждения", ЭтаФорма, Парам);
	ПоказатьПредупреждение(ОО, "Внимание! Данные по собранным заказам будут очищены");
		
	
КонецПроцедуры


&НаКлиенте
Процедура ПоменятьТипВозвратаПоДокументу_ПослеПредупреждения(Результат) Экспорт

	Если НЕ Результат.Отказ Тогда		
		Спис = Новый СписокЗначений;
		Спис.Добавить(ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат1"), "НЕ вскрытый");
		Спис.Добавить(ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2"), "Вскрытый");			
		Парам = Новый Структура();
		
		ОО = Новый ОписаниеОповещения("ПоменятьТипВозвратаПоДокументу_ПослеОтвета", ЭтаФорма, Парам);
		ПоказатьВыборИзСписка(ОО, Спис, Элементы.ПоменятьТипВозвратаПоДокументу);	
	КонецЕсли;

КонецПроцедуры

 
&НаКлиенте
Процедура ПоменятьТипВозвратаПоДокументу_ПослеОтвета(Результат, Параметры) Экспорт
		
	
	Если Результат <> Неопределено И Результат.Значение <> Объект.СтатусВозврата Тогда		
		
		Попытка				
			ПоменятьСтатусыЗаказовНаСервере(Результат.Значение);
			Объект.СтатусВозврата = Результат.Значение;
			//Асеев 20.05.2022 (Задача № 4809)>>>
			Если Объект.СтатусВозврата = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат1") Тогда
				Объект.ТипВозврата = ПредопределенноеЗначение("Справочник.ТипыВозврата.НеВскрытыеЗаказы");
			ИначеЕсли Объект.СтатусВозврата = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2") Тогда
				Объект.ТипВозврата = ПредопределенноеЗначение("Справочник.ТипыВозврата.ВскрытыеЗаказы");
			Иначе
				Объект.ТипВозврата = Неопределено;
			КонецЕсли;
			//Асеев 20.05.2022 (Задача № 4809)<<<
			Для каждого Ст Из Объект.Заказы Цикл			
				Если Ст.ЗаказПодтвержденКСборке И НЕ Ст.ПометкаНеВозвратныйЗаказ Тогда			
					Если Ст.ТекущийСтатус = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат1") 
						ИЛИ Ст.ТекущийСтатус = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2") Тогда			
						Ст.ТекущийСтатус = Результат.Значение;				
					КонецЕсли;	
				КонецЕсли;			
			КонецЦикла;								
			
			Если Результат.Значение = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2") Тогда				
				Объект.Вскрытые = Истина;
			Иначе			
				Объект.Вскрытые = Ложь;
			КонецЕсли;				
			Записать();				
		Исключение			
	        Сообщить(ОписаниеОшибки());    		
		КонецПопытки;		
			
		
		ШКПоМестамТоварам  = УчитыватьШКМестТоваровПоЗаказу(Объект.ИнтернетМагазин);
		Объект.ШКПоМестам  = ШКПоМестамТоварам.ШКПоМестам;
		Объект.ШКПоТоварам = ШКПоМестамТоварам.ШКПоТоварам;
		
		Если Результат.Значение = ПредопределенноеЗначение("Справочник.СтатусыСкладскогоУчета.Возврат2") Тогда
			Объект.Вскрытые = Истина;	
		Иначе	
		    Объект.Вскрытые = Ложь;
		КонецЕсли;
		Объект.Дата = ТекущаяДата();
		
				
		// обновим отображение формы 		
		Если Объект.Вскрытые И НЕ Объект.Магистраль Тогда	
			Элементы.Группа_Товары.Видимость = Истина;		
		Иначе	
			Элементы.Группа_Товары.Видимость = Ложь;	
		КонецЕсли;	
					
		Элементы.МестаПоЗаказам.Видимость = Объект.ШКПоМестам ИЛИ Объект.Магистраль;	
		Элементы.ФормаПодтвердитьСоставОтправки.Пометка     = Объект.СоставСформирован;
		Элементы.ФормаПодтвердитьСоставОтправки.Доступность = НЕ Объект.СоставСформирован;		
		Элементы.ФормаСоздатьВозвратТоваровПоставщику.Пометка = Объект.ДокументОтгрузкиСоздан;		
		Элементы.ФормаСоздатьВозвратТоваровПоставщику.Видимость   = НЕ Объект.Магистраль;
		Элементы.СоздатьВнутреннееПеремещение.Видимость   = Объект.Магистраль;	
		Элементы.СоздатьВнутреннееПеремещение.Доступность = Объект.СоставСформирован;
		Элементы.ЧастичноСобранные.Видимость = Ложь;
		
		Если Объект.ДокументОтгрузкиСоздан ИЛИ НЕ Объект.СоставСформирован Тогда	
			Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Ложь;		
		Иначе	
			Элементы.ФормаСоздатьВозвратТоваровПоставщику.Доступность = Истина;	
		КонецЕсли;	
		
		Элементы.ВозвратПоставщику_Гиперссылка.Видимость = ЗначениеЗаполнено(Объект.ВозвратПоставщику);
		Элементы.ЗаказыЗаказНайден.Видимость = Объект.СоставСформирован;
		Элементы.ЗаказыСобраноМест.Видимость = НЕ Объект.Вскрытые И НЕ Объект.ШКПоМестам;
		Элементы.ЗаказыКоличествоМестТовара.Видимость = НЕ Объект.Вскрытые И НЕ Объект.ШКПоМестам;
		Элементы.ЗаказыКоличествоМестТовара1.Видимость = НЕ Элементы.ЗаказыКоличествоМестТовара.Видимость;		
		Элементы.ЗаказыПоказатьСкрытьТовары.Доступность = НЕ Объект.Вскрытые;
		
		Элементы.ИнтернетМагазин.Видимость  = НЕ Объект.Магистраль;
		Элементы.СкладМагазина.Видимость    = НЕ Объект.Магистраль;
		//Элементы.ЗаказыКонтрагент.Видимость = Объект.Магистраль;
		Элементы.ЗаказыКонтрагент.Видимость = Истина;
		
		Элементы.ЗаказыТекущийСтатус.Видимость = НЕ Объект.Магистраль;
		
		Элементы.СтраницаНеопознанныеШК.Заголовок = "Неопознанные ШК (" + Объект.НеопознанныеШтрихкоды.Количество() + ")";
		
		ОбновитьДоступностьЭлементов();	
		
	Иначе			
		Сообщить("Тип возврата не изменен");		
	КонецЕсли;		
	
	ЭтаФорма.ОбновитьОтображениеДанных();	
	
КонецПроцедуры


Процедура ПоменятьСтатусыЗаказовНаСервере(ТипВ)

	
	ДокументОбъект = Документы.ГрупповаяУстановкаСтатусовСкладскогоУчета.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДата();
	ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.СтатусСкладскогоУчета = ТипВ;
	
	ДокументОбъект.ТерминалОбработки = Объект.ТерминалДоставки; // Задача № 3047; 
	
	Для каждого Стр Из Объект.Заказы Цикл	
		Если Стр.ЗаказПодтвержденКСборке И НЕ Стр.ПометкаНеВозвратныйЗаказ Тогда
			
			НСтр = ДокументОбъект.СтатусыЗаказов.Добавить();
			НСтр.Заказ = Стр.Заказ;	
			НСтр.ТипЗаказа = Стр.ТипЗаказа;
			НСтр.СтатусСкладскогоУчета = ТипВ;			
		
		КонецЕсли;
			
	КонецЦикла;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);			

КонецПроцедуры


&НаКлиенте
Процедура КИзъятиюКолТовараПриИзменении(Элемент)
		
	ТекДанные = Элементы.КИзъятию.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		ШКПозиции = ТекДанные.ШтрихкодПозиции;	
		НайТов = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказРеализация", ТекДанные.Заказ));
		Для каждого Стр Из НайТов Цикл	
			Если Стр.ШтрихкодНоменклатуры = ШКПозиции Тогда
				Стр.КоличествоСобрано = ?(Стр.КоличествоСобрано > 0, Стр.КоличествоСобрано - 1, 0);				
			КонецЕсли;		
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ТабЗ = Новый ТаблицаЗначений;
	//ТабЗ.Колонки.Добавить("ЗаказРеализация");
	//ТабЗ.Колонки.Добавить("Номенклатура");
	//ТабЗ.Колонки.Добавить("Комментарий");
	//
	//Для каждого Ст Из Объект.Товары Цикл		
	//	Если ЗначениеЗаполнено(Ст.Комментарий) Тогда		
	//		НСтр = ТабЗ.Добавить();	
	//		ЗаполнитьЗначенияСвойств(НСтр, Ст);		
	//	КонецЕсли;	
	//КонецЦикла;	
	//Хранилище = Новый ХранилищеЗначения(ТабЗ, Новый СжатиеДанных(9));
	//
	//РОбъект = РеквизитФормыВЗначение("Объект");	
	//РОбъект.КладоваяКомментариевПоТоварам = Новый ХранилищеЗначения(ТабЗ, Новый СжатиеДанных(9));	
	//ЗначениеВРеквизитФормы(РОбъект, "Объект");
	
КонецПроцедуры


Функция УчитыватьШКМестТоваровПоЗаказу(Контр)

	
	СтрВозвр = Новый Структура();
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам, ЛОЖЬ) КАК ШКПоМестам,
	                      |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам, ЛОЖЬ) КАК ШКПоТоварам
	                      |ИЗ
	                      |	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент В (&Контрагент)) КАК ПараметрыКонтрагентовСрезПоследних");	
	Запрос.УстановитьПараметр("Контрагент", Контр);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		СтрВозвр.Вставить("ШКПоТоварам", Рез.ШКПоТоварам);
		СтрВозвр.Вставить("ШКПоМестам", Рез.ШКПоМестам);
		Возврат СтрВозвр;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	

КонецФункции // ()


&НаКлиенте
Процедура ЗаказыПерепроверенПриИзменении(Элемент)
	
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	ТекДанные.Перепроверен = НЕ ТекДанные.Перепроверен;
	НайТЗ = ТЗПерепроверка.НайтиСтроки(Новый Структура("Заказ", ТекДанные.Заказ));		
	Для каждого Ст Из НайТЗ Цикл
		Ст.ПозицияПодтверждена = Истина;	
	КонецЦикла;		
	
	
	НайОсталось = ТЗПерепроверка.НайтиСтроки(Новый Структура("ПозицияПодтверждена", Ложь));	
	Если НЕ НайОсталось.Количество() Тогда
		Сообщить("Перепроверка выполнена. Все позиции подтверждены");
		ЭтапПерепроверки = Ложь;
		Объект.ПерепроверкаВыполнена = Истина;
		Записать();
	КонецЕсли;
	
		
КонецПроцедуры


&НаКлиенте
Процедура ТоварыКоличествоСобраноОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Элементы.Товары.ВыделенныеСтроки.Очистить();
	Элементы.Товары.ТекущийЭлемент = Неопределено;
	
	Если Элементы.Заказы.ТекущиеДанные <> Неопределено Тогда	
		Элементы.Заказы.ТекущийЭлемент = Элементы.Заказы.ТекущиеДанные.Заказ;		
	КонецЕсли;
			
КонецПроцедуры


&НаКлиенте
Процедура СкрытьЗаказВМеханизмеВозвратов(Команда)
	
	//ТекДанные = Элементы.Заказы.ТекущиеДанные;
	//Если ТекДанные <> Неопределено Тогда	
	//	ТекЗаказ = ТекДанные.Заказ;	
	//	ТекДанные.ПометкаНеВозвратныйЗаказ = Истина;
	//	ТекДанные.ЗаказПодтвержденКСборке  = Ложь;
	//	ТекДанные.ИсключитьЗаказИзСпискаКВозврату = Истина;
	//КонецЕсли;
	//
		
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПометкаНеНужногоЗаказаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда		
		Если ТекДанные.ЗаказНайден И ТекДанные.ПометкаНеВозвратныйЗаказ Тогда		
			ТекДанные.ПометкаНеВозвратныйЗаказ = Ложь;	
			Сообщить("Нельзя отметить собранный заказ как ненужный");		
		Иначе		
		КонецЕсли;			
	КонецЕсли;			
	
КонецПроцедуры


&НаКлиенте
Процедура ВозвратПоставщику_Гиперссылка1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Документ.ВнутреннееПеремещениеЗаказов.Форма.ФормаДокументаУпр", Новый Структура("Ключ", Объект.ДокВнутреннееПеремещение), ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("ОбновитьМагистральныеНаборки");
	
КонецПроцедуры

//+Степанов Задача № 3935
&НаСервереБезКонтекста
Процедура ЗаписатьДанныеСканированияВоВнешнийЛог(Заказ, ШК, НомерДокумента)
	НомерЗаказа = ?(Заказ <> Неопределено, Заказ.Номер,"");
	ВнешнееЛогированиеСервер.ЗаписатьЛогСканирования_ОбщееВнешнееЛогирование(4,ТекущаяДата(),ПараметрыСеанса.РабочееМесто.Наименование,НомерДокумента,ШК,НомерЗаказа);
КонецПроцедуры	
//-Степанов Задача № 3935

//+Степанов Задача № 3975
&НаСервере
Процедура УстановитьВидимостьТЧ()
	Элементы.ГруппаЗаказы.Видимость = ПозиционированиеПриСканировании;
	Элементы.Группа_Товары.Видимость = ПозиционированиеПриСканировании;
	Элементы.Группа_МестаПоЗаказам.Видимость = ПозиционированиеПриСканировании;
	Элементы.ГруппаКонтрагенты.Видимость = ПозиционированиеПриСканировании;
	Элементы.НадписьДанныеЗаказа.Видимость = Не ПозиционированиеПриСканировании;
КонецПроцедуры	


&НаКлиенте
Процедура ПозиционированиеПриСканированииПриИзменении(Элемент)
	УстановитьВидимостьТЧ();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерЗаказа(Заказ)
	Возврат Заказ.Номер
КонецФункции	
//-Степанов Задача № 3975

//Асеев 18.08.2021 (Задача № 4641)>>>
&НаСервереБезКонтекста
Функция ПечатьЭтикетокГрузоместЗаказа(Знач Заказ, Знач МассивШК)
	
	ДатаПечати = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	|	РеализацияТоваровУслуг.ВладелецТовара.Наименование КАК ВладелецТовара,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.Грузополучатель.Наименование КАК Получатель
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьОбщийМакет("ЭтикеткаГрузоместа");
	Область = Макет.ПолучитьОбласть("Высота|Ширина");
	ПараметрыОбласти = Область.Параметры;
	
	ПараметрыОбласти.Заполнить(Выборка);
	ПараметрыОбласти.НомерЗаказа = СокрЛП(ПараметрыОбласти.НомерЗаказа);
	ПараметрыОбласти.АдресДоставки = СокрЛП(ПараметрыОбласти.АдресДоставки);
	ПараметрыОбласти.ШКЗаказа = may.ШтрихкодCode128(ПараметрыОбласти.НомерЗаказа);
	ПараметрыОбласти.ДатаПечати = Формат(ДатаПечати, "ДФ='dd-MM-yyyy HH:mm:ss'");
	
	ЭтикетокНаСтраницу = 3;
	ЭтикетокНаСтранице = 0;
	ПервыйСтолбец = Истина;
	
	Для Каждого ТекШК Из МассивШК Цикл
		
		ПараметрыОбласти.Штрихкод = ТекШК;
		ПараметрыОбласти.ШКМеста = may.ШтрихкодCode128(ТекШК);
		
		Если ПервыйСтолбец Тогда
			ЭтикетокНаСтранице = ЭтикетокНаСтранице + 1;
			Если ЭтикетокНаСтранице > ЭтикетокНаСтраницу Тогда
				ЭтикетокНаСтранице = 1;
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабДок.Вывести(Область);
		Иначе
			ТабДок.Присоединить(Область);
		КонецЕсли;
		ПервыйСтолбец = Не ПервыйСтолбец;
		
	КонецЦикла;
	
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ПечатьЭтикеткиОпределенногоГрузоместа(Команда)
	
	Если Не Элементы.МестаПоЗаказам.ВыделенныеСтроки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗаказ = Объект.МестаПоЗаказам.НайтиПоИдентификатору(Элементы.МестаПоЗаказам.ВыделенныеСтроки[0]).Заказ;
	Если ТекЗаказ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивШК = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из Элементы.МестаПоЗаказам.ВыделенныеСтроки Цикл
		ТекСтрока = Объект.МестаПоЗаказам.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекШК = ТекСтрока.Штрихкод;
		Если Не ПустаяСтрока(ТекШК) Тогда
			МассивШК.Добавить(ТекШК);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивШК.Количество() Тогда
		ТабДок = ПечатьЭтикетокГрузоместЗаказа(ТекЗаказ, МассивШК);
		//ТабДок.Показать("Этикетки грузомест " + ТекЗаказ);
		ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетокПоВсемГрузоместамЗаказа(Команда)
	
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗаказ = ТекСтрока.Заказ;
	Если ТекЗаказ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивШК = Новый Массив;
	
	Для Каждого ТекСтрока Из Объект.МестаПоЗаказам.НайтиСтроки(Новый Структура("Заказ", ТекЗаказ)) Цикл
		ТекШК = ТекСтрока.Штрихкод;
		Если Не ПустаяСтрока(ТекШК) Тогда
			МассивШК.Добавить(ТекШК);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивШК.Количество() Тогда
		ТабДок = ПечатьЭтикетокГрузоместЗаказа(ТекЗаказ, МассивШК);
		//ТабДок.Показать("Этикетки грузомест " + ТекЗаказ);
		ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	КонецЕсли;
	
КонецПроцедуры
//Асеев 18.08.2021 (Задача № 4641)<<<
