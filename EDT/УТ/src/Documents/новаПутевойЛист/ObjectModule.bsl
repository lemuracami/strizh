// Транспорт из путевого листа
//
Перем мТранспорт Экспорт; // <СправочникСсылка.новаТранспорт>

// Переменные для работы при подключении интерфейса к другим формам

Перем ЭлементТранспорт;

// Форма-владелец
//
Перем ФормаВладелец Экспорт; // <Форма>

// Элемент формы таблицы ГСМ
//
Перем мТабличноеПолеГСМ Экспорт; // <ТабличноеПоле>
Перем флЕстьТаблицаЗаправок;

Перем мОбновлятьСуммыЗатратГСМПриЗаписи;

#Если Клиент Тогда
	
//После записи необходимо обновить наименование
//
Перем НадписьПЛ;
	
// Элемент формы ввода организации
//
Перем ПолеОрганизация Экспорт; // <ПолеВвода>

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов() Экспорт
	
	мТранспорт = Неопределено;
	ЭлементТранспорт = Неопределено;
	ФормаВладелец = Неопределено;
	мТабличноеПолеГСМ = Неопределено;
	флЕстьТаблицаЗаправок = Неопределено;
	мОбновлятьСуммыЗатратГСМПриЗаписи = Неопределено;
	НадписьПЛ = Неопределено;
	ПолеОрганизация = Неопределено;
	
КонецПроцедуры

Функция ПолучитьПутевойЛист()
	Если ТипЗнч(ФормаВладелец.ЭтотОбъект) = Тип("ДокументОбъект.новаОтчетВодителя") Тогда
		Возврат ФормаВладелец.ЭтотОбъект.Рейс.ПутевойЛист;
	Иначе
		Возврат ФормаВладелец.ЭтотОбъект.ПутевойЛист;
	КонецЕсли;
КонецФункции

Функция ПолучитьПутевойЛистОбъект()
	Если ТипЗнч(ФормаВладелец.ЭтотОбъект) = Тип("ДокументОбъект.новаОтчетВодителя") Тогда
		Возврат ФормаВладелец.ЭтотОбъект.Рейс.ПутевойЛист.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(ФормаВладелец.ЭтотОбъект) = Тип("БизнесПроцессОбъект.новаРейсМестнойДоставки") Тогда
		Возврат ФормаВладелец.ПутевойЛистОбъект;
	ИначеЕсли ТипЗнч(ФормаВладелец.ЭтотОбъект) = Тип("ДокументОбъект.новаПутевойЛист") Тогда
		Возврат ФормаВладелец.ЭтотОбъект;
	КонецЕсли;
КонецФункции

// Добавляет элементы интерфейса на форму
//
// Параметры:
//  Форма  <Форма>
//  Панель <Панель>
//
Процедура ПодключитьИнтерфейс(Форма, Панель) Экспорт
	
	ИмяИнтерфейса = новаРасширениеФорм.ДобавитьОбъектНаФорму(Форма, ЭтотОбъект);
	
	Отступ = 8;
	ОтступРамка = 8;
	ВтораяКолонка = 314;
	МежстрочныйИнтервал = 2;
	
	ТекущаяСтраница = Панель.ТекущаяСтраница;
	
	Страница = Панель.Страницы.Добавить("ПутевойЛист", "Путевой лист");
	Панель.ТекущаяСтраница = Страница;
	
	ФормаВладелец = Форма;
		
	Х = Отступ;
	У = Отступ;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Организация:";
	Надпись.Ширина = 70;
	
	Х = Х + Надпись.Ширина + Отступ;
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х;
	Поле.Верх = У;
	Поле.Высота = 19;
	Поле.Ширина = 210;
	Поле.Данные = "ПутевойЛистОбъект.Организация";
	Поле.ИзменяетДанные = Истина;
	Поле.БыстрыйВыбор = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Надпись, ГраницаЭлементаУправления.Право);
	
	ПолеОрганизация = Поле;
	
	новаИнтеграция.НастроитьИнтерфейсПутевогоЛиста(Форма, ЭтотОбъект);
	
	Кнопка = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Кнопка"), Панель);
	Кнопка.Лево = Х + Поле.Ширина + Отступ;
	Кнопка.Верх = У;
	Кнопка.Высота = 19;
	Кнопка.Ширина = 124;
	Кнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Кнопка.Заголовок = "Расчет ГСМ";
	//Кнопка.ИзменяетДанные = Истина;
	//Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Граница, ГраницаЭлементаУправления.Лево);
	//Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Право, Граница, ГраницаЭлементаУправления.Право);
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Кнопка, "Нажатие", 0, ИмяИнтерфейса + ".РасчитатьНормыГСМ(Параметр1);");
	
	НадписьПЛ = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	НадписьПЛ.Лево = Кнопка.Лево + Кнопка.Ширина + Отступ;
	НадписьПЛ.Верх = У;
	НадписьПЛ.Высота = 19;
	НадписьПЛ.Ширина = Панель.Ширина - Надпись.Лево - Отступ;
	
	
	НадписьПЛ.Заголовок = Строка(ПолучитьПутевойЛист());
	НадписьПЛ.ГиперСсылка = Истина;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, НадписьПЛ, "Нажатие", 0, ИмяИнтерфейса + ".ОткрытьПутевойЛист();");

	
	
	ПерваяСтрокаДанных = У + 19 + МежстрочныйИнтервал;
	
	////////////////////////////////////////////////////////////////////////////////
	// Колонка "Выдача"
	У = ПерваяСтрокаДанных;
	Х = Отступ;
	ШиринаНадписей = 130;
	
	РамкаГруппы = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("РамкаГруппы"), Панель);
	РамкаГруппы.Лево = Х;
	РамкаГруппы.Верх = У;
	РамкаГруппы.Высота = 15;
	РамкаГруппы.Ширина = 288;
	РамкаГруппы.Заголовок = "Выдача";
	
	У =  У + 16;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Показания спидометра:";
	Надпись.Ширина = ШиринаНадписей;
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;
	Поле.Ширина = 150;
	Поле.Данные = "ПутевойЛистОбъект.СпидометрВыезда";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Центр);
	
	У =  У + 19 + МежстрочныйИнтервал;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Режим работы:";
	Надпись.Ширина = ШиринаНадписей;
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПолеОрганизация, ГраницаЭлементаУправления.Право);
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, Надпись, ГраницаЭлементаУправления.Лево);
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;
	Поле.Ширина = 150;
	Поле.Данные = "ПутевойЛистОбъект.РежимРаботы";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Надпись, ГраницаЭлементаУправления.Право);
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Поле, ГраницаЭлементаУправления.Лево);
	
	У =  У + 19 + МежстрочныйИнтервал;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Выдать горючего, л:";
	Надпись.Ширина = ШиринаНадписей;
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Поле, ГраницаЭлементаУправления.Право);
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, Надпись, ГраницаЭлементаУправления.Лево);
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;
	Поле.Ширина = 80;
	Поле.Данные = "ПутевойЛистОбъект.ВыдатьКоличествоГорючего";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Надпись, ГраницаЭлементаУправления.Право);
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Поле, ГраницаЭлементаУправления.Лево);
	
	Граница = Поле;
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Граница.Лево + Граница.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;
	Поле.Ширина = 62;
	Поле.Данные = "ПутевойЛистОбъект.ВыдатьГорючее";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Граница, ГраницаЭлементаУправления.Лево);
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Граница, ГраницаЭлементаУправления.Право);
	
	////////////////////////////////////////////////////////////////////////////////
	// Колонка "Выработка транспорта"
	У = ПерваяСтрокаДанных;
	Х = Поле.Лево + Поле.Ширина + Отступ;
	ШиринаНадписей = 120;
	
	РамкаГруппыПервая = РамкаГруппы;
	
	// Выработка транспорта
	РамкаГруппы = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("РамкаГруппы"), Панель);
	РамкаГруппы.Лево = Х;
	РамкаГруппы.Верх = У;
	РамкаГруппы.Высота = 15;
	РамкаГруппы.Ширина = 210;
	РамкаГруппы.Заголовок = "Выработка транспорта";
	//РамкаГруппы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Граница, ГраницаЭлементаУправления.Лево);
	//РамкаГруппы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Граница, ГраницаЭлементаУправления.Право);
	
	// Километротонны
	У = У + 16;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Количество км.-тн.:";
	Надпись.Ширина = ШиринаНадписей;
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, РамкаГруппы, ГраницаЭлементаУправления.Лево);
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, Надпись, ГраницаЭлементаУправления.Лево);
	
	ПолеВрем = Поле;
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;                                     
	Поле.Ширина = 80;
	Поле.Данные = "ПутевойЛистОбъект.КоличествоКилометроТонн";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПолеВрем, ГраницаЭлементаУправления.Право);
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Поле, ГраницаЭлементаУправления.Лево);
	
	
	// Количество операций
	У = У + 19 + МежстрочныйИнтервал;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Количество операций:";
	Надпись.Ширина = ШиринаНадписей;
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, РамкаГруппы, ГраницаЭлементаУправления.Лево);
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, Надпись, ГраницаЭлементаУправления.Лево);
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;                                     
	Поле.Ширина = 80;
	Поле.Данные = "ПутевойЛистОбъект.КоличествоОпераций";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПолеВрем, ГраницаЭлементаУправления.Право);
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Поле, ГраницаЭлементаУправления.Лево);
	
	// Количество моточасов
	У = У + 19 + МежстрочныйИнтервал;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Количество моточасов:";
	Надпись.Ширина = ШиринаНадписей;
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, РамкаГруппы, ГраницаЭлементаУправления.Лево);
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, Надпись, ГраницаЭлементаУправления.Лево);
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;                                     
	Поле.Ширина = 80;
	Поле.Данные = "ПутевойЛистОбъект.КоличествоМоточасов";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПолеВрем, ГраницаЭлементаУправления.Право);
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Поле, ГраницаЭлементаУправления.Лево);
	
	// Количество ездок
	У = У + 19 + МежстрочныйИнтервал;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Количество ездок:";
	Надпись.Ширина = ШиринаНадписей;
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, РамкаГруппы, ГраницаЭлементаУправления.Лево);
	//Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, Надпись, ГраницаЭлементаУправления.Лево);
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;                                     
	Поле.Ширина = 80;
	Поле.Данные = "ПутевойЛистОбъект.КоличествоЕздок";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПолеВрем, ГраницаЭлементаУправления.Право);
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Поле, ГраницаЭлементаУправления.Лево);
	
	////////////////////////////////////////////////////////////////////////////////
	// Колонка "Прицепы"
	
	У = ПерваяСтрокаДанных;
	Х = Поле.Лево + Поле.Ширина + Отступ;
	ШиринаНадписей = 50;
	
	РамкаГруппы = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("РамкаГруппы"), Панель);
	РамкаГруппы.Лево = Х;
	РамкаГруппы.Верх = У;
	РамкаГруппы.Высота = 15;
	РамкаГруппы.Ширина = Панель.Ширина - Х - Отступ;
	РамкаГруппы.Заголовок = "Прицепы";
	//РамкаГруппы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Центр);
	
	//ПолеОрганизация.УстановитьПривязку(ГраницаЭлементаУправления.Право, РамкаГруппы, ГраницаЭлементаУправления.Право);
	
	У = У + 16;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Прицеп 1:";
	Надпись.Ширина = ШиринаНадписей;
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;
	Поле.Ширина = Панель.Ширина - Поле.Лево - Отступ;
	Поле.Данные = "ПутевойЛистОбъект.Прицеп1";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Центр);
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Поле, "ПриИзменении", 0, ИмяИнтерфейса + ".ПрицепПриИзменении(Параметр1);");
	
	У = У + 19 + МежстрочныйИнтервал;                                                
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Прицеп 2:";
	Надпись.Ширина = ШиринаНадписей;
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;
	Поле.Ширина = Панель.Ширина - Поле.Лево - Отступ;
	Поле.Данные = "ПутевойЛистОбъект.Прицеп2";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Центр);
	
	У = У + 19 + МежстрочныйИнтервал;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = 19;
	Надпись.Заголовок = "Прицеп 3:";
	Надпись.Ширина = ШиринаНадписей;
	
	Поле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);
	Поле.Лево = Х + Надпись.Ширина + Отступ;
	Поле.Верх = У;
	Поле.Высота = 19;
	Поле.Ширина = Панель.Ширина - Поле.Лево - Отступ;
	Поле.Данные = "ПутевойЛистОбъект.Прицеп3";
	Поле.ИзменяетДанные = Истина;
	//Поле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Центр);
	
	////////////////////////////////////////////////////////////////////////////////
	// Таблица ГСМ
	Х = Отступ;
	У = 125+МежстрочныйИнтервал;

	РамкаГруппы = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("РамкаГруппы"), Панель);
	РамкаГруппы.Лево = Х;
	РамкаГруппы.Верх = У;
	РамкаГруппы.Высота = 15;
	РамкаГруппы.Ширина = Панель.Ширина - Отступ*2;
	РамкаГруппы.Заголовок = "Движение ГСМ";
	РамкаГруппы.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  Панель, ГраницаЭлементаУправления.Лево);
	РамкаГруппы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	
	У = У + 16;
	ТабПоле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ТабличноеПоле"), Панель);
	ТабПоле.Лево = Х;
	ТабПоле.Верх = У;
	ТабПоле.Высота = 51;
	ТабПоле.Ширина = 672;
	ТабПоле.Данные = "ПутевойЛистОбъект.ГСМ";
	ТабПоле.ИзменяетДанные = Истина;
	ТабПоле.ТолькоПросмотр = Ложь;
	ТабПоле.СоздатьКолонки();
	ТабПоле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
	ТабПоле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	
	ТабПоле.Колонки.РучноеРедактирование.Ширина = 4;
	ТабПоле.Колонки.РучноеРедактирование.ТолькоПросмотр = Истина;
															
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, ТабПоле,"ПриВыводеСтроки", 2, ИмяИнтерфейса + ".ГСМПриВыводеСтроки(Параметр1,Параметр2,Параметр3);");
	
	мТабличноеПолеГСМ = ТабПоле;
	
	КолонкиТП = ТабПоле.Колонки;                                            
	КолонкиТП.Бак.ТолькоПросмотр				= Истина;
	КолонкиТП.Транспорт.ТолькоПросмотр			= Истина;
	КолонкиТП.ОстатокПриВыезде.ТолькоПросмотр	= Истина;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, КолонкиТП.Выдано.ЭлементУправления,		 "ПриИзменении", 0, ИмяИнтерфейса + ".ГСМВыданоПриИзменении(Параметр1);");
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, КолонкиТП.РасходПоФакту.ЭлементУправления, "ПриИзменении", 0, ИмяИнтерфейса + ".ГСМОстатокПриВыездеПриИзменении(Параметр1);");
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, КолонкиТП.ОстатокПриВозвращении.ЭлементУправления, "ПриИзменении", 0, ИмяИнтерфейса + ".ГСМОстатокПриВозвращенииПриИзменении(Параметр1);");

	флЕстьТаблицаЗаправок = Ложь;
	Попытка
		Форма.ТаблицаЗаправок.Очистить();
		флЕстьТаблицаЗаправок = Истина;
	Исключение
	КонецПопытки;
	
	Если флЕстьТаблицаЗаправок Тогда
		
		Х = Отступ;
		У = У + ТабПоле.Высота + МежстрочныйИнтервал;
		
		РамкаГруппы = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("РамкаГруппы"), Панель);
		РамкаГруппы.Лево = Х;
		РамкаГруппы.Верх = У;
		РамкаГруппы.Высота = 15;
		РамкаГруппы.Ширина = 672;
		РамкаГруппы.Заголовок = "Заправки, оформленные на путевой лист";
		РамкаГруппы.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  Панель, ГраницаЭлементаУправления.Лево);
		РамкаГруппы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		
		У = У + 19;
		
		Кнопка = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Кнопка"), Панель);
		Кнопка.Лево = Х;
		Кнопка.Верх = У;
		Кнопка.Высота = 24;
		Кнопка.Ширина = 180;
		Кнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Кнопка.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		Кнопка.ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево;
		Кнопка.Заголовок = "Добавить в новый документ";
		Кнопка.ИзменяетДанные = Истина;
		Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  Панель, ГраницаЭлементаУправления.Лево);
		Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Кнопка,"Нажатие", 0, ИмяИнтерфейса + ".ДобавитьВНовыйДокумент(Параметр1);");
		
		Х = Х + 180 + Отступ;
		
		Кнопка = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Кнопка"), Панель);
		Кнопка.Лево = Х;
		Кнопка.Верх = У;
		Кнопка.Высота = 24;
		Кнопка.Ширина = 220;
		Кнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Кнопка.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		Кнопка.ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево;
		Кнопка.Заголовок = "Добавить в существующий документ";
		Кнопка.ИзменяетДанные = Истина;
		Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  Панель, ГраницаЭлементаУправления.Лево);
		Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Кнопка,"Нажатие", 0, ИмяИнтерфейса + ".ДобавитьВСуществующийДокумент(Параметр1);");
				 
		Х = Х + 220 + Отступ;
		
		Кнопка = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Кнопка"), Панель);
		Кнопка.Лево = Х;
		Кнопка.Верх = У;
		Кнопка.Высота = 24;
		Кнопка.Ширина = 160;
		Кнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Кнопка.ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево;
		Кнопка.Заголовок = "Перенести в документ";
		Кнопка.ИзменяетДанные = Истина;
		Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  Панель, ГраницаЭлементаУправления.Лево);
		Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Кнопка,"Нажатие", 0, ИмяИнтерфейса + ".ПеренестиЗаправкиВДокумент(Параметр1);");
		
		Х = Х + 160 + Отступ;
		
		Кнопка = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Кнопка"), Панель);
		Кнопка.Лево = Х;
		Кнопка.Верх = У;
		Кнопка.Высота = 24;
		Кнопка.Ширина = 100;
		Кнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Кнопка.Картинка = БиблиотекаКартинок.Обновить;
		Кнопка.ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево;
		Кнопка.Заголовок = "Обновить";
		Кнопка.ИзменяетДанные = Истина;
		Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  Панель, ГраницаЭлементаУправления.Лево);
		Кнопка.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Кнопка,"Нажатие", 0, ИмяИнтерфейса + ".КнопкаОбновитьНажатие(Параметр1);");
		
		Х = Отступ;
		У = У + 28;
		ТабПоле = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ТабличноеПоле"), Панель);
		ТабПоле.Лево = Х;
		ТабПоле.Верх = У;
		ТабПоле.Высота = Панель.Высота-У-2;
		ТабПоле.Ширина = 672;                
		ТабПоле.Данные = "ТаблицаЗаправок";
		ТабПоле.ИзменяетДанные = Истина;
		ТабПоле.ТолькоПросмотр = Ложь;
		ТабПоле.СоздатьКолонки();
		ТабПоле.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
		ТабПоле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		ТабПоле.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Верх);
		ТабПоле.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, ТабПоле,"Выбор", 3, ИмяИнтерфейса + ".ЗаправкиВыбор(Параметр1,Параметр2,Параметр3,Параметр4);");
		
		ВывестиТаблицуЗаправок();
		ПеренестиЗаправкиВДокумент(Неопределено,Ложь);
		ТабПоле.СоздатьКолонки();
		ТабПоле.Колонки.Документ.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементТранспорт = Форма.ЭлементыФормы.Транспорт;
	Модифицированность = ЗаполнитьТаблицуГСМ();
	
	Для Каждого КлючЗначение Из ФормаВладелец.Расширение Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("ДокументОбъект.новаПутевойЛист") И
		 	 КлючЗначение.Значение.Ссылка = Ссылка 
		Тогда
			ФормаВладелец.Расширение.Вставить(КлючЗначение.Ключ,ЭтотОбъект); 
		КонецЕсли;
	КонецЦикла;
	
	ЛишняяСтраница = Панель.Страницы.Найти("Страница1");
	Если ЛишняяСтраница <> Неопределено Тогда
		Панель.Страницы.Удалить(ЛишняяСтраница);
	КонецЕсли;
	
	Панель.ТекущаяСтраница = ТекущаяСтраница;
КонецПроцедуры
#КонецЕсли


///////////////////////////////////////////////////////////
// Обработчики событий интерфейса

// Обработчик события при изменении полей Прицеп1, Прицеп2, Прицеп3
//
// Параметры:
//  Параметр1 <Элемент управления>
//
Процедура ПрицепПриИзменении(Параметр1) Экспорт
	
	ЗаполнитьТаблицуГСМ();	
	
КонецПроцедуры

// Обработчик события при выводе строки табличной части ГСМ
//
// Параметры:
//  Элемент          <Элемент управления>
//  ОформлениеСтроки <ОформлениеСтроки>
//  ДанныеСтроки     <Произвольный>
//
Процедура ГСМПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Перем ЭтаФорма;
	
	// Если значение заполнено и = Истина, то выделяются несовпадающие заправки
	Если флЕстьТаблицаЗаправок = Истина Тогда	
		ВыданоТаб = 0;
		мсСтрокиЗаправки = ФормаВладелец.ТаблицаЗаправок.НайтиСтроки(Новый Структура("Бак",ДанныеСтроки.Бак));
		Для Каждого СтрокаЗаправки Из мсСтрокиЗаправки Цикл
			ВыданоТаб = ВыданоТаб + СтрокаЗаправки.Выдано;
		КонецЦикла;
		
		Если ВыданоТаб <> ДанныеСтроки.Выдано Тогда
			ОформлениеСтроки.Ячейки.Выдано.ЦветФона = Новый Цвет(240,190,190);
		Иначе
			ОформлениеСтроки.Ячейки.Выдано.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события при изменении значения поля ГСМОстатокПриВыезде
//
// Параметры:
//  Элемент          <Элемент управления>
//
Процедура ГСМОстатокПриВыездеПриИзменении(Элемент) Экспорт
	
	ТекущаяСтрока = мТабличноеПолеГСМ.ТекущаяСтрока;
	ТекущаяСтрока.ОстатокПриВозвращении = ТекущаяСтрока.ОстатокПриВыезде + ТекущаяСтрока.Выдано - ТекущаяСтрока.РасходПоФакту;
	
КонецПроцедуры

// Обработчик события при изменении значения поля ГСМВыдано
//
// Параметры:
//  Элемент          <Элемент управления>
//
Процедура ГСМВыданоПриИзменении(Элемент) Экспорт
	ТекущаяСтрока = мТабличноеПолеГСМ.ТекущаяСтрока;
	Если Не ТекущаяСтрока.РучноеРедактирование Тогда
		ТекущаяСтрока.РучноеРедактирование = Истина;
	КонецЕсли;
	ГСМОстатокПриВыездеПриИзменении(Элемент);
КонецПроцедуры

// Обработчик события при изменении значения поля ГСМОстаток
//
// Параметры:
//  Элемент          <Элемент управления>
//
Процедура ГСМОстатокПриВозвращенииПриИзменении(Элемент) Экспорт
	
	ТекущаяСтрока = мТабличноеПолеГСМ.ТекущаяСтрока;
	ТекущаяСтрока.РасходПоФакту = Макс(ТекущаяСтрока.ОстатокПриВыезде + ТекущаяСтрока.Выдано - ТекущаяСтрока.ОстатокПриВозвращении,0);
	              
КонецПроцедуры

// Добавляет заправки в новый документ
//
// Параметры:
//  Кнопка <Кнопка>
//
Процедура ДобавитьВНовыйДокумент(Кнопка) Экспорт
	
	Заправка = Документы.новаЗаправкаГСМ.СоздатьДокумент();
	Заправка.Дата = ТекущаяДата();
	Форма = Заправка.ПолучитьФорму();
	ДобавитьЗаправкуВДокументЗаправки(Форма);
	ВывестиТаблицуЗаправок();
	
	ПеренестиЗаправкиВДокумент(Неопределено, Ложь);	
КонецПроцедуры

// Добавляет заправки в существующий документ
//
// Параметры:
//  Кнопка <Кнопка>
//
Процедура ДобавитьВСуществующийДокумент(Кнопка) Экспорт
	
	Форма = Документы.новаЗаправкаГСМ.ПолучитьФормуВыбора();
	Заправка = Форма.ОткрытьМодально();
	Если ЗначениеЗаполнено(Заправка) Тогда
		Форма = Заправка.ПолучитьФорму();
		ДобавитьЗаправкуВДокументЗаправки(Форма);
	КонецЕсли;
	ВывестиТаблицуЗаправок();
	
	ПеренестиЗаправкиВДокумент(Неопределено, Ложь);
КонецПроцедуры

// Обработчик события нажатия кнопки
//
// Параметры:
//  Кнопка <Кнопка>
//
Процедура КнопкаОбновитьНажатие(Кнопка) Экспорт
	ВывестиТаблицуЗаправок();
	ПеренестиЗаправкиВДокумент(Кнопка, Ложь);
КонецПроцедуры

// Переносит заправки в документ
//
// Параметры:
//  Кнопка 						<Кнопка>
//  ПеренестиПриРучномИзменении <Булево>
//
Процедура ПеренестиЗаправкиВДокумент(Кнопка,ПеренестиПриРучномИзменении=Истина) Экспорт 
	
	флНадоСпрашивать = Ложь;
	Если ПеренестиПриРучномИзменении Тогда
		Для Каждого СтрокаЗаправки Из ФормаВладелец.ТаблицаЗаправок Цикл
			СтрокаГСМ = ГСМ.Найти(СтрокаЗаправки.Бак,"Бак");
			Если СтрокаГСМ <> Неопределено И
				СтрокаГСМ.РучноеРедактирование
			Тогда
				флНадоСпрашивать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флНадоСпрашивать Тогда
			
#Если Клиент Тогда
			Ответ = Вопрос("Перенести заправки в документ? Данные, введенные вручную, будут заменены!", РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
#КонецЕсли
		
		КонецЕсли;
	КонецЕсли;
	
	ТабЗаправок = ФормаВладелец.ТаблицаЗаправок.Скопировать();
	ТабЗаправок.Свернуть("Бак","Выдано");
	
	Для Каждого СтрокаГСМ Из ГСМ Цикл
		Если ПеренестиПриРучномИзменении Или Не СтрокаГСМ.РучноеРедактирование Тогда
			СтрокаГСМ.Выдано = 0;	
		КонецЕсли;
		Если ПеренестиПриРучномИзменении Тогда
			СтрокаГСМ.РучноеРедактирование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЗаправки Из ТабЗаправок Цикл
		СтрокаГСМ = ГСМ.Найти(СтрокаЗаправки.Бак,"Бак");
		Если СтрокаГСМ <> Неопределено и (ПеренестиПриРучномИзменении ИЛИ Не СтрокаГСМ.РучноеРедактирование) Тогда
			СтрокаГСМ.Выдано = СтрокаЗаправки.Выдано;
			СтрокаГСМ.ОстатокПриВозвращении = СтрокаГСМ.ОстатокПриВыезде + СтрокаГСМ.Выдано - СтрокаГСМ.РасходПоФакту;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет вывод таблицы заправок
//
Процедура ВывестиТаблицуЗаправок() Экспорт
	
	ФормаВладелец.ТаблицаЗаправок = ПолучитьТаблицуЗаправок();
	
КонецПроцедуры

// Обработчик выбора таблицы заправок
//
// Параметры:
//  Элемент              <Элемент управления>
//  ВыбраннаяСтрока      <Выбранная строка табличного поля>
//  Колонка              <КолонкаТабличногоПоля>
//  СтандартнаяОбработка <Булево>
//
Процедура ЗаправкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) Экспорт
	
	ВыбраннаяСтрока.Документ.ПолучитьФорму().Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Производит запись документа в базу данных
//
// Параметры:
//  Кнопка <Кнопка>
//
Процедура ЗаписатьДокумент(Кнопка) Экспорт
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ФормаВладелец.Дата;
	КонецЕсли;
	Записать();
КонецПроцедуры

// Обработчики событий интерфейса 
///////////////////////////////////////////////////////////

Процедура ПослеЗаписи()
	
	#Если Клиент Тогда
		Оповестить("ЗаписанДокументПутевойЛист",,ЭтотОбъект);
		
		Если НадписьПЛ <> Неопределено Тогда
		    НадписьПЛ.Заголовок = Строка(Ссылка);
		КонецЕсли;
	#КонецЕсли
	
	Попытка
		ЖурналСтатей = ФормаВладелец.ЖурналСтатей;
	Исключение
		Возврат;
	КонецПопытки;
	
	Для Каждого СтрокаГруппы Из ЖурналСтатей.Дерево.Значение.Строки Цикл
		Для Каждого Строка Из СтрокаГруппы.Строки Цикл
			Если Строка.Статья = Справочники.новаСтатьиДоходовРасходов.ГСМ Тогда
				Строка.Сумма = ЭтотОбъект.Движения.новаОстаткиГСМ.Итог("Стоимость");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ФормаВладелец.ИсточникСтатей.РассчитатьИтоги(ЖурналСтатей.Дерево.Значение.Строки);
		
КонецПроцедуры

Процедура ДобавитьЗаправкуВДокументЗаправки(ФормаЗаправки)
	
	СтрокаЗаправки = ФормаЗаправки.Заправки.Добавить();
	
	СтрокаЗаправки.ПутевойЛист = Ссылка; 
	СтрокаЗаправки.Водитель = новаУчетГСМ.ПолучитьРеквизитРейсаПутевогоЛиста(Ссылка,"Водитель");
	
	мДатаВыезда = новаУчетГСМ.ПолучитьРеквизитРейсаПутевогоЛиста(Ссылка,"ДатаНачалаФакт");
	Если мДатаВыезда = Неопределено Тогда
		мДатаВыезда = Дата(1,1,1);
	КонецЕсли;
	СтрокаЗаправки.Дата		= мДатаВыезда;
	СтрокаЗаправки.Время    = Дата(1,1,1) + (мДатаВыезда-НачалоДня(мДатаВыезда));
	
	Если ГСМ.Количество()<>0 Тогда
		СтрокаЗаправки.Транспорт = ГСМ[0].Транспорт;
		СтрокаЗаправки.Бак		 = ГСМ[0].Бак;
		СтрокаЗаправки.ГСМ		 = СтрокаЗаправки.Бак.ОсновнойГСМ;
	КонецЕсли;
	ФормаЗаправки.ОткрытьМодально();

КонецПроцедуры

Функция ПолучитьМассивТранспортаПутёвки()
	
	Если ЭлементТранспорт<>Неопределено Тогда
		мТранспорт = ЭлементТранспорт.Значение;
	КонецЕсли;
	
	мсТранспорт  = Новый Массив;
	мсТранспорт.Добавить(мТранспорт);
	
	Если ЗначениеЗаполнено(Прицеп1) Тогда
		мсТранспорт.Добавить(Прицеп1);			
	КонецЕсли;
	Если ЗначениеЗаполнено(Прицеп2) Тогда
		мсТранспорт.Добавить(Прицеп2);			
	КонецЕсли;
	Если ЗначениеЗаполнено(Прицеп3) Тогда
		мсТранспорт.Добавить(Прицеп3);			
	КонецЕсли;
	
	Возврат мсТранспорт;
КонецФункции

// Перезаполняет таблицу ГСМ по транспорту и указанным прицепам
//
Функция ЗаполнитьТаблицуГСМ() Экспорт
	
	Модиф = Ложь;
	
	Если ЭлементТранспорт<>Неопределено Тогда
		мТранспорт = ЭлементТранспорт.Значение;
	КонецЕсли;
	
	табГСМСтарая = ГСМ.Выгрузить();
	ГСМ.Очистить();
	
	Отбор = Новый Структура("Бак");
	
	мсТранспорт = ПолучитьМассивТранспортаПутёвки();
	
	// Получение баков транспорта
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Транспорт",мсТранспорт);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	новаБакиТранспорта.Ссылка КАК Бак,
	|	новаБакиТранспорта.Владелец КАК Транспорт
	|ИЗ
	|	Справочник.новаБакиТранспорта КАК новаБакиТранспорта
	|ГДЕ
	|	новаБакиТранспорта.Владелец В(&Транспорт)"
	;
	ВыбБаки = Запрос.Выполнить().Выбрать();
	Отбор = Новый Структура ("Транспорт");
	ОтборСтарыхСтрок = Новый Структура("Транспорт, Бак");
	
	// Заполнение таблицы ГСМ: транспорт и баки
	Для Каждого мТранспорт из мсТранспорт Цикл
		Отбор.Транспорт = мТранспорт;
		ВыбБаки.Сбросить();
		Пока ВыбБаки.НайтиСледующий(Отбор) Цикл
			СтрокаГСМ = ГСМ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГСМ,ВыбБаки);	
		КонецЦикла;
	КонецЦикла;
	ГСМ.Свернуть("Транспорт,Бак","");
	
	// Получение начальных остатков по бакам
	ВыборкаОстатковГСМ = новаУчетГСМ.ПолучитьВыборкуОстатковГСМДляПутевки(ЭтотОбъект, ГСМ.ВыгрузитьКолонку("Бак"));
	ОтборОстатков = Новый Структура("Бак");
	Пока ВыборкаОстатковГСМ.Следующий() Цикл
		СтрокаГСМ = ГСМ.Найти(ВыборкаОстатковГСМ.Бак,"Бак");
		СтрокаГСМ.ОстатокПриВыезде = ВыборкаОстатковГСМ.КоличествоОстаток;
	КонецЦикла;
	
	Для Каждого СтрокаГСМ из ГСМ Цикл			
		// Заполнение таблицы ГСМ: подстановка старых количественных данных
		ЗаполнитьЗначенияСвойств(ОтборСтарыхСтрок,СтрокаГСМ);	
		мОстатокПриВозвращении = Неопределено;
		мсСтрокиГСМСтарые = табГСМСтарая.НайтиСтроки(ОтборСтарыхСтрок);
		Если мсСтрокиГСМСтарые.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаГСМ,мсСтрокиГСМСтарые[0],,"ОстатокПриВыезде");
			мОстатокПриВозвращении = мсСтрокиГСМСтарые[0].ОстатокПриВозвращении;
		КонецЕсли;
		
		СтрокаГСМ.ОстатокПриВозвращении = СтрокаГСМ.ОстатокПриВыезде + СтрокаГСМ.Выдано - СтрокаГСМ.РасходПоФакту;		
		Если мОстатокПриВозвращении<>Неопределено И мОстатокПриВозвращении<>СтрокаГСМ.ОстатокПриВозвращении Тогда
			Модиф = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Модиф;
КонецФункции
                                                   
//Перезаполняет поле "норма расходы" таблицы ГСМ по транспорту и указанным прицепам
//
// Параметры:
//  Элемент              <Элемент управления>
//
Процедура РасчитатьНормыГСМ(Элемент=Неопределено) Экспорт
	
	#Если Клиент Тогда
	Если ФормаВладелец <> Неопределено Тогда
		Если ФормаВладелец.Модифицированность Тогда
			Предупреждение("Перед расчётом необходимо записать документ!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	////// Заполнение параметра тн.км.
	////Если ФормаВладелец<>Неопределено Тогда
	////	КолТнКм = 0;
	////	ИсточникМаршрута = Обработки.новаИсточникМаршрутРейса.Создать();
	////	Если ТипЗнч(ФормаВладелец.Ссылка) = Тип("БизнесПроцессСсылка.новаРейсМестнойДоставки") Тогда
	////		Рейс = ФормаВладелец.Ссылка;
	////		ИсточникМаршрута.НачатьРедактирование(Рейс, ФормаВладелец.ЭтотОбъект);
	////	Иначе
	////		Рейс = ФормаВладелец.Рейс;
	////		ИсточникМаршрута.НачатьРедактирование(Рейс, Рейс.ПолучитьОбъект());
	////	КонецЕсли;
	////	мсЗадания = ИсточникМаршрута.ПолучитьДоставкиВПорядкеВыполнения(Рейс);
	////	НЗТочки = РегистрыСведений.новаТочкиМаршрутаРейсов.СоздатьНаборЗаписей();
	////	НЗТочки.Отбор.Рейс.Установить(Рейс);
	////	НЗТочки.Прочитать();
	////	тзТочки = НЗТочки.Выгрузить();
	////	НЗТочки = Неопределено;    
	////	
	////	ПредРасстояниеОтТочки = 0;
	////	ПредТочка = ?(мсЗадания.Количество()=0,Неопределено, мсЗадания[0].ТочкаПрибытия);
	////	ПредСтрокаТочки = 0;
	////	сч=-1;
	////	Для Каждого Задание Из мсЗадания Цикл
	////		сч = сч + 1;	
	////		Если ПредТочка<>Задание.ТочкаПрибытия Тогда
	////			ПредСтрокаТочки = сч;
	////			ПредТочка       = Задание.ТочкаПрибытия;
	////		КонецЕсли;
	////		
	////		Вес = Задание.Груз.Вес;                               
	////		Если Вес>0 Тогда
	////			мсСтрТзТочки = тзТочки.НайтиСтроки(Новый Структура("ТочкаМаршрута",Задание.ТочкаПрибытия));
	////			СтрТзТочки = Неопределено;
	////			Для Каждого СтрокаТЗ из мсСтрТзТочки Цикл
	////				Если тзТочки.Индекс(СтрокаТЗ) >= ПредСтрокаТочки Тогда
	////					СтрТзТочки = СтрокаТЗ;
	////					Прервать;
	////				КонецЕсли;
	////			КонецЦикла;
	////			
	////			Если СтрТзТочки<>Неопределено Тогда
	////				КолТнКм = КолТнКм + Вес * (ПредРасстояниеОтТочки + СтрТзТочки.РасстояниеКТочке);		
	////			КонецЕсли;
	////		КонецЕсли; 
	////		
	////		ПредРасстояниеОтТочки = ?(СтрТзТочки=Неопределено,0,СтрТзТочки.РасстояниеОтТочки);
	////	КонецЦикла;                                         
	////	КоличествоКилометроТонн = КолТнКм;
	////КонецЕсли;
	
	
	ЗаполнитьТаблицуГСМ();

	мсТранспорт = ПолучитьМассивТранспортаПутёвки();
	
	// Проверка, нет ли норм без бака или бака без норм
	Для Каждого Транспорт Из мсТранспорт Цикл
		#Если не ВнешнееСоединение Тогда
			новаУчетГСМ.АнализПолнотыДанныхГСМТранспорта(Транспорт, Истина);
		#Иначе
			новаУчетГСМ.АнализПолнотыДанныхГСМТранспорта(Транспорт, Ложь);
		#КонецЕсли
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	 ,Дата);
	Запрос.УстановитьПараметр("Транспорт",мсТранспорт);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	новаТранспорт.Ссылка КАК Транспорт,
	|	новаТранспорт.Марка,
	|	новаТранспорт.ИндивидуальныеНормы
	|ПОМЕСТИТЬ ТС
	|ИЗ
	|	Справочник.новаТранспорт КАК новаТранспорт
	|ГДЕ
	|	новаТранспорт.Ссылка В(&Транспорт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТС.Транспорт,
	|	ТС.Транспорт КАК ОбъектНормы
	|ПОМЕСТИТЬ ТСМарка
	|ИЗ
	|	ТС КАК ТС
	|ГДЕ
	|	ТС.ИндивидуальныеНормы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТС.Транспорт,
	|	ТС.Марка
	|ИЗ
	|	ТС КАК ТС
	|ГДЕ
	|	(НЕ ТС.ИндивидуальныеНормы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТСМарка.Транспорт,
	|	новаНормыРасходаГСМСрезПоследних.ГСМ,
	|	новаНормыРасходаГСМСрезПоследних.ЛинейнаяНорма,
	|	новаНормыРасходаГСМСрезПоследних.НормаНаИзменениеСобственногоВеса,
	|	новаНормыРасходаГСМСрезПоследних.НормаНаМоточас,
	|	новаНормыРасходаГСМСрезПоследних.НормаНаЗапуск,
	|	новаНормыРасходаГСМСрезПоследних.НормаНаОперацию,
	|	новаНормыРасходаГСМСрезПоследних.НормаНаЕздку
	|ИЗ
	|	ТСМарка КАК ТСМарка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаНормыРасходаГСМ.СрезПоследних(
	|				&Дата,
	|				МаркаТранспорт В
	|					(ВЫБРАТЬ
	|						ТСМарка.ОбъектНормы
	|					ИЗ
	|						ТСМарка КАК ТСМарка)) КАК новаНормыРасходаГСМСрезПоследних
	|		ПО ТСМарка.ОбъектНормы = новаНормыРасходаГСМСрезПоследних.МаркаТранспорт"
	;
	ВыбНормы = Запрос.Выполнить().Выбрать();
	Отбор = Новый Структура("Транспорт,ГСМ");
	
	ТаблицаРасчетаНорм = Новый ТаблицаЗначений;
	ТаблицаРасчетаНорм.Колонки.Добавить("Транспорт");
	ТаблицаРасчетаНорм.Колонки.Добавить("ГСМ");
	ТаблицаРасчетаНорм.Колонки.Добавить("РасходПоНорме");
	
	Для Каждого СтрокаГСМ Из ГСМ Цикл
		СтрокаГСМ.РасходПоНорме = 0;
		
		Отбор.Транспорт = СтрокаГСМ.Транспорт;
		Отбор.ГСМ		= СтрокаГСМ.Бак.ОсновнойГСМ;
		
		ВыбНормы.Сбросить();
		Если ВыбНормы.НайтиСледующий(Отбор) Тогда
			СтрокиРасчетаНорм = ТаблицаРасчетаНорм.НайтиСтроки(Отбор);
			Если СтрокиРасчетаНорм.Количество() = 0 Тогда
				СтрокиРасчетаНорм = ТаблицаРасчетаНорм.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокиРасчетаНорм,Отбор);
				СтрокиРасчетаНорм.РасходПоНорме = новаУчетГСМ.РасчитатьНормуРасходаГСМ(ЭтотОбъект,ВыбНормы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокиРасчетаНорм Из ТаблицаРасчетаНорм Цикл
		мсСтрокиГСМ = ГСМ.НайтиСтроки(Новый Структура("Транспорт",СтрокиРасчетаНорм.Транспорт));
		Для Каждого СтрокаГСМ Из мсСтрокиГСМ Цикл
			Если СтрокаГСМ.Бак.ОсновнойГСМ = СтрокиРасчетаНорм.ГСМ Тогда
				СтрокаГСМ.РасходПоНорме = СтрокиРасчетаНорм.РасходПоНорме; 
				Если СтрокаГСМ.РасходПоНорме <> 0 И СтрокаГСМ.РасходПоФакту = 0 Тогда
					СтрокаГСМ.РасходПоФакту = СтрокаГСМ.РасходПоНорме;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	#Если Клиент Тогда
		Если ФормаВладелец <> Неопределено Тогда
			ФормаВладелец.Модифицированность = Истина;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Возвращает таблицу данных о заправках
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьТаблицуЗаправок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПутевойЛист",Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	новаЗаправкаГСМЗаправки.Ссылка как Документ,
	|	новаЗаправкаГСМЗаправки.Ссылка.Номер как НомерДокумента,
	|	новаЗаправкаГСМЗаправки.Ссылка.АЗС как АЗС,
	|	новаЗаправкаГСМЗаправки.Транспорт КАК Транспорт,
	|	новаЗаправкаГСМЗаправки.Бак КАК Бак,
	|	новаЗаправкаГСМЗаправки.Количество как Выдано,
	|	новаЗаправкаГСМЗаправки.Дата КАК Дата,
	|	новаЗаправкаГСМЗаправки.Время КАК Время
	|ИЗ
	|	Документ.новаЗаправкаГСМ.Заправки КАК новаЗаправкаГСМЗаправки
	|ГДЕ
	|	новаЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
//	|	И (НЕ новаЗаправкаГСМЗаправки.Ссылка.ПометкаУдаления)
	|	И (новаЗаправкаГСМЗаправки.Ссылка.Проведен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Время,
	|	Транспорт,
	|	Бак"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДвиженияПоРегиструОстаткиГСМ()
	
	ВыборкаОстатковГСМ = новаУчетГСМ.ПолучитьВыборкуОстатковГСМ(МоментВремени(), ГСМ.ВыгрузитьКолонку("Бак"));
	Отбор = Новый Структура("Бак");
	
	Для Каждого СтрокаГСМ из ГСМ Цикл
		
		Если СтрокаГСМ.РасходПоФакту = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Бак = СтрокаГСМ.Бак;
		
		Движение = Движения.новаОстаткиГСМ.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаГСМ);
		Движение.Период = Дата;
		Движение.Количество = СтрокаГСМ.РасходПоФакту;
		
		ВыборкаОстатковГСМ.Сбросить();
		Если ВыборкаОстатковГСМ.НайтиСледующий(Отбор) Тогда
			Если СтрокаГСМ.РасходПоФакту >= ВыборкаОстатковГСМ.КоличествоОстаток Тогда
				Стоимость = ВыборкаОстатковГСМ.СтоимостьОстаток;
			Иначе
				Стоимость = ВыборкаОстатковГСМ.СтоимостьОстаток * СтрокаГСМ.РасходПоФакту / ВыборкаОстатковГСМ.КоличествоОстаток;
			КонецЕсли;
		Иначе
			Стоимость = 0;
		КонецЕсли;
		Движение.Стоимость = Стоимость;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструРасходГСМ()
	
	Для Каждого СтрокаГСМ из ГСМ Цикл
		
		Если СтрокаГСМ.РасходПоФакту <> 0 Или
 			 СтрокаГСМ.РасходПоНорме <> 0 
		Тогда
			Движение = Движения.новаРасходГСМ.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаГСМ);
			Движение.Период = Дата;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДвиженияПоРегиструОстаткиГСМ();
	
	ДвиженияПоРегиструРасходГСМ();
	
	ПослеЗаписи();
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если Не ЗначениеЗаполнено(мТранспорт) Тогда
		мТранспорт = новаУчетГСМ.ПолучитьРеквизитРейсаПутевогоЛиста(Ссылка, "Транспорт");
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) 
	   И Не Ссылка.Пустая() Тогда
		   
	    ФормаОснования = Основание.ПолучитьФорму("ФормаДокумента");
	
		Если ФормаОснования.Открыта() Тогда  
			
		   ФормаОснования.ПутевойЛист = Ссылка;
		   
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ПослеЗаписи();
КонецПроцедуры

// Открывает форму путевого листа
//
// Параметры:
//  ПутевойЛист <ДокументСсылка.новаПутевойЛист>
//
Процедура ОткрытьПутевойЛист() Экспорт
	#Если Клиент Тогда
	ТекущийПутевойЛист = ПолучитьПутевойЛистОбъект();
	Форма = Документы.новаПутевойЛист.ПолучитьФорму("ФормаДокумента", , ТекущийПутевойЛист.Ссылка);
	Форма.ДокументОбъект = ТекущийПутевойЛист;
	Форма.Открыть();
	#КонецЕсли
КонецПроцедуры

мТранспорт = новаУчетГСМ.ПолучитьРеквизитРейсаПутевогоЛиста(Ссылка, "Транспорт");
