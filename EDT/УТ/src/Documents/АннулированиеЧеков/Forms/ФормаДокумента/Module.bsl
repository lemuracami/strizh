&НаКлиенте
Перем ФормаХодаПечатиЧеков Экспорт;



&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.ПериодФормированияДанных) Тогда	
		Сообщить("Не заполнен Период формирования данных");
		Возврат;	
	КонецЕсли;
	
	Если Объект.Заказы.Количество() Тогда	
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтвет", ЭтотОбъект), "Документ уже заполнен, очистить?", РежимДиалогаВопрос.ДаНет);			
	Иначе
		ЗаполнитьАвтоматически();
	КонецЕсли;
	
	
	
	//// Автоматическое заполнение
	//Объект.Заказы.Очистить();
	//объект.ЧекиКАннулированию.Очистить();
	//
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ЧекККМ.Ссылка,
	//                      |	ЧекККМ.Реализация
	//                      |ПОМЕСТИТЬ ВТ_ПробитыеЧеки
	//                      |ИЗ
	//                      |	Документ.ЧекККМ КАК ЧекККМ
	//                      |ГДЕ
	//                      |	ЧекККМ.Дата МЕЖДУ &Дата1 И &Дата2
	//                      |	И ЧекККМ.ЧекПробитНаККМ
	//                      |	И ЧекККМ.ПометкаУдаления = ЛОЖЬ
	//                      |	И ЧекККМ.ЧекПробитОшибочно = ЛОЖЬ
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_ПробитыеЧеки.Ссылка КАК ДокументЧек,
	//                      |	ВТ_ПробитыеЧеки.Реализация КАК Заказ,
	//                      |	ЕСТЬNULL(СостоянияЗаказов.РезультатДоставки, ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)) КАК РезультатДоставки,
	//                      |	ЕСТЬNULL(СостоянияЗаказов.ПричинаНеВыполнения, ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка)) КАК ПричинаНеВыполнения,
	//                      |	ВЫБОР
	//                      |		КОГДА ВводДанныхОСостоянииЗаказа.Ссылка ЕСТЬ NULL 
	//                      |			ТОГДА ЛОЖЬ
	//                      |		ИНАЧЕ ИСТИНА
	//                      |	КОНЕЦ КАК ДокументВводДанных,
	//                      |	ПечатьЧековПоДоставкамДоставки.Ссылка.Ссылка КАК ДокументПечатьЧеков,
	//                      |	ВЫБОР
	//                      |		КОГДА АннулированиеЧековЗаказы.Ссылка.Ссылка ЕСТЬ NULL 
	//                      |			ТОГДА ИСТИНА
	//                      |		ИНАЧЕ ЛОЖЬ
	//                      |	КОНЕЦ КАК НеБылАннулирован
	//                      |ПОМЕСТИТЬ ВТ_ДанныеПоЧекам
	//                      |ИЗ
	//                      |	ВТ_ПробитыеЧеки КАК ВТ_ПробитыеЧеки
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	//                      |		ПО ВТ_ПробитыеЧеки.Реализация = СостоянияЗаказов.Заказ
	//                      |			И (СостоянияЗаказов.Период МЕЖДУ &Дата1 И &Дата2)
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводДанныхОСостоянииЗаказа КАК ВводДанныхОСостоянииЗаказа
	//                      |		ПО ВТ_ПробитыеЧеки.Реализация = ВводДанныхОСостоянииЗаказа.Заказ
	//                      |			И (ВводДанныхОСостоянииЗаказа.ТипОплатыДо <> ВводДанныхОСостоянииЗаказа.ТипОплатыПосле)
	//                      |			И (ВводДанныхОСостоянииЗаказа.Дата МЕЖДУ &Дата1 И &Дата2)
	//                      |			И (ВводДанныхОСостоянииЗаказа.Проведен)
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПечатьЧековПоДоставкам.Доставки КАК ПечатьЧековПоДоставкамДоставки
	//                      |		ПО ВТ_ПробитыеЧеки.Реализация = ПечатьЧековПоДоставкамДоставки.Доставка
	//                      |			И (ПечатьЧековПоДоставкамДоставки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2)
	//                      |			И (ПечатьЧековПоДоставкамДоставки.Ссылка.Проведен)
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АннулированиеЧеков.Заказы КАК АннулированиеЧековЗаказы
	//                      |		ПО ВТ_ПробитыеЧеки.Реализация = АннулированиеЧековЗаказы.Заказ
	//                      |			И (АннулированиеЧековЗаказы.Ссылка.Проведен
	//                      |				И (АннулированиеЧековЗаказы.Ссылка.ПериодФормированияДанных МЕЖДУ &Дата1 И &Дата2))
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_ДанныеПоЧекам.ДокументЧек,
	//                      |	ВТ_ДанныеПоЧекам.Заказ,
	//                      |	ВТ_ДанныеПоЧекам.РезультатДоставки,
	//                      |	ВТ_ДанныеПоЧекам.ДокументВводДанных,
	//                      |	ВТ_ДанныеПоЧекам.ДокументПечатьЧеков,
	//                      |	ВТ_ДанныеПоЧекам.ПричинаНеВыполнения
	//                      |ИЗ
	//                      |	ВТ_ДанныеПоЧекам КАК ВТ_ДанныеПоЧекам
	//                      |ГДЕ
	//                      |	(ВТ_ДанныеПоЧекам.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
	//                      |			ИЛИ ВТ_ДанныеПоЧекам.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ВыполненаЧастично)
	//                      |			ИЛИ ВТ_ДанныеПоЧекам.ДокументВводДанных = ИСТИНА)
	//                      |			И ВТ_ДанныеПоЧекам.НеБылАннулирован = ИСТИНА
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	ВТ_ДанныеПоЧекам.ДокументЧек,
	//                      |	ВТ_ДанныеПоЧекам.Заказ,
	//                      |	ВТ_ДанныеПоЧекам.РезультатДоставки,
	//                      |	ВТ_ДанныеПоЧекам.ДокументВводДанных,
	//                      |	ВТ_ДанныеПоЧекам.ДокументПечатьЧеков,
	//                      |	ВТ_ДанныеПоЧекам.ПричинаНеВыполнения");
	//Запрос.УстановитьПараметр("Дата1", НачалоДня(Объект.ПериодФормированияДанных));
	//Запрос.УстановитьПараметр("Дата2", КонецДня(Объект.ПериодФормированияДанных));
	//ТЗРезультат = Запрос.Выполнить().Выгрузить();
	//
	//// заполнение ТЧ Заказы
	//КопияТЗ = ТЗРезультат.Скопировать();
	//КопияТЗ.Свернуть("Заказ,РезультатДоставки,ПричинаНеВыполнения,ДокументВводДанных");	
	//
	//Для каждого Стр Из КопияТЗ Цикл		
	//	НЗаказ = Объект.Заказы.Добавить();
	//	НЗаказ.Заказ = Стр.Заказ;
	//	НЗаказ.РезультатДоставки = Стр.РезультатДоставки;
	//	НЗаказ.ПричинаНевыполнения = Стр.ПричинаНеВыполнения;			
	//	
	//	Если Стр.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда 
	//		ИЛИ Стр.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда	
	//		НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.ОтказОтЗаказа;
	//	ИначеЕсли Стр.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки
	//		ИЛИ Стр.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда			
	//		НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.ПереносЗаказа;			
	//	ИначеЕсли Стр.ДокументВводДанных = Истина Тогда		
	//		НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.СменаТипаОплатыПриДоставкеЗаказа;		
	//	ИначеЕсли Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда		
	//		НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.ЧастичныйВыкуп;		
	//	КонецЕсли;		
	//КонецЦикла;	
	//

	//
	//// заполнение ТЧ ЧекиКАннулированию
	//Для каждого Рез Из ТЗРезультат Цикл			
	//	НЧек = Объект.ЧекиКАннулированию.Добавить();
	//	НЧек.Заказ = Рез.Заказ;
	//	НЧек.Чек = Рез.ДокументЧек;
	//	НЧек.ПоДаннымЗаполнения = Истина;
	//	НЧек.КАннулированию = Истина;	
	//	НЧек.ДокументПечатиЧеков = Рез.ДокументПечатьЧеков;
	//КонецЦикла;
	//
	//
	//
	//Если ЗначениеЗаполнено(Элементы.Заказы.ТекущаяСтрока) Тогда
	//	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	//	Если ТекДанные <> Неопределено Тогда		
	//		ОбновитьОтображениеТаблиц(ТекДанные.Заказ);		
	//	КонецЕсли;		
	//КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматически()

	// Автоматическое заполнение
	Объект.Заказы.Очистить();
	объект.ЧекиКАннулированию.Очистить();
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ЧекККМ.Ссылка,
	//                      |	ЧекККМ.Реализация
	//                      |ПОМЕСТИТЬ ВТ_ПробитыеЧеки
	//                      |ИЗ
	//                      |	Документ.ЧекККМ КАК ЧекККМ
	//                      |ГДЕ
	//                      |	ЧекККМ.Дата МЕЖДУ &Дата1 И &Дата2
	//                      |	И ЧекККМ.ЧекПробитНаККМ
	//                      |	И ЧекККМ.ПометкаУдаления = ЛОЖЬ
	//                      |	И ЧекККМ.ЧекПробитОшибочно = ЛОЖЬ
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_ПробитыеЧеки.Ссылка КАК ДокументЧек,
	//                      |	ВТ_ПробитыеЧеки.Реализация КАК Заказ,
	//                      |	СостоянияЗаказов.РезультатДоставки КАК РезультатДоставки,
	//                      |	ЕСТЬNULL(СостоянияЗаказов.ПричинаНеВыполнения, ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка)) КАК ПричинаНеВыполнения,
	//                      |	ВЫБОР
	//                      |		КОГДА ВводДанныхОСостоянииЗаказа.Ссылка ЕСТЬ NULL 
	//                      |			ТОГДА ЛОЖЬ
	//                      |		ИНАЧЕ ИСТИНА
	//                      |	КОНЕЦ КАК ДокументВводДанных,
	//                      |	ПечатьЧековПоДоставкамДоставки.Ссылка.Ссылка КАК ДокументПечатьЧеков,
	//                      |	ВЫБОР
	//                      |		КОГДА АннулированиеЧековЗаказы.Ссылка.Ссылка ЕСТЬ NULL 
	//                      |			ТОГДА ИСТИНА
	//                      |		ИНАЧЕ ЛОЖЬ
	//                      |	КОНЕЦ КАК НеБылАннулирован
	//                      |ПОМЕСТИТЬ ВТ_ДанныеПоЧекам
	//                      |ИЗ
	//                      |	ВТ_ПробитыеЧеки КАК ВТ_ПробитыеЧеки
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	//                      |		ПО ВТ_ПробитыеЧеки.Реализация = СостоянияЗаказов.Заказ
	//                      |			И (СостоянияЗаказов.Регистратор ССЫЛКА Документ.новаОтчетВодителя)
	//                      |			И (СостоянияЗаказов.Регистратор.Дата МЕЖДУ &Дата1 И &Дата2)
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводДанныхОСостоянииЗаказа КАК ВводДанныхОСостоянииЗаказа
	//                      |		ПО ВТ_ПробитыеЧеки.Реализация = ВводДанныхОСостоянииЗаказа.Заказ
	//                      |			И (ВводДанныхОСостоянииЗаказа.ТипОплатыДо <> ВводДанныхОСостоянииЗаказа.ТипОплатыПосле)
	//                      |			И (ВводДанныхОСостоянииЗаказа.Дата МЕЖДУ &Дата1 И &Дата2)
	//                      |			И (ВводДанныхОСостоянииЗаказа.Проведен)
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПечатьЧековПоДоставкам.Доставки КАК ПечатьЧековПоДоставкамДоставки
	//                      |		ПО ВТ_ПробитыеЧеки.Реализация = ПечатьЧековПоДоставкамДоставки.Доставка
	//                      |			И (ПечатьЧековПоДоставкамДоставки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2)
	//                      |			И (ПечатьЧековПоДоставкамДоставки.Ссылка.Проведен)
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АннулированиеЧеков.Заказы КАК АннулированиеЧековЗаказы
	//                      |		ПО ВТ_ПробитыеЧеки.Реализация = АннулированиеЧековЗаказы.Заказ
	//                      |			И (АннулированиеЧековЗаказы.Ссылка.Проведен)
	//                      |			И (АннулированиеЧековЗаказы.Ссылка.ПериодФормированияДанных МЕЖДУ &Дата1 И &Дата2)
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_ДанныеПоЧекам.ДокументЧек КАК ДокументЧек,
	//                      |	ВТ_ДанныеПоЧекам.Заказ,
	//                      |	ВТ_ДанныеПоЧекам.РезультатДоставки,
	//                      |	ВТ_ДанныеПоЧекам.ДокументВводДанных,
	//                      |	ВТ_ДанныеПоЧекам.ДокументПечатьЧеков,
	//                      |	ВТ_ДанныеПоЧекам.ПричинаНеВыполнения,
	//                      |	ЧекККМТовары.Номенклатура
	//                      |ИЗ
	//                      |	ВТ_ДанныеПоЧекам КАК ВТ_ДанныеПоЧекам
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
	//                      |		ПО ВТ_ДанныеПоЧекам.ДокументЧек = ЧекККМТовары.Ссылка
	//                      |ГДЕ
	//                      |	(ВТ_ДанныеПоЧекам.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.НеВыполнена)
	//                      |			ИЛИ ВТ_ДанныеПоЧекам.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ВыполненаЧастично)
	//                      |			ИЛИ ВТ_ДанныеПоЧекам.ДокументВводДанных = ИСТИНА)
	//                      |	И ВТ_ДанныеПоЧекам.НеБылАннулирован = ИСТИНА
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	ВТ_ДанныеПоЧекам.ДокументЧек,
	//                      |	ВТ_ДанныеПоЧекам.Заказ,
	//                      |	ВТ_ДанныеПоЧекам.РезультатДоставки,
	//                      |	ВТ_ДанныеПоЧекам.ДокументВводДанных,
	//                      |	ВТ_ДанныеПоЧекам.ДокументПечатьЧеков,
	//                      |	ВТ_ДанныеПоЧекам.ПричинаНеВыполнения,
	//                      |	ЧекККМТовары.Номенклатура");
	//Запрос.УстановитьПараметр("Дата1", НачалоДня(Объект.ПериодФормированияДанных));
	//Запрос.УстановитьПараметр("Дата2", КонецДня(Объект.ПериодФормированияДанных));
	//ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПечатьЧековПоДоставкамЧеки.Ссылка КАК Ссылка,
	                      |	ПечатьЧековПоДоставкамЧеки.Доставка КАК Заказ,
	                      |	ПечатьЧековПоДоставкамЧеки.Номенклатура КАК Номенклатура,
	                      |	ПечатьЧековПоДоставкамЧеки.Чек КАК Чек,
	                      |	ПечатьЧековПоДоставкамЧеки.Контрагент КАК Контрагент,
	                      |	ПечатьЧековПоДоставкамЧеки.ПробитьЧек КАК ПробитьЧек,
	                      |	ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно КАК ЧекПробитОшибочно,
	                      |	новаРейсМестнойДоставки.Ссылка КАК РейсБП
	                      |ПОМЕСТИТЬ ВТ_Чеки
	                      |ИЗ
	                      |	БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	                      |		ПО новаРейсМестнойДоставки.Ссылка = ПечатьЧековПоДоставкамЧеки.Ссылка.Рейс
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	                      |		ПО новаРейсМестнойДоставки.Ссылка = Рейс.РейсМестнойДоставки
	                      |ГДЕ
	                      |	новаРейсМестнойДоставки.ДатаНачала МЕЖДУ &Дата1 И &Дата2
	                      |	И новаРейсМестнойДоставки.ПометкаУдаления = ЛОЖЬ
	                      |	И ПечатьЧековПоДоставкамЧеки.ПробитьЧек
	                      |	И ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно = ЛОЖЬ
	                      |	И Рейс.ТерминалДоставки = &ТерминалДоставки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Чеки.Заказ КАК Заказ,
	                      |	ВТ_Чеки.Номенклатура КАК Номенклатура,
	                      |	ВТ_Чеки.Чек КАК Чек,
	                      |	ВТ_Чеки.Контрагент КАК Контрагент,
	                      |	ВТ_Чеки.РейсБП КАК РейсБП,
	                      |	СостоянияЗаказов.Регистратор КАК Регистратор,
	                      |	ЕСТЬNULL(СостоянияЗаказов.РезультатДоставки, ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.ПустаяСсылка)) КАК РезультатДоставки,
	                      |	СостоянияЗаказов.ПричинаНеВыполнения КАК ПричинаНеВыполнения,
	                      |	СостоянияЗаказов.ПричинаОтказа КАК ПричинаОтказа,
	                      |	ВТ_Чеки.Ссылка КАК ДокументПечатьЧеков,
	                      |	ВводДанныхОСостоянииЗаказа.Ссылка КАК ВводДанныхОСостоянииЗаказа,
	                      |	ВЫБОР
	                      |		КОГДА ВводДанныхОСостоянииЗаказа.Ссылка ЕСТЬ NULL
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК СменаОплаты,
	                      |	ВводДанныхОСостоянииЗаказа.ТипОплатыДо КАК ТипОплатыДо
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	ВТ_Чеки КАК ВТ_Чеки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводДанныхОСостоянииЗаказа КАК ВводДанныхОСостоянииЗаказа
	                      |			ПО СостоянияЗаказов.Заказ = ВводДанныхОСостоянииЗаказа.Заказ
	                      |				И (СостоянияЗаказов.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг)
	                      |				И (ВводДанныхОСостоянииЗаказа.ТипОплатыДо <> ВводДанныхОСостоянииЗаказа.ТипОплатыПосле)
	                      |				И (ВводДанныхОСостоянииЗаказа.Проведен)
	                      |				И (ВводДанныхОСостоянииЗаказа.Рейс.ДатаНачала МЕЖДУ &Дата1 И &Дата2)
	                      |		ПО ВТ_Чеки.Заказ.Номер = СостоянияЗаказов.Доставка.Номер
	                      |			И (СостоянияЗаказов.Регистратор.Рейс.ДатаНачала МЕЖДУ &Дата1 И &Дата2)
	                      |ГДЕ
	                      |	СостоянияЗаказов.Регистратор ССЫЛКА Документ.новаОтчетВодителя
	                      |	И (СостоянияЗаказов.РезультатДоставки <> ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.Выполнена)
	                      |			ИЛИ НЕ ВводДанныхОСостоянииЗаказа.Ссылка ЕСТЬ NULL)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Заказ КАК Заказ,
	                      |	ВТ.Номенклатура КАК Номенклатура,
	                      |	ВТ.Чек КАК Чек,
	                      |	ВТ.Контрагент КАК Контрагент,
	                      |	ВТ.РейсБП КАК РейсБП,
	                      |	ВТ.Регистратор КАК Регистратор,
	                      |	ВТ.РезультатДоставки КАК РезультатДоставки,
	                      |	ВТ.ПричинаНеВыполнения КАК ПричинаНеВыполнения,
	                      |	ВТ.ПричинаОтказа КАК ПричинаОтказа,
	                      |	ВЫБОР
	                      |		КОГДА ПриходДСПоОтчетуВодителяТовары.ИсходноеКоличество - ПриходДСПоОтчетуВодителяТовары.Количество > 0
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК НужноАннулировать,
	                      |	ВЫБОР
	                      |		КОГДА АннулированиеЧековЧекиКАннулированию.Ссылка ЕСТЬ NULL
	                      |				ИЛИ АннулированиеЧековЧекиКАннулированию.Ссылка = ЗНАЧЕНИЕ(Документ.АннулированиеЧеков.ПустаяСсылка)
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК БылоАннулировано,
	                      |	ВТ.ДокументПечатьЧеков КАК ДокументПечатьЧеков,
	                      |	ВТ.ВводДанныхОСостоянииЗаказа КАК ВводДанныхОСостоянииЗаказа,
	                      |	ВТ.СменаОплаты КАК СменаОплаты,
	                      |	ВТ.ТипОплатыДо КАК ТипОплатыДо
	                      |ПОМЕСТИТЬ ВТ_Итог
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходДСПоОтчетуВодителя.Товары КАК ПриходДСПоОтчетуВодителяТовары
	                      |		ПО ВТ.Заказ = ПриходДСПоОтчетуВодителяТовары.Доставка
	                      |			И ВТ.Номенклатура = ПриходДСПоОтчетуВодителяТовары.Номенклатура
	                      |			И ВТ.Регистратор = ПриходДСПоОтчетуВодителяТовары.Ссылка.ОтчетВодителя
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АннулированиеЧеков.ЧекиКАннулированию КАК АннулированиеЧековЧекиКАннулированию
	                      |		ПО ВТ.Заказ = АннулированиеЧековЧекиКАннулированию.Заказ
	                      |			И ВТ.Чек = АннулированиеЧековЧекиКАннулированию.Чек
	                      |			И (АннулированиеЧековЧекиКАннулированию.КАннулированию)
	                      |			И (АннулированиеЧековЧекиКАннулированию.Ссылка.Проведен)
	                      |			И (АннулированиеЧековЧекиКАннулированию.Ссылка.ПериодФормированияДанных МЕЖДУ &Дата1 И &Дата2)
	                      |			И (АннулированиеЧековЧекиКАннулированию.Ссылка <> &Ссылка)
	                      |ГДЕ
	                      |	(ВТ.СменаОплаты = ЛОЖЬ
	                      |				И ВТ.РезультатДоставки <> ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.Выполнена)
	                      |			ИЛИ ВТ.СменаОплаты = ИСТИНА
	                      |				И ВТ.Чек.ТипОплаты = ВТ.ТипОплатыДо)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Итог.Заказ КАК Заказ,
	                      |	ВТ_Итог.Номенклатура КАК Номенклатура,
	                      |	ВТ_Итог.Чек КАК Чек,
	                      |	ВТ_Итог.Контрагент КАК Контрагент,
	                      |	ВТ_Итог.РейсБП КАК РейсБП,
	                      |	ВТ_Итог.Регистратор КАК Регистратор,
	                      |	ВТ_Итог.РезультатДоставки КАК РезультатДоставки,
	                      |	ВТ_Итог.ПричинаНеВыполнения КАК ПричинаНеВыполнения,
	                      |	ВТ_Итог.ПричинаОтказа КАК ПричинаОтказа,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_Итог.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.НеВыполнена)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ВТ_Итог.НужноАннулировать
	                      |	КОНЕЦ КАК НужноАннулировать,
	                      |	ВТ_Итог.БылоАннулировано КАК БылоАннулировано,
	                      |	ВТ_Итог.ДокументПечатьЧеков КАК ДокументПечатьЧеков,
	                      |	ВТ_Итог.ВводДанныхОСостоянииЗаказа КАК ДокументВводДанных,
	                      |	ВТ_Итог.СменаОплаты КАК СменаОплаты,
	                      |	ВТ_Итог.ТипОплатыДо КАК ТипОплатыДо
	                      |ИЗ
	                      |	ВТ_Итог КАК ВТ_Итог
	                      |ГДЕ
	                      |	ВТ_Итог.БылоАннулировано = ЛОЖЬ
	                      |	И ВТ_Итог.Чек.ЧекПробитНаККМ");
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Объект.ПериодФормированияДанных));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Объект.ПериодФормированияДанных));
	// МАС - 08.06.2017 - №968 --->> 
	Запрос.УстановитьПараметр("ТерминалДоставки", Объект.ТерминалДоставки);	
	// <<--- МАС 
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ТЗРезультат = Запрос.Выполнить().Выгрузить();					  
						  
	
	// заполнение ТЧ Заказы
	КопияТЗ = ТЗРезультат.Скопировать();
	КопияТЗ.Свернуть("Заказ,РезультатДоставки,ПричинаНеВыполнения,ДокументВводДанных,СменаОплаты");	
	
	Для каждого Стр Из КопияТЗ Цикл		
		НЗаказ = Объект.Заказы.Добавить();
		НЗаказ.Заказ = Стр.Заказ;
		НЗаказ.РезультатДоставки = Стр.РезультатДоставки;
		НЗаказ.ПричинаНевыполнения = Стр.ПричинаНеВыполнения;			
		
		Если Стр.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда 
			ИЛИ Стр.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда	
			НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.ОтказОтЗаказа;
		ИначеЕсли Стр.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки
			ИЛИ Стр.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда			
			НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.ПереносЗаказа;			
		ИначеЕсли Стр.СменаОплаты = Истина Тогда		
			НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.СменаТипаОплатыПриДоставкеЗаказа;		
		ИначеЕсли Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда		
			НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.ЧастичныйВыкуп;		
		КонецЕсли;		
	КонецЦикла;	
	
	
	// заполнение ТЧ ЧекиКАннулированию
	Для каждого Рез Из ТЗРезультат Цикл			
		НЧек = Объект.ЧекиКАннулированию.Добавить();
		НЧек.Заказ = Рез.Заказ;
		НЧек.Чек = Рез.Чек;
		НЧек.ПоДаннымЗаполнения = Истина;
		НЧек.КАннулированию = Рез.НужноАннулировать;	
		НЧек.ДокументПечатиЧеков = Рез.ДокументПечатьЧеков;
		НЧек.Номенклатура = Рез.Номенклатура;
	КонецЦикла;
	
	
	

	// Дозаполнение по самовывозам
	ЗапросСамовывозы = Новый Запрос("ВЫБРАТЬ
	                                |	ПечатьЧековПоДоставкамЧеки.Ссылка КАК Док,
	                                |	ПечатьЧековПоДоставкамЧеки.Доставка КАК Доставка,
	                                |	ПечатьЧековПоДоставкамЧеки.Номенклатура КАК Номенклатура,
	                                |	ПечатьЧековПоДоставкамЧеки.Чек КАК Чек
	                                |ПОМЕСТИТЬ ВТ_Чеки
	                                |ИЗ
	                                |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	                                |ГДЕ
	                                |	ПечатьЧековПоДоставкамЧеки.Ссылка.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Самовывоз)
	                                |	И ПечатьЧековПоДоставкамЧеки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	                                |	И ПечатьЧековПоДоставкамЧеки.Ссылка.Проведен
	                                |	И ПечатьЧековПоДоставкамЧеки.ПробитьЧек
	                                |	И ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно = ЛОЖЬ
	                                |	И ВЫБОР
	                                |			КОГДА ПечатьЧековПоДоставкамЧеки.Доставка ССЫЛКА Документ.Фрахт
	                                |				ТОГДА ПечатьЧековПоДоставкамЧеки.Доставка.Терминал = &ТерминалДоставки
	                                |			ИНАЧЕ ПечатьЧековПоДоставкамЧеки.Доставка.ТерминалДоставки = &ТерминалДоставки
	                                |		КОНЕЦ
	                                |;
	                                |
	                                |////////////////////////////////////////////////////////////////////////////////
	                                |ВЫБРАТЬ
	                                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Чеки.Док) КАК КоличествоДок,
	                                |	ВТ_Чеки.Доставка КАК Доставка,
	                                |	ВТ_Чеки.Номенклатура КАК Номенклатура,
	                                |	МАКСИМУМ(ВТ_Чеки.Чек) КАК АктуальныйЧек,
	                                |	МАКСИМУМ(ВТ_Чеки.Док) КАК Док
	                                |ПОМЕСТИТЬ ВТ_АктуальныеЧеки
	                                |ИЗ
	                                |	ВТ_Чеки КАК ВТ_Чеки
	                                |
	                                |СГРУППИРОВАТЬ ПО
	                                |	ВТ_Чеки.Доставка,
	                                |	ВТ_Чеки.Номенклатура
	                                |;
	                                |
	                                |////////////////////////////////////////////////////////////////////////////////
	                                |ВЫБРАТЬ
	                                |	ВТ_Чеки.Док КАК ДокументПечатьЧеков,
	                                |	ВТ_Чеки.Доставка КАК Заказ,
	                                |	ВТ_Чеки.Номенклатура КАК Номенклатура,
	                                |	ВТ_Чеки.Чек КАК Чек,
	                                |	ВЫБОР
	                                |		КОГДА ВТ_АктуальныеЧеки1.Док ЕСТЬ NULL
	                                |			ТОГДА ИСТИНА
	                                |		ИНАЧЕ ЛОЖЬ
	                                |	КОНЕЦ КАК НужноАннулировать
	                                |ИЗ
	                                |	ВТ_Чеки КАК ВТ_Чеки
	                                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктуальныеЧеки КАК ВТ_АктуальныеЧеки
	                                |		ПО ВТ_Чеки.Доставка = ВТ_АктуальныеЧеки.Доставка
	                                |			И ВТ_Чеки.Номенклатура = ВТ_АктуальныеЧеки.Номенклатура
	                                |			И (ВТ_АктуальныеЧеки.КоличествоДок > 1)
	                                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеЧеки КАК ВТ_АктуальныеЧеки1
	                                |		ПО ВТ_Чеки.Док = ВТ_АктуальныеЧеки1.Док
	                                |ГДЕ
	                                |	ВТ_Чеки.Чек.ЧекПробитНаККМ");	
	ЗапросСамовывозы.УстановитьПараметр("Дата1", НачалоДня(Объект.ПериодФормированияДанных));
	ЗапросСамовывозы.УстановитьПараметр("Дата2", КонецДня(Объект.ПериодФормированияДанных));
	// МАС - 08.06.2017 - №968 --->> 
	ЗапросСамовывозы.УстановитьПараметр("ТерминалДоставки", Объект.ТерминалДоставки);	
	// <<--- МАС		
	ТЗРезультатСамовывозы = ЗапросСамовывозы.Выполнить().Выгрузить();
	
	
	// заполнение ТЧ Заказы
	КопияТЗСамовывозы = ТЗРезультатСамовывозы.Скопировать();
	КопияТЗСамовывозы.Свернуть("Заказ");	
	
	// по самовывозам
	Для каждого Стр Из КопияТЗСамовывозы Цикл		
		НЗаказ = Объект.Заказы.Добавить();
		НЗаказ.Заказ = Стр.Заказ;	
		НЗаказ.ПричинаАннулированияЧеков = Перечисления.ПричиныАннулированияЧеков.ПеребитиеЧека;
	КонецЦикла;	
	
	
	// заполнение ТЧ ЧекиКАннулированию (по самовывозам)
	Для каждого РезС Из ТЗРезультатСамовывозы Цикл	
		//Если РезС.НужноАннулировать Тогда
			
			НЧек = Объект.ЧекиКАннулированию.Добавить();
			НЧек.Заказ = РезС.Заказ;
			НЧек.Чек = РезС.Чек;
			НЧек.ПоДаннымЗаполнения = Истина;
			НЧек.КАннулированию = РезС.НужноАннулировать;	
			НЧек.ДокументПечатиЧеков = РезС.ДокументПечатьЧеков;
			НЧек.Номенклатура = РезС.Номенклатура;	
			
		//КонецЕсли;		
	КонецЦикла;
	
		
	Если ЗначениеЗаполнено(Элементы.Заказы.ТекущаяСтрока) Тогда
		ТекДанные = Элементы.Заказы.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда		
			ОбновитьОтображениеТаблиц(ТекДанные.Заказ);		
		КонецЕсли;		
	КонецЕсли;

	
КонецПроцедуры




Процедура ОбновитьОтображениеТаблиц(ДанныеЗаказ)

	// ТЗ ЧекиПоЗаказу
	ЧекиПоЗаказу.Очистить();				
	НайСтроки = Объект.ЧекиКАннулированию.НайтиСтроки(Новый Структура("Заказ", ДанныеЗаказ));	
	
	Если НайСтроки.Количество() Тогда	
		Для каждого Строка Из НайСтроки Цикл		
			НСтр = ЧекиПоЗаказу.Добавить(); 
			ЗаполнитьЗначенияСвойств(НСтр, Строка);		
		КонецЦикла;		
	КонецЕсли;
	
	
	// ТЗ ВозвратныеЧеки
	ВозвратныеЧеки.Очистить();				
	НайСтроки = Объект.ВозвратныеЧеки.НайтиСтроки(Новый Структура("Заказ", ДанныеЗаказ));	
	
	Если НайСтроки.Количество() Тогда	
		Для каждого Строка Из НайСтроки Цикл		
			НСтр = ВозвратныеЧеки.Добавить(); 
			ЗаполнитьЗначенияСвойств(НСтр, Строка);		
		КонецЦикла;		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбработатьОтвет(РезультатВопроса, КакиетоПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Объект.Заказы.Очистить();
		ЗаполнитьАвтоматически();
	Иначе
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда	
		ОбновитьОтображениеТаблиц(ТекДанные.Заказ);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Элементы.Заказы.ТекущаяСтрока) Тогда
		ТекДанные = Элементы.Заказы.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда	
			ОбновитьОтображениеТаблиц(ТекДанные.Заказ);		
		КонецЕсли;	
	КонецЕсли;	
	
	// доступность элементов
	Если Объект.ВозвратныеЧеки.Количество() Тогда		
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСоздатьВозвратныеЧеки.Доступность = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Доступность = Ложь;
		Элементы.ЧекиПоЗаказу.КоманднаяПанель.ПодчиненныеЭлементы.ПроставитьВсе.Доступность = Ложь;
		Элементы.ЧекиПоЗаказу.КоманднаяПанель.ПодчиненныеЭлементы.СнятьВсе.Доступность = Ложь;
		Элементы.ГруппаСтраницы.ТолькоПросмотр = Истина;
		Элементы.Страницы.ТолькоПросмотр = Истина;
		Элементы.Дата.ТолькоПросмотр = Истина;
		Элементы.ПериодФормированияДанных.ТолькоПросмотр = Истина;	
		Элементы.ВозвратныеЧекиСтраница.Видимость = Истина;		
	Иначе
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСоздатьВозвратныеЧеки.Доступность = Истина;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Доступность = Истина;
		Элементы.ЧекиПоЗаказу.КоманднаяПанель.ПодчиненныеЭлементы.ПроставитьВсе.Доступность = Истина;
		Элементы.ЧекиПоЗаказу.КоманднаяПанель.ПодчиненныеЭлементы.СнятьВсе.Доступность = Истина;
		Элементы.ГруппаСтраницы.ТолькоПросмотр = Ложь;
		Элементы.Страницы.ТолькоПросмотр = Ложь;
		Элементы.Дата.ТолькоПросмотр = Ложь;
		Элементы.ПериодФормированияДанных.ТолькоПросмотр = Ложь;
		Элементы.ВозвратныеЧекиСтраница.Видимость = Ложь;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиПоЗаказуПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;	
	ОбновитьДанныеВИсходнойТаблице(ТекДанные.Заказ);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОбновитьДанныеВИсходнойТаблице(ДанныеЗаказ)

	ТЗЧекиПоЗаказу = ЧекиПоЗаказу.Выгрузить();
	
	НайСтроки = Объект.ЧекиКАннулированию.НайтиСтроки(Новый Структура("Заказ", ДанныеЗаказ));
	
	// Удаляем старые строки
	Для каждого Стр Из НайСтроки Цикл	
		Объект.ЧекиКАннулированию.Удалить(Объект.ЧекиКАннулированию.Индекс(Стр));		
	КонецЦикла;
	
	// Заполняем измененными строкам
	Для каждого СтрЧеки Из ТЗЧекиПоЗаказу Цикл	
		НСтр = Объект.ЧекиКАннулированию.Добавить();	
		ЗаполнитьЗначенияСвойств(НСтр, СтрЧеки);	
	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		Объект.ПериодФормированияДанных = ТекущаяДата();	
		Объект.Оператор = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	
	// МАС - 08.06.2017 - №968 --->> 	      
	Если Объект.ТерминалДоставки.Пустая() Тогда	
		Объект.ТерминалДоставки = ?(ЗначениеЗаполнено(ПараметрыСеанса.ТерминалДоставки), ПараметрыСеанса.ТерминалДоставки, Справочники.РегиональныеТерминалы.МоскваСтриж);	
	КонецЕсли;
	// <<--- МАС
	
КонецПроцедуры


&НаКлиенте
Процедура ПроставитьКАннулированию(Команда)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	Для каждого Стр Из ЧекиПоЗаказу Цикл	
		Стр.КАннулированию = Истина;		
	КонецЦикла;
	ОбновитьДанныеВИсходнойТаблице(ТекДанные.Заказ);
	
КонецПроцедуры


&НаКлиенте
Процедура СнятьКАннулированию(Команда)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	Для каждого Стр Из ЧекиПоЗаказу Цикл	
		Стр.КАннулированию = Ложь;		
	КонецЦикла;
	ОбновитьДанныеВИсходнойТаблице(ТекДанные.Заказ);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЗаполнитьЧекиПоВыбранномуЗначению(ВыбранноеЗначение);
	
КонецПроцедуры


Функция ЗаполнитьЧекиПоВыбранномуЗначению(ВыбранноеЗначение)

	//Проверка на присутствие в документе
	НайСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", ВыбранноеЗначение));
	
	Если НайСтроки.Количество() Тогда	
		Сообщить("Этот заказ уже добавлен");	
	    Возврат Ложь;
	КонецЕсли;
	
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ПечатьЧековПоДоставкамЧеки.Ссылка КАК ДокументПечатьЧеков,
	//                      |	ПечатьЧековПоДоставкамЧеки.НомерСтроки КАК НомерСтроки,
	//                      |	ПечатьЧековПоДоставкамЧеки.Доставка КАК Заказ,
	//                      |	ПечатьЧековПоДоставкамЧеки.Номенклатура КАК Номенклатура,
	//                      |	ПечатьЧековПоДоставкамЧеки.Чек КАК ДокументЧек,
	//                      |	ПечатьЧековПоДоставкамЧеки.Отдел КАК Отдел,
	//                      |	ПечатьЧековПоДоставкамЧеки.ВидОперацииЧека КАК ВидОперацииЧека,
	//                      |	ПечатьЧековПоДоставкамЧеки.Контрагент КАК Контрагент,
	//                      |	ПечатьЧековПоДоставкамЧеки.ПробитьЧек КАК ПробитьЧек,
	//                      |	ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно КАК ЧекПробитОшибочно,
	//                      |	ПечатьЧековПоДоставкамЧеки.ЧекВозвратаПрихода КАК ЧекВозвратаПрихода
	//                      |ИЗ
	//                      |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	//                      |ГДЕ
	//                      |	(ВЫРАЗИТЬ(ПечатьЧековПоДоставкамЧеки.Доставка КАК Документ.РеализацияТоваровУслуг)) = &Доставка
	//                      |	И ПечатьЧековПоДоставкамЧеки.ПробитьЧек = ИСТИНА
	//                      |	И ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно = ЛОЖЬ
	//                      |	И ПечатьЧековПоДоставкамЧеки.Ссылка.Проведен = ИСТИНА");
	//Запрос.УстановитьПараметр("Доставка", ВыбранноеЗначение);
	//ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПечатьЧековПоДоставкамЧеки.Ссылка КАК ДокументПечатьЧеков,
	                      |	ПечатьЧековПоДоставкамЧеки.Доставка КАК Заказ,
	                      |	ПечатьЧековПоДоставкамЧеки.Номенклатура КАК Номенклатура,
	                      |	ПечатьЧековПоДоставкамЧеки.Чек КАК ДокументЧек,
	                      |	ПечатьЧековПоДоставкамЧеки.Отдел КАК Отдел,
	                      |	ПечатьЧековПоДоставкамЧеки.ВидОперацииЧека КАК ВидОперацииЧека,
	                      |	ПечатьЧековПоДоставкамЧеки.Контрагент КАК Контрагент,
	                      |	ПечатьЧековПоДоставкамЧеки.ПробитьЧек КАК ПробитьЧек,
	                      |	ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно КАК ЧекПробитОшибочно,
	                      |	ПечатьЧековПоДоставкамЧеки.ЧекВозвратаПрихода КАК ЧекВозвратаПрихода
	                      |ИЗ
	                      |	Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	                      |ГДЕ
	                      |	(ВЫРАЗИТЬ(ПечатьЧековПоДоставкамЧеки.Доставка КАК Документ.РеализацияТоваровУслуг)) = &Доставка
	                      |	И ПечатьЧековПоДоставкамЧеки.ПробитьЧек = ИСТИНА
	                      |	И ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно = ЛОЖЬ
	                      |	И ПечатьЧековПоДоставкамЧеки.Ссылка.Проведен = ИСТИНА
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ЗНАЧЕНИЕ(Документ.ПечатьчековПоДоставкам.ПустаяСсылка),
	                      |	ЧекККМТовары.Ссылка.Реализация,
	                      |	ЧекККМТовары.Номенклатура,
	                      |	ЧекККМТовары.Ссылка,
	                      |	ЧекККМТовары.Ссылка.Склад,
	                      |	ЧекККМТовары.Ссылка.ВидОперации,
	                      |	ЧекККМТовары.Ссылка.Контрагент,
	                      |	ИСТИНА,
	                      |	ЧекККМТовары.Ссылка.ЧекПробитОшибочно,
	                      |	ЛОЖЬ
	                      |ИЗ
	                      |	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	                      |ГДЕ
	                      |	(ВЫРАЗИТЬ(ЧекККМТовары.Ссылка.Реализация КАК Документ.РеализацияТоваровУслуг)) = &Доставка
	                      |	И ЧекККМТовары.Ссылка.Проведен = ИСТИНА
	                      |	И ЧекККМТовары.Ссылка.ЧекПробитНаККМ = ИСТИНА
	                      |	И ЧекККМТовары.Ссылка.ЧекПробитОшибочно = ЛОЖЬ");
	Запрос.УстановитьПараметр("Доставка", ВыбранноеЗначение);
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	
	
	Для каждого Рез Из ТЗРезультат Цикл			
		НЧек = Объект.ЧекиКАннулированию.Добавить();
		НЧек.Заказ = Рез.Заказ;
		НЧек.Чек = Рез.ДокументЧек;
		НЧек.ПоДаннымЗаполнения = Ложь;
		НЧек.КАннулированию = Истина;	
		НЧек.ДокументПечатиЧеков = Рез.ДокументПечатьЧеков;
		НЧек.Номенклатура = Рез.Номенклатура;
	КонецЦикла;
	
	
	Если ТЗРезультат.Количество() Тогда	
		ОбновитьОтображениеТаблиц(Рез.Заказ);
		Возврат Истина;
	Иначе
		Сообщить("Нет данных для заполнения по заказу " + ВыбранноеЗначение);
		Возврат Ложь
	КонецЕсли;
	
	//// заполнение ТЧ ЧекиКАннулированию
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ПечатьЧековПоДоставкамЧеки.Ссылка,
	//                      |	ПечатьЧековПоДоставкамЧеки.Доставка КАК Заказ,
	//                      |	ПечатьЧековПоДоставкамЧеки.Номенклатура,
	//                      |	ПечатьЧековПоДоставкамЧеки.Чек,
	//                      |	ПечатьЧековПоДоставкамЧеки.Контрагент,
	//                      |	ПечатьЧековПоДоставкамЧеки.ПробитьЧек,
	//                      |	ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно,
	//                      |	новаРейсМестнойДоставки.Ссылка КАК РейсБП
	//                      |ПОМЕСТИТЬ ВТ_Чеки
	//                      |ИЗ
	//                      |	БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПечатьЧековПоДоставкам.Чеки КАК ПечатьЧековПоДоставкамЧеки
	//                      |		ПО новаРейсМестнойДоставки.Ссылка = ПечатьЧековПоДоставкамЧеки.Ссылка.Рейс
	//                      |ГДЕ
	//                      |	новаРейсМестнойДоставки.ДатаНачала МЕЖДУ &Дата1 И &Дата2
	//                      |	И новаРейсМестнойДоставки.ПометкаУдаления = ЛОЖЬ
	//                      |	И ПечатьЧековПоДоставкамЧеки.ПробитьЧек
	//                      |	И ПечатьЧековПоДоставкамЧеки.ЧекПробитОшибочно = ЛОЖЬ
	//                      |	И ПечатьЧековПоДоставкамЧеки.Доставка = &Реализация
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_Чеки.Заказ,
	//                      |	ВТ_Чеки.Номенклатура,
	//                      |	ВТ_Чеки.Чек,
	//                      |	ВТ_Чеки.Контрагент,
	//                      |	ВТ_Чеки.РейсБП,
	//                      |	СостоянияЗаказов.Регистратор,
	//                      |	ЕСТЬNULL(СостоянияЗаказов.РезультатДоставки, ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.ПустаяСсылка)) КАК РезультатДоставки,
	//                      |	СостоянияЗаказов.ПричинаНеВыполнения,
	//                      |	СостоянияЗаказов.ПричинаОтказа,
	//                      |	ВТ_Чеки.Ссылка КАК ДокументПечатьЧеков,
	//                      |	ВводДанныхОСостоянииЗаказа.Ссылка КАК ВводДанныхОСостоянииЗаказа,
	//                      |	ВЫБОР
	//                      |		КОГДА ВводДанныхОСостоянииЗаказа.Ссылка ЕСТЬ NULL 
	//                      |			ТОГДА ЛОЖЬ
	//                      |		ИНАЧЕ ИСТИНА
	//                      |	КОНЕЦ КАК СменаОплаты,
	//                      |	ВводДанныхОСостоянииЗаказа.ТипОплатыДо
	//                      |ПОМЕСТИТЬ ВТ
	//                      |ИЗ
	//                      |	ВТ_Чеки КАК ВТ_Чеки
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	//                      |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводДанныхОСостоянииЗаказа КАК ВводДанныхОСостоянииЗаказа
	//                      |			ПО СостоянияЗаказов.Заказ = ВводДанныхОСостоянииЗаказа.Заказ
	//                      |				И (СостоянияЗаказов.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг)
	//                      |				И (ВводДанныхОСостоянииЗаказа.ТипОплатыДо <> ВводДанныхОСостоянииЗаказа.ТипОплатыПосле)
	//                      |				И (ВводДанныхОСостоянииЗаказа.Проведен)
	//                      |				И (ВводДанныхОСостоянииЗаказа.Рейс.ДатаНачала МЕЖДУ &Дата1 И &Дата2)
	//                      |		ПО ВТ_Чеки.Заказ.Номер = СостоянияЗаказов.Доставка.Номер
	//                      |			И ВТ_Чеки.РейсБП = СостоянияЗаказов.Регистратор.Рейс
	//                      |ГДЕ
	//                      |	СостоянияЗаказов.Регистратор ССЫЛКА Документ.новаОтчетВодителя
	//                      |	И (СостоянияЗаказов.РезультатДоставки <> ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.Выполнена)
	//                      |			ИЛИ НЕ ВводДанныхОСостоянииЗаказа.Ссылка ЕСТЬ NULL )
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ.Заказ,
	//                      |	ВТ.Номенклатура,
	//                      |	ВТ.Чек,
	//                      |	ВТ.Контрагент,
	//                      |	ВТ.РейсБП,
	//                      |	ВТ.Регистратор,
	//                      |	ВТ.РезультатДоставки,
	//                      |	ВТ.ПричинаНеВыполнения,
	//                      |	ВТ.ПричинаОтказа,
	//                      |	ВЫБОР
	//                      |		КОГДА ПриходДСПоОтчетуВодителяТовары.ИсходноеКоличество - ПриходДСПоОтчетуВодителяТовары.Количество > 0
	//                      |			ТОГДА ИСТИНА
	//                      |		ИНАЧЕ ЛОЖЬ
	//                      |	КОНЕЦ КАК НужноАннулировать,
	//                      |	ВЫБОР
	//                      |		КОГДА АннулированиеЧековЧекиКАннулированию.Ссылка ЕСТЬ NULL 
	//                      |				ИЛИ АннулированиеЧековЧекиКАннулированию.Ссылка = ЗНАЧЕНИЕ(Документ.АннулированиеЧеков.ПустаяСсылка)
	//                      |			ТОГДА ЛОЖЬ
	//                      |		ИНАЧЕ ИСТИНА
	//                      |	КОНЕЦ КАК БылоАннулировано,
	//                      |	ВТ.ДокументПечатьЧеков,
	//                      |	ВТ.ВводДанныхОСостоянииЗаказа,
	//                      |	ВТ.СменаОплаты,
	//                      |	ВТ.ТипОплатыДо
	//                      |ПОМЕСТИТЬ ВТ_Итог
	//                      |ИЗ
	//                      |	ВТ КАК ВТ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходДСПоОтчетуВодителя.Товары КАК ПриходДСПоОтчетуВодителяТовары
	//                      |		ПО ВТ.Заказ = ПриходДСПоОтчетуВодителяТовары.Доставка
	//                      |			И ВТ.Номенклатура = ПриходДСПоОтчетуВодителяТовары.Номенклатура
	//                      |			И ВТ.Регистратор = ПриходДСПоОтчетуВодителяТовары.Ссылка.ОтчетВодителя
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АннулированиеЧеков.ЧекиКАннулированию КАК АннулированиеЧековЧекиКАннулированию
	//                      |		ПО ВТ.Заказ = АннулированиеЧековЧекиКАннулированию.Заказ
	//                      |			И ВТ.Чек = АннулированиеЧековЧекиКАннулированию.Чек
	//                      |			И (АннулированиеЧековЧекиКАннулированию.КАннулированию)
	//                      |			И (АннулированиеЧековЧекиКАннулированию.Ссылка.Проведен)
	//                      |			И (АннулированиеЧековЧекиКАннулированию.Ссылка.ПериодФормированияДанных МЕЖДУ &Дата1 И &Дата2)
	//                      |			И (АннулированиеЧековЧекиКАннулированию.Ссылка <> &Ссылка)
	//                      |ГДЕ
	//                      |	(ВТ.СменаОплаты = ЛОЖЬ
	//                      |				И ВТ.РезультатДоставки <> ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.Выполнена)
	//                      |			ИЛИ ВТ.СменаОплаты = ИСТИНА
	//                      |				И ВТ.Чек.ТипОплаты = ВТ.ТипОплатыДо)
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_Итог.Заказ,
	//                      |	ВТ_Итог.Номенклатура,
	//                      |	ВТ_Итог.Чек,
	//                      |	ВТ_Итог.Контрагент,
	//                      |	ВТ_Итог.РейсБП,
	//                      |	ВТ_Итог.Регистратор,
	//                      |	ВТ_Итог.РезультатДоставки,
	//                      |	ВТ_Итог.ПричинаНеВыполнения,
	//                      |	ВТ_Итог.ПричинаОтказа,
	//                      |	ВЫБОР
	//                      |		КОГДА ВТ_Итог.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.НеВыполнена)
	//                      |			ТОГДА ИСТИНА
	//                      |		ИНАЧЕ ВТ_Итог.НужноАннулировать
	//                      |	КОНЕЦ КАК НужноАннулировать,
	//                      |	ВТ_Итог.БылоАннулировано,
	//                      |	ВТ_Итог.ДокументПечатьЧеков,
	//                      |	ВТ_Итог.ВводДанныхОСостоянииЗаказа,
	//                      |	ВТ_Итог.СменаОплаты,
	//                      |	ВТ_Итог.ТипОплатыДо
	//                      |ИЗ
	//                      |	ВТ_Итог КАК ВТ_Итог
	//                      |ГДЕ
	//                      |	ВТ_Итог.БылоАннулировано = ЛОЖЬ
	//                      |	И ВТ_Итог.Чек.ЧекПробитНаККМ");
	//Запрос.УстановитьПараметр("Дата1", НачалоДня(Объект.ПериодФормированияДанных));
	//Запрос.УстановитьПараметр("Дата2", КонецДня(Объект.ПериодФормированияДанных));
	//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//Запрос.УстановитьПараметр("Реализация", ВыбранноеЗначение.Ссылка);
	//
	//ТЗРезультат = Запрос.Выполнить().Выгрузить();
	//
	//// заполнение ТЧ ЧекиКАннулированию
	//Для каждого Рез Из ТЗРезультат Цикл			
	//	НЧек = Объект.ЧекиКАннулированию.Добавить();
	//	НЧек.Заказ = Рез.Заказ;
	//	НЧек.Чек = Рез.ДокументЧек;
	//	НЧек.ПоДаннымЗаполнения = Ложь;
	//	НЧек.КАннулированию = Истина;	
	//	НЧек.ДокументПечатиЧеков = Рез.ДокументПечатьЧеков;
	//	НЧек.Номенклатура = Рез.Номенклатура;
	//КонецЦикла;
	//
	//
	//Если ТЗРезультат.Количество() Тогда	
	//	ОбновитьОтображениеТаблиц(Рез.Заказ);
	//	Возврат Истина;
	//Иначе
	//	Сообщить("Нет данных для заполнения по заказу " + ВыбранноеЗначение);
	//	Возврат Ложь
	//КонецЕсли;	
	

КонецФункции

&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;		
	ЧекиПоЗаказу.Очистить();
	ОбновитьДанныеВИсходнойТаблице(ТекДанные.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиПоЗаказуКАннулированиюПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЧекиПоЗаказу.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		Най = Объект.ЧекиКАннулированию.НайтиСтроки(Новый Структура("Чек", ТекДанные.Чек));
		Для каждого Стр Из Най Цикл		
			Стр.КАннулированию = ТекДанные.КАннулированию			
		КонецЦикла;
	
	КонецЕсли;
	
	ОбновитьОтображениеТаблиц(ТекДанные.Заказ);	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВозвратныеЧекиНаСервере()
	
	РубежФЗ54 = Константы.ДатаВремяПереходаНаФЗ54.Получить();
	
	Таб = Объект.ЧекиКАннулированию.Выгрузить();
	Таб.Свернуть("Чек, Заказ, КАннулированию");
	
	// создаем возвратные чеки	
	Для каждого Ст Из Таб Цикл	
		Если РубежФЗ54 < Ст.Чек.Дата И Ст.КАннулированию Тогда			
			ВозвратныйЧек = СоздатьВозвратныйЧек(Ст.Чек);	
			ДобЧек = Объект.ВозвратныеЧеки.Добавить();
			ДобЧек.ВозвратныйЧек = ВозвратныйЧек;
			ДобЧек.Заказ 		 = Ст.Заказ;
			ДобЧек.Чек   		 = Ст.Чек;
		КонецЕсли;
	КонецЦикла;
	
	
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСоздатьВозвратныеЧеки.Доступность = Ложь;
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Доступность = Ложь;
	Элементы.ЧекиПоЗаказу.КоманднаяПанель.ПодчиненныеЭлементы.ПроставитьВсе.Доступность = Ложь;
	Элементы.ЧекиПоЗаказу.КоманднаяПанель.ПодчиненныеЭлементы.СнятьВсе.Доступность = Ложь;
	Элементы.ГруппаСтраницы.ТолькоПросмотр = Истина;
	Элементы.Страницы.ТолькоПросмотр = Истина;
	Элементы.Дата.ТолькоПросмотр = Истина;
	Элементы.ПериодФормированияДанных.ТолькоПросмотр = Истина;	
	Элементы.ВозвратныеЧекиСтраница.Видимость = Истина;
	
	//========lem начало 14.07.2017 13:54:40==================
	Парам = Новый Структура;
	Парам.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(Парам);
	//========lem окончание 14.07.2017 13:54:47==================	
	
КонецПроцедуры

Функция СоздатьВозвратныйЧек(Чек)
	
	//ВозвратныйЧек = Чек.Скопировать();
	//ВозвратныйЧек.ТипКассовогоЧека = Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода;
	//ВозвратныйЧек.ЧекПробитНаККМ = Ложь;
	//ВозвратныйЧек.НомерЧекаККМ = 0;
	//ВозвратныйЧек.ЧекПробитОшибочно = Ложь;
	//ВозвратныйЧек.НомерСменыККМ = 0;
	//ВозвратныйЧек.Ответственный = Объект.Оператор;
	//
	////========lem начало 14.07.2017 13:50:02==================
	//ВозвратныйЧек.Дата = ТекущаяДата();
	//ВозвратныйЧек.ЧекПробитНаККМ = Ложь;
	////========lem окончание 14.07.2017 13:50:08==================	
	//ВозвратныйЧек.Записать(РежимЗаписиДокумента.Запись);
	//
	//Возврат ВозвратныйЧек.Ссылка;		
    Возврат РаботаСЧекамиККМСервер.СоздатьЧекНаОснованииЧека(Чек, Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода, Объект.Оператор);
КонецФункции

&НаКлиенте
Процедура СоздатьВозвратныеЧеки(Команда)
	СоздатьВозвратныеЧекиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВозвратныхЧеков(Команда)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	АннулированиеЧековВозвратныеЧеки.ВозвратныйЧек КАК Чек,
	            |	АннулированиеЧековВозвратныеЧеки.ВозвратныйЧек.КассаККМ КАК ККМ,
	            |	АннулированиеЧековВозвратныеЧеки.ВозвратныйЧек.КассаККМ.ККМИнтегрированаВСерверККМ КАК ККМИнтегрированаВСерверККМ,
	            |	АннулированиеЧековВозвратныеЧеки.ВозвратныйЧек.КассаККМ.Терминал.СерверККМ КАК СерверККМ,
	            |	АннулированиеЧековВозвратныеЧеки.Заказ.Номер КАК НомерЗаказа
	            |ИЗ
	            |	Документ.АннулированиеЧеков.ВозвратныеЧеки КАК АннулированиеЧековВозвратныеЧеки
	            |ГДЕ
	            |	АннулированиеЧековВозвратныеЧеки.ВозвратныйЧек.ЧекПробитНаККМ = ЛОЖЬ
	            |	И АннулированиеЧековВозвратныеЧеки.Ссылка.Ссылка = &Док
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	АннулированиеЧековВозвратныеЧеки.ВозвратныйЧек.Номер";
	Зап.УстановитьПараметр("Док", Объект.Ссылка);
	
	Выб = Зап.Выполнить().Выгрузить();
	
	ТабККМ = Выб.Скопировать();
	ТабККМ.Колонки.Добавить("Кол");
	ТабККМ.Колонки.Добавить("СерверККТ");
	
	Для Каждого Тек Из ТабККМ ЦИкл
		Тек.Кол = 1;
	КонецЦикла;	
	
	ТабККМ.Свернуть("ККМ, ККМИнтегрированаВСерверККМ, СерверККМ, СерверККТ", "Кол");
	
	Для Каждого Тек Из ТабККМ Цикл
		Если Тек.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			Ответ = РаботаСКассовымСерверомСервер.ЗахватитьККМНаСервереККМ(Тек.ККМ, Тек.СерверККМ, Объект.Ссылка);
			Если Не Ответ.Результат Тогда
				Сообщить("ККМ " + Строка(Тек.ККМ) + " не может быть захвачена для печати чеков! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		Тек.СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(Тек.ККМ);
	КонецЦикла;	
	
	ТС = "Заказ";
	ИнициализироватьФормуХодаОбработки("Печать чеков по заказам", ТС, 0, Объект.ВозвратныеЧеки.Количество());
	
	
	Для Каждого Тек Из Выб Цикл
		ТС = "Заказ: " + СокрЛП(Тек.НомерЗаказа);
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(ТС, 1);
			
			
		Чек = Тек.Чек.ПолучитьОбъект();
		Если Не Тек.ККМИнтегрированаВСерверККМ Тогда
			ФормаДокумента = Чек.ПолучитьФорму("ФормаДокумента");
			ФормаДокумента.Открыть();
		КонецеСли;	
		Ответ = "";
		Отказ = Ложь;
		
		Най = ТабККМ.Найти(Тек.ККМ);
		
		Если Най <> Неопределено Тогда
			Чек.ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента,, Най.СерверККТ);
		иначе	
			Чек.ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента);
		КонецеСли;
		
		//Чек.Записать(РежимЗаписиДокумента.Запись); оптимизация НГ
		Если Не Тек.ККМИнтегрированаВСерверККМ Тогда
			ФормаДокумента.Закрыть();
		КонецеСли;	
		Если Отказ Тогда
			Сообщить("Чек № " + СокрЛП(Чек.Номер) + ", ошибка пробития: " + Ответ, СтатусСообщения.Важное);
		КонецеСли;	
	КонецЦикла;
	
	Для Каждого Тек Из ТабККМ Цикл
		Если Тек.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			Ответ = РаботаСКассовымСерверомСервер.ОтпуститьККМНаСервереККМ(Тек.ККМ, Тек.СерверККМ, Объект.Ссылка);
			Если Не Ответ.Результат Тогда
				Сообщить("ККМ " + Строка(Тек.ККМ) + " не может быть освобождена на сервере ККМ! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
			КонецЕсли;			
		КонецЕсли;	
		ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(Тек.СерверККТ, Тек.ККМ);
	КонецЦикла;
	
	ЗакрытьФормуОбработкиДанных();
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда	
		ОбновитьОтображениеТаблиц(ТекДанные.Заказ);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ИнициализироватьФормуХодаОбработки(НаименованиеОбработкиДанных, Знач ТекстСообщения = "", Знач ПроцентПрибавления = 0, МаксимальноеЗначение = 100)
	
	ФормаХодаПечатиЧеков = Неопределено;
	ФормаХодаПечатиЧеков = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	ФормаХодаПечатиЧеков.НаименованиеОбработкиДанных = НаименованиеОбработкиДанных;
	ФормаХодаПечатиЧеков.КомментарийОбработкиДанных = ТекстСообщения;	
	ФормаХодаПечатиЧеков.Значение = ПроцентПрибавления;
	ФормаХодаПечатиЧеков.МаксимальноеЗначение = МаксимальноеЗначение;
	
	Если Не ФормаХодаПечатиЧеков.Открыта() Тогда
		ФормаХодаПечатиЧеков.Открыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуОбработкиДанных()
	
	Если ФормаХодаПечатиЧеков <> Неопределено Тогда
		
		Если ФормаХодаПечатиЧеков.Открыта() Тогда
			ФормаХодаПечатиЧеков.Закрыть();
		КонецЕсли;
		
		ФормаХодаПечатиЧеков = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНовоеСообщениеВФормеХодаОбработки(Знач ТекстСообщения, Знач ПроцентПрибавления = 0)
	
	ФормаХодаПечатиЧеков.КомментарийОбработкиДанных = ТекстСообщения;	
	ФормаХодаПечатиЧеков.Значение = ФормаХодаПечатиЧеков.Значение + ПроцентПрибавления;
			
КонецПроцедуры




