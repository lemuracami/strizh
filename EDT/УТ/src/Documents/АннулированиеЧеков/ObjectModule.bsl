

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	
	Движения.ЖурналККМ.Записывать = Истина;
	
	//ТЗЧекиКАннулированию = ЧекиКАннулированию.Выгрузить(,"Чек");
	//ТЗЧекиКАннулированию.Свернуть("Чек");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	АннулированиеЧековЧекиКАннулированию.Чек
	                      |ИЗ
	                      |	Документ.АннулированиеЧеков.ЧекиКАннулированию КАК АннулированиеЧековЧекиКАннулированию
	                      |ГДЕ
	                      |	АннулированиеЧековЧекиКАннулированию.Ссылка.Ссылка = &Ссылка
	                      |	И АннулированиеЧековЧекиКАннулированию.КАннулированию
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	АннулированиеЧековЧекиКАннулированию.Чек");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтрокаЧеки Из Рез Цикл					
		Движение = Движения.ЖурналККМ.Добавить();
		Движение.Период = ТекСтрокаЧеки.Чек.Дата;
		Движение.КассаККМ = ТекСтрокаЧеки.Чек.КассаККМ;
		Движение.ВидОперации = ТекСтрокаЧеки.Чек.ВидОперации;
		Движение.Отдел = ТекСтрокаЧеки.Чек.Склад;
		Движение.Секция = ТекСтрокаЧеки.Чек.Секция;
		Движение.ЧекККМ = ТекСтрокаЧеки.Чек;
		Движение.ЧекПробитОшибочно = Истина;
		Движение.Сумма = ТекСтрокаЧеки.Чек.СуммаДокумента;
		Движение.ТипОплаты = ТекСтрокаЧеки.Чек.ТипОплаты;
		Движение.Кассир = ТекСтрокаЧеки.Чек.Ответственный;			
	КонецЦикла;	
	
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Заказы.Количество() Тогда	
		Сообщить("Заказы не заполнены");	
	    Отказ = Истина;
	КонецЕсли;	
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ВозвратныеЧеки.Количество() Тогда
		
		Сообщить("Перед проведением нужно заполнить возвратные заказы");
		Отказ = Истина;		
	
	КонецЕсли;
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Сообщить("Отмена проведения запрещена");
		Отказ = Истина;	
	
	КонецЕсли;
	
	//РубежФЗ54 = Константы.ДатаВремяПереходаНаФЗ54.Получить();
	//
	//// создаем возвратные чеки	
	//Для каждого Ст Из ЧекиКАннулированию Цикл	
	//	Если РубежФЗ54 < Ст.Чек.Дата Тогда
	//		ВозвратныйЧек = СоздатьВозвратныйЧек(Ст.Чек);	
	//		ДобЧек = ВозвратныеЧеки.Добавить();
	//		ДобЧек.ВозвратныйЧек = ВозвратныйЧек;
	//		ДобЧек.Заказ 		 = Ст.Заказ;
	//		ДобЧек.Чек   		 = Ст.Чек;
	//	КонецЕсли;
	//КонецЦикла;
			
КонецПроцедуры


Функция СоздатьВозвратныйЧек(Чек)
	
	ВозвратныйЧек = Чек.Скопировать();
	ВозвратныйЧек.ТипКассовогоЧека = Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода;
	ВозвратныйЧек.ЧекПробитНаККМ = Ложь;
	ВозвратныйЧек.НомерЧекаККМ = 0;
	ВозвратныйЧек.ЧекПробитОшибочно = Ложь;
	ВозвратныйЧек.НомерСменыККМ = 0;
	ВозвратныйЧек.Ответственный = Оператор;
	ВозвратныйЧек.Дата = Дата;
	
	ВозвратныйЧек.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ВозвратныйЧек.Ссылка;
		

КонецФункции


