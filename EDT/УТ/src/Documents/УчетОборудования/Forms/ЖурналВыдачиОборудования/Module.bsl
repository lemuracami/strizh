
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФильтрДатаРейса = ТекущаяДата();
	ФильтрТерминалДоставки = ПараметрыСеанса.ТерминалДоставки;
	//ФильтрТерминалДоставки = ?(ФильтрТерминалДоставки.Пустая(), Справочники.РегиональныеТерминалы.МоскваСтриж, ФильтрТерминалДоставки);
	//ФильтрТерминалДоставки = Неопределено;
	ФильтрНаемныйЭкипаж = Истина;
	
	ГруппаНаёмники = Справочники.новаТранспорт.НайтиПоКоду("000050");
	
	//Если ФильтрТерминалДоставки.Пустая() Тогда
	//	ФильтрТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж;
	//КонецЕсли; 
	
	ПрименитьЗначенияПараметровНаСервере();
	
	Если РольДоступна("АдминистрированиеОборудования") Тогда
		РегионыВыбора = УчетОборудованияСервер.ПолучитьРегионыВыбора(Истина);
		Если РегионыВыбора <> Неопределено Тогда
			Регионы.ЗагрузитьЗначения(РегионыВыбора);
			Элементы.ГруппаСтраницы.Доступность = Ложь;
		Иначе
			ПриОткрытииНаСервере();
		КонецЕсли;
	ИначеЕсли ФильтрТерминалДоставки.Пустая() Тогда
		Если РольДоступна("АдминистрированиеОборудования") Тогда
			РегионыВыбора = УчетОборудованияСервер.ПолучитьРегионыВыбора();
			Если РегионыВыбора <> Неопределено Тогда
				Регионы.ЗагрузитьЗначения(РегионыВыбора);
				Элементы.ГруппаСтраницы.Доступность = Ложь;
			Иначе
				ПриОткрытииНаСервере();
			КонецЕсли;
		Иначе
			Сообщить("У текущего пользователя не задан регион по умолчанию!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Регионы.Количество() Тогда
		Регионы.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыборРегионаЗавершение", ЭтотОбъект), "Регион");
	Иначе
		ПриОткрытииНаСервере();
	КонецЕсли;
	
	//ОтсканироватьБэйдж(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРегионаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Регионы.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыборРегионаЗавершение", ЭтотОбъект), "Регион");
	Иначе
		ВыборРегионаЗавешениеНаСервере(РезультатВыбора.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыборРегионаЗавешениеНаСервере(ЗначениеРегиона)
	
	ФильтрТерминалДоставки = ЗначениеРегиона;
	Элементы.ГруппаСтраницы.Доступность = Истина;
	ПриОткрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	ПрименитьЗначенияПараметровНаСервере();
	ШтатныеПриИзмененииНаСервере();
	
КонецПроцедуры
	

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если НЕ Источник = "Сканер штрихкода" Тогда
		Возврат;
	КонецЕсли;		
  
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ФормаОборудованияОткрыта Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ВводДоступен() Тогда
		Возврат;
	КонецЕсли; 
	
	//CeHbKA #3471 17.09.2019
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
		ПослеСканированияБэйджа(Данные, Неопределено);
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыданоНаДлительныйСрок Тогда
		ПослеСканированияБэйджа(Данные, Новый Структура("НаДлительныйСрок"));
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокВыданного Тогда		
		ВернутьВыданноеОборудование(Данные);	
	КонецЕсли; 
	//CeHbKA #3471 17.09.2019
		
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Список.ТекущиеДанные;
	
	ОткрытьФормуУчетаОборудования(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыданногоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекСтрока = Элементы.СписокВыданного.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ВернутьВыданноеОборудование(ТекСтрока["Оборудование.Код"]);

КонецПроцедуры

&НаКлиенте
Процедура СписокВыданногоНаДлительныйСрокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Асеев 10.04.2024 (Задача № 5255)>>>
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СписокВыданногоНаДлительныйСрок.ТекущиеДанные;
	
	ОткрытьФормуУчетаОборудованияНаДлительныйСрок(ТекСтрока.Сотрудник);
	//Асеев 10.04.2024 (Задача № 5255)<<<

КонецПроцедуры


#КонецОбласти 

#Область КомандыФормы
 
&НаКлиенте
Процедура ОтсканироватьБэйдж(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСканированияБэйджа", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения,,"Отканируйте бэйдж",,Ложь);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтсканироватьБэйджНаДлительныйСрок(Команда)
	
	//Асеев 10.04.2024 (Задача № 5255)>>>
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСканированияБэйджа", ЭтаФорма, Новый Структура("НаДлительныйСрок"));
	ПоказатьВводСтроки(ОписаниеОповещения,,"Отканируйте бэйдж",,Ложь);
	//Асеев 10.04.2024 (Задача № 5255)<<<
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрШапкиПриИзменении(Элемент)

	ПрименитьЗначенияПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОборудования(Команда)
	
	ТекСтрока = Элементы.Список.ТекущиеДанные;
	
	ОткрытьФормуУчетаОборудования(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ШтатныеПриИзменении(Элемент)
	
	//Список.Отбор.Элементы.Очистить();			
	//
	//ОтборПоТранспорту = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборПоТранспорту.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Транспорт");
	//ОтборПоТранспорту.ПравоеЗначение = ГруппаНаёмники;
	//
	//Если ФильтрНаемныйЭкипаж Тогда
	//	ОтборПоТранспорту.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии;
	//Иначе
	//	ОтборПоТранспорту.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	//КонецЕсли;
	//
	//ОтборПоТранспорту.Использование = Истина;
	
	ШтатныеПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ШтатныеПриИзмененииНаСервере()
	
	УдалитьОтборСписка("Транспорт");
	
	Если ФильтрНаемныйЭкипаж Тогда
		ДобавитьОтборСписка("Транспорт", ГруппаНаёмники, ВидСравненияКомпоновкиДанных.НеВИерархии);
	Иначе
		ДобавитьОтборСписка("Транспорт", ГруппаНаёмники, ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедуры

&НаКлиенте
Процедура ПрименитьЗначенияПараметров()
	
	ПрименитьЗначенияПараметровНаСервере();

КонецПроцедуры // ()

&НаСервере
Процедура ПрименитьЗначенияПараметровНаСервере()
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаРейса", ФильтрДатаРейса);
	Список.Параметры.УстановитьЗначениеПараметра("ТерминалДоставки", ФильтрТерминалДоставки);
	
	ИмяОтбора = "ОтборРегион";
	ОбщегоНазначенияКлиентСервер83.УдалитьЭлементыГруппыОтбора(СписокВыданного.Отбор,, ИмяОтбора);
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер83.СоздатьГруппуЭлементовОтбора(СписокВыданного.Отбор.Элементы, ИмяОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "Регион", ФильтрТерминалДоставки, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	ОбщегоНазначенияКлиентСервер83.УдалитьЭлементыГруппыОтбора(СписокНаБазе.Отбор,, ИмяОтбора);
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер83.СоздатьГруппуЭлементовОтбора(СписокНаБазе.Отбор.Элементы, ИмяОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "Регион", ФильтрТерминалДоставки, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	ОбщегоНазначенияКлиентСервер83.УдалитьЭлементыГруппыОтбора(СписокВыданногоНаДлительныйСрок.Отбор,, ИмяОтбора);
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер83.СоздатьГруппуЭлементовОтбора(СписокВыданногоНаДлительныйСрок.Отбор.Элементы, ИмяОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "Регион", ФильтрТерминалДоставки, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияЗаполненияНаДлительныйСрок(Знач Сотрудник, Знач Регион)
	
	ЗначенияЗаполнения = Неопределено;
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЗначенияЗаполнения = Новый Структура("Регион,ФизЛицо,ВыдачаНаДлительныйСрок,СостояниеОборудования", Регион, Сотрудник, Истина, Перечисления.СостоянияЕдиницыОборудования.Сдано);
	Иначе
		ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Сотрудник, "ФизЛицо");
		Если ФизЛицо.Пустая() Тогда
			Сообщить("Физическое лицо сотрудника " + Сотрудник + " не определено!");
		Иначе
			ЗначенияЗаполнения = Новый Структура("Регион,ФизЛицо,ВыдачаНаДлительныйСрок,СостояниеОборудования", Регион, ФизЛицо, Истина, Перечисления.СостоянияЕдиницыОборудования.Выдано);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуУчетаОборудованияНаДлительныйСрок(ФизЛицоСдача = Неопределено)
	
	Если Не ФормаОборудованияОткрыта Тогда
		Если ФизЛицоСдача = Неопределено Тогда
			ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияНаДлительныйСрок(СотрудникНаДлительныйСрок, ФильтрТерминалДоставки);
		Иначе
			ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияНаДлительныйСрок(ФизЛицоСдача, ФильтрТерминалДоставки);
		КонецЕсли;
		Если ЗначенияЗаполнения <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыДокументаНаДлительныйСрок", ЭтаФорма);
			ОткрытьФорму("Документ.УчетОборудования.Форма.ФормаУчетаОборудования", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
			
			ФормаОборудованияОткрыта = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СотрудникНаДлительныйСрок = Неопределено;
	Элементы.ОтсканироватьБэйджНаДлительныйСрок.Заголовок = "Отсканировать бэйдж";
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыДокументаНаДлительныйСрок(Результат, ДопПараметры) Экспорт
	
	//ОбновитьОтображениеДанных();
	
	Элементы.СписокВыданногоНаДлительныйСрок.Обновить();
	
	ФормаОборудованияОткрыта = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСканированияБэйджа(Результат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли; 
	
	//Асеев 10.04.2024 (Задача № 5255)>>>
	НаДлительныйСрок = ДопПараметры <> Неопределено И ДопПараметры.Свойство("НаДлительныйСрок");
	Если НаДлительныйСрок Тогда
		СотрудникНаДлительныйСрок = НайтиСотрудникаПоБэйджу(Результат);
		
		Если СотрудникНаДлительныйСрок <> Неопределено Тогда
			Элементы.ОтсканироватьБэйджНаДлительныйСрок.Заголовок = СотрудникНаДлительныйСрок;
			ОткрытьФормуУчетаОборудованияНаДлительныйСрок();
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Сотрудник с кодом "+Результат+" не найден";
			Сообщение.Поле = "ОтсканироватьБэйджНаДлительныйСрок";
			Сообщение.Сообщить();
			
			Элементы.ОтсканироватьБэйджНаДлительныйСрок.Заголовок = "Отсканировать бэйдж";
		КонецЕсли;
	//Асеев 10.04.2024 (Задача № 5255)<<<
	Иначе
		Сотрудник = НайтиСотрудникаПоБэйджу(Результат);
		
		//УстановитьОтборПоСотруднику();
		
		Если Сотрудник <> Неопределено Тогда			
			Элементы.СписокОтсканироватьБэйдж.Заголовок = Сотрудник;
			ОткрытьФормуУчетаОборудования(Сотрудник);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Сотрудник с кодом "+Результат+" не найден";
			Сообщение.Поле = "СписокОтсканироватьБэйдж";
			Сообщение.Сообщить();
			
			Элементы.СписокОтсканироватьБэйдж.Заголовок = "Отсканировать бэйдж";
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры // () 

&НаКлиенте
Процедура УстановитьОтборПоСотруднику()

	Если НЕ Сотрудник.Пустая() Тогда
		//ОтборПоВодителю = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ОтборПоВодителю.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Водитель");
		//ОтборПоВодителю.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//ОтборПоВодителю.ПравоеЗначение = Сотрудник;
		//ОтборПоВодителю.Использование = Истина;
		ДобавитьОтборСписка("Водитель", Сотрудник, ВидСравненияКомпоновкиДанных.Равно);	
	Иначе
		//Список.Отбор.Элементы.Очистить();	
		УдалитьОтборСписка("Водитель");
	КонецЕсли; 

КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция ПолучитьЗначенияЗаполнения(Знач ДанныеЗаполнения)
	
	ЗначенияЗаполнения = Новый Структура("Рейс,Транспорт,Регион");
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ДанныеЗаполнения);
	ЗначенияЗаполнения.Вставить("НаемныйЭкипаж", ДанныеЗаполнения.Транспорт.ПринадлежитЭлементу(ДанныеЗаполнения.ГруппаНаёмники));
	ЕстьОборудование = ЗначениеЗаполнено(ДанныеЗаполнения.Оборудование1) Или ЗначениеЗаполнено(ДанныеЗаполнения.Оборудование2) Или ЗначениеЗаполнено(ДанныеЗаполнения.Оборудование3);
	Если ЕстьОборудование Тогда
		ЗначенияЗаполнения.Вставить("СостояниеОборудования", Перечисления.СостоянияЕдиницыОборудования.Сдано);
		ЗначенияЗаполнения.Вставить("ЗаполнитьКомплект", Истина);
	Иначе
		ЗначенияЗаполнения.Вставить("СостояниеОборудования", Перечисления.СостоянияЕдиницыОборудования.Выдано);
		ЗначенияЗаполнения.Вставить("ЗаполнитьКомплект", Ложь);
	КонецЕсли;
	//если Сотрудник определен - опираемся на него, если нет - определяем исходя из оборудования
	Если ДанныеЗаполнения.Сотрудник = Неопределено Тогда
		Если ЕстьОборудование Тогда
			ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения.Водитель, "ФизЛицо");
			Если ЗначениеЗаполнено(ФизЛицо) Тогда
				Если ФизЛицо = ДанныеЗаполнения.ФизЛицо1 Или ФизЛицо = ДанныеЗаполнения.ФизЛицо2 Или ФизЛицо = ДанныеЗаполнения.ФизЛицо3 Тогда
					ЗначенияЗаполнения.Вставить("ФизЛицо", ФизЛицо);
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначенияЗаполнения.Свойство("ФизЛицо") Тогда
				ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения.Экспедитор, "ФизЛицо");
				Если ФизЛицо = ДанныеЗаполнения.ФизЛицо1 Или ФизЛицо = ДанныеЗаполнения.ФизЛицо2 Или ФизЛицо = ДанныеЗаполнения.ФизЛицо3 Тогда
					ЗначенияЗаполнения.Вставить("ФизЛицо", ФизЛицо);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗначенияЗаполнения.Вставить("ФизЛицо", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения.Водитель, "ФизЛицо"));
		КонецЕсли;
	Иначе
		ЗначенияЗаполнения.Вставить("ФизЛицо", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения.Сотрудник, "ФизЛицо"));
	КонецЕсли;
	Возврат ЗначенияЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуУчетаОборудования(ТекСтрока)
	
	//ТекСтрока - строка динамического списка или сотрудник
	Если Не ФормаОборудованияОткрыта Тогда
		ТипПар = ТипЗнч(ТекСтрока);
		Если ТипПар = Тип("ДанныеФормыСтруктура") Тогда
			ДанныеЗаполнения = Новый Структура("Сотрудник,ГруппаНаёмники,Регион,Рейс,Транспорт,Оборудование1,Оборудование2,Оборудование3,ФизЛицо1,ФизЛицо2,ФизЛицо3,Водитель,Экспедитор",Сотрудник,ГруппаНаёмники,ФильтрТерминалДоставки);
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ТекСтрока);
			ЗначенияЗаполнения = ПолучитьЗначенияЗаполнения(ДанныеЗаполнения);
		Иначе
			ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияСотрудника(ТекСтрока, ФильтрДатаРейса, ФильтрТерминалДоставки, ГруппаНаёмники);
		КонецЕсли;
		
		Если ЗначенияЗаполнения <> Неопределено Тогда
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ПараметрыФормы.Вставить("Сотрудник", Сотрудник);
			ПараметрыФормы.Вставить("ЗаполнитьКомплект", ЗначенияЗаполнения.ЗаполнитьКомплект);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыДокумента", ЭтаФорма);
			ОткрытьФорму("Документ.УчетОборудования.Форма.ФормаУчетаОборудования", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
			
			ФормаОборудованияОткрыта = Истина;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Сотрудник "+Сотрудник+" не может быть обработан, т.к. по нему нет рейсов";
			Сообщение.Поле = "СписокОтсканироватьБэйдж";
			Сообщение.Сообщить(); 		
			
		КонецЕсли;
	КонецЕсли;
	
	Сотрудник = Неопределено;
	Элементы.СписокОтсканироватьБэйдж.Заголовок = "Отсканировать бэйдж";		
	
	//УстановитьОтборПоСотруднику();
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ОткрытьФормуУчетаОборудованияВозврат(ТекСтрока)
	
	Если ТекСтрока <> Неопределено Тогда
		
		Если Не ФормаОборудованияОткрыта Тогда
			
			ЗначенияЗаполнения = Новый Структура("Рейс", ТекСтрока.Рейс);
			ЗначенияЗаполнения.Вставить("Транспорт", ТекСтрока.Транспорт);
			ЗначенияЗаполнения.Вставить("Регион", ФильтрТерминалДоставки);
			Попытка
				ЗначенияЗаполнения.Вставить("НаемныйЭкипаж", ТекСтрока.НаемныйЭкипаж); 
			Исключение
				ЗначенияЗаполнения.Вставить("НаемныйЭкипаж", НЕ ФильтрНаемныйЭкипаж); 
			КонецПопытки; 
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Смартфон_Получено)
				И НЕ ЗначениеЗаполнено(ТекСтрока.Терминал_Получено)
				И НЕ ЗначениеЗаполнено(ТекСтрока.Принтер_Получено) Тогда
				НовоеСостояние = ПредопределенноеЗначение("Перечисление.СостоянияЕдиницыОборудования.Выдано");
			Иначе
				НовоеСостояние = ПредопределенноеЗначение("Перечисление.СостоянияЕдиницыОборудования.Сдано");
			КонецЕсли;
			
			ЗначенияЗаполнения.Вставить("СостояниеОборудования", НовоеСостояние);
			
			Если ТипЗнч(ТекСтрока) = Тип("Структура") Тогда
				Если ТекСтрока.Свойство("ФизЛицо") Тогда
					ЗначенияЗаполнения.Вставить("ФизЛицо", ТекСтрока.ФизЛицо);
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения); 
			ПараметрыФормы.Вставить("Сотрудник", Сотрудник);
			ПараметрыФормы.Вставить("ЗаполнитьКомплект", Истина);	
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыДокумента", ЭтаФорма);
			ОткрытьФорму("Документ.УчетОборудования.Форма.ФормаУчетаОборудования", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
			
			ФормаОборудованияОткрыта = Истина;
			
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сотрудник "+Сотрудник+" не может быть обработан, т.к. по нему нет рейсов";
		Сообщение.Поле = "СписокОтсканироватьБэйдж";
		Сообщение.Сообщить(); 		
		
	КонецЕсли;
	
	Сотрудник = Неопределено;
	Элементы.СписокОтсканироватьБэйдж.Заголовок = "Отсканировать бэйдж";		
	//УстановитьОтборПоСотруднику();
	
КонецПроцедуры // ()


&НаКлиенте
Процедура ПослеЗакрытияФормыДокумента(Результат, ДопПараметры) Экспорт

	ФормаОборудованияОткрыта = Ложь;
	
	ОбновитьОтображениеДанных();
	
	ПрименитьЗначенияПараметров();
	//УстановитьОтборПоСотруднику();
	
	Элементы.СписокВыданного.Обновить();
	
КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция НайтиСотрудникаПоБэйджу(КодСотрудника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БэйджиСотрудников.Владелец КАК Сотрудник
		|ИЗ
		|	Справочник.БэйджиСотрудников КАК БэйджиСотрудников
		|ГДЕ
		|	БэйджиСотрудников.КодСотрудника = &КодСотрудника
		|	И НЕ БэйджиСотрудников.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодСотрудника", КодСотрудника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Сотрудник;
	КонецЦикла;
		
	Возврат Неопределено;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьЗначенияЗаполненияСотрудника(Сотрудник, ДатаРейса, ТерминалДоставки, ГруппаНаёмники)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетОборудованияСрезПоследних.Оборудование КАК Оборудование,
	|	УчетОборудованияСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	УчетОборудованияСрезПоследних.Рейс КАК Рейс,
	|	УчетОборудованияСрезПоследних.ВыдачаНаДлительныйСрок КАК ВыдачаНаДлительныйСрок
	|ПОМЕСТИТЬ ВТ_УчетОборудования
	|ИЗ
	|	РегистрСведений.УчетОборудования.СрезПоследних КАК УчетОборудованияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Т_Рейс
	|		ПО УчетОборудованияСрезПоследних.Рейс = Т_Рейс.Ссылка
	|			И (Т_Рейс.ДатаРейса = &ДатаРейса)
	|			И (Т_Рейс.ТерминалДоставки = &ТерминалДоставки)
	|			И (Т_Рейс.Проведен)
	|ГДЕ
	|	УчетОборудованияСрезПоследних.СостояниеЕдиницыОборудования = ЗНАЧЕНИЕ(Перечисление.СостоянияЕдиницыОборудования.Выдано)
	|	И (НЕ Т_Рейс.Ссылка ЕСТЬ NULL
	|			ИЛИ УчетОборудованияСрезПоследних.ВыдачаНаДлительныйСрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Рейсы.Рейс КАК Рейс,
	|	ВТ_УчетОборудования.Оборудование КАК Оборудование
	|ПОМЕСТИТЬ ВТ_Оборудование
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т_Рейс.Ссылка КАК Рейс,
	|		ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Водитель.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ВодительФизЛицо,
	|		ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ЭкспедиторФизЛицо
	|	ИЗ
	|		Документ.Рейс КАК Т_Рейс
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|			ПО Т_Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	|	ГДЕ
	|		Т_Рейс.ДатаРейса = &ДатаРейса
	|		И Т_Рейс.ТерминалДоставки = &ТерминалДоставки
	|		И Т_Рейс.Проведен
	|		И &Сотрудник В (ПривязкаМашинКРейсамСрезПоследних.Водитель, ПривязкаМашинКРейсамСрезПоследних.Экспедитор)) КАК ВЗ_Рейсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетОборудования КАК ВТ_УчетОборудования
	|		ПО (ВЗ_Рейсы.Рейс = ВТ_УчетОборудования.Рейс
	|				ИЛИ ВТ_УчетОборудования.ВыдачаНаДлительныйСрок
	|					И ВТ_УчетОборудования.ФизЛицо В (ВЗ_Рейсы.ВодительФизЛицо, ВЗ_Рейсы.ЭкспедиторФизЛицо))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оборудование.Рейс КАК Рейс,
	|	ВТ_Оборудование.Оборудование КАК Оборудование,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Оборудование_Сравн.Оборудование) КАК ПорядковыйНомер
	|ПОМЕСТИТЬ ВТ_ПорядокОборудования
	|ИЗ
	|	ВТ_Оборудование КАК ВТ_Оборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование_Сравн
	|		ПО ВТ_Оборудование.Рейс = ВТ_Оборудование_Сравн.Рейс
	|			И ВТ_Оборудование.Оборудование >= ВТ_Оборудование_Сравн.Оборудование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оборудование.Рейс,
	|	ВТ_Оборудование.Оборудование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанноеОборудованиеСрезПоследних.ОборудованиеВладелец КАК ОборудованиеВладелец,
	|	СвязанноеОборудованиеСрезПоследних.ОборудованиеПодчиненное КАК ОборудованиеПодчиненное
	|ПОМЕСТИТЬ ВТ_ПодчиненноеОборудование
	|ИЗ
	|	РегистрСведений.СвязанноеОборудование.СрезПоследних(
	|			,
	|			ОборудованиеВладелец В
	|					(ВЫБРАТЬ
	|						ВТ_Оборудование.Оборудование КАК Оборудование
	|					ИЗ
	|						ВТ_Оборудование КАК ВТ_Оборудование)
	|				И ОборудованиеПодчиненное.МодельОборудования = ЗНАЧЕНИЕ(Справочник.МоделиОборудования.SIMКарта)) КАК СвязанноеОборудованиеСрезПоследних
	|ГДЕ
	|	СвязанноеОборудованиеСрезПоследних.СтатусМонтирования = ЗНАЧЕНИЕ(Перечисление.СтатусыМонтированияОборудования.Смонтировано)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Рейс.Ссылка КАК Рейс,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Родитель КАК ТипЭкипажа,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОперативноеНазначениеТАНаРейсСрезПоследних.ТА, ЗНАЧЕНИЕ(Справочник.ТелефонныеАппараты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ТелефонныеАппараты.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ТелефонныеАппаратыТранспортаСрезПоследних.ТА, ЗНАЧЕНИЕ(Справочник.ТелефонныеАппараты.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ОперативноеНазначениеТАНаРейсСрезПоследних.ТА, ЗНАЧЕНИЕ(Справочник.ТелефонныеАппараты.ПустаяСсылка))
	|	КОНЕЦ КАК Телефон,
	|	ВТ_ПорядокОборудования_1.Оборудование КАК Оборудование1,
	|	ЕСТЬNULL(ВТ_УчетОборудования_1.ВыдачаНаДлительныйСрок, ЛОЖЬ) КАК НаДлительныйСрок1,
	|	ВТ_ПодчиненноеОборудование_1.ОборудованиеПодчиненное КАК ОборудованиеПодчиненное1,
	|	ВТ_ПорядокОборудования_2.Оборудование КАК Оборудование2,
	|	ЕСТЬNULL(ВТ_УчетОборудования_2.ВыдачаНаДлительныйСрок, ЛОЖЬ) КАК НаДлительныйСрок2,
	|	ВТ_ПодчиненноеОборудование_2.ОборудованиеПодчиненное КАК ОборудованиеПодчиненное2,
	|	ВТ_ПорядокОборудования_3.Оборудование КАК Оборудование3,
	|	ЕСТЬNULL(ВТ_УчетОборудования_3.ВыдачаНаДлительныйСрок, ЛОЖЬ) КАК НаДлительныйСрок3,
	|	ВТ_ПодчиненноеОборудование_3.ОборудованиеПодчиненное КАК ОборудованиеПодчиненное3,
	|	ВТ_УчетОборудования_1.ФизЛицо КАК ФизЛицо1,
	|	ВТ_УчетОборудования_2.ФизЛицо КАК ФизЛицо2,
	|	ВТ_УчетОборудования_3.ФизЛицо КАК ФизЛицо3
	|ИЗ
	|	Документ.Рейс КАК Т_Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелефонныеАппаратыТранспорта.СрезПоследних КАК ТелефонныеАппаратыТранспортаСрезПоследних
	|			ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт = ТелефонныеАппаратыТранспортаСрезПоследних.Транспорт
	|		ПО Т_Рейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперативноеНазначениеТАНаРейс.СрезПоследних КАК ОперативноеНазначениеТАНаРейсСрезПоследних
	|		ПО Т_Рейс.Ссылка = ОперативноеНазначениеТАНаРейсСрезПоследних.Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокОборудования КАК ВТ_ПорядокОборудования_1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетОборудования КАК ВТ_УчетОборудования_1
	|			ПО ВТ_ПорядокОборудования_1.Оборудование = ВТ_УчетОборудования_1.Оборудование
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодчиненноеОборудование КАК ВТ_ПодчиненноеОборудование_1
	|			ПО ВТ_ПорядокОборудования_1.Оборудование = ВТ_ПодчиненноеОборудование_1.ОборудованиеВладелец
	|		ПО Т_Рейс.Ссылка = ВТ_ПорядокОборудования_1.Рейс
	|			И (ВТ_ПорядокОборудования_1.ПорядковыйНомер = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокОборудования КАК ВТ_ПорядокОборудования_2
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетОборудования КАК ВТ_УчетОборудования_2
	|			ПО ВТ_ПорядокОборудования_2.Оборудование = ВТ_УчетОборудования_2.Оборудование
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодчиненноеОборудование КАК ВТ_ПодчиненноеОборудование_2
	|			ПО ВТ_ПорядокОборудования_2.Оборудование = ВТ_ПодчиненноеОборудование_2.ОборудованиеВладелец
	|		ПО Т_Рейс.Ссылка = ВТ_ПорядокОборудования_2.Рейс
	|			И (ВТ_ПорядокОборудования_2.ПорядковыйНомер = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокОборудования КАК ВТ_ПорядокОборудования_3
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетОборудования КАК ВТ_УчетОборудования_3
	|			ПО ВТ_ПорядокОборудования_3.Оборудование = ВТ_УчетОборудования_3.Оборудование
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодчиненноеОборудование КАК ВТ_ПодчиненноеОборудование_3
	|			ПО ВТ_ПорядокОборудования_3.Оборудование = ВТ_ПодчиненноеОборудование_3.ОборудованиеВладелец
	|		ПО Т_Рейс.Ссылка = ВТ_ПорядокОборудования_3.Рейс
	|			И (ВТ_ПорядокОборудования_3.ПорядковыйНомер = 3)
	|ГДЕ
	|	Т_Рейс.ДатаРейса = &ДатаРейса
	|	И Т_Рейс.ТерминалДоставки = &ТерминалДоставки
	|	И Т_Рейс.Проведен
	|	И &Сотрудник В (ПривязкаМашинКРейсамСрезПоследних.Водитель, ПривязкаМашинКРейсамСрезПоследних.Экспедитор)";
	
	Запрос.УстановитьПараметр("ДатаРейса", ДатаРейса);
	Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалДоставки);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеЗаполнения = Новый Структура("Сотрудник,ГруппаНаёмники,Регион,Рейс,Транспорт,Оборудование1,Оборудование2,Оборудование3,ФизЛицо1,ФизЛицо2,ФизЛицо3,Водитель,Экспедитор",Сотрудник,ГруппаНаёмники,ТерминалДоставки);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	ЗначенияЗаполнения = ПолучитьЗначенияЗаполнения(ДанныеЗаполнения);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ВернутьВыданноеОборудование(КодОборудования) Экспорт

	ПараметрыРейса = УчетОборудованияСервер.ПолучитьДанныеРейсаПоВыданномуОборудованию(КодОборудования);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРейса.Рейс)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыРейса.ФизЛицо) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Оборудовние с кодом "+КодОборудования+" не найдено в списке выданных";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли; 
		
	ОткрытьФормуУчетаОборудованияВозврат(ПараметрыРейса);
	
	//++Переварюха 30.01.2020
	//Для каждого ОткрытоеОкно Из ПолучитьОкна() Цикл
	//	
	//	Если ОткрытоеОкно.Заголовок = "Учет оборудования (создание)" Тогда
	//		УпрФорма = ОткрытоеОкно.ПолучитьСодержимое();
	//		УпрФорма.НайтиОборудование(КодОборудования);
	//	КонецЕсли; 
	//	
	//КонецЦикла; 	
	//--Переварюха 30.01.2020

КонецПроцедуры // ()

&НаКлиенте
Процедура СкрытьПустыеПриИзменении(Элемент)
	
	СкрытьПустыеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПустыеНаСервере()
	
	Если СкрытьПустые Тогда
		
		ГруппаОтбор = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;	
		ГруппаОтбор.Представление = "НеПустоеОборудование";
		ГруппаОтбор.Использование = Истина;
		
		ДобавитьОтборСписка("Смартфон_Получено", ПредопределенноеЗначение("Справочник.Оборудование.ПустаяСсылка"), ВидСравненияКомпоновкиДанных.НеРавно, ГруппаОтбор);		
		ДобавитьОтборСписка("Смартфон_Сдано", ПредопределенноеЗначение("Справочник.Оборудование.ПустаяСсылка"), ВидСравненияКомпоновкиДанных.НеРавно, ГруппаОтбор);		
		ДобавитьОтборСписка("Терминал_Получено", ПредопределенноеЗначение("Справочник.Оборудование.ПустаяСсылка"), ВидСравненияКомпоновкиДанных.НеРавно, ГруппаОтбор);		
		ДобавитьОтборСписка("Терминал_Сдано", ПредопределенноеЗначение("Справочник.Оборудование.ПустаяСсылка"), ВидСравненияКомпоновкиДанных.НеРавно, ГруппаОтбор);		
		ДобавитьОтборСписка("Принтер_Получено", ПредопределенноеЗначение("Справочник.Оборудование.ПустаяСсылка"), ВидСравненияКомпоновкиДанных.НеРавно, ГруппаОтбор);		
		ДобавитьОтборСписка("Принтер_Сдано", ПредопределенноеЗначение("Справочник.Оборудование.ПустаяСсылка"), ВидСравненияКомпоновкиДанных.НеРавно, ГруппаОтбор);		
	Иначе	
		УдалитьОтборСписка("НеПустоеОборудование", Истина);		
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборСписка(ИмяПоля, ЗначениеПоля, ВидСравненияПоля, ГруппаОтбор = Неопределено)
	
	Если ГруппаОтбор <> Неопределено Тогда
		НовыйОтбор = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе	
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли; 
	
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	НовыйОтбор.ВидСравнения = ВидСравненияПоля;
	НовыйОтбор.ПравоеЗначение = ЗначениеПоля;
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.Представление = ИмяПоля;
	
КонецПроцедуры // ()

&НаСервере
Процедура УдалитьОтборСписка(ИмяПоля, ЭтоГруппа = Ложь)

	УдаляемыйЭлементОтбора = Неопределено;
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		
		Если ЭтоГруппа Тогда
			
			Если ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если Строка(ЭлементОтбора.Представление) = ИмяПоля Тогда			
			УдаляемыйЭлементОтбора = ЭлементОтбора;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если УдаляемыйЭлементОтбора <> Неопределено Тогда
		Список.Отбор.Элементы.Удалить(УдаляемыйЭлементОтбора);
	КонецЕсли; 
	
КонецПроцедуры // ()

#КонецОбласти 



 