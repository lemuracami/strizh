
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Вставить содержимое обработчика.
	Движения.СтатусыСкладскогоУчета.Записывать = Истина;
	Движения.СостоянияЗаказов.Записывать = Истина;
	Движения.СостоянияЗаказов.Очистить();
	Движения.СтатусыСкладскогоУчета.Очистить();
	
	Движения.УчетДенежныхСредствКассиром.Записывать = Истина;
	Движения.УчетДенежныхСредствКассиром.Очистить();
	
	
	Движения.ДанныеЧастичныхЗаказов.Записывать = Истина;
	Движения.ДанныеЧастичныхЗаказов.Очистить();
    
	Движения.УчетДенежныхСредствКассиромРасширеный.Записывать = Истина;
	Движения.УчетДенежныхСредствКассиромРасширеный.Очистить();
    
    ////Серегин М.В. 08.06.2015 11:45:33 устарело, не подходит 
    //Если НЕ (ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
    //    ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь 
    //    ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом 
    //    ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.НетНаСкладе 
    //    ИЛИ ПричинаОтказа = Справочники.ПричиныОтказаПереноса.НайтиПоКоду("00000000016")) Тогда //Причина - Задвоен
    //    
    //    
    //    Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично 
    //        или СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.НеВыполнена 
    //        ИЛИ (СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена И ЕстьЗаписиПоЗаказуВСтатусыСкладскогоУчета(Ссылка)) Тогда
    //        
    //        Нов = Движения.СтатусыСкладскогоУчета.Добавить();
    //        Нов.Период = Дата;
    //        Нов.Заказ = Реализация.Ссылка;
    //        Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично тогда
    //            Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат2;
    //        ИначеЕсли СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.НеВыполнена тогда
    //            Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат1;
    //        ИначеЕсли СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена тогда
    //            Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.ЗаказВыполнен;
    //        КонецеСли;
    //        Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
    //    КонецеСли;
    //КонецЕсли;
    ////Серегин М.В. 08.06.2015 11:45:35 
    
    //Серегин М.В. 21.08.2015 16:39:13 новое проведение по РС СтатусыСкладского учета
    ТипЗаказа = smv.ПолучитьТипЗаказаNew(Реализация); 
    Если ТипЗаказа <> Неопределено Тогда
        Если ТипЗаказа = Перечисления.ТипыЗаказов.Возврат Тогда  //возвраты
            Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена ИЛИ СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                Нов = Движения.СтатусыСкладскогоУчета.Добавить();
                Нов.Период = Дата;
                Нов.Заказ = Реализация.Ссылка;
                Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат2;
                Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Возврат;
            КонецЕсли;
        ИначеЕсли ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз ИЛИ ТипЗаказа = Перечисления.ТипыЗаказов.Доставка Тогда//самовывозы 
            // к сожалению не всегда в новаМестнойДоставке ставиться галка переделан на самовывоз, поэтому доставка здесь 
            Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена И ЕстьЗаписиПоЗаказуВСтатусыСкладскогоУчета(Ссылка) Тогда
                Нов = Движения.СтатусыСкладскогоУчета.Добавить();
                Нов.Период = Дата;
                Нов.Заказ = Реализация.Ссылка;
                Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.ЗаказВыполнен;
                Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
            ИначеЕсли СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                Нов = Движения.СтатусыСкладскогоУчета.Добавить();
                Нов.Период = Дата;
                Нов.Заказ = Реализация.Ссылка;
                Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат2;
                Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
            ИначеЕсли СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.НеВыполнена   Тогда
                Если ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.НеДоставлен Тогда
                    Нов = Движения.СтатусыСкладскогоУчета.Добавить();
                    Нов.Период = Дата;
                    Нов.Заказ = Реализация.Ссылка;
                    Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат1;
                    Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
                КонецЕсли;
            КонецЕсли;
        Иначе // обмены
            Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена Тогда
                Нов = Движения.СтатусыСкладскогоУчета.Добавить();
                Нов.Период = Дата;
                Нов.Заказ = Реализация.Ссылка;
                Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат1;
                Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Обмен;
            ИначеЕсли СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                Нов = Движения.СтатусыСкладскогоУчета.Добавить();
                Нов.Период = Дата;
                Нов.Заказ = Реализация.Ссылка;
                Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат2;
                Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Обмен;
            ИначеЕсли СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
                Если ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.НеДоставлен Тогда
                    Нов = Движения.СтатусыСкладскогоУчета.Добавить();
                    Нов.Период = Дата;
                    Нов.Заказ = Реализация.Ссылка;
                    Нов.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат1;
                    Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Обмен;
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    //Серегин М.В. 21.08.2015 16:56:08 

	
	Нов = Движения.СостоянияЗаказов.Добавить();
	
	Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ПустаяСсылка() Тогда
		Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;
	Иначе
		Нов.РезультатДоставки = СтатусЗаказа;
	КонецеСли;	
	Нов.Заказ = Реализация.Ссылка;
	Нов.Период = Дата;
    //+++++Серегин М.В. 29.10.2015 13:11:03 
    Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Реализация.Номер);
    Если НЕ ЗначениеЗаполнено(Доставка) Тогда
        Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Реализация.Номер)+"abc");
    КонецЕсли;
    Если НЕ ЗначениеЗаполнено(Доставка) Тогда
        Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Реализация.Номер)+"def");
    КонецЕсли;
    
    Нов.Доставка = Доставка;
	
	Нов.Инициатор = ИнициаторСостояния; //Задача № 2869 
	
	Нов.ПричинаОтказа = ПричинаОтказа; // Задача № 2991
	Нов.ДатаДоставки = Реализация.Дата; // Задача № 2991
	
	Если ЗначениеЗаполнено(ПричинаОтказа) Тогда
		Нов.СторонаПретензий = 	ПричинаОтказа.СторонаПретензии; // Задача № 2991
	КонецЕсли;

    //-----Серегин М.В. 29.10.2015 13:11:05 
	Нов.ПричинаНеВыполнения = ПричинаНеВыполненияЗаказа;
	//Нов.ПричинаОтказа = ПричинаОтказа;
	Нов.ДатаПереноса = ДатаПереноса;
	
	
	ИМ = Реализация.ВладелецТовара;
	ТО = Справочники.ТипыОплат.НайтиПоКоду(Реализация.ТипОплаты);
	ТД = Перечисления.ТипыЗаказов.Самовывоз;
	
	Струк = Новый Структура;
	Струк.Вставить("Контрагент", ИМ);
	Струк.Вставить("ТипОплаты", ТО);
	Струк.Вставить("ТипДоставки", ТД);
	Най = РегистрыСведений.ЮридическоеЛицоПоДоставкеКонтрагента.ПолучитьПоследнее(КонецДня(Дата), Струк);
    ЧекиНеПечатаются = Най.ЧекиНеПечатаются;
    
    ДокументВозврата = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Реализация.Номер,Реализация.Дата);
    Если ЗначениеЗаполнено(ДокументВозврата) Тогда
        Если Реализация.Товары.Количество()= 0 И ДокументВозврата.Товары.Количество()>0 Тогда
            ЧекиНеПечатаются = Истина;     
        КонецЕсли;
    КонецЕсли;
    //Серегин М.В. 11.06.2015 11:42:04
    
    //Серегин М.В. 08.06.2015 11:44:57 	
    Если НЕ (ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
        ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь 
        ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом 
        ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.НетНаСкладе 
        ИЛИ ПричинаОтказа = Справочники.ПричиныОтказаПереноса.НайтиПоКоду("00000000016")) Тогда //Причина - Задвоен
        
        Если ЧекиНеПечатаются И (СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена Или СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично) Тогда
            Нов = Движения.УчетДенежныхСредствКассиром.Добавить();
            Нов.Период = Дата;
            Нов.Заказ = Реализация;
            Нов.ИнтернетМагазин = ИМ;
            Нов.РезультатДоставки = СтатусЗаказа;
            Нов.ТипЗаказа = ТД;
            Нов.ТипОплаты = ТО;
            Нов.ЮрЛицо = Най.Организация;
            Нов.Спецсчет = Най.Спецсчет;
            ////+++++Серегин М.В. 09.10.2015 14:11:37 старый код
            //Нов.Сумма = ДоставленныеТовары.Итог("Сумма") + СтоимостьДоставки;
            //+++++Серегин М.В. 09.10.2015 14:11:45 новый код
            Нов.Сумма = ДоставленныеТовары.Итог("Сумма");
            Нов.СуммаДоставки = СтоимостьДоставки;
            //-----Серегин М.В. 09.10.2015 14:11:52 
            
            ////+++++Серегин М.В. 16.10.2015 14:21:38 
            //Движение = Движения.УчетДенежныхСредствКассиромРасширеный.ДобавитьПриход();
            //Движение.Период = Дата;
            //Движение.Заказ = Реализация;
            //Движение.ИнтернетМагазин = ИМ;
            //Движение.РезультатДоставки = СтатусЗаказа;
            //Движение.ТипЗаказа = ТипЗаказа;
            //Движение.ТипОплаты = ТО;
            //Движение.ЮрЛицо = Най.Организация;
            //Движение.Спецсчет = Най.Спецсчет;
            //
            //Если ТО = Справочники.ТипыОплат.Терминал
            //    ИЛИ ТО = Справочники.ТипыОплат.Наличные 
            //    ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
            //    
            //СуммаВозврата = 0;
            //Если ТипЗаказа = Перечисления.ТипыЗаказов.Возврат Тогда
            //    СуммаВозврата = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Реализация.Номер).СуммаДокумента;
            //КонецЕсли;
            //    
            //    Если ТО = Справочники.ТипыОплат.Наличные ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
            //        Движение.СуммаНаличные = ДоставленныеТовары.Итог("Сумма");
            //        Движение.СуммаВозврата = СуммаВозврата;
            //    ИначеЕсли ТО = Справочники.ТипыОплат.Терминал Тогда
            //        Движение.СуммаБезНаличные = ДоставленныеТовары.Итог("Сумма")+СуммаВозврата;
            //    КонецЕсли;
            //    Движение.СуммаДоставки = СтоимостьДоставки;
            //    
            //    
            //    Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена 
            //        ИЛИ СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
            //        Движение.Выполнено = 1;
            //    Иначе
            //        Если ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
            //            ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь
            //            ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
            //            Движение.Перенос = 1;
            //        КонецЕсли;
            //        Движение.НеВыполнено = 1;
            //    КонецЕсли;
            //    
            //КонецЕсли;
            ////-----Серегин М.В. 16.10.2015 14:21:40 
            
        КонецеСли;
        
            //Серегин М.В. 28.05.2015 13:54:36 
            Для каждого Тек Из ДоставленныеТовары Цикл
                Если Тек.КоличествоДоставлено <> Тек.Количество И СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                    //Движение приход
                    Движение = Движения.ДанныеЧастичныхЗаказов.Добавить();
                    Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
                    Движение.Период = Дата;
                    Движение.Заказ = Реализация;
                    Движение.Сумма = Тек.Количество*Тек.Цена;
                    Движение.Номенклатура = Тек.Номенклатура;
                    Движение.Количество = Тек.Количество;
					//Асеев 04.09.2020 (Задача № 4185)>>>
					Движение.КодМаркировки = Тек.КодМаркировки;
					//Асеев 04.09.2020 (Задача № 4185)<<<
                    
                    //Движение расход
                    Движение = Движения.ДанныеЧастичныхЗаказов.Добавить();
                    Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
                    Движение.Период = Дата;
                    Движение.Заказ = Реализация;
                    Движение.Сумма = Тек.КоличествоДоставлено*Тек.Цена;
                    Движение.Номенклатура = Тек.Номенклатура;
                    Движение.Количество = Тек.КоличествоДоставлено;
					//Асеев 04.09.2020 (Задача № 4185)>>>
					Движение.КодМаркировки = Тек.КодМаркировки;
					//Асеев 04.09.2020 (Задача № 4185)<<<
                КонецЕсли;
            КонецЦикла;
            //Серегин М.В. 28.05.2015 13:54:40 
            
    КонецЕсли;
    //Серегин М.В. 08.06.2015 11:45:02 
	
	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	Если СтоимостьДоставки <> СтоимостьДоставкиПервоначально Тогда
		евген.ЗапросКИнтернетМагазину("
		|UPDATE _order
		|SET deliveryPriceRUR = " + Формат(СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ", deliveryForMkadrur = 0
		|	WHERE
		|		orderId = " + Формат(Сокрлп(Реализация.Номер), "ЧГ="), Подкл);
    КонецеСли;
    
	ДвиженияУчетДенежныхСредствКассиромРасширеный();
	ОбновлениеСтатусовРегламент();

	//CeHbKA
	ДвиженияВзаиморасчетыСКомитентами();
	
КонецПроцедуры

Процедура ДвиженияУчетДенежныхСредствКассиромРасширеный()
	
	Движения.УчетДенежныхСредствКассиромРасширеный.Записывать = Истина;
    Движения.УчетДенежныхСредствКассиромРасширеный.Очистить();
    
	ИМ = Реализация.ВладелецТовара;
	ТО = Справочники.ТипыОплат.НайтиПоКоду(Реализация.ТипОплаты);
	ТД = Перечисления.ТипыЗаказов.Самовывоз;
	
	Струк = Новый Структура;
	Струк.Вставить("Контрагент", ИМ);
	Струк.Вставить("ТипОплаты", ТО);
	Струк.Вставить("ТипДоставки", ТД);
	Най = РегистрыСведений.ЮридическоеЛицоПоДоставкеКонтрагента.ПолучитьПоследнее(КонецДня(Дата), Струк);
    ЧекиНеПечатаются = Най.ЧекиНеПечатаются;
    
    ДокументВозврата = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Реализация.Номер,Реализация.Дата);
    Если ЗначениеЗаполнено(ДокументВозврата) Тогда
        Если Реализация.Товары.Количество()= 0 И ДокументВозврата.Товары.Количество()>0 Тогда
            //ЧекиНеПечатаются = Истина;     
        КонецЕсли;
    КонецЕсли;
    
    //lem 10/11/2017
	Если ЧекиНеПечатаются  Тогда
	//lem 10/11/2017
        //Если ТО = Справочники.ТипыОплат.Терминал
        //    ИЛИ ТО = Справочники.ТипыОплат.Наличные 
        //    ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
        ТипЗаказа = smv.ПолучитьТипЗаказаNew(Реализация); 
        //+++++Серегин М.В. 16.10.2015 14:21:38 
        Движение = Движения.УчетДенежныхСредствКассиромРасширеный.ДобавитьПриход();
        Движение.Период = Дата;
        Движение.Заказ = Реализация;
        Движение.ИнтернетМагазин = ИМ;
        Движение.РезультатДоставки = СтатусЗаказа;
        Движение.ПричинаНеВыполнения = ПричинаНеВыполненияЗаказа;
        Движение.ПричинаОтказаПереноса = ПричинаОтказа; 
        Движение.ТипЗаказа = ТипЗаказа;
        Движение.ТипОплаты = ТО;
        Движение.ЮрЛицо = Най.Организация;
        Движение.Спецсчет = Най.Спецсчет;
		
		// МАС - 05.06.2017 - №982 --->> 
		Движение.ТерминалДоставки = Реализация.ТерминалДоставки;
		// <<--- МАС
		
        Если ТО = Справочники.ТипыОплат.Терминал
            ИЛИ ТО = Справочники.ТипыОплат.Наличные 
            ИЛИ ТО = Справочники.ТипыОплат.ВКредит
			Или ТО = Справочники.ТипыОплат.ОплаченоВМагазине 
			ИЛИ ТО = Справочники.ТипыОплат.БезРасчетов  Тогда  // Задача № 2901
            СуммаДокумента = 0;
            СуммаВозврата = ПолучитьСуммуВозврата();
            СуммаДоставки = 0;
            Если НЕ (ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
                ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь 
                ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом 
                ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.НетНаСкладе 
                ИЛИ ПричинаОтказа = Справочники.ПричиныОтказаПереноса.НайтиПоКоду("00000000016")) Тогда //Причина - Задвоен
                
                Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
                    СуммаДокумента = ДоставленныеТовары.Итог("Сумма");
                    СуммаДоставки = СтоимостьДоставки;
                Иначе
                    СуммаДокумента = ДоставленныеТовары.Итог("Сумма")+СтоимостьДоставки;
                    СуммаДоставки = СтоимостьДоставки;
                КонецЕсли;
                
            КонецЕсли;
    
            Если ТО = Справочники.ТипыОплат.Наличные ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
                Движение.СуммаНаличные = СуммаДокумента-СуммаВозврата;
                Движение.СуммаВозвратаНаличные = СуммаВозврата;
            ИначеЕсли ТО = Справочники.ТипыОплат.Терминал Тогда
                Движение.СуммаБезНаличные = СуммаДокумента-СуммаВозврата;
                Движение.СуммаВозвратаБезНаличные = СуммаВозврата;
            КонецЕсли;
            
            Движение.СуммаДоставки = СуммаДоставки;
			Если ТО = Справочники.ТипыОплат.ОплаченоВМагазине ИЛИ ТО = Справочники.ТипыОплат.БезРасчетов Тогда // Задача № 2901
				Движение.ЗачтенныйАванс = СуммаДокумента-СуммаВозврата;
			КонецеСли;	
        КонецЕсли;
            
            Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена 
                ИЛИ СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
                Движение.Выполнено = 1;
            Иначе
                Если ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
                    ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь
                    ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
                    Движение.Перенос = 1;
                КонецЕсли;
                Движение.НеВыполнено = 1;
            КонецЕсли;
            
        //КонецЕсли;
        
	КонецеСли;
    
КонецПроцедуры

Процедура ДвиженияВзаиморасчетыСКомитентами() Экспорт

	Движения.ВзаиморасчетыСКомитентамиПоЗаказам.Записывать = Истина;
    Движения.ВзаиморасчетыСКомитентамиПоЗаказам.Очистить();
    
	ИМ = Реализация.ВладелецТовара;
	ТО = Справочники.ТипыОплат.НайтиПоКоду(Реализация.ТипОплаты);
	ТД = Перечисления.ТипыЗаказов.Самовывоз;
	
	Струк = Новый Структура;
	Струк.Вставить("Контрагент", ИМ);
	Струк.Вставить("ТипОплаты", ТО);
	Струк.Вставить("ТипДоставки", ТД);
	Най = РегистрыСведений.ЮридическоеЛицоПоДоставкеКонтрагента.ПолучитьПоследнее(КонецДня(Дата), Струк);
    ЧекиНеПечатаются = Най.ЧекиНеПечатаются;
    
    ДокументВозврата = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Реализация.Номер,Реализация.Дата);
    Если ЗначениеЗаполнено(ДокументВозврата) Тогда
        Если Реализация.Товары.Количество()= 0 И ДокументВозврата.Товары.Количество()>0 Тогда
            //ЧекиНеПечатаются = Истина;     
        КонецЕсли;
    КонецЕсли;
 	
	Если ЧекиНеПечатаются  Тогда
		
		//Задача № 2540
		ТаблицаДвиженийВзаиморасчетовСКомитентами = РегистрыНакопления.ВзаиморасчетыСКомитентами.ТаблицаДвиженийПоРегистру();
		//Задача № 2540
		
        ТипЗаказа = smv.ПолучитьТипЗаказаNew(Реализация); 
        Движение = Движения.ВзаиморасчетыСКомитентамиПоЗаказам.ДобавитьПриход();
        Движение.Период = Дата;
        Движение.Организация = Най.Организация;
        Движение.Комитент = ИМ;
        Движение.ТипЗаказа = ТипЗаказа;
        Движение.Заказ = Реализация;
		Движение.ДатаВозникновенияЗадолженности = Дата;
		
		Если НЕ ЗначениеЗаполнено(Движение.Организация) Тогда
			Движение.Организация = Реализация.ВладелецТовара.ОсновнойДоговорКонтрагента.Организация;
		КонецЕсли; 
		
		Если ТО = Справочники.ТипыОплат.Терминал
            ИЛИ ТО = Справочники.ТипыОплат.Наличные 
            ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
            СуммаДокумента = 0;
            СуммаВозврата = ПолучитьСуммуВозврата();
            СуммаДоставки = 0;
            Если НЕ (ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
                ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь 
                ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом 
                ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.НетНаСкладе 
                ИЛИ ПричинаОтказа = Справочники.ПричиныОтказаПереноса.НайтиПоКоду("00000000016")) Тогда //Причина - Задвоен
                
                Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.НеВыполнена Тогда
                    СуммаДокумента = ДоставленныеТовары.Итог("Сумма");
                    СуммаДоставки = СтоимостьДоставки;
                Иначе
                    СуммаДокумента = ДоставленныеТовары.Итог("Сумма")+СтоимостьДоставки;
                    СуммаДоставки = СтоимостьДоставки;
                КонецЕсли;
                
            КонецЕсли;
    
            Если ТО = Справочники.ТипыОплат.Наличные ИЛИ ТО = Справочники.ТипыОплат.ВКредит Тогда
				Движение.Сумма = СуммаДокумента-СуммаВозврата;
				//Движение.СуммаВозвратаНаличные = СуммаВозврата;
            ИначеЕсли ТО = Справочники.ТипыОплат.Терминал Тогда
                Движение.Сумма = СуммаДокумента-СуммаВозврата;
				//Движение.СуммаВозвратаБезНаличные = СуммаВозврата;
            КонецЕсли;
			
			//Задача № 2540
			ЗаполнитьЗначенияСвойств(ТаблицаДвиженийВзаиморасчетовСКомитентами.Добавить(),  Движение);
			Движения.ВзаиморасчетыСКомитентами.СоздатьДвижения(ЭтотОбъект,ТаблицаДвиженийВзаиморасчетовСКомитентами);
			//Задача № 2540
			
			//Движение.СуммаДоставки = СуммаДоставки;
        КонецЕсли;
            
			//Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена 
			//    ИЛИ СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
			//	Движение.Выполнено = 1;
			//Иначе
			//    Если ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
			//        ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь
			//        ИЛИ ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			//        Движение.Перенос = 1;
			//    КонецЕсли;
			//    Движение.НеВыполнено = 1;
			//КонецЕсли;
			
	КонецеСли;

КонецПроцедуры
 

Функция ПолучитьСуммуВозврата()

    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ДанныеЗаказаСамовывозаДоставленныеТовары.Номенклатура,
        |   СУММА(ДанныеЗаказаСамовывозаДоставленныеТовары.Сумма) КАК Сумма
        |ПОМЕСТИТЬ ВТ_Групировка
        |ИЗ
        |   Документ.ДанныеЗаказаСамовывоза.ДоставленныеТовары КАК ДанныеЗаказаСамовывозаДоставленныеТовары
        |ГДЕ
        |   ДанныеЗаказаСамовывозаДоставленныеТовары.Ссылка = &Ссылка
        |
        |СГРУППИРОВАТЬ ПО
        |   ДанныеЗаказаСамовывозаДоставленныеТовары.Номенклатура
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СУММА(ВТ_Групировка.Сумма) КАК Сумма
        |ПОМЕСТИТЬ ВТ
        |ИЗ
        |   ВТ_Групировка КАК ВТ_Групировка
        |ГДЕ
        |   ВТ_Групировка.Сумма < 0
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЕСТЬNULL(ВТ.Сумма, 0) КАК СуммаВозврата
        |ИЗ
        |   ВТ КАК ВТ";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.СуммаВозврата;
    Иначе 
        Возврат 0;
    КонецЕсли;
    


КонецФункции // ПолучитьСуммуВозврата()


Процедура ОбновлениеСтатусовРегламент() Экспорт
	Если СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ПустаяСсылка() Или СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.Выполнена Тогда
		ОбновлениеСтатусовВАдминке(231);		
	ИначеЕсли СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда  	// Задача № 3099
		ОбновлениеСтатусовВАдминке(237); // //ВРЕМЕННАЯ ЗАГЛУШКА 231 ОТКЛЮЧЕНА					// Задача № 3099
	ИначеЕсли СтатусЗаказа = Справочники.новаРезультатМестнойДоставки.НеВыполнена И ПричинаНеВыполненияЗаказа = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Тогда
		ОбновлениеСтатусовВАдминке(232);
	Иначе
		ОбновлениеСтатусовВАдминке(235);
	КонецЕсли;	
КонецПроцедуры	



Процедура ОбновлениеСтатусовВАдминке(Стат) Экспорт
	Сп = Новый Массив;
	
	// Отключено в рамках Задача № 2813
	//Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	//
	//СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Реализация.Номер), "ЧГ=") + "," + Строка(Стат) + ",'МП самовывоз'";
	//Если lem.СохранитьСтатус(Реализация, Стат, Ссылка) Тогда
	//	Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
	//КонецеСли;	
	
	// Задача № 2813
	Если РаботаСоСтатусамиЗаказовСервер.СохранитьСтатус(Реализация, Стат, Ссылка, ИнициаторСостояния, ТерминалОбработки) Тогда
	// Задача № 3027 //Если lem.СохранитьСтатус(Реализация, Стат, Ссылка, ИнициаторСостояния) Тогда
		
		//Задача № 2869
		ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("Initiator", РаботаСАдминкойСервер.ИнициаторСостоянияВАдминку(ИнициаторСостояния));	
		//Задача № 2869
		ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ProcessingTerminal", Число(ТерминалОбработки.Код), ДопПараметрыСтатуса);// Задача № 3027

		//CeHbKA #3227 21.06.2019
		Если Стат = 232 ИЛИ Стат = 235 Тогда 
			Если НЕ ПричинаОтказа.Пустая() Тогда
				ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ReasonId", СокрЛП(ПричинаОтказа.Код), ДопПараметрыСтатуса); 
				ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ReasonRefusal", СокрЛП(ПричинаОтказа.Наименование), ДопПараметрыСтатуса); // Задача № 3027
			КонецЕсли;	
		КонецЕсли; 
		//CeHbKA #3227 21.06.2019
		
		МассивСтатусов = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(Реализация.Номер, Стат, "МП самовывоз",,Дата,,ДопПараметрыСтатуса); 
		СтруктураВозврата = mas.ОтправитьМассивСтатусовЗаказов(МассивСтатусов);
	КонецЕсли;
	
КонецПроцедуры	


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
                |   ДанныеЗаказаСамовывоза.Ссылка
                |ИЗ
                |   Документ.ДанныеЗаказаСамовывоза КАК ДанныеЗаказаСамовывоза
                |ГДЕ
                |   ДанныеЗаказаСамовывоза.Проведен = ИСТИНА
                |   И ДанныеЗаказаСамовывоза.Реализация = &Заказ
                |   И ДанныеЗаказаСамовывоза.СтатусЗаказа В (ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.Выполнена), ЗНАЧЕНИЕ(справочник.новаРезультатМестнойДоставки.ВыполненаЧастично))
                |   И ДанныеЗаказаСамовывоза.Ссылка <> &Док";
	Зап.УстановитьПараметр("Заказ", Реализация.Ссылка);	
	Зап.УстановитьПараметр("Док", Ссылка);	
	
	Рез = Зап.Выполнить();
	Если Не Рез.Пустой() Тогда
		Отказ = Истина;
	КонецеСли;	
КонецПроцедуры

Функция ЕстьЗаписиПоЗаказуВСтатусыСкладскогоУчета(Ссылка)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	СтатусыСкладскогоУчетаСрезПоследних.Период КАК Период,
        |	СтатусыСкладскогоУчетаСрезПоследних.Регистратор КАК Регистратор,
        |	СтатусыСкладскогоУчетаСрезПоследних.Заказ КАК Заказ,
        |	СтатусыСкладскогоУчетаСрезПоследних.СтатусСкладскогоУчета КАК СтатусСкладскогоУчета,
        |	СтатусыСкладскогоУчетаСрезПоследних.ТипЗаказа КАК ТипЗаказа
        |ИЗ
        |	РегистрСведений.СтатусыСкладскогоУчета.СрезПоследних(&Период, ) КАК СтатусыСкладскогоУчетаСрезПоследних
        |ГДЕ
        |	СтатусыСкладскогоУчетаСрезПоследних.Заказ = &Ссылка";
    
    Запрос.УстановитьПараметр("Период", Ссылка.Дата);
    Запрос.УстановитьПараметр("Ссылка", Ссылка.Реализация);
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
        Возврат Истина;
    Иначе 
        Возврат Ложь;
    КонецЕсли;

КонецФункции // ()

