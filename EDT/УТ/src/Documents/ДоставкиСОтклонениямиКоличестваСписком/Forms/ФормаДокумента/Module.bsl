&НаКлиенте
Процедура ДоставкаПриИзмененииНаСервере(ТекСтр)
	Струк = Новый Структура;
	Струк.Вставить("Доставка",  ТекСтр.Доставка);      //Элементы.Доставки.ТекущиеДанные
	НайСтр = Объект.Товары.НайтиСтроки(Струк);
	Для Каждого Тек Из НайСтр Цикл
		Объект.Товары.Удалить(Тек);
	КонецЦикла;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РеализацияТоваровУслугТовары.Номенклатура,
	            |	РеализацияТоваровУслугТовары.Количество,
	            |	РеализацияТоваровУслугТовары.Сумма
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	            |ГДЕ
	            |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
	            |	РеализацияТоваровУслугПодарочныеПозиции.Количество,
	            |	РеализацияТоваровУслугПодарочныеПозиции.Сумма
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	            |ГДЕ
	            |	РеализацияТоваровУслугПодарочныеПозиции.Ссылка = &Ссылка";
	зап.УстановитьПараметр("Ссылка", ТекСтр.Доставка);
	Рез = зап.Выполнить().Выгрузить();
	Для каждого Тек Из Рез Цикл
		Нов = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
		Нов.НеобходимоеКоличество = Нов.Количество;
		Нов.Доставка = ТекСтр.Доставка;
	КонецЦикла;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаЗаданияРейсов.Рейс,
	            |	Рейс_.Ссылка КАК РейсV
	            |ИЗ
	            |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс_
	            |		ПО новаЗаданияРейсов.Рейс.Ссылка = Рейс_.РейсМестнойДоставки.Ссылка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
	            |ГДЕ
	            |	новаЗаданияРейсов.МаршрутСопровождения = ЛОЖЬ
	            |	И новаЗаданияРейсов.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.разгрузка)
	            |	И РеализацияТоваровУслуг.Ссылка = &Доставка
	            |	И новаЗаданияРейсов.Рейс.РейсОтменен = ЛОЖЬ
	            |	И новаЗаданияРейсов.Рейс.РейсВыполнен = ЛОЖЬ
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	новаЗаданияРейсов.Рейс,
	            |	Рейс_.Ссылка
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	новаЗаданияРейсов.Рейс.Дата УБЫВ";
				
	Зап.УстановитьПараметр("Доставка", ТекСтр.Доставка);	
	Рез = Зап.Выполнить().Выгрузить();
	Если Рез.количество() >= 1 Тогда
		ТекСтр.Рейс = Рез[0].Рейс;
		ТекСтр.РейсV = Рез[0].РейсV;
	КонецеСли;
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Доставка", ТекСтр.Доставка.Ссылка); 
	элементы.Товары.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТолькоПросмотр = Объект.ДвиженияВыполнены;
	Если Не ТолькоПросмотр Тогда
		ТолькоПросмотр = Объект.Проведен;
	КонецеСли;	
	Если Объект.ПисьмоОтправлено Тогда
		НадписьПисьмо = "ПИСЬМО ОТПРАВЛЕНО";
	Иначе
		НадписьПисьмо = "";
	КонецЕсли;
	
	Для Каждого Тек Из Объект.Доставки Цикл
		Если ТипЗнч(Тек.Доставка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Тек.ИМ = Тек.Доставка.ВладелецТовара;
		КонецеСли;	
	КонецЦикла;	
	
	Если Объект.Доставки.Количество() = 0 Тогда
		Объект.МаршрутизацияVeeroute = Истина;
	КонецеСли;	
	РежимУчета = 1;
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьВсе(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Тек Из Объект.Товары Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Доставка", Тек.Доставка);
		НайденныеСтроки = Объект.Доставки.НайтиСтроки(ПараметрыОтбора);
		Если НЕ НайденныеСтроки[0].ДоставкаОтменена Тогда
			Тек.Количество = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура СнятьВсеЗаказыСДоставки(Команда)
	
	Для Каждого Тек Из Объект.Доставки Цикл
		Тек.ДоставкаОтменена = Истина;
	КонецЦикла;
	
	Элементы.Товары.Обновить();
		
КонецПроцедуры


&НаКлиенте
Процедура ПровестиИЗакрытьИзФормы(Команда) Экспорт
	//ПровестиИЗакрытьНаКлиенте();
	ПровестиИЗакрытьНаСервереЧерезОбъект();
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПровестиИЗакрытьНаСервереЧерезОбъект()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПровестиИЗакрытьНаСервере();
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПровестиИЗакрытьНаСервере() Экспорт
		ЗаписатьИзФормыНаСервере();
	
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	//Если Объект.Доставка.Пустая() Тогда
	//	Возврат;
	//КонецеСли;	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	МасР = Новый Массив;
	
	Для Каждого Тек_ Из Объект.Доставки Цикл
		Если Не Объект.ДвиженияВыполнены Тогда
			Если Тек_.ДоставкаОтменена И Не Тек_.Рейс.Пустая() Тогда
				Если Не Объект.МаршрутизацияVeeroute Тогда
					//Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Тек_.Доставка.Номер);
					//МассивОбновленияОбъектовУТЛ = Новый Массив;
					//МассивДоставокНаУдаление = Новый Массив;			
					//
					//МассивДоставокНаУдаление.Добавить(Дост.Ссылка);
					//МассивОбновленияОбъектовУТЛ.Добавить(Дост.Ссылка);
					//
					//
					//Если МассивДоставокНаУдаление.Количество() <> 0 Тогда
					//	обИсточникВР = Обработки.новаИсточникВозможныеРейсы.Создать();
					//	обИсточникВР.ИсключитьДоставкиИзРейса(Тек_.Рейс.Ссылка, МассивДоставокНаУдаление);
					//	
					//	УдалительИзРейсов = Обработки.новаИсточникМаршрутРейса.Создать();
					//	УдалительИзРейсов.Журнал = Новый Структура("Дерево", Новый Структура("Значение", Новый ДеревоЗначений));
					//	УдалительИзРейсов.НачатьРедактирование(Тек_.Рейс.Ссылка, Тек_.Рейс.ПолучитьОбъект());
					//	УдалительИзРейсов.УдалитьДоставки(Тек_.Рейс.Ссылка, МассивДоставокНаУдаление, Истина);
					//	УдалительИзРейсов.ЗакончитьРедактирование(Тек_.Рейс.Ссылка, Ложь);
					//	
					//	МассивОбновленияОбъектовУТЛ.Добавить(Тек_.Рейс);
					//	обИсточникВР = Обработки.новаИсточникВозможныеРейсы.Создать();
					//	обИсточникВР.ИсключитьДоставкиИзРейса(Тек_.Рейс.Ссылка, МассивДоставокНаУдаление);
					//КонецЕСли;	
					//Если МассивОбновленияОбъектовУТЛ.Количество() > 0 Тогда
					//	новаОбщиеПроцедуры.ОповеститьОбОбновлении(МассивОбновленияОбъектовУТЛ);
					//КонецЕсли;
				Иначе
					Наб = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
					ТекВр = ТекущаяДата();
					Наб.Отбор.Период.Установить(ТекВр);
					Наб.Отбор.Рейс.Установить(Тек_.РейсV);
					Наб.Отбор.Заказ.Установить(Тек_.Доставка);
					
					Нов = Наб.Добавить();
					Нов.Период = ТекВр;
					Нов.Рейс = Тек_.РейсV;
					Нов.Заказ = Тек_.Доставка;
					Нов.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.НеНайденныеЗаказы;
					
					// Якурнов 06.08.2018 14:21:41
					Нов.ДокументРегистратор = Объект.Ссылка;
					
					Наб.Записать();
					
					//Асеев 30.04.2020 (Задача № 4357)>>>
					Если Объект.Рейс.Пустая() Тогда
						//Асеев 30.04.2020 (Задача № 4357)<<<
						Наб = РегистрыСведений.МестонахождениеЗаказа.СоздатьНаборЗаписей();
						ТекВр = ТекущаяДата();
						Наб.Отбор.Период.Установить(ТекВр);
						Наб.Отбор.Заказ.Установить(Тек_.Доставка);
						
						Нов = Наб.Добавить();
						Нов.Период = ТекВр;
						Нов.Рейс = Тек_.РейсV;
						Нов.Заказ = Тек_.Доставка;
						Нов.Местонахождение = Справочники.ВидыМестонахожденияЗаказа.НаСкладе;
						Нов.Терминал = Объект.ТерминалДоставки;
						Нов.ДокументРегистратор = Объект.Ссылка;
						
						Наб.Записать();
					КонецЕсли;
					
					
					НайРВ = МасР.Найти(Тек_.РейсV.Ссылка);
					
					Если НайРв = Неопределено Тогда
						МасР.Добавить(Тек_.РейсV.Ссылка);
					КонецеСли;	
					
				КонецеСли;
				ОбновитьМашинуВАдминкеНаСервере(Число(Тек_.Доставка.Номер));
				//СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Тек_.Доставка.Номер), "ЧГ=") + ",213,'нет на складе'";
				//Если lem.СохранитьСтатус(Тек_.Доставка, 213, Объект.Ссылка) Тогда
				//	Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
				//КонецеСли;					
			Иначе
				ИсправитьДоставкуНаСервере(Соединение, Тек_, истина);
				
				
				
			КонецеСли;
		КонецеСли;
	КонецЦикла;
	
	Для Каждого Тек Из МасР Цикл
		//Попытка
		Попытка
		Р = Тек.ПолучитьОбъект();
		Р.Записать(РежимЗаписиДокумента.Запись);
		Р.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		КонецПопытки;
	//исключение
	//	
	//	конецПопытки;
	КонецЦикла;
	
	
	ПровестиИЗакрытьИзФормыНаСервере();
	ОбновлениеСтатусовВАдминке(РежимЗаписиДокумента.Проведение);
	
	//Если Открыта() Тогда 
	//	Закрыть();
	//КонецЕсли;	
	
КонецПроцедуры	

//+Степанов
&НаКлиенте
Процедура ПровестиИЗакрытьНаКлиенте() Экспорт
		ЗаписатьИзФормыНаСервере();
	
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	//Если Объект.Доставка.Пустая() Тогда
	//	Возврат;
	//КонецеСли;	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	МасР = Новый Массив;
	
	Для Каждого Тек_ Из Объект.Доставки Цикл
		Если Не Объект.ДвиженияВыполнены Тогда
			Если Тек_.ДоставкаОтменена И Не Тек_.Рейс.Пустая() Тогда
				Если Не Объект.МаршрутизацияVeeroute Тогда
					Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Тек_.Доставка.Номер);
					МассивОбновленияОбъектовУТЛ = Новый Массив;
					МассивДоставокНаУдаление = Новый Массив;			
					
					МассивДоставокНаУдаление.Добавить(Дост.Ссылка);
					МассивОбновленияОбъектовУТЛ.Добавить(Дост.Ссылка);
					
					
					Если МассивДоставокНаУдаление.Количество() <> 0 Тогда
						обИсточникВР = Обработки.новаИсточникВозможныеРейсы.Создать();
						обИсточникВР.ИсключитьДоставкиИзРейса(Тек_.Рейс.Ссылка, МассивДоставокНаУдаление);
						
						УдалительИзРейсов = Обработки.новаИсточникМаршрутРейса.Создать();
						УдалительИзРейсов.Журнал = Новый Структура("Дерево", Новый Структура("Значение", Новый ДеревоЗначений));
						УдалительИзРейсов.НачатьРедактирование(Тек_.Рейс.Ссылка, Тек_.Рейс.ПолучитьОбъект());
						УдалительИзРейсов.УдалитьДоставки(Тек_.Рейс.Ссылка, МассивДоставокНаУдаление, Истина);
						УдалительИзРейсов.ЗакончитьРедактирование(Тек_.Рейс.Ссылка, Ложь);
						
						МассивОбновленияОбъектовУТЛ.Добавить(Тек_.Рейс);
						обИсточникВР = Обработки.новаИсточникВозможныеРейсы.Создать();
						обИсточникВР.ИсключитьДоставкиИзРейса(Тек_.Рейс.Ссылка, МассивДоставокНаУдаление);
					КонецЕСли;	
					Если МассивОбновленияОбъектовУТЛ.Количество() > 0 Тогда
						новаОбщиеПроцедуры.ОповеститьОбОбновлении(МассивОбновленияОбъектовУТЛ);
					КонецЕсли;
				Иначе
					Наб = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
					ТекВр = ТекущаяДата();
					Наб.Отбор.Период.Установить(ТекВр);
					Наб.Отбор.Рейс.Установить(Тек_.РейсV);
					Наб.Отбор.Заказ.Установить(Тек_.Доставка);
					
					Нов = Наб.Добавить();
					Нов.Период = ТекВр;
					Нов.Рейс = Тек_.РейсV;
					Нов.Заказ = Тек_.Доставка;
					Нов.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.НеНайденныеЗаказы;
					
					// Якурнов 06.08.2018 14:21:41
					Нов.ДокументРегистратор = Объект.Ссылка;
					
					Наб.Записать();
					
					//Асеев 30.04.2020 (Задача № 4357)>>>
					Если Объект.Рейс.Пустая() Тогда
						//Асеев 30.04.2020 (Задача № 4357)<<<
						Наб = РегистрыСведений.МестонахождениеЗаказа.СоздатьНаборЗаписей();
						ТекВр = ТекущаяДата();
						Наб.Отбор.Период.Установить(ТекВр);
						Наб.Отбор.Заказ.Установить(Тек_.Доставка);
						
						Нов = Наб.Добавить();
						Нов.Период = ТекВр;
						Нов.Рейс = Тек_.РейсV;
						Нов.Заказ = Тек_.Доставка;
						Нов.Местонахождение = Справочники.ВидыМестонахожденияЗаказа.НаСкладе;
						Нов.Терминал = Объект.ТерминалДоставки;
						Нов.ДокументРегистратор = Объект.Ссылка;
						
						Наб.Записать();
					КонецЕсли;
					
					
					НайРВ = МасР.Найти(Тек_.РейсV.Ссылка);
					
					Если НайРв = Неопределено Тогда
						МасР.Добавить(Тек_.РейсV.Ссылка);
					КонецеСли;	
					
				КонецеСли;
				ОбновитьМашинуВАдминке(Число(Тек_.Доставка.Номер));
				//СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Сокрлп(Тек_.Доставка.Номер), "ЧГ=") + ",213,'нет на складе'";
				//Если lem.СохранитьСтатус(Тек_.Доставка, 213, Объект.Ссылка) Тогда
				//	Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
				//КонецеСли;					
			Иначе
				ИсправитьДоставку(Соединение, Тек_, истина);
				
				
				
			КонецеСли;
		КонецеСли;
	КонецЦикла;
	
	Для Каждого Тек Из МасР Цикл
		//Попытка
		Попытка
		Р = Тек.ПолучитьОбъект();
		Р.Записать(РежимЗаписиДокумента.Запись);
		Р.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		КонецПопытки;
	//исключение
	//	
	//	конецПопытки;
	КонецЦикла;
	
	
	ПровестиИЗакрытьИзФормыНаСервере();
	ОбновлениеСтатусовВАдминке(РежимЗаписиДокумента.Проведение);
	
	Если Открыта() Тогда 
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры	
//-Степанов

Процедура ОбновлениеСтатусовВАдминке(Режим)
	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();	
	Период = ТекущаяДата();

	
	// сформируем таблицу данных для по статусам
	ТаблицаДанных = ПолучитьДанныеОбновлениеСтатусовВАдминке();
	
	
	Если Режим = РежимЗаписиДокумента.Проведение Тогда
		
		//// --- Отключено в рамках Задача № 2813
		//СтрТекстЗапроса="";
		//Стр2 = "";
		//ТекстСоставлен = Ложь;
		//Статус = 0;
		////ТаблицаДанных = ПолучитьДанныеОбновлениеСтатусовВАдминке();
		//
		//Для каждого Стр Из ТаблицаДанных Цикл
		//	Статус = Стр.Статус;
		//	СтрТекстЗапроса = СтрТекстЗапроса + "(" +Формат(Сокрлп(Стр.Номер), "ЧГ=") + ","+Стр.Статус+",'Online приход по ТСД (new)'"+")"+",";
		//	
		//	ТекстСоставлен = Истина;
		//	
		//КонецЦикла;
		// 
		//
		//// текущий статус
		//Если ТекстСоставлен И ЗначениеЗаполнено(СтрТекстЗапроса) Тогда
		//	ДлинаТекста = СтрДлина(СтрТекстЗапроса);
		//	СтрТекстЗапроса = Лев(СтрТекстЗапроса,ДлинаТекста-1);
		//	ТекстЗапроса = "
		//	|DECLARE @t TOrderStatusId
		//	|INSERT INTO @t (orderID, statusId, comment) VALUES " +
		//	СтрТекстЗапроса +" EXEC import_setOrdersStatusIDFrom1C @t";
		//	Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);		
		//КонецЕсли;
		//// --- Отключено в рамках Задача № 2813

		// Задача № 2813
		МассивСтатусов = Неопределено;	
		ТерминалДоставкиКод = Объект.ТерминалДоставки.Код;
		Для каждого Стр Из ТаблицаДанных Цикл
			
			ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ProcessingTerminal", Число(ТерминалДоставкиКод)); // Задача № 3027
			МассивСтатусов = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(Стр.Номер, Стр.Статус, "Online приход по ТСД (new)",,,МассивСтатусов, ДопПараметрыСтатуса);	
			
		КонецЦикла;
		СтруктураВозврата = mas.ОтправитьМассивСтатусовЗаказов(МассивСтатусов);
		// Задача № 2813
		
	КонецЕсли;
	
	//костыль
	ТаблицаДанных.Колонки.Добавить("БылоЗакрытие");
	
	РаботаСоСтатусамиЗаказовСервер.СохранитьСтатусы(ТаблицаДанных,,Объект.ТерминалДоставки);
	// Задача № 3027 //smv.СохранитьСтатус(ТаблицаДанных);
	
КонецПроцедуры



Функция ПолучитьДанныеОбновлениеСтатусовВАдминке()
//|	новаОтчетВодителя.Доставка.ТерминалДоставки КАК Терминал

    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	213 КАК Статус,
        |	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка КАК ДокументРегистратор,
        |	ЛОЖЬ КАК ПредварительноеЗакрытие,
        |	РеализацияТоваровУслуг.Ссылка КАК Реализация,
        |	РеализацияТоваровУслуг.ТерминалДоставки.Ссылка КАК Терминал,
        |	РеализацияТоваровУслуг.Номер
        |ИЗ
        |	Документ.ДоставкиСОтклонениямиКоличестваСписком.Доставки КАК ДоставкиСОтклонениямиКоличестваСпискомДоставки
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |		ПО (ВЫРАЗИТЬ(ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка КАК Документ.РеализацияТоваровУслуг).Ссылка = РеализацияТоваровУслуг.Ссылка)
        |ГДЕ
        |	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка = &Док";
    
    Запрос.УстановитьПараметр("Док", Объект.Ссылка);
        
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

&НаСервере
Процедура ИсправитьДоставкуНаСервере(Соединение, Тек_, Режим);
	Если Режим Тогда
		Струк = Новый Структура;
		Струк.Вставить("Доставка", Тек_.Доставка);
		НайСтр = Объект.Товары.НайтиСтроки(Струк);
		Кол1 = 0;
		Кол2 = 0;
		
		Для Каждого Стр Из НайСтр Цикл
			Кол1 = Кол1 + Стр.Количество;
			Кол2 = Кол2 + Стр.НеобходимоеКоличество;
		КонецЦикла;	
		Если Кол1 = Кол2 Тогда
			Возврат;
		КонецеСли;	
		Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Тек_.Доставка.Номер);
		Для Каждого Тек Из НайСтр Цикл
			Кол = Тек.НеобходимоеКоличество - Тек.Количество;
			Если Кол = 0 Тогда
				Продолжить;
			КонецеСли;	
			КодТовара = Число(Тек.Номенклатура.Код);
			
			
			евген.ЗапросКИнтернетМагазину("DECLARE @t TMissedCount
			|INSERT INTO @t ([skuid],[MissedCount]) VALUES (" + Формат(КодТовара, "ЧГ=") + ", " + Формат(Кол, "ЧН=0; ЧГ=") + ")" + "
			|EXEC sp_setMissedCount " + Формат(Число(Тек.Доставка.Номер), "ЧГ=") + ", @t, 0", Соединение);
			
			
		КонецЦикла;
	Иначе
		Струк = Новый Структура;
		Струк.Вставить("Доставка", Тек_.Доставка);
		НайСтр = Объект.Товары.НайтиСтроки(Струк);
		Кол1 = 0;
		Кол2 = 0;
		
		Для Каждого Стр Из НайСтр Цикл
			Кол1 = Кол1 + Стр.Количество;
			Кол2 = Кол2 + Стр.НеобходимоеКоличество;
		КонецЦикла;	
		Если Кол1 = Кол2 Тогда
			Возврат;
		КонецеСли;	
		Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Тек_.Доставка.Номер);
		Д = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек_.Доставка.Номер);
		ОбД = Д.ПолучитьОбъект();
		Д2 = Документы.ПеремещениеТоваров.НайтиПоНомеру(Тек_.Доставка.Номер);
		ОбД2 = Д2.ПолучитьОбъект();
		//Если Не Дост.Пустая() Тогда
		//	Д3 = Дост.Груз.Ссылка;
		//	ОбД3 = Д3.ПолучитьОбъект();
		//Иначе
		//	Д3 = ДОКУМЕНТЫ.новаГруз.ПустаяСсылка();
		//КонецеСли;	
		
		Для Каждого Тек Из НайСтр Цикл
			Кол = Тек.НеобходимоеКоличество;
			Если Кол = 0 Тогда
				Продолжить;
			КонецеСли;	
			КодТовара = Число(Тек.Номенклатура.Код);
			
			евген.ЗапросКИнтернетМагазину("DECLARE @t TMissedCount
			|INSERT INTO @t ([skuid],[MissedCount]) VALUES (" + Формат(КодТовара, "ЧГ=") + ", " + Формат(0, "ЧН=0; ЧГ=") + ")" + "
			|EXEC sp_setMissedCount " + Формат(Число(Тек.Доставка.Номер), "ЧГ=") + ", @t, 1", Соединение);
			
		КонецЦикла;
		
	КонецеСли;
КонецПроцедуры	


&НаКлиенте
Процедура ИсправитьДоставку(Соединение, Тек_, Режим);
	Если Режим Тогда
		Струк = Новый Структура;
		Струк.Вставить("Доставка", Тек_.Доставка);
		НайСтр = Объект.Товары.НайтиСтроки(Струк);
		Кол1 = 0;
		Кол2 = 0;
		
		Для Каждого Стр Из НайСтр Цикл
			Кол1 = Кол1 + Стр.Количество;
			Кол2 = Кол2 + Стр.НеобходимоеКоличество;
		КонецЦикла;	
		Если Кол1 = Кол2 Тогда
			Возврат;
		КонецеСли;	
		Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Тек_.Доставка.Номер);
		Для Каждого Тек Из НайСтр Цикл
			Кол = Тек.НеобходимоеКоличество - Тек.Количество;
			Если Кол = 0 Тогда
				Продолжить;
			КонецеСли;	
			КодТовара = Число(Тек.Номенклатура.Код);
			
			
			евген.ЗапросКИнтернетМагазину("DECLARE @t TMissedCount
			|INSERT INTO @t ([skuid],[MissedCount]) VALUES (" + Формат(КодТовара, "ЧГ=") + ", " + Формат(Кол, "ЧН=0; ЧГ=") + ")" + "
			|EXEC sp_setMissedCount " + Формат(Число(Тек.Доставка.Номер), "ЧГ=") + ", @t, 0", Соединение);
			
			
		КонецЦикла;
	Иначе
		Струк = Новый Структура;
		Струк.Вставить("Доставка", Тек_.Доставка);
		НайСтр = Объект.Товары.НайтиСтроки(Струк);
		Кол1 = 0;
		Кол2 = 0;
		
		Для Каждого Стр Из НайСтр Цикл
			Кол1 = Кол1 + Стр.Количество;
			Кол2 = Кол2 + Стр.НеобходимоеКоличество;
		КонецЦикла;	
		Если Кол1 = Кол2 Тогда
			Возврат;
		КонецеСли;	
		Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Тек_.Доставка.Номер);
		Д = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек_.Доставка.Номер);
		ОбД = Д.ПолучитьОбъект();
		Д2 = Документы.ПеремещениеТоваров.НайтиПоНомеру(Тек_.Доставка.Номер);
		ОбД2 = Д2.ПолучитьОбъект();
		Если Не Дост.Пустая() Тогда
			Д3 = Дост.Груз.Ссылка;
			ОбД3 = Д3.ПолучитьОбъект();
		Иначе
			Д3 = ДОКУМЕНТЫ.новаГруз.ПустаяСсылка();
		КонецеСли;	
		
		Для Каждого Тек Из НайСтр Цикл
			Кол = Тек.НеобходимоеКоличество;
			Если Кол = 0 Тогда
				Продолжить;
			КонецеСли;	
			КодТовара = Число(Тек.Номенклатура.Код);
			
			евген.ЗапросКИнтернетМагазину("DECLARE @t TMissedCount
			|INSERT INTO @t ([skuid],[MissedCount]) VALUES (" + Формат(КодТовара, "ЧГ=") + ", " + Формат(0, "ЧН=0; ЧГ=") + ")" + "
			|EXEC sp_setMissedCount " + Формат(Число(Тек.Доставка.Номер), "ЧГ=") + ", @t, 1", Соединение);
			
		КонецЦикла;
		
	КонецеСли;
КонецПроцедуры	

&НаСервере
Процедура ПровестиИЗакрытьИзФормыНаСервере()
	Объект.ДвиженияВыполнены = Истина;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(ПараметрыЗаписи);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзФормыНаСервере()
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры


//CeHbKA 21.01.2018

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если Объект.Товары.Итог("Количество") = 0 И Не Объект.ДоставкаОтменена Тогда
	//	От = Вопрос("В заказе не найдено ни одного товара, при этом доставка не отменена. Отменить доставку?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	//	Если От = КодВозвратаДиалога.Да Тогда
	//		Объект.ДоставкаОтменена = Истина;
	//	КонецеСли;	
	//КонецеСли;	
	
	РезультатПроверки = ПроверитьДоставкиВДругихДокументах();
	
	Если РезультатПроверки.Количество() > 0 Тогда
		
		Для каждого СтрокаСоотв Из РезультатПроверки Цикл
			Сообщить("ВНИМАНИЕ! "+Символы.ПС+""+СтрокаСоотв.Значение+" уже используется в документах:", СтатусСообщения.ОченьВажное);
			Сообщить("- "+СтрокаСоотв.Ключ, СтатусСообщения.ОченьВажное);	
		КонецЦикла;
		
		Отказ = Истина;
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДоставкиВДругихДокументах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка КАК Доставка
		|ПОМЕСТИТЬ ДокТЧ
		|ИЗ
		|	Документ.ДоставкиСОтклонениямиКоличестваСписком.Доставки КАК ДоставкиСОтклонениямиКоличестваСпискомДоставки
		|ГДЕ
		|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка КАК Ссылка,
		|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.НомерСтроки КАК НомерСтроки,
		|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка КАК Доставка
		|ИЗ
		|	Документ.ДоставкиСОтклонениямиКоличестваСписком.Доставки КАК ДоставкиСОтклонениямиКоличестваСпискомДоставки
		|ГДЕ
		|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Проведен
		|	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка В
		|			(ВЫБРАТЬ
		|				ДокТЧ.Доставка
		|			ИЗ
		|				ДокТЧ КАК ДокТЧ)";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СоответствиеДоставок = Новый Соответствие;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СоответствиеДоставок.Вставить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Доставка);
		КонецЦикла;

	КонецЕсли; 
	
	Возврат Новый Соответствие;
	
КонецФункции // ()
 
//CeHbKA 21.01.2018

&НаКлиенте
Процедура ОбновитьМашинуВАдминке(Ном)
    ////Серегин М.В. 30.07.2015 17:31:31 старый код
    //Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
    //евген.ЗапросКИнтернетМагазину("
    //|UPDATE _order
    //|SET carID = 0,  whoLastChange = '" + ПараметрыСеанса.ТекущийПользователь + "' 
    //|	WHERE
    //|		orderId = " + Формат(Ном, "ЧГ=") + " EXEC mp_saveOrderHistory " + Формат(Ном, "ЧГ="), Соединение);
    ////Серегин М.В. 30.07.2015 17:31:37 новый
    Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
    евген.ЗапросКИнтернетМагазину("
	|EXEC p1c_removeCarriageFromOrder " + Формат(Ном, "ЧГ=") + "
    |EXEC mp_saveOrderHistory " + Формат(Ном, "ЧГ="), Соединение);
    //Серегин М.В. 30.07.2015 17:31:39 
КонецПроцедуры

&НаСервере
Процедура ОбновитьМашинуВАдминкеНаСервере(Ном)
    ////Серегин М.В. 30.07.2015 17:31:31 старый код
    //Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
    //евген.ЗапросКИнтернетМагазину("
    //|UPDATE _order
    //|SET carID = 0,  whoLastChange = '" + ПараметрыСеанса.ТекущийПользователь + "' 
    //|	WHERE
    //|		orderId = " + Формат(Ном, "ЧГ=") + " EXEC mp_saveOrderHistory " + Формат(Ном, "ЧГ="), Соединение);
    ////Серегин М.В. 30.07.2015 17:31:37 новый
    Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
    евген.ЗапросКИнтернетМагазину("
	|EXEC p1c_removeCarriageFromOrder " + Формат(Ном, "ЧГ=") + "
    |EXEC mp_saveOrderHistory " + Формат(Ном, "ЧГ="), Соединение);
    //Серегин М.В. 30.07.2015 17:31:39 
КонецПроцедуры

&НаКлиенте
Функция ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину) Экспорт
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = ПодключениеКМагазину;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandType = 1;
	Возврат Cmd.Execute();
КонецФункции 

&НаКлиенте
Функция СоздатьТаблицу(RS, СписокКолонок) Экспорт
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
			КонецЕсли;
		КонецЦикла;
		Rs.MoveNext()
	КонецЦикла;
	
	Возврат Таб;
КонецФункции

&НаКлиенте
Процедура ДоставкиПриАктивизацииСтроки(Элемент)
	Если Элементы.Доставки.ТекущиеДанные <> Неопределено Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Доставка", Элементы.Доставки.ТекущиеДанные.Доставка); 
		Если Элементы.Доставки.ТекущиеДанные.ДоставкаНайдена = 0 Тогда
			Элементы.ДоставкиДоставкаНайдена.Пометка = Ложь;
		Иначе
			Элементы.ДоставкиДоставкаНайдена.Пометка = истина;
		КонецеСли;	
	КонецЕСли;	
КонецПроцедуры

&НаКлиенте
Процедура ДоставкиДоставкаПриИзменении(Элемент)
	//ДоставкаПриИзмененииНаСервере(Элементы.Доставки.ТекущиеДанные);
	Элементы.Доставки.ТекущиеДанные.ИМ = ПолучитьИМ(Элементы.Доставки.ТекущиеДанные.Доставка.Ссылка);
КонецПроцедуры

Функция ПолучитьИМ(Тек)
	Возврат Тек.Ссылка;
КонецФункции

&НаКлиенте
Процедура ДоставкиПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.Доставки.текущийэлемент.имя <> "ДоставкиДоставкаОтменена" Тогда
		Отказ = Истина;
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ДоставкиПередУдалением(Элемент, Отказ)
	Струк = Новый Структура;
	Струк.Вставить("Доставка", Элементы.Доставки.ТекущиеДанные.Доставка.Ссылка);
	Най = Объект.Товары.НайтиСтроки(Струк);
	Для Сч = 0 По Най.Количество() - 1 Цикл
		Объект.Товары.Удалить(Най[Сч]);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДоставкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
	Если Не ЗначениеЗаполнено(Элементы.Доставки.ТекущиеДанные.Доставка) Тогда
		Если Не ОтменаРедактирования Тогда
			Сообщить("Не указана доставка!");
			//ОтменаРедактирования = Истина;
			Отказ = Истина;
		КонецеСли;
	КонецеСли;	
	
	//Если Не Отказ Тогда
	//	Если Элементы.Доставки.ТекущиеДанные.Доставка.ДоставкаЗавершена Тогда
	//		Если Не ОтменаРедактирования Тогда
	//			Сообщить("Доставка уже выполнена!");
	//			//ОтменаРедактирования = Истина;
	//			Отказ = Истина;
	//		КонецеСли;
	//	КонецеСли;	
	//КонецеСли;
	
	Если Не Отказ Тогда
		Струк = Новый Структура;
		Струк.Вставить("Доставка",  Элементы.Доставки.ТекущиеДанные.Доставка);
		НайСтр = Объект.Доставки.НайтиСтроки(Струк);
		Если НайСтр.Количество() > 1 Тогда
			Если Не ОтменаРедактирования Тогда
				Сообщить("Доставка " + Элементы.Доставки.ТекущиеДанные.Доставка + " уже вбита в документ!");
				Отказ = Истина;
			КонецеСли;
		КонецЕсли;	
	КонецеСли;
	Если Не Отказ Тогда
		ДоставкаПриИзмененииНаСервере(Элементы.Доставки.ТекущиеДанные);
	КонецеСли;	
КонецПроцедуры


&НаКлиенте
Процедура ДоставкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ДоставкиДоставкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ДоставкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не ЗначениеЗаполнено(Элементы.Доставки.ТекущиеДанные.Доставка) Тогда
		ТипСтр = "ДокументСсылка.РеализацияТоваровУслуг";
		Значение = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		ВыбратьТип = Ложь;
		КнопкаВыбора = Истина;
		
		Элемент = Элементы.ДоставкиДоставка;
		//Доставки.ТекущиеДанные.Доставка.Элемент;
		
		Элемент.ВыбиратьТип = ВыбратьТип;
		Элемент.КнопкаВыбора = КнопкаВыбора;
		
		Если ТипЗнч(Элементы.Доставки.ТекущиеДанные.Доставка) <> Тип(ТипСтр) Тогда
			Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтр);
			Элементы.Доставки.ТекущиеДанные.Доставка = Элемент.ОграничениеТипа.ПривестиЗначение(Значение);
		КонецЕсли;
	КонецеСли;	
КонецПроцедуры


&НаСервере
Процедура ДоставкаНайденаНаСервере(Знач ИдентификаторТекДанных)
	
	МасП = Новый Массив;
	МасП.Добавить("logist@strizh-logistic.ru");
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();	
	// Вставить содержимое обработчика.
	Если ИдентификаторТекДанных <> Неопределено Тогда
		ТекДанные = Объект.Доставки.НайтиПоИдентификатору(ИдентификаторТекДанных);
		Тек_ = ТекДанные;
		Если ТекДанные.ДоставкаНайдена = 0 Тогда
			
			Наб = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
			ТекВр = ТекущаяДата();
			Наб.Отбор.Период.Установить(ТекВр);
			Наб.Отбор.Рейс.Установить(Тек_.РейсV);
			Наб.Отбор.Заказ.Установить(Тек_.Доставка);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекВр;
			Нов.Рейс = Тек_.РейсV;
			Нов.Заказ = Тек_.Доставка;
			Нов.ЗаказНайден = Истина;
			Нов.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.НеНайденныеЗаказы;
			
			// Якурнов 06.08.2018 14:32:18
			Нов.ДокументРегистратор = Объект.Ссылка;
			
			Наб.Записать();
			
					
			Наб = РегистрыСведений.МестонахождениеЗаказа.СоздатьНаборЗаписей();
			Наб.Отбор.Период.Установить(ТекВр);
			Наб.Отбор.Заказ.Установить(Тек_.Доставка);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекВр;
			Нов.Рейс = Тек_.РейсV;
			Нов.Заказ = Тек_.Доставка;
			Нов.Местонахождение = Справочники.ВидыМестонахожденияЗаказа.УКурьера;
			Нов.Терминал = Объект.ТерминалДоставки;
			Нов.ДокументРегистратор = Объект.Ссылка;
			
			Наб.Записать();
			
			
			
			Р = Тек_.РейсV.ПолучитьОбъект();
			Р.Записать(РежимЗаписиДокумента.Запись);
			Р.Записать(РежимЗаписиДокумента.Проведение);
			
			ТекДанные.ДоставкаНайдена = 3;
			Элементы.ДоставкиДоставкаНайдена.Пометка = истина;
			Если Не Тек_.ДоставкаОтменена Или (Тек_.ДоставкаОтменена И Тек_.Рейс.Пустая()) Тогда
				ИсправитьДоставкуНаСервере(Соединение, Тек_, Ложь);
				lem.ОтправитьСообщение(МасП, "Доставки, вернувшиеся на планирование", "Доставка № " + СокрЛП(Тек_.Доставка.Номер) + " вернулась на планирование (склад таки нашёл товары)",,"Логистическая компания ""Стриж"""); 
			КонецеСли;	
		Иначе
			ТекДанные.ДоставкаНайдена = 0;
			Элементы.ДоставкиДоставкаНайдена.Пометка = Ложь;
			Если Не Тек_.ДоставкаОтменена Или (Тек_.ДоставкаОтменена И Тек_.Рейс.Пустая())  Тогда
				ИсправитьДоставкуНаСервере(Соединение, Тек_, Истина);
				//lem.ОтправитьСообщение(МасП, "Доставки, вернувшиеся на планирование", "Доставка № " + Тек_ + " вернулась на планирование (склад таки нашёл товары)",,"Логистическая компания ""Стриж"""); 
			КонецеСли;
			
			Наб = РегистрыСведений.МестонахождениеЗаказа.СоздатьНаборЗаписей();
			ТекВр = ТекущаяДата();
			Наб.Отбор.Период.Установить(ТекВр);
			Наб.Отбор.Заказ.Установить(Тек_.Доставка);
			
			Нов = Наб.Добавить();
			Нов.Период = ТекВр;
			Нов.Рейс = Тек_.РейсV;
			Нов.Заказ = Тек_.Доставка;
			Нов.Местонахождение = Справочники.ВидыМестонахожденияЗаказа.НаСкладе;
			Нов.Терминал = Объект.ТерминалДоставки;
			Нов.ДокументРегистратор = Объект.Ссылка;
			
			Наб.Записать();
		КонецеСли;	
	КонецЕСли;	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаНайдена(Команда)
	Если Не ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.Доставки.ТекущиеДанные = Неопределено Тогда
		ИдентификаторТекДанных = Неопределено;
	Иначе
		ИдентификаторТекДанных = Элементы.Доставки.ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	ДоставкаНайденаНаСервере(ИдентификаторТекДанных);
КонецПроцедуры




///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)
&НаКлиенте
// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()
&НаКлиенте
// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	//ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	//												Серия, Качество, Единица,
	//												Количество, ВалютаДокумента,
	//												Неопределено, мУказаниеСкладовВТЧ,
	//												ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	//Если      ИмяТекСтраницы = "Товары" Тогда
	//	ОбработкаПодбора(Товары, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
	//	ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
	//	ОбработкаПодбора(Услуги, СтруктураПодбора);
	//Иначе
	//	Предупреждение("На странице """
	//				   + ИмяТекСтраницы
	//				   + """ подбор номенклатуры не предусмотрен.");
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	//ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	//												Неопределено, Неопределено,
	//												Неопределено, 1,
	//												ВалютаДокумента, Номер,
	//												мУказаниеСкладовВТЧ,
	//												ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	//Если      ИмяТекСтраницы = "Товары" Тогда
	//	ОбработкаПодбора(Товары, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
	//	ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	//ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
	//	ОбработкаПодбора(Услуги, СтруктураПодбора);
	//Иначе
	//	Предупреждение("На странице """
	//				   + ИмяТекСтраницы
	//				   + """ подбор номенклатуры не предусмотрен.");
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()
&НаКлиенте
// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	//Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
	//	Возврат Результат;
	//КонецЕсли;

	//ДисконтнаяКарта = Карта;
	//ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()
&НаКлиенте
// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()
&НаКлиенте
Функция СШКЗаказы(Стр) Экспорт
	
	
	Струк = Новый Структура;
	Струк.Вставить("Доставка", Стр.Реализация);
	Най = Объект.Доставки.НайтиСтроки(Струк);
	//Найти(Стр.Реализация);
	если Най.Количество() <> 0 Тогда
		Сообщить("Заказ " + СокрЛП(Стр.Номер) + " уже занесен в документ!");
		Элементы.Доставки.ТекущаяСтрока = Най[0];
	Иначе
		Нов = Объект.Доставки.Добавить();
		Нов.Доставка = Стр.Реализация;
		Нов.Рейс = Стр.Рейс;
		Нов.ДоставкаОтменена = Истина;
		Элементы.Доставки.ТекущаяСтрока = Нов.ПолучитьИдентификатор();
		ДоставкаПриИзмененииНаСервере(Элементы.Доставки.ТекущиеДанные);
		
		Струк = Новый Структура;
		Струк.Вставить("Доставка", Стр.Реализация);
		Най2 = Объект.Товары.НайтиСтроки(Струк);
		Для Сч = 0 По Най2.количество() - 1 Цикл
			Най2[Сч].Количество = 0;
		КонецЦикла;	
		
	КонецеСли;	
	Возврат Истина;
КонецФункции	
&НаКлиенте
// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуНаСервере(ИдСтроки, ЕстьНаТСД, Режим = 1)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	РеализацияТоваровУслуг.Ссылка КАК Док,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ЗагрузкаСТСДШтрихкоды.Ссылка, ИСТИНА) = ИСТИНА
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ КАК ЕстьНаТСД
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
	            |		ПО (ВЫРАЗИТЬ(ЗагрузкаСТСДШтрихкоды.Заказ КАК Документ.РеализацияТоваровУслуг).Ссылка = РеализацияТоваровУслуг.Ссылка)
	            |			И (ЗагрузкаСТСДШтрихкоды.Ссылка.Дата >= &Дата)
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Номер = &Номер";
	Зап.УстановитьПараметр("Номер", Формат(НомерЗаказа, "ЧГ="));			
	Зап.УстановитьПараметр("Дата", Объект.Дата - 86400*30);			
	Рез = Зап.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		ЕстьНаТСД = Рез.ЕстьНаТСД;
		Если Не ЕстьНаТСД Тогда
			Нов = Объект.Доставки.Добавить();
			Нов.Доставка = Рез.Док;
			ИдСтроки = Нов.ПолучитьИдентификатор();
			Возврат истина;
		Иначе
			если Режим = 2 Тогда
				Нов = Объект.Доставки.Добавить();
				Нов.Доставка = Рез.Док;
				ИдСтроки = Нов.ПолучитьИдентификатор();
			КонецеСли;	
			Возврат истина;
		КонецеСли;		
	КонецеСли;	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Процедура НомерЗаказаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если НомерЗаказа = 0 Тогда
		Возврат;
	КонецеСли;	
	ИдСтр = "";
	ЕстьНаТСД = Ложь;
	СостояниеЗаказа = "";
	Если ДобавитьСтрокуНаСервере(ИдСтр, ЕстьНаТСД, РежимУчета) Тогда
		Если Не ЕстьНаТСД Тогда
			Стр = Объект.Доставки.НайтиПоИдентификатору(ИдСтр);
			ДоставкаПриИзмененииНаСервере(Стр);
			НомерЗаказа = 0;
		Иначе
			СостояниеЗаказа = "ЕСТЬ НА ТСД";
			Если РежимУчета = 2 Тогда
				Стр = Объект.Доставки.НайтиПоИдентификатору(ИдСтр);
				ДоставкаПриИзмененииНаСервере(Стр);
				НомерЗаказа = 0;
			КонецеСли;	
		КонецеСли;	
	Иначе
		Сообщить("не найден номер заказа!", СтатусСообщения.Важное);
	КонецеСли;	
КонецПроцедуры



