
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьСтандартныйПериод();
	
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	Список.Параметры.УстановитьЗначениеПараметра("ОкончаниеПериода", Период.ДатаОкончания);
	Список.Параметры.УстановитьЗначениеПараметра("Организация", Организация);	
	
	Элементы.Платежи.Видимость = Ложь;
	Платежи.Параметры.УстановитьЗначениеПараметра("ЗаписьРасхода", ТекущаяСтрока);

КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	Если Не (ЗначениеЗаполнено(Период.ДатаНачала) И ЗначениеЗаполнено(Период.ДатаОкончания)) Тогда
		Сообщить("Период должен быть указан!");
		УстановитьСтандартныйПериод();
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	Список.Параметры.УстановитьЗначениеПараметра("ОкончаниеПериода", Период.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ПериодПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныйПериод()
	
	Сейчас = ТекущаяДата();
	
	Период.ДатаНачала = НачалоМесяца(Сейчас);
	Период.ДатаОкончания = КонецМесяца(Сейчас);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Список.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Если ТекущаяСтрока <> Неопределено Тогда
			Элементы.СписокКонтекстноеМенюИзменитьСостояние.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюИзменитьСостояние.Заголовок = "Изменить состояние";
			НовоеСостояние = Неопределено;
			ТекущаяСтрока = Неопределено;
			
			Элементы.СписокГруппа1.Доступность = Ложь;
			Если Элементы.Платежи.Видимость Тогда
				ПодключитьОбработчикОжидания("ОбновитьПлатежи", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока <> ТекСтрока Тогда
		ТекущаяСтрока = ТекСтрока;
		
		ОписаниеСостояния = ПолучитьТекущееСостояние(ТекущаяСтрока);
		Элементы.СписокКонтекстноеМенюИзменитьСостояние.Доступность = ОписаниеСостояния.Доступность;
		Элементы.СписокКонтекстноеМенюИзменитьСостояние.Заголовок = ОписаниеСостояния.Заголовок;
		НовоеСостояние = ОписаниеСостояния.НовоеСостояние;
		
		Элементы.СписокГруппа1.Доступность = Истина;
		Если Элементы.Платежи.Видимость Тогда
			ПодключитьОбработчикОжидания("ОбновитьПлатежи", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущееСостояние(Знач Ссылка)
	
	ОписаниеСостояния = Новый Структура("Доступность,Заголовок,НовоеСостояние");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР ЕСТЬNULL(упрСостоянияЗаписейРасходовСрезПоследних.СостояниеЗаписиРасходов, ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый))
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый)
	|			ТОГДА упрЗаписьРасходов.Проведен
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Исполнено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Доступность,
	|	ВЫБОР ЕСТЬNULL(упрСостоянияЗаписейРасходовСрезПоследних.СостояниеЗаписиРасходов, ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый))
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый)
	|			ТОГДА ""Перевести в """"Исполнено""""""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Исполнено)
	|			ТОГДА ""Перевести в """"Новый""""""
	|		ИНАЧЕ ""Изменить состояние""
	|	КОНЕЦ КАК Заголовок,
	|	ВЫБОР ЕСТЬNULL(упрСостоянияЗаписейРасходовСрезПоследних.СостояниеЗаписиРасходов, ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый))
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Исполнено)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Исполнено)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НовоеСостояние
	|ИЗ
	|	Документ.упрЗаписьРасходов КАК упрЗаписьРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.упрСостоянияЗаписейРасходов.СрезПоследних(, ) КАК упрСостоянияЗаписейРасходовСрезПоследних
	|		ПО (упрСостоянияЗаписейРасходовСрезПоследних.ЗаписьРасходов = &Ссылка)
	|ГДЕ
	|	упрЗаписьРасходов.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ЗаполнитьЗначенияСвойств(ОписаниеСостояния, Выборка);
	
	Возврат ОписаниеСостояния;
	
КонецФункции

&НаСервере
Процедура ИзменитьСостояниеНаСервере(Знач Ссылка)
	
	//если тек состояние и новое равны, ничего не меняется
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НовоеСостояние", НовоеСостояние);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(упрСостоянияЗаписейРасходовСрезПоследних.СостояниеЗаписиРасходов, ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый)) = &НовоеСостояние
	|			ТОГДА ""Документ уже в этом состоянии""
	|		КОГДА &НовоеСостояние = ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Исполнено)
	|				И НЕ упрЗаписьРасходов.Проведен
	|			ТОГДА ""Документ должен быть проведен!""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТекстОшибки
	|ИЗ
	|	Документ.упрЗаписьРасходов КАК упрЗаписьРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.упрСостоянияЗаписейРасходов.СрезПоследних(, ) КАК упрСостоянияЗаписейРасходовСрезПоследних
	|		ПО (упрСостоянияЗаписейРасходовСрезПоследних.ЗаписьРасходов = &Ссылка)
	|ГДЕ
	|	упрЗаписьРасходов.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если СтрДлина(Выборка.ТекстОшибки) Тогда
		Сообщить(Выборка.ТекстОшибки);
	Иначе
		ЗаписьРегистра = РегистрыСведений.упрСостоянияЗаписейРасходов.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Период = ТекущаяДата();
		ЗаписьРегистра.ЗаписьРасходов = Ссылка;
		ЗаписьРегистра.СостояниеЗаписиРасходов = НовоеСостояние;
		ЗаписьРегистра.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		ЗаписьРегистра.Записать();
	КонецЕсли;
	
	//ТекКолонка = Элементы.Список.ТекущийЭлемент;
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = ТекущаяСтрока;
	
	ОписаниеСостояния = ПолучитьТекущееСостояние(ТекущаяСтрока);
	Элементы.СписокКонтекстноеМенюИзменитьСостояние.Доступность = ОписаниеСостояния.Доступность;
	Элементы.СписокКонтекстноеМенюИзменитьСостояние.Заголовок = ОписаниеСостояния.Заголовок;
	НовоеСостояние = ОписаниеСостояния.НовоеСостояние;
	
	//Элементы.Список.ТекущийЭлемент = ТекКолонка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояние(Команда)
	
	ИзменитьСостояниеНаСервере(Элементы.Список.ТекущиеДанные.Ссылка);
	//Элементы.Список.ТекущаяСтрока = ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФорму("Документ.упрЗаписьРасходов.ФормаОбъекта", Новый Структура("Ключ", ВыбраннаяСтрока), Элемент,,,, Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока)));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ВидПериодаМесяц = Перечисления.упрВидыПериодовУчета.Месяц;
	
	Для Каждого СтрокаСписка Из Строки Цикл
		ТекущаяСтрока = Строки[СтрокаСписка.Ключ];
		ДанныеСтроки = ТекущаяСтрока.Данные;
		//ОформлениеСтроки = ТекущаяСтрока.Оформление;
		
		Если ДанныеСтроки.ВидПериодаУчета = ВидПериодаМесяц Тогда
			ДанныеСтроки.ПериодУчета = Формат(ДанныеСтроки.НачалоПериодаУчета, "ДФ='MMMM yyyy'");
		Иначе
			ДанныеСтроки.ПериодУчета = Формат(ДанныеСтроки.НачалоПериодаУчета, "ДФ='MMMM yyyy'") + " - " + Формат(ДанныеСтроки.ОкончаниеПериодаУчета, "ДФ='MMMM yyyy'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭлементСписка(Команда)
	
	ТипЭлементОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
	ТипРегиональныеТерминалы = Тип("СправочникСсылка.РегиональныеТерминалы");
	
	ДанныеЗаполнения = Новый Структура("Организация", Организация);
	Для Каждого ЭлементОтбора Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = ТипЭлементОтбора Тогда
			Если ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ТипЭлемента = ТипЗнч(ЭлементОтбора.ПравоеЗначение);
				Если ТипЭлемента = ТипРегиональныеТерминалы Тогда
					ДанныеЗаполнения.Вставить("Регион", ЭлементОтбора.ПравоеЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элемент = Элементы.Список;
	
	ОткрытьФорму("Документ.упрЗаписьРасходов.ФормаОбъекта", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), Элемент,,,, Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтрока", Элементы.Список.ТекущаяСтрока)));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭлементКопированиеТекущего(Команда)
	
	Элемент = Элементы.Список;
	
	ОткрытьФорму("Документ.упрЗаписьРасходов.ФормаОбъекта", Новый Структура("ЗначениеКопирования", Элементы.Список.ТекущаяСтрока), Элемент,,,, Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтрока", Элементы.Список.ТекущаяСтрока)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИлиОткрытьТекущийЭлемент(Команда)
	
	Элемент = Элементы.Список;
	
	ОткрытьФорму("Документ.упрЗаписьРасходов.ФормаОбъекта", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока), Элемент,,,, Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтрока", Элементы.Список.ТекущаяСтрока)));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПометкуУдаления(Знач Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	упрЗаписьРасходов.ПометкаУдаления КАК ПометкаУдаления,
	|	упрЗаписьРасходов.Представление КАК Представление
	|ИЗ
	|	Документ.упрЗаписьРасходов КАК упрЗаписьРасходов
	|ГДЕ
	|	упрЗаписьРасходов.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Новый Структура("ПометкаУдаления,Представление", Выборка.ПометкаУдаления, Выборка.Представление);
	
КонецФункции

&НаКлиенте
Процедура ПометитьТекущийЭлементНаУдалениеСнятьПометку(Команда)
	
	ПометкаУдаления = ПолучитьПометкуУдаления(Элементы.Список.ТекущаяСтрока);
	ПометкаУдаления.Вставить("Ссылка", Элементы.Список.ТекущаяСтрока);
	
	Если ПометкаУдаления.ПометкаУдаления Тогда
		ТекстВопроса = "Снять с " + ПометкаУдаления.Представление + " пометку удаления?";
	Иначе
		ТекстВопроса = "Пометить " + ПометкаУдаления.Представление + " на удаление?";
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПометитьТекущийЭлементНаУдалениеСнятьПометкуЗавершение", ЭтотОбъект, ПометкаУдаления), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьТекущийЭлементНаУдалениеСнятьПометкуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьТекущийЭлементНаУдалениеСнятьПометкуНаСервере(ДополнительныеПараметры);
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = ДополнительныеПараметры.Ссылка;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ПометитьТекущийЭлементНаУдалениеСнятьПометкуНаСервере(ДополнительныеПараметры)
	
	Документ = ДополнительныеПараметры.Ссылка.ПолучитьОбъект();
	Документ.УстановитьПометкуУдаления(Не ДополнительныеПараметры.ПометкаУдаления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьПлатежноеПоручениеНаСервере(Знач ЗаписьРасхода)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаписьРасхода", ЗаписьРасхода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВЗ_Платежи.СуммаПлатежа, 0) КАК СуммаПлатежей,
	|	упрЗаписьРасходов.СуммаПлатежа КАК СуммаПлатежа,
	|	упрЗаписьРасходов.Организация КАК Организация,
	|	упрЗаписьРасходов.Контрагент КАК Контрагент,
	|	упрЗаписьРасходов.СтавкаНДС КАК СтавкаНДС,
	|	ВЗ_ИсточникиДанных.Ссылка КАК ИсточникДанных,
	|	упрЗаписьРасходов.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	Документ.упрЗаписьРасходов КАК упрЗаписьРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(упрСостоянияПлатежейСрезПоследних.Платеж.СуммаПлатежа) КАК СуммаПлатежа
	|		ИЗ
	|			РегистрСведений.упрСостоянияПлатежей.СрезПоследних(, ) КАК упрСостоянияПлатежейСрезПоследних
	|		ГДЕ
	|			упрСостоянияПлатежейСрезПоследних.Платеж.ЗаписьРасхода = &ЗаписьРасхода
	|					И НЕ упрСостоянияПлатежейСрезПоследних.Платеж.ПометкаУдаления
	|					И НЕ упрСостоянияПлатежейСрезПоследних.СостояниеПлатежа В (ЗНАЧЕНИЕ(Перечисление.упрСостоянияПлатежей.Отклонено), ЗНАЧЕНИЕ(Перечисление.упрСостоянияПлатежей.ПомеченоНаУдаление))) КАК ВЗ_Платежи
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИсточникиДанныхБазы1С.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.упрЗаписьРасходов КАК упрЗаписьРасходов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхБазы1С КАК ИсточникиДанныхБазы1С
	|				ПО (упрЗаписьРасходов.Ссылка = &ЗаписьРасхода)
	|					И упрЗаписьРасходов.Организация = ИсточникиДанныхБазы1С.Владелец
	|					И (ИсточникиДанныхБазы1С.ТипКонфигурации = ЗНАЧЕНИЕ(Перечисление.ТипыКонфигураций1С.Бухгалтерия_3_0))
	|					И (НЕ ИсточникиДанныхБазы1С.ПометкаУдаления)) КАК ВЗ_ИсточникиДанных
	|		ПО (ИСТИНА)
	|ГДЕ
	|	упрЗаписьРасходов.Ссылка = &ЗаписьРасхода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.СуммаПлатежей >= Выборка.СуммаПлатежа Тогда
		Сообщить("Сумма платежей платежных поручений " + Выборка.СуммаПлатежей + " >= суммы платежа записи расхода " + Выборка.СуммаПлатежа);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Выборка.ИсточникДанных) Тогда
		Сообщить("Не определена база источник данных платежных поручений");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("СуммаПлатежаМаксимальная,ЗаписьРасхода,Организация,Контрагент,СтавкаНДС,ИсточникДанных,НазначениеПлатежа", Выборка.СуммаПлатежа - Выборка.СуммаПлатежей, ЗаписьРасхода, Выборка.Организация, Выборка.Контрагент, Выборка.СтавкаНДС, Выборка.ИсточникДанных, Выборка.НазначениеПлатежа);
	
КонецФункции

&НаКлиенте
Процедура СоздатьПлатежноеПоручение(Команда)
	
	ЗаписьРасхода = Элементы.Список.ТекущаяСтрока;
	Если ЗаписьРасхода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = СоздатьПлатежноеПоручениеНаСервере(ЗаписьРасхода);
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.упрПлатежноеПоручение.Форма.ФормаВводаНовогоДокумента", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПериодПриИзмененииНаСервере();
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СписокПлатежныхПорученийНаСервере()
	
	Элементы.СписокСписокПлатежныхПоручений.Пометка = Не Элементы.СписокСписокПлатежныхПоручений.Пометка;
	Элементы.Платежи.Видимость = Элементы.СписокСписокПлатежныхПоручений.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныхПоручений(Команда)
	
	СписокПлатежныхПорученийНаСервере();
	Если Элементы.Платежи.Видимость Тогда
		ПодключитьОбработчикОжидания("ОбновитьПлатежи", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПлатежи() Экспорт
	
	Платежи.Параметры.УстановитьЗначениеПараметра("ЗаписьРасхода", ТекущаяСтрока);
	
КонецПроцедуры

