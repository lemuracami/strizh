
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сейчас = ТекущаяДата();
		ЗначениеКопирования = Неопределено;
		Если Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования) И Не ЗначениеКопирования.Пустая() Тогда
			Если НачалоМесяца(ОбщегоНазначения.ПолучитьРеквизитОбъекта(ЗначениеКопирования, "Дата")) <> НачалоМесяца(Сейчас) Тогда
				Объект.НачалоПериодаУчета = Неопределено;
				Объект.ОкончаниеПериодаУчета = Неопределено;
				Объект.ПериодыУчета.Очистить();
			КонецЕсли;
		Иначе
			Объект.Дата = Сейчас;
			Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.Месяц;
		КонецЕсли;
		ДанныеЗаполнения = Неопределено;
		Если Параметры.Свойство("ДанныеЗаполнения", ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
		КонецЕсли;
		Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ОбновитьСостояние();
	
	УстановитьВидимостьПериодУчета();
	
	ОтобразитьПериод();
	
	ЗаполнитьСпискиВыбораПериодов();
	
	СуммаПлатежаДоИзменения = Объект.СуммаПлатежа;
	СтавкаНДСДоИзменения = Объект.СтавкаНДС;
	НачалоПериодаУчетаДоИзменения = Объект.НачалоПериодаУчета;
	ОкончаниеПериодаУчетаДоИзменения = Объект.ОкончаниеПериодаУчета;
	ДатаДоИзменения = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСостояние(Изменение = Ложь)
	
	Если Объект.Ссылка.Пустая() Тогда
		Состояние = Перечисления.упрСостоянияЗаписейРасходов.Новый;
		Элементы.ИзменитьСостояние.Доступность = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(упрСостоянияЗаписейРасходовСрезПоследних.СостояниеЗаписиРасходов, ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый)) КАК Состояние
		|ИЗ
		|	Документ.упрЗаписьРасходов КАК упрЗаписьРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.упрСостоянияЗаписейРасходов.СрезПоследних(, ) КАК упрСостоянияЗаписейРасходовСрезПоследних
		|		ПО (упрСостоянияЗаписейРасходовСрезПоследних.ЗаписьРасходов = &Ссылка)
		|ГДЕ
		|	упрЗаписьРасходов.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Состояние = Выборка.Состояние;
		Элементы.ИзменитьСостояние.Доступность = Истина;
	КонецЕсли;
	
	Если Состояние = Перечисления.упрСостоянияЗаписейРасходов.Новый Тогда
		Если Изменение И Не Объект.Проведен Тогда
			Сообщить("Документ должен быть проведен!");
			НовоеСостояние = Неопределено;
		Иначе
			НовоеСостояние = Перечисления.упрСостоянияЗаписейРасходов.Исполнено;
		КонецЕсли;
	ИначеЕсли Состояние = Перечисления.упрСостоянияЗаписейРасходов.Исполнено Тогда
		НовоеСостояние = Перечисления.упрСостоянияЗаписейРасходов.Новый;
	Иначе
		НовоеСостояние = Неопределено;
	КонецЕсли;
	
	Возврат НовоеСостояние;
	
КонецФункции

&НаСервере
Процедура ИзменитьСостояниеНаСервере(Знач НовоеСостояние)
	
	//если тек состояние и новое равны, ничего не меняется
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НовоеСостояние", НовоеСостояние);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(упрСостоянияЗаписейРасходовСрезПоследних.СостояниеЗаписиРасходов, ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Новый)) = &НовоеСостояние
	|			ТОГДА ""Документ уже в этом состоянии""
	|		КОГДА &НовоеСостояние = ЗНАЧЕНИЕ(Перечисление.упрСостоянияЗаписейРасходов.Исполнено)
	|				И НЕ упрЗаписьРасходов.Проведен
	|			ТОГДА ""Документ должен быть проведен!""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТекстОшибки
	|ИЗ
	|	Документ.упрЗаписьРасходов КАК упрЗаписьРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.упрСостоянияЗаписейРасходов.СрезПоследних(, ) КАК упрСостоянияЗаписейРасходовСрезПоследних
	|		ПО (упрСостоянияЗаписейРасходовСрезПоследних.ЗаписьРасходов = &Ссылка)
	|ГДЕ
	|	упрЗаписьРасходов.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если СтрДлина(Выборка.ТекстОшибки) Тогда
		Сообщить(Выборка.ТекстОшибки);
	Иначе
		ЗаписьРегистра = РегистрыСведений.упрСостоянияЗаписейРасходов.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Период = ТекущаяДата();
		ЗаписьРегистра.ЗаписьРасходов = Объект.Ссылка;
		ЗаписьРегистра.СостояниеЗаписиРасходов = НовоеСостояние;
		ЗаписьРегистра.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		ЗаписьРегистра.Записать();
	КонецЕсли;
	
	ОбновитьСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояние(Команда)
	
	НовоеСостояние = ОбновитьСостояние(Истина);
	
	Если НовоеСостояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьСостояниеЗавершение", ЭтотОбъект, Новый Структура("НовоеСостояние", НовоеСостояние)), "Изменить состояние на " + НовоеСостояние + "?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеНаСервере(ДополнительныеПараметры.НовоеСостояние);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаПриИзменении(Элемент)
	
	ВычислитьСуммуКУчету();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ВычислитьСуммуКУчету();
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСуммуКУчету()
	
	СуммаКУчету = ПолучитьСуммуКУчету(Объект.СуммаПлатежа, Объект.СтавкаНДС);
	Если Не (СуммаКУчету - Объект.СуммаКУчету) Тогда
		ЗапомнитьИзмененныеРеквизиты();
		Возврат;
	КонецЕсли;
	
	Если Объект.ПериодыУчета.Количество() И (СуммаКУчету - Объект.ПериодыУчета.Итог("Сумма")) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВычислитьСуммуКУчетуЗавершение", ЭтотОбъект, Новый Структура("СуммаКУчету", СуммаКУчету)), "Данные в таблице разбивки расходов по месяцам не совпадают со значением суммы к учету, при продолжении она будет пересчитана. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.СуммаКУчету = СуммаКУчету;
		ЗапомнитьИзмененныеРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСуммуКУчетуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ВосстановитьИзмененныеРеквизиты();
		Возврат;
	КонецЕсли;
	
	Объект.СуммаКУчету = ДополнительныеПараметры.СуммаКУчету;
	ЗапомнитьИзмененныеРеквизиты();
	
	РассчитатьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьИзмененныеРеквизиты()
	
	Объект.СуммаПлатежа = СуммаПлатежаДоИзменения;
	Объект.СтавкаНДС = СтавкаНДСДоИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьИзмененныеРеквизиты()

	СуммаПлатежаДоИзменения = Объект.СуммаПлатежа;
	СтавкаНДСДоИзменения = Объект.СтавкаНДС;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммуКУчету(Знач СуммаПлатежа, Знач СтавкаНДС)
	
	Если СтавкаНДС.Пустая() Или СтавкаНДС = Справочники.СтавкиНДСФЗ54.БезНДС Тогда
		СуммаКУчету = СуммаПлатежа;
	Иначе
		СуммаКУчету = Окр(СуммаПлатежа/(1 + ОбщегоНазначения.ПолучитьРеквизитОбъекта(СтавкаНДС, "КодВАдминке")/100), 2);
	КонецЕсли;
	
	Возврат СуммаКУчету;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПериодУчета(Изменение = Ложь)
	
	Если Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.Месяц Тогда
		Если Изменение Тогда
			Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Тогда
				Объект.ОкончаниеПериодаУчета = КонецМесяца(Объект.НачалоПериодаУчета);
			Иначе
				Объект.ОкончаниеПериодаУчета = Неопределено;
			КонецЕсли;
			Объект.ПериодыУчета.Очистить();
		КонецЕсли;
		//Элементы.НачалоПериодаУчета.Видимость = Истина;
		//Элементы.ОкончаниеПериодаУчета.Видимость = Ложь;
		Элементы.ПериодыУчета.Видимость = Ложь;
	ИначеЕсли Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.РазбивкаПоМесяцам Тогда
		Если Изменение Тогда
			Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Тогда
				Объект.ОкончаниеПериодаУчета = КонецМесяца(ДобавитьМесяц(Объект.НачалоПериодаУчета, 1));
			КонецЕсли;
		КонецЕсли;
		//Элементы.НачалоПериодаУчета.Видимость = Истина;
		//Элементы.ОкончаниеПериодаУчета.Видимость = Истина;
		Элементы.ПериодыУчета.Видимость = Истина;
	Иначе
		//Элементы.НачалоПериодаУчета.Видимость = Ложь;
		//Элементы.ОкончаниеПериодаУчета.Видимость = Ложь;
		Элементы.ПериодыУчета.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидПериодаУчетаПриИзмененииНаСервере()
	
	УстановитьВидимостьПериодУчета(Истина);
	
	ОтобразитьПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПериодаУчетаПриИзменении(Элемент)
	ВидПериодаУчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НачалоПериодаУчетаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Тогда
		Объект.НачалоПериодаУчета = НачалоМесяца(Объект.НачалоПериодаУчета);
		МинимальноеНачалоПериода = ДобавитьМесяц(НачалоМесяца(Объект.Дата), 1);
		Если Объект.НачалоПериодаУчета < МинимальноеНачалоПериода Тогда
			Объект.НачалоПериодаУчета = МинимальноеНачалоПериода;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.Месяц Тогда
		Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Тогда
			Объект.ОкончаниеПериодаУчета = КонецМесяца(Объект.НачалоПериодаУчета);
		Иначе
			Объект.ОкончаниеПериодаУчета = Неопределено;
		КонецЕсли;
	ИначеЕсли Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.РазбивкаПоМесяцам Тогда
		Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Тогда
			МинимальноеОкончаниениеПериода = КонецМесяца(ДобавитьМесяц(Объект.НачалоПериодаУчета, 1));
			Если Объект.ОкончаниеПериодаУчета < МинимальноеОкончаниениеПериода Тогда
				Объект.ОкончаниеПериодаУчета = МинимальноеОкончаниениеПериода;
			КонецЕсли;
		Иначе
			Объект.ОкончаниеПериодаУчета = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаУчетаПриИзменении(Элемент)
	НачалоПериодаУчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОкончаниеПериодаУчетаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеПериодаУчета) Тогда
		Если Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.Месяц Тогда
			Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Тогда
				Если Объект.ОкончаниеПериодаУчета >= Объект.НачалоПериодаУчета Тогда
					Объект.ОкончаниеПериодаУчета = КонецМесяца(Объект.ОкончаниеПериодаУчета);
				Иначе
					Объект.ОкончаниеПериодаУчета = КонецМесяца(Объект.НачалоПериодаУчета);
				КонецЕсли;
			Иначе
				Объект.ОкончаниеПериодаУчета = КонецМесяца(Объект.ОкончаниеПериодаУчета);
			КонецЕсли;
		ИначеЕсли Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.РазбивкаПоМесяцам Тогда
			Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Тогда
				МинимальноеОкончаниениеПериода = КонецМесяца(ДобавитьМесяц(Объект.НачалоПериодаУчета, 1));
				Если Объект.ОкончаниеПериодаУчета >= МинимальноеОкончаниениеПериода Тогда
					Объект.ОкончаниеПериодаУчета = КонецМесяца(Объект.ОкончаниеПериодаУчета);
				Иначе
					Объект.ОкончаниеПериодаУчета = МинимальноеОкончаниениеПериода;
				КонецЕсли;
			Иначе
				Объект.ОкончаниеПериодаУчета = КонецМесяца(Объект.ОкончаниеПериодаУчета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаУчетаПриИзменении(Элемент)
	ОкончаниеПериодаУчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПериод()
	
	Если Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.Месяц Тогда
		НачПериода = ?(ЗначениеЗаполнено(Объект.НачалоПериодаУчета), Формат(Объект.НачалоПериодаУчета, "ДФ='MMMM yyyy'"), "");
		Элементы.НачПериода.Заголовок = "Период учета";
		Элементы.КонПериода.Видимость = Ложь;
	Иначе
		НачПериода = ?(ЗначениеЗаполнено(Объект.НачалоПериодаУчета), Формат(Объект.НачалоПериодаУчета, "ДФ='MMMM yyyy'"), "");
		КонПериода = ?(ЗначениеЗаполнено(Объект.ОкончаниеПериодаУчета), Формат(Объект.ОкончаниеПериодаУчета, "ДФ='MMMM yyyy'"), "");
		Элементы.НачПериода.Заголовок = "Период учета с";
		Элементы.КонПериода.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Объект.НачалоПериодаУчета = Неопределено;
	Объект.ОкончаниеПериодаУчета = Неопределено;
	Объект.ПериодыУчета.Очистить();
	
	ОтобразитьПериод();
	
	ЗаполнитьСпискиВыбораПериодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Или ЗначениеЗаполнено(Объект.ОкончаниеПериодаУчета) Тогда
		Если Объект.ПериодыУчета.Количество() Тогда
			ТекстВопроса = "При изменении Даты документа, Период учета и таблица разбивки расходов будут очищены. Продолжить?";
		Иначе
			ТекстВопроса = "При изменении Даты документа, Период учета будет очищен. Продолжить?";
		КонецЕсли;
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Объект.Дата = ДатаДоИзменения;
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораПериодов()
	
	СписокВыбораНачало = Элементы.НачПериода.СписокВыбора;
	СписокВыбораКонец = Элементы.КонПериода.СписокВыбора;
	
	СписокВыбораНачало.Очистить();
	СписокВыбораКонец.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ТекПериод = НачалоМесяца(Объект.Дата);
	Для н = 1 По 18 Цикл
		ТекПериод = ДобавитьМесяц(ТекПериод, 1);
		ПредставлениеМесяца = Формат(ТекПериод, "ДФ='MMMM yyyy'");
		СписокВыбораНачало.Добавить(ПредставлениеМесяца);
		СписокВыбораКонец.Добавить(ПредставлениеМесяца);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	НачПериодаОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
	ПроверкаПериодовУчета();
	
КонецПроцедуры

&НаСервере
Процедура НачПериодаОбработкаВыбораНаСервере(Знач ВыбранноеЗначение)
	
	Объект.НачалоПериодаУчета = ПолучитьПериодПоПредставлению(ВыбранноеЗначение);
	НачалоПериодаУчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПериодПоПредставлению(Знач Представление)
	
	Стр = Лев(Представление, 3);
	Если Стр = "Янв" Тогда
		Мес = 1;
	ИначеЕсли Стр = "Фев" Тогда
		Мес = 2;
	ИначеЕсли Стр = "Мар" Тогда
		Мес = 3;
	ИначеЕсли Стр = "Апр" Тогда
		Мес = 4;
	ИначеЕсли Стр = "Май" Тогда
		Мес = 5;
	ИначеЕсли Стр = "Июн" Тогда
		Мес = 6;
	ИначеЕсли Стр = "Июл" Тогда
		Мес = 7;
	ИначеЕсли Стр = "Авг" Тогда
		Мес = 8;
	ИначеЕсли Стр = "Сен" Тогда
		Мес = 9;
	ИначеЕсли Стр = "Окт" Тогда
		Мес = 10;
	ИначеЕсли Стр = "Ноя" Тогда
		Мес = 11;
	ИначеЕсли Стр = "Дек" Тогда
		Мес = 12;
	Иначе
		Возврат '00010101';
	Конецесли;
	
	Стр = Прав(Представление, 4);
	Попытка
		Год = Число(Стр);
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
	Возврат Дата(Год, Мес, 1);
	
КонецФункции

&НаКлиенте
Процедура КонПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	КонПериодаОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
	ПроверкаПериодовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаОбработкаВыбораНаСервере(Знач ВыбранноеЗначение)
	
	Объект.ОкончаниеПериодаУчета = ПолучитьПериодПоПредставлению(ВыбранноеЗначение);
	ОкончаниеПериодаУчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПериодовУчета()
	
	КоличествоПериодов = Объект.ПериодыУчета.Количество();
	Если КоличествоПериодов Тогда
		Если Объект.НачалоПериодаУчета <> Объект.ПериодыУчета[0].ПериодУчета Или НачалоМесяца(Объект.ОкончаниеПериодаУчета) <> Объект.ПериодыУчета[КоличествоПериодов - 1].ПериодУчета Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаПериодовУчетаЗавершение", ЭтотОбъект), "Периоды в таблице разбивки расходов по месяцам не совпадают с периодом, при продолжении она будет пересчитана. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	Иначе
		ЗапомнитьПериод();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьПериод()
	
	НачалоПериодаУчетаДоИзменения = Объект.НачалоПериодаУчета;
	ОкончаниеПериодаУчетаДоИзменения = Объект.ОкончаниеПериодаУчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПериодовУчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ВосстановитьПериод();
		ОтобразитьПериод();
		Возврат;
	КонецЕсли;
	
	РассчитатьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПериод()
	
	Объект.НачалоПериодаУчета = НачалоПериодаУчетаДоИзменения;
	Объект.ОкончаниеПериодаУчета = ОкончаниеПериодаУчетаДоИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.НачалоПериодаУчета = Неопределено;
	НачалоПериодаУчетаПриИзмененииНаСервере();
	
	ПроверкаПериодовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ОкончаниеПериодаУчета = Неопределено;
	ОкончаниеПериодаУчетаПриИзмененииНаСервере();
	
	ПроверкаПериодовУчета();
	
КонецПроцедуры

&НаСервере
Процедура НачПериодаРегулированиеНаСервере(Направление)
	
	Объект.НачалоПериодаУчета = ДобавитьМесяц(Объект.НачалоПериодаУчета, Направление);
	НачалоПериодаУчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Модифицированность = Истина;	
	
	Если ЗначениеЗаполнено(Объект.НачалоПериодаУчета) Тогда
		НачПериодаРегулированиеНаСервере(Направление);
		
		ПроверкаПериодовУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонПериодаРегулированиеНаСервере(Направление)
	
	Объект.ОкончаниеПериодаУчета = ДобавитьМесяц(НачалоМесяца(Объект.ОкончаниеПериодаУчета), Направление);
	ОкончаниеПериодаУчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Модифицированность = Истина;	
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеПериодаУчета) Тогда
		КонПериодаРегулированиеНаСервере(Направление);
		
		ПроверкаПериодовУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПериодыУчета(Команда)
	
	Если Объект.ПериодыУчета.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПериодыУчетаЗавершение", ЭтотОбъект), "Таблица разбивки расходов по месяцам не пустая, при продолжении она будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьПериоды();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПериодыУчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПериоды()
	
	РассчитатьПериодыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПериодыНаСервере()
	
	Объект.ПериодыУчета.Очистить();
	
	Если Не (ЗначениеЗаполнено(Объект.Дата) И ЗначениеЗаполнено(Объект.НачалоПериодаУчета) И ЗначениеЗаполнено(Объект.ОкончаниеПериодаУчета)) Тогда
		Сообщить("Период и Дата документа должны быть указаны!");
		Возврат;
	КонецЕсли;
	
	Если Не (НачалоМесяца(Объект.Дата) < Объект.НачалоПериодаУчета И Объект.НачалоПериодаУчета < НачалоМесяца(Объект.ОкончаниеПериодаУчета)) Тогда
		Сообщить("Начало периода должно быть больше Даты документа, а месяц Окончания периода должен быть больше месяца Начала периода!");
		Возврат;
	КонецЕсли;
	
	Если Не Объект.СуммаКУчету Тогда
		Сообщить("Сумма к учету не заполнена!");
		Возврат;
	КонецЕсли;
	
	ТекПериод = Объект.НачалоПериодаУчета;
	СтрокаПериода = Объект.ПериодыУчета.Добавить();
	СтрокаПериода.ПериодУчета = ТекПериод;
	КонПериод = НачалоМесяца(Объект.ОкончаниеПериодаУчета);
	Пока ТекПериод < КонПериод Цикл
		ТекПериод = ДобавитьМесяц(ТекПериод, 1);
		СтрокаПериода = Объект.ПериодыУчета.Добавить();
		СтрокаПериода.ПериодУчета = ТекПериод;
	КонецЦикла;
	
	КоличествоПериодов = Объект.ПериодыУчета.Количество();
	
	СуммаПериода = Объект.СуммаКУчету / КоличествоПериодов;

	Для Каждого СтрокаПериода Из Объект.ПериодыУчета Цикл
		СтрокаПериода.Сумма = СуммаПериода;
	КонецЦикла;
	
	Погрешность = Объект.СуммаКУчету - Объект.ПериодыУчета.Итог("Сумма");
	Если Погрешность Тогда
		СтрокаПериода = Объект.ПериодыУчета[КоличествоПериодов - 1];
		СтрокаПериода.Сумма = СтрокаПериода.Сумма + Погрешность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ВидПериодаУчета = Перечисления.упрВидыПериодовУчета.РазбивкаПоМесяцам Тогда
		Если Объект.СуммаКУчету - Объект.ПериодыУчета.Итог("Сумма") Тогда
			Сообщить("Сумма к учету не совпадает с суммой по периодам!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



