Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мАннулировать Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мМинимальныеЦены Экспорт;

Перем мРассчитыватьАвтоматическиеСкидки;
Перем мСписокФильтров;

Перем мУчетнаяПолитика;
Перем мОрганизацияОблагаетсяЕНВД;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет операцию оплаты картой, используя подключенную эквайринговую систему.
//
// Параметры:
//  СуммаОплаты - сумма оплаты
//
Процедура ОплатитьКартой(СуммаОплаты) Экспорт

	Перем ЭС;
	Перем ФР;

	Если РаботаСТорговымОборудованием.ПолучитьПроверитьПараметрыДляОплатыКартой(ЭС, ФР) Тогда
		КодRRN = Неопределено;

		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			Результат = ПолучитьСерверТО().ОплатитьПлатежнойКартой(ЭС, СуммаОплаты, КодRRN, ФР);
		Иначе
			Результат = ПолучитьСерверТО().ОтменитьПлатежПоПлатежнойКарте(ЭС, СуммаОплаты, КодRRN, ФР);
		КонецЕсли;

		Если ЗначениеЗаполнено(Результат) Тогда
			Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат);
			Предупреждение(Ошибка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОплатитьКартой()

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЧека()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокЧек.Номер,
	|	ДокЧек.Дата,
	|	ДокЧек.КассаККМ,
	|	ДокЧек.Организация КАК Организация,
	|	ДокЧек.Организация.Представление КАК Поставщик,
	|	ДокЧек.СуммаДокумента,
	|	ДокЧек.ВидОперации,
	|	ДокЧек.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Представление КАК Товар,
	|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		ПроцентСкидкиНаценки КАК Скидка,
	|		ПроцентАвтоматическихСкидок КАК СкидкаАвтоматическая,
	|		Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ДокЧек.Оплата.(
	|		НомерСтроки,
	|		ВидОплаты,
	|		Сумма
	|	),
	|	ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследних.Фамилия + "" "" +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1)) + "". ""
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1)) + "".""
	|				КОНЕЦ
	|	КОНЕЦ КАК ФИО

	|ИЗ
	|	Документ.ЧекККМ КАК ДокЧек
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Пользователи КАК Пользователи
	|ПО
	|	Пользователи.Ссылка = ДокЧек.Ответственный
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ПО
	|	Пользователи.ФизЛицо = ФизическиеЛица.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛицСрезПоследних
	|ПО
	|	ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ДокЧек.Ссылка = &ТекущийДокумент

	|УПОРЯДОЧИТЬ ПО
	|	ДокЧек.Товары.НомерСтроки,
	|	ДокЧек.Оплата.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной.
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Чек (возврат)");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Чек");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ИНН");
	ОбластьМакета.Параметры.ИНН = Шапка.Организация.ИНН;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.СкидкаАвтоматическая <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли;
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если Не ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("СуммаБезСкидки").ШиринаКолонки
		                                  + Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма          = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварПолноеНаименование),
		                                ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварПолноеНаименование)
		                              + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество - ВыборкаСтрокТовары.Сумма;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма + ВыборкаСтрокТовары.Сумма;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;
	КонецЦикла;

	// Вывести Итого.
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = Сумма;
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью.
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Оплату и Сдачу.
	СуммаОплат = 0;
	СуммаБезналичныхОплат = 0;
	СписокОплат = Новый Соответствие();

	ВыборкаОплат = Шапка.Оплата.Выбрать();
	Пока ВыборкаОплат.Следующий() Цикл
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
		   И ВыборкаОплат.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаОплат.Сумма;
		КонецЕсли;

		ЗаписьОплаты = СписокОплат.Получить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты));
		Если ЗаписьОплаты = Неопределено Тогда
			СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ВыборкаОплат.Сумма);
		Иначе
			СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ЗаписьОплаты + ВыборкаОплат.Сумма);
		КонецЕсли;
		СуммаОплат = СуммаОплат + ВыборкаОплат.Сумма;
	КонецЦикла;

	//Отдельная подготовка наличной оплаты для чека возврата
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		СписокОплат.Вставить(Строка(Перечисления.ТипыОплатЧекаККМ.Наличные), Шапка.СуммаДокумента - СуммаБезналичныхОплат);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Оплата");
	ОплатаДобавлена = Ложь;
	Для Каждого ЗнПеречисления Из Перечисления.ТипыОплатЧекаККМ Цикл
		ЗаписьОплаты = СписокОплат.Получить(Строка(ЗнПеречисления));
		Если ЗаписьОплаты <> Неопределено Тогда
			ОбластьМакета.Параметры.Оплата = ?(ОплатаДобавлена, ОбластьМакета.Параметры.Оплата + Символы.ПС, "")
			                               + Строка(ЗнПеречисления) + ": "  + Формат(ЗаписьОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			ОплатаДобавлена = Истина;
		КонецЕсли;
	КонецЦикла;
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ОбластьМакета.Параметры.Сдача = Формат(СуммаОплат - Шапка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
	Иначе
		ОбластьМакета.Параметры.Сдача = "0.00";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи.
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЧека()

// Функция формирует табличный документ с печатной формой узкого чека для печати на принтерах с чековой лентой.
Функция ПечатьТоварногоЧекаДляПД()

	ДокументЧекККМ  = Новый ТабличныйДокумент();
	МассивСтрокЧека = Новый Массив();

	// Получение макета
	МакетЧекаККМ             = Документы.ЧекККМ.ПолучитьМакет("ТоварныйЧекДляПД");
	ОбластьШапкаЧека         = МакетЧекаККМ.ПолучитьОбласть("ШапкаЧека|_"  + КассаККМ.ШиринаЛенты);
	ОбластьТелоЧека          = МакетЧекаККМ.ПолучитьОбласть("ТелоЧека|_"   + КассаККМ.ШиринаЛенты);
	ОбластьТелоЧекаСкидка    = МакетЧекаККМ.ПолучитьОбласть("ТелоЧекаСкидка|_"   + КассаККМ.ШиринаЛенты);
	ОбластьТелоЧекаОтступ    = МакетЧекаККМ.ПолучитьОбласть("ТелоЧекаОтступ|_"   + КассаККМ.ШиринаЛенты);
	ОбластьПодвалЧека        = МакетЧекаККМ.ПолучитьОбласть("ПодвалЧека|_" + КассаККМ.ШиринаЛенты);
	ОбластьПодвалЧекаОплата  = МакетЧекаККМ.ПолучитьОбласть("ПодвалЧекаОплата|_" + КассаККМ.ШиринаЛенты);
	ОбластьПодвалЧекаОстаток = МакетЧекаККМ.ПолучитьОбласть("ПодвалЧекаОстаток|_" + КассаККМ.ШиринаЛенты);

	// Получение данных документа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокЧек.Номер,
	|	ДокЧек.Дата,
	|	ДокЧек.КассаККМ,
	|	ДокЧек.Организация КАК Организация,
	|	ДокЧек.Организация.Представление КАК Поставщик,
	|	ДокЧек.СуммаДокумента,
	|	ДокЧек.ВидОперации,
	|	ДокЧек.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Представление КАК Товар,
	|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		ПроцентСкидкиНаценки КАК Скидка,
	|		ПроцентАвтоматическихСкидок КАК СкидкаАвтоматическая,
	|		Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ДокЧек.Оплата.(
	|		НомерСтроки,
	|		ВидОплаты,
	|		Сумма
	|	),
	|	ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследних.Фамилия + "" "" +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1)) + "". ""
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1)) + "".""
	|				КОНЕЦ
	|	КОНЕЦ КАК ФИО

	|ИЗ
	|	Документ.ЧекККМ КАК ДокЧек
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Пользователи КАК Пользователи
	|ПО
	|	Пользователи.Ссылка = ДокЧек.Ответственный
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ПО
	|	Пользователи.ФизЛицо = ФизическиеЛица.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛицСрезПоследних
	|ПО
	|	ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ДокЧек.Ссылка = &ТекущийДокумент

	|УПОРЯДОЧИТЬ ПО
	|	ДокЧек.Товары.НомерСтроки,
	|	ДокЧек.Оплата.НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Ответ     = "Пустой чек не может быть пробит на устройстве!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	// Формирование чека
	// ШАПКА
	Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ОбластьШапкаЧека.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(Выборка, "Чек (возврат)");
	Иначе
		ОбластьШапкаЧека.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(Выборка, "Чек");
	КонецЕсли;
	ОбластьШапкаЧека.Параметры.Организация = Строка(Выборка.Организация);
	ОбластьШапкаЧека.Параметры.ИНН         = "ИНН: " + Выборка.Организация.ИНН;
	ДокументЧекККМ.Вывести(ОбластьШапкаЧека);


	// ТЕЛО
	ВыборкаТоваров = Выборка.Товары.Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		ОбластьТелоЧека.Параметры.НаименованиеТовара = ВыборкаТоваров.ТоварПолноеНаименование
													 + "(" + ВыборкаТоваров.ЕдиницаИзмерения + ")";
		ОбластьТелоЧека.Параметры.КоличествоЦена     = Формат(ВыборкаТоваров.Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0")
													 + " х "
													 + Формат(ВыборкаТоваров.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");

		КонечнаяСкидка = ВыборкаТоваров.Количество * ВыборкаТоваров.Цена - ВыборкаТоваров.Сумма;
		ДокументЧекККМ.Вывести(ОбластьТелоЧека);

		Если КонечнаяСкидка <> 0 Тогда
			ОбластьТелоЧекаСкидка.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0, "Скидка:", "Надбавка:");
			ОбластьТелоЧекаСкидка.Параметры.Скидка    = Формат(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			ДокументЧекККМ.Вывести(ОбластьТелоЧекаСкидка);
		КонецЕсли;

		ДокументЧекККМ.Вывести(ОбластьТелоЧекаОтступ);
	КонецЦикла;
	//ДокументЧекККМ.УдалитьСтроку(ДокументЧекККМ.КоличествоСтрок());

	// ПОДВАЛ
	ОбластьПодвалЧека.Параметры.Итог = Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
	ДокументЧекККМ.Вывести(ОбластьПодвалЧека);

	СуммаОплат = 0;
	СуммаБезналичныхОплат = 0;
	СписокОплат = Новый Соответствие();

	ВыборкаОплат = Выборка.Оплата.Выбрать();
	Пока ВыборкаОплат.Следующий() Цикл
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
		   И ВыборкаОплат.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаОплат.Сумма;
		КонецЕсли;

		ЗаписьОплаты = СписокОплат.Получить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты));
		Если ЗаписьОплаты = Неопределено Тогда
			СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ВыборкаОплат.Сумма);
		Иначе
			СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ЗаписьОплаты + ВыборкаОплат.Сумма);
		КонецЕсли;
		СуммаОплат = СуммаОплат + ВыборкаОплат.Сумма;
	КонецЦикла;

	//Отдельная подготовка наличной оплаты для чека возврата
	Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		СписокОплат.Вставить(Строка(Перечисления.ТипыОплатЧекаККМ.Наличные), Выборка.СуммаДокумента - СуммаБезналичныхОплат);
	КонецЕсли;

	ОплатаДобавлена = Ложь;
	Для Каждого ЗнПеречисления Из Перечисления.ТипыОплатЧекаККМ Цикл
		ЗаписьОплаты = СписокОплат.Получить(Строка(ЗнПеречисления));
		Если ЗаписьОплаты <> Неопределено Тогда
			ОбластьПодвалЧекаОплата.Параметры.ТипОплаты = Строка(ЗнПеречисления) + ":";
			ОбластьПодвалЧекаОплата.Параметры.Оплата = Формат(ЗаписьОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			//ОплатаДобавлена = Истина;
			ДокументЧекККМ.Вывести(ОбластьПодвалЧекаОплата);
		КонецЕсли;
	КонецЦикла;

	Если Выборка.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ОбластьПодвалЧекаОстаток.Параметры.Сдача = Формат(СуммаОплат - Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
	КонецЕсли;

	ОбластьПодвалЧекаОстаток.Параметры.Сотрудник = Выборка.ФИО;

	ДокументЧекККМ.Вывести(ОбластьПодвалЧекаОстаток);

	Возврат ДокументЧекККМ;

КонецФункции

// Функция осуществляет проведение документа и печать чека на ФР.
//
// Параметры:
//  Ответ    - <Строка>
//           - Выходной параметр; описание произошедшей ошибки.
//
//  Отказ    - <Булево>
//           - Выходной параметр; признак отказа от выполнения операции.
//
// Возвращаемое значение:
//  <Булево> - Истина в случае успешного завершения операции.
//
Функция ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента, РучнойРежимПечати = Ложь, СерверККТ = Неопределено, НомерУстройства = Неопределено) Экспорт

	Результат = Истина;
	Ответ     = "";

	ОнлайнКасса = КассаККМ.ОнлайнКасса;
	
	Если Не ОнлайнКасса Тогда
		Попытка
			ФормаДокумента.ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Неоперативный;
			ФормаДокумента.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
		Исключение
			Ответ     = "Ошибка при попытке проведения документа!";
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Результат;
		КонецПопытки;
	Иначе
		Записать(РежимЗаписиДокумента.Проведение);
	КонецеСли;

	Если ЧекПробитНаККМ Тогда
		Возврат Результат;
	КонецЕсли;
	
	// проверка на онлайн ККМ
	Если СерверККТ = Неопределено Тогда
		НадоОтключитьККТ = Истина;
	Иначе
		НадоОтключитьККТ = Ложь;
	КонецеСли;
	
	Если ОнлайнКасса Тогда
		Если СерверККТ = Неопределено Тогда
			СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(КассаККМ);
		КонецЕсли;	
		Если СерверККТ = Ложь Тогда
			Возврат Ложь;
		КонецеСли;	
	Иначе	
		Если УстановленЕНВДОрганизации()
			И КассаККМ.ФормироватьНефискальныеЧеки
			И КассаККМ.РучнойРежимФормирования
			И Не РучнойРежимПечати Тогда
			Возврат Результат;
		КонецЕсли;
		
		МассивФР      = ПолучитьСерверТО().ПолучитьСписокУстройств(
		Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
		КассаККМ);
		
		КоличествоФР = МассивФР.Количество();
		Если КоличествоФР = 0 Тогда
			Ответ     = "";
			Отказ     = Истина;
			Результат = Истина;
			Возврат Результат;
		ИначеЕсли КоличествоФР = 1 Тогда
			ФР = МассивФР[0];
		Иначе
			СписокФР = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(МассивФР);
			
			ФР = СписокФР.ВыбратьЭлемент("Необходимо выбрать фискальный регистратор");
			Если ФР = Неопределено Тогда
				Ответ     = "Операция отменена пользователем.";
				Отказ     = Истина;
				Результат = Ложь;
				Возврат Результат;
			Иначе
				ФР = ФР.Значение;
			КонецЕсли;
		КонецЕсли;
		
		ОшибкаТО = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
		
	КонецеСли;

	Если УстановленЕНВДОрганизации()
	   И КассаККМ.ФормироватьНефискальныеЧеки Тогда
		ДокументЧекККМ  = Новый ТекстовыйДокумент();
		МассивСтрокЧека = Новый Массив();

		// Получение макета
		МакетЧекаККМ      = Документы.ЧекККМ.ПолучитьМакет("ЧекПокупателя");
		ОбластьШапкаЧека  = МакетЧекаККМ.ПолучитьОбласть("ШапкаЧека"  + КассаККМ.ШиринаЛенты);
		ОбластьТелоЧека   = МакетЧекаККМ.ПолучитьОбласть("ТелоЧека"   + КассаККМ.ШиринаЛенты);
		ОбластьПодвалЧека = МакетЧекаККМ.ПолучитьОбласть("ПодвалЧека" + КассаККМ.ШиринаЛенты);

		// Получение данных документа
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Дата", Дата);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДокЧек.Номер,
		|	ДокЧек.Дата,
		|	ДокЧек.КассаККМ,
		|	ДокЧек.Организация КАК Организация,
		|	ДокЧек.СуммаДокумента,
		|	ДокЧек.ВидОперации,
		|	ДокЧек.Товары.(
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.Представление КАК Товар,
		|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
		|		Номенклатура.Код КАК Код,
		|		Номенклатура.Артикул КАК Артикул,
		|		Количество,
		|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|		Цена,
		|		ПроцентСкидкиНаценки КАК Скидка,
		|		ПроцентАвтоматическихСкидок КАК СкидкаАвтоматическая,
		|		Сумма,
		|		ХарактеристикаНоменклатуры КАК Характеристика,
		|		СерияНоменклатуры КАК Серия
		|	),
		|	ДокЧек.Оплата.(
		|		НомерСтроки,
		|		ВидОплаты,
		|		Сумма
		|	),
		|	ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") = """"
		|				ТОГДА """"
		|			ИНАЧЕ
		|				ФИОФизЛицСрезПоследних.Фамилия + "" "" +
		|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") = """"
		|						ТОГДА """"
		|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1)) + "". ""
		|				КОНЕЦ
		|				+
		|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") = """"
		|						ТОГДА """"
		|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1)) + "".""
		|				КОНЕЦ
		|	КОНЕЦ КАК ФИО

		|ИЗ
		|	Документ.ЧекККМ КАК ДокЧек
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.Пользователи КАК Пользователи
		|ПО
		|	Пользователи.Ссылка = ДокЧек.Ответственный
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ПО
		|	Пользователи.ФизЛицо = ФизическиеЛица.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛицСрезПоследних
		|ПО
		|	ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	ДокЧек.Ссылка = &ТекущийДокумент

		|УПОРЯДОЧИТЬ ПО
		|	ДокЧек.Товары.НомерСтроки,
		|	ДокЧек.Оплата.НомерСтроки
		|";

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Ответ     = "Пустой чек не может быть пробит на устройстве!";
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		// Формирование чека
		// ШАПКА
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			ОбластьШапкаЧека.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(Выборка, "Чек (возврат)");
		Иначе
			ОбластьШапкаЧека.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(Выборка, "Чек");
		КонецЕсли;
		ОбластьШапкаЧека.Параметры.Организация = Строка(Выборка.Организация);
		ОбластьШапкаЧека.Параметры.ИНН         = "ИНН: " + Выборка.Организация.ИНН;
		ДокументЧекККМ.Вывести(ОбластьШапкаЧека);


		// ТЕЛО
		ВыборкаТоваров = Выборка.Товары.Выбрать();
		Пока ВыборкаТоваров.Следующий() Цикл
			ОбластьТелоЧека.Параметры.НаименованиеТовара = ВыборкаТоваров.ТоварПолноеНаименование
			                                             + "(" + ВыборкаТоваров.ЕдиницаИзмерения + ")";
														 
			ОбластьТелоЧека.Параметры.НаименованиеТовара = СтрЗаменить(ОбластьТелоЧека.Параметры.НаименованиеТовара, "  ", " ");
			ОбластьТелоЧека.Параметры.НаименованиеТовара = СтрЗаменить(ОбластьТелоЧека.Параметры.НаименованиеТовара, "  ", " ");
			
			ОбластьТелоЧека.Параметры.НаименованиеТовара = СтрЗаменить(ОбластьТелоЧека.Параметры.НаименованиеТовара, Символы.Таб, "");
			ОбластьТелоЧека.Параметры.НаименованиеТовара = СтрЗаменить(ОбластьТелоЧека.Параметры.НаименованиеТовара, "¶", ""); //<+++ Костя 241115>
			// Михушкин - 15.06.2016 --->> 
			ОбластьТелоЧека.Параметры.НаименованиеТовара = СтрЗаменить(ОбластьТелоЧека.Параметры.НаименованиеТовара, "•", " ");
			// <<--- Михушкин 
			ОбластьТелоЧека.Параметры.КоличествоЦена     = Формат(ВыборкаТоваров.Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0")
			                                             + " х "
			                                             + Формат(ВыборкаТоваров.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");

			КонечнаяСкидка = ВыборкаТоваров.Скидка + ВыборкаТоваров.СкидкаАвтоматическая;
			Если КонечнаяСкидка <> 0 Тогда
				ОбластьТелоЧека.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0, "Скидка:", "Надбавка:");
				ОбластьТелоЧека.Параметры.Скидка    = Строка(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка))
				                                    + "%";
			Иначе
				ОбластьТелоЧека.Параметры.ЗагСкидка = "";
				ОбластьТелоЧека.Параметры.Скидка    = "";
			КонецЕсли;

			ДокументЧекККМ.Вывести(ОбластьТелоЧека);
		КонецЦикла;
		ДокументЧекККМ.УдалитьСтроку(ДокументЧекККМ.КоличествоСтрок());

		// ПОДВАЛ
		ОбластьПодвалЧека.Параметры.Итог = Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");

		СуммаОплат = 0;
		СуммаБезналичныхОплат = 0;
		СписокОплат = Новый Соответствие();

		ВыборкаОплат = Выборка.Оплата.Выбрать();
		Пока ВыборкаОплат.Следующий() Цикл
			Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
			   И ВыборкаОплат.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаОплат.Сумма;
			КонецЕсли;

			ЗаписьОплаты = СписокОплат.Получить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты));
			Если ЗаписьОплаты = Неопределено Тогда
				СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ВыборкаОплат.Сумма);
			Иначе
				СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ЗаписьОплаты + ВыборкаОплат.Сумма);
			КонецЕсли;
			СуммаОплат = СуммаОплат + ВыборкаОплат.Сумма;
		КонецЦикла;

		//Отдельная подготовка наличной оплаты для чека возврата
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			СписокОплат.Вставить(Строка(Перечисления.ТипыОплатЧекаККМ.Наличные), Выборка.СуммаДокумента - СуммаБезналичныхОплат);
		КонецЕсли;

		ОплатаДобавлена = Ложь;
		Для Каждого ЗнПеречисления Из Перечисления.ТипыОплатЧекаККМ Цикл
			ЗаписьОплаты = СписокОплат.Получить(Строка(ЗнПеречисления));
			Если ЗаписьОплаты <> Неопределено Тогда
				ОбластьПодвалЧека.Параметры.Оплата = ?(ОплатаДобавлена, ОбластьПодвалЧека.Параметры.Оплата + Символы.ПС, "")
				                                    + Строка(ЗнПеречисления) + ": "  + Формат(ЗаписьОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				ОплатаДобавлена = Истина;
			КонецЕсли;
		КонецЦикла;

		Если Выборка.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			ОбластьПодвалЧека.Параметры.Сдача = "СДАЧА: " + Формат(СуммаОплат - Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КонецЕсли;

		ОбластьПодвалЧека.Параметры.Сотрудник = Выборка.ФИО;

		ДокументЧекККМ.Вывести(ОбластьПодвалЧека);

		Если ДокументЧекККМ.КоличествоСтрок() > 0 Тогда
			Для Индекс = 1 По ДокументЧекККМ.КоличествоСтрок() Цикл
				МассивСтрокЧека.Добавить(ДокументЧекККМ.ПолучитьСтроку(Индекс));
			КонецЦикла;

			// Открыть нефискальный чек
			ОшибкаТО = ПолучитьСерверТО().ОткрытьЧек(ФР, ПолучитьСерверТО().ПолучитьПарольКассираККМ(),
			                                         ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат,
			                                         НомерЧекаККМ, НомерСменыККМ, Ложь);

			Если Не ЗначениеЗаполнено(ОшибкаТО) Тогда
				// Напечатать строки полученного из макета чека
				ОшибкаТО = ПолучитьСерверТО().ПечатьТекста(ФР, МассивСтрокЧека, КассаККМ.ШиринаЛенты);

				// Закрыть чек
				ОшибкаТО = ПолучитьСерверТО().ЗакрытьЧек(ФР, 0, 0);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТчТовары.Номенклатура.Представление КАК Номенклатура,
		|	ТчТовары.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатуры,
		|	ТчТовары.СерияНоменклатуры.Представление КАК СерияНоменклатуры,
		|	ТчТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ТчТовары.Цена КАК Цена,
		|	ТчТовары.Количество КАК Количество,
		|	ТчТовары.ПроцентСкидкиНаценки + ТчТовары.ПроцентАвтоматическихСкидок КАК ПроцентСкидкиНаценки,
		|	ТчТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТчТовары.Ссылка.КассаККМ.ВерсияФФД = ЗНАЧЕНИЕ(Перечисление.ВерсииФФД.Версия_1_0)
		|				ИЛИ ТчТовары.Ссылка.КассаККМ.ВерсияФФД = ЗНАЧЕНИЕ(Перечисление.ВерсииФФД.пустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.БезНДС)
		|						ТОГДА 4
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.ПустаяСсылка)
		|						ТОГДА 6
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС10)
		|						ТОГДА 5
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС18)
		|						ТОГДА 6
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС20)
		|						ТОГДА 6
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС0)
		|						ТОГДА 1
		|				КОНЕЦ
		|		КОГДА ТчТовары.Ссылка.КассаККМ.ВерсияФФД = ЗНАЧЕНИЕ(Перечисление.ВерсииФФД.Версия_1_0_5)
		|			ТОГДА ВЫБОР
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.БезНДС)
		|						ТОГДА 6
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.ПустаяСсылка)
		|						ТОГДА 3
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС10)
		|						ТОГДА 5
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС18)
		|						ТОГДА 3
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС0)
		|						ТОГДА 5
		|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС20)
		|						ТОГДА 3
		|				КОНЕЦ
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК СтавкаНДСФЗ54,
		|	ТчТовары.СтавкаНДСФЗ54 КАК СтавкаНдсСпр,
		|	ТчТовары.КодМаркировки КАК КодМаркировки
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ТчТовары
		|ГДЕ
		|	ТчТовары.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Ответ     = "Пустой чек не может быть пробит на фискальном регистраторе!";
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;

		Выборка = РезультатЗапроса.Выбрать();
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Наименование");
		ТаблицаТоваров.Колонки.Добавить("НомерСекции");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("Скидка");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДСФЗ54");
		ТаблицаТоваров.Колонки.Добавить("КодМаркировки");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДССпр");

		ПечататьНДСВКассовыхЧекахИзДокументовЧекККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПечататьНДСВКассовыхЧекахИзДокументовЧекККМ");

		ПолНомерЗаказа = ОбщегоНазначения.СформироватьПолныйНомерЗаказа(Реализация.Номер, Реализация.НомерВнешнегоЗаказа);
		НомерЗак = СокрЛП(Реализация.Номер);
		ДатаЗак = Формат(Реализация.Дата, "ДЛФ=DD");
		Пока Выборка.Следующий() Цикл
			Товар = ТаблицаТоваров.Добавить();

			Если Не Реализация.Пустая() Тогда
				Товар.Наименование = "(" + НомерЗак + ")" + СокрЛП(Выборка.Номенклатура)
				+ "(" + СокрЛП(Выборка.ЕдиницаИзмерения)
				+ ?(ПустаяСтрока(Выборка.ХарактеристикаНоменклатуры), "", ", " + СокрЛП(Выборка.ХарактеристикаНоменклатуры))
				+ ?(ПустаяСтрока(Выборка.СерияНоменклатуры)         , "", ", " + СокрЛП(Выборка.СерияНоменклатуры)) + ")";
			Иначе
				Товар.Наименование = СокрЛП(Выборка.Номенклатура)
				+ "(" + СокрЛП(Выборка.ЕдиницаИзмерения)
				+ ?(ПустаяСтрока(Выборка.ХарактеристикаНоменклатуры), "", ", " + СокрЛП(Выборка.ХарактеристикаНоменклатуры))
				+ ?(ПустаяСтрока(Выборка.СерияНоменклатуры)         , "", ", " + СокрЛП(Выборка.СерияНоменклатуры)) + ")";
				
			КонецЕСли;
			
			Товар.Наименование = СтрЗаменить(Товар.Наименование, "  ", " ");
			Товар.Наименование = СтрЗаменить(Товар.Наименование, "  ", " ");
			Товар.Наименование = СтрЗаменить(Товар.Наименование, "¶", " "); //<+++ Костя 241115>
			Товар.Наименование = СтрЗаменить(Товар.Наименование, "•", " "); // Михушкин - 15.06.2016
			
            Если Не ЗначениеЗаполнено(Секция) Тогда
				Товар.НомерСекции  = Склад.НомерСекции;
			Иначе
				Товар.НомерСекции  = Секция.Код;
			КонецеСли;	
			Товар.Цена         = Выборка.Цена;
			Товар.Количество   = Выборка.Количество;
			Товар.Скидка       = Выборка.ПроцентСкидкиНаценки;
			Если СтавкаНДС.Пустая() Или СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Товар.СтавкаНДС    = 0;
			Иначе
				Товар.СтавкаНДС    = 1;
				//УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
			КонецеСли;
			Товар.СтавкаНДСФЗ54 = Выборка.СтавкаНДСФЗ54;
			Товар.СтавкаНДССпр = Выборка.СтавкаНДССпр;
			Товар.КодМаркировки = Выборка.КодМаркировки;
			//?(ПечататьНДСВКассовыхЧекахИзДокументовЧекККМ, УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС), 0);
		КонецЦикла;
		//Если ПолучитьСерверТО().ПоддерживаетсяСмешанныйРежимПечати(ФР) Тогда
		//	Мас = Новый Массив;
		//	Мас.Добавить("---------------------------");
		//	Если ТипЗнч(Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		//		Мас.Добавить("Доставка № " + ПолнНомерзаказа);
		//	Иначе
		//		Мас.Добавить("Доставка № д/" + НомерЗак);
		//	КонецеСли;	
		//	Мас.Добавить(" от " + ДатаЗак);
		//	Мас.Добавить("---------------------------");
		//	ПолучитьСерверТО().ПечатьТекста(ФР, Мас, 30);
		//КонецЕсли;	
		
		Если Не ОнлайнКасса Тогда
			ОшибкаТО = ПолучитьСерверТО().ПечатьЧека(ФР, ПолучитьСерверТО().ПолучитьПарольКассираККМ(), НомерЧекаККМ, НомерСменыККМ,
			ТаблицаТоваров, ПолучитьСуммуНаличнойОплаты(),
			ПолучитьСуммуБезналичнойОплаты(),
			ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат);
		Иначе
			НомерДокументаККМ = 0;
			ПараметрыЧека = "";
			
			ДопПараметрыЧека = Новый Структура;
			ДопПараметрыЧека.Вставить("КодТипаОплатыНаККМ", ТипОплаты.КодОплатыНаККМ);
			//ДопПараметрыЧека.Вставить("АдресИнформирования", "checks@strizh-logistic.ru");   
			//ДопПараметрыЧека.Вставить("АдресИнформирования", "couriers.service@checks.ru");
			ДопПараметрыЧека.Вставить("АдресИнформирования", "checks@gl.ru");			
			ДопПараметрыЧека.Вставить("ТипОплаты", ТипОплаты.Ссылка);
			
			//Если Не Реализация.Пустая() Тогда
			//	ДопПараметрыЧека.Вставить("ВыводитьДанныеКонтрагента", Истина);
			//	ДопПараметрыЧека.Вставить("ИННКонтрагента", СокрЛП(Реализация.ВладелецТовара.ИНН));
			//	ДопПараметрыЧека.Вставить("НаименованиеКонтрагента", СокрЛП(Реализация.ВладелецТовара.НаименованиеПолное));
			//	ДопПараметрыЧека.Вставить("ТелефонКонтрагента", lem.ПреобразоватьНомерТелефона(СокрЛП(Реализация.ВладелецТовара.ТелефонИнтернетМагазина)));
			//Иначе	
				ДопПараметрыЧека.Вставить("ВыводитьДанныеКонтрагента", Ложь);
			//КонецеСли;
			
			НаимКассира = "Кассир 1";
			Если Не Кассир.Пустая() Тогда
				НаимКассира = Кассир.Наименование;
			КонецеСли;	
			ДопПараметрыЧека.Вставить("Кассир", НаимКассира);
			
			// Якурнов 06.11.2018 15:12:43  
			Если Не Реализация.Пустая() Тогда
				ДопПараметрыЧека.Вставить("НомерВнешнегоЗаказа", Реализация.НомерВнешнегоЗаказа);
			Иначе
				ДопПараметрыЧека.Вставить("НомерВнешнегоЗаказа", "");
			КонецЕсли;
			
			Если НомерУстройства = Неопределено Тогда
				
				Если КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_0 Или КассаККМ.ВерсияФФД.Пустая() Тогда
					ОтветФЗ = ККМ_ФЗ_54.ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека);
				ИначеЕсли КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_0_5 Тогда
					ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_05(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека);
				ИначеЕсли КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_2 Тогда
					ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_2(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека);
				КонецеСли;
				
				
				//Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
				//	
				//Иначе	
				//	
				//КонецеСли;	
				
				
			Иначе
				
				Если КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_0 Или КассаККМ.ВерсияФФД.Пустая() Тогда
					ОтветФЗ = ККМ_ФЗ_54.ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
				ИначеЕсли КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_0_5 Тогда
					ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_05(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
				ИначеЕсли КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_2 Тогда
					ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_2(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
				КонецеСли;
				
				
				//Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
				//	ПечатьЧекаФФД_1_05 = ККМ_ФЗ_54.ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
				//Иначе	
				//	ОтветФЗ = ККМ_ФЗ_54.ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
				//КонецеСли;	
				
				//ПечатьЧекаФФД_1_05
			КонецеСли;	
			
			//+++ БАО 30.08.2017 №1764
			//---НомерСменыККМ = ПараметрыЧека.НомерСмены;
			//---НомерЧекаККМ = ПараметрыЧека.НомерЧека;
			//--- БАО 30.08.2017 №1746
			
			//+++ БАО 05.10.2017 №1918
			//---Если Не ОтветФЗ Тогда
			Если Не ОтветФЗ.Результат Тогда
				Попытка
					ККМ_ФЗ_54.ЗаписьЛогаОшибкиККМ(ОтветФЗ.КодОшибки, ОтветФЗ.ТекстОшибки, КассаККМ.ПроизводительККМ, Ссылка);				
				Исключение
				КонецПопытки;
			//--- БАО 05.10.2017 №1918	
				ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(СерверККТ, КассаККМ);
				Результат = Ложь;
				Ответ = "Ошибка при пробитии чека ФЗ54";
				Отказ = Истина;
				Возврат Ложь;
			Иначе
				
				//+++ БАО 30.08.2017 №1764
				НомерСменыККМ = ПараметрыЧека.НомерСмены;
				НомерЧекаККМ = ПараметрыЧека.НомерЧека;
				//--- БАО 30.08.2017 №1746
				
				lem.ЗафиксироватьДопПараметрыВЧеке(Ссылка, ПараметрыЧека);
				Результат = Истина;
				Ответ = "";
				Отказ = Ложь;
			КонецеСли;	
		КонецЕсли;   
	КонецЕсли;
	
	Если не ОнлайнКасса Тогда
		Если НЕ ЗначениеЗаполнено(ОшибкаТО) Тогда
			ЧекПробитНаККМ = Истина;
			Попытка
				Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Ответ     = "Не удалось записать документ с установленными параметрами пробитого чека.";
				Отказ     = Истина;
				Результат = Ложь;
			КонецПопытки;
		Иначе
			Ответ     = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(ОшибкаТО);
			Отказ     = Истина;
			Результат = Ложь;
		КонецЕсли;
		
	Иначе
		Если НадоОтключитьККТ Тогда
			ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(СерверККТ, КассаККМ);
		КонецеСли;	
		ЧекПробитНаККМ = Истина;
		Попытка
			Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Ответ     = "Не удалось записать документ с установленными параметрами пробитого чека.";
			Отказ     = Истина;
			Результат = Ложь;
		КонецПопытки;
		УзелОбменаВыгрузкаЧековВАдминку = ПланыОбмена.ОбменСАдминкой.НайтиПоКоду("Adminka");
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаВыгрузкаЧековВАдминку, Ссылка);
	КонецеСли;
	
	Возврат Результат;

КонецФункции // ПровестиИРаспечататьЧек()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Чек" Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
				НачалоСообщенияОбОшибке = "Не выбрана касса ККМ."
			Иначе
				НачалоСообщенияОбОшибке = "У выбранной кассы ККМ не задана организация.";
			КонецЕсли;

			Предупреждение(НачалоСообщенияОбОшибке + Символы.ПС + "Печать чека невозможна.");
			Возврат;
		КонецЕсли;

		// Получить экземпляр документа на печать.
		ТабДокумент = ПечатьЧека();
	ИначеЕсли ИмяМакета = "ТоварныйЧекДляПД" Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
				НачалоСообщенияОбОшибке = "Не выбрана касса ККМ."
			Иначе
				НачалоСообщенияОбОшибке = "У выбранной кассы ККМ не задана организация.";
			КонецЕсли;

			Предупреждение(НачалоСообщенияОбОшибке + Символы.ПС + "Печать чека невозможна.");
			Возврат;
		КонецЕсли;

		// Получить экземпляр документа на печать.
		ТабДокумент = ПечатьТоварногоЧекаДляПД();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Чек", "Чек");
	Если УстановленЕНВДОрганизации()
	   И КассаККМ.ФормироватьНефискальныеЧеки Тогда
		СтруктураМакетов.Вставить( "ТоварныйЧекДляПД", "Товарный чек для принтера документов");
	КонецЕсли;
	СтруктураМакетов.Вставить("СерийныеНомера", "Список серийных номеров");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ" , "Расход с розничных складов в ценах АТТ");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура открывает для выбора форму справочник Типы оплат чека ККМ
// с установленным параметром отбора на тип оплаты по значениям параметров констант учетной политики
// ИспользоватьОплатуПлатежнымиКартами
// ИспользоватьОплатуБанковскимиКредитами
//
// Параметры
//  СтандартнаяОбработка  - Булево - признак стандартной обработки выбора поля ввода
//  Элемент               - ПолеВвода - Поле ввода в котором происходит выбор типа оплаты
//
Процедура ВыборТипаОплаты(СтандартнаяОбработка, Элемент) Экспорт
	Перем ЗначениеОтбораТипаОплаты;
	
	СписокЗначенийОтбора = Новый СписокЗначений();
	СписокЗначенийОтбора.Добавить(Перечисления.ТипыОплатЧекаККМ.Наличные);
	Если глЗначениеПеременной("ИспользоватьОплатуПлатежнымиКартами") Тогда
		СписокЗначенийОтбора.Добавить(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	КонецЕсли;
	Если глЗначениеПеременной("ИспользоватьОплатуБанковскимиКредитами") Тогда
		СписокЗначенийОтбора.Добавить(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	КонецЕсли;
	Если СписокЗначенийОтбора.Количество() = 1 Тогда
		ЗначениеОтбораТипаОплаты = СписокЗначенийОтбора[0].Значение;
	Иначе
		ЗначениеОтбораТипаОплаты = СписокЗначенийОтбора;
	КонецЕсли;
	
	УправлениеРозничнойТорговлей.НачалоВыбораВидаОплатыЧекаККМ(Элемент, ЗначениеОтбораТипаОплаты, СтандартнаяОбработка);
	
КонецПроцедуры // ВыборТипаОплаты()

#КонецЕсли


//Асеев 29.06.2022 (Задача № 4833)>>>

#Если Сервер Тогда
// Функция осуществляет проведение документа и печать чека на ФР.
//
// Параметры:
//  Ответ    - <Строка>
//           - Выходной параметр; описание произошедшей ошибки.
//
//  Отказ    - <Булево>
//           - Выходной параметр; признак отказа от выполнения операции.
//
// Возвращаемое значение:
//  <Булево> - Истина в случае успешного завершения операции.
//
Функция ПровестиИРаспечататьЧекНаСервере(Ответ, Отказ, ФормаДокумента, РучнойРежимПечати = Ложь, СерверККТ = Неопределено, НомерУстройства = Неопределено) Экспорт

	Результат = Истина;
	Ответ     = "";

	ОнлайнКасса = КассаККМ.ОнлайнКасса;
	
	Если Не ОнлайнКасса Тогда
		Ответ     = "Пробить чек можно только в режиме Онлайн касса!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	Иначе
		Записать(РежимЗаписиДокумента.Проведение);
	КонецеСли;

	Если ЧекПробитНаККМ Тогда
		Возврат Результат;
	КонецЕсли;
	
	// проверка на онлайн ККМ
	Если СерверККТ = Неопределено Тогда
		НадоОтключитьККТ = Истина;
	Иначе
		НадоОтключитьККТ = Ложь;
	КонецеСли;
	
	Если СерверККТ = Неопределено Тогда
		СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(КассаККМ);
	КонецЕсли;	
	Если СерверККТ = Ложь Тогда
		Возврат Ложь;
	КонецеСли;	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТчТовары.Номенклатура.Представление КАК Номенклатура,
	|	ТчТовары.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатуры,
	|	ТчТовары.СерияНоменклатуры.Представление КАК СерияНоменклатуры,
	|	ТчТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТчТовары.Цена КАК Цена,
	|	ТчТовары.Количество КАК Количество,
	|	ТчТовары.ПроцентСкидкиНаценки + ТчТовары.ПроцентАвтоматическихСкидок КАК ПроцентСкидкиНаценки,
	|	ТчТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТчТовары.Ссылка.КассаККМ.ВерсияФФД = ЗНАЧЕНИЕ(Перечисление.ВерсииФФД.Версия_1_0)
	|				ИЛИ ТчТовары.Ссылка.КассаККМ.ВерсияФФД = ЗНАЧЕНИЕ(Перечисление.ВерсииФФД.пустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.БезНДС)
	|						ТОГДА 4
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.ПустаяСсылка)
	|						ТОГДА 6
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС10)
	|						ТОГДА 5
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС18)
	|						ТОГДА 6
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС20)
	|						ТОГДА 6
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС0)
	|						ТОГДА 1
	|				КОНЕЦ
	|		КОГДА ТчТовары.Ссылка.КассаККМ.ВерсияФФД = ЗНАЧЕНИЕ(Перечисление.ВерсииФФД.Версия_1_0_5)
	|			ТОГДА ВЫБОР
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.БезНДС)
	|						ТОГДА 6
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.ПустаяСсылка)
	|						ТОГДА 3
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС10)
	|						ТОГДА 5
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС18)
	|						ТОГДА 3
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС0)
	|						ТОГДА 5
	|					КОГДА ТчТовары.СтавкаНДСФЗ54 = ЗНАЧЕНИЕ(Справочник.СтавкиНДСФЗ54.НДС20)
	|						ТОГДА 3
	|				КОНЕЦ
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК СтавкаНДСФЗ54,
	|	ТчТовары.СтавкаНДСФЗ54 КАК СтавкаНдсСпр,
	|	ТчТовары.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТчТовары
	|ГДЕ
	|	ТчТовары.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Ответ     = "Пустой чек не может быть пробит на фискальном регистраторе!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("НомерСекции");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Скидка");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСФЗ54");
	ТаблицаТоваров.Колонки.Добавить("КодМаркировки");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДССпр");
	
	ПечататьНДСВКассовыхЧекахИзДокументовЧекККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПечататьНДСВКассовыхЧекахИзДокументовЧекККМ");
	
	ПолНомерЗаказа = ОбщегоНазначения.СформироватьПолныйНомерЗаказа(Реализация.Номер, Реализация.НомерВнешнегоЗаказа);
	НомерЗак = СокрЛП(Реализация.Номер);
	ДатаЗак = Формат(Реализация.Дата, "ДЛФ=DD");
	Пока Выборка.Следующий() Цикл
		Товар = ТаблицаТоваров.Добавить();
		
		Если Не Реализация.Пустая() Тогда
			Товар.Наименование = "(" + НомерЗак + ")" + СокрЛП(Выборка.Номенклатура)
			+ "(" + СокрЛП(Выборка.ЕдиницаИзмерения)
			+ ?(ПустаяСтрока(Выборка.ХарактеристикаНоменклатуры), "", ", " + СокрЛП(Выборка.ХарактеристикаНоменклатуры))
			+ ?(ПустаяСтрока(Выборка.СерияНоменклатуры)         , "", ", " + СокрЛП(Выборка.СерияНоменклатуры)) + ")";
		Иначе
			Товар.Наименование = СокрЛП(Выборка.Номенклатура)
			+ "(" + СокрЛП(Выборка.ЕдиницаИзмерения)
			+ ?(ПустаяСтрока(Выборка.ХарактеристикаНоменклатуры), "", ", " + СокрЛП(Выборка.ХарактеристикаНоменклатуры))
			+ ?(ПустаяСтрока(Выборка.СерияНоменклатуры)         , "", ", " + СокрЛП(Выборка.СерияНоменклатуры)) + ")";
			
		КонецЕСли;
		
		Товар.Наименование = СтрЗаменить(Товар.Наименование, "  ", " ");
		Товар.Наименование = СтрЗаменить(Товар.Наименование, "  ", " ");
		Товар.Наименование = СтрЗаменить(Товар.Наименование, "¶", " "); //<+++ Костя 241115>
		Товар.Наименование = СтрЗаменить(Товар.Наименование, "•", " "); // Михушкин - 15.06.2016
		
		Если Не ЗначениеЗаполнено(Секция) Тогда
			Товар.НомерСекции  = Склад.НомерСекции;
		Иначе
			Товар.НомерСекции  = Секция.Код;
		КонецеСли;	
		Товар.Цена         = Выборка.Цена;
		Товар.Количество   = Выборка.Количество;
		Товар.Скидка       = Выборка.ПроцентСкидкиНаценки;
		Если СтавкаНДС.Пустая() Или СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Товар.СтавкаНДС    = 0;
		Иначе
			Товар.СтавкаНДС    = 1;
			//УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
		КонецеСли;
		Товар.СтавкаНДСФЗ54 = Выборка.СтавкаНДСФЗ54;
		Товар.СтавкаНДССпр = Выборка.СтавкаНДССпр;
		Товар.КодМаркировки = Выборка.КодМаркировки;
		//?(ПечататьНДСВКассовыхЧекахИзДокументовЧекККМ, УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС), 0);
	КонецЦикла;
	//Если ПолучитьСерверТО().ПоддерживаетсяСмешанныйРежимПечати(ФР) Тогда
	//	Мас = Новый Массив;
	//	Мас.Добавить("---------------------------");
	//	Если ТипЗнч(Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//		Мас.Добавить("Доставка № " + ПолнНомерзаказа);
	//	Иначе
	//		Мас.Добавить("Доставка № д/" + НомерЗак);
	//	КонецеСли;	
	//	Мас.Добавить(" от " + ДатаЗак);
	//	Мас.Добавить("---------------------------");
	//	ПолучитьСерверТО().ПечатьТекста(ФР, Мас, 30);
	//КонецЕсли;	
	
	НомерДокументаККМ = 0;
	ПараметрыЧека = "";
	
	ДопПараметрыЧека = Новый Структура;
	ДопПараметрыЧека.Вставить("КодТипаОплатыНаККМ", ТипОплаты.КодОплатыНаККМ);
	//ДопПараметрыЧека.Вставить("АдресИнформирования", "checks@strizh-logistic.ru");   
	//ДопПараметрыЧека.Вставить("АдресИнформирования", "couriers.service@checks.ru");
	ДопПараметрыЧека.Вставить("АдресИнформирования", "checks@gl.ru");			
	ДопПараметрыЧека.Вставить("ТипОплаты", ТипОплаты.Ссылка);
	
	//Если Не Реализация.Пустая() Тогда
	//	ДопПараметрыЧека.Вставить("ВыводитьДанныеКонтрагента", Истина);
	//	ДопПараметрыЧека.Вставить("ИННКонтрагента", СокрЛП(Реализация.ВладелецТовара.ИНН));
	//	ДопПараметрыЧека.Вставить("НаименованиеКонтрагента", СокрЛП(Реализация.ВладелецТовара.НаименованиеПолное));
	//	ДопПараметрыЧека.Вставить("ТелефонКонтрагента", lem.ПреобразоватьНомерТелефона(СокрЛП(Реализация.ВладелецТовара.ТелефонИнтернетМагазина)));
	//Иначе	
	ДопПараметрыЧека.Вставить("ВыводитьДанныеКонтрагента", Ложь);
	//КонецеСли;
	
	НаимКассира = "Кассир 1";
	Если Не Кассир.Пустая() Тогда
		НаимКассира = Кассир.Наименование;
	КонецеСли;	
	ДопПараметрыЧека.Вставить("Кассир", НаимКассира);
	
	// Якурнов 06.11.2018 15:12:43  
	Если Не Реализация.Пустая() Тогда
		ДопПараметрыЧека.Вставить("НомерВнешнегоЗаказа", Реализация.НомерВнешнегоЗаказа);
	Иначе
		ДопПараметрыЧека.Вставить("НомерВнешнегоЗаказа", "");
	КонецЕсли;
	
	Если НомерУстройства = Неопределено Тогда
		
		Если КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_0 Или КассаККМ.ВерсияФФД.Пустая() Тогда
			ОтветФЗ = ККМ_ФЗ_54.ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека);
		ИначеЕсли КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_0_5 Тогда
			ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_05(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека);
		ИначеЕсли КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_2 Тогда
			ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_2(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека);			
		КонецеСли;
		
		
		//Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		//	
		//Иначе	
		//	
		//КонецеСли;	
		
		
	Иначе
		
		Если КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_0 Или КассаККМ.ВерсияФФД.Пустая() Тогда
			ОтветФЗ = ККМ_ФЗ_54.ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
		ИначеЕсли КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_0_5 Тогда
			ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_05(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
		ИначеЕсли КассаККМ.ВерсияФФД = Перечисления.ВерсииФФД.Версия_1_2 Тогда
			ОтветФЗ = ККМ_ФЗ_54СерверПереопределяемый.ПечатьЧекаФФД_1_2(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);			
		КонецеСли;
		
		
		//Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		//	ПечатьЧекаФФД_1_05 = ККМ_ФЗ_54.ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
		//Иначе	
		//	ОтветФЗ = ККМ_ФЗ_54.ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДопПараметрыЧека, , ТипКассовогоЧека, НомерУстройства);
		//КонецеСли;	
		
		//ПечатьЧекаФФД_1_05
	КонецеСли;	
	
	//+++ БАО 30.08.2017 №1764
	//---НомерСменыККМ = ПараметрыЧека.НомерСмены;
	//---НомерЧекаККМ = ПараметрыЧека.НомерЧека;
	//--- БАО 30.08.2017 №1746
	
	//+++ БАО 05.10.2017 №1918
	//---Если Не ОтветФЗ Тогда
	Если Не ОтветФЗ.Результат Тогда
		Попытка
			ККМ_ФЗ_54.ЗаписьЛогаОшибкиККМ(ОтветФЗ.КодОшибки, ОтветФЗ.ТекстОшибки, КассаККМ.ПроизводительККМ, Ссылка);				
		Исключение
		КонецПопытки;
		//--- БАО 05.10.2017 №1918	
		ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(СерверККТ, КассаККМ);
		Результат = Ложь;
		Ответ = "Ошибка при пробитии чека ФЗ54";
		Отказ = Истина;
		Возврат Ложь;
	Иначе
		
		//+++ БАО 30.08.2017 №1764
		НомерСменыККМ = ПараметрыЧека.НомерСмены;
		НомерЧекаККМ = ПараметрыЧека.НомерЧека;
		//--- БАО 30.08.2017 №1746
		
		lem.ЗафиксироватьДопПараметрыВЧеке(Ссылка, ПараметрыЧека);
		Результат = Истина;
		Ответ = "";
		Отказ = Ложь;
	КонецЕсли;	
	
	Если НадоОтключитьККТ Тогда
		ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(СерверККТ, КассаККМ);
	КонецеСли;	
	ЧекПробитНаККМ = Истина;
	Попытка
		Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Ответ     = "Не удалось записать документ с установленными параметрами пробитого чека.";
		Отказ     = Истина;
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // ПровестиИРаспечататьЧек()
#КонецЕсли

//Асеев 29.06.2022 (Задача № 4833)<<<

// Функция считает сумму, оплаченную наличными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная наличными.
//
Функция ПолучитьСуммуНаличнойОплаты() Экспорт

	СуммаНаличнойОплаты = 0;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Для Каждого ТекОплата Из Оплата Цикл
			Если ЗначениеЗаполнено(ТекОплата.ВидОплаты)
			   И ТекОплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
				СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТекОплата.Сумма;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СуммаБезналичныхОплат = 0;
		Для Каждого ТекОплата Из Оплата Цикл
			Если ЗначениеЗаполнено(ТекОплата.ВидОплаты)
			   И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ТекОплата.Сумма;
			КонецЕсли;
		КонецЦикла;

		СуммаНаличнойОплаты = Товары.Итог("Сумма") - СуммаБезналичныхОплат;
	КонецЕсли;

	Возврат СуммаНаличнойОплаты;

КонецФункции // ПолучитьСуммуНаличнойОплаты()

// Функция считает сумму, оплаченную безналичными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная наличными.
//
Функция ПолучитьСуммуБезналичнойОплаты() Экспорт

	СуммаБезналичнойОплаты = 0;
	Для Каждого ТекОплата Из Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаБезналичнойОплаты;

КонецФункции // ПолучитьСуммуБезналичнойОплаты()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	// Количество, для услуг не имеющих единицы.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.Услуга = Истина Тогда
			Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
					СтрокаТаблицы.Количество = 1;
				КонецЕсли;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоДок) Тогда
					СтрокаТаблицы.КоличествоДок = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ТаблицаТоваров.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаТоваров.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));

		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			Если СтрокаТаблицы.КоличествоДок = NULL Тогда
				СтрокаТаблицы.КоличествоДок = 0;
			КонецЕсли;

			СтрокаТаблицы.Количество = - СтрокаТаблицы.КоличествоДок;
			СтрокаТаблицы.Сумма = - СтрокаТаблицы.СуммаДок;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;

		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;

			СкидкиЕсть = Истина;
		КонецЕсли;

		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		СуммаСтроки = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма);
		СуммаСтроки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСтроки, мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Разница = СуммаСтроки - СуммаСоСкидками;
		Если Разница <> 0 И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;

		// Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
			        СтрокаТаблицы.Номенклатура,
			        СтрокаТаблицы.ХарактеристикаНоменклатуры,
			        Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Розничная, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;

				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;

					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.Количество * Комплектующая.Количество,
					   мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 1,
					   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;

				СуммаСкидки = СтоимостьКомплектующих - СуммаСтроки;

				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Для Каждого СтрокаСкидки Из ТаблицаДвижений Цикл
			СтрокаСкидки.СуммаСкидки = -СтрокаСкидки.СуммаСкидки;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

// Проверяет правильность заполнения шапки документа.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Склад, КассаККМ, Организация");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Оплата".
//
// Параметры:
//  ТаблицаПоОплате - таблица значений, содержащая данные для проведения и проверки ТЧ "Оплата".
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоОплате, Отказ, Заголовок)

	СуммаВсего = Товары.Итог("Сумма");
	ОплаченоНал = ПолучитьСуммуНаличнойОплаты();
	ОплаченоБезнал = ПолучитьСуммуБезналичнойОплаты();
	ОплаченоВсего = Оплата.Итог("Сумма");

	Если ОплаченоВсего < СуммаВсего Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма всех типов оплат меньше суммы документа!", Отказ, Заголовок);
	КонецЕсли;

	Если ОплаченоБезнал > СуммаВсего Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма безналичной оплаты не может быть больше суммы документа!", Отказ, Заголовок);
	КонецЕсли;

	Если Оплата.Количество() = 1 Тогда
		СтрокаОплаты = Оплата[0];

		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Вид оплаты""!", Отказ, Заголовок);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.Сумма) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Сумма оплаты""!", Отказ, Заголовок);
		КонецЕсли;
	Иначе

		// Укажем, что надо проверить.
		СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма");

		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплата()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента,
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Товары", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		Если СтрокаТаблицы.Услуга <> Истина Тогда // для товаров единица измерения обязательна
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для товара нужно заполнять единицу измерения (строка " + СтрокаТаблицы.НомерСтроки + ").", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары");

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры:
//  РежимПроведения - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоСкидкам - таблица значений, содержащая данные для проведения по скидкам,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслуг = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                           Новый Структура("Услуга", Ложь)).Выгрузить();

	// По регистру РозничнаяВыручка.
	СуммаНалБезСдачи = СуммаДокумента - ПолучитьСуммуБезналичнойОплаты();
	Если СуммаНалБезСдачи <> 0 Тогда
		НаборДвижений = Движения.РозничнаяВыручка;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РозничнаяТочка = КассаККМ;
		СтрокаДвижений.Сумма          = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СуммаНалБезСдачи, СуммаНалБезСдачи);
		СтрокаДвижений.Подразделение  = Неопределено;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

	// По регистру ПродажиПоДисконтнымКартам.
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
		СуммаДок = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СуммаДокумента, СуммаДокумента);

		НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
		СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.ВладелецДисконтнойКарты;
		СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДок, мВалютаРегламентированногоУчета,
								   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВРознице.
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		НаборДвижений = Движения.ТоварыНаСкладах;
	Иначе
		НаборДвижений = Движения.ТоварыВРознице;
	КонецЕсли;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	//Получим таблицу по комплектам.
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварамБезУслуг, ЭтотОбъект);
	ТаблицаПоКомплектам.Колонки.Добавить("Склад");
	ТаблицаПоКомплектам.ЗаполнитьЗначения(Склад, "Склад");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ТаблицаПоКомплектам.Колонки.Добавить("СуммаПродажная");

		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад,
		                 ТаблицаПоКомплектам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаПоКомплектам, ТаблицаПоЦенам);
	КонецЕсли;

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка остатков при оперативном проведении.
	Если СтруктураШапкиДокумента.КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ
	   И РежимПроведения = РежимПроведенияДокумента.Оперативный
	   И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьРасход();
	КонецЕсли;

	// ПО РЕГИСТРУ ПредоставленныеСкидки.
	НаборДвижений = Движения.ПредоставленныеСкидки;

	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "ПолучательСкидки");

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ЧекККМПродажа, "ДокументСкидки");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументСкидки");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") Тогда

		// Заполним вид операции.
		ВидыОперацийЧек = Перечисления.ВидыОперацийЧекККМ;
		Если Основание.ВидОперации = ВидыОперацийЧек.Продажа Тогда
			ВидОперации = ВидыОперацийЧек.Возврат;
			ЧекККМПродажа = Основание;
		Иначе
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		КассаККМ = Основание.КассаККМ;
		ВладелецДисконтнойКарты = Основание.ВладелецДисконтнойКарты;

		// Скопируем состав.
		Товары.Загрузить(Основание.Товары.Выгрузить());
		СоставНабора.Загрузить(Основание.СоставНабора.Выгрузить());
		СерийныеНомера.Загрузить(Основание.СерийныеНомера.Выгрузить());
		СерийныеНомераСоставНабора.Загрузить(Основание.СерийныеНомераСоставНабора.Выгрузить());

		Оплата.Загрузить(Основание.Оплата.Выгрузить());
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//мУдалятьДвижения = НЕ ЭтоНовый();

	//Если ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма");
	//УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	//Перем ДеревоПолейЗапросаПоШапке;

	//
	//Если мУдалятьДвижения Тогда
	//	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	//КонецЕсли;

	//СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	//// Заполним по шапке документа дерево параметров, нужных при проведении.
	//ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	//ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	//ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	//ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"    , "ВидСклада"                     , "ВидСклада");

	//// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	//СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	//СтруктураШапкиДокумента.Вставить("КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ"));

	//// Заголовок для сообщений об ошибках проведения.
	//Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	//// Проверим правильность заполнения шапки документа.
	//ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	//// Проверим допустимость для пользователя цен документа.
	//УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	//// Получим необходимые данные для проведения и проверки заполнения по табличной части "Товары".
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	//СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");

	//Если ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
	//	СтруктураПолей.Вставить("Количество"   , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	//	СтруктураПолей.Вставить("Сумма"        , "Сумма");
	//Иначе
	//	СтруктураПолей.Вставить("КоличествоДок", "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	//	СтруктураПолей.Вставить("СуммаДок"     , "Сумма");
	//КонецЕсли;

	//СтруктураПолей.Вставить("Цена"                               , "Цена");
	//СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	//СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");
	//СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	//СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	//СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	//СтруктураПолей.Вставить("ПроцентСкидкиНаценки"               , "ПроцентСкидкиНаценки");
	//СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	//СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	//СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	//СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	//СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"       , "Количество");

	//РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	//Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И Не ОбменДанными.Загрузка Тогда
	//	РезультатЗапросаПоТоварамОснования = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЧекККМПродажа, "Товары", СтруктураПолей);
	//	ТаблицаТоваровДокумента = РезультатЗапросаПоТоварам.Выгрузить();
	//	ТаблицаТоваровДокумента.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");
	//	ТаблицаТоваровДокументаОснования = РезультатЗапросаПоТоварамОснования.Выгрузить();
	//	ТаблицаТоваровДокументаОснования.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");
	//	ТаблицаТоваровДокументаОснования.Индексы.Добавить("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры");

	//	Для Каждого СтрокаТаблицыТоваровДокумента Из ТаблицаТоваровДокумента Цикл
	//		СтрокиОснования = ТаблицаТоваровДокументаОснования.НайтиСтроки(
	//		                  Новый Структура ("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры",
	//		                                   СтрокаТаблицыТоваровДокумента.Номенклатура,
	//		                                   СтрокаТаблицыТоваровДокумента.Цена,
	//		                                   СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры,
	//		                                   СтрокаТаблицыТоваровДокумента.СерияНоменклатуры));

	//		Продано = 0;
	//		Если СтрокиОснования.Количество() > 0 Тогда
	//			Если СтрокиОснования[0].КоличествоДок >= СтрокаТаблицыТоваровДокумента.КоличествоДок Тогда
	//				Продолжить;
	//			Иначе
	//				Продано = СтрокиОснования[0].КоличествоДок;
	//			КонецЕсли;
	//		КонецЕсли;

	//		ОбщегоНазначения.СообщитьОбОшибке("По документу основанию товара """ + СтрокаТаблицыТоваровДокумента.Номенклатура
	//		                    + """ по цене """ + ОбщегоНазначения.ФорматСумм(СтрокаТаблицыТоваровДокумента.Цена, мВалютаРегламентированногоУчета)+ """ "
	//		                    + Символы.ПС + ? (ЗначениеЗаполнено(СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры),
	//		                         "с характеристикой """ + СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры + """", "")
	//		                    + ? (ЗначениеЗаполнено(СтрокаТаблицыТоваровДокумента.СерияНоменклатуры),
	//		                         "с серией """ + СтрокаТаблицыТоваровДокумента.СерияНоменклатуры + """", "")
	//		                    + "продано """ + Продано +""", возвращается от покупателя """
	//		                    + СтрокаТаблицыТоваровДокумента.КоличествоДок + """.", Отказ, Заголовок);
	//	КонецЦикла;
	//КонецЕсли;

	//// Подготовим таблицу товаров для проведения.
	//ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	//// Проверить заполнение ТЧ "Товары".
	//ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	//// Получим необходимые данные для проведения и проверки заполнения по табличной части "Оплата".
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("ВидОплаты", "ВидОплаты");
	//СтруктураПолей.Вставить("Сумма"    , "Сумма");

	//ТаблицаПоОплате = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей).Выгрузить();

	//// Проверить заполнение ТЧ "Оплата".
	//ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоОплате, Отказ, Заголовок);

	//// Проверить заполнение ТЧ "Состав набора".
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("Номенклатура");
	//СтруктураПолей.Вставить("Количество");
	//СтруктураПолей.Вставить("Цена");
	//ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);
	//
	//Движения.ЖурналККМ.Очистить();
	//Движения.ЖурналККМ.Записывать = Истина;
	//
	//Если Не Отказ Тогда

	//	// Подготовим таблицу скидок для проведения.
	//	//ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);

	//	//ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);
	//	
	//	Если НоменклатураДоставки.Пустая() И Реализация.Пустая() И ЧекПробитНаККМ Тогда
	//		Нов = Движения.ЖурналККМ.Добавить();
	//		
	//		Нов.Период = Дата;
	//		Нов.ЧекПробитОшибочно = ЧекПробитОшибочно;
	//		Нов.ВидДвижения = ВидДвиженияНакопления.Приход;
	//		Нов.ВидОперации = ВидОперации;
	//		Нов.КассаККМ = КассаККМ;
	//		Нов.Кассир = Ответственный;
	//		Нов.Отдел = Склад;
	//		
	//		Нов.Секция = Секция;
	//		Нов.Сумма = Товары.Итог("Сумма");
	//		Нов.ТипОплаты = ТипОплаты;
	//		Нов.ЧекККМ = Ссылка;
	//		Нов.ЧекПробитОшибочно = ЧекПробитОшибочно;
	//	КонецЕсли;	
	//КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	//ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

// Функция выполняет пересчет автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево - Истина, если автоматические скидки были рассчитаны.
//
Функция ПересчитатьАвтоматическиеСкидки() Экспорт

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		Если Оплата.Количество() = 1 Тогда
			ВидОплатыДляСкидок = Оплата[0].ВидОплаты;
		Иначе
			ВидОплатыДляСкидок = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации"                 , Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента"                , Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары));
		СтруктураПараметров.Вставить("Карта"                         , ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"                     , ВидОплатыДляСкидок);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика"               , ПолучитьЗначениеУчетнойПолитики());

		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПересчитатьАвтоматическиеСкидки()

//Проверяет необходимость Расчета автоматических скидок.
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	Если Не МожноРассчитыватьАвтоматическиеСкидки()
	 Или Проведен
	 Или ЧекПробитНаККМ
	 Или ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // РассчитыватьАвтоматическиеСкидки()

// Функция проверяет возможность расчета автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево.
//
Функция МожноРассчитыватьАвтоматическиеСкидки() Экспорт

	Если мРассчитыватьАвтоматическиеСкидки = Неопределено Тогда
		Если ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоКоличествуТовара

		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоСуммеДокумента
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоВидуОплаты
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоДисконтнойКарте Тогда
			мРассчитыватьАвтоматическиеСкидки = Истина;
		Иначе
			мРассчитыватьАвтоматическиеСкидки = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат мРассчитыватьАвтоматическиеСкидки;

КонецФункции // МожноРассчитыватьАвтоматическиеСкидки()

// Функция возвращает структуру со значениями учетной политики.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьЗначениеУчетнойПолитики() Экспорт

	Если мУчетнаяПолитика = Неопределено Тогда
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь);
	КонецЕсли;

	Возврат мУчетнаяПолитика;

КонецФункции // ПолучитьЗначениеУчетнойПолитики()

Функция УстановленЕНВДОрганизации(СброситьКэш = Ложь) Экспорт

	Если СброситьКэш
	 Или мОрганизацияОблагаетсяЕНВД = Неопределено Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РозничнаяТорговляОблагаетсяЕНВД
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&Дата, Организация = &Ссылка) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
		|");

		Запрос.УстановитьПараметр("Ссылка", КассаККМ.Владелец);
		Запрос.УстановитьПараметр("Дата"  , ?(ЭтоНовый(), ТекущаяДата(), Дата));

		Выборка = Запрос.Выполнить().Выбрать();
		мОрганизацияОблагаетсяЕНВД = ?(Выборка.Следующий(), Выборка.РозничнаяТорговляОблагаетсяЕНВД, Ложь);
	КонецЕсли;

	Возврат мОрганизацияОблагаетсяЕНВД;

КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	Реализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	НоменклатураДоставки = Справочники.Номенклатура.ПустаяСсылка();
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мАннулировать                   = Ложь;
мПараметрыСвязиСтрокТЧ          = Новый Соответствие;

мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
   ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
   Неопределено);

УказаниеСкладов     = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

мОрганизацияОблагаетсяЕНВД = Неопределено;