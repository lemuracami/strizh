
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ЗначениеЗаполнено(ТекущийСтатус) Тогда
	
		РаботаСоСтатусамиЗаказовСервер.СохранитьСтатус(Заказ, ТекущийСтатус.Код, ЭтотОбъект.Ссылка, ИнициаторСостояния, ТерминалОбработки);
		
		Если УстанавливатьТекущийСтатус Тогда
			
			ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("Initiator", РаботаСАдминкойСервер.ИнициаторСостоянияВАдминку(ИнициаторСостояния));	
			ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ProcessingTerminal", Число(ТерминалОбработки.Код), ДопПараметрыСтатуса);
			Если НЕ ПричинаОтказаПереноса.Пустая() Тогда
				ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ReasonId ", СокрЛП(ПричинаОтказаПереноса.Код), ДопПараметрыСтатуса); 
				ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("reasonRefusal ", СокрЛП(ПричинаОтказаПереноса.Наименование), ДопПараметрыСтатуса);
			КонецЕсли;	 
			
			МассивСтатусов = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(Заказ.Номер, ТекущийСтатус.Код, "Установка статусов заказов",,,,ДопПараметрыСтатуса);
			РезультатОтправки = mas.ОтправитьМассивСтатусовЗаказов(МассивСтатусов);
			
		Конецесли;	
		
		// ++Задача № 3467
		Если ТекущийСтатус.Код = 235 
			ИЛИ ТекущийСтатус.Код = 410
			ИЛИ ТекущийСтатус.Код = 232 тогда
			
			Движения.СостоянияЗаказов.Записывать = Истина;
			Движения.СостоянияЗаказов.Очистить();

			Нов 		= Движения.СостоянияЗаказов.Добавить();
			Нов.Период 	= Дата;
			Нов.Заказ 	= Заказ;
			Нов.Доставка = РегистрыСведений.ДополнительныеПараметрыЗаказа.Получить(Новый Структура("Заказ", Заказ)).Доставка;//.Доставка;
			
			Нов.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
			
			Если ТекущийСтатус.Код = 232 тогда
				Нов.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки;
				Нов.ДатаПереноса = ДатаПереноса;
			Иначе
				Нов.ПричинаНеВыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда;
			КонецЕсли;
			
			Нов.ДатаДоставки 		= Заказ.Дата;		
			Нов.ПричинаОтказа 		= ПричинаОтказаПереноса;
			Нов.СторонаПретензий 	= ПричинаОтказаПереноса.СторонаПретензии;
			Нов.Инициатор 			= ИнициаторСостояния;
			
		КонецЕсли;	
		// --Задача № 3467
		
		//Геннадий #4855 21.07.2022 ++
		Если ТекущийСтатус.Код = 235 Тогда
			ОбновлениеТарифицируемогоВеса(Заказ);
		КонецЕсли;
		//Геннадий #4855 21.07.2022 --

	КонецЕсли;

КонецПроцедуры

//Геннадий #4855 21.07.2022 ++
Процедура ОбновлениеТарифицируемогоВеса(Заказ)
	
	//Проверим, если РС.ДополнительныеПараметрыЗаказа.ТарифицируемыйВес = 0  
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеПараметрыЗаказа.Заказ КАК Заказ,
		|	ДополнительныеПараметрыЗаказа.ТарифицируемыйВес КАК ТарифицируемыйВес
		|ИЗ
		|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|ГДЕ
		|	ДополнительныеПараметрыЗаказа.Заказ = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Если ВыборкаДетальныеЗаписи.ТарифицируемыйВес = 0 Тогда
				
				Попытка
					ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(800); 
				Исключение
					Сообщить("Не удалось создать подключение: " + ОписаниеОшибки());
					Возврат;
				КонецПопытки;
				
				//Запрос к админке
				МассивНомеровЗаказов = Новый Массив;
				МассивНомеровЗаказов.Добавить(СокрЛП(Заказ.Номер));	
				Мас = СтрСоединить(МассивНомеровЗаказов,",");
				
				Ткст 	= "select dbo.mv_orders.orderIDStr, dbo.mv_orders.chargeableWeight from dbo.mv_orders where dbo.mv_orders.orderID in (" + Мас + ")";
				Рез_ 	= МаршрутизацияЗаказовСервер.ЗапросКИнтернетМагазинуПоВыгрузкеМашин(Ткст, ПодключениеКМагазину);
				Рез 	= Евген.СоздатьТаблицу(Рез_, "orderIDStr, chargeableWeight_Ч");
				
				Для Каждого строка Из Рез Цикл
					
					Если Не Заказ.Пустая() Тогда
						НаборТВ = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
						НаборТВ.Отбор.Заказ.Установить(Заказ);
						НаборТВ.Прочитать();
						Если НаборТВ.Количество() Тогда
							НаборТВ[0].ТарифицируемыйВес = строка.chargeableWeight_Ч;
						КонецЕсли;
						НаборТВ.Записать();
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры
//Геннадий #4855 21.07.2022 --

#Область СтрарыйМетодПроведенияДокумента

//Процедура ОбработкаПроведения(Отказ, РежимПроведения)
//	
//	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
//	
//	//1. Выставлять статусинтернетмагазина на реализации = 4
//	РеализацияОбъект = Заказ.ПолучитьОбъект();
//	РеализацияОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//	РеализацияОбъект.СтатусИнтернетМагазина = 4;
//	
//	
//	//2. Помечать док на удаление		
//	РеализацияОбъект.ПометкаУдаления = Истина;
//	РеализацияОбъект.ОбменДанными.Загрузка = Истина;
//	РеализацияОбъект.Записать(РежимЗаписиДокумента.Запись);
//		
//	
//	//3. Делать записи в РН Закрытые заказы по подобию документа Закрытие
//	ЗакрытыеЗаказы();
//	
//	
//	//4. Делать записи в РС СтатусыСкладскогоУчета по подобию загрузки отклоненного заказа в обработке ЗагрузкаИзИнтернетМагазина
//	Движения.СтатусыСкладскогоУчета.Записывать = Истина;
//	
//	Если smv.ЗаказПодтвержденПриходом(Заказ, ТекущаяДата(), Справочники.СтатусыСкладскогоУчета.ПриходПроверен) И smv.НебылоВозврата(Заказ) Тогда		
//		Движение = Движения.СтатусыСкладскогоУчета.Добавить();
//		Движение.Заказ = Заказ;
//		Движение.Период = Дата;
//		Движение.Регистратор = ЭтотОбъект.Ссылка;    
//		Движение.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
//		
//		Если СтатусAxiomus = 81 Тогда  // предотмена			
//			Движение.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат1;	
//		ИначеЕсли СтатусAxiomus = 120 Тогда  // полный отказ
//		    Движение.СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат2;
//		КонецЕсли;		
//   	КонецЕсли;
//	
//		
//	
//	//5. Обновлять статус заказа в админке, опять же, по подобию документа ЗакрытиеЗаказов
//	
//	//ЗаписьЖурналаРегистрации("Отмена заказа", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.РеализацияТоваровУслуг, Заказ, ""+БылСтатус+" -> 4");
//	
//	Комм = Лев(СокрЛП(Заказ.КомментарийСД), 100);	
//	ReasonRefusalID = ?(ЗначениеЗаполнено(ПричинаОтклоненияЗаказаВСистеме.Код), Прав(ПричинаОтклоненияЗаказаВСистеме.Код,1), 0);
//    orderID = СокрЛП(Заказ.Номер);
//    who = ПараметрыСеанса.ТекущийПользователь;
//    completeDate = Евген.ДатаВSQL(Заказ.Дата, Ложь);
//	//serviceDC = Формат(Стр.Показатель1 + Стр.Показатель2 + Стр.Показатель3 + Стр.Показатель4 + Стр.Показатель5 + Стр.Показатель6, "ЧРД=.; ЧН=0; ЧГ=");
//	//serviceDCclean = Формат(Стр.УслугиСДЧистые, "ЧРД=.; ЧН=0; ЧГ=");	
//	serviceDC = Формат(0, "ЧРД=.; ЧН=0; ЧГ=");
//	serviceDCclean = Формат(0, "ЧРД=.; ЧН=0; ЧГ=");	
//    comment = СтрЗаменить(Комм, "'", """");
//    isRefusal = 0;
//	//ReasonRefusal = ?(Стр.ПричинаОтказа.Пустая(), "", СокрЛП(Стр.ПричинаОтказа.Наименование));
//	ReasonRefusal = "";
//    deliveryPrice = "NULL";
//    payType  = "NULL";
//							
//	// Отключено в рамкахЗадача № 2586							
//	//ТекстЗапроса = "
//	//|DECLARE @t TSetOrderStatus
//	//|INSERT INTO @t ([orderID],[statusId],[who],[completeDate],serviceDC,serviceDCclean,comment, isRefusal, ReasonRefusal, deliveryPrice, payType, ReasonRefusalID) VALUES (" +
//	//orderID +", 4, '" +who+"', '"+completeDate+"', "+serviceDC+"," +serviceDCclean+",'" +comment+"', "+isRefusal+ ", '" +ReasonRefusal+"'," +deliveryPrice+ "," +payType+","+ReasonRefusalID+")
//	//|EXEC import_setOrderStatusFrom1C @t
//	//|";
//	//Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Соединение);
//	
//	// Задача № 2586	
//	closeFlag = ?(РежимПроведения = РежимЗаписиДокумента.Проведение, 1, 0);
//	
//	mas.ОтправитьФинальныйСтатусВАдминку(orderID, 4, comment,
//	who,
//	Заказ.Дата,
//	serviceDC,
//	serviceDCclean,
//	IsRefusal,
//	,
//	,
//	,
//	ReasonRefusalID,
//	,
//	closeFlag,
//	Заказ.ТерминалДоставки.Код);
//	// Задача № 2586

//	
//КонецПроцедуры

//// Движение по РН ЗакрытыеЗаказы
//Процедура ЗакрытыеЗаказы()

//	Движения.ЗакрытыеЗаказы.БлокироватьДляИзменения = Истина;
//    Движения.ЗакрытыеЗаказы.Записать();	
//	
//		
//	Нов = Движения.ЗакрытыеЗаказы.Добавить();
//	                    
//	Нов.ПричинаОтклоненияЗаказа = ПричинаОтклоненияЗаказаВСистеме;
//	Нов.Период = Заказ.Дата;
//	
//	//Нов.БанковскаяКомиссия = ;
//	//Нов.СтраховойСбор      = ;                
//	//Нов.ПричинаОтклоненияЗаказа = ;
//	//Нов.Возврат = ;
//	//Нов.Доставка = ;
//	Нов.ИнтернетМагазин = Заказ.ВладелецТовара;
//	//Нов.КассовоеОбслуживание = ;	
//	Нов.Клиент = Заказ.Контрагент;
//	//Нов.Оприходование = ;
//	//Нов.Перемещение = ;
//	//Нов.УслугиСДЧистые =;
//	//Нов.Поступление = ;
//	//Нов.ПричинаНевыполнения = ;
//	Нов.Реализация = Заказ;
//	//Нов.Списание = ;
//	//Нов.СтатусЗаказа = ;
//	//Нов.VIPДоставка = ;
//	Нов.ПредоплатаПоКредиту = Заказ.ПредоплатаПоКредиту;
//	Нов.ЗонаТарификации = Заказ.ЗонаТарификации;		
//	Нов.ТерминалДоставки = Заказ.ТерминалДоставки;
//	Нов.ТерминалПриёма = Заказ.ТерминалПриема;
//	//Нов.ФактическийВес = Заказ.ФактическийВес;
//	Нов.СтатусИнтернетМагазина = Справочники.СтатусЗаказаИнтернетМагазина.ЗаказОтклонен;	
//	//Нов.СуммаДоставкиДоМКАД = ;
//	//Нов.СуммаДоставкиЗаМКАД = ;
//		
//	//ОбновитьОтказСЗаездомПоЗаказуВАдминке(СокрЛП(Тек.Реализация.Номер));
//	
//	Нов.СуммаОценочная = Заказ.Товары.Итог("Сумма");
//	Нов.СуммаПолученная = Заказ.Товары.Итог("Сумма");
//	Нов.КатегорияДоставки = Заказ.КатегорияДоставки;

//	//Нов.ТипОплаты = Заказ.ТипОплаты;
//	Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
//	//Нов.УслугиСД = ;
//	//Нов.Масса = ;
//	//Нов.Экспедитор = ;
//	//Нов.Водитель = ;
//	//Нов.АгентскоеВознаграждение = Заказ.АгентскоеВознаграждение;
//	//Нов.Транспорт = ;
//	//Нов.ПризнакВозврата = ;	
//	//Нов.ЮрЛицо = ;	
//	//Нов.ТарифнаяСетка = Заказ.ТарифнаяСетка;
//	//Нов.ТарифнаяСеткаПартнера = Заказ.ТарифнаяСеткаПартнера;
//	//Нов.РасчетныйБрейк = Заказ.РасчетныйБрейк;				
//	//Нов.ОценочнаяСтоимость = ;
//	
//	Если ЗначениеЗаполнено(Заказ.ВладелецТовара) Тогда 
//		Если Не Заказ.ВладелецТовара.Родитель.ОсновнойМагазин.Пустая() Тогда
//			Нов.Партнер = Заказ.ВладелецТовара.Родитель.ОсновнойМагазин;
//		Иначе
//			Нов.Партнер = Заказ.ВладелецТовара;
//		КонецеСли;
//	КонецЕсли;	
//	
//    Движения.ЗакрытыеЗаказы.БлокироватьДляИзменения = Истина;
//    Движения.ЗакрытыеЗаказы.Записать();

//КонецПроцедуры

#КонецОбласти