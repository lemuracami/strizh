
Процедура ЗаполнитьДвижения(эк_ЗатратыЗаработнаяПлата, зпИсходныеДанныеРасчетаЗППоЗаказам = Неопределено, зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления = Неопределено) Экспорт
	
	Если зпИсходныеДанныеРасчетаЗППоЗаказам <> Неопределено И зпИсходныеДанныеРасчетаЗППоЗаказам.Количество() Тогда
		СтатусыЗаказа = Новый Соответствие;
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка(), Справочники.СтатусыЗаказов.Выполнен);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда, Справочники.СтатусыЗаказов.Отмена);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом, Справочники.СтатусыЗаказов.Отмена);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом, Справочники.СтатусыЗаказов.ПереносСЗаездом);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки, Справочники.СтатусыЗаказов.Перенос);
		
		ВидПоказателяУчетаЗП = Перечисления.экВидыПоказателейУчетаЗП.ОсновнаяЧастьЗП;
		Начисление = Справочники.зпНачисления.ДоставкаЗаказа;
		
		Для Каждого ДвижениеИсточник Из зпИсходныеДанныеРасчетаЗППоЗаказам Цикл
			ДвижениеПриемник = эк_ЗатратыЗаработнаяПлата.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеПриемник, ДвижениеИсточник);
			ДвижениеПриемник.СуммаЗП = ДвижениеИсточник.СуммаРасчетаЗП;
			ДвижениеПриемник.ОсновноеНачисление = ДвижениеИсточник.Начисление;
			ДвижениеПриемник.СтатусЗаказа = СтатусыЗаказа[ДвижениеИсточник.ПричинаНевыполненияДоставки];
			ДвижениеПриемник.ВидПоказателяУчетаЗП = ВидПоказателяУчетаЗП;
			ДвижениеПриемник.Начисление = Начисление;
		КонецЦикла;
	КонецЕсли;
	
	Если зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления <> Неопределено И зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.Количество() Тогда
		
		ТаблицаПриемник = эк_ЗатратыЗаработнаяПлата.ВыгрузитьКолонки();//для допзапроса
		
		Для Каждого ДвижениеИсточник Из зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления Цикл
			СтрокаПриемник = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДвижениеИсточник);
			СтрокаПриемник.СуммаЗП = ДвижениеИсточник.Сумма;
		КонецЦикла;
		
		ВидПоказателяУчетаЗП = Перечисления.экВидыПоказателейУчетаЗП.ОсновнаяЧастьЗП;
		
		ТаблицаРейсов = ТаблицаПриемник.Скопировать(, "Рейс");
		ТаблицаРейсов.Свернуть("Рейс");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", КонецДня(СтрокаПриемник.Период));
		Запрос.УстановитьПараметр("Рейсы", ТаблицаРейсов.ВыгрузитьКолонку("Рейс"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Рейс КАК Рейс,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.Заказ КАК Заказ,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.КатегорияЗаказа КАК КатегорияЗаказа,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ЗонаДоставки КАК ЗонаДоставки,
		|	зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ПолигонМаршрутизацииЗаказа КАК ПолигонМаршрутизацииЗаказа,
		|	ВЫБОР зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.ПричинаНевыполненияДоставки
		|		КОГДА ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатусыЗаказов.Выполнен)
		|		КОГДА ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатусыЗаказов.Отмена)
		|		КОГДА ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатусыЗаказов.Отмена)
		|		КОГДА ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатусыЗаказов.ПереносСЗаездом)
		|		КОГДА ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатусыЗаказов.Перенос)
		|	КОНЕЦ КАК СтатусЗаказа
		|ИЗ
		|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(&Период, Рейс В (&Рейсы)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних";

		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
		СтруктураЗаказ = Новый Структура("Рейс,Заказ,ФизЛицо");
		
		Для Каждого СтрокаПриемник Из ТаблицаПриемник Цикл
			ДвижениеПриемник = эк_ЗатратыЗаработнаяПлата.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеПриемник, СтрокаПриемник);
			
			ЗаполнитьЗначенияСвойств(СтруктураЗаказ, СтрокаПриемник);
			СтрокиЗаказа = ТаблицаЗаказов.НайтиСтроки(СтруктураЗаказ);
			Если СтрокиЗаказа.Количество() Тогда
				ЗаполнитьЗначенияСвойств(ДвижениеПриемник, СтрокиЗаказа[0]);
			КонецЕсли;
			ДвижениеПриемник.ВидПоказателяУчетаЗП = ВидПоказателяУчетаЗП;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьЧасы(эк_ЗатратыЗаработнаяПлата, зпИсходныеДанныеРасчетаЗПЧасы, зпИсходныеДанныеРасчетаЗППоЗаказам = Неопределено) Экспорт
	
	//зпИсходныеДанныеРасчетаЗПЧасы - ведущие данные, если они не пишутся - ничего не пишется
	//зпИсходныеДанныеРасчетаЗППоЗаказам - заказы и прочая инфа
	
	Если зпИсходныеДанныеРасчетаЗПЧасы.Количество() Тогда
		СтатусыЗаказа = Новый Соответствие;
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка(), Справочники.СтатусыЗаказов.Выполнен);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда, Справочники.СтатусыЗаказов.Отмена);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом, Справочники.СтатусыЗаказов.Отмена);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом, Справочники.СтатусыЗаказов.ПереносСЗаездом);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки, Справочники.СтатусыЗаказов.Перенос);
		
		ОписаниеТиповЧисло10 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10);
		ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3);
		
		ТаблицаНачислений = зпИсходныеДанныеРасчетаЗПЧасы.Выгрузить(, "Период,ФизЛицо,ОсновноеНачисление,Рейс,Начисление,СуммаОплаты");
		КолонкиТаблицы = ТаблицаНачислений.Колонки;
		КолонкиТаблицы.СуммаОплаты.Имя = "СуммаЗП";
		КолонкиТаблицы.Добавить("РаспределяемаяСумма", ОписаниеТиповЧисло15_3);
		КолонкиТаблицы.Добавить("КоличествоЗаказовДляРаспределения", ОписаниеТиповЧисло10);
		
		Если зпИсходныеДанныеРасчетаЗППоЗаказам = Неопределено Тогда
			//Асеев 17.10.2023 (Задача № 5147)>>>
			ТаблицаРейсов = ТаблицаНачислений.Скопировать(, "Рейс");
			ТаблицаРейсов.Свернуть("Рейс");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Период", ТаблицаНачислений[0].Период);
			Запрос.УстановитьПараметр("Рейсы", ТаблицаРейсов.ВыгрузитьКолонку("Рейс"));
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(&Период, Рейс В (&Рейсы)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних";
			
			ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
			//Асеев 17.10.2023 (Задача № 5147)<<<
		Иначе
			ТаблицаЗаказов = зпИсходныеДанныеРасчетаЗППоЗаказам.Выгрузить();
		КонецЕсли;
		
		ТаблицаФизЛиц = ТаблицаЗаказов.Скопировать(, "ФизЛицо");
		КолонкиТаблицы = ТаблицаФизЛиц.Колонки;
		КолонкиТаблицы.Добавить("КоличествоЗаказов", ОписаниеТиповЧисло10);
		
		ТаблицаФизЛиц.ЗаполнитьЗначения(1, "КоличествоЗаказов");
		ТаблицаФизЛиц.Свернуть("ФизЛицо", "КоличествоЗаказов");
		
		ВидПоказателяУчетаЗП = Перечисления.экВидыПоказателейУчетаЗП.РаспределяемаяЧастьЗППоКоличествуЗаказов;
		
		СтруктураФизЛицо = Новый Структура("ФизЛицо");
		Для Каждого СтрокаФизЛица Из ТаблицаФизЛиц Цикл
			СтруктураФизЛицо.ФизЛицо = СтрокаФизЛица.ФизЛицо;
			
			СтрокиЗаказов = ТаблицаЗаказов.НайтиСтроки(СтруктураФизЛицо);
			
			Для Каждого СтрокаНачисления Из ТаблицаНачислений.НайтиСтроки(СтруктураФизЛицо) Цикл
				СтрокаНачисления.РаспределяемаяСумма = СтрокаНачисления.СуммаЗП;
				СтрокаНачисления.КоличествоЗаказовДляРаспределения = СтрокаФизЛица.КоличествоЗаказов;
				СтрокаНачисления.СуммаЗП = СтрокаНачисления.РаспределяемаяСумма / СтрокаНачисления.КоличествоЗаказовДляРаспределения;
				
				Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл 
					ДвижениеПриемник = эк_ЗатратыЗаработнаяПлата.Добавить();
					ЗаполнитьЗначенияСвойств(ДвижениеПриемник, СтрокаЗаказа);
					ЗаполнитьЗначенияСвойств(ДвижениеПриемник, СтрокаНачисления);
					ДвижениеПриемник.СтатусЗаказа = СтатусыЗаказа[СтрокаЗаказа.ПричинаНевыполненияДоставки];
					ДвижениеПриемник.ВидПоказателяУчетаЗП = ВидПоказателяУчетаЗП;
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура РаспределитьДопНачисленияРейсов(эк_ЗатратыЗаработнаяПлата, зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления, зпИсходныеДанныеРасчетаЗППоЗаказам = Неопределено) Экспорт
	
	//зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления - ведущие данные, если они не пишутся - ничего не пишется
	//зпИсходныеДанныеРасчетаЗППоЗаказам - заказы и прочая инфа
	
	Если зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.Количество() Тогда
		СтатусыЗаказа = Новый Соответствие;
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка(), Справочники.СтатусыЗаказов.Выполнен);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда, Справочники.СтатусыЗаказов.Отмена);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом, Справочники.СтатусыЗаказов.Отмена);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом, Справочники.СтатусыЗаказов.ПереносСЗаездом);
		СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки, Справочники.СтатусыЗаказов.Перенос);
		
		ОписаниеТиповЧисло10 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10);
		ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3);
		
		ТаблицаНачислений = зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.Выгрузить(, "Период,ФизЛицо,ОсновноеНачисление,Рейс,Начисление,Сумма");
		КолонкиТаблицы = ТаблицаНачислений.Колонки;
		КолонкиТаблицы.Сумма.Имя = "СуммаЗП";
		КолонкиТаблицы.Добавить("РаспределяемаяСумма", ОписаниеТиповЧисло15_3);
		КолонкиТаблицы.Добавить("КоличествоЗаказовДляРаспределения", ОписаниеТиповЧисло10);
		
		Если зпИсходныеДанныеРасчетаЗППоЗаказам = Неопределено Тогда
			//Асеев 23.10.2023 (Задача № 5151)>>>
			ТаблицаРейсов = ТаблицаНачислений.Скопировать(, "Рейс");
			ТаблицаРейсов.Свернуть("Рейс");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Период", ТаблицаНачислений[0].Период);
			Запрос.УстановитьПараметр("Рейсы", ТаблицаРейсов.ВыгрузитьКолонку("Рейс"));
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(&Период, Рейс В (&Рейсы)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних";
			
			ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
			//Асеев 23.10.2023 (Задача № 5151)<<<
		Иначе
			ТаблицаЗаказов = зпИсходныеДанныеРасчетаЗППоЗаказам.Выгрузить();
		КонецЕсли;
		
		ТаблицаФизЛиц = ТаблицаЗаказов.Скопировать(, "ФизЛицо");
		КолонкиТаблицы = ТаблицаФизЛиц.Колонки;
		КолонкиТаблицы.Добавить("КоличествоЗаказов", ОписаниеТиповЧисло10);
		
		ТаблицаФизЛиц.ЗаполнитьЗначения(1, "КоличествоЗаказов");
		ТаблицаФизЛиц.Свернуть("ФизЛицо", "КоличествоЗаказов");
		
		ВидПоказателяУчетаЗП = Перечисления.экВидыПоказателейУчетаЗП.РаспределяемаяЧастьЗППоКоличествуЗаказов;
		
		СтруктураФизЛицо = Новый Структура("ФизЛицо");
		Для Каждого СтрокаФизЛица Из ТаблицаФизЛиц Цикл
			СтруктураФизЛицо.ФизЛицо = СтрокаФизЛица.ФизЛицо;
			
			СтрокиЗаказов = ТаблицаЗаказов.НайтиСтроки(СтруктураФизЛицо);
			
			Для Каждого СтрокаНачисления Из ТаблицаНачислений.НайтиСтроки(СтруктураФизЛицо) Цикл
				СтрокаНачисления.РаспределяемаяСумма = СтрокаНачисления.СуммаЗП;
				СтрокаНачисления.КоличествоЗаказовДляРаспределения = СтрокаФизЛица.КоличествоЗаказов;
				СтрокаНачисления.СуммаЗП = СтрокаНачисления.РаспределяемаяСумма / СтрокаНачисления.КоличествоЗаказовДляРаспределения;
				
				Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл 
					ДвижениеПриемник = эк_ЗатратыЗаработнаяПлата.Добавить();
					ЗаполнитьЗначенияСвойств(ДвижениеПриемник, СтрокаЗаказа);
					ЗаполнитьЗначенияСвойств(ДвижениеПриемник, СтрокаНачисления);
					ДвижениеПриемник.СтатусЗаказа = СтатусыЗаказа[СтрокаЗаказа.ПричинаНевыполненияДоставки];
					ДвижениеПриемник.ВидПоказателяУчетаЗП = ВидПоказателяУчетаЗП;
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьМинимальнуюЗП(эк_ЗатратыЗаработнаяПлата, зпИсходныеДанныеРасчетаМинимальнойЗП) Экспорт
	
	Если зпИсходныеДанныеРасчетаМинимальнойЗП.Количество() Тогда
		
		ОписаниеТиповЧисло10 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10);
		ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3);
		
		ТаблицаНачислений = зпИсходныеДанныеРасчетаМинимальнойЗП.ВыгрузитьКолонки("Период,ФизЛицо,ОсновноеНачисление,Рейс");
		КолонкиТаблицы = ТаблицаНачислений.Колонки;
		КолонкиТаблицы.Добавить("СуммаЗП", ОписаниеТиповЧисло15_3);
		КолонкиТаблицы.Добавить("РаспределяемаяСумма", ОписаниеТиповЧисло15_3);
		КолонкиТаблицы.Добавить("КоличествоЗаказовДляРаспределения", ОписаниеТиповЧисло10);
		Для Каждого ДвижениеИсточник Из зпИсходныеДанныеРасчетаМинимальнойЗП Цикл
			//Асеев 27.05.2024 (Задача № 5275)>>>
			Если Не ДвижениеИсточник.ОтменаНачисленияМинимальнойСтавки Тогда
				//Асеев 27.05.2024 (Задача № 5275)<<<
				СтрокаНачисления = ТаблицаНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНачисления, ДвижениеИсточник);
				СтрокаНачисления.СуммаЗП = Макс(ДвижениеИсточник.СуммаМинимальнойСтавки - ДвижениеИсточник.СуммаИтого, 0);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаНачислений.Количество() Тогда
			СтатусыЗаказа = Новый Соответствие;
			СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка(), Справочники.СтатусыЗаказов.Выполнен);
			СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда, Справочники.СтатусыЗаказов.Отмена);
			СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом, Справочники.СтатусыЗаказов.Отмена);
			СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом, Справочники.СтатусыЗаказов.ПереносСЗаездом);
			СтатусыЗаказа.Вставить(Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки, Справочники.СтатусыЗаказов.Перенос);
			
			ТаблицаРейсов = ТаблицаНачислений.Скопировать(, "Рейс");
			ТаблицаРейсов.Свернуть("Рейс");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Период", ТаблицаНачислений[0].Период);
			Запрос.УстановитьПараметр("Рейсы", ТаблицаРейсов.ВыгрузитьКолонку("Рейс"));
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(&Период, Рейс В (&Рейсы)) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних";
			
			ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
			
			ТаблицаФизЛиц = ТаблицаЗаказов.Скопировать(, "ФизЛицо,Рейс");
			КолонкиТаблицы = ТаблицаФизЛиц.Колонки;
			КолонкиТаблицы.Добавить("КоличествоЗаказов", ОписаниеТиповЧисло10);
			
			ТаблицаФизЛиц.ЗаполнитьЗначения(1, "КоличествоЗаказов");
			ТаблицаФизЛиц.Свернуть("ФизЛицо,Рейс", "КоличествоЗаказов");
			
			ВидПоказателяУчетаЗП = Перечисления.экВидыПоказателейУчетаЗП.РаспределяемаяЧастьЗППоКоличествуЗаказов;
			Начисление = Справочники.зпНачисления.ДоплатаДоМинимальногоРазмераОплаты;
			
			СтруктураФизЛицо = Новый Структура("Рейс,ФизЛицо");
			Для Каждого СтрокаФизЛица Из ТаблицаФизЛиц Цикл
				СтруктураФизЛицо.ФизЛицо = СтрокаФизЛица.ФизЛицо;
				СтруктураФизЛицо.Рейс = СтрокаФизЛица.Рейс;
				
				СтрокиЗаказов = ТаблицаЗаказов.НайтиСтроки(СтруктураФизЛицо);
				
				Для Каждого СтрокаНачисления Из ТаблицаНачислений.НайтиСтроки(СтруктураФизЛицо) Цикл
					СтрокаНачисления.РаспределяемаяСумма = СтрокаНачисления.СуммаЗП;
					СтрокаНачисления.КоличествоЗаказовДляРаспределения = СтрокаФизЛица.КоличествоЗаказов;
					СтрокаНачисления.СуммаЗП = СтрокаНачисления.РаспределяемаяСумма / СтрокаНачисления.КоличествоЗаказовДляРаспределения;
					
					Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл 
						ДвижениеПриемник = эк_ЗатратыЗаработнаяПлата.Добавить();
						ЗаполнитьЗначенияСвойств(ДвижениеПриемник, СтрокаЗаказа);
						ЗаполнитьЗначенияСвойств(ДвижениеПриемник, СтрокаНачисления);
						ДвижениеПриемник.СтатусЗаказа = СтатусыЗаказа[СтрокаЗаказа.ПричинаНевыполненияДоставки];
						ДвижениеПриемник.ВидПоказателяУчетаЗП = ВидПоказателяУчетаЗП;
						ДвижениеПриемник.Начисление = Начисление;
					КонецЦикла;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
