

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НайтиКонтрагента(Логин, Пароль)
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ИдентификационныеДанныеКонтрагентов.Контрагент
    |ИЗ
    |   РегистрСведений.ИдентификационныеДанныеКонтрагентов КАК ИдентификационныеДанныеКонтрагентов
    |ГДЕ
    |   ИдентификационныеДанныеКонтрагентов.Логин = &Логин
    |   И ИдентификационныеДанныеКонтрагентов.Пароль = &Пароль";
    
    Запрос.УстановитьПараметр("Логин", Логин);
    Запрос.УстановитьПараметр("Пароль", Пароль);
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.Контрагент;
    Иначе
        Возврат Справочники.Контрагенты.ПустаяСсылка();
    КонецЕсли;
КонецФункции // НайтиКонтрагента()


Функция AddAcceptanceCertificate(EnterData)
    //Описание типов
    РезультатТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1C/AcceptanceAkt", "Report");
    
    //Прочитаем входные данные
    МассивЗначений = EnterData.OrdersTable.Row; 
    Результат = ФабрикаXDTO.Создать(РезультатТип);
    
    //Идентефикация пользователя
    Контрагент = НайтиКонтрагента(EnterData.Login,EnterData.Password);
    Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
        Результат.Result = Ложь;
        Результат.Error = "Ошибка идентификации пользователя!Пользователя с таким логином/паролем в базе не существуее!!";
        Результат.NumberAcceptanceAkt = "";
        Возврат Результат;     
    КонецЕсли;
    
    //Формируем документ ПриходЗаказовНаСклад
    //Проверим на наличие ранее созданных документов по внешнему номеру
    ДокументПриходзаказовНаСкладСсылка = Документы.ПриходЗаказовНаСклад.НайтиПоРеквизиту("НомерВходящегоДокумента", EnterData.Number); 
    Если НЕ ДокументПриходзаказовНаСкладСсылка.Пустая() Тогда
        //Получаем объект
		ДатаДоставкиЗаказа = ТекущаяДата();
		ДокументПриходзаказовНаСкладОбъект = ДокументПриходзаказовНаСкладСсылка.ПолучитьОбъект();
		
		Если ДокументПриходзаказовНаСкладОбъект.Заказы.Количество() <> 0 Тогда
			ДатаДоставкиЗаказа = ДокументПриходзаказовНаСкладОбъект.Заказы[0].Заказ.Дата;
		КонецеСли;	
		
		ВремяЗакрытия = Константы.ВремяОкончанияОперационногоДняСклада.Получить();
		
		ПределДаты = Дата(Год(ДатаДоставкиЗаказа), Месяц(ДатаДоставкиЗаказа), День(ДатаДоставкиЗаказа), Час(ВремяЗакрытия), Минута(ВремяЗакрытия), 0);
		
		Если ДокументПриходзаказовНаСкладСсылка.Проведен И ТекущаяДата() > ПределДаты Тогда
		    Результат.Result = Ложь;
		    //Результат.Error = "Документ с таким номером в базе уже создан!";
			Результат.Error = "Документ с таким номером в базе уже создан и проведен!";
		    Результат.NumberAcceptanceAkt = "";
		Возврат Результат;     
		КонецЕсли;
        
        
        //Очищаем табличные части для ввода новых данных
        ДокументПриходзаказовНаСкладОбъект.Заказы.Очистить();
        ДокументПриходзаказовНаСкладОбъект.Товары.Очистить();
        
        //Заполнение табличной части Заказы
        ЗаполнитьТабличнуюЧастьЗаказы(ДокументПриходзаказовНаСкладОбъект.Заказы,МассивЗначений,Контрагент, ДокументПриходзаказовНаСкладОбъект);
        
        ////Заполнение табличной части Товары
        //BugReport = Новый Структура;
        //ЗаполнитьТабличнуюЧастьТовары(ДокументПриходзаказовНаСкладОбъект.Товары,МассивЗначений,BugReport);
        ////Ответ если были ошибки
        //Если BugReport.Количество() > 0 тогда
        //    Если НЕ BugReport.Result Тогда
        //        Результат.Result = BugReport.Result;
        //        Результат.Error = BugReport.Error;
        //        Результат.NumberAcceptanceAkt = BugReport.NumberAcceptanceAkt;
        //        Возврат Результат;     
        //    КонецЕсли;
        //КонецЕсли;
    Иначе
        //Создаем новый ДокументОбъект
        ДокументПриходзаказовНаСкладОбъект = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
        
        //Заполнение табличной части Заказы
        ЗаполнитьТабличнуюЧастьЗаказы(ДокументПриходзаказовНаСкладОбъект.Заказы,МассивЗначений,Контрагент, ДокументПриходзаказовНаСкладОбъект);
        
        ////Заполнение табличной части Товары
        //BugReport = Новый Структура;
        //ЗаполнитьТабличнуюЧастьТовары(ДокументПриходзаказовНаСкладОбъект.Товары,МассивЗначений,BugReport);
        ////Ответ если были ошибки
        //Если BugReport.Количество() > 0 тогда
        //    Если НЕ BugReport.Result Тогда
        //        Результат.Result = BugReport.Result;
        //        Результат.Error = BugReport.Error;
        //        Результат.NumberAcceptanceAkt = BugReport.NumberAcceptanceAkt;
        //        Возврат Результат;     
        //    КонецЕсли;
        //КонецЕсли;
    КонецЕсли;
    
    //Записываем документ
    Попытка
        //Заполняем шапку
        ДокументПриходзаказовНаСкладОбъект.Основание = Перечисления.ТипыЗагрузкиДанных.WEBСервисСтриж;
        ДокументПриходзаказовНаСкладОбъект.Контрагент = Контрагент;
        ДокументПриходзаказовНаСкладОбъект.НомерВходящегоДокумента = EnterData.Number;
        ДокументПриходзаказовНаСкладОбъект.ДатаВходящегоДокумента = EnterData.Date;
        ДокументПриходзаказовНаСкладОбъект.Дата = ТекущаяДата();
        
        //Запись
        ДокументПриходзаказовНаСкладОбъект.Записать(РежимЗаписиДокумента.Проведение);
        //Ответ
        Результат.Result = Истина;
        Результат.NumberAcceptanceAkt = ДокументПриходзаказовНаСкладОбъект.Номер;
        Результат.Error = "";
        Возврат Результат;
    Исключение
        //Ответ
        Результат.Result = Ложь;
        Результат.NumberAcceptanceAkt = "";
        Результат.Error = ОписаниеОшибки();
        Возврат Результат;
    КонецПопытки;
КонецФункции


Процедура ЗаполнитьТабличнуюЧастьЗаказы(ТабличнаяЧасть,ВходныеДанные,Контрагент, Док = Неопределено)
    //Заполняем таб часть
	Сч = 1;
    Для Каждого Стр Из ВходныеДанные Цикл
        СтрокатабличнойЧасти = ТабличнаяЧасть.Добавить();
        СтрокатабличнойЧасти.ВнешнийНомерЗаказа = Стр.NumberOutsideOrder;
        //Найдем реализацию по внешнему номеру
        ////+++++Серегин М.В. 01.10.2015 18:32:44 старый
        //Реализация = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа",Стр.NumberOutsideOrder);
        //+++++Серегин М.В. 01.10.2015 18:32:50 новый
        Реализация = smv.НайтиДокументПоНомеруВнешнегоЗаказа(Стр.NumberOutsideOrder,Контрагент);
		Если Сч = 1 И Док <> Неопределено Тогда
			Док.СкладМагазина = lem.ПолучитьСкладМагазинаПоЗаказу(Реализация);
			Сч = 2;
		КонецЕсли;	
        //-----Серегин М.В. 01.10.2015 18:32:55 
        СтрокатабличнойЧасти.Заказ = Реализация;
        СтрокатабличнойЧасти.КоличествоМест = Стр.QuantityPlaces;
    КонецЦикла; 
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТовары(ТабличнаяЧасть,ВходныеДанные,BugReport)
    //Заполняем таб часть
    Для Каждого Стр Из ВходныеДанные Цикл
        СтрокатабличнойЧасти = ТабличнаяЧасть.Добавить();
        //Найдем реализацию по внешнему номеру
        Реализация = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа",Стр.NumberOutsideOrder);
        СтрокатабличнойЧасти.Заказ = Реализация;
        Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СокрЛП(Стр.Article));
        //Если номенклатура не найдена, тогда прерываем заполнение
        Если ЗначениеЗаполнено(Номенклатура) Тогда 
            СтрокатабличнойЧасти.Номенклатура = Номенклатура;
        Иначе
            BugReport.Вставить("Result", Ложь);
            BugReport.Вставить("Error", "Не найдена номенклатура. ID"+Стр.Article);
            BugReport.Вставить("NumberAcceptanceAkt", "");
            Возврат;
        КонецЕсли;
        СтрокатабличнойЧасти.Количество = Стр.Quantity;
        СтрокатабличнойЧасти.Артикул = Стр.Article;
    КонецЦикла; 
КонецПроцедуры


