
Функция GetClientOrders(Date, CarMan)
	Перем Заказ;
	// Вставить содержимое обработчика.
	ДатаДоставок = Date;
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	СостоянияЗаказов.Доставка.Номер
	            |ПОМЕСТИТЬ ВТПеренесенные
	            |ИЗ
	            |	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	            |ГДЕ
	            |	СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.переносдоставки)
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
	            |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	            |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	            |	новаЗаданияРейсов.Доставка.Оплачен,
	            |	новаРейсМестнойДоставки.Ссылка КАК Рейс,
	            |	РеализацияТоваровУслуг.СтатусИнтернетМагазина
	            |ПОМЕСТИТЬ ВТТранспорт
	            |ИЗ
	            |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
	            |			ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
	            |		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
	            |ГДЕ
	            |	новаРейсМестнойДоставки.ДатаНачала МЕЖДУ &НачДата И &КонДата
	            |	И новаЗадачаРейсаМестнойДоставки.Роль = &ВыбЭтап
	            |	И новаЗаданияРейсов.МаршрутСопровождения <> ИСТИНА
	            |	И новаРейсМестнойДоставки.РейсОтменен = ЛОЖЬ
	            |	И новаРейсМестнойДоставки.Водитель.Код = &КодВодителя
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	РеализацияТоваровУслуг.Номер,
	            |	новаЗаданияРейсов.Рейс.Транспорт,
	            |	новаЗаданияРейсов.Доставка.Оплачен,
	            |	новаРейсМестнойДоставки.Ссылка,
	            |	РеализацияТоваровУслуг.ВладелецТовара,
	            |	РеализацияТоваровУслуг.СтатусИнтернетМагазина
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД КАК СтоимостьДоставки_,
	            |	ВТТранспорт.НомерЗаказа,
	            |	ВТТранспорт.Транспорт,
	            |	ВТТранспорт.ДоставкаОплачен,
	            |	ВТТранспорт.Рейс,
	            |	ВТТранспорт.Контрагент,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ВТПеренесенные.ДоставкаНомер, ИСТИНА) = ИСТИНА
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ КАК ЗаказПеренесен,
	            |	ВТТранспорт.Транспорт.НомерЛог КАК НомерСклад,
	            |	новаМестнаяДоставка.Телефон,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Наименование КАК АдресСтрока,
	            |	новаМестнаяДоставка.Грузополучатель.Наименование КАК Клиент,
	            |	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияС, """") КАК ВремяПрибытияС,
	            |	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияПо, """") КАК ВремяПрибытияПо,
	            |	ВТТранспорт.СтатусИнтернетМагазина,
	            |	новаМестнаяДоставка.Грузополучатель.Код КАК КодКлиента
	            |ПОМЕСТИТЬ ВТЗаказы
	            |ИЗ
	            |	ВТТранспорт КАК ВТТранспорт
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер
	            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеренесенные КАК ВТПеренесенные
	            |		ПО ВТТранспорт.НомерЗаказа = ВТПеренесенные.ДоставкаНомер
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТТранспорт.НомерЗаказа,
	            |	ВТТранспорт.Транспорт,
	            |	ВТТранспорт.ДоставкаОплачен,
	            |	ВТТранспорт.Рейс,
	            |	ВТТранспорт.Контрагент,
	            |	новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ВТПеренесенные.ДоставкаНомер, ИСТИНА) = ИСТИНА
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ,
	            |	ВТТранспорт.Транспорт.НомерЛог,
	            |	новаМестнаяДоставка.Телефон,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Наименование,
	            |	новаМестнаяДоставка.ВремяПрибытияС,
	            |	новаМестнаяДоставка.ВремяПрибытияПо,
	            |	ВТТранспорт.СтатусИнтернетМагазина,
	            |	новаМестнаяДоставка.Грузополучатель.Наименование,
	            |	новаМестнаяДоставка.Грузополучатель.Код
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТТранспорт
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТЗаказы.НомерЗаказа КАК НомерЗаказа,
	            |	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	            |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	            |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВТЗаказы.Контрагент.Наименование КАК ИнтернетМагазин,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_ КАК СтоимостьДоставки,
	            |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	            |	ВТЗаказы.Контрагент
	            |ПОМЕСТИТЬ ВТИтог
	            |ИЗ
	            |	ВТЗаказы КАК ВТЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	            |			ПО РеализацияТоваровУслугТовары.Ссылка.ТипОплаты = ТипыОплат.Код
	            |		ПО ВТЗаказы.НомерЗаказа = РеализацияТоваровУслугТовары.Ссылка.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслугТовары.Ссылка.СтатусИнтернетМагазина В (2, 3)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	РеализацияТоваровУслугТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	            |	СУММА(РеализацияТоваровУслугТовары.Количество),
	            |	СУММА(РеализацияТоваровУслугТовары.Сумма),
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	1000 + РеализацияТоваровУслугТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент
	            |ИЗ
	            |	ВТЗаказы КАК ВТЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугТовары
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	            |			ПО РеализацияТоваровУслугТовары.Ссылка.ТипОплаты = ТипыОплат.Код
	            |		ПО ВТЗаказы.НомерЗаказа = РеализацияТоваровУслугТовары.Ссылка.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслугТовары.Ссылка.СтатусИнтернетМагазина В (2, 3)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	            |	ВТЗаказы.Транспорт,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	1000 + РеализацияТоваровУслугТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслуг.Ссылка.НомерВнешнегоЗаказа,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование,
	            |	СУММА(-ВозвратТоваровОтПокупателяТовары.Количество),
	            |	СУММА(-ВозвратТоваровОтПокупателяТовары.Сумма),
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслуг.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	1500 + ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент
	            |ИЗ
	            |	ВТЗаказы КАК ВТЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	            |				ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
	            |			ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = РеализацияТоваровУслуг.Номер
	            |		ПО ВТЗаказы.НомерЗаказа = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Ссылка.СтатусИнтернетМагазина В (2, 3)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслуг.Ссылка.НомерВнешнегоЗаказа,
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслуг.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	1500 + ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТЗаказы
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТИтог.НомерЗаказа КАК НомерЗаказа,
	            |	ВТИтог.НомерВнешнегоЗаказа,
	            |	ВТИтог.Артикул,
	            |	ВТИтог.НоменклатураНаименование,
	            |	СУММА(ВТИтог.Количество) КАК Количество,
	            |	СУММА(ВТИтог.Сумма) КАК Сумма,
	            |	ВТИтог.Транспорт,
	            |	ВТИтог.КодОплаты,
	            |	ВТИтог.Рейс,
	            |	ВТИтог.ИнтернетМагазин,
	            |	ВТИтог.ЗаказПеренесен,
	            |	ВТИтог.НомерСклад,
	            |	ВТИтог.Телефон,
	            |	ВТИтог.Широта,
	            |	ВТИтог.Долгота,
	            |	ВТИтог.АдресСтрока,
	            |	ВТИтог.Клиент,
	            |	ВТИтог.ВремяПрибытияС,
	            |	ВТИтог.ВремяПрибытияПо,
	            |	ВТИтог.НоменклатураКод,
	            |	ВТИтог.КонтрагентНаименование,
	            |	ВТИтог.КонтрагентКод,
	            |	ВТИтог.СтатусИнтернетМагазина,
	            |	ВТИтог.КодКлиента,
	            |	ВТИтог.ТипОплаты,
	            |	ВТИтог.СтоимостьДоставки,
	            |	ВТИтог.НомерСтроки КАК НомерСтроки,
	            |	ВТИтог.Контрагент
	            |ИЗ
	            |	ВТИтог КАК ВТИтог
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТИтог.НомерЗаказа,
	            |	ВТИтог.НомерВнешнегоЗаказа,
	            |	ВТИтог.Артикул,
	            |	ВТИтог.НоменклатураНаименование,
	            |	ВТИтог.Транспорт,
	            |	ВТИтог.КодОплаты,
	            |	ВТИтог.Рейс,
	            |	ВТИтог.ИнтернетМагазин,
	            |	ВТИтог.ЗаказПеренесен,
	            |	ВТИтог.Телефон,
	            |	ВТИтог.АдресСтрока,
	            |	ВТИтог.Клиент,
	            |	ВТИтог.ВремяПрибытияС,
	            |	ВТИтог.ВремяПрибытияПо,
	            |	ВТИтог.НоменклатураКод,
	            |	ВТИтог.КонтрагентНаименование,
	            |	ВТИтог.КонтрагентКод,
	            |	ВТИтог.КодКлиента,
	            |	ВТИтог.СтоимостьДоставки,
	            |	ВТИтог.ТипОплаты,
	            |	ВТИтог.СтатусИнтернетМагазина,
	            |	ВТИтог.Долгота,
	            |	ВТИтог.Широта,
	            |	ВТИтог.НомерСклад,
	            |	ВТИтог.НомерСтроки,
	            |	ВТИтог.Контрагент
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	НомерЗаказа,
	            |	НомерСтроки
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТПеренесенные
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТИтог";
				
	Зап.УстановитьПараметр("НачДата", НачалоДня(ДатаДоставок));
	Зап.УстановитьПараметр("КонДата", КонецДня(ДатаДоставок));
	Зап.УстановитьПараметр("ВыбЭтап", Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки);
	Зап.УстановитьПараметр("КодВодителя", CarMan);
	
	Рез = Зап.Выполнить();
	Если рез.Пустой() Тогда
		Возврат Null;
	КонецеСли;	
	
	Выб = Рез.Выбрать();
	
	
	Зап2 = Новый Запрос;
	
	Зап2.Текст = "ВЫБРАТЬ
	             |	ПечатьДвойныхЧековСрезПоследних.Контрагент
	             |ИЗ
	             |	РегистрСведений.ПечатьДвойныхЧеков.СрезПоследних(&ДатаЗапроса, ) КАК ПечатьДвойныхЧековСрезПоследних
	             |ГДЕ
	             |	ПечатьДвойныхЧековСрезПоследних.ПечататьДвойныеЧеки = ИСТИНА";
	Зап2.УстановитьПараметр("ДатаЗапроса", КонецДня(ДатаДоставок));
	ДвЧ = Зап2.Выполнить().Выгрузить();
	
	
    МассивЗаказовТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Order", "ArrayOfOrders");
    ЗаказТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Order", "Order");
    ЗаказСтрокаТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Order", "OrderRow");
    НоменклатураТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Nomenklature", "Nomenklature");
	КлиентТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Klients", "Klients");
	
	
	МассивЗаказов = ФабрикаXDTO.Создать(МассивЗаказовТип);
	
	ТекНом = Неопределено;
	
	Пока Выб.Следующий() Цикл
		Если ТекНом = Неопределено Или ТекНом <> СокрЛП(Выб.НомерЗаказа)  Тогда
			Если ТекНом <> Неопределено Тогда
				МассивЗаказов.Order.Добавить(Заказ);
			КонецЕСли;	
			
			//Если Не ЗначениеЗаполнено(Выб.НомерВнешнегоЗаказа) Тогда
			//	Продолжить;
			//КонецеСли;	
			Заказ = ФабрикаXDTO.Создать(ЗаказТип);
			Заказ.Number = Выб.НомерЗаказа;
			Заказ.Date = ДатаДоставок;             
			Заказ.SelectTypeOfPay = 1;
			Если ЗначениеЗаполнено(Выб.ИнтернетМагазин) Тогда
				Заказ.InternetShop = Выб.ИнтернетМагазин;
				Если ЗначениеЗаполнено(Выб.Контрагент) Тогда
					Най = ДвЧ.Найти(Выб.Контрагент);
					Если Най <> Неопределено Тогда
						Заказ.SelectTypeOfPay = 2;
					КонецеСли;	
				КонецеСли;	
			Иначе
				Заказ.InternetShop = "";
			КонецЕСли;	
			Заказ.Status = Число(Выб.СтатусИнтернетМагазина);
			Заказ.TimeOfDelivery = "с " + Формат(Час(Выб.ВремяПрибытияС), "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минута(Выб.ВремяПрибытияС), "ЧЦ=2; ЧН=00; ЧВН=") + " по " + Формат(Час(Выб.ВремяПрибытияПо), "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минута(Выб.ВремяПрибытияПо), "ЧЦ=2; ЧН=00; ЧВН=");
			Если ЗначениеЗаполнено(Выб.Широта) Тогда
				Заказ.Shirota = Выб.Широта;
			Иначе	
				Заказ.Shirota = "";
			КонецеСли;
			Если ЗначениеЗаполнено(Выб.Долгота) Тогда
				Заказ.Dolgota = Выб.Долгота;
			Иначе
				Заказ.Dolgota = "";
			КонецЕсли;	
			Если ЗначениеЗаполнено(Выб.Телефон) Тогда
				Заказ.Phone = Выб.Телефон;
			Иначе
				Заказ.Phone = "";
			КонецеСли;	
			Если ЗначениеЗаполнено(Выб.АдресСтрока) Тогда
				Заказ.Address = Выб.АдресСтрока;
			Иначе
				Заказ.Address = "";
			КонецеСли;	
			
			
			Клиент = ФабрикаXDTO.Создать(КлиентТип);
			Если ЗначениеЗаполнено(Выб.КодКлиента) Тогда
				Клиент.Code = Выб.КодКлиента;
			Иначе
				Клиент.Code = "";
			КонецеСли;
			Если ЗначениеЗаполнено(Выб.Клиент) Тогда
				Клиент.Name = Выб.Клиент;
			Иначе
				Клиент.Name = "";
			КонецеСли;	
			Заказ.Client = Клиент;
			Если ЗначениеЗаполнено(Выб.НомерВнешнегоЗаказа) Тогда
				Заказ.NumberEx = Выб.НомерВнешнегоЗаказа;
			Иначе
				Заказ.NumberEx = "";
			КонецеСли;
			
			Если ЗначениеЗаполнено(Выб.ТипОплаты) Тогда
				Заказ.TypeOfPay = Выб.ТипОплаты;
			Иначе
				Заказ.TypeOfPay = "";
			КонецеСли;
			Если ЗначениеЗаполнено(Выб.СтоимостьДоставки) Тогда
				Заказ.SumDelivery = Выб.СтоимостьДоставки;
			Иначе
				Заказ.SumDelivery = 0;
			КонецеСли;
			
			
			ТекНом = СокрЛП(Выб.НомерЗаказа);
		КонецеСли;
		
		//Если Не ЗначениеЗаполнено(Выб.Артикул) Тогда
		//	Продолжить;
		//КонецЕСли;	
		ЗаказСтрока = ФабрикаXDTO.Создать(ЗаказСтрокаТип);
		
		Номенклатура = ФабрикаXDTO.Создать(НоменклатураТип);
		Если ЗначениеЗаполнено(Выб.Артикул) Тогда
			Номенклатура.Artikul = Выб.Артикул;
		Иначе
			Номенклатура.Artikul = "";
		КонецеСли;	
		Номенклатура.Code = Выб.НоменклатураКод;
		Номенклатура.Name = Выб.НоменклатураНаименование;
		
		ЗаказСтрока.NomenKlature = Номенклатура;
		ЗаказСтрока.Count = Выб.Количество;
		ЗаказСтрока.Summa = Выб.Сумма;
		Заказ.Tovars.Добавить(ЗаказСтрока);
	КонецЦикла;
	МассивЗаказов.Order.Добавить(Заказ);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивЗаказов);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции

Функция GetCarMans()
	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаВодители.Код КАК Код,
	            |	новаВодители.Наименование КАК Наименование,
	            |	ПаролиВодителейСрезПоследних.Пароль КАК Пароль,
	            |	новаВодители.ИмяЛатиницей КАК ИмяЛатиницей
	            |ИЗ
	            |	Справочник.новаВодители КАК новаВодители
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаролиВодителей.СрезПоследних КАК ПаролиВодителейСрезПоследних
	            |		ПО (ПаролиВодителейСрезПоследних.Водитель = новаВодители.Ссылка)
	            |ГДЕ
	            |	новаВодители.ЭтоГруппа = ЛОЖЬ";
	Рез = Зап.Выполнить().Выгрузить();
    МассивВодителейТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/CarMans", "ArrayOfCarMans");
    ВодительТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/CarMans", "CarMan");
	
	
	МассивВодителей = ФабрикаXDTO.Создать(МассивВодителейТип);
	
	ТекНом = Неопределено;
	
	Для Каждого Тек Из Рез Цикл
		Водитель = ФабрикаXDTO.Создать(ВодительТип);
		Водитель.ID = Тек.Код;
		Водитель.Name = Тек.Наименование;
		Водитель.latinName = Тек.ИмяЛатиницей;
		Если ЗначениеЗаполнено(Тек.Пароль) Тогда
			Водитель.Password = Тек.Пароль;
		Иначе
			Водитель.Password = "";
		КонецеСли;	
		МассивВодителей.CarMan.Добавить(Водитель);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивВодителей);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции

Функция SetOrderStatus(OrderActs, CarMan)
	Зап = OrderActs.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивЗаказовТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/OrderAct").Получить("ArrayOfOrderActs");
	OrderActs = ФабрикаXDTO.ПрочитатьXML(Чт, МассивЗаказовТип);
	
	Водитель = Справочники.новаВодители.НайтиПоКоду(CarMan.ID);
	// Вставить содержимое обработчика.
	Для Сч = 0 По OrderActs.OrderAct.Количество() - 1 Цикл
		Най = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(OrderActs.OrderAct[Сч].Number);
		Если Най.Пустая() Тогда
			// не нашли заказ
			Продолжить;
		КонецеСли;	
		
		
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ДанныеЗаказаВодителя.Ссылка КАК Док
		            |ИЗ
		            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
		            |ГДЕ
		            |	ДанныеЗаказаВодителя.Водитель = &Водитель
		            |	И ДанныеЗаказаВодителя.Реализация = &Реализация
		            |	И ДанныеЗаказаВодителя.Номер = &Номер
		            |	И НАЧАЛОПЕРИОДА(ДанныеЗаказаВодителя.Дата, ДЕНЬ) = &Дата";
					
					
		Зап.УстановитьПараметр("Дата", НачалоДня(OrderActs.OrderAct[Сч].Date));
		Зап.УстановитьПараметр("Водитель", Водитель.Ссылка);
		Зап.УстановитьПараметр("Реализация", Най.Ссылка);
		Зап.УстановитьПараметр("Номер", OrderActs.OrderAct[Сч].NumberDok);
		
		Рез = Зап.Выполнить();
		
		
		Если Рез.Пустой() Тогда
			НайД = Документы.ДанныеЗаказаВодителя.СоздатьДокумент();
			найД.Дата = OrderActs.OrderAct[Сч].Date;
		Иначе	
			Выб = Рез.Выбрать();
			Выб.Следующий();
			НайД = Выб.Док.ПолучитьОбъект();
			НайД.ДоставленныеТовары.Очистить();
		КонецеСли;
		
		НайД.Реализация = Най.Ссылка;
		НайД.Номер = OrderActs.OrderAct[Сч].NumberDok;
		
		Если OrderActs.OrderAct[Сч].Status = 1 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка();
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 2 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки;
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 3 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда;
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 4 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом;
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 5 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом;			
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 6 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.НетНаСкладе;						
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 7 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.НеДоставлен;									
		КонецеСли;
		
		попытка
		Если OrderActs.OrderAct[Сч].TypeOfPay <> 0 Тогда
			НайД.ТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(OrderActs.OrderAct[Сч].TypeOfPay);
		КонецеСли;
	исключение
		
		конецпопытки;
		
		
		Если OrderActs.OrderAct[Сч].ReasonFail = 0 Тогда
			
		Иначе
			КодП = Формат(Число(OrderActs.OrderAct[Сч].ReasonFail), "ЧЦ=11; ЧВН=; ЧГ=");
			НайД.ПричинаОтказаПереноса = Справочники.ПричиныОтказаПереноса.НайтиПоКоду(КодП);
		КонецеСли;	
		НайД.ДатаПереноса = OrderActs.OrderAct[Сч].DateReason;
		НайД.Сумма = OrderActs.OrderAct[Сч].Summa;
		НайД.ДатаДоставки = OrderActs.OrderAct[Сч].Date;
		НайД.Водитель = Водитель;
		СписокТоваров = OrderActs.OrderAct[Сч].Tovars;
		Для СчТ = 0 По СписокТоваров.Количество() - 1 Цикл
			Кд = СписокТоваров[СчТ].Nomenklature.Code;
			Дл = 11-СтрДлина(Кд);
			Для Счпр = 1 По Дл Цикл
				Кд = Кд + " ";
			КонецЦикла;	
			Тов = Справочники.Номенклатура.НайтиПоКоду(Кд);
			//Если Не Тов.Пустая() Тогда
				НовСтр = НайД.ДоставленныеТовары.Добавить();
				НовСтр.Номенклатура = Тов.Ссылка;
				НовСтр.КоличествоДоставлено = СписокТоваров[СчТ].Count;
			//КонецеСли;	
		КонецЦиклА;
		НайД.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			НайД.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СписокПолучателей = Новый Массив;
			СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
			СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
			Отпр = lem.ОтправитьСообщение(СписокПолучателей, "Ошибка при проведении  " + НайД.Ссылка, ОписаниеОшибки() , , "Логистическая компания ""Стриж""");	
			//+Степанов Задача Задача № 3595
			pkv.ДобавитьВСписокОтложенногоПроведения(НайД.Ссылка,ОписаниеОшибки());
			//-Степанов Задача № 3595
		КонецПопытки;	
	КонецЦикла;	
	//Если OrderActs.OrderAct.Количество() >= 1 Тогда
	//Если ЗначениеЗаполнено(Водитель) Тогда
	//	Тек = ТекущаяДата();
	//	Наб = РегистрыСведений.ОбновлениеДанныхМобильногоПриложения.СоздатьНаборЗаписей();
	//	Наб.Отбор.Объект.Установить(Водитель);
	//	Наб.Отбор.ПериодДобавления.Установить(Тек);
	//	
	//	Нов = Наб.Добавить();
	//	Нов.ПериодДобавления = Тек;
	//	Нов.Объект = Водитель;
	//	Наб.Записать();
	//КонецеСли;	
	//КонецеСли;	
	Возврат 1;
КонецФункции

Функция GetCars()
	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаТранспорт.Код,
	            |	новаТранспорт.Наименование,
	            |	ПаролиТранспортаСрезПоследних.Пароль,
	            |	новаТранспорт.НомерГосударственнойРегистрации
	            |ИЗ
	            |	Справочник.новаТранспорт КАК новаТранспорт
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаролиТранспорта.СрезПоследних КАК ПаролиТранспортаСрезПоследних
	            |		ПО (ПаролиТранспортаСрезПоследних.Транспорт = новаТранспорт.Ссылка)
	            |ГДЕ
	            |	новаТранспорт.ЭтоГруппа = ЛОЖЬ";
	Рез = Зап.Выполнить().Выгрузить();
    МассивТранспортаТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Cars", "ArrayOfCars");
    ТранспортТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Cars", "Car");
	
	
	МассивТранспорта = ФабрикаXDTO.Создать(МассивТранспортаТип);
	
	ТекНом = Неопределено;
	
	Для Каждого Тек Из Рез Цикл
		Транспорт = ФабрикаXDTO.Создать(ТранспортТип);
		Транспорт.Code = Тек.Код;
		Транспорт.Name = Тек.Наименование;
		Транспорт.Number = Тек.НомерГосударственнойРегистрации;
		Если ЗначениеЗаполнено(Тек.Пароль) Тогда
			Транспорт.Password = Тек.Пароль;
		Иначе
			Транспорт.Password = "";
		КонецеСли;	
		МассивТранспорта.Car.Добавить(Транспорт);
	КонецЦикла;		
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивТранспорта);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции

Функция GetOrdersByCars(Date, Car)
	Перем Заказ;
	// Вставить содержимое обработчика.
	
	
	ЗапросШаблоновСМС = Новый Запрос;
	ЗапросШаблоновСМС.Текст = "ВЫБРАТЬ
	                          |	СправочникШаблоныСМСРассылок.Ссылка КАК Ссылка,
	                          |	СправочникШаблоныСМСРассылок.ПометкаУдаления КАК ПометкаУдаления,
	                          |	СправочникШаблоныСМСРассылок.Код КАК Код,
	                          |	СправочникШаблоныСМСРассылок.Наименование КАК Наименование,
	                          |	СправочникШаблоныСМСРассылок.ТипСМСРассылки КАК ТипСМСРассылки,
	                          |	СправочникШаблоныСМСРассылок.ТекстШаблона КАК ТекстШаблона,
	                          |	СправочникШаблоныСМСРассылок.Отправитель КАК Отправитель,
	                          |	СправочникШаблоныСМСРассылок.СклонениеИсполнителяДоставки КАК СклонениеИсполнителяДоставки,
	                          |	СправочникШаблоныСМСРассылок.Предопределенный КАК Предопределенный,
	                          |	СправочникШаблоныСМСРассылок.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	                          |	АктивныеШаблоныСМСРассылокСрезПоследних.ТипСМСРассылки КАК ТипСМСРассылкиАктивныеШаблоны,
	                          |	ШаблоныСМСРассылокПоКонтрагентамСрезПоследних.Контрагент КАК Контрагент,
	                          |	ШаблоныСМСРассылокПоКонтрагентамСрезПоследних.ТипСМСРассылки КАК ТипСМСРассылкиКонтрагента
	                          |ИЗ
	                          |	Справочник.ШаблоныСМСРассылок КАК СправочникШаблоныСМСРассылок
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктивныеШаблоныСМСРассылок.СрезПоследних КАК АктивныеШаблоныСМСРассылокСрезПоследних
	                          |		ПО СправочникШаблоныСМСРассылок.Ссылка = АктивныеШаблоныСМСРассылокСрезПоследних.ШаблонСМСРассылки
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШаблоныСМСРассылокПоКонтрагентам.СрезПоследних(, ШаблонАктуален = ИСТИНА) КАК ШаблоныСМСРассылокПоКонтрагентамСрезПоследних
	                          |		ПО (ШаблоныСМСРассылокПоКонтрагентамСрезПоследних.ШаблонРассылки = СправочникШаблоныСМСРассылок.Ссылка)
	                          |ГДЕ
	                          |	(ШаблоныСМСРассылокПоКонтрагентамСрезПоследних.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                          |			ИЛИ АктивныеШаблоныСМСРассылокСрезПоследних.ТипСМСРассылки <> ЗНАЧЕНИЕ(Справочник.ТипыСМСРассылок.ПустаяСсылка))";
	ТабШаблонов = ЗапросШаблоновСМС.Выполнить().Выгрузить();
	
	
	Най = ТабШаблонов.Найти(Справочники.ТипыСМСРассылок.РассылкаОбУехавшихЗаказах);
	Если Най <> Неопределено Тогда
		КодАктивногоШаблонаСМС = Най.Код;
	Иначе	
		КодАктивногоШаблонаСМС = "";
	КонецеСли;	
	
	
	ДатаДоставок = Date;
	Зап = Новый Запрос;
	Зап.Текст =
	"ВЫБРАТЬ
	|	ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Партнер КАК Партнер,
	|	ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ ВТ_ТипыОплат_КИК
	|ИЗ
	|	РегистрСведений.ТипыОплатТребованиеИдентификацииКлиентов.СрезПоследних КАК ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних
	|ГДЕ
	|	ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Учитывать = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВесовыеБрейкиРасчетаСтоимостиПодъемов.Владелец КАК ТарифНаПодъем,
	|	МИНИМУМ(ВесовыеБрейкиРасчетаСтоимостиПодъемов.ВесОт) КАК ВесОт
	|ПОМЕСТИТЬ ВТ_ВесовыеМинимумыПодъемов
	|ИЗ
	|	Справочник.ВесовыеБрейкиРасчетаСтоимостиПодъемов КАК ВесовыеБрейкиРасчетаСтоимостиПодъемов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВесовыеБрейкиРасчетаСтоимостиПодъемов.Владелец.ТипТарифа = ЗНАЧЕНИЕ(Перечисление.ТипТарифаНаподъемЗаказов.РаздельныйТарифПоИМИЭкипажу)
	|				ТОГДА ВесовыеБрейкиРасчетаСтоимостиПодъемов.ВариантТарифногоБрейка = ЗНАЧЕНИЕ(Перечисление.ВариантыТарифаНаПодъемзаказов.ТарифДляЭкипажа)
	|			ИНАЧЕ ВесовыеБрейкиРасчетаСтоимостиПодъемов.ВариантТарифногоБрейка = ЗНАЧЕНИЕ(Перечисление.ВариантыТарифаНаПодъемзаказов.ТарифДляИМ)
	|		КОНЕЦ
	|	И ВесовыеБрейкиРасчетаСтоимостиПодъемов.ВесОт <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВесовыеБрейкиРасчетаСтоимостиПодъемов.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	|	РейсЗаказы.Ссылка КАК РейсДок,
	|	РейсЗаказы.Ссылка.РейсМестнойДоставки КАК Рейс,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	новаМестнаяДоставка.Ссылка КАК ЗаказМД,
	|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	|	РеализацияТоваровУслуг.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина,
	|	РейсЗаказы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТТранспорт
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|			ПО ДополнительныеПараметрыЗаказа.Доставка = новаМестнаяДоставка.Ссылка
	|		ПО РейсЗаказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	РейсЗаказы.ВидЗаказа = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказовВероут.drop)
	|	И РейсЗаказы.Ссылка.Проведен = ИСТИНА
	|	И ПривязкаМашинКРейсамСрезПоследних.Транспорт.Код = &НомерАвтомобиля
	|	И РейсЗаказы.Ссылка.ДатаРейса МЕЖДУ &НачДата И &КонДата
	|	И РейсЗаказы.УдаленИзРейса = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт,
	|	РейсЗаказы.Ссылка,
	|	РейсЗаказы.Ссылка.РейсМестнойДоставки,
	|	новаМестнаяДоставка.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.ВладелецТовара,
	|	РеализацияТоваровУслуг.СтатусИнтернетМагазина,
	|	РейсЗаказы.НомерСтроки,
	|	РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТранспорт.РейсДок КАК Рейс
	|ПОМЕСТИТЬ ВТ_Рейсы
	|ИЗ
	|	ВТТранспорт КАК ВТТранспорт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТранспорт.Заказ КАК Заказ,
	|	ВТТранспорт.РейсДок КАК Рейс,
	|	МАКСИМУМ(ФиксацияМаршрутизацииРейса.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыФиксаций
	|ИЗ
	|	Документ.ФиксацияМаршрутизацииРейса КАК ФиксацияМаршрутизацииРейса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО ФиксацияМаршрутизацииРейса.Рейс = ВТ_Рейсы.Рейс
	|			И (ФиксацияМаршрутизацииРейса.МаршрутизацияНаРабочемМестеЭкипажа)
	|			И (НЕ ФиксацияМаршрутизацииРейса.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФиксацияМаршрутизацииРейса.Заказы КАК ФиксацияМаршрутизацииРейсаЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТранспорт КАК ВТТранспорт
	|			ПО ФиксацияМаршрутизацииРейсаЗаказы.Заказ = ВТТранспорт.Заказ
	|				И ФиксацияМаршрутизацииРейсаЗаказы.Ссылка.Рейс = ВТТранспорт.РейсДок
	|		ПО ФиксацияМаршрутизацииРейса.Ссылка = ФиксацияМаршрутизацииРейсаЗаказы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТранспорт.Заказ,
	|	ВТТранспорт.РейсДок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеДатыФиксаций.Заказ КАК Заказ,
	|	ВТ_ПоследниеДатыФиксаций.Рейс КАК Рейс,
	|	ВТ_ПоследниеДатыФиксаций.Дата КАК Дата,
	|	МАКСИМУМ(ФиксацияМаршрутизацииРейсаЗаказы.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ПоследниеФиксации
	|ИЗ
	|	Документ.ФиксацияМаршрутизацииРейса КАК ФиксацияМаршрутизацииРейса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО ФиксацияМаршрутизацииРейса.Рейс = ВТ_Рейсы.Рейс
	|			И (ФиксацияМаршрутизацииРейса.МаршрутизацияНаРабочемМестеЭкипажа)
	|			И (НЕ ФиксацияМаршрутизацииРейса.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФиксацияМаршрутизацииРейса.Заказы КАК ФиксацияМаршрутизацииРейсаЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеДатыФиксаций КАК ВТ_ПоследниеДатыФиксаций
	|			ПО ФиксацияМаршрутизацииРейсаЗаказы.Заказ = ВТ_ПоследниеДатыФиксаций.Заказ
	|				И ФиксацияМаршрутизацииРейсаЗаказы.Ссылка.Рейс = ВТ_ПоследниеДатыФиксаций.Рейс
	|				И ФиксацияМаршрутизацииРейсаЗаказы.Ссылка.Дата = ВТ_ПоследниеДатыФиксаций.Дата
	|		ПО ФиксацияМаршрутизацииРейса.Ссылка = ФиксацияМаршрутизацииРейсаЗаказы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеДатыФиксаций.Заказ,
	|	ВТ_ПоследниеДатыФиксаций.Рейс,
	|	ВТ_ПоследниеДатыФиксаций.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТранспорт.НомерЗаказа КАК НомерЗаказа,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НастройкиПечатиЧековПоФЗ54СрезПоследних.ТипОплаты.Код = 1
	|				ТОГДА НастройкиПечатиЧековПоФЗ54СрезПоследних.Организация.Код
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК КодОрганизацииНал,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НастройкиПечатиЧековПоФЗ54СрезПоследних.ТипОплаты.Код = 5
	|				ТОГДА НастройкиПечатиЧековПоФЗ54СрезПоследних.Организация.Код
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК КодОрганизацииТерминал,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НастройкиПечатиЧековПоФЗ54СрезПоследних.ТипОплаты.Код = 11
	|				ТОГДА НастройкиПечатиЧековПоФЗ54СрезПоследних.Организация.Код
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК КодОрганизацииСБП
	|ПОМЕСТИТЬ ВТОрганизацииПоТипамОплаты
	|ИЗ
	|	ВТТранспорт КАК ВТТранспорт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПечатиЧековПоФЗ54.СрезПоследних(&КонДата, ) КАК НастройкиПечатиЧековПоФЗ54СрезПоследних
	|		ПО ВТТранспорт.Контрагент = НастройкиПечатиЧековПоФЗ54СрезПоследних.Комитент
	|ГДЕ
	|	(НастройкиПечатиЧековПоФЗ54СрезПоследних.ТипОплаты.Код = 1
	|			ИЛИ НастройкиПечатиЧековПоФЗ54СрезПоследних.ТипОплаты.Код = 5)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТранспорт.НомерЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТранспорт.ЗаказМД.СтоимостьДоставкиДоМКАД + ВТТранспорт.ЗаказМД.СтоимостьДоставкиЗаМКАД КАК СтоимостьДоставки_,
	|	ВТТранспорт.НомерЗаказа КАК НомерЗаказа,
	|	ВТТранспорт.Транспорт КАК Транспорт,
	|	ВТТранспорт.Рейс КАК Рейс,
	|	ВТТранспорт.Контрагент КАК Контрагент,
	|	ВТТранспорт.Транспорт.НомерЛог КАК НомерСклад,
	|	ВТТранспорт.ЗаказМД.Телефон КАК Телефон,
	|	ВТТранспорт.ЗаказМД.ТочкаПрибытия.Адрес.Широта КАК Широта,
	|	ВТТранспорт.ЗаказМД.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
	|	ВТТранспорт.ЗаказМД.ТочкаПрибытия.Наименование КАК АдресСтрока,
	|	ВТТранспорт.ЗаказМД.Грузополучатель.Наименование КАК Клиент,
	|	ЕСТЬNULL(ВТТранспорт.ЗаказМД.ВремяПрибытияС, """") КАК ВремяПрибытияС,
	|	ЕСТЬNULL(ВТТранспорт.ЗаказМД.ВремяПрибытияПо, """") КАК ВремяПрибытияПо,
	|	ВТТранспорт.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина,
	|	ВТТранспорт.ЗаказМД.Грузополучатель.Код КАК КодКлиента,
	|	ВТТранспорт.Заказ.УчитыватьИтогоКОплате КАК УчитыватьИтогоКОплате,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КОплатеКлиентом, 0) КАК КОплатеКлиентом,
	|	ВТТранспорт.Заказ.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	|	ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке.КодВАдминке КАК СтавкаНДСФЗПоДоставке,
	|	ДополнительныеПараметрыЗаказа.EmailКлиента КАК EmailКлиента,
	|	ВЫБОР
	|		КОГДА ДополнительныеПараметрыЗаказа.МетодОплатыПодъемаЗаказа = ЗНАЧЕНИЕ(Перечисление.МетодыОплатыПодъёмаЗаказа.ОплачиваетПартнер)
	|			ТОГДА 1
	|		КОГДА ДополнительныеПараметрыЗаказа.МетодОплатыПодъемаЗаказа = ЗНАЧЕНИЕ(Перечисление.МетодыОплатыПодъёмаЗаказа.ОплачиваетКлиент)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МетодОплатыПодъема,
	|	ДополнительныеПараметрыЗаказа.ТарифицируемыйВес КАК ТарифицируемыйВес,
	|	ВТТранспорт.Заказ.КоличествоМест КАК КоличествоМест,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
	|	ЕСТЬNULL(ФиксацияМаршрутизацииРейсаЗаказы.ПорядокМаршрутизации, -1) КАК ПорядокСортировки,
	|	ВТТранспорт.РейсДок КАК РейсДокумент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ВесовыеМинимумыПодъемов.ВесОт, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДополнительныеПараметрыЗаказа.МетодОплатыПодъемаЗаказа = ЗНАЧЕНИЕ(Перечисление.МетодыОплатыПодъёмаЗаказа.ОплачиваетПартнер)
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ТарифицируемыйВес, 0) > ВТ_ВесовыеМинимумыПодъемов.ВесОт
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗапрашиватьДанныеПодъема,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков, ЛОЖЬ) КАК ПечатьПредоплаченныхЧеков,
	|	ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке КАК СтавкаНДСФЗПоДоставкеСпр,
	|	ЕСТЬNULL(ВТТранспорт.Заказ.ЗонаТарификации.Код, """") КАК КодЗоныТарификации,
	|	ДополнительныеПараметрыЗаказа.КодИдентификацииКлиента КАК КодИдентификацииКлиента,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ) КАК ИспользоватьКодИдентификацииКлиента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ТипыОплат_КИК.Партнер, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	МАКСИМУМ(ТарифыРасчетаСтоимостиДоставки.Ссылка) КАК ТарифРасчетаСтоимостиДоставки,
	|	МАКСИМУМ(ЕСТЬNULL(ТарифыРасчетаСтоимостиДоставки.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа, ЛОЖЬ)) КАК ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	ДополнительныеПараметрыЗаказа.ПодписаниеИВозвратСопрДокументов КАК ПодписаниеИВозвратСопрДокументов,
	|	ВТТранспорт.Заказ КАК Заказ,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ТарифПримерки, ЗНАЧЕНИЕ(Справочник.ТарифыПримерка.ПустаяСсылка)) КАК ТарифПримерки,
	|	ЕСТЬNULL(ВТ_ПоследниеФиксации.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаМаршрутизацииНаРабочемМесте
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	ВТТранспорт КАК ВТТранспорт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВесовыеМинимумыПодъемов КАК ВТ_ВесовыеМинимумыПодъемов
	|			ПО ДополнительныеПараметрыЗаказа.ТарифнаяСеткаПодъемаЗаказов = ВТ_ВесовыеМинимумыПодъемов.ТарифНаПодъем
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифыРасчетаСтоимостиДоставки КАК ТарифыРасчетаСтоимостиДоставки
	|			ПО ДополнительныеПараметрыЗаказа.ТарифРасчетаСтоимостиДоставки = ТарифыРасчетаСтоимостиДоставки.КодАдминки
	|		ПО ВТТранспорт.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО ВТТранспорт.Контрагент = ПараметрыКонтрагентовСрезПоследних.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТипыОплат_КИК КАК ВТ_ТипыОплат_КИК
	|		ПО ВТТранспорт.Контрагент = ВТ_ТипыОплат_КИК.Партнер
	|			И ВТТранспорт.Заказ.ТипОплаты = ВТ_ТипыОплат_КИК.ТипОплаты.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеФиксации КАК ВТ_ПоследниеФиксации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФиксацияМаршрутизацииРейса.Заказы КАК ФиксацияМаршрутизацииРейсаЗаказы
	|			ПО ВТ_ПоследниеФиксации.Ссылка = ФиксацияМаршрутизацииРейсаЗаказы.Ссылка
	|				И ВТ_ПоследниеФиксации.Заказ = ФиксацияМаршрутизацииРейсаЗаказы.Заказ
	|		ПО ВТТранспорт.Заказ = ВТ_ПоследниеФиксации.Заказ
	|			И ВТТранспорт.РейсДок = ВТ_ПоследниеФиксации.Рейс
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТранспорт.НомерЗаказа,
	|	ВТТранспорт.Транспорт,
	|	ВТТранспорт.Рейс,
	|	ВТТранспорт.Контрагент,
	|	ВТТранспорт.Транспорт.НомерЛог,
	|	ВТТранспорт.СтатусИнтернетМагазина,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КОплатеКлиентом, 0),
	|	ДополнительныеПараметрыЗаказа.EmailКлиента,
	|	ДополнительныеПараметрыЗаказа.ТарифицируемыйВес,
	|	ВЫБОР
	|		КОГДА ДополнительныеПараметрыЗаказа.МетодОплатыПодъемаЗаказа = ЗНАЧЕНИЕ(Перечисление.МетодыОплатыПодъёмаЗаказа.ОплачиваетПартнер)
	|			ТОГДА 1
	|		КОГДА ДополнительныеПараметрыЗаказа.МетодОплатыПодъемаЗаказа = ЗНАЧЕНИЕ(Перечисление.МетодыОплатыПодъёмаЗаказа.ОплачиваетКлиент)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ВесовыеМинимумыПодъемов.ВесОт, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДополнительныеПараметрыЗаказа.МетодОплатыПодъемаЗаказа = ЗНАЧЕНИЕ(Перечисление.МетодыОплатыПодъёмаЗаказа.ОплачиваетПартнер)
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ТарифицируемыйВес, 0) > ВТ_ВесовыеМинимумыПодъемов.ВесОт
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке.КодВАдминке,
	|	ДополнительныеПараметрыЗаказа.СтавкаНДСФЗПоДоставке,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков, ЛОЖЬ),
	|	ДополнительныеПараметрыЗаказа.КодИдентификацииКлиента,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ТипыОплат_КИК.Партнер, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВТТранспорт.РейсДок,
	|	ВТТранспорт.Заказ.УчитыватьИтогоКОплате,
	|	ВТТранспорт.Заказ.ЗапретЧастичногоВыкупа,
	|	ВТТранспорт.Заказ.КоличествоМест,
	|	ЕСТЬNULL(ВТТранспорт.Заказ.ЗонаТарификации.Код, """"),
	|	ВТТранспорт.ЗаказМД.СтоимостьДоставкиДоМКАД + ВТТранспорт.ЗаказМД.СтоимостьДоставкиЗаМКАД,
	|	ВТТранспорт.ЗаказМД.Телефон,
	|	ВТТранспорт.ЗаказМД.ТочкаПрибытия.Адрес.Широта,
	|	ВТТранспорт.ЗаказМД.ТочкаПрибытия.Адрес.Долгота,
	|	ВТТранспорт.ЗаказМД.ТочкаПрибытия.Наименование,
	|	ВТТранспорт.ЗаказМД.Грузополучатель.Наименование,
	|	ВТТранспорт.ЗаказМД.Грузополучатель.Код,
	|	ЕСТЬNULL(ВТТранспорт.ЗаказМД.ВремяПрибытияС, """"),
	|	ЕСТЬNULL(ВТТранспорт.ЗаказМД.ВремяПрибытияПо, """"),
	|	ДополнительныеПараметрыЗаказа.ПодписаниеИВозвратСопрДокументов,
	|	ВТТранспорт.Заказ,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ТарифПримерки, ЗНАЧЕНИЕ(Справочник.ТарифыПримерка.ПустаяСсылка)),
	|	ЕСТЬNULL(ФиксацияМаршрутизацииРейсаЗаказы.ПорядокМаршрутизации, -1),
	|	ЕСТЬNULL(ВТ_ПоследниеФиксации.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ КАК Заказ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Номенклатура) КАК КоличествоSKU
	|ПОМЕСТИТЬ ВТ_КоличествоТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслугТовары.Ссылка КАК Заказ,
	|		РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
	|	ИЗ
	|		ВТЗаказы КАК ВТЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ПО ВТЗаказы.Заказ = РеализацияТоваровУслугТовары.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	|		РеализацияТоваровУслугПодарочныеПозиции.Номенклатура
	|	ИЗ
	|		ВТЗаказы КАК ВТЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	|			ПО ВТЗаказы.Заказ = РеализацияТоваровУслугПодарочныеПозиции.Ссылка) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиТарифаПримерки.ТарифПримерки КАК ТарифПримерки,
	|	МИНИМУМ(ПоказателиТарифаПримерки.КоличествоSKUОт) КАК КоличествоSKUОт
	|ПОМЕСТИТЬ ВТ_ПоказателиТарифаПримерки
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиТарифаПримерки КАК ПоказателиТарифаПримерки
	|		ПО ВТЗаказы.ТарифПримерки = ПоказателиТарифаПримерки.ТарифПримерки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоказателиТарифаПримерки.ТарифПримерки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗаказы.Заказ КАК Заказ
	|ПОМЕСТИТЬ ВТ_УслугаПримерки
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоТоваров КАК ВТ_КоличествоТоваров
	|		ПО (ВТЗаказы.ТарифПримерки <> ЗНАЧЕНИЕ(Справочник.ТарифыПримерка.ПустаяСсылка))
	|			И ВТЗаказы.Заказ = ВТ_КоличествоТоваров.Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоказателиТарифаПримерки КАК ВТ_ПоказателиТарифаПримерки
	|		ПО ВТЗаказы.ТарифПримерки = ВТ_ПоказателиТарифаПримерки.ТарифПримерки
	|ГДЕ
	|	ВТ_КоличествоТоваров.КоличествоSKU >= ВТ_ПоказателиТарифаПримерки.КоличествоSKUОт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗаказы.НомерЗаказа КАК НомерЗаказа,
	|	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	ВТЗаказы.Транспорт КАК Транспорт,
	|	ТипыОплат.КодОплаты КАК КодОплаты,
	|	ВТЗаказы.Рейс КАК Рейс,
	|	ВТЗаказы.Контрагент.Наименование КАК ИнтернетМагазин,
	|	ВТЗаказы.НомерСклад КАК НомерСклад,
	|	ВТЗаказы.Телефон КАК Телефон,
	|	ВТЗаказы.Широта КАК Широта,
	|	ВТЗаказы.Долгота КАК Долгота,
	|	ВТЗаказы.АдресСтрока КАК АдресСтрока,
	|	ВТЗаказы.Клиент КАК Клиент,
	|	ВТЗаказы.ВремяПрибытияС КАК ВремяПрибытияС,
	|	ВТЗаказы.ВремяПрибытияПо КАК ВремяПрибытияПо,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК НоменклатураКод,
	|	ВТЗаказы.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ВТЗаказы.Контрагент.Код КАК КонтрагентКод,
	|	ВТЗаказы.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина,
	|	ВТЗаказы.КодКлиента КАК КодКлиента,
	|	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты КАК ТипОплаты,
	|	ВТЗаказы.СтоимостьДоставки_ КАК СтоимостьДоставки,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	ВТЗаказы.Контрагент КАК Контрагент,
	|	ВТЗаказы.УчитыватьИтогоКОплате КАК УчитыватьИтогоКОплате,
	|	ВТЗаказы.КОплатеКлиентом КАК КОплатеКлиентом,
	|	ВТЗаказы.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставке КАК СтавкаНДСФЗПоДоставке,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	ВТЗаказы.EmailКлиента КАК EmailКлиента,
	|	РеализацияТоваровУслугТовары.СтавкаНДСФЗ54.КодВАдминке КАК СтавкаНДСФЗ,
	|	ВТЗаказы.МетодОплатыПодъема КАК МетодОплатыПодъема,
	|	ВТЗаказы.ТарифицируемыйВес КАК ТарифицируемыйВес,
	|	ВТЗаказы.КоличествоМест КАК КоличествоМест,
	|	РеализацияТоваровУслугТовары.ШтрихкодНоменклатуры.Код КАК ШтрихкодНоменклатуры,
	|	ВТЗаказы.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
	|	ВТЗаказы.ПорядокСортировки КАК ПорядокСортировки,
	|	ВТЗаказы.РейсДокумент КАК РейсДокумент,
	|	ВТЗаказы.ЗапрашиватьДанныеПодъема КАК ЗапрашиватьДанныеПодъема,
	|	ВТЗаказы.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
	|	РеализацияТоваровУслугТовары.СтавкаНДСФЗ54 КАК СтавкаНДСФЗ54Спр,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставкеСпр КАК СтавкаНДСФЗПоДоставкеСпр,
	|	ВТЗаказы.КодЗоныТарификации КАК КодЗоныТарификации,
	|	РеализацияТоваровУслугТовары.КодМаркировки КАК КодМаркировки,
	|	ВТЗаказы.КодИдентификацииКлиента КАК КодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиентаПоТипамОплат КАК ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Поставщик.Код, """") КАК КодПоставщикаТовара,
	|	ВТЗаказы.ТарифРасчетаСтоимостиДоставки КАК ТарифРасчетаСтоимостиДоставки,
	|	ВТЗаказы.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа КАК ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	РеализацияТоваровУслугТовары.Ссылка.СуммаПредоплаты КАК СуммаПредоплаты,
	|	ВТЗаказы.ПодписаниеИВозвратСопрДокументов КАК ПодписаниеИВозвратСопрДокументов,
	|	ВТЗаказы.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ТипПозицииЗаказа = ЗНАЧЕНИЕ(Справочник.ТипыПозицийЗаказа.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугТовары.ТипПозицииЗаказа.ПризнакПредметаРасчета
	|	КОНЕЦ КАК ПризнакПредметаРасчета,
	|	ВТЗаказы.ДатаМаршрутизацииНаРабочемМесте КАК ДатаМаршрутизацииНаРабочемМесте
	|ПОМЕСТИТЬ ВТИтог
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	|			ПО РеализацияТоваровУслугТовары.Ссылка.ТипОплаты = ТипыОплат.Код
	|		ПО ВТЗаказы.Заказ = РеализацияТоваровУслугТовары.Ссылка
	|ГДЕ
	|	ВТЗаказы.Заказ.СтатусИнтернетМагазина В (2, 3, 4)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаказы.НомерЗаказа,
	|	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	|	ВТЗаказы.Транспорт,
	|	ТипыОплат.КодОплаты,
	|	ВТЗаказы.Рейс,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	|	ВТЗаказы.НомерСклад,
	|	ВТЗаказы.Телефон,
	|	ВТЗаказы.Широта,
	|	ВТЗаказы.Долгота,
	|	ВТЗаказы.АдресСтрока,
	|	ВТЗаказы.Клиент,
	|	ВТЗаказы.ВремяПрибытияС,
	|	ВТЗаказы.ВремяПрибытияПо,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код,
	|	ВТЗаказы.Контрагент.Наименование,
	|	ВТЗаказы.Контрагент.Код,
	|	ВТЗаказы.СтатусИнтернетМагазина,
	|	ВТЗаказы.КодКлиента,
	|	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	|	ВТЗаказы.СтоимостьДоставки_,
	|	РеализацияТоваровУслугТовары.НомерСтроки,
	|	ВТЗаказы.Контрагент,
	|	ВТЗаказы.УчитыватьИтогоКОплате,
	|	ВТЗаказы.КОплатеКлиентом,
	|	ВТЗаказы.ЗапретЧастичногоВыкупа,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставке,
	|	РеализацияТоваровУслугТовары.Цена,
	|	ВТЗаказы.EmailКлиента,
	|	ВТЗаказы.МетодОплатыПодъема,
	|	ВТЗаказы.ТарифицируемыйВес,
	|	ВТЗаказы.КоличествоМест,
	|	РеализацияТоваровУслугТовары.ШтрихкодНоменклатуры.Код,
	|	ВТЗаказы.ЗапретСменыОплаты,
	|	ВТЗаказы.ПорядокСортировки,
	|	ВТЗаказы.РейсДокумент,
	|	ВТЗаказы.ЗапрашиватьДанныеПодъема,
	|	ВТЗаказы.ПечатьПредоплаченныхЧеков,
	|	РеализацияТоваровУслугТовары.СтавкаНДСФЗ54.КодВАдминке,
	|	РеализацияТоваровУслугТовары.СтавкаНДСФЗ54,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставкеСпр,
	|	ВТЗаказы.КодЗоныТарификации,
	|	РеализацияТоваровУслугТовары.КодМаркировки,
	|	ВТЗаказы.КодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Поставщик.Код, """"),
	|	ВТЗаказы.ТарифРасчетаСтоимостиДоставки,
	|	ВТЗаказы.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	РеализацияТоваровУслугТовары.Ссылка.СуммаПредоплаты,
	|	ВТЗаказы.ПодписаниеИВозвратСопрДокументов,
	|	ВТЗаказы.Заказ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ТипПозицииЗаказа = ЗНАЧЕНИЕ(Справочник.ТипыПозицийЗаказа.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугТовары.ТипПозицииЗаказа.ПризнакПредметаРасчета
	|	КОНЕЦ,
	|	ВТЗаказы.ДатаМаршрутизацииНаРабочемМесте,
	|	ВТЗаказы.Контрагент.Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТЗаказы.НомерЗаказа,
	|	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	|	СУММА(РеализацияТоваровУслугТовары.Количество),
	|	СУММА(РеализацияТоваровУслугТовары.Сумма),
	|	ВТЗаказы.Транспорт,
	|	ТипыОплат.КодОплаты,
	|	ВТЗаказы.Рейс,
	|	ВТЗаказы.Контрагент.Наименование,
	|	ВТЗаказы.НомерСклад,
	|	ВТЗаказы.Телефон,
	|	ВТЗаказы.Широта,
	|	ВТЗаказы.Долгота,
	|	ВТЗаказы.АдресСтрока,
	|	ВТЗаказы.Клиент,
	|	ВТЗаказы.ВремяПрибытияС,
	|	ВТЗаказы.ВремяПрибытияПо,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код,
	|	ВТЗаказы.Контрагент.Наименование,
	|	ВТЗаказы.Контрагент.Код,
	|	ВТЗаказы.СтатусИнтернетМагазина,
	|	ВТЗаказы.КодКлиента,
	|	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	|	ВТЗаказы.СтоимостьДоставки_,
	|	1000 + РеализацияТоваровУслугТовары.НомерСтроки,
	|	ВТЗаказы.Контрагент,
	|	ВТЗаказы.УчитыватьИтогоКОплате,
	|	ВТЗаказы.КОплатеКлиентом,
	|	ВТЗаказы.ЗапретЧастичногоВыкупа,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставке,
	|	РеализацияТоваровУслугТовары.Цена,
	|	ВТЗаказы.EmailКлиента,
	|	РеализацияТоваровУслугТовары.СтавкаНДСФЗ54.КодВАдминке,
	|	ВТЗаказы.МетодОплатыПодъема,
	|	ВТЗаказы.ТарифицируемыйВес,
	|	ВТЗаказы.КоличествоМест,
	|	РеализацияТоваровУслугТовары.ШтрихкодНоменклатуры.Код,
	|	ВТЗаказы.ЗапретСменыОплаты,
	|	ВТЗаказы.ПорядокСортировки,
	|	ВТЗаказы.РейсДокумент,
	|	ВТЗаказы.ЗапрашиватьДанныеПодъема,
	|	ВТЗаказы.ПечатьПредоплаченныхЧеков,
	|	РеализацияТоваровУслугТовары.СтавкаНДСФЗ54,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставкеСпр,
	|	ВТЗаказы.КодЗоныТарификации,
	|	РеализацияТоваровУслугТовары.КодМаркировки,
	|	ВТЗаказы.КодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Поставщик.Код, """"),
	|	ВТЗаказы.ТарифРасчетаСтоимостиДоставки,
	|	ВТЗаказы.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	РеализацияТоваровУслугТовары.Ссылка.СуммаПредоплаты,
	|	ВТЗаказы.ПодписаниеИВозвратСопрДокументов,
	|	ВТЗаказы.Заказ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ТипПозицииЗаказа = ЗНАЧЕНИЕ(Справочник.ТипыПозицийЗаказа.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугТовары.ТипПозицииЗаказа.ПризнакПредметаРасчета
	|	КОНЕЦ,
	|	ВТЗаказы.ДатаМаршрутизацииНаРабочемМесте
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	|			ПО РеализацияТоваровУслугТовары.Ссылка.ТипОплаты = ТипыОплат.Код
	|		ПО ВТЗаказы.Заказ = РеализацияТоваровУслугТовары.Ссылка
	|ГДЕ
	|	ВТЗаказы.Заказ.СтатусИнтернетМагазина В (2, 3, 4)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаказы.НомерЗаказа,
	|	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	|	ВТЗаказы.Транспорт,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	|	ТипыОплат.КодОплаты,
	|	ВТЗаказы.Рейс,
	|	ВТЗаказы.НомерСклад,
	|	ВТЗаказы.Телефон,
	|	ВТЗаказы.Широта,
	|	ВТЗаказы.Долгота,
	|	ВТЗаказы.АдресСтрока,
	|	ВТЗаказы.Клиент,
	|	ВТЗаказы.ВремяПрибытияС,
	|	ВТЗаказы.ВремяПрибытияПо,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код,
	|	ВТЗаказы.Контрагент.Наименование,
	|	ВТЗаказы.Контрагент.Код,
	|	ВТЗаказы.СтатусИнтернетМагазина,
	|	ВТЗаказы.КодКлиента,
	|	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	|	ВТЗаказы.СтоимостьДоставки_,
	|	1000 + РеализацияТоваровУслугТовары.НомерСтроки,
	|	ВТЗаказы.Контрагент,
	|	ВТЗаказы.УчитыватьИтогоКОплате,
	|	ВТЗаказы.КОплатеКлиентом,
	|	ВТЗаказы.ЗапретЧастичногоВыкупа,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставке,
	|	РеализацияТоваровУслугТовары.Цена,
	|	ВТЗаказы.EmailКлиента,
	|	ВТЗаказы.МетодОплатыПодъема,
	|	ВТЗаказы.ТарифицируемыйВес,
	|	ВТЗаказы.КоличествоМест,
	|	РеализацияТоваровУслугТовары.ШтрихкодНоменклатуры.Код,
	|	ВТЗаказы.ЗапретСменыОплаты,
	|	ВТЗаказы.ПорядокСортировки,
	|	ВТЗаказы.РейсДокумент,
	|	ВТЗаказы.ЗапрашиватьДанныеПодъема,
	|	ВТЗаказы.ПечатьПредоплаченныхЧеков,
	|	РеализацияТоваровУслугТовары.СтавкаНДСФЗ54.КодВАдминке,
	|	РеализацияТоваровУслугТовары.СтавкаНДСФЗ54,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставкеСпр,
	|	ВТЗаказы.КодЗоныТарификации,
	|	РеализацияТоваровУслугТовары.КодМаркировки,
	|	ВТЗаказы.КодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Поставщик.Код, """"),
	|	ВТЗаказы.ТарифРасчетаСтоимостиДоставки,
	|	ВТЗаказы.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	РеализацияТоваровУслугТовары.Ссылка.СуммаПредоплаты,
	|	ВТЗаказы.ПодписаниеИВозвратСопрДокументов,
	|	ВТЗаказы.Заказ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ТипПозицииЗаказа = ЗНАЧЕНИЕ(Справочник.ТипыПозицийЗаказа.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугТовары.ТипПозицииЗаказа.ПризнакПредметаРасчета
	|	КОНЕЦ,
	|	ВТЗаказы.ДатаМаршрутизацииНаРабочемМесте,
	|	ВТЗаказы.Контрагент.Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТЗаказы.НомерЗаказа,
	|	РеализацияТоваровУслуг.Ссылка.НомерВнешнегоЗаказа,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование,
	|	СУММА(-ВозвратТоваровОтПокупателяТовары.Количество),
	|	СУММА(-ВозвратТоваровОтПокупателяТовары.Сумма),
	|	ВТЗаказы.Транспорт,
	|	ТипыОплат.КодОплаты,
	|	ВТЗаказы.Рейс,
	|	ВТЗаказы.Контрагент.Наименование,
	|	ВТЗаказы.НомерСклад,
	|	ВТЗаказы.Телефон,
	|	ВТЗаказы.Широта,
	|	ВТЗаказы.Долгота,
	|	ВТЗаказы.АдресСтрока,
	|	ВТЗаказы.Клиент,
	|	ВТЗаказы.ВремяПрибытияС,
	|	ВТЗаказы.ВремяПрибытияПо,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код,
	|	ВТЗаказы.Контрагент.Наименование,
	|	ВТЗаказы.Контрагент.Код,
	|	ВТЗаказы.СтатусИнтернетМагазина,
	|	ВТЗаказы.КодКлиента,
	|	РеализацияТоваровУслуг.ТипОплаты,
	|	ВТЗаказы.СтоимостьДоставки_,
	|	1500 + ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	|	ВТЗаказы.Контрагент,
	|	ВТЗаказы.УчитыватьИтогоКОплате,
	|	ВТЗаказы.КОплатеКлиентом,
	|	ВТЗаказы.ЗапретЧастичногоВыкупа,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставке,
	|	ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВТЗаказы.EmailКлиента,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДСФЗ54.КодВАдминке,
	|	ВТЗаказы.МетодОплатыПодъема,
	|	ВТЗаказы.ТарифицируемыйВес,
	|	ВТЗаказы.КоличествоМест,
	|	ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры.Код,
	|	ВТЗаказы.ЗапретСменыОплаты,
	|	ВТЗаказы.ПорядокСортировки,
	|	ВТЗаказы.РейсДокумент,
	|	ВТЗаказы.ЗапрашиватьДанныеПодъема,
	|	ВТЗаказы.ПечатьПредоплаченныхЧеков,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДСФЗ54,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставкеСпр,
	|	ВТЗаказы.КодЗоныТарификации,
	|	"""",
	|	ВТЗаказы.КодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Поставщик.Код, """"),
	|	ВТЗаказы.ТарифРасчетаСтоимостиДоставки,
	|	ВТЗаказы.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	РеализацияТоваровУслуг.СуммаПредоплаты,
	|	ВТЗаказы.ПодписаниеИВозвратСопрДокументов,
	|	ВТЗаказы.Заказ,
	|	1,
	|	ВТЗаказы.ДатаМаршрутизацииНаРабочемМесте
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	|			ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
	|		ПО ВТЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|			ПО ВозвратТоваровОтПокупателя.Ссылка = ВозвратТоваровОтПокупателяТовары.Ссылка
	|		ПО ВТЗаказы.НомерЗаказа = ВозвратТоваровОтПокупателя.Номер
	|ГДЕ
	|	ВТЗаказы.Заказ.СтатусИнтернетМагазина В (2, 3, 4)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаказы.НомерЗаказа,
	|	РеализацияТоваровУслуг.Ссылка.НомерВнешнегоЗаказа,
	|	ВТЗаказы.Транспорт,
	|	ТипыОплат.КодОплаты,
	|	ВТЗаказы.Рейс,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул,
	|	ВТЗаказы.НомерСклад,
	|	ВТЗаказы.Телефон,
	|	ВТЗаказы.Широта,
	|	ВТЗаказы.Долгота,
	|	ВТЗаказы.АдресСтрока,
	|	ВТЗаказы.Клиент,
	|	ВТЗаказы.ВремяПрибытияС,
	|	ВТЗаказы.ВремяПрибытияПо,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код,
	|	ВТЗаказы.Контрагент.Наименование,
	|	ВТЗаказы.Контрагент.Код,
	|	ВТЗаказы.СтатусИнтернетМагазина,
	|	ВТЗаказы.КодКлиента,
	|	РеализацияТоваровУслуг.ТипОплаты,
	|	ВТЗаказы.СтоимостьДоставки_,
	|	1500 + ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	|	ВТЗаказы.Контрагент,
	|	ВТЗаказы.УчитыватьИтогоКОплате,
	|	ВТЗаказы.КОплатеКлиентом,
	|	ВТЗаказы.ЗапретЧастичногоВыкупа,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставке,
	|	ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВТЗаказы.EmailКлиента,
	|	ВТЗаказы.МетодОплатыПодъема,
	|	ВТЗаказы.ТарифицируемыйВес,
	|	ВТЗаказы.КоличествоМест,
	|	ВозвратТоваровОтПокупателяТовары.ШтрихкодНоменклатуры.Код,
	|	ВТЗаказы.ЗапретСменыОплаты,
	|	ВТЗаказы.ПорядокСортировки,
	|	ВТЗаказы.РейсДокумент,
	|	ВТЗаказы.ЗапрашиватьДанныеПодъема,
	|	ВТЗаказы.ПечатьПредоплаченныхЧеков,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДСФЗ54.КодВАдминке,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДСФЗ54,
	|	ВТЗаказы.СтавкаНДСФЗПоДоставкеСпр,
	|	ВТЗаказы.КодЗоныТарификации,
	|	ВТЗаказы.КодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиента,
	|	ВТЗаказы.ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Поставщик.Код, """"),
	|	ВТЗаказы.ТарифРасчетаСтоимостиДоставки,
	|	ВТЗаказы.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	РеализацияТоваровУслуг.СуммаПредоплаты,
	|	ВТЗаказы.ПодписаниеИВозвратСопрДокументов,
	|	ВТЗаказы.Заказ,
	|	ВТЗаказы.ДатаМаршрутизацииНаРабочемМесте,
	|	ВТЗаказы.Контрагент.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтог.НомерЗаказа КАК НомерЗаказа,
	|	ВТИтог.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	|	ВТИтог.Артикул КАК Артикул,
	|	ВТИтог.НоменклатураНаименование КАК НоменклатураНаименование,
	|	СУММА(ВТИтог.Количество) КАК Количество,
	|	СУММА(ВТИтог.Сумма) КАК Сумма,
	|	ВТИтог.Транспорт КАК Транспорт,
	|	ВТИтог.КодОплаты КАК КодОплаты,
	|	ВТИтог.Рейс КАК Рейс,
	|	ВТИтог.ИнтернетМагазин КАК ИнтернетМагазин,
	|	ВТИтог.НомерСклад КАК НомерСклад,
	|	ВТИтог.Телефон КАК Телефон,
	|	ВТИтог.Широта КАК Широта,
	|	ВТИтог.Долгота КАК Долгота,
	|	ВТИтог.АдресСтрока КАК АдресСтрока,
	|	ВТИтог.Клиент КАК Клиент,
	|	ВТИтог.ВремяПрибытияС КАК ВремяПрибытияС,
	|	ВТИтог.ВремяПрибытияПо КАК ВремяПрибытияПо,
	|	ВТИтог.НоменклатураКод КАК НоменклатураКод,
	|	ВТИтог.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ВТИтог.КонтрагентКод КАК КонтрагентКод,
	|	ВТИтог.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина,
	|	ВТИтог.КодКлиента КАК КодКлиента,
	|	ВТИтог.ТипОплаты КАК ТипОплаты,
	|	ВТИтог.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ВТИтог.НомерСтроки КАК НомерСтроки,
	|	ВТИтог.Контрагент КАК Контрагент,
	|	ВТИтог.УчитыватьИтогоКОплате КАК УчитыватьИтогоКОплате,
	|	ВТИтог.КОплатеКлиентом КАК КОплатеКлиентом,
	|	ВТИтог.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	|	ВТИтог.СтавкаНДСФЗПоДоставке КАК СтавкаНДСФЗПоДоставке,
	|	ВТИтог.Цена КАК Цена,
	|	ВТИтог.EmailКлиента КАК EmailКлиента,
	|	ВТИтог.СтавкаНДСФЗ КАК СтавкаНДСФЗ,
	|	ЕСТЬNULL(ВТОрганизацииПоТипамОплаты.КодОрганизацииНал, ""00-000014"") КАК КодОрганизацииНал,
	|	ЕСТЬNULL(ВТОрганизацииПоТипамОплаты.КодОрганизацииТерминал, ""00-000014"") КАК КодОрганизацииТерминал,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДополнительныеПараметрыТранспортаСрезПоследних.РежимПечатиЧеков, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧековРМЭкипажа.НеПечататьЧек)) = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РежимПечатиЧековПоТранспорту,
	|	ВТИтог.МетодОплатыПодъема КАК МетодОплатыПодъема,
	|	ЕСТЬNULL(ВТИтог.ТарифицируемыйВес, 0) КАК ТарифицируемыйВес,
	|	ВТИтог.КоличествоМест КАК КоличествоМест,
	|	ЕСТЬNULL(ВТИтог.ШтрихкодНоменклатуры, """") КАК ШКНоменклатуры,
	|	ВТИтог.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
	|	ВТИтог.ПорядокСортировки КАК ПорядокСортировки,
	|	ВЫБОР
	|		КОГДА ВТИтог.Контрагент.Родитель.Код = ""000000004""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_757""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_766""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_793""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_811""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_888""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_889""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_890""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_891""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		ИНАЧЕ ВТИтог.Контрагент.Родитель.ОсновнойМагазин.Код
	|	КОНЕЦ КАК ПартнерКод,
	|	ВТИтог.РейсДокумент.Номер КАК НомерРейса,
	|	ВТИтог.ЗапрашиватьДанныеПодъема КАК ЗапрашиватьДанныеПодъема,
	|	ВТИтог.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
	|	ВТИтог.СтавкаНДСФЗ54Спр КАК СтавкаНДСФЗ54Спр,
	|	ВТИтог.СтавкаНДСФЗПоДоставкеСпр КАК СтавкаНДСФЗПоДоставкеСпр,
	|	ВТИтог.КодЗоныТарификации КАК КодЗоныТарификации,
	|	ВТИтог.КодМаркировки КАК КодМаркировки,
	|	ВТИтог.КодИдентификацииКлиента КАК КодИдентификацииКлиента,
	|	ВТИтог.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
	|	ВТИтог.ИспользоватьКодИдентификацииКлиентаПоТипамОплат КАК ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	ВТИтог.КодПоставщикаТовара КАК КодПоставщикаТовара,
	|	ЕСТЬNULL(ВТОрганизацииПоТипамОплаты.КодОрганизацииСБП, ""00-000005"") КАК КодОрганизацииСБП,
	|	ВТИтог.ТарифРасчетаСтоимостиДоставки КАК ТарифРасчетаСтоимостиДоставки,
	|	ВТИтог.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа КАК ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	ВТИтог.СуммаПредоплаты КАК СуммаПредоплаты,
	|	ВТИтог.ПодписаниеИВозвратСопрДокументов КАК ПодписаниеИВозвратСопрДокументов,
	|	НЕ ВТ_УслугаПримерки.Заказ ЕСТЬ NULL КАК УслугаПримерки,
	|	ВТИтог.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	ЕСТЬNULL(КалендариДоставокПоЗонамДоставкиСрезПоследних.КалендарьДоставки.Код, """") КАК КалендарьДоставки,
	|	ВТИтог.ДатаМаршрутизацииНаРабочемМесте КАК ДатаМаршрутизацииНаРабочемМесте
	|ИЗ
	|	ВТИтог КАК ВТИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизацииПоТипамОплаты КАК ВТОрганизацииПоТипамОплаты
	|		ПО ВТИтог.НомерЗаказа = ВТОрганизацииПоТипамОплаты.НомерЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыТранспорта.СрезПоследних КАК ДополнительныеПараметрыТранспортаСрезПоследних
	|		ПО ВТИтог.Транспорт = ДополнительныеПараметрыТранспортаСрезПоследних.Транспорт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УслугаПримерки КАК ВТ_УслугаПримерки
	|		ПО ВТИтог.Заказ = ВТ_УслугаПримерки.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендариДоставокПоЗонамДоставки.СрезПоследних КАК КалендариДоставокПоЗонамДоставкиСрезПоследних
	|		ПО ВТИтог.Заказ.ТерминалПриема = КалендариДоставокПоЗонамДоставкиСрезПоследних.ТерминалОтгрузки
	|			И ВТИтог.Заказ.ТерминалДоставки = КалендариДоставокПоЗонамДоставкиСрезПоследних.ТерминалДоставки
	|			И ВТИтог.Заказ.ЗонаТарификации = КалендариДоставокПоЗонамДоставкиСрезПоследних.ЗонаДоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИтог.НомерЗаказа,
	|	ВТИтог.НомерВнешнегоЗаказа,
	|	ВТИтог.Артикул,
	|	ВТИтог.НоменклатураНаименование,
	|	ВТИтог.Транспорт,
	|	ВТИтог.КодОплаты,
	|	ВТИтог.Рейс,
	|	ВТИтог.ИнтернетМагазин,
	|	ВТИтог.Телефон,
	|	ВТИтог.АдресСтрока,
	|	ВТИтог.Клиент,
	|	ВТИтог.ВремяПрибытияС,
	|	ВТИтог.ВремяПрибытияПо,
	|	ВТИтог.НоменклатураКод,
	|	ВТИтог.КонтрагентНаименование,
	|	ВТИтог.КонтрагентКод,
	|	ВТИтог.КодКлиента,
	|	ВТИтог.СтоимостьДоставки,
	|	ВТИтог.ТипОплаты,
	|	ВТИтог.СтатусИнтернетМагазина,
	|	ВТИтог.Долгота,
	|	ВТИтог.Широта,
	|	ВТИтог.НомерСклад,
	|	ВТИтог.НомерСтроки,
	|	ВТИтог.Контрагент,
	|	ВТИтог.УчитыватьИтогоКОплате,
	|	ВТИтог.КОплатеКлиентом,
	|	ВТИтог.ЗапретЧастичногоВыкупа,
	|	ВТИтог.СтавкаНДСФЗПоДоставке,
	|	ВТИтог.Цена,
	|	ВТИтог.EmailКлиента,
	|	ВТИтог.СтавкаНДСФЗ,
	|	ЕСТЬNULL(ВТОрганизацииПоТипамОплаты.КодОрганизацииНал, ""00-000014""),
	|	ЕСТЬNULL(ВТОрганизацииПоТипамОплаты.КодОрганизацииТерминал, ""00-000014""),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДополнительныеПараметрыТранспортаСрезПоследних.РежимПечатиЧеков, ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧековРМЭкипажа.НеПечататьЧек)) = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВТИтог.МетодОплатыПодъема,
	|	ЕСТЬNULL(ВТИтог.ТарифицируемыйВес, 0),
	|	ВТИтог.КоличествоМест,
	|	ЕСТЬNULL(ВТИтог.ШтрихкодНоменклатуры, """"),
	|	ВТИтог.ЗапретСменыОплаты,
	|	ВТИтог.ПорядокСортировки,
	|	ВТИтог.РейсДокумент.Номер,
	|	ВТИтог.ЗапрашиватьДанныеПодъема,
	|	ВТИтог.ПечатьПредоплаченныхЧеков,
	|	ВТИтог.СтавкаНДСФЗ54Спр,
	|	ВТИтог.СтавкаНДСФЗПоДоставкеСпр,
	|	ВЫБОР
	|		КОГДА ВТИтог.Контрагент.Родитель.Код = ""000000004""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_757""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_766""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_793""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		ИНАЧЕ ВТИтог.Контрагент.Родитель.ОсновнойМагазин.Код
	|	КОНЕЦ,
	|	ВТИтог.КодЗоныТарификации,
	|	ВТИтог.КодМаркировки,
	|	ВТИтог.КодИдентификацииКлиента,
	|	ВТИтог.ИспользоватьКодИдентификацииКлиента,
	|	ВТИтог.ИспользоватьКодИдентификацииКлиентаПоТипамОплат,
	|	ВТИтог.КодПоставщикаТовара,
	|	ЕСТЬNULL(ВТОрганизацииПоТипамОплаты.КодОрганизацииСБП, ""00-000005""),
	|	ВТИтог.ТарифРасчетаСтоимостиДоставки,
	|	ВТИтог.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа,
	|	ВТИтог.СуммаПредоплаты,
	|	ВТИтог.ПодписаниеИВозвратСопрДокументов,
	|	НЕ ВТ_УслугаПримерки.Заказ ЕСТЬ NULL,
	|	ВЫБОР
	|		КОГДА ВТИтог.Контрагент.Родитель.Код = ""000000004""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_757""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_766""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_793""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_811""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_888""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_889""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_890""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		КОГДА ВТИтог.Контрагент.Код = ""Shop_891""
	|			ТОГДА ВТИтог.Контрагент.Код
	|		ИНАЧЕ ВТИтог.Контрагент.Родитель.ОсновнойМагазин.Код
	|	КОНЕЦ,
	|	ВТИтог.ПризнакПредметаРасчета,
	|	ЕСТЬNULL(КалендариДоставокПоЗонамДоставкиСрезПоследних.КалендарьДоставки.Код, """"),
	|	ВТИтог.ДатаМаршрутизацииНаРабочемМесте
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаказа,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТарифыРасчетаСтоимостиДоставкиБрейкиПоСтоимостиВыкупа.Ссылка КАК ТарифРасчетаСтоимостиДоставки,
	|	ТарифыРасчетаСтоимостиДоставкиБрейкиПоСтоимостиВыкупа.НомерСтроки КАК НомерСтроки,
	|	ТарифыРасчетаСтоимостиДоставкиБрейкиПоСтоимостиВыкупа.СтоимостьВыкупа КАК СтоимостьВыкупа,
	|	ТарифыРасчетаСтоимостиДоставкиБрейкиПоСтоимостиВыкупа.СтоимостьДоставки КАК СтоимостьДоставки
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифыРасчетаСтоимостиДоставки.БрейкиПоСтоимостиВыкупа КАК ТарифыРасчетаСтоимостиДоставкиБрейкиПоСтоимостиВыкупа
	|		ПО ВТЗаказы.ТарифРасчетаСтоимостиДоставки = ТарифыРасчетаСтоимостиДоставкиБрейкиПоСтоимостиВыкупа.Ссылка";

	//Зап.УстановитьПараметр("НачДатаНачалоОтбораПоПереносам", НачалоДня(ДатаДоставок) - 2592000); //переносы за месяц до даты доставки
	Зап.УстановитьПараметр("НачДата", НачалоДня(ДатаДоставок));
	Зап.УстановитьПараметр("КонДата", КонецДня(ДатаДоставок));
	//Зап.УстановитьПараметр("ВыбЭтап", Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки);
	Зап.УстановитьПараметр("НомерАвтомобиля", Car);
	
	//Асеев 20.10.2020 (Задача № 4315)>>>
	//Рез = Зап.Выполнить();
	РезультатПакета = Зап.ВыполнитьПакет();
	Рез = РезультатПакета[12];
	//Асеев 20.10.2020 (Задача № 4315)<<<
	Если рез.Пустой() Тогда
		Возврат Null;
	КонецеСли;	
	
	//Асеев 20.10.2020 (Задача № 4315)>>>
	//ВОЗВРАТ Рез.Выгрузить();
	ТаблицаБрейкиПоСтоимостиВыкупа = РезультатПакета[13].Выгрузить();
	ТаблицаБрейкиПоСтоимостиВыкупа.Индексы.Добавить("ТарифРасчетаСтоимостиДоставки");
	//Асеев 20.10.2020 (Задача № 4315)<<<
	
	Выб = Рез.Выбрать();
	
	
	Зап2 = Новый Запрос;
	
	Зап2.Текст = "ВЫБРАТЬ
	             |	ПечатьДвойныхЧековСрезПоследних.Контрагент
	             |ИЗ
	             |	РегистрСведений.ПечатьДвойныхЧеков.СрезПоследних(&ДатаЗапроса, ) КАК ПечатьДвойныхЧековСрезПоследних
	             |ГДЕ
	             |	ПечатьДвойныхЧековСрезПоследних.ПечататьДвойныеЧеки = ИСТИНА";
	Зап2.УстановитьПараметр("ДатаЗапроса", КонецДня(ДатаДоставок));
	ДвЧ = Зап2.Выполнить().Выгрузить();
	
	
    МассивЗаказовТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Order", "ArrayOfOrders");
    ЗаказТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Order", "Order");
    ЗаказСтрокаТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Order", "OrderRow");
    НоменклатураТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Nomenklature", "Nomenklature");
	КлиентТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Klients", "Klients");
	
	//Асеев 20.10.2020 (Задача № 4315)>>>
	БрейкПоСтоимостиВыкупаТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Order", "DeliveryCostCalculationRow");
	СтруктураПоискаБрейков = Новый Структура("ТарифРасчетаСтоимостиДоставки");
	//Асеев 20.10.2020 (Задача № 4315)<<<
	
	МассивЗаказов = ФабрикаXDTO.Создать(МассивЗаказовТип);
	
	ТекНом = Неопределено;
	
	Пока Выб.Следующий() Цикл
		Если ТекНом = Неопределено Или ТекНом <> СокрЛП(Выб.НомерЗаказа)  Тогда
			Если ТекНом <> Неопределено Тогда
				МассивЗаказов.Order.Добавить(Заказ);
			КонецЕСли;	
			
			//Если Не ЗначениеЗаполнено(Выб.НомерВнешнегоЗаказа) Тогда
			//	Продолжить;
			//КонецеСли;	
			Заказ = ФабрикаXDTO.Создать(ЗаказТип);
			//Асеев 20.10.2020 (Задача № 4315)>>>
			Заказ.costDeliveryRequiredIfRefusal = Выб.ТребуетсяОплатаСтоимостиДоставкиПриОтказеОтВыкупа;
			Если ЗначениеЗаполнено(Выб.ТарифРасчетаСтоимостиДоставки) Тогда
				СтруктураПоискаБрейков.ТарифРасчетаСтоимостиДоставки = Выб.ТарифРасчетаСтоимостиДоставки;
				Для Каждого СтрокаБрейка Из ТаблицаБрейкиПоСтоимостиВыкупа.НайтиСтроки(СтруктураПоискаБрейков) Цикл
					Брейк = ФабрикаXDTO.Создать(БрейкПоСтоимостиВыкупаТип);
					Брейк.TotalCost = СтрокаБрейка.СтоимостьВыкупа;
					Брейк.DeliveryCost = СтрокаБрейка.СтоимостьДоставки;
					Заказ.DeliveryCostCalculations.Добавить(Брейк);
				КонецЦикла;
			КонецЕсли;
			//Асеев 20.10.2020 (Задача № 4315)<<<
			//Асеев 16.08.2023 (Задача № 5099)>>>
			Заказ.calendarID = Выб.КалендарьДоставки;
			//Асеев 16.08.2023 (Задача № 5099)<<<
			//Асеев 22.01.2024 (Задача № 5209)>>>
			Заказ.dateIdRowOrder = Выб.ДатаМаршрутизацииНаРабочемМесте;
			//Асеев 22.01.2024 (Задача № 5209)<<<
			Заказ.Number = Выб.НомерЗаказа;
			Заказ.Date = ДатаДоставок;             
			Заказ.SelectTypeOfPay = 1;
			Если ЗначениеЗаполнено(Выб.ИнтернетМагазин) Тогда
				Заказ.InternetShop = Выб.ИнтернетМагазин;
				Заказ.InternetShopID = Выб.КонтрагентКод;
				Если ЗначениеЗаполнено(Выб.Контрагент) Тогда
					Най = ДвЧ.Найти(Выб.Контрагент);
					Если Най <> Неопределено Тогда
						Заказ.SelectTypeOfPay = 2;
					КонецеСли;	
				КонецеСли;	
			Иначе
				Заказ.InternetShop = "";
			КонецЕСли;	
			
			Заказ.Status = Число(Выб.СтатусИнтернетМагазина);
			Заказ.TimeOfDelivery = "с " + Формат(Час(Выб.ВремяПрибытияС), "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минута(Выб.ВремяПрибытияС), "ЧЦ=2; ЧН=00; ЧВН=") + " по " + Формат(Час(Выб.ВремяПрибытияПо), "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минута(Выб.ВремяПрибытияПо), "ЧЦ=2; ЧН=00; ЧВН=");
			Если ЗначениеЗаполнено(Выб.Широта) Тогда
				Заказ.Shirota = Выб.Широта;
			Иначе	
				Заказ.Shirota = "";
			КонецеСли;
			Если ЗначениеЗаполнено(Выб.Долгота) Тогда
				Заказ.Dolgota = Выб.Долгота;
			Иначе
				Заказ.Dolgota = "";
			КонецЕсли;	
			Если ЗначениеЗаполнено(Выб.Телефон) Тогда
				Заказ.Phone = Выб.Телефон;
			Иначе
				Заказ.Phone = "";
			КонецеСли;	
			Если ЗначениеЗаполнено(Выб.АдресСтрока) Тогда
				Заказ.Address = Выб.АдресСтрока;
			Иначе
				Заказ.Address = "";
			КонецеСли;	
			
			Заказ.TotalSum = Выб.КОплатеКлиентом;
			Заказ.TotalSumEnabled = Выб.УчитыватьИтогоКОплате;
			Заказ.PartialRedemptionDisabled = Выб.ЗапретЧастичногоВыкупа;
			
			
			Клиент = ФабрикаXDTO.Создать(КлиентТип);
			Если ЗначениеЗаполнено(Выб.КодКлиента) Тогда
				Клиент.Code = Выб.КодКлиента;
			Иначе
				Клиент.Code = "";
			КонецеСли;
			Если ЗначениеЗаполнено(Выб.Клиент) Тогда
				Клиент.Name = Выб.Клиент;
			Иначе
				Клиент.Name = "";
			КонецеСли;	
			Заказ.Client = Клиент;
			Если ЗначениеЗаполнено(Выб.НомерВнешнегоЗаказа) Тогда
				Заказ.NumberEx = Выб.НомерВнешнегоЗаказа;
			Иначе
				Заказ.NumberEx = "";
			КонецеСли;
			
			Если ЗначениеЗаполнено(Выб.ТипОплаты) Тогда
				Заказ.TypeOfPay = Выб.ТипОплаты;
			Иначе
				Заказ.TypeOfPay = "";
			КонецеСли;
			Если ЗначениеЗаполнено(Выб.СтоимостьДоставки) Тогда
				Заказ.SumDelivery = Выб.СтоимостьДоставки;
			Иначе
				Заказ.SumDelivery = 0;
			КонецеСли;
			Заказ.DataOfLifting = Истина;
			
			Если ЗначениеЗаполнено(Выб.СтавкаНДСФЗПоДоставкеСпр) Тогда
				Заказ.NDSDelivery = Выб.СтавкаНДСФЗПоДоставке;
			Иначе
				Заказ.NDSDelivery = -2;
			КонецеСли;	
			
			Заказ.PrintCheck = Ложь;
			Если ЗначениеЗаполнено(Выб.ТипОплаты) Тогда
				Если (Выб.ТипОплаты = 2 Или Выб.ТипОплаты = 1 Или Выб.ТипОплаты = 5) И Выб.РежимПечатиЧековПоТранспорту Тогда  //И Выб.РежимПечатиЧековПоТранспорту
					Заказ.PrintCheck = Истина;
				ИначеЕсли Выб.ТипОплаты = 7 И Выб.РежимПечатиЧековПоТранспорту И Выб.ПечатьПредоплаченныхЧеков Тогда //И Выб.ПечатьПредоплаченныхЧеков(Car = "000527" Или Car = "000519")
					Заказ.PrintCheck = Истина;
				КонецеСли;	
			КонецеСли;
			
			Если ЗначениеЗаполнено(Выб.EmailКлиента) Тогда
				Заказ.email = Выб.EmailКлиента;
			Иначе
				//Заказ.email = "checks@strizh-logistic.ru";
				//Заказ.email = "couriers.service@checks.ru";
				Заказ.email = "checks@gl.ru";

			КонецеСли;	
			Заказ.SendCheckOnEmail = Ложь;///!!!!!!
			
			
			Заказ.organizationCodeCash = Выб.КодОрганизацииНал;
			Заказ.organizationCodeTerminal = Выб.КодОрганизацииТерминал; 
			Заказ.organizationCodeQPS = Выб.КодОрганизацииСБП; 
			
			Заказ.countOfPlaces = Выб.КоличествоМест;
			//Если Выб.ТарифицируемыйВес
			Заказ.weight = Выб.ТарифицируемыйВес;
			Заказ.methodPaymentOfLifting = Выб.МетодОплатыПодъема;
			
			Если Выб.ЗапретСменыОплаты = Ложь Тогда
				Заказ.changeOfPaymentTypeDisabled = Ложь;
			ИначеЕсли Выб.ЗапретСменыОплаты = истина Тогда	
				Заказ.changeOfPaymentTypeDisabled = Истина;
			Иначе
				Заказ.changeOfPaymentTypeDisabled = Ложь;
			КонецеСли;	
			
			Заказ.idRowOrder = Выб.ПорядокСортировки;
			
			Заказ.partnerID = Выб.ПартнерКод;
			
			Заказ.TripID = Выб.НомерРейса;
			Заказ.requestLiftType = Выб.ЗапрашиватьДанныеПодъема;
			
			НайШаблонПоКонтрагенту = ТабШаблонов.Найти(Выб.ИнтернетМагазин);
			Если НайШаблонПоКонтрагенту = Неопределено Тогда
				Заказ.idSMSTemplate = КодАктивногоШаблонаСМС;
			Иначе
				Заказ.idSMSTemplate = СокрЛП(НайШаблонПоКонтрагенту.Код);
			КонецеСли;	
			
			Заказ.tariffZoneCode = СокрЛП(Выб.КодЗоныТарификации);
			Заказ.customerIdentificationCode = СокрЛП(Выб.КодИдентификацииКлиента);
			
			//Заказ.prepaymentAmount = Выб.СуммаПредоплаты;      !!!!! ПОКА 00000000
			Если СокрЛП(Car) = "000356" Тогда
				Если СокрЛП(Выб.НомерЗаказа) = "6961005" Или 
					СокрЛП(Выб.НомерЗаказа) = "6961049" Или 
					СокрЛП(Выб.НомерЗаказа) = "6961064" Тогда
					Заказ.prepaymentAmount = Выб.СуммаПредоплаты;
				Иначе
					Заказ.prepaymentAmount = 0;
				КонецеСли;
			Иначе	
				Заказ.prepaymentAmount = 0;
			КонецеСли;	
			
			//Если Выб.ИспользоватьКодИдентификацииКлиента И Выб.ТипОплаты = 7 Тогда
			//	Заказ.requestCustomerIdentificationCode = Истина;
			//Иначе
			//	Заказ.requestCustomerIdentificationCode = Ложь;
			//КонецЕСли;
			Если Выб.ИспользоватьКодИдентификацииКлиентаПоТипамОплат Тогда
				Заказ.requestCustomerIdentificationCode = Истина;
			Иначе
				Заказ.requestCustomerIdentificationCode = Ложь;
			КонецЕСли;
			
			Заказ.signingReturnAccDoc = Выб.ПодписаниеИВозвратСопрДокументов;
			
			//Асеев 04.03.2022 (Задача № 4755)>>>
			Заказ.fittingRequired = Выб.УслугаПримерки;
			//Асеев 04.03.2022 (Задача № 4755)<<<
			
			ТекНом = СокрЛП(Выб.НомерЗаказа);
		КонецеСли;
		
		//Если Не ЗначениеЗаполнено(Выб.Артикул) Тогда
		//	Продолжить;
		//КонецЕСли;	
		ЗаказСтрока = ФабрикаXDTO.Создать(ЗаказСтрокаТип);
		
		Номенклатура = ФабрикаXDTO.Создать(НоменклатураТип);
		Если ЗначениеЗаполнено(Выб.Артикул) Тогда
			Номенклатура.Artikul = Выб.Артикул;
		Иначе
			Номенклатура.Artikul = "";
		КонецеСли;	
		Номенклатура.Code = Выб.НоменклатураКод;
		Номенклатура.Name = Выб.НоменклатураНаименование;
		
		ЗаказСтрока.NomenKlature = Номенклатура;
		ЗаказСтрока.Count = Выб.Количество;
		ЗаказСтрока.Summa = Выб.Сумма;
		ЗаказСтрока.price = Выб.Цена;
		ЗаказСтрока.barcode = Выб.ШКНоменклатуры;
		ЗаказСтрока.markingCode = Выб.КодМаркировки;
		ЗаказСтрока.idGoodSeller = Выб.КодПоставщикаТовара;

		
		Если ЗначениеЗаполнено(Выб.СтавкаНДСФЗ54Спр) Тогда
			ЗаказСтрока.NDSRow = Выб.СтавкаНДСФЗ;
		Иначе
			ЗаказСтрока.NDSRow = -2;
		КонецеСли;	
		Заказ.Tovars.Добавить(ЗаказСтрока);
	КонецЦикла;
	МассивЗаказов.Order.Добавить(Заказ);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивЗаказов);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
    Возврат Хр;
КонецФункции

Процедура ВыгрузитьДанныеМП(OrderActs, Car, ID = Неопределено)
	Зап = OrderActs.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивЗаказовТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/OrderAct").Получить("ArrayOfOrderActs");
	OrderActs = ФабрикаXDTO.ПрочитатьXML(Чт, МассивЗаказовТип);
	Транспорт = Справочники.новаТранспорт.НайтиПоКоду(Car.Code);
	
	Для Сч = 0 По OrderActs.OrderAct.Количество() - 1 Цикл
		
		ЭтоЗабор = OrderActs.OrderAct[Сч].IsTakingGoods;
		Если Не ЗначениеЗаполнено(ЭтоЗабор) Тогда
			ЭтоЗабор = Ложь;
		КонецеСли;	
		
		
		Если Не ЭтоЗабор Тогда
			Най = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(OrderActs.OrderAct[Сч].Number);
			Если Най.Пустая() Тогда
				// не нашли заказ
				Продолжить;
			КонецеСли;
		Иначе
			Най = Документы.ЗаборТовара.НайтиПоНомеру(OrderActs.OrderAct[Сч].Number);
			Если Най.Пустая() Тогда
				// не нашли забор
				Продолжить;
			КонецеСли;
			
		КонецеСли;
		
		
		Если Не ЭтоЗабор Тогда
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	ДанныеЗаказаВодителя.Ссылка КАК Док
			|ИЗ
			|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
			|ГДЕ
			|	ДанныеЗаказаВодителя.Транспорт = &Транспорт
			|	И ДанныеЗаказаВодителя.Реализация = &Реализация
			|	И ДанныеЗаказаВодителя.Номер = &Номер
			|	И НАЧАЛОПЕРИОДА(ДанныеЗаказаВодителя.Дата, ДЕНЬ) = &Дата";
		Иначе
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	ДанныеЗаказаВодителя.Ссылка КАК Док
			|ИЗ
			|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
			|ГДЕ
			|	ДанныеЗаказаВодителя.Транспорт = &Транспорт
			|	И ДанныеЗаказаВодителя.Забор = &Реализация
			|	И ДанныеЗаказаВодителя.Номер = &Номер
			|	И НАЧАЛОПЕРИОДА(ДанныеЗаказаВодителя.Дата, ДЕНЬ) = &Дата";
		КонецеСли;	
		
					
		Зап.УстановитьПараметр("Дата", НачалоДня(OrderActs.OrderAct[Сч].Date));
		Зап.УстановитьПараметр("Транспорт", Транспорт.Ссылка);
		Зап.УстановитьПараметр("Реализация", Най.Ссылка);
		Зап.УстановитьПараметр("Номер", OrderActs.OrderAct[Сч].NumberDok);
		
		Рез = Зап.Выполнить();
		
		
		Если Рез.Пустой() Тогда
			НайД = Документы.ДанныеЗаказаВодителя.СоздатьДокумент();
			найД.Дата = OrderActs.OrderAct[Сч].Date;
		Иначе	
			Выб = Рез.Выбрать();
			Выб.Следующий();
			НайД = Выб.Док.ПолучитьОбъект();
			НайД.ДоставленныеТовары.Очистить();
		КонецеСли;
		
		Если Не ЭтоЗабор Тогда
			НайД.Реализация = Най.Ссылка;
		Иначе	
			НайД.Забор = Най.Ссылка;
		КонецеСли;	
		НайД.Номер = OrderActs.OrderAct[Сч].NumberDok;
		
		Если OrderActs.OrderAct[Сч].Status = 1 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка();
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 2 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки;
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 3 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда;
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 4 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом;
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 5 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом;			
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 6 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.НетНаСкладе;						
		ИначеЕсли OrderActs.OrderAct[Сч].Status = 7 Тогда
			НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.НеДоставлен;												
		КонецеСли;
		
		попытка
			Если OrderActs.OrderAct[Сч].TypeOfPay <> 0 Тогда
				НайД.ТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(OrderActs.OrderAct[Сч].TypeOfPay);
			КонецеСли;
			
			Если ЗначениеЗаполнено(OrderActs.OrderAct[Сч].ResultOfDelivery) И Не ЗначениеЗаполнено(НайД.ПричинаНеВыполненияДоставки) Тогда
				НайД.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.НайтиПоКоду(OrderActs.OrderAct[Сч].ResultOfDelivery);
			КонецеСли;
			
		исключение
			
		конецпопытки;
			
			
			
			
		Если OrderActs.OrderAct[Сч].ReasonFail = 0 Тогда
			
		Иначе
			КодП = Формат(Число(OrderActs.OrderAct[Сч].ReasonFail), "ЧЦ=11; ЧВН=; ЧГ=");
			НайД.ПричинаОтказаПереноса = Справочники.ПричиныОтказаПереноса.НайтиПоКоду(КодП);
			Если Не НайД.ПричинаОтказаПереноса.Пустая() Тогда
				НайД.ИнициаторСостояния = НайД.ПричинаОтказаПереноса.ИнициаторСостояния;
			Иначе
				НайД.ИнициаторСостояния = "";
			КонецЕсли;	
		КонецеСли;	
		НайД.ДатаПереноса = OrderActs.OrderAct[Сч].DateReason;
		НайД.Транспорт = Транспорт;
		НайД.Сумма = OrderActs.OrderAct[Сч].Summa;
		НайД.ДатаДоставки = OrderActs.OrderAct[Сч].Date;
		
		СписокТоваров = OrderActs.OrderAct[Сч].Tovars;
		Для СчТ = 0 По СписокТоваров.Количество() - 1 Цикл
			Кд = СписокТоваров[СчТ].Nomenklature.Code;
			Дл = 11-СтрДлина(Кд);
			Для Счпр = 1 По Дл Цикл
				Кд = Кд + " ";
			КонецЦикла;	
			Тов = Справочники.Номенклатура.НайтиПоКоду(Кд);
			//Если Не Тов.Пустая() Тогда
				НовСтр = НайД.ДоставленныеТовары.Добавить();
				НовСтр.Номенклатура = Тов.Ссылка;
				НовСтр.КоличествоДоставлено = СписокТоваров[СчТ].Count;
				НовСтр.КодМаркировки = СписокТоваров[СчТ].markingCode;
			//КонецеСли;	
		КонецЦиклА;
		
		
		Если ЭтоЗабор Тогда
			НайД.ТипЗаказа = Перечисления.ТипыЗаказов.Забор;
			НайД.КоличествоМест = OrderActs.OrderAct[Сч].PiecesOfFreight;
			Попытка
				НайД.КоличествоПалет = OrderActs.OrderAct[Сч].PaletCount;
				НайД.ОбъемныйБрейк = Справочники.ОбъемныеБрейки.НайтиПоКоду(OrderActs.OrderAct[Сч].VolumeBreak);
			Исключение
				
			КонецПопытки	
		Иначе
			НайД.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
		КонецеСли;	
		
		
		Если ID <> Неопределено Тогда
			Пл = lem.ПолучитьУзелПланаОбмена(ID);
			НайД.УзелОбмена = Пл.Ссылка;
		КонецеСли;	
		
		Попытка
			Если OrderActs.OrderAct[Сч].TypeOfLifting = 1 Тогда
				НайД.ВидПодъема = Перечисления.ВидыПодъемовВодителя.Лифт;
			ИначеЕсли OrderActs.OrderAct[Сч].TypeOfLifting = 2 Тогда	
				НайД.ВидПодъема = Перечисления.ВидыПодъемовВодителя.РучнойПодъем;
			ИначеЕсли OrderActs.OrderAct[Сч].TypeOfLifting = 3 Тогда	
				НайД.ВидПодъема = Перечисления.ВидыПодъемовВодителя.БезПодъема;				
			КонецеСли;	
				
			НайД.Этаж = OrderActs.OrderAct[Сч].FloorOfLifting;
		Исключение
				
		КонецПопытки;
		
		Попытка
			НайД.КоличествоПовторовЗапросаСостоянияЧека = OrderActs.OrderAct[Сч].countRequestPrintingCheck;
			НайД.ДатаОтправкиЧекаНаПечать = OrderActs.OrderAct[Сч].dateOfSendingDataOfCheck;
			НайД.ДатаПечатиЧеков = OrderActs.OrderAct[Сч].dateOfPrintingCheck;
			НайД.ИдентификаторЧека = OrderActs.OrderAct[Сч].idCheck;
			НайД.ИдентификаторВозвратногоЧека = OrderActs.OrderAct[Сч].idReturnCheck;
			НайД.ОшибкаФормированияЧекаНаСервере = OrderActs.OrderAct[Сч].errorFormingCheck;
			НайД.EmailКлиента = OrderActs.OrderAct[Сч].emailRecepient;
		Исключение
			
		КонецПопытки;	
		
		
		попытка
			Если OrderActs.OrderAct[Сч].TypeOfPayCheck <> 0 Тогда
				НайД.ТипОплатыЧек = Справочники.ТипыОплат.НайтиПоКоду(OrderActs.OrderAct[Сч].TypeOfPayCheck);
			КонецеСли;
			
		исключение
			
		конецпопытки;
		
		Попытка
			НайД.КоличествоХодокНаЭтаж = OrderActs.OrderAct[Сч].liftingCountOfWalkersPerFloor;
			НайД.РассчитаннаяСтоимостьПодъема = OrderActs.OrderAct[Сч].liftingCalcSum;
			НайД.ВнесеннаяСтоимостьПодъема = OrderActs.OrderAct[Сч].liftingApprovedSum;
			НайД.ВесРасчетаПодъема = OrderActs.OrderAct[Сч].liftingWeight;
			НайД.ВесРасчетаПодъемаВыгруженный = OrderActs.OrderAct[Сч].liftingWeightUploaded;
			НайД.БрейкРасчетаПодъема = Справочники.ВесовыеБрейкиРасчетаСтоимостиПодъемов.НайтиПоКоду(OrderActs.OrderAct[Сч].liftingBreak);
		Исключение
			
		КонецПопытки;	
		
		Попытка
			НайД.Рейс = Документы.Рейс.НайтиПоНомеру(OrderActs.OrderAct[Сч].tripId);
			
		Исключение
			
		КонецПопытки;	
		
		Попытка
		НайД.КодИдентификацииКлиента = OrderActs.OrderAct[Сч].customerIdentificationCode;
		НайД.СтатусУстановленБезКИК = OrderActs.OrderAct[Сч].statusSetWithoutCustomerIdentificationCode;
		Исключение
			
		КонецПопытки;	
		
		НайД.ДатаВыгрузки = ТекущаяДата();
		
		НайД.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			НайД.Записать(РежимЗаписиДокумента.Проведение);
		исключение
			СписокПолучателей = Новый Массив;
			СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
			СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
			
			Отпр = lem.ОтправитьСообщение(СписокПолучателей, "Ошибка при проведении  " + НайД.Ссылка, ОписаниеОшибки() , , "Логистическая компания ""Стриж""");	
			//+Степанов Задача Задача № 3595
			pkv.ДобавитьВСписокОтложенногоПроведения(НайД.Ссылка,ОписаниеОшибки());
			//-Степанов Задача № 3595
		КонецПопытки;	
	КонецЦикла;	
	
	//Если OrderActs.OrderAct.Количество() >= 1 Тогда
	//Если ЗначениеЗаполнено(Транспорт) Тогда
	//	Тек = ТекущаяДата();
	//	Наб = РегистрыСведений.ОбновлениеДанныхМобильногоПриложения.СоздатьНаборЗаписей();
	//	Наб.Отбор.Объект.Установить(Транспорт);
	//	Наб.Отбор.ПериодДобавления.Установить(Тек);
	//	
	//	Нов = Наб.Добавить();
	//	Нов.ПериодДобавления = Тек;
	//	Нов.Объект = Транспорт;
	//	Наб.Записать();
	//КонецеСли;	
	//КонецеСли;	
КонецПроцедуры	

Функция SetOrderStatusByCars(OrderActs, Car)
	// Вставить содержимое обработчика.
	ВыгрузитьДанныеМП(OrderActs, Car);
	Возврат 1;
КонецФункции


Функция GetDataOfAuth(ID, Type)
	Зап = Новый Запрос;
	Если Type = 1 Тогда
		Зап.Текст = "ВЫБРАТЬ
		            |	ПаролиВодителейСрезПоследних.Пароль,
		            |	ПаролиВодителейСрезПоследних.ИмяПользователя,
		            |	ПаролиВодителейСрезПоследних.ПарольПользователя
		            |ИЗ
		            |	РегистрСведений.ПаролиВодителей.СрезПоследних(&Дата, Водитель.Код = &Код) КАК ПаролиВодителейСрезПоследних";
	ИначеЕсли Type = 2 Тогда	
		Зап.Текст = "ВЫБРАТЬ
		            |	ПаролиВодителейСрезПоследних.Пароль,
		            |	ПаролиВодителейСрезПоследних.ИмяПользователя,
		            |	ПаролиВодителейСрезПоследних.ПарольПользователя
		            |ИЗ
		            |	РегистрСведений.ПаролиТранспорта.СрезПоследних(&Дата, Транспорт.Код = &Код) КАК ПаролиВодителейСрезПоследних";
	КонецеСли;	
	
	ПаролиТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Auth", "DataOfAuth");			
	Зап.УстановитьПараметр("Дата", ТекущаяДата());
	Зап.УстановитьПараметр("Код", ID);
	Рез = Зап.Выполнить().Выбрать();
	
	
	Если Рез.Следующий() Тогда
		Нов = ФабрикаXDTO.Создать(ПаролиТип);
		Нов.PasswordOfAdmin = СокрЛП(Константы.ПарольАдминаНаМобильныхУстройствах.Получить());
		Если Не ЗначениеЗаполнено(Рез.ПарольПользователя) Тогда
			Нов.PasswordOfUser = "123";
		Иначе	
			Нов.PasswordOfUser = СокрЛП(Рез.ПарольПользователя);
		КонецеСли;
		
		Если Не ЗначениеЗаполнено(Рез.ИмяПользователя) Тогда
			Нов.NameOfUser = "Admin";
		Иначе	
			Нов.NameOfUser = СокрЛП(Рез.ИмяПользователя);
		КонецеСли;	
	Иначе
		Нов = ФабрикаXDTO.Создать(ПаролиТип);
		Нов.PasswordOfAdmin = "77665";
		Нов.PasswordOfUser = "123";
		Нов.NameOfUser = "Admin";		
	конецеСли;	
	
	Возврат Нов;
КонецФункции


Функция GetPhoneOfSeniorOfLogicMan()
	Возврат Константы.ТелефонСтаршегоЛогиста.Получить();
КонецФункции


Функция GetReasonsOfCancellation()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПричиныОтказаПереноса.Код КАК Код,
	            |	ПричиныОтказаПереноса.Наименование КАК Наименование,
	            |	ПричиныОтказаПереноса.ЗапретВыбораВМП КАК ЗапретВыбораВМП
	            |ИЗ
	            |	Справочник.ПричиныОтказаПереноса КАК ПричиныОтказаПереноса
	            |ГДЕ
	            |	ПричиныОтказаПереноса.ЭтоГруппа = ЛОЖЬ";
	Рез = Зап.Выполнить().Выгрузить();
    ПричиныОтказаМассивТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellation", "ArrayOfReasonsOfCancellation");
    ПричинаОтказаТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellation", "ReasonOfCancellation");
	
	
	МассивПричин = ФабрикаXDTO.Создать(ПричиныОтказаМассивТип);
	
	ТекНом = Неопределено;
	
	Для Каждого Тек Из Рез Цикл
		Причина = ФабрикаXDTO.Создать(ПричинаОтказаТип);
		Причина.ID = Тек.Код;
		Причина.Name = Тек.Наименование;
		Причина.DeniedForMA = Тек.ЗапретВыбораВМП;
		МассивПричин.ReasonOfCancellation.Добавить(Причина);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивПричин);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции

Функция GetPhoneNumber(ID_trans)
	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТелефонныеАппаратыТранспортаСрезПоследних.ТА.Телефон КАК Телефон
	            |ИЗ
	            |	РегистрСведений.ТелефонныеАппаратыТранспорта.СрезПоследних(&ДатаЗапроса, Транспорт.Код = &КодТранс) КАК ТелефонныеАппаратыТранспортаСрезПоследних";
				
	Зап.УстановитьПараметр("ДатаЗапроса", КонецДня(ТекущаяДата()));			
	Зап.УстановитьПараметр("КодТранс", ID_trans);
	
	Рез = Зап.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Если ЗначениеЗаполнено(Рез.Телефон) Тогда
			Возврат Рез.Телефон;
		Иначе
			Возврат "";
		КонецеСли;	
	Иначе
		Возврат "";
	КонецеСли;	
КонецФункции


Функция GetCarMansForID(ID)
	// Вставить содержимое обработчика.
	Пл = lem.ПолучитьУзелПланаОбмена(ID);
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаВодители.Код КАК Код,
	            |	новаВодители.Наименование КАК Наименование,
	            |	ПаролиВодителейСрезПоследних.Пароль КАК Пароль,
	            |	новаВодители.Ссылка КАК Вод,
	            |	новаВодители.ИмяЛатиницей КАК ИмяЛатиницей
	            |ИЗ
	            |	Справочник.новаВодители.Изменения КАК новаВодителиИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.новаВодители КАК новаВодители
	            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаролиВодителей.СрезПоследних КАК ПаролиВодителейСрезПоследних
	            |			ПО (ПаролиВодителейСрезПоследних.Водитель = новаВодители.Ссылка)
	            |		ПО новаВодителиИзменения.Ссылка = новаВодители.Ссылка
	            |ГДЕ
	            |	новаВодители.ЭтоГруппа = ЛОЖЬ
	            |	И новаВодителиИзменения.Узел = &Узел";
	Зап.УстановитьПараметр("Узел", Пл.Ссылка);			
	Рез = Зап.Выполнить().Выгрузить();
    МассивВодителейТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/CarMans", "ArrayOfCarMans");
    ВодительТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/CarMans", "CarMan");
	
	
	МассивВодителей = ФабрикаXDTO.Создать(МассивВодителейТип);
	
	ТекНом = Неопределено;
	
	Для Каждого Тек Из Рез Цикл
		Водитель = ФабрикаXDTO.Создать(ВодительТип);
		Водитель.ID = Тек.Код;
		Водитель.Name = Тек.Наименование;
		Водитель.latinName = Тек.ИмяЛатиницей;
		Если ЗначениеЗаполнено(Тек.Пароль) Тогда
			Водитель.Password = Тек.Пароль;
		Иначе
			Водитель.Password = "";
		КонецеСли;	
		МассивВодителей.CarMan.Добавить(Водитель);
		ПланыОбмена.УдалитьРегистрациюИзменений(Пл.Ссылка, Тек.Вод.Ссылка);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивВодителей);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции


Функция GetCarsForID(ID)
	Пл = lem.ПолучитьУзелПланаОбмена(ID);

	// Вставить содержимое обработчика.
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаТранспорт.Код КАК Код,
	            |	новаТранспорт.Наименование КАК Наименование,
	            |	ПаролиТранспортаСрезПоследних.Пароль КАК Пароль,
	            |	новаТранспорт.НомерГосударственнойРегистрации КАК НомерГосударственнойРегистрации,
	            |	новаТранспорт.Ссылка КАК Транс,
	            |	новаТранспорт.Родитель.ТерминалДоставки.Код КАК codeRegion,
	            |	новаТранспорт.ПометкаУдаления КАК deletionMark
	            |ИЗ
	            |	Справочник.новаТранспорт.Изменения КАК новаТранспортИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.новаТранспорт КАК новаТранспорт
	            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаролиТранспорта.СрезПоследних КАК ПаролиТранспортаСрезПоследних
	            |			ПО (ПаролиТранспортаСрезПоследних.Транспорт = новаТранспорт.Ссылка)
	            |		ПО новаТранспортИзменения.Ссылка = новаТранспорт.Ссылка
	            |ГДЕ
	            |	новаТранспорт.ЭтоГруппа = ЛОЖЬ
	            |	И новаТранспортИзменения.Узел = &Узел";
	Зап.УстановитьПараметр("Узел", Пл.Ссылка);			
	Рез = Зап.Выполнить().Выгрузить();
    МассивТранспортаТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Cars", "ArrayOfCars");
    ТранспортТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Cars", "Car");
	
	
	МассивТранспорта = ФабрикаXDTO.Создать(МассивТранспортаТип);
	
	ТекНом = Неопределено;
	
	Для Каждого Тек Из Рез Цикл
		Транспорт = ФабрикаXDTO.Создать(ТранспортТип);
		Транспорт.Code = Тек.Код;
		Транспорт.Name = Тек.Наименование;
		Транспорт.Number = Тек.НомерГосударственнойРегистрации;
		Если ЗначениеЗаполнено(Тек.Пароль) Тогда
			Транспорт.Password = Тек.Пароль;
		Иначе
			Транспорт.Password = "";
		КонецеСли;	
		Если ЗначениеЗаполнено(Тек.codeRegion) Тогда
			Транспорт.codeRegion = Тек.codeRegion;
		Иначе
			Транспорт.codeRegion = "";
		КонецеСли;	
		
		Транспорт.deletionMark = Тек.deletionMark;
		
		МассивТранспорта.Car.Добавить(Транспорт);
		ПланыОбмена.УдалитьРегистрациюИзменений(Пл.Ссылка, Тек.Транс.Ссылка);
	КонецЦикла;		
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивТранспорта);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции

Функция GetParameters(Car)
    ТипМассивПараметров = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Parameters", "ArrayOfParameters");
    ТипПараметр = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Parameters", "Parameter");
	
	
	МассивПараметров = ФабрикаXDTO.Создать(ТипМассивПараметров);
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ДополнительныеПараметрыТранспортаСрезПоследних.УдаленноеЗакрытиеРейсов КАК УдаленноеЗакрытиеРейсов
	            |ИЗ
	            |	РегистрСведений.ДополнительныеПараметрыТранспорта.СрезПоследних КАК ДополнительныеПараметрыТранспортаСрезПоследних
	            |ГДЕ
	            |	ДополнительныеПараметрыТранспортаСрезПоследних.Транспорт.Код = &КодТранспорта";
	Зап.УстановитьПараметр("КодТранспорта", Car);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Параметр.key = "remoteClosing";
	
	Если Выб.Следующий() Тогда
		Если Выб.УдаленноеЗакрытиеРейсов Тогда
			Параметр.value = "1";
		Иначе
			Параметр.value = "0";
		КонецеСли;	
	Иначе
		Параметр.value = "0";
	КонецеСли;	
	МассивПараметров.Parameter.Добавить(Параметр);
	
//=============================
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "periodCheckingOfTimeInterval";
	Параметр.value = "300";
	МассивПараметров.Parameter.Добавить(Параметр);
//=============================
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "useYandexRouteQueryAfterBuildingRouteOnMap";
	Параметр.value = "1";
	МассивПараметров.Parameter.Добавить(Параметр);	
	
//=============================
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "periodAutoExchange";
	Параметр.value = "1000";
	МассивПараметров.Parameter.Добавить(Параметр);
//=============================
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "http_Exchange";
	Параметр.value = "1";
	МассивПараметров.Parameter.Добавить(Параметр);
	
//==============	
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "depthOfIntervalCheckingOfTimeInterval";
	Параметр.value = "60";
	МассивПараметров.Parameter.Добавить(Параметр);
//==============	
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "numberPalete";

	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	РейсДокумент.НомерПалетты КАК НомерПалеты
	            |ИЗ
	            |	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК РейсДокумент
	            |		ПО ПривязкаМашинКРейсамСрезПоследних.Рейс = РейсДокумент.Ссылка
	            |ГДЕ
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Код = &КодТранспорта
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	РейсДокумент.Дата УБЫВ";
	Зап.УстановитьПараметр("КодТранспорта", Car);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Параметр.value = Формат(Выб.НомерПалеты, "ЧН=0; ЧГ=");
	Иначе	
		Параметр.value = "0";
	КонецеСли;	
	МассивПараметров.Parameter.Добавить(Параметр);
//==============
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "autoLogin";

	ЗначениеПараметра = Константы.МобильноеПриложениеАвтологин.Получить();
	Если ЗначениеПараметра Тогда
		Параметр.value = "1";
	Иначе
		Параметр.value = "0";
	КонецеСли;	
		
	МассивПараметров.Parameter.Добавить(Параметр);
//==============
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "depthOfIntervalAutoLogin";

	ЗначениеПараметра = Константы.МобильноеПриложениеПериодХраненияДанныхВхода.Получить();
	Если ЗначениеПараметра Тогда
		Параметр.value = "1";
	Иначе
		Параметр.value = "0";
	КонецеСли;	
		
	МассивПараметров.Parameter.Добавить(Параметр);
//==============


//////////////////////сбп//////////////////////////
//==============	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "KeyRaifQPS";

	ЗначениеПараметра = Константы.СекретныйКлючСБПРайффайзен.Получить();
	Параметр.value = ЗначениеПараметра;
		
	МассивПараметров.Parameter.Добавить(Параметр);
//==============
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "merchantIdRaifQPS";

	ЗначениеПараметра = Константы.merchantIdСБПРайффайзен.Получить();
	Параметр.value = ЗначениеПараметра;
		
	МассивПараметров.Parameter.Добавить(Параметр);
//==============
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "intervalRequestQPS";

	ЗначениеПараметра = Константы.ИнтервалОпросаСостоянияОплатыСБПВМП.Получить();
	Параметр.value = Формат(ЗначениеПараметра, "ЧН=0; ЧГ=");
		
	МассивПараметров.Parameter.Добавить(Параметр);
//==============
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "usingQPS";

	ЗначениеПараметра = Константы.ИспользоватьОплатуСБПВМП.Получить();
	Если ЗначениеПараметра Тогда
		Параметр.value = "1";
	Иначе
		Параметр.value = "0";
	КонецеСли;	
		
	МассивПараметров.Parameter.Добавить(Параметр);
//==============


//////////////////////сбп//////////////////////////

//////////////////////карта маршрутизации//////////////////////////
//==============	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
	Параметр.key = "routeMapVersion";

	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних.ВерсияСтраницыМаршрутизацииМП.Наименование КАК routeMapVersion
	            |ИЗ
	            |	РегистрСведений.ТекущаяВерсияСтраницыМаршрутизацииМП.СрезПоследних КАК ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних";
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Параметр.value = СокрЛП(Выб.routeMapVersion);
	Иначе
		Параметр.value = "";
	КонецЕсли;	
		
	МассивПараметров.Parameter.Добавить(Параметр);
//==============


	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивПараметров);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции

Функция GetReasonsOfCancellationExtension()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПричиныОтказаПереноса.Код КАК Код,
	            |	ПричиныОтказаПереноса.Наименование КАК Наименование,
	            |	ПричиныОтказаПереноса.ЗапретВыбораВМП КАК ЗапретВыбораВМП,
	            |	ПричиныОтказаПереноса.ДоступностьПоПричинамНеВыполненияЗаказа.(
	            |		Ссылка КАК Ссылка,
	            |		НомерСтроки КАК НомерСтроки,
	            |		ПричинаНевыполнения КАК ПричинаНевыполнения,
	            |		Доступность КАК Доступность,
	            |		ВЫБОР
	            |			КОГДА ПричиныОтказаПереноса.ДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	            |				ТОГДА 1
	            |			КОГДА ПричиныОтказаПереноса.ДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	            |				ТОГДА 2
	            |			ИНАЧЕ 0
	            |		КОНЕЦ КАК TypeOfOrder
	            |	) КАК ДоступностьПоПричинамНеВыполненияЗаказа,
	            |	ПричиныОтказаПереноса.Забор КАК Забор
	            |ИЗ
	            |	Справочник.ПричиныОтказаПереноса КАК ПричиныОтказаПереноса
	            |ГДЕ
	            |	ПричиныОтказаПереноса.ЭтоГруппа = ЛОЖЬ";
	Рез = Зап.Выполнить().Выгрузить();
    ПричиныОтказаМассивТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellationExtension", "ArrayOfReasonsOfCancellation");
    ПричинаОтказаТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellationExtension", "ReasonOfCancellation");
    StringTableAvailabilityOfReasonsNotPerform_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellationExtension", "StringTableAvailabilityOfReasonsNotPerform");	
	
	МассивПричин = ФабрикаXDTO.Создать(ПричиныОтказаМассивТип);
	
	ТекНом = Неопределено;
	
	Для Каждого Тек Из Рез Цикл
		Причина = ФабрикаXDTO.Создать(ПричинаОтказаТип);
		Причина.ID = Тек.Код;
		Причина.Name = Тек.Наименование;
		Причина.DeniedForMA = Тек.ЗапретВыбораВМП;
		Причина.TakingGoods = Тек.Забор;
		Для каждого Стр Из Тек.ДоступностьПоПричинамНеВыполненияЗаказа Цикл
			Если Стр.TypeOfOrder = 0 Тогда
				Продолжить;
			КонецеСли;	
            StringTableAvailabilityOfReasonsNotPerform =  ФабрикаXDTO.Создать(StringTableAvailabilityOfReasonsNotPerform_Тип);
            StringTableAvailabilityOfReasonsNotPerform.ReasonNotPerformID = Стр.ПричинаНевыполнения.Код;
            StringTableAvailabilityOfReasonsNotPerform.Availability = Стр.Доступность;
			StringTableAvailabilityOfReasonsNotPerform.TypeOfOrder = Стр.TypeOfOrder;
            Причина.TableAvailabilityOfReasonsNotPerform.Добавить(StringTableAvailabilityOfReasonsNotPerform);
        КонецЦикла;
		МассивПричин.ReasonOfCancellation.Добавить(Причина);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивПричин);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции


Функция GetShopReasonByUnperformedOrders(Date, Car) //<+++ Костя 241115>
	Перем Заказ;
	// Вставить содержимое обработчика.
	ДатаДоставок = Date;
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	СостоянияЗаказов.Доставка.Номер
	            |ПОМЕСТИТЬ ВТПеренесенные
	            |ИЗ
	            |	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	            |ГДЕ
	            |	СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.переносдоставки)
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
	            |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	            |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	            |	новаЗаданияРейсов.Доставка.Оплачен,
	            |	новаРейсМестнойДоставки.Ссылка КАК Рейс,
	            |	РеализацияТоваровУслуг.СтатусИнтернетМагазина
	            |ПОМЕСТИТЬ ВТТранспорт
	            |ИЗ
	            |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
	            |			ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
	            |		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
	            |ГДЕ
	            |	новаРейсМестнойДоставки.ДатаНачала МЕЖДУ &НачДата И &КонДата
	            |	И новаЗадачаРейсаМестнойДоставки.Роль = &ВыбЭтап
	            |	И новаЗаданияРейсов.МаршрутСопровождения <> ИСТИНА
	            |	И новаРейсМестнойДоставки.РейсОтменен = ЛОЖЬ
	            |	И новаРейсМестнойДоставки.Транспорт.Код = &НомерАвтомобиля
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	РеализацияТоваровУслуг.Номер,
	            |	новаЗаданияРейсов.Рейс.Транспорт,
	            |	новаЗаданияРейсов.Доставка.Оплачен,
	            |	новаРейсМестнойДоставки.Ссылка,
	            |	РеализацияТоваровУслуг.ВладелецТовара,
	            |	РеализацияТоваровУслуг.СтатусИнтернетМагазина
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД КАК СтоимостьДоставки_,
	            |	ВТТранспорт.НомерЗаказа,
	            |	ВТТранспорт.Транспорт,
	            |	ВТТранспорт.ДоставкаОплачен,
	            |	ВТТранспорт.Рейс,
	            |	ВТТранспорт.Контрагент,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ВТПеренесенные.ДоставкаНомер, ИСТИНА) = ИСТИНА
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ КАК ЗаказПеренесен,
	            |	ВТТранспорт.Транспорт.НомерЛог КАК НомерСклад,
	            |	новаМестнаяДоставка.Телефон,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Наименование КАК АдресСтрока,
	            |	новаМестнаяДоставка.Грузополучатель.Наименование КАК Клиент,
	            |	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияС, """") КАК ВремяПрибытияС,
	            |	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияПо, """") КАК ВремяПрибытияПо,
	            |	ВТТранспорт.СтатусИнтернетМагазина,
	            |	новаМестнаяДоставка.Грузополучатель.Код КАК КодКлиента
	            |ПОМЕСТИТЬ ВТЗаказы
	            |ИЗ
	            |	ВТТранспорт КАК ВТТранспорт
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер
	            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеренесенные КАК ВТПеренесенные
	            |		ПО ВТТранспорт.НомерЗаказа = ВТПеренесенные.ДоставкаНомер
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТТранспорт.НомерЗаказа,
	            |	ВТТранспорт.Транспорт,
	            |	ВТТранспорт.ДоставкаОплачен,
	            |	ВТТранспорт.Рейс,
	            |	ВТТранспорт.Контрагент,
	            |	новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ВТПеренесенные.ДоставкаНомер, ИСТИНА) = ИСТИНА
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ,
	            |	ВТТранспорт.Транспорт.НомерЛог,
	            |	новаМестнаяДоставка.Телефон,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота,
	            |	новаМестнаяДоставка.ТочкаПрибытия.Наименование,
	            |	новаМестнаяДоставка.ВремяПрибытияС,
	            |	новаМестнаяДоставка.ВремяПрибытияПо,
	            |	ВТТранспорт.СтатусИнтернетМагазина,
	            |	новаМестнаяДоставка.Грузополучатель.Наименование,
	            |	новаМестнаяДоставка.Грузополучатель.Код
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТТранспорт
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТЗаказы.НомерЗаказа КАК НомерЗаказа,
	            |	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	            |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	            |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВТЗаказы.Контрагент.Наименование КАК ИнтернетМагазин,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_ КАК СтоимостьДоставки,
	            |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	            |	ВТЗаказы.Контрагент
	            |ПОМЕСТИТЬ ВТИтог
	            |ИЗ
	            |	ВТЗаказы КАК ВТЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	            |			ПО РеализацияТоваровУслугТовары.Ссылка.ТипОплаты = ТипыОплат.Код
	            |		ПО ВТЗаказы.НомерЗаказа = РеализацияТоваровУслугТовары.Ссылка.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслугТовары.Ссылка.СтатусИнтернетМагазина В (2, 3)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	РеализацияТоваровУслугТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент,
	            |	ВТЗаказы.Контрагент.Наименование
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	            |	СУММА(РеализацияТоваровУслугТовары.Количество),
	            |	СУММА(РеализацияТоваровУслугТовары.Сумма),
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	1000 + РеализацияТоваровУслугТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент
	            |ИЗ
	            |	ВТЗаказы КАК ВТЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугТовары
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	            |			ПО РеализацияТоваровУслугТовары.Ссылка.ТипОплаты = ТипыОплат.Код
	            |		ПО ВТЗаказы.НомерЗаказа = РеализацияТоваровУслугТовары.Ссылка.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслугТовары.Ссылка.СтатусИнтернетМагазина В (2, 3)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслугТовары.Ссылка.НомерВнешнегоЗаказа,
	            |	ВТЗаказы.Транспорт,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
	            |	РеализацияТоваровУслугТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслугТовары.Ссылка.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	1000 + РеализацияТоваровУслугТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент,
	            |	ВТЗаказы.Контрагент.Наименование
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслуг.Ссылка.НомерВнешнегоЗаказа,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование,
	            |	СУММА(-ВозвратТоваровОтПокупателяТовары.Количество),
	            |	СУММА(-ВозвратТоваровОтПокупателяТовары.Сумма),
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслуг.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	1500 + ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент
	            |ИЗ
	            |	ВТЗаказы КАК ВТЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	            |				ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
	            |			ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = РеализацияТоваровУслуг.Номер
	            |		ПО ВТЗаказы.НомерЗаказа = ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Ссылка.СтатусИнтернетМагазина В (2, 3)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТЗаказы.НомерЗаказа,
	            |	РеализацияТоваровУслуг.Ссылка.НомерВнешнегоЗаказа,
	            |	ВТЗаказы.Транспорт,
	            |	ТипыОплат.КодОплаты,
	            |	ВТЗаказы.Рейс,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул,
	            |	ВТЗаказы.ЗаказПеренесен,
	            |	ВТЗаказы.НомерСклад,
	            |	ВТЗаказы.Телефон,
	            |	ВТЗаказы.Широта,
	            |	ВТЗаказы.Долгота,
	            |	ВТЗаказы.АдресСтрока,
	            |	ВТЗаказы.Клиент,
	            |	ВТЗаказы.ВремяПрибытияС,
	            |	ВТЗаказы.ВремяПрибытияПо,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование,
	            |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код,
	            |	ВТЗаказы.Контрагент.Наименование,
	            |	ВТЗаказы.Контрагент.Код,
	            |	ВТЗаказы.СтатусИнтернетМагазина,
	            |	ВТЗаказы.КодКлиента,
	            |	РеализацияТоваровУслуг.ТипОплаты,
	            |	ВТЗаказы.СтоимостьДоставки_,
	            |	1500 + ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	            |	ВТЗаказы.Контрагент,
	            |	ВТЗаказы.Контрагент.Наименование
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |УНИЧТОЖИТЬ ВТЗаказы
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТИтог.Контрагент
	            |ИЗ
	            |	ВТИтог КАК ВТИтог
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВТИтог.Контрагент";				
	Зап.УстановитьПараметр("НачДата", НачалоДня(ДатаДоставок));
	Зап.УстановитьПараметр("КонДата", КонецДня(ДатаДоставок));
	Зап.УстановитьПараметр("ВыбЭтап", Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки);
	Зап.УстановитьПараметр("НомерАвтомобиля", Car);
	
	Рез = Зап.Выполнить();
	//Если Рез.Пустой() Тогда
	//	Возврат Null;
	//КонецеСли;	
	
	Выб = Рез.Выбрать();
	
    ТипМассивИМ      = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Shop", "ArrayOfShop");
    ТипСтрокиИМ      = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Shop", "Shop");
    //ТипТаблицаПричины   = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ShopReasonByUnperformedOrders", "TableReasonUnperformedOrder");
	ТипСтрокиПричины = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Shop", "StringTableReasonUnperformedOrder");
	//ТипСтрокиИМ  = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ShopReasonByUnperformedOrders", "ReasonUnperformedOrder");
	
	
	ТекНом = Неопределено;
	
	МассивИМ = ФабрикаXDTO.Создать(ТипМассивИМ);
	
	Пока Выб.Следующий() Цикл
		
		СтрокаИМ = ФабрикаXDTO.Создать(ТипСтрокиИМ);
		СтрокаИМ.InternetShopID   = Выб.Контрагент.Код;
		СтрокаИМ.InternetShopName = Выб.Контрагент.Наименование;             
		//Заказ.TableReasonUnperformedOrder			
		ЗапросПоПричинам = Новый Запрос(
		"ВЫБРАТЬ
		|	ПричиныНеВыполненияДоставкиПоИМ.ПричинаНевыполненияДоставки
		|ИЗ
		|	РегистрСведений.ПричиныНеВыполненияДоставкиПоИМ КАК ПричиныНеВыполненияДоставкиПоИМ
		|ГДЕ
		|	ПричиныНеВыполненияДоставкиПоИМ.ИнтернетМагазин = &ИнтернетМагазин");
		ЗапросПоПричинам.УстановитьПараметр("ИнтернетМагазин", Выб.Контрагент.Ссылка);
		Причины = ЗапросПоПричинам.Выполнить().Выгрузить();
		//ТаблицаПричин = ФабрикаXDTO.Создать(ТипТаблицаПричины);
		
		Для Каждого СтрПричина Из Причины Цикл
			СтрокаПричины = ФабрикаXDTO.Создать(ТипСтрокиПричины);
			СтрокаПричины.ReasonUnperformedID = СтрПричина.ПричинаНевыполненияДоставки.Код;
			СтрокаИМ.TableReasonUnperformedOrder.Добавить(СтрокаПричины);
		КонецЦикла;
		
		МассивИМ.Shop.Добавить(СтрокаИМ);
		
	КонецЦикла;
//	МассивИМ.Order.Добавить(Заказ);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивИМ);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
    Возврат Хр;
	
КонецФункции

Функция GetChangedReason(PlanID) //<+++ Костя 251115>
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПричиныНеВыполненияДоставкиИзменения.Ссылка.Код КАК Код,
	|	ПричиныНеВыполненияДоставкиИзменения.Ссылка.Наименование КАК Наименование,
	|	ПричиныНеВыполненияДоставкиИзменения.Ссылка.ЗапретВыбораВМобильномПриложении КАК ЗапретВыбораВМобильномПриложении,
	|	ПричиныНеВыполненияДоставкиИзменения.Ссылка.Доставка КАК Доставка,
	|	ПричиныНеВыполненияДоставкиИзменения.Ссылка.Перенос КАК Перенос,
	|	ПричиныНеВыполненияДоставкиИзменения.Ссылка.Отмена КАК Отмена,
	|	ПричиныНеВыполненияДоставкиИзменения.Ссылка.Забор КАК Забор,
	|	ПричиныНеВыполненияДоставкиИзменения.Ссылка.Заезд КАК Заезд
	|ИЗ
	|	Справочник.ПричиныНеВыполненияДоставки.Изменения КАК ПричиныНеВыполненияДоставкиИзменения
	|ГДЕ
	|	ПричиныНеВыполненияДоставкиИзменения.Узел.Код = &Код");
	Запрос.УстановитьПараметр("Код", PlanID);//"7b984125-bc21-cef7-763e-5d16c13277a3");
	Рез = Запрос.Выполнить().Выгрузить();

	//Если Рез.Количество() = 0 Тогда
	//	Возврат Null;
	//КонецеСли;	
		
    ТипПричин        = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Reason", "ArrayOfReason");
    ТипСтрокиПричины = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Reason", "Reason");	
	
	МассивПричин = ФабрикаXDTO.Создать(ТипПричин);
	
	Для Каждого Стр Из Рез Цикл
		СтрокаИМ = ФабрикаXDTO.Создать(ТипСтрокиПричины);
		СтрокаИМ.ID     = Стр.КОД;
		СтрокаИМ.Name   = Стр.Наименование;
		СтрокаИМ.SelBan = Стр.ЗапретВыбораВМобильномПриложении;
		СтрокаИМ.Delivery = Стр.Доставка;
		СтрокаИМ.Perenos = Стр.Перенос;
		СтрокаИМ.TakingGoods = Стр.Забор;
		СтрокаИМ.Arrival = Стр.Заезд;
		СтрокаИМ.Cancel = Стр.Отмена;
		МассивПричин.Reason.Добавить(СтрокаИМ);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивПричин);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
    Возврат Хр;
	
КонецФункции

Функция DelReason(Reasons, ID) //<+++ Костя 251115>
	
	//Зап = Reasons.Получить();
	//Чт = Новый ЧтениеXML();
	//Чт.УстановитьСтроку(Зап);
	//МассивПричинТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ArrayOfString").Получить("ArrayOfString");
	//Причины = ФабрикаXDTO.ПрочитатьXML(Чт, МассивПричинТип);
	
	Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
	Возвр = Истина;
	
	Попытка
		Для Сч = 0 По Reasons.string.Количество() - 1 Цикл
			КодСпр = Reasons.string[Сч];
			Спр = Справочники.ПричиныНеВыполненияДоставки.НайтиПоКоду(КодСпр);
			Если Спр = Справочники.ПричиныНеВыполненияДоставки.ПустаяСсылка() Тогда
				Возвр = Ложь;
			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Спр);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возвр = Ложь;
	КонецПопытки;
	
	Возврат Возвр;	
	
КонецФункции


Функция GetClientOrdersTakingGoodsByCars(Date, Car)
	ДатаДоставок = Date;
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.ЗаборТовара).Ссылка КАК Забор,
	            |	РейсЗаказы.НомерСтроки КАК ПорядокСортировки,
	            |	РейсЗаказы.Ссылка.Номер КАК НомерРейса
	            |ПОМЕСТИТЬ ВТ_Заборы
	            |ИЗ
	            |	Документ.Рейс.Заказы КАК РейсЗаказы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
	            |		ПО РейсЗаказы.Ссылка.РейсМестнойДоставки = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
	            |ГДЕ
	            |	РейсЗаказы.Заказ ССЫЛКА Документ.ЗаборТовара
	            |	И РейсЗаказы.Ссылка.Проведен
	            |	И РейсЗаказы.Ссылка.ДатаРейса МЕЖДУ &Дата1 И &Дата2
	            |	И НЕ РейсЗаказы.Ссылка.РейсМестнойДоставки.РейсОтменен
	            |	И новаЗадачаРейсаМестнойДоставки.Роль = &ВыбЭтап
	            |	И РейсЗаказы.Ссылка.РейсМестнойДоставки.Транспорт.Код = &НомерАвтомобиля
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.ЗаборТовара).Ссылка,
	            |	РейсЗаказы.НомерСтроки,
	            |	РейсЗаказы.Ссылка.Номер
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТ_Заборы.Забор.Номер КАК Номер,
	            |	ВТ_Заборы.Забор.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	            |	ВТ_Заборы.Забор.СтатусИнтернетМагазина КАК СтатусИнтернетМагазина,
	            |	ВТ_Заборы.Забор.ВремяДоставкиС КАК ВремяДоставкиС,
	            |	ВТ_Заборы.Забор.ВремяДоставкиПо КАК ВремяДоставкиПо,
	            |	ВТ_Заборы.Забор.ТочкаДоставки.Адрес.Широта КАК Широта,
	            |	ВТ_Заборы.Забор.ТочкаДоставки.Адрес.Долгота КАК Долгота,
	            |	ВТ_Заборы.Забор.Телефон КАК Телефон,
	            |	ВТ_Заборы.Забор.АдресДоставки КАК АдресДоставки,
	            |	ВТ_Заборы.Забор.Контрагент КАК Контрагент,
	            |	ВТ_Заборы.Забор.Грузополучатель.Код КАК КодКлиента,
	            |	ВТ_Заборы.Забор.Грузополучатель.Наименование КАК Клиент,
	            |	ВТ_Заборы.Забор.ТарифнаяСетка.Код КАК tariffID,
	            |	ВТ_Заборы.Забор.ОбъемЗабора КАК ОбъемЗабора,
	            |	ВТ_Заборы.ПорядокСортировки КАК ПорядокСортировки,
	            |	ВТ_Заборы.НомерРейса КАК НомерРейса
	            |ИЗ
	            |	ВТ_Заборы КАК ВТ_Заборы
	            |ГДЕ
	            |	ВТ_Заборы.Забор.СтатусИнтернетМагазина В (2, 3)";				
	Зап.УстановитьПараметр("Дата1", НачалоДня(ДатаДоставок));
	Зап.УстановитьПараметр("Дата2", КонецДня(ДатаДоставок));
	Зап.УстановитьПараметр("ВыбЭтап", Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки);
	Зап.УстановитьПараметр("НомерАвтомобиля", Car);
	
	Рез = Зап.Выполнить();
	Если рез.Пустой() Тогда
	    Возврат Null;
	КонецеСли;	
	
	Выб = Рез.Выбрать();
	
	
	//Зап2 = Новый Запрос;
	//
	//Зап2.Текст = "ВЫБРАТЬ
	//             |	ПечатьДвойныхЧековСрезПоследних.Контрагент
	//             |ИЗ
	//             |	РегистрСведений.ПечатьДвойныхЧеков.СрезПоследних(&ДатаЗапроса, ) КАК ПечатьДвойныхЧековСрезПоследних
	//             |ГДЕ
	//             |	ПечатьДвойныхЧековСрезПоследних.ПечататьДвойныеЧеки = ИСТИНА";
	//Зап2.УстановитьПараметр("ДатаЗапроса", КонецДня(ДатаДоставок));
	//ДвЧ = Зап2.Выполнить().Выгрузить();
	
	
	МассивЗаборовТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/OrderTakingGoods", "ArrayOfOrders");
	ЗаборТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/OrderTakingGoods", "OrderTakingGoods");
	КлиентТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/Klients", "Klients");
	
	МассивЗаборов = ФабрикаXDTO.Создать(МассивЗаборовТип);
	
	Пока Выб.Следующий() Цикл
	    Забор = ФабрикаXDTO.Создать(ЗаборТип);
	    
	    Забор.Number = Выб.Номер;
	    Забор.Date = ДатаДоставок;
	    
	    Если ЗначениеЗаполнено(Выб.Контрагент) Тогда
	        Забор.InternetShopID = Выб.Контрагент.Код;
	    Иначе
	        Забор.InternetShopID = "";
	    КонецЕСли;	
	    
	    Забор.Status = Число(Выб.СтатусИнтернетМагазина);
	    Забор.TimeOfDelivery = "с " + Формат(Час(Выб.ВремяДоставкиС), "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минута(Выб.ВремяДоставкиС), "ЧЦ=2; ЧН=00; ЧВН=") + " по " + Формат(Час(Выб.ВремяДоставкиПо), "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минута(Выб.ВремяДоставкиПо), "ЧЦ=2; ЧН=00; ЧВН=");
	    
	    Если ЗначениеЗаполнено(Выб.Широта) Тогда
	        Забор.Shirota = Выб.Широта;
	    Иначе	
	        Забор.Shirota = "";
	    КонецеСли;
	    Если ЗначениеЗаполнено(Выб.Долгота) Тогда
	        Забор.Dolgota = Выб.Долгота;
	    Иначе
	        Забор.Dolgota = "";
	    КонецЕсли;	
	    Если ЗначениеЗаполнено(Выб.Телефон) Тогда
	        Забор.Phone = Выб.Телефон;
	    Иначе
	        Забор.Phone = "";
	    КонецеСли;	
	    Если ЗначениеЗаполнено(Выб.АдресДоставки) Тогда
	        Забор.Address = Выб.АдресДоставки;
	    Иначе
	        Забор.Address = "";
	    КонецеСли;	
	    
		
		Клиент = ФабрикаXDTO.Создать(КлиентТип);
		Если ЗначениеЗаполнено(Выб.КодКлиента) Тогда
			Клиент.Code = Выб.КодКлиента;
		Иначе
			Клиент.Code = "";
		КонецеСли;
		Если ЗначениеЗаполнено(Выб.Клиент) Тогда
			Клиент.Name = Выб.Клиент;
		Иначе
			Клиент.Name = "";
		КонецеСли;	
		Забор.Client = Клиент;
		
		
	    
	    Если ЗначениеЗаполнено(Выб.НомерВнешнегоЗаказа) Тогда
	        Забор.NumberEx = Выб.НомерВнешнегоЗаказа;
	    Иначе
	        Забор.NumberEx = "";
	    КонецеСли;
	    
	    Если ЗначениеЗаполнено(Выб.tariffID) Тогда
	        Забор.tariffID = Выб.tariffID;
	    Иначе
	        Забор.tariffID = "";
	    КонецеСли;
		Забор.VolumeImport = Выб.ОбъемЗабора;
		Забор.idRowOrder = Выб.ПорядокСортировки;
		Забор.tripID = Выб.НомерРейса;
	    МассивЗаборов.OrderTakingGoods.Добавить(Забор);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивЗаборов);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	Возврат Хр;
КонецФункции

Функция getVolumeBreake(ID)
	// Вставить содержимое обработчика.
	Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
	
	Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	ТарифныеСетки.Код КАК tariffId,
	//            |	ОбъемныеБрейки.Код КАК Code,
	//            |	ОбъемныеБрейки.ОбъемОт КАК volumeStart,
	//            |	ОбъемныеБрейки.ОбъемДо КАК volumeEnd,
	//            |	ОбъемныеБрейки.Наименование КАК name
	//            |ИЗ
	//            |	Справочник.ТарифныеСетки.Изменения КАК ТарифныеСеткиИзменения
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифныеСетки КАК ТарифныеСетки
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъемныеБрейки КАК ОбъемныеБрейки
	//            |			ПО ТарифныеСетки.Ссылка = ОбъемныеБрейки.Владелец.Ссылка
	//            |		ПО ТарифныеСеткиИзменения.Ссылка = ТарифныеСетки.Ссылка
	//            |ГДЕ
	//            |	ТарифныеСеткиИзменения.Узел = &Узел
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	ТарифныеСетки.Код,
	//            |	ОбъемныеБрейки.Код,
	//            |	ОбъемныеБрейки.ОбъемОт,
	//            |	ОбъемныеБрейки.ОбъемДо,
	//            |	ОбъемныеБрейки.Наименование
	//            |ИТОГИ ПО
	//            |	tariffId";
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗаборТовара.ТарифнаяСетка КАК ТарифнаяСетка
	            |ПОМЕСТИТЬ ЗаказыНаСегодня
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ЗаборТовара.ТарифнаяСетка
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ЗаборТовара.ТарифнаяСетка
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |ГДЕ
	            |	ЗаборТовара.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ЗаборТовара.ТарифнаяСетка
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ТарифныеСетки.Код КАК tariffId,
	            |	ОбъемныеБрейки.Код КАК Code,
	            |	ОбъемныеБрейки.ОбъемОт КАК volumeStart,
	            |	ОбъемныеБрейки.ОбъемДо КАК volumeEnd,
	            |	ОбъемныеБрейки.Наименование КАК name
	            |ИЗ
	            |	Справочник.ТарифныеСетки.Изменения КАК ТарифныеСеткиИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифныеСетки КАК ТарифныеСетки
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъемныеБрейки КАК ОбъемныеБрейки
	            |			ПО ТарифныеСетки.Ссылка = ОбъемныеБрейки.Владелец.Ссылка
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыНаСегодня КАК ЗаказыНаСегодня
	            |			ПО ЗаказыНаСегодня.ТарифнаяСетка.Ссылка = ТарифныеСетки.Ссылка
	            |		ПО ТарифныеСеткиИзменения.Ссылка = ТарифныеСетки.Ссылка
	            |ГДЕ
	            |	ТарифныеСеткиИзменения.Узел = &Узел
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ТарифныеСетки.Код,
	            |	ОбъемныеБрейки.Код,
	            |	ОбъемныеБрейки.ОбъемОт,
	            |	ОбъемныеБрейки.ОбъемДо,
	            |	ОбъемныеБрейки.Наименование
	            |ИТОГИ ПО
	            |	tariffId";
	
	
	Зап.УстановитьПараметр("Узел", Узел);
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	
	Рез = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "tariffId");
	
	
    volumeBreakeТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/tariffForMA", "volumeBreake");
    arrayOfVolumeBreakeТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/tariffForMA", "arrayOfVolumeBreake");
    tariff_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/tariffForMA", "tariff");	
	arrayOfTariffs_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/tariffForMA", "arrayOfTariffs");	
	
	МассивТарифов = ФабрикаXDTO.Создать(arrayOfTariffs_Тип);
	
	
	Пока Рез.Следующий() Цикл
		Тариф = ФабрикаXDTO.Создать(tariff_Тип);
		МассивБрейков = ФабрикаXDTO.Создать(arrayOfVolumeBreakeТип);
		
		Тариф.tariffId = Рез.tariffId;
		РезБр = Рез.Выбрать();
		
        Пока РезБр.Следующий() Цикл
            volumeBreake =  ФабрикаXDTO.Создать(volumeBreakeТип);
			ЗаполнитьЗначенияСвойств(volumeBreake, РезБр);
			МассивБрейков.volumeBreake.Добавить(volumeBreake);
        КонецЦикла;
		Тариф.arrayOfVolumeBreakes = МассивБрейков;
		МассивТарифов.tariff.Добавить(Тариф);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивТарифов);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
	           
КонецФункции

Функция getVolumeBreakeDeleteRegistration(tariffID, ID)
	Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
	Возвр = Истина;
	
	Попытка
		Для Сч = 0 По tariffID.string.Количество() - 1 Цикл
			КодСпр = tariffID.string[Сч];
			Спр = Справочники.ТарифныеСетки.НайтиПоКоду(КодСпр);
			Если Спр = Справочники.ТарифныеСетки.ПустаяСсылка() Тогда
				Возвр = Ложь;
			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Спр);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возвр = Ложь;
	КонецПопытки;
	
	Возврат Возвр;	
КонецФункции

Функция getTransportSelectionMode()
	Возврат Константы.мп_АвторизацияСВыборомТранспорта.Получить();
	//Возврат Истина;
КонецФункции

Функция SetOrderStatusByCarsAndID(Orders, Car, ID)
	ВыгрузитьДанныеМП(Orders, Car, ID);
	Возврат 1;
КонецФункции

Функция UnloadCallsRecords(ID, callsRecords)
	// Вставить содержимое обработчика.
	Попытка
		Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
		Данные = callsRecords.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Данные);
		МассивЗаписейТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/callsMA").Получить("arrayOfCallRecord");
		ЗаписиЗвонков = ФабрикаXDTO.ПрочитатьXML(Чт, МассивЗаписейТип);
		
		Для Сч = 0 По ЗаписиЗвонков.callRecord.Количество() - 1 Цикл
			ЗаписьЗвонка = ЗаписиЗвонков.callRecord[Сч];
			Наб = РегистрыСведений.ЖурналЗвонковМП.СоздатьНаборЗаписей();
			Наб.Отбор.МП.Установить(Узел);
			Наб.Отбор.Период.Установить(ЗаписьЗвонка.date);
			
			Нов = Наб.Добавить();
			Нов.МП = Узел;
			Нов.Период = ЗаписьЗвонка.date;
			Нов.НомерТелефона = ЗаписьЗвонка.phoneNumber;
			Если ЗаписьЗвонка.callType = 1 Тогда
				Нов.ТипЗвонка = Перечисления.ТипыЗвонковМП.Входящий;
			ИначеЕсли ЗаписьЗвонка.callType = 2 Тогда
				Нов.ТипЗвонка = Перечисления.ТипыЗвонковМП.Исходящий;
			ИначеЕсли ЗаписьЗвонка.callType = 3 Тогда
				Нов.ТипЗвонка = Перечисления.ТипыЗвонковМП.Пропущенный;
			КонецеСли;	
			Нов.Продолжительность = ЗаписьЗвонка.callDuration;
			Наб.Записать();
		КонецЦикла;	
	Исключение
		Возврат 0;
	КонецПопытки;

    Возврат 1;
КонецФункции

Функция UnloadCallsRecordsForOrders(ID, callsRecords)
	 //Вставить содержимое обработчика.
	Попытка
		Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
		Данные = callsRecords.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Данные);
		МассивЗаписейТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/callsMA").Получить("arrayOfCallRecord");
		ЗаписиЗвонков = ФабрикаXDTO.ПрочитатьXML(Чт, МассивЗаписейТип);
		
		Для Сч = 0 По ЗаписиЗвонков.callRecord.Количество() - 1 Цикл
			ЗаписьЗвонка = ЗаписиЗвонков.callRecord[Сч];
			Заказ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ЗаписьЗвонка.NumberOrder);
			Если Заказ.Пустая() Тогда
				Заказ = Документы.ЗаборТовара.НайтиПоНомеру(ЗаписьЗвонка.NumberOrder);
			КонецеСли;	
			
			Наб = РегистрыСведений.ЖурналЗвонковМППоЗаказам.СоздатьНаборЗаписей();
			Наб.Отбор.МП.Установить(Узел);
			Наб.Отбор.Период.Установить(ЗаписьЗвонка.date);
			
			Нов = Наб.Добавить();
			Нов.МП = Узел;
			Нов.Период = ЗаписьЗвонка.date;
			Нов.НомерТелефона = ЗаписьЗвонка.phoneNumber;
			Нов.Заказ = Заказ;
			Наб.Записать();
		КонецЦикла;	
	Исключение
		Возврат 0;
	КонецПопытки;

    Возврат 1;
КонецФункции

Функция getRegions(ID)
	// Вставить содержимое обработчика.
	Пл = lem.ПолучитьУзелПланаОбмена(ID);
    regionТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/regionsMA", "region");
    arrayOfRegionsТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/regionsMA", "arrayOfRegions");
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РегиональныеТерминалыИзменения.Ссылка.Код КАК code,
	            |	РегиональныеТерминалыИзменения.Ссылка.Наименование КАК name,
	            |	РегиональныеТерминалыИзменения.Ссылка.НачальнаяШиротаЗоны КАК minLat,
	            |	РегиональныеТерминалыИзменения.Ссылка.НачальнаяДолготаЗоны КАК minLong,
	            |	РегиональныеТерминалыИзменения.Ссылка.КонечнаяШиротаЗоны КАК maxLat,
	            |	РегиональныеТерминалыИзменения.Ссылка.КонечнаяДолготаЗоны КАК maxLong,
	            |	РегиональныеТерминалыИзменения.Ссылка.ксАдресСервера КАК cashServerAdress,
	            |	РегиональныеТерминалыИзменения.Ссылка.ксИмяПользователя КАК cashUserName,
	            |	РегиональныеТерминалыИзменения.Ссылка.ксПарольПользователя КАК cashUserPassword,
	            |	РегиональныеТерминалыИзменения.Ссылка.НомерТелефонаСтаршегоЛогиста КАК phoneNumberSeniorLogist,
	            |	ВЫБОР
	            |		КОГДА РегиональныеТерминалыИзменения.Ссылка.РежимПечатиЧековРМЭкипажа = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧековРМЭкипажа.ПустаяСсылка)
	            |			ТОГДА 0
	            |		КОГДА РегиональныеТерминалыИзменения.Ссылка.РежимПечатиЧековРМЭкипажа = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧековРМЭкипажа.НеПечататьЧек)
	            |			ТОГДА 0
	            |		КОГДА РегиональныеТерминалыИзменения.Ссылка.РежимПечатиЧековРМЭкипажа = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ)
	            |			ТОГДА 1
	            |		КОГДА РегиональныеТерминалыИзменения.Ссылка.РежимПечатиЧековРМЭкипажа = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаМобильномПринтере)
	            |			ТОГДА 2
	            |	КОНЕЦ КАК checkPrintingMode,
	            |	РегиональныеТерминалыИзменения.Ссылка.НачалоИнтервалаДоставкиВОбласти КАК startOfDeliveryIntervalInTheArea,
	            |	РегиональныеТерминалыИзменения.Ссылка.ОкончаниеИнтервалаДоставкиВОбласти КАК endOfDeliveryIntervalInTheArea,
	            |	РегиональныеТерминалыИзменения.Ссылка.ШиротаЦентраЗоны КАК latCenterZone,
	            |	РегиональныеТерминалыИзменения.Ссылка.ДолготаЦентраЗоны КАК longCenterZone
	            |ИЗ
	            |	Справочник.РегиональныеТерминалы.Изменения КАК РегиональныеТерминалыИзменения
	            |ГДЕ
	            |	РегиональныеТерминалыИзменения.Узел.Ссылка = &Узел";
	Зап.УстановитьПараметр("Узел", Пл.ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	МассивРегионов = ФабрикаXDTO.Создать(arrayOfRegionsТип); 
	Пока Выб.Следующий() Цикл
		Регион = ФабрикаXDTO.Создать(regionТип);
		ЗаполнитьЗначенияСвойств(Регион, Выб);
		МассивРегионов.region.Добавить(Регион);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивРегионов);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции

Функция getRegionsDeleteRegistration(regionID, ID)
	Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
	Возвр = Истина;
	
	Попытка
		Для Сч = 0 По regionID.string.Количество() - 1 Цикл
			КодСпр = regionID.string[Сч];
			Спр = Справочники.РегиональныеТерминалы.НайтиПоКоду(КодСпр);
			Если Спр = Справочники.РегиональныеТерминалы.ПустаяСсылка() Тогда
				Возвр = Ложь;
			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Спр);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возвр = Ложь;
	КонецПопытки;
	
	Возврат Возвр;	
КонецФункции

Функция getCheckPrintingMode()
	// Вставить содержимое обработчика.
	Реж = Константы.РежимПечатиЧековРМЭкипажа.Получить();
	Если Реж = Перечисления.ВариантыПечатиЧековРМЭкипажа.НеПечататьЧек или Реж.Пустая() Тогда
		Возврат 0;
	ИначеЕсли Реж = Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаСервереККМ Тогда	
		Возврат 1;
	ИначеЕсли Реж = Перечисления.ВариантыПечатиЧековРМЭкипажа.ПечататьЧекНаМобильномПринтере Тогда	
		Возврат 2;
	КонецЕсли;	
КонецФункции

Функция getServerAdresses()
    arrayOfServerAdressТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ArrayOfServerAdress", "arrayOfServerAdress");
	МассивАдресов = ФабрикаXDTO.Создать(arrayOfServerAdressТип); 
	
    ServerAdressТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ArrayOfServerAdress", "serverAdress");
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	МассивАдресовДляОбменаСМП.Адрес КАК serverAddress,
	            |	МассивАдресовДляОбменаСМП.Терминал.Код КАК regionCode,
	            |	МассивАдресовДляОбменаСМП.Приоритет КАК priority
	            |ИЗ
	            |	РегистрСведений.МассивАдресовДляОбменаСМП КАК МассивАдресовДляОбменаСМП";
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ServerAdress = ФабрикаXDTO.Создать(ServerAdressТип);
		ЗаполнитьЗначенияСвойств(ServerAdress, Выб);
		МассивАдресов.serverAdress.Добавить(ServerAdress);
	КонецЦикла;	
	
	Возврат МассивАдресов;
КонецФункции

Функция registratedCars(ID)
	Най = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(СокрЛП(ID));
	Если Най.Пустая() Тогда
		Возврат Ложь;
	КонецеСли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(Най.Ссылка, Метаданные.Справочники.РегиональныеТерминалы);
	ПланыОбмена.ЗарегистрироватьИзменения(Най.Ссылка, Метаданные.Справочники.новаТранспорт);
	
	Возврат Истина;
КонецФункции

Функция getCostOfLifting(request)
	ДанныеПодъема = Новый Структура;
	Если request.typeOfLifting = 1 Тогда
		ДанныеПодъема.Вставить("МетодПодъема", Перечисления.ТипПодъемаНаЭтаж.ПодъемЗаказаБезЛифта);
	ИначеЕсли request.typeOfLifting = 2 Тогда	
		ДанныеПодъема.Вставить("МетодПодъема", Перечисления.ТипПодъемаНаЭтаж.ПодъемЗаказаНаЛифте);
	КонецЕсли;	
	ДанныеПодъема.Вставить("КоличествоХодок", request.liftingCountOfWalkersPerFloor);
	ДанныеПодъема.Вставить("Этаж", request.FloorOfLifting);
	ДанныеПодъема.Вставить("НомерЗаказа", request.orderId);
	ДанныеПодъема.Вставить("ВесЗаказа", request.weight);
	
	ДанныеТарифа = ТарифыНаПодъемЗаказаНаЭтажСервер.ПолучитьРасчетныеДанныеПодъемаЗаказаНаЭтаж(ДанныеПодъема);
	
    responseТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "getCostOfLiftingResponse");
	response = ФабрикаXDTO.Создать(responseТип); 
	
	Если ДанныеТарифа.Успешно Тогда
		response.successfully = Истина;
		response.liftingCalcSum = ДанныеТарифа.СтоимостьПодъема;
		response.liftingBreak = ДанныеТарифа.КодБрейка;
		response.liftingTariff = ДанныеТарифа.КодТарифнойСетки;
	Иначе
		response.successfully = Ложь;
	КонецеСли;	
	
	Возврат response;
КонецФункции

Функция getOrganizations(ID)
	//Вставить содержимое обработчика.
	Пл = lem.ПолучитьУзелПланаОбмена(ID);
	organizationТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "organization");
	arrayOfOrganizationТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "arrayOfOrganization");
	settingAssistForOrganizationТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "settingAssistForOrganization");
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ОрганизацииИзменения.Ссылка.Код КАК id,
	            |	ОрганизацииИзменения.Ссылка.Наименование КАК name,
	            |	ОрганизацииИзменения.Ссылка.ИНН КАК inn,
	            |	ОрганизацииИзменения.Ссылка.КПП КАК kpp,
	            |	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК address,
	            |	ОрганизацииИзменения.Ссылка.НаименованиеПолное КАК nameFull,
	            |	ЕСТЬNULL(ОрганизацииИзменения.Ссылка.РасчетныйСчетСБП.НомерСчета, """") КАК bankAccountQPS,
	            |	ОрганизацииИзменения.Ссылка.АдресИнформированияДляПечатиЧеков КАК emailOnCheck,
	            |	ОрганизацииИзменения.Ссылка.assist_MerchantId КАК assist_MerchantId,
	            |	ОрганизацииИзменения.Ссылка.assist_login КАК assist_login,
	            |	ОрганизацииИзменения.Ссылка.assist_password КАК assist_password,
	            |	ОрганизацииИзменения.Ссылка.НастройкиAssistПоТерминалам.(
	            |		РегионДоставки.Код КАК terminalCode,
	            |		MerchantId КАК MerchantId,
	            |		login КАК login,
	            |		password КАК password
	            |	) КАК НастройкиAssistПоТерминалам
	            |ИЗ
	            |	Справочник.Организации.Изменения КАК ОрганизацииИзменения
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	            |		ПО (ОрганизацииИзменения.Ссылка.Ссылка = ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.Организации).Ссылка)
	            |			И (КонтактнаяИнформация.Вид.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	            |ГДЕ
	            |	ОрганизацииИзменения.Узел.Ссылка = &Узел
	            |	И ОрганизацииИзменения.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Зап.УстановитьПараметр("Узел", Пл.ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	МассивОрганизаций = ФабрикаXDTO.Создать(arrayOfOrganizationТип); 
	Пока Выб.Следующий() Цикл
		Организация = ФабрикаXDTO.Создать(organizationТип);
		ЗаполнитьЗначенияСвойств(Организация, Выб);
		НастройкиAssistПоТерминалам = Выб.НастройкиAssistПоТерминалам.Выбрать();
		Пока НастройкиAssistПоТерминалам.Следующий() Цикл
			СтрокаНастройки = ФабрикаXDTO.Создать(settingAssistForOrganizationТип);
			
			ЗаполнитьЗначенияСвойств(СтрокаНастройки, НастройкиAssistПоТерминалам);
			Организация.settingsAssistForOrganization.Добавить(СтрокаНастройки);
			
		КонецЦикла;	
		МассивОрганизаций.organization.Добавить(Организация);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивОрганизаций);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

	Возврат Хр;
КонецФункции

Функция getOrganizationsDeleteRegistration(organizationID, ID)
	Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
	Возвр = Истина;
	
	Попытка
		Для Сч = 0 По organizationID.string.Количество() - 1 Цикл
			КодСпр = organizationID.string[Сч];
			Спр = Справочники.Организации.НайтиПоКоду(КодСпр);
			Если Спр = Справочники.Организации.ПустаяСсылка() Тогда
				Возвр = Ложь;
			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Спр);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возвр = Ложь;
	КонецПопытки;
	
	Возврат Возвр;	
КонецФункции

Функция SetParametersMA(ID, Parameters)
	Попытка
		Зап = Parameters.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Зап);
		МассивПараметровТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/Parameters").Получить("ArrayOfParameters");
		МассивПараметров = ФабрикаXDTO.ПрочитатьXML(Чт, МассивПараметровТип);
		
		Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);	
		
		КодАвто = "";
		НомерВерсии = "";
		ОписаниеВерсии = "";
		ЭтоРелиз = Ложь;
		Для Сч = 0 По МассивПараметров.Parameter.Количество() - 1 Цикл
			Парам = МассивПараметров.Parameter[Сч];
			Если Парам.Key = "MA_Version" Тогда
				НомерВерсии = Парам.Value;
			ИначеЕсли Парам.Key = "MA_VersionDescr" Тогда
				ОписаниеВерсии = Парам.Value;
			ИначеЕсли Парам.Key = "MA_VersionFinal" Тогда
				ЭтоРелиз = Булево(Парам.Value);		
			ИначеЕсли Парам.Key = "car_id" Тогда
				КодАвто = Парам.Value;								
			КонецеСли;	
		КонецЦикла;
		РаботаСМобильнымПриложениемЭкипажейСервер.ЗафиксироватьНомерВерсии(Узел, НомерВерсии, ОписаниеВерсии, ЭтоРелиз);
		Если ЗначениеЗаполнено(КодАвто) Тогда
			РаботаСМобильнымПриложениемЭкипажейСервер.ЗафиксироватьТранспортМП(Узел, КодАвто);
		КонецеСли;	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	
	Возврат Истина;
КонецФункции

Функция getPartners(ID)
	//Вставить содержимое обработчика.
	Пл = lem.ПолучитьУзелПланаОбмена(ID);
	partnerТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "partner");
	arrayOfPartnersТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "arrayOfPartners");
	//Асеев 01.02.2023 (Задача № 4979)>>>
	settingAssistForOrganizationТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "settingAssistForOrganization");
	//Асеев 01.02.2023 (Задача № 4979)<<<
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КонтрагентыИзменения.Ссылка КАК Контрагент
	            |ПОМЕСТИТЬ ВТ_Контрагенты
	            |ИЗ
	            |	Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения
	            |ГДЕ
	            |	КонтрагентыИзменения.Узел = &Узел
	            |	И КонтрагентыИзменения.Ссылка.ЭтоГруппа = ЛОЖЬ
	            |	И КонтрагентыИзменения.Ссылка.ПометкаУдаления = ЛОЖЬ
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ ПЕРВЫЕ 100
	            |	ВТ_Контрагенты.Контрагент.Код КАК id,
	            |	ВТ_Контрагенты.Контрагент.Наименование КАК name,
	            |	ВТ_Контрагенты.Контрагент.ИНН КАК inn,
	            |	ВТ_Контрагенты.Контрагент.КПП КАК kpp,
	            |	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК address,
	            |	ВТ_Контрагенты.Контрагент.НаименованиеПолное КАК fullName,
	            |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ЭтоАгрегатор, ЛОЖЬ) КАК isAggregator,
	            |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей, """") КАК latinName,
	            |	ПараметрыКонтрагентовСрезПоследних.ЛьготнаяКатегорияЭквайринга.НастройкиAssistПоТерминалам.(
	            |		РегионДоставки.Код КАК terminalCode,
	            |		MerchantId КАК MerchantId,
	            |		login КАК login,
	            |		password КАК password
	            |	) КАК НастройкиAssistПоТерминалам
	            |ИЗ
	            |	ВТ_Контрагенты КАК ВТ_Контрагенты
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	            |		ПО ВТ_Контрагенты.Контрагент = КонтактнаяИнформация.Объект
	            |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
	            |		ПО ВТ_Контрагенты.Контрагент = ПараметрыКонтрагентовСрезПоследних.Контрагент
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	id УБЫВ";
	Зап.УстановитьПараметр("Узел", Пл.ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	МассивПартнеров = ФабрикаXDTO.Создать(arrayOfPartnersТип); 
	Пока Выб.Следующий() Цикл
		Партнер = ФабрикаXDTO.Создать(partnerТип);
		ЗаполнитьЗначенияСвойств(Партнер, Выб);
		
		//Асеев 01.02.2023 (Задача № 4979)>>>
		НастройкиAssistПоТерминалам = Выб.НастройкиAssistПоТерминалам.Выбрать();
		Пока НастройкиAssistПоТерминалам.Следующий() Цикл
			СтрокаНастройки = ФабрикаXDTO.Создать(settingAssistForOrganizationТип);
			
			ЗаполнитьЗначенияСвойств(СтрокаНастройки, НастройкиAssistПоТерминалам);
			Партнер.settingsAssistForOrganization.Добавить(СтрокаНастройки);
			
		КонецЦикла;
		//Асеев 01.02.2023 (Задача № 4979)<<<
		МассивПартнеров.partner.Добавить(Партнер);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивПартнеров);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

	Возврат Хр;
КонецФункции


Функция deleteRegistration(ID, metaData, ArrayOfNumber)
    Попытка
        //Получим узел обмена
        Узел = lem.ПолучитьУзелПланаОбмена(ID);
        
        МассивНомеров = Новый Массив;
        
		Для каждого Стр Из ArrayOfNumber.string Цикл
			Если metaData = "Справочник.ТипыПрикрепленныхДокументов" Тогда
				МассивНомеров.Добавить(Число(Стр));
			Иначе	
            	МассивНомеров.Добавить(Стр);
			КонецеСли;	
        КонецЦикла;
        
        Если СтрЧислоВхождений(metaData,"Справочник") >0 Тогда
            Запрос = Новый Запрос;
            Запрос.Текст = 
            "ВЫБРАТЬ
            |   ОбъектМетаданных.Ссылка
            |ИЗ
            |   "+metaData+" КАК ОбъектМетаданных
            |ГДЕ
            |   ОбъектМетаданных.Код В (&Номер)";
            
        Иначе
            Запрос = Новый Запрос;
            Запрос.Текст = 
            "ВЫБРАТЬ
            |   ОбъектМетаданных.Ссылка
            |ИЗ
            |   "+metaData+" КАК ОбъектМетаданных
            |ГДЕ
            |   ОбъектМетаданных.Номер В (&Номер)";
            
            
        КонецЕсли;
        
        Запрос.УстановитьПараметр("Номер", МассивНомеров);
        РезультатЗапроса = Запрос.Выполнить();
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            ПланыОбмена.УдалитьРегистрациюИзменений(Узел,ВыборкаДетальныеЗаписи.Ссылка);
        КонецЦикла;
        Возврат Истина;
        
    Исключение
        Возврат Ложь;
        
    КонецПопытки;
    
	// Вставить содержимое обработчика.
КонецФункции

Функция getTrips(Car)
	// Вставить содержимое обработчика.
	tripТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "trip");
	arrayOfTripsТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "arrayOfTrips");
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	УчетОборудованияСрезПоследних.Рейс КАК Рейс,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(НастройкиУчетаОбщиеСрезПоследних.Период, ЛОЖЬ) = ЛОЖЬ
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ КАК ЭтоТерминалAssist
	            |ПОМЕСТИТЬ РейсыСAssist
	            |ИЗ
	            |	РегистрСведений.УчетОборудования.СрезПоследних(
	            |			,
	            |			Оборудование.МодельОборудования.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыОборудования.ТерминалПриемаОплатыПоКарте)) КАК УчетОборудованияСрезПоследних
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаОбщие.СрезПоследних КАК НастройкиУчетаОбщиеСрезПоследних
	            |		ПО УчетОборудованияСрезПоследних.Оборудование.МодельОборудования = НастройкиУчетаОбщиеСрезПоследних.МодельТерминалаAssist
	            |ГДЕ
	            |	УчетОборудованияСрезПоследних.Рейс.ДатаРейса >= &НачДатаРейса
	            |	И УчетОборудованияСрезПоследних.СостояниеЕдиницыОборудования = ЗНАЧЕНИЕ(Перечисление.СостоянияЕдиницыОборудования.Выдано)
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	УчетОборудованияСрезПоследних.Рейс,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(НастройкиУчетаОбщиеСрезПоследних.Период, ЛОЖЬ) = ЛОЖЬ
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	РейсТ.Ссылка,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(НастройкиУчетаОбщиеСрезПоследних.Период, ЛОЖЬ) = ЛОЖЬ
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ
	            |ИЗ
	            |	Документ.Рейс КАК РейсТ
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектыОборудования.СрезПоследних КАК КомплектыОборудованияСрезПоследних
	            |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаОбщие.СрезПоследних КАК НастройкиУчетаОбщиеСрезПоследних
	            |				ПО КомплектыОборудованияСрезПоследних.Оборудование.МодельОборудования = НастройкиУчетаОбщиеСрезПоследних.МодельТерминалаAssist
	            |			ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт = КомплектыОборудованияСрезПоследних.Транспорт
	            |		ПО РейсТ.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	            |ГДЕ
	            |	РейсТ.ДатаРейса >= &НачДатаРейса
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	РейсТ.Ссылка,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(НастройкиУчетаОбщиеСрезПоследних.Период, ЛОЖЬ) = ЛОЖЬ
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	КонтрольВремени.Рейс КАК РейсСсылка,
	            |	КонтрольВремени.ОкончаниеСобытия КАК ОкончаниеСобытия
	            |ПОМЕСТИТЬ ВТ_МЛ
	            |ИЗ
	            |	РегистрСведений.КонтрольВремени КАК КонтрольВремени
	            |ГДЕ
	            |	КонтрольВремени.Рейс.ДатаРейса >= &НачДатаРейса
	            |	И КонтрольВремени.ОкончаниеСобытия = ИСТИНА
	            |	И КонтрольВремени.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста)
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.Номер КАК id,
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.Дата КАК dateDocument,
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.ДатаРейса КАК dateTrip,
	            |	ПривязкаМашинКРейсамСрезПоследних.Водитель.Код КАК driverId,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Код КАК carId,
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.НомерПалетты КАК paletNumber,
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.ПометкаУдаления КАК deletionMark,
	            |	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Код, """") КАК forwarderId,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ОперативноеНазначениеТАНаРейсСрезПоследних.ТА, 1) = 1
	            |			ТОГДА ЕСТЬNULL(ТелефонныеАппаратыТранспортаСрезПоследних.ТА.Телефон, """")
	            |		ИНАЧЕ ОперативноеНазначениеТАНаРейсСрезПоследних.ТА.Телефон
	            |	КОНЕЦ КАК phone,
	            |	МАКСИМУМ(ЕСТЬNULL(РейсыСAssist.ЭтоТерминалAssist, ЛОЖЬ)) КАК assistTerminalIssued,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ВТ_МЛ.ОкончаниеСобытия, 1) = 1
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ КАК RPHasPrinted
	            |ИЗ
	            |	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперативноеНазначениеТАНаРейс.СрезПоследних КАК ОперативноеНазначениеТАНаРейсСрезПоследних
	            |		ПО ПривязкаМашинКРейсамСрезПоследних.Рейс = ОперативноеНазначениеТАНаРейсСрезПоследних.Рейс
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелефонныеАппаратыТранспорта.СрезПоследних КАК ТелефонныеАппаратыТранспортаСрезПоследних
	            |		ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт = ТелефонныеАппаратыТранспортаСрезПоследних.Транспорт
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РейсыСAssist КАК РейсыСAssist
	            |		ПО ПривязкаМашинКРейсамСрезПоследних.Рейс = РейсыСAssist.Рейс
	            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МЛ КАК ВТ_МЛ
	            |		ПО ПривязкаМашинКРейсамСрезПоследних.Рейс = ВТ_МЛ.РейсСсылка
	            |ГДЕ
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Код = &КодАвто
	            |	И ПривязкаМашинКРейсамСрезПоследних.Рейс.ДатаРейса >= &НачДатаРейса
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.Номер,
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.Дата,
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.ДатаРейса,
	            |	ПривязкаМашинКРейсамСрезПоследних.Водитель.Код,
	            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Код,
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.НомерПалетты,
	            |	ПривязкаМашинКРейсамСрезПоследних.Рейс.ПометкаУдаления,
	            |	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Код, """"),
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ОперативноеНазначениеТАНаРейсСрезПоследних.ТА, 1) = 1
	            |			ТОГДА ЕСТЬNULL(ТелефонныеАппаратыТранспортаСрезПоследних.ТА.Телефон, """")
	            |		ИНАЧЕ ОперативноеНазначениеТАНаРейсСрезПоследних.ТА.Телефон
	            |	КОНЕЦ,
	            |	ВЫБОР
	            |		КОГДА ЕСТЬNULL(ВТ_МЛ.ОкончаниеСобытия, 1) = 1
	            |			ТОГДА ЛОЖЬ
	            |		ИНАЧЕ ИСТИНА
	            |	КОНЕЦ";
	Зап.УстановитьПараметр("КодАвто", Car);
	Зап.УстановитьПараметр("НачДатаРейса", ТекущаяДата() - 172800);     // - 172800    - 500800
	
	
	РежимИнформированияКлиентов = ИнформированиеКлиентовОДоставкеСервер.ПолучитьРежимИнформированияПолучателейЗаказов();	
	
	Выб = Зап.Выполнить().Выбрать();
	МассивРейсов = ФабрикаXDTO.Создать(arrayOfTripsТип); 
	Пока Выб.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выб.driverId) Тогда
			Продолжить;
		КонецеСли;	
		Рейс = ФабрикаXDTO.Создать(tripТип);
		ЗаполнитьЗначенияСвойств(Рейс, Выб);
		ИндексЗначенияПеречисления = Перечисления.ТипыИнформированияПолучателейЗаказов.Индекс(РежимИнформированияКлиентов);
		
		Рейс.customerInformationMode = Метаданные.Перечисления.ТипыИнформированияПолучателейЗаказов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		//Рейс.forwarderId = "";
		МассивРейсов.trip.Добавить(Рейс);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивРейсов);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

	Возврат Хр;
	
КонецФункции

Функция unloadErrorLog(ID, errorLog, carId)
	// Вставить содержимое обработчика.
	Попытка
		
		Данные = errorLog.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Данные);
		МассивЗаписейЛогаТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfExchangeErrorRecord");
		ЗаписиЛога = ФабрикаXDTO.ПрочитатьXML(Чт, МассивЗаписейЛогаТип);
		
		
		Пл = lem.ПолучитьУзелПланаОбмена(ID);
		Транспорт = Справочники.новаТранспорт.НайтиПоКоду(carId);
		Для Сч = 0 По ЗаписиЛога.exchangeErrorRecord.Количество() - 1 Цикл
			ЗаписьОшибки = ЗаписиЛога.exchangeErrorRecord[Сч];
			Если ЗначениеЗаполнено(ЗаписьОшибки.version) Тогда
				ВерсияМП = РаботаСМобильнымПриложениемЭкипажейСервер.ПолучитьВерсиюМП(ЗаписьОшибки.version, "", Ложь);
			Иначе
				ВерсияМП = "";
			КонецЕсли;	
			
			Возврат ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогОбменаМП(Пл, Транспорт, ВерсияМП, ЗаписьОшибки.dateRecord, ЗаписьОшибки.error);
			
			//Наб = РегистрыСведений.ЛогОбменаМП.СоздатьНаборЗаписей();
			//Наб.Отбор.Период.Установить(ЗаписьОшибки.dateRecord);
			//Наб.Отбор.УзелОбмена.Установить(Пл);
			//
			//
			//Нов = Наб.Добавить();
			//Нов.Период = ЗаписьОшибки.dateRecord;
			//Нов.УзелОбмена = Пл;
			//Нов.Ошибка = ЗаписьОшибки.error;
			//Нов.Транспорт = Транспорт;
			//Нов.ВерсияМП = ВерсияМП;
			//
			//Наб.Записать();
		КонецЦикла;	
	Исключение
		Ош = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция getNotifications(Car)
	// Вставить содержимое обработчика.
	
	driverNotificationТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "driverNotification");
	arrayOfDriverNotificationТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "arrayOfDriverNotifications");
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ИнформированиеЭкипажейСрезПоследних.ДатаСобытия КАК date,
	            |	1 КАК type
	            |ИЗ
	            |	РегистрСведений.ИнформированиеЭкипажей.СрезПоследних(, Транспорт.Код = &КодТранспорта) КАК ИнформированиеЭкипажейСрезПоследних
	            |ГДЕ
	            |	ИнформированиеЭкипажейСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействия.ОбъектПриглашен)
	            |	И ИнформированиеЭкипажейСрезПоследних.ДатаСобытия >= &ДатаОбмена";
	Зап.УстановитьПараметр("КодТранспорта", Car);
	Зап.УстановитьПараметр("ДатаОбмена", НачалоДня(ТекущаяДата()));
	
	Выб = Зап.Выполнить().Выбрать();
	МассивУведомлений = ФабрикаXDTO.Создать(arrayOfDriverNotificationТип); 
	Пока Выб.Следующий() Цикл
		//Если Не ЗначениеЗаполнено(Выб.driverId) Тогда
		//	Продолжить;
		//КонецеСли;	
		Уведомление = ФабрикаXDTO.Создать(driverNotificationТип);
		ЗаполнитьЗначенияСвойств(Уведомление, Выб);
		МассивУведомлений.driverNotification.Добавить(Уведомление);
	КонецЦикла;	
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивУведомлений);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

	Возврат Хр;
	
КонецФункции

Функция getSMSTemplates(ID)
	//закомментировано, вместо ID прилетало carId, обновлено МП, релиз с маркировкой и фотографией. После полного внедрения можно раскомментить
	
	//Вставить содержимое обработчика.
	//Пл = lem.ПолучитьУзелПланаОбмена(ID);
	SMSTemplateТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "SMSTemplate");
	arrayOfSMSTemplateТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "arrayOfSMSTemplates");
	
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	ШаблоныСМСРассылокИзменения.Ссылка.Код КАК id,
	//            |	ШаблоныСМСРассылокИзменения.Ссылка.Наименование КАК name,
	//            |	ШаблоныСМСРассылокИзменения.Ссылка.ТекстШаблона КАК text,
	//            |	ШаблоныСМСРассылокИзменения.Ссылка.Отправитель КАК sender,
	//            |	ШаблоныСМСРассылокИзменения.Ссылка.СклонениеИсполнителяДоставки КАК Склонение
	//            |ИЗ
	//            |	Справочник.ШаблоныСМСРассылок.Изменения КАК ШаблоныСМСРассылокИзменения
	//            |ГДЕ
	//            |	ШаблоныСМСРассылокИзменения.Узел.Ссылка = &Узел";
	//Зап.УстановитьПараметр("Узел", Пл.ссылка);
	//
	//Выб = Зап.Выполнить().Выбрать();
	МассивШаблонов = ФабрикаXDTO.Создать(arrayOfSMSTemplateТип); 
	//Пока Выб.Следующий() Цикл
	//	Шаблон = ФабрикаXDTO.Создать(SMSTemplateТип);
	//	ЗаполнитьЗначенияСвойств(Шаблон, Выб);
	//	Если ЗначениеЗаполнено(Выб.Склонение) Тогда
	//		ИндексЗначенияПеречисления = Перечисления.ПадежиСклонения.Индекс(Выб.Склонение);
	//		Шаблон.declination = Метаданные.Перечисления.ПадежиСклонения.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	//	Иначе
	//		Шаблон.declination = "";
	//	КонецЕсли;	
	//	МассивШаблонов.SMSTemplate.Добавить(Шаблон);
	//КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивШаблонов);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

	Возврат Хр;
КонецФункции

Функция UnloadSMSSendingLog(ID, SMSSendingLog)
	// Вставить содержимое обработчика.
	Попытка
		Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
		Данные = SMSSendingLog.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Данные);
		МассивЗаписейТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfSMSSendingLogRecords");
		ЗаписиЛогаСМС = ФабрикаXDTO.ПрочитатьXML(Чт, МассивЗаписейТип);
		
		ТекДата = ТекущаяДата();
		
		Таб = Новый ТаблицаЗначений;
		Таб.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		Таб.Колонки.Добавить("НомерРейса", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));
		Таб.Колонки.Добавить("НомерШаблона", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));
		Таб.Колонки.Добавить("НомерАвто", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(6)));
		Таб.Колонки.Добавить("ДатаОтправки", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		
		Для Сч = 0 По ЗаписиЛогаСМС.SMSSendingLogRecord.Количество() - 1 Цикл
			ЗаписьЛога = ЗаписиЛогаСМС.SMSSendingLogRecord[Сч];
			Нов = Таб.Добавить();
			Нов.НомерЗаказа = ЗаписьЛога.orderId;
			Нов.НомерРейса = ЗаписьЛога.tripId;
			Нов.НомерШаблона = ЗаписьЛога.SMSTempateId;
			Нов.НомерАвто = ЗаписьЛога.carId;
		КонецЦикла;
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	Таб.НомерЗаказа КАК НомерЗаказа,
		            |	Таб.НомерРейса КАК НомерРейса,
		            |	Таб.НомерШаблона КАК НомерШаблона,
		            |	Таб.НомерАвто КАК НомерАвто,
		            |	Таб.ДатаОтправки КАК ДатаОтправки
		            |ПОМЕСТИТЬ ВТ_Лог
		            |ИЗ
		            |	&Таб КАК Таб
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ
		            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		            |	ЕСТЬNULL(РейсДокумент.Ссылка, ЗНАЧЕНИЕ(Документ.Рейс.пустаяСсылка)) КАК Рейс,
		            |	новаТранспорт.Ссылка КАК Транспорт,
		            |	ШаблоныСМСРассылок.Ссылка КАК Шаблон,
		            |	ВТ_Лог.ДатаОтправки КАК ДатаОтправки,
		            |	ВТ_Лог.НомерЗаказа КАК НомерЗаказа
		            |ИЗ
		            |	ВТ_Лог КАК ВТ_Лог
		            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |		ПО ВТ_Лог.НомерЗаказа = РеализацияТоваровУслуг.Номер
		            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК РейсДокумент
		            |		ПО ВТ_Лог.НомерРейса = РейсДокумент.Номер
		            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныСМСРассылок КАК ШаблоныСМСРассылок
		            |		ПО ВТ_Лог.НомерШаблона = ШаблоныСМСРассылок.Код
		            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТранспорт КАК новаТранспорт
		            |		ПО ВТ_Лог.НомерАвто = новаТранспорт.Код";
		Зап.УстановитьПараметр("Таб", Таб);
		ТабЛога = Зап.Выполнить().Выгрузить();

		
		Наб = РегистрыСведений.РассылкаСМС.СоздатьНаборЗаписей();
		Наб.Отбор.УзелМП.Установить(Узел);
		Наб.Отбор.Период.Установить(ТекДата);
		
		Для Сч = 0 По ЗаписиЛогаСМС.SMSSendingLogRecord.Количество() - 1 Цикл
			ЗаписьЛога = ЗаписиЛогаСМС.SMSSendingLogRecord[Сч];
			
			Струк = Новый Структура;
			Струк.Вставить("ДатаОтправки", ЗаписьЛога.dateSending);
			Струк.Вставить("НомерЗаказа", ЗаписьЛога.orderId);
			ЗаписиТаблицыОбъектов = ТабЛога.НайтиСтроки(Струк);
			
			
			
			Нов = Наб.Добавить();
			Нов.УзелМП = Узел;
			Нов.Период = ТекДата;
			Нов.НомерТелефона = ЗаписьЛога.phoneNumber;
			Нов.ОператорСМСРассылки = Справочники.ОператорыСМСРассылки.MobileApplication;
			Нов.ТипСМСРассылки = Справочники.ТипыСМСРассылок.РассылкаОбУехавшихЗаказах;
			
			Нов.Рейс = ЗаписиТаблицыОбъектов[0].Рейс;
			Нов.Заказ = ЗаписиТаблицыОбъектов[0].Заказ;
			Нов.Шаблон = ЗаписиТаблицыОбъектов[0].Шаблон;
			Нов.Транспорт = ЗаписиТаблицыОбъектов[0].Транспорт;
			
			Нов.ДатаОтправки = ЗаписьЛога.dateSending;
			Нов.dateReceiving = ЗаписьЛога.dateReceiving;
			
			Нов.ТекстСМС = ЗаписьЛога.text;
			
			Нов.Телефон = ЗаписьЛога.phoneNumber;
			
			Нов.ОшибкаОтправки = ЗаписьЛога.isError;
			Нов.ТекстОшибки = ЗаписьЛога.errorText;
			
			Наб.Записать();
		КонецЦикла;	
	Исключение
		Возврат 0;
	КонецПопытки;

    Возврат 1;
КонецФункции

Функция getForwarders(ID)
	// Вставить содержимое обработчика.
	Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаЭкспедиторыИзменения.Ссылка.Код КАК id,
	            |	новаЭкспедиторыИзменения.Ссылка.Наименование КАК name,
	            |	новаЭкспедиторыИзменения.Ссылка.ИмяЛатиницей КАК latinName
	            |ИЗ
	            |	Справочник.новаЭкспедиторы.Изменения КАК новаЭкспедиторыИзменения
	            |ГДЕ
	            |	новаЭкспедиторыИзменения.Узел = &Узел
	            |	И новаЭкспедиторыИзменения.Ссылка.ЭтоГруппа = ЛОЖЬ";
	Зап.УстановитьПараметр("Узел", Узел);
	Рез = Зап.Выполнить().Выгрузить();
	
    МассивЭкспедиторовТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "arrayOfForwarder");
    ЭкспедиторТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "forwarder");
	
	
	МассивЭкспедиторов = ФабрикаXDTO.Создать(МассивЭкспедиторовТип);
	
	ТекНом = Неопределено;
	
	Для Каждого Тек Из Рез Цикл
		Экспедитор = ФабрикаXDTO.Создать(ЭкспедиторТип);
		ЗаполнитьЗначенияСвойств(Экспедитор, Тек);
		МассивЭкспедиторов.forwarder.Добавить(Экспедитор);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивЭкспедиторов);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции

Функция requestForTransferOfOrders(ID, request)
	//ЧтениеXML = Новый ЧтениеXML;
	//ЧтениеXML.УстановитьСтроку(request);
	//ТипЗапрос = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "requestForTransferOfOrdersRequest");
	//ДанныеЗапроса = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипЗапрос);
	
	ДанныеЗапроса = request;
	
	//ЗаписьXML  = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку();
	//ЗаписьXML.ЗаписатьОбъявлениеXML();
	ОтветСервиса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "transferOfOrdersResponse"));

	
	Узел = lem.ПолучитьУзелПланаОбмена(ID);
	Если Не ЗначениеЗаполнено(Узел) Тогда
		ОтветСервиса.successfully = Ложь;
		ОтветСервиса.error = "Не удалось получить узел обмена с ID " + ID;		
		//ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветСервиса);
		//СтрокаXML = ЗаписьXML.Закрыть();
		Возврат ОтветСервиса				
	КонецЕсли;	
	
	ТаблицаДанныхЗапросаНаПередачу = Новый ТаблицаЗначений;
	ТаблицаДанныхЗапросаНаПередачу.Колонки.Добавить("НомерРейсаИсточника",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	ТаблицаДанныхЗапросаНаПередачу.Колонки.Добавить("КодТранспортаИсточника",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(6, ДопустимаяДлина.Переменная)));
	ТаблицаДанныхЗапросаНаПередачу.Колонки.Добавить("КодТранспортаПриемника",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(6, ДопустимаяДлина.Переменная)));
	ТаблицаДанныхЗапросаНаПередачу.Колонки.Добавить("КодРегиона",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанныхЗапросаНаПередачу.Колонки.Добавить("НомерДокументаМП",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанныхЗапросаНаПередачу.Колонки.Добавить("КодУзла",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	
	
	ТаблицаДанныхЗаказов = Новый ТаблицаЗначений;
	ТаблицаДанныхЗаказов.Колонки.Добавить("НомерЗаказа",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Переменная)));
	ТаблицаДанныхЗаказов.Колонки.Добавить("АдресДоставки",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаДанныхЗаказов.Колонки.Добавить("КоличествоМест",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
	
	НоваяСтрока = ТаблицаДанныхЗапросаНаПередачу.Добавить();
	НомерРейсаИсточника = Формат(ДанныеЗапроса.tripId, "ЧГ=");
	Пока СтрДлина(НомерРейсаИсточника) <> 9 Цикл
		НомерРейсаИсточника = "0" + НомерРейсаИсточника;
	КонецЦикла;	
	НоваяСтрока.НомерРейсаИсточника = НомерРейсаИсточника;
	НоваяСтрока.КодТранспортаИсточника = ДанныеЗапроса.sourceCarId;
	НоваяСтрока.КодТранспортаПриемника = ДанныеЗапроса.recepientCarId;
	НоваяСтрока.КодРегиона = ДанныеЗапроса.regionId;
	НоваяСтрока.НомерДокументаМП = ДанныеЗапроса.numberDoc;
	
	Для Каждого ДанныеЗаказа Из ДанныеЗапроса.orders.orderRow Цикл
		НоваяСтрока = ТаблицаДанныхЗаказов.Добавить();
		НоваяСтрока.НомерЗаказа = ДанныеЗаказа.orderId;
		НоваяСтрока.АдресДоставки = ДанныеЗаказа.address;
		НоваяСтрока.КоличествоМест = ДанныеЗаказа.countOfPlaces;    
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗРеквизиты.НомерРейсаИсточника КАК НомерРейсаИсточника,
	               |	ТЗРеквизиты.КодТранспортаИсточника КАК КодТранспортаИсточника,
	               |	ТЗРеквизиты.КодТранспортаПриемника КАК КодТранспортаПриемника,
	               |	ТЗРеквизиты.КодРегиона КАК КодРегиона,
	               |	ТЗРеквизиты.НомерДокументаМП КАК НомерДокументаМП
	               |ПОМЕСТИТЬ втРеквизитыДокумента
	               |ИЗ
	               |	&ТЗРеквизиты КАК ТЗРеквизиты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗЗаказы.НомерЗаказа КАК НомерЗаказа,
	               |	ТЗЗаказы.АдресДоставки КАК АдресДоставки,
	               |	ТЗЗаказы.КоличествоМест КАК КоличествоМест
	               |ПОМЕСТИТЬ втЗаказы
	               |ИЗ
	               |	&ТЗЗаказы КАК ТЗЗаказы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРеквизитыДокумента.НомерДокументаМП КАК НомерДокументаМП,
	               |	РегиональныеТерминалы.Ссылка КАК Регион,
	               |	докРейсИсточник.Ссылка КАК РейсИсточник,
	               |	ТранспортИсточник.Ссылка КАК ТранспортИсточник,
	               |	докРейсИсточник.ДатаРейса КАК ДатаРейса,
	               |	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК ВодительИсточник,
	               |	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК ЭкспедиторИсточник,
	               |	ТранспортПриемник.Ссылка КАК ТранспортПриемник
	               |ПОМЕСТИТЬ втПолученныеРеквизиты
	               |ИЗ
	               |	втРеквизитыДокумента КАК втРеквизитыДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы
	               |		ПО втРеквизитыДокумента.КодРегиона = РегиональныеТерминалы.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТранспорт КАК ТранспортИсточник
	               |		ПО втРеквизитыДокумента.КодТранспортаИсточника = ТранспортИсточник.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК докРейсИсточник
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	               |			ПО докРейсИсточник.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	               |		ПО втРеквизитыДокумента.НомерРейсаИсточника = докРейсИсточник.Номер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТранспорт КАК ТранспортПриемник
	               |		ПО втРеквизитыДокумента.КодТранспортаПриемника = ТранспортПриемник.Код
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втПолученныеРеквизиты.НомерДокументаМП КАК НомерДокументаМП,
	               |	втПолученныеРеквизиты.Регион КАК Регион,
	               |	втПолученныеРеквизиты.РейсИсточник КАК РейсИсточник,
	               |	втПолученныеРеквизиты.ТранспортИсточник КАК ТранспортИсточник,
	               |	втПолученныеРеквизиты.ДатаРейса КАК ДатаРейса,
	               |	втПолученныеРеквизиты.ВодительИсточник КАК ВодительИсточник,
	               |	втПолученныеРеквизиты.ЭкспедиторИсточник КАК ЭкспедиторИсточник,
	               |	втПолученныеРеквизиты.ТранспортПриемник КАК ТранспортПриемник,
	               |	ПривязкаМашинКРейсамСрезПоследних.Рейс КАК РейсПриемник,
	               |	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК ВодительПриемник,
	               |	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК ЭкспедиторПриемник,
	               |	ЗапросНаПередачуЗаказовЭкипажу.Ссылка КАК СуществующийЗапросНаПередачу,
	               |	ЕСТЬNULL(ЗапросНаПередачуЗаказовЭкипажу.Проведен, ЛОЖЬ) КАК СуществующийЗапросНаПередачуПроведен,
	               |	ЗапросНаПередачуЗаказовЭкипажу.Номер КАК НомерСуществующегоЗапросаНаПередачу
	               |ИЗ
	               |	втПолученныеРеквизиты КАК втПолученныеРеквизиты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	               |		ПО втПолученныеРеквизиты.ТранспортПриемник = ПривязкаМашинКРейсамСрезПоследних.Транспорт
	               |			И втПолученныеРеквизиты.ДатаРейса = ПривязкаМашинКРейсамСрезПоследних.Рейс.ДатаРейса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросНаПередачуЗаказовЭкипажу КАК ЗапросНаПередачуЗаказовЭкипажу
	               |		ПО втПолученныеРеквизиты.НомерДокументаМП = ЗапросНаПередачуЗаказовЭкипажу.НомерДокументаМП
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	               |	втЗаказы.АдресДоставки КАК АдресДоставки,
	               |	втЗаказы.КоличествоМест КАК КоличествоМест
	               |ИЗ
	               |	втЗаказы КАК втЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО втЗаказы.НомерЗаказа = РеализацияТоваровУслуг.Номер";
	Запрос.УстановитьПараметр("ТЗРеквизиты",ТаблицаДанныхЗапросаНаПередачу);
	Запрос.УстановитьПараметр("ТЗЗаказы",ТаблицаДанныхЗаказов);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаРеквизитов = МассивРезультатов[3].Выбрать();
	ТаблицаЗаказов = МассивРезультатов[4].Выгрузить();	
	
	ВыборкаРеквизитов.Следующий();
	Если ВыборкаРеквизитов.СуществующийЗапросНаПередачуПроведен Тогда
		ОтветСервиса.successfully = Ложь;
		ОтветСервиса.error = "По документу " + ВыборкаРеквизитов.НомерДокументаМП + " уже есть проведенный документ " + ВыборкаРеквизитов.НомерСуществующегоЗапросаНаПередачу;
		//ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветСервиса);
		//СтрокаXML = ЗаписьXML.Закрыть();
		Возврат ОтветСервиса
	ИначеЕсли ЗначениеЗаполнено(ВыборкаРеквизитов.СуществующийЗапросНаПередачу) Тогда 
		ДокументОбъект = ВыборкаРеквизитов.СуществующийЗапросНаПередачу.ПолучитьОбъект();
		ДокументОбъект.Заказы.Очистить();
	Иначе	
		ДокументОбъект = Документы.ЗапросНаПередачуЗаказовЭкипажу.СоздатьДокумент();
	КонецЕсли;	
	
	ДокументОбъект.УзелИсточник = Узел;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаРеквизитов);
	ДокументОбъект.Заказы.Загрузить(ТаблицаЗаказов);
	ДокументОбъект.Дата = ТекущаяДата();
	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		ОтветСервиса.successfully = Ложь;
		ОтветСервиса.error = ОписаниеОшибки();		
		//ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветСервиса);
		//СтрокаXML = ЗаписьXML.Закрыть();
		Возврат ОтветСервиса	
	КонецПопытки;	
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОтветСервиса.successfully = Ложь;
		ОтветСервиса.error = ОписаниеОшибки();		
		//ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветСервиса);
		//СтрокаXML = ЗаписьXML.Закрыть();
		Возврат ОтветСервиса	
	КонецПопытки;	
	
	МассивУзлов = Новый Массив;
	МассивУзлов.Добавить(Узел);
	
	//ПланыОбмена.ЗарегистрироватьИзменения(
	
	ОтветСервиса.successfully = Истина;
	ОтветСервиса.idDocument = ДокументОбъект.Номер;
	
	//ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветСервиса);
	//СтрокаXML = ЗаписьXML.Закрыть();
	Возврат ОтветСервиса
	
КонецФункции

Функция acceptForTransferOfOrders(ID, request)
	//ЧтениеXML = Новый ЧтениеXML;
	//ЧтениеXML.УстановитьСтроку(request);
	//ТипЗапрос = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "acceptForTransferOfOrdersRequest");
	//ДанныеЗапроса = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипЗапрос);
	
	ДанныеЗапроса = request;
	
	ТаблицаРеквизитовДокумента = Новый ТаблицаЗначений;
	ТаблицаРеквизитовДокумента.Колонки.Добавить("КодРегиона",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРеквизитовДокумента.Колонки.Добавить("КодУзла",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ТаблицаРеквизитовДокумента.Колонки.Добавить("НомерЗапроса",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	ТаблицаРеквизитовДокумента.Колонки.Добавить("ОбщийСтатусЗапроса", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗапросовНаПередачуЗаказовЭкипажам"));
	ТаблицаРеквизитовДокумента.Колонки.Добавить("НомерДокументаМП",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаДанныхЗаказов = Новый ТаблицаЗначений;
	ТаблицаДанныхЗаказов.Колонки.Добавить("НомерЗаказа",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Переменная)));
	ТаблицаДанныхЗаказов.Колонки.Добавить("АдресДоставки",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаДанныхЗаказов.Колонки.Добавить("КоличествоМест",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанныхЗаказов.Колонки.Добавить("СтатусЗапроса",Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗапросовНаПередачуЗаказовЭкипажам"));
	
	СтрокаРеквизитов = ТаблицаРеквизитовДокумента.Добавить();
	СтрокаРеквизитов.КодРегиона = ДанныеЗапроса.regionId;
	СтрокаРеквизитов.КодУзла = ID;
	СтрокаРеквизитов.НомерЗапроса = ДанныеЗапроса.requestForTransferId;
	СтрокаРеквизитов.ОбщийСтатусЗапроса = Перечисления.СтатусыЗапросовНаПередачуЗаказовЭкипажам[ДанныеЗапроса.status];
	СтрокаРеквизитов.НомерДокументаМП = ДанныеЗапроса.numberDoc;	
	
	Для Каждого ДанныеЗаказа Из ДанныеЗапроса.orders.orderRow Цикл 
		НоваяСтрока = ТаблицаДанныхЗаказов.Добавить();
		НоваяСтрока.НомерЗаказа = ДанныеЗаказа.orderId;
		НоваяСтрока.АдресДоставки = ДанныеЗаказа.address;
		НоваяСтрока.КоличествоМест = ДанныеЗаказа.countOfPlaces;
		НоваяСтрока.СтатусЗапроса = Перечисления.СтатусыЗапросовНаПередачуЗаказовЭкипажам[ДанныеЗаказа.status];
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗРеквизиты.КодРегиона КАК КодРегиона,
	               |	ТЗРеквизиты.КодУзла КАК КодУзла,
	               |	ТЗРеквизиты.ОбщийСтатусЗапроса КАК ОбщийСтатусЗапроса,
	               |	ТЗРеквизиты.НомерДокументаМП КАК НомерДокументаМП,
	               |	ТЗРеквизиты.НомерЗапроса КАК НомерЗапроса
	               |ПОМЕСТИТЬ втТаблицаРеквизитов
	               |ИЗ
	               |	&ТЗРеквизиты КАК ТЗРеквизиты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗЗаказы.НомерЗаказа КАК НомерЗаказа,
	               |	ТЗЗаказы.АдресДоставки КАК АдресДоставки,
	               |	ТЗЗаказы.КоличествоМест КАК КоличествоМест,
	               |	ТЗЗаказы.СтатусЗапроса КАК СтатусЗапроса
	               |ПОМЕСТИТЬ втДанныеЗаказов
	               |ИЗ
	               |	&ТЗЗаказы КАК ТЗЗаказы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РегиональныеТерминалы.Ссылка КАК Регион,
	               |	ИзмененияДляМП.Ссылка КАК Узел,
	               |	ЗапросНаПередачуЗаказовЭкипажу.Ссылка КАК Запрос,
	               |	втТаблицаРеквизитов.ОбщийСтатусЗапроса КАК ОбщийСтатусЗапроса,
	               |	втТаблицаРеквизитов.НомерДокументаМП КАК НомерДокументаМП,
	               |	ПодтверждениеПередачиЗаказовЭкипажу.Ссылка КАК Подтверждение,
	               |	ЕСТЬNULL(ЗапросНаПередачуЗаказовЭкипажу.Проведен, ЛОЖЬ) КАК ЗапросПроведен,
	               |	ЕСТЬNULL(ПодтверждениеПередачиЗаказовЭкипажу.Проведен, ЛОЖЬ) КАК ПодтверждениеПроведено,
	               |	втТаблицаРеквизитов.КодУзла КАК КодУзла,
	               |	втТаблицаРеквизитов.НомерЗапроса КАК НомерЗапроса
	               |ИЗ
	               |	втТаблицаРеквизитов КАК втТаблицаРеквизитов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ИзмененияДляМП КАК ИзмененияДляМП
	               |		ПО втТаблицаРеквизитов.КодУзла = ИзмененияДляМП.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы
	               |		ПО втТаблицаРеквизитов.КодРегиона = РегиональныеТерминалы.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросНаПередачуЗаказовЭкипажу КАК ЗапросНаПередачуЗаказовЭкипажу
	               |		ПО втТаблицаРеквизитов.НомерЗапроса = ЗапросНаПередачуЗаказовЭкипажу.Номер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодтверждениеПередачиЗаказовЭкипажу КАК ПодтверждениеПередачиЗаказовЭкипажу
	               |		ПО втТаблицаРеквизитов.НомерДокументаМП = ПодтверждениеПередачиЗаказовЭкипажу.НомерДокументаМП
	               |			И втТаблицаРеквизитов.КодУзла = ПодтверждениеПередачиЗаказовЭкипажу.Узел.Код
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	               |	втДанныеЗаказов.СтатусЗапроса КАК СтатусЗапроса,
	               |	втДанныеЗаказов.АдресДоставки КАК АдресДоставки,
	               |	втДанныеЗаказов.КоличествоМест КАК КоличествоМест
	               |ИЗ
	               |	втДанныеЗаказов КАК втДанныеЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО втДанныеЗаказов.НомерЗаказа = РеализацияТоваровУслуг.Номер";
	
	Запрос.УстановитьПараметр("ТЗРеквизиты",ТаблицаРеквизитовДокумента);
	Запрос.УстановитьПараметр("ТЗЗаказы",ТаблицаДанныхЗаказов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизитов = МассивРезультатов[2].Выбрать();
	ВыборкаРеквизитов.Следующий();
	ОтветСервиса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "transferOfOrdersResponse"));
	Если Не (ВыборкаРеквизитов.ЗапросПроведен) Тогда
		ОтветСервиса.successfully = Ложь;
		ОтветСервиса.error = "Не найден запрос на передачу " + ВыборкаРеквизитов.НомерЗапроса;
		Возврат ОтветСервиса
	КонецЕсли;
	Если ВыборкаРеквизитов.ПодтверждениеПроведено Тогда
		ОтветСервиса.successfully = Ложь;
		ОтветСервиса.error = "Подтверждение с номером МП " + Строка(ВыборкаРеквизитов.НомерДокументаМП) + " для узла с ID " + ВыборкаРеквизитов.КодУзла + " уже существует.";
		Возврат ОтветСервиса	
	КонецЕсли;	
	ТаблицаЗаказы = МассивРезультатов[3].Выгрузить();
	
	Если ЗначениеЗаполнено(ВыборкаРеквизитов.Подтверждение) Тогда
		ДокументОбъект = ВыборкаРеквизитов.Подтверждение.ПолучитьОбъект();	
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;	
	Иначе	
		ДокументОбъект = Документы.ПодтверждениеПередачиЗаказовЭкипажу.СоздатьДокумент();
	КонецЕсли;	
	ДокументОбъект.Дата = ТекущаяДата();
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаРеквизитов);
	ДокументОбъект.Заказы.Загрузить(ТаблицаЗаказы);	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		ОтветСервиса.successfully = Ложь;
		ОтветСервиса.error = ОписаниеОшибки();
		Возврат ОтветСервиса
	КонецПопытки;	
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОтветСервиса.successfully = Ложь;
		ОтветСервиса.error = ОписаниеОшибки();
		Возврат ОтветСервиса
	КонецПопытки;
	
	ОтветСервиса.successfully = Истина;
	ОтветСервиса.idDocument = ДокументОбъект.Номер;
	Возврат ОтветСервиса
	
КонецФункции

Функция getTypesOfAttachedDocs(ID)
	// Вставить содержимое обработчика.
	Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТипыПрикрепленныхДокументовИзменения.Ссылка.Код КАК id,
	            |	ТипыПрикрепленныхДокументовИзменения.Ссылка.Наименование КАК name,
	            |	ТипыПрикрепленныхДокументовИзменения.Ссылка.ДоступенВыборВМП КАК enabledForMA,
				|	ТипыПрикрепленныхДокументовИзменения.Ссылка.ПрефиксИмениФайла КАК filePrefix,
				|	ТипыПрикрепленныхДокументовИзменения.Ссылка.КачествоФото КАК photoQuality,				
				|	ТипыПрикрепленныхДокументовИзменения.Ссылка.ЧерноБелоеФото КАК blackAndWhitePhoto,				
				|	ТипыПрикрепленныхДокументовИзменения.Ссылка.ОтметкаНаФотоснимке КАК photoMark,				
	            |	ТипыПрикрепленныхДокументовИзменения.Ссылка.ДоступностьПоТипамЗаказов.(
	            |		Ссылка КАК СсылкаСсылка,
	            |		НомерСтроки КАК СсылкаНомерСтроки,
	            |		ТипЗаказа КАК orderType,
	            |		Доступен КАК available
	            |	) КАК Ссылка
	            |ИЗ
	            |	Справочник.ТипыПрикрепленныхДокументов.Изменения КАК ТипыПрикрепленныхДокументовИзменения
	            |ГДЕ
	            |	ТипыПрикрепленныхДокументовИзменения.Узел = &Узел
	            |	И ТипыПрикрепленныхДокументовИзменения.Ссылка.ЭтоГруппа = ЛОЖЬ";
	Зап.УстановитьПараметр("Узел", Узел);
	Рез = Зап.Выполнить().Выгрузить();
	
    МассивТиповДокументовТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "arrayOfTypesOfAttachedDocs");
    ТипДокументовТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "typeOfAttachedDoc");

	
    МассивСтрокДоступностиТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "arrayOfAvailabilityByOrderTypes");
    СтрокаДоступностиТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO", "availabilityByOrderType");
	
	
	МассивТиповДокументов = ФабрикаXDTO.Создать(МассивТиповДокументовТип);
	
	ТекНом = Неопределено;
	
	КачествоФотоПоУмолчанию = Константы.КачествоФотоснимкаМПЭкипажейПоУмолчанию.Получить();
	Если КачествоФотоПоУмолчанию = 0 Тогда
		КачествоФотоПоУмолчанию = 60;
	КонецеСли;	
	
	Для Каждого Тек Из Рез Цикл
		ТипДокумента = ФабрикаXDTO.Создать(ТипДокументовТип);
		ЗаполнитьЗначенияСвойств(ТипДокумента, Тек);
		
		Если Не ЗначениеЗаполнено(ТипДокумента.photoQuality) Тогда
			ТипДокумента.photoQuality = КачествоФотоПоУмолчанию;
		КонецеСли;	
		
		МассивСтрокДоступности =  ФабрикаXDTO.Создать(МассивСтрокДоступностиТип);
		Для каждого Стр Из Тек.Ссылка Цикл
            СтрокаДоступности =  ФабрикаXDTO.Создать(СтрокаДоступностиТип);
			//ЗаполнитьЗначенияСвойств(СтрокаДоступности, Стр);
			
			СтрокаДоступности.available = Стр.available;
			ИндексЗначенияПеречисления = Перечисления.ТипыЗаказов.Индекс(Стр.orderType);
			СтрокаДоступности.orderType = Метаданные.Перечисления.ТипыЗаказов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
			
			МассивСтрокДоступности.availabilityByOrderType.Добавить(СтрокаДоступности);
        КонецЦикла;
		ТипДокумента.availabilityByOrderTypes = МассивСтрокДоступности;
		
		
		МассивТиповДокументов.typeOfAttachedDoc.Добавить(ТипДокумента);
	КонецЦикла;	
	
	Возврат МассивТиповДокументов;
КонецФункции

Функция unloadAttachedDocs(ID, attachedDoc)
	// Вставить содержимое обработчика.
	Попытка
		Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
		Данные = attachedDoc.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Данные);
		МассивФайловТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1CMobile/ServiceMobileXDTO").Получить("arrayOfAttachedDoc");
		МассивФайлов = ФабрикаXDTO.ПрочитатьXML(Чт, МассивФайловТип);
		
		ТабЗаказов = Новый ТаблицаЗначений;
		ТабЗаказов.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		ТабЗаказов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(11)));
		ТабЗаказов.Колонки.Добавить("name", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
		ТабЗаказов.Колонки.Добавить("nameExt", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		ТабЗаказов.Колонки.Добавить("id", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(11)));
		ТабЗаказов.Колонки.Добавить("createDate", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(частидаты.ДатаВремя)));
		
		ТабЗаборов = Новый ТаблицаЗначений;
		ТабЗаборов.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		ТабЗаборов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(11)));
		ТабЗаборов.Колонки.Добавить("name", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
		ТабЗаборов.Колонки.Добавить("nameExt", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		ТабЗаборов.Колонки.Добавить("id", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(11)));
		ТабЗаборов.Колонки.Добавить("createDate", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(частидаты.ДатаВремя)));
		
		Для Сч = 0 По МассивФайлов.attachedDocs.Количество() - 1 Цикл
			Файл = МассивФайлов.attachedDocs[Сч];
			ТипЗаказа = "";
			Если Файл.Получить("orderType") <> Неопределено Тогда
				Если ЗначениеЗаполнено(Файл.orderType) Тогда
					Если Перечисления.ТипыЗаказов[Файл.orderType] = Перечисления.ТипыЗаказов.Забор Тогда
						ТипЗаказа = "Забор";
					Иначе
						ТипЗаказа = "Доставка";
					КонецеСли;	
				Иначе
					ТипЗаказа = "Доставка";
				КонецеСли;
			Иначе	
				ТипЗаказа = "Доставка";
			КонецЕсли;	
			
			Если ТипЗаказа = "Доставка" Тогда
				Нов = ТабЗаказов.Добавить();
			Иначе
				Нов = ТабЗаборов.Добавить();
			КонецеСли;	
			Нов.НомерЗаказа = СокрЛП(Файл.orderId);
			Нов.ТипДокумента = СокрЛП(Файл.typeDoc);
			Нов.name = СокрЛП(Файл.name);
			Нов.nameExt = СокрЛП(Файл.nameExt);
			Нов.id = Файл.id;
			Нов.createDate = Файл.createDate;
		КонецЦикла;	
		
		//Нов.ТипЗаказа = Перечисления.ТипЗаказа[СтрокаТипаЗаказа.orderType];
		//заказы
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	Таб.НомерЗаказа КАК НомерЗаказа,
		|	Таб.ТипДокумента КАК ТипДокумента,
		|	Таб.name КАК name,
		|	Таб.nameExt КАК nameExt,
		|	Таб.id КАК id,
		|	Таб.createDate КАК createDate
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.НомерЗаказа КАК НомерЗаказа,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	ТипыПрикрепленныхДокументов.Ссылка КАК ТипДокумента,
		|	ВТ_Заказы.name КАК name,
		|	ВТ_Заказы.nameExt КАК nameExt,
		|	ВТ_Заказы.id КАК id,
		|	ВТ_Заказы.createDate КАК createDate		
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТ_Заказы.НомерЗаказа = РеализацияТоваровУслуг.Номер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыПрикрепленныхДокументов КАК ТипыПрикрепленныхДокументов
		|		ПО ВТ_Заказы.ТипДокумента = ТипыПрикрепленныхДокументов.Код";
		Зап.УстановитьПараметр("Таб", ТабЗаказов);
		
		ТабДанных = Зап.Выполнить().Выгрузить();
		
		Для Каждого Тек Из ТабДанных Цикл
			//РаботаСПрикрепленнымиФайламиСервер.ЗаписатьВыбранныйФайлМПВБД(Тек.name, Тек.nameExt, Тек.data, ТабДанных.Найти(СокрЛП(Тек.orderId)).ТипДокумента, ТабДанных.Найти(СокрЛП(Тек.orderId)).Заказ, Тек.id, Узел, Тек.createDate, Перечисления.ТипыЗаказов.Доставка); 
			ДанныеМП = "";
			Для Сч = 0 По МассивФайлов.attachedDocs.Количество() - 1 Цикл
				Файл = МассивФайлов.attachedDocs[Сч];
				Если Файл.id = Тек.id Тогда
					ДанныеМП = Файл.data;
					Прервать;
				КонецеСли;	
			КонецЦикла;	
			РаботаСПрикрепленнымиФайламиСервер.ЗаписатьВыбранныйФайлМПВБД(Тек.name, Тек.nameExt, ДанныеМП, Тек.ТипДокумента, Тек.Заказ, Тек.id, Узел, Тек.createDate, Перечисления.ТипыЗаказов.Доставка); 
		КонецЦикла;
		
		
		//заборы
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	Таб.НомерЗаказа КАК НомерЗаказа,
		|	Таб.ТипДокумента КАК ТипДокумента,
		|	Таб.name КАК name,
		|	Таб.nameExt КАК nameExt,
		|	Таб.id КАК id,
		|	Таб.createDate КАК createDate
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.НомерЗаказа КАК НомерЗаказа,
		|	ЗаборТовара.Ссылка КАК Заказ,
		|	ТипыПрикрепленныхДокументов.Ссылка КАК ТипДокумента,
		|	ВТ_Заказы.name КАК name,
		|	ВТ_Заказы.nameExt КАК nameExt,
		|	ВТ_Заказы.id КАК id,
		|	ВТ_Заказы.createDate КАК createDate		
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
		|		ПО ВТ_Заказы.НомерЗаказа = ЗаборТовара.Номер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыПрикрепленныхДокументов КАК ТипыПрикрепленныхДокументов
		|		ПО ВТ_Заказы.ТипДокумента = ТипыПрикрепленныхДокументов.Код";
		Зап.УстановитьПараметр("Таб", ТабЗаборов);
		
		ТабДанных = Зап.Выполнить().Выгрузить();
		
		Для Каждого Тек Из ТабДанных Цикл
			//РаботаСПрикрепленнымиФайламиСервер.ЗаписатьВыбранныйФайлМПВБД(Тек.name, Тек.nameExt, Тек.data, ТабДанных.Найти(СокрЛП(Тек.orderId)).ТипДокумента, ТабДанных.Найти(СокрЛП(Тек.orderId)).Заказ, Тек.id, Узел, Тек.createDate, Перечисления.ТипыЗаказов.Забор); 
			ДанныеМП = "";
			Для Сч = 0 По МассивФайлов.attachedDocs.Количество() - 1 Цикл
				Файл = МассивФайлов.attachedDocs[Сч];
				Если Файл.id = Тек.id Тогда
					ДанныеМП = Файл.data;
					Прервать;
				КонецеСли;	
			КонецЦикла;	
			РаботаСПрикрепленнымиФайламиСервер.ЗаписатьВыбранныйФайлМПВБД(Тек.name, Тек.nameExt, ДанныеМП, Тек.ТипДокумента, Тек.Заказ, Тек.id, Узел, Тек.createDate, Перечисления.ТипыЗаказов.Забор); 
			
		КонецЦикла;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция setPushNotificationSubscriberId(ID, pushNotificationSubscriberId)
	// Вставить содержимое обработчика.
	Попытка
		Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ID);
		
		НовыеДанные = pushNotificationSubscriberId.Получить();
		СтарыеДанные = Узел.IDПодписчика.Получить();
		
		
		НадоЗаписывать = Ложь;
		
		Если НовыеДанные <> Неопределено и СтарыеДанные <> Неопределено Тогда
			Если НовыеДанные.ИдентификаторИнформационнойБазы <> СтарыеДанные.ИдентификаторИнформационнойБазы Или 
				НовыеДанные.ИдентификаторПриложения <> СтарыеДанные.ИдентификаторПриложения Или
				НовыеДанные.ИдентификаторУстройства <> СтарыеДанные.ИдентификаторУстройства Тогда
				
				НадоЗаписывать = Истина;
			КонецеСли;
		ИначеЕсли НовыеДанные <> Неопределено И СтарыеДанные = Неопределено Тогда
			НадоЗаписывать = Истина;
		КонецеСли;
		
		Если НовыеДанные <> Неопределено И НадоЗаписывать Тогда
			УзелОбъект = Узел.ПолучитьОбъект();
			УзелОбъект.IDПодписчика = pushNotificationSubscriberId;
			УзелОбъект.ВремяОбновленияIDПодписчика = ТекущаяДата();
			УзелОбъект.Записать();
		КонецеСли;	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция GetReasonsOfCancellationExtension_v2(ID)
	Узел = lem.ПолучитьУзелПланаОбмена(ID);
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПричиныОтказаПереноса.Код КАК Код,
	            |	ПричиныОтказаПереноса.Наименование КАК Наименование,
	            |	ПричиныОтказаПереноса.ЗапретВыбораВМП КАК ЗапретВыбораВМП,
	            |	ПричиныОтказаПереноса.ДоступностьПоПричинамНеВыполненияЗаказа.(
	            |		Ссылка КАК Ссылка,
	            |		НомерСтроки КАК НомерСтроки,
	            |		ПричинаНевыполнения КАК ПричинаНевыполнения,
	            |		Доступность КАК Доступность,
	            |		ВЫБОР
	            |			КОГДА ПричиныОтказаПереноса.ДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	            |				ТОГДА 1
	            |			КОГДА ПричиныОтказаПереноса.ДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	            |				ТОГДА 2
	            |			ИНАЧЕ 0
	            |		КОНЕЦ КАК TypeOfOrder
	            |	) КАК ДоступностьПоПричинамНеВыполненияЗаказа,
	            |	ПричиныОтказаПереноса.Забор КАК Забор
	            |ИЗ
	            |	Справочник.ПричиныОтказаПереноса.Изменения КАК ПричиныОтказаПереносаИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПричиныОтказаПереноса КАК ПричиныОтказаПереноса
	            |		ПО ПричиныОтказаПереносаИзменения.Ссылка = ПричиныОтказаПереноса.Ссылка
	            |ГДЕ
	            |	ПричиныОтказаПереноса.ЭтоГруппа = ЛОЖЬ
	            |	И ПричиныОтказаПереносаИзменения.Узел = &Узел";
	зап.УстановитьПараметр("Узел", Узел);
	
	Рез = Зап.Выполнить().Выгрузить();
    ПричиныОтказаМассивТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellationExtension", "ArrayOfReasonsOfCancellation");
    ПричинаОтказаТип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellationExtension", "ReasonOfCancellation");
    StringTableAvailabilityOfReasonsNotPerform_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/1CMobile/ReasonsOfCancellationExtension", "StringTableAvailabilityOfReasonsNotPerform");	
	
	МассивПричин = ФабрикаXDTO.Создать(ПричиныОтказаМассивТип);
	
	ТекНом = Неопределено;
	
	Для Каждого Тек Из Рез Цикл
		Причина = ФабрикаXDTO.Создать(ПричинаОтказаТип);
		Причина.ID = Тек.Код;
		Причина.Name = Тек.Наименование;
		Причина.DeniedForMA = Тек.ЗапретВыбораВМП;
		Причина.TakingGoods = Тек.Забор;
		Для каждого Стр Из Тек.ДоступностьПоПричинамНеВыполненияЗаказа Цикл
			Если Стр.TypeOfOrder = 0 Тогда
				Продолжить;
			КонецеСли;	
            StringTableAvailabilityOfReasonsNotPerform =  ФабрикаXDTO.Создать(StringTableAvailabilityOfReasonsNotPerform_Тип);
            StringTableAvailabilityOfReasonsNotPerform.ReasonNotPerformID = Стр.ПричинаНевыполнения.Код;
            StringTableAvailabilityOfReasonsNotPerform.Availability = Стр.Доступность;
			StringTableAvailabilityOfReasonsNotPerform.TypeOfOrder = Стр.TypeOfOrder;
            Причина.TableAvailabilityOfReasonsNotPerform.Добавить(StringTableAvailabilityOfReasonsNotPerform);
        КонецЦикла;
		МассивПричин.ReasonOfCancellation.Добавить(Причина);
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивПричин);
	Результат = ЗаписьXML.Закрыть();	
	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

    Возврат Хр;
КонецФункции




