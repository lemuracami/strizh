
Функция SetStatus(okey, status)
	
	//отключение Акси
	responseSetStatusТип = ФабрикаXDTO.Тип("http://strizh.delivery","responseSetStatus");
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	
	responseSetStatus = ФабрикаXDTO.Создать(responseSetStatusТип);
	Errors = ФабрикаXDTO.Создать(ErrorsТип);
	errors.error.Добавить("Сервис неактулен!");
	responseSetStatus.errors = errors;
	Возврат responseSetStatus;
	///
	
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РеализацияТоваровУслуг.Ссылка КАК Док,
	            |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа,
	            |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	            |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ПредварительноеЗакрытие, ЛОЖЬ) КАК ПредварительноеЗакрытие
	            |ИЗ
	            |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	            |ГДЕ
	            |	ДополнительныеПараметрыЗаказа.okey = &okey";
	Зап.УстановитьПараметр("okey", okey);
	
	responseSetStatusТип = ФабрикаXDTO.Тип("http://strizh.delivery","responseSetStatus");
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	
	Рез = Зап.Выполнить().Выгрузить();
	responseSetStatus = ФабрикаXDTO.Создать(responseSetStatusТип);
	Errors = ФабрикаXDTO.Создать(ErrorsТип);
	Если Рез.Количество() = 0 Тогда
		errors.error.Добавить("Не найден okey!");
		responseSetStatus.errors = errors;
		Возврат responseSetStatus;
	КонецеСли;	
	
	
	ПредварительноеЗакрытие = Рез[0].ПредварительноеЗакрытие;
	
	Если status = 40 Или status = 2 Или status = 30 Тогда
		Док = Документы.ЗагрузкаСТСД.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.ДатаДокумента = ТекущаяДата();
		Док.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.Аксиомус;
		Док.ТерминалПриема = Справочники.РегиональныеТерминалы.СПбСтриж;
		Нов = Док.Штрихкоды.Добавить();
		Нов.ВнешнийНомерЗаказа = Рез[0].НомерВнешнегоЗаказа;
		Нов.Заказ = Рез[0].Док;
		Нов.Контрагент = Рез[0].Контрагент;
		
		Док.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			СписокПолучателей = Новый Массив;
			СписокПолучателей.Добавить("v.yakurnov@strizh-logistic.ru");
			СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
			
			СообщениеОбОшибке = ОписаниеОшибки();		
			Отпр = lem.ОтправитьСообщение(СписокПолучателей, "не провелся документ ЗагрузкаСТСД", "Причина: "+ СообщениеОбОшибке, , "Логистическая компания ""Стриж""");	
			
			pkv.ДобавитьВСписокОтложенногоПроведения(Док.Ссылка, СообщениеОбОшибке);
		КонецПопытки;
		
	КонецеСли;
	
	
	НовыйТипОплаты = Неопределено;
	Попытка
		резСтатусЗаказа = smv.ЗапросТекущегоСтатусаЗаказа(okey, "63df707cfb53dbc4e38f9eb77150cee6");	
		Если Число(резСтатусЗаказа.ТипОплаты) = 1 ИЛИ Число(резСтатусЗаказа.ТипОплаты) = 2 Тогда
			НовыйТипОплаты = Справочники.ТипыОплат.Наличные;
		ИначеЕсли Число(резСтатусЗаказа.ТипОплаты) = 3 Тогда
			НовыйТипОплаты = Справочники.ТипыОплат.Терминал;	
		КонецЕсли;				
	Исключение	
	КонецПопытки;
	
	
	
	
	//Если status = 81 Или status = 120 Тогда
	//	ДокОтмена = Документы.ОтклонениеЗаказа.СоздатьДокумент();
	//	ДокОтмена.Дата = ТекущаяДата();
	//	ДокОтмена.Заказ = Рез[0].Док;
	//	ДокОтмена.СтатусAxiomus = status;
	//	ДокОтмена.ПричинаОтклоненияЗаказаВСистеме = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненМагазином;    //???
	//	Попытка
	//		ДокОтмена.Записать(РежимЗаписиДокумента.Запись);
	//		ДокОтмена.Записать(РежимЗаписиДокумента.Проведение);
	//	Исключение
	//	КонецПопытки;	
	//КонецЕсли;
	
	
	СтатусАкси = Справочники.СтатусыAxiomus.НайтиПоКоду(status);
	
	// ДоставкаЗавершена = Истина  - 26.07.2016
	Если СтатусАкси = Справочники.СтатусыAxiomus.Выполнен ИЛИ СтатусАкси = Справочники.СтатусыAxiomus.Вручен ИЛИ СтатусАкси = Справочники.СтатусыAxiomus.Исполнен Тогда		
		Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Рез[0].Док.Номер));
		Если ЗначениеЗаполнено(Доставка) И НЕ Доставка.ДоставкаЗавершена Тогда
			ДоставкаОбъект = Доставка.ПолучитьОбъект();
			ДоставкаОбъект.ДоставкаЗавершена = Истина;
			Попытка
				ДоставкаОбъект.Записать();
			Исключение
			КонецПопытки;		
		Иначе				
		КонецЕсли;					
	КонецЕсли;
		
	
	Наб = РегистрыСведений.СтатусыЗаказовAxiomus.СоздатьНаборЗаписей();
	
	ТекВр = ТекущаяДата();
	Наб.отбор.Период.Установить(ТекВр);
	
	Нов = Наб.Добавить();
	Нов.Заказ = Рез[0].Док;
	Нов.push = Истина;
	Нов.Статус = СтатусАкси;
	Нов.Период = ТекВр;
	Если ЗначениеЗаполнено(НовыйТипОплаты) Тогда
		Нов.ТипОплаты = НовыйТипОплаты;
	КонецЕсли;
	Наб.Записать();

	
	// обновляем статус Стриж
	ЗапросСтатусСтриж = Новый Запрос("ВЫБРАТЬ
	                                 |	ax_СоответствиеСтатусов.СтатусСтриж,
	                                 |	ax_СоответствиеСтатусов.СтатусСтриж.Код КАК СтатусСтриж_Код,
	                                 |	ax_СоответствиеСтатусов.СтатусСтрижОбратныйПоток.Код КАК СтатусСтрижОбратныйПоток_Код,
	                                 |	ax_СоответствиеСтатусов.СтатусСтрижФинальный,
	                                 |	ax_СоответствиеСтатусов.РезультатДоставки,
	                                 |	ax_СоответствиеСтатусов.ПричинаНеВыполненияДоставки
	                                 |ИЗ
	                                 |	РегистрСведений.ax_СоответствиеСтатусов КАК ax_СоответствиеСтатусов
	                                 |ГДЕ
	                                 |	ax_СоответствиеСтатусов.СтатусAxiomus = &СтатусAxiomus");
	ЗапросСтатусСтриж.УстановитьПараметр("СтатусAxiomus", СтатусАкси);
	РезСтатусСтриж = ЗапросСтатусСтриж.Выполнить().Выбрать();
	
	Если РезСтатусСтриж.Следующий() Тогда
		
		НаборСтатусы = РегистрыСведений.СтатусыЗаказов.СоздатьНаборЗаписей();	
		ТекПер = ТекущаяДата();
		НаборСтатусы.Отбор.Период.Установить(ТекПер);
		
		НЗапись = НаборСтатусы.Добавить();
		НЗапись.Заказ = Рез[0].Док;
		
		Если Рез[0].Док.ТерминалПриема = Справочники.РегиональныеТерминалы.СПбСтриж Тогда				
			НЗапись.Статус = РезСтатусСтриж.СтатусСтрижОбратныйПоток_Код;		
		Иначе
			НЗапись.Статус = РезСтатусСтриж.СтатусСтриж_Код;				
		КонецЕсли;
		
		//НЗапись.Статус = РезСтатусСтриж.СтатусСтриж_Код;
		НЗапись.Период = ТекПер;
		//НЗапись.ДокументРегистратор = ;
		НЗапись.СтатусAxiomus = СтатусАкси;	
		НЗапись.Терминал = Справочники.РегиональныеТерминалы.СПбСтриж;
				
		Попытка
			НаборСтатусы.Записать();
		Исключение
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;	
	
		// Обновляем статусы в админке
		Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();		   	
		СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(СокрЛП(Рез[0].Док.Номер), "ЧГ=") + "," + Строка(РезСтатусСтриж.СтатусСтриж.Код) +",'регламент'";
		Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);	
		
		
		
		// предварительное закрытие
		Если ПредварительноеЗакрытие И ЗначениеЗаполнено(РезСтатусСтриж.СтатусСтрижФинальный) Тогда	
			mas.СоздатьПредварительноеЗакрытиеЗаказа(Рез[0].Док, РезСтатусСтриж.СтатусСтрижФинальный);		
		КонецЕсли;
		
		
		//Создать_ВводДанныхОСостоянииЗаказа();
		Если ЗначениеЗаполнено(РезСтатусСтриж.РезультатДоставки) Тогда
			
			ДокВвод = Документы.ВводДанныхОСостоянииЗаказа.СоздатьДокумент();
			ДокВвод.СформированАвтоматически = Истина;
			ДокВвод.Заказ = Рез[0].Док;
			ДокВвод.Дата = ТекВр;
			ДокВвод.ФормироватьДвиженияПоСостояниюЗаказов = Истина;
			ДокВвод.РезультатДоставки = РезСтатусСтриж.РезультатДоставки;
			ДокВвод.ПричинаНевыполнения = РезСтатусСтриж.ПричинаНеВыполненияДоставки;
			
			// ввод данных о типе оплаты	
			СтарыйТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(Рез[0].Док.ТипОплаты);
			Если ЗначениеЗаполнено(НовыйТипОплаты) И НовыйТипОплаты <> СтарыйТипОплаты 
				И (НовыйТипОплаты = Справочники.ТипыОплат.Наличные ИЛИ НовыйТипОплаты = Справочники.ТипыОплат.Терминал) 
				И (СтарыйТипОплаты = Справочники.ТипыОплат.Наличные ИЛИ СтарыйТипОплаты = Справочники.ТипыОплат.Терминал) Тогда
				ДокВвод.ТипОплатыДо = СтарыйТипОплаты;
				ДокВвод.ТипОплатыПосле = НовыйТипОплаты;
			КонецЕсли;
			
			ЗапросР = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	РейсЗаказы.Ссылка КАК Ссылка,
			                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки,
			                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Транспорт КАК Транспорт,
			                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Водитель КАК Водитель,
			                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Экспедитор КАК Экспедитор
			                      |ИЗ
			                      |	Документ.Рейс.Заказы КАК РейсЗаказы
			                      |ГДЕ
			                      |	РейсЗаказы.УдаленИзРейса = ЛОЖЬ
			                      |	И РейсЗаказы.Заказ = &Заказ
			                      |	И РейсЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РейсЗаказы.Ссылка.Дата УБЫВ");
			ЗапросР.УстановитьПараметр("Заказ", Рез[0].Док);
			РезР = ЗапросР.Выполнить().Выбрать();
			Если РезР.Следующий() Тогда			
				ДокВвод.Рейс = РезР.Ссылка;
				ДокВвод.Транспорт  = РезР.Транспорт;
				ДокВвод.Водитель   = РезР.Водитель;
				ДокВвод.Экспедитор = РезР.Экспедитор;		
			КонецЕсли;
				
			Попытка		
				ДокВвод.Записать(РежимЗаписиДокумента.Запись);
				ДокВвод.Записать(РежимЗаписиДокумента.Проведение);	
			Исключение
			КонецПопытки;
			
			// отправка Типа оплаты в Админку
			Если ЗначениеЗаполнено(НовыйТипОплаты) Тогда
				Попытка				
					Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();	
					ТекстЗапроса = "EXEC import_setOrderPayType " + СокрЛП(Рез[0].Док.Номер) + ", " + Формат(НовыйТипОплаты.Код, "ЧГ=");
					Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);
					
					// запись реализации
					Д = Рез[0].Док.ПолучитьОбъект();
					Д.ТипОплаты = НовыйТипОплаты.Код;
					Д.Записать(РежимЗаписиДокумента.Запись);			
				Исключение
				КонецПопытки;
			КонецЕсли;
			may.ВнестиИзмененияОтАкси(Рез[0].Док, РезСтатусСтриж.РезультатДоставки, РезСтатусСтриж.ПричинаНеВыполненияДоставки);
		КонецЕсли;
		
	Иначе
		#Если Клиент Тогда
			//Сообщить("Не найдено соответствие статуса Стриж для статуса Аксиомус: " + Стр.Статус);
		#КонецЕсли		
	КонецЕсли;
	
	
	responseSetStatus.errors = errors;
	Возврат responseSetStatus;
	
КонецФункции

Функция GetOrderForms(okeys)
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ДополнительныеПараметрыЗаказа.Заказ
	            |ИЗ
	            |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |ГДЕ
	            |	ДополнительныеПараметрыЗаказа.okey В(&Мас)";
				
	Мас = Новый Массив;
	
	Для Каждого Тек Из okeys.okey Цикл
		Мас.Добавить(Тек);
	КонецЦикла;
	
	Зап.УстановитьПараметр("Мас", Мас);
	Рез = Зап.Выполнить().Выгрузить();
		
	responseGetOrderFormsТип = ФабрикаXDTO.Тип("http://strizh.delivery","responseGetOrderForms");
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	
	
	Обр = Обработки.ПечатьБланковЗаказовНовый.Создать();
	Для Каждого Тек Из Рез Цикл
		Нов = Обр.Заказы.Добавить();
		Нов.Заказ = Тек.Заказ;
	КонецЦикла;	
	
	Таб = Новый ТабличныйДокумент;
	
	Обр.ПечатьПоТЧ(Таб);
	
	ИмяФ = ПолучитьИмяВременногоФайла("pdf");
	
	Таб.Записать(ИмяФ, ТипФайлаТабличногоДокумента.PDF);
	Ф = Новый ДвоичныеДанные(ИмяФ);
	Строка64 = Base64Строка(Ф);
	
	responseGetOrderForms = ФабрикаXDTO.Создать(responseGetOrderFormsТип);
	Errors = ФабрикаXDTO.Создать(ErrorsТип);
	
	responseGetOrderForms.OrderForm = Строка64;
	responseGetOrderForms.errors = Errors;
	
	Возврат responseGetOrderForms;
КонецФункции

Функция loadCashReport(request) 
	
	
	// проверки типов данных !!!
	
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	Errors = ФабрикаXDTO.Создать(ErrorsТип);	
	
	responseLoadCashReport_Тип = ФабрикаXDTO.Тип("http://strizh.delivery","responseLoadCashReport");
	responseLoadCashReport = ФабрикаXDTO.Создать(responseLoadCashReport_Тип);
	
	
	// Ищем документ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПриходДСПоОтчетуВодителя.Ссылка
	                      |ИЗ
	                      |	Документ.ПриходДСПоОтчетуВодителя КАК ПриходДСПоОтчетуВодителя
	                      |ГДЕ
	                      |	ПриходДСПоОтчетуВодителя.Дата МЕЖДУ &Дата1 И &Дата2
	                      |	И ПриходДСПоОтчетуВодителя.axi_id = &axi_id
	                      |	И ПриходДСПоОтчетуВодителя.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Дата1", НачалоДня(request.date));
	Запрос.УстановитьПараметр("Дата2", КонецДня(request.date));
	Попытка
		Курьер_id = Число(request.courier_id);
	Исключение
	    Errors.error.Добавить("Ошибка преобразования courier_id в число. Документ не создан");	
		responseLoadCashReport.idDoc  = request.idDoc;
		responseLoadCashReport.errors = errors;	
		Возврат responseLoadCashReport;
	КонецПопытки;	
	Запрос.УстановитьПараметр("axi_id", Курьер_id);
	

	Рез = Запрос.Выполнить().Выбрать();					  
	Если Рез.Следующий() Тогда
		ДокСсылка = Рез.Ссылка;
		Док = ДокСсылка.ПолучитьОбъект();
		Док.Доставки.Очистить();
		Док.Товары.Очистить();
	Иначе // если не находим - создаем		
		Док = Документы.ПриходДСПоОтчетуВодителя.СоздатьДокумент();	
		Док.axi_НомерДокумента = request.idDoc;
		Док.Дата = request.date;	
		Док.axi_id = request.courier_id;
		Док.axi_Загрузка = Истина;	
	КонецЕсли;	
	
	
	// заполняем ТЧ Доставки
	Если ТипЗнч(request.orders.orderState) = Тип("СписокXDTO") Тогда  // ----------------- ЕСЛИ СПИСОК
		Для каждого order Из request.orders.orderState Цикл  
			ЗапросЗаказ = Новый Запрос("ВЫБРАТЬ
			                           |	ДополнительныеПараметрыЗаказа.Заказ
			                           |ИЗ
			                           |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
			                           |ГДЕ
			                           |	ДополнительныеПараметрыЗаказа.okey = &okey");
			ЗапросЗаказ.УстановитьПараметр("okey", order.okey);						   
			РезЗаказ = ЗапросЗаказ.Выполнить().Выбрать();
			
			Если РезЗаказ.Следующий() Тогда
				Заказ = РезЗаказ.Заказ;
			Иначе
				Errors.error.Добавить("Не найден заказ по значению okey ("+ order.okey +")");
				Продолжить;		
			КонецЕсли;					
						
			НДоставка = Док.Доставки.Добавить();
			НДоставка.Доставка = Заказ;
			НДоставка.Сумма = order.cash;
			НДоставка.Расстояние = order.distanceFromKAD;
			
			СтатусЭлемент = Справочники.СтатусыAxiomus.НайтиПоКоду(Число(order.state));		
			Если ЗначениеЗаполнено(СтатусЭлемент) Тогда
				Результат = mas.axi_ПолучитьРезультатДоставкиПоСтатусу(СтатусЭлемент);
				Если Результат <> Неопределено Тогда
					НДоставка.РезультатДоставки = Результат;	
				Иначе	
					Errors.error.Добавить("Не найдено соответствие статусу ("+ СтатусЭлемент.Наименование +")!");
				КонецЕсли;
			Иначе
				Errors.error.Добавить("Статус не найден ("+ order.state +")!");		
			КонецЕсли;
			
			//rejectionReason     - пока никуда не пишется
			
			
			// заполняем ТЧ Товары по доставке
			Если ТипЗнч(order.transferredGoods.goodItem) = Тип("СписокXDTO") Тогда  // ----------------- ЕСЛИ СПИСОК
				Для каждого good Из order.transferredGoods.goodItem Цикл						
					ЗаполнитьСтрокуТовары(good, Док.Товары, Заказ, Errors);					
				КонецЦикла;
			Иначе			
				good = order.transferredGoods.goodItem;		
				ЗаполнитьСтрокуТовары(good, Док.Товары, Заказ, Errors);						
			КонецЕсли;				
		КонецЦикла;
		
	Иначе  // ----------------- ЕСЛИ НЕ СПИСОК
				
		order = request.orders.orderState;
		ЗаписьОкей = РегистрыСведений.ДополнительныеПараметрыЗаказа.Выбрать(,, Новый Структура("okey", order.okey));
		
		Если ЗначениеЗаполнено(ЗаписьОкей) Тогда
			Заказ = ЗаписьОкей.Заказ;	
		Иначе
			Errors.error.Добавить("Не найден заказ по значению okey ("+ order.okey +")");
		КонецЕсли;	
		НДоставка = Док.Доставки.Добавить();
		НДоставка.Доставка = Заказ;
		НДоставка.Сумма = order.cash;
		НДоставка.Расстояние = order.distanceFromKAD;
		
		СтатусЭлемент = Справочники.СтатусыAxiomus.НайтиПоКоду(Число(order.state));		 // число
		Если ЗначениеЗаполнено(СтатусЭлемент) Тогда
			Результат = mas.axi_ПолучитьРезультатДоставкиПоСтатусу(СтатусЭлемент);
			Если Результат <> Неопределено Тогда
				НДоставка.РезультатДоставки = Результат;	
			Иначе	
				Errors.error.Добавить("Не найдено соответствие статусу ("+ СтатусЭлемент.Наименование +")!");
			КонецЕсли;
		Иначе
			Errors.error.Добавить("Статус не найден ("+ order.state +")!");		
		КонецЕсли;
		
		//rejectionReason     - пока никуда не пишется
		
		
		// заполняем ТЧ Товары по доставке
		Если ТипЗнч(order.transferredGoods.goodItem) = Тип("СписокXDTO") Тогда  // ----------------- ЕСЛИ СПИСОК
			Для каждого good Из order.transferredGoods.goodItem Цикл				
				ЗаполнитьСтрокуТовары(good, Док.Товары, Заказ, Errors);			
			КонецЦикла;
		Иначе			
			good = order.transferredGoods.goodItem;		
			ЗаполнитьСтрокуТовары(good, Док.Товары, Заказ, Errors);						
		КонецЕсли;		
	КонецЕсли;
	
	// пробуем записать
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Errors.error.Добавить("Не удалось создать документ"); 
		//Errors.error.Добавить("Не удалось создать документ: " + ОписаниеОшибки());
	КонецПопытки;
	
	
	responseLoadCashReport.idDoc  = request.idDoc;
	responseLoadCashReport.errors = errors;	
	
	Возврат responseLoadCashReport;
	
КонецФункции


Процедура ЗаполнитьСтрокуТовары(good, ТЧ, Заказ, Errors)

	РодительТовар = Справочники.Номенклатура.НайтиПоКоду("00000000002");
	ВладелецТовара = Заказ.ВладелецТовара; 
	МагазинРодитель = Справочники.Номенклатура.НайтиПоКоду(ВладелецТовара.Код,, РодительТовар);  	
	 
	Товар = Справочники.Номенклатура.НайтиПоКоду(good.articul,, МагазинРодитель);   
	Если ЗначениеЗаполнено(Товар) Тогда
		НТовар = ТЧ.Добавить();
		НТовар.Доставка = Заказ; 				
		НТовар.Номенклатура = Товар;
		НТовар.Количество = good.count;
		НТовар.Сумма = good.summa;	
	Иначе
		Errors.error.Добавить("Не найден товар по артиклю ("+ good.articul +")!");
	КонецЕсли;

КонецПроцедуры


Функция LoadReturnList(ReturnList, Order)
	
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	Errors = ФабрикаXDTO.Создать(ErrorsТип);	
	
	responseLoadReturnList_Тип = ФабрикаXDTO.Тип("http://strizh.delivery","responseLoadReturnList");
	responseLoadReturnList = ФабрикаXDTO.Создать(responseLoadReturnList_Тип);
	
	// ищем забор по номеру
	Попытка	
		НомерЗабора = Число(сокрЛП(Order));	
	Исключение
	    Errors.error.Добавить("Ошибка преобразования Order в число. Операция не выполнена");
		responseLoadReturnList.errors = errors;	
		Возврат responseLoadReturnList;
	КонецПопытки;
	
	ЗаборТовара = Документы.ЗаборТовара.НайтиПоНомеру(Order);	
	Если ЗначениеЗаполнено(ЗаборТовара) Тогда

		ДокОбъект = ЗаборТовара.ПолучитьОбъект();
		ДокОбъект.Возвраты.Очистить();
		
		// записываем данные в ТЧ Возвраты
		Если ТипЗнч(ReturnList.returnOrder) = Тип("СписокXDTO") Тогда  // ----------------- ЕСЛИ СПИСОК
			Для каждого ROrder Из ReturnList.returnOrder Цикл
				
				НСтр = ДокОбъект.Возвраты.Добавить();
				НСтр.НомерЗаказа = ROrder.order;
				НСтр.КоличествоМест = ROrder.count;
				
			КонецЦикла;
		Иначе	
			ROrder = ReturnList.returnOrder;
			НСтр = ДокОбъект.Возвраты.Добавить();
			НСтр.НомерЗаказа = ROrder.order;
			НСтр.КоличествоМест = ROrder.count;
		КонецЕсли;	
		
	Иначе
		Errors.error.Добавить("Не найден док. Забор Товара с номером " + Order + ".");	
		responseLoadReturnList.errors = errors;	
		Возврат responseLoadReturnList;
	КонецЕсли;
	
	Попытка	
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Errors.error.Добавить("Не удалось записать таблицу возвратных заказов");	
		responseLoadReturnList.errors = errors;	
		Возврат responseLoadReturnList;	
	КонецПопытки;	
	
	
	responseLoadReturnList.errors = errors;	
	
	Возврат responseLoadReturnList;
	
КонецФункции


Функция SetStatusTransferDate(okey, status, exe_date)	
	//отключение Акси
	responseSetStatusТип = ФабрикаXDTO.Тип("http://strizh.delivery","responseSetStatus");
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	
	responseSetStatus = ФабрикаXDTO.Создать(responseSetStatusТип);
	Errors = ФабрикаXDTO.Создать(ErrorsТип);
	errors.error.Добавить("Сервис неактулен!");
	responseSetStatus.errors = errors;
	Возврат responseSetStatus;
	///
	
	ДатаПереноса = Неопределено;
		
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РеализацияТоваровУслуг.Ссылка КАК Док,
	            |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа,
	            |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	            |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ПредварительноеЗакрытие, ЛОЖЬ) КАК ПредварительноеЗакрытие
	            |ИЗ
	            |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО ДополнительныеПараметрыЗаказа.Заказ = РеализацияТоваровУслуг.Ссылка
	            |ГДЕ
	            |	ДополнительныеПараметрыЗаказа.okey = &okey";
	Зап.УстановитьПараметр("okey", okey);
	
	responseSetStatusТип = ФабрикаXDTO.Тип("http://strizh.delivery","responseSetStatus");
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	
	Рез = Зап.Выполнить().Выгрузить();
	responseSetStatus = ФабрикаXDTO.Создать(responseSetStatusТип);
	Errors = ФабрикаXDTO.Создать(ErrorsТип);
	Если Рез.Количество() = 0 Тогда
		errors.error.Добавить("Не найден okey!");
		responseSetStatus.errors = errors;
		Возврат responseSetStatus;
	КонецеСли;	
	
	РеализацияСсылка = Рез[0].Док.Ссылка;	
	ПредварительноеЗакрытие = Рез[0].ПредварительноеЗакрытие;
	
	// обработаем перенос
	Если status = 6 Тогда
		
		Попытка
			ДатаПереноса = Дата(exe_date);
		Исключение
		    errors.error.Добавить("При переносе должна быть указана корректная дата переноса exe_date");
			responseSetStatus.errors = errors;
			Возврат responseSetStatus;
		КонецПопытки;
			
		Если НачалоДня(РеализацияСсылка.Дата) <> НачалоДня(ДатаПереноса) Тогда
			
			ДокПереносДаты = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
		    ДокПереносДаты.axi = Истина;
			ДокПереносДаты.Дата = ТекущаяДата();
			ДокПереносДаты.ДатаДоставки = ДатаПереноса;
			ДокПереносДаты.КорректироватьДатуВАдминке = Истина;
			ДокПереносДаты.Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(РеализацияСсылка.Номер));
			ДокПереносДаты.Заказ = РеализацияСсылка.Ссылка;
			ДокПереносДаты.ПричинаИзмененияДаты = Перечисления.ПричиныИзмененияДатыДоставки.ВыгрузкаИзСистемыАксиомус;
			
			Попытка				
				ДокПереносДаты.Записать(РежимЗаписиДокумента.Запись);
				ДокПереносДаты.Записать(РежимЗаписиДокумента.Проведение);		
			Исключение
				#Если Клиент Тогда
					Сообщить("Не удалось создать перенос даты доставки (Аксиомус) по причине: " + ОписаниеОшибки());
				#КонецЕсли
				errors.error.Добавить("Не удалось создать перенос даты доставки (Аксиомус) по причине: " + ОписаниеОшибки());
			КонецПопытки;					
		КонецЕсли;	
	КонецЕсли;
	
	
	Если status = 40 Или status = 2 Или status = 30 Тогда
		Док = Документы.ЗагрузкаСТСД.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.ДатаДокумента = ТекущаяДата();
		Док.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.Аксиомус;
		Док.ТерминалПриема = Справочники.РегиональныеТерминалы.СПбСтриж;
		Нов = Док.Штрихкоды.Добавить();
		Нов.ВнешнийНомерЗаказа = Рез[0].НомерВнешнегоЗаказа;
		Нов.Заказ = Рез[0].Док;
		Нов.Контрагент = Рез[0].Контрагент;
		
		Док.Записать(РежимЗаписиДокумента.Запись);
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецеСли;
	
	
	НовыйТипОплаты = Неопределено;
	Попытка
		резСтатусЗаказа = smv.ЗапросТекущегоСтатусаЗаказа(okey, "63df707cfb53dbc4e38f9eb77150cee6");	
		Если Число(резСтатусЗаказа.ТипОплаты) = 1 ИЛИ Число(резСтатусЗаказа.ТипОплаты) = 2 Тогда
			НовыйТипОплаты = Справочники.ТипыОплат.Наличные;
		ИначеЕсли Число(резСтатусЗаказа.ТипОплаты) = 3 Тогда
			НовыйТипОплаты = Справочники.ТипыОплат.Терминал;	
		КонецЕсли;				
	Исключение	
	КонецПопытки;
	
	
	СтатусАкси = Справочники.СтатусыAxiomus.НайтиПоКоду(status);
	
	
	// ДоставкаЗавершена = Истина  - 26.07.2016
	Если СтатусАкси = Справочники.СтатусыAxiomus.Выполнен ИЛИ СтатусАкси = Справочники.СтатусыAxiomus.Вручен ИЛИ СтатусАкси = Справочники.СтатусыAxiomus.Исполнен Тогда		
		Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Рез[0].Док.Номер));
		Если ЗначениеЗаполнено(Доставка) И НЕ Доставка.ДоставкаЗавершена Тогда
			ДоставкаОбъект = Доставка.ПолучитьОбъект();
			ДоставкаОбъект.ДоставкаЗавершена = Истина;
			Попытка
				ДоставкаОбъект.Записать();
			Исключение
			КонецПопытки;		
		Иначе				
		КонецЕсли;					
	КонецЕсли;
	
	
	Наб = РегистрыСведений.СтатусыЗаказовAxiomus.СоздатьНаборЗаписей();
	
	ТекВр = ТекущаяДата();
	Наб.отбор.Период.Установить(ТекВр);
	
	Нов = Наб.Добавить();
	Нов.Заказ = Рез[0].Док;
	Нов.push = Истина;
	Нов.Статус = СтатусАкси;
	Нов.Период = ТекВр;
	Если ЗначениеЗаполнено(НовыйТипОплаты) Тогда
		Нов.ТипОплаты = НовыйТипОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПереноса) Тогда	
		Нов.ДатаПереноса = ДатаПереноса;		
	КонецЕсли;
	
	Наб.Записать();

	
	// обновляем статус Стриж
	ЗапросСтатусСтриж = Новый Запрос("ВЫБРАТЬ
	                                 |	ax_СоответствиеСтатусов.СтатусСтриж,
	                                 |	ax_СоответствиеСтатусов.СтатусСтриж.Код КАК СтатусСтриж_Код,
	                                 |	ax_СоответствиеСтатусов.СтатусСтрижОбратныйПоток.Код КАК СтатусСтрижОбратныйПоток_Код,
	                                 |	ax_СоответствиеСтатусов.СтатусСтрижФинальный,
	                                 |	ax_СоответствиеСтатусов.РезультатДоставки,
	                                 |	ax_СоответствиеСтатусов.ПричинаНеВыполненияДоставки
	                                 |ИЗ
	                                 |	РегистрСведений.ax_СоответствиеСтатусов КАК ax_СоответствиеСтатусов
	                                 |ГДЕ
	                                 |	ax_СоответствиеСтатусов.СтатусAxiomus = &СтатусAxiomus");
	ЗапросСтатусСтриж.УстановитьПараметр("СтатусAxiomus", СтатусАкси);
	РезСтатусСтриж = ЗапросСтатусСтриж.Выполнить().Выбрать();
	
	Если РезСтатусСтриж.Следующий() Тогда
		
		НаборСтатусы = РегистрыСведений.СтатусыЗаказов.СоздатьНаборЗаписей();	
		ТекПер = ТекущаяДата();
		НаборСтатусы.Отбор.Период.Установить(ТекПер);
		
		НЗапись = НаборСтатусы.Добавить();
		НЗапись.Заказ = Рез[0].Док;
		
		Если Рез[0].Док.ТерминалПриема = Справочники.РегиональныеТерминалы.СПбСтриж Тогда				
			НЗапись.Статус = РезСтатусСтриж.СтатусСтрижОбратныйПоток_Код;		
		Иначе
			НЗапись.Статус = РезСтатусСтриж.СтатусСтриж_Код;				
		КонецЕсли;
		
		
		//НЗапись.Статус = РезСтатусСтриж.СтатусСтриж_Код;
		НЗапись.Период = ТекПер;
		НЗапись.Терминал = Справочники.РегиональныеТерминалы.СПбСтриж;
		//НЗапись.ДокументРегистратор = ;
		НЗапись.СтатусAxiomus = СтатусАкси;	
				
		Попытка
			НаборСтатусы.Записать();
		Исключение
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;	
	
		// Обновляем статусы в админке
		Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();		   	
		СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(СокрЛП(Рез[0].Док.Номер), "ЧГ=") + "," + Строка(РезСтатусСтриж.СтатусСтриж.Код) +",'регламент'";
		Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);	
		
		
		Если ПредварительноеЗакрытие И ЗначениеЗаполнено(РезСтатусСтриж.СтатусСтрижФинальный) Тогда	
			mas.СоздатьПредварительноеЗакрытиеЗаказа(Рез[0].Док, РезСтатусСтриж.СтатусСтрижФинальный)		
		КонецЕсли;
				
		
		
		//Создать_ВводДанныхОСостоянииЗаказа();
		Если ЗначениеЗаполнено(РезСтатусСтриж.РезультатДоставки) Тогда

			ДокВвод = Документы.ВводДанныхОСостоянииЗаказа.СоздатьДокумент();
			ДокВвод.СформированАвтоматически = Истина;
			ДокВвод.Заказ = Рез[0].Док;
			ДокВвод.Дата = ТекВр;
			ДокВвод.ДатаПереноса = ДатаПереноса;
			ДокВвод.ФормироватьДвиженияПоСостояниюЗаказов = Истина;
			ДокВвод.РезультатДоставки = РезСтатусСтриж.РезультатДоставки;
			ДокВвод.ПричинаНевыполнения = РезСтатусСтриж.ПричинаНеВыполненияДоставки;
			
			
			// ввод данных о типе оплаты	
			СтарыйТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(Рез[0].Док.ТипОплаты);
			Если ЗначениеЗаполнено(НовыйТипОплаты) И НовыйТипОплаты <> СтарыйТипОплаты 
				И (НовыйТипОплаты = Справочники.ТипыОплат.Наличные ИЛИ НовыйТипОплаты = Справочники.ТипыОплат.Терминал) 
				И (СтарыйТипОплаты = Справочники.ТипыОплат.Наличные ИЛИ СтарыйТипОплаты = Справочники.ТипыОплат.Терминал) Тогда
				ДокВвод.ТипОплатыДо = СтарыйТипОплаты;
				ДокВвод.ТипОплатыПосле = НовыйТипОплаты;
			КонецЕсли;
					
			ЗапросР = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	РейсЗаказы.Ссылка КАК Ссылка,
			                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки,
			                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Транспорт КАК Транспорт,
			                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Водитель КАК Водитель,
			                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Экспедитор КАК Экспедитор
			                      |ИЗ
			                      |	Документ.Рейс.Заказы КАК РейсЗаказы
			                      |ГДЕ
			                      |	РейсЗаказы.УдаленИзРейса = ЛОЖЬ
			                      |	И РейсЗаказы.Заказ = &Заказ
			                      |	И РейсЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РейсЗаказы.Ссылка.Дата УБЫВ");
			ЗапросР.УстановитьПараметр("Заказ", Рез[0].Док);
			РезР = ЗапросР.Выполнить().Выбрать();
			Если РезР.Следующий() Тогда			
				ДокВвод.Рейс = РезР.Ссылка;
				ДокВвод.Транспорт  = РезР.Транспорт;
				ДокВвод.Водитель   = РезР.Водитель;
				ДокВвод.Экспедитор = РезР.Экспедитор;		
			КонецЕсли;
				
			Попытка		
				ДокВвод.Записать(РежимЗаписиДокумента.Запись);
				ДокВвод.Записать(РежимЗаписиДокумента.Проведение);	
			Исключение
			КонецПопытки;
			
			// отправка Типа оплаты в Админку
			Если ЗначениеЗаполнено(НовыйТипОплаты) Тогда
				Попытка				
					Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();	
					ТекстЗапроса = "EXEC import_setOrderPayType " + СокрЛП(Рез[0].Док.Номер) + ", " + Формат(НовыйТипОплаты.Код, "ЧГ=");
					Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);
					
					// запись реализации
					Д = Рез[0].Док.ПолучитьОбъект();
					Д.ТипОплаты = НовыйТипОплаты.Код;
					Д.Записать(РежимЗаписиДокумента.Запись);			
				Исключение
				КонецПопытки;
				
			КонецЕсли;
		    may.ВнестиИзмененияОтАкси(Рез[0].Док, РезСтатусСтриж.РезультатДоставки, РезСтатусСтриж.ПричинаНеВыполненияДоставки);
		КонецЕсли;
		
	Иначе
		#Если Клиент Тогда
			//Сообщить("Не найдено соответствие статуса Стриж для статуса Аксиомус: " + Стр.Статус);
		#КонецЕсли		
	КонецЕсли;	
	
	
	responseSetStatus.errors = errors;
	Возврат responseSetStatus;	
	
КонецФункции

Функция AddShipment(request)
	// Вставить содержимое обработчика.
	
	responseAddShipmentТип = ФабрикаXDTO.Тип("http://strizh.delivery","responseAddShipment");
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	
	responseAddShipment = ФабрикаXDTO.Создать(responseAddShipmentТип);
	Errors = ФабрикаXDTO.Создать(ErrorsТип);
	
	ЕстьОшибки = Ложь;
	Если Не ЗначениеЗаполнено(request.shipmentNumber) Тогда
		errors.error.Добавить("Не указан номер накладной!");
		ЕстьОшибки = Истина;
	КонецеСли;
	
	Если Не ЗначениеЗаполнено(request.shipmentDate) Тогда
		errors.error.Добавить("Не указана дата накладной!");
		ЕстьОшибки = Истина;
	КонецеСли;
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ВнутреннееПеремещениеЗаказов.Ссылка,
	            |	ВнутреннееПеремещениеЗаказов.Закрыт
	            |ИЗ
	            |	Документ.ВнутреннееПеремещениеЗаказов КАК ВнутреннееПеремещениеЗаказов
	            |ГДЕ
	            |	ВнутреннееПеремещениеЗаказов.axi = ИСТИНА
	            |	И ВнутреннееПеремещениеЗаказов.ВнешнийНомер = &ВнешнийНомер";
	Зап.УстановитьПараметр("ВнешнийНомер", request.shipmentNumber);
	Рез = Зап.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Если Рез.Закрыт Тогда
			errors.error.Добавить("Документ уже закрыт товароведами! Повторная выгрузка невозможна!");
			ЕстьОшибки = Истина;
		КонецеСли;	
		Док = Рез.Ссылка.ПолучитьОбъект();
		Док.заказы.Очистить();
	Иначе
		Док = Документы.ВнутреннееПеремещениеЗаказов.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.ВнешнийНомер = request.shipmentNumber;
		Док.ДатаНакладной = request.shipmentDate;
		Док.axi = Истина;
	КонецеСли;	
	
	Док.ТерминалОтправки = Справочники.РегиональныеТерминалы.СПбСтриж;
	Док.ТерминалПолучения = Справочники.РегиональныеТерминалы.МоскваСтриж;
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("okey", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	Таб.Колонки.Добавить("piecesOfFreight", Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,0)));
	
	Для Каждого Тек Из request.rows.rowShipment Цикл
		Нов = Таб.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
	КонецЦикла;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Таб.okey,
	            |	Таб.piecesOfFreight
	            |ПОМЕСТИТЬ втТаб
	            |ИЗ
	            |	&Таб КАК Таб
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	втТаб.okey,
	            |	втТаб.piecesOfFreight КАК КоличествоМест,
	            |	ДополнительныеПараметрыЗаказа.Заказ,
	            |	ИСТИНА КАК Отправлено
	            |ИЗ
	            |	втТаб КАК втТаб
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |		ПО втТаб.okey = ДополнительныеПараметрыЗаказа.okey";
	Зап.УстановитьПараметр("Таб", Таб);			
	Рез = Зап.Выполнить().Выгрузить();
	
	Для Каждого Тек Из Рез Цикл
		Если Не ЗначениеЗаполнено(Тек.Заказ) Тогда
			errors.error.Добавить("Не найден okey " + Тек.okey);
			ЕстьОшибки = Истина;
		Иначе
			Нов = Док.Заказы.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Тек);
		КонецеСли;	
	КонецЦикла;	
	
	Если Не ЕстьОшибки Тогда
		Док.Записать(РежимЗаписиДокумента.Запись);
		Док.Записать(РежимЗаписиДокумента.Проведение);
		responseAddShipment.shipmentId = Док.Номер;
	Иначе
		responseAddShipment.shipmentId = "";
	КонецеСли;		
	
	
	responseAddShipment.errors = errors;
	Возврат responseAddShipment;
КонецФункции


//CeHbKA 21.01.2018

Функция GetOrderFormsOnDelivery(okeys)
	
	responseGetOrderFormsТип = ФабрикаXDTO.Тип("http://strizh.delivery","responseGetOrderForms");
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	
	ОбработкаПечать = Обработки.ПечатьБланковЗаказовНовый.Создать();
	
	Мас = Новый Массив;
	
	Для Каждого Тек Из okeys.okey Цикл
		Мас.Добавить(Тек);
	КонецЦикла;

	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ДополнительныеПараметрыЗаказа.Заказ КАК Заказ,
	//               |	ЕСТЬNULL(новаМестнаяДоставка.Ссылка, ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка)) КАК Доставка
	//               |ИЗ
	//               |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//               |		ПО ДополнительныеПараметрыЗаказа.Заказ.Номер = новаМестнаяДоставка.Номер
	//               |ГДЕ
	//               |	ДополнительныеПараметрыЗаказа.okey В(&Мас)";
					
	Запрос = Новый Запрос;	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЕСТЬNULL(новаМестнаяДоставка.Ссылка, ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка)) КАК Доставка,
	//               |	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК Заказ,
	//               |	ЕСТЬNULL(ЗаборТовара.Ссылка, 0) КАК Забор
	//               |ИЗ
	//               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//               |		ПО (новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер)
	//               |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	//               |		ПО РеализацияТоваровУслуг.Номер = ЗаборТовара.Номер
	//               |ГДЕ
	//               |	РеализацияТоваровУслуг.Номер В(&Мас)";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Заказ
	               |ПОМЕСТИТЬ ВТ_Реализации
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Номер В(&Мас)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	новаМестнаяДоставка.Ссылка КАК Доставка
	               |ПОМЕСТИТЬ ВТ_Доставки
	               |ИЗ
	               |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	               |ГДЕ
	               |	новаМестнаяДоставка.Номер В(&Мас)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаборТовара.Ссылка КАК Забор
	               |ПОМЕСТИТЬ ВТ_ЗаборТовара
	               |ИЗ
	               |	Документ.ЗаборТовара КАК ЗаборТовара
	               |ГДЕ
	               |	ЗаборТовара.Номер В(&Мас)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_Реализации.Заказ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК Заказ,
	               |	ЕСТЬNULL(ВТ_Доставки.Доставка, ЗНАЧЕНИЕ(БизнесПроцесс.новаМестнаяДоставка.ПустаяСсылка)) КАК Доставка,
	               |	ЕСТЬNULL(ВТ_ЗаборТовара.Забор, ЗНАЧЕНИЕ(Документ.ЗаборТовара.ПустаяСсылка)) КАК Забор
	               |ИЗ
	               |	ВТ_Реализации КАК ВТ_Реализации
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Доставки КАК ВТ_Доставки
	               |		ПО ВТ_Реализации.Заказ.Номер = ВТ_Доставки.Доставка.Номер
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЗаборТовара КАК ВТ_ЗаборТовара
	               |		ПО ВТ_Реализации.Заказ.Номер = ВТ_ЗаборТовара.Забор.Номер";
	
	Запрос.УстановитьПараметр("Мас", Мас);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	БольшойТабДок = Новый ТабличныйДокумент;
		
	Пока Выборка.Следующий() Цикл
		
		ТабДок = Новый ТабличныйДокумент;
		
		Если НЕ Выборка.Доставка.Пустая() Тогда
			ОбработкаПечать.ПечатьПоДоставке2(Выборка.Доставка, ТабДок);
		ИначеЕсли НЕ Выборка.Заказ.Пустая() Тогда
			ОбработкаПечать.ПечатьПоДоставке2(Выборка.Заказ, ТабДок, Истина);				
		ИначеЕсли НЕ Выборка.Забор.Пустая() Тогда
			ОбработкаПечать.ПечатьЗабор(Выборка.Забор, ТабДок);	
		КонецЕсли; 		
		
		БольшойТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		
		БольшойТабДок.Вывести(ТабДок);
		
	КонецЦикла; 
	
	БольшойТабДок.АвтоМасштаб = Истина;
	
	БольшойТабДок.ПолеСлева = 3;
	БольшойТабДок.ПолеСправа = 3;
	БольшойТабДок.ПолеСверху = 3;
	БольшойТабДок.ПолеСнизу = 3;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	
	БольшойТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	ФайлPFD = Новый ДвоичныеДанные(ИмяФайла);
	Строка64 = Base64Строка(ФайлPFD);
	
	responseGetOrderForms = ФабрикаXDTO.Создать(responseGetOrderFormsТип);
	Errors = ФабрикаXDTO.Создать(ErrorsТип);
	
	responseGetOrderForms.OrderForm = Строка64;
	responseGetOrderForms.errors = Errors;
	
	Возврат responseGetOrderForms;
	
КонецФункции

Функция getReport(parameters, typeReport)
	
	startDate = Неопределено;
	endDate = Неопределено;
	shopId = Неопределено;
	
	ErrorsТип = ФабрикаXDTO.Тип("http://strizh.delivery","errors");
	Errors = ФабрикаXDTO.Создать(ErrorsТип);
	
	responseGetReport_Тип = ФабрикаXDTO.Тип("http://strizh.delivery","responseGetReport");
	responseGetReport = ФабрикаXDTO.Создать(responseGetReport_Тип);
	responseGetReport.report = "";
	responseGetReport.errors = Errors;

	Попытка
		
		Для Каждого param Из parameters.parameters Цикл
			
			Если  param.name = "startDate" Тогда
				startDate = param.value;
			ИначеЕсли	param.name = "endDate" Тогда
				endDate = param.value;
			ИначеЕсли	param.name = "shopId" Тогда
				shopId = param.value;
			КонецЕсли;
			
		КонецЦикла;	
		
		
		ДатаНачала = Дата(СтрЗаменить(Строка(startDate), Символы.НПП, ""));
		ДатаОкончания = Дата(СтрЗаменить(Строка(endDate), Символы.НПП, ""));
		
		КодИнтернетМагазина = "Shop_" + СтрЗаменить(Строка(shopId), Символы.НПП, "");
		ИнтернетМагазин = Справочники.Контрагенты.НайтиПоКоду(КодИнтернетМагазина);
		
		Если ИнтернетМагазин.Пустая() Тогда
			
			Errors.error.Добавить("Контрагент с кодом " + Строка(shopId) +  " не найден");
			responseGetReport.errors = Errors;
			
			Возврат responseGetReport;
			
		Конецесли;
		
		РезультатОтчета = Неопределено;
		
		ВидОтчета = Неопределено;
		Если typeReport = "ОтчетАгентаУниверсальный" Тогда
			ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетАгентаУниверсальный;
			ОтчетОбъект = Отчеты.ОтчетАгентаУниверсальный.Создать();
			РезультатОтчета = ОтчетОбъект.ПолучитьВыводОтчета(ДатаНачала, ДатаОкончания, ИнтернетМагазин);
		КонецЕсли;	
				
		Если Не РезультатОтчета = Неопределено тогда
			
			Если  РезультатОтчета.ВысотаТаблицы = 0 Тогда
				
				Errors.error.Добавить("Нет данных " + Строка(shopId) +  " за указанный период");
				responseGetReport.errors = Errors;
				
				Возврат responseGetReport;
				
			КонецЕсли;	
			
			ПериодФормирования = ТекущаяДата();
			
			ГУИДОтчета = Новый УникальныйИдентификатор;
			ПутьКФайлуОтчета = КаталогВременныхФайлов() +  "\" + Формат(ПериодФормирования, "ДФ=yyyy-MM-dd") + "_" + СокрЛП(typeReport) + "_" +Строка(ГУИДОтчета) + ".xls";
			
			РезультатОтчета.Записать(ПутьКФайлуОтчета, ТипФайлаТабличногоДокумента.XLS);
			ФайлОтчета  = Новый ДвоичныеДанные(ПутьКФайлуОтчета);
			
			//ХранилищеОтчета = новый ХранилищеЗначения(ФайлОтчета, Новый СжатиеДанных(9));
			
			responseGetReport.report = Base64Строка(ФайлОтчета);
			
			ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамWEBСервис);
			
			//Геннадий #4415 19.01.2021 ->
			НастройкаОтправки = Справочники.НастройкиАвтоматическойОтправкиОтчетов.НайтиПоКоду("00000000037");//Отчет агента универсальный
			ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
			//Геннадий 19.01.2021 <-

			ПараметрыЗаписи.Контрагент = ИнтернетМагазин;
			ПараметрыЗаписи.ПериодФормирования = ПериодФормирования;
			ПараметрыЗаписи.ВидОтчета = ВидОтчета;
			
			ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = ФайлОтчета;
			ПараметрыЗаписи.GUID = ГУИДОтчета;
			ПараметрыЗаписи.СписокПолучателей = "adminka";	
			ПараметрыЗаписи.ОтчетОтправлен = Истина;
						
			РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
		
			//НаборЗаписейРСОтчетыКОтправке = РегистрыСведений.ОтчетыКОтправке.СоздатьНаборЗаписей();
			//НаборЗаписейРСОтчетыКОтправке.Отбор.Контрагент.Установить(ИнтернетМагазин);
			//НаборЗаписейРСОтчетыКОтправке.Отбор.ПериодФормирования.Установить(ПериодФормирования);
			//НаборЗаписейРСОтчетыКОтправке.Отбор.ВидОтчета.Установить(ВидОтчета);
			//ЗаписьРСОтчетыКОтправке = НаборЗаписейРСОтчетыКОтправке.Добавить();
			//ЗаписьРСОтчетыКОтправке.Контрагент = ИнтернетМагазин;
			//ЗаписьРСОтчетыКОтправке.ПериодФормирования = ПериодФормирования;
			//ЗаписьРСОтчетыКОтправке.ВидОтчета = ВидОтчета;
			//ЗаписьРСОтчетыКОтправке.GUID = ГУИДОтчета;
			//ЗаписьРСОтчетыКОтправке.ВыгрузкаXML = ХранилищеОтчета;
			//ЗаписьРСОтчетыКОтправке.ОтчетОтправлен = Истина;
			//ЗаписьРСОтчетыКОтправке.СписокПолучателей = "adminka";
			//НаборЗаписейРСОтчетыКОтправке.Записать();
			
		Иначе
			
			Errors.error.Добавить("Отчет не сформирован");
			responseGetReport.errors = Errors;
						
		КонецЕсли;
		
	Исключение
		
		Errors.error.Добавить("Ошибка получения отчета: " + ОписаниеОшибки());
		responseGetReport.errors = Errors;
			
	КонецПопытки;
	
	Возврат  responseGetReport;
	
КонецФункции
//CeHbKA 21.01.2018

Функция createExternalRoute(externalRoute)
	
	//Асеев 01.04.2021 (Задача № 4519)>>>
	Возврат ВнешняяМаршрутизацияСервер.createExternalRoute(externalRoute);
	//Асеев 01.04.2021 (Задача № 4519)<<<
	
КонецФункции

Функция setCrewForExternalRoute(crewExternalRoute)
	
	//Асеев 06.04.2021 (Задача № 4523)>>>
	Возврат ВнешняяМаршрутизацияСервер.setCrewForExternalRoute(crewExternalRoute);
	//Асеев 06.04.2021 (Задача № 4523)<<<
	
КонецФункции

Функция setOrdersStatusExternalRoute(ordersStatus)
	
	//Асеев 07.04.2021 (Задача № 4529)>>>
	Возврат ВнешняяМаршрутизацияСервер.setOrdersStatusExternalRoute(ordersStatus);
	//Асеев 07.04.2021 (Задача № 4529)<<<
	
КонецФункции



