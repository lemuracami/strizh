// строка соединения в внешним источником данных DRIVER={SQL Server};SERVER=192.168.5.141;UID=front_data_user;PWD=L8`R6Lng4Xnj]Zd-;DATABASE=Logging1C;LANGUAGE=русский

Процедура ИнициализироватьВнешниеИсточникиДанных() Экспорт // Задача № 3411
	
	Попытка
		
		СтрокаСоединения = СокРЛП(Константы.СтрокаПодключенияБДЛогирования.Получить());
		СоставСтроки = СтрРазделить(СтрокаСоединения, ";");
		ИмяПользователя = СтрЗаменить(СоставСтроки[2],"UID=","");
		Пароль = СтрЗаменить(СоставСтроки[3],"PWD=","");
		
		ПараметрыИнициализации = ВнешниеИсточникиДанных.ВнешнийЛог.ПолучитьОбщиеПараметрыСоединения();
		ПараметрыИнициализации.АутентификацияСтандартная = Истина;
		ПараметрыИнициализации.ИмяПользователя = ИмяПользователя;
		ПараметрыИнициализации.Пароль = Пароль; 
		ПараметрыИнициализации.СтрокаСоединения = СтрокаСоединения;
		ПараметрыИнициализации.СУБД = "MSSQLServer";
		
		ВнешниеИсточникиДанных.ВнешнийЛог.УстановитьОбщиеПараметрыСоединения(ПараметрыИнициализации);
		ВнешниеИсточникиДанных.ВнешнийЛог.УстановитьПараметрыСоединенияПользователя(ИмяПользователя(), ПараметрыИнициализации);
		ВнешниеИсточникиДанных.ВнешнийЛог.УстановитьПараметрыСоединенияСеанса(ПараметрыИнициализации);
		ВнешниеИсточникиДанных.ВнешнийЛог.УстановитьСоединение();
		
	Исключение
		
	КонецПопытки	
		
КонецПроцедуры	

// Задача № 3411
Функция ЗаписатьСтрокуЛогОбменаМП(ПланОбмена, Транспорт, ВерсияМП, ДатаОшибки, ТекстОшибки) Экспорт
	
	//Возврат Истина;//Временное аварийное отключение
	
	Попытка
		
		ЗаписьЛога = ВнешниеИсточникиДанных.ВнешнийЛог.Таблицы.dbo_LogMAExchange.СоздатьМенеджерЗаписи();
		ЗаписьЛога.idMA = ПланОбмена.Код;
		ЗаписьЛога.idCar = Транспорт.Код;
		Записьлога.idVersionMA = ?(ТипЗНЧ(ВерсияМП) = Тип("СправочникСсылка.НомераВерсийМП"), ВерсияМП.Код, "");
		Записьлога.dateEvent = ДатаОшибки;
		Записьлога.error = ТекстОшибки;
		Записьлога.isTest = ПараметрыСеанса.ЭтоТестоваяСреда;
		
		Записьлога.Записать();
		
	Исключение
		
		ОшибкаЗаписиВнешнегоИсточника = ОписаниеОшибки();
		
		Попытка
			
			Наб = РегистрыСведений.ЛогОбменаМП.СоздатьНаборЗаписей();
			Наб.Отбор.Период.Установить(ДатаОшибки);
			Наб.Отбор.УзелОбмена.Установить(ПланОбмена);
			
			
			Нов = Наб.Добавить();
			Нов.Период = ДатаОшибки;
			Нов.УзелОбмена = ПланОбмена;
			Нов.Ошибка = ТекстОшибки;
			Нов.Транспорт = Транспорт;
			Нов.ВерсияМП = ВерсияМП;
			
			Наб.Записать();
			
		Исключение
			
			Возврат Ложь;
			
		КонецПопытки;
		
	Конецпопытки;

	Возврат Истина;
	
КонецФункции

#Область ЛогированиеОтправкиОтчетов
// ++Задача № 3427
Функция ПараметрыЗаписиЛогаОтправкиОтчета(ТипОтправкиОтчета)Экспорт
	
	Возврат Новый Структура("Контрагент, ПериодФормирования, ВидОтчета, ВидОтчетаСпр, ДвоичныеДанныеВыгрузки, GUID, НастройкаОтправки, СписокПолучателей, ОтчетОтправлен, ТипОтправкиОтчета, Терминал, ТекстОшибки, ОператорРассылки",
	Справочники.Контрагенты.ПустаяСсылка(), 			 //Контрагент
	Дата(1,1,1,0,0,0),                      			 //ПериодФормирования
	Перечисления.ВидыОтправляемыхОтчетов.ПустаяСсылка(), //ВидОтчета
	Справочники.ВидыОтправляемыхОтчетов.ПустаяСсылка(),  //ВидОтчетаСпр
	"",                                        			 //ДвоичныеДанныеВыгрузки
	Неопределено,                                        //GUID
	Справочники.НастройкиАвтоматическойОтправкиОтчетов.ПустаяСсылка(),//НастройкаОтправки
	"",                                                  //СписокПолучателей
	Ложь,                                                //ОтчетОтправлен
	ТипОтправкиОтчета,                                   //ТипОтправкиОтчета
	Неопределено,									  	 //Терминал
	"",                                                  //Текст ошибки 	//Геннадий 09.12.2020
	0); 									 			 //ОператорРассылки //Геннадий #4415 24.12.2020
	
КонецФункции

Функция ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписиЛогаОтправкиОтчета, ИмяРегистраНазначения = Неопределено, ОшибкаЗаписиВнешнегоИсточника = "") Экспорт
	
	//Возврат Истина;//Временное аварийное отключение
	
	Попытка
		
		Если ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчетаСпр.Пустая() Тогда
			
			Идентификатор = ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчета.Метаданные().ЗначенияПеречисления.Получить(Перечисления.ВидыОтправляемыхОтчетов.Индекс(ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчета)).Имя;
			ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчетаСпр = Справочники.ВидыОтправляемыхОтчетов[Идентификатор];
			
		КонецЕсли;	
	
		Если ИмяРегистраНазначения = Неопределено Тогда
			
			Если ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета = Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент 
				ИЛИ ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета = Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойРегламент  Тогда
				ИмяРегистраНазначения = "ОтчетыКОтправкеРегламент";
			Иначе	
				ИмяРегистраНазначения = "ОтчетыКОтправке";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыЗаписиЛогаОтправкиОтчета.Терминал = Неопределено Тогда
			ПараметрыЗаписиЛогаОтправкиОтчета.Терминал = Справочники.РегиональныеТерминалы.ПустаяСсылка();
		КонецЕсли;	
		
		ЗаписьЛогаОтправкиОтчета = ВнешниеИсточникиДанных.ВнешнийЛог.Таблицы.dbo_UnloadingReports.СоздатьМенеджерЗаписи();
		
		ЗаписьЛогаОтправкиОтчета.shopId			= ПараметрыЗаписиЛогаОтправкиОтчета.Контрагент.Код;
		ЗаписьЛогаОтправкиОтчета.dateEvent  	= ПараметрыЗаписиЛогаОтправкиОтчета.ПериодФормирования;
		ЗаписьЛогаОтправкиОтчета.typeReport 	= ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчетаСпр.Код; //Справочник!
		ЗаписьЛогаОтправкиОтчета.report			= base64Строка(ПараметрыЗаписиЛогаОтправкиОтчета.ДвоичныеДанныеВыгрузки);
		ЗаписьЛогаОтправкиОтчета.GUID       	= Строка(ПараметрыЗаписиЛогаОтправкиОтчета.GUID);
		ЗаписьЛогаОтправкиОтчета.sendSetting	= ПараметрыЗаписиЛогаОтправкиОтчета.НастройкаОтправки.Код; //Настройки код
		ЗаписьЛогаОтправкиОтчета.recipientList 	= ПараметрыЗаписиЛогаОтправкиОтчета.СписокПолучателей;
		ЗаписьЛогаОтправкиОтчета.reportSent		= ПараметрыЗаписиЛогаОтправкиОтчета.ОтчетОтправлен;
		
		ЗаписьЛогаОтправкиОтчета.isTest 		= ПараметрыСеанса.ЭтоТестоваяСреда;
		ЗаписьЛогаОтправкиОтчета.sendType 		= ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета.Код;// ТипОтправкиОтчетов Код
		ЗаписьЛогаОтправкиОтчета.region			= ПараметрыЗаписиЛогаОтправкиОтчета.Терминал.Код;//
		
		//Геннадий #4415 24.12.2020 ->
		ЗаписьЛогаОтправкиОтчета.textError			= ПараметрыЗаписиЛогаОтправкиОтчета.ТекстОшибки;
		ЗаписьЛогаОтправкиОтчета.typeEmailSending 	= ПараметрыЗаписиЛогаОтправкиОтчета.ОператорРассылки;//число - КлючДанныхТаблицыВнешнегоЛогирования
		//Геннадий <-

		ЗаписьЛогаОтправкиОтчета.Записать();
		
	Исключение
		
		ОшибкаЗаписиВнешнегоИсточника = ОписаниеОшибки();
		МасП = Новый Массив;
		МасП.Добавить("a.pryalkin@strizh-logistic.ru");
		МасП.Добавить("g.polyakov@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");

		Попытка
			
			РегистрЗаписи = РегистрыСведений[ИмяРегистраНазначения];
			
			ХранилищеОтчета = новый ХранилищеЗначения(ПараметрыЗаписиЛогаОтправкиОтчета.ДвоичныеДанныеВыгрузки, Новый СжатиеДанных(9));
			
			Наб = РегистрЗаписи.СоздатьНаборЗаписей();
			Наб.Отбор.Контрагент.Установить(ПараметрыЗаписиЛогаОтправкиОтчета.Контрагент);
			наб.Отбор.ПериодФормирования.Установить(ПараметрыЗаписиЛогаОтправкиОтчета.ПериодФормирования);
			Наб.Отбор.ВидОтчета.Установить(ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчета);
			Наб.Отбор.ВидОтчетаСпр.Установить(ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчетаСпр);
			
			Нов = Наб.Добавить();
			Нов.Контрагент 			= ПараметрыЗаписиЛогаОтправкиОтчета.Контрагент;
			Нов.ПериодФормирования 	= ПараметрыЗаписиЛогаОтправкиОтчета.ПериодФормирования;
			Нов.ВидОтчета 			= ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчета;
			Нов.ВидОтчетаСпр 		= ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчетаСпр;

			Нов.ВыгрузкаXML 		= ХранилищеОтчета;
			Нов.GUID 				= ПараметрыЗаписиЛогаОтправкиОтчета.GUID;
			
			Если Метаданные.РегистрыСведений[ИмяРегистраНазначения].Измерения.Найти("НастройкаОтправки")<>Неопределено Тогда
				Нов.НастройкаОтправки 	= ПараметрыЗаписиЛогаОтправкиОтчета.НастройкаОтправки;
			КонецЕсли;
			
			Нов.ОтчетОтправлен 		= ПараметрыЗаписиЛогаОтправкиОтчета.ОтчетОтправлен;
			Нов.СписокПолучателей 	= ПараметрыЗаписиЛогаОтправкиОтчета.СписокПолучателей;
			
			Нов.ТипОтправкиОтчета   = ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета;
			
			Наб.Записать();
			
			lem.ОтправитьСообщение(МасП, "Ошибка записи лога отчета", "Ошибка записи отчета во внешний лог " + ОшибкаЗаписиВнешнегоИсточника,,"Сервер 1С");
			
			#Область ПримерОригинальнойЗаписиВРегистры
			// Оригинальная запись в РС
			
			//Наб = РегистрыСведений.ОтчетыКОтправкеРегламент.СоздатьНаборЗаписей();
			//Наб.Отбор.Контрагент.Установить(ВыборкаКомитенты.Контрагент);
			//наб.Отбор.ПериодФормирования.Установить(ТекД);
			//Наб.Отбор.ВидОтчета.Установить(Настройка.Отчет);
			//
			//Нов = наб.Добавить();
			//Нов.Контрагент = ВыборкаКомитенты.Контрагент;
			//Нов.ПериодФормирования = ТекД;
			//Нов.ВыгрузкаXML = Хр;
			//Нов.GUID = Г;
			//Нов.НастройкаОтправки = Настройка.Ссылка;
			//Нов.ОтчетОтправлен = Отпр;
			//Нов.СписокПолучателей = Стр_;
			//Нов.ВидОтчета = Настройка.Отчет;
			//Наб.Записать();
			
			//
			//НаборЗаписейРСОтчетыКОтправке = РегистрыСведений.ОтчетыКОтправке.СоздатьНаборЗаписей();
			//НаборЗаписейРСОтчетыКОтправке.Отбор.Контрагент.Установить(ВыборкаКомитенты.Контрагент);
			//НаборЗаписейРСОтчетыКОтправке.Отбор.ПериодФормирования.Установить(ТекД);
			//НаборЗаписейРСОтчетыКОтправке.Отбор.ВидОтчета.Установить(Настройка.Отчет);
			
			//ЗаписьРСОтчетыКОтправке = НаборЗаписейРСОтчетыКОтправке.Добавить();
			//ЗаписьРСОтчетыКОтправке.Контрагент = ВыборкаКомитенты.Контрагент;
			//ЗаписьРСОтчетыКОтправке.ПериодФормирования = ТекД;
			//ЗаписьРСОтчетыКОтправке.ВидОтчета = Настройка.Отчет;
			//ЗаписьРСОтчетыКОтправке.GUID = Г;
			//ЗаписьРСОтчетыКОтправке.ВыгрузкаXML = Хр;
			//ЗаписьРСОтчетыКОтправке.ОтчетОтправлен = Отпр;
			//ЗаписьРСОтчетыКОтправке.СписокПолучателей = Стр_;
			//НаборЗаписейРСОтчетыКОтправке.Записать();

			#КонецОбласти
			
		Исключение
			
			ОшибкаЗаписиВнешнегоИсточника = ОшибкаЗаписиВнешнегоИсточника + "; " + ОписаниеОшибки();
			
			lem.ОтправитьСообщение(МасП, "Ошибка записи лога отчета", "Ошибка записи отчета во внешний лог и регистр " + ОшибкаЗаписиВнешнегоИсточника,,"Сервер 1С");

			Возврат Ложь;
			
		КонецПопытки;
		
	КонецПопытки;
		
	Возврат Истина;
		
КонецФункции

Функция ОтчетОтправлялся(ПараметрыЗаписиЛогаОтправкиОтчета, ИмяРегистраНазначения = Неопределено) Экспорт
	
	Если ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчетаСпр.Пустая() Тогда
		
		Идентификатор = ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчета.Метаданные().ЗначенияПеречисления.Получить(Перечисления.ВидыОтправляемыхОтчетов.Индекс(ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчета)).Имя;
		ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчетаСпр = Справочники.ВидыОтправляемыхОтчетов[Идентификатор];
		
	КонецЕсли;	

	Если  ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета = Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойПользователь
		ИЛИ ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета = Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойПользователь
		ИЛИ ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета = Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамWEBСервис Тогда
		
		Возврат Ложь; // Всегда давать возможность отправки отчета руками или по запросу админки
	КонецЕсли;	
	
	Если ИмяРегистраНазначения = Неопределено Тогда
		
		Если ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета = Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент 
			ИЛИ ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета = Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойРегламент  Тогда
			ИмяРегистраНазначения = "ОтчетыКОтправкеРегламент";
		Иначе	
			ИмяРегистраНазначения = "ОтчетыКОтправке";
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаНачала = ПараметрыЗаписиЛогаОтправкиОтчета.ПериодФормирования - 3600;
	ДатаОкончания = ПараметрыЗаписиЛогаОтправкиОтчета.ПериодФормирования;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_UnloadingReports.dateEvent КАК dateEvent,
		|	dbo_UnloadingReports.typeReport КАК typeReport,
		|	dbo_UnloadingReports.sendSetting КАК sendSetting,
		|	dbo_UnloadingReports.sendType КАК sendType,
		|	dbo_UnloadingReports.reportSent КАК reportSent
		|ИЗ
		|	ВнешнийИсточникДанных.ВнешнийЛог.Таблица.dbo_UnloadingReports КАК dbo_UnloadingReports
		|ГДЕ
		|	dbo_UnloadingReports.dateEvent МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И dbo_UnloadingReports.sendSetting = &sendSetting
		|	И dbo_UnloadingReports.typeReport = &typeReport
		|	И dbo_UnloadingReports.sendType = &sendType
		|	И dbo_UnloadingReports.reportSent
		|	И dbo_UnloadingReports.isTest = &isTest
		|	И dbo_UnloadingReports.shopId = &shopId";
	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	
	Запрос.УстановитьПараметр("isTest", 	 ПараметрыСеанса.ЭтоТестоваяСреда);
	Запрос.УстановитьПараметр("sendSetting", СокрЛП(ПараметрыЗаписиЛогаОтправкиОтчета.НастройкаОтправки.Код));
	Запрос.УстановитьПараметр("shopId", 	 СокрЛП(ПараметрыЗаписиЛогаОтправкиОтчета.Контрагент.Код));
	Запрос.УстановитьПараметр("typeReport",  СокрЛП(ПараметрыЗаписиЛогаОтправкиОтчета.ВидОтчетаСпр.Код));
	Запрос.УстановитьПараметр("sendType",  	 СокрЛП(ПараметрыЗаписиЛогаОтправкиОтчета.ТипОтправкиОтчета.Код));

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

// --Задача № 3427

#КонецОбласти

#Область ЛогированиеОбращенийКWebСервисам
// ++Задача № 3553

Функция ПараметрыЗаписиЛогаСервиса(API, МетодAPI)Экспорт
	
	//Общие поля параметров
	//requestXML
	//responseXML
	//isError
	//isServerError
	//errorDescription
	//Дополнительные поля параметров
	//numberObjects
	//noData
	//responseCode
	//responseDescription
	//orderNumber
	//eventSourceType
	//eventSourceCode
	
	ПараметрыЗаписи = Новый Структура("dateEvent, APIType, APIMethod, requestXML, responseXML, isError, isServerError, errorDescription",
	Текущаядата(),        //dateEvent
	API.Код,              //APIType
	МетодAPI.Код,         //APIMethod
	"",                   //requestXML
	"",                   //responseXML
	Ложь,                 //isError
	Ложь,                 //isServerError
	"");                  //errorDescription	
	
	// Только для CasheServer	
	ПараметрыЗаписи.Вставить("numberObjects",0);
	ПараметрыЗаписи.Вставить("noData", Ложь);
	
	// Только для OZONE
	ПараметрыЗаписи.Вставить("responseCode", 0);
	ПараметрыЗаписи.Вставить("responseDescription", "");
	ПараметрыЗаписи.Вставить("orderNumber", 0);
	ПараметрыЗаписи.Вставить("eventSourceType", "");
	ПараметрыЗаписи.Вставить("eventSourceCode", "");
	
	//Не описанный параметр
	ПараметрыЗаписи.Вставить("accessKey", "");
	ПараметрыЗаписи.Вставить("region", 0);

	ПараметрыЗаписи.Вставить("ЗаписыватьЛогСервиса", API.Логирование); //Задача № 3603  
	
	//CeHbKA 12.12.2019 #3689
	ПараметрыЗаписи.Вставить("СжатиеЗапроса", МетодAPI.СжатиеЗапроса);  
	ПараметрыЗаписи.Вставить("СжатиеОтвета", МетодAPI.СжатиеОтвета);  
	//CeHbKA 12.12.2019 #3689
	
	Возврат ПараметрыЗаписи;
	
КонецФункции
	
Функция ЗаписатьСтрокуЛогаСервиса(ПараметрыЗаписиЛогаСервиса, ОшибкаЗаписиВнешнегоИсточника = "") Экспорт
	
	Попытка
		
		Если НЕ ПараметрыЗаписиЛогаСервиса.ЗаписыватьЛогСервиса Тогда //Задача № 3603
			 Возврат Истина;
		КонецЕсли;	 
		
		//Геннадий #4021 08.06.2020 ->
		//исходный код при использовании таблиц, замена на вызов хранимой процедуры
		//ЗаписьЛогаСервиса = ВнешниеИсточникиДанных.ВнешнийЛог.Таблицы.dbo_WebServiceRequests.СоздатьМенеджерЗаписи();
		//Геннадий #4021 08.06.2020 <-
		ФайлыXML = Новый Структура("requestXML,responseXML", "", "");
		
		Для Каждого ПараметрЗаписи Из ПараметрыЗаписиЛогаСервиса Цикл
			
			Если ПараметрЗаписи.Ключ = "ЗаписыватьЛогСервиса" //Задача № 3603
				ИЛИ ПараметрЗаписи.Ключ = "СжатиеЗапроса"
				ИЛИ ПараметрЗаписи.Ключ = "СжатиеОтвета" Тогда 
				Продолжить;
			Конецесли;	
						
			//Геннадий #4021 08.06.2020 ->
			//исходный код при использовании таблиц
			//ЗаписьЛогаСервиса[ПараметрЗаписи.Ключ] = ПараметрЗаписи.Значение;
			//Геннадий #4021 08.06.2020 <-
			
			//CeHbKA 12.12.2019 #3689
			СжатиеДанных = Ложь;
			
			Если ПараметрЗаписи.Ключ = "requestXML" Тогда
				Если ПараметрыЗаписиЛогаСервиса.СжатиеЗапроса Тогда
					СжатиеДанных = Истина;
				Иначе//иначе пишем файл как есть	
					ФайлыXML[ПараметрЗаписи.Ключ] = ПараметрЗаписи.Значение;	
				КонецЕсли; 
			КонецЕсли;	
			Если ПараметрЗаписи.Ключ = "responseXML" Тогда
				Если ПараметрыЗаписиЛогаСервиса.СжатиеОтвета Тогда
					СжатиеДанных = Истина;
				Иначе//иначе пишем файл как есть
					ФайлыXML[ПараметрЗаписи.Ключ] = ПараметрЗаписи.Значение;	
				КонецЕсли; 
			КонецЕсли;	
			
			Если СжатиеДанных Тогда
				
				ВременныйФайлTXT = ПолучитьИмяВременногоФайла("txt");
				
				ЗаписьТХТ = Новый ЗаписьТекста(ВременныйФайлTXT);
				ЗаписьТХТ.Записать(ПараметрЗаписи.Значение);
				ЗаписьТХТ.Закрыть();
				
				//CeHbKA #3689 18.12.2019
				ВременныйФайлZip = ПолучитьИмяВременногоФайла("zip");
				ZipАрхив = Новый ЗаписьZipФайла(ВременныйФайлZip,,,МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
				ZipАрхив.Добавить(ВременныйФайлTXT);
				ZipАрхив.Записать();
								
				ДД = Новый ДвоичныеДанные(ВременныйФайлZip);
				//CeHbKA #3689 18.12.2019
				
				//Геннадий #4021 08.06.2020 ->
				//исходный код при использовании таблиц
				//ЗаписьЛогаСервиса[ПараметрЗаписи.Ключ] = Base64Строка(ДД);
				ФайлыXML[ПараметрЗаписи.Ключ] = Base64Строка(ДД);
				
			КонецЕсли; 
			//CeHbKA 12.12.2019 #3689
			
		КонецЦикла;
		
		//Геннадий #4021 08.06.2020 ->
		//исходный код при использовании таблиц
		//ЗаписьЛогаСервиса.isTest = ПараметрыСеанса.ЭтоТестоваяСреда;
		//ЗаписьЛогаСервиса.baseID = "utl";
		//ЗаписьЛогаСервиса.Записать();
		
		ЗначенияПарметровСтрока = "dateEvent = " 		+ ПараметрыЗаписиЛогаСервиса.dateEvent + Символы.ПС
								 + "APIType = " 		+ ПараметрыЗаписиЛогаСервиса.APIType + Символы.ПС
								 + "APIMethod = " 		+ ПараметрыЗаписиЛогаСервиса.APIMethod + Символы.ПС
								 + "accessKey = " 		+ ПараметрыЗаписиЛогаСервиса.accessKey + Символы.ПС
								 + "requestXML = " 		+ Лев(ФайлыXML["requestXML"], 50) + Символы.ПС
								 + "responseXML = " 	+ Лев(ФайлыXML["responseXML"], 50) + Символы.ПС
								 + "isError = " 		+ ПараметрыЗаписиЛогаСервиса.isError + Символы.ПС
								 + "isServerError = " 	+ ПараметрыЗаписиЛогаСервиса.isServerError + Символы.ПС
								 + "errorDescription = " + ПараметрыЗаписиЛогаСервиса.errorDescription + Символы.ПС
								 + "numberObjects = " 	+ ПараметрыЗаписиЛогаСервиса.numberObjects + Символы.ПС
								 + "noData = " 			+ ПараметрыЗаписиЛогаСервиса.noData + Символы.ПС
								 + "responseCode = " 	+ ПараметрыЗаписиЛогаСервиса.responseCode + Символы.ПС
								 + "responseDescription = "+ ПараметрыЗаписиЛогаСервиса.responseDescription + Символы.ПС
								 + "orderNumber = " 	+ ПараметрыЗаписиЛогаСервиса.orderNumber + Символы.ПС
								 + "eventSourceType = " + ПараметрыЗаписиЛогаСервиса.eventSourceType + Символы.ПС
								 + "eventSourceCode = " + ПараметрыЗаписиЛогаСервиса.eventSourceCode + Символы.ПС
								 + "isTest = " 			+ ПараметрыСеанса.ЭтоТестоваяСреда + Символы.ПС
								 + "region = " 			+ ПараметрыЗаписиЛогаСервиса.region + Символы.ПС
								 + "baseID = utl";
								 
		//замена использования таблицы на вызов хранимки
		ВнешниеИсточникиДанных.ВнешнийЛог.dbo_WebServiceRequestsAdd( 
			ПараметрыЗаписиЛогаСервиса.dateEvent,
			ПараметрыЗаписиЛогаСервиса.APIType,
			ПараметрыЗаписиЛогаСервиса.APIMethod,
			ПараметрыЗаписиЛогаСервиса.accessKey,
			?(ФайлыXML["requestXML"] = Неопределено, "", ФайлыXML["requestXML"]),				
			?(ФайлыXML["responseXML"] = Неопределено, "", ФайлыXML["responseXML"]),			   
			ПараметрыЗаписиЛогаСервиса.isError,
			ПараметрыЗаписиЛогаСервиса.isServerError,
			ПараметрыЗаписиЛогаСервиса.errorDescription,
			ПараметрыЗаписиЛогаСервиса.numberObjects,
			ПараметрыЗаписиЛогаСервиса.noData,
			ПараметрыЗаписиЛогаСервиса.responseCode,
			ПараметрыЗаписиЛогаСервиса.responseDescription,
			ПараметрыЗаписиЛогаСервиса.orderNumber,
			ПараметрыЗаписиЛогаСервиса.eventSourceType,
			ПараметрыЗаписиЛогаСервиса.eventSourceCode,
			ПараметрыСеанса.ЭтоТестоваяСреда,	
			ПараметрыЗаписиЛогаСервиса.region,
			"utl");
		//Геннадий #4021 08.06.2020 <-
		
	Исключение
		
		ОшибкаЗаписиВнешнегоИсточника = ОписаниеОшибки();
		МасП = Новый Массив;
		МасП.Добавить("a.pryalkin@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасП.Добавить("g.polyakov@strizh-logistic.ru");
		
		lem.ОтправитьСообщение(МасП, "Ошибка записи лога сервисов", "Ошибка записи лога сервисов во внешний лог " + ОшибкаЗаписиВнешнегоИсточника + Символы.ПС + ЗначенияПарметровСтрока,,"Сервер 1С");
		//lem.ОтправитьСообщение(МасП, "Ошибка записи лога сервисов", "Ошибка записи лога сервисов во внешний лог " + ОшибкаЗаписиВнешнегоИсточника,,"Сервер 1С");
		
	Конецпопытки;
	
КонецФункции	

// --Задача № 3553
#КонецОбласти


#Область ТестированиеВыполненияФоном

Процедура ВыполнитьТестовоеЛогированиеНаСервереOZONE(Заказ, ИсточникСобытия) Экспорт
	
	МассивМетодов = Новый Массив;
	МассивМетодов.Добавить(перечисления.oz_Методы.PostingReceive);
	МассивМетодов.Добавить(перечисления.oz_Методы.ArticleInfoGet);
	МассивМетодов.Добавить(перечисления.oz_Методы.ArticleReturnedSend);
	МассивМетодов.Добавить(перечисления.oz_Методы.CarriageContentGet);
	МассивМетодов.Добавить(перечисления.oz_Методы.CarriageListGet);
	МассивМетодов.Добавить(перечисления.oz_Методы.CarriageReceive);
	МассивМетодов.Добавить(перечисления.oz_Методы.PlaceInfoListGet);
	МассивМетодов.Добавить(перечисления.oz_Методы.PostingDeliveryDateChange);
	МассивМетодов.Добавить(перечисления.oz_Методы.PostingGiveout);
	МассивМетодов.Добавить(перечисления.oz_Методы.PostingGiveoutToCourier);
	
	Для Сч = 1 По 50 Цикл
		
		Если Сч > 10 Тогда
			ПромСч = Число(Прав(Строка(Сч),1));		
			НомерМетода = ПромСч; 
		Иначе	
			НомерМетода = Сч - 1;
		КонецЕсли;
	
		oz_Метод = МассивМетодов[НомерМетода];
		
		РезультатСтруктура = Новый Структура;
		РезультатСтруктура.Вставить("Код", Сч);
		РезультатСтруктура.Вставить("Описание", "test log service");
		
		oz_РаботаССервисом.ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, oz_Метод,  Заказ, ИсточникСобытия, "<test request>", "<test response>");
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьТестовоеЛогированиеНаСервереCash() Экспорт
		
	Для Сч = 1 По 50 Цикл
		
		РаботаскассовымСерверомСервер.ТестированиеРегламентВыгрузкаДанныхВКассовыйСервер("MSK");
		РаботаскассовымСерверомСервер.ТестированиеРегламентВыгрузкаДанныхВКассовыйСервер("SPb");
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьТестовоеЛогированиеНаСервереIS() Экспорт
		
	Для Сч = 1 По 50 Цикл
				
		ИнтеграцияСАдминкойWEBСервис.СделатьЗаписьВЛог(перечисления.ВидыЗапросовWEBСервис.GetActiveMapVersionResult, "Тест ошибки текст запроса " + Строка(Сч),"Тест ошибки текст ответа " + Строка(Сч),"Текст ошибки " + Строка(Сч),Ложь,"");
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьТестовоеЛогированиеНаСервереЛогОбменаМП(Планобмена, Транспорт, ВерсияМП, ДатаОшибки, ТекстОшибки) Экспорт
	Для Сч = 1 По 50 Цикл
		ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогОбменаМП(Планобмена, Транспорт, ВерсияМП, ТекущаяДата(), ТекстОшибки);
	КонецЦикла;	
КонецПроцедуры

Процедура ВыполнитьТестовоеЛогированиеНаСервереОтправкаОтчета(НастройкаОтправки, Терминал) Экспорт
	
	Для Сч = 1 По 50 Цикл
		
		Стр_ = "тест фонового логирования";
		
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойРегламент);
		ПараметрыЗаписи.ВидОтчета = НастройкаОтправки.Отчет;
		ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
		ПараметрыЗаписи.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ПараметрыЗаписи.Терминал = Терминал;
		
		ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
		
		ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = "";
		ПараметрыЗаписи.GUID = Новый УникальныйИдентификатор;
		ПараметрыЗаписи.СписокПолучателей = Стр_;
		
		ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
		
	КонецЦикла;
		
КонецПроцедуры
	
#КонецОбласти

//+Степанов Задача № 3935
Процедура ЗаписатьЛогСканирования_ОбщееВнешнееЛогирование(ТипОперации, ВремяОперации, РабочееМесто, НомерДокумента, Штрихкод, НомерЗаказа, Тест = Ложь) Экспорт
	
	Тест = ПараметрыСеанса.ЭтоТестоваяСреда;
	
	Попытка
		ВнешниеИсточникиДанных.ВнешнийЛог.dbo_scanLoggingAdd(
			ПараметрыСеанса.ИдентификаторБазыСтрижВнешнийИсточникДанных,
			ТипОперации,
			ВремяОперации,
			Штрихкод,
			РабочееМесто,
			НомерДокумента,
			НомерЗаказа,
			Тест);
			
	Исключение
		Сообщить("Не удалось запистаь данные во внешний лог!");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
//-Степанов Задача № 3935