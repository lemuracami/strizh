#Область РегламентныеПроцедурыФункции

#Область ОтправкаУслугПоПочте
/////////////////////////-----Регламент отправка услуг по почте-----///////////////////////////////////

Процедура ОтправкаУслугПоЗаказамПоПочте() Экспорт 

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   НазначениеУслугПозаказамСрезПоследних.Контрагент
        |ИЗ
        |   РегистрСведений.НазначениеУслугПозаказам.СрезПоследних КАК НазначениеУслугПозаказамСрезПоследних
        |ГДЕ
        |   НазначениеУслугПозаказамСрезПоследних.НомерВнешнегоЗаказа <> &НомерВнешнегоЗаказаИсключение
        |
        |СГРУППИРОВАТЬ ПО
        |   НазначениеУслугПозаказамСрезПоследних.Контрагент";
    
    Запрос.УстановитьПараметр("НомерВнешнегоЗаказаИсключение", "40058473");
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        //Заполнение и запись документа
        Данные = Документы.УслугиПоЗаказам.ПолучитьДанныеИзРС(ВыборкаДетальныеЗаписи.Контрагент);
        Если Данные.Количество() > 0 Тогда
            //Получаем объект
            ДокументОбъект = Документы.УслугиПоЗаказам.СоздатьДокумент(); 
            //Заполняем на сервере данными из выборки
            ДокументОбъект.ЗаполнитьНаСервере(Данные,ВыборкаДетальныеЗаписи.Контрагент);
            //Формируем и отправляем отчет
            ДокументОбъект.СформироватьИОтправить();
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

Функция ПолучитьМассивНомеровДляУслуг(Телефон) Экспорт 
    //Символы которые будут пропускаться при обходе строки
    СимволыИскллючения = Новый Массив;
    СимволыИскллючения.Добавить("-");
    СимволыИскллючения.Добавить("(");
    СимволыИскллючения.Добавить(")");
    СимволыИскллючения.Добавить(" ");
    СимволыИскллючения.Добавить("+");
    
    //Получим строку с разделителем
    НомерСРазделителями = smv.ВернутьЦифрыСРазделителем(Телефон,"/",СимволыИскллючения);
    //Получим массив номеров
    МассивНомеров = smv.РазложитьСтрокуВМассивПодстрок_smv(НомерСРазделителями,"/");
    
    //Инициализируем новый массив для заполнения отформатированными номерами
    МассивНомеровОтформатированный = Новый Массив;
    Для каждого Стр Из МассивНомеров Цикл
        //Получим номер без кода страны
        Номер = ПолучитьНомерБезКодаСтраны(Стр);
        //Получим номер с разделителем
        Если Номер <>"" Тогда
            Номер = ПолучитьНомерСразделителем(Номер,"-");
            МассивНомеровОтформатированный.Добавить(Номер);
        КонецЕсли;
        
    КонецЦикла;
    Возврат МассивНомеровОтформатированный;
КонецФункции

#КонецОбласти 

#Область ПодгрузкаУслугИзАдминки
//Подгрузка услуг из админки
Процедура СинхронизацияУслугиПоЗаказам(Заказ)Экспорт
    
    //Синхронизация только по заказам у которых есть внешний номер заказа
    Если ЗначениеЗаполнено(Заказ.НомерВнешнегоЗаказа) Тогда 
        
        //Получим услуги из админки по заказу
        ТекстЗапросаSQL = "EXEC bp_getOrderAdditionalServices "+Заказ.Номер;
        ТаблицаУслуг = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапросаSQL);
        
        Для каждого Стр Из ТаблицаУслуг Цикл
            
            //Ищем услугу в базе, если нет, то создаем
            НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул", Формат(Стр.articul,"ЧГ=0"));
            Если ЗначениеЗаполнено(НайденаяУслуга) Тогда
                УслугаПоЗаказам = НайденаяУслуга;
                
                //Если услуга помечена на удаление снимем пометку удаления
                Если НайденаяУслуга.ПометкаУдаления Тогда
                    УслугаПоЗаказамОбъект = УслугаПоЗаказам.ПолучитьОбъект();
                    УслугаПоЗаказамОбъект.ПометкаУдаления = Ложь;
                    Попытка
                        УслугаПоЗаказамОбъект.Записать();
                    Исключение
                        #Если Клиент Тогда
                            Сообщить(ОписаниеОшибки());    
                        #КонецЕсли
                    КонецПопытки;
                КонецЕсли;
                
            ИначеЕсли НЕ ЗначениеЗаполнено(НайденаяУслуга) Тогда //создаем услугу
                УслугаПоЗаказамОбъект = Справочники.УслугиПоЗаказам.СоздатьЭлемент();
                УслугаПоЗаказамОбъект.Артикул = Формат(Стр.articul,"ЧГ=0");
                УслугаПоЗаказамОбъект.Владелец = Заказ.ВладелецТовара;
                УслугаПоЗаказамОбъект.Наименование = Стр.title;
                УслугаПоЗаказамОбъект.НаименованиеПолное = Стр.title;
                Попытка
                    УслугаПоЗаказамОбъект.Записать();
                    УслугаПоЗаказам = УслугаПоЗаказамОбъект.Ссылка;
                Исключение
                    #Если Клиент Тогда
                        Сообщить(ОписаниеОшибки());    
                    #КонецЕсли
                КонецПопытки;
            КонецЕсли;
            
            Период = ТекущаяДата();
            //Движения в РС НазначениеУслугПозаказам
            НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(Заказ.НомерВнешнегоЗаказа); 
            НаборЗаписей.Отбор.Услуга.Установить(УслугаПоЗаказам);  
            НаборЗаписей.Отбор.Контрагент.Установить(Заказ.ВладелецТовара);
            //НаборЗаписей.Отбор.Период.Установить(Период); 
            Запись = НаборЗаписей.Добавить();
            Запись.Период = Период;
            Запись.НомерВнешнегоЗаказа = Заказ.НомерВнешнегоЗаказа;
            Запись.Услуга = УслугаПоЗаказам;
            Запись.Контрагент = Заказ.ВладелецТовара;
            Запись.Стоимость = Стр.price;
            Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзАдминки;
            НаборЗаписей.Записать();
        КонецЦикла;	
    КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область РегламентВыгрузкиТарифныхСеток
/////////////////////////------Регламент Выгрузки Тарифных сеток------//////////////////////////////////
Процедура РегламентОбновлениеТарифныхСеток() Экспорт
    //Получим дату последней загрузки
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ПараметрыРегламентныхЗаданий.Значение КАК ДатаПоследнейЗагрузки
    |ИЗ
    |   РегистрСведений.ПараметрыРегламентныхЗаданий КАК ПараметрыРегламентныхЗаданий
    |ГДЕ
    |   ПараметрыРегламентныхЗаданий.Ключ = ""ДатаЗагрузкиТарифныхСеток""";
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        ДатаЗагрузки = Дата(ВыборкаДетальныеЗаписи.ДатаПоследнейЗагрузки);
    Иначе
        ДатаЗагрузки = Дата("17530101");
    КонецЕсли;
    ДатаЗапроса = ТекущаяДата();
    //Получим данные из базы SQL
    ////Серегин М.В. 09.06.2015 14:18:03 старый запрос
    //ТекстЗапроса = "Select * from [ts_tariff] R(NOLOCK)left join ts_tariffSchedule RO (NOLOCK) on R.[id] = RO.[tariffID] where R.[modifyDate] >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";
    //Серегин М.В. 09.06.2015 14:18:11 новый
	
	СписокНеПрогруженныхТарифов = "";
	ЗапросНезагруженныеОбъекты = Новый Запрос("ВЫБРАТЬ
	                                          |	НезагруженныеОбъектыСрезПоследних.КодОбъекта КАК КодОбъекта
	                                          |ИЗ
	                                          |	РегистрСведений.НезагруженныеОбъекты.СрезПоследних(, ТипЗагрузки = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузок.ЗагрузкаИзАдминкиТарифныхСеток)) КАК НезагруженныеОбъектыСрезПоследних
	                                          |ГДЕ
	                                          |	НезагруженныеОбъектыСрезПоследних.Загружено = ЛОЖЬ");
	РезНезагруженныеОбъекты = ЗапросНезагруженныеОбъекты.Выполнить().Выбрать();		
	Пока РезНезагруженныеОбъекты.Следующий() Цикл
		СписокНеПрогруженныхТарифов = СписокНеПрогруженныхТарифов + РезНезагруженныеОбъекты.КодОбъекта + ",";		
	КонецЦикла;
	
	СписокНеПрогруженныхТарифов = Лев(СписокНеПрогруженныхТарифов, СтрДлина(СписокНеПрогруженныхТарифов)-1);
	
	Если ЗначениеЗаполнено(СписокНеПрогруженныхТарифов) Тогда
		
		ТекстЗапроса = "Select R.id,R.internetShopID, 
		|R.settingID, 
		|R.tariffType, 
		|R.name,
		|R.defaultCategory,
		|R.modifyDate, 
		|R.regionSchemeId,
		|R.intakeRegionSchemeID,
		|R.tariffReturnType,
		//Геннадий #3779 16.02.2021 ->
		|R.tariffReturnTypeWithArrival,
		|R.tariffReturnTypePartBuyout,
		//Геннадий #3779 <-
		//CeHbKA #4567 25.05.2021
		|R.calcByVolumetricWeight,
		|R.coeffVolumetricWeight,
		//CeHbKA #4567 25.05.2021
		|RO.tariffID,
		|RO.applyDate, 
		|RO.dueDate, 
		|RS.id as RegionShemeID, 
		|R.sourcePlaceId as sourcePlaceId, 
		|R.deliveryPlaceId as deliveryPlaceId, 
		|RS.name as RegionShemeName 
		|from ts_tariff R (NOLOCK) left join ts_tariffSchedule RO (NOLOCK) on R.[id] = RO.[tariffID]
		|inner join ts_regionScheme RS (NOLOCK) on R.[regionSchemeId] = RS.[id] 
		|where R.[modifyDate] >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'
		| or  R.[id] in ("+ СтрЗаменить(СписокНеПрогруженныхТарифов, Символы.НПП, "") +")";
	Иначе
		ТекстЗапроса = "Select R.id,R.internetShopID, 
		|R.settingID, 
		|R.tariffType, 
		|R.name,
		|R.defaultCategory,
		|R.modifyDate, 
		|R.regionSchemeId,
		|R.intakeRegionSchemeID,
		|R.tariffReturnType,
		//Геннадий #3779 16.02.2021 ->
		|R.tariffReturnTypeWithArrival,
		|R.tariffReturnTypePartBuyout,
		//Геннадий #3779 <-
		//CeHbKA #4567 25.05.2021
		|R.calcByVolumetricWeight,
		|R.coeffVolumetricWeight,
		//CeHbKA #4567 25.05.2021
		|RO.tariffID,
		|RO.applyDate, 
		|RO.dueDate, 
		|RS.id as RegionShemeID, 
		|R.sourcePlaceId as sourcePlaceId, 
		|R.deliveryPlaceId as deliveryPlaceId, 
		|RS.name as RegionShemeName 
		|from ts_tariff R (NOLOCK) left join ts_tariffSchedule RO (NOLOCK) on R.[id] = RO.[tariffID]
		|inner join ts_regionScheme RS (NOLOCK) on R.[regionSchemeId] = RS.[id] 
		|where R.[modifyDate] >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";
	КонецЕсли;	
	
    ТаблицаТарифныхСетокСпериодомДействия = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
    
    ЕстьОшибки = Ложь;
	
	СписокТарифов = "";
	
    //Создаем или меняем элементы справочника Тарифные сетки
	Для каждого Стр Из ТаблицаТарифныхСетокСпериодомДействия Цикл
					
        //Найдем уже созданный элемент
        ТарифнаяСеткаНайденая = Справочники.ТарифныеСетки.НайтиПоКоду(СтрЗаменить(Стр.id, Символы.НПП, ""));
        Если ЗначениеЗаполнено(ТарифнаяСеткаНайденая) Тогда 
            ТарифнаяСеткаОбъект = ТарифнаяСеткаНайденая.ПолучитьОбъект();
            ЗаполнитьТарифнаяСетка(ТарифнаяСеткаОбъект,Стр);
        Иначе
            ТарифнаяСеткаОбъект = Справочники.ТарифныеСетки.СоздатьЭлемент();
            ЗаполнитьТарифнаяСетка(ТарифнаяСеткаОбъект,Стр);
		КонецЕсли;
		
		// Неопределено может быть только в случае, когда не найден магазин
		Если ТарифнаяСеткаОбъект <> Неопределено Тогда
			
			СписокТарифов = СписокТарифов + Формат(Стр.tariffID, "ЧГ=") + ",";
			
			//CeHbKA #3779
			Если Стр.tariffReturnType < 2 Тогда
				ТарифнаяСеткаОбъект.СпособРасчетаВозвратногоТарифа 				 = Перечисления.СпособыРасчетаВозвратногоТарифа.ФиксированнойСуммой;
			ИначеЕсли Стр.tariffReturnType = 2 Тогда
				ТарифнаяСеткаОбъект.СпособРасчетаВозвратногоТарифа 				 = Перечисления.СпособыРасчетаВозвратногоТарифа.ПроцентомОтТарифаДоставки;
			КонецЕсли; 
			//CeHbKA #3779
		
			//Геннадий #3779 16.02.2021 ->
			Если Стр.tariffReturnTypeWithArrival < 2 Тогда
				ТарифнаяСеткаОбъект.СпособРасчетаВозвратногоТарифаЗаезд  		 = Перечисления.СпособыРасчетаВозвратногоТарифа.ФиксированнойСуммой;
			ИначеЕсли Стр.tariffReturnTypeWithArrival = 2 Тогда
				ТарифнаяСеткаОбъект.СпособРасчетаВозвратногоТарифаЗаезд  		 = Перечисления.СпособыРасчетаВозвратногоТарифа.ПроцентомОтТарифаДоставки;
			КонецЕсли; 
			
			Если Стр.tariffReturnTypePartBuyout < 2 Тогда
				ТарифнаяСеткаОбъект.СпособРасчетаВозвратногоТарифаЧастичныйВыкуп = Перечисления.СпособыРасчетаВозвратногоТарифа.ФиксированнойСуммой;
			ИначеЕсли Стр.tariffReturnTypePartBuyout = 2 Тогда
				ТарифнаяСеткаОбъект.СпособРасчетаВозвратногоТарифаЧастичныйВыкуп = Перечисления.СпособыРасчетаВозвратногоТарифа.ПроцентомОтТарифаДоставки;
			КонецЕсли; 
			//Геннадий #3779 <-
			
			//CeHbKA #4567 25.05.2021
			ТарифнаяСеткаОбъект.ТарификацияПоОбъемномуВесу = Стр.calcByVolumetricWeight;
			ТарифнаяСеткаОбъект.КоэффициентРасчетаОбъемногоВеса = Стр.coeffVolumetricWeight;	
			//CeHbKA #4567 25.05.2021
			
			Попытка
	            //Записываем элемент
	            ТарифнаяСеткаОбъект.Записать();
				
				// Помечаем сетку в РС НезагруженныеОбъекты как прогруженную		
				ЗапТС = Новый Запрос("ВЫБРАТЬ
				                     |	НезагруженныеОбъекты.Период КАК Период
				                     |ИЗ
				                     |	РегистрСведений.НезагруженныеОбъекты КАК НезагруженныеОбъекты
				                     |ГДЕ
				                     |	НезагруженныеОбъекты.КодОбъекта = &КодОбъекта
				                     |	И НезагруженныеОбъекты.ТипЗагрузки = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузок.ЗагрузкаИзАдминкиТарифныхСеток)");
				ЗапТС.УстановитьПараметр("КодОбъекта", ТарифнаяСеткаОбъект.Код);					 
				РезТС = ЗапТС.Выполнить();	
				
				Если НЕ РезТС.Пустой() Тогда	
					mas.ЗаписьВРСНезагруженныеОбъекты(Перечисления.ТипыЗагрузок.ЗагрузкаИзАдминкиТарифныхСеток, ТарифнаяСеткаОбъект.Код, Истина);
				КонецЕсли;	
				
	            //Делаем запись в РС ПериодыДействияТарифныхСеток, если дата начала не пустая
				Если Стр.applyDate > Дата("17530101") Тогда
					
					//CeHbKA
					Если ПроверитьНаличиеЗаписи(ДатаЗапроса, ТарифнаяСеткаОбъект.Ссылка, Стр.applyDate, Стр.dueDate) Тогда
						Продолжить;
					КонецЕсли; 
					
	                НаборЗаписей = РегистрыСведений.ПериодыДействияТарифныхСеток.СоздатьНаборЗаписей();
	                НаборЗаписей.Отбор.Период.Установить(ДатаЗапроса);
	                НаборЗаписей.Отбор.ТарифнаяСетка.Установить(ТарифнаяСеткаОбъект.Ссылка);
	                Запись = НаборЗаписей.Добавить();
	                Запись.Период = ДатаЗапроса;
	                Запись.ТарифнаяСетка = ТарифнаяСеткаОбъект.Ссылка;
	                Запись.ДатаНачала = Стр.applyDate;
	                Запись.ДатаОкончания = Стр.dueDate;
	                НаборЗаписей.Записать();
	            КонецЕсли;
	        Исключение
	            ЕстьОшибки = Истина;
	            #Если Клиент Тогда
	                Сообщить(ОписаниеОшибки()+" ID сетки: "+Стр.id);   
	            #КонецЕсли
	        КонецПопытки;
		КонецЕсли;
        
	КонецЦикла;
	
	
	// Загрузим расчетные брейки 		
	СписокТарифов = Лев(СписокТарифов, СтрДлина(СписокТарифов)-1);	
	
	Если СписокТарифов <> "" Тогда
		
		ТекстЗапросБрейков = "
		| SELECT [id]
		|,[internetShopId]
		|,[settingID]
		|,[tariffCategoryId]
		|,[baseTariffId]
		|,[minWeight]
		|,[maxWeight]
		|,[priceMoscow]
		|,[priceMO]
		|,[priceSelfDelivery]
		|,[tariffType]
		|,[name]
		|,[shortName]
		|,[tariffID]
		| FROM [tariff_ishop_byCategory]
		| WHERE [tariffID] in ("+ СтрЗаменить(СписокТарифов, Символы.НПП, "") +")";		
		ТаблицаБрейков = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапросБрейков);	
		
		Для каждого Стр Из ТаблицаБрейков Цикл				
			
			НайСетка = Справочники.ТарифныеСетки.НайтиПоКоду(СтрЗаменить(Стр.tariffID, Символы.НПП, ""));
			Если ЗначениеЗаполнено(НайСетка) Тогда
				
				НайБрейк = Справочники.РасчетныеБрейки.НайтиПоРеквизиту("КодБрейка", Число(СтрЗаменить(Стр.tariffCategoryId, Символы.НПП, "")),, НайСетка);		
				Если ЗначениеЗаполнено(НайБрейк) Тогда			
					БрейкОбъект = НайБрейк.ПолучитьОбъект();
				Иначе
					БрейкОбъект = Справочники.РасчетныеБрейки.СоздатьЭлемент();		
					БрейкОбъект.КодБрейка = Стр.tariffCategoryId;
				КонецЕсли;
				
				БрейкОбъект.Владелец = НайСетка;
				БрейкОбъект.Наименование = Стр.shortName;
				БрейкОбъект.ВесОт = Стр.minWeight;
				БрейкОбъект.ВесДо = Стр.maxWeight;			
				Попытка
					БрейкОбъект.Записать();
				Исключение
					#Если Клиент Тогда
		                Сообщить(ОписаниеОшибки()+" Код брейка: "+Стр.tariffCategoryId);   
		            #КонецЕсли
				КонецПопытки;			
			
			КонецЕсли;						
		КонецЦикла;
			
	КонецЕсли;	
	
	
	
	// Загрузка объемных брейков --->>>		
	Если СписокТарифов <> "" Тогда
		
		ТекстЗапросОбъемныхБрейков = "
		| SELECT [tariffID]
		|,[categoryId]
		|,[categoryName]
		|,[volumeFrom]
		|,[volumeTo]
		| FROM [tariff_intakeCategory]
		| WHERE [tariffID] in ("+ СписокТарифов +")";		
		ТаблицаОбъемныхБрейков = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапросОбъемныхБрейков);	
		
		Для каждого Стр Из ТаблицаОбъемныхБрейков Цикл				
			
			НайСетка = Справочники.ТарифныеСетки.НайтиПоКоду(СтрЗаменить(Стр.tariffID, Символы.НПП, ""));
			Если ЗначениеЗаполнено(НайСетка) Тогда
				
				НайБрейк_Об = Справочники.ОбъемныеБрейки.НайтиПоРеквизиту("КодБрейка", Число(СтрЗаменить(Стр.categoryId, Символы.НПП, "")),, НайСетка);		
				Если ЗначениеЗаполнено(НайБрейк_Об) Тогда			
					БрейкОбъект_Об = НайБрейк_Об.ПолучитьОбъект();
				Иначе
					БрейкОбъект_Об = Справочники.ОбъемныеБрейки.СоздатьЭлемент();		
					БрейкОбъект_Об.КодБрейка = Стр.categoryId;
				КонецЕсли;
				
				БрейкОбъект_Об.Владелец = НайСетка;
				БрейкОбъект_Об.Наименование = Стр.categoryName;
				БрейкОбъект_Об.ОбъемОт = Стр.volumeFrom;
				БрейкОбъект_Об.ОбъемДо = Стр.volumeTo;			
				Попытка
					БрейкОбъект_Об.Записать();
				Исключение
					#Если Клиент Тогда
		                Сообщить(ОписаниеОшибки()+" Код брейка: "+Стр.categoryId);   
		            #КонецЕсли
				КонецПопытки;			
			
			КонецЕсли;						
		КонецЦикла;
			
	КонецЕсли;
	// Загрузка объемных брейков  --- <<<	
	
	//CeHbKA
	ЗагрузитьТарифыИзАдминки(ДатаЗагрузки);	
	//CeHbKA
    
    Если НЕ ЕстьОшибки Тогда 
        //Записываем в регистр сведений последнюю дату выгрузки данных
        НаборЗаписей = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Ключ.Установить("ДатаЗагрузкитарифныхСеток");
        Запись = НаборЗаписей.Добавить();
        Запись.Значение = ДатаВСтроку(ДатаЗапроса);
        Запись.Ключ = "ДатаЗагрузкиТарифныхСеток";
        НаборЗаписей.Записать();
    КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьТарифнаяСетка (ТарифнаяСеткаОбъект,Стр)
	
	ТарифнаяСеткаОбъект.Код = Формат(Стр.Id, "ЧГ=");
	//Асеев 15.04.2022 (Задача № 4783)>>>
	//Владелец = Справочники.Контрагенты.НайтиПоКоду("Shop_"+Стр.internetShopID);
	Владелец = Справочники.Контрагенты.НайтиПоКоду("Shop_" + Формат(Стр.internetShopID, "ЧГ="));
	//Асеев 15.04.2022 (Задача № 4783)<<<
    Если ЗначениеЗаполнено(Владелец) Тогда
        ТарифнаяСеткаОбъект.Владелец = Владелец; 
		
		ТарифнаяСеткаОбъект.Наименование = Стр.name;
		ТарифнаяСеткаОбъект.ТерминалПриема = Справочники.РегиональныеТерминалы.НайтиПоКоду(Стр.sourcePlaceId);
		ТарифнаяСеткаОбъект.ТерминалДоставки = Справочники.РегиональныеТерминалы.НайтиПоКоду(Стр.deliveryPlaceId);
	    ТипТарифа = Справочники.ТипыТарифов.НайтиПоКоду(Стр.tariffType);
	    Если ЗначениеЗаполнено(ТипТарифа) Тогда
	        ТарифнаяСеткаОбъект.ТипТарифа = ТипТарифа;
	    КонецЕсли;
		
		СтрRegion = Строка(Стр.RegionShemeID);
		//Если ПроверитьМосковскиеЛиРегионы(СтрRegion) Тогда
		Если СтрRegion <>  "" Тогда
		    КлассификаторТарификации = Справочники.новаКлассификаторРайонов.НайтиПоРеквизиту("IDsql",СтрRegion);
		    Если ЗначениеЗаполнено(КлассификаторТарификации) Тогда //И КлассификаторТарификации.IDsql = "2" Тогда
		        ТарифнаяСеткаОбъект.КлассификаторТарификации = КлассификаторТарификации;
		        ТарифнаяСеткаОбъект.ДоступныеЗоныТарификации.Очистить();
		        Для каждого Строка Из КлассификаторТарификации.ДоступныеЗоныТарификации Цикл
		            СтрокаТарифнойСетки = ТарифнаяСеткаОбъект.ДоступныеЗоныТарификации.Добавить(); 
		            ЗаполнитьЗначенияСвойств(СтрокаТарифнойСетки,Строка);
		        КонецЦикла;        
			КонецЕсли;
		КонецЕсли;
	
		СтрRegion = Строка(Стр.intakeRegionSchemeID);
		//Если ПроверитьМосковскиеЛиРегионы(СтрRegion) Тогда
		Если СтрRegion <>  "" Тогда
		    КлассификаторТарификации = Справочники.новаКлассификаторРайонов.НайтиПоРеквизиту("IDsql",СтрRegion);
		    Если ЗначениеЗаполнено(КлассификаторТарификации) Тогда //И КлассификаторТарификации.IDsql = "2" Тогда
		        ТарифнаяСеткаОбъект.КлассификаторТарификацииЗаборов = КлассификаторТарификации;
		        ТарифнаяСеткаОбъект.ДоступныеЗоныТарификацииЗаборов.Очистить();
		        Для каждого Строка Из КлассификаторТарификации.ДоступныеЗоныТарификации Цикл
		            СтрокаТарифнойСетки = ТарифнаяСеткаОбъект.ДоступныеЗоныТарификацииЗаборов.Добавить(); 
		            ЗаполнитьЗначенияСвойств(СтрокаТарифнойСетки,Строка);
		        КонецЦикла;        
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Михушкин - помечаем сетку как незагруженную в РС НезагруженныеОбъекты --->> 
		mas.ЗаписьВРСНезагруженныеОбъекты(Перечисления.ТипыЗагрузок.ЗагрузкаИзАдминкиТарифныхСеток, ТарифнаяСеткаОбъект.Код, Ложь, "Не найден контрагент");
		ТарифнаяСеткаОбъект = Неопределено;
		// <<--- Михушкин 			
    КонецЕсли;
    
КонецПроцедуры

Функция ПроверитьМосковскиеЛиРегионы(СтрRegion)
	Если СтрRegion <>  "" И СтрRegion <>  "3" И СтрRegion <>  "6" И СтрRegion <>  "7" Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//CeHbKA
Функция ПроверитьНаличиеЗаписи(Период, ТарифнаяСетка, ДатаНачала, ДатаОкончания) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыДействияТарифныхСетокСрезПоследних.Период КАК Период,
		|	ПериодыДействияТарифныхСетокСрезПоследних.ТарифнаяСетка КАК ТарифнаяСетка,
		|	ПериодыДействияТарифныхСетокСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	ПериодыДействияТарифныхСетокСрезПоследних.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.ПериодыДействияТарифныхСеток.СрезПоследних(&Период, ТарифнаяСетка = &ТарифнаяСетка) КАК ПериодыДействияТарифныхСетокСрезПоследних
		|ГДЕ
		|	ПериодыДействияТарифныхСетокСрезПоследних.ДатаНачала = &ДатаНачала
		|	И ПериодыДействияТарифныхСетокСрезПоследних.ДатаОкончания = &ДатаОкончания";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТарифнаяСетка", ТарифнаяСетка);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции	

Процедура ЗагрузитьТарифыИзАдминки(ДатаЗагрузки)

	ТекстЗапроса = 
	//"SELECT wp.id, wp.idRegion, wp.priceType, wp.price, wp.PriceKm, tib.tariffCategoryId as idCategory, t.modifyDate, tib.tariffID FROM ts_tariff t
	//CeHbKA #3779
	
	//Геннадий #3779 16.02.2021 ->
	//"SELECT wp.id, wp.idRegion, wp.priceType, wp.price, wp.PriceKm, tib.tariffCategoryId as idCategory, t.modifyDate, tib.tariffID, tib.priceReturn, tib.percentPriceReturn, tib.priceSelfDelivery, tib.selfDeliveryPriceReturn FROM ts_tariff t
	"SELECT wp.id, wp.idRegion, wp.priceType, wp.price, wp.PriceKm, tib.tariffCategoryId as idCategory, t.modifyDate, tib.tariffID, tib.priceReturn, tib.percentPriceReturn, tib.priceSelfDelivery, tib.selfDeliveryPriceReturn, tib.priceReturnWithArrival,  tib.percentPriceReturnWithArrival, tib.priceReturnPartBuyout, tib.percentPriceReturnPartBuyout FROM ts_tariff t
	//Геннадий #3779 <-
	|INNER JOIN tariff_ishop_byCategory tib ON t.id = tib.tariffID 
	|INNER JOIN ts_weightCategoryPrice wp ON tib.id = wp.idCategory
	|WHERE t.modifyDate >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";
	ТЗ = СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);	
	ЗаписатьТарифыИзАдминкиВРС(ТЗ, Перечисления.ВидыТарифовРасчетУслугСД.Доставка);
		
	ТекстЗапроса = 
	//"SELECT wp.id, wp.idRegion, wp.priceType, wp.price, wp.PriceKm, tib.tariffCategoryId as idCategory, t.modifyDate, tib.tariffID FROM ts_tariff t
	//CeHbKA #3779
	
	//Геннадий #3779 16.02.2021 ->
	//"SELECT wp.id, wp.idRegion, wp.priceType, wp.price, wp.PriceKm, tib.tariffCategoryId as idCategory, t.modifyDate, tib.tariffID, tib.priceReturn, tib.percentPriceReturn, tib.priceSelfDelivery, tib.selfDeliveryPriceReturn FROM ts_tariff t
	"SELECT wp.id, wp.idRegion, wp.priceType, wp.price, wp.PriceKm, tib.tariffCategoryId as idCategory, t.modifyDate, tib.tariffID, tib.priceReturn, tib.percentPriceReturn, tib.priceSelfDelivery, tib.selfDeliveryPriceReturn, tib.priceReturnWithArrival,  tib.percentPriceReturnWithArrival, tib.priceReturnPartBuyout, tib.percentPriceReturnPartBuyout FROM ts_tariff t
	//Геннадий #3779 <-
	|INNER JOIN tariff_ishop_byCategory tib ON t.id = tib.tariffID 
	|INNER JOIN ts_weightCategoryPriceShift wp ON tib.id = wp.idCategory
	|WHERE t.modifyDate >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";
    ТЗ = СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);	
	ЗаписатьТарифыИзАдминкиВРС(ТЗ, Перечисления.ВидыТарифовРасчетУслугСД.ПереносСЗаездом);
	
КонецПроцедуры

Процедура ЗаписатьТарифыИзАдминкиВРС(ТабЗнач, ВидТарифа)
	
	НовТЗ = Новый ТаблицаЗначений;
	НовТЗ.Колонки.Добавить("id", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("idCategory", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("idRegion", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("priceType", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("price", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("PriceKm", Новый ОписаниеТипов("Число"));
	//CeHbKA #3779
	НовТЗ.Колонки.Добавить("priceReturn", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("percentPriceReturn", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("priceSelfDelivery", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("selfDeliveryPriceReturn", Новый ОписаниеТипов("Число"));
	//CeHbKA #3779
	//Геннадий #3779 16.02.2021 ->
	НовТЗ.Колонки.Добавить("priceReturnWithArrival", 		Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("percentPriceReturnWithArrival", Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("priceReturnPartBuyout", 		Новый ОписаниеТипов("Число"));
	НовТЗ.Колонки.Добавить("percentPriceReturnPartBuyout", 	Новый ОписаниеТипов("Число"));
	//Геннадий #3779 <-
	
	МассивТипов = Новый Массив;
  	КС = Новый КвалификаторыСтроки(50);
    МассивТипов.Добавить(Тип("Строка"));
    ОписаниеТиповС = Новый ОписаниеТипов(МассивТипов, , , ,КС);
    МассивТипов.Очистить();	
	НовТЗ.Колонки.Добавить("tariffID", ОписаниеТиповС);
	
	Для каждого ТекСтрока Из ТабЗнач Цикл
		НС = НовТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ТекСтрока);
		НС.tariffID = СтрЗаменить(ТекСтрока.tariffID, Символы.НПП, "");
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаSQL.id КАК id,
		|	ТаблицаSQL.idCategory КАК idCategory,
		|	ТаблицаSQL.idRegion КАК idRegion,
		|	ТаблицаSQL.tariffID КАК tariffID,
		|	ТаблицаSQL.price КАК price,
		|	ТаблицаSQL.PriceKm КАК PriceKm,
		//CeHbKA #3779
		|	ТаблицаSQL.priceReturn КАК priceReturn,
		|	ТаблицаSQL.percentPriceReturn КАК percentPriceReturn,
		|	ТаблицаSQL.priceSelfDelivery КАК priceSelfDelivery,
		|	ТаблицаSQL.selfDeliveryPriceReturn КАК selfDeliveryPriceReturn,
		//CeHbKA #3779		
		//Геннадий #3779 16.02.2021 ->
		|	ТаблицаSQL.priceReturnWithArrival КАК priceReturnWithArrival,
		|	ТаблицаSQL.percentPriceReturnWithArrival КАК percentPriceReturnWithArrival,
		|	ТаблицаSQL.priceReturnPartBuyout КАК priceReturnPartBuyout,
		|	ТаблицаSQL.percentPriceReturnPartBuyout КАК percentPriceReturnPartBuyout
		//Геннадий #3779 <-
		|ПОМЕСТИТЬ ТаблицаSQL
		|ИЗ
		|	&ТаблицаЗначений КАК ТаблицаSQL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаSQL.idCategory КАК idCategory,
		|	ТаблицаSQL.idRegion КАК idRegion,
		|	isnull(РасчетныеБрейки.Ссылка, Значение(Справочник.РасчетныеБрейки.ПустаяСсылка)) КАК РасчетныйБрейк,
		|	isnull(ГруппыРайонов.Ссылка, Значение(Справочник.ГруппыРайонов.ПустаяСсылка)) КАК ЗонаДоставки,
		|	&ВидТарифа КАК ВидТарифа,
		|	ТаблицаSQL.id КАК ИдентификаторЗаписиВАдминке,
		|	ТаблицаSQL.price КАК СтоимостьДоставки,
		|	ТаблицаSQL.PriceKm КАК СтоимостьКилометраОтГраницОбласти,
		//CeHbKA #3779
		|	ТаблицаSQL.priceReturn КАК СтоимостьВозвратаПоДоставке,
		|	ТаблицаSQL.percentPriceReturn КАК СтоимостьВозвратаПоДоставкеВПроцентахОтСтоимостиДоставки,
		|	ТаблицаSQL.priceSelfDelivery КАК СтоимостьСамовывоза,
		|	ТаблицаSQL.selfDeliveryPriceReturn КАК СтоимостьВозвратаПоСамовывозу,
		//CeHbKA #3779		
		//Геннадий #3779 16.02.2021 ->
		|	ТаблицаSQL.priceReturnWithArrival КАК СтоимостьВозвратаПоДоставкеЗаезд,
		|	ТаблицаSQL.percentPriceReturnWithArrival КАК СтоимостьВозвратаПоДоставкеЗаездВПроцентахОтСтоимостиДоставки,
		|	ТаблицаSQL.priceReturnPartBuyout КАК СтоимостьВозвратаПоДоставкеЧастичныйВыкуп,
		|	ТаблицаSQL.percentPriceReturnPartBuyout КАК СтоимостьВозвратаПоДоставкеЧастичныйВыкупВПроцентахОтСтоимостиДоставки
		//Геннадий #3779 <-
		|ИЗ
		|	ТаблицаSQL КАК ТаблицаSQL
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РасчетныеБрейки КАК РасчетныеБрейки
		|		ПО ТаблицаSQL.idCategory = РасчетныеБрейки.КодБрейка
		|		И ТаблицаSQL.tariffID = РасчетныеБрейки.Владелец.Код
		|		И (НЕ РасчетныеБрейки.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРайонов КАК ГруппыРайонов
		|		ПО ТаблицаSQL.idRegion = ГруппыРайонов.КодТарифа
		|			И ГруппыРайонов.Ссылка В ИЕРАРХИИ (&СектораТарификации)		
		|		И (НЕ ГруппыРайонов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("СектораТарификации", Справочники.ГруппыРайонов.СектораТарификации);
	Запрос.УстановитьПараметр("ТаблицаЗначений", НовТЗ);
	Запрос.УстановитьПараметр("ВидТарифа", ВидТарифа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//ТЗ = РезультатЗапроса.Выгрузить();	
	//ТЗ.ВыбратьСтроку();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.РасчетныйБрейк.Пустая()
			ИЛИ ВыборкаДетальныеЗаписи.ЗонаДоставки.Пустая() 
			ИЛИ ВыборкаДетальныеЗаписи.ИдентификаторЗаписиВАдминке = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Набор = РегистрыСведений.ТарифыСД.СоздатьНаборЗаписей();
		Набор.Отбор.РасчетныйБрейк.Установить(ВыборкаДетальныеЗаписи.РасчетныйБрейк);
		Набор.Отбор.ЗонаДоставки.Установить(ВыборкаДетальныеЗаписи.ЗонаДоставки);
		Набор.Отбор.ВидТарифа.Установить(ВыборкаДетальныеЗаписи.ВидТарифа);
		Набор.Отбор.ИдентификаторЗаписиВАдминке.Установить(ВыборкаДетальныеЗаписи.ИдентификаторЗаписиВАдминке);
		
		Набор.Прочитать();
		
		Если Набор.Количество() > 0 Тогда
			
			Если (ВыборкаДетальныеЗаписи.СтоимостьДоставки = Набор[0].СтоимостьДоставки)
				И (ВыборкаДетальныеЗаписи.СтоимостьКилометраОтГраницОбласти = Набор[0].СтоимостьКилометраОтГраницОбласти) 
				//Геннадий #3779 02.03.2021 ->
				И (ВыборкаДетальныеЗаписи.СтоимостьВозвратаПоДоставкеЗаезд = Набор[0].СтоимостьВозвратаПоДоставкеЗаезд) 
				И (ВыборкаДетальныеЗаписи.СтоимостьВозвратаПоДоставкеЗаездВПроцентахОтСтоимостиДоставки 		 = Набор[0].СтоимостьВозвратаПоДоставкеЗаездВПроцентахОтСтоимостиДоставки) 
				И (ВыборкаДетальныеЗаписи.СтоимостьВозвратаПоДоставкеЧастичныйВыкуп 							 = Набор[0].СтоимостьВозвратаПоДоставкеЧастичныйВыкуп) 
				И (ВыборкаДетальныеЗаписи.СтоимостьВозвратаПоДоставкеЧастичныйВыкупВПроцентахОтСтоимостиДоставки = Набор[0].СтоимостьВозвратаПоДоставкеЧастичныйВыкупВПроцентахОтСтоимостиДоставки) Тогда
				//Геннадий <-
				Продолжить;	
			КонецЕсли;
			
		КонецЕсли; 
		
		Набор.Очистить();
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		
		Попытка
			Набор.Записать();		
		Исключение			
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки()+" - "+Запись.РасчетныйБрейк + "; " + Запись.ЗонаДоставки + "; " + Запись.ВидТарифа + "; " + Запись.ИдентификаторЗаписиВАдминке);   
			#КонецЕсли			
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти 

#Область ПолучениеНомераДляСМС
//////////////////////////////////////////-----Получение номера для СМС------///////////////////////////

Функция ПолучитьНомерДляОтправкиСМС(Телефон) Экспорт
    //Символы которые будут пропускаться при обходе строки
    СимволыИскллючения = Новый Массив;
    СимволыИскллючения.Добавить("-");
    СимволыИскллючения.Добавить("(");
    СимволыИскллючения.Добавить(")");
	//Геннадий 03.07.2020 ->
    СимволыИскллючения.Добавить(" ");//код символа 32
    СимволыИскллючения.Добавить(" ");//код символа 160
    СимволыИскллючения.Добавить("+");
	//Геннадий 03.07.2020 <-
    
    //Получим строку с разделителем
    НомерСРазделителями = ВернутьЦифрыСРазделителем(Телефон,"/",СимволыИскллючения);
    //Получим массив номеров
    МассивНомеров = РазложитьСтрокуВМассивПодстрок_smv(НомерСРазделителями,"/");
    
    //Сформируем таблицу номеров
    ТаблицаНомеров = Новый ТаблицаЗначений;
    ТаблицаНомеров.Колонки.Добавить("Номер");
    ТаблицаНомеров.Колонки.Добавить("Мобильный");
    Для каждого Стр Из МассивНомеров Цикл
        //Костыль на длинные номера 
        Если СтрДлина(Стр)>11 Тогда
            Если Сред(Стр,1,1) = "7" Или Сред(Стр,1,1) = "8"  Тогда
                Стр = Лев(Стр,11)
            Иначе
                Стр = Лев(Стр,10)
            КонецЕсли;
        ИначеЕсли СтрДлина(Стр) > 10 И Сред(Стр,1,1) <> "7" И Сред(Стр,1,1) <> "8" Тогда
                Стр = Лев(Стр,10)
        КонецЕсли;
        
        //Приведем номер к шаблону
        Номер = ПривестиТелефонКВидуДляСМС(Стр);
        Если ЗначениеЗаполнено(Номер) Тогда
            СтрокаТЗ = ТаблицаНомеров.Добавить();
            СтрокаТЗ.Номер = Номер;
            Если Сред(Номер,2,1) = "9" Тогда
                СтрокаТЗ.Мобильный = Истина;    
            Иначе
                СтрокаТЗ.Мобильный = Ложь; 
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    //Найдем первый попавшийся мобильный
    СтрокаТаблицы = ТаблицаНомеров.Найти(Истина,"Мобильный");
    Если СтрокаТаблицы <> Неопределено Тогда 
        НомерТелефона = СтрокаТаблицы.Номер;
        Возврат НомерТелефона;
    Иначе
        Возврат "";
    КонецЕсли;
КонецФункции

Функция ПривестиТелефонКВидуДляСМС(ИсходныйНомер) Экспорт
	
	ДлинаНомера = СтрДлина(ИсходныйНомер);
	
	Буфер = ИсходныйНомер;
	
	ПриведенныйНомер = "";
	
	Для Символ=1 По Число(ДлинаНомера) Цикл
		
		ТекущийСимвол = Сред(Буфер, 1, 1);
		
		Если 	ТекущийСимвол = "0"
			ИЛИ ТекущийСимвол = "1"
			ИЛИ ТекущийСимвол = "2"
			ИЛИ ТекущийСимвол = "3"
			ИЛИ ТекущийСимвол = "4"
			ИЛИ ТекущийСимвол = "5"
			ИЛИ ТекущийСимвол = "6"
			ИЛИ ТекущийСимвол = "7"
			ИЛИ ТекущийСимвол = "8"
			ИЛИ ТекущийСимвол = "9"
			Тогда
			ПриведенныйНомер = ПриведенныйНомер + ТекущийСимвол;
		КонецЕсли;
				
		Если Число(СтрДлина(Буфер)) > 1 Тогда
			Буфер = Сред(Буфер, 2);
		КонецЕсли;
	КонецЦикла;	
	
	Если Число(СтрДлина(ПриведенныйНомер)) = 11
		И Сред(ПриведенныйНомер, 1, 1) = "8" Тогда
		ПриведенныйНомер = "7" + Сред(ПриведенныйНомер, 2, СтрДлина(ПриведенныйНомер) - 1);
    ИначеЕсли 	Число(СтрДлина(ПриведенныйНомер)) = 10 И  (Сред(ПриведенныйНомер, 1, 1) <> "8" И Сред(ПриведенныйНомер, 1, 1) <> "7") Тогда
		ПриведенныйНомер = "7" + ПриведенныйНомер;
	КонецЕсли;	
	
	//Возвращаем только полный номер
	Если Число(СтрДлина(ПриведенныйНомер)) = 11 Тогда
		Возврат ПриведенныйНомер;
    Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ОтклонениеЗаказаПоСтатусуАдминка 
/////////////////////////////////////////-----Отклонение заказа по статусу (админка)------//////////////

//Процедура создает и проводит документ УстановкаСтатусовСкладскогоУчета 
//Входящие данные тип (Структура)
//В структуре обязательно должны быть ключи:
//"Заказ" - тип ДокументСсылка.РеализацияТоваровУслуг
//"Дата" - тип ДатаВремя
//"РезультатДоставки" - тип СправочникСсылка.новаРезультатМестнойДоставки
//"ПричинаНевыполнения" - тип СправочникСсылка.ПричиныНеВыполнения
Процедура ОтклонитьЗаказПоСтатусуСкладскогоУчета(Параметры, axi = Ложь) Экспорт
    
    //Если заказ подтвержден создаем документ УстановкаСтатусовСкладскогоУчета и проводим его    
    Если ЗаказПодтвержденПриходом(Параметры.Заказ,Параметры.Дата,Справочники.СтатусыСкладскогоУчета.ПриходПроверен) И НебылоВозврата(Параметры.Заказ) Тогда
        СтатусСкладскогоУчета = ПолучитьСтатусСкладскогоУчетаВозвраты(Параметры.Заказ.Номер,Параметры.РезультатДоставки,Параметры.ПричинаНевыполнения,Параметры.ДатаЗаказа);
        //Если Статус не определен не создаем документ
        Если ЗначениеЗаполнено(СтатусСкладскогоУчета) Тогда
            ТипЗаказа = smv.ПолучитьТипЗаказа(Параметры.Заказ);
            ДокументОбъект = Документы.УстановкаСтатусовСкладскогоУчета.СоздатьДокумент();
            ДокументОбъект.Дата = ТекущаяДата();
            ДокументОбъект.Заказ = Параметры.Заказ;
            ДокументОбъект.СтатусСкладскогоУчета = СтатусСкладскогоУчета;
            ДокументОбъект.ТипЗаказа = ТипЗаказа;
            ДокументОбъект.РезультатДоставки = Параметры.РезультатДоставки;
            ДокументОбъект.ПричинаНевыполнения = Параметры.ПричинаНевыполнения;
			ДокументОбъект.ТерминалОбработки = Параметры.Заказ.ТерминалПриема;
			ДокументОбъект.axi = axi;
            Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
            Исключение
                #Если Клиент Тогда
                    Сообщить(ОписаниеОшибки());    
                #КонецЕсли
            КонецПопытки;
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

//Функция проверяет была ли инициализирована цепочка возврата по заказу.
//Истина - не была, Ложь - была
Функция НебылоВозврата(Заказ) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СтатусыСкладскогоУчета.СтатусСкладскогоУчета
        |ИЗ
        |   РегистрСведений.СтатусыСкладскогоУчета КАК СтатусыСкладскогоУчета
        |ГДЕ
        |   СтатусыСкладскогоУчета.СтатусСкладскогоУчета В(&СтатусСкладскогоУчета)
        |   И СтатусыСкладскогоУчета.Заказ = &Заказ";
        
    СписокСтатусовСкладскогоУчета = Новый СписокЗначений;
    СписокСтатусовСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.Возврат1);
    СписокСтатусовСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.Возврат2);
    СписокСтатусовСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.ВозвратОтправлен);
    СписокСтатусовСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.ВозвратПринятМагазином);
    СписокСтатусовСкладскогоУчета.Добавить(Справочники.СтатусыСкладскогоУчета.ПодготовленКВозврату);
    Запрос.УстановитьПараметр("СтатусСкладскогоУчета", СписокСтатусовСкладскогоУчета);
    Запрос.УстановитьПараметр("Заказ", Заказ);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
        Возврат Ложь;    
    Иначе
        Возврат Истина;
    КонецЕсли;

КонецФункции // НебылоВозврата()

#КонецОбласти 

#Область СинхронизацияКонтрагентовТолькоЯндекс
/////////////////////////////////////////Синхронизация контрагентов (Только Яндекс)------/////////////////////
Процедура РегламентСинхронизацияКонтрагентовЯндекса() Экспорт
    
    //Получим дату последней загрузки
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ПараметрыРегламентныхЗаданий.Значение КАК ДатаПоследнейЗагрузки
    |ИЗ
    |   РегистрСведений.ПараметрыРегламентныхЗаданий КАК ПараметрыРегламентныхЗаданий
    |ГДЕ
    |   ПараметрыРегламентныхЗаданий.Ключ = ""ДатаЗагрузкиКонтрагентовЯндекс""";
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        ДатаЗагрузки = Дата(ВыборкаДетальныеЗаписи.ДатаПоследнейЗагрузки);
    Иначе
        ДатаЗагрузки = Дата("17530101");
    КонецЕсли;
    
    //Определяем дату запроса
    ДатаЗапроса = ТекущаяДата();
    
    //Получим данные из базы SQL
    ТекстЗапроса = "Select * from ts_sender R (NOLOCK)   
    |where R.[modifyDate] >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";
    ТаблицаКонтрагентовЯндекс = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
    
    ЕстьОшибки = Ложь;
    //Создаем или меняем элементы справочника Контрагенты
    Для каждого Стр Из ТаблицаКонтрагентовЯндекс Цикл
        ////Получаем последний номер для нумерации
        //ПоследнийНомер = ПолучитьПоследнийНомерКонтрагента();
        
        //Найдем уже созданный элемент или созданим новый
        КонтрагентЯндексаНайденый = Справочники.Контрагенты.НайтиПоРеквизиту("YandexID",Стр.YandexID);
        Если ЗначениеЗаполнено(КонтрагентЯндексаНайденый) Тогда 
            КонтрагентЯндексаОбъект = КонтрагентЯндексаНайденый.ПолучитьОбъект();
        Иначе
            КонтрагентЯндексаОбъект = Справочники.Контрагенты.СоздатьЭлемент();
        КонецЕсли;
        
        //Заполняем элемент справочника контрагенты
        ЗаполнитьКонтрагентаЯндекс(КонтрагентЯндексаОбъект,Стр);
        
        Попытка
            //Записываем элемент
            КонтрагентЯндексаОбъект.Записать();
            
            //Делаем запись в РС Контактная Информация, если есть контактный телефон
            Если Стр.phones <> "" Тогда 
                НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
                НаборЗаписей.Отбор.Объект.Установить(КонтрагентЯндексаОбъект.Ссылка);
                НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Телефон);
                НаборЗаписей.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
                Запись = НаборЗаписей.Добавить();
                Запись.Объект = КонтрагентЯндексаОбъект.Ссылка;
                Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
                Запись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
                Запись.Представление = Стр.phones;
                НаборЗаписей.Записать();
            КонецЕсли;
        Исключение
            ЕстьОшибки = Истина;
            #Если Клиент Тогда
                Сообщить(ОписаниеОшибки()+" ID Контрагента: "+Стр.YandexID);   
            #КонецЕсли
        КонецПопытки;
    КонецЦикла;
    
    Если НЕ ЕстьОшибки Тогда 
        //Записываем в регистр сведений последнюю дату выгрузки данных
        НаборЗаписей = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Ключ.Установить("ДатаЗагрузкиКонтрагентовЯндекс");
        Запись = НаборЗаписей.Добавить();
        Запись.Значение = ДатаВСтроку(ДатаЗапроса);
        Запись.Ключ = "ДатаЗагрузкиКонтрагентовЯндекс";
        НаборЗаписей.Записать();
    КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьКонтрагентаЯндекс (КонтрагентЯндексаОбъект,Стр)
    КонтрагентЯндексаОбъект.Код = "248_"+Стр.SenderID;
    //Фиксированные значения
    КонтрагентЯндексаОбъект.Родитель = Справочники.Контрагенты.НайтиПоКоду("Shop_100");
    КонтрагентЯндексаОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
    КонтрагентЯндексаОбъект.Поставщик = Истина;
    КонтрагентЯндексаОбъект.Покупатель = Истина;
    КонтрагентЯндексаОбъект.РеквизитыНаБЗ = "Принципал: ООО ""Яндекс"", Агент: АО ""СТРИЖ-Логистик""";
    КонтрагентЯндексаОбъект.ЗаголовокИнтернетМагазина = "ООО Яндекс";
    КонтрагентЯндексаОбъект.Автопоступление = Истина;
    
    //Переменные значения
    КонтрагентЯндексаОбъект.Наименование = Стр.Name;
    КонтрагентЯндексаОбъект.НаименованиеПолное = Стр.incorporation;
    КонтрагентЯндексаОбъект.YandexID = Стр.YandexID;
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеПоказателейРасчетаУслугСД
Процедура РегламентОбновлениеПоказателейРасчетаУслугСД() Экспорт
    
    //Получим дату последней загрузки
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ПараметрыРегламентныхЗаданий.Значение КАК ДатаПоследнейЗагрузки
    |ИЗ
    |   РегистрСведений.ПараметрыРегламентныхЗаданий КАК ПараметрыРегламентныхЗаданий
    |ГДЕ
    |   ПараметрыРегламентныхЗаданий.Ключ = ""ДатаЗагрузкиПоказателейРасчетаУслугСД""";
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        ДатаЗагрузки = Дата(ВыборкаДетальныеЗаписи.ДатаПоследнейЗагрузки);
    Иначе
        ДатаЗагрузки = Дата("17530101");
    КонецЕсли;
    ДатаЗапроса = ТекущаяДата();
    //Получим данные из базы SQL
    ТекстЗапроса = "SELECT * FROM ts_service 
    |where modifyDate >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";
    ТаблицаПоказателиРасчетаУслугСД = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
    
    ЕстьОшибки = Ложь;
    //Создаем или меняем элементы справочника ПоказателиРасчетаУслугСД
    Для каждого Стр Из ТаблицаПоказателиРасчетаУслугСД Цикл
        //Первые три показателя не грузим
        Если Стр.ServiceId > 3 И Стр.ServiceId <> 6 Тогда 
            //Найдем уже созданный элемент
            ПоказательРасчетаУслугСДНайденый = Справочники.ПоказателиРасчетаУслугСД.НайтиПоРеквизиту("НомерПоказателяАдминки",Стр.ServiceId);
            //Показатель основная часть трогать нельзя
            Если ПоказательРасчетаУслугСДНайденый.Код <> "00000000001" тогда
                Если ЗначениеЗаполнено(ПоказательРасчетаУслугСДНайденый) Тогда 
                    ПоказательРасчетаУслугСДНайденыйОбъект = ПоказательРасчетаУслугСДНайденый.ПолучитьОбъект();
                    ЗаполнитьПоказательРасчетаУслуг(ПоказательРасчетаУслугСДНайденыйОбъект,Стр);
                Иначе
                    ПоказательРасчетаУслугСДНайденыйОбъект = Справочники.ПоказателиРасчетаУслугСД.СоздатьЭлемент();
                    ЗаполнитьПоказательРасчетаУслуг(ПоказательРасчетаУслугСДНайденыйОбъект,Стр);
                КонецЕсли;
                Попытка
                    //Записываем элемент
                    ПоказательРасчетаУслугСДНайденыйОбъект.Записать();
                Исключение
                    ЕстьОшибки = Истина;
                    #Если Клиент Тогда
                        Сообщить(ОписаниеОшибки()+" ID показателя: "+Стр.ServiceId);   
                    #КонецЕсли
                КонецПопытки;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    Если НЕ ЕстьОшибки Тогда 
        //Записываем в регистр сведений последнюю дату выгрузки данных
        НаборЗаписей = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Ключ.Установить("ДатаЗагрузкиПоказателейРасчетаУслугСД");
        Запись = НаборЗаписей.Добавить();
        Запись.Значение = ДатаВСтроку(ДатаЗапроса);
        Запись.Ключ = "ДатаЗагрузкиПоказателейРасчетаУслугСД";
        НаборЗаписей.Записать();
    КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоказательРасчетаУслуг (ПоказательОбъект,Стр)
    ПоказательОбъект.Наименование = Стр.name;
    ПоказательОбъект.НаименованиеКолонки = Стр.name;
    ПоказательОбъект.НомерПоказателяАдминки = Стр.ServiceId;
КонецПроцедуры

#КонецОбласти 

#Область ОтложенноеПроведениеЗакрытияЗаказов

Процедура РегламентОтложенноеПроведениеЗакрытияЗаказов() Экспорт
    Выборка = ПолучитьЗакрытияЗаказов();
    Пока Выборка.Следующий() Цикл
        ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
        //Две попытки проведения
        Для Сч = 1 По 2 Цикл
            Попытка
                ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				//ДвиженияПроведенныеЗакрытияЗаказов(ДокументОбъект.Ссылка,Истина,"");
                Сч = Сч+1; //документ провелся выходим из цикла
            Исключение
				//ДвиженияПроведенныеЗакрытияЗаказов(ДокументОбъект.Ссылка,Ложь,ОписаниеОшибки());
            КонецПопытки;
        КонецЦикла;
    КонецЦикла; 	

КонецПроцедуры

Функция ПолучитьЗакрытияЗаказов()

    //Выборка Закрытий за предыдущий день
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ЗакрытиеЗаказов.Ссылка КАК Документ
        |ИЗ
        |   Документ.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
        |ГДЕ
        |   НЕ ЗакрытиеЗаказов.Проведен
        |   И НЕ ЗакрытиеЗаказов.ПометкаУдаления
        |   И ЗакрытиеЗаказов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
        
    ДатаЗапроса = НачалоДня(ТекущаяДата())-1;
    Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаЗапроса));
    Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаЗапроса));
    
    Возврат  Запрос.Выполнить().Выбрать();
    

КонецФункции // ПолучитьЗакрытияЗаказов()

//Процедура ДвиженияПроведенныеЗакрытияЗаказов(Документ,Проведен,Комментарий)
//    Период = ТекущаяДата();
//    НаборЗаписей = РегистрыСведений.ПроведенныеЗакрытияЗаказов.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Период.Установить(Период);
//	НаборЗаписей.Отбор.Документ.Установить(Документ);
//    Запись = НаборЗаписей.Добавить();
//    Запись.Период = Период;
//    Запись.Документ = Документ;
//    Запись.Проведен = Проведен;
//    Запись.Комментарий = Комментарий;
//    НаборЗаписей.Записать();
//КонецПроцедуры


#КонецОбласти 

#Область ОбновлениеТелефоновКонтрагентов
Процедура РегламентОбновленияТелефоновКонтрагентов() Экспорт

    ТекстЗапроса = "select internetShopId, shopPhone from settings where modifyDate >='" + Евген.ДатаВSQL(ТекущаяДата(), Ложь) + "'";
    ТаблицаТелефоновКонтрагентов = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
	Для каждого Стр Из ТаблицаТелефоновКонтрагентов Цикл
		//Асеев 15.04.2022 (Задача № 4783)>>>
		//Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_"+Стр.internetShopId);
		Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_" + Формат(Стр.internetShopId, "ЧГ="));
		//Асеев 15.04.2022 (Задача № 4783)<<<
        Если ЗначениеЗаполнено(Контрагент) Тогда
            КонтрагентОбъект = Контрагент.ПолучитьОбъект();
            КонтрагентОбъект.ТелефонИнтернетМагазина = Стр.shopPhone;
            КонтрагентОбъект.Записать();
        КонецЕсли;
        
    КонецЦикла;


КонецПроцедуры

#КонецОбласти 

#Область РегламентОтправкиСМС

Процедура РегламентОтправкиСМС() Экспорт

    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   РейсЗаказы.Ссылка,
        |   РейсЗаказы.Ссылка.РейсМестнойДоставки
        |ИЗ
        |   Документ.Рейс.Заказы КАК РейсЗаказы
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
        |       ПО (НЕ новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута В (&ТочкаМаршрута))
        |           И РейсЗаказы.Ссылка.РейсМестнойДоставки = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
        |ГДЕ
        |   РейсЗаказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
        |   И РейсЗаказы.Ссылка.Проведен
        |   И РейсЗаказы.Ссылка.ДатаРейса МЕЖДУ &Дата1 И &Дата2
        |
        |СГРУППИРОВАТЬ ПО
        |   РейсЗаказы.Ссылка,
        |   РейсЗаказы.Ссылка.РейсМестнойДоставки";
    
    Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
    Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
    ТочкиМаршрута = Новый СписокЗначений;
    ТочкиМаршрута.Добавить(БизнесПроцессы.новаРейсМестнойДоставки.ТочкиМаршрута.РейсЗавершен);
    ТочкиМаршрута.Добавить(БизнесПроцессы.новаРейсМестнойДоставки.ТочкиМаршрута.РейсОтменен);
    Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкиМаршрута);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РейсМестнойДоставки) Тогда
            lem.ОтправитьСМСПоРейсу(ВыборкаДетальныеЗаписи.РейсМестнойДоставки);
            lem.УстановитьСтатусРейса(ВыборкаДетальныеЗаписи.РейсМестнойДоставки, Справочники.СтатусыРейсов.ПоРейсуОтправленыСМС);
        КонецЕсли;
    КонецЦикла;
	
	// Михушкин - 31.03.2016 - рассылка уведомлений на почту об отправке СМС --->> 	
	МассивРассылки = Новый Массив;
	//МассивРассылки.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
	//МассивРассылки.Добавить("evgeniy.marochkin@strizh-logistic.ru");	
	//МассивРассылки.Добавить("yulia.semenova@strizh-logistic.ru");
	//МассивРассылки.Добавить("aleksandr.muratov@strizh-logistic.ru");
	МассивРассылки.Добавить("igor.tischenko@strizh-logistic.ru");
	МассивРассылки.Добавить("pavel.golovatskiy@strizh-logistic.ru");

	ТемаРассылки  = "Сообщения СМС отправлены";
	ТекстРассылки = "Сообщения СМС отправлены";
	lem.ОтправитьСообщение(МассивРассылки, ТемаРассылки, ТекстРассылки);
	// <<--- Михушкин 
	
	ОбновитьЗапись_ПараметрыРегламентныхЗаданий("РассылкаОбУехавшихЗаказах");
	
	//Михушкин - Обработать выдачу курьеру (метод PostingGiveoutToCourier) для Озон за текущую дату --->>>
	//oz_РаботаССервисом.ОбработатьВыдачуКурьеру_OZON();
	// <<--- Михушкин

КонецПроцедуры

Процедура ОтправитьСМС() Экспорт
        #Если Клиент Тогда
            От = Вопрос("Будет выполнена отправка СМС по рейсам. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
            Если От = КодВозвратаДиалога.Да Тогда
                РегламентОтправкиСМС();
            КонецеСли;
        #КонецЕсли
КонецПроцедуры


#КонецОбласти 

#КонецОбласти 

#Область ПрочиеПроцедурыФункции

//Хз что, но надо
Функция ДатаВСтроку(Д) Экспорт
    Возврат Формат(Год(Д), "ЧГ=") + Евген.ЛидирующийНоль(Месяц(Д)) + Евген.ЛидирующийНоль(День(Д)) + Евген.ЛидирующийНоль(Час(Д)) + Евген.ЛидирующийНоль(Минута(Д)) + Евген.ЛидирующийНоль(Секунда(Д));
КонецФункции

//Вытаскивает цифры из строки
Функция НайтиЦифры (ИсходнаяСтрока) Экспорт
    //Массив цифр от 0 до 9
    МассивСимволов = Новый Массив;
    Для НомерСимвола = 48 По 57 Цикл
     МассивСимволов.Добавить(Символ(НомерСимвола));
    КонецЦикла; 
    
    //Ищем в строке цифры
    Цифры = "";
    Для Символ=1 По СтрДлина(ИсходнаяСтрока) Цикл
        ТекущийСимвол = Сред(ИсходнаяСтрока,Символ,1);
        Если МассивСимволов.Найти(ТекущийСимвол)<> Неопределено Тогда
            Цифры = Цифры+ТекущийСимвол;    
        КонецЕсли;
    КонецЦикла; 
    Возврат Цифры;
КонецФункции

//Старая лучше не использовать
Функция ПривестиТелефонКВиду(ИсходныйНомер) Экспорт
	
	ДлинаНомера = СтрДлина(ИсходныйНомер);
	
	Буфер = ИсходныйНомер;
	
	ПриведенныйНомер = "";
	
	Для Символ=1 По Число(ДлинаНомера) Цикл
		
		ТекущийСимвол = Сред(Буфер, 1, 1);
		
		//Если Символ=1 
		//	И ТекущийСимвол = 8 Тогда 
		//КонецЕсли;		
		
		Если 	ТекущийСимвол = "0"
			ИЛИ ТекущийСимвол = "1"
			ИЛИ ТекущийСимвол = "2"
			ИЛИ ТекущийСимвол = "3"
			ИЛИ ТекущийСимвол = "4"
			ИЛИ ТекущийСимвол = "5"
			ИЛИ ТекущийСимвол = "6"
			ИЛИ ТекущийСимвол = "7"
			ИЛИ ТекущийСимвол = "8"
			ИЛИ ТекущийСимвол = "9"
			Тогда
			ПриведенныйНомер = ПриведенныйНомер + ТекущийСимвол;
		КонецЕсли;
				
		Если Число(СтрДлина(Буфер)) > 1 Тогда
			Буфер = Сред(Буфер, 2);
		КонецЕсли;
	КонецЦикла;	
	
	Если Число(СтрДлина(ПриведенныйНомер)) = 11
		И Сред(ПриведенныйНомер, 1, 1) = "8" Тогда
		ПриведенныйНомер = "7" + Сред(ПриведенныйНомер, 2, СтрДлина(ПриведенныйНомер) - 1);
	ИначеЕсли 	Число(СтрДлина(ПриведенныйНомер)) = 10 Тогда
		ПриведенныйНомер = "7" + ПриведенныйНомер;
	КонецЕсли;	
	
	//если получившийся номер < 9, то это не мобила
	Если Число(СтрДлина(ПриведенныйНомер)) < 9 Тогда
		Возврат Неопределено;
	Иначе	
		Возврат ПриведенныйНомер;
	КонецЕсли;
	
КонецФункции	

//Отбразываем 7 и 8 из телефонного номера
Функция ПолучитьНомерБезКодаСтраны (Телефон) Экспорт
    Если СтрДлина(Телефон) = 11 И ( Сред(Телефон,1,1) = "8" ИЛИ Сред(Телефон,1,1) = "7" ) Тогда
        Возврат Прав(Телефон,10);
    ИначеЕсли СтрДлина(Телефон) = 10 И (Сред(Телефон,1,1) <> "8" И Сред(Телефон,1,1) <> "7")Тогда
        Возврат Телефон;
    ИначеЕсли СтрДлина(Телефон) > 11 И (Сред(Телефон,1,1) = "8" ИЛИ Сред(Телефон,1,1) = "7")Тогда
       Возврат Сред(Телефон,2,10);
    ИначеЕсли СтрДлина(Телефон) > 10 И (Сред(Телефон,1,1) <> "8" И Сред(Телефон,1,1) <> "7")Тогда
        Возврат Лев(Телефон,10);
    Иначе
        Возврат "";
    КонецЕсли;
КонецФункции

//Не допилена
Функция ПолучитьНомерСразделителем (Номер, Разделитель) Экспорт 
    НовыйНомер = "";
    Для Сч=1 По 10 Цикл
        Если Сч = 4 ИЛИ Сч= 7 ИЛИ Сч = 9 Тогда
            НовыйНомер = НовыйНомер+Разделитель+Сред(Номер,Сч,1); 
        Иначе
            НовыйНомер = НовыйНомер+Сред(Номер,Сч,1); 
        КонецЕсли;
    КонецЦикла;
    Возврат НовыйНомер;
КонецФункции

//Аналогична функции НайтиЦифры+добавлен разделитель и Символы исключения (символы которые будут пропускаться в цикле)
Функция ВернутьЦифрыСРазделителем (ИсходнаяСтрока,Разделитель,СимволыИсключения) Экспорт
    //Массив цифр от 0 до 9
    МассивСимволов = Новый Массив;
    Для НомерСимвола = 48 По 57 Цикл
     МассивСимволов.Добавить(Символ(НомерСимвола));
    КонецЦикла; 
    
    //Ищем в строке цифры
    Цифры = "";
    Для Символ=1 По СтрДлина(ИсходнаяСтрока) Цикл
        ТекущийСимвол = Сред(ИсходнаяСтрока,Символ,1);
        //Значит это цифра
        Если МассивСимволов.Найти(ТекущийСимвол)<> Неопределено Тогда
            Цифры = Цифры+ТекущийСимвол;
        //Значит это не символ исключения, вставляем разделитель
        ИначеЕсли СимволыИсключения.Найти(ТекущийСимвол)=Неопределено Тогда 
            Цифры = Цифры+Разделитель;   
        КонецЕсли;
    КонецЦикла; 
    Возврат Цифры;
КонецФункции

//Отличается от типовой, нет пустых строк
Функция РазложитьСтрокуВМассивПодстрок_smv(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                Если Стр <>"" Тогда
                    МассивСтрок.Добавить(Стр);
                КонецЕсли;
                Возврат МассивСтрок;
            КонецЕсли;
            Если Лев(Стр,Поз-1) <> "" Тогда
                МассивСтрок.Добавить(Лев(Стр,Поз-1));
            КонецЕсли;
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекущееСостояниеЗаказа(Ссылка) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   СостоянияЗаказовСрезПоследних.Период КАК Период,
        |   СостоянияЗаказовСрезПоследних.Регистратор,
        |   СостоянияЗаказовСрезПоследних.НомерСтроки,
        |   СостоянияЗаказовСрезПоследних.Активность,
        |   СостоянияЗаказовСрезПоследних.Доставка,
        |   СостоянияЗаказовСрезПоследних.Заказ,
        |   СостоянияЗаказовСрезПоследних.РезультатДоставки,
        |   СостоянияЗаказовСрезПоследних.ПричинаНеВыполнения,
        |   СостоянияЗаказовСрезПоследних.ПричинаОтказа,
        |   СостоянияЗаказовСрезПоследних.ДатаПереноса
        |ИЗ
        |   РегистрСведений.СостоянияЗаказов.СрезПоследних КАК СостоянияЗаказовСрезПоследних
        |ГДЕ
        |   СостоянияЗаказовСрезПоследних.Заказ = &Заказ
        |
        |УПОРЯДОЧИТЬ ПО
        |   Период УБЫВ";
    
    Запрос.УстановитьПараметр("Заказ", Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Возврат РезультатЗапроса;
    
КонецФункции // ()

Функция ПолучитьСостояниеЗаказаНаДату(Ссылка,Дата) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   СостоянияЗаказовСрезПоследних.Период КАК Период,
        |   СостоянияЗаказовСрезПоследних.Регистратор,
        |   СостоянияЗаказовСрезПоследних.НомерСтроки,
        |   СостоянияЗаказовСрезПоследних.Активность,
        |   СостоянияЗаказовСрезПоследних.Доставка,
        |   СостоянияЗаказовСрезПоследних.Заказ,
        |   СостоянияЗаказовСрезПоследних.РезультатДоставки,
        |   СостоянияЗаказовСрезПоследних.ПричинаНеВыполнения,
        |   СостоянияЗаказовСрезПоследних.ПричинаОтказа,
        |   СостоянияЗаказовСрезПоследних.ДатаПереноса
        |ИЗ
        |   РегистрСведений.СостоянияЗаказов.СрезПоследних(&Дата, ) КАК СостоянияЗаказовСрезПоследних
        |ГДЕ
        |   СостоянияЗаказовСрезПоследних.Заказ = &Заказ
        |
        |УПОРЯДОЧИТЬ ПО
        |   Период УБЫВ";
    
    Запрос.УстановитьПараметр("Заказ", Ссылка);
    Запрос.УстановитьПараметр("Дата", Дата);
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Возврат РезультатЗапроса;
    
КонецФункции // ()

//Функция возвращает сумму по поступлению
Функция ПолучитьСуммуЗаказаПоПоступлению(Номер) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
        |ИЗ
        |   (ВЫБРАТЬ
        |       ПоступлениеТоваровУслугТовары.Ссылка.Номер КАК Номер,
        |       ПоступлениеТоваровУслугТовары.Сумма КАК Сумма
        |   ИЗ
        |       Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
        |   ГДЕ
        |       ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
        |   
        |   ОБЪЕДИНИТЬ ВСЕ
        |   
        |   ВЫБРАТЬ
        |       ПоступлениеТоваровУслугУслуги.Ссылка.Номер,
        |       ПоступлениеТоваровУслугУслуги.Сумма
        |   ИЗ
        |       Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
        |   ГДЕ
        |       ПоступлениеТоваровУслугУслуги.Ссылка.Номер = &Номер) КАК ВложенныйЗапрос";
    
    Запрос.УстановитьПараметр("Номер", Номер);
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.Сумма;
    Иначе
        Возврат 0;
    КонецЕсли;
КонецФункции

//Функция определяет статус кладского учета для возвратных документов (не корректный, создаю новый)
Функция ПолучитьСтатусСкладскогоУчетаВозвраты(НомерЗаказа,РезультатДоставки,ПричинаНевыполнения,ДатаЗаказа) Экспорт 
    ДокументВозвратТоваров = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(НомерЗаказа,ДатаЗаказа);
    Если (ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда 
        ИЛИ ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.НеДоставлен)
        Тогда
        СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат1;
    ИначеЕсли РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично
        ИЛИ ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом 
        ИЛИ (НЕ ДокументВозвратТоваров = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка() И (НЕ ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда ИЛИ НЕ ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.НеДоставлен ))
        Тогда
        СтатусСкладскогоУчета = Справочники.СтатусыСкладскогоУчета.Возврат2;
        //Заглушка+ Нужно разобраться, потом убрать
    Иначе 
        СтатусСкладскогоУчета = Неопределено;
        //Заглушка-
    КонецЕсли;
    Возврат СтатусСкладскогоУчета;

КонецФункции // ПолучитьСтатусСкладскогоУчета()

//Возвращает тип заказа, пока только доставка, возврат, обмен, самовывоз...нужна доработка 
Функция ПолучитьТипЗаказа(Заказ) Экспорт
    ДокументВозвратТоваров = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Заказ.Номер);
    Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	новаМестнаяДоставка.Ссылка
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	            |		ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Ссылка = &Док";
	Зап.УстановитьПараметр("Док", Заказ);			
	
	Рез = Зап.Выполнить();

    Если НЕ ЗначениеЗаполнено(ДокументВозвратТоваров) И Рез.Пустой()  Тогда 
        ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
    ИначеЕсли НЕ ЗначениеЗаполнено(ДокументВозвратТоваров) И НЕ Рез.Пустой() Тогда
        ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
    ИначеЕсли Заказ.Товары.Количество() = 0 И Заказ.ПодарочныеПозиции.Количество() = 0 Тогда
        ТипЗаказа = Перечисления.ТипыЗаказов.Возврат;
    Иначе
        ТипЗаказа =  Перечисления.ТипыЗаказов.Обмен;
    КонецЕсли;
    Возврат ТипЗаказа;
    
КонецФункции // ПолучитьТипЗаказа()

//В разработке, нужно добавить фрахт и забор
Функция ПолучитьТипЗаказаNew (Заказ) Экспорт 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СУММА(ВложенныйЗапрос.Количество) КАК Количество,
        |   ВложенныйЗапрос.Номер
        |ПОМЕСТИТЬ ВТ_РеализацияКоличество
        |ИЗ
        |   (ВЫБРАТЬ
        |       РеализацияТоваровУслугТовары.Ссылка.Номер КАК Номер,
        |       РеализацияТоваровУслугТовары.Количество КАК Количество
        |   ИЗ
        |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |   ГДЕ
        |       НЕ РеализацияТоваровУслугТовары.Номенклатура.Артикул В
        |                   (ВЫБРАТЬ
        |                       УслугиПоЗаказам.Артикул
        |                   ИЗ
        |                       Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам)
        |       И РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер
        |   
        |   ОБЪЕДИНИТЬ ВСЕ
        |   
        |   ВЫБРАТЬ
        |       РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер,
        |       РеализацияТоваровУслугПодарочныеПозиции.Количество
        |   ИЗ
        |       Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
        |   ГДЕ
        |       НЕ РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Артикул В
        |                   (ВЫБРАТЬ
        |                       УслугиПоЗаказам.Артикул
        |                   ИЗ
        |                       Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам)
        |       И РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер) КАК ВложенныйЗапрос
        |
        |СГРУППИРОВАТЬ ПО
        |   ВложенныйЗапрос.Номер
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер,
        |   СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество
        |ПОМЕСТИТЬ ВТ_ВозвратПокупателяюКоличество
        |ИЗ
        |   Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
        |ГДЕ
        |   НЕ ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул В
        |               (ВЫБРАТЬ
        |                   УслугиПоЗаказам.Артикул
        |               ИЗ
        |                   Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам)
        |   И ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = &Номер
        |
        |СГРУППИРОВАТЬ ПО
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   новаМестнаяДоставка.Номер
        |ПОМЕСТИТЬ новаМестнаяДоставка
        |ИЗ
        |   БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
        |ГДЕ
        |   новаМестнаяДоставка.Номер = &Номер
        |   И НЕ новаМестнаяДоставка.ДоставкаИзмененаНаСамовывоз
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   РеализацияТоваровУслуг.Ссылка.Номер КАК РеализацияНомер,
        |   ВТ_ВозвратПокупателяюКоличество.Номер КАК ВозвратНомер,
        |   ЕСТЬNULL(ВТ_ВозвратПокупателяюКоличество.Количество, 0) КАК ВозвратКоличество,
        |   ЕСТЬNULL(ВТ_РеализацияКоличество.Количество, 0) КАК РеализацияКоличество,
        |   новаМестнаяДоставка.Номер КАК МестнаяДоставкаНомер
        |ПОМЕСТИТЬ ВТ_Итог
        |ИЗ
        |   Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеализацияКоличество КАК ВТ_РеализацияКоличество
        |       ПО РеализацияТоваровУслуг.Номер = ВТ_РеализацияКоличество.Номер
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВозвратПокупателяюКоличество КАК ВТ_ВозвратПокупателяюКоличество
        |       ПО РеализацияТоваровУслуг.Номер = ВТ_ВозвратПокупателяюКоличество.Номер
        |       ЛЕВОЕ СОЕДИНЕНИЕ новаМестнаяДоставка КАК новаМестнаяДоставка
        |       ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
        |ГДЕ
        |   РеализацияТоваровУслуг.Номер = &Номер
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВЫБОР
        |       КОГДА НЕ ВТ_Итог.МестнаяДоставкаНомер ЕСТЬ NULL 
        |           ТОГДА ВЫБОР
        |                   КОГДА ВТ_Итог.ВозвратНомер ЕСТЬ NULL 
        |                       ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
        |                   ИНАЧЕ ВЫБОР
        |                           КОГДА ВТ_Итог.РеализацияКоличество = 0
        |                                   И ВТ_Итог.ВозвратКоличество > 0
        |                               ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Возврат)
        |                           ИНАЧЕ ВЫБОР
        |                                   КОГДА ВТ_Итог.РеализацияКоличество > 0
        |                                           И ВТ_Итог.ВозвратКоличество > 0
        |                                       ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Обмен)
        |                                   ИНАЧЕ НЕОПРЕДЕЛЕНО
        |                               КОНЕЦ
        |                       КОНЕЦ
        |               КОНЕЦ
        |       ИНАЧЕ ВЫБОР
        |               КОГДА ВТ_Итог.ВозвратНомер ЕСТЬ NULL 
        |                   ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Самовывоз)
        |               ИНАЧЕ ВЫБОР
        |                       КОГДА ВТ_Итог.РеализацияКоличество = 0
        |                               И ВТ_Итог.ВозвратКоличество > 0
        |                           ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Возврат)
        |                       ИНАЧЕ ВЫБОР
        |                               КОГДА ВТ_Итог.РеализацияКоличество > 0
        |                                       И ВТ_Итог.ВозвратКоличество > 0
        |                                   ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Обмен)
        |                               ИНАЧЕ НЕОПРЕДЕЛЕНО
        |                           КОНЕЦ
        |                   КОНЕЦ
        |           КОНЕЦ
        |   КОНЕЦ КАК ТипЗаказа
        |ИЗ
        |   ВТ_Итог КАК ВТ_Итог";
    
    Запрос.УстановитьПараметр("Номер", Заказ.Номер);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
        Возврат ВыборкаДетальныеЗаписи.ТипЗаказа;    
    Иначе
        Возврат Неопределено
    КонецЕсли;
    
КонецФункции

//Проверят был ли заказ подтвержен приходом в РС Статсусы складского учета
Функция ЗаказПодтвержденПриходом(Заказ,Дата,Статус) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СтатусыСкладскогоУчетаСрезПоследних.Заказ
        |ИЗ
        |   РегистрСведений.СтатусыСкладскогоУчета.СрезПоследних(
        |           &ДатаСреза,
        |           СтатусСкладскогоУчета В (&Статус)
        |               И Заказ = &Заказ) КАК СтатусыСкладскогоУчетаСрезПоследних";
    
    Запрос.УстановитьПараметр("ДатаСреза", Дата);
    Запрос.УстановитьПараметр("Заказ", Заказ);
    СписокСтатусов = Новый СписокЗначений;
    СписокСтатусов.Добавить(Справочники.СтатусыСкладскогоУчета.ПриходЕстьНаСканере);
    СписокСтатусов.Добавить(Справочники.СтатусыСкладскогоУчета.ПриходПроверен);
    Запрос.УстановитьПараметр("Статус", СписокСтатусов);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;
КонецФункции // ПолучитьСтастусСкладскогоУчетаЗаказаНаДату()

Функция ПолучитьКонтрагентовИсключений(ТипСвязи) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   КонтрагеныИсключения.Владелец КАК Контрагент
    |ИЗ
    |   Справочник.КонтрагеныИсключения КАК КонтрагеныИсключения
    |ГДЕ
    |   КонтрагеныИсключения.ТипСвязи = &ТипСвязи";
    
    Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
    ТаблицаКонтрагентов = Запрос.Выполнить().Выгрузить();
    
    Возврат ТаблицаКонтрагентов;
КонецФункции // ПолучитьКонтрагентовИсключений()

//Пример использования РезультатЗапроса = smv.ПолучитьРезультатВыполненияВременнойТаблицы(Запрос, "ВТ_ИскомаяВременнаяТаблица");
Функция ПолучитьРезультатВыполненияВременнойТаблицы(Запрос, ИмяВременнойТаблицы) Экспорт
    
    ТекстЗапроса = Запрос.Текст; // После выполнения функции, в рабочий запрос надо вернуть прежний текст запроса
    
    Попытка
        Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы;  // Отладка
        РезультатЗапроса = Запрос.Выполнить().Выгрузить();
        
        Запрос.Текст = ТекстЗапроса;
        
        Возврат РезультатЗапроса;
        
    Исключение
        Запрос.Текст = ТекстЗапроса;
        
        ВызватьИсключение;
    КонецПопытки;
    
КонецФункции 

Функция ВЗаказеТолькоУслугиПоЗаказам(Номер) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер,
        |   ВозвратТоваровОтПокупателяТовары.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ КАК ЭтоУслугаПоЗаказам
        |ПОМЕСТИТЬ ВТ
        |ИЗ
        |   Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугТовары.Ссылка.Номер,
        |   РеализацияТоваровУслугТовары.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО РеализацияТоваровУслугТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугУслуги.Ссылка.Номер,
        |   РеализацияТоваровУслугУслуги.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО РеализацияТоваровУслугУслуги.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   РеализацияТоваровУслугУслуги.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер,
        |   РеализацияТоваровУслугПодарочныеПозиции.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ПоступлениеТоваровУслугТовары.Ссылка.Номер,
        |   ПоступлениеТоваровУслугТовары.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ПоступлениеТоваровУслугТовары.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ПоступлениеТоваровУслугУслуги.Ссылка.Номер,
        |   ПоступлениеТоваровУслугУслуги.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ПоступлениеТоваровУслугУслуги.Ссылка.Номер = &Номер
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер,
        |   ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура,
        |   ВЫБОР
        |       КОГДА УслугиПоЗаказам.Ссылка ЕСТЬ NULL 
        |           ТОГДА ЛОЖЬ
        |       ИНАЧЕ ИСТИНА
        |   КОНЕЦ
        |ИЗ
        |   Документ.ПоступлениеТоваровУслуг.ПодарочныеПозиции КАК ПоступлениеТоваровУслугПодарочныеПозиции
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
        |       ПО ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура.Артикул = УслугиПоЗаказам.Артикул
        |           И (НЕ УслугиПоЗаказам.ПометкаУдаления)
        |ГДЕ
        |   ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер = &Номер
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТ.Номер КАК Номер,
        |   ВТ.Номенклатура,
        |   МАКСИМУМ(ВТ.ЭтоУслугаПоЗаказам) КАК ЭтоУслугаПоЗаказам
        |ИЗ
        |   ВТ КАК ВТ
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТ.Номер,
        |   ВТ.Номенклатура
        |
        |УПОРЯДОЧИТЬ ПО
        |   Номер
        |АВТОУПОРЯДОЧИВАНИЕ";
    
    Запрос.УстановитьПараметр("Номер", Номер);
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    ЕстьНоменклатура = РезультатЗапроса.Найти(Ложь,"ЭтоУслугаПоЗаказам");
    Если ЕстьНоменклатура = Неопределено Тогда
        Возврат Истина; //только услуги
    Иначе
        Возврат Ложь; //есть номенклатура
    КонецЕсли;
    
КонецФункции // ()


Функция СформироватьТаблицуЗначенийИзДанныхSQL (ТекстЗапроса) Экспорт
	СоединениеSQL = Евген.СоздатьПодключениеКИнтернетМагазину();
    ЗаписиSQL = Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, СоединениеSQL);
    //Создаем таблицу
    Таблица = Новый ТаблицаЗначений;
    Для НомерСтолбца = 0 По ЗаписиSQL.Fields.Count-1 Цикл //Создание и добавление колонок во временную таблицу
        ИмяСтолбца =ЗаписиSQL.Fields.Item(НомерСтолбца).Name; 
        Таблица.Колонки.Добавить(ИмяСтолбца);
    КонецЦикла;
    
    Пока ЗаписиSQL.EOF=0 Цикл	// Заполнение созданной таблицы
        НоваяСтрока = Таблица.Добавить();
        Для НомерСтолбца = 0 По ЗаписиSQL.Fields.Count-1 Цикл
            НоваяСтрока.Установить(НомерСтолбца,ЗаписиSQL.Fields(НомерСтолбца).Value);
            //Сообщить ("Test " + ЗаписиSQL.Fields(ИмяСтолбца).Value + ИмяСтолбца);
        КонецЦикла;
        ЗаписиSQL.MoveNext();
    КонецЦикла;
    
    ЗаписиSQL.Close();
    СоединениеSQL.Close();
    Возврат Таблица;
КонецФункции // ()

Функция СформироватьТаблицуЗначенийИзДанныхSQLБезПодключения (СоединениеSQL,ТекстЗапроса) Экспорт
    //СоединениеSQL = Евген.СоздатьПодключениеКИнтернетМагазину();
    ЗаписиSQL = Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, СоединениеSQL);
    //Создаем таблицу
    Таблица = Новый ТаблицаЗначений;
    Для НомерСтолбца = 0 По ЗаписиSQL.Fields.Count-1 Цикл //Создание и добавление колонок во временную таблицу
        ИмяСтолбца =ЗаписиSQL.Fields.Item(НомерСтолбца).Name; 
        Таблица.Колонки.Добавить(ИмяСтолбца);
    КонецЦикла;
    
    Пока ЗаписиSQL.EOF=0 Цикл	// Заполнение созданной таблицы
        НоваяСтрока = Таблица.Добавить();
        Для НомерСтолбца = 0 По ЗаписиSQL.Fields.Count-1 Цикл
            НоваяСтрока.Установить(НомерСтолбца,ЗаписиSQL.Fields(НомерСтолбца).Value);
            //Сообщить ("Test " + ЗаписиSQL.Fields(ИмяСтолбца).Value + ИмяСтолбца);
        КонецЦикла;
        ЗаписиSQL.MoveNext();
    КонецЦикла;
    
    ЗаписиSQL.Close();
    СоединениеSQL.Close();
    Возврат Таблица;
КонецФункции // ()

Функция НайтиДокументыВозврата(Сделка) Экспорт 
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ВозвратТоваровПоставщику.Ссылка
        |ИЗ
        |   Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
        |ГДЕ
        |   ВозвратТоваровПоставщику.Сделка = &Сделка
        |   И НЕ ВозвратТоваровПоставщику.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Сделка", Сделка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат  ВыборкаДетальныеЗаписи.Ссылка;
    Иначе
        Возврат  Документы.ВозвратТоваровПоставщику.ПустаяСсылка();
    КонецЕсли;
КонецФункции // НайтиДокументыВозврата()

Функция СформироватьШтрихкод(Номер) Экспорт
	Штрихкод = "009" + Формат(Число(Номер), "ЧЦ=9; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + lem.КонтрольныйСимволEAN(ШтрихКод, 13);
	Возврат Штрихкод;
КонецФункции	

Процедура ЗаполнитьВзаимосвязьЗагрузкаСТСД(Объект) Экспорт
    //Находим номер наборной ведомости и ссылку на нее
    Для каждого Стр Из Объект.Штрихкоды Цикл
        Если  СтрДлина(Стр.Штрихкод) = 12 Тогда
            НомерНаборнойВедомости = Сред(Стр.Штрихкод,3,9);//было 5,10  //было Стр.Штрихкод,4,9 из-за нового кода наборной ведомости 
        КонецЕсли;
    КонецЦикла;
    ////Серегин М.В. 31.07.2015 15:18:44 устарело 
    //НомерНаборнойВедомости = Сред(Объект.Штрихкоды[0].Штрихкод,4,9);
    ////Серегин М.В. 31.07.2015 15:18:47 
    НаборнаяВедомостьДляВозвратаСсылка = Документы.НаборнаяВедомостьДляВозврата.НайтиПоНомеру(НомерНаборнойВедомости);
    //Добавляем записи в регистр Документ1 - ЗагрузкаСТСД, Документ2 - НаборнаяВедомость
    Если ЗначениеЗаполнено(НаборнаяВедомостьДляВозвратаСсылка)  Тогда
        НаборЗаписей = РегистрыСведений.ВзаимосвязьДокументов.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Документ1.Установить(Объект.Ссылка); 
        НаборЗаписей.Отбор.Документ2.Установить(НаборнаяВедомостьДляВозвратаСсылка);    
        Запись = НаборЗаписей.Добавить();
        Запись.Документ1 = Объект.Ссылка;
        Запись.Документ2 = НаборнаяВедомостьДляВозвратаСсылка;
        НаборЗаписей.Записать();
    КонецЕсли;
КонецПроцедуры

Функция ПолучитьМассивПолучателейЭлектроннойПочты(Контрагент,ТипРассылки,МассивПолучателей) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   РассылкиКонтрагентов.Почта
        |ИЗ
        |   РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
        |ГДЕ
        |   РассылкиКонтрагентов.Контрагент = &Контрагент
        |   И РассылкиКонтрагентов.ТипРассылки = &ТипРассылки";
    
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("ТипРассылки", ТипРассылки);
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        МассивПолучателей.Добавить(ВыборкаДетальныеЗаписи.Почта);
    КонецЦикла;
    
    Возврат МассивПолучателей;

КонецФункции // ПолучитьМассивПолучателейЭлектроннойПочты()

Функция НайтиДокументПоНомеруВнешнегоЗаказа(НомерВнешнегоЗаказа,Контрагент) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   РеализацияТоваровУслуг.Ссылка КАК Ссылка
        |ИЗ
        |   Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
        |ГДЕ
        |   РеализацияТоваровУслуг.НомерВнешнегоЗаказа = &НомерВнешнегоЗаказа
        |   И РеализацияТоваровУслуг.ВладелецТовара = &Контрагент
        |
        |УПОРЯДОЧИТЬ ПО
        |   Ссылка УБЫВ
        |АВТОУПОРЯДОЧИВАНИЕ";
    
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("НомерВнешнегоЗаказа", НомерВнешнегоЗаказа);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.Ссылка;
    Иначе
        Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
    КонецЕсли;
    
КонецФункции // ()

Функция ПолучитьПараметрыКонтрагента(Контрагент,Период) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа,
        |   ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты,
        |   ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара,
        |   ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа,
        |   ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента
        |ИЗ
        |   РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних";
    
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("Период", Период);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    ПараметрыКонтрагента = Новый Структура;
    Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
        ПараметрыКонтрагента.Вставить(Колонка.Имя);    
    КонецЦикла;
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ЗаполнитьЗначенияСвойств(ПараметрыКонтрагента,ВыборкаДетальныеЗаписи);    
    КонецЦикла;

    Возврат ПараметрыКонтрагента;
КонецФункции 

Функция ПолучитьДанныеСтавкиНУЭкипажей(СтатьяНУ,Период) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СтавкиНУЭкипажейСрезПоследних.Процент,
        |   СтавкиНУЭкипажейСрезПоследних.Сумма,
        |   СтавкиНУЭкипажейСрезПоследних.СтатьяНУ.ВариантРасчета КАК ТипРасчета
        |ИЗ
        |   РегистрСведений.СтавкиНУЭкипажей.СрезПоследних(&Период, СтатьяНУ = &СтатьяНУ) КАК СтавкиНУЭкипажейСрезПоследних";
    
    Запрос.УстановитьПараметр("СтатьяНУ", СтатьяНУ);
    Запрос.УстановитьПараметр("Период", Период);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    ДанныеСтавкиНУЭкипажей = Новый Структура;
    Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
        ДанныеСтавкиНУЭкипажей.Вставить(Колонка.Имя);    
    КонецЦикла;
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ЗаполнитьЗначенияСвойств(ДанныеСтавкиНУЭкипажей,ВыборкаДетальныеЗаписи);    
    КонецЦикла;

    Возврат ДанныеСтавкиНУЭкипажей;
    
КонецФункции

Функция ПолучитьДополнительныеПараметрыЗаказов(МассивЗаказов) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ *
        |ИЗ
        |   РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
        |ГДЕ
        |   ДополнительныеПараметрыЗаказа.Заказ В(&Заказы)";
    
    Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
    
    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДополнительныеПараметрыЗаказов()

Функция ПолучитьДополнительныеПараметрыЗаказовПоНомеру(МассивЗаказовНомера) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ *
        |ИЗ
        |   РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
        |ГДЕ
        |   ДополнительныеПараметрыЗаказа.Заказ.Номер В(&ЗаказыНомер)";
    
    Запрос.УстановитьПараметр("ЗаказыНомер", МассивЗаказовНомера);
    
    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДополнительныеПараметрыЗаказов()


#КонецОбласти

#Область ПланыОбмена


#Область ПланОбменаИзмененияДляМПСклад
//Подписка на событие ПриЗаписиДляОбменаСМобильнымПриложениемСклада
Процедура ОбменСМобильнымПриложением(Источник,Отказ) Экспорт
	//ВыборкаПланОбмена = ПланыОбмена.ИзмененияДляМПСклад.Выбрать();
	//МассивУзлов = Новый Массив;
	//Пока ВыборкаПланОбмена.Следующий() Цикл
	//    Если ВыборкаПланОбмена.Ссылка <> ПланыОбмена.ИзмененияДляМПСклад.ЭтотУзел() Тогда
	//        МассивУзлов.Добавить(ВыборкаПланОбмена.Ссылка);
	//    КонецеСли;	
	//КонецЦикла;	
	//
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
	//    НайденаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Источник.Номер);
	//    Если НайденаяДоставка = БизнесПроцессы.новаМестнаяДоставка.ПустаяСсылка() Тогда
	//        Возврат;    
	//    КонецЕсли;
	//КонецЕсли;
	//
	//Если МассивУзлов.Количество() <> 0 Тогда
	//    ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
	//КонецеСли;	
КонецПроцедуры

//Функция возвращает УзелОбмена, если нет узла, создает новый
//Входные параметры
//      ID - строка идентефикатор Узла
//      ТипМетаданных - Метаданные. и т.д
//      НаименованиеПланаОбмена - строка с названием ПланаОбмена
//Выходные данные
// УзелОбмена - ссылка на узел ПланаОбмена
Функция ПолучитьУзелПланаОбмена(ID,ТипМетаданных,НаименованиеПланаОбмена) Экспорт
    УзелОбмена = ПланыОбмена[НаименованиеПланаОбмена].НайтиПоКоду(СокрЛП(ID));
    Если УзелОбмена.Пустая() Тогда
        НовыйУзел = ПланыОбмена[НаименованиеПланаОбмена].СоздатьУзел();
        НовыйУзел.Код = СокрЛП(ID);
        НовыйУзел.Записать();
        ПланыОбмена.ЗарегистрироватьИзменения(НовыйУзел.Ссылка); 
        УзелОбмена = НовыйУзел.Ссылка;
    КонецЕсли;
    Возврат УзелОбмена;
КонецФункции

//Запись в лог обмена
Процедура ДобавитьЛогОбмена(Узел,ТипОбмена,Завершен,Описание) Экспорт
    //Если НЕ ОтключитьЛогОбмена Тогда 
    Дата = ТекущаяДата();
    НаборЗаписей = РегистрыСведений.ЛогОбмена.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Период.Установить(Дата);
    НаборЗаписей.Отбор.IDУзла.Установить(Узел);
    НаборЗаписей.Отбор.ТипОбмена.Установить(ТипОбмена);
    
    Запись = НаборЗаписей.Добавить();
    Запись.Период = Дата;
    Запись.IDУзла = Узел;
    Запись.ТипОбмена = ТипОбмена;
    Запись.Завершен = Завершен;
    Запись.Описание = Описание;
    
    НаборЗаписей.Записать();
    //КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПланОбменаИзмененияДляМПВодители
Процедура ОбменСМобильнымПриложениемВодители(Источник,Отказ) Экспорт
    ВыборкаПланОбмена = ПланыОбмена.ИзмененияДляМПВодители.Выбрать();
    МассивУзлов = Новый Массив;
    Пока ВыборкаПланОбмена.Следующий() Цикл
        Если ВыборкаПланОбмена.Ссылка <> ПланыОбмена.ИзмененияДляМПВодители.ЭтотУзел() Тогда
            МассивУзлов.Добавить(ВыборкаПланОбмена.Ссылка);
        КонецеСли;	
    КонецЦикла;	
    
    Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
        НайденаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(Источник.Номер);
        Если НайденаяДоставка = БизнесПроцессы.новаМестнаяДоставка.ПустаяСсылка() Тогда
            Возврат;    
        КонецЕсли;
    КонецЕсли;
    
    Если МассивУзлов.Количество() <> 0 Тогда
        ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
    КонецеСли;	
КонецПроцедуры


#КонецОбласти

#КонецОбласти 


#Область Штрихкодирование

Функция СформироватьКонтрольноеЧислоЗаббери(Штрихкод) Экспорт
	Сум = 0;
	Попытка
		Для Сч = 1 По СтрДлина(Штрихкод) Цикл
			Сум = Сум + Число(Сред(Штрихкод, Сч, 1));
		КонецЦикла;	
	Исключение
		Возврат 0;
	КонецПопытки;
	Возврат Сум;
КонецФункции

Функция ПолучитьМассивДополнительныхСимволов(ШаблонДобавочныхСимволов) Экспорт

    //Количество  -1 (индекс)
    КоличествоМассивов = ШаблонДобавочныхСимволов.Символы.Количество()-1;
    
    //Сформируем стуктуру массивов символов
    СтуктураМассивов = Новый Структура;
    Для СчМассивов = 0 По КоличествоМассивов Цикл
        СтуктураМассивов.Вставить("Массив"+СчМассивов,Новый Массив);        
    КонецЦикла;
    
    //Сформируем массивы символов
    Для СчМассивов = 0 По КоличествоМассивов Цикл
        Строка = ШаблонДобавочныхСимволов.Символы[СчМассивов];
        МассивВременный = СтуктураМассивов["Массив"+СчМассивов];
        Если ТипЗнч(Строка.НачальноеЗначение) = Тип("Строка") Тогда
            Для СчСимволы = КодСимвола(Строка.НачальноеЗначение) По КодСимвола(Строка.КонечноеЗначение) Цикл
                Если ЗначениеЗаполнено(Строка.ФорматСимвола) Тогда
                    ДобавочныйСимвол = Формат(Символ(СчСимволы),Строка.ФорматСимвола);
                Иначе
                    ДобавочныйСимвол = Символ(СчСимволы);
                КонецЕсли;
                МассивВременный.Добавить(ДобавочныйСимвол);
            КонецЦикла;   
        Иначе 
                   
            
            Для СчСимволы = Строка.НачальноеЗначение По Строка.КонечноеЗначение Цикл
                Если ЗначениеЗаполнено(Строка.ФорматСимвола) Тогда
                    ДобавочныйСимвол = Формат(СчСимволы,Строка.ФорматСимвола);
                Иначе
                    ДобавочныйСимвол = СчСимволы;
                КонецЕсли;
                МассивВременный.Добавить(ДобавочныйСимвол);
            КонецЦикла;   
        КонецЕсли;
    КонецЦикла; 
    
    //начальное заполнение массива, инициализация
    МассивСформированныхСимволов = Новый Массив;
    Для каждого Стр Из СтуктураМассивов["Массив"+КоличествоМассивов] Цикл
        МассивСформированныхСимволов.Добавить(Стр);
    КонецЦикла;
    Если КоличествоМассивов>1 Тогда 
        МассивСформированныхСимволов =  СформироватьИтоговыйМассив(МассивСформированныхСимволов,СтуктураМассивов,КоличествоМассивов,КоличествоМассивов-1);
    КонецЕсли;
    
    Возврат МассивСформированныхСимволов;
    
КонецФункции // ПолучитьМассивДополнительныхСимволов()

Функция СформироватьИтоговыйМассив(МассивСформированныхСимволов,СтуктураМассивов,КоличествоМассивов,СчМассивов)
    
    МассивВременный = Новый Массив;
    
    Для каждого Стр Из МассивСформированныхСимволов Цикл
        Для каждого СтрМассива Из СтуктураМассивов["Массив"+СчМассивов] Цикл
            Строка = Строка(СтрМассива)+Стр;
            МассивВременный.Добавить(Строка);
        КонецЦикла;
    КонецЦикла;
    
    //Рекурсия
    Пока СчМассивов > 0 Цикл
        СчМассивов = СчМассивов-1;
        МассивВременный =  СформироватьИтоговыйМассив(МассивВременный,СтуктураМассивов,КоличествоМассивов, СчМассивов);
    КонецЦикла;
    
    //Возвращаем результат
    Возврат МассивВременный;
КонецФункции

// Функция вычисляет контрольный символ кода EAN, аналогична типовой
//
// Параметры:
//  ШтрихКод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()

#КонецОбласти 

#Область maxoptra

// Основная логика:
Функция ВыгрузитьВCSV(имяФайлаCSV,ДатаНачала,ДатаОкончания,Выполнена) Экспорт
    разделитель = ";";
	ТаблицаЗначений = ПолучитьДанные(ДатаНачала,ДатаОкончания,Выполнена);
	текст = СоздатьДанныеCSV(ТаблицаЗначений,разделитель);
	ЗаписатьCSV(текст,имяФайлаCSV);

КонецФункции

// Выполним запрос к справочнику Номенклатуры
// Получим Таблицу Значений
Функция ПолучитьДанные(ДатаНачала,ДатаОкончания,Выполнена)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   новаМестнаяДоставка.Ссылка КАК новаМестнаяДоставка,
        |   ""["" + ПоступлениеТоваровУслугТовары.Номенклатура.Наименование + "",арт."" + ПоступлениеТоваровУслугТовары.Номенклатура.Артикул + ""]"" + ПоступлениеТоваровУслугТовары.Номенклатура.Код КАК orderItems
        |ПОМЕСТИТЬ ВТ_Товары
        |ИЗ
        |   БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
        |       ПО новаМестнаяДоставка.Ссылка = новаЗадачаМестнойДоставки.БизнесПроцесс
        |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
        |       ПО новаМестнаяДоставка.Номер = ПоступлениеТоваровУслугТовары.Ссылка.Номер
        |ГДЕ
        |   новаЗадачаМестнойДоставки.ТочкаМаршрута.Ссылка = &Ссылка
        |   И новаЗадачаМестнойДоставки.Выполнена = &Выполнена
        |   И новаМестнаяДоставка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   новаМестнаяДоставка.Ссылка,
        |   ""["" + ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура.Наименование + "",арт."" + ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура.Артикул + ""]"" + ПоступлениеТоваровУслугПодарочныеПозиции.Номенклатура.Код
        |ИЗ
        |   БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
        |       ПО новаМестнаяДоставка.Ссылка = новаЗадачаМестнойДоставки.БизнесПроцесс
        |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ПодарочныеПозиции КАК ПоступлениеТоваровУслугПодарочныеПозиции
        |       ПО новаМестнаяДоставка.Номер = ПоступлениеТоваровУслугПодарочныеПозиции.Ссылка.Номер
        |ГДЕ
        |   новаЗадачаМестнойДоставки.ТочкаМаршрута.Ссылка = &Ссылка
        |   И новаЗадачаМестнойДоставки.Выполнена = &Выполнена
        |   И новаМестнаяДоставка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТ_Товары.новаМестнаяДоставка.Номер КАК orderReference,
        |   ВТ_Товары.новаМестнаяДоставка.Дата КАК date,
        |   ""Склад"" КАК distributionCentreName,
        |   ""г.Москва, Огородный проезд, 20"" КАК distributionCentreAddress,
        |   """" КАК clientName,
        |   ВТ_Товары.новаМестнаяДоставка.Грузополучатель.Наименование КАК contactPerson,
        |   ВТ_Товары.новаМестнаяДоставка.Телефон КАК contactNumber,
        |   """" КАК contactEmail,
        |   """" КАК customerLocationName,
        |   ВТ_Товары.новаМестнаяДоставка.ТочкаПрибытия.Наименование КАК customerLocationAddress,
        |   """" КАК customerLocationGlobalId,
        |   """" КАК task,
        |   ЕСТЬNULL(КатегорииДоставки2014.КоличествоМинутНаРазгрузку, 0) КАК dropDuration,
        |   ВЫБОР
        |       КОГДА ВТ_Товары.новаМестнаяДоставка.ТочкаПрибытия.Москва
        |           ТОГДА ВЫБОР
        |                   КОГДА КатегорииДоставки2014.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.КГТ)
        |                       ТОГДА 200
        |                   КОГДА КатегорииДоставки2014.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.МГТ)
        |                       ТОГДА 100
        |                   КОГДА КатегорииДоставки2014.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.СГТ)
        |                       ТОГДА 150
        |               КОНЕЦ
        |       ИНАЧЕ ВЫБОР
        |               КОГДА КатегорииДоставки2014.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.КГТ)
        |                   ТОГДА 300
        |               КОГДА КатегорииДоставки2014.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.МГТ)
        |                   ТОГДА 150
        |               КОГДА КатегорииДоставки2014.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.СГТ)
        |                   ТОГДА 225
        |           КОНЕЦ
        |   КОНЕЦ КАК capacity,
        |   ВЫБОР
        |       КОГДА ВТ_Товары.новаМестнаяДоставка.Груз.Объем = 0
        |           ТОГДА КатегорииДоставки2014.ОбъемПоУмолчанию
        |       ИНАЧЕ ВТ_Товары.новаМестнаяДоставка.Груз.Объем
        |   КОНЕЦ КАК volume,
        |   ВТ_Товары.новаМестнаяДоставка.Груз.Стоимость КАК cost,
        |   ВТ_Товары.orderItems,
        |   ВЫРАЗИТЬ(ВТ_Товары.новаМестнаяДоставка.Комментарий КАК СТРОКА(255)) КАК additionalinstructions,
        |   КатегорииДоставки2014.Ссылка КАК vehicleRequirements,
        |   ВТ_Товары.новаМестнаяДоставка.ВремяПрибытияС КАК orderTimeFrom1,
        |   ВТ_Товары.новаМестнаяДоставка.ВремяПрибытияПо КАК orderTimeTo1,
        |   """" КАК orderTimeFrom2,
        |   """" КАК orderTimeTo2,
        |   ВТ_Товары.новаМестнаяДоставка.Дата КАК orderDateFrom,
        |   ВТ_Товары.новаМестнаяДоставка.Дата КАК orderDateTo,
        |   """" КАК dropWindowStart,
        |   """" КАК dropWindowEnd,
        |   """" КАК Priority,
        |   ВТ_Товары.новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК latitude,
        |   ВТ_Товары.новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК longitude,
        |   """" КАК schedulingZoneName,
        |   """" КАК is_return_packages,
        |   """" КАК return_packages_comments,
        |   """" КАК stopSequence,
        |   """" КАК sequenceInRun,
        |   """" КАК runNumber,
        |   """" КАК vehicleName,
        |   """" КАК allocationDate
        |ИЗ
        |   ВТ_Товары КАК ВТ_Товары
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииДоставки2014 КАК КатегорииДоставки2014
        |       ПО ВТ_Товары.новаМестнаяДоставка.КатегорияДоставки = КатегорииДоставки2014.Категория
        |ГДЕ
        |   НЕ ВТ_Товары.orderItems ЕСТЬ NULL 
        |ИТОГИ
        |   МАКСИМУМ(date),
        |   МАКСИМУМ(distributionCentreName),
        |   МАКСИМУМ(distributionCentreAddress),
        |   МАКСИМУМ(clientName),
        |   МАКСИМУМ(contactPerson),
        |   МАКСИМУМ(contactNumber),
        |   МАКСИМУМ(contactEmail),
        |   МАКСИМУМ(customerLocationName),
        |   МАКСИМУМ(customerLocationAddress),
        |   МАКСИМУМ(customerLocationGlobalId),
        |   МАКСИМУМ(task),
        |   МАКСИМУМ(dropDuration),
        |   МАКСИМУМ(capacity),
        |   МАКСИМУМ(volume),
        |   МАКСИМУМ(cost),
        |   МАКСИМУМ(additionalinstructions),
        |   МАКСИМУМ(vehicleRequirements),
        |   МАКСИМУМ(orderTimeFrom1),
        |   МАКСИМУМ(orderTimeTo1),
        |   МАКСИМУМ(orderTimeFrom2),
        |   МАКСИМУМ(orderTimeTo2),
        |   МАКСИМУМ(orderDateFrom),
        |   МАКСИМУМ(orderDateTo),
        |   МАКСИМУМ(dropWindowStart),
        |   МАКСИМУМ(dropWindowEnd),
        |   МАКСИМУМ(Priority),
        |   МАКСИМУМ(latitude),
        |   МАКСИМУМ(longitude),
        |   МАКСИМУМ(schedulingZoneName),
        |   МАКСИМУМ(is_return_packages),
        |   МАКСИМУМ(return_packages_comments),
        |   МАКСИМУМ(stopSequence),
        |   МАКСИМУМ(sequenceInRun),
        |   МАКСИМУМ(runNumber),
        |   МАКСИМУМ(vehicleName),
        |   МАКСИМУМ(allocationDate)
        |ПО
        |   orderReference";
    
    Запрос.УстановитьПараметр("Выполнена", Выполнена);
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    Запрос.УстановитьПараметр("Ссылка", БизнесПроцессы.новаМестнаяДоставка.ТочкиМаршрута.ПланированиеДоставки);
    
    РезультатЗапроса = Запрос.Выполнить();
    МассивКолонок = РезультатЗапроса.Колонки;
    ТаблицаЗначений = Новый ТаблицаЗначений;
    Для каждого Колонка Из МассивКолонок Цикл
        ТаблицаЗначений.Колонки.Добавить(Колонка.Имя);
    КонецЦикла;
    
    
    ВыборкаorderReference = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаorderReference.Следующий() Цикл
        СтрокаТЗ = ТаблицаЗначений.Добавить();
        ЗаполнитьЗначенияСвойств(СтрокаТЗ,ВыборкаorderReference);
        СтрокаТЗ.date = Формат(ВыборкаorderReference.date,"ДФ=дд.ММ.гггг");
        СтрокаТЗ.cost = Формат(ВыборкаorderReference.cost,"ЧГ=0");
        СтрокаТЗ.orderTimeFrom1 = Формат(ВыборкаorderReference.orderTimeFrom1,"ДФ=ЧЧ:мм");
        СтрокаТЗ.orderTimeTo1 = Формат(ВыборкаorderReference.orderTimeTo1,"ДФ=ЧЧ:мм");
        СтрокаТЗ.orderTimeFrom2 = Формат(ВыборкаorderReference.orderTimeFrom2,"ДФ=ЧЧ:мм");
        СтрокаТЗ.orderTimeTo2 = Формат(ВыборкаorderReference.orderTimeTo2,"ДФ=ЧЧ:мм");
        СтрокаТЗ.orderDateFrom = Формат(ВыборкаorderReference.orderDateFrom,"ДФ=дд.ММ.гггг");
        СтрокаТЗ.orderDateTo = Формат(ВыборкаorderReference.orderDateTo,"ДФ=дд.ММ.гггг");
        СтрокаТЗ.latitude = СтрЗаменить(ВыборкаorderReference.latitude,",",".");
        СтрокаТЗ.longitude = СтрЗаменить(ВыборкаorderReference.longitude,",",".");
        
        contactNumber = ОчиститьСтрокуcontactNumber(СтрокаТЗ.contactNumber);
        СтрокаТЗ.contactNumber = contactNumber;
        
        СтрокаТЗ.additionalinstructions = СтрЗаменить(СтрЗаменить(ВыборкаorderReference.additionalinstructions,Символы.ПС," "),Символ(13)," ");
        СтрокаТЗ.additionalinstructions = СтрЗаменить(СтрокаТЗ.additionalinstructions,";","");
        ТипЗаказа = smv.ПолучитьТипЗаказаNew(Документы.РеализацияТоваровУслуг.НайтиПоНомеру(ВыборкаorderReference.orderReference));
        Если ТипЗаказа = Перечисления.ТипыЗаказов.Возврат Тогда
            СтрокаТЗ.task = "сбор";
        Иначе
            СтрокаТЗ.task = "доставка";
        КонецЕсли;
        
        //+++++Серегин М.В. 02.10.2015 14:18:40 пока не нужно
        //СтрvehicleRequirements = "";
        //СчvehicleRequirements = 1;
        //Для каждого Стр Из ВыборкаorderReference.vehicleRequirements.ТипыТранспорта Цикл
        //    Если Стр.Доступен Тогда
        //        Если СчvehicleRequirements = ВыборкаorderReference.vehicleRequirements.ТипыТранспорта.Количество() Тогда
        //            СтрvehicleRequirements = СтрvehicleRequirements+Стр.ТипТранспорта;
        //        Иначе
        //            СтрvehicleRequirements = СтрvehicleRequirements+Стр.ТипТранспорта+",";
        //        КонецЕсли;
        //    КонецЕсли;
        //    СчvehicleRequirements =СчvehicleRequirements+ 1;
        //КонецЦикла;
        СтрvehicleRequirements = СокрЛП(ВыборкаorderReference.vehicleRequirements);
        СтрокаТЗ.vehicleRequirements = СтрvehicleRequirements;
        
        
        
        ВыборкаДетальныеЗаписи = ВыборкаorderReference.Выбрать();
        СтрorderItems = Символ(34);
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            //Очистим строку товар от лишнего мусора
            СтрНоменклатура = СокрЛП(ВыборкаДетальныеЗаписи.orderItems);
            СтрНоменклатура = СтрЗаменить(СтрНоменклатура,Символ(34),""); //"
            СтрНоменклатура = СтрЗаменить(СтрНоменклатура,Символ(13),""); //перенос 1
            СтрНоменклатура = СтрЗаменить(СтрНоменклатура,Символы.ПС,""); //перенос 2
            
            СтрorderItems = СтрorderItems + СтрНоменклатура+";";
        КонецЦикла;
        СтрокаТЗ.orderItems = СтрorderItems+Символ(34);
    КонецЦикла;
    
    Возврат ТаблицаЗначений;
    
КонецФункции //	

Функция ОчиститьСтрокуcontactNumber(Строка)
    
    МассивСимволов  = ПолучитьСимволыИсключения();
    
    Для каждого Стр Из МассивСимволов Цикл
        Строка = СтрЗаменить(Строка,Стр,"");
    КонецЦикла;
    
	Возврат Строка;

КонецФункции // ()


Функция ПолучитьСимволыИсключения()

	МассивСимволов = Новый Массив;
    МассивСимволов.Добавить(";");
    Возврат МассивСимволов;
    
КонецФункции // ПолучитьСимволыИсключения()


// Создаем текст CSV:
// текст заголовков и 
// текст данных
Функция СоздатьДанныеCSV(ТаблицаЗначений,разделитель)
	
    //текст="";
    Текст=СоздатьЗаголовкиCSV(ТаблицаЗначений,разделитель) 
    + Символы.ПС;	
    для каждого Запись из ТаблицаЗначений Цикл
        Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
            Текст = Текст + СтрЗаменить(Запись[Колонка.Имя],Символы.ПС,"")+разделитель;
        КонецЦикла;
        Текст = Текст +Символы.ПС;
	КонецЦикла;
		
	Возврат Текст;

КонецФункции //

// Создаем строку загоовков для CSV-файла
Функция СоздатьЗаголовкиCSV(ТаблицаЗначений,разделитель)
	//разделитель = "|";
	колонкиТЗ=ТаблицаЗначений.колонки;
	Для каждого колонка Из колонкиТЗ Цикл
		стрКолонки = "" + стрКолонки + колонка.Имя + разделитель ;
	КонецЦикла; 
	Возврат стрКолонки;
КонецФункции

// Запишем данные в файл
Функция ЗаписатьCSV(текст,имяФайла)          	
	кодировка = КодировкаТекста.ANSI;
	
    ТекстовыйФайлЗапись = Новый ЗаписьТекста(имяФайла,Кодировка);			
	ТекстовыйФайлЗапись.ЗаписатьСтроку(текст); 
	ТекстовыйФайлЗапись.Закрыть();	
	Возврат 0;

КонецФункции //

#КонецОбласти 

#Область СохранениеСтатусов

// СохранитьСтатус перенесено в РаботаСоСтатусамиЗаказовСервер.СохранитьСтатусы в рамках Задача № 3027
//Функция СохранитьСтатус(ТаблицаДвижений, ИмяКолонкиПериода = Неопределено) Экспорт
//	
//	Период = ТекущаяДата();
//    
//	//БлокировкаДанных = Новый БлокировкаДанных;
//	//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтатусыЗаказов");
//	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
//	//ЭлементБлокировки.ИсточникДанных = ТаблицаДвижений;
//	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Реализация");
//	//БлокировкаДанных.Заблокировать(); //_
//	
//	
//	// Костыль - переделать !!!!!
//	//ТаблицаДвижений.Колонки.Добавить("БылоЗакрытие");	
//	Для каждого Стр Из ТаблицаДвижений Цикл		
//		Стр.БылоЗакрытие = Ложь;	
//	КонецЦикла;
//	
//	МассивЗаказов = ТаблицаДвижений.ВыгрузитьКолонку("Реализация"); 	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//	                      |	ВЫБОР
//	                      |		КОГДА СтатусыЗакрытияЗаказов.Период ЕСТЬ NULL 
//	                      |			ТОГДА ЛОЖЬ
//	                      |		ИНАЧЕ ИСТИНА
//	                      |	КОНЕЦ КАК БылоЗакрытие,
//	                      |	СтатусыЗакрытияЗаказов.Заказ
//	                      |ИЗ
//	                      |	РегистрСведений.СтатусыЗакрытияЗаказов КАК СтатусыЗакрытияЗаказов
//	                      |ГДЕ
//	                      |	СтатусыЗакрытияЗаказов.СтатусЗакрытия = ЗНАЧЕНИЕ(Перечисление.СтатусыПредварительногоЗакрытияЗаказов.ЗаказЗакрытПредварительно)
//	                      |	И СтатусыЗакрытияЗаказов.Заказ В(&МассивЗаказов)");
//	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
//	Рез = Запрос.Выполнить().Выгрузить();	
//	Для каждого Тек Из ТаблицаДвижений Цикл		
//		Най = Рез.НайтиСтроки(Новый Структура("Заказ", Тек.Реализация));
//		Для каждого НайТек Из Най Цикл
//		    Если НайТек.БылоЗакрытие Тогда		
//				Тек.БылоЗакрытие = Истина;			
//			КонецЕсли;				
//		КонецЦикла;	
//	КонецЦикла;
//	// Костыль - переделать !!!!!
//	
//	//Задача № 2869
//	ЕстьИнициаторСостояния = Ложь;
//	Попытка
//		Если Не ТаблицаДвижений.Колонки.Найти("ИнициаторСостояния") = Неопределено Тогда;
//			ЕстьИнициаторСостояния = Истина;
//		КонецЕсли;
//	Исключение
//	КонецПопытки;
//	//Задача № 2869
//	
//    Для каждого Стр Из ТаблицаДвижений Цикл
//		Если Стр.Статус<>401 Тогда
//			//Если ТипЗнч(Стр.ДокументРегистратор) = Тип("ДокументСсылка.ПриходДСПоОтчетуВодителя") И Стр.ПредварительноеЗакрытие
//			//	ИЛИ ТипЗнч(Стр.ДокументРегистратор) = Тип("ДокументСсылка.ЗакрытиеЗаказов") И НЕ Стр.ПредварительноеЗакрытие Тогда
//			
//			Если НЕ Стр.БылоЗакрытие Тогда	// Костыль - переделать !!!!!
//				
//				Если Не ИмяКолонкиПериода = Неопределено Тогда // В рамках Задача № 2943
//					Период = Стр[ИмяКолонкиПериода];
//				КонецЕсли;	
//				
//				НаборЗаписей = РегистрыСведений.СтатусыЗаказов.СоздатьНаборЗаписей();
//	            НаборЗаписей.Отбор.Заказ.Установить(Стр.Реализация);
//	            НаборЗаписей.Отбор.Период.Установить(Период);
//	            Запись = НаборЗаписей.Добавить();
//	            Запись.Период = Период;
//	            Запись.Заказ = Стр.Реализация;
//	            Запись.Статус = Стр.Статус;
//	            Если Стр.ДокументРегистратор <> Неопределено Тогда
//	                Запись.ДокументРегистратор = Стр.ДокументРегистратор;
//				КонецеСли;				
//				Запись.ПредварительноеЗакрытие = Стр.ПредварительноеЗакрытие;	
//				Запись.Терминал = Стр.Терминал;
//				
//				//Задача № 2869			
//				Если ЕстьИнициаторСостояния Тогда
//					Запись.Инициатор = Стр.ИнициаторСостояния;
//				КонецЕсли;	
//				//Задача № 2869
//				
//	            НаборЗаписей.Записать();
//				
//			КонецЕсли;
//        КонецЕсли;
//    КонецЦикла;	
//	
//КонецФункции

// Перенесено в РаботаСоСтатусамиСервер.СохранитьФинальныеСтатусы в рамках 2586
//Функция СохранитьФинальныйСтатус(ТаблицаДвижений) Экспорт
//    Период = ТекущаяДата();
//    
//	//БлокировкаДанных = Новый БлокировкаДанных;
//	//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ФинальныеСтатусыЗаказов");
//	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
//	//ЭлементБлокировки.ИсточникДанных = ТаблицаДвижений;
//	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Реализация");
//	//БлокировкаДанных.Заблокировать();

//	// Костыль - переделать !!!!!
//	//ТаблицаДвижений.Колонки.Добавить("БылоЗакрытие");	
//	Для каждого Стр Из ТаблицаДвижений Цикл		
//		Стр.БылоЗакрытие = Ложь;	
//	КонецЦикла;
//	МассивЗаказов = ТаблицаДвижений.ВыгрузитьКолонку("Реализация"); 	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//	                      |	ВЫБОР
//	                      |		КОГДА СтатусыЗакрытияЗаказов.Период ЕСТЬ NULL 
//	                      |			ТОГДА ЛОЖЬ
//	                      |		ИНАЧЕ ИСТИНА
//	                      |	КОНЕЦ КАК БылоЗакрытие,
//	                      |	СтатусыЗакрытияЗаказов.Заказ
//	                      |ИЗ
//	                      |	РегистрСведений.СтатусыЗакрытияЗаказов КАК СтатусыЗакрытияЗаказов
//	                      |ГДЕ
//	                      |	СтатусыЗакрытияЗаказов.СтатусЗакрытия = ЗНАЧЕНИЕ(Перечисление.СтатусыПредварительногоЗакрытияЗаказов.ЗаказЗакрытПредварительно)
//	                      |	И СтатусыЗакрытияЗаказов.Заказ В(&МассивЗаказов)");
//	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
//	Рез = Запрос.Выполнить().Выгрузить();	
//	Для каждого Тек Из ТаблицаДвижений Цикл		
//		Най = Рез.НайтиСтроки(Новый Структура("Заказ", Тек.Реализация));
//		Для каждого НайТек Из Най Цикл
//		    Если НайТек.БылоЗакрытие Тогда		
//				Тек.БылоЗакрытие = Истина;			
//			КонецЕсли;				
//		КонецЦикла;	
//	КонецЦикла;
//	// Костыль - переделать !!!!!
//	
//    
//    Для каждого Стр Из ТаблицаДвижений Цикл
//		Если Стр.Статус<>401 Тогда
//			//Если ТипЗнч(Стр.ДокументРегистратор) = Тип("ДокументСсылка.ПриходДСПоОтчетуВодителя") И Стр.ПредварительноеЗакрытие
//			//	ИЛИ ТипЗнч(Стр.ДокументРегистратор) = Тип("ДокументСсылка.ЗакрытиеЗаказов") И НЕ Стр.ПредварительноеЗакрытие Тогда
//			
//			Если НЕ Стр.БылоЗакрытие Тогда	// Костыль - переделать !!!!!
//				
//	            НаборЗаписей = РегистрыСведений.ФинальныеСтатусыЗаказов.СоздатьНаборЗаписей();
//	            НаборЗаписей.Отбор.Заказ.Установить(Стр.Реализация);
//	            НаборЗаписей.Отбор.Период.Установить(Период);
//	            Запись = НаборЗаписей.Добавить();
//	            Запись.Период = Период;
//	            Запись.Заказ = Стр.Реализация;
//	            Запись.Статус = Стр.Статус;
//	            Если Стр.ДокументРегистратор <> Неопределено Тогда
//	                Запись.ДокументРегистратор = Стр.ДокументРегистратор;
//				КонецеСли;	
//				Запись.ПредварительноеЗакрытие = Стр.ПредварительноеЗакрытие;
//	            НаборЗаписей.Записать();
//				
//			КонецЕсли;
//        КонецЕсли;
//    КонецЦикла;	
//КонецФункции

	
#КонецОбласти 

#Область СтарыеПроцедурыФункции

Функция ОтформатироватьТелефонныйНомер (Телефон) Экспорт
    Номер = ПривестиТелефонКВиду(Телефон);
    МассивНомеров = Новый Массив;
    Если СтрДлина(Номер) = 22 Тогда
        МассивНомеров.Добавить(Лев(Номер,11));
        МассивНомеров.Добавить(Прав(Номер,11));
    ИначеЕсли СтрДлина(Номер) >= 11 Тогда
        МассивНомеров.Добавить(Лев(Номер,11));
    КонецЕсли;
    
    НовыйМассивНомеров = Новый Массив;
    Для каждого Стр Из МассивНомеров Цикл
        Номер = Прав(Стр,10);
        НовыйНомер = "";
        Для Сч=1 По 10 Цикл
            Если Сч = 4 ИЛИ Сч= 7 ИЛИ Сч = 9 Тогда
                НовыйНомер = НовыйНомер+"-"+Сред(Номер,Сч,1); 
            Иначе
                НовыйНомер = НовыйНомер+Сред(Номер,Сч,1); 
            КонецЕсли;
        КонецЦикла;
        НовыйМассивНомеров.Добавить(НовыйНомер);
    КонецЦикла;
    Возврат НовыйМассивНомеров;
КонецФункции

//Получаем последний номер контрагента (Shop) типовой механизм поломан
Функция ПолучитьПоследнийНомерКонтрагента () Экспорт
    ТаблицаНомеров = Новый  ТаблицаЗначений;
    ТаблицаНомеров.Колонки.Добавить("Номер");
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПОДСТРОКА(Контрагенты.Код, 6, 9) КАК Номер
        |ИЗ
        |   Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |   Контрагенты.Код ПОДОБНО ""%Shop%""";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СтрокаТаблицыНомеров = ТаблицаНомеров.Добавить();
        СтрокаТаблицыНомеров.Номер = Число(СокрЛП(ВыборкаДетальныеЗаписи.Номер));
    КонецЦикла;
    ТаблицаНомеров.Сортировать("Номер Убыв");
    Возврат ТаблицаНомеров[0].Номер;
КонецФункции

#КонецОбласти 

#Область Склонение

// (c) Jurer Production Begin ( Start )
// http://superjur.narod.ru
// 
// Удаление этих строк незнаконно!
// Гарантия 91 года и 1 месяц!!!
// Послегарантийное обслуживание - бесплатно!!!
// Круглосуточная поддержка - все 48 часов в бою!
// Ссылка на источник обязательна!
// Эти программы защищены законом об авторских правах. Запрещается перепродажа данной программы.
// ПРОВЕРЕНО! ВИРУСОВ НЕТ!!! АНТИВИРУСОВ ТОЖЕ!!!
// Смотри Милячуша в творительном !!
// скупой слепой тупой - пропой!!
// !№№!
// !55! ПадежЫ - для оглы и кызы
// !54! 
// !53! Очередное сокращение кода
// !51! Прегромадное спасибо Олегу Дубровскому за оказанную моральную, информационную и материальную поддержку сего проекта.
//      Сергею Толкачёву за напоминание о том, что в русском языке всегда есть место исключениям!
// !50! П:Ответственный за электрохозяйство  Ф:Ацута Груша  
// !48! исправлена ошибка при склонении фамилий (спасибо, Mario).
// !47! исправлена ошибка при склонении профессий ( спасибо, Павел Ковалев).
// !46! оптимизация + четвертый параметр задает, что вернуть - фамилия, имя или отчество или всё сразу в нужном падеже
// !42! Осел + Соловей + Воробей + Немец + Кормилец + Силиец
// !41! отчества оканчивающиеся на "ы" считаются женскими ?
// Функция для склонения одного слова!!!
// z1 - само слово
// z2 - номер падежа
// z3 - пол
// z4 - 1-склонять как фамилию, 2-имя, 3-отчество
Функция ПадежС(z1,Знач z2=2,Знач z3="*",z4=0) Экспорт
  z5=Найти(z1,"-");
  z6=?(z5=0,"","-"+ПадежС(Сред(z1,z5+1,СтрДлина(z1)-z5+1),z2,z3,z4));
  z1=НРег(?(z5=0,z1,Лев(z1,z5-1)));
  z7=Прав(z1,3);z8=Прав(z7,2);z9=Прав(z8,1);
  z5=СтрДлина(z1);
  za=Найти("ая ия ел ок яц ий па да ца ша ба та га ка",z8);
  zb=Найти("аеёийоуэюяжнгхкчшщ",Лев(z7,1));
  zc=Макс(z2,-z2);
  zd=?(za=4,5,Найти("айяь",z9));
  zd=?((zc=1)или(z9=".")или((z4=2)и(Найти("оиеу"+?(z3="ч","","бвгджзклмнпрстфхцчшщъ"),z9)>0))или((z4=1)и(Найти("мия мяэ лия кия жая лея",z7)>0)),9,?((zd=4)и(z3="ч"),2,?(z4=1,?(Найти("оеиую",z9)+Найти("их ых аа еа ёа иа оа уа ыа эа юа яа",z8)>0,9,?(z3<>"ч",?(za=1,7,?(z9="а",?(za>18,1,6),9)),?(((Найти("ой ый",z8)>0)и(z5>4)и(Прав(z1,4)<>"опой"))или((zb>10)и(za=16)),8,zd))),zd)));
  ze=Найти("лец вей бей дец пец мец нец рец вец аец иец ыец бер",z7);
  zf=?((zd=8)и(zc<>5),?((zb>15)или(Найти("жий ний",z7)>0),"е","о"),?(z1="лев","ьв",?((Найти("аеёийоуэюя",Сред(z1,z5-3 ,1))=0)и((zb>11)или(zb=0))и(ze<>45),"",?(za=7,"л",?(za=10,"к",?(za=13,"йц",?(ze=0,"",?(ze<12,"ь"+?(ze=1,"ц",""),?(ze<37,"ц",?(ze<49,"йц","р"))))))))));
  zf=?((zd=9)или((z4=3)и(z3="ы")),z1,Лев(z1,z5-?((zd>6)или(zf<>""),2,?(zd>0,1,0)))+zf+СокрП(Сред("а у а "+Сред("оыые",Найти("внч",z9)+1,1)+"ме "+?(Найти("гжкхш",Лев(z8,1))>0,"и","ы")+" е у ойе я ю я ем"+?(za=16,"и","е")+" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго"+?((zf="е")или(za=16)или((zb>12)и(zb<16)),"и","ы")+"мм",10*zd+2*zc-3,2)));
Возврат ?(""=z1,"",?(z4>0,ВРег(Лев(zf,1))+?((z2<0)и(z4>1),".",Сред(zf,2)),zf)+z6);
КонецФункции
//_____________________________________________________________________________
// z1 - фамилия имя отчество например Железняков Юрий Юрьевич
// z2 - Падеж ( по  умолчанию = 2 - родительный)
// 2 - родительный  ( нет кого?    ) Железнякова Юрия Юрьевича     
// 3 - дательный    ( кому?        ) Железнякову Юрию Юрьевичу 
// 4 - винительный  ( вижу кого?   ) Железнякова Юрия Юрьевича  
// 5 - творительный ( кем?         ) Железняковым Юрием Юрьевичем    
// 6 - предложный   ( о ком?       ) Железнякове Юрии Юрьевиче 
// Если задать Z2 меньше 0, то на выходе получим от -1=Железняков Ю. Ю. до -6=Железнякове Ю. Ю.
// z3 - параметр Пол может не указываться, но при наличии фамилий с 
// инициалами точное определение пола невозможно, поэтому предлагается задавать пол этим
// параметром  1 - мужской 2 - женский  
// ДЛЯ СКЛОНЕНИЯ ПРОФЕССИЙ ИСПОЛЬЗУЙТЕ ФУНКЦИЮ ПАДЕЖП И БУДЕТ ВАМ СЧАСТЬЕ!
// ---------------------------------------------------------------------------------------
// Бибик Галушка Цой Николайчик Наталия Петровна Герценберг Кривошей Капица-Метелица
// Если Падеж(Фио ,1 ,3),       то на выходе получим Фамилия Имя Отчество и т.д.
// Если Падеж(Фио ,1 ,3,"1" ),  то                   Фамилия 
// Если Падеж(Фио ,1 ,3,"2" ),  то                   Имя 
// Если Падеж(Фио ,1 ,3,"3" ),  то                   Отчество 
// Если Падеж(Фио, 1 ,3,"12" ), то                   Фамилия Имя 
// Если Падеж(Фио, 1 ,3,"23" ), то                   Имя Отчество 
// Если Падеж(Фио,-1 ,3,"231" ),то                   И. О. Фамилия 
// Если Падеж(Фио,-1 ,3,"23" ), то                   И. О.  
// 10-11-2003 3-20

Функция Падежик(z1,z2=2,z3=3,Знач z4="123",z5=1) Экспорт
  Возврат?(z5<4,Падежик(СокрЛП(СтрЗаменить(Сред(z1,Найти(z1+" "," ")+1),".",". ")),z2,z3,СтрЗаменить(z4,z5,ПадежС(Лев(z1,Найти(z1+" "," ")-1),z2,Сред("ча"+НРег(Прав(СокрП(z1),1)),z3,1),z5)+" "),z5+1),z4);
КонецФункции//Падежик

Функция Падеж(z1,z2=2,z3=3,Знач z4="123") Экспорт
	z1=СокрП(z1);
	z5=Прав(z1,4);
  z6=Найти("оглы кызы",z5);
	Возврат Падежик(?(z6>0,Лев(z1,СтрДлина(z1)-5),z1),z2,z3,z4)+?(z6>0,z5,"");
КонецФункции//Падеж

Функция ПадежП(Знач z1,Знач z2,z3=0) Экспорт
  z1=СокрЛП(z1);z4=Найти(z1+" "," ")+1;z5=Лев(z1,z4-2);z6=Прав(z5,2);
  z7=?((Найти("ая ий ый",z6)>0)и(Найти("ющий нный",Сред(z1,z4-5,4))=0)и(z3=0),"1","*");
Возврат НРег(?((z6="ая")или(Прав(z6,1)="а"),ПадежС(z5,z2,z7,1)+" "+ПадежС(Сред(z1,z4),z2),ПадежС(z5,z2,"ч",1)+?((z6="ий")и(Найти(z1," ")=0),""," "+?(z7="1",ПадежП(Сред(z1,z4),z2,Число(z7)),Сред(z1,z4)))));
КонецФункции//ПадежП
// (c) Jurer Production End ( Finish )

Функция ПолучитьСклонениеФИО(ФИО, Падеж) Экспорт
	//Макет = Обработки.SMSС.ПолучитьМакет("NameDecl");
	//АдресОбработки = ПоместитьВоВременноеХранилище(Макет, Новый УникальныйИдентификатор);
	
	//НачатьУстановкуВнешнейКомпоненты(,АдресОбработки);
	//УстановитьВнешнююКомпоненту("ОбщийМакет.NameDecl");
	Попытка
		// Подключаем внешнюю компоненту
		ПодключитьВнешнююКомпоненту("ОбщийМакет.NameDecl", "NameDecl",ТипВнешнейКомпоненты.Native); 
		//Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтотОбъект);
		//НачатьПодключениеВнешнейКомпоненты(Оп,"ОбщийМакет.NameDecl", "NameDecl",ТипВнешнейКомпоненты.Native);
		ОбъектНАТ = Новый("AddIn.NameDecl.CNameDecl");
	Исключение
		// Не удалось выполнить операции с внешней компонентой
		Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	
	// Получаем результат склонения
	Попытка
	    РезультатСклонения = ОбъектНАТ.Просклонять(ФИО, Падеж);
	Исключение
	    РезультатСклонения = ФИО;
	КонецПопытки;
	
	Возврат РезультатСклонения;
КонецФункции

Функция ПолучитьСклонениеФИОВстроенный(ФИО, Падеж) Экспорт
	Если ЗначениеЗаполнено(Падеж) Тогда
		СтрПадежа = "ПД=" + Строка(Падеж);
		Попытка
			МассивРезультатСклонения = ПолучитьСклоненияСтроки(ФИО,, СтрПадежа);
			РезультатСклонения = МассивРезультатСклонения[0];
		Исключение
			РезультатСклонения = ФИО;
		КонецПопытки;
		
	Иначе
		РезультатСклонения = ФИО;
	КонецЕсли;	
	
	Возврат РезультатСклонения;
КонецФункции

#КонецОбласти 

#Область Axiomus

#Область Основные

Функция ЗапросТекущегоСтатусаЗаказа(okey, ukey) Экспорт
    
    стрURL = Константы.AxiomusApiUrl.Получить();
    ПараметрыОтвета = Новый Структура;
        
    Если НЕ ЗначениеЗаполнено(стрURL) Тогда
        ПараметрыОтвета.Вставить("Статус",Справочники.СтатусыAxiomus.НайтиПоКоду(400));
        Возврат ПараметрыОтвета;    
    КонецЕсли;
    
    Типsingleorder = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusRequest","singleorder");
    Типauth = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusRequest","auth");
    singleorder = ФабрикаXDTO.Создать(Типsingleorder);
    singleorder.mode = "status";
    singleorder.okey = okey;
    auth = ФабрикаXDTO.Создать(Типauth);
    auth.ukey = ukey;
    singleorder.auth = auth;
    
    СтрокаXML = СформироватьСтрокуXML(ФабрикаXDTO,singleorder);
    
    Попытка
        oXMLHTTP = Новый COMОбъект("MSXML2.XMLHTTP");
        стрURL=стрURL;
        oXMLHTTP.open("POST", стрURL, 0);
        oXMLHTTP.setRequestHeader("HOST", "axiomus.ru");
        oXMLHTTP.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        oXMLHTTP.send("data="+СтрокаXML);
    Исключение
        ПараметрыОтвета.Вставить("Статус",Справочники.СтатусыAxiomus.НайтиПоКоду(400));
        Возврат ПараметрыОтвета;    
    КонецПопытки;
    
    ОтветXML = oXMLHTTP.responseText;
    
    ОтветXDTO_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusResponse","response");
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ОтветXML);
    ОтветXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ОтветXDTO_Тип);
	
	
    КодСтатутса =  ОтветXDTO.status.code;
    Если Число(КодСтатутса) = -10 Тогда
        КодСтатутса = 666;    
	КонецЕсли;
	ТипОплаты = ОтветXDTO.order.payment_mode;
	
	// refused items
	Попытка
		ПараметрыОтвета.Вставить("refused_items", ОтветXDTO.refused_items); 
	Исключение
	КонецПопытки;
    
    ПараметрыОтвета.Вставить("Статус",Справочники.СтатусыAxiomus.НайтиПоКоду(КодСтатутса));
	ПараметрыОтвета.Вставить("СтатусЧисло", Число(КодСтатутса));
	ПараметрыОтвета.Вставить("ТипОплаты", Число(ТипОплаты));
	
    Возврат ПараметрыОтвета;    

КонецФункции 


//Входящие данные 
// таблица запросов состав:
// Колонки:
//okey - тип строка
//Статус  - NULL
//НомерЗаказа - NULL
//Заказ - тип Документ.РеализацияТоваровУслуг (возможно пустое)
Функция ЗапросТекущегоСтатусаЗаказов(ТаблицаЗапроса,ukey) Экспорт

	ТаблицаЗапроса.Колонки.Добавить("exe_date");
	ТаблицаЗапроса.Колонки.Добавить("payment_mode");
	
    стрURL = Константы.AxiomusApiUrl.Получить();
        
    Если НЕ ЗначениеЗаполнено(стрURL) Тогда
        ТаблицаЗапроса.ЗаполнитьЗначения(Справочники.СтатусыAxiomus.НайтиПоКоду(400),"Статус");
        Возврат ТаблицаЗапроса;    
    КонецЕсли;
    
    Типsingleorder = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusListRequest","singleorder");
    Типauth = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusListRequest","auth");
    Типokeylist = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusListRequest","okeylist");
    
    singleorder = ФабрикаXDTO.Создать(Типsingleorder);
    singleorder.mode = "status_list";
    auth = ФабрикаXDTO.Создать(Типauth);
    auth.ukey = ukey;
    singleorder.auth = auth;
    
    okeylist = ФабрикаXDTO.Создать(Типokeylist);
    
    Для каждого Стр Из ТаблицаЗапроса Цикл
        okeylist.okey.Добавить(Стр.okey);
    КонецЦикла;
    singleorder.okeylist  = okeylist;
    СтрокаXML = СформироватьСтрокуXML(ФабрикаXDTO,singleorder);
    
    Попытка
        oXMLHTTP = Новый COMОбъект("MSXML2.XMLHTTP");
        стрURL=стрURL;
        oXMLHTTP.open("POST", стрURL, 0);
        oXMLHTTP.setRequestHeader("HOST", "axiomus.ru");
        oXMLHTTP.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        oXMLHTTP.send("data="+СтрокаXML);
    Исключение
        ТаблицаЗапроса.ЗаполнитьЗначения(Справочники.СтатусыAxiomus.НайтиПоКоду(400),"Статус");
        Возврат ТаблицаЗапроса;    
    КонецПопытки;
    
    ОтветXML = oXMLHTTP.responseText;
    
	//ОтветXDTO_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusListResponse","response");
	ОтветXDTO_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusListResponse","Неопределено");
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ОтветXML);
    ОтветXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ОтветXDTO_Тип);
    
    Попытка  //+++++Серегин М.В. 11.03.2016 17:00:03 такие костыли нужны из-за кривого ответа axiomusa, в ответ может прийти и список и элемент и ничего.
        Если ТипЗнч(ОтветXDTO.okeylist.okey) = Тип("СписокXDTO") Тогда
            ТаблицаЗапроса.ЗаполнитьЗначения(Справочники.СтатусыAxiomus.НайтиПоКоду(10),"Статус");
            Для каждого Стр Из ОтветXDTO.okeylist.okey Цикл
                
                Строка = ТаблицаЗапроса.Найти(Стр.okey,"okey");
                КодСтатутса =  Стр.status_code;
                Если Число(КодСтатутса) = -10 Тогда
                    КодСтатутса = 666;    
                КонецЕсли;
                Строка.Статус = Справочники.СтатусыAxiomus.НайтиПоКоду(КодСтатутса);
                Строка.НомерЗаказа = Стр.inner_id;
				Строка.exe_date = Стр.exe_date;
				Строка.payment_mode = Стр.payment_mode;
            КонецЦикла;
        Иначе
            ТаблицаЗапроса.ЗаполнитьЗначения(Справочники.СтатусыAxiomus.НайтиПоКоду(10),"Статус");
            
            Стр = ОтветXDTO.okeylist.okey;
            Строка = ТаблицаЗапроса.Найти(Стр.okey,"okey");
            
            КодСтатутса =  Стр.status_code;
            Если Число(КодСтатутса) = -10 Тогда
                КодСтатутса = 666;    
            КонецЕсли;
            
            Строка.Статус = Справочники.СтатусыAxiomus.НайтиПоКоду(КодСтатутса);
            Строка.НомерЗаказа = Стр.inner_id;		
			Строка.exe_date = Стр.exe_date;
			Строка.payment_mode = Стр.payment_mode;
        КонецЕсли;
    Исключение
        ТаблицаЗапроса.ЗаполнитьЗначения(Справочники.СтатусыAxiomus.НайтиПоКоду(10),"Статус")
    КонецПопытки;
    
    Возврат ТаблицаЗапроса;
    
КонецФункции // ()

// таблица запросов состав:
// Колонки:
//okey - тип строка
//courier_id  - NULL
//courier_key - NULL
//polygon_id - NULL 
//Заказ - тип Документ.РеализацияТоваровУслуг (возможно пустое)
Функция ЗапросМаршрутаЗаказов(ТаблицаЗапроса) Экспорт

    стрURL = Константы.AxiomusApiUrl.Получить();
        
    Если НЕ ЗначениеЗаполнено(стрURL) Тогда
        ТаблицаЗапроса.ЗаполнитьЗначения(Справочники.СтатусыAxiomus.НайтиПоКоду(400),"Статус");
        Возврат ТаблицаЗапроса;    
    КонецЕсли;
    
    Типsingleorder = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusGetCourierListRequest","singleorder");
    Типokeylist = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusGetCourierListRequest","okeylist");
    
    singleorder = ФабрикаXDTO.Создать(Типsingleorder);
    singleorder.mode = "get_courier";
    
    okeylist = ФабрикаXDTO.Создать(Типokeylist);
    
    Для каждого Стр Из ТаблицаЗапроса Цикл
        okeylist.okey.Добавить(Стр.okey);
    КонецЦикла;
    singleorder.okeylist  = okeylist;
    СтрокаXML = СформироватьСтрокуXML(ФабрикаXDTO,singleorder);
    СтрокаXML = СтрЗаменить(СтрокаXML,"<?xml version=""1.0""?>","");
    
    Попытка
        oXMLHTTP = Новый COMОбъект("MSXML2.XMLHTTP");
        стрURL=стрURL;
        oXMLHTTP.open("POST", стрURL, 0);
        oXMLHTTP.setRequestHeader("HOST", "axiomus.ru");
        oXMLHTTP.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        oXMLHTTP.send("data="+СтрокаXML);
    Исключение
        ТаблицаЗапроса.ЗаполнитьЗначения(Справочники.СтатусыAxiomus.НайтиПоКоду(400),"Статус");
        Возврат ТаблицаЗапроса;    
    КонецПопытки;
    
    ОтветXML = oXMLHTTP.responseText;
    
    ОтветXDTO_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusGetCourierListResponse","response");
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ОтветXML);
    ОтветXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ОтветXDTO_Тип);
    
    Попытка  //+++++Серегин М.В. 11.03.2016 17:00:03 такие костыли нужны из-за кривого ответа axiomusa, в ответ может прийти и список и элемент и ничего.
        Если ТипЗнч(ОтветXDTO.okeylist.okey) = Тип("СписокXDTO") Тогда
            Для каждого Стр Из ОтветXDTO.okeylist.okey Цикл
                
                Строка = ТаблицаЗапроса.Найти(Стр.okey,"okey");		
			    Если ЗначениеЗаполнено(Строка) Тогда					
					Строка.courier_id = ?(Стр.courier_id = "", 0, Стр.courier_id);
	                Строка.courier_key = Стр.courier_key;
					Строка.polygon_id = ?(Стр.polygon_id = "", 0, Стр.polygon_id);	
				КонецЕсли;
                
            КонецЦикла;
        Иначе
            
            Стр = ОтветXDTO.okeylist.okey;
            Строка = ТаблицаЗапроса.Найти(Стр.okey,"okey");
			Если ЗначениеЗаполнено(Строка) Тогда
	            Строка.courier_id = ?(Стр.courier_id = "", 0, Стр.courier_id);
	            Строка.courier_key = Стр.courier_key;
				Строка.polygon_id = ?(Стр.polygon_id = "", 0, Стр.polygon_id);
			КонецЕсли;
        КонецЕсли;
    Исключение
    КонецПопытки;
    
    Возврат ТаблицаЗапроса;

КонецФункции // ЗапросМаршрутаЗаказов()


// orderId - номер Стриж
// okey - ключ заказа Axiomus
// axiomusId - номер Axiomus
//Функция ПолучитьДанные_Axiomus(Заказ)
//	
//	Таблица = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC bp_getAxiomusOrderInfo "+СокрЛП(Заказ.Номер)); 
//	
//КонецФункции // ()


#КонецОбласти 

#Область Вспомогательные

Функция ПолучитьСписокПараметровОтвета()
    МасссивОтвета = Новый Массив;
    МасссивОтвета.Добавить("status");
    Возврат МасссивОтвета;	
    
КонецФункции // ПолучитьСписокПараметровОтвета()

Функция ПолучитьПараметрыОтвета(СтрокаXML,СписокПараметровОтвета) Экспорт
    
    ОтветСоответсвие = ПрочитатьСтрокуXML(СтрокаXML);
    
    ОтветСтруктура = Новый Структура;
    Для каждого Стр Из СписокПараметровОтвета Цикл
        ОтветСтруктура.Вставить(Стр,ОтветСоответсвие.Получить(Стр));
    КонецЦикла; 
    
    Возврат ОтветСтруктура;
    
КонецФункции

Функция ПрочитатьСтрокуXML(СтрокаXML)
    
    ОтветСоответсвие = Новый Соответствие;
    
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(СтрокаXML);
    //ОтветXML = Фабрика.ПрочитатьXML(ЧтениеXML, Тип_Ответ);
    Пока ЧтениеXML.Прочитать() Цикл 
        
        // Прочитать "структурные части" элементов.  
        // Проверить, какая часть элемента - текущая.  
        Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
            ИмяУзла = ЧтениеXML.Имя;  
            
            // Атрибуты элементов можно читать только если текущая часть -  
            // начало элемента  
            Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
                
                // Прочитать данные узла атрибута.  
                ТипУзла = ЧтениеXML.ТипУзла; 
                Имя = ЧтениеXML.Имя; 
                Значение = ЧтениеXML.Значение; 
                
                // Обработать полученные значения. 
                
            КонецЦикла;
            
        ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда 
            
            // В примере просто выводим текст в окно сообщений.  
            //Сообщить("Текст:" + ЧтениеXML.Значение); 
            ОтветСоответсвие.Вставить(ИмяУзла,ЧтениеXML.Значение);  
            
        ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
            
            // В примере просто выводим признак конца элемента  
            // в окно сообщений Сообщить("--Конец:" + Чтение.Имя);  
            
        КонецЕсли; 
        
    КонецЦикла;
    Возврат ОтветСоответсвие;
    
КонецФункции // ПрочитатьXML()

Функция СформироватьСтрокуXML(Фабрика,Элемент) Экспорт
    
    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.УстановитьСтроку(); 
    ЗаписьXML.ЗаписатьОбъявлениеXML(); 
    Фабрика.ЗаписатьXML(ЗаписьXML, Элемент);
    СтрокаXML = ЗаписьXML.Закрыть();
    Возврат СтрокаXML;
    
КонецФункции

Процедура ОбновитьЗапись_ПараметрыРегламентныхЗаданий(Ключ = "") Экспорт

	Если Ключ = "" Тогда
		Возврат;	
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Запись.Отбор.Ключ.Установить(Ключ);
	Запись.Прочитать();
	Если Запись.Количество() = 0 Тогда
		НоваяЗапись = Запись.Добавить();
	Иначе
		НоваяЗапись = Запись[0];
	КонецЕсли;
	НоваяЗапись.Ключ = Ключ;
	НоваяЗапись.Значение = ДатаВСтроку(ТекДата);
	Попытка
		Запись.Записать();
	Исключение
		#Если Клиент Тогда
			Сообщить("Проблема с обновлением даты ПараметрыРегламентныхЗаданий");
		#КонецЕсли
	КонецПопытки;

КонецПроцедуры


#КонецОбласти 
	
#КонецОбласти 