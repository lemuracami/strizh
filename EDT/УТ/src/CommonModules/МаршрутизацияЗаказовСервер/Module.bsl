Функция ОпределитьАктуальнуюСхемуЛогистическихБрейков() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	АктуальнаяСхемаЛогистическихБрейковСрезПоследних.СхемаЛогистическихБрейков КАК СхемаЛогистическихБрейков
	            |ИЗ
	            |	РегистрСведений.АктуальнаяСхемаЛогистическихБрейков.СрезПоследних КАК АктуальнаяСхемаЛогистическихБрейковСрезПоследних";
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.СхемаЛогистическихБрейков;
	Иначе
		Возврат Справочники.СхемыЛогистическихБрейков.ПустаяСсылка();
	КонецеСли;	
КонецФункции	


Процедура УстановитьЛогистическиеКатегорииЗаказов(МассивЗаказов) Экспорт
	АктуальнаяСхемаЛогистическихБрейков = ПараметрыСеанса.АктуальнаяСхемаЛогистическихБрейков; 
	
	Если Не ЗначениеЗаполнено(АктуальнаяСхемаЛогистическихБрейков) Тогда
		Возврат;
	КонецЕсли;	
	
	//СтрокаПисьмаОСменеБрейков = Новый Массив;
	
	Зап = Новый Запрос;
	//Асеев 14.03.2024 (Задача № 5243)>>>
	Зап.УстановитьПараметр("СхемаБрейков", АктуальнаяСхемаЛогистическихБрейков);
	Зап.УстановитьПараметр("ПустойПорядок", 999);
	Зап.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Зап.Текст =
	"ВЫБРАТЬ
	|	СхемыЛогистическихБрейковПоследовательностьОпределения.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА СхемыЛогистическихБрейковПоследовательностьОпределения.ГабаритнаяХарактеристика = ЗНАЧЕНИЕ(Перечисление.ГабаритныеХарактеристикиЗаказа.Вес)
	|				ТОГДА СхемыЛогистическихБрейковПоследовательностьОпределения.Порядок
	|			ИНАЧЕ &ПустойПорядок
	|		КОНЕЦ) КАК ПорядокВеса,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА СхемыЛогистическихБрейковПоследовательностьОпределения.ГабаритнаяХарактеристика = ЗНАЧЕНИЕ(Перечисление.ГабаритныеХарактеристикиЗаказа.Объем)
	|				ТОГДА СхемыЛогистическихБрейковПоследовательностьОпределения.Порядок
	|			ИНАЧЕ &ПустойПорядок
	|		КОНЕЦ) КАК ПорядокОбъема
	|ИЗ
	|	Справочник.СхемыЛогистическихБрейков.ПоследовательностьОпределения КАК СхемыЛогистическихБрейковПоследовательностьОпределения
	|ГДЕ
	|	СхемыЛогистическихБрейковПоследовательностьОпределения.Ссылка = &СхемаБрейков
	|
	|СГРУППИРОВАТЬ ПО
	|	СхемыЛогистическихБрейковПоследовательностьОпределения.Ссылка";
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
		//Асеев 14.03.2024 (Задача № 5243)<<<
		
		//Асеев 12.10.2021 (Задача № 4465)>>>
		//Зап.Текст = "ВЫБРАТЬ
		//            |	РТиУ.Ссылка КАК Заказ,
		//            |	ЛогистическиеБрейки.Ссылка КАК ЛогистическийБрейк,
		//            |	РТиУ.Номер КАК Номер
		//            |ИЗ
		//            |	Документ.РеализацияТоваровУслуг КАК РТиУ
		//            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛогистическиеБрейки КАК ЛогистическиеБрейки
		//            |		ПО РТиУ.ОбщийВес >= ЛогистическиеБрейки.ВесОт
		//            |			И РТиУ.ОбщийВес < ЛогистическиеБрейки.ВесДо
		//            |			И (ЛогистическиеБрейки.Владелец.Ссылка = &СхемаБрейков)
		//            |			И (ЛогистическиеБрейки.ПометкаУдаления = ЛОЖЬ)
		//            |			И (РТиУ.Ссылка В (&МассивЗаказов))
		//            |ГДЕ
		//            |	РТиУ.Ссылка В(&МассивЗаказов)";
		Зап.Текст =
		"ВЫБРАТЬ
		|	РТиУ.Ссылка КАК Заказ,
		|	ЛогистическиеБрейки.Ссылка КАК ЛогистическийБрейк,
		|	ЕСТЬNULL(ЛогистическиеБрейки_Негабарит.Ссылка, ЛогистическиеБрейки.Ссылка) КАК ЛогистическийБрейкНегабарит,
		|	РТиУ.Номер КАК Номер
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РТиУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛогистическиеБрейки КАК ЛогистическиеБрейки
		|		ПО (ЛогистическиеБрейки.Владелец = &СхемаБрейков)
		|			И РТиУ.ОбщийВес >= ЛогистическиеБрейки.ВесОт
		|			И РТиУ.ОбщийВес < ЛогистическиеБрейки.ВесДо
		|			И (НЕ ЛогистическиеБрейки.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛогистическиеБрейки КАК ЛогистическиеБрейки_Негабарит
		|		ПО (ЛогистическиеБрейки_Негабарит.Владелец = &СхемаБрейков)
		|			И (ЛогистическиеБрейки_Негабарит.БрейкНегабаритногоЗаказа)
		|			И (НЕ ЛогистическиеБрейки_Негабарит.ПометкаУдаления)
		|ГДЕ
		|	РТиУ.Ссылка В(&МассивЗаказов)";
		//Асеев 12.10.2021 (Задача № 4465)<<<
		
		Выб = Зап.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			//Если Не ЗначениеЗаполнено(Выб.ЛогистическийБрейк) Тогда
			//	Продолжить;
			//КонецеСли;	
			НаборТВ = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей(); 
			НаборТВ.Отбор.Заказ.Установить(Выб.Заказ); 
			НаборТВ.Прочитать();
			
			Если НаборТВ.Количество() Тогда
				СтрокаПараметров = НаборТВ[0];
			Иначе
				СтрокаПараметров = НаборТВ.Добавить();
			КонецЕсли;
			
			Если СтрокаПараметров.НегабаритныйЗаказ Тогда
				Выб_ЛогистическийБрейк = Выб.ЛогистическийБрейкНегабарит;
			Иначе
				Выб_ЛогистическийБрейк = Выб.ЛогистическийБрейк;
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(СтрокаПараметров.ЛогистическийБрейк) И СтрокаПараметров.ЛогистическийБрейк <> Выб_ЛогистическийБрейк Тогда
			//	СтрокаПисьмаОСменеБрейков.Добавить("Заказ " + СокрЛП(Выб.Номер) + ", смена брейка с " + Строка(СтрокаПараметров.ЛогистическийБрейк) + " на " + ?(ЗначениеЗаполнено(Выб_ЛогистическийБрейк), Выб_ЛогистическийБрейк, "пустой брейк") + ".");
			//КонецЕсли;	
			
			СтрокаПараметров.СхемаЛогистическихБрейков = АктуальнаяСхемаЛогистическихБрейков;
			СтрокаПараметров.ЛогистическийБрейк = Выб_ЛогистическийБрейк;
			СтрокаПараметров.ГабаритнаяХарактеристикаОпределенияЛогБрейка = Неопределено;
			
			НаборТВ.Записать();
		КонецЦикла;	
		//Асеев 14.03.2024 (Задача № 5243)>>>
	Иначе
		Выб = Рез.Выбрать();
		Выб.Следующий();
		
		ПорядокВеса = Выб.ПорядокВеса;
		ПорядокОбъема = Выб.ПорядокОбъема;
		
		Зап.УстановитьПараметр("ПорядокВеса", ПорядокВеса);
		Зап.УстановитьПараметр("ПорядокОбъема", ПорядокОбъема);
		Зап.Текст =
		"ВЫБРАТЬ
		|	РТиУ.Ссылка КАК Заказ,
		|	ЛогистическиеБрейки.Ссылка КАК ЛогистическийБрейк,
		|	РТиУ.Номер КАК Номер,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.НегабаритныйЗаказ, ЛОЖЬ)
		|				И ЛогистическиеБрейки.БрейкНегабаритногоЗаказа
		|			ТОГДА -&ПустойПорядок
		|		КОГДА &ПорядокВеса < &ПустойПорядок
		|				И РТиУ.ОбщийВес > 0
		|				И РТиУ.ОбщийВес >= ЛогистическиеБрейки.ВесОт
		|				И РТиУ.ОбщийВес < ЛогистическиеБрейки.ВесДо
		|			ТОГДА &ПорядокВеса
		|		КОГДА &ПорядокОбъема < &ПустойПорядок
		|				И РТиУ.ОбъёмЗаказа > 0
		|				И РТиУ.ОбъёмЗаказа >= ЛогистическиеБрейки.ОбъемОт
		|				И РТиУ.ОбъёмЗаказа < ЛогистическиеБрейки.ОбъемДо
		|			ТОГДА &ПорядокОбъема
		|		ИНАЧЕ &ПустойПорядок
		|	КОНЕЦ КАК ПорядокБрейка,
		|	РТиУ.ОбщийВес КАК ОбщийВес,
		|	РТиУ.ОбъёмЗаказа КАК ОбъёмЗаказа
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РТиУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛогистическиеБрейки КАК ЛогистическиеБрейки
		|		ПО (ЛогистическиеБрейки.Владелец = &СхемаБрейков)
		|			И (НЕ ЛогистическиеБрейки.ПометкаУдаления)
		|			И (ЛогистическиеБрейки.БрейкНегабаритногоЗаказа
		|				ИЛИ &ПорядокВеса < &ПустойПорядок
		|					И РТиУ.ОбщийВес > 0
		|					И РТиУ.ОбщийВес >= ЛогистическиеБрейки.ВесОт
		|					И РТиУ.ОбщийВес < ЛогистическиеБрейки.ВесДо
		|				ИЛИ &ПорядокОбъема < &ПустойПорядок
		|					И РТиУ.ОбъёмЗаказа > 0
		|					И РТиУ.ОбъёмЗаказа >= ЛогистическиеБрейки.ОбъемОт
		|					И РТиУ.ОбъёмЗаказа < ЛогистическиеБрейки.ОбъемДо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|		ПО РТиУ.Ссылка = ДополнительныеПараметрыЗаказа.Заказ
		|ГДЕ
		|	РТиУ.Ссылка В(&МассивЗаказов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокБрейка
		|ИТОГИ ПО
		|	Заказ";
		
		ВыбЗаказ = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбЗаказ.Следующий() Цикл
			Выб = ВыбЗаказ.Выбрать();
			Выб.Следующий();
			
			НаборТВ = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей(); 
			НаборТВ.Отбор.Заказ.Установить(Выб.Заказ); 
			НаборТВ.Прочитать();
			
			Если НаборТВ.Количество() Тогда
				СтрокаПараметров = НаборТВ[0];
			Иначе
				СтрокаПараметров = НаборТВ.Добавить();
			КонецЕсли;
			
			Выб_ЛогистическийБрейк = Выб.ЛогистическийБрейк;
			Выб_ПорядокБрейка = Выб.ПорядокБрейка;
			
			//Если ЗначениеЗаполнено(СтрокаПараметров.ЛогистическийБрейк) И СтрокаПараметров.ЛогистическийБрейк <> Выб_ЛогистическийБрейк Тогда
			//	СтрокаПисьмаОСменеБрейков.Добавить("Заказ " + СокрЛП(Выб.Номер) + ", смена брейка с " + Строка(СтрокаПараметров.ЛогистическийБрейк) + " на " + ?(ЗначениеЗаполнено(Выб_ЛогистическийБрейк), Выб_ЛогистическийБрейк, "пустой брейк") + ".");
			//КонецЕсли;	
			
			СтрокаПараметров.СхемаЛогистическихБрейков = АктуальнаяСхемаЛогистическихБрейков;
			СтрокаПараметров.ЛогистическийБрейк = Выб_ЛогистическийБрейк;
			
			Если Выб_ПорядокБрейка = ПорядокВеса Тогда
				СтрокаПараметров.ГабаритнаяХарактеристикаОпределенияЛогБрейка = Перечисления.ГабаритныеХарактеристикиЗаказа.Вес;
			ИначеЕсли Выб_ПорядокБрейка = ПорядокОбъема Тогда
				СтрокаПараметров.ГабаритнаяХарактеристикаОпределенияЛогБрейка = Перечисления.ГабаритныеХарактеристикиЗаказа.Объем;
			КонецЕсли;
			
			НаборТВ.Записать();

		КонецЦикла;
		//Асеев 14.03.2024 (Задача № 5243)<<<
	КонецЕсли;
	
	//Если СтрокаПисьмаОСменеБрейков.Количество() Тогда
	//	Мас = Новый Массив;
	//	Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	//	//Мас.Добавить("m.aseev@strizh-logistic.ru");
	//	lem.ОтправитьСообщение(Мас, "Смена брейков", СтрСоединить(СтрокаПисьмаОСменеБрейков, Символы.ПС));
	//КонецеСли;
	
КонецПроцедуры	

Функция ОпределитьАктуальныйРежимНазначенияНомеровПалет(Терминал) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПараметрыРегиональныхТерминаловСрезПоследних.РежимНазначенияНомеровПалетПриМаршрутизации КАК РежимНазначенияНомеровПалет
	            |ИЗ
	            |	РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних(, РегиональныйТерминал.Ссылка = &Терминал) КАК ПараметрыРегиональныхТерминаловСрезПоследних";
	Зап.УстановитьПараметр("Терминал", Терминал);
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.РежимНазначенияНомеровПалет;
	Иначе
		Если Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			Возврат Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс;
		ИначеЕсли Терминал = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
			Возврат Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса;
		Иначе
			Возврат Неопределено;
		КонецеСли;	
	КонецеСли;	
КонецФункции	

Процедура УстановитьСформированныеРейсыВГрафикеРейсов(ТаблицаДанных, ДатаРейсов, Регион, ДатаУстановки) Экспорт
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Таб.Транспорт КАК Транспорт,
	            |	Таб.Рейс КАК Рейс
	            |ПОМЕСТИТЬ ВТ_ТаблицаДанных
	            |ИЗ
	            |	&Таб КАК Таб
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Регион КАК Регион,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Транспорт КАК Транспорт,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.ДатаРейса КАК ДатаРейса,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.ТранспортВыйдетВРейс КАК ТранспортВыйдетВРейс,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Водитель КАК Водитель,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Экспедитор КАК Экспедитор,
	            |	ВТ_ТаблицаДанных.Рейс КАК СформированныйРейс,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.РольРейса КАК РольРейса,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.СменаРейса КАК СменаРейса
	            |ИЗ
	            |	РегистрСведений.СформированныйГрафикПоТранспорту.СрезПоследних(
	            |			,
	            |			ДатаРейса = &ДатаРейсов
	            |				И Регион = &Регион) КАК СформированныйГрафикПоТранспортуСрезПоследних
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
	            |		ПО СформированныйГрафикПоТранспортуСрезПоследних.Транспорт.Ссылка = ВТ_ТаблицаДанных.Транспорт
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Регион,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Транспорт,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.ДатаРейса,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.ТранспортВыйдетВРейс,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Водитель,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.Экспедитор,
	            |	ВТ_ТаблицаДанных.Рейс,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.РольРейса,
	            |	СформированныйГрафикПоТранспортуСрезПоследних.СменаРейса";
	Зап.УстановитьПараметр("Таб", ТаблицаДанных);
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейсов);
	Зап.УстановитьПараметр("Регион", Регион);
Таб = Зап.Выполнить().Выгрузить();
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Наб = РегистрыСведений.СформированныйГрафикПоТранспорту.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ДатаУстановки);
		Наб.Отбор.Транспорт.Установить(Выб.Транспорт);
		
		Нов = Наб.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Выб);
		
		Нов.Период = ДатаУстановки;
		Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Наб.Записать();
	КонецЦикла;	
КонецПроцедуры	

Функция СформироватьНомераПалетт(МассивЗагрузок, РежимФормирования, ДатаПланирования) Экспорт
	
	//Док = Загрузка.ПолучитьОбъект();
	
	Зап = Новый Запрос;
	Если РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.Случайно Или не значениезаполнено(РежимФормирования) Тогда
		Зап.Текст = "ВЫБРАТЬ
		            |	ЗагрузкаРейсовВероутРейсы.Рейс.Ссылка КАК Рейс,
		            |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка КАК Загрузка
		            |ИЗ
		            |	Документ.ФормированиеРейсов.Рейсы КАК ЗагрузкаРейсовВероутРейсы
		            |ГДЕ
		            |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка В(&Док)
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	ЗагрузкаРейсовВероутРейсы.Рейс.Транспорт.Наименование";
	ИначеЕсли РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.ПоВремениОкончанияРейса Тогда
		Зап.Текст = "ВЫБРАТЬ
		            |	РейсПоездки.ПланируемоеВремяОкончанияПоездки КАК ВремяПрибытия,
		            |	РейсПоездки.Ссылка.Ссылка КАК Рейс,
		            |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка КАК Загрузка
		            |ИЗ
		            |	Документ.Рейс.Поездки КАК РейсПоездки
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеРейсов.Рейсы КАК ЗагрузкаРейсовВероутРейсы
		            |		ПО РейсПоездки.Ссылка.Ссылка = ЗагрузкаРейсовВероутРейсы.Рейс.Ссылка
		            |ГДЕ
		            |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка В(&Док)
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	РейсПоездки.ПланируемоеВремяОкончанияПоездки УБЫВ";
	ИначеЕсли РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейса Тогда
		Зап.Текст = "ВЫБРАТЬ
		            |	РейсПоездки.ПланируемоеВремяОкончанияПоездки КАК ВремяПрибытия,
		            |	РейсПоездки.Ссылка.Ссылка КАК Рейс,
		            |	ВЫБОР
		            |		КОГДА РейсПоездки.Ссылка.Транспорт.Наименование ПОДОБНО ""Ларгус%""
		            |			ТОГДА 3
		            |		КОГДА РейсПоездки.Ссылка.Транспорт.Наименование ПОДОБНО ""WW%""
		            |			ТОГДА 1
		            |		ИНАЧЕ 2
		            |	КОНЕЦ КАК Приоритет,
		            |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка КАК Загрузка
		            |ИЗ
		            |	Документ.Рейс.Поездки КАК РейсПоездки
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеРейсов.Рейсы КАК ЗагрузкаРейсовВероутРейсы
		            |		ПО РейсПоездки.Ссылка.Ссылка = ЗагрузкаРейсовВероутРейсы.Рейс.Ссылка
		            |ГДЕ
		            |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка В(&Док)
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	Приоритет,
		            |	РейсПоездки.ПланируемоеВремяОкончанияПоездки УБЫВ";
		
		//+++ БАО 27.06.2017 №1180
		
	ИначеЕсли РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс Тогда
		
	//CeHbKA #3237
	ИначеЕсли РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.ПоПрефиксуСмены Тогда
		Зап.Текст = "ВЫБРАТЬ
		            |	ФормированиеРейсов.Рейс.Ссылка КАК Рейс,
		            |	ФормированиеРейсов.Ссылка.Ссылка КАК Загрузка,
		            |	ФормированиеРейсов.Ссылка.СменаМаршрутизации.ПрефиксНумерацииПалет КАК ПрефиксНумерацииПалет
		            |ИЗ
		            |	Документ.ФормированиеРейсов.Рейсы КАК ФормированиеРейсов
		            |ГДЕ
		            |	ФормированиеРейсов.Ссылка.Ссылка В(&Док)
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	ФормированиеРейсов.Рейс.Транспорт.Наименование";
	//CeHbKA #3237
		
	КонецеСли;	
	
	ТекущийПрефикс = 0;
	
	Если РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс Тогда
		
		Рез = СформироватьНомераПалетПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс(МассивЗагрузок, ДатаПланирования);
		
	// Якурнов 22.08.2018 12:05:40
	ИначеЕсли РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИНомеруПолигона Тогда
		
		Рез = СформироватьНомераПалетПоМаркеТранспортаИНомеруПолигона(МассивЗагрузок, ДатаПланирования);
		
	Иначе
		
		Зап.УстановитьПараметр("Док", МассивЗагрузок);			
		
		Рез = Зап.Выполнить().Выгрузить(); 
		
		НП = 1; 
		Наб = РегистрыСведений.ИсторияНазначенияНомеровПалет.СоздатьНаборЗаписей();
		ТекД = ТекущаяДата();
		
		Наб.Отбор.Период.Установить(ТекД);
		Для Каждого Тек Из Рез Цикл
			
			Рейс = Тек.Рейс.ПолучитьОбъект();
			Рейс.НомерПалетты = НП;
			
			//CeHbKA #3237
			Если РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.ПоПрефиксуСмены
				И ЗначениеЗаполнено(Тек.ПрефиксНумерацииПалет) Тогда
				Рейс.НомерПалетты = Тек.ПрефиксНумерацииПалет + НП;
			КонецЕсли;
			//CeHbKA #3237
				
			РейсЗаписан = Истина;
			Попытка
				
				Рейс.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				РейсЗаписан = Ложь;
			КонецПопытки;
			
			Если РейсЗаписан Тогда
				НовЗ = Наб.Добавить();
				НовЗ.Период = ТекД;
				НовЗ.Рейс = Рейс.Ссылка;
				НовЗ.НомерПалеты = НП;
				//CeHbKA #3237
				Если РежимФормирования = Перечисления.РежимыНазначенияНомеровПалет.ПоПрефиксуСмены
					И ЗначениеЗаполнено(Тек.ПрефиксНумерацииПалет) Тогда
					НовЗ.НомерПалеты = Тек.ПрефиксНумерацииПалет + НП;
				КонецЕсли;
				//CeHbKA #3237
				НовЗ.Пользователь = ПараметрыСеанса.ТекущийПользователь;
				НовЗ.РежимНазначенияНомеровПалет = РежимФормирования;
				НовЗ.НетДанныхПредыдущейПривязки = Ложь;
				НовЗ.ЗагрузкаРейсов = Тек.Загрузка;
			КонецеСли;	
			
			
			НП = НП + 1;
			
		КонецЦикла;	
		
		Попытка
			Наб.Записать();
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Обычное);
		КонецПопытки;	
	КонецЕсли;

	//Таб = Рез.Скопировать();
	//Таб.Свернуть("Загрузка");
	//
	//Для Каждого Тек Из Таб Цикл
	//	Док = Тек.Загрузка.ПолучитьОбъект();
	//	Док.ФормироватьНомераПалетт = Истина;
	//	Док.Записать(РежимЗаписиДокумента.Запись);
	//КонецЦикла;
	
	// Якурнов 22.08.2018 16:18:18
	Если ТипЗнч(МассивЗагрузок) = Тип("ДокументСсылка.ФормированиеРейсов") Тогда
		Если ЗначениеЗаполнено(МассивЗагрузок.Ссылка) Тогда
			Об = МассивЗагрузок.Ссылка.ПолучитьОбъект();
			Об.ФормироватьНомераПалетт = Истина;
			Об.Записать(РежимЗаписиДокумента.Запись);
		КонецеСли;	
	Иначе	
		Для Каждого Тек Из МассивЗагрузок Цикл
			Если Не ЗначениеЗаполнено(Тек.Ссылка) Тогда
				Продолжить;
			КонецеСли;	
			Об = Тек.Ссылка.ПолучитьОбъект();
			Об.ФормироватьНомераПалетт = Истина;
			Об.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция СформироватьНомераПалетПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс_До_ПМ(Доки) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РейсПоездки.ПланируемоеВремяОкончанияПоездки КАК ВремяПрибытия,
	               |	РейсПоездки.Ссылка.Ссылка КАК Рейс,
	               |	РейсПоездки.Ссылка.Транспорт КАК Транспорт,
	               |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка КАК ЗагрузкаРейсов
	               |ПОМЕСТИТЬ ВТ_Рейсы
	               |ИЗ
	               |	Документ.Рейс.Поездки КАК РейсПоездки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеРейсов.Рейсы КАК ЗагрузкаРейсовВероутРейсы
	               |		ПО РейсПоездки.Ссылка.Ссылка = ЗагрузкаРейсовВероутРейсы.Рейс.Ссылка
	               |ГДЕ
	               |	ЗагрузкаРейсовВероутРейсы.Ссылка.Ссылка В(&Док)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Рейсы.Транспорт КАК Транспорт,
	               |	МАКСИМУМ(ВсеРейсыПоТранспорту.Ссылка) КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ПоследниеРейсы
	               |ИЗ
	               |	ВТ_Рейсы КАК ВТ_Рейсы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК ВсеРейсыПоТранспорту
	               |		ПО ВТ_Рейсы.Транспорт = ВсеРейсыПоТранспорту.Транспорт
	               |ГДЕ
	               |	ВсеРейсыПоТранспорту.ДатаРейса <= &НачалоПрошлогоДня
	               |	И ВсеРейсыПоТранспорту.ПометкаУдаления = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Рейсы.Транспорт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Рейсы.Рейс КАК Рейс,
	               |	МАКСИМУМ(ПривязкаМашинКРейсамСрезПоследних.Транспорт) КАК Транспорт
	               |ПОМЕСТИТЬ ВТ_Рейс_ТранспортПрошлогоДня
	               |ИЗ
	               |	ВТ_Рейсы КАК ВТ_Рейсы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеРейсы КАК ВТ_ПоследниеРейсы
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, ) КАК ПривязкаМашинКРейсамСрезПоследних
	               |			ПО ВТ_ПоследниеРейсы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	               |		ПО ВТ_Рейсы.Транспорт = ВТ_ПоследниеРейсы.Транспорт
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Рейсы.Рейс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Рейсы.ВремяПрибытия КАК ВремяПрибытия,
	               |	ВТ_Рейсы.Рейс КАК Рейс,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейс_ТранспортПрошлогоДня.Транспорт ЕСТЬ NULL
	               |			ТОГДА 600
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТ_Рейс_ТранспортПрошлогоДня.Транспорт.Родитель.Префикс, 0) = 0
	               |					ТОГДА 600
	               |				ИНАЧЕ ВТ_Рейс_ТранспортПрошлогоДня.Транспорт.Родитель.Префикс
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Префикс,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейс_ТранспортПрошлогоДня.Транспорт ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НетПривязки,
	               |	ВТ_Рейс_ТранспортПрошлогоДня.Транспорт КАК Транспорт,
	               |	ВТ_Рейс_ТранспортПрошлогоДня.Транспорт.Родитель.Префикс КАК ПрефиксГруппы,
	               |	ВТ_Рейсы.Транспорт КАК ТранспортВероут,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейс_ТранспортПрошлогоДня.Транспорт ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НетДанныхПривязки,
	               |	ВТ_Рейсы.ЗагрузкаРейсов КАК ЗагрузкаРейсов
	               |ИЗ
	               |	ВТ_Рейсы КАК ВТ_Рейсы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейс_ТранспортПрошлогоДня КАК ВТ_Рейс_ТранспортПрошлогоДня
	               |		ПО ВТ_Рейсы.Рейс = ВТ_Рейс_ТранспортПрошлогоДня.Рейс
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Префикс,
	               |	ВремяПрибытия УБЫВ";



	
	//--- БАО 25.09.2017 №1180
	Запрос.УстановитьПараметр("Док", Доки);
	Запрос.УстановитьПараметр("КонецПрошлогоДня", НачалоДня(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("НачалоПрошлогоДня", НачалоДня(НачалоДня(ТекущаяДата())-1));
	
	

	Рез = Запрос.Выполнить().Выгрузить(); 
	
	ТекущийПрефикс = 0;
	НП = 1;
	
	//Для Тестов
	//Док = Документы.ЗагрузкаРейсовВероут.НайтиПоНомеру("000000910");
	//ПолучитьФорма("Обработка.ВыгрузкаМашинВВероут.Форма.ФормаУправляемая").СформироватьНомераПалетт(Док);
	
	
	Наб = РегистрыСведений.ИсторияНазначенияНомеровПалет.СоздатьНаборЗаписей();
	ТекД = ТекущаяДата();
	
	Наб.Отбор.Период.Установить(ТекД);
	
	Для Каждого Тек Из Рез Цикл
		Рейс = Тек.Рейс.ПолучитьОбъект();
		Рейс.НомерПалетты = НП;
		
		
		Если  ТекущийПрефикс <> Тек.Префикс Тогда
			НП = 1;
			ТекущийПрефикс = Тек.Префикс;
		КонецЕсли;	
		
		НПСтрока = Формат(НП,"ЧГ=0");  
		//Если Тек.НетПривязки Тогда
		//	НПСтрока =  НПСтрока + "600";	
		//Иначе
		НПСтрока = (Тек.Префикс) + НПСтрока;
		//КонецЕсли;	
		Рейс.НомерПалетты = Число(НПСтрока);
		
		РейсЗаписан = Истина;
		Попытка
			
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			РейсЗаписан = Ложь;
		КонецПопытки;
		
		Если РейсЗаписан Тогда
			НовЗ = Наб.Добавить();
			НовЗ.Период = ТекД;
			НовЗ.Рейс = Рейс.Ссылка;
			НовЗ.НомерПалеты = Рейс.НомерПалетты;
			НовЗ.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			НовЗ.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс;
			НовЗ.НетДанныхПредыдущейПривязки = Тек.НетДанныхПривязки;
			НовЗ.ЗагрузкаРейсов = Тек.ЗагрузкаРейсов;
		КонецеСли;	
		
		НП = НП + 1;
		
	КонецЦикла;	

	Попытка
		Наб.Записать();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Обычное)
	КонецПопытки;	
	
	
	Возврат Рез;
	
КонецФункции	


Функция СформироватьНомераПалетПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс(Доки, ДатаПланирования) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РейсД.Ссылка КАК Рейс,
	               |	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	               |	МАКСИМУМ(РейсПоездки.ПланируемоеВремяОкончанияПоездки) КАК ВремяПрибытия,
	               |	ФормированиеРейсовРейсы.Ссылка КАК ЗагрузкаРейсов
	               |ПОМЕСТИТЬ ВТ_Рейсы
	               |ИЗ
	               |	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК РейсД
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеРейсов.Рейсы КАК ФормированиеРейсовРейсы
	               |			ПО (ФормированиеРейсовРейсы.Рейс = РейсД.Ссылка)
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Поездки КАК РейсПоездки
	               |			ПО РейсД.Ссылка = РейсПоездки.Ссылка
	               |		ПО ПривязкаМашинКРейсамСрезПоследних.Рейс = РейсД.Ссылка
	               |ГДЕ
	               |	РейсД.ДатаРейса = &ДатаРейсов
	               |	И РейсД.Проведен = ИСТИНА
	               |	И ФормированиеРейсовРейсы.Ссылка В(&Доки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РейсД.Ссылка,
	               |	ПривязкаМашинКРейсамСрезПоследних.Транспорт,
	               |	ФормированиеРейсовРейсы.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Рейсы.ВремяПрибытия КАК ВремяПрибытия,
	               |	ВТ_Рейсы.Рейс КАК Рейс,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейсы.Транспорт ЕСТЬ NULL
	               |			ТОГДА 600
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТ_Рейсы.Транспорт.Родитель.Префикс, 0) = 0
	               |					ТОГДА 600
	               |				ИНАЧЕ ВТ_Рейсы.Транспорт.Родитель.Префикс
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Префикс,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейсы.Транспорт ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НетПривязки,
	               |	ВТ_Рейсы.Транспорт КАК Транспорт,
	               |	ВТ_Рейсы.Транспорт.Родитель.Префикс КАК ПрефиксГруппы,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейсы.Транспорт ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НетДанныхПривязки,
	               |	ВТ_Рейсы.ЗагрузкаРейсов КАК ЗагрузкаРейсов,
	               |	ВТ_Рейсы.Рейс.НомерПалетты КАК НомерПалетты
	               |ИЗ
	               |	ВТ_Рейсы КАК ВТ_Рейсы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Префикс,
	               |	ВремяПрибытия УБЫВ,
	               |	НомерПалетты УБЫВ";



	

	Запрос.УстановитьПараметр("Доки", Доки);
	Запрос.УстановитьПараметр("ДатаРейсов", ДатаПланирования);
	
	

	Рез = Запрос.Выполнить().Выгрузить(); 
	
	ТекущийПрефикс = 0;
	НП = 1;
	
	
	Наб = РегистрыСведений.ИсторияНазначенияНомеровПалет.СоздатьНаборЗаписей();
	ТекД = ТекущаяДата();
	
	Наб.Отбор.Период.Установить(ТекД);
	
	Для Каждого Тек Из Рез Цикл
		Если  ТекущийПрефикс <> Тек.Префикс Тогда
			НП = 1;
			ТекущийПрефикс = Тек.Префикс;
		КонецЕсли;	
		
		
		Если Тек.НомерПалетты <> 0 Тогда
			НП = НП + 1;
			Продолжить;
		КонецеСли;	
		
		
		Рейс = Тек.Рейс.ПолучитьОбъект();
		
		
		
		Рейс.НомерПалетты = НП;
		
		
		
		НПСтрока = Формат(НП,"ЧГ=0");  
		//Если Тек.НетПривязки Тогда
		//	НПСтрока =  НПСтрока + "600";	
		//Иначе
		НПСтрока = (Тек.Префикс) + НПСтрока;
		//КонецЕсли;	
		Рейс.НомерПалетты = Число(НПСтрока);
		
		РейсЗаписан = Истина;
		Попытка
			
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			РейсЗаписан = Ложь;
		КонецПопытки;
		
		Если РейсЗаписан Тогда
			НовЗ = Наб.Добавить();
			НовЗ.Период = ТекД;
			НовЗ.Рейс = Рейс.Ссылка;
			НовЗ.НомерПалеты = Рейс.НомерПалетты;
			НовЗ.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			НовЗ.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИПоВремениОкончанияРейсаПлюсПрефикс;
			НовЗ.НетДанныхПредыдущейПривязки = Тек.НетДанныхПривязки;
			НовЗ.ЗагрузкаРейсов = Тек.ЗагрузкаРейсов;
		КонецеСли;	
		
		НП = НП + 1;
		
	КонецЦикла;	

	Попытка
		Наб.Записать();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Обычное)
	КонецПопытки;	
	
	
	Возврат Рез;
	
КонецФункции	

// Якурнов 22.08.2018 11:57:46
Функция СформироватьНомераПалетПоМаркеТранспортаИНомеруПолигона(Доки, ДатаПланирования) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РейсД.Ссылка КАК Рейс,
	               |	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	               |	МАКСИМУМ(РейсПоездки.ПланируемоеВремяОкончанияПоездки) КАК ВремяПрибытия,
	               |	ФормированиеРейсовРейсы.Ссылка КАК ЗагрузкаРейсов
	               |ПОМЕСТИТЬ ВТ_Рейсы
	               |ИЗ
	               |	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК РейсД
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеРейсов.Рейсы КАК ФормированиеРейсовРейсы
	               |			ПО (ФормированиеРейсовРейсы.Рейс = РейсД.Ссылка)
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Поездки КАК РейсПоездки
	               |			ПО РейсД.Ссылка = РейсПоездки.Ссылка
	               |		ПО ПривязкаМашинКРейсамСрезПоследних.Рейс = РейсД.Ссылка
	               |ГДЕ
	               |	РейсД.ДатаРейса = &ДатаРейсов
	               |	И РейсД.Проведен = ИСТИНА
	               |	И ФормированиеРейсовРейсы.Ссылка В(&Доки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РейсД.Ссылка,
	               |	ПривязкаМашинКРейсамСрезПоследних.Транспорт,
	               |	ФормированиеРейсовРейсы.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Рейсы.Рейс КАК Рейс,
	               |	ЕСТЬNULL(ПолигоныИКатегорииЗаказовДляРейсов.Полигон.Порядок, 0) КАК НомерПолигона,
	               |	ВТ_Рейсы.ЗагрузкаРейсов.СхемаНазначенияНомеровПалетПоПолигонам КАК ЗагрузкаРейсовСхемаНазначенияНомеровПалетПоПолигонам,
	               |	ПолигоныИКатегорииЗаказовДляРейсов.Полигон КАК Полигон
	               |ПОМЕСТИТЬ ТабРейсНомерПолигона
	               |ИЗ
	               |	ВТ_Рейсы КАК ВТ_Рейсы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныИКатегорииЗаказовДляРейсов КАК ПолигоныИКатегорииЗаказовДляРейсов
	               |		ПО ВТ_Рейсы.Рейс = ПолигоныИКатегорииЗаказовДляРейсов.Рейс
					//CeHbKA #3179 07.06.2019 
	               |		И ВТ_Рейсы.Рейс.СменаРейса = ПолигоныИКатегорииЗаказовДляРейсов.Смена
					//CeHbKA #3179 07.06.2019 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабРейсНомерПолигона.Рейс КАК Рейс,
	               |	ЕСТЬNULL(СхемыНазначенияНомеровПалетПоПолигонамПолигоны.НомерСтроки, 1000) КАК ПорядокПолигона,
	               |	ТабРейсНомерПолигона.Полигон КАК Полигон
	               |ПОМЕСТИТЬ ТабПриоритетаПолигона
	               |ИЗ
	               |	ТабРейсНомерПолигона КАК ТабРейсНомерПолигона
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СхемыНазначенияНомеровПалетПоПолигонам.Полигоны КАК СхемыНазначенияНомеровПалетПоПолигонамПолигоны
	               |		ПО ТабРейсНомерПолигона.ЗагрузкаРейсовСхемаНазначенияНомеровПалетПоПолигонам = СхемыНазначенияНомеровПалетПоПолигонамПолигоны.Ссылка.Ссылка
	               |			И ТабРейсНомерПолигона.НомерПолигона = СхемыНазначенияНомеровПалетПоПолигонамПолигоны.НомерПолигона
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Рейсы.ВремяПрибытия КАК ВремяПрибытия,
	               |	ВТ_Рейсы.Рейс КАК Рейс,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейсы.Транспорт ЕСТЬ NULL
	               |			ТОГДА 600
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТ_Рейсы.Транспорт.Родитель.Префикс, 0) = 0
	               |					ТОГДА 600
	               |				ИНАЧЕ ВТ_Рейсы.Транспорт.Родитель.Префикс
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Префикс,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейсы.Транспорт ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НетПривязки,
	               |	ВТ_Рейсы.Транспорт КАК Транспорт,
	               |	ВТ_Рейсы.Транспорт.Родитель.Префикс КАК ПрефиксГруппы,
	               |	ВЫБОР
	               |		КОГДА ВТ_Рейсы.Транспорт ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НетДанныхПривязки,
	               |	ВТ_Рейсы.ЗагрузкаРейсов КАК ЗагрузкаРейсов,
	               |	ВТ_Рейсы.Рейс.НомерПалетты КАК НомерПалетты,
	               |	ТабПриоритетаПолигона.ПорядокПолигона КАК ПорядокПолигона,
	               |	ТабПриоритетаПолигона.Полигон КАК Полигон
	               |ИЗ
	               |	ВТ_Рейсы КАК ВТ_Рейсы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабПриоритетаПолигона КАК ТабПриоритетаПолигона
	               |		ПО ВТ_Рейсы.Рейс = ТабПриоритетаПолигона.Рейс
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Префикс,
	               |	ПорядокПолигона,
	               |	ВТ_Рейсы.Рейс.Номер";


	Запрос.УстановитьПараметр("Доки", Доки);
	Запрос.УстановитьПараметр("ДатаРейсов", ДатаПланирования);

	Рез = Запрос.Выполнить().Выгрузить(); 
	
	ТекущийПрефикс = 0;
	НП = 1;
	ТекущийРейс = Документы.Рейс.ПустаяСсылка();
	
	Наб = РегистрыСведений.ИсторияНазначенияНомеровПалет.СоздатьНаборЗаписей();
	ТекД = ТекущаяДата();
	
	Наб.Отбор.Период.Установить(ТекД);
	
	МассивРейсов = Новый Массив;
	Для Каждого Тек Из Рез Цикл
		
		//Игнорируем полигоны с меньшим приоритетом и берем только первую строку с рейсом
		Если МассивРейсов.Найти(Тек.Рейс) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивРейсов.Добавить(Тек.Рейс);
		
		Если  ТекущийПрефикс <> Тек.Префикс Тогда
			НП = 1;
			ТекущийПрефикс = Тек.Префикс;
		КонецЕсли;	
		
		
		Если Тек.НомерПалетты <> 0 Тогда
			НП = НП + 1;
			Продолжить;
		КонецеСли;	
		
		
		Рейс = Тек.Рейс.ПолучитьОбъект();
		
		
		
		Рейс.НомерПалетты = НП;
		
		
		
		НПСтрока = Формат(НП,"ЧГ=0");  
		//Если Тек.НетПривязки Тогда
		//	НПСтрока =  НПСтрока + "600";	
		//Иначе
		НПСтрока = (Тек.Префикс) + НПСтрока;
		//КонецЕсли;	
		Рейс.НомерПалетты = Число(НПСтрока);
		
		РейсЗаписан = Истина;
		Попытка
			
			Рейс.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			РейсЗаписан = Ложь;
		КонецПопытки;
		
		Если РейсЗаписан Тогда
			НовЗ = Наб.Добавить();
			НовЗ.Период = ТекД;
			НовЗ.Рейс = Рейс.Ссылка;
			НовЗ.НомерПалеты = Рейс.НомерПалетты;
			НовЗ.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			НовЗ.РежимНазначенияНомеровПалет = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИНомеруПолигона;
			НовЗ.НетДанныхПредыдущейПривязки = Тек.НетДанныхПривязки;
			НовЗ.ЗагрузкаРейсов = Тек.ЗагрузкаРейсов;
		КонецеСли;	
		
		НП = НП + 1;
		
	КонецЦикла;	

	Попытка
		Наб.Записать();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Обычное)
	КонецПопытки;	
	
	
	Возврат Рез;
	
КонецФункции	


Функция ПрочитатьДополнительныеПараметрыТранспорта(Транспорт) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ДополнительныеПараметрыТранспортаСрезПоследних.УдаленноеЗакрытиеРейсов КАК УдаленноеЗакрытиеРейсов,
	            |	ДополнительныеПараметрыТранспортаСрезПоследних.РежимПечатиЧеков КАК РежимПечатиЧеков,
	            |	ДополнительныеПараметрыТранспортаСрезПоследних.МаксимальноеКоличествоЗаказовПриПолигональнойМаршрутизации КАК МаксимальноеКоличествоЗаказовПриПолигональнойМаршрутизации
	            |ИЗ
	            |	РегистрСведений.ДополнительныеПараметрыТранспорта.СрезПоследних(, Транспорт = &Транспорт) КАК ДополнительныеПараметрыТранспортаСрезПоследних";
	Зап.УстановитьПараметр("Транспорт", Транспорт);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Струк = Новый Структура;
	
	Если Выб.Следующий() Тогда
		Струк = Новый Структура;
		Струк.Вставить("УдаленноеЗакрытие", Выб.УдаленноеЗакрытиеРейсов);
		Струк.Вставить("РежимПечатиЧеков", Выб.РежимПечатиЧеков);
		Струк.Вставить("МаксимальноеКоличествоЗаказовПриПолигональнойМаршрутизации", Выб.МаксимальноеКоличествоЗаказовПриПолигональнойМаршрутизации);
		Возврат Струк;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

Процедура УстановитьДляРейсаПризнакУдаленногоЗакрытия(Рейс, Признак) Экспорт
	РейсОбъект = Рейс.ПолучитьОбъект();
	РейсОбъект.УдаленноеЗакрытиеРейса = Признак;
	РейсОбъект.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры	

// Якурнов 22.08.2018 9:48:44
Функция ПолучитьСхемуНазначенияНомеровПалетПоПолигонам(РегиональныйТерминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыРегиональныхТерминаловСрезПоследних.СхемаНазначенияНомеровПалетПоПолигонам КАК СхемаНазначенияНомеровПалетПоПолигонам
	               |ИЗ
	               |	РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних КАК ПараметрыРегиональныхТерминаловСрезПоследних
	               |ГДЕ
	               |	ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал = &РегиональныйТерминал";
	
	Запрос.УстановитьПараметр("РегиональныйТерминал",РегиональныйТерминал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		   Возврат Выборка.СхемаНазначенияНомеровПалетПоПолигонам;
	КонецЕсли;
	
	Возврат Справочники.СхемыНазначенияНомеровПалетПоПолигонам.ПустаяСсылка();;
КонецФункции


Процедура ФормированиеНомеровПалетПоРегламенту(КодНастройки) Экспорт
	
	// Якурнов 23.08.2018 9:04:08
	ДатаРейса = НачалоДня(ТекущаяДата() + 24*60*60);
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ФормированиеРейсов.Ссылка КАК Док,
	|	ФормированиеРейсов.РежимНазначенияНомеровПалет КАК РежимНазначенияНомеровПалет
	|ИЗ
	|	Документ.ФормированиеРейсов КАК ФормированиеРейсов
	|ГДЕ
	|	ФормированиеРейсов.ДатаРейсов = &ДатаРейсов
	|	И ФормированиеРейсов.ПометкаУдаления = ЛОЖЬ
	|	И ФормированиеРейсов.ТерминалДоставки.Код = &ТерминалДоставкиКод";
	Зап.УстановитьПараметр("ДатаРейсов", ДатаРейса);
	Зап.УстановитьПараметр("ТерминалДоставкиКод", КодНастройки);
	
	ВыбФормированияРейса = Зап.Выполнить().Выбрать();
	
	Пока ВыбФормированияРейса.Следующий() Цикл
		СформироватьНомераПалетт(ВыбФормированияРейса.Док,ВыбФормированияРейса.РежимНазначенияНомеровПалет, ДатаРейса);
	КонецЦикла;
	
КонецПроцедуры	


#Область РаботаСДеревомПолигонов
Функция ПолучитьЗаборнуюКатегориюЗаказа(СхемаЛогистическихБрейков) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЛогистическиеБрейки.Ссылка КАК Категория
	            |ИЗ
	            |	Справочник.ЛогистическиеБрейки КАК ЛогистическиеБрейки
	            |ГДЕ
	            |	ЛогистическиеБрейки.Владелец = &Схема
	            |	И ЛогистическиеБрейки.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	            |	И ЛогистическиеБрейки.ПометкаУдаления = ЛОЖЬ";
	Зап.УстановитьПараметр("Схема", СхемаЛогистическихБрейков);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Категория;
	Иначе
		Возврат Неопределено;
	КонецеСли;	
КонецФункции	


Функция ПолучитьПараметрыКолонокКатегорийЗаказовДляМаршрутизатора(СхемаЛогистическихБрейков) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ВЫБОР
	            |		КОГДА ЛогистическиеБрейки.АббревиатураКолонкиВПолигональномМаршрутизаторе = """"
	            |			ТОГДА ЛогистическиеБрейки.Наименование
	            |		ИНАЧЕ ЛогистическиеБрейки.АббревиатураКолонкиВПолигональномМаршрутизаторе
	            |	КОНЕЦ КАК НаименованиеКолонки,
	            |	ЛогистическиеБрейки.Маршрутизатор_ГруппаКолонок КАК Маршрутизатор_ГруппаКолонок
	            |ИЗ
	            |	Справочник.ЛогистическиеБрейки КАК ЛогистическиеБрейки
	            |ГДЕ
	            |	ЛогистическиеБрейки.Владелец = &Схема
	            |	И ЛогистическиеБрейки.ПометкаУдаления = ЛОЖЬ
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ЛогистическиеБрейки.ПорядокКолонки";
	Зап.УстановитьПараметр("Схема", СхемаЛогистическихБрейков);
	
	Таб = Зап.Выполнить().Выгрузить();
	
	Счетчик = 0;
	Для Каждого Тек Из Таб Цикл
		Счетчик = Счетчик + 1;
		Тек.НаименованиеКолонки = СтрЗаменить(Тек.НаименованиеКолонки, " ", "");
		Если Не ЗначениеЗаполнено(Тек.Маршрутизатор_ГруппаКолонок) Тогда
			Тек.Маршрутизатор_ГруппаКолонок = "ГруппаКолонок" + Формат(Счетчик, "ЧГ=");
		КонецеСли;	
	КонецЦикла;	
	Нов = Таб.Добавить();
	Нов.НаименованиеКолонки = "NK";
	Нов.Маршрутизатор_ГруппаКолонок = "ГруппаКолонок8";
	Возврат Таб;
КонецФункции	
#КонецОбласти

&НаСервере
Процедура ПривязатьДанныеПоРейсуКЗаборамНаСервере(Рейс, Машина, Водитель, Экспедитор) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.ЗаборТовара).Ссылка КАК Забор
        |ИЗ
        |   Документ.Рейс.Заказы КАК РейсЗаказы
        |ГДЕ
        |   РейсЗаказы.Заказ.Ссылка ССЫЛКА Документ.ЗаборТовара
        |   И РейсЗаказы.Ссылка = &Рейс";
        
    Запрос.УстановитьПараметр("Рейс",Рейс);
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ЗаборОбъект = ВыборкаДетальныеЗаписи.Забор.ПолучитьОбъект();
        ЗаборОбъект.Транспорт = Машина;
        ЗаборОбъект.Водитель = Водитель;
        ЗаборОбъект.Экспедитор = Экспедитор;
        ЗаборОбъект.Записать(РежимЗаписиДокумента.Запись);
    КонецЦикла;
    

КонецПроцедуры

Процедура ПривязатьМашинунаСервере(Рейс, Машина, Водитель, Экспедитор) Экспорт
	ТекД = ТекущаяДата();
	Наб = РегистрыСведений.ПривязкаМашинКРейсам.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекД);
	Наб.Отбор.Рейс.Установить(Рейс);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекД;
	Нов.Рейс = Рейс;
	Нов.Транспорт = Машина;
	Нов.КтоПривязал = ПараметрыСеанса.ТекущийПользователь;
	Нов.Водитель = Водитель;
    Нов.Экспедитор = Экспедитор;
	
	
	Наб.Записать();
	
	РН = Рейс.РейсМестнойДоставки.ПолучитьОбъект();
	РН.Транспорт = Машина;
	РН.Водитель = Водитель;
	РН.Экспедитор = Экспедитор;
	РН.Записать();
	
	//+++ БАО 11.08.2017 №1648
	рэИнтеграцияРэдЭкспресс.REDРегламентВыгрузкиПоКурьерам_РегистрацияДляОтправки(Рейс, Водитель);
	//--- БАО 11.08.2017 №1648
	
	//+++ БАО 09.10.2017 №1932 
	
	Возврат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПараметрыТарифаЗаказаСрезПоследних.ЗонаТарификации.КодТарифа, 0) КАК ЗонаТарификацииКодТарифа,
	               |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	               |	РеализацияТоваровУслуг.Номер КАК ЗаказНомер,
	               |	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияПо, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяПрибытияПо,
	               |	новаМестнаяДоставка.ТочкаПрибытия.Наименование КАК ТочкаПрибытия,
	               |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.НомерГосударственнойРегистрации КАК НомерГосударственнойРегистрации,
	               |	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	               |	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	               |	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор
	               |ИЗ
	               |	Документ.Рейс.Заказы КАК РейсЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	               |			ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних КАК ПараметрыТарифаЗаказаСрезПоследних
	               |			ПО РеализацияТоваровУслуг.Ссылка = ПараметрыТарифаЗаказаСрезПоследних.Заказ
	               |		ПО РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	               |		ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	               |ГДЕ
	               |	РейсЗаказы.Ссылка = &Рейс";
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачалоСтр = "DECLARE @t TOrderCar   ";
	Стр = НачалоСтр;

	
	// Якурнов 07.08.2018 11:32:25
	Стр2 = "DECLARE @t TOrderTrip   ";
	
	// Якурнов 08.08.2018 16:14:49
	НомерРейсаМестнойДоставки = Рейс.РейсМестнойДоставки.Номер;

	//-CeHbKA Дробница Р. 05.10.2018
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл 	
		
		// Якурнов 30.08.2018 11:00:38 Исключаем ситуацию с ДАТАВРЕМЯ(1, 1, 1)
		//Если Выборка.ВремяПрибытияПо = ДАТА(1, 1, 1) Тогда
		//	Продолжить;
		//КонецЕсли;		
		
		Менеджер = РегистрыСведений.ИсторияПрикрепленияЗаказаКРейсам.СоздатьМенеджерЗаписи();
		Менеджер.Период = ТекущаяДата();
		Менеджер.Заказ = Выборка.Заказ;
		Менеджер.Рейс = Рейс;
		Менеджер.Транспорт = Выборка.Транспорт;
		
		Менеджер.Записать();
		
		ЗонаРайон = Формат(?(ЗначениеЗаполнено(Выборка.ЗонаТарификацииКодТарифа), Выборка.ЗонаТарификацииКодТарифа, 0),"ЧН=0; ЧГ=0" );
		
		Стр = Стр + "                                                                                                                                                                                                                      
		|INSERT INTO @t ([orderID],[car],[who],[deliveryDate],[computedAddress],isRegion) VALUES (" + СокрЛП(Выборка.ЗаказНомер) + ",'" + Выборка.НомерГосударственнойРегистрации + "','" + ПараметрыСеанса.ТекущийПользователь + "', '" + mas.ДатаИз1С(Выборка.ВремяПрибытияПо, Ложь)+"', " + ?(Выборка.ТочкаПрибытия="NULL", "NULL", "'" + СтрЗаменить(Строка(Выборка.ТочкаПрибытия), "'", "") + "'") + "," + Строка(ЗонаРайон) + ")";
		
		// Якурнов 07.08.2018 11:32:33 Проверен НомерРейсаМестнойДоставки
		Если ЗначениеЗаполнено(НомерРейсаМестнойДоставки) Тогда			
			Стр2 = Стр2 + "
			|INSERT INTO @t ([orderId],[tripId],[car],[fio1],[fio2]) VALUES (" + СокрЛП(Выборка.ЗаказНомер) + "," + Формат(Число(НомерРейсаМестнойДоставки), "ЧГ=") + ",'" + Выборка.НомерГосударственнойРегистрации + "','" + Выборка.Водитель + "', '"+Выборка.Экспедитор+"')";
		КонецЕсли;
		
		//-CeHbKA Дробница Р. 05.10.2018
		
		Если  Не ЗначениеЗаполнено(Выборка.НомерГосударственнойРегистрации) Тогда Продолжить КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Address", ?(Выборка.ТочкаПрибытия="NULL", "NULL", "'" + СтрЗаменить(Строка(Выборка.ТочкаПрибытия), "'", "") + "'"));//?(Тек.АдресДоставки = "NULL", "NULL", "" + Тек.АдресДоставки + ""));
		ПараметрыЗапроса.Вставить("Car", СокрЛП(Выборка.НомерГосударственнойРегистрации));//Тек.НомерТранспорта);
		ПараметрыЗапроса.Вставить("DeliveryDate", Выборка.ВремяПрибытияПо);//ДатаИз1С(Тек.ДатаДоставки, Ложь));
		ПараметрыЗапроса.Вставить("IsRegion", Строка(ЗонаРайон));
		ПараметрыЗапроса.Вставить("OrderId", СокрЛП(Выборка.ЗаказНомер));//Тек.Номер);
		ПараметрыЗапроса.Вставить("Who", СокрЛП(ПараметрыСеанса.ТекущийПользователь));
		
		МассивПараметров.Добавить(ПараметрыЗапроса);
		
		//CeHbKA Дробница Р. 05.10.2018 -

	КонецЦикла;			
			
	Если Стр <> НачалоСтр Тогда	
		
		//Дробница Р. 08.10.2018 2482
		Если МассивПараметров.Количество() > 0 Тогда
			
			ПараметрыЗапроса = Новый Структура;		
			ПараметрыЗапроса.Вставить("orderCars", МассивПараметров);
			СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(Перечисления.ВидыЗапросовWEBСервис.SetOrderCarsResult, ПараметрыЗапроса);
			Если НЕ СтруктураВозврата.Успешно Тогда
				Сообщить("Ошибка выгрузки машин. " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецЕсли;
		
		//Евген.ЗапросКИнтернетМагазину(Стр + "
		//|EXEC import_setOrderCarsFrom1C @t
		//|", Евген.СоздатьПодключениеКИнтернетМагазину());
		
		// Якурнов 07.08.2018 11:32:43
		//Асеев 09.09.2020 (Задача № 4205)>>>
		//добавлен КонтекстВызова
		Евген.ЗапросКИнтернетМагазину(Стр2 + "
		|EXEC import_setTripFrom1C @t
		|", Евген.СоздатьПодключениеКИнтернетМагазину(),,, "ОбщийМодуль.МаршрутизацияЗаказовСервер.ПривязатьМашинунаСервере");
		//Асеев 09.09.2020 (Задача № 4205)<<<
	КонецЕсли;
		
			
	//--- БАО 09.10.2017 №1932 		

КонецПроцедуры




&НаСервере
Процедура ПривязатьДанныеПоРейсуКЗаборамНаСервереТест(Рейс, Машина, Водитель, Экспедитор) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.ЗаборТовара).Ссылка КАК Забор
        |ИЗ
        |   Документ.Рейс.Заказы КАК РейсЗаказы
        |ГДЕ
        |   РейсЗаказы.Заказ.Ссылка ССЫЛКА Документ.ЗаборТовара
        |   И РейсЗаказы.Ссылка = &Рейс";
        
    Запрос.УстановитьПараметр("Рейс",Рейс);
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ЗаборОбъект = ВыборкаДетальныеЗаписи.Забор.ПолучитьОбъект();
        ЗаборОбъект.Транспорт = Машина;
        ЗаборОбъект.Водитель = Водитель;
        ЗаборОбъект.Экспедитор = Экспедитор;
        ЗаборОбъект.Записать(РежимЗаписиДокумента.Запись);
    КонецЦикла;
    

КонецПроцедуры

Процедура ПривязатьМашинунаСервереТест(Рейс, Машина, Водитель, Экспедитор) Экспорт
	ТекД = ТекущаяДата();
	Наб = РегистрыСведений.ПривязкаМашинКРейсамТест.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекД);
	Наб.Отбор.Рейс.Установить(Рейс);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекД;
	Нов.Рейс = Рейс;
	Нов.Транспорт = Машина;
	Нов.КтоПривязал = ПараметрыСеанса.ТекущийПользователь;
	Нов.Водитель = Водитель;
    Нов.Экспедитор = Экспедитор;
	
	
	Наб.Записать();
	
	//РН = Рейс.РейсМестнойДоставки.ПолучитьОбъект();
	//РН.Транспорт = Машина;
	//РН.Водитель = Водитель;
	//РН.Экспедитор = Экспедитор;
	//РН.Записать();
	//
	////+++ БАО 11.08.2017 №1648
	//рэИнтеграцияРэдЭкспресс.REDРегламентВыгрузкиПоКурьерам_РегистрацияДляОтправки(Рейс, Водитель);
	////--- БАО 11.08.2017 №1648
	//
	////+++ БАО 09.10.2017 №1932 
	//
	//Возврат;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	РеализацияТоваровУслуг.ЗонаТарификации.КодТарифа КАК ЗонаТарификацииКодТарифа,
	//               |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	//               |	РеализацияТоваровУслуг.Номер КАК ЗаказНомер,
	//               |	ЕСТЬNULL(новаМестнаяДоставка.ВремяПрибытияПо, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяПрибытияПо,
	//               |	новаМестнаяДоставка.ТочкаПрибытия.Наименование КАК ТочкаПрибытия,
	//               |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.НомерГосударственнойРегистрации КАК НомерГосударственнойРегистрации,
	//               |	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт
	//               |ИЗ
	//               |	Документ.Рейс.Заказы КАК РейсЗаказы
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//               |			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//               |			ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	//               |		ПО РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	//               |		ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	//               |ГДЕ
	//               |	РейсЗаказы.Ссылка = &Рейс";
	//
	//Запрос.УстановитьПараметр("Рейс", Рейс);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//НачалоСтр = "DECLARE @t TOrderCar   ";
	//Стр = НачалоСтр;


	//Пока  Выборка.Следующий() Цикл 	
	//
	//		Менеджер = РегистрыСведений.ИсторияПрикрепленияЗаказаКРейсам.СоздатьМенеджерЗаписи();
	//		Менеджер.Период = ТекущаяДата();
	//		Менеджер.Заказ = Выборка.Заказ;
	//		Менеджер.Рейс = Рейс;
	//		Менеджер.Транспорт = Выборка.Транспорт;
	//		
	//		Менеджер.Записать();
	//		
	//		ЗонаРайон = Формат(?(ЗначениеЗаполнено(Выборка.ЗонаТарификацииКодТарифа), Выборка.ЗонаТарификацииКодТарифа, 0),"ЧН=0; ЧГ=0" );
	//		
	//		Стр = Стр + "                                                                                                                                                                                                                      
	//		|INSERT INTO @t ([orderID],[car],[who],[deliveryDate],[computedAddress],isRegion) VALUES (" + СокрЛП(Выборка.ЗаказНомер) + ",'" + Выборка.НомерГосударственнойРегистрации + "','" + ПараметрыСеанса.ТекущийПользователь + "', '" + mas.ДатаИз1С(Выборка.ВремяПрибытияПо, Ложь)+"', " + ?(Выборка.ТочкаПрибытия="NULL", "NULL", "'" + СтрЗаменить(Строка(Выборка.ТочкаПрибытия), "'", "") + "'") + "," + Строка(ЗонаРайон) + ")";
	//		
	//		
	//КонецЦикла;	
	//		
	//		
	//Если Стр <> НачалоСтр Тогда	
	//	Евген.ЗапросКИнтернетМагазину(Стр + "
	//			|EXEC import_setOrderCarsFrom1C @t
	//			|", Евген.СоздатьПодключениеКИнтернетМагазину());
	//КонецЕсли;
		
			
	//--- БАО 09.10.2017 №1932 		

КонецПроцедуры

#Область ОпределениеСменЗаказов

// Перенесено из ОМ.ЗагрузкаИзИнтернетМагазина в рамках Задача № 3303
Процедура УстановкаСменыДляЗаказов(МассивЗаказов) Экспорт
	
	СменаЗаказаПоУмолчанию = Справочники.Смены.Смена1;
	
	Для Каждого ДокЗаказ из МассивЗаказов Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПараметрыРегиональныхТерминаловСрезПоследних.ИспользоватьОпределениеСменыМаршрутизации КАК ИспользоватьОпределениеСменыМаршрутизации
		|ИЗ
		|	РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних КАК ПараметрыРегиональныхТерминаловСрезПоследних
		|ГДЕ
		|	ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал = &РегиональныйТерминал";
		
		Запрос.УстановитьПараметр("РегиональныйТерминал", ДокЗаказ.ТерминалДоставки);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		//Проверяем есть ли Смена в Региональном терминале
		СменаПоТерминалу = Справочники.Смены.ПустаяСсылка();
		Если Выборка.Следующий() Тогда
			СменаПоТерминалу = Выборка.ИспользоватьОпределениеСменыМаршрутизации;
		КонецЕсли;
		
		//Предварительно смену предполагаем по умолчанию
		СменаДляЗаказа = СменаЗаказаПоУмолчанию;
		
		Если ЗначениеЗаполнено(СменаПоТерминалу) Тогда
			
			ИспользуетсяИнтервалДоставкиС = СменаПоТерминалу.ИспользоватьИнтервалДоставкиС;
			ИспользуетсяБрейк = СменаПоТерминалу.ИспользоватьЛогистическиеБрейки;
			ИспользуетсяГруппыПолигонов = СменаПоТерминалу.ИспользоватьГруппыПолигоновМаршрутизации;
			//+Степанов Задача № 4079 Добавляем в определение смены ИнтервалДоставкиПо
			ИспользуетсяИнтервалДоставкиПо = СменаПоТерминалу.ИспользоватьИнтервалДоставкиПо;
			
			//Предварительно считаем что смена  из терминала полностью соответствует заказу
			УсловиеПоВремени = Истина;
			УсловиеПоБрейку = Истина;
			УсловиеПоПолигонам = Истина;
			
			//+Степанов Задача № 4079 Добавляем в определение смены ИнтервалДоставкиПо
			//Если ИспользуетсяБрейк И ИспользуетсяИнтервалДоставкиС Тогда
			Если ИспользуетсяБрейк И (ИспользуетсяИнтервалДоставкиС Или ИспользуетсяИнтервалДоставкиПо) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ДополнительныеПараметрыЗаказа.ЛогистическийБрейк КАК ЛогистическийБрейк,
				               |	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияС КАК ДоставкаВремяПрибытияС,
				               |	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияПо КАК ДоставкаВремяПрибытияПо
				               |ИЗ
				               |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
				               |ГДЕ
				               |	ДополнительныеПараметрыЗаказа.Заказ.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ДокЗаказ.Ссылка);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() Тогда
					Если Выборка.ДоставкаВремяПрибытияС = Null Тогда
						Продолжить;
					КонецЕсли;
					ЗаказВремяПрибытияС = Выборка.ДоставкаВремяПрибытияС;
					ЗаказЛогистическийБрейк = Выборка.ЛогистическийБрейк;
					//+Степанов Задача № 4079
					ЗаказВремяПрибытияПо = Выборка.ДоставкаВремяПрибытияПо;
				Иначе
					ЗаказВремяПрибытияС = Дата(1,1,1);
					ЗаказЛогистическийБрейк = Справочники.ЛогистическиеБрейки.ПустаяСсылка();
					//+Степанов Задача № 4079
					ЗаказВремяПрибытияПо = Дата(2099,12,31);
				КонецЕсли;
			КонецЕсли;
			
			//1. по времени Отсекаем По интервалу - ВремяПрибытияС должно быть больше времени, указанном в смене
			Если ИспользуетсяИнтервалДоставкиС Тогда
				Если Час(ЗаказВремяПрибытияС) < Час(СменаПоТерминалу.ИнтервалДоставкиС) Тогда
					УсловиеПоВремени = Ложь;
				КонецЕсли; 
			КонецЕсли;
			
			Если ИспользуетсяИнтервалДоставкиПо Тогда
				Если Час(ЗаказВремяПрибытияПо) < Час(СменаПоТерминалу.ИнтервалДоставкиПо) Тогда
					УсловиеПоВремени = Ложь;
				КонецЕсли; 	
			КонецЕсли;
			
			//2. по брейку
			Если ИспользуетсяБрейк Тогда
				Отбор = Новый Структура("ЛогистическийБрейк",ЗаказЛогистическийБрейк);
				НайденныеСтроки = СменаПоТерминалу.ЛогистическиеБрейки.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					УсловиеПоБрейку = Ложь;
				КонецЕсли; 
			КонецЕсли;
			
			//3. по полигону
			Если ИспользуетсяГруппыПолигонов Тогда
				
				//Старый запрос, заменен в рамках Задача № 3303			
				
				//Запрос = Новый Запрос;
				//Запрос.Текст = "ВЫБРАТЬ
				//|	ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.Ссылка.Ссылка КАК Ссылка
				//|ИЗ
				//|	Справочник.Смены.ГруппыПолигоновМаршрутизации КАК СменыГруппыПолигоновМаршрутизации
				//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПолигоновМаршрутизации.ПолигоныМаршрутизации КАК ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации
				//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныМаршрутизацииЗаказов КАК ПолигоныМаршрутизацииЗаказов
				//|			ПО ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.НомерПолигона = ПолигоныМаршрутизацииЗаказов.ПолигонМаршрутизации.Порядок
				//|		ПО СменыГруппыПолигоновМаршрутизации.ГруппаПолигоновМаршрутизации = ГруппыПолигоновМаршрутизацииПолигоныМаршрутизации.Ссылка.Ссылка
				//|ГДЕ
				//|	ПолигоныМаршрутизацииЗаказов.Заказ = &Заказ
				//|	И СменыГруппыПолигоновМаршрутизации.Ссылка.Ссылка = &Смена";
				//
				//Запрос.УстановитьПараметр("Заказ", ДокЗаказ.Ссылка);
				//Запрос.УстановитьПараметр("Смена", СменаПоТерминалу);
				
				// Новый запрос по Задача № 3303
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.Период КАК Период,
				               |	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.Смена КАК Смена,
				               |	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.Регион КАК Регион,
				               |	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.ГруппаПолигоновМаршрутизации КАК ГруппаПолигоновМаршрутизации,
				               |	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.НомерПолигонаМаршрутизации КАК НомерПолигонаМаршрутизации,
				               |	ПолигоныОпределенияСменыМаршрутизацииСрезПоследних.ПолигонУчитывается КАК ПолигонУчитывается
				               |ПОМЕСТИТЬ ВТ_СостоянияПолигонов
				               |ИЗ
				               |	РегистрСведений.ПолигоныОпределенияСменыМаршрутизации.СрезПоследних(
				               |			,
				               |			Регион = &Регион
				               |				И Смена = &Смена
				               |				И ДатаРейсов <= &ДатаРейсов) КАК ПолигоныОпределенияСменыМаршрутизацииСрезПоследних
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	ВТ_СостоянияПолигонов.Период КАК Период,
				               |	ВТ_СостоянияПолигонов.Смена КАК Смена,
				               |	ВТ_СостоянияПолигонов.Регион КАК Регион,
				               |	ВТ_СостоянияПолигонов.ГруппаПолигоновМаршрутизации КАК ГруппаПолигоновМаршрутизации,
				               |	ВТ_СостоянияПолигонов.НомерПолигонаМаршрутизации КАК НомерПолигонаМаршрутизации,
				               |	ВТ_СостоянияПолигонов.ПолигонУчитывается КАК ПолигонУчитывается
				               |ПОМЕСТИТЬ ВТ_АктуальныеПолигоны
				               |ИЗ
				               |	ВТ_СостоянияПолигонов КАК ВТ_СостоянияПолигонов
				               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияПолигонов КАК ВТ_СостоянияПолигоновДоп
				               |		ПО ВТ_СостоянияПолигонов.Смена = ВТ_СостоянияПолигоновДоп.Смена
				               |			И ВТ_СостоянияПолигонов.Регион = ВТ_СостоянияПолигоновДоп.Регион
				               |			И ВТ_СостоянияПолигонов.Период < ВТ_СостоянияПолигоновДоп.Период
				               |			И ВТ_СостоянияПолигонов.НомерПолигонаМаршрутизации = ВТ_СостоянияПолигоновДоп.НомерПолигонаМаршрутизации
				               |ГДЕ
				               |	ВТ_СостоянияПолигоновДоп.Период ЕСТЬ NULL
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	ПолигоныМаршрутизацииЗаказов.ПолигонМаршрутизации.Порядок КАК НомерПолигона
				               |ПОМЕСТИТЬ ВТ_ПолигоныЗаказа
				               |ИЗ
				               |	РегистрСведений.ПолигоныМаршрутизацииЗаказов КАК ПолигоныМаршрутизацииЗаказов
				               |ГДЕ
				               |	ПолигоныМаршрутизацииЗаказов.Заказ = &Заказ
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ РАЗЛИЧНЫЕ
				               |	ВТ_АктуальныеПолигоны.НомерПолигонаМаршрутизации КАК НомерПолигонаМаршрутизации
				               |ИЗ
				               |	ВТ_АктуальныеПолигоны КАК ВТ_АктуальныеПолигоны
				               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПолигоныЗаказа КАК ВТ_ПолигоныЗаказа
				               |		ПО ВТ_АктуальныеПолигоны.НомерПолигонаМаршрутизации = ВТ_ПолигоныЗаказа.НомерПолигона
				               |ГДЕ
				               |	ВТ_АктуальныеПолигоны.ПолигонУчитывается";
				
				Запрос.УстановитьПараметр("Заказ", ДокЗаказ.Ссылка);
				Запрос.УстановитьПараметр("Смена", СменаПоТерминалу);	
				Запрос.УстановитьПараметр("Регион", ДокЗаказ.ТерминалДоставки);
				Запрос.УстановитьПараметр("ДатаРейсов", ДокЗаказ.Дата);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Количество() = 0 Тогда
					УсловиеПоПолигонам = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			//Окончательное Утверждение что схема подходит по ВСЕМ параметрам
			Если УсловиеПоВремени И УсловиеПоБрейку И УсловиеПоПолигонам Тогда
				СменаДляЗаказа = СменаПоТерминалу;
			КонецЕсли;
			
		КонецЕсли;
		
		Набор = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
		Набор.Отбор.Заказ.Установить(ДокЗаказ);
		Набор.Прочитать();
		Для Каждого НЗапись Из Набор Цикл 
			НЗапись.Смена = СменаДляЗаказа;
		КонецЦикла; 
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

//CeHbKA #3301 17.03.2020
Процедура УстановкаСменыДляЗаказов_Новая(МассивЗаказов) Экспорт

	Событие = Справочники.СобытияКонтроляВремени.ФиксацияСменыЗаказов;
	
	//определяем максимальное количество потоков 
	ЧислоПотоков = 8; 
	ЧислоСтрокВТаблице = МассивЗаказов.Количество(); 
	
	//объем порции данных для обработки каждым потоком 
	РазмерПорции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков); 
	
	// массив, где будут храниться фоновые задания 
	МассивЗаданий = Новый Массив; 
	
	Для НомерПотока = 1 По ЧислоПотоков Цикл 
		
		//определяем индекс для начала обработки данных данным потоком 
		//разные потоки обрабатывают разные части таблицы 
		ИндексНачала = (НомерПотока-1)*РазмерПорции; 
		
		Если (НомерПотока = ЧислоПотоков) Тогда 
			//если это последний поток, то он обрабатывает все оставшиеся данные 
			//т.к. число потоков может не быть кратно количеству строк в таблице 
			РазмерПорции = ЧислоСтрокВТаблице-(ЧислоПотоков*РазмерПорции)+РазмерПорции; 
		КонецЕсли; 
		
		//определяем массив параметров для процедуры 
		НаборПараметров = Новый Массив; 
		НаборПараметров.Добавить(МассивЗаказов); 
		НаборПараметров.Добавить(ИндексНачала); 
		НаборПараметров.Добавить(РазмерПорции); 
		НаборПараметров.Добавить(Событие); 
		
		//запуск фонового задания 
		Задание = ФоновыеЗадания.Выполнить("МаршрутизацияЗаказовСервер.ОбработатьЗаказы", НаборПараметров,, "УстановкаСменыЗаказов"); 
		
		//добавляем задание в массив, чтобы потом отследить выполнение 
		МассивЗаданий.Добавить(Задание); 
		
	КонецЦикла;
	
	//проверим результат выполнения фоновых заданий 
	Если МассивЗаданий.Количество() > 0 Тогда 
		
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий); 
			УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, "", Истина, ТекущаяДата()+1,,,);
		Исключение 
			//действия в случае ошибки 
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗаказы(МассивЗаказов, ИндексНачала, РазмерПорции, Событие) Экспорт 

	УчетКонтроляВремениСервер.ЗаписатьРСКонтрольВремени(Событие, "",,,,,);
	
	НовыйМассивЗаказов = Новый Массив;
	
	Для Сч = 1 По РазмерПорции Цикл 
		
		Индекс = ?(Сч=1, ИндексНачала, Индекс+1); 
		
		Заказ = МассивЗаказов[Индекс];
		
		НовыйМассивЗаказов.Добавить(Заказ);
						
	КонецЦикла; 	

	УстановкаСменыДляЗаказов(НовыйМассивЗаказов);
	
КонецПроцедуры
//CeHbKA #3301 17.03.2020 

#КонецОбласти

#Область РасчетРасстоянияПоПрямойОтКад
Функция ПолучитьРасстоянияПоПрямойОтМКАД_КАД(ДанныеЗаказов, МассивДанных)
	ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetDistanceResult;
	
	
	ПараметрыЗапроса = Новый Структура;
	
	МассивДанных = Новый Массив;
	
	Для Каждого Тек Из ДанныеЗаказов Цикл
		Струк = Новый Структура;
		Струк.Вставить("OrderId", Тек.НомерЗаказа);
		
		СтрукТочки = Новый Структура;
		//СтрукТочки.Вставить("Id", 1);
		СтрукТочки.Вставить("Latitude", Тек.Широта);
		СтрукТочки.Вставить("Longitude", Тек.Долгота);
		
		Струк.Вставить("Point", СтрукТочки);
		
		МассивДанных.Добавить(Струк);
	КонецЦикла;	
	ПараметрыЗапроса.Вставить("ordersLocations", МассивДанных);
	
	ПолученныеДанные = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(ВидМетода, ПараметрыЗапроса);
	
	Если ПолученныеДанные.Успешно Тогда 
		РезультатОбработки = ПолучитьРасстоянияЗаказов(ПолученныеДанные.Данные, МассивДанных);
		Если Не РезультатОбработки Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьРасстоянияЗаказов(Данные, МассивДанных) 
	Данные = Данные.GetDistanceResult.Orders;
	ТипЗамера = Перечисления.ТипыЗамераРасстояний.ПоПрямойОтБлизжайшегоСъездаСМагистрали;
	
	ТабРасстояний = Новый ТаблицаЗначений();
	ТабРасстояний.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
	ТабРасстояний.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Для Сч = 0 По Данные.Количество() - 1 Цикл
		Нов = ТабРасстояний.Добавить();
		Нов.НомерЗаказа = Формат(Данные[Сч].OrderId, "ЧГ=");
		Нов.Расстояние = Окр(Данные[Сч].Distance/1000 + 0.5,0,РежимОкругления.Окр15как20);
	КонецЦикла;	
	
	Если ТабРасстояний.Количество() = 0 Тогда
		Возврат Истина;
	КонецеСли;	
	
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Таб.НомерЗаказа КАК НомерЗаказа,
	            |	Таб.Расстояние КАК Расстояние
	            |ПОМЕСТИТЬ ВТ_Таб
	            |ИЗ
	            |	&Таб КАК Таб
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	            |	ВТ_Таб.Расстояние КАК Расстояние,
	            |	ЗНАЧЕНИЕ(Перечисление.ТипыЗамераРасстояний.ПоПрямойОтБлизжайшегоСъездаСМагистрали) КАК ТипЗамераРасстояния
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Таб КАК ВТ_Таб
	            |		ПО РеализацияТоваровУслуг.Номер = ВТ_Таб.НомерЗаказа
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних КАК ПараметрыТарифаЗаказаСрезПоследних
	            |		ПО РеализацияТоваровУслуг.Ссылка = ПараметрыТарифаЗаказаСрезПоследних.Заказ
	            |ГДЕ
	            |	ПараметрыТарифаЗаказаСрезПоследних.ЗонаТарификации.ЗонаЗаПределамиМагистрали = ИСТИНА
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ЗаборТовара.Ссылка,
	            |	ВТ_Таб.Расстояние,
	            |	ЗНАЧЕНИЕ(Перечисление.ТипыЗамераРасстояний.ПоПрямойОтБлизжайшегоСъездаСМагистрали)
	            |ИЗ
	            |	ВТ_Таб КАК ВТ_Таб
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	            |		ПО ВТ_Таб.НомерЗаказа = ЗаборТовара.Номер
	            |ГДЕ
	            |	ЗаборТовара.ЗонаТарификации.ЗонаЗаПределамиМагистрали = ИСТИНА";
	
	Зап.УстановитьПараметр("Таб", ТабРасстояний);
	Выб = Зап.Выполнить().Выбрать();
	
	МассивДанных = Новый Массив;
	
	Пока Выб.Следующий() Цикл
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Выб.Заказ);
		Струк.Вставить("ТипЗамераРасстояния", ТипЗамера);
		Струк.Вставить("Расстояние", Выб.Расстояние);
		МассивДанных.Добавить(Струк);
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции	

Процедура ПолучитьРасстоянияПоЗаказамВДокументеЗакрытия(МассивНомеров, МассивДанных) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	новаМестнаяДоставка.Номер КАК НомерЗаказа,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота
	|ИЗ
	|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	|ГДЕ
	|	новаМестнаяДоставка.Номер В(&НомераЗаказов)
	|	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта <> 0
	|	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота <> 0
	|	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаборТовара.Номер,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Номер В(&НомераЗаказов)
	|	И ЗаборТовара.ТочкаДоставки.Адрес.Широта <> 0
	|	И ЗаборТовара.ТочкаДоставки.Адрес.Долгота <> 0
	|	";
	Зап.УстановитьПараметр("НомераЗаказов", МассивНомеров);
	
	Рез = Зап.Выполнить();
	Если Не Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		МассивСтрук = Новый Массив;
		Пока Выб.Следующий() Цикл
			Струк = Новый Структура;
			
			Струк.Вставить("НомерЗаказа", Число(Выб.НомерЗаказа));
			Струк.Вставить("Широта", Выб.Широта);
			Струк.Вставить("Долгота", Выб.Долгота);
			
			МассивСтрук.Добавить(Струк);
		КонецЦикла;	
		ПолучитьРасстоянияПоПрямойОтМКАД_КАД(МассивСтрук, МассивДанных);
	КонецеСли;	
КонецПроцедуры	
#КонецОбласти

#Область РегламетныеЗадания

// Задача № 2857
// Проверяет наличие и состояние документов ВыгрузкаДанныхМаршрутизацииВАдминку, 
// при наличии ошибок отправляет письма админам.
Процедура ПроверкаВыгрузкиДанныхМаршрутизацииВАдминку() Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегиональныеТерминалы.Ссылка КАК Терминал,
		|	РегиональныеТерминалы.Наименование КАК Наименование,
		|	ЛОЖЬ КАК ОшибкаТерминала
		|ПОМЕСТИТЬ ВТ_Терминалы
		|ИЗ
		|	Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы
		|ГДЕ
		|	НЕ РегиональныеТерминалы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.региональныеТерминалы.пустаяСсылка),
		|	""Терминал не указан"",
		|	ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыгрузкаДанныхМаршрутизацииВАдминку.Ссылка КАК Ссылка,
		|	ВыгрузкаДанныхМаршрутизацииВАдминку.Номер КАК Номер,
		|	ВыгрузкаДанныхМаршрутизацииВАдминку.Дата КАК Дата,
		|	ВыгрузкаДанныхМаршрутизацииВАдминку.ДанныеВыгруженыВАдминку КАК ДанныеВыгруженыВАдминку,
		|	ВыгрузкаДанныхМаршрутизацииВАдминку.ДанныеПоТарификацииЗагруженыВ1С КАК ДанныеПоТарификацииЗагруженыВ1С,
		|	ВыгрузкаДанныхМаршрутизацииВАдминку.Терминал КАК Терминал
		|ПОМЕСТИТЬ ВТ_Выгрузка
		|ИЗ
		|	Документ.ВыгрузкаДанныхМаршрутизацииВАдминку КАК ВыгрузкаДанныхМаршрутизацииВАдминку
		|ГДЕ
		|	НЕ ВыгрузкаДанныхМаршрутизацииВАдминку.ПометкаУдаления
		|	И НАЧАЛОПЕРИОДА(ВыгрузкаДанныхМаршрутизацииВАдминку.Дата, ДЕНЬ) = &Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Терминалы.Наименование КАК Терминал,
		|	ВТ_Выгрузка.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА ВТ_Выгрузка.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Выгрузка,
		|	ВТ_Выгрузка.ДанныеВыгруженыВАдминку КАК ДанныеВыгруженыВАдминку,
		|	ВТ_Выгрузка.ДанныеПоТарификацииЗагруженыВ1С КАК ДанныеПоТарификацииЗагруженыВ1С,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_Выгрузка.Ссылка ЕСТЬ NULL
		|				И (НЕ ВТ_Выгрузка.ДанныеВыгруженыВАдминку
		|					И ВТ_Выгрузка.ДанныеПоТарификацииЗагруженыВ1С)
		|			ТОГДА ""ДанныеВыгруженыВАдминку""
		|		КОГДА НЕ ВТ_Выгрузка.Ссылка ЕСТЬ NULL
		|				И (ВТ_Выгрузка.ДанныеВыгруженыВАдминку
		|					И НЕ ВТ_Выгрузка.ДанныеПоТарификацииЗагруженыВ1С)
		|			ТОГДА ""ДанныеПоТарификацииЗагруженыВ1С""
		|		КОГДА НЕ ВТ_Выгрузка.Ссылка ЕСТЬ NULL
		|				И (НЕ ВТ_Выгрузка.ДанныеВыгруженыВАдминку
		|					И НЕ ВТ_Выгрузка.ДанныеПоТарификацииЗагруженыВ1С)
		|			ТОГДА ""ДанныеВыгруженыВАдминку и ДанныеПоТарификацииЗагруженыВ1С""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ОписаниеФлагов,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_Выгрузка.Ссылка ЕСТЬ NULL
		|				И (НЕ ВТ_Выгрузка.ДанныеВыгруженыВАдминку
		|					И ВТ_Выгрузка.ДанныеПоТарификацииЗагруженыВ1С)
		|			ТОГДА ИСТИНА
		|		КОГДА НЕ ВТ_Выгрузка.Ссылка ЕСТЬ NULL
		|				И (ВТ_Выгрузка.ДанныеВыгруженыВАдминку
		|					И НЕ ВТ_Выгрузка.ДанныеПоТарификацииЗагруженыВ1С)
		|			ТОГДА ИСТИНА
		|		КОГДА НЕ ВТ_Выгрузка.Ссылка ЕСТЬ NULL
		|				И (НЕ ВТ_Выгрузка.ДанныеВыгруженыВАдминку
		|					И НЕ ВТ_Выгрузка.ДанныеПоТарификацииЗагруженыВ1С)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтключенныеФлаги,
		|	ВТ_Терминалы.ОшибкаТерминала КАК ОшибкаТерминала
		|ПОМЕСТИТЬ ВТ_СостояниеВыгрузки
		|ИЗ
		|	ВТ_Терминалы КАК ВТ_Терминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выгрузка КАК ВТ_Выгрузка
		|		ПО ВТ_Терминалы.Терминал = ВТ_Выгрузка.Терминал
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СостояниеВыгрузки.Терминал КАК Терминал,
		|	ВТ_СостояниеВыгрузки.Документ КАК Документ,
		|	ВТ_СостояниеВыгрузки.Выгрузка КАК Выгрузка,
		|	ВТ_СостояниеВыгрузки.ДанныеВыгруженыВАдминку КАК ДанныеВыгруженыВАдминку,
		|	ВТ_СостояниеВыгрузки.ДанныеПоТарификацииЗагруженыВ1С КАК ДанныеПоТарификацииЗагруженыВ1С,
		|	ВТ_СостояниеВыгрузки.ОписаниеФлагов КАК ОписаниеФлагов,
		|	ВТ_СостояниеВыгрузки.ОтключенныеФлаги КАК ОтключенныеФлаги,
		|	ВТ_СостояниеВыгрузки.Документ.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_СостояниеВыгрузки.Выгрузка
		|				И НЕ ВТ_СостояниеВыгрузки.ОшибкаТерминала
		|			ТОГДА ""Нет документа выгрузки по терминалу "" + ВТ_СостояниеВыгрузки.Терминал
		|		КОГДА НЕ ВТ_СостояниеВыгрузки.Выгрузка
		|				И НЕ ВТ_СостояниеВыгрузки.ОшибкаТерминала
		|				И ВТ_СостояниеВыгрузки.ОтключенныеФлаги
		|			ТОГДА ""Отключен(ы) флаг(и) обмена "" + ВТ_СостояниеВыгрузки.ОписаниеФлагов + "" по терминалу "" + ВТ_СостояниеВыгрузки.Терминал
		|		КОГДА ВТ_СостояниеВыгрузки.Выгрузка
		|				И ВТ_СостояниеВыгрузки.ОшибкаТерминала
		|				И НЕ ВТ_СостояниеВыгрузки.ОтключенныеФлаги
		|			ТОГДА ""Документ выгрузки без указания терминала""
		|		КОГДА ВТ_СостояниеВыгрузки.Выгрузка
		|				И ВТ_СостояниеВыгрузки.ОшибкаТерминала
		|				И ВТ_СостояниеВыгрузки.ОтключенныеФлаги
		|			ТОГДА ""Документ выгрузки без указания терминала, отключен(ы) флаг(и) обмена "" + ВТ_СостояниеВыгрузки.ОписаниеФлагов
		|	КОНЕЦ КАК ТекстСообщения
		|ИЗ
		|	ВТ_СостояниеВыгрузки КАК ВТ_СостояниеВыгрузки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ВТ_СостояниеВыгрузки.Выгрузка
		|					И НЕ ВТ_СостояниеВыгрузки.ОшибкаТерминала
		|				ТОГДА ИСТИНА
		|			КОГДА ВТ_СостояниеВыгрузки.Выгрузка
		|					И ВТ_СостояниеВыгрузки.ОшибкаТерминала
		|				ТОГДА ИСТИНА
		|			КОГДА ВТ_СостояниеВыгрузки.Выгрузка
		|					И ВТ_СостояниеВыгрузки.ОтключенныеФлаги
		|				ТОГДА ИСТИНА
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрТемаПисьма = "Проверка выгрузки данных маршрутизации в админку на " + 
		Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + 
		" (" + СокрЛП(ВыборкаДетальныеЗаписи.Терминал) + ")";
		
		СтрТекстПисьма = СокрЛП(ВыборкаДетальныеЗаписи.ТекстСообщения);
		Если ВыборкаДетальныеЗаписи.Выгрузка Тогда
			СтрТекстПисьма = СтрТекстПисьма + Символы.ПС + "Номер документа " + СокрЛП(ВыборкаДетальныеЗаписи.Документ.Номер);
		КонецЕсли;

		
		Если ВыборкаДетальныеЗаписи.ОтключенныеФлаги Тогда
			
			СтрТекстПисьма = СтрТекстПисьма + 
			Символы.ПС + 
			Символы.ПС + 
			"Описание ошибки:" + Символы.ПС + СокрЛП(ВыборкаДетальныеЗаписи.ОписаниеОшибки);
			
		КонецЕсли;
		
		lem.ОтправитьНормальноеСообщениеАдминам(СтрТемаПисьма, СтрТекстПисьма);
		
	КонецЦикла;

КонецПроцедуры	

Процедура РегламентСбросПризнакаДеньВДень() Экспорт
	
КонецПроцедуры	
#КонецОбласти

#Область ВыгрузкаМашинВАдминку

Функция ВыгрузитьМашины(ТаблицаЗаказовКВыгрузке, Терминал = Неопределено, ДатаДоставки) Экспорт
	
	Попытка
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(800); 
	Исключение
		Возврат "Не удалось создать подключение: "+ОписаниеОшибки();
	КонецПопытки;
	
	Рез = ВыполнитьВыгрузкуМашин(Терминал, ПодключениеКМагазину, ТаблицаЗаказовКВыгрузке, ДатаДоставки);	
	Возврат Рез;
	
КонецФункции

Функция ВыполнитьВыгрузкуМашин(Терминал = Неопределено, ПодключениеКМагазину, ТабЗаказовМашин, ДатаДоставки) Экспорт  // Ранее ВыгрузитьВывести()
	
	ТабЗаказовМашин = Новый ТаблицаЗначений;
		
	Запрос = Новый Запрос;	
	//Асеев 11.09.2024 (Задача № 5321)>>>
	//Асеев 11.09.2024 (Задача № 5321)<<<
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументРейс.Ссылка КАК Рейс,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт
	|ПОМЕСТИТЬ ВТ_Рейсы
	|ИЗ
	|	Документ.Рейс КАК ДокументРейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(&ДатаОкончания, Рейс.ДатаРейса = &ДатаНачала) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО ДокументРейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	|ГДЕ
	|	ДокументРейс.ДатаРейса = &ДатаНачала
	|	И ДокументРейс.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Рейсы.Рейс КАК Рейс,
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	РеализацияТоваровУслуг.ТарифнаяСеткаПартнера.КартаТарификацииПартнеров КАК КартаТарификацииПартнеров,
	|	АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних.СхемаЗонТарификацииПартнеров КАК СхемаЗонТарификации
	|ПОМЕСТИТЬ ВТ_РасчетЯндекс
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО РейсЗаказы.Ссылка = ВТ_Рейсы.Рейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеСхемыЗонКартТарификацииПартнеров.СрезПоследних КАК АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних
	|			ПО РеализацияТоваровУслуг.ТарифнаяСеткаПартнера.КартаТарификацииПартнеров = АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних.КартаКонструктораКарт
	|		ПО (НЕ РейсЗаказы.УдаленИзРейса)
	|			И РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|			И (РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки)
	|			И (РеализацияТоваровУслуг.ТарифнаяСеткаПартнера.МетодОпределенияЗоныТарификации = ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмКартЯндекс))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Рейсы.Рейс КАК Рейс,
	|	ДополнительныеПараметрыЗаказа.Доставка КАК Доставка,
	|	ДополнительныеПараметрыЗаказа.Доставка.Номер КАК НомерДоставки,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Наименование КАК Адрес,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.АдресИзЯндекса КАК АдресИзЯндекса,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Москва КАК Москва,
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	ПараметрыТарифаЗаказаСрезПоследних.КатегорияДоставки КАК КатегорияДоставки,
	|	ПараметрыТарифаЗаказаСрезПоследних.ТарифнаяСетка КАК ТарифнаяСеткаПартнера
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	ВТ_Рейсы КАК ВТ_Рейсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО (НЕ РейсЗаказы.УдаленИзРейса)
	|				И РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|				И (РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ПО (РеализацияТоваровУслуг.Ссылка = ДополнительныеПараметрыЗаказа.Заказ)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних КАК ПараметрыТарифаЗаказаСрезПоследних
	|			ПО (РеализацияТоваровУслуг.Ссылка = ПараметрыТарифаЗаказаСрезПоследних.Заказ)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|			ПО РейсЗаказы.Заказ = ВТ_РасчетЯндекс.Реализация
	|		ПО ВТ_Рейсы.Рейс = РейсЗаказы.Ссылка
	|ГДЕ
	|	ВТ_РасчетЯндекс.Реализация ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	ТарифныеСеткиДоступныеЗоныТарификации.Зона КАК ЗонаТарификации,
	|	ТарифныеСеткиДоступныеЗоныТарификации.Ссылка.КлассификаторТарификации КАК КлассификаторТарификации,
	|	новаМестнаяДоставка.Ссылка КАК Доставка,
	|	ГруппыРайоновРайоны.Район КАК Район
	|ПОМЕСТИТЬ ВТДоступныеЗоныТарификации
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|			ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	|		ПО ВТ_Заказы.Реализация = РеализацияТоваровУслуг.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифныеСетки.ДоступныеЗоныТарификации КАК ТарифныеСеткиДоступныеЗоныТарификации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРайонов.Районы КАК ГруппыРайоновРайоны
	|			ПО ТарифныеСеткиДоступныеЗоныТарификации.Зона = ГруппыРайоновРайоны.Ссылка
	|		ПО ВТ_Заказы.ТарифнаяСеткаПартнера = ТарифныеСеткиДоступныеЗоныТарификации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДоступныеЗоныТарификации.Реализация КАК Реализация,
	|	ВТДоступныеЗоныТарификации.КлассификаторТарификации КАК КлассификаторТарификации,
	|	ВТДоступныеЗоныТарификации.ЗонаТарификации КАК ЗонаТарификации
	|ПОМЕСТИТЬ ВТ_ЗоныДоставки
	|ИЗ
	|	ВТДоступныеЗоныТарификации КАК ВТДоступныеЗоныТарификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаРайоныАдресов КАК новаРайоныАдресов
	|		ПО ВТДоступныеЗоныТарификации.Доставка.ТочкаПрибытия.Адрес = новаРайоныАдресов.Адрес
	|			И ВТДоступныеЗоныТарификации.КлассификаторТарификации = новаРайоныАдресов.Классификатор
	|			И ВТДоступныеЗоныТарификации.Район = новаРайоныАдресов.Район
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Рейс КАК Рейс,
	|	ВТ_Заказы.Доставка КАК Доставка,
	|	ВТ_Заказы.НомерДоставки КАК НомерДоставки,
	|	ВТ_Заказы.Адрес КАК Адрес,
	|	ВТ_Заказы.АдресИзЯндекса КАК АдресИзЯндекса,
	|	ВТ_Заказы.Москва КАК Москва,
	|	ВТ_Заказы.Реализация КАК Реализация,
	|	ВЫБОР
	|		КОГДА ВТ_ЗоныДоставки.ЗонаТарификации ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ВТ_Заказы.ТарифнаяСеткаПартнера.КлассификаторТарификации.ЗонаТарификацииПриНепривязанномАдресе = ЗНАЧЕНИЕ(Справочник.ГруппыРайонов.ПустаяСсылка)
	|						ТОГДА ВТ_Заказы.ТарифнаяСеткаПартнера.КлассификаторТарификации.ЗонаТарификацииПриНепривязанномАдресе
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_Заказы.Реализация.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж)
	|								ТОГДА ВЫБОР
	|										КОГДА ВТ_Заказы.Москва
	|											ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыРайонов.Москва)
	|										ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГруппыРайонов.ЗаМкад)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГруппыРайонов.КАД_30)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ЗоныДоставки.ЗонаТарификации
	|	КОНЕЦ КАК Зона,
	|	ВТ_Заказы.КатегорияДоставки КАК КатегорияДоставки,
	|	ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмНова) КАК МетодОпределенияЗоныТарификации,
	|	ЛОЖЬ КАК ЗонаНеОпределена
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗоныДоставки КАК ВТ_ЗоныДоставки
	|		ПО ВТ_Заказы.Реализация = ВТ_ЗоныДоставки.Реализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_РасчетЯндекс.Рейс,
	|	ДополнительныеПараметрыЗаказа.Доставка,
	|	ДополнительныеПараметрыЗаказа.Доставка.Номер,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Наименование,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.АдресИзЯндекса,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Москва,
	|	ВТ_РасчетЯндекс.Реализация,
	|	ЕСТЬNULL(ГруппыРайоновЗоныТарификацииПартнеров.Ссылка, ВТ_РасчетЯндекс.КартаТарификацииПартнеров.ЗонаТарификацииПриНепривязанномАдресе),
	|	ПараметрыТарифаЗаказаСрезПоследних.КатегорияДоставки,
	|	ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмКартЯндекс),
	|	ГруппыРайоновЗоныТарификацииПартнеров.Ссылка ЕСТЬ NULL
	|ИЗ
	|	ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_РасчетЯндекс.Реализация = ДополнительныеПараметрыЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО ВТ_РасчетЯндекс.Рейс = ВТ_Рейсы.Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних КАК ПараметрыТарифаЗаказаСрезПоследних
	|		ПО ВТ_РасчетЯндекс.Реализация = ПараметрыТарифаЗаказаСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_РасчетЯндекс.Реализация КАК Реализация,
	|			ВТ_РасчетЯндекс.КартаТарификацииПартнеров КАК КартаТарификацииПартнеров,
	|			ЗоныТарификацииПартнеровСрезПоследних.ЗонаТарификации.НомерЗоны КАК НомерЗоны
	|		ИЗ
	|			ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗоныТарификацииПартнеров.СрезПоследних(
	|						,
	|						(Заказ, СхемаЗонТарификации) В
	|							(ВЫБРАТЬ
	|								ВТ_РасчетЯндекс.Реализация КАК Реализация,
	|								ВТ_РасчетЯндекс.СхемаЗонТарификации КАК СхемаЗонТарификации
	|							ИЗ
	|								ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс)) КАК ЗоныТарификацииПартнеровСрезПоследних
	|				ПО ВТ_РасчетЯндекс.Реализация = ЗоныТарификацииПартнеровСрезПоследних.Заказ) КАК ВЗ_ЗоныТарификацииЗаказов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРайонов.ЗоныТарификацииПартнеров КАК ГруппыРайоновЗоныТарификацииПартнеров
	|			ПО ВЗ_ЗоныТарификацииЗаказов.НомерЗоны = ГруппыРайоновЗоныТарификацииПартнеров.НомерЗоныТарификации
	|				И ВЗ_ЗоныТарификацииЗаказов.КартаТарификацииПартнеров = ГруппыРайоновЗоныТарификацииПартнеров.Ссылка.КартаТарификацииПартнеров
	|		ПО ВТ_РасчетЯндекс.Реализация = ВЗ_ЗоныТарификацииЗаказов.Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.Рейс КАК Рейс,
	|	ВТ_Итог.Доставка КАК Доставка,
	|	ВТ_Рейсы.Транспорт.НомерГосударственнойРегистрации КАК НомерМашины,
	|	ВТ_Итог.НомерДоставки КАК НомерДоставки,
	|	ВТ_Итог.Адрес КАК Адрес,
	|	ВТ_Итог.АдресИзЯндекса КАК АдресИзЯндекса,
	|	ВТ_Итог.Москва КАК Москва,
	|	ВТ_Рейсы.Транспорт КАК Машина,
	|	ВТ_Итог.Реализация КАК Реализация,
	|	ВТ_Итог.Рейс.РейсМестнойДоставки.Номер КАК НомерРейса,
	|	ВТ_Рейсы.Водитель КАК Водитель,
	|	ВТ_Рейсы.Экспедитор КАК Экспедитор,
	|	ВТ_Рейсы.Водитель.Наименование КАК ВодительНаименование,
	|	ВТ_Рейсы.Экспедитор.Наименование КАК ЭкспедиторНаименование,
	|	ВТ_Итог.Рейс.НомерПалетты КАК Маршрут,
	|	1 КАК Кол,
	|	ВЫБОР
	|		КОГДА ВТ_Итог.КатегорияДоставки.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.КГТ)
	|			ТОГДА 1
	|	КОНЕЦ КАК КГТ,
	|	ВЫБОР
	|		КОГДА ВТ_Итог.КатегорияДоставки.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.МГТ)
	|			ТОГДА 1
	|	КОНЕЦ КАК МГТ,
	|	ВЫБОР
	|		КОГДА ВТ_Итог.КатегорияДоставки.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.СГТ)
	|			ТОГДА 1
	|	КОНЕЦ КАК СГТ,
	|	ВТ_Рейсы.Транспорт КАК Транспорт,
	|	ЕСТЬNULL(ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Порядок, ""БЗ"") КАК ПолигонМаршрутизацииПорядок,
	|	ВТ_Итог.Зона КАК Зона,
	|	ВТ_Итог.Зона.КодТарифа КАК КодТарифа,
	|	ВТ_Итог.МетодОпределенияЗоныТарификации КАК МетодОпределенияЗоныТарификации,
	|	ВТ_Итог.ЗонаНеОпределена КАК ЗонаНеОпределена
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныМаршрутизацииЗаказов.СрезПоследних КАК ПолигоныМаршрутизацииЗаказовСрезПоследних
	|		ПО ВТ_Итог.Реализация = ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ
	|			И (ПолигоныМаршрутизацииЗаказовСрезПоследних.СхемаМаршрутизации В (&СхемаМаршрутизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО ВТ_Итог.Рейс = ВТ_Рейсы.Рейс
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРейса,
	|	НомерМашины,
	|	Реализация";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаДоставки));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаДоставки));
	
	Если Терминал <> Неопределено Тогда	
		Запрос.УстановитьПараметр("ТерминалДоставки", Терминал);
		
		АктивнаяСхема = ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Терминал, КонецДня(ДатаДоставки));
		Запрос.УстановитьПараметр("СхемаМаршрутизации", АктивнаяСхема);
		
	Иначе
		//Асеев 11.09.2024 (Задача № 5321)>>>
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки)", "");
		//Асеев 11.09.2024 (Задача № 5321)<<<
		
		АктивныеСхемы = Новый Массив;		
		АктивныеСхемы.Добавить(ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Справочники.РегиональныеТерминалы.МоскваСтриж,КонецДня(ДатаДоставки)));
		АктивныеСхемы.Добавить(ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Справочники.РегиональныеТерминалы.СПбСтриж, КонецДня(ДатаДоставки)));
		Запрос.УстановитьПараметр("СхемаМаршрутизации", АктивнаяСхема);

	КонецЕсли;
	
	ТабЗаказовМашин = Запрос.Выполнить().Выгрузить();
	КолонкиТаблицы = ТабЗаказовМашин.Колонки;
	КолонкиТаблицы.Добавить("НомерРТУ");
	//Выборка = РезЗ.Выбрать();
	
	МассивПараметров = Новый Массив;
	МассивНомеровЗаказов = новый Массив;
	//Асеев 11.09.2024 (Задача № 5321)>>>
	МассивЗаказовОшибкаЗоныЯндекс = Новый Массив;
	//Асеев 11.09.2024 (Задача № 5321)<<<
	Стр2 = "";
	
	СтрWho = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
	
	Для каждого СтрокаЗаказ Из ТабЗаказовМашин Цикл
	//Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(СтрокаЗаказ.Доставка) Тогда
			Продолжить;
		КонецЕСли;	
		
		#Область ОпределениеSetOrderCars
		
		НомерДоставки = СтрЗаменить(СокрЛП(СтрокаЗаказ.НомерДоставки), "abc", "");
		НомерДоставки = СтрЗаменить(НомерДоставки, "def", "");
		
		СтрокаЗаказ.НомерРТУ = НомерДоставки;

		Если МассивНомеровЗаказов.Найти(НомерДоставки) = Неопределено Тогда			
			МассивНомеровЗаказов.Добавить(НомерДоставки);			
		КонецЕсли;
		
		//Асеев 11.09.2024 (Задача № 5321)>>>
		Если СтрокаЗаказ.ЗонаНеОпределена Тогда
			МассивЗаказовОшибкаЗоныЯндекс.Добавить(СтрокаЗаказ.Реализация);
		КонецЕсли;
		//Асеев 11.09.2024 (Задача № 5321)<<<
		
		Если ЗначениеЗаполнено(СтрокаЗаказ.АдресИзЯндекса) Тогда
			Адрес = СтрокаЗаказ.АдресИзЯндекса;
		Иначе
			Адрес = СтрокаЗаказ.Адрес;
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Address", ?(Адрес="NULL", "NULL", "'" + СтрЗаменить(Адрес, "'", "") + "'"));
		ПараметрыЗапроса.Вставить("Car", СокрЛП(СтрокаЗаказ.НомерМашины));
		ПараметрыЗапроса.Вставить("DeliveryDate", ДатаДоставки);
		ПараметрыЗапроса.Вставить("IsRegion", Формат(СтрокаЗаказ.КодТарифа, "ЧН=0; ЧГ="));
		ПараметрыЗапроса.Вставить("OrderId", НомерДоставки);
		ПараметрыЗапроса.Вставить("Who", СтрWho);
		
		МассивПараметров.Добавить(ПараметрыЗапроса);
			
		#КонецОбласти
		
		#Область ОпределениеOrderTrip

		Если Стр2 = "" Тогда
			Стр2 = "DECLARE @t TOrderTrip   ";
		КонецеСли;
		
		//Асеев 22.09.2020 (Задача № 4205)>>>
		Если ЗначениеЗаполнено(СтрокаЗаказ.НомерМашины) Тогда
		//Асеев 22.09.2020 (Задача № 4205)<<<
		//Асеев 11.09.2024 (Задача № 5321)>>>
			//Стр2 = Стр2 + "
			//|INSERT INTO @t ([orderId],[tripId],[car],[fio1],[fio2]) VALUES (" + СокрЛП(НомерДоставки) + "," + Формат(Число(СтрокаЗаказ.НомерРейса), "ЧГ=") + ",'" + СтрокаЗаказ.НомерМашины + "','" + СокрЛП(СтрокаЗаказ.Водитель.Наименование) + "', '"+СтрокаЗаказ.Экспедитор+"')";
			Стр2 = Стр2 + "
			|INSERT INTO @t ([orderId],[tripId],[car],[fio1],[fio2]) VALUES (" + НомерДоставки + "," + Формат(Число(СтрокаЗаказ.НомерРейса), "ЧГ=") + ",'" + СтрокаЗаказ.НомерМашины + "','" + СокрЛП(СтрокаЗаказ.ВодительНаименование) + "', '"+СтрокаЗаказ.ЭкспедиторНаименование+"')";
		//Асеев 11.09.2024 (Задача № 5321)<<<
		КонецЕсли;

		#КонецОбласти

	КонецЦикла;
	
	//Асеев 11.09.2024 (Задача № 5321)>>>
	Если МассивЗаказовОшибкаЗоныЯндекс.Количество() Тогда
		ОтправитьПисьмоОшибкаЗоныЯндекс(МассивЗаказовОшибкаЗоныЯндекс, "МаршрутизацияЗаказовСервер.ВыполнитьВыгрузкуМашин");
	КонецЕсли;
	//Асеев 11.09.2024 (Задача № 5321)<<<
	
	Рез = "";

	Если МассивПараметров.Количество()=0 Тогда
		Возврат "Отсутствуют рейсы";
	Иначе	
		Рез = ОтправитьДанныеПоМашинам(Стр2, Терминал, МассивПараметров, МассивНомеровЗаказов, ПодключениеКМагазину, ДатаДоставки, ТабЗаказовМашин);			
		//Рез = ""; // По Задача № 3581 необходимо уточнение 
	КонецеСли;	

	Возврат Рез;
	
КонецФункции

//Асеев 11.09.2024 (Задача № 5321)>>>
Процедура ОтправитьПисьмоОшибкаЗоныЯндекс(МассивЗаказов, Контекст) Экспорт
	
	ВремяОшибки = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК Номер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&Заказы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаборТовара.Номер
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Ссылка В(&Заказы)";
	
	Номера = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	
	ТекстПисьма = "Контекст " + Контекст + "
	|
	|Заказы
	|" + СтрСоединить(Номера, ", ") + "
	|
	|Ошибка " + ВремяОшибки;
	
	ТемаПисьма = "Не удалось определить группу районов " + Формат(ВремяОшибки, "ДФ=dd.MM.yyyy");
	
	МассивПолучателей = Новый Массив;
	МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
	МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	
	lem.ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры
//Асеев 11.09.2024 (Задача № 5321)<<<

Функция ОтправитьДанныеПоМашинам(Стр2, Терминал = Неопределено, МассивПараметров = Неопределено, МассивНомеровЗаказов = Неопределено, ПодключениеКМагазину, ДатаДоставки, ТабЗаказовМашин) Экспорт // Ранее ВыгрузитьМашину()
		
	//CeHbKA #3965 07.05.2020
	ДокументСсылка = ТарификацияУслугСервер.ПолучитьДокументВыгрузкаДанныхМаршрутизацииВАдминку(ДатаДоставки, Терминал);
	
	Если ДокументСсылка.Пустая() Тогда
		ДокВыгрузка = Документы.ВыгрузкаДанныхМаршрутизацииВАдминку.СоздатьДокумент();
	Иначе
		ДокВыгрузка = ДокументСсылка.ПолучитьОбъект();	
	КонецЕсли;
	//CeHbKA #3965 07.05.2020
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда		
		ДатаСтрока  = Формат(ДатаДоставки, "ДФ=""ггггММдд""");
		ВремяСтрока = Формат(ТекущаяДата(), "ДФ=""ЧЧммсс""");
		ДатаДокументаДляТеста = Дата(ДатаСтрока + ВремяСтрока);
  
		ДокВыгрузка.Дата = ДатаДокументаДляТеста;
	Иначе
		ДокВыгрузка.Дата = ТекущаяДата();
	КонецЕсли;
	
	ДокВыгрузка.ДатаМаршрутизации = ДатаДоставки;
	ДокВыгрузка.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	//ДокВыгрузка.ЗапросSQL = "";	
	//ДокВыгрузка.ЗапросSQL = ОбщегоНазначения.ЗначениеВСтрокуXML(МассивПараметров); 	
	
	Попытка		
		
		Если Не МассивПараметров = Неопределено тогда
			Если МассивПараметров.Количество() > 0 Тогда
				
				ПараметрыЗапроса = Новый Структура;		
				ПараметрыЗапроса.Вставить("orderCars", МассивПараметров);
				СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(Перечисления.ВидыЗапросовWEBСервис.SetOrderCarsResult, ПараметрыЗапроса,,,Истина);
				Если НЕ СтруктураВозврата.Успешно Тогда
					ВызватьИсключение СтруктураВозврата.ОписаниеОшибки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не МассивНомеровЗаказов = Неопределено Тогда
			ТарификацияУслугСервер.УстановитьКомпонентыТарифовИзАдминки(МассивНомеровЗаказов);
	    КонецЕсли;
		
		//Асеев 09.09.2020 (Задача № 4205)>>>
		//добавлен КонтекстВызова
		Евген.ЗапросКИнтернетМагазину(Стр2 + "
		|EXEC import_setTripFrom1C @t
		|", ПодключениеКМагазину, 800,, "ОбщийМодуль.МаршрутизацияЗаказовСервер.ОтправитьДанныеПоМашинам");	
		//Асеев 09.09.2020 (Задача № 4205)<<<
		
	Исключение
		
		ДокВыгрузка.ОписаниеОшибки = ОписаниеОшибки();
		ДокВыгрузка.Записать(РежимЗаписиДокумента.Запись);

		МасОш = Новый Массив;
		МасОш.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасОш.Добавить("v.yakurnov@strizh-logistic.ru");
		lem.ОтправитьСообщение(МасОш, "Ошибка выгрузки данных в админку", "При выгрузке данных в админку произошла ошибка!" + Символы.ПС + "Текст ошибки: " + ОписаниеОшибки());
		
		Возврат "Ошибка выгрузки машин. " + ОписаниеОшибки();		
		
	КонецПопытки;	
	
	ДокВыгрузка.ДанныеВыгруженыВАдминку = Истина;
	ДокВыгрузка.Записать(РежимЗаписиДокумента.Запись);
		
	Попытка
					
		УстановитьПараметрыЗаказовПослеВыгрузки(МассивНомеровЗаказов, Терминал, ДокВыгрузка, ДатаДоставки, ТабЗаказовМашин, ПодключениеКМагазину);
		
	Исключение
		
		ДокВыгрузка.ОписаниеОшибки = ОписаниеОшибки();
		ДокВыгрузка.Записать(РежимЗаписиДокумента.Запись);
		
		МасОш = Новый Массив;
		МасОш.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасОш.Добавить("v.yakurnov@strizh-logistic.ru");
		lem.ОтправитьСообщение(МасОш, "Ошибка при загрузке данных тарификации из админки", "При загрузке данных тарификации из админки произошла ошибка!" + Символы.ПС + "Текст ошибки: " + ОписаниеОшибки());

		Возврат ОписаниеОшибки();	
		
	КонецПопытки;
	
		
	Возврат "";
	
КонецФункции

Процедура УстановитьПараметрыЗаказовПослеВыгрузки(МассивНомеровЗаказов, Терминал, ДокВыгрузка, ДатаДоставки, ТабЗаказовМашин, ПодключениеКМагазину)
	
	Мас = СтрСоединить(МассивНомеровЗаказов,",");
	
	Ткст = "select dbo.mv_orders.orderIDStr, dbo.mv_orders.serviceDC, dbo.mv_orders.serviceDCClean, dbo.mv_orders.typeDelivery, dbo.mv_orders.tariffCategoryId, dbo.mv_orders.chargeableWeight from dbo.mv_orders where dbo.mv_orders.orderID in (" + Мас + ")";
	Рез_ = ЗапросКИнтернетМагазинуПоВыгрузкеМашин(Ткст, ПодключениеКМагазину);
	Рез = Евген.СоздатьТаблицу(Рез_, "orderIDStr, serviceDC_Ч, serviceDCClean_Ч, typeDelivery_Ч, tariffCategoryId_Ч, chargeableWeight_Ч");
	
	//+Степанов Задача № 3833
	//Асеев 11.09.2024 (Задача № 5321)>>>
	ТаблицаПараметровТарифовЗаказов = ТарификацияУслугСервер.СоздатьТаблицуПараметровТарифовЗаказов();
	//Асеев 11.09.2024 (Задача № 5321)<<<
	//-Степанов Задача № 3833
	
	Для Каждого Тек Из Рез Цикл
		
		НСтр = ДокВыгрузка.Заказы.Добавить();	
		//НайД = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.orderIDStr);
		//НайР = ТабЗаказовМашин.Найти(НайД.Ссылка, "Реализация");
		
		НайР = ТабЗаказовМашин.Найти(Тек.orderIDStr, "НомерРТУ");
		Если НайР <> Неопределено Тогда
			НайД = НайР.Реализация;
		Иначе
			НайД = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Тек.orderIDStr);
			НайР = ТабЗаказовМашин.Найти(НайД, "Реализация");
		КонецЕсли;
		
		Если Не Найд.Пустая() Тогда
			
			НСтр.Заказ = НайД;
			НСтр.УслугиСД = Тек.serviceDC_Ч;
			НСтр.УслугиСДЧистые = Тек.serviceDCClean_Ч;
			НСтр.КатегорияДоставки = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория", Тек.typeDelivery_Ч);			
			
			//CeHbKA #3965 07.05.2020
			НСтр.СостояниеЗаказа = Справочники.СтатусЗаказаИнтернетМагазина.ЗаказВОбработке;
			//CeHbKA #3965 07.05.2020
			
			Если НайР = Неопределено Тогда
				
				ЗапросРейс = Новый Запрос("ВЫБРАТЬ
				                          |	РейсЗаказы.Ссылка КАК Рейс,
				                          |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Транспорт КАК Транспорт,
				                          |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Водитель КАК Водитель,
				                          |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Экспедитор КАК Экспедитор
				                          |ИЗ
				                          |	Документ.Рейс.Заказы КАК РейсЗаказы
				                          |ГДЕ
				                          |	РейсЗаказы.Заказ = &Заказ
				                          |	И РейсЗаказы.Ссылка.ДатаРейса МЕЖДУ &Дата1 И &Дата2
				                          |	И РейсЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
				                          |	И НЕ РейсЗаказы.УдаленИзРейса");
				ЗапросРейс.УстановитьПараметр("Заказ", НайД);
				ЗапросРейс.УстановитьПараметр("Дата1", НачалоДня(ДатаДоставки));
				ЗапросРейс.УстановитьПараметр("Дата2", КонецДня(ДатаДоставки));
				РезРейс = ЗапросРейс.Выполнить().Выбрать();
				
				Если РезРейс.Следующий() Тогда					
					НСтр.Рейс       = РезРейс.Рейс;
					НСтр.Транспорт  = РезРейс.Транспорт;
					НСтр.Водитель   = РезРейс.Водитель;
					НСтр.Экспедитор = РезРейс.Экспедитор;		
				КонецЕсли;
				
			Иначе
				
				НСтр.Рейс       = НайР.Рейс;
				НСтр.Транспорт  = НайР.Транспорт;
				НСтр.Водитель   = НайР.Водитель;
				НСтр.Экспедитор = НайР.Экспедитор;		
				
			КонецЕсли;
			
			Д = НайД.ПолучитьОбъект();
			Д.УслугиСД = Тек.serviceDC_Ч;
			Д.УслугиСДЧистые = Тек.serviceDCClean_Ч;
			Если НайР <> Неопределено Тогда
				Если ЗначениеЗаполнено(НайР.Зона) Тогда
					Д.ЗонаТарификации = НайР.Зона;
					// МАС - 14.11.2017 - №2018 --->> 
					НСтр.ЗонаТарификации = НайР.Зона;
					// <<--- МАС 
				КонецеСли;	
			КонецеСли;
			Д.КатегорияДоставки = Тек.typeDelivery_Ч;
			//Д.ЗонаТарификации = НайР.Зона; 

			Р_Бр = "";
			Если ЗначениеЗаполнено(д.ТарифнаяСеткаПартнера) Тогда
				Р_Бр = Справочники.РасчетныеБрейки.НайтиПоРеквизиту("КодБрейка", Тек.tariffCategoryId_Ч,, д.ТарифнаяСеткаПартнера);
			КонецеСли;	
			Если ЗначениеЗаполнено(Р_Бр) Тогда
				Д.РасчетныйБрейк = Р_Бр;
				// МАС - 14.11.2017 - №2018 --->> 
				НСтр.РасчетныйБрейк = Р_Бр;
				// <<--- МАС 		
			КонецЕСли;	
			//#Если Клиент Тогда
			//	Сообщить("Обновление доставки № " + Тек.orderIDStr);
			//#КонецеСли
			Д.Записать(РежимЗаписиДокумента.Запись);
		КонецеСли;
		//+Степанов Задача № 3833
		Если ТипЗнч(НайД) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(НайД) Тогда
			СтрокаПараметровТарифа = ТаблицаПараметровТарифовЗаказов.Добавить();
			СтрокаПараметровТарифа.Заказ = НайД;
			СтрокаПараметровТарифа.УслугиСД = ?(Тек.serviceDC_Ч = 0, -1, Тек.serviceDC_Ч);
			СтрокаПараметровТарифа.УслугиСДЧистые = ?(Тек.serviceDCClean_Ч = 0, -1, Тек.serviceDCClean_Ч);
			Если НайР <> Неопределено Тогда
				Если ЗначениеЗаполнено(НайР.Зона) Тогда
					СтрокаПараметровТарифа.ЗонаТарификации = НайР.Зона;
					//Асеев 11.09.2024 (Задача № 5321)>>>
					СтрокаПараметровТарифа.МетодОпределенияЗоныТарификации = НайР.МетодОпределенияЗоныТарификации;
					//Асеев 11.09.2024 (Задача № 5321)<<<
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметровТарифа.КатегорияДоставки = Тек.typeDelivery_Ч;
			Если ЗначениеЗаполнено(Р_Бр) Тогда
				СтрокаПараметровТарифа.РасчетныйБрейк = Р_Бр;	
			КонецЕсли;	
		КонецЕсли;
		//-Степанов Задача № 3833

		
		// Установка категории для расчета ЗП
		Попытка
			mas.УстановитьКатегориюДляРасчетаЗП(НайД);
		Исключение	
		КонецПопытки;		
		
		Если Не Найд.Пустая() Тогда
			НаборТВ = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
			НаборТВ.Отбор.Заказ.Установить(НайД);
			НаборТВ.Прочитать();
			Если НаборТВ.Количество() Тогда
				НаборТВ[0].ТарифицируемыйВес = Тек.chargeableWeight_Ч;
				// МАС - 14.11.2017 - №2018 --->> 
				НСтр.ТарифицируемыйВес = Тек.chargeableWeight_Ч;
				// <<--- МАС
			КонецЕсли;
			НаборТВ.Записать();
		КонецЕсли;            
	КонецЦикла;	
	
	//+Степанов Задача № 3833
	Если ТаблицаПараметровТарифовЗаказов.Количество() Тогда
		ТарификацияУслугСервер.ЗаписатьПараметрыТарифаЗаказа(ТаблицаПараметровТарифовЗаказов);
	КонецЕсли;	
	//-Степанов Задача № 3833

	Если НЕ ЗначениеЗаполнено(Терминал) И ДокВыгрузка.Заказы.Количество() Тогда	
		Попытка
			Терминал = ДокВыгрузка.Заказы[0].Рейс.ТерминалДоставки;		
		Исключение		
		КонецПопытки;			
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Терминал) Тогда	
		ДокВыгрузка.Терминал = Терминал;	
	КонецЕсли;
	
	ДокВыгрузка.ДанныеПоТарификацииЗагруженыВ1С = Истина;
	ДокВыгрузка.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры
	
Функция ЗапросКИнтернетМагазинуПоВыгрузкеМашин(ТекстЗапроса, ПодключениеКМагазину) Экспорт
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = ПодключениеКМагазину;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandType = 1;
	Возврат Cmd.Execute();
КонецФункции

// Выгрузка в админку по терминалам и с заборами (новый регламент)
Процедура ОбработатьВыгрузкуМашинВАдминкуПоТерминаламСЗаборамиНовая(КодНастройки, ДатаВыгрузки = Неопределено, ОтключитьРассылкуПоДоставкам = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Терминал = Справочники.РегиональныеТерминалы.НайтиПоКоду(КодНастройки);
	
	// ++Задача № 3581
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		ДатаВыгрузки = ?(ДатаВыгрузки = Неопределено, ТекущаяДата(), ДатаВыгрузки);
		
		ДатаСтрока  = Формат(ДатаВыгрузки, "ДФ=""ггггММдд""");
		ВремяСтрока = Формат(ТекущаяДата(), "ДФ=""ЧЧммсс""");
		ДатаОтчета = Дата(ДатаСтрока + ВремяСтрока);
	Иначе	
		ДатаОтчета = ТекущаяДата(); 
	КонецЕсли;
	
	Обр = Обработки.ВыгрузкаМашин.Создать(); //Для получения макетов отчетов
	ТабЗаказовМашин = "";
	Рез = МаршрутизацияЗаказовСервер.ВыгрузитьМашины(ТабЗаказовМашин, Терминал, ДатаОтчета); 
	
	//CeHbKA #3965 07.05.2020
	ТарификацияУслугСервер.ЗагрузитьКомпонентыТарифовДляОтклонённыхЗаказов(ДатаОтчета, Терминал);
	//CeHbKA #3965 07.05.2020
	
	МасП = Новый Массив;

	// --Задача № 3581
	
	// Михушкин - Заборы --->> 
	РезЗаборы = mas.ВыгрузитьВАдминкуНаСервереЗаборы(Терминал, ДатаОтчета);
	// <<--- Михушкин 
	
	МасП.Добавить("rea@strizh-logistic.ru");
	//МасП.Добавить("maksim.ivanov@strizh-logistic.ru");		
	МасП.Добавить("logist@strizh-logistic.ru");
	МасП.Добавить("logistspb@strizh-logistic.ru");
	МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	МасП.Добавить("alexey.kuzmichev@strizh-logistic.ru");
	МасП.Добавить("syn@strizh-logistic.ru");
	//МасП.Добавить("denis.zherebtsov@strizh-logistic.ru"); // ТЕСТ 
	МасП.Добавить("stanislav.tumakov@strizh-logistic.ru");
	//МасП.Добавить("denis.matskevich@strizh-logistic.ru");
	МасП.Добавить("i.belov@strizh-logistic.ru");
	МасП.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
	//МасП.Добавить("a.pryalkin@strizh-logistic.ru");
	//МасП.Добавить("n.stepanov@strizh-logistic.ru");
	МасП.Добавить("i.markelova@strizh-logistic.ru");	
	//МасП.Добавить("a.matveenko@strizh-logistic.ru");
	МасП.Добавить("y.semichastnov@strizh-logistic.ru");
	
	//lem 
	Если Терминал = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
		МасП.Добавить("vladimir.goryainov@strizh-logistic.ru");	
	КонецеСли;	
	//lem
	
	Если Рез = "" Тогда
		КолЗаказов = ТабЗаказовМашин.Количество();
		
		//+++ БАО 16.08.2017 №1144		
		РезЗаборыДляРЕД = РезЗаборы.Скопировать();
		ТабЗаказовМашинДляРЕД = ТабЗаказовМашин.Скопировать(); 
		//--- БАО 16.08.2017 №1144
		
		ТабМ = may.ОбъединитьТаблициЗаказовИЗаборов(ТабЗаказовМашин,РезЗаборы);
		
		СписокВодителейЭкспедиторов = Неопределено;//Задача № 2799
		ТаблицаПолигонов = mas.СвернутьПолигонМаршрутизацииПорядокПоМаршруту(ТабЗаказовМашинДляРЕД, СписокВодителейЭкспедиторов);
		
		ПолигоныСоСложнойПарковкой = РегистрыСведений.ДополнительныеПараметрыПолигоновМаршрутизации.СписокПолигоновСоСложнойПарковкой();//Задача № 2799 
		
		//+++ БАО 22.06.2017 №1144
		Если ТипЗнч(ТабЗаказовМашинДляРЕД) = Тип("ТаблицаЗначений") И ТабЗаказовМашинДляРЕД.Колонки.Найти("Ссылка") <> Неопределено Тогда 
			МассивЗаказов = ТабЗаказовМашинДляРЕД.ВыгрузитьКолонку("Ссылка");
		Иначе
			МассивЗаказов = Новый Массив;
		КонецЕсли;	
		
		Если ТипЗнч(РезЗаборыДляРЕД) = Тип("ТаблицаЗначений") И РезЗаборыДляРЕД.Колонки.Найти("Забор") <> Неопределено Тогда 
			МассивЗаборов = РезЗаборыДляРЕД.ВыгрузитьКолонку("Забор");
		Иначе
			МассивЗаборов = Новый Массив;
		КонецЕсли;	
		
		// Закомментировать для теста 2596
		рэИнтеграцияРэдЭкспресс.REDПередачаДанныхОСтатусах_ОтсортированНаМаршрут_РегистрацияДляОтправки(МассивЗаказов, МассивЗаборов);
		//--- БАО 22.06.2017 №1144
		                   
		МакетHTML = Обр.ПолучитьМакет("МакетHTML_4");
		ТекстHTMLМакет = МакетHTML.ПолучитьТекст();
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"</tbody></table></body></html>","");
		                                   		
		Т = "";
		СчМаш = 0;
		КолЗаборыВсего = 0;
		ЕстьСтрокаБезМашины = Ложь;
		
		МакетHTMLСтр = Обр.ПолучитьМакет("Макет1");
		ТекстСтроки = МакетHTMLСтр.ПолучитьТекст();	
		Для Каждого Тек Из ТабМ Цикл
			
			Если ЗначениеЗаполнено(Тек.НомерМашины) Тогда
				ГосНомер = Тек.НомерМашины;
			Иначе
				ГосНомер = "Машины нет";
				ЕстьСтрокаБезМашины = Истина;
			КонецеСли;
			
			СтрЗоныМаршрута = ТаблицаПолигонов.НайтиСтроки(Новый Структура("Маршрут, Транспорт",Тек.Маршрут,Тек.НомерМашины));
			СтрЗоны = ?(СтрЗоныМаршрута.Количество()>0, СтрЗоныМаршрута[0].ЗоныМаршрутов,"");
			
			// //Задача № 2799
			СтрВодитель = "";
			СтрЭкспедитор = "";
			Попытка	
				СтрокаМаршрутТранспорт = СписокВодителейЭкспедиторов.НайтиСтроки(Новый Структура("Маршрут,Транспорт",Тек.Маршрут,Тек.НомерМашины));
				Если СтрокаМаршрутТранспорт.Количество()>0 Тогда
					СтрВодитель = СокрЛП(СтрокаМаршрутТранспорт[0].Водитель);     
					СтрЭкспедитор = СокрЛП(СтрокаМаршрутТранспорт[0].Экспедитор);
				КонецЕсли;
			Исключение
			КонецПопытки;
			// //Задача № 2799
			
			СчМаш = СчМаш + 1;
			
			ТекстHTMLСтр = ТекстСтроки;
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Номер", СчМаш);
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Маршрут", Тек.Маршрут);
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Машина", ГосНомер);
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Водитель", mas.ВозвратНеПустойСтроки(СтрВодитель));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Экспедитор", mas.ВозвратНеПустойСтроки(СтрЭкспедитор));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"ВсегоЗаказов", mas.ВозвратНеПустойСтроки(Тек.Кол));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"МГТ", mas.ВозвратНеПустойСтроки(Тек.МГТ));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"СГТ", mas.ВозвратНеПустойСтроки(Тек.СГТ));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"КГТ", mas.ВозвратНеПустойСтроки(Тек.КГТ));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"ВсегоЗаборов", mas.ВозвратНеПустойСтроки(Тек.КолЗаборов));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"До1м3", mas.ВозвратНеПустойСтроки(Тек.Мение));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Более1м3", mas.ВозвратНеПустойСтроки(Тек.Более));
			
			mas.ОбработатьЗоныЦветом(СтрЗоны, ПолигоныСоСложнойПарковкой);//Задача № 2799
			
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"СписокЗон", mas.ВозвратНеПустойСтроки(СтрЗоны));
			
			ТекстHTMLМакет = ТекстHTMLМакет + ТекстHTMLСтр; 
			
		КонецЦикла;	
				
		Если ЕстьСтрокаБезМашины тогда
			СчМаш = СчМаш - 1;
		КонецЕсли;
		КолЗаказов = ТабМ.Итог("Кол");
		КолЗаборыВсего = ТабМ.Итог("КолЗаборов");
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоМашин]"  , СчМаш);
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоЗаказов]", КолЗаказов);
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоЗаборов]", КолЗаборыВсего);
						
		Т = Т + "ИТОГО: доставок  = " + Формат(КолЗаказов) + " шт." + ", заборов = " + Формат(КолЗаборыВсего) + ", машин = " + Формат(СчМаш);
		
		ТекстHTMLМакет = ТекстHTMLМакет + "</TBODY></TABLE></BODY></HTML>";
		
		Отпр = lem.ОтправитьСообщение(МасП,                                                // Массив адресов
		"Произведена выгрузка машин - "+ Терминал.Город + " (" + Формат(ДатаОтчета, "ДЛФ=DD") + ")", // Тема 
		ТекстHTMLМакет,                                                         // Текст
		,                                                                       // Файл
		"Логистическая компания ""Стриж""",                                     // Имя отправителя
		,                                                                       // Обратный адрес
		ТипТекстаПочтовогоСообщения.HTML);                                      // Тип текста		
		
	Иначе
		Если ТипЗнч(Рез) = Тип("Булево") Тогда
			Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ДатаОтчета, "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст);
		Иначе
			Т = Рез;
			Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ДатаОтчета, "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст);
		КонецеСли;	
	КонецеСли;
	
		
	Если Не (ПараметрыСеанса.ЭтоТестоваяСреда ИЛИ ОтключитьРассылкуПоДоставкам) Тогда
		
		Пер = Новый СтандартныйПериод;
		Пер.ДатаНачала = НачалоДня(ТекущаяДата());
		Пер.ДатаОкончания = КонецДня(ТекущаяДата());
		
		От = Отчеты.ОтчетПоДоставкамКомитента.Создать();
		ТаблицаКонтрагентовИсключений = smv.ПолучитьКонтрагентовИсключений(Перечисления.ТипыСвязейКонтрагентовИсключений.РегламентВыгрузкаМашин);
		
		От.СформироватьОтправитьПоПочте(Пер,ТаблицаКонтрагентовИсключений,Неопределено,Терминал);
		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

Процедура АсинхронныйВызовПроцедурИзЗафиксироватьДанныеМаршрутизации(ДатаПланирования, Регион) Экспорт
	
	//Асеев 05.07.2024 (Задача № 5291)>>>
	Об = Отчеты.ОтчетПоИдентичнымАдресам.Создать();
	Т = Об.СформироватьОтправитьПоПочте(ДатаПланирования, ДатаПланирования, Регион);
	
	Если Т = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтчета = ТекущаяДата();
	
	ИмяФайла = "ИдентичныеАдреса" + СокрЛП(Регион.КодТерминала) + Формат(ДатаОтчета, "ДФ=ddMMyyyyHHmmss");
	
	ПутьКФайлу = КаталогВременныхФайлов() +  "\" + ИмяФайла + ".xls";
	Т.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	
	ДатаПланированияСтр = Формат(ДатаПланирования, "ДФ=dd.MM.yyyy");
	
	ТемаПисьма = "Идентичные адреса " + Регион.Город + " " + ДатаПланированияСтр;
	ТекстПисьма = "Отчет по идентичным адресам по результатам фиксации маршрутизации
	|Дата планирования " + ДатаПланированияСтр + "
	|Регион " + Регион.Город + "
	|
	|Сформирован " + ДатаОтчета;
	
	МасП = Новый Массив;
	МасП.Добавить("logist@strizh-logistic.ru");
	МасП.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
	МасП.Добавить("stanislav.tumakov@strizh-logistic.ru");
	МасП.Добавить("yulia.semenova@strizh-logistic.ru");
	МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	МасП.Добавить("m.aseev@strizh-logistic.ru");
	
	ТекстОшибки = "";
	
	lem.ОтправитьСообщение(МасП, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Логистическая компания ""Стриж""");
	
	Попытка
		УдалитьФайлы(ПутьКФайлу);
	Исключение
	КонецПопытки;
	//Асеев 05.07.2024 (Задача № 5291)<<<
	
КонецПроцедуры

//Поляков #3995 18.05.2020 ->
Процедура АсинхронныйВызовПроцедурИзПечатьМаршрутногоЛиста(Рейс) Экспорт
	
	Если Не ОбщегоНазначения.ЭтоТестоваяСреда() Тогда  //
		Если ОтправляемСМС() Тогда
			//Геннадий 12.10.2020 #блокировка рассылка СМС, если печать маршрутного листа в дату, отличную от даты рейса ->
			Если НачалоДня(Рейс.ДатаРейса) = НачалоДня(ТекущаяДата()) Тогда 
				may.ОтправитьСМСПоРейсу(Рейс);
			КонецЕсли;
			//Геннадий 12.10.2020 <-
		КонецЕсли;	
		
		// Якурнов 09.10.2018 13:59:47 Проверяем на OZON и отправляем
		oz_РаботаССервисом.ОбработатьВыдачуКурьеру_OZONПоРейсу(Рейс);
	
	КонецЕсли;
	
	// Якурнов 25.10.2018 15:30:23 
	ПечатьДокументовСервер.ЗафиксироватьПечатьДокумента(Рейс);
	//Элементы.Список.Обновить();

	// Задача № 3201
	Документы.Рейс.ОтправитьСтатусыЗаказовРейса(Рейс);
	// Задача № 3201

	//CeHbKA #4133 11.08.2020
	//СписокЗаказов = ТекДанные.Ссылка.Заказы.Выгрузить();
	//СписокЗаказов.Колонки.Добавить("Терминал");
	//СписокЗаказов.ЗаполнитьЗначения(ТекДанные.Ссылка.ТерминалДоставки, "Терминал");
	
	//CeHbKA 01.12.2020 дополнение 1	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РейсЗаказы.Ссылка КАК Рейс,
		|	РейсЗаказы.Заказ КАК Заказ,
		|	РейсЗаказы.Ссылка.ТерминалДоставки КАК ТерминалДоставки
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.Рейс.Заказы КАК РейсЗаказы
		|ГДЕ
		|	РейсЗаказы.Ссылка = &Рейс
		//CeHbKA 03.12.2020 дополнение 2
		|	И НЕ РейсЗаказы.УдаленИзРейса
		//CeHbKA 03.12.2020 дополнение 2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Заказы.Рейс КАК Рейс,
		|	ВТ_Заказы.ТерминалДоставки КАК Терминал,
		|	ВТ_Заказы.Заказ КАК Заказ
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
		|		ПО ВТ_Заказы.Заказ = СтатусыЗаказов.Заказ
		|ГДЕ
		|	СтатусыЗаказов.Заказ В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_Заказы.Заказ КАК Заказ
		|			ИЗ
		|				ВТ_Заказы КАК ВТ_Заказы)
		|	И (ЕСТЬNULL(СтатусыЗаказов.Статус, 0) = 211
		|			ИЛИ ЕСТЬNULL(СтатусыЗаказов.Статус, 0) = 212)";
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокЗаказов = РезультатЗапроса.Выгрузить();
	//CeHbKA 01.12.2020 дополнение 1
	
	Если Рейс.ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
		
		Если СписокЗаказов.Количество() > 0 Тогда
			
			lem.ЗафиксироватьМестонахождениеЗаказа(СписокЗаказов, Справочники.ВидыМестонахожденияЗаказа.УКурьера, Рейс);	
			
		КонецЕсли;
		
	КонецЕсли; 
	//CeHbKA #4133 11.08.2020
	
КонецПроцедуры

Функция ОтправляемСМС()
	Если ИнформированиеКлиентовОДоставкеСервер.ПолучитьРежимИнформированияПолучателейЗаказов() = Перечисления.ТипыИнформированияПолучателейЗаказов.СМС Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецеСли;	
КонецФункции
//Поляков #3995 18.05.2020 <-


//Асеев 27.11.2020 (Задача № 4359)>>>
Процедура СдвигДатыЗаказа(Заказ, Доставка, ДатаПереноса, Who = Неопределено) Экспорт
	
	РеализацияОбъект = Заказ.ПолучитьОбъект();
	
	УстановитьДатуВАдминке(РеализацияОбъект.Номер, ДатаПереноса,, Who);
	
	РеализацияОбъект.Дата = ДатаПереноса;
	РеализацияОбъект.Записать(РежимЗаписиДокумента.Запись);
	Если РеализацияОбъект.Проведен Тогда
		РеализацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Доставка) Тогда
		МестнаяДоставкаОбъект = Доставка.ПолучитьОбъект();
		
		
		МестнаяДоставкаОбъект.Дата = ДатаПереноса;
		
		ЧН = Час(МестнаяДоставкаОбъект.ВремяОтправленияС);
		ЧК = Час(МестнаяДоставкаОбъект.ВремяОтправленияПо);
		
		МН = Минута(МестнаяДоставкаОбъект.ВремяОтправленияС);
		МК = Минута(МестнаяДоставкаОбъект.ВремяОтправленияПо);
		
		ЧН_ = Час(МестнаяДоставкаОбъект.ВремяПрибытияС);
		ЧК_ = Час(МестнаяДоставкаОбъект.ВремяПрибытияПо);
		
		МН_ = Минута(МестнаяДоставкаОбъект.ВремяПрибытияС);
		МК_ = Минута(МестнаяДоставкаОбъект.ВремяПрибытияПо);
		
		
		МестнаяДоставкаОбъект.ВремяОтправленияС = Дата(Формат(Год(ДатаПереноса), "ЧГ=") + Формат(Месяц(ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
		МестнаяДоставкаОбъект.ВремяОтправленияПо = Дата(Формат(Год(ДатаПереноса), "ЧГ=") + Формат(Месяц(ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
		
		МестнаяДоставкаОбъект.ВремяПрибытияС = Дата(Формат(Год(ДатаПереноса), "ЧГ=") + Формат(Месяц(ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МН_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
		МестнаяДоставкаОбъект.ВремяПрибытияПо = Дата(Формат(Год(ДатаПереноса), "ЧГ=") + Формат(Месяц(ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(День(ДатаПереноса), "ЧЦ=2; ЧВН=; ЧГ=") + Формат(ЧК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + Формат(МК_, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=") + "00");
		
		МестнаяДоставкаОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатуВАдминке(НомерЗ, ДатаЗ, ОтвязатьАвто = Ложь, Who = Неопределено)
	
	ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
	
	// ++Задача № 3381	
	//Ткст = "
	//|UPDATE _order
	//|SET DeliveryDate = '" + Евген.ДатаВSQL(ДатаЗ, Ложь) + "'
	//| WHERE orderId = " + Формат(НомерЗ, "ЧГ=") + "
	//|EXEC mp_saveOrderHistory " + Формат(НомерЗ, "ЧГ=");
	//Евген.ЗапросКИнтернетМагазину(Ткст, ПодключениеКМагазину);
	ПараметрыЗаказа = Новый Структура("OrderId, DeliveryDate, Who",
	Число(НомерЗ), ДатаЗ, ?(Who = Неопределено, СокрЛП(ПараметрыСеанса.ТекущийПользователь), Who));
	
	ПараметрыЗапроса = новый Массив;
	ПараметрыЗапроса.Добавить(ПараметрыЗаказа);
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		ФайлДляКонтроля = "D:\tmp\SetOrdersDeliveryDate_" + СокрЛП(НомерЗ) + ".json";
		ТолькоСохранитьФайл = Ложь;
	Иначе
		ФайлДляКонтроля = Неопределено;
		ТолькоСохранитьФайл = Ложь;
	КонецЕсли;

	РезультатОтправки = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(
	Перечисления.ВидыЗапросовWEBСервис.SetOrdersDeliveryDateResult,
	ПараметрыЗапроса,
	ФайлДляКонтроля, 
	ТолькоСохранитьФайл);
	// --Задача № 3381
	
    ////Серегин М.В. 30.07.2015 17:21:53 старый код
    //Ткст = "
    //|UPDATE _order
    //|SET carid = 0
    //| WHERE orderId = " + Формат(НомерЗ, "ЧГ=") + "
    //|EXEC mp_saveOrderHistory " + Формат(НомерЗ, "ЧГ=");
    //Евген.ЗапросКИнтернетМагазину(Ткст, ПодключениеКМагазину);
    ////Серегин М.В. 30.07.2015 17:22:01 новый
	//Асеев 27.11.2020 (Задача № 4359)>>>
	Если ОтвязатьАвто Тогда
	//Асеев 27.11.2020 (Задача № 4359)<<<
		Ткст = "
		|EXEC p1c_removeCarriageFromOrder " + Формат(НомерЗ, "ЧГ=") + "
		|EXEC mp_saveOrderHistory " + Формат(НомерЗ, "ЧГ=");
		Евген.ЗапросКИнтернетМагазину(Ткст, ПодключениеКМагазину);
	КонецЕсли;
    //Серегин М.В. 30.07.2015 17:22:14 
    
	
КонецПроцедуры	
//Асеев 27.11.2020 (Задача № 4359)<<<


Функция ПроверитьВозможностьОтвязкиМашин()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КонтрольВремениСрезПоследних.ОкончаниеСобытия КАК ОкончаниеСобытия
	            |ИЗ
	            |	РегистрСведений.КонтрольВремени.СрезПоследних(
	            |			,
	            |			Терминал.Ссылка = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж)
	            |				И Событие.Ссылка = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.ЗагрузкаРейсовИзВероут)) КАК КонтрольВремениСрезПоследних";
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.ОкончаниеСобытия;
	Иначе	
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Процедура РегламентОтвязкаПеренесенныхЗаказовОтРейсов() Экспорт
	Попытка
		ТерминалМосква = Справочники.РегиональныеТерминалы.МоскваСтриж;
		may.Событие_ОтвязкаЗаказовОтРейсов(Ложь, ТерминалМосква);
		Если ПроверитьВозможностьОтвязкиМашин() Тогда
			//Сообщить("гуд");
		Иначе
			lem.ОтправитьНормальноеСообщениеАдминам("Механизм отвязки машин не отработал", "Причина - в это время производилась загрузка рейсов из вероута.");
		КонецеСли;	
		may.Событие_ОтвязкаЗаказовОтРейсов(Истина, ТерминалМосква);
	Исключение
		Оп = ОписаниеОшибки();
		lem.ОтправитьНормальноеСообщениеАдминам("Ошибка при отвязке - модификация факапа 24.10.2017", Оп);
		Возврат;
	КонецПопытки;	
	
	
	
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
    |	новаЗаданияРейсов.Рейс КАК Рейс,
    |	новаЗаданияРейсов.Доставка КАК Доставка
    |ПОМЕСТИТЬ ВТ_ОбъединениеЗаказов
    |ИЗ
    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаЗаданияРейсов.Рейс = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
    |				И (НЕ новаЗадачаРейсаМестнойДоставки.Выполнена)
    |				И (новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = &ТочкаМаршрута)
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК ДокументРейс
    |			ПО (ДокументРейс.ДатаРейса МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание)
    |				И новаЗаданияРейсов.Рейс = ДокументРейс.РейсМестнойДоставки
    |		ПО РеализацияТоваровУслуг.Номер = новаЗаданияРейсов.Доставка.Номер
    |ГДЕ
    |	РеализацияТоваровУслуг.Дата >= &ЗавтраНачало
    |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РеализацияТоваровУслуг.Ссылка,
    |	новаЗаданияРейсов.Рейс,
    |	новаЗаданияРейсов.Доставка
    |ИЗ
    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаЗаданияРейсов.Рейс = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
    |				И (НЕ новаЗадачаРейсаМестнойДоставки.Выполнена)
    |				И (новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = &ТочкаМаршрута)
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК ДокументРейс
    |			ПО новаЗаданияРейсов.Рейс = ДокументРейс.РейсМестнойДоставки
    |				И (ДокументРейс.ДатаРейса МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание)
    |		ПО РеализацияТоваровУслуг.Номер = новаЗаданияРейсов.Доставка.Номер
    |ГДЕ
    |	РеализацияТоваровУслуг.Дата >= &ЗавтраНачало
    |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 4
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РеализацияТоваровУслуг.Ссылка,
    |	новаЗаданияРейсов.Рейс,
    |	новаЗаданияРейсов.Доставка
    |ИЗ
    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаЗаданияРейсов.Рейс = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
    |				И (НЕ новаЗадачаРейсаМестнойДоставки.Выполнена)
    |				И (новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = &ТочкаМаршрута)
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК ДокументРейс
    |			ПО новаЗаданияРейсов.Рейс = ДокументРейс.РейсМестнойДоставки
    |				И (ДокументРейс.ДатаРейса МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание)
    |		ПО РеализацияТоваровУслуг.Номер = новаЗаданияРейсов.Доставка.Номер
    |ГДЕ
    |	РеализацияТоваровУслуг.Дата >= &ТекущийДеньНачало
    |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 3
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РеализацияТоваровУслуг.Ссылка,
    |	новаЗаданияРейсов.Рейс,
    |	новаЗаданияРейсов.Доставка
    |ИЗ
    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаЗаданияРейсов.Рейс = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
    |				И (НЕ новаЗадачаРейсаМестнойДоставки.Выполнена)
    |				И (новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = &ТочкаМаршрута)
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК ДокументРейс
    |			ПО новаЗаданияРейсов.Рейс = ДокументРейс.РейсМестнойДоставки
    |				И (ДокументРейс.ДатаРейса МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание)
    |		ПО РеализацияТоваровУслуг.Номер = новаЗаданияРейсов.Доставка.Номер
    |ГДЕ
    |	РеализацияТоваровУслуг.Дата < &ЗавтраНачало
    |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 4
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РеализацияТоваровУслуг.Ссылка,
    |	новаЗаданияРейсов.Рейс,
    |	новаЗаданияРейсов.Доставка
    |ИЗ
    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаЗаданияРейсов.Рейс = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
    |				И (НЕ новаЗадачаРейсаМестнойДоставки.Выполнена)
    |				И (новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = &ТочкаМаршрута)
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК ДокументРейс
    |			ПО (ДокументРейс.ДатаРейса МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание)
    |				И новаЗаданияРейсов.Рейс = ДокументРейс.РейсМестнойДоставки
    |		ПО РеализацияТоваровУслуг.Номер = новаЗаданияРейсов.Доставка.Номер
    |ГДЕ
    |	РеализацияТоваровУслуг.Дата МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание
    |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
    |	И РеализацияТоваровУслуг.ПометкаУдаления
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РеализацияТоваровУслуг.Ссылка,
    |	новаЗаданияРейсов.Рейс,
    |	новаЗаданияРейсов.Доставка
    |ИЗ
    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаЗаданияРейсов.Рейс = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
    |				И (НЕ новаЗадачаРейсаМестнойДоставки.Выполнена)
    |				И (новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = &ТочкаМаршрута)
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК ДокументРейс
    |			ПО (ДокументРейс.ДатаРейса МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание)
    |				И новаЗаданияРейсов.Рейс = ДокументРейс.РейсМестнойДоставки
    |		ПО РеализацияТоваровУслуг.Номер = новаЗаданияРейсов.Доставка.Номер
    |ГДЕ
    |	РеализацияТоваровУслуг.Дата МЕЖДУ &ВчерашнийДеньНачало И &ВчерашнийДеньОкончание
    |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РеализацияТоваровУслуг.Ссылка,
    |	новаЗаданияРейсов.Рейс,
    |	новаЗаданияРейсов.Доставка
    |ИЗ
    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
    |			ПО новаЗаданияРейсов.Рейс = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс
    |				И (НЕ новаЗадачаРейсаМестнойДоставки.Выполнена)
    |				И (новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = &ТочкаМаршрута)
    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК ДокументРейс
    |			ПО новаЗаданияРейсов.Рейс = ДокументРейс.РейсМестнойДоставки
    |				И (ДокументРейс.ДатаРейса МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание)
    |		ПО РеализацияТоваровУслуг.Номер = новаЗаданияРейсов.Доставка.Номер
    |ГДЕ
    |	РеализацияТоваровУслуг.Дата МЕЖДУ &ТекущийДеньНачало И &ТекущийДеньОкончание
    |	И РеализацияТоваровУслуг.СтатусИнтернетМагазина = 4
    |	И РеализацияТоваровУслуг.ПометкаУдаления
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РейсЗаказы.Заказ,
    |	Т_Рейс.РейсМестнойДоставки,
    |	новаМестнаяДоставка.Ссылка
    |ИЗ
    |	Документ.Рейс.Заказы КАК РейсЗаказы
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Т_Рейс
    |		ПО (Т_Рейс.ДатаРейса = &ТекущийДеньНачало)
    |			И (Т_Рейс.Проведен)
    |			И РейсЗаказы.Ссылка = Т_Рейс.Ссылка
    |			И (НЕ РейсЗаказы.УдаленИзРейса)
    |			И (РейсЗаказы.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг)
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПредварительногоЗакрытияРейсов.СрезПоследних КАК СтатусыПредварительногоЗакрытияРейсовСрезПоследних
    |		ПО РейсЗаказы.Заказ = СтатусыПредварительногоЗакрытияРейсовСрезПоследних.Заказ
    |			И (СтатусыПредварительногоЗакрытияРейсовСрезПоследних.ДатаРейса = &ВчерашнийДеньНачало)
    |			И (СтатусыПредварительногоЗакрытияРейсовСрезПоследних.ДатаДоставкиЗаказа = &ВчерашнийДеньНачало)
    |			И (СтатусыПредварительногоЗакрытияРейсовСрезПоследних.СтатусПредварительногоЗакрытияРейса = ЗНАЧЕНИЕ(Перечисление.СтатусыПредварительногоЗакрытияРейсов.РейсЗакрытОкончательно))
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
    |		ПО (ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.РеализацияТоваровУслуг).Номер = новаМестнаяДоставка.Номер)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТ_ОбъединениеЗаказов.Заказ КАК Заказ,
    |	ВТ_ОбъединениеЗаказов.Рейс КАК Рейс,
    |	ВТ_ОбъединениеЗаказов.Доставка КАК Доставка,
    |	ВТ_ОбъединениеЗаказов.Рейс.Транспорт КАК Транспорт
    |ИЗ
    |	ВТ_ОбъединениеЗаказов КАК ВТ_ОбъединениеЗаказов
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТ_ОбъединениеЗаказов.Заказ,
    |	ВТ_ОбъединениеЗаказов.Рейс,
    |	ВТ_ОбъединениеЗаказов.Доставка,
    |	ВТ_ОбъединениеЗаказов.Рейс.Транспорт";
    
    Вчера = ТекущаяДата() - 86400;
    Завтра = ТекущаяДата() + 86400;
	
	Запрос.УстановитьПараметр("ВчерашнийДеньНачало", НачалоДня(Вчера));
	Запрос.УстановитьПараметр("ВчерашнийДеньОкончание", КонецДня(Вчера));
    Запрос.УстановитьПараметр("ЗавтраКонец", КонецДня(Завтра));
    Запрос.УстановитьПараметр("ЗавтраНачало", НачалоДня(Завтра));
    Запрос.УстановитьПараметр("ТекущийДеньНачало", НачалоДня(ТекущаяДата()));
    Запрос.УстановитьПараметр("ТекущийДеньОкончание", КонецДня(ТекущаяДата()));
    Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.новаРейсМестнойДоставки.ТочкиМаршрута.ПланированиеРейсаМестнойДоставки);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    МассивПолучателей = Новый Массив;
    МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
    МассивПолучателей.Добавить("logist@strizh-logistic.ru");
    МассивПолучателей.Добавить("sklad1@strizh-logistic.ru");
    
    МассивАдминов = Новый Массив;
    МассивАдминов.Добавить("evgeniy.marochkin@strizh-logistic.ru");
    МассивАдминов.Добавить("m.aseev@strizh-logistic.ru");
    
    Стр="";
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Рейс = ВыборкаДетальныеЗаписи.Рейс;
        Доставка = ВыборкаДетальныеЗаписи.Доставка;
        Машина = ВыборкаДетальныеЗаписи.Транспорт;
        Заказ = ВыборкаДетальныеЗаписи.Заказ;
        
        Попытка
            
            ДокументРейсОбъект = ОтвязатьЗаказыИзДокументаРейсы(Рейс,Заказ);
            ДокументРейсОбъект.Записать(РежимЗаписиДокумента.Проведение);
            
            Стр = Стр + "Заказ: "+Доставка.Номер+" отвязан от документа Рейс: "+ДокументРейсОбъект.Номер+Символы.ПС;
            
        Исключение
            lem.ОтправитьСообщение(МассивАдминов,"Ошибка при отвязке заказа от документа рейс.",ОписаниеОшибки());    
        КонецПопытки;
        
    КонецЦикла;
    
    Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда 
        lem.ОтправитьСообщение(МассивПолучателей,"Отвязка доставки от машин",Стр);
    Иначе
        lem.ОтправитьСообщение(МассивПолучателей,"Отвязка доставки от машин","Нет заказов для отвязки машин.");
    КонецЕсли;	
КонецПроцедуры	


Функция ОтвязатьЗаказыИзДокументаРейсы(Рейс,Заказ)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	РейсЗаказы.Ссылка
        |ИЗ
        |	Документ.Рейс.Заказы КАК РейсЗаказы
        |ГДЕ
        |	РейсЗаказы.Заказ = &Заказ
        |	И РейсЗаказы.Ссылка.РейсМестнойДоставки = &РейсМестнойДоставки";
    
    Запрос.УстановитьПараметр("Заказ", Заказ);
    Запрос.УстановитьПараметр("РейсМестнойДоставки", Рейс);
	
	
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        РейсОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
        СтрокиЗаказов = РейсОбъект.Заказы.НайтиСтроки(Новый Структура("Заказ",Заказ));
        Для каждого Стр Из СтрокиЗаказов Цикл
            Стр.УдаленИзРейса = Истина;
        КонецЦикла;
        
        Период = ТекущаяДата();
        НаборЗаписей  = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Период.Установить(Период);
        НаборЗаписей.Отбор.Заказ.Установить(Заказ);
        НаборЗаписей.Отбор.Рейс.Установить(РейсОбъект.Ссылка);
        Запись = НаборЗаписей.Добавить();
        Запись.Период = Период;
        Запись.Заказ = Заказ;
        Запись.Рейс =  РейсОбъект.Ссылка;
		Запись.ТипОтвязки = Перечисления.ТипыОтвязкиЗаказовОтМашин.РоботЯндекса;
		
        НаборЗаписей.Записать();
        Возврат РейсОбъект;
        
    Иначе
        Возврат Неопределено;
    КонецЕсли;
КонецФункции // ()

//Асеев 04.06.2021 (Задача № 4551)>>>

Функция СформироватьСтрокуJSON(СтруктураJSON) Экспорт
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
КонецФункции

Функция ДанныеJSONВСтруктуру(ДанныеJSON, ИменаСвойствСоЗначениямиДата = "") Экспорт
	Чт = Новый ЧтениеJSON;
	Чт.УстановитьСтроку(ДанныеJSON);
	СтруктураДанных = ПрочитатьJSON(Чт, Ложь, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.Microsoft);
	Возврат СтруктураДанных;
КонецФункции

Функция ПолучитьДанныеОРейсе(ВходныеДанные) Экспорт
	
	НомерГосударственнойРегистрации = ВходныеДанные.carId;
	ДатаРейса = ВходныеДанные.routeDate;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерГосударственнойРегистрации", НомерГосударственнойРегистрации);
	Запрос.УстановитьПараметр("ДатаРейса", ДатаРейса);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Водитель.Наименование, """") КАК driverFIO,
	|	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Наименование, """") КАК forwarderFIO
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс.ДатаРейса = &ДатаРейса) КАК ПривязкаМашинКРейсамСрезПоследних
	|ГДЕ
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.НомерГосударственнойРегистрации = &НомерГосударственнойРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПривязкаМашинКРейсамСрезПоследних.Период УБЫВ";
	
	СтруктураОтвета = Новый Структура("driverFIO,forwarderFIO", "", "");
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураОтвета, Выборка);
	КонецЕсли;
		
	Возврат СтруктураОтвета;
	
КонецФункции

//Асеев 04.06.2021 (Задача № 4551)<<<

//Асеев 16.02.2022 (Задача № 4741)>>>
Функция ПолучитьФискальныеДанныеДляЗаказа(ВходныеДанные) Экспорт
	
	НомерЗаказа = Формат(ВходныеДанные.orderId, "ЧГ=");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеПараметрыЧеков.ФН.КодФН КАК FN,
	|	ДополнительныеПараметрыЧеков.ФПД КАК FPD,
	|	ДополнительныеПараметрыЧеков.ФД КАК FD,
	|	ДополнительныеПараметрыЧеков.ДатаЧека КАК dateFC,
	|	ДополнительныеПараметрыЧеков.ТипЧека КАК typeFC,
	|	НАЧАЛОПЕРИОДА(ДополнительныеПараметрыЧеков.ДатаЧека, ДЕНЬ) КАК ДеньЧека
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЧеков КАК ДополнительныеПараметрыЧеков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(ЗаборТовара.Ссылка, Фрахт.Ссылка)) КАК Заказ
	|		ИЗ
	|			(ВЫБРАТЬ
	|				&НомерЗаказа КАК Номер) КАК ВложенныйЗапрос
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|				ПО ВложенныйЗапрос.Номер = РеализацияТоваровУслуг.Номер
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|				ПО ВложенныйЗапрос.Номер = ЗаборТовара.Номер
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.Фрахт КАК Фрахт
	|				ПО ВложенныйЗапрос.Номер = Фрахт.Номер) КАК ВложенныйЗапрос
	|		ПО ДополнительныеПараметрыЧеков.ЧекККМ.Реализация = ВложенныйЗапрос.Заказ
	|			И (ДополнительныеПараметрыЧеков.ЧекККМ.Проведен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДеньЧека УБЫВ,
	|	ДополнительныеПараметрыЧеков.ТипЧека,
	|	ДополнительныеПараметрыЧеков.ДатаЧека УБЫВ";
	
	МассивFiscalData = Новый Массив;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ШаблонFiscalData = Новый ФиксированнаяСтруктура("FN,FPD,FD,dateFC,typeFC,hlFiscalCheck");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			FD = СтрЗаменить(Выборка.FD, Символы.НПП, "");
			
			СтруктураFiscalData = Новый Структура(ШаблонFiscalData);
			ЗаполнитьЗначенияСвойств(СтруктураFiscalData, Выборка,, "FD");
			СтруктураFiscalData.FD = FD;
			СтруктураFiscalData.hlFiscalCheck = "https://lk.platformaofd.ru/web/noauth/cheque?fn=" + Выборка.FN + "&fp=" + Выборка.FPD + "&i=" + FD;
			
			МассивFiscalData.Добавить(СтруктураFiscalData);
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("arrayOfFiscalData", МассивFiscalData);
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 16.02.2022 (Задача № 4741)<<<

//Асеев 01.03.2022 (Задача № 4751)>>>
Функция ПолучитьГиперссылкуНетМонет(ВходныеДанные) Экспорт
	
	НомерЗаказа = СокрЛП(ВходныеДанные.orderId);
	
	ГСНетМонет = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	Запрос.УстановитьПараметр("Сегодня", НачалоДня(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РейсЗаказы.Ссылка КАК Рейс
	|ПОМЕСТИТЬ ВТ_Рейс
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЗаборТовара.Ссылка) КАК Заказ
	|		ИЗ
	|			(ВЫБРАТЬ
	|				&НомерЗаказа КАК Номер) КАК ВложенныйЗапрос
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|				ПО ВложенныйЗапрос.Номер = РеализацияТоваровУслуг.Номер
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|				ПО ВложенныйЗапрос.Номер = ЗаборТовара.Номер) КАК ВложенныйЗапрос
	|		ПО РейсЗаказы.Заказ = ВложенныйЗапрос.Заказ
	|			И (НЕ РейсЗаказы.УдаленИзРейса)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (Рейс.ДатаРейса = &Сегодня)
	|			И РейсЗаказы.Ссылка = Рейс.Ссылка
	|			И (Рейс.Проведен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рейс.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ФизическиеЛица.КодНетМонет, """") КАК КодНетМонет
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(
	|			,
	|			Рейс В
	|				(ВЫБРАТЬ
	|					ВТ_Рейс.Рейс КАК Рейс
	|				ИЗ
	|					ВТ_Рейс КАК ВТ_Рейс)) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ФизЛицо, ПривязкаМашинКРейсамСрезПоследних.Водитель.ФизЛицо) = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(ФизическиеЛица.КодНетМонет, """") <> """"";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если Не ПустаяСтрока(Выборка.КодНетМонет) Тогда
			ГСНетМонет = "https://netmonet.co/tip/" + Выборка.КодНетМонет + "?o=6%26c=" + НомерЗаказа;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("HLNetMonet", ГСНетМонет);
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 01.03.2022 (Задача № 4751)<<<

//Асеев 02.03.2022 (Задача № 4753)>>>
//Функция ЗафиксироватьЗапросНаСвязьОтПолучателя(ВходныеДанные) Экспорт
//	
//	НомерЗаказа = СокрЛП(ВходныеДанные.orderId);
//	
//	Сейчас = ТекущаяДата();
//	
//	done = Истина;
//	errorText = "";
//	
//	Попытка
//		
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
//		Запрос.УстановитьПараметр("Сегодня", НачалоДня(Сейчас));
//		Запрос.Текст =
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	РейсЗаказы.Заказ КАК Заказ,
//		|	РейсЗаказы.Ссылка КАК Рейс,
//		|	новаОтчетВодителя.Рейс ЕСТЬ NULL КАК НеВПроцессеЗавершения
//		|ИЗ
//		|	Документ.Рейс.Заказы КАК РейсЗаказы
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
//		|			ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЗаборТовара.Ссылка) КАК Заказ
//		|		ИЗ
//		|			(ВЫБРАТЬ
//		|				&НомерЗаказа КАК Номер) КАК ВложенныйЗапрос
//		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//		|				ПО ВложенныйЗапрос.Номер = РеализацияТоваровУслуг.Номер
//		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
//		|				ПО ВложенныйЗапрос.Номер = ЗаборТовара.Номер) КАК ВложенныйЗапрос
//		|		ПО РейсЗаказы.Заказ = ВложенныйЗапрос.Заказ
//		|			И (НЕ РейсЗаказы.УдаленИзРейса)
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Т_Рейс
//		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя КАК новаОтчетВодителя
//		|			ПО Т_Рейс.РейсМестнойДоставки = новаОтчетВодителя.Рейс
//		|		ПО (Т_Рейс.ДатаРейса = &Сегодня)
//		|			И РейсЗаказы.Ссылка = Т_Рейс.Ссылка
//		|			И (Т_Рейс.Проведен)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Т_Рейс.Дата УБЫВ";
//		
//		Результат = Запрос.Выполнить();
//		Если Результат.Пустой() Тогда
//			done = False;
//			errorText = "Не найден рейс!";
//		Иначе
//			Выборка = Результат.Выбрать();
//			Выборка.Следующий();
//			
//			Если УчетКонтроляВремениСервер.РейсАктивен(Выборка.Рейс) Тогда
//				Если Выборка.НеВПроцессеЗавершения Тогда
//					//ВызватьИсключение "Тестовое исключение";
//					
//					СтруктураПараметров = Новый Структура;
//					СтруктураПараметров.Вставить("Период", Сейчас);
//					СтруктураПараметров.Вставить("Заказ", Выборка.Заказ);
//					СтруктураПараметров.Вставить("Реквизит", Перечисления.РеквизитыЗаказа.ЗапросНаСвязьОтПолучателя);
//					СтруктураПараметров.Вставить("Рейс", Выборка.Рейс);
//					СтруктураПараметров.Вставить("НовоеЗначение", Формат(Сейчас, "ДФ=yyyyMMddHHmmss"));
//					СтруктураПараметров.Вставить("СтатусТрансляцииИзменения", Перечисления.СтатусыТрансляцииИзмененийВЗаказах.ИзменениеЗафиксировано);
//					
//					ИнформированиеЭкипажейОбИзмененияхВЗаказахСервер.ЗаписатьИнформированиеЭкипажейОбИзмененияхВЗаказах(СтруктураПараметров);
//				Иначе
//					done = False;
//					errorText = "Рейс в процессе завершения!";
//				КонецЕсли;
//			Иначе
//				done = False;
//				errorText = "Рейс не активен!";
//			КонецЕсли;
//		КонецЕсли;
//		
//	Исключение
//		done = False;
//		errorText = ОписаниеОшибки();
//	КонецПопытки;
//	
//	СтруктураОтвета = Новый Структура("result", Новый Структура("done,errorText", done, errorText));
//	
//	Возврат СтруктураОтвета;
//	
//КонецФункции
//Асеев 02.03.2022 (Задача № 4753)<<<

//Асеев 08.04.2022 (Задача № 4777)>>>
Функция ПолучитьКодИдентификацииКлиента(ВходныеДанные) Экспорт
	
	НомерЗаказа = СокрЛП(ВходныеДанные.orderId);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.КодИдентификацииКлиента КАК КодИдентификацииКлиента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО (РеализацияТоваровУслуг.Номер = &НомерЗаказа)
	|			И РеализацияТоваровУслуг.Ссылка = ДополнительныеПараметрыЗаказа.Заказ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		CIC = "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		CIC = Выборка.КодИдентификацииКлиента;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("CIC", CIC);
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 08.04.2022 (Задача № 4777)<<<

//Асеев 27.09.2022 (Задача № 4903)>>>
Функция ОбновитьТарифицируемыйВесРейса(Рейс = Неопределено) Экспорт
	
	Попытка
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(800); 
	Исключение
		Возврат "Не удалось создать подключение: " + ОписаниеОшибки();
	КонецПопытки;
	
	Запрос = Новый Запрос;
	//Асеев 11.09.2024 (Задача № 5321)>>>
	//Асеев 11.09.2024 (Задача № 5321)<<<
	Если Рейс = Неопределено Тогда
		Сейчас = ТекущаяДата();
		ДатаДоставки = НачалоДня(Сейчас);
		//ДатаДоставки = ВыбДатаРейса;
		Запрос.УстановитьПараметр("ДатаРейса", ДатаДоставки);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументРейс.Ссылка КАК Рейс,
		|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
		|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор,
		|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт
		|ПОМЕСТИТЬ ВТ_Рейсы
		|ИЗ
		|	Документ.Рейс КАК ДокументРейс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, ) КАК ПривязкаМашинКРейсамСрезПоследних
		|		ПО ДокументРейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
		|ГДЕ
		|	ДокументРейс.ДатаРейса = &ДатаРейса
		|	И ДокументРейс.Проведен";
	Иначе
		Запрос.УстановитьПараметр("Рейс", Рейс);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Рейс.ДатаРейса КАК ДатаРейса
		|ИЗ
		|	Документ.Рейс КАК Рейс
		|ГДЕ
		|	Рейс.Ссылка = &Рейс";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ДатаДоставки = Выборка.ДатаРейса;
		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументРейс.Ссылка КАК Рейс,
		|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
		|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор,
		|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт
		|ПОМЕСТИТЬ ВТ_Рейсы
		|ИЗ
		|	Документ.Рейс КАК ДокументРейс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, ) КАК ПривязкаМашинКРейсамСрезПоследних
		|		ПО ДокументРейс.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
		|ГДЕ
		|	ДокументРейс.Ссылка = &Рейс";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" +
	"ВЫБРАТЬ
	|	ВТ_Рейсы.Рейс КАК Рейс,
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	РеализацияТоваровУслуг.ТарифнаяСеткаПартнера.КартаТарификацииПартнеров КАК КартаТарификацииПартнеров,
	|	АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних.СхемаЗонТарификацииПартнеров КАК СхемаЗонТарификации
	|ПОМЕСТИТЬ ВТ_РасчетЯндекс
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО РейсЗаказы.Ссылка = ВТ_Рейсы.Рейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеСхемыЗонКартТарификацииПартнеров.СрезПоследних КАК АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних
	|			ПО РеализацияТоваровУслуг.ТарифнаяСеткаПартнера.КартаТарификацииПартнеров = АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних.КартаКонструктораКарт
	|		ПО (НЕ РейсЗаказы.УдаленИзРейса)
	|			И РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|			И (РеализацияТоваровУслуг.ТарифнаяСеткаПартнера.МетодОпределенияЗоныТарификации = ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмКартЯндекс))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Рейсы.Рейс КАК Рейс,
	|	ДополнительныеПараметрыЗаказа.Доставка КАК Доставка,
	|	ДополнительныеПараметрыЗаказа.Доставка.Номер КАК НомерДоставки,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Наименование КАК Адрес,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.АдресИзЯндекса КАК АдресИзЯндекса,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Москва КАК Москва,
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	ПараметрыТарифаЗаказаСрезПоследних.КатегорияДоставки КАК КатегорияДоставки,
	|	ВТ_Рейсы.Транспорт КАК Транспорт,
	|	ПараметрыТарифаЗаказаСрезПоследних.ТарифнаяСетка КАК ТарифнаяСеткаПартнера
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	ВТ_Рейсы КАК ВТ_Рейсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО (НЕ РейсЗаказы.УдаленИзРейса)
	|				И РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ПО (РеализацияТоваровУслуг.Ссылка = ДополнительныеПараметрыЗаказа.Заказ)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних КАК ПараметрыТарифаЗаказаСрезПоследних
	|			ПО (РеализацияТоваровУслуг.Ссылка = ПараметрыТарифаЗаказаСрезПоследних.Заказ)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|			ПО РейсЗаказы.Заказ = ВТ_РасчетЯндекс.Реализация
	|		ПО ВТ_Рейсы.Рейс = РейсЗаказы.Ссылка
	|ГДЕ
	|	ВТ_РасчетЯндекс.Реализация ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	ТарифныеСеткиДоступныеЗоныТарификации.Зона КАК ЗонаТарификации,
	|	ТарифныеСеткиДоступныеЗоныТарификации.Ссылка.КлассификаторТарификации КАК КлассификаторТарификации,
	|	новаМестнаяДоставка.Ссылка КАК Доставка,
	|	ГруппыРайоновРайоны.Район КАК Район
	|ПОМЕСТИТЬ ВТДоступныеЗоныТарификации
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|			ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	|		ПО ВТ_Заказы.Реализация = РеализацияТоваровУслуг.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифныеСетки.ДоступныеЗоныТарификации КАК ТарифныеСеткиДоступныеЗоныТарификации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРайонов.Районы КАК ГруппыРайоновРайоны
	|			ПО ТарифныеСеткиДоступныеЗоныТарификации.Зона = ГруппыРайоновРайоны.Ссылка
	|		ПО ВТ_Заказы.ТарифнаяСеткаПартнера = ТарифныеСеткиДоступныеЗоныТарификации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДоступныеЗоныТарификации.Реализация КАК Реализация,
	|	ВТДоступныеЗоныТарификации.КлассификаторТарификации КАК КлассификаторТарификации,
	|	ВТДоступныеЗоныТарификации.ЗонаТарификации КАК ЗонаТарификации
	|ПОМЕСТИТЬ ВТ_ЗоныДоставки
	|ИЗ
	|	ВТДоступныеЗоныТарификации КАК ВТДоступныеЗоныТарификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаРайоныАдресов КАК новаРайоныАдресов
	|		ПО ВТДоступныеЗоныТарификации.Доставка.ТочкаПрибытия.Адрес = новаРайоныАдресов.Адрес
	|			И ВТДоступныеЗоныТарификации.КлассификаторТарификации = новаРайоныАдресов.Классификатор
	|			И ВТДоступныеЗоныТарификации.Район = новаРайоныАдресов.Район
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Рейс КАК Рейс,
	|	ВТ_Заказы.Доставка КАК Доставка,
	|	ВТ_Заказы.НомерДоставки КАК НомерДоставки,
	|	ВТ_Заказы.Адрес КАК Адрес,
	|	ВТ_Заказы.АдресИзЯндекса КАК АдресИзЯндекса,
	|	ВТ_Заказы.Москва КАК Москва,
	|	ВТ_Заказы.Реализация КАК Реализация,
	|	ВТ_Заказы.Транспорт КАК Транспорт,
	|	ВЫБОР
	|		КОГДА ВТ_ЗоныДоставки.ЗонаТарификации ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ВТ_Заказы.ТарифнаяСеткаПартнера.КлассификаторТарификации.ЗонаТарификацииПриНепривязанномАдресе = ЗНАЧЕНИЕ(Справочник.ГруппыРайонов.ПустаяСсылка)
	|						ТОГДА ВТ_Заказы.ТарифнаяСеткаПартнера.КлассификаторТарификации.ЗонаТарификацииПриНепривязанномАдресе
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_Заказы.Реализация.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж)
	|								ТОГДА ВЫБОР
	|										КОГДА ВТ_Заказы.Москва
	|											ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыРайонов.Москва)
	|										ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГруппыРайонов.ЗаМкад)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГруппыРайонов.КАД_30)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ЗоныДоставки.ЗонаТарификации
	|	КОНЕЦ КАК Зона,
	|	ВТ_Заказы.КатегорияДоставки КАК КатегорияДоставки,
	|	ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмНова) КАК МетодОпределенияЗоныТарификации,
	|	ВТ_Заказы.ТарифнаяСеткаПартнера КАК ТарифнаяСеткаПартнера,
	|	ЛОЖЬ КАК ЗонаНеОпределена
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗоныДоставки КАК ВТ_ЗоныДоставки
	|		ПО ВТ_Заказы.Реализация = ВТ_ЗоныДоставки.Реализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_РасчетЯндекс.Рейс,
	|	ДополнительныеПараметрыЗаказа.Доставка,
	|	ДополнительныеПараметрыЗаказа.Доставка.Номер,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Наименование,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.АдресИзЯндекса,
	|	ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Москва,
	|	ВТ_РасчетЯндекс.Реализация,
	|	ВТ_Рейсы.Транспорт,
	|	ЕСТЬNULL(ГруппыРайоновЗоныТарификацииПартнеров.Ссылка, ВТ_РасчетЯндекс.КартаТарификацииПартнеров.ЗонаТарификацииПриНепривязанномАдресе),
	|	ПараметрыТарифаЗаказаСрезПоследних.КатегорияДоставки,
	|	ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмКартЯндекс),
	|	ПараметрыТарифаЗаказаСрезПоследних.ТарифнаяСетка,
	|	ГруппыРайоновЗоныТарификацииПартнеров.Ссылка ЕСТЬ NULL
	|ИЗ
	|	ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_РасчетЯндекс.Реализация = ДополнительныеПараметрыЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО ВТ_РасчетЯндекс.Рейс = ВТ_Рейсы.Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних КАК ПараметрыТарифаЗаказаСрезПоследних
	|		ПО ВТ_РасчетЯндекс.Реализация = ПараметрыТарифаЗаказаСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_РасчетЯндекс.Реализация КАК Реализация,
	|			ВТ_РасчетЯндекс.КартаТарификацииПартнеров КАК КартаТарификацииПартнеров,
	|			ЗоныТарификацииПартнеровСрезПоследних.ЗонаТарификации.НомерЗоны КАК НомерЗоны
	|		ИЗ
	|			ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗоныТарификацииПартнеров.СрезПоследних(
	|						,
	|						(Заказ, СхемаЗонТарификации) В
	|							(ВЫБРАТЬ
	|								ВТ_РасчетЯндекс.Реализация КАК Реализация,
	|								ВТ_РасчетЯндекс.СхемаЗонТарификации КАК СхемаЗонТарификации
	|							ИЗ
	|								ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс)) КАК ЗоныТарификацииПартнеровСрезПоследних
	|				ПО ВТ_РасчетЯндекс.Реализация = ЗоныТарификацииПартнеровСрезПоследних.Заказ) КАК ВЗ_ЗоныТарификацииЗаказов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРайонов.ЗоныТарификацииПартнеров КАК ГруппыРайоновЗоныТарификацииПартнеров
	|			ПО ВЗ_ЗоныТарификацииЗаказов.НомерЗоны = ГруппыРайоновЗоныТарификацииПартнеров.НомерЗоныТарификации
	|				И ВЗ_ЗоныТарификацииЗаказов.КартаТарификацииПартнеров = ГруппыРайоновЗоныТарификацииПартнеров.Ссылка.КартаТарификацииПартнеров
	|		ПО ВТ_РасчетЯндекс.Реализация = ВЗ_ЗоныТарификацииЗаказов.Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.Рейс КАК Рейс,
	|	ВТ_Итог.Доставка КАК Доставка,
	|	ВТ_Рейсы.Транспорт.НомерГосударственнойРегистрации КАК НомерМашины,
	|	ВТ_Итог.НомерДоставки КАК НомерДоставки,
	|	ВТ_Итог.Адрес КАК Адрес,
	|	ВТ_Итог.АдресИзЯндекса КАК АдресИзЯндекса,
	|	ВТ_Итог.Москва КАК Москва,
	|	ВТ_Рейсы.Транспорт КАК Машина,
	|	ВТ_Итог.Реализация КАК Реализация,
	|	ВЫРАЗИТЬ(ВТ_Итог.Рейс КАК Документ.Рейс).РейсМестнойДоставки.Номер КАК НомерРейса,
	|	ВТ_Рейсы.Водитель.Наименование КАК ВодительНаименование,
	|	ВТ_Рейсы.Экспедитор.Наименование КАК ЭкспедиторНаименование,
	|	ВЫРАЗИТЬ(ВТ_Итог.Рейс КАК Документ.Рейс).НомерПалетты КАК Маршрут,
	|	1 КАК Кол,
	|	ВЫБОР
	|		КОГДА ВТ_Итог.КатегорияДоставки.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.КГТ)
	|			ТОГДА 1
	|	КОНЕЦ КАК КГТ,
	|	ВЫБОР
	|		КОГДА ВТ_Итог.КатегорияДоставки.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.МГТ)
	|			ТОГДА 1
	|	КОНЕЦ КАК МГТ,
	|	ВЫБОР
	|		КОГДА ВТ_Итог.КатегорияДоставки.Родитель = ЗНАЧЕНИЕ(Справочник.КатегорииДоставки2014.СГТ)
	|			ТОГДА 1
	|	КОНЕЦ КАК СГТ,
	|	ВТ_Рейсы.Транспорт КАК Транспорт,
	|	ЕСТЬNULL(ПолигоныМаршрутизацииЗаказовСрезПоследних.ПолигонМаршрутизации.Порядок, ""БЗ"") КАК ПолигонМаршрутизацииПорядок,
	|	ВТ_Итог.Зона КАК Зона,
	|	ВТ_Итог.Зона.КодТарифа КАК КодТарифа,
	|	ВТ_Итог.МетодОпределенияЗоныТарификации КАК МетодОпределенияЗоныТарификации,
	|	ВТ_Итог.ТарифнаяСеткаПартнера КАК ТарифнаяСеткаПартнера,
	|	ВТ_Итог.ЗонаНеОпределена КАК ЗонаНеОпределена
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолигоныМаршрутизацииЗаказов.СрезПоследних КАК ПолигоныМаршрутизацииЗаказовСрезПоследних
	|		ПО ВТ_Итог.Реализация = ПолигоныМаршрутизацииЗаказовСрезПоследних.Заказ
	|			И (ПолигоныМаршрутизацииЗаказовСрезПоследних.СхемаМаршрутизации В (&СхемаМаршрутизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
	|		ПО ВТ_Итог.Рейс = ВТ_Рейсы.Рейс
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРейса,
	|	НомерМашины,
	|	Реализация";
	
	Запрос.Текст = ТекстЗапроса;
	
	КонецДняДатаДоставки = КонецДня(ДатаДоставки);
	
	АктивныеСхемы = Новый Массив;		
	АктивныеСхемы.Добавить(ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Справочники.РегиональныеТерминалы.МоскваСтриж, КонецДняДатаДоставки));
	АктивныеСхемы.Добавить(ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Справочники.РегиональныеТерминалы.СПбСтриж, КонецДняДатаДоставки));
	Запрос.УстановитьПараметр("СхемаМаршрутизации", АктивныеСхемы);
	
	ТабЗаказовМашин = Запрос.Выполнить().Выгрузить();
	КолонкиТаблицы = ТабЗаказовМашин.Колонки;
	КолонкиТаблицы.Добавить("НомерРТУ");
	
	МассивПараметров = Новый Массив;
	МассивНомеровЗаказов = новый Массив;
	//Асеев 11.09.2024 (Задача № 5321)>>>
	МассивЗаказовОшибкаЗоныЯндекс = Новый Массив;
	//Асеев 11.09.2024 (Задача № 5321)<<<
	Стр2 = "DECLARE @t TOrderTrip   ";
	
	СтрWho = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
	
	Для Каждого СтрокаЗаказ Из ТабЗаказовМашин Цикл
	//Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(СтрокаЗаказ.Доставка) Тогда
			Продолжить;
		КонецЕСли;	
		
		#Область ОпределениеSetOrderCars
		
		НомерДоставки = СтрЗаменить(СокрЛП(СтрокаЗаказ.НомерДоставки), "abc", "");
		НомерДоставки = СтрЗаменить(НомерДоставки, "def", "");
		
		СтрокаЗаказ.НомерРТУ = НомерДоставки;
		
		Если МассивНомеровЗаказов.Найти(НомерДоставки) = Неопределено Тогда			
			МассивНомеровЗаказов.Добавить(НомерДоставки);			
		КонецЕсли;
		
		//Асеев 11.09.2024 (Задача № 5321)>>>
		Если СтрокаЗаказ.ЗонаНеОпределена Тогда
			МассивЗаказовОшибкаЗоныЯндекс.Добавить(СтрокаЗаказ.Реализация);
		КонецЕсли;
		//Асеев 11.09.2024 (Задача № 5321)<<<
		
		Если ЗначениеЗаполнено(СтрокаЗаказ.АдресИзЯндекса) Тогда
			Адрес = СтрокаЗаказ.АдресИзЯндекса;
		Иначе
			Адрес = СтрокаЗаказ.Адрес;
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Address", ?(Адрес="NULL", "NULL", "'" + СтрЗаменить(Адрес, "'", "") + "'"));
		ПараметрыЗапроса.Вставить("Car", СокрЛП(СтрокаЗаказ.НомерМашины));
		ПараметрыЗапроса.Вставить("DeliveryDate", ДатаДоставки);
		ПараметрыЗапроса.Вставить("IsRegion", Формат(СтрокаЗаказ.КодТарифа, "ЧН=0; ЧГ="));
		ПараметрыЗапроса.Вставить("OrderId", НомерДоставки);
		ПараметрыЗапроса.Вставить("Who", СтрWho);
		
		МассивПараметров.Добавить(ПараметрыЗапроса);
		
		#КонецОбласти
		
		#Область ОпределениеOrderTrip

		Если ЗначениеЗаполнено(СтрокаЗаказ.НомерМашины) Тогда
			Стр2 = Стр2 + "
			|INSERT INTO @t ([orderId],[tripId],[car],[fio1],[fio2]) VALUES (" + НомерДоставки + "," + Формат(Число(СтрокаЗаказ.НомерРейса), "ЧГ=") + ",'" + СтрокаЗаказ.НомерМашины + "','" + СокрЛП(СтрокаЗаказ.ВодительНаименование) + "', '"+СтрокаЗаказ.ЭкспедиторНаименование+"')";
		КонецЕсли;

		#КонецОбласти

	КонецЦикла;
	
	//Асеев 11.09.2024 (Задача № 5321)>>>
	Если МассивЗаказовОшибкаЗоныЯндекс.Количество() Тогда
		ОтправитьПисьмоОшибкаЗоныЯндекс(МассивЗаказовОшибкаЗоныЯндекс, "МаршрутизацияЗаказовСервер.ОбновитьТарифицируемыйВесРейса");
	КонецЕсли;
	//Асеев 11.09.2024 (Задача № 5321)<<<
	
	Рез = "";

	Если МассивПараметров.Количество()=0 Тогда
		Возврат "Отсутствуют рейсы";
	Иначе	
		Рез = ОтправитьДанныеПоМашинамРейса(Стр2, МассивПараметров, МассивНомеровЗаказов, ПодключениеКМагазину, ДатаДоставки, ТабЗаказовМашин);			
	КонецЕсли;	
	
	Возврат Рез;
	
	
КонецФункции

Функция ОтправитьДанныеПоМашинамРейса(Стр2, МассивПараметров = Неопределено, МассивНомеровЗаказов = Неопределено, ПодключениеКМагазину, ДатаДоставки, ТабЗаказовМашин) Экспорт // Ранее ВыгрузитьМашину()
		
	Попытка		
		
		Если Не МассивПараметров = Неопределено тогда
			Если МассивПараметров.Количество() > 0 Тогда
				
				ПараметрыЗапроса = Новый Структура;		
				ПараметрыЗапроса.Вставить("orderCars", МассивПараметров);
				СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(Перечисления.ВидыЗапросовWEBСервис.SetOrderCarsResult, ПараметрыЗапроса,,,Истина);
				Если НЕ СтруктураВозврата.Успешно Тогда
					ВызватьИсключение СтруктураВозврата.ОписаниеОшибки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не МассивНомеровЗаказов = Неопределено Тогда
			ТарификацияУслугСервер.УстановитьКомпонентыТарифовИзАдминки(МассивНомеровЗаказов);
	    КонецЕсли;
		
		//Асеев 09.09.2020 (Задача № 4205)>>>
		//добавлен КонтекстВызова
		Евген.ЗапросКИнтернетМагазину(Стр2 + "
		|EXEC import_setTripFrom1C @t
		|", ПодключениеКМагазину, 800,, "ОбщийМодуль.МаршрутизацияЗаказовСервер.ОтправитьДанныеПоМашинамРейса");	
		//Асеев 09.09.2020 (Задача № 4205)<<<
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		МасОш = Новый Массив;
		МасОш.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасОш.Добавить("m.aseev@strizh-logistic.ru");
		lem.ОтправитьСообщение(МасОш, "Ошибка выгрузки данных в админку", "При выгрузке данных в админку/ОтправитьДанныеПоМашинамРейса произошла ошибка!" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
		
		Возврат "Ошибка выгрузки машин/ОтправитьДанныеПоМашинамРейса. " + ТекстОшибки;
		
	КонецПопытки;	
	
	Попытка
					
		УстановитьПараметрыЗаказовРейсаПослеВыгрузки(МассивНомеровЗаказов, ДатаДоставки, ТабЗаказовМашин, ПодключениеКМагазину);
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		МасОш = Новый Массив;
		МасОш.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасОш.Добавить("m.aseev@strizh-logistic.ru");
		lem.ОтправитьСообщение(МасОш, "Ошибка при загрузке данных тарификации из админки", "При загрузке данных тарификации из админки/ОтправитьДанныеПоМашинамРейса произошла ошибка!" + Символы.ПС + "Текст ошибки: " + ОписаниеОшибки());

		Возврат "Ошибка загрузки данных тарификации из админки/ОтправитьДанныеПоМашинамРейса. " + ТекстОшибки;	
		
	КонецПопытки;
	
		
	Возврат "";
	
КонецФункции

Процедура УстановитьПараметрыЗаказовРейсаПослеВыгрузки(МассивНомеровЗаказов, ДатаДоставки, ТабЗаказовМашин, ПодключениеКМагазину)
	
	Мас = СтрСоединить(МассивНомеровЗаказов,",");
	
	Ткст = "select dbo.mv_orders.orderIDStr, dbo.mv_orders.serviceDC, dbo.mv_orders.serviceDCClean, dbo.mv_orders.typeDelivery, dbo.mv_orders.tariffCategoryId, dbo.mv_orders.chargeableWeight from dbo.mv_orders where dbo.mv_orders.orderID in (" + Мас + ")";
	Рез_ = ЗапросКИнтернетМагазинуПоВыгрузкеМашин(Ткст, ПодключениеКМагазину);
	Рез = Евген.СоздатьТаблицу(Рез_, "orderIDStr, serviceDC_Ч, serviceDCClean_Ч, typeDelivery_Ч, tariffCategoryId_Ч, chargeableWeight_Ч");
	
	//+Степанов Задача № 3833
	//Асеев 11.09.2024 (Задача № 5321)>>>
	ТаблицаПараметровТарифовЗаказов = ТарификацияУслугСервер.СоздатьТаблицуПараметровТарифовЗаказов();
	//Асеев 11.09.2024 (Задача № 5321)<<<
	//-Степанов Задача № 3833
	
	Для Каждого Тек Из Рез Цикл
		
		НайР = ТабЗаказовМашин.Найти(Тек.orderIDStr, "НомерРТУ");
		НайД = НайР.Реализация;
		
		
		Р_Бр = "";
		
		Если ЗначениеЗаполнено(НайР.ТарифнаяСеткаПартнера) Тогда
			Р_Бр = Справочники.РасчетныеБрейки.НайтиПоРеквизиту("КодБрейка", Тек.tariffCategoryId_Ч,, НайР.ТарифнаяСеткаПартнера);
		КонецЕсли;
		
		СтрокаПараметровТарифа = ТаблицаПараметровТарифовЗаказов.Добавить();
		СтрокаПараметровТарифа.Заказ = НайД;
		СтрокаПараметровТарифа.УслугиСД = ?(Тек.serviceDC_Ч = 0, -1, Тек.serviceDC_Ч);
		СтрокаПараметровТарифа.УслугиСДЧистые = ?(Тек.serviceDCClean_Ч = 0, -1, Тек.serviceDCClean_Ч);
		//Если НайР <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайР.Зона) Тогда
			СтрокаПараметровТарифа.ЗонаТарификации = НайР.Зона;
			//Асеев 11.09.2024 (Задача № 5321)>>>
			СтрокаПараметровТарифа.МетодОпределенияЗоныТарификации = НайР.МетодОпределенияЗоныТарификации;
			//Асеев 11.09.2024 (Задача № 5321)<<<
		КонецЕсли;
		//КонецЕсли;
		СтрокаПараметровТарифа.КатегорияДоставки = Тек.typeDelivery_Ч;
		Если ЗначениеЗаполнено(Р_Бр) Тогда
			СтрокаПараметровТарифа.РасчетныйБрейк = Р_Бр;	
		КонецЕсли;	
		
		
		// Установка категории для расчета ЗП
		Попытка
			//mas.УстановитьКатегориюДляРасчетаЗП(Д.Ссылка);
			mas.УстановитьКатегориюДляРасчетаЗП(НайД);
		Исключение	
		КонецПопытки;		
		
		НаборТВ = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
		НаборТВ.Отбор.Заказ.Установить(Найд);
		НаборТВ.Прочитать();
		Если НаборТВ.Количество() Тогда
			НаборТВ[0].ТарифицируемыйВес = Тек.chargeableWeight_Ч;
		КонецЕсли;
		НаборТВ.Записать();
	КонецЦикла;	
	
	//+Степанов Задача № 3833
	Если ТаблицаПараметровТарифовЗаказов.Количество() Тогда
		ТарификацияУслугСервер.ЗаписатьПараметрыТарифаЗаказа(ТаблицаПараметровТарифовЗаказов);
	КонецЕсли;	
	//-Степанов Задача № 3833
	
КонецПроцедуры
//Асеев 27.09.2022 (Задача № 4903)<<<

//Асеев 12.12.2022 (Задача № 4947)>>>
Процедура РегламентСозданиеЗаборныхЗаявокПоВН() Экспорт
	
	Сейчас = ТекущаяДата();
	Сегодня = НачалоДня(Сейчас);
	Если ДеньНедели(Сегодня) = 7 Тогда
		//четверг 20:00
		НачалоПериода = Сегодня - 3 * 86400 + 20 * 3600;
	Иначе
		//вчера 20:00
		НачалоПериода = Сегодня - 86400 + 20 * 3600;
	КонецЕсли;
	//сегодня 20:00
	ОкончаниеПериода = Сегодня + 20 * 3600 - 1;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК Возврат
	|ПОМЕСТИТЬ ВТ_Возвраты
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСозданияЗаявокНаЗаборПоВН КАК ИсторияСозданияЗаявокНаЗаборПоВН
	|		ПО ВозвратТоваровПоставщику.Ссылка = ИсторияСозданияЗаявокНаЗаборПоВН.ВозвратнаяНакладная
	|			И (ИсторияСозданияЗаявокНаЗаборПоВН.ЗаявкаСозданаУспешно)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ВозвратТоваровПоставщику.Контрагент.Код В (""Shop_961"")
	|	И ИсторияСозданияЗаявокНаЗаборПоВН.ВозвратнаяНакладная ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Возвраты.Возврат КАК Возврат
	|ПОМЕСТИТЬ ВТ_ПодготовленныеВозвраты
	|ИЗ
	|	ВТ_Возвраты КАК ВТ_Возвраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовСкладскогоУчетаВозвратовПоставщику.СрезПоследних(
	|				,
	|				ВозвратПоставщику В
	|					(ВЫБРАТЬ
	|						ВТ_Возвраты.Возврат КАК Возврат
	|					ИЗ
	|						ВТ_Возвраты КАК ВТ_Возвраты)) КАК ИсторияСтатусовСкладскогоУчетаВозвратовПоставщикуСрезПоследних
	|		ПО ВТ_Возвраты.Возврат = ИсторияСтатусовСкладскогоУчетаВозвратовПоставщикуСрезПоследних.ВозвратПоставщику
	|			И (ИсторияСтатусовСкладскогоУчетаВозвратовПоставщикуСрезПоследних.СтатусСкладскогоУчета = ЗНАЧЕНИЕ(Справочник.СтатусыСкладскогоУчета.ПодготовленКВозврату))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Возврат,
	|	СУММА(ВозвратТоваровПоставщикуТовары.Реализация.ОбъёмЗаказа) КАК Объем
	|ПОМЕСТИТЬ ВТ_ДанныеЗаказов
	|ИЗ
	|	ВТ_ПодготовленныеВозвраты КАК ВТ_ПодготовленныеВозвраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ПО ВТ_ПодготовленныеВозвраты.Возврат = ВозвратТоваровПоставщикуТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК ВозвратнаяНакладная,
	|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ВТ_ДанныеЗаказов.Объем, 0) КАК Объем,
	|	ВозвратТоваровПоставщику.СкладМагазина.Наименование КАК НаименованиеСклада,
	|	ВозвратТоваровПоставщику.СкладМагазина.КонтактнаяИнформация КАК КонтактнаяИнформация,
	|	ВозвратТоваровПоставщику.СкладМагазина.ТелефонныйНомерПриЗабореТовара КАК КонтактныйТелефон,
	|	ВозвратТоваровПоставщику.СкладМагазина.Регион.Код КАК КодРегиона,
	|	ВозвратТоваровПоставщику.СкладМагазина.Адрес КАК Адрес,
	|	ВозвратТоваровПоставщику.Номер КАК Номер,
	|	ВозвратТоваровПоставщику.СкладМагазина.ИдентификаторНаправления КАК ИдентификаторСклада
	|ИЗ
	|	ВТ_ПодготовленныеВозвраты КАК ВТ_ПодготовленныеВозвраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ПО ВТ_ПодготовленныеВозвраты.Возврат = ВозвратТоваровПоставщику.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗаказов КАК ВТ_ДанныеЗаказов
	|		ПО ВТ_ПодготовленныеВозвраты.Возврат = ВТ_ДанныеЗаказов.Возврат
	|ИТОГИ ПО
	|	Контрагент";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СодержимоеОтбивки = Новый Массив;
	
	DesiredDeliveryDate = Формат(Сегодня + 86400, "ДФ=yyyy-MM-dd");
	
	МассивЗаказаItems = Новый Массив;
	
	//СтруктураЗаказаItems = Новый Структура;
	//СтруктураЗаказаItems.Вставить("Article",     "1111");
	//СтруктураЗаказаItems.Вставить("Name",        "Товар");
	//СтруктураЗаказаItems.Вставить("Count",       1);            
	//СтруктураЗаказаItems.Вставить("Price",       0);
	//
	//СтруктураЗаказаItems.Вставить("Barcode",     "");
	//СтруктураЗаказаItems.Вставить("NDS",         -1);
	//
	//МассивЗаказаItems.Добавить(СтруктураЗаказаItems);
	
	ПроксиSync = ИнтеграцияССервисомSync.СоздатьПроксиSync();
	
	ВыборкаКонтрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл
		
		СтруктураДоступаSync = ИнтеграцияССервисомSync.СтруктураДоступаSync(ВыборкаКонтрагент.Контрагент);
		
		SettingId = СтруктураДоступаSync.SettingID;
		
		Выборка = ВыборкаКонтрагент.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеЗаказа = Новый Структура("SelfDelivery,SettingId,PayType,DesiredDeliveryDate,Items", 2, SettingId, 1, DesiredDeliveryDate, МассивЗаказаItems);
			ДанныеЗаказа.Вставить("StockId", Выборка.ИдентификаторСклада);
			ДанныеЗаказа.Вставить("OrderIdImport", "Возврат_" + СтрЗаменить(СокрЛП(Выборка.НаименованиеСклада), " ", "_"));
			ДанныеЗаказа.Вставить("Address", Новый Структура("FullAddress", Выборка.Адрес));
			ДанныеЗаказа.Вставить("TimeDeliveryFrom", "9:00");
			ДанныеЗаказа.Вставить("TimeDeliveryTo", "18:00");
			//ДанныеЗаказа.Вставить("Weight", 1);
			ДанныеЗаказа.Вставить("Volume", Выборка.Объем);
			//ДанныеЗаказа.Вставить("PiecesOfFreight", 1);
			ДанныеЗаказа.Вставить("User", Новый Структура("Phone,FIO,Email", Выборка.КонтактныйТелефон, Выборка.КонтактнаяИнформация, ""));
			ДанныеЗаказа.Вставить("DeliveryPlaceId", Выборка.КодРегиона);
			ДанныеЗаказа.Вставить("SourcePlaceId", Выборка.КодРегиона);
			ДанныеЗаказа.Вставить("Comment", "Номер возвратной накладной - №" + Выборка.Номер);
			
			УспешноеВыполнение = Истина;
			ТекстОшибки = "";
			РезультатAPI = Неопределено;
			
			Попытка
				РезультатAPI = ИнтеграцияССервисомSync.RegisterOrderExtended_ВсеОшибки(ДанныеЗаказа, СтруктураДоступаSync, ПроксиSync);
			Исключение
				УспешноеВыполнение = Ложь;
				ТекстОшибки = ОписаниеОшибки();
				СодержимоеОтбивки.Добавить("По возвратной накладной " + Выборка.Номер + " ошибка вызова метода RegisterOrderExtended API: " + ТекстОшибки);
			КонецПопытки;
			
			Если УспешноеВыполнение Тогда
				Если ТипЗнч(РезультатAPI) = Тип("Массив") Тогда
					УспешноеВыполнение = Ложь;
					Если РезультатAPI.Количество() = 1 Тогда
						ТекстОшибки = РезультатAPI[0];
					Иначе
						ТекстОшибки = СтрСоединить(РезультатAPI, Символы.ПС);
					КонецЕсли;
					СодержимоеОтбивки.Добавить("По возвратной накладной " + Выборка.Номер + " ответ метода RegisterOrderExtended API:");
					СодержимоеОтбивки.Добавить(ТекстОшибки);
					РезультатAPI = Неопределено;
				ИначеЕсли РезультатAPI = Неопределено Тогда
					УспешноеВыполнение = Ложь;
					ТекстОшибки = "Номер заявки не определен";
					СодержимоеОтбивки.Добавить("По возвратной накладной " + Выборка.Номер + " " + ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ЗаписьРегистра = РегистрыСведений.ИсторияСозданияЗаявокНаЗаборПоВН.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Период = Сейчас;
			ЗаписьРегистра.ВозвратнаяНакладная = Выборка.ВозвратнаяНакладная;
			ЗаписьРегистра.НомерСозданнойЗаявкиНаЗабор = РезультатAPI;
			ЗаписьРегистра.ЗаявкаСозданаУспешно = УспешноеВыполнение;
			ЗаписьРегистра.ТекстОшибки = ТекстОшибки;
			ЗаписьРегистра.Записать();
		КонецЦикла;
	КонецЦикла;
	
	Если СодержимоеОтбивки.Количество() Тогда
		ТекстПисьма = СтрСоединить(СодержимоеОтбивки, Символы.ПС);
		
		МассивПолучателей = Новый Массив;
		МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
		Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
			МассивПолучателей.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
		КонецЕсли;
		
		ТекстОшибки = "";
		ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
		ОбработкаUnion.ОтправитьEMAIL_HTTP(МассивПолучателей, "Создание заявок на забор по возвратным накладным " + Формат(Сегодня, "ДФ=dd.MM.yyyy"), ТекстПисьма,, "Сервер 1С",, ТипТекстаПочтовогоСообщения.ПростойТекст,, ТекстПисьма,,,, Ложь);
	КонецЕсли;
	
КонецПроцедуры	
//Асеев 12.12.2022 (Задача № 4947)<<<

Функция ПользователюДоступнаРаботаСРММаршрутизациейЭкипажей() Экспорт
	Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РабочееМестоМаршрутизацииЭкипажей");
КонецФункции

