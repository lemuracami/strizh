Функция СоздатьЧекНаОснованииЧека(ИсходныйЧек, ТипКассовогоЧека, Оператор) Экспорт
	
	ВозвратныйЧек = ИсходныйЧек.Скопировать();
	ВозвратныйЧек.ТипКассовогоЧека = ТипКассовогоЧека;
	ВозвратныйЧек.ЧекПробитНаККМ = Ложь;
	ВозвратныйЧек.НомерЧекаККМ = 0;
	ВозвратныйЧек.ЧекПробитОшибочно = Ложь;
	ВозвратныйЧек.НомерСменыККМ = 0;
	ВозвратныйЧек.Ответственный = Оператор;
	ВозвратныйЧек.ЧекОснование = ИсходныйЧек.Ссылка;
	
	Если ТипКассовогоЧека = Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда
		Струк = Новый Структура;
		Струк.Вставить("Сумма", 0);
		
		НайСтроки = ВозвратныйЧек.Товары.НайтиСтроки(Струк);
		
		Для Каждого Тек Из НайСтроки Цикл
			ВозвратныйЧек.Товары.Удалить(Тек);
		КонецЦикла;	
	КонецеСли;	
	
	//========lem начало 14.07.2017 13:50:02==================
	ВозвратныйЧек.Дата = ТекущаяДата();
	ВозвратныйЧек.ЧекПробитНаККМ = Ложь;
	//========lem окончание 14.07.2017 13:50:08==================	
	ВозвратныйЧек.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ВозвратныйЧек.Ссылка;		

КонецФункции

Функция ПолучитьТЗПоМассивуЧеков(МассивЧеков) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЧекиККМ", МассивЧеков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Чек,
	|	ЧекККМ.КассаККМ КАК ККМ,
	|	ЧекККМ.КассаККМ.ККМИнтегрированаВСерверККМ КАК ККМИнтегрированаВСерверККМ,
	|	ЧекККМ.КассаККМ.Терминал.СерверККМ КАК СерверККМ,
	|	"""" КАК СерверККТ,
	|	1 КАК НомерУстройства,
	|	1 КАК Кол
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка В(&ЧекиККМ)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПробитьЧекиПоФЗ54(ТаблицаЧеков, Основание) Экспорт 
	Ответ = "";
	Отказ = Ложь;
	ТаблицаККМ = ТаблицаЧеков.Скопировать();
	ТаблицаККМ.Свернуть("ККМ, ККМИнтегрированаВСерверККМ, СерверККМ, СерверККТ, НомерУстройства", "Кол");
	Для Каждого ТекККМ Из ТаблицаККМ Цикл
		Если ТекККМ.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		//Если ТекККМ.ККМИнтегрированаВСерверККМ Тогда//тест
			Ответ = РаботаСКассовымСерверомСервер.ЗахватитьККМНаСервереККМ(ТекККМ.ККМ, ТекККМ.СерверККМ, Основание);
			Если Не Ответ.Результат Тогда
				Сообщить("ККМ " + Строка(ТекККМ.ККМ) + " не может быть захвачена для печати чеков! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		//ТекККМ.СерверККТ = ККМ_ФЗ_54.ИнициализироватьСерверККТ();
		//ККМ_ФЗ_54.ДобавитьУстройствоATOL(ТекККМ.СерверККТ, ТекККМ.ККМ);
	КонецЦикла;

	
	Для Каждого ТекЧек Из ТаблицаЧеков Цикл
		НайККМ = ТаблицаККМ.Найти(ТекЧек.ККМ);
		Чек = ТекЧек.Чек.ПолучитьОбъект();
		СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(ТекЧек.ККМ);
		Чек.ПровестиИРаспечататьЧекНаСервере(Ответ, Отказ, Неопределено,, СерверККТ, 1);
		//Чек.ПровестиИРаспечататьЧек(Ответ, Отказ, Неопределено,, НайККМ.СерверККТ, 1);
		Если Отказ Тогда
			Сообщить("Чек № " + СокрЛП(Чек.Номер) + ", ошибка пробития: " + Ответ, СтатусСообщения.Важное);
		КонецеСли;	
	КонецЦикла;

	Для Каждого ТекККМ Из ТаблицаККМ Цикл
		Если ТекККМ.ККМИнтегрированаВСерверККМ И Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		//Если ТекККМ.ККМИнтегрированаВСерверККМ Тогда//тест
			Ответ = РаботаСКассовымСерверомСервер.ОтпуститьККМНаСервереККМ(ТекККМ.ККМ, ТекККМ.СерверККМ, Основание);
			Если Не Ответ.Результат Тогда
				Сообщить("ККМ " + Строка(ТекККМ.ККМ) + " не может быть освобождена для печати чеков! Описание проблемы: " + Ответ.Описание, СтатусСообщения.ОченьВажное);
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		ТекККМ.СерверККТ = Неопределено;
	КонецЦикла;
КонецПроцедуры	

Процедура ВыгрузитьФискальныеДанныеЧековВАдминку() Экспорт
	
	//Асеев 29.08.2022 (Задача № 4879)>>>
	Узел = ПланыОбмена.ОбменСАдминкой.НайтиПоКоду("Adminka");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т_ЧекККМ.Ссылка КАК Чек,
	|	РеализацияТоваровУслуг.Номер КАК OrderId,
	|	Т_ЧекККМ.Номер КАК ReceptNumber1C,
	|	ДополнительныеПараметрыЧеков.НомерДокумента КАК FsDocNumber,
	|	ДополнительныеПараметрыЧеков.ФПД КАК FsFiscalSignDoc,
	|	ДополнительныеПараметрыЧеков.ФД КАК FsFiscalNumberDoc,
	|	ДополнительныеПараметрыЧеков.ДатаЧека КАК FsReceiptDate,
	|	ДополнительныеПараметрыЧеков.СуммаЧека КАК FsReceiptTotal,
	|	ДополнительныеПараметрыЧеков.ТипЧека КАК FsReceiptType,
	|	ДополнительныеПараметрыЧеков.ФН.КодФН КАК FaNumber
	|ИЗ
	|	Документ.ЧекККМ.Изменения КАК ЧекККМИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК Т_ЧекККМ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО Т_ЧекККМ.Реализация = РеализацияТоваровУслуг.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЧеков КАК ДополнительныеПараметрыЧеков
	|			ПО Т_ЧекККМ.Ссылка = ДополнительныеПараметрыЧеков.ЧекККМ
	|		ПО (ЧекККМИзменения.Узел = &Узел)
	|			И ЧекККМИзменения.Ссылка = Т_ЧекККМ.Ссылка
	|			И (Т_ЧекККМ.Проведен)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонOrderReceipt = Новый ФиксированнаяСтруктура("OrderId,ReceptNumber1C,FsDocNumber,FsFiscalSignDoc,FsFiscalNumberDoc,FsReceiptDate,FsReceiptTotal,FsReceiptType,FaNumber");
	
	МассивOrderReceipts = Новый Массив;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураOrderReceipt = Новый Структура(ШаблонOrderReceipt);
		ЗаполнитьЗначенияСвойств(СтруктураOrderReceipt, Выборка,, "OrderId,ReceptNumber1C");
		СтруктураOrderReceipt.OrderId = Число(Выборка.OrderId);
		СтруктураOrderReceipt.ReceptNumber1C = Число(Выборка.ReceptNumber1C);
		
		МассивOrderReceipts.Добавить(СтруктураOrderReceipt);
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура("orderReceipts", МассивOrderReceipts);
	
	ВидМетода = Перечисления.ВидыЗапросовWEBСервис.uploadReceiptsResult;
	
	ПолученныеДанные = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(ВидМетода, ПараметрыЗапроса);
	Если ПолученныеДанные.Успешно Тогда
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Выборка.Чек);
		КонецЦикла;
	КонецЕсли;
	//Асеев 29.08.2022 (Задача № 4879)<<<
	
КонецПроцедуры	


