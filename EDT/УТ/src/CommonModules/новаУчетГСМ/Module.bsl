// Функция возвращает выборку остатков ГСМ для баков, заданных в списке
//
// Параматры:
//  Дата   - дата, на которую требуется получить выборку остатков
//  мсБаки - <Массив> - массив баков транспорта, для которых требуется сформировать выборку
//
// Возвращаемое значение:
//  <ВыборкаИзРезультатаЗапроса>
//
Функция ПолучитьВыборкуОстатковГСМ(МоментВремени, мсБаки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Баки",мсБаки);
	Запрос.УстановитьПараметр("Дата",МоментВремени);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	новаОстаткиГСМОстатки.Бак,
	|	СУММА(новаОстаткиГСМОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(новаОстаткиГСМОстатки.СтоимостьОстаток) КАК СтоимостьОстаток
	|ИЗ
	|	РегистрНакопления.новаОстаткиГСМ.Остатки(&Дата, Бак В (&Баки)) КАК новаОстаткиГСМОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	новаОстаткиГСМОстатки.Бак"
	;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Функция возвращает выборку остатков ГСМ для баков, заданных в списке на момент,
// предшедствующий указанному путевому листу за вычетом заправок под этот лист
//
// Параматры:
//  ПутевойЛист - объект документа Путевой лист
//  мсБаки - <Массив> - массив баков транспорта, для которых требуется сформировать выборку
//
// Возвращаемое значение:
//  <ВыборкаИзРезультатаЗапроса>
//
Функция ПолучитьВыборкуОстатковГСМДляПутевки(ПутевойЛист, мсБаки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Баки",мсБаки);
	Запрос.УстановитьПараметр("Дата",Новый Граница(ПутевойЛист.Дата,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПутевойЛист",ПутевойЛист.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(новаОстаткиГСМ.Количество) КАК Количество,
	|	новаОстаткиГСМ.Бак
	|ПОМЕСТИТЬ ЗаправкиПодПутевку
	|ИЗ
	|	РегистрНакопления.новаОстаткиГСМ КАК новаОстаткиГСМ
	|ГДЕ
	|	новаОстаткиГСМ.Бак В(&Баки)
	|	И новаОстаткиГСМ.ПутевойЛист = &ПутевойЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	новаОстаткиГСМ.Бак
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаОстаткиГСМОстатки.Бак,
	|	СУММА(новаОстаткиГСМОстатки.КоличествоОстаток - ЕстьNULL(ЗаправкиПодПутевку.Количество,0)) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.новаОстаткиГСМ.Остатки(&Дата, Бак В (&Баки)) КАК новаОстаткиГСМОстатки
	|		Левое СОЕДИНЕНИЕ ЗаправкиПодПутевку КАК ЗаправкиПодПутевку
	|		ПО новаОстаткиГСМОстатки.Бак = ЗаправкиПодПутевку.Бак
	|
	|СГРУППИРОВАТЬ ПО
	|	новаОстаткиГСМОстатки.Бак"
	;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Функция возвращает таблицу путевых листов автомобиля за указанный период
//
// Параматры:
//  Транспорт - автомобиль, путевые листы которого требуется получить
//  ДатаНачалаПоиска    - начало периода поиска
//  ДатаОкончанияПоиска - конец периода поиска
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьТаблицуПутевыхЛистов(Транспорт, ДатаНачалаПоиска, ДатаОкончанияПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Транспорт",Транспорт);
	Запрос.УстановитьПараметр("ДатаНач",ДатаНачалаПоиска);
	Запрос.УстановитьПараметр("ДатаКон",ДатаОкончанияПоиска);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	новаПутевойЛист.Ссылка КАК ПутевойЛист,
	|	новаРейсМестнойДоставки.Водитель КАК Водитель
	|ИЗ
	|	БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.новаПутевойЛист КАК новаПутевойЛист
	|		ПО новаРейсМестнойДоставки.ПутевойЛист = новаПутевойЛист.Ссылка
	|ГДЕ
	|	(НЕ новаПутевойЛист.ПометкаУдаления)
	|	И новаПутевойЛист.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И новаРейсМестнойДоставки.Транспорт = &Транспорт
	|
	|УПОРЯДОЧИТЬ ПО
	|	новаПутевойЛист.Дата УБЫВ"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция расчитывает норму расхода гсм
//
// Параматры:
//  Документ - документ, на основании которого производится расчет нормы
//  Нормы    - структура норм
//
// Возвращаемое значение:
//  <Число>
//
Функция РасчитатьНормуРасходаГСМ(ПутевойЛистОбъект, Нормы) Экспорт
	
	Норма  = 0;
	
	// Расчет нормы на пробег по линейной норме
	Пробег = ПолучитьРеквизитРейсаПутевогоЛиста(ПутевойЛистОбъект.Ссылка, "РасстояниеФакт");
	Пробег = ?(Пробег=Неопределено,0,Пробег);
	Норма  = Норма  + ?(Нормы.ЛинейнаяНорма=0,0,Пробег / 100 * Нормы.ЛинейнаяНорма);
	
	// Расчет нормы на перевозимый груз
	Норма  = Норма  + ПутевойЛистОбъект.КоличествоКилометроТонн * Нормы.НормаНаИзменениеСобственногоВеса / 100;
	
	// Расчет нормы на прицепы как перевозимый груз
	ВесПрицепов = 0;
	Если ЗначениеЗаполнено(ПутевойЛистОбъект.Прицеп1) Тогда
		ВесПрицепов = ВесПрицепов + ПутевойЛистОбъект.Прицеп1.СобственныйВес;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛистОбъект.Прицеп2) Тогда
		ВесПрицепов = ВесПрицепов + ПутевойЛистОбъект.Прицеп2.СобственныйВес;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛистОбъект.Прицеп3) Тогда
		ВесПрицепов = ВесПрицепов + ПутевойЛистОбъект.Прицеп3.СобственныйВес;
	КонецЕсли;
	
	Если ВесПрицепов <> 0 Тогда
		Норма  = Норма + ВесПрицепов * Пробег / 100 * Нормы.НормаНаИзменениеСобственногоВеса;	
	КонецЕсли;
	                                                 
	// Расчет нормы на запуск                                        
	Норма  = Норма + Нормы.НормаНаЗапуск;	
	
	// Расчет нормы на моточасы  
	Норма  = Норма + ПутевойЛистОбъект.КоличествоМоточасов * Нормы.НормаНаМоточас;	
	
	// Расчет нормы на операции                            
	Норма  = Норма + ПутевойЛистОбъект.КоличествоОпераций * Нормы.НормаНаОперацию;	
	                                                                
	// Расчет нормы на ездки
	Норма  = Норма + ПутевойЛистОбъект.КоличествоЕздок * Нормы.НормаНаЕздку;	
	
	Возврат Норма;
	
КонецФункции
                                                                                                
// Возвращает реквизит путевого листа
//
// Параметры:
//  ПутевойЛист  <ДокументОбъект.новаПутевойЛист>:
//  ИмяРеквизита <Строка>
//
// Возвращаемое значение:
//  <Произвольный>
//
Функция ПолучитьРеквизитРейсаПутевогоЛиста(ПутевойЛист, ИмяРеквизита) Экспорт            
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПутевойЛист",ПутевойЛист);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	новаРейсМестнойДоставки."+ИмяРеквизита+" 
	|ИЗ
	|	БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	|ГДЕ
	|	новаРейсМестнойДоставки.ПутевойЛист = &ПутевойЛист"
	;
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат рез.Выгрузить()[0][ИмяРеквизита];
	КонецЕсли;
	
КонецФункции

// Вывод предупреждений пользователю о логической незаполненности элемента транспорта в части учета ГСМ
//
// Параметры: 
//  ТранспортОбъект - объект справочника новаТранспорт
//
Процедура АнализПолнотыДанныхГСМТранспорта(Транспорт, ПредупреждатьОбОтсутствииБакаДляНормыМодели = Истина) Экспорт 
	#Если Клиент Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(новаНормыРасходаГСМСрезПоследних.ГСМ) КАК ГСМНорма,
	|	ПРЕДСТАВЛЕНИЕ(БакиТранспорта.ОсновнойГСМ) КАК ГСМБак
	|ИЗ
	|	РегистрСведений.новаНормыРасходаГСМ.СрезПоследних(
	|			&Дата,
	|			ВЫБОР
	|				КОГДА &ИндивидуальныеНормы = Истина
	|					ТОГДА МаркаТранспорт = &Транспорт
	|				ИНАЧЕ МаркаТранспорт = &Модель
	|			КОНЕЦ) КАК новаНормыРасходаГСМСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			новаБакиТранспорта.Ссылка КАК Ссылка,
	|			новаБакиТранспорта.ОсновнойГСМ КАК ОсновнойГСМ
	|		ИЗ
	|			Справочник.новаБакиТранспорта КАК новаБакиТранспорта
	|		ГДЕ
	|			новаБакиТранспорта.Владелец = &Транспорт) КАК БакиТранспорта
	|		ПО новаНормыРасходаГСМСрезПоследних.ГСМ = БакиТранспорта.ОсновнойГСМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	новаНормыРасходаГСМСрезПоследних.ГСМ"
	;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("Транспорт",Транспорт);
	Запрос.УстановитьПараметр("Модель",Транспорт.Марка);
	Запрос.УстановитьПараметр("ИндивидуальныеНормы",Транспорт.ИндивидуальныеНормы);
	
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	ТабРезультат.Свернуть("ГСМБак,ГСМНорма","");
	Для Каждого СтрокаРезультат Из ТабРезультат Цикл
		Если СтрокаРезультат.ГСМНорма = NULL Тогда
			Сообщить(" У транспорта есть баки с топливом "+СтрокаРезультат.ГСМБак+" для которого не введены нормы расхода ГСМ на текущую дату!");
		ИначеЕсли СтрокаРезультат.ГСМБак = NULL Тогда
			Если Транспорт.ИндивидуальныеНормы Или ПредупреждатьОбОтсутствииБакаДляНормыМодели Тогда
				Сообщить(" Для " + ?(Транспорт.ИндивидуальныеНормы,"","марки ")+"транспорта есть введены нормы расхода для топлива "+СтрокаРезультат.ГСМНорма+", но нет введенных баков для этого вида ГСМ!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	#КонецЕсли 
КонецПроцедуры

// Находит в структуре и возвращает объект типа Документ.новаПутевойЛистОбъект
Функция ПолучитьКлючЗначениеПутевойЛистИзРасширенияФормы(Форма) Экспорт
	
	Для Каждого КлючЗначение Из Форма.Расширение Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("ДокументОбъект.новаПутевойЛист") Тогда
			Возврат КлючЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции