

//**** Общие процедуры и функции ****//


//Устанавливает ссылку объекту КСЛ объекта 1С (учитывая записан объект 1С или нет)
//
//  Параметры:
//    ОбъектКСЛ - <COMОбъект> объект КСЛ
//    Объект1С - <СправочникОбъект, ДокументОбъект, БизнесПроцессОбъект> объект 1С
//
Процедура УстановитьИд(ОбъектКСЛ, Объект1С) Экспорт
	
	Если Объект1С.ЭтоНовый() Тогда
		ОбъектКСЛ.Ид = Строка(Объект1С.ПолучитьСсылкуНового().УникальныйИдентификатор());
	Иначе
		ОбъектКСЛ.Ид = Строка(Объект1С.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

//Копирует поля Код, Наименование, ПометкаУдаления и если необходимо, то ЭтоГруппа,
//идентификатор родителя объекта 1С в объект КСЛ
//
//  Параметры:
//    ОбъектКСЛ - <COMОбъект> объект КСЛ
//    Объект1С - <СправочникОбъект> объект 1С
//
Процедура СохранитьСправочник(ОбъектКСЛ, Объект1С) Экспорт
	
	мдОбъект1С = Объект1С.Метаданные();
	
	Если мдОбъект1С.ДлинаКода <> 0 Тогда
		ОбъектКСЛ.Код = Объект1С.Код;
	Иначе
		ОбъектКСЛ.Код = "";
	КонецЕсли;
	
	Если мдОбъект1С.ДлинаНаименования <> 0 Тогда
		ОбъектКСЛ.Наименование = Объект1С.Наименование;
	Иначе
		ОбъектКСЛ.Наименование = "";
	КонецЕсли;
	
	ОбъектКСЛ.ПометкаУдаления = Объект1С.ПометкаУдаления;
	
	Если мдОбъект1С.Иерархический Тогда
		ОбъектКСЛ.ЭтоГруппа = Объект1С.ЭтоГруппа;
		ОбъектКСЛ.ИдРодителя = СокрЛП(Объект1С.Родитель.УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

//Копирует поля Код, Наименование, ПометкаУдаления и если необходимо, то ЭтоГруппа,
//идентификатор родителя объекта КСЛ в объект 1С
//
//  Параметры:
//    ОбъектКСЛ - <COMОбъект> объект КСЛ
//    Объект1С - <СправочникОбъект> объект 1С
//
Процедура ЗагрузитьСправочник(ОбъектКСЛ, Объект1С) Экспорт
	
	мдОбъект1С = Объект1С.Метаданные();
	
	Если мдОбъект1С.ДлинаКода <> 0 Тогда
		Объект1С.Код = ОбъектКСЛ.Код;
	КонецЕсли;
	
	Если мдОбъект1С.ДлинаНаименования <> 0 Тогда
		Объект1С.Наименование = ОбъектКСЛ.Наименование;
	КонецЕсли;
	
	Объект1С.ПометкаУдаления = ОбъектКСЛ.ПометкаУдаления;
	
	Если мдОбъект1С.Иерархический Тогда
		Объект1С.Родитель = Справочники[мдОбъект1С.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектКСЛ.ИдРодителя));
	КонецЕсли;
	
КонецПроцедуры

//Копирует поля Номер, Дата, Проведен, ПометкаУдаления объекта 1С в объект КСЛ
//
//  Параметры:
//    ОбъектКСЛ - <COMОбъект> объект КСЛ
//    Объект1С - <ДокументОбъект, БизнесПроцессОбъект> объект 1С
//
Процедура СохранитьДокумент(ОбъектКСЛ, Объект1С) Экспорт
	
	ОбъектКСЛ.Номер = Объект1С.Номер;
	ОбъектКСЛ.МоментВремени = Объект1С.Дата;
	ОбъектКСЛ.Активность = Объект1С.Проведен;
	ОбъектКСЛ.ПометкаУдаления = Объект1С.ПометкаУдаления;
	
КонецПроцедуры

//Копирует поля Номер, МоментВремени, Активность, ПометкаУдаления объекта 1С в объект КСЛ
//
//  Параметры:
//    ОбъектКСЛ - <COMОбъект> объект КСЛ
//    Объект1С - <ДокументОбъект, БизнесПроцессОбъект> объект 1С
//
Процедура ЗагрузитьДокумент(ОбъектКСЛ, Объект1С) Экспорт
	
	Объект1С.Номер = ОбъектКСЛ.Номер;
	Объект1С.Дата = ОбъектКСЛ.МоментВремени;
	Объект1С.ПометкаУдаления = ОбъектКСЛ.ПометкаУдаления;
	Объект1С.Проведен = ОбъектКСЛ.Активность;
	
КонецПроцедуры

//Загрузка изменений с сервера КСЛ
//
//  Параметры:
//    КСЛ - <COMОбъект>, клиент КСЛ
//
Процедура ЗагрузитьИзмененияСервера(КСЛ) Экспорт
	
	НовыеОбъекты = КСЛ.Сервер_ДоступКСерверу.ПолучитьИзмененияОбъектовСинхронно(Константы.новаВремяСинхронизацииКСЛ.Получить());
	
	МаксВремяИзменения = '00010101';
	
	КоличествоОбъектов = НовыеОбъекты.Количество - 1;
	Для ъ = 0 По КоличествоОбъектов Цикл
		
		#Если Клиент Тогда
			Состояние("Загрузка" + Строка(ъ));
		#КонецЕсли
		
		НовыйОбъект = НовыеОбъекты.Получить(ъ);
		
		ЗагрузитьИзменение(НовыйОбъект);
		
		Если НовыйОбъект.ВремяИзменения > МаксВремяИзменения Тогда
			МаксВремяИзменения = НовыйОбъект.ВремяИзменения;
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеОбъекты.Количество > 0  Тогда
		Константы.новаВремяСинхронизацииКСЛ.Установить(МаксВремяИзменения);
	КонецЕсли;
	
КонецПроцедуры

//Возвращает объект справочника заполненный данныим из КСЛ
//
//  Параметры:
//    Менеджер - <СправочникМенеджер> - менеджер справочника 1С
//    Объект - <COMОбъект> объект КСЛ
//
Функция ПолучитьСправочник1С(Менеджер, Объект)
	
	Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.Ид));
	обСправочник = Ссылка.ПолучитьОбъект();
	Если обСправочник = Неопределено Тогда
		Если Объект.ЭтоГруппа Тогда
			обСправочник = Менеджер.СоздатьГруппу();
		Иначе
			обСправочник = Менеджер.СоздатьЭлемент();
		КонецЕсли;
		обСправочник.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	ЗагрузитьСправочник(Объект, обСправочник); 
	
	Возврат обСправочник;
	
КонецФункции

//Возвращает объект документа, бизнес-процеса заполненный данныим из КСЛ
//
//  Параметры:
//    Менеджер - <ДокументМенеджер, БизнесПроцессМенеджер> - менеджер документа, бизнес-процесса 1С
//    Объект - <COMОбъект> объект КСЛ
//
Функция ПолучитьДокумент1С(Менеджер, Объект)
	
	Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.Ид));
	обДокумент = Ссылка.ПолучитьОбъект();
	Если обДокумент = Неопределено Тогда
		обДокумент = Менеджер.СоздатьДокумент();
		обДокумент.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	ЗагрузитьДокумент(Объект, обДокумент); 
	
	Возврат обДокумент;
	
КонецФункции

//Снхронизирует данные 1С и КСЛ
//
//  Параметры:
//    НовыйОбъект - <COMОбъект> объект КСЛ
//
Процедура ЗагрузитьИзменение(НовыйОбъект)
	
	Объект = НовыйОбъект.Объект;
	ТипОбъекта = Объект.ТипОбъекта();
	
	Если ТипОбъекта = "УТЛ.Мониторинг.Терминалы.Терминал" Тогда
		об1С = ПолучитьСправочник1С(Справочники.новаТерминалы, Объект);
		
		об1С.IMEI = Объект.IMEI;
		об1С.ВерсияПО = Объект.ВерсияПО;
		об1С.Настраиваемый = Объект.Настраиваемый;
		об1С.ПриниматьНастройкиОтТерминала = Объект.ПриниматьНастройкиОтТерминала;
		об1С.Настройки = Справочники.новаНастройкиТерминалов.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.Настройки.Ид));
		
		об1С.ОбменДанными.Загрузка = Истина;
		об1С.Записать();
		
	ИначеЕсли ТипОбъекта = "УТЛ.Мониторинг.Терминалы.НастройкиТерминала" Тогда
		об1С = ПолучитьСправочник1С(Справочники.новаНастройкиТерминалов, Объект);
		
        об1С.Основные = Объект.Основные;
        об1С.ВремяНачала = Объект.ВремяНачала;
        об1С.ВремяОкончания = Объект.ВремяОкончания;
        об1С.ИнтервалОтправки = '00010101' + (Объект.ИнтервалОтправки / 1000);
        об1С.ИнтервалПолучения = '00010101' + (Объект.ИнтервалПолучения / 1000);
        об1С.ИнтервалХранения = Объект.ИнтервалХранения / 1000;
        об1С.Сервер = Объект.Сервер;
        об1С.Порт = Объект.Порт;
        об1С.ПортGPS = Объект.ПортGPS;
        об1С.СкоростьПортаGPS = Объект.СкоростьПортаGPS;
        об1С.Пароль = Объект.Пароль;
		
		об1С.ОбменДанными.Загрузка = Истина;
		об1С.Записать();
		
	ИначеЕсли ТипОбъекта = "УТЛ.Мониторинг.Транспорт" Тогда
		об1С = ПолучитьСправочник1С(Справочники.новаТранспорт, Объект);
		
		об1С.ОбменДанными.Загрузка = Истина;
		об1С.Записать();
		
	ИначеЕсли ТипОбъекта = "УТЛ.Мониторинг.Терминалы.ЗаписьИсторииРасположенияТерминала" Тогда
		об1С = ПолучитьДокумент1С(Документы.новаРасположениеТерминала, Объект);
		
		об1С.Терминал = Справочники.новаТерминалы.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.Терминал.Ид));
		об1С.НачалоПериода = Объект.НачалоПериода;
		Если Объект.Расположение.Тип = "Транспорт" Тогда
			об1С.Расположение = Справочники.новаТранспорт.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.Расположение.Ид));
		Иначе
			об1С.Расположение = Справочники.новаСклады.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.Расположение.Ид));
		КонецЕсли;
		
		об1С.ОбменДанными.Загрузка = Истина;
		об1С.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

//Добавление ссылки на объект в очередь обмена
//
//  Параметры:
//    Ссылка - <СправочникСсылка, ДокументСсылка, БизнесПроцессСсылка> ссылка на измененный объект
//    Действие - <ПеречислениеСсылка.новаРежимСинхронизацииОбъектов> указывает было изменение или удаление
//
Процедура ДобавитьОбъектВОчередьОбмена(Объект, Действие) Экспорт
	
	Если не Объект.ЭтоНовый() Тогда
		Ссылка = Объект.Ссылка;
	Иначе
		Ссылка = Объект.ПолучитьСсылкуНового();
	КонецЕсли;
	
	МЗ = РегистрыСведений.новаОчередьОбъектовДляОбмена.СоздатьМенеджерЗаписи();
	МЗ.Ссылка = Ссылка;
	МЗ.Действие = Действие;
	
	Попытка
		МЗ.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка в строке 272", УровеньЖурналаРегистрации.Ошибка, , , "Ошибка в модуле новаОбменКСЛ.ДобавитьОбъектВОчередьОбмена(" + Объект + ", " + Действие + ")");
		МЗ.Записать();
	КонецПопытки;
	
КонецПроцедуры

//Удаление ссылки на объект из очереди обмена
//
//  Параметры:
//    Ссылка - <СправочникСсылка, ДокументСсылка, БизнесПроцессСсылка> ссылка на синхронизированный объект
//
Процедура УдалитьОбъектИзОчередиОбмена(Объект) Экспорт
	
	Если не Объект.ЭтоНовый() Тогда
		Ссылка = Объект.Ссылка;
	Иначе
		Ссылка = Объект.ПолучитьСсылкуНового();
	КонецЕсли;
	
	МЗ = РегистрыСведений.новаОчередьОбъектовДляОбмена.СоздатьМенеджерЗаписи();
	МЗ.Ссылка = Ссылка;
	
	МЗ.Удалить();
	
КонецПроцедуры

//Проверка наличия не синхронизированных объектов 1С и КСЛ
//
//  Возвращаемое значение:
//    <Булево> Истина - необходимо обменться с сервером
//
Функция НеобходимоСинхронизировать1СКСЛ() Экспорт
	
	Результат = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    Ссылка
	|  ИЗ
	|    РегистрСведений.новаОчередьОбъектовДляОбмена
	|");
	
	НетОшибок = Ложь;
	НомерПопытки = 1;
	Пока Не НетОшибок И НомерПопытки < 5 Цикл
		Попытка
			Результат = не Запрос.Выполнить().Пустой();
			НетОшибок = Истина;
		Исключение
		КонецПопытки;
		НомерПопытки = НомерПопытки + 1;
	КонецЦикла;
	
	Если не Результат Тогда
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			КСЛ = новаСерверКСЛ.Подключиться();
		#КонецЕсли
		
		НовыеОбъекты = КСЛ.Сервер_ДоступКСерверу.ПолучитьИзмененияОбъектовСинхронно(Константы.новаВремяСинхронизацииКСЛ.Получить());
		Результат = (НовыеОбъекты.Количество > 0);
		
		#Если не Клиент Тогда
			новаСерверКСЛ.Отключиться(КСЛ);
		#КонецЕсли
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Синхронизация объектов 1С КСЛ
//
//  Параметры:
//    КСЛ - <COMОбъект>, клиент КСЛ
//
Процедура ВыполнитьСинхронизацию(КСЛ = Неопределено) Экспорт
	
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		Если КСЛ = Неопределено Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ЗагрузитьИзмененияСервера(КСЛ);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    ВЫБОР
	|      КОГДА Ссылка ССЫЛКА Справочник.новаТочкиДоставки
	|        ТОГДА ""Точки доставки""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаТранспорт
	|        ТОГДА ""Транспорт""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаТерминалы
	|        ТОГДА ""Терминалы""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаНастройкиТерминалов
	|        ТОГДА ""Настройки терминалов""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаВодители
	|        ТОГДА ""Водители""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаСообщенияАРМВодителя
	|        ТОГДА ""Сообщения АРМ водителя""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаСклады
	|        ТОГДА ""Склады""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаГеорайоны
	|        ТОГДА ""Георайоны""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаКонтрагенты
	|        ТОГДА ""Контрагенты""
	|      КОГДА Ссылка ССЫЛКА Документ.новаРасположениеТерминала
	|        ТОГДА ""Расположение терминала""
	|      КОГДА Ссылка ССЫЛКА БизнесПроцесс.новаМестнаяДоставка
	|        ТОГДА ""Местная доставка""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаРегионы
	|        ТОГДА ""Регионы""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаНаселенныеПункты
	|        ТОГДА ""Населенные пункты""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаУлицы
	|        ТОГДА ""Улицы""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаАдреса
	|        ТОГДА ""Адреса""
	|      КОГДА Ссылка ССЫЛКА Справочник.новаТипыТочекИнтереса
	|        ТОГДА ""Типы точек интереса""
	|      ИНАЧЕ
	|        ""Неизвестно""
	|    КОНЕЦ КАК Раздел
	|    ,Ссылка
	|    ,Действие
	|  ИЗ
	|    РегистрСведений.новаОчередьОбъектовДляОбмена КАК новаОчередьОбъектовДляОбмена
	|");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Раздел = "Точки доставки" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьТочкуДоставки(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьТочкуДоставки(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Транспорт" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьТранспорт(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьТранспорт(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Терминалы" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьТерминал(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьТерминал(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Настройки терминалов" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьНастройкиТерминала(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьНастройкиТерминала(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Водители" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьВодителя(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьВодителя(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Сообщения АРМ водителя" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьСообщениеАРМВодителя(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьСообщениеАРМВодителя(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Склады" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьСклад(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьСклад(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Георайоны" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьГеоРайон(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьГеоРайон(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Контрагенты" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьКонтрагента(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьКонтрагента(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Расположение терминала" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьРасположениеТерминала(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьРасположениеТерминала(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Местная доставка" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьДоставку(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьДоставку(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Регионы" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьРегион(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьРегион(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Населенные пункты" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьНаселенныйПункт(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьНаселенныйПункт(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Улицы" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьУлицу(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьУлицу(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Адреса" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьАдрес(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьАдрес(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
				
			ИначеЕсли Выборка.Раздел = "Типы точек интереса" Тогда
				Если Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить Тогда
					новаОбменКСЛ.СохранитьТипТочкиИнтереса(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				ИначеЕсли Выборка.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Удалить Тогда
					новаОбменКСЛ.УдалитьТипТочкиИнтереса(Выборка.Ссылка.ПолучитьОбъект(), КСЛ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


//**** Обмен справочниками ****//


//** Адреса **//

//Сохранение

//Синхронизация Регионов
//
Процедура СохранитьРегион(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_Регион();
		УстановитьИд(ОбъектКСЛ, Источник);
		ОбъектКСЛ.Загрузить();
		
		СохранитьСправочник(ОбъектКСЛ, Источник);
		
		ОбъектКСЛ.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Синхронизация Населеннвх пунктов
//
Процедура СохранитьНаселенныйПункт(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_НаселенныйПункт();
		УстановитьИд(ОбъектКСЛ, Источник);
		ОбъектКСЛ.Загрузить();
		
		СохранитьСправочник(ОбъектКСЛ, Источник);
		ОбъектКСЛ.Регион.ИД = Строка(Источник.Владелец.УникальныйИдентификатор());
		
		ОбъектКСЛ.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Синхронизация Улиц
//
Процедура СохранитьУлицу(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_Улица();
		УстановитьИд(ОбъектКСЛ, Источник);
		ОбъектКСЛ.Загрузить();
		
		СохранитьСправочник(ОбъектКСЛ, Источник);
		ОбъектКСЛ.НаселенныйПункт.ИД = Строка(Источник.Владелец.УникальныйИдентификатор());
		
		ОбъектКСЛ.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Синхронизация Адресов
//
Процедура СохранитьАдрес(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ЭллипсоидWGS84 = КСЛ.МодельДанных_ЭллипсоидWGS84();
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_Адрес();
		УстановитьИд(ОбъектКСЛ, Источник);
		ОбъектКСЛ.Загрузить();
		
		СохранитьСправочник(ОбъектКСЛ, Источник);
		ОбъектКСЛ.Регион.ИД = Строка(Источник.Регион.УникальныйИдентификатор());
		ОбъектКСЛ.НаселенныйПункт.ИД = Строка(Источник.НаселенныйПункт.УникальныйИдентификатор());
		ОбъектКСЛ.Улица.ИД = Строка(Источник.Улица.УникальныйИдентификатор());
		ОбъектКСЛ.Дом = Источник.Дом;
		ОбъектКСЛ.Корпус = Источник.Корпус;
		ОбъектКСЛ.Широта = Источник.Широта;
		ОбъектКСЛ.Долгота = Источник.Долгота;
		ОбъектКСЛ.ВходитВКлассификатор = Источник.ВходитВКлассификатор;
		ОбъектКСЛ.КоординатыЗаданыВручную = не Источник.ВходитВКлассификатор;
		ОбъектКСЛ.ХэшКоординат = ЭллипсоидWGS84.ПолучитьХэшКоординат(Источник.Широта, Источник.Долгота);
		
		ОбъектКСЛ.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Синхронизация Типа точки интереса
//
Процедура СохранитьТипТочкиИнтереса(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_ТипТочкиИнтереса();
		УстановитьИд(ОбъектКСЛ, Источник);
		ОбъектКСЛ.Загрузить();
		
		СохранитьСправочник(ОбъектКСЛ, Источник);
		
		ОбъектКСЛ.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удалить

//Синхронизация Регионов
//
Процедура УдалитьРегион(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_Регион();
		УстановитьИд(ОбъектКСЛ, Источник);
		
		ОбъектКСЛ.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//Синхронизация Населеннвх пунктов
//
Процедура УдалитьНаселенныйПункт(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_НаселенныйПункт();
		УстановитьИд(ОбъектКСЛ, Источник);
		
		ОбъектКСЛ.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//Синхронизация Улиц
//
Процедура УдалитьУлицу(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_Улица();
		УстановитьИд(ОбъектКСЛ, Источник);
		
		ОбъектКСЛ.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//Синхронизация Адресов
//
Процедура УдалитьАдрес(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_Адрес();
		УстановитьИд(ОбъектКСЛ, Источник);
		
		ОбъектКСЛ.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//Синхронизация Типа точки интереса
//
Процедура УдалитьТипТочкиИнтереса(Источник, КСЛ = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Синхронизирован")
	     и Источник.ДополнительныеСвойства.Синхронизирован Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ОбъектКСЛ = КСЛ.Геоинформация_АдресныйКлассификатор_ТипТочкиИнтереса();
		УстановитьИд(ОбъектКСЛ, Источник);
		
		ОбъектКСЛ.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(Источник);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(Источник, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//** Точки доставки **//

//Запись точки доставки в КСЛ
//
//  Параметры:
//    обТочкаДоставки - <СправочникОбъект.новаТочкиДоставки> точка доставки для обмена
//
Процедура СохранитьТочкуДоставки(обТочкаДоставки, КСЛ = Неопределено) Экспорт
	
	Если обТочкаДоставки.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обТочкаДоставки.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обТочкаДоставки, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ТочкаДоставки = КСЛ.Геоинформация_ТочкиДоставки_ТочкаДоставки();
		УстановитьИд(ТочкаДоставки, обТочкаДоставки);
		ТочкаДоставки.Загрузить();
		
		СохранитьСправочник(ТочкаДоставки, обТочкаДоставки);
		
		ТочкаДоставки.Радиус = обТочкаДоставки.Радиус;
		ТочкаДоставки.Координаты.Широта = обТочкаДоставки.Адрес.Широта;
		ТочкаДоставки.Координаты.Долгота = обТочкаДоставки.Адрес.Долгота;
		
		ТочкаДоставки.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обТочкаДоставки);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обТочкаДоставки, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удаление точки доставки с КСЛ
//
Процедура УдалитьТочкуДоставки(обТочкаДоставки, КСЛ = Неопределено) Экспорт
	
	Если обТочкаДоставки.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обТочкаДоставки.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обТочкаДоставки, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		ТочкаДоставки = КСЛ.Геоинформация_ТочкиДоставки_ТочкаДоставки();
		УстановитьИд(ТочкаДоставки, обТочкаДоставки);
		
		ТочкаДоставки.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обТочкаДоставки);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обТочкаДоставки, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//** Транспорт **//

//Запись транспорта в КСЛ
//
Процедура СохранитьТранспорт(обТранспорт, КСЛ = Неопределено) Экспорт
	
	Если обТранспорт.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обТранспорт.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обТранспорт, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Транспорт = КСЛ.Мониторинг_Транспорт();
		УстановитьИд(Транспорт, обТранспорт);
		
		СохранитьСправочник(Транспорт, обТранспорт);
		
		Транспорт.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обТранспорт);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обТранспорт, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удаление транспорта с КСЛ
//
Процедура УдалитьТранспорт(обТранспорт, КСЛ = Неопределено) Экспорт
	
	Если обТранспорт.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обТранспорт.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обТранспорт, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Транспорт = КСЛ.Мониторинг_Транспорт();
		УстановитьИд(Транспорт, обТранспорт);
		
		Транспорт.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обТранспорт);
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обТранспорт, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//** Терминалы **//

//Запись терминала в КСЛ
//
Процедура СохранитьТерминал(обТерминал, КСЛ = Неопределено) Экспорт
	
	Если обТерминал.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обТерминал.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	КлиентСоздан = Ложь;
	
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		Если КСЛ = Неопределено Тогда
			КСЛ = новаСерверКСЛ.Подключиться();
			КлиентСоздан = Истина;
		КонецЕсли;
	#КонецЕсли

	Терминал = КСЛ.Мониторинг_Терминалы_Терминал();
	УстановитьИд(Терминал, обТерминал);
	
	СохранитьСправочник(Терминал, обТерминал);
	Терминал.IMEI = обТерминал.IMEI;
	Терминал.ВерсияПО = обТерминал.ВерсияПО;
	Терминал.Настраиваемый = обТерминал.Настраиваемый;
	Терминал.ПриниматьНастройкиОтТерминала = обТерминал.ПриниматьНастройкиОтТерминала;
	Терминал.Настройки.Ид = Строка(обТерминал.Настройки.УникальныйИдентификатор());
	
	Терминал.Сохранить();
	
	#Если не Клиент Тогда
		Если КлиентСоздан Тогда
			новаСерверКСЛ.Отключиться(КСЛ);
		КонецЕсли;
	#КонецЕсли
	
	УдалитьОбъектИзОчередиОбмена(обТерминал);
	
КонецПроцедуры

//Удалить терминал с КСЛ
//
Процедура УдалитьТерминал(обТерминал, КСЛ = Неопределено) Экспорт
	
	Если обТерминал.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обТерминал.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	КлиентСоздан = Ложь;
	
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		Если КСЛ = Неопределено Тогда
			КСЛ = новаСерверКСЛ.Подключиться();
			КлиентСоздан = Истина;
		КонецЕсли;
	#КонецЕсли

	Терминал = КСЛ.Мониторинг_Терминалы_Терминал();
	УстановитьИд(Терминал, обТерминал);
	
	Терминал.Удалить();
		
	#Если не Клиент Тогда
		Если КлиентСоздан Тогда
			новаСерверКСЛ.Отключиться(КСЛ);
		КонецЕсли;
	#КонецЕсли
	
	УдалитьОбъектИзОчередиОбмена(обТерминал);

КонецПроцедуры

//** Настройки терминалов **//

//Запись настроек терминала в КСЛ
//
Процедура СохранитьНастройкиТерминала(обНастройкиТерминала, КСЛ = Неопределено) Экспорт
	
	Если обНастройкиТерминала.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обНастройкиТерминала.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обНастройкиТерминала, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		НастройкиТерминала = КСЛ.Мониторинг_Терминалы_НастройкиТерминала();
		УстановитьИд(НастройкиТерминала, обНастройкиТерминала);
		
		СохранитьСправочник(НастройкиТерминала, обНастройкиТерминала);
        НастройкиТерминала.Основные = обНастройкиТерминала.Основные;
        НастройкиТерминала.ВремяНачала = обНастройкиТерминала.ВремяНачала;
        НастройкиТерминала.ВремяОкончания = обНастройкиТерминала.ВремяОкончания;
        НастройкиТерминала.ИнтервалОтправки = (обНастройкиТерминала.ИнтервалОтправки - '00010101') * 1000;
        НастройкиТерминала.ИнтервалПолучения = (обНастройкиТерминала.ИнтервалПолучения - '00010101') * 1000;
        НастройкиТерминала.ИнтервалХранения = обНастройкиТерминала.ИнтервалХранения * 1000;
        НастройкиТерминала.Сервер = обНастройкиТерминала.Сервер;
        НастройкиТерминала.Порт = обНастройкиТерминала.Порт;
        НастройкиТерминала.ПортGPS = обНастройкиТерминала.ПортGPS;
        НастройкиТерминала.СкоростьПортаGPS = обНастройкиТерминала.СкоростьПортаGPS;
        НастройкиТерминала.Пароль = обНастройкиТерминала.Пароль;
		
		НастройкиТерминала.Сохранить();
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обНастройкиТерминала, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удалить настройки терминала с КСЛ
//
Процедура УдалитьНастройкиТерминала(обНастройкиТерминала, КСЛ = Неопределено) Экспорт
	
	Если обНастройкиТерминала.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обНастройкиТерминала.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обНастройкиТерминала, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		НастройкиТерминала = КСЛ.Мониторинг_Терминалы_НастройкиТерминала();
		УстановитьИд(НастройкиТерминала, обНастройкиТерминала);
		
		НастройкиТерминала.Удалить();
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обНастройкиТерминала, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;

КонецПроцедуры

//** Водители **//

//Запись водителя в КСЛ
//
Процедура СохранитьВодителя(обВодитель, КСЛ = Неопределено) Экспорт
	
	Если обВодитель.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обВодитель.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обВодитель, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Водитель = КСЛ.Мониторинг_Водитель();
		УстановитьИд(Водитель, обВодитель);
		
		СохранитьСправочник(Водитель, обВодитель);
		
		Водитель.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обВодитель);
						
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обВодитель, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удалить водителя с КСЛ
//
Процедура УдалитьВодителя(обВодитель, КСЛ = Неопределено) Экспорт
	
	Если обВодитель.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обВодитель.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обВодитель, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Водитель = КСЛ.Мониторинг_Водитель();
		УстановитьИд(Водитель, обВодитель);
		
		Водитель.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обВодитель);
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обВодитель, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//** Сообщения АРМ водителя **//

//Запись сообщения АРМ водителя
//
Процедура СохранитьСообщениеАРМВодителя(обСообщение, КСЛ = Неопределено) Экспорт
	
	Если обСообщение.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обСообщение.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обСообщение, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Сообщение = КСЛ.Мониторинг_СообщениеАРМВодителя();
		УстановитьИд(Сообщение, обСообщение);
		
		СохранитьСправочник(Сообщение, обСообщение);
		
		Сообщение.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обСообщение);
		
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обСообщение, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удалить сообщение АРМ водителя
//
Процедура УдалитьСообщениеАРМВодителя(обСообщение, КСЛ = Неопределено) Экспорт
	
	Если обСообщение.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обСообщение.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обСообщение, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Сообщение = КСЛ.Мониторинг_СообщениеАРМВодителя();
		УстановитьИд(Сообщение, обСообщение);
		
		Сообщение.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обСообщение);
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обСообщение, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//** Склады **//

//Запись склада в КСЛ
//
Процедура СохранитьСклад(обСклад, КСЛ = Неопределено) Экспорт
	
	Если обСклад.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обСклад.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обСклад, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Склад = КСЛ.Доставка_Склад();
		УстановитьИд(Склад, обСклад);
		
		СохранитьСправочник(Склад, обСклад);
		
		Склад.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обСклад);
						
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обСклад, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удалить склада с КСЛ
//
Процедура УдалитьСклад(обСклад, КСЛ = Неопределено) Экспорт
	
	Если обСклад.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обСклад.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обСклад, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Склад = КСЛ.Доставка_Склад();
		УстановитьИд(Склад, обСклад);
		
		Склад.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обСклад);
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обСклад, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//** Георайоны **//

//Запись георайона в КСЛ
//
Процедура СохранитьГеоРайон(обГеоРайон, КСЛ = Неопределено) Экспорт
	
	Если обГеоРайон.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обГеоРайон.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обГеоРайон, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Геозона = КСЛ.Геоинформация_Геозоны_Геозона();
		УстановитьИд(Геозона, обГеоРайон);
		
		СохранитьСправочник(Геозона, обГеоРайон);
		
		Геозона.Цвет = КСЛ.ГрафическийИнтерфейс_Графика.ЦветВЧисло("64," + Строка(обГеоРайон.Цвет.Получить()));
		
		ТочкиГеозоны = Геозона.Точки;
		ТочкиГеозоны.Очистить();
		
		Для Каждого стрТочка Из обГеоРайон.Точки Цикл
			ТочкаГеозоны = КСЛ.Геоинформация_Геозоны_ТочкаГеозоны();
			ТочкаГеозоны.Координаты.Широта = стрТочка.Широта;
			ТочкаГеозоны.Координаты.Долгота = стрТочка.Долгота;
			
			ТочкиГеозоны.Добавить(ТочкаГеозоны);
		КонецЦикла;
		
		Геозона.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обГеоРайон);
						
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обГеоРайон, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удалить склада с КСЛ
//
Процедура УдалитьГеоРайон(обГеоРайон, КСЛ = Неопределено) Экспорт
	
	Если обГеоРайон.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обГеоРайон.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обГеоРайон, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Геозона = КСЛ.Геоинформация_Геозоны_Геозона();
		УстановитьИд(Геозона, обГеоРайон);
		
		Геозона.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обГеоРайон);

	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обГеоРайон, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//** Контрагенты **//

//Запись контрагента в КСЛ
//
Процедура СохранитьКонтрагента(обКонтрагент, КСЛ = Неопределено) Экспорт
	
	Если обКонтрагент.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обКонтрагент.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обКонтрагент, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Контрагент = КСЛ.Доставка_Контрагент();
		УстановитьИд(Контрагент, обКонтрагент);
		
		СохранитьСправочник(Контрагент, обКонтрагент);
		
		Контрагент.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обКонтрагент);

	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обКонтрагент, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удалить контрагента с КСЛ
//
Процедура УдалитьКонтрагента(обКонтрагент, КСЛ = Неопределено) Экспорт
	
	Если обКонтрагент.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обКонтрагент.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обКонтрагент, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Контрагент = КСЛ.Доставка_Контрагент();
		УстановитьИд(Контрагент, обКонтрагент);
		
		Контрагент.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обКонтрагент);
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обКонтрагент, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры


//**** Обмен документами ****//


//** Расположения терминалов **//

//Запись расположения терминала в КСЛ
//
Процедура СохранитьРасположениеТерминала(обРасположениеТерминала, КСЛ = Неопределено) Экспорт
	
	Если обРасположениеТерминала.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обРасположениеТерминала.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обРасположениеТерминала, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		ЗаписьИсторииРасположенияТерминала = КСЛ.Мониторинг_Терминалы_ЗаписьИсторииРасположенияТерминала();
		УстановитьИд(ЗаписьИсторииРасположенияТерминала, обРасположениеТерминала);
		
		СохранитьДокумент(ЗаписьИсторииРасположенияТерминала, обРасположениеТерминала);
		ЗаписьИсторииРасположенияТерминала.Активность = не обРасположениеТерминала.ПометкаУдаления;
		ЗаписьИсторииРасположенияТерминала.Терминал.Ид = Строка(обРасположениеТерминала.Терминал.УникальныйИдентификатор());
		ЗаписьИсторииРасположенияТерминала.НачалоПериода = обРасположениеТерминала.НачалоПериода;
		
		Если ТипЗнч(обРасположениеТерминала.Расположение) = Тип("СправочникСсылка.новаТранспорт") Тогда
			ЗаписьИсторииРасположенияТерминала.Расположение.Тип = "Транспорт";
		Иначе
			ЗаписьИсторииРасположенияТерминала.Расположение.Тип = "Склад";
		КонецЕсли;
		ЗаписьИсторииРасположенияТерминала.Расположение.Ид = Строка(обРасположениеТерминала.Расположение.УникальныйИдентификатор());
		
		ЗаписьИсторииРасположенияТерминала.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обРасположениеТерминала);
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обРасположениеТерминала, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удаление расположения терминала с КСЛ
//
Процедура УдалитьРасположениеТерминала(обРасположениеТерминала, КСЛ = Неопределено) Экспорт
	
	Если обРасположениеТерминала.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обРасположениеТерминала.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обРасположениеТерминала, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		ЗаписьИсторииРасположенияТерминала = КСЛ.Мониторинг_Терминалы_ЗаписьИсторииРасположенияТерминала();
		УстановитьИд(ЗаписьИсторииРасположенияТерминала, обРасположениеТерминала);
		
		ЗаписьИсторииРасположенияТерминала.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обРасположениеТерминала);
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обРасположениеТерминала, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры

//** Доставки **//

//Запись доставки в КСЛ
//
Процедура СохранитьДоставку(обДоставка, КСЛ = Неопределено) Экспорт
	
	Если обДоставка.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обДоставка.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обДоставка, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Доставка = КСЛ.Доставка_Доставка();
		УстановитьИд(Доставка, обДоставка);
		
		Доставка.Номер = обДоставка.Номер;
		Доставка.МоментВремени = обДоставка.Дата;
		Доставка.ПометкаУдаления = обДоставка.ПометкаУдаления;
		
		Доставка.ТочкаОтправления.Ид = СокрЛП(обДоставка.ТочкаОтправления.УникальныйИдентификатор());
		Доставка.ТочкаПрибытия.Ид = СокрЛП(обДоставка.ТочкаПрибытия.УникальныйИдентификатор());
		
		Доставка.Грузоотправитель.Ид = "00000000-0000-0000-0000-000000000000";
		Доставка.СкладОтправления.Ид = "00000000-0000-0000-0000-000000000000";
		
		Если ТипЗнч(обДоставка.Грузоотправитель) = Тип("СправочникСсылка.новаКонтрагенты") Тогда
			Доставка.Грузоотправитель.Ид = СокрЛП(обДоставка.Грузоотправитель.УникальныйИдентификатор());
		Иначе
			Доставка.СкладОтправления.Ид = СокрЛП(обДоставка.Грузоотправитель.УникальныйИдентификатор());
		КонецЕсли;
		
		Доставка.Грузополучатель.Ид = "00000000-0000-0000-0000-000000000000";
		Доставка.СкладПрибытия.Ид = "00000000-0000-0000-0000-000000000000";
		Если ТипЗнч(обДоставка.Грузополучатель) = Тип("СправочникСсылка.новаКонтрагенты") Тогда
			Доставка.Грузополучатель.Ид = СокрЛП(обДоставка.Грузополучатель.УникальныйИдентификатор());
		Иначе
			Доставка.СкладПрибытия.Ид = СокрЛП(обДоставка.Грузополучатель.УникальныйИдентификатор());
		КонецЕсли;
		
		ОкноОтправления = Доставка.ОкноОтправления;
		ОкноОтправления.С = обДоставка.ВремяОтправленияС;
		ОкноОтправления.По = обДоставка.ВремяОтправленияПо;
		ОкноОтправления.Время = обДоставка.ВремяПребыванияГрузоотправителя - '00010101';
		
		ОкноПрибытия = Доставка.ОкноПрибытия;
		ОкноПрибытия.С = обДоставка.ВремяПрибытияС;
		ОкноПрибытия.По = обДоставка.ВремяПрибытияПо;
		ОкноПрибытия.Время = обДоставка.ВремяПребыванияГрузополучателя - '00010101';
		
		Доставка.Вес = обДоставка.Груз.Вес;
		Доставка.Объем = обДоставка.Груз.Объем;
		
		Доставка.Сохранить();
		
		УдалитьОбъектИзОчередиОбмена(обДоставка);
						
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обДоставка, Перечисления.новаРежимСинхронизацииОбъектов.Обновить);
	КонецПопытки;
	
КонецПроцедуры

//Удаление доставку с КСЛ
//
Процедура УдалитьДоставку(обДоставка, КСЛ = Неопределено) Экспорт
	
	Если обДоставка.ДополнительныеСвойства.Свойство("ЗагрузкаССервера")
	     и обДоставка.ДополнительныеСвойства.ЗагрузкаССервера Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			Если КСЛ = Неопределено Тогда
				ДобавитьОбъектВОчередьОбмена(обДоставка, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
				Возврат;
			КонецЕсли;
		#КонецЕсли

		Доставка = КСЛ.Доставка_Доставка();
		УстановитьИд(Доставка, обДоставка);
		
		Доставка.Удалить();
		
		УдалитьОбъектИзОчередиОбмена(обДоставка);
			
	Исключение
		
		ДобавитьОбъектВОчередьОбмена(обДоставка, Перечисления.новаРежимСинхронизацииОбъектов.Удалить);
	КонецПопытки;
	
КонецПроцедуры


//**** Фоновый обмен ****//


//Выполнение обмена данными в фоне
//
Процедура ОбменДаннымиСКСЛ() Экспорт
	
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		КСЛ = новаСерверКСЛ.Подключиться(, , Истина);
	#КонецЕсли
	
	ВыполнитьСинхронизацию(КСЛ);
	
КонецПроцедуры

