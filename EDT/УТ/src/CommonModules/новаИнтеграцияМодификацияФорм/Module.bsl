
Функция ПолучитьМетаданныеИзФормы(Форма)
	Попытка 
		//МетаДанныеОбъекта =
		Возврат Форма.Метаданные();
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
КонецФункции

Процедура ИнициализацияФормы(Форма, Расширение) Экспорт
	
	Если Расширение.ИмяФормы = "ФормаДокумента" Тогда
		Форма.ЭтотОбъект.ДополнительныеСвойства.Вставить("ФормаДокументаОткрыта", Истина);
	КонецЕсли;
	
	Если Не РольДоступна("новаАдминистраторУТЛ")
	   И Не РольДоступна("новаПользовательУТЛ") Тогда	
	   
	   Возврат;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	Если Расширение.ИмяФормы = "ФормаВыбора" Тогда
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
			"ПередОткрытием",
			2,
			"Параметр1 = новаИнтеграцияМодификацияФорм.ПодменаФормыВыбора(ЭтаФорма);",
			,
			Расширение);
			
	ИначеЕсли Расширение.ИмяФормы = "ФормаСписка" Тогда		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
			"ПередОткрытием",
			2,
			"Параметр1 = новаИнтеграцияМодификацияФорм.ПодменаФормыСписка(ЭтаФорма);",
			,
			Расширение);		
	ИначеЕсли Расширение.ИмяФормы = "ФормаЗаписи" Тогда
		Если ТипЗнч(Форма.РегистрСведенийМенеджерЗаписи) = Тип("РегистрСведенийМенеджерЗаписи.новаУчетнаяПолитикаОрганизаций") Тогда
			МассивЭлементов.Добавить("Организация");
			МассивЭлементов.Добавить("ОсновнойМеханик");
			МассивЭлементов.Добавить("ОсновнойДиспетчер");
			МассивЭлементов.Добавить("ОсновнойВрач");
				
			ПодключитьОбработчикСобытияИнтеграцияОбработкаВыбора(Форма, Расширение, МассивЭлементов);	
		КонецЕсли;
	Иначе
			
		МетаДанныеОбъекта = ПолучитьМетаданныеИзФормы(Форма);		
		Если МетаДанныеОбъекта = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если МетаДанныеОбъекта = Метаданные.Справочники.новаТранспорт Тогда
			Если Расширение.ИмяФормы = "ФормаЭлемента" Тогда
				
				МассивЭлементов.Добавить("Контрагент");
				МассивЭлементов.Добавить("Склад");
				ПодключитьОбработчикСобытияИнтеграцияОбработкаВыбора(Форма, Расширение, МассивЭлементов);
				
			КонецЕсли;
			
		ИначеЕсли МетаДанныеОбъекта = Метаданные.Справочники.новаВодители Тогда
			Если Расширение.ИмяФормы = "ФормаЭлемента" Тогда
				
				МассивЭлементов.Добавить("Контрагент");
				//МассивЭлементов.Добавить("ФизЛицо");
				ПодключитьОбработчикСобытияИнтеграцияОбработкаВыбора(Форма, Расширение, МассивЭлементов);

				новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма.ЭлементыФормы.ФизЛицо,
					"ОбработкаВыбора",
					3,
					"Результат = новаИнтеграцияМодификацияФорм.ИнтеграцияОбработкаВыбора(Параметр1, Параметр2);
					|Если Результат = Неопределено Тогда
					|	Параметр3 = Истина;
					|Иначе
					|	Параметр3 = Ложь;
					|	Параметр1.Значение = Результат;
					|   Наименование = СокрЛП(Результат);
					|КонецЕсли;" ,
					,
					Расширение);	
			КонецЕсли;
			
		ИначеЕсли МетаДанныеОбъекта = Метаданные.Справочники.новаЭкспедиторы Тогда
			Если Расширение.ИмяФормы = "ФормаЭлемента" Тогда
				
				МассивЭлементов.Добавить("ФизЛицо");
				ПодключитьОбработчикСобытияИнтеграцияОбработкаВыбора(Форма, Расширение, МассивЭлементов);
				
			КонецЕсли;			
			
		ИначеЕсли (МетаДанныеОбъекта = Метаданные.Справочники.новаСклады)
			  Или (МетаДанныеОбъекта = Метаданные.Справочники.новаКонтрагенты)
			  Или (МетаДанныеОбъекта = Метаданные.Справочники.новаНоменклатура)
			  Или (МетаДанныеОбъекта = Метаданные.Справочники.новаВалюты)
			  Или (МетаДанныеОбъекта = Метаданные.Справочники.новаФизическиеЛица)
			  Или (МетаДанныеОбъекта = Метаданные.Справочники.новаОрганизации) Тогда
			  
			Если Расширение.ИмяФормы = "ФормаЭлемента" Тогда		  
				новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
					"ПередОткрытием",
					2,
					"Параметр1 = Истина;
					|Параметр2 = Ложь;
					|новаИнтеграцияМодификацияФорм.ПодменаФормыЭлемента(ЭтаФорма.ЭтотОбъект);",
					,
					Расширение);
			КонецЕсли;
		ИначеЕсли МетаДанныеОбъекта = Метаданные.Справочники.Контрагенты Тогда
			Если Расширение.ИмяФормы = "ФормаЭлемента" Тогда		
				новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
					"ПриОткрытии",
					0,
					"новаИнтеграцияМодификацияФорм.МодифицироватьФормуКонтрагента(ЭтаФорма);",
					,
					Расширение);	
			КонецЕсли;	
				
		ИначеЕсли МетаДанныеОбъекта = Метаданные.Справочники.Склады Тогда
			Если Расширение.ИмяФормы = "ФормаЭлемента" Тогда		
				новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
					"ПриОткрытии",
					0,
					"новаИнтеграцияМодификацияФорм.МодифицироватьФормуСклада(ЭтаФорма);",
					,
					Расширение);
			КонецЕсли;	
				
		ИначеЕсли (МетаДанныеОбъекта = Метаданные.Документы.ЗаказПокупателя)
			  Или (МетаДанныеОбъекта = Метаданные.Документы.ЗаказПоставщику)
			  Или (МетаДанныеОбъекта = Метаданные.Документы.РеализацияТоваровУслуг)
			  Или (МетаДанныеОбъекта = Метаданные.Документы.КорректировкаЗаказаПокупателя)
			  Или (МетаДанныеОбъекта = Метаданные.Документы.КорректировкаЗаказаПоставщику) Тогда
 
			  
			Если Расширение.ИмяФормы = "ФормаДокумента" Тогда				
				
				новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
					"ПриОткрытии",
					0,
					"новаИнтеграцияМодификацияФорм.МодифицироватьФормуДокумента(ЭтаФорма, новаКонтекст);",
					Ложь,
					Расширение);				
			КонецЕсли;	
				
		ИначеЕсли МетаДанныеОбъекта = Метаданные.БизнесПроцессы.новаМестнаяДоставка Тогда
			Если Расширение.ИмяФормы = "ФормаБизнесПроцесса" Тогда				
				
				новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
					"ПриОткрытии",
					0,
					"новаИнтеграцияМодификацияФорм.МодифицироватьФормуБизнесПроцесса(ЭтаФорма);",
					,
					Расширение);				
				
				МассивЭлементов.Добавить("Грузоотправитель");
				МассивЭлементов.Добавить("Грузополучатель");
				
				ПодключитьОбработчикСобытияИнтеграцияОбработкаВыбора(Форма, Расширение, МассивЭлементов);
				
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Процедуры модификации форм элементов

Процедура ПодключитьОбработчикСобытияИнтеграцияОбработкаВыбора(Форма, Расширение, МассивЭлементов) Экспорт
	
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		
		ЭлементФормы = Форма.ЭлементыФормы.Найти(ЭлементМассива);
	
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, ЭлементФормы,
			"ОбработкаВыбора",
			3,
			"Результат = новаИнтеграцияМодификацияФорм.ИнтеграцияОбработкаВыбора(Параметр1, Параметр2);
			|Если Результат = Неопределено Тогда
			|	Параметр3 = Истина;
			|Иначе
			|	Параметр3 = Ложь;
			|	Параметр1.Значение = Результат;
			|КонецЕсли;",
			,
			Расширение);
		
	КонецЦикла;				
	
КонецПроцедуры	

Процедура МодифицироватьФормуКонтрагента(Форма) Экспорт
	новаКонтрагент = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Форма.Ссылка);
	Если новаКонтрагент = Неопределено Тогда
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
		"ПослеЗаписи",
		0,
		"новаИнтеграцияМодификацияФорм.ПослеЗаписиКонтрагентаСобытиеФормыПослеЗаписи(ЭтаФорма)"); 
		
		Возврат;
	Иначе
		СтраницаТочекДоставки = Форма.ЭлементыФормы.Панель.Страницы.Найти("ТочкиДоставки");
		Если СтраницаТочекДоставки <> Неопределено Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ТекущаяПанель = Форма.ЭлементыФормы.Панель;
	Страница = Форма.ЭлементыФормы.Панель.Страницы.Добавить("ТочкиДоставки", "Точки доставки");
	ТекущаяПанель.ТекущаяСтраница = Страница;
	
	Отступ = 8;
	Высота = 19;
	
	Х = Отступ;
	У = Отступ;
	
	ФлажокДоставка = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Флажок"), ТекущаяПанель);
	ФлажокДоставка.Лево = Х;
	ФлажокДоставка.Верх = У;
	ФлажокДоставка.Высота = Высота;
	ФлажокДоставка.Заголовок = "Требуется доставка";
	ФлажокДоставка.Ширина = 180;
	ФлажокДоставка.ИзменяетДанные = Истина;
	
	//новаКонтрагент = ПолучитьОбъектУТЛ(Форма.Ссылка);
	ФлажокДоставка.Значение = ?(новаКонтрагент = Неопределено, Ложь, новаКонтрагент.ТребуетсяДоставка);	
	У = У + ФлажокДоставка.Высота + 6;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
	"ПриЗаписи",
	1,
	"новаИнтеграцияМодификацияФорм.ПриЗаписиКонтрагентаСобытиеФормыПриЗаписи(ЭтаФорма, ЭлементыФормы."+ФлажокДоставка.Имя+".Значение);"); 
	
	ПолеСпискаСправочника = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ТабличноеПоле"), ТекущаяПанель);
	ПолеСпискаСправочника.Лево = Х;
	ПолеСпискаСправочника.Верх = У;
	ПолеСпискаСправочника.Высота = ТекущаяПанель.Высота - У - 28;
	ПолеСпискаСправочника.Ширина = ТекущаяПанель.Ширина - 18;
	
	ПолеСпискаСправочника.УстановитьПривязку(ГраницаЭлементаУправления.Верх,
	,
	ГраницаЭлементаУправления.Низ);
	
	ПолеСпискаСправочника.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
	ТекущаяПанель,
	ГраницаЭлементаУправления.Низ);
	
	ПолеСпискаСправочника.УстановитьПривязку(ГраницаЭлементаУправления.Право,
	ТекущаяПанель,
	ГраницаЭлементаУправления.Право);	
	
	ЖурналТочекДоставки = новаЖурналы.НовыйЖурнал();
	
	Журнал = ЖурналТочекДоставки;
	
	Журнал.ДобавитьНастройку("По Районам");
	
	Источник = Обработки.новаИсточникТочкиДоставки.Создать();
	Источник.ВладелецТочки = новаКонтрагент;
	Источник.ОткрыватьКарту = Ложь;
	Журнал.ДобавитьИсточник(Источник);
	
	Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ТочкаДоставки";
	Источник.КонструкторДанных.ДобавитьГруппировку("Район");
	Журнал.УстановитьШиринуИерархии(30);
	
	Журнал.ДобавитьКолонку("ОтображатьНаКарте", ПоложениеКолонки.НоваяКолонка, -3,, РежимРедактированияКолонки.Непосредственно);
	Журнал.ДобавитьКолонку("Район", ПоложениеКолонки.НоваяКолонка, 40);
	Журнал.ДобавитьКолонку("Адрес", ПоложениеКолонки.НоваяКолонка, 40);
	Журнал.ДобавитьКолонку("ОкноРаботы", ПоложениеКолонки.НоваяКолонка, -10);
	Журнал.ДобавитьКолонку("ВремяПребывания", ПоложениеКолонки.НоваяКолонка, -10);
	Журнал.ДобавитьКолонку("СменаПланирования", ПоложениеКолонки.НоваяКолонка, 30);
	
	
	Журнал.ДобавитьНастройку("Списком");
	
	Источник = Обработки.новаИсточникТочкиДоставки.Создать();
	Источник.ВладелецТочки = новаКонтрагент;
	Источник.ОткрыватьКарту = Ложь;
	Журнал.ДобавитьИсточник(Источник);
	
	Журнал.УстановитьШиринуИерархии(30);
	
	Журнал.ДобавитьКолонку("ТочкаДоставки", ПоложениеКолонки.НоваяКолонка, 40);
	Журнал.ДобавитьКолонку("ОтображатьНаКарте", ПоложениеКолонки.НоваяКолонка, -3,, РежимРедактированияКолонки.Непосредственно);
	Журнал.ДобавитьКолонку("Район", ПоложениеКолонки.НоваяКолонка, 40);
	Журнал.ДобавитьКолонку("Адрес", ПоложениеКолонки.НоваяКолонка, 40);
	Журнал.ДобавитьКолонку("ОкноРаботы", ПоложениеКолонки.НоваяКолонка, -10);
	Журнал.ДобавитьКолонку("ВремяПребывания", ПоложениеКолонки.НоваяКолонка, -10);
	Журнал.ДобавитьКолонку("СменаПланирования", ПоложениеКолонки.НоваяКолонка, 30);
	
	Журнал.ПодключитьИнтерфейс(Форма, ПолеСпискаСправочника, ТекущаяПанель);
	ТекущаяПанель.ТекущаяСтраница = Форма.ЭлементыФормы.Панель.Страницы[0];
КонецПроцедуры

Процедура МодифицироватьФормуСклада(Форма) Экспорт
	новаСклад = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Форма.Ссылка);
	Если новаСклад = Неопределено Тогда
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
		"ПослеЗаписи",
		0,
		"новаИнтеграцияМодификацияФорм.ПослеЗаписиСкладаСобытиеФормыПослеЗаписи(ЭтаФорма)"); 
		
		Возврат;
	Иначе
		СтраницаТочекДоставки = Форма.ЭлементыФормы.Панель.Страницы.Найти("Доставка");
		Если СтраницаТочекДоставки <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяПанель = Форма.ЭлементыФормы.Панель;
	Страница = Форма.ЭлементыФормы.Панель.Страницы.Добавить("Доставка", "Доставка");
	ТекущаяПанель.ТекущаяСтраница = Страница;
	
	Отступ = 8;
	Высота = 19;
	
	Х = Отступ;
	У = Отступ;
	
	Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), ТекущаяПанель);
	Надпись.Лево = Х;
	Надпись.Верх = У;
	Надпись.Высота = Высота;
	Надпись.Заголовок = "Точка доставки:";
	Надпись.Ширина = 85;
		
	Х = Х + Надпись.Ширина + Отступ;	
	
	ПолеТочкаДоставки = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), ТекущаяПанель);
	ПолеТочкаДоставки.Лево = Х;
	ПолеТочкаДоставки.Верх = У;
	ПолеТочкаДоставки.Высота = Высота;
	ПолеТочкаДоставки.Ширина = 280;
	ПолеТочкаДоставки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки");
	
	//новаСклад = ПолучитьОбъектУТЛ(Форма.Ссылка);
	ПолеТочкаДоставки.Значение = новаСклад.ТочкаДоставки;
	
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, ПолеТочкаДоставки,
	"НачалоВыбора",
	1,
	"Параметр2 = Ложь;
	|новаИнтеграцияМодификацияФорм.ПриНачалеВыбораСкладаСобытиеФормыНачалоВыбора(ЭтаФорма, ЭлементыФормы."+ПолеТочкаДоставки.Имя+".Значение);"); 

	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
	"ПриЗаписи",
	1,
	"новаИнтеграцияМодификацияФорм.ПриЗаписиСкладаСобытиеФормыПриЗаписи(ЭтаФорма, ЭлементыФормы."+ПолеТочкаДоставки.Имя+".Значение);"); 
	
    ТекущаяПанель.ТекущаяСтраница = Форма.ЭлементыФормы.Панель.Страницы[0];

КонецПроцедуры

Процедура МодифицироватьФормуБизнесПроцесса(Форма) Экспорт
	ТекущаяПанель = Форма.Панель;
	
	Если Форма.ЭлементыФормы.ИдентификаторДляОбмена.Заголовок = "" Тогда
		
		Форма.ЭлементыФормы.ИдентификаторДляОбмена.Видимость = Ложь;
	    ОснованиеДоставки = новаИнтеграция.ПолучитьОснованиеПоМестнойДоставке(Форма.Ссылка);
		
		Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), ТекущаяПанель);
		Надпись.Лево = 371;
		Надпись.Верх = 33;
		Надпись.Высота = 19;;
		Надпись.Ширина = 283;
		Надпись.ГиперСсылка = Истина;
		
		Надпись.Значение = ОснованиеДоставки;
			
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Надпись,
		"Нажатие",
		0,
		"ОткрытьЗначение(новаИнтеграция.ПолучитьОснованиеПоМестнойДоставке(Ссылка));"); 	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура МодифицироватьФормуДокумента(ЭтаФорма, новаКонтекст) Экспорт
	обИнтерфейсУсловийДоставки = Обработки.новаИнтерфейсУсловийДоставки.Создать();
	обИнтерфейсУсловийДоставки.Форма = ЭтаФорма;
	обИнтерфейсУсловийДоставки.ПодключитьИнтерфейс();
КонецПроцедуры

//-----------------------------------------------------------------------------
// Процедуры подмены форм

///
Функция ИнтеграцияОбработкаВыбора(Элемент, ВыбранноеЗначение) Экспорт
	
	новаОбъект = Элемент.Значение;
	
	Если ТипЗнч(новаОбъект) = Тип("СправочникСсылка.новаСклады") Тогда
		//Сначала проверим, а не совпадают ли типы, то есть Выбранное значение имеет тип
		//новаСклады, а не Склады, то ПолучитьОбъектУТЛ - не надо 
		Если ТипЗнч(новаОбъект) = ТипЗнч(ВыбранноеЗначение) Тогда
		    новаОбъект = ВыбранноеЗначение;
		Иначе
			новаОбъект = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(ВыбранноеЗначение);
		КонецЕсли;
		
		Если новаОбъект = Неопределено Тогда
			новаОбъект = Справочники.новаСклады.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(новаОбъект) = Тип("СправочникСсылка.новаКонтрагенты") Тогда
		Если ТипЗнч(новаОбъект) = ТипЗнч(ВыбранноеЗначение) Тогда
		    новаОбъект = ВыбранноеЗначение;
		Иначе		
			новаОбъект = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(ВыбранноеЗначение);
		КонецЕсли;
		
		Если новаОбъект = Неопределено Тогда
			новаОбъект = Справочники.новаКонтрагенты.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(новаОбъект) = Тип("СправочникСсылка.новаНоменклатура") Тогда
		
		новаОбъект = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(ВыбранноеЗначение);
		Если новаОбъект = Неопределено Тогда
			новаОбъект = Справочники.новаНоменклатура.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(новаОбъект) = Тип("СправочникСсылка.новаВалюты") Тогда
		
		новаОбъект = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(ВыбранноеЗначение);
		Если новаОбъект = Неопределено Тогда
			новаОбъект = Справочники.новаВалюты.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(новаОбъект) = Тип("СправочникСсылка.новаФизическиеЛица") Тогда
		
		новаОбъект = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(ВыбранноеЗначение);
		Если новаОбъект = Неопределено Тогда
			новаОбъект = Справочники.новаФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(новаОбъект) = Тип("СправочникСсылка.новаПользователи") Тогда
		
		новаОбъект = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(ВыбранноеЗначение);
		Если новаОбъект = Неопределено Тогда
			новаОбъект = Справочники.новаПользователи.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(новаОбъект) = Тип("СправочникСсылка.новаОрганизации") Тогда
		
		новаОбъект = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(ВыбранноеЗначение);
		Если новаОбъект = Неопределено Тогда
			новаОбъект = Справочники.новаОрганизации.ПустаяСсылка();
		КонецЕсли;	
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат новаОбъект;
	
КонецФункции

Процедура СобытиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	Результат = новаИнтеграцияМодификацияФорм.ИнтеграцияОбработкаВыбора(Элемент, ВыбранноеЗначение);
	Если Результат = Неопределено Тогда
		СтандартнаяОбработка = Истина;
	Иначе
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = Результат;
	КонецЕсли;	
КонецПроцедуры

Функция ПодменаФормыВыбора(Форма) Экспорт
	
	Если Форма.НачальноеЗначениеВыбора <> Неопределено Тогда 
		ОбъектУТЛ = Форма.НачальноеЗначениеВыбора.Ссылка;
		МетаданныеУТЛ = ОбъектУТЛ.Метаданные();
		Если Не новаОбщиеПроцедуры.ОбъектПринадлежитПодсистеме(МетаданныеУТЛ, Метаданные.Подсистемы.новаУправлениеТранспортнойЛогистикой.Подсистемы.новаОбщиеДанные) Тогда
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
	ОбъектИС = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектИС(ОбъектУТЛ);
		
	//ИмяОбъектаИС = ОбъектИС.Метаданные().Имя;
	
	ФормаВыбора = Справочники[ОбъектИС.Метаданные().Имя].ПолучитьФормуВыбора(, Форма.ВладелецФормы);
	
	Если ОбъектИС <> Неопределено Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = ОбъектИС;
	КонецЕсли;	
	ФормаВыбора.Открыть();
	
	Возврат Истина;
	
КонецФункции

Функция ПодменаФормыСписка(Форма) Экспорт
	Если ТипЗнч(Форма.СправочникСписок) = Тип("СправочникСписок.новаКонтрагенты") Тогда
		ФормаСписка = Справочники.Контрагенты.ПолучитьФормуСписка(, Форма.ВладелецФормы); 
		
	ИначеЕсли ТипЗнч(Форма.СправочникСписок) = Тип("СправочникСписок.новаСклады") Тогда
		ФормаСписка = Справочники.Склады.ПолучитьФормуСписка(, Форма.ВладелецФормы);
		
	ИначеЕсли ТипЗнч(Форма.СправочникСписок) = Тип("СправочникСписок.новаФизическиеЛица") Тогда
		ФормаСписка = Справочники.ФизическиеЛица.ПолучитьФормуСписка(, Форма.ВладелецФормы);
	
	ИначеЕсли ТипЗнч(Форма.СправочникСписок) = Тип("СправочникСписок.новаОрганизации") Тогда
		ФормаСписка = Справочники.Организации.ПолучитьФормуСписка(, Форма.ВладелецФормы);
		
	ИначеЕсли ТипЗнч(Форма.СправочникСписок) = Тип("СправочникСписок.новаНоменклатура") Тогда
		ФормаСписка = Справочники.Номенклатура.ПолучитьФормуСписка(, Форма.ВладелецФормы);
		
	Иначе 
		Возврат Ложь;	
	КонецЕсли;
	
	ФормаСписка.Открыть();
	
	Возврат Истина;	
КонецФункции	

Функция ПодменаФормыЭлемента(Элемент) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("ПолеВвода") Тогда
		новаОбъект = Элемент.Значение;
		Если НЕ ЗначениеЗаполнено(новаОбъект) Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		новаОбъект = Элемент.Ссылка;
	КонецЕсли;
	
	Если Элемент.ЭтоНовый() Тогда
		обМетаданные = Элемент.Метаданные();
		ИмяОбъекта = Сред(обМетаданные.Имя, 5);
		Иерархический = обМетаданные.Иерархический; 
		
		Если Иерархический И Элемент.ЭтоГруппа Тогда
			ОбъектИС = Справочники[ИмяОбъекта].СоздатьГруппу();
		Иначе
			ОбъектИС = Справочники[ИмяОбъекта].СоздатьЭлемент();
		КонецЕсли;
		
		Если Иерархический Тогда
			новаРодительЭлемента = Элемент.Родитель;
			РодительЭлемента = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектИС(новаРодительЭлемента);
			Если РодительЭлемента <> Неопределено Тогда
				ОбъектИС.Родитель = РодительЭлемента;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбъектИС = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектИС(новаОбъект);
	КонецЕсли;
	
	Если ОбъектИС = Неопределено Тогда
	    Возврат Истина;
	КонецЕсли;	
	
	ОбъектИС.ПолучитьФорму().Открыть();
	Возврат Ложь;
	
КонецФункции

// Процедуры - обработчики событий при записи объекта из формы

Процедура ПриНачалеВыбораСкладаСобытиеФормыНачалоВыбора(Форма, Элемент) Экспорт
	ФормаВыбор = Справочники.новаТочкиДоставки.ПолучитьФормуВыбора(, Форма.ВладелецФормы);
	ФормаВыбор.СправочникСписок.Отбор.ВладелецТочки.Установить(Форма.Ссылка);
	ФормаВыбор.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВладелецТочки.Доступность = Ложь;
	Элемент = ФормаВыбор.ОткрытьМодально();
КонецПроцедуры	

Процедура ПослеЗаписиКонтрагентаСобытиеФормыПослеЗаписи(Форма) Экспорт
	
	МодифицироватьФормуКонтрагента(Форма);		
	
КонецПроцедуры

Процедура ПослеЗаписиСкладаСобытиеФормыПослеЗаписи(Форма) Экспорт
	
	МодифицироватьФормуСклада(Форма);		
	
КонецПроцедуры

Процедура ПриЗаписиКонтрагентаСобытиеФормыПриЗаписи(Форма, ЗаписываемоеЗначение) Экспорт
	
	новаКонтрагентСсылка = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Форма.Ссылка);
	Если ЗначениеЗаполнено(новаКонтрагентСсылка) Тогда
		новаКонтрагентОбъект = новаКонтрагентСсылка.ПолучитьОбъект();
		новаКонтрагентОбъект.ТребуетсяДоставка = ЗаписываемоеЗначение;
		новаКонтрагентОбъект.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриЗаписиСкладаСобытиеФормыПриЗаписи(Форма, ЗаписываемоеЗначение) Экспорт
	
	новаСкладСсылка = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Форма.Ссылка);
	Если ЗначениеЗаполнено(новаСкладСсылка) Тогда
		новаСкладОбъект = новаСкладСсылка.ПолучитьОбъект();
		новаСкладОбъект.ТочкаДоставки = ЗаписываемоеЗначение;
		новаСкладОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры