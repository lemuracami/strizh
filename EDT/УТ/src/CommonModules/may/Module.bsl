Функция ПодготовитьСтрокуПодДлинуНомераДокумента(СтрВНомер,ТипДокумента = "РеализацияТоваровУслуг") Экспорт
	ДлинаНомера = Метаданные.Документы[ТипДокумента].ДлинаНомера;
	ДлинаСтр = СтрДлина(СтрВНомер);
	Для Итр = ДлинаСтр + 1 по ДлинаНомера Цикл
		СтрВНомер = СтрВНомер + " ";	
	КонецЦикла;
	Возврат СтрВНомер;
КонецФункции

Процедура ЗаписьСтатусыРассылкиСМСПоРейсам(Рейс, Заказ, СМСОтправлено, ВозниклаОшибкаПриОтправке) Экспорт
	ТекДата = ТекущаяДата();
	Наб = РегистрыСведений.СтатусыРассылкиСМСПоРейсам.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекДата);
    Наб.Отбор.Заказ.Установить(Заказ);
			
	Нов = Наб.Добавить();
	Нов.Период = ТекДата;
	Нов.Рейс = Рейс;
	Нов.Заказ = Заказ;
	Нов.СМСОтправлено = СМСОтправлено;
	Нов.ВозниклаОшибкаПриОтправке = ВозниклаОшибкаПриОтправке;
	
	Наб.Записать();
КонецПроцедуры

Процедура ОтправитьСМСПоРейсу(Рейс) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	             |	АктивныйОператорСМСРассылкиСрезПоследних.ОператорСМСРассылки Как Оператор
	             |ИЗ
	             |	РегистрСведений.АктивныйОператорСМСРассылки.СрезПоследних(&ДатаЗапроса, ) КАК АктивныйОператорСМСРассылкиСрезПоследних";
				 
	Зап.УстановитьПараметр("ДатаЗапроса", ТекущаяДата());
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Если Выб.Оператор = Справочники.ОператорыСМСРассылки.Utele Тогда
			ОтправитьСМСПоРейсуUtele(Рейс);
		ИначеЕсли Выб.Оператор = Справочники.ОператорыСМСРассылки.SMSC Тогда
			ОтправитьСМСПоРейсуSMSC(Рейс)
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ОтправитьСМСПоРейсуSMSC(Рейс)
	Рез = ПолучитьШаблон();			
	Если Рез.Следующий() Тогда
		Сендер = Обработки.SMSС.Создать();
		Сендер.ШаблонРассылки	= Рез.Шаблон;
		Сендер.Оператор 		= Справочники.ОператорыСМСРассылки.SMSC;
		Сендер.ДатаСбораДанных 	= ТекущаяДата();
		Сендер.Рейс 			= Рейс.РейсМестнойДоставки;
		//Геннадий #3995 21.05.2020 ->
		//исходный код
		//Ф = Сендер.ПолучитьФорму("Форма");
		//
		//Ф.ПроинициализироватьОбработку();
		//Ф.ОтправкаСМСПоРейсу(Рейс);
		
		Сендер.РЗ_ОтправкаСМСПоРейсу(Рейс);
		//Геннадий #3995 21.05.2020 <-
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьШаблон()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	АктивныеШаблоныСМСРассылокСрезПоследних.ШаблонСМСРассылки.Ссылка КАК Шаблон
	            |ИЗ
	            |	РегистрСведений.АктивныеШаблоныСМСРассылок.СрезПоследних КАК АктивныеШаблоныСМСРассылокСрезПоследних
	            |ГДЕ
	            |	АктивныеШаблоныСМСРассылокСрезПоследних.ТипСМСРассылки.Ссылка = ЗНАЧЕНИЕ(справочник.типысмсрассылок.РассылкаОбУехавшихЗаказах)";
	Рез = Зап.Выполнить().Выбрать();			
	Возврат Рез;
КонецФункции

Процедура ОтправитьСМСПоРейсуUtele(Рейс) Экспорт // При интеграции убери экспорт
	Рез = ПолучитьШаблон();	
	Если Рез.Следующий() Тогда
		Сендер = Обработки.SMSUtele.Создать();
		Сендер.ШаблонРассылки = Рез.Шаблон;
		Сендер.Оператор = Справочники.ОператорыСМСРассылки.Utele;
		Сендер.ДатаСбораДанных = Рейс.ДатаРейса; // При интеграции нужно заменить на ТекущаяДата();
		Сендер.Рейс = Рейс;
		Ф = Сендер.ПолучитьФорму("Форма");
		
		Ф.ПроинициализироватьОбработку();
		Ф.ОтправкаСМСПоРейсу();
	КонецЕсли;
КонецПроцедуры

Функция ПодготовитьДанныеПоУехавшимЗаказам(Рейс, ДатаСбораДанных, Оператор, ШаблонРассылки) Экспорт
    Зап = Новый Запрос;
	
	//Асеев 23.08.2022 (Задача № 4877)>>>
	//+Степанов Задача № 3917
	//Зап.Текст = "ВЫБРАТЬ
	//            |	РассылкаСМС.Заказ КАК Заказ,
	//            |	ИСТИНА КАК Отправлено
	//            |ПОМЕСТИТЬ ВТОтправленныеСообщения
	//            |ИЗ
	//            |	РегистрСведений.РассылкаСМС КАК РассылкаСМС
	//            |ГДЕ
	//            |	РассылкаСМС.ОператорСМСРассылки = &Оператор
	//            |	И РассылкаСМС.ТипСМСРассылки = &ТипСМСРассылки
	//            |	И РассылкаСМС.СтатусСообщения = ЗНАЧЕНИЕ(Справочник.СтатусыСМССообщений.СообщениеПринятоСервисом)
	//            |	И РассылкаСМС.Период МЕЖДУ &Дата1 И &Дата2
	//            |
	//            |ИНДЕКСИРОВАТЬ ПО
	//            |	Заказ
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	РассылкаСМСПоКонтрагентамСрезПоследних.Контрагент.Ссылка КАК КонтрагентСсылка,
	//            |	Контрагенты.Ссылка КАК Родитель
	//            |ПОМЕСТИТЬ КонтрагентыКРассылке
	//            |ИЗ
	//            |	Справочник.Контрагенты КАК Контрагенты
	//            |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РассылкаСМСПоКонтрагентам.СрезПоследних(&Дата2, ) КАК РассылкаСМСПоКонтрагентамСрезПоследних
	//            |		ПО Контрагенты.ОсновнойМагазин = РассылкаСМСПоКонтрагентамСрезПоследних.Контрагент
	//            |ГДЕ
	//            |	РассылкаСМСПоКонтрагентамСрезПоследних.ПроизводитьРассылку = ИСТИНА
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	Контрагенты.Ссылка КАК КонтрагентСсылка
	//            |ПОМЕСТИТЬ ВТ_ПолныйСписокКонтрагентов
	//            |ИЗ
	//            |	Справочник.Контрагенты КАК Контрагенты
	//            |ГДЕ
	//            |	Контрагенты.Родитель В
	//            |			(ВЫБРАТЬ
	//            |				КонтрагентыКРассылке.Родитель
	//            |			ИЗ
	//            |				КонтрагентыКРассылке КАК КонтрагентыКРассылке)
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	Контрагенты.Ссылка
	//            |
	//            |ОБЪЕДИНИТЬ ВСЕ
	//            |
	//            |ВЫБРАТЬ
	//            |	КонтрагентыКРассылке.КонтрагентСсылка
	//            |ИЗ
	//            |	КонтрагентыКРассылке КАК КонтрагентыКРассылке
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	КонтрагентыКРассылке.КонтрагентСсылка
	//            |
	//            |ИНДЕКСИРОВАТЬ ПО
	//            |	КонтрагентСсылка
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	//            |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма
	//            |ПОМЕСТИТЬ ВТСуммыЗаказов
	//            |ИЗ
	//            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//            |		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	//            |	И РеализацияТоваровУслуг.ВладелецТовара В
	//            |			(ВЫБРАТЬ
	//            |				ВТ_ПолныйСписокКонтрагентов.КонтрагентСсылка
	//            |			ИЗ
	//            |				ВТ_ПолныйСписокКонтрагентов КАК ВТ_ПолныйСписокКонтрагентов)
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка
	//            |
	//            |ОБЪЕДИНИТЬ ВСЕ
	//            |
	//            |ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка,
	//            |	СУММА(РеализацияТоваровУслугУслуги.Сумма)
	//            |ИЗ
	//            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	//            |		ПО (РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка)
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	//            |	И РеализацияТоваровУслуг.ВладелецТовара В
	//            |			(ВЫБРАТЬ
	//            |				ВТ_ПолныйСписокКонтрагентов.КонтрагентСсылка
	//            |			ИЗ
	//            |				ВТ_ПолныйСписокКонтрагентов КАК ВТ_ПолныйСписокКонтрагентов)
	//            |	И РеализацияТоваровУслуг.ТерминалДоставки.ОтправлятьСМС = ИСТИНА
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка
	//            |
	//            |ОБЪЕДИНИТЬ ВСЕ
	//            |
	//            |ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка,
	//            |	-СУММА(ВозвратТоваровОтПокупателяТовары.Сумма)
	//            |ИЗ
	//            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	//            |		ПО (ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = РеализацияТоваровУслуг.Номер)
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	//            |	И РеализацияТоваровУслуг.ВладелецТовара В
	//            |			(ВЫБРАТЬ
	//            |				ВТ_ПолныйСписокКонтрагентов.КонтрагентСсылка
	//            |			ИЗ
	//            |				ВТ_ПолныйСписокКонтрагентов КАК ВТ_ПолныйСписокКонтрагентов)
	//            |	И РеализацияТоваровУслуг.ТерминалДоставки.ОтправлятьСМС = ИСТИНА
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	ВТСуммыЗаказов.Реализация КАК Реализация,
	//            |	СУММА(ВТСуммыЗаказов.Сумма) КАК Сумма
	//            |ПОМЕСТИТЬ ВТСуммаЗаказовИтог
	//            |ИЗ
	//            |	ВТСуммыЗаказов КАК ВТСуммыЗаказов
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	ВТСуммыЗаказов.Реализация
	//            |
	//            |ИНДЕКСИРОВАТЬ ПО
	//            |	Реализация
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.НомерГосударственнойРегистрации КАК НомерТранспорта,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование КАК Транспорт,
	//            |	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	//            |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	//            |	РеализацияТоваровУслуг.Дата КАК Дата,
	//            |	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияС КАК ВремяПрибытияС,
	//            |	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияПо КАК ПрибытияПо,
	//			//Геннадий #4761 10.03.2022 ++
	//            |	ДополнительныеПараметрыЗаказа.СсылкаНаОтслеживание КАК СсылкаНаОтслеживание,
	//			//Геннадий #4761 10.03.2022 ++
	//            |	ПривязкаМашинКРейсамСрезПоследних.Водитель.Наименование КАК Водитель,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Наименование КАК Экспедитор,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.Код = ""Shop_1000""
	//            |			ТОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.ОсновнойМагазин.Наименование
	//            |		ИНАЧЕ РеализацияТоваровУслуг.ВладелецТовара.Наименование
	//            |	КОНЕЦ КАК ИнтернетМагазин,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.Код = ""Shop_1000""
	//            |			ТОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.ОсновнойМагазин.Ссылка
	//            |		ИНАЧЕ РеализацияТоваровУслуг.ВладелецТовара.Ссылка
	//            |	КОНЕЦ КАК ИнтернетМагазинСсылка,
	//            |	РеализацияТоваровУслуг.Контрагент.Наименование КАК Получатель,
	//            |	ВЫБОР
	//            |		КОГДА ОперативноеНазначениеТАНаРейсСрезПоследних.ТА ЕСТЬ NULL
	//            |			ТОГДА ТелефонныеАппаратыТранспортаСрезПоследних.ТА.Телефон
	//            |		ИНАЧЕ ОперативноеНазначениеТАНаРейсСрезПоследних.ТА.Телефон
	//            |	КОНЕЦ КАК ТелефонЭкипажа,
	//            |	РеализацияТоваровУслуг.Телефон КАК Телефон,
	//            |	ВТОтправленныеСообщения.Отправлено КАК Отправлено,
	//            |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Москва, ЛОЖЬ) КАК ЭтоМосква,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ТипОплаты = 7
	//            |			ТОГДА 0
	//            |		ИНАЧЕ ЕСТЬNULL(ВТСуммаЗаказовИтог.Сумма, 0)
	//            |	КОНЕЦ КАК СуммаЗаказа,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ТипОплаты = 7
	//            |			ТОГДА 0
	//            |		ИНАЧЕ ДополнительныеПараметрыЗаказа.КОплатеКлиентом
	//            |	КОНЕЦ КАК КОплатеКлиентом,
	//            |	РеализацияТоваровУслуг.УчитыватьИтогоКОплате КАК УчитыватьИтогоКОплате,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Водитель.ИмяЛатиницей КАК ВодительЛатиницей,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ИмяЛатиницей КАК ЭкспедиторЛатиницей,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.Код = ""Shop_1000""
	//            |			ТОГДА ПараметрыКонтрагентовСрезПоследних1.НаименованиеЛатиницей
	//            |		ИНАЧЕ ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей
	//            |	КОНЕЦ КАК НаименованиеЛатиницей,
	//			//Асеев 14.04.2021 (Задача № 3837)>>>
	//			//|	РеализацияТоваровУслуг.ЗонаТарификации.Код КАК КодЗоныТарификации,
	//			|	ЕСТЬNULL(ПараметрыТарифаЗаказаСрезПоследних.ЗонаТарификации.Код, """") КАК КодЗоныТарификации,
	//			//Асеев 14.04.2021 (Задача № 3837)<<<
	//            |	РеализацияТоваровУслуг.ТипОплаты КАК ТипОплаты,
	//            |	ВЫБОР
	//            |		КОГДА ЕСТЬNULL(ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Учитывать, ЛОЖЬ)
	//            |				И (ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ)
	//            |					ИЛИ ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних1.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ))
	//            |			ТОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КодИдентификацииКлиента, """")
	//            |		ИНАЧЕ """"
	//            |	КОНЕЦ КАК КодИдентификацииКлиента
	//            |ИЗ
	//            |	Документ.Рейс.Заказы КАК РейсЗаказы
	//            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ ВТОтправленныеСообщения КАК ВТОтправленныеСообщения
	//            |			ПО РеализацияТоваровУслуг.Ссылка = ВТОтправленныеСообщения.Заказ
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммаЗаказовИтог КАК ВТСуммаЗаказовИтог
	//            |			ПО РеализацияТоваровУслуг.Ссылка = ВТСуммаЗаказовИтог.Реализация
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	//            |			ПО РеализацияТоваровУслуг.Ссылка = ДополнительныеПараметрыЗаказа.Заказ
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
	//            |			ПО РеализацияТоваровУслуг.ВладелецТовара = ПараметрыКонтрагентовСрезПоследних.Контрагент
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыРассылкиСМСПоРейсам.СрезПоследних КАК СтатусыРассылкиСМСПоРейсамСрезПоследних
	//            |			ПО РеализацияТоваровУслуг.Ссылка = СтатусыРассылкиСМСПоРейсамСрезПоследних.Заказ
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних1
	//            |			ПО РеализацияТоваровУслуг.ВладелецТовара.Родитель.ОсновнойМагазин = ПараметрыКонтрагентовСрезПоследних1.Контрагент
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТипыОплатТребованиеИдентификацииКлиентов.СрезПоследних КАК ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних
	//            |			ПО РеализацияТоваровУслуг.ВладелецТовара = ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Партнер
	//            |				И РеализацияТоваровУслуг.ТипОплаты = ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.ТипОплаты.Код
	//			//Асеев 14.04.2021 (Задача № 3837)>>>
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних КАК ПараметрыТарифаЗаказаСрезПоследних
	//			|			ПО РеализацияТоваровУслуг.Ссылка = ПараметрыТарифаЗаказаСрезПоследних.Заказ
	//			//Асеев 14.04.2021 (Задача № 3837)<<<
	//            |		ПО РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	//            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелефонныеАппаратыТранспорта.СрезПоследних КАК ТелефонныеАппаратыТранспортаСрезПоследних
	//            |			ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт = ТелефонныеАппаратыТранспортаСрезПоследних.Транспорт
	//            |		ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	//            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперативноеНазначениеТАНаРейс.СрезПоследних КАК ОперативноеНазначениеТАНаРейсСрезПоследних
	//            |		ПО РейсЗаказы.Ссылка = ОперативноеНазначениеТАНаРейсСрезПоследних.Рейс
	//            |ГДЕ
	//            |	ЕСТЬNULL(ВТОтправленныеСообщения.Отправлено, ЛОЖЬ) <> ИСТИНА
	//            |	И РеализацияТоваровУслуг.ВладелецТовара В
	//            |			(ВЫБРАТЬ
	//            |				ВТ_ПолныйСписокКонтрагентов.КонтрагентСсылка
	//            |			ИЗ
	//            |				ВТ_ПолныйСписокКонтрагентов КАК ВТ_ПолныйСписокКонтрагентов)
	//            |	И РеализацияТоваровУслуг.ТерминалДоставки.ОтправлятьСМС = ИСТИНА
	//            |	И РейсЗаказы.Ссылка = &Рейс
	//            |	И НЕ РейсЗаказы.УдаленИзРейса
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Ссылка,
	//            |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа,
	//            |	РеализацияТоваровУслуг.Дата,
	//            |	РеализацияТоваровУслуг.Контрагент.Наименование,
	//            |	РеализацияТоваровУслуг.Телефон,
	//            |	ВТСуммаЗаказовИтог.Сумма,
	//            |	ВТОтправленныеСообщения.Отправлено,
	//            |	РеализацияТоваровУслуг.УчитыватьИтогоКОплате,
	//            |	ВЫБОР
	//            |		КОГДА ОперативноеНазначениеТАНаРейсСрезПоследних.ТА ЕСТЬ NULL
	//            |			ТОГДА ТелефонныеАппаратыТранспортаСрезПоследних.ТА.Телефон
	//            |		ИНАЧЕ ОперативноеНазначениеТАНаРейсСрезПоследних.ТА.Телефон
	//            |	КОНЕЦ,
	//			//Асеев 14.04.2021 (Задача № 3837)>>>
	//			//|	РеализацияТоваровУслуг.ЗонаТарификации.Код,
	//			|	ЕСТЬNULL(ПараметрыТарифаЗаказаСрезПоследних.ЗонаТарификации.Код, """"),
	//			//Асеев 14.04.2021 (Задача № 3837)<<<
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.Код = ""Shop_1000""
	//            |			ТОГДА ПараметрыКонтрагентовСрезПоследних1.НаименованиеЛатиницей
	//            |		ИНАЧЕ ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей
	//            |	КОНЕЦ,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.Код = ""Shop_1000""
	//            |			ТОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.ОсновнойМагазин.Наименование
	//            |		ИНАЧЕ РеализацияТоваровУслуг.ВладелецТовара.Наименование
	//            |	КОНЕЦ,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.Код = ""Shop_1000""
	//            |			ТОГДА РеализацияТоваровУслуг.ВладелецТовара.Родитель.ОсновнойМагазин.Ссылка
	//            |		ИНАЧЕ РеализацияТоваровУслуг.ВладелецТовара.Ссылка
	//            |	КОНЕЦ,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Водитель.Наименование,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Наименование,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Водитель.ИмяЛатиницей,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ИмяЛатиницей,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.НомерГосударственнойРегистрации,
	//            |	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование,
	//            |	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияС,
	//            |	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияПо,
	//            |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Москва, ЛОЖЬ),
	//			//Геннадий #4761 10.03.2022 ++
	//            |	ДополнительныеПараметрыЗаказа.СсылкаНаОтслеживание,
	//			//Геннадий #4761 10.03.2022 ++
	//            |	РеализацияТоваровУслуг.ТипОплаты,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ТипОплаты = 7
	//            |			ТОГДА 0
	//            |		ИНАЧЕ ДополнительныеПараметрыЗаказа.КОплатеКлиентом
	//            |	КОНЕЦ,
	//            |	ВЫБОР
	//            |		КОГДА РеализацияТоваровУслуг.ТипОплаты = 7
	//            |			ТОГДА 0
	//            |		ИНАЧЕ ЕСТЬNULL(ВТСуммаЗаказовИтог.Сумма, 0)
	//            |	КОНЕЦ,
	//            |	ВЫБОР
	//            |		КОГДА ЕСТЬNULL(ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Учитывать, ЛОЖЬ)
	//            |				И (ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ)
	//            |					ИЛИ ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних1.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ))
	//            |			ТОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КодИдентификацииКлиента, """")
	//            |		ИНАЧЕ """"
	//            |	КОНЕЦ";
	//-Степанов Задача № 3917
	Зап.Текст =
	"ВЫБРАТЬ
	|	РассылкаСМСПоКонтрагентамСрезПоследних.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_ПроизводитьРассылку
	|ИЗ
	|	РегистрСведений.РассылкаСМСПоКонтрагентам.СрезПоследних(&Дата2, ) КАК РассылкаСМСПоКонтрагентамСрезПоследних
	|ГДЕ
	|	РассылкаСМСПоКонтрагентамСрезПоследних.ПроизводитьРассылку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ПроизводитьРассылку.Контрагент КАК Контрагент
	|	ИЗ
	|		ВТ_ПроизводитьРассылку КАК ВТ_ПроизводитьРассылку
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КонтрагентыРодитель.Ссылка
	|	ИЗ
	|		ВТ_ПроизводитьРассылку КАК ВТ_ПроизводитьРассылку
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентыРодитель
	|				ПО Контрагенты.Ссылка = КонтрагентыРодитель.Родитель
	|			ПО ВТ_ПроизводитьРассылку.Контрагент = Контрагенты.ОсновнойМагазин) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара,
	|	РеализацияТоваровУслуг.ВладелецТовара.Родитель.ОсновнойМагазин КАК ОсновнойМагазин,
	|	ТипыОплат.Ссылка КАК ТипОплаты
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	|			ПО РеализацияТоваровУслуг.ВладелецТовара = ВТ_Контрагенты.Контрагент
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
	|			ПО РеализацияТоваровУслуг.ТипОплаты = ТипыОплат.Код
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
	|			ПО РеализацияТоваровУслуг.Ссылка = ЗагрузкаСТСДШтрихкоды.Заказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РассылкаСМС КАК РассылкаСМС
	|			ПО (РассылкаСМС.Период МЕЖДУ &Дата1 И &Дата2)
	|				И (РассылкаСМС.ОператорСМСРассылки = &Оператор)
	|				И РеализацияТоваровУслуг.Ссылка = РассылкаСМС.Заказ
	|				И (РассылкаСМС.ТипСМСРассылки = &ТипСМСРассылки)
	|				И (РассылкаСМС.СтатусСообщения = ЗНАЧЕНИЕ(Справочник.СтатусыСМССообщений.СообщениеПринятоСервисом))
	|		ПО (РейсЗаказы.Ссылка = &Рейс)
	|			И (НЕ РейсЗаказы.УдаленИзРейса)
	|			И РейсЗаказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|			И (РеализацияТоваровУслуг.ТерминалДоставки.ОтправлятьСМС)
	|ГДЕ
	|	РассылкаСМС.Заказ ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ КАК Заказ,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_СуммыЗаказов
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслугТовары.Ссылка КАК Заказ,
	|		РеализацияТоваровУслугТовары.Сумма КАК Сумма
	|	ИЗ
	|		ВТ_Заказы КАК ВТ_Заказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ПО ВТ_Заказы.Заказ = РеализацияТоваровУслугТовары.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслугУслуги.Ссылка,
	|		РеализацияТоваровУслугУслуги.Сумма
	|	ИЗ
	|		ВТ_Заказы КАК ВТ_Заказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|			ПО ВТ_Заказы.Заказ = РеализацияТоваровУслугУслуги.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Заказы.Заказ,
	|		-ВозвратТоваровОтПокупателяТовары.Сумма
	|	ИЗ
	|		ВТ_Заказы КАК ВТ_Заказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|				ПО ВозвратТоваровОтПокупателя.Ссылка = ВозвратТоваровОтПокупателяТовары.Ссылка
	|			ПО ВТ_Заказы.Номер = ВозвратТоваровОтПокупателя.Номер) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.НомерГосударственнойРегистрации КАК НомерТранспорта,
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт.Наименование КАК Транспорт,
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияС КАК ВремяПрибытияС,
	|	ДополнительныеПараметрыЗаказа.Доставка.ВремяПрибытияПо КАК ПрибытияПо,
	|	ДополнительныеПараметрыЗаказа.СсылкаНаОтслеживание КАК СсылкаНаОтслеживание,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель.Наименование КАК Водитель,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Наименование КАК Экспедитор,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ВладелецТовара.Код = ""Shop_101""
	|			ТОГДА ВТ_Заказы.ОсновнойМагазин.Наименование
	|		ИНАЧЕ ВТ_Заказы.ВладелецТовара.Наименование
	|	КОНЕЦ КАК ИнтернетМагазин,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ВладелецТовара.Родитель.Код = ""Shop_101""
	|			ТОГДА ВТ_Заказы.ОсновнойМагазин
	|		ИНАЧЕ ВТ_Заказы.ВладелецТовара
	|	КОНЕЦ КАК ИнтернетМагазинСсылка,
	|	РеализацияТоваровУслуг.Контрагент.Наименование КАК Получатель,
	|	ВЫБОР
	|		КОГДА ОперативноеНазначениеТАНаРейсСрезПоследних.ТА ЕСТЬ NULL
	|			ТОГДА ТелефонныеАппаратыТранспортаСрезПоследних.ТА.Телефон
	|		ИНАЧЕ ОперативноеНазначениеТАНаРейсСрезПоследних.ТА.Телефон
	|	КОНЕЦ КАК ТелефонЭкипажа,
	|	РеализацияТоваровУслуг.Телефон КАК Телефон,
	|	ЛОЖЬ КАК Отправлено,
	|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка.ТочкаПрибытия.Москва, ЛОЖЬ) КАК ЭтоМосква,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ТипОплаты = 7
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_СуммыЗаказов.Сумма, 0)
	|	КОНЕЦ КАК СуммаЗаказа,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ТипОплаты = 7
	|			ТОГДА 0
	|		ИНАЧЕ ДополнительныеПараметрыЗаказа.КОплатеКлиентом
	|	КОНЕЦ КАК КОплатеКлиентом,
	|	РеализацияТоваровУслуг.УчитыватьИтогоКОплате КАК УчитыватьИтогоКОплате,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель.ИмяЛатиницей КАК ВодительЛатиницей,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ИмяЛатиницей КАК ЭкспедиторЛатиницей,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ВладелецТовара.Родитель.Код = ""Shop_101""
	|			ТОГДА ПараметрыКонтрагентовСрезПоследнихИМ.НаименованиеЛатиницей
	|		ИНАЧЕ ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей
	|	КОНЕЦ КАК НаименованиеЛатиницей,
	|	ЕСТЬNULL(ПараметрыТарифаЗаказаСрезПоследних.ЗонаТарификации.Код, """") КАК КодЗоныТарификации,
	|	РеализацияТоваровУслуг.ТипОплаты КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Учитывать, ЛОЖЬ)
	|				И (ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследнихИМ.ИспользоватьКодИдентификацииКлиента, ЛОЖЬ))
	|			ТОГДА ЕСТЬNULL(ДополнительныеПараметрыЗаказа.КодИдентификацииКлиента, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодИдентификацииКлиента
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВТ_Заказы.Заказ = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелефонныеАппаратыТранспорта.СрезПоследних КАК ТелефонныеАппаратыТранспортаСрезПоследних
	|			ПО ПривязкаМашинКРейсамСрезПоследних.Транспорт = ТелефонныеАппаратыТранспортаСрезПоследних.Транспорт
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперативноеНазначениеТАНаРейс.СрезПоследних(, Рейс = &Рейс) КАК ОперативноеНазначениеТАНаРейсСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммыЗаказов КАК ВТ_СуммыЗаказов
	|		ПО ВТ_Заказы.Заказ = ВТ_СуммыЗаказов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_Заказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.ВладелецТовара КАК ВладелецТовара
	|					ИЗ
	|						ВТ_Заказы КАК ВТ_Заказы)) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО ВТ_Заказы.ВладелецТовара = ПараметрыКонтрагентовСрезПоследних.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.ОсновнойМагазин КАК ОсновнойМагазин
	|					ИЗ
	|						ВТ_Заказы КАК ВТ_Заказы)) КАК ПараметрыКонтрагентовСрезПоследнихИМ
	|		ПО ВТ_Заказы.ОсновнойМагазин = ПараметрыКонтрагентовСрезПоследнихИМ.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТипыОплатТребованиеИдентификацииКлиентов.СрезПоследних(
	|				,
	|				(Партнер, ТипОплаты) В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.ВладелецТовара КАК ВладелецТовара,
	|						ВТ_Заказы.ТипОплаты КАК ТипОплаты
	|					ИЗ
	|						ВТ_Заказы КАК ВТ_Заказы)) КАК ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних
	|		ПО ВТ_Заказы.ВладелецТовара = ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Партнер
	|			И ВТ_Заказы.ТипОплаты = ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.ТипОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.Заказ КАК Заказ
	|					ИЗ
	|						ВТ_Заказы КАК ВТ_Заказы)) КАК ПараметрыТарифаЗаказаСрезПоследних
	|		ПО ВТ_Заказы.Заказ = ПараметрыТарифаЗаказаСрезПоследних.Заказ";
	//Асеев 23.08.2022 (Задача № 4877)<<<
	
    Зап.УстановитьПараметр("Дата1", НачалоДня(ДатаСбораДанных));			
    Зап.УстановитьПараметр("Дата2", КонецДня(ДатаСбораДанных));			
    Зап.УстановитьПараметр("Оператор", Оператор);			
    Зап.УстановитьПараметр("ТипСМСРассылки", ШаблонРассылки.ТипСМСРассылки);
    Зап.УстановитьПараметр("Рейс", Рейс);
	
    Рез = Зап.Выполнить().Выгрузить();
    
    Возврат Рез;
	
КонецФункции

Функция ПодставитьПараметрыНовый(ИсходныйТекст, Объект, Падеж) Экспорт
    
    Результат = ИсходныйТекст;
        
    ТелефонЭкипажа = СокрЛП(Объект.ТелефонЭкипажа);
    
    Если Лев(ТелефонЭкипажа, 1) <> "8" Тогда
        ТелефонЭкипажа = "8" + ТелефонЭкипажа;
    КонецеСли;	
    Результат = СтрЗаменить(Результат, "[ExNumber]", Объект.НомерВнешнегоЗаказа);
    Результат = СтрЗаменить(Результат, "[PhoneCar]", ТелефонЭкипажа);
	//+++++Серегин М.В. 11.03.2016 13:18:01 было Результат = СтрЗаменить(Результат, "[Summa]", Формат(Число(Объект.СуммаЗаказа), "ЧДЦ=2; ЧН=0; ЧГ="));
    Если Объект.УчитыватьИтогоКОплате Тогда
        Результат = СтрЗаменить(Результат, "[Summa]", Формат(Число(Объект.КОплатеКлиентом), "ЧДЦ=2; ЧН=0; ЧГ=")); 
    Иначе
        Результат = СтрЗаменить(Результат, "[Summa]", Формат(Число(Объект.СуммаЗаказа), "ЧДЦ=2; ЧН=0; ЧГ="));
    КонецЕсли;
    //Серегин М.В. 03.06.2015 17:04:01
    Если Объект.ЭтоМосква Тогда
        IntervalS = Объект.ВремяПрибытияС;
        IntervalPO = Объект.ПрибытияПо;                        
    Иначе
        IntervalS = НачалоДня(Объект.ВремяПрибытияС)+32400;
        IntervalPO = НачалоДня(Объект.ПрибытияПо)+79200;
    КонецЕсли;
    Результат = СтрЗаменить(Результат, "[IntervalS]", Формат(IntervalS,"ДФ=HH:mm"));
    Результат = СтрЗаменить(Результат, "[IntervalPO]", Формат(IntervalPO,"ДФ=HH:mm"));
	Результат = СтрЗаменить(Результат, "[Date]", Формат(Объект.Дата,"ДФ=dd.MM.yyyy"));
	Результат = СтрЗаменить(Результат, "[IM]", Объект.ИнтернетМагазин);
	
	Если ЗначениеЗаполнено(Объект.НаименованиеЛатиницей) Тогда
		Результат = СтрЗаменить(Результат, "[IMLat]", Объект.НаименованиеЛатиницей);
	Иначе
		Результат = СтрЗаменить(Результат, "[IMLat]", Объект.ИнтернетМагазин);	
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.Экспедитор) Тогда
		ФИОЭкспедитора = СокрЛП(Объект.Экспедитор);
		// Якурнов 23.08.2018 17:45:39
		Попытка
			ФИОЭкспедитора = smv.ПолучитьСклонениеФИОВстроенный(ФИОЭкспедитора, Падеж);
		Исключение
		КонецПопытки;
	    ФИОЭкспедитора = СтрЗаменить(ФИОЭкспедитора, " ", Символы.ПС);
		ИмяЭкспедитора = СтрПолучитьСтроку(ФИОЭкспедитора, 2);
		Результат = СтрЗаменить(Результат, "[Name]", ИмяЭкспедитора);
		Результат = СтрЗаменить(Результат, "[NameLat]", Объект.ЭкспедиторЛатиницей);		
	Иначе
		ФИОВод = СокрЛП(Объект.Водитель);
		// Якурнов 23.08.2018 17:45:39
		Попытка
			ФИОВод = smv.ПолучитьСклонениеФИОВстроенный(ФИОВод, Падеж);
		Исключение
		КонецПопытки;
		ФИОВод = СтрЗаменить(ФИОВод, " ", Символы.ПС);
		ИмяВод = СтрПолучитьСтроку(ФИОВод, 2);
		Результат = СтрЗаменить(Результат, "[Name]", ИмяВод);
		Результат = СтрЗаменить(Результат, "[NameLat]", Объект.ВодительЛатиницей);		
	КонецЕсли;
	
	КОплатеКлиентом = ?(Объект.КОплатеКлиентом=NULL, 0, Объект.КОплатеКлиентом);
	Результат = СтрЗаменить(Результат, "[SummaOplYa]", КОплатеКлиентом);
	//--- Костя 25.08.2015
    
    Возврат Результат;
КонецФункции

//Загрузка АПП по шаблону в ПриходЗаказовНаСклад Вызывается из lem.ЗагрузкаАктовПППочтой 
Функция ЗагрузкаАктовПП(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено) Экспорт
	ТабОшибок = Новый ТаблицаЗначений;
    ТабОшибок.Колонки.Добавить("Номер");
    ТабОшибок.Колонки.Добавить("Ошибка");
    ТабОшибок.Колонки.Добавить("Кол");
	
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	ТабДок = Новый ТабличныйДокумент;
	Если Не lem.ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТабЗагруженных = Новый ТаблицаЗначений;
    ТабЗагруженных.Колонки.Добавить("Номер");
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП, ЛОЖЬ) КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Поле1) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО (ИСТИНА)";
	ВыборкаПараметрыКонтрагента = Запрос.Выполнить().Выбрать();
	ВыборкаПараметрыКонтрагента.Следующий();
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
	НовДок = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
	НовДок.Дата = ТекущаяДата();
    НовДок.Контрагент = Контрагент;
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	НовДок.ОбновлятьКоличествоМестЗаказов = ВыборкаПараметрыКонтрагента.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
	НомерДокумента = ПолучитьПолеШапки("НомерНакладной", ШаблонЗагрузки,ТабДок);
	ДатаДокумента = ПолучитьДатуИзСтр(СокрЛП(ПолучитьПолеШапки("ДатаНакладной", ШаблонЗагрузки,ТабДок)));
	Попытка
    	НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента);
    	НовДок.ДатаВходящегоДокумента = ДатаДокумента;
    Исключение	
    	НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента) + " от " + СокрЛП(ДатаДокумента);
	КонецПопытки;
	
	Для СчСтрок = ШаблонЗагрузки.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Значение = СокрЛП(ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(1, "ЧГ=")).Текст);
		Если Значение = "" тогда
			Прервать;
		КонецЕсли;
		СтрЗаказы = НовДок.Заказы.Добавить();
		Для каждого Поля Из ШаблонЗагрузки.Поля Цикл
			Значение = СокрЛП(ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(Поля.Порядок, "ЧГ=")).Текст);
			Если Строка(Поля.Поле) = "НомерЗаказа" тогда
				НовЗ = ТабЗагруженных.Добавить();
    			НовЗ.Номер = Значение;

				СтрЗаказы.ВнешнийНомерЗаказа = Значение;
				СтрЗаказы.Заказ = НайтиРеализацию(Значение);
				СтрЗаказы.СуммаДокумента = СтрЗаказы.Заказ.СуммаДокумента;
			КонецЕсли;
			Если Строка(Поля.Поле) = "КоличествоМест" тогда
				СтрЗаказы.КоличествоМест = Число(Значение); 	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	НовДок.Основание = Перечисления.ТипыЗагрузкиДанных.EMAIL;
    НовДок.Записать(РежимЗаписиДокумента.Запись);
	//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)>>>
	//НовДок.Записать(РежимЗаписиДокумента.Проведение);
	Попытка
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		pkv.ДобавитьВСписокОтложенногоПроведения(НовДок.Ссылка, "Не удалось провести " + НовДок + " ЗагрузкаАктовПП "+ ТекстОшибки);
	КонецПопытки;
	//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)<<<
	Возврат Истина;	
КонецФункции

Функция ПолучитьПолеШапки(ИмяПоля, ШаблонЗагрузки,ТабДок)
	Стр = ШаблонЗагрузки.ПоляШапки.Найти(Справочники.ПоляДанныхЗагрузки.НайтиПоНаименованию(ИмяПоля),"Поле");
	Значение = ТабДок.Область("R" + Формат(Стр.СтрокаВДокументе, "ЧГ=") +"C" + Формат(Стр.КолонкаВДокументе, "ЧГ=")).Текст;
	Возврат Значение;
КонецФункции

Функция НайтиРеализацию(НомерВнешнегоЗаказа)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа = &НомерВнешнегоЗаказа
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияТоваровУслуг.Дата УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НомерВнешнегоЗаказа", НомерВнешнегоЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Попытка
		РезультатЗапроса.Следующий();
		Возврат РезультатЗапроса.Ссылка;
	Исключение
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецПопытки;
КонецФункции

Функция ПолучитьДатуИзСтр(ДатаСтрока) Экспорт
	//Из строки типа 23.01.2017 делает дату
	Вхож = Найти(ДатаСтрока, ".");
	ДеньМ = Лев(ДатаСтрока, Вхож - 1);
	ДатаСтрока = Прав(ДатаСтрока, СтрДлина(ДатаСтрока) - Вхож);
	
	Вхож = Найти(ДатаСтрока, ".");
	МесяцМ = Лев(ДатаСтрока, Вхож - 1);
	ГодМ = Лев(Прав(ДатаСтрока, СтрДлина(ДатаСтрока) - Вхож),4);
	Возврат Дата(ГодМ+МесяцМ+ДеньМ);
КонецФункции

Функция ПолучитьПочтуИзРассылкиКонтрагентов(Контрагент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РассылкиКонтрагентов.Почта КАК Почта
	|ИЗ
	|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
	|ГДЕ
	|	РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(Перечисление.ТипыРассылки.ЗагрузкаАктовПриемаПередачи)
	|	И РассылкиКонтрагентов.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
КонецФункции
//Конец

Функция ОбъединитьТаблициЗаказовИЗаборов(ТЗаказы, ТЗаборы) Экспорт
	ТЗаказы.Свернуть("Транспорт, Маршрут", "Кол, МГТ, СГТ, КГТ");
	ТЗаборы.Свернуть("Транспорт", "КолЗаборов, Мение, Более");
	ТЗаказы.Сортировать("Кол Убыв");
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
				|	Т2.Транспорт,
	            |	Т2.КолЗаборов,
	            |	Т2.Мение,
	            |	Т2.Более
	            |ПОМЕСТИТЬ Т2
	            |ИЗ
	            |	&ТЗ2 КАК Т2
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	Т1.Транспорт,
	            |	Т1.Маршрут,
	            |	Т1.Кол,
	            |	Т1.МГТ,
	            |	Т1.СГТ,
	            |	Т1.КГТ
	            |ПОМЕСТИТЬ ТЗ1
	            |ИЗ
	            |	&ТЗ1 КАК Т1
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВЫБОР КОГДА Т1.Транспорт ЕСТЬ NULL
				|		ТОГДА ТЗ2.Транспорт ИНАЧЕ Т1.Транспорт КОНЕЦ КАК НомерМашины,
	            |	Т1.Маршрут,
	            |	Т1.Кол,
	            |	Т1.МГТ,
	            |	Т1.СГТ,
	            |	Т1.КГТ,
	            |	ТЗ2.КолЗаборов,
	            |	ТЗ2.Мение,
	            |	ТЗ2.Более
	            |ИЗ
	            |	ТЗ1 КАК Т1
	            |		ПОЛНОЕ СОЕДИНЕНИЕ Т2 КАК ТЗ2
	            |		ПО Т1.Транспорт = ТЗ2.Транспорт";
				
				
	
	Зап.УстановитьПараметр("ТЗ1", ТЗаказы);			
	Зап.УстановитьПараметр("ТЗ2", ТЗаборы); 
	Отчетная = Зап.Выполнить().Выгрузить();
	
	Попытка
		СортированнаяТЗ = Отчетная.Скопировать();
		СортированнаяТЗ.Сортировать("Кол Убыв, КолЗаборов Убыв"); //Сбой сортировк по количеству заказов 2018.01.24
		Возврат СортированнаяТЗ;
	Исключение
		Возврат Отчетная;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСписокКонтрагентов() Экспорт
	Список = новый ТаблицаЗначений;
	Список.Колонки.Добавить("ВладелецТовара");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагеныИсключения.Владелец
		|ИЗ
		|	Справочник.КонтрагеныИсключения КАК КонтрагеныИсключения
		|ГДЕ
		|	КонтрагеныИсключения.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.ТипыСвязейКонтрагентовИсключений.ФактическийПриход)";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр = Список.Добавить();
		Стр.ВладелецТовара = ВыборкаДетальныеЗаписи.Владелец;
		Элем = Справочники.Контрагенты.НайтиПоРеквизиту("ОсновнойМагазин",ВыборкаДетальныеЗаписи.Владелец);
		Если Элем <> Справочники.Контрагенты.ПустаяСсылка() Тогда
			ПолучитьСписокКонтрагентовПоРодителю(Список, Элем);
		КонецЕсли;
	КонецЦикла;
	Возврат Список;
КонецФункции

Процедура ПолучитьСписокКонтрагентовПоРодителю(Список, Родитель)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр = Список.Добавить();
		Стр.ВладелецТовара = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;	
КонецПроцедуры

Функция ДатаСейчас() Экспорт
	Возврат Строка(ТекущаяДата());
КонецФункции

// Реализовать запись событий в БД по триггерам
Процедура ЗаписатьРСКонтрольВремени(Событие, Рейс, ОкончаниеСобытия, Период = Неопределено, Контрагент = Неопределено, Терминал = Неопределено) Экспорт
	
	Если Период = Неопределено ИЛИ Период = Дата("01.01.0001 0:00:00") тогда
		Период = ТекущаяДата();
	КонецЕсли;
	ВыбранныйРегистратор = Документы.РегистрацияСобытияКонтроляВремени.СоздатьДокумент();
	ВыбранныйРегистратор.Дата = Период;
	ВыбранныйРегистратор.Событие = Событие;
	ВыбранныйРегистратор.Рейс = Рейс;
	ВыбранныйРегистратор.Контрагент = Контрагент;
	ВыбранныйРегистратор.ОкончаниеСобытия = ОкончаниеСобытия;
	ВыбранныйРегистратор.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ВыбранныйРегистратор.РабочееМесто = ПараметрыСеанса.РабочееМесто;
	// МАС - 05.06.2017 - №972 --->> 	 
	ВыбранныйРегистратор.Терминал = ?(ЗначениеЗаполнено(рейс), Рейс.ТерминалДоставки, Терминал);
	// <<--- МАС
	ВыбранныйРегистратор.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
КонецПроцедуры
						
Процедура ЗаписатьСобытиеПриходПринципала(Период, Контрагент, Терминал) Экспорт
	Событие = Справочники.СобытияКонтроляВремени.ПриездАвтоКомитента;
	ЗаписатьРСКонтрольВремени(Событие, Неопределено, Истина, Период, Контрагент, Терминал);
КонецПроцедуры						

Процедура ВыгрузкаИз1СВВероут(ОкончаниеСобытия, Терминал) Экспорт
	Событие = Справочники.СобытияКонтроляВремени.ВыгрузкаИз1СВВероут;
	ЗаписатьРСКонтрольВремени(Событие, Неопределено, ОкончаниеСобытия,,, Терминал);
КонецПроцедуры

Процедура ЗагрузкаРейсовИзВероут(ОкончаниеСобытия, Терминал) Экспорт
	Событие = Справочники.СобытияКонтроляВремени.ЗагрузкаРейсовИзВероут;
	ЗаписатьРСКонтрольВремени(Событие, Неопределено, ОкончаниеСобытия,,, Терминал);
КонецПроцедуры

Процедура РаспечаткаМаршрутногоЛиста(Рейс, ОкончаниеСобытия) Экспорт
	Событие = Справочники.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста;
	ЗаписатьРСКонтрольВремени(Событие, Рейс, ОкончаниеСобытия);
КонецПроцедуры

Процедура РаспечаткаРазблюдовкиСклад(Рейс, ОкончаниеСобытия) Экспорт
	Событие = Справочники.СобытияКонтроляВремени.РаспечаткаРазблюдовкиСклад;
	ЗаписатьРСКонтрольВремени(Событие, Рейс, ОкончаниеСобытия);
КонецПроцедуры

Процедура ОкончаниеЗагрузкиВАвто(Рейс) Экспорт
	Событие = Справочники.СобытияКонтроляВремени.ОкончаниеЗагрузкиВАвто;
	ЗаписатьРСКонтрольВремени(Событие, Рейс, Истина);
КонецПроцедуры

Процедура Событие_ОтвязкаЗаказовОтРейсов(ОкончаниеСобытия, Терминал) Экспорт
	Событие = Справочники.СобытияКонтроляВремени.ОтвязкаЗаказовОтРейсов;
	ЗаписатьРСКонтрольВремени(Событие, Неопределено, ОкончаниеСобытия,,, Терминал);
КонецПроцедуры

//+++++++++++++++++++++++++++++++lem
Функция ПроверкаНаОконченностьСобытия(Событие, Терминал) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	КонтрольВремениСрезПоследних.ОкончаниеСобытия КАК ОкончаниеСобытия,
	            |	КонтрольВремениСрезПоследних.Период КАК Период
	            |ИЗ
	            |	РегистрСведений.КонтрольВремени.СрезПоследних(
	            |			,
	            |			Событие.Ссылка = &Событие
	            |				И Терминал.Ссылка = &Терминал) КАК КонтрольВремениСрезПоследних";
	Зап.УстановитьПараметр("Событие", Событие.Ссылка);
	Зап.УстановитьПараметр("Терминал", Терминал.Ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		//Дополнительная проверка на "недавность" последнего события
		Если Не Выб.ОкончаниеСобытия Тогда
			Если ТекущаяДата() - Выб.Период >= 2400 Тогда
				Возврат Истина;
			КонецеСли;
		КонецеСли;		
		//Дополнительная проверка на "недавность" последнего события
		Возврат Выб.ОкончаниеСобытия;
	Иначе
		Возврат Истина;
	КонецеСли;	
КонецФункции	
	
//------------------------------lem	
//КонецОбласти

// Список адресов для ПК Экспресс №350

Функция СформироватьПКЭкспрес(Период) Экспорт
	
	// МАС - 16.11.2017 - № --->> 
	//ТранспортПКЭкспрес = Справочники.ТипыТранспортовВероут.НайтиПоКоду("000000379");
	МассивПКЭкспресс = Новый Массив;
	//МассивПКЭкспресс.Добавить(Справочники.ТипыТранспортовВероут.НайтиПоКоду("000000379"));
	//МассивПКЭкспресс.Добавить(Справочники.ТипыТранспортовВероут.НайтиПоКоду("000001831"));
	//МассивПКЭкспресс.Добавить(Справочники.ТипыТранспортовВероут.НайтиПоКоду("000002103"));
	//МассивПКЭкспресс.Добавить(Справочники.ТипыТранспортовВероут.НайтиПоКоду("000002375"));
	// <<--- МАС 
	
	
	МассивПКЭкспресс.Добавить(Справочники.новаТранспорт.НайтиПоКоду("000352"));
	МассивПКЭкспресс.Добавить(Справочники.новаТранспорт.НайтиПоКоду("000481"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РейсД.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК РейсД
		|		ПО ПривязкаМашинКРейсамСрезПоследних.Рейс = РейсД.Ссылка
		|ГДЕ
		|	РейсД.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон
		|	И РейсД.Проведен = ИСТИНА
		|	И ПривязкаМашинКРейсамСрезПоследних.Транспорт В(&Транспорт)";
	
	//Запрос.УстановитьПараметр("ДатаКон", Период + (60 * 60 *3));
	//Запрос.УстановитьПараметр("ДатаНач", Период - (60 * 60 * 21));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Период));
	
	
	//Запрос.УстановитьПараметр("Транспорт", ТранспортПКЭкспрес);
	Запрос.УстановитьПараметр("Транспорт", МассивПКЭкспресс);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();	
	Возврат СформироватьТабДок(РезультатЗапроса);	
	
КонецФункции

Функция СформироватьТабДок(МассивРейсов)
	Если МассивРейсов.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Обработки.ВыгрузкаМашинВВероут.ПолучитьМакет("ШаблонПКЭкспресс");
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ТабДок.Вывести(ОбластьШапка);
	П = ОбластьСтрока.Параметры;
	
	Пока МассивРейсов.Следующий() Цикл
		Рейс = МассивРейсов.Ссылка;
		Для каждого Заказ из Рейс.Заказы Цикл
			
			П.Стриж = "Стриж";
			П.Дата = Формат(Рейс.ДатаРейса, "ДЛФ=Д");
			П.шт = "шт";
			П.СтоимостьДоставки = 0;
			Док = Заказ.Заказ.Ссылка;
			
			П.Адрес = Док.АдресДоставки;
			П.Телефон = Док.Телефон;
			П.ЗаказаКлиента = Док.НомерВнешнегоЗаказа;
			П.ЗаказаНаш = Док.Номер;
			П.Комментарии = Док.КомментарийСД;
			ОбластьСтрока.Параметры.ТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(Док.ТипОплаты);
			Если ТипЗнч(Док) = Тип("ДокументСсылка.ЗаборТовара") Тогда
				П.КонтактноеЛицо = Док.Грузополучатель;
				П.Дс = Формат(Док.ВремяДоставкиС, "ДЛФ=T");
				П.Ддо = Формат(Док.ВремяДоставкиПо, "ДЛФ=T");
				П.Комплектация = ПолучитьКомплектацию(Док, Ложь);
				П.КоличествоМест = "";
				П.Вес = Док.ВесЗабора;
				П.Объем = Док.ОбъемЗабора;
				П.Стоимость = 0;		
			Иначе
				П.КонтактноеЛицо = Док.Контрагент;
				Время = ПолучитьВремяДоставки(Док.АдресДоставки);
				П.Дс = Формат(Время[0], "ДЛФ=T");
				П.Ддо = Формат(Время[1], "ДЛФ=T");
				П.Комплектация = ПолучитьКомплектацию(Док, Истина);
				П.КоличествоМест = Док.КоличествоМест;
				П.Вес = Док.Товары.Итог("Вес");
				П.Объем = Док.ОбъёмЗаказа;
				П.Стоимость = ПолучитьСтоимость(Док);
			КонецЕсли;
			П.Дс = Лев(П.Дс, СтрДлина(П.Дс) - 3);
			П.Ддо = Лев(П.Ддо, СтрДлина(П.Ддо) - 3);
			ТабДок.Вывести(ОбластьСтрока); 
		КонецЦикла;	
	КонецЦикла;
	Возврат ТабДок;	
КонецФункции

Функция ПолучитьСтоимость(Док)
	Если Док.УчитыватьИтогоКОплате Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеПараметрыЗаказа.КОплатеКлиентом
			|ИЗ
			|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
			|ГДЕ
			|	ДополнительныеПараметрыЗаказа.Заказ = &Заказ";
		
		Запрос.УстановитьПараметр("Заказ", Док);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.КОплатеКлиентом;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ПолучитьКомплектацию(Док, ЭтоРеализация)
	Стр = "";
	Для каждого Элемент из Док.Товары Цикл
		Если Стр <> "" Тогда
			Стр = Стр + ", ";
		КонецЕсли;	
		Стр = Стр + Строка(Элемент.Номенклатура);
	КонецЦикла;
	Если ЭтоРеализация Тогда
		Для каждого Элемент из Док.ПодарочныеПозиции Цикл
			Если Стр <> "" Тогда
				Стр = Стр + ", ";
			КонецЕсли;	
			Стр = Стр + Строка(Элемент.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	Возврат Стр;
КонецФункции

Функция ПолучитьВремяДоставки(Адрес)
	Массив = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	новаМестнаяДоставка.ВремяПрибытияС,
		|	новаМестнаяДоставка.ВремяПрибытияПо
		|ИЗ
		|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|ГДЕ
		|	новаМестнаяДоставка.Адрес = &Адрес
		|
		|УПОРЯДОЧИТЬ ПО
		|	новаМестнаяДоставка.Дата УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Массив.Добавить(ВыборкаДетальныеЗаписи.ВремяПрибытияС);
	Массив.Добавить(ВыборкаДетальныеЗаписи.ВремяПрибытияПо);
	Возврат Массив;
КонецФункции
//КонецОбласти

// МАС - 11.09.2017 - №1788 - новый код --->>
//Создание мест заказа по данным АПП
Процедура РегламентСозданиеМестПоЗаказам() Экспорт
	
	//CeHbKA 21.02.2019 №2833
	МассивРеализаций = Новый Массив;
	//CeHbKA 21.02.2019 №2833
	
	
	Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.РегламентСозданиеМестПоЗаказам_Ошибка);
	
	ТекДата = ТекущаяДата();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Заказ КАК Заказ,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка КАК ПриходЗаказов,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Штрихкод КАК Штрихкод
	               |ПОМЕСТИТЬ ВТ_ПриходЗаказов
	               |ИЗ
	               |	Документ.ПриходЗаказовНаСклад.ШтрихкодыПоМестам КАК ПриходЗаказовНаСкладШтрихкодыПоМестам
	               |ГДЕ
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Проведен = ИСТИНА
	               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Основание В(&Основание)
	               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Контрагент = &ДетскийМир
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Заказ,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.ВнешнийНомерЗаказа,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Штрихкод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПриходЗаказов.Заказ КАК Заказ,
	               |	ВТ_ПриходЗаказов.ПриходЗаказов КАК ПриходЗаказов,
	               |	СозданиеМестПоЗаказам.Период КАК Период,
	               |	ВТ_ПриходЗаказов.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа
	               |ПОМЕСТИТЬ ВТ_РЕЗ
	               |ИЗ
	               |	ВТ_ПриходЗаказов КАК ВТ_ПриходЗаказов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СозданиеМестПоЗаказам КАК СозданиеМестПоЗаказам
	               |		ПО ВТ_ПриходЗаказов.Заказ = СозданиеМестПоЗаказам.Заказ
	               |			И ВТ_ПриходЗаказов.ПриходЗаказов = СозданиеМестПоЗаказам.ПриходЗаказов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_РЕЗ.Заказ КАК Заказ,
	               |	ВТ_РЕЗ.ПриходЗаказов КАК ПриходЗаказов,
	               |	ВТ_РЕЗ.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	               |	ПриходЗаказовНаСкладЗаказы.КоличествоМест КАК КоличествоМест,
	               |	МестаПоЗаказам.Ссылка КАК Ссылка,
	               |	МестаПоЗаказам.Штрихкод КАК Штрихкод,
	               |	ВТ_РЕЗ.Период КАК Период,
	               |	ВТ_РЕЗ.Заказ КАК Заказ1
	               |ИЗ
	               |	ВТ_РЕЗ КАК ВТ_РЕЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаПоЗаказам КАК МестаПоЗаказам
	               |		ПО ВТ_РЕЗ.Заказ = МестаПоЗаказам.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходЗаказовНаСклад.Заказы КАК ПриходЗаказовНаСкладЗаказы
	               |		ПО ВТ_РЕЗ.Заказ = ПриходЗаказовНаСкладЗаказы.Заказ
	               |			И ВТ_РЕЗ.ПриходЗаказов = ПриходЗаказовНаСкладЗаказы.Ссылка
	               |ГДЕ
	               |	(ВТ_РЕЗ.Период ЕСТЬ NULL
	               |			ИЛИ МестаПоЗаказам.Ссылка ЕСТЬ NULL)
	               |	И ВТ_РЕЗ.Заказ <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_РЕЗ.Заказ,
	               |	ВТ_РЕЗ.ПриходЗаказов,
	               |	ВТ_РЕЗ.ВнешнийНомерЗаказа,
	               |	ПриходЗаказовНаСкладЗаказы.КоличествоМест,
	               |	МестаПоЗаказам.Ссылка,
	               |	МестаПоЗаказам.Штрихкод,
	               |	ВТ_РЕЗ.Период,
	               |	ВТ_РЕЗ.Заказ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриходЗаказов,
	               |	Заказ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	ОснМас = Новый Массив;
	ОснМас.Добавить(Перечисления.ТипыЗагрузкиДанных.WEBСервисСтриж_carriage);
	ОснМас.Добавить(Перечисления.ТипыЗагрузкиДанных.WEBСервисOZON);
	
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекДата));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекДата - (60 * 60 * 24 * 2)));
	Запрос.УстановитьПараметр("Основание", ОснМас);
	Запрос.УстановитьПараметр("ДетскийМир", Справочники.Контрагенты.НайтиПоКоду("Shop_428"));
	
	//+++ БАО 06.09.2017 №1788 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		
		Если ЗначениеЗаполнено(Выборка.Заказ) Тогда	
			
			Попытка
				
				НачатьТранзакцию();
				
				// МАС - 11.09.2017 - №1788 --->> 
				//Для Сч = 1 По Выборка.КоличествоМест + 1 Цикл	// зачем +1 ??		
				Для Сч = 1 По Выборка.КоличествоМест Цикл
				// <<--- МАС 
					
					Штрихкод =  "" + Выборка.ВнешнийНомерЗаказа + "0" + Формат(Сч, "ЧГ=0");
					
					Спр = Справочники.МестаПоЗаказам.СоздатьЭлемент();
					Спр.Заказ = Выборка.Заказ;
					//---Спр.ИдентификаторМеста = Элем.ИдентификаторМеста;
					Спр.ИдентификаторМеста = 0;
					Спр.Штрихкод = Штрихкод;
					Спр.Записать();
					
					// МАС - 11.09.2017 - №1788 - не было записи, ШК создавались снова и снова --->>
					Наб = РегистрыСведений.СозданиеМестПоЗаказам.СоздатьНаборЗаписей();
					Наб.Отбор.Период.Установить(ТекДата);
					Наб.Отбор.ПриходЗаказов.Установить(Выборка.ПриходЗаказов);
					Наб.Отбор.Заказ.Установить(Выборка.Заказ);
					Наб.Отбор.МестоЗаказа.Установить(Спр.Ссылка);
					
					Нов = Наб.Добавить();
					Нов.Период = ТекДата;
					Нов.ПриходЗаказов = Выборка.ПриходЗаказов;
					Нов.Заказ = Выборка.Заказ;
					Нов.МестоЗаказа = Спр.Ссылка;
					Наб.Записать();
					// <<--- МАС 
					
					Наб = РегистрыСведений.ШтрихкодыЗаказов.СоздатьНаборЗаписей();
					Наб.Отбор.Заказ.Установить(Выборка.Заказ);
					Наб.Отбор.Штрихкод.Установить(Штрихкод);
					Наб.Прочитать();
					
					Нов = Наб.Добавить();
					Нов.Заказ = Выборка.Заказ;
					Нов.Штрихкод = Штрихкод;
					Нов.ШКПереданПартнером = Истина;
					Наб.Записать();
					
				КонецЦикла;	
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
								
				ОтменитьТранзакцию();
				
				
				Если Мас.Количество() > 0 Тогда
					
					ТекстПисьма = "Описание ошибки: " + Символы.ПС + ОписаниеОшибки();
					
					lem.ОтправитьСообщение(Мас, "РегламентСозданиеМестПоЗаказам - ошибка", ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст); 		
					
				КонецЕсли;   
				
				Прервать;

				
			КонецПопытки;
			
			//CeHbKA 21.02.2019 №2833
			МассивРеализаций.Добавить(Выборка.Заказ);
			//CeHbKA 21.02.2019 №2833
			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	
	// МАС - 06.02.2018 - избавление от создания дублей мест по заказу при дублировании АПП --->>
	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Заказ КАК Заказ,
	//               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.ИдентификаторМеста КАК ИдентификаторМеста,
	//               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Штрихкод КАК Штрихкод,
	//               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Ссылка КАК ПриходЗаказов
	//               |ПОМЕСТИТЬ ВТ_ПриходЗаказов
	//               |ИЗ
	//               |	Документ.ПриходЗаказовНаСклад.ШтрихкодыПоМестам КАК ПриходЗаказовНаСкладШтрихкодыПоМестам
	//               |ГДЕ
	//               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Проведен = ИСТИНА
	//               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Основание = &Основание
	//               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Контрагент <> &ДетскийМир
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВТ_ПриходЗаказов.Заказ КАК Заказ,
	//               |	ВТ_ПриходЗаказов.ИдентификаторМеста КАК ИдентификаторМеста,
	//               |	ВТ_ПриходЗаказов.Штрихкод КАК Штрихкод,
	//               |	ВТ_ПриходЗаказов.ПриходЗаказов КАК ПриходЗаказов,
	//               |	СозданиеМестПоЗаказам.Период КАК Период
	//               |ПОМЕСТИТЬ ВТ_РЕЗ
	//               |ИЗ
	//               |	ВТ_ПриходЗаказов КАК ВТ_ПриходЗаказов
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СозданиеМестПоЗаказам КАК СозданиеМестПоЗаказам
	//               |		ПО ВТ_ПриходЗаказов.Заказ = СозданиеМестПоЗаказам.Заказ
	//               |			И ВТ_ПриходЗаказов.ПриходЗаказов = СозданиеМестПоЗаказам.ПриходЗаказов
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ВТ_РЕЗ.Заказ КАК Заказ,
	//               |	ВТ_РЕЗ.ИдентификаторМеста КАК ИдентификаторМеста,
	//               |	ВТ_РЕЗ.Штрихкод КАК Штрихкод,
	//               |	ВТ_РЕЗ.ПриходЗаказов КАК ПриходЗаказов
	//               |ИЗ
	//               |	ВТ_РЕЗ КАК ВТ_РЕЗ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаПоЗаказам КАК МестаПоЗаказам
	//               |		ПО ВТ_РЕЗ.Заказ = МестаПоЗаказам.Заказ
	//               |			И ВТ_РЕЗ.Штрихкод = МестаПоЗаказам.Штрихкод
	//               |ГДЕ
	//               |	(ВТ_РЕЗ.Период ЕСТЬ NULL
	//               |			ИЛИ МестаПоЗаказам.Ссылка ЕСТЬ NULL)
	//               |	И ВТ_РЕЗ.Заказ <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ВТ_РЕЗ.Заказ,
	//               |	ВТ_РЕЗ.ИдентификаторМеста,
	//               |	ВТ_РЕЗ.Штрихкод,
	//               |	ВТ_РЕЗ.ПриходЗаказов
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ПриходЗаказов,
	//               |	Заказ
	//               |АВТОУПОРЯДОЧИВАНИЕ";

	 
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Заказ КАК Заказ,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.ИдентификаторМеста КАК ИдентификаторМеста,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Штрихкод КАК Штрихкод,
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Ссылка КАК ПриходЗаказов
	               |ПОМЕСТИТЬ ВТ_ПриходЗаказов
	               |ИЗ
	               |	Документ.ПриходЗаказовНаСклад.ШтрихкодыПоМестам КАК ПриходЗаказовНаСкладШтрихкодыПоМестам
	               |ГДЕ
	               |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Проведен = ИСТИНА
	               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Основание В(&Основание)
	               |	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Контрагент <> &ДетскийМир
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПриходЗаказов.Заказ КАК Заказ,
	               |	ВТ_ПриходЗаказов.ИдентификаторМеста КАК ИдентификаторМеста,
	               |	ВТ_ПриходЗаказов.Штрихкод КАК Штрихкод,
	               |	ВТ_ПриходЗаказов.ПриходЗаказов КАК ПриходЗаказов,
	               |	СозданиеМестПоЗаказам.Период КАК Период
	               |ПОМЕСТИТЬ ВТ_РЕЗ
	               |ИЗ
	               |	ВТ_ПриходЗаказов КАК ВТ_ПриходЗаказов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СозданиеМестПоЗаказам КАК СозданиеМестПоЗаказам
	               |		ПО ВТ_ПриходЗаказов.Заказ = СозданиеМестПоЗаказам.Заказ
	               |			И ВТ_ПриходЗаказов.Штрихкод = СозданиеМестПоЗаказам.МестоЗаказа.Штрихкод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_РЕЗ.Заказ КАК Заказ,
	               |	ВТ_РЕЗ.ИдентификаторМеста КАК ИдентификаторМеста,
	               |	ВТ_РЕЗ.Штрихкод КАК Штрихкод,
	               |	МАКСИМУМ(ВТ_РЕЗ.ПриходЗаказов) КАК ПриходЗаказов
	               |ИЗ
	               |	ВТ_РЕЗ КАК ВТ_РЕЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаПоЗаказам КАК МестаПоЗаказам
	               |		ПО ВТ_РЕЗ.Заказ = МестаПоЗаказам.Заказ
	               |			И ВТ_РЕЗ.Штрихкод = МестаПоЗаказам.Штрихкод
	               |			И (МестаПоЗаказам.ПометкаУдаления = ЛОЖЬ)
	               |ГДЕ
	               |	(ВТ_РЕЗ.Период ЕСТЬ NULL
	               |			ИЛИ МестаПоЗаказам.Ссылка ЕСТЬ NULL)
	               |	И ВТ_РЕЗ.Заказ <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_РЕЗ.Заказ,
	               |	ВТ_РЕЗ.ИдентификаторМеста,
	               |	ВТ_РЕЗ.Штрихкод
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриходЗаказов,
	               |	Заказ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	// <<--- МАС

	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Для каждого Элем из РезультатЗапроса Цикл
			
			Если ЗначениеЗаполнено(Элем.Заказ) Тогда	
				
				//+++ БАО 07.08.2017 №
				Попытка
				//--- БАО 07.08.2017 №
				
					НачатьТранзакцию();
					
					Спр = Справочники.МестаПоЗаказам.СоздатьЭлемент();
					Спр.Заказ = Элем.Заказ;
					Спр.ИдентификаторМеста = Элем.ИдентификаторМеста;
					Спр.Штрихкод = Элем.Штрихкод;
					Спр.Записать();
					
					Наб = РегистрыСведений.СозданиеМестПоЗаказам.СоздатьНаборЗаписей();
					Наб.Отбор.Период.Установить(ТекДата);
					Наб.Отбор.ПриходЗаказов.Установить(Элем.ПриходЗаказов);
					Наб.Отбор.Заказ.Установить(Элем.Заказ);
					Наб.Отбор.МестоЗаказа.Установить(Спр.Ссылка);
					
					Нов = Наб.Добавить();
					Нов.Период = ТекДата;
					Нов.ПриходЗаказов = Элем.ПриходЗаказов;
					Нов.Заказ = Элем.Заказ;
					Нов.МестоЗаказа = Спр.Ссылка;
					Наб.Записать();	
					
					// МАС - 14.07.2017 - №1228 --->> 			
					Наб = РегистрыСведений.ШтрихкодыЗаказов.СоздатьНаборЗаписей();
					Наб.Отбор.Заказ.Установить(Элем.Заказ);
					Наб.Отбор.Штрихкод.Установить(Элем.Штрихкод);
					Наб.Прочитать();
					
					Нов = Наб.Добавить();
					Нов.Заказ = Элем.Заказ;
					Нов.Штрихкод = Элем.Штрихкод;
					Нов.ШКПереданПартнером = Истина;
					
					Наб.Записать();
					// <<--- МАС
					
					ЗафиксироватьТранзакцию();
					
				//+++ БАО 07.08.2017 №	
				Исключение
				
					ОтменитьТранзакцию();
					
					
					Если Мас.Количество() > 0 Тогда
						
						ТекстПисьма = "Описание ошибки: " + Символы.ПС + ОписаниеОшибки();
											
						lem.ОтправитьСообщение(Мас, "РегламентСозданиеМестПоЗаказам - ошибка", ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст); 		
						
					КонецЕсли;
					
					// МАС - 26.08.2017 - корректная обработка исключения явной транзакции --->>
										Прервать;
					// <<--- МАС

					
				КонецПопытки;
				//--- БАО 07.08.2017 №
				
				//CeHbKA 21.02.2019 №2833
				МассивРеализаций.Добавить(Выборка.Заказ);
				//CeHbKA 21.02.2019 №2833				
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	//--- БАО 06.09.2017 №1788 
	
	//CeHbKA 21.02.2019 №2833	
	РаботаСМестамиЗаказовСервер.ЗаполнитьМестаЗаказовРТиУ(МассивРеализаций);
	//CeHbKA 21.02.2019 №2833
	
КонецПроцедуры
//КонецОбласти
// <<--- МАС (новый код) 


// МАС - 11.09.2017 - №1788 - старый код --->> 
////Создание мест заказа по данным АПП
//Процедура РегламентСозданиеМестПоЗаказам() Экспорт
//	
//	
//	Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.РегламентСозданиеМестПоЗаказам_Ошибка);
//	
//	ТекДата = ТекущаяДата();
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ПриходЗаказовНаСкладШтрихкодыПоМестам.Заказ КАК Заказ,
//		|	ПриходЗаказовНаСкладШтрихкодыПоМестам.ИдентификаторМеста КАК ИдентификаторМеста,
//		|	ПриходЗаказовНаСкладШтрихкодыПоМестам.Штрихкод КАК Штрихкод,
//		|	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Ссылка КАК ПриходЗаказов
//		|ПОМЕСТИТЬ ВТ_ПриходЗаказов
//		|ИЗ
//		|	Документ.ПриходЗаказовНаСклад.ШтрихкодыПоМестам КАК ПриходЗаказовНаСкладШтрихкодыПоМестам
//		|ГДЕ
//		|	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Проведен = ИСТИНА
//		|	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
//		|	И ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка.Основание = &Основание
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_ПриходЗаказов.Заказ КАК Заказ,
//		|	ВТ_ПриходЗаказов.ИдентификаторМеста КАК ИдентификаторМеста,
//		|	ВТ_ПриходЗаказов.Штрихкод КАК Штрихкод,
//		|	ВТ_ПриходЗаказов.ПриходЗаказов КАК ПриходЗаказов,
//		|	СозданиеМестПоЗаказам.Период КАК Период
//		|ПОМЕСТИТЬ ВТ_РЕЗ
//		|ИЗ
//		|	ВТ_ПриходЗаказов КАК ВТ_ПриходЗаказов
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СозданиеМестПоЗаказам КАК СозданиеМестПоЗаказам
//		|		ПО ВТ_ПриходЗаказов.Заказ = СозданиеМестПоЗаказам.Заказ
//		|			И ВТ_ПриходЗаказов.ПриходЗаказов = СозданиеМестПоЗаказам.ПриходЗаказов
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_РЕЗ.Заказ КАК Заказ,
//		|	ВТ_РЕЗ.ИдентификаторМеста КАК ИдентификаторМеста,
//		|	ВТ_РЕЗ.Штрихкод КАК Штрихкод,
//		|	ВТ_РЕЗ.ПриходЗаказов КАК ПриходЗаказов
//		|ИЗ
//		|	ВТ_РЕЗ КАК ВТ_РЕЗ
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаПоЗаказам КАК МестаПоЗаказам
//		|		ПО ВТ_РЕЗ.Заказ = МестаПоЗаказам.Заказ
//		|			И ВТ_РЕЗ.Штрихкод = МестаПоЗаказам.Штрихкод
//		|ГДЕ
//		|	(ВТ_РЕЗ.Период ЕСТЬ NULL
//		|			ИЛИ МестаПоЗаказам.Ссылка ЕСТЬ NULL)
//		|	И ВТ_РЕЗ.Заказ <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_РЕЗ.Заказ,
//		|	ВТ_РЕЗ.ИдентификаторМеста,
//		|	ВТ_РЕЗ.Штрихкод,
//		|	ВТ_РЕЗ.ПриходЗаказов
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ПриходЗаказов,
//		|	Заказ
//		|АВТОУПОРЯДОЧИВАНИЕ";
//			
//	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекДата));
//	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекДата - (60 * 60 * 24 * 2)));
//	Запрос.УстановитьПараметр("Основание", Перечисления.ТипыЗагрузкиДанных.WEBСервисСтриж_carriage);
//	
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	
//	Если РезультатЗапроса.Количество() > 0 Тогда
//		Для каждого Элем из РезультатЗапроса Цикл
//			
//			Если ЗначениеЗаполнено(Элем.Заказ) Тогда	
//				
//				//+++ БАО 07.08.2017 №
//				Попытка
//				//--- БАО 07.08.2017 №
//				
//					НачатьТранзакцию();
//					
//					Спр = Справочники.МестаПоЗаказам.СоздатьЭлемент();
//					Спр.Заказ = Элем.Заказ;
//					Спр.ИдентификаторМеста = Элем.ИдентификаторМеста;
//					Спр.Штрихкод = Элем.Штрихкод;
//					Спр.Записать();
//					
//					Наб = РегистрыСведений.СозданиеМестПоЗаказам.СоздатьНаборЗаписей();
//					Наб.Отбор.Период.Установить(ТекДата);
//					Наб.Отбор.ПриходЗаказов.Установить(Элем.ПриходЗаказов);
//					Наб.Отбор.Заказ.Установить(Элем.Заказ);
//					Наб.Отбор.МестоЗаказа.Установить(Спр.Ссылка);
//					
//					Нов = Наб.Добавить();
//					Нов.Период = ТекДата;
//					Нов.ПриходЗаказов = Элем.ПриходЗаказов;
//					Нов.Заказ = Элем.Заказ;
//					Нов.МестоЗаказа = Спр.Ссылка;
//					Наб.Записать();	
//					
//					// МАС - 14.07.2017 - №1228 --->> 			
//					Наб = РегистрыСведений.ШтрихкодыЗаказов.СоздатьНаборЗаписей();
//					Наб.Отбор.Заказ.Установить(Элем.Заказ);
//					Наб.Отбор.Штрихкод.Установить(Элем.Штрихкод);
//					Наб.Прочитать();
//					
//					Нов = Наб.Добавить();
//					Нов.Заказ = Элем.Заказ;
//					Нов.Штрихкод = Элем.Штрихкод;
//					
//					
//					Наб.Записать();
//					// <<--- МАС
//					
//					ЗафиксироватьТранзакцию();
//					
//				//+++ БАО 07.08.2017 №	
//				Исключение
//					
//	
//					Если Мас.Количество() > 0 Тогда
//						
//						ТекстПисьма = "Описание ошибки: " + Символы.ПС + ОписаниеОшибки();
//											
//						lem.ОтправитьСообщение(Мас, "РегламентСозданиеМестПоЗаказам - ошибка", ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст); 		
//						
//					КонецЕсли;
//					
//					// МАС - 26.08.2017 - корректная обработка исключения явной транзакции --->>
//					ОтменитьТранзакцию();
//					Прервать;
//					// <<--- МАС

//					
//				КонецПопытки;
//				//--- БАО 07.08.2017 №
//				
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//	КонецЕсли;	
//	
//КонецПроцедуры
////КонецОбласти
// <<--- МАС (старый код)

//Доработка документа закрытия, задача 2 (доработка документа КорректировкаУслугСД)
Процедура ИзменитьОбъект(Объект) Экспорт
	//Объект = Документы.КорректировкаУслугСД.СоздатьДокумент();	
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	РеалДок = Объект.Заказ;
	КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(РеалДок.ВладелецТовара.Код),"_");
	КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
	//Асеев 21.05.2021 (Задача № 4571)>>>
	//ИтВес = Объект.ВесЗаказа;
	Если Объект.ТарификацияПоОбъемномуВесу Тогда
		ИтВес = Объект.ТарифицируемыйОбъемныйВес;
	Иначе
		ИтВес = Объект.ВесЗаказа;
	КонецЕсли;
	//Асеев 21.05.2021 (Задача № 4571)<<<
	
	НайдСтр = Объект.ЗакрытиеЗаказов.Заказы.Найти(Объект.Заказ,"Реализация"); 
	ТипЗаказа = НайдСтр.ТипЗаказа;
	ЗонаТариф = РеалДок.ЗонаТарификации.КодТарифа;
	Если ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз Тогда
		ТипД = "1";
	Иначе
		ТипД = "0";
	КонецеСли;	
	sourcePlaceId   = РеалДок.ТерминалПриема.Код;
	deliveryPlaceId = РеалДок.ТерминалДоставки.Код;
	
	ФТР = "dbo.fn_getTariffID(" + КодКонтр + ",'" + Евген.ДатаВSQL(РеалДок.Дата, Ложь) +  "'," + Формат(РеалДок.ТарифнаяСетка.Код, "ЧГ=") + "," + sourcePlaceId + "," + deliveryPlaceId + ")";
	
	СтрокаЗапроса = КодКонтр + ",0,0," + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + "," + СокрЛП(Формат(РеалДок.СуммаДокумента, "ЧРД=.; ЧН=0; ЧГ=")) + "," + ТипД + "," + ЗонаТариф + "," + ФТР;
	Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + СтрокаЗапроса + ")";
	R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
	ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
	
	Объект.РасчетныйБрейк = НайтиРасчетныйБрейк(ТабК[0].tariffCategoryId_Ч, РеалДок.ТарифнаяСеткаПартнера, РеалДок.ВладелецТовара);
	Объект.КатегорияДоставки = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория",ТабК[0].weightCategoryId_Ч);
	Объект.ЧистыеУслугиСД = ТабК[0].deliveryPrice_Ч; 
КонецПроцедуры

Функция НайтиРасчетныйБрейк(КодБрейка, ТарифнаяСетка, КонтрАгент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетныеБрейки.Ссылка,
		|	РасчетныеБрейки.Владелец
		|ИЗ
		|	Справочник.РасчетныеБрейки КАК РасчетныеБрейки
		|ГДЕ
		|	РасчетныеБрейки.КодБрейка = &КодБрейка
		|	И РасчетныеБрейки.Владелец.Владелец.Ссылка = &КонтрАгент
		|	И РасчетныеБрейки.Владелец.Ссылка = &ТарифнаяСетка";
		
	
	Запрос.УстановитьПараметр("КодБрейка", КодБрейка);
	Запрос.УстановитьПараметр("ТарифнаяСетка", ТарифнаяСетка);
	Запрос.УстановитьПараметр("КонтрАгент", КонтрАгент);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		ВызватьИсключение("Не найден расчетный брейк с кодом " + Строка(КодБрейка) + " по Тарифной сетке " + Строка(ТарифнаяСетка) + " у контрагента " + Строка(КонтрАгент));	
	КонецЕсли;
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
КонецФункции

Функция ПолучитьТарифы(ДатаЗакрытия) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТарифыРасчетаЗПСрезПоследних.ТипЭкипажа,
	            |	ТарифыРасчетаЗПСрезПоследних.УчастникЭкипажа,
	            |	ТарифыРасчетаЗПСрезПоследних.КатегорияДоставки,
	            |	ТарифыРасчетаЗПСрезПоследних.СтоимостьДоМКАД,
	            |	ТарифыРасчетаЗПСрезПоследних.СтоимостьЗаМКАД,
	            |	ТарифыРасчетаЗПСрезПоследних.ТипЗаказа,
	            |	ТарифыРасчетаЗПСрезПоследних.СтоимостьЧас,
	            |	ТарифыРасчетаЗПСрезПоследних.ВидТарифаРасчетаЗП,
	            |	ТарифыРасчетаЗПСрезПоследних.МинимальнаяСтоимость,
	            |	ТарифыРасчетаЗПСрезПоследних.ТипТранспорта,
	            |	ТарифыРасчетаЗПСрезПоследних.СтавкаФрахт,
	            |	ТарифыРасчетаЗПСрезПоследних.ОбъёмЗабора,
	            |	ТарифыРасчетаЗПСрезПоследних.Регион
	            |ИЗ
	            |	РегистрСведений.ТарифыРасчетаЗП.СрезПоследних(&ДатаЗапроса, ) КАК ТарифыРасчетаЗПСрезПоследних";
	Зап.УстановитьПараметр("ДатаЗапроса", КонецДня(ДатаЗакрытия));
	
	Возврат Зап.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьТарифыНаем(ДатаЗакрытия) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.ТипЭкипажа,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.УчастникЭкипажа,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.КатегорияДоставки,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.СтоимостьДоМКАД,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.СтоимостьЗаМКАД,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.ТипЗаказа,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.СтоимостьЧас,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.ВидТарифаРасчетаЗП,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.МинимальнаяСтоимость,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.ТипТранспорта,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.СтавкаФрахт,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.ОбъёмЗабора,
	            |	ТарифыРасчетаЗПНаемникиСрезПоследних.Регион
	            |ИЗ
	            |	РегистрСведений.ТарифыРасчетаЗПНаемники.СрезПоследних(&ДатаЗапроса, ) КАК ТарифыРасчетаЗПНаемникиСрезПоследних";
	Зап.УстановитьПараметр("ДатаЗапроса", КонецДня(ДатаЗакрытия));
	
	Возврат Зап.Выполнить().Выгрузить();
КонецФункции

//КонецОбласти

//Тарифицируемый вес - загружаем тарифицируемый вес из админки в 1С по регл. заданию (только самовывозы!)
Процедура РегламентЗагрузкаТарифицируемогоВесаИзАдминкиПоСамовывозам() Экспорт
	ТабРеал = ПолучитьРеализации();
	Если ТабРеал.Количество() = 0 Тогда	
		Возврат;
	КонецЕсли;
	СтрНомеров = "";
	Для Каждого Элем Из ТабРеал Цикл
		Если СтрНомеров = "" Тогда
			СтрНомеров = Элем.Номер;
		Иначе
			СтрНомеров = СтрНомеров + "," + Элем.Номер;
		КонецЕсли;
	КонецЦикла;
	
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	Стр = "select orderId, chargeableweight from _order where orderId in (" + СтрНомеров + ")";
	R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
	ТабАдминки = Евген.СоздатьТаблицу(R, "orderId, chargeableweight");
	
	ЗаписьТабВРСДополнительныеПараметрыЗаказа(ТабРеал, ТабАдминки);	
КонецПроцедуры

//Процедура ЗаписьТабВРСДополнительныеПараметрыЗаказа(ТабРеал, ТабАдминки)
//CeHbKA #3965 01.02.2021	
Процедура ЗаписьТабВРСДополнительныеПараметрыЗаказа(ТабРеал, ТабАдминки) Экспорт
//CeHbKA #3965 01.02.2021	
	
	Для Каждого Элем Из ТабАдминки Цикл
		
		Номер = СтрЗаменить(Элем.orderId, Символы.НПП, "");
		Найден = ТабРеал.Найти(ПодготовитьСтрокуПодДлинуНомераДокумента(Номер));
		ДокСсылка = Найден.Ссылка;
		
		НаборТВ = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей(); 
        НаборТВ.Отбор.Заказ.Установить(ДокСсылка); 
        НаборТВ.Прочитать();
		
		Если НаборТВ.Количество() Тогда
			// МАС - 28.09.2017 - костыль --->> 
			Если Элем.chargeableweight = "" Тогда
				Элем.chargeableweight = "0";
			КонецЕсли;
			// <<--- МАС 			
        	НаборТВ[0].ТарифицируемыйВес = Число(СтрЗаменить(Элем.chargeableweight, Символы.НПП, "")); 
        КонецЕсли; 
        НаборТВ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРеализации()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|		ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И новаМестнаяДоставка.Ссылка ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата() - (60 * 60 * 24)));
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
//КонецОбласти

Процедура РегламентВыгрузкаРезультатовПоездокВАдминку() Экспорт
	ПодключениеКИМ = Евген.СоздатьПодключениеКИнтернетМагазину();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияЗаказов.Заказ.Номер КАК orderId,
	               |	СостоянияЗаказов.Период КАК tripDate,
	               |	ВЫБОР
	               |		КОГДА СостоянияЗаказов.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.Выполнена)
	               |			ТОГДА 1
	               |		КОГДА СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом)
	               |			ТОГДА 6
	               |	КОНЕЦ КАК tripResult,
	               |	СостоянияЗаказов.Заказ.Ссылка КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	               |		ПО СостоянияЗаказов.Заказ.Номер = новаМестнаяДоставка.Номер
	               |ГДЕ
	               |	СостоянияЗаказов.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И (СостоянияЗаказов.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.Выполнена)
	               |			ИЛИ СостоянияЗаказов.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом))
	               |	И НЕ СостоянияЗаказов.Заказ ЕСТЬ NULL
	               |	И ТИПЗНАЧЕНИЯ(СостоянияЗаказов.Регистратор) = ТИП(Документ.новаОтчетВодителя)";
		
	ТекД = ТекущаяДата() - (60 * 60 * 24);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекД));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекД));
	
	Рез = Запрос.Выполнить().Выбрать();	
	//+Степанов Задача № 3833
	//Асеев 11.09.2024 (Задача № 5321)>>>
	ТаблицаПараметровТарифовЗаказов = ТарификацияУслугСервер.СоздатьТаблицуПараметровТарифовЗаказов();
	//Асеев 11.09.2024 (Задача № 5321)<<<
	//-Степанов Задача № 3833

	Пока Рез.Следующий() Цикл
		ТекстЗапроса = "
		|EXEC import_addOrderTrip " + СокрЛП(Рез.orderId) + ",'" + Евген.ДатаВSQL(Рез.tripDate,Ложь) + "'," + Строка(Рез.tripResult) + "
		|";
		R = Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКИМ);
		Таб = Евген.СоздатьТаблицу(R, "orderid_Ч, ServiceDCClean_Ч, ServiceDC_Ч");
		Если Таб[0].ServiceDCClean_Ч <> NULL И Таб[0].ServiceDC_Ч <> NULL Тогда
			Док = Рез.Ссылка.ПолучитьОбъект();
			Док.УслугиСД = Таб[0].ServiceDC_Ч;
			Док.УслугиСДЧистые = Таб[0].ServiceDCClean_Ч;
			Док.Записать();
			//+Степанов Задача № 3833
			Если ТипЗнч(Рез.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(Рез.Ссылка) Тогда
				СтрокаПараметров = ТаблицаПараметровТарифовЗаказов.Добавить();
				СтрокаПараметров.Заказ = Рез.Ссылка;
				СтрокаПараметров.УслугиСД = ?(Таб[0].ServiceDC_Ч = 0, -1, Таб[0].ServiceDC_Ч); 
				СтрокаПараметров.УслугиСДЧистые = ?(Таб[0].ServiceDCClean_Ч = 0, -1, Таб[0].ServiceDCClean_Ч);
			КонецЕсли;
			//CeHbKA 19.03.2020
			//встречались заказы с двумя статусами (4776743, 4785092)  
			//-Степанов Задача № 3833
		КонецЕсли;
	КонецЦикла;	
	//+Степанов Задача № 3833
	Если ТаблицаПараметровТарифовЗаказов.Количество() Тогда
		ТарификацияУслугСервер.ЗаписатьПараметрыТарифаЗаказа(ТаблицаПараметровТарифовЗаказов);	
	КонецЕсли;	
	//-Степанов Задача № 3833
КонецПроцедуры

//Внести изменения в прием данных по статусам от Акси
Процедура ВнестиИзмененияОтАкси(Заказ, РезультатДоставки, ПричинаНеВыполненияДоставки) Экспорт
	Если РезультатДоставки <> Справочники.новаРезультатМестнойДоставки.Выполнена Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заказ",Заказ);
		СтруктураПараметров.Вставить("Дата", ТекущаяДата());
		СтруктураПараметров.Вставить("РезультатДоставки"  , РезультатДоставки);
		СтруктураПараметров.Вставить("ПричинаНевыполнения", ПричинаНеВыполненияДоставки);
		СтруктураПараметров.Вставить("ДатаЗаказа"         , Заказ.Дата);
		smv.ОтклонитьЗаказПоСтатусуСкладскогоУчета(СтруктураПараметров,Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ИзминениеРасстояниеПоДорогамДляДоставки(Номер, ТочкаОтправления,ТочкаПрибытия) Экспорт
	Если ЗначениеЗаполнено(ТочкаОтправления) И ЗначениеЗаполнено(ТочкаПрибытия) Тогда								
		АдресОтправления = ТочкаОтправления.Адрес;
		АдресПрибытия = ТочкаПрибытия.Адрес;		
		РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(Формат(АдресОтправления.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресОтправления.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."));
		Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда
			Набор = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Номер));
			Набор.Прочитать();
			Если Набор.Количество() Тогда			
				Для каждого Стр Из Набор Цикл					
					Стр.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;	
				КонецЦикла;		
			Иначе
				НЗапись = Набор.Добавить();
				НЗапись.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;
			КонецЕсли;	
		
			Попытка
				Набор.Записать();	
			Исключение				
			КонецПопытки;					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Расчет услуг СД по заборам - расчет услуг при отсутствии данных от водителя
Процедура ЗаполнитьЗаборыНоваОтчетВодителя(Заборы, Рейс) Экспорт
	Заборы.Очистить(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаборТовара.Ссылка КАК Забор,
	|	ЗаборТовара.ОбъемЗабора КАК ОбъемЗабораПоДаннымПартнера,
	|	ЗаборТовара.АдресДоставки КАК Адрес
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|		ПО (Рейс.РейсМестнойДоставки = &РейсМестнойДоставки)
	|			И (Рейс.Проведен)
	|			И РейсЗаказы.Ссылка = Рейс.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|		ПО РейсЗаказы.Заказ = ЗаборТовара.Ссылка";
    
    Запрос.УстановитьПараметр("РейсМестнойДоставки", Рейс);
    
    РезультатЗапроса = Запрос.Выполнить();
	
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//Геннадий #4101 09.03.2021 ->
	МассивЗаборов 	 		= РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Забор");
	СоответствиеЗонИЗаказов = зпРаботаСРасчетомЗарплатыСервер.ПолучитьСоответствиеЗаказовИЗон(МассивЗаборов);
	//Геннадий <-
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Строка = Заборы.Добавить();
        ЗаполнитьЗначенияСвойств(Строка, ВыборкаДетальныеЗаписи);
		
		//Геннадий #4101 09.03.2021 ->
		Если ТипЗнч(СоответствиеЗонИЗаказов) = Тип("Соответствие") Тогда
			Строка.ЗонаДоставкиЗП = СоответствиеЗонИЗаказов.Получить(ВыборкаДетальныеЗаписи.Забор);
		КонецЕсли;
		//Геннадий <-
		
    КонецЦикла;	
КонецПроцедуры

Процедура ВыгрузкаДанныхЗабораВАдминкуОбщее(ОбъемныйБрейк, Забор) Экспорт
	Если Не ОбъемныйБрейк.Пустая() И Не Забор.ЗонаТарификации.Пустая() Тогда
		
		МетодикаТарификации = РегистрыСведений.НастройкиУчетаОбщие.ПолучитьПоследнее(ТекущаяДата()).МетодикаТарификацииЗаборов; 
		
		Если Не ЗначениеЗаполнено(МетодикаТарификации) Тогда
			МетодикаТарификации = Перечисления.МетодыТарификацииЗаборов.ПоДаннымОбъемаСД;
		КонецЕсли;
		
		Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
		
		КодОбъемногоБрейка = СокрЛП(ОбъемныйБрейк.КодБрейка);
		ОбъемныйБрейкКРегистрации = ОбъемныйБрейк;
		ОбъемЗабораКРегистрации = Неопределено;
		
		Если МетодикаТарификации = Перечисления.МетодыТарификацииЗаборов.ПоДаннымОбъемаИМ Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбъемныеБрейки.Ссылка КАК Брейк
			|ИЗ
			|	Справочник.ОбъемныеБрейки КАК ОбъемныеБрейки
			|ГДЕ
			|	ОбъемныеБрейки.Владелец = &Владелец
			|	И ОбъемныеБрейки.ОбъемОт <= &Объем
			|	И ОбъемныеБрейки.ОбъемДо >= &Объем";
			
			Запрос.УстановитьПараметр("Объем", Забор.ОбъемЗабора);
			Запрос.УстановитьПараметр("Владелец", Забор.ТарифнаяСетка);
			
			РезМ = Запрос.Выполнить().Выбрать();
			Если РезМ.Следующий() Тогда
				ОбъемныйБрейкКРегистрации = РезМ.Брейк;
				КодОбъемногоБрейка = РезМ.Брейк.КодБрейка;
				//CeHbKA 18.11.2019
				//поменяем значение исх брейка, которое передавалось в процедуру
				ОбъемныйБрейк = РезМ.Брейк;
				//CeHbKA 18.11.2019
			Иначе
				КодОбъемногоБрейка = Неопределено;
				ОбъемныйБрейкКРегистрации = Неопределено;
			КонецЕсли;
			
			ОбъемЗабораКРегистрации = Забор.ОбъемЗабора; 
		КонецЕсли;			
		
		//СтрЗапроса = "EXEC tariff_setIntakeServiceDC " + Формат(СокрЛП(Забор.Номер), "ЧДЦ=; ЧН=0; ЧГ=") + "," + СокрЛП(ОбъемныйБрейк.КодБрейка) + "," + СокрЛП(Забор.ЗонаТарификации.КодТарифа);
		
		Если Не КодОбъемногоБрейка = Неопределено тогда
			СтрЗапроса = "EXEC tariff_setIntakeServiceDC " + Формат(СокрЛП(Забор.Номер), "ЧДЦ=; ЧН=0; ЧГ=") + "," + КодОбъемногоБрейка + "," + СокрЛП(Забор.ЗонаТарификации.КодТарифа);// Задача № 3479
			Ответ = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
			Таб = Евген.СоздатьТаблицу(Ответ, "serviceDC_Ч, serviceDCclean_Ч");
			
			// ++ Задача № 3479 
			#Область СтарыйКодВыгрузкаДанныхЗабораВАдминкуОбщее
			//Если Таб.Количество() <> 0 Тогда
			//	Наб = РегистрыСведений.РассчитанныеАдминкойУслугиСД.СоздатьНаборЗаписей();
			//	ТекВр = ТекущаяДата();
			//	Наб.Отбор.Период.Установить(ТекВр);
			//	Наб.Отбор.Заказ.Установить(Забор.Ссылка);
			//	
			//	Нов = наб.Добавить();
			//	Нов.Период = ТекВр;
			//	Нов.Заказ = Забор;
			//	Нов.УслугиСД = Таб[0].ServiceDC_Ч;
			//	Нов.УслугиСДЧистые = Таб[0].ServiceDCClean_Ч;
			//	Нов.ЗонаТарификации = Забор.ЗонаТарификации;
			//	Нов.ОбъемныйБрейк = ОбъемныйБрейкКРегистрации;
			//	Нов.ТарифнаяСетка = Забор.ТарифнаяСетка;
			//	
			//	Наб.Записать();
			//КонецеСли;
			#КонецОбласти
			
			Наб = РегистрыСведений.РассчитанныеАдминкойУслугиСД.СоздатьНаборЗаписей();
			ТекВр = ТекущаяДата();
			Наб.Отбор.Период.Установить(ТекВр);
			Наб.Отбор.Заказ.Установить(Забор.Ссылка);
			
			Нов = наб.Добавить();
			Нов.Период = ТекВр;
			Нов.Заказ = Забор;
			
			Если Таб.Количество() <> 0 Тогда
				Нов.УслугиСД = Таб[0].ServiceDC_Ч;
				Нов.УслугиСДЧистые = Таб[0].ServiceDCClean_Ч;
			Иначе
				Нов.УслугиСД = 0;
				Нов.УслугиСДЧистые = 0;			
			КонецеСли;
			
			Нов.ЗонаТарификации = Забор.ЗонаТарификации;
			Нов.ОбъемныйБрейк = ОбъемныйБрейкКРегистрации;
			Нов.ТарифнаяСетка = Забор.ТарифнаяСетка;
			
			Если НЕ ОбъемЗабораКРегистрации = неопределено Тогда
				Нов.ОбъемЗабора = ОбъемЗабораКРегистрации;
			КонецЕсли;
			Наб.Записать();
			// ++ Задача № 3479
			
			Евген.ОтключитьсяОтADO(Подкл);
			
		Иначе
			
			Наб = РегистрыСведений.РассчитанныеАдминкойУслугиСД.СоздатьНаборЗаписей();
			ТекВр = ТекущаяДата();
			Наб.Отбор.Период.Установить(ТекВр);
			Наб.Отбор.Заказ.Установить(Забор.Ссылка);
			
			Нов = наб.Добавить();
			Нов.Период = ТекВр;
			Нов.Заказ = Забор;
			Нов.УслугиСД = 0;
			Нов.УслугиСДЧистые = 0;
			Нов.ЗонаТарификации = Забор.ЗонаТарификации;
			Нов.ТарифнаяСетка = Забор.ТарифнаяСетка;
			
			Если НЕ ОбъемЗабораКРегистрации = неопределено Тогда
				Нов.ОбъемЗабора = ОбъемЗабораКРегистрации;
			КонецЕсли;
			
			Наб.Записать();
		
		КонецЕсли;
		
	КонецеСли;	
КонецПроцедуры

//Реализовать автоматическое заполнение данных по задаче Измерение габаритов
Процедура ЗаписатьЛинейкуШтрихкодов(Объект) Экспорт
	Набор = РегистрыСведений.ШтрихкодыИзмеренияГабаритов.СоздатьНаборЗаписей();
	Набор.Отбор.ЛинейкаИзмерения.Установить(Объект.Ссылка);
	Набор.Очистить();
	От = Объект.ПределИзмеренияОт;
	Если Объект.ТипЛинейки = Перечисления.ТипыЛинеекИзмеренияГабаритов.БезРазделенияПоИзмерениям Тогда	
		Пока От <= Объект.ПределИзмеренияДо Цикл
			ДобавитьЗаписьВНабор(Объект,Набор,От);
			От = От + Объект.ШагИзмерения;
		КонецЦикла;
	ИначеЕсли Объект.ТипЛинейки = Перечисления.ТипыЛинеекИзмеренияГабаритов.СРазделениемПоИзмерениям Тогда	
		Пока От <= Объект.ПределИзмеренияДо Цикл
			ДобавитьЗаписьВНабор(Объект,Набор,От,Перечисления.Измерения.Длина);
			ДобавитьЗаписьВНабор(Объект,Набор,От,Перечисления.Измерения.Высота);
			ДобавитьЗаписьВНабор(Объект,Набор,От,Перечисления.Измерения.Ширина);
			От = От + Объект.ШагИзмерения;
		КонецЦикла;
	КонецЕсли;
	Набор.Записать();
КонецПроцедуры

Процедура ДобавитьЗаписьВНабор(Объект,Набор,Длина,Измерение = Неопределено)
	
	Если Измерение = Перечисления.Измерения.Длина Тогда
		Пребаф = "LS";
	ИначеЕсли Измерение = Перечисления.Измерения.Ширина Тогда
		Пребаф = "WS";
	ИначеЕсли Измерение = Перечисления.Измерения.Высота Тогда
		Пребаф = "HS";
	Иначе
		Пребаф = "GS";
		Измерение = Перечисления.Измерения.ПустаяСсылка();
	КонецЕсли;
	
	НЗапись = Набор.Добавить();
	НЗапись.ЛинейкаИзмерения = Объект.Ссылка;
	НЗапись.Измерение = Измерение;
	НЗапись.ПоказательИзмерения = Длина;
	НЗапись.ШтрихкодИзмерения = Пребаф + Прав(Объект.Код, 4) + Формат(Длина, "ЧЦ=5; ЧВН=; ЧГ=0");
	
КонецПроцедуры

Функция СформироватьПечатьЛинейкиШК(Ссылка) Экспорт
	Табл = Новый ТабличныйДокумент;
	Макет = Справочники.ЛинейкиИзмеренияГабаритов.ПолучитьМакет("Макет");
	ОбластьШК = Макет.ПолучитьОбласть("ОбластьШК");
	
	Набор = РегистрыСведений.ШтрихкодыИзмеренияГабаритов.СоздатьНаборЗаписей();
	Набор.Отбор.ЛинейкаИзмерения.Установить(Ссылка);
	Набор.Прочитать();
	Кол = 1;
	ОбластьШК.Параметры.Наименование = Ссылка.Наименование;
	Измерение = Перечисления.Измерения.ПустаяСсылка();
	Для каждого Элем из Набор Цикл
		Если Элем.Измерение <> Измерение Тогда
			Если Измерение <> Перечисления.Измерения.ПустаяСсылка() Тогда
				Табл.ВывестиГоризонтальныйРазделительСтраниц();
				Кол = 1;
			КонецЕсли;
			Измерение = Элем.Измерение;
		КонецЕсли;
		ОбластьШК.Параметры.Шк = may.ПолучитьШКCode_39(Элем.ШтрихкодИзмерения);		
		ОбластьШК.Параметры.Данные = Строка(Элем.Измерение) + " " + Строка(Элем.ПоказательИзмерения) + " см " + Элем.ШтрихкодИзмерения;
		Если Кол = 1 Тогда
			Табл.Вывести(ОбластьШК);
		Иначе
			Табл.Присоединить(ОбластьШК);
		КонецЕсли;
		Кол = Кол + 1;
		Если Кол = 5 Тогда
			Кол = 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Табл;
КонецФункции

//Получение строки шрих кода для шрифта Barcode
Функция ПолучитьШКCode_39(Код) Экспорт	
	A = ВРег(Код);
    S = "";
    Для I = 1 по СтрДлина(A) Цикл
        S = S + Code_Char(Code_39_Ch(Сред(A, I, 1)));
    КонецЦикла;
    //Старт/стоп - символ *
    Возврат Code_Char(Code_39_Ch("*")) + S + Code_Char(Code_39_Ch("*"));
КонецФункции

Функция Code_Char(A)
	Если A = "211412" тогда Возврат "A"; КонецЕсли;
	Если A = "211214" тогда	Возврат "B"; КонецЕсли;
	Если A = "211232" тогда Возврат "C"; КонецЕсли;
	Если A = "2331112" тогда Возврат "@"; КонецЕсли;
    S = "";
    Для I = 0 по СтрДлина(A) / 2 - 1 Цикл
        Темп = Сред(A, 2 * I + 1, 2);
		Если Темп = "11" тогда S = S + "0"; КонецЕсли;
		Если Темп = "21" тогда S = S + "1"; КонецЕсли;
		Если Темп = "31" тогда S = S + "2"; КонецЕсли;
		Если Темп = "41" тогда S = S + "3"; КонецЕсли;
		Если Темп = "12" тогда S = S + "4"; КонецЕсли;
		Если Темп = "22" тогда S = S + "5"; КонецЕсли;
		Если Темп = "32" тогда S = S + "6"; КонецЕсли;
		Если Темп = "42" тогда S = S + "7"; КонецЕсли;
		Если Темп = "13" тогда S = S + "8"; КонецЕсли;
		Если Темп = "23" тогда S = S + "9"; КонецЕсли;
		Если Темп = "33" тогда S = S + ":"; КонецЕсли;
		Если Темп = "43" тогда S = S + ";"; КонецЕсли;
		Если Темп = "14" тогда S = S + "<"; КонецЕсли;
		Если Темп = "24" тогда S = S + "="; КонецЕсли;
		Если Темп = "34" тогда S = S + ">"; КонецЕсли;
		Если Темп = "44" тогда S = S + "?"; КонецЕсли;
    КонецЦикла;
    Возврат S;
КонецФункции

Функция Code_39_Ch(Ch)
	Если Ch = "0" Тогда Возврат "1113313111"; КонецЕсли;
	Если Ch = "*" Тогда Возврат "1311313111"; КонецЕсли;
	Если Ch = "S" Тогда Возврат "1131113311"; КонецЕсли;	
	Если Ch = "1" Тогда Возврат "3113111131"; КонецЕсли;
	Если Ch = "2" Тогда Возврат "1133111131"; КонецЕсли;
	Если Ch = "3" Тогда Возврат "3133111111"; КонецЕсли;
	Если Ch = "4" Тогда Возврат "1113311131"; КонецЕсли;
	Если Ch = "5" Тогда Возврат "3113311111"; КонецЕсли;
	Если Ch = "6" Тогда Возврат "1133311111"; КонецЕсли;
	Если Ch = "7" Тогда Возврат "1113113131"; КонецЕсли;
	Если Ch = "8" Тогда Возврат "3113113111"; КонецЕсли;
	Если Ch = "9" Тогда Возврат "1133113111"; КонецЕсли;
	Если Ch = "A" Тогда Возврат "3111131131"; КонецЕсли;
	Если Ch = "B" Тогда Возврат "1131131131"; КонецЕсли;
	Если Ch = "C" Тогда Возврат "3131131111"; КонецЕсли;
	Если Ch = "D" Тогда Возврат "1111331131"; КонецЕсли;
	Если Ch = "E" Тогда Возврат "3111331111"; КонецЕсли;
	Если Ch = "F" Тогда Возврат "1131331111"; КонецЕсли;
	Если Ch = "G" Тогда Возврат "1111133131"; КонецЕсли;
	Если Ch = "H" Тогда Возврат "3111133111"; КонецЕсли;
	Если Ch = "I" Тогда Возврат "1131133111"; КонецЕсли;
	Если Ch = "J" Тогда Возврат "1111333111"; КонецЕсли;
	Если Ch = "K" Тогда Возврат "3111111331"; КонецЕсли;
	Если Ch = "L" Тогда Возврат "1131111331"; КонецЕсли;
	Если Ch = "M" Тогда Возврат "3131111311"; КонецЕсли;
	Если Ch = "N" Тогда Возврат "1111311331"; КонецЕсли;
	Если Ch = "O" Тогда Возврат "3111311311"; КонецЕсли;
	Если Ch = "P" Тогда Возврат "1131311311"; КонецЕсли;
	Если Ch = "Q" Тогда Возврат "1111113331"; КонецЕсли;
	Если Ch = "R" Тогда Возврат "3111113311"; КонецЕсли;
	Если Ch = "T" Тогда Возврат "1111313311"; КонецЕсли;
	Если Ch = "U" Тогда Возврат "3311111131"; КонецЕсли;
	Если Ch = "V" Тогда Возврат "1331111131"; КонецЕсли;
	Если Ch = "W" Тогда Возврат "3331111111"; КонецЕсли;
	Если Ch = "X" Тогда Возврат "1311311131"; КонецЕсли;
	Если Ch = "Y" Тогда Возврат "3311311111"; КонецЕсли;
	Если Ch = "Z" Тогда Возврат "1331311111"; КонецЕсли;
	Если Ch = "-" Тогда Возврат "1311113131"; КонецЕсли;
	Если Ch = "." Тогда Возврат "3311113111"; КонецЕсли;
	Если Ch = " " Тогда Возврат "1331113111"; КонецЕсли;
	Если Ch = "$" Тогда Возврат "1313131111"; КонецЕсли;
	Если Ch = "/" Тогда Возврат "1313111311"; КонецЕсли;
	Если Ch = "+" Тогда Возврат "1311131311"; КонецЕсли;
	Если Ch = "%" Тогда Возврат "1113131311"; КонецЕсли;
	Сообщить("Ошибка построения штрихкода. Не верный символ");
КонецФункции

#Область Code128

//Если параметр цифра возвращает 1
Функция ТипСимв(КодСимволаДляПроверки)
    Если КодСимволаДляПроверки < 32 Тогда 
        Возврат(1); //Команда
    ИначеЕсли (48 <= КодСимволаДляПроверки) и (КодСимволаДляПроверки<=57) Тогда 
        Возврат(3); //Цифра
    Иначе 
        Возврат(2); //Буква, знак
    КонецЕсли;    
КонецФункции

Функция Мод(Ч,З)
    Возврат(Ч-Цел(Ч/З)*З);
КонецФункции

Функция ШтрихкодCode128(Вход,БазаМодеС=6) Экспорт
    //Фильтр пустого входа
	Если Вход = "" Тогда 
		Возврат(""); 
	КонецЕсли;
	
	АскиБар =                                      
//     0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
    "155515551449485845458494854548584944056416452065425461560506542164524212245605641254614650"+ //29
    "11919191108980988109881889018890898001:0928120290:18212211829021281:0122209281:01218290:10"+ //59
    "2305<0;0004=0<540=4<1<05<4105<0=441<4=0<14<50=4050<320=04830047407443074434470344704740113"+ //89
    "13131100;0838030380;0308380023032203302";//102


	ВыхТ = Новый ТаблицаЗначений;
	ВыхТ.Колонки.Добавить("А");
	    
    Дл = СтрДлина(СокрЛП(Вход));
    
    //Разборки со стартовым кодом
    //Принимаем решение о смене подсистемы кодирования "моде" (А-1, В-2, С-3)
    //Анализируем тип двух первых символов
    ТекСимв = КодСимвола(Сред(Вход,1,1));
    ТипТекСимв = ТипСимв(ТекСимв);
    Если Дл > 1 тогда
        СлСимв  = КодСимвола(Сред(Вход,2,1));
        ТипСлСимв = ТипСимв(СлСимв);
    Иначе
        ТипСлСимв = 2;
    КонецЕсли;
    Моде = ТипТекСимв;
    Если (ТипТекСимв = 3) и (ТипСлСимв = 3) тогда Моде = 3; КонецЕсли;
    
    //В выходную таблицу добавляем символ старта подсистемы
    НоваяСтрока = ВыхТ.Добавить();
    НоваяСтрока.А = 102 + Моде;
    Вых = Символ(64 + Моде);    
    //Анализируем входные символы
    Для Сч = 1 по  Дл Цикл
        ТекСимв = КодСимвола(Сред(Вход,Сч,1));
        Если ТекСимв > 127 тогда 
            Сообщить("Символ № "+Сч+ " со значением="+ ТекСимв+" не разрешен в штрихкоде");
            Продолжить;
        КонецЕсли;    
        ТипТекСимв = ТипСимв(ТекСимв);
        
        //Принимаем решение о смене подсистемы кодирования (моде).
        Если ТипТекСимв <> Моде тогда
            Если ТипТекСимв < 3 Тогда
                //Нужно менять моде либо с А на В, либо с В на А
				//ВыхТ.НоваяСтрока();
                НоваяСтрока = ВыхТ.Добавить();
                Если Моде = 1 тогда
					//ВыхТ.А = 100;   //Переключаемся из А в В
    	            НоваяСтрока.А = 100;
                Иначе    
					//ВыхТ.А = 101;    //Переключаемся из В в А
	                НоваяСтрока.А = 101;
                КонецЕсли;
                Моде = ТипТекСимв;
            Иначе
                //Находимся в моде А или В, встретили цифру.
                //Прикидываем, стоит ли переключаться в МодеС
                //Смотрим на БазаМодеС знаков вперед. 
                //Оптимально, БазаМодеС = 6 (См. описание)
                ДлМ = ?(Дл < Сч+БазаМодеС-1, Дл, Сч+БазаМодеС-1);
                СчЦ = 0;
                Для СчМ = Сч по ДлМ Цикл
                    МодМ = ТипСимв(КодСимвола(Сред(Вход,СчМ,1)));
                    
                    //Если цифра - смотрим дальше
                    Если МодМ = 3 тогда 
                        СчЦ = СчЦ+1;
                        Продолжить; 
                    Иначе
                        СчЦ = 0;
                        Прервать;
                    КонецЕсли;
                КонецЦикла;
                //Если нужно переключится в С
                Если СчЦ - БазаМодеС = 0 тогда
                    Моде = 3;
					//ВыхТ.НоваяСтрока();
					НоваяСтрока = ВыхТ.Добавить();
					//ВыхТ.А = 99;   //Переключаемся из А или В в С
	                НоваяСтрока.А = 99;
                КонецЕсли;
            КонецЕсли;        
        КонецЕсли;        
        
        //Добавляем очередной символ
        
        //Если символ в МодеС
        Если Моде = 3 тогда
            СлСимв  = КодСимвола(Сред(Вход,Сч+1,1));
            ТипСлСимв = ТипСимв(СлСимв);
            //Если входная строка кончается на первой цифре, или 
            //конец входной строки цифра+не цифра
            Если (Сч = Дл) или (ТипТекСимв <> 3) или (ТипСлСимв <> 3) тогда
                //Переключаемся из режима С в режим В
                Моде = 2;
                НоваяСтрока = ВыхТ.Добавить();
                НоваяСтрока.А = 100;   
            Иначе
                //Добавляем символ в МодеС
                Если (ТипТекСимв <> 3) или (ТипСлСимв <> 3) тогда 
                    Сообщить("Ош."+ Сч+" "+ ТекСимв+" "+СлСимв);
                Иначе    
					НоваяСтрока = ВыхТ.Добавить();
                    НоваяСтрока.А = Число(Символ(ТекСимв)+Символ(СлСимв));
                    Сч = Сч+1;
                    Продолжить;
                КонецЕсли;
            КонецЕсли;    
        КонецЕсли;
        
        //Добавляем символ в МодеА, или МодеВ
        НоваяСтрока = ВыхТ.Добавить();
        Если Моде = 1 тогда
            НоваяСтрока.А = ТекСимв+64;
        Иначе
            НоваяСтрока.А = ТекСимв-32;
        КонецЕсли;    
    КонецЦикла;
    //Считаем контрольную сумму и формируем баркод
    Сум = 0;
    Ном = 0;
    Для Каждого СтрокаТаблицы Из ВыхТ Цикл
        Если Ном > 0 тогда 
            Сум = Мод(Сум+СтрокаТаблицы.А*Ном,103);
            Вых = Вых+Сред(АскиБар,(СтрокаТаблицы.А+1)*3-2,3);
        Иначе    
            Сум = Мод(СтрокаТаблицы.А,103);
		КонецЕсли;
		Ном = Ном+1;
    КонецЦикла;
    Возврат(Вых+Сред(АскиБар,(Сум+1)*3-2,3)+"@");
КонецФункции

#КонецОбласти

//Функция Code_128(A) Экспорт
//    Dim BCode(0 To 1023) As Integer
//    Dim BInd As Integer
//    Dim CurMode As String
//    Dim Ch As Integer
//    Dim Ch2 As Integer
//    Dim I As Integer
//    Dim LenA As Integer
//    Dim CCode As Integer
//    Dim S As String
//    Dim BarArray As Variant
//    
//    BInd = 0
//    CurMode = ""
//    I = 1
//    LenA = Len(A)
//    While I <= LenA
//        Ch = Asc(Mid(A, I, 1))
//        I = I + 1
//        If Ch <= 127 Then
//            If I <= LenA Then
//                Ch2 = Asc(Mid(A, I, 1))
//            Else
//                Ch2 = 0
//            End If
//            If (48 <= Ch) And (Ch <= 57) And _
//               (48 <= Ch2) And (Ch2 <= 57) Then
//                I = I + 1
//                If BInd = 0 Then
//                    CurMode = "C"
//                    BCode(BInd) = 105
//                    BInd = BInd + 1
//                ElseIf CurMode <> "C" Then
//                    CurMode = "C"
//                    BCode(BInd) = 99
//                    BInd = BInd + 1
//                End If
//                BCode(BInd) = CInt(Chr(Ch) & Chr(Ch2))
//                BInd = BInd + 1
//            Else
//                If BInd = 0 Then
//                    If Ch < 32 Then
//                        CurMode = "A"
//                        BCode(BInd) = 103
//                        BInd = BInd + 1
//                    Else
//                        CurMode = "B"
//                        BCode(BInd) = 104
//                        BInd = BInd + 1
//                    End If
//                End If
//                If (Ch < 32) And (CurMode <> "A") Then
//                    CurMode = "A"
//                    BCode(BInd) = 101
//                    BInd = BInd + 1
//                ElseIf ((64 <= Ch) And (CurMode <> "B")) Or (CurMode = "C") Then
//                    CurMode = "B"
//                    BCode(BInd) = 100
//                    BInd = BInd + 1
//                End If
//                If (Ch < 32) Then
//                    BCode(BInd) = Ch + 64
//                    BInd = BInd + 1
//                Else
//                    BCode(BInd) = Ch - 32
//                    BInd = BInd + 1
//                End If
//            End If
//        End If
//    Wend
//    CCode = BCode(0) Mod 103
//    For I = 1 To BInd - 1
//        CCode = (CCode + BCode(I) * I) Mod 103
//    Next I
//    BCode(BInd) = CCode
//    BInd = BInd + 1
//    BCode(BInd) = 106
//    BInd = BInd + 1
//    'BarArray = Array("155", "515", "551", "449", "485", "845", "458", "494", "854", _
//        "548", "584", "944", "056", "416", "452", "065", "425", "461", "560", "506", _
//        "542", "164", "524", "212", "245", "605", "641", "254", "614", "650", "119", _
//        "191", "911", "089", "809", "881", "098", "818", "890", "188", "908", "980", _
//        "01:", "092", "812", "029", "0:1", "821", "221", "182", "902", "128", "1:0", _
//        "122", "209", "281", ":01", "218", "290", ":10", "230", "5<0", ";00", "04=", _
//        "0<5", "40=", "4<1", "<05", "<41", "05<", "0=4", "41<", "4=0", "<14", "<50", _
//        "=40", "50<", "320", "=04", "830", "047", "407", "443", "074", "434", "470", _
//        "344", "704", "740", "113", "131", "311", "00;", "083", "803", "038", "0;0", _
//        "308", "380", "023", "032", "203", "302", "A", "B", "C", "@")
//    S = ""
//    For I = 0 To BInd - 1
//        S = S & Code_Char(Code_128_ID(BCode(I)))
//        'S = S & BarArray(BCode(I))
//    Next I
//    Code_128 = S
//КонецФункции


// Реализация механизма установки значений в РС НастройкиПечатиЧековПоФЗ54 с помощью полей на форме контрагента

Процедура ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Комитент,ТипОплаты,Организация) Экспорт
	ТекДата = ТекущаяДата();
	
	Наб = РегистрыСведений.НастройкиПечатиЧековПоФЗ54.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекДата);
    Наб.Отбор.Комитент.Установить(Комитент);
	Наб.Отбор.ТипОплаты.Установить(ТипОплаты);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекДата;
	Нов.Комитент = Комитент;
	Нов.ТипОплаты = ТипОплаты;
	Нов.Организация = Организация;
	
	Наб.Записать();		
КонецПроцедуры

Функция ПолучитьОрганизациюИзРС(Комитент,ТипОплаты) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПечатиЧековПоФЗ54.Организация КАК Организация,
		|	НастройкиПечатиЧековПоФЗ54.Период КАК Период
		|ИЗ
		|	РегистрСведений.НастройкиПечатиЧековПоФЗ54 КАК НастройкиПечатиЧековПоФЗ54
		|ГДЕ
		|	НастройкиПечатиЧековПоФЗ54.Комитент = &Комитент
		|	И НастройкиПечатиЧековПоФЗ54.ТипОплаты = &ТипОплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Комитент", Комитент);
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Возврат РезультатЗапроса.Организация;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

