
Функция ВыполнитьЗапросКАдминке(ВидЗапроса, ПараметрыЗапроса, ФайлДляКонтроля = Неопределено, ТолькоСохранитьФайл = Ложь, ВставитьОписаниеОшибки = Ложь, ВидAPI = Неопределено) Экспорт
	
	//Асеев 25.01.2022 (Задача № 4975)>>>
	Если ВидAPI = Неопределено Тогда
		ВидAPI = Справочники.API.IntegrationService;
	КонецЕсли;
	//Асеев 25.01.2022 (Задача № 4975)<<<
	
	ТекстОтвета = ""; ТекстОшибки = "";
	СтруктураВозврата = Новый Структура;
	ЗаголовокЗапроса = Новый Соответствие;
	ЗаголовокЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовокЗапроса.Вставить("Authorization", ПолучитьДанныеАвторизацииBASE64());
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;

	Если ВидAPI = Справочники.API.IntegrationService Тогда	
		// уходим с файла на строку	
		//Если ФайлДляКонтроля = Неопределено Тогда
		//	ФайлJSON = ПолучитьИмяВременногоФайла("json");
		//Иначе
		//	ФайлJSON = ФайлДляКонтроля;
		//КонецЕсли;
		//
		//ЗаписьJSON.ОткрытьФайл(ФайлJSON);
		// уходим с файла на строку
		
		СтруктураJSON = Новый Структура;
		СтрокаРесурса = "";
		
		Если ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.GetMapVersionsResult Тогда
			JSON_ПолучитьСхемыПолигональнойМаршрутизации(СтруктураJSON, ПараметрыЗапроса.ДатаВыборки);
			JSON_ДобавитьКодРегиона(СтруктураJSON, ПараметрыЗапроса.КодРегиона);
			СтрокаРесурса = "IntegrationService.svc/GetMapVersions";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.GetMapResult Тогда	
			JSON_ПолучитьПолигоныСхемы(СтруктураJSON, ПараметрыЗапроса.ИдентификаторСхемы);
			СтрокаРесурса = "IntegrationService.svc/GetMap";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.GetActiveMapVersionResult Тогда	
			JSON_ДобавитьКодРегиона(СтруктураJSON, ПараметрыЗапроса.КодРегиона);
			СтрокаРесурса = "IntegrationService.svc/GetActiveMapVersion";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.GetPolygonsForOrdersResult Тогда
			JSON_ПолучитьПолигоныЗаказов(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/GetPolygonsForOrders";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.GetDistanceResult Тогда
			JSON_ПолучитьРасстоянияЗаказов(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/GetDistance";		
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.CreateMapResult Тогда
			JSON_ДобавитьКодРегиона(СтруктураJSON, ПараметрыЗапроса.КодРегиона);		
			//CeHbKA #4167 02.09.2020
			Если ПараметрыЗапроса.Свойство("constructorId") Тогда
				JSON_ДобавитьconstructorId(СтруктураJSON, ПараметрыЗапроса.ConstructorId);
			КонецЕсли;			
			//CeHbKA #4167 02.09.2020		
			СтрокаРесурса = "IntegrationService.svc/CreateMap";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetActiveMapVersionResult Тогда
			JSON_ДобавитьКодРегиона(СтруктураJSON, ПараметрыЗапроса.КодРегиона);
			JSON_УстановитьАктивнуюВерсию(СтруктураJSON, ПараметрыЗапроса.ИдентификаторСхемы);
			СтрокаРесурса = "IntegrationService.svc/SetActiveMapVersion";
			//CeHbKA
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetOrderCarsResult Тогда
			JSON_ПолучитьПараметрыДоставки(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetOrderCars";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.UpdateReasonsDirectoryResult Тогда
			СтруктураJSON = ПараметрыЗапроса;
			СтрокаРесурса = "IntegrationService.svc/UpdateReasonsDirectory";	
			//Дробница Р. Задача № 2588	
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetAcceptedPlacesResult Тогда
			JSON_ПолучитьПараметрыДоставки(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetAcceptedPlaces";	
			//Дробница Р. Задача № 2572		
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetOrderLocationFlagResult Тогда
			JSON_ПолучитьПараметрыДоставки(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetOrderLocationFlag";	
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetOrdersStatusResult Тогда 
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetOrdersStatus";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetOrdersFinalStatusResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetOrdersFinalStatus";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.GetOrdersTariffComponentsResult Тогда
			JSON_ПолучитьПараметрыПолученияКомпонентТарифов(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/GetOrdersTariffComponents";	
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetOrdersTariffComponentsResult Тогда
			JSON_ПолучитьПараметрыОтправкиКомпонентТарифов(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetOrdersTariffComponents";		
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetRefusedOrderItemsResult  Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetRefusedOrderItems";	
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetOrdersDeliveryDateResult  Тогда
			JSON_ПолучитьПараметрыИзмененияДатыЗаказа(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetOrdersDeliveryDate";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetServiceDcResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetServiceDc";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetExcludedBarcodesResult Тогда
			JSON_ПолучитьПараметрыПоИсключеннымШтрихкодам(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetExcludedBarcodes";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SaveFileResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SaveFile";
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.DeleteFileResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/DeleteFile";	
			//CeHbKA #3587 14.10.2019 		
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.GetModifiedOrdersResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/GetModifiedOrders";	
			//CeHbKA #3587 14.10.2019
			//Задача № 3615 Переварюха В.В. 22.10.2019
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.SetPendingChangesResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/SetPendingChanges";
			//Задача № 3615 Переварюха В.В. 22.10.2019
			//Задача № 3617 Переварюха В.В. 23.10.2019
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.FinalizationPendingChangesResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/FinalizationPendingChanges";
			//Задача № 3617 Переварюха В.В. 23.10.2019
			//Асеев 15.10.2020 (Задача № 4309)>>>
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.GetDeliveryCostCalculationTariffsResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/GetDeliveryCostCalculationTariffs";
			//Асеев 15.10.2020 (Задача № 4309)<<<
			//Асеев 24.02.2022 (Задача № 4745)>>>
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.getCustomerLinkResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/getCustomerLink";
			//Асеев 24.02.2022 (Задача № 4745)<<<
			//Асеев 01.08.2022 (Задача № 4853)>>>
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.setOrdersStateResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/setOrdersState";
			//Асеев 01.08.2022 (Задача № 4853)<<<
			//Асеев 29.08.2022 (Задача № 4879)>>>
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.uploadReceiptsResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/uploadReceipts";
			//Асеев 29.08.2022 (Задача № 4879)<<<	
			//Асеев 14.10.2022 (Задача № 4913)>>>
		ИначеЕсли ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.setOrdersZoneResult Тогда
			JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, ПараметрыЗапроса);
			СтрокаРесурса = "IntegrationService.svc/setOrdersZone";
			//Асеев 14.10.2022 (Задача № 4913)<<<
		Иначе
			
		КонецЕсли;	
		//JSON_ДобавитьДанныеАутентификации(СтруктураJSON);
		// уходим с файла на строку
		//ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
		//ЗаписьJSON.Закрыть();	
		// уходим с файла на строку
		
		Если ТолькоСохранитьФайл Тогда
			
			СтруктураВозврата.Вставить("Успешно", Истина);
			СтруктураВозврата.Вставить("Данные", ФайлДляКонтроля);
			
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		//+Широков 24.12.2020 по письму 
		Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
			Если ПараметрыЗапроса.Свойство("ordersКомментарий") Тогда
				//ПараметрыЗапроса.Вставить("ordersКомментарий", Комментарий);
				СтруктураJSON.Вставить("Comment",ПараметрыЗапроса.ordersКомментарий);
				Если СтруктураJSON.Свойство("ordersКомментарий") Тогда
					СтруктураJSON.Удалить("ordersКомментарий");
				КонецЕсли;
			КонецЕсли;
			//+Широков Задача 4193
			Если ПараметрыЗапроса.Свойство("disableUpdateCoords") Тогда
				Если ТипЗнч(ПараметрыЗапроса.disableUpdateCoords) = Тип("Булево") Тогда
					Если ПараметрыЗапроса.disableUpdateCoords Тогда
						СтруктураJSON.Вставить("disableUpdateCoords",ПараметрыЗапроса.disableUpdateCoords);
					Иначе
						СтруктураJSON.Вставить("disableUpdateCoords",Ложь);
					КонецЕсли;
					//Широков Задача 4193 22.03.2021
					//Иначе
					//	СтруктураJSON.Вставить("disableUpdateCoords",Ложь);
					//Широков Задача 4193 22.03.2021
				КонецЕсли;
				//Широков Задача 4193 22.03.2021
				//Иначе
				//	СтруктураJSON.Вставить("disableUpdateCoords",Ложь);
				//Широков Задача 4193 22.03.2021
			КонецЕсли;
			//-Широков Задача 4193
			
		КонецЕсли;
		//-Широков 24.12.2020 по письму 
		
		// уходим с файла на строку
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		// уходим с файла на строку
		
		//ВызватьИсключение "Тест";
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			//HTTPСоединение = Новый HTTPСоединение("192.168.5.122", 7776);
			//CeHbKA
			//HTTPСоединение = Новый HTTPСоединение("192.168.5.9", 86);
			HTTPСоединение = Новый HTTPСоединение("192.168.9.10", 86);
			//HTTPСоединение = Новый HTTPСоединение("192.168.9.10", 11000);//LMpreprod
		Иначе
			//HTTPСоединение = Новый HTTPСоединение("back-office.strizh-logistic.ru", 80);
			//HTTPСоединение = Новый HTTPСоединение("192.168.5.9", 81);
			HTTPСоединение = Новый HTTPСоединение("192.168.9.10", 81);
		КонецеСли;	
		
		HTTPЗапрос = Новый HTTPЗапрос(СтрокаРесурса, ЗаголовокЗапроса);
		// уходим с файла на строку
		
		//HTTPЗапрос.УстановитьИмяФайлаТела(ФайлJSON);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
		// уходим с файла на строку
		
		МассивДат = Новый Массив;
		МассивДат.Добавить("completeDate");
		МассивДат.Добавить("createDate");
		МассивДат.Добавить("deliveryDate");
		МассивДат.Добавить("DeliveryDate");
		МассивДат.Добавить("modifyDate");
		МассивДат.Добавить("shipmentWHDate");
		//Асеев 15.10.2020 (Задача № 4309)>>>
		МассивДат.Добавить("StartDate");
		//Асеев 15.10.2020 (Задача № 4309)<<<
		
		Попытка	
			Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
			ТекстОтвета = Результат.ПолучитьТелоКакСтроку("UTF-8");		
			Чт = Новый ЧтениеJSON;
			Чт.УстановитьСтроку(ТекстОтвета);
			//СтруктураДанных = ПрочитатьJSON(Чт, Ложь, "CreateDate", ФорматДатыJSON.Microsoft);
			СтруктураДанных = ПрочитатьJSON(Чт, Ложь, МассивДат, ФорматДатыJSON.Microsoft);
			СтруктураВозврата.Вставить("Успешно", Истина);
			СтруктураВозврата.Вставить("Данные", СтруктураДанных);
		Исключение
			// уходим с файла на строку		
			//ЧтениеТ = Новый ЧтениеТекста(ФайлJSON);
			//ЧтениеТ = Новый ЧтениеТекста(ФайлJSON, КодировкаТекста.UTF8);
			//СтрокаЗапроса = ЧтениеТ.Прочитать();
			//ЧтениеТ.Закрыть();	
			СтрокаЗапроса = СтрокаJSON;		
			// уходим с файла на строку		
			
			
			ТекстОшибки = ОписаниеОшибки();
			СделатьЗаписьВЛог(ВидЗапроса, СтрокаЗапроса, ТекстОтвета, ТекстОшибки);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			СтруктураВозврата.Вставить("Данные", Неопределено);
			
			Если ВставитьОписаниеОшибки Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", ТекстОшибки);
			КонецЕсли;
			
			Возврат СтруктураВозврата;
		КонецПопытки;
		
		РезультатВыполненияНаСервере = "";
		ПроверкаРезультатаВыполненияМетода(СтруктураДанных, ВидЗапроса, РезультатВыполненияНаСервере);
		Если РезультатВыполненияНаСервере.ВозниклаОшибкаНаСервере Тогда
			// уходим с файла на строку		
			//ЧтениеТ = Новый ЧтениеТекста(ФайлJSON);
			//ЧтениеТ = Новый ЧтениеТекста(ФайлJSON, КодировкаТекста.UTF8);
			//СтрокаЗапроса = ЧтениеТ.Прочитать();
			//ЧтениеТ.Закрыть();	
			СтрокаЗапроса = СтрокаJSON;
			// уходим с файла на строку		
			СделатьЗаписьВЛог(ВидЗапроса, СтрокаЗапроса, ТекстОтвета, ТекстОшибки, РезультатВыполненияНаСервере.ВозниклаОшибкаНаСервере, РезультатВыполненияНаСервере.ОписаниеОшибкиНаСервере);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			СтруктураВозврата.Вставить("Данные", Неопределено);	
			
			Если ВставитьОписаниеОшибки Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", РезультатВыполненияНаСервере.ОписаниеОшибкиНаСервере);
			КонецЕсли;
		КонецЕсли;
	//Асеев 25.01.2022 (Задача № 4975)>>>
	ИначеЕсли ВидAPI = Справочники.API.IntegrationService_v2 Тогда
		
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			HTTPСоединение = Новый HTTPСоединение("192.168.9.10", 11002);
		Иначе 
			HTTPСоединение = Новый HTTPСоединение("192.168.9.10", 11003);
		КонецЕсли;	
		
		МассивДат = Новый Массив;
		
		Если ВидЗапроса = "cancelOrder" Тогда
			СтрокаРесурса = "/Order/RefuseOrder";
		//Асеев 06.04.2023 (Задача № 5005)>>>
		ИначеЕсли ВидЗапроса = "SetOrdersZone" Тогда
			СтрокаРесурса = "/Order/SetOrdersZone";
		//Асеев 06.04.2023 (Задача № 5005)<<<
		КонецЕсли;
		
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса, НастройкиСериализации);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		HTTPЗапрос = Новый HTTPЗапрос(СтрокаРесурса, ЗаголовокЗапроса);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Попытка
			Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
			ТекстОтвета = Результат.ПолучитьТелоКакСтроку("UTF-8");		
			Чт = Новый ЧтениеJSON;
			Чт.УстановитьСтроку(ТекстОтвета);
			Если МассивДат.Количество() Тогда
				СтруктураДанных = ПрочитатьJSON(Чт, Ложь, МассивДат, ФорматДатыJSON.Microsoft);
			Иначе
				СтруктураДанных = ПрочитатьJSON(Чт, Ложь);
			КонецЕсли;
			СтруктураВозврата.Вставить("Успешно", Истина);
			СтруктураВозврата.Вставить("Данные", СтруктураДанных);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			СтруктураВозврата.Вставить("Успешно", Ложь);
			СтруктураВозврата.Вставить("ОписаниеОшибки", ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	//Асеев 25.01.2022 (Задача № 4975)<<<
	
	Возврат СтруктураВозврата;

КонецФункции // ()

// ++Задача № 3553
#Область СтрароеЛогирование
//Процедура СделатьЗаписьВЛог(ВидЗапроса, ТекстЗапроса, ТекстОтвета, ТекстОшибки, ОшибкаОбработкиНаСервере = Ложь, ТекстОшибкиСервера = "") 

//	ТекВр = ТекущаяДата();
//	Набор = РегистрыСведений.ЛогОбменаСАдминкойWEB.СоздатьНаборЗаписей();
//	Набор.Отбор.ВидЗапроса.Установить(ВидЗапроса);
//	Набор.Прочитать();
//	
//	НЗапись = Набор.Добавить();
//	НЗапись.ВидЗапроса = ВидЗапроса;
//	НЗапись.ВремяЗапроса = ТекВр;
//	НЗапись.ТекстЗапроса = ТекстЗапроса;
//	НЗапись.ТекстОтвета = ТекстОтвета;
//	НЗапись.ТекстОшибки = ТекстОшибки;
//	НЗапись.ОшибкаОбработкиНаСервере = ОшибкаОбработкиНаСервере;
//	НЗапись.ТекстОшибкиСервера = ТекстОшибкиСервера;
//	
//	Набор.Записать();

//КонецПроцедуры
#КонецОбласти

Процедура СделатьЗаписьВЛог(ВидЗапроса, ТекстЗапроса, ТекстОтвета, ТекстОшибки, ОшибкаОбработкиНаСервере = Ложь, ТекстОшибкиСервера = "") Экспорт 

	попытка
		
		ВидЗапросаСтрокой = XMLстрока(ВидЗапроса);
		ВидЗапросаСтрокой = Лев(ВидЗапросаСтрокой, СтрДлина(ВидЗапросаСтрокой)- 6);
		
		ПараметрыЗаписиЛога = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаСервиса(Справочники.API.IntegrationService, Справочники.МетодыAPI[ВидЗапросаСтрокой]);
		ПараметрыЗаписиЛога.requestXML			= ТекстЗапроса;
		ПараметрыЗаписиЛога.responseXML			= ТекстОтвета;
		ПараметрыЗаписиЛога.isError             = Не ОшибкаОбработкиНаСервере;
		ПараметрыЗаписиЛога.isServerError       = ОшибкаОбработкиНаСервере;
		
		Если ОшибкаОбработкиНаСервере Тогда
			ПараметрыЗаписиЛога.errorDescription 	= ТекстОшибкиСервера;
		Иначе
			ПараметрыЗаписиЛога.errorDescription 	= ТекстОшибки;
		КонецЕсли;
		
		//Асеев 14.12.2022 (Задача № 4913)>>>
		Если ВидЗапроса = Перечисления.ВидыЗапросовWEBСервис.setOrdersZoneResult Тогда
			ПараметрыЗаписиЛога.ЗаписыватьЛогСервиса = Истина;
		КонецЕсли;
		//Асеев 14.12.2022 (Задача № 4913)<<<		
		
		ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаСервиса(ПараметрыЗаписиЛога);
		
	Исключение
		
		ОшибкаЗаписиВнешнегоИсточника = ОписаниеОшибки();
		
		МасП = Новый Массив;
		МасП.Добавить("a.pryalkin@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		
		ТекстПисьма = "Ошибка определения параметров записи лога сервисов во внешний лог " + ОшибкаЗаписиВнешнегоИсточника;
		ТекстПисьма = ТекстПисьма + Символы.ПС;
		ТекстПисьма = ТекстПисьма + "Вид запроса " + XMLстрока(ВидЗапроса) + Символы.ПС;
		ТекстПисьма = ТекстПисьма + "Данные логирования:" + Символы.ПС;
		
		ТекстПисьма = ТекстПисьма + "Текст запроса " + ТекстЗапроса + Символы.ПС;
		ТекстПисьма = ТекстПисьма + "Текст ответа " + ТекстОтвета + Символы.ПС;
		ТекстПисьма = ТекстПисьма + "Текст ошибки сервера " + ТекстОшибкиСервера + Символы.ПС;

		lem.ОтправитьСообщение(МасП, "Ошибка определения параметров записи лога сервисов", ТекстПисьма,,"Сервер 1С");
		
	Конецпопытки;

КонецПроцедуры
// --Задача № 3553

#Область СериализацияВходныхДанныхJSON
Процедура JSON_ПолучитьСхемыПолигональнойМаршрутизации(СтруктураJSON, ДатаВыборки)
	СтруктураJSON.Вставить("date", ДатаВыборки);
КонецПроцедуры

Процедура JSON_ПолучитьПолигоныСхемы(СтруктураJSON, ИдентификаторСхемы)
	СтруктураJSON.Вставить("versionId", ИдентификаторСхемы);
КонецПроцедуры

Процедура JSON_УстановитьАктивнуюВерсию(СтруктураJSON, ИдентификаторСхемы)
	СтруктураJSON.Вставить("versionId", ИдентификаторСхемы);
КонецПроцедуры

Процедура JSON_ПолучитьПолигоныЗаказов(СтруктураJSON, СтруктураПараметров)
	СтруктураJSON = СтруктураПараметров;
КонецПроцедуры

Процедура JSON_ПолучитьРасстоянияЗаказов(СтруктураJSON, СтруктураПараметров)
	СтруктураJSON = СтруктураПараметров;
КонецПроцедуры

Процедура JSON_ДобавитьДанныеАутентификации(СтруктураJSON) Экспорт
	СтруктураАутентификации = Новый Структура;
	СтруктураАутентификации.Вставить("Login", "1CLogin");
	СтруктураАутентификации.Вставить("Password", "qzaQ3J3weE0");
	СтруктураJSON.Вставить("auth", СтруктураАутентификации);
КонецПроцедуры

Процедура JSON_ДобавитьКодРегиона(СтруктураJSON, КодРегиона)
	СтруктураJSON.Вставить("regionId", КодРегиона);
КонецПроцедуры

//CeHbKA #4167 02.09.2020
Процедура JSON_ДобавитьconstructorId(СтруктураJSON, ConstructorId)
	СтруктураJSON.Вставить("constructorId", ConstructorId);
КонецПроцедуры
//CeHbKA #4167 02.09.2020


//CeHbKA
//- orderID
//- car
//- who
//- deliveryDate
//- computedAddress
Процедура JSON_ПолучитьПараметрыДоставки(СтруктураJSON, СтруктураПараметров)
	
	//СтруктураJSON = Новый Структура("orderCars", СтруктураПараметров); 
	//Дробница Р. 08.10.2018
	СтруктураJSON = СтруктураПараметров;

КонецПроцедуры

Процедура JSON_ПолучитьПараметрыПоУмолчанию(СтруктураJSON, СтруктураПараметров)
	
	//В рамках 2586
	СтруктураJSON = СтруктураПараметров;

КонецПроцедуры

Процедура JSON_ПолучитьПараметрыПоИсключеннымШтрихкодам(СтруктураJSON, СтруктураПараметров)
	
	СтруктураJSON.Вставить("excludedOrderBarcodes", СтруктураПараметров);
	
КонецПроцедуры

Процедура JSON_ПолучитьПараметрыПолученияКомпонентТарифов(СтруктураJSON, СтруктураПараметров)
	
	МассивЗаказов = Новый Массив;
	Для Каждого СтрокаЗаказа Из СтруктураПараметров Цикл
		МассивЗаказов.Добавить(новый Структура("OrderId", СокрЛП(СтрокаЗаказа)));
	КонецЦикла;
	
	СтруктураJSON.Вставить("orders", МассивЗаказов);
	
КонецПроцедуры	

Процедура JSON_ПолучитьПараметрыОтправкиКомпонентТарифов(СтруктураJSON, СтруктураПараметров)
	
	 //СтруктураJSON = СтруктураПараметров;
	 СтруктураJSON.Вставить("orders", СтруктураПараметров);

КонецПроцедуры

Процедура JSON_ПолучитьПараметрыИзмененияДатыЗаказа(СтруктураJSON, СтруктураПараметров)
	
	 //СтруктураJSON = СтруктураПараметров;
	 СтруктураJSON.Вставить("orderDeliveries", СтруктураПараметров);

КонецПроцедуры

#КонецОбласти



#Область ДесериализацияВыходныхДанныхJSON
Функция ПроверкаРезультатаВыполненияМетода(Данные, ВидМетода, РезультатВыполнения) Экспорт
	ИндексЗначенияПеречисления = Перечисления["ВидыЗапросовWEBСервис"].Индекс(ВидМетода);
	СтрокаВидаМетода = Метаданные.Перечисления["ВидыЗапросовWEBСервис"].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;	
	
	СтруктураДанных = "";
	Данные.Свойство(СтрокаВидаМетода, СтруктураДанных);
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ВозниклаОшибкаНаСервере", Не СтруктураДанных.Succeded);
	РезультатВыполнения.Вставить("ОписаниеОшибкиНаСервере", СтруктураДанных.Error);
КонецФункции	
#КонецОбласти


#Область ОбработчикиПолученныхДанных
//CeHbKA #4167 27.08.2020
//Функция ОбработатьПолученныеДанные(Данные, ВидМетода) Экспорт	
Функция ОбработатьПолученныеДанные(Данные, ВидМетода, ConstructorId = Неопределено) Экспорт	
//CeHbKA #4167 27.08.2020
	Если ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetMapVersionsResult Тогда
		Возврат ПолигональнаяМаршрутизацияСервер.ЗагрузитьСхемыПолигональнойМаршрутизации(Данные, ВидМетода);
	ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetMapResult Тогда
		//Возврат ПолигональнаяМаршрутизацияСервер.ЗагрузитьПолигоныСхемы(Данные, ВидМетода);
		//CeHbKA #4167 27.08.2020
		Если ConstructorId = Справочники.КартыКонструктораКарт.ПММСК.ИдентификаторКарты
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ПМСПб.ИдентификаторКарты
			ИЛИ ConstructorId = Неопределено Тогда
			Возврат ПолигональнаяМаршрутизацияСервер.ЗагрузитьПолигоныСхемы(Данные, ВидМетода);
		КонецЕсли;
		
		Если ConstructorId = Справочники.КартыКонструктораКарт.ЗПДоставкиМСК.ИдентификаторКарты
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ЗПЗаборыМСК.ИдентификаторКарты			
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ЗПДоставкиСПб.ИдентификаторКарты
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ЗПЗаборыСПб.ИдентификаторКарты Тогда
			Возврат зпРаботаСРасчетомЗарплатыСервер.ЗагрузитьЗоныДоставкиЗП(Данные, ВидМетода);
		КонецЕсли;		
		//CeHbKA #4167 27.08.2020
		
	ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetActiveMapVersionResult Тогда
		Возврат ПолигональнаяМаршрутизацияСервер.УстановитьАктуальнуюСхемуПолигональнойМаршрутизации(Данные);
	ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetPolygonsForOrdersResult Тогда		
		//Возврат ПолигональнаяМаршрутизацияСервер.УстановитьПолигоныДляЗаказов(Данные);
		//CeHbKA #4131 11.08.2020
		Возврат ПолигональнаяМаршрутизацияСервер.ОбработатьМассивДанныхПоПолигонам(Данные);
		//CeHbKA #4131 11.08.2020
	ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.CreateMapResult Тогда
		//Возврат ПолигональнаяМаршрутизацияСервер.ЗагрузитьСхемыПолигональнойМаршрутизации(Данные, ВидМетода);
		//CeHbKA #4167 27.08.2020
		Если ConstructorId = Справочники.КартыКонструктораКарт.ПММСК.ИдентификаторКарты
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ПМСПб.ИдентификаторКарты
			ИЛИ ConstructorId = Неопределено Тогда
			Возврат ПолигональнаяМаршрутизацияСервер.ЗагрузитьСхемыПолигональнойМаршрутизации(Данные, ВидМетода);
		КонецЕсли;
		
		Если ConstructorId = Справочники.КартыКонструктораКарт.ЗПДоставкиМСК.ИдентификаторКарты
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ЗПЗаборыМСК.ИдентификаторКарты			
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ЗПДоставкиСПб.ИдентификаторКарты
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ЗПЗаборыСПб.ИдентификаторКарты Тогда
			Возврат зпРаботаСРасчетомЗарплатыСервер.ЗагрузитьСхемыЗонДоставки(Данные, ВидМетода);
		КонецЕсли;		
		Если ConstructorId = Справочники.КартыКонструктораКарт.ТарификацияМСК3Зоны2022.ИдентификаторКарты
			ИЛИ ConstructorId = Справочники.КартыКонструктораКарт.ТарификацияСПб2022.ИдентификаторКарты	Тогда
			Возврат Истина;
		КонецЕсли;		
		//CeHbKA #4167 27.08.2020
				
	ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.SetActiveMapVersionResult Тогда
		Возврат ПолигональнаяМаршрутизацияСервер.УстановитьАктуальнуюСхемуПолигональнойМаршрутизацииВ1С(Данные.Данные.SetActiveMapVersionResult.RegionId, Данные.Данные.SetActiveMapVersionResult.VersionId);
		//ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetDistanceResult Тогда
		//	Возврат МаршрутизацияЗаказовСервер.УстановитьРасстоянияЗаказов(Данные);
	ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetOrdersTariffComponentsResult Тогда
		Возврат ТарификацияУслугСервер.УстановитьКомпонентыТарифовИзАдминки(Данные);
	КонецЕсли;	
КонецФункции

	
#КонецОбласти

Функция ПолучитьДанныеАвторизацииBASE64()
	ВременныйФайл = ПолучитьИмяВременногоФайла("bs64");
	Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаТекста.ANSI);
	Запись.Закрыть();
    Запись = Новый ЗаписьТекста(ВременныйФайл,,, Истина, Символы.ПС);
	Запись.Записать("1CLogin:qzaQ3J3weE0");
	Запись.Закрыть();
	
	ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
	Encoded = Base64Строка(ДвДанные);	
	
	ДанныеАвторизации = "Basic " + Encoded;
	Возврат ДанныеАвторизации;
КонецФункции


