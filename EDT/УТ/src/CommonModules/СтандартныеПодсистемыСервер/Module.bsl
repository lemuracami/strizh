// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных", 
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	
	Параметры.Вставить("ПервыйЗапускИнформационнойБазы", Ложь);
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных", 
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначенияПовтИсп.РазделениеВключено());
		
	//ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	Параметры.Вставить("ЭтоГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ", Ложь);
	
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	
	Параметры.Вставить("ИмяКонфигурации",     Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",  Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	
	// Параметры для внешних подключений пользователей
	Параметры.Вставить("ИнформацияОПользователе", ПолучитьИнформациюОПользователе());
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначения.ИмяCOMСоединителя());
	
	Параметры.Вставить("ПоправкаКВремениСеанса", ТекущаяДатаСеанса()); // записываем серверное время для последующей замены его на разницу с клиентом.
	
КонецПроцедуры

// Инициализация параметров сеанса.
// Параметры
//  ИменаПараметровСеанса - массив, неопределено - 
//                         в массиве имена параметров сеанса для инициализации
//
//  Возвращает массив имен установленных параметров сеанса
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Перем ТекстСообщения;
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		Возврат УстановленныеПараметры;
	КонецЕсли;
	
	Обработчики = СтандартныеПодсистемыПереопределяемый.ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем();
	ОбработчикиСобственные = ОбщегоНазначенияПереопределяемый.ОбработчикиИнициализацииПараметровСеанса();
	
	Для Каждого Запись Из ОбработчикиСобственные Цикл
		Обработчики.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	
	// массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*"
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если Найти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			Продолжить;
		КонецЕсли;
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если Лев(ИмяПараметра, СтрДлина(ИмяКлючаПараметра)) = ИмяКлючаПараметра Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра+"*");
				Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат УстановленныеПараметры;
	
КонецФункции

// Возвращает признак, является ли конфигурация базовой.
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат СтандартныеПодсистемыПереопределяемый.ЭтоБазоваяВерсияКонфигурации();

КонецФункции

Функция ПолучитьИнформациюОПользователе()
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	УстановитьПривилегированныйРежим(Истина);
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.16.0") >= 0 Тогда
		АутентификацияOpenID = ТекущийПользователь.АутентификацияOpenID;
	Иначе
		АутентификацияOpenID = Истина;
	КонецЕсли;
	
	Информация = Новый Структура;
	Информация.Вставить("Имя",                       ТекущийПользователь.Имя);
	Информация.Вставить("ПолноеИмя",                 ТекущийПользователь.ПолноеИмя);
	Информация.Вставить("ПарольУстановлен",          ТекущийПользователь.ПарольУстановлен);
	Информация.Вставить("АутентификацияOpenID",      АутентификацияOpenID);
	Информация.Вставить("АутентификацияСтандартная", ТекущийПользователь.АутентификацияСтандартная);
	Информация.Вставить("АутентификацияОС",          ТекущийПользователь.АутентификацияОС);
	
	Возврат Информация;
	
КонецФункции

// Возвращает массив поддерживаемых подсистемой ИмяПодсистемы названий номеров версий.
//
// Параметры:
// ИмяПодсистемы - Строка - Имя подсистемы.
//
// Возвращаемое значение:
// Массив строк.
//
Функция ПоддерживаемыеВерсии(ИмяПодсистемы) Экспорт
	
	МассивВерсий = Неопределено;
	
	СтруктураПоддерживаемыхВерсий = Новый Структура;
	СтандартныеПодсистемыПереопределяемый.ПолучитьПоддерживаемыеВерсииПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	
	СтруктураПоддерживаемыхВерсий.Свойство(ИмяПодсистемы, МассивВерсий);
	
	Если МассивВерсий = Неопределено Тогда
		Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Новый Массив);
	Иначе
		Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(МассивВерсий);
	КонецЕсли;
	
КонецФункции

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.1.1.19";
	
КонецФункции