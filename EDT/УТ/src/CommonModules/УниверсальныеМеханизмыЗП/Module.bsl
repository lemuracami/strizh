
Процедура ПометитьНаУдалениеДополнительнуюИнформациюОбъекта(ОбъектВладелец, Отказ, ШапкаОшибки) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектВладелец);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Объект
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И (НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Исключение
			ОбщегоНазначенияЗК.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, ШапкаОшибки);
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВНЕШНИХ КОМПОНЕНТ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Функция добавляет внешнюю компоненту в регистр сведений
//
Функция ДобавлениеВнешнейКомпоненты(ИсходныйФайл, ДвоичныеДанные = Неопределено, СообщатьОРезультате = Истина) Экспорт
	
	ФайлНаДиске = Новый Файл(ИсходныйФайл);
	
	Если ДвоичныеДанные = Неопределено Тогда
	
		Если НЕ ФайлНаДиске.Существует() Тогда
			Сообщить("- Исходный файл отсутствует на диске: " + ИсходныйФайл);
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя);
				
		Исключение
			ОбщегоНазначенияЗК.СообщитьОбОшибке("- " + ОписаниеОшибки());
			Возврат  Ложь;
				
		КонецПопытки;
		
		ДатаИзмененияФайла = ФайлНаДиске.ПолучитьВремяИзменения();
		
	Иначе
		ДатаИзмененияФайла = ТекущаяДата();
		
	КонецЕсли;
		
	НаборЗаписей = РегистрыСведений.ВнешниеКомпоненты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяФайла.Установить(ФайлНаДиске.Имя);
	НаборЗаписей.Прочитать();
	
	Если Не НаборЗаписей.Количество() = 0 Тогда
		ПрошлаяДатаИзмененияФайла = НаборЗаписей[0].ДатаИзмененияФайла;
		НаборЗаписей.Очистить();
		
	Иначе
		ПрошлаяДатаИзмененияФайла = Неопределено;
		
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	Запись.ИмяФайла           = ФайлНаДиске.Имя;
	Запись.ДатаИзмененияФайла = ДатаИзмененияФайла;
	
	Запись.ХранилищеФайла     = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
		
	Попытка
		НаборЗаписей.Записать();
		Если ПрошлаяДатаИзмененияФайла = Неопределено Тогда 
			Сообщение = "Добавлена внешняя компонента: " + ФайлНаДиске.Имя + " (версия от " + ДатаИзмененияФайла + ")";
			
		Иначе
			Сообщение = "Изменена версия внешней компоненты: " + ФайлНаДиске.Имя + " (с версии от: " + ПрошлаяДатаИзмененияФайла + "  на версию от: " + ДатаИзмененияФайла + ")";
			
		КонецЕсли;
		Если СообщатьОРезультате Тогда
			Сообщить(Сообщение);
		КонецЕсли;
	
	Исключение
		Если СообщатьОРезультате Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке("- " + ОписаниеОшибки());
		КонецЕсли;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ДобавлениеВнешнейКомпоненты()

// Функция удаляет внешнюю компоненту в регистр сведений
//
Функция УдалениеВнешнейКомпоненты(ИмяКомпоненты, СообщатьОРезультате = Истина) Экспорт
	
	НаборЗаписей = РегистрыСведений.ВнешниеКомпоненты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяФайла.Установить(ИмяКомпоненты + ".dll");
	
	Попытка
		НаборЗаписей.Записать();
		Сообщение = "Удалена внешняя компонента: " + ИмяКомпоненты + ".dll";
		Если СообщатьОРезультате Тогда
			Сообщить(Сообщение);
		КонецЕсли;
	
	Исключение
		Если СообщатьОРезультате Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке("- " + ОписаниеОшибки());
		КонецЕсли;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ДобавлениеВнешнейКомпоненты()

// Функция склоняет переданую фразу
// Параметры:
//  Фраза (обязательный), тип строка
//   Параметр должен содержать фразу. Каждое слово фразы будет просклонено отдельно
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
Функция Просклонять(Компонента, Знач Фраза = "", Падеж = 1, Пол = Неопределено, Результат) Экспорт
	
	Если Компонента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = "";
	
	МассивСтрок = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(Фраза, " ");
	
	// Выделим первые 3 слова, так как компонента не умеет склонять фразу большую 3х символов
	НомерНесклоняемогоСимвола = 4;
	Для Номер = 1 По Мин(МассивСтрок.Количество(), 3) Цикл
		Если Не ФИОНаписаноВерно(МассивСтрок[Номер-1], Истина) Тогда
			НомерНесклоняемогоСимвола = Номер;
			Прервать;
		КонецЕсли;

		Результат = Результат + ?(Номер > 1, " ", "") + МассивСтрок[Номер-1];
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = Фраза;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(Результат, Падеж, 1) + " ";
			
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(Результат, Падеж, 2) + " ";
			
		Иначе
			Результат = Компонента.Просклонять(Результат, Падеж) + " ";
			
		КонецЕсли;
		
	Исключение
		Результат = Фраза;
		Возврат Ложь;
		
	КонецПопытки;
	
	// Остальные символы добавим без склонения
	Для Номер = НомерНесклоняемогоСимвола По МассивСтрок.Количество() Цикл
		Результат = Результат + " " + МассивСтрок[Номер-1];
	КонецЦикла;
	
	Результат = СокрЛП(Результат);
	
	Возврат Истина;
	
КонецФункции // Просклонять()

// Функция склоняет Фамилию, Имя и Отчество
// Параметры:
//  Фамилия, Имя, Отчество (обязательный), тип строка
//   Параметры должены содержать фамилию, имя и отчество в именительном падеже единственного числа.
//   Строка должна состоять только из букв русского алфавита, пробелов и дефисов. 
//   Внутри фамилии, имени, отчества пробелов быть не должно.
//   Двойные и тройные имена и фамилии должны писаться через дефис. Имена и отчества должны быть полные
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей, например, имя Карен Акопян
//   может принадлежать и мужчине, и женщине, и в зависимости от этого склоняться или не склоняться.
//   В остальных случаях рекомендуется опускать этот параметр.
//
Функция ПросклонятьФамилиюИмяОтчество(Компонента, Знач Фамилия = "", Знач Имя = "", Знач Отчество = "", Падеж = 1, Пол = Неопределено, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	Если Компонента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФамилияНовая	= Фамилия;
	ИмяНовое		= Имя;
	ОтчествоНовое	= Отчество;
	
	Результат = Фамилия + " " + Имя + " " + Отчество;
	
	// Двойные и тройные ФИО, если указаны с пробелами, исправим на использование дефиса
	НужноИсправитьФамилию	= Найти(Фамилия, " ") > 0;
	НужноИсправитьИмя		= Найти(Имя, " ") > 0;
	НужноИсправитьОтчество	= Найти(Отчество, " ") > 0;
	Если НужноИсправитьФамилию Тогда
		ФамилияНовая = СтрЗаменить(Фамилия, " ", "-");
	КонецЕсли;
	Если НужноИсправитьИмя Тогда
		ИмяНовое = СтрЗаменить(Имя, " ", "-");
	КонецЕсли;
	Если НужноИсправитьОтчество Тогда
		ОтчествоНовое = СтрЗаменить(Отчество, " ", "-");
	КонецЕсли;
	
	ФИО = ФамилияНовая + " " + ИмяНовое + " " + ОтчествоНовое;
	
	Если ПустаяСтрока(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО не должна быть пустая.";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ФИОНаписаноВерно(ФИО, Истина) Тогда
		СообщениеОбОшибке = "Строка с ФИО должна состоять только из букв русского алфавита, пробелов и дефисов.";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
		СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени, отчества пробелов быть не должно.";
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 1);
				
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 2);
				
		Иначе
			Результат = Компонента.Просклонять(ФИО, Падеж);
				
		КонецЕсли;
		
		// Вернем пробелы в составные ФИО обратно, если до этого их изменили
		Если НужноИсправитьФамилию ИЛИ НужноИсправитьИмя ИЛИ НужноИсправитьОтчество Тогда
			
			МассивФИО = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(Результат, " ");
			
			Результат = "";
			
			ИндексФИО = 0;
			
			Если Не ПустаяСтрока(Фамилия) Тогда
				ФамилияНовая = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьФамилию Тогда
					
					Если СтрЧислоВхождений(Фамилия, "-") > 0 Тогда
						
						МассивФамилия = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ФамилияНовая, "-");
						ФамилияНовая = МассивФамилия[0];
						ИндексФамилия = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Фамилия, " ");
							ПозДефис  = Найти(Фамилия, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ФамилияНовая = ФамилияНовая + " ";
								Фамилия = Сред(Фамилия, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ФамилияНовая = ФамилияНовая + "-";
								Фамилия = Сред(Фамилия, ПозДефис+1);
								
							КонецЕсли;
							
							ФамилияНовая = ФамилияНовая + МассивФамилия[ИндексФамилия];
							ИндексФамилия = ИндексФамилия + 1;
							
						КонецЦикла;
						
					Иначе
						ФамилияНовая = СтрЗаменить(ФамилияНовая, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = Результат + ФамилияНовая;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Имя) Тогда
				ИмяНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьИмя Тогда
					
					Если СтрЧислоВхождений(Имя, "-") > 0 Тогда
						
						МассивИмя = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ИмяНовое, "-");
						ИмяНовое = МассивИмя[0];
						ИндексИмя = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Имя, " ");
							ПозДефис  = Найти(Имя, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ИмяНовое = ИмяНовое + " ";
								Имя = Сред(Имя, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ИмяНовое = ИмяНовое + "-";
								Имя = Сред(Имя, ПозДефис+1);
								
							КонецЕсли;
							
							ИмяНовое = ИмяНовое + МассивИмя[ИндексИмя];
							ИндексИмя = ИндексИмя + 1;
							
						КонецЦикла;
						
					Иначе
						ИмяНовое = СтрЗаменить(ИмяНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ИмяНовое);
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Отчество) Тогда
				ОтчествоНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьОтчество Тогда
					
					Если СтрЧислоВхождений(Отчество, "-") > 0 Тогда
						
						МассивОтчество = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ОтчествоНовое, "-");
						ОтчествоНовое = МассивОтчество[0];
						ИндексОтчество = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Отчество, " ");
							ПозДефис  = Найти(Отчество, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ОтчествоНовое = ОтчествоНовое + " ";
								Отчество = Сред(Отчество, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ОтчествоНовое = ОтчествоНовое + "-";
								Отчество = Сред(Отчество, ПозДефис+1);
								
							Иначе
								Прервать;
								
							КонецЕсли;
							
							ОтчествоНовое = ОтчествоНовое + МассивОтчество[ИндексОтчество];
							ИндексОтчество = ИндексОтчество + 1;
							
						КонецЦикла;
						
					Иначе
						ОтчествоНовое = СтрЗаменить(ОтчествоНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ОтчествоНовое);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ПросклонятьФИО()

Функция ФИОНаписаноВерно(Знач СтрокаПараметр, ТолькоКириллица = Ложь) Экспорт
	
	ДопустимыеСимволы = "-";
	
	Возврат (НЕ ТолькоКириллица И СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СтрокаПараметр, Ложь, ДопустимыеСимволы)) Или
			СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(СтрокаПараметр, Ложь, ДопустимыеСимволы);
	
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ КНОПКАМИ

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция ИнициализироватьДеревоДополнительныхКнопок()
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	//Если ИмяКнопки = Неопределено, создается разделитель
	//Если Дерево имеет подчиненные, то 
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	
	ДеревоКнопок.Колонки.Добавить("ИзменяетДанные");
	
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Функция добавляет новую строку в дерево кнопок
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, в который необходимо добавить новое описание кнопки
//	< Имя > (обязательный)
//		Тип: Строка. Имя создаваемой кнопки;
//	< ТипКнопки > (по умолчанию «Действие»)
//		Тип: ТипКнопкиКоманднойПанели. Тип создаваемой кнопки (Кнопка, разделитель, подменю);
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Действие > (по умолчанию «Не Определено»)
//		Тип: Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
//	< Расшифровка > (по умолчанию не определено)
//		Тип: Произвольный.
//	< Пометка > (по умолчанию «Ложь»)
//		Тип: Булево.
//	< Подсказка > (по умолчанию пустая строка)
//		Тип: Строка. Подсказка создаваемой кнопки.
//	< Картинка > (по умолчанию «Не Определено»)
//		Тип: Картинка. Картинка создаваемой кнопки.
// Возвращаемое значение:
//		Тип: СтрокаДереваЗначений.
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, ИзменяетДанные = Ложь)
	
	Если ТипКнопки = Неопределено Тогда
	
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		 
	КонецЕсли; 
	
	СтрокаКнопки             = СтрокаПодменю.Строки.Добавить();
	
	СтрокаКнопки.Имя         = Имя;
	СтрокаКнопки.ТипКнопки   = ТипКнопки;
	СтрокаКнопки.Текст       = Текст;
	СтрокаКнопки.Действие    = Действие;
	СтрокаКнопки.Картинка    = Картинка;
	СтрокаКнопки.Подсказка   = Подсказка;
	СтрокаКнопки.Пометка     = Пометка;
	
	СтрокаКнопки.ИзменяетДанные   = ИзменяетДанные;
	
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	Возврат СтрокаКнопки;
	
КонецФункции

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	
	КонецЕсли; 
	
	Для каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка      = СтрокаКнопки.Подсказка;
		Кнопка.Пометка        = СтрокаКнопки.Пометка;
		Кнопка.ИзменяетДанные = СтрокаКнопки.ИзменяетДанные;
		
		//Остальные свойства кнопки
		
	КонецЦикла; 
	

КонецПроцедуры

// Процедура для удаления кнопок в командных панелях.
// МассивПутейККнопкам - массив в котором путь к кнопке записан в виде:
// <ИмяПодменю>.<ИмяПодменю> ... <ИмяПодменю>.<ИмяКнопки>
Процедура УдалитьКнопкиКоманднойПанели(КоманднаяПанель, МассивПутейККнопкам) Экспорт
	
	Для Каждого ПутьККнопке Из МассивПутейККнопкам Цикл
		ТекущийЭлементФормы = КоманднаяПанель;
		Пока ПутьККнопке <> "" Цикл 
			ПозицияТочки = Найти(ПутьККнопке, ".");
			Если ПозицияТочки = 0 Тогда
				ИмяЭлемента = ПутьККнопке;
				ПутьККнопке = "";
				НовыйТекущийЭлемент = ТекущийЭлементФормы.Кнопки.Найти(ИмяЭлемента);
				Если НовыйТекущийЭлемент <> Неопределено Тогда
					ИндексКнопки = ТекущийЭлементФормы.Кнопки.Индекс(НовыйТекущийЭлемент);
					ТекущийЭлементФормы.Кнопки.Удалить(ИндексКнопки);
				КонецЕсли;
			Иначе
				ИмяЭлемента = СокрЛП(Сред(ПутьККнопке, 1, ПозицияТочки - 1));
				ПутьККнопке = СокрЛП(Сред(ПутьККнопке, ПозицияТочки + 1));
				
				НовыйТекущийЭлемент = ТекущийЭлементФормы.Кнопки.Найти(ИмяЭлемента);
				Если НовыйТекущийЭлемент <> Неопределено Тогда
					ТекущийЭлементФормы = НовыйТекущийЭлемент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ИЗ ВНЕШНИХ ОБРАБОТОК

// Процедура - обработчик нажатия любой из дополнительных кнопок заполнения табличных частей
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(СтрокаКнопки,ЭтотОбъект) Экспорт
	
	Перем СсылкаНаВнешнююОбработку;
	Перем ДополнительныеПараметры;
	
	// Получить ссылку на внешнюю обработку
	СтрокаКнопки.Расшифровка.Свойство("СсылкаНаВнешнююОбработку", СсылкаНаВнешнююОбработку);
	
	// Получить дополнительные параметры внешней обработки
	СтрокаКнопки.Расшифровка.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ТипЗНЧ(СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = СсылкаНаВнешнююОбработку.ПолучитьОбъект();
		
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней обработки заполнения табличной части документа. Возможно обработка была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Попытка
			
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			
			// Передать внешней обработке дополнительные параметры
			Если ДополнительныеПараметры <> Неопределено Тогда
				
				// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
				Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
					Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			Сообщить("Ошибка исполнения внешней обработки табличной части документа."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
		
		Попытка
			Обработка.Инициализировать(ЭтотОбъект, СтрокаКнопки.Родитель.Имя, СтрокаКнопки.Родитель.Расшифровка);
		Исключение
			ОбщегоНазначенияЗК.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует подменю "Заполнить" у ТЧ по дереву значений
//
Функция СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Действие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	
	ДеревоТЧ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого КлючИЗначение Из СоответствиеТЧ Цикл
		ИмяТабличнойЧасти = КлючИЗначение.Ключ.Данные;
		
		СтрокаДереваТЧ = ДеревоТЧ.Строки.Найти(ИмяТабличнойЧасти,"ТабличнаяЧастьИмя");
		
		Если Не СтрокаДереваТЧ = Неопределено Тогда
			
			СтрокаПодменю  = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок,ИмяТабличнойЧасти, ТипКнопкиКоманднойПанели.Действие , , , КлючИЗначение.Ключ, , , ,Истина);
			
			Для каждого ПодСтрокаДереваТЧ Из СтрокаДереваТЧ.Строки Цикл
				
				НомерКнопки = НомерКнопки + 1;
				
				СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, ДополнительныеПараметрыОбработки", ПодСтрокаДереваТЧ.Ссылка, ПодСтрокаДереваТЧ.ДополнительныеПараметрыОбработки.Получить());
				
				ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+НомерКнопки, ТипКнопкиКоманднойПанели.Действие, ПодСтрокаДереваТЧ.Наименование, Действие , СтруктураРасшифровки, , , ,Истина)
				
			КонецЦикла;
			
			ПодменюИлиКоманднаяПанель = КлючИЗначение.Значение;
				
			Если ТипЗНЧ(ПодменюИлиКоманднаяПанель) = Тип("КоманднаяПанель") Тогда
					
				ПодменюИлиКоманднаяПанель = ПодменюИлиКоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Подменю,"Заполнить");
					
			КонецЕсли;
			
			СформироватьПодменю(СтрокаПодменю, ПодменюИлиКоманднаяПанель,Ложь,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоКнопок;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в механизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(Не ЗначениеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ()

Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоКнопок) Экспорт
	
	ИмяМакетаПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных+ "МакетПечати");
	
	Если ИмяМакетаПоУмолчанию = Ложь или ДеревоКнопок.Строки.Количество() = 0 Тогда
		
		СтрокаПоУмолчанию = Неопределено;
		
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ()

// Процедура формирует дерево кнопок для подменю "Печать"
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, ДействиеУстановитьПечатьПоУмолчанию = Неопределено) Экспорт
	
	
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Если Не ВнутренниеПечатныеФормы = Неопределено Тогда
		ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие);
		
	КонецЕсли;
	
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(СсылкаОбъекта.Метаданные().Имя ,ДеревоКнопок);
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		СтрокаПоУмолчанию.Пометка = Истина;
	КонецЕсли; 	
		
	Если ДеревоКнопок.Строки.Количество() = 1 Тогда
		ДеревоКнопок.Строки[0].Текст = "Печать";
	ИначеЕсли ДеревоКнопок.Строки.Количество() > 1 Тогда
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, "ПечатьПоУмолчанию", ТипКнопкиКоманднойПанели.Действие, "По умолчанию...", ДействиеУстановитьПечатьПоУмолчанию, "ПечатьПоУмолчанию");
	КонецЕсли;

	Возврат ДеревоКнопок;

КонецФункции // ()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, ДействиеПечатьПоУмолчанию) Экспорт

	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);

	Если СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию <> Неопределено Тогда
			КоманднаяПанель.Кнопки.Удалить(ПечатьПоУмолчанию);
			ПечатьПоУмолчанию = Неопределено;
		КонецЕсли;

	Иначе
		ИмяКнопки = "КнопкаПечатьПоУмолчанию";

		Если ПечатьПоУмолчанию = Неопределено Тогда
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Вставить(0,ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			КонецЕсли;

			Если ДеревоМакетов.Строки.Количество() > 1 Тогда
				ПечатьПоУмолчанию.Подсказка	= "Печать по умолчанию";
				ПечатьПоУмолчанию.Картинка	= Новый Картинка;
			Иначе
				ПечатьПоУмолчанию.Подсказка	= "Вывести на печать";
				ПечатьПоУмолчанию.Картинка	= БиблиотекаКартинок.Печать;
			КонецЕсли;
			
			ПечатьПоУмолчанию.Доступность	= Истина;
			ПечатьПоУмолчанию.Отображение	= ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли;
		
		ПечатьПоУмолчанию.Текст				= СтрокаПоУмолчанию.Текст;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура УстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, ДеревоМакетов) Экспорт

	Если ДеревоМакетов.Строки.Количество() > 1 Тогда
		ИмяПодменю = "ПодменюПечати";

		Если ПодменюПечати = Неопределено Тогда
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПодменюПечати = КоманднаяПанель.Кнопки.Вставить(0,ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПодменюПечати = КоманднаяПанель.Кнопки.Добавить(ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
			КонецЕсли;

			ПодменюПечати.Подсказка = "Меню выбора печатных форм";
		КонецЕсли;
		
	Иначе
		Если ПодменюПечати <> Неопределено Тогда
			КоманднаяПанель.Кнопки.Удалить(ПодменюПечати);
			ПодменюПечати = Неопределено;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия любой из дополнительных кнопок печати
//
// Параметры:
//  Форма       : Форма, вызвавшая процедуру
//
Процедура ПечатьПоДополнительнойКнопке(УдалитьДеревоМакетов, Объект, Форма = Неопределено, ТекстКнопки) Экспорт
	
	Если Не Форма = Неопределено Тогда
		Если Не РаботаСДиалогами.ПроверитьМодифицированностьВФорме(Объект,Форма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетовПечати = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
		
	КонецЕсли;
	
	Расшифровка = СтрокаКнопки.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		НапечататьДокумент(ТабДокумент, , , ?(ЭтоДокумент, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(Объект), Строка(Объект)), ,ТабДокумент);
		
	Иначе
		
		Объект.Печать(СтрокаКнопки.Имя, 0);
		
	КонецЕсли;
	
КонецПроцедуры // ПечатьПоДополнительнойКнопке()

// Процедура назначает макет по умолчанию
//
Функция НазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, МетаданныеОбъекта) Экспорт

	СписокМакетов = Новый СписокЗначений;
	
	Для каждого Строка Из ДеревоМакетов.Строки Цикл
	
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Не Строка.Расшифровка = "ПечатьПоУмолчанию" Тогда
			
			СписокМакетов.Добавить(Строка.Текст,,Строка.Пометка);
			
		КонецЕсли; 
		
	
	КонецЦикла; 
	ФормаВыбораПечатнойФормыПоУмолчанию = ПолучитьОбщуюФорму("ФормаВыбораПечатнойФормыПоУмолчанию");
	ФормаВыбораПечатнойФормыПоУмолчанию.СписокВыбораПечатнойФормы = СписокМакетов;
	
	МакетПоУмолчанию = ФормаВыбораПечатнойФормыПоУмолчанию.ОткрытьМодально();
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(МетаданныеОбъекта + "МакетПечати", Неопределено);
		
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(МетаданныеОбъекта + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ДвоичныеДанные - ДвоичныеДанные, внешняя обработка для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт
	
	Перем ДополнительныеПараметры;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначенияЗК.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;

КонецФункции

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие)
	СтрокиДерева = ДеревоМакетов.Строки;
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.Ссылка.ХранилищеВнешнейОбработки КАК СсылкаХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|ИТОГИ ПО
	|	Ссылка";
	
	ИмяТаблицыОбъекта = "";
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Документ." + МетаданныеОбъекта.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Справочник." + МетаданныеОбъекта.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель = СтрокиДерева.Количество() = 0 ;
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		ПорядковыйНомер = 0;
		Выборка = ВыборкаСсылок.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяОбработка = Неопределено;
			ОбработкаСтроки = Выборка.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ОбработкаСтроки) = Тип("ДвоичныеДанные") Тогда
				НоваяОбработка = ОбработкаСтроки;
			Иначе
				ОбработкаЭлемента = Выборка.СсылкаХранилищеВнешнейОбработки.Получить();
				Если ТипЗнч(ОбработкаЭлемента) = Тип("ДвоичныеДанные") Тогда
					НоваяОбработка = ОбработкаЭлемента;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяОбработка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, НомерСтроки, ДополнительныеПараметрыОбработки", ВыборкаСсылок.Ссылка, Выборка.НомерСтроки, Выборка.ДополнительныеПараметрыОбработки.Получить());
			
			// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
			НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицыОбъекта, МетаданныеОбъекта.Синоним);
				ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				ПостроительОтчета.Выполнить();
				Если ПостроительОтчета.Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				Подсказка = "Отбор";
			Иначе
				Подсказка = "";
			КонецЕсли;
			
			
			// Теперь проверим, надо ли заменять существующую печ.форму или нужно добавить новую
			Если ЗначениеЗаполнено(Выборка.ЗаменяемаяПечатнаяФорма) Тогда
				
				Подсказка = "Печатная форма заменена подключаемой" + Подсказка;
				
				СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
				
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				//ПодменятьВстроеннуюФорму = Ложь;
				СтрокаДерева.Расшифровка = СтруктураРасшифровки;
				СтрокаДерева.Подсказка = Подсказка;
				
				Продолжить;
				
			КонецЕсли; 
			
			// Только тут будем добавлять новую печ. форму в дополнение списка
			Если Не БылРазделитель Тогда
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
				БылРазделитель = Истина;
			КонецЕсли;
			
			Суффикс = ?(ПорядковыйНомер = 0 ,"" , "("+ПорядковыйНомер+")");
			ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, Выборка.Наименование + Суффикс, Действие ,СтруктураРасшифровки,);
			
		КонецЦикла;
	
	КонецЦикла; 
	
	
КонецПроцедуры

// Процедура добавляет в дерево кнопок макетов встроенные печатные формы
//
Процедура ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие)

	Для каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
			
		Иначе
			
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, ТипКнопкиКоманднойПанели.Действие, КлючИЗначение.Значение, Действие);
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

// Печатает документ по умолчанию
//
//
Функция НапечататьДокументПоУмолчанию(Объект, НаПринтер = Ложь) Экспорт
	
	Попытка
		
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
		
	Исключение
		
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
		
	КонецПопытки;
	
	ДеревоМакетов = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(Объект.Метаданные().Имя, ДеревоМакетов);
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаПоУмолчанию.Расшифровка) = Тип("Структура") Тогда
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, СтрокаПоУмолчанию.Расшифровка);
		НапечататьДокумент(ТабДокумент, , НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(Объект));
		
	Иначе
		
		Объект.Печать(СтрокаПоУмолчанию.Имя, 0, НаПринтер);
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ()

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура НапечататьДокументИзФормыСписка(Объект) Экспорт
	
	Если Объект = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Не НапечататьДокументПоУмолчанию(Объект) Тогда
		
		Предупреждение("Печать по умолчанию не определена!");
		
	КонецЕсли;

КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличыйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Функция НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 0, НаПринтер = Ложь, Заголовок = "", ПараметрыРасшифровки = Неопределено, ПараметрыПечДокумента = Неопределено) Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров > 0 Тогда
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НаПринтер Тогда

		ПечДокумент.Напечатать();
		
		Возврат Неопределено;
		
	Иначе

		// Отобразить печатный документ на экране
		ФормаПечати = ПолучитьОбщуюФорму("ПечатьДокументов",, ПечДокумент);
		ФормаПечати.ПечатныйДокумент				= ПечДокумент;
		ФормаПечати.Заголовок						= Заголовок;
		ФормаПечати.Защита							= УправлениеДопПравамиПользователей.ЗащитаТаблиц();
		//ФормаПечати.ПараметрыРасшифровки			= ПараметрыРасшифровки;
		//ФормаПечати.ПараметрыПечатногоДокумента		= ПараметрыПечДокумента;
		ФормаПечати.Открыть();

		Возврат ФормаПечати;
		
	КонецЕсли;
	
КонецФункции // НапечататьДокумент()


#КонецЕсли
