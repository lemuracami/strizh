
#Область ФОНОВАЯЗагрузкаИзАдминки

Процедура ЗапускЗагрузки() Экспорт
	
	ТекущаяЗагрузкаДанных = Константы.ТекущаяЗагрузкаДанных.Получить();
	
	Если    ТекущаяЗагрузкаДанных = Перечисления.ТипыЗагрузкиИзАдминки.ПустаяСсылка()
		
		ИЛИ ТекущаяЗагрузкаДанных = Перечисления.ТипыЗагрузкиИзАдминки.СерверныйРежим Тогда
		
		Константы.ТекущаяЗагрузкаДанных.Установить(Перечисления.ТипыЗагрузкиИзАдминки.СерверныйРежим);		
		
		ЗагрузкаДанныхИзАдминки();
		
		// После выполнения загрузки сбросить
		Константы.ТекущаяЗагрузкаДанных.Установить(Перечисления.ТипыЗагрузкиИзАдминки.ПустаяСсылка());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаДанныхИзАдминки() Экспорт
	
	Перем ПараметрыЭтапа;
	Перем ДатаНач, ДатаКон;	
	
	Подключение = Евген.СоздатьПодключениеКИнтернетМагазину();
	Попытка 
		Евген.ЗапросКИнтернетМагазину("
		|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#orderList'))
		|	DROP TABLE #orderList
		|", Подключение);
		Евген.ЗапросКИнтернетМагазину("
		|CREATE TABLE #orderList(
		|	orderId int,
		|	modifyDate datetime)
		|", Подключение);
		Евген.ЗапросКИнтернетМагазину("
		|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#goodList'))
		|	DROP TABLE #goodList
		|", Подключение);
		Евген.ЗапросКИнтернетМагазину("
		|CREATE TABLE #goodList(
		|	КодСайта int,
		|	Удален int,
		|	brandId int
		|)
		|", Подключение);
	Исключение
		НормальныйХодВыполнения = Ложь;
		ТекстОшибки = "Ошибка создания временных таблиц: ";
		ЗаписатьЛог(1, ТекстОшибки + ОписаниеОшибки());
		//Лог("Ошибка создания временных таблиц: "+ОписаниеОшибки());
		//lem.ОтправитьНормальноеСообщениеАдминам("Создание временных таблиц", "Ошибка создания временных таблиц: "+ОписаниеОшибки());
	КонецПопытки;
	
	ПрефиксКодовКонтрагентов = "R";
	
	ТаблицаБрендов = Новый ТаблицаЗначений;
	ДеревоНоменклатуры = Новый ТаблицаЗначений;
	НоменклатураКОбновлениюБрендов = Новый ТаблицаЗначений;
	СписокЗагружаемойНоменклатуры = Новый ТаблицаЗначений;
	ГраницаЗаказов = "";
	
	УсловиеЗапроса = "";
	КомментарийОшибкиЗапроса = "";
	ДелатьЗапросПоСпискуЗаказов = Истина;
	
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаДанныхЗаказов");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаНач);
	ДатаЗапроса = НачалоДня(ТекущаяДата());
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		Попытка
			ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		Исключение
			ЗаписатьЛог(1, "Ошибочное значение даты последней загрузки доставок "+ДатаНач);
			//Лог("Ошибочное значение даты последней загрузки доставок "+ДатаНач);
		КонецПопытки;
	Иначе
		ЗаписатьЛог(1, "Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказов)");
		//Лог("Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказов)");
	КонецЕсли;
	ГраницаЗаказов = ДатаЗапроса;
	УсловиеЗапроса = "
	|	O.modifyDate > '"+ДатаИз1С(ДатаЗапроса, Ложь)+"'
	|";
	КомментарийОшибкиЗапроса = "Ошибка заполнения номеров измененных заказов";
	Попытка
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	getdate() AS curDate
		|", Подключение);
		ДатаЗапроса = СоздатьТаблицу(RS, "curDate_Д")[0].curDate_Д;
		RS=0;
	Исключение
		НормальныйХодВыполнения = Ложь;
		//Лог
		Сообщить("Ошибка получения текущего времени"+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	Если ДелатьЗапросПоСпискуЗаказов Тогда
		//СледующееСостояние("Подготовка таблицы заказов");
		Попытка
			// Добавляем условия к запросу:
			// 	- отбрасываем статус = 1 (новый заказ)
			//  - отбрасываем заказы, где есть позиция "Забор товара у поставщика"
			Евген.ЗапросКИнтернетМагазину("
			|INSERT INTO
			|	#orderList (orderId, modifyDate)
			|SELECT
			|	O.orderId,
			|	O.modifyDate
			|FROM
			|	_order O (NOLOCK)
			|INNER JOIN
			|	settings S (NOLOCK) ON S.shopId = O.SettingID
			|LEFT JOIN
			|	(SELECT 
			|		orderId,
			|		count(*) AS lines
			|	FROM
			|		_orderItems (NOLOCK)
			|	GROUP BY
			|		orderId
			|	) T ON T.orderId = O.orderId
			//Серегин М.В. 06.07.2015 14:05:45 
			| LEFT JOIN
			|(SELECT 
			|orderId,
			|count(*) AS lines
			|FROM
			|ts_orderAdditionalService (NOLOCK)
			|GROUP BY
			|orderId
			|) TU ON TU.orderId = O.orderId
			//Серегин М.В. 06.07.2015 14:05:49 
			|WHERE " +
			УсловиеЗапроса + "
			|	AND O.status IN (2,3,4,5)
			|	AND (ISNULL(T.lines, 0) > 0 or o.selfDelivery IN (2, 3) or (ISNULL(TU.lines, 0) > 0 )) 
			|   AND S.internetShopID <> 179
			|", Подключение);
			
			Р = Евген.ЗапросКИнтернетМагазину("select orderid from #orderList", Подключение);
			Таб = СоздатьТаблицу(Р, "orderID_Ч");
			Таб.Колонки.Добавить("Стр");
			Для Каждого Тек Из Таб Цикл
				Тек.Стр = Строка(Тек.orderid_Ч);
			КонецЦикла;	
			
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	НезагруженныеЗаказыСрезПоследних.Период КАК Дата,
			|	НезагруженныеЗаказыСрезПоследних.НомерЗаказа
			|ИЗ
			|	РегистрСведений.НезагруженныеЗаказы.СрезПоследних КАК НезагруженныеЗаказыСрезПоследних
			|ГДЕ
			|	НезагруженныеЗаказыСрезПоследних.Прогружен = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			
			РезНепр = зап.Выполнить().Выгрузить();
			Для каждого Тек Из РезНепр Цикл
				Най = Таб.Найти(Число(Тек.НомерЗаказа));
				Если Най <> Неопределено Тогда
					Продолжить;
				КонецеСли;	
				Евген.ЗапросКИнтернетМагазину("
				|INSERT INTO
				|	#orderList (orderId, modifyDate) VALUES (" + Тек.НомерЗаказа + ",'" + Евген.ДатаВSQL(Тек.Дата, Ложь) + "')", Подключение);
			КонецЦикла;	
		Исключение
			НормальныйХодВыполнения = Ложь;
			ЗаписатьЛог(1, КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
			//Лог(КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
			//Сообщить(КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	
	// Открытые заказы
	//Если ФлагУдаленияОткрытыхЗаказов Тогда
	////		СледующееСостояние("Подготовка таблицы заказов");
	Попытка
		// Добавляем условия к запросу:
		// 	- отбрасываем статус = 1 (новый заказ)
		//  - отбрасываем заказы, где есть позиция "Забор товара у поставщика"
		ТТ = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	O.orderId,
		|	O.modifyDate
		|FROM
		|	_order O (NOLOCK)
		|INNER JOIN
		|	settings S (NOLOCK) ON S.shopId = O.SettingID
		|LEFT JOIN
		|	(SELECT 
		|		orderId,
		|		count(*) AS lines
		|	FROM
		|		_orderItems (NOLOCK)
		|	GROUP BY
		|		orderId
		|	) T ON T.orderId = O.orderId
		|WHERE " +
		УсловиеЗапроса + "
		|	AND O.status IN (1)
		|	AND (ISNULL(T.lines, 0) > 0 or o.selfDelivery IN (2, 3)) 
		|   AND S.internetShopID <> 179
		|", Подключение);
		
		
		СписокОткрытыхЗаказов = СоздатьТаблицу(ТТ, "orderID_Ч");
	Исключение
		НормальныйХодВыполнения = Ложь;
		ЗаписатьЛог(1, КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
		//Лог(КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//КонецеСли;
	
	//Если ДелатьЗапросПоСпискуЗаказов Тогда
	Попытка	
		////СледующееСостояние("Чтение таблицы заказов");
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		//Серегин М.В. 23.07.2015 14:42:08 
		|   O.senderId                             AS SenderId,
		//Серегин М.В. 23.07.2015 14:42:09 
		|	OL.orderId                             AS orderId,
		|	OL.modifyDate						   AS modifyDate,
		|	O.createDate                           AS createDate,
		|	O.status                               AS status,
		|	ISNULL(O.ReasonRrefusalID,0)           AS ReasonRefusalID,
		|	O.pay_type                             AS pay_type,
		|	ISNULL(O.createWay, 0)                 AS createWay,
		|	ISNULL(O.stockID, 0)                   AS stockID,
		|	ISNULL(O.selfDelivery, 0)              AS selfDelivery,
		|	ISNULL(O.serviceDelivery, 0)           AS serviceDelivery,
		|	ISNULL(ISNULL(O.deliverydate, O.completeDate), O.createDate) AS completeDate,
		|	O.comment                              AS comment,
		|	ISNULL(O.deliveryPriceRUR, 0)          AS deliveryPrice,
		|	ISNULL(O.deliveryForMkadRUR, 0)        AS deliveryForMkadRUR,
		|	O.deliveryDate                         AS deliveryDate,
		|	ISNULL(O.timeDeliveryFrom, '9' )       AS timeDeliveryFrom,
		|	ISNULL(O.timeDeliveryTo,   '19')       AS timeDeliveryTo,
		|	U.UserId         AS UserId,
		|	U.firstName + ' ' + U.middleName + ' ' + U.lastName AS Name,
		|	U.comment   AS userComment,
		|	U.Email     AS Email,
		|	ISNULL(O.serviceDC, 0)				   AS serviceDC,
        //|	ISNULL(O.ReasonRrefusal, 0)		       AS ReasonRrefusal,  //было, костя так нельзя делать.
        |   ISNULL(O.ReasonRrefusal, '')		       AS ReasonRrefusal, 
        
		|	dbo.[fn_getUserAddrByIDAddr41C](O.userAddressId)	AS Addr,
		|	mvo.fulladdress	AS AddrFull,
		|	mvo.cashService	AS cashService,
		|	mvo.addrComment	AS addrComment,
		|	mvo.Beznal	AS Beznal,
		|	mvo.AgentComission AS AgentComission,
		|	mvo.BankKom AS BankKom,
		|	ISNULL(S.internetShopID, 0) AS shop,
		|	ISNULL(S.shopJurFace, '') AS shopJurFace,
		|	ISNULL(S.textReceipt, '') AS textReceipt,
		|	ISNULL(S.receiverID, '') AS receiverID,
		|	ISNULL(S.shopTitle, '') AS shopTitle,
		|	ISNULL(S.shopPhone, '') AS shopPhone,
		|	sh.name AS shopName,
		|	o.ispayed AS ispayed,
		|	o.PiecesOfFreight AS PiecesOfFreight,
		|	CI.carNumber AS carNumber,
		|	RBS.amount AS SumByCard,
		|	ISNULL(o.tariffType,1) AS tariffType,
		|	ISNULL(o.tariffCategoryId,1) AS tariffCategoryId,
		|	ISNULL(o.tariffID,1) AS tariffID,
		//|	ISNULL(s.parentid, -1) AS ParentID,
		|	ISNULL(s2.InternetShopID, -1) AS ParentID,
		//Бухаров
		|	O.orderIDImport						   AS orderIDImport,
		|	O.typeDelivery						   AS typeDelivery,
		|	O.orderWeight						   AS orderWeight,
		|	ISNULL(O.serviceDCclean, 0)						   AS serviceDCclean,
		//Бухаров
		//Марочкин
		|	O.manager							   AS manager,
		|	ISNULL(mvo.assessedCost, 0)			   AS assessedCost,
		|	ISNULL(mvo.total, 0)				   AS total,
		|	U.userTel							   AS Telephone
		//Марочкин
		|FROM
		|	#orderList   OL (NOLOCK)
		|INNER JOIN
		|	_order       O (NOLOCK) ON O.orderId = OL.orderId
		////Костя
		//|LEFT JOIN
		//|	tb_reasonRefusal  Refusal (NOLOCK) ON O.ReasonRrefusalID = Refusal.reasonRefusalID
		////Костя
		|INNER JOIN
		|	_user        U (NOLOCK) ON O.userID = U.UserId
		|INNER JOIN
		|	mv_orders        mvo (NOLOCK) ON O.orderid = mvo.orderid			
		|INNER JOIN
		|	settings     S (NOLOCK) ON S.shopId = O.SettingID
		|left JOIN
		|	settings     S2 (NOLOCK) ON S2.shopId = S.ParentID			
		|INNER JOIN
		|	_InternetShops SH (NOLOCK) ON SH.internetShopID = S.internetShopID
		|LEFT JOIN
		|	_car       CI (NOLOCK) ON O.carId = CI.carId
		|LEFT JOIN
		|	_orderRBS       RBS (NOLOCK) ON O.orderId = RBS.orderId
		
		
		|ORDER BY
		|	OL.modifyDate ASC,
		|	OL.orderId ASC
		|", Подключение);  
		СписокЗаказов = СоздатьТаблицу(RS, "senderId,orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, ReasonRefusalID_Ч, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, createWay_Ч, stockID_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, manager, Telephone, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч, BankKom_Ч, SumByCard_Ч, tariffType_Ч, tariffCategoryId_Ч, tariffID_Ч, orderWeight_Ч, ParentID_Ч, serviceDCclean_Ч, assessedCost_Ч, total_Ч");
	Исключение
		НормальныйХодВыполнения = Ложь;
		ЗаписатьЛог(1, "Ошибка чтения таблицы заказов"+Символы.ПС+ОписаниеОшибки());
		//Лог("Ошибка чтения таблицы заказов"+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка	
		//СледующееСостояние("Чтение строк заказов");
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|OL.orderId                AS orderId
		|,OL.modifyDate               AS modifyDate
		|,OP.eid                 AS eid
		|,OP.skuId                AS skuId
		|,OP.count-isnull(OP.missedcount, 0)          AS cnt
		|,ISNULL(OP.fixedCount, OP.count)          AS fixedCount
		|,OP.PriceUSD * OP.USD2RUR            AS Price
		|,P.internetShopId              AS Shop
		|,ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name AS Name
		|,P.code                 AS Articul
		|,OD.weight                AS [weight]
		|,productsRestore.skuId             AS skuIdrestore
		|,ISNULL(ST.stockId, 0)               AS stockId
		|,ISNULL(ST.stockName, 0)               AS stockName
		|,ISNULL(ST.stockIdImport, 0)           AS stockIdImport
		|,1                  AS itemType
		|FROM
		| #orderList       OL  (NOLOCK)
		|INNER JOIN
		| _orderItems      OP  (NOLOCK) ON OL.orderId = OP.orderId
		|LEFT JOIN
		|ts_stock 		   ST (NOLOCK) ON  OP.stockId = ST.stockId
		|INNER JOIN
		| product          P   (NOLOCK) ON P.productId = OP.itemID
		|LEFT JOIN
		| brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
		|LEFT JOIN
		| objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
		|LEFT JOIN
		| objectDescription OD (NOLOCK) ON P.productId = OD.objectId    AND OD.objectTypeId = 2   
		|LEFT JOIN
		| category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
		|LEFT JOIN
		| (SELECT
		|  pRe.code       AS code,
		|  MAX(sRe.skuId) AS skuId
		| FROM                                                                   
		|  product   pRe (NOLOCK) 
		| LEFT JOIN                                                                   
		|  sku    sRe (NOLOCK) ON sRe.productId = pRe.productId AND sRe.objType = 1
		| WHERE
		|  pRe.internetShopID = 166
		| GROUP BY
		|  pRe.code
		| ) AS productsRestore ON productsRestore.code = p.code
		| 
		|UNION ALL
		|
		|SELECT  
		| OL.orderId        AS orderId
		| ,OL.modifyDate       AS modifyDate
		| ,null         AS eid
		| ,sRe.skuId         AS skuId
		| ,oas.quantity       AS cnt
		| ,null         AS fixedCount
		| ,oas.price        AS Price
		| ,s.internetShopID      AS Shop
		| ,aserv.title COLLATE database_default AS Name
		| ,cast(aserv.articul as varchar)       AS Articul
		| ,null         AS [weight]
		| ,null         AS skuIdrestore
		| ,null         AS stockID
		| ,null         AS stockName
		| ,null			AS stockIdImport
		| ,2          AS itemType
		|FROM
		| #orderList       OL  (NOLOCK) 
		|INNER JOIN
		| ts_orderAdditionalService oas (NOLOCK) ON OL.orderId = oas.orderId
		|INNER JOIN 
		| ts_additionalService aserv (NOLOCK) ON oas.additionalServiceId = aserv.additionalServiceId
		|INNER JOIN 
		| settings s (NOLOCK) ON s.shopId = aserv.settingId
		|LEFT JOIN                                                                   
		| sku    sRe (NOLOCK) ON aserv.additionalServiceId = sRe.productId AND sRe.objType = 2
		|ORDER BY
		| modifyDate ASC,
		| orderId ASC,
		| itemType ASC,
		| eid ASC
		|", Подключение);
		ТабличнаяЧастьЗаказов = СоздатьТаблицу(RS, "orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, itemType_Ч, eid_Ч, stockId_Ч, stockName, stockIdImport");
		
		ТабличнаяЧастьЗаказов.Колонки.Добавить("Реж");
		Для Каждого Тек Из ТабличнаяЧастьЗаказов Цикл
			Тек.Реж = 1;
		КонецЦикла;	
		
		ТЗ2 = ТабличнаяЧастьЗаказов.Скопировать();
		ТЗ2.Свернуть("skuId_Ч", "Реж");
		
		Для Каждого Тек Из ТЗ2 Цикл
			Струк = Новый Структура;
			Струк.Вставить("skuId_Ч", Тек.skuId_Ч);
			НайСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(Струк);
			Для Сч = 0 По НайСтроки.Количество() - 1 Цикл
				Если НайСтроки[Сч].cnt_Ч = null тогда
					НайСтроки[Сч].cnt_Ч = 0;
				КонецеСли;	
				Если НайСтроки[Сч].cnt_Ч < 0 Тогда
					НайСтроки[Сч].Реж = 2;
				КонецеСли;	
			КонецЦикла;	
		КонецЦикла;	
		
		ТабличнаяЧастьЗаказов.Свернуть("orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, stockId_Ч, stockName, stockIdImport, Реж", "cnt_Ч, fixedCount_Ч");
		RS=0;
	Исключение
		НормальныйХодВыполнения = Ложь;
		ЗаписатьЛог(1, "Ошибка чтения строк заказов"+Символы.ПС+ОписаниеОшибки());
		//Лог("Ошибка чтения строк заказов"+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//КонецЕсли;
	
	СписокКодовСайта = Неопределено;
	СписокКодовАдминки = Неопределено;
	ЗагрузкаПоКодамСайта = Истина;//СписокЭтапов.Свойство("ЗагрузитьНоменклатуруПоКодамСайта", СписокКодовСайта);
	ЗагрузкаПоКодамАдминки = Ложь;//СписокЭтапов.Свойство("ЗагрузитьНоменклатуруПоКодамАдминки", СписокКодовАдминки);
	Если ЗагрузкаПоКодамСайта Или ЗагрузкаПоКодамАдминки Тогда
		Попытка	
			//СледующееСостояние("Чтение списка товаров");
			RS = Евген.ЗапросКИнтернетМагазину("
			|SELECT
			| S.skuId                  AS skuId,
			| P.internetShopId         AS Shop,
			| ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name + ' ' + ISNULL(s.name, '') AS Name,
			| P.code                   AS Articul,
			| sh.name                  AS shopName
			|FROM
			| sku              S   (NOLOCK)
			|LEFT JOIN
			//Серегин М.В. 25.08.2015 16:56:24 objType
			| product          P   (NOLOCK) ON P.productId = S.productId AND S.objType = 1
			|LEFT JOIN
			| brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
			|LEFT JOIN
			| objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
			|LEFT JOIN
			| category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
			|INNER JOIN
			| _InternetShops   SH  (NOLOCK) ON SH.internetShopID = P.internetShopID
			|WHERE " +
			?(ЗагрузкаПоКодамСайта, "S.skuId IN (SELECT CAST(value AS int) FROM fn_Split('"+СписокКодовСайта+"', ','))", "") +
			?(ЗагрузкаПоКодамАдминки, "P.productId IN (SELECT CAST(value AS int) FROM fn_Split('"+СписокКодовАдминки+"', ','))", ""), Подключение);
			СписокЗагружаемойНоменклатуры = СоздатьТаблицу(RS, "skuId_Ч, Name, Articul, Shop_Ч, shopName");
			RS=0;
		Исключение
			НормальныйХодВыполнения = Ложь;
			ЗаписатьЛог(1,"Ошибка чтения списка товаров"+Символы.ПС+ОписаниеОшибки());
			//Лог("Ошибка чтения списка товаров"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ЗаписатьКонтрагентов = Ложь;
	СписокКолонокДанныхКОнтрагентов = "userId_Ч, ИНН, КПП, Name, userComment, Email, jurPerson";
	Попытка
		Евген.ЗапросКИнтернетМагазину("
		|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#clientList'))
		|	DROP TABLE #clientList
		|", Подключение);
		
		Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	C.userId
		|INTO
		|	#clientList
		|FROM
		|	#orderList OL
		|INNER JOIN
		|	_order O (NOLOCK) ON O.orderId = OL.orderId
		|INNER JOIN
		|	_user C (NOLOCK) ON C.userId = O.userId
		|GROUP BY
		|	C.userId
		|", Подключение);
		
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	userId
		|FROM
		|	#clientList
		|", Подключение);
		
		ПредварительныйСписокКонтрагентов = Новый СписокЗначений;
		Пока НЕ Rs.EOF Цикл
			ПредварительныйСписокКонтрагентов.Добавить(ПрефиксКодовКонтрагентов + Формат(Rs.Fields("userId").Value, "ЧГ="));
			Rs.MoveNext()
		КонецЦикла;
		RS=0;
		
		//СледующееСостояние("Поиск уже существующих котрагентов");
		УжеСуществующиеКонтрагенты = "";
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Код
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Код В(&ПредварительныйСписок)
		|	И Контрагенты.Покупатель = ИСТИНА";
		Запрос.УстановитьПараметр("ПредварительныйСписок", ПредварительныйСписокКонтрагентов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УжеСуществующиеКонтрагенты = УжеСуществующиеКонтрагенты + "," + Сред(Выборка.Код, 2);
		КонецЦикла;
		
		//СледующееСостояние("Подготовка данных котрагентов");
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	C.userId,
		|	C.INN AS ИНН,
		|	C.KPP AS КПП,
		|	ISNULL(C.firstName, '') + ISNULL(' ' + C.middleName, '') + ISNULL(' ' + C.lastName, '') AS Name,
		|	C.comment   AS userComment,
		|	C.JurPerson   AS jurPerson,
		|	C.Email     AS Email
		|FROM
		|	#clientList L
		|INNER JOIN
		|	_user C (NOLOCK) ON C.userId = L.userId " + 
		
		?(УжеСуществующиеКонтрагенты = "", "", "
		|WHERE
		|	L.userId NOT IN ("+Сред(УжеСуществующиеКонтрагенты, 2)+")") +
		
		"
		|ORDER BY
		|	L.userId
		|", Подключение);
		
		ДанныеКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
		ЗаписатьКонтрагентов = ДанныеКонтрагентов.Количество() > 0;
		RS=0;
		
	Исключение
		НормальныйХодВыполнения = Ложь;
		ЗаписатьЛог(1, "Ошибка подготовки списка контрагентов"+Символы.ПС+ОписаниеОшибки());
		//Лог("Ошибка подготовки списка контрагентов"+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//КонецЕсли;	
	
	// 1) Контрагенты (магазин-владелец; покупатель)
	//ЗаписатьКонтрагентов(ДанныеКонтрагентов);  
	//  запись - - - В п.3 --> 
	
	////	 2) Номенклатура
	//ОбновлятьНоменклатуру = Истина;
	//ОбновлятьНоменклатуру = Ложь;
	ЗаписатьНоменклатуру(СписокЗаказов, ТабличнаяЧастьЗаказов);//, ОбновлятьНоменклатуру);
	
	// 3) Заказы 
	ТоварыТабличнойЧастиЗаказов = Новый ТаблицаЗначений;
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("Articul"     , ОписаниеТиповСтрока);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("Name"        , ОписаниеТиповСтрока);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("Price_Ч"     , ОписаниеТиповЧисло);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("Shop_Ч"      , ОписаниеТиповЧисло);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("cnt_Ч"       , ОписаниеТиповЧисло);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("fixedCount_Ч", ОписаниеТиповЧисло);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("orderId_Ч"   , ОписаниеТиповЧисло);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("skuId_Ч"     , ОписаниеТиповЧисло);
	//ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("skuIdrestore_Ч", ОписаниеТиповСтрока)
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("weight_Ч"     , ОписаниеТиповСтрока);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("Реж"          , ОписаниеТиповЧисло);	
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("stockId"      , ОписаниеТиповЧисло);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("stockName"    , ОписаниеТиповСтрока);
	ТоварыТабличнойЧастиЗаказов.Колонки.Добавить("stockIdImport", ОписаниеТиповСтрока);
	
	Для Каждого Стр Из ТабличнаяЧастьЗаказов Цикл
		НоваяСтр = ТоварыТабличнойЧастиЗаказов.Добавить();
		НоваяСтр.Articul         = Стр.Articul;
		НоваяСтр.Name            = Стр.Name;
		НоваяСтр.Price_Ч         = Стр.Price_Ч;
		НоваяСтр.Shop_Ч          = Стр.Shop_Ч;
		НоваяСтр.cnt_Ч           = Стр.cnt_Ч;
		НоваяСтр.fixedCount_Ч    = Стр.fixedCount_Ч;
		НоваяСтр.orderId_Ч       = Стр.orderId_Ч;
		НоваяСтр.skuId_Ч         = Стр.skuId_Ч;
		НоваяСтр.weight_Ч        = Стр.weight_Ч;
		НоваяСтр.Реж             = Стр.Реж;
		
		Если ТипЗнч(Стр.StockId_Ч) = Тип("Null") Тогда
			StockId = 0;
		Иначе
			StockId = Стр.stockId_Ч;
		КонецЕсли;
		НоваяСтр.stockID      = StockId;
		НоваяСтр.stockName    = Стр.stockName;
		НоваяСтр.stockIdImport = Стр.stockIdImport;
	КонецЦикла;
	
	ЗагрузкаСкладовМагазинов(ТоварыТабличнойЧастиЗаказов);
	
	//+++ Костя 150915
	//****************Если Магазин TopDelivery ИЛИ В группе* и СкладМагазина не указан задать TRANSFER@30	
	ИМ_TopDeliveryРодитель = Справочники.Контрагенты.НайтиПоКоду("Shop_222");
	ЗапросТопДеливери = Новый Запрос;
	ЗапросТопДеливери.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Код КАК Код
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Родитель.ОсновнойМагазин = &ИМ_TopDelivery";
	ЗапросТопДеливери.УстановитьПараметр("ИМ_TopDelivery", ИМ_TopDeliveryРодитель);
	СписокМагазиновТопДеливери = ЗапросТопДеливери.Выполнить().Выгрузить();
	ОснКодТопДеливери = СписокМагазиновТопДеливери.Добавить();
	ОснКодТопДеливери.Код = 222;  // - Основной магазин TopDelivery
	
	Для Каждого СтрК Из СписокМагазиновТопДеливери Цикл
		КодМагазинаТ = СтрЗаменить(СтрК.Код, "Shop_","");//+ Формат(Стр.Код, "ЧН=0; ЧГ=");
		КодМагазинаТ = Число(СокрЛП(КодМагазинаТ));
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Shop_Ч", КодМагазинаТ);
		НайденныеСтроки = ТоварыТабличнойЧастиЗаказов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого СтрТз Из НайденныеСтроки Цикл
				Если СтрТз.stockID = 0 Тогда
					СтрТз.stockID = 7; //- StockID=7 - TRANSFER@30
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//--- Костя 150915
	
	//ЗагрузкаИОбновлениеМагазинов();
	
	ЗагрузкаЗаказов(СписокЗаказов, ДанныеКонтрагентов, ТоварыТабличнойЧастиЗаказов, ДатаЗапроса);
	
КонецПроцедуры

Процедура ЗагрузкаСкладовМагазинов(ТабличнаяЧастьЗаказов)
	
	/////////////////
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockId КАК ЧИСЛО(9, 0)) КАК КодСклада,
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockIdImport КАК СТРОКА(20)) КАК ИдНаправления,
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.stockName КАК СТРОКА(50)) КАК НаименованиеСклада,
	|	ВЫРАЗИТЬ(КодыСкладовМагазинов.Shop_Ч КАК ЧИСЛО(3, 0)) КАК ВладелецСклада
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&КодыСкладовМагазинов КАК КодыСкладовМагазинов
	|ГДЕ
	|	КодыСкладовМагазинов.stockId <> 0;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыСклада.КодСклада,
	|	КодыСклада.НаименованиеСклада,
	|	КодыСклада.ВладелецСклада,
	|	ЕСТЬNULL(СкладыМагазинов.Ссылка, 0) КАК СкладМагазинаСсылка,
	|	КодыСклада.ИдНаправления
	|ПОМЕСТИТЬ СкладыМагазиновВБазе
	|ИЗ
	|	ВремТаб КАК КодыСклада
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладыМагазинов КАК СкладыМагазинов
	|		ПО КодыСклада.КодСклада = СкладыМагазинов.Код;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыМагазиновВБазе.КодСклада,
	|	СкладыМагазиновВБазе.НаименованиеСклада,
	|	СкладыМагазиновВБазе.ВладелецСклада,
	|	СкладыМагазиновВБазе.СкладМагазинаСсылка,
	|	СкладыМагазиновВБазе.ИдНаправления
	|ИЗ
	|	СкладыМагазиновВБазе КАК СкладыМагазиновВБазе
	|ГДЕ
	|	СкладыМагазиновВБазе.СкладМагазинаСсылка = 0");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КодыСкладовМагазинов", ТабличнаяЧастьЗаказов);
	ТЗНовыеСкладыМагазинов = Запрос.Выполнить().Выгрузить();
	
	ИМ_TopDelivery = Справочники.Контрагенты.НайтиПоКоду("Shop_222");
	
	Для Каждого Стр Из ТЗНовыеСкладыМагазинов Цикл
		
		КодВладельца = "Shop_" + Формат(Стр.ВладелецСклада, "ЧН=0; ЧГ=");
		
		НовыйСклад = Справочники.СкладыМагазинов.СоздатьЭлемент();
		НовыйСклад.Код                      = Стр.КодСклада;
		НовыйСклад.Наименование             = Стр.НаименованиеСклада;
		НовыйСклад.ИдентификаторНаправления = СокрЛП(Стр.ИдНаправления);
		
		Если Найти(Стр.НаименованиеСклада,"@") > 0 Тогда
			НовыйСклад.Владелец     = ИМ_TopDelivery;	
		Иначе
			НовыйСклад.Владелец     = Справочники.Контрагенты.НайтиПоКоду(КодВладельца);
		КонецЕсли;
		
		Попытка
			НовыйСклад.Записать();
			ЗаписатьЛог(6, "   " + "+++ Записан новый склад: " +"stockID: " + Строка(Стр.КодСклада) +" :: Владелец:"+ Строка(КодВладельца));
		Исключение
			ЗаписатьЛог(6, "   " + "--- Ошибка записи склада: " + ОписаниеОшибки()+" :: stockID:" + Строка(Стр.КодСклада) +" :: Владелец:"+ Строка(КодВладельца));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНоменклатуру(СписокЗаказов, ТабличнаяЧастьЗаказов)//, ОбновлятьНоменклатуру)
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	КодыТовара = Новый ТаблицаЗначений;
	КодыТовара.Колонки.Добавить("КодТовара", ОписаниеТиповСтрока);	
	Для Каждого СтрТовара Из ТабличнаяЧастьЗаказов Цикл
		НоваяСтрКодыТовара = КодыТовара.Добавить();
		НоваяСтрКодыТовара.КодТовара = Формат(СтрТовара.skuid_Ч, "ЧН=0; ЧГ=");
	КонецЦикла;
	//КодыТовара.Добавить().КодТовара = "12345666"; // ДЛЯ Т Е С Т А
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТчЗаказы.КодТовара КАК СТРОКА(11)) КАК КодТовара
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&ТЧЗаказы КАК ТчЗаказы;
	|////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТовара.КодТовара КАК КодТовара,
	|	ЕСТЬNULL(Номенклатура.Ссылка, 0) КАК НоменклатураСсылка
	|ПОМЕСТИТЬ НоменклатураВБазе
	|ИЗ
	|	ВремТаб КАК КодыТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО КодыТовара.КодТовара = Номенклатура.Код;
	|////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   НоменклатураВБазе.КодТовара КАК КодТовара
	|ИЗ 
	|  НоменклатураВБазе
	|ГДЕ НоменклатураВБазе.НоменклатураСсылка = 0
	|");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЧЗаказы", КодыТовара);
	ТЗНовыеТовары = Запрос.Выполнить().Выгрузить();
	/////////////////////////////////////////////////////////////////////////////////
	
	Штуки           = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // шт.
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001");       // Товар
	СтавкаНДС18     = Перечисления.СтавкиНДС.НДС18;
	
	ДатаНачалаЗагрузкиТоваров = ТекущаяДата();
	
	флНовый = Истина;
	Для Каждого НовыйТовар Из ТЗНовыеТовары Цикл
		Стр = ТабличнаяЧастьЗаказов.Найти(Число(НовыйТовар.КодТовара));
		
		//Для Каждого Стр Из ТабличнаяЧастьЗаказов Цикл 
		//	
		//	флНовый = Ложь;
		//	Товар = Справочники.Номенклатура.НайтиПоКоду(ЧислоКСтрокеБезПробелов(стр.skuId_Ч));
		//	
		//	Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
		ТекТовар = Справочники.Номенклатура.СоздатьЭлемент();
		//		флНовый = Истина;			
		//	Иначе
		//		//Если ОбновлятьНоменклатуру Тогда
		//			//ТекТовар = Товар.ПолучитьОбъект();
		//		//Иначе 
		//			Продолжить; // Перейти к след. позиции
		//		//КонецЕсли;
		//	КонецЕсли;
		
		Заказ       = СписокЗаказов.Найти(Число(Стр.orderId_Ч), "orderId_Ч");
		КодМагазина = Заказ.shop_Ч;
		КодТовара   = Стр.skuId_Ч;
		Штуки       = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");      // шт.
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001"); // Товар
		
		ТекТовар.Родитель                = ПодготовитьРодителяНоменклатуры(Заказ, КодМагазина);//Бухаров - добавил параметр код магазина
		ТекТовар.Наименование            = стр.Name;
		ТекТовар.НаименованиеПолное      = стр.Name;
		ТекТовар.Код 				 	 = ЧислоКСтрокеБезПробелов(КодТовара);
		ТекТовар.БазоваяЕдиницаИзмерения = Штуки;
		ТекТовар.ВидНоменклатуры         = ВидНоменклатуры;
		ТекТовар.Артикул				 = стр.articul;
		ТекТовар.СтавкаНДС               = СтавкаНДС18;
		ТекТовар.ВестиУчетПоСериям       = Ложь;
		
		Попытка
			ТекТовар.Записать();
			ЗаписатьЛог(2, "   " + ?(флНовый, "+++ Записан новый", "*** Обновлен") + " товар: "+ ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")");
		Исключение
			НормальныйХодВыполнения = Ложь;
			ЗаписатьЛог(2, "!!!Ошибка " + ?(флНовый, "записи нового", "обновления") + " товара: " + ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		// Записываем единицу хранения остатков и единицу для отчетов
		ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, ТекТовар.Ссылка);
		Если ВыборкаЕдиниц.Следующий() Тогда
			НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
		Иначе
			НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(ТекТовар.БазоваяЕдиницаИзмерения);
			НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = ТекТовар.БазоваяЕдиницаИзмерения;
			НайденнаяЕдиницаОбъект.Коэффициент             = 1;
			НайденнаяЕдиницаОбъект.Владелец                = ТекТовар.Ссылка;
			
			Попытка
				НайденнаяЕдиницаОбъект.Записать();
			Исключение
				ЗаписатьЛог(2,"Ошибка записи ЕДИНИЦЫ ИЗМЕРЕНИЯ: " + НайденнаяЕдиница + " Для: " + ТекТовар);
			КонецПопытки;
			
			НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		КонецЕсли;
		
		ТекТовар.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
		ТекТовар.ЕдиницаДляОтчетов       = НайденнаяЕдиница;
		
		Попытка
			ТекТовар.Записать();
			ЗаписатьЛог(2, "   +++++ " +"ЕдИзм ХрОстатков: "+ ТекТовар.ЕдиницаХраненияОстатков + " ЕдИзм ДляОтчетов: "+ ТекТовар.ЕдиницаДляОтчетов);
		Исключение
			ЗаписатьЛог(2, "   +++++ " + "ОШИБКА ЗАПИСИ" + "ЕдИзм ХрОстатков: "+ ТекТовар.ЕдиницаХраненияОстатков + " ЕдИзм ДляОтчетов: "+ ТекТовар.ЕдиницаДляОтчетов);
		КонецПопытки;
		
		
	КонецЦикла;
	
	КоличествоНовыхТоваров = ТЗНовыеТовары.Количество();
	ДатаЗавершенияЗагрузкиТоваров = ТекущаяДата();
	
	Если КоличествоНовыхТоваров > 0 Тогда
		ЗаписатьЛог(7,":::::Загрузка товаров:::::"     + СИмволы.ПС + 
		"Всего: " + Строка(СписокЗаказов.Количество())+
		Символы.ПС +  "::::C: "+ ДатаНачалаЗагрузкиТоваров + " По: "+ ДатаЗавершенияЗагрузкиТоваров+
		Символы.ПС +  "==========================");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаЗаказов(СписокЗаказов, ДанныеКонтрагентов, ТабличнаяЧастьЗаказов, ДатаЗапроса)
	
	ДатаНачалаЗагрузкиЗаказов = ТекущаяДата();
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ТЗ1 = Новый ТаблицаЗначений;
	ТЗ1.Колонки.Добавить("Номер"         , ОписаниеТиповСтрока);
	ТЗ1.Колонки.Добавить("КодКонтрагента", ОписаниеТиповСтрока);
	ТЗ1.Колонки.Добавить("КодВладельца"  , ОписаниеТиповСтрока);
	//ТЗ1.ЗагрузитьКолонку(МассивНомеров,"Номер");
	
	Если СписокЗаказов.Количество() >  0 Тогда
		
		Подключение = Евген.СоздатьПодключениеКИнтернетМагазину();
		ПрефиксКодовКонтрагентов = "R";
		//ДатаЗапроса = НачалоДня(ТекущаяДата());
		
		Для Каждого Стр Из СписокЗаказов Цикл
			НоваяСтрТЗ1 = ТЗ1.Добавить();
			НоваяСтрТЗ1.Номер          = Формат(Стр.orderId_Ч, "ЧН=0; ЧГ=");
			НоваяСтрТЗ1.КодКонтрагента = "R"+Формат(Стр.UserId_Ч, "ЧН=0; ЧГ=");
			НоваяСтрТЗ1.КодВладельца   = "Shop_" + Формат(Стр.shop_Ч, "ЧН=0; ЧГ=");
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаЗаказы", ТЗ1);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаЗаказы.Номер КАК СТРОКА(11)) КАК НомерЗаказа,
		|	ВЫРАЗИТЬ(ТаблицаЗаказы.КодКонтрагента КАК СТРОКА(9)) КАК КодКонтрагент,
		|	ВЫРАЗИТЬ(ТаблицаЗаказы.КодВладельца КАК СТРОКА(9)) КАК КодВладельца
		|ПОМЕСТИТЬ ВремТаб
		|ИЗ
		|	&ТаблицаЗаказы КАК ТаблицаЗаказы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремТаб.НомерЗаказа КАК НомерЗаказа,
		|	ВремТаб.КодВладельца КАК КодВладельца,
		|	ВремТаб.КодКонтрагент КАК КодКонтрагент,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(11)) КАК Номер,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	ПоступлениеТоваровУслуг.Ссылка КАК Поступление,
		|	ПеремещениеТоваров.Ссылка КАК Перемещение,
		|	ВозвратТоваровОтПокупателя.Ссылка КАК Возврат,
		|	Контрагенты.Ссылка КАК ВладелецТовара,
		|	Контрагенты1.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ ТабЗаказы
		|ИЗ
		|	ВремТаб КАК ВремТаб
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ПО ВремТаб.НомерЗаказа = ПоступлениеТоваровУслуг.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО ВремТаб.НомерЗаказа = ПеремещениеТоваров.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|		ПО ВремТаб.НомерЗаказа = ВозвратТоваровОтПокупателя.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВремТаб.НомерЗаказа = РеализацияТоваровУслуг.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВремТаб.КодВладельца = Контрагенты.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
		|		ПО ВремТаб.КодКонтрагент = Контрагенты1.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабЗаказы.НомерЗаказа,
		|	ЕСТЬNULL(ТабЗаказы.Контрагент, 0) КАК Контрагент,
		|	ЕСТЬNULL(ТабЗаказы.ВладелецТовара, 0) КАК ВладелецТовара,
		|	ТабЗаказы.КодВладельца КАК КодВладельца,
		|	ТабЗаказы.КодКонтрагент КАК КодКонтрагент,	
		|	ТабЗаказы.Заказ КАК Заказ,
		|	ТабЗаказы.Поступление КАК Поступление,
		|	ТабЗаказы.Перемещение КАК Перемещение,
		|	ТабЗаказы.Возврат КАК Возврат
		|ИЗ
		|	ТабЗаказы КАК ТабЗаказы";
		ДокументыПоЗаказу = Запрос.Выполнить().Выгрузить();
		/////////////////////////////////////////////
		// Получим номера заказов без контрагентов(незаведенных в 1С) //
		ЗапросПоКонтрагентам = Новый Запрос(
		"ВЫБРАТЬ
		|	Таб.НомерЗаказа,
		|	Таб.Контрагент,
		|	Таб.ВладелецТовара,
		|	Таб.КодВладельца КАК КодВладельца,
		|	Таб.КодКонтрагент КАК КодКонтрагент	
		|ПОМЕСТИТЬ ВремТаб
		|ИЗ
		|	&ТабДанныеДляЗагрузки КАК Таб
		|ГДЕ
		|	(Таб.Контрагент = 0
		|			ИЛИ Таб.ВладелецТовара = 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб.НомерЗаказа КАК НомерЗаказа,
		|	Таб.КодКонтрагент КАК КодКонтрагент,	
		|	Таб.КодВладельца КАК КодВладельца,	
		|	ВЫБОР
		|		КОГДА Таб.Контрагент = 0 И Таб.ВладелецТовара = 0 ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Таб.Контрагент = 0
		|					ТОГДА 1
		|				ИНАЧЕ ВЫБОР
		|						КОГДА Таб.ВладелецТовара = 0
		|							ТОГДА 2
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ПризнакКонтрВладелец
		|ИЗ
		|	ВремТаб КАК Таб");
		ЗапросПоКонтрагентам.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросПоКонтрагентам.УстановитьПараметр("ТабДанныеДляЗагрузки", ДокументыПоЗаказу);
		
		НомераЗаказовБезКонтрагентов = ЗапросПоКонтрагентам.Выполнить().Выгрузить();
		
		///////         1) записать справочник Контрагенты
		/////// 			2) обработать документ
		Если НомераЗаказовБезКонтрагентов.Количество() > 0 Тогда
			//НовыеМагазины = "";
			НовыеКонтрагенты = "";
			Для Каждого Стр Из НомераЗаказовБезКонтрагентов Цикл
				//Если ЗначениеЗаполнено(Стр.КодВладельца) Тогда                         // 6
				//	НовыеМагазины = НовыеМагазины + "," + СокрЛП(Сред(Стр.КодВладельца,6));
				//КонецЕсли;
				Если ЗначениеЗаполнено(Стр.КодКонтрагент) Тогда                         // 6
					НовыеКонтрагенты = НовыеКонтрагенты + "," + СокрЛП(Сред(Стр.КодКонтрагент,2));
				КонецЕсли;			
				//НовыеКонтрагенты = НовыеКонтрагенты + "," + СокрЛП(Сред(Стр.КодКонтрагент, 2));
			КонецЦикла;
			///////////////////////////////////////////////////////////
			// 1) Создать 2 списка: Контрагентов и магазинов(владелец).
			// 2) Создать контрагентов
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			// ***********************************************************************	
			// 1) Запрос к sql-базе для заполнения инфоДанных по контрагентам
			
			СписокКолонокДанныхКОнтрагентов = "userId, ИНН, КПП, Name, userComment, jurPerson, Email, ОКПО";		
			
			RS = Евген.ЗапросКИнтернетМагазину("
			|SELECT
			|	C.userId,
			|	C.INN AS ИНН,
			|	C.KPP AS КПП,
			|	ISNULL(C.firstName, '') + ISNULL(' ' + C.middleName, '') + ISNULL(' ' + C.lastName, '') AS Name,
			|	C.comment   AS userComment,
			|	C.JurPerson   AS jurPerson,
			|	C.Email     AS Email,
			|	C.OKPO AS ОКПО,
			|	C.jurAddress AS ЮридическийАдрес,
			|	C.BIK AS БИК,
			|	C.RS AS НомерРасчетногоСчета		
			|FROM
			| 	_user C (NOLOCK)
			//|	_user C (NOLOCK)
			|WHERE
			|	C.userId IN "+"("+Сред(НовыеКонтрагенты,2)+")"+"
			//|GROUP BY
			//|	C.userId
			//|	C.INN
			|",Подключение);
			ДанныеКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
			RS=0;
			
			// 2) Создание, перезапись контрг.
			Если ДанныеКонтрагентов.Количество() > 0 Тогда
				
				РодительКонтрагентов = Справочники.Контрагенты.НайтиПоКоду("000000003");
				Для Каждого Контр Из ДанныеКонтрагентов Цикл 
					КодКонтрагента = ПрефиксКодовКонтрагентов + ЧислоКСтрокеБезПробелов(Число(Контр.userId));
					НовыйКА = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
					//флНовыйКонтрагент = НовыйКА = Неопределено;
					Если ЗначениеЗаполнено(НовыйКа) Тогда
						//Если флНовыйКонтрагент Тогда
						НовыйКА = НовыйКА.ПолучитьОбъект();
						флНовыйКонтрагент = Ложь;
					Иначе
						НовыйКА = Справочники.Контрагенты.СоздатьЭлемент();
						флНовыйКонтрагент = Истина;
					КонецЕсли;
					
					//Адрес = СокрЛП(УбратьНепечатныеСимволы(Контр.ЮридическийАдрес));
					ИНН = ОставитьТолькоЦифры(Контр.ИНН);
					Если СтрДлина(ИНН) > 7 Тогда
						НовыйКА.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ЮрЛицо;
						НовыйКА.ИНН = Лев(Контр.ИНН, 12);
						НовыйКА.КПП = Контр.КПП;
					Иначе
						НовыйКА.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ФизЛицо;
					КонецЕсли;
					НовыйКА.Наименование           = Контр.Name;
					НовыйКА.Код                    = КодКонтрагента;
					//НовыйКА.НаименованиеПолное     = Контр.Наименование;
					//НовыйКА.КодПоОКПО              = Контр.ОКПО;
					НовыйКА.Родитель               = РодительКонтрагентов;
					//НовыйКА.ДополнительноеОписание = Адрес;
					
					НовыйКА.jurPerson = Контр.jurPerson;
					НовыйКА.Покупатель             = Истина;
					Попытка
						НовыйКА.Записать();
						ЗаписатьЛог(3, ?(флНовыйКонтрагент, "+++ Записан новый", "*** Перезаписан")+" контрагент "+НовыйКА+", ИНН: "+Контр.ИНН); 
						//Лог(?(флНовыйКонтрагент, "+++ Записан новый", "*** Перезаписан")+" контрагент "+НовыйКА+", ИНН: "+Контр.ИНН);
						ПодготовитьДоговор(НовыйКА.Ссылка)
					Исключение
						НормальныйХодВыполнения = Ложь;
						ЗаписатьЛог(3, "!!!Ошибка записи нового контрагента: "+Контр.Name+", ИНН: "+Контр.ИНН+Символы.ПС+ОписаниеОшибки());
						//Лог("!!!Ошибка записи нового контрагента: "+Контр.Name+", ИНН: "+Контр.ИНН+Символы.ПС+ОписаниеОшибки());
						Продолжить;
					КонецПопытки;
					
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//****************************************************************************************************	
		//                     ************       ДОКУМЕНТЫ       ************
		// - можно записать куда нибудь в регистр. вызвать один раз. много обращений по поиску****************	
		ZStore                    = Справочники.Контрагенты.НайтиПоКоду("Shop_167");//Бухаров
		НашаОрганизация           = Справочники.Организации.НайтиПоКоду("000000001"); //МС Логистик
		СкладХраниения            = Справочники.Склады.НайтиПоКоду("000000001");
		СкладРеализацииПоКомиссии = Справочники.Склады.НайтиПоКоду("000000003");
		СкладРеализацииПоДоставке = Справочники.Склады.НайтиПоКоду("000000004");
		СкладРеализации           = СкладРеализацииПоКомиссии; // Сейчас это не комиссия, а просто склад сборки
		СкладПитер                = Справочники.Склады.НайтиПоКоду("000000006");
		НашСчет                   = Справочники.БанковскиеСчета.НайтиПоКоду("000000001");  //Альфа Банк
		РозничныйТипЦен           = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"); //РознЦена
		Рубли                     = Справочники.Валюты.НайтиПоКоду("643");
		КонтрагентДПД             = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Справочники.Контрагенты.НайтиПоКоду("000000006"));
		ТочкаДПД                  = НайтиСпецТочку(КонтрагентДПД);
		КонтрагентПитер           = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Справочники.Контрагенты.НайтиПоКоду("000000007"));
		ТочкаПитер                = НайтиСпецТочку(КонтрагентПитер);
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		н = 0;
		ТекПроц = -1;
		сч = 0;
		флПропускатьЗагрузку = Ложь;
		
		МассивЗагруженныхНомеровЗаказов = Новый Массив;
		
		Для Каждого Заказ Из СписокЗаказов Цикл
			
			Если Заказ.deliveryDate_Д = Null Тогда // Если дата доставки не указана - не загружать.
				ЗаписатьЛог(4, "---- ОШИБКА: Не указана дата доставки, заказ: " + Строка(Заказ.orderId_Ч) + " -не загружен.");
				//МассивЗагруженныхНомеровЗаказов.Добавить(ЧислоКСтрокеБезПробелов(Заказ.Номер));
				Продолжить;	
			КонецЕсли;
			
			НовыйОбъект = Ложь;
			ВозниклаОшибка = Ложь;
			флРазрешеноОбновлениеЗаказа = Истина;
			флЗаполнятьРеализацию = Ложь;
			
			Если Не Заказ.deliveryDate_Д = Null Тогда
				Если Заказ.deliveryDate_Д < '20000101' Тогда
					Заказ.deliveryDate_Д = Null;
				КонецЕсли;
			КонецЕсли;
			
			Если Заказ.completeDate_Д < '20000101' Тогда
				Заказ.completeDate_Д = ?(Заказ.deliveryDate_Д = Null, Заказ.createDate_Д, Заказ.deliveryDate_Д);
			КонецЕсли;
			
			СтатусЗаказа       = Заказ.status_Ч;
			НомерЗаказа        = Заказ.orderId_Ч;
			стрНомерЗаказа     = ЧислоКСтрокеБезПробелов(НомерЗаказа);
			ДатаСозданияЗаказа = Заказ.createDate_Д;
			СтоимостьДоставки  = Заказ.deliveryPrice_Ч + Заказ.deliveryForMkadRUR_Ч;
			СтоимостьДоставкиДоМкад = Заказ.deliveryPrice_Ч;
			СтоимостьДоставкиЗаМкад = Заказ.deliveryForMkadRUR_Ч;
			ДатаЗакрытияЗаказа = Заказ.completeDate_Д;
			БанковскаяКомиссия = Заказ.BankKom_Ч;
			//Бухаров
			НомерВнешнегоЗаказа= Заказ.orderIDImport;
			ТипОплаты		   = Заказ.pay_type_Ч;
			КатегорияДоставки  = Заказ.typeDelivery_Ч;
			ОбщийВесЗаказа = Заказ.OrderWeight_Ч;
			ЧистыеСД = Заказ.serviceDCclean_Ч;
			
			//МетодСозданияЗаказа
			Если Заказ.CreateWay_Ч > 0 Тогда
				КодМетодСозданияЗаказа = Заказ.CreateWay_Ч;
				Если 	  КодМетодСозданияЗаказа = 1 Тогда
					МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_MMC;
				ИначеЕсли КодМетодСозданияЗаказа = 2 Тогда
					МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Strizh;
				ИначеЕсли КодМетодСозданияЗаказа = 3 Тогда
					МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Yandex;
				ИначеЕсли КодМетодСозданияЗаказа = 4 Тогда
					МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.XLS;
				ИначеЕсли КодМетодСозданияЗаказа = 5 Тогда
					МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.WEB_Интерфейс;
				ИначеЕсли КодМетодСозданияЗаказа = 6 Тогда
					МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.Email_1C;
				ИначеЕсли КодМетодСозданияЗаказа = 7 Тогда
					МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_MMCv2;
				Иначе 
					МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.ПустаяСсылка();
				КонецЕсли;
			Иначе 
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.ПустаяСсылка();
			КонецЕсли;
			
			ТипТарифаЧ  = Заказ.tariffType_Ч;
			РасчетныйБрейкЧ  = Заказ.tariffCategoryId_Ч;
			
			ТарифЧ = Заказ.tariffID_Ч;
			
			ТипТарифа = Справочники.ТипыТарифов.НайтиПоКоду(ТипТарифаЧ);
			Если ТипТарифа.Пустая() Тогда
				ТипТарифа = Справочники.ТипыТарифов.ОсновнаяТарифнаяСетка;
			КонецЕСли;	
			
			ЗапБр = Новый Запрос;
			ЗапБр.Текст = "ВЫБРАТЬ
			|	РасчетныеБрейки.Ссылка КАК РасчетныйБрейк
			|ИЗ
			|	Справочник.РасчетныеБрейки КАК РасчетныеБрейки
			|ГДЕ
			|	РасчетныеБрейки.КодБрейка = &КодБрейка
			|	И РасчетныеБрейки.Владелец.Ссылка = &Владелец";
			ЗапБр.УстановитьПараметр("КодБрейка", РасчетныйБрейкЧ);			  
			ЗапБр.УстановитьПараметр("Владелец", ТипТарифа);			  
			
			РезБр = ЗапБр.Выполнить();
			
			Если РезБр.Пустой() Тогда
				РасчетныйБрейк = Справочники.РасчетныеБрейки.ПустаяСсылка();
			Иначе	
				ВыбБр = РезБр.Выбрать();
				Если ВыбБр.Следующий() Тогда
					РасчетныйБрейк = ВыбБр.РасчетныйБрейк;
				Иначе	
					РасчетныйБрейк = Справочники.РасчетныеБрейки.ПустаяСсылка();
				КонецеСли;	
			КонецеСли;	
			
			АгВ  = Заказ.AgentComission_Ч;
			//Бухаров		
			
			СД = Заказ.servicedelivery_Ч;
			
			ТранспортнаяКомпания = Справочники.ТранспортныеКомпании.НайтиПоКоду(СД);
			
			КодМагазина = ПреобразоватьКодМагазина(Заказ.shop_Ч);//ДанныеМагазинов.Найти(Заказ.OrderID_Ч,"InternetShopID");//
			//КодМагазина = КодМагазина.InternetShopID;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Код = &Код";
			Запрос.УстановитьПараметр("Код", КодМагазина);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				КонтрагентМагазин = Выборка.Ссылка;
			КонецЕсли;
			
			ФлАвтоматическоеПоступление = КонтрагентМагазин.Автопоступление;
			// Контрагент		
			КодКонтрагента = ПрефиксКодовКонтрагентов + ЧислоКСтрокеБезПробелов(Заказ.userId_Ч);		
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Покупатель = ИСТИНА
			|	И Контрагенты.Код = &КодКонтрагента";
			Запрос.УстановитьПараметр("КодКонтрагента", КодКонтрагента);
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				//
			Иначе
				Контрагент = Результат[0].Ссылка;
			КонецЕсли;
			// Договор
			Договор = Контрагент.ОсновнойДоговорКонтрагента;	
			
			Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Или 
				Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Или 
				Контрагент = Неопределено Или 
				Договор = Неопределено Тогда
				ЗаписатьЛог(3,"НомерЗаказа: " +Строка(НомерЗаказа) + " !!!Ошибка поиска контрагента или договора: <" + Контрагент + "> <" + Договор + ">"); 
				ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!!Ошибка поиска контрагента или договора: <" + Контрагент + "> <" + Договор + ">");
				Продолжить;
			КонецЕсли;		
			
			ВозвратДок      = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
			РеализацияДок   = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			ПеремещениеДок  = Документы.ПеремещениеТоваров.ПустаяСсылка();
			ВозвратТоваровОтПокупателяДок = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
			ПоступлениеДок  = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
			
			ДоговорМагазина   = ПолучитьДоговорКомитента(КонтрагентМагазин, Истина); //Храним товар как комиссионный
			Если ДоговорМагазина = Неопределено Тогда
				ЗаписатьЛог(4, "!!!Ошибка. Не найден договор для магазина " + КонтрагентМагазин);
				ЗаписатьЛог(4, "Загрузка заказа " + стрНомерЗаказа + " отменена");
				//Лог("!!!Ошибка. Не найден договор для магазина " + КонтрагентМагазин);
				//Лог("Загрузка заказа " + стрНомерЗаказа + " отменена");
				флРазрешеноОбновлениеЗаказа = Ложь;
			КонецЕсли;
			//Сообщить("Маг = " + Заказ.shopName);
			НайТариф = Справочники.ТарифныеСетки.НайтиПоКоду(Формат(ТарифЧ, "ЧГ="));
			
			Если НайТариф.Владелец <> КонтрагентМагазин Тогда
				ЗаписатьЛог(4, "!!!Ошибка: найденный тариф относится к другому контрагенту: код контрагента = " + КонтрагентМагазин.Код + ", код тарифа=" + НайТариф.Код);
				//Лог("!!!Ошибка: найденный тариф относится к другому контрагенту: код контрагента = " + КонтрагентМагазин.Код + ", код тарифа=" + НайТариф.Код);
				//Продолжить; // в обработке закоментено
				Зап = Новый Запрос;
				
				Зап.Текст = "ВЫБРАТЬ
				|	ТарифныеСетки.Ссылка КАК ТС
				|ИЗ
				|	Справочник.ТарифныеСетки КАК ТарифныеСетки
				|ГДЕ
				|	ТарифныеСетки.Владелец = &Владелец";
				Зап.УстановитьПараметр("Владелец", КонтрагентМагазин.Ссылка);			
				РезТС = Зап.Выполнить().Выгрузить();
				Если РезТС.Количество() = 1 Тогда
					НайТариф = РезТС[0].ТС;
				КонецеСли;	
			КонецЕсли;
			
			/////////////////////////////
			ДлинаНомера = 11;
			Если СтрДлина(стрНомерЗаказа) < 11 Тогда
				КоличествоПробелов = 11 - СтрДлина(стрНомерЗаказа);
				Для к=1 По КоличествоПробелов Цикл
					стрНомерЗаказа = стрНомерЗаказа + " ";	
				КонецЦикла; 
			КонецЕсли;
			
			СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа, "НомерЗаказа");
			
			Если  СсылкиНаДокументы <> Неопределено Тогда
				РеализацияДок                 = ?(СсылкиНаДокументы.Заказ       = NULL, Неопределено, СсылкиНаДокументы.Заказ);
				ПеремещениеДок                = ?(СсылкиНаДокументы.Перемещение = NULL, Неопределено, СсылкиНаДокументы.Перемещение);
				ВозвратТоваровОтПокупателяДок = ?(СсылкиНаДокументы.Возврат     = NULL, Неопределено, СсылкиНаДокументы.Возврат);
				ПоступлениеДок                = ?(СсылкиНаДокументы.Поступление = NULL, Неопределено, СсылкиНаДокументы.Поступление);
			КонецЕсли;
			
			/////////////  ТОВАРЫ
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);			
			Товары = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);//ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);			
			Если Товары.Количество() > 0  Тогда
				ТоварыИзАдминкиКоличество = Товары.Количество();				
				Для Каждого СтрТовары Из Товары Цикл // если есть позиция с минусом - создаем или ищем возврат
					Если СтрТовары.cnt_Ч < 0 Тогда
						СоздаватьВозврат = Истина; 	
						Прервать;
					Иначе
						СоздаватьВозврат = Ложь;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СоздаватьВозврат = Ложь;
				ТоварыИзАдминкиКоличество = 0;
			КонецЕсли;
			
			// Поиск и создание Фрахт и Забора
			
			Если Заказ.selfDelivery_Ч <> 0 Тогда
				//ЗаписатьЛог(4, "   Доставка: самовывоз");
				//Лог("   Доставка: самовывоз");
				Если Заказ.selfDelivery_Ч = 2 Тогда
					НайЗабор_ = Документы.ЗаборТовара.НайтиПоНомеру(стрНомерЗаказа);
					НовыйОбъект = Ложь;
					Если НайЗабор_.Пустая() Тогда
						НайЗабор = Документы.ЗаборТовара.СоздатьДокумент();
						НовыйОбъект = Истина;
					Иначе
						НайЗабор = НайЗабор_.ПолучитьОбъект();
					КонецеСли;	
					
					
					НайЗабор.Дата = Заказ.deliveryDate_Д;
					Если Не ЗначениеЗаполнено(НайЗабор.Дата) Тогда
						НайЗабор.Дата = ТекущаяДата();
					КонецеСли;	
					НайЗабор.Номер = стрНомерЗаказа;
					НайЗабор.ДатаДоставки = Заказ.deliveryDate_Д;
					НайЗабор.Телефон = Заказ.Telephone;
					НайЗабор.Автор = Заказ.manager;
					НайЗабор.Контрагент = КонтрагентМагазин;
					НайЗабор.Комментарий = Заказ.comment;
					НайЗабор.АдресДоставки = Заказ.AddrFull;
					НайКат = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория", Число(КатегорияДоставки));
					НайЗабор.КатегорияДоставки = Найкат.Ссылка;
					НайЗабор.УслугиСД = Заказ.ServiceDC_Ч;
					НайЗабор.СтатусИнтернетМагазинаСпр = Справочники.СтатусЗаказаИнтернетМагазина.НайтиПоКоду(СтатусЗаказа);
					НайЗабор.СтатусИнтернетМагазина = СтатусЗаказа;
					НайЗабор.СтоимостьДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					НайЗабор.НомерВнешнегоЗаказа = НомерВнешнегоЗаказа;
					
					
					НайЗабор.Товары.Очистить();
					флЗабор = Истина;
					
					НайТр = Справочники.новаТранспорт.НайтиПоРеквизиту("НомерГосударственнойРегистрации", СокрЛП(Заказ.carNumber));
					НайЗабор.Транспорт = НайТр.Ссылка;
					
					времяС = СтрокаКВремя(Заказ.timeDeliveryFrom);
					Если Не ЗначениеЗаполнено(времяС) Тогда
						времяС = 9;
					КонецЕсли;
					времяПо = СтрокаКВремя(Заказ.timeDeliveryTo);
					Если Не ЗначениеЗаполнено(времяПо) Тогда
						времяПо = 19;
					КонецЕсли;
					Если времяПо < времяС Тогда
						времяПо = времяС + 3;
						Если времяПо > 23 Тогда
							времяПо = 23;
							времяС = 20;
						КонецЕсли;
					КонецЕсли;
					
					Если времяС = времяПо Тогда
						ВремяПо = 20;
					КонецЕсли;	
					
					
					ВремяПрибытияС_   = НачалоДня(Заказ.deliveryDate_Д) + времяС *60*60;
					ВремяПрибытияПо_  = НачалоДня(Заказ.deliveryDate_Д) + времяПо*60*60;
					
					//НайЗабор.ТочкаДоставки  = ПодобратьТочкуДоставкиПоАдресу(КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_);
					
					//НайЗабор.Записать(РежимЗаписиДокумента.Запись);
					//ДобавитьОбновляемыйДокумент(НайЗабор, "2=Проведение, 3=Проведение, 5=Проведение", "   забор товаров", "!!!Ошибка: Не удалось провести Забор "+стрНомерЗаказа);
					//флРазрешеноОбновлениеЗаказа = Ложь;
				ИначеЕсли Заказ.selfDelivery_Ч = 3 Тогда
					НайФрахт_ = Документы.Фрахт.НайтиПоНомеру(стрНомерЗаказа);
					НовыйОбъект = Ложь;
					Если НайФрахт_.Пустая() Тогда
						НайФрахт = Документы.Фрахт.СоздатьДокумент();
						НовыйОбъект = Истина;
					Иначе
						НайФрахт = НайФрахт_.ПолучитьОбъект();
					КонецеСли;	
					
					
					НайФрахт.Дата = Заказ.deliveryDate_Д;
					НайФрахт.Номер = стрНомерЗаказа;
					НайФрахт.ДатаДоставки = Заказ.deliveryDate_Д;
					НайФрахт.Телефон = Заказ.Telephone;
					НайФрахт.Автор = Заказ.manager;
					НайФрахт.Контрагент = КонтрагентМагазин;
					НайФрахт.Комментарий = Заказ.comment;
					НайФрахт.АдресДоставки = Заказ.AddrFull;
					//НайКат = Справочники.КатегорииДоставки.НайтиПоРеквизиту("Категория", Число(КатегорияДоставки));
					//НайФрахт.КатегорияДоставки = Найкат.Ссылка;
					НайФрахт.УслугиСД = Заказ.ServiceDC_Ч;
					НайФрахт.СтатусИнтернетМагазинаСпр = Справочники.СтатусЗаказаИнтернетМагазина.НайтиПоКоду(СтатусЗаказа);
					НайФрахт.СтатусИнтернетМагазина = СтатусЗаказа;
					//НайФрахт.СтоимостьДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					НайФрахт.НомерВнешнегоЗаказа = НомерВнешнегоЗаказа;
					НайФрахт.Товары.Очистить();
					НайФрахт.типоплаты = ТипОплаты;
					НайФрахт.СуммаДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					
					
					времяС = СтрокаКВремя(Заказ.timeDeliveryFrom);
					Если Не ЗначениеЗаполнено(времяС) Тогда
						времяС = 9;
					КонецЕсли;
					времяПо = СтрокаКВремя(Заказ.timeDeliveryTo);
					Если Не ЗначениеЗаполнено(времяПо) Тогда
						времяПо = 19;
					КонецЕсли;
					Если времяПо < времяС Тогда
						времяПо = времяС + 3;
						Если времяПо > 23 Тогда
							времяПо = 23;
							времяС = 20;
						КонецЕсли;
					КонецЕсли;
					
					Если времяС = времяПо Тогда
						ВремяПо = 20;
					КонецЕсли;	
					
					
					ВремяПрибытияС_   = НачалоДня(Заказ.deliveryDate_Д) + времяС *60*60;
					ВремяПрибытияПо_  = НачалоДня(Заказ.deliveryDate_Д) + времяПо*60*60;
					
					//НайФрахт.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_);
					
					
					флФрахт = Истина;
					
					НайТр = Справочники.новаТранспорт.НайтиПоРеквизиту("НомерГосударственнойРегистрации", СокрЛП(Заказ.carNumber));
					НайФрахт.Транспорт = НайТр.Ссылка;
					//ДобавитьОбновляемыйДокумент(НайФрахт, "2=Проведение, 3=Проведение, 5=Проведение", "   фрахт", "!!!Ошибка: Не удалось провести Фрахт "+стрНомерЗаказа);
					//флРазрешеноОбновлениеЗаказа = Ложь;					
					//НайФрахт.Записать(РежимЗаписиДокумента.Запись);
				КонецеСли;
			Иначе
				флЗабор = Ложь;
				флФрахт = Ложь;
			КонецЕсли;
			
			////////////// Дефолтный склад
			Если НЕ ЗначениеЗаполнено(Заказ.stockId_Ч) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
				НайденныеСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	СкладыМагазиновПоУмолчанию.СкладМагазина
				|ИЗ
				|	РегистрСведений.СкладыМагазиновПоУмолчанию КАК СкладыМагазиновПоУмолчанию
				|ГДЕ
				|	СкладыМагазиновПоУмолчанию.Магазин = &Магазин");
				Запрос.УстановитьПараметр("Магазин", КонтрагентМагазин);
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					СкладМагазинаЗаказа = Результат.СкладМагазина;
					Для Каждого СтрТовар Из НайденныеСтроки Цикл
						СтрТовар.stockId = Число(СкладМагазинаЗаказа.Код);
					КонецЦикла;							
				КонецЕсли;
			КонецЕсли;
			
			// Забор и фрахт
			флЗабор = ?(флЗабор=Неопределено,Ложь,флЗабор);
			флФрахт = ?(флФрахт=Неопределено,Ложь,флФрахт); 
			
			Если флЗабор Или флФрахт Тогда
				УспешноЗаписанЗабор = Ложь;				
				Если флЗабор тогда
					// Проверка по количеству товаров 
					ТоварыИзАдминкиКоличество = Товары.Количество();
					//
					Для Каждого СтрТовар Из Товары Цикл
						Товар = Справочники.Номенклатура.НайтиПоКоду(Формат(СтрТовар.skuId_Ч, "ЧН=0; ЧГ="));
						Цена  = СтрТовар.Price_Ч;
						Количество    = СтрТовар.cnt_Ч;
						Вес           = СтрТовар.weight_Ч;
						
						Нов = НайЗабор.Товары.Добавить();
						Нов.Номенклатура = Товар;
						Нов.Количество = Количество;
						Нов.Цена = Цена;
						Нов.Сумма = Нов.Количество*Нов.Цена;
						Нов.Вес = Вес;
					КонецЦикла;
					
					Попытка
						НайЗабор.Записать(РежимЗаписиДокумента.Запись);
						УспешноЗаписанЗабор = Истина;
						ЗаписатьЛог(4, "Записан: " + НайЗабор);
					Исключение
						ЗаписатьЛог(4, "Не удалось записать: " + НайЗабор + Символы.ПС + ОписаниеОшибки());
						УспешноЗаписанЗабор = Ложь;
					КонецПопытки;
				КонецЕсли;	
				
				Если УспешноЗаписанЗабор Тогда
					МассивЗагруженныхНомеровЗаказов.Добавить(СокрЛП(НайЗабор.Номер));
					ТоварыВДоке = НайЗабор.Товары.Количество();
					Если ТоварыИзАдминкиКоличество < ТоварыВДоке Тогда
						ЗаписатьЛог(8, "Забор: " + НайЗабор.Номер + " " + Символы.ПС + "Загружено " + Строка(ТоварыВДоке) + " Из " + Строка(ТоварыИзАдминкиКоличество));
					КонецЕсли;
				КонецЕсли;												
				
				УспешноЗаписанФрахт = Ложь;
				Если флФрахт тогда
					Для Каждого СтрТовар Из Товары Цикл
						Товар = Справочники.Номенклатура.НайтиПоКоду(Формат(СтрТовар.skuId_Ч, "ЧН=0; ЧГ="));
						Цена  = СтрТовар.Price_Ч;
						Количество    = СтрТовар.cnt_Ч;
						Вес           = СтрТовар.weight_Ч;
						
						Нов = НайФрахт.Товары.Добавить();
						Нов.Номенклатура = Товар;
						Нов.Количество = Количество;
						Нов.Цена = Цена;
						Нов.Сумма = Нов.Количество*Нов.Цена;
						Нов.Вес = Вес;
					КонецЦикла;
					Попытка
						НайФрахт.Записать(РежимЗаписиДокумента.Запись);
						УспешноЗаписанФрахт = Истина;
						ЗаписатьЛог(4, "Записан: " + НайФрахт);
					Исключение
						УспешноЗаписанФрахт = Ложь;
						ЗаписатьЛог(4, "Не удалось записать: " + НайФрахт + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
				Если УспешноЗаписанФрахт Тогда
					МассивЗагруженныхНомеровЗаказов.Добавить(СокрЛП(НайФрахт.Номер));
					ТоварыВДоке = НайФрахт.Товары.Количество();
					Если ТоварыИзАдминкиКоличество < ТоварыВДоке Тогда
						ЗаписатьЛог(8, "Фрахт: " + НайФрахт.Номер + " " + Символы.ПС + "Загружено " + Строка(ТоварыВДоке) + " Из " + Строка(ТоварыИзАдминкиКоличество));
					КонецЕсли;					
				КонецЕсли;												
				
			Иначе
				
				// Поиск или удаление возврата  
				флЗаполнятьВозврат = Ложь;
				флНужноЗаписыватьВозврат = Ложь;
				ВозвратДок = ВозвратТоваровОтПокупателяДок;
				
				БылоТоваровВозврат = 0;// Проверка загрузки товаров
				
				Если флРазрешеноОбновлениеЗаказа Тогда
					Если СтатусЗаказа = 4 Тогда
						Если ВозвратДок <> Неопределено Тогда
							Если Не ПометкаДокументаНаУдаление(ВозвратДок.ПолучитьОбъект()) Тогда
								ЗаписатьЛог(4, "!!! Ошибка пометки на удаление возврата " + стрНомерЗаказа + " " + ОписаниеОшибки());
								//Лог("!!! Ошибка пометки на удаление возврата " + стрНомерЗаказа + " " + ОписаниеОшибки());
								ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!! Ошибка пометки на удаление возврата " + стрНомерЗаказа + " " + ОписаниеОшибки());
								//флОбновлятьДатуПоследнейЗагрузки = Ложь;
								флРазрешеноОбновлениеЗаказа = Ложь;
							КонецЕсли;
							ВозвратДок = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
						КонецЕсли;
					Иначе
						Если СоздаватьВозврат Тогда
							Если ВозвратДок <> Неопределено Тогда
								ВозвратДокОбъект = ВозвратДок.ПолучитьОбъект();
								флНужноЗаписыватьВозврат = Истина;
								флЗаполнятьВозврат = Истина;
								Если ВозвратДокОбъект.Товары.Количество() > 0 Тогда
									
									ВозвратДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа) - 10 * 60;
									ВозвратДокОбъект.Номер                        = стрНомерЗаказа;
									ВозвратДокОбъект.ОтражатьВУправленческомУчете = Истина;
									ВозвратДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
									ВозвратДокОбъект.ОтражатьВНалоговомУчете      = Истина;
									ВозвратДокОбъект.Организация                  = НашаОрганизация;
									ВозвратДокОбъект.СкладОрдер                   = СкладХраниения;
									ВозвратДокОбъект.ТипЦен                       = РозничныйТипЦен;
									ВозвратДокОбъект.ВалютаДокумента              = Рубли;
									ВозвратДокОбъект.КурсВзаиморасчетов           = 1;
									ВозвратДокОбъект.КратностьВзаиморасчетов      = 1;
									ВозвратДокОбъект.УчитыватьНДС                 = Истина;
									ВозвратДокОбъект.СуммаВключаетНДС             = Истина;
									ВозвратДокОбъект.Контрагент                   = Контрагент;
									ВозвратДокОбъект.ДоговорКонтрагента           = Договор;
									ВозвратДокОбъект.Комментарий                  = Заказ.comment + " /##/ " + Заказ.userComment;
									ВозвратДокОбъект.ВидПоступления               = Перечисления.ВидыПоступленияТоваров.НаСклад;
									ВозвратДокОбъект.НомерВнешнегоЗаказа               = НомерВнешнегоЗаказа;
									
									флЗаполнятьВозврат = Истина;
									
									БылоТоваровВозврат = ВозвратДокОбъект.Товары.Количество();// Проверка загрузки товаров
									
									ВозвратДокОбъект.Товары.Очистить();
									флНужноЗаписыватьВозврат = Истина;
									
								КонецЕсли;
								
							Иначе 
								ВозвратДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
								ВозвратДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа) - 10 * 60;
								ВозвратДокОбъект.Номер                        = стрНомерЗаказа;
								ВозвратДокОбъект.ОтражатьВУправленческомУчете = Истина;
								ВозвратДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
								ВозвратДокОбъект.ОтражатьВНалоговомУчете      = Истина;
								ВозвратДокОбъект.Организация                  = НашаОрганизация;
								ВозвратДокОбъект.СкладОрдер                   = СкладХраниения;
								ВозвратДокОбъект.ТипЦен                       = РозничныйТипЦен;
								ВозвратДокОбъект.ВалютаДокумента              = Рубли;
								ВозвратДокОбъект.КурсВзаиморасчетов           = 1;
								ВозвратДокОбъект.КратностьВзаиморасчетов      = 1;
								ВозвратДокОбъект.УчитыватьНДС                 = Истина;
								ВозвратДокОбъект.СуммаВключаетНДС             = Истина;
								ВозвратДокОбъект.Контрагент                   = Контрагент;
								ВозвратДокОбъект.ДоговорКонтрагента           = Договор;
								ВозвратДокОбъект.Комментарий                  = Заказ.comment + " /##/ " + Заказ.userComment;
								ВозвратДокОбъект.ВидПоступления               = Перечисления.ВидыПоступленияТоваров.НаСклад;
								ВозвратДокОбъект.НомерВнешнегоЗаказа               = НомерВнешнегоЗаказа;
								
								флЗаполнятьВозврат = Истина;
								
								БылоТоваровВозврат = ВозвратДокОбъект.Товары.Количество();// Проверка загрузки товаров
								
								ВозвратДокОбъект.Товары.Очистить();
								флНужноЗаписыватьВозврат = Истина;
								
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					// Возврат товаров
					Если ВозвратДокОбъект <> Неопределено Тогда
						Если флЗаполнятьВозврат Тогда
							ВозвратДокОбъект.Товары.Очистить();	
							Для Каждого СтрТовар Из Товары Цикл
								//Товар, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч
								Товар = Справочники.Номенклатура.НайтиПоКоду(Формат(СтрТовар.skuId_Ч, "ЧН=0; ЧГ="));
								Цена  = СтрТовар.Price_Ч;
								НачКоличество = СтрТовар.fixedCount_Ч;
								Количество    = СтрТовар.cnt_Ч;
								Вес           = СтрТовар.weight_Ч;
								Если Количество < 0 Тогда
									СтрокаДокументаВозврат = ВозвратДокОбъект.Товары.Добавить();
									СтрокаДокументаВозврат.Номенклатура     = Товар;
									СтрокаДокументаВозврат.СтавкаНДС        = Товар.СтавкаНДС;
									СтрокаДокументаВозврат.Количество       = -1*Количество;
									СтрокаДокументаВозврат.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
									СтрокаДокументаВозврат.Цена             = Цена;
									СтрокаДокументаВозврат.Сумма            = -1*Количество * Цена;
									СтрокаДокументаВозврат.Коэффициент      = 1;
									СтрокаДокументаВозврат.Склад            = СкладХраниения;
									СтрокаДокументаВозврат.Качество         = Справочники.Качество.Новый;
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДокументаВозврат, ВозвратДокОбъект);
									СтрокаДокументаВозврат.Себестоимость    = ЦенаПоследнейЗакупки(Товар, ВозвратДокОбъект.Дата);
									СтрокаДокументаВозврат.СкладМагазина    = Справочники.СкладыМагазинов.НайтиПоКоду(СтрТовар.stockId);
								КонецЕсли;
							КонецЦикла;	
							Попытка
								ВозвратДокОбъект.Записать(РежимЗаписиДокумента.Запись); //Запись документа
								ЗаписатьЛог(4, "Записан: "+ Строка(ВозвратДокОбъект) + "Было товаров в ТЧ: " + Строка(БылоТоваровВозврат) + " : После загрузки" + ВозвратДокОбъект.Товары.Количество());
								ВозвратДокОбъект = Неопределено;
							Исключение
								ЗаписатьЛог(4, "Не удалось записать: " + ВозвратДокОбъект + Символы.ПС + ОписаниеОшибки());
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				// Поиск, создание или удаление поступления, реализации, перемещения, возврата поставщику
				Если (СтатусЗаказа = 2) Или (СтатусЗаказа = 3) Или (СтатусЗаказа = 4) Или (СтатусЗаказа = 5) Тогда
					
					флЗаполнятьРеализацию = Истина;
					
					// Поиск, создание или удаление Поступления от поставщика
					Если флРазрешеноОбновлениеЗаказа Тогда
						////Серегин М.В. 10.08.2015 11:53:36 устарело
						//Если ФлАвтоматическоеПоступление Тогда
						флЗаполнятьПоступление = Истина;
						Если НЕ ЗначениеЗаполнено(ПоступлениеДок) Тогда
							ПоступлениеДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
							ПоступлениеДокОбъект.Номер = стрНомерЗаказа;
							Если СтатусЗаказа = 4 Тогда
								ПоступлениеДокОбъект.ПометкаУдаления = Истина;
							КонецЕсли;
						ИначеЕсли СтатусЗаказа = 4 Тогда
							Если ПоступлениеДок.ПоступлениеПодтверждено Тогда
								флЗаполнятьПоступление = Ложь;
							Иначе
								ПоступлениеДокОбъект = ПоступлениеДок.ПолучитьОбъект();
								Если Не ПометкаДокументаНаУдаление(ПоступлениеДокОбъект) Тогда
									ЗаписатьЛог(4, "!!! Ошибка пометки на удаление поступления " + стрНомерЗаказа + " " + ОписаниеОшибки());
									//Лог("!!! Ошибка пометки на удаление поступления " + стрНомерЗаказа + " " + ОписаниеОшибки());
									ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!! Ошибка пометки на удаление поступления " + стрНомерЗаказа + " " + ОписаниеОшибки());
									//флОбновлятьДатуПоследнейЗагрузки = Ложь;
								Иначе
									флЗаполнятьПоступление = Ложь;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Если ПоступлениеДок.ПоступлениеПодтверждено Тогда
								флЗаполнятьПоступление = Ложь;
							Иначе
								// ЧТО ДЕЛАТЬ ЕСЛИ ПОМЕТКА НА УДАЛЕНИЕ У ДОКУМЕНТА ?????
								ПоступлениеДокОбъект = ПоступлениеДок.ПолучитьОбъект();
								ПоступлениеДокОбъект.Товары.Очистить();
								ПоступлениеДокОбъект.ПодарочныеПозиции.Очистить();							
							КонецЕсли;
						КонецЕсли;
						
						Если флЗаполнятьПоступление Тогда
							Если Заказ.createDate_Д + 3*24*60*60 >= ДатаЗакрытияЗаказа Тогда
								ПоступлениеДокОбъект.Дата                         = Заказ.createDate_Д;//ДатаЗакрытияЗаказа - 24*60*60;   //ДатаВечер(ДатаЗакрытияЗаказа) - 5
							Иначе
								ПоступлениеДокОбъект.Дата                         = ДатаЗакрытияЗаказа - 24*60*60;//ДатаЗакрытияЗаказа - 24*60*60;   //ДатаВечер(ДатаЗакрытияЗаказа) - 5
							КонецеСли;	
							ПоступлениеДокОбъект.ВидПоступления               = Перечисления.ВидыПоступленияТоваров.НаСклад;
							ПоступлениеДокОбъект.Организация                  = НашаОрганизация;
							ПоступлениеДокОбъект.БанковскийСчетКонтрагента    = КонтрагентМагазин.ОсновнойБанковскийСчет;
							ПоступлениеДокОбъект.ОтражатьВУправленческомУчете = Истина;
							ПоступлениеДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
							ПоступлениеДокОбъект.ОтражатьВНалоговомУчете      = Истина;
							//ПоступлениеДокОбъект.Комментарий                  = "Автопоступление. " + Заказ.comment;
							ПоступлениеДокОбъект.СкладОрдер                   = СкладХраниения;
							ПоступлениеДокОбъект.Контрагент                   = КонтрагентМагазин;
							ПоступлениеДокОбъект.ДоговорКонтрагента           = ДоговорМагазина;
							//ПоступлениеДокОбъект.Грузополучатель              = Контрагент;
							ПоступлениеДокОбъект.ТипЦен                       = РозничныйТипЦен;
							ПоступлениеДокОбъект.ВалютаДокумента              = Рубли;
							ПоступлениеДокОбъект.УчитыватьНДС                 = Истина;
							ПоступлениеДокОбъект.СуммаВключаетНДС             = Истина;
							ПоступлениеДокОбъект.КурсВзаиморасчетов           = 1;
							ПоступлениеДокОбъект.КратностьВзаиморасчетов      = 1;
							
							// Заполнить ТЧ товары ЗДЕСЬ >>>
							//ДобавитьОбновляемыйДокумент(ПоступлениеДокОбъект, "2=Проведение, 3=Проведение, 5=Проведение", "   поступление товаров", "!!!Ошибка: Не удалось провести Поступление "+стрНомерЗаказа);
							Для Каждого СтрТовар Из Товары Цикл
								
								Количество = СтрТовар.cnt_Ч;
								Если Количество > 0 Тогда 
									// Товар, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч
									Товар = Справочники.Номенклатура.НайтиПоКоду(Формат(СтрТовар.skuId_Ч, "ЧН=0; ЧГ="));
									Цена  = СтрТовар.Price_Ч;
									НачКоличество = СтрТовар.fixedCount_Ч;
									
									Если ЗначениеЗаполнено(Цена) Тогда
										СтрокаПоступления = ПоступлениеДокОбъект.Товары.Добавить();
									Иначе
										СтрокаПоступления = ПоступлениеДокОбъект.ПодарочныеПозиции.Добавить();
									КонецеСЛи;	
									СтрокаПоступления.Номенклатура     = Товар;
									СтрокаПоступления.СтавкаНДС        = Товар.СтавкаНДС;
									СтрокаПоступления.Количество       = Количество;
									СтрокаПоступления.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
									СтрокаПоступления.Цена             = Цена;
									СтрокаПоступления.Сумма            = Количество * Цена;
									СтрокаПоступления.Коэффициент      = 1;
									СтрокаПоступления.Склад            = СкладХраниения;
									СтрокаПоступления.СкладМагазина    = Справочники.СкладыМагазинов.НайтиПоКоду(СтрТовар.stockId);
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПоступления, ПоступлениеДокОбъект);
								КонецЕсли;
								
							КонецЦикла;
							Если ПоступлениеДокОбъект.ПометкаУдаления Тогда
								РежимЗаписиПоступления = РежимЗаписиДокумента.Запись;
							Иначе
								РежимЗаписиПоступления = РежимЗаписиДокумента.Проведение;
							КонецЕсли;
							Попытка
								ПоступлениеДокОбъект.Записать(РежимЗаписиПоступления); // Запись документа
								ЗаписатьЛог(4, "Записан: " + ПоступлениеДокОбъект);
							Исключение
								ЗаписатьЛог(4, "Не удалось записать: " + ПоступлениеДокОбъект + Символы.ПС + ОписаниеОшибки());
							КонецПопытки;
							
							
						КонецЕсли;
						//КонецЕсли;
					КонецЕсли;
					
					// Перемещение
					Если флРазрешеноОбновлениеЗаказа Тогда
						флЗаполнятьПеремещение = Истина;
						Если НЕ ЗначениеЗаполнено(ПеремещениеДок)Тогда
							ПеремещениеДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
							ПеремещениеДокОбъект.Номер = стрНомерЗаказа;
							Если СтатусЗаказа = 4 Тогда
								ПеремещениеДокОбъект.ПометкаУдаления = Истина;
							КонецЕсли;
						ИначеЕсли СтатусЗаказа = 4 Тогда
							ПеремещениеДокОбъект = ПеремещениеДок.ПолучитьОбъект();
							Если Не ПометкаДокументаНаУдаление(ПеремещениеДокОбъект) Тогда
								ЗаписатьЛог(4, "!!! Ошибка пометки на удаление перемещения " + стрНомерЗаказа + " " + ОписаниеОшибки());
								//Лог("!!! Ошибка пометки на удаление перемещения " + стрНомерЗаказа + " " + ОписаниеОшибки());
								ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!! Ошибка пометки на удаление перемещения " + стрНомерЗаказа + " " + ОписаниеОшибки());
								//флОбновлятьДатуПоследнейЗагрузки = Ложь;
							Иначе 
								флЗаполнятьПеремещение = Ложь;	
							КонецЕсли;
						Иначе
							ПеремещениеДокОбъект = ПеремещениеДок.ПолучитьОбъект();
							ПеремещениеДокОбъект.Товары.Очистить();
						КонецЕсли;
						Если флЗаполнятьПеремещение Тогда
							ПеремещениеДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа) - 2;
							ПеремещениеДокОбъект.ВидОперации                  = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
							ПеремещениеДокОбъект.Организация                  = НашаОрганизация;
							ПеремещениеДокОбъект.ОтражатьВУправленческомУчете = Истина;
							ПеремещениеДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
							ПеремещениеДокОбъект.ОтражатьВНалоговомУчете      = Истина;
							ПеремещениеДокОбъект.НДСвСтоимостиТоваров         = Истина;
							ПеремещениеДокОбъект.СкладОтправитель             = СкладХраниения;
							Если Заказ.serviceDelivery_Ч = 3 Тогда
								ПеремещениеДокОбъект.СкладПолучатель          = СкладПитер;
							Иначе
								ПеремещениеДокОбъект.СкладПолучатель          = СкладРеализации;
							КонецЕсли;
							
							// Заполнить ТЧ товары ЗДЕСЬ >>>
							//ДобавитьОбновляемыйДокумент(ПеремещениеДокОбъект, "2=Проведение, 3=Проведение, 5=Проведение", "   перемещение", "!!!Ошибка: Не удалось провести Перемещение "+стрНомерЗаказа);
							
							Для Каждого СтрТовар Из Товары Цикл
								
								Количество = СтрТовар.cnt_Ч;
								Если Количество > 0 Тогда 
									// Товар, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч
									Товар = Справочники.Номенклатура.НайтиПоКоду(Формат(СтрТовар.skuId_Ч, "ЧН=0; ЧГ="));
									Цена  = СтрТовар.Price_Ч;
									НачКоличество = СтрТовар.fixedCount_Ч;
									
									СтрокаПеремещения = ПеремещениеДокОбъект.Товары.Добавить();
									СтрокаПеремещения.Номенклатура     = Товар;
									СтрокаПеремещения.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
									СтрокаПеремещения.Количество       = Количество;
									СтрокаПеремещения.Цена             = Цена;
									СтрокаПеремещения.Коэффициент      = 1;
									СтрокаПеремещения.Качество         = Справочники.Качество.Новый;
								КонецЕсли;
								
							КонецЦикла;
							Попытка
								ПеремещениеДокОбъект.Записать(РежимЗаписиДокумента.Запись); // Запись документа
								ЗаписатьЛог(4, "Записан: " + ПеремещениеДокОбъект);
							Исключение
								ЗаписатьЛог(4, "Не удалось записать: " + ПеремещениеДокОбъект + Символы.ПС + ОписаниеОшибки());
							КонецПопытки;
						КонецЕсли;	
					КонецЕсли;
					НовыйОбъект = Ложь;
					// Реализация
					УспешноЗаписанаРеализация = Ложь;
					Если флРазрешеноОбновлениеЗаказа Тогда
						Если НЕ ЗначениеЗаполнено(РеализацияДок) Тогда
							РеализацияДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
							НовыйОбъект = Истина;
							РеализацияДокОбъект.Номер = стрНомерЗаказа;
							НоваяСтараяРеализация = "   +++ Создана реализация ";
							Если СтатусЗаказа = 4 Тогда
								РеализацияДокОбъект.ПометкаУдаления = Истина;
								НоваяСтараяРеализация = "   +++ Создана удалённая реализация";
							КонецЕсли;
						ИначеЕсли СтатусЗаказа = 4 Тогда
							РеализацияДокОбъект = РеализацияДок.ПолучитьОбъект();
							Если Не ПометкаДокументаНаУдаление(РеализацияДокОбъект) Тогда
								ЗаписатьЛог(4, "!!! Ошибка пометки на удаление реализации " + стрНомерЗаказа + " " + ОписаниеОшибки());
								//Лог("!!! Ошибка пометки на удаление реализации " + стрНомерЗаказа + " " + ОписаниеОшибки());
								ДобавитьОшибочныйЗаказ(НомерЗаказа, "!!! Ошибка пометки на удаление реализации " + стрНомерЗаказа + " " + ОписаниеОшибки());
								//флОбновлятьДатуПоследнейЗагрузки = Ложь;
							Иначе
								флЗаполнятьРеализацию = Ложь;
							КонецЕсли;
							НоваяСтараяРеализация = "   *** Перезаписана реализация";
							
							//Серегин М.В. 24.06.2015 15:36:32 отклоняем заказа для СтатусаСкладскогоУчета, чтобы эти заказы попадали в наборную ведомость для возврата
							//ТекущееСостояниеЗаказа = smv.ПолучитьТекущееСостояниеЗаказа(РеализацияДок);
							//Если ТекущееСостояниеЗаказа.Количество() > 0 Тогда
							//	СтруктураПараметров = Новый Структура;
							//	Для каждого Стр Из ТекущееСостояниеЗаказа Цикл
							//		СтруктураПараметров.Вставить("Заказ",РеализацияДок);
							//		СтруктураПараметров.Вставить("Дата", ТекущаяДата());
							//		СтруктураПараметров.Вставить("РезультатДоставки", Стр.РезультатДоставки);
							//		СтруктураПараметров.Вставить("ПричинаНевыполнения",Стр.ПричинаНеВыполнения);
							//	КонецЦикла;
							//Иначе
							СтруктураПараметров = Новый Структура;
							СтруктураПараметров.Вставить("Заказ",РеализацияДок);
							СтруктураПараметров.Вставить("Дата", ТекущаяДата());
							СтруктураПараметров.Вставить("РезультатДоставки"  , Справочники.новаРезультатМестнойДоставки.НеВыполнена);
							СтруктураПараметров.Вставить("ПричинаНевыполнения",Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда);
							СтруктураПараметров.Вставить("ДатаЗаказа"         , РеализацияДок.Дата);
							//КонецЕсли;
							smv.ОтклонитьЗаказПоСтатусуСкладскогоУчета(СтруктураПараметров);
							//Серегин М.В. 24.06.2015 15:36:34
							
						Иначе
							РеализацияДокОбъект = РеализацияДок.ПолучитьОбъект();
							РеализацияДокОбъект.Товары.Очистить();
							РеализацияДокОбъект.Услуги.Очистить();
							РеализацияДокОбъект.ПодарочныеПозиции.Очистить();
							НоваяСтараяРеализация = "   *** Обновлена реализация";
						КонецЕсли;
						УспешноЗаписанаРеализация = Ложь;					
						Если флЗаполнятьРеализацию Тогда
							ДатаДо = РеализацияДокОбъект.Дата;
							РеализацияДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа);
							//Бухаров
							РеализацияДокОбъект.ТипОплаты					 = ТипОплаты;
							РеализацияДокОбъект.НомерВнешнегоЗаказа			 = НомерВнешнегоЗаказа;
							РеализацияДокОбъект.КатегорияДоставки			 = КатегорияДоставки;
							//Бухаров
							РеализацияДокОбъект.ВидОперации                  = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
							РеализацияДокОбъект.Организация                  = НашаОрганизация;
							РеализацияДокОбъект.БанковскийСчетОрганизации    = НашСчет;
							РеализацияДокОбъект.ОтражатьВУправленческомУчете = Истина;
							РеализацияДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
							РеализацияДокОбъект.ОтражатьВНалоговомУчете      = Истина;
							РеализацияДокОбъект.ВидПередачи                  = Перечисления.ВидыПередачиТоваров.СоСклада;
							РеализацияДокОбъект.Комментарий                  = Заказ.comment;
							РеализацияДокОбъект.АгентскоеВознаграждение                  = АгВ;
							Если Заказ.serviceDelivery_Ч = 3 Тогда
								РеализацияДокОбъект.Склад          			 = СкладПитер;
							Иначе
								РеализацияДокОбъект.Склад          			 = СкладРеализации;
							КонецЕсли;
							РеализацияДокОбъект.ТранспортнаяКомпания = ТранспортнаяКомпания;
							РеализацияДокОбъект.Контрагент                   = Контрагент;
							РеализацияДокОбъект.ДоговорКонтрагента           = Договор;
							РеализацияДокОбъект.Грузополучатель              = Контрагент;
							РеализацияДокОбъект.ТипЦен                       = РозничныйТипЦен;
							РеализацияДокОбъект.ВалютаДокумента              = Рубли;
							РеализацияДокОбъект.УчитыватьНДС                 = Истина;
							РеализацияДокОбъект.СуммаВключаетНДС             = Истина;
							РеализацияДокОбъект.КурсВзаиморасчетов           = 1;
							РеализацияДокОбъект.КратностьВзаиморасчетов      = 1;
							РеализацияДокОбъект.АдресДоставки                = Заказ.Addr;
							РеализацияДокОбъект.СтатусИнтернетМагазина       = СтатусЗаказа;
							РеализацияДокОбъект.ВладелецТовара               = КонтрагентМагазин;
							РеализацияДокОбъект.УслугиСД                     = Заказ.serviceDC_Ч;
							РеализацияДокОбъект.КомментарийСД                = Заказ.ReasonRrefusal;
							РеализацияДокОбъект.ТарифнаяСетка = ТипТарифа;
							РеализацияДокОбъект.РасчетныйБрейк = РасчетныйБрейк;
							РеализацияДокОбъект.ТарифнаяСеткаПартнера = НайТариф;
							РеализацияДокОбъект.Телефон = Заказ.Telephone;
							РеализацияДокОбъект.ПредоплатаПоКредиту = Заказ.SumByCard_Ч;
							РеализацияДокОбъект.УслугиСДЧистые = ЧистыеСД;
							РеализацияДокОбъект.МетодСозданияЗаказа          = МетодСозданияЗаказа;
							РеализацияДокОбъект.ДополнениеКАдресуДоставки = Заказ.addrComment;
							
							Если КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_234 ")    //+++ Костя 091115
								ИЛИ КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_391 ") Тогда 
								РеализацияДокОбъект.ЭтоДоговор = Истина;                              
							Иначе                                                                       
								РеализацияДокОбъект.ЭтоДоговор = Ложь;                                 
							КонецЕсли;                                                                   //+++ Костя 091115
							
							//Серегин М.В. 22.07.2015 18:22:44  
							Если КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_248") Или КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_601") ИЛИ КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_752") Тогда
								РеализацияДокОбъект.ИнтернетМагазинЯндекса = Справочники.Контрагенты.НайтиПоКоду("248_"+?(Заказ.senderId=NULL,0,Заказ.senderId));    
							КонецЕсли;
							//Серегин М.В. 22.07.2015 18:22:46 
							
							РеализацияДокОбъект.ОбщийВес = ОбщийВесЗаказа;
							//ВпихнутьДоставку(РеализацияДокОбъект, СтоимостьДоставки);
							Если СтоимостьДоставки > 0 Тогда
								стрУслуги = РеализацияДокОбъект.Услуги.Добавить();
								стрУслуги.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("У1");
								стрУслуги.Содержание   = "Услуги по доставке товара";
								стрУслуги.Цена         = СтоимостьДоставки;
								стрУслуги.Количество   = 1;
								стрУслуги.СтавкаНДС    = Перечисления.СтавкиНДС.НДС18;
								стрУслуги.Сумма        = СтоимостьДоставки;
								стрУслуги.СуммаНДС     = СтоимостьДоставки * 18 / 118;
							КонецЕсли;
							
							//ДобавитьОбновляемыйДокумент(РеализацияДокОбъект, "2=Запись, 3=Проведение, 5=Запись", НоваяСтараяРеализация, "!!!Ошибка: Не удалось провести Отгрузку "+стрНомерЗаказа);
							// Заполнить ТЧ товары ЗДЕСЬ >>>
							Для Каждого СтрТовар Из Товары Цикл
								
								// Товар, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч
								Товар = Справочники.Номенклатура.НайтиПоКоду(Формат(СтрТовар.skuId_Ч, "ЧН=0; ЧГ="));
								Цена  = СтрТовар.Price_Ч;
								НачКоличество = СтрТовар.fixedCount_Ч;
								Количество    = СтрТовар.cnt_Ч;
								Вес           = СтрТовар.weight_Ч;
								Если Количество > 0 Тогда
									БезВеса = Ложь;
									Если ЗначениеЗаполнено(Цена) Тогда
										СтрокаДокументаРеализация = РеализацияДокОбъект.Товары.Добавить();
									Иначе	
										СтрокаДокументаРеализация = РеализацияДокОбъект.ПодарочныеПозиции.Добавить();
									КонецеСли;	
									СтрокаДокументаРеализация.Номенклатура     = Товар;
									СтрокаДокументаРеализация.СтавкаНДС        = Товар.СтавкаНДС;
									СтрокаДокументаРеализация.Количество       = Количество;
									СтрокаДокументаРеализация.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
									СтрокаДокументаРеализация.Цена             = Цена;
									СтрокаДокументаРеализация.Сумма            = Количество * Цена;
									СтрокаДокументаРеализация.Коэффициент      = 1;
									СтрокаДокументаРеализация.Склад            = СкладРеализации; // комиссия или доставка
									СтрокаДокументаРеализация.Качество         = Справочники.Качество.Новый;
									СтрокаДокументаРеализация.Вес              = СтрТовар.weight_Ч;
									// Склад магазина
									СтрокаДокументаРеализация.СкладМагазина    = Справочники.СкладыМагазинов.НайтиПоКоду(СтрТовар.stockId);
									/////////////////
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДокументаРеализация, РеализацияДокОбъект);
								КонецЕсли;					
							КонецЦикла;
							
							УспешноЗаписанаРеализация = Ложь;
							
							Попытка
								РеализацияДокОбъект.Записать(РежимЗаписиДокумента.Запись); //Запись документа
								УспешноЗаписанаРеализация = Истина;
								//+++ Костя 25.08.2015
								Если Заказ.assessedCost_Ч > 0 ИЛИ Заказ.total_Ч > 0 Тогда
									Парам = Новый Структура;
									Парам.Вставить("Заказ", РеализацияДокОбъект.Ссылка);
									Парам.Вставить("ОценочнаяСтоимость", Заказ.assessedCost_Ч);
									Парам.Вставить("КОплатеКлиентом"   , Заказ.total_Ч);
									Наб = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
									Наб.Отбор.Заказ.Установить(Парам.Заказ);
									Нов = Наб.Добавить();
									ЗаполнитьЗначенияСвойств(Нов, Парам);
									Наб.Записать();
								КонецЕсли;
								// Запись склада магазина реквизит- РС
								Если Заказ.stockId_Ч > 0 Тогда
									Парам = Новый Структура;
									Парам.Вставить("Заказ", РеализацияДокОбъект.Ссылка);
									Парам.Вставить("СкладМагазина"   , Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч));
									Наб = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
									Наб.Отбор.Заказ.Установить(Парам.Заказ);
									Нов = Наб.Добавить();
									ЗаполнитьЗначенияСвойств(Нов, Парам);
									Наб.Записать();
								Иначе
									ПараметрыОтбора = Новый Структура;
									ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
									НайденныеСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
									ПроставитьДефолтныйСкладЗаказу = Ложь;
									Для Каждого СтрТовар Из НайденныеСтроки Цикл
										Если НЕ СтрТовар.stockId = NULL Тогда
											Если СтрТовар.stockId > 0 Тогда
												ПроставитьДефолтныйСкладЗаказу = Истина;
												Прервать;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									Если ПроставитьДефолтныйСкладЗаказу Тогда
										Запрос = Новый Запрос(
										"ВЫБРАТЬ
										|	СкладыМагазиновПоУмолчанию.СкладМагазина
										|ИЗ
										|	РегистрСведений.СкладыМагазиновПоУмолчанию КАК СкладыМагазиновПоУмолчанию
										|ГДЕ
										|	СкладыМагазиновПоУмолчанию.Магазин = &Магазин");
										Запрос.УстановитьПараметр("Магазин", КонтрагентМагазин);
										Результат = Запрос.Выполнить().Выбрать();
										Если Результат.Следующий() Тогда
											СкладМагазинаЗаказа = Результат.СкладМагазина;
											Парам = Новый Структура;
											Парам.Вставить("Заказ", РеализацияДокОбъект.Ссылка);
											Парам.Вставить("СкладМагазина"   , СкладМагазинаЗаказа);
											Наб = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
											Наб.Отбор.Заказ.Установить(Парам.Заказ);
											Нов = Наб.Добавить();
											ЗаполнитьЗначенияСвойств(Нов, Парам);
											Наб.Записать();
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								//// Запись Причины отклонения заказа в системе
								Если Заказ.ReasonRefusalID_Ч > 0 Тогда
									Если Заказ.ReasonRefusalID_Ч = 1 Тогда 
										ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненМагазином;
									ИначеЕсли Заказ.ReasonRefusalID_Ч = 2 Тогда 
										ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненПоПисьмуМагазина;
									ИначеЕсли Заказ.ReasonRefusalID_Ч = 3 Тогда 
										ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненЗаСрокомДавности;
									ИначеЕсли Заказ.ReasonRefusalID_Ч = 4 Тогда 
										ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.Дубль;																
									КонецЕсли;
									Парам = Новый Структура;
									Парам.Вставить("Заказ", РеализацияДокОбъект.Ссылка);
									Парам.Вставить("ПричинаОтклоненияЗаказа", ПричинаОтклоненияЗаказа);
									Наб = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
									Наб.Отбор.Заказ.Установить(Парам.Заказ);
									Нов = Наб.Добавить();
									ЗаполнитьЗначенияСвойств(Нов, Парам);
									Наб.Записать();
								КонецЕсли;
								////////////////////////////////////////////////
								ЗаписатьЛог(4, "Записан: " + РеализацияДокОбъект);
							Исключение
								ЗаписатьЛог(4, "Не удалось записать: " + РеализацияДокОбъект + Символы.ПС + ОписаниеОшибки());
								УспешноЗаписанаРеализация = Ложь;
							КонецПопытки;
						КонецЕсли;
						
						Если УспешноЗаписанаРеализация Тогда
							НомерДока = РеализацияДокОбъект.Номер;
							МассивЗагруженныхНомеровЗаказов.Добавить(СокрЛП(НомерДока));
							
							ТоварыВДоке = РеализацияДокОбъект.Товары.Количество();
							Если ТоварыИзАдминкиКоличество < ТоварыВДоке Тогда
								ЗаписатьЛог(8, "Реализация: " + НомерДока + " " + Символы.ПС + "Загружено " + Строка(ТоварыВДоке) + " Из " + Строка(ТоварыИзАдминкиКоличество));
							КонецЕсли;					
							
							//
							Если ДатаДо <> Заказ.deliveryDate_Д Тогда
								ОбновитьДатуЗаказа(Заказ, РеализацияДокОбъект.Ссылка);//, обМестнаяДоставка);
							КонецеСли;	
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; // Для каждого Заказ Из *****
		
		// обновление загруженных номеров
		Если МассивЗагруженныхНомеровЗаказов.Количество() <> 0 Тогда
			ТекстЗ = "declare @t [dbo].Torder ";
			Для СчМ = 0 По МассивЗагруженныхНомеровЗаказов.Количество() - 1 Цикл
				ТекстЗ = ТекстЗ + "
				|insert into @t values (" + МассивЗагруженныхНомеровЗаказов.Получить(СчМ) + ")";
			КонецЦикла;	
			
			ТекстЗ = ТекстЗ + " EXEC dbo.import_setOrdersLoadedIn1c @t";
			
			Евген.ЗапросКИнтернетМагазину(ТекстЗ, Подключение);
		КонецеСли;	
		
		///////////
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаДанныхЗаказов");
		Запись.Прочитать();
		ТекДата = '00010101';
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
			Попытка
				ТекДата = Вычислить("'" + НоваяЗапись.Значение + "'");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ТекДата < ДатаЗапроса Тогда
			НоваяЗапись.Ключ = "ПоследняяЗагрузкаДанныхЗаказов";
			НоваяЗапись.Значение = ДатаВСтроку(ДатаЗапроса);
			ДатаКонцаЗагрузкиЗаказов = ТекущаяДата();
			Попытка
				Запись.Записать();
				ЗаписатьЛог(5,"Установлена граница новых заказов " + ДатаЗапроса);
				ЗаписатьЛог(7,СИмволы.ПС + "::: Загружено заказов: " + Строка(СписокЗаказов.Количество())+
				Символы.ПС + "Начало Загрузки Заказов: "+ ДатаНачалаЗагрузкиЗаказов+
				Символы.ПС + "Конец Загрузки Заказов: "+ ДатаКонцаЗагрузкиЗаказов+
				Символы.ПС + "===================================================");
				//Лог("Установлена граница новых заказов " + ДатаЗапроса);
			Исключение
				ЗаписатьЛог(5, "Ошибка обновления границы новых заказов. " + ОписаниеОшибки());
				//Лог("Ошибка обновления границы новых заказов. " + ОписаниеОшибки());
			КонецПопытки;
		Иначе
			ДатаКонцаЗагрузкиЗаказов = ТекущаяДата();			
			ЗаписатьЛог(5,"Установлена граница новых заказов " + ДатаЗапроса);
			ЗаписатьЛог(7,СИмволы.ПС + "::: Загружено заказов: " + Строка(СписокЗаказов.Количество())+
			Символы.ПС + "Начало Загрузки Заказов: "+ ДатаНачалаЗагрузкиЗаказов+
			Символы.ПС + "Конец Загрузки Заказов: "+ ДатаКонцаЗагрузкиЗаказов+
			Символы.ПС + "===================================================");
			//Лог("Установлена граница новых заказов " + ТекДата);
		КонецЕсли;
		
	КонецЕсли;// КонецЕсли -> список пуст
	
КонецПроцедуры
//--- Костя

Функция ЧислоКСтрокеБезПробелов(Чис) Экспорт
	Возврат Формат(Чис, "ЧН=0; ЧГ=");
КонецФункции

Функция ОставитьТолькоЦифры(Стр)
	Результат = "";
	поз = 0;
	сим = "";
	Пока поз < СтрДлина(Стр) Цикл 
		поз = поз + 1;
		сим = сред(Стр, поз, 1);
		Если Найти("1234567890", сим) > 0 Тогда
			Результат = Результат + сим;
		КонецЕсли;
	КонецЦикла;	  
	Возврат  Результат;
КонецФункции

Функция ЛидирующийНоль(зн)
	Если Зн < 10 Тогда
		Возврат "0"+Зн;
	Иначе
		Возврат Зн;
	КонецЕсли;	
КонецФункции

Функция ДатаИз1С(Д, ЭтоКонец) Экспорт
	Возврат Формат(Год(Д),"ЧГ=0") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + " " +
	ЛидирующийНоль(Час(Д)) + ":" + ЛидирующийНоль(Минута(Д)) + ":" + ЛидирующийНоль(Секунда(Д)) +
	?(ЭтоКонец, ".998", "");
КонецФункции // ДатаИз1С()

Функция СоздатьТаблицу(RS, СписокКолонок) Экспорт
	
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
			КонецЕсли;
		КонецЦикла;
		Rs.MoveNext()
	КонецЦикла;
	
	Возврат Таб;
КонецФункции

// Заказы
Функция НайтиСпецТочку(Контрагент)
	ЗапросТочек = Новый Запрос;
	ЗапросТочек.Текст =
	"ВЫБРАТЬ
	|	новаТочкиДоставки.Ссылка
	|ИЗ
	|	Справочник.новаТочкиДоставки КАК новаТочкиДоставки
	|ГДЕ
	|	новаТочкиДоставки.ВладелецТочки = &ВладелецТочки
	|	И новаТочкиДоставки.ПометкаУдаления = ЛОЖЬ";
	ЗапросТочек.УстановитьПараметр("ВладелецТочки", Контрагент);
	ВыборкаТочек = ЗапросТочек.Выполнить().Выбрать();
	Если ВыборкаТочек.Следующий() Тогда
		Возврат ВыборкаТочек.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Процедура ДобавитьОшибочныйЗаказ(СведенияОЗаказе, Ошибка)
	Наб = РегистрыСведений.НезагруженныеЗаказы.СоздатьНаборЗаписей();
	
	//Серегин М.В. 13.07.2015 17:40:57 Дата отбора
	ДатаОтбора  = ТекущаяДата(); 
	Наб.Отбор.Период.Установить(ДатаОтбора);
	Наб.Отбор.НомерЗаказа.Установить(Формат(СведенияОЗаказе, "ЧГ="));
	
	Нов = Наб.Добавить();
	Нов.Период = ДатаОтбора;
	Нов.НомерЗаказа = Формат(СведенияОЗаказе, "ЧГ=");
	Нов.Ошибка = Ошибка;
	
	Наб.Записать();
	
	ВозниклаОшибка = Истина;
КонецПроцедуры	

Функция ПодготовитьДоговор(Контрагент)
	
	Если Контрагент.ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		Попытка
			Договор = ЗаполнитьДоговор(Контрагент, "Основной договор с покупателем");
			КонтрагентОбъект = Контрагент.ПолучитьОбъект();
			КонтрагентОбъект.ОсновнойДоговорКонтрагента = Договор.Ссылка;
			КонтрагентОбъект.Записать();
			Возврат Договор.Ссылка;
		Исключение
			НормальныйХодВыполнения = Ложь;
			ЗаписатьЛог(3, "!!!Ошибка записи основного договора для "+Контрагент+", Код: "+Контрагент.Код+Символы.ПС+ОписаниеОшибки());
			//Лог("!!!Ошибка записи основного договора для "+Контрагент+", Код: "+Контрагент.Код+Символы.ПС+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Если НайтиДоговорСПокупателем(Контрагент) = Неопределено Тогда
			Попытка
				Договор = ЗаполнитьДоговор(Контрагент, "Договор с покупателем");
				Возврат Договор.Ссылка;
			Исключение
				НормальныйХодВыполнения = Ложь;
				ЗаписатьЛог(3, "!!!Ошибка записи договора для "+Контрагент+", Код: "+Контрагент.Код+Символы.ПС+ОписаниеОшибки());
				//Лог("!!!Ошибка записи договора для "+Контрагент+", Код: "+Контрагент.Код+Символы.ПС+ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Контрагент.ОсновнойДоговорКонтрагента;
	
КонецФункции

Функция ПреобразоватьКодМагазина(Код) Экспорт
	Возврат "Shop_" + Формат(Код, "ЧН=0; ЧГ=");
КонецФункции

Функция ПолучитьДоговорКомитента(Комитент, флКомиссионнаяТорговля)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Наименование = &Наименование
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.ПометкаУдаления УБЫВ";
	Запрос.УстановитьПараметр("Владелец", Комитент);
	Запрос.УстановитьПараметр("Код", "000000001");
	Запрос.УстановитьПараметр("Наименование", ?(флКомиссионнаяТорговля, "Комиссионная торговля", "Договор по доставке"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ДатаВСтроку(Д)
	Возврат Формат(Год(Д), "ЧГ=") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + ЛидирующийНоль(Час(Д)) + ЛидирующийНоль(Минута(Д)) + ЛидирующийНоль(Секунда(Д));
КонецФункции

Функция СтрокаКВремя(стр);
	С = Лев(стр, 1);
	Если Не ЭтоЧисло(С) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Часы = Число(С);
	Минуты = 0;
	
	поз = 2;
	С = Сред(стр, 2, 1);
	Если ЭтоЧисло(С) Тогда
		Часы = Часы * 10 + Число(С);
		поз = поз + 1;
	КонецЕсли;
	
	Если Не ЭтоЧисло(Сред(стр, поз, 1)) Тогда
		поз = поз + 1;
		С = Сред(стр, поз, 1);
		Если ЭтоЧисло(С) Тогда
			//Есть минуты
			Минуты = Число(С);
			поз = поз + 1;
			С = Сред(стр, поз, 1);
			Если ЭтоЧисло(С) Тогда
				Минуты = Минуты * 10 + Число(С);
				Если Минуты < 60 Тогда
					Часы = Часы + Минуты / 60;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Часы < 24 Тогда
		Возврат Часы;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ЭтоЧисло(сим)
	Возврат ЗначениеЗаполнено(сим) И Найти("0123456789", сим) > 0;
КонецФункции

Функция ДатаВечер(Дата1С)Экспорт
	Результат = Дата(Год(Дата1С), Месяц(Дата1С), День(Дата1С), 20, 0, 0);
	Возврат Результат;
КонецФункции

Функция ПометкаДокументаНаУдаление(ДокОбъект)
	Если Не ДокОбъект.ПометкаУдаления Тогда
		Попытка
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			ЗаписатьЛог(4, "   --- Помечен на удаление " + ДокОбъект);
			//Лог("   --- Помечен на удаление " + ДокОбъект);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПометкаДокументаНаУдаление()

Функция НайтиДоговорСПокупателем(Контрагент)
	Если Контрагент.ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		Возврат Неопределено;
	ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Возврат Контрагент.ОсновнойДоговорКонтрагента;
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Договоры.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА ДоговорыКонтрагентов.Наименование = ""Договор с покупателем""
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПредпочтениеДоговора
		|	ИЗ
		|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|	ГДЕ
		|		ДоговорыКонтрагентов.Владелец = &Владелец
		|		И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора) КАК Договоры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договоры.ПредпочтениеДоговора УБЫВ";
		Запрос.УстановитьПараметр("Владелец", Контрагент.Ссылка);
		Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 0 Тогда
			Возврат Результат[0].Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции // НайтиДоговорСПокупателем()

Функция ЗаполнитьДоговор(Контрагент, НаименованиеДоговора)
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	НовыйДоговор.ВалютаВзаиморасчетов  = Справочники.Валюты.НайтиПоНаименованию("руб.");
	НовыйДоговор.Организация           = Справочники.Организации.НайтиПоКоду("000000001"); 
	НовыйДоговор.ВидДоговора           = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НовыйДоговор.Наименование          = НаименованиеДоговора;
	НовыйДоговор.Владелец              = Контрагент.Ссылка;
	НовыйДоговор.Записать();
	
	ЗаписатьЛог(3, "   +++ Записан новый договор для " + Контрагент);
	//Лог("   +++ Записан новый договор для " + Контрагент);
	Возврат НовыйДоговор;
КонецФункции

Функция ЦенаПоследнейЗакупки(ССылкаНаТовар, Дата)Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.Период < &Период
	|	И ПартииТоваровНаСкладах.Количество > 0
	|	И ПартииТоваровНаСкладах.Стоимость > 0
	|   И ПартииТоваровНаСкладах.Номенклатура=&Номенклатура
	|УПОРЯДОЧИТЬ ПО
	|	ПартииТоваровНаСкладах.Период УБЫВ";	
	Запрос.УстановитьПараметр("Номенклатура", ССылкаНаТовар);
	Запрос.УстановитьПараметр("Период", Дата);
	Тз = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Для каждого Стр Из ТЗ Цикл
			Возврат (Стр.Стоимость/Стр.Количество);
		КонецЦикла;
	КонецЕсли; 
КонецФункции // ЦенаПоследнейЗакупки()

Функция ПодготовитьРодителяНоменклатуры(ПараметрыЗаказа, КодМагазина)
	
	Если КодМагазина = 0 Тогда
		Возврат Справочники.Номенклатура.НайтиПоКоду("00000000002");  //Товары
	КонецЕсли;
	КодСайтаПапки = ПреобразоватьКодМагазина(КодМагазина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ИСТИНА
	|	И Номенклатура.Код = &Код";
	Запрос.УстановитьПараметр("Код", КодСайтаПапки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоваяПапка = Справочники.Номенклатура.СоздатьГруппу();
	НоваяПапка.Наименование     = ПараметрыЗаказа.shopName;
	НоваяПапка.Родитель         = Справочники.Номенклатура.НайтиПоКоду("00000000002");  //Товары
	НоваяПапка.ВидНоменклатуры  = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001");
	НоваяПапка.Код = КодСайтаПапки;
	
	Попытка
		НоваяПапка.Записать();
		ЗаписатьЛог(2, "+++ Записана новая папка товаров: " + ПараметрыЗаказа.shopName);
		//Лог("+++ Записана новая папка товаров: " + ПараметрыЗаказа.shopName);
	Исключение
		ЗаписатьЛог(2, "!!!Ошибка записи новой папки товаров " + ПараметрыЗаказа.shopName + " (код магазина: " + КодМагазина + ")" + Символы.ПС + ОписаниеОшибки());
		//Лог("!!!Ошибка записи новой папки товаров " + ПараметрыЗаказа.shopName + " (код магазина: " + КодМагазина + ")" + Символы.ПС + ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НоваяПапка.Ссылка;
	
КонецФункции // ПолучитьРодителяНоменклатуры()

Процедура ОбновитьДатуЗаказа(ЗаказИ, Заказ)
	НовД = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
	НовД.Дата = ТекущаяДата();
	НовД.ДатаДоставки = ЗаказИ.deliveryDate_Д;
	//НовД.Доставка = Заказ.Ссылка;
	НовД.Заказ = Заказ.Ссылка;
	НовД.Записать(РежимЗаписиДокумента.Запись);
	НовД.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИОбновлениеМагазинов

Процедура ЗагрузкаИОбновлениеМагазинов() Экспорт
	
	Подключение = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	ДатаИзмененияМагазина = ТекущаяДата();
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяДатаЗагрузкиМагазинов");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаИзмененияМагазина);
	
	Если ЗначениеЗаполнено(ДатаИзмененияМагазина) Тогда
		////// 1) Запрос к sql на получение данных для заполнения инфо по Магазинам
		////// 2) Создание, перезапись магазинов.
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|S.shopId, S.shopName, S.shopTitle, S.shopPhone, S.internetShopID, 
		|ISNULL(S.textReceipt,'') AS textReceipt, 
		|ISNULL(S.receiverID,'')  AS receiverID,
		|ISNULL(S.parentId,'')    AS parentId, SH.internetShopID,
		|ISNULL(SH.name,'')       AS InternetName,
		|ISNULL(def.WarhouseProcessingDisabled, 0)        AS WarhouseProcessingDisabled
		|FROM 
		|settings S (NOLOCK)
		|INNER JOIN
		|_InternetShops SH (NOLOCK) ON SH.internetShopID = S.internetShopID
		| left join [tb_shopDefaultValue] def on S.shopId = def.settingId
		|WHERE
		|	S.modifyDate > '"+ДатаИз1С(ДатаИзмененияМагазина, Ложь)+"'
		|",Подключение);
		//Асеев 03.05.2024 (Задача № 4783)>>>
		//ДанныеМагазинов = СоздатьТаблицу(RS, "shopId, shopName, shopTitle, shopPhone, textReceipt, receiverID, ParentID_Ч, internetShopID, InternetName, WarhouseProcessingDisabled_Ч");//СписокКолонокДанныхКОнтрагентов);
		ДанныеМагазинов = СоздатьТаблицу(RS, "shopId, shopName, shopTitle, shopPhone, textReceipt, receiverID, ParentID_Ч, internetShopID_Ч, InternetName, WarhouseProcessingDisabled_Ч");//СписокКолонокДанныхКОнтрагентов);
		//Асеев 03.05.2024 (Задача № 4783)<<<
		RS=0;			
		
		
		Если ДанныеМагазинов.Количество() > 0 Тогда
			Комитенты = Справочники.Контрагенты.НайтиПоКоду("000000004"); //Комитенты
			ИМ_TopDelivery = Справочники.Контрагенты.НайтиПоКоду("Shop_222");
			ВалютаРуб = Справочники.Валюты.НайтиПоНаименованию("руб.");
			ОснОрг = Справочники.Организации.НайтиПоКоду("000000001");
			ВидДоговораКомиссии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
			ВидДоговораСПокупателем = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			
			Для Каждого Магазин Из ДанныеМагазинов Цикл
				Успешно = Ложь;
				
				//Асеев 03.05.2024 (Задача № 4783)>>>
				//КодМагазина = ПреобразоватьКодМагазина(Магазин.internetShopID);//shopId);
				КодМагазина = ПреобразоватьКодМагазина(Магазин.internetShopID_Ч);//shopId);
				//Асеев 03.05.2024 (Задача № 4783)<<<
				НовыйМагазин = Справочники.Контрагенты.НайтиПоКоду(КодМагазина);
				//флНовыйМагазин = НовыйКА = Неопределено;
				Если ЗначениеЗаполнено(НовыйМагазин) Тогда
					//Если флНовыйКонтрагент Тогда
					НовыйМагазин = НовыйМагазин.ПолучитьОбъект();
					флНовыйМагазин = Ложь;
				Иначе
					НовыйМагазин = Справочники.Контрагенты.СоздатьЭлемент();
					флНовыйМагазин = Истина;
				КонецЕсли;
				//Если флНовыйМагазин Тогда					
				НовыйМагазин.Код                       = КодМагазина;
				НовыйМагазин.Наименование              = Магазин.InternetName;
				НовыйМагазин.НаименованиеПолное        = Магазин.InternetName;
				НовыйМагазин.ЗаголовокИнтернетМагазина = Магазин.shopTitle;
				НовыйМагазин.ТелефонИнтернетМагазина   = Магазин.shopPhone;
				НовыйМагазин.РеквизитыНаБЗ             = Магазин.textReceipt;       //shopJurFace
				НовыйМагазин.Родитель                  = Комитенты;
				НовыйМагазин.Покупатель                = Истина;
				НовыйМагазин.Поставщик                 = Истина;
				НовыйМагазин.ЮрФизЛицо                 = Перечисления.ЮрФизЛицо.ЮрЛицо;
				НовыйМагазин.Автопоступление           = Истина;
				НовыйМагазин.ПолучательID              = Магазин.receiverID;
				//
				Если ЗначениеЗаполнено(Магазин.receiverID) Тогда
					НайТД = Справочники.Контрагенты.НайтиПоНаименованию("ИМ TopDelivery", Истина);
					Если НайТД.Пустая() Тогда
						НовГр = Справочники.Контрагенты.СоздатьГруппу();
						НовГр.Родитель = НовыйМагазин.Родитель;
						НовГр.Наименование = "ИМ TopDelivery";
						НовГр.Записать();
						НайТД = НовГр.Ссылка;
					КонецеСли;	
					НовыйМагазин.Родитель = НайТД.Ссылка;
				КонецеСли;
				//////////////////////
				//           "parentId"
				Если Магазин.ParentID_Ч > 0 Тогда
					RS = Евген.ЗапросКИнтернетМагазину("
					|SELECT
					|S.shopId, S.shopName, S.internetShopID
					|FROM 
					|settings S (NOLOCK)
					|WHERE
					|S.ShopID ='"+Магазин.ParentID_Ч+"'", Подключение);
					//Асеев 03.05.2024 (Задача № 4783)>>>
					//КодМагазинаТаблица = СоздатьТаблицу(RS, "shopId, shopName, internetShopID");//СписокКолонокДанныхКОнтрагентов);
					КодМагазинаТаблица = СоздатьТаблицу(RS, "shopId, shopName, internetShopID_Ч");//СписокКолонокДанныхКОнтрагентов);
					//Асеев 03.05.2024 (Задача № 4783)<<<
					RS=0;
					Если КодМагазинаТаблица.Количество() > 0 Тогда
						//Асеев 03.05.2024 (Задача № 4783)>>>
						//КодМагазинаРод = ПреобразоватьКодМагазина(КодМагазинаТаблица[0].internetShopID);
						КодМагазинаРод = ПреобразоватьКодМагазина(КодМагазинаТаблица[0].internetShopID_Ч);
						//Асеев 03.05.2024 (Задача № 4783)<<<
						Зап = Новый Запрос;
						Зап.Текст = "ВЫБРАТЬ
						|	Контрагенты.Ссылка КАК Магазин
						|ИЗ
						|	Справочник.Контрагенты КАК Контрагенты
						|ГДЕ
						|	Контрагенты.ОсновнойМагазин.Код = &Код";
						Зап.УстановитьПараметр("Код", КодМагазинаРод);	
						Рез = Зап.Выполнить().Выгрузить();
						Если Рез.Количество() <> 0 Тогда
							НовыйМагазин.Родитель = Рез[0].Магазин;
						//+++ БАО 03.08.2017 №1470
						Иначе
						
						    ОсновнойМагазин = Справочники.Контрагенты.НайтиПоКоду(КодМагазинаРод);
		
							Если Не ЗначениеЗаполнено(ОсновнойМагазин) Тогда 
								
								RS = Евген.ЗапросКИнтернетМагазину(" 
								|SELECT
								|S.shopId, S.shopName, S.internetShopID
								|FROM 
								|settings S (NOLOCK)
								|WHERE
								|S.internetShopID ='" + Магазин.ParentID_Ч + "'", Подключение);
								Если RS <> Неопределено И RS <> 0  Тогда
									//Асеев 15.04.2022 (Задача № 4783)>>>
									//КодМагазинаТаблицаОсновнойМагазин = СоздатьТаблицу(RS, "shopId, shopName, internetShopID");//СписокКолонокДанныхКОнтрагентов);
									КодМагазинаТаблицаОсновнойМагазин = СоздатьТаблицу(RS, "shopId, shopName, internetShopID_Ч");//СписокКолонокДанныхКОнтрагентов);
									//Асеев 15.04.2022 (Задача № 4783)<<<
									RS=0;
									Если КодМагазинаТаблицаОсновнойМагазин.Количество() > 0 Тогда
										
										ОсновнойМагазин = Справочники.Контрагенты.СоздатьЭлемент();
										ОсновнойМагазин.Наименование = КодМагазинаТаблицаОсновнойМагазин[0].shopName;
										ОсновнойМагазин.Родитель = Справочники.Контрагенты.НайтиПоКоду("000000004"); //Комитенты
										//Асеев 15.04.2022 (Задача № 4783)>>>
										//ОсновнойМагазин.Код =  "Shop_" + КодМагазинаТаблицаОсновнойМагазин[0].internetShopID;
										ОсновнойМагазин.Код =  "Shop_" + Формат(КодМагазинаТаблицаОсновнойМагазин[0].internetShopID_Ч, "ЧГ=");
										//Асеев 15.04.2022 (Задача № 4783)<<<
										
										Попытка
											ОсновнойМагазин.Записать();
											ОсновнойМагазин = ОсновнойМагазин.Ссылка;
											
											ЗаписатьЛог(9, "+++ Записан основной магазин  "+ КодМагазинаТаблица[0].shopName+" для shopId: "+ Магазин.shopId); 
										Исключение
											ЗаписатьЛог(9, "!!!Ошибка записи основной магазина: "+ КодМагазинаТаблица[0].shopName +" для shopId: "+ Магазин.shopId + Символы.ПС + ОписаниеОшибки());
										КонецПопытки;
										
									КонецЕсли;		
								КонецЕсли;
								
							КонецЕсли;	
								
							
							ГруппаРодитель = Справочники.Контрагенты.СоздатьГруппу();
							ГруппаРодитель.Наименование = ОсновнойМагазин.Наименование;
							ГруппаРодитель.ОсновнойМагазин = ОсновнойМагазин.Ссылка;
							ГруппаРодитель.Родитель = Комитенты;
							
							Попытка
								ГруппаРодитель.Записать();
								НовыйМагазин.Родитель = ГруппаРодитель.Ссылка;
								ЗаписатьЛог(9, ?(флНовыйМагазин, "+++ Записан новый", "*** Перезаписан")+" магазин группа "+ГруппаРодитель+" для shopId: "+ Магазин.shopId); 
							Исключение
								ЗаписатьЛог(9, "!!!Ошибка записи магазина группы: "+КодМагазинаТаблица[0].shopName +" для shopId: "+ Магазин.shopId + Символы.ПС + ОписаниеОшибки());
							КонецПопытки;
							
							//Заполним параметры ГруппаРодитель
							ЗапросПК = Новый Запрос("ВЫБРАТЬ
							                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
							                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
							                        |	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
							                        |	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
							                        |	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
							                        |	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
							                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
							                        |	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
							                        |	ПараметрыКонтрагентовСрезПоследних.СкладскаяОбработкаОтсутствует КАК СкладскаяОбработкаОтсутствует,
							                        |	ПараметрыКонтрагентовСрезПоследних.ВесЗапросаДанныхОПодъемеОтВодителя КАК ВесЗапросаДанныхОПодъемеОтВодителя,
							                        |	ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей КАК НаименованиеЛатиницей,
							                        |	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
							                        |	ПараметрыКонтрагентовСрезПоследних.ТипОперативнойПриемки КАК ТипОперативнойПриемки,
							                        |	ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам КАК УчетЗаказовПоМестам,
							                        |	ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам КАК УчетШКПоТоварам,
													|	ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах КАК АгрегироватьДанныеВОтправляемыхОтчетах,
													|	ПараметрыКонтрагентовСрезПоследних.СвязкаНастройкиПечатиЧеков КАК СвязкаНастройкиПечатиЧеков,
													|	ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности КАК СпособыКонтроляДнейЗадолженности,
													|	ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
													|	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет,
													|	ПараметрыКонтрагентовСрезПоследних.ТипОтношенийСКлиентами КАК ТипОтношенийСКлиентами,
													|	ПараметрыКонтрагентовСрезПоследних.УчетТоваровПоМестам КАК УчетТоваровПоМестам,
													|	ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
													|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто КАК АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто,
													|	ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
													|	ПараметрыКонтрагентовСрезПоследних.НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
													|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто КАК АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто,
													|	ПараметрыКонтрагентовСрезПоследних.НеСоздаватьМестаЗаказовПоПриходнымАПП КАК НеСоздаватьМестаЗаказовПоПриходнымАПП,
													//Асеев 07.09.2020 (Задача № 4197)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП,
													//Асеев 07.09.2020 (Задача № 4197)<<<
													//Асеев 26.01.2021 (Задача № 4449)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ОдинаковыеШКНаВсехМестахЗаказа КАК ОдинаковыеШКНаВсехМестахЗаказа,
													//Асеев 26.01.2021 (Задача № 4449)<<<
													//Асеев 20.08.2021 (Задача № 4645)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
													//Асеев 20.08.2021 (Задача № 4645)<<<
													//Асеев 28.02.2022 (Задача № 4749)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ТарифПримерки КАК ТарифПримерки,
													//Асеев 28.02.2022 (Задача № 4749)<<<
													//Асеев 29.03.2022 (Задача № 4767)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail КАК ОтправкаСсылкиЛКПолучателяЗаказаНаEmail,
													//Асеев 29.03.2022 (Задача № 4767)<<<
													//Асеев 31.05.2022 (Задача № 4813)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаSMS КАК ОтправкаСсылкиЛКПолучателяЗаказаSMS,
													|	ПараметрыКонтрагентовСрезПоследних.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа КАК ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа,
													//Асеев 31.05.2022 (Задача № 4813)<<<
													//Асеев 18.08.2022 (Задача № 4873)>>>
													|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке,
													//Асеев 18.08.2022 (Задача № 4873)<<<
													//Асеев 30.08.2022 (Задача № 4883)>>>
													|	ПараметрыКонтрагентовСрезПоследних.БезусловнаяПечатьБланковЗаказов КАК БезусловнаяПечатьБланковЗаказов,
													//Асеев 30.08.2022 (Задача № 4883)<<<
													//Асеев 28.11.2022 (Задача № 4935)>>>
													|	ПараметрыКонтрагентовСрезПоследних.accessKey КАК accessKey,
													//Асеев 28.11.2022 (Задача № 4935)<<<
													//Асеев 26.01.2023 (Задача № 4977)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ЛьготнаяКатегорияЭквайринга КАК ЛьготнаяКатегорияЭквайринга,
													//Асеев 26.01.2023 (Задача № 4977)<<<
													//Асеев 12.05.2023 (по письму Контроль заказов)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ПроизводитьРассылкуКонтроляЗаказов КАК ПроизводитьРассылкуКонтроляЗаказов,
													//Асеев 12.05.2023 (по письму Контроль заказов)<<<
													//Асеев 30.09.2024 (Задача № 5329)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ФормироватьАПП КАК ФормироватьАПП,
													|	ПараметрыКонтрагентовСрезПоследних.ВремяФормированияАПП КАК ВремяФормированияАПП,
													//Асеев 30.09.2024 (Задача № 5329)<<<
													//Асеев 31.10.2024 (Задача № 5339)>>>
													|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
													//Асеев 31.10.2024 (Задача № 5339)<<<
													|ИЗ
													|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент)КАК ПараметрыКонтрагентовСрезПоследних");
							ЗапросПК.УстановитьПараметр("Контрагент", ГруппаРодитель.ОсновнойМагазин);	
							РезПК = ЗапросПК.Выполнить().Выгрузить();
							
							Если РезПК.Количество() > 0 Тогда
								
								НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
								НаборПК.Отбор.Контрагент.Установить(ГруппаРодитель.Ссылка);
								НаборПК.Прочитать();
								НаборПК.Очистить();
								
								НЗаписьПК = НаборПК.Добавить();					
								ЗаполнитьЗначенияСвойств(НЗаписьПК, РезПК[0]);
								НЗаписьПК.Период =  ТекущаяДата();
								НЗаписьПК.Контрагент = ГруппаРодитель.Ссылка;
								
								НаборПК.Записать(Ложь);	
								
								//+Степанов
								//СписокПолучателей = Новый Массив;
								//СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
								//СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
								//Тема = "Обновлены параметры контрагента " + Строка(ГруппаРодитель.Ссылка);
								//lem.ОтправитьСообщение(СписокПолучателей,Тема);
								//-Степанов
								
							КонецЕсли;

							//--- БАО 03.08.2017 №1470
							
						КонецеСли;
					КонецЕсли;
				КонецеСли;	
				
				Попытка
					НовыйМагазин.Записать();
					ЗаписатьЛог(9, ?(флНовыйМагазин, "+++ Записан новый", "*** Перезаписан")+" магазин "+НовыйМагазин+" shopId: "+ Магазин.shopId); 
					Успешно = Истина;
				Исключение
					ЗаписатьЛог(9, "!!!Ошибка записи магазина: "+Магазин.shopName +" shopId: "+ Магазин.shopId + Символы.ПС + ОписаниеОшибки());
					Продолжить;
					Успешно = Ложь;	
				КонецПопытки;
				
				Наб = РегистрыСведений.ПечататьБланкиПоКонтрагентам.СоздатьНаборЗаписей();
				Наб.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
				Нов = Наб.Добавить();
				Нов.Контрагент = НовыйМагазин.Ссылка;
				Наб.Записать();
				
				
				//Наб = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
				//Наб.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
				//Нов = Наб.Добавить();
				//Нов.Контрагент = НовыйМагазин.Ссылка;
				//Нов.СкладскаяОбработкаОтсутствует = Магазин.WarhouseProcessingDisabled_Ч;
				//Наб.Записать();
				
				ЗапросПК = Новый Запрос("ВЫБРАТЬ
				                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
				                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
				                        |	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
				                        |	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
				                        |	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
				                        |	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
				                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
				                        |	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
				                        |	ПараметрыКонтрагентовСрезПоследних.ВесЗапросаДанныхОПодъемеОтВодителя КАК ВесЗапросаДанныхОПодъемеОтВодителя,
				                        |	ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей КАК НаименованиеЛатиницей,
				                        |	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
				                        |	ПараметрыКонтрагентовСрезПоследних.ТипОперативнойПриемки КАК ТипОперативнойПриемки,
				                        |	ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам КАК УчетЗаказовПоМестам,
				                        |	ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам КАК УчетШКПоТоварам,
				                        |	ПараметрыКонтрагентовСрезПоследних.СкладскаяОбработкаОтсутствует КАК СкладскаяОбработкаОтсутствует,
				                        |	ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах КАК АгрегироватьДанныеВОтправляемыхОтчетах,
				                        |	ПараметрыКонтрагентовСрезПоследних.СвязкаНастройкиПечатиЧеков КАК СвязкаНастройкиПечатиЧеков,
				                        |	ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности КАК СпособыКонтроляДнейЗадолженности,
				                        |	ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
				                        |	ПараметрыКонтрагентовСрезПоследних.ЭтоАгрегатор КАК ЭтоАгрегатор,
				                        |	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет,
				                        |	ПараметрыКонтрагентовСрезПоследних.ТипОтношенийСКлиентами КАК ТипОтношенийСКлиентами,
				                        |	ПараметрыКонтрагентовСрезПоследних.setiingId_Strizh КАК setiingId_Strizh,
				                        |	ПараметрыКонтрагентовСрезПоследних.login_Strizh КАК login_Strizh,
				                        |	ПараметрыКонтрагентовСрезПоследних.password_Strizh КАК password_Strizh,
				                        |	ПараметрыКонтрагентовСрезПоследних.УчетТоваровПоМестам КАК УчетТоваровПоМестам,
				                        |	ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
				                        |	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто КАК АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто,
				                        |	ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
				                        |	ПараметрыКонтрагентовСрезПоследних.НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
										|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто КАК АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто,
										|	ПараметрыКонтрагентовСрезПоследних.НеСоздаватьМестаЗаказовПоПриходнымАПП КАК НеСоздаватьМестаЗаказовПоПриходнымАПП,
										//Асеев 07.09.2020 (Задача № 4197)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП,
										//Асеев 07.09.2020 (Задача № 4197)<<<
										//Асеев 26.01.2021 (Задача № 4449)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ОдинаковыеШКНаВсехМестахЗаказа КАК ОдинаковыеШКНаВсехМестахЗаказа,
										//Асеев 26.01.2021 (Задача № 4449)<<<
										//Асеев 20.08.2021 (Задача № 4645)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
										//Асеев 20.08.2021 (Задача № 4645)<<<
										//Асеев 28.02.2022 (Задача № 4749)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ТарифПримерки КАК ТарифПримерки,
										//Асеев 28.02.2022 (Задача № 4749)<<<
										//Асеев 29.03.2022 (Задача № 4767)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail КАК ОтправкаСсылкиЛКПолучателяЗаказаНаEmail,
										//Асеев 29.03.2022 (Задача № 4767)<<<
										//Асеев 31.05.2022 (Задача № 4813)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаSMS КАК ОтправкаСсылкиЛКПолучателяЗаказаSMS,
										|	ПараметрыКонтрагентовСрезПоследних.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа КАК ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа,
										//Асеев 31.05.2022 (Задача № 4813)<<<
										//Асеев 18.08.2022 (Задача № 4873)>>>
										|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке,
										//Асеев 18.08.2022 (Задача № 4873)<<<
										//Асеев 30.08.2022 (Задача № 4883)>>>
										|	ПараметрыКонтрагентовСрезПоследних.БезусловнаяПечатьБланковЗаказов КАК БезусловнаяПечатьБланковЗаказов,
										//Асеев 30.08.2022 (Задача № 4883)<<<
										//Асеев 28.11.2022 (Задача № 4935)>>>
										|	ПараметрыКонтрагентовСрезПоследних.accessKey КАК accessKey,
										//Асеев 28.11.2022 (Задача № 4935)<<<
										//Асеев 26.01.2023 (Задача № 4977)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ЛьготнаяКатегорияЭквайринга КАК ЛьготнаяКатегорияЭквайринга,
										//Асеев 26.01.2023 (Задача № 4977)<<<
										//Асеев 12.05.2023 (по письму Контроль заказов)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ПроизводитьРассылкуКонтроляЗаказов КАК ПроизводитьРассылкуКонтроляЗаказов,
										//Асеев 12.05.2023 (по письму Контроль заказов)<<<
										//Асеев 30.09.2024 (Задача № 5329)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ФормироватьАПП КАК ФормироватьАПП,
										|	ПараметрыКонтрагентовСрезПоследних.ВремяФормированияАПП КАК ВремяФормированияАПП,
										//Асеев 30.09.2024 (Задача № 5329)<<<
										//Асеев 31.10.2024 (Задача № 5339)>>>
										|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
										//Асеев 31.10.2024 (Задача № 5339)<<<
										|ИЗ
										|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних");
				ЗапросПК.УстановитьПараметр("Контрагент", НовыйМагазин.Ссылка);	
				РезПК = ЗапросПК.Выполнить().Выгрузить();
				
				Если РезПК.Количество() > 0 Тогда
					
					НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
					НаборПК.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
					НаборПК.Прочитать();
					НаборПК.Очистить();
					
					НЗаписьПК = НаборПК.Добавить();					
					ЗаполнитьЗначенияСвойств(НЗаписьПК, РезПК[0]);
					НЗаписьПК.СкладскаяОбработкаОтсутствует = Магазин.WarhouseProcessingDisabled_Ч;
					НЗаписьПК.Период =  ТекущаяДата();
					НЗаписьПК.Контрагент = НовыйМагазин.Ссылка;
					
					НаборПК.Записать(Ложь);	
					//+Степанов
					//СписокПолучателей = Новый Массив;
					//СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
					//СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
					//Тема = "Обновлены параметры контрагента " + Строка(НовыйМагазин.Ссылка);
					//lem.ОтправитьСообщение(СписокПолучателей,Тема);
					//-Степанов
					
				Иначе
					НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
					НаборПК.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
					
					НЗаписьПК = НаборПК.Добавить();					
					НЗаписьПК.СкладскаяОбработкаОтсутствует = Магазин.WarhouseProcessingDisabled_Ч;
					НЗаписьПК.Период =  ТекущаяДата();
					НЗаписьПК.Контрагент = НовыйМагазин.Ссылка;
					
					НаборПК.Записать();	
					//+Степанов
					//СписокПолучателей = Новый Массив;
					//СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
					//СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
					//Тема = "Обновлены параметры контрагента " + Строка(НовыйМагазин.Ссылка);
					//lem.ОтправитьСообщение(СписокПолучателей,Тема);
					//-Степанов
					
				КонецЕсли;
				
				
				
				// Договоры магазина
				ДоговорКомиссии = ПолучитьДоговорКомитента(НовыйМагазин.Ссылка, Истина);
				Если ДоговорКомиссии = Неопределено Тогда 
					ДоговорКомиссии = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					ДоговорКомиссии.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					ДоговорКомиссии.ВалютаВзаиморасчетов  = ВалютаРуб;
					ДоговорКомиссии.Организация           = ОснОрг; 
					ДоговорКомиссии.ВидДоговора           = ВидДоговораКомиссии;
					ДоговорКомиссии.Наименование          = "Комиссионная торговля";
					ДоговорКомиссии.Владелец              = НовыйМагазин.Ссылка;
					ДоговорКомиссии.Записать();
					ЗаписатьЛог(9,"   +++ Записан договор комиссии для " + НовыйМагазин);
				КонецЕсли;
				
				ДоговорДоставки = ПолучитьДоговорКомитента(НовыйМагазин.Ссылка, Ложь);
				Если ДоговорДоставки = Неопределено Тогда 
					ДоговорДоставки = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					ДоговорДоставки.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					ДоговорДоставки.ВалютаВзаиморасчетов  = ВалютаРуб;
					ДоговорДоставки.Организация           = ОснОрг; 
					ДоговорДоставки.ВидДоговора           = ВидДоговораСПокупателем;
					ДоговорДоставки.Наименование          = "Договор по доставке";
					ДоговорДоставки.Владелец              = НовыйМагазин.Ссылка;
					ДоговорДоставки.Записать();
					ЗаписатьЛог(9,"   +++ Записан договор доставки для " + НовыйМагазин);
				КонецЕсли;
				
				//КонецЕсли; // Если новыймагазин
				////	При загрузке подчиненного магазина ТопДеливери копировать содержимое РС ЮридическоеЛицоПоДоставкеКонтрагента 
				////	из ТопДеливери в загружаемый магазин
				Если Успешно И ЗначениеЗаполнено(Магазин.receiverID) Тогда
					
					ЗапросЮр = Новый Запрос(
					"ВЫБРАТЬ
					|	ЮридическоеЛицоПоДоставкеКонтрагента.ТипОплаты,
					|	ЮридическоеЛицоПоДоставкеКонтрагента.ТипДоставки,
					|	ЮридическоеЛицоПоДоставкеКонтрагента.Организация,
					|	ЮридическоеЛицоПоДоставкеКонтрагента.Спецсчет,
					|	ЮридическоеЛицоПоДоставкеКонтрагента.ЧекиНеПечатаются
					|ИЗ
					|	РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента КАК ЮридическоеЛицоПоДоставкеКонтрагента
					|ГДЕ
					|	ЮридическоеЛицоПоДоставкеКонтрагента.Контрагент = &ТопДеливери");
					ЗапросЮр.УстановитьПараметр("ТопДеливери", ИМ_TopDelivery);
					Результат = ЗапросЮр.Выполнить().Выгрузить();
					НаборЮр = РегистрыСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СоздатьНаборЗаписей();
					НаборЮр.Очистить();
					Для Каждого Стр Из Результат Цикл
						НовЮр = НаборЮр.Добавить();
						НовЮр.Контрагент       = НовыйМагазин.Ссылка;
						НовЮр.ТипОплаты        = Стр.ТипОплаты;
						НовЮр.ТипДоставки      = Стр.ТипДоставки;
						НовЮр.Организация      = Стр.Организация;
						НовЮр.Спецсчет         = Стр.Спецсчет;
						НовЮр.ЧекиНеПечатаются = Стр.ЧекиНеПечатаются;
						НовЮр.Период           = ТекущаяДата();
					КонецЦикла;
					Попытка
						НаборЮр.Записать();
					Исключение
						ЗаписатьЛог(9, "Ошибка! записи Юр.Лицо по доставке. " + ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				/////////////////////////////////////////////////////////////////////////////						
				
			КонецЦикла;	
			
		КонецЕсли;
		
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяДатаЗагрузкиМагазинов");
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
		КонецЕсли;
		НоваяЗапись.Ключ = "ПоследняяДатаЗагрузкиМагазинов";
		НоваяЗапись.Значение = ДатаВСтроку(ТекущаяДата());
		Попытка
			Запись.Записать();
			//ЗаписатьЛог(9, "Дата загрузки обновлена: " + Строка(НоваяЗапись.Значение));
		Исключение
			ЗаписатьЛог(9, "Ошибка обновления границы загрузки МАГАЗИНОВ. " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли; // Если ЗначениеЗаполнено(ДатаИзмененияМагазина)
	
КонецПроцедуры		

#КонецОбласти


#Область ПроверкаКоличестваТоваровВАдминкеИ1С
Процедура ПроверкаКоличестваТоваровВАдминкеИ1С() Экспорт 
	
	НомераНеЗагруженных = "";
	НомераНеЗагруженныхТоваров = "";
	
	ДатаДоставкиЗаказа = КонецДня(ТекущаяДата())+1;
	
	Подключение = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	Попытка	
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT 
		|O.orderID,
		|ISNULL(SUM(OI.Count),0) AS vsegoTovarov
		|FROM
		|_order O 
		|RIGHT JOIN 
		|_orderitems OI ON O.orderid = OI.orderID
		|WHERE
		|O.deliveryDate between '"+ДатаИз1С(ДатаДоставкиЗаказа, Ложь)+"' and '"+ДатаИз1С(КонецДня(ДатаДоставкиЗаказа), Ложь)+"'
		|AND
		|O.status =2 AND O.selfDelivery NOT IN (2,3)
		//+++ БАО 01.09.2017 № убрал лишние письма
		| and ISNULL(OI.Count,0) <> ISNULL(OI.missedCount,0)
		| and ISNULL(OI.Count,0) <> 0
		//--- БАО 01.09.2017 № убрал лишние письма
		|Group BY
		|O.orderid", Подключение);
		
		КоличествоТоваровНаДату = СоздатьТаблицу(RS, "orderID_Ч, vsegoTovarov_Ч");
		
	Исключение	
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если КоличествоТоваровНаДату.Количество() > 0 Тогда
		
		Для Каждого Стр Из КоличествоТоваровНаДату Цикл
			НомерЗаказа = Формат(Стр.orderID_Ч, "ЧН=0; ЧГ=");
			Док = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(НомерЗаказа);
			
			Если НЕ Док.Пустая() Тогда
				ТоваровВДоке = Док.Товары.Итог("Количество") + Док.ПодарочныеПозиции.Итог("Количество");
				
				Если ТоваровВДоке < Стр.vsegoTovarov_Ч Тогда
					//Сообщить("----  ! товары не загрузились по заказу: " + Строка(НомерЗаказа));
					НомераНеЗагруженныхТоваров = НомераНеЗагруженныхТоваров + Строка(НомерЗаказа) + ",";
				КонецЕсли;
				
			Иначе
				//Сообщить("Заказ не найден: " + Строка(НомерЗаказа));
				НомераНеЗагруженных = НомераНеЗагруженных + Строка(НомерЗаказа) + ",";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Подключение = Неопределено;
	rs = Неопределено;
	
	ТекстПисьма = "";	
	ТекстПисьма = ?(НомераНеЗагруженных <> "","Не загружены заказы: "+ НомераНеЗагруженных,"") 
	+ ?(НомераНеЗагруженныхТоваров <> "",Символы.ПС + "Не загружены товары по заказам: "+ НомераНеЗагруженныхТоваров,"");	
	Если ТекстПисьма <> "" Тогда 
		МасП = Новый Массив;
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//+Степанов
		МасП.Добавить("n.stepanov@strizh-logistic.ru");
		//-Степанов
		Если НомераНеЗагруженныхТоваров <> "" Тогда
			МасП.Добавить("nudelmanh@strizh-logistic.ru");
		КонецЕсли;
		//МасП.Добавить("konstantin.patsatsiya@strizh-logistic.ru"); // ТЕСТ 
		
		Lem.ОтправитьСообщение(МасП, "Проверка идентичности данных заказов по товарам из Админки в 1С. С датой доставки на: " + Формат(ДатаДоставкиЗаказа,"ДФ=dd.MM.yyyy"),ТекстПисьма);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти


#Область ЗаписьЛогов

Процедура ЗаписатьЛог(ОшибкаВызванаИзПроцедуры, ТекстОшибки)
	
	// Для каждого дня свой файл
	ДатаЗаписи = Строка(Формат(ТекущаяДата(),"ДФ=yyyyMMdd"));
	
	Если       ОшибкаВызванаИзПроцедуры = 1 Тогда // ЗагрузкаИзАдминки()
		ИмяФайла = "ИзАдминки"+ ДатаЗаписи +".txt";
	ИначеЕсли  ОшибкаВызванаИзПроцедуры = 2 Тогда // ЗаписьНоменклатуры
		ИмяФайла = "Номенклатура"+ ДатаЗаписи +".txt";
	ИначеЕсли  ОшибкаВызванаИзПроцедуры = 3 Тогда // ЗаписьКонтрагентов
		ИмяФайла = "Контрагенты"+ ДатаЗаписи +".txt";
	ИначеЕсли  ОшибкаВызванаИзПроцедуры = 4 Тогда // ЗаписьЗаказов - документы
		ИмяФайла = "Документы"+ ДатаЗаписи +".txt";
	ИначеЕсли  ОшибкаВызванаИзПроцедуры = 5 Тогда // ЗаписьДатыЗагрузки
		ИмяФайла = "ДатаЗагрузки"+ ДатаЗаписи +".txt";
	ИначеЕсли  ОшибкаВызванаИзПроцедуры = 6 Тогда // ЗаписьСкладовМагазинов
		ИмяФайла = "СкладыМагазинов"+ ДатаЗаписи +".txt";
	ИначеЕсли  ОшибкаВызванаИзПроцедуры = 7 Тогда // Запись инфо по загрузке данных
		ИмяФайла = "ИнфоПоЗагрузке"+ ДатаЗаписи +".txt";
	ИначеЕсли  ОшибкаВызванаИзПроцедуры = 8 Тогда // Запись инфо по загрузке данных
		ИмяФайла = "ТоварыОшибки"+ ДатаЗаписи +".txt";
	ИначеЕсли  ОшибкаВызванаИзПроцедуры = 9 Тогда // ЗаписьКонтрагентов
		ИмяФайла = "Магазины"+ ДатаЗаписи +".txt";		
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	
	ПолныйПутьКФайлу = "C:\log1s\ZagruzkaServLog\" + ИмяФайла;
	
	НайденныйФайл = НайтиФайлы("C:\log1s\ZagruzkaServLog\",ИмяФайла);
	Если НайденныйФайл.Количество() > 0 Тогда 
		Текст.Прочитать(НайденныйФайл[0].ПолноеИмя);
	Иначе
		Текст.Записать(ПолныйПутьКФайлу);
		Текст.Прочитать(ПолныйПутьКФайлу);
	КонецЕсли;
	Текст.ДобавитьСтроку(Строка(ТекущаяДата())+ " :::: " + ТекстОшибки);
	Текст.Записать(ПолныйПутьКФайлу);
	
	Текст = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииДляСКД 
// Функции можно вызывать в вычисляемых полях

Функция СокрСтрокуСкд(Стр) Экспорт
	
	Возврат СокрЛП(Стр);
	
КонецФункции


#КонецОбласти


// Процедура автоматического закрытия заказов по рейсу
Процедура ЗакрытиеЗаказов(ТерминалКод = 1) Экспорт
	
	Терминал = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТерминалКод);
	
	МакетНЕЗакрытые = "
	|<HTML><HEAD>
	|<META content='text/html; charset=utf-8' http-equiv=Content-Type></META>
	|<META name=GENERATOR content='MSHTML 11.00.9600.18231'></META><BASE href='v8config://1e4190e9-76c2-456e-a607-4d817110ffd9/mdobject/id22ea1a0b-eca5-4f7a-8a8b-09a2a1c164eb/8eb4fad1-1fa6-403e-970f-2c12dbb43e23'></BASE></HEAD>
	|<BODY>
	|<TABLE style='WIDTH: 319pt; BORDER-COLLAPSE: collapse' cellSpacing=0 cellPadding=0 width=332 border=1>
	|<COLGROUP>
	|<COL style='WIDTH: 27pt; mso-width-source: userset; mso-width-alt: 1536' width=36></COL>
	|<COL style='WIDTH: 75pt; mso-width-source: userset; mso-width-alt: 4266' width=100></COL>
	|<COL style='WIDTH: 61pt; mso-width-source: userset; mso-width-alt: 3456' width=81></COL>
	|<COL style='WIDTH: 86pt; mso-width-source: userset; mso-width-alt: 4906' width=115></COL></COLGROUP>
	|<TBODY>
	|<TR style='HEIGHT: 11.25pt' height=15>
	|<TD class=xl66 style='BORDER-TOP: windowtext 1pt solid; HEIGHT: 11.25pt; BORDER-RIGHT: 2px solid; WIDTH: 27pt; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT: 2px solid; BACKGROUND-COLOR: silver; windowtext: ' height=15 width=36 align=center><STRONG><FONT size=2 face=Arial>№</FONT></STRONG></TD>
	|<TD class=xl69 style='BORDER-TOP: windowtext 1pt solid; BORDER-RIGHT: 2px solid; WIDTH: 136pt; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT: 2px solid; BACKGROUND-COLOR: silver; windowtext: ; f0f0f0: ' width=181 colSpan=3 align=center><STRONG><FONT size=2 face=Arial>Номер машины</FONT></STRONG></TD>
	|<TD class=xl71 style='BORDER-TOP: windowtext 1pt solid; BORDER-RIGHT: 2px solid; WIDTH: 86pt; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT: 2px solid; BACKGROUND-COLOR: silver; windowtext: ' width=115 align=center><STRONG><FONT size=2 face=Arial>Номер рейса</FONT></STRONG></TD>
	|<TD class=xl71 style='BORDER-TOP: windowtext 1pt solid; BORDER-RIGHT: 2px solid; WIDTH: 86pt; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT: 2px solid; BACKGROUND-COLOR: silver; windowtext: ' width=115 align=center><STRONG><FONT size=2 face=Arial>Номер закрытия</FONT></STRONG></TD></TR>";
	
	ТЗ_НЕЗакрытые = Новый ТаблицаЗначений;
	ТЗ_НЕЗакрытые.Колонки.Добавить("ГосНомер");
	ТЗ_НЕЗакрытые.Колонки.Добавить("НомерРейса");
	ТЗ_НЕЗакрытые.Колонки.Добавить("НомерЗакрытия");
	
	
	
	//Возврат;
	ВремяНачалаРегламента = ТекущаяДата();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаЗакрытия = ТекущаяДата() - 86400;
		
	//ДатаЗакрытия = Дата("20161107");    //---- тест
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Рейс.Ссылка,
	                      |	Рейс.РейсМестнойДоставки.Транспорт.НомерГосударственнойРегистрации КАК НомерГосударственнойРегистрации,
	                      |	Рейс.Номер Как НомерРейса
	                      |ИЗ
	                      |	Документ.Рейс КАК Рейс
	                      |ГДЕ
	                      |	Рейс.Проведен
	                      |	И Рейс.ДатаРейса МЕЖДУ &Дата1 И &Дата2
	                      |	И Рейс.ТерминалДоставки = &ТерминалДоставки");
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаЗакрытия));					  
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаЗакрытия));			
	Запрос.УстановитьПараметр("ТерминалДоставки", Терминал);

	//+++ БАО 12.07.2017 №1334  
	//---Рез = Запрос.Выполнить().Выбрать();
	
	ТЗ_РейсыДляЗакрытия = Запрос.Выполнить().Выгрузить();
	//--- БАО 12.07.2017 №1334  
	
	ТЗЗакрытия = Новый ТаблицаЗначений;
	ТЗЗакрытия.Колонки.Добавить("ГосНомер");
	ТЗЗакрытия.Колонки.Добавить("НомерРейса");
	ТЗЗакрытия.Колонки.Добавить("НомерЗакрытия");

	
	//+++ БАО 12.07.2017 №1334  
	
				
	// массив где будут храниться фоновые задания
    ТаблицаЗаданий = Новый ТаблицаЗначений;
	ТаблицаЗаданий.Колонки.Добавить("ГУИД");
	ТаблицаЗаданий.Колонки.Добавить("Задание");
	ТаблицаЗаданий.Колонки.Добавить("ИндексНачала");
	ТаблицаЗаданий.Колонки.Добавить("РазмерПроции");
	ТаблицаЗаданий.Колонки.Добавить("Прогресс");
	ТаблицаЗаданий.Колонки.Добавить("ОшибкиОбработаны");
	
	// определяем максимальное количество потоков
	ЧислоПотоков = ?(ТЗ_РейсыДляЗакрытия.Количество() >= 8, 8,  ТЗ_РейсыДляЗакрытия.Количество());
	
	
	// объем порции данных для обработки каждым потоком

	
	ЧислоСтрокВТаблице = ТЗ_РейсыДляЗакрытия.Количество();
	
	Если ЧислоПотоков <> 0 Тогда
		
		РазмерПорции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков);
		
		Для НомерПотока = 1 По ЧислоПотоков Цикл 		  
			
			// определяем индекс для начала обработки данных данным потоком
			// разные потоки обрабатывают разные части таблицы
			ИндексНачала = (НомерПотока - 1)*РазмерПорции;	
			
			Если (НомерПотока = ЧислоПотоков) Тогда
				// если это последний поток, то он обрабатывает все оставшиеся данные
				// т.к. число потоков может не быть кратно количеству строк в таблице
				РазмерПорции = ЧислоСтрокВТаблице-(ЧислоПотоков*РазмерПорции)+РазмерПорции;			
			КонецЕсли;                                        		
			
			НаборПараметров = Новый Массив;
			
			
			НаборПараметров.Добавить(НомерПотока);
			НаборПараметров.Добавить(ИндексНачала);
			НаборПараметров.Добавить(РазмерПорции);
			НаборПараметров.Добавить(ТЗ_РейсыДляЗакрытия);
			НаборПараметров.Добавить(ДатаЗакрытия);
			
			// запуск фонового задания
			ГУИД = Новый УникальныйИдентификатор;
			Задание = ФоновыеЗадания.Выполнить("pkv.ФоновоеПоЗакрытиюЗаказов", НаборПараметров, ГУИД, "Закрытие заказов. Поток " + НомерПотока);			
			
			// добавляем задание в массив, что бы потом отследить выполнение
			СтрокаЗаданий = ТаблицаЗаданий.Добавить();
			СтрокаЗаданий.ГУИД = Задание.УникальныйИдентификатор;
			СтрокаЗаданий.Задание = Задание;
			СтрокаЗаданий.ИндексНачала = ИндексНачала;
			СтрокаЗаданий.РазмерПроции = РазмерПорции;
			СтрокаЗаданий.Прогресс = 0;
			СтрокаЗаданий.ОшибкиОбработаны = Ложь;
			
		КонецЦикла;	
		
		Для Каждого ЭлементМассиваЗадания Из ТаблицаЗаданий Цикл 
			
			Попытка 
				
				ЭлементМассиваЗадания.Задание.ОжидатьЗавершения(); 
				
			Исключение
				
			КонецПопытки;	                                    
			
		КонецЦикла; 
		
		СчетчикПотоков = 1;
		
		Для Каждого ЭлементМассиваЗадания Из ТаблицаЗаданий Цикл 
			
			СчетчикПотоков = СчетчикПотоков + 1;
			
			//ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ЭлементМассиваЗадания.ГУИД);
			
			Отбор = Новый Структура;
			Отбор.Вставить("УникальныйИдентификатор", ЭлементМассиваЗадания.ГУИД);
			
			ФоновоеЗадание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			//На всякий случай
			Если ФоновоеЗадание = Неопределено Тогда
				
				Сообщить("Не найдено фоновое задание. Поток " + СчетчикПотоков, СчетчикПотоков);
				
				Продолжить;
				
			КонецЕсли;
			
			ФоновоеЗадание = ФоновоеЗадание[0];  
			
			СписокНеПроведенных = Новый СписокЗначений;
			СписокПроведенных = Новый СписокЗначений;
			
			ОбработатьСообщенияФоновогоПоЗакрытиюЗаказов(СписокНеПроведенных, СписокПроведенных, ТЗЗакрытия, ТЗ_НЕЗакрытые, ФоновоеЗадание);
			
			Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно И ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Завершено И Не ЭлементМассиваЗадания.ОшибкиОбработаны Тогда
				
				Для СчетчикЗаказов = 1 По ЭлементМассиваЗадания.РазмерПроции  Цикл
					
					Индекс = ?(СчетчикЗаказов = 1, ЭлементМассиваЗадания.ИндексНачала, Индекс + 1);
					Рез =  ТЗ_РейсыДляЗакрытия[Индекс];
					
					Если СписокНеПроведенных.НайтиПоЗначению(Рез.Ссылка) = Неопределено И СписокПроведенных.НайтиПоЗначению(Рез.Ссылка)  = Неопределено Тогда
						
						НСтр = ТЗ_НЕЗакрытые.Добавить();
						НСтр.ГосНомер      = Рез.НомерГосударственнойРегистрации;
						НСтр.НомерРейса    = Рез.НомерРейса;
						НСтр.НомерЗакрытия = "-";	
						
					КонецЕсли;	
					
				КонецЦикла;
				
				ЭлементМассиваЗадания.ОшибкиОбработаны = Истина;
				
			КонецЕсли;	
			
		КонецЦикла;		
		
	КонецЕсли;
	
	////Пока Рез.Следующий() Цикл					
	////	
	////	ДокЗакрытие = СформироватьЗакрытиеПоРейсу(Рез.Ссылка, ДатаЗакрытия);	
	////	
	////	// пишем в РС АвтоматическиеЗакрытияЗаказов
	////	Если ЗначениеЗаполнено(ДокЗакрытие) Тогда	
	////		
	////		Если ДокЗакрытие.Проведен Тогда
	////			
	////			ТекВр = ТекущаяДата();
	////			Набор = РегистрыСведений.АвтоматическиеЗакрытияЗаказов.СоздатьНаборЗаписей();
	////			Набор.Отбор.Период.Установить(ТекВр);			
	////			НЗапись = Набор.Добавить();
	////			НЗапись.Период = ТекВр;
	////			НЗапись.ДокументЗакрытия = ДокЗакрытие;		
	////			Набор.Записать();				
	////			
	////			// 
	////			НСтр = ТЗЗакрытия.Добавить();
	////				
	////			НСтр.ГосНомер      = Рез.НомерГосударственнойРегистрации;
	////			НСтр.НомерРейса    = Рез.Номер;
	////			НСтр.НомерЗакрытия = ДокЗакрытие.Номер;
	////			
	////		Иначе			
	////			НСтр = ТЗ_НЕЗакрытые.Добавить();
	////			НСтр.ГосНомер      = Рез.НомерГосударственнойРегистрации;
	////			НСтр.НомерРейса    = Рез.Номер;
	////			НСтр.НомерЗакрытия = ДокЗакрытие.Номер;		
	////		КонецЕсли;		
	////		
	////	Иначе		
	////		НСтр = ТЗ_НЕЗакрытые.Добавить();
	////		НСтр.ГосНомер      = Рез.НомерГосударственнойРегистрации;
	////		НСтр.НомерРейса    = Рез.Номер;
	////		НСтр.НомерЗакрытия = "-";			
	////	КонецЕсли;
	////	
	////КонецЦикла;
	
	
	//--- БАО 12.07.2017 №1334  
	
//+++ БАО 12.09.2017 №
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ_РейсыДляЗакрытия.НомерРейса КАК НомерРейса,
	               |	ТЗ_РейсыДляЗакрытия.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_РейсыДляЗакрытия
	               |ИЗ
	               |	&ТЗ_РейсыДляЗакрытия КАК ТЗ_РейсыДляЗакрытия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_РейсыДляЗакрытия.НомерРейса КАК НомерРейса,
	               |	РейсДок.РейсМестнойДоставки.Транспорт.НомерГосударственнойРегистрации КАК НомерГосударственнойРегистрации,
	               |	ВЫБОР
	               |		КОГДА ЗакрытиеЗаказов.Ссылка ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтотНеЗакрыт,
	               |	ЗакрытиеЗаказов.Номер КАК НомерЗакрытия
	               |ИЗ
	               |	ВТ_РейсыДляЗакрытия КАК ВТ_РейсыДляЗакрытия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
	               |		ПО ВТ_РейсыДляЗакрытия.Ссылка = ЗакрытиеЗаказов.Рейс
	               |			И (ЗакрытиеЗаказов.ПометкаУдаления = ЛОЖЬ)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК РейсДок
	               |		ПО ВТ_РейсыДляЗакрытия.Ссылка = РейсДок.Ссылка";
	
	Запрос.УстановитьПараметр("ВТ_Закрытые", ТЗЗакрытия.Скопировать(, "НомерРейса"));
	Запрос.УстановитьПараметр("ВТ_НеЗакрытые", ТЗ_НЕЗакрытые.Скопировать(, "НомерРейса"));
	Запрос.УстановитьПараметр("ТЗ_РейсыДляЗакрытия", ТЗ_РейсыДляЗакрытия.Скопировать(, "НомерРейса, Ссылка"));

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТЗ_НЕЗакрытые.Очистить();
	ТЗЗакрытия.Очистить();
	
	Пока Выборка.Следующий() Цикл 
		
		Если Выборка.ЭтотНеЗакрыт Тогда
			
			НСтр = ТЗ_НЕЗакрытые.Добавить();
			НСтр.ГосНомер      = Выборка.НомерГосударственнойРегистрации;
			НСтр.НомерРейса    = Выборка.НомерРейса;
			НСтр.НомерЗакрытия = "-";	
			
		Иначе 
			
			НСтр = ТЗЗакрытия.Добавить();
			НСтр.ГосНомер      = Выборка.НомерГосударственнойРегистрации;
			НСтр.НомерРейса    = Выборка.НомерРейса;
			НСтр.НомерЗакрытия = Выборка.НомерЗакрытия;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	
	
	//--- БАО 12.09.2017 №
	
	// Формируем закрытие самовывоза 
	//Если ТерминалКод = 1 Тогда
	ДокЗакрытиеСамовывоз = СформироватьЗакрытиеСамовывоза(ДатаЗакрытия, ТерминалКод);
	//КонецЕсли;	
	
	// пишем в РС АвтоматическиеЗакрытияЗаказов
	Если Не ДокЗакрытиеСамовывоз = Неопределено Тогда // В рамках Задача № 3247
	//Если ЗначениеЗаполнено(ДокЗакрытиеСамовывоз) Тогда		
		Если ДокЗакрытиеСамовывоз.Проведен Тогда			
			ТекВр = ТекущаяДата();
			Набор = РегистрыСведений.АвтоматическиеЗакрытияЗаказов.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(ТекВр);	
			Набор.Прочитать();
			НЗапись = Набор.Добавить();
			НЗапись.Период = ТекВр;
			НЗапись.ДокументЗакрытия = ДокЗакрытиеСамовывоз;		
			Набор.Записать();						
			// 
			
			НСтр = ТЗЗакрытия.Добавить();
			НСтр.НомерЗакрытия = ДокЗакрытиеСамовывоз.Номер;			
		Иначе			
			НСтр = ТЗ_НЕЗакрытые.Добавить();
			НСтр.НомерЗакрытия = ДокЗакрытиеСамовывоз.Номер;		
		КонецЕсли;				
	Иначе		
		НСтр = ТЗ_НЕЗакрытые.Добавить();
		НСтр.НомерЗакрытия = "-";			
	КонецЕсли;
	
	
	//+++ Задача № 3247
	// Формируем закрытие отклоненных 
	ДокЗакрытиеОтклоненные = СформироватьЗакрытиеОтклоненных(ДатаЗакрытия, ТерминалКод);	
	
	// пишем в РС АвтоматическиеЗакрытияЗаказов
	Если Не ДокЗакрытиеОтклоненные = Неопределено Тогда 		
		Если ДокЗакрытиеОтклоненные.Проведен Тогда			
			ТекВр = ТекущаяДата();
			Набор = РегистрыСведений.АвтоматическиеЗакрытияЗаказов.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(ТекВр);	
			Набор.Прочитать();
			НЗапись = Набор.Добавить();
			НЗапись.Период = ТекВр;
			НЗапись.ДокументЗакрытия = ДокЗакрытиеОтклоненные;		
			Набор.Записать();						
			// 
			
			НСтр = ТЗЗакрытия.Добавить();
			НСтр.НомерЗакрытия = ДокЗакрытиеОтклоненные.Номер;			
		Иначе			
			НСтр = ТЗ_НЕЗакрытые.Добавить();
			НСтр.НомерЗакрытия = ДокЗакрытиеОтклоненные.Номер;		
		КонецЕсли;				
	Иначе		
		НСтр = ТЗ_НЕЗакрытые.Добавить();
		НСтр.НомерЗакрытия = "-";			
	КонецЕсли;
	//---  Задача № 3247
	
	#Область ПостОбработка	
	
	ВремяОкончанияРегламента = ТекущаяДата();
	
	МакетHTML = ПолучитьОбщийМакет("МакетHTML_2");
	ТекстМакет = МакетHTML.ПолучитьТекст();
	ТекстМакет = СтрЗаменить(ТекстМакет,"</tbody></table></body></html>","");	
	ТекстПисьма = "";
	ТекстМакет = СтрЗаменить(ТекстМакет, "[ПериодРаботыРегламента]", "" + ВремяНачалаРегламента + " - " + ВремяОкончанияРегламента + символы.ПС);	
	НПП = 1;
	
	
		
	Для каждого Стр Из ТЗЗакрытия Цикл
		
		ТекстМакет = ТекстМакет + 
		"<TR style='BACKGROUND-COLOR: #F5F5DC';'HEIGHT: 11.25pt' height=15>" +
		"<TD align='CENTER';class=xl67 style='BORDER-TOP: windowtext 0.5pt solid; HEIGHT: 11.25pt; BORDER-RIGHT:  2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext 0.5pt solid; ' height=15><FONT size=2 face=Arial>"+НПП+"</FONT></TD>"+
		"<TD align='RIGHT';class=xl70 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; ' colSpan=3><FONT size=2 face=Arial>"+Стр.ГосНомер+"</FONT></TD>"+
		"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Стр.НомерРейса+"</FONT></TD>" + 
		"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Стр.НомерЗакрытия+"</FONT></TD></TR>";
			
		НПП = НПП + 1;
		
	КонецЦикла;   
	
	ТекстМакет = ТекстМакет + "</tbody></table>";
	
	ТекстПисьма = ТекстПисьма + ТекстМакет;
	
	
	// незакрытые
	НПП = 1;
	Если ТЗ_НЕЗакрытые.Количество() Тогда
		
		ТекстПисьма = ТекстПисьма + "<br> <P> Незакрытые рейсы: </P>" + МакетНЕЗакрытые;
				
		Для каждого Стр Из ТЗ_НЕЗакрытые Цикл
			
			ТекстПисьма = ТекстПисьма + 
			"<TR style='BACKGROUND-COLOR: #F5F5DC';'HEIGHT: 11.25pt' height=15>" +
			"<TD align='CENTER';class=xl67 style='BORDER-TOP: windowtext 0.5pt solid; HEIGHT: 11.25pt; BORDER-RIGHT:  2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext 0.5pt solid; ' height=15><FONT size=2 face=Arial>"+НПП+"</FONT></TD>"+
			"<TD align='RIGHT';class=xl70 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; ' colSpan=3><FONT size=2 face=Arial>"+Стр.ГосНомер+"</FONT></TD>"+
			"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Стр.НомерРейса+"</FONT></TD>" + 
			"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Стр.НомерЗакрытия+"</FONT></TD></TR>";
				
			НПП = НПП + 1;
			
		КонецЦикла;	
	
	КонецЕсли;
	
	
	//+++ БАО 13.07.2017 №1334  
	//---Мас = Новый Массив;
	//---Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	//---Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
	
	Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.Регламент_ЗакрытиеЗаказов);
	
	Если Мас.Количество() > 0 Тогда
		
		//--- БАО 13.07.2017 №1334  		
		
		Если ТЗЗакрытия.Количество() Тогда	
			lem.ОтправитьСообщение(Мас, "Выполнено автоматическое закрытие рейсов (" + Терминал.Город + ")", ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.HTML); 		
		Иначе		
			lem.ОтправитьСообщение(Мас, "Выполнено автоматическое закрытие рейсов", "Хозяин, что-то пошло не так. Проведенные документы отсутствуют.. (" + Терминал.Город + ")", , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст); 		
		КонецЕсли;
		
		//+++ БАО 13.07.2017 №1334  
	КонецЕсли;
	//--- БАО 13.07.2017 №1334  
	
	УстановитьПривилегированныйРежим(Ложь);
	
	#КонецОбласти
	
	
	#Область СтарыеДоработки
	//Возврат;
	//
	//ДатаВчера = ТекущаяДата() - 86400;
	//
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//|	МылоОдминов.Мыло Как Мыло
	//|ИЗ
	//|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	//Стр = СтрокаСоединенияИнформационнойБазы();
	//Таб = Зап.Выполнить().Выгрузить();			
	//СпПол = Таб.ВыгрузитьКолонку("Мыло");
	//
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//              |	новаОтчетВодителяЗадания.Задание.Ссылка КАК Доставка,
	//              |	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
	//              |ИЗ
	//              |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	//              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//              |		ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслуг.Номер
	//              |ГДЕ
	//              |	новаОтчетВодителяЗадания.Ссылка.Проведен = ИСТИНА
	//              |	И новаОтчетВодителяЗадания.Задание.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//              |	И новаОтчетВодителяЗадания.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.выполнена)
	//              |ИТОГИ
	//              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доставка)
	//              |ПО
	//              |	ВладелецТовара";
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаВчера));			  
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаВчера));
	//Рез = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока Рез.Следующий() Цикл
	//	Д = Документы.ЗакрытиеЗаказов.СоздатьДокумент();
	//	Д.Дата = ТекущаяДата();
	//	Д.Контрагент = Рез.ВладелецТовара;
	//	Д.ТипДоставки = Перечисления.ТипыЗаказов.Доставка;
	//	//Д.ДатаЗакрытия = ДатаВчера;
	//	Д.Комментарий = "Создан автоматически";
	//	Д.КонецПериода = КонецДня(ДатаВчера);
	//	Д.НачалоПериода = НачалоДня(ДатаВчера);
	//	Д.ЗаполнитьАктивныеПоказателиУслугСД();
	//	Д.ОбновитьДанные();
	//	ВыбД = Рез.Выбрать();
	//	Пока ВыбД.Следующий() Цикл
	//		Тек = Д.Заказы.Найти(ВыбД.Доставка);
	//		Если Тек = Неопределено Тогда
	//			Продолжить;
	//		КонецеСли;	
	//		Тек.Закрыть = Истина;
	//		Струк = Новый Структура;
	//		Струк.Вставить("Реализация", Тек.Реализация.Ссылка);
	//		Если Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
	//			Най = Д.Товары.НайтиСтроки(Струк);
	//			Для Сч = 0 По Най.Количество() - 1 Цикл
	//				Най[Сч].СуммаНовая = 0;
	//				Най[Сч].КоличествоВозвращено = 0;
	//			КонецЦикла;	
	//		КонецЕсли;	
	//	КонецЦикла;
	//	Д.УстановитьНовыйНомер();
	//	Д.Записать(РежимЗаписиДокумента.Запись);
	//	
	//	Наб = РегистрыСведений.АвтоматическиеЗакрытияЗаказов.СоздатьНаборЗаписей();
	//	Наб.Отбор.ДокументЗакрытия.Установить(Д.Ссылка);
	//	Наб.Прочитать();
	//	
	//	Нов = Наб.Добавить();
	//	Нов.ДокументЗакрытия = Д.Ссылка;
	//	наб.Записать();
	//	
	//	Попытка
	//		Д.Записать(РежимЗаписиДокумента.Проведение);
	//		ОтправитьСообщение(СпПол, "Автоматическое закрытие заказов. База (" + Стр + ")", "Документ закрытия № " + СокрЛП(Д.номер) + " сформирован и проведен!");
	//	Исключение
	//		ОтправитьСообщение(СпПол, "Автоматическое закрытие заказов. База (" + Стр + ")", "Документ закрытия № " + СокрЛП(Д.номер) + " сформирован, но не проведен!");
	//	КонецПопытки;	
	//КонецЦикла;
	
	#КонецОбласти
	
	//Асеев 25.11.2020 (по письму Re: ПодтверждениеСкладУдаленнойПриемки)>>>
	ЗакрытьПодтвержденияУдаленногоЗакрытия(ДатаЗакрытия, Терминал);
	//Асеев 25.11.2020 (по письму Re: ПодтверждениеСкладУдаленнойПриемки)<<<
	
Конецпроцедуры

//Асеев 25.11.2020 (по письму Re: ПодтверждениеСкладУдаленнойПриемки)>>>
Процедура ЗакрытьПодтвержденияУдаленногоЗакрытия(ДатаЗакрытия, Терминал)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ДатаЗакрытия));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ДатаЗакрытия));
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратЗаказовОтВодителя.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВсеДокументы
	|ИЗ
	|	Документ.ВозвратЗаказовОтВодителя КАК ВозвратЗаказовОтВодителя
	|ГДЕ
	|	ВозвратЗаказовОтВодителя.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И ВозвратЗаказовОтВодителя.ТерминалДоставки = &Терминал
	|	И ВозвратЗаказовОтВодителя.РежимПодтвержденияУдаленногоЗакрытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ КАК Документ
	|ПОМЕСТИТЬ ВТ_ЗакрытыеДокументы
	|ИЗ
	|	РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних(
	|			,
	|			Документ В
	|				(ВЫБРАТЬ
	|					ВТ_ВсеДокументы.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_ВсеДокументы КАК ВТ_ВсеДокументы)) КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
	|ГДЕ
	|	ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ВсеДокументы КАК ВТ_ВсеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗакрытыеДокументы КАК ВТ_ЗакрытыеДокументы
	|		ПО ВТ_ВсеДокументы.Ссылка = ВТ_ЗакрытыеДокументы.Документ
	|ГДЕ
	|	ВТ_ЗакрытыеДокументы.Документ ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(Выборка.Ссылка, Истина);
	КонецЦикла;
	
КонецПроцедуры
//Асеев 25.11.2020 (по письму Re: ПодтверждениеСкладУдаленнойПриемки)<<<

//+++ БАО 12.07.2017 №1334 
Процедура ОбработатьСообщенияФоновогоПоЗакрытиюЗаказов(СписокНеПроведенных, СписокПроведенных, ТЗЗакрытия, ТЗ_НЕЗакрытые, ФоновоеЗадание)
	
	МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	
	Если МассивСообщений = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Количество = МассивСообщений.Количество();
	
	Для Каждого Сообщение Из МассивСообщений Цикл 
		
		Если Сообщение.Текст = "" Тогда
			
			А=1;
			
		ИначеЕсли СтрНайти(Сообщение.Текст,"Не проведен") > 0 И СписокНеПроведенных <> Неопределено Тогда
			
			
			Текст = СтрЗаменить(Сообщение.Текст, "Не проведен" + Символы.ПС, "");
			СтруктураВозврата = ОбщегоНазначения.ЗначениеИзСтрокиXML(Текст);
			СписокНеПроведенных.Добавить(СтруктураВозврата.Рейс);
			
			НСтр = ТЗ_НЕЗакрытые.Добавить();
			НСтр.ГосНомер      = СтруктураВозврата.НомерГосударственнойРегистрации;
			НСтр.НомерРейса    = СтруктураВозврата.НомерРейса;
			НСтр.НомерЗакрытия = "-";	
			
			СписокНеПроведенных.Добавить(СтруктураВозврата.Рейс);
			
		ИначеЕсли СтрНайти(Сообщение.Текст,"Проведен") > 0 Тогда
			
			Текст = СтрЗаменить(Сообщение.Текст, "Проведен" + Символы.ПС, "");
			СтруктураВозврата = ОбщегоНазначения.ЗначениеИзСтрокиXML(Текст);
			
			//
			ТекВр = ТекущаяДата();
			Набор = РегистрыСведений.АвтоматическиеЗакрытияЗаказов.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(ТекВр);
			Набор.Прочитать();
			НЗапись = Набор.Добавить();
			НЗапись.Период = ТекВр;
			НЗапись.ДокументЗакрытия = СтруктураВозврата.ДокЗакрытие;		
			Набор.Записать();				
			
			// 
			НСтр = ТЗЗакрытия.Добавить();
			
			НСтр.ГосНомер      = СтруктураВозврата.НомерГосударственнойРегистрации;
			НСтр.НомерРейса    = СтруктураВозврата.НомерРейса;
			НСтр.НомерЗакрытия = СтруктураВозврата.НомерДокЗакрытие;
			
			СписокПроведенных.Добавить(СтруктураВозврата.Рейс);
			
		Иначе
			
			А=1;
			
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры	
 
Процедура ФоновоеПоЗакрытиюЗаказов(НомерПотока, ИндексНачала, РазмерПорции, ТЗ_РейсыДляЗакрытия, ДатаЗакрытия) Экспорт 
	
	Для СчетчикЗаказов = 1 По РазмерПорции  Цикл
		
		Индекс = ?(СчетчикЗаказов = 1, ИндексНачала, Индекс + 1);
		Рейс =  ТЗ_РейсыДляЗакрытия[Индекс];
		
		Попытка
		
			СтруктураДокЗакрытие = СформироватьЗакрытиеПоРейсу(Рейс.Ссылка, ДатаЗакрытия, НомерПотока);
			
			Если СтруктураДокЗакрытие = Неопределено Или СтруктураДокЗакрытие = "Не записан" Или СтруктураДокЗакрытие = "Не проведен" Тогда
				
				СтруктураВозврата = Новый Структура;
				СтруктураВозврата.Вставить("Рейс", Рейс.Ссылка);
				СтруктураВозврата.Вставить("НомерГосударственнойРегистрации", Рейс.НомерГосударственнойРегистрации);
				СтруктураВозврата.Вставить("НомерРейса", Рейс.НомерРейса);
									
				ПередаваемыйТекст = ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураВозврата);

				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не проведен" + Символы.ПС + ПередаваемыйТекст;
				Сообщение.Сообщить();
			
			Иначе 
				
				СтруктураВозврата = Новый Структура;
				СтруктураВозврата.Вставить("ДокЗакрытие", СтруктураДокЗакрытие.ДокЗакрытие);
				СтруктураВозврата.Вставить("Рейс", Рейс.Ссылка);
				СтруктураВозврата.Вставить("НомерГосударственнойРегистрации", Рейс.НомерГосударственнойРегистрации);
				СтруктураВозврата.Вставить("НомерРейса", Рейс.НомерРейса);
				СтруктураВозврата.Вставить("НомерДокЗакрытие", СтруктураДокЗакрытие.НомерДокЗакрытие);
					
				ПередаваемыйТекст = ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураВозврата);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Проведен" + Символы.ПС + ПередаваемыйТекст;
				Сообщение.Сообщить();
				
			КонецЕсли;	
			
		Исключение
			
		КонецПопытки;	
			
	КонецЦикла;	
	
	
КонецПроцедуры	
//--- БАО 12.07.2017 №1334  

Функция СформироватьЗакрытиеПоРейсу(Рейс, ДатаЗакрытия, НомерПотока = 1) 
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗакрытиеЗаказов.Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА ДокументыКОтложенномуПроведению.Период ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК КОтложенномуПроведению
	                      |ИЗ
	                      |	Документ.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыКОтложенномуПроведению КАК ДокументыКОтложенномуПроведению
	                      |		ПО ЗакрытиеЗаказов.Ссылка = ДокументыКОтложенномуПроведению.Документ
	                      |ГДЕ
	                      |	ЗакрытиеЗаказов.Рейс = &Рейс
	                      |	И ЗакрытиеЗаказов.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Рейс", Рейс);	
	Рез = Запрос.Выполнить().Выбрать();		
	ЕстьПроведенный = Ложь;
		
	Пока Рез.Следующий() Цикл			
		Если ЗначениеЗаполнено(Рез.Ссылка) И НЕ Рез.Ссылка.Проведен Тогда
			ДокЗакрытиеСсылка = Рез.Ссылка;	
		КонецЕсли;
		
		Если Рез.Ссылка.Проведен Тогда
			ЕстьПроведенный = Истина;			
		КонецЕсли;	
		
		Если Рез.КОтложенномуПроведению Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЦикла;
	
	
	Если ЕстьПроведенный Тогда		
		#Если Клиент Тогда
			Сообщить("по данному рейсу существует проведенный документ закрытия");
		#КонецЕсли	
		Возврат Неопределено;		
	КонецЕсли;
	
	//+++ БАО 06.09.2017 №
	Попытка
	//--- БАО 06.09.2017 №
	
	
	Если ЗначениеЗаполнено(ДокЗакрытиеСсылка) Тогда		
		ДокЗакрытие = ДокЗакрытиеСсылка.ПолучитьОбъект();
	    ДокЗакрытие.ТранзакционнаяМодель = Истина;
		ДокЗакрытие.ЗаполнитьАктивныеПоказателиУслугСД();
		ДокЗакрытие.ОбновитьДанные();
	Иначе
		ДокЗакрытие = Документы.ЗакрытиеЗаказов.СоздатьДокумент();
		ДокЗакрытие.Рейс = Рейс;
		ДокЗакрытие.ДатаЗакрытия = ДатаЗакрытия;
		ДокЗакрытие.ТранзакционнаяМодель = Истина;
		ДокЗакрытие.Дата = ТекущаяДата();
		ДокЗакрытие.ВариантЗаполнения = 1;
		ДокЗакрытие.ТерминалДоставки = Рейс.ТерминалДоставки;
		ДокЗакрытие.ТерминалПриёма = Справочники.РегиональныеТерминалы.МоскваСтриж;
		ДокЗакрытие.НачалоПериода = НачалоДня(ДатаЗакрытия);
		ДокЗакрытие.КонецПериода = КонецДня(ДатаЗакрытия);
		ДокЗакрытие.ЗаполнитьАктивныеПоказателиУслугСД();
		ДокЗакрытие.ОбновитьДанные();	
	КонецЕсли;
	
	
	// проставим флаги Закрыть и отклонить
	Для Каждого Тек Из ДокЗакрытие.Заказы Цикл
		Если Тек.Отклонить Тогда
			Тек.Отклонить = Ложь;
		КонецеСли;
		
		Если Тек.Закрыть Тогда
			Тек.Закрыть = Ложь;
		КонецеСли;		
			
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена И Тек.Доставлен Тогда
			Тек.Закрыть = Истина;
		КонецеСли;
		
		//Геннадий #3113 от 25.08.2021 ++
		//Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично И Тек.Доставлен Тогда
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
			Тек.Закрыть = Истина;
		КонецеСли;	
		//Геннадий #3113 от 25.08.2021 --
		
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена И Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
			Тек.Закрыть = Истина;
		ИначеЕсли Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена И (Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки И Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь И Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом) Тогда
			Тек.Отклонить = Истина;
		КонецеСли;	
	
		//Геннадий #3113 18.08.2021 ++
		//комментарий от 18.08.2021, причина невыполнения не должна быть "ОтказКлиентаСЗаездом"
		// Михушкин - костыль для НЕ выполненных переносов с заездом . снимаем все флаги, пока не учитываем их в автоматическом режиме --->> 
		Если Тек.БылПереносСЗаездом И Тек.РезультатДоставки <> Справочники.новаРезультатМестнойДоставки.Выполнена И Тек.РезультатДоставки <> Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично И Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
		//Геннадий #3113 18.08.2021 --
			Тек.Закрыть   = Ложь;
			//Геннадий #3113 27.08.2021 ++ комментарий в задаче
			//Тек.Отклонить = Ложь;
			//Геннадий #3113 27.08.2021 --
			Тек.Доставлен = Ложь;
		КонецЕсли;
		// <<--- Михушкин 
		
		//Геннадий #3247 14.09.2021 (по комментарию к задаче) ->
		Если Тек.БылПереносСЗаездом И Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда Тогда
			Тек.Закрыть 	= Истина;
			Тек.Отклонить 	= Ложь;
		ИначеЕсли Не Тек.БылПереносСЗаездом И Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда Тогда
			Тек.Закрыть 	= Ложь;
			Тек.Отклонить 	= Истина;
		КонецЕсли;
		//Геннадий <-
	
		Если ТипЗнч(Тек.Реализация.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда				
			Если Тек.Закрыть И Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом 
				И (Тек.СуммаДоставкиДоМКАД <> 0 ИЛИ Тек.СуммаДоставкиЗаМКАД <> 0) Тогда				
				Тек.СуммаДоставкиДоМКАД = 0;
				Тек.СуммаДоставкиЗаМКАД = 0;					
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//CeHbKA #3781 08.04.2020
	ДокЗакрытие.ЗаполнитьКомпонентыРасчета();
	//CeHbKA #3781 08.04.2020
	
	ДокЗакрытие.ОбновитьСуммыПоСтрокам();	
	ДокЗакрытие.ОбновитьПринятуюСумму();
	
	//+++ БАО 06.09.2017 №
	//---Попытка
	//--- БАО 06.09.2017 №	
		
		
		//+++ БАО 20.07.2017 №1334  
		
		ДокЗакрытие.ДополнительныеСвойства.Вставить("НомерПотока", НомерПотока);
		ДокЗакрытие.ДополнительныеСвойства.Вставить("Каталог", "Отказы");

		
		//--- БАО 20.07.2017 №1334  
		
		//+++ БАО 25.07.2017 №1334  
		//Чистим лог
		bao.ВернутьСообщенияИзЛогаОтказа(ДокЗакрытие.ДополнительныеСвойства);
		//--- БАО 25.07.2017 №1334 

		
		ДокЗакрытие.Записать(РежимЗаписиДокумента.Запись);	
		
		//+++ БАО 25.07.2017 №1334  
		//Чистим лог
		bao.ВернутьСообщенияИзЛогаОтказа(ДокЗакрытие.ДополнительныеСвойства);
		//--- БАО 25.07.2017 №1334  
		
	Исключение
	    ТекстОшибки = ОписаниеОшибки();
		#Если Клиент Тогда
	    	Сообщить("Не удалось Записать документ закрытия по рейсу " + Рейс + ", по причине: " + ТекстОшибки);
		#КонецЕсли	
		
		
		
		//+++ БАО 13.07.2017 №1334  
		//Мас = Новый Массив;
		//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
		
		ТекстОшибки = ТекстОшибки + " " + bao.ВернутьСообщенияИзЛогаОтказа(НомерПотока); 
		
		Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.Регламент_ЗакрытиеЗаказов);
	
		Если Мас.Количество() > 0 Тогда
			
		//--- БАО 13.07.2017 №1334  	
		
			lem.ОтправитьСообщение(Мас, "Ошибка автоматического создания документа закрытия", "Не удалось создать документ закрытие заказов по рейсу " + Рейс + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
			
		//+++ БАО 12.07.2017 №1334  
		
		КонецЕсли;
		//---Возврат Неопределено;	
		Возврат "Не записан";
		//--- БАО 12.07.2017 №1334  
	КонецПопытки;
		
	
	Попытка
		
		
		//+++ БАО 20.07.2017 №1334  
		
		ДокЗакрытие.ДополнительныеСвойства.Вставить("НомерПотока", НомерПотока);
		ДокЗакрытие.ДополнительныеСвойства.Вставить("Каталог", "Отказы");

		
		//--- БАО 20.07.2017 №1334  
		
		//+++ БАО 25.07.2017 №1334  
		//Чистим лог
		bao.ВернутьСообщенияИзЛогаОтказа(ДокЗакрытие.ДополнительныеСвойства);
		//--- БАО 25.07.2017 №1334 

		
		ДокЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		
		//+++ БАО 25.07.2017 №1334  
		//Чистим лог
		bao.ВернутьСообщенияИзЛогаОтказа(ДокЗакрытие.ДополнительныеСвойства);
		//--- БАО 25.07.2017 №1334 

		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		#Если Клиент Тогда
	    	Сообщить("Не удалось закрыть рейс " + Рейс + ", по причине: " + ТекстОшибки);
		#КонецЕсли
				
		//запись в РС ДокументыКОтложенномуПроведению
		pkv.ДобавитьВСписокОтложенногоПроведения(ДокЗакрытие.Ссылка, "Не удалось провести автоматическое закрытие заказов " + ДокЗакрытие.Ссылка + " (По рейсу " + Рейс + ")" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
		
		//+++ БАО 13.07.2017 №1334 
		
		ТекстОшибки = ТекстОшибки + " " + bao.ВернутьСообщенияИзЛогаОтказа(ДокЗакрытие.ДополнительныеСвойства); 
		
		//Мас = Новый Массив;
		//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
		Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.Регламент_ЗакрытиеЗаказов);
	
		Если Мас.Количество() > 0 Тогда

			lem.ОтправитьСообщение(Мас, "Ошибка проведения автоматического закрытия", "Не удалось провести автоматическое закрытие заказов " + ДокЗакрытие.Ссылка + " (По рейсу " + Рейс + ")" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
		//+++ БАО 12.07.2017 №1334  
		
		КонецЕсли;
		
		//---Возврат ДокЗакрытие.Ссылка;
		Возврат "Не проведен";
		
		//--- БАО 12.07.2017 №1334  
	КонецПопытки;
	
	
	//// установка признака "рейс закрыт"
	//Попытка
	//	ДокРейс = Рейс.ПолучитьОбъект();
	//	ДокРейс.ДополнительныеСвойства.Вставить("ОбходПроверок", Истина);
	//	ДокРейс.РейсЗакрыт = Истина;
	//	ДокРейс.Записать(РежимЗаписиДокумента.Запись);
	//Исключение
	//	ТекстОшибки = ОписаниеОшибки();
	//		
	//	Мас = Новый Массив;
	//	Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	//	Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
	//	lem.ОтправитьСообщение(Мас, "Ошибка установки признака ""Рейс закрыт""", "Не удалось установить признак ""рейс закрыт"" по рейсу " + Рейс + Символы.ПС + "Текст ошибки: " + ТекстОшибки);		
	//КонецПопытки;
	
	//+++ БАО 12.07.2017 №1334  
	
	//---Возврат ДокЗакрытие.Ссылка;	
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерДокЗакрытие", ДокЗакрытие.Номер);
	СтруктураВозврата.Вставить("ДокЗакрытие", ДокЗакрытие.Ссылка);
	
	Возврат СтруктураВозврата;
	
	//--- БАО 12.07.2017 №1334  

КонецФункции

Функция СформироватьЗакрытиеСамовывоза(ДатаЗакрытия, Терминал = 1)
	

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗакрытиеЗаказов.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
	                      |ГДЕ
	                      |	ЗакрытиеЗаказов.ПометкаУдаления = ЛОЖЬ
	                      |	И ЗакрытиеЗаказов.ДатаЗакрытия МЕЖДУ &Дата1 И &Дата2
	                      |	И ЗакрытиеЗаказов.ВариантЗаполнения = 2
	                      |	И ЗакрытиеЗаказов.ТерминалДоставки.Код = &ТерминалКод");
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаЗакрытия));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаЗакрытия));
	Запрос.УстановитьПараметр("ТерминалКод", Терминал);
	Рез = Запрос.Выполнить();
	
	
	ТерминалСпр = Справочники.РегиональныеТерминалы.НайтиПоКоду(Терминал);
	
	//+++ БАО 06.09.2017 №
	Попытка
	//--- БАО 06.09.2017 №

	
	Если Рез.Пустой() Тогда	
		ДокЗакрытие = Документы.ЗакрытиеЗаказов.СоздатьДокумент();
		ДокЗакрытие.ДатаЗакрытия = ДатаЗакрытия;
		ДокЗакрытие.ТранзакционнаяМодель = Истина;
		ДокЗакрытие.Дата = ТекущаяДата();
		ДокЗакрытие.ВариантЗаполнения = 2;
		ДокЗакрытие.ТерминалДоставки = ТерминалСпр;
		ДокЗакрытие.ТерминалПриёма = ТерминалСпр;
		ДокЗакрытие.НачалоПериода = НачалоДня(ДатаЗакрытия);
		ДокЗакрытие.КонецПериода = КонецДня(ДатаЗакрытия);
		ДокЗакрытие.ЗаполнитьАктивныеПоказателиУслугСД();
		ДокЗакрытие.ОбновитьДанные();	
	Иначе
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		Док = Выборка.Ссылка;
		ДокЗакрытие = Док.ПолучитьОбъект();
		ДокЗакрытие.ТранзакционнаяМодель = Истина;
		ДокЗакрытие.ЗаполнитьАктивныеПоказателиУслугСД();
		ДокЗакрытие.ОбновитьДанные();	
	КонецЕсли;
	
	// проставим флаги Закрыть и отклонить
	Для Каждого Тек Из ДокЗакрытие.Заказы Цикл
		Если Тек.Отклонить Тогда
			Тек.Отклонить = Ложь;
		КонецеСли;
		
		Если Тек.Закрыть Тогда
			Тек.Закрыть = Ложь;
		КонецеСли;		
			
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена И Тек.Доставлен Тогда
			Тек.Закрыть = Истина;
		КонецеСли;
		
		//Геннадий #3113 от 25.08.2021 ++
		//Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично И Тек.Доставлен Тогда
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
			Тек.Закрыть = Истина;
		КонецеСли;	
		//Геннадий #3113 от 25.08.2021 --
		
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена И Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
			Тек.Закрыть = Истина;
		ИначеЕсли Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена И (Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки И Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь И Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом) Тогда
			Тек.Отклонить = Истина;
		КонецеСли;	
					
	КонецЦикла;	
	
	//CeHbKA #3781 16.04.2020
	ДокЗакрытие.ЗаполнитьКомпонентыРасчета();
	//CeHbKA #3781 16.04.2020
	
	ДокЗакрытие.ОбновитьСуммыПоСтрокам();	
	ДокЗакрытие.ОбновитьПринятуюСумму();
	
	//+++ БАО 06.09.2017 №
	//---Попытка
	//--- БАО 06.09.2017 №
		ДокЗакрытие.Записать(РежимЗаписиДокумента.Запись);	
	Исключение
	    ТекстОшибки = ОписаниеОшибки();
		//+++ БАО 13.07.2017 №1334  
		//Мас = Новый Массив;
		//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
		Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.Регламент_ЗакрытиеЗаказов);
	
		Если Мас.Количество() > 0 Тогда

		//--- БАО 13.07.2017 №1334  
			lem.ОтправитьСообщение(Мас, "Ошибка автоматического создания документа закрытия", "Не удалось создать документ закрытие заказов по САМОВЫВОЗУ." + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
			
		//+++ БАО 13.07.2017 №1334  	
		КонецЕсли;
		
		//--- Возврат Неопределено;	
		//--- БАО 13.07.2017 №1334  
		
		Возврат Неопределено; //"Не записан"; Изменено на Неопределено В рамках Задача № 3247
		
	КонецПопытки;
		
	
	Попытка
		ДокЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
						
		//запись в РС ДокументыКОтложенномуПроведению
		pkv.ДобавитьВСписокОтложенногоПроведения(ДокЗакрытие.Ссылка, "Не удалось провести автоматическое закрытие заказов " + ДокЗакрытие.Ссылка + " (По самовывозу)" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
		
		//+++ БАО 13.07.2017 №1334  
		//Мас = Новый Массив;
		//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
		Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.Регламент_ЗакрытиеЗаказов);
	
		Если Мас.Количество() > 0 Тогда
			
		//--- БАО 13.07.2017 №1334  	

			lem.ОтправитьСообщение(Мас, "Ошибка проведения автоматического закрытия", "Не удалось провести автоматическое закрытие заказов по САМОВЫВОЗУ (" + ДокЗакрытие.Ссылка + ")" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
			
		//+++ БАО 13.07.2017 №1334  
		КонецЕсли;
		//--- БАО 13.07.2017 №1334  
			
		Возврат ДокЗакрытие.Ссылка;
	КонецПопытки;	

	
	Возврат ДокЗакрытие.Ссылка;	

КонецФункции // ()

Функция СформироватьЗакрытиеОтклоненных(ДатаЗакрытия, Терминал = 1)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗакрытиеЗаказов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
	|ГДЕ
	|	ЗакрытиеЗаказов.ПометкаУдаления = ЛОЖЬ
	|	И ЗакрытиеЗаказов.ДатаЗакрытия МЕЖДУ &Дата1 И &Дата2
	|	И ЗакрытиеЗаказов.ВариантЗаполнения = 3
	|	И ЗакрытиеЗаказов.ТерминалДоставки.Код = &ТерминалКод");
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаЗакрытия));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаЗакрытия));
	Запрос.УстановитьПараметр("ТерминалКод", Терминал);
	Рез = Запрос.Выполнить();
		
	ТерминалСпр = Справочники.РегиональныеТерминалы.НайтиПоКоду(Терминал);
	
	Попытка
		
		Если Рез.Пустой() Тогда
			
			ДокЗакрытие = Документы.ЗакрытиеЗаказов.СоздатьДокумент();
			ДокЗакрытие.ДатаЗакрытия = ДатаЗакрытия;
			ДокЗакрытие.ТранзакционнаяМодель = Истина;
			ДокЗакрытие.Дата = ТекущаяДата();
			ДокЗакрытие.ВариантЗаполнения = 3;
			ДокЗакрытие.ТерминалДоставки = ТерминалСпр;
			ДокЗакрытие.ТерминалПриёма = ТерминалСпр;
			ДокЗакрытие.НачалоПериода = НачалоДня(ДатаЗакрытия);
			ДокЗакрытие.КонецПериода = КонецДня(ДатаЗакрытия);
			ДокЗакрытие.ЗаполнитьАктивныеПоказателиУслугСД();
			ДокЗакрытие.ОбновитьДанные();
			
		Иначе
			
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			Док = Выборка.Ссылка;

			Если Док.Проведен Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ДокЗакрытие = Док.ПолучитьОбъект();
			ДокЗакрытие.ТранзакционнаяМодель = Истина;
			ДокЗакрытие.ЗаполнитьАктивныеПоказателиУслугСД();
			
			ДокЗакрытие.Заказы.Очистить();		
			ДокЗакрытие.ОбновитьДанные();
			
		КонецЕсли;
		
		// проставим флаги Закрыть и отклонить
		Для Каждого Тек Из ДокЗакрытие.Заказы Цикл
			
			Тек.Отклонить = Истина;
			Тек.Закрыть = Ложь;
			
			Струк = Новый Структура;
			Струк.Вставить("Реализация", Тек.Реализация);
			НайТов = ДокЗакрытие.Товары.НайтиСтроки(Струк);
			Для Сч = 0 По НайТов.Количество() - 1 Цикл
				НайТов[Сч].КоличествоВозвращено = НайТов[Сч].Количество;
				НайТов[Сч].Недовложение = 0;
				ДокЗакрытие.ПодсчетНовойСуммы(НайТов[Сч]);
			КонецЦикла;	
			
			Тек.Показатель1 = 0;
			Тек.Показатель2 = 0;
			Тек.Показатель3 = 0;
			Тек.Показатель4 = 0;
			Тек.Показатель5 = 0;
			Тек.Показатель6 = 0;
					
		КонецЦикла;
		
		//CeHbKA #3781 16.04.2020
		ДокЗакрытие.ЗаполнитьКомпонентыРасчета();
		//CeHbKA #3781 16.04.2020
		
		ДокЗакрытие.ОбновитьСуммыПоСтрокам();	
		ДокЗакрытие.ОбновитьПринятуюСумму();
		ДокЗакрытие.Записать(РежимЗаписиДокумента.Запись);
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.Регламент_ЗакрытиеЗаказов);
		
		Если Мас.Количество() > 0 Тогда
			
			lem.ОтправитьСообщение(Мас, "Ошибка автоматического создания документа закрытия", "Не удалось создать документ закрытие заказов по ОТКЛОНЕННЫМ." + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
				
		КонецЕсли;
				
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка   
		ДокЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		pkv.ДобавитьВСписокОтложенногоПроведения(ДокЗакрытие.Ссылка, "Не удалось провести автоматическое закрытие заказов " + ДокЗакрытие.Ссылка + " (По отклоненным)" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
		
		Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.Регламент_ЗакрытиеЗаказов);
		
		Если Мас.Количество() > 0 Тогда	
			
			lem.ОтправитьСообщение(Мас, "Ошибка проведения автоматического закрытия", "Не удалось провести автоматическое закрытие заказов по ОТКЛОНЕННЫМ (" + ДокЗакрытие.Ссылка + ")" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
			
		КонецЕсли;
		
		Возврат ДокЗакрытие.Ссылка;
	КонецПопытки;

	Возврат ДокЗакрытие.Ссылка;	

КонецФункции		

Процедура ДобавитьВСписокОтложенногоПроведения(ДокСсылка, ТекстОшибки = Неопределено, Проведен = Ложь, НеМожетБытьПроведен = Ложь) Экспорт
			
	УстановитьПривилегированныйРежим(Истина);
	
	
	ТекВр = ТекущаяДата();
	
	Набор = РегистрыСведений.ДокументыКОтложенномуПроведению.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(ДокСсылка);
	Набор.Отбор.Период.Установить(ТекВр);
	Набор.Прочитать();
	
	НЗапись = Набор.Добавить();
	НЗапись.Период = ТекВр;
	НЗапись.Документ = ДокСсылка.Ссылка;
	НЗапись.Проведен = Проведен;
	НЗапись.НеМожетБытьПроведен = НеМожетБытьПроведен;
	Если ТекстОшибки <> Неопределено Тогда	
		НЗапись.Ошибка = ТекстОшибки;		
	КонецЕсли;
	
	Набор.Записать();
	
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ОтложенноеПроведениеРегламент() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДокументыКОтложенномуПроведениюСрезПоследних.Период КАК Период,
	                      |	ДокументыКОтложенномуПроведениюСрезПоследних.Документ КАК Документ,
	                      |	ДокументыКОтложенномуПроведениюСрезПоследних.Проведен КАК Проведен,
	                      |	ДокументыКОтложенномуПроведениюСрезПоследних.НеМожетБытьПроведен КАК НеМожетБытьПроведен
	                      |ИЗ
	                      |	РегистрСведений.ДокументыКОтложенномуПроведению.СрезПоследних(, ) КАК ДокументыКОтложенномуПроведениюСрезПоследних
	                      |ГДЕ
	                      |	ДокументыКОтложенномуПроведениюСрезПоследних.Документ.Проведен = ЛОЖЬ");
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		Если НЕ Рез.Проведен И НЕ Рез.НеМожетБытьПроведен Тогда
			Попытка
				ДокОбъект = Рез.Документ.ПолучитьОбъект();	
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				pkv.ДобавитьВСписокОтложенногоПроведения(ДокОбъект.Ссылка, , Истина);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				
				Зап = Новый Запрос("ВЫБРАТЬ
				                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыКОтложенномуПроведению.Период) КАК Количество
				                      |ИЗ
				                      |	РегистрСведений.ДокументыКОтложенномуПроведению КАК ДокументыКОтложенномуПроведению
				                      |ГДЕ
				                      |	ДокументыКОтложенномуПроведению.Документ = &Документ
				                      |	И ДокументыКОтложенномуПроведению.Проведен = ЛОЖЬ
				                      |	И ДокументыКОтложенномуПроведению.НеМожетБытьПроведен = ЛОЖЬ");
				Зап.УстановитьПараметр("Документ", Рез.Документ);	
				Результат = Зап.Выполнить().Выбрать();			
				
				Если Результат.Следующий() И Результат.Количество >= 4 Тогда										
					pkv.ДобавитьВСписокОтложенногоПроведения(Рез.Документ, ТекстОшибки, , Истина);	
				Иначе
					pkv.ДобавитьВСписокОтложенногоПроведения(Рез.Документ, ТекстОшибки);	
				КонецЕсли;					
	
			КонецПопытки;
	    КонецЕсли;
	КонецЦикла;	
	
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры