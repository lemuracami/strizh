
// Якурнов 16.08.2018 17:37:12
//Пока не подключать!!! Это основная функция и она еще сырая
Функция ЗагрузитьДанныеИзФайлаExcelПоШаблону(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено) Экспорт
	
	Перем ИтВес, Таб2;
	
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	ТабДок = Новый ТабличныйДокумент;	
	Попытка
		ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	ТабЗаказов.Колонки.Добавить("ШтрихкодЗаказа");//Добавляем
	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	ТабЗаказов.Колонки.Добавить("ВесОбщий");
	ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("КоличествоМест");
	ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Штрихкод");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("Количество");
	ТабЗаказов.Колонки.Добавить("ЦенаТовара");
	ТабЗаказов.Колонки.Добавить("НДСТовара");//Добавляем
	ТабЗаказов.Колонки.Добавить("РегионДоставки");//Добавляем
	ТабЗаказов.Колонки.Добавить("Адрес");
	ТабЗаказов.Колонки.Добавить("ФИО");
	ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	ТабЗаказов.Колонки.Добавить("Email");//Добавляем
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставкиС");//Добавляем
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставкиПО");//Добавляем
	ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	
	ПослНомер = "";
	
	ПроливаемыеПоля = Новый Соответствие;
	
	//Заполняем ТабЗаказов из Данных Файла
	//
	
	ПараметрыКонтрагента = ПолучитьПараметрыПодключенияКонтрагента(Контрагент,ТекущаяДата());
	
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Нов = ТабЗаказов.Добавить();
		Для СчКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				НайКолонка = Шаблон.Поля.Найти(СчКолонок, "Порядок");                               			
			Иначе
				НайКолонка = Шаблон.Поля.Найти(ТабДок.Область("R" + Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст, "Наименование");                               			
			КонецеСли;	
			
			
			Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
			Если НайКолонка = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			
			Нов[НайКолонка.Поле.Наименование] = Значение;
			
			Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
				НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
				Если НайденноеСоответствие <> Неопределено Тогда
					Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
				КонецеСли;	
			КонецеСли;	
			
			
			//Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
			//	Если ЗначениеЗаполнено(Значение) Тогда
			//		ПослНомер = Значение;
			//	ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
			//		Нов[НайКолонка.Поле.Наименование] = ПослНомер;
			//	КонецеСли;	
			//ИначеЕсли НайКолонка.ПроливатьЗначенияНаНеЗаполненныеЗначения Тогда
			//	Если ЗначениеЗаполнено(Значение) Тогда
			//		ПроливаемыеПоля.Вставить(НайКолонка.Поле.Наименование, Значение);
			//	ИначеЕсли ЗначениеЗаполнено(ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование)) Тогда
			//		Если НайКолонка.Поле.Наименование = "ИнтервалДоставки" ИЛИ НайКолонка.Поле.Наименование = "Отд"  Тогда
			//			Нов[НайКолонка.Поле.Наименование] = ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование);
			//		Иначе
			//			//Если ЗначениеЗаполнено(ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование]) Тогда
			//			Если ТабЗаказов[ТабЗаказов.Индекс(Нов)].НомерЗаказа = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1].НомерЗаказа Тогда 
			//				Нов[НайКолонка.Поле.Наименование]  = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование];     
			//			КонецЕсли;
			//			//КонецеСли;
			//		КонецЕсли;
			//	КонецеСли;					
			//КонецеСли;	
		КонецЦикла;	
	КонецЦикла;
	//<< Заполняем ТабЗаказов из Данных Файла
	
	//Серегин М.В. 20.05.2015 18:09:12 
	Для каждого Стр Из ТабЗаказов Цикл
		АртикулУслуги = СтрЗаменить(Стр.Артикул,Символ(160),"");
		НомерЗаказа = СтрЗаменить(Стр.НомерЗаказа,Символ(160),"");
		Если ЗначениеЗаполнено(АртикулУслуги) Тогда 
			НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул",АртикулУслуги);
			Если ЗначениеЗаполнено(НайденаяУслуга) И НЕ НайденаяУслуга.ПометкаУдаления Тогда
				НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(НомерЗаказа); 
				НаборЗаписей.Отбор.Услуга.Установить(НайденаяУслуга);  
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
				Запись = НаборЗаписей.Добавить();
				Запись.Период = ТекущаяДата();
				Запись.НомерВнешнегоЗаказа = НомерЗаказа;
				Запись.Услуга = НайденаяУслуга;
				Запись.Контрагент = Контрагент;
				Запись.Стоимость = Стр.СтоимостьТовара;
				Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзПочты;
				НаборЗаписей.Записать();
				//ТабЗаказов.Удалить(Стр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	//Серегин М.В. 20.05.2015 18:09:14 
	
	// таблица собрана
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	ТекНом = "-";
	КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Контрагент.Код),"_");
	КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
	
	ТабОшибок = Новый ТаблицаЗначений;
	ТабОшибок.Колонки.Добавить("Номер");
	ТабОшибок.Колонки.Добавить("Ошибка");
	ТабОшибок.Колонки.Добавить("Кол");
	
	ТабЗагруженных = Новый ТаблицаЗначений;
	ТабЗагруженных.Колонки.Добавить("Номер");
	ТабЗагруженных.Колонки.Добавить("НомерНаш");
	
	ЗаказНеЗагружаем = "";
	
	
	ТабСум = ТабЗаказов.Скопировать();
	ТабСум.Колонки.добавить("Сумма");
	Для Каждого Тек Из ТабСум Цикл
		Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
		Попытка
			Тек.Сумма = Тек.Количество * Тек.ЦенаТовара;
		Исключение
			Тек.Сумма = 0;
		КонецПопытки;	
	КонецЦикла;	
	
	ТабСум.Свернуть("НомерЗаказа", "Сумма");
	
	//Серегин М.В. 10.07.2015 17:44:11 новый костыль )))
	ТабЗаказов.Колонки.Добавить("Дубль");
	Для Каждого Тек Из ТабЗаказов Цикл  
		Если Шаблон.БезДублей Тогда //делаем проверку на наличие заказа в админке по внешнему номеру 
			//Серегин М.В. 10.07.2015 18:24:45 
			
			// Якурнов 28.08.2018 17:00:51
			Если НЕ ЗначениеЗаполнено(Тек.НомерЗаказа) Тогда
				Тек.Дубль = Истина;
				Продолжить;
			КонецЕсли;
			
			Рез = mas.ВнешнийНомерЕстьВАдминке(СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")), Контрагент.Код);
			Если Рез Тогда
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				Тек.Дубль = Истина;
			Иначе
				Тек.Дубль = Ложь;
			КонецЕсли;
		Иначе
			Тек.Дубль = Ложь;
		КонецЕсли;
	КонецЦикла;
	//Серегин М.В. 10.07.2015 17:44:18 
	
	
	Для Каждого Тек Из ТабЗаказов Цикл  
		//Серегин М.В. 10.07.2015 18:24:42 продолжение костыля делаем проверку на наличие заказа в админке по внешнему номеру 
		Если Тек.Дубль Тогда
			Продолжить;   
		КонецЕсли;
		//Серегин М.В. 10.07.2015 18:24:45 
		
		Если НЕ ЗначениеЗаполнено(Тек.ТелефонМобильный) ТОГДА 
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = "Нет номера телефона";
		КонецЕсли;
		
		Попытка
			Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
		Исключение
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		//+Степанов
		Если СтрНайти(Тек.НомерЗаказа," ") <> 0 Тогда
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = "Номер заказа содержит пробелы. Заказ создан не будет.";
			Продолжить;	
		КонецЕсли;	
		//-Степанов		
		
		Если СокрЛП(Тек.НомерЗаказа) = ЗаказНеЗагружаем Тогда
			Продолжить;
		КонецеСли;	
		СтрокаБезОшибок = ПроверитьСтрокуНаЗаполненность(Тек, Шаблон);
		Игнорировать = ПроверитьСтрокуНаИгнорирование(Тек, Шаблон);
		Если Игнорировать Тогда
			Продолжить;
		КонецеСли;	
		
		Если СтрокаБезОшибок <> Истина Тогда
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = СтрокаБезОшибок;
			ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			Продолжить;
		КонецеСли;	
		Попытка

			//НомерЗаказа (заполняем поле: 01) выше 
			//ШтрихкодЗаказа (заполняем поле: 02)    Добавляем
			//ДатаДоставки (заполняем поле: 03)
			Если ТипЗнч(Тек.ДатаДоставки) = Тип("Строка") Тогда	
				ДатаДоставки_Д = Неопределено;
				Попытка				
					ДатаДоставки_Д = Дата(Тек.ДатаДоставки);	
				Исключение	
				КонецПопытки;		
				
				Если ТипЗнч(ДатаДоставки_Д) = Тип("Дата") Тогда			
					Тек.ДатаДоставки = ДатаДоставки_Д;					
				Иначе
					Тек.ДатаДоставки = ИзСтрокиВДату(Тек.ДатаДоставки);
				КонецЕсли;			
			КонецеСли;

			
			Если Не ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
				Тек.ДатаДоставки = ТекущаяДата() + 86400;
			КонецеСли;
			
			//Тек.ДатаДоставки = Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь);
			
			//ТипОплатыEnter (заполняем поле: 04) ниже 
			//ВесОбщий (заполняем поле: 05)
			Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
				Тек.ВесОбщий = 0;
			Иначе
				Тек.ВесОбщий = Формат(Число(Тек.ВесОбщий), "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕСли;
			
			Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
				Тек.ВесОбщий = 50;
			КонецеСли;
			
			//ОбъемОбщий (заполняем поле: 06)
			Если ЗначениеЗаполнено(Тек.ОбъемОбщий) Тогда
				Если ТипЗнч(Тек.ОбъемОбщий) = Тип("Строка") Тогда
					Тек.ОбъемОбщий = СтрЗаменить(Тек.ОбъемОбщий, " ", "");
					Тек.ОбъемОбщий = Число(Тек.ОбъемОбщий);
					Тек.ОбъемОбщий = Формат(Тек.ОбъемОбщий, "ЧРД=.; ЧН=0; ЧГ=");
				КонецеСли;	
			КонецеСли;

			//СтоимостьТовара (заполняем поле: 07)
			Если ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
				Если ТипЗнч(Тек.СтоимостьТовара) = Тип("Строка") Тогда
					Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, " ", "");
					Тек.СтоимостьТовара = Число(Тек.СтоимостьТовара);
					Тек.СтоимостьТовара = Формат(Тек.СтоимостьТовара, "ЧРД=.; ЧН=0; ЧГ=");
				КонецеСли;	
			КонецеСли;	
			
			//КоличествоМест (заполняем поле: 08)
			Если ЗначениеЗаполнено(Тек.КоличествоМест) Тогда
				Если ТипЗнч(Тек.КоличествоМест) = Тип("Строка") Тогда
					Тек.КоличествоМест = СтрЗаменить(Тек.КоличествоМест, " ", "");
					Тек.КоличествоМест = Число(Тек.КоличествоМест);
					Тек.КоличествоМест = Формат(Тек.КоличествоМест, "ЧРД=.; ЧН=0; ЧГ=");
				КонецеСли;	
			КонецеСли;	

			
			//СтоимостьДоставки (заполняем поле: 09)
			Если Не ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
				Тек.СтоимостьДоставки = 0;
			Иначе
				Тек.СтоимостьДоставки = Формат(Окр(Число(Тек.СтоимостьДоставки)), "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕСли;	
			
			//Артикул (заполняем поле: 10) 
			//Штрихкод (заполняем поле: 11)
			Тек.Штрихкод = СокрЛП(Тек.Штрихкод);
			
			//НаименованиеТовара (заполняем поле: 12) ниже
			//Количество (заполняем поле: 13)
			Тек.Количество = Формат(Число(Тек.Количество), "ЧРД=.; ЧН=0; ЧГ=");
			
			//ЦенаТовара (заполняем поле: 14)
			Если ЗначениеЗаполнено(Тек.ЦенаТовара) Тогда
				Если ТипЗнч(Тек.ЦенаТовара) = Тип("Строка") Тогда
					Тек.ЦенаТовара = СтрЗаменить(Тек.ЦенаТовара, " ", "");
					Тек.ЦенаТовара = Число(Тек.ЦенаТовара);
					Тек.ЦенаТовара = Формат(Тек.ЦенаТовара, "ЧРД=.; ЧН=0; ЧГ=");
				КонецеСли;	
			КонецеСли;
			
			//НДСТовара (заполняем поле: 15) Добавляем
			Если НЕ ЗначениеЗаполнено(Тек.НДСТовара) Тогда		
				Тек.НДСТовара = 20;			
			Иначе
				Попытка
					Тек.НДСТовара = Число(Тек.НДСТовара);	
				Исключение
					Тек.НДСТовара = 20;			
	    		КонецПопытки;
			КонецЕсли;

			//РегионДоставки (заполняем поле: 16) Добавляем
			РегионДоставки = 1;
			Если ЗначениеЗаполнено(Тек.РегионДоставки) Тогда
				Если ВРег(СокрЛП(Тек.РегионДоставки)) = "СПБ" Тогда
					РегионДоставки = 2;
				КонецеСли;	
			КонецеСли;
			
			//Адрес (заполняем поле: 17) ниже
			//ФИО (заполняем поле: 18)
			//ТелефонМобильный (заполняем поле: 19)
			Попытка
				//Тек.ТелефонМобильный = Формат(Число(Тек.ТелефонМобильный), "ЧГ=");
				Тек.ТелефонМобильный = СокрЛП(СтрЗаменить(Тек.ТелефонМобильный," ",""));
				Тек.ТелефонМобильный = СокрЛП(СтрЗаменить(Тек.ТелефонМобильный,Символы.НПП,""));
			Исключение
				
			КонецПопытки;

			//Email (заполняем поле: 20) Добавляем
			Тек.Email = СокрЛП(Тек.Email);
			//ИнтервалДоставкиС (заполняем поле: 21) ниже
			//ИнтервалДоставкиПО (заполняем поле: 22) ниже
			//КомментарийКлиента (заполняем поле: 23)
			Тек.КомментарийКлиента = СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''");
			

		    //>>>>>>>>>>>>>>>>>>>>>Непонятный код 
			//Если Не ЗначениеЗаполнено(Тек.ОбщаяЦена) Тогда
			//	Тек.СтоимостьТовара = 0;
			//Иначе
			//	Тек.СтоимостьТовара = Формат(Окр(Число(Тек.ОбщаяЦена/Тек.Количество)), "ЧРД=.; ЧН=0; ЧГ=");
			//КонецеСли;
			//
			//Если Не ЗначениеЗаполнено(Тек.Итого) Тогда
			//	Тек.Итого = 0;
			//Иначе	
			//	Тек.Итого = Формат(Окр(Число(Тек.Итого)), "ЧРД=.; ЧН=0; ЧГ=");
			//КонецеСли;
			//
			//Попытка
			//	Тек.КодТовара = Формат(Число(Тек.КодТовара), "ЧГ=");
			//Исключение
				
			//КонецПопытки;
		    //<<<<<<<<<<<<<<<<<<<<<<<Непонятный код 			
			
			#Область ДобавлениеЗаказаВАдминку
			Если ТекНом <> Тек.НомерЗаказа Тогда
				// создаём новый заказ
				
				ТекНом = Тек.НомерЗаказа;
				//ИтВес= 0;
				
				//ИнтервалДоставкиС (заполняем поле: 21)
				ВремяС  = СокрЛП(Тек.ИнтервалДоставкиС);
				//ИнтервалДоставкиПО (заполняем поле: 22)
				ВремяПо = СокрЛП(Тек.ИнтервалДоставкиПо);
				
				//ТипОплатыEnter (заполняем поле: 04) 
				Если ЗначениеЗаполнено(Тек.ТипОплатыEnter) Тогда
					Тек.ТипОплатыEnter = СокрЛП(Тек.ТипОплатыEnter);
					Если Найти(НРег(Тек.ТипОплатыEnter), "оплачено в магазине") <> 0 Тогда	
						ТипОплаты = "7";
					ИначеЕсли Найти(НРег(Тек.ТипОплатыEnter), "оплата при доставке")  <> 0 Тогда
						ТипОплаты = "1";
					ИначеЕсли Найти(НРег(Тек.ТипОплатыEnter), "безналичный расчет") <> 0 Тогда	
						ТипОплаты = "4";
					ИначеЕсли Найти(НРег(Тек.ТипОплатыEnter), "оплата по терминалу") <> 0 Тогда	
						ТипОплаты = "5"
						
						
					Иначе
						НовОш = ТабОшибок.Добавить();
						НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
						НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
						ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
						Продолжить;
					КонецеСли;
				Иначе
					НайИт = ТабСум.Найти(ТекНом);
					Если НайИт <> Неопределено Тогда
						Если ЗначениеЗаполнено(НайИт.Сумма) Тогда
							ТипОплаты = "1";
						Иначе
							ТипОплаты = "7";
						КонецеСли;	
					Иначе	
						ТипОплаты = "1";
					КонецеСли;	
				конецЕсли;
				
				СТелефонМобильный = СокрЛП(Тек.ТелефонМобильный);
			    //Адрес (заполняем поле: 17)
				САдрес            = СокрЛП(Тек.Адрес);
				СКодКонтр         = СокрЛП(КодКонтр);
				
				//>>>>>>>>> Заносим данные Пользователя в Админку
				НаборПользователь = евген.ЗапросКИнтернетМагазину("declare @tmp table (userid int, userAddressID int)
				|insert into @tmp
				|exec dbo.pb_UpdateUser null, '" 
				+ Тек.ФИО + "', null, null, '" 
				+ СТелефонМобильный + "', '" 
				+ "" + "','" 
				+ САдрес + "', null," 
				+ СКодКонтр + ", null, null, null, null, null, null, null, null, null, null, null, null, null, null,'" 
				+ ПараметрыСеанса.ТекущийПользователь + "', null,'"
				+ Тек.Email+ "'
				| select * from @tmp", Соединение);
				//<<<<<<<<<<
				
				Таб1 = Евген.СоздатьТаблицу(НаборПользователь, "userid_Ч, userAddressID_Ч");
				UserId = Формат(Таб1[0].userid_Ч, "ЧГ=");
				userAddressID = Формат(Таб1[0].userAddressID_Ч, "ЧГ=");
				
				СеттингИд = "0";
				ФВесОбщий = Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=");
				
				//>>>>>>>>> Заносим данные по Весу контрагента в Админку
				Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + СеттингИд + ",0," + ФВесОбщий + ",0,0,1,1)";
				//<<<<<<<<<<
				
				R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
				ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч");
				
				ДДатаДоставки        = Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь);
				ФСтоимостьДоставки   = Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=");
				СКомментарийКлиента  = СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "");
				
				//ФВремяС              = Формат(ВремяС, "ДФ=ЧЧ:мм");
				//ФВремяПо             = Формат(ВремяПо, "ДФ=ЧЧ:мм");
				ФВремяС              = ВремяС;
				ФВремяПо             = ВремяПо;
				СТабК                = Строка(ТабК[0].tariffCategoryId_Ч);
				СНомерЗаказа         = СокрЛП(Тек.НомерЗаказа);
				ФКоличествоМест   	 = Формат(Тек.КоличествоМест, "ЧРД=.; ЧН=0; ЧГ=");
				
				
				//>>>>>>>>> Заносим общие данные по заказу в Админку
				НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " 
				+ UserId + "," 
				+ userAddressID + ",'" 
				+ ДДатаДоставки + "'," 
				+ ФСтоимостьДоставки + ",2,'" 
				+ СКомментарийКлиента+ "',null,null,'" 
				+ ФВремяС + "','" 
				+ ФВремяПо + "','"  
				+ ПараметрыСеанса.ТекущийПользователь + "'," 
				+ ТипОплаты + ",'" 
				+ Тек.ТелефонМобильный + "', '" 
				+ "-" + "'," 
				+ СТабК	+ "," 
				+ СеттингИд + ", '" 
				+ СНомерЗаказа + "', 0, 0,"
				+ ФКоличествоМест + "," 
				+ ФВесОбщий + ",0,6,null,null,null,null," 
				+ Тек.СтоимостьТовара+","
				+ Тек.ОбъемОбщий
				+ " select * from @tmp", Соединение);			
				//<<<<<<<<<<
				
				Таб2 = Евген.СоздатьТаблицу(НаборЗаказ, "Orderid_Ч");
				
				// Якурнов 21.08.2018 16:59:52
				// Перенесено из начала проверки Т.к ВесЗаказа берем из первой строки заказа
				Если ТекНом <> ЗаказНеЗагружаем Тогда
					
					ФИтВес = Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=");
					
					Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + ФИтВес + ",0,0,1,1)";
					R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
					
					ФТабК = Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=");
					ФТаб2 = Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=");
					
					Стр = "EXEC import_setOrderWeigth " + ФТаб2  + ", " + ФИтВес + ", " + Строка(1) + ", " + Строка(5) + ", " + ФТабК + ", " + ФТабК + ", " + Строка(5); 
					Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					
					Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
						НовЗагр = ТабЗагруженных.Добавить();
						НовЗагр.Номер = ТекНом;
						НовЗагр.НомерНаш = ФТаб2;
					КонецеСли;
					
					// Якурнов 28.08.2018 14:09:59
					РегионОтправки = 1;
					ДДатаДоставки        = Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь);
					ДДатаОтгрузки        = Евген.ДатаВSQL(Тек.ДатаДоставки - 24*60*60, Ложь);

					//>>>>>>>>> Заносим общие данные по Терминалу в Админку
					СтрРТ = "EXEC sp_saveTerminalOrder " 
    				+ "@orderId = "+ ФТаб2 + ", " 
    				+ "@sourcePlaceId = "+ РегионОтправки + ", " 
    				+ "@deliveryPlaceId = "+ РегионДоставки + ", "
    				+ "@isPartialGiveoutDisabled = null, "
    				+ "@desiredDeliveryDate = '"+ ДДатаДоставки + "', "
    				+ "@shipmentWHDate = '"+ ДДатаОтгрузки + "'"; 
					Евген.ЗапросКИнтернетМагазину(СтрРТ, Соединение);
					//<<<<<<<<<<
					
				КонецеСли;	
			КонецеСли;
			#КонецОбласти
			
			#Область ДобавлениеСтрокиЗаказаВАдминку
			//НаименованиеТовара (заполняем поле: 12)
			СНаименованиеТовара = СтрЗаменить(Тек.НаименованиеТовара, "'", "");
			ФТаб2OrderId_Ч      = Формат(Таб2[0].OrderId_Ч, "ЧГ="); 
			ФКоличество         = Формат(Тек.Количество, "ЧРД=.; ЧН=0; ЧГ=");
			ФЦенаТовара       	= Формат(Тек.ЦенаТовара, "ЧРД=.; ЧН=0; ЧГ=");
			ФВесЕдиницыТовара   = Формат(0, "ЧРД=.; ЧН=0; ЧГ="); //Задача № 2796
			//= Формат(Окр(Тек.ВесОбщий/Тек.Количество, 3), "ЧРД=.; ЧН=0; ЧГ=");
			
			//>>>>>>>>> Заносим общие данные по заказу уже по номенклатуре(построчно) в Админку
			евген.ЗапросКИнтернетМагазину("                                                                                                                                                                                                                       
			|exec dbo.pb_AddItemToOrder " + ФТаб2OrderId_Ч + ",'" 
			+ СНаименованиеТовара + "','" 
			+ Тек.Артикул + "'," 
			+ ФКоличество + ",0," 
			+ ФЦенаТовара + ",'" 
			+ "" + "'," 
			+ ФВесЕдиницыТовара	+ ",0,0,0,0,null,null,null,null," 
			+ Тек.НДСТовара + ",'"
			+ Тек.Штрихкод  + "'", Соединение);
			//<<<<<<<<<<
			
			//// Якурнов 21.08.2018 11:16:00
			////>>>>>>>>> Заносим ШтрихкодЗаказа в Админку
			//Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_765") Тогда
			//	login = "ecco2018";
			//	//login = "12345678";
			//	СтрШК = СтрЗаменить(Тек.ШтрихкодЗаказа, " ", "");
			//	СтрШК = СтрЗаменить(СтрШК, Символы.НПП, "");
			//	СтрШК = "insert into @tmp VALUES (1,'" + СтрШК + "')";
			//	РезЗапр = евген.ЗапросКИнтернетМагазину("declare @tmp [dbo].[TPieceBarcode] " + СтрШК + " exec dbo.service_setOrderBarcodes
			//	|	@orderId	= " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=") + "
			//	|	,@login			= '" + login + "'   
			//	|	,@orderBarcodes	= @tmp", Соединение);
			//	Сообщить(Строка(РезЗапр));
			//КонецЕсли;
			////<<<<<<<<<<
			
			// Дробница Задача 2796
			Если Не СокрЛП(ПараметрыКонтрагента.login_Strizh) = "" Тогда
				
				login = СокрЛП(ПараметрыКонтрагента.login_Strizh);
				СтрШК = СтрЗаменить(Тек.ШтрихкодЗаказа, " ", "");
				СтрШК = СтрЗаменить(СтрШК, Символы.НПП, "");
				СтрШК = "insert into @tmp VALUES (1,'" + СтрШК + "')";
				РезЗапр = евген.ЗапросКИнтернетМагазину("declare @tmp [dbo].[TPieceBarcode] " + СтрШК + " exec dbo.service_setOrderBarcodes
				|	@orderId	= " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=") + "
				|	,@login			= '" + login + "'   
				|	,@orderBarcodes	= @tmp", Соединение);
				Сообщить(Строка(РезЗапр));	
			Иначе
				Сообщить("Не установлен штрихкод заказа " + СокрЛП(Тек.ШтрихкодЗаказа) + " " + СокрЛП(Контрагент) + "! Нет логина подключения.");
			КонецЕсли;	
			// Дробница Задача 2796
			
			#КонецОбласти
			
		Исключение
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = ОписаниеОшибки();
			ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьДанныеИзФайлаExcelПоШаблону_LOREALB2B(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено) Экспорт
	
	Перем ИтВес, Таб2;
	
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	ТабДок = Новый ТабличныйДокумент;
	
	////Попытка
	////    ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	////Исключение
	////    Возврат Ложь;
	////КонецПопытки;
	
	
	Если Не lem.ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	ТабЗаказов.Колонки.Добавить("Адрес");
	ТабЗаказов.Колонки.Добавить("ВесОбщий");
	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
	ТабЗаказов.Колонки.Добавить("Итого");
	ТабЗаказов.Колонки.Добавить("КодТовара");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Количество");
	ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("Район");
	ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	ТабЗаказов.Колонки.Добавить("ТелефонГородской");
	ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	ТабЗаказов.Колонки.Добавить("ФИО");
	ТабЗаказов.Колонки.Добавить("Штрихкод");
	ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("УлицаДоставки");
	ТабЗаказов.Колонки.Добавить("ГородДоставки");
	ТабЗаказов.Колонки.Добавить("КатегорияДоставки");
	ТабЗаказов.Колонки.Добавить("КоличествоМест");
	
	
	ПослНомер = "";
	
	ПроливаемыеПоля = Новый Соответствие;
	
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Нов = ТабЗаказов.Добавить();
		МаксКол = Мин(ТабДок.ШиринаТаблицы, 300);
		Для СчКолонок = 1 По МаксКол Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				НайКолонка = Шаблон.Поля.Найти(СчКолонок, "Порядок");                               			
			Иначе
				НайКолонка = Шаблон.Поля.Найти(ТабДок.Область("R" + Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст, "Наименование");                               			
			КонецеСли;	
			
			
			Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
			Если НайКолонка = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			
			Нов[НайКолонка.Поле.Наименование] = Значение;
			
			Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
				НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
				Если НайденноеСоответствие <> Неопределено Тогда
					Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
				КонецеСли;	
			КонецеСли;	
			
			
			Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПослНомер = Значение;
				ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
					Нов[НайКолонка.Поле.Наименование] = ПослНомер;
				КонецеСли;	
            ИначеЕсли НайКолонка.ПроливатьЗначенияНаНеЗаполненныеЗначения Тогда
                Если ЗначениеЗаполнено(Значение) Тогда
                    ПроливаемыеПоля.Вставить(НайКолонка.Поле.Наименование, Значение);
                ИначеЕсли ЗначениеЗаполнено(ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование)) Тогда
                    Если НайКолонка.Поле.Наименование = "ИнтервалДоставки" ИЛИ НайКолонка.Поле.Наименование = "Отд"  Тогда
                        Нов[НайКолонка.Поле.Наименование] = ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование);
                    Иначе
                        //Если ЗначениеЗаполнено(ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование]) Тогда
                        Если ТабЗаказов[ТабЗаказов.Индекс(Нов)].НомерЗаказа = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1].НомерЗаказа Тогда 
                            Нов[НайКолонка.Поле.Наименование]  = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование];     
                        КонецЕсли;
                        //КонецеСли;
                    КонецЕсли;
                КонецеСли;					
            КонецеСли;	
        КонецЦикла;	
    КонецЦикла;
	
	
	Для каждого Стр Из ТабЗаказов Цикл
		
		Стр.СтоимостьДоставки = 0;
		
		Если ЗначениеЗаполнено(Стр.ДатаДоставки) Тогда
		
	        АртикулУслуги = СтрЗаменить(Стр.КодТовара,Символ(160),"");
	        НомерЗаказа = СтрЗаменить(Стр.НомерЗаказа,Символ(160),"");
			НомерЗаказа = СтрЗаменить(НомерЗаказа, Символы.НПП, "");
			Стр.КодТовара = "LOREAL_12344321";
			Стр.Артикул = "LOREAL_12344321";
			Стр.НаименованиеТовара = "Товарное вложение";
			Стр.СтоимостьТовара = Число(СтрЗаменить(Стр.Итого, " ", "")) - Число(СтрЗаменить(Стр.СтоимостьДоставки, " ", ""));
			Стр.СтоимостьДоставки = Число(СтрЗаменить(Стр.СтоимостьДоставки, " ", ""));
			Стр.Итого = Число(СтрЗаменить(Стр.Итого, " ", ""));
			//Стр.ИнтервалДоставки = Формат(Стр.ИнтервалДоставки, "ДФ=HH:mm:ss");
			
	        Если ЗначениеЗаполнено(АртикулУслуги) Тогда 
	            НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул",АртикулУслуги);
	            Если ЗначениеЗаполнено(НайденаяУслуга) И НЕ НайденаяУслуга.ПометкаУдаления Тогда
	                НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
	                НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(НомерЗаказа); 
	                НаборЗаписей.Отбор.Услуга.Установить(НайденаяУслуга);  
	                НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	                НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
	                Запись = НаборЗаписей.Добавить();
	                Запись.Период = ТекущаяДата();
	                Запись.НомерВнешнегоЗаказа = НомерЗаказа;
	                Запись.Услуга = НайденаяУслуга;
	                Запись.Контрагент = Контрагент;
	                Запись.Стоимость = Стр.ОбщаяЦена;
	                Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзПочты;
	                НаборЗаписей.Записать();
	                //ТабЗаказов.Удалить(Стр);
	            КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
		
    КонецЦикла; 
	
	
	
	// таблица собрана
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	ТекНом = "-";
	КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Контрагент.Код),"_");
	КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
	
	ТабОшибок = Новый ТаблицаЗначений;
	ТабОшибок.Колонки.Добавить("Номер");
	ТабОшибок.Колонки.Добавить("Ошибка");
	ТабОшибок.Колонки.Добавить("Кол");
	
	ТабЗагруженных = Новый ТаблицаЗначений;
	ТабЗагруженных.Колонки.Добавить("Номер");
	ТабЗагруженных.Колонки.Добавить("НомерНаш");
	
	ЗаказНеЗагружаем = "";
	
	
	ТабСум = ТабЗаказов.Скопировать();
	ТабСум.Колонки.добавить("Сумма");
	Для Каждого Тек Из ТабСум Цикл
		
		Тек.Сумма = Тек.СтоимостьТовара;
		//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");
		//Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
		//Попытка		
		//	Тек.Сумма = Число(Тек.Количество) * Число(Тек.СтоимостьТовара);       
		//Исключение
		//	Тек.Сумма = 0;
		//КонецПопытки;	
	КонецЦикла;	
	
	ТабСум.Свернуть("НомерЗаказа", "Сумма");
    
    ТабЗаказов.Колонки.Добавить("Дубль");
	Для Каждого Тек Из ТабЗаказов Цикл  
		
		Если ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
			
			Тек.ДатаДоставки = ИзСтрокиВДату(СтрЗаменить(Тек.ДатаДоставки, "/", "."));
		
	        Если Шаблон.БезДублей Тогда //делаем проверку на наличие заказа в админке по внешнему номеру 
				
				// -- новый код		
				Рез = mas.ВнешнийНомерЕстьВАдминке(СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")), Контрагент.Код);
				Если Рез Тогда
				    НовОш = ТабОшибок.Добавить();
				    НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				    НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
				    ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				    Тек.Дубль = Истина;
				Иначе
				    Тек.Дубль = Ложь;
				КонецЕсли;
				
				// -- старый код
				//Стр = "SELECT orderIDImport from _order WHERE orderIDImport =" +"'"+ СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""))+"'";
				//ТабДублей = smv.СформироватьТаблицуЗначенийИзДанныхSQL(Стр);
				//Если ТабДублей.Количество() >0 Тогда
				//    НовОш = ТабОшибок.Добавить();
				//    НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				//    НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
				//    ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				//    Тек.Дубль = Истина;
				//Иначе
				//    Тек.Дубль = Ложь;
				//КонецЕсли;
	        Иначе
	            Тек.Дубль = Ложь;
			КонецЕсли;
		КонецЕсли;
		
    КонецЦикла;
    
     
	
	СтоимостьДоставкиИтог = 0;

    
	Для Каждого Тек Из ТабЗаказов Цикл  
		
		Если ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
			
			СтрокаДоставки = Ложь;
			
	        Если Тек.Дубль Тогда
	            Продолжить;   
			КонецЕсли;
			
			// строка Итого
			НайИтог = СтрНайти(Тек.НомерЗаказа, "Итого");
			Если НайИтог > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			
			//строка с доставкой
			Если НЕ ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
				Продолжить;			
			КонецЕсли;
			
			
			Попытка
				Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
				//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");   //           !!!!!!!!!!!!!!!!!!!!!!!!
			Исключение
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = ОписаниеОшибки();
			КонецПопытки;
			
			Если СокрЛП(Тек.НомерЗаказа) = ЗаказНеЗагружаем Тогда
				Продолжить;
			КонецеСли;	
			
			СтрокаБезОшибок = ПроверитьСтрокуНаЗаполненность(Тек, Шаблон);
			Игнорировать = ПроверитьСтрокуНаИгнорирование(Тек, Шаблон);
			Если Игнорировать Тогда
				Продолжить;
			КонецеСли;	
			
			Если СтрокаБезОшибок <> Истина Тогда
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = СтрокаБезОшибок;
				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				Продолжить;
			КонецеСли;	
			
			
			Попытка
				
				Если ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
					Если ТипЗнч(Тек.СтоимостьТовара) = Тип("Строка") Тогда
						//Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, ",", ".");
						Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, " ", "");
						Тек.СтоимостьТовара = Число(Тек.СтоимостьТовара);
					КонецеСли;	
				КонецеСли;	
				
				//Если Не ЗначениеЗаполнено(Тек.Адрес) Тогда
				//	Тек.Адрес = "г " + Тек.ГородДоставки + ",ул " + Тек.УлицаДоставки;
				//Иначе
				//	Тек.Адрес = "";
				//КонецЕСли;	
				
				Тек.Адрес = "" + Тек.ГородДоставки + ", " + Тек.Адрес;
				
				
				Если Не ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
					Тек.СтоимостьДоставки = 0;
				Иначе
					Тек.СтоимостьДоставки = Формат(Окр(Число(Тек.СтоимостьДоставки)), "ЧРД=.; ЧН=0; ЧГ=");
				КонецЕСли;	
				
				//Если ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда		
				//	СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + Тек.СтоимостьДоставки;	
				//КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
					Тек.ВесОбщий = 0;
				Иначе
					Тек.ВесОбщий = Формат(Число(Тек.ВесОбщий), "ЧРД=.; ЧН=0; ЧГ=");
				КонецЕСли;	
				
				
				
				//Если Не ЗначениеЗаполнено(Тек.ОбщаяЦена) Тогда
				//	Тек.СтоимостьТовара = 0;
				//Иначе
				//	Тек.СтоимостьТовара = Формат(Окр(Число(Тек.ОбщаяЦена/Тек.Количество)), "ЧРД=.; ЧН=0; ЧГ=");
				//КонецеСли;
				
							
				Если Не ЗначениеЗаполнено(Тек.Итого) Тогда
					Тек.Итого = 0;
				Иначе	
					Попытка				
						Тек.Итого = Число(Тек.Итого);					
					Исключение			
					КонецПопытки;		
				КонецеСли;
				
				//Попытка
				//	Тек.КодТовара = Формат(Число("6666666"), "ЧГ=");
				//Исключение		
				//КонецПопытки;
				
				Попытка				
					Тек.КоличествоМест = Число(СокрЛП(Тек.КоличествоМест));			
				Исключение					
					Тек.КоличествоМест = "null";			
				КонецПопытки;
				
				
				Попытка
					Тек.ТелефонМобильный = Формат(Число(Тек.ТелефонМобильный), "ЧГ=");
				Исключение
					
				КонецПопытки;
				Попытка
					Тек.ТелефонГородской = Формат(Число(Тек.ТелефонГородской), "ЧГ=");
				Исключение
					
				КонецПопытки;	
				Если ЗначениеЗаполнено(Тек.ТелефонГородской) Тогда
					Тек.ТелефонМобильный = Тек.ТелефонМобильный + ";" + Тек.ТелефонГородской;
				КонецеСли;
				
				Если ТипЗнч(Тек.ДатаДоставки) = Тип("Строка") Тогда
					Тек.ДатаДоставки = ИзСтрокиВДату(СтрЗаменить(Тек.ДатаДоставки, "/", "."));
				КонецеСли;	
				
				Если Не ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
					Тек.ДатаДоставки = ТекущаяДата() + 86400;
				КонецеСли;	
				
				Попытка
					Тек.Количество = Формат(Число(Тек.Количество), "ЧРД=.; ЧН=0; ЧГ=");
				Исключение
					Тек.Количество = 1;			
				КонецПопытки;
				
				
				Если Не ЗначениеЗаполнено(Тек.ИнтервалДоставки) Тогда
					Тек.ИнтервалДоставки = "10-18";
				Иначе
					Если Лев(Тек.ИнтервалДоставки, 1) = "9" Тогда				
						Тек.ИнтервалДоставки = "09-18";						
					Иначе 
						ПериодС = Число(Лев(Тек.ИнтервалДоставки, 1)) + 12; 						
						Тек.ИнтервалДоставки = "" + ПериодС + "-24";					
					КонецЕсли;				
				КонецеСли;	
				
				
				Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
					Тек.ВесОбщий = 0;
				КонецеСли;	
			
					
				
				Если ТекНом <> Тек.НомерЗаказа Тогда
					// создаём новый заказ
					
					Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем И Таб2 <> Неопределено Тогда
						
						//фиксация выгрузки
						От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
						//фиксация выгрузки окончание
						
						Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
						R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
						ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
					                                                                                                                                                                      //ТабК[0].tariffCategoryId_Ч
						Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", null, " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
						Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
						
						Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
							НовЗагр = ТабЗагруженных.Добавить();
							НовЗагр.Номер = СтрЗаменить(ТекНом, Символы.НПП, "");
							НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
		
						КонецеСли;	
					КонецеСли;	
					
					ТекНом = Тек.НомерЗаказа;
					ИтВес = 0;
					
					
					//ВремяС = Лев(СокрЛП(ИнтД[0]), 2);                 //           !!!!!!!!!!!!!!!!!!!!!!!!				
					//ВремяС = Число(СтрЗаменить(ВремяС, "'", ""));    //           !!!!!!!!!!!!!!!!!!!!!!!!
					//ВремяПо = Число(Лев(СокрЛП(ИнтД[1]), 2));       //           !!!!!!!!!!!!!!!!!!!!!!!!				
					Интервал = СокрЛП(Тек.ИнтервалДоставки);
					Интервал = СтрЗаменить(Интервал, "С", "");
					Интервал = СтрЗаменить(Интервал, "с", "");
					Интервал = СтрЗаменить(Интервал, "До", "-");
					Интервал = СтрЗаменить(Интервал, "до", "-");
					Интервал = СтрЗаменить(Интервал, "ДО", "-");
					Интервал = СтрЗаменить(Интервал, " ", "");

					
					ИнтД = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Интервал,"-");
					
					Если ИнтД.Количество() Тогда				
						ВремяС = СокрЛП(ИнтД[0]);	
						Если ИнтД.Количество() > 1 Тогда		
							ВремяПо = СокрЛП(ИнтД[1]);						
						КонецЕсли;			
					КонецЕсли;			
					
					
					
					//НайИт = ТабСум.Найти(ТекНом);
					//Если НайИт <> Неопределено Тогда
					//	Если ЗначениеЗаполнено(НайИт.Сумма) Тогда
					//		ТипОплаты = "1";
					//	Иначе
					//		ТипОплаты = "7";
					//	КонецеСли;	
					//Иначе	
					//	ТипОплаты = "1";
					//КонецеСли;	
					
					// МАС - 10.07.2017 - №1310 --->> 
					Если Тек.СтоимостьДоставки + Тек.СтоимостьТовара = 0 Тогда			
						ТипОплаты = "7";					
					Иначе				
						ТипОплаты = "1";					
					КонецЕсли;	
					//ТипОплаты = "1";
					// <<--- МАС 
					
					
					// Тип оплаты
					//Если Найти(ВРег(Тек.ТипОплатыEnter), "ОНЛАЙН") <> 0 Тогда	
					//	ТипОплаты = "7";
					//ИначеЕсли Найти(ВРег(Тек.ТипОплатыEnter), "НАЛИЧНЫЕ") <> 0 Тогда
					//	ТипОплаты = "1";
					//Иначе
					//	НовОш = ТабОшибок.Добавить();
					//	НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
					//	НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
					//	Продолжить;
					//КонецеСли;	
					
					
					// Михушкин - 19.04.2017 --->> 	
					Попытка
						Тек.ФИО = СтрЗаменить(Тек.ФИО, "'", " ");	
					Исключение					
					КонецПопытки;
					// <<--- Михушкин 
					
					НаборПользователь = евген.ЗапросКИнтернетМагазину("declare @tmp table (userid int, userAddressID int)
					|insert into @tmp
					|exec dbo.pb_UpdateUser null, '" + Тек.ФИО + "', null, null, '" + СокрЛП(Тек.ТелефонМобильный) + "', '" + СокрЛП(Тек.ТелефонГородской) + "','" + СокрЛП(Тек.Адрес) + "', null," + Строка(КодКонтр) + ", null, null, null, null, null, null, null, null, null, null, null, null, null, null,'" + ПараметрыСеанса.ТекущийПользователь + "', null
					| select * from @tmp", Соединение);
					Таб1 = Евген.СоздатьТаблицу(НаборПользователь, "userid_Ч, userAddressID_Ч");
					UserId = Формат(Таб1[0].userid_Ч, "ЧГ=");
					userAddressID = Формат(Таб1[0].userAddressID_Ч, "ЧГ=");
					
					СеттингИд = "0";
					
					//НашНом = "";
					//Реал = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", СокрЛП(Тек.НомерЗаказа));
					//Если Не Реал.Пустая() Тогда
					//	НашНом = СокрЛП(Реал.Номер);
					//КонецеСли;	
					
					Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + СеттингИд + ",0," + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
					R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
	                
					
					//Стоимость доставки
					НайДоставка = ТабЗаказов.НайтиСтроки(Новый Структура("НомерЗаказа", Тек.НомерЗаказа));
					СтоимостьДоставкиИтог = 0;
					Для Каждого НайСтр Из НайДоставка Цикл		
						Если НЕ ЗначениеЗаполнено(НайСтр.СтоимостьТовара) И СтрНайти(НайСтр.НаименованиеТовара, "Доставка товара") И ЗначениеЗаполнено(НайСтр.СтоимостьДоставки) Тогда
							СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + НайСтр.СтоимостьДоставки;			
						КонецЕсли;	
					КонецЦикла;
					
					
	                
	                НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null,'" + Формат(ВремяС, "ЧН=0; ЧГ=") + "','" + Формат(ВремяПо, "ЧН=0; ЧГ=") + "','"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].weightCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")) + "', 0,0,"+ Тек.КоличествоМест +",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6," + Формат(Число(Тек.Итого), "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);	// + Формат(Число(Тек.СтоимостьТовара), "ЧРД=.; ЧН=0; ЧГ=")		
				
					//	НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder " + СокрЛП(НашНом) + ", " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);			
					
					Таб2 = Евген.СоздатьТаблицу(НаборЗаказ, "Orderid_Ч");
				
					СтоимостьДоставкиИтог = 0;
					
					
					
					// апдейтим ШК									
					//СтрШК = "";
					//МнСтрШК = СтрЗаменить(Тек.Штрихкод, ",", Символы.ПС);
					//Для н = 1 По СтрЧислоСтрок(МнСтрШК) Цикл
					//	СтрокаШК = СтрПолучитьСтроку(МнСтрШК, н);			
					//	СтрШК = СтрШК + "insert into @tmp VALUES ("+ н +",'" + СокрЛП(СтрЗаменить(ТекНом, Символы.НПП, "")) + "')";									
					//КонецЦикла;		
					
					СтрШК = "insert into @tmp VALUES (1,'" + СокрЛП(СтрЗаменить(ТекНом, Символы.НПП, "")) + "')";
					
					РезультатЗапроса = евген.ЗапросКИнтернетМагазину("declare @tmp [dbo].[TPieceBarcode] " + СтрШК + " exec dbo.service_setOrderBarcodes
									|	@orderId	= " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=") + "
									|	,@login			= 'loreal2'
									|	,@orderBarcodes	= @tmp", Соединение);

		
				КонецеСли;		
				
				//ВесТовара = Формат(Окр(Тек.ВесОбщий/Тек.Количество, 3), "ЧРД=.; ЧН=0; ЧГ=");
				
				СтоимостьТовара = 0;
				Если ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.Количество) Тогда
					СтоимостьТовара = Окр(Тек.СтоимостьТовара/Тек.Количество);	
				КонецЕсли;
				
				
				ВесТовара = 0;
				Тек.НаименованиеТовара = СтрЗаменить(Тек.НаименованиеТовара, "'", "");
				евген.ЗапросКИнтернетМагазину("                                                                                                                                                                                                                       
				|exec dbo.pb_AddItemToOrder " + Формат(Таб2[0].OrderId_Ч, "ЧГ=") + ",'" + Тек.НаименованиеТовара + "','" + Тек.Артикул + "'," + Формат(Тек.Количество, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + Формат(СтоимостьТовара, "ЧРД=.; ЧН=0; ЧГ=") + ",'" + Тек.КодТовара + "'," + Строка(ВесТовара), Соединение);
				ИтВес = Число(Тек.ВесОбщий);
				
			Исключение
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""));
				НовОш.Ошибка = ОписаниеОшибки();
				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				Продолжить;
	        КонецПопытки;
        КонецЕсли;
	КонецЦикла;	
	
	
	Попытка
		Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
			
			//Если НЕ ЗначениеЗаполнено(Тек.ВесОбщий) Тогда	
			//	Тек.ВесОбщий = 0;			
			//КонецЕсли;
			
			//фиксация выгрузки
			От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
			//фиксация выгрузки окончание
			
			
			Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
			R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
                                                                                                                                                                               //ТабК[0].tariffCategoryId_Ч
			Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч, "ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
			Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			
			Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
				НовЗагр = ТабЗагруженных.Добавить();
				НовЗагр.Номер = СтрЗаменить(ТекНом, Символы.НПП, "");
				НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
			КонецеСли;	
		КонецеСли;
	Исключение
		НовОш = ТабОшибок.Добавить();
		НовОш.Номер = СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""));
		НовОш.Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Новый(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено) Экспорт
	
	Перем ИтВес, Таб2;
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);

	ТабДок = Новый ТабличныйДокумент;
	
	// МАС - 15.06.2018 - № --->> 
	Если Не lem.ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	//Попытка
	//    ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение, ТипФайлаТабличногоДокумента.XLSX);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	//Исключение
	//    Возврат Ложь;
	//КонецПопытки;
	// <<--- МАС
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	ТабЗаказов.Колонки.Добавить("Адрес");
	ТабЗаказов.Колонки.Добавить("ВесОбщий");
	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
	ТабЗаказов.Колонки.Добавить("Итого");
	ТабЗаказов.Колонки.Добавить("КодТовара");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Количество");
	//ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
	//ТабЗаказов.Колонки.Добавить("Район");
	//ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	//ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	//ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	//ТабЗаказов.Колонки.Добавить("ТелефонГородской");
	//ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	//ТабЗаказов.Колонки.Добавить("ФИО");
	//ТабЗаказов.Колонки.Добавить("Штрихкод");
	//ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("КоличествоМест");
	ТабЗаказов.Колонки.Добавить("КлючЗаказа");
	
	//Задача № 2750
	ЭтоЛОРЕАЛЬ = Ложь;
	НомерКолонкиЛОРЕАЛЬ = 0;
	Попытка
		Для СчКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
			Если НЕ ЭтоЛОРЕАЛЬ Тогда
				ЭтоЛОРЕАЛЬ = (СокрЛП(ТабДок.Область(Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст) = "Addit.text 3") И СтрНайти(ИмяФайла, "B2B");
				Если ЭтоЛОРЕАЛЬ Тогда
					НомерКолонкиЛОРЕАЛЬ = СчКолонок;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		
	КонецПопытки;
	//Задача № 2750	
	
	ПослНомер = "";
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Нов = ТабЗаказов.Добавить();
		Для СчКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				Струк = Новый Структура;
				Струк.Вставить("Порядок", СчКолонок);
				НайКолонки = Шаблон.Поля.НайтиСтроки(Струк);                               			
			Иначе
				Струк = Новый Структура;
				Струк.Вставить("Наименование", "R" + ТабДок.Область(Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст);				
				НайКолонки = Шаблон.Поля.НайтиСтроки(Струк);                               			
			КонецеСли;	
			
			Если НайКолонки.Количество() = 0 Тогда
				Продолжить;
			КонецеСли;	
			
			Для Каждого НайКолонка Из НайКолонки Цикл
				Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
				Если ЗначениеЗаполнено(НайКолонка.НомерСтартовогоСимвола) и ЗначениеЗаполнено(НайКолонка.ДлинаСтроки) Тогда
					Значение = Строка(Значение);					
					Значение = Сред(Значение, НайКолонка.НомерСтартовогоСимвола, НайКолонка.ДлинаСтроки);
				ИначеЕсли ЗначениеЗаполнено(НайКолонка.НомерСтартовогоСимвола) и Не ЗначениеЗаполнено(НайКолонка.ДлинаСтроки) Тогда	
					Значение = СокрЛП(Строка(Значение));					
					Значение = Сред(Значение, НайКолонка.НомерСтартовогоСимвола);					
				КонецеСли;	
				
				Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
					Нов[НайКолонка.Поле.Наименование] = СтрЗаменить(Значение, Символ(160), "");
				Иначе	
					
					Нов[НайКолонка.Поле.Наименование] = Значение;
				КонецеСли;	
				
				Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
					НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
					Если НайденноеСоответствие <> Неопределено Тогда
						Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
					КонецеСли;	
				КонецеСли;	
				
				
				Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
					Если ЗначениеЗаполнено(Значение) Тогда
						ПослНомер = СтрЗаменить(Формат(Значение, "ЧГ="),Символ(160), "");
					ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
						Нов[НайКолонка.Поле.Наименование] = Формат(ПослНомер, "ЧГ=");
					Иначе
						Нов[НайКолонка.Поле.Наименование] = Формат(Нов[НайКолонка.Поле.Наименование], "ЧГ=");
					КонецеСли;	
				КонецеСли;	
			КонецЦикла;
		КонецЦикла;	
		
		//Задача № 2750
		Если ЭтоЛОРЕАЛЬ тогда
			Попытка
				ЗначениеКоличестваМест = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(НомерКолонкиЛОРЕАЛЬ, "ЧГ=")).Текст;
				Нов.КоличествоМест = Число(ЗначениеКоличестваМест);
				Если Нов.КоличествоМест = 0 Тогда
					Нов.КоличествоМест = 1;
				КонецЕсли;	
			Исключение
				Нов.КоличествоМест = 1;//? спорно
			КонецПопытки;
		Иначе
			Нов.КоличествоМест = 1;
		КонецЕсли;
		//Задача № 2750

		//////Задача № 2750
		////Если Нов.КоличествоМест = Неопределено 
		////	ИЛИ Нов.КоличествоМест = ""
		////	ИЛИ Нов.КоличествоМест = 0 Тогда
		////	Нов.КоличествоМест = 1; // Так было до Задача № 2750
		////Иначе
		////	Нов.КоличествоМест = Число(Нов.КоличествоМест);
		////КонецЕсли;
		//////Задача № 2750
		
		Если lem.ПропуститьСтроку(Нов, Шаблон) Тогда
			ТабЗаказов.Удалить(Нов);
		КонецеСли;			
	КонецЦикла;	

	
	Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
        МассивСимволов = Новый Массив;
        Для НомерСимвола = 48 По 57 Цикл
            МассивСимволов.Добавить(Символ(НомерСимвола));
        КонецЦикла;
        
        //Добавим новую колонку в ТЗ 
        ТабЗаказов.Колонки.Добавить("Сумма");
        //Количество строк
        Индекс = ТабЗаказов.Количество()-1;
        Сч=0;
        Пока Сч <= Индекс Цикл
            //Строка ТЗ
            Стр = ТабЗаказов[Сч];
            //Если первый символ ключа не цифра убираем строку
            Если  МассивСимволов.Найти(Лев(Стр.КлючЗаказа,1)) =  Неопределено Тогда
                ТабЗаказов.Удалить(Стр);
                //Откатываем Сч и Индекс, т.к. строку удалили
                Сч = Сч - 1;
                Индекс = Индекс-1;
            Иначе
                //Условие если стоимость 0
                Если Стр.СтоимостьТовара<> "" Тогда  
                Стр.Сумма = Число(СтрЗаменить(Стр.СтоимостьТовара,Символ(160),""));
                КонецЕсли;
            КонецЕсли;
            //Счетчик
            Сч = Сч+1;
		КонецЦикла;
		ТабНом = ТабЗаказов.Скопировать();
		ТабНом.Свернуть("НомерЗаказа, Артикул, НаименованиеТовара,Количество,СтоимостьТовара,ОбщаяЦена,Сумма");
		ТабЗаказов.Свернуть("НомерЗаказа", "КоличествоМест,Сумма");
	Иначе

		//Пропускаемые поля
        ПропускаемыеПоля = Шаблон.Поля.НайтиСтроки(Новый Структура("ИгнорироватьПустыеЗначения",Истина));
        СтуктураОтбора = Новый Структура;
        Для каждого СтрПП Из ПропускаемыеПоля Цикл
            СтуктураОтбора.Вставить(СтрПП.Поле.Наименование,"");	
        КонецЦикла;
        МассивУдаляемыхСтрок  = ТабЗаказов.НайтиСтроки(СтуктураОтбора);
        Для каждого СтрУдалить Из МассивУдаляемыхСтрок Цикл
            ТабЗаказов.Удалить(СтрУдалить);
        КонецЦикла;
        
        //Форматирование Строк
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   ШаблоныЗагрузкиExcelПоля.Поле.Наименование КАК ИмяПоля,
        |   ШаблоныЗагрузкиExcelПоля.ШаблонСтроки
        |ИЗ
        |   Справочник.ШаблоныЗагрузкиExcel.Поля КАК ШаблоныЗагрузкиExcelПоля
        |ГДЕ
        |   ШаблоныЗагрузкиExcelПоля.ШаблонСтроки <> """"
        |   И ШаблоныЗагрузкиExcelПоля.Ссылка = &Шаблон";
        
        Запрос.УстановитьПараметр("Шаблон",Шаблон);
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            Для каждого СтрТЗ Из ТабЗаказов Цикл
                Если НЕ lem.ПроверитьСтрокупоШаблону(СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля],ВыборкаДетальныеЗаписи.ШаблонСтроки) Тогда
                    СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля] = СокрЛП(lem.ОтформатироватьСТроку(СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля],ВыборкаДетальныеЗаписи.ШаблонСтроки));    
                КонецЕсли;
            КонецЦикла;	
        КонецЦикла;
        
		//Для каждого СтрТЗ Из ТабЗаказов Цикл
		//    СтрТЗ.ОбщаяЦена =  Число(СтрЗаменить(?(СтрТЗ.ОбщаяЦена="",0,СтрТЗ.ОбщаяЦена),Символ(160),""));
		//    СтрТЗ.СтоимостьТовара =  Число(СтрЗаменить(?(СтрТЗ.СтоимостьТовара="",0,СтрТЗ.СтоимостьТовара),Символ(160),""));
		//    СтрТЗ.КоличествоМест = Число(СтрЗаменить(?(СтрТЗ.КоличествоМест="",0,СтрТЗ.КоличествоМест),Символ(160),""));
		//    СтрТЗ.Количество = Число(СтрЗаменить(?(СтрТЗ.Количество="",0,СтрТЗ.Количество),Символ(160),""));
		//КонецЦикла;
		
		
        ТабНом = ТабЗаказов.Скопировать();
        ТабНом.Свернуть("НомерЗаказа, Артикул, НаименованиеТовара,Количество,СтоимостьТовара,ОбщаяЦена");
        ТабЗаказов.Свернуть("НомерЗаказа", "КоличествоМест,СтоимостьТовара");
    КонецЕсли;
    //------------------///////////
    
   
	
    // поля Шапки документа

    СтруктураПолейШапки = Новый Структура;
    
    Для Каждого Тек Из Шаблон.ПоляШапки Цикл
    	ЗначениеПоля = ТабДок.Область("R" + Тек.СтрокаВДокументе +"C" + Формат(Тек.КолонкаВДокументе, "ЧГ=")).Текст;
    	Если Тек.поле = Справочники.ПоляДанныхЗагрузки.НомерНакладной Тогда
    		ИмяПоля = "НН";
    	ИначеЕсли Тек.поле = Справочники.ПоляДанныхЗагрузки.ДатаНакладной Тогда	
    		ИмяПоля = "ДН";
    	КонецеСли;	
    	
    	СтруктураПолейШапки.Вставить(ИмяПоля, ЗначениеПоля);
    КонецЦикла;	
    
    
    
    ТабОшибок = Новый ТаблицаЗначений;
    ТабОшибок.Колонки.Добавить("Номер");
    ТабОшибок.Колонки.Добавить("Ошибка");
    ТабОшибок.Колонки.Добавить("Кол");
    
    ТабЗагруженных = Новый ТаблицаЗначений;
    ТабЗагруженных.Колонки.Добавить("Номер");
    
    ЗаказНеЗагружаем = "";
    
    
	//Мас = ТабЗаказов.ВыгрузитьКолонку("НомерЗаказа");
	ТабНомеров = ТабЗаказов.Скопировать(, "НомерЗаказа");
	ТабНомеров.Свернуть("НомерЗаказа");
	Мас = ТабНомеров.ВыгрузитьКолонку("НомерЗаказа");
	
	ТипНомерВнешнегоЗаказа = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	
	ТабНомПоиска = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТабНомПоиска.Колонки;
	КолонкиТаблицы.Добавить("Номер1", ТипНомерВнешнегоЗаказа);
	КолонкиТаблицы.Добавить("Номер2", ТипНомерВнешнегоЗаказа);
	
	Для Каждого НомерЗаказа Из Мас Цикл
		СтрокаНомера = ТабНомПоиска.Добавить();
		СтрокаНомера.Номер1 = НомерЗаказа;
		СтрокаНомера.Номер2 = "00" + НомерЗаказа;
	КонецЦикла;
	
    Зап = Новый Запрос;
    Зап.УстановитьПараметр("Контрагент", Контрагент);
	Зап.УстановитьПараметр("ТаблицаНомеров", ТабНомПоиска);
	Зап.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНомеров.Номер1 КАК Номер1,
	|	ТаблицаНомеров.Номер2 КАК Номер2
	|ПОМЕСТИТЬ ВТ_Номера
	|ИЗ
	|	&ТаблицаНомеров КАК ТаблицаНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номера.Номер1 КАК НомерВнешнегоЗаказа,
	|	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг1.Ссылка, РеализацияТоваровУслуг2.Ссылка)) КАК Док
	|ИЗ
	|	ВТ_Номера КАК ВТ_Номера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
	|		ПО ВТ_Номера.Номер1 = РеализацияТоваровУслуг1.НомерВнешнегоЗаказа
	|			И (РеализацияТоваровУслуг1.ВладелецТовара = &Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг2
	|		ПО ВТ_Номера.Номер2 = РеализацияТоваровУслуг2.НомерВнешнегоЗаказа
	|			И (РеализацияТоваровУслуг2.ВладелецТовара = &Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Номера.Номер1";
    
    Рез = Зап.Выполнить().Выгрузить();
	
    МасН = ТабНом.ВыгрузитьКолонку("Артикул");
    
    ЗапН = Новый Запрос;
    ЗапН.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ном,
	|	Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул В(&Мас)";
    ЗапН.УстановитьПараметр("Мас", МасН);	
    
    РезН = ЗапН.Выполнить().Выгрузить();	
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП, ЛОЖЬ) КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Поле1) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО (ИСТИНА)";
	ВыборкаПараметрыКонтрагента = Запрос.Выполнить().Выбрать();
	ВыборкаПараметрыКонтрагента.Следующий();
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
    НовДок = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
    НовДок.Дата = ТекущаяДата();
    НовДок.Контрагент = Контрагент;
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	НовДок.ОбновлятьКоличествоМестЗаказов = ВыборкаПараметрыКонтрагента.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
    НомерДокумента = "";
    ДатаДокумента = "";
    
    СтруктураПолейШапки.Свойство("НН", НомерДокумента);
    СтруктураПолейШапки.Свойство("ДН", ДатаДокумента);
    
	
	Если СокрЛП(Контрагент.Код) = "Shop_169"   Тогда
        Если СтрЧислоВхождений(НомерДокумента,"CI")> 0 Тогда
            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("1");
        ИначеЕсли СтрЧислоВхождений(НомерДокумента,"/")> 0 Тогда
            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("32");
        Иначе
            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("2");
		КонецЕсли;
    ИначеЕсли СокрЛП(Контрагент.Код) ="Shop_428" Тогда
        Если СтрЧислоВхождений(НомерДокумента,"CI")> 0 Тогда
            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("30");
        ИначеЕсли СтрЧислоВхождений(НомерДокумента,"/")> 0 Тогда
            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("33");
        Иначе
            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("31");
        КонецЕсли;
	КонецЕсли;
	
    
    Попытка
    	НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента);
		Если ЗначениеЗаполнено(ДатаДокумента) Тогда		
			НовДок.ДатаВходящегоДокумента = Дата(ДатаДокумента);			
		КонецЕсли;
    Исключение	
    	НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента) + " от " + СокрЛП(ДатаДокумента);
	КонецПопытки;
	
    
    Для Каждого Тек Из ТабЗаказов Цикл
    	Нов = НовДок.Заказы.Добавить();
    	Нов.ВнешнийНомерЗаказа = Тек.НомерЗаказа;
        
        Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
            Нов.СуммаДокумента = Тек.Сумма;
        Иначе
            Нов.СуммаДокумента = Тек.СтоимостьТовара;
        КонецеСли;
        
    	Най = Рез.Найти(Тек.НомерЗаказа);
    	Если Най <> Неопределено Тогда
    		Нов.Заказ = Най.Док;
    	КонецеСли;	
    	
    	НовЗ = ТабЗагруженных.Добавить();
    	НовЗ.Номер = Тек.НомерЗаказа;
		
		Если ЗначениеЗаполнено(Тек.КоличествоМест) Тогда //Задача № 2750
			Нов.КоличествоМест = Тек.КоличествоМест;
		КонецЕсли;	
    КонецЦикла;	

    Для Каждого Тек Из ТабНом Цикл
    	
    	Если Не ЗначениеЗаполнено(Тек.Артикул) Тогда
    		Продолжить;
    	КонецеСли;
    	
    	Нов = НовДок.Товары.Добавить();
    	Нов.Артикул = СокрЛП(Тек.Артикул);
        Нов.ВнешнийНомерЗаказа = Тек.НомерЗаказа;
    	Най = Рез.Найти(Тек.НомерЗаказа);
    	Если Най <> Неопределено Тогда
    		Нов.Заказ = Най.Док;
        КонецеСли;
        
        Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
            Нов.Сумма = Тек.Сумма;
            Нов.Цена  = Число(СтрЗаменить(?(Тек.ОбщаяЦена="",0,Тек.ОбщаяЦена),Символ(160),""));
        Иначе
            Нов.Сумма = Тек.СтоимостьТовара;
            Нов.Цена  = Тек.ОбщаяЦена;
        КонецеСли;
        
    	Най2 = РезН.Найти(Тек.Артикул);
    	Если Най2 <> Неопределено Тогда
    		Нов.Номенклатура = Най2.Ном;
    	КонецеСли;	
    	
    	Попытка
    		Нов.Количество = Число(Тек.Количество);
    	Исключение
    		
    	Конецпопытки;	
	КонецЦикла;	
	
	
	//МассивНомеров = НовДок.Заказы.ВыгрузитьКолонку("Заказ");
	//
	//Для каждого Стр Из НовДок.Заказы Цикл	
	//	Стр.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", Стр.ВнешнийНомерЗаказа);
	//	Если НЕ ЗначениеЗаполнено(Стр.Заказ) Тогда	
	//		Стр.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", "00" + Стр.ВнешнийНомерЗаказа);	
	//	КонецЕсли;		
	//КонецЦикла;
	
	
	Для каждого Стр Из НовДок.Заказы Цикл
		Если ЗначениеЗаполнено(Стр.Заказ) Тогда
			Стр.СуммаДокумента = Стр.Заказ.Товары.Итог("Сумма");
			
			Если Не ЭтоЛОРЕАЛЬ Тогда  //Задача № 2750
				Стр.КоличествоМест = Стр.Заказ.КоличествоМест;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НовДок.Основание = Перечисления.ТипыЗагрузкиДанных.EMAIL;
    НовДок.Записать(РежимЗаписиДокумента.Запись);
	//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)>>>
	//НовДок.Записать(РежимЗаписиДокумента.Проведение);
	Попытка
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		pkv.ДобавитьВСписокОтложенногоПроведения(НовДок.Ссылка, "Не удалось провести " + НовДок + " ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Новый "+ ТекстОшибки);
	КонецПопытки;
	//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)<<<
	
	Возврат Истина;
		
КонецФункции


#Область Вспомогательные

Функция ЭтоУслугаПоЗаказам(Артикул)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   УслугиПоЗаказам.Ссылка
	|ИЗ
	|   Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
	|ГДЕ
	|   УслугиПоЗаказам.Артикул = &Артикул
	|   И НЕ УслугиПоЗаказам.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	

Функция ПроверитьСтрокуНаЗаполненность(СтрокаДанных, Шаблон) Экспорт
	Для Каждого Тек Из Шаблон.Поля Цикл
		Если Тек.ЗапретНеЗаполненныхЗначений Тогда
			Если Не ЗначениеЗаполнено(СтрокаДанных[СокрЛП(Тек.Поле.Наименование)]) Тогда
				Если Не ЗначениеЗаполнено(Тек.ЗначениеПоУмолчанию) Тогда
					Возврат "Не заполнено поле """ + СокрЛП(Тек.Поле.Наименование) + """";
				Иначе
					СтрокаДанных[СокрЛП(Тек.Поле.Наименование)] = Тек.ЗначениеПоУмолчанию;
				КонецеСли;	
			КонецеСли;	
		КонецеСли;	
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции

Функция ПроверитьСтрокуНаИгнорирование(СтрокаДанных, Шаблон) Экспорт
	Для Каждого Тек Из Шаблон.Поля Цикл
		Если Тек.ИгнорироватьПустыеЗначения Тогда
			Если Не ЗначениеЗаполнено(СтрокаДанных[СокрЛП(Тек.Поле.Наименование)]) Тогда
				Возврат Истина;
			КонецеСли;	
		КонецеСли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции

Функция ИзСтрокиВДату(СтрДата) Экспорт
	
	СтрДата = СокрЛП(СтрДата);
	стрДатаФ = СокрЛП(СтрЗаменить(стрДата,".",""));
	стрДатаФ = СокрЛП(СтрЗаменить(стрДатаФ,",",""));
	датДата = Сред(стрДатаФ,5)+Сред(стрДатаФ,3,2)+Лев(стрДатаФ,2);
	Если СтрДлина(стрДатаФ)=6 Тогда
		датДата = "20"+датДата;
	КонецЕсли; 
	
	Попытка
		РезДата = Дата(датДата);
	Исключение
		РезДата = датДата;
	КонецПопытки;	
	
	Возврат РезДата;
	
КонецФункции

Функция ПолучитьПараметрыПодключенияКонтрагента(Контрагент,Период)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПараметрыКонтрагентовСрезПоследних.login_Strizh
		|ИЗ
        |   РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних";
    
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("Период", Период);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    ПараметрыКонтрагента = Новый Структура;
    Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
        ПараметрыКонтрагента.Вставить(Колонка.Имя);    
    КонецЦикла;
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ЗаполнитьЗначенияСвойств(ПараметрыКонтрагента,ВыборкаДетальныеЗаписи);    
    КонецЦикла;

    Возврат ПараметрыКонтрагента;
КонецФункции 

#КонецОбласти

#Область ЛогированиеЗагрузкиДанныхИзПочты

Функция ПараметрыЗаписиЛогаЗагрузкиДанных(ТипЗагружаемыхДанных = Неопределено) Экспорт
	
	РежимЗагрузкиДанных = неопределено;	
	Если ТипЗагружаемыхДанных = Неопределено Тогда
		ТипЗагружаемыхДанных = Справочники.ТипыЗагружаемыхДанных.ЗагрузкаЗаказов;
		РежимЗагрузкиДанных = Перечисления.РежимыЗагрузкиДанных.ЗагрузкаЗаказовИзПочты;
	ИначеЕсли ТипЗагружаемыхДанных = Справочники.ТипыЗагружаемыхДанных.ЗагрузкаЗаказов Тогда
		РежимЗагрузкиДанных = Перечисления.РежимыЗагрузкиДанных.ЗагрузкаЗаказовИзПочты;
	ИначеЕсли ТипЗагружаемыхДанных = Справочники.ТипыЗагружаемыхДанных.ЗагрузкаАПП Тогда
		РежимЗагрузкиДанных = Перечисления.РежимыЗагрузкиДанных.ЗагрузкаПриходаЗаказов;		
	КонецЕсли;
	
	Возврат Новый Структура("Контрагент, ШаблонЗагрузки, ТипЗагрузкиДанных, РежимЗагрузкиДанных, ТипЗагружаемыхДанных, ИмяФайла, Данные, ДанныеЗагружены, Отправитель",
	Справочники.Контрагенты.ПустаяСсылка(),			//Контрагент
	Справочники.ШаблоныЗагрузкиExcel.ПустаяСсылка(),//ШаблонЗагрузки
	Перечисления.ТипыЗагрузкиДанных.EMAIL,          //ТипЗагрузкиДанных - все исторические записи РС с этим типом
	РежимЗагрузкиДанных,                            //РежимЗагрузкиДанных
	ТипЗагружаемыхДанных,                           //ТипЗагружаемыхДанных
	"",                                             //ИмяФайла
	Неопределено,                                   //Данные
	Ложь,                                           //ДанныеЗагружены
	"");                                            //Отправитель
	
КонецФункции	

Функция ЗарегистрироватьЗагрузкуДанных(ПараметрыЗаписиЛогаЗагрузкиДанных, ОшибкаЗаписи = "")
	
	ТекВремя = ТекущаяДата();
	
	Наб = РегистрыСведений.ДанныеКЗагрузкеИзПочты.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекВремя);
	
	Нов = Наб.Добавить();
	Нов.Контрагент = ПараметрыЗаписиЛогаЗагрузкиДанных.Контрагент;
	Нов.ШаблонЗагрузки = ПараметрыЗаписиЛогаЗагрузкиДанных.ШаблонЗагрузки;
	Нов.Период = ТекВремя;
	Нов.ИмяФайла = ПараметрыЗаписиЛогаЗагрузкиДанных.ИмяФайла;
	Нов.Данные = Новый ХранилищеЗначения(ПараметрыЗаписиЛогаЗагрузкиДанных.Данные, Новый СжатиеДанных(9));
	Нов.Отправитель = ПараметрыЗаписиЛогаЗагрузкиДанных.Отправитель;
	Нов.ТипЗагрузкиДанных = ПараметрыЗаписиЛогаЗагрузкиДанных.ТипЗагрузкиДанных;
	Нов.РежимЗагрузкиДанных = ПараметрыЗаписиЛогаЗагрузкиДанных.РежимЗагрузкиДанных;
	Нов.ТипЗагружаемыхДанных = ПараметрыЗаписиЛогаЗагрузкиДанных.ТипЗагружаемыхДанных;
	
	Наб.Записать();

КонецФункции	

Функция ЗаписатьСтрокуЛогаЗагрузкиДанных(ПараметрыЗаписиЛогаЗагрузкиДанных, ОшибкаЗаписиВнешнегоИсточника = "") Экспорт
	
	//Возврат Истина; //Временное аварийное отключение	
	Попытка
		
		//ЗАПИСЬ ВО ВНЕШНИЙ ИСТОЧНИК ДАННЫХ
		ЗаписьЛогаЗагрузкиДанных = ВнешниеИсточникиДанных.ВнешнийЛог.Таблицы.dbo_UploadedData.СоздатьМенеджерЗаписи();
		
		ЗаписьЛогаЗагрузкиДанных.dateEvent = ТекущаяДата();
		ЗаписьЛогаЗагрузкиДанных.downloadtemplate = ПараметрыЗаписиЛогаЗагрузкиДанных.ШаблонЗагрузки.Код;
		ЗаписьЛогаЗагрузкиДанных.shopId = ПараметрыЗаписиЛогаЗагрузкиДанных.Контрагент.Код;
		ЗаписьЛогаЗагрузкиДанных.typeOfDataLoaded = ПараметрыЗаписиЛогаЗагрузкиДанных.ТипЗагружаемыхДанных.Код;
		//ЗаписьЛогаЗагрузкиДанных.filedata = base64Строка(ПараметрыЗаписиЛогаЗагрузкиДанных.Данные);
		ЗаписьЛогаЗагрузкиДанных.filedata = ПараметрыЗаписиЛогаЗагрузкиДанных.Данные;
		ЗаписьЛогаЗагрузкиДанных.fileName = ПараметрыЗаписиЛогаЗагрузкиДанных.ИмяФайла;
		ЗаписьЛогаЗагрузкиДанных.isTest = ПараметрыСеанса.ЭтоТестоваяСреда;
		ЗаписьЛогаЗагрузкиДанных.sender = ПараметрыЗаписиЛогаЗагрузкиДанных.Отправитель;
		ЗаписьЛогаЗагрузкиДанных.dataUploaded = Ложь;
		
		ЗаписьЛогаЗагрузкиДанных.Записать();

	Исключение
		ОшибкаЗаписиВнешнегоИсточника = ОписаниеОшибки();
		МасП = Новый Массив;
		МасП.Добавить("m.aseev@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		Попытка
			
			//ЗАПИСЬ В РЕГИСТР
			ЗарегистрироватьЗагрузкуДанных(ПараметрыЗаписиЛогаЗагрузкиДанных, ОшибкаЗаписиВнешнегоИсточника);
			
			lem.ОтправитьСообщение(МасП, "Ошибка записи лога загрузки данных", "Ошибка записи о загрузке данных во внешний лог " + ОшибкаЗаписиВнешнегоИсточника,,"Сервер 1С");

		Исключение
			
			ОшибкаЗаписиВнешнегоИсточника = ОшибкаЗаписиВнешнегоИсточника + "; " + ОписаниеОшибки();
			
			lem.ОтправитьСообщение(МасП, "Ошибка записи загрузки данных", "Ошибка записи о загрузке данных во внешний лог и регистр " + ОшибкаЗаписиВнешнегоИсточника,,"Сервер 1С");

			Возврат Ложь;

		КонецПопытки;	
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ДанныеЗагружались(ПараметрыЗаписиЛогаЗагрузкиДанных) Экспорт
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_UploadedData.dateEvent КАК dateEvent,
		|	dbo_UploadedData.downloadtemplate КАК downloadtemplate,
		|	dbo_UploadedData.shopId КАК shopId,
		|	dbo_UploadedData.typeOfDataLoaded КАК typeOfDataLoaded,
		|	dbo_UploadedData.filedata КАК filedata,
		|	dbo_UploadedData.fileName КАК fileName,
		|	dbo_UploadedData.isTest КАК isTest,
		|	dbo_UploadedData.sender КАК sender,
		|	dbo_UploadedData.dataUploaded КАК dataUploaded
		|ИЗ
		|	ВнешнийИсточникДанных.ВнешнийЛог.Таблица.dbo_UploadedData КАК dbo_UploadedData
		|ГДЕ
		|	dbo_UploadedData.fileName = &fileName";
		
		Запрос.УстановитьПараметр("fileName", ПараметрыЗаписиЛогаЗагрузкиДанных.ИмяФайла);
		
		РезультатПроверки = Запрос.Выполнить().Выбрать();
		
		Возврат РезультатПроверки.Следующий();
	
КонецФункции

#КонецОбласти


//Асеев 21.09.2021 (Задача № 4661)>>>

Функция ВызватьSetOrderBarcodesAPI(СтруктураДоступаSync, НомерЗаказа, МассивШК)
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.Strizh_test.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap");
	Иначе
		Прокси =  WSСсылки.Strizh.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap");
	КонецЕсли;
	
	Фабрика = Прокси.ФабрикаXDTO;
	
	Тип_Auth = Фабрика.Пакеты.Получить("http://tempuri.org/").Получить("Authentication");
	Auth = Фабрика.Создать(Тип_Auth);	
	
	Auth.Login 		= СтруктураДоступаSync.Логин;
	Auth.Password 	= СтруктураДоступаSync.Пароль;
	
	Тип_barcodes = Фабрика.Пакеты.Получить("http://tempuri.org/").Получить("ArrayOfPieceBarcode");
	barcodes = Фабрика.Создать(Тип_barcodes);
	
	Тип_barcode = Фабрика.Пакеты.Получить("http://tempuri.org/").Получить("PieceBarcode");
	
	orderId = НомерЗаказа;
	
	Для Каждого ШК Из МассивШК Цикл
		barcode = Фабрика.Создать(Тип_barcode);
		barcode.piece = 0;
		barcode.barcode = ШК;
		barcodes.PieceBarcode.Добавить(barcode);
	КонецЦикла;
	
	Возврат Прокси.SetOrderBarcodes(orderId, barcodes, Auth);
	
КонецФункции

Процедура СформироватьОтбивкуЗагрузкиШК(ПараметрыОбработки)
	
	ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("");
	ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("Успешно обработанных заказов: " + ПараметрыОбработки.КоличествоЗагруженныхЗаказов);
	Если ПараметрыОбработки.КоличествоНезагруженныхЗаказов Тогда
		ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("Обработано заказов с ошибками: " + ПараметрыОбработки.КоличествоНезагруженныхЗаказов);
	КонецЕсли;
	
	ТемаПисьма = "Загрузка ШК заказов из почты";
	ТекстПисьма = ПараметрыОбработки.СодержимоеОтбивки.ПолучитьТекст();
	
	МассивПолучателей = Новый Массив;
	МассивПолучателей.Добавить(ПараметрыОбработки.АдресОтправителя);
	Для Каждого АдресУведомления Из ПараметрыОбработки.АдресаУведомленияСИсходником Цикл
		МассивПолучателей.Добавить(АдресУведомления);
	КонецЦикла;
	
	lem.ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма, ПараметрыОбработки.ИмяВременногоФайла);
	//Сообщить(ПараметрыОбработки.СодержимоеОтбивки.ПолучитьТекст());
	
	Если ПараметрыОбработки.АдресаУведомленияБезИсходника.Количество() Тогда
		lem.ОтправитьСообщение(ПараметрыОбработки.АдресаУведомленияБезИсходника, ТемаПисьма, ТекстПисьма);
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ПараметрыОбработки.ИмяВременногоФайла);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьИОбработатьТаблицуШКИзВложения(Вложение, ПараметрыОбработки)
	
	ПараметрыОбработки.Вставить("СодержимоеОтбивки", Новый ТекстовыйДокумент);
	ПараметрыОбработки.Вставить("КоличествоЗагруженныхЗаказов", 0);
	ПараметрыОбработки.Вставить("КоличествоНезагруженныхЗаказов", 0);
	
	ПрерватьВыполнение = Ложь;
	
	ИмяФайла = ПараметрыОбработки.ИмяФайла;
	ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("Обработка полученного вложения " + ИмяФайла + " (содержимое прикреплено к письму):");
	
	ПараметрыОбработки.Вставить("ИмяВременногоФайла", ПолучитьИмяВременногоФайла(?(Найти(ИмяФайла, ".xlsx"), "xlsx", "xls")));
	
	Вложение.Данные.Записать(ПараметрыОбработки.ИмяВременногоФайла);
	
	ТабДок = Новый ТабличныйДокумент;
	Попытка
		ТабДок.Прочитать(ПараметрыОбработки.ИмяВременногоФайла);
	Исключение
		ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("Ошибка чтения файла штрихкодов: " + ОписаниеОшибки());
		ПрерватьВыполнение = Истина;
	КонецПопытки;
	
	//Попытка
	//	УдалитьФайлы(ИмяВременногоФайла);
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	
	Если ПрерватьВыполнение Тогда
		СформироватьОтбивкуЗагрузкиШК(ПараметрыОбработки);
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	КоличествоКолонок = ТабДок.ШиринаТаблицы;
	
	Если Не (КоличествоКолонок > 1 И КоличествоСтрок > 1) Тогда
		ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("Некорректное количество строк/колонок в файле штрихкодов");
		СформироватьОтбивкуЗагрузкиШК(ПараметрыОбработки);
		Возврат;
	КонецЕсли;
	
	ТаблицаШК = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаШК.Колонки;
	КолонкиТаблицы.Добавить("НомерВнешнегоЗаказа", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	КолонкиТаблицы.Добавить("Штрихкод");
	
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		Область = ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1);
		
		НомерВнешнегоЗаказа = СокрЛП(Область.Текст);
		Если НомерВнешнегоЗаказа = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2);
		
		Штрихкод = СокрЛП(Область.Текст);
		Если Штрихкод = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаШК = ТаблицаШК.Добавить();
		СтрокаШК.НомерВнешнегоЗаказа = НомерВнешнегоЗаказа;
		СтрокаШК.Штрихкод = Штрихкод;
		
	КонецЦикла;
	
	Если Не ТаблицаШК.Количество() Тогда
		ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("Нет ни одного штрихкода в файле");
		СформироватьОтбивкуЗагрузкиШК(ПараметрыОбработки);
		Возврат;
	КонецЕсли;
	
	ТаблицаШК.Индексы.Добавить("НомерВнешнегоЗаказа");
	
	ТаблицаЗаказов = ТаблицаШК.Скопировать(, "НомерВнешнегоЗаказа");
	ТаблицаЗаказов.Свернуть("НомерВнешнегоЗаказа");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыОбработки.Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗаказов.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	&ТаблицаЗаказов КАК ТаблицаЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	|	РеализацияТоваровУслуг.Номер КАК Номер
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВТ_Заказы.НомерВнешнегоЗаказа = РеализацияТоваровУслуг.НомерВнешнегоЗаказа
	|			И (РеализацияТоваровУслуг.ВладелецТовара = &Контрагент)";
	
	СтруктураПоиска = Новый Структура("НомерВнешнегоЗаказа");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НомерЗаказа = Выборка.Номер;
		Если НомерЗаказа = Null Тогда
			ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("Заказ " + Выборка.НомерВнешнегоЗаказа + " не найден в системе");
			ПараметрыОбработки.КоличествоНезагруженныхЗаказов = ПараметрыОбработки.КоличествоНезагруженныхЗаказов + 1;
		Иначе
			
			СтруктураПоиска.НомерВнешнегоЗаказа = Выборка.НомерВнешнегоЗаказа;
			
			РезультатAPI = Неопределено;
			
			Попытка
				РезультатAPI = ВызватьSetOrderBarcodesAPI(ПараметрыОбработки.СтруктураДоступаSync, Число(НомерЗаказа), ТаблицаШК.Скопировать(СтруктураПоиска, "Штрихкод").ВыгрузитьКолонку("Штрихкод"));
			Исключение
				ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("По заказу " + Выборка.НомерВнешнегоЗаказа + " ошибка вызова метода SetOrderBarcodes API: " + ОписаниеОшибки());
				ПараметрыОбработки.КоличествоНезагруженныхЗаказов = ПараметрыОбработки.КоличествоНезагруженныхЗаказов + 1;
			КонецПопытки;
			
			Если РезультатAPI = 1 Тогда
				ПараметрыОбработки.КоличествоЗагруженныхЗаказов = ПараметрыОбработки.КоличествоЗагруженныхЗаказов + 1;
			ИначеЕсли РезультатAPI <> Неопределено Тогда
				ПараметрыОбработки.СодержимоеОтбивки.ДобавитьСтроку("По заказу " + Выборка.НомерВнешнегоЗаказа + " ответ метода SetOrderBarcodes API: " + РезультатAPI);
				ПараметрыОбработки.КоличествоНезагруженныхЗаказов = ПараметрыОбработки.КоличествоНезагруженныхЗаказов + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьОтбивкуЗагрузкиШК(ПараметрыОбработки);
	
КонецПроцедуры

Процедура ЗагрузкаШКИзПочты() Экспорт
	
	МасАдресатовОшибки = Новый Массив;
	МасАдресатовОшибки.Добавить("m.aseev@strizh-logistic.ru");
	МасАдресатовОшибки.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	
	П = Новый ИнтернетПочтовыйПрофиль;
	
	П.АдресСервераPOP3 = "pop.mail.ru";
	П.ПортPOP3 = 995;
	П.АдресСервераIMAP = "imap.mail.ru";
	П.ПортIMAP = 993;
	П.ТолькоЗащищеннаяАутентификацияPOP3 = Ложь;
	П.ИспользоватьSSLPOP3 = Истина;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		П.ПользовательIMAP = "test_order_load_strizh@mail.ru";
		П.Пользователь = "test_order_load_strizh@mail.ru";
		
		П.Пароль = "DosTup338";
		П.ПарольIMAP  = "DosTup338";
		
	Иначе
		
		П.ПользовательIMAP = "bc_load_strizh@mail.ru";
		П.Пользователь = "bc_load_strizh@mail.ru";
		
		П.Пароль = "0MTwh5VpWxNVXQuN7T1c";
		П.ПарольIMAP  = "0MTwh5VpWxNVXQuN7T1c";
		
	КонецЕсли;
	
	Зап = Новый Запрос;
	Зап.Текст =
	"ВЫБРАТЬ
	|	РассылкиКонтрагентов.Контрагент КАК Контрагент,
	|	РассылкиКонтрагентов.Почта КАК Почта
	|ИЗ
	|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
	|ГДЕ
	|	РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(Перечисление.ТипыРассылки.ЗагрузкаЗаказов)";
	ТабПочты = Зап.Выполнить().Выгрузить();			
	
	Для Каждого СтрокаТЧ Из ТабПочты Цикл
		СтрокаТЧ.Почта = ВРег(СтрокаТЧ.Почта);
	КонецЦикла;	
	
	Поч = Новый ИнтернетПочта;
	
	Попытка
		Поч.Подключиться(П); //////
		
	Исключение
		Ошибка = ОписаниеОшибки();
		lem.ОтправитьСообщение(МасАдресатовОшибки, "Ошибка загрузки ШК заказов (подключение)", Ошибка, ,"Стриж УТЛ");
		
		Возврат;
	КонецПопытки;	
	
	МассивПисем = Поч.ПолучитьЗаголовки();
	
	КоличествоПисем = МассивПисем.Количество();
	Если Не КоличествоПисем Тогда
		Возврат;
	КонецЕсли;
	
	МасЗаг = Новый Массив;
	
	МаксИндексПисьма = КоличествоПисем - 1;
	Для ИндексПисьма = 0 По МаксИндексПисьма Цикл
		ЗаголовоеПисьма = МассивПисем[ИндексПисьма];
		НайК = ТабПочты.Найти(ВРег(ЗаголовоеПисьма.Отправитель.Адрес), "Почта");
		Если НайК = Неопределено Тогда
			Продолжить;
		конецеСли;
		МасЗаг.Добавить(ЗаголовоеПисьма);
	КонецЦикла;
	
	КоличествоПисем = МасЗаг.Количество();
	Если Не КоличествоПисем Тогда
		Возврат;
	КонецеСли;	
	
	ШаблонЗагрузки = Справочники.ШаблоныЗагрузкиExcel.НайтиПоКоду("00000000026");
	Зап.УстановитьПараметр("ШаблонЗагрузки", ШаблонЗагрузки);
	Зап.Текст =
	"ВЫБРАТЬ
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.Адрес КАК Адрес,
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.ОтправлятьИсходникЗагрузки КАК ОтправлятьИсходникЗагрузки
	|ИЗ
	|	Справочник.ШаблоныЗагрузкиExcel.РассылкаУведомлений КАК ШаблоныЗагрузкиExcelРассылкаУведомлений
	|ГДЕ
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.Ссылка = &ШаблонЗагрузки
	|	И ШаблоныЗагрузкиExcelРассылкаУведомлений.Отправлять";
	
	ТаблицаАдресовУведомлений = Зап.Выполнить().Выгрузить();
	АдресаУведомленияСИсходником = ТаблицаАдресовУведомлений.Скопировать(Новый Структура("ОтправлятьИсходникЗагрузки", Истина), "Адрес").ВыгрузитьКолонку("Адрес");
	АдресаУведомленияБезИсходника = ТаблицаАдресовУведомлений.Скопировать(Новый Структура("ОтправлятьИсходникЗагрузки", Ложь), "Адрес").ВыгрузитьКолонку("Адрес");
	
	//логирование
	//ПараметрыЗаписиЛога = ЗагрузкаДанныхИзПочтыСервер.ПараметрыЗаписиЛогаЗагрузкиДанных(Справочники.ТипыЗагружаемыхДанных.ЗагрузкаЗаказов);
	//ПараметрыЗаписиЛога.ШаблонЗагрузки = ШаблонЗагрузки;
	
	МассивПисем = Поч.Выбрать(Истина, МасЗаг);
	
	МаксИндексПисьма = КоличествоПисем - 1;
	Для ИндексПисьма = 0 По МаксИндексПисьма Цикл
		
		ЗаголовокПисьма = МассивПисем[ИндексПисьма];
		АдресОтправителя = ЗаголовокПисьма.Отправитель.Адрес;
		НайК = ТабПочты.Найти(ВРег(АдресОтправителя), "Почта");
		Если НайК = Неопределено Тогда
			Продолжить;
		конецеСли;
		Контрагент = НайК.Контрагент;
		
		Вложения = ЗаголовокПисьма.Вложения;
		КоличествоВложений = Вложения.Количество();
		Если Не КоличествоВложений Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДоступаSync = ИнтеграцияССервисомSync.СтруктураДоступаSync(Контрагент);
		
		//логирование
		//ПараметрыЗаписиЛога.Контрагент = Контрагент;
		//ПараметрыЗаписиЛога.Отправитель = АдресОтправителя;
		
		МаксИндексВложения = КоличествоВложений - 1;
		Для ИндексВложения = 0 По МаксИндексВложения Цикл
			
			Вложение = Вложения[ИндексВложения];
			ИмяФайла = Вложение.ИмяФайла;
			
			Если Не Найти(ИмяФайла, ".xls") Тогда
				Продолжить;
			КонецЕсли;
			
			//логирование
			//ОшибкаЗаписиВнешнегоИсточника = "";
			//ПараметрыЗаписиЛога.ИмяФайла = ИмяФайла;
			//ПараметрыЗаписиЛога.Данные = Вложение.Данные;
			//ЗагрузкаДанныхИзПочтыСервер.ЗаписатьСтрокуЛогаЗагрузкиДанных(ПараметрыЗаписиЛога, ОшибкаЗаписиВнешнегоИсточника);
			
			ПараметрыОбработки = Новый Структура("АдресОтправителя,Контрагент,ИмяФайла,СтруктураДоступаSync,АдресаУведомленияСИсходником,АдресаУведомленияБезИсходника", АдресОтправителя, Контрагент, ИмяФайла, СтруктураДоступаSync, АдресаУведомленияСИсходником, АдресаУведомленияБезИсходника);
			
			ПрочитатьИОбработатьТаблицуШКИзВложения(Вложение, ПараметрыОбработки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Поч.Отключиться();
	
КонецПроцедуры

//Асеев 21.09.2021 (Задача № 4661)<<<


//Асеев 26.10.2021 (Задача № 4699)>>>
Процедура СформироватьОтбивкуЗагрузкиЗаявокНаЗабор(ПараметрыОбработки)
	
	//тест
	//Возврат;
	//тест
	
	Если ПараметрыОбработки.Свойство("СформированныеЗаявки") И ПараметрыОбработки.СформированныеЗаявки.Количество() Тогда
		ПараметрыОбработки.СодержимоеОтбивки.Добавить("");
		ПараметрыОбработки.СодержимоеОтбивки.Добавить("Сформированные заявки:");
		Для Каждого СтрокаЗаявки Из ПараметрыОбработки.СформированныеЗаявки Цикл
			ПараметрыОбработки.СодержимоеОтбивки.Добавить("ID мерчанта " + СтрокаЗаявки.IDМерчанта + " - Номер заявки " + Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ="));
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбработки.СодержимоеОтбивки.Добавить("");
	ПараметрыОбработки.СодержимоеОтбивки.Добавить("Успешно обработанных заявок: " + ПараметрыОбработки.КоличествоЗагруженныхЗаявок);
	Если ПараметрыОбработки.КоличествоНезагруженныхЗаявок Тогда
		ПараметрыОбработки.СодержимоеОтбивки.Добавить("Обработано заявок с ошибками: " + ПараметрыОбработки.КоличествоНезагруженныхЗаявок);
	КонецЕсли;
	
	ТемаПисьма = "Загрузка заявок на забор из почты";
	ТекстПисьма = СтрСоединить(ПараметрыОбработки.СодержимоеОтбивки, Символы.ПС);
	
	МассивПолучателей = Новый Массив;
	МассивПолучателей.Добавить(ПараметрыОбработки.АдресОтправителя);
	Для Каждого АдресУведомления Из ПараметрыОбработки.АдресаУведомленияСИсходником Цикл
		МассивПолучателей.Добавить(АдресУведомления);
	КонецЦикла;
	
	lem.ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма, ПараметрыОбработки.ИмяВременногоФайла);
	//Сообщить(ПараметрыОбработки.СодержимоеОтбивки.ПолучитьТекст());
	
	Если ПараметрыОбработки.АдресаУведомленияБезИсходника.Количество() Тогда
		lem.ОтправитьСообщение(ПараметрыОбработки.АдресаУведомленияБезИсходника, ТемаПисьма, ТекстПисьма);
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ПараметрыОбработки.ИмяВременногоФайла);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьИОбработатьТаблицуЗаявокНаЗаборИзВложения(Вложение, ПараметрыОбработки)
	
	ПараметрыОбработки.Вставить("СодержимоеОтбивки", Новый Массив);
	ПараметрыОбработки.Вставить("КоличествоЗагруженныхЗаявок", 0);
	ПараметрыОбработки.Вставить("КоличествоНезагруженныхЗаявок", 0);
	
	ПрерватьВыполнение = Ложь;
	
	ИмяФайла = ПараметрыОбработки.ИмяФайла;
	ПараметрыОбработки.СодержимоеОтбивки.Добавить("Обработка полученного вложения " + ИмяФайла + " (содержимое прикреплено к письму):");
	
	ПараметрыОбработки.Вставить("ИмяВременногоФайла", ПолучитьИмяВременногоФайла(?(Найти(ИмяФайла, ".xlsx"), "xlsx", "xls")));
	
	Вложение.Данные.Записать(ПараметрыОбработки.ИмяВременногоФайла);
	
	ТабДок = Новый ТабличныйДокумент;
	Попытка
		ТабДок.Прочитать(ПараметрыОбработки.ИмяВременногоФайла);
	Исключение
		ПараметрыОбработки.СодержимоеОтбивки.Добавить("Ошибка чтения файла заявок: " + ОписаниеОшибки());
		ПрерватьВыполнение = Истина;
	КонецПопытки;
	
	//тест
	//ТабДок.Показать();
	//Попытка
	//	УдалитьФайлы(ПараметрыОбработки.ИмяВременногоФайла);
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	//тест
	
	Если ПрерватьВыполнение Тогда
		СформироватьОтбивкуЗагрузкиЗаявокНаЗабор(ПараметрыОбработки);
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	КоличествоКолонок = ТабДок.ШиринаТаблицы;
	
	Если Не (КоличествоКолонок > 1 И КоличествоСтрок > 1) Тогда
		ПараметрыОбработки.СодержимоеОтбивки.Добавить("Некорректное количество строк/колонок в файле заявок");
		СформироватьОтбивкуЗагрузкиЗаявокНаЗабор(ПараметрыОбработки);
		Возврат;
	КонецЕсли;
	
	КолонкиТаблицыФайла = Новый Массив;
	
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "IDМерчанта", "ID мерчанта"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "НомерЗаказаПартнера", "Номер заказа партнера"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "АдресСклада", "Адрес склада"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "ВремяОтгрузкиОт", "Интервал отгрузки с"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "ВремяОтгрузкиДо", "Интервал отгрузки по"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "Вес", "Вес, кг"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "Объем", "Объём, м³"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "ЧислоГрузомест", "Число грузомест"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "ТелефонСклада", "Телефон склада"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "КонтактноеЛицо", "Контактное лицо"));
	КолонкиТаблицыФайла.Добавить(Новый Структура("ИмяКолонки,Текст,ТекстПоиска", "РегионЗабора", "Регион забора"));
	
	Для Каждого КолонкаТаблицыФайла Из КолонкиТаблицыФайла Цикл
		КолонкаТаблицыФайла.ТекстПоиска = ВРег(КолонкаТаблицыФайла.Текст);
	КонецЦикла;
	
	КолонкиЗаголовкаФайла = Новый Массив;
	КолонкиЗаголовкаФайла.Добавить(Новый Структура("Номер,Наименование", 0, ""));//колонка 0
	
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		Область = ТабДок.Область(1, НомерКолонки, 1, НомерКолонки);
		КолонкиЗаголовкаФайла.Добавить(Новый Структура("Номер,Наименование", НомерКолонки, ВРег(СокрЛП(Область.Текст))));
	КонецЦикла;
	
	НомераКолонокФайла = Новый Соответствие;
	
	Для Каждого КолонкаТаблицыФайла Из КолонкиТаблицыФайла Цикл
		
		ЗначениеПоиска = КолонкаТаблицыФайла.ТекстПоиска;
		
		ОшибкаПоиска = Истина;
		
		Для Каждого КолонкаЗаголовкаФайла Из КолонкиЗаголовкаФайла Цикл
			Если СтрНайти(КолонкаЗаголовкаФайла.Наименование, ЗначениеПоиска) Тогда
				НомераКолонокФайла.Вставить(КолонкаТаблицыФайла.ИмяКолонки, КолонкаЗаголовкаФайла.Номер);
				ОшибкаПоиска = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОшибкаПоиска Тогда
			ПараметрыОбработки.СодержимоеОтбивки.Добавить("Не найдена колонка """ + КолонкаТаблицыФайла.Текст + """ в файле заявок");
			ПрерватьВыполнение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПрерватьВыполнение Тогда
		СформироватьОтбивкуЗагрузкиЗаявокНаЗабор(ПараметрыОбработки);
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаЗаявок.Колонки;
	//КолонкиТаблицы.Добавить("НомерСтроки");
	
	Для Каждого КолонкаТаблицыФайла Из КолонкиТаблицыФайла Цикл
		КолонкиТаблицы.Добавить(КолонкаТаблицыФайла.ИмяКолонки);
	КонецЦикла;
	
	РегионыЗабора = Новый Соответствие;
	РегионыЗабора.Вставить("МСК", 1);
	РегионыЗабора.Вставить("СПБ", 2);
	
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		КоличествоПустыхЗначений = 0;
		
		НомерКолонки = НомераКолонокФайла["IDМерчанта"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		IDМерчанта = СокрЛП(Область.Текст);
		
		ПустойIDМерчанта = IDМерчанта = "" Или IDМерчанта = "#Н/Д" Или IDМерчанта = "#N/A";
		Если ПустойIDМерчанта Тогда
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["НомерЗаказаПартнера"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		НомерЗаказаПартнера = СокрЛП(Область.Текст);
		Если НомерЗаказаПартнера = "" Тогда
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["АдресСклада"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		АдресСклада = СокрЛП(Область.Текст);
		Если АдресСклада = "" Тогда
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["ВремяОтгрузкиОт"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		ВремяОтгрузкиОт = СокрЛП(Область.Текст);
		Если ВремяОтгрузкиОт = "" Тогда
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		//Иначе
		//	ПозицияРазделителя = СтрНайти(ВремяОтгрузкиОт, ":");
		//	Если ПозицияРазделителя Тогда
		//		ВремяОтгрузкиОт = ПолучитьЧасыСлеваРазделителя(ВремяОтгрузкиОт, ПозицияРазделителя) + ":" + ПолучитьМинутыСправаРазделителя(ВремяОтгрузкиОт, ПозицияРазделителя);
		//	Иначе
		//		ВремяОтгрузкиОт = "";
		//		КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		//	КонецЕсли;
		КонецЕсли;
		//Если ВремяОтгрузкиОт = "" Тогда
		//	ВремяОтгрузкиОт = "10:00";
		//КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["ВремяОтгрузкиДо"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		ВремяОтгрузкиДо = СокрЛП(Область.Текст);
		Если ВремяОтгрузкиДо = "" Тогда
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		//Иначе
		//	ПозицияРазделителя = СтрНайти(ВремяОтгрузкиДо, ":",,, 2);
		//	Если ПозицияРазделителя Тогда
		//		ВремяОтгрузкиДо = ПолучитьЧасыСлеваРазделителя(ВремяОтгрузкиДо, ПозицияРазделителя) + ":" + ПолучитьМинутыСправаРазделителя(ВремяОтгрузкиДо, ПозицияРазделителя);
		//	Иначе
		//		ВремяОтгрузкиДо = "";
		//		КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		//	КонецЕсли;
		КонецЕсли;
		//Если ВремяОтгрузкиДо = "" Тогда
		//	ВремяОтгрузкиДо = "18:00";
		//КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["Вес"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		Вес = СокрЛП(Область.Текст);
		Если Вес = "" Тогда
			Вес = 0;
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		Иначе
			Попытка
				Вес = Число(Вес);
			Исключение
				Вес = 0;
				КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
			КонецПопытки;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["Объем"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		Объем = СокрЛП(Область.Текст);
		Если Объем = "" Тогда
			Объем = 0;
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		Иначе
			Попытка
				Объем = Число(Объем);
			Исключение
				Объем = 0;
				КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
			КонецПопытки;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["ЧислоГрузомест"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		ЧислоГрузомест = СокрЛП(Область.Текст);
		Если ЧислоГрузомест = "" Тогда
			ЧислоГрузомест = 0;
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		Иначе
			Попытка
				ЧислоГрузомест = Число(ЧислоГрузомест);
			Исключение
				ЧислоГрузомест = 0;
				КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
			КонецПопытки;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["ТелефонСклада"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		ТелефонСклада = СокрЛП(Область.Текст);
		Если ТелефонСклада = "" Тогда
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["КонтактноеЛицо"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		КонтактноеЛицо = СокрЛП(Область.Текст);
		Если КонтактноеЛицо = "" Тогда
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокФайла["РегионЗабора"];
		Область = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		РегионЗабора = СокрЛП(Область.Текст);
		Если РегионЗабора = "" Тогда
			КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
		Иначе
			РегионЗабора = ВРег(РегионЗабора);
			РегионЗабора = РегионыЗабора[РегионЗабора];
			Если РегионЗабора = Неопределено Тогда
				РегионЗабора = "";
				КоличествоПустыхЗначений = КоличествоПустыхЗначений + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоПустыхЗначений > 5 Тогда
			//скорее всего это пустая/некорректная строка, игнорируем ее
			Продолжить;
		ИначеЕсли ПустойIDМерчанта Тогда
			//такие точно пропускаем
			ПараметрыОбработки.СодержимоеОтбивки.Добавить("Пропущена строка файла заявок " + НомерСтроки + ", проверьте ID мерчанта");
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаявки = ТаблицаЗаявок.Добавить();
		//СтрокаЗаявки.НомерСтроки = НомерСтроки;
		СтрокаЗаявки.IDМерчанта = IDМерчанта;
		СтрокаЗаявки.НомерЗаказаПартнера = НомерЗаказаПартнера;
		СтрокаЗаявки.АдресСклада = АдресСклада;
		СтрокаЗаявки.ВремяОтгрузкиОт = ВремяОтгрузкиОт;
		СтрокаЗаявки.ВремяОтгрузкиДо = ВремяОтгрузкиДо;
		СтрокаЗаявки.Вес = Вес;
		СтрокаЗаявки.Объем = Объем;
		СтрокаЗаявки.ЧислоГрузомест = ЧислоГрузомест;
		СтрокаЗаявки.ТелефонСклада = ТелефонСклада;
		СтрокаЗаявки.КонтактноеЛицо = КонтактноеЛицо;
		СтрокаЗаявки.РегионЗабора = РегионЗабора;
		
	КонецЦикла;
	
	Если Не ТаблицаЗаявок.Количество() Тогда
		ПараметрыОбработки.СодержимоеОтбивки.Добавить("Нет ни одной корректной заявки в файле");
		СформироватьОтбивкуЗагрузкиЗаявокНаЗабор(ПараметрыОбработки);
		Возврат;
	КонецЕсли;
	
	КолонкиТаблицы.Добавить("ЗаявкаСформирована", Новый ОписаниеТипов("Булево"));
	КолонкиТаблицы.Добавить("НомерЗаявки");
	
	SettingId = ПараметрыОбработки.СтруктураДоступаSync.SettingID;
	DesiredDeliveryDate = Формат(НачалоДня(ТекущаяДата()) + 86400, "ДФ=yyyy-MM-dd");
	
	МассивЗаказаItems = Новый Массив;
	
	СтруктураЗаказаItems = Новый Структура;
	СтруктураЗаказаItems.Вставить("Article",     "1111");
	СтруктураЗаказаItems.Вставить("Name",        "Товар");
	СтруктураЗаказаItems.Вставить("Count",       1);            
	СтруктураЗаказаItems.Вставить("Price",       0);
	
	СтруктураЗаказаItems.Вставить("Barcode",     "");
	СтруктураЗаказаItems.Вставить("NDS",         -1);
	
	МассивЗаказаItems.Добавить(СтруктураЗаказаItems);
	
	ПроксиSync = ИнтеграцияССервисомSync.СоздатьПроксиSync();
	
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		ДанныеЗаказа = Новый Структура("SelfDelivery,SettingId,PayType,DesiredDeliveryDate,Items", 2, SettingId, 1, DesiredDeliveryDate, МассивЗаказаItems);
		ДанныеЗаказа.Вставить("StockId", СтрокаЗаявки.IDМерчанта);
		ДанныеЗаказа.Вставить("OrderIdImport", СтрокаЗаявки.НомерЗаказаПартнера);
		ДанныеЗаказа.Вставить("Address", Новый Структура("FullAddress",СтрокаЗаявки.АдресСклада));
		ДанныеЗаказа.Вставить("TimeDeliveryFrom", СтрокаЗаявки.ВремяОтгрузкиОт);
		ДанныеЗаказа.Вставить("TimeDeliveryTo", СтрокаЗаявки.ВремяОтгрузкиДо);
		ДанныеЗаказа.Вставить("Weight", СтрокаЗаявки.Вес);
		ДанныеЗаказа.Вставить("Volume", СтрокаЗаявки.Объем);
		ДанныеЗаказа.Вставить("PiecesOfFreight", СтрокаЗаявки.ЧислоГрузомест);
		ДанныеЗаказа.Вставить("User", Новый Структура("Phone,FIO,Email", СтрокаЗаявки.ТелефонСклада, СтрокаЗаявки.КонтактноеЛицо, ""));
		ДанныеЗаказа.Вставить("DeliveryPlaceId", СтрокаЗаявки.РегионЗабора);
		ДанныеЗаказа.Вставить("SourcePlaceId", СтрокаЗаявки.РегионЗабора);
		
		РезультатAPI = Неопределено;
		
		Попытка
			РезультатAPI = ИнтеграцияССервисомSync.RegisterOrderExtended_ВсеОшибки(ДанныеЗаказа, ПараметрыОбработки.СтруктураДоступаSync, ПроксиSync);
		Исключение
			ПараметрыОбработки.СодержимоеОтбивки.Добавить("По ID мерчанта " + СтрокаЗаявки.IDМерчанта + " ошибка вызова метода RegisterOrderExtended API: " + ОписаниеОшибки());
			ПараметрыОбработки.КоличествоНезагруженныхЗаявок = ПараметрыОбработки.КоличествоНезагруженныхЗаявок + 1;
		КонецПопытки;
		
		Если ТипЗнч(РезультатAPI) = Тип("Массив") Тогда
			ПараметрыОбработки.СодержимоеОтбивки.Добавить("По ID мерчанта " + СтрокаЗаявки.IDМерчанта + " ответ метода RegisterOrderExtended API:");
			ПараметрыОбработки.КоличествоНезагруженныхЗаявок = ПараметрыОбработки.КоличествоНезагруженныхЗаявок + 1;
			Для Каждого СтрокаОшибки Из РезультатAPI Цикл
				ПараметрыОбработки.СодержимоеОтбивки.Добавить(СтрокаОшибки);
			КонецЦикла;
		ИначеЕсли РезультатAPI <> Неопределено Тогда
			СтрокаЗаявки.ЗаявкаСформирована = Истина;
			СтрокаЗаявки.НомерЗаявки = РезультатAPI;
			ПараметрыОбработки.КоличествоЗагруженныхЗаявок = ПараметрыОбработки.КоличествоЗагруженныхЗаявок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОбработки.Вставить("СформированныеЗаявки", ТаблицаЗаявок.Скопировать(Новый Структура("ЗаявкаСформирована", Истина), "IDМерчанта,НомерЗаявки"));
	
	СформироватьОтбивкуЗагрузкиЗаявокНаЗабор(ПараметрыОбработки);
	
КонецПроцедуры

Процедура ЗагрузкаЗаявокНаЗаборИзПочты() Экспорт
	
	МасАдресатовОшибки = Новый Массив;
	МасАдресатовОшибки.Добавить("m.aseev@strizh-logistic.ru");
	МасАдресатовОшибки.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	
	П = Новый ИнтернетПочтовыйПрофиль;
	
	П.АдресСервераPOP3 = "pop.mail.ru";
	П.ПортPOP3 = 995;
	П.АдресСервераIMAP = "imap.mail.ru";
	П.ПортIMAP = 993;
	П.ТолькоЗащищеннаяАутентификацияPOP3 = Ложь;
	П.ИспользоватьSSLPOP3 = Истина;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		П.ПользовательIMAP = "test_order_load_strizh@mail.ru";
		П.Пользователь = "test_order_load_strizh@mail.ru";
		
		П.Пароль = "DosTup338";
		П.ПарольIMAP  = "DosTup338";
		
	Иначе
		
		П.ПользовательIMAP = "intake_load_strizh@mail.ru";
		П.Пользователь = "intake_load_strizh@mail.ru";
		
		П.Пароль = "RR5tmMAtwxnLAcR65b3E";
		П.ПарольIMAP  = "RR5tmMAtwxnLAcR65b3E";
		
	КонецЕсли;
	
	Зап = Новый Запрос;
	Зап.Текст =
	"ВЫБРАТЬ
	|	РассылкиКонтрагентов.Контрагент КАК Контрагент,
	|	РассылкиКонтрагентов.Почта КАК Почта
	|ИЗ
	|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
	|ГДЕ
	|	РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(Перечисление.ТипыРассылки.ЗагрузкаЗаказов)";
	ТабПочты = Зап.Выполнить().Выгрузить();			
	
	Для Каждого СтрокаТЧ Из ТабПочты Цикл
		СтрокаТЧ.Почта = ВРег(СтрокаТЧ.Почта);
	КонецЦикла;	
	
	Поч = Новый ИнтернетПочта;
	
	Попытка
		Поч.Подключиться(П); //////
		
	Исключение
		Ошибка = ОписаниеОшибки();
		lem.ОтправитьСообщение(МасАдресатовОшибки, "Ошибка загрузки заявок на забор (подключение)", Ошибка, ,"Стриж УТЛ");
		
		Возврат;
	КонецПопытки;	
	
	МассивПисем = Поч.ПолучитьЗаголовки();
	
	КоличествоПисем = МассивПисем.Количество();
	Если Не КоличествоПисем Тогда
		Возврат;
	КонецЕсли;
	
	МасЗаг = Новый Массив;
	
	
	МаксИндексПисьма = КоличествоПисем - 1;
	Для ИндексПисьма = 0 По МаксИндексПисьма Цикл
		ЗаголовоеПисьма = МассивПисем[ИндексПисьма];
		НайК = ТабПочты.Найти(ВРег(ЗаголовоеПисьма.Отправитель.Адрес), "Почта");
		Если НайК = Неопределено Тогда
			Продолжить;
		конецеСли;
		МасЗаг.Добавить(ЗаголовоеПисьма);
	КонецЦикла;
	
	КоличествоПисем = МасЗаг.Количество();
	Если Не КоличествоПисем Тогда
		Возврат;
	КонецеСли;	
	
	ШаблонЗагрузки = Справочники.ШаблоныЗагрузкиExcel.НайтиПоКоду("00000000028");
	Зап.УстановитьПараметр("ШаблонЗагрузки", ШаблонЗагрузки);
	Зап.Текст =
	"ВЫБРАТЬ
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.Адрес КАК Адрес,
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.ОтправлятьИсходникЗагрузки КАК ОтправлятьИсходникЗагрузки
	|ИЗ
	|	Справочник.ШаблоныЗагрузкиExcel.РассылкаУведомлений КАК ШаблоныЗагрузкиExcelРассылкаУведомлений
	|ГДЕ
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.Ссылка = &ШаблонЗагрузки
	|	И ШаблоныЗагрузкиExcelРассылкаУведомлений.Отправлять";
	
	ТаблицаАдресовУведомлений = Зап.Выполнить().Выгрузить();
	АдресаУведомленияСИсходником = ТаблицаАдресовУведомлений.Скопировать(Новый Структура("ОтправлятьИсходникЗагрузки", Истина), "Адрес").ВыгрузитьКолонку("Адрес");
	АдресаУведомленияБезИсходника = ТаблицаАдресовУведомлений.Скопировать(Новый Структура("ОтправлятьИсходникЗагрузки", Ложь), "Адрес").ВыгрузитьКолонку("Адрес");
	
	//логирование
	ПараметрыЗаписиЛога = ЗагрузкаДанныхИзПочтыСервер.ПараметрыЗаписиЛогаЗагрузкиДанных(Справочники.ТипыЗагружаемыхДанных.ЗагрузкаЗаказов);
	ПараметрыЗаписиЛога.ШаблонЗагрузки = ШаблонЗагрузки;
	
	МассивПисем = Поч.Выбрать(Истина, МасЗаг);
	
	МаксИндексПисьма = КоличествоПисем - 1;
	Для ИндексПисьма = 0 По МаксИндексПисьма Цикл
		
		ЗаголовокПисьма = МассивПисем[ИндексПисьма];
		АдресОтправителя = ЗаголовокПисьма.Отправитель.Адрес;
		НайК = ТабПочты.Найти(ВРег(АдресОтправителя), "Почта");
		Если НайК = Неопределено Тогда
			Продолжить;
		конецеСли;
		Контрагент = НайК.Контрагент;
		
		Вложения = ЗаголовокПисьма.Вложения;
		КоличествоВложений = Вложения.Количество();
		Если Не КоличествоВложений Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДоступаSync = ИнтеграцияССервисомSync.СтруктураДоступаSync(Контрагент);
		
		//логирование
		ПараметрыЗаписиЛога.Контрагент = Контрагент;
		ПараметрыЗаписиЛога.Отправитель = АдресОтправителя;
		
		МаксИндексВложения = КоличествоВложений - 1;
		Для ИндексВложения = 0 По МаксИндексВложения Цикл
			
			Вложение = Вложения[ИндексВложения];
			ИмяФайла = Вложение.ИмяФайла;
			
			Если Не Найти(ИмяФайла, ".xls") Тогда
				Продолжить;
			КонецЕсли;
			
			//логирование
			ОшибкаЗаписиВнешнегоИсточника = "";
			ПараметрыЗаписиЛога.ИмяФайла = ИмяФайла;
			ПараметрыЗаписиЛога.Данные = Вложение.Данные;
			ЗагрузкаДанныхИзПочтыСервер.ЗаписатьСтрокуЛогаЗагрузкиДанных(ПараметрыЗаписиЛога, ОшибкаЗаписиВнешнегоИсточника);
			
			ПараметрыОбработки = Новый Структура("АдресОтправителя,Контрагент,ИмяФайла,СтруктураДоступаSync,АдресаУведомленияСИсходником,АдресаУведомленияБезИсходника", АдресОтправителя, Контрагент, ИмяФайла, СтруктураДоступаSync, АдресаУведомленияСИсходником, АдресаУведомленияБезИсходника);
			
			ПрочитатьИОбработатьТаблицуЗаявокНаЗаборИзВложения(Вложение, ПараметрыОбработки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Поч.Отключиться();
	
КонецПроцедуры

//Асеев 26.10.2021 (Задача № 4699)<<<

Процедура РегламентЗагрузкаЗаявокНаЗаборИзПочты() Экспорт
	
	//Асеев 26.10.2021 (Задача № 4699)>>>
	ЗагрузкаЗаявокНаЗаборИзПочты();
	//Асеев 26.10.2021 (Задача № 4699)>>>
	
КонецПроцедуры	
