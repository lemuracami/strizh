// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	Возврат ОбновлениеКонфигурации.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	// СтандартныеПодсистемы.ОбменДанными
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО", "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбменДаннымиВключен",                           "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена",                       "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",          "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                    "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает флаг доступности подсистемы ПолучениеФайловИзИнтернета.
//
// ВозвращаемоеЗначение - Булево - 
//  Истина - подсистема доступна, любое другое значение - подсистемв
//  не доступна
//
Процедура ДоступноПолучениеФайловИзИнтернета(ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = Истина;
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Выполняет дополнительные преобразования параметров подключения.
//
// Параметры:
// СтруктураПараметровПодключения - Структура:
//	- URL - Строка - Адрес опубликованного приложения.
//	- UserName - Строка - Имя пользователя сервиса.
//	- Password - Строка - Пароль пользователя сервиса.
// ИмяИнтерфейса - Строка.
//
// Пример реализации:
// 	// Перед подключением к сервису надо декодировать пароль из base64-представления:
//	Если СтруктураПараметровПодключения.Свойство("Password")
//		И ЗначениеЗаполнено(СтруктураПараметровПодключения.Password) Тогда
//
// 		СтруктураПараметровПодключения.password = Base64ВСтроку(СтруктураПараметровПодключения.password);
//
//  КонецЕсли;
//
Процедура ПреобразоватьПараметрыПодключенияКСервису(Знач СтруктураПараметровПодключения, Знач ИмяИнтерфейса = Неопределено) Экспорт
	
	
КонецПроцедуры

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временный файл.
//
// Параметры:
//   URL                  - Строка - url файла в формате
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     ПутьДляСохранения    - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//   ВозвращаемоеЗначение - (выходной параметр)
//     Структура, со свойствами
//       Статус - Булево - ключ присутствует в структуре всегда, значения
//                         Истина - вызов функции успешно завершен
//                         Ложь   - вызов функции завершен неудачно
//       Путь   - Строка - путь к файлу на сервере, ключ используется только
//                         если статус Истина
//       СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Процедура СкачатьФайлНаСервере(Знач Адрес, Знач ПараметрыПолучения, ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	//// СтандартныеПодсистемы.РаботаСФайлами
	//РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	//// Конец СтандартныеПодсистемы.РаботаСФайлами
	//
	//// СтандартныеПодсистемы.ПрисоединенныеФайлы
	//ПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	//// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	//
	//// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	//ДополнительныеОтчетыИОбработки.ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	//// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	//
	//// СтандартныеПодсистемы.Пользователи
	//ПользователиСлужебный.ПриПолученииПользователя(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	//// Конец СтандартныеПодсистемы.Пользователи
	//
	//// СтандартныеПодсистемы.УправлениеДоступом
	//УправлениеДоступомСлужебный.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	//// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(Источник = Неопределено, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
	//// СтандартныеПодсистемы.ОбменДанными
	//// Вставка кода от подсистемы обмена данными должна быть первой.
	ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	//// Конец СтандартныеПодсистемы.ОбменДанными
	//
	//// СтандартныеПодсистемы.РаботаСФайлами
	//РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	//// Конец СтандартныеПодсистемы.РаботаСФайлами
	//
	//// СтандартныеПодсистемы.ПрисоединенныеФайлы
	//ПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	//// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	//
	//// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	//ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	//// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	//
	//// СтандартныеПодсистемы.Пользователи
	//ПользователиСлужебный.ПриОтправкеПользователя(ЭлементДанных, ОтправкаЭлемента);
	//// Конец СтандартныеПодсистемы.Пользователи
	//
	//// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	//// Вставка кода от подсистемы обмена данными в модели сервиса должна быть последней.
	//ОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	//// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПолучитьПоддерживаемыеВерсииПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДанными", МассивВерсий);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	//// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	//МассивВерсий = Новый Массив;
	//МассивВерсий.Добавить("2.0.1.6");
	//МассивВерсий.Добавить("2.1.1.7");
	//СтруктураПоддерживаемыхВерсий.Вставить("ОбменДаннымиВМоделиСервиса", МассивВерсий);
	//// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	//
	//// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	//МассивВерсий = Новый Массив;
	//МассивВерсий.Добавить("2.0.1.6");
	//МассивВерсий.Добавить("2.1.1.7");
	//СтруктураПоддерживаемыхВерсий.Вставить("ОбменСообщениями", МассивВерсий);
	//// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	//
	//// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	//МассивВерсий = Новый Массив;
	//МассивВерсий.Добавить("1.0.1.1");	
	//СтруктураПоддерживаемыхВерсий.Вставить("РезервноеКопированиеОбластейДанных", МассивВерсий);
	//// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
КонецПроцедуры