
Процедура ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина(НомерПотока,
	ИндексНачала,
	РазмерПорции,
	ЕстьОтборы, 
	ОбрабатыватьЗаказы,
	ОбрабатыватьФрахт,
	ОбрабатыватьЗаборы,
	РежимСравнения,
	ПорцияС,
	ПорцияДо,
	СписокЗаказов,
	ТабличнаяЧастьЗаказов, 
	СтатусЗаказаОтменен,
	СписокТерминалПриемки,
	СписокТерминалДоставки,
	СкладХраниения,
	СписокТипТарифа,
	флПропускатьЗагрузку,
	СписокТранспортныеКомпании,
	СписокМагазинов,
	СписокОсновнойМагазин, 
	КоличествоЗаказов,
	ТекПроц,
	СписокСсылокНаКонтрагента,
	НормальныйХодВыполнения,
	Контрагент,
	Договор,
	ДатаЗапрета,
	СписокБПноваМестнаяДоставка,
	СписокЗаборТовара,
	СписокКатегорияДоставки,
	СписокСтатусЗаказа,
	СписокТранспортПоГосНомерам,
	СписокФрахт,
	СписокГруз,
	ОбъектУТЛ_Рубли,
	КонтрагентДПД,
	ТочкаДПД,
	ТочкаДПД_Адрес,
	КонтрагентПитер,
	ТочкаПитер,
	ТочкаПитер_Адрес,
	СписокОбъектУТЛ_Контрагент,
	ДокументыПоЗаказу,
	НашаОрганизация,
	РозничныйТипЦен,
	Рубли,
	СкладПитер,
	СкладРеализации,
	НашСчет,
	глМасДог,
	КонтрагентМагазин_Shop_248,
	КонтрагентМагазин_Shop_601,
	КонтрагентМагазин_Shop_752,
	СписокИнтернетМагазинЯндекса,
	СписокНоменклатура,
	СписокСкладМагазина,
	СписокСтавкаНДС,
	ТоварRestore,
	Shop_602,
	Shop_612,
	РегиональныеТерминалы_СПбСтриж,
	МассивЗагруженныхНомеровЗаказов,
	МассивОбновленияОбъектовУТЛ,
	флСообщеноОбОтменеОбновленияДаты,
	РезНепр,
	ПрефиксКодовКонтрагентов,
	КомитентПер,
	ИМ_TopDelivery,
	Код_ИМ_TopDelivery,
	Руб,
	Орг,
	ДостПер,
	ШтукиПер,
	ВидНоменклатурыПер,
	КачествоНовый,
	СкладРеализацииПоДоставке,
	ГрТов,
	ВН,
	ОписаниеЭтапа,
	ИмяФайлаЛога, 
	ФлагДобавленияЗамены, 
	ФлагЗаписиПослеКаждойСтроки,
	ДатаЗаписиВНезагруженныеЗаказы
	//+++ БАО 26.07.2017 №1488
	, СписокТарифнаяСеткаПодъемаЗаказов
	//--- БАО 26.07.2017 №1488
	//+++ БАО 04.10.2017 №1900
	, ШтрихкодыТоваров
	//--- БАО 04.10.2017 №1900
	//+Степанов
	, СписокПоставщики
	//-Степанов
	//Асеев 29.09.2021 (Задача № 4667)>>>
	,СписокПВЗ
	//Асеев 29.09.2021 (Задача № 4667)<<<
	//Асеев 16.02.2023 (Задача № 4995)>>>
	,ТаблицаЗаказовКЗаборам
	//Асеев 16.02.2023 (Задача № 4995)<<<
	//Асеев 22.06.2023 (Задача № 5071)>>>
	,СписокТиповПозицийЗаказа
	//Асеев 22.06.2023 (Задача № 5071)<<<
	) Экспорт 
	
	МассивЗагруженныхНомеровЗаказов = Новый Массив;
	МассивЗагруженныхНомеровЗаказовДляКатегорий = Новый Массив;
	МассивЗагруженныхНомеровЗаказовДляПолигонов = Новый Массив;
	// Якурнов 19.10.2018 11:52:02  
	МассивЗагруженныхЗаказовДляПостОбработки = Новый Массив;
	//
	//Асеев 29.03.2022 (Задача № 4767)>>>
	МассивЗагруженныхЗаказов = Новый Массив;
	//Асеев 29.03.2022 (Задача № 4767)<<<
	
	//Асеев 05.12.2022 (Задача № 4939)>>>
	МассивНомеровЗаказовКОтклонению = Новый Массив;
	//Асеев 05.12.2022 (Задача № 4939)<<<
	
	//Асеев 04.09.2024 (Задача № 5317)>>>
	МассивЗаказовЗаборов = Новый Массив;
	//Асеев 04.09.2024 (Задача № 5317)<<<
	
	Если ИмяФайлаЛога <> "" Тогда 
		
		ИмяФайлаЛога = ИмяФайлаЛога + "" + НомерПотока;
		
		ЛогФайл = Новый("ТекстовыйДокумент");
		
		ФайлЛога = Новый Файл(ИмяФайлаЛога);
		
		Если ФлагДобавленияЗамены = 1 И ФайлЛога.Существует() Тогда
			ЛогФайл.Прочитать(ИмяФайлаЛога);				
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
		СоздатьВременныеТаблицы(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПодключениеКМагазину);
	Исключение
		НормальныйХодВыполнения = Ложь;
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "Не удалось создать подключение: "+ОписаниеОшибки());
		lem.ОтправитьНормальноеСообщениеАдминам("Подключение при обмене", "Не удалось создать подключение: "+ОписаниеОшибки());
	КонецПопытки;
	
	//+Степанов Задача № 3833
	//Асеев 11.09.2024 (Задача № 5321)>>>
	ТаблицаПараметровТарифовЗаказов = ТарификацияУслугСервер.СоздатьТаблицуПараметровТарифовЗаказов();
	//Асеев 11.09.2024 (Задача № 5321)<<<
	
	//+Степанов Задача № 3911
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Партнер КАК Партнер,
	               |	ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.ТипОплаты.Код КАК ТипОплатыКод
	               |ИЗ
	               |	РегистрСведений.ТипыОплатТребованиеИдентификацииКлиентов.СрезПоследних(, Партнер В (&Партнеры)) КАК ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних
	               |ГДЕ
	               |	ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Учитывать
	               |ИТОГИ ПО
	               |	Партнер";
	Запрос.УстановитьПараметр("Партнеры", СписокМагазинов.ВыгрузитьКолонку("Магазин"));
	ТипыОплатДляФормированияКИК = Новый Соответствие;
	ВыборкаПоПартнерам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПартнерам.Следующий() Цикл
		МассивТиповОплат = Новый Массив;
		ВыборкаТиповОплат = ВыборкаПоПартнерам.Выбрать();
		Пока ВыборкаТиповОплат.Следующий() Цикл
			МассивТиповОплат.Добавить(ВыборкаТиповОплат.ТипОплатыКод);
		КонецЦикла;	
		ТипыОплатДляФормированияКИК.Вставить(ВыборкаПоПартнерам.Партнер, МассивТиповОплат);
	КонецЦикла;	
	//-Степанов Задача № 3911
	
	ХранилищеОбъектовСравнения = СоздатьТЗОбъетов();
	
	СчетчикСтрокЗаказа = 0;
	
	//Позицианируемся на нужную строку
	
	//+++ БАО 14.07.2017 №
	//---Стр = ТабличнаяЧастьЗаказов[СчетчикСтрокЗаказа];
	//--- БАО 14.07.2017 №
	
	Индекс = ИндексНачала;
	Заказ =  СписокЗаказов[Индекс];               
	НомерЗаказа             = Заказ.orderId_Ч;
	
	БылЗаказВТЧ = Ложь;
	
	//CeHbKA 20.02.2019 №2831
	ТаблицаМестЗаказов = ПолучитьТаблицуМестЗаказов(ТабличнаяЧастьЗаказов);
	//CeHbKA 20.02.2019 №2831
	
	Для СчетчикЗаказов = 1 По РазмерПорции  Цикл
		
		Индекс = ?(СчетчикЗаказов = 1, ИндексНачала, Индекс + 1);
		Заказ =  СписокЗаказов[Индекс];
		
		//Если Заказ.selfDelivery_Ч = 0 И БылЗаказВТЧ = Ложь Тогда
		Если БылЗаказВТЧ = Ложь Тогда
			
			СчетчикСтрокЗаказа = 0;
			
			НомерЗаказа          = ЧислоКСтрокеБезПробелов(Заказ.orderId_Ч);
			
			Для Каждого СтрокиТЧ Из ТабличнаяЧастьЗаказов Цикл 
				
				Если ЧислоКСтрокеБезПробелов(СтрокиТЧ.orderId_Ч) = НомерЗаказа Тогда
					
					БылЗаказВТЧ = Истина;
					Прервать;
					
				КонецЕсли;
				
				СчетчикСтрокЗаказа = СчетчикСтрокЗаказа + 1;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылЗаказВТЧ = Ложь Тогда
		
		СчетчикСтрокЗаказа =  ТабличнаяЧастьЗаказов.Количество();
		
	КонецЕсли;	
	
	Счетчик = 1; 
	
	ХранилищеОбъектовСравнения = СоздатьТЗОбъетов(); 
	
	//Асеев 24.02.2022 (Задача № 4745)>>>
	МассивНомеровЗаказов = Новый Массив;
	//Асеев 24.02.2022 (Задача № 4745)<<<
	
	//+++ БАО 14.07.2017 №
	ПостификсАпдекса = "";
	Для СчетчикЗаказов = 1 По РазмерПорции  Цикл
		
		Индекс = ?(СчетчикЗаказов = 1, ИндексНачала, Индекс + 1);
		Заказ =  СписокЗаказов[Индекс];
		
		стрНомерЗаказа          = ЧислоКСтрокеБезПробелов(Заказ.orderId_Ч);
		
		ПостификсАпдекса = ПостификсАпдекса + ",  " + стрНомерЗаказа;
		
		//Асеев 24.02.2022 (Задача № 4745)>>>
		МассивНомеровЗаказов.Добавить(Заказ.orderId_Ч);
		//Асеев 24.02.2022 (Задача № 4745)<<<
		
	КонецЦикла;
	//--- БАО 14.07.2017 №
	
	//Асеев 24.02.2022 (Задача № 4745)>>>
	ТаблицаСсылокНаОтслеживаниеЗаказов = ИнформированиеКлиентовОДоставкеСервер.ПолучитьСсылкиНаОтслеживаниеЗаказов(МассивНомеровЗаказов);
	//Асеев 24.02.2022 (Задача № 4745)<<<
	
	//+++ БАО 26.07.2017 №1488
	СписокМетодОплатыПодъемаЗаказа = ТарифыНаПодъемЗаказаНаЭтажСервер.ПолучитьСписокМетодОплатыУслугиПодъема();
	//--- БАО 26.07.2017 №1488
	
	Для СчетчикЗаказов = 1 По РазмерПорции  Цикл
		
		Индекс = ?(СчетчикЗаказов = 1, ИндексНачала, Индекс + 1);
		Заказ =  СписокЗаказов[Индекс];
		
		стрНомерЗаказа          = ЧислоКСтрокеБезПробелов(Заказ.orderId_Ч);
		
		ВозвратДокОбъект = Неопределено;
		ПеремещениеДокОбъект = Неопределено;
		ПоступлениеДокОбъект = Неопределено;
		НайЗабор = Неопределено;
		РеализацияДокОбъект = Неопределено;
		
		
		//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
		ЗаписьДополнительныеПараметрыЗаказа = Новый Структура;
		//+Степанов Задача № 3527 
		Если Не ПустаяСтрока(Заказ.latitude) И Не ПустаяСтрока(Заказ.longitude) Тогда
			Попытка
				ЗаписьДополнительныеПараметрыЗаказа.Вставить("Широта",Число(Заказ.latitude));
				ЗаписьДополнительныеПараметрыЗаказа.Вставить("Долгота",Число(Заказ.longitude));
			Исключение
			КонецПопытки;
		КонецЕсли;
		//-Степанов Задача № 3527 
		//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
		
		//Если Заказ.status_Ч = 4 И Заказ.Shop_Ч = 592 Тогда
		//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "---- !!!!!!!     : Заказ Axiomus-SPB   !!!!!!!!!!!!!!!: " + Строка(Заказ.orderId_Ч) + " - пропущен");
		//	Продолжить;	
		//КонецЕсли;
		
		//Асеев 24.02.2022 (Задача № 4745)>>>
		СтрокаТаблицы = ТаблицаСсылокНаОтслеживаниеЗаказов.Найти(Заказ.orderId_Ч, "НомерЗаказа");
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("СсылкаНаОтслеживание", СтрокаТаблицы.СсылкаНаОтслеживание);
		КонецЕсли;
		//Асеев 24.02.2022 (Задача № 4745)<<<
		
		//+++ Костя 140915 // Если дата доставки не указана - не загружать.
		Если Заказ.deliveryDate_Д = Null Тогда 
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "---- ОШИБКА: Не указана дата доставки, заказ: " + Строка(Заказ.orderId_Ч) + " -не загружен.");
			//МассивЗагруженныхНомеровЗаказов.Добавить(ЧислоКСтрокеБезПробелов(Заказ.Номер));
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
			НайденныеСтрокиТЧ = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайСтрТЧ Из НайденныеСтрокиТЧ Цикл 
				СчетчикСтрокЗаказа = СчетчикСтрокЗаказа + 1;
			КонецЦикла;
			
			УвеличитьСчетчик(РазмерПорции, Счетчик, ТекПроц);
			
			Продолжить;
			
		КонецЕсли;
		//--- Костя
		
		НовыйОбъект = Ложь;
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ВозниклаОшибка               = Ложь;
		флРазрешеноОбновлениеЗаказа  = Истина;
		флЗаполнятьРеализацию        = Ложь;
		флНужноЗаписыватьДоставку    = Ложь;
		флНужноЗаписыватьГруз        = Ложь;
		флЗаполнятьВозвратПоставщику = Ложь;
		флЗаполнятьПоступление       = Ложь;
		флЗаполнятьВозврат           = Ложь;
		
		//+++ БАО 30.06.2017 №1222   
		
		Если ЕстьОтборы Тогда
			
			Обрабатывать = Ложь;
			
			//+Степанов Задача № 4071
			//Если ОбрабатыватьЗаказы И  Заказ.selfDelivery_Ч = 0 Тогда
			Если ОбрабатыватьЗаказы И  (Заказ.selfDelivery_Ч = 0 Или Заказ.selfDelivery_Ч = 4 Или Заказ.selfDelivery_Ч = 5) Тогда	
				Обрабатывать = Истина;
				
			КонецЕсли;	
			
			Если ОбрабатыватьЗаборы И  Заказ.selfDelivery_Ч = 2 Тогда
				
				Обрабатывать = Истина;
				
			КонецЕсли;	
			
			Если ОбрабатыватьФрахт И  Заказ.selfDelivery_Ч = 3 Тогда
				
				Обрабатывать = Истина;
				
			КонецЕсли;	
			
			Если Не Обрабатывать Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
				НайденныеСтрокиТЧ = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайСтрТЧ Из НайденныеСтрокиТЧ Цикл 
					СчетчикСтрокЗаказа = СчетчикСтрокЗаказа + 1;
				КонецЦикла;
				
				УбратьЗаказИзРегистрации(ДатаЗаписиВНезагруженныеЗаказы, ИмяФайлаЛога, ЛогФайл, стрНомерЗаказа, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки);
				УвеличитьСчетчик(РазмерПорции, Счетчик, ТекПроц);
				
				Продолжить;
				
			КонецЕсли;	
			
			Если СтатусЗаказаОтменен И  Заказ.status_Ч <> 4 Тогда
				
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
				НайденныеСтрокиТЧ = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайСтрТЧ Из НайденныеСтрокиТЧ Цикл 
					СчетчикСтрокЗаказа = СчетчикСтрокЗаказа + 1;
				КонецЦикла;
				
				УбратьЗаказИзРегистрации(ДатаЗаписиВНезагруженныеЗаказы, ИмяФайлаЛога, ЛогФайл, стрНомерЗаказа, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки);
				УвеличитьСчетчик(РазмерПорции, Счетчик, ТекПроц);
				
				Продолжить;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		//--- БАО 30.06.2017 №1222   
		
		//+++ БАО 29.06.2017 №1208 
		APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.APDEX_КлючевыеОперации.ЗагрузкаИзИнтернетМагазина_ОбработатьЗаказы_ОдинЗаказ);
		//--- БАО 29.06.2017 №1208 
		
		
		
		Если Не Заказ.deliveryDate_Д = Null Тогда
			Если Заказ.deliveryDate_Д < '20000101' Тогда
				Заказ.deliveryDate_Д = Null;
			КонецЕсли;
		КонецЕсли;
		
		Если Заказ.completeDate_Д < '20000101' Тогда
			Заказ.completeDate_Д = ?(Заказ.deliveryDate_Д = Null, Заказ.createDate_Д, Заказ.deliveryDate_Д);
		КонецЕсли;
		
		СтатусЗаказа            = Заказ.status_Ч;
		НомерЗаказа             = Заказ.orderId_Ч;
		стрНомерЗаказа          = ЧислоКСтрокеБезПробелов(НомерЗаказа);
		ДатаСозданияЗаказа      = Заказ.createDate_Д;
		СтоимостьДоставки       = Заказ.deliveryPrice_Ч + Заказ.deliveryForMkadRUR_Ч;
		СтоимостьДоставкиДоМкад = Заказ.deliveryPrice_Ч;
		СтоимостьДоставкиЗаМкад = Заказ.deliveryForMkadRUR_Ч;
		ДатаЗакрытияЗаказа      = Заказ.completeDate_Д;
		БанковскаяКомиссия      = Заказ.BankKom_Ч;
		//Бухаров
		НомерВнешнегоЗаказа     = Заказ.orderIDImport;
		ТипОплаты               = Заказ.pay_type_Ч;
		КатегорияДоставки       = Заказ.typeDelivery_Ч;
		ОбщийВесЗаказа          = Заказ.OrderWeight_Ч;
		ЧистыеСД                = Заказ.serviceDCclean_Ч;
		
		КоличествоМестЗ         = Заказ.PiecesOfFreight_Ч;
		ОбъёмЗ                  = Заказ.orderVolume_Ч;
		//Асеев 13.12.2022 (Задача № 4949)>>>
		//ДатаПриемки             = Заказ.shipmentWHDate_Д;
		ДатаПриемки             = Заказ.shipmentDate_Д;
		//Асеев 13.12.2022 (Задача № 4949)<<<
		ТерминалПриемкиКод      = Заказ.sourcePlaceId_Ч;
		ТерминалДоставкиКод     = Заказ.deliveryPlaceId_Ч;
		
		//+++ БАО 31.05.2017 №926
		//ТерминалПриемки       = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТерминалПриемкиКод);
		//ТерминалДоставки      = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТерминалДоставкиКод);
		
		//Если ЗначениеЗаполнено(ТерминалДоставки) Тогда
		//	Если Не ТерминалДоставки.Склад.Пустая() Тогда
		//		СкладХраниения = ТерминалДоставки.Склад.Ссылка;
		//	КонецеСли;
		//КонецеСли;	
		
		//+Широков Задача 4323 29.10.2020
		//PrepaymentAmount => РТиУ.СуммаПредоплаты
		ТарифРасчетаСтоимостиДоставки = Заказ.deliveryCostCalculationTariffId;
		ЗаписьДополнительныеПараметрыЗаказа.Вставить("ТарифРасчетаСтоимостиДоставки", ТарифРасчетаСтоимостиДоставки); 
		//-Широков Задача 4323 29.10.2020
		
	
		//+Широков Задача 4401 13.01.2021
		ТарифСуммаПредоплаты = Заказ.PrepaymentAmount;
		ЗаписьДополнительныеПараметрыЗаказа.Вставить("СуммаПредоплаты", ТарифСуммаПредоплаты); 
		СуммаПредоплаты            = Заказ.PrepaymentAmount;
		//-Широков Задача 4401 13.01.2021
	
		//+Широков Задача 4461 03.02.2021
		ТарифНегабаритныйЗаказ = Заказ.oversizedGoods;
		ЗаписьДополнительныеПараметрыЗаказа.Вставить("НегабаритныйЗаказ", ТарифНегабаритныйЗаказ); 
		СуммаПредоплаты            = Заказ.PrepaymentAmount;
		//-Широков Задача 4461 03.02.2021
		
		
		//+Широков Задача 4531 02.04.2021
		Если НЕ Число(Заказ.agregatorId) = 0 Тогда
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("Агрегатор", НайтиМаркетплэйс(Заказ.agregatorId)); 
		КонецЕсли;
		//-Широков Задача 4531 02.04.2021
		
		//+Широков Задача 4565 19.05.2021
		Если НЕ Заказ.calcByVolumetricWeight_Ч = Null Тогда
			Если ЗначениеЗаполнено(Заказ.calcByVolumetricWeight_Ч) Тогда
				//Если НЕ СокрЛП(Заказ.calcByVolumetricWeight) = "" Тогда
				Если Число(Заказ.calcByVolumetricWeight_Ч) = 1 Тогда
					ЗаписьДополнительныеПараметрыЗаказа.Вставить("ТарификацияПоОбъемномуВесу", Истина); 
				Иначе
					ЗаписьДополнительныеПараметрыЗаказа.Вставить("ТарификацияПоОбъемномуВесу", Ложь); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Заказ.chargeableVolumetricWeight_Ч = Null Тогда
			Если ЗначениеЗаполнено(Заказ.chargeableVolumetricWeight_Ч) Тогда
				//Если НЕ Число(Заказ.chargeableVolumetricWeight) = 0 Тогда
					ЗаписьДополнительныеПараметрыЗаказа.Вставить("ТарифицируемыйОбъемныйВес", Число(Заказ.chargeableVolumetricWeight_Ч)); 
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//+Широков Задача 4565 19.05.2021
		
		//+Широков Задача 4521 02.04.2021
		Если НЕ СокрЛП(Заказ.routingOperator) = "" Тогда
			ВнешнийОператорМаршрутизацииКод = "Shop_" + ЧислоКСтрокеБезПробелов(Заказ.routingOperator);
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("ВнешнийОператорМаршрутизации", НайтиКонтрагента(ВнешнийОператорМаршрутизацииКод)); 
		КонецЕсли;
		//-Широков Задача 4521 02.04.2021
		//+++ БАО 26.07.2017 №1488
		ТарифнаяСеткаПодъемаЗаказов = СписокТарифнаяСеткаПодъемаЗаказов.Получить(Формат(Заказ.tariff_Rise, "ЧГ=0"));  
		ЗаписьДополнительныеПараметрыЗаказа.Вставить("ТарифнаяСеткаПодъемаЗаказов", ТарифнаяСеткаПодъемаЗаказов);
		
		МетодОплатыПодъемаЗаказа = СписокМетодОплатыПодъемаЗаказа.Получить(Строка(Заказ.who_pay_rise));
		ЗаписьДополнительныеПараметрыЗаказа.Вставить("МетодОплатыПодъемаЗаказа", МетодОплатыПодъемаЗаказа);
		//--- БАО 26.07.2017 №1488
		
		// МАС - 17.04.2018 - № --->> 
		Если ЗначениеЗаполнено(Заказ.Email) Тогда		
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("EmailКлиента", СокрЛП(Строка(Заказ.Email)));		
		КонецЕсли;	
		// <<--- МАС 	
		
		//Асеев 29.09.2021 (Задача № 4667)>>>
		Если Заказ.pickupPointID_Ч Тогда
			ПунктПВЗ = СписокПВЗ[Заказ.pickupPointID_Ч];
			Если ПунктПВЗ = Неопределено Тогда
				СтруктураПВЗ = Новый Структура("pickupPointID_Ч,pnt_externalId,pnt_name,pnt_address,pnt_shopId_Ч");
				ЗаполнитьЗначенияСвойств(СтруктураПВЗ, Заказ);
				
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				Попытка
					
					БлокировкаДанных = Новый БлокировкаДанных;
					
					ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ПунктыПВЗ");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					
					БлокировкаДанных.Заблокировать();
					
					ПунктПВЗ = РаботаСПВЗСервер.СоздатьПВЗ(СтруктураПВЗ);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение ОписаниеОшибки();
				КонецПопытки;
				
				СписокПВЗ.Вставить(Заказ.pickupPointID_Ч, ПунктПВЗ);
			КонецЕсли;
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("ПунктПВЗ", ПунктПВЗ);
		КонецЕсли;
		//Асеев 29.09.2021 (Задача № 4667)<<<
		
		//Асеев 25.10.2021 (Задача № 4695)>>>
		Если Заказ.deliveryServiceLevel_Ч = 0 Тогда
			УровеньОбслуживанияЗаказа = Перечисления.УровниОбслуживания.СтандартныйУровень;
		ИначеЕсли Заказ.deliveryServiceLevel_Ч = 1 Тогда
			УровеньОбслуживанияЗаказа = Перечисления.УровниОбслуживания.VIPУровень;
		Иначе
			УровеньОбслуживанияЗаказа = Неопределено;
		КонецЕсли;
		Если УровеньОбслуживанияЗаказа <> Неопределено Тогда
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("УровеньОбслуживанияЗаказа", УровеньОбслуживанияЗаказа);
		КонецЕсли;
		//ЗаписьДополнительныеПараметрыЗаказа.Вставить("УровеньОбслуживанияЗаказа", Перечисления.УровниОбслуживания.СтандартныйУровень);
		//Асеев 25.10.2021 (Задача № 4695)<<<		
		
		ТерминалПриемки         = СписокТерминалПриемки.Получить(ТерминалПриемкиКод);
		
		НайденнаяСтрокаТерминалДоставки        = СписокТерминалДоставки.Получить(ТерминалДоставкиКод);
		Если НайденнаяСтрокаТерминалДоставки <> Неопределено Тогда
			ТерминалДоставки = НайденнаяСтрокаТерминалДоставки.ТерминалДоставки;
			СкладТерминалДоставки = НайденнаяСтрокаТерминалДоставки.СкладТерминалДоставки;
		Иначе
			ТерминалДоставки = Справочники.РегиональныеТерминалы.ПустаяСсылка();
			СкладТерминалДоставки = СкладХраниения;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТерминалДоставки) Тогда
			Если Не СкладТерминалДоставки.Пустая() Тогда
				СкладХраниения = СкладТерминалДоставки;
			КонецеСли;
		КонецеСли;	
		
		//--- БАО 31.05.2017 №926
		
		//+++ Костя 040915
		//МетодСозданияЗаказа
		Если Заказ.CreateWay_Ч > 0 Тогда
			КодМетодСозданияЗаказа = Заказ.CreateWay_Ч;
			Если 	  КодМетодСозданияЗаказа = 1 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_MMC;
			ИначеЕсли КодМетодСозданияЗаказа = 2 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Strizh;
			ИначеЕсли КодМетодСозданияЗаказа = 3 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Yandex;
			ИначеЕсли КодМетодСозданияЗаказа = 4 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.XLS;
			ИначеЕсли КодМетодСозданияЗаказа = 5 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.WEB_Интерфейс;
			ИначеЕсли КодМетодСозданияЗаказа = 6 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.Email_1C;
			ИначеЕсли КодМетодСозданияЗаказа = 7 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_MMCv2;
			ИначеЕсли КодМетодСозданияЗаказа = 8 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Strizh_Ext;	
			ИначеЕсли КодМетодСозданияЗаказа = 9 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.OZONE;				
			ИначеЕсли КодМетодСозданияЗаказа = 10 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.Copy;				
			ИначеЕсли КодМетодСозданияЗаказа = 11 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Кораблик;				
			ИначеЕсли КодМетодСозданияЗаказа = 12 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_LM;	
			ИначеЕсли КодМетодСозданияЗаказа = 13 Тогда
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_5Post;								
			Иначе 
				МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.ПустаяСсылка();
			КонецЕсли;
		Иначе 
			МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.ПустаяСсылка();
		КонецЕсли;
		//--- Костя 040915
		
		ТипТарифаЧ      = Заказ.tariffType_Ч;
		РасчетныйБрейкЧ = Заказ.tariffCategoryId_Ч;
		
		ТарифЧ          = Заказ.tariffID_Ч;
		
		//+++ БАО 31.05.2017 №926
		
		//ТипТарифа = Справочники.ТипыТарифов.НайтиПоКоду(ТипТарифаЧ);
		//Если ТипТарифа.Пустая() Тогда
		//	ТипТарифа = Справочники.ТипыТарифов.ОсновнаяТарифнаяСетка;
		//КонецЕСли;	
		//
		//ЗапБр = Новый Запрос;
		//ЗапБр.Текст = "ВЫБРАТЬ
		//|	РасчетныеБрейки.Ссылка КАК РасчетныйБрейк
		//|ИЗ
		//|	Справочник.РасчетныеБрейки КАК РасчетныеБрейки
		//|ГДЕ
		//|	РасчетныеБрейки.КодБрейка = &КодБрейка
		//|	И РасчетныеБрейки.Владелец.Ссылка = &Владелец";
		//ЗапБр.УстановитьПараметр("КодБрейка", РасчетныйБрейкЧ);			  
		//ЗапБр.УстановитьПараметр("Владелец", ТипТарифа);			  
		//
		//РезБр = ЗапБр.Выполнить();
		//
		//Если РезБр.Пустой() Тогда
		//	РасчетныйБрейк = Справочники.РасчетныеБрейки.ПустаяСсылка();
		//Иначе	
		//	ВыбБр = РезБр.Выбрать();
		//	Если ВыбБр.Следующий() Тогда
		//		РасчетныйБрейк = ВыбБр.РасчетныйБрейк;
		//	Иначе	
		//		РасчетныйБрейк = Справочники.РасчетныеБрейки.ПустаяСсылка();
		//	КонецеСли;	
		//КонецеСли;	
		
		НайденнаяСтрока = СписокТипТарифа.Получить(ТипТарифаЧ);
		
		Если НайденнаяСтрока <> Неопределено Тогда 
			
			ТипТарифа      = НайденнаяСтрока.ТипТарифа;
			
			//+Степанов Брейк ищем потом, по тарифной сетке партнера и tariffCategoryId_Ч. 
			//РасчетныйБрейк = НайденнаяСтрока.РасчетныйБрейк;
			//-Степанов
		Иначе 
			
			ТипТарифа      = Справочники.ТипыТарифов.ОсновнаяТарифнаяСетка;
			//+Степанов Брейк ищем потом, по тарифной сетке партнера и tariffCategoryId_Ч.
			//РасчетныйБрейк = Справочники.РасчетныеБрейки.ПустаяСсылка();
			//-Степанов
		КонецЕсли;	
		
		
		//--- БАО 31.05.2017 №926
		
		АгВ  = Заказ.AgentComission_Ч;
		//Бухаров		
		
		Если флПропускатьЗагрузку Тогда
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, " # " + стрНомерЗаказа);
			Продолжить;
		КонецЕсли;
		
		СД = Заказ.servicedelivery_Ч;
		
		//+++ БАО 31.05.2017 №926
		
		//ТранспортнаяКомпания = Справочники.ТранспортныеКомпании.НайтиПоКоду(СД);
		ТранспортнаяКомпания = СписокТранспортныеКомпании.Получить(СД);
		Если ТранспортнаяКомпания = Неопределено Тогда 
			ТранспортнаяКомпания = Справочники.ТранспортныеКомпании.ПустаяСсылка();
		КонецЕсли;	
		
		
		//+++ БАО 31.05.2017 №926
		//---КонтрагентМагазин = ПодготовитьМагазин(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Заказ);
		//---ФлАвтоматическоеПоступление = КонтрагентМагазин.Автопоступление;
		
		//НайденнаяСтрокаСписокМагазинов = СписокМагазинов.Получить(ПреобразоватьКодМагазина(Заказ.shop_Ч));	
		
		
		Адрес = Заказ.Addr;
		Если Лев(Адрес, 11) = "Москва и МО" Тогда
			Адрес = СокрЛ(Сред(Адрес, 12));
		КонецЕсли;
		
		
		Если Лев(Адрес, 10) = "Москва г. " Тогда
			Адрес = "Москва, " + Сред(Адрес, 11);
		КонецЕсли;
		ЧВ = СтрЧислоВхождений(Адрес, "Москва");
		
		Если ЧВ >= 2 Тогда //   Или ЧВ = 0
			Адрес = СтрЗаменить(Адрес, "Москва", "");
			Адрес = "Москва, " + Адрес;
		КонецеСли;	
		
		Адрес = СокрП(Лев(Адрес, 150));
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодМагазина", ПреобразоватьКодМагазина(Заказ.shop_Ч));
		Отбор.Вставить("Адрес", Адрес);
		
		НайденнаяСтрокаСписокМагазинов = Неопределено;
		
		НайденныеСтроки = СписокМагазинов.НайтиСтроки(Отбор);
		//Нашли по адресу
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденнаяСтрокаСписокМагазинов = НайденныеСтроки[0];
			
		Иначе 
			
			//По адресу не нашли ищем только магазин
			Отбор = Новый Структура;
			Отбор.Вставить("КодМагазина", ПреобразоватьКодМагазина(Заказ.shop_Ч));
			
			НайденныеСтроки = СписокМагазинов.НайтиСтроки(Отбор);
			//Нашли по адресу
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрокаСписокМагазинов = НайденныеСтроки[0];
			КонецЕсли;	
			
		КонецЕсли;	
		
		
		ОсновнойБанковскийСчет_КонтрагентМагазин = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда 
			
			КонтрагентМагазин = НайденнаяСтрокаСписокМагазинов.Магазин;
			ФлАвтоматическоеПоступление = НайденнаяСтрокаСписокМагазинов.Автопоступление;
			ОсновнойБанковскийСчет_КонтрагентМагазин = НайденнаяСтрокаСписокМагазинов.ОсновнойБанковскийСчет; 
			ДоговорМагазина = НайденнаяСтрокаСписокМагазинов.ДоговорКомитента;
			
			Если Не ЗначениеЗаполнено(ДоговорМагазина) Тогда
				ДоговорМагазина   = ПолучитьДоговорКомитента(КонтрагентМагазин, Истина); //Храним товар как комиссионный
				НайденнаяСтрокаСписокМагазинов.ДоговорКомитента = ДоговорМагазина;
			КонецЕсли;
			
			НайТариф = НайденнаяСтрокаСписокМагазинов.ТарифнаяСетка;;
			ПредварительноеЗакрытиеЗаказов = НайденнаяСтрокаСписокМагазинов.ПредварительноеЗакрытиеЗаказов;
			
		Иначе 
			
			КонтрагентМагазин = ПодготовитьМагазин(ПодключениеКМагазину, ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Заказ, КомитентПер, ИМ_TopDelivery, Код_ИМ_TopDelivery, Руб, Орг, ХранилищеОбъектовСравнения, РежимСравнения, Истина, ФлАвтоматическоеПоступление, СписокОсновнойМагазин);
			ДоговорМагазина   = ПолучитьДоговорКомитента(КонтрагентМагазин, Истина); //Храним товар как комиссионный
			НайТариф = Неопределено;
			ФлАвтоматическоеПоступление = Истина;
			ОсновнойБанковскийСчет_КонтрагентМагазин = Неопределено;
			ПредварительноеЗакрытиеЗаказов = Неопределено;
			
			
			
			//НайденнаяСтрокаСписокМагазинов.Вставить(ПреобразоватьКодМагазина(Заказ.shop_Ч), Новый Структура("Магазин, Автопоступление, ДоговорКомитента, ТарифнаяСетка, ТочкиДоставки, ссылкаАдрес, ОсновнойБанковскийСчет, КодСкладМагазинаПоУмолчанию, ПредварительноеЗакрытиеЗаказов, СкладМагазинаПоУмолчанию", 
			//	КонтрагентМагазин, ФлАвтоматическоеПоступление, ДоговорМагазина, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено));
			
			
			НайденнаяСтрокаСписокМагазинов = СписокМагазинов.Добавить();
			НайденнаяСтрокаСписокМагазинов.КодМагазина = Заказ.shop_Ч;
			
			НайденнаяСтрокаСписокМагазинов.Магазин = КонтрагентМагазин; 
			НайденнаяСтрокаСписокМагазинов.Автопоступление = ФлАвтоматическоеПоступление; 
			НайденнаяСтрокаСписокМагазинов.ДоговорКомитента = ДоговорМагазина; 
			НайденнаяСтрокаСписокМагазинов.ТарифнаяСетка = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ссылкаАдрес = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ОсновнойБанковскийСчет = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ПредварительноеЗакрытиеЗаказов = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.Адрес = Адрес; 
			
			//+++ БАО 30.06.2017 №1230    
			НайденнаяСтрокаСписокМагазинов.ЕстьПараметрыКонтрагента = Неопределено;
			НайденнаяСтрокаСписокМагазинов.ВычисляемыйЗапретЧастичногоВыкупа = Неопределено; 
			НайденнаяСтрокаСписокМагазинов.ЗапретЧастичногоВыкупа = Неопределено; 
			//--- БАО 30.06.2017 №1230    
			
			
		КонецЕсли;	
		
		//--- БАО 31.05.2017 №926
		
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "Обработка заказа " + стрНомерЗаказа + ", статус " + СтатусЗаказа + ", магазин " + КонтрагентМагазин + ?(ФлАвтоматическоеПоступление, " (автопоступление)", ""));
		//+++ БАО 06.07.2017 №1250
		//---Проц = Окр(Счетчик * 100 / КоличествоЗаказов);
		//  Проц = Окр(Счетчик * 100 / РазмерПорции);
		//  
		//  //--- БАО 06.07.2017 №1250 
		//  Если Проц <> ТекПроц Тогда
		//  	ТекПроц = Проц;
		//  	
		//  		
		//  		//+++ БАО 05.07.2017 №1250
		//  		//---Состояние(ОписаниеЭтапа + " " + ТекПроц + "%");
		//  		
		//  		Сообщение = Новый СообщениеПользователю;
		//  		Сообщение.Текст = "Прогресс" + Символы.ПС + ТекПроц;
		//  		Сообщение.Сообщить();
		//  		
		//  		//--- БАО 05.07.2017 №1250 
		//
		//  	
		//  КонецЕсли;
		//  Счетчик = Счетчик + 1;
		
		//+++ БАО 31.05.2017 №926
		//Это уже сделал
		//--- БАО 31.05.2017 №926
		КонтрагентИДоговор = ПодобратьКонтрагентаИДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг,  Заказ, ПрефиксКодовКонтрагентов, СписокСсылокНаКонтрагента);
		
		Если Не НормальныйХодВыполнения Тогда
			//+++ БАО 04.07.2017 №1250
			//---Возврат;
			Прервать;
			//--- БАО 04.07.2017 №1250 
		КонецЕсли;
		КонтрагентИДоговор.Свойство("Контрагент", Контрагент);
		КонтрагентИДоговор.Свойство("Договор", Договор);
		Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Или 
			Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Или 
			Контрагент = Неопределено Или 
			Договор = Неопределено Тогда
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка поиска контрагента или договора: <" + Контрагент + "> <" + Договор + ">");
			ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "!!!Ошибка поиска контрагента или договора: <" + Контрагент + "> <" + Договор + ">");
			//флОбновлятьДатуПоследнейЗагрузки = Ложь;
			Продолжить;
		КонецЕсли;
		//+++ БАО 31.05.2017 №926
		//Это не нужно, тем более лишнее разыминование
		//Если Договор.Владелец <> Контрагент Тогда
		//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка: найденный договор относится к другому контрагенту: код контрагента = " + Контрагент.Код + ", код договора=" + Договор.Код);
		//	Продолжить;
		//КонецЕсли;
		//--- БАО 31.05.2017 №926
		
		
		
		ПучокДокументов = Новый Массив;
		ВозвратДок = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
		РеализацияДок = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		ПеремещениеДок = Документы.ПеремещениеТоваров.ПустаяСсылка();
		//ВозвратПоставщикуДок = Документы.ВозвратТоваровПоставщику.ПустаяСсылка();
		ПоступлениеДок = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
		//Бухаров
		//ОприходованиеДок = Документы.ОприходованиеТоваров.ПустаяСсылка();
		//СписаниеДок = Документы.СписаниеТоваров.ПустаяСсылка();
		ЗаборДок = Документы.ЗаборТовара.ПустаяСсылка();
		//
		
		Если ДатаЗакрытияЗаказа <= ДатаЗапрета Тогда
			флРазрешеноОбновлениеЗаказа = Ложь;
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Дата закрытия меньше даты запрета. Загрузка заказа не производится");
		КонецЕсли;
		
		//ЭтоКомиссионнаяТорговля = (Заказ.pay_type_Ч = 1) Или (Заказ.pay_type_Ч = 5);
		//Если ЭтоКомиссионнаяТорговля Тогда
		//	СкладРеализации = СкладРеализацииПоКомиссии;
		//	//СкладРеализации = СкладХраниения; // Пока комиисиию пускаем без перемещения
		//Иначе
		//	СкладРеализации = СкладРеализацииПоДоставке;
		//КонецЕсли;
		
		//+++ БАО 31.05.2017 №926
		//Перенес наверх
		//ДоговорМагазина   = ПолучитьДоговорКомитента(КонтрагентМагазин, Истина); //Храним товар как комиссионный   
		//--- БАО 31.05.2017 №926
		
		Если ДоговорМагазина = Неопределено Тогда
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка. Не найден договор для магазина " + КонтрагентМагазин);
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "Загрузка заказа " + стрНомерЗаказа + " отменена");
			флРазрешеноОбновлениеЗаказа = Ложь;
		КонецЕсли;
		
		//Сообщить("Маг = " + Заказ.shopName);
		//НайТариф = Справочники.ТарифныеСетки.НайтиПоКоду(Формат(ТарифЧ, "ЧГ="));
		
		//+++ БАО 31.05.2017 №926
		//перенес наверх
		//НайТариф = Справочники.ТарифныеСетки.НайтиПоКоду(Формат(ТарифЧ, "ЧГ="),,, КонтрагентМагазин.Ссылка);
		//--- БАО 31.05.2017 №926
		
		//Если НайТариф.Владелец <> КонтрагентМагазин Тогда
		//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка: найденный тариф относится к другому контрагенту: код контрагента = " + КонтрагентМагазин.Код + ", код тарифа=" + НайТариф.Код);
		//	//Продолжить;
		//	Зап = Новый Запрос;
		//	
		//	Зап.Текст = "ВЫБРАТЬ
		//	|	ТарифныеСетки.Ссылка КАК ТС
		//	|ИЗ
		//	|	Справочник.ТарифныеСетки КАК ТарифныеСетки
		//	|ГДЕ
		//	|	ТарифныеСетки.Владелец = &Владелец";
		//	Зап.УстановитьПараметр("Владелец", КонтрагентМагазин.Ссылка);			
		//	РезТС = Зап.Выполнить().Выгрузить();
		//	Если РезТС.Количество() = 1 Тогда
		//		НайТариф = РезТС[0].ТС;
		//	КонецеСли;	
		//КонецЕсли;
		
		//Поиск или создание доставки
		//+++ БАО 31.05.2017 №926
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	новаМестнаяДоставка.Ссылка КАК Ссылка,
		//               |	новаМестнаяДоставка.Груз КАК Груз
		//               |ИЗ
		//               |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		//               |ГДЕ
		//               |	новаМестнаяДоставка.Номер = &Номер";
		//Запрос.УстановитьПараметр("Номер", стрНомерЗаказа);
		//Выборка = Запрос.Выполнить().Выбрать();
		//флНужноУдалитьДоставку = Ложь;
		//Если Выборка.Следующий() Тогда
		//	обМестнаяДоставка = Выборка.Ссылка.ПолучитьОбъект();
		//	флНужноУдалитьДоставку = Истина;
		//Иначе
		//	обМестнаяДоставка = Неопределено;
		//КонецЕсли;
		
		НайденнаяСтрокаБПноваМестнаяДоставк = СписокБПноваМестнаяДоставка.Получить(стрНомерЗаказа);
		Если НайденнаяСтрокаБПноваМестнаяДоставк <> Неопределено Тогда
			
			обМестнаяДоставка = НайденнаяСтрокаБПноваМестнаяДоставк.обМестнаяДоставка.ПолучитьОбъект();
			флНужноУдалитьДоставку = Истина;
			
		Иначе
			
			обМестнаяДоставка = Неопределено;
			
		КонецЕсли;	
		
		//--- БАО 31.05.2017 №926
		
		обГруз = Неопределено;
		флИзменитьДоставкуВСвязиСИзменениемТипаДоставкиНаСамовывоз = Ложь;
		флЗабор = Ложь;
		флФрахт = Ложь;
		Фл = Ложь;
		Если флРазрешеноОбновлениеЗаказа Тогда
			//+Степанов Задача № 4071
			//Если Заказ.selfDelivery_Ч <> 0 Тогда
			Если Заказ.selfDelivery_Ч <> 0 И Заказ.selfDelivery_Ч <> 4 И Заказ.selfDelivery_Ч <> 5 Тогда
				Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   Доставка: самовывоз");
				Если Заказ.selfDelivery_Ч = 2 Тогда
					//+++ БАО 31.05.2017 №926
					//НайЗабор_ = Документы.ЗаборТовара.НайтиПоНомеру(стрНомерЗаказа);
					НайденнаяСтрокаЗаборТовара = СписокЗаборТовара.Получить(стрНомерЗаказа);
					Если НайденнаяСтрокаЗаборТовара = Неопределено Тогда
						НайЗабор_ = Документы.ЗаборТовара.ПустаяСсылка();
					Иначе 
						НайЗабор_ = НайденнаяСтрокаЗаборТовара;
					КонецЕсли;	
					
					//--- БАО 31.05.2017 №926
					
					НовыйОбъект = Ложь;
					Если НайЗабор_.Пустая() Тогда
						НайЗабор = Документы.ЗаборТовара.СоздатьДокумент();
						НовыйОбъект = Истина;
					Иначе
						НайЗабор = НайЗабор_.ПолучитьОбъект();
					КонецеСли;						
					
					НайЗабор.Дата = Заказ.deliveryDate_Д;
					Если Не ЗначениеЗаполнено(НайЗабор.Дата) Тогда
						НайЗабор.Дата = ТекущаяДата();
					КонецеСли;	
					НайЗабор.Номер = стрНомерЗаказа;
					НайЗабор.ДатаДоставки = Заказ.deliveryDate_Д;
					НайЗабор.Телефон = Заказ.Telephone;
					НайЗабор.Автор = Заказ.manager;
					НайЗабор.Контрагент = КонтрагентМагазин;
					НайЗабор.Комментарий = Заказ.comment;
					Если ЗначениеЗаполнено(Заказ.AddrFull) Тогда
						НайЗабор.АдресДоставки = Заказ.AddrFull;
					Иначе
						НайЗабор.АдресДоставки = Заказ.Addr;
					КонецЕсли;	
					
					
					//+++ БАО 31.05.2017 №926
					
					//НайКат = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория", Число(КатегорияДоставки));
					//НайЗабор.КатегорияДоставки = Найкат.Ссылка;
					Попытка
					НайКат = СписокКатегорияДоставки.Получить(Число(КатегорияДоставки)); 
					Если НайКат = Неопределено Тогда 
						НайКат = Справочники.КатегорииДоставки2014.ПустаяСсылка();
					КонецЕсли;	
					НайЗабор.КатегорияДоставки = НайКат;
				Исключение
					   НайКат = Справочники.КатегорииДоставки2014.ПустаяСсылка();
					   НайЗабор.КатегорияДоставки = НайКат;
					КонецПопытки;
					//--- БАО 31.05.2017 №926
					
					НайЗабор.УслугиСД = Заказ.ServiceDC_Ч;
					Если СтатусЗаказа <> 3 Тогда
						//+++ БАО 31.05.2017 №926
						//НайЗабор.СтатусИнтернетМагазинаСпр = Справочники.СтатусЗаказаИнтернетМагазина.НайтиПоКоду(СтатусЗаказа);
						НайЗабор.СтатусИнтернетМагазинаСпр = СписокСтатусЗаказа.Получить(СтатусЗаказа);
						//--- БАО 31.05.2017 №926
						НайЗабор.СтатусИнтернетМагазина = СтатусЗаказа;
					КонецеСли;	
					НайЗабор.СтоимостьДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					НайЗабор.НомерВнешнегоЗаказа = НомерВнешнегоЗаказа;
					НайЗабор.ТерминалПриемки = ТерминалПриемки;
					НайЗабор.ТерминалДоставки = ТерминалДоставки;
					//+++++Серегин М.В. 24.02.2016 14:54:02 
					НайЗабор.ТипОплаты = ТипОплаты;
					НайЗабор.Грузополучатель = Контрагент;
					//-----Серегин М.В. 24.02.2016 14:54:03 
					НайЗабор.ТарифнаяСетка = НайТариф;
					Если Заказ.returnRefusalOrders_Ч = 1 Тогда
						НайЗабор.ЗаборСВозвратом = Истина;
					Иначе
						НайЗабор.ЗаборСВозвратом = Ложь;
					КонецеСли;	
					
					НайЗабор.Товары.Очистить();
					флЗабор = Истина;
					
					//+++ БАО 31.05.2017 №926
					//НайТр = Справочники.новаТранспорт.НайтиПоРеквизиту("НомерГосударственнойРегистрации", СокрЛП(Заказ.carNumber));
					//НайЗабор.Транспорт = НайТр.Ссылка;
					НайТр = СписокТранспортПоГосНомерам.Получить(СокрЛП(Заказ.carNumber));
					НайЗабор.Транспорт = НайТр;
					//--- БАО 31.05.2017 №926
					
					
					
					времяС = СтрокаКВремя(Заказ.timeDeliveryFrom);
					Если времяС = Неопределено Тогда
						времяС = 9;
					КонецЕсли;
					времяПо = СтрокаКВремя(Заказ.timeDeliveryTo);
					Если Не ЗначениеЗаполнено(времяПо) Тогда
						//Асеев 14.02.2022 (по письму Исправить проблему по Связному)>>>
						//времяПо = 19;
						времяПо = 0;
						//Асеев 14.02.2022 (по письму Исправить проблему по Связному)<<<
					КонецЕсли;
					//+Широков 29.10.2020 по письму
					//Если времяПо < времяС Тогда
					//	времяПо = времяС + 3;
					//	Если времяПо > 23 Тогда
					//		//времяПо = 23;
					//		//времяС = 20;
					//	КонецЕсли;
					//КонецЕсли;
					//-Широков 29.10.2020 по письму
					
					Если времяС = времяПо Тогда
						ВремяПо = 20;
					КонецЕсли;
					
					
					
					ВремяПрибытияС_   = НачалоДня(Заказ.deliveryDate_Д) + времяС *60*60;
					ВремяПрибытияПо_  = НачалоДня(Заказ.deliveryDate_Д) + времяПо*60*60;
					
					//Асеев 21.02.2024 (Поиск адреса по заборам)>>>
					ВладелецТочки = СписокОбъектУТЛ_Контрагент.Получить(Контрагент);
					
					//+++ БАО 01.06.2017 №926
					//---НайЗабор.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения,КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_);
					//НайЗабор.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресуПоЗаборам(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_, , НайденнаяСтрокаСписокМагазинов, стрНомерЗаказа, ТерминалДоставкиКод);
					НайЗабор.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ВладелецТочки, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_, Фл,,стрНомерЗаказа, ТерминалДоставкиКод,Заказ.latitude,Заказ.longitude);
					//Асеев 21.02.2024 (Поиск адреса по заборам)<<<
					
					Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
						НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = НайЗабор.ТочкаДоставки;
					КонецЕсли;
					
					
					
					//--- БАО 01.06.2017 №926
					
					//+++++Серегин М.В. 01.03.2016 12:33:06 
					НайЗабор.ВремяДоставкиС = ВремяПрибытияС_;
					НайЗабор.ВремяДоставкиПо = ВремяПрибытияПо_;
					//-----Серегин М.В. 01.03.2016 12:33:07 
					
					НайЗабор.ВесЗабора = ОбщийВесЗаказа;
					НайЗабор.ОбъемЗабора = ОбъёмЗ;
					
					//Асеев 16.02.2023 (Задача № 4995)>>>
					ТаблицаЗаказовКЗабору = ТаблицаЗаказовКЗаборам.Скопировать(Новый Структура("НомерЗабора", стрНомерЗаказа), "НомерЗаказа");
					Если ТаблицаЗаказовКЗабору.Количество() Тогда
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("НомераЗаказов", ТаблицаЗаказовКЗабору.ВыгрузитьКолонку("НомерЗаказа"));
						Запрос.Текст =
						"ВЫБРАТЬ
						|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
						|	РеализацияТоваровУслуг.КоличествоМест КАК КоличествоМест
						|ИЗ
						|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
						|ГДЕ
						|	РеализацияТоваровУслуг.Номер В(&НомераЗаказов)";
						НайЗабор.ЗаказыКЗабору.Загрузить(Запрос.Выполнить().Выгрузить());
					Иначе
						НайЗабор.ЗаказыКЗабору.Очистить();
					КонецЕсли;
					//Асеев 16.02.2023 (Задача № 4995)<<<
					
					//Асеев 20.02.2023 (Задача № 4997)>>>
					Если Заказ.stockId_Ч Тогда
						НайЗабор.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч);
					Иначе
						НайЗабор.СкладМагазина = Неопределено;
					КонецЕсли;
					//Асеев 20.02.2023 (Задача № 4997)<<<
					
					//Асеев 31.10.2023 (Задача № 5157)>>>
					НайЗабор.ПризнакВозвратаПоставщику = Заказ.returnToSender_Ч;
					//Асеев 31.10.2023 (Задача № 5157)<<<
					
					Попытка
						// Михушкин --->>
						НайЗабор.Записать(РежимЗаписиДокумента.Запись);
						// <<--- Михушкин
						//Асеев 04.09.2024 (Задача № 5317)>>>
						МассивЗаказовЗаборов.Добавить(НайЗабор.Ссылка);
						//Асеев 04.09.2024 (Задача № 5317)<<<
					Исключение		
						ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,стрНомерЗаказа, "Ошибка записи Забора №: "+ стрНомерЗаказа + "; причина: " + ОписаниеОшибки());	
					КонецПопытки;
					
					
					ДобавитьОбновляемыйДокумент(ПучокДокументов, НайЗабор, "2=Проведение, 3=Проведение, 5=Проведение", "   забор товаров", "!!!Ошибка: Не удалось провести Забор "+стрНомерЗаказа);
					флРазрешеноОбновлениеЗаказа = Ложь;
					
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, НайЗабор.Ссылка);
					//--- БАО 27.06.2017 №1192
					
				ИначеЕсли Заказ.selfDelivery_Ч = 3 Тогда
					//+++ БАО 01.06.2017 №926
					//---НайФрахт_ = Документы.Фрахт.НайтиПоНомеру(стрНомерЗаказа);
					НайденнаяСтрокаФрахт = СписокФрахт.Получить(стрНомерЗаказа);
					Если НайденнаяСтрокаФрахт = Неопределено Тогда
						НайФрахт_ = Документы.ЗаборТовара.ПустаяСсылка();
					Иначе 
						НайФрахт_ = НайденнаяСтрокаФрахт;
					КонецЕсли;	
					
					//--- БАО 01.06.2017 №926
					
					НовыйОбъект = Ложь;
					Если НайФрахт_.Пустая() Тогда
						НайФрахт = Документы.Фрахт.СоздатьДокумент();
						НовыйОбъект = Истина;
					Иначе
						НайФрахт = НайФрахт_.ПолучитьОбъект();
					КонецеСли;	
					
					
					НайФрахт.Дата = Заказ.deliveryDate_Д;
					НайФрахт.Номер = стрНомерЗаказа;
					НайФрахт.ДатаДоставки = Заказ.deliveryDate_Д;
					НайФрахт.Телефон = Заказ.Telephone;
					НайФрахт.Автор = Заказ.manager;
					НайФрахт.Контрагент = КонтрагентМагазин;
					НайФрахт.Комментарий = Заказ.comment;
					НайФрахт.АдресДоставки = Заказ.AddrFull;
					//НайКат = Справочники.КатегорииДоставки.НайтиПоРеквизиту("Категория", Число(КатегорияДоставки));
					//НайФрахт.КатегорияДоставки = Найкат.Ссылка;
					НайФрахт.УслугиСД = Заказ.ServiceDC_Ч;
					Если СтатусЗаказа <> 3 Тогда
						//+++ БАО 01.06.2017 №926
						//---НайФрахт.СтатусИнтернетМагазинаСпр = Справочники.СтатусЗаказаИнтернетМагазина.НайтиПоКоду(СтатусЗаказа);
						НайФрахт.СтатусИнтернетМагазинаСпр = СписокСтатусЗаказа.Получить(СтатусЗаказа);
						//--- БАО 01.06.2017 №926
						НайФрахт.СтатусИнтернетМагазина = СтатусЗаказа;
						
					КонецеСли;	
					//НайФрахт.СтоимостьДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					НайФрахт.НомерВнешнегоЗаказа = НомерВнешнегоЗаказа;
					НайФрахт.Товары.Очистить();
					НайФрахт.типоплаты = ТипОплаты;
					НайФрахт.СуммаДоставки = СтоимостьДоставкиДоМкад + СтоимостьДоставкиЗаМкад;
					НайФрахт.Терминал = ТерминалПриемки;
					
					времяС = СтрокаКВремя(Заказ.timeDeliveryFrom);
					Если Не ЗначениеЗаполнено(времяС) Тогда
						времяС = 9;
					КонецЕсли;
					времяПо = СтрокаКВремя(Заказ.timeDeliveryTo);
					Если Не ЗначениеЗаполнено(времяПо) Тогда
						времяПо = 19;
					КонецЕсли;
					Если времяПо < времяС Тогда
						времяПо = времяС + 3;
						Если времяПо > 23 Тогда
							времяПо = 23;
							времяС = 20;
						КонецЕсли;
					КонецЕсли;
					
					Если времяС = времяПо Тогда
						ВремяПо = 20;
					КонецЕсли;	
					
					
					ВремяПрибытияС_   = НачалоДня(Заказ.deliveryDate_Д) + времяС *60*60;
					ВремяПрибытияПо_  = НачалоДня(Заказ.deliveryDate_Д) + времяПо*60*60;
					
					
					//+++ БАО 01.06.2017 №926
					//---НайФрахт.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения,КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_);
					НайФрахт.ТочкаДоставки    = ПодобратьТочкуДоставкиПоАдресу(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, КонтрагентМагазин, Заказ.Addr, ВремяПрибытияС_, ВремяПрибытияПо_, , НайденнаяСтрокаСписокМагазинов, стрНомерЗаказа, ТерминалДоставкиКод);
					Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
						НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = НайФрахт.ТочкаДоставки;
					КонецЕсли;
					//--- БАО 01.06.2017 №926
					
					
					флФрахт = Истина;
					
					//+++ БАО 01.06.2017 №926
					//---НайТр = Справочники.новаТранспорт.НайтиПоРеквизиту("НомерГосударственнойРегистрации", СокрЛП(Заказ.carNumber));
					//---НайФрахт.Транспорт = НайТр.Ссылка;
					НайТр = СписокТранспортПоГосНомерам.Получить(СокрЛП(Заказ.carNumber));
					НайФрахт.Транспорт = НайТр;
					//--- БАО 01.06.2017 №926
					
					
					ДобавитьОбновляемыйДокумент(ПучокДокументов, НайФрахт, "2=Проведение, 3=Проведение, 5=Проведение", "   фрахт", "!!!Ошибка: Не удалось провести Фрахт "+стрНомерЗаказа);
					флРазрешеноОбновлениеЗаказа = Ложь;					
				КонецеСли;	
			ИначеЕсли (Заказ.serviceDelivery_Ч = 2) Тогда
				Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   Доставка: ИМ Логистик");
			ИначеЕсли (Заказ.serviceDelivery_Ч > 3) Тогда
				Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   Доставка: неопределенная транспортная компания");
			ИначеЕсли Заказ.deliveryDate_Д = Null Тогда
				Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   Ошибка доставки: не определена дата доставки");
			ИначеЕсли Не ЗначениеЗаполнено(Заказ.Addr) Тогда
				Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   Ошибка доставки: не определен адрес доставки");
				Мас = Новый Массив;
				//Мас.Добавить("pavel.nechaev@strizh-logistic.ru");
				Мас.Добавить("logist@strizh-logistic.ru");
				//+++++Серегин М.В. 19.01.2016 11:55:57 
				//Мас.Добавить("yuriy.gnedov@strizh-logistic.ru");
				//-----Серегин М.В. 19.01.2016 11:55:59 
				lem.ОтправитьСообщение(Мас, "Не определен адрес доставки (" + СокрЛП(стрНомерЗаказа) + ")", "Не определен адрес доставки (" + СокрЛП(стрНомерЗаказа) + ")",,"Логистическая компания ""Стриж""");
			Иначе
				флНужноУдалитьДоставку = Ложь;										
				
				Если СтатусЗаказа = 2 Тогда
					флНужноЗаписыватьДоставку = Истина;
					флНужноЗаписыватьГруз = Истина;
				Иначе
					флНужноЗаписыватьДоставку = Ложь;
					флНужноЗаписыватьГруз = Ложь
				КонецЕсли;
				
				Если обМестнаяДоставка <> Неопределено Тогда
					флНужноЗаписыватьДоставку = Истина;
					//+++ БАО 02.06.2017 №926
					//--- Если ЗначениеЗаполнено(Выборка.Груз) Тогда
					//---	обГруз = Выборка.Груз.ПолучитьОбъект();
					
					Если НайденнаяСтрокаБПноваМестнаяДоставк <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаБПноваМестнаяДоставк.Груз) Тогда
						
						обГруз = НайденнаяСтрокаБПноваМестнаяДоставк.Груз.ПолучитьОбъект(); 
						
						//--- БАО 02.06.2017 №926	
						флНужноЗаписыватьГруз = Истина;
					Иначе
						
						
						//+++ БАО 01.06.2017 №926
						//---Най = Документы.новаГруз.НайтиПоНомеру(СокрЛП(стрНомерЗаказа));
						НайденнаяСтрокаГруз = СписокГруз.Получить(стрНомерЗаказа);
						Если НайденнаяСтрокаГруз = Неопределено Тогда
							Най = Документы.новаГруз.ПустаяСсылка();
						Иначе 
							Най = НайденнаяСтрокаГруз;
						КонецЕсли;	
						
						//--- БАО 01.06.2017 №926
						
						
						Если Най = Документы.новаГруз.ПустаяСсылка() Тогда
							обГруз = Документы.новаГруз.СоздатьДокумент();
						Иначе
							обГруз = най.ПолучитьОбъект();
						КонецеСли;	
					КонецЕсли;					
				Иначе
					обМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.СоздатьБизнесПроцесс();
					
					//+++ БАО 07.08.2017 №1568 
					обМестнаяДоставка.ЗагруженныйАдресДоставки = Заказ.Addr;
					//--- БАО 07.08.2017 №1568 
					
					//+++ БАО 01.06.2017 №926
					
					//---Запрос.Текст = 
					//---"ВЫБРАТЬ
					//---|	новаГруз.Ссылка
					//---|ИЗ
					//---|	Документ.новаГруз КАК новаГруз
					//---|ГДЕ
					//---|	новаГруз.Номер = &Номер";
					//---Выборка = Запрос.Выполнить().Выбрать();
					//---Если Выборка.Следующий() Тогда
					//---	обГруз = Выборка.Ссылка.ПолучитьОбъект();
					//---Иначе
					//---	обГруз = Документы.новаГруз.СоздатьДокумент();
					//---КонецЕсли;
					
					
					//---Най = Документы.новаГруз.НайтиПоНомеру(СокрЛП(стрНомерЗаказа));
					НайденнаяСтрокаГруз = СписокГруз.Получить(стрНомерЗаказа);
					Если НайденнаяСтрокаГруз = Неопределено Тогда
						обГруз = Документы.новаГруз.СоздатьДокумент();
					Иначе 
						обГруз = НайденнаяСтрокаГруз.ПолучитьОбъект();;
					КонецЕсли;	
					
					//--- БАО 01.06.2017 №926
					
				КонецЕсли;
				
				Если флНужноЗаписыватьГруз Тогда
					обГруз.Дата = Заказ.deliveryDate_Д;
					обГруз.Номер = стрНомерЗаказа;
					//+++ БАО 01.06.2017 №926
					//обГруз.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Рубли);
					обГруз.Валюта = ОбъектУТЛ_Рубли;
					//--- БАО 01.06.2017 №926
					
					обГруз.Стоимость = Заказ.deliveryPrice_Ч + Заказ.deliveryForMkadRUR_Ч;
					обГруз.Спецификация.Очистить();
					ДобавитьОбновляемыйДокумент(ПучокДокументов, обГруз, "2=Запись", "", "!!!Ошибка записи перечня доставки " + стрНомерЗаказа);
				КонецЕсли;
				
				Если флНужноЗаписыватьДоставку Тогда
					обМестнаяДоставка.ДоставкаИзмененаНаСамовывоз = Ложь;
					
					
					обМестнаяДоставка.Номер = стрНомерЗаказа;
					ДатаДо = обМестнаяДоставка.Дата;
					// обновление даты заказа
					обМестнаяДоставка.Дата = Заказ.deliveryDate_Д;
					
					
					обМестнаяДоставка.ДатаСоздания = Заказ.createDate_Д;
					обМестнаяДоставка.КатегорияДоставки = КатегорияДоставки;
					
					//+++ БАО 01.06.2017 №926
					//ххх СкладХранения меняется в цикле по непонятному алгоритму
					обМестнаяДоставка.Грузоотправитель  = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(СкладХраниения);
					обМестнаяДоставка.ТочкаОтправления  = обМестнаяДоставка.Грузоотправитель.ТочкаДоставки;
					обМестнаяДоставка.ВремяПребыванияГрузоотправителя = обМестнаяДоставка.ТочкаОтправления.ВремяПребывания;					
					//+++ БАО 01.06.2017 №926
					
					
					обМестнаяДоставка.ВремяОтправленияС = НачалоДня(Заказ.deliveryDate_Д) + (обМестнаяДоставка.ТочкаОтправления.ВремяРаботыНачало - '00010101');
					обМестнаяДоставка.ВремяОтправленияПо= НачалоДня(Заказ.deliveryDate_Д) + (обМестнаяДоставка.ТочкаОтправления.ВремяРаботыОкончание - '00010101');
					обМестнаяДоставка.КомментарийКАдресуДоставки = Заказ.addrComment;
					обМестнаяДоставка.ВремяПребыванияГрузополучателя = Дата(1,1,1,0,15,0);
					
					
					ОбМестнаяДоставка.Телефон = Заказ.Telephone;
					ОбМестнаяДоставка.Менеджер = Заказ.manager;
					ОбМестнаяДоставка.КоличествоМест = Заказ.PiecesOfFreight_Ч;
					
					времяС = СтрокаКВремя(Заказ.timeDeliveryFrom);
					Если Не ЗначениеЗаполнено(времяС) Тогда
						времяС = 9;
					КонецЕсли;
					времяПо = СтрокаКВремя(Заказ.timeDeliveryTo);
					Если Не ЗначениеЗаполнено(времяПо) Тогда
						времяПо = 19;
					КонецЕсли;
					Если времяПо < времяС Тогда
						времяПо = времяС + 3;
						Если времяПо > 23 Тогда
							времяПо = 23;
							времяС = 20;
						КонецЕсли;
					КонецЕсли;                      //Заказ.shopName + ": " + 
					
					обМестнаяДоставка.Комментарий = Заказ.comment;
					Если времяС = времяПо Тогда
						ВремяПо = 20;
					КонецЕсли;	
					обМестнаяДоставка.ВремяПрибытияС   = НачалоДня(Заказ.deliveryDate_Д) + времяС *60*60;
					обМестнаяДоставка.ВремяПрибытияПо  = НачалоДня(Заказ.deliveryDate_Д) + времяПо*60*60;
					обМестнаяДоставка.ВремяПребыванияГрузополучателя = 3*60;
					
					обМестнаяДоставка.СтоимостьДоставкиДоМКАД = СтоимостьДоставкиДоМкад;
					обМестнаяДоставка.СтоимостьДоставкиЗаМКАД = СтоимостьДоставкиЗаМкад;
					обМестнаяДоставка.Адрес = Заказ.AddrFull;
					
					обМестнаяДоставка.СуммаКассовогоОбслуживания = Заказ.cashService_Ч;
					
					
					Если Заказ.ispayed_Ч = 1 Тогда
						обМестнаяДоставка.Оплачен = Истина;
					КонецеСли;	
					
					//+++ БАО 01.06.2017 №926
					АдресТочкиПрибытия = "";
					//--- БАО 01.06.2017 №926
					Если Заказ.serviceDelivery_Ч = 1 Тогда
						обМестнаяДоставка.Грузополучатель = КонтрагентДПД;
						обМестнаяДоставка.ТочкаПрибытия = ТочкаДПД;
						АдресТочкиПрибытия = ТочкаДПД_Адрес;
					ИначеЕсли Заказ.serviceDelivery_Ч = 3 Тогда
						обМестнаяДоставка.Грузополучатель = КонтрагентПитер;
						обМестнаяДоставка.ТочкаПрибытия = ТочкаПитер;
						АдресТочкиПрибытия = ТочкаПитер_Адрес;
					Иначе
						//+++ БАО 01.06.2017 №926
						//---ВладелецТочки = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Контрагент);
						ВладелецТочки = СписокОбъектУТЛ_Контрагент.Получить(Контрагент);
						//--- БАО 01.06.2017 №926
						
						обМестнаяДоставка.Грузополучатель  = ВладелецТочки;
						//Попытка
						//	обМестнаяДоставка.Записать();
						//Исключение
						//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!   Ошибка при записи доставки!!!");
						//КонецПопытки;	
						Фл = Ложь;
						Если Не обМестнаяДоставка.АдресИзмененТК Тогда
							//+++ БАО 01.06.2017 №926
							//ХХХ нужно подумать
							//--- БАО 01.06.2017 №926
							
							//+++ БАО 02.06.2017 №926
							//--- обМестнаяДоставка.ТочкаПрибытия    = ПодобратьТочкуДоставкиПоАдресу(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения,ВладелецТочки, Заказ.Addr, обМестнаяДоставка.ВремяПрибытияС, обМестнаяДоставка.ВремяПрибытияПо, Фл);
							обМестнаяДоставка.ТочкаПрибытия    = ПодобратьТочкуДоставкиПоАдресу(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ВладелецТочки, Заказ.Addr, обМестнаяДоставка.ВремяПрибытияС, обМестнаяДоставка.ВремяПрибытияПо, Фл,,стрНомерЗаказа, ТерминалДоставкиКод,Заказ.latitude,Заказ.longitude);
							//--- БАО 02.06.2017 №926
							
							//+++ БАО 01.06.2017 №926
							//ХХХ Костыль 
							АдресТочкиПрибытия = обМестнаяДоставка.ТочкаПрибытия.Наименование;
							//--- БАО 01.06.2017 №926
							
						КонецеСли;	
					КонецЕсли;
					Если Не обМестнаяДоставка.АдресИзмененТК Тогда
						Если обМестнаяДоставка.ТочкаПрибытия = Неопределено Тогда
							обМестнаяДоставка.ТочкаПрибытия = Справочники.новаТочкиДоставки.ПустаяСсылка();
							
							//+++ БАО 01.06.2017 №926
							//---ИначеЕсли Лев(обМестнаяДоставка.ТочкаПрибытия.Наименование, 12) = "<не найден> " Тогда
						ИначеЕсли Лев(АдресТочкиПрибытия, 12) = "<не найден> " Тогда
							//--- БАО 01.06.2017 №926
							
							обМестнаяДоставка.Комментарий = Заказ.shopName + ": Не найден адрес " + Заказ.Addr + " " + Заказ.comment;
						КонецЕсли;
					КонецеСли;;
				КонецЕсли;
				
			КонецЕсли;
			
			
			//Попытка	
			//	НайЗабор_ = Документы.ЗаборТовара.НайтиПоНомеру(стрНомерЗаказа);			
			//	Если НЕ НайЗабор_.Пустая() Тогда
			//		НайЗабор = НайЗабор_.ПолучитьОбъект();
			//		НайЗабор.СтатусИнтернетМагазинаСпр = Справочники.СтатусЗаказаИнтернетМагазина.НайтиПоКоду(СтатусЗаказа);
			//		НайЗабор.СтатусИнтернетМагазина = СтатусЗаказа;
			//		НайЗабор.Записать(РежимЗаписиДокумента.Запись);	
			//	КонецеСли;							
			//Исключение		
			//	ДобавитьОшибочныйЗаказ(ХранилищеОбъектовСравнения,стрНомерЗаказа, "Ошибка записи Забора №: "+ стрНомерЗаказа + "; причина: " + ОписаниеОшибки());			
			//КонецПопытки;
			
		КонецЕсли;
		
		Если Заказ.selfDelivery_Ч = 1 Тогда
			флИзменитьДоставкуВСвязиСИзменениемТипаДоставкиНаСамовывоз = Истина;
			
			Если обМестнаяДоставка <> Неопределено Тогда
				обМестнаяДоставка.ДоставкаИзмененаНаСамовывоз = Истина;
				обМестнаяДоставка.СтоимостьДоставкиДоМКАД = СтоимостьДоставкиДоМкад;
				обМестнаяДоставка.СтоимостьДоставкиЗаМКАД = СтоимостьДоставкиЗаМкад;
				
				//+++ БАО 30.06.2017 №1222 
				
				
				//Попытка
				//	обМестнаяДоставка.Записать();
				//	//+++ БАО 01.06.2017 №926
				//	//ХХХ возможно наверное убрать расшифровку
				//	СписокБПноваМестнаяДоставка.Вставить(Новый Структура("обМестнаяДоставка, Груз, ТочкаОтправления, ВремяПребывания", 
				//				обМестнаяДоставка.Ссылка, обМестнаяДоставка.Груз, обМестнаяДоставка.Грузоотправитель.ТочкаДоставки, обМестнаяДоставка.ТочкаОтправления.ВремяПребывания));
				//	//--- БАО 01.06.2017 №926
				//	
				//Исключение
				//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!   Ошибка при записи доставки!!!");
				//КонецПопытки;	
				
				
				//обМестнаяДоставка.Номер = стрНомерЗаказа + "abc";
				Попытка
					
					обМестнаяДоставка.записать();
					
					СписокБПноваМестнаяДоставка.Вставить(Новый Структура("обМестнаяДоставка, Груз, ТочкаОтправления, ВремяПребывания", 
					обМестнаяДоставка.Ссылка, обМестнаяДоставка.Груз, обМестнаяДоставка.Грузоотправитель.ТочкаДоставки, обМестнаяДоставка.ТочкаОтправления.ВремяПребывания));
					
					
				Исключение
					
					Попытка
						
						//обМестнаяДоставка.Номер = стрНомерЗаказа + "def";
						обМестнаяДоставка.записать();
						СписокБПноваМестнаяДоставка.Вставить(Новый Структура("обМестнаяДоставка, Груз, ТочкаОтправления, ВремяПребывания", 
						обМестнаяДоставка.Ссылка, обМестнаяДоставка.Груз, обМестнаяДоставка.Грузоотправитель.ТочкаДоставки, обМестнаяДоставка.ТочкаОтправления.ВремяПребывания));
						
						
					Исключение
						
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!   Ошибка при записи доставки!!!");
						
					КонецПопытки;	
					
				КонецПопытки;	
				
				//--- БАО 30.06.2017 №1222   
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, обМестнаяДоставка.Ссылка);
				//--- БАО 27.06.2017 №1192
				
			КонецеСли;	
		КонецеСли;
		
		Если Фл  Тогда
			Наб = РегистрыСведений.НепривязанныеАдреса.СоздатьНаборЗаписей();
			
			Наб.Отбор.Номер.Установить(обМестнаяДоставка.Номер);
			Наб.Прочитать();
			
			Нов = Наб.Добавить();
			Нов.Период = ТекущаяДата();
			Нов.Номер = обМестнаяДоставка.Номер;
			Нов.Адрес = Заказ.Addr;
			Наб.Записать();
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, Наб)
			//--- БАО 27.06.2017 №1192
			
		КонецеСли;	
		
		//+++ БАО 30.06.2017 №1222 
		
		//Если флИзменитьДоставкуВСвязиСИзменениемТипаДоставкиНаСамовывоз Тогда
		//	Если обМестнаяДоставка = Неопределено Тогда
		//		//--- БАО 01.06.2017 №926	
		//		//---обМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(стрНомерЗаказа);
		//		НайденнаяСтрокаБПноваМестнаяДоставк = СписокБПноваМестнаяДоставка.Получить(стрНомерЗаказа);
		//		Если НайденнаяСтрокаБПноваМестнаяДоставк <> Неопределено Тогда
		//			
		//			обМестнаяДоставка = НайденнаяСтрокаБПноваМестнаяДоставк.обМестнаяДоставка;
		//			
		//		Иначе
		//			
		//			обМестнаяДоставка  = БизнесПроцессы.новаМестнаяДоставка.ПустаяСсылка();
		//			
		//		КонецЕсли;
		//		//--- БАО 01.06.2017 №926
		//	Иначе	
		//		
		//	КонецеСли;	
		//	
		//	Если ТипЗнч(обМестнаяДоставка) = Тип("БизнесПроцессСсылка.новаМестнаяДоставка") Тогда
		//		Если Не обМестнаяДоставка.Пустая() Тогда
		//			обМестнаяДоставка = обМестнаяДоставка.ПолучитьОбъект();
		//		КонецеСли;	
		//	КонецеСЛи;
		//	
		//	Если ТипЗнч(обМестнаяДоставка) <> Тип("БизнесПроцессСсылка.новаМестнаяДоставка") Тогда
		//		обМестнаяДоставка.Номер = стрНомерЗаказа + "abc";
		//		Попытка
		//			обМестнаяДоставка.записать();
		//		Исключение
		//			обМестнаяДоставка.Номер = стрНомерЗаказа + "def";
		//			обМестнаяДоставка.записать();
		//		КонецПопытки;	
		//		
		//						
		//		//+++ БАО 27.06.2017 №1192
		//		ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, обМестнаяДоставка.Ссылка);
		//		//--- БАО 27.06.2017 №1192
		
		//	КонецеСли;	
		//КонецеСли;	
		
		//--- БАО 30.06.2017 №1222   
		
		// Поиск или удаление возврата
		флЗаполнятьВозврат = Ложь;
		флНужноЗаписыватьВозврат = Ложь;
		
		//+++ Костя 140915
		Если стрдлина(стрНомерЗаказа) = 7 Тогда
			СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа+"    ", "НомерЗаказа");
		Иначе	
			СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа+"     ", "НомерЗаказа");
		КонецеСли;
		Если  СсылкиНаДокументы <> Неопределено Тогда
			ВозвратДок = ?(СсылкиНаДокументы.Возврат     = NULL, Неопределено, СсылкиНаДокументы.Возврат);
		КонецЕсли;			
		//ВозвратДок = НайтиДокумент("ВозвратТоваровОтПокупателя", стрНомерЗаказа); // Костя 140915
		//--- Костя 140915
		
		Если флРазрешеноОбновлениеЗаказа Тогда
			Если СтатусЗаказа = 4 Тогда
				Если ВозвратДок <> Неопределено Тогда
					//+++ БАО 30.06.2017 №1222   
					//Этот док потом не записывается
					//----Если Не ПометкаДокументаНаУдаление(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ВозвратДок.ПолучитьОбъект()) Тогда
					
					ДокВозвратПомечен = ВозвратДок.ПолучитьОбъект();
					Отказ =  ПометкаДокументаНаУдаление(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения,ХранилищеОбъектовСравнения, ДокВозвратПомечен);
					Попытка
						ДокВозвратПомечен.записать();
					Исключение
						Отказ = Истина;
					КонецПопытки;	
					ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, ДокВозвратПомечен.Ссылка);
					
					Если Отказ Тогда
						//--- БАО 30.06.2017 №1222  
						
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Ошибка пометки на удаление возврата " + стрНомерЗаказа + " " + ОписаниеОшибки());
						ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "!!! Ошибка пометки на удаление возврата " + стрНомерЗаказа + " " + ОписаниеОшибки());
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
						флРазрешеноОбновлениеЗаказа = Ложь;
					КонецЕсли;
					ВозвратДок = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Если ВозвратДок <> Неопределено Тогда
					ВозвратДокОбъект = ВозвратДок.ПолучитьОбъект();
					//+++ БАО 30.06.2017 №1222
					флНужноЗаписыватьВозврат = Истина;
					//--- БАО 30.06.2017 №1222
					Если ПодготовитьДокументКЗаполнению(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения,ВозвратДокОбъект, "Обновление возврата ", стрНомерЗаказа) Тогда
						Если ВозвратДокОбъект.Товары.Количество() > 0 Тогда
							ВозвратДокОбъект.Товары.Очистить();
							флНужноЗаписыватьВозврат = Истина;
							Попытка
								ВозвратДокОбъект.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Ошибка. Не удалось записать " + ВозвратДокОбъект + " " + ОписаниеОшибки());
							КонецПопытки;
							
							//+++ БАО 27.06.2017 №1192
							ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, ВозвратДокОбъект.Ссылка);
							//--- БАО 27.06.2017 №1192
							
						КонецЕсли;
					Иначе
						ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "Ошибка с возвратным документом");
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Поиск, создание или удаление поступления, реализации, перемещения, возврата поставщику
		Если (СтатусЗаказа = 2) Или (СтатусЗаказа = 3) Или (СтатусЗаказа = 4) Или (СтатусЗаказа = 5) Тогда
			
			//+++ Костя 140915
			Если стрдлина(стрНомерЗаказа) = 7 Тогда
				СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа+"    ", "НомерЗаказа");//ДокументыПоЗаказу.Найти(стрНомерЗаказа, "НомерЗаказа");
			Иначе
				СсылкиНаДокументы = ДокументыПоЗаказу.Найти(стрНомерЗаказа+"     ", "НомерЗаказа");//ДокументыПоЗаказу.Найти(стрНомерЗаказа, "НомерЗаказа");
			КонецеСли;	
			
			Если  СсылкиНаДокументы <> Неопределено Тогда
				РеализацияДок  = ?(СсылкиНаДокументы.Заказ       = NULL, Неопределено, СсылкиНаДокументы.Заказ);
				ПеремещениеДок = ?(СсылкиНаДокументы.Перемещение = NULL, Неопределено, СсылкиНаДокументы.Перемещение);
				ВозвратДок     = ?(СсылкиНаДокументы.Возврат     = NULL, Неопределено, СсылкиНаДокументы.Возврат);
				ПоступлениеДок = ?(СсылкиНаДокументы.Поступление = NULL, Неопределено, СсылкиНаДокументы.Поступление);
			КонецЕсли;
			//РеализацияДок = НайтиДокумент("РеализацияТоваровУслуг", стрНомерЗаказа);
			//ПеремещениеДок = НайтиДокумент("ПеремещениеТоваров", стрНомерЗаказа);
			//ВозвратПоставщикуДок = НайтиДокумент("ВозвратТоваровПоставщику", стрНомерЗаказа);
			//ПоступлениеДок = НайтиДокумент("ПоступлениеТоваровУслуг", стрНомерЗаказа);
			//Бухаров - создание пересортицы
			//СписаниеДок = НайтиДокумент("СписаниеТоваров", стрНомерЗаказа);
			//ОприходованиеДок = НайтиДокумент("ОприходованиеТоваров", стрНомерЗаказа);
			//--- Костя 140915
			//
			
			флЗаполнятьРеализацию = Истина;
			
			// Поиск, создание или удаление Поступления от поставщика
			Если флРазрешеноОбновлениеЗаказа Тогда
				////Серегин М.В. 10.08.2015 11:53:36 устарело
				//Если ФлАвтоматическоеПоступление Тогда
				флЗаполнятьПоступление = Истина;
				Если ПоступлениеДок = Неопределено Тогда
					ПоступлениеДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					ПоступлениеДокОбъект.Номер = стрНомерЗаказа;
					Если СтатусЗаказа = 4 Тогда
						ПоступлениеДокОбъект.ПометкаУдаления = Истина;
					КонецЕсли;
				ИначеЕсли СтатусЗаказа = 4 Тогда
					Если ПоступлениеДок.ПоступлениеПодтверждено Тогда
						флЗаполнятьПоступление = Ложь;
					Иначе
						ПоступлениеДокОбъект = ПоступлениеДок.ПолучитьОбъект();
						Если Не ПометкаДокументаНаУдаление(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ПоступлениеДокОбъект) Тогда
							Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Ошибка пометки на удаление поступления " + стрНомерЗаказа + " " + ОписаниеОшибки());
							ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "!!! Ошибка пометки на удаление поступления " + стрНомерЗаказа + " " + ОписаниеОшибки());
							//флОбновлятьДатуПоследнейЗагрузки = Ложь;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ПоступлениеДок.ПоступлениеПодтверждено Тогда
						флЗаполнятьПоступление = Ложь;
					Иначе
						ПоступлениеДокОбъект = ПоступлениеДок.ПолучитьОбъект();
						Если ПодготовитьДокументКЗаполнению(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения,ПоступлениеДокОбъект, "Обновление поступления ", стрНомерЗаказа) Тогда
							ПоступлениеДокОбъект.Товары.Очистить();
							ПоступлениеДокОбъект.ПодарочныеПозиции.Очистить();
							
							//CeHbKA 23.09.2019 #3449 
							ПоступлениеДокОбъект.ИсключенныеТовары.Очистить();
							//CeHbKA 23.09.2019 #3449 
							
						Иначе 
							//флОбновлятьДатуПоследнейЗагрузки = Ложь;
							ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "Ошибка с документом поступления");
							флРазрешеноОбновлениеЗаказа = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если флЗаполнятьПоступление Тогда
					Если Заказ.createDate_Д + 3*24*60*60 >= ДатаЗакрытияЗаказа Тогда
						ПоступлениеДокОбъект.Дата                         = Заказ.createDate_Д;//ДатаЗакрытияЗаказа - 24*60*60;   //ДатаВечер(ДатаЗакрытияЗаказа) - 5
					Иначе
						ПоступлениеДокОбъект.Дата                         = ДатаЗакрытияЗаказа - 24*60*60;//ДатаЗакрытияЗаказа - 24*60*60;   //ДатаВечер(ДатаЗакрытияЗаказа) - 5
					КонецеСли;	
					ПоступлениеДокОбъект.ВидПоступления               = Перечисления.ВидыПоступленияТоваров.НаСклад;
					ПоступлениеДокОбъект.Организация                  = НашаОрганизация;
					
					//+++ БАО 01.06.2017 №926
					
					//---ПоступлениеДокОбъект.БанковскийСчетКонтрагента    = КонтрагентМагазин.ОсновнойБанковскийСчет;
					
					//Новый магазин - у него нет осн. банк. счет
					Если ОсновнойБанковскийСчет_КонтрагентМагазин = Неопределено Тогда
						
					Иначе
						
						ПоступлениеДокОбъект.БанковскийСчетКонтрагента = ОсновнойБанковскийСчет_КонтрагентМагазин; 
						
					КонецЕсли;
					
					//--- БАО 01.06.2017 №926
					
					ПоступлениеДокОбъект.ОтражатьВУправленческомУчете = Истина;
					ПоступлениеДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
					ПоступлениеДокОбъект.ОтражатьВНалоговомУчете      = Истина;
					//ПоступлениеДокОбъект.Комментарий                  = "Автопоступление. " + Заказ.comment;
					ПоступлениеДокОбъект.СкладОрдер                   = СкладХраниения;
					ПоступлениеДокОбъект.Контрагент                   = КонтрагентМагазин;
					ПоступлениеДокОбъект.ДоговорКонтрагента           = ДоговорМагазина;
					//ПоступлениеДокОбъект.Грузополучатель              = Контрагент;
					ПоступлениеДокОбъект.ТипЦен                       = РозничныйТипЦен;
					ПоступлениеДокОбъект.ВалютаДокумента              = Рубли;
					ПоступлениеДокОбъект.УчитыватьНДС                 = Истина;
					ПоступлениеДокОбъект.СуммаВключаетНДС             = Истина;
					ПоступлениеДокОбъект.КурсВзаиморасчетов           = 1;
					ПоступлениеДокОбъект.КратностьВзаиморасчетов      = 1;
					//+++ БАО 30.06.2017 №1222   
					//---ДобавитьОбновляемыйДокумент(ПоступлениеДокОбъект, "2=Проведение, 3=Проведение, 5=Проведение", "   поступление товаров", "!!!Ошибка: Не удалось провести Поступление "+стрНомерЗаказа);
					ДобавитьОбновляемыйДокумент(ПучокДокументов, ПоступлениеДокОбъект, "2=Проведение, 3=Проведение, 4=Запись; 5=Проведение", "   поступление товаров", "!!!Ошибка: Не удалось провести Поступление "+стрНомерЗаказа);
					//--- БАО 30.06.2017 №1222   
				КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
			
			// Перемещение
			Если флРазрешеноОбновлениеЗаказа Тогда
				Если ПеремещениеДок = Неопределено Тогда
					ПеремещениеДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
					ПеремещениеДокОбъект.Номер = стрНомерЗаказа;
					Если СтатусЗаказа = 4 Тогда
						ПеремещениеДокОбъект.ПометкаУдаления = Истина;
					КонецЕсли;
				ИначеЕсли СтатусЗаказа = 4 Тогда
					ПеремещениеДокОбъект = ПеремещениеДок.ПолучитьОбъект();
					Если Не ПометкаДокументаНаУдаление(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ПеремещениеДокОбъект) Тогда
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Ошибка пометки на удаление перемещения " + стрНомерЗаказа + " " + ОписаниеОшибки());
						ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "!!! Ошибка пометки на удаление перемещения " + стрНомерЗаказа + " " + ОписаниеОшибки());
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					КонецЕсли;
				Иначе
					ПеремещениеДокОбъект = ПеремещениеДок.ПолучитьОбъект();
					Если ПодготовитьДокументКЗаполнению(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения,ПеремещениеДокОбъект, "Обновление перемещения ", стрНомерЗаказа) Тогда
						ПеремещениеДокОбъект.Товары.Очистить();
					Иначе 
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
						ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "Ошибка с документом перемещения");
						флРазрешеноОбновлениеЗаказа = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ПеремещениеДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа) - 2;
				ПеремещениеДокОбъект.ВидОперации                  = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
				ПеремещениеДокОбъект.Организация                  = НашаОрганизация;
				ПеремещениеДокОбъект.ОтражатьВУправленческомУчете = Истина;
				ПеремещениеДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
				ПеремещениеДокОбъект.ОтражатьВНалоговомУчете      = Истина;
				ПеремещениеДокОбъект.НДСвСтоимостиТоваров         = Истина;
				ПеремещениеДокОбъект.СкладОтправитель             = СкладХраниения;
				Если Заказ.serviceDelivery_Ч = 3 Тогда
					ПеремещениеДокОбъект.СкладПолучатель          = СкладПитер;
				Иначе
					ПеремещениеДокОбъект.СкладПолучатель          = СкладРеализации;
				КонецЕсли;
				//+++ БАО 30.06.2017 №1222   
				//---ДобавитьОбновляемыйДокумент(ПеремещениеДокОбъект, "2=Проведение, 3=Проведение, 5=Проведение", "   перемещение", "!!!Ошибка: Не удалось провести Перемещение "+стрНомерЗаказа);
				ДобавитьОбновляемыйДокумент(ПучокДокументов, ПеремещениеДокОбъект, "2=Проведение, 3=Проведение, 4=Запись, 5=Проведение", "   перемещение", "!!!Ошибка: Не удалось провести Перемещение "+стрНомерЗаказа);
				//--- БАО 30.06.2017 №1222   
			КонецЕсли;
			//НовыйОбъект = Ложь;
			// Реализация
			Если флРазрешеноОбновлениеЗаказа Тогда
				Если РеализацияДок = Неопределено Тогда
					РеализацияДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					НовыйОбъект = Истина;
					РеализацияДокОбъект.Номер = стрНомерЗаказа;
					НоваяСтараяРеализация = "   +++ Создана реализация ";
					Если СтатусЗаказа = 4 Тогда
						РеализацияДокОбъект.ПометкаУдаления = Истина;
						НоваяСтараяРеализация = "   +++ Создана удалённая реализация";
					КонецЕсли;
					//+Широков Задача 4487 09.03.2021
					//Если СокрЛП(РеализацияДок.Номер) = "5764085" Тогда
					//	ПолучениеФайловИзИнтернета.ЗаписатьОшибкуВЖурналРегистрации("ЗагрузкаИзИнтернетМагазина.ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина:РеализацияДок = Неопределено 5764085");
					//КонецЕсли;
					//-Широков Задача 4487 09.03.2021
					
				ИначеЕсли СтатусЗаказа = 4 Тогда
					РеализацияДокОбъект = РеализацияДок.ПолучитьОбъект();
					Если Не ПометкаДокументаНаУдаление(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, РеализацияДокОбъект) Тогда
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Ошибка пометки на удаление реализации " + стрНомерЗаказа + " " + ОписаниеОшибки());
						ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "!!! Ошибка пометки на удаление реализации " + стрНомерЗаказа + " " + ОписаниеОшибки());
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					КонецЕсли;
					
					////заказы перестали удаляться
					// РеализацияДокОбъект.статусинтернетмагазина=4;
					// РеализацияДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					// //заказы перестали удаляться
					
					НоваяСтараяРеализация = "   *** Перезаписана реализация";
					
					//Серегин М.В. 24.06.2015 15:36:32 отклоняем заказа для СтатусаСкладскогоУчета, чтобы эти заказы попадали в наборную ведомость для возврата
					////Серегин М.В. 13.08.2015 10:34:33 отменяем заказ из админки полюбому
					//ТекущееСостояниеЗаказа = smv.ПолучитьТекущееСостояниеЗаказа(РеализацияДок);
					//Если ТекущееСостояниеЗаказа.Количество() > 0 Тогда
					//    СтруктураПараметров = Новый Структура;
					//    Для каждого Стр Из ТекущееСостояниеЗаказа Цикл
					//        СтруктураПараметров.Вставить("Заказ",РеализацияДок);
					//        СтруктураПараметров.Вставить("Дата", ТекущаяДата());
					//        СтруктураПараметров.Вставить("РезультатДоставки", Стр.РезультатДоставки);
					//        СтруктураПараметров.Вставить("ПричинаНевыполнения",Стр.ПричинаНеВыполнения);
					//    КонецЦикла;
					//Иначе
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("Заказ",РеализацияДок);
					СтруктураПараметров.Вставить("Дата", ТекущаяДата());
					СтруктураПараметров.Вставить("РезультатДоставки", Справочники.новаРезультатМестнойДоставки.НеВыполнена);
					СтруктураПараметров.Вставить("ПричинаНевыполнения",Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда);
					СтруктураПараметров.Вставить("ДатаЗаказа",РеализацияДок.Дата);
					//КонецЕсли;
					smv.ОтклонитьЗаказПоСтатусуСкладскогоУчета(СтруктураПараметров);
					//Серегин М.В. 24.06.2015 15:36:34
					//+Широков Задача 4487 09.03.2021
					//Если СокрЛП(РеализацияДок.Номер) = "5764085" Тогда
					//	ПолучениеФайловИзИнтернета.ЗаписатьОшибкуВЖурналРегистрации("ЗагрузкаИзИнтернетМагазина.ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина:СтатусЗаказа = 4 5764085");
					//КонецЕсли;
					//-Широков Задача 4487 09.03.2021
				
				Иначе
					РеализацияДокОбъект = РеализацияДок.ПолучитьОбъект();
					Если ПодготовитьДокументКЗаполнению(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения,РеализацияДокОбъект, "Обновление реализации ", стрНомерЗаказа) Тогда
						//+Широков Задача 4487 09.03.2021
						//Если РеализацияДок.Номер = "5764085" Тогда
						//	ПолучениеФайловИзИнтернета.ЗаписатьОшибкуВЖурналРегистрации("ЗагрузкаИзИнтернетМагазина.ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина:До очистки - РеализацияДокОбъект.ПодарочныеПозиции.Очистить() 5764085");
						//КонецЕсли;
						//-Широков Задача 4487 09.03.2021
						РеализацияДокОбъект.Товары.Очистить();
						РеализацияДокОбъект.Услуги.Очистить();
						РеализацияДокОбъект.ПодарочныеПозиции.Очистить();
						
						//CeHbKA 23.09.2019 #3449 
						РеализацияДокОбъект.МестаЗаказа.Очистить();
						РеализацияДокОбъект.ИсключенныеТовары.Очистить();
						//CeHbKA 23.09.2019 #3449 
						
						НоваяСтараяРеализация = "   *** Обновлена реализация";
						//+Широков Задача 4487 09.03.2021
						//Если РеализацияДок.Номер = "5764085" Тогда
						//	ПолучениеФайловИзИнтернета.ЗаписатьОшибкуВЖурналРегистрации("ЗагрузкаИзИнтернетМагазина.ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина:РеализацияДокОбъект.ПодарочныеПозиции.Очистить() 5764085");
						//КонецЕсли;
						//-Широков Задача 4487 09.03.2021
					Иначе 
						//флОбновлятьДатуПоследнейЗагрузки = Ложь;
						ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "Ошибка с реализацией");
						флРазрешеноОбновлениеЗаказа = Ложь;
						//+Широков Задача 4487 09.03.2021
						//Если СокрЛП(РеализацияДок.Номер) = "5764085" Тогда
						//	ПолучениеФайловИзИнтернета.ЗаписатьОшибкуВЖурналРегистрации("ЗагрузкаИзИнтернетМагазина.ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина:ДобавитьОшибочныйЗаказ 5764085");
						//КонецЕсли;
						//-Широков Задача 4487 09.03.2021
					КонецЕсли;
				КонецЕсли;
				
				РеализацияДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа);
				//Бухаров
				РеализацияДокОбъект.ТипОплаты					 = ТипОплаты;
				РеализацияДокОбъект.НомерВнешнегоЗаказа			 = НомерВнешнегоЗаказа;
				РеализацияДокОбъект.КатегорияДоставки			 = КатегорияДоставки;
				//Бухаров
				РеализацияДокОбъект.ВидОперации                  = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
				РеализацияДокОбъект.Организация                  = НашаОрганизация;
				РеализацияДокОбъект.БанковскийСчетОрганизации    = НашСчет;
				РеализацияДокОбъект.ОтражатьВУправленческомУчете = Истина;
				РеализацияДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
				РеализацияДокОбъект.ОтражатьВНалоговомУчете      = Истина;
				РеализацияДокОбъект.ВидПередачи                  = Перечисления.ВидыПередачиТоваров.СоСклада;
				РеализацияДокОбъект.Комментарий                  = Заказ.comment;
				РеализацияДокОбъект.АгентскоеВознаграждение      = АгВ;
				РеализацияДокОбъект.СтраховойСбор                = Заказ.Insurance_Ч;
				Если Заказ.serviceDelivery_Ч = 3 Тогда
					РеализацияДокОбъект.Склад          			 = СкладПитер;
				Иначе
					РеализацияДокОбъект.Склад          			 = СкладРеализации;
				КонецЕсли;
				РеализацияДокОбъект.ТранспортнаяКомпания = ТранспортнаяКомпания;
				РеализацияДокОбъект.Контрагент                   = Контрагент;
				РеализацияДокОбъект.ДоговорКонтрагента           = Договор;
				РеализацияДокОбъект.Грузополучатель              = Контрагент;
				РеализацияДокОбъект.ТипЦен                       = РозничныйТипЦен;
				РеализацияДокОбъект.ВалютаДокумента              = Рубли;
				РеализацияДокОбъект.УчитыватьНДС                 = Истина;
				РеализацияДокОбъект.СуммаВключаетНДС             = Истина;
				РеализацияДокОбъект.КурсВзаиморасчетов           = 1;
				РеализацияДокОбъект.КратностьВзаиморасчетов      = 1;
				РеализацияДокОбъект.АдресДоставки                = Заказ.Addr;
				Если СтатусЗаказа <> 3 Тогда
					РеализацияДокОбъект.СтатусИнтернетМагазина       = СтатусЗаказа;
				КонецеСли;	
				РеализацияДокОбъект.ВладелецТовара               = КонтрагентМагазин;
				РеализацияДокОбъект.УслугиСД                     = Заказ.serviceDC_Ч;
				РеализацияДокОбъект.КомментарийСД                = Заказ.ReasonRrefusal;
				РеализацияДокОбъект.ТарифнаяСетка = ТипТарифа;
				//+Степанов Ищем расчетный брейк по Тарифной сетке партнера и коду брейка
				//РеализацияДокОбъект.РасчетныйБрейк = РасчетныйБрейк;
				РасчетныйБрейк = Неопределено;
				Если ЗначениеЗаполнено(НайТариф) Тогда
					РасчетныйБрейк = Справочники.РасчетныеБрейки.НайтиПоРеквизиту("КодБрейка",РасчетныйБрейкЧ,,НайТариф);
					РеализацияДокОбъект.РасчетныйБрейк = РасчетныйБрейк;
				КонецЕсли;	
				//-Степанов
				РеализацияДокОбъект.ТарифнаяСеткаПартнера = НайТариф;
				РеализацияДокОбъект.Телефон = Заказ.Telephone;
				РеализацияДокОбъект.ПредоплатаПоКредиту = Заказ.SumByCard_Ч;
				РеализацияДокОбъект.УслугиСДЧистые = ЧистыеСД;
				РеализацияДокОбъект.МетодСозданияЗаказа = МетодСозданияЗаказа;
				РеализацияДокОбъект.ДополнениеКАдресуДоставки = Заказ.addrComment;
				РеализацияДокОбъект.ТерминалПриема = ТерминалПриемки;
				РеализацияДокОбъект.ТерминалДоставки = ТерминалДоставки;
				//Асеев 13.12.2022 (Задача № 4949)>>>
				РеализацияДокОбъект.ДатаПриемки = ДатаПриемки;
				//Асеев 13.12.2022 (Задача № 4949)<<<
				РеализацияДокОбъект.КоличествоМест = КоличествоМестЗ;
				Если РеализацияДокОбъект.КоличествоМест = 0 Тогда
					РеализацияДокОбъект.КоличествоМест = 1;
				КонецеСли;	
				РеализацияДокОбъект.ОбъёмЗаказа = ОбъёмЗ;
				
				//+Широков Задача 4401 13.01.2021
				РеализацияДокОбъект.СуммаПредоплаты = Число(СуммаПредоплаты);
				//-Широков Задача 4401 13.01.2021
				
				//+++ Костя 091115
				//Если КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_234 ")    
				//	ИЛИ КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_391 ") Тогда 
				//+++ БАО 22.05.2017 №874 
				
				НайДог = глМасДог.Найти(КонтрагентМагазин);
				
				Если НайДог <> Неопределено Тогда
					РеализацияДокОбъект.ЭтоДоговор = Истина;                              
				Иначе                                                                       
					РеализацияДокОбъект.ЭтоДоговор = Ложь;                                 
				КонецЕсли;//+++ Костя 091115
				
				//--- БАО 22.05.2017 №874 
				
				
				
				//Серегин М.В. 22.07.2015 18:22:44  
				//+++ БАО 01.06.2017 №926
				//---Если КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_248") Или КонтрагентМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_601") Тогда
				//---РеализацияДокОбъект.ИнтернетМагазинЯндекса = Справочники.Контрагенты.НайтиПоКоду("248_"+?(Заказ.senderId=NULL,0,Заказ.senderId));    
				Если КонтрагентМагазин = КонтрагентМагазин_Shop_248 Или КонтрагентМагазин = КонтрагентМагазин_Shop_601 ИЛИ КонтрагентМагазин = КонтрагентМагазин_Shop_752 Тогда
					//--- БАО 01.06.2017 №926	
					РеализацияДокОбъект.ИнтернетМагазинЯндекса = СписокИнтернетМагазинЯндекса.Получить("248_"+?(Заказ.senderId=NULL,0,Заказ.senderId));    
					
				КонецЕсли;
				//Серегин М.В. 22.07.2015 18:22:46 
				
				РеализацияДокОбъект.ОбщийВес = ОбщийВесЗаказа;
				ВпихнутьДоставку(ДостПер, РеализацияДокОбъект, СтоимостьДоставки);
				
				//+++ БАО 05.06.2017 №792
				//---ДобавитьОбновляемыйДокумент(РеализацияДокОбъект, "2=Запись, 3=Проведение, 5=Запись", НоваяСтараяРеализация, "!!!Ошибка: Не удалось провести Отгрузку "+стрНомерЗаказа);
				ДобавитьОбновляемыйДокумент(ПучокДокументов, РеализацияДокОбъект, "2=Запись, 3=Проведение, 4=Запись, 5=Запись", НоваяСтараяРеализация, "!!!Ошибка: Не удалось провести Отгрузку "+стрНомерЗаказа);
				//--- БАО 05.06.2017 №792
				
				
				
				//+++++Серегин М.В. 18.02.2016 10:45:33 
				
				//+++ БАО 01.06.2017 №926
				//ХХХ тоже можно оптимизировать
				//--- БАО 01.06.2017 №926
				// МАС - 05.07.2017 - № --->> 		
				//УчИтого = ?(Smv.ПолучитьПараметрыКонтрагента(КонтрагентМагазин,ТекущаяДата()).ПриёмИтогоСКлиента = Истина, Истина,Ложь);
				//Если УчИтого Или МетодСозданияЗаказа = Перечисления.МетодСозданияЗаказа.API_Strizh_Ext Тогда
				//	РеализацияДокОбъект.УчитыватьИтогоКОплате = Истина;
				//Иначе
				//	РеализацияДокОбъект.УчитыватьИтогоКОплате = Ложь;
				//КонецЕсли;	
				// <<--- МАС 
				//-----Серегин М.В. 18.02.2016 10:45:34 
			КонецЕсли;
			
		КонецЕсли;
		
		
		//заказы перестали удаляться  значениезаполнено(РеализацияДокОбъект)
		Если РеализацияДокОбъект <>неопределено тогда 
			попытка
				РеализацияДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				//Асеев 04.09.2024 (Задача № 5317)>>>
				МассивЗаказовЗаборов.Добавить(РеализацияДокОбъект.Ссылка);
				//Асеев 04.09.2024 (Задача № 5317)<<<
				//Асеев 29.03.2022 (Задача № 4767)>>>
				Если НовыйОбъект Тогда
					МассивЗагруженныхЗаказов.Добавить(РеализацияДокОбъект.Ссылка);
					//Асеев 29.03.2022 (Задача № 4767)<<<
					//Асеев 05.12.2022 (Задача № 4939)>>>
					Если Заказ.Shop_Ч = 961 И Заказ.selfDelivery_Ч = 0 И СтатусЗаказа = 2 Тогда
					//Если Заказ.Shop_Ч = 179 И Заказ.selfDelivery_Ч = 0 И СтатусЗаказа = 2 Тогда//тест
						МассивНомеровЗаказовКОтклонению.Добавить(стрНомерЗаказа);
					КонецЕсли;
					//Асеев 05.12.2022 (Задача № 4939)<<<
				КонецЕсли;
				
			
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, РеализацияДокОбъект.Ссылка);
				//--- БАО 27.06.2017 №1192
				
				//Если СтатусЗаказа = 3 или СтатусЗаказа = 4 Тогда
				//	РеализацияДокОбъект.Товары.Очистить(); //Муратов 10.05.2017
				//КонецЕсли;
				//+++ БАО 05.06.2017 №792
				Если СтатусЗаказа = 4 Тогда 
					РеализацияДокОбъект.Товары.Очистить();
					//CeHbKA 23.09.2019 #3449 
					РеализацияДокОбъект.МестаЗаказа.Очистить();
					РеализацияДокОбъект.ИсключенныеТовары.Очистить();
					//CeHbKA 23.09.2019 #3449 
					
					//+Широков Задача 4487 09.03.2021
					РеализацияДокОбъект.ПодарочныеПозиции.Очистить();
					//-Широков Задача 4487 09.03.2021
				КонецЕсли;	
				//--- БАО 05.06.2017 №792
				
				//+Степанов Задача № 3833              
				СтрокаПараметровТарифа = ТаблицаПараметровТарифовЗаказов.Добавить();
				СтрокаПараметровТарифа.Заказ = РеализацияДокОбъект.Ссылка;
				СтрокаПараметровТарифа.УслугиСД = ?(Заказ.serviceDC_Ч <> 0,Заказ.serviceDC_Ч,-1);
				СтрокаПараметровТарифа.УслугиСДЧистые = ?(ЧистыеСД <> 0, ЧистыеСД, -1);
				СтрокаПараметровТарифа.ЗонаТарификации = Неопределено;
				СтрокаПараметровТарифа.КатегорияДоставки = КатегорияДоставки;
				СтрокаПараметровТарифа.ТарифнаяСетка = НайТариф;
				СтрокаПараметровТарифа.РасчетныйБрейк = РасчетныйБрейк;
				//-Степанов Задача № 3833
			исключение
				
				
				Если Не РежимСравнения Тогда
					lem.ОтправитьНормальноеСообщениеАдминам("Запись документов", "!!!Ошибка записи реализации (новая)");
				Иначе 
					Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи реализации (новая)");
				КонецЕсли;			
				
				ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "!!!Ошибка записи реализации (новая)");
				
				
			конецпопытки;
		конецесли;
		//заказы перестали удаляться
		
		//Асеев 11.01.2022 (по письму ЛеруаСПБ)>>>
		//Если Заказ.shop_Ч = 928 Тогда//тест
		Если Заказ.shop_Ч = 792 Или Заказ.shop_Ч = 959 Тогда
			//Асеев 13.12.2022 (Задача № 4949)>>>
			//КорректироватьДатыОтгрузкиИДоставки = Заказ.shop_Ч = 959;
			КорректироватьДатыОтгрузкиИДоставки = Ложь;//временно
			//КорректироватьДатыОтгрузкиИДоставки = Истина;//тест
			//Асеев 13.12.2022 (Задача № 4949)<<<
			КорректировкаТерминаловЛеруаСПБ(Заказ, КорректироватьДатыОтгрузкиИДоставки);
		КонецЕсли;
		//Асеев 11.01.2022 (по письму ЛеруаСПБ)<<<
		
		//+++ БАО 10.07.2017 №792 
		Если СтатусЗаказа = 4 Тогда
			
			Если ВозвратДокОбъект <> Неопределено  Тогда
				
				ВозвратДокОбъект.Товары.Очистить();
				
			КонецЕсли;
			
			Если ПеремещениеДокОбъект <> Неопределено  Тогда
				
				ПеремещениеДокОбъект.Товары.Очистить();
				
			КонецЕсли;	
			
			Если ПоступлениеДокОбъект <> Неопределено  Тогда
				
				ПоступлениеДокОбъект.Товары.Очистить();
				ПоступлениеДокОбъект.ПодарочныеПозиции.Очистить();
				
				//CeHbKA 23.09.2019 #3449 
				ПоступлениеДокОбъект.ИсключенныеТовары.Очистить();
				//CeHbKA 23.09.2019 #3449 
				
			КонецЕсли;
			
			Если НайЗабор <> Неопределено  Тогда
				
				НайЗабор.Товары.Очистить();
				
			КонецЕсли;
			
		КонецЕсли;	
		//--- БАО 10.07.2017 №792
		
		
		//+++ БАО 23.05.2017 №876 
		Если флРазрешеноОбновлениеЗаказа И РеализацияДокОбъект <> Неопределено И РеализацияДокОбъект.Модифицированность()  = Ложь  Тогда
			
			//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
			//--- НаборДопСведений = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
			//--- НаборДопСведений.Отбор.Заказ.Установить(РеализацияДокОбъект.Ссылка);
			//--- НаборДопСведений.Прочитать();
			
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("Заказ", РеализацияДокОбъект.Ссылка);
			
			
			//--- Если НаборДопСведений.Количество() Тогда
			
			//+++ БАО 05.06.2017 №926
			//--- НаборДопСведений[0].СтавкаНДСФЗПоДоставке = bao.ВернутьСтавкуНДСПоКодуАдминки(Заказ.NDSDelivery_Ч); 
			//--- БАО 05.06.2017 №926
			
			//--- Иначе
			
			//--- Нов = НаборДопСведений.Добавить();
			
			//--- Нов.Заказ = РеализацияДокОбъект.Ссылка;
			//--- Нов.СтавкаНДСФЗПоДоставке = bao.ВернутьСтавкуНДСПоКодуАдминки(Заказ.NDSDelivery_Ч);
			
			//--- КонецЕсли;											
			//--- НаборДопСведений.Записать();
			
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("СтавкаНДСФЗПоДоставке", baoВызовСервера.ВернутьСтавкуНДСПоКодуАдминки(Заказ.NDSDelivery_Ч)); 
			
			//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа						
		КонецЕсли;		
		//--- БАО 23.05.2017 №876 	
		
		// Обработка строк заказа
		флЕстьСтроки = СчетчикСтрокЗаказа < ТабличнаяЧастьЗаказов.Количество();
		ИтСум = 0;
		////////////// Дефолтный склад
		
		
		Если НЕ ЗначениеЗаполнено(Заказ.stockId_Ч) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("orderId_Ч", Заказ.orderId_Ч);
			НайденныеСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(ПараметрыОтбора);
			
			//+++ БАО 01.06.2017 №926
			//магазин не нашли или новый
			Если НайденнаяСтрокаСписокМагазинов = Неопределено Или (НайденнаяСтрокаСписокМагазинов <> Неопределено И НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию = Неопределено) Тогда
				//--- БАО 01.06.2017 №926	
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	СкладыМагазиновПоУмолчанию.СкладМагазина
				//+++ БАО 01.06.2017 №926
				|,  СкладыМагазиновПоУмолчанию.СкладМагазина.Код Как КодСкладМагазинаПоУмолчанию
				//--- БАО 01.06.2017 №926
				|ИЗ
				|	РегистрСведений.СкладыМагазиновПоУмолчанию КАК СкладыМагазиновПоУмолчанию
				|ГДЕ
				|	СкладыМагазиновПоУмолчанию.Магазин = &Магазин");
				Запрос.УстановитьПараметр("Магазин", КонтрагентМагазин);
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					СкладМагазинаЗаказа = Результат.СкладМагазина;
					Для Каждого СтрТовар Из НайденныеСтроки Цикл
						//+++ БАО 01.06.2017 №926
						//---СтрТовар.stockId_Ч = Число(СкладМагазинаЗаказа.Код);
						СтрТовар.stockId_Ч = Число(Результат.КодСкладМагазинаПоУмолчанию);
						//--- БАО 01.06.2017 №926
					КонецЦикла;							
				КонецЕсли;
				
				//+++ БАО 01.06.2017 №926
			ИначеЕсли	НайденнаяСтрокаСписокМагазинов <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию) Тогда  
				
				Для Каждого СтрТовар Из НайденныеСтроки Цикл
					СтрТовар.stockId_Ч = Число(НайденнаяСтрокаСписокМагазинов.КодСкладМагазинаПоУмолчанию);
				КонецЦикла;	
				
			КонецЕсли;
			//--- БАО 01.06.2017 №926
			
		КонецЕсли;
		
		
		#Область ОбработкаСтрок
		
		ЧислоСтрок = 0;
		
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ">>> Начало обработки строк");
		
		
		ДополнительнаяСтрокаЛогаДляАпдекса = "";
		
		
		//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
		//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "-----------------Начало блока добавления товаров по заказу: " + Заказ.orderId_Ч);
		//+++++Серегин М.В. 06.11.2015 18:33:31 
		Пока флЕстьСтроки Цикл
			//+++++Серегин М.В. 09.11.2015 10:07:00 
			// Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "-----------------Проверка флЕстьСтроки прошла успешно");
			//-----Серегин М.В. 09.11.2015 10:07:02 
			Стр = ТабличнаяЧастьЗаказов[СчетчикСтрокЗаказа];
			Если Стр.orderId_Ч = НомерЗаказа Тогда
				
				ДополнительнаяСтрокаЛогаДляАпдекса = "";
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 1";
				//+++++Серегин М.В. 09.11.2015 10:07:05 
				//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "-----------------Проверка Стр.orderId_Ч = НомерЗаказа прошла успешно");
				//-----Серегин М.В. 09.11.2015 10:07:07 
				Количество = Стр.cnt_Ч;
				Цена = Стр.Price_Ч;
				КодСайта = Стр.skuId_Ч;
				НачКоличество = Стр.fixedCount_Ч;
				//+++ БАО 01.06.2017 №926
				//---Товар = Справочники.Номенклатура.НайтиПоКоду(ЧислоКСтрокеБезПробелов(Стр.skuId_Ч));
				НайденнаяСтрокаТовар = СписокНоменклатура.Получить(ЧислоКСтрокеБезПробелов(Стр.skuId_Ч)); 
				Если НайденнаяСтрокаТовар <> Неопределено Тогда 
					Товар = НайденнаяСтрокаТовар.Номенклатура;
					Артикул = НайденнаяСтрокаТовар.Артикул;
					ЕдиницаХраненияОстатков = НайденнаяСтрокаТовар.ЕдиницаХраненияОстатков;
					НДСТовара = НайденнаяСтрокаТовар.НДСТовара;
				Иначе 
					Товар =  Справочники.Номенклатура.ПустаяСсылка();
					Артикул = Неопределено;
					ЕдиницаХраненияОстатков = Неопределено;
					НДСТовара = Неопределено;
				КонецЕсли;	
				//--- БАО 01.06.2017 №926
				
				//Асеев 22.06.2023 (Задача № 5071)>>>
				Если Стр.orderItemType_Ч Тогда
					ТипПозиции = СписокТиповПозицийЗаказа.Получить(Стр.orderItemType_Ч);
				Иначе
					ТипПозиции = Неопределено;
				КонецЕсли;
				//Асеев 22.06.2023 (Задача № 5071)<<<
				
				//+++ Костя 25.08.2015
				// Склад магазина
				//+++ БАО 01.06.2017 №926
				//---СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду(Стр.stockId_Ч);
				СкладМагазина = СписокСкладМагазина.Получить(Стр.stockId_Ч);
				//--- БАО 01.06.2017 №926
				
				//--- Костя 25.08.2015
				
				//+++ БАО 01.06.2017 №926
				//--- //+++ БАО 23.05.2017 №876
				//--- СтавкаНДС = bao.ВернутьСтавкуНДСПоКодуАдминки(Стр.NDS_Ч);
				//--- //--- БАО 23.05.2017 №876
				Если НачалоДня(ДатаЗакрытияЗаказа) >= Дата(2019,1,1) Тогда
					Если Стр.NDS_Ч = 18 Тогда
						СтНДС18_20 = "20";
					Иначе
						СтНДС18_20 = Строка(Стр.NDS_Ч);
					КонецеСли;
					
					СтавкаНДС = СписокСтавкаНДС.Получить(СтНДС18_20);
				Иначе	
					СтавкаНДС = СписокСтавкаНДС.Получить(Строка(Стр.NDS_Ч));
				КонецеСли;	
				//+++ БАО 01.06.2017 №926
				
				Если Товар <> Справочники.Номенклатура.ПустаяСсылка() Тогда
					//+++ БАО 01.06.2017 №926
					//---ПроверитьИзменениеАртикула(РежимСравнения, ХранилищеОбъектовСравнения,Стр, Товар);
					ПроверитьИзменениеАртикула(РежимСравнения, ХранилищеОбъектовСравнения,Стр, Товар, Артикул);
					//--- БАО 01.06.2017 №926
				КонецЕсли;	
				
				Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
					
					//+++ БАО 01.06.2017 №926
					//---Товар = ЗаписатьНоменклатуру(ЛогФайл, ИмяФайлаЛога, Стр, Заказ, Стр.skuId_Ч, Стр.Shop_Ч);//Бухаров
					ЕдИзм = Неопределено;
					Товар = ЗаписатьНоменклатуру(ЛогФайл, ИмяФайлаЛога, ШтукиПер, ВидНоменклатурыПер, РежимСравнения, ХранилищеОбъектовСравнения, ГрТов, ВН, Стр, Заказ, Стр.skuId_Ч, Стр.Shop_Ч, Справочники.Номенклатура.ПустаяСсылка(), Неопределено, ЕдИзм);
					ЕдиницаХраненияОстатков = ЕдИзм;
					Артикул = стр.articul; 
					НДСТовара = Перечисления.СтавкиНДС.НДС18;
					
					СписокНоменклатура.Вставить(ЧислоКСтрокеБезПробелов(стр.skuId_Ч), Новый Структура("Номенклатура, Артикул, ЕдиницаХраненияОстатков, НДСТовара", Товар, Артикул, ЕдиницаХраненияОстатков, НДСТовара));
					//--- БАО 01.06.2017 №926
					Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Не найден товар с кодом " + ЧислоКСтрокеБезПробелов(Стр.skuId_Ч) + ". Загрузка прервана.");
						НормальныйХодВыполнения = Ложь;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				//+++ БАО 04.10.2017 №1900
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Товар);
				ПараметрыОтбора.Вставить("КодШтрихкодыТоваров", Стр.Barcode);
				
				НайденныеСтрокиШтрихкодыТоваров = ШтрихкодыТоваров.НайтиСтроки(ПараметрыОтбора);
				
				Если Товар = Справочники.Номенклатура.ПустаяСсылка() Или  Стр.Barcode = "" Тогда
					
					ШтрихКод = Справочники.ШтрихкодыТоваров.ПустаяСсылка();
					
				ИначеЕсли НайденныеСтрокиШтрихкодыТоваров = Неопределено  Тогда
					
					Попытка
						ШтрихКодОбъект = Справочники.ШтрихкодыТоваров.СоздатьЭлемент();
						ШтрихКодОбъект.Владелец = Товар;
						ШтрихКодОбъект.Код = Стр.Barcode;
						ШтрихКодОбъект.Записать();
						ШтрихКод = ШтрихКодОбъект.Ссылка;
					Исключение
						ЗаписьЖурналаРегистрации("ЗагрузкаИзИнтернетМагазина.Ошибка",УровеньЖурналаРегистрации.Ошибка,,, "Ошибка создания ШтрихкодыТоваров" + Стр.Barcode + " Ошибка " + ОписаниеОшибки());
						ШтрихКод = Справочники.ШтрихкодыТоваров.ПустаяСсылка();
					КонецПопытки;
					
				Иначе 	
					
					ШтрихКод = НайденныеСтрокиШтрихкодыТоваров[0].ШтрихкодыТоваров;
					
				КонецЕсли;
				
				//--- БАО 04.10.2017 №1900
				
				Если Не ЗначениеЗаполнено(Количество) Тогда
					//+++++Серегин М.В. 09.11.2015 10:07:52 
					//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "-----------------Количество = 0");
					//-----Серегин М.В. 09.11.2015 10:07:53 
					Количество = 0;
				КонецеСли;
				
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 2";
				
				Если флЗабор тогда
					Нов = НайЗабор.Товары.Добавить();
					Нов.Номенклатура = Товар;
					Нов.Количество = Количество;
					Нов.Цена = Цена;
					Нов.Сумма = Нов.Количество*Нов.Цена;
					Нов.Вес = Стр.weight_Ч;
				КонецеСли;	
				
				Если флФрахт тогда
					Нов = НайФрахт.Товары.Добавить();
					Нов.Номенклатура = Товар;
					Нов.Количество = Количество;
					Нов.Цена = Цена;
					Нов.Сумма = Нов.Количество*Нов.Цена;
					Нов.Вес = Стр.weight_Ч;
				КонецЕСли;
				Если флРазрешеноОбновлениеЗаказа Тогда
					//+++++Серегин М.В. 09.11.2015 10:08:04 
					//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "-----------------Проверка флРазрешеноОбновлениеЗаказа прошла успешно");
					//-----Серегин М.В. 09.11.2015 10:08:06 
					
					Если (Количество > 0) Тогда // И (Цена > 0)
						//+++++Серегин М.В. 09.11.2015 10:08:34 
						//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "-----------------Проверка (Количество > 0) прошла успешно");
						//-----Серегин М.В. 09.11.2015 10:08:36 
						//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
						//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "--------------------Начало добавления товаров по заказу: " + Заказ.orderId_Ч);
						//-----Серегин М.В. 06.11.2015 18:34:48 
						
						//+++ БАО 23.05.2017 №876
						
						//---ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Товар, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost); 
						
						ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 3";
						
						//ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар, ШтрихКод, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost, СтавкаНДС, ЕдиницаХраненияОстатков, НДСТовара, ДополнительнаяСтрокаЛогаДляАпдекса); 
						
						//CeHbKA 20.02.2019 №2831
						//ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар, ШтрихКод, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost, СтавкаНДС, ЕдиницаХраненияОстатков, НДСТовара, ДополнительнаяСтрокаЛогаДляАпдекса, Стр.BarcodePackage, ТаблицаМестЗаказов); 
						//CeHbKA 20.02.2019 №2831
						
						//CeHbKA 23.09.2019 #3449 
						//ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар, ШтрихКод, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost, СтавкаНДС, ЕдиницаХраненияОстатков, НДСТовара, ДополнительнаяСтрокаЛогаДляАпдекса, Стр.BarcodePackage, ТаблицаМестЗаказов, Стр.excluded); 
						//CeHbKA 23.09.2019 #3449 
						
						//+Степанов Задача № 4007
						
						//-Степанов Задача № 4007
						
						//CeHbKA 27.09.2019 #3545  
						//ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар, ШтрихКод, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost, СтавкаНДС, ЕдиницаХраненияОстатков, НДСТовара, ДополнительнаяСтрокаЛогаДляАпдекса, Стр.BarcodePackage, ТаблицаМестЗаказов, Стр.excluded, Стр.markingCode); 
						//CeHbKA 27.09.2019 #3545  
						
						//+Степанов Задача № 4007 Добавлен параметр Поставщик
						Поставщик = СписокПоставщики.Получить(Число(Стр.goodsSellerId));
						Символ29 = Символ(29);
						Если ЗначениеЗаполнено(Стр.markingCode) Тогда
							КодМаркировки = СтрЗаменить(Стр.markingCode, Символ29, "<GS>");
						Иначе
							КодМаркировки = Стр.markingCode;
						КонецеСли;	
						ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар, ШтрихКод, Количество, НачКоличество, Цена, Ложь, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost, СтавкаНДС, ЕдиницаХраненияОстатков, НДСТовара, ДополнительнаяСтрокаЛогаДляАпдекса, Стр.BarcodePackage, ТаблицаМестЗаказов, Стр.excluded, КодМаркировки, Поставщик, ТипПозиции); 
						//-Степанов Задача № 4007
						
						ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 4";
						
						//--- БАО 23.05.2017 №876
						
						//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
						//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "--------------------Конец добавления товаров по заказу: " + Заказ.orderId_Ч);
						//-----Серегин М.В. 06.11.2015 18:34:48 
					КонецЕсли;
					
					Если (Количество < 0) Тогда // И (Цена > 0)
						Если (СтатусЗаказа <> 4) И Не флЗаполнятьВозврат Тогда
							Если ВозвратДок = Неопределено Тогда //Не ЗначениеЗаполнено(ВозвратДок) Тогда // Костя 14092015
								ВозвратДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
							Иначе
								ВозвратДокОбъект = ВозвратДок.ПолучитьОбъект(); // Костя 140915
								Если ВозвратДокОбъект.Товары.Количество() > 0 Тогда
									ВозвратДокОбъект.Товары.Очистить();
									флНужноЗаписыватьВозврат = Истина;
								КонецЕсли;
							КонецЕсли;
							
							ВозвратДокОбъект.Дата                         = ДатаВечер(ДатаЗакрытияЗаказа) - 10 * 60;
							ВозвратДокОбъект.Номер                        = стрНомерЗаказа;
							ВозвратДокОбъект.ОтражатьВУправленческомУчете = Истина;
							ВозвратДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
							ВозвратДокОбъект.ОтражатьВНалоговомУчете      = Истина;
							ВозвратДокОбъект.Организация                  = НашаОрганизация;
							ВозвратДокОбъект.СкладОрдер                   = СкладХраниения;
							ВозвратДокОбъект.ТипЦен                       = РозничныйТипЦен;
							ВозвратДокОбъект.ВалютаДокумента              = Рубли;
							ВозвратДокОбъект.КурсВзаиморасчетов           = 1;
							ВозвратДокОбъект.КратностьВзаиморасчетов      = 1;
							ВозвратДокОбъект.УчитыватьНДС                 = Истина;
							ВозвратДокОбъект.СуммаВключаетНДС             = Истина;
							ВозвратДокОбъект.Контрагент                   = Контрагент;
							ВозвратДокОбъект.ДоговорКонтрагента           = Договор;
							ВозвратДокОбъект.Комментарий                  = Заказ.comment + " /##/ " + Заказ.userComment;
							ВозвратДокОбъект.ВидПоступления               = Перечисления.ВидыПоступленияТоваров.НаСклад;
							ВозвратДокОбъект.НомерВнешнегоЗаказа          = НомерВнешнегоЗаказа;
							
							флЗаполнятьВозврат = Истина;
							ДобавитьОбновляемыйДокумент(ПучокДокументов, ВозвратДокОбъект, "2=Запись, 3=Проведение, 5=Запись", "   возврат товаров", "!!!Ошибка: Не удалось провести Возврат "+стрНомерЗаказа);
						КонецЕсли;
						
						Если флЗаполнятьВозврат Тогда
							//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
							//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "--------------------Начало добавления возвратных товаров по заказу: " + Заказ.orderId_Ч);
							//-----Серегин М.В. 06.11.2015 18:34:48 
							// Михушкин - исправление незаполнения СкладаМагазина в ТЧ Товары - 31.05.2016 --->> 
							Если НЕ ЗначениеЗаполнено(СкладМагазина) И ЗначениеЗаполнено(Заказ.stockId_Ч) Тогда
								СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч);	
							КонецЕсли;
							// <<--- Михушкин 
							
							//+++ БАО 01.06.2017 №926
							//---ЗаполнитьТабличныеЧстиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Товар, -Количество, -Количество, Цена, Истина, ТоварRestore, Стр.weight_Ч, СкладМагазина);//Бухаров\
							ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 5";
							//+Степанов Задача № 4007 Добавлен параметр Поставщик.
							Поставщик = СписокПоставщики.Получить(Число(Стр.goodsSellerId));
							//Символ29 = Символ(29);
							//Если ЗначениеЗаполнено(Стр.markingCode) Тогда
							//	КодМаркировки = СтрЗаменить(Стр.markingCode, Символ29, "<GS>");
							//Иначе
							//	КодМаркировки = Стр.markingCode;
							//КонецеСли;	
							
							ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар, ШтрихКод, -Количество, -Количество, Цена, Истина, ТоварRestore, Стр.weight_Ч, СкладМагазина,Стр.itemAssessedCost, СтавкаНДС, ЕдиницаХраненияОстатков, НДСТовара, ДополнительнаяСтрокаЛогаДляАпдекса); 
							//-Степанов Задача № 4007
							ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 6";
							//--- БАО 01.06.2017 №926
							
							//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
							
							//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "--------------------Конец добавления возвратных товаров по заказу: " + Заказ.orderId_Ч);
							//-----Серегин М.В. 06.11.2015 18:34:48 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЧислоСтрок = ЧислоСтрок + 1;
				
			Иначе
				Прервать;
			КонецЕсли;
			СчетчикСтрокЗаказа = СчетчикСтрокЗаказа + 1;
			ИтСум = ИтСум + Цена*Количество;
			флЕстьСтроки = СчетчикСтрокЗаказа < ТабличнаяЧастьЗаказов.Количество();
			
			
			
		КонецЦикла;
		//+++++Серегин М.В. 06.11.2015 18:29:58 поиск бага не добавляемых товаров
		//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "-----------------Конец блока добавления товаров по заказу: " + Заказ.orderId_Ч);
		//-----Серегин М.В. 06.11.2015 18:34:48 
		
		
		
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "<<< Конец обработки строк " + ЧислоСтрок);
		
		//#Область ОбработкаСтрок
		#КонецОбласти
		
		ДатаДоставкиОбновлена = Ложь;
		
		ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 7";
		
		Если флРазрешеноОбновлениеЗаказа или флЗабор Или флФрахт Тогда
			
			
			Для Каждого эл Из ПучокДокументов Цикл
				Док = эл["Док"];       //Док, Действия, КомментарийДействия, СообщениеОбОшибке
				Действия = эл["Действия"];
				РежимЗаписи = ПолучитьРежимЗаписи(Действия, СтатусЗаказа);
				
				//+++++Серегин М.В. 18.02.2016 10:58:49
				Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
					//+++ БАО 01.06.2017 №926
					//ХХХ тут тоже можно оптимизировать
					//--- БАО 01.06.2017 №926
					
					//+++ БАО 30.06.2017 №1230   
					//----ПараметрыКонтрагента = smv.ПолучитьПараметрыКонтрагента(Док.Владелецтовара, ТекущаяДата());
					
					Если НайденнаяСтрокаСписокМагазинов <> Неопределено И НайденнаяСтрокаСписокМагазинов.ЕстьПараметрыКонтрагента <> Неопределено Тогда
						
						ПараметрыКонтрагента = Новый Структура;
						ПараметрыКонтрагента.Вставить("ВычисляемыйЗапретЧастичногоВыкупа",НайденнаяСтрокаСписокМагазинов.ВычисляемыйЗапретЧастичногоВыкупа);
						ПараметрыКонтрагента.Вставить("ЗапретЧастичногоВыкупа",НайденнаяСтрокаСписокМагазинов.ЗапретЧастичногоВыкупа);
						
						
						
					Иначе 
						
						ПараметрыКонтрагента = smv.ПолучитьПараметрыКонтрагента(Док.Владелецтовара, ТекущаяДата());
						
						Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
							
							НайденнаяСтрокаСписокМагазинов.ЕстьПараметрыКонтрагента = ?(ПараметрыКонтрагента.ВычисляемыйЗапретЧастичногоВыкупа <> Неопределено, Истина, Ложь);
							НайденнаяСтрокаСписокМагазинов.ВычисляемыйЗапретЧастичногоВыкупа = ПараметрыКонтрагента.ВычисляемыйЗапретЧастичногоВыкупа;
							НайденнаяСтрокаСписокМагазинов.ЗапретЧастичногоВыкупа = ПараметрыКонтрагента.ЗапретЧастичногоВыкупа;
							
						КонецЕсли;	
						
					КонецЕсли;	
					
					//--- БАО 30.06.2017 №
					
					
					Если ПараметрыКонтрагента.ВычисляемыйЗапретЧастичногоВыкупа = Истина Тогда
						Если Заказ.pay_type_Ч <> 7 Тогда //оплачено в магазине
							Если Заказ.total_Ч <> Док.Товары.Итог("Сумма")+ Док.Услуги.Итог("Сумма") Тогда
								Док.ЗапретЧастичногоВыкупа = Истина;
							КонецЕсли;
						КонецеСли;
					Иначе
						Если ПараметрыКонтрагента.ЗапретЧастичногоВыкупа = Истина Тогда
							Док.ЗапретЧастичногоВыкупа = Истина;
						Иначе
							Док.ЗапретЧастичногоВыкупа = Заказ.isPartialGiveoutDisabled;
						КонецЕсли;
					КонецЕсли;
					
					// Михушкин --->>
					//+++ БАО 01.06.2017 №926
					//---Если Док.ВладелецТовара = Справочники.Контрагенты.НайтиПоКоду("Shop_602") Тогда
					//Если Док.ВладелецТовара = Shop_602 Тогда
					////--- БАО 01.06.2017 №926	
					//	
					//	Док.ЗапретЧастичногоВыкупа = Заказ.isPartialGiveoutDisabled;
					//КонецЕсли;
					// <<--- Михушкин
					
					Если Док.МетодСозданияЗаказа <> Перечисления.МетодСозданияЗаказа.OZONE И Док.ВладелецТовара = ПараметрыСеанса.oz_МагазинOZON Тогда
						oz_РаботаССервисом.УстановитьЗначениеФлагаОбновленияЭкземпляров(СокрЛП(Док.Номер), Истина);
					КонецеСли;	
				КонецЕсли;
				//-----Серегин М.В. 18.02.2016 10:58:50 
				
				Если РежимЗаписи = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Попытка
					ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 8";
					Док.Записать(РежимЗаписи);
					ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " 9";
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, Док.Ссылка);
					//--- БАО 27.06.2017 №1192
					
					Комментарий = эл["КомментарийДействия"];
					Если ЗначениеЗаполнено(Комментарий) Тогда
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Комментарий);
					КонецЕсли;
					//Серегин М.В. 24.06.2015 17:01:16 добавление услуг
					Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда 
						//+++ БАО 01.06.2017 №926
						//ХХХ здесь трудно оптимизировать
						//--- БАО 01.06.2017 №926
						smv.СинхронизацияУслугиПоЗаказам(Док.Ссылка);  
						
						Парам = Новый Структура;
						Парам.Вставить("Заказ", Док.Ссылка);
						Парам.Вставить("ОценочнаяСтоимость", Заказ.assessedCost_Ч);
						Парам.Вставить("КОплатеКлиентом"   , Заказ.total_Ч);			
						// Михушкин - 12.05.2016 --->> 
						Парам.Вставить("ПодъемОплачен"   , Заказ.liftingIsPayed);
						Если ЗначениеЗаполнено(Заказ.orderIDAdditional) Тогда			
							Парам.Вставить("ДополнительныйНомерЗаказа", Заказ.orderIDAdditional);
						КонецЕсли;			
						// <<--- Михушкин 	
						
						//+++ БАО 01.06.2017 №926
						//--- //+++ БАО 23.05.2017 №876
						//--- Парам.Вставить("СтавкаНДСФЗПоДоставке"   , bao.ВернутьСтавкуНДСПоКодуАдминки(Заказ.NDSDelivery_Ч));
						//--- //--- БАО 23.05.2017 №876
						Если НачалоДня(ДатаЗакрытияЗаказа) >= Дата(2019,1,1) Тогда
							Если Заказ.NDSDelivery_Ч = 18 Тогда
								СтНДС18_20Д = "20";
							Иначе
								СтНДС18_20Д = Строка(Заказ.NDSDelivery_Ч);
							КонецеСли;
							
							Парам.Вставить("СтавкаНДСФЗПоДоставке", СписокСтавкаНДС.Получить(СтНДС18_20Д));
						Иначе	
							Парам.Вставить("СтавкаНДСФЗПоДоставке", СписокСтавкаНДС.Получить(Строка(Заказ.NDSDelivery_Ч)));
						КонецеСли;	
						
						
						//Парам.Вставить("СтавкаНДСФЗПоДоставке", СписокСтавкаНДС.Получить(Строка(Заказ.NDSDelivery_Ч)));
						//--- БАО 01.06.2017 №926
						
						
						Парам.Вставить("ЧастичныйВыкупЗапрещен" , Заказ.isPartialGiveoutDisabled);
						
						////+++++Серегин М.В. 24.03.2016 15:33:00										
						
						//+++ БАО 01.06.2017 №926
						//---Если Док.ВладелецТовара = Справочники.Контрагенты.НайтиПоКоду("Shop_612") Тогда
						Если НЕ ПараметрыСеанса.oz_МагазинOZON.Пустая() Тогда
							Если Док.ВладелецТовара = ПараметрыСеанса.oz_МагазинOZON Тогда
								
								// Михушкин - 04.04.2016 --->> 
								//Штрихкод = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC bp_getOrderOzonBarcode "+СокрЛП(Док.Номер));
								//Парам.Вставить("ШтрихкодOZON"   , Штрихкод[0].BarCode);
								
								//+++ БАО 01.06.2017 №926
								//ХХХ здесь трудно оптимизировать
								//--- БАО 01.06.2017 №926
								
								Данные = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC bp_getOrderOzonInfo "+СокрЛП(Док.Номер));	
								
								Если Данные.Количество() Тогда
									Парам.Вставить("nameOZON"   	, Данные[0].name);
									Парам.Вставить("ЧастичныйВыкупЗапрещен" , Данные[0].isPartialGiveoutDisabled);
									Парам.Вставить("ВозвратЗапрещен" , Данные[0].isClientReturnDisabled);
									Парам.Вставить("ШтрихкодOZON"   , Данные[0].BarCode);						
								КонецЕсли;
								// <<--- Михушкин 
							КонецЕсли;
						КонецЕсли;
						////-----Серегин М.В. 24.03.2016 15:33:01 
						
						// Михушкин - запись данных OKEY для Axiomus - 06.04.2016--->>
						//+++ БАО 01.06.2017 №926
						//--- Если Док.ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
						Если ТерминалДоставки = РегиональныеТерминалы_СПбСтриж Тогда
							//--- БАО 01.06.2017 №926	
							Если НЕ Док.СтатусИнтернетМагазина = 4 Тогда // если заказ не отклонен
								//+++ БАО 01.06.2017 №926
								//ХХХ здесь трудно оптимизировать
								//--- БАО 01.06.2017 №926
								Данные = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC bp_getAxiomusOrderInfo "+СокрЛП(Док.Номер));
								Если Данные.Количество() Тогда	
									Парам.Вставить("okey", Данные[0].okey);
								КонецЕсли;
							КонецЕсли;
							//Парам.Вставить("axiomusId"  , Данные[0].axiomusId);   // пока не ясно нужен или нет
						КонецЕсли;
						// <<--- Михушкин 
						
						
						// Михушкин - Установка признака предварительного закрытия - 30.06.2016
						
						//+++ БАО 01.06.2017 №926
						//Записан новый магаз
						Если ПредварительноеЗакрытиеЗаказов = Неопределено Тогда 
							//--- БАО 01.06.2017 №926
							
							ЗапросПризнакЗакрытия = Новый Запрос("ВЫБРАТЬ
							|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов, ЛОЖЬ) КАК ПредварительноеЗакрытие
							|ИЗ
							|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних");
							ЗапросПризнакЗакрытия.УстановитьПараметр("период", Док.Дата);	
							ЗапросПризнакЗакрытия.УстановитьПараметр("Контрагент", Док.ВладелецТовара);
							РезПризнакЗакрытия = ЗапросПризнакЗакрытия.Выполнить().Выбрать();
							Если РезПризнакЗакрытия.Следующий() Тогда
								Парам.Вставить("ПредварительноеЗакрытие" , РезПризнакЗакрытия.ПредварительноеЗакрытие);	
								
								//+++ БАО 06.06.2017 №926
								НайденнаяСтрокаСписокМагазинов.ПредварительноеЗакрытиеЗаказов = РезПризнакЗакрытия.ПредварительноеЗакрытие;
								//--- БАО 06.06.2017 №926
								
							КонецЕсли;
							
							//+++ БАО 01.06.2017 №926
						Иначе
							
							Парам.Вставить("ПредварительноеЗакрытие" , ПредварительноеЗакрытиеЗаказов);	
							
						КонецЕсли;
						//--- БАО 01.06.2017 №926
						
						
						
						//// Михушкин --->> 
						//НайБПМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Док.Номер));
						//Если ЗначениеЗаполнено(НайБПМестнаяДоставка) Тогда
						//	
						//	Если ЗначениеЗаполнено(НайБПМестнаяДоставка.ТочкаОтправления) И ЗначениеЗаполнено(НайБПМестнаяДоставка.ТочкаПрибытия) Тогда								
						//		АдресОтправления = НайБПМестнаяДоставка.ТочкаОтправления.Адрес;
						//		АдресПрибытия = НайБПМестнаяДоставка.ТочкаПрибытия.Адрес;		
						//		
						//		РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(Формат(АдресОтправления.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресОтправления.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."));
						//		Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда							
						//			Парам.Вставить("РасстояниеОтБазыПоДорогам" , РасстояниеПоДорогам);								
						//		КонецЕсли;
						//	КонецЕсли;	                                                                 					
						//КонецЕсли;			
						//// <<--- Михушкин 
						
						
						//+++++Серегин М.В. 20.02.2016 15:57:06 
						Парам.Вставить("СОжиданием"        , ?(Число(Заказ.serviceID)=8,Истина,Ложь));
						//-----Серегин М.В. 20.02.2016 15:57:08 
						
						//Геннадий #4511 29.03.2021 ->
                        Парам.Вставить("ПодписаниеИВозвратСопрДокументов", ?(Число(Заказ.serviceIDdoc) = 24, Истина, Ложь));
						//Геннадий <-
						
						//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						//ЗаписьДополнительныеПараметрыЗаказа.Очистить();
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("Заказ", Парам.Заказ);
						Для Каждого СтрокаПарам Из Парам Цикл 
							ЗаписьДополнительныеПараметрыЗаказа.Вставить(СтрокаПарам.Ключ, СтрокаПарам.Значение);
						КонецЦикла;	
						//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						//+++ БАО 26.07.2017 №1488
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("ТарифнаяСеткаПодъемаЗаказов", ТарифнаяСеткаПодъемаЗаказов);
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("МетодОплатыПодъемаЗаказа", МетодОплатыПодъемаЗаказа);
						//--- БАО 26.07.2017 №1488
						
						
						////+++ Костя 070915 // Запись склада магазина реквизит- РС				
						//+++ Костя 261115
						Если Заказ.stockId_Ч > 0 Тогда
							//+++ БАО 01.06.2017 №926
							//--- Парам.Вставить("СкладМагазина", Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч));
							
							//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
							//--- Парам.Вставить("СкладМагазина", Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч));
							ЗаписьДополнительныеПараметрыЗаказа.Вставить("СкладМагазина", Справочники.СкладыМагазинов.НайтиПоКоду(Заказ.stockId_Ч));
							//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
							
							//--- БАО 01.06.2017 №926
							Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "---- Записан доп. параметр к заказу " 
							//+++ БАО 01.06.2017 №926
							//--- +Строка(Док.Номер) 
							+ "  СкладМагазина: " + Заказ.stockId_Ч); 
							//--- + "  СкладМагазина: " + СкладМагазина);// Костя 251115								
							//+ Строка(стрНомерЗаказа)); 
							//--- БАО 01.06.2017 №926
							
							
						Иначе
							//+++ БАО 01.06.2017 №926
							Если НайденнаяСтрокаСписокМагазинов = Неопределено Или (НайденнаяСтрокаСписокМагазинов <> Неопределено И НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию = Неопределено) Тогда
								//--- БАО 01.06.2017 №926
								Запрос = Новый Запрос(
								"ВЫБРАТЬ
								|	СкладыМагазиновПоУмолчанию.СкладМагазина
								|ИЗ
								|	РегистрСведений.СкладыМагазиновПоУмолчанию КАК СкладыМагазиновПоУмолчанию
								|ГДЕ
								|	СкладыМагазиновПоУмолчанию.Магазин = &Магазин");
								Запрос.УстановитьПараметр("Магазин", Док.ВладелецТовара);
								Результат = Запрос.Выполнить().Выбрать();
								Если Результат.Следующий() Тогда
									СкладМагазинаЗаказа = Результат.СкладМагазина;
									//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа 
									//--- Парам.Вставить("СкладМагазина", СкладМагазинаЗаказа);
									//--- lem.ЗаписатьДопПараметрыЗаказа(парам);
									ЗаписьДополнительныеПараметрыЗаказа.Вставить("СкладМагазина", СкладМагазинаЗаказа);
									//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
									
									Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "---- Записан доп. параметр к заказу " 
									//+++ БАО 01.06.2017 №926
									//---+Строка(Док.Номер) 
									//---+ "  СкладМагазина: " + Строка(СкладМагазинаЗаказа));     // Костя 251115								
									+ Строка(стрНомерЗаказа) + "  СкладМагазина: " + Заказ.stockId_Ч); 
									//--- БАО 01.06.2017 №926
								КонецЕсли;
								
								//+++ БАО 01.06.2017 №926
							ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию) Тогда 
								СкладМагазинаЗаказа = НайденнаяСтрокаСписокМагазинов.СкладМагазинаПоУмолчанию;
								//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа 
								//--- Парам.Вставить("СкладМагазина", СкладМагазинаЗаказа);
								ЗаписьДополнительныеПараметрыЗаказа.Вставить("СкладМагазина", СкладМагазинаЗаказа);
								//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
								
								
								Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "---- Записан доп. параметр к заказу " 
								+ Строка(стрНомерЗаказа) + "  СкладМагазина");
							КонецЕсли;
							//--- БАО 01.06.2017 №926
						КонецЕсли;
						////+++ Костя 261115
						//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						//--- lem.ЗаписатьДопПараметрыЗаказа(парам);
						//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "---- Записан доп. параметр к заказу " 
						//+++ БАО 01.06.2017 №926
						//--- +Строка(Док.Номер) 
						+Строка(стрНомерЗаказа) 
						//--- БАО 01.06.2017 №926
						+ "  ОценочнаяСтоимость: " + Строка(Заказ.assessedCost_Ч) 
						+ "  КОплатеКлиентом: " + Строка(Заказ.total_Ч));     // Костя 251115
						Док.СформироватьДвиженияПоШтрихкодам();//+++ Костя 06112015 _ ШтрихКоды       
						//CeHbKA #3587 
						//Док.СформироватьДвиженияПоШтрихкодам_Новая(Заказ.DataBarcodes);//+++ Костя 06112015 _ ШтрихКоды       
						//CeHbKA #3587 
					КонецЕсли;
					//Серегин М.В. 24.06.2015 17:02:08 
					
					//// Запись Причины отклонения заказа в системе
					//+++ БАО 25.09.2017 №
					//---Если Заказ.ReasonRefusalID_Ч > 0 Тогда
					Если Заказ.ReasonRefusalID_Ч > 0 И РеализацияДокОбъект <> Неопределено Тогда
						//--- БАО 25.09.2017 №	
						Если Заказ.ReasonRefusalID_Ч = 1 Тогда 
							ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненМагазином;
						ИначеЕсли Заказ.ReasonRefusalID_Ч = 2 Тогда 
							ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненПоПисьмуМагазина;
						ИначеЕсли Заказ.ReasonRefusalID_Ч = 3 Тогда 
							ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.ОтклоненЗаСрокомДавности;
						ИначеЕсли Заказ.ReasonRefusalID_Ч = 4 Тогда 
							ПричинаОтклоненияЗаказа = Справочники.ПричиныОтклоненияЗаказаВСистеме.Дубль;						
						КонецЕсли;
						Парам = Новый Структура;
						Парам.Вставить("Заказ", РеализацияДокОбъект.Ссылка);
						Парам.Вставить("ПричинаОтклоненияЗаказа", ПричинаОтклоненияЗаказа);
						
						//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						//--- // Михушкин - исправление порочной логики перезаписи доп параметров --->>  
						//--- lem.ЗаписатьДопПараметрыЗаказа(парам);			
						//--- НабПарам = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
						//--- НабПарам.Отбор.Заказ.Установить(парам.Заказ);
						//--- НабПарам.Прочитать();
						//--- Если НабПарам.Количество() Тогда	
						//--- 	НабПарам[0].Заказ = парам.Заказ;
						//--- 	НабПарам[0].ПричинаОтклоненияЗаказа = парам.ПричинаОтклоненияЗаказа;
						//--- Иначе
						//--- 	Нов = НабПарам.Добавить();
						//--- 	ЗаполнитьЗначенияСвойств(Нов, парам);
						//--- КонецЕсли;											
						//--- НабПарам.Записать();
						//--- // <<--- Михушкин
						
						//ЗаписьДополнительныеПараметрыЗаказа.Очистить();
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("Заказ", парам.Заказ); 
						Для Каждого СтрокаПарам Из Парам Цикл 
							ЗаписьДополнительныеПараметрыЗаказа.Вставить(СтрокаПарам.Ключ, СтрокаПарам.Значение);
						КонецЦикла;	
						
						//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						
					КонецЕсли;
					
					
					
					//--- Костя 070915 //
					Если НовыйОбъект И (ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(Док) = Тип("ДокументОбъект.Фрахт") Или ТипЗнч(Док) = Тип("ДокументОбъект.ЗаборТовара")) Тогда
						МассивЗагруженныхНомеровЗаказов.Добавить(СокрЛП(Док.Номер));
					КонецеСли;
					
					Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(Док) = Тип("ДокументОбъект.Фрахт") Или ТипЗнч(Док) = Тип("ДокументОбъект.ЗаборТовара") Тогда
						МассивЗагруженныхНомеровЗаказовДляКатегорий.Добавить(СокрЛП(Док.Номер));
					КонецеСли;
					
					Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(Док) = Тип("ДокументОбъект.Фрахт") Или ТипЗнч(Док) = Тип("ДокументОбъект.ЗаборТовара") Тогда
						МассивЗагруженныхНомеровЗаказовДляПолигонов.Добавить(СокрЛП(Док.Номер));
					КонецеСли;
					
					//// Проверка количества товаров // Костя 210915 /// -> Не корректная проверка
					//Если (ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(Док) = Тип("ДокументОбъект.Фрахт") Или ТипЗнч(Док) = Тип("ДокументОбъект.ЗаборТовара")) Тогда
					//	ТоварыКоличествоИзАдминки = ТабличнаяЧастьЗаказов.Количество();
					//	ТоварыКоличествоВДоке     = Док.Товары.Количество();
					//	Если ТоварыКоличествоИзАдминки > ТоварыКоличествоВДоке Тогда
					//		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Ошибка ТЧ Товары!!! Не все товары загружены, заказ: " + Строка(Док.Номер));
					//	КонецЕсли;
					//КонецЕсли;
					//// Проверка количества товаров-------
					
				Исключение
					Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, эл["СообщениеОбОшибке"] + Символы.ПС + ОписаниеОшибки());
					ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, эл["СообщениеОбОшибке"] + Символы.ПС + ОписаниеОшибки());
					//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					Если Не РежимСравнения Тогда
						lem.ОтправитьНормальноеСообщениеАдминам("Запись документов", эл["СообщениеОбОшибке"] + Символы.ПС + ОписаниеОшибки());
					КонецЕсли;	
				КонецПопытки;	
			КонецЦикла;
			
			
			// теперь экземпляры получаем в момент получения перевозки    26.12.2018
			// Михушкин - Загрузка экземпляров товаров --->> 
			//Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			//	//+++ БАО 01.06.2017 №926
			//	//--- Если Док.ВладелецТовара = Справочники.Контрагенты.НайтиПоКоду("Shop_612") Тогда			
			//	//Если Док.ВладелецТовара = Shop_612 Тогда
			//	Если НЕ ПараметрыСеанса.oz_МагазинOZON.Пустая() Тогда
			//		Если Док.ВладелецТовара = ПараметрыСеанса.oz_МагазинOZON Тогда
			//			
			//			//--- БАО 01.06.2017 №926	
			//			
			//			//+++ БАО 01.06.2017 №926
			//			//ХХХ здесь трудно оптимизировать
			//			//--- БАО 01.06.2017 №926
			//			oz_РаботаССервисом.ЗаполнитьРСoz_ЭкземплярыТоваровЗаказов(Док);		
			//		КонецЕсли;	
			//	КонецЕсли;	
			//КонецЕсли;	
			// <<--- Михушкин
			
			
			
			ОтразитьИсториюСостава = Ложь;
			
			Если ЗначениеЗаполнено(РеализацияДок) Тогда
				Если ЗначениеЗаполнено(РеализацияДок.Ссылка) Тогда
					ОтразитьИсториюСостава = Истина;
				КонецЕСли;	
			КонецеСли;		
			Если РеализацияДокОбъект <> Неопределено Тогда
				Если ЗначениеЗаполнено(РеализацияДокОбъект.Ссылка) Тогда
					ОтразитьИсториюСостава = Истина;
				КонецЕСли;	
			КонецеСли;		
			
			
			Если ОтразитьИсториюСостава Тогда
				Если Заказ.serviceDelivery_Ч <> 2 и Заказ.serviceDelivery_Ч <> 3 Тогда
					Если ЗначениеЗаполнено(РеализацияДок) Тогда
						lem.ОтразитьСоставЗаказаВИстории(РеализацияДок, РеализацияДок, Ложь);
					Иначе	
						lem.ОтразитьСоставЗаказаВИстории(РеализацияДокОбъект, РеализацияДокОбъект, Ложь);
					КонецеСли;	
				КонецеСли;
			КонецеСли;
			
			////+++++Серегин М.В. 28.01.2016 12:00:57 было
			//Если ДатаДо <> Заказ.deliveryDate_Д Тогда
			
			//+++++Серегин М.В. 28.01.2016 12:01:08 стало
			Если ДатаДо = Неопределено Тогда
				ДатаДо = Дата("00010101");    
			КонецЕсли;
			
			
			Если НачалоДня(ДатаДо) <> НачалоДня(Заказ.deliveryDate_Д) Тогда //-----Серегин М.В. 28.01.2016 12:01:40 
				
				Если обМестнаяДоставка <> Неопределено Тогда
					Попытка
						Если обМестнаяДоставка.ЭтоНовый() Тогда
							обМестнаяДоставка.Записать();
						КонецеСли;
						ОбновитьДатуЗаказа(РежимСравнения, ХранилищеОбъектовСравнения, Заказ, обМестнаяДоставка, РеализацияДок);
						ДатаДоставкиОбновлена = Истина;
					исключение
						
					КонецПопытки;
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, обМестнаяДоставка.Ссылка);
					//--- БАО 27.06.2017 №1192
					
				КонецеСли;
			КонецеСли;	
			
			ВыборкаЗадачДоставки = Неопределено;
			Если флНужноЗаписыватьДоставку Тогда
				
				
				
				Если флНужноЗаписыватьГруз Тогда
					обМестнаяДоставка.Груз = обГруз.Ссылка;
				КонецЕсли;
				
				обМестнаяДоставка.СуммаБанковскойКомиссии = БанковскаяКомиссия;
				
				Попытка
					
					//======================долгий код
					
					
					
					Если Не (обМестнаяДоставка.ДоставкаВыполнена Или обМестнаяДоставка.ДоставкаВыполненаЧастично) Тогда
						// перенес в условие Если СтатусЗаказа = 4 Тогда lem 24.08.2016
						//ВыборкаЗадачДоставки = ПолучитьСписокЗадачДоставки(обМестнаяДоставка.Ссылка);
						//флНужноУдалитьДоставку = ВыборкаЗадачДоставки.Количество() > 0;
						// перенес в условие Если СтатусЗаказа = 4 Тогда lem 24.08.2016
						флУдалитьИзПланируемыхРейсов = Ложь;
						Если СтатусЗаказа = 4 Тогда
							обМестнаяДоставка.ДоставкаОтменена = Истина;
							обМестнаяДоставка.Завершен = Истина;
							флУдалитьИзПланируемыхРейсов = Истина;
							флНужноУдалитьДоставку=истина;
							// перенес в условие Если СтатусЗаказа = 4 Тогда lem 24.08.2016
							//ВыборкаЗадачДоставки = ПолучитьСписокЗадачДоставки(обМестнаяДоставка.Ссылка);
							//флНужноУдалитьДоставку = ВыборкаЗадачДоставки.Количество() > 0;
							// перенес в условие Если СтатусЗаказа = 4 Тогда lem 24.08.2016
						КонецЕсли;
						
						//флУдалитьИзПланируемыхРейсов = Ложь;
						Если СтатусЗаказа = 3 Тогда
							обМестнаяДоставка.Завершен = Истина;
							обМестнаяДоставка.ДоставкаВыполнена = Истина; 
							обМестнаяДоставка.ДоставкаОтменена = Ложь;
						КонецЕсли;
						
						Если СтатусЗаказа = 2 Тогда
							Если обМестнаяДоставка.Завершен Тогда
								обМестнаяДоставка.Завершен = Ложь;
								обМестнаяДоставка.ДоставкаОтменена = Ложь;
								Если Не флНужноУдалитьДоставку Тогда
									обМестнаяДоставка.Стартован = Ложь;
								КонецЕсли;
							КонецЕсли;
							флНужноУдалитьДоставку = Ложь;
						КонецЕсли;
						
						ЗапросПоискаРейсов = Новый Запрос;
						//херим нова
						//ЗапросПоискаРейсов.Текст =
						//"ВЫБРАТЬ
						//|	новаЗаданияРейсов.Рейс
						//|ИЗ
						//|	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
						//|ГДЕ
						//|	новаЗаданияРейсов.Доставка = &Доставка
						//|	И новаЗаданияРейсов.ЗаданиеВыполнено = ЛОЖЬ
						//|	И новаЗаданияРейсов.ЗаданиеВыполненоВручную = ЛОЖЬ
						//|	И новаЗаданияРейсов.Рейс.Стартован = ИСТИНА
						//|	И новаЗаданияРейсов.Рейс.РейсВыполнен = ЛОЖЬ
						//|	И новаЗаданияРейсов.Рейс.Завершен = ЛОЖЬ
						//|
						//|СГРУППИРОВАТЬ ПО
						//|	новаЗаданияРейсов.Рейс";
						//херим нова
						Если флУдалитьИзПланируемыхРейсов Тогда
							//+++ БАО 01.06.2017 №926
							//ХХХ  оптимизировать можно
							//--- БАО 01.06.2017 №926
							
							
							////begin комментируем блок, в связи с задачей отмены заказов, находящихся в рейсе 30/04/2021
							
							//ЗапросПоискаРейсов.Текст = "ВЫБРАТЬ
							//|	РейсЗаказы.Ссылка.Ссылка КАК Рейс,
							//|	РейсЗаказы.Заказ.Ссылка КАК Заказ,
							//|	РейсЗаказы.Ссылка.РейсМестнойДоставки КАК РейсМестнойДоставки,
							//|	РейсЗаказы.Ссылка.РейсМестнойДоставки.Транспорт КАК Транспорт,
							//|	РейсЗаказы.Ссылка.ДатаРейса КАК ДатаНачала
							//|ИЗ
							//|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
							//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
							//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыЗакрытыеДляИзменения.СрезПоследних КАК ДокументыЗакрытыеДляИзмененияСрезПоследних
							//|			ПО РейсЗаказы.Ссылка = ДокументыЗакрытыеДляИзмененияСрезПоследних.Документ
							//|		ПО (новаМестнаяДоставка.Номер = ВЫРАЗИТЬ(РейсЗаказы.Заказ КАК Документ.РеализацияТоваровУслуг).Номер)
							//|ГДЕ
							//|	РейсЗаказы.Ссылка.ДатаРейса >= &ДатаРейса
							//|	И РейсЗаказы.УдаленИзРейса = ЛОЖЬ
							//|	И новаМестнаяДоставка.Ссылка = &Доставка
							//|	И ЕСТЬNULL(ДокументыЗакрытыеДляИзмененияСрезПоследних.ЗакрытДляРедактирования, ЛОЖЬ) = ЛОЖЬ";
							//
							//ЗапросПоискаРейсов.УстановитьПараметр("Доставка", обМестнаяДоставка.Ссылка);
							//ЗапросПоискаРейсов.УстановитьПараметр("ДатаРейса", НачалоДня(ТекущаяДата()));
							//ВыборкаРейсов = ЗапросПоискаРейсов.Выполнить().Выбрать();
							//Пока ВыборкаРейсов.Следующий() Цикл
							//	Рейс = ВыборкаРейсов.Рейс;
							//	//Если НачалоДня(Рейс.ДатаНачала) <> НачалоДня(Заказ.deliveryDate_Д) Или флУдалитьИзПланируемыхРейсов Тогда
							//	//Если Час(ТекущаяДата()) < 10  Тогда	
							//	//херим нова
							//	
							//	//УдалительИзРейсов.Журнал = Новый Структура("Дерево", Новый Структура("Значение", Новый ДеревоЗначений));
							//	//УдалительИзРейсов.НачатьРедактирование(Рейс, Рейс.ПолучитьОбъект());
							//	//УдалительИзРейсов.УдалитьДоставку(Рейс, обМестнаяДоставка.Ссылка);
							//	//УдалительИзРейсов.ЗакончитьРедактирование(Рейс, Ложь);
							//	//
							//	//МассивОбновленияОбъектовУТЛ.Добавить(Рейс);
							//	
							//	//херим нова
							//	
							//	
							//	РейсОб = Рейс.ПолучитьОбъект();
							//	
							//	НайЗ = РейсОб.Заказы.Найти(ВыборкаРейсов.Заказ);
							//	Если НайЗ <> Неопределено Тогда
							//		РейсОб.Заказы.Удалить(НайЗ);
							//	КонецеСли;	
							//	
							//	РейсОб.Записать(РежимЗаписиДокумента.Запись);
							//	
							//	//+++ БАО 27.06.2017 №1192
							//	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, РейсОб.Ссылка);
							//	//--- БАО 27.06.2017 №1192
							//	
							//	
							//	Если РейсОб.Проведен Тогда
							//		РейсОб.Записать(РежимЗаписиДокумента.Проведение);
							//	КонецеСли;	
							//	
							//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   --- Доставка удалена из рейса " + Рейс.Транспорт + " от " + Формат(ВыборкаРейсов.ДатаНачала, "ДЛФ=DD"));
							//	//Серегин М.В. 01.07.2015 17:37:21
							//	ПериодОтбор = ТекущаяДата();
							//	//РеализацияОтбор = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(обМестнаяДоставка.Ссылка.Номер);
							//	//Если ЗначениеЗаполнено(РеализацияОтбор) Тогда
							//	
							//	НаборЗаписей = РегистрыСведений.УдаленныеДоставкиИзРейсов.СоздатьНаборЗаписей();
							//	НаборЗаписей.Отбор.Период.Установить(ПериодОтбор);
							//	НаборЗаписей.Отбор.Реализация.Установить(ВыборкаРейсов.Заказ);
							//	Запись = НаборЗаписей.Добавить();
							//	Запись.Период = ПериодОтбор;
							//	Запись.Реализация = ВыборкаРейсов.Заказ;
							//	Запись.Рейс = ВыборкаРейсов.РейсМестнойДоставки;
							//	Запись.Транспорт = ВыборкаРейсов.Транспорт;
							//	НаборЗаписей.Записать();
							//	
							//	//+++ БАО 27.06.2017 №1192
							//	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, НаборЗаписей)
							//	//--- БАО 27.06.2017 №1192
							//	
							//	//КонецЕсли;
							//	//Серегин М.В. 01.07.2015 17:37:22 
							//	
							//	//КонецЕсли;
							//КонецЦикла;
							
							////end комментируем блок, в связи с задачей отмены заказов, находящихся в рейсе 30/04/2021
							
						КонецеСли;
					Иначе
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   Доставка завершена");
					КонецЕсли;
					обМестнаяДоставка.Записать();
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, обМестнаяДоставка.Ссылка);
					//--- БАО 27.06.2017 №1192
					
					
					//херим нова
					//МассивОбновленияОбъектовУТЛ.Добавить(обМестнаяДоставка);
					//херим нова
					
					Если ДатаДо <> Заказ.deliveryDate_Д И НЕ ДатаДоставкиОбновлена Тогда
						Если обМестнаяДоставка.ЭтоНовый() Тогда
							обМестнаяДоставка.Записать();
							
							//+++ БАО 27.06.2017 №1192
							ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, обМестнаяДоставка.Ссылка);
							//--- БАО 27.06.2017 №1192
							
						КонецеСли;
						ОбновитьДатуЗаказа(РежимСравнения, ХранилищеОбъектовСравнения, Заказ, обМестнаяДоставка, РеализацияДок);
					КонецеСли;	
					
					//======================долгий код
					
					Если Не обМестнаяДоставка.Стартован И Не СтатусЗаказа = 4 Тогда
						обМестнаяДоставка.Старт();
						//ОбновитьДатуЗаказа(РежимСравнения, ХранилищеОбъектовСравнения, Заказ, обМестнаяДоставка);
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   +++ Создана доставка");
					Иначе
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   *** Обновлена доставка");
					КонецЕсли;
				Исключение
					Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи доставки " + стрНомерЗаказа + " " + ОписаниеОшибки());
					ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "!!!Ошибка записи доставки " + стрНомерЗаказа + " " + ОписаниеОшибки());
					//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					//+++ БАО 05.07.2017 №1250
					
					
					Если Не РежимСравнения Тогда
						lem.ОтправитьНормальноеСообщениеАдминам("Запись документов", "!!!Ошибка записи доставки " + стрНомерЗаказа + " " + ОписаниеОшибки());
					Иначе 
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи доставки " + стрНомерЗаказа + " " + ОписаниеОшибки());
					КонецЕсли;					//--- БАО 05.07.2017 №1250 	
				КонецПопытки;
				
			КонецЕсли;
			
			//+++ БАО 06.06.2017 №926
			//---- Если флНужноУдалитьДоставку И обМестнаяДоставка <> Неопределено Тогда
			//--- БАО 06.06.2017 №	
			//Если ВыборкаЗадачДоставки = Неопределено Тогда
			//	ВыборкаЗадачДоставки = ПолучитьСписокЗадачДоставки(обМестнаяДоставка.Ссылка);
			//КонецЕсли;
			//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   --- Удаление задач доставки:");
			//Пока ВыборкаЗадачДоставки.Следующий() Цикл
			//	ЗадачаДоставки = ВыборкаЗадачДоставки.Ссылка.ПолучитьОбъект();
			//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "     - " + ЗадачаДоставки);
			//	ЗадачаДоставки.ДоставкаОтменена = Истина;
			//	ЗадачаДоставки.ВыполнитьЗадачу();
			//КонецЦикла;
			//+++ БАО 06.06.2017 №926	
			//--- КонецЕсли;
			//--- БАО 06.06.2017 №926
			
			Если флРазрешеноОбновлениеЗаказа И (Не флЗаполнятьВозврат) И флНужноЗаписыватьВозврат Тогда
				Попытка
					ВозвратДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   *** Записан возврат");
				Исключение
					Если Не РежимСравнения Тогда
						lem.ОтправитьНормальноеСообщениеАдминам("Запись документов", "!!!Ошибка записи возврата");
					Иначе 
						Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи возврата");
					КонецЕсли;
					ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения,НомерЗаказа, "!!!Ошибка записи возврата");
					//флОбновлятьДатуПоследнейЗагрузки = Ложь;
					флРазрешеноОбновлениеЗаказа = Ложь;
				КонецПопытки;
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, ВозвратДокОбъект.Ссылка);
				//--- БАО 27.06.2017 №1192
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивОбновленияОбъектовУТЛ.Количество() > 0 Тогда
			новаОбщиеПроцедуры.ОповеститьОбОбновлении(МассивОбновленияОбъектовУТЛ);
		КонецЕсли;
		
		//Сообщить("!!! Дату загрузки не обновляем =====================");
		//флОбновлятьДатуПоследнейЗагрузки = ЛОЖЬ;
		
		Если РежимСравнения Тогда 
			флОбновлятьДатуПоследнейЗагрузки = Ложь;
			//+++ БАО 06.07.2017 №1250
		Иначе 
			флОбновлятьДатуПоследнейЗагрузки = Истина;
		КонецЕсли;	
		//--- БАО 06.07.2017 №1250 
		
		УбратьЗаказИзРегистрации(ДатаЗаписиВНезагруженныеЗаказы, ИмяФайлаЛога, ЛогФайл, стрНомерЗаказа, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки);
		
		Если флОбновлятьДатуПоследнейЗагрузки Тогда
			//+++ БАО 07.07.2017 №1250
			
			//Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
			//Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЗаказов");
			//Запись.Прочитать();
			//Если Запись.Количество() = 0 Тогда
			//	НоваяЗапись = Запись.Добавить();
			//Иначе
			//	НоваяЗапись = Запись[0];
			//КонецЕсли;
			//НоваяЗапись.Ключ = "ПоследняяЗагрузкаЗаказов";
			//НоваяЗапись.Значение = ДатаВСтроку(Заказ.modifyDate_Д);
			//Попытка
			//	Запись.Записать();
			//Исключение
			//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "Ошибка обновления границы новых заказов. " + ОписаниеОшибки());
			//КонецПопытки;
			//
			////+++ БАО 27.06.2017 №1192
			//ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, Запись);
			////--- БАО 27.06.2017 №1192
			
			//Убираем из НезагруженныеЗаказы
			
			
			
			//--- БАО 07.07.2017 №1250 
			
		ИначеЕсли Не флСообщеноОбОтменеОбновленияДаты Тогда
			флСообщеноОбОтменеОбновленияДаты = Истина;
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Смещение даты последнего обновления не ведется");
		КонецЕсли;
		
		//Евген.УстановитьРазрешениеПроведения(Ложь);
		
		//Если ФлагАвтоматическогоЗапуска = 1 Тогда
		//	ТекМин = Минута(ТекущаяДата());
		//	Если (ТекМин = 14) ИЛИ (ТекМин = 29) ИЛИ (ТекМин = 44) ИЛИ (ТекМин = 59) Тогда
		//		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Обмен завершен для возможности запуска следующего экземпляра обмена");
		//		флОбновлятьДатуПоследнейЗагрузки = Ложь;
		//		флПропускатьЗагрузку = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		
		// Михушкин --->> 
		Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			
	
			// Установка категории для расчета ЗП
			mas.УстановитьКатегориюДляРасчетаЗП(РеализацияДокОбъект.Ссылка);
			
			
			//+++ БАО 06.06.2017 №926
			//ХХХ надо допилить
			//--- БАО 06.06.2017 №926
			НайБПМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Док.Номер));
			Если ЗначениеЗаполнено(НайБПМестнаяДоставка) Тогда
				
				Если ЗначениеЗаполнено(НайБПМестнаяДоставка.ТочкаОтправления) И ЗначениеЗаполнено(НайБПМестнаяДоставка.ТочкаПрибытия) Тогда								
					АдресОтправления = НайБПМестнаяДоставка.ТочкаОтправления.Адрес;
					АдресПрибытия = НайБПМестнаяДоставка.ТочкаПрибытия.Адрес;		
					
					РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(Формат(АдресОтправления.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресОтправления.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), НомерПотока);
					Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда	
						
						//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						//--- НаборДопСведений = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
						//--- НаборДопСведений.Отбор.Заказ.Установить(Док.Ссылка);
						//--- НаборДопСведений.Прочитать();
						//--- Для каждого Стр Из НаборДопСведений Цикл
						//--- 	Стр.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;						
						//--- КонецЦикла;
						//--- НаборДопСведений.Записать();
						
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("Заказ", Док.Ссылка);
						ЗаписьДополнительныеПараметрыЗаказа.Вставить("РасстояниеОтБазыПоДорогам", РасстояниеПоДорогам);
						
						//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
						
						//Парам.Вставить("РасстояниеОтБазыПоДорогам" , РасстояниеПоДорогам);								
					КонецЕсли;
					
					
					
					
				КонецЕсли;	
				ЗаписьДополнительныеПараметрыЗаказа.Вставить("Доставка", НайБПМестнаяДоставка.Ссылка);
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументОбъект.ЗаборТовара") Тогда
			
			Если ЗначениеЗаполнено(Док.ТерминалДоставки) И ЗначениеЗаполнено(Док.ТочкаДоставки) Тогда
				
				Если ЗначениеЗаполнено(Док.ТерминалДоставки.Склад) И ЗначениеЗаполнено(Док.ТерминалДоставки.Склад.ТочкаДоставки) Тогда
					
					АдресОтправления = Док.ТерминалДоставки.Склад.ТочкаДоставки.Адрес;
					АдресПрибытия    = Док.ТочкаДоставки.Адрес;
					
					РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(Формат(АдресОтправления.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресОтправления.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Широта, "ЧЦ=9; ЧДЦ=6; ЧРД=."), Формат(АдресПрибытия.Долгота, "ЧЦ=9; ЧДЦ=6; ЧРД=."), НомерПотока);
					Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда	
						
						НаборДопСведений = РегистрыСведений.ДополнительныеПараметрыЗабора.СоздатьНаборЗаписей();
						НаборДопСведений.Отбор.Забор.Установить(Док.Ссылка);
						НаборДопСведений.Прочитать();
						Если НаборДопСведений.Количество() Тогда							
							Для каждого Стр Из НаборДопСведений Цикл
								Стр.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;						
							КонецЦикла;
						Иначе
							НЗаписьЗабор = НаборДопСведений.Добавить();
							НЗаписьЗабор.Забор = Док.Ссылка;
							НЗаписьЗабор.Период = ТекущаяДата();
							НЗаписьЗабор.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;						
						КонецЕсли;
						
						НаборДопСведений.Записать();
						
						//+++ БАО 27.06.2017 №1192
						ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, НаборДопСведений);
						//--- БАО 27.06.2017 №1192
						
					КонецЕсли;
					
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
			НайБПМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Док.Номер));
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("Доставка", НайБПМестнаяДоставка.Ссылка);
			
			//++Задача № 3337
			РеализацияПоВозврату = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(СокрЛП(Док.Номер));
			Если Не РеализацияПоВозврату.Пустая() Тогда
				МассивЗагруженныхЗаказовДляПостОбработки.Добавить(РеализацияПоВозврату);
			КонецЕсли;
			//--Задача № 3337
			
		КонецЕсли;
		// <<--- Михушкин
		
		// Якурнов 12.09.2018 14:27:58 Убираем Доставку если было поменяно на самовывоз
		//>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		Если флИзменитьДоставкуВСвязиСИзменениемТипаДоставкиНаСамовывоз Тогда
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("Доставка", БизнесПроцессы.новаМестнаяДоставка.ПустаяСсылка());
		КонецЕсли;
		//<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		
		// Михушкин - Запись в РС РеализацияТоваровУслугИсторияРеквизитов - 25.07.2016 --->> 
		Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			Если Док.КоличествоМест = 0 Тогда
				Док.КоличествоМест = 1;	
			КонецЕсли;		
			mas.ЗаписьВРСРеализацияТоваровУслугИсторияРеквизитов(Док.Ссылка, Перечисления.СобытияЗаписиЗаказа.ЗагрузкаЗаказаИзФронта);
		КонецЕсли;
		// <<--- Михушкин 
		
		// Якурнов: Массив для Записи смены в доп параметры заказа
		// >>>>>>>> Начало 19.10.2018 10:12:25 >>>>>>>>
		
		Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			МассивЗагруженныхЗаказовДляПостОбработки.Добавить(Док.Ссылка);
		КонецеСли;
		
		// <<<<<<<< Конец 19.10.2018 10:12:25 <<<<<<<<
		
		
		Най = РезНепр.Найти(Формат(НомерЗаказа, "ЧГ="));
		Если Не ВозниклаОшибка И Най <> Неопределено Тогда
			УстановитьОшибочныйЗаказаПрогруженным(РежимСравнения, ХранилищеОбъектовСравнения, НомерЗаказа, "");
		КонецеСли;
		
		
		//+++ БАО 22.06.2017 №1148
		//СтатусЗаказа            = Заказ.status_Ч;
		//НомерЗаказа             = Заказ.orderId_Ч;
		//стрНомерЗаказа          = ЧислоКСтрокеБезПробелов(НомерЗаказа);
		Если флРазрешеноОбновлениеЗаказа Тогда			
			рэИнтеграцияРэдЭкспресс.REDПередачаДанныхОСтатусах_ЗаказОтменен_РегистрацияДляОтправки(Заказ.selfDelivery_Ч, Заказ.status_Ч,  ЧислоКСтрокеБезПробелов(НомерЗаказа));
		КонецЕсли;	
		//--- БАО 22.06.2017 №1148 
		
		
		//+++ БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
		Если ЗаписьДополнительныеПараметрыЗаказа.Свойство("Заказ") И ЗначениеЗаполнено(ЗаписьДополнительныеПараметрыЗаказа.Заказ)Тогда
			//+Степанов Задача № 3911  
			НужноФормироватьКод = Ложь;
			Попытка
				ТипыОплатПартнера = ТипыОплатДляФормированияКИК.Получить(ЗаписьДополнительныеПараметрыЗаказа.Заказ.ВладелецТовара);
				Если ТипыОплатПартнера <> Неопределено Тогда 
					Если ТипыОплатПартнера.Найти(ЗаписьДополнительныеПараметрыЗаказа.Заказ.ТипОплаты) <> Неопределено Тогда
						НужноФормироватьКод = Истина;
					КонецЕсли;	
				КонецЕсли;	
			Исключение
			КонецПопытки;
			Если НужноФормироватьКод И НайденнаяСтрокаСписокМагазинов.ИспользоватьКодИдентификацииКлиента И НайденнаяСтрокаСписокМагазинов.НазначениеКодаИдентификацииКлиентаИССтрижа Тогда
				ЗаписьДополнительныеПараметрыЗаказа.Вставить("КодИдентификацииКлиента", СформироватьКодИдентификацииКлиента(ЗаписьДополнительныеПараметрыЗаказа.Заказ.Номер));
				//+Степанов Задача № 3925	
			Иначе	
				ЗаписьДополнительныеПараметрыЗаказа.Вставить("КодИдентификацииКлиента", Заказ.identifier);
			КонецЕсли;
			//-Степанов Задача № 3911  
			
			//+Широков  Задача 4181
			Если ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
				ЗаписьДополнительныеПараметрыЗаказа.Вставить("ПолучательЗаказа", НайтиПолучателяЗаказа(Док.Контрагент));
			КонецЕсли;	
			//-Широков  Задача 4181
			
			//Асеев 13.12.2022 (Задача № 4949)>>>
			ЗаписьДополнительныеПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", Заказ.createDate_Д);
			//Асеев 13.12.2022 (Задача № 4949)<<<
			
			НабПарам = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
			НабПарам.Отбор.Заказ.Установить(ЗаписьДополнительныеПараметрыЗаказа.Заказ);
			
			НабПарам.Прочитать();
			
			Если НабПарам.Количество() = 0 Тогда
				
				Нов = НабПарам.Добавить();
				ЗаполнитьЗначенияСвойств(Нов, ЗаписьДополнительныеПараметрыЗаказа);
				
			Иначе 
				
				Для Каждого СтрокаЗаписи Из НабПарам Цикл 
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаписи, ЗаписьДополнительныеПараметрыЗаказа);
					
				КонецЦикла;	
				
			КонецЕсли;	
			
			//бао +++ 05.09.2017 
			
			Попытка
				
				//бао --- 05.09.2017 	
				
				НабПарам.Записать();
				
				//бао +++ 05.09.2017 
				
			Исключение
				
			КонецПопытки;
			
			//бао --- 05.09.2017 		
			
			
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, НабПарам);
			//--- БАО 27.06.2017 №1192
			
		КонецЕсли;	
		
		
		//--- БАО 05.06.2017 №926 - ДополнительныеПараметрыЗаказа
		
		//+++ БАО 29.06.2017 №1208 
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.APDEX_КлючевыеОперации.ЗагрузкаИзИнтернетМагазина_ОбработатьЗаказы_ОдинЗаказ, ВернутьВерсиюОбработки() +  ". Номер заказа " + НомерЗаказа + " . Номер потока" + НомерПотока + " . БлокЗаказов " + ПостификсАпдекса +  "Лог:" + ДополнительнаяСтрокаЛогаДляАпдекса);
		//--- БАО 29.06.2017 №1208 
		
		
		УвеличитьСчетчик(РазмерПорции, Счетчик, ТекПроц);
		
		
	КонецЦикла; // По заказам
	
	//+Степанов Задача № 3833
	//Асеев 14.10.2022 (Задача № 4913)>>> запишем позже
	//ТарификацияУслугСервер.ЗаписатьПараметрыТарифаЗаказа(ТаблицаПараметровТарифовЗаказов);
	//Асеев 14.10.2022 (Задача № 4913)<<<
	//-Степанов Задача № 3833
	
	ФлагЗаписиПослеКаждойСтроки = 1;
	ФлагДобавленияЗамены = 1;
	
	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "Загрузка завершена");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ХранилищеОбъектовСравнения", ХранилищеОбъектовСравнения);
	СтруктураВозврата.Вставить("МассивЗагруженныхНомеровЗаказов", МассивЗагруженныхНомеровЗаказов);
	
	ПередаваемыйТекст = ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураВозврата);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Структура возврата" + Символы.ПС + ПередаваемыйТекст;
	Сообщение.Сообщить();
	
	
	
	// обновление загруженных номеров
	Если МассивЗагруженныхНомеровЗаказов.Количество() <> 0 Тогда
		ТекстЗ = "declare @t" + НомерПотока + " [dbo].Torder ";
		Для СчМ = 0 По МассивЗагруженныхНомеровЗаказов.Количество() - 1 Цикл
			ТекстЗ = ТекстЗ + "
			|insert into @t" + НомерПотока + " values (" + МассивЗагруженныхНомеровЗаказов.Получить(СчМ) + ")";
		КонецЦикла;	
		
		ТекстЗ = ТекстЗ + " EXEC dbo.import_setOrdersLoadedIn1c @t" + НомерПотока;
		
		//+++ БАО 13.09.2017 №
		Попытка
			Если ПодключениеКМагазину.State = 0	Тогда 
				ПодключениеКМагазину.Open(Евген.СтрокаПодключенияКИнтернетМагазину()); 
			КонецЕсли;	
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗагрузкаИзИнтернетМагазина", , ,, ОписаниеОшибки());
			
		КонецПопытки;
		//--- БАО 13.09.2017 №
		
		Евген.ЗапросКИнтернетМагазину(ТекстЗ, ПодключениеКМагазину);
		
		
		ТекНабор = РегистрыСведений.APDEX_ЗамерыВремени.СоздатьНаборЗаписей();
		ДатаЗамера = ТекущаяДата();
		ТекНабор.Отбор.ДатаЗамера.Установить(ДатаЗамера);
		ТекНабор.Отбор.КлючеваяОперация.Установить(Справочники.APDEX_КлючевыеОперации.ЗагрузкаИзИнтернетМагазина_ЗагрузитьНовыеЗаказы);
		ТекНабор.Отбор.НомерСеанса.Установить(НомерСеансаИнформационнойБазы());
		
		Запись = ТекНабор.Добавить();
		Запись.ДатаЗамера = ДатаЗамера;
		Запись.КлючеваяОперация = Справочники.APDEX_КлючевыеОперации.ЗагрузкаИзИнтернетМагазина_ЗагрузитьНовыеЗаказы;
		Запись.Информация = ТекстЗ;
		Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
		Попытка
			ТекНабор.Записать();
		Исключение
		КонецПопытки;
		
		
		//ЗапЗаписьБрейков = Новый Запрос;
		//ЗапЗаписьБрейков.Текст = "ВЫБРАТЬ
		//                         |	РеализацияТоваровУслуг.Ссылка КАК Док
		//                         |ИЗ
		//                         |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//                         |ГДЕ
		//                         |	РеализацияТоваровУслуг.Номер В(&МасНомеров)";
		//ЗапЗаписьБрейков.УстановитьПараметр("МасНомеров", МассивЗагруженныхНомеровЗаказов);
		//МасЗаказовДляБрейков = Новый Массив;
		//ВыбБр = ЗапЗаписьБрейков.Выполнить().Выбрать();
		//
		//Пока ВыбБр.Следующий() Цикл
		//	МасЗаказовДляБрейков.Добавить(ВыбБр.Док);
		//КонецЦикла;	
		//
		//МаршрутизацияЗаказовСервер.УстановитьЛогистическиеКатегорииЗаказов(МасЗаказовДляБрейков);
	КонецеСли;	
	
	Если МассивЗагруженныхНомеровЗаказовДляКатегорий.Количество() <> 0 Тогда
		ЗапЗаписьБрейков = Новый Запрос;
		ЗапЗаписьБрейков.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Док
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Номер В(&МасНомеров)";
		ЗапЗаписьБрейков.УстановитьПараметр("МасНомеров", МассивЗагруженныхНомеровЗаказовДляКатегорий);
		МасЗаказовДляБрейков = Новый Массив;
		ВыбБр = ЗапЗаписьБрейков.Выполнить().Выбрать();
		
		Пока ВыбБр.Следующий() Цикл
			МасЗаказовДляБрейков.Добавить(ВыбБр.Док);
		КонецЦикла;	
		
		МаршрутизацияЗаказовСервер.УстановитьЛогистическиеКатегорииЗаказов(МасЗаказовДляБрейков);
	КонецеСли;	
	
	//Асеев 04.09.2024 (Задача № 5317)>>>
	Если МассивЗаказовЗаборов.Количество() Тогда
		ТарификацияУслугСервер.ЗагрузкаЗонТарификацииПартнеровЗаказов(МассивЗаказовЗаборов);
	КонецЕсли;
	//Асеев 04.09.2024 (Задача № 5317)<<<
	
	Если МассивЗагруженныхНомеровЗаказовДляПолигонов.Количество() <> 0 Тогда
		
		//Асеев 14.10.2022 (Задача № 4913)>>>
		МассивЗаказовЗон = Новый Массив;
		//Асеев 14.10.2022 (Задача № 4913)<<<
		
		ЗапПолигоны = Новый Запрос;
		ЗапПолигоны.Текст = "ВЫБРАТЬ
		|	новаМестнаяДоставка.Номер КАК НомерЗаказа,
		|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
		|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
		|	РеализацияТоваровУслуг.ТерминалДоставки.Код КАК КодТерминала
		|ИЗ
		|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
		|ГДЕ
		|	новаМестнаяДоставка.Номер В(&НомераЗаказов)
		|	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта <> 0
		|	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаборТовара.Номер,
		|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
		|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
		|	ЗаборТовара.ТерминалДоставки.Код
		|ИЗ
		|	Документ.ЗаборТовара КАК ЗаборТовара
		|ГДЕ
		|	ЗаборТовара.Номер В(&НомераЗаказов)
		|	И ЗаборТовара.ТочкаДоставки.Адрес.Широта <> 0
		|	И ЗаборТовара.ТочкаДоставки.Адрес.Долгота <> 0";
		ЗапПолигоны.УстановитьПараметр("НомераЗаказов", МассивЗагруженныхНомеровЗаказовДляПолигонов);
		
		РезПолигоны = ЗапПолигоны.Выполнить();
		Если Не РезПолигоны.Пустой() Тогда
			ВыбПолигоны = РезПолигоны.Выбрать();
			МассивСтрук = Новый Массив;
			Пока ВыбПолигоны.Следующий() Цикл
				Струк = Новый Структура;
				
				Струк.Вставить("НомерЗаказа", Число(ВыбПолигоны.НомерЗаказа));
				Струк.Вставить("Широта", ВыбПолигоны.Широта);
				Струк.Вставить("Долгота", ВыбПолигоны.Долгота);
				//Струк.Вставить("КодТерминала", ВыбПолигоны.КодТерминала);
				
				МассивСтрук.Добавить(Струк);
				
				//Асеев 14.10.2022 (Задача № 4913)>>>
				МассивЗаказовЗон.Добавить(ВыбПолигоны.НомерЗаказа);
				//Асеев 14.10.2022 (Задача № 4913)<<<
			КонецЦикла;	
			//+Широков 24.12.2020 по письму
			//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);
			//+Широков 24.12.2020 по письму
			//+Широков Задача 4193
			//disableUpdateCoords
//			ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "ОбщийМодуль.ЗагрузкаИзИнтернетМагазина.ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина(3500, 4)");
			ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "ОбщийМодуль.ЗагрузкаИзИнтернетМагазина.ОбработатьПорциюЗаказовДляЗагрузкаИзИнтернетМагазина(3500, 4)", Истина);
			//-Широков Задача 4193
			//-Широков 24.12.2020 по письму
			//Асеев 14.10.2022 (Задача № 4913)>>>
			ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон,, ТаблицаПараметровТарифовЗаказов);
			//Асеев 14.10.2022 (Задача № 4913)<<<
		КонецЕсли;
	КонецеСли;			
	
	//Асеев 14.10.2022 (Задача № 4913)>>>
	Если ТаблицаПараметровТарифовЗаказов.Количество() Тогда
		ТарификацияУслугСервер.ЗаписатьПараметрыТарифаЗаказа(ТаблицаПараметровТарифовЗаказов);
	КонецЕсли;
	//Асеев 14.10.2022 (Задача № 4913)<<<
	
	Если ПодключениеКМагазину <> Неопределено Тогда
		
		Евген.ОтключитьсяОтADO(ПодключениеКМагазину);
		
	КонецЕсли;
	
	// Якурнов 19.10.2018 11:59:22  
	МаршрутизацияЗаказовСервер.УстановкаСменыДляЗаказов(МассивЗагруженныхЗаказовДляПостОбработки); //Перенесено в рамках Задача № 3303
	
	//Асеев 29.03.2022 (Задача № 4767)>>>
	Если МассивЗагруженныхЗаказов.Количество() Тогда
		//Для Каждого ЗагруженныйЗаказ Из МассивЗагруженныхЗаказов Цикл
		//	ЗаписьРегистра = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьМенеджерЗаписи();
		//	ЗаписьРегистра.Заказ = ЗагруженныйЗаказ;
		//	ЗаписьРегистра.Прочитать();
		//	ЗаписьРегистра.EmailКлиента = "m.aseev@strizh-logistic.ru";
		//	ЗаписьРегистра.СсылкаНаОтслеживание = "yandex.ru";
		//	ЗаписьРегистра.Записать();
		//КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заказы", МассивЗагруженныхЗаказов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&Заказы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
		|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail = ЗНАЧЕНИЕ(Перечисление.ВариантыОтправкиСсылокЛКПолучателейЗаказов.ПриСозданииЗаказа) КАК ОтправкаEmail,
		|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаSMS = ЗНАЧЕНИЕ(Перечисление.ВариантыОтправкиСсылокЛКПолучателейЗаказов.ПриСозданииЗаказа) КАК ОтправкаSMS
		|ПОМЕСТИТЬ ВТ_Контрагенты
		|ИЗ
		|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(
		|			,
		|			Контрагент В
		|				(ВЫБРАТЬ
		|					ВТ_Заказы.ВладелецТовара КАК ВладелецТовара
		|				ИЗ
		|					ВТ_Заказы КАК ВТ_Заказы)) КАК ПараметрыКонтрагентовСрезПоследних
		|ГДЕ
		|	(ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail = ЗНАЧЕНИЕ(Перечисление.ВариантыОтправкиСсылокЛКПолучателейЗаказов.ПриСозданииЗаказа)
		|			ИЛИ ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаSMS = ЗНАЧЕНИЕ(Перечисление.ВариантыОтправкиСсылокЛКПолучателейЗаказов.ПриСозданииЗаказа))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.Ссылка КАК Ссылка,
		|	ВТ_Контрагенты.ОтправкаEmail КАК ОтправкаEmail,
		|	ВТ_Контрагенты.ОтправкаSMS КАК ОтправкаSMS
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
		|		ПО ВТ_Заказы.ВладелецТовара = ВТ_Контрагенты.Контрагент";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			//Асеев 31.05.2022 (Задача № 4813)>>>
			//РаботаСЛКПолучателяСервер.ОтправитьПисьмаСоСсылкамиНаОтслеживаниеЗаказов(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
			//изменен запрос для отправки СМС
			ТаблицаЗаказовОбщая = Результат.Выгрузить();
			ТаблицаЗаказов = ТаблицаЗаказовОбщая.Скопировать(Новый Структура("ОтправкаEmail", Истина), "Ссылка");
			Если ТаблицаЗаказов.Количество() Тогда
				РаботаСЛКПолучателяСервер.ОтправитьПисьмаСоСсылкамиНаОтслеживаниеЗаказов(ТаблицаЗаказов.ВыгрузитьКолонку("Ссылка"));
			КонецЕсли;
			ТаблицаЗаказов = ТаблицаЗаказовОбщая.Скопировать(Новый Структура("ОтправкаSMS", Истина), "Ссылка");
			Если ТаблицаЗаказов.Количество() Тогда
				Обр = Обработки.SMSС.Создать();
				Обр.ОтправитьСМССоСсылкойНаЛКПолучателяЗаказа(ТаблицаЗаказов.ВыгрузитьКолонку("Ссылка"));
			КонецЕсли;
			//Асеев 31.05.2022 (Задача № 4813)<<<
		КонецЕсли;
		
		//Асеев 25.09.2023 (Задача № 5131)>>>
		ПереносДатыДоставкиЗагружаемыхЗаказовПоДаннымКалендаряДоставкиИЗоныТарификации(МассивЗагруженныхЗаказов);
		//Асеев 25.09.2023 (Задача № 5131)<<<
		
	КонецЕсли;
	//Асеев 29.03.2022 (Задача № 4767)<<<
	
	//Асеев 05.12.2022 (Задача № 4939)>>>
	РазмерМассива = МассивНомеровЗаказовКОтклонению.Количество();
	Если РазмерМассива Тогда
		ТаблицаНомеров = Новый ТаблицаЗначений;
		КолонкиТаблицы = ТаблицаНомеров.Колонки;
		КолонкиТаблицы.Добавить("Номер", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11));
		Для НомерЭлемента = 1 По РазмерМассива Цикл
			ТаблицаНомеров.Добавить();
		КонецЦикла;
		ТаблицаНомеров.ЗагрузитьКолонку(МассивНомеровЗаказовКОтклонению, "Номер");
		
		ОбработкаОтмены = Обработки.ОтменаЗаказов.Создать();
		ОбработкаОтмены.СелекторТипаНомера = 1;
		ОбработкаОтмены.Партнер = Справочники.Контрагенты.НайтиПоКоду("Shop_961");
		ОбработкаОтмены.ИнициаторСостояния = Перечисления.ИнициаторыСостояния.ИнтернетМагазин;
		ОбработкаОтмены.ПричинаОтказаПереноса = Справочники.ПричиныОтказаПереноса.НайтиПоКоду("00000000144");
		ОбработкаОтмены.ОтменитьЗаказы(ТаблицаНомеров);
	КонецЕсли;
	//Асеев 05.12.2022 (Задача № 4939)<<<
	
	
КонецПроцедуры

//+Широков  Задача 4531
Функция НайтиМаркетплэйс(нКод)
	
	//КодПоиска = "00000000000";
	//КодПоиска = Сред(КодПоиска,1,11-СтрДлина(нКод)) + СокрЛП(нКод); 
		ЗапросПолучатели = Новый Запрос;
		ЗапросПолучатели.Текст = "ВЫБРАТЬ
		                         |	Маркетплейсы.Ссылка КАК Ссылка
		                         |ИЗ
		                         |	Справочник.Маркетплейсы КАК Маркетплейсы
		                         |ГДЕ
		                         |	Маркетплейсы.ИдентификаторАдминки = &ИдентификаторАдминки";
		ЗапросПолучатели.УстановитьПараметр("ИдентификаторАдминки",Число(нКод));
		ВыборкаПолучатели = ЗапросПолучатели.Выполнить().Выбрать();
		Если ВыборкаПолучатели.Следующий() Тогда
			Возврат ВыборкаПолучатели.Ссылка;
		Иначе;	
			Возврат Неопределено;
		КонецЕсли;
КонецФункции
//-Широков  Задача 4531

//+Широков  Задача 4521
Функция НайтиКонтрагента(нКод)
		ЗапросПолучатели = Новый Запрос;
		ЗапросПолучатели.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Код = &Код";
		ЗапросПолучатели.УстановитьПараметр("Код",нКод);
		ВыборкаПолучатели = ЗапросПолучатели.Выполнить().Выбрать();
		Если ВыборкаПолучатели.Следующий() Тогда
			Возврат ВыборкаПолучатели.Ссылка;
		Иначе;	
			Возврат Неопределено;
		КонецЕсли;
КонецФункции
//-Широков  Задача 4521

//+Широков  Задача 4181
Функция НайтиПолучателяЗаказов(нКод)
		ЗапросПолучатели = Новый Запрос;
		ЗапросПолучатели.Текст = "ВЫБРАТЬ
		|	ПолучателиЗаказов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПолучателиЗаказов КАК ПолучателиЗаказов
		|ГДЕ
		//27.10.2020
		//|	ПолучателиЗаказов.Код = &Код";
		|	ПолучателиЗаказов.ИдентификаторАдминки = &Код";
		ЗапросПолучатели.УстановитьПараметр("Код",нКод);
		ВыборкаПолучатели = ЗапросПолучатели.Выполнить().Выбрать();
		Если ВыборкаПолучатели.Следующий() Тогда
			Возврат ВыборкаПолучатели.Ссылка;
		Иначе;	
			Возврат Неопределено;
		КонецЕсли;
КонецФункции

Функция НайтиПолучателяЗаказа(НовыйКА)
	СсылкаСтрокаПолучатели =  НайтиПолучателяЗаказов(НовыйКА.Код);
	Возврат СсылкаСтрокаПолучатели;
КонецФункции
//-Широков  Задача 4181


Функция ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину) Экспорт
	//ВывестиСообщение("======= Запрос =======");
	//ВывестиСообщение(ТекстЗапроса);
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = ПодключениеКМагазину;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandType = 1;
	Cmd.CommandTimeout = 120;
	Возврат Cmd.Execute();
КонецФункции // ЗапросКИнтернетМагазину()

Функция СоздатьТаблицу(RS, СписокКолонок) Экспорт
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		//Попытка
		Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
		//исключение
		//	ВывестиСообщение(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
		//	конецпопытки;
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
			КонецЕсли;
		КонецЦикла;
		Rs.MoveNext()
	КонецЦикла;
	
	Возврат Таб;
КонецФункции



Процедура СоздатьВременныеТаблицы(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПодключениеКМагазину)
	Попытка 
		ЗапросКИнтернетМагазину("
		|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#orderList'))
		|	DROP TABLE #orderList
		|", ПодключениеКМагазину);
		ЗапросКИнтернетМагазину("
		|CREATE TABLE #orderList(
		|	orderId int,
		|	modifyDate datetime)
		|", ПодключениеКМагазину);
		ЗапросКИнтернетМагазину("
		|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#goodList'))
		|	DROP TABLE #goodList
		|", ПодключениеКМагазину);
		ЗапросКИнтернетМагазину("
		|CREATE TABLE #goodList(
		|	КодСайта int,
		|	Удален int,
		|	brandId int
		|)
		|", ПодключениеКМагазину);
	Исключение
		НормальныйХодВыполнения = Ложь;
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "Ошибка создания временных таблиц: "+ОписаниеОшибки());
		lem.ОтправитьНормальноеСообщениеАдминам("Создание временных таблиц", "Ошибка создания временных таблиц: "+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры


Процедура УбратьЗаказИзРегистрации(ДатаЗаписиВНезагруженныеЗаказы, ИмяФайлаЛога, Знач ЛогФайл, Знач стрНомерЗаказа, Знач ФлагДобавленияЗамены, Знач ФлагЗаписиПослеКаждойСтроки)
	
	Перем Наб;
	
	Попытка
		
		Наб = РегистрыСведений.НезагруженныеЗаказы.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ДатаЗаписиВНезагруженныеЗаказы);
		Наб.Отбор.НомерЗаказа.Установить(Формат(стрНомерЗаказа, "ЧГ="));
		
		//+++ БАО 13.07.2017 №
		Наб.Прочитать();
		
		НужноУдалять = Истина;
		
		Для Каждого СтрокаНабораЗаписей Из Наб Цикл 
			
			Если СтрокаНабораЗаписей.Ошибка <> "-" Тогда
				НужноУдалять = Ложь;
			КонецЕсли;
			
		КонецЦикла;	
		
		Если НужноУдалять Тогда
			//--- БАО 13.07.2017 №		
			
			Наб.Очистить();		
			Наб.Записать();
			
			//+++ БАО 13.07.2017 №	
		КонецЕсли;	
		//--- БАО 13.07.2017 №
		
		
	Исключение
		
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "Ошибка при записи регистрации заказов для обработки. Номер заказа: " + стрНомерЗаказа + " .Ошибка"  + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УвеличитьСчетчик(Знач РазмерПорции, Счетчик, ТекПроц)
	
	
	Проц = Окр(Счетчик * 100 / РазмерПорции);
	
	//--- БАО 06.07.2017 №1250 
	Если Проц <> ТекПроц Тогда
		ТекПроц = Проц;
		
		
		//+++ БАО 05.07.2017 №1250
		//---Состояние(ОписаниеЭтапа + " " + ТекПроц + "%");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Прогресс" + Символы.ПС + ТекПроц;
		Сообщение.Сообщить();
		
		//--- БАО 05.07.2017 №1250 
		
		
	КонецЕсли;
	Счетчик = Счетчик + 1;
	
КонецПроцедуры	

Процедура Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Стр)
	
	//Сообщить(Стр);
	
	//+++ БАО 05.07.2017 №1250
	
	//---Сообщить(""+ТекущаяДата()+" "+Стр);
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = ""+ТекущаяДата()+" "+Стр;
	СообщениеПользователю.Сообщить();
	
	//--- БАО 05.07.2017 №1250 
	
	Если ФлагДобавленияЗамены > 0 И ЗначениеЗаполнено(ИмяФайлаЛога) Тогда 
		ЛогФайл.ДобавитьСтроку(""+ТекущаяДата()+" "+Стр);
		Если ФлагЗаписиПослеКаждойСтроки = 1 Тогда
			Попытка
				ЛогФайл.Записать(ИмяФайлаЛога);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЧислоКСтрокеБезПробелов(Чис) Экспорт
	Возврат Формат(Чис, "ЧН=0; ЧГ=");
КонецФункции

Функция ПреобразоватьКодМагазина(Код) Экспорт
	Возврат "Shop_" + Формат(Код, "ЧН=0; ЧГ=");
КонецФункции

Функция ПолучитьДоговорКомитента(Комитент, флКомиссионнаяТорговля)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Наименование = &Наименование
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.ПометкаУдаления УБЫВ";
	Запрос.УстановитьПараметр("Владелец", Комитент);
	Запрос.УстановитьПараметр("Код", "000000001");
	Запрос.УстановитьПараметр("Наименование", ?(флКомиссионнаяТорговля, "Комиссионная торговля", "Договор по доставке"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

//+++ БАО 31.05.2017 №926
//Функция ПодобратьКонтрагентаИДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПараметрыЗаказа)
Функция ПодобратьКонтрагентаИДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг, ПараметрыЗаказа, ПрефиксКодовКонтрагентов, СписокСсылокНаКонтрагента = Неопределено)	
	//--- БАО 31.05.2017 №926	
	
	КодКонтрагента = ПрефиксКодовКонтрагентов + ЧислоКСтрокеБезПробелов(ПараметрыЗаказа.userId_Ч);
	
	//+++ БАО 31.05.2017 №926
	Если СписокСсылокНаКонтрагента <> Неопределено Тогда 
		
		НайденнаяСтрокаСписокСсылокНаКонтрагента = СписокСсылокНаКонтрагента.Получить(КодКонтрагента);
		
		Если   НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда
			Контрагент = НайтиПокупателя(КодКонтрагента);
			Договор = ПодготовитьДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг, Контрагент);
		Иначе 
			Контрагент = НайденнаяСтрокаСписокСсылокНаКонтрагента.Ссылка;
			Договор = ПодготовитьДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг, Контрагент, НайденнаяСтрокаСписокСсылокНаКонтрагента);
		КонецЕсли;	
		
	Иначе 					
		//--- БАО 31.05.2017 №926
		
		Контрагент = НайтиПокупателя(КодКонтрагента);
		Договор = ПодготовитьДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг, Контрагент);
		
		//+++ БАО 31.05.2017 №926
	КонецЕсли;
	//--- БАО 31.05.2017 №926
	
	КонтрагентИДоговор = Новый Структура("Контрагент, Договор", Контрагент, Договор);
	Возврат КонтрагентИДоговор;
	
КонецФункции

//+++ БАО 31.05.2017 №926
//Функция ПодготовитьМагазин(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Заказ)
Функция ПодготовитьМагазин(ПодключениеКМагазину, ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Заказ, КомитентПер, ИМ_TopDelivery, Код_ИМ_TopDelivery, Руб, Орг, ХранилищеОбъектовСравнения, РежимСравнения, СоздатьМагазин = Ложь, Автопоступление = Ложь, СписокОсновнойМагазин = Неопределено)	
	
	КодМагазина = ПреобразоватьКодМагазина(Заказ.shop_Ч);
	
	Если Не СоздатьМагазин Тогда
		//--- БАО 31.05.2017 №926	
		
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Код = &Код";
		Запрос.УстановитьПараметр("Код", КодМагазина);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
		//+++ БАО 31.05.2017 №926
	КонецЕсли;
	//--- БАО 31.05.2017 №926
	
	
	НовыйМагазин = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйМагазин.Код = КодМагазина;
	НовыйМагазин.Наименование = Заказ.shopName;
	НовыйМагазин.НаименованиеПолное = Заказ.shopName;
	
	НовыйМагазин.ЗаголовокИнтернетМагазина = Заказ.shopTitle;
	НовыйМагазин.ТелефонИнтернетМагазина = Заказ.shopPhone;
	НовыйМагазин.РеквизитыНаБЗ = Заказ.textReceipt;       //shopJurFace
	
	НовыйМагазин.Родитель = КомитентПер; //Комитенты
	НовыйМагазин.Покупатель = Истина;
	НовыйМагазин.Поставщик = Истина;
	НовыйМагазин.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	НовыйМагазин.Автопоступление = Истина;
	НовыйМагазин.ПолучательID = Заказ.receiverID;
	
	//+++ БАО 31.05.2017 №926
	РодительИМ_TopDelivery = Ложь;
	//--- БАО 31.05.2017 №926
	
	Если ЗначениеЗаполнено(Заказ.receiverID) Тогда
		//+++ БАО 31.05.2017 №926
		//НайТД = Справочники.Контрагенты.НайтиПоНаименованию("ИМ TopDelivery", Истина);
		//Если НайТД.Пустая() Тогда
		//	НовГр = Справочники.Контрагенты.СоздатьГруппу();
		//	НовГр.Родитель = НовыйМагазин.Родитель;
		//	НовГр.Наименование = "ИМ TopDelivery";
		//	НовГр.Записать();
		//	НайТД = НовГр.Ссылка;
		//КонецеСли;	
		//НовыйМагазин.Родитель = НайТД.Ссылка;
		
		НовыйМагазин.Родитель = ИМ_TopDelivery;
		РодительИМ_TopDelivery = Истина;
		
		//--- БАО 31.05.2017 №926
		
	КонецеСли;	
	
	//+++ БАО 31.05.2017 №926
	Если СписокОсновнойМагазин = Неопределено Тогда
		//--- БАО 31.05.2017 №926	
		
		
		КодМагазина = ПреобразоватьКодМагазина(Заказ.ParentID_Ч);
		Если Заказ.ParentID_Ч > 0 Тогда
			КодМагазинаРод = ПреобразоватьКодМагазина(Заказ.ParentID_Ч);
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Магазин
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ОсновнойМагазин.Код = &Код";
			Зап.УстановитьПараметр("Код", КодМагазинаРод);	
			Рез = Зап.Выполнить().Выгрузить();
			Если Рез.Количество() <> 0 Тогда
				НовыйМагазин.Родитель = Рез[0].Магазин;
				
				//+++ БАО 03.08.2017 №1470
			Иначе
				
				СоздатьВерхниеМагазины(Заказ, ИмяФайлаЛога, КодМагазинаРод, ЛогФайл, НовыйМагазин, ПодключениеКМагазину, РежимСравнения, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ХранилищеОбъектовСравнения);
				
				//--- БАО 03.08.2017 №1470
				
			КонецеСли;	
		КонецеСли;	
		
		//+++ БАО 31.05.2017 №926
	Иначе
		
		ParentID_Ч = Заказ.ParentID_Ч;
		
		Если РодительИМ_TopDelivery Тогда
			
			ParentID_Ч = Код_ИМ_TopDelivery;
			
		Иначе 
			
			ParentID_Ч = ПреобразоватьКодМагазина(Заказ.ParentID_Ч);
			
		КонецЕсли;	
		
		НайденнаяСтрокаОсновнойМагазин = СписокОсновнойМагазин.Получить(СокрЛП(ParentID_Ч));
		Если НайденнаяСтрокаОсновнойМагазин <> Неопределено Тогда 
			НовыйМагазин.Родитель = НайденнаяСтрокаОсновнойМагазин.ОсновнойМагазин;	
		Иначе
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ОсновнойМагазин.Код = &Код";
			Запрос.УстановитьПараметр("Код","Shop_" + СокрЛП(ParentID_Ч));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда 
				
				НовыйМагазин.Родитель = Выборка.Ссылка;
				
			Иначе 
				
				НовыйМагазин.Родитель= СоздатьВерхниеМагазины(Заказ, ИмяФайлаЛога, КодМагазинаРод, ЛогФайл, НовыйМагазин, ПодключениеКМагазину, РежимСравнения, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ХранилищеОбъектовСравнения);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;
	//--- БАО 31.05.2017 №926
	
	НовыйМагазин.Записать();
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, НовыйМагазин.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	
	
	// Михушкин - копируем ПараметрыКонтрагентов - 22.08.2016 --->> 
	Попытка		
		
		Если ЗначениеЗаполнено(НовыйМагазин.Родитель) Тогда
			//+++ БАО 31.05.2017 №926
			Если СписокОсновнойМагазин = Неопределено Тогда 
				//--- БАО 31.05.2017 №926	
				
				ЗапросПК = Новый Запрос("ВЫБРАТЬ
				|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
				|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
				|	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
				|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
				|	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
				|	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
				|	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
				|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
				|	ПараметрыКонтрагентовСрезПоследних.ВесЗапросаДанныхОПодъемеОтВодителя КАК ВесЗапросаДанныхОПодъемеОтВодителя,
				|	ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей КАК НаименованиеЛатиницей,
				|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
				|	ПараметрыКонтрагентовСрезПоследних.ТипОперативнойПриемки КАК ТипОперативнойПриемки,
				|	ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам КАК УчетЗаказовПоМестам,
				|	ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам КАК УчетШКПоТоварам,
				|	ПараметрыКонтрагентовСрезПоследних.СкладскаяОбработкаОтсутствует КАК СкладскаяОбработкаОтсутствует,
				|	ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах КАК АгрегироватьДанныеВОтправляемыхОтчетах,
				|	ПараметрыКонтрагентовСрезПоследних.СвязкаНастройкиПечатиЧеков КАК СвязкаНастройкиПечатиЧеков,
				|	ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности КАК СпособыКонтроляДнейЗадолженности,
				|	ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
				|	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет,
				|	ПараметрыКонтрагентовСрезПоследних.ТипОтношенийСКлиентами КАК ТипОтношенийСКлиентами,
				|	ПараметрыКонтрагентовСрезПоследних.УчетТоваровПоМестам КАК УчетТоваровПоМестам,
				|	ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
				|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто КАК АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто,
				|	ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
				|	ПараметрыКонтрагентовСрезПоследних.НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
				|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто КАК АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто,
				|	ПараметрыКонтрагентовСрезПоследних.НеСоздаватьМестаЗаказовПоПриходнымАПП КАК НеСоздаватьМестаЗаказовПоПриходнымАПП,
				//Асеев 07.09.2020 (Задача № 4197)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП,
				//Асеев 07.09.2020 (Задача № 4197)<<<
				//Асеев 26.01.2021 (Задача № 4449)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ОдинаковыеШКНаВсехМестахЗаказа КАК ОдинаковыеШКНаВсехМестахЗаказа,
				//Асеев 26.01.2021 (Задача № 4449)<<<				
				//Асеев 20.08.2021 (Задача № 4645)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
				//Асеев 20.08.2021 (Задача № 4645)<<<
				//Асеев 28.02.2022 (Задача № 4749)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ТарифПримерки КАК ТарифПримерки,
				//Асеев 28.02.2022 (Задача № 4749)<<<
				//Асеев 29.03.2022 (Задача № 4767)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail КАК ОтправкаСсылкиЛКПолучателяЗаказаНаEmail,
				//Асеев 29.03.2022 (Задача № 4767)<<<
				//Асеев 31.05.2022 (Задача № 4813)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаSMS КАК ОтправкаСсылкиЛКПолучателяЗаказаSMS,
				|	ПараметрыКонтрагентовСрезПоследних.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа КАК ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа,
				//Асеев 31.05.2022 (Задача № 4813)<<<
				//Асеев 18.08.2022 (Задача № 4873)>>>
				|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке,
				//Асеев 18.08.2022 (Задача № 4873)<<<
				//Асеев 30.08.2022 (Задача № 4883)>>>
				|	ПараметрыКонтрагентовСрезПоследних.БезусловнаяПечатьБланковЗаказов КАК БезусловнаяПечатьБланковЗаказов,
				//Асеев 30.08.2022 (Задача № 4883)<<<
				//Асеев 28.11.2022 (Задача № 4935)>>>
				|	ПараметрыКонтрагентовСрезПоследних.accessKey КАК accessKey,
				//Асеев 28.11.2022 (Задача № 4935)<<<
				//Асеев 26.01.2023 (Задача № 4977)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ЛьготнаяКатегорияЭквайринга КАК ЛьготнаяКатегорияЭквайринга,
				//Асеев 26.01.2023 (Задача № 4977)<<<
				//Асеев 12.05.2023 (по письму Контроль заказов)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ПроизводитьРассылкуКонтроляЗаказов КАК ПроизводитьРассылкуКонтроляЗаказов,
				//Асеев 12.05.2023 (по письму Контроль заказов)<<<
				//Асеев 30.09.2024 (Задача № 5329)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ФормироватьАПП КАК ФормироватьАПП,
				|	ПараметрыКонтрагентовСрезПоследних.ВремяФормированияАПП КАК ВремяФормированияАПП,
				//Асеев 30.09.2024 (Задача № 5329)<<<
				//Асеев 31.10.2024 (Задача № 5339)>>>
				|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
				//Асеев 31.10.2024 (Задача № 5339)<<<
				|ИЗ
				|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних");
				ЗапросПК.УстановитьПараметр("Контрагент", НовыйМагазин.Родитель.ОсновнойМагазин);	
				РезПК = ЗапросПК.Выполнить().Выгрузить();
				
				Если РезПК.Количество() > 0 Тогда
					
					НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
					НаборПК.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
					НаборПК.Прочитать();
					НаборПК.Очистить();
					
					НЗаписьПК = НаборПК.Добавить();					
					ЗаполнитьЗначенияСвойств(НЗаписьПК, РезПК[0]);
					НЗаписьПК.Период =  ТекущаяДата();
					НЗаписьПК.Контрагент = НовыйМагазин.Ссылка;
					
					НаборПК.Записать();	
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, НаборПК)
					//--- БАО 27.06.2017 №1192
					
				КонецЕсли;
				
				//+++ БАО 31.05.2017 №926
			ИначеЕсли НайденнаяСтрокаОсновнойМагазин <> Неопределено И НайденнаяСтрокаОсновнойМагазин.ЕстьПараметрыОсновногоМагазина Тогда 
				
				НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
				НаборПК.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
				НаборПК.Прочитать();
				НаборПК.Очистить();
				
				НЗаписьПК = НаборПК.Добавить();					
				ЗаполнитьЗначенияСвойств(НЗаписьПК, НайденнаяСтрокаОсновнойМагазин);
				НЗаписьПК.Период =  ТекущаяДата();
				НЗаписьПК.Контрагент = НовыйМагазин.Ссылка;
				
				НаборПК.Записать();	
				
				//+++ БАО 27.06.2017 №1192
				ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, НаборПК)
				//--- БАО 27.06.2017 №1192
				
				
			КонецЕсли;
			//--- БАО 31.05.2017 №926
			
			
		КонецЕсли;	
	Исключение	
	КонецПопытки;	
	// <<--- Михушкин
	
	
	Наб = РегистрыСведений.ПечататьБланкиПоКонтрагентам.СоздатьНаборЗаписей();
	Наб.Отбор.Контрагент.Установить(НовыйМагазин.Ссылка);
	Нов = Наб.Добавить();
	Нов.Контрагент = НовыйМагазин.Ссылка;
	Наб.Записать();
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, Наб);
	//--- БАО 27.06.2017 №1192
	
	
	ДоговорКомиссии = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	ДоговорКомиссии.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	ДоговорКомиссии.ВалютаВзаиморасчетов  = Руб;
	ДоговорКомиссии.Организация           = Орг; 
	ДоговорКомиссии.ВидДоговора           = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ДоговорКомиссии.Наименование          = "Комиссионная торговля";
	ДоговорКомиссии.Владелец              = НовыйМагазин.Ссылка;
	ДоговорКомиссии.Записать();
	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   +++ Записан договор комиссии для " + НовыйМагазин);
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, ДоговорКомиссии.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	
	ДоговорДоставки = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	ДоговорДоставки.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	ДоговорДоставки.ВалютаВзаиморасчетов  = Руб;
	ДоговорДоставки.Организация           = Орг; 
	ДоговорДоставки.ВидДоговора           = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ДоговорДоставки.Наименование          = "Договор по доставке";
	ДоговорДоставки.Владелец              = НовыйМагазин.Ссылка;
	ДоговорДоставки.Записать();
	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   +++ Записан договор доставки для " + НовыйМагазин);
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, ДоговорДоставки.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат НовыйМагазин.Ссылка;
КонецФункции

Функция СоздатьВерхниеМагазины(Знач Заказ, ИмяФайлаЛога, Знач КодМагазинаРод, Знач ЛогФайл, Знач НовыйМагазин, Знач ПодключениеКМагазину, Знач РежимСравнения, Знач ФлагДобавленияЗамены, Знач ФлагЗаписиПослеКаждойСтроки, Знач ХранилищеОбъектовСравнения)
	
	Перем RS, ГруппаРодитель, ЗапросПК, КодМагазинаТаблицаОсновнойМагазин, НаборПК, НЗаписьПК, ОсновнойМагазин, РезПК;
	
	ОсновнойМагазин = Справочники.Контрагенты.НайтиПоКоду(КодМагазинаРод);
	
	Если Не ЗначениеЗаполнено(ОсновнойМагазин) Тогда 
		RS = Евген.ЗапросКИнтернетМагазину(" 
		|SELECT
		|S.shopId, S.shopName, S.internetShopID
		|FROM 
		|settings S (NOLOCK)
		|WHERE
		|S.internetShopID ='" + Заказ.ParentID_Ч + "'", ПодключениеКМагазину);    
		
		Если RS <> Неопределено И RS <> 0  Тогда
			
			//Асеев 15.04.2022 (Задача № 4783)>>>
			//КодМагазинаТаблицаОсновнойМагазин = СоздатьТаблицу(RS, "shopId, shopName, internetShopID");//СписокКолонокДанныхКОнтрагентов);
			КодМагазинаТаблицаОсновнойМагазин = СоздатьТаблицу(RS, "shopId, shopName, internetShopID_Ч");//СписокКолонокДанныхКОнтрагентов);
			//Асеев 15.04.2022 (Задача № 4783)<<<
			
			RS=0;
			Если КодМагазинаТаблицаОсновнойМагазин.Количество() > 0 Тогда
				
				ОсновнойМагазин = Справочники.Контрагенты.СоздатьЭлемент();
				ОсновнойМагазин.Наименование = КодМагазинаТаблицаОсновнойМагазин[0].shopName;
				ОсновнойМагазин.Родитель = Справочники.Контрагенты.НайтиПоКоду("000000004"); //Комитенты
				//Асеев 15.04.2022 (Задача № 4783)>>>
				//ОсновнойМагазин.Код =  "Shop_" + КодМагазинаТаблицаОсновнойМагазин[0].internetShopID;
				ОсновнойМагазин.Код =  "Shop_" + Формат(КодМагазинаТаблицаОсновнойМагазин[0].internetShopID_Ч, "ЧГ=");
				//Асеев 15.04.2022 (Задача № 4783)<<<
				
				Попытка
					ОсновнойМагазин.Записать();
					ОсновнойМагазин = ОсновнойМагазин.Ссылка;
					
					//+++ БАО 27.06.2017 №1192
					ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, ОсновнойМагазин.Ссылка);
					//--- БАО 27.06.2017 №1192
					
					Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "+++ Записан основной магазин  "+ Заказ.shopName+" для shopId: "+ НовыйМагазин.Код); 
				Исключение
					Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи основной магазина: "+ Заказ.shopName +" для shopId: "+ НовыйМагазин.Код + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;						
			
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппаРодитель = Справочники.Контрагенты.СоздатьГруппу();
	ГруппаРодитель.Наименование = ОсновнойМагазин.Наименование;
	ГруппаРодитель.ОсновнойМагазин = ОсновнойМагазин.Ссылка;
	ГруппаРодитель.Родитель = Справочники.Контрагенты.НайтиПоКоду("000000004"); //Комитенты
	
	
	Попытка
		ГруппаРодитель.Записать();
		
		НовыйМагазин.Родитель = ГруппаРодитель.Ссылка;
		
		ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, ГруппаРодитель.Ссылка);
		
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "+++ Записан магазин группа "+ Заказ.shopName+" для shopId: "+ НовыйМагазин.Код); 
	Исключение
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи магазина группы: "+ Заказ.shopName +" для shopId: "+ НовыйМагазин.Код + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	//Заполним параметры ГруппаРодитель
	ЗапросПК = Новый Запрос("ВЫБРАТЬ
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
	|	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
	|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
	|	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
	|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
	|	ПараметрыКонтрагентовСрезПоследних.ВесЗапросаДанныхОПодъемеОтВодителя КАК ВесЗапросаДанныхОПодъемеОтВодителя,
	|	ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей КАК НаименованиеЛатиницей,
	|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
	|	ПараметрыКонтрагентовСрезПоследних.ТипОперативнойПриемки КАК ТипОперативнойПриемки,
	|	ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам КАК УчетЗаказовПоМестам,
	|	ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам КАК УчетШКПоТоварам,
	|	ПараметрыКонтрагентовСрезПоследних.СкладскаяОбработкаОтсутствует КАК СкладскаяОбработкаОтсутствует,
	|	ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах КАК АгрегироватьДанныеВОтправляемыхОтчетах,
	|	ПараметрыКонтрагентовСрезПоследних.СвязкаНастройкиПечатиЧеков КАК СвязкаНастройкиПечатиЧеков,
	|	ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности КАК СпособыКонтроляДнейЗадолженности,
	|	ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
	|	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет,
	|	ПараметрыКонтрагентовСрезПоследних.ТипОтношенийСКлиентами КАК ТипОтношенийСКлиентами,
	|	ПараметрыКонтрагентовСрезПоследних.УчетТоваровПоМестам КАК УчетТоваровПоМестам,
	|	ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
	|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто КАК АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто,
	|	ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
	|	ПараметрыКонтрагентовСрезПоследних.НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
	|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто КАК АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто,
	|	ПараметрыКонтрагентовСрезПоследних.НеСоздаватьМестаЗаказовПоПриходнымАПП КАК НеСоздаватьМестаЗаказовПоПриходнымАПП,
	//Асеев 07.09.2020 (Задача № 4197)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП,
	//Асеев 07.09.2020 (Задача № 4197)<<<
	//Асеев 26.01.2021 (Задача № 4449)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОдинаковыеШКНаВсехМестахЗаказа КАК ОдинаковыеШКНаВсехМестахЗаказа,
	//Асеев 26.01.2021 (Задача № 4449)<<<
	//Асеев 20.08.2021 (Задача № 4645)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
	//Асеев 20.08.2021 (Задача № 4645)<<<
	//Асеев 28.02.2022 (Задача № 4749)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ТарифПримерки КАК ТарифПримерки,
	//Асеев 28.02.2022 (Задача № 4749)<<<
	//Асеев 29.03.2022 (Задача № 4767)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail КАК ОтправкаСсылкиЛКПолучателяЗаказаНаEmail,
	//Асеев 29.03.2022 (Задача № 4767)<<<
	//Асеев 31.05.2022 (Задача № 4813)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаSMS КАК ОтправкаСсылкиЛКПолучателяЗаказаSMS,
	|	ПараметрыКонтрагентовСрезПоследних.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа КАК ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа,
	//Асеев 31.05.2022 (Задача № 4813)<<<
	//Асеев 18.08.2022 (Задача № 4873)>>>
	|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке,
	//Асеев 18.08.2022 (Задача № 4873)<<<
	//Асеев 30.08.2022 (Задача № 4883)>>>
	|	ПараметрыКонтрагентовСрезПоследних.БезусловнаяПечатьБланковЗаказов КАК БезусловнаяПечатьБланковЗаказов,
	//Асеев 30.08.2022 (Задача № 4883)<<<
	//Асеев 28.11.2022 (Задача № 4935)>>>
	|	ПараметрыКонтрагентовСрезПоследних.accessKey КАК accessKey,
	//Асеев 28.11.2022 (Задача № 4935)<<<
	//Асеев 26.01.2023 (Задача № 4977)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ЛьготнаяКатегорияЭквайринга КАК ЛьготнаяКатегорияЭквайринга,
	//Асеев 26.01.2023 (Задача № 4977)<<<
	//Асеев 12.05.2023 (по письму Контроль заказов)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ПроизводитьРассылкуКонтроляЗаказов КАК ПроизводитьРассылкуКонтроляЗаказов,
	//Асеев 12.05.2023 (по письму Контроль заказов)<<<
	//Асеев 30.09.2024 (Задача № 5329)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ФормироватьАПП КАК ФормироватьАПП,
	|	ПараметрыКонтрагентовСрезПоследних.ВремяФормированияАПП КАК ВремяФормированияАПП,
	//Асеев 30.09.2024 (Задача № 5329)<<<
	//Асеев 31.10.2024 (Задача № 5339)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
	//Асеев 31.10.2024 (Задача № 5339)<<<
	|ИЗ
	|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних");
	ЗапросПК.УстановитьПараметр("Контрагент", ГруппаРодитель.ОсновнойМагазин);	
	РезПК = ЗапросПК.Выполнить().Выгрузить();
	
	Если РезПК.Количество() > 0 Тогда
		
		НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
		НаборПК.Отбор.Контрагент.Установить(ГруппаРодитель.Ссылка);
		НаборПК.Прочитать();
		НаборПК.Очистить();
		
		НЗаписьПК = НаборПК.Добавить();					
		ЗаполнитьЗначенияСвойств(НЗаписьПК, РезПК[0]);
		НЗаписьПК.Период =  ТекущаяДата();
		НЗаписьПК.Контрагент = ГруппаРодитель.Ссылка;
		
		НаборПК.Записать();	
		ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, НаборПК);
		
	КонецЕсли;
	
	Возврат ГруппаРодитель.Ссылка;
	
КонецФункции

Процедура ДобавитьОшибочныйЗаказ(РежимСравнения, ХранилищеОбъектовСравнения, СведенияОЗаказе, Ошибка)  
	
	Наб = РегистрыСведений.НезагруженныеЗаказы.СоздатьНаборЗаписей();
	
	//Серегин М.В. 13.07.2015 17:40:57 Дата отбора
	ДатаОтбора  = ТекущаяДата(); 
	Наб.Отбор.Период.Установить(ДатаОтбора);
	Наб.Отбор.НомерЗаказа.Установить(Формат(СведенияОЗаказе, "ЧГ="));
	
	Нов = Наб.Добавить();                   
	Нов.Период = ДатаОтбора;
	Нов.НомерЗаказа = Формат(СведенияОЗаказе, "ЧГ=");
	Нов.Ошибка = Ошибка;
	
	Наб.Записать();
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения,ХранилищеОбъектовСравнения, Наб);
	//--- БАО 27.06.2017 №1192
	
	
	ВозниклаОшибка = Истина;
КонецПроцедуры	

Функция СтрокаКВремя(стр);
	
	С = Лев(стр, 1);
	Если Не ЭтоЧисло(С) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Часы = Число(С);
	Минуты = 0;
	
	поз = 2;
	С = Сред(стр, 2, 1);
	Если ЭтоЧисло(С) Тогда
		Часы = Часы * 10 + Число(С);
		поз = поз + 1;
	КонецЕсли;
	
	Если Не ЭтоЧисло(Сред(стр, поз, 1)) Тогда
		поз = поз + 1;
		С = Сред(стр, поз, 1);
		Если ЭтоЧисло(С) Тогда
			//Есть минуты
			Минуты = Число(С);
			поз = поз + 1;
			С = Сред(стр, поз, 1);
			Если ЭтоЧисло(С) Тогда
				Минуты = Минуты * 10 + Число(С);
				Если Минуты < 60 Тогда
					Часы = Часы + Минуты / 60;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Часы < 24 Тогда
		Возврат Часы;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//+++ БАО 01.06.2017 №926
//Функция ПодобратьТочкуДоставкиПоАдресу(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения,ВладелецТочки, Адр, ВремяС, ВремяПо, Фл = Неопределено)
//+Степанов Задача № 3527 Добавлены параметры "Широта" и "Долгота"
Функция ПодобратьТочкуДоставкиПоАдресу(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ВладелецТочки, Адр, ВремяС, ВремяПо, Фл = Неопределено, НайденнаяСтрокаСписокМагазинов = Неопределено, НомерЗаказа = Неопределено, РегиональныйТерминал = Неопределено, Широта = "", Долгота = "")
	
	Если НайденнаяСтрокаСписокМагазинов <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ТочкиДоставки) Тогда
		
		Возврат НайденнаяСтрокаСписокМагазинов.ТочкиДоставки; 
		
	КонецЕсли;
	
	//--- БАО 01.06.2017 №926	
	
	Адрес = Адр;
	Если Лев(Адрес, 11) = "Москва и МО" Тогда
		Адрес = СокрЛ(Сред(Адрес, 12));
	КонецЕсли;
	
	
	Если Лев(Адрес, 10) = "Москва г. " Тогда
		Адрес = "Москва, " + Сред(Адрес, 11);
	КонецЕсли;
	ЧВ = СтрЧислоВхождений(Адрес, "Москва");
	
	Если ЧВ >= 2 Тогда //   Или ЧВ = 0
		Адрес = СтрЗаменить(Адрес, "Москва", "");
		Адрес = "Москва, " + Адрес;
	КонецеСли;	
	
	Адрес = СокрП(Лев(Адрес, 150));
	
	//+Степанов Ищем точку по координатам Задача № 3527
	Если ЗначениеЗаполнено(ВладелецТочки) и не ПустаяСтрока(Широта) И не ПустаяСтрока(Долгота) Тогда
		Если (НайденнаяСтрокаСписокМагазинов <> Неопределено И Не ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ТочкиДоставки))
			Или (НайденнаяСтрокаСписокМагазинов = Неопределено) Тогда 
			Попытка
				ШиротаЧислом = Число(Широта);
				ДолготаЧислом = Число(Долгота);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	новаТочкиДоставки.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.новаТочкиДоставки КАК новаТочкиДоставки
				|ГДЕ
				|	новаТочкиДоставки.ВладелецТочки = &ВладелецТочки
				|	И новаТочкиДоставки.Адрес.Широта = &Широта
				|	И новаТочкиДоставки.Адрес.Долгота = &Долгота";
				Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочки);
				Запрос.УстановитьПараметр("Широта", ШиротаЧислом);
				Запрос.УстановитьПараметр("Долгота", ДолготаЧислом);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Возврат Выборка.Ссылка
				КонецЕсли;	
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	
	//-Степанов
	
	Если ЗначениеЗаполнено(ВладелецТочки) И ЗначениеЗаполнено(Адрес) Тогда
		
		//+++ БАО 01.06.2017 №926
		//т.е. точку доставки искали, но не нашли  или не искали
		Если (НайденнаяСтрокаСписокМагазинов <> Неопределено И Не ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ТочкиДоставки))
			Или (НайденнаяСтрокаСписокМагазинов = Неопределено)
			
			
			Тогда
			//--- БАО 01.06.2017 №926 
			
			АдресНеНайден = "<не найден> " + Адрес;
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	новаТочкиДоставки.Ссылка КАК Ссылка,
			|	новаТочкиДоставки.Адрес.Широта КАК Широта,
			|	новаТочкиДоставки.Адрес.Долгота КАК Долгота,
			|	новаТочкиДоставки.Адрес КАК Адрес
			|ИЗ
			|	Справочник.новаТочкиДоставки КАК новаТочкиДоставки
			|ГДЕ
			|	новаТочкиДоставки.ВладелецТочки = &ВладелецТочки
			|	И (новаТочкиДоставки.Наименование = &Наименование
			|			ИЛИ новаТочкиДоставки.Наименование = &Наименование2)";
			
			Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочки);
			Запрос.УстановитьПараметр("Наименование", Адрес);
			Запрос.УстановитьПараметр("Наименование2", АдресНеНайден);
			
			ВыборкаТочек = Запрос.Выполнить().Выбрать();
			Если ВыборкаТочек.Следующий() Тогда
				
				//mel установка полигонального адреса 07.02.2018
				//Если РегиональныйТерминал = 1 Тогда
				//	Если ЗначениеЗаполнено(СокрЛП(ВыборкаТочек.Долгота)) И ЗначениеЗаполнено(СокрЛП(ВыборкаТочек.Широта)) Тогда
				//		МассивСтрук = Новый Массив;
				//		
				//		Струк = Новый Структура;
				//		
				//		Струк.Вставить("НомерЗаказа", Число(НомерЗаказа));
				//		Струк.Вставить("Широта", ВыборкаТочек.Широта);
				//		Струк.Вставить("Долгота", ВыборкаТочек.Долгота);
				//		МассивСтрук.Добавить(Струк);
				//		
				//		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
				//	КонецеСли;
				//КонецеСли;
				//mel установка полигонального адреса 07.02.2018
				//+Степанов Задача № 3527
				Если (ВыборкаТочек.Широта = 0 Или ВыборкаТочек.Долгота = 0) И Не ПустаяСтрока(Широта) И Не ПустаяСтрока(Долгота) Тогда 
					Попытка
						АдресОбъект = ВыборкаТочек.Адрес.ПолучитьОбъект();
						АдресОбъект.Широта  = Число(Широта);
						АдресОбъект.Долгота = Число(Долгота);
						АдресОбъект.Записать();
					Исключение
					КонецПопытки;	
				КонецЕсли;	
				//-Степанов Задача № 3527
				
				//+Степанов Костыль для заполнения незаполненных адресов в точках.
				Если Не ЗначениеЗаполнено(ВыборкаТочек.Адрес) Тогда
					ссылкаАдрес = ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Адрес, НайденнаяСтрокаСписокМагазинов, НомерЗаказа, РегиональныйТерминал, Широта, Долгота);
					Если ЗначениеЗаполнено(ссылкаАдрес) Тогда
						Попытка
							ТочкаДоставкиОбъект = ВыборкаТочек.Ссылка.ПолучитьОбъект();
							ТочкаДоставкиОбъект.Адрес = ссылкаАдрес;
							ТочкаДоставкиОбъект.Записать();
						Исключение
						КонецПопытки;	
					КонецЕсли;	
				КонецЕсли;	
				//-Степанов
				//+Широков 30.08.2021 по письму
				//далее идет поиск по владельцу и адресу, ТочкаДоставки находится, все, 
				//точка найдена и попадает заказ, координаты при этом остаются те что в 1с.
				//может быть на этом этапе добавить сравнение координат?
				// 
				//да, и если с этим доп. условием точка не  найдена - то создаем новую и пишем её в новаМД	
				Если ВыборкаТочек.Широта = ШиротаЧислом И ВыборкаТочек.Долгота = ДолготаЧислом Тогда 
					//-Широков 30.08.2021 по письму
					Возврат ВыборкаТочек.Ссылка;
					//+Широков 30.08.2021 по письму
				КонецЕсли; 				
				//-Широков 30.08.2021 по письму
			КонецЕсли;
			
			//+++ БАО 01.06.2017 №926
		КонецЕсли;
		//--- БАО 01.06.2017 №926
		
		обТочкаДоставки = Справочники.новаТочкиДоставки.СоздатьЭлемент();
		обТочкаДоставки.Наименование = Адрес;
		обТочкаДоставки.ВладелецТочки = ВладелецТочки;
		обТочкаДоставки.ВремяРаботыНачало = ВремяС;
		обТочкаДоставки.ВремяРаботыОкончание = ВремяПо;
		
		//+++ БАО 01.06.2017 №926
		//ссылкаАдрес = ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Адрес);
		//ссылкаАдрес = ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Адрес, НайденнаяСтрокаСписокМагазинов);
		//+Степанов Задача № 3527 Добавлены параметры "Широта" и "Долгота"
		ссылкаАдрес = ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Адрес, НайденнаяСтрокаСписокМагазинов, НомерЗаказа, РегиональныйТерминал, Широта, Долгота);
		
		Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
			НайденнаяСтрокаСписокМагазинов.ссылкаАдрес = ссылкаАдрес;
		КонецЕсли;	
		
		//--- БАО 01.06.2017 №926
		
		Если ЗначениеЗаполнено(ссылкаАдрес) Тогда
			обТочкаДоставки.Адрес = ссылкаАдрес;
		Иначе
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Не определены координаты точки доставки: " + Адрес);
			//lem.ОтправитьНормальноеСообщениеАдминам("Ошибка в поиске адреса", "Не определены координаты точки доставки: " + Адрес);
			
			Если Фл <> Неопределено Тогда
				Фл = Истина;
			КонецеСли;				
			
			//// делаем еще попытку
			//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Повторная попытка поиска адреса: " + Адрес);
			//ссылкаАдрес = ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Адрес);
			//Если ЗначениеЗаполнено(ссылкаАдрес) Тогда
			//	обТочкаДоставки.Адрес = ссылкаАдрес;
			//Иначе
			//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!ПОПЫТКА 2 поиска адреса! Не определены координаты точки доставки: " + Адрес);
			//	////lem.ОтправитьНормальноеСообщениеАдминам("ПОПЫТКА 2: НЕ НАЙДЕН АДРЕС", "!!!Не определены координаты точки доставки: " + Адрес);
			//	обТочкаДоставки.Наименование = АдресНеНайден;
			//КонецЕсли;		
		КонецЕсли;
		
		Попытка
			обТочкаДоставки.Записать();
			
			Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
				НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = обТочкаДоставки;
			КонецЕсли;	
			
			
		Исключение
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи точки доставки " + Адрес + " " + ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, обТочкаДоставки.Ссылка);
		//--- БАО 27.06.2017 №1192
		
		Возврат обТочкаДоставки.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Функция ПодобратьТочкуДоставкиПоАдресуПоЗаборам(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ВладелецТочки, Адр, ВремяС, ВремяПо, Фл = Неопределено, НайденнаяСтрокаСписокМагазинов = Неопределено, НомерЗаказа = Неопределено, РегиональныйТерминал = Неопределено)
	
	//Если НайденнаяСтрокаСписокМагазинов <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ТочкиДоставки) Тогда
	//	
	//	Возврат НайденнаяСтрокаСписокМагазинов.ТочкиДоставки; 
	//   
	//   КонецЕсли;
	
	//--- БАО 01.06.2017 №926	
	
	Адрес = Адр;
	Если Лев(Адрес, 11) = "Москва и МО" Тогда
		Адрес = СокрЛ(Сред(Адрес, 12));
	КонецЕсли;
	
	
	Если Лев(Адрес, 10) = "Москва г. " Тогда
		Адрес = "Москва, " + Сред(Адрес, 11);
	КонецЕсли;
	ЧВ = СтрЧислоВхождений(Адрес, "Москва");
	
	Если ЧВ >= 2 Тогда //   Или ЧВ = 0
		Адрес = СтрЗаменить(Адрес, "Москва", "");
		Адрес = "Москва, " + Адрес;
	КонецеСли;	
	
	Адрес = СокрП(Лев(Адрес, 150));
	
	
	Если ЗначениеЗаполнено(ВладелецТочки) И ЗначениеЗаполнено(Адрес) Тогда
		
		//+++ БАО 01.06.2017 №926
		//т.е. точку доставки искали, но не нашли  или не искали
		//Если (НайденнаяСтрокаСписокМагазинов <> Неопределено И Не ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ТочкиДоставки))
		//	Или (НайденнаяСтрокаСписокМагазинов = Неопределено)
		//	
		//	
		//	Тогда
		//--- БАО 01.06.2017 №926
		
		АдресНеНайден = "<не найден> " + Адрес;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	новаТочкиДоставки.Ссылка КАК Ссылка,
		|	новаТочкиДоставки.Адрес.Широта КАК Широта,
		|	новаТочкиДоставки.Адрес.Долгота КАК Долгота
		|ИЗ
		|	Справочник.новаТочкиДоставки КАК новаТочкиДоставки
		|ГДЕ
		|	новаТочкиДоставки.ВладелецТочки = &ВладелецТочки
		|	И (новаТочкиДоставки.Наименование = &Наименование
		|			ИЛИ новаТочкиДоставки.Наименование = &Наименование2)";
		
		Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочки);
		Запрос.УстановитьПараметр("Наименование", Адрес);
		Запрос.УстановитьПараметр("Наименование2", АдресНеНайден);
		
		ВыборкаТочек = Запрос.Выполнить().Выбрать();
		Если ВыборкаТочек.Следующий() Тогда
			
			//mel установка полигонального адреса 07.02.2018
			//Если РегиональныйТерминал = 1 Тогда
			//	Если ЗначениеЗаполнено(СокрЛП(ВыборкаТочек.Долгота)) И ЗначениеЗаполнено(СокрЛП(ВыборкаТочек.Широта)) Тогда
			//		МассивСтрук = Новый Массив;
			//		
			//		Струк = Новый Структура;
			//		
			//		Струк.Вставить("НомерЗаказа", Число(НомерЗаказа));
			//		Струк.Вставить("Широта", ВыборкаТочек.Широта);
			//		Струк.Вставить("Долгота", ВыборкаТочек.Долгота);
			//		МассивСтрук.Добавить(Струк);
			//		
			//		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
			//	КонецеСли;
			//КонецеСли;
			//mel установка полигонального адреса 07.02.2018
			
			Возврат ВыборкаТочек.Ссылка;
		КонецЕсли;
		
		//+++ БАО 01.06.2017 №926
		//КонецЕсли;
		//--- БАО 01.06.2017 №926
		
		обТочкаДоставки = Справочники.новаТочкиДоставки.СоздатьЭлемент();
		обТочкаДоставки.Наименование = Адрес;
		обТочкаДоставки.ВладелецТочки = ВладелецТочки;
		обТочкаДоставки.ВремяРаботыНачало = ВремяС;
		обТочкаДоставки.ВремяРаботыОкончание = ВремяПо;
		
		//+++ БАО 01.06.2017 №926
		//ссылкаАдрес = ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Адрес);
		//ссылкаАдрес = ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Адрес, НайденнаяСтрокаСписокМагазинов);
		ссылкаАдрес = ПодобратьАдресПоЗаборам(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Адрес, НайденнаяСтрокаСписокМагазинов, НомерЗаказа, РегиональныйТерминал);
		
		Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
			НайденнаяСтрокаСписокМагазинов.ссылкаАдрес = ссылкаАдрес;
		КонецЕсли;	
		
		//--- БАО 01.06.2017 №926
		
		Если ЗначениеЗаполнено(ссылкаАдрес) Тогда
			обТочкаДоставки.Адрес = ссылкаАдрес;
		Иначе
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Не определены координаты точки доставки: " + Адрес);
			//lem.ОтправитьНормальноеСообщениеАдминам("Ошибка в поиске адреса", "Не определены координаты точки доставки: " + Адрес);
			
			Если Фл <> Неопределено Тогда
				Фл = Истина;
			КонецеСли;				
			
			//// делаем еще попытку
			//Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Повторная попытка поиска адреса: " + Адрес);
			//ссылкаАдрес = ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Адрес);
			//Если ЗначениеЗаполнено(ссылкаАдрес) Тогда
			//	обТочкаДоставки.Адрес = ссылкаАдрес;
			//Иначе
			//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!ПОПЫТКА 2 поиска адреса! Не определены координаты точки доставки: " + Адрес);
			//	////lem.ОтправитьНормальноеСообщениеАдминам("ПОПЫТКА 2: НЕ НАЙДЕН АДРЕС", "!!!Не определены координаты точки доставки: " + Адрес);
			//	обТочкаДоставки.Наименование = АдресНеНайден;
			//КонецЕсли;		
		КонецЕсли;
		
		Попытка
			обТочкаДоставки.Записать();
			
			Если НайденнаяСтрокаСписокМагазинов <> Неопределено Тогда
				НайденнаяСтрокаСписокМагазинов.ТочкиДоставки = обТочкаДоставки;
			КонецЕсли;	
			
			
		Исключение
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи точки доставки " + Адрес + " " + ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, обТочкаДоставки.Ссылка);
		//--- БАО 27.06.2017 №1192
		
		Возврат обТочкаДоставки.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Процедура ДобавитьОбновляемыйДокумент(ПучокДокументов, ДокОбъект, Действия, КомментарийДействия, СообщениеОбОшибке)
	ПучокДокументов.Добавить(Новый Структура("Док, Действия, КомментарийДействия, СообщениеОбОшибке", ДокОбъект, Действия, КомментарийДействия, СообщениеОбОшибке));
	//+++ БАО 06.06.2017 №926
	
	//--- //+++ БАО 02.06.2017 №926
	//--- ПучокДокументовОбщий.Добавить(Новый Структура("Док, Действия, КомментарийДействия, СообщениеОбОшибке", ДокОбъект, Действия, КомментарийДействия, СообщениеОбОшибке));
	//--- //--- БАО 02.06.2017 №926
	
	//--- БАО 06.06.2017 №926
	
КонецПроцедуры

Функция ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, Ссылка);
	
	Если Не РежимСравнения Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Тип = ТипЗнч(Ссылка);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		
		НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
		НоваяСтрока.ТипОбъект = "Справочник";
		НоваяСтрока.НаименованиеОбъекта = Строка(Ссылка.Метаданные().Имя);
		
		
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.Наименование = Ссылка.Наименование;
		НоваяСтрока.Номер = Ссылка.Код;
		
	ИначеЕсли  Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		
		НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
		НоваяСтрока.ТипОбъект = "Документ";
		НоваяСтрока.НаименованиеОбъекта = Строка(Ссылка.Метаданные().Имя);
		
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.Номер = Ссылка.Номер;
		НоваяСтрока.Дата = Ссылка.Дата;
		
	ИначеЕсли  БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		
		НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
		НоваяСтрока.ТипОбъект = "БизнесПроцесс";
		НоваяСтрока.НаименованиеОбъекта = Строка(Ссылка.Метаданные().Имя);
		
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.Номер = Ссылка.Номер;
		НоваяСтрока.Дата = Ссылка.Дата;
		
		
	ИначеЕсли  СтрНайти(Ссылка.Метаданные().ПолноеИмя(), "РегистрСвед") > 0 Тогда
		
		Тип = ТипЗнч(Ссылка);
		
		НоваяСтрока = ХранилищеОбъектовСравнения.Добавить();
		
		ТЗРеквизиты = СоздатьТЗРевизитов();
		
		НоваяСтрока.ТипОбъект = "Регистр";
		НоваяСтрока.НаименованиеОбъекта = Строка(Ссылка.Метаданные().Имя);
		
		Для Каждого СтрокаНабора Из Ссылка Цикл 
			
			Для Каждого Измерение Из Метаданные.РегистрыСведений[Ссылка.Метаданные().Имя].СтандартныеРеквизиты  Цикл
				
				НоваяСтрокаТЗРеквизиты = ТЗРеквизиты.Добавить();
				НоваяСтрокаТЗРеквизиты.Наименование = Измерение.Имя;
				НоваяСтрокаТЗРеквизиты.Значение = СтрокаНабора[Измерение.Имя];
				
				Если Измерение.Имя = "Периода" Тогда
					НоваяСтрока.Дата = СтрокаНабора[Измерение.Имя];
				КонецЕсли;	
				
			КонецЦикла;
			
			
			Для Каждого Измерение Из Метаданные.РегистрыСведений[Ссылка.Метаданные().Имя].Измерения  Цикл
				
				НоваяСтрокаТЗРеквизиты = ТЗРеквизиты.Добавить();
				НоваяСтрокаТЗРеквизиты.Наименование = Измерение.Имя;
				НоваяСтрокаТЗРеквизиты.Значение = СтрокаНабора[Измерение.Имя];
				
				НоваяСтрока.Наименование = НоваяСтрока.Наименование + "" + НоваяСтрокаТЗРеквизиты.Значение + "-";
				
			КонецЦикла;
			
			Для Каждого Реквизит Из Метаданные.РегистрыСведений[Ссылка.Метаданные().Имя].Реквизиты Цикл
				
				НоваяСтрокаТЗРеквизиты = ТЗРеквизиты.Добавить();
				НоваяСтрокаТЗРеквизиты.Наименование = Реквизит.Имя;
				НоваяСтрокаТЗРеквизиты.Значение = СтрокаНабора[Реквизит.Имя];
				
			КонецЦикла;	
			
			Для Каждого Ресурс Из Метаданные.РегистрыСведений[Ссылка.Метаданные().Имя].Ресурсы  Цикл
				
				НоваяСтрокаТЗРеквизиты = ТЗРеквизиты.Добавить();
				НоваяСтрокаТЗРеквизиты.Наименование = Ресурс.Имя;
				НоваяСтрокаТЗРеквизиты.Значение = СтрокаНабора[Ресурс.Имя];
				
			КонецЦикла;	
			
		КонецЦикла;
		
		НоваяСтрока.СтруктураРеквизитов = ТЗРеквизиты;
		
	КонецЕсли;	
	
КонецФункции

Функция ПодготовитьДокументКЗаполнению(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ДокОбъект, ОписаниеДействия = "", НомерЗаказа = 0)
	
	ДействиеСДокументом = "";
	Попытка
		Если ДокОбъект.ПометкаУдаления Тогда
			ДействиеСДокументом = "снять с удаления ";
			ДокОбъект.УстановитьПометкуУдаления(Ложь);
		ИначеЕсли ДокОбъект.Проведен Тогда
			ДействиеСДокументом = "распровести ";
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	Исключение
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! Ошибка. Не удалось " + ДействиеСДокументом + ДокОбъект + " " + ОписаниеОшибки());
		Если ЗначениеЗаполнено(НомерЗаказа) Тогда
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! " + ОписаниеДействия + НомерЗаказа + " прервано.");
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, ДокОбъект.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат Истина;
	
КонецФункции

Функция ПометкаДокументаНаУдаление(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ДокОбъект)
	
	
	Если Не ДокОбъект.ПометкаУдаления Тогда
		Попытка
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			//+++ БАО 09.06.2017 №926
			Если ДокОбъект.Модифицированность()  Тогда
				ДокОбъект.Записать();
			КонецЕсли;	
			//--- БАО 09.06.2017 №926 
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   --- Помечен на удаление " + ДокОбъект);
		Исключение
			
			//+++ БАО 05.07.2017 №1250
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ОписаниеОшибки();
			СообщениеПользователю.Сообщить();
			
			//Сообщить(ОписаниеОшибки());
			//--- БАО 05.07.2017 №1250 
			
			//+Степанов Значение возвращается в переменную отказ, которая влияет на дальнейшую обработку заказа. При значении Истина заказ не обработается.
			//Возврат Ложь;
			Возврат Истина
		КонецПопытки;
	КонецЕсли;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, ДокОбъект.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	//+Степанов Значение возвращается в переменную отказ, которая влияет на дальнейшую обработку заказа. При значении Истина заказ не обработается.
	//Возврат Истина;
	Возврат Ложь
	
КонецФункции // ПометкаДокументаНаУдаление(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, )

Процедура ВпихнутьДоставку(ДостПер, Док, СтоимостьДоставки)
	
	// очистка старых записей по доставке
	Най = Док.Услуги.НайтиСтроки(Новый Структура("Номенклатура", ДостПер));
	Для Каждого Стр Из Най Цикл
		Док.Услуги.Удалить(Стр);	
	КонецЦикла;	
	
	Если СтоимостьДоставки > 0 Тогда
		стрУслуги = Док.Услуги.Добавить();
		стрУслуги.Номенклатура = ДостПер;
		стрУслуги.Содержание   = "Услуги по доставке товара";
		стрУслуги.Цена         = СтоимостьДоставки;
		стрУслуги.Количество   = 1;
		стрУслуги.СтавкаНДС    = Перечисления.СтавкиНДС.НДС18;
		стрУслуги.Сумма        = СтоимостьДоставки;
		стрУслуги.СуммаНДС     = СтоимостьДоставки * 18 / 118;
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаВечер(Дата1С)Экспорт
	Результат = Дата(Год(Дата1С), Месяц(Дата1С), День(Дата1С), 20, 0, 0);
	Возврат Результат;
КонецФункции

//+++ БАО 30.05.2017 №926
//Функция ЗаписатьНоменклатуру(ЛогФайл, стр, Заказ, КодТовара, КодМагазина)//Бухаров
Функция ЗаписатьНоменклатуру(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ШтукиПер, ВидНоменклатурыПер, РежимСравнения, ХранилищеОбъектовСравнения, ГрТов, ВН, стр, Заказ, КодТовара, КодМагазина, ТоварИзСписка = Неопределено, Родитель = Неопределено, ЕдИзм = Неопределено, ЕдиницаХраненияОстатков = Неопределено)//Бухаров
	//--- БАО 30.05.2017 №926	
	
	//ШтукиПер = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");      // шт.
	//ВидНоменклатурыПер =  Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001"); // Товар
	
	флНовый = Ложь;
	//+++ БАО 30.05.2017 №926
	//---Товар = Справочники.Номенклатура.НайтиПоКоду(ЧислоКСтрокеБезПробелов(стр.skuId_Ч));
	Если ТоварИзСписка = Неопределено Тогда
		Товар = Справочники.Номенклатура.НайтиПоКоду(ЧислоКСтрокеБезПробелов(стр.skuId_Ч));
	Иначе
		Товар = ТоварИзСписка;
	КонецЕсли;	
	//--- БАО 30.05.2017 №926
	
	Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
		ТекТовар = Справочники.Номенклатура.СоздатьЭлемент();
		флНовый = Истина;
	Иначе
		ТекТовар = Товар.ПолучитьОбъект();
	КонецЕсли;
	
	//+++ БАО 30.05.2017 №926
	Если ЗначениеЗаполнено(Товар) Тогда
		ТекТовар.Родитель = Родитель;
	Иначе 
		//--- БАО 30.05.2017 №926	
		ТекТовар.Родитель                = ПодготовитьРодителяНоменклатуры(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ГрТов, ВН, Заказ, КодМагазина);//Бухаров - добавил параметр код магазина
		
		//+++ БАО 30.05.2017 №926
	КонецЕсли;
	//--- БАО 30.05.2017 №926
	
	ТекТовар.Наименование            = стр.Name;
	ТекТовар.НаименованиеПолное      = стр.Name;
	ТекТовар.Код 				 	 = ЧислоКСтрокеБезПробелов(КодТовара);
	ТекТовар.БазоваяЕдиницаИзмерения = ШтукиПер;
	ТекТовар.ВидНоменклатуры         = ВидНоменклатурыПер;
	ТекТовар.Артикул				 = стр.articul;
	ТекТовар.СтавкаНДС               = Перечисления.СтавкиНДС.НДС18; // ++++++++++++++++++++++++++++++++++++++
	ТекТовар.ВестиУчетПоСериям       = Ложь;
	
	//+++ БАО 30.05.2017 №926
	
	Если ЗначениеЗаполнено(ЕдИзм) Тогда
		ТекТовар.ЕдиницаХраненияОстатков = ЕдИзм;
		ТекТовар.ЕдиницаДляОтчетов       = ЕдИзм;
	КонецЕсли;	
	
	//--- БАО 30.05.2017 №926
	
	Попытка
		ТекТовар.Записать();
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   " + ?(флНовый, "+++ Записан новый", "*** Обновлен") + " товар: "+ ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")");
	Исключение
		НормальныйХодВыполнения = Ложь;
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка " + ?(флНовый, "записи нового", "обновления") + " товара: " + ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")" + Символы.ПС + ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, ТекТовар.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	
	//+++ БАО 30.05.2017 №926
	
	// Записываем единицу хранения остатков и единицу для отчетов
	Если Не ЗначениеЗаполнено(ЕдИзм) Тогда
		
		//ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, ТекТовар.Ссылка);
		//Если ВыборкаЕдиниц.Следующий() Тогда
		//	НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
		//Иначе
		
		//--- БАО 30.05.2017 №926
		
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(ТекТовар.БазоваяЕдиницаИзмерения);
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = ТекТовар.БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = ТекТовар.Ссылка;
		
		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			//+++ххх БАО 30.05.2017 №926
			//не понял, мы же записали уже номенклатуру
			//---ххх БАО 30.05.2017 №926
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		КонецПопытки;
		
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, НайденнаяЕдиницаОбъект.Ссылка);
		//--- БАО 27.06.2017 №1192
		
		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		
		ЕдИзм = НайденнаяЕдиница;
		//+++ БАО 30.05.2017 №926	
		//КонецЕсли;
		//--- БАО 30.05.2017 №926
		
		ТекТовар.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
		ТекТовар.ЕдиницаДляОтчетов       = НайденнаяЕдиница;
		Попытка
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, ТекТовар.Ссылка);
			//--- БАО 27.06.2017 №1192
			
			
			ТекТовар.Записать();
		Исключение
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		КонецПопытки;
		
		//+++ БАО 30.05.2017 №926
	КонецЕсли;
	//--- БАО 30.05.2017 №926
	
	Возврат ТекТовар.Ссылка;
КонецФункции

//+++ БАО 01.06.2017 №926
//---Процедура ПроверитьИзменениеАртикула(РежимСравнения, ХранилищеОбъектовСравнения,Стр, Товар)
Процедура ПроверитьИзменениеАртикула(РежимСравнения, ХранилищеОбъектовСравнения, Стр, Товар, Артикул = Неопределено)
	//--- БАО 01.06.2017 №926	
	
	//+++ БАО 01.06.2017 №926
	//---Если СокрЛП(стр.articul) = СокрЛП(Товар.Артикул) Тогда
	Если (Артикул = Неопределено И СокрЛП(стр.articul) = СокрЛП(Товар.Артикул)) Или
		(Артикул <> Неопределено И СокрЛП(стр.articul) = СокрЛП(Артикул))	Тогда
		//--- БАО 01.06.2017 №926
		Возврат;
	Иначе	
		Об = Товар.ПолучитьОбъект();
		Об.Артикул = СокрЛП(стр.articul);
		Об.Записать();
		
		//+++ БАО 27.06.2017 №1192
		ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, Об.Ссылка);
		//--- БАО 27.06.2017 №1192
		
	КонецеСли;
КонецПроцедуры	

//+++ БАО 04.10.2017 №1900
////+++ БАО 23.05.2017 №876
////Функция ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Товар, Количество, КоличествоПоступления, Цена, флВозврат, ТоварRestore, Вес, СкладМагазина, ОценочнаяСтоимость = Неопределено)//Бухаров - добавил ТоварRestore, если 
//Функция ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар,  Количество, КоличествоПоступления, Цена, флВозврат, ТоварRestore, Вес, СкладМагазина, ОценочнаяСтоимость = Неопределено, НДС = Неопределено, ЕдиницаХраненияОстатков = Неопределено, НДСТовара = Неопределено, ДополнительнаяСтрокаЛогаДляАпдекса = "")//Бухаров - добавил ТоварRestore, если 
////--- БАО 23.05.2017 №876
//Функция ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар, ШтрихКод, Количество, КоличествоПоступления, Цена, флВозврат, ТоварRestore, Вес, СкладМагазина, ОценочнаяСтоимость = Неопределено, НДС = Неопределено, ЕдиницаХраненияОстатков = Неопределено, НДСТовара = Неопределено, ДополнительнаяСтрокаЛогаДляАпдекса = "")//Бухаров - добавил ТоварRestore, если 
//--- БАО 04.10.2017 №1900	

//+Степанов Задача № 4007 Добавлен параметр Поставщик
Функция ЗаполнитьТабличныеЧастиПучкаДокументов(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, ПучокДокументов, СкладРеализации, КачествоНовый, СкладХраниения, СкладРеализацииПоДоставке, Товар, ШтрихКод, Количество, КоличествоПоступления, Цена, флВозврат, ТоварRestore, Вес, СкладМагазина, ОценочнаяСтоимость = Неопределено, НДС = Неопределено, ЕдиницаХраненияОстатков = Неопределено, НДСТовара = Неопределено, ДополнительнаяСтрокаЛогаДляАпдекса = "", ШтрихкодМеста = "", ТаблицаМестЗаказов = Неопределено, Исключен = Ложь, КодМаркировки = Неопределено, Поставщик = Неопределено, ТипПозиции = Неопределено)//CeHbKA - добавил ШтрихкодМеста, ТаблицаМестЗаказов, Исключен, КодМаркировки
	//+++ БАО 01.06.2017 №926
	Если ЕдиницаХраненияОстатков = Неопределено Тогда
		ЕдиницаХраненияОстатков = Товар.ЕдиницаХраненияОстатков;
	КонецЕсли;
	
	Если НДСТовара = Неопределено Тогда
		
		НДСТовара = Товар.СтавкаНДС;
		
	КонецЕсли;
	
	//--- БАО 01.06.2017 №926
	
	//+++++Серегин М.В. 17.02.2016 13:42:05 отключено Цена = Окр(Цена);
	Для Каждого элСтр Из ПучокДокументов Цикл
		эл = элСтр["Док"];
		ТипДокумента = ТипЗнч(эл);
		Если Не флВозврат Тогда
			Если ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " а1";
				
				БезВеса = Ложь;
				
				//CeHbKA 23.09.2019 #3449 
				Если Исключен Тогда
					СтрокаДокументаРеализацияИскл = эл.ИсключенныеТовары.Добавить();	
				КонецЕсли; 
				//CeHbKA 23.09.2019 #3449 
				Если ЗначениеЗаполнено(Цена) Тогда
					СтрокаДокументаРеализация = эл.Товары.Добавить();
					//CeHbKA 23.09.2019 #3449 
					ИндексСтрокаТовары = эл.Товары.Индекс(СтрокаДокументаРеализация);
					//CeHbKA 23.09.2019 #3449 
					
					
					//+Степанов Задача № 3803 Код маркировки присвоим ниже, он может быть и у подарочной позиции.
					//CeHbKA 27.09.2019 #3545  
					//Если КодМаркировки <> Неопределено Тогда
					//	СтрокаДокументаРеализация.КодМаркировки = КодМаркировки;
					//КонецЕсли; 
					//CeHbKA 27.09.2019 #3545  
					//-Степанов Задача № 3803
					
				Иначе	
					СтрокаДокументаРеализация = эл.ПодарочныеПозиции.Добавить();
					//БезВеса = Истина;
				КонецеСли;	
				СтрокаДокументаРеализация.Номенклатура     = Товар;
				//+Степанов Задача № 3803
				Если КодМаркировки <> Неопределено Тогда
					СтрокаДокументаРеализация.КодМаркировки = КодМаркировки;
				КонецЕсли;   
				//-Степанов Задача № 3803
				
				
				//РаботаСКассовымСерверомСервер.ЗафиксироватьИзмененияНоменклатурыДляКС(Неопределено, Товар);
				
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаРеализация.СтавкаНДС        = Товар.СтавкаНДС;
				СтрокаДокументаРеализация.СтавкаНДС        = НДСТовара;
				//--- БАО 01.06.2017 №926
				СтрокаДокументаРеализация.Количество       = Количество;
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаРеализация.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаДокументаРеализация.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаДокументаРеализация.Цена             = Цена;
				СтрокаДокументаРеализация.Сумма            = Количество * Цена;
				СтрокаДокументаРеализация.Коэффициент      = 1;
				СтрокаДокументаРеализация.Склад            = СкладРеализации; // комиссия или доставка
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаРеализация.Качество         = Справочники.Качество.Новый;
				СтрокаДокументаРеализация.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				СтрокаДокументаРеализация.ОценочнаяСтоимость = ОценочнаяСтоимость;
				//Если Не БезВеса Тогда
				СтрокаДокументаРеализация.Вес         = Вес;
				//КонецеСли;
				//+++ Костя 25.08.2015
				СтрокаДокументаРеализация.СкладМагазина    = СкладМагазина;
				//--- Костя 25.08.2015
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДокументаРеализация, эл);
				//+++ БАО 23.05.2017 №876
				СтрокаДокументаРеализация.СтавкаНДСФЗ54 = НДС;
				//--- БАО 23.05.2017 №876
				
				//+++ БАО 04.10.2017 №1900
				СтрокаДокументаРеализация.ШтрихкодНоменклатуры = ШтрихКод;
				//--- БАО 04.10.2017 №1900
				
				//+Степанов Задача № 4007
				СтрокаДокументаРеализация.Поставщик = Поставщик;
				//-Степанов Задача № 4007
				
				//Асеев 22.06.2023 (Задача № 5071)>>>
				СтрокаДокументаРеализация.ТипПозицииЗаказа = ТипПозиции;
				//Асеев 22.06.2023 (Задача № 5071)<<<
				
				//CeHbKA 20.02.2019 №2831
				Если ШтрихкодМеста <> "" И ТаблицаМестЗаказов <> Неопределено Тогда
					
					Если ТаблицаМестЗаказов.Количество() > 0 Тогда
						Попытка
							СтрокаДокументаРеализация.КлючСвязиМеста = СтрокаДокументаРеализация.НомерСтроки;
							
							//поищем существующие строки в ТЧ.МестаЗаказа
							СтруктураОтбораТЧ = Новый Структура("КлючСвязиМеста", СтрокаДокументаРеализация.КлючСвязиМеста); 	
							СтруктураОтбораТЧ.Вставить("ШтрихкодМеста", ШтрихкодМеста);
							
							НайденныеСтрокиТЧ = эл.МестаЗаказа.НайтиСтроки(СтруктураОтбораТЧ);
							
							Если НайденныеСтрокиТЧ.Количество() > 0 Тогда
								//если нашли, возьмём первую
								СтрокаШКДокументаРеализация = НайденныеСтрокиТЧ[0];	
							Иначе	
								//создадим новую
								СтрокаШКДокументаРеализация	 = эл.МестаЗаказа.Добавить();
								СтрокаШКДокументаРеализация.КлючСвязиМеста = СтрокаДокументаРеализация.КлючСвязиМеста;
								СтрокаШКДокументаРеализация.ШтрихкодМеста = ШтрихкодМеста;
							КонецЕсли; 			
							
							СтруктураОтбора = Новый Структура("НомерЗаказа", СокрЛП(эл.Номер)); 	
							СтруктураОтбора.Вставить("ШтрихкодМеста", ШтрихкодМеста);
							
							НайденныеСтроки = ТаблицаМестЗаказов.НайтиСтроки(СтруктураОтбора);
							
							Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
								СтрокаШКДокументаРеализация.МестоЗаказа = СтрокаТЗ.Ссылка;
							КонецЦикла; 
						Исключение
							//проблема с заказов видеожопы, 3760474
						КонецПопытки;
					КонецЕсли; 					
					
				КонецЕсли; 
				//CeHbKA 20.02.2019 №2831
				
				//CeHbKA 23.09.2019 #3449 
				Если Исключен Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДокументаРеализацияИскл, СтрокаДокументаРеализация);
					
					Если ИндексСтрокаТовары <> Неопределено Тогда
						эл.Товары.Удалить(ИндексСтрокаТовары);
					КонецЕсли; 
					
				КонецЕсли; 
				//CeHbKA 23.09.2019 #3449 
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " а2";
				
				//CeHbKA 23.09.2019 #3449 
				Если Исключен Тогда
					СтрокаДокументаПоступлениеИскл = эл.ИсключенныеТовары.Добавить();	
				КонецЕсли; 
				//CeHbKA 23.09.2019 #3449 
				
				Если ЗначениеЗаполнено(Цена) Тогда
					СтрокаПоступления = эл.Товары.Добавить();
					//CeHbKA 23.09.2019 #3449 
					ИндексСтрокаТовары = эл.Товары.Индекс(СтрокаПоступления);
					//CeHbKA 23.09.2019 #3449 
					
					
				Иначе
					СтрокаПоступления = эл.ПодарочныеПозиции.Добавить();
				КонецеСЛи;	
				СтрокаПоступления.Номенклатура     = Товар;
				//CeHbKA 27.09.2019 #3545  
				Если КодМаркировки <> Неопределено Тогда
					СтрокаПоступления.КодМаркировки = КодМаркировки;
				КонецЕсли; 
				//CeHbKA 27.09.2019 #3545  
				
				//+++ БАО 01.06.2017 №926
				//---СтрокаПоступления.СтавкаНДС        = Товар.СтавкаНДС;
				СтрокаПоступления.СтавкаНДС        = НДСТовара;
				//--- БАО 01.06.2017 №926
				
				//Если КоличествоПоступления <> 0 Тогда
				//	СтрокаПоступления.Количество       = КоличествоПоступления;
				//Иначе
				СтрокаПоступления.Количество       = Количество;
				//КонецеСли;
				
				//+++ БАО 01.06.2017 №926
				//---СтрокаПоступления.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаПоступления.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаПоступления.Цена             = Цена;
				СтрокаПоступления.Сумма            = Количество * Цена;
				СтрокаПоступления.Коэффициент      = 1;
				СтрокаПоступления.Склад            = СкладХраниения;
				//Серегин М.В. 01.09.2015 13:18:12 
				СтрокаПоступления.СкладМагазина    = СкладМагазина;
				//Серегин М.В. 01.09.2015 13:18:13 
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПоступления, эл);
				//Бухаров 09.08
				
				//+++ БАО 09.10.2017 №1920 
				СтрокаПоступления.ШтрихкодНоменклатуры = ШтрихКод;
				//--- БАО 09.10.2017 №1920 
				
				//CeHbKA 23.09.2019 #3449 
				Если Исключен Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДокументаПоступлениеИскл, СтрокаПоступления);
					
					Если ИндексСтрокаТовары <> Неопределено Тогда
						эл.Товары.Удалить(ИндексСтрокаТовары);
					КонецЕсли; 
					
				КонецЕсли; 
				//CeHbKA 23.09.2019 #3449 				
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.СписаниеТоваров") Тогда 
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " а3";
				
				СтрокаСписания = эл.Товары.Добавить();
				СтрокаСписания.Номенклатура     = ТоварRestore;
				СтрокаСписания.ЕдиницаИзмерения = ТоварRestore.ЕдиницаХраненияОстатков;
				СтрокаСписания.Количество       = Количество;
				СтрокаСписания.Цена             = Цена;
				СтрокаСписания.Коэффициент      = 1;
				//+++ БАО 01.06.2017 №926
				//---СтрокаСписания.Качество         = Справочники.Качество.Новый;
				СтрокаСписания.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				СтрокаСписания.Сумма			= Количество * Цена;
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ОприходованиеТоваров") Тогда 
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " а4";
				
				СтрокаОприходования = эл.Товары.Добавить();
				СтрокаОприходования.Номенклатура     = Товар;
				//+++ БАО 01.06.2017 №926
				//---СтрокаОприходования.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаОприходования.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаОприходования.Количество       = Количество;
				СтрокаОприходования.Цена             = Цена;
				СтрокаОприходования.Сумма			 = Количество * Цена;
				СтрокаОприходования.Коэффициент      = 1;
				СтрокаОприходования.СуммаРегл 		 = СтрокаОприходования.Сумма;
				СтрокаОприходования.Качество         = КачествоНовый;
				если СтрокаОприходования.Сумма = 0 тогда
					СтрокаОприходования.Сумма = 1;
					СтрокаОприходования.СуммаРегл = 1;
				КонецеСли;	
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " а5";
				
				СтрокаПеремещения = эл.Товары.Добавить();
				СтрокаПеремещения.Номенклатура     = Товар;
				//+++ БАО 01.06.2017 №926
				//---СтрокаПеремещения.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаПеремещения.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаПеремещения.Количество       = Количество;
				СтрокаПеремещения.Цена             = Цена;
				СтрокаПеремещения.Коэффициент      = 1;
				//+++ БАО 01.06.2017 №926
				//---СтрокаПеремещения.Качество         = Справочники.Качество.Новый;
				СтрокаПеремещения.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " а6";
				
				СтрокаВозврата = эл.Товары.Добавить();
				СтрокаВозврата.Номенклатура     = Товар;
				
				//РаботаСКассовымСерверомСервер.ЗафиксироватьИзмененияНоменклатурыДляКС(Неопределено, Товар);
				
				//+++ БАО 01.06.2017 №926
				//---СтрокаВозврата.СтавкаНДС        = Товар.СтавкаНДС;
				СтрокаВозврата.СтавкаНДС        = НДСТовара;
				//--- БАО 01.06.2017 №926
				СтрокаВозврата.Количество       = Количество; //???????????????     КоличествоПоступления
				//+++ БАО 01.06.2017 №926
				//---СтрокаВозврата.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаВозврата.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаВозврата.Цена             = Цена;
				СтрокаВозврата.Сумма            = Количество * Цена;
				СтрокаВозврата.Коэффициент      = 1;
				СтрокаВозврата.Склад            = СкладРеализацииПоДоставке;
				//+++ БАО 01.06.2017 №926
				//---СтрокаВозврата.Качество         = Справочники.Качество.Новый;
				СтрокаВозврата.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаВозврата, эл);
				
			ИначеЕсли ТипДокумента = Тип("ДокументОбъект.новаГруз") Тогда
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " а7";
				
				СтрокаГруза = эл.Спецификация.Добавить();
				СтрокаГруза.Товар = Товар;
				СтрокаГруза.Количество = Количество;
				СтрокаГруза.Стоимость = Количество * Цена;
				СтрокаГруза.Стоимость = Количество * Цена;
				эл.Стоимость = эл.Стоимость + Количество * Цена; 
				СтрокаГруза.Вес = Вес;
			КонецЕсли;
			
		Иначе
			Если ТипДокумента = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
				
				ДополнительнаяСтрокаЛогаДляАпдекса = ДополнительнаяСтрокаЛогаДляАпдекса + " а8";
				
				СтрокаДокументаВозврат = эл.Товары.Добавить();
				СтрокаДокументаВозврат.Номенклатура     = Товар;
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаВозврат.СтавкаНДС        = Товар.СтавкаНДС;
				СтрокаДокументаВозврат.СтавкаНДС        = НДСТовара;
				//--- БАО 01.06.2017 №926
				
				СтрокаДокументаВозврат.Количество       = Количество;
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаВозврат.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаДокументаВозврат.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				//--- БАО 01.06.2017 №926
				СтрокаДокументаВозврат.Цена             = Цена;
				СтрокаДокументаВозврат.Сумма            = Количество * Цена;
				СтрокаДокументаВозврат.Коэффициент      = 1;
				СтрокаДокументаВозврат.Склад            = СкладХраниения;
				//+++ БАО 01.06.2017 №926
				//---СтрокаДокументаВозврат.Качество         = Справочники.Качество.Новый;
				СтрокаДокументаВозврат.Качество         = КачествоНовый;
				//--- БАО 01.06.2017 №926
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДокументаВозврат, эл);
				
				//+++ БАО 01.06.2017 №926
				//ХХХ тут тоже можно оптимизировать, но надо с пучком разобраться
				//--- БАО 01.06.2017 №926
				СтрокаДокументаВозврат.Себестоимость    = ЦенаПоследнейЗакупки(Товар, эл.Дата);
				
				//+++ БАО 14.07.2017 №1356 
				СтрокаДокументаВозврат.СтавкаНДСФЗ54    = НДС;
				//--- БАО 14.07.2017 №1356 
				
				//+++ БАО 04.10.2017 №1900
				СтрокаДокументаВозврат.ШтрихкодНоменклатуры = ШтрихКод;
				//--- БАО 04.10.2017 №1900
				
				//Поляков #3993 18.05.2020 ->
				Если КодМаркировки <> Неопределено Тогда
					СтрокаДокументаВозврат.КодМаркировки = КодМаркировки;				
				КонецЕсли;	
				//Поляков #3993 18.05.2020 <-
				
				//+Степанов Задача № 4007
				СтрокаДокументаВозврат.Поставщик = Поставщик;
				//-Степанов Задача № 4007
				
				//Серегин М.В. 01.09.2015 13:18:46 
				СтрокаДокументаВозврат.СкладМагазина    = СкладМагазина;
				//Серегин М.В. 01.09.2015 13:18:47 
				Если СтрокаДокументаВозврат.Себестоимость = 0 тогда
					Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!! " + эл + " Товар " + Товар + " НовСеб=0");	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура ОбновитьДатуЗаказа(РежимСравнения, ХранилищеОбъектовСравнения, ЗаказИ, Заказ, Реализация)
	
	СоздатьИзменениеДатыДоставки = Ложь;
	Реализация = ?(Реализация = Неопределено,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),Реализация.Ссылка);
	
	Если Реализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
		СоздатьИзменениеДатыДоставки = Истина;	
	Иначе
		ДокИзменениеДатыДоставки = Документы.ИзменениеДатыДоставки.НайтиПоРеквизиту("Заказ",Реализация);
		Если ДокИзменениеДатыДоставки.Пустая() Тогда
			СоздатьИзменениеДатыДоставки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Если СоздатьИзменениеДатыДоставки Тогда
	НовД = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
	НовД.Дата = ТекущаяДата();
	НовД.ДатаДоставки = ЗаказИ.deliveryDate_Д;
	НовД.Доставка = Заказ.Ссылка;
	Новд.Заказ    = Реализация;
	Новд.ТерминалОбработки = Реализация.ТерминалДоставки; //Задача № 3049 
	// По Задача № 2997
	// Неоходимо добавить установку реквизита ПричинаОтказаПереноса
	//	
	//Асеев 12.04.2022 (Задача № 4779)>>>
	//Если Реализация.СтатусИнтернетМагазина = 4 Тогда
	Если ЗаказИ.status_Ч = 4 Тогда
		НовД.ПричинаИзмененияДаты = Перечисления.ПричиныИзмененияДатыДоставки.ПереносДатыДоставкиПриОтменеЗаказа;
	КонецЕсли;
	//Асеев 12.04.2022 (Задача № 4779)<<<
	
	НовД.Записать(РежимЗаписиДокумента.Запись);
	НовД.Записать(РежимЗаписиДокумента.Проведение);
	//КонецЕсли;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, НовД.Ссылка);
	//--- БАО 27.06.2017 №1192
	
КонецПроцедуры

Функция ПолучитьРежимЗаписи(Действия, СтатусЗаказа)
	РежимЗаписи = Неопределено;
	Если Не ЗначениеЗаполнено(Действия) Тогда
		Если СтатусЗаказа = 1 Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		ИначеЕсли СтатусЗаказа = 2 Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		ИначеЕсли СтатусЗаказа = 3 Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ИначеЕсли СтатусЗаказа = 4 Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		ИначеЕсли СтатусЗаказа = 5 Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		позДействия = Найти(Действия, Формат(СтатусЗаказа, "ЧН=0") + "=");
		Если позДействия > 0 Тогда
			Действия = Сред(Действия, позДействия + 2);
			позДействия = Найти(Действия, ",");
			Если позДействия > 0 Тогда
				Действия = Лев(Действия, позДействия - 1);
			КонецЕсли;
			позДействия = Найти(Действия, ";");
			Если позДействия > 0 Тогда
				Действия = Лев(Действия, позДействия - 1);
			КонецЕсли;
			позДействия = Найти(Действия, " ");
			Если позДействия > 0 Тогда
				Действия = Лев(Действия, позДействия - 1);
			КонецЕсли;
		КонецЕсли;
		Если Действия = "Запись" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		ИначеЕсли Действия = "ОтменаПроведения" Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		ИначеЕсли Действия = "Проведение" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РежимЗаписи;
КонецФункции

Функция ДатаВСтроку(Д) Экспорт 
	Возврат Формат(Год(Д), "ЧГ=") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + ЛидирующийНоль(Час(Д)) + ЛидирующийНоль(Минута(Д)) + ЛидирующийНоль(Секунда(Д));
КонецФункции

Процедура УстановитьОшибочныйЗаказаПрогруженным(РежимСравнения, ХранилищеОбъектовСравнения, СведенияОЗаказе, Ошибка)
	Наб = РегистрыСведений.НезагруженныеЗаказы.СоздатьНаборЗаписей();
	
	ДатаОтбора = ТекущаяДата();
	Наб.Отбор.Период.Установить(ДатаОтбора);
	Наб.Отбор.НомерЗаказа.Установить(Формат(СведенияОЗаказе, "ЧГ="));
	
	Нов = Наб.Добавить();
	Нов.Период = ДатаОтбора;
	Нов.НомерЗаказа = Формат(СведенияОЗаказе, "ЧГ=");
	Нов.Ошибка = Ошибка;
	Нов.Прогружен = Истина;
	
	Наб.Записать();
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, Наб)
	//--- БАО 27.06.2017 №1192
	
КонецПроцедуры

Функция НайтиПокупателя(КодКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Покупатель = ИСТИНА
	|	И Контрагенты.Код = &КодКонтрагента";
	Запрос.УстановитьПараметр("КодКонтрагента", КодКонтрагента);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[0].Ссылка;
	КонецЕсли;	
	
КонецФункции

//+++ БАО 31.05.2017 №926
//Функция ПодготовитьДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Контрагент)
Функция ПодготовитьДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг, Контрагент, НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено)
	//--- БАО 31.05.2017 №926	
	
	//+++ БАО 31.05.2017 №926
	
	Если НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда 
		ОсновнойДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
	Иначе 
		ОсновнойДоговорКонтрагента = НайденнаяСтрокаСписокСсылокНаКонтрагента.ОсновнойДоговорКонтрагента;
	КонецЕсли;	
	
	//Если Контрагент.ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
	Если ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		//--- БАО 31.05.2017 №926
		
		Попытка
			Договор = ЗаполнитьДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг, Контрагент, "Основной договор с покупателем");
			КонтрагентОбъект = Контрагент.ПолучитьОбъект();
			КонтрагентОбъект.ОсновнойДоговорКонтрагента = Договор.Ссылка;
			КонтрагентОбъект.Записать();
			
			//+++ БАО 27.06.2017 №1192
			ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, КонтрагентОбъект.Ссылка);
			//--- БАО 27.06.2017 №1192
			
			Возврат Договор.Ссылка;
		Исключение
			НормальныйХодВыполнения = Ложь;
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи основного договора для "+Контрагент+", Код: "+Контрагент.Код+Символы.ПС+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		//+++ БАО 31.05.2017 №926	
		//ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	Иначе
		
		Если НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда 
			
			ВидДоговора = Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора;
		Иначе 
			
			ВидДоговора = НайденнаяСтрокаСписокСсылокНаКонтрагента.ВидДоговора;
		КонецЕсли;	
		
		Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если НайденнаяСтрокаСписокСсылокНаКонтрагента = Неопределено Тогда 
				
				ДоговорСПокупателем = НайтиДоговорСПокупателем(Контрагент); 
				
			Иначе 
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрокаСписокСсылокНаКонтрагента.ДоговорСПокупателем) Тогда
					ДоговорСПокупателем = НайтиДоговорСПокупателем(Контрагент); 
				Иначе 
					ДоговорСПокупателем = НайденнаяСтрокаСписокСсылокНаКонтрагента.ДоговорСПокупателем;
				КонецЕсли;	
				
			КонецЕсли;
			
			//Если НайтиДоговорСПокупателем(Контрагент) = Неопределено Тогда
			Если ДоговорСПокупателем = Неопределено Тогда
				//--- БАО 31.05.2017 №926	
				Попытка
					Договор = ЗаполнитьДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг, Контрагент, "Договор с покупателем");
					Возврат Договор.Ссылка;
				Исключение
					НормальныйХодВыполнения = Ложь;
					Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи договора для "+Контрагент+", Код: "+Контрагент.Код+Символы.ПС+ОписаниеОшибки());
					Возврат Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	//+++ БАО 31.05.2017 №926
	//Возврат Контрагент.ОсновнойДоговорКонтрагента;
	Возврат ОсновнойДоговорКонтрагента;
	//--- БАО 31.05.2017 №926
	
КонецФункции

//+++ БАО 01.06.2017 №926
//Функция ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, Адрес)
//+Степанов Задача № 3527 Добавлены параметры "Широта" и "Долгота"
Функция ПодобратьАдрес(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Адрес, НайденнаяСтрокаСписокМагазинов = Неопределено, НомерЗаказа = Неопределено, РегиональныйТерминал = Неопределено, Широта = "", Долгота = "")
	
	Если НайденнаяСтрокаСписокМагазинов <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ссылкаАдрес) Тогда
		Возврат НайденнаяСтрокаСписокМагазинов.ссылкаАдрес;	
	КонецЕсли;	
	
	ШиротаЧислом  = 0;
	ДолготаЧислом = 0;
	
	
	Если Не ПустаяСтрока(Широта) И Не ПустаяСтрока(Долгота) Тогда
		Попытка
			ШиротаЧислом  = Число(Широта);
			ДолготаЧислом = Число(Долгота);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	
	//Искали уже, но не нашли,
	//у добавленных магазинов ссылкаАдрес = Неопределено
	Если (НайденнаяСтрокаСписокМагазинов <> Неопределено И Не ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ссылкаАдрес))
		Или (НайденнаяСтрокаСписокМагазинов = Неопределено) Тогда
		//--- БАО 01.06.2017 №926	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	новаАдреса.Ссылка КАК Ссылка,
		|	новаАдреса.Широта КАК Широта,
		|	новаАдреса.Долгота КАК Долгота
		|ИЗ
		|	Справочник.новаАдреса КАК новаАдреса
		|ГДЕ
		|	новаАдреса.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", Адрес);
		
		ВыборкаАдреса = Запрос.Выполнить().Выбрать();
		Если ВыборкаАдреса.Следующий() Тогда
			//mel установка полигонального адреса 07.02.2018
			//Если РегиональныйТерминал = 1 Тогда
			//	Если ЗначениеЗаполнено(СокрЛП(ВыборкаАдреса.Долгота)) И ЗначениеЗаполнено(СокрЛП(ВыборкаАдреса.Широта)) Тогда
			//		МассивСтрук = Новый Массив;
			//		
			//		Струк = Новый Структура;
			//		
			//		Струк.Вставить("НомерЗаказа", Число(НомерЗаказа));
			//		Струк.Вставить("Широта", ВыборкаАдреса.Широта);
			//		Струк.Вставить("Долгота", ВыборкаАдреса.Долгота);
			//		МассивСтрук.Добавить(Струк);
			//		
			//		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
			//	КонецеСли;
			//КонецеСли;
			//mel установка полигонального адреса 07.02.2018
			
			//+Степанов Задача № 3527	
			Если ШиротаЧислом И ВыборкаАдреса.Широта <> ШиротаЧислом Или ДолготаЧислом И ВыборкаАдреса.Долгота <> ДолготаЧислом Тогда
				Попытка
					АдресОбъект = ВыборкаАдреса.Ссылка.ПолучитьОбъект();
					Если Не ПустаяСтрока(Широта) Тогда 
						АдресОбъект.Широта 	= ШиротаЧислом;
					КонецЕсли;
					Если Не ПустаяСтрока(Долгота) Тогда
						АдресОбъект.Долгота = ДолготаЧислом;
					КонецЕсли;	
					АдресОбъект.Записать();
				Исключение
				КонецПопытки;	
			КонецЕсли;	
			//-Степанов Задача № 3527
			Возврат ВыборкаАдреса.Ссылка;
		КонецЕсли;
		
		//+++ БАО 01.06.2017 №926
	КонецЕсли;
	//--- БАО 01.06.2017 №926
	////+Степанов Задача № 3527 
	//Если Не ПустаяСтрока(Широта) И Не ПустаяСтрока(Долгота) Тогда 
	//	
	//	обАдрес = Справочники.новаАдреса.СоздатьЭлемент();
	//	ОбАдрес.Наименование = Адрес;
	//	обАдрес.Широта  = Широта;
	//	обАдрес.Долгота = Долгота;
	//	Попытка
	//		обАдрес.Записать();
	//	Исключение
	//		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи нового адреса "+Адрес + " " + ОписаниеОшибки());
	//		Возврат Неопределено;
	//	КонецПопытки;
	//	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, обАдрес.Ссылка);
	//	Возврат обАдрес.Ссылка
	//КонецЕсли;	
	//+Степанов Задача № 3527
	Если ДолготаЧислом И ШиротаЧислом Тогда
		НовыйАдрес = Справочники.новаАдреса.СоздатьЭлемент();
				//ЗаполнитьЗначенияСвойств(обАдрес, строкаАдреса);
		НовыйАдрес.Наименование = Адрес;
				//обАдрес.НаименованиеТочкиИнтереса = строкаАдреса.Наименование; // определившийся адрес для выгрузки в админку
		НовыйАдрес.ВходитВКлассификатор = Ложь;
		НовыйАдрес.СпособГеокодирования = Перечисления.СпособыГеокодирования.Яндекс;
		НовыйАдрес.Широта = ШиротаЧислом;
		НовыйАдрес.Долгота = ДолготаЧислом;
		НовыйАдрес.ХэшКоординат = новаКарты.ПолучитьХэшКоординат(ШиротаЧислом, ДолготаЧислом);	
		Попытка
			НовыйАдрес.Записать();
			Возврат НовыйАдрес.Ссылка;
		Исключение
		КонецПопытки;	
	КонецЕсли;	
	//-Степанов Задача № 3527
	
	
	//ОбъектПоискаАдреса.Адрес = Адрес;
	Попытка
		ОбъектПоискаАдреса = Обработки.новаПоискАдреса.Создать();
	исключение
		
		
		Если Не РежимСравнения Тогда
			lem.ОтправитьНормальноеСообщениеАдминам("новаПоискАдреса", ОписаниеОшибки());
		Иначе 
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "новаПоискАдреса" + Символы.ПС + ОписаниеОшибки());
		КонецЕсли;	
		
	КонецПопытки;
	
	
	ОбъектПоискаАдреса.ОбластьПоискаКлассификатор = Ложь;
	ОбъектПоискаАдреса.ОбластьПоискаЯндекс = Истина;
	
	//+++ БАО 01.06.2017 №926
	//ххх Надо и это посмотреть
	//--- БАО 01.06.2017 №926
	
	тзАдреса = ОбъектПоискаАдреса.ПолучитьТаблицуАдресов(Адрес);
	//+Степанов Задача № 3527
	//Если тзАдреса = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Если тзАдреса.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//строкаАдреса = тзАдреса[0];
	Если тзАдреса = Неопределено Или тзАдреса.Количество() = 0 Тогда	
		Если Не ПустаяСтрока(Долгота) И Не ПустаяСтрока(Широта) Тогда
			НаименованиеПоШиротеИДолготе = Адрес + " (" + Широта + " " + Долгота + ")";
			АдресПоШиротеИДолготе = Справочники.новаАдреса.НайтиПоНаименованию(НаименованиеПоШиротеИДолготе);
			Если ЗначениеЗаполнено(АдресПоШиротеИДолготе) Тогда 
				Возврат АдресПоШиротеИДолготе
			Иначе	
				НовыйАдрес = Справочники.новаАдреса.СоздатьЭлемент();
				//ЗаполнитьЗначенияСвойств(обАдрес, строкаАдреса);
				НовыйАдрес.Наименование = НаименованиеПоШиротеИДолготе;
				//обАдрес.НаименованиеТочкиИнтереса = строкаАдреса.Наименование; // определившийся адрес для выгрузки в админку
				НовыйАдрес.ВходитВКлассификатор = Ложь;
				НовыйАдрес.СпособГеокодирования = Перечисления.СпособыГеокодирования.Яндекс;
				НовыйАдрес.Широта = ШиротаЧислом;
				НовыйАдрес.Долгота = ДолготаЧислом;
				НовыйАдрес.ХэшКоординат = новаКарты.ПолучитьХэшКоординат(ШиротаЧислом, ДолготаЧислом);
				Попытка
					НовыйАдрес.Записать();
					Возврат НовыйАдрес.Ссылка
				Исключение
					Возврат Неопределено
				КонецПопытки;	
			КонецЕсли;	
		Иначе
			Возврат Неопределено
		КонецЕсли;	
	Иначе		
		строкаАдреса = тзАдреса[0]	
	КонецЕсли;	
	//-Степанов
	//Если Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Тогда
	//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!НЕ ОПРЕДЕЛЕН ДОМ "+Адрес);
	//КонецеСли;	
	
	СпособГеокодирования = Перечисления.СпособыГеокодирования.Яндекс;
	
	Если Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Или Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Долгота)) ИЛИ Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Широта)) Тогда
		// попытка гугел
		КоординатыГугл = РаботаСГеокодированием.Геокодирование_GoogleAPI(Адрес);
		//+Степанов
		//Если КоординатыГугл = Неопределено Тогда
		//	Возврат Неопределено;
		//Иначе
		//	СтрокаАдреса.Широта = КоординатыГугл.Широта;
		//	СтрокаАдреса.Долгота = КоординатыГугл.Долгота;
		//	СтрокаАдреса.Наименование = Адрес;
		//	СпособГеокодирования = Перечисления.СпособыГеокодирования.Google;
		//КонецеСли;
		
		Если КоординатыГугл <> Неопределено Тогда
			СтрокаАдреса.Широта = КоординатыГугл.Широта;
			СтрокаАдреса.Долгота = КоординатыГугл.Долгота;
			СтрокаАдреса.Наименование = Адрес;
			СпособГеокодирования = Перечисления.СпособыГеокодирования.Google;
		КонецЕсли;
		//-Степанов
		//ИначеЕсли Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Тогда
		//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!НЕ ОПРЕДЕЛЕН ДОМ "+Адрес);
	КонецЕсли;
	
	обАдрес = Справочники.новаАдреса.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(обАдрес, строкаАдреса);
	обАдрес.Наименование = Адрес;
	обАдрес.НаименованиеТочкиИнтереса = строкаАдреса.Наименование; // определившийся адрес для выгрузки в админку
	обАдрес.ВходитВКлассификатор = Ложь;
	обАдрес.СпособГеокодирования = СпособГеокодирования;
	Попытка
		обАдрес.Записать();
	Исключение
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи нового адреса "+Адрес + " " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
	//mel установка полигонального адреса 07.02.2018
	//Если РегиональныйТерминал = 1 Тогда
	//	Если ЗначениеЗаполнено(СокрЛП(строкаАдреса.Долгота)) И ЗначениеЗаполнено(СокрЛП(строкаАдреса.Широта)) Тогда
	//		МассивСтрук = Новый Массив;
	//		
	//		Струк = Новый Структура;
	//		
	//		Струк.Вставить("НомерЗаказа", Число(НомерЗаказа));
	//		Струк.Вставить("Широта", СтрокаАдреса.Широта);
	//		Струк.Вставить("Долгота", СтрокаАдреса.Долгота);
	//		МассивСтрук.Добавить(Струк);
	//		
	//		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
	//	КонецеСли;
	//КонецеСли;
	//mel установка полигонального адреса 07.02.2018
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, обАдрес.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат обАдрес.Ссылка;
	
КонецФункции


Функция ПодобратьАдресПоЗаборам(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Адрес, НайденнаяСтрокаСписокМагазинов = Неопределено, НомерЗаказа = Неопределено, РегиональныйТерминал = Неопределено)
	
	//Если НайденнаяСтрокаСписокМагазинов <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ссылкаАдрес) Тогда
	//	Возврат НайденнаяСтрокаСписокМагазинов.ссылкаАдрес;	
	//КонецЕсли;	
	
	//Искали уже, но не нашли,
	//у добавленных магазинов ссылкаАдрес = Неопределено
	//Если (НайденнаяСтрокаСписокМагазинов <> Неопределено И Не ЗначениеЗаполнено(НайденнаяСтрокаСписокМагазинов.ссылкаАдрес))
	//	Или (НайденнаяСтрокаСписокМагазинов = Неопределено) Тогда
	//--- БАО 01.06.2017 №926	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	новаАдреса.Ссылка КАК Ссылка,
	|	новаАдреса.Широта КАК Широта,
	|	новаАдреса.Долгота КАК Долгота
	|ИЗ
	|	Справочник.новаАдреса КАК новаАдреса
	|ГДЕ
	|	новаАдреса.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Адрес);
	
	ВыборкаАдреса = Запрос.Выполнить().Выбрать();
	Если ВыборкаАдреса.Следующий() Тогда
		//mel установка полигонального адреса 07.02.2018
		//Если РегиональныйТерминал = 1 Тогда
		//	Если ЗначениеЗаполнено(СокрЛП(ВыборкаАдреса.Долгота)) И ЗначениеЗаполнено(СокрЛП(ВыборкаАдреса.Широта)) Тогда
		//		МассивСтрук = Новый Массив;
		//		
		//		Струк = Новый Структура;
		//		
		//		Струк.Вставить("НомерЗаказа", Число(НомерЗаказа));
		//		Струк.Вставить("Широта", ВыборкаАдреса.Широта);
		//		Струк.Вставить("Долгота", ВыборкаАдреса.Долгота);
		//		МассивСтрук.Добавить(Струк);
		//		
		//		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
		//	КонецеСли;
		//КонецеСли;
		//mel установка полигонального адреса 07.02.2018
		
		Возврат ВыборкаАдреса.Ссылка;
	КонецЕсли;
	
	//+++ БАО 01.06.2017 №926
	//КонецЕсли;
	//--- БАО 01.06.2017 №926
	
	//ОбъектПоискаАдреса.Адрес = Адрес;
	Попытка
		ОбъектПоискаАдреса = Обработки.новаПоискАдреса.Создать();
	исключение
		
		
		Если Не РежимСравнения Тогда
			lem.ОтправитьНормальноеСообщениеАдминам("новаПоискАдреса", ОписаниеОшибки());
		Иначе 
			Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "новаПоискАдреса" + Символы.ПС + ОписаниеОшибки());
		КонецЕсли;	
		
	КонецПопытки;
	
	
	ОбъектПоискаАдреса.ОбластьПоискаКлассификатор = Ложь;
	ОбъектПоискаАдреса.ОбластьПоискаЯндекс = Истина;
	
	//+++ БАО 01.06.2017 №926
	//ххх Надо и это посмотреть
	//--- БАО 01.06.2017 №926
	
	тзАдреса = ОбъектПоискаАдреса.ПолучитьТаблицуАдресов(Адрес);
	Если тзАдреса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если тзАдреса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	строкаАдреса = тзАдреса[0];
	
	//Если Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Тогда
	//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!НЕ ОПРЕДЕЛЕН ДОМ "+Адрес);
	//КонецеСли;	
	
	СпособГеокодирования = Перечисления.СпособыГеокодирования.Яндекс;
	
	Если Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Или Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Долгота)) ИЛИ Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Широта)) Тогда
		// попытка гугел
		КоординатыГугл = РаботаСГеокодированием.Геокодирование_GoogleAPI(Адрес);
		Если КоординатыГугл = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			СтрокаАдреса.Широта = КоординатыГугл.Широта;
			СтрокаАдреса.Долгота = КоординатыГугл.Долгота;
			СтрокаАдреса.Наименование = Адрес;
			СпособГеокодирования = Перечисления.СпособыГеокодирования.Google;
		КонецеСли;	
		//ИначеЕсли Не ЗначениеЗаполнено(СокрЛП(строкаАдреса.Дом)) Тогда
		//	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!НЕ ОПРЕДЕЛЕН ДОМ "+Адрес);
	КонецЕсли;
	
	обАдрес = Справочники.новаАдреса.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(обАдрес, строкаАдреса);
	обАдрес.Наименование = Адрес;
	обАдрес.НаименованиеТочкиИнтереса = строкаАдреса.Наименование; // определившийся адрес для выгрузки в админку
	обАдрес.ВходитВКлассификатор = Ложь;
	обАдрес.СпособГеокодирования = СпособГеокодирования;
	Попытка
		обАдрес.Записать();
	Исключение
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи нового адреса "+Адрес + " " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
	//mel установка полигонального адреса 07.02.2018
	//Если РегиональныйТерминал = 1 Тогда
	//	Если ЗначениеЗаполнено(СокрЛП(строкаАдреса.Долгота)) И ЗначениеЗаполнено(СокрЛП(строкаАдреса.Широта)) Тогда
	//		МассивСтрук = Новый Массив;
	//		
	//		Струк = Новый Структура;
	//		
	//		Струк.Вставить("НомерЗаказа", Число(НомерЗаказа));
	//		Струк.Вставить("Широта", СтрокаАдреса.Широта);
	//		Струк.Вставить("Долгота", СтрокаАдреса.Долгота);
	//		МассивСтрук.Добавить(Струк);
	//		
	//		ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
	//	КонецеСли;
	//КонецеСли;
	//mel установка полигонального адреса 07.02.2018
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, обАдрес.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат обАдрес.Ссылка;
	
КонецФункции


Функция ЭтоЧисло(сим)
	Возврат ЗначениеЗаполнено(сим) И Найти("0123456789", сим) > 0;
КонецФункции

Функция СоздатьТЗРевизитов()
	
	Реквизиты = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки = Новый КвалификаторыСтроки(20);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,,,ПараметрыСтроки);  
	Реквизиты.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	Реквизиты.Колонки.Добавить("Значение");
	
	Возврат Реквизиты;
	
КонецФункции	

Функция ПодготовитьРодителяНоменклатуры(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, ГрТов, ВН, ПараметрыЗаказа, КодМагазина)
	
	Если КодМагазина = 0 Тогда
		Возврат Справочники.Номенклатура.НайтиПоКоду("00000000002");  //Товары
	КонецЕсли;
	КодСайтаПапки = ПреобразоватьКодМагазина(КодМагазина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ИСТИНА
	|	И Номенклатура.Код = &Код";
	Запрос.УстановитьПараметр("Код", КодСайтаПапки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоваяПапка = Справочники.Номенклатура.СоздатьГруппу();
	НоваяПапка.Наименование     = ПараметрыЗаказа.shopName;
	НоваяПапка.Родитель         = ГрТов;  //Товары
	НоваяПапка.ВидНоменклатуры  = ВН;
	НоваяПапка.Код = КодСайтаПапки;
	
	Попытка
		НоваяПапка.Записать();
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "+++ Записана новая папка товаров: " + ПараметрыЗаказа.shopName);
	Исключение
		Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "!!!Ошибка записи новой папки товаров " + ПараметрыЗаказа.shopName + " (код магазина: " + КодМагазина + ")" + Символы.ПС + ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, НоваяПапка.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	
	Возврат НоваяПапка.Ссылка;
	
КонецФункции // ПолучитьРодителяНоменклатуры()

Функция ВернутьВерсиюОбработки() Экспорт 
	
	Возврат "1.4";
	
КонецФункции

Функция ЦенаПоследнейЗакупки(ССылкаНаТовар, Дата)Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.Период < &Период
	|	И ПартииТоваровНаСкладах.Количество > 0
	|	И ПартииТоваровНаСкладах.Стоимость > 0
	|   И ПартииТоваровНаСкладах.Номенклатура=&Номенклатура
	|УПОРЯДОЧИТЬ ПО
	|	ПартииТоваровНаСкладах.Период УБЫВ";	
	Запрос.УстановитьПараметр("Номенклатура", ССылкаНаТовар);
	Запрос.УстановитьПараметр("Период", Дата);
	Тз = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Для каждого Стр Из ТЗ Цикл
			Возврат (Стр.Стоимость/Стр.Количество);
		КонецЦикла;
	КонецЕсли; 
КонецФункции // ЦенаПоследнейЗакупки()

Функция ЛидирующийНоль(зн)
	Если Зн < 10 Тогда
		Возврат "0"+Зн;
	Иначе
		Возврат Зн;
	КонецЕсли;	
КонецФункции

Функция ЗаполнитьДоговор(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, РежимСравнения, ХранилищеОбъектовСравнения, Руб, Орг, Контрагент, НаименованиеДоговора)
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	НовыйДоговор.ВалютаВзаиморасчетов  = Руб;
	НовыйДоговор.Организация           = Орг; 
	НовыйДоговор.ВидДоговора           = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НовыйДоговор.Наименование          = НаименованиеДоговора;
	НовыйДоговор.Владелец              = Контрагент.Ссылка;
	НовыйДоговор.Записать();
	Лог(ЛогФайл, ИмяФайлаЛога, ФлагДобавленияЗамены, ФлагЗаписиПослеКаждойСтроки, "   +++ Записан новый договор для " + Контрагент);
	
	//+++ БАО 27.06.2017 №1192
	ДобавитьВХранилищеОбъектовСравнения(РежимСравнения, ХранилищеОбъектовСравнения, НовыйДоговор.Ссылка);
	//--- БАО 27.06.2017 №1192
	
	Возврат НовыйДоговор;
	
КонецФункции

Функция НайтиДоговорСПокупателем(Контрагент)
	
	Если Контрагент.ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		Возврат Неопределено;
	ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Возврат Контрагент.ОсновнойДоговорКонтрагента;
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Договоры.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА ДоговорыКонтрагентов.Наименование = ""Договор с покупателем""
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПредпочтениеДоговора
		|	ИЗ
		|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|	ГДЕ
		|		ДоговорыКонтрагентов.Владелец = &Владелец
		|		И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора) КАК Договоры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договоры.ПредпочтениеДоговора УБЫВ";
		Запрос.УстановитьПараметр("Владелец", Контрагент.Ссылка);
		Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 0 Тогда
			Возврат Результат[0].Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции // НайтиДоговорСПокупателем()

Функция СоздатьТЗОбъетов()  Экспорт 
	
	ХранилищеОбъектовСравнения = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки = Новый КвалификаторыСтроки(20);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,,,ПараметрыСтроки);  
	ХранилищеОбъектовСравнения.Колонки.Добавить("ТипОбъект", ОписаниеТиповСтрока);
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки = Новый КвалификаторыСтроки(200);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,,,ПараметрыСтроки);  
	ХранилищеОбъектовСравнения.Колонки.Добавить("НаименованиеОбъекта", ОписаниеТиповСтрока);
	
	
	ХранилищеОбъектовСравнения.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ХранилищеОбъектовСравнения.Колонки.Добавить("Номер", ОписаниеТиповСтрока);
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");                          
	ПараметрыСтроки = Новый КвалификаторыСтроки(200);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,,,ПараметрыСтроки); 
	ХранилищеОбъектовСравнения.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	
	ХранилищеОбъектовСравнения.Колонки.Добавить("Ссылка");
	
	ХранилищеОбъектовСравнения.Колонки.Добавить("СтруктураРеквизитов", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат  ХранилищеОбъектовСравнения;
	
КонецФункции	

//   В дальнейшем эту информацию можно считать с клиента при помощи функции ПрочитатьПрогресс.
//
// Параметры:
//  Процент - Число  - Необязательный. Процент выполнения.
//  Текст   - Строка - Необязательный. Информация о текущей операции.
//  ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация,
//      которую необходимо передать на клиент. Значение должно быть простым (сериализуемым в XML строку).
//
Процедура СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт 
	
	ПередаваемоеЗначение = Новый Структура;
	Если Процент <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Процент", Процент);
	КонецЕсли;
	Если Текст <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Текст", Текст);
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;
	
	ПередаваемыйТекст = ОбщегоНазначения.ЗначениеВСтрокуXML(ПередаваемоеЗначение);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ПередаваемыйТекст;
	Сообщение.Сообщить();
	
КонецПроцедуры

// Находит фоновое задание и считывает из его сообщений информацию о ходе выполнения.
//
// Возвращаемое значение:
//   Структура - Информация о ходе выполнения фонового задания.
//       Ключи и значения структуры соответствуют именам и значениям параметров процедуры СообщитьПрогресс().
//
Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания) Экспорт
	Перем Результат;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивСообщений = Задание.ПолучитьСообщенияПользователю(Истина);
	Если МассивСообщений = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Количество = МассивСообщений.Количество();
	
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		Сообщение = МассивСообщений[ОбратныйИндекс];
		
		Результат = ОбщегоНазначения.ЗначениеИзСтрокиXML(Сообщение.Текст);
		Прервать;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//CeHbKA 20.02.2019 №2831
// Получает таблицу значений по местам заказов
//
// Параметры
//	ТабличнаяЧастьЗаказов - ТЗ с общим списком, нужны колонки orderId_Ч и BarcodePackage
//
// Возвращаемое значение:
//	ТаблицаЗначений - колонки "НомерЗаказа", "ШтрихкодМеста", "Ссылка"	 
Функция ПолучитьТаблицуМестЗаказов(ТабличнаяЧастьЗаказов) Экспорт 
	
	Массив = Новый Массив;
	
	КС = Новый КвалификаторыСтроки(50);
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , , ,КС);	
	Массив.Очистить();
	
	ТаблицаМестЗаказов = Новый ТаблицаЗначений;
	ТаблицаМестЗаказов.Колонки.Добавить("НомерЗаказа", ОписаниеТиповС);
	ТаблицаМестЗаказов.Колонки.Добавить("ШтрихкодМеста", ОписаниеТиповС);
	
	Для каждого СтрокаТЗ Из ТабличнаяЧастьЗаказов Цикл
		НоваяСтрокаТЗ = ТаблицаМестЗаказов.Добавить();
		НоваяСтрокаТЗ.НомерЗаказа = ЧислоКСтрокеБезПробелов(СтрокаТЗ.orderId_Ч);
		НоваяСтрокаТЗ.ШтрихкодМеста = ЧислоКСтрокеБезПробелов(СтрокаТЗ.BarcodePackage);
	КонецЦикла; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМестЗаказов.НомерЗаказа КАК НомерЗаказа,
	|	ТаблицаМестЗаказов.ШтрихкодМеста КАК ШтрихкодМеста
	|ПОМЕСТИТЬ ВТ_ТаблицаМестЗаказов
	|ИЗ
	|	&ТаблицаМестЗаказов КАК ТаблицаМестЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаМестЗаказов.НомерЗаказа КАК НомерЗаказа,
	|	ВТ_ТаблицаМестЗаказов.ШтрихкодМеста КАК ШтрихкодМеста,
	|	ЕСТЬNULL(МестаПоЗаказам.Ссылка, ЗНАЧЕНИЕ(Справочник.МестаПоЗаказам.ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	ВТ_ТаблицаМестЗаказов КАК ВТ_ТаблицаМестЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаПоЗаказам КАК МестаПоЗаказам
	|		ПО ВТ_ТаблицаМестЗаказов.НомерЗаказа = МестаПоЗаказам.Заказ.Номер
	|			И ВТ_ТаблицаМестЗаказов.ШтрихкодМеста = МестаПоЗаказам.Штрихкод
	|			И (НЕ МестаПоЗаказам.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ТаблицаМестЗаказов", ТаблицаМестЗаказов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ()
//CeHbKA 20.02.2019 №2831

//+Степанов Задача № 3911
Функция СформироватьКодИдентификацииКлиента(НомерЗаказа)
	НомерЧислом = Число(НомерЗаказа);
	ОстатокОтДеления = (23 * НомерЧислом + 7)  % 10000;
	КИК = Формат(ОстатокОтДеления, "ЧГ=");
	Пока СтрДлина(КИК) <> 4 Цикл
		КИК = "0" + КИК;			
	КонецЦикла;	
	Возврат Формат(КИК, "ЧГ=")
КонецФункции	
//-Степанов Задача № 3911 

//Асеев 11.01.2022 (по письму ЛеруаСПБ)>>>
Функция АдресЛеруаСПБ(СтрокаАдреса)
	//Возврат Истина;//тест
	Возврат Найти(СтрокаАдреса, "Санкт-Петербург") Или Найти(СтрокаАдреса, "Ленинградская область") Или Найти(СтрокаАдреса, "ЛО")
		Или Найти(СтрокаАдреса, "Пушкин,") Или Найти(СтрокаАдреса, "Парголово") Или Найти(СтрокаАдреса, "Петергоф") Или Найти(СтрокаАдреса, "Колпино")
		Или Найти(СтрокаАдреса, "Шушары") Или Найти(СтрокаАдреса, "Мурино") Или Найти(СтрокаАдреса, "Кудрово") Или Найти(СтрокаАдреса, "Всеволжск") Или Найти(СтрокаАдреса, "Красное Село")
		Или Найти(СтрокаАдреса, "Сестрорецк") Или Найти(СтрокаАдреса, "деревня Капитолово") Или Найти(СтрокаАдреса, "деревня Иннолово") Или Найти(СтрокаАдреса, "поселок Бугры")
		Или Найти(СтрокаАдреса, "поселок Аннино") Или Найти(СтрокаАдреса, "Всеволожск,") Или Найти(СтрокаАдреса, "Кронштадт,");
КонецФункции

Процедура КорректировкаТерминаловЛеруаСПБ(Заказ, КорректироватьДатыОтгрузкиИДоставки = Ложь)
	
	КорректировкаТерминалаДоставки = Заказ.deliveryPlaceId_Ч = 1 И АдресЛеруаСПБ(Заказ.Addr);
	КорректировкаТерминалаПриемки = Заказ.sourcePlaceId_Ч = 1 И АдресЛеруаСПБ(Заказ.stockAddress);
	//КорректировкаТерминалаДоставки = Истина;//тест
	//КорректировкаТерминалаПриемки = Истина;//тест
	
	Если КорректировкаТерминалаДоставки Или КорректировкаТерминалаПриемки Тогда
		
		НомерЗаказа = Формат(Заказ.orderId_Ч, "ЧГ=");
		
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину();
		
		Если КорректировкаТерминалаДоставки Тогда
			ТекстЗапроса =
			"UPDATE ts_terminalOrder
			|SET deliveryPlaceId = 2 where ts_terminalOrder.orderId = " + НомерЗаказа;
			Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
		КонецЕсли;
		
		Если КорректировкаТерминалаПриемки Тогда
			ТекстЗапроса = 
			"UPDATE ts_terminalOrder
			|SET SourcePlaceId = 2 where ts_terminalOrder.orderId = " + НомерЗаказа;
			Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
		КонецЕсли;
		
		ТекстЗапроса = "exec tariff_updateOrder_CategoryAndServiceDC " + НомерЗаказа + ", 'УТ смена ТС'";
		Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
		
		//Асеев 13.12.2022 (Задача № 4949)>>>
		Сегодня = НачалоДня(ТекущаяДата());
		//ДатаПриемки = Заказ.shipmentDate_Д;//(со временем) -> РТУ.ДатаПриемки (без времени)
		//ДатаСозданияЗаказа = Заказ.createDate_Д;//(со временем) -> ДополнительныеПараметрыЗаказа.ДатаСозданияЗаказа (со временем)
		//ДатаДоставки = Заказ.deliveryDate_Д;//(со временем) -> РТУ.Дата (со временем)
		//ТерминалДоставкиСПБ = КорректировкаТерминалаДоставки;
		//Если Ложь Тогда
		Если КорректировкаТерминалаПриемки И КорректироватьДатыОтгрузкиИДоставки И (НачалоДня(Заказ.shipmentDate_Д) <= Сегодня) Тогда
			НоваяДатаПриемки = Неопределено;
			НоваяДатаДоставки = Неопределено;
			ДатаДоставки = НачалоДня(Заказ.deliveryDate_Д);
			ДатаСозданияЗаказа = Заказ.createDate_Д;
			Если ДатаСозданияЗаказа <= Сегодня + 20 * 3600 Тогда
				//если заказ создан до 20:00 текущего дня
				Если КорректировкаТерминалаДоставки Тогда
					//ТерминалДоставкиСПБ
					НоваяДатаПриемки = Сегодня + 86400;//Сегодня + 1 день
					Если ДатаДоставки <= Сегодня + 86400 Тогда
						НоваяДатаДоставки = Сегодня + 2 * 86400;//Сегодня + 2 дня
					КонецЕсли;
				Иначе
					//ТерминалДоставкиМСК
					НоваяДатаПриемки = Сегодня + 86400;//Сегодня + 1 день
					Если ДатаДоставки <= Сегодня + 2 * 86400 Тогда
						НоваяДатаДоставки = Сегодня + 3 * 86400;//Сегодня + 3 дня
					КонецЕсли;
				КонецЕсли;
			Иначе
				//если заказ создан после 20:00 текущего дня
				Если КорректировкаТерминалаДоставки Тогда
					//ТерминалДоставкиСПБ
					НоваяДатаПриемки = Сегодня + 2 * 86400;//Сегодня + 2 дня
					Если ДатаДоставки <= Сегодня + 2 * 86400 Тогда
						НоваяДатаДоставки = Сегодня + 3 * 86400;//Сегодня + 3 дня
					КонецЕсли;
				Иначе
					//ТерминалДоставкиМСК
					НоваяДатаПриемки = Сегодня + 2 * 86400;//Сегодня + 2 дня
					Если ДатаДоставки <= Сегодня + 3 * 86400 Тогда
						НоваяДатаДоставки = Сегодня + 4 * 86400;//Сегодня + 4 дня
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НоваяДатаДоставки <> Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
				Запрос.Текст =
				"ВЫБРАТЬ
				|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
				|	новаМестнаяДоставка.Ссылка КАК Доставка,
				|	ПричиныОтказаПереноса.Ссылка КАК ПричинаОтказаПереноса
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
				|		ПО (РеализацияТоваровУслуг.Номер = &НомерЗаказа)
				|			И (новаМестнаяДоставка.Номер = &НомерЗаказа)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПричиныОтказаПереноса КАК ПричиныОтказаПереноса
				|		ПО (ПричиныОтказаПереноса.Код = ""00000000159"")";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Док = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
					Док.Дата = ТекущаяДата();
					Док.ДатаДоставки = НоваяДатаДоставки;
					Док.ДатаДоставкиСтарая = ДатаДоставки;
					Док.ПричинаИзмененияДаты = Перечисления.ПричиныИзмененияДатыДоставки.СдвигДатыLM;
					Док.Заказ = Выборка.Заказ;
					Док.Доставка = Выборка.Доставка;
					Док.КорректироватьДатуВАдминке = Истина;
					Док.ИнициаторСостояния = Перечисления.ИнициаторыСостояния.ИнтернетМагазин;
					Док.ПричинаОтказаПереноса = Выборка.ПричинаОтказаПереноса;
					Док.ТерминалОбработки = Справочники.РегиональныеТерминалы.МоскваСтриж;
					//Док.ОтчетВодителя = Ссылка;
					Док.Записать(РежимЗаписиДокумента.Запись);
					Док.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса =
			"UPDATE _order
			|SET ModifyDate = '" + Евген.ДатаВSQL(ТекущаяДата() + 60, Ложь) + "', whoLastChange = '" + ПараметрыСеанса.ТекущийПользователь + "'" + ?(НоваяДатаПриемки <> Неопределено, ", shipmentDate = '" + Евген.ДатаВSQL(НоваяДатаПриемки, Ложь) + "'","") + "
			|WHERE orderId = " + НомерЗаказа + "
			|EXEC mp_saveOrderHistory " + НомерЗаказа;
			//Асеев 13.12.2022 (Задача № 4949)<<<
		Иначе
			ТекстЗапроса =
			"UPDATE _order
			|SET ModifyDate = '" + Евген.ДатаВSQL(ТекущаяДата() + 60, Ложь) + "', whoLastChange = '" + ПараметрыСеанса.ТекущийПользователь + "'
			|WHERE orderId = " + НомерЗаказа + "
			|EXEC mp_saveOrderHistory " + НомерЗаказа;
		КонецЕсли;
		Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
		
	КонецЕсли;
	
КонецПроцедуры
//Асеев 11.01.2022 (по письму ЛеруаСПБ)<<<

//Асеев 25.09.2023 (Задача № 5131)>>>
Процедура ПереносДатыДоставкиЗагружаемыхЗаказовПоДаннымКалендаряДоставкиИЗоныТарификации(МассивЗаказов)
	
	Сейчас = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Сейчас);
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО (РеализацияТоваровУслуг.Ссылка В (&Заказы))
	|			И РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеДатыДоставки КАК ИзменениеДатыДоставки
	|		ПО РеализацияТоваровУслуг.Ссылка = ИзменениеДатыДоставки.Заказ
	|			И (ИзменениеДатыДоставки.ПричинаИзмененияДаты = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияДатыДоставки.ПереносДатыДоставкиЗаказаПоДаннымКалендаряДоставкиЗоны_СозданиеЗаказа))
	|			И (ИзменениеДатыДоставки.Проведен)
	|ГДЕ
	|	ИзменениеДатыДоставки.Заказ ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыТарифаЗаказаСрезПоследних.Заказ КАК Заказ,
	|	ПараметрыТарифаЗаказаСрезПоследних.Заказ.ТерминалПриема КАК ТерминалОтгрузки,
	|	ПараметрыТарифаЗаказаСрезПоследних.Заказ.ТерминалДоставки КАК ТерминалДоставки,
	|	ПараметрыТарифаЗаказаСрезПоследних.ЗонаТарификации КАК ЗонаТарификации
	|ПОМЕСТИТЬ ВТ_Зоны
	|ИЗ
	|	РегистрСведений.ПараметрыТарифаЗаказа.СрезПоследних(
	|			&Период,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ПараметрыТарифаЗаказаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Зоны.Заказ КАК Заказ,
	|	КалендариДоставокПоЗонамДоставкиСрезПоследних.КалендарьДоставки КАК КалендарьДоставки
	|ПОМЕСТИТЬ ВТ_Календари
	|ИЗ
	|	ВТ_Зоны КАК ВТ_Зоны
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендариДоставокПоЗонамДоставки.СрезПоследних(
	|				&Период,
	|				(ТерминалОтгрузки, ТерминалДоставки, ЗонаДоставки) В
	|					(ВЫБРАТЬ
	|						ВТ_Зоны.ТерминалОтгрузки КАК ТерминалОтгрузки,
	|						ВТ_Зоны.ТерминалДоставки КАК ТерминалДоставки,
	|						ВТ_Зоны.ЗонаТарификации КАК ЗонаТарификации
	|					ИЗ
	|						ВТ_Зоны КАК ВТ_Зоны)) КАК КалендариДоставокПоЗонамДоставкиСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендариДоставки.ДниДоставки КАК КалендариДоставкиДниДоставки
	|			ПО КалендариДоставокПоЗонамДоставкиСрезПоследних.КалендарьДоставки = КалендариДоставкиДниДоставки.Ссылка
	|				И (КалендариДоставкиДниДоставки.НомерСтроки = 7)
	|		ПО ВТ_Зоны.ТерминалОтгрузки = КалендариДоставокПоЗонамДоставкиСрезПоследних.ТерминалОтгрузки
	|			И ВТ_Зоны.ТерминалДоставки = КалендариДоставокПоЗонамДоставкиСрезПоследних.ТерминалДоставки
	|			И ВТ_Зоны.ЗонаТарификации = КалендариДоставокПоЗонамДоставкиСрезПоследних.ЗонаДоставки
	|ГДЕ
	|	КалендариДоставкиДниДоставки.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Календари.Заказ.ТерминалДоставки КАК ТерминалДоставки,
	|	ВТ_Календари.Заказ КАК Заказ,
	|	НАЧАЛОПЕРИОДА(ВТ_Календари.Заказ.Дата, ДЕНЬ) КАК ДатаДоставки,
	|	КалендариДоставкиДниДоставки.ДеньНедели.Порядок + 1 КАК ДеньКалендаря,
	|	новаМестнаяДоставка.Ссылка КАК Доставка,
	|	НастройкиУчетаОбщиеСрезПоследних.ПричинаОтказаПереносаПриПереносеДатыДоставкиЗаказаПриЗагрузкеЗаказаИзАдминки КАК ПричинаОтказаПереноса
	|ИЗ
	|	ВТ_Календари КАК ВТ_Календари
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендариДоставки.ДниДоставки КАК КалендариДоставкиДниДоставки_ДеньЗаказа
	|		ПО ВТ_Календари.КалендарьДоставки = КалендариДоставкиДниДоставки_ДеньЗаказа.Ссылка
	|			И (ДЕНЬНЕДЕЛИ(ВТ_Календари.Заказ.Дата) = КалендариДоставкиДниДоставки_ДеньЗаказа.ДеньНедели.Порядок + 1)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КалендариДоставки.ДниДоставки КАК КалендариДоставкиДниДоставки
	|		ПО ВТ_Календари.КалендарьДоставки = КалендариДоставкиДниДоставки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО ВТ_Календари.Заказ.Номер = новаМестнаяДоставка.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаОбщие.СрезПоследних(&Период, ) КАК НастройкиУчетаОбщиеСрезПоследних
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КалендариДоставкиДниДоставки_ДеньЗаказа.Ссылка ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКалендаря = Результат.Выгрузить();
	ТаблицаЗаказов = ТаблицаКалендаря.Скопировать(, "Заказ,ДатаДоставки");
	ТаблицаЗаказов.Свернуть("Заказ,ДатаДоставки");
	
	ТаблицаКалендаря.Индексы.Добавить("Заказ,ДеньКалендаря");
	СтруктураКалендарь = Новый Структура("Заказ,ДеньКалендаря");
	
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
		Для н = 1 По 10 Цикл
			СтрокаЗаказа.ДатаДоставки = СтрокаЗаказа.ДатаДоставки + 86400;
			СтруктураКалендарь.Заказ = СтрокаЗаказа.Заказ;
			СтруктураКалендарь.ДеньКалендаря = ДеньНедели(СтрокаЗаказа.ДатаДоставки);
			СтрокиКалендаря = ТаблицаКалендаря.НайтиСтроки(СтруктураКалендарь);
			Если СтрокиКалендаря.Количество() Тогда
				СтрокаКалендаря = СтрокиКалендаря[0];
				
				//Сообщить("Отладка: " + СтрокаЗаказа.Заказ);
				Док = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
				Док.Дата = Сейчас;
				Док.ДатаДоставки = СтрокаЗаказа.ДатаДоставки;
				Док.ДатаДоставкиСтарая = СтрокаКалендаря.ДатаДоставки;
				Док.ПричинаИзмененияДаты = Перечисления.ПричиныИзмененияДатыДоставки.ПереносДатыДоставкиЗаказаПоДаннымКалендаряДоставкиЗоны_СозданиеЗаказа;
				Док.Заказ = СтрокаЗаказа.Заказ;
				Док.Доставка = СтрокаКалендаря.Доставка;
				Док.КорректироватьДатуВАдминке = Истина;
				Док.ИнициаторСостояния = Перечисления.ИнициаторыСостояния.ТранспортнаяКомпания;
				Док.ПричинаОтказаПереноса = СтрокаКалендаря.ПричинаОтказаПереноса;
				Док.ТерминалОбработки = СтрокаКалендаря.ТерминалДоставки;
				Док.Записать(РежимЗаписиДокумента.Запись);
				Док.Записать(РежимЗаписиДокумента.Проведение);
				//Сообщить("Отладка: " + Док);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
//Асеев 25.09.2023 (Задача № 5131)<<<


