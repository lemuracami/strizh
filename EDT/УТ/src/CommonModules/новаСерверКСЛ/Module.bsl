
//Инициализация подключения к серверу
//
//  Возвращаемое значение:
//    <COMОбъект шлюз в КСЛ
//
Функция СоздатьСоединитель()
	
	Попытка
		СоединительКСЛ = Новый COMОбъект("UTL.COMConnector");
	Исключение
		ТекстОшибки = "Ошибка при создании UTL.COMConnector" + Символы.ПС + "Подробная информация об ошибке:" + Символы.ПС + ОписаниеОшибки();
		новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("COMКомпонентыНеНайдены", ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Сервер = Константы.новаСерверКСЛ.Получить();
	Порт = Константы.новаПортСервераКСЛ.Получить();
	
	Попытка
		СоединительКСЛ.Connect(Сервер, Формат(Порт, "ЧГ="));
	Исключение
		ТекстОшибки = "Ошибка при подключении к корпоративному серверу логистики: " + Сервер + ":" + Формат(Порт, "ЧГ=") + Символы.ПС + "Подробная информация об ошибке:" + Символы.ПС + ОписаниеОшибки();
		новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("ОшибкаПодключенияКСерверу", ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат СоединительКСЛ;
КонецФункции

//Подключение к фабрике объектов клиента
//
//  Параметры:
//    новаКонтекст - <Структура>, <Структура: КлиентУТЛ<COM объект - УТЛ.Клиент.COM.Соединение>>
//
//  Возвращаемое значение:
//    новаКонтекст.СоединительКСЛ - шлюз в КСЛ
//    новаКонтекст.КСЛ - помещается возвращаемое значение
//    <COMОбъект> - фабрика классов: УТЛ.Клиент.COM.Соединение
//
//  Описание:
//    Если входщящий параметр не указан, то создаётся новый COMОбъект.
//    Если во входящей структуре отсутствует ключ "КлиентУТЛ", то создаётся новый COMОбъект.
//    Если во входящей структуре присутствет ключ "КлиентУТЛ", то используется егго значение
//    При необходимости фабрика объектов инициализируется.
//
Функция Подключиться(новаКонтекст = Неопределено, Принудительно = Истина, БезГрафики = Ложь) Экспорт
	
	Попытка
		
		Если новаКонтекст = Неопределено Тогда
			
			СоединительКСЛ = СоздатьСоединитель();
			КСЛ = СоединительКСЛ.GetProxy();
			
		Иначе
			
			Если Не новаКонтекст.Свойство("СоединительКСЛ") Тогда
				
				СоединительКСЛ = СоздатьСоединитель();
				КСЛ = СоединительКСЛ.GetProxy();
				
				новаКонтекст.Вставить("СоединительКСЛ", СоединительКСЛ);
				новаКонтекст.Вставить("КСЛ", КСЛ);
				
			Иначе
				
				КСЛ = новаКонтекст.КСЛ;
			КонецЕсли;
		КонецЕсли;
		
		//Проверка версии
		ТекущаяВерсияКонфигурации = новаОбщиеПроцедуры.ПолучитьВерсиюКонфигурации();
		Если СокрЛП(КСЛ.Сервер_ДоступКСерверу.ВерсияКлиента) <> ТекущаяВерсияКонфигурации Тогда
			
			#Если Клиент Тогда
				Предупреждение("Обнаружена версия корпоративного сервера логистики " + КСЛ.Сервер_ДоступКСерверу.ВерсияКлиента + "." + Символы.ПС + "Для работы необходимо установить корпоративный сервер логистики версии " + ТекущаяВерсияКонфигурации + ".", 60);
			#КонецЕсли
			
			//Клиент не инициализирован, поэтому удаляем только ссылки на объекты.
			Если новаКонтекст <> Неопределено Тогда
				
				новаКонтекст.Удалить("КСЛ");
				новаКонтекст.Удалить("СоединительКСЛ");
			КонецЕсли;
			
			ТекстОшибки = "Обнаружена версия корпоративного сервера логистики " + КСЛ.Сервер_ДоступКСерверу.ВерсияКлиента + "." + Символы.ПС + "Для работы необходимо установить корпоративный сервер логистики версии " + ТекущаяВерсияКонфигурации + ".";
			#Если Клиент Тогда
				новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("НевернаяВерсияКСЛ", ТекстОшибки);
			#КонецЕсли
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		//Инициализация
		Если Не КСЛ.COM_COMКлиент.Инициализирован Тогда
			#Если Клиент Тогда
				Состояние("Инициализация клиента КСЛ");
			#КонецЕсли
			ИнициализироватьКлиент(КСЛ, Принудительно, БезГрафики);
		КонецЕсли;
		
	Исключение
		
		Отключиться(новаКонтекст);
		
		ВызватьИсключение;
	КонецПопытки;
	
	#Если Клиент Тогда
		Если новаКонтекст <> Неопределено Тогда
			Если не ( новаКонтекст.Свойство("СинхронизацияПроверена")
			          и новаКонтекст.СинхронизацияПроверена) Тогда
				
				новаКонтекст.Вставить("СинхронизацияПроверена", Истина);
				
				Если новаОбменКСЛ.НеобходимоСинхронизировать1СКСЛ() Тогда
					
					//Форма = Обработки.новаСинхронизацияКСЛ.ПолучитьФорму();
					//Форма.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	Возврат КСЛ;
	
КонецФункции

//Отключение от фабрики объектов клиента
//
//  Параметры:
//    новаКонтекст - <Структура>, <Структура: КлиентУТЛ <<COM объект - УТЛ.Клиент.COM.Соединение>>
//
//  Описание:
//    Отключает фабрику объектов клиета, удаляет ключ КлиентУТЛ из структуры
//
Процедура Отключиться(новаКонтекст) Экспорт
	
	Если новаКонтекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не новаКонтекст.Свойство("КСЛ") Тогда
		Возврат;
	КонецЕсли;
	
	новаКонтекст.КСЛ.COM_COMКлиент.ЗавершитьРаботу();
	новаКонтекст.КСЛ.ОчиститьВнешниеОбъекты();
	
	новаКонтекст.Удалить("КСЛ");
	новаКонтекст.Удалить("СоединительКСЛ");
	
КонецПроцедуры

//Инициализация фабрики объектов
//
//  Параметры:
//    КлиентУТЛ - <COM объект - УТЛ.Клиент.COM.Соединение>
//
//  Описание:
//    Выполяется подключение к базе данных.
//
Процедура ИнициализироватьКлиент(КСЛ, Принудительно = Истина, БезГрафики = Ложь)
	
	#Если Клиент Тогда
		Если (не новаКонтекст.СерверДоступен) и (не Принудительно) Тогда
			
			ТекстОшибки = "Сервер недоступен";
			новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("СерверНеДоступен", ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ФормаПрогресса = Обработки.новаОписаниеСитуаций.ПолучитьФорму("ИнициализацияКСЛ");
		ФормаПрогресса.Открыть();
	#КонецЕсли
	
	Попытка
		
		Попытка
			
			КСЛ.COM_COMКлиент.Инициализировать(не БезГрафики);
			
		Исключение
			
			ТекстОшибки = "Не удалось инициализировать клиент корпоративного сервера логистики" + Символы.ПС + "Подробная информация об ошибке:" + Символы.ПС + ОписаниеОшибки();
			#Если Клиент Тогда
				новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("НеУдалосьИнициализироватьКлиент", ТекстОшибки);
			#КонецЕсли
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		
		#Если Клиент Тогда
			КСЛ.COM_COMКлиент.ДиспетчерРабочегоСтола = КСЛ.Wrap(Обработки.новаДиспетчерРабочегоСтола.Создать());
		#КонецЕсли
		
		Сервер = Константы.новаСерверКСЛ.Получить();
		База = Константы.новаБазаКСЛ.Получить();
		Порт = Константы.новаПортСервераКСЛ.Получить();
		
		Если ПустаяСтрока(СокрЛП(Сервер))
		 Или ПустаяСтрока(СокрЛП(База))
		 Или ПустаяСтрока(СокрЛП(Порт)) Тогда
		 
			#Если Клиент Тогда
				ФормаПрогресса.Закрыть();
			#КонецЕсли
			
			ТекстОшибки = "Не настроен доступ к КСЛ!";
			
			#Если Клиент Тогда
				новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("НеНастроенДоступККСЛ", ТекстОшибки);
			#КонецЕсли
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Попытка
			
			КСЛ.Сервер_ДоступКСерверу.Подключиться(Сервер, Формат(Порт, "ЧГ="));
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			ТекстОшибки = "Ошибка при доступе к корпоративному серверу логистики" + Символы.ПС + "Подробная информация об ошибке:" + Символы.ПС + ТекстОшибки;
			#Если Клиент Тогда
				новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("ВнутренняОшибкаСервера", ТекстОшибки);
			#КонецЕсли
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		Попытка
			
			КСЛ.Сервер_ДоступКСерверу.ПодключитьсяКБазе(База,
				СокрЛП(ПараметрыСеанса.новаТекущийПользователь.ПользовательКСЛ),
				СокрЛП(ПараметрыСеанса.новаТекущийПользователь.ПарольКСЛ));
				
			Исключение
				
			ТекстОшибки = "Ошибка при подключении к базе на корпоративном сервере логистики" + Символы.ПС + "Подробная информация об ошибке:" + Символы.ПС + ОписаниеОшибки();
			#Если Клиент Тогда
				новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("ОшибкаПриПодключенииКБазе", ТекстОшибки);
			#КонецЕсли
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		КСЛ.Сервер_ДоступКСерверу.УстановитьИсточникИзменений("UTL35");
		
		Попытка
			
			КСЛ.Сервер_ДоступКСерверу.Запустить();
			
		Исключение
			
			ТекстОшибки = "Ошибка при подключении к базе на корпоративном сервере логистики" + Символы.ПС + "Подробная информация об ошибке:" + Символы.ПС + ОписаниеОшибки();
			#Если Клиент Тогда
				Если Найти(ТекстОшибки, "COM Компонент не найден") > 0 Тогда
					новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("КлиентСервераЛицензийНеУстановлен", ТекстОшибки);
				ИначеЕсли Найти(ТекстОшибки, "Недостаточно свободных лицензий") > 0 Тогда
					новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("НетСвободныхЛицензий", ТекстОшибки);
				ИначеЕсли Найти(ТекстОшибки, "На сервере лицензий просрочены лицензии") > 0 Тогда
					новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("ЛицензииПросрочены", ТекстОшибки);
				ИначеЕсли Найти(ТекстОшибки, "Сервер лицензий не доступен") > 0 Тогда
					новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("СерверЛицензийНеДоступен", ТекстОшибки);
				ИначеЕсли Найти(ТекстОшибки, "Ошибка лицензирования") > 0 Тогда
					новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("ОшибкаЛицензирования", ТекстОшибки);
				Иначе
					новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("ОшибкаПриПодключенииКБазе", ТекстОшибки);
				КонецЕсли;
			#КонецЕсли
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		#Если Клиент Тогда
			// Инициализируем георамку
			Георамка = новаУправлениеПользователями.ПолучитьГеорамкуПоУмолчанию();
			КСЛ.ГрафическийИнтерфейс_Графика.ГеоРамкаПоУмолчанию = КСЛ.ГрафическийИнтерфейс_Карты_ГеоРамка();
			КСЛ.ГрафическийИнтерфейс_Графика.ГеоРамкаПоУмолчанию.ВыровнятьПоКоординатам2(Георамка.МинимальнаяШирота, Георамка.МинимальнаяДолгота);
			КСЛ.ГрафическийИнтерфейс_Графика.ГеоРамкаПоУмолчанию.ВыровнятьПоКоординатам2(Георамка.МаксимальнаяШирота, Георамка.МаксимальнаяДолгота);
			
			новаКлиентКСЛ.ОбновитьНастройкуРейса();
		#КонецЕсли
		
	Исключение
		
		стрОшибка = ОписаниеОшибки();
		
		#Если Клиент Тогда
			новаОбщиеПроцедуры.ВывестиПодробнуюИнформациюОбОшибке(ИнформацияОбОшибке());
			новаКонтекст.СерверДоступен = Ложь;
			ФормаПрогресса.Закрыть();
		#КонецЕсли
		
		ВызватьИсключение стрОшибка;
	КонецПопытки;
	
	#Если Клиент Тогда
		новаКонтекст.СерверДоступен = Истина;
		ФормаПрогресса.Закрыть();
	#КонецЕсли
	
КонецПроцедуры
