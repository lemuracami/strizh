// Устанавливает параметры сеанса, используемые в подсистеме <новаВзаморасчеты>
//
Процедура УстановитьПараметрыСеанса() Экспорт
	ПараметрыСеанса.новаДатаЗапретаРедактирования = Константы.новаДатаЗапретаРедактирования.Получить();	
КонецПроцедуры

// Возвращает тип документа-сделки по виду сделок
//
// Параметры:
//  ВидСделки <ПеречислениеСсылка.новаВидыСделок>
//
// Возвращаемое значение:
//  <ОписаниеТипов>: Тип документа-сделки
//
Функция ПолучитьТипСделки(ВидСделки) Экспорт
	Если ВидСделки = Перечисления.новаВидыСделок.ОказаниеУслуг Тогда
		Возврат Новый ОписаниеТипов("ДокументСсылка.новаПосредническаяУслуга");
	
	ИначеЕсли ВидСделки = Перечисления.новаВидыСделок.РейсМестнойДоставки Тогда
		Возврат Новый ОписаниеТипов("БизнесПроцессСсылка.новаРейсМестнойДоставки");
		
	ИначеЕсли ВидСделки = Перечисления.новаВидыСделок.РейсЭкспедирования Тогда
		Возврат Новый ОписаниеТипов("БизнесПроцессСсылка.новаРейсЭкспедирования");
	КонецЕсли;
КонецФункции

// Возвращает значение перечисления новаСтавкиНДС в виде числа
//
// Параметры:
//  СтавкаНДС <ПеречислениеСсылка.новаСтавкиНДС>
//
// Возвращаемое значение:
//  <Число>
//
Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС)
	Если СтавкаНДС = Перечисления.новаСтавкиНДС.БезНДС Тогда
		Возврат 0;
		
	ИначеЕсли СтавкаНДС = Перечисления.новаСтавкиНДС.НДС0 Тогда
		Возврат 0;
		
	ИначеЕсли СтавкаНДС = Перечисления.новаСтавкиНДС.НДС10 Тогда
		Возврат 10;
		
	ИначеЕсли СтавкаНДС = Перечисления.новаСтавкиНДС.НДС10_110 Тогда
		Возврат 10/110;
		
	ИначеЕсли СтавкаНДС = Перечисления.новаСтавкиНДС.НДС18 Тогда
		Возврат 18;
		
	ИначеЕсли СтавкаНДС = Перечисления.новаСтавкиНДС.НДС18_118 Тогда
		Возврат 18/118;
		
	КонецЕсли;
КонецФункции

// Возвращает НДС (сверху)
//
// Параметры:
//  Сумма     <Число>
//  СтавкаНДС <Число>
//
// Возвращаемое значение:
//  <Число>
//
Функция ДобавитьНДС(Сумма, СтавкаНДС) Экспорт
	Ставка = ПолучитьЗначениеСтавкиНДС(СтавкаНДС);
	Возврат Сумма * Ставка / (100 - Ставка);
КонецФункции

// Возвращает НДС (в сумме)
//
// Параметры:
//  Сумма     <Число>
//  СтавкаНДС <Число>
//
// Возвращаемое значение:
//  <Число>
//
Функция ВыделитьНДС(Сумма, СтавкаНДС) Экспорт
	Возврат Сумма * ПолучитьЗначениеСтавкиНДС(СтавкаНДС) / 100;
КонецФункции

// Возвращает наименование валюты и курс в виде строки 
//
// Параметры:
//  Валюта    <СправочникСсылка.новаВалюты>
//  Курс      <Число>
//  Кратность <Число>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьКурсВалютыСтрокой(Валюта, Курс, Кратность) Экспорт
	Возврат СокрЛП(Валюта.Наименование) + " " + Формат(Курс, "ЧДЦ=4");
КонецФункции

// Возвращает сумму в валюте в виде строки
//
// Параметры:
//  Сумма  <Число>
//  Валюта <СправочникСсылка.новаВалюты>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьВалютнуюСуммуСтрокой(Сумма, Валюта) Экспорт
	Возврат Формат(Сумма, "ЧДЦ=2") + " " + СокрЛП(Валюта.Наименование);
КонецФункции

// Возвращает валюту в виде строки и сумму прописью 
//
// Параметры:
//  Сумма  <Число>
//  Валюта <СправочникСсылка.новаВалюты>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьСуммуПрописью(Сумма, Валюта) Экспорт
	ПрописьЧисла = ЧислоПрописью(Сумма,, Валюта.ПараметрыПрописиНаРусском);
	Возврат ПрописьЧисла;	
КонецФункции 

// Выполняет очистку расшифровки от договоров, не соответствующих заданному контрагенту
//
// Параметры:
//  РасшифровкаПлатежа <Табличная часть>
//  Контрагент         <СправочникСсылка.новаКонтрагенты>
//
Процедура ОчиститьДоговорыНеСоответствующиеКонтрагенту(РасшифровкаПлатежа, Контрагент) Экспорт
	Для Каждого стрРасшифровкаПлатежа Из РасшифровкаПлатежа Цикл
		Если стрРасшифровкаПлатежа.Договор.Владелец <> Контрагент Тогда
			стрРасшифровкаПлатежа.Договор = Неопределено;			
		КонецЕсли; 
	КонецЦикла; 		
КонецПроцедуры
 
// Выполняет проверку заполнения договоров в расшифровке платежа
//
// Параметры:
//  РасшифровкаПлатежа <Табличная часть>
//
// Возвращаемое значение:
//  <Булево>
//
Функция ДоговорыЗаполнены(РасшифровкаПлатежа) Экспорт
	Для Каждого стрРасшифровкаПлатежа Из РасшифровкаПлатежа Цикл
		Если Не ЗначениеЗаполнено(стрРасшифровкаПлатежа.Договор) Тогда
#Если Клиент Тогда
			Предупреждение("Не указан договор");
#КонецЕсли 
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Очищает табличную часть расшифровок
//
// Параметры:
//  РасшифровкаПлатежа <Табличная часть>
//
Процедура ОчиститьРасшифровкуПлатежа(РасшифровкаПлатежа) Экспорт
 	тзРасшифровкаПлатежа = РасшифровкаПлатежа.Выгрузить();
	тзРасшифровкаПлатежа.Очистить();
	тзРасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(РасшифровкаПлатежа[0], тзРасшифровкаПлатежа[0]);
	
	Пока РасшифровкаПлатежа.Количество() > 1 Цикл
		РасшифровкаПлатежа.Удалить(РасшифровкаПлатежа[1]);
	КонецЦикла;
КонецПроцедуры
 
// Удаляет расшифровки, не соответствующие реквизитам шапки документа
//
// Параметры:
//  обДокумент <ДокументОбъект>
//
Процедура УдалитьРасшифровкиНеСоответствующиеШапке(обДокумент) Экспорт
	Если Не ЗначениеЗаполнено(обДокумент.Контрагент)
	 Или Не ЗначениеЗаполнено(обДокумент.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ъ = обДокумент.РасшифровкаПлатежа.Количество() - 1;
	Пока ъ >= 0 Цикл
		стрРасшифровка = обДокумент.РасшифровкаПлатежа[ъ];
		Если стрРасшифровка.Договор.Владелец <> обДокумент.Контрагент
		 Или стрРасшифровка.Договор.Организация <> обДокумент.Организация Тогда
		 	Если ъ = 0 Тогда
			 	тзРасшифровкаПлатежа = обДокумент.РасшифровкаПлатежа.Выгрузить();
				тзРасшифровкаПлатежа.Очистить();
				тзРасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(стрРасшифровка, тзРасшифровкаПлатежа[0]);
			Иначе 
				обДокумент.РасшифровкаПлатежа.Удалить(стрРасшифровка);
			КонецЕсли; 
		КонецЕсли;
		
		ъ = ъ - 1;
	КонецЦикла;
КонецПроцедуры

//
//
// Параметры:
//  Документ <>:
//  Отказ    <>:
//
Процедура ПроверитьДатуЗапретаРедактирования(Документ, Отказ) Экспорт
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.новаДатаЗапретаРедактирования) Тогда Возврат; КонецЕсли;
	
	Если Документ.Дата <= ПараметрыСеанса.новаДатаЗапретаРедактирования Тогда
#Если Клиент Тогда
		Сообщить("Дата документа меньше даты запрета редактирования!");
#КонецЕсли 
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Отображает в надписи на форме состояние взаиморасчетов с контрагентом.
//
// Параметры:
//  Контрагент <СправочникСсылка.новаКонтрагенты>
//  Надпись    <Надпись>
//
Процедура ОтобразитьВзаиморасчеты(Контрагент, Надпись) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(Взаиморасчеты.СуммаУпрОстаток, 0) КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.новаВзаиморасчетыСКонтрагентами.Остатки(, Контрагент = &Контрагент) КАК Взаиморасчеты
	|";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	Если тзРезультат.Количество() = 0 Тогда
		СуммаВзаиморасчетов = 0;
	Иначе
		СуммаВзаиморасчетов = тзРезультат[0].СуммаВзаиморасчетов;
	КонецЕсли;
	
	Если СуммаВзаиморасчетов > 0 Тогда
		Надпись.Заголовок = Формат(СуммаВзаиморасчетов, "ЧДЦ=2; ЧН=; ЧВН=") + " " + СокрЛП(новаДоходыРасходы.ПолучитьВалютуУпрУчета());
		Надпись.ЦветТекста = Новый Цвет(255, 0, 0);
	Иначе
		Надпись.Заголовок = Формат(-СуммаВзаиморасчетов, "ЧДЦ=2; ЧН=; ЧВН=") + " " + СокрЛП(новаДоходыРасходы.ПолучитьВалютуУпрУчета());
		Надпись.ЦветТекста = Новый Цвет(0, 0, 100);
	КонецЕсли;
КонецПроцедуры

// Определяет, содержит ли документ определенный реквизит.
//
// Параметры:
//  ИмяРеквизита        <Строка>
//  МетаданныеДокумента <ОбъектМетаданных.Документ>:
//
// Возвращаемое значение:
//  <Булево>
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	Возврат Не (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
КонецФункции 

// Выполняет заполнение шапки документа значениями по умолчанию
//
// Параметры:
//  Объект <ДокументОбъект>
//
Процедура ЗаполнитьШапкуДокумента(Объект) Экспорт
	МетаданныеДокумента = Объект.Метаданные();
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		Объект.Ответственный = ПараметрыСеанса.новаТекущийПользователь;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	   И ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
	   
		Если НЕ ЗначениеЗаполнено(Объект.Организация)
		   И ЗначениеЗаполнено(Объект.Ответственный.ОсновнаяОрганизация)Тогда
			Объект.Организация = Объект.Ответственный.ОсновнаяОрганизация;
		КонецЕсли; 		
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) 
	   И ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
	   
		Если НЕ ЗначениеЗаполнено(Объект.Касса)
		   И ЗначениеЗаполнено(Объект.Ответственный.ОсновнаяКасса)Тогда
			Объект.Касса = Объект.Ответственный.ОсновнаяКасса;				
		КонецЕсли;
		
	КонецЕсли;

	Если ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
	   Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) 
		  И ЗначениеЗаполнено(Объект.Организация.ОсновнойБанковскийСчет) Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;	
		КонецЕсли;   
	КонецЕсли; 

КонецПроцедуры

// Возвращает выборку документов расчетов с покупателями для документа-основания
//
// Параметры:
//  Основание <ДокументСсылка>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьДокументыРасчетыСПокупателями(Основание) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	новаРасчетыСПокупателями.Ссылка
	               |ИЗ
	               |	Документ.новаРасчетыСПокупателями КАК новаРасчетыСПокупателями
	               |ГДЕ
	               |	новаРасчетыСПокупателями.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", Основание);
    Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Возвращает выборку документов расчетов с поставщиками для документа-основания
//
// Параметры:
//  Основание <ДокументСсылка>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьДокументыРасчетыСПоставщиками(Основание) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	новаРасчетыСПоставщиками.Ссылка
	               |ИЗ
	               |	Документ.новаРасчетыСПоставщиками КАК новаРасчетыСПоставщиками
	               |ГДЕ
	               |	новаРасчетыСПоставщиками.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", Основание);
    Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	
	
// Возвращает выборку документов расчетов с поставщиками по документу-основанию, контрагенту и договору
//
// Параметры:
//  Основание  <ДокументСсылка>
//  Контрагент <СправочникСсылка.новаКонтрагенты>
//  Договор    <СправочникСсылка.новаДоговоры>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьДокументыРасчетыСПоставщикамиПоКонтрагенту(Основание, Контрагент, Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	новаРасчетыСПоставщиками.Ссылка
	               |ИЗ
	               |	Документ.новаРасчетыСПоставщиками КАК новаРасчетыСПоставщиками
	               |ГДЕ
	               |	новаРасчетыСПоставщиками.Основание = &Основание
	               |	И новаРасчетыСПоставщиками.Исполнитель = &Исполнитель
	               |	И новаРасчетыСПоставщиками.ДоговорСИсполнителем = &ДоговорСИсполнителем";
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Исполнитель", Контрагент);
	Запрос.УстановитьПараметр("ДоговорСИсполнителем", Договор);
    Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	
	
	