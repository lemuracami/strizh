
// Возвращает часть текста запроса для документов, введенных на основании
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьЗапросДокументовПоОснованию() Экспорт
	Возврат "(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.новаВидыДокументов.Реализация) КАК ВидДокумента,
	|	Реализации.Ссылка КАК Документ,
	|	Реализации.Номер КАК НомерДокумента,
	|	Реализации.Дата КАК ДатаДокумента,	
	|	Реализации.Заказчик КАК Контрагент,
	|	Реализации.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.новаРеализация КАК Реализации
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	Документ.новаРеализация.Основания КАК ОснованияРеализаций
	|ПО
	|	ОснованияРеализаций.Ссылка = Реализации.Ссылка
	|	
	|ГДЕ
	|	ОснованияРеализаций.Основание = &Основание
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.новаВидыДокументов.Поступление) КАК ВидДокумента,
	|	Поступления.Ссылка КАК Документ,
	|	Поступления.Номер КАК НомерДокумента,
	|	Поступления.Дата КАК ДатаДокумента,	
	|	Поступления.Исполнитель КАК Контрагент,
	|	Поступления.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.новаПоступление КАК Поступления
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	Документ.новаПоступление.Основания КАК ОснованияПоступлений
	|ПО
	|	ОснованияПоступлений.Ссылка = Поступления.Ссылка
	|	
	|ГДЕ
	|	ОснованияПоступлений.Основание = &Основание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.новаВидыДокументов.СчетНаОплату) КАК ВидДокумента,
	|	Счета.Ссылка КАК Документ,
	|	Счета.Номер КАК НомерДокумента,
	|	Счета.Дата КАК ДатаДокумента,	
	|	Счета.Заказчик КАК Контрагент,
	|	Счета.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.новаСчетНаОплату КАК Счета
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	Документ.новаСчетНаОплату.Основания КАК ОснованияСчетов
	|ПО
	|	ОснованияСчетов.Ссылка = Счета.Ссылка
	|	
	|ГДЕ
	|	ОснованияСчетов.Основание = &Основание
	|
	|) КАК Документы";	
КонецФункции

#Если Клиент Тогда
// Вызывается при интерактивном создании документов
//
// Параметры:
//  ВидДокументов <Строка>
//  Основание     <ДокументСсылка>
//
Процедура СоздатьДокументыИнтерактивно(ВидДокументов, Основание) Экспорт
	
	Если Не Основание.Факт Тогда
		Док = Документы.новаПосредническаяУслуга.НайтиПоРеквизиту("ДокументПланирования",Основание);
		Если ЗначениеЗаполнено(Док) Тогда
			Основание = Док;
		КонецЕсли;
	//	Основание = вхОснование.ДокументПланирования;
	//Иначе
	//	Основание = вхОснование;
	КонецЕсли;
	
	Если ВидДокументов = "СоздатьРегламентныеДокументы" Тогда
		обРеализация = Документы.новаРеализация.СоздатьДокумент();
		обРеализация.Заполнить(Основание);
		обРеализация.РассчитатьИтоговыеСуммы();
		ОткрытьЗначение(обРеализация);
		
		обСчет = Документы.новаСчетНаОплату.СоздатьДокумент();
		обСчет.Заполнить(Основание);
		обСчет.РассчитатьИтоговыеСуммы();
		ОткрытьЗначение(обСчет);

		мсОснования = Новый Массив;
		мсОснования.Добавить(Основание);
		Услуги = ПолучитьДанныеТЧПосредническойУслуги(мсОснования); 
		Услуги.Свернуть("ПоставщикКонтрагент,ПоставщикДоговорКонтрагента");
		Для Каждого СтрокаТаблицы Из Услуги Цикл
			обПоступление = Документы.новаПоступление.СоздатьДокумент();
			обПоступление.ЗаполнитьНаОснованииПосредническойУслуги(мсОснования,,, 
				СтрокаТаблицы.ПоставщикКонтрагент, СтрокаТаблицы.ПоставщикДоговорКонтрагента);
			обПоступление.РассчитатьИтоговыеСуммы();
			ОткрытьЗначение(обПоступление);
		КонецЦикла;
		
	ИначеЕсли ВидДокументов = "ДобавитьРеализацию" Тогда
		обРеализация = Документы.новаРеализация.СоздатьДокумент();
		обРеализация.Заполнить(Основание);
		обРеализация.РассчитатьИтоговыеСуммы();
		ОткрытьЗначение(обРеализация);
		
	ИначеЕсли ВидДокументов = "ДобавитьСчет" Тогда
		обСчет = Документы.новаСчетНаОплату.СоздатьДокумент();
		обСчет.Заполнить(Основание);
		обСчет.РассчитатьИтоговыеСуммы();
		ОткрытьЗначение(обСчет);
		
	ИначеЕсли ВидДокументов = "ДобавитьПоступление" Тогда
		
		мсОснования = Новый Массив;
		мсОснования.Добавить(Основание);
		Услуги = ПолучитьДанныеТЧПосредническойУслуги(мсОснования); 
		Услуги.Свернуть("ПоставщикКонтрагент,ПоставщикДоговорКонтрагента");
		Для Каждого СтрокаТаблицы Из Услуги Цикл
			обПоступление = Документы.новаПоступление.СоздатьДокумент();
			обПоступление.ЗаполнитьНаОснованииПосредническойУслуги(мсОснования,,, 
				СтрокаТаблицы.ПоставщикКонтрагент, СтрокаТаблицы.ПоставщикДоговорКонтрагента);
			обПоступление.РассчитатьИтоговыеСуммы();
			ОткрытьЗначение(обПоступление);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
// Добавляет в массив структуры, для последующего создания элементов управления
//
// Параметры:
//  мсИнструменты <Массив>
//
Процедура ПолучитьИнструментыИнтерактивногоСозданияДокументов(мсИнструменты) Экспорт
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "СоздатьРегламентныеДокументы", БиблиотекаКартинок.новаДобавитьСтроки, "Создать все", "Создать все регламентные документы"));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ДобавитьРеализацию", БиблиотекаКартинок.новаДобавитьСтроки, "Реализация", "Создать реализацию"));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ДобавитьПоступление", БиблиотекаКартинок.новаДобавитьСтроки, "Поступление", "Создать поступление"));
	мсИнструменты.Добавить(Новый Структура("Имя, Картинка, Текст, Подсказка", "ДобавитьСчет", БиблиотекаКартинок.новаДобавитьСтроки, "Счет", "Создать счет на оплату"));
КонецПроцедуры
#КонецЕсли

// Получает курс валюты на заданную дату
//
// Параметры:
//  Валюта       <СправочникСсылка.новаВалюты>
//  НаДату       <Дата>
//  новаКонтекст <Структура[Контекст]>
//
// Возвращаемое значение:
//  <Число>
//
Функция ПолучитьКурсВалюты(Валюта, НаДату, новаКонтекст = Неопределено) Экспорт 
	Если новаКонтекст <> Неопределено Тогда
		Если Не новаКонтекст.Свойство("КурсыВалют") Тогда
			новаКонтекст.Вставить("КурсыВалют", Новый Соответствие);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаДату) Тогда
			ДатаКурса = НачалоДня(НаДату);
		Иначе
			ДатаКурса = ТекущаяДата();
		КонецЕсли;
		
		
		соКурсыВалютНаДату = новаКонтекст.КурсыВалют[ДатаКурса];
		Если соКурсыВалютНаДату = Неопределено Тогда
			соКурсыВалютНаДату = Новый Соответствие;
			новаКонтекст.КурсыВалют.Вставить(ДатаКурса, соКурсыВалютНаДату);
		КонецЕсли;
		
		стКурсВалюты = соКурсыВалютНаДату[Валюта];
		Если стКурсВалюты <> Неопределено Тогда Возврат стКурсВалюты; КонецЕсли;
	КонецЕсли;
	
	тзКурсВалюты = РегистрыСведений.новаКурсыВалют.СрезПоследних(ДатаКурса, Новый Структура("Валюта", Валюта));
	Если тзКурсВалюты.Количество() = 0 Тогда
		стКурсВалюты = Новый Структура("Курс, Кратность", 1, 1);
	Иначе
		стКурсВалюты = Новый Структура("Курс, Кратность");
		ЗаполнитьЗначенияСвойств(стКурсВалюты, тзКурсВалюты[0]);
	КонецЕсли;
	
	Если новаКонтекст <> Неопределено Тогда
		соКурсыВалютНаДату.Вставить(Валюта, стКурсВалюты);
	КонецЕсли;
	
	Возврат стКурсВалюты;
КонецФункции

// Возвращает структуру, содержащую данные об учетной политике организации
//
// Параметры:
//  Организация <СправочникСсылка.новаОрганизации>
//  НаДату      <Дата>
//
// Возвращаемое значение:
//  <Структура>
//
Функция ПолучитьУчетнуюПолитикуОрганизации(Организация, НаДату) Экспорт
	Возврат Новый Структура("ПлательщикНДС", Организация.ПлательщикНДС);
КонецФункции

// Возвращает часть текста запроса для финансовых документов, введенных на основании
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьЗапросНаличияФинансовыхДокументов() Экспорт
	Возврат "ВЫБРАТЬ
	|	ФинансовыеДокументы.Услуга КАК Услуга,
	|	КОЛИЧЕСТВО(ФинансовыеДокументы.Поступление) КАК КоличествоПоступлений,
	|	КОЛИЧЕСТВО(ФинансовыеДокументы.Реализация) КАК КоличествоРеализаций,
	|	КОЛИЧЕСТВО(ФинансовыеДокументы.Счет) КАК КоличествоСчетов
	|
	|ПОМЕСТИТЬ ФинансовыеДокументыПосредническихУслуг
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПосредническиеУслуги.ПосредническаяУслугаПлан КАК Услуга,
	|       ФинансовыеДокументы.Ссылка КАК Реализация,
	|		NULL КАК Поступление,
	|		NULL КАК Счет
	|	ИЗ
	|   	ПосредническиеУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.новаРеализация.Основания КАК ФинансовыеДокументы
	|   ПО
	|		ФинансовыеДокументы.Основание = ПосредническиеУслуги.ПосредническаяУслугаПлан
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПосредническиеУслуги.ПосредническаяУслугаПлан КАК Услуга,
	|       NULL КАК Реализация,
	|       ФинансовыеДокументы.Ссылка КАК Поступление,
	|		NULL КАК Счет
	|	ИЗ
	|   	ПосредническиеУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.новаПоступление.Основания КАК ФинансовыеДокументы
	|   ПО
	|		ФинансовыеДокументы.Основание = ПосредническиеУслуги.ПосредническаяУслугаПлан
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПосредническиеУслуги.ПосредническаяУслугаПлан КАК Услуга,
	|       NULL КАК Реализация,
	|		NULL КАК Поступление,
	|       ФинансовыеДокументы.Ссылка КАК Счет
	|	ИЗ
	|   	ПосредническиеУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.новаСчетНаОплату.Основания КАК ФинансовыеДокументы
	|   ПО
	|		ФинансовыеДокументы.Основание = ПосредническиеУслуги.ПосредническаяУслугаПлан
	|	) КАК ФинансовыеДокументы
	|
	|СГРУППИРОВАТЬ ПО ФинансовыеДокументы.Услуга
	|;";
КонецФункции

// Создает документы реализаций для документов-оснований.
//
// Параметры:
//  мсОснования          <Массив>
//  ДатаФормирования     <Дата>
//  ПараметрФормирования <Строка>
//  УслугаПоУмолчанию    <СправочникСсылка.новаНоменклатура>
//
Процедура СоздатьРеализации(мсОснования, ДатаФормирования, ПараметрФормирования, УслугаПоУмолчанию=Неопределено) Экспорт
	Если мсОснования.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	обРеализация = Документы.новаРеализация.СоздатьДокумент();
	обРеализация.Дата = ДатаФормирования; 
	обРеализация.ОчиститьПередЗаполнением();
	Для Каждого Основание Из мсОснования Цикл
		обРеализация.ЗаполнитьНаОснованииПосредническойУслуги(Основание, ПараметрФормирования, УслугаПоУмолчанию);
	КонецЦикла;
	обРеализация.СвернутьТабличныеЧасти(ПараметрФормирования);
	обРеализация.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

// Создает документы "Счет на оплату" для документов-оснований.
//
// Параметры:
//  мсОснования          <Массив>
//  ДатаФормирования     <Дата>
//  ПараметрФормирования <Строка>
//  УслугаПоУмолчанию    <СправочникСсылка.новаНоменклатура>
//
Процедура СоздатьСчета(мсОснования, ДатаФормирования, ПараметрФормирования, УслугаПоУмолчанию=Неопределено) Экспорт
	Если мсОснования.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	обСчет = Документы.новаСчетНаОплату.СоздатьДокумент();
	обСчет.Дата = ДатаФормирования; 
	обСчет.ОчиститьПередЗаполнением();
	Для Каждого Основание Из мсОснования Цикл
		обСчет.ЗаполнитьНаОснованииПосредническойУслуги(Основание, ПараметрФормирования, УслугаПоУмолчанию);
	КонецЦикла;
	обСчет.СвернутьТабличныеЧасти(ПараметрФормирования);
	обСчет.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

// Возвращает данные табличных частей документов "Посредническая услуга" 
//
// Параметры:
//  мсУслуги <Массив>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьДанныеТЧПосредническойУслуги(мсУслуги)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	новаПосредническаяУслугаРасчетСтоимости.Ссылка КАК ПосредническаяУслуга,
	               |	новаПосредническаяУслугаРасчетСтоимости.ВидУслуги,
	               |	новаПосредническаяУслугаРасчетСтоимости.Ссылка.Заказчик,
	               |	новаПосредническаяУслугаРасчетСтоимости.Ссылка.ДоговорЗаказчика,
	               |	новаПосредническаяУслугаРасчетСтоимости.ЗаказчикЦена,
	               |	новаПосредническаяУслугаРасчетСтоимости.ЗаказчикСумма,
	               |	новаПосредническаяУслугаРасчетСтоимости.ЗаказчикВалюта,
	               |	новаПосредническаяУслугаРасчетСтоимости.Количество,
	               |	новаПосредническаяУслугаРасчетСтоимости.ПоставщикКонтрагент,
	               |	новаПосредническаяУслугаРасчетСтоимости.ПоставщикДоговорКонтрагента,
	               |	новаПосредническаяУслугаРасчетСтоимости.ПоставщикЦена,
	               |	новаПосредническаяУслугаРасчетСтоимости.ПоставщикСумма,
	               |	новаПосредническаяУслугаРасчетСтоимости.ПоставщикВалюта
	               |ИЗ
	               |	Документ.новаПосредническаяУслуга.РасчетСтоимости КАК новаПосредническаяУслугаРасчетСтоимости
	               |ГДЕ
	               |	новаПосредническаяУслугаРасчетСтоимости.Ссылка В(&ПосредническиеУслуги)";
				   
	Запрос.УстановитьПараметр("ПосредническиеУслуги", мсУслуги);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Создает документы поступлений для документов-оснований.
//
// Параметры:
//  мсОснования          <Массив>
//  ДатаФормирования     <Дата>
//  ПараметрФормирования <Строка>
//  УслугаПоУмолчанию    <СправочникСсылка.новаНоменклатура>
//
Процедура СоздатьПоступления(мсОснования, ДатаФормирования, ПараметрФормирования, УслугаПоУмолчанию=Неопределено) Экспорт
	Если мсОснования.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Услуги = ПолучитьДанныеТЧПосредническойУслуги(мсОснования); 
	
	Услуги.Свернуть("ПоставщикКонтрагент,ПоставщикДоговорКонтрагента");
	
	Для Каждого СтрокаТаблицы Из Услуги Цикл
		
		обПоступление = Документы.новаПоступление.СоздатьДокумент();
		обПоступление.Дата = ДатаФормирования; 
		обПоступление.ОчиститьПередЗаполнением();
		
		обПоступление.ЗаполнитьНаОснованииПосредническойУслуги(мсОснования, ПараметрФормирования, УслугаПоУмолчанию,
			СтрокаТаблицы.ПоставщикКонтрагент, СтрокаТаблицы.ПоставщикДоговорКонтрагента);
			//мсДокОсн = ПолучитьДокументыПоПеревозчику(мсОснования,СтрокаТаблицы.ПоставщикКонтрагент, СтрокаТаблицы.ПоставщикДоговорКонтрагента); 
			//обПоступление.ДополнительныеСвойства.Вставить("новаОснование", мсДокОсн); 
		обПоступление.СвернутьТабличныеЧасти(ПараметрФормирования);
		обПоступление.Записать(РежимЗаписиДокумента.Проведение);
	
	КонецЦикла;
	
КонецПроцедуры

// Отображает данные о взаиморасчетах с контрагентом
//
// Параметры:
//  Контрагент   <СправочникСсылка.новаКонтрагенты>
//  ЭлементФормы <Элемент формы>
//
Процедура ОтобразитьВзаиморасчеты(Контрагент, ЭлементФормы) Экспорт
КонецПроцедуры	
