Функция ЗагрузкаСТСДЧерезВебСервер(Ид, СерверТСД = Неопределено, УдалятьДокументыССервера = Неопределено, Склад = Неопределено) Экспорт 
		
	ШтрихкодыГабаритов = lem.ПолучитьШтрихкодыИзмеренияГабаритов();
	
	Прокси = WSСсылки.Cleverence.СоздатьWSПрокси("http://cleverence.ru/EasyWarehouse", "DataStorage", "DataStorageSoap",,,,lem.ПолучитьСтрокуПодключения(СерверТСД.СтрокаПодключения));
	
	НеОбработанныеДокументы = Новый СписокЗначений;
	
	ДокументыТСДНаСервере = СоздатьТЗ_СпискаДокументов(Прокси);
	
	ТЧДокументовТСДНаСервере = СоздатьТЗ_ТЧДокументов(ДокументыТСДНаСервере, Прокси, НеОбработанныеДокументы);
	
	СписокИд = Новый СписокЗначений;
	
	Зап = Новый Запрос;
    ////Серегин М.В. 06.07.2015 12:06:18 старый запрос
    //Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
    //            |	ЗагрузкаСТСД.Ссылка,
    //            |	ЗагрузкаСТСД.ТипЗагрузкиТСД
    //            |ИЗ
    //            |	Документ.ЗагрузкаСТСД КАК ЗагрузкаСТСД
    //            |ГДЕ
    //            |	НЕ ЗагрузкаСТСД.ТипЗагрузкиТСД В (ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ВозвратКомитенту), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.Приход), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.КорректировкиВозвратов))
    //            |
    //            |УПОРЯДОЧИТЬ ПО
    //            |	ЗагрузкаСТСД.ДатаДокумента УБЫВ";
    ////Серегин М.В. 06.07.2015 12:06:28 новый запрос уже старый             
    //Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
    //            |   ЗагрузкаСТСД.Ссылка,
    //            |   ЗагрузкаСТСД.ТипЗагрузкиТСД
    //            |ИЗ
    //            |   Документ.ЗагрузкаСТСД КАК ЗагрузкаСТСД
    //            |ГДЕ
    //            |   НЕ ЗагрузкаСТСД.ТипЗагрузкиТСД В (ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ВозвратКомитенту), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.Приход), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.КорректировкиВозвратов))
    //            |
    //            |УПОРЯДОЧИТЬ ПО
    //            |   ЗагрузкаСТСД.Дата УБЫВ";
    //ТекТипЗагрузки = Зап.Выполнить().Выгрузить()[0].ТипЗагрузкиТСД;
    
    //+++++Серегин М.В. 11.12.2015 11:24:49 новый добавил отбор по СерверТСД
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
                |   ЗагрузкаСТСД.Ссылка,
                |   ЗагрузкаСТСД.ТипЗагрузкиТСД
                |ИЗ
                |   Документ.ЗагрузкаСТСД КАК ЗагрузкаСТСД
                |ГДЕ
                |   НЕ ЗагрузкаСТСД.ТипЗагрузкиТСД В (ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ВозвратКомитенту), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.Приход), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.КорректировкиВозвратов))
                |   И ЗагрузкаСТСД.СерверТСД = &СерверТСД
                |
                |УПОРЯДОЧИТЬ ПО
                |   ЗагрузкаСТСД.Дата УБЫВ";
    Зап.УстановитьПараметр("СерверТСД",?(СерверТСД<>Неопределено,СерверТСД,Справочники.СерверыWiFiТСД.ПустаяСсылка()));  
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
	    ТекТипЗагрузки = Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRoute;
	Иначе	
		ТекТипЗагрузки = Рез.Выгрузить()[0].ТипЗагрузкиТСД;
	КонецЕсли;
	    				
	
	Если Не ЗначениеЗаполнено(ТекТипЗагрузки) Или ТекТипЗагрузки = Перечисления.ТипыЗагрузкиТСД.Аксиомус Тогда
		ТекТипЗагрузки = Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRoute;
	КонецеСли;	
	
	КолЗагДок = 0;
	Д1 = Истина;
	Для Инд = 0 По ДокументыТСДНаСервере.Количество() -1 Цикл
		
		ТабИзмерений = Новый ТаблицаЗначений;
		ТабИзмерений.Колонки.Добавить("Заказ");
		ТабИзмерений.Колонки.Добавить("Сторона1");
		ТабИзмерений.Колонки.Добавить("Сторона2");
		ТабИзмерений.Колонки.Добавить("Сторона3");
		ТабИзмерений.Колонки.Добавить("Произведение");
		ТабИзмерений.Колонки.Добавить("Отмена");
		
		//Если Д1 Тогда
		//	Д1 = Ложь;
		//	Продолжить;
		//КонецеСли;	
		//---бао ДокументТСД = ДокументыТСДНаСервере.Элемент(Инд);
		ДокументТСД = ДокументыТСДНаСервере[Инд];
		
		Если НеОбработанныеДокументы.НайтиПоЗначению(ДокументыТСДНаСервере[Инд]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ДокументТСД.СтрокиПлан_Количество = 0 или Найти(ДокументТСД.Ид,"new") > 0 Тогда
			ТаблицаДокументаТСД = "СтрокиФакт";
		КонецеСли;
		МасЗ = Новый Массив;
		
		
		ЗапИд = Новый Запрос;
		
		ЗапИд.Текст = "ВЫБРАТЬ
		              |	ЗагрузкаСТСД.Ссылка
		              |ИЗ
		              |	Документ.ЗагрузкаСТСД КАК ЗагрузкаСТСД
		              |ГДЕ
		              |	ЗагрузкаСТСД.Ид_Документа = &Ид_Документа";
		ЗапИд.УстановитьПараметр("Ид_Документа", ДокументТСД.Ид);
		РезИд = ЗапИд.Выполнить();
		
		Если Не РезИд.Пустой() Тогда
			#Если Клиент Тогда
				Сообщить("Документ ID " + ДокументТСД.Ид + " от " + Формат(ДокументТСД.ДатаСоздания, "ДЛФ=DD") + " уже был загружен!"); 
			#КонецеСли
			СписокИд.Добавить(ДокументТСД.Ид);
			Продолжить;
		КонецеСли;	
		
		
		Д = Документы.ЗагрузкаСТСД.СоздатьДокумент();
		
		Д.ИмяДокумента      = ДокументТСД.Ид;
		Д.ДатаДокумента = ДокументТСД.ДатаСоздания;
		Д.Ид_Документа   = ДокументТСД.Ид;
		Д.Изменен       = ДокументТСД.Изменен;
		Д.Завершен      = ДокументТСД.Завершен;
		Д.Пользователь = ДокументТСД.ИмяПользователя;
		Д.Ид_Терминала = ДокументТСД.DeviceId;
		Д.IP          = ДокументТСД.DeviceIP;
		Д.СтрокФакт   = ДокументТСД.СтрокиФакт_Количество;
		Д.ТерминалПриема = Справочники.РегиональныеТерминалы.МоскваСтриж;
		Если Склад <> Неопределено Тогда
			Д.Склад = Склад;			
			// Михушкин - 01.06.2017 - костыль для Терминала доставки по Питеру --->> 
			Если Склад = Справочники.Склады.НайтиПоКоду("000000006") Тогда	
				Д.ТерминалПриема = Справочники.РегиональныеТерминалы.СПбСтриж;			
			КонецЕсли;
			// <<--- Михушкин 
		КонецЕсли;	
		
		Скл = Неопределено;
		Если ЗначениеЗаполнено(Склад) Тогда
			Скл = Склад.Ссылка;
		КонецЕсли;	
		
		Д.ЛинейкаИзмеренияГабаритов = lem.ПолучитьАктуальнуюЛинейкуИзмерененияГабаритов(Скл);
		Если СерверТСД <> Неопределено Тогда
			Д.СерверТСД = СерверТСД;
		КонецеСли;	
		
		Сообщить(ДокументТСД.Ид);
		ТекЗаказ = Неопределено;
		ФлПогрузкаВАвто = Ложь;
		ФлПогрузкаВАвтоНезагруженныеЗаказы = Ложь;
		АктуальныйРежимТСД = Неопределено;
		
		
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ид", ДокументТСД.Ид);
		
		МассивСтрокТаблицыДокумента = ТЧДокументовТСДНаСервере.НайтиСтроки(ПараметрыОтбора);

		
		Для Инд1 = 0 По МассивСтрокТаблицыДокумента.Количество() - 1 Цикл
			
			//--- бао СтрокаТаблицыДокумента = ДокументТСД["СтрокиФакт"].Элемент(Инд1);
			
			СтрокаТаблицыДокумента = МассивСтрокТаблицыДокумента[Инд1];	
			
			Сообщить(Строка(Инд1));
			Если СтрокаТаблицыДокумента.ProductID = "*" Тогда
				Шк = ПолучитьШКИзСтрокиДокумента(СтрокаТаблицыДокумента);
				С_ШК = lem.ПроверкаШКНаСервисный(ШК);
				
				Если С_ШК <> Неопределено Тогда					
					АктуальныйРежимТСД = С_ШК;
					// МАС - 20.07.2017 - №1428 --->> 
					НСервШК = Д.СервисныеШК.Добавить();
					НСервШК.Режим = С_ШК;
					НСервШК.Штрихкод = ШК;				
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвтоНезагруженныеЗаказы Тогда		
						ФлПогрузкаВАвтоНезагруженныеЗаказы = Истина;											
					КонецЕсли;
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто Тогда		
						ФлПогрузкаВАвто = Истина;											
					КонецЕсли;
					// <<--- МАС 	
					
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПриездАвтоКомитента Тогда
						Д.ЭтоПриходПринципала = Истина;
						Продолжить;
					Иначе	
						ТекТипЗагрузки = С_ШК;
						Если СтрДлина(ШК) <> 12 И Лев(ШК, 7) <> "3100000" Тогда
							Продолжить;
						КонецеСли;	
					КонецеСли;	
				КонецеСли;	
				Нов = Д.Штрихкоды.Добавить();
				Нов.Штрихкод = Шк;
				Нов.КоличествоМест = Число(СтрокаТаблицыДокумента.КоличествоФакт);
				НайЗак = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
				Нов.Вес = Число(СтрокаТаблицыДокумента.weight);
				Нов.ДатаВремя = СтрокаТаблицыДокумента.TimeStamp;
				Нов.Флаг = СтрокаТаблицыДокумента.Tag;
				Нов.НеизвестныйТовар = Истина;
					
                Если ЗначениеЗаполнено(ШК) Тогда
                    Если Лев(Шк,2) = "37" И (СтрДлина(Шк) = 12 Или СтрДлина(Шк) = 13) Тогда
                        Шк = Прав(ШК,СтрДлина(Шк)-2); //убираем 37
                        Шк = Формат(Число(Шк),"ЧГ="); //убираем 0
                        Шк = Лев(ШК,СтрДлина(Шк)-1);  //убираем контрольный символ
                        НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Шк); //ищем реализацию по номеру
                    Иначе
                        НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Шк);
                    КонецЕсли;
					
					Если Найзак.Пустая() Тогда
						НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", Шк);
					КонецеСли;
					
					Если Найзак.Пустая() И СтрДлина(ШК) <> 6 Тогда
						НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", Лев(Шк, СтрДлина(ШК) - 2));
					КонецеСли;	
					
					Нов.Заказ = НайЗак.Ссылка;
					Если Найзак.Пустая() Тогда											
						ЗапросШК = Новый Запрос("ВЫБРАТЬ
						                        |	ШтрихкодыЗаказов.Заказ
						                        |ИЗ
						                        |	РегистрСведений.ШтрихкодыЗаказов КАК ШтрихкодыЗаказов
						                        |ГДЕ
						                        |	ШтрихкодыЗаказов.Штрихкод = &Штрихкод");
						ЗапросШК.УстановитьПараметр("Штрихкод", ШК);
						РезШК = ЗапросШК.Выполнить().Выбрать();
						
						Если РезШК.Следующий() Тогда					
							Нов.Заказ = РезШК.Заказ;	
						КонецЕсли;	
					КонецЕсли;							
				КонецеСли;	
				
				Если ЗначениеЗаполнено(ШК) Тогда				
					НайБэйдж = Справочники.БэйджиСотрудников.НайтиПоРеквизиту("КодСотрудника", ШК);	
					Если НЕ НайБэйдж.Пустая() Тогда
						Нов = Д.БэйджиСотрудников.Добавить();
						Нов.БейджСотрудника = НайБэйдж;
						Нов.Сотрудник = НайБэйдж.Владелец;
						Если ТипЗнч(Нов.Сотрудник) = Тип("СправочникСсылка.новаВодители") Тогда					
							Нов.ТипУчастникаЭкипажа = Перечисления.УчастникЭкипажа.Водитель;						
						ИначеЕсли ТипЗнч(Нов.Сотрудник) = Тип("СправочникСсылка.новаЭкспедиторы") Тогда					
							Нов.ТипУчастникаЭкипажа = Перечисления.УчастникЭкипажа.Экспедитор;			
						КонецЕсли;		
					КонецЕсли;			
				КонецЕсли;
			
				Если Не НайЗак.Пустая() Тогда
					Нов.Контрагент = НайЗак.ВладелецТовара;
					НайДост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
					Струк = Новый Структура;
					Струк.Вставить("Доставка", НайДост.Ссылка);
					НайСт = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(Д.Дата, Струк);
					Нов.РезультатДоставки = НайСт.РезультатДоставки;
					Нов.ПричинаНевыполнения = НайСт.ПричинаНевыполнения;
					Нов.Сумма = НайЗак.Товары.Итог("Сумма");
					Нов.ВнешнийНомерЗаказа = НайЗак.НомерВнешнегоЗаказа;
				КонецЕСли;	
				ТекЗаказ = Нов.Заказ;
				
				Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
				Если Дост.Пустая() Тогда
					Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
				Иначе
					Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
				КонецеСли;	
				
			Иначе
				Barcode = "";
				Шк = ПолучитьШКИзСтрокиДокумента(СтрокаТаблицыДокумента, Barcode);
				С_ШК = lem.ПроверкаШКНаСервисный(ШК);
				Если С_ШК <> Неопределено Тогда
					АктуальныйРежимТСД = С_ШК;
					НСервШК = Д.СервисныеШК.Добавить();
					НСервШК.Режим = С_ШК;
					НСервШК.Штрихкод = ШК;				
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвтоНезагруженныеЗаказы Тогда		
						ФлПогрузкаВАвтоНезагруженныеЗаказы = Истина;											
					КонецЕсли;
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто Тогда		
						ФлПогрузкаВАвто = Истина;											
					КонецЕсли;
					
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПриездАвтоКомитента Тогда
						Д.ЭтоПриходПринципала = Истина;
						Продолжить;
					Иначе	
						ТекТипЗагрузки = С_ШК;
						Если СтрДлина(ШК) <> 12 И Лев(ШК, 7) <> "3100000" Тогда
							Продолжить;
						КонецеСли;	
					КонецеСли;
				КонецеСли;	
				

				Если ЗначениеЗаполнено(ШК) Тогда				
					НайБэйдж = Справочники.БэйджиСотрудников.НайтиПоРеквизиту("КодСотрудника", ШК);	
					Если НЕ НайБэйдж.Пустая() Тогда
						Нов = Д.БэйджиСотрудников.Добавить();
						Нов.БейджСотрудника = НайБэйдж;
						Нов.Сотрудник = НайБэйдж.Владелец;
						Если ТипЗнч(Нов.Сотрудник) = Тип("СправочникСсылка.новаВодители") Тогда					
							Нов.ТипУчастникаЭкипажа = Перечисления.УчастникЭкипажа.Водитель;						
						ИначеЕсли ТипЗнч(Нов.Сотрудник) = Тип("СправочникСсылка.новаЭкспедиторы") Тогда					
							Нов.ТипУчастникаЭкипажа = Перечисления.УчастникЭкипажа.Экспедитор;			
						КонецЕсли;		
					КонецЕсли;			
				КонецЕсли;
				
				НайГабарит = ШтрихкодыГабаритов.Найти(Шк);
				
				Если НайГабарит = Неопределено Тогда
					Нов = Д.Штрихкоды.Добавить();
					НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(СокрЛП(Шк));
					Нов.Заказ = НайЗак.Ссылка;
					
					Если Найзак.Пустая() Тогда											
						ЗапросШК = Новый Запрос("ВЫБРАТЬ
						|	ШтрихкодыЗаказов.Заказ
						|ИЗ
						|	РегистрСведений.ШтрихкодыЗаказов КАК ШтрихкодыЗаказов
						|ГДЕ
						|	ШтрихкодыЗаказов.Штрихкод = &Штрихкод");
						ЗапросШК.УстановитьПараметр("Штрихкод", Barcode);
						РезШК = ЗапросШК.Выполнить().Выбрать();
						
						Если РезШК.Следующий() Тогда					
							Нов.Заказ = РезШК.Заказ;	
						КонецЕсли;	
					КонецЕсли;		
					
					ТекЗаказ = Нов.Заказ;	
					Нов.Штрихкод = Barcode;
					
					Нов.КоличествоМест = СтрокаТаблицыДокумента.СтрокиФакт_Количество;
					Нов.Вес = Число(СтрокаТаблицыДокумента.weight);
					Нов.ДатаВремя = СтрокаТаблицыДокумента.TimeStamp;
					Если Не НайЗак.Пустая() Тогда
						Нов.Контрагент = НайЗак.ВладелецТовара;
						НайДост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
						Струк = Новый Структура;
						Струк.Вставить("Доставка", НайДост.Ссылка);
						НайСт = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(Д.Дата, Струк);
						Нов.РезультатДоставки = НайСт.РезультатДоставки;
						Нов.ПричинаНевыполнения = НайСт.ПричинаНевыполнения;
						Нов.Сумма = НайЗак.Товары.Итог("Сумма");						
						Нов.ВнешнийНомерЗаказа = НайЗак.НомерВнешнегоЗаказа;
					КонецЕСли;	
					
					Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
					Если Дост.Пустая() Тогда
						Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
					Иначе
						Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
					КонецеСли;
				Иначе
					lem.ДобавитьШКИзмерения(ТабИзмерений, ШтрихкодыГабаритов, ШК, ТекЗаказ, Д.ИзмерениеГабаритов);
				КонецеСли;
			КонецЕСли;	
		КонецЦикла;
		Д.ТипЗагрузкиТСД = ТекТипЗагрузки;
		Если Д.ТипЗагрузкиТСД <> Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRouteСВесом Тогда

		Иначе
			Если СерверТСД.СчитыватьВес Тогда
				Д.СчитыватьВес = Истина;
				Д.ЭлектронныеВесы = СерверТСД.Весы;
			КонецеСли;	
		КонецеСли;	
		
		
		//обработка габаритов
		Если ТабИзмерений.Количество() <> 0 Тогда
			Для Каждого ТекИзм Из ТабИзмерений Цикл
				Если ТекИзм.Отмена Тогда
					Продолжить;
				КонецеСли;
				
				Най = Д.Штрихкоды.Найти(ТекИзм.Заказ);
				Най.СканированныйОбъем = ТекИзм.Произведение;
			КонецЦикла;	
		КонецеСли;	
		
		Если АктуальныйРежимТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто И НЕ Д.БэйджиСотрудников.Количество() Тогда			
			Д.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
			Д.ВспомогательныйРежимТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;	
		ИначеЕсли НЕ ФлПогрузкаВАвто И Д.БэйджиСотрудников.Количество() Тогда	
			Д.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
			Д.ВспомогательныйРежимТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвтоФактическая;
		ИначеЕсли НЕ ФлПогрузкаВАвто И Д.БэйджиСотрудников.Количество() И ФлПогрузкаВАвтоНезагруженныеЗаказы Тогда	
			Д.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
			Д.ВспомогательныйРежимТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвтоНезагруженныеЗаказы;
		КонецЕсли;
		
		
		Д.Дата = ТекущаяДата();
		
		Д.ДополнительныеСвойства.Вставить("НомерПотока", 1);
		Д.ДополнительныеСвойства.Вставить("Каталог", "ЗагрузкаДанныхСТСД");
		bao.ВернутьСообщенияИзЛогаОтказа(Д.ДополнительныеСвойства);

		
		Д.Записать(РежимЗаписиДокумента.Запись);
				
		Попытка	
		//	Если Д.ТипЗагрузкиТСД <> Перечисления.ТипыЗагрузкиТСД.ПриходOZONE Тогда
				Д.Записать(РежимЗаписиДокумента.Проведение);
			//КонецеСли;	
		Исключение
			СписокПолучателей = Новый Массив;
			Если ОбщегоНазначенияПривелигированный.ЭтоТестоваяБД() <> Истина Тогда
				СписокПолучателей.Добавить("v.yakurnov@strizh-logistic.ru");
				СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
			КонецЕсли;	
				
			//+++ БАО 06.06.2017 №966
			СписокПолучателей.Добавить("artur.borisov@strizh-logistic.ru");
			//--- БАО 06.06.2017 №966
			
			СообщениеОбОшибке = ОписаниеОшибки(); 

			//+++ БАО 28.07.2017 №1540 
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС +  bao.ВернутьСообщенияИзЛогаОтказа(Д.ДополнительныеСвойства); 

			//--- БАО 28.07.2017 №1540 
			Отпр = lem.ОтправитьСообщение(СписокПолучателей, "не провелся документ ЗагрузкаСТСД", "Причина: "+ СообщениеОбОшибке, , "Логистическая компания ""Стриж""");	

			pkv.ДобавитьВСписокОтложенногоПроведения(Д.Ссылка, СообщениеОбОшибке);
		КонецПопытки;
		
        //Серегин М.В. 14.05.2015 10:45:54 
        Если Д.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.НаборнаяВедомостьВозвраты Тогда
            smv.ЗаполнитьВзаимосвязьЗагрузкаСТСД(Д);
        КонецЕсли;
        //Серегин М.В. 14.05.2015 10:45:56
		КолЗагДок = КолЗагДок + 1;
		СписокИд.Добавить(ДокументТСД.Ид);
	КонецЦикла;	
	
	
	#Если Клиент Тогда
		Если КолЗагДок = 0 Тогда
			Сообщить("Отсутствуют документы к загрузке!");
		Иначе
			Сообщить("Загружено " + Строка(КолЗагДок) + " документов!");
		КонецеСли;	
	#КонецеСли
	
	Если УдалятьДокументыССервера <> Неопределено И УдалятьДокументыССервера  Тогда
		Если СписокИД.Количество() <> 0 Тогда    
			
			Фабрика = Прокси.ФабрикаXDTO;
			
			RemoveDocumentТип = Фабрика.Пакеты.Получить("http://cleverence.ru/EasyWarehouse").Получить("RemoveDocument");
			RemoveDocumentОбъект = Фабрика.Создать(RemoveDocumentТип);
			
			Для Каждого Строка Из СписокИД Цикл 
				
				Если НеОбработанныеДокументы.НайтиПоЗначению(Строка.Значение) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				RemoveDocumentОбъект.documentId = Строка.Значение;				
				Прокси.RemoveDocument(RemoveDocumentОбъект);
			
			КонецЦикла;
			
		КонецеСли;	
	КонецеСли;
    
    
	//---Объект.Драйвер.ОсвободитьРесурсы();

КонецФункции	

Функция СоздатьТЗ_СпискаДокументов(Прокси)	

	ТЗСпискаДокументов = Новый ТаблицаЗначений;
	
	ТЗСпискаДокументов.Колонки.Добавить("Ид");  //+
	ТЗСпискаДокументов.Колонки.Добавить("ТипДокумента");  //+
	ТЗСпискаДокументов.Колонки.Добавить("СтрокиПлан_Количество");
	ТЗСпискаДокументов.Колонки.Добавить("ДатаСоздания"); //++
	ТЗСпискаДокументов.Колонки.Добавить("Изменен"); //+
	ТЗСпискаДокументов.Колонки.Добавить("Завершен"); //+
	ТЗСпискаДокументов.Колонки.Добавить("ИмяПользователя"); //+
	ТЗСпискаДокументов.Колонки.Добавить("DeviceId"); //+
	ТЗСпискаДокументов.Колонки.Добавить("DeviceIP"); //+
	ТЗСпискаДокументов.Колонки.Добавить("СтрокиФакт_Количество");
	
	СписокДокументовХМЛ = Прокси.GetAllDocuments("");
	
	ЧтениеXML = Новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(СписокДокументовХМЛ);
	
	//<?xml version="1.0" encoding="utf-8"?>
	//<DocumentCollection xmlns:clr="http://schemas.cleverence.ru/clr" capacity="8" count="3">
	//<Document createDate="2017-08-16T16:20:42.9326710+03:00" lastChangeDate="2017-08-16T16:20:50.2466710+03:00" deviceId="WIN-468099DB664EFFAA2D8749F84F1ECFB5" deviceIP="192.168.5.83" deviceName="" documentTypeName="СобратьШК" id="new_ee6d6612-4a47-449d-a546-c34f2bdce650" name="Сбор штрихкодов от 16.08.17 в 16:20" appointment="оператор" userId="оператор" userName="оператор" warehouseId="1">
	//		<Fields count="0" />
	//		<States count="1">
	//			<DocumentState 
	//				finished="True" finishedDate="2017-08-16T16:20:49.9456710+03:00" inProcess="False" inProcessDate="2017-08-16T16:20:42.9326710+03:00" modified="True" modifiedDate="2017-08-16T16:20:47.6626710+03:00" processingTime="00:00:06.9410000" userId="оператор" />
	//		</States>
	//		<Tables count="0" isLazy="True" lazyCount="0" />
	//		<DeclaredItems count="0" isLazy="True" lazyCount="0" />
	//		<CurrentItems count="0" isLazy="True" lazyCount="1" /></Document>
	//<Document createDate="2017-08-16T16:53:26.8976277+03:00" lastChangeDate="2017-08-16T16:53:35.4934872+03:00" deviceId="WIN-468099DB664EFFAA2D8749F84F1ECFB5" deviceIP="192.168.5.83" deviceName="" documentTypeName="СобратьШК" id="new_12447f73-ffc6-46e4-8e93-644b373d94df" name="Сбор штрихкодов от 16.08.17 в 16:53" appointment="оператор" userId="оператор" userName="оператор" warehouseId="1"><Fields count="0" /><States count="1"><DocumentState finished="True" finishedDate="2017-08-16T16:53:35.2094588+03:00" inProcess="False" inProcessDate="2017-08-16T16:53:26.8986278+03:00" modified="True" modifiedDate="2017-08-16T16:53:32.6242003+03:00" processingTime="00:00:08.2488248" userId="оператор" /></States><Tables count="0" isLazy="True" lazyCount="0" /><DeclaredItems count="0" isLazy="True" lazyCount="0" /><CurrentItems count="0" isLazy="True" lazyCount="1" /></Document>
	//<Document createDate="2017-08-16T16:53:38.9628341+03:00" lastChangeDate="2017-08-16T16:53:46.8416219+03:00" deviceId="WIN-468099DB664EFFAA2D8749F84F1ECFB5" deviceIP="192.168.5.83" deviceName="" documentTypeName="СобратьШК" id="new_11c37029-576b-4cea-ad84-55a4480c6612" name="Сбор штрихкодов от 16.08.17 в 16:53" appointment="оператор" userId="оператор" userName="оператор" warehouseId="1"><Fields count="0" /><States count="1"><DocumentState finished="True" finishedDate="2017-08-16T16:53:46.5615939+03:00" inProcess="False" inProcessDate="2017-08-16T16:53:38.9628341+03:00" modified="True" modifiedDate="2017-08-16T16:53:44.4203798+03:00" processingTime="00:00:07.5237523" userId="оператор" /></States><Tables count="0" isLazy="True" lazyCount="0" /><DeclaredItems count="0" isLazy="True" lazyCount="0" /><CurrentItems count="0" isLazy="True" lazyCount="1" /></Document>
	//</DocumentCollection>
	
	Пока ЧтениеXML.Прочитать() Цикл
				
		Если ЧтениеXML.Имя = "Document" И ЧтениеXML.ТипУзла	= ТипУзлаXML.НачалоЭлемента Тогда
			
			СтрокаТЗ = ТЗСпискаДокументов.Добавить();
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
				
				Если ЧтениеXML.Имя = "createDate" Тогда
					
					ДатаСтр = Лев(ЧтениеXML.Значение, СтрНайти(ЧтениеXML.Значение, ".")-1);
					ДатаСтр = СтрЗаменить(ДатаСтр, "-","");
					ДатаСтр = СтрЗаменить(ДатаСтр, "T","");
					ДатаСтр = СтрЗаменить(ДатаСтр, ":","");
					СтрокаТЗ.ДатаСоздания = Дата(ДатаСтр); 
					
				ИначеЕсли ЧтениеXML.Имя = "deviceIP" Тогда
	
					СтрокаТЗ.deviceIP = ЧтениеXML.Значение;	
					
				ИначеЕсли ЧтениеXML.Имя = "deviceId" Тогда
	
					СтрокаТЗ.deviceId = ЧтениеXML.Значение;	
					
				ИначеЕсли ЧтениеXML.Имя = "id" Тогда
	
					СтрокаТЗ.Ид = ЧтениеXML.Значение;
					
				ИначеЕсли ЧтениеXML.Имя = "userName" Тогда
	
					СтрокаТЗ.ИмяПользователя = ЧтениеXML.Значение;	
					
				ИначеЕсли ЧтениеXML.Имя = "documentTypeName" Тогда
	
					СтрокаТЗ.ТипДокумента = ЧтениеXML.Значение;	
					
				КонецЕсли;
				
			КонецЦикла;	
			
		ИначеЕсли ЧтениеXML.Имя = "DocumentState" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
 	
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
				
				Если ЧтениеXML.Имя = "finished" И ЧтениеXML.Значение = "True" Тогда
					
					СтрокаТЗ.Завершен = Истина;
					
				КонецЕсли;	
	
				Если ЧтениеXML.Имя = "modified" И ЧтениеXML.Значение = "True" Тогда
					
					СтрокаТЗ.Изменен = Истина;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		ИначеЕсли ЧтениеXML.Имя = "DeclaredItems" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			isLazy = False;
 	
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
				
				Если ЧтениеXML.Имя = "count" Тогда
					
					СтрокаТЗ.СтрокиПлан_Количество = Число(ЧтениеXML.Значение);
					
				КонецЕсли;	
	
				Если ЧтениеXML.Имя = "isLazy" И ЧтениеXML.Значение = "True" Тогда
					
					isLazy = Истина;
					
				КонецЕсли;	
				
				Если ЧтениеXML.Имя = "lazyCount" И isLazy Тогда
					
					СтрокаТЗ.СтрокиПлан_Количество = Число(ЧтениеXML.Значение);
					
				КонецЕсли;	
				
			КонецЦикла;	
	
		ИначеЕсли ЧтениеXML.Имя = "CurrentItems" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			isLazy = False;
 	
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
				
				Если ЧтениеXML.Имя = "count" Тогда
					
					СтрокаТЗ.СтрокиФакт_Количество = Число(ЧтениеXML.Значение);
					
				КонецЕсли;	
	
				Если ЧтениеXML.Имя = "isLazy" И ЧтениеXML.Значение = "True" Тогда
					
					isLazy = Истина;
					
				КонецЕсли;	
				
				Если ЧтениеXML.Имя = "lazyCount" И isLazy Тогда
					
					СтрокаТЗ.СтрокиФакт_Количество = Число(ЧтениеXML.Значение);
					
				КонецЕсли;	
				
			КонецЦикла;	
				
		КонецЕсли;	
			
	КонецЦикла; 
	
	Возврат ТЗСпискаДокументов;
	
КонецФункции	

Функция СоздатьТЗ_ТЧДокументов(ДокументыТСДНаСервере, Прокси, НеОбработанныеДокументы) 
	
	ТЗТЧДокументов = Новый ТаблицаЗначений;
	
	ТЗТЧДокументов.Колонки.Добавить("Ид");  
	ТЗТЧДокументов.Колонки.Добавить("code");
	ТЗТЧДокументов.Колонки.Добавить("barcode"); 
	ТЗТЧДокументов.Колонки.Добавить("weight"); 
	ТЗТЧДокументов.Колонки.Добавить("TimeStamp"); 
	ТЗТЧДокументов.Колонки.Добавить("Tag"); 
	ТЗТЧДокументов.Колонки.Добавить("ProductID"); 
	ТЗТЧДокументов.Колонки.Добавить("КоличествоФакт"); 
	
	Для Каждого ДокументТСД Из ДокументыТСДНаСервере Цикл  
		
		Попытка
			
			ТЧДокументаХМЛ = Прокси.GetDocumentById(ДокументТСД.Ид); 
	
			ЧтениеXML = Новый ЧтениеXML;
	
			ЧтениеXML.УстановитьСтроку(ТЧДокументаХМЛ);

			
			//<?xml version="1.0" encoding="utf-8"?>
			//<Document xmlns:clr="http://schemas.cleverence.ru/clr" createDate="2017-08-16T16:20:42.9326710+03:00" lastChangeDate="2017-08-16T16:20:50.2466710+03:00" deviceId="WIN-468099DB664EFFAA2D8749F84F1ECFB5" deviceIP="192.168.5.83" deviceName="" documentTypeName="СобратьШК" id="new_ee6d6612-4a47-449d-a546-c34f2bdce650" name="Сбор штрихкодов от 16.08.17 в 16:20" appointment="оператор" userId="оператор" userName="оператор" warehouseId="1">
			//	<Fields count="0" />
			//	<States count="1">
			//		<DocumentState finished="True" finishedDate="2017-08-16T16:20:49.9456710+03:00" inProcess="False" inProcessDate="2017-08-16T16:20:42.9326710+03:00" modified="True" modifiedDate="2017-08-16T16:20:47.6626710+03:00" processingTime="00:00:06.9410000" userId="оператор" />
			//	</States>
			//	<Tables count="0" isLazy="False" lazyCount="0" />
			//		<DeclaredItems count="0" isLazy="False" lazyCount="0" />
			//		<CurrentItems count="1" isLazy="False" lazyCount="0">
			//			<DocumentItem createdBy="Device" currentQuantity="1" declaredQuantity="0" expiredDate="0001-01-01T00:00:00.0000000" firstCellId="" packingId="шт" productId="*" registeredDate="0001-01-01T00:00:00.0000000" secondCellId="" uid="3bf99b03-25e8-43e3-af86-04b74fd41529">
			//				<Fields capacity="8" count="5">
			//					<FieldValue fieldName="code">
			//						<Value clr:Type="String">ЙЦУЙЦУЙЦ</Value>
			//					</FieldValue>
			//					<FieldValue fieldName="barcode">
			//						<Value clr:Type="String">ЙЦУЙЦУЙЦ</Value>
			//					</FieldValue>
			//					<FieldValue fieldName="descr">
			//						<Value clr:Type="String"></Value>
			//					</FieldValue>
			//					<FieldValue fieldName="serial">
			//						<Value clr:Type="String"></Value>
			//					</FieldValue>
			//					<FieldValue fieldName="price">
			//						<Value clr:Type="Decimal">0</Value>
			//					</FieldValue>
			//				</Fields>
			//			</DocumentItem>
			//		</CurrentItems>
			//	</Document>	
			
			БылоDocumentItem = Ложь;
			
			Пока ЧтениеXML.Прочитать() Цикл
				
				Если ЧтениеXML.Имя = "DocumentItem" И ЧтениеXML.ТипУзла	= ТипУзлаXML.НачалоЭлемента Тогда
					
					БылоDocumentItem = Истина;
					
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
						
						Если ЧтениеXML.Имя = "currentQuantity" Тогда
														
							СтрокаТЗ = ТЗТЧДокументов.Добавить();
							
							СтрокаТЗ.Ид = ДокументТСД.Ид; 

							СтрокаТЗ.КоличествоФакт = Число(ЧтениеXML.Значение); 
							
						КонецЕсли;	
						
						Если ЧтениеXML.Имя = "productId" Тогда
							
							СтрокаТЗ.productId = ЧтениеXML.Значение;	
							
						КонецЕсли;	
						
					КонецЦикла;	
					
				ИначеЕсли БылоDocumentItem И ЧтениеXML.Имя = "Fields" И ЧтениеXML.ТипУзла	= ТипУзлаXML.НачалоЭлемента Тогда
					
					БылоValue = Ложь;
					
					Пока ЧтениеXML.Прочитать() И Не (ЧтениеXML.Имя = "Fields" И ЧтениеXML.ТипУзла	= ТипУзлаXML.КонецЭлемента) Цикл
						
						Если ЧтениеXML.Имя  = "FieldValue" Тогда
							
							ЧтениеXML.ПрочитатьАтрибут();
							
							ИмяКолонки = ЧтениеXML.Значение;
							
						ИначеЕсли ЧтениеXML.Имя = "Value" И ЧтениеXML.ТипУзла	= ТипУзлаXML.НачалоЭлемента Тогда 
							
							БылоValue = Истина;
							
						ИначеЕсли БылоValue Тогда
							
							Если   ИмяКолонки = "code" Тогда
								СтрокаТЗ.code = ЧтениеXML.Значение;
							КонецЕсли;
							
							Если   ИмяКолонки = "barcode" Тогда
								СтрокаТЗ.barcode = ЧтениеXML.Значение;
							КонецЕсли;
							
							Если   ИмяКолонки = "weight" Тогда
								СтрокаТЗ.weight = ЧтениеXML.Значение;
							КонецЕсли;
							
							Если   ИмяКолонки = "TimeStamp" Тогда
								
								ДатаСтр = Лев(ЧтениеXML.Значение, СтрНайти(ЧтениеXML.Значение, ".")-1);
								ДатаСтр = СтрЗаменить(ДатаСтр, "-","");
								ДатаСтр = СтрЗаменить(ДатаСтр, "T","");
								ДатаСтр = СтрЗаменить(ДатаСтр, ":","");
								СтрокаТЗ.TimeStamp = Дата(ДатаСтр); 
								
							КонецЕсли;
							
							Если   ИмяКолонки = "tag" Тогда
								СтрокаТЗ.Tag = ЧтениеXML.Значение;
							КонецЕсли;
							
							БылоValue = Ложь;
							
						КонецЕсли;	
						
					КонецЦикла;	
					
				КонецЕсли;	
				
			КонецЦикла; 			
			
		Исключение
			
			НеОбработанныеДокументы.Добавить(ДокументТСД.Ид);
			
		КонецПопытки;
		
	КонецЦикла; 
	
	ТЗТЧДокументов.Свернуть("Ид, code, barcode, weight, TimeStamp, Tag, ProductID", "КоличествоФакт");

	Возврат ТЗТЧДокументов;
	
КонецФункции	

Функция ПолучитьШКИзСтрокиДокумента(СтрокаДокументаТСД, Barcode = "") Экспорт  
	
	ШК = СтрокаДокументаТСД.code;
	Если ШК = Неопределено Или ПустаяСтрока(ШК) Или
		ШК = "00000000" Или ШК = "0" Или Найти(ШК, "{") > 0 Тогда
			ШК = СтрокаДокументаТСД.barcode;
	КонецЕсли;
	Barcode = СтрокаДокументаТСД.barcode;
	
	Если ШК <> Неопределено Тогда
		Инд = Найти(ШК, "|");
		Если Инд > 0 Тогда
			ШК = Лев(ШК, Инд-1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШК;
	
КонецФункции

Функция ПроверитьПодключение(СерверТСД) Экспорт 
	
	Попытка
		
		Строка = lem.ПолучитьСтрокуПодключения(СерверТСД.СтрокаПодключения);
		Прокси = WSСсылки.Cleverence.СоздатьWSПрокси("http://cleverence.ru/EasyWarehouse", "DataStorage", "DataStorageSoap",,,,Строка);
		Фабрика = Прокси.ФабрикаXDTO;
		
		GetVersionТип = Фабрика.Пакеты.Получить("http://cleverence.ru/EasyWarehouse").Получить("GetVersion");
		GetVersionОбъект = Фабрика.Создать(GetVersionТип);
		
		GetVersion = Прокси.GetVersion(GetVersionОбъект);
		
		Сообщить("Проверка соединения с ТСД прошла успешно! (" + СокрЛП(СерверТСД.Наименование) + "). Версия сервера " + GetVersion.GetVersionResult);	
		
	Исключение	
		
			Сообщить("Соединение с ТСД не установлено! (" + СокрЛП(СерверТСД.Наименование) + ") Ошибка: " + ОписаниеОшибки());
		
	КонецПопытки;	

КонецФункции	

Процедура РегламентЗагрузкаДанныхСТСД(УдалятьДокументыССервера = Неопределено) Экспорт
	//Ид = Константы.ИдентификаторТСДДляРегламентнойЗагрузки.Получить();	
	//ЗагрузкаДанныхСТСД(Ид);
	//
	
	Если Константы.ФлагЗагрузкиДанныхСТСД.Получить() Тогда
		#Если Клиент Тогда
			Сообщить("В данный момент уже производится загрузка данных с ТСД!", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецеСли;
	
	Константы.ФлагЗагрузкиДанныхСТСД.Установить(Истина);
	
	Попытка
		Зап = Новый Запрос;
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	СерверыWiFiТСД.ИдентификаторТСД,
		            |	СерверыWiFiТСД.Ссылка КАК Сервер,
		            |	СерверыWiFiТСД.ПроверятьПодключение,
		            |	МестонахождениеТСДСрезПоследних.Склад
		            |ИЗ
		            |	Справочник.СерверыWiFiТСД КАК СерверыWiFiТСД
		            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеТСД.СрезПоследних КАК МестонахождениеТСДСрезПоследних
		            |		ПО (МестонахождениеТСДСрезПоследних.ТСД = СерверыWiFiТСД.Ссылка)
		            |ГДЕ
		            |	СерверыWiFiТСД.ПометкаУдаления = ЛОЖЬ
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	СерверыWiFiТСД.Код";
		
		Рез = Зап.Выполнить().Выгрузить();
		Для Каждого Тек Из Рез Цикл
			ЗагрузкаСТСДЧерезВебСервер(Тек.ИдентификаторТСД, Тек.Сервер, УдалятьДокументыССервера, Тек.Склад);
		КонецЦикла;	
		Константы.ФлагЗагрузкиДанныхСТСД.Установить(Ложь);
	Исключение
		Константы.ФлагЗагрузкиДанныхСТСД.Установить(Ложь);
	КонецПопытки;
КонецПроцедуры	

