
Функция ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину) Экспорт
	//ВывестиСообщение("======= Запрос =======");
	//ВывестиСообщение(ТекстЗапроса);
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = ПодключениеКМагазину;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandType = 1;
	Cmd.CommandTimeout = 120;
	Возврат Cmd.Execute();
КонецФункции // ЗапросКИнтернетМагазину()

Процедура РегламентЗагрузкаКалендарейДоставкиИзАдминки() Экспорт
	
	ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	ТекстЗапроса = "SELECT
	|deliveryCalendar.id AS id,
	|deliveryCalendar.name AS name,
	|deliveryCalendar.CountOfDays AS CountOfDays,
	|deliveryCalendarDays.day
	|FROM
	|deliveryCalendar deliveryCalendar (NOLOCK)
	|INNER JOIN
	|deliveryCalendarDays deliveryCalendarDays (NOLOCK) on deliveryCalendar.id = deliveryCalendarDays.deliveryCalendarId";
	
	RS = ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
	
	ТаблицаДанных = Евген.СоздатьТаблицу(RS, "id_Ч,name,CountOfDays_Ч,day_Ч");
	
	Таблица_id = Новый ТаблицаЗначений;
	КолонкиТаблицы = Таблица_id.Колонки;
	КолонкиТаблицы.Добавить("idАдминки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	
	Для Каждого СтрокаКалендаря Из ТаблицаДанных Цикл
		Таблица_id.Добавить().idАдминки = СтрокаКалендаря.id_Ч;
	КонецЦикла;
	
	Таблица_id.Свернуть("idАдминки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица_id", Таблица_id);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица_id.idАдминки КАК idАдминки
	|ПОМЕСТИТЬ ВТ_idАдминки
	|ИЗ
	|	&Таблица_id КАК Таблица_id
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_idАдминки.idАдминки КАК idАдминки
	|ИЗ
	|	ВТ_idАдминки КАК ВТ_idАдминки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендариДоставки КАК КалендариДоставки
	|		ПО ВТ_idАдминки.idАдминки = КалендариДоставки.idАдминки
	|ГДЕ
	|	КалендариДоставки.idАдминки ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		СтруктураПоиска = Новый Структура("id_Ч");
		
		КоличествоДнейНедели = Перечисления.ДниНедели.Количество(); 
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска.id_Ч = Выборка.idАдминки;
			
			СтрокиДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДанных.Количество() Тогда
				СтрокаДанных = СтрокиДанных[0];
				Спр = Справочники.КалендариДоставки.СоздатьЭлемент();
				Спр.Наименование = СтрокаДанных.name;
				Спр.ДнейСМоментаПоступления = СтрокаДанных.CountOfDays_Ч;
				Спр.idАдминки = СтрокаДанных.id_Ч;
				Для Каждого СтрокаДанных Из СтрокиДанных Цикл
					ДеньДоставки = СтрокаДанных.day_Ч;
					Если ДеньДоставки > 0 И ДеньДоставки <= КоличествоДнейНедели Тогда
						ДеньДоставки = Перечисления.ДниНедели[ДеньДоставки - 1];
					Иначе
						ДеньДоставки = Неопределено;
					КонецЕсли;
					Спр.ДниДоставки.Добавить().ДеньНедели = ДеньДоставки;
				КонецЦикла;
				Спр.Записать();
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = "SELECT
	|deliveryTimeTable.SourcePlaceId AS SourcePlaceId,
	|deliveryTimeTable.DeliveryPlaceId AS DeliveryPlaceId,
	|deliveryTimeTable.zoneId AS zoneId,
	|deliveryTimeTable.DeliveryCalendarId AS DeliveryCalendarId,
	|deliveryTimeTable.id AS id
	|FROM
	|deliveryTimeTable deliveryTimeTable (NOLOCK)";
	
	RS = ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
	
	ТаблицаДанных = Евген.СоздатьТаблицу(RS, "SourcePlaceId_Ч,DeliveryPlaceId_Ч,zoneId_Ч,DeliveryCalendarId_Ч,id_Ч");
	
	ТипЧисло10 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10);
	
	ТаблицаКалендаря = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаКалендаря.Колонки;
	КолонкиТаблицы.Добавить("ТерминалОтгрузки", ТипЧисло10);
	КолонкиТаблицы.Добавить("ТерминалДоставки", ТипЧисло10);
	КолонкиТаблицы.Добавить("ЗонаДоставки", ТипЧисло10);
	КолонкиТаблицы.Добавить("Календарь", ТипЧисло10);
	КолонкиТаблицы.Добавить("idАдминки", ТипЧисло10);
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		СтрокаКалендаря = ТаблицаКалендаря.Добавить();
		СтрокаКалендаря.ТерминалОтгрузки = СтрокаДанных.SourcePlaceId_Ч;
		СтрокаКалендаря.ТерминалДоставки = СтрокаДанных.DeliveryPlaceId_Ч;
		СтрокаКалендаря.ЗонаДоставки = СтрокаДанных.zoneId_Ч;
		СтрокаКалендаря.Календарь = СтрокаДанных.DeliveryCalendarId_Ч;
		СтрокаКалендаря.idАдминки = СтрокаДанных.id_Ч;
	КонецЦикла;
	
	Период = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Календари", ТаблицаКалендаря);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Календари.ТерминалОтгрузки КАК ТерминалОтгрузки,
	|	Календари.ТерминалДоставки КАК ТерминалДоставки,
	|	Календари.ЗонаДоставки КАК ЗонаДоставки,
	|	Календари.Календарь КАК Календарь,
	|	Календари.idАдминки КАК idАдминки
	|ПОМЕСТИТЬ ВТ_Календари
	|ИЗ
	|	&Календари КАК Календари
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегиональныеТерминалы_Отгрузки.Ссылка КАК ТерминалОтгрузки,
	|	РегиональныеТерминалы_Доставки.Ссылка КАК ТерминалДоставки,
	|	ГруппыРайонов.Ссылка КАК ЗонаДоставки,
	|	КалендариДоставки.Ссылка КАК КалендарьДоставки,
	|	ВТ_Календари.idАдминки КАК idАдминки
	|ПОМЕСТИТЬ ВТ_КалендариАдминки
	|ИЗ
	|	ВТ_Календари КАК ВТ_Календари
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы_Отгрузки
	|		ПО ВТ_Календари.ТерминалОтгрузки = РегиональныеТерминалы_Отгрузки.Код
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы_Доставки
	|		ПО ВТ_Календари.ТерминалДоставки = РегиональныеТерминалы_Доставки.Код
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРайонов КАК ГруппыРайонов
	|		ПО ВТ_Календари.ЗонаДоставки = ГруппыРайонов.КодТарифа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КалендариДоставки КАК КалендариДоставки
	|		ПО ВТ_Календари.Календарь = КалендариДоставки.idАдминки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендариДоставокПоЗонамДоставкиСрезПоследних.ТерминалОтгрузки КАК ТерминалОтгрузки,
	|	КалендариДоставокПоЗонамДоставкиСрезПоследних.ТерминалДоставки КАК ТерминалДоставки,
	|	КалендариДоставокПоЗонамДоставкиСрезПоследних.ЗонаДоставки КАК ЗонаДоставки,
	|	КалендариДоставокПоЗонамДоставкиСрезПоследних.КалендарьДоставки КАК КалендарьДоставки
	|ПОМЕСТИТЬ ВТ_ИмеющиесяКалендари
	|ИЗ
	|	РегистрСведений.КалендариДоставокПоЗонамДоставки.СрезПоследних КАК КалендариДоставокПоЗонамДоставкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ВТ_КалендариАдминки.ТерминалОтгрузки КАК ТерминалОтгрузки,
	|	ВТ_КалендариАдминки.ТерминалДоставки КАК ТерминалДоставки,
	|	ВТ_КалендариАдминки.ЗонаДоставки КАК ЗонаДоставки,
	|	ВТ_КалендариАдминки.КалендарьДоставки КАК КалендарьДоставки,
	|	ВТ_КалендариАдминки.idАдминки КАК idАдминки
	|ИЗ
	|	ВТ_КалендариАдминки КАК ВТ_КалендариАдминки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИмеющиесяКалендари КАК ВТ_ИмеющиесяКалендари
	|		ПО ВТ_КалендариАдминки.ТерминалОтгрузки = ВТ_ИмеющиесяКалендари.ТерминалОтгрузки
	|			И ВТ_КалендариАдминки.ТерминалДоставки = ВТ_ИмеющиесяКалендари.ТерминалДоставки
	|			И ВТ_КалендариАдминки.ЗонаДоставки = ВТ_ИмеющиесяКалендари.ЗонаДоставки
	|			И ВТ_КалендариАдминки.КалендарьДоставки = ВТ_ИмеющиесяКалендари.КалендарьДоставки
	|ГДЕ
	|	ВТ_ИмеющиесяКалендари.ТерминалОтгрузки ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.КалендариДоставокПоЗонамДоставки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		
		НаборЗаписей.Загрузить(Результат.Выгрузить());
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры	