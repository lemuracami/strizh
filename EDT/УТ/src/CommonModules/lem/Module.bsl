
Процедура ЗагрузкаСИнтернетМагазина() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОтправитьНормальноеСообщениеАдминам(ТемаС, ТекстС, ФайлС = Неопределено) Экспорт
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МылоОдминов.ИмяОдмина,
	|	МылоОдминов.Мыло
	|ИЗ
	|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	
	Рез = Зап.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;	
	
	
	
	
	П = Новый ИнтернетПочтовыйПрофиль;
	П.АдресСервераSMTP = "smtp.yandex.ru";
	П.ПортSMTP = 465;
	П.ПользовательSMTP = "noreply@strizh-logistic.ru";
	П.ПарольSMTP = "4gbZuXsEaz";
	П.ИспользоватьSSLSMTP= Истина;
	П.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	Поч= Новый ИнтернетПочта;
	Поч.Подключиться(п);
	
	Сооб = Новый ИнтернетПочтовоеСообщение;
	Сооб.ИмяОтправителя = "Сервер 1С";
	Сооб.Отправитель = "noreply@strizh-logistic.ru";
	Сооб.Тема = ТемаС;
	Сооб.Тексты.Добавить(ТекстС);
	
	Для Каждого Тек Из Рез Цикл
		Сооб.Получатели.Добавить(СокрЛП(Тек.Мыло));
	КонецЦикла;
	
	попытка
		Поч.Послать(Сооб);
	Исключение
		Поч.Отключиться();
		Возврат;
	КонецПопытки;	
	
	
КонецПроцедуры	


Процедура ОтправитьНормальноеСообщениеАдминамИАнатолию(ТемаС, ТекстС, ФайлС = Неопределено) Экспорт
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МылоОдминов.ИмяОдмина,
	|	МылоОдминов.Мыло
	|ИЗ
	|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	
	Рез = Зап.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;	
	
	
	
	
	П = Новый ИнтернетПочтовыйПрофиль;
	П.АдресСервераSMTP = "smtp.yandex.ru";
	П.ПортSMTP = 465;
	П.ПользовательSMTP = "noreply@strizh-logistic.ru";
	П.ПарольSMTP = "4gbZuXsEaz";
	П.ИспользоватьSSLSMTP= Истина;
	П.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	Поч= Новый ИнтернетПочта;
	Поч.Подключиться(п);
	
	Сооб = Новый ИнтернетПочтовоеСообщение;
	Сооб.ИмяОтправителя = "Сервер 1С";
	Сооб.Отправитель = "noreply@strizh-logistic.ru";
	Сооб.Тема = ТемаС;
	Сооб.Тексты.Добавить(ТекстС);
	
	Для Каждого Тек Из Рез Цикл
		Сооб.Получатели.Добавить(СокрЛП(Тек.Мыло));
	КонецЦикла;
	//Сооб.Получатели.Добавить("a.sadovnikov@ts-work.ru");
	
	попытка
		Поч.Послать(Сооб);
	Исключение
		Поч.Отключиться();
		Возврат;
	КонецПопытки;	
	
	
КонецПроцедуры	



Процедура ОтправитьСообщениеОдминам(ТемаС, ТекстС, ФайлС = Неопределено) Экспорт
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МылоОдминов.ИмяОдмина,
	|	МылоОдминов.Мыло
	|ИЗ
	|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	
	Рез = Зап.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 Тогда
		Возврат;
	КонецЕСли;	
	
	
	
	Для Каждого Тек Из Рез Цикл
		
		П = Новый ИнтернетПочтовыйПрофиль;
		П.АдресСервераSMTP = "smtp.yandex.ru";
		П.ПортSMTP = 465;
		П.ПользовательSMTP = "noreply@strizh-logistic.ru";
		П.ПарольSMTP = "4gbZuXsEaz";
		П.ИспользоватьSSLSMTP= Истина;
		П.АутентификацияSMTP = СпособSMTPАутентификации.Login;
		
		Поч= Новый ИнтернетПочта;
		Поч.Подключиться(п);
		
		Сооб = Новый ИнтернетПочтовоеСообщение;
		Сооб.ИмяОтправителя = "noreply@strizh-logistic.ru";
		Сооб.Отправитель = "noreply@strizh-logistic.ru";
		Сооб.Тема = "Ктулху Фхтагн, Одмин! (" + ТемаС + ")";
		Сооб.Тексты.Добавить("Пишет тебе сервер mslog-sql. Случилось несчастье, одмин " + Тек.ИмяОдмина + "! Описание несчастья: " + Символы.ПС + ТекстС);
		Сооб.Получатели.Добавить(СокрЛП(Тек.Мыло));
		
		попытка
			Поч.Послать(Сооб);
		Исключение
			Поч.Отключиться();
			Возврат;
		КонецПопытки;	
		
	КонецЦикла;	
	
	
КонецПроцедуры	

Функция ЗарегитьДокументУТЛ(Источник, Отказ) Экспорт
	//Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если Не Источник.ВыгружатьВБухгалтерию Тогда
	//	Возврат Ложь;
	//КонецеСли;	
	//
	//Выб = Справочники.НастройкиОбменаДанными.Выбрать();
	//НайВыб = Неопределено;
	//Пока Выб.Следующий() Цикл
	//	Если ТипЗнч(Выб.УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ОбменУТЛБух") Тогда
	//		НайВыб = Выб.УзелИнформационнойБазы.Ссылка;
	//		Прервать;
	//	КонецеСли;	
	//КонецЦикла;	
	//
	//
	//Если Не НайВыб = Неопределено Тогда
	//	Источник.ОбменДанными.Получатели.Добавить(НайВыб.Ссылка);
	//	Возврат Истина;
	//КонецеСли;	
	
КонецФункции // КоличествоВПроводку()

Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт
	Попытка
		Четн   = 0;
		Нечетн = 0;
		
		КоличествоИтераций = ?(Тип = 13, 6, 4);
		
		Для Индекс = 1 По КоличествоИтераций Цикл
			Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
			Иначе
				Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
			КонецЕсли;
			Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
		КонецЦикла;
		
		Если Тип = 13 Тогда
			Четн = Четн * 3;
		Иначе
			Нечетн = Нечетн * 3;
		КонецЕсли;
		
		КонтЦифра = 10 - (Четн + Нечетн) % 10;
		
		Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	Исключение
		Возврат "0";
	КонецПопытки;
КонецФункции // КонтрольныйСимволEAN()

Функция глСформироватьБарКодEAN13(код) Экспорт
	ПервыйФлаг = Число(Сред(код,1,1));
	левстр     = Сред(код,2,6);	
	правстр    = Сред(код,8,6);
	правкод = "";
	Для Поз = 1 По 6
		Цикл
		правкод = правкод + ЦифрыВБуквыНижнегоРегистра(Сред(правстр,Поз,1));
	КонецЦикла;
	//  Формируем левую часть кода в зависимости от значения ПервыйФлаг
	Если      ПервыйФлаг = 0
		Тогда //••• 0 ••• AAAAA •••
		левкод = "#!"+Лев(левстр,1)+Сред(левстр,2,1)+Сред(левстр,3,1)+Сред(левстр,4,1)+Сред(левстр,5,1)+
		Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 1
		Тогда //••• 1 ••• AABABB •••
		левкод = "$!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+
		Сред(левстр,4,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,5,1))+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 2
		Тогда //••• 2 ••• AABBAB •••
		левкод = "%!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+Сред(левстр,5,1)+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 3
		Тогда //••• 3 ••• AABBBA •••
		левкод = "&!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+ЦифрыВБуквыВерхнегоРегистра(Сред
		(левстр,5,1))+Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 4
		Тогда //••• 4 ••• ABAABB •••
		левкод = "'!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+
		Сред(левстр,4,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,5,1))+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 5
		Тогда //••• 5 ••• ABBAAB •••
		левкод = "(!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+Сред(левстр,4,1)+Сред(левстр,5,1)+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 6
		Тогда //••• 6 ••• ABBBAA •••
		левкод = ")!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+ЦифрыВБуквыВерхнегоРегистра(Сред
		(левстр,4,1))+Сред(левстр,5,1)+Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 7
		Тогда //••• 7 ••• ABABAB •••
		левкод = "*!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+Сред(левстр,5,1)+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 8
		Тогда //••• 8 ••• ABABBA •••
		левкод = "+!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+ЦифрыВБуквыВерхнегоРегистра(Сред
		(левстр,5,1))+Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 9
		Тогда //••• 9 ••• ABBABA •••
		левкод = ",!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+Сред(левстр,4,1)+
		ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,5,1))+Сред(левстр,6,1);
	КонецЕсли;
	// Возвращаем результат
	кодстр = левкод + "-" + правкод + "!";
	Возврат кодстр;
КонецФункции   

Функция ЦифрыВБуквыНижнегоРегистра(Цифра)
	БуквыНижнегоРегистра = "abcdefghij";
	Цифра = Число(Прав(Цифра,1));
	Стр = Сред(БуквыНижнегоРегистра, Цифра + 1, 1);
	Возврат Стр;
КонецФункции
//******************************************************************************** 
Функция ЦифрыВБуквыВерхнегоРегистра(Цифра)
	БуквыВерхнегоРегистра = "ABCDEFGHIJ";
	Цифра = Число(Прав(Цифра,1));
	Стр = Сред(БуквыВерхнегоРегистра, Цифра + 1, 1);
	Возврат Стр;
КонецФункции

Процедура ОткрытьФормуАдминки() Экспорт
	#Если Клиент Тогда
		ОткрытьФорму("ОбщаяФорма.ДанныеАдминки");
	#КонецЕсли
КонецПроцедуры	

Процедура ДополнитьМассивАдресов(Мас, ТипРассылки)
	//Если ТипРассылки = Перечисления.ТипыРассылки.ЛогистическаяРассылка Тогда
	//	Мас.Добавить("logist@strizh-logistic.ru");
	//ИначеЕсли ТипРассылки = Перечисления.ТипыРассылки.СкладскаяРассылка Тогда
	//	Мас.Добавить("sklad@strizh-logistic.ru");
	//	Мас.Добавить("tovaroved@strizh-logistic.ru");
	//КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПостоянныеАдресаВРассылках.Почта
	|ИЗ
	|	РегистрСведений.ПостоянныеАдресаВРассылках КАК ПостоянныеАдресаВРассылках
	|ГДЕ
	|	ПостоянныеАдресаВРассылках.Рассылка = &Рассылка";
	Зап.УстановитьПараметр("Рассылка", ТипРассылки);
	Рез = Зап.Выполнить().Выгрузить();
	Для Каждого Тек Из Рез Цикл
		Если Мас.Найти(Тек.Почта) = Неопределено Тогда
			Мас.Добавить(Тек.Почта);
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ОтправитьСообщение(СписокПолучателей = Неопределено, ТемаС = Неопределено, Знач ТекстС = Неопределено, ФайлС = Неопределено, ИмяОтправителя = "Сервер 1С", ОбратныйАдрес = "noreply2@strizh-logistic.ru", ТипТекста = Неопределено, Сообщение = Неопределено, Ошибка = "", ТипРассылки = Неопределено, ДополнитьАдреса = Истина, ТекстыПисьма = Неопределено) Экспорт
	П = Новый ИнтернетПочтовыйПрофиль;
	П.АдресСервераSMTP = "smtp.yandex.ru";
	П.ПортSMTP = 465;
	//П.ПользовательSMTP = "noreply@strizh-logistic.ru";
	//П.ПарольSMTP = "4gbZuXsEaz";
	П.ПользовательSMTP = "noreply2@strizh-logistic.ru";
	//П.ПарольSMTP = "4gbZuXsEaz";
	П.ПарольSMTP = "kjaelrj985";
	
	П.ИспользоватьSSLSMTP= Истина;
	П.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	Поч= Новый ИнтернетПочта;
	Поч.Подключиться(п);
	Если ДополнитьАдреса Тогда 
		Если ТипРассылки <> Неопределено Тогда
			Если ТипЗнч(ТипРассылки) = Тип("Массив") Тогда
				Для Сч = 0 По ТипРассылки.Количество() - 1 Цикл
					ДополнитьМассивАдресов(СписокПолучателей, ТипРассылки[Сч]);
				КонецЦикла;	
			Иначе	
				ДополнитьМассивАдресов(СписокПолучателей, ТипРассылки);
			КонецеСли;
		КонецеСли;
	Иначе 
		//СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru"); 
		//СписокПолучателей.Добавить("aleksandr.mihushkin@strizh-logistic.ru"); 
	КонецЕсли;
	
	Если Сообщение = "" Или Сообщение = Неопределено Тогда
		
		Сооб = Новый ИнтернетПочтовоеСообщение;
		Сооб.ИмяОтправителя = ИмяОтправителя;
		
		Сооб.ИмяОтправителя = ИмяОтправителя;
		Сооб.Отправитель = ОбратныйАдрес;
		
		//+++ БАО 07.09.2017 №1798 
		//Если ОбщегоНазначенияПривелигированный.ЭтоТестоваяБД() Тогда
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			
			ТемаС = СтрокаСоединенияИнформационнойБазы()  + ". " + ТемаС;
			
			СписокПолучателейСтрока = "Список получателей: ";
			
			Для Каждого Тек Из СписокПолучателей Цикл
				
				СписокПолучателейСтрока = СписокПолучателейСтрока + ",  " + Тек; 
				
			КонецЦикла;
			
			СписокПолучателей.Очистить();
			СписокПолучателей = ОбщегоНазначенияПривелигированный.ПолучитьМылоАдминов();
			
			
			Если ТипТекста = Неопределено Или ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст  Тогда
				ТекстС = СписокПолучателейСтрока + Символы.ПС + ТекстС;
			Иначе
				ТемаС = ТемаС + " " + СписокПолучателейСтрока;
			КонецеСли;
			
			
		КонецЕсли;	
		//--- БАО 07.09.2017 №1798
		
		Сооб.Тема = ТемаС;
		
		если ТипТекста = Неопределено Тогда
			Сооб.Тексты.Добавить(ТекстС);
		Иначе
			Сооб.Тексты.Добавить(ТекстС, ТипТекста);
		КонецеСли;
		
		// в рамках 3307
		Если Не ТекстыПисьма = Неопределено Тогда
			Сооб.Тексты.Очистить();
			Для Каждого СтрокаТекст Из ТекстыПисьма Цикл
				Сооб.Тексты.Добавить(СтрокаТекст.Текст, СтрокаТекст.ТипТекста);
			КонецЦикла;	
		КонецЕсли;	
		// в рамках 3307
		
		Если ФайлС <> Неопределено Тогда
			Если ТипЗнч(ФайлС) = Тип("Строка") Тогда
				Сооб.Вложения.Добавить(ФайлС);
			ИначеЕсли ТипЗнч(ФайлС) = Тип("Массив") Тогда	
				Для Каждого Тек Из ФайлС Цикл
					Сооб.Вложения.Добавить(Тек);
				КонецЦикла;	
			КонецеСли;	
		КонецеСли;	
		
		
		Для Каждого Тек Из СписокПолучателей Цикл
			Сооб.Получатели.Добавить(СокрЛП(Тек));
		КонецЦикла;
		
		
		Сообщение = Сооб;
	Иначе
		
		//+++ БАО 07.09.2017 №1798
		Если ОбщегоНазначенияПривелигированный.ЭтоТестоваяБД() Тогда
			ВызватьИсключение "Недокостылял"; 
		КонецЕсли;	
		//--- БАО 07.09.2017 №1798
		
		Сооб = Сообщение;
	КонецеСли;
	попытка
		Поч.Послать(Сооб);
	Исключение
		Ошибка = ОписаниеОшибки();
		Поч.Отключиться();
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Истина;
КонецФункции

Процедура ПроверкаВыполненияОбмена() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МылоОдминов.Мыло Как Мыло
	|ИЗ
	|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	Стр = СтрокаСоединенияИнформационнойБазы();
	Таб = Зап.Выполнить().Выгрузить();			
	СпПол = Таб.ВыгрузитьКолонку("Мыло");
	//СпПол.Добавить("lemuracami@mail.ru");
	//СпПол.Добавить("pavel.nechaev@strizh-logistic.ru");
	ДатаНач = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЗаказов");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаНач);
	//ДатаНач = Дата(ДатаНач);
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		Попытка
			ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		Исключение
			ОтправитьСообщение(СпПол, "Проверка состояния обмена. База (" + Стр + ")", "Ошибочное значение даты последней загрузки доставок "+ДатаНач);
		КонецПопытки;
	Иначе
		ОтправитьСообщение(СпПол, "Проверка состояния обмена. База (" + Стр + ")", "Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказов)");
	КонецЕсли;
	
	ПослДата = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗаписаннаяЗагрузкаЗаказов");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ПослДата);
	ПослДата = Дата(ПослДата);
	
	
	Если ПослДата <> ДатаЗапроса Тогда
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗаписаннаяЗагрузкаЗаказов");
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
		КонецЕсли;
		НоваяЗапись.Ключ = "ПоследняяЗаписаннаяЗагрузкаЗаказов";
		НоваяЗапись.Значение = ДатаВСтроку(ДатаЗапроса);
		Попытка
			Запись.Записать();
		Исключение
			ОтправитьСообщение(СпПол, "Проверка состояния обмена. База (" + Стр + ")", "Ошибка обновления границы новых заказов");
		КонецПопытки;
	Иначе
		// Якурнов 10.08.2018 10:11:29
		Константы.ТекущаяЗагрузкаДанных.Установить(Перечисления.ТипыЗагрузкиИзАдминки.ПустаяСсылка());
		
		ОтправитьСообщение(СпПол, "Проверка состояния обмена. База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT") + Символы.ПС + "Произведена попытка восстановления обмена");
	КонецеСли;
КонецПроцедуры	


//перенесено
Процедура ПроверкаВыполненияОбменаСТСД() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МылоОдминов.Мыло Как Мыло
	|ИЗ
	|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	Стр = СтрокаСоединенияИнформационнойБазы();
	Таб = Зап.Выполнить().Выгрузить();			
	СпПол = Таб.ВыгрузитьКолонку("Мыло");
	ДатаНач = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЗаказовСТСД_2");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаНач);
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		Попытка
			ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		Исключение
			ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Ошибочное значение даты последней загрузки доставок "+ДатаНач);
		КонецПопытки;
	Иначе
		ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказовСТСД_2)");
	КонецЕсли;
	
	ПослДата = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ПослДата);
	ПослДата = Дата(ПослДата);
	
	
	Если ПослДата <> ДатаЗапроса Тогда
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД");
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
		КонецЕсли;
		НоваяЗапись.Ключ = "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД";
		НоваяЗапись.Значение = ДатаВСтроку(ДатаЗапроса);
		Попытка
			Запись.Записать();
		Исключение
			ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Ошибка обновления границы новых заказов");
		КонецПопытки;
	Иначе
		ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
	КонецеСли;
КонецПроцедуры	

//перенесено
Процедура ПроверкаВыполненияОбменаСТСД_v3() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МылоОдминов.Мыло Как Мыло
	|ИЗ
	|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	Стр = СтрокаСоединенияИнформационнойБазы();
	Таб = Зап.Выполнить().Выгрузить();			
	СпПол = Таб.ВыгрузитьКолонку("Мыло");
	ДатаНач = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЗаказовСТСД_3");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаНач);
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		Попытка
			ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		Исключение
			ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Ошибочное значение даты последней загрузки доставок "+ДатаНач);
		КонецПопытки;
	Иначе
		ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказовСТСД_2)");
	КонецЕсли;
	
	ПослДата = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ПослДата);
	ПослДата = Дата(ПослДата);
	
	
	Если ПослДата <> ДатаЗапроса Тогда
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3");
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
		КонецЕсли;
		НоваяЗапись.Ключ = "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3";
		НоваяЗапись.Значение = ДатаВСтроку(ДатаЗапроса);
		Попытка
			Запись.Записать();
		Исключение
			ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Ошибка обновления границы новых заказов");
		КонецПопытки;
	Иначе
		ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
	КонецеСли;
КонецПроцедуры	

//+++ БАО 09.06.2017 №1046 
//Функция ДатаВСтроку(Д)
Функция ДатаВСтроку(Д) Экспорт 
	//--- БАО 09.06.2017 №1046 	
	Возврат Формат(Год(Д), "ЧГ=") + Евген.ЛидирующийНоль(Месяц(Д)) + Евген.ЛидирующийНоль(День(Д)) + Евген.ЛидирующийНоль(Час(Д)) + Евген.ЛидирующийНоль(Минута(Д)) + Евген.ЛидирующийНоль(Секунда(Д));
КонецФункции

// Процедура автоматического закрытия заказов по рейсу   --- рабочая процедура переехала (pkv.ЗакрытиеЗаказов)
Процедура ЗакрытиеЗаказов() Экспорт
	
	//Возврат;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаЗакрытия = ТекущаяДата() - 86400;
	
	//ДатаЗакрытия = Дата("20161015");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Рейс.Ссылка
	|ИЗ
	|	Документ.Рейс КАК Рейс
	|ГДЕ
	|	Рейс.Проведен
	|	И Рейс.ДатаРейса МЕЖДУ &Дата1 И &Дата2
	|	И (Рейс.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж)
	|			ИЛИ Рейс.ТерминалДоставки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.ПустаяСсылка))");
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаЗакрытия));					  
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаЗакрытия));					  
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл					
		
		ДокЗакрытие = СформироватьЗакрытиеПоРейсу(Рез.Ссылка, ДатаЗакрытия);	
		
		// пишем в РС АвтоматическиеЗакрытияЗаказов
		Если ЗначениеЗаполнено(ДокЗакрытие) Тогда		
			ТекВр = ТекущаяДата();
			Набор = РегистрыСведений.АвтоматическиеЗакрытияЗаказов.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(ТекВр);			
			НЗапись = Набор.Добавить();
			НЗапись.Период = ТекВр;
			НЗапись.ДокументЗакрытия = ДокЗакрытие;		
			Набор.Записать();					
		КонецЕсли;
		
	КонецЦикла;
	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	
	//Возврат;
	//
	//ДатаВчера = ТекущаяДата() - 86400;
	//
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//|	МылоОдминов.Мыло Как Мыло
	//|ИЗ
	//|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	//Стр = СтрокаСоединенияИнформационнойБазы();
	//Таб = Зап.Выполнить().Выгрузить();			
	//СпПол = Таб.ВыгрузитьКолонку("Мыло");
	//
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//              |	новаОтчетВодителяЗадания.Задание.Ссылка КАК Доставка,
	//              |	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
	//              |ИЗ
	//              |	Документ.новаОтчетВодителя.Задания КАК новаОтчетВодителяЗадания
	//              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//              |		ПО новаОтчетВодителяЗадания.Задание.Номер = РеализацияТоваровУслуг.Номер
	//              |ГДЕ
	//              |	новаОтчетВодителяЗадания.Ссылка.Проведен = ИСТИНА
	//              |	И новаОтчетВодителяЗадания.Задание.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//              |	И новаОтчетВодителяЗадания.РезультатДоставки = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.выполнена)
	//              |ИТОГИ
	//              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доставка)
	//              |ПО
	//              |	ВладелецТовара";
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаВчера));			  
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаВчера));
	//Рез = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока Рез.Следующий() Цикл
	//	Д = Документы.ЗакрытиеЗаказов.СоздатьДокумент();
	//	Д.Дата = ТекущаяДата();
	//	Д.Контрагент = Рез.ВладелецТовара;
	//	Д.ТипДоставки = Перечисления.ТипыЗаказов.Доставка;
	//	//Д.ДатаЗакрытия = ДатаВчера;
	//	Д.Комментарий = "Создан автоматически";
	//	Д.КонецПериода = КонецДня(ДатаВчера);
	//	Д.НачалоПериода = НачалоДня(ДатаВчера);
	//	Д.ЗаполнитьАктивныеПоказателиУслугСД();
	//	Д.ОбновитьДанные();
	//	ВыбД = Рез.Выбрать();
	//	Пока ВыбД.Следующий() Цикл
	//		Тек = Д.Заказы.Найти(ВыбД.Доставка);
	//		Если Тек = Неопределено Тогда
	//			Продолжить;
	//		КонецеСли;	
	//		Тек.Закрыть = Истина;
	//		Струк = Новый Структура;
	//		Струк.Вставить("Реализация", Тек.Реализация.Ссылка);
	//		Если Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
	//			Най = Д.Товары.НайтиСтроки(Струк);
	//			Для Сч = 0 По Най.Количество() - 1 Цикл
	//				Най[Сч].СуммаНовая = 0;
	//				Най[Сч].КоличествоВозвращено = 0;
	//			КонецЦикла;	
	//		КонецЕсли;	
	//	КонецЦикла;
	//	Д.УстановитьНовыйНомер();
	//	Д.Записать(РежимЗаписиДокумента.Запись);
	//	
	//	Наб = РегистрыСведений.АвтоматическиеЗакрытияЗаказов.СоздатьНаборЗаписей();
	//	Наб.Отбор.ДокументЗакрытия.Установить(Д.Ссылка);
	//	Наб.Прочитать();
	//	
	//	Нов = Наб.Добавить();
	//	Нов.ДокументЗакрытия = Д.Ссылка;
	//	наб.Записать();
	//	
	//	Попытка
	//		Д.Записать(РежимЗаписиДокумента.Проведение);
	//		ОтправитьСообщение(СпПол, "Автоматическое закрытие заказов. База (" + Стр + ")", "Документ закрытия № " + СокрЛП(Д.номер) + " сформирован и проведен!");
	//	Исключение
	//		ОтправитьСообщение(СпПол, "Автоматическое закрытие заказов. База (" + Стр + ")", "Документ закрытия № " + СокрЛП(Д.номер) + " сформирован, но не проведен!");
	//	КонецПопытки;	
	//КонецЦикла;
	
	
Конецпроцедуры	

Функция СформироватьЗакрытиеПоРейсу(Рейс, ДатаЗакрытия) 
	
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗакрытиеЗаказов.Ссылка,
	|	ВЫБОР
	|		КОГДА ДокументыКОтложенномуПроведению.Период ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КОтложенномуПроведению
	|ИЗ
	|	Документ.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыКОтложенномуПроведению КАК ДокументыКОтложенномуПроведению
	|		ПО ЗакрытиеЗаказов.Ссылка = ДокументыКОтложенномуПроведению.Документ
	|ГДЕ
	|	ЗакрытиеЗаказов.Рейс = &Рейс
	|	И ЗакрытиеЗаказов.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Рейс", Рейс);	
	Рез = Запрос.Выполнить().Выбрать();		
	ЕстьПроведенный = Ложь;
	
	Пока Рез.Следующий() Цикл			
		Если ЗначениеЗаполнено(Рез.Ссылка) И НЕ Рез.Ссылка.Проведен Тогда
			ДокЗакрытиеСсылка = Рез.Ссылка;	
		КонецЕсли;
		
		Если Рез.Ссылка.Проведен Тогда
			ЕстьПроведенный = Истина;			
		КонецЕсли;	
		
		Если Рез.КОтложенномуПроведению Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЦикла;
	
	
	Если ЕстьПроведенный Тогда		
		#Если Клиент Тогда
			Сообщить("по данному рейсу существует проведенный документ закрытия");
		#КонецЕсли	
		Возврат Неопределено;		
	КонецЕсли;
	
	
	
	Если ЗначениеЗаполнено(ДокЗакрытиеСсылка) Тогда		
		ДокЗакрытие = ДокЗакрытиеСсылка.ПолучитьОбъект();
		ДокЗакрытие.ТранзакционнаяМодель = Истина;
		ДокЗакрытие.ЗаполнитьАктивныеПоказателиУслугСД();
		ДокЗакрытие.ОбновитьДанные();
	Иначе
		ДокЗакрытие = Документы.ЗакрытиеЗаказов.СоздатьДокумент();
		ДокЗакрытие.Рейс = Рейс;
		ДокЗакрытие.ДатаЗакрытия = ДатаЗакрытия;
		ДокЗакрытие.ТранзакционнаяМодель = Истина;
		ДокЗакрытие.Дата = ТекущаяДата();
		ДокЗакрытие.ВариантЗаполнения = 1;
		ДокЗакрытие.ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж;
		ДокЗакрытие.ТерминалПриёма = Справочники.РегиональныеТерминалы.МоскваСтриж;
		ДокЗакрытие.НачалоПериода = НачалоДня(ДатаЗакрытия);
		ДокЗакрытие.КонецПериода = КонецДня(ДатаЗакрытия);
		ДокЗакрытие.ЗаполнитьАктивныеПоказателиУслугСД();
		ДокЗакрытие.ОбновитьДанные();	
	КонецЕсли;
	
	
	// проставим флаги Закрыть и отклонить
	Для Каждого Тек Из ДокЗакрытие.Заказы Цикл
		Если Тек.Отклонить Тогда
			Тек.Отклонить = Ложь;
		КонецеСли;
		
		Если Тек.Закрыть Тогда
			Тек.Закрыть = Ложь;
		КонецеСли;		
		
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена И Тек.Доставлен Тогда
			Тек.Закрыть = Истина;
		КонецеСли;
		
		//Геннадий #3113 от 25.08.2021 ++
		//Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично И Тек.Доставлен Тогда
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
		//Геннадий #3113 от 25.08.2021 --
			Тек.Закрыть = Истина;
		КонецеСли;	
		
		Если Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена И Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
			Тек.Закрыть = Истина;
		ИначеЕсли Тек.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена И (Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки И Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь И Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом) Тогда
			Тек.Отклонить = Истина;
		КонецеСли;	
		
		//Геннадий #3113 18.08.2021 ++
		//комментарий от 18.08.2021, причина невыполнения не должна быть "ОтказКлиентаСЗаездом"
		// Михушкин - костыль для НЕ выполненных переносов с заездом . снимаем все флаги, пока не учитываем их в автоматическом режиме --->> 
		Если Тек.БылПереносСЗаездом И Тек.РезультатДоставки <> Справочники.новаРезультатМестнойДоставки.Выполнена И Тек.ПричинаНевыполнения <> Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
		//Геннадий #3113 18.08.2021 --
			Тек.Закрыть   = Ложь;
			//Геннадий #3113 27.08.2021 ++ комментарий в задаче
			//Тек.Отклонить = Ложь;
			//Геннадий #3113 27.08.2021 -- 
			Тек.Доставлен = Ложь;
		КонецЕсли;
		// <<--- Михушкин 
		
		
		
		Если ТипЗнч(Тек.Реализация.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда		
			
			Если Тек.Закрыть И Тек.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом 
				И (Тек.СуммаДоставкиДоМКАД <> 0 ИЛИ Тек.СуммаДоставкиЗаМКАД <> 0) Тогда
				
				Тек.СуммаДоставкиДоМКАД = 0;
				Тек.СуммаДоставкиЗаМКАД = 0;	
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//CeHbKA #3781 16.04.2020
	ДокЗакрытие.ЗаполнитьКомпонентыРасчета();
	//CeHbKA #3781 16.04.2020
	
	ДокЗакрытие.ОбновитьСуммыПоСтрокам();	
	ДокЗакрытие.ОбновитьПринятуюСумму();
	ДокЗакрытие.Записать(РежимЗаписиДокумента.Запись);	
	Попытка
		ДокЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить("Не удалось закрыть рейс " + Рейс + ", по причине: " + ТекстОшибки);
		#КонецЕсли
		
		
		//запись в РС ДокументыКОтложенномуПроведению
		pkv.ДобавитьВСписокОтложенногоПроведения(ДокЗакрытие.Ссылка, "Не удалось провести автоматическое закрытие заказов " + ДокЗакрытие.Ссылка + " (По рейсу " + Рейс + ")" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
		
		
		Мас = Новый Массив;
		Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		Мас.Добавить("v.yakurnov@strizh-logistic.ru");
		
		ОтправитьСообщение(Мас, "Ошибка проведения автоматического закрытия", "Не удалось провести автоматическое закрытие заказов " + ДокЗакрытие.Ссылка + " (По рейсу " + Рейс + ")" + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	
	Возврат ДокЗакрытие.Ссылка;	
	
КонецФункции


Процедура РегламентноеОбновлениеСтатусовЗаказов(КодТерминала = 1) Экспорт
	
	Возврат; // Отключено в рамках Задача № 3201
	
	// Михушкин - 02.06.2017 - разделение по терминалам --->> 
	ТекТерминал = Справочники.РегиональныеТерминалы.НайтиПоКоду(КодТерминала);
	// <<--- Михушкин 
	
	Зап = Новый Запрос;
	
	//Зап.Текст = "ВЫБРАТЬ
	//            |	СостоянияЗаказов.Доставка.Номер
	//            |ПОМЕСТИТЬ ВТПеренесенные
	//            |ИЗ
	//            |	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	//            |ГДЕ
	//            |	СостоянияЗаказов.ПричинаНеВыполнения В (ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.переносдоставки), ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.ПереносСЗаездом))
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
	//            |	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	//            |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	//            |	новаЗаданияРейсов.Доставка.Оплачен,
	//            |	новаРейсМестнойДоставки.Ссылка КАК Рейс,
	//            |	новаЗаданияРейсов.Доставка.Ссылка КАК Доставка
	//            |ПОМЕСТИТЬ ВТТранспорт
	//            |ИЗ
	//            |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
	//            |			ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
	//            |		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
	//            |ГДЕ
	//            |	новаРейсМестнойДоставки.ДатаНачала МЕЖДУ &НачДата И &КонДата
	//            |	И новаРейсМестнойДоставки.ПометкаУдаления = ЛОЖЬ
	//            |	И новаРейсМестнойДоставки.Стартован = ИСТИНА
	//            |	И новаРейсМестнойДоставки.РейсОтменен = ЛОЖЬ
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.Номер,
	//            |	новаЗаданияРейсов.Рейс.Транспорт,
	//            |	новаЗаданияРейсов.Доставка.Оплачен,
	//            |	новаРейсМестнойДоставки.Ссылка,
	//            |	РеализацияТоваровУслуг.ВладелецТовара,
	//            |	новаЗаданияРейсов.Доставка.Ссылка
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД КАК СтоимостьДоставки_,
	//            |	ВТТранспорт.НомерЗаказа,
	//            |	ВТТранспорт.Транспорт,
	//            |	ВТТранспорт.ДоставкаОплачен,
	//            |	ВТТранспорт.Рейс,
	//            |	ВТТранспорт.Контрагент,
	//            |	ВЫБОР
	//            |		КОГДА ЕСТЬNULL(ВТПеренесенные.ДоставкаНомер, ИСТИНА) = ИСТИНА
	//            |			ТОГДА ЛОЖЬ
	//            |		ИНАЧЕ ИСТИНА
	//            |	КОНЕЦ КАК ЗаказПеренесен,
	//            |	ВТТранспорт.Транспорт.НомерЛог КАК НомерСклад,
	//            |	ВТТранспорт.Доставка,
	//            |	РеализацияТоваровУслуг.Ссылка КАК Заказ
	//            |ПОМЕСТИТЬ ВТЗаказы
	//            |ИЗ
	//            |	ВТТранспорт КАК ВТТранспорт
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	//            |		ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер
	//            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеренесенные КАК ВТПеренесенные
	//            |		ПО ВТТранспорт.НомерЗаказа = ВТПеренесенные.ДоставкаНомер
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	ВТТранспорт.НомерЗаказа,
	//            |	ВТТранспорт.Транспорт,
	//            |	ВТТранспорт.ДоставкаОплачен,
	//            |	ВТТранспорт.Рейс,
	//            |	ВТТранспорт.Контрагент,
	//            |	новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД,
	//            |	ВЫБОР
	//            |		КОГДА ЕСТЬNULL(ВТПеренесенные.ДоставкаНомер, ИСТИНА) = ИСТИНА
	//            |			ТОГДА ЛОЖЬ
	//            |		ИНАЧЕ ИСТИНА
	//            |	КОНЕЦ,
	//            |	ВТТранспорт.Транспорт.НомерЛог,
	//            |	ВТТранспорт.Доставка,
	//            |	РеализацияТоваровУслуг.Ссылка
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |УНИЧТОЖИТЬ ВТТранспорт
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	ВТЗаказы.НомерЗаказа,
	//            |	ВТЗаказы.Транспорт,
	//            |	ВТЗаказы.Рейс,
	//            |	ВТЗаказы.Контрагент,
	//            |	ВТЗаказы.ЗаказПеренесен,
	//            |	ВТЗаказы.НомерСклад,
	//            |	ВТЗаказы.Доставка,
	//            |	ВТЗаказы.Заказ
	//            |ИЗ
	//            |	ВТЗаказы КАК ВТЗаказы
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	ВТЗаказы.НомерЗаказа,
	//            |	ВТЗаказы.Транспорт,
	//            |	ВТЗаказы.Рейс,
	//            |	ВТЗаказы.Контрагент,
	//            |	ВТЗаказы.ЗаказПеренесен,
	//            |	ВТЗаказы.НомерСклад,
	//            |	ВТЗаказы.Доставка,
	//            |	ВТЗаказы.Заказ
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |УНИЧТОЖИТЬ ВТЗаказы";
	
	ЗапросИсключений = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗагрузкаСТСДШтрихкоды.Заказ КАК Документ.РеализацияТоваровУслуг).Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВТ_ЗаказыТСД
	|ИЗ
	|	Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
	|ГДЕ
	|	(ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ПриходWiFi)
	|			ИЛИ ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ПриходWiFiVeeroute)
	|			ИЛИ ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ПриходWiFiVeerouteСВесом)
	|			ИЛИ ЗагрузкаСТСДШтрихкоды.Ссылка.ТипЗагрузкиТСД = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.Аксиомус))
	|	И ЗагрузкаСТСДШтрихкоды.Ссылка.Дата >= ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, -15)
	|	И ЗагрузкаСТСДШтрихкоды.Ссылка.Дата <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ВТ_Основная
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО РеализацияТоваровУслуг.Номер = ПоступлениеТоваровУслуг.Номер
	|			И (НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказыТСД КАК ВТ_ЗаказыТСД
	|		ПО (ВТ_ЗаказыТСД.Заказ.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				РеализацияТоваровУслугТовары.Ссылка
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ГДЕ
	|				НЕ РеализацияТоваровУслугТовары.Номенклатура.Артикул В
	|						(ВЫБРАТЬ
	|							УслугиПоЗаказам.Артикул
	|						ИЗ
	|							Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				РеализацияТоваровУслугПодарочныеПозиции.Ссылка
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	|			ГДЕ
	|				НЕ РеализацияТоваровУслугПодарочныеПозиции.Номенклатура.Артикул В
	|						(ВЫБРАТЬ
	|							УслугиПоЗаказам.Артикул
	|						ИЗ
	|							Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам))
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И ЕСТЬNULL(ВТ_ЗаказыТСД.Заказ, ИСТИНА) = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Основная.Номер,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказовСОдинаковымНомером
	|ПОМЕСТИТЬ ВТ_Дубли
	|ИЗ
	|	ВТ_Основная КАК ВТ_Основная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВТ_Основная.НомерВнешнегоЗаказа = РеализацияТоваровУслуг.НомерВнешнегоЗаказа
	|			И ВТ_Основная.Контрагент = РеализацияТоваровУслуг.ВладелецТовара
	|ГДЕ
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Основная.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Основная.Ссылка
	|ИЗ
	|	ВТ_Основная КАК ВТ_Основная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Дубли КАК ВТ_Дубли
	|		ПО ВТ_Основная.Номер = ВТ_Дубли.Номер");
	ЗапросИсключений.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));
	ЗапросИсключений.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));	
	
	РезИсключения = ЗапросИсключений.Выполнить().Выбрать();
	
	СписокИсключения = Новый СписокЗначений;	
	
	Пока РезИсключения.Следующий() Цикл	
		СписокИсключения.Добавить(РезИсключения.Ссылка);			
	КонецЦикла;
	
	
	
	
	Зап.Текст = "ВЫБРАТЬ
	|	СостоянияЗаказов.Доставка.Номер
	|ПОМЕСТИТЬ ВТПеренесенные
	|ИЗ
	|	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	|ГДЕ
	|	СостоянияЗаказов.ПричинаНеВыполнения В (ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.переносдоставки), ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.ПереносСЗаездом))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаЗаданияРейсов.Рейс.Транспорт КАК Транспорт,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	|	новаЗаданияРейсов.Доставка.Оплачен,
	|	новаРейсМестнойДоставки.Ссылка КАК Рейс,
	|	новаЗаданияРейсов.Доставка.Ссылка КАК Доставка
	|ПОМЕСТИТЬ ВТТранспорт
	|ИЗ
	|	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
	|			ПО новаРейсМестнойДоставки.Ссылка = новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка
	|		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
	|ГДЕ
	|	новаРейсМестнойДоставки.ДатаНачала МЕЖДУ &НачДата И &КонДата
	|	И новаРейсМестнойДоставки.ПометкаУдаления = ЛОЖЬ
	|	И новаРейсМестнойДоставки.Стартован = ИСТИНА
	|	И новаРейсМестнойДоставки.РейсОтменен = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номер,
	|	новаЗаданияРейсов.Рейс.Транспорт,
	|	новаЗаданияРейсов.Доставка.Оплачен,
	|	новаРейсМестнойДоставки.Ссылка,
	|	РеализацияТоваровУслуг.ВладелецТовара,
	|	новаЗаданияРейсов.Доставка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД КАК СтоимостьДоставки_,
	|	ВТТранспорт.НомерЗаказа,
	|	ВТТранспорт.Транспорт,
	|	ВТТранспорт.ДоставкаОплачен,
	|	ВТТранспорт.Рейс,
	|	ВТТранспорт.Контрагент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТПеренесенные.ДоставкаНомер, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаказПеренесен,
	|	ВТТранспорт.Транспорт.НомерЛог КАК НомерСклад,
	|	ВТТранспорт.Доставка,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	ВТТранспорт КАК ВТТранспорт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	|		ПО ВТТранспорт.НомерЗаказа = новаМестнаяДоставка.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеренесенные КАК ВТПеренесенные
	|		ПО ВТТранспорт.НомерЗаказа = ВТПеренесенные.ДоставкаНомер
	|ГДЕ
	|	РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТранспорт.НомерЗаказа,
	|	ВТТранспорт.Транспорт,
	|	ВТТранспорт.ДоставкаОплачен,
	|	ВТТранспорт.Рейс,
	|	ВТТранспорт.Контрагент,
	|	новаМестнаяДоставка.СтоимостьДоставкиДоМКАД + новаМестнаяДоставка.СтоимостьДоставкиЗаМКАД,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТПеренесенные.ДоставкаНомер, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВТТранспорт.Транспорт.НомерЛог,
	|	ВТТранспорт.Доставка,
	|	РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТранспорт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗаказы.НомерЗаказа,
	|	ВТЗаказы.Транспорт,
	|	ВТЗаказы.Рейс,
	|	ВТЗаказы.Контрагент,
	|	ВТЗаказы.ЗаказПеренесен,
	|	ВТЗаказы.НомерСклад,
	|	ВТЗаказы.Доставка,
	|	ВТЗаказы.Заказ,
	|	221 КАК Статус,
	|	ЛОЖЬ КАК ПредварительноеЗакрытие,
	|	ВТЗаказы.Заказ КАК Реализация,
	|	ВТЗаказы.Заказ.ТерминалДоставки.Ссылка КАК Терминал,
	|	ВТЗаказы.НомерЗаказа КАК Номер,
	|	"""" КАК ДокументРегистратор
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|ГДЕ
	|	НЕ ВТЗаказы.Заказ В (&Исключения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаказы.НомерЗаказа,
	|	ВТЗаказы.Транспорт,
	|	ВТЗаказы.Рейс,
	|	ВТЗаказы.Контрагент,
	|	ВТЗаказы.ЗаказПеренесен,
	|	ВТЗаказы.НомерСклад,
	|	ВТЗаказы.Доставка,
	|	ВТЗаказы.Заказ,
	|	ВТЗаказы.Заказ.ТерминалДоставки.Ссылка,
	|	ВТЗаказы.Заказ,
	|	ВТЗаказы.НомерЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗаказы";
	
	// Михушкин --->> 
	Зап.УстановитьПараметр("Исключения", СписокИсключения);	
	// <<--- Михушкин 
	
	Зап.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата()));	//ТекущаяДата()		
	Зап.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата()));
	
	// Михушкин - 02.06.2017 - разбиение по терминалам --->> 
	Зап.УстановитьПараметр("ТерминалДоставки", ТекТерминал);
	//Зап.УстановитьПараметр("ТерминалДоставки", Справочники.РегиональныеТерминалы.МоскваСтриж);
	// <<--- Михушкин 
	
	//Зап.УстановитьПараметр("ВыбЭтап", Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки);
	
	ТаблицаДанных = Зап.Выполнить().Выгрузить();
	ТаблицаДанных.Свернуть("НомерЗаказа, Доставка, Заказ, Номер, Терминал, Статус, ДокументРегистратор, ПредварительноеЗакрытие, Реализация, Терминал, Номер");
	
	// Задача № 2813
	МассивСтатусов = Неопределено;
	Счетчик = 0;
	Для Каждого Стр Из ТаблицаДанных Цикл
		Счетчик = Счетчик + 1;
		
		ДопПараметрыСтатуса = mas.ДобавитьДополнительныйПараметрСтатуса("ProcessingTerminal", Число(КодТерминала)); // Задача № 3027
		МассивСтатусов = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(Стр.Номер, Стр.Статус, "регламент уехало на доставку",,,МассивСтатусов,ДопПараметрыСтатуса);
		
		Если Счетчик = 900 Тогда
			СтруктураВозврата = mas.ОтправитьМассивСтатусовЗаказов(МассивСтатусов);
			МассивСтатусов = Неопределено;
			Счетчик = 0;
		КонецЕсли;	
	КонецЦикла;
	
	СтруктураВозврата = mas.ОтправитьМассивСтатусовЗаказов(МассивСтатусов);
	// Задача № 2813
	
	//// --- Отключено в рамках Задача № 2813
	//    СтрТекстЗапроса="";
	//    Стр2 = "";
	//    ТекстСоставлен = Ложь;
	//    Статус = 0;
	//	
	//Счетчик = 0;	
	//	
	//Для Каждого Стр Из ТаблицаДанных Цикл
	//	Счетчик = Счетчик + 1;
	//	//СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Тек.НомерЗаказа, "ЧГ=") + ",221,'регламент'";
	//	//Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
	//	//Попытка
	//	//	lem.СохранитьСтатус(Тек.Заказ, 221);
	//	//исключение
	//	//	
	//	//КонецПопытки;	
	//	
	//	
	//	//ТаблицаДанных = ПолучитьДанныеОбновлениеСтатусовВАдминке();
	//	
	//	//Для каждого Стр Из ТаблицаДанных Цикл
	//		Статус = Стр.Статус;
	//		СтрТекстЗапроса = СтрТекстЗапроса + "(" +Формат(Сокрлп(Стр.Номер), "ЧГ=") + ","+Стр.Статус+",'регламент уехало на доставку'"+")"+",";
	//		
	//		ТекстСоставлен = Истина;
	//		
	//	//КонецЦикла;
	//     
	//    
	//	
	//	Если Счетчик = 900 Тогда
	//		Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	//		
	//		// текущий статус
	//		Если ТекстСоставлен И ЗначениеЗаполнено(СтрТекстЗапроса) Тогда
	//			ДлинаТекста = СтрДлина(СтрТекстЗапроса);
	//			СтрТекстЗапроса = Лев(СтрТекстЗапроса,ДлинаТекста-1);
	//			ТекстЗапроса = "
	//			|DECLARE @t TOrderStatusId
	//			|INSERT INTO @t (orderID, statusId, comment) VALUES " +
	//			СтрТекстЗапроса +" EXEC import_setOrdersStatusIDFrom1C @t";
	//			Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);		
	//		КонецЕсли;
	//		
	//		Счетчик = 0;
	//		
	//		
	//		СтрТекстЗапроса="";
	//		Стр2 = "";
	//		ТекстСоставлен = Ложь;
	//		Статус = 0;
	//		
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	//
	//// текущий статус
	//Если ТекстСоставлен И ЗначениеЗаполнено(СтрТекстЗапроса) Тогда
	//	ДлинаТекста = СтрДлина(СтрТекстЗапроса);
	//	СтрТекстЗапроса = Лев(СтрТекстЗапроса,ДлинаТекста-1);
	//	ТекстЗапроса = "
	//	|DECLARE @t TOrderStatusId
	//	|INSERT INTO @t (orderID, statusId, comment) VALUES " +
	//	СтрТекстЗапроса +" EXEC import_setOrdersStatusIDFrom1C @t";
	//	Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);		
	//КонецЕсли;
	//// Отключено в рамках Задача № 2813 ---
	
	
	//костыль
	ТаблицаДанных.Колонки.Добавить("БылоЗакрытие");
	
	РаботаСоСтатусамиЗаказовСервер.СохранитьСтатусы(ТаблицаДанных,,ТекТерминал);
	// Задача № 3027 //smv.СохранитьСтатус(ТаблицаДанных);
	
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	ЗакрытыеЗаказыОбороты.Реализация,
	//            |	ЗакрытыеЗаказыОбороты.Реализация.Номер КАК НомерЗаказа
	//            |ИЗ
	//            |	РегистрНакопления.ЗакрытыеЗаказы.Обороты(&НачДата, &КонДата, , ) КАК ЗакрытыеЗаказыОбороты
	//            |ГДЕ
	//            |	(ЗакрытыеЗаказыОбороты.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.новарезультатместнойдоставки.ВыполненаЧастично)
	//            |			ИЛИ ЗакрытыеЗаказыОбороты.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.переносдоставки)
	//            |			ИЛИ ЗакрытыеЗаказыОбороты.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.ОтказКлиентаСЗаездом)
	//            |			ИЛИ ЗакрытыеЗаказыОбороты.ПричинаНевыполнения = ЗНАЧЕНИЕ(справочник.причиныневыполнениядоставки.ОтказКлиентаБезЗаезда))";
	//Зап.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата() - 86400));			
	//Зап.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата() - 86400));
	//
	//Рез = Зап.Выполнить().Выгрузить();
	//Рез.Свернуть("НомерЗаказа, Реализация");
	//Для Каждого Тек Из Рез Цикл
	//	СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Тек.НомерЗаказа, "ЧГ=") + ",313,'регламент'";
	//	Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
	//	СохранитьСтатус(Тек.Реализация, 313);
	//	/// либо 413
	//КонецЦикла;	
	
	
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	//            |	РеализацияТоваровУслуг.Номер КАК НомерЗаказа
	//            |ИЗ
	//            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	//            |	И РеализацияТоваровУслуг.ПометкаУдаления = ИСТИНА";
	//Зап.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата() - 86400));			
	//Зап.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата() - 86400));
	//
	//Рез = Зап.Выполнить().Выгрузить();
	//Рез.Свернуть("НомерЗаказа, Реализация");
	//Для Каждого Тек Из Рез Цикл
	//	СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(Тек.НомерЗаказа, "ЧГ=") + ",413,'регламент'";
	//	Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
	//	СохранитьСтатус(Тек.Реализация, 413);
	//КонецЦикла;	
	
	
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//			|	ОтклоненияКоличестваДоставок.Доставка.Номер КАК НомерЗаказа
	//			|ИЗ
	//			|	РегистрСведений.ОтклоненияКоличестваДоставок КАК ОтклоненияКоличестваДоставок
	//			|ГДЕ
	//			|	ОтклоненияКоличестваДоставок.Период МЕЖДУ &НачДата И &КонДата
	//			|	И ОтклоненияКоличестваДоставок.ДоставкаОтменена = ИСТИНА";
	//Зап.УстановитьПараметр(""			
КонецПроцедуры	

Функция ПроверкаНаНаличиеВозврата(Ном)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка КАК Возвр
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = &Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Ссылка";
	Зап.УстановитьПараметр("Номер", Ном);
	Возврат Не Зап.Выполнить().Пустой();
КонецФункции	

Процедура РегламентЗагрузкаНакладных003() Экспорт
	Попытка
		ОтложенноеУдалениеДоставок003();
		Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
		//WSОпр = Новый WSОпределения("http://78.47.37.251/ZZT.DCIntegration/DCIntegration.svc?wsdl", "dc34", "ceYsyKpF");
		//WSОпр = Новый WSОпределения("http://212.65.85.10:8049/DCIntegration.svc?wsdl", "dc34", "ceYsyKpF");
		
		WSОпр = Новый WSОпределения("https://dci.mmr.ms:8046/DCIntegration.svc?wsdl", "dc34", "ceYsyKpF");
		Прокси = Новый WSПрокси(WSОпр, "http://tempuri.org/", "DCIntegrationService", "BasicHttpBinding_IDCIntegration",,10);
		
		Прокси.Пользователь = "dc34"; 
		Прокси.Пароль = "ceYsyKpF"; 
		
		
		ТипСтр = Прокси.ФабрикаXDTO.Пакеты.Получить("http://schemas.microsoft.com/2003/10/Serialization/Arrays").Получить("ArrayOfstring");
		НовМас = Прокси.ФабрикаXDTO.Создать(ТипСтр);
		
		Мас = Прокси.GetShipmentNotifications();
		Для Сч = 0 По Мас.ActOfAcceptance.Количество() - 1 Цикл
			Най = Документы.Накладная003.НайтиПоРеквизиту("ВходящийНомер", Мас.ActOfAcceptance[Сч].Number);
			Если най.Пустая() Тогда
				Най = Документы.Накладная003.СоздатьДокумент();
				Най.Дата = Мас.ActOfAcceptance[Сч].Date;
				Най.ВходящийНомер = Мас.ActOfAcceptance[Сч].Number;
			Иначе
				Най = Най.получитьОбъект();
				Най.Заказы.Очистить();
				Най.НенайденныеЗаказы.Очистить();
			КонецЕсли;
			Най.ДатаЗагрузки = ТекущаяДата();
			Най.Смена = ОпределитьСмену(Най.Дата);
			Для СчСтрок = 0 По Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder.Количество() - 1 Цикл
				НайРеал = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].WaybillNumber);
				Если Най.Контрагент.Пустая() И Не НайРеал.Пустая() Тогда
					Най.Контрагент = НайРеал.ВладелецТовара;
				КонецеСли;	
				Если НайРеал.Пустая() Тогда
					НайРеал = Документы.ЗаборТовара.НайтиПоНомеру(Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].WaybillNumber);
				КонецеСли;
				
				Если НайРеал.Пустая() Тогда
					НайРеал = Документы.Фрахт.НайтиПоНомеру(Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].WaybillNumber);
				КонецеСли;
				
				Если НайРеал.Пустая() Тогда
					НовСтр = Най.НенайденныеЗаказы.Добавить();
				Иначе
					НовСтр = Най.Заказы.Добавить();
					НовСтр.Заказ = НайРеал.Ссылка;
				КонецеСли;	
				НовСтр.ВнешнийНомерЗаказа = Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].OrderNumber;
				НовСтр.НомерЗаказа = Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].WaybillNumber;
				//Серегин М.В. 16.06.2015 18:15:10 
				НовСтр.СуммаЗаказа = smv.ПолучитьСуммуЗаказаПоПоступлению(Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].WaybillNumber);     
				//Серегин М.В. 16.06.2015 18:15:11 
				
				КолМест = 0;
				Вес = 0;
				Для СчСтрокЗаказа = 0 По Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].containers.ActOfAcceptanceContainer.Количество() - 1 Цикл
					Если Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].containers.ActOfAcceptanceContainer[СчСтрокЗаказа].ContainerId <> "Услуги заказа" Тогда
						КолМест = КолМест + 1;
						Вес = Вес + Мас.ActOfAcceptance[Сч].orders.ActOfAcceptanceOrder[СчСтрок].containers.ActOfAcceptanceContainer[СчСтрокЗаказа].Weight;
					КонецЕСли;	
				КонецЦикла;	
				НовСтр.Вес = Вес;
				НовСтр.КоличествоМест = КолМест;
				
				ЗонаТарификации = "";
				ЭтоМосква = "";
				ТипД = "";
				Если Не НайРеал.Пустая() Тогда
					НайДост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайРеал.Номер);
					Если ТипЗнч(НайРеал) = Тип("ДокументСсылка.Фрахт") Тогда
						ТипД = "3";
						sourcePlaceId = 1;
						deliveryPlaceId = 1;
					ИначеЕсли ТипЗнч(НайРеал) = Тип("ДокументСсылка.ЗаборТовара") Тогда
						ТипД = "2";
						sourcePlaceId   = НайРеал.ТерминалПриемки.Код;
						deliveryPlaceId = НайРеал.ТерминалДоставки.Код;	
					ИначеЕсли НайДост.Пустая() Тогда	
						ТипД = "1";
						sourcePlaceId = 1;
						deliveryPlaceId = 1;
					Иначе
						ТипД = "0";
						sourcePlaceId   = НайРеал.ТерминалПриема.Код;
						deliveryPlaceId = НайРеал.ТерминалДоставки.Код;
					КонецеСли;
					
					//Если НайДост.ТочкаПрибытия.Москва Тогда
					//	ЭтоМосква = "0";
					//Иначе
					//	ЭтоМосква = "1";
					//КонецеСли;	
					// Михушкин --->> 
					
					Если ТипД <> "3" Тогда
						Если ЗначениеЗаполнено(НайРеал) Тогда
							Если ЗначениеЗаполнено(НайРеал.ЗонаТарификации) Тогда					
								ЗонаТарификации = НайРеал.ЗонаТарификации.КодТарифа;									
							Иначе
								ЗонаТарификации = "0";		
							КонецЕсли;		
						Иначе
							ЗонаТарификации = "0";
						КонецЕсли;		
						// <<--- Михушкин	
						
						
						КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Най.Контрагент.Код),"_");
						КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
						
						
						ТарифнаяСетка = НайРеал.ТарифнаяСетка;
						
						Если ТарифнаяСетка.Пустая() Тогда
							ТарифнаяСетка = Справочники.ТарифныеСеткиПартнеров.ОсновнаяТарифнаяСетка;
						КонецеСли;	
						
						Если КодКонтр = "181" Тогда
							ТТ = "11";
						ИначеЕсли КодКонтр = "227" Тогда
							Если ТарифнаяСетка.Код = 1 Тогда
								ТТ = "40";                      	
							Иначе
								ТТ = "59";
							КонецеСли;	
						КонецеСли;						
						
						ФТР = "dbo.fn_getTariffID(" + КодКонтр + ",'" + Евген.ДатаВSQL(НайРеал.Дата, Ложь) +  "'," + Формат(ТарифнаяСетка.Код, "ЧГ=") + "," + sourcePlaceId + "," + deliveryPlaceId + ")";
						
						//Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + ",0,0," + Формат(Вес, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + ТипД + "," + этоМосква + "," + ФТР + ")";         //Формат(ТарифнаяСетка.Код, "ЧГ=")
						
						Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + ",0,0," + Формат(Вес, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + ТипД + "," + ЗонаТарификации + "," + ФТР + ")";    
						
						R = Евген.ЗапросКИнтернетМагазину(Стр, Подкл);
						Таб = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
						Если Таб.Количество() <> 0 Тогда
							Если Вес > 130 И КодКонтр = "181" Тогда
								НайКат = Справочники.КатегорииДоставки2014.КГТ2;
							Иначе	
								НайКат = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория", Таб[0].weightCategoryId_Ч);
							КонецеСли;
							Если Не НайКат.Пустая() Тогда
								Струк = Новый Структура;
								Струк.Вставить("Доставка", НайРеал.Ссылка);
								
								НайТекКат = РегистрыСведений.ИзмененияКатегорийДоставок.ПолучитьПоследнее(ТекущаяДата(), Струк);
								Если Не ЗначениеЗаполнено(НайТекКат.Категория) Тогда
									Наб = РегистрыСведений.ИзмененияКатегорийДоставок.СоздатьНаборЗаписей();
									Дт = ТекущаяДата();
									Наб.Отбор.Период.Установить(Дт);
									Наб.Отбор.Доставка.Установить(НайРеал.Ссылка);
									Наб.Прочитать();
									
									Нов = Наб.Добавить();
									Нов.Период = Дт;
									Нов.Категория = НайКат.Ссылка;
									Нов.Доставка = Найреал.Ссылка;
									
									Наб.Записать();
								КонецеСли;
								
								СуммаСверхМассивныхЗаказов = "2288";
								
								Если НайРеал.Дата > Дата("20150818000001") Тогда
									СуммаСверхМассивныхЗаказов = "2700";
								КонецеСли;	
								
								//Серегин М.В. 22.07.2015 17:19:46 дублировать 
								Если Вес > 130 И КодКонтр = "181" Тогда
									Стр = "EXEC import_setOrderWeigth " + НовСтр.НомерЗаказа + ", " + Формат(Вес, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(КолМест) + ", " + Строка(Таб[0].tariffCategoryId_Ч) + ", " + Строка(СуммаСверхМассивныхЗаказов) + "," + Строка(СуммаСверхМассивныхЗаказов) + ", " + Строка(Таб[0].weightCategoryId_Ч); 
								Иначе	
									Стр = "EXEC import_setOrderWeigth " + НовСтр.НомерЗаказа + ", " + Формат(Вес, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(КолМест) + ", " + Строка(Таб[0].tariffCategoryId_Ч) + ", " + Формат(Таб[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(Таб[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(Таб[0].weightCategoryId_Ч); 
								КонецеСли;	
								Евген.ЗапросКИнтернетМагазину(Стр, Подкл);
								
								Д = НайРеал.ПолучитьОбъект();
								Д.КатегорияДоставки = НайКат.Категория;
								Если Вес > 130 И КодКонтр = "181" Тогда
									Д.УслугиСД = Число(СуммаСверхМассивныхЗаказов);
									Д.УслугиСДЧистые = Число(СуммаСверхМассивныхЗаказов);
								Иначе	
									Д.УслугиСД = Таб[0].deliveryPrice_Ч;
									Д.УслугиСДЧистые = Таб[0].deliveryPrice_Ч;
								КонецеСли;	
								Д.Записать(РежимЗаписиДокумента.Запись);
							КонецеСли;	
						КонецеСли;
						
					КонецеСли;
				КонецЕСли;	
			КонецЦикла;
			
			Най.Записать(РежимЗаписиДокумента.Запись);
			Най.Записать(РежимЗаписиДокумента.Проведение);
			НовМас.String.Добавить(Мас.ActOfAcceptance[Сч].Number);
			
			ТекЧас = Час(ТекущаяДата());
			
			
			ЗапМ = Новый Запрос;
			ЗапМ.Текст = "ВЫБРАТЬ
			|	ВременныеИнтервалыИнтервалы.Интервал_С КАК ЧасНач,
			|	ВременныеИнтервалыИнтервалы.Интервал_По КАК ЧасКон
			|ИЗ
			|	РегистрСведений.ПараметрыЗагрузкиПриходныхНакладных КАК ПараметрыЗагрузкиПриходныхНакладных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВременныеИнтервалы.Интервалы КАК ВременныеИнтервалыИнтервалы
			|		ПО ПараметрыЗагрузкиПриходныхНакладных.ВременнойИнтервалМодификацииЗаказов.Ссылка = ВременныеИнтервалыИнтервалы.Ссылка
			|ГДЕ
			|	ПараметрыЗагрузкиПриходныхНакладных.Контрагент = &Контрагент";
			
			ЗапМ.УстановитьПараметр("Контрагент", Най.Контрагент);
			ВыбМ = ЗапМ.Выполнить().Выгрузить();
			
			
			Если ВыбМ.Количество() = 0 Тогда
				ЧасНач = Константы.УдалитьЧасНачалаИзмененияДоставок003.Получить();
				ЧасКон = Константы.УдалитьЧасОкончанияИзмененияДоставок003.Получить();
			Иначе
				ЧасНач = ВыбМ.ЧасНач;
				ЧасКон = ВыбМ.ЧасКон;
			КонецеСли;
			
			
			
			
			ПроверкаНаВремя = Истина;
			
			Если ЧасНач <> 0 И ЧасКон <> 0 Тогда
				Если ТекЧас >= ЧасНач И ТекЧас <= ЧасКон Тогда
					
				Иначе
					ПроверкаНаВремя = Ложь;
				КонецеСли;	
			КонецеСли;	
			
			Если (ТекЧас>=18 И ТекЧас <=23) Тогда
				Най.ДатаОтработанногоДня = ТекущаяДата();
			ИначеЕсли (ТекЧас>=0 И ТекЧас <=8) Тогда
				Най.ДатаОтработанногоДня = ТекущаяДата() - 86400;
			Иначе
				Най.ДатаОтработанногоДня = ТекущаяДата();
			КонецеСли;	
			Най.Записать(РежимЗаписиДокумента.Запись);	
			
			
			Если Константы.АвтоотклонениеЗаказов003.Получить() И НачалоДня(Най.Дата) = НачалоДня(ТекущаяДата()) И ПроверкаНаВремя И Най.Смена = Справочники.Смены.Смена1  Тогда
				Зап = Новый Запрос;
				Зап.Текст = "ВЫБРАТЬ
				|	новаЗадачаМестнойДоставки.БизнесПроцесс.Доставка.Ссылка КАК Доставка,
				|	ВЫБОР
				|		КОГДА новаЗадачаМестнойДоставки.БизнесПроцесс.Доставка.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
				|			ТОГДА ЕСТЬNULL(Накладная003Заказы.Ссылка, ИСТИНА)
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК НетЗаказа
				|ПОМЕСТИТЬ ВТЗаказы
				|ИЗ
				|	Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Накладная003.Заказы КАК Накладная003Заказы
				|		ПО новаЗадачаМестнойДоставки.БизнесПроцесс.Доставка.Номер = Накладная003Заказы.НомерЗаказа
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|		ПО новаЗадачаМестнойДоставки.БизнесПроцесс.Доставка.Номер = РеализацияТоваровУслуг.Номер
				|ГДЕ
				|	новаЗадачаМестнойДоставки.Роль = ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)
				|	И новаЗадачаМестнойДоставки.БизнесПроцесс.Доставка.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
				|	И РеализацияТоваровУслуг.ВладелецТовара = &Контрагент
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТЗаказы.Доставка
				|ПОМЕСТИТЬ ВТЗаказы2
				|ИЗ
				|	ВТЗаказы КАК ВТЗаказы
				|ГДЕ
				|	ВТЗаказы.НетЗаказа = ИСТИНА
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЕСТЬNULL(СостоянияЗаказовСрезПоследних.Регистратор, ИСТИНА) КАК НетЗаказа,
				|	ВТЗаказы2.Доставка
				|ПОМЕСТИТЬ ВТЗаказы3
				|ИЗ
				|	ВТЗаказы2 КАК ВТЗаказы2
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов.СрезПоследних(&ДатаКон, ) КАК СостоянияЗаказовСрезПоследних
				|		ПО ВТЗаказы2.Доставка.Ссылка = СостоянияЗаказовСрезПоследних.Доставка.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	новаМестнаяДоставка.Ссылка КАК Доставка
				|ПОМЕСТИТЬ ВТМинусы
				|ИЗ
				|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
				|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Номер = новаМестнаяДоставка.Номер
				|ГДЕ
				|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
				|
				|СГРУППИРОВАТЬ ПО
				|	новаМестнаяДоставка.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТМинусы.Доставка,
				|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ссылка, ИСТИНА) КАК НетОбмена
				|ПОМЕСТИТЬ ВТМинусы2
				|ИЗ
				|	ВТМинусы КАК ВТМинусы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|		ПО ВТМинусы.Доставка.Номер = РеализацияТоваровУслугТовары.Ссылка.Номер
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТМинусы2.Доставка
				|ПОМЕСТИТЬ ВТМинусы3
				|ИЗ
				|	ВТМинусы2 КАК ВТМинусы2
				|ГДЕ
				|	ВТМинусы2.НетОбмена = ИСТИНА
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТЗаказы3.Доставка,
				|	ЕСТЬNULL(ВТМинусы3.Доставка, ИСТИНА) КАК НетМинусов
				|ПОМЕСТИТЬ ВТЗаказы4
				|ИЗ
				|	ВТЗаказы3 КАК ВТЗаказы3
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинусы3 КАК ВТМинусы3
				|		ПО ВТЗаказы3.Доставка.Ссылка = ВТМинусы3.Доставка.Ссылка
				|ГДЕ
				|	ВТЗаказы3.НетЗаказа = ИСТИНА
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТЗаказы4.Доставка,
				|	РеализацияТоваровУслуг.Номер,
				|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа
				|ИЗ
				|	ВТЗаказы4 КАК ВТЗаказы4
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|		ПО ВТЗаказы4.Доставка.Номер = РеализацияТоваровУслуг.Номер
				|ГДЕ
				|	ВТЗаказы4.НетМинусов = ИСТИНА
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТЗаказы4.Доставка,
				|	РеализацияТоваровУслуг.Номер,
				|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТЗаказы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТЗаказы2
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТЗаказы3
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТМинусы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТЗаказы4
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТМинусы2
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТМинусы3";
				Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
				Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));	
				Если Най.Смена.Пустая() Или Най.Смена = Справочники.Смены.Смена1 Тогда
					Зап.УстановитьПараметр("ДатаНач2", НачалоДня(Най.ДатаОтработанногоДня+86400));			
					Зап.УстановитьПараметр("ДатаКон2", КонецДня(Най.ДатаОтработанногоДня+86400));
				ИначеЕсли Най.Смена = Справочники.Смены.Смена2 Тогда
					Зап.УстановитьПараметр("ДатаНач2", НачалоДня(Най.ДатаОтработанногоДня));			
					Зап.УстановитьПараметр("ДатаКон2", КонецДня(Най.ДатаОтработанногоДня));
				КонецеСли;	
				Зап.УстановитьПараметр("Контрагент", Най.Контрагент);
				Рез = Зап.Выполнить();
				Если Не Рез.Пустой() Тогда
					Выб = Рез.Выбрать();
					Если Константы.РежимОбработкиНеПриехавшихЗаказов003.Получить() = Перечисления.РежимыОбработкиНеПриехавшиэхЗаказов003.УдалятьСДоставки Или Константы.РежимОбработкиНеПриехавшихЗаказов003.Получить() = Перечисления.РежимыОбработкиНеПриехавшиэхЗаказов003.ОтложенноеУдаление Тогда
						Д = Документы.СнятиеДоставокСПланирования_КУдалению.СоздатьДокумент();
						Д.Дата = ТекущаяДата();
						Д.Контрагент = Най.Контрагент;
						Пока Выб.Следующий() Цикл
							Если ПроверкаНаНаличиеВозврата(Выб.Номер) Тогда
								Продолжить;
							КонецеСли;	
							Нов = Д.Заказы.Добавить();
							Нов.Заказ = Выб.Доставка;
						КонецЦикла;	
						Д.КоличествоДней = Константы.ПериодХраненияСнятыхСПланированияДоставок003.Получить();
						Д.РежимСнятияСДоставки = Константы.РежимОбработкиНеПриехавшихЗаказов003.Получить();
						Д.Накладная003 = Най.Ссылка;
						Д.Записать(РежимЗаписиДокумента.Запись);
						Д.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						если Не Константы.ОтменятьДублиНеПриехавшихЗаказов003.Получить() Тогда
							Пока Выб.Следующий() Цикл
								Если ПроверкаНаНаличиеВозврата(Выб.Номер) Тогда
									Продолжить;
								КонецеСли;	
								Док = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
								Док.Дата = ТекущаяДата();
								Док.ДатаДоставки = НачалоДня(ТекущаяДата()+172800);
								Док.Доставка = Выб.Доставка;
								Док.Накладная003 = Най.Ссылка;
								Док.ПричинаИзмененияДаты = Перечисления.ПричиныИзмененияДатыДоставки.НеПривезлиСоСклада;
								Док.Записать(РежимЗаписиДокумента.Запись);
								Док.Записать(РежимЗаписиДокумента.Проведение);
							КонецЦикла;	
						Иначе
							МасНом = Рез.Выгрузить().ВыгрузитьКолонку("НомерВнешнегоЗаказа");
							Зап2 = Новый Запрос;
							Зап2.Текст = "ВЫБРАТЬ
							|	РеализацияТоваровУслуг.Номер,
							|	новаМестнаяДоставка.Ссылка КАК МД
							|ИЗ
							|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
							|		ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
							|ГДЕ
							|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа В(&Мас)
							|	И РеализацияТоваровУслуг.Дата >= &ДатаНач
							|
							|СГРУППИРОВАТЬ ПО
							|	РеализацияТоваровУслуг.Номер,
							|	новаМестнаяДоставка.Ссылка";
							Зап2.УстановитьПараметр("Мас", МасНом);			 
							Зап2.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()+86400));			 
							РезТаб = Зап2.Выполнить().Выгрузить();
							Д = Документы.СнятиеДоставокСПланирования_КУдалению.СоздатьДокумент();
							Д.Дата = ТекущаяДата();
							Д.Контрагент = Най.Контрагент;
							Пока Выб.Следующий() Цикл
								Если ПроверкаНаНаличиеВозврата(Выб.Номер) Тогда
									Продолжить;
								КонецеСли;	
								Най_ = РезТаб.Найти(Выб.Номер);
								Если Най_ = Неопределено Тогда
									Док = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
									Док.Дата = ТекущаяДата();
									Док.ДатаДоставки = НачалоДня(ТекущаяДата()+172800);
									Док.Доставка = Выб.Доставка;
									Док.Накладная003 = Най.Ссылка;
									Док.ПричинаИзмененияДаты = Перечисления.ПричиныИзмененияДатыДоставки.НеПривезлиСоСклада;
									Док.Записать(РежимЗаписиДокумента.Запись);
									Док.Записать(РежимЗаписиДокумента.Проведение);
								Иначе
									Нов = Д.Заказы.Добавить();
									Нов.Заказ = Выб.Доставка;
								КонецеСли;
							КонецЦикла;	
							
							Если Д.Заказы.Количество() <> 0 Тогда
								Д.Записать(РежимЗаписиДокумента.Запись);
								Д.Записать(РежимЗаписиДокумента.Проведение);
							КонецеСли;	
						КонецеСли;
					КонецеСли;
				КонецеСли;	
			КонецеСли;	
		КонецЦикла;	
		Прокси.ApproveShipmentNotifications(НовМас);
	исключение
		Ош = ОписаниеОшибки();
	КонецПопытки;
	ПроверкаНаНаличиеНакладной003();
КонецПроцедуры

Процедура ПроверкаНаНаличиеНакладной003()
	Флаг = "";
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "Письмо003Отправлено");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", Флаг);
	
	Зап = Новый Запрос;
	зап.Текст = "ВЫБРАТЬ
	|	Накладная003.Ссылка
	|ИЗ
	|	Документ.Накладная003 КАК Накладная003
	|ГДЕ
	|	Накладная003.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));			
	
	Рез = Зап.Выполнить();
	
	
	
	Изм = Ложь;
	СпПол = Новый Массив;
	СпПол.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	СпПол.Добавить("v.yakurnov@strizh-logistic.ru");
	
	Если Флаг <> "да" Тогда
		Если Час(ТекущаяДата()) >= 22 и Минута(ТекущаяДата()) >= 50 И Рез.Пустой() Тогда
			Сооб = "";
			Если ОтправитьСообщение(СпПол, "Не пришла накладная 003 " + Формат(ТекущаяДата(), "ДЛФ=DDT"), "Не пришла накладная 003",,,,,Сооб) Тогда
				Флаг = "да";
				Изм = Истина;
			Иначе
				Струк = Новый Соответствие;
				Струк.Вставить("Комментарий", "Не пришла накладная 003");
				ПоставитьСообщениеВОчередь(Сооб, Струк);
				Флаг = "да";
				Изм = Истина;
			КонецЕСли;	
		КонецеСли;	
	ИначеЕсли Час(ТекущаяДата()) < 22 И Флаг = "да" И Рез.Пустой() Тогда
		Флаг = "нет";
		Изм = Истина;
	КонецеСли;	
	
	Если Изм Тогда
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("Письмо003Отправлено");
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
		КонецЕсли;
		НоваяЗапись.Ключ = "Письмо003Отправлено";
		НоваяЗапись.Значение = Флаг;
		Попытка
			Запись.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры	


#Область СтарыйНеактуальныйКод
// СохранитьСтатус перенесен в РаботаСоСтатусамиЗаказовСервер.СохранитьСтатус в рамках Задача № 3027
//Функция СохранитьСтатус(Заказ, Статус, Док = Неопределено, ИнициаторСостояния = Неопределено) Экспорт
//	
//	ОтображатьВАдминке = Истина;
//	
//	Если Статус <> 312 И Статус <> 313 Тогда
//		Зап = Новый Запрос;
//		Зап.Текст = "ВЫБРАТЬ
//		|	ЗакрытыеЗаказы.Период
//		|ИЗ
//		|	РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
//		|ГДЕ
//		|	ЗакрытыеЗаказы.Реализация.Ссылка = &Реализация";
//		Зап.УстановитьПараметр("Реализация", Заказ.Ссылка);
//		Если Не Зап.Выполнить().Пустой() Тогда
//			ОтображатьВАдминке = Ложь;
//		КонецеСли;	
//	КонецеСли;
//	
//	
//	
//	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда  // Реализация
//		
//		Если (СокрЛП(Заказ.ВладелецТовара.Код) = "Shop_248" Или СокрЛП(Заказ.ВладелецТовара.Код) = "Shop_601" ИЛИ СокрЛП(Заказ.ВладелецТовара.Код) = "Shop_752")  И (Статус = 213 Или Статус = 231 ИЛИ Статус = 211) Тогда // проверка Яндекса на предмет 404 только когда 10
//			Зап = Новый Запрос;
//			Зап.Текст = "ВЫБРАТЬ
//			            |	СтатусыЗаказов.Статус
//			            |ИЗ
//			            |	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
//			            |ГДЕ
//			            |	СтатусыЗаказов.Статус = 211
//			            |	И СтатусыЗаказов.Заказ = &Заказ
//			            |	И СтатусыЗаказов.Период <= &Период";
//						
//			Зап.УстановитьПараметр("Заказ", Заказ.Ссылка);			
//			Зап.УстановитьПараметр("Период", ТекущаяДата());			
//			
//			Рез = Зап.Выполнить();
//			Если НЕ Рез.Пустой() Тогда
//				Если Статус = 211 Тогда // Михушкин - Запретить повторное выставление статуса 211 по заказам Яндекса
//					Возврат Ложь;						
//				КонецЕсли;
//			Иначе
//				Если Статус <> 211 Тогда
//					Возврат Ложь;						
//				КонецЕсли;
//			КонецеСли;	
//		КонецеСли;
//		
//		
//		Р = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Заказ.Номер);
//		Если Р.Пустая() Тогда  			
//			Возврат ОтображатьВАдминке;
//		КонецеСли;
//		
//	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда   // Заборы
//		
//		//Если (СокрЛП(Заказ.Контрагент.Код) = "Shop_248" Или СокрЛП(Заказ.Контрагент.Код) = "Shop_601") И (Статус = 213 Или Статус = 231 ИЛИ Статус = 211) Тогда // проверка Яндекса на предмет 404 только когда 10
//		//	Зап = Новый Запрос;
//		//	Зап.Текст = "ВЫБРАТЬ
//		//	            |	СтатусыЗаказов.Статус
//		//	            |ИЗ
//		//	            |	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
//		//	            |ГДЕ
//		//	            |	СтатусыЗаказов.Статус = 211
//		//	            |	И СтатусыЗаказов.Заказ = &Заказ
//		//	            |	И СтатусыЗаказов.Период <= &Период";
//		//				
//		//	Зап.УстановитьПараметр("Заказ", Заказ.Ссылка);			
//		//	Зап.УстановитьПараметр("Период", ТекущаяДата());			
//		//	
//		//	Рез = Зап.Выполнить();
//		//	Если НЕ Рез.Пустой() Тогда
//		//		Если Статус = 211 Тогда // Михушкин - Запретить повторное выставление статуса 211 по заказам Яндекса
//		//			Возврат Ложь;						
//		//		КонецЕсли;
//		//	Иначе
//		//		Если Статус <> 211 Тогда
//		//			Возврат Ложь;						
//		//		КонецЕсли;
//		//	КонецеСли;	
//		//КонецеСли;
//		
//		Р = Документы.ЗаборТовара.НайтиПоНомеру(Заказ.Номер);
//		Если Р.Пустая() Тогда   
//			Возврат ОтображатьВАдминке;
//		КонецеСли;
//	
//	КонецЕсли;
//	
//		
//	ТекД = ТекущаяДата();
//	Наб = РегистрыСведений.СтатусыЗаказов.СоздатьНаборЗаписей();
//	Наб.Отбор.Заказ.Установить(Р.ссылка);
//	Наб.Отбор.Период.Установить(ТекД);
//	Наб.Прочитать();
//	
//	Нов = Наб.Добавить();
//	Нов.Период = ТекД;
//	Нов.Заказ = Р.Ссылка;
//	Нов.Статус = Статус;
//	Если Док <> Неопределено Тогда
//		Нов.ДокументРегистратор = Док;
//	КонецеСли;	
//	
//	Нов.Терминал = Заказ.ТерминалДоставки;
//	//Нов.Терминал = Р.ТерминалДоставки;
//	
//	Если ЗначениеЗаполнено(ИнициаторСостояния) Тогда
//		Нов.Инициатор = ИнициаторСостояния;
//	КонецЕсли;	
//	
//	Наб.записать();
//	
//	Возврат ОтображатьВАдминке;
//	
//КонецФункции

// Перенесено в РаботаСоСтатусамиСервер.СохранитьФинальныйСтатус в рамках 2586
//Функция СохранитьФинальныйСтатус(Заказ, Статус, Док = Неопределено) Экспорт
//	Зап = Новый Запрос;
//	Зап.Текст = "ВЫБРАТЬ
//	|	ЗакрытыеЗаказы.Период
//	|ИЗ
//	|	РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
//	|ГДЕ
//	|	ЗакрытыеЗаказы.Реализация.Ссылка = &Реализация";
//	Зап.УстановитьПараметр("Реализация", Заказ.Ссылка);
//	ОтображатьВАдминке = Истина;
//	Если Не Зап.Выполнить().Пустой() Тогда
//		ОтображатьВАдминке = Ложь;
//	КонецеСли;	
//	
//	
//	Р = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Заказ.Номер);
//	ТекД = ТекущаяДата();
//	Наб = РегистрыСведений.ФинальныеСтатусыЗаказов.СоздатьНаборЗаписей();
//	Наб.Отбор.Заказ.Установить(Р.ссылка);
//	Наб.Отбор.Период.Установить(ТекД);
//	Наб.Прочитать();
//	
//	Нов = Наб.Добавить();
//	Нов.Период = ТекД;
//	Нов.Заказ = Р.Ссылка;
//	Нов.Статус = Статус;
//	Если Док <> Неопределено Тогда
//		Нов.ДокументРегистратор = Док;
//	КонецеСли;	
//	Наб.записать();
//	Возврат ОтображатьВАдминке;
//КонецФункции
#Конецобласти


Процедура ОтложенноеУдалениеДоставок003() Экспорт
	Зап1 = Новый Запрос;
	Зап1.Текст = "ВЫБРАТЬ
	|	СнятиеДоставокСПланирования.Ссылка
	|ИЗ
	|	Документ.СнятиеДоставокСПланирования КАК СнятиеДоставокСПланирования
	|ГДЕ
	|	СнятиеДоставокСПланирования.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И СнятиеДоставокСПланирования.Проведен = ИСТИНА
	|	И СнятиеДоставокСПланирования.РежимСнятияСДоставки = ЗНАЧЕНИЕ(Перечисление.РежимыОбработкиНеПриехавшиэхЗаказов003.УдалятьСДоставки)";
	Зап1.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			 
	Зап1.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));			 
	Если Не Зап1.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ДоставкиКУдалению003СрезПоследних.Доставка,
	|	ДоставкиКУдалению003СрезПоследних.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ДоставкиКУдалению003.СрезПоследних(&Дата, ) КАК ДоставкиКУдалению003СрезПоследних
	|ГДЕ
	|	ДоставкиКУдалению003СрезПоследних.ДатаУдаления МЕЖДУ &НачДатаУдаления И &КонДатаУдаления
	|ИТОГИ ПО
	|	Контрагент";
	Зап.УстановитьПараметр("Дата", ТекущаяДата());			
	Зап.УстановитьПараметр("НачДатаУдаления", НачалоДня(ТекущаяДата()));
	Зап.УстановитьПараметр("КонДатаУдаления", КонецДня(ТекущаяДата()));
	ВыбК = Зап.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока ВыбК.Следующий() Цикл
		Д = Документы.СнятиеДоставокСПланирования_КУдалению.СоздатьДокумент();
		Д.Дата = ТекущаяДата();
		Д.РежимСнятияСДоставки = Перечисления.РежимыОбработкиНеПриехавшиэхЗаказов003.УдалятьСДоставки;
		
		ВыбД = ВыбК.Выбрать();
		Пока ВыбД.Следующий() Цикл
			Нов = Д.Заказы.Добавить();
			Нов.Заказ = ВыбД.Доставка;
		КонецЦикла;	
		Д.Записать(РежимЗаписиДокумента.Запись);
		Д.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецпРоцедуры	

Процедура ОтразитьСоставЗаказаВИстории(Регистратор, Заказ, НеОбновлятьДанные = Истина) Экспорт
	Зап = Новый Запрос;
	
	Если НеОбновлятьДанные Тогда
		Зап.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияСоставаЗаказов.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ИсторияСоставаЗаказов КАК ИсторияСоставаЗаказов
		|ГДЕ
		|	ИсторияСоставаЗаказов.Заказ.Ссылка = &Заказ
		|	И ИсторияСоставаЗаказов.ДокументРегистратор.Ссылка = &ДокументРегистратор";
		Зап.УстановитьПараметр("Заказ", Заказ.Ссылка);			
		Зап.УстановитьПараметр("ДокументРегистратор", Регистратор.Ссылка);
		Если Не Зап.Выполнить().Пустой() Тогда
			Если НеОбновлятьДанные Тогда 
				Возврат;
			КонецеСли;	
		КонецеСли;	
	КонецеСли;
	
	ТекД = ТекущаяДата();
	
	Наб = РегистрыСведений.ИсторияСоставаЗаказов.СоздатьНаборЗаписей();
	//Наб.Отбор.Период.Установить(ТекД);
	Наб.Отбор.Заказ.Установить(Заказ.Ссылка);
	Наб.Отбор.ДокументРегистратор.Установить(Регистратор.Ссылка);
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Заказ");
	НовТаб = Таб.Добавить();
	НовТаб.Заказ = Заказ.Ссылка;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлБлок = БлокировкаДанных.Добавить("РегистрСведений.ИсторияСоставаЗаказов");
	ЭлБлок.ИсточникДанных = Таб;
	ЭлБлок.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
	ЭлБлок.Режим = РежимБлокировкиДанных.Разделяемый;
	
	
	Для Каждого Тек Из Заказ.Товары Цикл
		Нов = наб.Добавить();
		Нов.Период = ТекД;
		Нов.Заказ = Заказ.Ссылка;
		Нов.ДокументРегистратор = Регистратор.Ссылка;
		Нов.ТипТабличнойЧасти = Перечисления.ТипыТабличныхЧастей.Товары;
		Нов.НомерСтрокиДокумента = Тек.НомерСтроки;
		Нов.Номенклатура = Тек.Номенклатура;
		Нов.Цена = Тек.Цена;
		Нов.Количество = Тек.Количество;
		Нов.Масса = Тек.Вес;
		//+Степанов Задача № 3803
		Нов.ШтрихкодНоменклатуры = Тек.ШтрихкодНоменклатуры;
		Нов.КодМаркировки = Тек.КодМаркировки;
		//-Степанов Задача № 3803
	КонецЦикла;	
	
	Для Каждого Тек Из Заказ.ПодарочныеПозиции Цикл
		Нов = наб.Добавить();
		Нов.Период = ТекД;
		Нов.Заказ = Заказ.Ссылка;
		Нов.ДокументРегистратор = Регистратор.Ссылка;
		Нов.ТипТабличнойЧасти = Перечисления.ТипыТабличныхЧастей.ПодарочныеПозиции;
		Нов.НомерСтрокиДокумента = Тек.НомерСтроки;
		Нов.Номенклатура = Тек.Номенклатура;
		Нов.Цена = 0;
		Нов.Количество = Тек.Количество;
		Нов.Масса = Тек.Вес;
		//+Степанов Задача № 3803
		Нов.ШтрихкодНоменклатуры = Тек.ШтрихкодНоменклатуры;
		Нов.КодМаркировки = Тек.КодМаркировки;
		//-Степанов Задача № 3803
	КонецЦикла;	
	Наб.Записать();
КонецПроцедуры	

Процедура ОтправкаОчередиПочтовыхСообщений() Экспорт
	Зап = Новый Запрос;
	ТекД = ТекущаяДата();
	Зап.Текст = "ВЫБРАТЬ
	|	ИнтернетПочтовоеСообщения.Ссылка КАК Сообщение
	|ИЗ
	|	Справочник.ИнтернетПочтовоеСообщения КАК ИнтернетПочтовоеСообщения
	|ГДЕ
	|	ИнтернетПочтовоеСообщения.Отправлено = ЛОЖЬ
	|	И ИнтернетПочтовоеСообщения.ПометкаУдаления = ЛОЖЬ
	|	И ИнтернетПочтовоеСообщения.ОтправитьДо > &ОтправитьДо";
	Зап.УстановитьПараметр("ОтправитьДо", ТекД);
	Рез = зап.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		Наб = РегистрыСведений.ИсторияОтправкиПочтовыхСообщений.СоздатьНаборЗаписей();
		Наб.отбор.Период.Установить(ТекД);
		Наб.отбор.ИнтернетПочтовоеСообщение.Установить(Рез.Сообщение);
		Ошибка = "";
		Отправлено = Истина;
		Сообщение = Рез.Сообщение.Сообщение.Получить();
		Если Не ОтправитьСообщение(,,,,,,,Сообщение, Ошибка) Тогда
			Отправлено = Ложь;
		КонецеСли;
		Нов = Наб.Добавить();
		Нов.ИнтернетПочтовоеСообщение = Рез.Сообщение;
		Нов.период = ТекД;
		Нов.СообщениеОтправлено = Отправлено;
		Нов.Ошибка = Ошибка;
		
		Наб.Записать();
		
		Если Отправлено Тогда
			Сооб = Рез.Сообщение.ПолучитьОбъект();
			Сооб.Отправлено = Истина;
			Сооб.Записать();
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ПоставитьСообщениеВОчередь(Сообщение, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(Сообщение) <> Тип("ИнтернетПочтовоеСообщение") Тогда
		Возврат Ложь;
	КонецеСли;	
	Хр = Новый ХранилищеЗначения(Сообщение);
	
	Г = Новый УникальныйИдентификатор;
	ДатаПостановкиВОчередь = СтруктураПараметров.Получить("ДатаПостановкиВОчередь");
	ОтправитьДо = СтруктураПараметров.Получить("ОтправитьДо");
	Комментарий = СтруктураПараметров.Получить("Комментарий");
	
	
	Нов = Справочники.ИнтернетПочтовоеСообщения.СоздатьЭлемент();
	Нов.Сообщение = Хр;
	Если ДатаПостановкиВОчередь <> Неопределено Тогда
		Нов.ДатаПостановкиВОчередь = ДатаПостановкиВОчередь;
	Иначе
		Нов.ДатаПостановкиВОчередь = ТекущаяДата();
	КонецеСли;	
	
	Если ОтправитьДо <> Неопределено Тогда
		Нов.ОтправитьДо = ОтправитьДо;
	Иначе
		Нов.ОтправитьДо = ТекущаяДата() + 86400;
	КонецеСли;	
	
	Если Комментарий <> Неопределено Тогда
		Нов.Комментарий = Комментарий;
	КонецеСли;	
	
	Нов.Идентификатор = Г;
	Нов.Записать();
	Возврат Истина;
КонецФункции	

Процедура ПриЗаписиКассовыхДокументов(Источник) Экспорт
	
КонецПроцедуры	

Функция ПриЗаписиДокументаКД(Источник, Отказ) Экспорт
	//Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если Не Источник.ВыгружатьВБухгалтерию Тогда
	//	Возврат Ложь;
	//КонецеСли;	
	//
	//Выб = Справочники.НастройкиОбменаДанными.Выбрать();
	//НайВыб = Неопределено;
	//Пока Выб.Следующий() Цикл
	//	Если ТипЗнч(Выб.УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ОбменУТЛБухКасса") Тогда
	//		НайВыб = Выб.УзелИнформационнойБазы.Ссылка;
	//		Прервать;
	//	КонецеСли;	
	//КонецЦикла;	
	//
	//Если Источник.Контрагент.Пустая() Тогда
	//	Возврат Ложь;
	//КонецеСли;	
	//Если Источник.Контрагент.ПланВыгрузкиВБухгалтерию.Пустая() Тогда
	//	Возврат Ложь;
	//Иначе
	//	Пл = Источник.Контрагент.ПланВыгрузкиВБухгалтерию.Ссылка;
	//	Если Не Пл.УчетКассы Тогда
	//		Возврат Ложь;
	//	КонецЕСли;
	//	
	//	Най = Пл.ТипыОплат.Найти(Справочники.ТипыОплат.Наличные);
	//	Если Най <> Неопределено Тогда
	//		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
	//			Зап = Новый Запрос;
	//			Зап.Текст = "ВЫБРАТЬ
	//			            |	ПриходДСПоОтчетуВодителя.Ссылка
	//			            |ИЗ
	//			            |	Документ.ПриходДСПоОтчетуВодителя КАК ПриходДСПоОтчетуВодителя
	//			            |ГДЕ
	//			            |	ПриходДСПоОтчетуВодителя.ПКО = &ПКО
	//			            |
	//			            |ОБЪЕДИНИТЬ ВСЕ
	//			            |
	//			            |ВЫБРАТЬ
	//			            |	ПриходДСПоОтчетуВодителяПриходныеКассовыеОрдера.Ссылка.Ссылка
	//			            |ИЗ
	//			            |	Документ.ПриходДСПоОтчетуВодителя.ПриходныеКассовыеОрдера КАК ПриходДСПоОтчетуВодителяПриходныеКассовыеОрдера
	//			            |ГДЕ
	//			            |	ПриходДСПоОтчетуВодителяПриходныеКассовыеОрдера.ПКО = &ПКО";
	//			Зап.УстановитьПараметр("ПКО", Источник.Ссылка);
	//			Если Зап.Выполнить().Пустой() Тогда
	//				Возврат Ложь;
	//			КонецеСли;	
	//			Источник.Счет = Пл.СчетКассы;
	//			Источник.префикс = Пл.ПрефиксНумерацииКассы;
	//			Источник.СтатьяДДСКод = Най.СтатьяДДСКод;
	//		КонецеСли;
	//	КонецеСли;
	//КонецеСли;	
	//
	//Если Не НайВыб = Неопределено Тогда
	//	Источник.ОбменДанными.Получатели.Добавить(НайВыб.Ссылка);
	//	Возврат Истина;
	//КонецеСли;	
КонецФункции

// Процедура - Обновление статусов в админке по данным мобильного приложения
Процедура ОбновлениеСтатусовВАдминкеПоДаннымМобильногоПриложения() Экспорт
	Зап = Новый Запрос;
	Зап.Текст =
	"ВЫБРАТЬ
	|	ДанныеЗаказаВодителя.Ссылка КАК Док,
	|	ДанныеЗаказаВодителя.Реализация.ВладелецТовара КАК ВладелецТовара,
	|	ДанныеЗаказаВодителя.Реализация.ВладелецТовара.Код КАК ВладелецТовараКод,
	|	ДанныеЗаказаВодителя.Статус КАК Статус,
	|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки КАК ПричинаНеВыполненияДоставки,
	|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса КАК ПричинаОтказаПереноса,
	|	ДанныеЗаказаВодителя.Реализация.Номер КАК РеализацияНомер,
	|	ДанныеЗаказаВодителя.Забор КАК Забор,
	|	ДанныеЗаказаВодителя.Забор.Контрагент КАК ЗаборКонтрагент,
	|	ДанныеЗаказаВодителя.Забор.Контрагент.Код КАК ЗаборКонтрагентКод,
	|	ДанныеЗаказаВодителя.Забор.Номер КАК ЗаборНомер,
	//Асеев 10.03.2022 (по письму Рассылка по проблемным заборам)>>>
	|	ДанныеЗаказаВодителя.Рейс КАК Рейс,
	//Асеев 10.03.2022 (по письму Рассылка по проблемным заборам)<<<
	|	ДанныеЗаказаВодителя.Реализация КАК Реализация,
	|	ДанныеЗаказаВодителя.Реализация.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	|	ДанныеЗаказаВодителя.ДатаПереноса КАК ДатаПереноса
	//+++ БАО 21.08.2017 №1716 
	|	,	ВЫБОР
	|	КОГДА ДанныеЗаказаВодителя.Реализация <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|	И (ДанныеЗаказаВодителя.Реализация.ВладелецТовара = &РЕД
	|	ИЛИ ДанныеЗаказаВодителя.Реализация.ВладелецТовара.Родитель.ОсновнойМагазин = &РЕД)
	|	ТОГДА ИСТИНА
	|	КОГДА ДанныеЗаказаВодителя.Забор <> ЗНАЧЕНИЕ(Документ.ЗаборТовара.ПустаяСсылка)
	|	И (ДанныеЗаказаВодителя.Забор.Контрагент = &РЕД
	|	ИЛИ ДанныеЗаказаВодителя.Забор.Контрагент.Родитель.ОсновнойМагазин = &РЕД)
	|	ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРЕД
	//--- БАО 21.08.2017 №1716 
	|ИЗ
	|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
	|		ПО ДанныеЗаказаВодителя.Ссылка = СтатусыЗаказов.ДокументРегистратор
	|ГДЕ
	|	ДанныеЗаказаВодителя.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ ДанныеЗаказаВодителя.СтатусОтИМ
	|	И СтатусыЗаказов.ДокументРегистратор ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеЗаказаВодителя.ДатаДоставки,
	|	ДанныеЗаказаВодителя.Номер";
	
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));	
	Зап.УстановитьПараметр("РЕД", ПараметрыСеанса.рэКомпанияRED);	
	Рез = Зап.Выполнить().Выбрать();

	НеВыполнена = Справочники.новаРезультатМестнойДоставки.НеВыполнена;
	ЛогистическаяРассылка = Перечисления.ТипыРассылки.ЛогистическаяРассылка;
	
	//+++ БАО 27.07.2017 №1516
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();	
	//--- БАО 27.07.2017 №1516
	
	Пока Рез.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Рез.Реализация) Тогда  // Если Реализация
			
			ВладелецТовараКод = СокрЛП(Рез.ВладелецТовараКод);
			
			//+++ БАО 26.07.2017 №1474 
			//Избегаем ошибок копи-паста
			РеализацияВладелецТовара = Рез.ВладелецТовара;
			Статус = Рез.Статус; 
			ПричинаНеВыполненияДоставки = Рез.ПричинаНеВыполненияДоставки;
			ПричинаОтказаПереноса = Рез.ПричинаОтказаПереноса;
			РеализацияНомер = Рез.РеализацияНомер;
			ЗаборКонтрагент = Рез.ЗаборКонтрагент;
			ЗаборНомер = Рез.ЗаборНомер;
			ДатаПереноса = Рез.ДатаПереноса;
			НомерВнешнегоЗаказа = Рез.НомерВнешнегоЗаказа;
			//--- БАО 26.07.2017 №1474
			
			Об = Рез.Док.ПолучитьОбъект();
			Об.ОбновлениеСтатусовРегламент(Подкл);
			Об.ОбновлениеТранзакцийРегламент(Подкл);
			
			//+++ БАО 26.07.2017 №1474
			//Попытка
			//	
			//	МенеджерЗаписи = РегистрыСведений.ОбработанныеДокументыОбновлениеСтатусовВАдминкеПоДаннымМП.СоздатьМенеджерЗаписи();
			//	МенеджерЗаписи.Период = ТекущаяДата();
			//	МенеджерЗаписи.Документ = Рез.Док;
			//	МенеджерЗаписи.Записать();
			//	
			//Исключение
			//КонецПопытки;
			//--- БАО 26.07.2017 №1474
			
			//+++ БАО 21.08.2017 №1716
			Если Рез.ЭтоРЕД Тогда
				МенеджерЗаписи = РегистрыСведений.рэОбъектыДляОбмена.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ТекущаяДата();
				МенеджерЗаписи.Метод = Перечисления.рэМетоды.UpdateInvoiceStatus;
				МенеджерЗаписи.Объект = Рез.Док;
				МенеджерЗаписи.Заказ  = Рез.Реализация;
				
				Если НЕ ЗначениеЗаполнено(Рез.ПричинаНеВыполненияДоставки) Тогда
					МенеджерЗаписи.Операция = Перечисления.реОперацииПередачиСтатусов.Выполнен;
				ИначеЕсли Рез.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Рез.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
					МенеджерЗаписи.Операция = Перечисления.реОперацииПередачиСтатусов.Перенос;
				Иначе
					МенеджерЗаписи.Операция = Перечисления.реОперацииПередачиСтатусов.Отменен;
				КонецеСли;	
				
				МенеджерЗаписи.Записать();
			КонецЕсли;	
			//--- БАО 21.08.2017 №1716
			
			МассивПолучателей = Новый Массив;
			//Серегин М.В. 19.08.2015 17:06:59 отсылка писем если были проблемы с доставкой, только для яндекса,ММ Авиапарк и ММ БелаяДача
			//Если РеализацияВладелецТовара = Shop_248 Или РеализацияВладелецТовара = Shop_601 ИЛИ РеализацияВладелецТовара = Shop_752 Тогда  //Яндекс.Доставка
			Если ВладелецТовараКод = "Shop_248"	Или ВладелецТовараКод = "Shop_601" Или ВладелецТовараКод = "Shop_752" Тогда
				
				Если Статус = НеВыполнена  
					ИЛИ ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) 
					ИЛИ ЗначениеЗаполнено(ПричинаОтказаПереноса) Тогда
					
					//Если НЕ smv.ВЗаказеТолькоУслугиПоЗаказам(РеализацияНомер) Тогда 
					//МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
					//МассивПолучателей.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
					//МассивПолучателей.Добавить("support@delivery.yandex.ru");
					МассивПолучателей.Добавить("delivery@support.yandex.ru");
					//ОтправитьСообщенияПоНеДоставленнымЗаказам(РеализацияНомер, НомерВнешнегоЗаказа, ПричинаНеВыполненияДоставки, ПричинаОтказаПереноса, ДатаПереноса, МассивПолучателей);
					//КонецЕсли; 
					
				КонецЕсли;
			//ИначеЕсли РеализацияВладелецТовара = Shop_855 Тогда  //Связной
			ИначеЕсли ВладелецТовараКод = "Shop_855" Тогда
				
				
				Если Статус = НеВыполнена  
					ИЛИ ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) 
					ИЛИ ЗначениеЗаполнено(ПричинаОтказаПереноса) Тогда
					
					//Если НЕ smv.ВЗаказеТолькоУслугиПоЗаказам(РеализацияНомер) Тогда 
					//МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
					//МассивПолучателей.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
					//МассивПолучателей.Добавить("support@delivery.yandex.ru");
					МассивПолучателей.Добавить("InternetMag@svyaznoy.ru");
					МассивПолучателей.Добавить("yulia.semenova@strizh-logistic.ru");
					ОтправитьСообщенияПоНеДоставленнымЗаказам(РеализацияНомер, НомерВнешнегоЗаказа, ПричинаНеВыполненияДоставки, ПричинаОтказаПереноса, ДатаПереноса, МассивПолучателей);
					//КонецЕсли; 
					
				КонецЕсли;
				
			//Геннадий 06.07.2021 ->	
			//переписка Ю. Семенова
			//ИначеЕсли РеализацияВладелецТовара = Shop_833 Тогда  //Yandex.Dostavka
			ИначеЕсли ВладелецТовараКод = "Shop_833" Тогда
			
				Если Статус = НеВыполнена  
					ИЛИ ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) 
					ИЛИ ЗначениеЗаполнено(ПричинаОтказаПереноса) Тогда
			
					МассивПолучателей.Добавить("yulia.semenova@strizh-logistic.ru");
					ОтправитьСообщенияПоНеДоставленнымЗаказам(РеализацияНомер, НомерВнешнегоЗаказа, ПричинаНеВыполненияДоставки, ПричинаОтказаПереноса, ДатаПереноса, МассивПолучателей);
			
				КонецЕсли;
			//Геннадий 06.07.2021 <-	
			
			//ИначеЕсли РеализацияВладелецТовара = Shop_316 //ММ "АвиаПарк" 
			//	ИЛИ РеализацияВладелецТовара = Shop_256 Тогда //ММ Белая Дача
			ИначеЕсли ВладелецТовараКод = "Shop_316" Или ВладелецТовараКод = "Shop_256" Тогда
				
				Если Статус = НеВыполнена 
					ИЛИ ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) 
					ИЛИ ЗначениеЗаполнено(ПричинаОтказаПереноса) Тогда
					
					Если НЕ smv.ВЗаказеТолькоУслугиПоЗаказам(РеализацияНомер) Тогда 
						МассивПолучателей.Добавить("v.yakurnov@strizh-logistic.ru");
						МассивПолучателей.Добавить("yulia.semenova@strizh-logistic.ru");
						
						//Если РеализацияВладелецТовара = Shop_316 Тогда
						Если ВладелецТовараКод = "Shop_316" Тогда
							МассивПолучателей.Добавить("Zotov@mediamarkt.ru");
							МассивПолучателей.Добавить("Nesterova@mediamarkt.ru");
							МассивПолучателей.Добавить("kozloval@mediamarkt.ru");
							
						//ИначеЕсли РеализацияВладелецТовара = Shop_256 Тогда
						ИначеЕсли ВладелецТовараКод = "Shop_256" Тогда
							МассивПолучателей = smv.ПолучитьМассивПолучателейЭлектроннойПочты(РеализацияВладелецТовара,ЛогистическаяРассылка,МассивПолучателей);
							МассивПолучателей.Добавить("zaushnikov@mediamarkt.ru");
							МассивПолучателей.Добавить("fominr@mediamarkt.ru");
							МассивПолучателей.Добавить("solovyovs@mediamarkt.ru");
							
						КонецЕсли;
						
						//ОтправитьСообщенияПоНеДоставленнымЗаказам(РеализацияНомер, НомерВнешнегоЗаказа, ПричинаНеВыполненияДоставки, ПричинаОтказаПереноса, ДатаПереноса, МассивПолучателей);
					КонецЕсли;
					
				КонецЕсли; 
				//Асеев 03.10.2022 (по письму Отчет о переносах)>>>
			ИначеЕсли ВладелецТовараКод = "Shop_899" Или ВладелецТовараКод = "Shop_900" Или ВладелецТовараКод = "Shop_920" Или ВладелецТовараКод = "Shop_921" Или ВладелецТовараКод = "Shop_946" Тогда

				Если ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
					//МассивПолучателей.Добавить("logistika@ideas4retail.ru");
					//МассивПолучателей.Добавить("ecomlogistics@ideas4retail.ru");
					МассивПолучателей.Добавить("ecomlogistics@s4r.group");
					МассивПолучателей.Добавить("cc@s4r.group");
					РассылкаПоПереносуДоставки(МассивПолучателей, Рез.Док, Рез.Рейс);
				КонецЕсли;
				//Асеев 03.10.2022 (по письму Отчет о переносах)<<<
				
			//РусКлимата и подчиненных ЮЛ (ИП Окунева, ИП Кобцев, ИП Ислямова, ТехЭйр, ИП Мельникова)
			//ИначеЕсли ВладелецТовараКод = "Shop_655" Или ВладелецТовараКод = "Shop_916" Или ВладелецТовараКод = "Shop_913" Или ВладелецТовараКод = "Shop_915" Или ВладелецТовараКод = "Shop_912" Или ВладелецТовараКод = "Shop_914" Тогда
			//	
			//	Если ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) Тогда
			//		МассивПолучателей.Добавить("y.semichastnov@strizh-logistic.ru");
			//		МассивПолучателей.Добавить("stanislav.tumakov@strizh-logistic.ru");
			//		МассивПолучателей.Добавить("logist@strizh-logistic.ru");
			//		РассылкаПоПереносуДоставки(МассивПолучателей, Рез.Док, Рез.Рейс);
			//	КонецЕсли;
				
			//ИП Журавлев
			//ИначеЕсли ВладелецТовараКод = "Shop_927" Тогда
			//	
			//	Если ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) Тогда
			//		МассивПолучателей.Добавить("yulia.semenova@strizh-logistic.ru");
			//		МассивПолучателей.Добавить("y.semichastnov@strizh-logistic.ru");
			//		МассивПолучателей.Добавить("stanislav.tumakov@strizh-logistic.ru");
			//		РассылкаПоПереносуДоставки(МассивПолучателей, Рез.Док, Рез.Рейс);
			//	КонецЕсли;
				
			КонецЕсли;
			
			//Асеев 12.05.2023 (по письму Контроль заказов)>>>
			Если ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) Тогда
				ОтправкаОтчетовСервер.РассылкаКонтрольЗаказов(Рез.Док, Рез.Рейс, Рез.ВладелецТовара);
			КонецЕсли;
			//Асеев 12.05.2023 (по письму Контроль заказов)<<<
			
		ИначеЕсли ЗначениеЗаполнено(Рез.Забор) Тогда  // Если Забор
			
			ЗаборКонтрагентКод = СокрЛП(Рез.ЗаборКонтрагентКод);
			
			Об = Рез.Док.ПолучитьОбъект();
			Об.ОбновлениеСтатусовРегламент(Подкл);
			
			МассивПолучателей = Новый Массив;
			//Серегин М.В. 19.08.2015 17:06:59 отсылка писем если были проблемы с доставкой, только для яндекса,ММ Авиапарк и ММ БелаяДача
			//Если ЗаборКонтрагент = Shop_248 Или ЗаборКонтрагент = Shop_601 ИЛИ ЗаборКонтрагент = Shop_752 Тогда  //Яндекс.Доставка
			Если ЗаборКонтрагентКод = "Shop_248" Или ЗаборКонтрагентКод = "Shop_601" Или ЗаборКонтрагентКод = "Shop_752" Тогда
				
				
				Если Статус = НеВыполнена 
					ИЛИ ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) 
					ИЛИ ЗначениеЗаполнено(ПричинаОтказаПереноса) Тогда
					
					Если НЕ smv.ВЗаказеТолькоУслугиПоЗаказам(ЗаборНомер) Тогда 
						//МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
						//МассивПолучателей.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
						МассивПолучателей.Добавить("support@delivery.yandex.ru");
						//ОтправитьСообщенияПоНеДоставленнымЗаказам(РеализацияНомер, НомерВнешнегоЗаказа, ПричинаНеВыполненияДоставки, ПричинаОтказаПереноса, ДатаПереноса,МассивПолучателей);
					КонецЕсли; 
					
				КонецЕсли;
				
				
			//ИначеЕсли ЗаборКонтрагент = Shop_316 //ММ "АвиаПарк" 
			//	ИЛИ ЗаборКонтрагент = Shop_256 Тогда //ММ Белая Дача
			ИначеЕсли ЗаборКонтрагентКод = "Shop_316" Или ЗаборКонтрагентКод = "Shop_256" Тогда
				
				Если Статус = НеВыполнена 
					ИЛИ ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) 
					ИЛИ ЗначениеЗаполнено(ПричинаОтказаПереноса) Тогда
					
					Если НЕ smv.ВЗаказеТолькоУслугиПоЗаказам(ЗаборНомер) Тогда 
						МассивПолучателей.Добавить("v.yakurnov@strizh-logistic.ru");
						МассивПолучателей.Добавить("yulia.semenova@strizh-logistic.ru");
						
						//Если ЗаборКонтрагент = Shop_316 Тогда
						Если ЗаборКонтрагентКод = "Shop_316" Тогда
							МассивПолучателей.Добавить("Zotov@mediamarkt.ru");
							МассивПолучателей.Добавить("Nesterova@mediamarkt.ru");
							МассивПолучателей.Добавить("kozloval@mediamarkt.ru");
							
						//ИначеЕсли ЗаборКонтрагент = Shop_256 Тогда
						ИначеЕсли ЗаборКонтрагентКод = "Shop_256" Тогда
							МассивПолучателей = smv.ПолучитьМассивПолучателейЭлектроннойПочты(ЗаборКонтрагент, ЛогистическаяРассылка, МассивПолучателей);
							МассивПолучателей.Добавить("zaushnikov@mediamarkt.ru");
							МассивПолучателей.Добавить("fominr@mediamarkt.ru");
							МассивПолучателей.Добавить("solovyovs@mediamarkt.ru");
							
						КонецЕсли;
						
						//ОтправитьСообщенияПоНеДоставленнымЗаказам(РеализацияНомер, НомерВнешнегоЗаказа, ПричинаНеВыполненияДоставки, ПричинаОтказаПереноса, ДатаПереноса, МассивПолучателей);
					КонецЕсли;
					
				КонецЕсли; 
				
			//Геннадий 21.07.2021 ->
			//переписка Re:сорванные заборы - уведомление
			//ИначеЕсли ЗаборКонтрагент = Shop_697 Тогда
			ИначеЕсли ЗаборКонтрагентКод = "Shop_697" Тогда
				
				Если Статус = НеВыполнена  
					ИЛИ ЗначениеЗаполнено(ПричинаНеВыполненияДоставки) 
					ИЛИ ЗначениеЗаполнено(ПричинаОтказаПереноса) Тогда
			
					МассивПолучателей.Добавить("logist@strizh-logistic.ru");
					МассивПолучателей.Добавить("pretenzii@strizh-logistic.ru");
					МассивПолучателей.Добавить("syn@strizh-logistic.ru");
					ОтправитьСообщенияПоНеДоставленнымЗаказам(ЗаборНомер, НомерВнешнегоЗаказа, ПричинаНеВыполненияДоставки, ПричинаОтказаПереноса, ДатаПереноса, МассивПолучателей);
			
				КонецЕсли;
			//Геннадий 21.07.2021 <-				
			КонецЕсли;
			
			
			//+++ БАО 21.08.2017 №1716
			Попытка
				Если Рез.ЭтоРЕД Тогда
					
					МенеджерЗаписи = РегистрыСведений.рэОбъектыДляОбмена.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = ТекущаяДата();
					МенеджерЗаписи.Метод = Перечисления.рэМетоды.UpdateInvoiceStatus;
					МенеджерЗаписи.Объект = Рез.Док;
					МенеджерЗаписи.Заказ  = Рез.Забор;
					
					Если НЕ ЗначениеЗаполнено(Рез.ПричинаНеВыполненияДоставки) Тогда
						МенеджерЗаписи.Операция = Перечисления.реОперацииПередачиСтатусов.Выполнен;
					ИначеЕсли Рез.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки Или Рез.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
						МенеджерЗаписи.Операция = Перечисления.реОперацииПередачиСтатусов.Перенос;
					Иначе
						МенеджерЗаписи.Операция = Перечисления.реОперацииПередачиСтатусов.Отменен;
					КонецеСли;	
					
					МенеджерЗаписи.Записать();
				КонецЕсли;
			Исключение
			КонецПопытки;
			//--- БАО 21.08.2017 №1716
			
			//Асеев 10.03.2022 (по письму Рассылка по проблемным заборам)>>>
			Если Рез.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда
				Или Рез.ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом
				Тогда
				РассылкаПоПроблемомуЗабору(Рез.ЗаборКонтрагент, Рез.Док, Рез.Рейс);
			КонецЕсли;
			//Асеев 10.03.2022 (по письму Рассылка по проблемным заборам)<<<
			
		КонецеСли;
	КонецЦикла;	
	
	Если Подкл <> Неопределено Тогда
		
		Евген.ОтключитьсяОтADO(Подкл);
		
	КонецЕсли;
	
	
КонецПроцедуры

//Асеев 10.03.2022 (по письму Рассылка по проблемным заборам)>>>
Процедура РассылкаПоПроблемомуЗабору(Контрагент, ДанныеЗаказаВодителя, Рейс)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РассылкиКонтрагентов.Почта КАК Почта
	|ИЗ
	|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
	|ГДЕ
	|	РассылкиКонтрагентов.Контрагент = &Контрагент
	|	И РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(Перечисление.ТипыРассылки.ЗаборнаяЛогистика)
	|	И РассылкиКонтрагентов.Почта ПОДОБНО ""%@%""
	|	И РассылкиКонтрагентов.Активна";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаказаВодителя);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор
	|ПОМЕСТИТЬ ВТ_Транспорт
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаборТовара.Номер КАК НомерЗаказаСтриж,
	|	ЗаборТовара.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
	|	ЕСТЬNULL(ЗаборТовара.Контрагент.Наименование, """") КАК КонтрагентНаименование,
	|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки.Наименование КАК ПричинаНеВыполненияДоставкиНаименование,
	|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса.Наименование КАК ПричинаОтказаПереносаНаименование,
	|	ЗаборТовара.АдресДоставки КАК АдресДоставки,
	|	ВТ_Транспорт.Транспорт.НомерГосударственнойРегистрации КАК НомерТС,
	|	ВТ_Транспорт.Водитель.Наименование КАК ФИОВодителя,
	|	ВТ_Транспорт.Экспедитор.Наименование КАК ФИОЭкспедитора,
	|	ЕСТЬNULL(ОперативноеНазначениеТАНаРейсСрезПоследних.ТА.Телефон, ТелефонныеАппаратыТранспортаСрезПоследних.ТА.Телефон) КАК ТелефонЭкипажа
	|ИЗ
	|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|		ПО (ДанныеЗаказаВодителя.Ссылка = &Ссылка)
	|			И ДанныеЗаказаВодителя.Забор = ЗаборТовара.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелефонныеАппаратыТранспорта.СрезПоследних(
	|				,
	|				Транспорт В
	|					(ВЫБРАТЬ
	|						ВТ_Транспорт.Транспорт КАК Транспорт
	|					ИЗ
	|						ВТ_Транспорт КАК ВТ_Транспорт)) КАК ТелефонныеАппаратыТранспортаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперативноеНазначениеТАНаРейс.СрезПоследних(, Рейс = &Рейс) КАК ОперативноеНазначениеТАНаРейсСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		МассивПолучателей = Результат.Выгрузить().ВыгрузитьКолонку("Почта");
		
		ТемаПисьма = Выборка.КонтрагентНаименование + " - проблемный забор";
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить("Номер заказа Стриж: " + СокрЛП(Выборка.НомерЗаказаСтриж));
		МассивСтрок.Добавить("Номер заказа ИМ: " + СокрЛП(Выборка.НомерЗаказаИМ));
		МассивСтрок.Добавить("Статус: " + Выборка.ПричинаНеВыполненияДоставкиНаименование);
		МассивСтрок.Добавить("Причина отказа: " + Выборка.ПричинаОтказаПереносаНаименование);
		МассивСтрок.Добавить("Адрес доставки: " + Выборка.АдресДоставки);
		МассивСтрок.Добавить("Номер авто: " + Выборка.НомерТС);
		МассивСтрок.Добавить("Водитель: " + Выборка.ФИОВодителя);
		Если Выборка.ФИОЭкспедитора <> Null Тогда
			МассивСтрок.Добавить("Экспедитор: " + Выборка.ФИОЭкспедитора);
		КонецЕсли;
		МассивСтрок.Добавить("Телефон экипажа: " + Выборка.ТелефонЭкипажа);
		
		ТекстПисьма = СтрСоединить(МассивСтрок, Символы.ПС);
		
		ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма,, "Логистическая компания ""Стриж""");
	КонецЕсли;
	
КонецПроцедуры
//Асеев 10.03.2022 (по письму Рассылка по проблемным заборам)<<<

//Асеев 03.10.2022 (по письму Отчет о переносах)>>>
Процедура РассылкаПоПереносуДоставки(МассивПолучателей, ДанныеЗаказаВодителя, Рейс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаказаВодителя);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор КАК Экспедитор
	|ПОМЕСТИТЬ ВТ_Транспорт
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК НомерЗаказаСтриж,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
	|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки.Наименование КАК ПричинаНеВыполненияДоставкиНаименование,
	|	ДанныеЗаказаВодителя.ПричинаОтказаПереноса.Наименование КАК ПричинаОтказаПереносаНаименование,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Наименование КАК АдресДоставки,
	|	ВТ_Транспорт.Транспорт.НомерГосударственнойРегистрации КАК НомерТС,
	|	ВТ_Транспорт.Водитель.Наименование КАК ФИОВодителя,
	|	ВТ_Транспорт.Экспедитор.Наименование КАК ФИОЭкспедитора,
	|	ЕСТЬNULL(ОперативноеНазначениеТАНаРейсСрезПоследних.ТА.Телефон, ТелефонныеАппаратыТранспортаСрезПоследних.ТА.Телефон) КАК ТелефонЭкипажа,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ВладелецТовара.Наименование, """") КАК КонтрагентНаименование,
	|	ДанныеЗаказаВодителя.ПричинаНеВыполненияДоставки В (ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки), ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносСЗаездом)) КАК ЭтоПеренос
	|ИЗ
	|	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|			ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	|		ПО (ДанныеЗаказаВодителя.Ссылка = &Ссылка)
	|			И ДанныеЗаказаВодителя.Реализация = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Транспорт КАК ВТ_Транспорт
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелефонныеАппаратыТранспорта.СрезПоследних(
	|				,
	|				Транспорт В
	|					(ВЫБРАТЬ
	|						ВТ_Транспорт.Транспорт КАК Транспорт
	|					ИЗ
	|						ВТ_Транспорт КАК ВТ_Транспорт)) КАК ТелефонныеАппаратыТранспортаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперативноеНазначениеТАНаРейс.СрезПоследних(, Рейс = &Рейс) КАК ОперативноеНазначениеТАНаРейсСрезПоследних
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЭтоПеренос Тогда
			ТемаПисьма = "Перенос доставки " + Выборка.КонтрагентНаименование;
		Иначе
			ТемаПисьма = Выборка.КонтрагентНаименование + " - проблемная доставка";
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить("Номер заказа Стриж: " + СокрЛП(Выборка.НомерЗаказаСтриж));
		МассивСтрок.Добавить("Номер заказа ИМ: " + СокрЛП(Выборка.НомерЗаказаИМ));
		МассивСтрок.Добавить("Статус: " + Выборка.ПричинаНеВыполненияДоставкиНаименование);
		МассивСтрок.Добавить("Причина отказа: " + Выборка.ПричинаОтказаПереносаНаименование);
		МассивСтрок.Добавить("Адрес доставки: " + Выборка.АдресДоставки);
		МассивСтрок.Добавить("Номер авто: " + Выборка.НомерТС);
		МассивСтрок.Добавить("Водитель: " + Выборка.ФИОВодителя);
		Если Выборка.ФИОЭкспедитора <> Null Тогда
			МассивСтрок.Добавить("Экспедитор: " + Выборка.ФИОЭкспедитора);
		КонецЕсли;
		МассивСтрок.Добавить("Телефон экипажа: " + Выборка.ТелефонЭкипажа);
		
		ТекстПисьма = СтрСоединить(МассивСтрок, Символы.ПС);
		
		ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма,, "Логистическая компания ""Стриж""");
	КонецЕсли;
	
КонецПроцедуры
//Асеев 03.10.2022 (по письму Отчет о переносах)<<<

//+++ БАО 26.07.2017 №1474
//переделал
Процедура ОтправитьСообщенияПоНеДоставленнымЗаказам(РеализацияНомер, НомерВнешнегоЗаказа, ПричинаНеВыполненияДоставки, ПричинаОтказаПереноса, ДатаПереноса, МассивПолучателей) Экспорт
	
	ТекстСообщения = "Заказ №:"+СокрЛП(РеализацияНомер)+"/"+ НомерВнешнегоЗаказа+"
	|Результат доставки: Не доставлен
	|Причина не выполнения: "+ ПричинаНеВыполненияДоставки+"
	|Причина отказа/переноса: " + ПричинаОтказаПереноса+"";
	
	//Для переносов дополнительно выводим дату переноса если заполнена
	Если ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки 
		ИЛИ ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь 
		ИЛИ ПричинаНеВыполненияДоставки = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
		Если ЗначениеЗаполнено(ДатаПереноса) Тогда
			ТекстСообщения = ТекстСообщения+Символы.ПС+"Дата переноса: "+ДатаПереноса;    
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовкаСообщения = "Заказ №:"+СокрЛП(РеализацияНомер)+"/"+НомерВнешнегоЗаказа+" не доставлен.";
	ОтправитьСообщение(МассивПолучателей,ТекстЗаголовкаСообщения,ТекстСообщения,,"Логистическая компания ""Стриж""");
КонецПроцедуры
//--- БАО 26.07.2017 №1474


Функция ПолучитьУзелПланаОбмена(ID) Экспорт
	Най = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(СокрЛП(ID));
	Если Най.Пустая() Тогда
		Нов = ПланыОбмена.ИзмененияДляМП.СоздатьУзел();
		Нов.Код = СокрЛП(ID);
		Нов.ДатаСоздания = ТекущаяДата();
		Нов.Записать();
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.РегиональныеТерминалы);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.новаВодители); 
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.новаТранспорт);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.ПричиныНеВыполненияДоставки);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.ТарифныеСетки);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.Организации);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.ШаблоныСМСРассылок);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.новаЭкспедиторы);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.ТипыПрикрепленныхДокументов);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.ПричиныОтказаПереноса);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.ПоставщикиТоваров);
		ПланыОбмена.ЗарегистрироватьИзменения(Нов.Ссылка, Метаданные.Справочники.КалендариДоставки);
		
		РаботаСМобильнымПриложениемЭкипажейСервер.ИнициализироватьРегистрациюИзмененийПоПартнерам(Нов.Ссылка);
		Най = Нов.Ссылка;
	КонецеСли;
	Возврат Най.Ссылка;
КонецФункции

Процедура ЗагрузкаЗаказовИзПочты() Экспорт
	
	//Асеев 21.09.2021 (Задача № 4661)>>>
	ЗагрузкаДанныхИзПочтыСервер.ЗагрузкаШКИзПочты();
	//Асеев 21.09.2021 (Задача № 4661)<<<
	
	МасАдресатовОшибки = Новый Массив;
	МасАдресатовОшибки.Добавить("m.aseev@strizh-logistic.ru");
	МасАдресатовОшибки.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	
	ОшибкаЗаписиВнешнегоИсточника = "";
	
	Попытка
		
		// ТЕСТ lem.ОтправитьСообщение(МасАдресатовОшибки, "Загрузки заказов ТЕСТ", "Перед выполнением", ,"Стриж УТЛ");
		
		П = Новый ИнтернетПочтовыйПрофиль;
		
		П.АдресСервераPOP3 = "pop.mail.ru";
		П.ПортPOP3 = 995;
		П.АдресСервераIMAP = "imap.mail.ru";
		П.ПортIMAP = 993;
		П.ТолькоЗащищеннаяАутентификацияPOP3 = Ложь;
		П.ИспользоватьSSLPOP3 = Истина;
		
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			
			П.ПользовательIMAP = "test_order_load_strizh@mail.ru";
			П.Пользователь = "test_order_load_strizh@mail.ru";
			
			П.Пароль = "DosTup338";
			П.ПарольIMAP  = "DosTup338";
			
		Иначе
			
			П.ПользовательIMAP = "order_load_strizh@mail.ru";
			П.Пользователь = "order_load_strizh@mail.ru";
			
			//П.Пароль = "losir7_^534qtg";
			//П.ПарольIMAP  = "losir7_^534qtg";
			
			П.Пароль = "D8QX8Bdemiafd2xEemj3";
			П.ПарольIMAP  = "D8QX8Bdemiafd2xEemj3";
			
			//D8QX8Bdemiafd2xEemj3
		КонецЕсли;
	
		#Область КодКУдалениюЗагрузкаЗаказовИзПочты2
		
		//   	П.АдресСервераPOP3 = "pop.yandex.ru";
		//   	П.ПортPOP3 = 995;
		//   	
		//   	П.АдресСервераIMAP = "imap.yandex.ru";
		//   	П.ПортIMAP = 993;
		//   	
		//   	//П.ИспользоватьSSLIMAP = Истина; /////
		//   	//П.ТолькоЗащищеннаяАутентификацияIMAP=Ложь; //////
		//   	
		//   	////+++ БАО 31.08.2017 №1762
		//   	//Если Константы.ЭтоТестоваяБД.Получить() Тогда
		//   	//	
		//   	//	//П.ПользовательIMAP = "aleksandr.mihushkin@strizh-logistic.ru";
		//   	//	//П.Пользователь = "aleksandr.mihushkin@strizh-logistic.ru";
		//   	//	//П.Пароль = "Vb[eirby67#$";
		//   	//	//П.ПарольIMAP = "Vb[eirby67#$";
		//   	//	
		//   	//	П.ПользовательIMAP = "artur.borisov@strizh-logistic.ru";
		//   	//	П.Пользователь = "artur.borisov@strizh-logistic.ru";
		//   	//	П.Пароль = "2017Artur";
		//   	//	П.ПарольIMAP = "2017Artur";
		//   	
		//   	//Иначе 
		//   	////--- БАО 31.08.2017 №1762	
		//   	
		//   	
		//   	П.ПользовательIMAP = "order_load@strizh-logistic.ru";
		//   	П.Пользователь = "order_load@strizh-logistic.ru";
		//   	
		//   	П.Пароль = "losir7_^534qtg";
		//   	П.ПарольIMAP  = "losir7_^534qtg";
		//
		//   	//П.Пароль = "Pa$$word";
		//   	//П.ПарольIMAP = "Pa$$word";		
		//   	
		//   	
		//   	////+++ БАО 31.08.2017 №1762	
		//   	//КонецЕсли;
		//   	////--- БАО 31.08.2017 №1762
		
		
		
		//		П.ИспользоватьSSLPOP3 = Истина;
		#КонецОбласти
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	РассылкиКонтрагентов.Контрагент,
		|	РассылкиКонтрагентов.Почта,
		|	РассылкиКонтрагентов.Контрагент.ШаблонЗагрузкиExcel КАК ШаблонЗагрузки
		|ИЗ
		|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
		|ГДЕ
		|	РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(перечисление.типырассылки.ЗагрузкаЗаказов)";
		ТабПочты = зап.Выполнить().Выгрузить();			
		
		//+Степанов
		Для Каждого СтрокаТЧ Из ТабПочты Цикл
			СтрокаТЧ.Почта = ВРег(СтрокаТЧ.Почта);
		КонецЦикла;	
		//-Степанов
		
		Поч = Новый ИнтернетПочта;
		
		попытка
			///Поч.Подключиться(п, ПротоколИнтернетПочты.IMAP); //////
			Поч.Подключиться(п); //////
			
		Исключение
			Ошибка = ОписаниеОшибки();
			lem.ОтправитьСообщение(МасАдресатовОшибки, "Ошибка загрузки заказов (подключение)", Ошибка, ,"Стриж УТЛ");
			
			Возврат;
		КонецПопытки;	
		
		Струк = Новый Структура;
		//Струк.Вставить("Тема", "list of demands");
		Струк.Вставить("Тема", "list of orders");
		
		МассивПисем = Поч.ПолучитьЗаголовки();   //Струк
		
		//ТЕСТ lem.ОтправитьСообщение(МасАдресатовОшибки, "Загрузки заказов (подключение)", "Получили заголовки", ,"Стриж УТЛ");
		
		
		МасЗаг = Новый Массив;
		Для Сч = 0 По МассивПисем.Количество() - 1 Цикл
			//+Степанов
			//НайК = ТабПочты.Найти(МассивПисем[Сч].Отправитель.Адрес);
			НайК = ТабПочты.Найти(ВРег(МассивПисем[Сч].Отправитель.Адрес));
			//-Степанов
			Если НайК = Неопределено Тогда
				Продолжить;
			конецеСли;
			МасЗаг.Добавить(МассивПисем[Сч]);
		КонецЦикла;
		
		Если МасЗаг.Количество() = 0 Тогда
			Возврат;
		КонецеСли;	
		
		
		МассивПисем = Поч.Выбрать(Истина, МасЗаг);
		
		//ТЕСТ lem.ОтправитьСообщение(МасАдресатовОшибки, "Загрузки заказов (подключение)", "Выбрали письма для загрузки", ,"Стриж УТЛ");
		
		ТекВремя = ТекущаяДата();
		Для Сч = 0 По МассивПисем.Количество() - 1 Цикл
			
			// Якурнов 20.08.2018 15:31:56
			МасП = Новый Массив;
			МасП_Вар2 = Новый Массив;
			
			//+Степанов
			//НайК = ТабПочты.Найти(МассивПисем[Сч].Отправитель.Адрес);
			НайК = ТабПочты.Найти(ВРег(МассивПисем[Сч].Отправитель.Адрес));
			//-Степанов
			Если Не ЗначениеЗаполнено(НайК.ШаблонЗагрузки) Тогда
				ШаблонЗагрузки = Справочники.ШаблоныЗагрузкиExcel.ОсновнойВариант;
			Иначе
				ШаблонЗагрузки = НайК.ШаблонЗагрузки;
			КонецеСли;	
			
			
			Для Каждого Тек Из ШаблонЗагрузки.РассылкаУведомлений Цикл
				Если Тек.Отправлять И Не Тек.ОтправлятьИсходникЗагрузки Тогда
					Если МасП.Найти(СокрЛП(Тек.Адрес)) = Неопределено Тогда
						МасП.Добавить(СокрЛП(Тек.Адрес));
					КонецеСли;
				ИначеЕсли Тек.Отправлять И Тек.ОтправлятьИсходникЗагрузки Тогда	
					Если МасП_Вар2.Найти(СокрЛП(Тек.Адрес)) = Неопределено Тогда
						МасП_Вар2.Добавить(СокрЛП(Тек.Адрес));
					КонецеСли;				
				КонецеСли;
			КонецЦикла;	
			
			Если МасП.Найти(МассивПисем[Сч].Отправитель.Адрес) = Неопределено Тогда
				МасП.Добавить(МассивПисем[Сч].Отправитель.Адрес);
			КонецеСли;	
			
			
			////++Отключено в рамках  Задача № 3497
			//Наб = РегистрыСведений.ДанныеКЗагрузкеИзПочты.СоздатьНаборЗаписей();
			//Наб.Отбор.Период.Установить(ТекВремя);
			////--Отключено в рамках  Задача № 3497 
			
			Для СчВл = 0 По МассивПисем[Сч].Вложения.Количество() - 1 Цикл
				Если Найти(НРег(МассивПисем[Сч].Вложения[СчВл].ИмяФайла), "xls") = 0 
					И Найти(НРег(МассивПисем[Сч].Вложения[СчВл].ИмяФайла), "xlsx") = 0 Тогда
					Продолжить;
				КонецеСли;
				
				//++Отключено в рамках  Задача № 3497 
				//ЗапЗагруженныхФайлов = Новый Запрос;
				//ЗапЗагруженныхФайлов.Текст = "ВЫБРАТЬ
				//|	ДанныеКЗагрузкеИзПочты.Период
				//|ИЗ
				//|	РегистрСведений.ДанныеКЗагрузкеИзПочты КАК ДанныеКЗагрузкеИзПочты
				//|ГДЕ
				//|	ДанныеКЗагрузкеИзПочты.ИмяФайла = &ИмяФайла";
				//ЗапЗагруженныхФайлов.УстановитьПараметр("ИмяФайла", СокрЛП(МассивПисем[Сч].Вложения[СчВл].ИмяФайла));							 
				//Рез = Зап.Выполнить();
				//Если Не Рез.Пустой() Тогда
				//--Отключено в рамках  Задача № 3497 
				//Нов = Наб.Добавить();
				//ЗаполнитьЗначенияСвойств(Нов, НайК);
				//Нов.Период = ТекВремя;
				//Нов.ШаблонЗагрузки = ШаблонЗагрузки;
				//Нов.ИмяФайла = МассивПисем[Сч].Вложения[СчВл].ИмяФайла;
				//Нов.Данные = Новый ХранилищеЗначения(МассивПисем[Сч].Вложения[СчВл].Данные, Новый СжатиеДанных(9));
				//Нов.Отправитель = МассивПисем[Сч].Отправитель.Адрес;
				//Нов.ТипЗагрузкиДанных = Перечисления.ТипыЗагрузкиДанных.EMAIL;
				//Нов.РежимЗагрузкиДанных = Перечисления.РежимыЗагрузкиДанных.ЗагрузкаЗаказовИзПочты;
				//ТабОш = Неопределено;
				//ТабЗ = Неопределено;
				//Ошибка = "";
				//--Отключено в рамках  Задача № 3497

				//++Задача № 3497				
				ПараметрыЗаписиЛога = ЗагрузкаДанныхИзПочтыСервер.ПараметрыЗаписиЛогаЗагрузкиДанных(Справочники.ТипыЗагружаемыхДанных.ЗагрузкаЗаказов);
				//Контрагент
				//ШаблонЗагрузки
				//ТипЗагрузкиДанных - EMAIL по умолчанию
				//РежимЗагрузкиДанных - определяется из ТипЗагружаемыхДанных
				//ТипЗагружаемыхДанных - ТипЗагружаемыхДанных передается как паарметр метода, если не передается, то Справочники.ТипыЗагружаемыхДанных.ЗагрузкаЗаказов
				//ИмяФайла
				//Данные
				//ДанныеЗагружены
				//Отправитель
				ПараметрыЗаписиЛога.Контрагент = НайК.Контрагент;
				ПараметрыЗаписиЛога.ШаблонЗагрузки = ШаблонЗагрузки;
				ПараметрыЗаписиЛога.ИмяФайла = МассивПисем[Сч].Вложения[СчВл].ИмяФайла;
				ПараметрыЗаписиЛога.Данные = МассивПисем[Сч].Вложения[СчВл].Данные;
				ПараметрыЗаписиЛога.Отправитель = МассивПисем[Сч].Отправитель.Адрес;
				
				ЗагрузкаДанныхИзПочтыСервер.ЗаписатьСтрокуЛогаЗагрузкиДанных(ПараметрыЗаписиЛога, ОшибкаЗаписиВнешнегоИсточника); 
				//--Задача № 3497

				Попытка
						
					Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
						
						lem.ВыполнитьЗагрузкуИзПочты_Фоновое(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, МасП, МасП_Вар2);
						
					Иначе
						// МАС - 14.06.2018 - №2268 - Распараллелить регл. задания по загрузке заказов и АПП из почты --->> 					
						Параметры = Новый Массив;
						Параметры.Добавить(НайК.Контрагент);
						Параметры.Добавить(ШаблонЗагрузки);
						Параметры.Добавить(МассивПисем[Сч].Вложения[СчВл].Данные);
						Параметры.Добавить(МассивПисем[Сч].Вложения[СчВл].ИмяФайла);
						Параметры.Добавить(МасП);
						Параметры.Добавить(МасП_Вар2);
						
						ФоновыеЗадания.Выполнить("lem.ВыполнитьЗагрузкуИзПочты_Фоновое", 
						Параметры, Новый УникальныйИдентификатор, "Фоновая обработка загрузки заказов из почты");  
					КонецЕслИ;	
						
						#Область КодКУдалениюЗагрузкаЗаказовИзПочты
						
						// <<--- МАС 
						
						
						
						//// МАС - 14.06.2017 - №1074 --->> 
						////Если НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_652") Тогда
						//Если НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_652") ИЛИ НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_694") Тогда
						//// <<--- МАС 
						//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_Новый(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);					
						//// МАС - 22.09.2017 - № --->> 											
						////ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_655") Тогда	
						//ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_655") ИЛИ НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_716") Тогда   // Русклимат - Shop_655  ИЛИ  ООО "Тех-Эйр" - Shop_716
						//// <<--- МАС
						//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_Новый(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);	
						//ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_665")  Тогда // АШАН
						////ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_708")  Тогда // АШАН на тесте	
						//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_АШАН(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);	
						//ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_680")  Тогда // Loreal B2B - Shop_709
						//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_LOREALB2B(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);	
						////+++ БАО 31.08.2017 №1762	
						//ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_714")  Тогда // Техномарт(Technomart) - Shop_714
						//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_Техномарт(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);
						////--- БАО 31.08.2017 №1762	
						//// МАС - 27.12.2017 - № --->> 
						//ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_732")  Тогда // OnClimat - Shop_732
						//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_OnClimat(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);	
						//// <<--- МАС 
						//
						//// МАС - 23.05.2017 - №2254 --->> 
						//ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_747")  Тогда // ООО «СМЕГ Руссия» - Shop_747
						//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_SMEG(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);	
						//// <<--- МАС	
						//Иначе					
						//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);
						//КонецЕсли;
						
						#КонецОбласти
					Исключение
						Ошибка = "" + ОписаниеОшибки();
						#Если Клиент Тогда 
							Сообщить(ОписаниеОшибки());
						#КонецЕсли	
					КонецПопытки;
				//++Отключено в рамках  Задача № 3497 	
				//Иначе
				//	ТабП = Рез.Выгрузить();
				//	Ошибка = "Файл " + СокрЛП(МассивПисем[Сч].Вложения[СчВл].ИмяФайла) + " уже загружался! (" + Формат(ТабП[0].Период, "ДЛФ=DD") + ")";
				//КонецеСли;
				//--Отключено в рамках  Задача № 3497 
				
				#Область КодКУдалениюЗагрузкаЗаказовИзПочты2

				
				//Если Ошибка = "" Тогда
				//	ТабОш.Свернуть("Номер, Ошибка", "Кол");
				//	СтрокаПисьма = "";
				//	
				//	
				//	ТабФ = Новый ТабличныйДокумент;
				//	Мак = ПолучитьОбщийМакет("СоответствиеНомеровЗаказов");
				//	
				//	ОблШ = Мак.ПолучитьОбласть("Шапка");
				//	ОблСтр = Мак.ПолучитьОбласть("Строка");
				//	
				//	ОблШ.Параметры.Заг = "Список загруженных заказов от " + Формат(ТекущаяДата(), "ДЛФ=DDT");
				//	
				//	ТабФ.Вывести(ОблШ);
				//	
				//	НПП = 1;
				//	Если ТабЗ.Количество() <> 0 Тогда
				//		СтрокаПисьма = "Заказы загруженные: " + Символы.ПС;
				//		Для Каждого Тек Из ТабЗ Цикл
				//			СтрокаПисьма = СтрокаПисьма + Тек.Номер + Символы.ПС;
				//			
				//			ОблСтр.Параметры.НПП = НПП;
				//			ОблСтр.Параметры.НомерМагазина = СокрЛП(Тек.Номер);
				//			ОблСтр.Параметры.НомерДоставки = СокрЛП(Тек.НомерНаш);
				//			
				//			НПП = НПП + 1;
				//			ТабФ.Вывести(ОблСтр);
				//		КонецЦикла;
				//	КонецеСли;
				//	
				//	
				//	ЗагФ = КаталогВременныхФайлов() + "\list_order_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + ".xls";
				//	ТабФ.Записать(ЗагФ, ТипФайлаТабличногоДокумента.XLS);
				//	
				//	Если ТабОш.Количество() <> 0 Тогда
				//        
				//		СтрокаПисьма = СтрокаПисьма + "Заказы НЕ загруженные: " + Символы.ПС;
				//		Для Каждого Тек Из ТабОш Цикл
				//			СтрокаПисьма = СтрокаПисьма + Тек.Номер  + ": " + СокрЛП(Тек.Ошибка) + Символы.ПС;
				//			Тек.Кол = 1;
				//		КонецЦикла;
				//	КонецеСли;
				//Иначе
				//	СтрокаПисьма = "Заказы НЕ загружены! Фатальная ошибка: " + Ошибка;
				//КонецеСли;
				//
				//Если табОш <> Неопределено Тогда
				//	ТабОш.Свернуть("Номер", "Кол");
				//
				//	СтрокаПисьма = СтрокаПисьма + Символы.ПС + "Количество загруженных: " + Строка(ТабЗ.Количество()) + Символы.ПС + "Количество НЕзагруженных: " + Строка(ТабОш.Количество());
				//КонецеСли;	
				//
				//lem.ОтправитьСообщение(МасП, "Загрузка заказов", СтрокаПисьма, ЗагФ);
				//если МасП_Вар2.Количество() <> 0 Тогда
				//	МасФайлов = Новый Массив;
				//	МасФайлов.Добавить(КаталогВременныхФайлов() + "\" + МассивПисем[Сч].Вложения[СчВл].ИмяФайла);
				//	МасФайлов.Добавить(ЗагФ);
				//	lem.ОтправитьСообщение(МасП_Вар2, "Загрузка заказов", СтрокаПисьма, МасФайлов);
				//КонецеСли;
				#КонецОбласти
				
			КонецЦикла;	
			
			//++Задача № 3497
			//Если наб.Количество() <> 0 Тогда
			//	Наб.Записать();
			//КонецеСли;	
			//--Задача № 3497
		КонецЦикла;	
		
		Поч.Отключиться();
		
	Исключение		
		
		lem.ОтправитьСообщение(МасАдресатовОшибки, "Ошибка загрузки заказов", СокрЛП(ОписаниеОшибки()), ,"Стриж УТЛ");
		
	Конецпопытки;
	
КонецПроцедуры	

#Область КодКУдалениюЗагрузкаЗаказовИзПочтыВит


//// Якурнов 20.08.2018 14:26:04 Пробная
//Процедура ЗагрузкаЗаказовИзПочтыВит() Экспорт	
//	П = Новый ИнтернетПочтовыйПрофиль;
//	П.АдресСервераPOP3 = "pop.yandex.ru";
//	П.ПортPOP3 = 995;
//	
//	П.АдресСервераIMAP = "imap.yandex.ru";
//	П.ПортIMAP = 993;
//	
//	
//	
//	П.ПользовательIMAP = "v.yakurnov@strizh-logistic.ru";
//	П.Пользователь = "v.yakurnov@strizh-logistic.ru";
//	П.Пароль = "cDiVeb";
//	П.ПарольIMAP = "cDiVeb";		
//	
//	П.ИспользоватьSSLPOP3 = Истина;
//	
//	Контраг = Новый Массив;
//	Контраг.Добавить(Справочники.Контрагенты.НайтиПоКоду("Shop_747"));
//	Контраг.Добавить(Справочники.Контрагенты.НайтиПоКоду("Shop_93"));
//	
//	Зап = Новый Запрос;
//	Зап.Текст = "ВЫБРАТЬ
//	|	РассылкиКонтрагентов.Контрагент КАК Контрагент,
//	|	РассылкиКонтрагентов.Почта КАК Почта,
//	|	РассылкиКонтрагентов.Контрагент.ШаблонЗагрузкиExcel КАК ШаблонЗагрузки
//	|ИЗ
//	|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
//	|ГДЕ
//	|	РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(перечисление.типырассылки.ЗагрузкаЗаказов)
//	|	И РассылкиКонтрагентов.Контрагент В(&Контрагенты)";
//	зап.УстановитьПараметр("Контрагенты",Контраг);
//	ТабПочты = зап.Выполнить().Выгрузить();			
//	
//	
//	Поч = Новый ИнтернетПочта;
//	
//	попытка
//		Поч.Подключиться(п);
//	Исключение
//		Ошибка = ОписаниеОшибки();
//		Возврат;
//	КонецПопытки;	
//	
//	Струк = Новый Структура;
//	//Струк.Вставить("Тема", "list of demands");
//	Струк.Вставить("Тема", "list of orders");
//	
//	МассивПисем = Поч.ПолучитьЗаголовки();   //Струк
//	
//	
//	МасЗаг = Новый Массив;
//	Для Сч = 0 По МассивПисем.Количество() - 1 Цикл
//		НайК = ТабПочты.Найти(МассивПисем[Сч].Отправитель.Адрес);
//		Если НайК = Неопределено Тогда
//			Продолжить;
//		конецеСли;
//		МасЗаг.Добавить(МассивПисем[Сч]);
//	КонецЦикла;
//	
//	Если МасЗаг.Количество() = 0 Тогда
//		Возврат;
//	КонецеСли;	
//	
//	
//	МассивПисем = Поч.Выбрать(Истина, МасЗаг);
//	ТекВремя = ТекущаяДата();
//	Для Сч = 0 По МассивПисем.Количество() - 1 Цикл
//		
//		// Якурнов 20.08.2018 15:30:51
//		МасП = Новый Массив;
//		МасП_Вар2 = Новый Массив;
//		
//		
//		НайК = ТабПочты.Найти(МассивПисем[Сч].Отправитель.Адрес);
//		Если Не ЗначениеЗаполнено(НайК.ШаблонЗагрузки) Тогда
//			ШаблонЗагрузки = Справочники.ШаблоныЗагрузкиExcel.ОсновнойВариант;
//		Иначе
//			ШаблонЗагрузки = НайК.ШаблонЗагрузки;
//		КонецеСли;	
//		
//		
//		Для Каждого Тек Из ШаблонЗагрузки.РассылкаУведомлений Цикл
//			Если Тек.Отправлять И Не Тек.ОтправлятьИсходникЗагрузки Тогда
//				Если МасП.Найти(СокрЛП(Тек.Адрес)) = Неопределено Тогда
//					МасП.Добавить(СокрЛП(Тек.Адрес));
//				КонецеСли;
//			ИначеЕсли Тек.Отправлять И Тек.ОтправлятьИсходникЗагрузки Тогда	
//				Если МасП_Вар2.Найти(СокрЛП(Тек.Адрес)) = Неопределено Тогда
//					МасП_Вар2.Добавить(СокрЛП(Тек.Адрес));
//				КонецеСли;				
//			КонецеСли;
//		КонецЦикла;	
//		
//		Если МасП.Найти(МассивПисем[Сч].Отправитель.Адрес) = Неопределено Тогда
//			МасП.Добавить(МассивПисем[Сч].Отправитель.Адрес);
//		КонецеСли;	
//		
//		
//		
//		Наб = РегистрыСведений.ДанныеКЗагрузкеИзПочты.СоздатьНаборЗаписей();
//		Наб.Отбор.Период.Установить(ТекВремя);
//		
//		Для СчВл = 0 По МассивПисем[Сч].Вложения.Количество() - 1 Цикл
//			Если Найти(НРег(МассивПисем[Сч].Вложения[СчВл].ИмяФайла), "xls") = 0 Тогда
//				Продолжить;
//			КонецеСли;
//			
//			ЗапЗагруженныхФайлов = Новый Запрос;
//			ЗапЗагруженныхФайлов.Текст = "ВЫБРАТЬ
//			|	ДанныеКЗагрузкеИзПочты.Период
//			|ИЗ
//			|	РегистрСведений.ДанныеКЗагрузкеИзПочты КАК ДанныеКЗагрузкеИзПочты
//			|ГДЕ
//			|	ДанныеКЗагрузкеИзПочты.ИмяФайла = &ИмяФайла";
//			ЗапЗагруженныхФайлов.УстановитьПараметр("ИмяФайла", СокрЛП(МассивПисем[Сч].Вложения[СчВл].ИмяФайла));							 
//			Рез = Зап.Выполнить();
//			Если Не Рез.Пустой() Тогда
//				Нов = Наб.Добавить();
//				ЗаполнитьЗначенияСвойств(Нов, НайК);
//				Нов.Период = ТекВремя;
//				Нов.ШаблонЗагрузки = ШаблонЗагрузки;
//				Нов.ИмяФайла = МассивПисем[Сч].Вложения[СчВл].ИмяФайла;
//				Нов.Данные = Новый ХранилищеЗначения(МассивПисем[Сч].Вложения[СчВл].Данные, Новый СжатиеДанных(9));
//				Нов.Отправитель = МассивПисем[Сч].Отправитель.Адрес;
//				Нов.ТипЗагрузкиДанных = Перечисления.ТипыЗагрузкиДанных.EMAIL;
//				Нов.РежимЗагрузкиДанных = Перечисления.РежимыЗагрузкиДанных.ЗагрузкаЗаказовИзПочты;
//				ТабОш = Неопределено;
//				ТабЗ = Неопределено;
//				Ошибка = "";
//				
//				Попытка
//					
//					
//					// МАС - 14.06.2018 - №2268 - Распараллелить регл. задания по загрузке заказов и АПП из почты --->> 					
//					Параметры = Новый Массив;
//					Параметры.Добавить(НайК.Контрагент);
//					Параметры.Добавить(ШаблонЗагрузки);
//					Параметры.Добавить(МассивПисем[Сч].Вложения[СчВл].Данные);
//					Параметры.Добавить(МассивПисем[Сч].Вложения[СчВл].ИмяФайла);
//					Параметры.Добавить(МасП);
//					Параметры.Добавить(МасП_Вар2);
//					
//					//ВыполнитьЗагрузкуИзПочты(НайК.Контрагент,ШаблонЗагрузки,МассивПисем[Сч].Вложения[СчВл].Данные,МассивПисем[Сч].Вложения[СчВл].ИмяФайла,МасП,МасП_Вар2)					
//					ФоновыеЗадания.Выполнить("lem.ВыполнитьЗагрузкуИзПочтыВит", 
//					Параметры, Новый УникальныйИдентификатор, "Фоновая обработка загрузки заказов из почты");   			
//					// <<--- МАС 
//					
//					
//					
//					
//				Исключение
//					Ошибка = "" + ОписаниеОшибки();
//					#Если Клиент Тогда 
//						Сообщить(ОписаниеОшибки());
//					#КонецЕсли	
//				КонецПопытки;
//			Иначе
//				ТабП = Рез.Выгрузить();
//				Ошибка = "Файл " + СокрЛП(МассивПисем[Сч].Вложения[СчВл].ИмяФайла) + " уже загружался! (" + Формат(ТабП[0].Период, "ДЛФ=DD") + ")";
//			КонецеСли;
//			
//			
//		КонецЦикла;	
//		
//		Если наб.Количество() <> 0 Тогда
//			Наб.Записать();
//		КонецеСли;	
//	КонецЦикла;	
//	
//	Поч.Отключиться();
//	
//КонецПроцедуры	

//// Якурнов 20.08.2018 14:26:04 Пробная
//Процедура ВыполнитьЗагрузкуИзПочтыВит(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, МасП, МасП_Вар2) Экспорт
//	
//	
//	ТабОш = Неопределено;
//	ТабЗ = Неопределено;
//	Ошибка = "";	
//	
//	Попытка
//		
//		ДанныеЗагружены = ЗагрузкаДанныхИзПочтыСервер.ЗагрузитьДанныеИзФайлаExcelПоШаблону(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);					
//		
//	Исключение
//		
//		Ошибка = "" + ОписаниеОшибки();
//		#Если Клиент Тогда 
//			Сообщить(ОписаниеОшибки());
//		#КонецЕсли	
//		
//	КонецПопытки;
//	
//	
//	
//	Если Ошибка = "" Тогда
//		
//		ТабОш.Свернуть("Номер, Ошибка", "Кол");
//		СтрокаПисьма = "";	
//		
//		ТабФ = Новый ТабличныйДокумент;
//		Мак = ПолучитьОбщийМакет("СоответствиеНомеровЗаказов");
//		
//		ОблШ = Мак.ПолучитьОбласть("Шапка");
//		ОблСтр = Мак.ПолучитьОбласть("Строка");
//		
//		ОблШ.Параметры.Заг = "Список загруженных заказов от " + Формат(ТекущаяДата(), "ДЛФ=DDT");
//		
//		ТабФ.Вывести(ОблШ);
//		
//		НПП = 1;
//		Если ТабЗ.Количество() <> 0 Тогда
//			СтрокаПисьма = "Заказы загруженные: " + Символы.ПС;
//			Для Каждого Тек Из ТабЗ Цикл
//				СтрокаПисьма = СтрокаПисьма + Тек.Номер + Символы.ПС;
//				
//				ОблСтр.Параметры.НПП = НПП;
//				ОблСтр.Параметры.НомерМагазина = СокрЛП(Тек.Номер);
//				ОблСтр.Параметры.НомерДоставки = СокрЛП(Тек.НомерНаш);
//				
//				НПП = НПП + 1;
//				ТабФ.Вывести(ОблСтр);
//			КонецЦикла;
//		КонецеСли;
//		
//		ЗагФ = КаталогВременныхФайлов() + "\list_order_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + Строка(Контрагент) + ".xls";
//		ТабФ.Записать(ЗагФ, ТипФайлаТабличногоДокумента.XLS);
//		
//		Если ТабОш.Количество() <> 0 Тогда
//			
//			СтрокаПисьма = СтрокаПисьма + "Заказы НЕ загруженные: " + Символы.ПС;
//			Для Каждого Тек Из ТабОш Цикл
//				СтрокаПисьма = СтрокаПисьма + Тек.Номер  + ": " + СокрЛП(Тек.Ошибка) + Символы.ПС;
//				Тек.Кол = 1;
//			КонецЦикла;
//		КонецеСли;
//		
//		
//		// МАС - 20.06.2018 - № --->> 
//		Попытка			
//			Запрос = Новый Запрос("ВЫБРАТЬ
//			|	ДанныеКЗагрузкеИзПочты.Период КАК Период,
//			|	ДанныеКЗагрузкеИзПочты.Контрагент КАК Контрагент,
//			|	ДанныеКЗагрузкеИзПочты.ШаблонЗагрузки КАК ШаблонЗагрузки,
//			|	ДанныеКЗагрузкеИзПочты.ТипЗагрузкиДанных КАК ТипЗагрузкиДанных,
//			|	ДанныеКЗагрузкеИзПочты.РежимЗагрузкиДанных КАК РежимЗагрузкиДанных,
//			|	ДанныеКЗагрузкеИзПочты.ИмяФайла КАК ИмяФайла,
//			|	ДанныеКЗагрузкеИзПочты.Данные КАК Данные,
//			|	ДанныеКЗагрузкеИзПочты.ДанныеЗагружены КАК ДанныеЗагружены,
//			|	ДанныеКЗагрузкеИзПочты.Отправитель КАК Отправитель
//			|ИЗ
//			|	РегистрСведений.ДанныеКЗагрузкеИзПочты КАК ДанныеКЗагрузкеИзПочты
//			|ГДЕ
//			|	ДанныеКЗагрузкеИзПочты.Период >= &Период
//			|	И ДанныеКЗагрузкеИзПочты.ИмяФайла = &ИмяФайла
//			|	И ДанныеКЗагрузкеИзПочты.Контрагент = &Контрагент");
//			Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата() - 86400));
//			Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
//			Запрос.УстановитьПараметр("Контрагент", Контрагент);		
//			
//			Рез = Запрос.Выполнить().Выбрать();
//			
//			Если Рез.Следующий() Тогда				
//				Набор = РегистрыСведений.ДанныеКЗагрузкеИзПочты.СоздатьНаборЗаписей();
//				Набор.Отбор.Установить(Контрагент);
//				Набор.Прочитать();
//				НЗапись = Набор.Добавить();		
//				ЗаполнитьЗначенияСвойств(НЗапись, Рез);
//				НЗапись.Период = ТекущаяДата();
//				НЗапись.ДанныеЗагружены = Истина;				
//				Набор.Записать();		
//			КонецЕсли;
//			
//		Исключение					
//		КонецПопытки;			
//		// <<--- МАС	
//		
//	Иначе
//		СтрокаПисьма = "Заказы НЕ загружены! Фатальная ошибка: " + Ошибка;
//	КонецеСли;
//	
//	Если табОш <> Неопределено Тогда
//		ТабОш.Свернуть("Номер", "Кол");
//		
//		СтрокаПисьма = СтрокаПисьма + Символы.ПС + "Количество загруженных: " + Строка(ТабЗ.Количество()) + Символы.ПС + "Количество НЕзагруженных: " + Строка(ТабОш.Количество());
//	КонецеСли;	
//	
//	СтрокаПисьма = Строка(Контрагент) + Символы.ПС + СтрокаПисьма; 
//	lem.ОтправитьСообщение(МасП, "Загрузка заказов", СтрокаПисьма, ЗагФ);
//	если МасП_Вар2.Количество() <> 0 Тогда
//		МасФайлов = Новый Массив;
//		МасФайлов.Добавить(КаталогВременныхФайлов() + "\" + ИмяФайла);
//		МасФайлов.Добавить(ЗагФ);
//		lem.ОтправитьСообщение(МасП_Вар2, "Загрузка заказов", СтрокаПисьма, МасФайлов);
//	КонецеСли;
//	
//	
//	
//КонецПроцедуры
#КонецОбласти

Функция ПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент, ИмяФайла, НомерЛистаExcel = 1, Ошибка, curColumnNum = "AQ") Экспорт
	Попытка
		xlLastCell = 11;
		xlUp = -4171;
		xlDown = -4121;
		
		ВыбФайл = Новый Файл(ИмяФайла);
		Если НЕ ВыбФайл.Существует() Тогда 
			Возврат "Отсутствует файл!";
		КонецЕсли;
		
		Попытка
			Excel = Новый COMОбъект("Excel.Application");
			Excel.WorkBooks.Open(ИмяФайла);
			ExcelЛист = Excel.Sheets(НомерЛистаExcel);
		Исключение
			СписокПолучателей = Новый Массив;
			СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
			СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
			ТекстПисьма = ОписаниеОшибки() + " Путь к файлу: " + ИмяФайла;
			lem.ОтправитьСообщение(СписокПолучателей, "Тема", ТекстПисьма,,"Логистическая компания ""Стриж""",,,,,,Ложь); 
			Возврат ОписаниеОшибки();
		КонецПопытки;
		
		ТабличныйДокумент.Очистить();
		
		ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
		//RowCount = ActiveCell.Row;
		
		RowCount = ExcelЛист.UsedRange.Row + ExcelЛист.UsedRange.Rows.Count - 1;
		//Excel.Cells(ExcelЛист.Cells.Rows.Count, curColumnNum).End(xlUp).Row;
		Если RowCount > 5000 тогда
			RowCount = 5000;
		КонецЕсли;
		
		ColumnCount = ActiveCell.Column;
		Если ColumnCount > 100 Тогда
			ColumnCount = 100;
		КонецеСли;	
		Для Column = 1 По ColumnCount Цикл
			ТабличныйДокумент.Область("C" + Формат(Column, "ЧГ=")).ШиринаКолонки = ExcelЛист.Columns(Column).ColumnWidth;
		КонецЦикла;
		Для Row = 1 По RowCount Цикл
			
			Для Column = 1 По ColumnCount Цикл
				ТабличныйДокумент.Область("R" + Формат(Row, "ЧГ=") +"C" + Формат(Column, "ЧГ=")).Текст = ExcelЛист.Cells(Row,Column).Value;
			КонецЦикла;
			
		КонецЦикла;
		
		//xlFormulas = -4123; 
		//xlByRows=1;
		//xlPrevious = 2;
		//
		//getMaxRow = ExcelЛист.Cells.Find("*", ExcelЛист.Range("A1"), xlFormulas, , xlByRows, xlPrevious).Row;
		//ТабличныйДокумент.Записать("D:\Work_lem\ffff.mxl");
		Excel.WorkBooks.Close();
		Excel = 0;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Истина;
КонецФункции // ()

Функция ПроверитьСтрокуНаЗаполненность(СтрокаДанных, Шаблон) Экспорт
	Для Каждого Тек Из Шаблон.Поля Цикл
		Если Тек.ЗапретНеЗаполненныхЗначений Тогда
			Если Не ЗначениеЗаполнено(СтрокаДанных[СокрЛП(Тек.Поле.Наименование)]) Тогда
				Если Не ЗначениеЗаполнено(Тек.ЗначениеПоУмолчанию) Тогда
					Возврат "Не заполнено поле """ + СокрЛП(Тек.Поле.Наименование) + """";
				Иначе
					СтрокаДанных[СокрЛП(Тек.Поле.Наименование)] = Тек.ЗначениеПоУмолчанию;
				КонецеСли;	
			КонецеСли;	
		КонецеСли;	
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции


Функция ПроверитьСтрокуНаИгнорирование(СтрокаДанных, Шаблон) Экспорт
	Для Каждого Тек Из Шаблон.Поля Цикл
		Если Тек.ИгнорироватьПустыеЗначения Тогда
			Если Не ЗначениеЗаполнено(СтрокаДанных[СокрЛП(Тек.Поле.Наименование)]) Тогда
				Возврат Истина;
			КонецеСли;	
		КонецеСли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции


Функция ПропуститьСтроку(СтрокаДанных, Шаблон) Экспорт
	Для Каждого Тек Из Шаблон.Поля Цикл
		Если ЗначениеЗаполнено(Тек.ПропускаемыеЗначения) Тогда
			
			СтрокаЗначений = СтрЗаменить(Тек.ПропускаемыеЗначения, ";", Символы.ПС);
			МасЗначений = Новый Массив;
			
			Для Сч = 1 по СтрЧислоСтрок(СтрокаЗначений) Цикл
				МасЗначений.Добавить(СтрПолучитьСтроку(СтрокаЗначений, Сч));
			КонецЦикла;	
			
			Если МасЗначений.Найти(СокрЛП(СтрокаДанных[СокрЛП(Тек.Поле.Наименование)])) <> Неопределено Тогда
				Возврат Истина;
			КонецеСли;	
		КонецеСли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции


Функция ЗагрузитьДанныеИзФайлаExcelПоШаблону(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено)
	
	Перем ИтВес, Таб2;
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	ТабДок = Новый ТабличныйДокумент;	
	
	// МАС - 15.06.2018 - № --->> 
	//Если Не ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
	//	Возврат Ложь;
	//КонецЕсли;	
	Попытка
		ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Возврат Ложь;
	КонецПопытки;
	// <<--- МАС
	
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	ТабЗаказов.Колонки.Добавить("Адрес");
	ТабЗаказов.Колонки.Добавить("ВесОбщий");
	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
	ТабЗаказов.Колонки.Добавить("Итого");
	ТабЗаказов.Колонки.Добавить("КодТовара");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Количество");
	ТабЗаказов.Колонки.Добавить("КоличествоМест");
	ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("Район");
	ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	ТабЗаказов.Колонки.Добавить("ТелефонГородской");
	ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	ТабЗаказов.Колонки.Добавить("ФИО");
	ТабЗаказов.Колонки.Добавить("Штрихкод");
	ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("УлицаДоставки");
	ТабЗаказов.Колонки.Добавить("ГородДоставки");
	//Серегин М.В. 17.07.2015 10:54:44 
	ТабЗаказов.Колонки.Добавить("КатегорияДоставки");
	//Серегин М.В. 17.07.2015 10:54:59 
	
	ПослНомер = "";
	
	ПроливаемыеПоля = Новый Соответствие;
	
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Нов = ТабЗаказов.Добавить();
		Для СчКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				НайКолонка = Шаблон.Поля.Найти(СчКолонок, "Порядок");                               			
			Иначе
				НайКолонка = Шаблон.Поля.Найти(ТабДок.Область("R" + Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст, "Наименование");                               			
			КонецеСли;	
			
			//+Степанов Костыль для L'Oreal(B2B), там адрес разбит на две колонки.
			Если СчКолонок = 24 И СокрП(Контрагент.Код) = "Shop_680" Тогда
				НачалоАдреса = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок - 1, "ЧГ=")).Текст;
				КонецАдреса  = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
				Значение = НачалоАдреса + ?(СтрНачинаетсяС(КонецАдреса,",")," "," ,") + КонецАдреса;
			Иначе	
				Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
			КонецЕсли;

			Если НайКолонка = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			
			Нов[НайКолонка.Поле.Наименование] = Значение;
			
			Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
				НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
				Если НайденноеСоответствие <> Неопределено Тогда
					Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
				КонецеСли;	
			КонецеСли;	
			
			
			Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПослНомер = Значение;
				ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
					Нов[НайКолонка.Поле.Наименование] = ПослНомер;
				КонецеСли;	
			ИначеЕсли НайКолонка.ПроливатьЗначенияНаНеЗаполненныеЗначения Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПроливаемыеПоля.Вставить(НайКолонка.Поле.Наименование, Значение);
				ИначеЕсли ЗначениеЗаполнено(ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование)) Тогда
					Если НайКолонка.Поле.Наименование = "ИнтервалДоставки" ИЛИ НайКолонка.Поле.Наименование = "Отд"  Тогда
						Нов[НайКолонка.Поле.Наименование] = ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование);
					Иначе
						//Если ЗначениеЗаполнено(ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование]) Тогда
						Если ТабЗаказов[ТабЗаказов.Индекс(Нов)].НомерЗаказа = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1].НомерЗаказа Тогда 
							Нов[НайКолонка.Поле.Наименование]  = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование];     
						КонецЕсли;
						//КонецеСли;
					КонецЕсли;
				КонецеСли;					
			КонецеСли;	
		КонецЦикла;	
	КонецЦикла;
	
	//Серегин М.В. 20.05.2015 18:09:12 
	Для каждого Стр Из ТабЗаказов Цикл
		АртикулУслуги = СтрЗаменить(Стр.КодТовара,Символ(160),"");
		НомерЗаказа = СтрЗаменить(Стр.НомерЗаказа,Символ(160),"");
		Если ЗначениеЗаполнено(АртикулУслуги) Тогда 
			НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул",АртикулУслуги);
			Если ЗначениеЗаполнено(НайденаяУслуга) И НЕ НайденаяУслуга.ПометкаУдаления Тогда
				НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(НомерЗаказа); 
				НаборЗаписей.Отбор.Услуга.Установить(НайденаяУслуга);  
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
				Запись = НаборЗаписей.Добавить();
				Запись.Период = ТекущаяДата();
				Запись.НомерВнешнегоЗаказа = НомерЗаказа;
				Запись.Услуга = НайденаяУслуга;
				Запись.Контрагент = Контрагент;
				Запись.Стоимость = Стр.ОбщаяЦена;
				Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзПочты;
				НаборЗаписей.Записать();
				//ТабЗаказов.Удалить(Стр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	//Серегин М.В. 20.05.2015 18:09:14 
	
	// таблица собрана
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	ТекНом = "-";
	КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Контрагент.Код),"_");
	КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
	
	ТабОшибок = Новый ТаблицаЗначений;
	ТабОшибок.Колонки.Добавить("Номер");
	ТабОшибок.Колонки.Добавить("Ошибка");
	ТабОшибок.Колонки.Добавить("Кол");
	
	ТабЗагруженных = Новый ТаблицаЗначений;
	ТабЗагруженных.Колонки.Добавить("Номер");
	ТабЗагруженных.Колонки.Добавить("НомерНаш");
	
	ЗаказНеЗагружаем = "";
	
	
	ТабСум = ТабЗаказов.Скопировать();
	ТабСум.Колонки.добавить("Сумма");
	Для Каждого Тек Из ТабСум Цикл
		Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");
		Попытка
			Тек.Сумма = Тек.Количество * Тек.СтоимостьТовара;
		Исключение
			Тек.Сумма = 0;
		КонецПопытки;	
	КонецЦикла;	
	
	ТабСум.Свернуть("НомерЗаказа", "Сумма");
	
	//Серегин М.В. 10.07.2015 17:44:11 новый костыль )))
	ТабЗаказов.Колонки.Добавить("Дубль");
	Для Каждого Тек Из ТабЗаказов Цикл  
		Если Шаблон.БезДублей Тогда //делаем проверку на наличие заказа в админке по внешнему номеру 
			
			// -- новый код		
			Рез = mas.ВнешнийНомерЕстьВАдминке(СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")), Контрагент.Код);
			Если Рез Тогда
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				Тек.Дубль = Истина;
			Иначе
				Тек.Дубль = Ложь;
			КонецЕсли;
			
			//Стр = "SELECT orderIDImport from _order WHERE orderIDImport =" +"'"+Формат(Число(Тек.НомерЗаказа), "ЧГ=")+"'";
			//ТабДублей = smv.СформироватьТаблицуЗначенийИзДанныхSQL(Стр);
			//Если ТабДублей.Количество() >0 Тогда
			//    НовОш = ТабОшибок.Добавить();
			//    НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			//    НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
			//    ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			//    Тек.Дубль = Истина;
			//Иначе
			//    Тек.Дубль = Ложь;
			//КонецЕсли;
		Иначе
			Тек.Дубль = Ложь;
		КонецЕсли;
	КонецЦикла;
	//Серегин М.В. 10.07.2015 17:44:18 
	
	
	//Серегин М.В. 17.07.2015 13:31:09 для отправки категорий доставки
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_256 ") Тогда
		ТаблицаКатегорииДоставки = Новый ТаблицаЗначений;
		ТаблицаКатегорииДоставки.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов ("Строка"));
		ТаблицаКатегорииДоставки.Колонки.Добавить("КатегорияДоставки", Новый ОписаниеТипов ("Строка"));
		
		Для каждого СтрТ Из ТабЗаказов Цикл
			АртикулУслуги = СтрЗаменить(СтрТ.КодТовара,Символ(160),"");
			Если ЗначениеЗаполнено(АртикулУслуги) Тогда
				Если НЕ ЭтоУслугаПоЗаказам(АртикулУслуги) Тогда  
					СтрокаТКД = ТаблицаКатегорииДоставки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТКД,СтрТ);
					СтрокаТКД.НомерЗаказа = СтрЗаменить(СтрТ.НомерЗаказа,Символ(160),"");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТаблицаКатегорииДоставки.Свернуть("НомерЗаказа,КатегорияДоставки");
	КонецЕсли;    
	//Серегин М.В. 17.07.2015 13:31:10 
	
	
	Для Каждого Тек Из ТабЗаказов Цикл  
		//Серегин М.В. 10.07.2015 18:24:42 продолжение костыля делаем проверку на наличие заказа в админке по внешнему номеру 
		Если Тек.Дубль Тогда
			Продолжить;   
		КонецЕсли;
		//Серегин М.В. 10.07.2015 18:24:45 
		
		//Серегин М.В. 09.06.2015 17:42:32 
		Если НЕ ЗначениеЗаполнено(Тек.ТелефонМобильный) И НЕ ЗначениеЗаполнено(Тек.ТелефонГородской) ТОГДА 
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = "Нет номера телефона";
		КонецЕсли;
		//Серегин М.В. 09.06.2015 17:42:34 
		
		Попытка
			Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");
		Исключение
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		Если СокрЛП(Тек.НомерЗаказа) = ЗаказНеЗагружаем Тогда
			Продолжить;
		КонецеСли;	
		СтрокаБезОшибок = ПроверитьСтрокуНаЗаполненность(Тек, Шаблон);
		Игнорировать = ПроверитьСтрокуНаИгнорирование(Тек, Шаблон);
		Если Игнорировать Тогда
			Продолжить;
		КонецеСли;	
		
		Если СтрокаБезОшибок <> Истина Тогда
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = СтрокаБезОшибок;
			ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			Продолжить;
		КонецеСли;	
		Попытка
			
			Если ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
				Если ТипЗнч(Тек.СтоимостьТовара) = Тип("Строка") Тогда
					//Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, ",", ".");
					Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, " ", "");
					Тек.СтоимостьТовара = Число(Тек.СтоимостьТовара);
				КонецеСли;	
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Тек.Адрес) Тогда
				Тек.Адрес = "г " + Тек.ГородДоставки + ",ул " + Тек.УлицаДоставки;
			Иначе
				Тек.Адрес = "";
			КонецЕСли;	
			
			
			Если Не ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
				Тек.СтоимостьДоставки = 0;
			Иначе
				Тек.СтоимостьДоставки = Формат(Окр(Число(Тек.СтоимостьДоставки)), "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕСли;	
			
			Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
				Тек.ВесОбщий = 0;
			Иначе
				Тек.ВесОбщий = Формат(Число(Тек.ВесОбщий), "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕСли;	
			
			////Серегин М.В. 10.07.2015 11:45:23 старый код 
			//Если Не ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
			//Серегин М.В. 10.07.2015 11:59:50 
			Если Не ЗначениеЗаполнено(Тек.ОбщаяЦена) Тогда
				Тек.СтоимостьТовара = 0;
			Иначе
				////Серегин М.В. 10.07.2015 11:24:17 старый код 
				//// костыль для белой дачи
				//Тек.СтоимостьТовара = Формат(Окр(Число(Тек.СтоимостьТовара/Тек.Количество)), "ЧРД=.; ЧН=0; ЧГ=");
				//Серегин М.В. 10.07.2015 11:24:20 
				Тек.СтоимостьТовара = Формат(Окр(Число(Тек.ОбщаяЦена/Тек.Количество)), "ЧРД=.; ЧН=0; ЧГ=");
			КонецеСли;
			
			Если Не ЗначениеЗаполнено(Тек.Итого) Тогда
				Тек.Итого = 0;
			Иначе	
				Тек.Итого = Формат(Окр(Число(Тек.Итого)), "ЧРД=.; ЧН=0; ЧГ=");
			КонецеСли;
			
			Попытка
				Тек.КодТовара = Формат(Число(Тек.КодТовара), "ЧГ=");
			Исключение
				
			КонецПопытки;
			Попытка
				Тек.ТелефонМобильный = Формат(Число(Тек.ТелефонМобильный), "ЧГ=");
			Исключение
				
			КонецПопытки;
			Попытка
				Тек.ТелефонГородской = Формат(Число(Тек.ТелефонГородской), "ЧГ=");
			Исключение
				
			КонецПопытки;	
			Если ЗначениеЗаполнено(Тек.ТелефонГородской) Тогда
				Тек.ТелефонМобильный = Тек.ТелефонМобильный + ";" + Тек.ТелефонГородской;
			КонецеСли;
			
			Если ТипЗнч(Тек.ДатаДоставки) = Тип("Строка") Тогда
				Тек.ДатаДоставки = ИзСтрокиВДату(Тек.ДатаДоставки);
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
				Тек.ДатаДоставки = ТекущаяДата() + 86400;
			КонецеСли;	
			
			Тек.Количество = Формат(Число(Тек.Количество), "ЧРД=.; ЧН=0; ЧГ=");
			
			Если Не ЗначениеЗаполнено(Тек.ИнтервалДоставки) Тогда
				Тек.ИнтервалДоставки = "09-20";
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
				Тек.ВесОбщий = 50;
			КонецеСли;	
			
			Если ТекНом <> Тек.НомерЗаказа Тогда
				// создаём новый заказ
				
				Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
					Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
					R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
					//ТабК[0].tariffCategoryId_Ч
					Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(5); 
					Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					
					Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
						НовЗагр = ТабЗагруженных.Добавить();
						НовЗагр.Номер = ТекНом;
						НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
					КонецеСли;	
				КонецеСли;	
				
				ТекНом = Тек.НомерЗаказа;
				ИтВес= 0;
				
				ИнтД = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Тек.ИнтервалДоставки,"-");
				ВремяС = Лев(СокрЛП(ИнтД[0]), 2);
				
				ВремяС = Число(СтрЗаменить(ВремяС, "'", ""));
				
				ВремяПо = Число(Лев(СокрЛП(ИнтД[1]), 2));
				
				
				
				//Если Найти(Тек.ТипОплатыEnter, "Не оплачен") = 0 Тогда	
				//	ТипОплаты = "7";
				//ИначеЕсли Найти(Тек.ТипОплатыEnter, "безнал") <> 0 Тогда
				//	ТипОплаты = "4";
				//ИначеЕсли Найти(Тек.ТипОплатыEnter, "нал") <> 0 Тогда	
				//	ТипОплаты = "1";
				//Иначе
				//	НовОш = ТабОшибок.Добавить();
				//	НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				//	НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
				//	Продолжить;
				//КонецеСли;	
				Если ЗначениеЗаполнено(Тек.ТипОплатыEnter) Тогда
					Если Тек.ТипОплатыEnter = Справочники.ТипыОплат.Наличные Тогда
						ТипОплаты = "1";	
					ИначеЕсли Тек.ТипОплатыEnter = Справочники.ТипыОплат.ОплаченоВМагазине Тогда 	
						ТипОплаты = "7";
					ИначеЕсли Тек.ТипОплатыEnter = Справочники.ТипыОплат.БезРасчетов Тогда // Задача № 2901
						ТипОплаты = "10";
					ИначеЕсли Тек.ТипОплатыEnter = Справочники.ТипыОплат.БезналичныйРасчет Тогда	
						ТипОплаты = "4";
					ИначеЕсли Тек.ТипОплатыEnter = Справочники.ТипыОплат.Терминал Тогда	
						ТипОплаты = "5";					
					Иначе
						НовОш = ТабОшибок.Добавить();
						НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
						НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
						ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
						Продолжить;
					КонецеСли;
				Иначе
					НайИт = ТабСум.Найти(ТекНом);
					Если НайИт <> Неопределено Тогда
						Если ЗначениеЗаполнено(НайИт.Сумма) Тогда
							ТипОплаты = "1";
						Иначе
							ТипОплаты = "7";
						КонецеСли;	
					Иначе	
						ТипОплаты = "1";
					КонецеСли;	
				конецЕсли;
				
				
				
				НаборПользователь = евген.ЗапросКИнтернетМагазину("declare @tmp table (userid int, userAddressID int)
				|insert into @tmp
				|exec dbo.pb_UpdateUser null, '" + Тек.ФИО + "', null, null, '" + СокрЛП(Тек.ТелефонМобильный) + "', '" + СокрЛП(Тек.ТелефонГородской) + "','" + СокрЛП(Тек.Адрес) + "', null," + Строка(КодКонтр) + ", null, null, null, null, null, null, null, null, null, null, null, null, null, null,'" + ПараметрыСеанса.ТекущийПользователь + "', null
				| select * from @tmp", Соединение);
				Таб1 = Евген.СоздатьТаблицу(НаборПользователь, "userid_Ч, userAddressID_Ч");
				UserId = Формат(Таб1[0].userid_Ч, "ЧГ=");
				userAddressID = Формат(Таб1[0].userAddressID_Ч, "ЧГ=");
				
				СеттингИд = "0";
				
				//НашНом = "";
				//Реал = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", СокрЛП(Тек.НомерЗаказа));
				//Если Не Реал.Пустая() Тогда
				//	НашНом = СокрЛП(Реал.Номер);
				//КонецеСли;	
				
				Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + СеттингИд + ",0," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
				R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
				ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч");
				
				//Серегин М.В. 17.07.2015 13:12:51
				Если СокрЛП(Контрагент.Код) = "Shop_256" Или СокрЛП(Контрагент.Код) = "Shop_316" Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|   ВЫРАЗИТЬ(ТаблицаКатегорииДоставки.НомерЗаказа КАК СТРОКА(25)) КАК НомерЗаказа,
					|   ВЫРАЗИТЬ(ТаблицаКатегорииДоставки.КатегорияДоставки КАК СТРОКА(2)) КАК КатегорияДоставки
					|ПОМЕСТИТЬ ВТ_ТаблицаКД
					|ИЗ
					|   &ТаблицаКатегорииДоставки КАК ТаблицаКатегорииДоставки
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|   МАКСИМУМ(ВЫБОР
					|           КОГДА ВТ_ТаблицаКД.КатегорияДоставки = ""36""
					|                   ИЛИ ВТ_ТаблицаКД.КатегорияДоставки = ""39""
					|               ТОГДА 5
					|           ИНАЧЕ 1
					|       КОНЕЦ) КАК КатегорияДоставки
					|ИЗ
					|   ВТ_ТаблицаКД КАК ВТ_ТаблицаКД
					|ГДЕ
					|   ВТ_ТаблицаКД.НомерЗаказа = &НомерЗаказа";
					
					Запрос.УстановитьПараметр("ТаблицаКатегорииДоставки",ТаблицаКатегорииДоставки);
					Запрос.УстановитьПараметр("НомерЗаказа", Тек.НомерЗаказа);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ВыборкаДетальныеЗаписи.КатегорияДоставки = NULL Тогда
							КатегорияДоставки  = 2;
						Иначе
							КатегорияДоставки = ВыборкаДетальныеЗаписи.КатегорияДоставки;
						КонецЕсли;
					КонецЦикла;
					КатегорияДоставки = 5;
					//Если НашНом = "" Тогда
					////Серегин М.В. 17.07.2015 11:00:46 старый код
					//НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);			
					//Серегин М.В. 17.07.2015 11:00:39 новый код
					НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + КатегорияДоставки + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);			
				Иначе
					НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);			
					//	НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder " + СокрЛП(НашНом) + ", " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);			
				КонецеСли;	
				Таб2 = Евген.СоздатьТаблицу(НаборЗаказ, "Orderid_Ч");
				
			КонецеСли;		
			
			Тек.НаименованиеТовара = СтрЗаменить(Тек.НаименованиеТовара, "'", "");
			евген.ЗапросКИнтернетМагазину("                                                                                                                                                                                                                       
			|exec dbo.pb_AddItemToOrder " + Формат(Таб2[0].OrderId_Ч, "ЧГ=") + ",'" + Тек.НаименованиеТовара + "','" + Тек.Артикул + "'," + Формат(Тек.Количество, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + Формат(Тек.СтоимостьТовара, "ЧРД=.; ЧН=0; ЧГ=") + ",'" + Тек.КодТовара + "'," + Формат(Окр(Тек.ВесОбщий/Тек.Количество, 3), "ЧРД=.; ЧН=0; ЧГ="), Соединение);
			ИтВес = ИтВес + Число(Тек.ВесОбщий);
		Исключение
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = ОписаниеОшибки();
			ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;	
	
	
	Попытка
		Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
			Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
			R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
			//ТабК[0].tariffCategoryId_Ч
			Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч, "ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(5); 
			Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			
			Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
				НовЗагр = ТабЗагруженных.Добавить();
				НовЗагр.Номер = ТекНом;
				НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
			КонецеСли;	
		КонецеСли;
	Исключение
		НовОш = ТабОшибок.Добавить();
		НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
		НовОш.Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции


Функция ИзСтрокиВДату(СтрДата) Экспорт
	
	//+Степанов Частный случай формата даты L'Oreal
	Если СтрНайти(СтрДата,"/") <> 0 Тогда
		МассивПодстрокДаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрДата,"/");
		Попытка
			//Асеев 14.03.2022 (по письму Формат отбойника)>>>
			Если СтрДлина(МассивПодстрокДаты[2]) = 4 Тогда
				Возврат Дата(МассивПодстрокДаты[2] + МассивПодстрокДаты[1] + МассивПодстрокДаты[0]);
			Иначе
			//Асеев 14.03.2022 (по письму Формат отбойника)<<<
				Возврат Дата(Лев(Формат(Год(ТекущаяДата()),"ЧГ=0"),2) + МассивПодстрокДаты[2] + МассивПодстрокДаты[1] + МассивПодстрокДаты[0])	
			КонецЕсли;
		Исключение
		КонецПопытки;	
	КонецЕсли;		
	//-Степанов
	
	//+Степанов Частный случай формата даты(ЦУМ). 
	МассивПодстрокДаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрДата,",");
	Если МассивПодстрокДаты.Количество() = 3 И СтрДлина(МассивПодстрокДаты[2]) = 4 Тогда
		Попытка
			Возврат Дата(МассивПодстрокДаты[2] + МассивПодстрокДаты[1] + МассивПодстрокДаты[0]);
		Исключение
		КонецПопытки;	
	КонецЕсли;
	//-Степанов

	
	СтрДата = СокрЛП(СтрДата);
	стрДата_ = СокрЛП(СтрЗаменить(стрДата,".",""));
	датДата = Сред(стрДата_,5)+Сред(стрДата_,3,2)+Лев(стрДата_,2);
	Если СтрДлина(стрДата_)=6 Тогда
		датДата = "20"+датДата;
	КонецЕсли; 
	
	Попытка
		РезДата = Дата(датДата);
	Исключение
		РезДата = датДата;
	КонецПопытки;	
	
	Возврат РезДата;
	
	
КонецФункции

Процедура ВосстановлениеНеНайденныхПозиций() Экспорт
	
	// ===================================================старый код
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	новаМестнаяДоставка.Ссылка КАК Доставка,
	//            |	новаМестнаяДоставка.Номер
	//            |ПОМЕСТИТЬ ВТТранспорт
	//            |ИЗ
	//            |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
	//            |		ПО (новаМестнаяДоставка.Ссылка = ВЫРАЗИТЬ(новаЗадачаМестнойДоставки.БизнесПроцесс КАК БизнесПроцесс.новаПланированиеМестнойДоставки).Доставка.Ссылка)
	//            |ГДЕ
	//            |	новаЗадачаМестнойДоставки.Роль = ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)
	//            |	И новаМестнаяДоставка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	новаМестнаяДоставка.Номер,
	//            |	новаМестнаяДоставка.Ссылка
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	новаМестнаяДоставка.Ссылка КАК Заказ,
	//            |	РеализацияТоваровУслуг.Ссылка КАК Реализация
	//            |ПОМЕСТИТЬ ВТЗаказы
	//            |ИЗ
	//            |	ВТТранспорт КАК ВТТранспорт
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//            |		ПО ВТТранспорт.Доставка.Ссылка = новаМестнаяДоставка.Ссылка
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |		ПО ВТТранспорт.Доставка.Номер = РеализацияТоваровУслуг.Номер
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	новаМестнаяДоставка.Ссылка,
	//            |	РеализацияТоваровУслуг.Ссылка
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |УНИЧТОЖИТЬ ВТТранспорт
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Ссылка КАК Документ,
	//            |	ВТЗаказы.Заказ,
	//            |	ВТЗаказы.Реализация,
	//            |	ЕСТЬNULL(ВосстановлениеНеНайденныхПозицийДокументыСнятия.Ссылка, ИСТИНА) КАК Восстановление
	//            |ПОМЕСТИТЬ ВТДоставкиКВосстановлению
	//            |ИЗ
	//            |	ВТЗаказы КАК ВТЗаказы
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоставкиСОтклонениямиКоличестваСписком.Доставки КАК ДоставкиСОтклонениямиКоличестваСпискомДоставки
	//            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНеНайденныхПозиций.Доставки КАК ВосстановлениеНеНайденныхПозицийДокументыСнятия
	//            |			ПО ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Ссылка = ВосстановлениеНеНайденныхПозицийДокументыСнятия.Документ.Ссылка
	//            |				И (ВосстановлениеНеНайденныхПозицийДокументыСнятия.Ссылка.Проведен = ИСТИНА)
	//            |		ПО (ВТЗаказы.Реализация.Ссылка = ВЫРАЗИТЬ(ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка КАК Документ.РеализацияТоваровУслуг).Ссылка)
	//            |ГДЕ
	//            |	ДоставкиСОтклонениямиКоличестваСпискомДоставки.ДоставкаНайдена = 0
	//            |	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Проведен = ИСТИНА
	//            |	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.ДоставкаОтменена = ЛОЖЬ
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |УНИЧТОЖИТЬ ВТЗаказы
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	ВТДоставкиКВосстановлению.Документ,
	//            |	ВТДоставкиКВосстановлению.Заказ,
	//            |	ВТДоставкиКВосстановлению.Реализация КАК Доставка,
	//            |	ВТДоставкиКВосстановлению.Восстановление
	//            |ИЗ
	//            |	ВТДоставкиКВосстановлению КАК ВТДоставкиКВосстановлению
	//            |ГДЕ
	//            |	ВТДоставкиКВосстановлению.Восстановление = ИСТИНА
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	ВТДоставкиКВосстановлению.Документ,
	//            |	ВТДоставкиКВосстановлению.Заказ,
	//            |	ВТДоставкиКВосстановлению.Реализация,
	//            |	ВТДоставкиКВосстановлению.Восстановление
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |УНИЧТОЖИТЬ ВТДоставкиКВосстановлению";
	//			
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));  
	////Зап.УстановитьПараметр("ДатаНач1", НачалоДня(ТекущаяДата())- 86400);
	////Зап.УстановитьПараметр("ДатаТек", ТекущаяДата());
	//Рез = Зап.Выполнить().Выгрузить();
	////Если Рез.Количество() = 0 Тогда
	////	Возврат;
	////КонецеСли;	
	//
	//Док = Документы.ВосстановлениеНеНайденныхПозиций.СоздатьДокумент();
	//Док.Дата = ТекущаяДата();
	//Док.УстановитьНовыйНомер();
	//
	//Док.Доставки.Загрузить(Рез);
	//
	////Добавление ненайденных самовывозов за пред дату
	//
	//
	//Зап = Новый Запрос;
	////Зап.Текст = "ВЫБРАТЬ
	////            |	ЕСТЬNULL(новаМестнаяДоставка.Номер, ИСТИНА) КАК ДоставкаОтсутствует,
	////            |	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка.Ссылка КАК Самовывоз,
	////            |	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Ссылка
	////            |ПОМЕСТИТЬ ВТСамовывозы
	////            |ИЗ
	////            |	Документ.ДоставкиСОтклонениямиКоличестваСписком.Доставки КАК ДоставкиСОтклонениямиКоличестваСпискомДоставки
	////            |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	////            |		ПО ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка.Номер = новаМестнаяДоставка.Номер
	////            |ГДЕ
	////            |	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Проведен = ИСТИНА
	////            |	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	////            |	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка.Дата >= &ДатаС
	////            |;
	////            |
	////            |////////////////////////////////////////////////////////////////////////////////
	////            |ВЫБРАТЬ
	////            |	ВТСамовывозы.Самовывоз КАК Доставка,
	////            |	ВТСамовывозы.Ссылка КАК Документ
	////            |ИЗ
	////			|	ВТСамовывозы КАК ВТСамовывозы
	////			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов.СрезПоследних КАК СостоянияЗаказовСрезПоследних
	////			|ПО ВТСамовывозы.Самовывоз = СостоянияЗаказовСрезПоследних.Заказ
	////            |ГДЕ
	////            |	ВТСамовывозы.ДоставкаОтсутствует = ИСТИНА
	////			|И СостоянияЗаказовСрезПоследних.ПричинаНеВыполнения = ЗНАЧЕНИЕ(Справочник.ПричиныНеВыполненияДоставки.ПереносДоставки)
	////            |;
	////            |
	////            |////////////////////////////////////////////////////////////////////////////////
	////             |УНИЧТОЖИТЬ ВТСамовывозы";
	//
	//// <--- закоментил Костя: 061015	::	:::: 	::	::	::	:::: 	::	::	::	:::: 	::	::	::	::
	////      связь СостоянияЗаказов(Заказ перенесен) заменить на связь ИзменениеДатыДоставки(дата на завтра)
	//// Новый запрос -->
	//
	////+++ Костя 061015	
	//Зап.Текст = 
	//"ВЫБРАТЬ
	//|	ЕСТЬNULL(новаМестнаяДоставка.Номер, ИСТИНА) КАК ДоставкаОтсутствует,
	//|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка.Ссылка КАК Самовывоз,
	//|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Ссылка
	//|ПОМЕСТИТЬ ВТСамовывозы
	//|ИЗ
	//|	Документ.ДоставкиСОтклонениямиКоличестваСписком.Доставки КАК ДоставкиСОтклонениямиКоличестваСпискомДоставки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	//|		ПО ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка.Номер = новаМестнаяДоставка.Номер
	//|ГДЕ
	//|	ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Проведен = ИСТИНА
	//|	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//|	И ДоставкиСОтклонениямиКоличестваСпискомДоставки.Доставка.Дата >= &ДатаС
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТСамовывозы.Самовывоз КАК Доставка,
	//|	ВТСамовывозы.Ссылка КАК Документ
	//|ИЗ
	//|	ВТСамовывозы КАК ВТСамовывозы
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыДоставок.СрезПоследних(, ) КАК ДатыДоставокСрезПоследних
	//|		ПО ВТСамовывозы.Самовывоз = ДатыДоставокСрезПоследних.Заказ
	//|ГДЕ
	//|	ДатыДоставокСрезПоследних.ДатаДоставки = &ДатаДоставки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВТСамовывозы";
	////+++ Костя 061015	
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	//
	//Зап.УстановитьПараметр("ДатаС", НачалоДня(ТекущаяДата() - 86400*2));
	//
	//рез2 = Зап.Выполнить().Выгрузить();
	//Для Каждого Тек Из Рез2 Цикл
	//	Если Док.Доставки.Найти(Тек.Доставка) = Неопределено Тогда
	//		Нов = Док.Доставки.Добавить();
	//		ЗаполнитьЗначенияСвойств(Нов, Тек);
	//	КонецеСли;	
	//КонецЦикла;	
	//
	//Если Док.Доставки.Количество() > 0 Тогда
	//	Док.Записать(РежимЗаписиДокумента.Запись);
	//	Док.Записать(РежимЗаписиДокумента.Проведение);
	//КонецеСли;	
	// ===================================================старый код
	
	
	
	
	// ===================================================старый код 2 --->>
	
	
	Попытка
		Зап = Новый Запрос;	
		Зап.Текст = "ВЫБРАТЬ
		|	ЗаказыКОтвязкеОтРейсов.Заказ КАК Заказ,
		|	ЗаказыКОтвязкеОтРейсов.ТипОтвязки КАК ТипОтвязки,
		|	МАКСИМУМ(ЗаказыКОтвязкеОтРейсов.Рейс) КАК Рейс
		|ИЗ
		|	РегистрСведений.ЗаказыКОтвязкеОтРейсов КАК ЗаказыКОтвязкеОтРейсов
		|ГДЕ
		|	ЗаказыКОтвязкеОтРейсов.Период МЕЖДУ &НачДата И &КонДата
		|	И ЗаказыКОтвязкеОтРейсов.ЗаказНайден = ЛОЖЬ
		|	И ЗаказыКОтвязкеОтРейсов.Рейс.Проведен = ИСТИНА
		// МАС - 25.06.2018 - не отвязывались предварительные закрытия --->> 
		|	И ЗаказыКОтвязкеОтРейсов.ТипОтвязки <> ЗНАЧЕНИЕ(Перечисление.ТипыОтвязкиЗаказовОтМашин.ПредварительноеЗакрытиеРейса)
		// <<--- МАС 				
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКОтвязкеОтРейсов.Заказ,
		|	ЗаказыКОтвязкеОтРейсов.ТипОтвязки";
		Зап.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата())); 			
		Зап.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата())); 			
		
		Рез = Зап.Выполнить().Выгрузить();
		
		ТекВр = ТекущаяДата();
		
		Наб = РегистрыСведений.ЗаказыКОтвязкеОтРейсов.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		
		Для Каждого Тек Из Рез Цикл
			Нов = Наб.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Тек);
			Нов.Период = ТекВр;
			Нов.ЗаказНайден = Истина;
			Нов.ВосстановлениеРегламентом = Истина;
		КонецЦикла;	
		Наб.Записать();
		// ===================================================старый код 2 <<---
		
		
		
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	новаМестнаяДоставка.Ссылка КАК Доставка,
		            |	новаМестнаяДоставка.Номер КАК Номер
		            |ПОМЕСТИТЬ ВТТранспорт
		            |ИЗ
		            |	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
		            |		ПО (новаМестнаяДоставка.Ссылка = ВЫРАЗИТЬ(новаЗадачаМестнойДоставки.БизнесПроцесс КАК БизнесПроцесс.новаПланированиеМестнойДоставки).Доставка.Ссылка)
		            |ГДЕ
		            |	новаЗадачаМестнойДоставки.Роль = ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)
		            |	И новаМестнаяДоставка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		            |
		            |СГРУППИРОВАТЬ ПО
		            |	новаМестнаяДоставка.Номер,
		            |	новаМестнаяДоставка.Ссылка
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ
		            |	новаМестнаяДоставка.Ссылка КАК Заказ,
		            |	РеализацияТоваровУслуг.Ссылка КАК Реализация
		            |ПОМЕСТИТЬ ВТЗаказы
		            |ИЗ
		            |	ВТТранспорт КАК ВТТранспорт
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		            |		ПО ВТТранспорт.Доставка.Ссылка = новаМестнаяДоставка.Ссылка
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |		ПО ВТТранспорт.Доставка.Номер = РеализацияТоваровУслуг.Номер
		            |
		            |СГРУППИРОВАТЬ ПО
		            |	новаМестнаяДоставка.Ссылка,
		            |	РеализацияТоваровУслуг.Ссылка
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |УНИЧТОЖИТЬ ВТТранспорт
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ
		            |	ДоставкиСОтклонениямиКоличестваСпискомТовары.Ссылка.Ссылка КАК Документ,
		            |	ВТЗаказы.Заказ КАК Заказ,
		            |	ВТЗаказы.Реализация КАК Реализация,
		            |	ЕСТЬNULL(ВосстановлениеНеНайденныхПозицийДокументыСнятия.Ссылка, ИСТИНА) КАК Восстановление
		            |ПОМЕСТИТЬ ВТДоставкиКВосстановлению
		            |ИЗ
		            |	ВТЗаказы КАК ВТЗаказы
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоставкиСОтклонениямиКоличестваСписком.Товары КАК ДоставкиСОтклонениямиКоличестваСпискомТовары
		            |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНеНайденныхПозиций.Доставки КАК ВосстановлениеНеНайденныхПозицийДокументыСнятия
		            |			ПО ДоставкиСОтклонениямиКоличестваСпискомТовары.Ссылка.Ссылка = ВосстановлениеНеНайденныхПозицийДокументыСнятия.Документ.Ссылка
		            |				И (ВосстановлениеНеНайденныхПозицийДокументыСнятия.Ссылка.Проведен = ИСТИНА)
		            |				И ДоставкиСОтклонениямиКоличестваСпискомТовары.Доставка = ВосстановлениеНеНайденныхПозицийДокументыСнятия.Доставка
		            |		ПО (ВТЗаказы.Реализация.Ссылка = ВЫРАЗИТЬ(ДоставкиСОтклонениямиКоличестваСпискомТовары.Доставка КАК Документ.РеализацияТоваровУслуг).Ссылка)
		            |ГДЕ
		            |	ДоставкиСОтклонениямиКоличестваСпискомТовары.Ссылка.Проведен = ИСТИНА
		            |	И ДоставкиСОтклонениямиКоличестваСпискомТовары.НеобходимоеКоличество - ДоставкиСОтклонениямиКоличестваСпискомТовары.Количество > 0
		            |
		            |СГРУППИРОВАТЬ ПО
		            |	ВТЗаказы.Реализация,
		            |	ВТЗаказы.Заказ,
		            |	ЕСТЬNULL(ВосстановлениеНеНайденныхПозицийДокументыСнятия.Ссылка, ИСТИНА),
		            |	ДоставкиСОтклонениямиКоличестваСпискомТовары.Ссылка.Ссылка
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |УНИЧТОЖИТЬ ВТЗаказы
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ
		            |	ВТДоставкиКВосстановлению.Документ КАК Документ,
		            |	ВТДоставкиКВосстановлению.Заказ КАК Заказ,
		            |	ВТДоставкиКВосстановлению.Реализация КАК Доставка,
		            |	ВТДоставкиКВосстановлению.Восстановление КАК Восстановление
		            |ИЗ
		            |	ВТДоставкиКВосстановлению КАК ВТДоставкиКВосстановлению
		            |ГДЕ
		            |	ВТДоставкиКВосстановлению.Восстановление = ИСТИНА
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |УНИЧТОЖИТЬ ВТДоставкиКВосстановлению";
		
		Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
		Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));  	
		
		Рез = Зап.Выполнить().Выгрузить();
		
		// борьба со статусом 231 --- >>	
		МассивДляУдаления = Новый Массив;
		Для каждого Стр Из Рез Цикл		
			ЗапросСтатус = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтатусыЗаказов.Период КАК Период,
			|	СтатусыЗаказов.Заказ,
			|	СтатусыЗаказов.Статус
			|ИЗ
			|	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
			|ГДЕ
			|	СтатусыЗаказов.Заказ = &Заказ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ");
			ЗапросСтатус.УстановитьПараметр("Заказ", Стр.Доставка);	
			РезСтатус = ЗапросСтатус.Выполнить().Выбрать();		
			Если РезСтатус.Следующий() И (РезСтатус.Статус = 231 Или РезСтатус.Статус = 301 Или РезСтатус.Статус = 302) Тогда		
				МассивДляУдаления.Добавить(Стр);					
			КонецЕсли;		
		КонецЦикла;
		
		Для каждого Стр Из МассивДляУдаления Цикл		
			Рез.Удалить(Стр);	
		КонецЦикла;
		// борьба со статусом 231 --- <<					
		
		//Если Рез.Количество() = 0 Тогда
		//	Возврат;
		//КонецеСли;	
		
		Док = Документы.ВосстановлениеНеНайденныхПозиций.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.УстановитьНовыйНомер();
		
		Док.Доставки.Загрузить(Рез);
		
		Если Док.Доставки.Количество() > 0 Тогда
			Док.Записать(РежимЗаписиДокумента.Запись);
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецеСли;
	Исключение
		ТО = ОписаниеОшибки();
		ОтправитьНормальноеСообщениеАдминам("Восстановление позиций - ошибка", ТО);
	КонецПопытки;
	
	
КонецПроцедуры

Функция ОпределитьСмену(ДатаСмены) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	Смены.Ссылка КАК Смена
	|ИЗ
	|	Справочник.Смены КАК Смены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВременныеИнтервалы.Интервалы КАК ВременныеИнтервалыИнтервалы
	|		ПО Смены.ВременнойИнтервал = ВременныеИнтервалыИнтервалы.Ссылка
	|ГДЕ
	|	ВременныеИнтервалыИнтервалы.Интервал_С <= &ЧасВремя
	|	И ВременныеИнтервалыИнтервалы.Интервал_По >= &ЧасВремя";
	
	//"ВЫБРАТЬ
	//            |	СменыИнтервалыЗагрузок.Ссылка КАК Смена
	//            |ИЗ
	//            |	Справочник.Смены.ИнтервалыЗагрузок КАК СменыИнтервалыЗагрузок
	//            |ГДЕ
	//            |	СменыИнтервалыЗагрузок.УдалитьИнтервалЗагрузкиНакладной003_С <= &ЧасВремя
	//            |	И СменыИнтервалыЗагрузок.УдалитьИнтервалЗагрузкиНакладной003_По >= &ЧасВремя";
	Зап.УстановитьПараметр("ЧасВремя", Час(ДатаСмены));	
	Рез = Зап.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 Тогда
		Возврат Справочники.Смены.ПустаяСсылка();
	Иначе
		Возврат Рез[0].Смена.Ссылка;
	КонецеСли;	
КонецФункции	

Процедура ОтправкаОтчетовПоРасписанию(КодНастройки) Экспорт
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = Справочники.НастройкиАвтоматическойОтправкиОтчетов.НайтиПоКоду(КодНастройки);
	Если Настройка.Пустая() Тогда
		Возврат;
	КонецеСли;	
	
	Таб = Новый ТабличныйДокумент;
	
	Если Настройка.НачалоПериодаОтчета.Пустая() Тогда
		НачПериода = НачалоДня(ТекущаяДата());
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоДня Тогда
		НачПериода = НачалоДня(ТекущаяДата());
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоМесяца Тогда
		НачПериода = НачалоМесяца(ТекущаяДата());
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.ТекущаяДата Тогда
		НачПериода = ТекущаяДата();
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоПредыдущегоДня Тогда
		НачПериода = НачалоДня(ТекущаяДата() - 86400);		
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоПредыдущегоМесяца Тогда
		НачПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
		//+++ Костя
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоСледующегоДня Тогда
		НачПериода = КонецДня(ТекущаяДата())+1;
		//--- Костя
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоПредыдущейНедели Тогда
		НачПериода = НачалоНедели(НачалоНедели(ТекущаяДата())-1);
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоПятницыПредыдущейНедели Тогда
		НачПериода = НачалоНедели(НачалоНедели(ТекущаяДата())-1)+345600;
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоВторникаЭтойНедели Тогда
		НачПериода = НачалоНедели(ТекущаяДата())+86400;
	КонецеСли;	   
	
	
	Если Настройка.КонецПериодаОтчета.Пустая() Тогда
		КонПериода = КонецДня(ТекущаяДата());
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецДня Тогда
		КонПериода = КонецДня(ТекущаяДата());
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецМесяца Тогда
		КонПериода = КонецМесяца(ТекущаяДата());
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.ТекущаяДата Тогда
		КонПериода = ТекущаяДата();
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецПредыдущегоДня Тогда
		КонПериода = КонецДня(ТекущаяДата() - 86400);				
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецПредыдущегоМесяца Тогда
		КонПериода = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
		//+++ Костя
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецСледующегоДня Тогда
		КонПериода = КонецДня(ТекущаяДата()+86400);
		//--- Костя	
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецПредыдущейНедели Тогда
		КонПериода = КонецНедели(НачалоНедели(ТекущаяДата())-1);
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецПонедельникаЭтойНедели Тогда
		КонПериода = КонецНедели(ТекущаяДата())-518400;
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецЧетвергаЭтойНедели Тогда
		КонПериода = КонецНедели(ТекущаяДата())-259200;
	КонецеСли;	
	
	
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.Enter_003 Тогда
		От = Отчеты.Enter_3_Статусы.Создать();
		Т = От.Сформировать(Таб, НачПериода, КонПериода, Настройка.Владелец);
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.Enter_3_Итоговый Тогда
		От = Отчеты.Enter_3_Итоговый.Создать();
		Т = От.Сформировать(Таб, НачПериода, КонПериода, Настройка.Владелец);
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоКачествуДоставокДляПартнера Тогда
		ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		От = Отчеты.ОтчетПоКачествуДоставокДляПартнера.Создать();
		Т = От.СформироватьОтправитьПоПочте(ПарПериод, Настройка.Владелец);
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоКачествуДоставокДляПартнераПереносы Тогда
		ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		От = Отчеты.ОтчетПоКачествуДоставокДляПартнера_Переносы.Создать();
		Т = От.СформироватьОтправитьПоПочте(ПарПериод, Настройка.Владелец);
		//Серегин М.В. 14.05.2015 15:57:49  
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетОНеобеспеченныхЗаказахКомитентам Тогда
		Отчет = Отчеты.ОтчетОНеобеспеченныхЗаказах.Создать();
		НачалоПериода = НачПериода;
		КонецПериода = КонПериода;
		
		//////ДЛЯ ТЕСТА!!!
		//НачалоПериода = НачалоДня(Дата(2019,7,20,0,0,0));
		//КонецПериода = КонецДня(Дата(2019,7,20,23,59,59));
		//////ДЛЯ ТЕСТА!!!
		
		//ВыборкаКомитенты = ВыборкаКомитентов(Настройка.Владелец.Ссылка,КодНастройки);
		ВыборкаКомитенты = ВыборкаКомитентовПоОбщемуОтчету(Отчет, НачалоПериода, КонецПериода, "00000000010");
		Пока ВыборкаКомитенты.Следующий() Цикл
			
			ТекстHTML = "";
			
			////ДЛЯ ТЕСТА!!!
			//НачалоПериода = НачалоДня(Дата(2019,6,1,0,0,0));
			//КонецПериода = КонецДня(Дата(2019,6,1,0,0,0));
			//
			//Т =  Отчет.СформироватьОтправитьПоПочте_Контрагентам(НачалоПериода,КонецПериода,Справочники.Контрагенты.НайтиПоКоду("Shop_604"),Неопределено, Неопределено, ТекстHTML);
			////ДЛЯ ТЕСТА!!!
			
			Т =  Отчет.СформироватьОтправитьПоПочте_Контрагентам(НачалоПериода,КонецПериода,ВыборкаКомитенты.Контрагент,Неопределено,Неопределено, ТекстHTML);
			
			Если Т <> Неопределено Тогда
				Г = Новый УникальныйИдентификатор;
				ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + СокрЛП(Настройка.Наименование) + ".xls";
				Т.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
				
				//Задача № 3307			
				ТекстПисьма = ТекстHTML;
				ТемаПисьма = "Отчет о необеспеченных заказах " + СокрЛП(ВыборкаКомитенты.Контрагент) + " за " + Формат(КонецПериода,"ДФ=dd.MM.yyyy");				
				//Задача № 3307
				
				МасП = Новый Массив;
				Стр_ = "";
				Если Не Настройка.ТипРассылки.Пустая() Тогда
					Стр_ = "evgeniy.marochkin@strizh-logistic.ru";
					Зап = Новый Запрос;
					Зап.Текст = "ВЫБРАТЬ
					|	РассылкиКонтрагентов.Почта
					|ИЗ
					|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
					|ГДЕ
					|	РассылкиКонтрагентов.ТипРассылки = &ТипРассылки
					|	И РассылкиКонтрагентов.Контрагент = &Контрагент";
					Зап.УстановитьПараметр("Контрагент", ВыборкаКомитенты.Контрагент);			
					Зап.УстановитьПараметр("ТипРассылки", Настройка.ТипРассылки);
					Рез = Зап.Выполнить().Выгрузить();
					Для Каждого Тек Из Рез Цикл
						МасП.Добавить(СокрЛП(Тек.Почта));
						Стр_ = Стр_ + ";" + Тек.Почта;
					КонецЦикла;
					
					// Добавляем получателей из СпискаАдресов к каждому письму
					Для Каждого Тек Из Настройка.СписокАдресов Цикл
						если Тек.Отправлять Тогда
							Если МасП.Найти(СокрЛП(Тек.Адрес)) = Неопределено Тогда								
								МасП.Добавить(СокрЛП(Тек.Адрес));
								Стр_ = Стр_ + ";" + СокрЛП(Тек.Адрес);
							КонецеСли;
						КонецеСли;	
					КонецЦикла;
					// Добавляем получателей из СпискаАдресов к каждому письму
					
				Иначе
					Стр_ = "";
					Для Каждого Тек Из Настройка.СписокАдресов Цикл
						если Тек.Отправлять Тогда
							МасП.Добавить(СокрЛП(Тек.Адрес));
							Стр_ = Стр_ + ";" + Тек.Адрес;
						КонецеСли;	
					КонецЦикла;	
				КонецеСли;
				
				КонтрагентДляРассылки = ВыборкаКомитенты.Контрагент;
				
				ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);
				ПараметрыЗаписи.ВидОтчета = Настройка.Отчет;
				ПараметрыЗаписи.НастройкаОтправки = Настройка;
				ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;		
				
				ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
				
				ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
				ПараметрыЗаписи.GUID = Г;
				ПараметрыЗаписи.СписокПолучателей = Стр_;
				
				Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
					Тема = СокрЛП(Настройка.Наименование)+" за "+Формат(НачПериода,"ДФ=dd.MM.yyyy");	
					
					//Геннадий #4415 25.12.2020 ->
					//добавлена запись текста ошибки
					ТекстОшибки = "";
					//Асеев 31.10.2024 (Задача № 5339)>>>
					ОператорРассылки = ОпределитьОператораРассылки(Настройка, КонтрагентДляРассылки);
					//Асеев 31.10.2024 (Задача № 5339)<<<
					Если ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
						
						Отпр = lem.ОтправитьСообщение(МасП, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Логистическая компания ""Стриж""",,ТипТекстаПочтовогоСообщения.HTML,,ТекстОшибки,Настройка.ТипРассылки,Ложь);
						
					ИначеЕсли ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
						
						ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
						//Геннадий 15.11.2021 ++
						//Добавлены два последних параметра. Корректировка рассылки под Лореали
						Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Логистическая компания ""Стриж""",,ТипТекстаПочтовогоСообщения.HTML,,ТекстОшибки,Настройка.ТипРассылки,Ложь,,, КонтрагентДляРассылки.Код, Настройка.Отчет);
						//Геннадий 15.11.2021 --
						
					КонецЕсли;
					ПараметрыЗаписи.ОтчетОтправлен 	= Отпр;
					ПараметрыЗаписи.ТекстОшибки 	= ТекстОшибки;
					ПараметрыЗаписи.ОператорРассылки = ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования;
					//Геннадий <-
					
					РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
				КонецЕсли;

				
				// ++Отключено по Задача 3427
				
				////+++++Серегин М.В. 11.12.2015 11:51:18 
				//ПараметрыЗапроса = Новый Структура;
				//ПараметрыЗапроса.Вставить("Контрагент",ВыборкаКомитенты.Контрагент);
				//ПараметрыЗапроса.Вставить("ВидОтчета",Настройка.Отчет);
				//ПараметрыЗапроса.Вставить("НастройкаОтправки",Настройка.Ссылка);
				//ПараметрыЗапроса.Вставить("ПериодФормирования1",ТекущаяДата()-3600);
				//ПараметрыЗапроса.Вставить("ПериодФормирования2",ТекущаяДата());
				//
				//Если НЕ ОтчетОтправлялся(ПараметрыЗапроса) Тогда  //+++++Серегин М.В. 11.12.2015 11:43:15 проверяем отправлялся ли отчет уже
				//	Отпр = lem.ОтправитьСообщение(МасП, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Логистическая компания ""Стриж""",,ТипТекстаПочтовогоСообщения.HTML,,,Настройка.ТипРассылки,Ложь) ;
				//	
				//	Ф = Новый ДвоичныеДанные(ПутьКФайлу);
				//	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
				//	ТекД = ТекущаяДата();
				//	
				//	Наб = РегистрыСведений.ОтчетыКОтправкеРегламент.СоздатьНаборЗаписей();
				//	Наб.Отбор.Контрагент.Установить(ВыборкаКомитенты.Контрагент);
				//	наб.Отбор.ПериодФормирования.Установить(ТекД);
				//	Наб.Отбор.ВидОтчета.Установить(Настройка.Отчет);
				//	
				//	Нов = наб.Добавить();
				//	Нов.Контрагент = ВыборкаКомитенты.Контрагент;
				//	Нов.ПериодФормирования = ТекД;
				//	Нов.ВыгрузкаXML = Хр;
				//	Нов.GUID = Г;
				//	Нов.НастройкаОтправки = Настройка.Ссылка;
				//	Нов.ОтчетОтправлен = Отпр;
				//	Нов.СписокПолучателей = Стр_;
				//	Нов.ВидОтчета = Настройка.Отчет;
				//	Наб.Записать();
				//	
				//	//+Степанов Задача 3285    
				//	НаборЗаписейРСОтчетыКОтправке = РегистрыСведений.ОтчетыКОтправке.СоздатьНаборЗаписей();
				//	НаборЗаписейРСОтчетыКОтправке.Отбор.Контрагент.Установить(ВыборкаКомитенты.Контрагент);
				//	НаборЗаписейРСОтчетыКОтправке.Отбор.ПериодФормирования.Установить(ТекД);
				//	НаборЗаписейРСОтчетыКОтправке.Отбор.ВидОтчета.Установить(Настройка.Отчет);
				//	ЗаписьРСОтчетыКОтправке = НаборЗаписейРСОтчетыКОтправке.Добавить();
				//	ЗаписьРСОтчетыКОтправке.Контрагент = ВыборкаКомитенты.Контрагент;
				//	ЗаписьРСОтчетыКОтправке.ПериодФормирования = ТекД;
				//	ЗаписьРСОтчетыКОтправке.ВидОтчета = Настройка.Отчет;
				//	ЗаписьРСОтчетыКОтправке.GUID = Г;
				//	ЗаписьРСОтчетыКОтправке.ВыгрузкаXML = Хр;
				//	ЗаписьРСОтчетыКОтправке.ОтчетОтправлен = Отпр;
				//	ЗаписьРСОтчетыКОтправке.СписокПолучателей = Стр_;
				//	НаборЗаписейРСОтчетыКОтправке.Записать();
				//	//-Степанов
					
					
				//КонецЕсли;//-----Серегин М.В. 11.12.2015 11:55:06 
				// --Отключено по Задача 3427

			КонецЕсли;
		КонецЦикла;
		Возврат;
		//Серегин М.В. 17.08.2015 18:32:26 
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоНеПолностьюПоступившимЗаказамКомитентам Тогда
		// Задача № 3077
		Отчет = Отчеты.ОтчетПоНеПолностьюПоступившимЗаказам.Создать();
		ПериодОтчета = ТекущаяДата();
		
		//////ТЕСТИРОВАНИЕ
		//ПериодОтчета = Дата(2020,10,23,0,0,0);
		//////ТЕСТИРОВАНИЕ
		
		ВладелецОтчета = Неопределено;
		КонтрагентыИсключенияОтчета = Неопределено;
		
		Если ЗначениеЗаполнено(Настройка.Владелец) Тогда			
			ВладелецОтчета = Настройка.Владелец;			
		Конецесли;
		
		АктуальныеКонтрагентыИсключения = Настройка.КонтрагентыИсключения.Выгрузить(Настройка.КонтрагентыИсключения.НайтиСтроки(новый Структура("Отметка", Истина)));
		Если АктуальныеКонтрагентыИсключения.Количество()> 0 тогда
			КонтрагентыИсключенияОтчета = АктуальныеКонтрагентыИсключения.ВыгрузитьКолонку("Контрагент");
			
			Если ВладелецОтчета.ЭтоГруппа Тогда
				ВладелецОтчета = неопределено;
			КонецЕсли;	
		Конецесли;						
		
		КонтрагентыОтчета = Отчет.ПолучитьПочтуКонтрагентовОтчета(ПериодОтчета, Неопределено, ВладелецОтчета, КонтрагентыИсключенияОтчета);
		
		Для Каждого КонтрагентРассылки Из КонтрагентыОтчета Цикл
			
			РезультатПоКонтрагенту = Отчет.СформироватьОтчетДляКонтрагента(ПериодОтчета, Неопределено, Настройка, КонтрагентРассылки.Контрагент); 
			
			Если РезультатПоКонтрагенту = Неопределено Тогда продолжить КонецЕсли;
			
			Г = Новый УникальныйИдентификатор;
			ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_Отчет по не полностью поступившим заказам_" + Строка(Г) + ".xls";
			РезультатПоКонтрагенту.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
			
			ТемаПисьма = "Отчет по не полностью поступившим заказам "+ Формат(ПериодОтчета,"ДЛФ=DD") + " " + СокрЛП(КонтрагентРассылки.Контрагент);
			ТекстПисьма = "Отчет по не полностью поступившим заказам во вложении";
			
			МасП = Новый Массив;
			МасП = КонтрагентРассылки.Адреса;
			Стр_ = "";
			
			// Добавляем получателей из СпискаАдресов к каждому письму
			Для Каждого Тек Из Настройка.СписокАдресов Цикл
				если Тек.Отправлять Тогда
					Если МасП.Найти(СокрЛП(Тек.Адрес)) = Неопределено Тогда								
						МасП.Добавить(СокрЛП(Тек.Адрес));
						Стр_ = Стр_ + ";" + СокрЛП(Тек.Адрес);
					КонецеСли;
				КонецеСли;	
			КонецЦикла;
			
			Стр_ = СтрСоединить(МасП, "; ");
			// Добавляем получателей из СпискаАдресов к каждому письму
			
			КонтрагентДляРассылки = КонтрагентРассылки.Контрагент.Ссылка;
			
			ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);
			ПараметрыЗаписи.ВидОтчета = Настройка.Отчет;
			ПараметрыЗаписи.НастройкаОтправки = Настройка;
			ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;		
			
			ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
			
			ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
			ПараметрыЗаписи.GUID = Г;
			ПараметрыЗаписи.СписокПолучателей = Стр_;
			
			Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
				Тема = СокрЛП(Настройка.Наименование)+" за "+Формат(НачПериода,"ДФ=dd.MM.yyyy");	
				
				//Геннадий #4415 25.12.2020 ->
				//добавлена запись текста ошибки
				ТекстОшибки = "";
				//Асеев 31.10.2024 (Задача № 5339)>>>
				ОператорРассылки = ОпределитьОператораРассылки(Настройка, КонтрагентДляРассылки);
				//Асеев 31.10.2024 (Задача № 5339)<<<
				Если ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
					
					Отпр = lem.ОтправитьСообщение(МасП, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Логистическая компания ""Стриж""",,ТипТекстаПочтовогоСообщения.HTML,,ТекстОшибки,Настройка.ТипРассылки,Ложь);
					
				ИначеЕсли ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
					
					ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
					Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Логистическая компания ""Стриж""",,ТипТекстаПочтовогоСообщения.HTML,,ТекстОшибки,Настройка.ТипРассылки,Ложь);
					
				КонецЕсли;
				ПараметрыЗаписи.ОтчетОтправлен 	= Отпр;
				ПараметрыЗаписи.ТекстОшибки 	= ТекстОшибки;
				ПараметрыЗаписи.ОператорРассылки = ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования;
				//Геннадий <-
				
				РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
			КонецЕсли;
			
			// ++ Отключено по Задача № 3427
			
			//Стр_ = СтрСоединить(МасП, "; ");
			//
			//ПараметрыЗапроса = Новый Структура;
			//ПараметрыЗапроса.Вставить("Контрагент",КонтрагентРассылки.Контрагент.Ссылка);
			//ПараметрыЗапроса.Вставить("ВидОтчета", Настройка.Отчет);
			//ПараметрыЗапроса.Вставить("НастройкаОтправки", Настройка);
			//ПараметрыЗапроса.Вставить("ПериодФормирования1",ПериодОтчета - 3600);
			//ПараметрыЗапроса.Вставить("ПериодФормирования2",ПериодОтчета);
			//
			//Если НЕ lem.ОтчетОтправлялся(ПараметрыЗапроса) Тогда 
			//	
			//	Отпр = lem.ОтправитьСообщение(МасП, ТемаПисьма, ТекстПисьма ,ПутьКФайлу,"Логистическая компания ""Стриж""",,,,,,ЛОжь);
			//	
			//	Ф = Новый ДвоичныеДанные(ПутьКФайлу);
			//	
			//	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
			//	
			//	ТекД = ТекущаяДата();
			//	
			//	Наб = РегистрыСведений.ОтчетыКОтправкеРегламент.СоздатьНаборЗаписей();
			//	Наб.Отбор.Контрагент.Установить(КонтрагентРассылки.Контрагент.Ссылка);
			//	наб.Отбор.ПериодФормирования.Установить(ТекД);
			//	Наб.Отбор.ВидОтчета.Установить(Настройка.Отчет);
			//	
			//	Нов = наб.Добавить();
			//	Нов.Контрагент = КонтрагентРассылки.Контрагент.Ссылка;
			//	Нов.ПериодФормирования = ТекД;
			//	Нов.ВыгрузкаXML = Хр;
			//	Нов.GUID = Г;
			//	Нов.НастройкаОтправки = Настройка.Ссылка;
			//	Нов.ОтчетОтправлен = Отпр;
			//	Нов.СписокПолучателей = Стр_;
			//	Нов.ВидОтчета = Настройка.Отчет;
			//	
			//	Наб.Записать();
			//	
			//	НаборЗаписейРСОтчетыКОтправке = РегистрыСведений.ОтчетыКОтправке.СоздатьНаборЗаписей();
			//	НаборЗаписейРСОтчетыКОтправке.Отбор.Контрагент.Установить(КонтрагентРассылки.Контрагент.Ссылка);
			//	НаборЗаписейРСОтчетыКОтправке.Отбор.ПериодФормирования.Установить(ТекД);
			//	НаборЗаписейРСОтчетыКОтправке.Отбор.ВидОтчета.Установить(Настройка.Отчет);
			//	ЗаписьРСОтчетыКОтправке = НаборЗаписейРСОтчетыКОтправке.Добавить();
			//	ЗаписьРСОтчетыКОтправке.Контрагент = КонтрагентРассылки.Контрагент.Ссылка;
			//	ЗаписьРСОтчетыКОтправке.ПериодФормирования = ТекД;
			//	ЗаписьРСОтчетыКОтправке.ВидОтчета = Настройка.Отчет;
			//	ЗаписьРСОтчетыКОтправке.GUID = Г;
			//	ЗаписьРСОтчетыКОтправке.ВыгрузкаXML = Хр;
			//	ЗаписьРСОтчетыКОтправке.ОтчетОтправлен = Отпр;
			//	ЗаписьРСОтчетыКОтправке.СписокПолучателей = Стр_;
			//	НаборЗаписейРСОтчетыКОтправке.Записать();
				
			//КонецЕсли; 
			// -- Отключено по Задача № 3427

		КонецЦикла;
		
		Возврат; // Отчеты отправлены, больше выполнять нечего.
		
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетММ_003 Тогда
		////Отчет по 003
		//ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		//От = Отчеты.ОтчетММ_003.Создать();
		//Контрагент0003 = Справочники.Контрагенты.НайтиПоКоду("Shop_181");
		//Т = От.СформироватьОтправитьПоПочте(ПарПериод, Контрагент0003,Неопределено);
		//Если Т <> Неопределено Тогда
		//    СохранитьИОтправитьтабличныйДокумент(Т,Настройка,Контрагент0003);
		//КонецеСли;
		МассивКонтрагентов = Новый Массив;
		МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("Shop_181"));//003
		МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("Shop_227"));//ММ
		//Отчет по МедиаМаркт
		ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		От = Отчеты.ОтчетММ_003.Создать();
		Т = От.СформироватьОтправитьПоПочте(ПарПериод, МассивКонтрагентов,Неопределено);
		//Серегин М.В. 17.08.2015 18:32:57
		//+++ Костя
	ИначеЕсли  Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоСкладамМагазинов Тогда 
		ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		
		От = Отчеты.ОтчетПоСкладамМагазинов.Создать();
		Т = От.СформироватьОтправитьПоПочте(ПарПериод);
		//--- Костя
		
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоДоставкамКомитента Тогда //Серегин М.В. 08.09.2015 15:09:41 
		ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		От = Отчеты.ОтчетПоДоставкамКомитента.Создать();
		Т = От.СформироватьОтправитьПоПочте(ПарПериод,Неопределено,Настройка.Владелец,,Настройка);
		//Серегин М.В. 08.09.2015 15:08:22 отчет отправляется из модуля отчета
		Т = Неопределено
		//+++ БАО 09.06.2017 №1034 
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.СписокЗаказовСНепривязаннымиАдресами Тогда
		От = Отчеты.СписокЗаказовСНепривязаннымиАдресами.Создать();
		Т = От.СформироватьОтправитьПоПочтеПоКонтрагенту(НачПериода, Настройка.Владелец, Истина);
		Т = Неопределено
		//--- БАО 09.06.2017 №1034 	
		// МАС - 29.09.2017 - №1866 доработан и перенесен из общих отчетов --->> 
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.КачествоДоставкиЛореаль Тогда
		От = Отчеты.ОтчетПоКачествуДоставок_Лореаль.Создать();
				
		Т = От.СформироватьОтправитьПоПочте(НачПериода, Настройка.Владелец);
		// <<--- МАС
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетАгентаУниверсальный Тогда
		От = Отчеты.ОтчетАгентаУниверсальный.Создать();
		//тест
		//НачПериода = '20210222';
		//КонПериода = '20210331';
		//тест
		Т = От.ПолучитьВыводОтчета(НачПериода, КонПериода, Настройка.Владелец);
		Если Т <> Неопределено Тогда
			Если Не Т.ВысотаТаблицы Тогда
				Т = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецеСли;
	
	//Серегин М.В. 24.08.2015 14:48:15 проверка сформированного отчета 
	Если Т = Неопределено Тогда
		Возврат;
	КонецеСли;	
	//Серегин М.В. 24.08.2015 14:48:16
	
	Г = Новый УникальныйИдентификатор;
	//НаименованиеФайла = СокрЛП(Настройка.Наименование) +" за "+Формат(Год(НачПериода),"ЧГ=0")+"_"+Месяц(НачПериода)+"_"+День(НачПериода);
	
	НачПериодаДень = НачалоДня(НачПериода);
	КонПериодаДень = НачалоДня(КонПериода);
	Если НачПериодаДень <> КонПериодаДень Тогда
		ПредставлениеПериода = Формат(НачПериода, "ДФ=yyyy_MM_dd") + "_" + Формат(КонПериода, "ДФ=yyyy_MM_dd");
		ПредставлениеПериодаТема = Формат(НачПериода, "ДФ=dd.MM.yyyy") + "-" + Формат(КонПериода, "ДФ=dd.MM.yyyy");
	Иначе
		ПредставлениеПериода = Формат(НачПериода, "ДФ=yyyy_MM_dd");
		ПредставлениеПериодаТема = Формат(НачПериода, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	НаименованиеФайла = Строка(Настройка.Отчет) + " " + СокрЛП(Настройка.Владелец.Код) + " за " + ПредставлениеПериода;
	
	ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + НаименованиеФайла + ".xls";
	Т.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	
	
	МасП = Новый Массив;
	Стр_ = "";
	Если Не Настройка.ТипРассылки.Пустая() Тогда
		Стр_ = "evgeniy.marochkin@strizh-logistic.ru";
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	РассылкиКонтрагентов.Почта
		|ИЗ
		|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
		|ГДЕ
		|	РассылкиКонтрагентов.ТипРассылки = &ТипРассылки
		|	И РассылкиКонтрагентов.Контрагент = &Контрагент";
		Зап.УстановитьПараметр("Контрагент", Настройка.Владелец);			
		Зап.УстановитьПараметр("ТипРассылки", Настройка.ТипРассылки);
		Рез = Зап.Выполнить().Выгрузить();
		Для Каждого Тек Из Рез Цикл
			МасП.Добавить(СокрЛП(Тек.Почта));
			Стр_ = Стр_ + ";" + Тек.Почта;
		КонецЦикла;	
	Иначе
		Стр_ = "";
		Для Каждого Тек Из Настройка.СписокАдресов Цикл
			если Тек.Отправлять Тогда
				МасП.Добавить(СокрЛП(Тек.Адрес));
				Стр_ = Стр_ + ";" + Тек.Адрес;
			КонецеСли;	
		КонецЦикла;	
	КонецеСли;
	
	#Область ОтправкаИЛогирование
	
	КонтрагентДляРассылки = Настройка.Владелец.Ссылка;
	
	ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);
	ПараметрыЗаписи.ВидОтчета = Настройка.Отчет;
	ПараметрыЗаписи.НастройкаОтправки = Настройка;
	ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;		

	ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
	
	ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
	ПараметрыЗаписи.GUID = Г;
	ПараметрыЗаписи.СписокПолучателей = Стр_;

	Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
		//Тема = СокрЛП(Настройка.Наименование)+" за "+Формат(НачПериода,"ДФ=dd.MM.yyyy");
		Тема = СокрЛП(Настройка.Наименование) + " за " + ПредставлениеПериодаТема;
		
		//Геннадий #4415 25.12.2020 ->
		//добавлена запись текста ошибки во внешний лог
		ТекстОшибки = "";
		//Асеев 31.10.2024 (Задача № 5339)>>>
		ОператорРассылки = ОпределитьОператораРассылки(Настройка, КонтрагентДляРассылки);
		//Асеев 31.10.2024 (Задача № 5339)<<<
		Если ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
			
			Отпр = lem.ОтправитьСообщение(МасП,  Тема, Тема, ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки, Настройка.ТипРассылки) ;
			
		ИначеЕсли ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
			
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП,  Тема, Тема, ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки, Настройка.ТипРассылки);
			
		КонецЕсли;
		ПараметрыЗаписи.ОтчетОтправлен 	= Отпр;
		ПараметрыЗаписи.ТекстОшибки 	= ТекстОшибки;
		ПараметрыЗаписи.ОператорРассылки = ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования;
		//Геннадий <-
		
		РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
	КонецЕсли;
	
	// ++Отключено по Задача № 3427
	////+++++Серегин М.В. 11.12.2015 11:51:18 
	//ПараметрыЗапроса = Новый Структура;
	//ПараметрыЗапроса.Вставить("Контрагент",Настройка.Владелец.Ссылка);
	//ПараметрыЗапроса.Вставить("ВидОтчета",Настройка.Отчет);
	//ПараметрыЗапроса.Вставить("НастройкаОтправки",Настройка.Ссылка);
	//ПараметрыЗапроса.Вставить("ПериодФормирования1",ТекущаяДата()-3600);
	//ПараметрыЗапроса.Вставить("ПериодФормирования2",ТекущаяДата());
	//
	//Если НЕ ОтчетОтправлялся(ПараметрыЗапроса) Тогда  //+++++Серегин М.В. 11.12.2015 11:43:15 проверяем отправлялся ли отчет уже
	//	
	//	Тема = СокрЛП(Настройка.Наименование)+" за "+Формат(НачПериода,"ДФ=dd.MM.yyyy");	
	//	Отпр = lem.ОтправитьСообщение(МасП,  Тема, Тема, ПутьКФайлу, "Логистическая компания ""Стриж""",,,,,Настройка.ТипРассылки) ;
	//	
	//	
	//	Ф = Новый ДвоичныеДанные(ПутьКФайлу);
	//	
	//	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	//	
	//	ТекД = ТекущаяДата();
	//	
	//	Наб = РегистрыСведений.ОтчетыКОтправкеРегламент.СоздатьНаборЗаписей();
	//	Наб.Отбор.Контрагент.Установить(Настройка.Владелец.Ссылка);
	//	наб.Отбор.ПериодФормирования.Установить(ТекД);
	//	Наб.Отбор.ВидОтчета.Установить(Настройка.Отчет);
	//	
	//	Нов = наб.Добавить();
	//	Нов.Контрагент = Настройка.Владелец.Ссылка;
	//	Нов.ПериодФормирования = ТекД;
	//	Нов.ВыгрузкаXML = Хр;
	//	Нов.GUID = Г;
	//	Нов.НастройкаОтправки = Настройка.Ссылка;
	//	Нов.ОтчетОтправлен = Отпр;
	//	Нов.СписокПолучателей = Стр_;
	//	Нов.ВидОтчета = Настройка.Отчет;
	//	
	//	Наб.Записать();
	//КонецЕсли; //-----Серегин М.В. 11.12.2015 11:44:21
	// --Отключено по Задача № 3427
	#КонецОбласти
КонецПроцедуры

Функция ОтчетОтправлялся(ПараметрыЗапроса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ОтчетыКОтправкеРегламент.Контрагент
	|ИЗ
	|   РегистрСведений.ОтчетыКОтправкеРегламент КАК ОтчетыКОтправкеРегламент
	|ГДЕ
	|   ОтчетыКОтправкеРегламент.Контрагент = &Контрагент
	|   И ОтчетыКОтправкеРегламент.ВидОтчета = &ВидОтчета
	|   И ОтчетыКОтправкеРегламент.НастройкаОтправки = &НастройкаОтправки
	|   И ОтчетыКОтправкеРегламент.ВидОтчета = &ВидОтчета
	|   И ОтчетыКОтправкеРегламент.ОтчетОтправлен
	|   И ОтчетыКОтправкеРегламент.ПериодФормирования МЕЖДУ &ПериодФормирования1 И &ПериодФормирования2";
	
	Запрос.УстановитьПараметр("ВидОтчета", ПараметрыЗапроса.ВидОтчета);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыЗапроса.Контрагент);
	Запрос.УстановитьПараметр("НастройкаОтправки", ПараметрыЗапроса.НастройкаОтправки);
	Запрос.УстановитьПараметр("ПериодФормирования1", ПараметрыЗапроса.ПериодФормирования1);
	Запрос.УстановитьПараметр("ПериодФормирования2", ПараметрыЗапроса.ПериодФормирования2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ()


//Серегин М.В. 21.08.2015 11:51:51 вспомогательная 
Процедура СохранитьИОтправитьтабличныйДокумент(Т,Настройка,Контрагент)
	Г = Новый УникальныйИдентификатор;
	ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + СокрЛП(Настройка.Наименование) + ".xls";
	Т.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	
	
	МасП = Новый Массив;
	Стр_ = "";
	Если Не Настройка.ТипРассылки.Пустая() Тогда
		Стр_ = "evgeniy.marochkin@strizh-logistic.ru";
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	РассылкиКонтрагентов.Почта
		|ИЗ
		|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
		|ГДЕ
		|	РассылкиКонтрагентов.ТипРассылки = &ТипРассылки
		|	И РассылкиКонтрагентов.Контрагент = &Контрагент";
		Зап.УстановитьПараметр("Контрагент", Настройка.Владелец.Ссылка);			
		Зап.УстановитьПараметр("ТипРассылки", Настройка.ТипРассылки);
		Рез = Зап.Выполнить().Выгрузить();
		Для Каждого Тек Из Рез Цикл
			МасП.Добавить(СокрЛП(Тек.Почта));
			Стр_ = Стр_ + ";" + Тек.Почта;
		КонецЦикла;	
	Иначе
		Стр_ = "";
		Для Каждого Тек Из Настройка.СписокАдресов Цикл
			если Тек.Отправлять Тогда
				МасП.Добавить(СокрЛП(Тек.Адрес));
				Стр_ = Стр_ + ";" + Тек.Адрес;
			КонецеСли;	
		КонецЦикла;	
	КонецеСли;
	
	Отпр = lem.ОтправитьСообщение(МасП, "Отчет:"+Настройка.Отчет+" по контрагенту: "+Контрагент, "Отчет:"+Настройка.Отчет+" по контрагенту: "+Контрагент, ПутьКФайлу, "Логистическая компания ""Стриж""",,,,,Настройка.ТипРассылки) ;
	
	
	Ф = Новый ДвоичныеДанные(ПутьКФайлу);
	
	Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	
	ТекД = ТекущаяДата();
	
	Наб = РегистрыСведений.ОтчетыКОтправкеРегламент.СоздатьНаборЗаписей();
	Наб.Отбор.Контрагент.Установить(Настройка.Владелец.Ссылка);
	наб.Отбор.ПериодФормирования.Установить(ТекД);
	Наб.Отбор.ВидОтчета.Установить(Настройка.Отчет);
	
	Нов = наб.Добавить();
	Нов.Контрагент = Настройка.Владелец.Ссылка;
	Нов.ПериодФормирования = ТекД;
	Нов.ВыгрузкаXML = Хр;
	Нов.GUID = Г;
	Нов.НастройкаОтправки = Настройка.Ссылка;
	Нов.ОтчетОтправлен = Отпр;
	Нов.СписокПолучателей = Стр_;
	Нов.ВидОтчета = Настройка.Отчет;
	
	Наб.Записать();
	
КонецПроцедуры


Функция ПолучитьФорматДанныхПартнера(Контрагент) Экспорт
	Струк = Новый Структура;
	Струк.Вставить("Контрагент", Контрагент.Ссылка);
	
	Возврат РегистрыСведений.ФорматыДанныхПартеров.Получить(Струк);
КонецФункции	

Процедура РегламентВыгрузкаМашин() Экспорт
	
	////+++ Костя 220915-
	//+++++ ------240915
	
	
	
	
	Обр = Обработки.ВыгрузкаМашин.Создать();
	//Обр.ДатаДоставки = Дата("20150603");// Тест
	Обр.ДатаДоставки = ТекущаяДата();   //
	ТабЗаказовМашин = "";
	Рез = Обр.ВыгрузитьМашины(ТабЗаказовМашин);
	МасП = Новый Массив;
	
	//МасП.Добавить("svn@strizh-logistic.ru");
	МасП.Добавить("rea@strizh-logistic.ru");
	МасП.Добавить("maksim.ivanov@strizh-logistic.ru");	
	
	МасП.Добавить("logist@strizh-logistic.ru");
	//+++++Серегин М.В. 19.01.2016 11:46:35 
	//МасП.Добавить("yuriy.gnedov@strizh-logistic.ru");
	//-----Серегин М.В. 19.01.2016 11:46:36 
	МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	МасП.Добавить("alexey.kuzmichev@strizh-logistic.ru");
	//МасП.Добавить("anatoly.kopytin@strizh-logistic.ru");
	//МасП.Добавить("irebrova@sbs-consulting.ru");
	МасП.Добавить("syn@strizh-logistic.ru");
	//МасП.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
	МасП.Добавить("denis.zherebtsov@strizh-logistic.ru"); // ТЕСТ 
	МасП.Добавить("v.yakurnov@strizh-logistic.ru");
	
	Если Рез = "" Тогда
		КолЗаказов = ТабЗаказовМашин.Количество();
		ТабМ = ТабЗаказовМашин.Скопировать();
		ТабМ.Свернуть("Машина", "Кол");
		ТабМ.Сортировать("Кол Убыв");
		
		МакетHTML = Обр.ПолучитьМакет("МакетHTML");
		ТекстHTMLМакет = МакетHTML.ПолучитьТекст();
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоМашин]"  , ТабМ.Количество());
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоЗаказов]", КолЗаказов);
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"</tbody></table></body></html>","");
		
		Т = "";
		СчМаш = 0;
		Для Каждого Тек Из ТабМ Цикл
			Если ЗначениеЗаполнено(Тек.Машина) Тогда
				ГосНомер = Тек.Машина.НомерГосударственнойРегистрации;
			Иначе
				ГосНомер = "машины нет";
			КонецеСли;	
			Т = Т + ГосНомер + ": " + Формат(Тек.Кол, "ЧГ=") + " шт;" + Символы.ПС;
			СчМаш = СчМаш + 1;
			
			ТекстHTMLМакет = ТекстHTMLМакет + 
			"<TR style='BACKGROUND-COLOR: #F5F5DC';'HEIGHT: 11.25pt' height=15>" +
			"<TD align='CENTER';class=xl67 style='BORDER-TOP: windowtext 0.5pt solid; HEIGHT: 11.25pt; BORDER-RIGHT:  2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext 0.5pt solid; ' height=15><FONT size=2 face=Arial>"+СчМаш+"</FONT></TD>"+
			"<TD align='RIGHT'; class=xl70 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; ' colSpan=2><FONT size=2 face=Arial>"+ГосНомер+"</FONT></TD>"+
			"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Тек.Кол+"</FONT></TD></TR>";			
			
		КонецЦикла;	
		
		Т = Т + "ИТОГО: доставок  = " + Формат(КолЗаказов) + " шт." + ", машин = " + Формат(СчМаш);
		
		ТекстHTMLМакет = ТекстHTMLМакет + "</TBODY></TABLE></BODY></HTML>";
		
		//Отпр = lem.ОтправитьСообщение(МасП, "Произведена выгрузка машин (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст) ;
		Отпр = lem.ОтправитьСообщение(МасП,                                                // Массив адресов
		"Произведена выгрузка машин (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", // Тема 
		ТекстHTMLМакет,                                                         // Текст
		,                                                                       // Файл
		"Логистическая компания ""Стриж""",                                     // Имя отправителя
		,                                                                       // Обратный адрес
		ТипТекстаПочтовогоСообщения.HTML) ;                                     // Тип текста		
		
	Иначе
		Если ТипЗнч(Рез) = Тип("Булево") Тогда
			Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст) ;
		Иначе
			Т = Рез;
			Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст) ;
		КонецеСли;	
	КонецеСли;
	
	//Обр = Обработки.ВыгрузкаМашин.Создать();
	//Обр.ДатаДоставки = ТекущаяДата(); //Дата("20150603");//
	//ТабЗаказовМашин = "";
	//Рез = Обр.ВыгрузитьМашиныПоДате();
	//Если Рез <> Неопределено Тогда
	//	//ПутьКФайлу = КаталогВременныхФайлов()+"ВыгрузкаМашин_"+ Формат(ТекущаяДата(), "ДЛФ=D") +".xls";
	//	//Рез.Записать(ПутьКФайлу,ТипФайлаТабличногоДокумента.XLS);
	//	
	//	МасП = Новый Массив;
	//	МасП.Добавить("logist@strizh-logistic.ru");
	//	МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	//	МасП.Добавить("alexey.kuzmichev@strizh-logistic.ru");
	//	МасП.Добавить("anatoly.kopytin@strizh-logistic.ru");
	//	МасП.Добавить("irebrova@sbs-consulting.ru");
	//	МасП.Добавить("syn@strizh-logistic.ru");
	//	МасП.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
	//	МасП.Добавить("konstantin.patsatsiya@strizh-logistic.ru"); // ТЕСТ 
	//	
	//	Отпр = lem.ОтправитьСообщение(МасП,                                                // Массив адресов
	//	"Произведена выгрузка машин (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", // Тема 
	//	Рез,                                                                               // Текст
	//	,                                                                       // Файл
	//	"Логистическая компания ""Стриж""",                                                // Имя отправителя
	//	,                                                                                  // Обратный адрес
	//	ТипТекстаПочтовогоСообщения.HTML) ;                                        // Тип текста
	//Иначе
	//	Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")",Рез, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст);
	//КонецЕсли;
	
	////--- Костя 220915	
	
	Пер = Новый СтандартныйПериод;
	Пер.ДатаНачала = НачалоДня(ТекущаяДата());
	Пер.ДатаОкончания = КонецДня(ТекущаяДата());
	От = Отчеты.ОтчетПоДоставкамКомитента.Создать();
	//Серегин М.В. 08.09.2015 14:54:03 получим контрагентов исключений
	ТаблицаКонтрагентовИсключений = smv.ПолучитьКонтрагентовИсключений(Перечисления.ТипыСвязейКонтрагентовИсключений.РегламентВыгрузкаМашин);
	//Серегин М.В. 08.09.2015 15:04:43 
	
	От.СформироватьОтправитьПоПочте(Пер, ТаблицаКонтрагентовИсключений, Неопределено);
	
КонецПроцедуры	


Процедура РегламентПроверкаНезагруженныхЗаказов() Экспорт
	Обр = Обработки.РазличияДоставокВ1СиАдминке.Создать();
	ДатаДоставки = НачалоДня(ТекущаяДата() + 12*60*60);
	Обр.ДатаДоставки = ДатаДоставки;
	Рез = Обр.Сравнить(Неопределено, Истина);
	
	
	ДатаОтчета = ТекущаяДата() - 10;
	Об = Отчеты.РазличияДоставок1СИАдминкиБД.Создать();
	Таб = Неопределено;
	Результат = Об.СформироватьОтправитьПоПочте(ДатаОтчета, Таб);
	Если Таб.Строки.Количество() <> 0 Тогда
		
		Г = Новый УникальныйИдентификатор;
		ПутьКФайлу = КаталогВременныхФайлов() + Строка(Г) + ".html";
		Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.HTML3);
		Т = Новый ТекстовыйДокумент();
		Т.Прочитать(ПутьКФайлу);
		Стр = Т.ПолучитьТекст();
		МасП = Новый Массив;
		
		
		МасП.Добавить("logist@strizh-logistic.ru");
		
		//+++++Серегин М.В. 19.01.2016 11:48:00 
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//-----Серегин М.В. 19.01.2016 11:48:02 
		
		Отпр = lem.ОтправитьСообщение(МасП, "Отчет по различиям на " + Формат(ДатаОтчета, "ДЛФ=DD"), Стр, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.HTML) ;
		
		Если Отпр Тогда
			ТекД = ТекущаяДата();
			Наб = РегистрыСведений.Различия1сИАдминки_ПисьмоОтправлено.СоздатьНаборЗаписей();
			Наб.отбор.Период.Установить(ТекД);
			
			Для Каждого Тек Из Таб.Строки Цикл
				Нов = Наб.Добавить();
				Нов.Период = ТекД;
				Нов.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
			КонецЦикла;	
			Наб.Записать();
		КонецеСли;	
	Иначе
		
	КонецеСли;
КонецПроцедуры	




Функция ПолучитьСтрокуПодключения(ИпАдрес) Экспорт
	
	СтрокаПодключения = ИпАдрес;
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		СтрокаПодключения = "localhost:9500";
	КонецЕсли;
	
	СтрокаПодключения = НРег(СокрЛП(СтрокаПодключения));
	Если СтрДлина(СтрокаПодключения) < 8 Тогда
		СтрокаПодключения = "http://" + СтрокаПодключения;	
	Иначе
		Если Лев(СтрокаПодключения, 7) <> "http://" И Лев(СтрокаПодключения, 8) <> "https://" Тогда
			СтрокаПодключения = "http://" + СтрокаПодключения;	
		КонецЕсли;
	КонецЕсли;
	
	Если Прав(СтрокаПодключения, 5) <> ".asmx" Тогда
		
		Инд = 0;
		Если Лев(СтрокаПодключения, 7) = "http://" Тогда
			Инд = 7;
		ИначеЕсли Лев(СтрокаПодключения, 8) = "https://" Тогда
			Инд = 8;
		КонецЕсли;
		
		Если Найти(Прав(СтрокаПодключения, СтрДлина(СтрокаПодключения)-Инд), ":") = 0 Тогда
			СтрокаПодключения = СтрокаПодключения + ":9500";
		КонецЕсли;
		СтрокаПодключения = СтрокаПодключения + "/MobileSMARTS/DataStorage.asmx";
	КонецЕсли;	
	
	Возврат СтрокаПодключения;		
КонецФункции


Процедура ПроверкаСоединенияНажатие(Сервер)
	Перем мМодель;
	Перем мНетОшибки;
	
	ТипСвязи = "Сервер";
	
	мНетОшибки = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
	Объект = Неопределено;
	ОбработкаОбъект = Обработки.ТСД.Создать();
	времПараметры = Новый Структура;
	
	Прокси = "";
	ПортПрокси = "";
	
	//времПараметры.Вставить("НомерБазы",                НомерБазы);
	//времПараметры.Вставить("НомерДокумента",           НомерДокумента);
	времПараметры.Вставить("ВыбиратьИсточникЗагрузки", Истина);
	
	времПараметры.Вставить("ТипСвязи",                ТипСвязи);
	времПараметры.Вставить("СтрокаПодключенияКСерверу", ПолучитьСтрокуПодключения(Сервер.СтрокаПодключения));
	времПараметры.Вставить("Прокси", Прокси);
	времПараметры.Вставить("ПортПрокси", ПортПрокси);
	
	Если ОбработкаОбъект.СоздатьОбъектДрайвера(Объект, мМодель, времПараметры) = мНетОшибки Тогда
		МассивЗначений = Новый Массив;
		Если ТипСвязи = "Сервер" Тогда
			МассивЗначений.Добавить(1);	
			МассивЗначений.Добавить(ПолучитьСтрокуПодключения(Сервер.СтрокаПодключения));	
			//МассивЗначений.Добавить(Прокси);
			//МассивЗначений.Добавить(ПортПрокси);
		КонецЕсли;
		
		Если Объект.Драйвер.ПроверитьСоединениеССервером(МассивЗначений) Тогда
			#Если Клиент Тогда
				Сообщить("Проверка соединения с ТСД прошла успешно! (" + СокрЛП(Сервер.Наименование) + ")");	
			#КонецеСли
		Иначе
			Ошибка = "";
			Объект.Драйвер.ПолучитьОшибку(Ошибка);
			#Если Клиент Тогда
				Сообщить("Соединение с ТСД не установлено! (" + СокрЛП(Сервер.Наименование) + ") Ошибка: " + Ошибка);
			#КонецеСли
		КонецЕсли;	
		
		Объект.Драйвер.ОсвободитьРесурсы();
	КонецЕсли;
КонецПроцедуры	



//////////////////////////////////функции ТСД клеверенс       //////////////////////////////////

// Функция, при необходимости, подключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид подключаемого оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьОборудование(Вид, Клиент, ПодключИдентификатор=Неопределено)
	мНетОшибки = 1;
	Результат = мНетОшибки;
	ПоследняяОшибка = мНетОшибки;
	
	ТО      = ПолучитьТО();
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");
	
	СтруктураПоиска = Новый Структура("Вид", Вид);
	СтрокиТО        = ТО.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТО.Количество() = 0 Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    РегТО.Идентификатор       КАК Идентификатор,
		|    РегТО.Модель.Наименование КАК Наименование,
		|    РегТО.Модель              КАК Модель,
		|    РегТО.Параметры           КАК Параметры
		|ИЗ
		|    РегистрСведений.ТорговоеОборудование КАК РегТО
		|ГДЕ
		|    РегТО.Идентификатор                      = &Компьютер         
		|");
		//ИмяКомпьютераТО = "";
		//Выполнить("ИмяКомпьютераТО = ПолучитьСерверТО().ПолучитьИмяКомпьютераТО()");
		Запрос.УстановитьПараметр("Компьютер", ПодключИдентификатор);
		//+?(Найти(мНазваниеКонфигурации,"управлениеторговлей")>0 и ОбработкаОбъект.ПолучитьВерсиюКонфигурации() >= 10030608 ," И РегТО.Подключено ","")+
		СтрокиТО = Запрос.Выполнить().Выгрузить();
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			ИмяВременногФайла = ПолучитьИмяВременногоФайла(".epf");
			МакетОбработки = СтрокаТО.Модель.ОбработкаОбслуживания.Обработка.Получить();
			МакетОбработки.Записать(ИмяВременногФайла);	
			ПутьКФайлуВнешнейОбработки = ИмяВременногФайла;
			ОписаниеОбработки = ПолучитьОписаниеОбработки(ИмяВременногФайла);
			ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
			Если ЗначениеЗаполнено(ОбработкаКлеверенс) Тогда
				Идентификатор = СтрокаТО.Идентификатор;
				Наименование  = СтрокаТО.Наименование;
				Обработка     = Неопределено;
				Параметры     = ?(ПустаяСтрока(СтрокаТО.Параметры),
				Новый Структура(),
				ЗначениеИзСтрокиВнутр(СтрокаТО.Параметры));
				Модель        = СтрокаТО.Модель.Модель;
				мМодельПодключаемогоТО = Модель;
				
				Результат = "";
				выполнить("Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СтрокаТО.Модель, Обработка)");
				
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					#Если Клиент Тогда
						Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное); 
					#КонецеСли
					ПоследняяОшибка = Результат;
					
					
					Продолжить;
				КонецЕсли;
				
				Объект    = Неопределено;
				Результат = Обработка.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					#Если Клиент Тогда
						
						Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					#КонецеСли
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;
				
				Результат = Обработка.Подключить(Объект);
				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					#Если Клиент Тогда
						Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					#КонецеСли
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;
				
				Оборудование                             = ТО.Добавить();
				Оборудование.Вид                         = Вид;
				Оборудование.Ссылки                      = 1;
				Оборудование.Идентификатор               = Идентификатор;
				Оборудование.Наименование                = Наименование;
				Оборудование.Обработка                   = Обработка;
				Оборудование.Объект                      = Объект;
				Оборудование.ИмяИсточникаВнешнегоСобытия = Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(Объект);
				
				//СообщенияКлиента = Клиенты[Клиент];
				//Сообщения        = Обработка.ПолучитьОписаниеСобытий(Объект);
				//Сообщения.Колонки.Добавить("Идентификатор");
				//Сообщения.Колонки.Добавить("Вид");
				//Сообщения.ЗаполнитьЗначения(Идентификатор, "Идентификатор");
				//Сообщения.ЗаполнитьЗначения(Вид,           "Вид");
				
				//Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				//	Клиенты[Клиент] = Сообщения;
				//Иначе
				//	Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
				//		СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
				//		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				//	КонецЦикла;
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Если СтрокаТО.Ссылки = 0 Тогда
				мМодельПодключаемогоТО = СтрокаТО.Объект.Модель;
				Результат = СтрокаТО.Обработка.Подключить(СтрокаТО.Объект);
				
				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = СтрокаТО.Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					#Если Клиент Тогда
						
						Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					#КонецеСли
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;
				СтрокаТО.ИмяИсточникаВнешнегоСобытия = СтрокаТО.Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(СтрокаТО.Объект);
			КонецЕсли;
			
			//			СообщенияКлиента = Клиенты[Клиент];
			//			Сообщения        = СтрокаТО.Обработка.ПолучитьОписаниеСобытий(СтрокаТО.Объект);
			//			Сообщения.Колонки.Добавить("Идентификатор");
			//			Сообщения.Колонки.Добавить("Вид");
			//			Сообщения.ЗаполнитьЗначения(СтрокаТО.Идентификатор, "Идентификатор");
			//			Сообщения.ЗаполнитьЗначения(СтрокаТО.Вид,           "Вид");
			
			//			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
			//				Клиенты[Клиент] = Сообщения;
			//			Иначе
			//				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
			//					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
			//					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
			//				КонецЦикла;
			//			КонецЕсли;
			
			СтрокаТО.Ссылки = СтрокаТО.Ссылки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТО;
	
КонецФункции // ПодключитьОборудование()

// Функция возвращает параметр механизма работы с торговым оборудованием.
//
// Параметры:
//  ИмяПараметра  - <Строка>
//                - Имя необходимого параметра.
//
//  ТипПараметра  - <Строка>
//                - Имя типа необходимого параметра.
//
// Возвращаемое значение:
//  <*>           - Описание возвращаемого значения.
//
Функция ПолучитьПараметрСервераТО(ИмяПараметра, ТипПараметра)
	Перем мДанныеСервера;
	Если мДанныеСервера = Неопределено Тогда
		мДанныеСервера = Новый Структура();
	КонецЕсли;
	
	Результат = Неопределено;
	мДанныеСервера.Свойство(ИмяПараметра, Результат);
	Если Результат = Неопределено Тогда
		Результат = Новый(Тип(ТипПараметра));
		мДанныеСервера.Вставить(ИмяПараметра, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПараметрСервераТО()

Функция ПолучитьТО()
	
	ТО = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Если ТО.Колонки.Количество() = 0 Тогда
		ТО.Колонки.Добавить("Вид");
		ТО.Колонки.Добавить("Ссылки");
		ТО.Колонки.Добавить("Идентификатор");
		ТО.Колонки.Добавить("Наименование");
		ТО.Колонки.Добавить("Обработка");
		ТО.Колонки.Добавить("Объект");
		ТО.Колонки.Добавить("ИмяИсточникаВнешнегоСобытия");
	КонецЕсли;
	
	Возврат ТО;
	
КонецФункции

Функция ПолучитьПринадлежностьОбработкиКДрайверу(Знач ОписаниеОбработки)
	
	КодДрайвера = Неопределено;
	ОписаниеОбработки = нрег(ОписаниеОбработки);
	
	Если Найти(ОписаниеОбработки,"cleverence")>0 или Найти(ОписаниеОбработки,"клеверенс")>0 Тогда
		Если Найти(ОписаниеОбработки,"wi-fi")>0 и (Найти(ОписаниеОбработки,"проф")>0 или Найти(ОписаниеОбработки,"prof")>0) Тогда
			КодДрайвера = 1;     //Wi-Fi ПРОФ
		ИначеЕсли Найти(ОписаниеОбработки,"wi-fi")>0 и Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0  Тогда
			КодДрайвера = 2;     //Wi-Fi
		ИначеЕсли Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0 и Найти(ОписаниеОбработки,"wi-fi")= 0 Тогда
			КодДрайвера = 3;     //батч
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодДрайвера;
	
КонецФункции

// Функция осуществляет получение объекта драйвера торгового оборудования по идентификатору
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания.
//
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект)
	
	Перем ОбработкаОбслуживания;
	
	мИмяДляХраненияНастроекПрефикс = Идентификатор;
	
	мНетОшибки = 1;
	мОшибкаНеизвестно = -1;
	Результат = мНетОшибки;
	
	ТО = ПолучитьТО();
	Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
	Если Оборудование = Неопределено Тогда
		//Результат = мОшибкаНеизвестно;
		ТО = ПодключитьОборудование(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных, Неопределено, Идентификатор);
		//ТО = ПолучитьТО();
		Если ТО = Неопределено Тогда
			Результат = мОшибкаНеизвестно;
		Иначе
			Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
			Если Оборудование = Неопределено Тогда
				Результат = мОшибкаНеизвестно;
			КонецЕсли;			
		КонецеСли;	
	КонецЕсли;	
	
	Если Оборудование <> Неопределено Тогда
		Обработка = Оборудование.Обработка;
		Объект    = Оборудование.Объект;
	КонецЕсли;
	
	Попытка
		мТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера(); 
		мИмяДляХраненияНастроек = мИмяДляХраненияНастроекПрефикс +  мТипПодключенногоДрайвера;
		Заголовок = "Клеверенс Софт: Выгрузка номенклатуры на ТСД [драйвер "+мТипПодключенногоДрайвера+"]" 
	Исключение
		мБатчДрайвер              = Ложь;
		мТипПодключенногоДрайвера = "";
		мИмяДляХраненияНастроек   = мИмяДляХраненияНастроекПрефикс;
		Заголовок = "Клеверенс Софт: Выгрузка номенклатуры на ТСД";
		Результат = мОшибкаНеизвестно;
	КонецПопытки;
	
	//ОписаниеОбработки   = ПолучитьОписаниеОбработки(Обработка.ИспользуемоеИмяФайла);
	//ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
	//ПодключенныйДрайвер = ПолучитьПринадлежностьОбработкиКДрайверу("Клеверенс " + мТипПодключенногоДрайвера);
	//Если ЗначениеЗаполнено(ОбработкаКлеверенс) и ОбработкаКлеверенс <> ПодключенныйДрайвер Тогда
	//	Результат = "Обработка обслуживания не соответствует подключенному драйверу";
	//	Объект    = Неопределено;
	//КонецЕсли;
	
	мВидимостьЭлементовФормы = Результат = мНетОшибки;
	//ВидимостьЭлементовФормы();	
	
	Возврат Результат;
	
КонецФункции // ПолучитьОбъектДрайвера()

Функция ПолучитьДокументы(ТерминалСбораДанных)
	Спис = Новый СписокЗначений;
	Обработка = Неопределено;
	мОбъект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, мОбъект);
	Если мОбъект = Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
		#КонецеСли
		
		Возврат Неопределено;
	КонецЕсли;
	ДокументыТСД = Новый ТаблицаЗначений;
	
	ДокументыТСД.Колонки.Добавить("Документ");
	ДокументыТСД.Колонки.Добавить("ДатаДокумента");
	ДокументыТСД.Колонки.Добавить("ИдДокумента");
	ДокументыТСД.Колонки.Добавить("Изменен");
	ДокументыТСД.Колонки.Добавить("Завершен");
	ДокументыТСД.Колонки.Добавить("Пользователь");
	ДокументыТСД.Колонки.Добавить("Терминал");
	ДокументыТСД.Колонки.Добавить("ИдТерминала");
	ДокументыТСД.Колонки.Добавить("IP");
	ДокументыТСД.Колонки.Добавить("СтрокФакт");
	
	СписДокументов = Новый СписокЗначений;
	
	ДокументыМСМАРТС = мОбъект.Драйвер.ПолучитьДокументы(Неопределено);
	Если НЕ (ДокументыМСМАРТС = Неопределено Или ДокументыМСМАРТС = Null) Тогда
		Для инд=0 По ДокументыМСМАРТС.Количество-1 Цикл
			ДокументМСМАРТС = ДокументыМСМАРТС.Элемент(инд);      
			Строка = ДокументыТСД.Добавить();
			Строка.Документ      = ДокументМСМАРТС.Имя;
			Строка.ДатаДокумента = ДокументМСМАРТС.ДатаСоздания;
			Строка.ИдДокумента   = ДокументМСМАРТС.Ид;
			Строка.Изменен       = ДокументМСМАРТС.Изменен;
			Строка.Завершен      = ДокументМСМАРТС.Завершен;
			//
			//Если Не ПустаяСтрока(ДокументМСМАРТС.Назначение) Тогда
			//	Строка.Пользователь = ДокументМСМАРТС.Назначение;
			//Иначе
			Строка.Пользователь = ДокументМСМАРТС.ИмяПользователя;
			//КонецЕсли;
			//
			Строка.Терминал    = ДокументМСМАРТС.DeviceName;
			Строка.ИдТерминала = ДокументМСМАРТС.DeviceId;
			Строка.IP          = ДокументМСМАРТС.DeviceIP;
			//Строка.СтрокЗавл   = ДокументМСМАРТС.СтрокиПлан.Количество;
			Строка.СтрокФакт   = ДокументМСМАРТС.СтрокиФакт.Количество;
		КонецЦикла;
	Иначе
		//мВидимостьЭлементовФормы = Ложь;
		#Если Клиент Тогда
			Предупреждение("Ошибка при подключении. Проверьте параметры подключения в обработке подключения драйвера.",,"Изменение данных");
			мОбъект.Драйвер.ПолучитьОшибку(мОбъект.ОписаниеОшибки);
			Сообщить("Не удалось получить список документов! Ошибка: " + мОбъект.ОписаниеОшибки);
		#КонецеСли
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументыТСД;
КонецФункции

Функция ПолучитьОписаниеОбработки(ИмяФайлаОбработки)
	
	Результат = "";
	
	Попытка
		ОбрОбслуживания   = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
		Форма             = ОбрОбслуживания.ПолучитьФорму();
		Результат         = Форма.ПолучитьОписание().Наименование;
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьШКИзСтрокиДокумента(СтрокаДокументаТСД, Barcode = "") Экспорт  
	
	ШК = СтрокаДокументаТСД.ПолучитьПоле("code");
	Если ШК = Неопределено Или ПустаяСтрока(ШК) Или
		ШК = "00000000" Или ШК = "0" Или Найти(ШК, "{") > 0 Тогда
		ШК = СтрокаДокументаТСД.ПолучитьПоле("barcode");
	КонецЕсли;
	Barcode = СтрокаДокументаТСД.ПолучитьПоле("barcode");
	
	Если ШК <> Неопределено Тогда
		Инд = Найти(ШК, "|");
		Если Инд > 0 Тогда
			ШК = Лев(ШК, Инд-1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШК;
	
КонецФункции



//////////////////////////////////функции ТСД клеверенс  //////////////////////////////////


Функция ПроверкаШКНаСервисный(ШК) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	НастройкиОперацийТСД.Операция Как Опер
	|ИЗ
	|	РегистрСведений.НастройкиОперацийТСД КАК НастройкиОперацийТСД
	|ГДЕ
	|	НастройкиОперацийТСД.ШтрихкодСтр = &ШтрихкодСтр";
	Зап.УстановитьПараметр("ШтрихкодСтр", ШК);
	
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
		Если Лев(ШК, 3) = "084" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.ВозвратWiFiПоКонтрагентам;
			//Серегин М.В. 12.05.2015 18:33:10 
		ИначеЕсли Лев(ШК, 3) = "090" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.НаборнаяВедомостьВозвраты;
		ИначеЕсли Лев(ШК, 7) = "3100000" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
		ИначеЕсли Лев(ШК, 7) = "3100001" Или Лев(ШК, 7) = "3100002" Или Лев(ШК, 7) = "3100003" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
			
		ИначеЕсли ШК = "012345678950" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.ПриездАвтоКомитента;
			//Серегин М.В. 12.05.2015 18:33:12 
		Иначе	
			Возврат Неопределено;
		КонецеСли;	
	Иначе
		Возврат Рез.Выгрузить()[0].Опер;
	КонецеСли;	
КонецФункции	


Процедура ДобавитьШКИзмерения(ТабИзмерений, ТабШК, ШК, Заказ, ТабДока) Экспорт 
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецеСли;
	
	СтрокаШК = ТабШК.Найти(ШК);
	
	ОтменаИзмерения = СтрокаШК.ОтменаИзмерения;
	ПоказательИзмерения = СтрокаШК.ПоказательИзмерения;
	
	
	
	Струк = Новый Структура;
	Струк.Вставить("Отмена", Ложь);
	Струк.Вставить("Заказ", Заказ);
	
	НайСтроки = ТабИзмерений.НайтиСтроки(Струк);
	
	Если Не ОтменаИзмерения Тогда
		Если НайСтроки.Количество() = 0 Тогда
			СтрокаДанных = ТабИзмерений.Добавить();
			СтрокаДанных.Заказ = Заказ;
			СтрокаДанных.Сторона1 = ПоказательИзмерения;
			СтрокаДанных.Сторона2 = 0;
			СтрокаДанных.Сторона3 = 0;
			СтрокаДанных.Отмена = Ложь;
		Иначе
			СтрокаДанных = НайСтроки[0];
			Если СтрокаДанных.Сторона1 = 0 Тогда
				СтрокаДанных.Сторона1 = ПоказательИзмерения;
			ИначеЕсли СтрокаДанных.Сторона2 = 0 Тогда
				СтрокаДанных.Сторона2 = ПоказательИзмерения;
			ИначеЕсли СтрокаДанных.Сторона3 = 0 Тогда
				СтрокаДанных.Сторона3 = ПоказательИзмерения;
				СтрокаДанных.Произведение = Окр((СтрокаДанных.Сторона1 * СтрокаДанных.Сторона2 * СтрокаДанных.Сторона3)/1000000, 3);
			Иначе
				//ничего не делаем. количество измерений больше трёх
			конецеСли;	
		КонецеСли;	
		Нов = ТабДока.Добавить();
		Нов.Заказ = Заказ;
		Нов.ШтрихкодГабарита = ШК;
		Нов.ЗначениеИзмерения = ПоказательИзмерения;
	Иначе
		Если НайСтроки.Количество() > 0 Тогда
			НайСтроки[0].Отмена = Истина;
		КонецеСли;	
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Заказ);
		
		НайСтрокиДока = ТабДока.НайтиСтроки(Струк);
		Для Каждого Тек Из НайСтрокиДока Цикл
			Тек.ОтменаИзмерения = Истина;
		КонецЦикла;	
	КонецеСли;
КонецПроцедуры	


Процедура РегламентЗагрузкаДанныхСТСД(УдалятьДокументыССервера = Неопределено) Экспорт
	//Ид = Константы.ИдентификаторТСДДляРегламентнойЗагрузки.Получить();	
	//ЗагрузкаДанныхСТСД(Ид);
	//
	
	// Якурнов 27.08.2018 13:47:30
	
	Если Константы.ФлагЗагрузкиДанныхСТСД.Получить() Тогда
		#Если Клиент Тогда
			Сообщить("В данный момент уже производится загрузка данных с ТСД!", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецеСли;
	
	Константы.ФлагЗагрузкиДанныхСТСД.Установить(Истина);
	
	Попытка
		Зап = Новый Запрос;
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	СерверыWiFiТСД.ИдентификаторТСД,
		|	СерверыWiFiТСД.Ссылка КАК Сервер,
		|	СерверыWiFiТСД.ПроверятьПодключение,
		|	МестонахождениеТСДСрезПоследних.Склад
		//+++ БАО 18.08.2017 №1684
		|,	СерверыWiFiТСД.ОбменЧерезWEBСервис КАК ОбменЧерезWEBСервис
		//--- БАО 18.08.2017 №1684
		|ИЗ
		|	Справочник.СерверыWiFiТСД КАК СерверыWiFiТСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеТСД.СрезПоследних КАК МестонахождениеТСДСрезПоследних
		|		ПО (МестонахождениеТСДСрезПоследних.ТСД = СерверыWiFiТСД.Ссылка)
		|ГДЕ
		|	СерверыWiFiТСД.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СерверыWiFiТСД.Код";
		
		Рез = Зап.Выполнить().Выгрузить();
		Для Каждого Тек Из Рез Цикл
			//+++ БАО 18.08.2017 №1684
			Если Тек.ОбменЧерезWEBСервис Тогда
				//--- БАО 18.08.2017 №1684	
				Если Тек.ПроверятьПодключение Тогда
					РаботаСТСДCleverenceСервер.ПроверитьПодключение(Тек.Сервер);
				КонецеСли;	
				РаботаСТСДCleverenceСервер.ЗагрузкаСТСДЧерезВебСервер(Тек.ИдентификаторТСД, Тек.Сервер, УдалятьДокументыССервера, Тек.Склад);
			Иначе 
				//--- БАО 18.08.2017 №1684	
				Если Тек.ПроверятьПодключение Тогда
					ПроверкаСоединенияНажатие(Тек.Сервер);
				КонецеСли;	
				//ЗагрузкаДанныхСТСД(Тек.ИдентификаторТСД, Тек.Сервер, УдалятьДокументыССервера, Тек.Склад);
				
				//+++ БАО 18.08.2017 №1684
			КонецЕсли;
			//--- БАО 18.08.2017 №1684
			
		КонецЦикла;	
		Константы.ФлагЗагрузкиДанныхСТСД.Установить(Ложь);
	Исключение
		Константы.ФлагЗагрузкиДанныхСТСД.Установить(Ложь);
	КонецПопытки;
КонецПроцедуры	


//+++ БАО 29.05.2017 №922
Процедура РегламентЗагрузкаДанныхСТСД_ПоСерверамОбмена(УдалятьДокументыССервера = Неопределено, ИмяКомпьютера = "") Экспорт
	//Ид = Константы.ИдентификаторТСДДляРегламентнойЗагрузки.Получить();	
	//ЗагрузкаДанныхСТСД(Ид);
	//
	Если Константы.ФлагЗагрузкиДанныхСТСД_V3.Получить() Тогда
		#Если Клиент Тогда
			Сообщить("В данный момент уже производится загрузка данных с ТСД!", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецеСли;
	
	Константы.ФлагЗагрузкиДанныхСТСД_V3.Установить(Истина);
	
	Попытка
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	СерверыWiFiТСД.ИдентификаторТСД,
		|	СерверыWiFiТСД.Ссылка КАК Сервер,
		|	СерверыWiFiТСД.ПроверятьПодключение,
		|	МестонахождениеТСДСрезПоследних.Склад
		|ИЗ
		|	Справочник.СерверыWiFiТСД КАК СерверыWiFiТСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеТСД.СрезПоследних КАК МестонахождениеТСДСрезПоследних
		|		ПО МестонахождениеТСДСрезПоследних.ТСД = СерверыWiFiТСД.Ссылка
		|ГДЕ
		|	СерверыWiFiТСД.ПометкаУдаления = ЛОЖЬ
		//+++ БАО 29.05.2017 №922
		|	И СерверыWiFiТСД.СерверОбменаСТСД.Наименование = &ИмяКомпьютера
		//--- БАО 29.05.2017 №922
		|	И СерверыWiFiТСД.ВерсияMobileSmarts = ЗНАЧЕНИЕ(Перечисление.ВерсииMobileSmarts.v3)";
		
		//+++ БАО 29.05.2017 №922
		Зап.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера);
		//--- БАО 29.05.2017 №922
		
		Рез = Зап.Выполнить().Выгрузить();
		Для Каждого Тек Из Рез Цикл
			Если Тек.ПроверятьПодключение Тогда
				ПроверкаСоединенияНажатие(Тек.Сервер);
			КонецеСли;	
			//ЗагрузкаДанныхСТСД(Тек.ИдентификаторТСД, Тек.Сервер, УдалятьДокументыССервера, Тек.Склад);
		КонецЦикла;	
		Константы.ФлагЗагрузкиДанныхСТСД_V3.Установить(Ложь);
	Исключение
		Ош = ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить(Ош, СтатусСообщения.Важное);
		#КонецЕсли
		
		Константы.ФлагЗагрузкиДанныхСТСД_V3.Установить(Ложь);
	КонецПопытки;
КонецПроцедуры
//--- БАО 29.05.2017 №922 


Процедура РегламентПереносЗаказовНаВторуюОчередь() Экспорт
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ЗаказыКПереносуНаВторуюОчередь.Заказ
	|ИЗ
	|	РегистрСведений.ЗаказыКПереносуНаВторуюОчередь КАК ЗаказыКПереносуНаВторуюОчередь
	|ГДЕ
	|	ЗаказыКПереносуНаВторуюОчередь.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗаказыКПереносуНаВторуюОчередь.ТипПереноса = Значение(Перечисление.ВидыОперацийПереносаЗаказов.ПереносНаПослезавтра)";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата() - 86400));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата() - 86400));	
	
	//Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
	//Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));			
	Выб = зап.Выполнить().Выгрузить();
	
	Д = Документы.ПереносНаВторуюОчередь.СоздатьДокумент();
	Д.ДатаПереноса = ТекущаяДата();
	Д.Дата = ТекущаяДата();
	
	Для Каждого Тек Из Выб Цикл
		Нов = Д.Заказы.Добавить();
		Нов.Заказ = Тек.Заказ;
	КонецЦикла;
	
	Д.Записать(РежимЗаписиДокумента.Запись);
	Д.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры	

Процедура РегламентЗагрузкаДанныхИзАдминки() Экспорт
	Перем ДатаНач, ДатаКон;
	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "РеглПоследняяЗагрузкаЗаказов");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаНач);
	ДатаЗапроса = НачалоДня(ТекущаяДата());
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		Попытка
			ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		Исключение
			//Лог("Ошибочное значение даты последней загрузки доставок "+ДатаНач);
		КонецПопытки;
	Иначе
		//Лог("Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=РеглПоследняяЗагрузкаЗаказов)");
	КонецЕсли;
	ГраницаЗаказов = ДатаЗапроса;
	УсловиеЗапроса = "
	|	O.modifyDate > '"+Евген.ДатаИз1С(ДатаЗапроса, Ложь)+"'
	|";
	КомментарийОшибкиЗапроса = "Ошибка заполнения номеров измененных заказов";
	Попытка
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	getdate() AS curDate
		|", Подкл);
		ДатаЗапроса = Евген.СоздатьТаблицу(RS, "curDate_Д")[0].curDate_Д;
		RS=0;
	Исключение
		НормальныйХодВыполнения = Ложь;
		//Лог("Ошибка получения текущего времени"+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка
		// Добавляем условия к запросу:
		// 	- отбрасываем статус = 1 (новый заказ)
		//  - отбрасываем заказы, где есть позиция "Забор товара у поставщика"
		Евген.ЗапросКИнтернетМагазину("
		|INSERT INTO
		|	#orderList (orderId, modifyDate)
		|SELECT
		|	O.orderId,
		|	O.modifyDate
		|FROM
		|	_order O (NOLOCK)
		|INNER JOIN
		|	settings S (NOLOCK) ON S.shopId = O.SettingID
		|LEFT JOIN
		|	(SELECT 
		|		orderId,
		|		count(*) AS lines
		|	FROM
		|		_orderItems (NOLOCK)
		|	GROUP BY
		|		orderId
		|	) T ON T.orderId = O.orderId
		|WHERE " +
		УсловиеЗапроса + "                                         
		|	AND O.status IN (2,3,4,5)
		|	AND (ISNULL(T.lines, 0) > 0 or o.selfDelivery IN (2, 3)) 
		|   AND S.internetShopID <> 179
		|", Подкл);
		
		
		Р = Евген.ЗапросКИнтернетМагазину("select orderid from #orderList", Подкл);
		Таб = Евген.СоздатьТаблицу(Р, "orderID_Ч");
		Таб.Колонки.Добавить("Стр");
		Для Каждого Тек Из Таб Цикл
			Тек.Стр = Строка(Тек.orderid_Ч);
		КонецЦикла;	
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	НезагруженныеЗаказыСрезПоследних.Период КАК Дата,
		|	НезагруженныеЗаказыСрезПоследних.НомерЗаказа
		|ИЗ
		|	РегистрСведений.НезагруженныеЗаказы.СрезПоследних КАК НезагруженныеЗаказыСрезПоследних
		|ГДЕ
		|	НезагруженныеЗаказыСрезПоследних.Прогружен = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		РезНепр = зап.Выполнить().Выгрузить();
		Для каждого Тек Из РезНепр Цикл
			Най = Таб.Найти(Число(Тек.НомерЗаказа));
			Если Най <> Неопределено Тогда
				Продолжить;
			КонецеСли;	
			Евген.ЗапросКИнтернетМагазину("
			|INSERT INTO
			|	#orderList (orderId, modifyDate) VALUES (" + Тек.НомерЗаказа + ",'" + Евген.ДатаВSQL(Тек.Дата, Ложь) + "')", Подкл);
		КонецЦикла;	
	Исключение
		НормальныйХодВыполнения = Ложь;
		//Лог(КомментарийОшибкиЗапроса+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка	
		//СледующееСостояние("Чтение таблицы заказов");
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	OL.orderId                             AS orderId,
		|	OL.modifyDate						   AS modifyDate,
		|	O.createDate                           AS createDate,
		|	O.status                               AS status,
		|	O.pay_type                             AS pay_type,
		|	ISNULL(O.selfDelivery, 0)              AS selfDelivery,
		|	ISNULL(O.serviceDelivery, 0)           AS serviceDelivery,
		|	ISNULL(ISNULL(O.deliverydate, O.completeDate), O.createDate) AS completeDate,
		|	O.comment                              AS comment,
		|	ISNULL(O.deliveryPriceRUR, 0)          AS deliveryPrice,
		|	ISNULL(O.deliveryForMkadRUR, 0)        AS deliveryForMkadRUR,
		|	O.deliveryDate                         AS deliveryDate,
		|	ISNULL(O.timeDeliveryFrom, '9' )       AS timeDeliveryFrom,
		|	ISNULL(O.timeDeliveryTo,   '19')       AS timeDeliveryTo,
		|	U.UserId         AS UserId,
		|	U.firstName + ' ' + U.middleName + ' ' + U.lastName AS Name,
		|	U.comment   AS userComment,
		|	U.Email     AS Email,
		|	ISNULL(O.serviceDC, 0)				   AS serviceDC,
		|	ISNULL(O.ReasonRrefusal, '')		   AS ReasonRrefusal, 
		|	dbo.[fn_getUserAddrByIDAddr41C](O.userAddressId)	AS Addr,
		|	mvo.fulladdress	AS AddrFull,
		|	mvo.cashService	AS cashService,
		|	mvo.addrComment	AS addrComment,
		|	mvo.Beznal	AS Beznal,
		|	mvo.AgentComission AS AgentComission,
		|	mvo.BankKom AS BankKom,
		|	ISNULL(S.internetShopID, 0) AS shop,
		|	ISNULL(S.shopJurFace, '') AS shopJurFace,
		|	ISNULL(S.textReceipt, '') AS textReceipt,
		|	ISNULL(S.receiverID, '') AS receiverID,
		|	ISNULL(S.shopTitle, '') AS shopTitle,
		|	ISNULL(S.shopPhone, '') AS shopPhone,
		|	sh.name AS shopName,
		|	o.ispayed AS ispayed,
		|	o.PiecesOfFreight AS PiecesOfFreight,
		|	CI.carNumber AS carNumber,
		|	RBS.amount AS SumByCard,
		//Бухаров
		|	O.orderIDImport						   AS orderIDImport,
		|	O.typeDelivery						   AS typeDelivery,
		//Бухаров
		//Марочкин
		|	O.manager							   AS manager,
		//|	O.comment							   AS commentZ,
		|	U.userTel							   AS Telephone
		//Марочкин
		|FROM
		|	#orderList   OL (NOLOCK)
		|INNER JOIN
		|	_order       O (NOLOCK) ON O.orderId = OL.orderId
		|INNER JOIN
		|	_user        U (NOLOCK) ON O.userID = U.UserId
		|INNER JOIN
		|	mv_orders        mvo (NOLOCK) ON O.orderid = mvo.orderid			
		|INNER JOIN
		|	settings     S (NOLOCK) ON S.shopId = O.SettingID
		|INNER JOIN
		|	_InternetShops SH (NOLOCK) ON SH.internetShopID = S.internetShopID
		|LEFT JOIN
		|	_car       CI (NOLOCK) ON O.carId = CI.carId
		|LEFT JOIN
		|	_orderRBS       RBS (NOLOCK) ON O.orderId = RBS.orderId
		
		
		|ORDER BY
		|	OL.modifyDate ASC,
		|	OL.orderId ASC
		|", Подкл);  
		СписокЗаказов = Евген.СоздатьТаблицу(RS, "orderId_Ч, modifyDate_Д, createDate_Д, ReasonRrefusal, receiverID, status_Ч, serviceDC_Ч, pay_type_Ч, selfDelivery_Ч, serviceDelivery_Ч, completeDate_Д, comment, deliveryPrice_Ч, deliveryForMkadRUR_Ч, deliveryDate_Д, UserId_Ч, Name, userComment, Email, Addr, timeDeliveryFrom, timeDeliveryTo, shop_Ч, shopName, orderIDImport, typeDelivery_Ч, manager, Telephone, ispayed_Ч, AddrFull, cashService_Ч, Beznal_Ч, addrComment, PiecesOfFreight_Ч, shopPhone, shopTitle, shopJurFace, textReceipt, carNumber,  AgentComission_Ч, BankKom_Ч, SumByCard_Ч");
	Исключение
		НормальныйХодВыполнения = Ложь;
		//Лог("Ошибка чтения таблицы заказов"+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка	
		//СледующееСостояние("Чтение строк заказов");
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	OL.orderId                      AS orderId,
		|	OP.skuId                        AS skuId,
		|	OP.count-isnull(OP.missedcount, 0)                        AS cnt,
		|	ISNULL(OP.fixedCount, OP.count) AS fixedCount,
		|	OP.PriceUSD * OP.USD2RUR        AS Price,
		|	P.internetShopId                AS Shop,
		|	ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name AS Name,
		|	P.code                          AS Articul,
		|	OD.weight                          AS weight,
		|	productsRestore.skuId           AS skuIdrestore
		|FROM
		|	#orderList       OL  (NOLOCK)
		|INNER JOIN
		|	_orderItems      OP  (NOLOCK) ON OL.orderId = OP.orderId
		|INNER JOIN
		|	product          P   (NOLOCK) ON P.productId = OP.itemID
		|LEFT JOIN
		|	brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
		|LEFT JOIN
		|	objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
		|LEFT JOIN
		|	objectDescription OD (NOLOCK) ON P.productId = OD.objectId    AND OD.objectTypeId = 2			
		|LEFT JOIN
		|	category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
		|LEFT JOIN
		|	(SELECT
		|		pRe.code       AS code,
		|		MAX(sRe.skuId) AS skuId
		|	FROM                                                                   
		|		product		 pRe (NOLOCK) 
		|	LEFT JOIN                                                                   
		|		sku			 sRe (NOLOCK) ON sRe.productId = pRe.productId
		|	WHERE
		|		pRe.internetShopID = 166
		|	GROUP BY
		|		pRe.code
		|	) AS productsRestore ON productsRestore.code = p.code
		|ORDER BY
		|	OL.modifyDate ASC,
		|	OL.orderId ASC,
		|	OP.eid ASC			
		|", Подкл);
		ТабличнаяЧастьЗаказов = Евген.СоздатьТаблицу(RS, "orderId_Ч, skuId_Ч, cnt_Ч, fixedCount_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч");
		
		ТабличнаяЧастьЗаказов.Колонки.Добавить("Реж");
		Для Каждого Тек Из ТабличнаяЧастьЗаказов Цикл
			Тек.Реж = 1;
		КонецЦикла;	
		
		ТЗ2 = ТабличнаяЧастьЗаказов.Скопировать();
		ТЗ2.Свернуть("skuId_Ч", "Реж");
		
		Для Каждого Тек Из ТЗ2 Цикл
			Струк = Новый Структура;
			Струк.Вставить("skuId_Ч", Тек.skuId_Ч);
			НайСтроки = ТабличнаяЧастьЗаказов.НайтиСтроки(Струк);
			Для Сч = 0 По НайСтроки.Количество() - 1 Цикл
				Если НайСтроки[Сч].cnt_Ч = null тогда
					НайСтроки[Сч].cnt_Ч = 0;
				КонецеСли;	
				Если НайСтроки[Сч].cnt_Ч < 0 Тогда
					НайСтроки[Сч].Реж = 2;
				КонецеСли;	
			КонецЦикла;	
		КонецЦикла;	
		
		ТабличнаяЧастьЗаказов.Свернуть("orderId_Ч, skuId_Ч, Price_Ч, Name, Articul, Shop_Ч, skuIdrestore_Ч, weight_Ч, Реж", "cnt_Ч, fixedCount_Ч");
		RS=0;
	Исключение
		НормальныйХодВыполнения = Ложь;
		//Лог("Ошибка чтения строк заказов"+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	
	СписокКодовСайта = Неопределено;
	СписокКодовАдминки = Неопределено;
	ЗагрузкаПоКодамСайта = Истина;
	//СписокЭтапов.Свойство("ЗагрузитьНоменклатуруПоКодамСайта", СписокКодовСайта);
	ЗагрузкаПоКодамАдминки = Ложь;
	//СписокЭтапов.Свойство("ЗагрузитьНоменклатуруПоКодамАдминки", СписокКодовАдминки);
	Если ЗагрузкаПоКодамСайта Или ЗагрузкаПоКодамАдминки Тогда
		Попытка	
			//СледующееСостояние("Чтение списка товаров");
			RS = Евген.ЗапросКИнтернетМагазину("
			|SELECT
			|	S.skuId                  AS skuId,
			|	P.internetShopId         AS Shop,
			|	ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name + ' ' + ISNULL(s.name, '') AS Name,
			|	P.code                   AS Articul,
			|	sh.name                  AS shopName
			|FROM
			|	sku              S   (NOLOCK)
			|LEFT JOIN
			|	product          P   (NOLOCK) ON P.productId = S.productId
			|LEFT JOIN
			|	brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
			|LEFT JOIN
			|	objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
			|LEFT JOIN
			|	category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
			|INNER JOIN
			|	_InternetShops   SH  (NOLOCK) ON SH.internetShopID = P.internetShopID
			|WHERE " +
			?(ЗагрузкаПоКодамСайта, "S.skuId IN (SELECT CAST(value AS int) FROM fn_Split('"+СписокКодовСайта+"', ','))", "") +
			?(ЗагрузкаПоКодамАдминки, "P.productId IN (SELECT CAST(value AS int) FROM fn_Split('"+СписокКодовАдминки+"', ','))", "")
			, Подкл);
			СписокЗагружаемойНоменклатуры = Евген.СоздатьТаблицу(RS, "skuId_Ч, Name, Articul, Shop_Ч, shopName");
			RS=0;
		Исключение
			НормальныйХодВыполнения = Ложь;
			//Лог("Ошибка чтения списка товаров"+Символы.ПС+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ЗаписатьКонтрагентов = Ложь;
	СписокКолонокДанныхКОнтрагентов = "userId_Ч, ИНН, КПП, Name, userComment, Email, jurPerson";
	////Если СписокЭтапов.Свойство("ЗагрузитьКлиента", ПараметрыЭтапа) Тогда
	//	СледующееСостояние("Подготовка данных контрагента");
	//	Попытка
	//		RS = ЗапросКИнтернетМагазину("
	//		|SELECT
	//		|	INN AS ИНН,
	//		|	KPP AS КПП,
	//		|	jurFace AS Наименование,
	//		|	OKPO AS ОКПО,
	//		|	jurAddress AS ЮридическийАдрес,
	//		|	jurPerson AS jurPerson,
	//		|	BIK AS БИК,
	//		|	RS AS НомерРасчетногоСчета 
	//		|FROM
	//		|	mn_user (NOLOCK)
	//		|WHERE
	//		|	INN = '"+СокрЛП(ПараметрыЭтапа)+"'
	//		//|	AND userId <> 83079
	//		|ORDER BY
	//		|	userId
	//		|");
	//		ДанныеКонтрагентов = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
	//		RS=0;
	//		ЗаписатьКонтрагентов = ДанныеКонтрагентов.Количество() > 0;
	//	Исключение
	//		НормальныйХодВыполнения = Ложь;
	//		Лог("Ошибка поиска контрагента"+Символы.ПС+ОписаниеОшибки());
	//		Возврат;
	//	КонецПопытки;
	//ИначеЕсли ДелатьЗапросПоСпискуЗаказов Тогда
	//СледующееСостояние("Подготовка списка контрагентов");
	ПрефиксКодовКонтрагентов = "Shop_";
	Попытка
		Евген.ЗапросКИнтернетМагазину("
		|IF EXISTS (SELECT * FROM tempdb.sys.objects WHERE object_id = OBJECT_ID('tempdb..#clientList'))
		|	DROP TABLE #clientList
		|", Подкл);
		
		Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	C.userId
		|INTO
		|	#clientList
		|FROM
		|	#orderList OL
		|INNER JOIN
		|	_order O (NOLOCK) ON O.orderId = OL.orderId
		|INNER JOIN
		|	_user C (NOLOCK) ON C.userId = O.userId
		//|WHERE
		//|	ISNULL(O.pay_type, 1) IN (2,4)
		//|	AND O.isInvoiceSending = 1
		//|	AND O.isIMLogistic = 0
		//|	AND C.INN IS NOT NULL
		//|	AND C.INN <> ''
		//|	AND O.userId <> 83079
		|GROUP BY
		|	C.userId
		//|	C.INN
		|", Подкл);
		
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	userId
		|FROM
		|	#clientList
		|", Подкл);
		
		ПредварительныйСписокКонтрагентов = Новый СписокЗначений;
		Пока НЕ Rs.EOF Цикл
			ПредварительныйСписокКонтрагентов.Добавить(ПрефиксКодовКонтрагентов + Формат(Rs.Fields("userId").Value, "ЧГ="));
			Rs.MoveNext()
		КонецЦикла;
		RS=0;
		
		//СледующееСостояние("Поиск уже существующих котрагентов");
		УжеСуществующиеКонтрагенты = "";
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Код
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Код В(&ПредварительныйСписок)
		|	И Контрагенты.Покупатель = ИСТИНА";
		Запрос.УстановитьПараметр("ПредварительныйСписок", ПредварительныйСписокКонтрагентов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УжеСуществующиеКонтрагенты = УжеСуществующиеКонтрагенты + "," + Сред(Выборка.Код, 2);
		КонецЦикла;
		
		//СледующееСостояние("Подготовка данных котрагентов");
		RS = Евген.ЗапросКИнтернетМагазину("
		|SELECT
		|	C.userId,
		|	C.INN AS ИНН,
		|	C.KPP AS КПП,
		|	ISNULL(C.firstName, '') + ISNULL(' ' + C.middleName, '') + ISNULL(' ' + C.lastName, '') AS Name,
		|	C.comment   AS userComment,
		|	C.JurPerson   AS jurPerson,
		|	C.Email     AS Email
		//|	C.jurFace AS Наименование,
		//|	C.OKPO AS ОКПО,
		//|	C.jurAddress AS ЮридическийАдрес,
		//|	C.BIK AS БИК,
		//|	C.RS AS НомерРасчетногоСчета 
		|FROM
		|	#clientList L
		|INNER JOIN
		|	_user C (NOLOCK) ON C.userId = L.userId " + 
		
		?(УжеСуществующиеКонтрагенты = "", "", "
		|WHERE
		|	L.userId NOT IN ("+Сред(УжеСуществующиеКонтрагенты, 2)+")") +
		
		"
		|ORDER BY
		|	L.userId
		|", Подкл); //ORDER BY userId: в случае нескольких записей по одному ИНН в карточке контрагента должны остаться данные для максимального userId
		
		ДанныеКонтрагентов = Евген.СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
		ЗаписатьКонтрагентов = ДанныеКонтрагентов.Количество() > 0;
		RS=0;
		
	Исключение
		НормальныйХодВыполнения = Ложь;
		//Лог("Ошибка подготовки списка контрагентов"+Символы.ПС+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//КонецЕсли;	
	
КонецПроцедуры	

Процедура РегламентПереносЗаказов() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	новаМестнаяДоставка.Ссылка КАК Доставка,
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Сумма, 0) КАК СуммаЗаказа,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК Контрагент,
	|	ВЫБОР
	|		КОГДА новаМестнаяДоставка.ДатаСоздания МЕЖДУ &ДатаНач И &ДатаКон
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗаказСегодня
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	|ГДЕ
	|	новаМестнаяДоставка.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	новаМестнаяДоставка.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка,
	|	СУММА(ЕСТЬNULL(РеализацияТоваровУслугУслуги.Сумма, 0)),
	|	РеализацияТоваровУслуг.ВладелецТовара,
	|	ВЫБОР
	|		КОГДА новаМестнаяДоставка.ДатаСоздания МЕЖДУ &ДатаНач И &ДатаКон
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|			ПО (РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	|ГДЕ
	|	новаМестнаяДоставка.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
	|
	|СГРУППИРОВАТЬ ПО
	|	новаМестнаяДоставка.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.ВладелецТовара,
	|	ВЫБОР
	|		КОГДА новаМестнаяДоставка.ДатаСоздания МЕЖДУ &ДатаНач И &ДатаКон
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗаказы.Реализация КАК Реализация,
	|	СхемаЛимитированияКоличестваЗаказовКонтрагенты.Контрагент КАК Контрагент,
	|	ЛимитКоличестваЗаказовСрезПоследних.ЛимитКоличестваЗаказов КАК ЛимитКоличестваЗаказов,
	|	СхемаЛимитированияКоличестваЗаказовКонтрагенты.Переносить КАК Переносить,
	|	ЛимитКоличестваЗаказовСрезПоследних.СхемаЛимитирования КАК СхемаЛимитирования,
	|	СУММА(ВТЗаказы.СуммаЗаказа) КАК СуммаЗаказа,
	|	ВТЗаказы.ЗаказСегодня КАК ЗаказСегодня
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемаЛимитированияКоличестваЗаказов.Контрагенты КАК СхемаЛимитированияКоличестваЗаказовКонтрагенты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛимитКоличестваЗаказов.СрезПоследних(&ДатаКон, ) КАК ЛимитКоличестваЗаказовСрезПоследних
	|			ПО СхемаЛимитированияКоличестваЗаказовКонтрагенты.Ссылка.Ссылка = ЛимитКоличестваЗаказовСрезПоследних.СхемаЛимитирования.Ссылка
	|		ПО ВТЗаказы.Контрагент.Ссылка = СхемаЛимитированияКоличестваЗаказовКонтрагенты.Контрагент.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаказы.Реализация,
	|	СхемаЛимитированияКоличестваЗаказовКонтрагенты.Контрагент,
	|	ЛимитКоличестваЗаказовСрезПоследних.ЛимитКоличестваЗаказов,
	|	СхемаЛимитированияКоличестваЗаказовКонтрагенты.Переносить,
	|	ЛимитКоличестваЗаказовСрезПоследних.СхемаЛимитирования,
	|	ВТЗаказы.ЗаказСегодня
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказСегодня,
	|	СуммаЗаказа УБЫВ
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Реализация),
	|	МАКСИМУМ(ЛимитКоличестваЗаказов),
	|	МАКСИМУМ(Переносить),
	|	СУММА(ЗаказСегодня)
	|ПО
	|	СхемаЛимитирования,
	|	Контрагент";
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));			
	
	Зап.УстановитьПараметр("ДатаНач2", НачалоДня(ТекущаяДата())+ 86400);	// 		 - 86400*10
	Зап.УстановитьПараметр("ДатаКон2", КонецДня(ТекущаяДата()) + 86400);			// 
	
	Рез = Зап.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Д = Документы.ПереносЗаказовРегламент.СоздатьДокумент();
	Д.Дата = ТекущаяДата();
	Д.ДатаПереноса = НачалоДня(ТекущаяДата() + 2*86400);
	Д.ПричинаПереноса = Справочники.ПричиныОтказаПереноса.ПереносЗаказовВСвязиСПревышениемЛимита;
	
	
	Коэф = 1;
	ДД = ДеньНедели(НачалоДня(ТекущаяДата())+ 86400);
	
	Если ДД = 6 Или ДД = 7 Тогда
		Коэф = 0.5;
	КонецеСли;	
	
	Для Каждого РезЗак Из Рез.Строки Цикл
		
		Лим = Окр(РезЗак.ЛимитКоличестваЗаказов*Коэф);
		
		Если РезЗак.Реализация > Лим Тогда			
			Для Каждого Тек Из РезЗак.Строки Цикл
				Если Тек.Переносить Тогда
					Контрагент = Тек.Контрагент;
					#Если Клиент Тогда
						Сообщить(СокрЛП(Тек.Контрагент.Наименование) + "---------------------" + Строка(Лим));
					#КонецеСли
					НовК = Д.Контрагенты.Добавить();
					НовК.Контрагент = Контрагент;
					НовК.Лимит = Тек.ЛимитКоличестваЗаказов;
					НовК.СхемаЛимитирования = Тек.СхемаЛимитирования;
					
					Для Сч = Лим - (РезЗак.Реализация-Тек.реализация) По Тек.Реализация - 1 Цикл
						Если Тек.Строки[Сч].ЗаказСегодня <> 1 Тогда
							Продолжить;
						КонецеСли;							
						#Если Клиент Тогда
							Сообщить(Тек.Строки[Сч].Реализация.Номер);
						#КонецеСли
						Нов = Д.ПеренесенныеЗаказы.Добавить();
						Нов.Заказ = Тек.Строки[Сч].Реализация;
						Нов.ИсходнаяДата = ТекущаяДата();
						Нов.Контрагент = Контрагент;
					КонецЦикла;	
				КонецеСли;
			КонецЦикла;	
		КонецеСли;
	КонецЦикла;
	
	Если Д.ПеренесенныеЗаказы.Количество() <> 0 Тогда
		Д.Записать(РежимЗаписиДокумента.Запись);
		Д.Записать(РежимЗаписиДокумента.Проведение);
	КонецеСли;	
КонецПроцедуры	

Процедура СформироватьШтрихкоды(МасЗаказов) Экспорт
	ТабШтр = Новый ТаблицаЗначений;
	ТабШтр.Колонки.Добавить("Заказ");
	ТабШтр.Колонки.Добавить("ШК");
	
	
	Для СчетчикЗ = 0 По МасЗаказов.Количество() - 1 Цикл
		
		ТекЗаказ = МасЗаказов[СчетчикЗ];
		КодКонтрагента = Сокрлп(ТекЗаказ.ВладелецТовара.Код);
		Если Не ТекЗаказ.Контрагент.Родитель.Пустая() Тогда
			КодРодителяКонтрагента = сОКРлп(ТекЗаказ.ВладелецТовара.Родитель.Код);
		Иначе
			КодРодителяКонтрагента = "-";
		КонецеСли;	
		НомерЗаказа = СокрЛП(ТекЗаказ.Номер);
		НомерВнешнегоЗаказа = СокрЛП(ТекЗаказ.НомерВнешнегоЗаказа);
		
		
		СтрокаТаблицы = ТабШтр.Добавить();
		Штрихкод                                 = "37" + Формат((Число(НомерЗаказа)), "ЧЦ=10; ЧВН=; ЧГ=");
		СтрокаТаблицы.ШК             = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);
		СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
		
		ЕщеДве = Ложь;
		ДобавитьНашНомер = Истина;
		
		если КодКонтрагента = "Shop_181" Или КодКонтрагента = "Shop_227" Тогда
			СтрокаТаблицы = ТабШтр.Добавить();
			СтрокаТаблицы.ШК             = Прав(НомерВнешнегоЗаказа, 8);
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
		Иначеесли КодКонтрагента = "Shop_180" Тогда
			СтрокаТаблицы = ТабШтр.Добавить();
			Штрихкод                                 = Лев(НомерВнешнегоЗаказа, 6) + "110001";
			СтрокаТаблицы.ШК             = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
			
			СтрокаТаблицы = ТабШтр.Добавить();
			Штрихкод                                 = Лев(НомерВнешнегоЗаказа, 6) + "130001";
			СтрокаТаблицы.ШК             = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
			ЕщеДве = Истина;
		Иначеесли КодКонтрагента = "Shop_169" Тогда
			СтрокаТаблицы = ТабШтр.Добавить();
			СтрокаТаблицы.ШК             = НомерВнешнегоЗаказа + "01";
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
			ЕщеДве = Истина;
		Иначеесли КодКонтрагента = "Shop_177" Или КодКонтрагента = "Shop_212"  Или КодКонтрагента = "Shop_220"  Тогда
			СтрокаТаблицы = ТабШтр.Добавить();
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
			Если КодКонтрагента = "Shop_220" Тогда
				СтрокаТаблицы.ШК             = Прав(НомерВнешнегоЗаказа, 5) + "A01N01";
			Иначе
				СтрокаТаблицы.ШК             = Прав(НомерВнешнегоЗаказа, 7) + "A01N01";
			КонецеСли;	
			ЕщеДве = Истина;
		Иначеесли КодКонтрагента = "Shop_219" Или КодКонтрагента = "Shop_59" Или КодКонтрагента = "Shop_210" Тогда
			СтрокаТаблицы = ТабШтр.Добавить();
			Штрихкод                                 = НомерЗаказа;
			СтрокаТаблицы.ШК             = Штрихкод;
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
		ИначеЕсли КодКонтрагента = "Shop_222" Или КодРодителяКонтрагента = "Shop_92"  Тогда
			СтрокаТаблицы = ТабШтр.Добавить();
			СтрокаТаблицы.ШК             = НомерВнешнегоЗаказа;
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
		Иначеесли КодКонтрагента = "Shop_226" Тогда
			СтрокаТаблицы = ТабШтр.Добавить();
			СтрокаТаблицы.ШК             = СокрЛП(СтрЗаменить(НомерВнешнегоЗаказа, "-", ""));
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
		Иначеесли КодКонтрагента = "Shop_197" Тогда
			СтрокаТаблицы = ТабШтр.Добавить();
			СтрокаТаблицы.ШК             = "0000" + НомерВнешнегоЗаказа;
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
		Иначе	
			СтрокаТаблицы = ТабШтр.Добавить();
			Штрихкод                                 = НомерЗаказа;
			СтрокаТаблицы.ШК             = Штрихкод;
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
			ДобавитьНашНомер = Истина;
		КонецЕСли;	
		
		
		
		Если ДобавитьНашНомер Тогда
			СтрокаТаблицы = ТабШтр.Добавить();  
			СтрокаТаблицы.ШК             = НомерЗаказа;
			СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
		КонецеСли;	
		
		Если ЕщеДве Тогда
			если КодКонтрагента = "Shop_177" Или КодКонтрагента = "Shop_212" Или КодКонтрагента = "Shop_220"   Тогда
				Сч = 1;
				Для СчМП = 2 По 10 Цикл
					СтрокаТаблицы = ТабШтр.Добавить();
					Если КодКонтрагента = "Shop_220" Тогда
						Штрихкод                                 = Прав(НомерВнешнегоЗаказа, 5) + "A" + Формат(Сч, "ЧЦ=2; ЧВН=") + "N" + Формат(СчМП, "ЧЦ=2; ЧВН=");
					Иначе
						Штрихкод                                 = Прав(НомерВнешнегоЗаказа, 7) + "A" + Формат(Сч, "ЧЦ=2; ЧВН=") + "N" + Формат(СчМП, "ЧЦ=2; ЧВН=");
					КонецеСли;	
					СтрокаТаблицы.ШК             = Штрихкод;
					СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
					
				КонецЦикла;
			КонецеСли;
			
			Для Сч = 2 По 10 Цикл
				если КодКонтрагента = "Shop_169" Тогда
					СтрокаТаблицы = ТабШтр.Добавить();
					СтрокаТаблицы.ШК             = НомерВнешнегоЗаказа + Формат(Сч, "ЧЦ=2; ЧВН=");//Прав(СокрЛП(СтрокаТовара.НомерВнешнегоЗаказа), 7) + "02";//Штрихкод + lem.КонтрольныйСимволEAN(ШтрихКод, 13);;
					СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
				Иначеесли КодКонтрагента = "Shop_180" Тогда
					СтрокаТаблицы = ТабШтр.Добавить();
					Штрихкод                                 = Лев(НомерВнешнегоЗаказа, 6) + "1100" + Формат(Сч, "ЧЦ=2; ЧВН=");
					СтрокаТаблицы.ШК             = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);
					СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
					
					
					СтрокаТаблицы = ТабШтр.Добавить();
					Штрихкод                                 = Лев(НомерВнешнегоЗаказа, 6) + "1300" + Формат(Сч, "ЧЦ=2; ЧВН=");
					СтрокаТаблицы.ШК             = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);
					СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
				Иначеесли КодКонтрагента = "Shop_177" Или КодКонтрагента = "Shop_212" Или КодКонтрагента = "Shop_220"   Тогда
					Для СчМП = 1 По 10 Цикл
						СтрокаТаблицы = ТабШтр.Добавить();
						Если КодКонтрагента = "Shop_220" Тогда
							Штрихкод                                 = Прав(НомерВнешнегоЗаказа, 5) + "A" + Формат(Сч, "ЧЦ=2; ЧВН=") + "N" + Формат(СчМП, "ЧЦ=2; ЧВН=");
						Иначе
							Штрихкод                                 = Прав(НомерВнешнегоЗаказа, 7) + "A" + Формат(Сч, "ЧЦ=2; ЧВН=") + "N" + Формат(СчМП, "ЧЦ=2; ЧВН=");
						КонецЕсли;	
						СтрокаТаблицы.ШК             = Штрихкод;
						СтрокаТаблицы.Заказ                   = ТекЗаказ.Ссылка;
					КонецЦикла;
				Иначе
					Продолжить;
				КонецеСли;	
			КонецЦикла;	
		КонецеСли;	
	КонецЦикла;
	
	НачатьТранзакцию();
	Для Каждого Тек Из ТабШтр Цикл
		Наб = РегистрыСведений.ШтрихкодыЗаказов.СоздатьНаборЗаписей();
		Наб.Отбор.Заказ.Установить(Тек.Заказ.Ссылка);
		Наб.Отбор.Штрихкод.Установить(Тек.ШК);
		
		Нов = Наб.Добавить();
		Нов.Заказ = Тек.Заказ.Ссылка;
		Нов.Штрихкод = Тек.ШК;
		
		Наб.Записать();
	КонецЦикла;	
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Процедура РегламентЗагрузкаАктовПП() Экспорт
	Попытка
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.Контрагент,
		|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.ШаблонЗагрузки
		|ИЗ
		|	РегистрСведений.ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам КАК ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам
		|ГДЕ
		|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.Загружать = ИСТИНА
		|	И ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.ТипЗагрузки = ЗНАЧЕНИЕ(перечисление.ТипыЗагрузкиДанных.email)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.Контрагент,
		|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.ШаблонЗагрузки";
		
		Рез = Зап.Выполнить();
		Если Не Рез.Пустой() Тогда
			Выб = Рез.Выгрузить();
			Для Каждого Тек Из Выб Цикл
				РезультатЗагрузки = ЗагрузкаАктовПППочтой(Тек.Контрагент, Тек.ШаблонЗагрузки);
			КонецЦикла;	
		КонецеСли;	
		
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда  // Задача № 3497 При тестировании Яндекс не грузится
			Возврат;
		КонецЕсли;		
		
		//Асеев 13.03.2023 (Задача № 5007)>>>
		ЗагрузитьАктыППGoogleDisc();
		//Асеев 13.03.2023 (Задача № 5007)<<<
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.Контрагент
		|ИЗ
		|	РегистрСведений.ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам КАК ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам
		|ГДЕ
		|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.Загружать
		|	И ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.ТипЗагрузки = ЗНАЧЕНИЕ(перечисление.ТипыЗагрузкиДанных.Яндекс)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.Контрагент";
		
		Выборка = Зап.Выполнить().Выбрать();
		Пока Выборка.Следующий()  Цикл
			//гигантские реестры яд
			РезультатЗагрузки = ЗагрузкаАктовППЯндекс(Выборка.Контрагент);
		КонецЦикла; 
		//Если Не Рез.Пустой() Тогда
		//	Выб = Рез.Выгрузить();
		//	Для Каждого Тек Из Выб Цикл
		//		РезультатЗагрузки = ЗагрузкаАктовППЯндекс(Тек.Контрагент);
		//	КонецЦикла;	
		//КонецеСли;	
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

//Асеев 13.03.2023 (Задача № 5007)>>>
Функция ОбработатьФайлАППGoogleDisc(ПараметрыОбработки)
	
	ИмяФайлаСРасширением = ПараметрыОбработки.ИмяФайлаСРасширением;
	ИмяФайла = ПараметрыОбработки.ИмяФайла;
	ПутьКФайлу = ПараметрыОбработки.ПутьКФайлу;
	ШаблонЗагрузки = ПараметрыОбработки.ШаблонЗагрузки;
	Контрагент = ПараметрыОбработки.Контрагент;
	
	//ШаблонЗагрузки = Справочники.ШаблоныЗагрузкиExcel.ПустаяСсылка();
	
	ПрерватьВыполнение = Ложь;
	ТекстОшибки = "";
	
	ТабДок = Новый ТабличныйДокумент;
	Попытка
		ТабДок.Прочитать(ПутьКФайлу);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ПрерватьВыполнение = Истина;
	КонецПопытки;
	
	Если ПрерватьВыполнение Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	//тест
	//ТабДок.Показать(ПутьКФайлу);
	
	МинимальноеКоличествоСтрок = Макс(1, ШаблонЗагрузки.ПерваяСтрокаДанных);
	МинимальноеКоличествоКолонок = 1;
	
	//Если ШаблонЗагрузки.ВариантПоискаКолонки = 0 Тогда
	//	//по порядку
	//Иначе
	//	//по наименованию
	//КонецЕсли;
	
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	КоличествоКолонок = ТабДок.ШиринаТаблицы;
	
	Если Не (КоличествоКолонок >= МинимальноеКоличествоКолонок И КоличествоСтрок >= МинимальноеКоличествоСтрок) Тогда
		ТекстОшибки = "Некорректное количество строк/колонок в файле АПП";
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если Не ШаблонЗагрузки.ШаблонАПП_ПоискЗаказовНаОснованииШтрихкодовГМ Тогда
		ТекстОшибки = "Признак ""Поиск заказов на основании штрихкодов ГМ"" не установлен в шаблоне";
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ТаблицаШКГрузомест = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаШКГрузомест.Колонки;
	КолонкиТаблицы.Добавить("ШтрихкодГрузоместа", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(30));
	
	ДатаНакладной = '00010101';
	
	Для НомерСтроки = ШаблонЗагрузки.ПерваяСтрокаДанных По КоличествоСтрок Цикл
		СтрокаТаблицы = ТаблицаШКГрузомест.Добавить();
		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			Если ШаблонЗагрузки.ВариантПоискаКолонки = 0 Тогда
				НайКолонка = ШаблонЗагрузки.Поля.Найти(НомерКолонки, "Порядок");
			Иначе
				НайКолонка = ШаблонЗагрузки.Поля.Найти(ТабДок.Область("R" + Формат(ШаблонЗагрузки.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(НомерКолонки, "ЧГ=")).Текст, "Наименование");
			КонецЕсли;
			
			Если НайКолонка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ТабДок.Область("R" + Формат(НомерСтроки, "ЧГ=") +"C" + Формат(НомерКолонки, "ЧГ=")).Текст;
			СтрокаТаблицы[НайКолонка.Поле.Наименование] = Значение;
			
		КонецЦикла;
		
		ШК = СтрокаТаблицы.ШтрихкодГрузоместа;
		
		Если ШК = "" Или Не (Найти(ШК, "0") Или Найти(ШК, "1") Или Найти(ШК, "2") Или Найти(ШК, "3") Или Найти(ШК, "4") Или Найти(ШК, "5") Или Найти(ШК, "6") Или Найти(ШК, "7") Или Найти(ШК, "8") Или Найти(ШК, "9")) Тогда
			ТаблицаШКГрузомест.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	//тест
	//ТаблицаШКГрузомест.ВыбратьСтроку("ТаблицаШКГрузомест");
	
	Если Не ТаблицаШКГрузомест.Количество() Тогда
		ТекстОшибки = "Отсутствуют штрихкоды грузомест";
		Возврат ТекстОшибки;
	КонецЕсли;
	
	НайПоле = ШаблонЗагрузки.ПоляШапки.Найти(Справочники.ПоляДанныхЗагрузки.ДатаНакладной);
	Если НайПоле = Неопределено Тогда
		ТекстОшибки = "Не определено поле шапка ""Дата накладной""";
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Значение = СокрЛП(ТабДок.Область("R" + Формат(НайПоле.СтрокаВДокументе, "ЧГ=") +"C" + Формат(НайПоле.КолонкаВДокументе, "ЧГ=")).Текст);
	Если СтрДлина(Значение) = 10 Тогда
		Попытка
			ДатаНакладной = Дата(Прав(Значение, 4) + Сред(Значение, 4, 2) + Лев(Значение, 2));
		Исключение
			ТекстОшибки = "Неверный формат Даты накладной";
			ПрерватьВыполнение = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если ПрерватьВыполнение Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНакладной) Тогда
		ТекстОшибки = "Не определена Дата входящего документа";
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ТаблицаШКГрузомест", ТаблицаШКГрузомест);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаШКГрузомест.ШтрихкодГрузоместа КАК ШтрихкодГрузоместа,
	|	1 КАК КоличествоМест
	|ПОМЕСТИТЬ ВТ_ШКГрузомест
	|ИЗ
	|	&ТаблицаШКГрузомест КАК ТаблицаШКГрузомест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ШКГрузомест.ШтрихкодГрузоместа КАК Штрихкод,
	|	ВТ_ШКГрузомест.КоличествоМест КАК КоличествоМест,
	|	МАКСИМУМ(ШтрихкодыЗаказов.Заказ) КАК Заказ,
	|	МАКСИМУМ(ШтрихкодыЗаказов.Заказ.НомерВнешнегоЗаказа) КАК ВнешнийНомерЗаказа,
	|	МАКСИМУМ(ШтрихкодыЗаказов.Штрихкод ЕСТЬ NULL) КАК БезЗаказа
	|ИЗ
	|	ВТ_ШКГрузомест КАК ВТ_ШКГрузомест
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыЗаказов КАК ШтрихкодыЗаказов
	|		ПО ВТ_ШКГрузомест.ШтрихкодГрузоместа = ШтрихкодыЗаказов.Штрихкод
	|			И (ШтрихкодыЗаказов.Заказ.ВладелецТовара = &Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШКГрузомест.ШтрихкодГрузоместа,
	|	ВТ_ШКГрузомест.КоличествоМест";
	
	ТаблицаШКГрузомест = Запрос.Выполнить().Выгрузить();
	
	СтруктураБезЗаказа = Новый Структура("БезЗаказа", Ложь);
	ТаблицаШК = ТаблицаШКГрузомест.Скопировать(СтруктураБезЗаказа);
	Если ТаблицаШК.Количество() Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП, ЛОЖЬ) КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИСТИНА КАК Поле1) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
		|		ПО (ИСТИНА)";
		ВыборкаПараметрыКонтрагента = Запрос.Выполнить().Выбрать();
		ВыборкаПараметрыКонтрагента.Следующий();
		
		ДокАПП = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
		ДокАПП.Дата = ТекущаяДата();
		ДокАПП.Контрагент = Контрагент;
		ДокАПП.ДатаВходящегоДокумента = ДатаНакладной;
		ДокАПП.НомерВходящегоДокумента = ИмяФайла;
		ДокАПП.Основание = Перечисления.ТипыЗагрузкиДанных.GoogleDisc;
		ДокАПП.ОбновлятьКоличествоМестЗаказов = ВыборкаПараметрыКонтрагента.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
		
		ДокАПП.ШтрихкодыПоМестам.Загрузить(ТаблицаШК);
		ТаблицаШК.Свернуть("ВнешнийНомерЗаказа,Заказ", "КоличествоМест");
		ДокАПП.Заказы.Загрузить(ТаблицаШК);
		
		Попытка
			ДокАПП.Записать();
		Исключение
			ТекстОшибки = "Не удалось записать АПП " + ОписаниеОшибки();
			ПрерватьВыполнение = Истина;
		КонецПопытки;
		
		Если ПрерватьВыполнение Тогда
			Возврат ТекстОшибки;
		КонецЕсли;
		
		Попытка
			ДокАПП.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			pkv.ДобавитьВСписокОтложенногоПроведения(ДокАПП.Ссылка, "Не удалось провести " + ДокАПП + " ОбработатьФайлАППGoogleDisc " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		//отсутствуют все грузоместа
		ТемаПисьма = "Отсутствуют все грузоместа " + Контрагент + " "+ ИмяФайла;
		ТекстПисьма = Новый Массив;
		ТекстПисьма.Добавить(ТемаПисьма);
		ТекстПисьма.Добавить("Удаление файла...");
		ТекстПисьма = СтрСоединить(ТекстПисьма, "<br>");
		МассивПолучателей = Новый Массив;
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
		Иначе
			МассивПолучателей.Добавить("sklad1@strizh-logistic.ru");
			МассивПолучателей.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
		КонецЕсли;
		//отправляем файл
		ТекстОшибки = "";
		ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
		Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МассивПолучателей, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Сервер 1С",, ТипТекстаПочтовогоСообщения.ПростойТекст,, ТекстОшибки,,,, Ложь);
		ТекстОшибки = "";
		Возврат ТекстОшибки;
	КонецЕсли;
	
	СтруктураБезЗаказа.БезЗаказа = Истина;
	ТаблицаШК = ТаблицаШКГрузомест.Скопировать(СтруктураБезЗаказа);
	Если ТаблицаШК.Количество() Тогда
		//отсутствующие грузоместа
		//формирование файла лога
		//формирование письма
		ТемаПисьма = "Отсутствующие грузоместа " + Контрагент + " "+ ИмяФайла;
		ТекстПисьма = Новый Массив;
		ТекстПисьма.Добавить(ТемаПисьма);
		ТабДок.Очистить();
		НомерСтроки = 1;
		ТекОбласть = ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1);
		ТекОбласть.Текст = ТемаПисьма;
		Для Каждого СтрокаТаблицы Из ТаблицаШК Цикл
			НомерСтроки = НомерСтроки + 1;
			ТекОбласть = ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1);
			ТекОбласть.Текст = СтрокаТаблицы.Штрихкод;
			ТекстПисьма.Добавить(СтрокаТаблицы.Штрихкод);
		КонецЦикла;
		ТекстПисьма = СтрСоединить(ТекстПисьма, "<br>");
		МассивПолучателей = Новый Массив;
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
		Иначе
			МассивПолучателей.Добавить("sklad1@strizh-logistic.ru");
			МассивПолучателей.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
		КонецЕсли;
		ИмяФайлаЛога = КаталогВременныхФайлов() + "sos" + ИмяФайла + ".xls";
		ТабДок.Записать(ИмяФайлаЛога, ТипФайлаТабличногоДокумента.XLS);
		//тест
		//ТабДок.Показать();
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			//отправляем файл
			ТекстОшибки = "";
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МассивПолучателей, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Сервер 1С",, ТипТекстаПочтовогоСообщения.ПростойТекст,, ТекстОшибки,,,, Ложь);
			ТекстОшибки = "";
		Иначе
			//отправляем файл с логированием
			ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойРегламент);
			ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.СписокОтсутствующихВСистемеГМ;
			//ПараметрыЗаписи.НастройкаОтправки = Настройка;
			ПараметрыЗаписи.Контрагент = Контрагент;
			ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
			ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ИмяФайлаЛога);
			ПараметрыЗаписи.GUID = Новый УникальныйИдентификатор;
			ПараметрыЗаписи.СписокПолучателей = СтрСоединить(МассивПолучателей, "; ");
			
			ТекстОшибки = "";
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МассивПолучателей, ТемаПисьма, ТекстПисьма, ПутьКФайлу, "Сервер 1С",, ТипТекстаПочтовогоСообщения.ПростойТекст,, ТекстОшибки,,,, Ложь);
			
			ПараметрыЗаписи.ОтчетОтправлен = Отпр;
			ПараметрыЗаписи.ТекстОшибки = ТекстОшибки;
			ПараметрыЗаписи.ОператорРассылки = Справочники.ОператорыСМСРассылки.union.КлючДанныхТаблицыВнешнегоЛогирования;
			
			РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
			ТекстОшибки = "";
		КонецЕсли;
		Попытка
			УдалитьФайлы(ИмяФайлаЛога);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		//логируем загруженный файл
		ПараметрыЗаписиЛога = ЗагрузкаДанныхИзПочтыСервер.ПараметрыЗаписиЛогаЗагрузкиДанных(Справочники.ТипыЗагружаемыхДанных.ЗагрузкаАПП);
		
		ПараметрыЗаписиЛога.Контрагент = Контрагент;
		ПараметрыЗаписиЛога.ШаблонЗагрузки = ШаблонЗагрузки;
		ПараметрыЗаписиЛога.ИмяФайла = ИмяФайлаСРасширением;
		ПараметрыЗаписиЛога.Данные = Новый ДвоичныеДанные(ПутьКФайлу);
		ПараметрыЗаписиЛога.Отправитель = "GoogleDisc";
		
		ОшибкаЗаписиВнешнегоИсточника = "";
		Если Не ЗагрузкаДанныхИзПочтыСервер.ЗаписатьСтрокуЛогаЗагрузкиДанных(ПараметрыЗаписиЛога, ОшибкаЗаписиВнешнегоИсточника) Тогда
			ТекстОшибки = "Ошибка логирования загруженного файла " + ОшибкаЗаписиВнешнегоИсточника;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ЗагрузкаАктовППGoogleDisc(Контрагент, ШаблонЗагрузки)
	
	СписокОшибок = Новый Массив;
	
	Результат = РаботаСGoogleDiscСервер.ПолучитьТокен();
	Если Результат.Успешно Тогда
		Токен = Результат.Токен;
		Результат = РаботаСGoogleDiscСервер.ПолучитьСписокФайлов(Токен);
		Если Результат.Успешно Тогда
			Для Каждого СтруктураФайла Из Результат.Файлы Цикл
				ИмяФайлаСРасширением = СтруктураФайла.name;
				//Если ИмяФайлаСРасширением <> "Тест1.xlsx" Тогда
				//	Продолжить;
				//КонецЕсли;
				//Сообщить("Обработка файла " + ИмяФайлаСРасширением);
				
				ПозицияРазделителя = СтрНайти(ИмяФайлаСРасширением, ".", НаправлениеПоиска.СКонца);
				Если ПозицияРазделителя Тогда
					ИмяФайла = Лев(ИмяФайлаСРасширением, ПозицияРазделителя - 1);
				Иначе
					ИмяФайла = ИмяФайлаСРасширением;
				КонецЕсли;
				
				ДокАПП = mas.НайтиАПППоВходящемуНомеру(ИмяФайла, Контрагент);
				Если ДокАПП =  Неопределено Тогда
					Результат = РаботаСGoogleDiscСервер.СкачатьФайл(СтруктураФайла.id, Токен);
					Если Результат.Успешно Тогда
						
						ПутьКФайлу = КаталогВременныхФайлов() + ИмяФайлаСРасширением;
						Результат.Файл.Записать(ПутьКФайлу);
						
						ПараметрыОбработки = Новый Структура;
						ПараметрыОбработки.Вставить("ИмяФайлаСРасширением", ИмяФайлаСРасширением);
						ПараметрыОбработки.Вставить("ИмяФайла", ИмяФайла);
						ПараметрыОбработки.Вставить("ПутьКФайлу", ПутьКФайлу);
						ПараметрыОбработки.Вставить("ШаблонЗагрузки", ШаблонЗагрузки);
						ПараметрыОбработки.Вставить("Контрагент", Контрагент);
						
						ТекстОшибки = ОбработатьФайлАППGoogleDisc(ПараметрыОбработки);
						Если ТекстОшибки = "" Тогда
							Результат = РаботаСGoogleDiscСервер.УдалитьФайл(СтруктураФайла.id, Токен);
							Если Не Результат.Успешно Тогда
								СписокОшибок.Добавить("Ошибка удаления файла GoogleDisc");
								СписокОшибок.Добавить("name = " + ИмяФайлаСРасширением + ", id = " + СтруктураФайла.id);
								СписокОшибок.Добавить(Результат.ТекстОшибки);
							КонецЕсли;
						Иначе
							//ПоказатьПредупреждение(, "Ошибка обработки файла " + парПутьКФайлу);
							//Сообщить(ТекстОшибки);
							СписокОшибок.Добавить("Ошибка обработки файла GoogleDisc");
							СписокОшибок.Добавить("name = " + ИмяФайлаСРасширением + ", id = " + СтруктураФайла.id);
							СписокОшибок.Добавить(ТекстОшибки);
						КонецЕсли;
						
						Попытка
							УдалитьФайлы(ПутьКФайлу);
						Исключение
						КонецПопытки;
						
					Иначе
						СписокОшибок.Добавить("Ошибка скачивания файла GoogleDisc");
						СписокОшибок.Добавить("name = " + ИмяФайлаСРасширением + ", id = " + СтруктураФайла.id);
						СписокОшибок.Добавить(Результат.ТекстОшибки);
					КонецЕсли;
				Иначе
					//Сообщить("Уже есть АПП с Номером входящего документа " + ИмяФайла);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокОшибок.Добавить("Ошибка получения списка файлов GoogleDisc");
			СписокОшибок.Добавить(Результат.ТекстОшибки);
		КонецЕсли;
	Иначе
		СписокОшибок.Добавить("Ошибка получения токена GoogleDisc");
		СписокОшибок.Добавить(Результат.ТекстОшибки);
	КонецЕсли;
	
	Если СписокОшибок.Количество() Тогда
		МассивПолучателей = Новый Массив;
		МассивПолучателей.Добавить("m.aseev@strizh-logistic.ru");
		МассивПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			МассивПолучателей.Добавить("sklad1@strizh-logistic.ru");
			МассивПолучателей.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
		КонецЕсли;
		
		ТемаПисьма = "Ошибка загрузки АПП GoogleDisc " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		ТекстПисьма = СтрСоединить(СписокОшибок, Символы.ПС);
		
		lem.ОтправитьСообщение(МассивПолучателей, ТемаПисьма, ТекстПисьма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьАктыППGoogleDisc() Экспорт
	Зап = Новый Запрос;
	Зап.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.Контрагент КАК Контрагент,
	|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.ШаблонЗагрузки КАК ШаблонЗагрузки
	|ИЗ
	|	РегистрСведений.ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам КАК ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам
	|ГДЕ
	|	ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.Загружать = ИСТИНА
	|	И ПараметрыЗагрузкиПриходныхНакладныхПоКонтрагентам.ТипЗагрузки = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиДанных.GoogleDisc)";
	
	Рез = Зап.Выполнить();
	Если Не Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		Выб.Следующий();
		ЗагрузкаАктовППGoogleDisc(Выб.Контрагент, Выб.ШаблонЗагрузки);
	КонецеСли;	
КонецПроцедуры
//Асеев 13.03.2023 (Задача № 5007)<<<

Функция ЗагрузкаАктовППЯндекс(Контрагент) Экспорт
	
	//ДатаЗагрузки = Дата("19000101");
	//ОтборОбновленияЗаказов = Новый Структура;
	//ОтборОбновленияЗаказов.Вставить("Ключ", "ДатаЗагрузкиРеестровЯндекс");
	//Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	//Запись.Свойство("Значение", Дата(ДатаЗагрузки));
	
	//Серегин М.В. 21.05.2015 18:41:58 
	//Получим дату последней загрузки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ПараметрыРегламентныхЗаданий.Значение КАК ДатаПсоледнейЗагрузки
	|ИЗ
	|   РегистрСведений.ПараметрыРегламентныхЗаданий КАК ПараметрыРегламентныхЗаданий
	|ГДЕ
	|   ПараметрыРегламентныхЗаданий.Ключ = ""ДатаЗагрузкиРеестровЯндекс""";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДатаЗагрузки = Дата(ВыборкаДетальныеЗаписи.ДатаПсоледнейЗагрузки);
	Иначе
		ДатаЗагрузки = Дата("17530101");
	КонецЕсли;
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП, ЛОЖЬ) КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Поле1) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО (ИСТИНА)";
	ВыборкаПараметрыКонтрагента = Запрос.Выполнить().Выбрать();
	ВыборкаПараметрыКонтрагента.Следующий();
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
	//ТекстЗапроса = "SELECT R.[registerID]
	//|,[type]
	//|,[date]
	//|,[registerIDImport]
	//|,[orderid]
	//|,[orderidImport]
	//|FROM [ts_register] R (NOLOCK) inner join ts_orderToRegister RO (NOLOCK) on R.[registerID] = RO.[registerID] where R.[modifyDate] >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "' order by R.[registerID], RO.orID";	
	//
	//Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	//
	//ДатаЗапроса = ТекущаяДата();
	//
	//РС = Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);
	//
	//
	//Таб = Евген.СоздатьТаблицу(РС, "registerID_Ч, type_Ч, date, registerIDImport, orderid_Ч, orderidImport");
	
	//Дата запроса к интернет магазину
	ДатаЗапроса = ТекущаяДата();
	
	//Выгрузка данных из SQL
	ТекстЗапроса = "Select * from [ts_register] R(NOLOCK) where R.[modifyDate] >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";
	ТаблицаЗаказов =smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
	
	////+++++Серегин М.В. 22.01.2016 16:44:13 старый код
	//ТекстЗапроса = "Select * from ts_orderToRegister";
	//ТаблицаЗаказовСтроки =smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
	
	//+++++Серегин М.В. 22.01.2016 16:44:20 новый
	ТекстЗапроса = "Select RO.orID,RO.orderIDImport,RO.orderID,RO.registerID FROM [ts_register] R (NOLOCK) inner join ts_orderToRegister RO (NOLOCK) on R.[registerID] = RO.[registerID] where R.[modifyDate] >='" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";
	ТаблицаЗаказовСтроки =smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
	
	//Создание и заполнение документов
	Для каждого Стр Из ТаблицаЗаказов Цикл
		//Найдем строки
		МассивСтрок = ТаблицаЗаказовСтроки.НайтиСтроки(Новый Структура("registerID",Стр.registerID));
		//Условие на запись, если нет строк то и документ не надо создавать
		Если МассивСтрок.Количество() >0 Тогда 
			
			//Проверим на пустоту номер внешнего заказа, т.к. он может быть пустым, если пустой то создаем новый документ
			Если ЗначениеЗаполнено(Стр.registerIDImport) Тогда
				////+++++Серегин М.В. 01.10.2015 18:29:37 старый вариант поиска заказа
				//НайденныйДокумент = Документы.ПриходЗаказовНаСклад.НайтиПоРеквизиту("НомерВходящегоДокумента",Стр.registerIDImport);
				//+++++Серегин М.В. 01.10.2015 18:30:06 новый
				
				// МАС - 27.11.2017 - № --->> 
				//НайденныйДокумент = smv.НайтиДокументПоНомеруВнешнегоЗаказа(Стр.registerIDImport,Контрагент);
				НайденныйДокумент = mas.НайтиАПППоВходящемуНомеру(Стр.registerIDImport,Контрагент);
				// <<--- МАС 
				//-----Серегин М.В. 01.10.2015 18:30:03 
			Иначе
				НайденныйДокумент = Документы.ПриходЗаказовНаСклад.ПустаяСсылка();
			КонецЕсли;
			
			//Проверим создан ли уже документ с таким входящим номером, если да, то перезаполним, нет создаем новый
			Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
				ДокументПриходЗаказовНаСклад = НайденныйДокумент.ПолучитьОбъект();   
			Иначе
				ДокументПриходЗаказовНаСклад = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
			КонецЕсли;
			
			//Заполнение документа
			ДокументПриходЗаказовНаСклад.Дата = ТекущаяДата();
			ДокументПриходЗаказовНаСклад.Контрагент = Контрагент;
			ДокументПриходЗаказовНаСклад.ДатаВходящегоДокумента = Стр.date;	
			ДокументПриходЗаказовНаСклад.НомерВходящегоДокумента = Стр.registerIDImport;
			ДокументПриходЗаказовНаСклад.Основание = Перечисления.ТипыЗагрузкиДанных.Яндекс;
			// МАС - 18.09.2017 - №1842 --->> 
			ДокументПриходЗаказовНаСклад.ShipmentID = Стр.shipmentID;
			// <<--- МАС 	
			//Асеев 07.09.2020 (Задача № 4197)>>>
			ДокументПриходЗаказовНаСклад.ОбновлятьКоличествоМестЗаказов = ВыборкаПараметрыКонтрагента.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
			//Асеев 07.09.2020 (Задача № 4197)<<<
			
			//Заполнение табличной части Заказы
			Для каждого СтрМассива Из МассивСтрок Цикл
				//Серегин М.В. 18.08.2015 17:13:41 костыль проверка
				СтрокаСовпадение = ДокументПриходЗаказовНаСклад.Заказы.Найти(СтрМассива.orderIDImport);
				Если СтрокаСовпадение = Неопределено Тогда
					
					СтрокаЗаказы = ДокументПриходЗаказовНаСклад.Заказы.Добавить();
					СтрокаЗаказы.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Формат(СтрМассива.orderID, "ЧГ="));
					СтрокаЗаказы.ВнешнийНомерЗаказа = СтрМассива.orderIDImport;
				Иначе
					// МАС - 27.11.2017 --->> 				 
					//ОтправитьНормальноеСообщениеАдминам("Дубли при ЗагрузкаАктовППЯндекс.", "В базе SQL по номеру: "+Стр.registerIDImport+" есть дубли заказов!");
					// <<--- МАС
				КонецЕсли;
				//Серегин М.В. 18.08.2015 17:17:25 конец костыля
			КонецЦикла;
			
			
			//// МАС - 10.11.2017 - № --->> 
			//Запрос = Новый Запрос("");
			//// <<--- МАС 
			
			
			Попытка	
				ДокументПриходЗаказовНаСклад.МагазинЯндекса = ДокументПриходЗаказовНаСклад.Заказы[0].Заказ.ИнтернетМагазинЯндекса;		
				
				//ДокументПриходЗаказовНаСклад.Заказы[0].Заказ.Товары[0].СкладМагазина
			Исключение	
			КонецПопытки;
			
			//Запись
			ДокументПриходЗаказовНаСклад.Записать(РежимЗаписиДокумента.Запись);
			//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)>>>
			//ДокументПриходЗаказовНаСклад.Записать(РежимЗаписиДокумента.Проведение);
			Попытка
				ДокументПриходЗаказовНаСклад.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				pkv.ДобавитьВСписокОтложенногоПроведения(ДокументПриходЗаказовНаСклад.Ссылка, "Не удалось провести " + ДокументПриходЗаказовНаСклад + " ЗагрузкаАктовППЯндекс "+ ТекстОшибки);
			КонецПопытки;
			//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)<<<
			
		Иначе
			ОтправитьНормальноеСообщениеАдминам("Ошибка загрузки АктовППЯндекс (Загрузка прервана)!!!", "Не удалось создать документ с входящим номером: "+Стр.registerIDImport+". Табличная часть не содержит строк!");
			//ВызватьИсключение ("Ошибка в функции ЗагрузкаАктовППЯндекс. Не удалось создать документ с входящим номером: "+Стр.registerIDImport+". Табличная часть не содержит строк!");
		КонецЕсли; 
	КонецЦикла;
	
	//Записываем в регистр сведений последнюю дату выгрузки
	НаборЗаписей = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить("ДатаЗагрузкиРеестровЯндекс");
	Запись = НаборЗаписей.Добавить();
	Запись.Значение = ДатаВСтроку(ДатаЗапроса);
	Запись.Ключ = "ДатаЗагрузкиРеестровЯндекс";
	НаборЗаписей.Записать();
	//Серегин М.В. 21.05.2015 18:42:05 
	
	//Ном = "-";
	//Для Каждого Тек Из Таб Цикл
	//	Если Ном = "-" Или Ном <> Тек.registerID_Ч Тогда
	//		Док = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
	//		Док.Контрагент = Контрагент;
	//		Док.ДатаВходящегоДокумента = Тек.date;
	//		Док.НомерВходящегоДокумента = Тек.registerIDImport;
	//		Если Ном <> "-" Тогда
	//			Док.Записать(РежимЗаписиДокумента.Запись);
	//		КонецеСли;	
	//		Ном = Тек.registerID_Ч;
	//	КонецеСли;	
	//	
	//	Нов = Док.Заказы.Добавить();
	//	Нов.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Формат(Тек.orderid_Ч, "ЧГ="));
	//	Нов.ВнешнийНомерЗаказа = Тек.orderidImport;
	//КонецЦикла;	
	//
	//Если Таб.количество() <> 0 Тогда
	//	Док.Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли;	
	
	
	//Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	//Запись.Отбор.Ключ.Установить("ДатаЗагрузкиРеестровЯндекс");
	//Запись.Прочитать();
	//Если Запись.Количество() = 0 Тогда
	//	НоваяЗапись = Запись.Добавить();
	//Иначе
	//	НоваяЗапись = Запись[0];
	//КонецЕсли;
	//
	//НоваяЗапись.Значение = ДатаВСтроку(ДатаЗапроса);
	//НоваяЗапись.Ключ = "ДатаЗагрузкиРеестровЯндекс";
	//
	//Попытка
	//	Запись.Записать();
	//Исключение
	//	
	//КонецПопытки;	
КонецФункции	

Процедура ДобавитьВТабПочты(ТабПочты, Контрагент, Почта, ШаблонЗагрузки)
	СтрокаТП = ТабПочты.Добавить();
	СтрокаТП.Контрагент = Контрагент;
	СтрокаТП.Почта = Почта;
	СтрокаТП.ШаблонЗагрузки = ШаблонЗагрузки;
КонецПроцедуры


Функция ЗагрузкаАктовПППочтой(Контрагент, ШаблонЗагрузки) Экспорт
	
	МасАдресатовОшибки = Новый Массив;
	МасАдресатовОшибки.Добавить("r.drobnitsa@strizh-logistic.ru");
	МасАдресатовОшибки.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	
	ОшибкаЗаписиВнешнегоИсточника = ""; //Задача № 3497
	
	Попытка
		
		П = Новый ИнтернетПочтовыйПрофиль;
		
		П.АдресСервераPOP3 = "pop.mail.ru";
		П.ПортPOP3 = 995;
		П.АдресСервераIMAP = "imap.mail.ru";
		П.ПортIMAP = 993;
		П.ТолькоЗащищеннаяАутентификацияPOP3 = Ложь;
		П.ИспользоватьSSLPOP3 = Истина;
		
		Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			
			П.ПользовательIMAP = "test_app_load_strizh@mail.ru";
			П.Пользователь = "test_app_load_strizh@mail.ru";
			
			П.Пароль = "DosTup338";
			П.ПарольIMAP  = "DosTup338";
		
		Иначе
			
			П.ПользовательIMAP = "app_load_strizh@mail.ru";
			П.Пользователь = "app_load_strizh@mail.ru";
			
			П.Пароль = "RJs0v0wLexpsnzaqGJsT";
			П.ПарольIMAP  = "RJs0v0wLexpsnzaqGJsT";
			//П.Пароль = "losir7_^534qtg";
			//П.ПарольIMAP  = "losir7_^534qtg";
			
		КонецЕсли;
		
		//П.АдресСервераPOP3 = "pop.yandex.ru";
		//П.ПортPOP3 = 995;
		//
		//П.АдресСервераIMAP = "imap.yandex.ru";
		//П.ПортIMAP = 993;
		//П.ПользовательIMAP = "app_load@strizh-logistic.ru";
		//П.Пользователь = "app_load@strizh-logistic.ru";
		//П.Пароль = "losir7_^534qtg";
		//П.ПарольIMAP = "losir7_^534qtg";
		//
		////П.Пароль = "Pa$$word";
		////П.ПарольIMAP = "Pa$$word";
		//
		////П.ПользовательIMAP = "aleksandr.mihushkin@strizh-logistic.ru";
		////П.Пользователь = "aleksandr.mihushkin@strizh-logistic.ru";
		////П.Пароль = "Vb[eirby67#$";
		////П.ПарольIMAP = "Vb[eirby67#$";
		//
		//
		//П.ИспользоватьSSLPOP3 = Истина;
		
		Если (НЕ ШаблонЗагрузки.ЗагружатьТолькоИзДомена) И (НЕ ШаблонЗагрузки.СтандартныйШаблонАПП) Тогда
			Зап = Новый Запрос;
			Зап.Текст =
			"ВЫБРАТЬ
			|	РассылкиКонтрагентов.Контрагент КАК Контрагент,
			|	РассылкиКонтрагентов.Почта КАК Почта,
			|	РассылкиКонтрагентов.Контрагент.ШаблонЗагрузкиExcel КАК ШаблонЗагрузки
			|ИЗ
			|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
			|ГДЕ
			|	РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(Перечисление.ТипыРассылки.ЗагрузкаАктовПриемаПередачи)
			|	И РассылкиКонтрагентов.Контрагент = &Контрагент";
			Зап.УстановитьПараметр("Контрагент", Контрагент);			
			ТабПочты = зап.Выполнить().Выгрузить();
		Иначе
			ТабПочты = Новый ТаблицаЗначений;
			ТабПочты.Колонки.Добавить("Контрагент");
			ТабПочты.Колонки.Добавить("Почта");
			ТабПочты.Колонки.Добавить("ШаблонЗагрузки");
			Если ШаблонЗагрузки.СтандартныйШаблонАПП тогда
				СписокПочта = may.ПолучитьПочтуИзРассылкиКонтрагентов(Контрагент);
				Для каждого Стр из СписокПочта Цикл
					ДобавитьВТабПочты(ТабПочты, Контрагент, Стр.Почта, ШаблонЗагрузки);	
				КонецЦикла;		
			Иначе
				ДобавитьВТабПочты(ТабПочты, Контрагент, ШаблонЗагрузки.ДоменПочты, ШаблонЗагрузки);
			КонецЕсли;
		КонецЕсли;
		
		
		Поч = Новый ИнтернетПочта;
		
		попытка
			Поч.Подключиться(п);
		Исключение
			Ошибка = ОписаниеОшибки();
			
			lem.ОтправитьСообщение(МасАдресатовОшибки, "Ошибка загрузки АПП (подключение)", Ошибка, ,"Стриж УТЛ");
			
			Возврат "";
		КонецПопытки;	
		
		Струк = Новый Структура;
		Струк.Вставить("Тема", "app");
		
		МассивПисем = Поч.ПолучитьЗаголовки(Струк);
		
		
		МасЗаг = Новый Массив;
		Для Сч = 0 По МассивПисем.Количество() - 1 Цикл
			//Серегин М.В. 09.06.2015 18:00:12
			Если ЗначениеЗаполнено(ШаблонЗагрузки.ДоменПочты) Тогда
				Если Найти (МассивПисем[Сч].Отправитель.Адрес,ШаблонЗагрузки.ДоменПочты)<> 0 Тогда
					МасЗаг.Добавить(МассивПисем[Сч]);
				КонецЕсли;
			Иначе
				//Серегин М.В. 09.06.2015 18:00:15 
				НайК = ТабПочты.Найти(МассивПисем[Сч].Отправитель.Адрес);
				Если НайК = Неопределено Тогда
					Продолжить;
				конецеСли;
				МасЗаг.Добавить(МассивПисем[Сч]);
			КонецЕсли;
		КонецЦикла;
		
		Если МасЗаг.Количество() = 0 Тогда
			Возврат "";
		КонецеСли;	
		
		
		МасП = Новый Массив;
		
		
		
		
		//МасП.Добавить("inna.illarionova@strizh-logistic.ru");
		//МасП.Добавить("pavel.nechaev@strizh-logistic.ru");
		//МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		
		МассивПисем = Поч.Выбрать(Истина, МасЗаг);
		ТекВремя = ТекущаяДата();
		Для Сч = 0 По МассивПисем.Количество() - 1 Цикл
			НайК = ТабПочты.Найти(МассивПисем[Сч].Отправитель.Адрес);
			//Если Не ЗначениеЗаполнено(НайК.ШаблонЗагрузки) Тогда
			//	ШаблонЗагрузки = Справочники.ШаблоныЗагрузкиExcel.ОсновнойВариант;
			//Иначе
			//	ШаблонЗагрузки = НайК.ШаблонЗагрузки;
			//КонецеСли;	
			
			
			Для Каждого Тек Из ШаблонЗагрузки.РассылкаУведомлений Цикл
				Если Тек.Отправлять Тогда
					Если МасП.Найти(СокрЛП(Тек.Адрес)) = Неопределено Тогда
						МасП.Добавить(СокрЛП(Тек.Адрес));
					КонецеСли;	
				КонецеСли;
			КонецЦикла;	
			
			Если МасП.Найти(МассивПисем[Сч].Отправитель.Адрес) = Неопределено Тогда
				МасП.Добавить(МассивПисем[Сч].Отправитель.Адрес);
			КонецеСли;	
			
			
			// ++ Отключено в рамках Задача № 3497
			//Наб = РегистрыСведений.ДанныеКЗагрузкеИзПочты.СоздатьНаборЗаписей();
			//Наб.Отбор.Период.Установить(ТекВремя);
			// -- Отключено в рамках Задача № 3497

			Для СчВл = 0 По МассивПисем[Сч].Вложения.Количество() - 1 Цикл
				Если Найти(НРег(МассивПисем[Сч].Вложения[СчВл].ИмяФайла), "xls") = 0 И Найти(НРег(МассивПисем[Сч].Вложения[СчВл].ИмяФайла), "csv") = 0 Тогда
					Продолжить;
				КонецеСли;
				
				//// ++ Отключено в рамках Задача № 3497
				//ЗапЗагруженныхФайлов = Новый Запрос;
				//ЗапЗагруженныхФайлов.Текст = "ВЫБРАТЬ
				//|	ДанныеКЗагрузкеИзПочты.Период
				//|ИЗ
				//|	РегистрСведений.ДанныеКЗагрузкеИзПочты КАК ДанныеКЗагрузкеИзПочты
				//|ГДЕ
				//|	ДанныеКЗагрузкеИзПочты.ИмяФайла = &ИмяФайла";
				//ЗапЗагруженныхФайлов.УстановитьПараметр("ИмяФайла", СокрЛП(МассивПисем[Сч].Вложения[СчВл].ИмяФайла));							 
				//Рез = ЗапЗагруженныхФайлов.Выполнить();
				////Если Рез.Пустой() Тогда
				//Нов = Наб.Добавить();
				//ЗаполнитьЗначенияСвойств(Нов, НайК);
				//Нов.Период = ТекВремя;
				//Нов.ШаблонЗагрузки = ШаблонЗагрузки;
				//Нов.ИмяФайла = МассивПисем[Сч].Вложения[СчВл].ИмяФайла;
				//Нов.Данные = Новый ХранилищеЗначения(МассивПисем[Сч].Вложения[СчВл].Данные, Новый СжатиеДанных(9));
				//Нов.Отправитель = МассивПисем[Сч].Отправитель.Адрес;
				//Нов.РежимЗагрузкиДанных = Перечисления.РежимыЗагрузкиДанных.ЗагрузкаПриходаЗаказов;
				//Нов.ТипЗагрузкиДанных = Перечисления.ТипыЗагрузкиДанных.EMAIL;
				//ТабОш = Неопределено;
				//ТабЗ = Неопределено;
				//Ошибка = "";
				//// -- Отключено в рамках Задача № 3497
				
				//++Задача № 3497				
				ПараметрыЗаписиЛога = ЗагрузкаДанныхИзПочтыСервер.ПараметрыЗаписиЛогаЗагрузкиДанных(Справочники.ТипыЗагружаемыхДанных.ЗагрузкаАПП);
				//Контрагент
				//ШаблонЗагрузки
				//ТипЗагрузкиДанных - EMAIL по умолчанию
				//РежимЗагрузкиДанных - определяется из ТипЗагружаемыхДанных
				//ТипЗагружаемыхДанных - ТипЗагружаемыхДанных передается как паарметр метода, если не передается, то Справочники.ТипыЗагружаемыхДанных.ЗагрузкаЗаказов
				//ИмяФайла
				//Данные
				//ДанныеЗагружены
				//Отправитель
				ПараметрыЗаписиЛога.Контрагент = НайК.Контрагент;
				ПараметрыЗаписиЛога.ШаблонЗагрузки = ШаблонЗагрузки;
				ПараметрыЗаписиЛога.ИмяФайла = МассивПисем[Сч].Вложения[СчВл].ИмяФайла;
				ПараметрыЗаписиЛога.Данные = МассивПисем[Сч].Вложения[СчВл].Данные;
				ПараметрыЗаписиЛога.Отправитель = МассивПисем[Сч].Отправитель.Адрес;
				
				ЗагрузкаДанныхИзПочтыСервер.ЗаписатьСтрокуЛогаЗагрузкиДанных(ПараметрыЗаписиЛога, ОшибкаЗаписиВнешнегоИсточника); 
				//--Задача № 3497
				
				Попытка
					
					// МАС - 15.06.2018 - №2268 - Распараллелить регл. задания по загрузке заказов и АПП из почты --->> 					
					
					Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
						
						Продолжить;//Заглушка для проверки в тестовой
						//lem.ВыполнитьЗагрузкуАППИзПочты_Фоновое(НайК.Контрагент, ШаблонЗагрузки,МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, МасП);
						
					Иначе
						
						Параметры = Новый Массив;
						Параметры.Добавить(НайК.Контрагент);
						Параметры.Добавить(ШаблонЗагрузки);
						Параметры.Добавить(МассивПисем[Сч].Вложения[СчВл].Данные);
						Параметры.Добавить(МассивПисем[Сч].Вложения[СчВл].ИмяФайла);
						Параметры.Добавить(МасП);				
						
						ФоновыеЗадания.Выполнить("lem.ВыполнитьЗагрузкуАППИзПочты_Фоновое", 
						Параметры, Новый УникальныйИдентификатор, "Фоновая обработка загрузки АПП из почты");   						
						
					КонецЕсли;
				
					#Область КодКУдалениюЗагрузкаАктовПППочтой
					
					//Если НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_618") Тогда // ЛореалЪ					
					//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Новый(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);	
					//ИначеЕсли НайК.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_180") Тогда // Корабль					
					//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Кораблик(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);	
					//ИначеЕсли ШаблонЗагрузки.СтандартныйШаблонАПП Тогда
					//	Нов.ДанныеЗагружены = may.ЗагрузкаАктовПП(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);
					//Иначе
					//	Нов.ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП(НайК.Контрагент, ШаблонЗагрузки, МассивПисем[Сч].Вложения[СчВл].Данные, МассивПисем[Сч].Вложения[СчВл].ИмяФайла, ТабОш, ТабЗ, Ошибка);	
					//КонецЕсли;
					// <<--- МАС
					
					#КонецОбласти
					
				Исключение
					Ошибка = "Файл " + СокрЛП(МассивПисем[Сч].Вложения[СчВл].ИмяФайла) + " не загружен! (" + ОписаниеОшибки() + ")";
				КонецПопытки;
				
				#Область КодКУдалениюЗагрузкаАктовПППочтой2
				
				//Иначе
				//	ТабП = Рез.Выгрузить();
				//	Ошибка = "Файл " + СокрЛП(МассивПисем[Сч].Вложения[СчВл].ИмяФайла) + " уже загружался! (" + Формат(ТабП[0].Период, "ДЛФ=DD") + ")";
				//КонецеСли;
				
				
				
				//// МАС - 15.06.2018 - №2268 - Распараллелить регл. задания по загрузке заказов и АПП из почты --->>
				//Если Ошибка = "" Тогда
				//	ТабОш.Свернуть("Номер, Ошибка", "Кол");
				//	СтрокаПисьма = "";
				//	
				//	Если ТабЗ.Количество() <> 0 Тогда
				//		СтрокаПисьма = "Информация, загруженная по заказам: " + Символы.ПС;
				//		Для Каждого Тек Из ТабЗ Цикл
				//			СтрокаПисьма = СтрокаПисьма + Тек.Номер + Символы.ПС;
				//		КонецЦикла;
				//	КонецеСли;
				//	
				//	Если ТабОш.Количество() <> 0 Тогда
				//        
				//		СтрокаПисьма = СтрокаПисьма + "Информация НЕ загруженная по заказам: " + Символы.ПС;
				//		Для Каждого Тек Из ТабОш Цикл
				//			СтрокаПисьма = СтрокаПисьма + Тек.Номер  + ": " + СокрЛП(Тек.Ошибка) + Символы.ПС;
				//			Тек.Кол = 1;
				//		КонецЦикла;
				//	КонецеСли;
				//Иначе
				//	СтрокаПисьма = "Информация по приходу не загружена! Фатальная ошибка: " + Ошибка;
				//КонецеСли;
				//
				//Если табОш <> Неопределено Тогда
				//	ТабОш.Свернуть("Номер", "Кол");
				//
				//	СтрокаПисьма = СтрокаПисьма + Символы.ПС + "Количество загруженных: " + Строка(ТабЗ.Количество()) + Символы.ПС + "Количество НЕзагруженных: " + Строка(ТабОш.Количество());
				//КонецеСли;	
				//
				//lem.ОтправитьСообщение(МасП, "Загрузка данных по приходу (" + СокрЛП(Контрагент.Наименование) + ")", СтрокаПисьма);
				//// <<--- МАС
				#КонецОбласти

			КонецЦикла;	
			
			//++Задача № 3497
			//Если наб.Количество() <> 0 Тогда
			//	Наб.Записать();
			//КонецеСли;
			//--Задача № 3497

		КонецЦикла;	
		
		Поч.Отключиться();	
		
	Исключение
		
		lem.ОтправитьСообщение(МасАдресатовОшибки, "Ошибка загрузки АПП", СокрЛП(ОписаниеОшибки()), ,"Стриж УТЛ");
		
	КонецПопытки;
	
КонецФункции

Функция ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено)
	
	Перем ИтВес, Таб2;
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	ТабДок = Новый ТабличныйДокумент;
	
	// МАС - 15.06.2018 - № --->> 
	Если Не ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	//Попытка
	//    ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	//Исключение
	//    Возврат Ложь;
	//КонецПопытки;
	// <<--- МАС
	
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	//ТабЗаказов.Колонки.Добавить("Адрес");
	//ТабЗаказов.Колонки.Добавить("ВесОбщий");
	//ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	//ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
	//ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
	//ТабЗаказов.Колонки.Добавить("Итого");
	//ТабЗаказов.Колонки.Добавить("КодТовара");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Количество");
	//ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
	//ТабЗаказов.Колонки.Добавить("Район");
	//ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	//ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	//ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	//ТабЗаказов.Колонки.Добавить("ТелефонГородской");
	//ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	//ТабЗаказов.Колонки.Добавить("ФИО");
	//ТабЗаказов.Колонки.Добавить("Штрихкод");
	//ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("КоличествоМест");
	//Серегин М.В. 15.06.2015 12:30:22 
	ТабЗаказов.Колонки.Добавить("КлючЗаказа");
	//Серегин М.В. 15.06.2015 12:30:24 
	
	////Серегин М.В. 29.06.2015 10:40:37 
	//ТабДок.Показать();
	////Серегин М.В. 29.06.2015 10:40:39 
	ПослНомер = "";
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Нов = ТабЗаказов.Добавить();
		Для СчКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				Струк = Новый Структура;
				Струк.Вставить("Порядок", СчКолонок);
				НайКолонки = Шаблон.Поля.НайтиСтроки(Струк);                               			
			Иначе
				Струк = Новый Структура;
				Струк.Вставить("Наименование", "R" + ТабДок.Область(Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст);				
				НайКолонки = Шаблон.Поля.НайтиСтроки(Струк);                               			
			КонецеСли;			
			
			Если НайКолонки.Количество() = 0 Тогда
				Продолжить;
			КонецеСли;	
			
			Для Каждого НайКолонка Из НайКолонки Цикл
				Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
				Если ЗначениеЗаполнено(НайКолонка.НомерСтартовогоСимвола) и ЗначениеЗаполнено(НайКолонка.ДлинаСтроки) Тогда
					Значение = Строка(Значение);					
					Значение = Сред(Значение, НайКолонка.НомерСтартовогоСимвола, НайКолонка.ДлинаСтроки);
				ИначеЕсли ЗначениеЗаполнено(НайКолонка.НомерСтартовогоСимвола) и Не ЗначениеЗаполнено(НайКолонка.ДлинаСтроки) Тогда	
					Значение = СокрЛП(Строка(Значение));					
					Значение = Сред(Значение, НайКолонка.НомерСтартовогоСимвола);					
				КонецеСли;	
				
				Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
					Нов[НайКолонка.Поле.Наименование] = СтрЗаменить(Значение, Символ(160), "");
				Иначе	
					
					Нов[НайКолонка.Поле.Наименование] = Значение;
				КонецеСли;	
				
				Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
					НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
					Если НайденноеСоответствие <> Неопределено Тогда
						Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
					КонецеСли;	
				КонецеСли;	
				
				
				Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
					Если ЗначениеЗаполнено(Значение) Тогда
						ПослНомер = СтрЗаменить(Формат(Значение, "ЧГ="),Символ(160), "");
					ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
						Нов[НайКолонка.Поле.Наименование] = Формат(ПослНомер, "ЧГ=");
					Иначе
						Нов[НайКолонка.Поле.Наименование] = Формат(Нов[НайКолонка.Поле.Наименование], "ЧГ=");
					КонецеСли;	
				КонецеСли;	
			КонецЦикла;
		КонецЦикла;	
		
		Нов.КоличествоМест = 1;
		Если ПропуститьСтроку(Нов, Шаблон) Тогда
			ТабЗаказов.Удалить(Нов);
		КонецеСли;			
	КонецЦикла;	
	
	//Серегин М.В. 15.06.2015 16:20:26 Костыль временный на mamagazin 
	//Серегин М.В. 15.06.2015 11:05:15 очистим ТабЗаказов от итоговых строк
	Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
		МассивСимволов = Новый Массив;
		Для НомерСимвола = 48 По 57 Цикл
			МассивСимволов.Добавить(Символ(НомерСимвола));
		КонецЦикла;
		
		//Добавим новую колонку в ТЗ 
		ТабЗаказов.Колонки.Добавить("Сумма");
		//Количество строк
		Индекс = ТабЗаказов.Количество()-1;
		Сч=0;
		Пока Сч <= Индекс Цикл
			//Строка ТЗ
			Стр = ТабЗаказов[Сч];
			//Если первый символ ключа не цифра убираем строку
			Если  МассивСимволов.Найти(Лев(Стр.КлючЗаказа,1)) =  Неопределено Тогда
				ТабЗаказов.Удалить(Стр);
				//Откатываем Сч и Индекс, т.к. строку удалили
				Сч = Сч - 1;
				Индекс = Индекс-1;
			Иначе
				//Условие если стоимость 0
				Если Стр.СтоимостьТовара<> "" Тогда  
					Стр.Сумма = Число(СтрЗаменить(Стр.СтоимостьТовара,Символ(160),""));
				КонецЕсли;
			КонецЕсли;
			//Счетчик
			Сч = Сч+1;
		КонецЦикла;
		ТабНом = ТабЗаказов.Скопировать();
		ТабНом.Свернуть("НомерЗаказа, Артикул, НаименованиеТовара,Количество,СтоимостьТовара,ОбщаяЦена,Сумма");
		ТабЗаказов.Свернуть("НомерЗаказа", "КоличествоМест,Сумма");
	Иначе
		//Серегин М.В. 21.08.2015 13:00:44 
		//Пропускаемые поля
		ПропускаемыеПоля = Шаблон.Поля.НайтиСтроки(Новый Структура("ИгнорироватьПустыеЗначения",Истина));
		СтуктураОтбора = Новый Структура;
		Для каждого СтрПП Из ПропускаемыеПоля Цикл
			СтуктураОтбора.Вставить(СтрПП.Поле.Наименование,"");	
		КонецЦикла;
		МассивУдаляемыхСтрок  = ТабЗаказов.НайтиСтроки(СтуктураОтбора);
		Для каждого СтрУдалить Из МассивУдаляемыхСтрок Цикл
			ТабЗаказов.Удалить(СтрУдалить);
		КонецЦикла;
		//Серегин М.В. 21.08.2015 13:00:46 
		
		//Форматирование Строк
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|   ШаблоныЗагрузкиExcelПоля.Поле.Наименование КАК ИмяПоля,
		|   ШаблоныЗагрузкиExcelПоля.ШаблонСтроки
		|ИЗ
		|   Справочник.ШаблоныЗагрузкиExcel.Поля КАК ШаблоныЗагрузкиExcelПоля
		|ГДЕ
		|   ШаблоныЗагрузкиExcelПоля.ШаблонСтроки <> """"
		|   И ШаблоныЗагрузкиExcelПоля.Ссылка = &Шаблон";
		
		Запрос.УстановитьПараметр("Шаблон",Шаблон);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Для каждого СтрТЗ Из ТабЗаказов Цикл
				Если НЕ ПроверитьСтрокупоШаблону(СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля],ВыборкаДетальныеЗаписи.ШаблонСтроки) Тогда
					СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля] = СокрЛП(ОтформатироватьСТроку(СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля],ВыборкаДетальныеЗаписи.ШаблонСтроки));    
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		//Серегин М.В. 01.09.2015 16:46:31 
		
		Для каждого СтрТЗ Из ТабЗаказов Цикл
			СтрТЗ.ОбщаяЦена =  Число(СтрЗаменить(?(СтрТЗ.ОбщаяЦена="",0,СтрТЗ.ОбщаяЦена),Символ(160),""));
			СтрТЗ.СтоимостьТовара =  Число(СтрЗаменить(?(СтрТЗ.СтоимостьТовара="",0,СтрТЗ.СтоимостьТовара),Символ(160),""));
			СтрТЗ.КоличествоМест = Число(СтрЗаменить(?(СтрТЗ.КоличествоМест="",0,СтрТЗ.КоличествоМест),Символ(160),""));
			СтрТЗ.Количество = Число(СтрЗаменить(?(СтрТЗ.Количество="",0,СтрТЗ.Количество),Символ(160),""));
		КонецЦикла;
		ТабНом = ТабЗаказов.Скопировать();
		ТабНом.Свернуть("НомерЗаказа, Артикул, НаименованиеТовара,Количество,СтоимостьТовара,ОбщаяЦена");
		ТабЗаказов.Свернуть("НомерЗаказа", "КоличествоМест,СтоимостьТовара");
	КонецЕсли;
	//------------------///////////
	
	
	
	//ТабНом.Свернуть("НомерЗаказа, Артикул, НаименованиеТовара,Количество,СтоимостьТовара,ОбщаяЦена,Сумма");
	//ТабЗаказов.Свернуть("НомерЗаказа", "КоличествоМест,Сумма");
	//
	// поля Шапки документа
	
	
	СтруктураПолейШапки = Новый Структура;
	ДатаН = Неопределено;
	
	Для Каждого Тек Из Шаблон.ПоляШапки Цикл
		ЗначениеПоля = ТабДок.Область("R" + Тек.СтрокаВДокументе +"C" + Формат(Тек.КолонкаВДокументе, "ЧГ=")).Текст;
		Если Тек.поле = Справочники.ПоляДанныхЗагрузки.НомерНакладной Тогда
			ИмяПоля = "НН";
			// Михушкин - получим дату из номера для Автофидеса - 17.05.2017 --->>  
			Если Контрагент.Код = "Shop_197 " Тогда
				Попытка				
					ДатаНПоле = СокрЛП(ЗначениеПоля);
					ДеньН = Лев(ДатаНПоле, 2);
					МесяцН = Сред(ДатаНПоле, 4, 2);
					ГодН = СтрЗаменить(Строка(Год(ТекущаяДата())), Символы.НПП, "");
					ДатаНСтрока = "" + ГодН + МесяцН + ДеньН;
					ДатаН = Дата(ДатаНСтрока);
					СтруктураПолейШапки.Вставить("ДН", ДатаН);
				Исключение			
				КонецПопытки;				
			КонецЕсли;
			// <<--- Михушкин
		ИначеЕсли Тек.поле = Справочники.ПоляДанныхЗагрузки.ДатаНакладной Тогда	
			ИмяПоля = "ДН";
		КонецеСли;	
		
		СтруктураПолейШапки.Вставить(ИмяПоля, ЗначениеПоля);
	КонецЦикла;	   
	
	ТабОшибок = Новый ТаблицаЗначений;
	ТабОшибок.Колонки.Добавить("Номер");
	ТабОшибок.Колонки.Добавить("Ошибка");
	ТабОшибок.Колонки.Добавить("Кол");
	
	ТабЗагруженных = Новый ТаблицаЗначений;
	ТабЗагруженных.Колонки.Добавить("Номер");
	
	ЗаказНеЗагружаем = "";
	
	
	Мас = ТабЗаказов.ВыгрузитьКолонку("НомерЗаказа");
	МасН = ТабНом.ВыгрузитьКолонку("Артикул");
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|   РеализацияТоваровУслуг.Ссылка КАК Док,
	|   РеализацияТоваровУслуг.НомерВнешнегоЗаказа
	|ИЗ
	|   Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|   РеализацияТоваровУслуг.НомерВнешнегоЗаказа В(&Мас)
	|   И РеализацияТоваровУслуг.ВладелецТовара = &Контрагент";
	Зап.УстановитьПараметр("Мас", Мас);
	//+++++Серегин М.В. 01.10.2015 18:24:09 
	Зап.УстановитьПараметр("Контрагент", Контрагент);
	//-----Серегин М.В. 01.10.2015 18:24:11 
	
	Рез = Зап.Выполнить().Выгрузить();
	
	
	ЗапН = Новый Запрос;
	ЗапН.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ном,
	|	Номенклатура.Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул В(&Мас)";
	ЗапН.УстановитьПараметр("Мас", МасН);	
	
	РезН = ЗапН.Выполнить().Выгрузить();
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП, ЛОЖЬ) КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Поле1) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО (ИСТИНА)";
	ВыборкаПараметрыКонтрагента = Запрос.Выполнить().Выбрать();
	ВыборкаПараметрыКонтрагента.Следующий();
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
	НовДок = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
	НовДок.Дата = ТекущаяДата();
	НовДок.Контрагент = Контрагент;
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	НовДок.ОбновлятьКоличествоМестЗаказов = ВыборкаПараметрыКонтрагента.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
	НомерДокумента = "";
	ДатаДокумента = "";
	
	СтруктураПолейШапки.Свойство("НН", НомерДокумента);
	СтруктураПолейШапки.Свойство("ДН", ДатаДокумента);
	
	//Серегин М.В. 27.08.2015 10:11:16 заполнение склада магазина
	Если СокрЛП(Контрагент.Код) = "Shop_169"   Тогда
		Если СтрЧислоВхождений(НомерДокумента,"CI")> 0 Тогда
			НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("1");
		ИначеЕсли СтрЧислоВхождений(НомерДокумента,"/")> 0 Тогда
			НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("32");
		Иначе
			НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("2");
		КонецЕсли;
		//+++++Серегин М.В. 24.11.2015 10:55:54 
	ИначеЕсли СокрЛП(Контрагент.Код) ="Shop_428" Тогда
		Если СтрЧислоВхождений(НомерДокумента,"CI")> 0 Тогда
			НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("30");
		ИначеЕсли СтрЧислоВхождений(НомерДокумента,"/")> 0 Тогда
			НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("33");
		Иначе
			НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("31");
		КонецЕсли;
		//-----Серегин М.В. 24.11.2015 10:55:56 
	КонецЕсли;
	//Серегин М.В. 27.08.2015 11:04:58 
	
	Попытка
		НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента);
		НовДок.ДатаВходящегоДокумента = Дата(ДатаДокумента);
	Исключение	
		НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента) + " от " + СокрЛП(ДатаДокумента);
	КонецПопытки;
	
	Для Каждого Тек Из ТабЗаказов Цикл
		Нов = НовДок.Заказы.Добавить();
		Нов.ВнешнийНомерЗаказа = Тек.НомерЗаказа;
		
		//Серегин М.В. 15.06.2015 15:47:55
		Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
			Нов.СуммаДокумента = Тек.Сумма;
		Иначе
			Нов.СуммаДокумента = Тек.СтоимостьТовара;
		КонецеСли;
		//Серегин М.В. 15.06.2015 15:47:59 
		
		Най = Рез.Найти(Тек.НомерЗаказа);
		Если Най <> Неопределено Тогда
			Нов.Заказ = Най.Док;
		КонецеСли;	
		
		НовЗ = ТабЗагруженных.Добавить();
		НовЗ.Номер = Тек.НомерЗаказа;
	КонецЦикла;	
	
	Для Каждого Тек Из ТабНом Цикл
		
		Если Не ЗначениеЗаполнено(Тек.Артикул) Тогда
			Продолжить;
		КонецеСли;
		
		Нов = НовДок.Товары.Добавить();
		Нов.Артикул = СокрЛП(Тек.Артикул);
		Нов.ВнешнийНомерЗаказа = Тек.НомерЗаказа;
		Най = Рез.Найти(Тек.НомерЗаказа);
		Если Най <> Неопределено Тогда
			Нов.Заказ = Най.Док;
		КонецеСли;
		
		//Серегин М.В. 15.06.2015 15:48:50 
		Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
			Нов.Сумма = Тек.Сумма;
			Нов.Цена  = Число(СтрЗаменить(?(Тек.ОбщаяЦена="",0,Тек.ОбщаяЦена),Символ(160),""));
		Иначе
			Нов.Сумма = Тек.СтоимостьТовара;
			Нов.Цена  = Тек.ОбщаяЦена;
		КонецеСли;
		//Серегин М.В. 15.06.2015 15:48:51 
		
		Най2 = РезН.Найти(Тек.Артикул);
		Если Най2 <> Неопределено Тогда
			Нов.Номенклатура = Най2.Ном;
		КонецеСли;	
		
		Попытка
			Нов.Количество = Число(Тек.Количество);
		Исключение
			
		Конецпопытки;	
	КонецЦикла;	
	
	НовДок.Основание = Перечисления.ТипыЗагрузкиДанных.EMAIL;
	НовДок.Записать(РежимЗаписиДокумента.Запись);
	//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)>>>
	//НовДок.Записать(РежимЗаписиДокумента.Проведение);
	Попытка
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		pkv.ДобавитьВСписокОтложенногоПроведения(НовДок.Ссылка, "Не удалось провести " + НовДок + " ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП "+ ТекстОшибки);
	КонецПопытки;
	//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)<<<
	
	// таблица собрана
	//Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	//ТекНом = "-";
	//КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Контрагент.Код),"_");
	//КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
	//
	//ТабОшибок = Новый ТаблицаЗначений;
	//ТабОшибок.Колонки.Добавить("Номер");
	//ТабОшибок.Колонки.Добавить("Ошибка");
	//ТабОшибок.Колонки.Добавить("Кол");
	//
	//ТабЗагруженных = Новый ТаблицаЗначений;
	//ТабЗагруженных.Колонки.Добавить("Номер");
	//
	//ЗаказНеЗагружаем = "";
	//
	//Для Каждого Тек Из ТабЗаказов Цикл
	//	Если СокрЛП(Тек.НомерЗаказа) = ЗаказНеЗагружаем Тогда
	//		Продолжить;
	//	КонецеСли;	
	//	СтрокаБезОшибок = ПроверитьСтрокуНаЗаполненность(Тек, Шаблон);
	//	Если СтрокаБезОшибок <> Истина Тогда
	//		НовОш = ТабОшибок.Добавить();
	//		НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
	//		НовОш.Ошибка = СтрокаБезОшибок;
	//		ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
	//		Продолжить;
	//	КонецеСли;	
	//	Попытка
	//		Если Не ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
	//			Тек.СтоимостьДоставки = 0;
	//		Иначе
	//			Тек.СтоимостьДоставки = Формат(Окр(Число(Тек.СтоимостьДоставки)), "ЧРД=.; ЧН=0; ЧГ=");
	//		КонецЕСли;	
	//		
	//		Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
	//			Тек.ВесОбщий = 0;
	//		Иначе
	//			Тек.ВесОбщий = Формат(Число(Тек.ВесОбщий), "ЧРД=.; ЧН=0; ЧГ=");
	//		КонецЕСли;	
	//		
	//		Если Не ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
	//			Тек.СтоимостьТовара = 0;
	//		Иначе	
	//			Тек.СтоимостьТовара = Формат(Окр(Число(Тек.СтоимостьТовара)), "ЧРД=.; ЧН=0; ЧГ=");
	//		КонецеСли;
	//		
	//		Если Не ЗначениеЗаполнено(Тек.Итого) Тогда
	//			Тек.Итого = 0;
	//		Иначе	
	//			Тек.Итого = Формат(Окр(Число(Тек.Итого)), "ЧРД=.; ЧН=0; ЧГ=");
	//		КонецеСли;
	//		
	//		Попытка
	//			Тек.КодТовара = Формат(Число(Тек.КодТовара), "ЧГ=");
	//		Исключение
	//			
	//		КонецПопытки;
	//		Попытка
	//			Тек.ТелефонМобильный = Формат(Число(Тек.ТелефонМобильный), "ЧГ=");
	//		Исключение
	//			
	//		КонецПопытки;
	//		Попытка
	//			Тек.ТелефонГородской = Формат(Число(Тек.ТелефонГородской), "ЧГ=");
	//		Исключение
	//			
	//		КонецПопытки;	
	//		Если ЗначениеЗаполнено(Тек.ТелефонГородской) Тогда
	//			Тек.ТелефонМобильный = Тек.ТелефонМобильный + ";" + Тек.ТелефонГородской;
	//		КонецеСли;
	//		
	//		Если ТипЗнч(Тек.ДатаДоставки) = Тип("Строка") Тогда
	//			Тек.ДатаДоставки = ИзСтрокиВДату(Тек.ДатаДоставки);
	//		КонецеСли;	
	//		
	//		
	//		Тек.Количество = Формат(Число(Тек.Количество), "ЧРД=.; ЧН=0; ЧГ=");
	//		
	//		Если ТекНом <> Тек.НомерЗаказа Тогда
	//			// создаём новый заказ
	//			
	//			Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
	//				Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(ИтВес, "ЧРД=.; ЧГ=") + ",0,0,1)";
	//				R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
	//				ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч");
	//				
	//				Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧГ=")  + ", " + Формат(ИтВес, "ЧРД=.; ЧГ=") + ", " + Строка(1) + ", " + Строка(ТабК[0].tariffCategoryId_Ч) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧГ="); 
	//				Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
	//				
	//				Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
	//					НовЗагр = ТабЗагруженных.Добавить();
	//					НовЗагр.Номер = ТекНом;
	//				КонецеСли;	
	//			КонецеСли;	
	//			
	//			ТекНом = Тек.НомерЗаказа;
	//			ИтВес= 0;
	//			ИнтД = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Тек.ИнтервалДоставки,"-");
	//			ВремяС = Число(Лев(СокрЛП(ИнтД[0]), 2));
	//			ВремяПо = Число(Лев(СокрЛП(ИнтД[1]), 2));
	//			
	//			//Если Найти(Тек.ТипОплатыEnter, "Не оплачен") = 0 Тогда	
	//			//	ТипОплаты = "7";
	//			//ИначеЕсли Найти(Тек.ТипОплатыEnter, "безнал") <> 0 Тогда
	//			//	ТипОплаты = "4";
	//			//ИначеЕсли Найти(Тек.ТипОплатыEnter, "нал") <> 0 Тогда	
	//			//	ТипОплаты = "1";
	//			//Иначе
	//			//	НовОш = ТабОшибок.Добавить();
	//			//	НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
	//			//	НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
	//			//	Продолжить;
	//			//КонецеСли;	
	//			Если Тек.ТипОплатыEnter = Справочники.ТипыОплат.Наличные Тогда
	//				ТипОплаты = "1";
	//			ИначеЕсли Тек.ТипОплатыEnter = Справочники.ТипыОплат.ОплаченоВМагазине Тогда	
	//				ТипОплаты = "7";
	//			ИначеЕсли Тек.ТипОплатыEnter = Справочники.ТипыОплат.БезналичныйРасчет Тогда	
	//				ТипОплаты = "4";
	//			ИначеЕсли Тек.ТипОплатыEnter = Справочники.ТипыОплат.Терминал Тогда	
	//				ТипОплаты = "5";					
	//			Иначе
	//				НовОш = ТабОшибок.Добавить();
	//				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
	//				НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
	//				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
	//				Продолжить;
	//			КонецеСли;
	//			
	//			
	//			
	//			НаборПользователь = евген.ЗапросКИнтернетМагазину("declare @tmp table (userid int, userAddressID int)
	//			|insert into @tmp
	//			|exec dbo.pb_UpdateUser null, '" + Тек.ФИО + "', null, null, '" + СокрЛП(Тек.ТелефонМобильный) + "', '" + СокрЛП(Тек.ТелефонГородской) + "','" + СокрЛП(Тек.Адрес) + "', null," + Строка(КодКонтр) + ", null, null, null, null, null, null, null, null, null, null, null, null, null, null,'" + ПараметрыСеанса.ТекущийПользователь + "', null
	//			| select * from @tmp", Соединение);
	//			Таб1 = Евген.СоздатьТаблицу(НаборПользователь, "userid_Ч, userAddressID_Ч");
	//			UserId = Формат(Таб1[0].userid_Ч, "ЧГ=");
	//			userAddressID = Формат(Таб1[0].userAddressID_Ч, "ЧГ=");
	//			
	//			СеттингИд = "0";
	//			
	//			//НашНом = "";
	//			//Реал = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", СокрЛП(Тек.НомерЗаказа));
	//			//Если Не Реал.Пустая() Тогда
	//			//	НашНом = СокрЛП(Реал.Номер);
	//			//КонецеСли;	
	//			
	//			Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + СеттингИд + ",0," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧГ=") + ",0,0,1)";
	//			R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
	//			ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч");
	//			
	//			//Если НашНом = "" Тогда
	//				НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);			
	//			//Иначе
	//			//	НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder " + СокрЛП(НашНом) + ", " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);			
	//			//КонецеСли;	
	//			Таб2 = Евген.СоздатьТаблицу(НаборЗаказ, "Orderid_Ч");
	//			
	//		КонецеСли;		
	//		
	//		Тек.НаименованиеТовара = СтрЗаменить(Тек.НаименованиеТовара, "'", "");
	//		евген.ЗапросКИнтернетМагазину("                                                                                                                                                                                                                       
	//		|exec dbo.pb_AddItemToOrder " + Формат(Таб2[0].OrderId_Ч, "ЧГ=") + ",'" + Тек.НаименованиеТовара + "','" + Тек.Артикул + "'," + Формат(Тек.Количество, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + Формат(Тек.СтоимостьТовара, "ЧРД=.; ЧН=0; ЧГ=") + ",'" + Тек.КодТовара + "'," + Формат(Окр(Тек.ВесОбщий/Тек.Количество, 3), "ЧРД=.; ЧН=0; ЧГ="), Соединение);
	//		ИтВес = ИтВес + Число(Тек.ВесОбщий);
	//	Исключение
	//		НовОш = ТабОшибок.Добавить();
	//		НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
	//		НовОш.Ошибка = ОписаниеОшибки();
	//		ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
	//		Продолжить;
	//	КонецПопытки;
	//КонецЦикла;	
	//
	//Попытка
	//	Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
	//		Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(ИтВес, "ЧРД=.; ЧГ=") + ",0,0,1)";
	//		R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
	//		ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч");
	//		
	//		Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч, "ЧРД=.; ЧГ=")  + ", " + Формат(ИтВес, "ЧРД=.; ЧГ=") + ", " + Строка(1) + ", " + Строка(ТабК[0].tariffCategoryId_Ч) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧГ="); 
	//		Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
	//		
	//		Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
	//			НовЗагр = ТабЗагруженных.Добавить();
	//			НовЗагр.Номер = ТекНом;
	//		КонецеСли;	
	//	КонецеСли;
	//Исключение
	//	НовОш = ТабОшибок.Добавить();
	//	НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
	//	НовОш.Ошибка = ОписаниеОшибки();
	//КонецПопытки;
	Возврат Истина;
КонецФункции

Функция ПолучитьЮрЛицоЗаказа(НомераЗаказов, Дата, ТипОплаты = Неопределено, ТипДоставки = Неопределено) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация.Ссылка КАК ЮрЛицо
	|ИЗ
	|	РегистрСведений.ЮридическоеЛицоПоДоставкеКонтрагента.СрезПоследних(&ДатаЗапроса, ) КАК ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Контрагент.Ссылка = РеализацияТоваровУслуг.ВладелецТовара.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер В(&МассивНомеров)";
	
	Если ТипОплаты <> Неопределено Тогда
		Зап.Текст = Зап.Текст + "|	И ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипОплаты = &ТипОплаты";
		Зап.УстановитьПараметр("ТипОплаты", ТипОплаты);
	КонецЕсли;
	
	
	Если ТипДоставки <> Неопределено Тогда
		Зап.Текст = Зап.Текст + "|	И ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.ТипДоставки = &ТипДоставки";
		Зап.УстановитьПараметр("ТипДоставки", ТипДоставки);
	КонецеСли;
	
	Зап.Текст = Зап.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Ссылка,
	|	ЮридическоеЛицоПоДоставкеКонтрагентаСрезПоследних.Организация.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаказа";
	
	РезЗ = Зап.Выполнить();
	
	Если РезЗ.Пустой() Тогда
		Возврат Неопределено;
	Иначе	
		Рез = РезЗ.Выгрузить();
	КонецеСли;		
КонецФункции	

Процедура ОбновлениеДанныхПриложенныхДокументов(Документ, МассивЗД, Форма) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Данные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|ГДЕ
	|	ПрикрепленныеФайлы.Документ = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрикрепленныеФайлы.Данные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.Ссылка.Данные КАК Данные,
	|	ВТДокументы.Ссылка.Ссылка КАК Ссылка,
	|	ВТДокументы.Ссылка.Наименование + ""___"" + ""."" + ВТДокументы.Ссылка.РасширениеДокумента КАК ИмяФайла,
	|	ВТДокументы.Ссылка.Код КАК Код
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|ГДЕ
	|	ВТДокументы.Ссылка.ТипДокумента.Родитель.Ссылка <> ЗНАЧЕНИЕ(справочник.ТипыПрикрепленныхДокументов.Фото)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДокументы";
	Зап.УстановитьПараметр("Документ", Документ.Ссылка);	
	Рез = Зап.Выполнить().Выгрузить();
	МассивЗД.Очистить();
	Для Каждого Тек Из Рез Цикл
		Нов = МассивЗД.Добавить();
		АдресПриложения = ПоместитьВоВременноеХранилище(Тек.Данные.Получить(),Форма.УникальныйИдентификатор);
		Нов.АдресПриложения = АдресПриложения;
		Нов.Ссылка = Тек.Ссылка;
		Нов.ИмяФайла = Тек.имяФайла;
		Нов.ИмяФайла = СтрЗаменить(Нов.ИмяФайла, "___", "_" + Строка(Тек.Код));
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбновлениеДанныхПриложенныхФото(Документ, МассивЗД, Форма) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Данные.Ссылка КАК Ссылка,
	|	ПрикрепленныеФайлы.Заказ
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|ГДЕ
	|	ПрикрепленныеФайлы.Документ = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрикрепленныеФайлы.Данные.Ссылка,
	|	ПрикрепленныеФайлы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.Ссылка.Данные КАК Данные,
	|	ВТДокументы.Ссылка.Ссылка КАК Ссылка,
	|	ВТДокументы.Ссылка.Наименование + ""___"" + ""."" + ВТДокументы.Ссылка.РасширениеДокумента КАК ИмяФайла,
	|	ВТДокументы.Ссылка.Код КАК Код,
	|	ВТДокументы.Заказ
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|ГДЕ
	|	ВТДокументы.Ссылка.ТипДокумента = &ТипДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДокументы";
	Зап.УстановитьПараметр("Документ", Документ.Ссылка);
	Зап.УстановитьПараметр("ТипДокумента", Форма.ТипПрикрепляемыхДокументов);
	Рез = Зап.Выполнить().Выгрузить();
	МассивЗД.Очистить();
	Для Каждого Тек Из Рез Цикл
		Нов = МассивЗД.Добавить();
		АдресПриложения = ПоместитьВоВременноеХранилище(Тек.Данные.Получить(),Форма.УникальныйИдентификатор);
		Нов.АдресПриложения = АдресПриложения;
		Нов.Ссылка = Тек.Ссылка;
		Нов.ИмяФайла = Тек.имяФайла;
		Нов.ИмяФайла = СтрЗаменить(Нов.ИмяФайла, "___", "_" + Строка(Тек.Код));
		Нов.Заказ = Тек.Заказ;
	КонецЦикла;	
КонецПроцедуры	

Процедура РегламентВыгрузитьФайлыНаСерверДокументов_Старая() Экспорт
	Попытка
		Подкл = СоздатьПодключениеКБазеДокументов();
	Исключение
		#Если Клиент Тогда
			Сообщить("Ошибка при подключении к базе документов! (" + ОписаниеОшибки() + ")", СтатусСообщения.ОченьВажное);
		#КонецЕсли	
		Возврат;
	КонецПопытки;
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Ссылка КАК Данные
	|ИЗ
	|	Справочник.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|ГДЕ
	|	ПрикрепленныеФайлы.ПереданНаСервер = ЛОЖЬ
	|	И ПрикрепленныеФайлы.ПометкаУдаления = ЛОЖЬ";
	//ЗаписьЖурналаРегистрации("Строка 7129", 
	//    УровеньЖурналаРегистрации.Информация, , ,
	//    Строка(ТекущаяДата()));
		
	Рез = Зап.Выполнить().Выгрузить();
	
	//ЗаписьЖурналаРегистрации("Строка 7133", 
	//    УровеньЖурналаРегистрации.Информация, , ,
	//    Строка(ТекущаяДата()));			
	ТекВр = ТекущаяДата();
	Наб = РегистрыСведений.ЛогВыгрузкиФайловНаСервер.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекВр);
	
	Струк = "";
	Для Каждого Тек Из Рез Цикл
		Нов = Наб.Добавить();
		
		Если ВыгрузитьДокументНаСервер(Тек.Данные, Подкл, Струк) Тогда
		Иначе		
		КонецЕСли;	
		
		ЗаполнитьЗначенияСвойств(Нов, Струк);
		Нов.Период = ТекВр;
		Нов.Данные = Тек.Данные;
	КонецЦикла;	
	
	Наб.Записать();
	
	ВыгрузкаЗависимостейДокументовВБДДокументов(Подкл);
	
	Подкл.Close();	
		
КонецПроцедуры	

Процедура РегламентВыгрузитьФайлыНаСерверДокументов() Экспорт

	//CeHbKA #3931 13.05.2020
	//переклчаем на вызов нового алгоритма
	РегламентВыгрузитьФайлыНаСерверДокументов_Новая();	
	Возврат;
	//CeHbKA #3931 13.05.2020
	
	Попытка
		Подкл = СоздатьПодключениеКБазеДокументов();
	Исключение
		#Если Клиент Тогда
			Сообщить("Ошибка при подключении к базе документов! (" + ОписаниеОшибки() + ")", СтатусСообщения.ОченьВажное);
		#КонецЕсли	
		Возврат;
	КонецПопытки;
		
	//#Если Клиент Тогда 
	//	Сообщить("Выгрузка возможна только на сервере!", СтатусСообщения.ОченьВажное);
	//	Возврат;	
	//#КонецЕсли 
	
	//CeHbKA #3435 09.09.2019 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	            |	СостоянияПрикрепленныхФайловСрезПоследних.ПрикрепленныйФайл КАК Данные,
	            |	СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла КАК СостояниеФайла,
	            |	ПрикрепленныеФайлы.Документ КАК Документ,
	            |	ПрикрепленныеФайлы.ИнтернетМагазин КАК ИнтернетМагазин
	            |ИЗ
	            |	РегистрСведений.СостоянияПрикрепленныхФайлов.СрезПоследних КАК СостоянияПрикрепленныхФайловСрезПоследних
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	            |		ПО СостоянияПрикрепленныхФайловСрезПоследних.ПрикрепленныйФайл = ПрикрепленныеФайлы.Данные
	            |ГДЕ
	            |	СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла <> ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлУдален)
	            |	И СостоянияПрикрепленныхФайловСрезПоследних.ПрикрепленныйФайл.ПереданНаСервер = ЛОЖЬ";
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		ОтправитьНормальноеСообщениеАдминам("Ошибка регламента РегламентВыгрузитьФайлыНаСерверДокументов", ТекстОшибки);
		Возврат;
	КонецПопытки; 
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекВр = ТекущаяДата();

	//ОТКЛЮЧЕНО в рамках задачи #3931
	//CeHbKA 27.04.2020
	//Наб = РегистрыСведений.ЛогВыгрузкиФайловНаСервер.СоздатьНаборЗаписей();
	//Наб.Отбор.Период.Установить(ТекВр);
	
	Пока Выборка.Следующий() Цикл
		
		РезультатСохранения = РаботаСПрикрепленнымиФайламиСервер.СохранитьФайлНаСерверДокументов(Выборка.Данные,  Выборка.ИнтернетМагазин, Выборка.Документ);
		
		Если РезультатСохранения.Успешно Тогда
			
			idФайлаНаСервере = РезультатСохранения.Данные.SaveFileResult.FileId;
			
			Об = Выборка.Данные.ПолучитьОбъект();
			Об.IDНаСервере = idФайлаНаСервере;
			Об.ПереданНаСервер = Истина;
			Об.ВремяПередачи = ТекущаяДата();
			Об.ДатаПередачиНаСервер = ТекущаяДата();
			Об.Записать();
			
			РаботаСПрикрепленнымиФайламиСервер.ДобавитьЗаписьВРегистрСостоянияПрикрепленныхФайлов(Выборка.Данные, Перечисления.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов);
			
			//ОТКЛЮЧЕНО в рамках задачи #3931
			//CeHbKA 27.04.2020
			//Нов = Наб.Добавить();
			//Нов.Период = ТекВр;
			//Нов.Данные = Выборка.Данные;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	//ОТКЛЮЧЕНО в рамках задачи #3931
	//CeHbKA 27.04.2020
	//Наб.Записать();
	
	ВыгрузкаЗависимостейДокументовВБДДокументов(Подкл);
	
	Подкл.Close();	
	
	//CeHbKA #3433 12.09.2019 
	РаботаСПрикрепленнымиФайламиСервер.ВыгрузитьУдаленныеФайлыНаСервер(ТекВр);
	//CeHbKA #3433 12.09.2019 
	
КонецПроцедуры
 

Процедура ВыгрузкаЗависимостейДокументовВБДДокументов(Подкл) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПрикрепленныеФайлы.ИДЗависимостиВБДДокументов,
	|	ПрикрепленныеФайлы.Заказ.Номер КАК Номер,
	|	ПрикрепленныеФайлы.Данные.IDНаСервере КАК IDНаСервере,
	|	ПрикрепленныеФайлы.Документ.Ссылка,
	|	ПрикрепленныеФайлы.Заказ.Ссылка,
	|	ПрикрепленныеФайлы.Данные.Ссылка
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|ГДЕ
	|	ПрикрепленныеФайлы.ИДЗависимостиВБДДокументов = 0
	|	И ПрикрепленныеФайлы.Данные.IDНаСервере <> 0";
	
	//		ЗаписьЖурналаРегистрации("Строка 7179", 
	//УровеньЖурналаРегистрации.Информация, , ,
	//Строка(ТекущаяДата()));
	
	//Рез = Зап.Выполнить().Выгрузить();
	Попытка	
		РезультатЗапроса = Зап.Выполнить();	
		Рез = РезультатЗапроса.Выгрузить();
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		ОтправитьНормальноеСообщениеАдминам("Ошибка регламента ВыгрузкаЗависимостейДокументовВБД", ТекстОшибки);
		Возврат;
	КонецПопытки; 
	//ЗаписьЖурналаРегистрации("Строка 7181", 
	//    УровеньЖурналаРегистрации.Информация, , ,
	//    Строка(ТекущаяДата()));
	
	Для Каждого Тек Из Рез Цикл
		ТекстЗапроса = "declare @tmp table (id int)
		|insert into @tmp		
		|exec sp_addOrderToFile "+
		СокрЛП(Тек.Номер) + "," + СтрЗаменить(Тек.IDНаСервере, Символы.НПП, "") + "
		| select * from @tmp";
		
		
		RS = ЗапросКБДДокументов(ТекстЗапроса, Подкл);
		Если RS = Неопределено Тогда
			Возврат;
		КонецеСли;
		
		Таб = Евген.СоздатьТаблицу(RS, "id_Ч");
		если Таб.Количество() <> 0 Тогда
			Наб = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
			Наб.Отбор.Документ.Установить(Тек.ДокументСсылка); 
			Наб.Отбор.Заказ.Установить(Тек.ЗаказСсылка); 
			Наб.Отбор.Данные.Установить(Тек.ДанныеСсылка); 
			Наб.Прочитать();
			Для Каждого ТекЗап Из Наб Цикл
				ТекЗап.ИДЗависимостиВБДДокументов = Таб[0].id_Ч;
			конецЦикла;	
			Наб.Записать();
		КонецеСли;	
	КонецЦикла;
КонецПроцедуры	

//CeHbKA #3931 27.04.2020
Процедура РегламентВыгрузитьФайлыНаСерверДокументов_Новая() Экспорт
			
	//CeHbKA #3435 09.09.2019 
	Запрос = Новый Запрос;
	//Асеев 21.06.2022 (Задача № 4821)>>>
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	МАКСИМУМ(СостоянияПрикрепленныхФайловСрезПоследних.Период) КАК Период,
	//               |	СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных
	//               |ПОМЕСТИТЬ ВТ_1
	//               |ИЗ
	//               |	РегистрСведений.СостоянияПрикрепленныхФайлов.СрезПоследних КАК СостоянияПрикрепленныхФайловСрезПоследних
	//               |ГДЕ
	//               |	СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторВнешнихДанных <> 0
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторВнешнихДанных
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВТ_1.Период КАК Период,
	//               |	ВТ_1.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных,
	//               |	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)) КАК СостояниеФайла
	//               |ПОМЕСТИТЬ ВТ_2
	//               |ИЗ
	//               |	ВТ_1 КАК ВТ_1
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПрикрепленныхФайлов.СрезПоследних(
	//               |				,
	//               |				ИдентификаторВнешнихДанных В
	//               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |						ВТ_1.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных
	//               |					ИЗ
	//               |						ВТ_1 КАК ВТ_1)) КАК СостоянияПрикрепленныхФайловСрезПоследних
	//               |		ПО ВТ_1.Период = СостоянияПрикрепленныхФайловСрезПоследних.Период
	//               |			И ВТ_1.ИдентификаторВнешнихДанных = СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторВнешнихДанных
	//               |ГДЕ
	//               |	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлУдален)
	//               |	И ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов)
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ВТ_2.Период КАК Период,
	//               |	ВТ_2.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных,
	//               |	ВТ_2.СостояниеФайла КАК СостояниеФайла,
	//               |	ПрикрепленныеФайлы.ИнтернетМагазин КАК ИнтернетМагазин,
	//               |	ПрикрепленныеФайлы.Документ КАК Документ
	//               |ИЗ
	//               |	ВТ_2 КАК ВТ_2
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	//               |		ПО ВТ_2.ИдентификаторВнешнихДанных = ПрикрепленныеФайлы.ИдентификаторВнешнихДанных";
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	МАКСИМУМ(СостоянияПрикрепленныхФайлов.Период) КАК Период,
	//|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных
	//|ПОМЕСТИТЬ ВТ_Идентификаторы
	//|ИЗ
	//|	РегистрСведений.СостоянияПрикрепленныхФайлов КАК СостоянияПрикрепленныхФайлов
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	//|		ПО СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных = ПрикрепленныеФайлы.ИдентификаторВнешнихДанных
	//|			И (ПрикрепленныеФайлы.Заказ = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))
	//|ГДЕ
	//|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных <> 0
	//|	И ПрикрепленныеФайлы.ИдентификаторВнешнихДанных ЕСТЬ NULL
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВТ_Идентификаторы.Период КАК Период,
	//|	ВТ_Идентификаторы.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных,
	//|	СостоянияПрикрепленныхФайлов.СостояниеФайла КАК СостояниеФайла,
	//|	ПрикрепленныеФайлы.ИнтернетМагазин КАК ИнтернетМагазин,
	//|	ПрикрепленныеФайлы.Документ КАК Документ
	//|ИЗ
	//|	ВТ_Идентификаторы КАК ВТ_Идентификаторы
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПрикрепленныхФайлов КАК СостоянияПрикрепленныхФайлов
	//|		ПО ВТ_Идентификаторы.Период = СостоянияПрикрепленныхФайлов.Период
	//|			И ВТ_Идентификаторы.ИдентификаторВнешнихДанных = СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных
	//|			И (НЕ СостоянияПрикрепленныхФайлов.СостояниеФайла В (ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлУдален), ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов)))
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	//|		ПО ВТ_Идентификаторы.ИдентификаторВнешнихДанных = ПрикрепленныеФайлы.ИдентификаторВнешнихДанных";
	//Асеев 21.06.2022 (Задача № 4821)<<<
	
	//Марочкин 17.11.2023 (без задачи, добавление обработки заборов)>>>>
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияПрикрепленныхФайлов.Период) КАК Период,
	|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных
	|ПОМЕСТИТЬ ВТ_Идентификаторы
	|ИЗ
	|	РегистрСведений.СостоянияПрикрепленныхФайлов КАК СостоянияПрикрепленныхФайлов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных = ПрикрепленныеФайлы.ИдентификаторВнешнихДанных
	|			И (ПрикрепленныеФайлы.Заказ = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))
	|ГДЕ
	|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных <> 0
	|	И ПрикрепленныеФайлы.ИдентификаторВнешнихДанных ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияПрикрепленныхФайлов.Период) КАК Период,
	|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных
	|ПОМЕСТИТЬ ВТ_ИдентификаторыЗаборы
	|ИЗ
	|	РегистрСведений.СостоянияПрикрепленныхФайлов КАК СостоянияПрикрепленныхФайлов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлыЗаборы КАК ПрикрепленныеФайлыЗаборы
	|		ПО СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных = ПрикрепленныеФайлыЗаборы.ИдентификаторВнешнихДанных
	|			И (ПрикрепленныеФайлыЗаборы.Заказ = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))
	|ГДЕ
	|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных <> 0
	|	И ПрикрепленныеФайлыЗаборы.ИдентификаторВнешнихДанных ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Идентификаторы.Период КАК Период,
	|	ВТ_Идентификаторы.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных,
	|	СостоянияПрикрепленныхФайлов.СостояниеФайла КАК СостояниеФайла,
	|	ПрикрепленныеФайлы.ИнтернетМагазин КАК ИнтернетМагазин,
	|	ПрикрепленныеФайлы.Документ КАК Документ
	|ИЗ
	|	ВТ_Идентификаторы КАК ВТ_Идентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПрикрепленныхФайлов КАК СостоянияПрикрепленныхФайлов
	|		ПО ВТ_Идентификаторы.Период = СостоянияПрикрепленныхФайлов.Период
	|			И ВТ_Идентификаторы.ИдентификаторВнешнихДанных = СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных
	|			И (НЕ СостоянияПрикрепленныхФайлов.СостояниеФайла В (ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлУдален), ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО ВТ_Идентификаторы.ИдентификаторВнешнихДанных = ПрикрепленныеФайлы.ИдентификаторВнешнихДанных
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ИдентификаторыЗаборы.Период,
	|	ВТ_ИдентификаторыЗаборы.ИдентификаторВнешнихДанных,
	|	СостоянияПрикрепленныхФайлов.СостояниеФайла,
	|	ПрикрепленныеФайлыЗаборы.ИнтернетМагазин,
	|	ПрикрепленныеФайлыЗаборы.Документ
	|ИЗ
	|	ВТ_ИдентификаторыЗаборы КАК ВТ_ИдентификаторыЗаборы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПрикрепленныхФайлов КАК СостоянияПрикрепленныхФайлов
	|		ПО ВТ_ИдентификаторыЗаборы.Период = СостоянияПрикрепленныхФайлов.Период
	|			И ВТ_ИдентификаторыЗаборы.ИдентификаторВнешнихДанных = СостоянияПрикрепленныхФайлов.ИдентификаторВнешнихДанных
	|			И (НЕ СостоянияПрикрепленныхФайлов.СостояниеФайла В (ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлУдален), ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлыЗаборы КАК ПрикрепленныеФайлыЗаборы
	|		ПО ВТ_ИдентификаторыЗаборы.ИдентификаторВнешнихДанных = ПрикрепленныеФайлыЗаборы.ИдентификаторВнешнихДанных";
	//Марочкин 17.11.2023 (без задачи, добавление обработки заборов)<<<
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокID = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИнтернетМагазин) 
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Документ) Тогда
			ТекстОшибки = "У файла ID " + ВыборкаДетальныеЗаписи.ИдентификаторВнешнихДанных + " отсутствуют данные в РС.ПрикрепленныеФайлы";
			ОтправитьНормальноеСообщениеАдминам("Ошибка регламента РегламентВыгрузитьФайлыНаСерверДокументов", ТекстОшибки);
			Продолжить;	
		КонецЕсли;
			
		СписокID.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторВнешнихДанных);
	КонецЦикла;
		
	ЗапросВнешнийИсточник = Новый Запрос;
	ЗапросВнешнийИсточник.Текст = 
		"ВЫБРАТЬ
		|	dbo_extFiles.Ссылка КАК Ссылка,
		|	dbo_extFiles.id КАК id,
		|	dbo_extFiles.data КАК data,
		|	dbo_extFiles.typeFile КАК typeFile,
		|	dbo_extFiles.fileName КАК fileName,
		|	dbo_extFiles.fileExt КАК fileExt
		|ИЗ
		|	ВнешнийИсточникДанных.ВнешнееХранилищеДанных.Таблица.dbo_extFiles КАК dbo_extFiles
		|ГДЕ
		|	dbo_extFiles.id В(&СписокID)";
	
	ЗапросВнешнийИсточник.УстановитьПараметр("СписокID", СписокID);
			
	Попытка
		РезультатЗапроса = ЗапросВнешнийИсточник.Выполнить();
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		ОтправитьНормальноеСообщениеАдминам("Ошибка регламента РегламентВыгрузитьФайлыНаСерверДокументов", ТекстОшибки);
		Возврат;
	КонецПопытки; 
		
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекВр = ТекущаяДата();
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ИдентификаторВнешнихДанных", Выборка.Id);
		
		Если НЕ ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатСохранения = РаботаСПрикрепленнымиФайламиСервер.СохранитьФайлНаСерверДокументов_Новая(Выборка.fileName, 
			Выборка.fileExt,
			Выборка.data,
			Выборка.typeFile,
			ВыборкаДетальныеЗаписи.ИнтернетМагазин,
			ВыборкаДетальныеЗаписи.Документ);
		
		Если РезультатСохранения.Успешно Тогда
			
			idФайлаНаСервере = РезультатСохранения.Данные.SaveFileResult.FileId;
						
			РаботаСПрикрепленнымиФайламиСервер.ДобавитьЗаписьВРегистрСостоянияПрикрепленныхФайлов(Справочники.ПрикрепленныеФайлы.ПустаяСсылка(), Перечисления.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов, Выборка.Id, idФайлаНаСервере);
						
		КонецЕсли;
		
	КонецЦикла; 
		
	ВыгрузкаЗависимостейДокументовВБДДокументов_Новая();
		
	РаботаСПрикрепленнымиФайламиСервер.ВыгрузитьУдаленныеФайлыНаСервер_Новая(ТекВр);
	
КонецПроцедуры

Процедура ВыгрузкаЗависимостейДокументовВБДДокументов_Новая() Экспорт
	
	Попытка
		Подкл = СоздатьПодключениеКБазеДокументов();
	Исключение
		//#Если Клиент Тогда
		//	Сообщить("Ошибка при подключении к базе документов! (" + ОписаниеОшибки() + ")", СтатусСообщения.ОченьВажное);
		//#КонецЕсли	
		ТекстОшибки = "Ошибка при подключении к базе документов! (" + ОписаниеОшибки() + ")";
		ОтправитьНормальноеСообщениеАдминам("Ошибка регламента РегламентВыгрузитьФайлыНаСерверДокументов", ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Зап = Новый Запрос;
	//Зап.Текст = 
	//"ВЫБРАТЬ
	//|	ПрикрепленныеФайлы.ИДЗависимостиВБДДокументов КАК ИДЗависимостиВБДДокументов,
	//|	РеализацияТоваровУслуг.Номер КАК Номер,
	//|	ПрикрепленныеФайлы.Документ КАК ДокументСсылка,
	//|	ПрикрепленныеФайлы.Заказ КАК ЗаказСсылка,
	//|	ПрикрепленныеФайлы.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных,
	//|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)) КАК Состояние,
	//|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторФайлаНаСервереАдминки, 0) КАК IDНаСервере
	//|ИЗ
	//|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|		ПО ПрикрепленныеФайлы.Заказ = РеализацияТоваровУслуг.Ссылка
	//|			И (ПрикрепленныеФайлы.ИдентификаторВнешнихДанных <> 0)
	//|			И (ПрикрепленныеФайлы.ИДЗависимостиВБДДокументов = 0)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПрикрепленныхФайлов.СрезПоследних КАК СостоянияПрикрепленныхФайловСрезПоследних
	//|		ПО ПрикрепленныеФайлы.ИдентификаторВнешнихДанных = СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторВнешнихДанных
	//|ГДЕ
	//|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов)";
	
	//Марочкин 17.11.2023 (без задачи, добавление обработки заборов)>>>
	Зап = Новый Запрос;
	Зап.Текст = 
	"ВЫБРАТЬ
	|	ПрикрепленныеФайлы.ИДЗависимостиВБДДокументов КАК ИДЗависимостиВБДДокументов,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	ПрикрепленныеФайлы.Документ КАК ДокументСсылка,
	|	ПрикрепленныеФайлы.Заказ КАК ЗаказСсылка,
	|	ПрикрепленныеФайлы.ИдентификаторВнешнихДанных КАК ИдентификаторВнешнихДанных,
	|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)) КАК Состояние,
	|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторФайлаНаСервереАдминки, 0) КАК IDНаСервере,
	|	1 КАК СелекторРС
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ПрикрепленныеФайлы.Заказ = РеализацияТоваровУслуг.Ссылка
	|			И (ПрикрепленныеФайлы.ИдентификаторВнешнихДанных <> 0)
	|			И (ПрикрепленныеФайлы.ИДЗависимостиВБДДокументов = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПрикрепленныхФайлов.СрезПоследних КАК СостоянияПрикрепленныхФайловСрезПоследних
	|		ПО ПрикрепленныеФайлы.ИдентификаторВнешнихДанных = СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторВнешнихДанных
	|ГДЕ
	|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрикрепленныеФайлыЗаборы.ИДЗависимостиВБДДокументов,
	|	ЗаборТовара.Номер,
	|	ПрикрепленныеФайлыЗаборы.Документ,
	|	ПрикрепленныеФайлыЗаборы.Заказ,
	|	ПрикрепленныеФайлыЗаборы.ИдентификаторВнешнихДанных,
	|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)),
	|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторФайлаНаСервереАдминки, 0),
	|	2
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлыЗаборы КАК ПрикрепленныеФайлыЗаборы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	|		ПО ПрикрепленныеФайлыЗаборы.Заказ = ЗаборТовара.Ссылка
	|			И (ПрикрепленныеФайлыЗаборы.ИдентификаторВнешнихДанных <> 0)
	|			И (ПрикрепленныеФайлыЗаборы.ИДЗависимостиВБДДокументов = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПрикрепленныхФайлов.СрезПоследних КАК СостоянияПрикрепленныхФайловСрезПоследних
	|		ПО ПрикрепленныеФайлыЗаборы.ИдентификаторВнешнихДанных = СостоянияПрикрепленныхФайловСрезПоследних.ИдентификаторВнешнихДанных
	|ГДЕ
	|	ЕСТЬNULL(СостоянияПрикрепленныхФайловСрезПоследних.СостояниеФайла, ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияПрикрепленныхФайлов.ФайлВыгруженНаСерверДокументов)";
	//Марочкин 17.11.2023 (без задачи, добавление обработки заборов)<<<

	
	Попытка	
		РезультатЗапроса = Зап.Выполнить();	
		Рез = РезультатЗапроса.Выгрузить();
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		ОтправитьНормальноеСообщениеАдминам("Ошибка регламента ВыгрузкаЗависимостейДокументовВБД", ТекстОшибки);
		Возврат;
	КонецПопытки; 

	Для Каждого Тек Из Рез Цикл
		ТекстЗапроса = "declare @tmp table (id int)
		|insert into @tmp		
		|exec sp_addOrderToFile "+
		СокрЛП(Тек.Номер) + "," + СтрЗаменить(Тек.IDНаСервере, Символы.НПП, "") + "
		| select * from @tmp";
		
		
		RS = ЗапросКБДДокументов(ТекстЗапроса, Подкл);
		Если RS = Неопределено Тогда
			Возврат;
		КонецеСли;
		
		Таб = Евген.СоздатьТаблицу(RS, "id_Ч");
		
		Если Таб.Количество() <> 0 Тогда
			Если Тек.СелекторРС = 1 Тогда
				Наб = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
			ИначеЕсли Тек.СелекторРС = 2 Тогда
				Наб = РегистрыСведений.ПрикрепленныеФайлыЗаборы.СоздатьНаборЗаписей();
			КонецеСЛи;	
			Наб.Отбор.Документ.Установить(Тек.ДокументСсылка); 
			Наб.Отбор.Заказ.Установить(Тек.ЗаказСсылка); 
			Наб.Отбор.ИдентификаторВнешнихДанных.Установить(Тек.ИдентификаторВнешнихДанных);
			Наб.Прочитать();
			Для Каждого ТекЗап Из Наб Цикл
				ТекЗап.ИДЗависимостиВБДДокументов = Таб[0].id_Ч;
			конецЦикла;	
			Наб.Записать();
		КонецеСли;	
		
	КонецЦикла;
	
	Подкл.Close();	
	
КонецПроцедуры	
//CeHbKA #3931 12.04.2020 

Функция ВыгрузитьДокументНаСервер(Файл_, Подкл, СтрукПар) Экспорт
	
	Об = Файл_.ПолучитьОбъект();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрикрепленныеФайлы.Документ.Номер КАК ДокументНомер,
	|	ПрикрепленныеФайлы.Документ.Дата КАК ДокументДата,
	|	ПрикрепленныеФайлы.ИнтернетМагазин КАК ИнтернетМагазин
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|ГДЕ
	|	ПрикрепленныеФайлы.Данные.Ссылка = &Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрикрепленныеФайлы.Документ.Номер,
	|	ПрикрепленныеФайлы.Документ.Дата,
	|	ПрикрепленныеФайлы.ИнтернетМагазин";
	Зап.УстановитьПараметр("Данные", Файл_.Ссылка);
	//ЗаписьЖурналаРегистрации("Строка 7225", 
	//    УровеньЖурналаРегистрации.Информация, , ,
	//    Строка(ТекущаяДата()));
	Рез = Зап.Выполнить().Выгрузить();
	//ЗаписьЖурналаРегистрации("Строка 7229", 
	//    УровеньЖурналаРегистрации.Информация, , ,
	//    Строка(ТекущаяДата()));
	ДДок = "";
	НДок = "";
	КК = "0";
	Если Рез.Количество() <> 0 Тогда
		НДок = СокрЛП(Рез[0].ДокументНомер);
		ДДок = Дата(СокрЛП(Рез[0].ДокументДата));
		
		КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Рез[0].ИнтернетМагазин.Код),"_");
		КК = Формат(Число(КодК[1]), "ЧГ=");
	КонецеСли;	
	
	
	
	Если  ЗначениеЗаполнено(ДДок) И  ЗначениеЗаполнено(НДок) Тогда
		ТекстЗапроса = "declare @tmp table (id int)
		|insert into @tmp		
		|exec bp_SaveFile '"+
		СокрЛП(Файл_.Наименование) + "_" + Строка(Файл_.Код)+"','"+
		СокрЛП(Файл_.РасширениеДокумента)+"',"+
		"?,"+
		Формат(Файл_.ТипДокумента.Код, "ЧГ=")+",'"+
		НДок + "','"+
		Евген.ДатаВSQL(ДДок, Ложь)+"'," + КК + ",2,'" + ?(Файл_.Пользователь.Пустая() = Ложь, СокрЛП(Файл_.Пользователь.Наименование), "") + "'
		| select * from @tmp";
	иначе
		ТекстЗапроса = "declare @tmp table (id int)
		|insert into @tmp		
		|exec bp_SaveFile '"+
		СокрЛП(Файл_.Наименование) + "_" + Строка(Файл_.Код)+"','"+
		СокрЛП(Файл_.РасширениеДокумента)+"',"+
		"?,"+
		Формат(Файл_.ТипДокумента.Код, "ЧГ=") + ",null,null," + КК + ",2,'" + ?(Файл_.Пользователь.Пустая() = Ложь, СокрЛП(Файл_.Пользователь.Наименование), "") + "'
		| select * from @tmp";		
	КонецеСли;
	
	cm = Новый COMОбъект("ADODB.Command");
	cm.ActiveConnection = Подкл;  
	cm.CommandTimeout     = 600;
	cm.CommandText         = ТекстЗапроса; 
	cm.CommandType         = 1;
	cm.NamedParameters     = true;	
	
	
	Stream = Новый COMОбъект("ADODB.Stream");
	Stream.Type = 1;
	Stream.Open();
	
	Хр = Новый ХранилищеЗначения(Файл_.Данные);
	//Дв = Хр.Получить().Получить().Получить();
	Дв = Хр.Получить().Получить();
	ИмяФ = КаталогВременныхФайлов() + СокрЛП(Файл_.Наименование) + "_" + Строка(Файл_.Код) + "." + СокрЛП(Файл_.РасширениеДокумента);
	Дв.Записать(ИмяФ);
	Stream.LoadFromFile(ИмяФ);
	локПотокБайт = Новый ComSafeArray(stream.Read()); 
	
	локПар = Новый COMОбъект("ADODB.Parameter"); 
	локПар.Name = "@fFile";
	локПар.Direction = 1; 
	локПар.Type = 205; 
	локПар.Value = локПотокБайт;
	локПар.Size = локПотокБайт.GetLength(); 
	Об.РазмерФайла = локПар.Size;
	
	ТекВр = ТекущаяДата();
	
	cm.Parameters.Append(локПар);
	ТекВр1 = ТекущаяДата();
	
	СтрукПар = Новый Структура;
	
	Попытка
		RS = cm.Execute();     
	Исключение
		Стр = ОписаниеОшибки();
		Наб = РегистрыСведений.ОшибкиSQL.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ИсточникДанных.Установить(Справочники.ВнешниеИсточникиДанных.БДПрикрепленныхДокументов.Ссылка);
		Нов = Наб.Добавить();
		Нов.ТекстЗапроса = ТекстЗапроса;
		Нов.Ошибка = Стр;
		Нов.Период = ТекВр;
		Нов.ИсточникДанных = Справочники.ВнешниеИсточникиДанных.БДПрикрепленныхДокументов.Ссылка;
		Наб.Записать();
		СтрукПар.Вставить("Ошибка", Стр);
		Возврат Ложь;
	КонецПопытки;
	
	ТекВр2 = ТекущаяДата();
	
	Попытка
		Если RS <> Неопределено Тогда
			пока RS.State()=0 цикл 
				RS = RS.NextRecordset();
				Если RS = Неопределено Тогда
					Прервать;
				КонецеСли;	
			конеццикла;
		КонецеСли;
	Исключение
		Стр = ОписаниеОшибки();
		Наб = РегистрыСведений.ОшибкиSQL.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ИсточникДанных.Установить(Справочники.ВнешниеИсточникиДанных.БДПрикрепленныхДокументов.Ссылка);
		Нов = Наб.Добавить();
		Нов.ТекстЗапроса = ТекстЗапроса;
		Нов.Ошибка = Стр;
		Нов.Период = ТекВр;
		Нов.ИсточникДанных = Справочники.ВнешниеИсточникиДанных.БДПрикрепленныхДокументов.Ссылка;
		Наб.Записать();
		СтрукПар.Вставить("Ошибка", Стр);
		Возврат Ложь;
	КонецПопытки;
	Таб = Евген.СоздатьТаблицу(RS, "id_Ч");
	Если Таб.Количество() <> 0 Тогда
		Об.IDНаСервере = Таб[0].id_Ч;
		Об.ПереданНаСервер = Истина;
		Об.ВремяПередачи = ТекВр2 - ТекВр1;
		Об.ДатаПередачиНаСервер = ТекВр2;
		Об.Записать();
		СтрукПар.Вставить("ПереданНаСервер", Истина);
		СтрукПар.Вставить("ДатаПередачиНаСервер", ТекВр2);
	КонецеСли;	
	Stream.Close();
	Возврат Истина;
КонецФункции


Функция СтрокаПодключенияКСерверуДокументов() Экспорт
	Возврат "Provider=SQLOLEDB;Data Source=" + СокрЛП(Константы.СерверБазыДокументов.Получить()) + ";Password=" + СокрЛП(Константы.ПарольПользователяБазыДокументов.Получить()) + ";User ID=" + СокрЛП(Константы.ПользовательБазыДокументов.Получить()) + ";Initial Catalog=" + СокрЛП(Константы.ИмяБазыДокументов.Получить());	//_test
КонецФункции


Функция СоздатьПодключениеКБазеДокументов() Экспорт
	
	ПодключениеКСерверуДокументов = Новый COMОбъект("ADODB.Connection"); 
	ПодключениеКСерверуДокументов.ConnectionTimeOut = 180;
	ПодключениеКСерверуДокументов.CursorLocation = 3;
	ПодключениеКСерверуДокументов.Open(СтрокаПодключенияКСерверуДокументов());
	Возврат ПодключениеКСерверуДокументов;
	
КонецФункции // СоздатьПодключениеКИнтернетМагазину()

Процедура РегламентОтправкаРезультатаПриемкиЗаказов() Экспорт
	
КонецПроцедуры	

Процедура РегламентЗакрытиеОперДняСклад(ТДата = Неопределено) Экспорт
	////Серегин М.В. 13.08.2015 18:33:45 старый код
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	//            |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТовара
	//            |ПОМЕСТИТЬ ВТСуммаТовара
	//            |ИЗ
	//            |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//            |ГДЕ
	//            //|	РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ И
	//            |	 РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслугТовары.Ссылка
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказов,
	//            |	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
	//            |ПОМЕСТИТЬ ВТКомитенты
	//            |ИЗ
	//            |	ВТСуммаТовара КАК ВТСуммаТовара
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |		ПО ВТСуммаТовара.Реализация = РеализацияТоваровУслуг.Ссылка
	//            |ГДЕ
	//            |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//            //|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |	РеализацияТоваровУслуг.ВладелецТовара
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	ФактическийПриходЗаказовНаСклад.Ссылка КАК Док,
	//            |	ФактическийПриходЗаказовНаСклад.Контрагент
	//            |ПОМЕСТИТЬ ВТДок
	//            |ИЗ
	//            |	Документ.ФактическийПриходЗаказовНаСклад КАК ФактическийПриходЗаказовНаСклад
	//            |ГДЕ
	//            |	ФактическийПриходЗаказовНаСклад.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
	//            |	И ФактическийПриходЗаказовНаСклад.Проведен = ИСТИНА
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |	ВТКомитенты.ВладелецТовара,
	//            |	ВТКомитенты.КоличествоЗаказов
	//            |ИЗ
	//            |	ВТКомитенты КАК ВТКомитенты
	//            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДок КАК ВТДок
	//            |		ПО ВТКомитенты.ВладелецТовара = ВТДок.Контрагент
	//            |ГДЕ
	//            |	ЕСТЬNULL(ВТДок.Док, ИСТИНА) = ИСТИНА";
	
	// //Серегин М.В. 13.08.2015 18:33:54 устарел
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |   РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	//            |   СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТовара
	//            |ПОМЕСТИТЬ ВТСуммаТовара
	//            |ИЗ
	//            |   (ВЫБРАТЬ
	//            |       РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	//            |       СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма
	//            |   ИЗ
	//            |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//            |   ГДЕ
	//            |       РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//            |   
	//            |   СГРУППИРОВАТЬ ПО
	//            |       РеализацияТоваровУслугТовары.Ссылка
	//            |   
	//            |   ОБЪЕДИНИТЬ ВСЕ
	//            |   
	//            |   ВЫБРАТЬ
	//            |       РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	//            |       СУММА(РеализацияТоваровУслугПодарочныеПозиции.Сумма)
	//            |   ИЗ
	//            |       Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	//            |   ГДЕ
	//            |       РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//            |   
	//            |   СГРУППИРОВАТЬ ПО
	//            |       РеализацияТоваровУслугПодарочныеПозиции.Ссылка) КАК РеализацияТоваровУслугТовары
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |   РеализацияТоваровУслугТовары.Ссылка
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказов,
	//            |   РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара
	//            |ПОМЕСТИТЬ ВТКомитенты
	//            |ИЗ
	//            |   ВТСуммаТовара КАК ВТСуммаТовара
	//            |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//            |       ПО ВТСуммаТовара.Реализация = РеализацияТоваровУслуг.Ссылка
	//            |ГДЕ
	//            |   РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//            |
	//            |СГРУППИРОВАТЬ ПО
	//            |   РеализацияТоваровУслуг.ВладелецТовара
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |   ФактическийПриходЗаказовНаСклад.Ссылка КАК Док,
	//            |   ФактическийПриходЗаказовНаСклад.Контрагент
	//            |ПОМЕСТИТЬ ВТДок
	//            |ИЗ
	//            |   Документ.ФактическийПриходЗаказовНаСклад КАК ФактическийПриходЗаказовНаСклад
	//            |ГДЕ
	//            |   ФактическийПриходЗаказовНаСклад.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
	//            |   И ФактическийПриходЗаказовНаСклад.Проведен = ИСТИНА
	//            |;
	//            |
	//            |////////////////////////////////////////////////////////////////////////////////
	//            |ВЫБРАТЬ
	//            |   ВЫБОР
	//            |       КОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе
	//            |           ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	//            |       ИНАЧЕ ВТКомитенты.ВладелецТовара
	//            |   КОНЕЦ КАК Родитель,
	//            |   ВТКомитенты.КоличествоЗаказов КАК КоличествоЗаказов,
	//            |   ВТКомитенты.ВладелецТовара КАК ВладелецТовара
	//            |ИЗ
	//            |   ВТКомитенты КАК ВТКомитенты
	//            |       ЛЕВОЕ СОЕДИНЕНИЕ ВТДок КАК ВТДок
	//            |       ПО (ВЫБОР
	//            |               КОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе
	//            |                   ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	//            |               ИНАЧЕ ВТКомитенты.ВладелецТовара
	//            |           КОНЕЦ = ВТДок.Контрагент)
	//            |ГДЕ
	//            |   ЕСТЬNULL(ВТДок.Док, ИСТИНА) = ИСТИНА
	//            |ИТОГИ
	//            |   СУММА(КоличествоЗаказов)
	//            |ПО
	//            |   Родитель";
	
	//Серегин М.В. 27.08.2015 12:32:14 добавлен СкладМагазина             
	//Зап = Новый Запрос;
	//Зап.Текст = 
	//    "ВЫБРАТЬ
	//    |   РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	//    |   СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТовара,
	//    |   РеализацияТоваровУслугТовары.СкладМагазина
	//    |ПОМЕСТИТЬ ВТСуммаТовара
	//    |ИЗ
	//    |   (ВЫБРАТЬ
	//    |       РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	//    |       СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	//    |       РеализацияТоваровУслугТовары.СкладМагазина КАК СкладМагазина
	//    |   ИЗ
	//    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//    |   ГДЕ
	//    |       РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//    |   
	//    |   СГРУППИРОВАТЬ ПО
	//    |       РеализацияТоваровУслугТовары.Ссылка,
	//    |       РеализацияТоваровУслугТовары.СкладМагазина
	//    |   
	//    |   ОБЪЕДИНИТЬ ВСЕ
	//    |   
	//    |   ВЫБРАТЬ
	//    |       РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	//    |       СУММА(РеализацияТоваровУслугПодарочныеПозиции.Сумма),
	//    |       РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина
	//    |   ИЗ
	//    |       Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	//    |   ГДЕ
	//    |       РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//    |   
	//    |   СГРУППИРОВАТЬ ПО
	//    |       РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	//    |       РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина) КАК РеализацияТоваровУслугТовары
	//    |
	//    |СГРУППИРОВАТЬ ПО
	//    |   РеализацияТоваровУслугТовары.Ссылка,
	//    |   РеализацияТоваровУслугТовары.СкладМагазина
	//    |;
	//    |
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |ВЫБРАТЬ
	//    |   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказов,
	//    |   РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара,
	//    |   ВЫБОР
	//    |       КОГДА РеализацияТоваровУслуг.ВладелецТовара = &КонтрагентТопДеливери
	//    |               И ВТСуммаТовара.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//    |           ТОГДА &СкладТопДеливери
	//    |       ИНАЧЕ ВТСуммаТовара.СкладМагазина
	//    |   КОНЕЦ КАК СкладМагазина
	//    |ПОМЕСТИТЬ ВТКомитенты
	//    |ИЗ
	//    |   ВТСуммаТовара КАК ВТСуммаТовара
	//    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//    |       ПО ВТСуммаТовара.Реализация = РеализацияТоваровУслуг.Ссылка
	//    |ГДЕ
	//    |   РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//    |   И НЕ РеализацияТоваровУслуг.ВладелецТовара В
	//    |               (ВЫБРАТЬ
	//    |                   КонтрагеныИсключения.Владелец КАК Контрагент
	//    |               ИЗ
	//    |                   Справочник.КонтрагеныИсключения КАК КонтрагеныИсключения
	//    |               ГДЕ
	//    |                   КонтрагеныИсключения.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.ТипыСвязейКонтрагентовИсключений.ФактическийПриход))
	//    |
	//    |СГРУППИРОВАТЬ ПО
	//    |   РеализацияТоваровУслуг.ВладелецТовара,
	//    |   ВЫБОР
	//    |       КОГДА РеализацияТоваровУслуг.ВладелецТовара = &КонтрагентТопДеливери
	//    |               И ВТСуммаТовара.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//    |           ТОГДА &СкладТопДеливери
	//    |       ИНАЧЕ ВТСуммаТовара.СкладМагазина
	//    |   КОНЕЦ
	//    |;
	//    |
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |ВЫБРАТЬ
	//    |   ФактическийПриходЗаказовНаСклад.Ссылка КАК Док,
	//    |   ФактическийПриходЗаказовНаСклад.Контрагент,
	//    |   ФактическийПриходЗаказовНаСклад.СкладМагазина
	//    |ПОМЕСТИТЬ ВТДок
	//    |ИЗ
	//    |   Документ.ФактическийПриходЗаказовНаСклад КАК ФактическийПриходЗаказовНаСклад
	//    |ГДЕ
	//    |   ФактическийПриходЗаказовНаСклад.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
	//    |   И ФактическийПриходЗаказовНаСклад.Проведен = ИСТИНА
	//    |;
	//    |
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |ВЫБРАТЬ
	//    |   ВЫБОР
	//    |       КОГДА ЕСТЬNULL(ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе, ЛОЖЬ)
	//    |           ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	//    |       ИНАЧЕ ВТКомитенты.ВладелецТовара
	//    |   КОНЕЦ КАК Родитель,
	//    |   ВТКомитенты.КоличествоЗаказов КАК КоличествоЗаказов,
	//    |   ВТКомитенты.ВладелецТовара КАК ВладелецТовара,
	//    |   ВТКомитенты.СкладМагазина КАК СкладМагазина
	//    |ИЗ
	//    |   ВТКомитенты КАК ВТКомитенты
	//    |       ЛЕВОЕ СОЕДИНЕНИЕ ВТДок КАК ВТДок
	//    |       ПО (ВЫБОР
	//    |               КОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе
	//    |                   ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	//    |               ИНАЧЕ ВТКомитенты.ВладелецТовара
	//    |           КОНЕЦ = ВТДок.Контрагент)
	//    |           И ВТКомитенты.СкладМагазина = ВТДок.СкладМагазина
	//    |ГДЕ
	//    |   ЕСТЬNULL(ВТДок.Док, ИСТИНА) = ИСТИНА
	//    |
	//    |УПОРЯДОЧИТЬ ПО
	//    |   Родитель,
	//    |   СкладМагазина УБЫВ
	//    |ИТОГИ
	//    |   СУММА(КоличествоЗаказов)
	//    |ПО
	//    |   Родитель,
	//    |   СкладМагазина
	//    |АВТОУПОРЯДОЧИВАНИЕ";
	
	// Михушкин - 15.04.2016 - добавлены терминалы --->> 
	Зап = Новый Запрос;
	Зап.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТовара,
	|	РеализацияТоваровУслугТовары.СкладМагазина
	|ПОМЕСТИТЬ ВТСуммаТовара
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|		СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|		РеализацияТоваровУслугТовары.СкладМагазина КАК СкладМагазина
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|	ГДЕ
	|		РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслугТовары.Ссылка,
	|		РеализацияТоваровУслугТовары.СкладМагазина
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	|		СУММА(РеализацияТоваровУслугПодарочныеПозиции.Сумма),
	|		РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	|	ГДЕ
	|		РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	|		РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина) КАК РеализацияТоваровУслугТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	РеализацияТоваровУслугТовары.СкладМагазина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказов,
	|	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВладелецТовара = &КонтрагентТопДеливери
	|				И ВТСуммаТовара.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ВТСуммаТовара.СкладМагазина
	|	КОНЕЦ КАК СкладМагазина,
	|	РеализацияТоваровУслуг.ТерминалПриема,
	|	РеализацияТоваровУслуг.ТерминалДоставки
	|ПОМЕСТИТЬ ВТКомитенты
	|ИЗ
	|	ВТСуммаТовара КАК ВТСуммаТовара
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВТСуммаТовара.Реализация = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ РеализацияТоваровУслуг.ВладелецТовара В
	|				(ВЫБРАТЬ
	|					КонтрагеныИсключения.Владелец КАК Контрагент
	|				ИЗ
	|					Справочник.КонтрагеныИсключения КАК КонтрагеныИсключения
	|				ГДЕ
	|					КонтрагеныИсключения.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.ТипыСвязейКонтрагентовИсключений.ФактическийПриход))
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.ВладелецТовара,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВладелецТовара = &КонтрагентТопДеливери
	|				И ВТСуммаТовара.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	|			ТОГДА &СкладТопДеливери
	|		ИНАЧЕ ВТСуммаТовара.СкладМагазина
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.ТерминалПриема,
	|	РеализацияТоваровУслуг.ТерминалДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическийПриходЗаказовНаСклад.Ссылка КАК Док,
	|	ФактическийПриходЗаказовНаСклад.Контрагент,
	|	ФактическийПриходЗаказовНаСклад.СкладМагазина,
	|	ФактическийПриходЗаказовНаСклад.ТерминалПриема,
	|	ФактическийПриходЗаказовНаСклад.ТерминалДоставки
	|ПОМЕСТИТЬ ВТДок
	|ИЗ
	|	Документ.ФактическийПриходЗаказовНаСклад КАК ФактическийПриходЗаказовНаСклад
	|ГДЕ
	|	ФактическийПриходЗаказовНаСклад.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
	|	И ФактическийПриходЗаказовНаСклад.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе, ЛОЖЬ)
	|			ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	|		ИНАЧЕ ВТКомитенты.ВладелецТовара
	|	КОНЕЦ КАК Родитель,
	|	ВТКомитенты.КоличествоЗаказов КАК КоличествоЗаказов,
	|	ВТКомитенты.ВладелецТовара КАК ВладелецТовара,
	|	ВТКомитенты.СкладМагазина КАК СкладМагазина,
	|	ВТКомитенты.ТерминалПриема КАК ТерминалПриема,
	|	ВТКомитенты.ТерминалДоставки КАК ТерминалДоставки
	|ИЗ
	|	ВТКомитенты КАК ВТКомитенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДок КАК ВТДок
	|		ПО (ВЫБОР
	|				КОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе
	|					ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	|				ИНАЧЕ ВТКомитенты.ВладелецТовара
	|			КОНЕЦ = ВТДок.Контрагент)
	|			И ВТКомитенты.СкладМагазина = ВТДок.СкладМагазина
	|			И ВТКомитенты.ТерминалПриема = ВТДок.ТерминалПриема
	|			И ВТКомитенты.ТерминалДоставки = ВТДок.ТерминалДоставки
	|ГДЕ
	|	ЕСТЬNULL(ВТДок.Док, ИСТИНА) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	СкладМагазина УБЫВ,
	|	ТерминалПриема,
	|	ТерминалДоставки
	|ИТОГИ
	|	СУММА(КоличествоЗаказов)
	|ПО
	|	Родитель,
	|	СкладМагазина,
	|	ТерминалПриема,
	|	ТерминалДоставки
	|АВТОУПОРЯДОЧИВАНИЕ";
	// <<--- Михушкин 
	
	
	
	Если ТДата = Неопределено Тогда			
		ТДата = ТекущаяДата();
	КонецеСли;	
	
	////Серегин М.В. 13.08.2015 18:34:58 старый код
	//НачД = НачалоДня(ТДата - 86400);
	//Серегин М.В. 13.08.2015 18:35:04 новый
	НачД = НачалоДня(ТДата);
	
	Вр = Константы.ВремяОкончанияОперационногоДняСклада.Получить();
	СобрД1 = Дата(Год(НачД), Месяц(НачД), День(НачД), Час(Вр), Минута(Вр), Секунда(Вр));
	
	Зап.УстановитьПараметр("ДатаНач", СобрД1);			
	Зап.УстановитьПараметр("ДатаКон", СобрД1 + 86400);			
	
	Зап.УстановитьПараметр("ДатаНач2", НачалоДня(ТДата));			
	Зап.УстановитьПараметр("ДатаКон2", КонецДня(ТДата));
	//+++++Серегин М.В. 18.09.2015 13:38:21 
	КонтрагентТопДеливери = Справочники.Контрагенты.НайтиПоКоду("Shop_222");
	СкладТопДеливери = Справочники.СкладыМагазинов.НайтиПоКоду("7");
	Зап.УстановитьПараметр("КонтрагентТопДеливери", КонтрагентТопДеливери);
	Зап.УстановитьПараметр("СкладТопДеливери", СкладТопДеливери);
	//-----Серегин М.В. 18.09.2015 13:38:25 
	
	РезультатЗапроса = Зап.Выполнить();
	ВыборкаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//Создаем документ закрытие опер дня
	НовДок = Документы.ЗакрытиеОперДня.СоздатьДокумент();
	НовДок.Дата = ТДата;
	
	Пока ВыборкаРодитель.Следующий() Цикл  // --- группировка Родитель
		
		ВыборкаСкладМагазина = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);        
		Пока ВыборкаСкладМагазина.Следующий() Цикл // --- группировка СкладМагазина
			
			ВыборкаТерминалПриема = ВыборкаСкладМагазина.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);        
			Пока ВыборкаТерминалПриема.Следующий() Цикл // --- группировка ТерминалПриема
				
				ВыборкаТерминалДоставки = ВыборкаТерминалПриема.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);        
				Пока ВыборкаТерминалДоставки.Следующий() Цикл // --- группировка ТерминалДоставки
					
					//Добавляем строки в ТЧФактическийПриход
					Нов = НовДок.ФактическийПриход.Добавить();
					
					//Серегин М.В. 24.08.2015 15:27:02 костыль на обновление данных по подтягиванию реализаций 
					Если ВыборкаТерминалДоставки.Родитель = Справочники.Контрагенты.НайтиПоКоду("Shop_180") Тогда
						ОбновитьДанныеПоприходу(ВыборкаТерминалДоставки.Родитель,ТДата);    
					КонецЕсли;
					//Серегин М.В. 24.08.2015 15:27:05 
					
					//Создаем документ ФактическогоПрихода
					НовПр = Документы.ФактическийПриходЗаказовНаСклад.СоздатьДокумент();
					НовПр.Дата = ТДата;
					НовПр.Контрагент = ВыборкаТерминалДоставки.Родитель;
					НовПр.ДатаНачалаВыборки = СобрД1- 86400;
					НовПр.ДатаОкончанияВыборки = СобрД1 ;
					НовПр.ПереключательПоДате = 1;
					НовПр.СкладМагазина = ВыборкаТерминалДоставки.СкладМагазина;
					НовПр.ТерминалПриема = ВыборкаТерминалДоставки.ТерминалПриема;
					НовПр.ТерминалДоставки = ВыборкаТерминалДоставки.ТерминалДоставки;
					
					//Заполняем табличную часть документа ФактическийПриход Контрагенты
					ВыборкаДетальныеЗаписи = ВыборкаТерминалДоставки.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    // --- детальные записи
						ТЧКонтрагенты = НовПр.Контрагенты.Добавить();
						ТЧКонтрагенты.Контрагент = ВыборкаДетальныеЗаписи.ВладелецТовара;
					КонецЦикла;
					
					//После заполнения табличной части контрагентов, можно заполнить и записать фактический приход
					НовПр.ЗаполнитьНаСервере();
					Если НовПр.Заказы.Количество()>0 Тогда //пустые документы не нужны
						Попытка
							НовПр.Записать(РежимЗаписиДокумента.Запись);
							НовПр.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							ОтправитьНормальноеСообщениеАдминам("Ошибка при формировании фактического прихода", ОписаниеОшибки());
							#Если Клиент Тогда
								Сообщить("Ошибка: " + ОписаниеОшибки());
							#КонецЕсли	
						КонецПопытки;
					КонецЕсли;
					
					Нов.Контрагент = ВыборкаТерминалДоставки.Родитель;
					Нов.ДокументПрихода = НовПр.Ссылка;
					Нов.КоличествоЗаказов = ВыборкаТерминалДоставки.КоличествоЗаказов;
					Нов.СкладМагазина = ВыборкаТерминалДоставки.СкладМагазина;
					Нов.ТерминалПриема = ВыборкаТерминалДоставки.ТерминалПриема;
					Нов.ТерминалДоставки = ВыборкаТерминалДоставки.ТерминалДоставки;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	Успешно = Ложь; // Костя 290915
	Попытка
		НовДок.Записать(РежимЗаписиДокумента.Запись);
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
	КонецПопытки;
	
	// Костя 290915	
	Если Успешно Тогда // Отправить инфо-письмо
		МасП = Новый Массив;
		//МасП.Добавить("tovaroved@strizh-logistic.ru");
		//МасП.Добавить("yulia.semenova@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасП.Добавить("ekaterina.krutenkova@strizh-logistic.ru");
		МасП.Добавить("aleksandra.frolova@strizh-logistic.ru");
		МасП.Добавить("samovivoz@strizh-logistic.ru");
		lem.ОтправитьСообщение(МасП,  "Данные по фактическому приходу сформированы",   "Данные по фактическому приходу сформированы");
	КонецЕсли;
	// Костя 290915
	
	
	//Серегин М.В. 20.08.2015 10:58:33 старый код
	//Рез = Зап.Выполнить().Выгрузить();
	//НовДок = Документы.ЗакрытиеОперДня.СоздатьДокумент();
	//НовДок.Дата = ТДата;
	
	//Для Каждого Тек Из Рез Цикл
	//	Нов = НовДок.ФактическийПриход.Добавить();
	//	
	//	НовПр = Документы.ФактическийПриходЗаказовНаСклад.СоздатьДокумент();
	//	НовПр.Дата = ТДата;
	//	НовПр.Контрагент = Тек.ВладелецТовара;
	//	//НовПр.Закрыт = Истина;
	//    ////Серегин М.В. 17.08.2015 15:14:39 старый код
	//    //НовПр.ДатаНачалаВыборки = СобрД1;
	//    //НовПр.ДатаОкончанияВыборки = СобрД1 + 86400;
	//    //Серегин М.В. 17.08.2015 15:14:44 новый
	//	НовПр.ДатаНачалаВыборки = СобрД1- 86400;
	//	НовПр.ДатаОкончанияВыборки = СобрД1 ;
	//    
	//	Новпр.ЗаполнитьНаСервере();
	//	//ЗаполнитьНаСервере();
	//	Попытка
	//		НовПр.записать(РежимЗаписиДокумента.Запись);
	//		НовПр.записать(РежимЗаписиДокумента.Проведение);
	//	Исключение
	//		ОтправитьНормальноеСообщениеАдминам("Ошибка при формировании фактического прихода", ОписаниеОшибки());
	//		#Если Клиент Тогда
	//			Сообщить("Ошибка: " + ОписаниеОшибки());
	//		#КонецЕсли	
	//	КонецПопытки;
	//	
	//	//Д = Новый Структура("Ключ", НовПр.Ссылка);
	//	//Форма = НовПр.ПолучитьФорму("Документ.ФактическийПриходЗаказовНаСклад.Форма.ФормаДокумента", Д);
	//	//Форма.ЗаполнитьНаСервере();
	//	//ПараметрыЗаписи = Новый Структура;
	//	//ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	//	//Форма.Записать(ПараметрыЗаписи);
	//	
	//	Нов.Контрагент = Тек.ВладелецТовара;
	//	Нов.ДокументПрихода = НовПр.Ссылка;
	//	Нов.КоличествоЗаказов = Тек.КоличествоЗаказов;
	//КонецЦикла;	
	//НовДок.Записать(РежимЗаписиДокумента.Запись);
	//НовДок.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры	

Процедура ОбновитьДанныеПоприходу (Контрагент,Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ПриходЗаказовНаСкладЗаказы.Ссылка
	|ИЗ
	|   Документ.ПриходЗаказовНаСклад.Заказы КАК ПриходЗаказовНаСкладЗаказы
	|ГДЕ
	|   ПриходЗаказовНаСкладЗаказы.Ссылка.Контрагент В (&Контрагент)
	|   И ПриходЗаказовНаСкладЗаказы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|   И ПриходЗаказовНаСкладЗаказы.Заказ = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("НачалоПериода", (НачалоДня(Дата))-86400);
	Запрос.УстановитьПараметр("КонецПериода", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТЧзаказы = ДокументОбъект.Заказы;
		Для каждого СтрЗаказы Из ТЧЗаказы Цикл
			СтрЗаказы.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа",СтрЗаказы.ВнешнийНомерЗаказа);
		КонецЦикла;
		ТЧТовары = ДокументОбъект.Товары;
		Для каждого СтрТовары Из ТЧТовары Цикл
			Если ЗначениеЗаполнено(СтрТовары.ВнешнийНомерЗаказа) Тогда
				СтрТовары.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа",СтрТовары.ВнешнийНомерЗаказа);
			КонецЕсли;
		КонецЦикла;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());   
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


Функция ЗапросКБДДокументов(ТекстЗапроса, Подключение) Экспорт
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Подключение;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandTimeout = 120; // 2 минуты
	Cmd.CommandType = 1;
	
	ТекВр = ТекущаяДата();
	
	
	Попытка
		ДС = Cmd.Execute();
	Исключение
		Стр = ОписаниеОшибки();
		Наб = РегистрыСведений.ОшибкиSQL.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ИсточникДанных.Установить(Справочники.ВнешниеИсточникиДанных.БДПрикрепленныхДокументов.Ссылка);
		Нов = Наб.Добавить();
		Нов.ТекстЗапроса = ТекстЗапроса;
		Нов.Ошибка = Стр;
		Нов.ИсточникДанных = Справочники.ВнешниеИсточникиДанных.БДЗаказов.Ссылка;
		Нов.Период = ТекВр;
		Наб.Записать();
		lem.ОтправитьНормальноеСообщениеАдминам("Ошибка SQL (БД документов)", Стр);
		Возврат Неопределено;
	КонецПопытки;
	Попытка
		Если ДС <> Неопределено Тогда
			пока ДС.State()=0 цикл 
				ДС = ДС.NextRecordset();
				Если ДС = Неопределено Тогда
					Прервать;
				КонецеСли;	
			конеццикла;
		КонецеСли;
	Исключение
		Стр = ОписаниеОшибки();
		Наб = РегистрыСведений.ОшибкиSQL.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ИсточникДанных.Установить(Справочники.ВнешниеИсточникиДанных.БДПрикрепленныхДокументов.Ссылка);
		Нов = Наб.Добавить();
		Нов.ТекстЗапроса = ТекстЗапроса;
		Нов.Ошибка = Стр;
		Нов.Период = ТекВр;
		Нов.ИсточникДанных = Справочники.ВнешниеИсточникиДанных.БДЗаказов.Ссылка;
		Наб.Записать();
		lem.ОтправитьНормальноеСообщениеАдминам("Ошибка SQL (БД документов)", Стр);
		Возврат Неопределено;
	КонецПопытки;
	Возврат ДС;
КонецФункции // ЗапросКИнтернетМагазину()

Процедура ОтобразитьТранзакциюВАдминке(Подкл, ТипТранзакции, ДатаТранзакции, СуммаТранзакции, Заказ) Экспорт
	//ТекстЗапроса = "EXEC sp_AddTransaction " + СокрЛП(Заказ.Номер) + "," + Формат(ТипТранзакции.Код, "ЧГ=") + ",0,0,'" + Евген.ДатаВSQL(ДатаТранзакции, Ложь) + "', " + Формат(СуммаТранзакции, "ЧРД=.; ЧН=0; ЧГ=");
	//евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);
	
	ТекстЗапроса = "EXEC sp_AddTransaction " + СокрЛП(Заказ.Номер) + "," + Формат(ТипТранзакции.Код, "ЧГ=") + ",'" + Евген.ДатаВSQL(ДатаТранзакции, Ложь) + "', " + Формат(СуммаТранзакции, "ЧРД=.; ЧН=0; ЧГ=");
	евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);
	
КонецПроцедуры	



Процедура ОтправкаОтчетовКомпанииПоРасписанию(КодНастройки) Экспорт
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = Справочники.НастройкиАвтоматическойОтправкиОбщихОтчетов.НайтиПоКоду(КодНастройки);
	Если Настройка.Пустая() Тогда
		Возврат;
	КонецеСли;	
	
	Т = Неопределено;
	Таб = Новый ТабличныйДокумент;
	
	Если Настройка.НачалоПериодаОтчета.Пустая() Тогда
		НачПериода = НачалоДня(ТекущаяДата());
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоДня Тогда
		НачПериода = НачалоДня(ТекущаяДата());
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоМесяца Тогда
		НачПериода = НачалоМесяца(ТекущаяДата());
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.ТекущаяДата Тогда
		НачПериода = ТекущаяДата();
	//Асеев 17.12.2020 (Задача № 4357)>>>
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.ТекущаяДатаМинусСутки Тогда
		НачПериода = ТекущаяДата() - 86400;
	//Асеев 17.12.2020 (Задача № 4357)<<<
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоПредыдущегоДня Тогда
		НачПериода = НачалоДня(ТекущаяДата() - 86400);		
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоПредыдущегоМесяца Тогда
		НачПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
		//Серегин М.В. 18.05.2015 12:05:42 
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоСледующегоДня Тогда
		НачПериода = НачалоДня(ТекущаяДата() + 86400);
	ИначеЕсли Настройка.НачалоПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.НачалоПредыдущейНедели Тогда
		НачПериода = НачалоНедели(НачалоНедели(ТекущаяДата())-1);
	КонецеСли;	
	
	
	Если Настройка.КонецПериодаОтчета.Пустая() Тогда
		КонПериода = КонецДня(ТекущаяДата());
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецДня Тогда
		КонПериода = КонецДня(ТекущаяДата());
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецМесяца Тогда
		КонПериода = КонецМесяца(ТекущаяДата());
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.ТекущаяДата Тогда
		КонПериода = ТекущаяДата();
	//Асеев 17.12.2020 (Задача № 4357)>>>
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.ТекущаяДатаМинусСутки Тогда
		КонПериода = ТекущаяДата() - 86400;
	//Асеев 17.12.2020 (Задача № 4357)<<<
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецПредыдущегоДня Тогда
		КонПериода = КонецДня(ТекущаяДата() - 86400);				
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецПредыдущегоМесяца Тогда
		КонПериода = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));	
		//Серегин М.В. 18.05.2015 12:05:56 
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецСледующегоДня Тогда
		КонПериода = КонецДня(ТекущаяДата() + 86400);
	ИначеЕсли Настройка.КонецПериодаОтчета = Перечисления.ВидыПериодовАвтоматическогоФормированияОтчетов.КонецПредыдущейНедели Тогда
		КонПериода = КонецНедели(НачалоНедели(ТекущаяДата())-1);
	КонецеСли;
	
	Терминал = Настройка.ТерминалДоставки;
	
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоКонтролюВремени Тогда
		Терминал = Настройка.ТерминалДоставки;
		От = Отчеты.ОтчетКонтроляВремени.Создать();
		Т = От.СформироватьОтправитьПоПочте(НачПериода, Терминал);
	КонецЕсли;
	
	//Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.КачествоДоставкиЛореаль Тогда
	//	От = Отчеты.ОтчетПоКачествуДоставок_Лореаль.Создать();
	//	Т = От.СформироватьОтправитьПоПочте(НачПериода);
	//КонецЕсли;
	
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.РеестрПКЭкспресс Тогда
		Т = may.СформироватьПКЭкспрес(НачПериода);
	КонецЕсли;
	
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоСтоимостиТоваров Тогда
		ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		От = Отчеты.ОтчетПоСтоимостиТовара.Создать();
		Т = От.СформироватьОтправитьПоПочте(ПарПериод, Настройка.ПараметрСумма);
	КонецеСли;
	
	//Серегин М.В. 14.05.2015 15:57:49  
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетОНеобеспеченныхЗаказах Тогда
		Терминал = Настройка.ТерминалДоставки;
		Отчет = Отчеты.ОтчетОНеобеспеченныхЗаказах.Создать();
		НачалоПериода = НачПериода;
		КонецПериода = КонПериода;
		КонтрагентыИсключения = ПолучитьКонтрагентыИсключения(Настройка);
		Т =  Отчет.СформироватьОтправитьПоПочте(НачалоПериода,КонецПериода,Неопределено,КонтрагентыИсключения,Терминал);
	КонецеСли;
	
	//+++ Костя
	Если  Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоСкладамМагазинов Тогда 
		ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		От = Отчеты.ОтчетПоСкладамМагазинов.Создать();
		Т = От.СформироватьОтправитьПоПочте(ПарПериод);
		//--- Костя
	КонецеСли;
	
	//+++++Серегин М.В. 26.01.2016 18:02:31 
	//Серегин М.В. 14.05.2015 15:57:49  
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоНеуехавшимЗаказам Тогда
		Отчет = Отчеты.ОтчетПоНеуехавшимЗаказам.Создать();
		
		ПарПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		КонтрагентыИсключения = ПолучитьКонтрагентыИсключения(Настройка);
		Терминал = Настройка.ТерминалДоставки;
		Т =  Отчет.Сформировать(ПарПериод, Терминал);
		
		//Геннадий 27.12.2021 ++
		Табл = Отчет.СформироватьВариантПоИнтернетМагазинам(ПарПериод, Терминал);
		//Геннадий 27.12.2021 --
		
	КонецеСли;   
	//-----Серегин М.В. 26.01.2016 18:02:33 
	
	
	// Михушкин - 01.06.2016 --->> 
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоКоличествуПоездок Тогда
		Терминал = Настройка.ТерминалДоставки;
		КоличествоПоездок = Настройка.ПараметрСумма;
		От = Отчеты.ОтчетПоКоличествуПоездок.Создать();
		СтПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		Т = От.СформироватьОтправитьПоПочте(СтПериод, Терминал, КоличествоПоездок);
	КонецеСли;
	// <<--- Михушкин 
	
	
	// Михушкин - 29.06.2016 --->> 
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоВесам Тогда
		
		//КонтрагентыИсключения = ПолучитьКонтрагентыИсключения(КодНастройки);
		//От = Отчеты.ОтчетПоВесам.Создать();
		////СтПериод = Новый СтандартныйПериод(НачПериода, КонПериода);
		//Т = От.СформироватьОтправитьПоПочте(НачПериода, НачалоДня(КонПериода), КонтрагентыИсключения);
		
		// Якурнов 08.10.2018 9:44:34
		КонтрагентыИсключения = ПолучитьКонтрагентыИсключения(Настройка);
		КонтрагентыЦелевые = ПолучитьКонтрагентыЦелевые(Настройка);
		От = Отчеты.ОтчетПоВесам_ПроцентВзвешенных.Создать();
		Т = От.СформироватьОтправитьПоПочтеСОтборомПоКонтрагентам(НачПериода, КонецДня(НачПериода),КонтрагентыИсключения, КонтрагентыЦелевые);
		
	КонецеСли;
	// <<--- Михушкин
	
	
	// Михушкин - 16.01.2017 --->> 
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ЕжедневныйОтчетОКачествеДоставок Тогда
		//+Степанов Задача № 3829
		//От = Отчеты.ОтчетОВыполняемости.Создать();
		От = Отчеты.ДанныеОРезультатахДоставки.Создать();		
		//-Степанов Задача № 3829
		//Т = От.СформироватьОтправитьПоПочте();
		//CeHbKA
		Т = От.СформироватьОтправитьПоПочте(НачПериода, КонПериода, Терминал);		
	КонецеСли;
	// <<--- Михушкин
	
	
	// Марочкин - 24.01.2017 --->> 
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоОтказамПереносам Тогда
		//Ф = ПолучитьФорму("Отчет.ОтчетПоОтказамПереносам.Форма");
		//Ф.ОтправитьОтчетПоРегламенту(НачПериода, КонецДня(КонПериода));	
		
		// МАС - 02.10.2017 - №1888 --->> 
		МасП = Новый Массив;
		Стр_ = "";
		Для Каждого Тек Из Настройка.СписокАдресов Цикл
			если Тек.Отправлять Тогда
				МасП.Добавить(СокрЛП(Тек.Адрес));
				Стр_ = Стр_ + ";" + Тек.Адрес;
			КонецеСли;	
		КонецЦикла;
		// <<--- МАС 
		
		Терминал = Настройка.ТерминалДоставки;
		
		//+Степанов Задача № 3829
		//++Задача № 2975
		//Об = Отчеты.ОтчетПоОтказамПереносам.Создать();
		//Об = Отчеты.ОтчетПоОтказамПереносамНовый.Создать();
		//--Задача № 2975
		Об = Отчеты.ДанныеОРезультатахДоставки.Создать();
		//-Степанов Задача № 3829
		
		// МАС - 02.10.2017 - №1888 --->> 
		//Об.ОтправитьОтчетПоРегламенту(НачПериода, КонецДня(КонПериода), Терминал);
		Об.ОтправитьОтчетПоРегламенту(НачПериода, КонецДня(КонПериода), Терминал, МасП, Настройка);
		// <<--- МАС 
	КонецеСли;
	// <<--- Марочкин
	
	//+++ БАО 09.06.2017 №1034 
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.СписокЗаказовСНепривязаннымиАдресами Тогда	
		Об = Отчеты.СписокЗаказовСНепривязаннымиАдресами.Создать();
		Т  = Об.СформироватьОтправитьПоПочте(НачПериода);
	КонецеСли;
	//--- БАО 09.06.2017 №1034 
	
	// Задача № 3077
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоНеПолностьюПоступившимЗаказам Тогда	
		Об = Отчеты.ОтчетПоНеПолностьюПоступившимЗаказам.Создать();
		ПериодОтчета = ТекущаяДата();		
		Т  = Об.СформироватьОтправитьПоПочте(ПериодОтчета, Настройка.ТерминалДоставки, Настройка);
	КонецеСли;		
	// Задача № 3077	
	
	//Геннадий #4061 29.06.2020 ->
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоКИК Тогда	
		Об = Отчеты.ОтчетПоКИК.Создать();
		ПериодОтчета = Новый СтандартныйПериод(НачПериода, КонПериода);
		Т  = Об.СформироватьОтправитьПоПочте(ПериодОтчета);
	КонецЕсли;
	//Геннадий #4061 29.06.2020 <-
	
	//Геннадий #4063 04.08.2020 ->
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ГрафикРаботыСотрудников Тогда	
		Об = Отчеты.ОтчетКорпоративныеКонтакты.Создать();
		Т  = Об.СформироватьОтправитьПоПочте(КонПериода);
	КонецЕсли;
	//Геннадий #4063 04.08.2020 <-
	
	//Асеев 23.11.2020 (Задача № 4357)>>>
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоАвтопереносуДатыДоставкиПриПоступлении Тогда
		Об = Отчеты.ОтчетПоАвтопереносуДатыДоставкиПриПоступлении.Создать();
		Т = Об.СформироватьОтправитьПоПочте(НачПериода, КонПериода, Терминал);
	КонецЕсли;
	//Асеев 23.11.2020 (Задача № 4357)<<<
	
	//Асеев 04.07.2024 (Задача № 5291)>>>
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоИдентичнымАдресам Тогда
		Об = Отчеты.ОтчетПоИдентичнымАдресам.Создать();
		Т = Об.СформироватьОтправитьПоПочте(НачПериода, КонПериода, Терминал);
	КонецЕсли;
	//Асеев 04.07.2024 (Задача № 5291)<<<
	
	//Асеев 02.08.2024 (Задача № 5303)>>>
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоМассивнымЗаказам Тогда
		Об = Отчеты.ОтчетПоМассивнымЗаказам.Создать();
		Т = Об.СформироватьОтправитьПоПочте(НачПериода, КонПериода, Терминал);
	КонецЕсли;
	//Асеев 02.08.2024 (Задача № 5303)<<<
	
	//Асеев 03.04.2025 (Задача № 5349)>>>
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.СборкаЗаказов Тогда
		СледующийДень = НачалоДня(ТекущаяДата()) + 86400;
		КонтрагентыЦелевые = ПолучитьКонтрагентыЦелевые(Настройка);
		Об = Отчеты.СборкаЗаказов.Создать();
		Т = Об.СформироватьОтправитьПоПочте(НачПериода, КонПериода, СледующийДень, КонтрагентыЦелевые);
	КонецЕсли;
	//Асеев 03.04.2025 (Задача № 5349)<<<
	
	//Геннадий #4387 14.12.2020 ->
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.СводОтправленныхРассылок Тогда	
		Об = Отчеты.СводОтправленныхРассылок.Создать();
		//ПериодОтчета = Новый СтандартныйПериод(НачПериода, КонПериода);
		КоличествоНеОтправленныхПисем = 0;
		Т  = Об.СформироватьОтправитьПоПочте(НачПериода, КонПериода, КоличествоНеОтправленныхПисем);
	КонецЕсли;
	//Геннадий #4387 14.12.2020 <-
	
	//CeHbKA #4417 14.01.2020
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ЭлектронныйЖурналВыдачиОборудования Тогда
		Т = Документы.УчетОборудования.ПолучитьОтчетЖурналВыдачиОборудования(НачПериода, Терминал);
		//Геннадий #4417 26.07.2021 ++
		//комментарий Белова от 26.07.2021 7 ч 40 мин 
		ФайлОтчета = "\\192.168.5.70\change\Обработка заказов\Выгрузка журнала оборудования\" + Формат(НачПериода, "ДФ=yyyy-MM-dd") + "_Электронный журнал выдачи оборудования" + ".xlsx";
		Попытка                                                                                                                    
			Т.Записать(ФайлОтчета, ТипФайлаТабличногоДокумента.XLSX);
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;
		//Геннадий #4417 26.07.2021 --
	КонецЕсли; 
	//CeHbKA #4417 14.01.2020
	
	//+Широков 15.04.2021 по письму
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоВесамЗаказов Тогда
		Об = Отчеты.ОтчетПоВесамЗаказов.Создать();
		Т = Об.СформироватьОтправитьПоПочте(НачПериода, КонПериода);
	КонецЕсли; 
	//-Широков 15.04.2021 по письму
	
	//+Широков 14.07.2021 Задача 2216 
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.МониторингОтказовПереносовРасширенный Тогда
		Об = Отчеты.МониторингОтказовПереносовРасширенный.Создать();
		Т = Об.СформироватьОтправитьПоПочте(НачПериода, КонПериода);
	КонецЕсли; 
	//-Широков 14.07.2021 Задача 2216 
	
	Если Т = Неопределено Тогда
		Возврат;
	КонецеСли;	
	//Серегин М.В. 14.05.2015 15:57:50 
	
	Г = Новый УникальныйИдентификатор;
	
	//Асеев 03.04.2025 (Задача № 5349)>>>
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.СборкаЗаказов Тогда
		ПутьКФайлу = Новый Массив;
		
		//первое вложение Сборка заказов
		ВремПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_Сборка заказов.xls"; 
		Т[0].Записать(ВремПутьКФайлу, ТипФайлаПакетаОтображаемыхДокументов.XLS);
		ПутьКФайлу.Добавить(ВремПутьКФайлу);
		
		//второе вложение Этикетки
		ВремПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_Этикетки.pdf"; 
		Т[1].Записать(ВремПутьКФайлу, ТипФайлаТабличногоДокумента.PDF);
		ПутьКФайлу.Добавить(ВремПутьКФайлу);
		
	//Асеев 03.04.2025 (Задача № 5349)<<<
	//Геннадий 27.12.2021 ++
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоНеуехавшимЗаказам Тогда
		//переделаем на массив файлов для отчета по неуехавшим заказам
		ПутьКФайлу = Новый Массив;
		
		//первое вложение
		ВремПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + СокрЛП(Настройка.Наименование) + ".xls"; 
		Т.Записать(ВремПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
		ПутьКФайлу.Добавить(ВремПутьКФайлу);
		
		//второе вложение
		Если Табл <> Неопределено Тогда
			ВремПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + СокрЛП(Настройка.Наименование) + "_ИМ.xls"; 
			Табл.Записать(ВремПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
			ПутьКФайлу.Добавить(ВремПутьКФайлу);
		КонецЕсли;
	Иначе
		ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + СокрЛП(Настройка.Наименование) + ".xls";
		ТипТ = ТипЗнч(Т);
		Если ТипТ = Тип("ТабличныйДокумент") Тогда
			Т.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
		Иначе//Если ТипТ = Тип("ПакетОтображаемыхДокументов") Тогда
			Т.Записать(ПутьКФайлу, ТипФайлаПакетаОтображаемыхДокументов.XLS);
		КонецЕсли
	КонецЕсли;
	//Геннадий 27.12.2021 --
	
	МасП = Новый Массив;
	Стр_ = "";
	Для Каждого Тек Из Настройка.СписокАдресов Цикл
		если Тек.Отправлять Тогда
			МасП.Добавить(СокрЛП(Тек.Адрес));
			Стр_ = Стр_ + ";" + Тек.Адрес;
		КонецеСли;	
	КонецЦикла;	
	
	#Область ОтправкаИЛогирование
	
	// По Задача № 3427
	
	ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойРегламент);
	ПараметрыЗаписи.ВидОтчета = Настройка.Отчет;
	ПараметрыЗаписи.НастройкаОтправки = Настройка;
	ПараметрыЗаписи.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	ПараметрыЗаписи.Терминал   = Терминал; //ВРЕМЕННО ОТКЛЮЧЕНО 3427

	ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
	
	//Геннадий 27.12.2021 ++
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.СборкаЗаказов Или 
		Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоНеуехавшимЗаказам Тогда
		Если ТипЗнч(ПутьКФайлу) = Тип("Массив") И ПутьКФайлу.Количество() Тогда
			ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу[0]);
		КонецЕсли;
	Иначе
		ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
	КонецЕсли;
	//Геннадий 27.12.2021 --
	
	ПараметрыЗаписи.GUID = Г;
	ПараметрыЗаписи.СписокПолучателей = Стр_;
	
	//Геннадий 22.12.2020 ->
	//далее по коду добавлена запись текста ошибки во внешний лог
	ТекстОшибки = "";
	//Геннадий <-
	
	Если Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоКоличествуПоездок Тогда	
		//Геннадий #4415 25.12.2020 ->
		Если Не ЗначениеЗаполнено(Настройка.ОператорРассылки) Или Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
			Отпр = lem.ОтправитьСообщение(МасП, Строка(Настройка.Отчет) + " за " + Формат(ТекущаяДата(), "ДЛФ=DD") + " (" + Терминал.Город + ")", Строка(Настройка.Отчет) + " за " + Формат(ТекущаяДата(), "ДЛФ=DD") + " (" + Терминал.Город + ")", ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);	
		ИначеЕсли Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, Строка(Настройка.Отчет) + " за " + Формат(ТекущаяДата(), "ДЛФ=DD") + " (" + Терминал.Город + ")", Строка(Настройка.Отчет) + " за " + Формат(ТекущаяДата(), "ДЛФ=DD") + " (" + Терминал.Город + ")", ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);
		КонецЕсли;
		//Геннадий <-
		
		// МАС - 21.12.2017 - № --->> 
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетОНеобеспеченныхЗаказах 
		ИЛИ Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоНеуехавшимЗаказам 
		//CeHbKA
		ИЛИ Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ЕжедневныйОтчетОКачествеДоставок Тогда		
		
		//Геннадий #4415 25.12.2020 ->
		Если Не ЗначениеЗаполнено(Настройка.ОператорРассылки) Или Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
			Отпр = lem.ОтправитьСообщение(МасП, Строка(Настройка.Отчет) + " (" + Терминал.Город + ")", Строка(Настройка.Отчет), ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);	
		ИначеЕсли Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, Строка(Настройка.Отчет) + " (" + Терминал.Город + ")", Строка(Настройка.Отчет), ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);
		КонецЕсли;
		//Геннадий <-
		
		// <<--- МАС 
	//+Широков 14.07.2021 Задача 2216 
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.МониторингОтказовПереносовРасширенный Тогда
		Если Не ЗначениеЗаполнено(Настройка.ОператорРассылки) Или Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
			Отпр = lem.ОтправитьСообщение(МасП, Строка(Настройка.Отчет) + " (" + Терминал.Город + ")", Строка(Настройка.Отчет), ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);	
		ИначеЕсли Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, Строка(Настройка.Отчет) + " (" + Терминал.Город + ")", Строка(Настройка.Отчет), ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);
		КонецЕсли;
	//-Широков 14.07.2021 Задача 2216 


//+Широков 15.04.2021 по письму
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоВесамЗаказов Тогда
		Если Не ЗначениеЗаполнено(Настройка.ОператорРассылки) Или Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
			Отпр = lem.ОтправитьСообщение(МасП, Строка(Настройка.Отчет) + " (" + Терминал.Город + ")", Строка(Настройка.Отчет), ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);	
		ИначеЕсли Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, Строка(Настройка.Отчет) + " (" + Терминал.Город + ")", Строка(Настройка.Отчет), ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);
		КонецЕсли;
//-Широков 15.04.2021 по письму

	//Геннадий #4387 14.12.2020 ->
	ИначеЕсли Настройка.Отчет = Перечисления.ВидыОтправляемыхОтчетов.СводОтправленныхРассылок Тогда 
		ТекстПисьма = Строка(Настройка.Отчет);
		Если КоличествоНеОтправленныхПисем > 0 Тогда
			ТекстПисьма = ТекстПисьма + Символы.ПС + 
			"Обнаружены неотправленные отчеты в количестве " + КоличествоНеОтправленныхПисем + " штук!";
		КонецЕсли;
		//Геннадий #4415 25.12.2020 ->
		Если Не ЗначениеЗаполнено(Настройка.ОператорРассылки) Или Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
			Отпр = lem.ОтправитьСообщение(МасП, Строка(Настройка.Отчет), ТекстПисьма, ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);	
		ИначеЕсли Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, Строка(Настройка.Отчет), ТекстПисьма, ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);
		КонецЕсли;
		//Геннадий <-
			
	//Геннадий <-
	Иначе
		//Геннадий #4415 25.12.2020 ->
		Если Не ЗначениеЗаполнено(Настройка.ОператорРассылки) Или Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
			Отпр = lem.ОтправитьСообщение(МасП, Строка(Настройка.Отчет), Строка(Настройка.Отчет), ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);	
		ИначеЕсли Настройка.ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, Строка(Настройка.Отчет), Строка(Настройка.Отчет), ПутьКФайлу, "Логистическая компания ""Стриж""",,,, ТекстОшибки);
		КонецЕсли;
		//Геннадий <-
	КонецЕсли;
	
	ПараметрыЗаписи.ОтчетОтправлен 	= Отпр;
	//Геннадий #4415 25.12.2020 ->
	ПараметрыЗаписи.ТекстОшибки 	 = ТекстОшибки;
	ПараметрыЗаписи.ОператорРассылки = ?(ЗначениеЗаполнено(Настройка), Настройка.ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования, 0);
	//Геннадий <-
	
	РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
		
	// ++Отключено по Задача 3427
	//Ф = Новый ДвоичныеДанные(ПутьКФайлу);
	//
	//Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
	//
	//ТекД = ТекущаяДата();
	//
	//Наб = РегистрыСведений.ОтчетыКОтправкеРегламент.СоздатьНаборЗаписей();
	//
	//Наб.Отбор.ВидОтчета.Установить(Настройка.Отчет);
	//Наб.Отбор.НастройкаОтправки.Установить(Настройка);
	//наб.Отбор.ПериодФормирования.Установить(ТекД);
	//
	//Нов = наб.Добавить();
	//Нов.ПериодФормирования = ТекД;
	//Нов.ВыгрузкаXML = Хр;
	//Нов.GUID = Г;
	//Нов.НастройкаОтправки = Настройка;
	//Нов.ОтчетОтправлен = Отпр;
	//Нов.СписокПолучателей = Стр_;
	//Нов.ВидОтчета = Настройка.Отчет;
	//
	//Наб.Записать();
	// --Отключено по Задача 3427

	#КонецОбласти
	
КонецПроцедуры	


Процедура УстановитьСтатусРейса(Рейс, Статус) Экспорт
	ТекВр = ТекущаяДата();
	Наб = РегистрыСведений.СтатусыРейсов.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекВр);
	Наб.Отбор.Рейс.Установить(Рейс);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекВр;
	Нов.Рейс = Рейс;
	Нов.СтатусРейса = Статус;
	
	Наб.Записать();
КонецПроцедуры	

Функция ПолучитьСтатусРейса(Рейс, ДатаЗапроса) Экспорт
	Зап = Новый Запрос;
	зап.Текст = "ВЫБРАТЬ
	|	СтатусыРейсовСрезПоследних.СтатусРейса
	|ИЗ
	|	РегистрСведений.СтатусыРейсов.СрезПоследних(&ДатаЗапроса, ) КАК СтатусыРейсовСрезПоследних
	|ГДЕ
	|	СтатусыРейсовСрезПоследних.Рейс = &Рейс";
	
	Зап.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);			
	Зап.УстановитьПараметр("Рейс", Рейс);			
	
	Рез = Зап.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Возврат Рез.СтатусРейса;
	Иначе
		Возврат Справочники.СтатусыРейсов.ПустаяСсылка();
	КонецеСли;	
КонецФункции	

Процедура ОтправитьСМСПоРейсу(Рейс) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	АктивныйОператорСМСРассылкиСрезПоследних.ОператорСМСРассылки Как Оператор
	|ИЗ
	|	РегистрСведений.АктивныйОператорСМСРассылки.СрезПоследних(&ДатаЗапроса, ) КАК АктивныйОператорСМСРассылкиСрезПоследних";
	
	Зап.УстановитьПараметр("ДатаЗапроса", ТекущаяДата());
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Если Выб.Оператор = Справочники.ОператорыСМСРассылки.ProstorSMS Тогда
			ОтправитьСМСПоРейсуПростор(Рейс);
		ИначеЕсли Выб.Оператор = Справочники.ОператорыСМСРассылки.SMSC Тогда
			ОтправитьСМСПоРейсуSMSC(Рейс)
		КонецеСли;	
	КонецеСли;	
КонецПроцедуры	

Процедура ОтправитьСМСПоРейсуПростор(Рейс) Экспорт
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	АктивныеШаблоныСМСРассылокСрезПоследних.ШаблонСМСРассылки.Ссылка КАК Шаблон
	|ИЗ
	|	РегистрСведений.АктивныеШаблоныСМСРассылок.СрезПоследних КАК АктивныеШаблоныСМСРассылокСрезПоследних
	|ГДЕ
	|	АктивныеШаблоныСМСРассылокСрезПоследних.ТипСМСРассылки.Ссылка = ЗНАЧЕНИЕ(справочник.типысмсрассылок.РассылкаОбУехавшихЗаказах)";
	Рез = Зап.Выполнить().Выбрать();			
	
	Если Рез.Следующий() Тогда
		Сендер = Обработки.СМСРассылка.Создать();
		Сендер.ШаблонРассылки = Рез.Шаблон;
		Сендер.Оператор = Справочники.ОператорыСМСРассылки.ProstorSMS;
		Сендер.ДатаСбораДанных = ТекущаяДата();
		Сендер.Рейс = Рейс;
		Сендер.ПроинизиализироватьОбработку();
		Сендер.ОтправкаСМС();
	КонецеСли;
	
Конецпроцедуры	


Процедура ОтправитьСМСПоРейсуSMSC(Рейс) Экспорт
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	АктивныеШаблоныСМСРассылокСрезПоследних.ШаблонСМСРассылки.Ссылка КАК Шаблон
	|ИЗ
	|	РегистрСведений.АктивныеШаблоныСМСРассылок.СрезПоследних КАК АктивныеШаблоныСМСРассылокСрезПоследних
	|ГДЕ
	|	АктивныеШаблоныСМСРассылокСрезПоследних.ТипСМСРассылки.Ссылка = ЗНАЧЕНИЕ(справочник.типысмсрассылок.РассылкаОбУехавшихЗаказах)";
	Рез = Зап.Выполнить().Выбрать();			
	
	Если Рез.Следующий() Тогда
		Сендер = Обработки.SMSС.Создать();
		Сендер.ШаблонРассылки = Рез.Шаблон;
		Сендер.Оператор = Справочники.ОператорыСМСРассылки.SMSC;
		Сендер.ДатаСбораДанных = ТекущаяДата();//Рейс.ДатаНачала;
		Сендер.Рейс = Рейс;
		Ф = Сендер.ПолучитьФорму("Форма");
		
		Ф.ПроинициализироватьОбработку();
		Ф.ОтправитьСМС();
	КонецеСли;
	
Конецпроцедуры	

Функция ПолучитьТипЗаказа(Заказ) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	новаМестнаяДоставка.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ПО РеализацияТоваровУслуг.Номер = новаМестнаяДоставка.Номер
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Док";
	Зап.УстановитьПараметр("Док", Заказ);			
	
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Перечисления.ТипыЗаказов.Самовывоз;
	Иначе
		Возврат Перечисления.ТипыЗаказов.Доставка;
	конецеСли;	
КонецФункции	

Процедура ЗаписатьДопПараметрыЗаказа(Параметры) Экспорт
	Наб = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
	Наб.Отбор.Заказ.Установить(Параметры.Заказ);
	//Наб.Прочитать();
	
	Нов = Наб.Добавить();
	ЗаполнитьЗначенияСвойств(Нов, Параметры);
	Наб.Записать();
КонецПроцедуры	

#Область smv
Функция ВыборкаКомитентов(Родитель,КодНастройки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   НастройкиАвтоматическойОтправкиОтчетовКонтрагентыИсключения.Контрагент
	|ПОМЕСТИТЬ ВТ_Исключения
	|ИЗ
	|   Справочник.НастройкиАвтоматическойОтправкиОтчетов.КонтрагентыИсключения КАК НастройкиАвтоматическойОтправкиОтчетовКонтрагентыИсключения
	|ГДЕ
	|   НастройкиАвтоматическойОтправкиОтчетовКонтрагентыИсключения.Ссылка.Код = &КодНастройки
	|   И НастройкиАвтоматическойОтправкиОтчетовКонтрагентыИсключения.Отметка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|   Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|   Контрагенты.Родитель = &Родитель
	|   И НЕ Контрагенты.ЭтоГруппа
	|   И НЕ Контрагенты.Ссылка В
	|               (ВЫБРАТЬ
	|                   ВТ_Исключения.Контрагент
	|               ИЗ
	|                   ВТ_Исключения КАК ВТ_Исключения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   Контрагенты.Ссылка
	|ИЗ
	|   Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|   Контрагенты.Родитель В
	|           (ВЫБРАТЬ
	|               Контрагенты.Ссылка
	|           ИЗ
	|               Справочник.Контрагенты КАК Контрагенты
	|           ГДЕ
	|               Контрагенты.Родитель = &Родитель
	|               И Контрагенты.ЭтоГруппа)
	|   И НЕ Контрагенты.ЭтоГруппа
	|   И НЕ Контрагенты.Ссылка В
	|               (ВЫБРАТЬ
	|                   ВТ_Исключения.Контрагент
	|               ИЗ
	|                   ВТ_Исключения КАК ВТ_Исключения)";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("КодНастройки",КодНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции // ВыборкаКомитентов()

Функция ВыборкаКомитентовПоОбщемуОтчету(ОтчетОбъект, НачалоПериода,КонецПериода, КодОсновнойНастройки)
	
	НастройкаОбщегоОтчета = Справочники.НастройкиАвтоматическойОтправкиОбщихОтчетов.НайтиПоКоду(КодОсновнойНастройки); //"00000000010");
	МассивСсылок = ОтчетОбъект.ПолучитьАктуальныхКонтрагентовОтчета(НачалоПериода, КонецПериода, Неопределено, НастройкаОбщегоОтчета.КонтрагентыИсключения.ВыгрузитьКолонку("Контрагент"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&СписокКонтрагентов)";
	Запрос.УстановитьПараметр("СписокКонтрагентов", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции	

Функция ЭтоУслугаПоЗаказам(Артикул)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   УслугиПоЗаказам.Ссылка
	|ИЗ
	|   Справочник.УслугиПоЗаказам КАК УслугиПоЗаказам
	|ГДЕ
	|   УслугиПоЗаказам.Артикул = &Артикул
	|   И НЕ УслугиПоЗаказам.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции // ЭтоУслугаПоЗаказам()

Функция ПолучитьКонтрагентыИсключения(Настройка)
	
	СтрокиКонтрагентов = Настройка.КонтрагентыИсключения.НайтиСтроки(Новый Структура("Отметка", Истина));
	Если СтрокиКонтрагентов.Количество() Тогда
		СписокКонтрагентов = Новый СписокЗначений;
		Для Каждого СтрокаКонтрагента Из СтрокиКонтрагентов Цикл
			СписокКонтрагентов.Добавить(СтрокаКонтрагента.Контрагент);
		КонецЦикла;
		Возврат СписокКонтрагентов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Якурнов 08.10.2018 9:38:21
Функция ПолучитьКонтрагентыЦелевые(Настройка)
	
	СтрокиКонтрагентов = Настройка.КонтрагентыЦелевые.НайтиСтроки(Новый Структура("Отметка", Истина));
	Если СтрокиКонтрагентов.Количество() Тогда
		СписокКонтрагентов = Новый СписокЗначений;
		Для Каждого СтрокаКонтрагента Из СтрокиКонтрагентов Цикл
			СписокКонтрагентов.Добавить(СтрокаКонтрагента.Контрагент);
		КонецЦикла;
		Возврат СписокКонтрагентов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция  ПроверитьСтрокупоШаблону(Строка,Шаблон) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ВЫБОР
	|       КОГДА &Строка ПОДОБНО &Шаблон
	|           ТОГДА ИСТИНА
	|       ИНАЧЕ ЛОЖЬ
	|   КОНЕЦ КАК Результат";
	
	Запрос.УстановитьПараметр("Строка", Строка);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.Результат;
КонецФункции

//Только начало, надо допилить ее по нормальному
Функция ОтформатироватьСтроку(Строка,Шаблон) Экспорт
	Разделитель = Прав(Шаблон,1);
	НомерСимвола = Найти(Строка,Разделитель);
	Возврат Лев(Строка,НомерСимвола-1);
КонецФункции
#КонецОбласти


Процедура ЗагрузкаИОбновлениеРТ() Экспорт
	
	
	ДатаИзмененияТерминала = Дата("20120101");
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяДатаЗагрузкиРТ");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаИзмененияТерминала);
	ДатаИзмененияТерминала = Дата(ДатаИзмененияТерминала);
	
	Тест = Ложь;
	Если Найти(Константы.БазаСД.Получить(), "test") > 0 Тогда
		Тест = Истина;
	КонецеСли;	
	
	
	Если Тест Тогда
		Прокси = WSСсылки.FrontDeliveryTest.СоздатьWSПрокси("strizh-logistic.ru/services", "Service1C", "BasicHttpBinding_IService1C");
	Иначе	
		Прокси = WSСсылки.FrontDelivery.СоздатьWSПрокси("http://tempuri.org/", "Service1C", "BasicHttpBinding_IService1C");
	КонецеСли;	
	
	Если ЗначениеЗаполнено(ДатаИзмененияТерминала) Тогда
		СписокТерминалов = Прокси.GetModifiedTerminals(ДатаИзмененияТерминала);
	Иначе
		Возврат;
	КонецеСли;	
	
	Для Каждого Тек Из СписокТерминалов.Terminal Цикл
		НайТ = Справочники.РегиональныеТерминалы.НайтиПоКоду(Тек.TerminalId);
		Если НайТ.Пустая() Тогда
			Терминал = Справочники.РегиональныеТерминалы.СоздатьЭлемент();
			Терминал.Код = Тек.TerminalId;
		Иначе
			Терминал = НайТ.ПолучитьОбъект();
		КонецеСли;	
		
		Терминал.КодТерминала = Тек.Code;
		Терминал.Город = Тек.City;
		Терминал.Адрес = Тек.Address;
		Терминал.Доставка = Тек.IsCourierDeliveryEnabled;
		Терминал.Самовывоз = Тек.IsSelfDeliveryEnabled;
		Терминал.ДнейОт = Тек.DeliveryDurationFrom;
		Терминал.ДнейДо = Тек.DeliveryDurationTo;
		Терминал.Активен = Тек.IsActive;
		
		Терминал.Записать();
	КонецЦикла;	
	
	НоваяДата = ТекущаяДата();
	
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Запись.Отбор.Ключ.Установить("ПоследняяДатаЗагрузкиРТ");
	Запись.Прочитать();
	Если Запись.Количество() = 0 Тогда
		НоваяЗапись = Запись.Добавить();
	Иначе
		НоваяЗапись = Запись[0];
	КонецЕсли;
	НоваяЗапись.Ключ = "ПоследняяДатаЗагрузкиРТ";
	НоваяЗапись.Значение = ДатаВСтроку(НоваяДата);
	Попытка
		Запись.Записать();
		//ЗаписатьЛог(9, "Дата загрузки обновлена: " + Строка(НоваяЗапись.Значение));
	Исключение
		//ЗаписатьЛог(9, "Ошибка обновления границы загрузки региональных терминалов. " + ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры		

//+++ БАО 31.08.2017 №1762
Функция ЗагрузитьДанныеИзФайлаExcelПоШаблону_Техномарт(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено)
	
	
	Перем ИтВес, Таб2;
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	ТабДок = Новый ТабличныйДокумент;	
	
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_694") Тогда
		Попытка
			ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе		
		
		// МАС - 15.06.2018 - № --->> 
		//Если Не ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
		//	Возврат Ложь;
		//КонецЕсли;	
		Попытка
			ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
		Исключение
			Возврат Ложь;
		КонецПопытки;
		// <<--- МАС			
	КонецЕсли;	
	
	
	//Если Константы.ЭтоТестоваяБД.Получить() Тогда
	//	login = "12345678";
	//Иначе 	
	login = "Technomart";
	//КонецЕсли;	
	
	
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	ТабЗаказов.Колонки.Добавить("Адрес");
	ТабЗаказов.Колонки.Добавить("ВесОбщий");
	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
	ТабЗаказов.Колонки.Добавить("Итого");
	ТабЗаказов.Колонки.Добавить("КодТовара");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Количество");
	ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("Район");
	ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	ТабЗаказов.Колонки.Добавить("ТелефонГородской");
	ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	ТабЗаказов.Колонки.Добавить("ФИО");
	ТабЗаказов.Колонки.Добавить("Штрихкод");
	ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("УлицаДоставки");
	ТабЗаказов.Колонки.Добавить("ГородДоставки");
	ТабЗаказов.Колонки.Добавить("КатегорияДоставки");
	// МАС - 07.07.2017 - № --->> 
	ТабЗаказов.Колонки.Добавить("НДСДоставка");
	ТабЗаказов.Колонки.Добавить("НДСТовар");
	// <<--- МАС 
	
	ПослНомер = "";
	
	ПроливаемыеПоля = Новый Соответствие;
	
	
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Нов = ТабЗаказов.Добавить();
		Для СчКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				НайКолонка = Шаблон.Поля.Найти(СчКолонок, "Порядок");                               			
			Иначе
				НайКолонка = Шаблон.Поля.Найти(ТабДок.Область("R" + Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст, "Наименование");                               			
			КонецеСли;	
			
			
			Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
			Если НайКолонка = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			
			Нов[НайКолонка.Поле.Наименование] = Значение;
			
			Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
				НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
				Если НайденноеСоответствие <> Неопределено Тогда
					Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
				КонецеСли;	
			КонецеСли;	
			
			
			Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПослНомер = Значение;
				ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
					Нов[НайКолонка.Поле.Наименование] = ПослНомер;
				КонецеСли;	
			ИначеЕсли НайКолонка.ПроливатьЗначенияНаНеЗаполненныеЗначения Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПроливаемыеПоля.Вставить(НайКолонка.Поле.Наименование, Значение);
				ИначеЕсли ЗначениеЗаполнено(ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование)) Тогда
					Если НайКолонка.Поле.Наименование = "ИнтервалДоставки" ИЛИ НайКолонка.Поле.Наименование = "Отд"  Тогда
						Нов[НайКолонка.Поле.Наименование] = ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование);
					Иначе
						//Если ЗначениеЗаполнено(ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование]) Тогда
						Если ТабЗаказов[ТабЗаказов.Индекс(Нов)].НомерЗаказа = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1].НомерЗаказа Тогда 
							Нов[НайКолонка.Поле.Наименование]  = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование];     
						КонецЕсли;
						//КонецеСли;
					КонецЕсли;
				КонецеСли;					
			КонецеСли;	
		КонецЦикла;	
	КонецЦикла;
	
	//Серегин М.В. 20.05.2015 18:09:12 
	Для каждого Стр Из ТабЗаказов Цикл
		АртикулУслуги = СтрЗаменить(Стр.КодТовара,Символ(160),"");
		НомерЗаказа = СтрЗаменить(Стр.НомерЗаказа,Символ(160),"");
		Если ЗначениеЗаполнено(АртикулУслуги) Тогда 
			НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул",АртикулУслуги);
			Если ЗначениеЗаполнено(НайденаяУслуга) И НЕ НайденаяУслуга.ПометкаУдаления Тогда
				НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(НомерЗаказа); 
				НаборЗаписей.Отбор.Услуга.Установить(НайденаяУслуга);  
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
				Запись = НаборЗаписей.Добавить();
				Запись.Период = ТекущаяДата();
				Запись.НомерВнешнегоЗаказа = НомерЗаказа;
				Запись.Услуга = НайденаяУслуга;
				Запись.Контрагент = Контрагент;
				Запись.Стоимость = Стр.ОбщаяЦена;
				Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзПочты;
				НаборЗаписей.Записать();
				//ТабЗаказов.Удалить(Стр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	//Серегин М.В. 20.05.2015 18:09:14 
	
	// таблица собрана
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	ТекНом = "-";
	КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Контрагент.Код),"_");
	КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
	
	ТабОшибок = Новый ТаблицаЗначений;
	ТабОшибок.Колонки.Добавить("Номер");
	ТабОшибок.Колонки.Добавить("Ошибка");
	ТабОшибок.Колонки.Добавить("Кол");
	
	ТабЗагруженных = Новый ТаблицаЗначений;
	ТабЗагруженных.Колонки.Добавить("Номер");
	ТабЗагруженных.Колонки.Добавить("НомерНаш");
	
	ЗаказНеЗагружаем = "";
	
	
	ТабСум = ТабЗаказов.Скопировать();
	ТабСум.Колонки.добавить("Сумма");
	Для Каждого Тек Из ТабСум Цикл
		//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");
		Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
		Попытка		
			Тек.Сумма = Число(Тек.Количество) * Число(Тек.СтоимостьТовара);       
		Исключение
			Тек.Сумма = 0;
		КонецПопытки;	
	КонецЦикла;	
	
	ТабСум.Свернуть("НомерЗаказа", "Сумма");
	
	//Серегин М.В. 10.07.2015 17:44:11 новый костыль )))
	ТабЗаказов.Колонки.Добавить("Дубль");
	Для Каждого Тек Из ТабЗаказов Цикл  
		Если Шаблон.БезДублей Тогда //делаем проверку на наличие заказа в админке по внешнему номеру 
			
			НайИтог = СтрНайти(Тек.НомерЗаказа, "Итого");
			Если НайИтог > 0 Тогда
				Тек.Дубль = Ложь;
				Продолжить;
			КонецЕсли;
			
			// -- новый код		
			Рез = mas.ВнешнийНомерЕстьВАдминке(СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")), Контрагент.Код);
			Если Рез Тогда
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				Тек.Дубль = Истина;
			Иначе
				Тек.Дубль = Ложь;
			КонецЕсли;
			
			//Стр = "SELECT orderIDImport from _order WHERE orderIDImport =" +"'"+Формат(Число(Тек.НомерЗаказа), "ЧГ=")+"'";
			//ТабДублей = smv.СформироватьТаблицуЗначенийИзДанныхSQL(Стр);
			//Если ТабДублей.Количество() >0 Тогда
			//    НовОш = ТабОшибок.Добавить();
			//    НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			//    НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
			//    ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			//    Тек.Дубль = Истина;
			//Иначе
			//    Тек.Дубль = Ложь;
			//КонецЕсли;
		Иначе
			Тек.Дубль = Ложь;
		КонецЕсли;
	КонецЦикла;
	//Серегин М.В. 10.07.2015 17:44:18 
	
	
	//Серегин М.В. 17.07.2015 13:31:09 для отправки категорий доставки
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_256 ") Тогда
		ТаблицаКатегорииДоставки = Новый ТаблицаЗначений;
		ТаблицаКатегорииДоставки.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов ("Строка"));
		ТаблицаКатегорииДоставки.Колонки.Добавить("КатегорияДоставки", Новый ОписаниеТипов ("Строка"));
		
		Для каждого СтрТ Из ТабЗаказов Цикл
			АртикулУслуги = СтрЗаменить(СтрТ.КодТовара,Символ(160),"");
			Если ЗначениеЗаполнено(АртикулУслуги) Тогда
				Если НЕ ЭтоУслугаПоЗаказам(АртикулУслуги) Тогда  
					СтрокаТКД = ТаблицаКатегорииДоставки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТКД,СтрТ);
					СтрокаТКД.НомерЗаказа = СтрЗаменить(СтрТ.НомерЗаказа,Символ(160),"");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТаблицаКатегорииДоставки.Свернуть("НомерЗаказа,КатегорияДоставки");
	КонецЕсли;    
	
	СтоимостьДоставкиИтог = 0;
	НДСДоставка = 20;
	
	СоответсвиеЗаказовИТоваров = Новый Соответствие;	
	Для Каждого Тек Из ТабЗаказов Цикл 
		Если  Тек.НаименованиеТовара = "Доставка заказа" Тогда
			СоответсвиеЗаказовИТоваров.Вставить(Тек.НомерЗаказа, СтрЗаменить(Тек.СтоимостьТовара, Символы.НПП,""));
		КонецЕсли;	
	КонецЦикла;	
	
	
	
	Для Каждого Тек Из ТабЗаказов Цикл  
		
		СтрокаДоставки = Ложь;
		
		Если Тек.Дубль Тогда
			Продолжить;   
		КонецЕсли;
		
		Если  Тек.НаименованиеТовара = "Доставка заказа" Тогда
			Продолжить;
		КонецЕсли;	
		
		
		
		
		// строка Итого
		НайИтог = СтрНайти(Тек.НомерЗаказа, "Итого");
		Если НайИтог > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Тек.НДСДоставка) Тогда
			Попытка			
				НДСДоставка = Число(Тек.НДСДоставка);
			Исключение			
				НДСДоставка = 20;
			КонецПопытки;		
		КонецЕсли;
		
		
		//строка с доставкой
		Если НЕ ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
			Продолжить;			
		КонецЕсли;
		
		
		Попытка
			Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
			//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");   //           !!!!!!!!!!!!!!!!!!!!!!!!
		Исключение
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		//+Степанов
		Если СтрНайти(Тек.НомерЗаказа," ") <> 0 Тогда
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = "Номер заказа содержит пробелы. Заказ создан не будет.";
			Продолжить;	
		КонецЕсли;	
		//-Степанов
		
		Если СокрЛП(Тек.НомерЗаказа) = ЗаказНеЗагружаем Тогда
			Продолжить;
		КонецеСли;	
		
		СтрокаБезОшибок = ПроверитьСтрокуНаЗаполненность(Тек, Шаблон);
		Игнорировать = ПроверитьСтрокуНаИгнорирование(Тек, Шаблон);
		Если Игнорировать Тогда
			Продолжить;
		КонецеСли;	
		
		Если СтрокаБезОшибок <> Истина Тогда
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = СтрокаБезОшибок;
			ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			Продолжить;
		КонецеСли;	
		
		
		Попытка
			
			Если ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
				Если ТипЗнч(Тек.СтоимостьТовара) = Тип("Строка") Тогда
					//Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, ",", ".");
					Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, " ", "");
					Тек.СтоимостьТовара = Число(Тек.СтоимостьТовара);
				КонецеСли;	
			КонецеСли;	
			
			//Если Не ЗначениеЗаполнено(Тек.Адрес) Тогда
			//	Тек.Адрес = "г " + Тек.ГородДоставки + ",ул " + Тек.УлицаДоставки;
			//Иначе
			//	Тек.Адрес = "";
			//КонецЕСли;	
			
			
			Если Не ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
				Тек.СтоимостьДоставки = 0;
			Иначе
				Тек.СтоимостьДоставки = Формат(Окр(Число(Тек.СтоимостьДоставки)), "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕСли;	
			
			//Если ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда		
			//	СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + Тек.СтоимостьДоставки;	
			//КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
				Тек.ВесОбщий = 0;
			Иначе
				Тек.ВесОбщий = Формат(Число(Тек.ВесОбщий), "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕСли;	
			
			
			
			//Если Не ЗначениеЗаполнено(Тек.ОбщаяЦена) Тогда
			//	Тек.СтоимостьТовара = 0;
			//Иначе
			//	Тек.СтоимостьТовара = Формат(Окр(Число(Тек.ОбщаяЦена/Тек.Количество)), "ЧРД=.; ЧН=0; ЧГ=");
			//КонецеСли;
			
			
			Если Не ЗначениеЗаполнено(Тек.Итого) Тогда
				Тек.Итого = 0;
			Иначе	
				Попытка				
					Тек.Итого = Число(Тек.Итого);					
				Исключение			
				КонецПопытки;
				
			КонецеСли;
			
			Попытка
				Тек.КодТовара = Формат(Число(Тек.КодТовара), "ЧГ=");
			Исключение
				
			КонецПопытки;
			Попытка
				Тек.ТелефонМобильный = Формат(Число(Тек.ТелефонМобильный), "ЧГ=");
			Исключение
				
			КонецПопытки;
			Попытка
				
				Тек.ТелефонГородской = Формат(Число(Тек.ТелефонГородской), "ЧГ=");
			Исключение
				
			КонецПопытки;	
			Если ЗначениеЗаполнено(Тек.ТелефонГородской) Тогда
				Тек.ТелефонМобильный = Тек.ТелефонМобильный + ";" + Тек.ТелефонГородской;
			КонецеСли;
			
			Если ТипЗнч(Тек.ДатаДоставки) = Тип("Строка") Тогда
				Тек.ДатаДоставки = ИзСтрокиВДату(Тек.ДатаДоставки);
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
				Тек.ДатаДоставки = ТекущаяДата() + 86400;
			КонецеСли;	
			
			Тек.ДатаДоставки = СтрЗаменить(Тек.ДатаДоставки,  " 0:00:00", "");;
			
			
			Попытка
				Тек.Количество = Формат(Число(Тек.Количество), "ЧРД=.; ЧН=0; ЧГ=");
			Исключение
				Тек.Количество = 1;			
			КонецПопытки;
			
			
			Если Не ЗначениеЗаполнено(Тек.ИнтервалДоставки) Тогда
				Тек.ИнтервалДоставки = "09-20";
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
				Тек.ВесОбщий = 0;
			КонецеСли;	
			
			// МАС - 07.07.2017 - № --->> 		
			Если НЕ ЗначениеЗаполнено(Тек.НДСТовар) Тогда		
				Тек.НДСТовар = 20;			
			Иначе
				Попытка
					Тек.НДСТовар = Число(Тек.НДСТовар);	
				Исключение		
				КонецПопытки;
			КонецЕсли;
			// <<--- МАС 
			
			
			
			Если ТекНом <> Тек.НомерЗаказа Тогда
				// создаём новый заказ
				
				Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем И Таб2 <> Неопределено Тогда
					
					//фиксация выгрузки
					От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
					//фиксация выгрузки окончание
					
					
					Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
					R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
					//ТабК[0].tariffCategoryId_Ч
					Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
					Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					
					Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
						НовЗагр = ТабЗагруженных.Добавить();
						НовЗагр.Номер = ТекНом;
						НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
					КонецеСли;	
				КонецеСли;	
				
				ТекНом = Тек.НомерЗаказа;
				ИтВес = 0;
				
				
				
				//ВремяС = Лев(СокрЛП(ИнтД[0]), 2);                 //           !!!!!!!!!!!!!!!!!!!!!!!!
				
				//ВремяС = Число(СтрЗаменить(ВремяС, "'", ""));    //           !!!!!!!!!!!!!!!!!!!!!!!!
				//
				//ВремяПо = Число(Лев(СокрЛП(ИнтД[1]), 2));       //           !!!!!!!!!!!!!!!!!!!!!!!!
				
				Интервал = СокрЛП(Тек.ИнтервалДоставки);
				Интервал = СтрЗаменить(Интервал, "С", "");
				Интервал = СтрЗаменить(Интервал, "с", "");
				Интервал = СтрЗаменить(Интервал, "До", "-");
				Интервал = СтрЗаменить(Интервал, "до", "-");
				Интервал = СтрЗаменить(Интервал, "ДО", "-");
				Интервал = СтрЗаменить(Интервал, "по", "-");
				Интервал = СтрЗаменить(Интервал, "ПО", "-");
				Интервал = СтрЗаменить(Интервал, " ", "");
				
				
				ИнтД = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Интервал,"-");
				
				Если ИнтД.Количество() Тогда				
					ВремяС = СокрЛП(ИнтД[0]);	
					Если ИнтД.Количество() > 1 Тогда		
						ВремяПо = СокрЛП(ИнтД[1]);						
					КонецЕсли;			
				КонецЕсли;			
				
				
				ТипОплаты = "1";
				
				// Тип оплаты
				
				Если Найти(НРег(Тек.ТипОплатыEnter), "оплачено") <> 0 Тогда	
					ТипОплаты = "7";
				ИначеЕсли Найти(НРег(Тек.ТипОплатыEnter), "наличные деньги")  <> 0 Тогда
					ТипОплаты = "1";
				ИначеЕсли Найти(НРег(Тек.ТипОплатыEnter), "безнал") <> 0 Тогда	
					ТипОплаты = "4";
				Иначе
					НовОш = ТабОшибок.Добавить();
					НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
					НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
					Продолжить;
				КонецеСли;	
				
				
				НаборПользователь = евген.ЗапросКИнтернетМагазину("declare @tmp table (userid int, userAddressID int)
				|insert into @tmp
				|exec dbo.pb_UpdateUser null, '" + Тек.ФИО + "', null, null, '" + СокрЛП(Тек.ТелефонМобильный) + "', '" + СокрЛП(Тек.ТелефонГородской) + "','" + СокрЛП(Тек.Адрес) + "', null," + Строка(КодКонтр) + ", null, null, null, null, null, null, null, null, null, null, null, null, null, null,'" + ПараметрыСеанса.ТекущийПользователь + "', null
				| select * from @tmp", Соединение);
				Таб1 = Евген.СоздатьТаблицу(НаборПользователь, "userid_Ч, userAddressID_Ч");
				UserId = Формат(Таб1[0].userid_Ч, "ЧГ=");
				userAddressID = Формат(Таб1[0].userAddressID_Ч, "ЧГ=");
				
				СеттингИд = "0";
				
				//НашНом = "";
				//Реал = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", СокрЛП(Тек.НомерЗаказа));
				//Если Не Реал.Пустая() Тогда
				//	НашНом = СокрЛП(Реал.Номер);
				//КонецеСли;	
				
				Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + СеттингИд + ",0," + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
				R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
				ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
				
				
				//Стоимость доставки
				НайДоставка = ТабЗаказов.НайтиСтроки(Новый Структура("НомерЗаказа", Тек.НомерЗаказа));
				СтоимостьДоставкиИтог = 0;
				//НДСДоставка = NULL;
				Для Каждого НайСтр Из НайДоставка Цикл		
					Если НЕ ЗначениеЗаполнено(НайСтр.СтоимостьТовара) И СтрНайти(НайСтр.НаименованиеТовара, "Доставка товара") И ЗначениеЗаполнено(НайСтр.СтоимостьДоставки) Тогда
						СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + НайСтр.СтоимостьДоставки;				
						//Если ЗначениеЗаполнено(НайСтр.НДСДоставка) Тогда			
						//	НДСДоставка = НайСтр.НДСДоставка;	
						//КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				
				СтоимостьДоставкиИтог = СоответсвиеЗаказовИТоваров.Получить(Тек.НомерЗаказа);
				
				Если  СтоимостьДоставкиИтог = Неопределено Тогда
					СтоимостьДоставкиИтог = 0;
				КонецЕсли;	
				
				
				Если СокрЛП(Контрагент.Код) = "Shop_256" Или СокрЛП(Контрагент.Код) = "Shop_316" Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|   ВЫРАЗИТЬ(ТаблицаКатегорииДоставки.НомерЗаказа КАК СТРОКА(25)) КАК НомерЗаказа,
					|   ВЫРАЗИТЬ(ТаблицаКатегорииДоставки.КатегорияДоставки КАК СТРОКА(2)) КАК КатегорияДоставки
					|ПОМЕСТИТЬ ВТ_ТаблицаКД
					|ИЗ
					|   &ТаблицаКатегорииДоставки КАК ТаблицаКатегорииДоставки
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|   МАКСИМУМ(ВЫБОР
					|           КОГДА ВТ_ТаблицаКД.КатегорияДоставки = ""36""
					|                   ИЛИ ВТ_ТаблицаКД.КатегорияДоставки = ""39""
					|               ТОГДА 5
					|           ИНАЧЕ 1
					|       КОНЕЦ) КАК КатегорияДоставки
					|ИЗ
					|   ВТ_ТаблицаКД КАК ВТ_ТаблицаКД
					|ГДЕ
					|   ВТ_ТаблицаКД.НомерЗаказа = &НомерЗаказа";
					
					Запрос.УстановитьПараметр("ТаблицаКатегорииДоставки",ТаблицаКатегорииДоставки);
					Запрос.УстановитьПараметр("НомерЗаказа", Тек.НомерЗаказа);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ВыборкаДетальныеЗаписи.КатегорияДоставки = NULL Тогда
							КатегорияДоставки  = 2;
						Иначе
							КатегорияДоставки = ВыборкаДетальныеЗаписи.КатегорияДоставки;
						КонецЕсли;
					КонецЦикла;
					КатегорияДоставки = 5;
					//Если НашНом = "" Тогда
					////Серегин М.В. 17.07.2015 11:00:46 старый код
					//НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);			
					//Серегин М.В. 17.07.2015 11:00:39 новый код
					
					// МАС - 01.01.2017 - № --->> 
					НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(СтоимостьДоставкиИтог, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + КатегорияДоставки + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1,0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6,null," + Число(НДСДоставка) + " select * from @tmp", Соединение);				 
					//НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(СтоимостьДоставкиИтог, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + КатегорияДоставки + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);			
					// <<--- МАС
				Иначе
					// МАС - 07.07.2017 - №1224 --->> 
					НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(СтоимостьДоставкиИтог, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''") + "',null,null,'" + Формат(ВремяС, "ЧН=0; ЧГ=") + "','" + Формат(ВремяПо, "ЧН=0; ЧГ=") + "','"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].weightCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1,0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6,null," + Число(НДСДоставка) + " select * from @tmp", Соединение);	 
					//НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(СтоимостьДоставкиИтог, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''") + "',null,null,'" + Формат(ВремяС, "ЧН=0; ЧГ=") + "','" + Формат(ВремяПо, "ЧН=0; ЧГ=") + "','"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].weightCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);
					// <<--- МАС
					
					//	НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder " + СокрЛП(НашНом) + ", " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);			
				КонецеСли;	
				Таб2 = Евген.СоздатьТаблицу(НаборЗаказ, "Orderid_Ч");
				
				СтоимостьДоставкиИтог = 0;
				
			КонецеСли;		
			
			//ВесТовара = Формат(Окр(Тек.ВесОбщий/Тек.Количество, 3), "ЧРД=.; ЧН=0; ЧГ=");
			
			СтоимостьТовара = 0;
			Если ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.Количество) Тогда
				СтоимостьТовара = Окр(Тек.СтоимостьТовара/Тек.Количество);	
			КонецЕсли;
			
			
			ВесТовара = 0;
			Тек.НаименованиеТовара = СтрЗаменить(Тек.НаименованиеТовара, "'", "");
			евген.ЗапросКИнтернетМагазину("                                                                                                                                                                                                                       
			|exec dbo.pb_AddItemToOrder " + Формат(Таб2[0].OrderId_Ч, "ЧГ=") + ",'" + Тек.НаименованиеТовара + "','" + Тек.Артикул + "'," + Формат(Тек.Количество, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + Формат(СтоимостьТовара, "ЧРД=.; ЧН=0; ЧГ=") + ",'" + Тек.КодТовара + "'," + Строка(ВесТовара) + ",0,0,0,0,null,null,null,null," + Число(Тек.НДСТовар), Соединение);
			ИтВес = Число(Тек.ВесОбщий);
			
			СтрШК = СтрЗаменить(Тек.Штрихкод, " ", "");
			СтрШК = СтрЗаменить(СтрШК, Символы.НПП, "");
			
			СтрШК = "insert into @tmp VALUES (1,'" + СтрШК + "')";
			
			
			
			РезультатЗапроса = евген.ЗапросКИнтернетМагазину("declare @tmp [dbo].[TPieceBarcode] " + СтрШК + " exec dbo.service_setOrderBarcodes
			|	@orderId	= " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=") + "
			|	,@login			= '" + login + "'   
			|	,@orderBarcodes	= @tmp", Соединение);
			
			
		Исключение
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = ОписаниеОшибки();
			ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;	
	
	
	Попытка
		Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
			
			//Если НЕ ЗначениеЗаполнено(Тек.ВесОбщий) Тогда	
			//	Тек.ВесОбщий = 0;			
			//КонецЕсли;
			
			//фиксация выгрузки
			От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
			//фиксация выгрузки окончание
			
			
			Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
			R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
			//ТабК[0].tariffCategoryId_Ч
			Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч, "ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
			Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			
			Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
				НовЗагр = ТабЗагруженных.Добавить();
				НовЗагр.Номер = ТекНом;
				НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
			КонецеСли;	
		КонецеСли;
	Исключение
		НовОш = ТабОшибок.Добавить();
		НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
		НовОш.Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
//--- БАО 31.08.2017 №1762

Функция ЗагрузитьДанныеИзФайлаExcelПоШаблону_Новый(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено)
	
	
	Перем ИтВес, Таб2;
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	ТабДок = Новый ТабличныйДокумент;	
	
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_694") Тогда
		Попытка
			ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе	
		
		// МАС - 15.06.2018 - № --->> 
		//Если Не ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		Попытка
			ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
		Исключение
			Возврат Ложь;
		КонецПопытки;
		// <<--- МАС			
	КонецЕсли;	
	
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	ТабЗаказов.Колонки.Добавить("Адрес");
	ТабЗаказов.Колонки.Добавить("ВесОбщий");
	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
	ТабЗаказов.Колонки.Добавить("Итого");
	ТабЗаказов.Колонки.Добавить("КодТовара");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Количество");
	ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("Район");
	ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	ТабЗаказов.Колонки.Добавить("ТелефонГородской");
	ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	ТабЗаказов.Колонки.Добавить("ФИО");
	ТабЗаказов.Колонки.Добавить("Штрихкод");
	ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("УлицаДоставки");
	ТабЗаказов.Колонки.Добавить("ГородДоставки");
	ТабЗаказов.Колонки.Добавить("КатегорияДоставки");
	// МАС - 07.07.2017 - № --->> 
	ТабЗаказов.Колонки.Добавить("НДСДоставка");
	ТабЗаказов.Колонки.Добавить("НДСТовар");
	// <<--- МАС 
	
	ПослНомер = "";
	
	ПроливаемыеПоля = Новый Соответствие;
	
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Нов = ТабЗаказов.Добавить();
		Для СчКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				НайКолонка = Шаблон.Поля.Найти(СчКолонок, "Порядок");                               			
			Иначе
				НайКолонка = Шаблон.Поля.Найти(ТабДок.Область("R" + Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст, "Наименование");                               			
			КонецеСли;	
			
			
			Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
			Если НайКолонка = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			
			Нов[НайКолонка.Поле.Наименование] = Значение;
			
			Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
				НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
				Если НайденноеСоответствие <> Неопределено Тогда
					Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
				КонецеСли;	
			КонецеСли;	
			
			
			Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПослНомер = Значение;
				ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
					Нов[НайКолонка.Поле.Наименование] = ПослНомер;
				КонецеСли;	
			ИначеЕсли НайКолонка.ПроливатьЗначенияНаНеЗаполненныеЗначения Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПроливаемыеПоля.Вставить(НайКолонка.Поле.Наименование, Значение);
				ИначеЕсли ЗначениеЗаполнено(ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование)) Тогда
					Если НайКолонка.Поле.Наименование = "ИнтервалДоставки" ИЛИ НайКолонка.Поле.Наименование = "Отд"  Тогда
						Нов[НайКолонка.Поле.Наименование] = ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование);
					Иначе
						//Если ЗначениеЗаполнено(ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование]) Тогда
						Если ТабЗаказов[ТабЗаказов.Индекс(Нов)].НомерЗаказа = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1].НомерЗаказа Тогда 
							Нов[НайКолонка.Поле.Наименование]  = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование];     
						КонецЕсли;
						//КонецеСли;
					КонецЕсли;
				КонецеСли;					
			КонецеСли;	
		КонецЦикла;	
	КонецЦикла;
	
	//Серегин М.В. 20.05.2015 18:09:12 
	Для каждого Стр Из ТабЗаказов Цикл
		АртикулУслуги = СтрЗаменить(Стр.КодТовара,Символ(160),"");
		НомерЗаказа = СтрЗаменить(Стр.НомерЗаказа,Символ(160),"");
		Если ЗначениеЗаполнено(АртикулУслуги) Тогда 
			НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул",АртикулУслуги);
			Если ЗначениеЗаполнено(НайденаяУслуга) И НЕ НайденаяУслуга.ПометкаУдаления Тогда
				НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(НомерЗаказа); 
				НаборЗаписей.Отбор.Услуга.Установить(НайденаяУслуга);  
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
				Запись = НаборЗаписей.Добавить();
				Запись.Период = ТекущаяДата();
				Запись.НомерВнешнегоЗаказа = НомерЗаказа;
				Запись.Услуга = НайденаяУслуга;
				Запись.Контрагент = Контрагент;
				Запись.Стоимость = Стр.ОбщаяЦена;
				Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзПочты;
				НаборЗаписей.Записать();
				//ТабЗаказов.Удалить(Стр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	//Серегин М.В. 20.05.2015 18:09:14 
	
	// таблица собрана
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	ТекНом = "-";
	КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Контрагент.Код),"_");
	КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
	
	ТабОшибок = Новый ТаблицаЗначений;
	ТабОшибок.Колонки.Добавить("Номер");
	ТабОшибок.Колонки.Добавить("Ошибка");
	ТабОшибок.Колонки.Добавить("Кол");
	
	ТабЗагруженных = Новый ТаблицаЗначений;
	ТабЗагруженных.Колонки.Добавить("Номер");
	ТабЗагруженных.Колонки.Добавить("НомерНаш");
	
	ЗаказНеЗагружаем = "";
	
	
	ТабСум = ТабЗаказов.Скопировать();
	ТабСум.Колонки.добавить("Сумма");
	Для Каждого Тек Из ТабСум Цикл
		//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");
		Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
		Попытка		
			Тек.Сумма = Число(Тек.Количество) * Число(Тек.СтоимостьТовара);       
		Исключение
			Тек.Сумма = 0;
		КонецПопытки;	
	КонецЦикла;	
	
	ТабСум.Свернуть("НомерЗаказа", "Сумма");
	
	//Серегин М.В. 10.07.2015 17:44:11 новый костыль )))
	ТабЗаказов.Колонки.Добавить("Дубль");
	Для Каждого Тек Из ТабЗаказов Цикл  
		Если Шаблон.БезДублей Тогда //делаем проверку на наличие заказа в админке по внешнему номеру 
			
			НайИтог = СтрНайти(Тек.НомерЗаказа, "Итого");
			Если НайИтог > 0 Тогда
				Тек.Дубль = Ложь;
				Продолжить;
			КонецЕсли;
			
			// -- новый код		
			Рез = mas.ВнешнийНомерЕстьВАдминке(СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")), Контрагент.Код);
			Если Рез Тогда
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				Тек.Дубль = Истина;
			Иначе
				Тек.Дубль = Ложь;
			КонецЕсли;
			
			//Стр = "SELECT orderIDImport from _order WHERE orderIDImport =" +"'"+Формат(Число(Тек.НомерЗаказа), "ЧГ=")+"'";
			//ТабДублей = smv.СформироватьТаблицуЗначенийИзДанныхSQL(Стр);
			//Если ТабДублей.Количество() >0 Тогда
			//    НовОш = ТабОшибок.Добавить();
			//    НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			//    НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
			//    ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			//    Тек.Дубль = Истина;
			//Иначе
			//    Тек.Дубль = Ложь;
			//КонецЕсли;
		Иначе
			Тек.Дубль = Ложь;
		КонецЕсли;
	КонецЦикла;
	//Серегин М.В. 10.07.2015 17:44:18 
	
	
	//Серегин М.В. 17.07.2015 13:31:09 для отправки категорий доставки
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_256 ") Тогда
		ТаблицаКатегорииДоставки = Новый ТаблицаЗначений;
		ТаблицаКатегорииДоставки.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов ("Строка"));
		ТаблицаКатегорииДоставки.Колонки.Добавить("КатегорияДоставки", Новый ОписаниеТипов ("Строка"));
		
		Для каждого СтрТ Из ТабЗаказов Цикл
			АртикулУслуги = СтрЗаменить(СтрТ.КодТовара,Символ(160),"");
			Если ЗначениеЗаполнено(АртикулУслуги) Тогда
				Если НЕ ЭтоУслугаПоЗаказам(АртикулУслуги) Тогда  
					СтрокаТКД = ТаблицаКатегорииДоставки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТКД,СтрТ);
					СтрокаТКД.НомерЗаказа = СтрЗаменить(СтрТ.НомерЗаказа,Символ(160),"");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТаблицаКатегорииДоставки.Свернуть("НомерЗаказа,КатегорияДоставки");
	КонецЕсли;    
	
	СтоимостьДоставкиИтог = 0;
	НДСДоставка = 20;
	
	Для Каждого Тек Из ТабЗаказов Цикл  
		
		
		СтрокаДоставки = Ложь;
		
		Если Тек.Дубль Тогда
			Продолжить;   
		КонецЕсли;
		
		// строка Итого
		НайИтог = СтрНайти(Тек.НомерЗаказа, "Итого");
		Если НайИтог > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Тек.НДСДоставка) Тогда
			Попытка			
				НДСДоставка = Число(Тек.НДСДоставка);
			Исключение			
				НДСДоставка = 20;
			КонецПопытки;		
		КонецЕсли;
		
		
		//строка с доставкой
		Если НЕ ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
			Продолжить;			
		КонецЕсли;
		
		
		Попытка
			Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
			//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");   //           !!!!!!!!!!!!!!!!!!!!!!!!
		Исключение
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		//+Степанов
		Если СтрНайти(Тек.НомерЗаказа," ") <> 0 Тогда
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = "Номер заказа содержит пробелы. Заказ создан не будет.";
			Продолжить;	
		КонецЕсли;	
		//-Степанов
		
		Если СокрЛП(Тек.НомерЗаказа) = ЗаказНеЗагружаем Тогда
			Продолжить;
		КонецеСли;	
		
		СтрокаБезОшибок = ПроверитьСтрокуНаЗаполненность(Тек, Шаблон);
		Игнорировать = ПроверитьСтрокуНаИгнорирование(Тек, Шаблон);
		Если Игнорировать Тогда
			Продолжить;
		КонецеСли;	
		
		Если СтрокаБезОшибок <> Истина Тогда
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = СтрокаБезОшибок;
			ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			Продолжить;
		КонецеСли;	
		
		
		Попытка
			
			Если ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
				Если ТипЗнч(Тек.СтоимостьТовара) = Тип("Строка") Тогда
					//Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, ",", ".");
					Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, " ", "");
					Тек.СтоимостьТовара = Число(Тек.СтоимостьТовара);
				КонецеСли;	
			КонецеСли;	
			
			//Если Не ЗначениеЗаполнено(Тек.Адрес) Тогда
			//	Тек.Адрес = "г " + Тек.ГородДоставки + ",ул " + Тек.УлицаДоставки;
			//Иначе
			//	Тек.Адрес = "";
			//КонецЕСли;	
			
			
			Если Не ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
				Тек.СтоимостьДоставки = 0;
			Иначе
				Тек.СтоимостьДоставки = Формат(Окр(Число(Тек.СтоимостьДоставки)), "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕСли;	
			
			//Если ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда		
			//	СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + Тек.СтоимостьДоставки;	
			//КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
				Тек.ВесОбщий = 0;
			Иначе
				Тек.ВесОбщий = Формат(Число(Тек.ВесОбщий), "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕСли;	
			
			
			
			//Если Не ЗначениеЗаполнено(Тек.ОбщаяЦена) Тогда
			//	Тек.СтоимостьТовара = 0;
			//Иначе
			//	Тек.СтоимостьТовара = Формат(Окр(Число(Тек.ОбщаяЦена/Тек.Количество)), "ЧРД=.; ЧН=0; ЧГ=");
			//КонецеСли;
			
			
			Если Не ЗначениеЗаполнено(Тек.Итого) Тогда
				Тек.Итого = 0;
			Иначе	
				Попытка				
					Тек.Итого = Число(Тек.Итого);					
				Исключение			
				КонецПопытки;
				
			КонецеСли;
			
			Попытка
				Тек.КодТовара = Формат(Число(Тек.КодТовара), "ЧГ=");
			Исключение
				
			КонецПопытки;
			Попытка
				Тек.ТелефонМобильный = Формат(Число(Тек.ТелефонМобильный), "ЧГ=");
			Исключение
				
			КонецПопытки;
			Попытка
				
				Тек.ТелефонГородской = Формат(Число(Тек.ТелефонГородской), "ЧГ=");
			Исключение
				
			КонецПопытки;	
			Если ЗначениеЗаполнено(Тек.ТелефонГородской) Тогда
				Тек.ТелефонМобильный = Тек.ТелефонМобильный + ";" + Тек.ТелефонГородской;
			КонецеСли;
			
			Если ТипЗнч(Тек.ДатаДоставки) = Тип("Строка") Тогда
				Тек.ДатаДоставки = ИзСтрокиВДату(Тек.ДатаДоставки);
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
				Тек.ДатаДоставки = ТекущаяДата() + 86400;
			КонецеСли;	
			
			Попытка
				Тек.Количество = Формат(Число(Тек.Количество), "ЧРД=.; ЧН=0; ЧГ=");
			Исключение
				Тек.Количество = 1;			
			КонецПопытки;
			
			
			Если Не ЗначениеЗаполнено(Тек.ИнтервалДоставки) Тогда
				Тек.ИнтервалДоставки = "09-20";
			КонецеСли;	
			
			Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
				Тек.ВесОбщий = 0;
			КонецеСли;	
			
			// МАС - 07.07.2017 - № --->> 		
			Если НЕ ЗначениеЗаполнено(Тек.НДСТовар) Тогда		
				Тек.НДСТовар = 20;			
			Иначе
				Попытка
					Тек.НДСТовар = Число(Тек.НДСТовар);	
				Исключение		
				КонецПопытки;
			КонецЕсли;
			// <<--- МАС 
			
			
			
			Если ТекНом <> Тек.НомерЗаказа Тогда
				// создаём новый заказ
				
				Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем И Таб2 <> Неопределено Тогда
					
					//фиксация выгрузки
					От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
					//фиксация выгрузки окончание
					
					
					Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
					R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
					//ТабК[0].tariffCategoryId_Ч
					Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
					Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					
					Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
						НовЗагр = ТабЗагруженных.Добавить();
						НовЗагр.Номер = ТекНом;
						НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
					КонецеСли;	
				КонецеСли;	
				
				ТекНом = Тек.НомерЗаказа;
				ИтВес = 0;
				
				
				
				//ВремяС = Лев(СокрЛП(ИнтД[0]), 2);                 //           !!!!!!!!!!!!!!!!!!!!!!!!
				
				//ВремяС = Число(СтрЗаменить(ВремяС, "'", ""));    //           !!!!!!!!!!!!!!!!!!!!!!!!
				//
				//ВремяПо = Число(Лев(СокрЛП(ИнтД[1]), 2));       //           !!!!!!!!!!!!!!!!!!!!!!!!
				
				Интервал = СокрЛП(Тек.ИнтервалДоставки);
				Интервал = СтрЗаменить(Интервал, "С", "");
				Интервал = СтрЗаменить(Интервал, "с", "");
				Интервал = СтрЗаменить(Интервал, "До", "-");
				Интервал = СтрЗаменить(Интервал, "до", "-");
				Интервал = СтрЗаменить(Интервал, "ДО", "-");
				Интервал = СтрЗаменить(Интервал, " ", "");
				
				
				ИнтД = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Интервал,"-");
				
				Если ИнтД.Количество() Тогда				
					ВремяС = СокрЛП(ИнтД[0]);	
					Если ИнтД.Количество() > 1 Тогда		
						ВремяПо = СокрЛП(ИнтД[1]);						
					КонецЕсли;			
				КонецЕсли;			
				
				
				
				//НайИт = ТабСум.Найти(ТекНом);
				//Если НайИт <> Неопределено Тогда
				//	Если ЗначениеЗаполнено(НайИт.Сумма) Тогда
				//		ТипОплаты = "1";
				//	Иначе
				//		ТипОплаты = "7";
				//	КонецеСли;	
				//Иначе	
				//	ТипОплаты = "1";
				//КонецеСли;	
				
				ТипОплаты = "1";
				
				// Тип оплаты
				
				Если Найти(НРег(Тек.ТипОплатыEnter), "оплачено") <> 0 Тогда	
					ТипОплаты = "7";
				ИначеЕсли Найти(НРег(Тек.ТипОплатыEnter), "оплата при доставке")  <> 0 Тогда
					ТипОплаты = "1";
				ИначеЕсли Найти(НРег(Тек.ТипОплатыEnter), "безнал") <> 0 Тогда	
					ТипОплаты = "4";
				Иначе
					НовОш = ТабОшибок.Добавить();
					НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
					НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
					Продолжить;
				КонецеСли;	
				
				
				НаборПользователь = евген.ЗапросКИнтернетМагазину("declare @tmp table (userid int, userAddressID int)
				|insert into @tmp
				|exec dbo.pb_UpdateUser null, '" + Тек.ФИО + "', null, null, '" + СокрЛП(Тек.ТелефонМобильный) + "', '" + СокрЛП(Тек.ТелефонГородской) + "','" + СокрЛП(Тек.Адрес) + "', null," + Строка(КодКонтр) + ", null, null, null, null, null, null, null, null, null, null, null, null, null, null,'" + ПараметрыСеанса.ТекущийПользователь + "', null
				| select * from @tmp", Соединение);
				Таб1 = Евген.СоздатьТаблицу(НаборПользователь, "userid_Ч, userAddressID_Ч");
				UserId = Формат(Таб1[0].userid_Ч, "ЧГ=");
				userAddressID = Формат(Таб1[0].userAddressID_Ч, "ЧГ=");
				
				СеттингИд = "0";
				
				//НашНом = "";
				//Реал = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", СокрЛП(Тек.НомерЗаказа));
				//Если Не Реал.Пустая() Тогда
				//	НашНом = СокрЛП(Реал.Номер);
				//КонецеСли;	
				
				Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + СеттингИд + ",0," + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
				R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
				ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
				
				
				//Стоимость доставки
				НайДоставка = ТабЗаказов.НайтиСтроки(Новый Структура("НомерЗаказа", Тек.НомерЗаказа));
				СтоимостьДоставкиИтог = 0;
				//НДСДоставка = NULL;
				Для Каждого НайСтр Из НайДоставка Цикл		
					Если НЕ ЗначениеЗаполнено(НайСтр.СтоимостьТовара) И СтрНайти(НайСтр.НаименованиеТовара, "Доставка товара")  И ЗначениеЗаполнено(НайСтр.СтоимостьДоставки) Тогда
						СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + НайСтр.СтоимостьДоставки;				
						//Если ЗначениеЗаполнено(НайСтр.НДСДоставка) Тогда			
						//	НДСДоставка = НайСтр.НДСДоставка;	
						//КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				
				
				Если СокрЛП(Контрагент.Код) = "Shop_256" Или СокрЛП(Контрагент.Код) = "Shop_316" Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|   ВЫРАЗИТЬ(ТаблицаКатегорииДоставки.НомерЗаказа КАК СТРОКА(25)) КАК НомерЗаказа,
					|   ВЫРАЗИТЬ(ТаблицаКатегорииДоставки.КатегорияДоставки КАК СТРОКА(2)) КАК КатегорияДоставки
					|ПОМЕСТИТЬ ВТ_ТаблицаКД
					|ИЗ
					|   &ТаблицаКатегорииДоставки КАК ТаблицаКатегорииДоставки
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|   МАКСИМУМ(ВЫБОР
					|           КОГДА ВТ_ТаблицаКД.КатегорияДоставки = ""36""
					|                   ИЛИ ВТ_ТаблицаКД.КатегорияДоставки = ""39""
					|               ТОГДА 5
					|           ИНАЧЕ 1
					|       КОНЕЦ) КАК КатегорияДоставки
					|ИЗ
					|   ВТ_ТаблицаКД КАК ВТ_ТаблицаКД
					|ГДЕ
					|   ВТ_ТаблицаКД.НомерЗаказа = &НомерЗаказа";
					
					Запрос.УстановитьПараметр("ТаблицаКатегорииДоставки",ТаблицаКатегорииДоставки);
					Запрос.УстановитьПараметр("НомерЗаказа", Тек.НомерЗаказа);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ВыборкаДетальныеЗаписи.КатегорияДоставки = NULL Тогда
							КатегорияДоставки  = 2;
						Иначе
							КатегорияДоставки = ВыборкаДетальныеЗаписи.КатегорияДоставки;
						КонецЕсли;
					КонецЦикла;
					КатегорияДоставки = 5;
					//Если НашНом = "" Тогда
					////Серегин М.В. 17.07.2015 11:00:46 старый код
					//НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);			
					//Серегин М.В. 17.07.2015 11:00:39 новый код
					
					// МАС - 01.01.2017 - № --->> 
					НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(СтоимостьДоставкиИтог, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + КатегорияДоставки + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1,0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6,null," + Число(НДСДоставка) + " select * from @tmp", Соединение);				 
					//НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(СтоимостьДоставкиИтог, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + КатегорияДоставки + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);			
					// <<--- МАС
				Иначе
					// МАС - 07.07.2017 - №1224 --->> 
					НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(СтоимостьДоставкиИтог, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''") + "',null,null,'" + Формат(ВремяС, "ЧН=0; ЧГ=") + "','" + Формат(ВремяПо, "ЧН=0; ЧГ=") + "','"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].weightCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1,0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6,null," + Число(НДСДоставка) + " select * from @tmp", Соединение);	 
					//НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(СтоимостьДоставкиИтог, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, ""), "'", "''") + "',null,null,'" + Формат(ВремяС, "ЧН=0; ЧГ=") + "','" + Формат(ВремяПо, "ЧН=0; ЧГ=") + "','"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].weightCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6 " + " select * from @tmp", Соединение);
					// <<--- МАС
					
					//	НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder " + СокрЛП(НашНом) + ", " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);			
				КонецеСли;	
				Таб2 = Евген.СоздатьТаблицу(НаборЗаказ, "Orderid_Ч");
				
				СтоимостьДоставкиИтог = 0;
				
			КонецеСли;		
			
			//ВесТовара = Формат(Окр(Тек.ВесОбщий/Тек.Количество, 3), "ЧРД=.; ЧН=0; ЧГ=");
			
			СтоимостьТовара = 0;
			Если ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.Количество) Тогда
				СтоимостьТовара = Окр(Тек.СтоимостьТовара/Тек.Количество);	
			КонецЕсли;
			
			
			ВесТовара = 0;
			Тек.НаименованиеТовара = СтрЗаменить(Тек.НаименованиеТовара, "'", "");
			евген.ЗапросКИнтернетМагазину("                                                                                                                                                                                                                       
			|exec dbo.pb_AddItemToOrder " + Формат(Таб2[0].OrderId_Ч, "ЧГ=") + ",'" + Тек.НаименованиеТовара + "','" + Тек.Артикул + "'," + Формат(Тек.Количество, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + Формат(СтоимостьТовара, "ЧРД=.; ЧН=0; ЧГ=") + ",'" + Тек.КодТовара + "'," + Строка(ВесТовара) + ",0,0,0,0,null,null,null,null," + Число(Тек.НДСТовар), Соединение);
			ИтВес = Число(Тек.ВесОбщий);
			
		Исключение
			НовОш = ТабОшибок.Добавить();
			НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
			НовОш.Ошибка = ОписаниеОшибки();
			ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;	
	
	
	Попытка
		Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
			
			//Если НЕ ЗначениеЗаполнено(Тек.ВесОбщий) Тогда	
			//	Тек.ВесОбщий = 0;			
			//КонецЕсли;
			
			//фиксация выгрузки
			От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
			//фиксация выгрузки окончание
			
			
			Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
			R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
			//ТабК[0].tariffCategoryId_Ч
			Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч, "ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
			Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			
			Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
				НовЗагр = ТабЗагруженных.Добавить();
				НовЗагр.Номер = ТекНом;
				НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
			КонецеСли;	
		КонецеСли;
	Исключение
		НовОш = ТабОшибок.Добавить();
		НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
		НовОш.Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции



Процедура ЗагрузкаЗаказовБезНова() Экспорт
	ОбработкаОбмена = Обработки.ЗагрузкаИзИнтернетМагазина.Создать();
	Этапы = Новый Структура;
	Этапы.Вставить("ЗагрузитьНовыеЗаказы", Ложь);
	ОбработкаОбмена.ВыполнитьЭтапы(Этапы, Истина);
КонецПроцедуры	

#Область КодКУдалениюЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Новый
//Функция ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Новый(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено)
//	
//	Перем ИтВес, Таб2;
//	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
//	ТабДок = Новый ТабличныйДокумент;
//	
//	// МАС - 15.06.2018 - № --->> 
//	Если Не ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
//		Возврат Ложь;
//	КонецЕсли;	
//	
//	//Попытка
//	//    ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение, ТипФайлаТабличногоДокумента.XLSX);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
//	//Исключение
//	//    Возврат Ложь;
//	//КонецПопытки;
//	// <<--- МАС
//	
//	
//	ТабЗаказов = Новый ТаблицаЗначений;
//	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
//	ТабЗаказов.Колонки.Добавить("Адрес");
//	ТабЗаказов.Колонки.Добавить("ВесОбщий");
//	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
//	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
//	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
//	ТабЗаказов.Колонки.Добавить("Итого");
//	ТабЗаказов.Колонки.Добавить("КодТовара");
//	ТабЗаказов.Колонки.Добавить("Артикул");
//	ТабЗаказов.Колонки.Добавить("Количество");
//	//ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
//	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
//	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
//	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
//	//ТабЗаказов.Колонки.Добавить("Район");
//	//ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
//	//ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
//	//ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
//	//ТабЗаказов.Колонки.Добавить("ТелефонГородской");
//	//ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
//	//ТабЗаказов.Колонки.Добавить("ФИО");
//	//ТабЗаказов.Колонки.Добавить("Штрихкод");
//	//ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
//	ТабЗаказов.Колонки.Добавить("КоличествоМест");
//	ТабЗаказов.Колонки.Добавить("КлючЗаказа");
//    
//	ПослНомер = "";
//	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
//		Нов = ТабЗаказов.Добавить();
//		Для СчКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
//			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
//				Струк = Новый Структура;
//				Струк.Вставить("Порядок", СчКолонок);
//				НайКолонки = Шаблон.Поля.НайтиСтроки(Струк);                               			
//			Иначе
//				Струк = Новый Структура;
//				Струк.Вставить("Наименование", "R" + ТабДок.Область(Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст);				
//				НайКолонки = Шаблон.Поля.НайтиСтроки(Струк);                               			
//			КонецеСли;	
//			
//			
//			
//			Если НайКолонки.Количество() = 0 Тогда
//				Продолжить;
//			КонецеСли;	
//			
//			Для Каждого НайКолонка Из НайКолонки Цикл
//				Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
//				Если ЗначениеЗаполнено(НайКолонка.НомерСтартовогоСимвола) и ЗначениеЗаполнено(НайКолонка.ДлинаСтроки) Тогда
//					Значение = Строка(Значение);					
//					Значение = Сред(Значение, НайКолонка.НомерСтартовогоСимвола, НайКолонка.ДлинаСтроки);
//				ИначеЕсли ЗначениеЗаполнено(НайКолонка.НомерСтартовогоСимвола) и Не ЗначениеЗаполнено(НайКолонка.ДлинаСтроки) Тогда	
//					Значение = СокрЛП(Строка(Значение));					
//					Значение = Сред(Значение, НайКолонка.НомерСтартовогоСимвола);					
//				КонецеСли;	
//				
//				Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
//					Нов[НайКолонка.Поле.Наименование] = СтрЗаменить(Значение, Символ(160), "");
//				Иначе	
//					
//					Нов[НайКолонка.Поле.Наименование] = Значение;
//				КонецеСли;	
//				
//				Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
//					НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
//					Если НайденноеСоответствие <> Неопределено Тогда
//						Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
//					КонецеСли;	
//				КонецеСли;	
//				
//				
//				Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
//					Если ЗначениеЗаполнено(Значение) Тогда
//						ПослНомер = СтрЗаменить(Формат(Значение, "ЧГ="),Символ(160), "");
//					ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
//						Нов[НайКолонка.Поле.Наименование] = Формат(ПослНомер, "ЧГ=");
//					Иначе
//						Нов[НайКолонка.Поле.Наименование] = Формат(Нов[НайКолонка.Поле.Наименование], "ЧГ=");
//					КонецеСли;	
//				КонецеСли;	
//			КонецЦикла;
//		КонецЦикла;	
//		
//		Нов.КоличествоМест = 1;
//		Если ПропуститьСтроку(Нов, Шаблон) Тогда
//			ТабЗаказов.Удалить(Нов);
//		КонецеСли;			
//	КонецЦикла;	

//	
//	Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
//        МассивСимволов = Новый Массив;
//        Для НомерСимвола = 48 По 57 Цикл
//            МассивСимволов.Добавить(Символ(НомерСимвола));
//        КонецЦикла;
//        
//        //Добавим новую колонку в ТЗ 
//        ТабЗаказов.Колонки.Добавить("Сумма");
//        //Количество строк
//        Индекс = ТабЗаказов.Количество()-1;
//        Сч=0;
//        Пока Сч <= Индекс Цикл
//            //Строка ТЗ
//            Стр = ТабЗаказов[Сч];
//            //Если первый символ ключа не цифра убираем строку
//            Если  МассивСимволов.Найти(Лев(Стр.КлючЗаказа,1)) =  Неопределено Тогда
//                ТабЗаказов.Удалить(Стр);
//                //Откатываем Сч и Индекс, т.к. строку удалили
//                Сч = Сч - 1;
//                Индекс = Индекс-1;
//            Иначе
//                //Условие если стоимость 0
//                Если Стр.СтоимостьТовара<> "" Тогда  
//                Стр.Сумма = Число(СтрЗаменить(Стр.СтоимостьТовара,Символ(160),""));
//                КонецЕсли;
//            КонецЕсли;
//            //Счетчик
//            Сч = Сч+1;
//		КонецЦикла;
//		ТабНом = ТабЗаказов.Скопировать();
//		ТабНом.Свернуть("НомерЗаказа, Артикул, НаименованиеТовара,Количество,СтоимостьТовара,ОбщаяЦена,Сумма");
//		ТабЗаказов.Свернуть("НомерЗаказа", "КоличествоМест,Сумма");
//	Иначе

//		//Пропускаемые поля
//        ПропускаемыеПоля = Шаблон.Поля.НайтиСтроки(Новый Структура("ИгнорироватьПустыеЗначения",Истина));
//        СтуктураОтбора = Новый Структура;
//        Для каждого СтрПП Из ПропускаемыеПоля Цикл
//            СтуктураОтбора.Вставить(СтрПП.Поле.Наименование,"");	
//        КонецЦикла;
//        МассивУдаляемыхСтрок  = ТабЗаказов.НайтиСтроки(СтуктураОтбора);
//        Для каждого СтрУдалить Из МассивУдаляемыхСтрок Цикл
//            ТабЗаказов.Удалить(СтрУдалить);
//        КонецЦикла;
//        
//        //Форматирование Строк
//        Запрос = Новый Запрос;
//        Запрос.Текст = 
//        "ВЫБРАТЬ
//        |   ШаблоныЗагрузкиExcelПоля.Поле.Наименование КАК ИмяПоля,
//        |   ШаблоныЗагрузкиExcelПоля.ШаблонСтроки
//        |ИЗ
//        |   Справочник.ШаблоныЗагрузкиExcel.Поля КАК ШаблоныЗагрузкиExcelПоля
//        |ГДЕ
//        |   ШаблоныЗагрузкиExcelПоля.ШаблонСтроки <> """"
//        |   И ШаблоныЗагрузкиExcelПоля.Ссылка = &Шаблон";
//        
//        Запрос.УстановитьПараметр("Шаблон",Шаблон);
//        РезультатЗапроса = Запрос.Выполнить();
//        
//        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//        
//        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//            Для каждого СтрТЗ Из ТабЗаказов Цикл
//                Если НЕ ПроверитьСтрокупоШаблону(СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля],ВыборкаДетальныеЗаписи.ШаблонСтроки) Тогда
//                    СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля] = СокрЛП(ОтформатироватьСТроку(СтрТЗ[ВыборкаДетальныеЗаписи.ИмяПоля],ВыборкаДетальныеЗаписи.ШаблонСтроки));    
//                КонецЕсли;
//            КонецЦикла;	
//        КонецЦикла;
//        
//		//Для каждого СтрТЗ Из ТабЗаказов Цикл
//		//    СтрТЗ.ОбщаяЦена =  Число(СтрЗаменить(?(СтрТЗ.ОбщаяЦена="",0,СтрТЗ.ОбщаяЦена),Символ(160),""));
//		//    СтрТЗ.СтоимостьТовара =  Число(СтрЗаменить(?(СтрТЗ.СтоимостьТовара="",0,СтрТЗ.СтоимостьТовара),Символ(160),""));
//		//    СтрТЗ.КоличествоМест = Число(СтрЗаменить(?(СтрТЗ.КоличествоМест="",0,СтрТЗ.КоличествоМест),Символ(160),""));
//		//    СтрТЗ.Количество = Число(СтрЗаменить(?(СтрТЗ.Количество="",0,СтрТЗ.Количество),Символ(160),""));
//		//КонецЦикла;
//		
//		
//        ТабНом = ТабЗаказов.Скопировать();
//        ТабНом.Свернуть("НомерЗаказа, Артикул, НаименованиеТовара,Количество,СтоимостьТовара,ОбщаяЦена");
//        ТабЗаказов.Свернуть("НомерЗаказа", "КоличествоМест,СтоимостьТовара");
//    КонецЕсли;
//    //------------------///////////
//    
//   
//	
//    // поля Шапки документа

//    СтруктураПолейШапки = Новый Структура;
//    
//    Для Каждого Тек Из Шаблон.ПоляШапки Цикл
//    	ЗначениеПоля = ТабДок.Область("R" + Тек.СтрокаВДокументе +"C" + Формат(Тек.КолонкаВДокументе, "ЧГ=")).Текст;
//    	Если Тек.поле = Справочники.ПоляДанныхЗагрузки.НомерНакладной Тогда
//    		ИмяПоля = "НН";
//    	ИначеЕсли Тек.поле = Справочники.ПоляДанныхЗагрузки.ДатаНакладной Тогда	
//    		ИмяПоля = "ДН";
//    	КонецеСли;	
//    	
//    	СтруктураПолейШапки.Вставить(ИмяПоля, ЗначениеПоля);
//    КонецЦикла;	
//    
//    
//    
//    ТабОшибок = Новый ТаблицаЗначений;
//    ТабОшибок.Колонки.Добавить("Номер");
//    ТабОшибок.Колонки.Добавить("Ошибка");
//    ТабОшибок.Колонки.Добавить("Кол");
//    
//    ТабЗагруженных = Новый ТаблицаЗначений;
//    ТабЗагруженных.Колонки.Добавить("Номер");
//    
//    ЗаказНеЗагружаем = "";
//    
//    
//    Мас = ТабЗаказов.ВыгрузитьКолонку("НомерЗаказа");
//    МасН = ТабНом.ВыгрузитьКолонку("Артикул");
//    
//    Зап = Новый Запрос;
//    Зап.Текст = "ВЫБРАТЬ
//                |   РеализацияТоваровУслуг.Ссылка КАК Док,
//                |   РеализацияТоваровУслуг.НомерВнешнегоЗаказа
//                |ИЗ
//                |   Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//                |ГДЕ
//                |   РеализацияТоваровУслуг.НомерВнешнегоЗаказа В(&Мас)
//                |   И РеализацияТоваровУслуг.ВладелецТовара = &Контрагент";
//    Зап.УстановитьПараметр("Мас", Мас);
//    Зап.УстановитьПараметр("Контрагент", Контрагент);
//    
//    Рез = Зап.Выполнить().Выгрузить();
//    
//    
//    ЗапН = Новый Запрос;
//    ЗапН.Текст = "ВЫБРАТЬ
//                |	Номенклатура.Ссылка КАК Ном,
//                |	Номенклатура.Артикул
//                |ИЗ
//                |	Справочник.Номенклатура КАК Номенклатура
//                |ГДЕ
//                |	Номенклатура.Артикул В(&Мас)";
//    ЗапН.УстановитьПараметр("Мас", МасН);	
//    
//    РезН = ЗапН.Выполнить().Выгрузить();
//    
//    
//    
//    НовДок = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
//    НовДок.Дата = ТекущаяДата();
//    НовДок.Контрагент = Контрагент;
//    
//    НомерДокумента = "";
//    ДатаДокумента = "";
//    
//    СтруктураПолейШапки.Свойство("НН", НомерДокумента);
//    СтруктураПолейШапки.Свойство("ДН", ДатаДокумента);
//    
//	
//	Если СокрЛП(Контрагент.Код) = "Shop_169"   Тогда
//        Если СтрЧислоВхождений(НомерДокумента,"CI")> 0 Тогда
//            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("1");
//        ИначеЕсли СтрЧислоВхождений(НомерДокумента,"/")> 0 Тогда
//            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("32");
//        Иначе
//            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("2");
//		КонецЕсли;
//    ИначеЕсли СокрЛП(Контрагент.Код) ="Shop_428" Тогда
//        Если СтрЧислоВхождений(НомерДокумента,"CI")> 0 Тогда
//            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("30");
//        ИначеЕсли СтрЧислоВхождений(НомерДокумента,"/")> 0 Тогда
//            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("33");
//        Иначе
//            НовДок.СкладМагазина = Справочники.СкладыМагазинов.НайтиПоКоду("31");
//        КонецЕсли;
//	КонецЕсли;
//	
//    
//    Попытка
//    	НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента);
//		Если ЗначениеЗаполнено(ДатаДокумента) Тогда		
//			НовДок.ДатаВходящегоДокумента = Дата(ДатаДокумента);			
//		КонецЕсли;
//    Исключение	
//    	НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента) + " от " + СокрЛП(ДатаДокумента);
//	КонецПопытки;
//	
//    
//    Для Каждого Тек Из ТабЗаказов Цикл
//    	Нов = НовДок.Заказы.Добавить();
//    	Нов.ВнешнийНомерЗаказа = Тек.НомерЗаказа;
//        
//        Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
//            Нов.СуммаДокумента = Тек.Сумма;
//        Иначе
//            Нов.СуммаДокумента = Тек.СтоимостьТовара;
//        КонецеСли;
//        
//    	Най = Рез.Найти(Тек.НомерЗаказа);
//    	Если Най <> Неопределено Тогда
//    		Нов.Заказ = Най.Док;
//    	КонецеСли;	
//    	
//    	НовЗ = ТабЗагруженных.Добавить();
//    	НовЗ.Номер = Тек.НомерЗаказа;
//    КонецЦикла;	

//    Для Каждого Тек Из ТабНом Цикл
//    	
//    	Если Не ЗначениеЗаполнено(Тек.Артикул) Тогда
//    		Продолжить;
//    	КонецеСли;
//    	
//    	Нов = НовДок.Товары.Добавить();
//    	Нов.Артикул = СокрЛП(Тек.Артикул);
//        Нов.ВнешнийНомерЗаказа = Тек.НомерЗаказа;
//    	Най = Рез.Найти(Тек.НомерЗаказа);
//    	Если Най <> Неопределено Тогда
//    		Нов.Заказ = Най.Док;
//        КонецеСли;
//        
//        Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
//            Нов.Сумма = Тек.Сумма;
//            Нов.Цена  = Число(СтрЗаменить(?(Тек.ОбщаяЦена="",0,Тек.ОбщаяЦена),Символ(160),""));
//        Иначе
//            Нов.Сумма = Тек.СтоимостьТовара;
//            Нов.Цена  = Тек.ОбщаяЦена;
//        КонецеСли;
//        
//    	Най2 = РезН.Найти(Тек.Артикул);
//    	Если Най2 <> Неопределено Тогда
//    		Нов.Номенклатура = Най2.Ном;
//    	КонецеСли;	
//    	
//    	Попытка
//    		Нов.Количество = Число(Тек.Количество);
//    	Исключение
//    		
//    	Конецпопытки;	
//	КонецЦикла;	
//	
//	
//	МассивНомеров = НовДок.Заказы.ВыгрузитьКолонку("Заказ");
//	
//	Для каждого Стр Из НовДок.Заказы Цикл	
//		Стр.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", Стр.ВнешнийНомерЗаказа);
//		Если НЕ ЗначениеЗаполнено(Стр.Заказ) Тогда	
//			Стр.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", "00" + Стр.ВнешнийНомерЗаказа);	
//		КонецЕсли;		
//	КонецЦикла;
//	
//	
//	Для каждого Стр Из НовДок.Заказы Цикл
//		Если ЗначениеЗаполнено(Стр.Заказ) Тогда
//			Стр.СуммаДокумента = Стр.Заказ.Товары.Итог("Сумма");
//			Стр.КоличествоМест = Стр.Заказ.КоличествоМест;		
//		КонецЕсли;
//	КонецЦикла;
//	
//	// Михушкин - 18.05.2017 - костыль для ЛОРЕАЛЬ Б2Б --->> 	 	
//	Попытка
//		Если СтрНайти(ИмяФайла, "B2B") Тогда	
//			НовДок.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_680");			
//		КонецЕсли;
//	Исключение	
//	КонецПопытки;
//	// <<--- Михушкин
//	
//	
//    НовДок.Основание = Перечисления.ТипыЗагрузкиДанных.EMAIL;
//    НовДок.Записать(РежимЗаписиДокумента.Запись);
//    НовДок.Записать(РежимЗаписиДокумента.Проведение);
//	
//	Возврат Истина;
//		
//КонецФункции
#КонецОбласти

Функция УстановитьРабочееМестоСервер() Экспорт
	
	
	ИмяКомпьютера = ИмяКомпьютера();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РабочиеМеста.Ссылка КАК РабочееМесто
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.ИмяКомпьютера = &ИмяКомпьютера";
	Зап.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера);			
	
	Выб = Зап.Выполнить().Выбрать();
	
	РабочееМесто = Неопределено;
	Если Выб.Следующий() Тогда
		РабочееМесто = Выб.РабочееМесто;
	Иначе
		РабочееМестоОб = Справочники.РабочиеМеста.СоздатьЭлемент();
		РабочееМестоОб.Наименование = ИмяКомпьютера;
		РабочееМестоОб.ИмяКомпьютера = ИмяКомпьютера;
		РабочееМестоОб.Записать();
		РабочееМесто = РабочееМестоОб.Ссылка;
	КонецеСли;	
	
	Возврат РабочееМесто;
КонецФункции


Функция ПолучитьККМИзСвязкиККМ(Контрагент, ТипОплаты, СвязкаККМ = Неопределено) Экспорт
	Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//            |	СвязкаККМККМПоРабочимМестам.ККМ,
	//            |	СвязкаККМККМПоРабочимМестам.Ссылка.Ссылка КАК СвязкаККМ
	//            |ИЗ
	//            |	РегистрСведений.СвязкиККМПоКонтрагентам.СрезПоследних КАК СвязкиККМПоКонтрагентамСрезПоследних
	//            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиККМ.ККМПоРабочимМестам КАК СвязкаККМККМПоРабочимМестам
	//            |		ПО СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ.Ссылка = СвязкаККМККМПоРабочимМестам.Ссылка.Ссылка
	//            |ГДЕ
	//            |	СвязкаККМККМПоРабочимМестам.РабочееМесто = &РабочееМесто
	//            |	И СвязкиККМПоКонтрагентамСрезПоследних.Контрагент = &Контрагент
	//            |	И СвязкиККМПоКонтрагентамСрезПоследних.ТипОплаты = &ТипОплаты";
	
	// Якурнов 16.07.2018 14:34:32
	
	Зап.Текст = "ВЫБРАТЬ
	|	СвязкаККМККМПоРабочимМестам.ККМ КАК ККМ,
	|	СвязкаККМККМПоРабочимМестам.Ссылка.Ссылка КАК СвязкаККМ
	|ИЗ
	|	РегистрСведений.СвязкиККМПоКонтрагентам.СрезПоследних КАК СвязкиККМПоКонтрагентамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиККМ.ККМПоРабочимМестам КАК СвязкаККМККМПоРабочимМестам
	|		ПО СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ.Ссылка = СвязкаККМККМПоРабочимМестам.Ссылка.Ссылка
	|ГДЕ
	|	СвязкаККМККМПоРабочимМестам.РабочееМесто = &РабочееМесто
	|	И СвязкиККМПоКонтрагентамСрезПоследних.Контрагент = &Контрагент
	|	И СвязкиККМПоКонтрагентамСрезПоследних.ТипОплаты = &ТипОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязкиККМККМПоПользователям.ККМ,
	|	СвязкиККМККМПоПользователям.Ссылка.Ссылка
	|ИЗ
	|	РегистрСведений.СвязкиККМПоКонтрагентам.СрезПоследних КАК СвязкиККМПоКонтрагентамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиККМ.ККМПоПользователям КАК СвязкиККМККМПоПользователям
	|		ПО СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ.Ссылка = СвязкиККМККМПоПользователям.Ссылка.Ссылка
	|ГДЕ
	|	СвязкиККМПоКонтрагентамСрезПоследних.Контрагент = &Контрагент
	|	И СвязкиККМПоКонтрагентамСрезПоследних.ТипОплаты = &ТипОплаты
	|	И СвязкиККМККМПоПользователям.Пользователь = &ТекПользователь";
	Зап.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМесто);
	Зап.УстановитьПараметр("Контрагент", Контрагент);			
	Зап.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	// Якурнов 16.07.2018 14:21:25
	Зап.УстановитьПараметр("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);			
	
	Выб = Зап.Выполнить().Выбрать();			
	
	Если Выб.Следующий() Тогда
		СвязкаККМ = Выб.СвязкаККМ;
		Возврат Выб.ККМ;
	Иначе
		Возврат Справочники.КассыККМ.ПустаяСсылка();
	КонецеСли;	
	
КонецФункции	

Функция ПолучитьСкладМагазинаПоЗаказу(Заказ) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.СкладМагазина
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|ГДЕ
	|	ДополнительныеПараметрыЗаказа.Заказ = &Заказ";
	Зап.УстановитьПараметр("Заказ", Заказ);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.СкладМагазина;
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции	

// Михушкин - Загрузка АПП для Кораблика --->> 
Функция ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Кораблик(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено)
	Перем ИтВес, Таб2;
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	
	
	
	// чтение
	ИмяФ = КаталогВременныхФайлов() + ИмяФайла;
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;  
	ЗагружаемыйФайл.Прочитать(ИмяФ, КодировкаТекста.ANSI); //Читаем содержимое нашего файла
	
	Таблица = Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("НомерЗаказа");
	//ТЗ.Колонки.Добавить("КоличествоМест");
	
	//шапка по умолчанию первая строчка
	Шапка = ЗагружаемыйФайл.ПолучитьСтроку(1);
	
	
	Разделитель	= ";";
	
	//раскладываем строку в массив
	МассивКол = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Шапка, Разделитель);
	//МассивКол = РазложитьСтрокуВМассивПодстрок(Шапка, Разделитель); // процедура из типовой конфигурации, разбивает строку в массив по разделителям
	
	//генерируем столбцы
	Для Каждого ИмяСтолбца Из МассивКол Цикл
		
		ИмяБезПробелов = СтрЗаменить(ИмяСтолбца," ",""); // убираем из имени пробелы
		Таблица.Колонки.Добавить(ИмяБезПробелов,,ИмяСтолбца);
		//НовыйСтолбец = ЭлементыФормы.Таблица.Колонки.Добавить(ИмяБезПробелов, ИмяСтолбца);
		//НовыйСтолбец.Данные = ИмяБезПробелов;
		
	КонецЦикла;
	
	
	Для НомерСтроки=2 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
		
		//Состояние("Обрабатывается "+Строка(Формат(?(ЗагружаемыйФайл.КоличествоСтрок()=0,0,((100*НомерСтроки)/                                                                                                ЗагружаемыйФайл.КоличествоСтрок())),"ЧЦ=3; ЧДЦ=0"))+" %");
		//ОбработкаПрерыванияПользователя(); //указав данный оператор, цикл можно прервать в любой момент нажатие ctrl+break
		
		// получить стрoку с указанным номером и преобразуем её в массив
		Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		МассивКол = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель);// процедура из типовой конфигурации, разбивает строку в массив по разделителям
		НоваяСтрочка= Таблица.Добавить();
		
		Если МассивКол.Количество() <> Таблица.Колонки.Количество() Тогда
			Продолжить; // скорее всего в тексте содержит разделитель
		КонецЕсли;
		
		Для НомерСтолбца = 1 по МассивКол.Количество() Цикл
			//заполняем строчку значениями
			ТекущееЗначение = МассивКол[НомерСтолбца-1];
			ИмяКолонки = Таблица.Колонки[НомерСтолбца-1].Имя;
			НоваяСтрочка[ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
		
	КонецЦикла;
	
	
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	ТабЗаказов.Колонки.Добавить("Адрес");
	ТабЗаказов.Колонки.Добавить("ВесОбщий");
	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
	ТабЗаказов.Колонки.Добавить("Итого");
	ТабЗаказов.Колонки.Добавить("КодТовара");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Количество");
	//ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
	//ТабЗаказов.Колонки.Добавить("Район");
	//ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	//ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	//ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	//ТабЗаказов.Колонки.Добавить("ТелефонГородской");
	//ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	//ТабЗаказов.Колонки.Добавить("ФИО");
	//ТабЗаказов.Колонки.Добавить("Штрихкод");
	//ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("КоличествоМест");
	ТабЗаказов.Колонки.Добавить("КлючЗаказа");
	ТабЗаказов.Колонки.Добавить("ВнешнийНомер");
	
	
	
	Для каждого Стр Из Таблица Цикл
		
		Если ЗначениеЗаполнено(Стр.ORDER) Тогда
			
			НСтр = ТабЗаказов.Добавить();
			НСтр.НомерЗаказа = Стр.ORDER;
			НСтр.КоличествоМест = Стр.PIECES;
			НСтр.ВнешнийНомер = Стр.ID;	
			
		КонецЕсли;		
		
	КонецЦикла;
	
	
	
	
	
	// поля Шапки документа
	
	СтруктураПолейШапки = Новый Структура;
	
	//Для Каждого Тек Из Шаблон.ПоляШапки Цикл
	//	ЗначениеПоля = ТабДок.Область("R" + Тек.СтрокаВДокументе +"C" + Формат(Тек.КолонкаВДокументе, "ЧГ=")).Текст;
	//	Если Тек.поле = Справочники.ПоляДанныхЗагрузки.НомерНакладной Тогда
	//		ИмяПоля = "НН";
	//	ИначеЕсли Тек.поле = Справочники.ПоляДанныхЗагрузки.ДатаНакладной Тогда	
	//		ИмяПоля = "ДН";
	//	КонецеСли;	
	//	
	//	СтруктураПолейШапки.Вставить(ИмяПоля, ЗначениеПоля);
	//КонецЦикла;	
	
	
	
	ТабОшибок = Новый ТаблицаЗначений;
	ТабОшибок.Колонки.Добавить("Номер");
	ТабОшибок.Колонки.Добавить("Ошибка");
	ТабОшибок.Колонки.Добавить("Кол");
	
	ТабЗагруженных = Новый ТаблицаЗначений;
	ТабЗагруженных.Колонки.Добавить("Номер");
	
	ЗаказНеЗагружаем = "";
	
	
	Мас = ТабЗаказов.ВыгрузитьКолонку("НомерЗаказа");
	//МасН = ТабНом.ВыгрузитьКолонку("Артикул");
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Док,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерВнешнегоЗаказа
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер В(&Мас)
	|	И РеализацияТоваровУслуг.ВладелецТовара = &Контрагент";
	Зап.УстановитьПараметр("Мас", Мас);
	Зап.УстановитьПараметр("Контрагент", Контрагент);
	
	Рез = Зап.Выполнить().Выгрузить();
	Рез.Колонки.Добавить("НомерН");
	
	Для каждого РСтр Из Рез Цикл	
		РСтр.НомерН = СокрЛП(РСтр.Номер);	
	КонецЦикла;
	
	
	//ЗапН = Новый Запрос;
	//ЗапН.Текст = "ВЫБРАТЬ
	//            |	Номенклатура.Ссылка КАК Ном,
	//            |	Номенклатура.Артикул
	//            |ИЗ
	//            |	Справочник.Номенклатура КАК Номенклатура
	//            |ГДЕ
	//            |	Номенклатура.Артикул В(&Мас)";
	//ЗапН.УстановитьПараметр("Мас", МасН);	
	//
	//РезН = ЗапН.Выполнить().Выгрузить();
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП, ЛОЖЬ) КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Поле1) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО (ИСТИНА)";
	ВыборкаПараметрыКонтрагента = Запрос.Выполнить().Выбрать();
	ВыборкаПараметрыКонтрагента.Следующий();
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
	НовДок = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
	НовДок.Дата = ТекущаяДата();
	НовДок.Контрагент = Контрагент;
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	НовДок.ОбновлятьКоличествоМестЗаказов = ВыборкаПараметрыКонтрагента.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
	НомерДокумента = "";
	ДатаДокумента = "";
	
	СтруктураПолейШапки.Свойство("НН", НомерДокумента);
	СтруктураПолейШапки.Свойство("ДН", ДатаДокумента);
	
	
	Попытка
		НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента);
		Если ЗначениеЗаполнено(ДатаДокумента) Тогда		
			НовДок.ДатаВходящегоДокумента = Дата(ДатаДокумента);			
		КонецЕсли;
	Исключение	
		НовДок.НомерВходящегоДокумента = СокрЛП(НомерДокумента) + " от " + СокрЛП(ДатаДокумента);
	КонецПопытки;
	
	
	Для Каждого Тек Из ТабЗаказов Цикл
		
		Нов = НовДок.Заказы.Добавить();
		Нов.ВнешнийНомерЗаказа = Тек.ВнешнийНомер;
		Нов.КоличествоМест = Тек.КоличествоМест;
		
		//Если Контрагент.Код = "Shop_241 " ИЛИ Контрагент.Код = "Shop_197 " ИЛИ Контрагент.Код ="Shop_180 " Тогда
		//    Нов.СуммаДокумента = Тек.Сумма;
		//Иначе
		//    Нов.СуммаДокумента = Тек.СтоимостьТовара;
		//КонецеСли;
		
		Най = Рез.НайтиСтроки(Новый Структура("НомерН", Тек.НомерЗаказа));
		Если Най.Количество() Тогда
			Нов.Заказ = Най[0].Док;
		Иначе
			
			Най = Рез.Найти(Тек.НомерЗаказа,);
			Если Най <> Неопределено Тогда
				Нов.Заказ = Най.Док;
			КонецеСли;		
			
		КонецеСли;
		
		
		Если НЕ ЗначениеЗаполнено(Нов.Заказ) Тогда	
			Нов.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", Тек.ВнешнийНомер);	
		КонецЕсли;
		
		
		НовЗ = ТабЗагруженных.Добавить();
		НовЗ.Номер = СокрЛП(Тек.НомерЗаказа);
		
	КонецЦикла;	
	
	
	
	
	//Для каждого Стр Из НовДок.Заказы Цикл	
	//	Если НЕ ЗначениеЗаполнено(Стр.Заказ) Тогда	
	//		Стр.Заказ = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", Тек.ВнешнийНомер);	
	//	КонецЕсли;		
	//КонецЦикла;
	
	
	Для каждого Стр Из НовДок.Заказы Цикл
		Если ЗначениеЗаполнено(Стр.Заказ) Тогда
			Стр.СуммаДокумента = Стр.Заказ.Товары.Итог("Сумма");
			//Стр.КоличествоМест = Стр.КоличествоМест;		
		КонецЕсли;
	КонецЦикла;
	
	
	НовДок.Основание = Перечисления.ТипыЗагрузкиДанных.EMAIL;
	НовДок.Записать(РежимЗаписиДокумента.Запись);
	//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)>>>
	//НовДок.Записать(РежимЗаписиДокумента.Проведение);
	Попытка
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		pkv.ДобавитьВСписокОтложенногоПроведения(НовДок.Ссылка, "Не удалось провести " + НовДок + " ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Кораблик "+ ТекстОшибки);
	КонецПопытки;
	//Асеев 22.09.2021 (по письму Расхождение мест B2B в разблюдовках)<<<
	
	Возврат Истина;
	
КонецФункции
// <<--- Михушкин 

Функция ПоРейсуВведеноПредварительноеЗакрытие(РейсМестнойДоставки) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПредварительноеЗакрытиеРейса.Ссылка
	|ИЗ
	|	Документ.ПредварительноеЗакрытиеРейса КАК ПредварительноеЗакрытиеРейса
	|ГДЕ
	|	ПредварительноеЗакрытиеРейса.Проведен = ИСТИНА
	|	И ПредварительноеЗакрытиеРейса.ОтчетВодителя.Рейс = &Рейс";
	
	Зап.УстановитьПараметр("Рейс", РейсМестнойДоставки);			
	Рез = Зап.Выполнить();
	Возврат Не Рез.Пустой();
КонецФункции	


Функция ЗагрузитьДанныеИзФайлаExcelПоШаблону_АШАН(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено)
	
	Перем ИтВес, Таб2;
	
	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
	ТабДок = Новый ТабличныйДокумент;
	
	Попытка
		ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	
	//Если Не ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
	ТабЗаказов.Колонки.Добавить("Адрес");
	ТабЗаказов.Колонки.Добавить("ВесОбщий");
	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
	ТабЗаказов.Колонки.Добавить("Итого");
	ТабЗаказов.Колонки.Добавить("КодТовара");
	ТабЗаказов.Колонки.Добавить("Артикул");
	ТабЗаказов.Колонки.Добавить("Количество");
	ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
	ТабЗаказов.Колонки.Добавить("Район");
	ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
	ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
	ТабЗаказов.Колонки.Добавить("ТелефонГородской");
	ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
	ТабЗаказов.Колонки.Добавить("ФИО");
	ТабЗаказов.Колонки.Добавить("Штрихкод");
	ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
	ТабЗаказов.Колонки.Добавить("УлицаДоставки");
	ТабЗаказов.Колонки.Добавить("ГородДоставки");
	ТабЗаказов.Колонки.Добавить("КатегорияДоставки");
	ТабЗаказов.Колонки.Добавить("КоличествоМест");
	
	
	ПослНомер = "";
	
	ПроливаемыеПоля = Новый Соответствие;
	
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
		Нов = ТабЗаказов.Добавить();
		МаксКол = Мин(ТабДок.ШиринаТаблицы, 300);
		Для СчКолонок = 1 По МаксКол Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				НайКолонка = Шаблон.Поля.Найти(СчКолонок, "Порядок");                               			
			Иначе
				НайКолонка = Шаблон.Поля.Найти(ТабДок.Область("R" + Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст, "Наименование");                               			
			КонецеСли;	
			
			
			Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
			Если НайКолонка = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			
			Нов[НайКолонка.Поле.Наименование] = Значение;
			
			Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
				НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
				Если НайденноеСоответствие <> Неопределено Тогда
					Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
				КонецеСли;	
			КонецеСли;	
			
			
			Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПослНомер = Значение;
				ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
					Нов[НайКолонка.Поле.Наименование] = ПослНомер;
				КонецеСли;	
			ИначеЕсли НайКолонка.ПроливатьЗначенияНаНеЗаполненныеЗначения Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПроливаемыеПоля.Вставить(НайКолонка.Поле.Наименование, Значение);
				ИначеЕсли ЗначениеЗаполнено(ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование)) Тогда
					Если НайКолонка.Поле.Наименование = "ИнтервалДоставки" ИЛИ НайКолонка.Поле.Наименование = "Отд"  Тогда
						Нов[НайКолонка.Поле.Наименование] = ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование);
					Иначе
						//Если ЗначениеЗаполнено(ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование]) Тогда
						Если ТабЗаказов[ТабЗаказов.Индекс(Нов)].НомерЗаказа = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1].НомерЗаказа Тогда 
							Нов[НайКолонка.Поле.Наименование]  = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование];     
						КонецЕсли;
						//КонецеСли;
					КонецЕсли;
				КонецеСли;					
			КонецеСли;	
		КонецЦикла;	
	КонецЦикла;
	
	
	Для каждого Стр Из ТабЗаказов Цикл
		
		Если ЗначениеЗаполнено(Стр.ДатаДоставки) Тогда
			
			АртикулУслуги = СтрЗаменить(Стр.КодТовара,Символ(160),"");
			НомерЗаказа = СтрЗаменить(Стр.НомерЗаказа,Символ(160),"");
			НомерЗаказа = СтрЗаменить(НомерЗаказа, Символы.НПП, "");
			Стр.КодТовара = "АШАН_12344321";
			Стр.Артикул = "АШАН_12344321";
			Стр.НаименованиеТовара = "Товарное вложение";
			Стр.СтоимостьТовара = Число(СтрЗаменить(Стр.Итого, " ", "")) - Число(СтрЗаменить(Стр.СтоимостьДоставки, " ", ""));
			Стр.СтоимостьДоставки = Число(СтрЗаменить(Стр.СтоимостьДоставки, " ", ""));
			Стр.Итого = Число(СтрЗаменить(Стр.Итого, " ", ""));
			//Стр.ИнтервалДоставки = Формат(Стр.ИнтервалДоставки, "ДФ=HH:mm:ss");
			
			Если ЗначениеЗаполнено(АртикулУслуги) Тогда 
				НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул",АртикулУслуги);
				Если ЗначениеЗаполнено(НайденаяУслуга) И НЕ НайденаяУслуга.ПометкаУдаления Тогда
					НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(НомерЗаказа); 
					НаборЗаписей.Отбор.Услуга.Установить(НайденаяУслуга);  
					НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
					НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
					Запись = НаборЗаписей.Добавить();
					Запись.Период = ТекущаяДата();
					Запись.НомерВнешнегоЗаказа = НомерЗаказа;
					Запись.Услуга = НайденаяУслуга;
					Запись.Контрагент = Контрагент;
					Запись.Стоимость = Стр.ОбщаяЦена;
					Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзПочты;
					НаборЗаписей.Записать();
					//ТабЗаказов.Удалить(Стр);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	
	
	// таблица собрана
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	ТекНом = "-";
	КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Контрагент.Код),"_");
	КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
	
	ТабОшибок = Новый ТаблицаЗначений;
	ТабОшибок.Колонки.Добавить("Номер");
	ТабОшибок.Колонки.Добавить("Ошибка");
	ТабОшибок.Колонки.Добавить("Кол");
	
	ТабЗагруженных = Новый ТаблицаЗначений;
	ТабЗагруженных.Колонки.Добавить("Номер");
	ТабЗагруженных.Колонки.Добавить("НомерНаш");
	
	ЗаказНеЗагружаем = "";
	
	
	ТабСум = ТабЗаказов.Скопировать();
	ТабСум.Колонки.добавить("Сумма");
	Для Каждого Тек Из ТабСум Цикл
		
		Тек.Сумма = Тек.СтоимостьТовара;
		//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");
		//Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
		//Попытка		
		//	Тек.Сумма = Число(Тек.Количество) * Число(Тек.СтоимостьТовара);       
		//Исключение
		//	Тек.Сумма = 0;
		//КонецПопытки;	
	КонецЦикла;	
	
	ТабСум.Свернуть("НомерЗаказа", "Сумма");
	
	ТабЗаказов.Колонки.Добавить("Дубль");
	Для Каждого Тек Из ТабЗаказов Цикл  
		
		Если ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
			
			Если Шаблон.БезДублей Тогда //делаем проверку на наличие заказа в админке по внешнему номеру 
				
				
				// -- новый код		
				Рез = mas.ВнешнийНомерЕстьВАдминке(СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")), Контрагент.Код);
				Если Рез Тогда
					НовОш = ТабОшибок.Добавить();
					НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
					НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
					ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
					Тек.Дубль = Истина;
				Иначе
					Тек.Дубль = Ложь;
				КонецЕсли;
				
				//Стр = "SELECT orderIDImport from _order WHERE orderIDImport =" +"'"+ СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""))+"'";
				//ТабДублей = smv.СформироватьТаблицуЗначенийИзДанныхSQL(Стр);
				//Если ТабДублей.Количество() >0 Тогда
				//    НовОш = ТабОшибок.Добавить();
				//    НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				//    НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
				//    ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				//    Тек.Дубль = Истина;
				//Иначе
				//    Тек.Дубль = Ложь;
				//КонецЕсли;
			Иначе
				Тек.Дубль = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	СтоимостьДоставкиИтог = 0;
	
	
	Для Каждого Тек Из ТабЗаказов Цикл  
		
		Если ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
			
			СтрокаДоставки = Ложь;
			
			Если Тек.Дубль Тогда
				Продолжить;   
			КонецЕсли;
			
			// строка Итого
			НайИтог = СтрНайти(Тек.НомерЗаказа, "Итого");
			Если НайИтог > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			
			//строка с доставкой
			Если НЕ ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
				Продолжить;			
			КонецЕсли;
			
			
			Попытка
				Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
				//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");   //           !!!!!!!!!!!!!!!!!!!!!!!!
			Исключение
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = ОписаниеОшибки();
			КонецПопытки;
			
			//+Степанов
			Если СтрНайти(Тек.НомерЗаказа," ") <> 0 Тогда
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = "Номер заказа содержит пробелы. Заказ создан не будет.";
				Продолжить;	
			КонецЕсли;	
			//-Степанов
			
			Если СокрЛП(Тек.НомерЗаказа) = ЗаказНеЗагружаем Тогда
				Продолжить;
			КонецеСли;	
			
			СтрокаБезОшибок = ПроверитьСтрокуНаЗаполненность(Тек, Шаблон);
			Игнорировать = ПроверитьСтрокуНаИгнорирование(Тек, Шаблон);
			Если Игнорировать Тогда
				Продолжить;
			КонецеСли;	
			
			Если СтрокаБезОшибок <> Истина Тогда
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
				НовОш.Ошибка = СтрокаБезОшибок;
				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				Продолжить;
			КонецеСли;	
			
			
			Попытка
				
				Если ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
					Если ТипЗнч(Тек.СтоимостьТовара) = Тип("Строка") Тогда
						//Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, ",", ".");
						Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, " ", "");
						Тек.СтоимостьТовара = Число(Тек.СтоимостьТовара);
					КонецеСли;	
				КонецеСли;	
				
				//Если Не ЗначениеЗаполнено(Тек.Адрес) Тогда
				//	Тек.Адрес = "г " + Тек.ГородДоставки + ",ул " + Тек.УлицаДоставки;
				//Иначе
				//	Тек.Адрес = "";
				//КонецЕСли;	
				
				Тек.Адрес = "" + Тек.ГородДоставки + ", " + Тек.Адрес;
				
				
				Если Не ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
					Тек.СтоимостьДоставки = 0;
				Иначе
					Тек.СтоимостьДоставки = Формат(Окр(Число(Тек.СтоимостьДоставки)), "ЧРД=.; ЧН=0; ЧГ=");
				КонецЕСли;	
				
				//Если ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда		
				//	СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + Тек.СтоимостьДоставки;	
				//КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
					Тек.ВесОбщий = 0;
				Иначе
					Тек.ВесОбщий = Формат(Число(Тек.ВесОбщий), "ЧРД=.; ЧН=0; ЧГ=");
				КонецЕСли;	
				
				
				
				//Если Не ЗначениеЗаполнено(Тек.ОбщаяЦена) Тогда
				//	Тек.СтоимостьТовара = 0;
				//Иначе
				//	Тек.СтоимостьТовара = Формат(Окр(Число(Тек.ОбщаяЦена/Тек.Количество)), "ЧРД=.; ЧН=0; ЧГ=");
				//КонецеСли;
				
				
				Если Не ЗначениеЗаполнено(Тек.Итого) Тогда
					Тек.Итого = 0;
				Иначе	
					Попытка				
						Тек.Итого = Число(Тек.Итого);					
					Исключение			
					КонецПопытки;		
				КонецеСли;
				
				//Попытка
				//	Тек.КодТовара = Формат(Число("6666666"), "ЧГ=");
				//Исключение		
				//КонецПопытки;
				
				Попытка				
					Тек.КоличествоМест = Число(СокрЛП(Тек.КоличествоМест));			
				Исключение					
					Тек.КоличествоМест = "null";			
				КонецПопытки;
				
				
				Попытка
					Тек.ТелефонМобильный = Формат(Число(Тек.ТелефонМобильный), "ЧГ=");
				Исключение
					
				КонецПопытки;
				Попытка
					Тек.ТелефонГородской = Формат(Число(Тек.ТелефонГородской), "ЧГ=");
				Исключение
					
				КонецПопытки;	
				Если ЗначениеЗаполнено(Тек.ТелефонГородской) Тогда
					Тек.ТелефонМобильный = Тек.ТелефонМобильный + ";" + Тек.ТелефонГородской;
				КонецеСли;
				
				Если ТипЗнч(Тек.ДатаДоставки) = Тип("Строка") Тогда
					Тек.ДатаДоставки = ИзСтрокиВДату(Тек.ДатаДоставки);
				КонецеСли;	
				
				Если Не ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
					Тек.ДатаДоставки = ТекущаяДата() + 86400;
				КонецеСли;	
				
				Попытка
					Тек.Количество = Формат(Число(Тек.Количество), "ЧРД=.; ЧН=0; ЧГ=");
				Исключение
					Тек.Количество = 1;			
				КонецПопытки;
				
				
				Если Не ЗначениеЗаполнено(Тек.ИнтервалДоставки) Тогда
					Тек.ИнтервалДоставки = "09-20";
				Иначе
					Если Лев(Тек.ИнтервалДоставки, 1) = "9" Тогда				
						Тек.ИнтервалДоставки = "09-18";						
					Иначе 
						ПериодС = Число(Лев(Тек.ИнтервалДоставки, 1)) + 12; 						
						Тек.ИнтервалДоставки = "" + ПериодС + "-24";					
					КонецЕсли;				
				КонецеСли;	
				
				
				Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
					Тек.ВесОбщий = 0;
				КонецеСли;	
				
				
				
				Если ТекНом <> Тек.НомерЗаказа Тогда
					// создаём новый заказ
					
					Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем И Таб2 <> Неопределено Тогда
						
						//фиксация выгрузки
						От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
						//фиксация выгрузки окончание
						
						Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
						R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
						ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
						//ТабК[0].tariffCategoryId_Ч
						Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", null, " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
						Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
						
						Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
							НовЗагр = ТабЗагруженных.Добавить();
							НовЗагр.Номер = СтрЗаменить(ТекНом, Символы.НПП, "");
							НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
						КонецеСли;	
					КонецеСли;	
					
					ТекНом = Тек.НомерЗаказа;
					ИтВес = 0;
					
					
					//ВремяС = Лев(СокрЛП(ИнтД[0]), 2);                 //           !!!!!!!!!!!!!!!!!!!!!!!!				
					//ВремяС = Число(СтрЗаменить(ВремяС, "'", ""));    //           !!!!!!!!!!!!!!!!!!!!!!!!
					//ВремяПо = Число(Лев(СокрЛП(ИнтД[1]), 2));       //           !!!!!!!!!!!!!!!!!!!!!!!!				
					Интервал = СокрЛП(Тек.ИнтервалДоставки);
					Интервал = СтрЗаменить(Интервал, "С", "");
					Интервал = СтрЗаменить(Интервал, "с", "");
					Интервал = СтрЗаменить(Интервал, "До", "-");
					Интервал = СтрЗаменить(Интервал, "до", "-");
					Интервал = СтрЗаменить(Интервал, "ДО", "-");
					Интервал = СтрЗаменить(Интервал, " ", "");
					
					
					ИнтД = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Интервал,"-");
					
					Если ИнтД.Количество() Тогда				
						ВремяС = СокрЛП(ИнтД[0]);	
						Если ИнтД.Количество() > 1 Тогда		
							ВремяПо = СокрЛП(ИнтД[1]);						
						КонецЕсли;			
					КонецЕсли;			
					
					
					
					//НайИт = ТабСум.Найти(ТекНом);
					//Если НайИт <> Неопределено Тогда
					//	Если ЗначениеЗаполнено(НайИт.Сумма) Тогда
					//		ТипОплаты = "1";
					//	Иначе
					//		ТипОплаты = "7";
					//	КонецеСли;	
					//Иначе	
					//	ТипОплаты = "1";
					//КонецеСли;	
					
					ТипОплаты = "1";
					
					// Тип оплаты
					Если Найти(ВРег(Тек.ТипОплатыEnter), "ОНЛАЙН") <> 0 Тогда	
						ТипОплаты = "7";
					ИначеЕсли Найти(ВРег(Тек.ТипОплатыEnter), "НАЛИЧНЫЕ") <> 0 Тогда
						ТипОплаты = "1";
					Иначе
						НовОш = ТабОшибок.Добавить();
						НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
						НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
						Продолжить;
					КонецеСли;	
					
					
					НаборПользователь = евген.ЗапросКИнтернетМагазину("declare @tmp table (userid int, userAddressID int)
					|insert into @tmp
					|exec dbo.pb_UpdateUser null, '" + Тек.ФИО + "', null, null, '" + СокрЛП(Тек.ТелефонМобильный) + "', '" + СокрЛП(Тек.ТелефонГородской) + "','" + СокрЛП(Тек.Адрес) + "', null," + Строка(КодКонтр) + ", null, null, null, null, null, null, null, null, null, null, null, null, null, null,'" + ПараметрыСеанса.ТекущийПользователь + "', null
					| select * from @tmp", Соединение);
					Таб1 = Евген.СоздатьТаблицу(НаборПользователь, "userid_Ч, userAddressID_Ч");
					UserId = Формат(Таб1[0].userid_Ч, "ЧГ=");
					userAddressID = Формат(Таб1[0].userAddressID_Ч, "ЧГ=");
					
					СеттингИд = "0";
					
					//НашНом = "";
					//Реал = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", СокрЛП(Тек.НомерЗаказа));
					//Если Не Реал.Пустая() Тогда
					//	НашНом = СокрЛП(Реал.Номер);
					//КонецеСли;	
					
					Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + СеттингИд + ",0," + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
					R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
					ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
					
					
					//Стоимость доставки
					НайДоставка = ТабЗаказов.НайтиСтроки(Новый Структура("НомерЗаказа", Тек.НомерЗаказа));
					СтоимостьДоставкиИтог = 0;
					Для Каждого НайСтр Из НайДоставка Цикл		
						Если НЕ ЗначениеЗаполнено(НайСтр.СтоимостьТовара) И СтрНайти(НайСтр.НаименованиеТовара, "Доставка товара") И ЗначениеЗаполнено(НайСтр.СтоимостьДоставки) Тогда
							СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + НайСтр.СтоимостьДоставки;			
						КонецЕсли;	
					КонецЦикла;
					
					
					
					НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null,'" + Формат(ВремяС, "ЧН=0; ЧГ=") + "','" + Формат(ВремяПо, "ЧН=0; ЧГ=") + "','"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].weightCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")) + "', 0,0,"+ Тек.КоличествоМест +",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6," + Формат(Число(Тек.Итого), "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);	// + Формат(Число(Тек.СтоимостьТовара), "ЧРД=.; ЧН=0; ЧГ=")		
					
					//	НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder " + СокрЛП(НашНом) + ", " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);			
					
					Таб2 = Евген.СоздатьТаблицу(НаборЗаказ, "Orderid_Ч");
					
					СтоимостьДоставкиИтог = 0;
					
					
					
					// апдейтим ШК									
					СтрШК = "";
					МнСтрШК = СтрЗаменить(Тек.Штрихкод, ",", Символы.ПС);
					Для н = 1 По СтрЧислоСтрок(МнСтрШК) Цикл
						СтрокаШК = СтрПолучитьСтроку(МнСтрШК, н);			
						СтрШК = СтрШК + "insert into @tmp VALUES ("+ н +",'" + СокрЛП(СтрокаШК) + "')";									
					КонецЦикла;				
					
					РезультатЗапроса = евген.ЗапросКИнтернетМагазину("declare @tmp [dbo].[TPieceBarcode] " + СтрШК + " exec dbo.service_setOrderBarcodes
					|	@orderId	= " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=") + "
					|	,@login			= 'auchan'
					|	,@orderBarcodes	= @tmp", Соединение);
					
					
				КонецеСли;		
				
				//ВесТовара = Формат(Окр(Тек.ВесОбщий/Тек.Количество, 3), "ЧРД=.; ЧН=0; ЧГ=");
				
				СтоимостьТовара = 0;
				Если ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.Количество) Тогда
					СтоимостьТовара = Окр(Тек.СтоимостьТовара/Тек.Количество);	
				КонецЕсли;
				
				
				ВесТовара = 0;
				Тек.НаименованиеТовара = СтрЗаменить(Тек.НаименованиеТовара, "'", "");
				евген.ЗапросКИнтернетМагазину("                                                                                                                                                                                                                       
				|exec dbo.pb_AddItemToOrder " + Формат(Таб2[0].OrderId_Ч, "ЧГ=") + ",'" + Тек.НаименованиеТовара + "','" + Тек.Артикул + "'," + Формат(Тек.Количество, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + Формат(СтоимостьТовара, "ЧРД=.; ЧН=0; ЧГ=") + ",'" + Тек.КодТовара + "'," + Строка(ВесТовара), Соединение);
				ИтВес = Число(Тек.ВесОбщий);
				
			Исключение
				НовОш = ТабОшибок.Добавить();
				НовОш.Номер = СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""));
				НовОш.Ошибка = ОписаниеОшибки();
				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
	
	Попытка
		Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
			
			//Если НЕ ЗначениеЗаполнено(Тек.ВесОбщий) Тогда	
			//	Тек.ВесОбщий = 0;			
			//КонецЕсли;
			
			//фиксация выгрузки
			От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
			//фиксация выгрузки окончание
			
			
			Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
			R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
			//ТабК[0].tariffCategoryId_Ч
			Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч, "ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
			Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
			
			Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
				НовЗагр = ТабЗагруженных.Добавить();
				НовЗагр.Номер = СтрЗаменить(ТекНом, Символы.НПП, "");
				НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
			КонецеСли;	
		КонецеСли;
	Исключение
		НовОш = ТабОшибок.Добавить();
		НовОш.Номер = СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""));
		НовОш.Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Процедура СоздатьЗаписьОтложеннойОбработкиЗаказа(Заказ, Регистратор, ТипОбработки, Значение1 = Неопределено, Значение2 = Неопределено) Экспорт
	МомВремени = ТекущаяДата();
	Наб = РегистрыСведений.ЗаказыКОтложеннойОбработке.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(МомВремени);
	Наб.Отбор.Заказ.Установить(Заказ);
	Наб.Отбор.ТипОбработки.Установить(ТипОбработки);
	
	Нов = Наб.Добавить();
	Нов.Период = МомВремени;
	Нов.ДокументРегистратор = Регистратор;
	Нов.Заказ = Заказ;
	Нов.ТипОбработки = ТипОбработки;
	Нов.ЭтапОбработки = Перечисления.ЭтапыОтложеннойОбработкиЗаказов.ОбработкаНазначена;
	Если Значение1 <> Неопределено Тогда
		Нов.Значение1 = Значение1;
	КонецЕсли;	
	
	Если Значение2 <> Неопределено Тогда
		Нов.Значение2 = Значение2;
	КонецЕсли;	
	
	Наб.Записать();
КонецПроцедуры	


Процедура ЗаписатьНаборОтложеннойОбработкиЗаказа(МомВремени, ТипОбработки, Набор) Экспорт
	Наб = РегистрыСведений.ЗаказыКОтложеннойОбработке.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(МомВремени);
	Наб.Отбор.ТипОбработки.Установить(ТипОбработки);
	
	Наб.Загрузить(Набор);
	
	Наб.Записать();
КонецПроцедуры	


Процедура ОтложеннаяОбработкаЗаказов() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ЗаказыКОтложеннойОбработкеСрезПоследних.Заказ.Ссылка КАК Заказ,
	|	ЗаказыКОтложеннойОбработкеСрезПоследних.ТипОбработки.Ссылка КАК ТипОбработки,
	|	ЗаказыКОтложеннойОбработкеСрезПоследних.Значение1,
	|	ЗаказыКОтложеннойОбработкеСрезПоследних.Значение2
	|ИЗ
	|	РегистрСведений.ЗаказыКОтложеннойОбработке.СрезПоследних КАК ЗаказыКОтложеннойОбработкеСрезПоследних
	|ГДЕ
	|	ЗаказыКОтложеннойОбработкеСрезПоследних.ЭтапОбработки = ЗНАЧЕНИЕ(перечисление.ЭтапыОтложеннойОбработкиЗаказов.ОбработкаНазначена)";
	Рез = Зап.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		Результат = -1;
		Если Рез.ТипОбработки = Перечисления.ТипыОтложеннойОбработкиЗаказов.ОбновлениеКоличестваМест Тогда
			Результат = РегламентноеОбновлениеКоличестваМест(Рез.Заказ, Рез.Значение1);
		КонецеСли;	
		Если Результат <> -1 Тогда
			ЗаписатьРезультатОбработкиЗаказа(Рез, Результат);
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	

Функция РегламентноеОбновлениеКоличестваМест(Заказ, КоличествоМест) 
	Док = Заказ.ПолучитьОбъект();
	Если Док.КоличествоМест <> КоличествоМест Тогда
		Док.КоличествоМест = КоличествоМест;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Возврат Перечисления.ЭтапыОтложеннойОбработкиЗаказов.ВозниклаОшибкаПриВыполненииОбработки;
		КонецПопытки;	
	Иначе
		Возврат Перечисления.ЭтапыОтложеннойОбработкиЗаказов.ОбработкаПропущена;
	КонецеСли;
	Возврат Перечисления.ЭтапыОтложеннойОбработкиЗаказов.ОбработкаВыполнена;
КонецФункции	

Процедура ЗаписатьРезультатОбработкиЗаказа(Данные, РезультатОбработки)
	МомВремени = ТекущаяДата();
	Наб = РегистрыСведений.ЗаказыКОтложеннойОбработке.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(МомВремени);
	Наб.Отбор.Заказ.Установить(Данные.Заказ);
	Наб.Отбор.ТипОбработки.Установить(Данные.ТипОбработки);
	
	Нов = Наб.Добавить();
	ЗаполнитьЗначенияСвойств(Нов, Данные);
	Нов.Период = МомВремени;
	Нов.ЭтапОбработки = РезультатОбработки;
	
	Наб.Записать();
КонецПроцедуры	


Функция ЗафиксироватьМестонахождениеЗаказа(СписокЗаказов, Местонахождение, ДокументРегистратор, СписокРасшифровкиМестонахождения = Неопределено) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Попытка
		Если СписокЗаказов.Количество() = 0 Тогда
			Возврат Истина;
		КонецеСли;
		
		ТекВр = ТекущаяДата();
		МасЗаказов = Новый Массив;
		Для Сч = 0 По СписокЗаказов.Количество() - 1 Цикл
			Наб = РегистрыСведений.МестонахождениеЗаказа.СоздатьНаборЗаписей();
			
			//+++ БАО 02.08.2017 №1550
			//---Наб.Отбор.Заказ.Установить(СписокЗаказов.получить(Сч).Значение);
			Наб.Отбор.Заказ.Установить(СписокЗаказов.получить(Сч).Заказ);
			//--- БАО 02.08.2017 №1550
			
			Наб.Отбор.Период.Установить(ТекВр);
			
			
			Нов = Наб.Добавить();
			Нов.Период = ТекВр;
			Нов.ДокументРегистратор = ДокументРегистратор;
			Нов.Местонахождение = Местонахождение;
			//+++ БАО 02.08.2017 №1550 
			//---Нов.Заказ = СписокЗаказов.получить(Сч).Значение;
			Нов.Заказ = СписокЗаказов.получить(Сч).Заказ;
			Нов.Терминал = СписокЗаказов.получить(Сч).Терминал;
			//--- БАО 02.08.2017 №1550
			
			Если СписокРасшифровкиМестонахождения <> Неопределено Тогда
				Нов.РасшифровкаМестонахождения = СписокРасшифровкиМестонахождения.РасшифровкаМестонахождения;
				Нов.Водитель = СписокРасшифровкиМестонахождения.Водитель;
				Нов.Экспедитор = СписокРасшифровкиМестонахождения.Экспедитор;
				Нов.Рейс = СписокРасшифровкиМестонахождения.Рейс;
			КонецЕсли;
			Наб.записать();
			
			//+++ БАО 02.08.2017 №1550
			//---МасЗаказов.Добавить(СписокЗаказов.получить(Сч).Значение);
			МасЗаказов.Добавить(СписокЗаказов.получить(Сч).Заказ);
			//--- БАО 02.08.2017 №1550
			
		КонецЦикла;	
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер Как НомерЗаказа
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&МасЗаказов)";
		Зап.УстановитьПараметр("МасЗаказов", МасЗаказов);
		Выб = Зап.Выполнить().Выбрать();
		
		СтрокаЗапроса = "declare @orders [dbo].[Torder] insert into @orders values (";
		
		
		Пока Выб.Следующий() Цикл
			СтрокаЗапроса = СтрокаЗапроса + СокрЛП(Выб.НомерЗаказа) + "), (";
			
			//- 2572 Дробница Р. 17.10.2018
			ПараметрыЗапроса = Новый Структура();
			ПараметрыЗапроса.Вставить("OrderId", СокрЛП(Выб.НомерЗаказа));
			МассивПараметров.Добавить(ПараметрыЗапроса);
			//Дробница Р. 17.10.2018-
		КонецЦикла;
		
		СтрокаЗапроса = Лев(СтрокаЗапроса, СтрДлина(СтрокаЗапроса) - 3);
		
		СтрокаЗапроса = СтрокаЗапроса + " EXEC import_setOrderLocationFlag @orders ," + Строка(Местонахождение.ИдентификаторВАдминке);
		
		//- 2572 Дробница Р. 17.10.2018
		Если МассивПараметров.Количество() > 0 Тогда
			
			ПараметрыЗапроса = Новый Структура;		
			ПараметрыЗапроса.Вставить("orders", МассивПараметров);
			ПараметрыЗапроса.Вставить("locationFlag",Строка(Местонахождение.ИдентификаторВАдминке));
			СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(Перечисления.ВидыЗапросовWEBСервис.SetOrderLocationFlagResult, ПараметрыЗапроса);
			Если НЕ СтруктураВозврата.Успешно Тогда
				Сообщить("Ошибка выгрузки местонахождения заказов. " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецЕсли;
		
		//Подключение = Евген.СоздатьПодключениеКИнтернетМагазину();
		//Евген.ЗапросКИнтернетМагазину(СтрокаЗапроса, Подключение);
		
		//Дробница Р. 17.10.2018-
		
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());   
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
	Возврат истина;
КонецФункции	

Функция ПолучитьВозможностьИзмененияДатыДоставкиПоЗаказу(Заказ, ДатаЗапроса) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МестонахождениеЗаказаСрезПоследних.Местонахождение
	|ИЗ
	|	РегистрСведений.МестонахождениеЗаказа.СрезПоследних(&Период, ) КАК МестонахождениеЗаказаСрезПоследних
	|ГДЕ
	|	МестонахождениеЗаказаСрезПоследних.Заказ = &Заказ";
	Зап.УстановитьПараметр("Период", ДатаЗапроса);
	Зап.УстановитьПараметр("Заказ", Заказ);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Если Выб.Местонахождение = Справочники.ВидыМестонахожденияЗаказа.УКурьера Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
	Иначе	
		Возврат Истина;
	КонецеСли;		
КонецФункции	

Функция ПолучитьСписокВозможностиИзмененияДатыДоставкиПоСпискуЗаказов(СписокЗаказов, ДатаЗапроса) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МестонахождениеЗаказаСрезПоследних.Местонахождение, ИСТИНА) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		КОГДА МестонахождениеЗаказаСрезПоследних.Местонахождение = ЗНАЧЕНИЕ(справочник.видыместонахождениязаказа.укурьера)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Заказ,
	|	РеализацияТоваровУслуг.Ссылка КАК МожноПереносить
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеЗаказа.СрезПоследних(&Период, ) КАК МестонахождениеЗаказаСрезПоследних
	|		ПО МестонахождениеЗаказаСрезПоследних.Заказ = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&СписокЗаказов)";
	Зап.УстановитьПараметр("Период", ДатаЗапроса);
	Зап.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	Таб = Зап.Выполнить().Выгрузить();
	
	Возврат Таб;
КонецФункции	

Функция ПолучитьСписокЗаказовПоШК(МассивШК) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ШтрихкодыЗаказов.Штрихкод,
	|	ШтрихкодыЗаказов.Заказ
	|ИЗ
	|	РегистрСведений.ШтрихкодыЗаказов КАК ШтрихкодыЗаказов
	|ГДЕ
	|	ШтрихкодыЗаказов.Штрихкод В(&МасШтрихкодов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыЗаказов.Штрихкод,
	|	ШтрихкодыЗаказов.Заказ";
	Возврат Зап.Выполнить().Выгрузить();
КонецФункции	

#Область КУдалениюИзМодуля
//Функция ЗагрузитьДанныеИзФайлаExcelПоШаблону_LOREALB2B(Контрагент, Шаблон, Данные, ИмяФайла, ТабОшибок = Неопределено, ТабЗагруженных = Неопределено, Ошибка = Неопределено)
//	
//	Перем ИтВес, Таб2;
//	
//	Данные.Записать(КаталогВременныхФайлов() + "\" + ИмяФайла);
//	ТабДок = Новый ТабличныйДокумент;
//	
//	//Попытка
//	//    ТабДок.Прочитать(КаталогВременныхФайлов() + "\" + ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
//	//Исключение
//	//    Возврат Ложь;
//	//КонецПопытки;
//	
//	
//	Если Не ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//		
//	
//	ТабЗаказов = Новый ТаблицаЗначений;
//	ТабЗаказов.Колонки.Добавить("НомерЗаказа");
//	ТабЗаказов.Колонки.Добавить("Адрес");
//	ТабЗаказов.Колонки.Добавить("ВесОбщий");
//	ТабЗаказов.Колонки.Добавить("ДатаДоставки");
//	ТабЗаказов.Колонки.Добавить("ДатаЗаказа");
//	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки");
//	ТабЗаказов.Колонки.Добавить("Итого");
//	ТабЗаказов.Колонки.Добавить("КодТовара");
//	ТабЗаказов.Колонки.Добавить("Артикул");
//	ТабЗаказов.Колонки.Добавить("Количество");
//	ТабЗаказов.Колонки.Добавить("КомментарийКлиента");
//	ТабЗаказов.Колонки.Добавить("НаименованиеТовара");
//	ТабЗаказов.Колонки.Добавить("Район");
//	ТабЗаказов.Колонки.Добавить("СтоимостьДоставки");
//	ТабЗаказов.Колонки.Добавить("ОбщаяЦена");
//	ТабЗаказов.Колонки.Добавить("СтоимостьТовара");
//	ТабЗаказов.Колонки.Добавить("ТелефонМобильный");
//	ТабЗаказов.Колонки.Добавить("ТелефонГородской");
//	ТабЗаказов.Колонки.Добавить("ТипОплатыEnter");
//	ТабЗаказов.Колонки.Добавить("ФИО");
//	ТабЗаказов.Колонки.Добавить("Штрихкод");
//	ТабЗаказов.Колонки.Добавить("ОбъемОбщий");
//	ТабЗаказов.Колонки.Добавить("УлицаДоставки");
//	ТабЗаказов.Колонки.Добавить("ГородДоставки");
//	ТабЗаказов.Колонки.Добавить("КатегорияДоставки");
//	ТабЗаказов.Колонки.Добавить("КоличествоМест");
//	
//	
//	ПослНомер = "";
//	
//	ПроливаемыеПоля = Новый Соответствие;
//	
//	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По ТабДок.ВысотаТаблицы Цикл
//		Нов = ТабЗаказов.Добавить();
//		МаксКол = Мин(ТабДок.ШиринаТаблицы, 300);
//		Для СчКолонок = 1 По МаксКол Цикл
//			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
//				НайКолонка = Шаблон.Поля.Найти(СчКолонок, "Порядок");                               			
//			Иначе
//				НайКолонка = Шаблон.Поля.Найти(ТабДок.Область("R" + Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст, "Наименование");                               			
//			КонецеСли;	
//			
//			
//			Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
//			Если НайКолонка = Неопределено Тогда
//				Продолжить;
//			КонецеСли;	
//			
//			Нов[НайКолонка.Поле.Наименование] = Значение;
//			
//			Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
//				НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
//				Если НайденноеСоответствие <> Неопределено Тогда
//					Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
//				КонецеСли;	
//			КонецеСли;	
//			
//			
//			Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
//				Если ЗначениеЗаполнено(Значение) Тогда
//					ПослНомер = Значение;
//				ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
//					Нов[НайКолонка.Поле.Наименование] = ПослНомер;
//				КонецеСли;	
//            ИначеЕсли НайКолонка.ПроливатьЗначенияНаНеЗаполненныеЗначения Тогда
//                Если ЗначениеЗаполнено(Значение) Тогда
//                    ПроливаемыеПоля.Вставить(НайКолонка.Поле.Наименование, Значение);
//                ИначеЕсли ЗначениеЗаполнено(ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование)) Тогда
//                    Если НайКолонка.Поле.Наименование = "ИнтервалДоставки" ИЛИ НайКолонка.Поле.Наименование = "Отд"  Тогда
//                        Нов[НайКолонка.Поле.Наименование] = ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование);
//                    Иначе
//                        //Если ЗначениеЗаполнено(ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование]) Тогда
//                        Если ТабЗаказов[ТабЗаказов.Индекс(Нов)].НомерЗаказа = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1].НомерЗаказа Тогда 
//                            Нов[НайКолонка.Поле.Наименование]  = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование];     
//                        КонецЕсли;
//                        //КонецеСли;
//                    КонецЕсли;
//                КонецеСли;					
//            КонецеСли;	
//        КонецЦикла;	
//    КонецЦикла;
//	
//	
//	Для каждого Стр Из ТабЗаказов Цикл
//		
//		Стр.СтоимостьДоставки = 0;
//		
//		Если ЗначениеЗаполнено(Стр.ДатаДоставки) Тогда
//		
//	        АртикулУслуги = СтрЗаменить(Стр.КодТовара,Символ(160),"");
//	        НомерЗаказа = СтрЗаменить(Стр.НомерЗаказа,Символ(160),"");
//			НомерЗаказа = СтрЗаменить(НомерЗаказа, Символы.НПП, "");
//			Стр.КодТовара = "LOREAL_12344321";
//			Стр.Артикул = "LOREAL_12344321";
//			Стр.НаименованиеТовара = "Товарное вложение";
//			Стр.СтоимостьТовара = Число(СтрЗаменить(Стр.Итого, " ", "")) - Число(СтрЗаменить(Стр.СтоимостьДоставки, " ", ""));
//			Стр.СтоимостьДоставки = Число(СтрЗаменить(Стр.СтоимостьДоставки, " ", ""));
//			Стр.Итого = Число(СтрЗаменить(Стр.Итого, " ", ""));
//			//Стр.ИнтервалДоставки = Формат(Стр.ИнтервалДоставки, "ДФ=HH:mm:ss");
//			
//	        Если ЗначениеЗаполнено(АртикулУслуги) Тогда 
//	            НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул",АртикулУслуги);
//	            Если ЗначениеЗаполнено(НайденаяУслуга) И НЕ НайденаяУслуга.ПометкаУдаления Тогда
//	                НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
//	                НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(НомерЗаказа); 
//	                НаборЗаписей.Отбор.Услуга.Установить(НайденаяУслуга);  
//	                НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
//	                НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
//	                Запись = НаборЗаписей.Добавить();
//	                Запись.Период = ТекущаяДата();
//	                Запись.НомерВнешнегоЗаказа = НомерЗаказа;
//	                Запись.Услуга = НайденаяУслуга;
//	                Запись.Контрагент = Контрагент;
//	                Запись.Стоимость = Стр.ОбщаяЦена;
//	                Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзПочты;
//	                НаборЗаписей.Записать();
//	                //ТабЗаказов.Удалить(Стр);
//	            КонецЕсли;
//			КонецЕсли;
//				
//		КонецЕсли;
//		
//    КонецЦикла; 
//	
//	
//	
//	// таблица собрана
//	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
//	ТекНом = "-";
//	КодК = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Контрагент.Код),"_");
//	КодКонтр = Формат(Число(КодК[1]), "ЧГ=");
//	
//	ТабОшибок = Новый ТаблицаЗначений;
//	ТабОшибок.Колонки.Добавить("Номер");
//	ТабОшибок.Колонки.Добавить("Ошибка");
//	ТабОшибок.Колонки.Добавить("Кол");
//	
//	ТабЗагруженных = Новый ТаблицаЗначений;
//	ТабЗагруженных.Колонки.Добавить("Номер");
//	ТабЗагруженных.Колонки.Добавить("НомерНаш");
//	
//	ЗаказНеЗагружаем = "";
//	
//	
//	ТабСум = ТабЗаказов.Скопировать();
//	ТабСум.Колонки.добавить("Сумма");
//	Для Каждого Тек Из ТабСум Цикл
//		
//		Тек.Сумма = Тек.СтоимостьТовара;
//		//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");
//		//Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
//		//Попытка		
//		//	Тек.Сумма = Число(Тек.Количество) * Число(Тек.СтоимостьТовара);       
//		//Исключение
//		//	Тек.Сумма = 0;
//		//КонецПопытки;	
//	КонецЦикла;	
//	
//	ТабСум.Свернуть("НомерЗаказа", "Сумма");
//    
//    ТабЗаказов.Колонки.Добавить("Дубль");
//	Для Каждого Тек Из ТабЗаказов Цикл  
//		
//		Если ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
//			
//			Тек.ДатаДоставки = ИзСтрокиВДату(СтрЗаменить(Тек.ДатаДоставки, "/", "."));
//		
//	        Если Шаблон.БезДублей Тогда //делаем проверку на наличие заказа в админке по внешнему номеру 
//				
//				// -- новый код		
//				Рез = mas.ВнешнийНомерЕстьВАдминке(СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")), Контрагент.Код);
//				Если Рез Тогда
//				    НовОш = ТабОшибок.Добавить();
//				    НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
//				    НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
//				    ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
//				    Тек.Дубль = Истина;
//				Иначе
//				    Тек.Дубль = Ложь;
//				КонецЕсли;
//				
//				// -- старый код
//				//Стр = "SELECT orderIDImport from _order WHERE orderIDImport =" +"'"+ СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""))+"'";
//				//ТабДублей = smv.СформироватьТаблицуЗначенийИзДанныхSQL(Стр);
//				//Если ТабДублей.Количество() >0 Тогда
//				//    НовОш = ТабОшибок.Добавить();
//				//    НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
//				//    НовОш.Ошибка = "Такой заказ уже есть в системе "+СокрЛП(Тек.НомерЗаказа)+" это дубль!";
//				//    ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
//				//    Тек.Дубль = Истина;
//				//Иначе
//				//    Тек.Дубль = Ложь;
//				//КонецЕсли;
//	        Иначе
//	            Тек.Дубль = Ложь;
//			КонецЕсли;
//		КонецЕсли;
//		
//    КонецЦикла;
//    
//     
//	
//	СтоимостьДоставкиИтог = 0;

//    
//	Для Каждого Тек Из ТабЗаказов Цикл  
//		
//		Если ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
//			
//			СтрокаДоставки = Ложь;
//			
//	        Если Тек.Дубль Тогда
//	            Продолжить;   
//			КонецЕсли;
//			
//			// строка Итого
//			НайИтог = СтрНайти(Тек.НомерЗаказа, "Итого");
//			Если НайИтог > 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			
//			//строка с доставкой
//			Если НЕ ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
//				Продолжить;			
//			КонецЕсли;
//			
//			
//			Попытка
//				Тек.НомерЗаказа = СокрЛП(Тек.НомерЗаказа);
//				//Тек.НомерЗаказа = Формат(Число(Тек.НомерЗаказа), "ЧГ=");   //           !!!!!!!!!!!!!!!!!!!!!!!!
//			Исключение
//				НовОш = ТабОшибок.Добавить();
//				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
//				НовОш.Ошибка = ОписаниеОшибки();
//			КонецПопытки;
//			
//			Если СокрЛП(Тек.НомерЗаказа) = ЗаказНеЗагружаем Тогда
//				Продолжить;
//			КонецеСли;	
//			
//			СтрокаБезОшибок = ПроверитьСтрокуНаЗаполненность(Тек, Шаблон);
//			Игнорировать = ПроверитьСтрокуНаИгнорирование(Тек, Шаблон);
//			Если Игнорировать Тогда
//				Продолжить;
//			КонецеСли;	
//			
//			Если СтрокаБезОшибок <> Истина Тогда
//				НовОш = ТабОшибок.Добавить();
//				НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
//				НовОш.Ошибка = СтрокаБезОшибок;
//				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
//				Продолжить;
//			КонецеСли;	
//			
//			
//			Попытка
//				
//				Если ЗначениеЗаполнено(Тек.СтоимостьТовара) Тогда
//					Если ТипЗнч(Тек.СтоимостьТовара) = Тип("Строка") Тогда
//						//Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, ",", ".");
//						Тек.СтоимостьТовара = СтрЗаменить(Тек.СтоимостьТовара, " ", "");
//						Тек.СтоимостьТовара = Число(Тек.СтоимостьТовара);
//					КонецеСли;	
//				КонецеСли;	
//				
//				//Если Не ЗначениеЗаполнено(Тек.Адрес) Тогда
//				//	Тек.Адрес = "г " + Тек.ГородДоставки + ",ул " + Тек.УлицаДоставки;
//				//Иначе
//				//	Тек.Адрес = "";
//				//КонецЕСли;	
//				
//				Тек.Адрес = "" + Тек.ГородДоставки + ", " + Тек.Адрес;
//				
//				
//				Если Не ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда
//					Тек.СтоимостьДоставки = 0;
//				Иначе
//					Тек.СтоимостьДоставки = Формат(Окр(Число(Тек.СтоимостьДоставки)), "ЧРД=.; ЧН=0; ЧГ=");
//				КонецЕСли;	
//				
//				//Если ЗначениеЗаполнено(Тек.СтоимостьДоставки) Тогда		
//				//	СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + Тек.СтоимостьДоставки;	
//				//КонецЕсли;
//				
//				Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
//					Тек.ВесОбщий = 0;
//				Иначе
//					Тек.ВесОбщий = Формат(Число(Тек.ВесОбщий), "ЧРД=.; ЧН=0; ЧГ=");
//				КонецЕСли;	
//				
//				
//				
//				//Если Не ЗначениеЗаполнено(Тек.ОбщаяЦена) Тогда
//				//	Тек.СтоимостьТовара = 0;
//				//Иначе
//				//	Тек.СтоимостьТовара = Формат(Окр(Число(Тек.ОбщаяЦена/Тек.Количество)), "ЧРД=.; ЧН=0; ЧГ=");
//				//КонецеСли;
//				
//							
//				Если Не ЗначениеЗаполнено(Тек.Итого) Тогда
//					Тек.Итого = 0;
//				Иначе	
//					Попытка				
//						Тек.Итого = Число(Тек.Итого);					
//					Исключение			
//					КонецПопытки;		
//				КонецеСли;
//				
//				//Попытка
//				//	Тек.КодТовара = Формат(Число("6666666"), "ЧГ=");
//				//Исключение		
//				//КонецПопытки;
//				
//				Попытка				
//					Тек.КоличествоМест = Число(СокрЛП(Тек.КоличествоМест));			
//				Исключение					
//					Тек.КоличествоМест = "null";			
//				КонецПопытки;
//				
//				
//				Попытка
//					Тек.ТелефонМобильный = Формат(Число(Тек.ТелефонМобильный), "ЧГ=");
//				Исключение
//					
//				КонецПопытки;
//				Попытка
//					Тек.ТелефонГородской = Формат(Число(Тек.ТелефонГородской), "ЧГ=");
//				Исключение
//					
//				КонецПопытки;	
//				Если ЗначениеЗаполнено(Тек.ТелефонГородской) Тогда
//					Тек.ТелефонМобильный = Тек.ТелефонМобильный + ";" + Тек.ТелефонГородской;
//				КонецеСли;
//				
//				Если ТипЗнч(Тек.ДатаДоставки) = Тип("Строка") Тогда
//					Тек.ДатаДоставки = ИзСтрокиВДату(СтрЗаменить(Тек.ДатаДоставки, "/", "."));
//				КонецеСли;	
//				
//				Если Не ЗначениеЗаполнено(Тек.ДатаДоставки) Тогда
//					Тек.ДатаДоставки = ТекущаяДата() + 86400;
//				КонецеСли;	
//				
//				Попытка
//					Тек.Количество = Формат(Число(Тек.Количество), "ЧРД=.; ЧН=0; ЧГ=");
//				Исключение
//					Тек.Количество = 1;			
//				КонецПопытки;
//				
//				
//				Если Не ЗначениеЗаполнено(Тек.ИнтервалДоставки) Тогда
//					Тек.ИнтервалДоставки = "10-18";
//				Иначе
//					Если Лев(Тек.ИнтервалДоставки, 1) = "9" Тогда				
//						Тек.ИнтервалДоставки = "09-18";						
//					Иначе 
//						ПериодС = Число(Лев(Тек.ИнтервалДоставки, 1)) + 12; 						
//						Тек.ИнтервалДоставки = "" + ПериодС + "-24";					
//					КонецЕсли;				
//				КонецеСли;	
//				
//				
//				Если Не ЗначениеЗаполнено(Тек.ВесОбщий) Тогда
//					Тек.ВесОбщий = 0;
//				КонецеСли;	
//			
//					
//				
//				Если ТекНом <> Тек.НомерЗаказа Тогда
//					// создаём новый заказ
//					
//					Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем И Таб2 <> Неопределено Тогда
//						
//						//фиксация выгрузки
//						От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
//						//фиксация выгрузки окончание
//						
//						Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
//						R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
//						ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
//					                                                                                                                                                                      //ТабК[0].tariffCategoryId_Ч
//						Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", null, " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
//						Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
//						
//						Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
//							НовЗагр = ТабЗагруженных.Добавить();
//							НовЗагр.Номер = СтрЗаменить(ТекНом, Символы.НПП, "");
//							НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
//		
//						КонецеСли;	
//					КонецеСли;	
//					
//					ТекНом = Тек.НомерЗаказа;
//					ИтВес = 0;
//					
//					
//					//ВремяС = Лев(СокрЛП(ИнтД[0]), 2);                 //           !!!!!!!!!!!!!!!!!!!!!!!!				
//					//ВремяС = Число(СтрЗаменить(ВремяС, "'", ""));    //           !!!!!!!!!!!!!!!!!!!!!!!!
//					//ВремяПо = Число(Лев(СокрЛП(ИнтД[1]), 2));       //           !!!!!!!!!!!!!!!!!!!!!!!!				
//					Интервал = СокрЛП(Тек.ИнтервалДоставки);
//					Интервал = СтрЗаменить(Интервал, "С", "");
//					Интервал = СтрЗаменить(Интервал, "с", "");
//					Интервал = СтрЗаменить(Интервал, "До", "-");
//					Интервал = СтрЗаменить(Интервал, "до", "-");
//					Интервал = СтрЗаменить(Интервал, "ДО", "-");
//					Интервал = СтрЗаменить(Интервал, " ", "");

//					
//					ИнтД = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Интервал,"-");
//					
//					Если ИнтД.Количество() Тогда				
//						ВремяС = СокрЛП(ИнтД[0]);	
//						Если ИнтД.Количество() > 1 Тогда		
//							ВремяПо = СокрЛП(ИнтД[1]);						
//						КонецЕсли;			
//					КонецЕсли;			
//					
//					
//					
//					//НайИт = ТабСум.Найти(ТекНом);
//					//Если НайИт <> Неопределено Тогда
//					//	Если ЗначениеЗаполнено(НайИт.Сумма) Тогда
//					//		ТипОплаты = "1";
//					//	Иначе
//					//		ТипОплаты = "7";
//					//	КонецеСли;	
//					//Иначе	
//					//	ТипОплаты = "1";
//					//КонецеСли;	
//					
//					// МАС - 10.07.2017 - №1310 --->> 
//					Если Тек.СтоимостьДоставки + Тек.СтоимостьТовара = 0 Тогда			
//						ТипОплаты = "7";					
//					Иначе				
//						ТипОплаты = "1";					
//					КонецЕсли;	
//					//ТипОплаты = "1";
//					// <<--- МАС 
//					
//					
//					// Тип оплаты
//					//Если Найти(ВРег(Тек.ТипОплатыEnter), "ОНЛАЙН") <> 0 Тогда	
//					//	ТипОплаты = "7";
//					//ИначеЕсли Найти(ВРег(Тек.ТипОплатыEnter), "НАЛИЧНЫЕ") <> 0 Тогда
//					//	ТипОплаты = "1";
//					//Иначе
//					//	НовОш = ТабОшибок.Добавить();
//					//	НовОш.Номер = СокрЛП(Тек.НомерЗаказа);
//					//	НовОш.Ошибка = "Не определен тип оплаты! (" + Тек.ТипОплатыEnter + ")";
//					//	Продолжить;
//					//КонецеСли;	
//					
//					
//					// Михушкин - 19.04.2017 --->> 	
//					Попытка
//						Тек.ФИО = СтрЗаменить(Тек.ФИО, "'", " ");	
//					Исключение					
//					КонецПопытки;
//					// <<--- Михушкин 
//					
//					НаборПользователь = евген.ЗапросКИнтернетМагазину("declare @tmp table (userid int, userAddressID int)
//					|insert into @tmp
//					|exec dbo.pb_UpdateUser null, '" + Тек.ФИО + "', null, null, '" + СокрЛП(Тек.ТелефонМобильный) + "', '" + СокрЛП(Тек.ТелефонГородской) + "','" + СокрЛП(Тек.Адрес) + "', null," + Строка(КодКонтр) + ", null, null, null, null, null, null, null, null, null, null, null, null, null, null,'" + ПараметрыСеанса.ТекущийПользователь + "', null
//					| select * from @tmp", Соединение);
//					Таб1 = Евген.СоздатьТаблицу(НаборПользователь, "userid_Ч, userAddressID_Ч");
//					UserId = Формат(Таб1[0].userid_Ч, "ЧГ=");
//					userAddressID = Формат(Таб1[0].userAddressID_Ч, "ЧГ=");
//					
//					СеттингИд = "0";
//					
//					//НашНом = "";
//					//Реал = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", СокрЛП(Тек.НомерЗаказа));
//					//Если Не Реал.Пустая() Тогда
//					//	НашНом = СокрЛП(Реал.Номер);
//					//КонецеСли;	
//					
//					Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + СеттингИд + ",0," + Формат(ИтВес, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
//					R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
//					ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
//	                
//					
//					//Стоимость доставки
//					НайДоставка = ТабЗаказов.НайтиСтроки(Новый Структура("НомерЗаказа", Тек.НомерЗаказа));
//					СтоимостьДоставкиИтог = 0;
//					Для Каждого НайСтр Из НайДоставка Цикл		
//						Если НЕ ЗначениеЗаполнено(НайСтр.СтоимостьТовара) И СтрНайти(НайСтр.НаименованиеТовара, "Доставка товара") И ЗначениеЗаполнено(НайСтр.СтоимостьДоставки) Тогда
//							СтоимостьДоставкиИтог = СтоимостьДоставкиИтог + НайСтр.СтоимостьДоставки;			
//						КонецЕсли;	
//					КонецЦикла;
//					
//					
//	                
//	                НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder null, " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null,'" + Формат(ВремяС, "ЧН=0; ЧГ=") + "','" + Формат(ВремяПо, "ЧН=0; ЧГ=") + "','"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].weightCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, "")) + "', 0,0,"+ Тек.КоличествоМест +",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,6," + Формат(Число(Тек.Итого), "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);	// + Формат(Число(Тек.СтоимостьТовара), "ЧРД=.; ЧН=0; ЧГ=")		
//				
//					//	НаборЗаказ = евген.ЗапросКИнтернетМагазину("declare @tmp table (Orderid int) insert into @tmp exec dbo.pb_UpdateOrder " + СокрЛП(НашНом) + ", " + UserId + "," + userAddressID + ",'" + Евген.ДатаВSQL(Тек.ДатаДоставки, Ложь) + "'," + Формат(Тек.СтоимостьДоставки, "ЧРД=.; ЧН=0; ЧГ=") + ",2,'" + СтрЗаменить(Тек.КомментарийКлиента, Символы.ПС, "")+ "',null,null," + Формат(ВремяС, "ЧН=0; ЧГ=") + "," + Формат(ВремяПо, "ЧН=0; ЧГ=") + ",'"  + ПараметрыСеанса.ТекущийПользователь + "'," + ТипОплаты + ",'" + Тек.ТелефонМобильный + "', '" + Тек.ТелефонГородской + "'," + Строка(ТабК[0].tariffCategoryId_Ч) + "," + СеттингИд + ", '" + СокрЛП(Тек.НомерЗаказа) + "', 0,0,1," + Формат(Тек.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + " select * from @tmp", Соединение);			
//					
//					Таб2 = Евген.СоздатьТаблицу(НаборЗаказ, "Orderid_Ч");
//				
//					СтоимостьДоставкиИтог = 0;
//					
//					
//					
//					// апдейтим ШК									
//					//СтрШК = "";
//					//МнСтрШК = СтрЗаменить(Тек.Штрихкод, ",", Символы.ПС);
//					//Для н = 1 По СтрЧислоСтрок(МнСтрШК) Цикл
//					//	СтрокаШК = СтрПолучитьСтроку(МнСтрШК, н);			
//					//	СтрШК = СтрШК + "insert into @tmp VALUES ("+ н +",'" + СокрЛП(СтрЗаменить(ТекНом, Символы.НПП, "")) + "')";									
//					//КонецЦикла;		
//					
//					СтрШК = "insert into @tmp VALUES (1,'" + СокрЛП(СтрЗаменить(ТекНом, Символы.НПП, "")) + "')";
//					
//					РезультатЗапроса = евген.ЗапросКИнтернетМагазину("declare @tmp [dbo].[TPieceBarcode] " + СтрШК + " exec dbo.service_setOrderBarcodes
//									|	@orderId	= " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ=") + "
//									|	,@login			= 'loreal2'
//									|	,@orderBarcodes	= @tmp", Соединение);

//		
//				КонецеСли;		
//				
//				//ВесТовара = Формат(Окр(Тек.ВесОбщий/Тек.Количество, 3), "ЧРД=.; ЧН=0; ЧГ=");
//				
//				СтоимостьТовара = 0;
//				Если ЗначениеЗаполнено(Тек.СтоимостьТовара) И ЗначениеЗаполнено(Тек.Количество) Тогда
//					СтоимостьТовара = Окр(Тек.СтоимостьТовара/Тек.Количество);	
//				КонецЕсли;
//				
//				
//				ВесТовара = 0;
//				Тек.НаименованиеТовара = СтрЗаменить(Тек.НаименованиеТовара, "'", "");
//				евген.ЗапросКИнтернетМагазину("                                                                                                                                                                                                                       
//				|exec dbo.pb_AddItemToOrder " + Формат(Таб2[0].OrderId_Ч, "ЧГ=") + ",'" + Тек.НаименованиеТовара + "','" + Тек.Артикул + "'," + Формат(Тек.Количество, "ЧРД=.; ЧН=0; ЧГ=") + ",0," + Формат(СтоимостьТовара, "ЧРД=.; ЧН=0; ЧГ=") + ",'" + Тек.КодТовара + "'," + Строка(ВесТовара), Соединение);
//				ИтВес = Число(Тек.ВесОбщий);
//				
//			Исключение
//				НовОш = ТабОшибок.Добавить();
//				НовОш.Номер = СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""));
//				НовОш.Ошибка = ОписаниеОшибки();
//				ЗаказНеЗагружаем = СокрЛП(Тек.НомерЗаказа);
//				Продолжить;
//	        КонецПопытки;
//        КонецЕсли;
//	КонецЦикла;	
//	
//	
//	Попытка
//		Если ТекНом <> "-" И ТекНом <> ЗаказНеЗагружаем Тогда
//			
//			//Если НЕ ЗначениеЗаполнено(Тек.ВесОбщий) Тогда	
//			//	Тек.ВесОбщий = 0;			
//			//КонецЕсли;
//			
//			//фиксация выгрузки
//			От = Евген.ЗапросКИнтернетМагазину("EXEC [dbo].[sp_updateOrderModifyDate] @orderId = " + Формат(Таб2[0].Orderid_Ч,"ЧРД=.; ЧН=0; ЧГ="), Соединение);
//			//фиксация выгрузки окончание
//			
//			
//			Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + КодКонтр + "," + "0" + ",0," + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
//			R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
//			ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
//                                                                                                                                                                               //ТабК[0].tariffCategoryId_Ч
//			Стр = "EXEC import_setOrderWeigth " + Формат(Таб2[0].Orderid_Ч, "ЧРД=.; ЧН=0; ЧГ=")  + ", " + Формат(Число(ИтВес), "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(1) + ", " + Строка(5) + ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(ТабК[0].deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(ТабК[0].weightCategoryId_Ч); 
//			Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
//			
//			Если ТабОшибок.Найти(ТекНом) = Неопределено Тогда
//				НовЗагр = ТабЗагруженных.Добавить();
//				НовЗагр.Номер = СтрЗаменить(ТекНом, Символы.НПП, "");
//				НовЗагр.НомерНаш = Формат(Таб2[0].OrderId_Ч, "ЧГ=");
//			КонецеСли;	
//		КонецеСли;
//	Исключение
//		НовОш = ТабОшибок.Добавить();
//		НовОш.Номер = СокрЛП(СтрЗаменить(Тек.НомерЗаказа, Символы.НПП, ""));
//		НовОш.Ошибка = ОписаниеОшибки();
//	КонецПопытки;
//	Возврат Истина;
//	
//КонецФункции
#КонецОбласти

Процедура РегламентПривязкаАдресовDaData() Экспорт
	Обр = Обработки.ПривязкаАдресовDaData.Создать();
	Обр.ДатаНачала = НачалоДня(НачалоДня(ТекущаяДата() + 86400));
	Обр.ДатаОкончания = КонецДня(ТекущаяДата() + 86400);
	Обр.ВыполнитьПривязкуАдресов();
КонецПроцедуры	

Процедура ЗафиксироватьДопПараметрыВЧеке(Чек, ПараметрыЧека) Экспорт
	Наб = РегистрыСведений.ДополнительныеПараметрыЧеков.СоздатьНаборЗаписей();
	Наб.Отбор.ЧекККМ.установить(Чек);
	Наб.Прочитать();
	
	Если Наб.Количество() = 0 Тогда
		Нов = Наб.Добавить();
	Иначе
		Нов = Наб[0];
	КонецеСли;	
	ЗаполнитьЗначенияСвойств(Нов, ПараметрыЧека);
	Нов.ЧекККМ = Чек;
	Попытка
		Нов.ФН = ККМ_ФЗ_54.ПолучитьФН(ПараметрыЧека.ФН);
	Исключение
		
	КонецПопытки;	
	Наб.Записать();
КонецПроцедуры	

Функция ПолучитьШтрихкодыИзмеренияГабаритов(ЛинейкаИзмеренияГабаритов = Неопределено) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ШтрихкодыИзмеренияГабаритов.ЛинейкаИзмерения КАК ЛинейкаИзмерения,
	|	ШтрихкодыИзмеренияГабаритов.Измерение КАК Измерение,
	|	ШтрихкодыИзмеренияГабаритов.ПоказательИзмерения КАК ПоказательИзмерения,
	|	ШтрихкодыИзмеренияГабаритов.ШтрихкодИзмерения КАК ШтрихкодИзмерения,
	|	ЛОЖЬ КАК ОтменаИзмерения
	|ИЗ
	|	РегистрСведений.ШтрихкодыИзмеренияГабаритов КАК ШтрихкодыИзмеренияГабаритов
	|ГДЕ
	|	1 = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛинейкиИзмеренияГабаритов.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ЛинейкиИзмеренияГабаритов.ШКОтменяющийИзмерение,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ЛинейкиИзмеренияГабаритов КАК ЛинейкиИзмеренияГабаритов
	|ГДЕ
	|	2 = 2";
	Если ЛинейкаИзмеренияГабаритов <> Неопределено Тогда
		Зап.Текст = СтрЗаменить(Зап.Текст, "1 = 1", "ШтрихкодыИзмеренияГабаритов.ЛинейкаИзмерения = &Линейка");
		Зап.Текст = СтрЗаменить(Зап.Текст, "2 = 2", "ЛинейкиИзмеренияГабаритов.Ссылка = &Линейка");
		Зап.УстановитьПараметр("Линейка", ЛинейкаИзмеренияГабаритов.Ссылка);
	КонецеСли;
	
	Рез = Зап.Выполнить().Выгрузить();
	Возврат Рез;
КонецФункции	

Функция ПолучитьАктуальнуюЛинейкуИзмерененияГабаритов(Склад = Неопределено, ДатаЗапроса = Неопределено) Экспорт
	Если ДатаЗапроса = Неопределено Тогда
		ДатаЗапроса = ТекущаяДата();
	КонецеСли;	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	АктуальныеЛинейкиИзмеренияГабаритовСрезПоследних.ЛинейкаИзмеренияГабаритов КАК ЛинейкаИзмеренияГабаритов
	|ИЗ
	|	РегистрСведений.АктуальныеЛинейкиИзмеренияГабаритов.СрезПоследних(&ДатаЗапроса, 1 = 1) КАК АктуальныеЛинейкиИзмеренияГабаритовСрезПоследних";
	
	Зап.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Если Склад <> Неопределено Тогда
		Зап.Текст = СтрЗаменить(Зап.Текст, "1 = 1", "Склад = &ВыбСклад");
		Зап.УстановитьПараметр("ВыбСклад", Склад.Ссылка);
	КонецеСли;
	
	Рез = Зап.Выполнить();
	Если Склад <> Неопределено И Рез.Пустой() Тогда
		// выбираем без отбора по складу
		Зап.Текст = "ВЫБРАТЬ
		|	АктуальныеЛинейкиИзмеренияГабаритовСрезПоследних.ЛинейкаИзмеренияГабаритов КАК ЛинейкаИзмеренияГабаритов
		|ИЗ
		|	РегистрСведений.АктуальныеЛинейкиИзмеренияГабаритов.СрезПоследних(&ДатаЗапроса) КАК АктуальныеЛинейкиИзмеренияГабаритовСрезПоследних";
		Зап.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
		Рез = Зап.Выполнить();
	КонецЕсли;	
	
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб = Рез.Выбрать();
		Если Выб.Следующий() Тогда
			Возврат Выб.ЛинейкаИзмеренияГабаритов;
		Иначе
			Возврат Неопределено;
		КонецеСли;	
	КонецеСли;	
КонецФункции	

Функция ЭтоТестоваяСреда() Экспорт
	//Если Константы.БазаСД.Получить() = "mainshop" Тогда
	//	Возврат Ложь;
	//Иначе
		Возврат Константы.ЭтоТестоваяСреда.Получить();
	//КонецеСли;	
КонецФункции	

Функция ВернутьСтруктуруПоXDTO(ДанныеXDTO, Струк = Неопределено) Экспорт
	Если Струк = Неопределено Тогда
		Струк = Новый Структура;
	КонецеСли;	
	Свойства = ДанныеXDTO.Свойства();
	Для Каждого Тек Из Свойства Цикл
		Струк.Вставить(Тек.Имя, ДанныеXDTO[Тек.Имя]);
	КонецЦикла;	
	Возврат Струк;
КонецФункции

Функция ПользователюВключенМониторингЗаказов() Экспорт
	Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РабочееМестоМониторинга");
КонецФункции	

Функция ЭтоРабочееМестоКассира() Экспорт
	Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РабочееМестоКассира");
КонецФункции	


// МАС - 02.11.2017 - №2002 --->>
Процедура ОбработатьМеста(Док)
	
	МассивКонтрагентов = Док.Штрихкоды.Выгрузить(, "Контрагент");
	
	
	ЗапросКонтр = Новый Запрос("ВЫБРАТЬ
	|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам, ЛОЖЬ) КАК УчетЗаказовПоМестам
	|ИЗ
	|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент В (&МассивКонтрагентов)) КАК ПараметрыКонтрагентовСрезПоследних");	
	ЗапросКонтр.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	КонтрагентыТЗ = ЗапросКонтр.Выполнить().Выгрузить();
	
	
	
	Для каждого Стр Из Док.Штрихкоды Цикл		
		
		НайКонтр = КонтрагентыТЗ.НайтиСтроки(Новый Структура("Контрагент", Стр.Контрагент));		
		Если НайКонтр.Количество() И НайКонтр[0].УчетЗаказовПоМестам Тогда
			
			ЗапросМеста = Новый Запрос("ВЫБРАТЬ
			|	МестаПоЗаказам.Ссылка КАК Место
			|ИЗ
			|	Справочник.МестаПоЗаказам КАК МестаПоЗаказам
			|ГДЕ
			|	МестаПоЗаказам.Штрихкод = &Штрихкод");	
			ЗапросМеста.УстановитьПараметр("Штрихкод", Стр.Штрихкод);
			РезМесто = ЗапросМеста.Выполнить().Выбрать();
			Если РезМесто.Следующий() Тогда
				
				Стр.МестоЗаказа = РезМесто.Место;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	
	
КонецПроцедуры
// <<--- МАС


Процедура ЗадержкаВыполненияКодаЧерезСетевойИнтерфейс(СколькоСекунд) Экспорт
	Shell = Новый COMОбъект("WScript.Shell"); 
	Shell.Run("ping 127.0.0.1 -n " + Формат(СколькоСекунд, "ЧН=0; ЧГ="),0,1);		
КонецПроцедуры	

// приблуда для конвертации ТЗ в массив структур
Функция ТабЗначВМассив(ТаблицаЗначений) Экспорт
	НашМассив = Новый Массив;
	Для Каждого СтрокаТаблицы из ТаблицаЗначений Цикл
		НашаСтруктура = Новый Структура;
		Счетчик = 0;
		Для Каждого СтрокаСтруктуры из СтрокаТаблицы Цикл
			Если НЕ ТипЗнч(СтрокаСтруктуры) = Тип(ТаблицаЗначений) тогда
				НашаСтруктура.Вставить(ТаблицаЗначений.Колонки[Счетчик].Имя,СтрокаТаблицы[Счетчик]);
			Иначе
				НашаСтруктура.Вставить(ТаблицаЗначений.Колонки[Счетчик].Имя,ТабЗначВМассив(СтрокаСтруктуры));
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		НашМассив.Добавить(НашаСтруктура);
	КонецЦикла;
	Возврат(НашМассив);
КонецФункции


//+Степанов
Функция ЗагрузитьЗаказы(Контрагент, Шаблон, Данные, ИмяФайла) Экспорт
	
	ПутьКВременномуФайлу = КаталогВременныхФайлов() + "\" + ИмяФайла;
	//ПутьКВременномуФайлу = КаталогВременныхФайлов() + ИмяФайла + ".xls";

	
	Данные.Записать(ПутьКВременномуФайлу);
	ТабДок = Новый ТабличныйДокумент;	
	
	
	// МАС - 15.06.2018 - № --->> 
	//Если Не ПрочитатьТабличныйДокументИзExcel(ТабДок, КаталогВременныхФайлов() + "\" + ИмяФайла,,Ошибка) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	
	
	Попытка
		Если СокрП(Контрагент.Код) = "Shop_680" Тогда
			РезультатЧтенияДокумента = lem.ПрочитатьТабличныйДокументИзExcel(ТабДок,ПутьКВременномуФайлу,,"");
			Если ТипЗнч(РезультатЧтенияДокумента) = Тип("Строка") Тогда
				Возврат Новый Структура("ОшибкаЗагрузки,ФайлЗагрузки",РезультатЧтенияДокумента,ПутьКВременномуФайлу);
			КонецЕсли;	
		Иначе
			ТабДок.Прочитать(ПутьКВременномуФайлу, СпособЧтенияЗначенийТабличногоДокумента.Текст);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
		КонецЕсли;	
	Исключение
		Сообщить( "При загрузке заказов " + Контрагент.Наименование + " не удалось прочитать файл " + ИмяФайла);
		Возврат Новый Структура("ОшибкаЗагрузки,ФайлЗагрузки",ОписаниеОшибки(),ПутьКВременномуФайлу);
	КонецПопытки;
	// <<--- МАС 
	
	ТипСтрока7   = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(7, ДопустимаяДлина.Переменная));
	ТипСтрока50  = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная));
	ТипСтрока100 = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	ТипСтрока200 = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная));
	ТипСтрока500 = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная));
	ТипЧисло102  = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло105  = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 5, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло105СоЗнаком = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 5));
	ТипДата = Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТабЗаказов  = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("НомерЗаказа",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("Адрес", ТипСтрока500);
	ТабЗаказов.Колонки.Добавить("ВесОбщий",ТипЧисло105);
	ТабЗаказов.Колонки.Добавить("КоличествоМест",ТипЧисло102);
	ТабЗаказов.Колонки.Добавить("ДатаДоставки",ТипСтрока50);  
	ТабЗаказов.Колонки.Добавить("ДатаЗаказа",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставки",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставкиС",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ИнтервалДоставкиПо",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("Итого",ТипЧисло102);
	ТабЗаказов.Колонки.Добавить("КодТовара",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("Артикул",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("Количество",ТипЧисло105СоЗнаком);
	ТабЗаказов.Колонки.Добавить("КомментарийКлиента",ТипСтрока500);
	ТабЗаказов.Колонки.Добавить("ШтрихкодЗаказа",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("НаименованиеТовара",ТипСтрока500);
	ТабЗаказов.Колонки.Добавить("Район",ТипСтрока500);
	ТабЗаказов.Колонки.Добавить("СтоимостьДоставки",ТипЧисло102);
	ТабЗаказов.Колонки.Добавить("ОценочнаяСтоимостьЗаказа",ТипЧисло102);
	ТабЗаказов.Колонки.Добавить("ОбщаяЦена",ТипЧисло102);
	ТабЗаказов.Колонки.Добавить("СтоимостьТовара",ТипЧисло102);
	ТабЗаказов.Колонки.Добавить("ТелефонМобильный",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("РегионДоставки",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ТелефонГородской",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ТипОплатыEnter",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ФИО",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("Штрихкод",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ОбъемОбщий",ТипЧисло105);
	ТабЗаказов.Колонки.Добавить("УлицаДоставки",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ГородДоставки", ТипСтрока50,);
	ТабЗаказов.Колонки.Добавить("КатегорияДоставки",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("Email",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ЦенаТовара",ТипЧисло102);
	ТабЗаказов.Колонки.Добавить("НДСДоставка",ТипСтрока7);
	ТабЗаказов.Колонки.Добавить("НДСТовара",ТипСтрока7);
	//+Степанов Задача № 3895
	ТабЗаказов.Колонки.Добавить("КодМаркировки",ТипСтрока200); 
	//-Степанов Задача № 3895
	//Асеев 28.11.2022 (Задача № 4935)>>>
	ТабЗаказов.Колонки.Добавить("ИдентификаторСкладаМагазина",ТипСтрока50); 
	ТабЗаказов.Колонки.Добавить("НаименованиеСкладаМагазина",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("РегионСкладаМагазина",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("АдресСкладаМагазина",ТипСтрока100);
	ТабЗаказов.Колонки.Добавить("КонтактноеЛицоСкладаМагазина",ТипСтрока500);
	ТабЗаказов.Колонки.Добавить("КонтактныйТелефонСкладаМагазина",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("EMAILСкладаМагазина",ТипСтрока100);
	ТабЗаказов.Колонки.Добавить("ИнтервалССкладаМагазина",ТипСтрока50);
	ТабЗаказов.Колонки.Добавить("ИнтервалПоСкладаМагазина",ТипСтрока50);
	//Асеев 28.11.2022 (Задача № 4935)<<<
	
	ПослНомер = "";
	
	ПроливаемыеПоля = Новый Соответствие;
	
	Для СчСтрок = Шаблон.ПерваяСтрокаДанных По Макс(ТабДок.ВысотаТаблицы, 1000) Цикл
		Нов = ТабЗаказов.Добавить();
		Для СчКолонок = 1 По Макс(ТабДок.ШиринаТаблицы, 100) Цикл
			Если Шаблон.ВариантПоискаКолонки = 0 Тогда
				НайКолонка = Шаблон.Поля.Найти(СчКолонок, "Порядок");                               			
			Иначе
				НайКолонка = Шаблон.Поля.Найти(ТабДок.Область("R" + Формат(Шаблон.НомерСтрокиНаименованийКолонок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст, "Наименование");                               			
			КонецеСли;	
			
			
			//+Степанов Костыль для L'Oreal(B2B), там адрес разбит на две колонки.
			Если СчКолонок = 24 И СокрП(Контрагент.Код) = "Shop_680" Тогда
				НачалоАдреса = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок - 1, "ЧГ=")).Текст;
				КонецАдреса  = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
				Значение = НачалоАдреса + ?(СтрНачинаетсяС(КонецАдреса,",")," "," ,") + КонецАдреса;
				
				Если СокрЛП(Значение) = "," Тогда Значение = "" КонецЕсли; //Проверка на пустые адреса
			Иначе	
				Значение = ТабДок.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(СчКолонок, "ЧГ=")).Текст;
			КонецЕсли;
			Если НайКолонка = Неопределено Тогда
				Продолжить;
			КонецеСли;	
			
			Нов[НайКолонка.Поле.Наименование] = Значение;
			
			Если ЗначениеЗаполнено(НайКолонка.СоответствиеЗначений) Тогда
				НайденноеСоответствие = НайКолонка.СоответствиеЗначений.Соответствие.Найти(СокрЛП(Нов[НайКолонка.Поле.Наименование]), "ЗначениеПоля");
				Если НайденноеСоответствие <> Неопределено Тогда
					Нов[НайКолонка.Поле.Наименование] = НайденноеСоответствие.ЗначениеБД;
				КонецеСли;	
			КонецеСли;	
			
			
			Если НайКолонка.Поле.Наименование = "НомерЗаказа" Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПослНомер = Значение;
				ИначеЕсли ЗначениеЗаполнено(ПослНомер) Тогда
					Нов[НайКолонка.Поле.Наименование] = ПослНомер;
				КонецеСли;	
			ИначеЕсли НайКолонка.ПроливатьЗначенияНаНеЗаполненныеЗначения Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					ПроливаемыеПоля.Вставить(НайКолонка.Поле.Наименование, Значение);
				ИначеЕсли ЗначениеЗаполнено(ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование)) Тогда
					Если НайКолонка.Поле.Наименование = "ИнтервалДоставки" ИЛИ НайКолонка.Поле.Наименование = "Отд"  Тогда
						Нов[НайКолонка.Поле.Наименование] = ПроливаемыеПоля.Получить(НайКолонка.Поле.Наименование);
					Иначе
						//Если ЗначениеЗаполнено(ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование]) Тогда
						Если ТабЗаказов[ТабЗаказов.Индекс(Нов)].НомерЗаказа = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1].НомерЗаказа Тогда 
							Нов[НайКолонка.Поле.Наименование]  = ТабЗаказов[ТабЗаказов.Индекс(Нов)-1][НайКолонка.Поле.Наименование];     
						КонецЕсли;
						//КонецеСли;
					КонецЕсли;
				КонецЕсли;					
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
	//Серегин М.В. 20.05.2015 18:09:12 
	Для каждого Стр Из ТабЗаказов Цикл
		АртикулУслуги = СтрЗаменить(Стр.КодТовара,Символ(160),"");
		НомерЗаказа = СтрЗаменить(Стр.НомерЗаказа,Символ(160),"");
		Если ЗначениеЗаполнено(АртикулУслуги) Тогда 
			НайденаяУслуга = Справочники.УслугиПоЗаказам.НайтиПоРеквизиту("Артикул",АртикулУслуги);
			Если ЗначениеЗаполнено(НайденаяУслуга) И НЕ НайденаяУслуга.ПометкаУдаления Тогда
				НаборЗаписей = РегистрыСведений.НазначениеУслугПозаказам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.НомерВнешнегоЗаказа.Установить(НомерЗаказа); 
				НаборЗаписей.Отбор.Услуга.Установить(НайденаяУслуга);  
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
				Запись = НаборЗаписей.Добавить();
				Запись.Период = ТекущаяДата();
				Запись.НомерВнешнегоЗаказа = НомерЗаказа;
				Запись.Услуга = НайденаяУслуга;
				Запись.Контрагент = Контрагент;
				Запись.Стоимость = Стр.ОбщаяЦена;
				Запись.Статус = Перечисления.СтатусыУслугПоЗаказам.ВыгруженаИзПочты;
				НаборЗаписей.Записать();
				//ТабЗаказов.Удалить(Стр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	//Серегин М.В. 20.05.2015 18:09:14 
	
	
	// МАС - 24.05.2018 - № --->> 
	МассивЛишнихСтрок = новый Массив;
	Для каждого Стр Из ТабЗаказов Цикл
		Если НЕ ЗначениеЗаполнено(Стр.ДатаДоставки) И НЕ ЗначениеЗаполнено(Стр.Адрес) Тогда	
			МассивЛишнихСтрок.Добавить(Стр);		
		КонецЕсли;		
	КонецЦикла;
	
	Для каждого СтрМас Из МассивЛишнихСтрок Цикл		
		ТабЗаказов.Удалить(СтрМас);		
	КонецЦикла;
	// <<--- МАС	
	Возврат СоздатьЗаказыЧерезAPI(ТабЗаказов,Контрагент,ПутьКВременномуФайлу,Шаблон);	
	
КонецФункции	

Функция СоздатьЗаказыЧерезAPI(ТаблицаЗаказов,Контрагент,ПутьКВременномуФайлу,Шаблон)
	
	СведенияОбОшибках = "Сведения об ошибках:";
	СозданныеЗаказы = "Созданы заказы с номерами:";
	КоличествоСозданныхЗаказов = 0;
	КоличествоНесозданныхЗаказов = 0;
	Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
	ЭтоЛореаль =  СокрП(Контрагент.Код) = "Shop_680";//У Shop_680 свои алгоритмы получения типа оплаты и интервала доставки
	КодКонтрагента = СокрП(Контрагент.Код); // Задача № 3415 Временно! Для обработки исключительной ситуации для Русклимат, ТехЭйр и Окунева
	
	СтруктураАвторизации = ИнтеграцияССервисомSync.СтруктураДоступаSync(Контрагент);
	
	//Асеев 28.11.2022 (Задача № 4935)>>>
	Если Шаблон.СоздаватьСкладыМагазинов Тогда
		//соберем информацию о переданных складах, найдем отсутствующие и создадим
		МассивСтрокСкладовКУдалению = Новый Массив;
		ТаблицаСкладов = ТаблицаЗаказов.Скопировать(, "ИдентификаторСкладаМагазина,НаименованиеСкладаМагазина,РегионСкладаМагазина,АдресСкладаМагазина,КонтактноеЛицоСкладаМагазина,КонтактныйТелефонСкладаМагазина,EMAILСкладаМагазина,ИнтервалССкладаМагазина,ИнтервалПоСкладаМагазина");
		Для Каждого СтрокаСклада Из ТаблицаСкладов Цикл
			СтрокаСклада.ИдентификаторСкладаМагазина = СокрЛП(СтрокаСклада.ИдентификаторСкладаМагазина);
			Если СтрокаСклада.ИдентификаторСкладаМагазина = "" Тогда
				МассивСтрокСкладовКУдалению.Добавить(СтрокаСклада);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаСклада Из МассивСтрокСкладовКУдалению Цикл
			ТаблицаСкладов.Удалить(СтрокаСклада);
		КонецЦикла;
		Если ТаблицаСкладов.Количество() Тогда
			ТаблицаСкладов.Свернуть("ИдентификаторСкладаМагазина,НаименованиеСкладаМагазина,РегионСкладаМагазина,АдресСкладаМагазина,КонтактноеЛицоСкладаМагазина,КонтактныйТелефонСкладаМагазина,EMAILСкладаМагазина,ИнтервалССкладаМагазина,ИнтервалПоСкладаМагазина");
			//уникальные идентификаторы
			ТаблицаИдентификаторов = ТаблицаСкладов.Скопировать(, "ИдентификаторСкладаМагазина");
			ТаблицаИдентификаторов.Свернуть("ИдентификаторСкладаМагазина");
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаИдентификаторов.ИдентификаторСкладаМагазина КАК ИдентификаторСкладаМагазина
			|ПОМЕСТИТЬ ВТ_ИдентификаторыСкладов
			|ИЗ
			|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ИдентификаторыСкладов.ИдентификаторСкладаМагазина КАК ИдентификаторСкладаМагазина
			|ИЗ
			|	ВТ_ИдентификаторыСкладов КАК ВТ_ИдентификаторыСкладов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладыМагазинов КАК СкладыМагазинов
			|		ПО ВТ_ИдентификаторыСкладов.ИдентификаторСкладаМагазина = СкладыМагазинов.ИдентификаторНаправления
			|			И (СкладыМагазинов.Владелец = &Контрагент)
			|ГДЕ
			|	СкладыМагазинов.ИдентификаторНаправления ЕСТЬ NULL";
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				//надо создавать склады
				ОшибкаСозданияСклада = Ложь;
				СтруктураИдентификатор = Новый Структура("ИдентификаторСкладаМагазина");
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтруктураИдентификатор.ИдентификаторСкладаМагазина = Выборка.ИдентификаторСкладаМагазина;
					СтрокиСклада = ТаблицаСкладов.НайтиСтроки(СтруктураИдентификатор);
					Если СтрокиСклада.Количество() = 1 Тогда
						//все просто
						СтрокаДанныхСклада = СтрокиСклада[0];
					Иначе
						//выберем заполненные значения
						СтрокаДанныхСклада = СтрокиСклада[0];//собираем сюда из остальных строк
						Для Каждого СтрокаСклада Из СтрокиСклада Цикл
							Если Не ПустаяСтрока(СтрокаСклада.НаименованиеСкладаМагазина) Тогда
								СтрокаДанныхСклада.НаименованиеСкладаМагазина = СтрокаСклада.НаименованиеСкладаМагазина;
							КонецЕсли;
							Если Не ПустаяСтрока(СтрокаСклада.РегионСкладаМагазина) Тогда
								СтрокаДанныхСклада.РегионСкладаМагазина = СтрокаСклада.РегионСкладаМагазина;
							КонецЕсли;
							Если Не ПустаяСтрока(СтрокаСклада.АдресСкладаМагазина) Тогда
								СтрокаДанныхСклада.АдресСкладаМагазина = СтрокаСклада.АдресСкладаМагазина;
							КонецЕсли;
							Если Не ПустаяСтрока(СтрокаСклада.КонтактноеЛицоСкладаМагазина) Тогда
								СтрокаДанныхСклада.КонтактноеЛицоСкладаМагазина = СтрокаСклада.КонтактноеЛицоСкладаМагазина;
							КонецЕсли;
							Если Не ПустаяСтрока(СтрокаСклада.КонтактныйТелефонСкладаМагазина) Тогда
								СтрокаДанныхСклада.КонтактныйТелефонСкладаМагазина = СтрокаСклада.КонтактныйТелефонСкладаМагазина;
							КонецЕсли;
							Если Не ПустаяСтрока(СтрокаСклада.EMAILСкладаМагазина) Тогда
								СтрокаДанныхСклада.EMAILСкладаМагазина = СтрокаСклада.EMAILСкладаМагазина;
							КонецЕсли;
							Если Не ПустаяСтрока(СтрокаСклада.ИнтервалССкладаМагазина) Тогда
								СтрокаДанныхСклада.ИнтервалССкладаМагазина = СтрокаСклада.ИнтервалССкладаМагазина;
							КонецЕсли;
							Если Не ПустаяСтрока(СтрокаСклада.ИнтервалПоСкладаМагазина) Тогда
								СтрокаДанныхСклада.ИнтервалПоСкладаМагазина = СтрокаСклада.ИнтервалПоСкладаМагазина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					//создаем склады
					Если Не (ПустаяСтрока(СтрокаДанныхСклада.НаименованиеСкладаМагазина) Или ПустаяСтрока(СтрокаДанныхСклада.АдресСкладаМагазина)) Тогда
						ДанныеСклада = Новый Структура;
						ДанныеСклада.Вставить("StockIdImport", СтрокаДанныхСклада.ИдентификаторСкладаМагазина);
						ДанныеСклада.Вставить("StockName", СтрокаДанныхСклада.НаименованиеСкладаМагазина);
						ДанныеСклада.Вставить("PhoneNumber", СтрокаДанныхСклада.КонтактныйТелефонСкладаМагазина);
						ДанныеСклада.Вставить("Address", СтрокаДанныхСклада.АдресСкладаМагазина);
						ВремяС = Лев(СтрокаДанныхСклада.ИнтервалССкладаМагазина, 5);
						Если СтрНайти(ВремяС, ":") = 0 Тогда
							ВремяС = СтрЗаменить(ВремяС, " ", ":");
						КонецЕсли;
						ВремяПо = Лев(СтрокаДанныхСклада.ИнтервалПоСкладаМагазина, 5);
						Если СтрНайти(ВремяПо, ":") = 0 Тогда
							ВремяПо = СтрЗаменить(ВремяПо, " ", ":");
						КонецЕсли;
						ДанныеСклада.Вставить("TimeIntervalReceiptFrom", ВремяС);
						ДанныеСклада.Вставить("TimeIntervalReceiptTo", ВремяПо);
						ДанныеСклада.Вставить("ContactPersonName", СтрокаДанныхСклада.КонтактноеЛицоСкладаМагазина);
						
						EMAILСкладаМагазина = СокрЛП(СтрокаДанныхСклада.EMAILСкладаМагазина);
						
						ДанныеСклада.Вставить("Email", EMAILСкладаМагазина);
						РегионСклада = ВРег(СокрЛП(СтрокаДанныхСклада.РегионСкладаМагазина));
						Если РегионСклада = "СПБ" Тогда
							ДанныеСклада.Вставить("TerminalId", 2);
						Иначе
							ДанныеСклада.Вставить("TerminalId", 1);
						КонецЕсли;
						
						СтруктураВозврата = ИнтеграцияССервисомSync.RegisterWarehouse(ДанныеСклада, СтруктураАвторизации);
						Если СтруктураВозврата.Error <> Неопределено Тогда
							Если СтруктураВозврата.StockId = Неопределено Тогда
								ОшибкаСозданияСклада = Истина;
								СведенияОбОшибках = СведенияОбОшибках + Символы.ПС + "Не удалось создать склад " + СтрокаДанныхСклада.ИдентификаторСкладаМагазина + " " + СтруктураВозврата.Error;
								Прервать;
							КонецЕсли;
						КонецЕсли;
						
						//создаем склад в 1С
						//СкладОбъект = Справочники.СкладыМагазинов.СоздатьЭлемент();
						//СкладОбъект.Владелец = Контрагент;
						//СкладОбъект.Наименование = СтрокаДанныхСклада.НаименованиеСкладаМагазина;
						//СкладОбъект.ИдентификаторНаправления = СтрокаДанныхСклада.ИдентификаторСкладаМагазина;
						//СкладОбъект.Адрес = СтрокаДанныхСклада.АдресСкладаМагазина;
						//СкладОбъект.КонтактнаяИнформация = СтрокаДанныхСклада.КонтактноеЛицоСкладаМагазина;
						//СкладОбъект.ГрафикРаботы = ВремяС + "-" + ВремяПо;
						//СкладОбъект.ТелефонныйНомерПриЗабореТовара = СтрокаДанныхСклада.КонтактныйТелефонСкладаМагазина;
						//Если РегионСклада = "СПБ" Тогда
						//	СкладОбъект.Регион = Справочники.РегиональныеТерминалы.СПбСтриж;
						//Иначе
						//	СкладОбъект.Регион = Справочники.РегиональныеТерминалы.МоскваСтриж;
						//КонецЕсли;
						//Если EMAILСкладаМагазина <> "" Тогда
						//	СтрокаПочты = СкладОбъект.АдресаРассылкиУведомлений.Добавить();
						//	СтрокаПочты.Почта = EMAILСкладаМагазина;
						//	//СтрокаПочты.Уведомлять = Истина;
						//КонецЕсли;
						//СкладОбъект.Записать();
					КонецЕсли;
				КонецЦикла;
				Если ОшибкаСозданияСклада Тогда
					СведенияОЗагрузке = Новый Структура("СозданныеЗаказы,ФайлЗагрузки,КоличествоСозданныхЗаказов,КоличествоНесозданныхЗаказов,СведенияОбОшибках",СозданныеЗаказы,ПутьКВременномуФайлу,КоличествоСозданныхЗаказов,КоличествоНесозданныхЗаказов,СведенияОбОшибках);
					Возврат СведенияОЗагрузке;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Асеев 28.11.2022 (Задача № 4935)<<<
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗЗаказов.НомерЗаказа КАК НомерЗаказа,
	|	ТЗЗаказов.Адрес КАК Адрес,
	|	ТЗЗаказов.ВесОбщий КАК ВесОбщий,
	|	ТЗЗаказов.ДатаДоставки КАК ДатаДоставки,
	|	ТЗЗаказов.КоличествоМест КАК КоличествоМест,
	|	ТЗЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	ТЗЗаказов.ИнтервалДоставки КАК ИнтервалДоставки,
	|	ТЗЗаказов.ИнтервалДоставкиС КАК ИнтервалДоставкиС,
	|	ТЗЗаказов.ИнтервалДоставкиПо КАК ИнтервалДоставкиПо,
	|	ТЗЗаказов.Итого КАК Итого,
	|	ТЗЗаказов.КодТовара КАК КодТовара,
	|	ТЗЗаказов.Артикул КАК Артикул,
	|	ТЗЗаказов.Количество КАК Количество,
	|	ТЗЗаказов.КомментарийКлиента КАК КомментарийКлиента,
	|	ТЗЗаказов.ШтрихкодЗаказа КАК ШтрихкодЗаказа,
	|	ТЗЗаказов.НаименованиеТовара КАК НаименованиеТовара,
	|	ТЗЗаказов.Район КАК Район,
	|	ТЗЗаказов.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ТЗЗаказов.ОценочнаяСтоимостьЗаказа КАК ОценочнаяСтоимостьЗаказа,
	|	ТЗЗаказов.ОбщаяЦена КАК ОбщаяЦена,
	|	ТЗЗаказов.СтоимостьТовара КАК СтоимостьТовара,
	|	ТЗЗаказов.ТелефонМобильный КАК ТелефонМобильный,
	|	ТЗЗаказов.РегионДоставки КАК РегионДоставки,
	|	ТЗЗаказов.ТелефонГородской КАК ТелефонГородской,
	|	ТЗЗаказов.ТипОплатыEnter КАК ТипОплатыEnter,
	|	ТЗЗаказов.ФИО КАК ФИО,
	|	ТЗЗаказов.Штрихкод КАК Штрихкод,
	|	ТЗЗаказов.ОбъемОбщий КАК ОбъемОбщий,
	|	ТЗЗаказов.УлицаДоставки КАК УлицаДоставки,
	|	ТЗЗаказов.ГородДоставки КАК ГородДоставки,
	|	ТЗЗаказов.КатегорияДоставки КАК КатегорияДоставки,
	|	ТЗЗаказов.НДСДоставка КАК НДСДоставка,
	|	ТЗЗаказов.Email КАК Email,
	|	ТЗЗаказов.НДСТовара КАК НДСТовара,
	|	ТЗЗаказов.ЦенаТовара КАК ЦенаТовара,
	|	ТЗЗаказов.КодМаркировки КАК КодМаркировки,
	|	ТЗЗаказов.ИдентификаторСкладаМагазина КАК ИдентификаторСкладаМагазина
	|ПОМЕСТИТЬ втТаблицаЗаказов
	|ИЗ
	|	&ТЗЗаказов КАК ТЗЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЗаказов.НомерЗаказа КАК НомерЗаказа,
	|	втТаблицаЗаказов.Адрес КАК Адрес,
	|	втТаблицаЗаказов.ВесОбщий КАК ВесОбщий,
	|	втТаблицаЗаказов.ДатаДоставки КАК ДатаДоставки,
	|	втТаблицаЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	втТаблицаЗаказов.ИнтервалДоставки КАК ИнтервалДоставки,
	|	втТаблицаЗаказов.Итого КАК Итого,
	|	втТаблицаЗаказов.КодТовара КАК КодТовара,
	|	втТаблицаЗаказов.Артикул КАК Артикул,
	|	втТаблицаЗаказов.Количество КАК Количество,
	|	втТаблицаЗаказов.КомментарийКлиента КАК КомментарийКлиента,
	|	втТаблицаЗаказов.НаименованиеТовара КАК НаименованиеТовара,
	|	втТаблицаЗаказов.Район КАК Район,
	|	ЕСТЬNULL(втТаблицаЗаказов.СтоимостьДоставки, 0) КАК СтоимостьДоставки,
	|	втТаблицаЗаказов.ОбщаяЦена КАК ОбщаяЦена,
	|	ЕСТЬNULL(втТаблицаЗаказов.СтоимостьТовара, 0) КАК СтоимостьТовара,
	|	втТаблицаЗаказов.ТелефонМобильный КАК ТелефонМобильный,
	|	втТаблицаЗаказов.ТелефонГородской КАК ТелефонГородской,
	|	втТаблицаЗаказов.ТипОплатыEnter КАК ТипОплатыEnter,
	|	втТаблицаЗаказов.ФИО КАК ФИО,
	|	втТаблицаЗаказов.Штрихкод КАК Штрихкод,
	|	втТаблицаЗаказов.ОбъемОбщий КАК ОбъемОбщий,
	|	втТаблицаЗаказов.УлицаДоставки КАК УлицаДоставки,
	|	втТаблицаЗаказов.ГородДоставки КАК ГородДоставки,
	|	втТаблицаЗаказов.КатегорияДоставки КАК КатегорияДоставки,
	|	втТаблицаЗаказов.НДСДоставка КАК НДСДоставка,
	|	втТаблицаЗаказов.НДСТовара КАК НДСТовара,
	|	втТаблицаЗаказов.КоличествоМест КАК КоличествоМест,
	|	втТаблицаЗаказов.ИнтервалДоставкиС КАК ИнтервалДоставкиС,
	|	втТаблицаЗаказов.ИнтервалДоставкиПо КАК ИнтервалДоставкиПо,
	|	втТаблицаЗаказов.ШтрихкодЗаказа КАК ШтрихкодЗаказа,
	|	втТаблицаЗаказов.ОценочнаяСтоимостьЗаказа КАК ОценочнаяСтоимостьЗаказа,
	|	втТаблицаЗаказов.РегионДоставки КАК РегионДоставки,
	|	втТаблицаЗаказов.Email КАК Email,
	|	втТаблицаЗаказов.ЦенаТовара КАК ЦенаТовара,
	|	втТаблицаЗаказов.КодМаркировки КАК КодМаркировки,
	|	втТаблицаЗаказов.ИдентификаторСкладаМагазина КАК ИдентификаторСкладаМагазина
	|ИЗ
	|	втТаблицаЗаказов КАК втТаблицаЗаказов
	|ИТОГИ
	|	МАКСИМУМ(Адрес),
	|	МАКСИМУМ(ВесОбщий),
	|	МАКСИМУМ(ДатаДоставки),
	|	МАКСИМУМ(ДатаЗаказа),
	|	МАКСИМУМ(ИнтервалДоставки),
	|	СУММА(Итого),
	|	МАКСИМУМ(КомментарийКлиента),
	|	МАКСИМУМ(Район),
	|	МАКСИМУМ(СтоимостьДоставки),
	|	МАКСИМУМ(ТелефонМобильный),
	|	МАКСИМУМ(ТелефонГородской),
	|	МАКСИМУМ(ТипОплатыEnter),
	|	МАКСИМУМ(ФИО),
	|	МАКСИМУМ(ОбъемОбщий),
	|	МАКСИМУМ(УлицаДоставки),
	|	МАКСИМУМ(ГородДоставки),
	|	МАКСИМУМ(КатегорияДоставки),
	|	МАКСИМУМ(НДСДоставка),
	|	МАКСИМУМ(КоличествоМест),
	|	МАКСИМУМ(ИнтервалДоставкиС),
	|	МАКСИМУМ(ИнтервалДоставкиПо),
	|	МАКСИМУМ(ОценочнаяСтоимостьЗаказа),
	|	МАКСИМУМ(РегионДоставки),
	|	МАКСИМУМ(Email),
	|	МАКСИМУМ(ИдентификаторСкладаМагазина)
	|ПО
	|	НомерЗаказа";
	
	Запрос.УстановитьПараметр("ТЗЗаказов",ТаблицаЗаказов);
	
	ДанныеЗаказа = Новый Структура;
	ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПроксиSync = ИнтеграцияССервисомSync.СоздатьПроксиSync();
	
	Пока ВыборкаПоЗаказам.Следующий() Цикл
		
		КоличествоМестЗаказа = ВыборкаПоЗаказам.КоличествоМест; //Загрузка количества мест из файла
		
		НомерЗаказа = СокрЛП(СтрЗаменить(ВыборкаПоЗаказам.НомерЗаказа, Символы.НПП, ""));
		
		Если СтрНайти(НомерЗаказа," ") <> 0 Тогда
			СведенияОбОшибках = СведенияОбОшибках + Символы.ПС + "Номер заказа " + Строка(НомерЗаказа) + " содержит пробелы. Заказ загружен не будет";
			КоличествоНесозданныхЗаказов = КоличествоНесозданныхЗаказов + 1;
			Продолжить;
		КонецЕсли;	
		
		//Асеев 21.12.2021 (по письму Загрузка заказов ООО "Невская логистическая компания")>>>
		Если ПустаяСтрока(ВыборкаПоЗаказам.Адрес) Тогда
			СведенияОбОшибках = СведенияОбОшибках + Символы.ПС + "Заказ номер " + Строка(НомерЗаказа) + " без указания адреса доставки. Не загружен";
			КоличествоНесозданныхЗаказов = КоличествоНесозданныхЗаказов + 1;
			Продолжить;
		КонецЕсли;
		//Асеев 21.12.2021 (по письму Загрузка заказов ООО "Невская логистическая компания")<<<
		
		КодМагазина = ?(ПараметрыСеанса.ЭтоТестоваяСреда,"179",Контрагент.Код);
		
		Если  mas.ВнешнийНомерЕстьВАдминке(НомерЗаказа, КодМагазина) Тогда
			СведенияОбОшибках = СведенияОбОшибках + Символы.ПС + "Заказ номер " + Строка(НомерЗаказа) + " уже есть в системе.";
			КоличествоНесозданныхЗаказов = КоличествоНесозданныхЗаказов + 1;
			Продолжить;
		КонецЕсли;	
		
		ЧисловойКодМагазина = СтрЗаменить(КодМагазина,"Shop_","");
		
		Стр = "Select * from tariff_calcDeliveryCategoryAndPrice(" + ЧисловойКодМагазина + "," + "0" + ",0," + Формат(ВыборкаПоЗаказам.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ",0,0,1,1)";
		R = Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
		ТабК = Евген.СоздатьТаблицу(R, "tariffCategoryId_Ч, deliveryPrice_Ч, weightCategoryId_Ч");
		СтрокаДанныхЗаказа = ТабК[0];
		
		
		Телефон = ?(ПустаяСтрока(ВыборкаПоЗаказам.ТелефонМобильный),"Телефон не указан",ВыборкаПоЗаказам.ТелефонМобильный);
		Email = СокрЛП(ВыборкаПоЗаказам.Email); // Задача № 3415
		
		//ДанныеЗаказа.Вставить("User", Новый Структура("FIO,Phone,Email",ВыборкаПоЗаказам.ФИО,Телефон,""));
		ДанныеЗаказа.Вставить("User", Новый Структура("FIO,Phone,Email",ВыборкаПоЗаказам.ФИО,Телефон,Email)); // Задача № 3415	

		ДанныеЗаказа.Вставить("Address",Новый Структура("FullAddress",ВыборкаПоЗаказам.Адрес));
		МассивТоваров = Новый Массив;
		МассивШтрихкодовЗаказа = Новый Массив;
		ВыборкаПоТоварам = ВыборкаПоЗаказам.Выбрать();
		МассивЗагруженныхШтрихкодовЗаказа = Новый Массив;
		НомерМеста = 1;
		Если ЭтоЛореаль Тогда //Shop_680 не передает товары
			
			КоличествоМестЗаказа = 1; // Загрузка количества мест из файла
			
			СтруктураТовара = Новый Структура;
			СтруктураТовара.Вставить("Article","LOREAL_12344321");
			СтруктураТовара.Вставить("Name","LOREAL_12344321");
			СтруктураТовара.Вставить("Count",ВыборкаПоТоварам.Количество());
			СтруктураТовара.Вставить("Price",0);		
			Если СтрНайти(ВРег(ВыборкаПоТоварам.НДСТовара),"БЕЗ НДС") <> 0 Тогда
				СтруктураТовара.Вставить("NDS",-1);
			ИначеЕсли СтрНайти(ВРег(ВыборкаПоТоварам.НДСТовара),"0") <> 0 И СтрНайти(ВРег(ВыборкаПоТоварам.НДСТовара),"0") = 0  Тогда
				СтруктураТовара.Вставить("NDS",0);
			ИначеЕсли СтрНайти(ВРег(ВыборкаПоТоварам.НДСТовара),"10") <> 0 Тогда
				СтруктураТовара.Вставить("NDS",10);
			Иначе
				СтруктураТовара.Вставить("NDS",20);
			КонецЕсли;
			СтруктураШтрихКодаМеста = Новый Структура("piece,barcode",НомерМеста,НомерЗаказа);
			МассивШтрихкодовЗаказа.Добавить(СтруктураШтрихКодаМеста);
			МассивТоваров.Добавить(СтруктураТовара);
		Иначе	
			Пока ВыборкаПоТоварам.Следующий() Цикл
				Если ВыборкаПоТоварам.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтруктураТовара = Новый Структура;
				СтруктураТовара.Вставить("Article",ВыборкаПоТоварам.Артикул);
				СтруктураТовара.Вставить("Name",ВыборкаПоТоварам.НаименованиеТовара);
				СтруктураТовара.Вставить("Count",ВыборкаПоТоварам.Количество);
				//+Степанов Задача Задача № 3895
				СтруктураТовара.Вставить("MarkingCode",ВыборкаПоТоварам.КодМаркировки);
				//-Степанов Задача Задача № 3895
				Если ВыборкаПоТоварам.ЦенаТовара <> 0 Тогда
					СтруктураТовара.Вставить("Price",ВыборкаПоТоварам.ЦенаТовара);	
				Иначе
					Если КодКонтрагента = "Shop_655"    //Русклимат  //Задача № 3415 Временно! 
						ИЛИ КодКонтрагента = "Shop_716" //ООО "Тех-Эйр"  //Задача № 3415 Временно!
						ИЛИ КодКонтрагента = "Shop_732" //ИП Окунева Ю.С.//Задача № 3415 Временно!
						ИЛИ КодКонтрагента = "Shop_747" Тогда  //ООО «СМЕГ Руссия» //Задача № 3415 Временно!
						
						СтруктураТовара.Вставить("Price",?(ВыборкаПоТоварам.Количество <> 0, Окр(ВыборкаПоТоварам.СтоимостьТовара / ВыборкаПоТоварам.Количество),0));

					Иначе	
						
						СтруктураТовара.Вставить("Price", 0); // проблема загрузки подарочных позиций ЭККО.

					КонецЕсли;
					//СтруктураТовара.Вставить("Price",?(ВыборкаПоТоварам.Количество <> 0, Окр(ВыборкаПоТоварам.СтоимостьТовара / ВыборкаПоТоварам.Количество),0));
				КонецЕсли;	
				Если СтрНайти(ВРег(ВыборкаПоТоварам.НДСТовара),"БЕЗ НДС") <> 0 Тогда
					СтруктураТовара.Вставить("NDS",-1);
				ИначеЕсли СтрНайти(ВРег(ВыборкаПоТоварам.НДСТовара),"0") <> 0 И СтрНайти(ВРег(ВыборкаПоТоварам.НДСТовара),"0") = 0  Тогда
					СтруктураТовара.Вставить("NDS",0);
				ИначеЕсли СтрНайти(ВРег(ВыборкаПоТоварам.НДСТовара),"10") <> 0 Тогда
					СтруктураТовара.Вставить("NDS",10);
				Иначе
					СтруктураТовара.Вставить("NDS",20);
				КонецЕсли;
				СтруктураТовара.Вставить("Barcode",ВыборкаПоТоварам.Штрихкод);
				МассивТоваров.Добавить(СтруктураТовара);
				Если Не ПустаяСтрока(ВыборкаПоТоварам.ШтрихкодЗаказа) И МассивЗагруженныхШтрихкодовЗаказа.Найти(ВыборкаПоТоварам.ШтрихкодЗаказа) = Неопределено  Тогда
					МассивЗагруженныхШтрихкодовЗаказа.Добавить(ВыборкаПоТоварам.ШтрихкодЗаказа);
					СтруктураШтрихКодаМеста = Новый Структура("piece,barcode",НомерМеста,ВыборкаПоТоварам.ШтрихкодЗаказа);
					МассивШтрихкодовЗаказа.Добавить(СтруктураШтрихКодаМеста);
					НомерМеста = НомерМеста + 1;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;//Shop_680 не передает товары
		ДанныеЗаказа.Вставить("Items",МассивТоваров);
		ДанныеЗаказа.Вставить("SettingId",СтруктураАвторизации.SettingID);
		ДанныеЗаказа.Вставить("barcodes",МассивШтрихкодовЗаказа);
		
		Если КодКонтрагента = "Shop_816" Или КодКонтрагента = "Shop_964" Тогда//Той.ру ТСМ
			РегионДоставки = ВРег(СокрЛП(ВыборкаПоЗаказам.РегионДоставки));
			Если РегионДоставки = "СПБ" Тогда
				ДанныеЗаказа.Вставить("SourcePlaceId",2);
				ДанныеЗаказа.Вставить("DeliveryPlaceId",2);
			Иначе
				ДанныеЗаказа.Вставить("SourcePlaceId",1);
				ДанныеЗаказа.Вставить("DeliveryPlaceId",1);
			КонецЕсли;
		ИначеЕсли КодКонтрагента = "Shop_970" Или КодКонтрагента = "Shop_1001" Тогда
			РегионДоставки = ВРег(СокрЛП(ВыборкаПоЗаказам.РегионДоставки));
			Если РегионДоставки = "СПБ" Тогда
				ДанныеЗаказа.Вставить("DeliveryPlaceId",2);
			Иначе
				ДанныеЗаказа.Вставить("DeliveryPlaceId",1);
			КонецЕсли;
			ДанныеЗаказа.Вставить("SourcePlaceId",1);//МСК всегда
		Иначе
			ДанныеЗаказа.Вставить("SourcePlaceId",1); //?
			ДанныеЗаказа.Вставить("DeliveryPlaceId",1); //?
		КонецЕсли;

		ДанныеЗаказа.Вставить("OrderIdImport",НомерЗаказа);
		ДанныеЗаказа.Вставить("SelfDelivery",0); //?
		ДанныеЗаказа.Вставить("Weight",ВыборкаПоЗаказам.ВесОбщий);
		ДанныеЗаказа.Вставить("Volume",ВыборкаПоЗаказам.ОбъемОбщий);
		//ДанныеЗаказа.Вставить("PiecesOfFreight",ВыборкаПоТоварам.Количество());//?
		ДанныеЗаказа.Вставить("PiecesOfFreight",КоличествоМестЗаказа); //Загрузка количества мест из файла
		ДанныеЗаказа.Вставить("TotalCost",0); //?
		ДанныеЗаказа.Вставить("DeliveryCost",ВыборкаПоЗаказам.СтоимостьДоставки);
		ДанныеЗаказа.Вставить("IsPartialGiveoutDisabled",Ложь);  //?
		ДанныеЗаказа.Вставить("AssessedCost",ВыборкаПоЗаказам.ОценочнаяСтоимостьЗаказа);//?
		
		Если Найти(НРег(ВыборкаПоЗаказам.ТипОплатыEnter), "оплачено") <> 0 Тогда	
			ТипОплаты = "7";
		ИначеЕсли Найти(НРег(ВыборкаПоЗаказам.ТипОплатыEnter), "оплата при доставке")  <> 0 Тогда
			ТипОплаты = "1";
		ИначеЕсли Найти(НРег(ВыборкаПоЗаказам.ТипОплатыEnter), "безнал") <> 0 Тогда	
			ТипОплаты = "4";
		ИначеЕсли Найти(НРег(ВыборкаПоЗаказам.ТипОплатыEnter), "оплата по терминалу") <> 0 Тогда		
			ТипОплаты = "5"
		ИначеЕсли ЭтоЛореаль И (ВыборкаПоЗаказам.СтоимостьДоставки = 0 Или ВыборкаПоЗаказам.СтоимостьДоставки = Null) 
			И (ВыборкаПоЗаказам.СтоимостьТовара = 0 Или ВыборкаПоЗаказам.СтоимостьТовара = Null)  Тогда
			ТипОплаты = "7";
		ИначеЕсли ЭтоЛореаль Тогда	
			ТипОплаты = "1";
		Иначе 	
			СведенияОбОшибках = СведенияОбОшибках + Символы.ПС + "Не установлен тип оплаты в заказе номер " + НомерЗаказа;
			КоличествоНесозданныхЗаказов = КоличествоНесозданныхЗаказов + 1;
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаказа.Вставить("PayType",ТипОплаты);
		ДанныеЗаказа.Вставить("Comment",ВыборкаПоЗаказам.КомментарийКлиента);
		ДатаДоставки = ВыборкаПоЗаказам.ДатаДоставки;
		ДанныеЗаказа.Вставить("OrderIdImport",НомерЗаказа);
		ДанныеЗаказа.Вставить("DesiredDeliveryDate",ИзСтрокиВДату(ДатаДоставки));
		Если ЭтоЛореаль Тогда //У Shop_680 не передается интервал доставки.
			ВремяДоставкиС  = "10:00";
			ВремяДоставкиПо = "18:00";
		Иначе
			Попытка
				ПодстрокиИнтервалаДоставки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоЗаказам.ИнтервалДоставки, " ");
				ВремяДоставкиС  = ?(ПустаяСтрока(ВыборкаПоЗаказам.ИнтервалДоставкиС),ПодстрокиИнтервалаДоставки[1],ВыборкаПоЗаказам.ИнтервалДоставкиС);
				ВремяДоставкиПо = ?(ПустаяСтрока(ВыборкаПоЗаказам.ИнтервалДоставкиПо),ПодстрокиИнтервалаДоставки[3],ВыборкаПоЗаказам.ИнтервалДоставкиПо);		
			Исключение
				СведенияОбОшибках = СведенияОбОшибках + Символы.ПС + "Для заказа номер " + Строка(НомерЗаказа) + " некорректно указан интервал доставки.";
				КоличествоНесозданныхЗаказов = КоличествоНесозданныхЗаказов + 1;
				Продолжить;	
			КонецПопытки;
			ВремяДоставкиС  = Лев(ВремяДоставкиС,5);		
			ВремяДоставкиПо = Лев(ВремяДоставкиПо,5);
			//Обработка формата времени файлов ЦУМа
			Если СтрНайти(ВремяДоставкиС,":") = 0 Тогда
				ВремяДоставкиС = СтрЗаменить(ВремяДоставкиС," ",":");
			КонецЕсли;
			Если СтрНайти(ВремяДоставкиПо,":") = 0 Тогда
				ВремяДоставкиПо = СтрЗаменить(ВремяДоставкиПо," ",":");
			КонецЕсли;
			//
		КонецЕсли;//У Shop_680 не передается интервал доставки.
		//
		ДанныеЗаказа.Вставить("TimeDeliveryFrom",ВремяДоставкиС);
		ДанныеЗаказа.Вставить("TimeDeliveryTo",ВремяДоставкиПо);
		ДанныеЗаказа.Вставить("NDSDelivery",20);
		//Асеев 28.11.2022 (Задача № 4935)>>>
		ИдентификаторСкладаМагазина = СокрЛП(ВыборкаПоЗаказам.ИдентификаторСкладаМагазина);
		Если ИдентификаторСкладаМагазина <> "" Тогда
			ДанныеЗаказа.Вставить("StockId", ИдентификаторСкладаМагазина);
		КонецЕсли;
		//Асеев 28.11.2022 (Задача № 4935)<<<
		
		ИДЗаказа = ИнтеграцияССервисомSync.RegisterOrderExtended(ДанныеЗаказа, СтруктураАвторизации, ПроксиSync);
		Если ИДЗаказа = Неопределено Тогда
			СведенияОбОшибках = СведенияОбОшибках + Символы.ПС +  "Не удалось создать заказ номер " + НомерЗаказа;
			КоличествоНесозданныхЗаказов = КоличествоНесозданныхЗаказов + 1;
			Продолжить;
		ИначеЕсли ТипЗнч(ИДЗаказа) = Тип("Строка") Тогда
			СведенияОбОшибках = СведенияОбОшибках + Символы.ПС +  "Не удалось создать заказ номер " + НомерЗаказа + " " + ИДЗаказа;
			КоличествоНесозданныхЗаказов = КоличествоНесозданныхЗаказов + 1;
			Продолжить;	
		Иначе	
			СтрокаИДЗаказа = Формат(ИДЗаказа,"ЧРД=.; ЧН=0; ЧГ=");
			КоличествоСозданныхЗаказов = КоличествоСозданныхЗаказов + 1;
		КонецЕсли;	
		
		// ++Загрузка количества мест из файла
		//Стр = "EXEC import_setOrderWeigth " + СтрокаИДЗаказа  + ", " + Формат(ВыборкаПоЗаказам.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ", " + "1" + ", " + "5" + ", " + Формат(СтрокаДанныхЗаказа.deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(СтрокаДанныхЗаказа.deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(СтрокаДанныхЗаказа.weightCategoryId_Ч);	
		Стр = "EXEC import_setOrderWeigth " + СтрокаИДЗаказа  + ", " + Формат(ВыборкаПоЗаказам.ВесОбщий, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Формат(КоличествоМестЗаказа,"ЧДЦ=0; ЧРГ=; ЧГ=0") + ", " + "5" + ", " + Формат(СтрокаДанныхЗаказа.deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=")+ ", " + Формат(СтрокаДанныхЗаказа.deliveryPrice_Ч, "ЧРД=.; ЧН=0; ЧГ=") + ", " + Строка(СтрокаДанныхЗаказа.weightCategoryId_Ч);	
		// --Загрузка количества мест из файла
		
		Евген.ЗапросКИнтернетМагазину(Стр, Соединение);
		СозданныеЗаказы = СозданныеЗаказы + Символы.ПС + "Номер: " + НомерЗаказа + " ID в системе: " + СтрокаИДЗаказа;
	КонецЦикла;	
	
	СведенияОЗагрузке = Новый Структура("СозданныеЗаказы,ФайлЗагрузки,КоличествоСозданныхЗаказов,КоличествоНесозданныхЗаказов",СозданныеЗаказы,ПутьКВременномуФайлу,КоличествоСозданныхЗаказов,КоличествоНесозданныхЗаказов);
	Если СведенияОбОшибках <> "Сведения об ошибках:" Тогда
		СведенияОЗагрузке.Вставить("СведенияОбОшибках",СведенияОбОшибках);
	КонецЕсли;
	
	Возврат СведенияОЗагрузке
	
КонецФункции
//-Степанов


Функция unixtime(ПараметрДата) Экспорт
	Возврат Формат(ПараметрДата - дата(1970,1,1,1,0,0), "ЧГ=0");
КонецФункции	


// МАС - 15.06.2018 - №2268 - Распараллелить регл. задания по загрузке заказов и АПП из почты --->>
Процедура ВыполнитьЗагрузкуИзПочты_Фоновое(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, МасП, МасП_Вар2) Экспорт
	
	#Область КодКУдалениюВыполнитьЗагрузкуИзПочты_Фоновое1	
	//ТабОш = Неопределено;
	//ТабЗ = Неопределено;
	//Ошибка = "";	
	
	////+Степанов Получим массив адресов для рассылки писем о результате загрузки
	//МассивАдресовДляРассылки = ШаблонЗагрузки.РассылкаУведомлений.ВыгрузитьКолонку("Адрес");
	////-Степанов
	
	#КонецОбласти
	
	Попытка
		
		#Область КодКУдалениюВыполнитьЗагрузкуИзПочты_Фоновое1
		
		//// МАС - 14.06.2017 - №1074 --->> 
		////Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_652") Тогда
		//Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_652") ИЛИ Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_694") Тогда
		//	// <<--- МАС 
		//	ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_Новый(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);					
		//	// МАС - 22.09.2017 - № --->> 											
		//	//ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_655") Тогда	
		//	//ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_655") ИЛИ Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_716") Тогда   // Русклимат - Shop_655  ИЛИ  ООО "Тех-Эйр" - Shop_716
		//	//	// <<--- МАС
		//	//	ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_Новый(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);	
		//ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_665")  Тогда // АШАН
		//	//ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_708")  Тогда // АШАН на тесте	
		//	ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_АШАН(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);	
		////ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_680")  Тогда // Loreal B2B - Shop_709
		////	ДанныеЗагружены = ЗагрузкаДанныхИзПочтыСервер.ЗагрузитьДанныеИзФайлаExcelПоШаблону_LOREALB2B(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка); //Задача № 2750	
		//	//+++ БАО 31.08.2017 №1762	
		//ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_714")  Тогда // Техномарт(Technomart) - Shop_714
		//	ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону_Техномарт(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);
		//	//--- БАО 31.08.2017 №1762	
		//	// МАС - 27.12.2017 - № --->> 
		//ИначеЕсли СокрП(Контрагент.Код) = "Shop_732" Или СокрП(Контрагент.Код) = "Shop_747" 
		//	Или СокрП(Контрагент.Код) ="Shop_655"  Или СокрП(Контрагент.Код) = "Shop_716"  
		//	Или СокрП(Контрагент.Код) ="Shop_765" Или СокрП(Контрагент.Код) ="Shop_794"
		//	Или СокрП(Контрагент.Код) ="Shop_680" Тогда 	
		//	СведенияОЗагрузке = ЗагрузитьЗаказы(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла);
		//	РассылкаСведенийОЗагрузкеЗаказов(ШаблонЗагрузки,"Загрузка заказов " + Контрагент.Наименование,СведенияОЗагрузке,МасП,МасП_Вар2);
		//	//ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_765")  Тогда // ООО "ЭККО-РОС" - Shop_765
		//	//	ДанныеЗагружены = ЗагрузкаДанныхИзПочтыСервер.ЗагрузитьДанныеИзФайлаExcelПоШаблону(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);	
		//ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_782")  Тогда // ООО "Траектория" - Shop_782
		//	ДанныеЗагружены = ЗагрузкаДанныхИзПочтыСервер.ЗагрузитьДанныеИзФайлаExcelПоШаблону(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);	
		//Иначе					
		//	ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблону(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);
		//КонецЕсли;
		
		#КонецОбласти
	
		СведенияОЗагрузке = ЗагрузитьЗаказы(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла);
		РассылкаСведенийОЗагрузкеЗаказов(ШаблонЗагрузки,"Загрузка заказов " + Контрагент.Наименование,СведенияОЗагрузке,МасП,МасП_Вар2);
		
		
	Исключение
		
		Ошибка = "" + ОписаниеОшибки();
		#Если Клиент Тогда 
			Сообщить(ОписаниеОшибки());
		#КонецЕсли	
		
		#Область КодКУдалениюВыполнитьЗагрузкуИзПочты_Фоновое2
		//Если СокрП(Контрагент.Код) = "Shop_747" Или СокрП(Контрагент.Код) = "Shop_732"
		//	Или СокрП(Контрагент.Код) ="Shop_655"  Или СокрП(Контрагент.Код) = "Shop_716"  
		//	Или СокрП(Контрагент.Код) ="Shop_765" Или СокрП(Контрагент.Код) ="Shop_794" 
		//	Или СокрП(Контрагент.Код) ="Shop_680" Тогда
		//	СведенияОЗагрузке = Новый Структура("ОшибкаЗагрузки,ФайлЗагрузки",ОписаниеОшибки(),Неопределено);	
		//	РассылкаСведенийОЗагрузкеЗаказов(ШаблонЗагрузки,"Не удалось загрузить заказы " + Контрагент.Наименование + "!",СведенияОЗагрузке,МасП,МасП_Вар2);
		//КонецЕсли;
		#КонецОбласти
		
		СведенияОЗагрузке = Новый Структура("ОшибкаЗагрузки,ФайлЗагрузки",ОписаниеОшибки(),Неопределено);	
		РассылкаСведенийОЗагрузкеЗаказов(ШаблонЗагрузки,"Не удалось загрузить заказы " + Контрагент.Наименование + "!",СведенияОЗагрузке,МасП,МасП_Вар2);

	КонецПопытки;
	
#Область КодКУдалениюВыполнитьЗагрузкуИзПочты_Фоновое3
	//
	//Если Ошибка = "" Тогда
	//	
	//	ТабОш.Свернуть("Номер, Ошибка", "Кол");
	//	СтрокаПисьма = "";	
	//	
	//	ТабФ = Новый ТабличныйДокумент;
	//	Мак = ПолучитьОбщийМакет("СоответствиеНомеровЗаказов");
	//	
	//	ОблШ = Мак.ПолучитьОбласть("Шапка");
	//	ОблСтр = Мак.ПолучитьОбласть("Строка");
	//	
	//	ОблШ.Параметры.Заг = "Список загруженных заказов от " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	//	
	//	ТабФ.Вывести(ОблШ);
	//	
	//	НПП = 1;
	//	Если ТабЗ.Количество() <> 0 Тогда
	//		СтрокаПисьма = "Заказы загруженные: " + Символы.ПС;
	//		Для Каждого Тек Из ТабЗ Цикл
	//			СтрокаПисьма = СтрокаПисьма + Тек.Номер + Символы.ПС;
	//			
	//			ОблСтр.Параметры.НПП = НПП;
	//			ОблСтр.Параметры.НомерМагазина = СокрЛП(Тек.Номер);
	//			ОблСтр.Параметры.НомерДоставки = СокрЛП(Тек.НомерНаш);
	//			
	//			НПП = НПП + 1;
	//			ТабФ.Вывести(ОблСтр);
	//		КонецЦикла;
	//	КонецеСли;
	//	
	//	ЗагФ = КаталогВременныхФайлов() + "\list_order_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + Строка(Контрагент.ИНН) + ".xls";
	//	ТабФ.Записать(ЗагФ, ТипФайлаТабличногоДокумента.XLS);
	//	
	//	Если ТабОш.Количество() <> 0 Тогда
	//		
	//		СтрокаПисьма = СтрокаПисьма + "Заказы НЕ загруженные: " + Символы.ПС;
	//		Для Каждого Тек Из ТабОш Цикл
	//			СтрокаПисьма = СтрокаПисьма + Тек.Номер  + ": " + СокрЛП(Тек.Ошибка) + Символы.ПС;
	//			Тек.Кол = 1;
	//		КонецЦикла;
	//	КонецеСли;
	//	
	//	
	//	// МАС - 20.06.2018 - № --->> 
	//	Попытка			
	//		Запрос = Новый Запрос("ВЫБРАТЬ
	//		|	ДанныеКЗагрузкеИзПочты.Период КАК Период,
	//		|	ДанныеКЗагрузкеИзПочты.Контрагент КАК Контрагент,
	//		|	ДанныеКЗагрузкеИзПочты.ШаблонЗагрузки КАК ШаблонЗагрузки,
	//		|	ДанныеКЗагрузкеИзПочты.ТипЗагрузкиДанных КАК ТипЗагрузкиДанных,
	//		|	ДанныеКЗагрузкеИзПочты.РежимЗагрузкиДанных КАК РежимЗагрузкиДанных,
	//		|	ДанныеКЗагрузкеИзПочты.ИмяФайла КАК ИмяФайла,
	//		|	ДанныеКЗагрузкеИзПочты.Данные КАК Данные,
	//		|	ДанныеКЗагрузкеИзПочты.ДанныеЗагружены КАК ДанныеЗагружены,
	//		|	ДанныеКЗагрузкеИзПочты.Отправитель КАК Отправитель
	//		|ИЗ
	//		|	РегистрСведений.ДанныеКЗагрузкеИзПочты КАК ДанныеКЗагрузкеИзПочты
	//		|ГДЕ
	//		|	ДанныеКЗагрузкеИзПочты.Период >= &Период
	//		|	И ДанныеКЗагрузкеИзПочты.ИмяФайла = &ИмяФайла
	//		|	И ДанныеКЗагрузкеИзПочты.Контрагент = &Контрагент");
	//		Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата() - 86400));
	//		Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	//		Запрос.УстановитьПараметр("Контрагент", Контрагент);		
	//		
	//		Рез = Запрос.Выполнить().Выбрать();
	//		
	//		Если Рез.Следующий() Тогда				
	//			Набор = РегистрыСведений.ДанныеКЗагрузкеИзПочты.СоздатьНаборЗаписей();
	//			Набор.Отбор.Установить(Контрагент);
	//			Набор.Прочитать();
	//			НЗапись = Набор.Добавить();		
	//			ЗаполнитьЗначенияСвойств(НЗапись, Рез);
	//			НЗапись.Период = ТекущаяДата();
	//			НЗапись.ДанныеЗагружены = Истина;				
	//			Набор.Записать();		
	//		КонецЕсли;
	//		
	//	Исключение					
	//	КонецПопытки;			
	//	// <<--- МАС	
	//	
	//Иначе
	//	СтрокаПисьма = "Заказы НЕ загружены! Фатальная ошибка: " + Ошибка;
	//КонецеСли;
	//
	//Если табОш <> Неопределено Тогда
	//	ТабОш.Свернуть("Номер", "Кол");
	//	
	//	СтрокаПисьма = СтрокаПисьма + Символы.ПС + "Количество загруженных: " + Строка(ТабЗ.Количество()) + Символы.ПС + "Количество НЕзагруженных: " + Строка(ТабОш.Количество());
	//КонецеСли;	
	//
	//lem.ОтправитьСообщение(МасП, "Загрузка заказов", СтрокаПисьма, ЗагФ);
	//если МасП_Вар2.Количество() <> 0 Тогда
	//	МасФайлов = Новый Массив;
	//	МасФайлов.Добавить(КаталогВременныхФайлов() + "\" + ИмяФайла);
	//	МасФайлов.Добавить(ЗагФ);
	//	lem.ОтправитьСообщение(МасП_Вар2, "Загрузка заказов", СтрокаПисьма, МасФайлов);
	//КонецеСли;
	//
#КонецОбласти	
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуАППИзПочты_Фоновое(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, МасП) Экспорт
	
	ТабОш = Неопределено;
	ТабЗ = Неопределено;
	Ошибка = "";
	
	
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_618") Тогда // ЛореалЪ
		// Михушкин - 18.05.2017 - костыль для ЛОРЕАЛЬ Б2Б --->> 	 	
		КонтрагентЗагрузки = Контрагент;
		Попытка
			Если СтрНайти(ИмяФайла, "B2B") Тогда	
				КонтрагентЗагрузки = Справочники.Контрагенты.НайтиПоКоду("Shop_680");			
			КонецЕсли;
		Исключение	
		КонецПопытки;
		// <<--- Михушкин	
		ДанныеЗагружены = ЗагрузкаДанныхИзПочтыСервер.ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Новый(КонтрагентЗагрузки, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);	
	ИначеЕсли Контрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_180") Тогда // Корабль					
		ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП_Кораблик(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);	
	ИначеЕсли ШаблонЗагрузки.СтандартныйШаблонАПП Тогда
		ДанныеЗагружены = may.ЗагрузкаАктовПП(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);
	Иначе
		ДанныеЗагружены = ЗагрузитьДанныеИзФайлаExcelПоШаблонуАктПП(Контрагент, ШаблонЗагрузки, Данные, ИмяФайла, ТабОш, ТабЗ, Ошибка);	
	КонецЕсли;
	
	
	Если Ошибка = "" Тогда
		
		//ТабОш.Свернуть("Номер, Ошибка", "Кол");
		СтрокаПисьма = "";
		
		Если ТабЗ <> Неопределено И ТабЗ.Количество() <> 0 Тогда
			СтрокаПисьма = "Информация, загруженная по заказам: " + Символы.ПС;
			Для Каждого Тек Из ТабЗ Цикл
				СтрокаПисьма = СтрокаПисьма + Тек.Номер + Символы.ПС;
			КонецЦикла;
		КонецеСли;
		
		
		Если ТабОш <> Неопределено И ТабОш.Количество() <> 0 Тогда
			
			ТабОш.Свернуть("Номер, Ошибка", "Кол");
			СтрокаПисьма = СтрокаПисьма + "Информация НЕ загруженная по заказам: " + Символы.ПС;
			Для Каждого Тек Из ТабОш Цикл
				СтрокаПисьма = СтрокаПисьма + Тек.Номер  + ": " + СокрЛП(Тек.Ошибка) + Символы.ПС;
				Тек.Кол = 1;
			КонецЦикла;
		КонецеСли;
	Иначе
		СтрокаПисьма = "Информация по приходу не загружена! Фатальная ошибка: " + Ошибка;
	КонецеСли;
	
	
	Если табОш <> Неопределено Тогда
		ТабОш.Свернуть("Номер", "Кол");
		
		СтрокаПисьма = СтрокаПисьма + Символы.ПС + "Количество загруженных: " + Строка(ТабЗ.Количество()) + Символы.ПС + "Количество НЕзагруженных: " + Строка(ТабОш.Количество());
	КонецеСли;	
	
	lem.ОтправитьСообщение(МасП, "Загрузка данных по приходу (" + СокрЛП(Контрагент.Наименование) + ")", СтрокаПисьма);
	
	
КонецПроцедуры
// <<--- МАС

Функция ПреобразоватьНомерТелефона(НомерТелефона) Экспорт
	Номер = СокрЛП(НомерТелефона);
	
	Если Лев(Номер, 1) = "8" Тогда
		Номер = Прав(Номер, СтрДлина(Номер) - 1);
		Номер = "+7" + Номер;
	КонецеСли;
	
	Номер = СтрЗаменить(Номер, "(", "");
	Номер = СтрЗаменить(Номер, ")", "");
	Номер = СтрЗаменить(Номер, " ", Номер);
	
	Возврат Номер;
КонецФункции	

//+Степанов
Процедура РассылкаСведенийОЗагрузкеЗаказов(ШаблонЗагрузки,Заголовок,СведенияОЗагрузке,МассивАдресовОтправителейНеПрикреплятьФайл,МассивАдресовОтправителейПрикреплятьФайл)
	
	Если СведенияОЗагрузке.Свойство("ОшибкаЗагрузки") Тогда
		ТекстПисьма = "Не удалось загрузить заказы!" + Символы.ПС + " " + "Описание ошибки:" + Символы.ПС + СведенияОЗагрузке.ОшибкаЗагрузки;	
	Иначе		
		ТекстПисьма = ?(СведенияОЗагрузке.Свойство("СведенияОбОшибках"),СведенияОЗагрузке.СведенияОбОшибках + Символы.ПС + " " + Символы.ПС + СведенияОЗагрузке.СозданныеЗаказы,СведенияОЗагрузке.СозданныеЗаказы);
	КонецЕсли;
	
	Если Не СведенияОЗагрузке.Свойство("КоличествоСозданныхЗаказов") Тогда
		СведенияОЗагрузке.Вставить("КоличествоСозданныхЗаказов", 0);
	КонецЕсли;
	Если Не СведенияОЗагрузке.Свойство("КоличествоНесозданныхЗаказов") Тогда
		СведенияОЗагрузке.Вставить("КоличествоНесозданныхЗаказов", 0);
	КонецЕсли;
	
	ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + "Загружено: " + Строка(СведенияОЗагрузке.КоличествоСозданныхЗаказов) + Символы.ПС + "Не удалось загрузить: " + Строка(СведенияОЗагрузке.КоличествоНесозданныхЗаказов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.Адрес КАК Адрес,
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.ОтправлятьИсходникЗагрузки КАК ОтправлятьИсходникЗагрузки
	|ИЗ
	|	Справочник.ШаблоныЗагрузкиExcel.РассылкаУведомлений КАК ШаблоныЗагрузкиExcelРассылкаУведомлений
	|ГДЕ
	|	ШаблоныЗагрузкиExcelРассылкаУведомлений.Ссылка = &Ссылка
	|	И ШаблоныЗагрузкиExcelРассылкаУведомлений.Отправлять";
	Запрос.УстановитьПараметр("Ссылка",ШаблонЗагрузки);
	
	МассивПолучателейБезФайлов = Новый Массив;
	МассивПолучателейСФайлами  = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОтправлятьИсходникЗагрузки Тогда
			МассивПолучателейСФайлами.Добавить(Выборка.Адрес);
		Иначе
			МассивПолучателейБезФайлов.Добавить(Выборка.Адрес);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого АдресОтправителяЗаказов Из МассивАдресовОтправителейНеПрикреплятьФайл Цикл
		МассивПолучателейБезФайлов.Добавить(АдресОтправителяЗаказов);	
	КонецЦикла;
	
	Для Каждого АдресОтправителяЗаказов Из МассивАдресовОтправителейПрикреплятьФайл Цикл
		МассивПолучателейСФайлами.Добавить(АдресОтправителяЗаказов);	
	КонецЦикла;
	
	Отправка = ОтправитьСообщение(МассивПолучателейСФайлами,Заголовок,ТекстПисьма,СведенияОЗагрузке.ФайлЗагрузки);
	Отправка = ОтправитьСообщение(МассивПолучателейБезФайлов,Заголовок,ТекстПисьма);
	
	
КонецПроцедуры	

//Асеев 31.10.2024 (Задача № 5339)>>>
Функция ОпределитьОператораРассылки(Настройка = Неопределено, Контрагент = Неопределено, ОператорПоУмолчанию = Неопределено) Экспорт
	
	Если Контрагент = Неопределено И Настройка = Неопределено Тогда
		ОператорРассылки = Неопределено;
	ИначеЕсли Контрагент = Неопределено Тогда
		//Контрагент из настройки
		ТипНастройки = ТипЗнч(Настройка);
		Если ТипНастройки = Тип("СправочникСсылка.НастройкиАвтоматическойОтправкиОтчетов") Тогда
			//Настройка = Справочники.НастройкиАвтоматическойОтправкиОтчетов.ПустаяСсылка();
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент", Настройка.Владелец);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
			|ИЗ
			|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
			|ГДЕ
			|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки <> ЗНАЧЕНИЕ(Справочник.ОператорыСМСРассылки.ПустаяСсылка)";
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ОператорРассылки = ?(Настройка.ОператорРассылки.Пустая(), Неопределено, Настройка.ОператорРассылки);
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ОператорРассылки = Выборка.ОператорРассылки;
			КонецЕсли;
		Иначе//Если ТипНастройки = Тип("СправочникСсылка.НастройкиАвтоматическойОтправкиОбщихОтчетов") Тогда
			ОператорРассылки = ?(Настройка.ОператорРассылки.Пустая(), Неопределено, Настройка.ОператорРассылки);
		КонецЕсли;
	ИначеЕсли Настройка = Неопределено Тогда
		//Контрагент из параметра
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
		|ИЗ
		|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
		|ГДЕ
		|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки <> ЗНАЧЕНИЕ(Справочник.ОператорыСМСРассылки.ПустаяСсылка)";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ОператорРассылки = Неопределено;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ОператорРассылки = Выборка.ОператорРассылки;
		КонецЕсли;
	Иначе
		//если определен Контрагент, то его оператор в приоритете
		Контрагенты = Новый Массив;
		Контрагенты.Добавить(Контрагент);
		
		ТипНастройки = ТипЗнч(Настройка);
		Если ТипНастройки = Тип("СправочникСсылка.НастройкиАвтоматическойОтправкиОтчетов") Тогда
			Контрагенты.Добавить(Настройка.Владелец);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПараметрыКонтрагентовСрезПоследних.Контрагент = &Контрагент КАК ЭтоКонтрагентПараметра,
		|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
		|ИЗ
		|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент В (&Контрагенты)) КАК ПараметрыКонтрагентовСрезПоследних
		|ГДЕ
		|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки <> ЗНАЧЕНИЕ(Справочник.ОператорыСМСРассылки.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоКонтрагентПараметра УБЫВ";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ОператорРассылки = ?(Настройка.ОператорРассылки.Пустая(), Неопределено, Настройка.ОператорРассылки);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ОператорРассылки = Выборка.ОператорРассылки;
		КонецЕсли;
	КонецЕсли;
	
	Если ОператорРассылки = Неопределено Тогда
		ОператорРассылки = ?(ОператорПоУмолчанию = Неопределено, Справочники.ОператорыСМСРассылки.strizhLogistic, ОператорПоУмолчанию);
	КонецЕсли;
	
	Возврат ОператорРассылки;
	
КонецФункции
//Асеев 31.10.2024 (Задача № 5339)<<<
