
// Процедура инициализации конфигурации "Управление транспортной логистикой", вызывается при начале работы.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
Процедура Инициализация(новаКонтекст) Экспорт
	новаКонтекст.Вставить("ЗавершатьТихо", Ложь);
	новаКонтекст.Вставить("РесурсыТребующиеОбновления", Новый Массив);
	новаКонтекст.Вставить("Сервердоступен", Истина);
	новаКонтекст.Вставить("СборщикМусора", Обработки.новаСборщикМусора.Создать());
	новаКонтекст.Вставить("ТекущийКлассификатор");
	
	новаИнтеграция.Инициализировать(новаКонтекст);
	
#Если Клиент Тогда
	новаЖурналы.Инициализировать(новаКонтекст);
	новаМестнаяДоставка.Инициализировать(новаКонтекст);
	новаПечать.Инициализировать(новаКонтекст);
	ИнициализироватьСклонения(новаКонтекст);
	новаОтчетыСКД.Инициализировать(новаКонтекст);
	новаМониторинг.Инициализировать(новаКонтекст);
#КонецЕсли
	
	Обработки.новаОбновление.Создать().новаВыполнитьОбновлениеИнформационнойБазы();
	
#Если Клиент Тогда
	
	Если РольДоступна(Метаданные.Роли.новаАдминистраторУТЛ) Тогда
		Если Константы.новаОповещатьОбОбновлениях.Получить() Тогда
			Форма = Обработки.новаРегистрация.ПолучитьФорму("ФормаСкачиванияОбновлений");
			Форма.ОткрыватьТолькоЕслиЕстьНовые = Истина;
			Форма.Открыть();
		КонецЕсли;
	КонецЕсли;

 	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	ЭтоФайловаяИБ = (ПозицияПоиска = 1);
		
	Если ЭтоФайловаяИБ Тогда
		ПользовательДляВыполненияРеглЗаданий = Константы.новаПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		Если (ПараметрыСеанса.новаТекущийПользователь = ПользовательДляВыполненияРеглЗаданий) 
			И (Константы.новаКоличествоСекундОпросаВФайловомВарианте.Получить()>0) Тогда
			
			ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
			ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", Константы.новаКоличествоСекундОпросаВФайловомВарианте.Получить());
			
		КонецЕсли;
	КонецЕсли;
	
#КонецЕсли

	//для ведения лога обмена
	новаКонтекст.Вставить("РегистраторСобытий", Новый Соответствие);

КонецПроцедуры

// Возвращает ответственных лиц организации на заданную дату.
//
// Параметры:
//  Организация <СправочникСсылка.новаОрганизации>
//  НаДату      <Дата>
//
// Возвращаемое значение:
//  <Структура(ОсновнойМеханик, ОсновнойДиспетчер, ОсновнойВрач: <СправочникСсылка.новаФизическиеЛица>)>
//
Функция ПолучитьОтветственныхЛиц(Организация, НаДату) Экспорт
	ОтветственныеЛица = Новый Структура("ОсновнойМеханик, ОсновнойДиспетчер, ОсновнойВрач");
	Запрос = Новый Запрос;
	   
	Запрос.Текст = 
	   "ВЫБРАТЬ ПЕРВЫЕ 1
	   |	новаОсновнойПерсонал.ОсновнойМеханик,
	   |	новаОсновнойПерсонал.ОсновнойДиспетчер,
	   |	новаОсновнойПерсонал.ОсновнойВрач
	   |ИЗ
	   |	РегистрСведений.новаУчетнаяПолитикаОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК новаОсновнойПерсонал";
	   
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Дата", НаДату);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ОтветственныеЛица.Вставить("ОсновнойМеханик", РезультатЗапроса.ОсновнойМеханик);
		ОтветственныеЛица.Вставить("ОсновнойДиспетчер", РезультатЗапроса.ОсновнойДиспетчер);
		ОтветственныеЛица.Вставить("ОсновнойВрач", РезультатЗапроса.ОсновнойВрач);
	КонецЕсли;
	Возврат ОтветственныеЛица;
КонецФункции

// Завершает работу с конфигурацией "Управление транспортной логистикой". Вызывается при завершении работы системы.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
Процедура ПередЗавершениемРаботыСистемы(новаКонтекст) Экспорт
	#Если Клиент Тогда

	новаСерверКСЛ.Отключиться(новаКонтекст);
	
	#КонецЕсли
КонецПроцедуры

// Автоматически выбирает вариант выполнения бизнес-процесса.
//
// Параметры:
//  ЭтотОбъект          <БизнесПроцессОбъект>
//  ТочкаВыбораВарианта <ТочкаВыбораВарианта>
//  Результат           <ВариантТочкиМаршрутаБизнесПроцесса>
//
Процедура ВыбратьВариантВыполненияПроцесса(ЭтотОбъект, ТочкаВыбораВарианта, Результат) Экспорт
	ВидРезультата = СтрЗаменить("#" + ТочкаВыбораВарианта.Имя, "#Проверить", "");
	РезультатВыполнения = ЭтотОбъект[ВидРезультата];
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда Возврат; КонецЕсли;	
	Результат = ТочкаВыбораВарианта.Варианты[новаОбщиеПроцедуры.ПолучитьИмяЗначенияПеречисления(РезультатВыполнения)];
КонецПроцедуры

// Переносить данные из задачи в бизнес-процесс.
//
// Параметры:
//  обБизнесПроцесс <БизнесПроцессОбъект>
//  Задача          <ЗадачаОбъект>
//  Отказ           <Булево>
//
Процедура ПриВыполненииЗадачи(обБизнесПроцесс, Задача, Отказ) Экспорт
	мдРеквизиты = обБизнесПроцесс.Метаданные().Реквизиты;
	Для Каждого мдРеквизит Из мдРеквизиты Цикл
		Если Лев(мдРеквизит.Имя, 9) <> "Результат" Тогда Продолжить; КонецЕсли;
		Если мдРеквизит.Имя = "РезультатРейса" Тогда Продолжить; КонецЕсли;
		
		Если ЗначениеЗаполнено(Задача[мдРеквизит.Имя]) Тогда
			обБизнесПроцесс[мдРеквизит.Имя] = Задача[мдРеквизит.Имя];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Если Клиент Тогда
//
// Помещает на форму бизнес-процесса элементы управления, реализующие интерфейс отображения
// истории выполнения бизнес-процесса.
//
// Параметры:
//  обКонтейнер <БизнесПроцессОбъект>
//  Форма       <Форма>
//
Процедура ПодключитьИнтерфейсИсторииВыполненияБизнесПроцесса(обКонтейнер, Форма) Экспорт
	ИнтерфейсИстория = Обработки.новаИнтерфейсИсторияВыполненияБизнесПроцесса.Создать();
	ИнтерфейсИстория.ПодключитьИнтерфейс(Форма, обКонтейнер, Форма.ЭлементыФормы.ОсновнаяПанель);
КонецПроцедуры

// Выполняет подключение интерфейса преднастройки
//
// Параметры:
//  обКонтейнер   <БизнесПроцессОбъект>
//  Форма         <Форма>
//  Преднастройка <Булево>
//  Группировки	  <Булево>
//  Периодичность <Булево>
//
Процедура ПодключитьИнтерфейсПреднастройки(обКонтейнер, Форма, Преднастройка = Ложь, 
										   Группировки = Ложь, Периодичность = Ложь) Экспорт
    ИнтерфейсПреднастройки = Обработки.новаИнтерфейсПреднастройки.Создать();
	ИнтерфейсПреднастройки.обКонтейнер = обКонтейнер;
	ИнтерфейсПреднастройки.Форма = Форма;
	ИнтерфейсПреднастройки.Преднастройка = Преднастройка;
	ИнтерфейсПреднастройки.Периодичность = Периодичность;
	ИнтерфейсПреднастройки.Группировки = Группировки;
	ИнтерфейсПреднастройки.ПодключитьИнтерфейс();
КонецПроцедуры
#КонецЕсли

// Заполняет стандартные реквизиты задачи.
//
// Параметры:
//  Задача <ЗадачаОбъект>
//
Процедура ЗаполнитьАвтораИДатуВыполненияЗадачи(Задача) Экспорт
	Если Не ЗначениеЗаполнено(Задача.ДатаВыполнения) Тогда
		Задача.ДатаВыполнения = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Задача.Автор) Тогда
		Задача.Автор = ПараметрыСеанса.новаТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

// Определяет, доступна ли текущему пользователю заданная подсистема УТЛ.
//
// Параметры:
//  Роль <СправочникСсылка.новаРолиУТЛ>: подсистема УТЛ.
//
// Возвращаемое значение:
//  <Булево>
//
Функция РольУТЛДоступна(Роль) Экспорт
	Возврат ПараметрыСеанса.новаТекущийПользователь.Роли.Найти(Роль, "Роль") <> Неопределено;
КонецФункции

// Инициализирует библиотеку для склонений.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
Процедура ИнициализироватьСклонения(новаКонтекст) Экспорт
#Если Клиент Тогда	
	Попытка		
		ЗагрузитьВнешнююКомпоненту("NameDecl.dll");
		НайденноеЗначение = Новый("AddIn.NameDeclension");		
	Исключение
		НайденноеЗначение = Неопределено;
	КонецПопытки;
#Иначе
	НайденноеЗначение = Неопределено;
#КонецЕсли
    новаКонтекст.Вставить("КомпонентаСклоненияФИО", НайденноеЗначение);	
КонецПроцедуры



