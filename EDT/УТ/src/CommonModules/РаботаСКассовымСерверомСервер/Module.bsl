Процедура РегламентВыгрузкаДанныхВКассовыйСервер(КодПланаОбмена) Экспорт
	УзелПланаОбмена = ПланыОбмена.ОбменСКассовымСервером.НайтиПоКоду(КодПланаОбмена);
	
	Прокси = ПолучитьПроксиКассовогоСервера(УзелПланаОбмена);
	
	ВыгрузкаГруппНоменклатуры(УзелПланаОбмена, Прокси);
	ВыгрузкаЭлементовНоменклатуры(УзелПланаОбмена, Прокси);
	ВыгрузкаЭлементовОрганизации(УзелПланаОбмена, Прокси);
	ВыгрузкаЭлементовКассыККМ(УзелПланаОбмена, Прокси);
	ВыгрузкаЭлементовКассиры(УзелПланаОбмена, Прокси);
	ВыгрузкаЭлементовПоставщикиТоваров(УзелПланаОбмена, Прокси);
	
	
	ЗагрузкаЧеков(УзелПланаОбмена, Прокси);
	ЗагрузкаДокументовСмен(УзелПланаОбмена, Прокси);
	
	//+++ БАО 09.06.2017 №1046  
	
	НаборЗаписей = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Ключ = "ДатаЗагрузкиДанныхВКассовыйСервер - " + КодПланаОбмена;
	
    НаборЗаписей.Отбор.Ключ.Установить(Ключ);
    Запись = НаборЗаписей.Добавить();
    Запись.Значение = lem.ДатаВСтроку(ТекущаяДата());
    Запись.Ключ = Ключ;
    НаборЗаписей.Записать();

	//--- БАО 09.06.2017 №1046  
	
КонецПроцедуры	

// ++Задача № 3553
Процедура  ТестированиеРегламентВыгрузкаДанныхВКассовыйСервер(КодПланаОбмена) Экспорт
	УзелПланаОбмена = ПланыОбмена.ОбменСКассовымСервером.НайтиПоКоду(КодПланаОбмена);	
	Прокси = ПолучитьПроксиКассовогоСервера(УзелПланаОбмена);
	
	// Метод тестирования
	ЗагрузкаДокументовСмен(УзелПланаОбмена, Прокси);
	//

КонецПроцедуры	
// --Задача № 3553

Процедура ВыгрузкаГруппНоменклатуры(УзелПланаОбмена, Прокси)
	
	ПроизводитьЛогирование = УзелПланаОбмена.ЛогироватьОбмен;
	
	Попытка
		// ++Задача № 3553
		requestXML = "";
		// --Задача № 3553
		
		МассивТоваровТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfGood");
		ТоварТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "good");
		
		МассивТоваров = Прокси.ФабрикаXDTO.Создать(МассивТоваровТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	НоменклатураИзменения.Ссылка КАК СсылкаТовара,
		            |	НоменклатураИзменения.Ссылка.Родитель.Ссылка КАК СсылкаРодителя,
		            |	НоменклатураИзменения.Ссылка.Код КАК code,
		            |	НоменклатураИзменения.Ссылка.Наименование КАК name,
		            |	ЕСТЬNULL(НоменклатураИзменения.Ссылка.НаименованиеПолное, """") КАК fullName,
		            |	НоменклатураИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
		            |	1 КАК isCatalog,
		            |	ВЫБОР
		            |		КОГДА НоменклатураИзменения.Ссылка.Родитель ЕСТЬ NULL
		            |			ТОГДА 0
		            |		КОГДА НоменклатураИзменения.Ссылка.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 1
		            |		КОГДА НоменклатураИзменения.Ссылка.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 2
		            |		КОГДА НоменклатураИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 3
		            |		КОГДА НоменклатураИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 4
		            |		КОГДА НоменклатураИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 5
		            |		КОГДА НоменклатураИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 6
		            |		ИНАЧЕ 7
		            |	КОНЕЦ КАК Уровень
		            |ИЗ
		            |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
		            |ГДЕ
		            |	НоменклатураИзменения.Ссылка.ЭтоГруппа = ИСТИНА
		            |	И НоменклатураИзменения.Узел.Ссылка = &УзелПланаОбмена
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	Уровень";
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		Рез = Зап.Выполнить();
		КолОбъектов = 0;
		Если Рез.Пустой() Тогда
			Если ПроизводитьЛогирование Тогда
				// ++Задача № 3553
				//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаГруппНоменклатуры,,Истина);
				ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoods, Истина);
				// --Задача № 3553
				Возврат;
			КонецеСли;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				Товар = Прокси.ФабрикаXDTO.Создать(ТоварТип);
				ЗаполнитьЗначенияСвойств(Товар, Выб);
				
				Товар.id = Выб.СсылкаТовара.УникальныйИдентификатор();
				Если ЗначениеЗаполнено(Выб.СсылкаРодителя) Тогда
					Товар.parentId = Выб.СсылкаРодителя.УникальныйИдентификатор();
				КонецЕсли;
				
				МассивТоваров.good.Добавить(Товар);
				КолОбъектов = КолОбъектов + 1;
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивТоваров);
			Результат = ЗаписьXML.Закрыть();	
			// ++Задача № 3553
			requestXML = Результат;
			// --Задача № 3553

			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadGoods(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
	
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.Номенклатура);
		КонецеСли;
	Исключение
		Ошибка = ОписаниеОшибки();
		// ++Задача № 3553
		//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаГруппНоменклатуры, Ложь, Ложь, Ошибка, КолОбъектов);
		ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoods,,Истина, Ошибка,,requestXML);
		// --Задача № 3553
		Возврат;
	КонецПопытки;
	
	// ++Задача № 3553
	//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаГруппНоменклатуры, Истина, Ложь,, КолОбъектов);
	ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoods,,,,КолОбъектов,requestXML);
	// --Задача № 3553
КонецПроцедуры	

// ++Задача № 3553

#Область СтароеЛогирование
//Процедура ЗаписьЛогирования(УзелПланаОбмена, Этап, ОбменВыполнен, НетДанных, Ошибка = "", КоличествоОбъектов = 0) 
//	ТекВр = ТекущаяДата();
//	
//	Наб = РегистрыСведений.ЛогОбменаСКассовымСервером.СоздатьНаборЗаписей();
//	Наб.Отбор.Узел.Установить(УзелПланаОбмена);
//	Наб.Отбор.ЭтапОбмена.Установить(Этап);
//	Наб.Отбор.Период.Установить(ТекВр);
//	
//	Нов = Наб.Добавить();
//	Нов.Период = ТекВр;
//	Нов.Узел = УзелПланаОбмена;
//	Нов.ЭтапОбмена = Этап;
//	Нов.ОбменВыполнен = ОбменВыполнен;
//	Нов.НетДанных = НетДанных;
//	Нов.Ошибка = Ошибка;
//	Нов.КоличествоОбъектов = КоличествоОбъектов;
//	
//	Наб.Записать();
//КонецПроцедуры	
#КонецОбласти

Функция РегионКассовогоСервера(УзелПланаОбмена)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегиональныеТерминалы.Код КАК Код
		|ИЗ
		|	Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы
		|ГДЕ
		|	РегиональныеТерминалы.СерверККМ = &СерверККМ";
	
	Запрос.УстановитьПараметр("СерверККМ", УзелПланаОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Код;
	Конецесли;	
	
	Возврат 0;
	
КонецФункции	

Процедура ЗаписьЛогирования(УзелПланаОбмена, Метод, НетДанных = Ложь, ЭтоОшибка = Ложь, Ошибка = "", КоличествоОбъектов = 0, requestXML = "", responseXML  = "")
	
	ПараметрыЛога = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаСервиса(Справочники.API.CasheServer, Метод);
	ПараметрыЛога.isError = ЭтоОшибка;
	ПараметрыЛога.errorDescription = Ошибка;
	ПараметрыЛога.noData = НетДанных;
	ПараметрыЛога.numberObjects = КоличествоОбъектов;
	ПараметрыЛога.requestXML    = requestXML;
	ПараметрыЛога.responseXML   = responseXML;
	
	ПараметрыЛога.region = РегионКассовогоСервера(УзелПланаОбмена);
	
	ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаСервиса(ПараметрыЛога);
	
КонецПроцедуры

// --Задача № 3553

Процедура УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, МенеджерДанных)
	Для Сч = 0 По СписокСсылокXDTO.data.Количество() - 1 Цикл
		UIDD = Новый УникальныйИдентификатор(СписокСсылокXDTO.data[Сч]);
		Ссылка = МенеджерДанных.ПолучитьСсылку(UIDD);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена, Ссылка);
	КонецЦикла;
КонецПроцедуры	


Процедура ВыгрузкаЭлементовНоменклатуры(УзелПланаОбмена, Прокси)
	
	ПроизводитьЛогирование = УзелПланаОбмена.ЛогироватьОбмен;
	
	КолЭлементов = 1000;
	Если УзелПланаОбмена.ОбъемНоменклатурыКВыгрузке <> 0 Тогда
		КолЭлементов = УзелПланаОбмена.ОбъемНоменклатурыКВыгрузке;
	КонецеСли;	
	
	Попытка
		
		// ++Задача № 3553
		requestXML = "";
		// --Задача № 3553

		МассивТоваровТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfGood");
		ТоварТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "good");
		
		МассивТоваров = Прокси.ФабрикаXDTO.Создать(МассивТоваровТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ #КолЭлементов#
		            |	НоменклатураИзменения.Ссылка КАК СсылкаТовара,
		            |	НоменклатураИзменения.Ссылка.Родитель.Ссылка КАК СсылкаРодителя,
		            |	НоменклатураИзменения.Ссылка.Код КАК code,
		            |	НоменклатураИзменения.Ссылка.Наименование КАК name,
		            |	ЕСТЬNULL(НоменклатураИзменения.Ссылка.НаименованиеПолное, """") КАК fullName,
		            |	НоменклатураИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
		            |	ЛОЖЬ КАК isCatalog
		            |ИЗ
		            |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
		            |ГДЕ
		            |	НоменклатураИзменения.Ссылка.ЭтоГруппа = ЛОЖЬ
		            |	И НоменклатураИзменения.Узел.Ссылка = &УзелПланаОбмена";
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		
		Зап.Текст = СтрЗаменить(Зап.Текст, "#КолЭлементов#", Формат(КолЭлементов, "ЧГ="));
		
		Рез = Зап.Выполнить();
		КолОбъектов = 0;
		Если Рез.Пустой() Тогда
			Если ПроизводитьЛогирование Тогда
				// ++Задача № 3553
				//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаЭлементовНоменклатуры,,Истина);
				ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoods, Истина);
				// --Задача № 3553
				Возврат;
			КонецеСли;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				Товар = Прокси.ФабрикаXDTO.Создать(ТоварТип);
				ЗаполнитьЗначенияСвойств(Товар, Выб);
				
				Товар.id = Выб.СсылкаТовара.УникальныйИдентификатор();
				Если ЗначениеЗаполнено(Выб.СсылкаРодителя) Тогда
					Товар.parentId = Выб.СсылкаРодителя.УникальныйИдентификатор();
				КонецЕсли;
				
				МассивТоваров.good.Добавить(Товар);
				КолОбъектов = КолОбъектов + 1;
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивТоваров);
			Результат = ЗаписьXML.Закрыть();	
			// ++Задача № 3553
			requestXML = Результат;
			// --Задача № 3553
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadGoods(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
	
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.Номенклатура);
		КонецеСли;
	Исключение
		Ошибка = ОписаниеОшибки();
		// ++Задача № 3553
		//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаЭлементовНоменклатуры, Ложь, Ложь, Ошибка, КолОбъектов);
		ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoods,,Истина, Ошибка,,requestXML);
		// --Задача № 3553
		Возврат;
	КонецПопытки;
	// ++Задача № 3553
	//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаЭлементовНоменклатуры, Истина, Ложь,,КолОбъектов);
	ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoods,,,,КолОбъектов,requestXML);
	// --Задача № 3553	
КонецПроцедуры	

Процедура ВыгрузкаЭлементовОрганизации(УзелПланаОбмена, Прокси)
	
	ПроизводитьЛогирование = УзелПланаОбмена.ЛогироватьОбмен;
	
	
	Попытка
		// ++Задача № 3553
		requestXML = "";
		// --Задача № 3553

		МассивОрганизацийТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfOrganization");
		ОрганизацияТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "organization");
		
		МассивОрганизаций = Прокси.ФабрикаXDTO.Создать(МассивОрганизацийТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ОрганизацииИзменения.Ссылка КАК СсылкаОрганизации,
		            |	ОрганизацииИзменения.Ссылка.Код КАК code,
		            |	ОрганизацииИзменения.Ссылка.Наименование КАК name,
		            |	ЕСТЬNULL(ОрганизацииИзменения.Ссылка.НаименованиеПолное, """") КАК fullName,
		            |	ОрганизацииИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
		            |	ЛОЖЬ КАК isCatalog,
		            |	ОрганизацииИзменения.Ссылка.ИНН КАК codeINN,
		            |	ОрганизацииИзменения.Ссылка.КодИМНС КАК codeIMNS,
		            |	ОрганизацииИзменения.Ссылка.КодПоОКАТО КАК codeOKATO,
		            |	ОрганизацииИзменения.Ссылка.КодПоОКПО КАК codeOKPO,
		            |	ОрганизацииИзменения.Ссылка.КПП КАК codeKPP,
		            |	ОрганизацииИзменения.Ссылка.ОГРН КАК codeOGRN,
		            |	ОрганизацииИзменения.Ссылка.АдресИнформированияДляПечатиЧеков КАК informationAddressForChecks
		            |ИЗ
		            |	Справочник.Организации.Изменения КАК ОрганизацииИзменения
		            |ГДЕ
		            |	ОрганизацииИзменения.Узел.Ссылка = &УзелПланаОбмена";
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		
		
		Рез = Зап.Выполнить();
		КолОбъектов = 0;
		Если Рез.Пустой() Тогда
			Если ПроизводитьЛогирование Тогда
				// ++Задача № 3553
				//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаОрганизаций,,Истина);
				ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadOrganizations, Истина);
				// --Задача № 3553
				Возврат;
			КонецеСли;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				Организация = Прокси.ФабрикаXDTO.Создать(ОрганизацияТип);
				ЗаполнитьЗначенияСвойств(Организация, Выб);
				
				Организация.id = Выб.СсылкаОрганизации.УникальныйИдентификатор();
				
				МассивОрганизаций.organization.Добавить(Организация);
				КолОбъектов = КолОбъектов + 1;
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивОрганизаций);
			Результат = ЗаписьXML.Закрыть();	
			// ++Задача № 3553
			requestXML = Результат;
			// --Задача № 3553
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadOrganizations(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
	
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.Организации);
		КонецеСли;
	Исключение
		Ошибка = ОписаниеОшибки();
		// ++Задача № 3553
		//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаОрганизаций, Ложь, Ложь, Ошибка, КолОбъектов);
		ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadOrganizations,,Истина, Ошибка,,requestXML);
		// --Задача № 3553
		Возврат;
	КонецПопытки;
	
	// ++Задача № 3553
	//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаОрганизаций, Истина, Ложь,,КолОбъектов);
	ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadOrganizations,,,,КолОбъектов,requestXML);
	// --Задача № 3553

КонецПроцедуры	

Процедура ВыгрузкаЭлементовКассыККМ(УзелПланаОбмена, Прокси)
	
	ПроизводитьЛогирование = УзелПланаОбмена.ЛогироватьОбмен;
	
	
	Попытка
		// ++Задача № 3553
		requestXML = "";
		// --Задача № 3553

		МассивКассТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfCashbox");
		КассаТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "cashbox");
		
		МассивКасс = Прокси.ФабрикаXDTO.Создать(МассивКассТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	КассыККМИзменения.Ссылка КАК СсылкаКассы,
		            |	КассыККМИзменения.Ссылка.Код КАК code,
		            |	КассыККМИзменения.Ссылка.Наименование КАК name,
		            |	КассыККМИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
		            |	ЛОЖЬ КАК isCatalog,
		            |	КассыККМИзменения.Ссылка.ФормироватьНефискальныеЧеки КАК formNonFiscalChecks,
		            |	КассыККМИзменения.Ссылка.ШиринаЛенты КАК rollWidth,
		            |	КассыККМИзменения.Ссылка.РучнойРежимФормирования КАК manualFormationMode,
		            |	КассыККМИзменения.Ссылка.Модель КАК model,
		            |	КассыККМИзменения.Ссылка.ПрикладнаяПрограмма КАК applicationProgram,
		            |	КассыККМИзменения.Ссылка.НомерПроизводителя КАК manufacturerNumber,
		            |	КассыККМИзменения.Ссылка.НаименованиеОрганизации КАК nameOfCompany,
		            |	КассыККМИзменения.Ссылка.АдресОрганизации КАК addressOrganizations,
		            |	КассыККМИзменения.Ссылка.ИННОрганизации КАК INNOrganization,
		            |	КассыККМИзменения.Ссылка.ОнлайнКасса КАК onlineCashbox,
		            |	КассыККМИзменения.Ссылка.АдресККМ КАК addressCashbox,
		            |	КассыККМИзменения.Ссылка.Владелец.Ссылка КАК Владелец,
		            |	КассыККМИзменения.Ссылка.ЗаводскойНомерККТ КАК kktFactoryNumber,
		            |	КассыККМИзменения.Ссылка.РегистрационныйНомерККТ КАК kktRegNumber,
		            |	КассыККМИзменения.Ссылка.НеВыводитьДанныеНаПечать КАК notPrintCheckOnKKT,
		            |	КассыККМИзменения.Ссылка.ВерсияФФД КАК ВерсияФФД
		            |ИЗ
		            |	Справочник.КассыККМ.Изменения КАК КассыККМИзменения
		            |ГДЕ
		            |	КассыККМИзменения.Узел.Ссылка = &УзелПланаОбмена";
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		
		
		Рез = Зап.Выполнить();
		КолОбъектов = 0;
		Если Рез.Пустой() Тогда
			Если ПроизводитьЛогирование Тогда
				// ++Задача № 3553
				//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаКассККМ,,Истина);
				ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadCashboxes, Истина);
				// --Задача № 3553			
				Возврат;
			КонецеСли;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				Касса = Прокси.ФабрикаXDTO.Создать(КассаТип);
				ЗаполнитьЗначенияСвойств(Касса, Выб);
				
				Касса.id = Выб.СсылкаКассы.УникальныйИдентификатор();
				Касса.ownerId = Выб.Владелец.УникальныйИдентификатор();
				
				ИндексЗначенияПеречисления = Перечисления.ВерсииФФД.Индекс(Выб.ВерсияФФД);
				Касса.versionFFD = Метаданные.Перечисления.ВерсииФФД.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
				
				
				МассивКасс.cashbox.Добавить(Касса);
				КолОбъектов = КолОбъектов + 1;
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивКасс);
			Результат = ЗаписьXML.Закрыть();	
			// ++Задача № 3553
			requestXML = Результат;
			// --Задача № 3553
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadCashboxes(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
	
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.КассыККМ);
		КонецеСли;
	Исключение
		Ошибка = ОписаниеОшибки();
		// ++Задача № 3553
		//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаКассККМ, Ложь, Ложь, Ошибка, КолОбъектов);
		ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadCashboxes,,Истина, Ошибка,,requestXML);
		// --Задача № 3553
		Возврат;
	КонецПопытки;
	
	// ++Задача № 3553
	//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаКассККМ, Истина, Ложь,,КолОбъектов);
	ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadCashboxes,,,,КолОбъектов,requestXML);
	// --Задача № 3553
КонецПроцедуры	


Процедура ВыгрузкаЭлементовКассиры(УзелПланаОбмена, Прокси)
	
	ПроизводитьЛогирование = УзелПланаОбмена.ЛогироватьОбмен;
	
	
	Попытка
		
		// ++Задача № 3553
		requestXML = "";
		// --Задача № 3553

		МассивКассировТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfCashier");
		КассирТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "cashier");
		
		МассивКассиров = Прокси.ФабрикаXDTO.Создать(МассивКассировТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	КассирыИзменения.Ссылка КАК СсылкаКассир,
		            |	КассирыИзменения.Ссылка.Код КАК code,
		            |	КассирыИзменения.Ссылка.ФизЛицо.Наименование КАК name,
		            |	КассирыИзменения.Ссылка.ПометкаУдаления КАК isDeleting
		            |ИЗ
		            |	Справочник.Кассиры.Изменения КАК КассирыИзменения
		            |ГДЕ
		            |	КассирыИзменения.Узел.Ссылка = &УзелПланаОбмена";
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		
		
		Рез = Зап.Выполнить();
		КолОбъектов = 0;
		Если Рез.Пустой() Тогда
			Если ПроизводитьЛогирование Тогда
				// ++Задача № 3553
				//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаКассиров,,Истина);
				ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadCashiers, Истина);
				// --Задача № 3553
				Возврат;
			КонецеСли;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				Кассир = Прокси.ФабрикаXDTO.Создать(КассирТип);
				ЗаполнитьЗначенияСвойств(Кассир, Выб);
				
				Кассир.id = Выб.СсылкаКассир.УникальныйИдентификатор();
				
				МассивКассиров.cashier.Добавить(Кассир);
				КолОбъектов = КолОбъектов + 1;
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивКассиров);
			Результат = ЗаписьXML.Закрыть();	
			// ++Задача № 3553
			requestXML = Результат;
			// --Задача № 3553
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadCashiers(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
	
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.Кассиры);
		КонецеСли;
	Исключение
		Ошибка = ОписаниеОшибки();
		// ++Задача № 3553
		//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаКассиров, Ложь, Ложь, Ошибка, КолОбъектов);
		ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadCashiers,,Истина, Ошибка,,requestXML);
		// --Задача № 3553
		Возврат;
	КонецПопытки;
	
	// ++Задача № 3553
	//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ВыгрузкаКассиров, Истина, Ложь,,КолОбъектов);
	ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadCashiers,,,,КолОбъектов,requestXML);
	// --Задача № 3553
КонецПроцедуры	


Процедура ВыгрузкаЭлементовПоставщикиТоваров(УзелПланаОбмена, Прокси)
	
	ПроизводитьЛогирование = УзелПланаОбмена.ЛогироватьОбмен;
	
	
	Попытка
		
		requestXML = "";

		МассивПоставщиковТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfGoodsSellers");
		ПоставщикТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "goodsSeller");
		
		МассивПоставщиков = Прокси.ФабрикаXDTO.Создать(МассивПоставщиковТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПоставщикиТоваровИзменения.Ссылка КАК СсылкаПоставщик,
		            |	ПоставщикиТоваровИзменения.Ссылка.Код КАК code,
		            |	ПоставщикиТоваровИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
		            |	ПоставщикиТоваровИзменения.Ссылка.Наименование КАК name,
		            |	ПоставщикиТоваровИзменения.Ссылка.ИНН КАК inn,
		            |	ПоставщикиТоваровИзменения.Ссылка.Телефон КАК phoneNumber
		            |ИЗ
		            |	Справочник.ПоставщикиТоваров.Изменения КАК ПоставщикиТоваровИзменения
		            |ГДЕ
		            |	ПоставщикиТоваровИзменения.Узел.Ссылка = &УзелПланаОбмена";
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		
		
		Рез = Зап.Выполнить();
		КолОбъектов = 0;
		Если Рез.Пустой() Тогда
			Если ПроизводитьЛогирование Тогда
				
				ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoodsSellers, Истина);
				
				Возврат;
			КонецеСли;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				Поставщик = Прокси.ФабрикаXDTO.Создать(ПоставщикТип);
				ЗаполнитьЗначенияСвойств(Поставщик, Выб);
				
				Поставщик.id = Выб.СсылкаПоставщик.УникальныйИдентификатор();
				
				МассивПоставщиков.goodsSeller.Добавить(Поставщик);
				КолОбъектов = КолОбъектов + 1;
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивПоставщиков);
			Результат = ЗаписьXML.Закрыть();	
			
			requestXML = Результат;
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadGoodsSellers(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
	
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.ПоставщикиТоваров);
		КонецеСли;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoodsSellers,,Истина, Ошибка,,requestXML);
		Возврат;
	КонецПопытки;
	
	ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.loadGoodsSellers,,,,КолОбъектов,requestXML);
КонецПроцедуры	


Процедура ПроверкаВыполненияВыгрузкиДанныхВКассовыйСервер() Экспорт
	
	//+++ БАО 09.06.2017 №1046 
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	МылоОдминов.Мыло КАК Мыло
	            |ИЗ
	            |	РегистрСведений.МылоОдминов КАК МылоОдминов";
	
	Стр = СтрокаСоединенияИнформационнойБазы();
	Таб = Зап.Выполнить().Выгрузить();			
	СпПол = Таб.ВыгрузитьКолонку("Мыло");
	
	УзелОбмена = ПланыОбмена.ОбменСКассовымСервером.Выбрать();
	
	Пока УзелОбмена.Следующий() Цикл 
		
		Если УзелОбмена.Ссылка = ПланыОбмена.ОбменСКассовымСервером.ЭтотУзел() Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		Ключ =   "ДатаЗагрузкиДанныхВКассовыйСервер - " + УзелОбмена.Код;
		
		ДатаНач = Неопределено;
		ОтборОбновленияЗаказов = Новый Структура;
		ОтборОбновленияЗаказов.Вставить("Ключ", Ключ);
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
		Запись.Свойство("Значение", ДатаНач);
		
		Если ЗначениеЗаполнено(ДатаНач) Тогда
			Попытка
				ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
			Исключение
				lem.ОтправитьСообщение(СпПол, "Проверка состояния выгрузки в кассовый центр. База (" + Стр + "), Узел обмена (" + УзелОбмена.Код + ")", "Ошибочное значение даты последней загрузки  "+ДатаНач);
				Продолжить;
			КонецПопытки;
		Иначе
			lem.ОтправитьСообщение(СпПол, "Проверка состояния выгрузки в кассовый центр. База (" + Стр + "), Узел обмена (" + УзелОбмена.Код + ")", "Не задана дата последней загрузки (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=" + Ключ + ")");
			Продолжить;
		КонецЕсли;
		
		ПослДата = Неопределено;
		
		//1. ПоследняяЗагрузкаЗаказов
		//2. ПоследняяЗаписаннаяЗагрузкаЗаказов
		
		Ключ =   "ДатаЗаписаннойЗагрузкиДанныхВКассовыйСервер - " + УзелОбмена.Код; 
		
		ОтборОбновленияЗаказов = Новый Структура;
		ОтборОбновленияЗаказов.Вставить("Ключ", Ключ);
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
		Запись.Свойство("Значение", ПослДата);
		ПослДата = Дата(ПослДата);
		
		
		Если ПослДата <> ДатаЗапроса Тогда
			Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
			Запись.Отбор.Ключ.Установить(Ключ);
			Запись.Прочитать();
			Если Запись.Количество() = 0 Тогда
				НоваяЗапись = Запись.Добавить();
			Иначе
				НоваяЗапись = Запись[0];
			КонецЕсли;
			НоваяЗапись.Ключ = Ключ;
			НоваяЗапись.Значение = lem.ДатаВСтроку(ДатаЗапроса);
			Попытка
				Запись.Записать();
			Исключение
				lem.ОтправитьСообщение(СпПол, "Проверка состояния выгрузки в кассовый центр. База (" + Стр + "), Узел обмена (" + УзелОбмена.Код + ")", "Ошибка обновления границы.");
			КонецПопытки;
		Иначе
			lem.ОтправитьСообщение(СпПол, "Проверка состояния выгрузки в кассовый центр. База (" + Стр + "), Узел обмена (" + УзелОбмена.Код + ")", "Не выгружаются данные, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
		КонецеСли;
		
	КонецЦикла;
	
	//--- БАО 09.06.2017 №1046 
	
КонецПроцедуры	

Процедура ЗагрузкаЧеков(УзелПланаОбмена, Прокси)
	// ++Задача № 3553
	responseXML = ""; 
	// --Задача № 3553
	
	ПроизводитьЛогирование = УзелПланаОбмена.ЛогироватьОбмен;
	
	Склад = Справочники.Склады.НайтиПоКоду("000000001");
	Секция = Справочники.СекцияККМ.НайтиПоКоду(1);
	ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
	РознТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	Доставка = Константы.УслугаДоставки.Получить();
	
	
	ТабТиповОплат = ПодготовитьСписокТиповОплат();
	ТабСтавокНДС = ПодготовитьСписокСтавокНДС_ФЗ54();
	ТабМА = ПодготовитьСписокПлановОбменовМА();
	
	
    МассивГУИДТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfUUID");
	МассивГУИД = Прокси.ФабрикаXDTO.Создать(МассивГУИДТип);
	
	
	Попытка
		Хр = Прокси.getChecks();
		
		Зап = Хр.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Зап);
		
		// ++Задача № 3553
		responseXML = Зап; 
		// --Задача № 3553

		МассивЧековТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfChecks");
		СписокЧеков = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивЧековТип);		
		
		Если СписокЧеков.check.Количество() = 0 Тогда
			Если ПроизводитьЛогирование Тогда
				// ++Задача № 3553
				//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ЗагрузкаЧеков,,Истина);
				ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.getChecks, Истина,,,,,responseXML);
				// --Задача № 3553
				
				Возврат;
			КонецеСли;
		КонецЕсли;
		
		//подготовка данных в БД
		ТабЗаказов = Новый ТаблицаЗначений;
		ТабЗаказов.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		ТабЗаказов.Колонки.Добавить("НомерРейса", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));
		
		
		Для Сч = 0 По СписокЧеков.check.Количество() - 1 Цикл
			Чек = СписокЧеков.check[Сч];
			Нов = ТабЗаказов.Добавить();
			Нов.НомерЗаказа = СокрЛП(Чек.orderId);
			Нов.НомерРейса = СокрЛП(Чек.tripId);
		КонецЦикла;	
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	Таб.НомерЗаказа КАК НомерЗаказа,
		            |	Таб.НомерРейса КАК НомерРейса
		            |ПОМЕСТИТЬ ВТ_Заказы
		            |ИЗ
		            |	&Таб КАК Таб
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ
		            |	ВТ_Заказы.НомерЗаказа КАК НомерЗаказа,
		            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		            |	ЕСТЬNULL(РейсДокумент.Ссылка, ЗНАЧЕНИЕ(Документ.Рейс.пустаяСсылка)) КАК Рейс
		            |ИЗ
		            |	ВТ_Заказы КАК ВТ_Заказы
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |		ПО ВТ_Заказы.НомерЗаказа = РеализацияТоваровУслуг.Номер
		            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК РейсДокумент
		            |		ПО ВТ_Заказы.НомерРейса = РейсДокумент.Номер";
		Зап.УстановитьПараметр("Таб", ТабЗаказов);
		ТабЗаказов = Зап.Выполнить().Выгрузить();
		
		УзелОбменаВыгрузкаЧековВАдминку = ПланыОбмена.ОбменСАдминкой.НайтиПоКоду("Adminka");

		
		//подготовка данных в БД
		КолОбъектов = 0;
		Для Сч = 0 По СписокЧеков.check.Количество() - 1 Цикл
			Чек = СписокЧеков.check[Сч];
			UIDD = Новый УникальныйИдентификатор(Чек.idDocument);
			Ссылка = Документы.ЧекККМ.ПолучитьСсылку(UIDD);
			
			Если Не ЗначениеЗаполнено(Ссылка.Номер) Тогда
				НовыйОбъект = Документы.ЧекККМ.СоздатьДокумент();
				НовыйОбъект.УстановитьСсылкуНового(Ссылка);
			Иначе
				НовыйОбъект = ссылка.ПолучитьОбъект();
				НовыйОбъект.Товары.Очистить();
				НовыйОбъект.Оплата.Очистить();
			КонецеСли;
			
			UIDD = Новый УникальныйИдентификатор(Чек.cashboxId);
			КассаККМ = Справочники.КассыККМ.ПолучитьСсылку(UIDD);
			
			
			НовыйОбъект.КассаККМ = КассаККМ.Ссылка;
			НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
			НовыйОбъект.ТипОплаты = ТабТиповОплат.Найти(Чек.payType).ТипОплаты;
			НовыйОбъект.Дата = Чек.dateDocument;
			НовыйОбъект.НомерСменыККМ = Чек.numberOperationShift;
			НовыйОбъект.НомерЧекаККМ = Чек.numberCheck;
			НовыйОбъект.Дата = Чек.dateDocument; 
			НовыйОбъект.ТипКассовогоЧека = ПолучитьТипКассовогоЧекаДляККМПоИдентификатору(Чек.checkType);
			
			НовОплата = НовыйОбъект.Оплата.Добавить();
			НовОплата.ВидОплаты = ВидОплаты;
			НовОплата.Сумма = Чек.sumCheck;
			
			НовыйОбъект.Организация = КассаККМ.Владелец;
			НовыйОбъект.Реализация = ТабЗаказов.Найти(СокрЛП(Чек.orderId)).Заказ;
			НовыйОбъект.Секция = Секция;
			НовыйОбъект.Склад = Склад;
			НовыйОбъект.СуммаДокумента = Чек.sumCheck;
			НовыйОбъект.ТипЦен = РознТипЦен;
			НовыйОбъект.ЧекПробитНаККМ = Чек.isPrinting;
			//НовыйОбъект.СуммаПредоплаты = Чек.prepaymentAmount;
			
			Для СчТов = 0 По Чек.goodsRows.checkRow.Количество() - 1 Цикл
				Товар = Чек.goodsRows.checkRow[СчТов];
				НовыйТовар = НовыйОбъект.Товары.Добавить();
				
				UIDD = Новый УникальныйИдентификатор(Товар.goodId);
				//неоптимизировано, переход на Код вместо UID
				НовыйТовар.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Товар.goodCode);
				
				//Справочники.Номенклатура.ПолучитьСсылку(UIDD);
				
				НовыйТовар.ЕдиницаИзмерения = НовыйТовар.Номенклатура.ЕдиницаХраненияОстатков;
				НовыйТовар.Количество = Товар.count;
				НовыйТовар.Коэффициент = 1;
				НовыйТовар.СтавкаНДСФЗ54 = ТабСтавокНДС.Найти(Товар.NDS).СтавкаНДС;
				НовыйТовар.Цена = Товар.price;
				НовыйТовар.КодМаркировки = Товар.markingCode;
				НовыйТовар.Сумма = Окр(НовыйТовар.Цена*НовыйТовар.Количество, 2);
				НовыйТовар.ПризнакПредметаРасчета = Товар.signSubjectCalc;
			КонецЦикла;	
			
			//доставка
			НовыйТовар = НовыйОбъект.Товары.Добавить();
			
			НовыйТовар.Номенклатура = Доставка;
			НовыйТовар.ЕдиницаИзмерения = Доставка.ЕдиницаХраненияОстатков;
			НовыйТовар.Количество = 1;
			НовыйТовар.Коэффициент = 1;
			НовыйТовар.СтавкаНДСФЗ54 = ТабСтавокНДС.Найти(Чек.deliveryNDS).СтавкаНДС;
			НовыйТовар.Цена = Чек.deliveryPrice;
			НовыйТовар.Сумма = Окр(НовыйТовар.Цена*НовыйТовар.Количество, 2);
			НовыйТовар.ПризнакПредметаРасчета = 4;
			//доставка
			
			
			
			НовыйОбъект.Записать(РежимЗаписиДокумента.Запись);
			НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ПараметрыЧека = Новый Структура;
			ПараметрыЧека.Вставить("НомерДокумента", Чек.checkNumberDocument);
			ПараметрыЧека.Вставить("ФПД", Чек.fpd);
			ПараметрыЧека.Вставить("ФД", Чек.fd);
			ПараметрыЧека.Вставить("ФН", Чек.fn);
			ПараметрыЧека.Вставить("ДатаЧека", Чек.time);
			ПараметрыЧека.Вставить("СуммаЧека", Чек.sumCheck);
			ПараметрыЧека.Вставить("ТипЧека", Чек.typeCheck);
			ПараметрыЧека.Вставить("КассовыйСервер", УзелПланаОбмена.Ссылка);
			ПараметрыЧека.Вставить("МобильноеПриложение", ТабМА.Найти(Чек.MA).МП);
			ПараметрыЧека.Вставить("ИдентификаторЧекаКПечати", Чек.numberCheckForPrint);
			ПараметрыЧека.Вставить("НомерЧекаВКассовомСервере", Чек.numberDocument);
			ПараметрыЧека.Вставить("ИдентификаторЧекаКВозврату", Чек.idCheckForReturn);
			ПараметрыЧека.Вставить("Рейс", ТабЗаказов.Найти(СокрЛП(Чек.orderId)).Рейс);
			
			lem.ЗафиксироватьДопПараметрыВЧеке(НовыйОбъект.Ссылка, ПараметрыЧека);
			КолОбъектов = КолОбъектов + 1;
			МассивГУИД.data.Добавить(Чек.idDocument);
			Попытка
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаВыгрузкаЧековВАдминку, НовыйОбъект.Ссылка);
			Исключение
				
			КонецПопытки;	
		КонецЦикла;	
		
		Если КолОбъектов <> 0 Тогда
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивГУИД);
			Результат = ЗаписьXML.Закрыть();	
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			Рез = Прокси.delRegistrationChecks(Хр);
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Если ПроизводитьЛогирование Тогда
			// ++Задача № 3553
			//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ЗагрузкаЧеков, Ложь, Ложь, Ошибка, КолОбъектов);
			ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.getChecks,,Истина, Ошибка,,,responseXML);
			// --Задача № 3553
		КонецеСли;	
		Возврат;
	КонецПопытки;
	Если ПроизводитьЛогирование Тогда
		// ++Задача № 3553
		//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ЗагрузкаЧеков, Истина, Ложь, ,КолОбъектов);
		ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.getChecks,,,,КолОбъектов,,responseXML);
		// --Задача № 3553
	КонецеСли;	
КонецПроцедуры	


Функция ПодготовитьСписокТиповОплат()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТипыОплат.Ссылка КАК ТипОплаты,
	            |	ТипыОплат.Код КАК Код
	            |ИЗ
	            |	Справочник.ТипыОплат КАК ТипыОплат";
	Возврат Зап.Выполнить().Выгрузить();
КонецФункции	


Функция ПодготовитьСписокСтавокНДС_ФЗ54()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	СтавкиНДСФЗ54.Ссылка КАК СтавкаНДС,
	            |	СтавкиНДСФЗ54.КодВАдминке КАК КодВАдминке
	            |ИЗ
	            |	Справочник.СтавкиНДСФЗ54 КАК СтавкиНДСФЗ54";
	Таб = Зап.Выполнить().Выгрузить();
	Нов = Таб.Добавить();
	Нов.СтавкаНДС = Справочники.СтавкиНДСФЗ54.НДС18;
	Нов.КодВАдминке = -2;
	Возврат Таб;
КонецФункции	

Функция ПодготовитьСписокПлановОбменовМА()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ИзмененияДляМП.Ссылка КАК МП,
	            |	ИзмененияДляМП.Код КАК КодМП
	            |ИЗ
	            |	ПланОбмена.ИзмененияДляМП КАК ИзмененияДляМП
	            |ГДЕ
	            |	ИзмененияДляМП.ЭтотУзел = ЛОЖЬ";
	Возврат Зап.Выполнить().Выгрузить();
КонецФункции	

Процедура РегламентПроверкаККМНаДлительнуюБлокировку() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЛогЗахватаККМНаСервереККМСрезПоследних.Период КАК Период,
	            |	ЛогЗахватаККМНаСервереККМСрезПоследних.СерверККМ КАК СерверККМ,
	            |	ЛогЗахватаККМНаСервереККМСрезПоследних.ККМ КАК ККМ
	            |ИЗ
	            |	РегистрСведений.ЛогЗахватаККМНаСервереККМ.СрезПоследних КАК ЛогЗахватаККМНаСервереККМСрезПоследних
	            |ГДЕ
	            |	ЛогЗахватаККМНаСервереККМСрезПоследних.СтатусЗахвата = ЗНАЧЕНИЕ(Перечисление.СтатусыЗахватаККМНаСервереККМ.ККМЗахвачена)";
	Рез = Зап.Выполнить();
	
	Выб = Рез.Выбрать();
	
	ТД = ТекущаяДата();
	МаксимальнаяРазрешеннаяУдаленностьСтатуса = 1200; // глубина в секундах
	Пока Выб.Следующий() Цикл
		Удаленность = ТД - Выб.Период;
		Если Удаленность > МаксимальнаяРазрешеннаяУдаленностьСтатуса Тогда
			lem.ОтправитьНормальноеСообщениеАдминам("Снятие блокировки кассы на сервере ККМ (отмена захвата кассиром)", "ККМ " + Строка(Выб.ККМ));
			ОтпуститьККМНаСервереККМ(Выб.ККМ, Выб.СерверККМ, "");
		КонецеСли;	
	КонецЦикла;	
КонецПроцедуры	

Функция УстановитьСтатусККМНаСервереККМ(ККМ, УзелПланаОбмена, Статус)
	Прокси = ПолучитьПроксиКассовогоСервера(УзелПланаОбмена);
	UUID = ККМ.УникальныйИдентификатор();
	Струк = Новый Структура;
	Попытка
		Ответ = Прокси.setStatusCashbox(UUID, Статус);
		Возврат lem.ВернутьСтруктуруПоXDTO(Ответ, Струк);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Струк.Вставить("result", Ложь);
		Струк.Вставить("status", ТекстОшибки);
		Возврат Струк;
	Конецпопытки;	
КонецФункции

Функция ПолучитьПроксиКассовогоСервера(УзелПланаОбмена)
	WSОпр = Новый WSОпределения(УзелПланаОбмена.АдресWebСервиса, УзелПланаОбмена.ИмяПользователя, УзелПланаОбмена.ПарольПользователя);	
	Прокси = Новый WSПрокси(WSОпр, "http://www.strizh.org/exchange_utl", "ExchangeUTL", "ExchangeUTLSoap");
	Прокси.Пользователь = УзелПланаОбмена.ИмяПользователя;
	Прокси.Пароль = УзелПланаОбмена.ПарольПользователя;
	
	Возврат Прокси;
КонецФункции	

Функция ЗахватитьККМНаСервереККМ(ККМ, УзелПланаОбмена, ИсточникСобытия, ИзмененоРегламентом = Ложь) Экспорт
	СтатусЗахвата = Перечисления.СтатусыЗахватаККМНаСервереККМ.ККМЗахвачена;
	Ответ = Новый Структура;
	
	Попытка
		ОтветСтатуса = УстановитьСтатусККМНаСервереККМ(ККМ, УзелПланаОбмена, 1);
		
		Если ОтветСтатуса.result Тогда
			ЗаписьЛогаЗахватаККМНаСервереККМ(ККМ, УзелПланаОбмена, СтатусЗахвата, ИсточникСобытия,,,ИзмененоРегламентом);
		Иначе
			ЗаписьЛогаЗахватаККМНаСервереККМ(ККМ, УзелПланаОбмена, СтатусЗахвата, ИсточникСобытия, Истина, ОтветСтатуса.status, ИзмененоРегламентом);
		КонецЕсли;	
		
		Ответ.Вставить("Результат", ОтветСтатуса.result);
		Ответ.Вставить("Описание", ОтветСтатуса.status);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЛогаЗахватаККМНаСервереККМ(ККМ, УзелПланаОбмена, СтатусЗахвата, ИсточникСобытия, Истина, ТекстОшибки, ИзмененоРегламентом);
		Ответ.Вставить("Результат", Ложь);
		Ответ.Вставить("Описание", ТекстОшибки);
	КонецПопытки;	
	
	Возврат Ответ;
КонецФункции	

Функция ОтпуститьККМНаСервереККМ(ККМ, УзелПланаОбмена, ИсточникСобытия, ИзмененоРегламентом = Ложь) Экспорт
	СтатусЗахвата = Перечисления.СтатусыЗахватаККМНаСервереККМ.ККМОсвобождена;
	Ответ = Новый Структура;
	
	Попытка
		ОтветСтатуса = УстановитьСтатусККМНаСервереККМ(ККМ, УзелПланаОбмена, 2);
		
		Если ОтветСтатуса.result Тогда
			ЗаписьЛогаЗахватаККМНаСервереККМ(ККМ, УзелПланаОбмена, СтатусЗахвата, ИсточникСобытия,,, ИзмененоРегламентом);
		Иначе
			ЗаписьЛогаЗахватаККМНаСервереККМ(ККМ, УзелПланаОбмена, СтатусЗахвата, ИсточникСобытия, Истина, ОтветСтатуса.status, ИзмененоРегламентом);
		КонецЕсли;	
		
		Ответ.Вставить("Результат", ОтветСтатуса.result);
		Ответ.Вставить("Описание", ОтветСтатуса.status);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЛогаЗахватаККМНаСервереККМ(ККМ, УзелПланаОбмена, СтатусЗахвата, ИсточникСобытия, Истина, ТекстОшибки, ИзмененоРегламентом);
		Ответ.Вставить("Результат", Ложь);
		Ответ.Вставить("Описание", ТекстОшибки);
	КонецПопытки;	
	
	Возврат Ответ;
КонецФункции	

Процедура ЗаписьЛогаЗахватаККМНаСервереККМ(ККМ, УзелПланаОбмена, СтатусЗахвата, ИсточникСобытия, Ошибка = Ложь, ТекстОшибки = "", СтатусИзмененРегламентом = Ложь)
	ТД = ТекущаяДата();
	
	Наб = РегистрыСведений.ЛогЗахватаККМНаСервереККМ.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТД);
	Наб.Отбор.СерверККМ.Установить(УзелПланаОбмена);
	Наб.Отбор.ККМ.Установить(ККМ);
	
	Нов = Наб.Добавить();
	Нов.Период = ТД;
	Нов.СерверККМ = УзелПланаОбмена;
	Нов.ККМ = ККМ;
	Нов.СтатусЗахвата = СтатусЗахвата;
	Нов.Ошибка = Ошибка;
	Нов.ТекстОшибки = ТекстОшибки;
	Нов.Документ = ИсточникСобытия;
	Нов.СтатусИзмененРегламентом = СтатусИзмененРегламентом;
	
	Наб.Записать();
КонецПроцедуры	


Функция ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипЧека) Экспорт
	Если ТипЧека = Перечисления.ТипыКассовыхЧеков.ЧекПрихода Или Не ЗначениеЗаполнено(ТипЧека) Тогда
		Возврат 1;
	ИначеЕсли ТипЧека = Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда	
		Возврат 2;
	ИначеЕсли ТипЧека = Перечисления.ТипыКассовыхЧеков.ЧекРасхода Тогда	
		Возврат 4;
	ИначеЕсли ТипЧека = Перечисления.ТипыКассовыхЧеков.ЧекВозвратаРасхода Тогда	
		Возврат 5;
	ИначеЕсли ТипЧека = Перечисления.ТипыКассовыхЧеков.ЧекКоррекцииПрихода Тогда	
		Возврат 7;
	ИначеЕсли ТипЧека = Перечисления.ТипыКассовыхЧеков.ЧекКоррекцииВозвратаПрихода Тогда	
		Возврат 8;
	ИначеЕсли ТипЧека = Перечисления.ТипыКассовыхЧеков.ЧекКоррецииРасхода Тогда	
		Возврат 9;
	ИначеЕсли ТипЧека = Перечисления.ТипыКассовыхЧеков.ЧекКоррекцииВозвратаРасхода Тогда	
		Возврат 10;
	КонецеСли;	
КонецФункции	


Функция ПолучитьТипКассовогоЧекаДляККМПоИдентификатору(ИдентификаторТипаЧека) Экспорт
	Если ИдентификаторТипаЧека = 1 Тогда
		Возврат Перечисления.ТипыКассовыхЧеков.ЧекПрихода;
	ИначеЕсли ИдентификаторТипаЧека = 2 Тогда	
		Возврат Перечисления.ТипыКассовыхЧеков.ЧекВозвратаПрихода;
	ИначеЕсли ИдентификаторТипаЧека = 4 Тогда	
		Возврат Перечисления.ТипыКассовыхЧеков.ЧекРасхода;
	ИначеЕсли ИдентификаторТипаЧека = 5 Тогда	
		Возврат Перечисления.ТипыКассовыхЧеков.ЧекВозвратаРасхода;
	ИначеЕсли ИдентификаторТипаЧека = 7 Тогда	
		Возврат Перечисления.ТипыКассовыхЧеков.ЧекКоррекцииПрихода;
	ИначеЕсли ИдентификаторТипаЧека = 8 Тогда	
		Возврат Перечисления.ТипыКассовыхЧеков.ЧекКоррекцииВозвратаПрихода;
	ИначеЕсли ИдентификаторТипаЧека = 9 Тогда	
		Возврат Перечисления.ТипыКассовыхЧеков.ЧекКоррецииРасхода;
	ИначеЕсли ИдентификаторТипаЧека = 10 Тогда	
		Возврат Перечисления.ТипыКассовыхЧеков.ЧекКоррекцииВозвратаРасхода;
	КонецеСли;	
КонецФункции	

Функция ОткрытьСменуНаСервереККМ(ККМ) Экспорт
	Кассир = УчетКассировСервер.ПолучитьКассира(ККМ.Владелец, ККМ, Истина);
	Прокси = ПолучитьПроксиКассовогоСервера(ККМ.Терминал.СерверККМ);
	UUIDКасса = ККМ.УникальныйИдентификатор();
	UUIDКассир = Кассир.УникальныйИдентификатор();
	Струк = Новый Структура;
	Попытка
		Ответ = Прокси.openShift(UUIDКасса, UUIDКассир);
		
		ЗарегистрироватьОткрытиеСменыККМ(ККМ, Кассир, "", Ответ.UUIDdoc);
		
		Возврат lem.ВернутьСтруктуруПоXDTO(Ответ, Струк);
	Исключение
		
		
		ТекстОшибки = ОписаниеОшибки();
		lem.ОтправитьНормальноеСообщениеАдминам("Открытие смены на сервере ККМ - ошибка", ТекстОшибки);
		Струк.Вставить("result", Ложь);
		Струк.Вставить("status", ТекстОшибки);
		Возврат Струк;
	Конецпопытки;	
КонецФункции	


Процедура ЗарегистрироватьОткрытиеСменыККМ(ККМ, Кассир, График = "", UIDD = "") Экспорт
	Если ЗначениеЗаполнено(UIDD) Тогда
		Ссылка = Документы.ОткрытиеСменыККМ.ПолучитьСсылку(UIDD);
		
		Если Не ЗначениеЗаполнено(Ссылка.Номер) Тогда
			Док = Документы.ОткрытиеСменыККМ.СоздатьДокумент();
			Док.УстановитьСсылкуНового(Ссылка);
		Иначе
			Док = ссылка.ПолучитьОбъект();
		КонецеСли;
	Иначе
		Док = Документы.ОткрытиеСменыККМ.СоздатьДокумент();
	КонецеСли;
	
	Док.ККМ = ККМ;
	Док.Дата = ТекущаяДата();
	Док.Кассир = Кассир;
	Док.ГрафикКассира = График;
	
	Док.Записать(РежимЗаписиДокумента.Запись);
	Док.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры	

Функция ЗакрытьСменуНаСервереККМ(ККМ) Экспорт
	Кассир = УчетКассировСервер.ПолучитьКассира(ККМ.Владелец, ККМ);
	Прокси = ПолучитьПроксиКассовогоСервера(ККМ.Терминал.СерверККМ);
	UUIDКасса = ККМ.УникальныйИдентификатор();
	UUIDКассир = Кассир.УникальныйИдентификатор();
	Струк = Новый Структура;
	Попытка
		Ответ = Прокси.closeShift(UUIDКасса);
		
		ЗарегистрироватьЗакрытиеСменыККМ(ККМ, Кассир, Ответ.UUIDdoc);
		
		Возврат lem.ВернутьСтруктуруПоXDTO(Ответ, Струк);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Струк.Вставить("result", Ложь);
		Струк.Вставить("status", ТекстОшибки);
		Возврат Струк;
	Конецпопытки;	
КонецФункции	



Процедура ЗарегистрироватьЗакрытиеСменыККМ(ККМ, Кассир, UIDD = "") Экспорт
	Если ЗначениеЗаполнено(UIDD) Тогда
		Ссылка = Документы.ЗакрытиеСменыККМ.ПолучитьСсылку(UIDD);
		
		Если Не ЗначениеЗаполнено(Ссылка.Номер) Тогда
			Док = Документы.ЗакрытиеСменыККМ.СоздатьДокумент();
			Док.УстановитьСсылкуНового(Ссылка);
		Иначе
			Док = ссылка.ПолучитьОбъект();
		КонецеСли;
	Иначе
		Док = Документы.ЗакрытиеСменыККМ.СоздатьДокумент();
	КонецеСли;
	
	Док.ККМ = ККМ;
	Док.Дата = ТекущаяДата();
	Док.Кассир = Кассир;
	
	Док.Записать(РежимЗаписиДокумента.Запись);
	Док.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры	


Процедура ЗагрузкаДокументовСмен(УзелПланаОбмена, Прокси)
	// ++Задача № 3553
	responseXML = ""; 
	// --Задача № 3553
	
	ПроизводитьЛогирование = УзелПланаОбмена.ЛогироватьОбмен;
	
	
	
    МассивГУИДТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfUUID");
	
	МассивГУИД_ОткрСмены = Прокси.ФабрикаXDTO.Создать(МассивГУИДТип);
	МассивГУИД_ЗакрСмены = Прокси.ФабрикаXDTO.Создать(МассивГУИДТип);
	
	
	Попытка
		Хр = Прокси.getShiftDocs();
		
		Зап = Хр.Получить();
		Чт = Новый ЧтениеXML();
		Чт.УстановитьСтроку(Зап);
		
		// ++Задача № 3553
		responseXML = Зап; 
		// --Задача № 3553

		МассивДокументовТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfShiftDoc");
		СписокДокументов = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивДокументовТип);		
		
		Если СписокДокументов.shiftDoc.Количество() = 0 Тогда
			Если ПроизводитьЛогирование Тогда
				// ++Задача № 3553
				//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ЗагрузкаДокументовКассовыхСмен,,Истина);
				ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.getShiftDocs, Истина,,,,,responseXML);
				// --Задача № 3553
				Возврат;
			КонецеСли;
		КонецЕсли;
		

		КолОбъектов = 0;
		КолОткр = 0;
		КолЗакр = 0;
		Для Сч = 0 По СписокДокументов.shiftDoc.Количество() - 1 Цикл
			Док = СписокДокументов.shiftDoc[Сч];
			UIDD = Новый УникальныйИдентификатор(Док.idDocument);
			
			Если Док.typeDoc = 1 Тогда
				Ссылка = Документы.ОткрытиеСменыККМ.ПолучитьСсылку(UIDD);	
			ИначеЕсли Док.typeDoc = 2 Тогда
				Ссылка = Документы.ЗакрытиеСменыККМ.ПолучитьСсылку(UIDD);	
			КонецеСли;
			
			Если Не ЗначениеЗаполнено(Ссылка.Номер) Тогда
				Если Док.typeDoc = 1 Тогда
					НовыйОбъект = Документы.ОткрытиеСменыККМ.СоздатьДокумент();
				ИначеЕсли Док.typeDoc = 2 Тогда
					НовыйОбъект = Документы.ЗакрытиеСменыККМ.СоздатьДокумент();
				КонецеСли;
				НовыйОбъект.УстановитьСсылкуНового(Ссылка);
			Иначе
				НовыйОбъект = Ссылка.ПолучитьОбъект();
			КонецеСли;
			
			UIDD = Новый УникальныйИдентификатор(Док.cashboxId);
			КассаККМ = Справочники.КассыККМ.ПолучитьСсылку(UIDD);
			
			НовыйОбъект.Дата = Док.dateDocument;
			НовыйОбъект.ККМ = КассаККМ.Ссылка;
			
			НовыйОбъект.Записать(РежимЗаписиДокумента.Запись);
			НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			КолОбъектов = КолОбъектов + 1;
			Если Док.typeDoc = 1 Тогда
				МассивГУИД_ОткрСмены.data.Добавить(Док.idDocument);
				КолОткр = КолОткр + 1;
			ИначеЕсли Док.typeDoc = 2 Тогда	
				МассивГУИД_ЗакрСмены.data.Добавить(Док.idDocument);
				КолЗакр = КолЗакр + 1;
			КонецеСли;	
		КонецЦикла;	
		
		Если КолОбъектов <> 0 Тогда
			Если КолОткр <> 0 Тогда
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.УстановитьСтроку();
				Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивГУИД_ОткрСмены);
				Результат = ЗаписьXML.Закрыть();	
				Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
				Рез = Прокси.delRegistrationShiftDocs(Хр, 1);
			КонецЕсли;
			
			Если КолЗакр <> 0 Тогда
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.УстановитьСтроку();
				Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивГУИД_ЗакрСмены);
				Результат = ЗаписьXML.Закрыть();	
				Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
				Рез = Прокси.delRegistrationShiftDocs(Хр, 2);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Если ПроизводитьЛогирование Тогда
			// ++Задача № 3553
			//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ЗагрузкаДокументовКассовыхСмен, Ложь, Ложь, Ошибка, КолОбъектов);
			ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.getShiftDocs,,Истина, Ошибка,,,responseXML);
			// --Задача № 3553		
		КонецеСли;	
		Возврат;
	КонецПопытки;
	Если ПроизводитьЛогирование Тогда
		// ++Задача № 3553
		//ЗаписьЛогирования(УзелПланаОбмена, Перечисления.ЭтапыОбменаСКассовымСервером.ЗагрузкаДокументовКассовыхСмен, Истина, Ложь, ,КолОбъектов);
		ЗаписьЛогирования(УзелПланаОбмена, Справочники.МетодыAPI.getShiftDocs,,,,КолОбъектов,,responseXML);
		// --Задача № 3553
	КонецеСли;	
КонецПроцедуры	

Процедура ЗафиксироватьСнятиеОтчетаВРС(ККМ, ТипОтчета, Пользователь, ЕстьОшибка) Экспорт
	ТД = ТекущаяДата();
	Наб = РегистрыСведений.ОтчетыККМ.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТД);
	Наб.Отбор.КассаККМ.Установить(ККМ);
	
	Нов = Наб.Добавить();
	Нов.КассаККМ = ККМ;
	Нов.Период = ТД;
	Нов.ТипОтчета = ТипОтчета;
	Нов.Ошибка = ЕстьОшибка;
	Нов.Пользователь = Пользователь;
	
	наб.Записать();
КонецПроцедуры	

Процедура ЗафиксироватьИзмененияНоменклатурыДляКС(МассивНоменклатуры = Неопределено, Номенклатура) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ОбменСКассовымСервером.Ссылка КАК Узел
	            |ИЗ
	            |	ПланОбмена.ОбменСКассовымСервером КАК ОбменСКассовымСервером
	            |ГДЕ
	            |	ОбменСКассовымСервером.ПометкаУдаления = ЛОЖЬ
	            |	И ОбменСКассовымСервером.ЭтотУзел = ЛОЖЬ";
	МасУзлов = Зап.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
	
	Если МассивНоменклатуры <> Неопределено Тогда
		Для Каждого Тек Из МассивНоменклатуры Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МасУзлов, Тек);
		КонецЦикла;	
	Иначе
		ПланыОбмена.ЗарегистрироватьИзменения(МасУзлов, Номенклатура);
	КонецеСли;
КонецПроцедуры	