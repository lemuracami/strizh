
// Возвращает пустую таблицу отборов.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьТаблицуОтборов() Экспорт
	тзОтборы = Новый ТаблицаЗначений;
	тзОтборы.Колонки.Добавить("Отбор");
	тзОтборы.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	тзОтборы.Колонки.Добавить("Представление");
	тзОтборы.Колонки.Добавить("ТипЗначения");
	тзОтборы.Колонки.Добавить("ВидСравнения");
	тзОтборы.Колонки.Добавить("Значение");
	тзОтборы.Колонки.Добавить("ЗначениеНачало");
	тзОтборы.Колонки.Добавить("ЗначениеКонец");
	тзОтборы.Колонки.Добавить("НаФорме", Новый ОписаниеТипов("Булево"));
	тзОтборы.Колонки.Добавить("МакросПоместитьЗначениеНаФорму");
	тзОтборы.Колонки.Добавить("МакросПрочитатьЗначениеСФормы");
	тзОтборы.Колонки.Добавить("ЭлементФлажокИспользования");
	тзОтборы.Колонки.Добавить("ЭлементВидСравнения");
	тзОтборы.Колонки.Добавить("ЭлементПолеВвода");
	тзОтборы.Колонки.Добавить("ЭлементПолеВводаНачало");
	тзОтборы.Колонки.Добавить("ЭлементПолеВводаКонец");
	тзОтборы.Колонки.Добавить("ДоступныеВидыСравнений");
	тзОтборы.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	тзОтборы.Колонки.Добавить("НеВключатьВУсловияФормирования", Новый ОписаниеТипов("Булево"));
	
	Возврат тзОтборы;
КонецФункции

// Копирует таблицу отборов.
//
// Параметры:
//  тзИсточник <ТаблицаЗначений[ТаблицаОтборов]>
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция СкопироватьОтборы(тзИсточник) Экспорт
	тзОтборы = ПолучитьТаблицуОтборов();
	
	Для Каждого Строка Из тзИсточник Цикл
		ЗаполнитьЗначенияСвойств(тзОтборы.Добавить(), Строка, "Отбор,Использование,Представление,ТипЗначения,ВидСравнения,Значение,ЗначениеНачало,ЗначениеКонец,НаФорме,ДоступныеВидыСравнений,ТолькоПросмотр");
	КонецЦикла;
	
	Возврат тзОтборы;
КонецФункции

// Копирует отборы из источника в приемник.
//
// Параметры:
//  тзПриемник <ТаблицаЗначений[ТаблицаОтборов]>
//  тзИсточник <ТаблицаЗначений[ТаблицаОтборов]>
//
Процедура ПеренестиОтборы(тзПриемник, тзИсточник) Экспорт
	Для Каждого стрИсточник Из тзИсточник Цикл
		стрПриемник = тзПриемник.Найти(стрИсточник.Отбор, "Отбор");
		Если стрПриемник = Неопределено Тогда Продолжить; КонецЕсли;
		Если стрПриемник.ТолькоПросмотр Тогда Продолжить; КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(стрПриемник, стрИсточник, "Использование, ВидСравнения, Значение, ЗначениеНачало, ЗначениеКонец");
	КонецЦикла;
КонецПроцедуры

// Рассчитывает, сколько пикселей в высоту займут отборы на форме.
//
// Параметры:
//  Отборы <Коллекция(<СтрокаТаблицыЗначений[ЭлементОтбора]>)>
//
// Возвращаемое значение:
//  <Число>
//
Функция ПолучитьВысотуОтборов(Отборы) Экспорт
	Возврат Отборы.Количество() * (19 + 7);
КонецФункции

// Возвращает уникальное имя элемента упрвавления формы.
//
// Возвращаемое значение:
//  <Строка>
//
Функция НовоеИмяЭлемента()
	Возврат "ЭУ_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "_");
КонецФункции

// Определяет, какие виды сравнения применимы к элементу отбора с определенным типом.
//
// Параметры:
//  Тип <Тип>
//
// Возвращаемое значение:
//  <СписокЗначений(<ВидСравнения>)>
//
Функция ПолучитьСписокВидовСравненийПоТипу(Тип)
	сзВидыСравнений = Новый СписокЗначений;
	
	Если Тип = Тип("Строка") Тогда
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		сзВидыСравнений.Добавить(ВидСравнения.Содержит, "Содержит");
		сзВидыСравнений.Добавить(ВидСравнения.НеСодержит, "Не содержит");
		
	ИначеЕсли Тип = Тип("Число") Тогда
		сзВидыСравнений.Добавить(ВидСравнения.ИнтервалВключаяГраницы, "Интервал");
		сзВидыСравнений.Добавить(ВидСравнения.БольшеИлиРавно, "Больше или равно");
		сзВидыСравнений.Добавить(ВидСравнения.МеньшеИлиРавно, "Меньше или равно");
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		сзВидыСравнений.Добавить(ВидСравнения.ИнтервалВключаяГраницы, "Интервал");
		сзВидыСравнений.Добавить(ВидСравнения.БольшеИлиРавно, "Больше или равно");
		сзВидыСравнений.Добавить(ВидСравнения.МеньшеИлиРавно, "Меньше или равно");
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		
	ИначеЕсли Тип = Тип("Булево") Тогда
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		
	Иначе
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		
		сзВидыСравнений.Добавить(ВидСравнения.ВСписке, "В списке");
		сзВидыСравнений.Добавить(ВидСравнения.НеВСписке, "Не в списке");
		
		мдТип = Метаданные.НайтиПоТипу(Тип);
		Если Метаданные.Справочники.Содержит(мдТип) Тогда
			Если мдТип.Иерархический Тогда
				сзВидыСравнений.Добавить(ВидСравнения.ВИерархии, "В иерархии");
				сзВидыСравнений.Добавить(ВидСравнения.НеВИерархии, "Не в иерархии");
				
				сзВидыСравнений.Добавить(ВидСравнения.ВСпискеПоИерархии, "В списке по иерархии");
				сзВидыСравнений.Добавить(ВидСравнения.НеВСпискеПоИерархии, "Не в списке по иерархии");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат сзВидыСравнений;
КонецФункции

// Формирует представление значения отбора, если отбор задан списком.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>
//
Процедура СформироватьПредставлениеСписка(Отбор) Экспорт
	Отбор.ЭлементПолеВвода.Значение = новаОбщиеПроцедуры.ПолучитьПредставлениеСписка(Отбор.ЭлементПолеВвода.СписокВыбора);
КонецПроцедуры

// Настраивает элементы управления отбора по типу отбора.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>
//
Процедура НастроитьВидОтбора(Отбор)
	текВидСравнения = Отбор.ЭлементВидСравнения.Значение.Значение;
	Если текВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Отбор.ЭлементПолеВвода.Видимость = Ложь;
		Отбор.ЭлементПолеВводаНачало.Видимость = Истина;
		Отбор.ЭлементПолеВводаКонец.Видимость = Истина;
	Иначе
		Отбор.ЭлементПолеВвода.Видимость = Истина;
		Отбор.ЭлементПолеВводаНачало.Видимость = Ложь;
		Отбор.ЭлементПолеВводаКонец.Видимость = Ложь;
		
		Если текВидСравнения = ВидСравнения.ВСписке
		 Или текВидСравнения = ВидСравнения.ВСпискеПоИерархии
		 Или текВидСравнения = ВидСравнения.НеВСписке
		 Или текВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			 
		    Если Отбор.ЭлементПолеВвода.РедактированиеТекста Тогда
				Если ЗначениеЗаполнено(Отбор.ЭлементПолеВвода.Значение) Тогда
					сзЗначения = Новый СписокЗначений;
					сзЗначения.Добавить(Отбор.ЭлементПолеВвода.Значение);
					Отбор.ЭлементПолеВвода.СписокВыбора = сзЗначения;
				КонецЕсли;
			КонецЕсли;
		 
		 	Отбор.ЭлементПолеВвода.ТипЗначения = Новый ОписаниеТипов("Строка");
			СформироватьПредставлениеСписка(Отбор);
		 	Отбор.ЭлементПолеВвода.РедактированиеТекста = Ложь;
			Отбор.ЭлементПолеВвода.КнопкаВыбора = Истина;
			
		Иначе 
			фБылСписок = Не Отбор.ЭлементПолеВвода.РедактированиеТекста;
			
			ЗначениеОтбора = Отбор.ЭлементПолеВвода.Значение;
			
			Отбор.ЭлементПолеВвода.ТипЗначения = Отбор.ТипЗначения;
			
			Если фБылСписок Тогда
				Если Отбор.ЭлементПолеВвода.СписокВыбора.Количество() > 0 Тогда
					Отбор.ЭлементПолеВвода.Значение = Отбор.ЭлементПолеВвода.СписокВыбора[0].Значение;
				КонецЕсли;
			Иначе
				Отбор.ЭлементПолеВвода.Значение = Отбор.ЭлементПолеВвода.ТипЗначения.ПривестиЗначение(ЗначениеОтбора);
			КонецЕсли;
			
			Отбор.ЭлементПолеВвода.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Настраивает элементы управления отбора по виду сравнения.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>
//
Процедура УстановитьВидЗначенияВОтбор(Отбор) Экспорт
	Отбор.ЭлементВидСравнения.Значение = Отбор.ЭлементВидСравнения.СписокВыбора[0].Значение;
	Для Каждого ЭлВидСравнения Из Отбор.ЭлементВидСравнения.СписокВыбора Цикл
		Если ЭлВидСравнения.Значение.Значение = Отбор.ВидСравнения Тогда
			Отбор.ЭлементВидСравнения.Значение = ЭлВидСравнения.Значение;
			Прервать;
		КонецЕсли; 	
	КонецЦикла;
	НастроитьВидОтбора(Отбор);
КонецПроцедуры

//  Обработчик события ПриИзменении вида сравнения отбора.
//
// Параметры:
//  Отборы  <ТаблицаЗначений[ТаблицаОтборов]>
//  Элемент <ПолеВвода>
//
Процедура ПриИзмененииВидаСравненияОтбора(Отборы, Элемент) Экспорт
	НастроитьВидОтбора(Отборы.Найти(Элемент, "ЭлементВидСравнения"));
КонецПроцедуры

//  Обработчик события НачалоВыбора значения отбора.
//
// Параметры:
//  Форма                <Форма>
//  Отборы               <ТаблицаЗначений[ТаблицаОтборов]>
//  Элемент              <ПолеВвода>
//  СтандартнаяОбработка <Булево>
//
Процедура НачалоВыбораЗначенияОтбора(Форма, Отборы, Элемент, СтандартнаяОбработка) Экспорт
	Если Элемент.РедактированиеТекста Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Отборы.Найти(Элемент, "ЭлементПолеВвода");
	
	ФормаРедактированияСписка = ПолучитьОбщуюФорму("новаФормаРедактированияСписка", Форма, Элемент);
	ФормаРедактированияСписка.Заголовок = Отбор.Представление + " - редактирование списка отбора";
	ФормаРедактированияСписка.Отбор = Отбор;
	
	Форма.Панель.Доступность = Ложь;
	ФормаРедактированияСписка.Открыть();
КонецПроцедуры

// Помещает на форму элементы управления отборами.
//
// Параметры:
//  Отборы <ТаблицаЗначений[ТаблицаОтборов]>
//  Форма  <Форма>
//  Панель <Панель>
//
Процедура СформироватьИнтерфейсОтборов(Отборы, Форма, Панель) Экспорт
	Если Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать Тогда
		Верх = 0;
		ЛевыйОтступ = 0;
	Иначе
		Верх = 7;
		ЛевыйОтступ = 7;
	КонецЕсли;
	
	МаксимальныйРазмерПредставления = 0;
	Для Каждого Отбор Из Отборы Цикл
		МаксимальныйРазмерПредставления = Макс(МаксимальныйРазмерПредставления, новаОбщиеПроцедуры.ШиринаТекста(Отбор.Представление));
	КонецЦикла;
	МаксимальныйРазмерПредставления = МаксимальныйРазмерПредставления + 18;
	
	Для Каждого Отбор Из Отборы Цикл
		Отбор.МакросПоместитьЗначениеНаФорму = "";
		Отбор.МакросПрочитатьЗначениеСФормы = "";
		
		Отбор.ЭлементФлажокИспользования = Форма.ЭлементыФормы.Добавить(Тип("Флажок"), НовоеИмяЭлемента(), Истина, Панель);
		Отбор.ЭлементФлажокИспользования.Лево = ЛевыйОтступ;
		Отбор.ЭлементФлажокИспользования.Верх = Верх;
		Отбор.ЭлементФлажокИспользования.Высота = 19;
		Отбор.ЭлементФлажокИспользования.Ширина = 10 + МаксимальныйРазмерПредставления;
		Отбор.ЭлементФлажокИспользования.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.ЭлементФлажокИспользования.Заголовок = Отбор.Представление;
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|Форма.ЭлементыФормы." + Отбор.ЭлементФлажокИспользования.Имя + ".Значение = Отбор.Использование;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Отбор.Использование = Форма.ЭлементыФормы." + Отбор.ЭлементФлажокИспользования.Имя + ".Значение;";
		
		
		Отбор.ЭлементВидСравнения = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), НовоеИмяЭлемента(), Истина, Панель);
		Отбор.ЭлементВидСравнения.Лево = Отбор.ЭлементФлажокИспользования.Лево + Отбор.ЭлементФлажокИспользования.Ширина + 7;
		Отбор.ЭлементВидСравнения.Верх = Верх;
		Отбор.ЭлементВидСравнения.Высота = 19;
		Отбор.ЭлементВидСравнения.Ширина = 120;
		Отбор.ЭлементВидСравнения.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.ЭлементВидСравнения.РежимВыбораИзСписка = Истина;
		
		Если Отбор.ДоступныеВидыСравнений = Неопределено Тогда
			сзВидыСравнений = ПолучитьСписокВидовСравненийПоТипу(Отбор.ТипЗначения.Типы()[0]);
		Иначе
			сзВидыСравнений = Отбор.ДоступныеВидыСравнений.Скопировать();
		КонецЕсли;
		
		Для Каждого ЭлВидСравнения Из сзВидыСравнений Цикл
			Если ПустаяСтрока(ЭлВидСравнения.Представление) Тогда
				ЭлВидСравнения.Представление = СокрЛП(ЭлВидСравнения.Значение);
			КонецЕсли;
			ЭлВидСравнения.Значение = Новый Структура("Значение", ЭлВидСравнения.Значение);
		КонецЦикла;
		Отбор.ЭлементВидСравнения.СписокВыбора = сзВидыСравнений;
		
		Отбор.ЭлементВидСравнения.ТипЗначения = Новый ОписаниеТипов("Структура");
		Отбор.ЭлементВидСравнения.РедактированиеТекста = Ложь;
		
		Отбор.ЭлементВидСравнения.УстановитьДействие("ПриИзменении", Новый Действие("ПриИзмененииВидаСравненияОтбора"));
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|УстановитьВидЗначенияВОтбор(Отбор);";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Отбор.ВидСравнения = Форма.ЭлементыФормы." + Отбор.ЭлементВидСравнения.Имя + ".Значение.Значение;";
		
		
		Отбор.ЭлементПолеВвода = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), НовоеИмяЭлемента(), Истина, Панель);
		Отбор.ЭлементПолеВвода.Лево = Отбор.ЭлементВидСравнения.Лево + Отбор.ЭлементВидСравнения.Ширина + 7;
		Отбор.ЭлементПолеВвода.Верх = Верх;
		Отбор.ЭлементПолеВвода.Высота = 19;
		Отбор.ЭлементПолеВвода.Ширина = Панель.Ширина - Отбор.ЭлементПолеВвода.Лево - ЛевыйОтступ;
		Отбор.ЭлементПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		Отбор.ЭлементПолеВвода.УстановитьДействие("НачалоВыбора", Новый Действие("НачалоВыбораЗначенияОтбора"));
		Отбор.ЭлементПолеВвода.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|Если ТипЗнч(Отбор.Значение) = Тип(""СписокЗначений"") Тогда
		|   Отбор.ЭлементПолеВвода.СписокВыбора = Отбор.Значение;
		| 	Отбор.ЭлементПолеВвода.ТипЗначения = Новый ОписаниеТипов(""Строка"");
		|	СформироватьПредставлениеСписка(Отбор);
		| 	Отбор.ЭлементПолеВвода.РедактированиеТекста = Ложь;
		|	Отбор.ЭлементПолеВвода.КнопкаВыбора = Истина;
		|Иначе
		|	Отбор.ЭлементПолеВвода.Значение = Неопределено;
		|	Отбор.ЭлементПолеВвода.ТипЗначения = Отбор.ТипЗначения;
		|	Отбор.ЭлементПолеВвода.Значение = Отбор.Значение;
		| 	Отбор.ЭлементПолеВвода.РедактированиеТекста = Истина;
		|КонецЕсли;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Если Отбор.ЭлементПолеВвода.РедактированиеТекста Тогда
		|	Отбор.Значение = Отбор.ЭлементПолеВвода.Значение;
		|Иначе
		|	Отбор.Значение = Отбор.ЭлементПолеВвода.СписокВыбора;
		|КонецЕсли;";
		
		
		Отбор.ЭлементПолеВводаНачало = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), НовоеИмяЭлемента(), Ложь, Панель);
		Отбор.ЭлементПолеВводаНачало.Лево = Отбор.ЭлементПолеВвода.Лево;
		Отбор.ЭлементПолеВводаНачало.Верх = Верх;
		Отбор.ЭлементПолеВводаНачало.Высота = 19;
		Отбор.ЭлементПолеВводаНачало.Ширина = (Панель.Ширина - Отбор.ЭлементПолеВвода.Лево - 7 - ЛевыйОтступ) / 2;
		Отбор.ЭлементПолеВводаНачало.ТипЗначения = Отбор.ТипЗначения;
		Отбор.ЭлементПолеВводаНачало.УстановитьПривязку(ГраницаЭлементаУправления.Право, Отбор.ЭлементПолеВвода, ГраницаЭлементаУправления.Центр);
		Отбор.ЭлементПолеВводаНачало.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|Форма.ЭлементыФормы." + Отбор.ЭлементПолеВводаНачало.Имя + ".Значение = Отбор.ЗначениеНачало;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Отбор.ЗначениеНачало = Форма.ЭлементыФормы." + Отбор.ЭлементПолеВводаНачало.Имя + ".Значение;";
		
		
		Отбор.ЭлементПолеВводаКонец = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), НовоеИмяЭлемента(), Ложь, Панель);
		Отбор.ЭлементПолеВводаКонец.Лево = Отбор.ЭлементПолеВводаНачало.Лево + Отбор.ЭлементПолеВводаНачало.Ширина + 7;
		Отбор.ЭлементПолеВводаКонец.Верх = Верх;
		Отбор.ЭлементПолеВводаКонец.Высота = 19;
		Отбор.ЭлементПолеВводаКонец.Ширина = Панель.Ширина - Отбор.ЭлементПолеВводаКонец.Лево - ЛевыйОтступ;
		Отбор.ЭлементПолеВводаКонец.ТипЗначения = Отбор.ТипЗначения;
		Отбор.ЭлементПолеВводаКонец.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Отбор.ЭлементПолеВводаНачало, ГраницаЭлементаУправления.Право);
		Отбор.ЭлементПолеВводаКонец.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		Отбор.ЭлементПолеВводаКонец.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|Форма.ЭлементыФормы." + Отбор.ЭлементПолеВводаКонец.Имя + ".Значение = Отбор.ЗначениеКонец;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Отбор.ЗначениеКонец = Форма.ЭлементыФормы." + Отбор.ЭлементПолеВводаКонец.Имя + ".Значение;";
		
		
		Верх = Верх + 19 + 7;
	КонецЦикла;
КонецПроцедуры

// Устанавливает отборы из таблицы в элементы управления отборами, размещенные на форме.
//
// Параметры:
//  Отборы <ТаблицаЗначений[ТаблицаОтборов]>
//  Форма  <Форма>
//
Процедура ПоместитьЗначенияНаФорму(Отборы, Форма) Экспорт
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор.ЭлементФлажокИспользования = Неопределено Тогда Продолжить; КонецЕсли;
		Выполнить(Отбор.МакросПоместитьЗначениеНаФорму);
	КонецЦикла;
КонецПроцедуры

// Устанавливает отборы из элементов управления отборами на форме в таблицу отборов.
//
// Параметры:
//  Отборы <ТаблицаЗначений[ТаблицаОтборов]>
//  Форма  <Форма>
//
Процедура ПрочитатьЗначенияСФормы(Отборы, Форма) Экспорт
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор.ЭлементФлажокИспользования = Неопределено Тогда Продолжить; КонецЕсли;
		Выполнить(Отбор.МакросПрочитатьЗначениеСФормы);
	КонецЦикла;
КонецПроцедуры

// Возвращает настройки выбранного отчета для текущего пользователя.
//
// Параметры:
//  обОтчет <ОтчетОбъект>
//
// Возвращаемое значение:
//  <ТаблицаЗначений[НастройкиОтчетов]>
//
Функция ПолучитьНастройки(обОтчет) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.новаНастройкиОтчетов
	|ГДЕ
	|	(Пользователь = &Пользователь Или Пользователь = &ОбщийПользователь)
	| И Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО Пользователь ВОЗР, Настройка ВОЗР";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Объект", обОтчет.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("ОбщийПользователь", Справочники.Пользователи.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Сохраняет настройку отчета в ИБ для текущего пользователя.
//
// Параметры:
//  обОтчет                 <ОтчетОбъект>
//  СтараяНастройка         <Строка>: если при изменении настройки изменили ее название
//  СтарыйПользователь      <СправочникСсылка.новаПользователи>: если при изменении настройки изменили ее пользователя
//  НоваяНастройка          <Строка>
//  ДанныеНастройки         <ХранилищеЗначения>
//  ИспользоватьПриОткрытии <Булево>
//  ДляВсехПользователей    <Булево>
//
Процедура СохранитьНастройку(обОтчет, СтараяНастройка, СтарыйПользователь, НоваяНастройка, ДанныеНастройки, ИспользоватьПриОткрытии, ДляВсехПользователей) Экспорт
	НачатьТранзакцию();
	
	текПользователь = ?(ДляВсехПользователей, Справочники.Пользователи.ПустаяСсылка(), ПараметрыСеанса.ТекущийПользователь);
	
	НаборЗаписей = РегистрыСведений.новаНастройкиОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(обОтчет.Метаданные().ПолноеИмя());
	
	Если ЗначениеЗаполнено(СтараяНастройка) Тогда
		НаборЗаписей.Отбор.Пользователь.Установить(СтарыйПользователь);
		НаборЗаписей.Отбор.Настройка.Установить(СтараяНастройка);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Пользователь.Установить(текПользователь);
	НаборЗаписей.Отбор.Настройка.Установить(НоваяНастройка);
	Запись = НаборЗаписей.Добавить();
	Запись.Пользователь = текПользователь;
	Запись.Объект = обОтчет.Метаданные().ПолноеИмя();
	Запись.Настройка = НоваяНастройка;
	Запись.ДанныеНастройки = ДанныеНастройки;
	Запись.ИспользоватьПриОткрытии = ИспользоватьПриОткрытии;
	НаборЗаписей.Записать();
	
	Если ИспользоватьПриОткрытии Тогда
		НаборЗаписей.Отбор.Настройка.Использование = Ложь;
		НаборЗаписей.Прочитать();
		
		тзНастройки = НаборЗаписей.Выгрузить();
		
		НаборЗаписей.Очистить();
		Запись = НаборЗаписей.Добавить();
		
		ИспользуемыеПриОткрытии = тзНастройки.НайтиСтроки(Новый Структура("ИспользоватьПриОткрытии", Истина));
		Для Каждого Настройка Из ИспользуемыеПриОткрытии Цикл
			Если Настройка.Настройка = НоваяНастройка Тогда Продолжить; КонецЕсли;
			
			НаборЗаписей.Отбор.Настройка.Установить(Настройка.Настройка);
			ЗаполнитьЗначенияСвойств(Запись, Настройка);
			Запись.ИспользоватьПриОткрытии = Ложь;
			
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

// Удаляет настройку отчета из ИБ для текущего пользователя.
//
// Параметры:
//  обОтчет   <ОтчетОбъект>
//  Настройка <Строка>
//
Процедура УдалитьНастройку(обОтчет, Настройка) Экспорт
	НаборЗаписей = РегистрыСведений.новаНастройкиОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(обОтчет.Метаданные().ПолноеИмя());
	НаборЗаписей.Отбор.Настройка.Установить(Настройка);
	НаборЗаписей.Записать();
КонецПроцедуры

// Формирует уникальное имя параметра запроса.
//
// Возвращаемое значение:
//  <Строка>
//
Функция НовоеИмяПараметра()
	Возврат "П_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "_");
КонецФункции

// Формирует текст запроса, соответствующий коллекции отборов.
//
// Параметры:
//  Отборы        <Коллекция(<СтрокаТаблицыЗначений[ЭлементОтбора]>)>
//  соПутиОтборов <Соответствие(ИмяОтбора:<Строка>, ПутьКДанным:<Строка>)>
//  Префикс       <Строка>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>:
//
Функция ПолучитьЗапросОтборов(Отборы, соПутиОтборов, Префикс = "") Экспорт
	Текст = "";
	Параметры = Новый Структура;
	
	Для Каждого Отбор Из Отборы Цикл
		Путь = соПутиОтборов[Отбор.Отбор];
		Если Путь = Неопределено Тогда Продолжить; КонецЕсли;
		стЗапрос = ПолучитьЗапросОтбора(Отбор, Путь);
		Если стЗапрос = Неопределено Тогда Продолжить; КонецЕсли;
		
		Текст = Текст + ?(Текст = "", Префикс, " И ") + "(" + стЗапрос.Текст + ")";
		Для Каждого ЭлПараметр Из стЗапрос.Параметры Цикл
			Параметры.Вставить(ЭлПараметр.Ключ, ЭлПараметр.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Если Текст = "" Тогда Возврат Неопределено; КонецЕсли;
	Возврат Новый Структура("Текст, Параметры", Текст, Параметры);
КонецФункции

// Формирует текст запроса, соответствующий отбору.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>:
//  Путь  <Строка>: путь к данным.
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>:
//
Функция ПолучитьЗапросОтбора(Отбор, Путь) Экспорт
	Если Не Отбор.Использование Тогда Возврат Неопределено; КонецЕсли;
	
	ПутьОтбора = ?(Путь = Неопределено, Отбор.Отбор, Путь);
	
	Текст = "";
	Параметры = Новый Структура;
	ПараметрЗначения = НовоеИмяПараметра();
	
	Если Отбор.ВидСравнения = ВидСравнения.Больше Тогда
		Текст = ПутьОтбора + " > &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Текст = ПутьОтбора + " >= &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВИерархии Тогда
		Текст = ПутьОтбора + " В ИЕРАРХИИ (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке Тогда
		Текст = ПутьОтбора + " В (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		Текст = ПутьОтбора + " В ИЕРАРХИИ (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
		ПараметрЗначенияКонец = НовоеИмяПараметра();
		Текст = ПутьОтбора + " > &" + ПараметрЗначения + " И " + ПутьОтбора + " < &" + ПараметрЗначенияКонец;
		Параметры.Вставить(ПараметрЗначения, Отбор.ЗначениеНачало);
		Параметры.Вставить(ПараметрЗначенияКонец, Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		ПараметрЗначенияКонец = НовоеИмяПараметра();
		Текст = ПутьОтбора + " МЕЖДУ &" + ПараметрЗначения + " И &" + ПараметрЗначенияКонец;
		Параметры.Вставить(ПараметрЗначения, Отбор.ЗначениеНачало);
		Параметры.Вставить(ПараметрЗначенияКонец, Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		ПараметрЗначенияКонец = НовоеИмяПараметра();
		Текст = ПутьОтбора + " >= &" + ПараметрЗначения + " И " + ПутьОтбора + " < &" + ПараметрЗначенияКонец;
		Параметры.Вставить(ПараметрЗначения, Отбор.ЗначениеНачало);
		Параметры.Вставить(ПараметрЗначенияКонец, Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		ПараметрЗначенияКонец = НовоеИмяПараметра();
		Текст = ПутьОтбора + " > &" + ПараметрЗначения + " И " + ПутьОтбора + " <= &" + ПараметрЗначенияКонец;
		Параметры.Вставить(ПараметрЗначения, Отбор.ЗначениеНачало);
		Параметры.Вставить(ПараметрЗначенияКонец, Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Меньше Тогда
		Текст = ПутьОтбора + " < &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Текст = ПутьОтбора + " <= &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВИерархии Тогда
		Текст = "НЕ " + ПутьОтбора + " В ИЕРАРХИИ (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Текст = "НЕ " + ПутьОтбора + " В (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		Текст = "НЕ " + ПутьОтбора + " В ИЕРАРХИИ (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеРавно Тогда
		Текст = ПутьОтбора + " <> &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеСодержит Тогда
		Текст = ПутьОтбора + " НЕ ПОДОБНО &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, "%" + СокрЛП(Отбор.Значение) + "%");
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Равно Тогда
		Текст = ПутьОтбора + " = &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Содержит Тогда
		Текст = ПутьОтбора + " ПОДОБНО &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, "%" + СокрЛП(Отбор.Значение) + "%");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Текст, Параметры", Текст, Параметры);
КонецФункции

// Возвращает строковое представление элемента отбора.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьОписаниеОтбора(Отбор) Экспорт
	Текст = "";
	
	Если Отбор.ВидСравнения = ВидСравнения.Больше Тогда
		Текст = Отбор.Представление + " > " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Текст = Отбор.Представление + " >= " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВИерархии Тогда
		Текст = Отбор.Представление + " в иерархии " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке Тогда
		Список = "";
		Для Каждого ЭлЗначение Из Отбор.Значение Цикл
			Список = Список + ?(Список = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
		КонецЦикла;
		Текст = Отбор.Представление + " в списке (" + Список + ")";
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		Список = "";
		Для Каждого ЭлЗначение Из Отбор.Значение Цикл
			Список = Список + ?(Список = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
		КонецЦикла;
		Текст = Отбор.Представление + " в иерархии (" + Список + ")";
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
		Текст = Отбор.Представление + " > " + СокрЛП(Отбор.ЗначениеНачало) + " И < " + СокрЛП(Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Текст = Отбор.Представление + " между " + СокрЛП(Отбор.ЗначениеНачало) + " И " + СокрЛП(Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		Текст = Отбор.Представление + " >= " + СокрЛП(Отбор.ЗначениеНачало) + " И < " + СокрЛП(Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Текст = Отбор.Представление + " > " + СокрЛП(Отбор.ЗначениеНачало) + " И <= " + СокрЛП(Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Меньше Тогда
		Текст = Отбор.Представление + " < " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Текст = Отбор.Представление + " <= " + СокрЛП(Отбор.Значение);
		
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВИерархии Тогда
		Текст = Отбор.Представление + " не в иерархии " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Список = "";
		Для Каждого ЭлЗначение Из Отбор.Значение Цикл
			Список = Список + ?(Список = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
		КонецЦикла;
		Текст = Отбор.Представление + " не в списке (" + Список + ")";
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		Список = "";
		Для Каждого ЭлЗначение Из Отбор.Значение Цикл
			Список = Список + ?(Список = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
		КонецЦикла;
		Текст = Отбор.Представление + " не в иерархии (" + Список + ")";
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеРавно Тогда
		Текст = Отбор.Представление + " <> " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеСодержит Тогда
		Текст = Отбор.Представление + " не содержит " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Равно Тогда
		Текст = Отбор.Представление + " = " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Содержит Тогда
		Текст = Отбор.Представление + " содержит " + СокрЛП(Отбор.Значение);
		
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

// Возвращает текст запроса, соответствующий отбору на вхождение в период.
//
// Параметры:
//  ДатаНачала <Дата>
//  ДатаКонца  <Дата>
//  ПутьДаты   <Строка>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>:
//
Функция ПолучитьОтборПоПериоду(ДатаНачала, ДатаКонца, ПутьДаты) Экспорт
	Параметры = Новый Структура;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Параметры.Вставить("НачалоПериода", ДатаНачала);
		
		Если ЗначениеЗаполнено(ДатаКонца) Тогда
			Параметры.Вставить("КонецПериода", ДатаКонца);
			
			Текст = ПутьДаты + " МЕЖДУ &НачалоПериода И &КонецПериода";
		Иначе	
			Текст = ПутьДаты + " >= &НачалоПериода";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДатаКонца) Тогда
			Параметры.Вставить("КонецПериода", ДатаКонца);
			
			Текст = ПутьДаты + " <= &КонецПериода";
		Иначе	
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Текст, Параметры", Текст, Параметры);	
КонецФункции

// Объединяет тексты запросов, соответствующие отборам, по выбранному союзу.
//
// Параметры:
//  мсОтборы <Массив(<Структура(Текст:<Строка>, Параметры:<Структура>)>)>
//  Союз     <Строка>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>), Неопределено>
//
Функция ОбъединитьСписокОтборов(мсОтборы, Союз) Экспорт
	Текст = "";
	Параметры = Новый Структура;
	
	Для Каждого Отбор Из мсОтборы Цикл
		Если Отбор = Неопределено Тогда Продолжить; КонецЕсли;
		Если Отбор.Текст = "" Тогда Продолжить; КонецЕсли;
		
		Текст = Текст + ?(Текст = "", "", " " + Союз + " ") + Отбор.Текст;
		Для Каждого ЭлПараметр Из Отбор.Параметры Цикл
			Параметры.Вставить(ЭлПараметр.Ключ, ЭлПараметр.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ?(Текст = "", Неопределено, Новый Структура("Текст, Параметры", Текст, Параметры));
КонецФункции

// Соединяет 2 или 3 отбора по И.
//
// Параметры:
//  Отбор1 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//  Отбор2 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//  Отбор3 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>
//
Функция ОбъединитьОтборы(Отбор1, Отбор2, Отбор3 = Неопределено) Экспорт
	мсОтборы = Новый Массив;
	мсОтборы.Добавить(Отбор1);
	мсОтборы.Добавить(Отбор2);
	мсОтборы.Добавить(Отбор3);
	
	Возврат ОбъединитьСписокОтборов(мсОтборы, "И");
КонецФункции

// Соединяет 2 или 3 отбора по ИЛИ.
//
// Параметры:
//  Отбор1 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//  Отбор2 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//  Отбор3 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>
//
Функция ОбъединитьОтборыПоИли(Отбор1, Отбор2, Отбор3 = Неопределено) Экспорт
	мсОтборы = Новый Массив;
	мсОтборы.Добавить(Отбор1);
	мсОтборы.Добавить(Отбор2);
	мсОтборы.Добавить(Отбор3);
	
	стОтборы = ОбъединитьСписокОтборов(мсОтборы, "ИЛИ");
	Если стОтборы.Текст <> "" Тогда
		стОтборы.Текст = "(" + стОтборы.Текст + ")";
	КонецЕсли;
	
	Возврат стОтборы;
КонецФункции
	
// Открывает диалоговое окно редактирования периода.
//
// Параметры:
//  ДатаС  <Дата>
//  ДатаПо <Дата>
//
// Возвращаемое значение:
//  <Структура(ДатаНачала:<Дата>, ДатаОкончания:<Дата>), Неопределено>
//
Функция РедактироватьПериод(Знач ДатаС, Знач ДатаПо) Экспорт
	Если Не ЗначениеЗаполнено(ДатаС) Тогда
		ДатаС = '00010101';
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПо) Тогда
		ДатаПо = '00010101';
	КонецЕсли;
	
	ДатаС = НачалоДня(ДатаС);
	ДатаПо = ?(ДатаПо = '00010101', ДатаПо, КонецДня(ДатаПо));
	
	НП = Новый НастройкаПериода;
	НП.УстановитьПериод(ДатаС, ДатаПо);
	
	ГодС = НачалоГода(ДатаС);
	ГодПо = НачалоГода(ДатаПо);
	Если ГодС = ГодПо Тогда
		
		Если ДатаС = НачалоГода(ДатаС) И ДатаПо = КонецГода(ДатаПо) Тогда
			НП.ВариантПериода = ВариантПериода.Год;
			НП.ВариантНачала = ВариантГраницыИнтервала.Год;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Год;
			НП.ЗначениеПериода = ДатаС;
		КонецЕсли;
		
		Если НачалоКвартала(ДатаС) = ДатаС И НачалоКвартала(ДатаС) = НачалоКвартала(ДатаПо) И КонецКвартала(ДатаПо) = ДатаПо Тогда
			Если ДатаС = НачалоГода(ДатаС) Тогда
				НП.ВариантПериода = ВариантПериода.КварталСНачалаГода;
			Иначе
				НП.ВариантПериода = ВариантПериода.Квартал;
			КонецЕсли;
			НП.ЗначениеПериода = ДатаС;
			НП.ВариантНачала = ВариантГраницыИнтервала.Квартал;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Квартал;
		КонецЕсли;
		
		Если НачалоМесяца(ДатаС) = ДатаС И НачалоМесяца(ДатаС) = НачалоМесяца(ДатаПо) И КонецМесяца(ДатаПо) = ДатаПо Тогда
			Если ДатаС = НачалоГода(ДатаС) Тогда
				НП.ВариантПериода = ВариантПериода.МесяцСНачалаКвартала;
			Иначе
				НП.ВариантПериода = ВариантПериода.Месяц;
			КонецЕсли;
			НП.ЗначениеПериода = ДатаС;
			НП.ВариантНачала = ВариантГраницыИнтервала.Месяц;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Месяц;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НП.Редактировать() Тогда
		Возврат Новый Структура("ДатаНачала, ДатаОкончания", НП.ПолучитьДатуНачала(), НП.ПолучитьДатуОкончания());
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает строковое представление вида сравнения.
//
// Параметры:
//  врВидСравнения <ВидСравнения>:
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьПредставлениеВидаСравнения(врВидСравнения) Экспорт
	Если врВидСравнения = ВидСравнения.Равно Тогда
		Возврат "=";
		
	ИначеЕсли врВидСравнения = ВидСравнения.НеРавно Тогда
		Возврат "<>";
		
	ИначеЕсли врВидСравнения = ВидСравнения.Больше Тогда
		Возврат ">";
		
	ИначеЕсли врВидСравнения = ВидСравнения.Меньше Тогда
		Возврат "<";
		
	ИначеЕсли врВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ">=";
		
	ИначеЕсли врВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат "<=";
		
	Иначе
		Возврат Нрег(СокрЛП(врВидСравнения));
	КонецЕсли;
КонецФункции

// Возвращает строковое представление таблицы отборов.
//
// Параметры:
//  Отборы <ТаблицаЗначений[ТаблицаОтборов]>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьПредставлениеОтборов(Отборы) Экспорт
	Представление = "";
	
	Для Каждого Отбор Из Отборы Цикл
		Если Не Отбор.Использование Тогда Продолжить; КонецЕсли;
		
		Если Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
			ПредставлениеЗначения = "(" + СокрЛП(Отбор.ЗначениеНачало) + "," + СокрЛП(Отбор.ЗначениеКонец) + ")";
			
		Иначе
			Если Отбор.ВидСравнения = ВидСравнения.ВСписке
			 Или Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
			 Или Отбор.ВидСравнения = ВидСравнения.НеВСписке
			 Или Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			 
				ПредставлениеЗначения = новаОбщиеПроцедуры.ПолучитьПредставлениеСписка(Отбор.Значение);
			
			Иначе 
				ПредставлениеЗначения = СокрЛП(Отбор.Значение);
			КонецЕсли;
		КонецЕсли;
		
		Представление = Представление + ?(Представление = "", "", ", ") + Отбор.Представление + " " + ПолучитьПредставлениеВидаСравнения(Отбор.ВидСравнения) + " " + ПредставлениеЗначения;
	КонецЦикла;
	
	Возврат Представление;
КонецФункции