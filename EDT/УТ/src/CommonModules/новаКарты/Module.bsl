
// Получает цвет и его пользовательское представление из строки, содержащей цвет в виде десятичного числа.
//
// Параметры:
//  стрЦвет <Строка>
//
// Возвращаемое значение:
//  <Структура(Цвет:<Цвет>, Текст:<Строка>)>
//
Функция ЦветИзСтроки(стрЦвет) Экспорт
	Если ЗначениеЗаполнено(стрЦвет) Тогда
		чЦвет = Число(стрЦвет);
	Иначе
		чЦвет = 0;
	КонецЕсли;
	
	Красный = чЦвет - 256 * Цел(чЦвет / 256);
	чЦвет = Цел(чЦвет / 256);
	Зеленый = чЦвет - 256 * Цел(чЦвет / 256);
	чЦвет = Цел(чЦвет / 256);
	Синий = чЦвет;
	
	Возврат Новый Структура("Цвет, Текст", Новый Цвет(Красный, Зеленый, Синий), Формат(Красный, "ЧН=") + ", " + Формат(Зеленый, "ЧН=") + ", " + Формат(Синий, "ЧН="));
КонецФункции

// Возвращает самый яркий из двух цветов.
//
// Параметры:
//  Цвет1 <Цвет>
//  Цвет2 <Цвет>
//
// Возвращаемое значение:
//  <Цвет>
//
Функция ПолучитьМаксимальныйЦвет(Цвет1, Цвет2) Экспорт
	чЦвет1 = Цвет1.Красный + Цвет1.Зеленый + Цвет1.Синий;
	чЦвет2 = Цвет2.Красный + Цвет2.Зеленый + Цвет2.Синий;
	Если чЦвет1 > чЦвет2 Тогда
		Возврат Цвет1;
	Иначе
		Возврат Цвет2;
	КонецЕсли;
КонецФункции

// Формирует таблицу георайон - адрес, георайон - произвольная точка.
//
// Параметры:
//  Район                    <СправочникСсылка.новаГеоРайоны>: фильтр по георайону.
//  Широта                   <Число>: фильтр по произвольной точке.
//  Долгота                  <Число>: фильтр по произвольной точке.
//  фБезУстановленныхВручную <Булево>: не включает в таблицу георайоны, назначенные вручную.
//  СписокАдресов            <Массив>: фильтр по списку адресов
//
// Возвращаемое значение:
//  <ТаблицаЗначений(Адрес:<СправочникСсылка.новаАдреса>,
//                   Район:<СправочникСсылка.новаГеоРайоны>,
//                   Классификатор:<новаКлассификаторРайонов>)>
//
Функция РассчитатьГеоРайоныАдресов(Район = Неопределено, Широта = Неопределено, Долгота = Неопределено, фБезУстановленныхВручную = Ложь, СписокАдресов = Неопределено) Экспорт
	Запрос = Новый Запрос;
	
	Если Широта <> Неопределено Тогда
		ВыборкаАдресов = "ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.новаАдреса.ПустаяСсылка) КАК Ссылка,
		|	&Широта КАК Широта,
		|	&Долгота КАК Долгота";
		
		ОтборРайона = "";
		
		Запрос.УстановитьПараметр("Широта", Широта);
		Запрос.УстановитьПараметр("Долгота", Долгота);
	Иначе
		ВыборкаАдресов = "ВЫБРАТЬ
		|	Ссылка КАК Ссылка,
		|	Широта КАК Широта,
		|	Долгота КАК Долгота
		|ИЗ
		|	Справочник.новаАдреса
		|";
		
		Если ЗначениеЗаполнено(СписокАдресов) Тогда
			
			ВыборкаАдресов = ВыборкаАдресов + Символы.ПС +
			"ГДЕ
			|	Ссылка В (&СписокАдресов)";
			
			Запрос.УстановитьПараметр("СписокАдресов", СписокАдресов);
		КонецЕсли;
		
		Если Район <> Неопределено Тогда
			ОтборРайона = "(Ребра.Ссылка = &Район) И ";
			
			Запрос.УстановитьПараметр("Район", Район);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Адреса.Ссылка КАК Адрес,
	|   Ребра.Ссылка КАК Район,
	|   Ребра.Ссылка.Владелец КАК Классификатор
	|ИЗ
	|	(" + ВыборкаАдресов + ") КАК Адреса
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.новаГеоРайоны.Ребра КАК Ребра
	|ПО
	|	" + ОтборРайона + "
	|	((Адреса.Долгота МЕЖДУ Ребра.Долгота1 И Ребра.Долгота2) ИЛИ (Адреса.Долгота МЕЖДУ Ребра.Долгота2 И Ребра.Долгота1))
	|
	|СГРУППИРОВАТЬ ПО Адреса.Ссылка, Ребра.Ссылка.Владелец, Ребра.Ссылка
	|ИМЕЮЩИЕ
	|	(КОЛИЧЕСТВО(Ребра.Ссылка) > 0)
	| И (СУММА(ВЫБОР
	|		КОГДА (Ребра.Широта2 - Ребра.Широта1) * (Адреса.Долгота - Ребра.Долгота1) < (Адреса.Широта - Ребра.Широта1) * (Ребра.Долгота2 - Ребра.Долгота1) ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) <>
	|	СУММА(ВЫБОР
	|		КОГДА (Ребра.Широта2 - Ребра.Широта1) * (Адреса.Долгота - Ребра.Долгота1) > (Адреса.Широта - Ребра.Широта1) * (Ребра.Долгота2 - Ребра.Долгота1) ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ))";
	
	Если фБезУстановленныхВручную Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|   РассчитанныеРайоныАдресов.Классификатор КАК Классификатор,
		|	РассчитанныеРайоныАдресов.Адрес КАК Адрес,
		|   РассчитанныеРайоныАдресов.Район КАК Район
		|ИЗ
		|	(" + Запрос.Текст + ") КАК РассчитанныеРайоныАдресов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.новаРайоныАдресов КАК РайоныАдресов
		|ПО
		|	РайоныАдресов.УказанВручную
		| И РайоныАдресов.Классификатор = РассчитанныеРайоныАдресов.Классификатор
		| И РайоныАдресов.Адрес = РассчитанныеРайоныАдресов.Адрес
		|
		|ГДЕ
		|	РайоныАдресов.Адрес ЕСТЬ NULL";
	КонецЕсли;	
	
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

// Проверяет загружен ли адресный классификатор
//
// Возвращаемое значение:
//      Истина - классификатор загружен
//		Ложь - классификатор не загружен
//
Функция АдресныйКлассификаторЗагружен(новаКонтекст) Экспорт
	
	Если новаКонтекст.Свойство("КлассификаторЗагружен") Тогда
		Возврат новаКонтекст.КлассификаторЗагружен;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	новаАдреса.Ссылка
	               |ИЗ
	               |	Справочник.новаАдреса КАК новаАдреса";
				   
	КоличествоАдресов = Запрос.Выполнить().Выбрать();	
	Если КоличествоАдресов.Следующий() Тогда
		новаКонтекст.Вставить("КлассификаторЗагружен",Истина);
		Возврат Истина;
	Иначе
		новаКонтекст.Вставить("КлассификаторЗагружен",Ложь);
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

// Рассчитывает код квадрата, в котором лежит точка.
//
// Параметры:
//  Широта  <Число>
//  Долгота <Число>
//
// Возвращаемое значение:
//  <Число>
//
Функция ПолучитьХэшКоординат(Широта, Долгота) Экспорт
	Возврат 10000 * Цел(Широта * 100) + Цел(Долгота * 100);
КонецФункции

// Рассчитывает коды квадратов вокруг точки.
//
// Параметры:
//  Широта  <Число>
//  Долгота <Число>
//
// Возвращаемое значение:
//  <Массив(<Число>)>
//
Функция ПолучитьХэшиКоординат(Широта, Долгота) Экспорт
	мсХэши = Новый Массив;
	мсХэшиШироты = Новый Массив;
	
	ХэшШироты = Цел(Широта * 100);
	ХэшДолготы = Цел(Долгота * 100);
	
	мсХэши.Добавить(10000 * ХэшШироты + ХэшДолготы);
	мсХэшиШироты.Добавить(ХэшШироты);
	
	Дельта = Широта - ХэшШироты;
	Если Дельта < 0.003 Тогда
		мсХэшиШироты.Добавить(ХэшШироты - 1);
		мсХэши.Добавить(10000 * (ХэшШироты - 1) + ХэшДолготы);
		
	ИначеЕсли Дельта > 0.007 Тогда
		мсХэшиШироты.Добавить(ХэшШироты + 1);
		мсХэши.Добавить(10000 * (ХэшШироты + 1) + ХэшДолготы);
	КонецЕсли;
	
	Дельта = Долгота - ХэшДолготы;
	Если Дельта < 0.003 Тогда
		Для Каждого ХэшШироты Из мсХэшиШироты Цикл
			мсХэши.Добавить(10000 * (ХэшШироты) + ХэшДолготы - 1);
		КонецЦикла;
		
	ИначеЕсли Дельта > 0.007 Тогда
		Для Каждого ХэшШироты Из мсХэшиШироты Цикл
			мсХэши.Добавить(10000 * (ХэшШироты) + ХэшДолготы + 1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат мсХэши;
КонецФункции

// Возвращает текущий классификатор районов.
//
// Возвращаемое значение:
//  <СправочникСсылка.новаКлассификаторРайонов>
//
Функция ПолучитьТекущийКлассификаторРайонов() Экспорт
	
	Результат = Справочники.новаКлассификаторРайонов.ПустаяСсылка();
	
	#Если Клиент Тогда
	
	Если ЗначениеЗаполнено(новаКонтекст.ТекущийКлассификатор) Тогда
		Результат = новаКонтекст.ТекущийКлассификатор
	КонецЕсли;
		
	Если Результат.Пустая()
		 и ЗначениеЗаполнено(ПараметрыСеанса.новаТекущийПользователь.КлассификаторРайонов) Тогда
		Результат = ПараметрыСеанса.новаТекущийПользователь.КлассификаторРайонов;
	КонецЕсли;
	
	#КонецЕсли

	Если Результат.Пустая() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    Ссылка
		|  ИЗ
		|    Справочник.новаКлассификаторРайонов
		|  УПОРЯДОЧИТЬ ПО
		|    Код
		|");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтобразитьРайоны(новаКонтекст, ПолеКарты, Классификатор = Неопределено, ИсключитьРайон = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Классификатор) Тогда
		Классификатор = ПолучитьТекущийКлассификаторРайонов();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Условие = "";
	Если ЗначениеЗаполнено(ИсключитьРайон) Тогда
		Условие = Условие + " И Ссылка <> &ИсклРайон";
		Запрос.УстановитьПараметр("ИсклРайон", ИсключитьРайон);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка,
	|	Цвет	
	|ИЗ
	|	Справочник.новаГеоРайоны
	|ГДЕ
	|	Владелец = &Классификатор И НЕ ПометкаУдаления" + Условие;

	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	Районы = Запрос.Выполнить().Выбрать();
	Пока Районы.Следующий() Цикл
		ОтображениеРайона = КСЛ.Геоинформация_Геозоны_Карты_ОтображениеГеозоны();
		ОтображениеРайона.Геозона.Ид = СокрЛП(Районы.Ссылка.УникальныйИдентификатор());
		ОтображениеРайона.Цвет = "64, " + СокрЛП(Районы.Цвет.Получить());
		ОтображениеРайона.ПорядокРисования = -1000;
		
		ПолеКарты.ДобавитьОбъект(ОтображениеРайона);
	КонецЦикла;
КонецПроцедуры

//Возвращает список георамок по умолчанию
//
//  Возвращаемое значение:
//    <ТаблицаЗначений>
//      Имя - <Строка> идентификатор георамки
//      Представление - <Строка> текст выводимый пользователю
//      МинимальнаяШирота - <Число 20,17> минимальная георамки
//      МинимальнаяДолгота - <Число 20,17> минимальная долгота георамки
//      МаксимальнаяШирота - <Число 20,17> максимальная широта георамки
//      МаксимальнаяДолгота - <Число 20,17> максимальная долгота георамки
//
Функция ПолучитьСписокГеорамокПоУмолчанию() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("МинимальнаяШирота", Новый ОписаниеТипов("Число", новый КвалификаторыЧисла(20, 17)));
	Результат.Колонки.Добавить("МинимальнаяДолгота", Новый ОписаниеТипов("Число", новый КвалификаторыЧисла(20, 17)));
	Результат.Колонки.Добавить("МаксимальнаяШирота", Новый ОписаниеТипов("Число", новый КвалификаторыЧисла(20, 17)));
	Результат.Колонки.Добавить("МаксимальнаяДолгота", Новый ОписаниеТипов("Число", новый КвалификаторыЧисла(20, 17)));
	
	//СПб
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Имя = "СанктПетербург";
	НоваяСтрока.Представление = "Санкт-Петербург";
	НоваяСтрока.МинимальнаяШирота = 59.82816300610130000;
	НоваяСтрока.МинимальнаяДолгота = 30.17875671386710000;
	НоваяСтрока.МаксимальнаяШирота = 60.03699238998730000;
	НоваяСтрока.МаксимальнаяДолгота = 30.54748535156240000;
	
	//Москва
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Имя = "Москва";
	НоваяСтрока.Представление = "Москва";
	НоваяСтрока.МинимальнаяШирота = 55.29315806568660000;
	НоваяСтрока.МинимальнаяДолгота = 36.85363769531240000;
	НоваяСтрока.МаксимальнаяШирота = 56.15191766275910000;
	НоваяСтрока.МаксимальнаяДолгота = 38.46313476562490000;
	
	//Екатеринбург
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Имя = "Екатеринбург";
	НоваяСтрока.Представление = "Екатеринбург";
	НоваяСтрока.МинимальнаяШирота = 56.75874568181480000;
	НоваяСтрока.МинимальнаяДолгота = 60.46737670898430000;
	НоваяСтрока.МаксимальнаяШирота = 56.92174628614060000;
	НоваяСтрока.МаксимальнаяДолгота = 60.79147338867180000;
	
	//Красноярск
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Имя = "Красноярск";
	НоваяСтрока.Представление = "Красноярск";
	НоваяСтрока.МинимальнаяШирота = 55.96303833679560000;
	НоваяСтрока.МинимальнаяДолгота = 92.74108886718750000;
	НоваяСтрока.МаксимальнаяШирота = 56.07663421292850000;
	НоваяСтрока.МаксимальнаяДолгота = 93.03771972656240000;
	
	Возврат Результат;
	
КонецФункции

#Если Клиент Тогда

//Отрисовка районов на карте

//Стирает районы с карты
//
Процедура ОчиститьКлассификаторРайонов(ПолеКарты, Полигоны) Экспорт
	
	//КлассификаторРайонов = Неопределено;
	
	Если ПолеКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Полигон Из Полигоны Цикл
		ПолеКарты.УдалитьОбъект(Полигон);
	КонецЦикла;
	
	Полигоны.Очистить();
	
КонецПроцедуры

//Перерисовывает районы
//
//  Параметры:
//    ПолеКарты - Поле карты
//    Полигоны - <Массив>
//    Классификатор - <СправочникСсылка.новаКлассификаторыРайонов>
//
Процедура УстановитьКлассификаторРайонов(ПолеКарты, Полигоны, КлассификаторРайонов) Экспорт
	
	ОчиститьКлассификаторРайонов(ПолеКарты, Полигоны);
			
	Если ПолеКарты = Неопределено ИЛИ КлассификаторРайонов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Цвет
	|    ,Точки.
	|      (
	|        Широта
	|        ,Долгота
	|      ) КАК Вершины
	|  ИЗ
	|    Справочник.новаГеоРайоны
	|  ГДЕ
	|    Владелец = &КлассификаторРайонов
	|");
	
	Запрос.УстановитьПараметр("КлассификаторРайонов", КлассификаторРайонов);
	
	РезультатЗапросма = Запрос.Выполнить();
	Если не РезультатЗапросма.Пустой() Тогда
		
		#Если Клиент Тогда
			КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		#Иначе
			КСЛ = новаСерверКСЛ.Подключиться();
		#КонецЕсли
		
		ВыборкаРайонов = РезультатЗапросма.Выбрать();
		Пока ВыборкаРайонов.Следующий() Цикл
			
			ВыборкаВершин = ВыборкаРайонов.Вершины.Выбрать();
			
			Полигон = КСЛ.ГрафическийИнтерфейс_Карты_Полигон();
			Полигон.Цвет = "96," + ВыборкаРайонов.Цвет.Получить();
			
			Пока ВыборкаВершин.Следующий() Цикл
				
				Геоточка = КСЛ.МодельДанных_ГеоТочка();
				Геоточка.Широта = ВыборкаВершин.Широта;
				Геоточка.Долгота = ВыборкаВершин.Долгота;
				
				Полигон.Вершины.Добавить(Геоточка);
			КонецЦикла;
			
			ПолеКарты.ДобавитьОбъект(Полигон);
			
			Полигоны.Добавить(Полигон);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли