

#Область СервисныеФункцииSync
//Возвращает Логин Пароль и SettingID
Функция СтруктураДоступаSync(ИнтернетМагазин) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Логин 			= "12345678";
		Пароль 			= "12345";
		SettingID 		= 169;
		//Асеев 28.11.2022 (Задача № 4935)>>>
		accessKey		= "62a21e35-f403-49a5-9825-163390a590fb";//"8b93a69a-d268-42f4-b4c2-e82eb9567c55";
		//Асеев 28.11.2022 (Задача № 4935)<<<
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыКонтрагентовСрезПоследних.setiingId_Strizh КАК setiingId_Strizh,
		|	ПараметрыКонтрагентовСрезПоследних.login_Strizh КАК login_Strizh,
		|	ПараметрыКонтрагентовСрезПоследних.password_Strizh КАК password_Strizh,
		|	ПараметрыКонтрагентовСрезПоследних.accessKey КАК accessKey
		|ИЗ
		|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних";
		
		Запрос.УстановитьПараметр("Контрагент", ИнтернетМагазин);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Логин = Выборка.login_Strizh;
			Пароль = Выборка.password_Strizh;
			SettingID = Выборка.setiingId_Strizh;
			accessKey = Выборка.accessKey;
		Иначе
			Логин = "";
			Пароль = "";
			SettingID = 0;
			accessKey = "";
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДоступа = Новый Структура; 
	СтруктураДоступа.Вставить("Логин",Логин);
	СтруктураДоступа.Вставить("Пароль",Пароль);
	СтруктураДоступа.Вставить("SettingID",SettingID);
	СтруктураДоступа.Вставить("accessKey",accessKey);
	
	Возврат СтруктураДоступа;
	
КонецФункции	

Функция СоздатьПроксиSync() Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.Strizh_test.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap",,15);
	Иначе
		Прокси =  WSСсылки.Strizh.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap",,15);
		//Прокси_https =  WSСсылки.Strizh_https.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap",,15,Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows()));
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// 1. создание заказа в системе службы доставки
//
// Возвращает OrderId либо Неопределено
//
// Якурнов 07.11.2018 16:50:00 
Функция RegisterOrderExtended(СтруктураЗаказа,СтруктураАвторизации, ДокументКВыгрузке = Неопределено, Прокси = Неопределено) Экспорт
	
	//1Подключаемся
	Если Прокси = Неопределено Тогда
		Прокси = СоздатьПроксиSync();
	КонецЕсли;
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	//2Определяем типы входа
	Тип_Order = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Order");
	Order = Фабрика.Создать(Тип_Order);
	
	Тип_Auth = Фабрика.Пакеты.Получить("http://tempuri.org/").Получить("Authentication");
	Auth = Фабрика.Создать(Тип_Auth);
	
	//Дополнительные типы
	Тип_Address = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Address");
	Address = Фабрика.Создать(Тип_Address);
	
	Тип_ArrayOfItem = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("ArrayOfItem");
	ArrayOfItem = Фабрика.Создать(Тип_ArrayOfItem);
	
	Тип_Item = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Item");
	
	Тип_User = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("User");
	User = Фабрика.Создать(Тип_User);
	
	Тип_ArrayOfPieceBarcode = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("ArrayOfPieceBarcode");
	ArrayOfPieceBarcode = Фабрика.Создать(Тип_ArrayOfPieceBarcode);
	
	Тип_PieceBarcode = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("PieceBarcode");		
	
	//3Присваиваем значения
	Для Каждого Элем Из СтруктураЗаказа Цикл
		Если ТипЗнч(Элем.Значение) = Тип("Массив") Тогда
			Если Элем.Ключ = "Items" Тогда
				Для Каждого ЭлемМас из Элем.Значение Цикл
					Item = Фабрика.Создать(Тип_Item);
					Для Каждого Эл Из ЭлемМас Цикл
						Item[Эл.Ключ] = Эл.Значение;
					КонецЦикла;
					ArrayOfItem.Item.Добавить(Item);
				КонецЦикла;
				Order.Items = ArrayOfItem;
			КонецЕсли;
			Если Элем.Ключ = "barcodes" Тогда
				Для Каждого ЭлемМас из Элем.Значение Цикл
					PieceBarcode = Фабрика.Создать(Тип_PieceBarcode);
					Для Каждого Эл Из ЭлемМас Цикл
						PieceBarcode[Эл.Ключ] = Эл.Значение;
					КонецЦикла;
					ArrayOfPieceBarcode.PieceBarcode.Добавить(PieceBarcode);
				КонецЦикла;
				Order.barcodes = ArrayOfPieceBarcode;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элем.Значение) = Тип("Структура") Тогда
			Если Элем.Ключ = "Address" Тогда
				Address.FullAddress = Элем.Значение.FullAddress;
				Order.Address = Address;
			КонецЕсли;
			Если Элем.Ключ = "User" Тогда
				User.FIO = Элем.Значение.FIO;
				User.Phone = Элем.Значение.Phone;
				User.Email = Элем.Значение.Email;
				Order.User = User;
			КонецЕсли;
		Иначе
			Если Элем.Ключ <> "nameOZON" И Элем.Ключ <> "barcodeOZON" Тогда
				Order[Элем.Ключ] = Элем.Значение;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Auth.Login 		= СтруктураАвторизации.Логин;
	Auth.Password 	= СтруктураАвторизации.Пароль;
	
	//4Выгружаем результат
	Результат = Прокси.RegisterOrderExtended(Order,Auth);
	Если Результат.Errors.Error.Количество() > 0 Тогда
		Возврат Результат.Errors.Error[0];
	КонецЕсли;	
	
	//Вывод результата в Строку XML
	ЗаписьРезультата = Новый ЗаписьXML;
	ЗаписьРезультата.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(ЗаписьРезультата, Результат);
	ДанныеXMLОтвета = ЗаписьРезультата.Закрыть();		
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, Order);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.OrderId);
	
	Если Результат.OrderId > 0 И СтруктураЗаказа.Свойство("barcodeOZON") Тогда
		ПередачаВАдминкуДопПараметровОЗОН(СтруктураЗаказа, Результат.OrderId);
	КонецеСли;	
	
	Описание = "";
	Для Каждого Элем Из Результат.Errors.Error Цикл
		Описание = Описание + Строка(Элем);
	КонецЦикла;
	РезультатСтруктура.Вставить("Описание", Описание);
	
	// логирование
	// ++Задача № 3553
	//Если ДокументКВыгрузке <> Неопределено Тогда
	//	ЗаписатьЛог_ЛогОтправкиЗапросовAPISync(РезультатСтруктура, Перечисления.МетодыAPISync.RegisterOrderExtended, ДокументКВыгрузке, Неопределено, ДанныеXML, ДанныеXMLОтвета);
	//Иначе
	//	ЗаписатьЛог_ЛогОтправкиЗапросовAPISync(РезультатСтруктура, Перечисления.МетодыAPISync.RegisterOrderExtended, , Неопределено, ДанныеXML, ДанныеXMLОтвета);
	//КонецеСли;	
	ЗаписатьЛог_ЛогОтправкиЗапросовAPISync(РезультатСтруктура, Перечисления.МетодыAPISync.RegisterOrderExtended, ДанныеXML, ДанныеXMLОтвета);
	// --Задача № 3553
	
	Если Результат.OrderId <> Null Тогда
		Возврат Результат.OrderId;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Асеев 12.12.2022 (Задача № 4947)>>>
Функция RegisterOrderExtended_ВсеОшибки(СтруктураЗаказа,СтруктураАвторизации, ДокументКВыгрузке = Неопределено, Прокси = Неопределено) Экспорт
	
	//1Подключаемся
	Если Прокси = Неопределено Тогда
		Прокси = СоздатьПроксиSync();
	КонецЕсли;
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	//2Определяем типы входа
	Тип_Order = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Order");
	Order = Фабрика.Создать(Тип_Order);
	
	Тип_Auth = Фабрика.Пакеты.Получить("http://tempuri.org/").Получить("Authentication");
	Auth = Фабрика.Создать(Тип_Auth);
	
	//Дополнительные типы
	Тип_Address = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Address");
	Address = Фабрика.Создать(Тип_Address);
	
	Тип_ArrayOfItem = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("ArrayOfItem");
	ArrayOfItem = Фабрика.Создать(Тип_ArrayOfItem);
	
	Тип_Item = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Item");
	
	Тип_User = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("User");
	User = Фабрика.Создать(Тип_User);
	
	Тип_ArrayOfPieceBarcode = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("ArrayOfPieceBarcode");
	ArrayOfPieceBarcode = Фабрика.Создать(Тип_ArrayOfPieceBarcode);
	
	Тип_PieceBarcode = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("PieceBarcode");		
	
	//3Присваиваем значения
	Для Каждого Элем Из СтруктураЗаказа Цикл
		Если ТипЗнч(Элем.Значение) = Тип("Массив") Тогда
			Если Элем.Ключ = "Items" Тогда
				Для Каждого ЭлемМас из Элем.Значение Цикл
					Item = Фабрика.Создать(Тип_Item);
					Для Каждого Эл Из ЭлемМас Цикл
						Item[Эл.Ключ] = Эл.Значение;
					КонецЦикла;
					ArrayOfItem.Item.Добавить(Item);
				КонецЦикла;
				Order.Items = ArrayOfItem;
			КонецЕсли;
			Если Элем.Ключ = "barcodes" Тогда
				Для Каждого ЭлемМас из Элем.Значение Цикл
					PieceBarcode = Фабрика.Создать(Тип_PieceBarcode);
					Для Каждого Эл Из ЭлемМас Цикл
						PieceBarcode[Эл.Ключ] = Эл.Значение;
					КонецЦикла;
					ArrayOfPieceBarcode.PieceBarcode.Добавить(PieceBarcode);
				КонецЦикла;
				Order.barcodes = ArrayOfPieceBarcode;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элем.Значение) = Тип("Структура") Тогда
			Если Элем.Ключ = "Address" Тогда
				Address.FullAddress = Элем.Значение.FullAddress;
				Order.Address = Address;
			КонецЕсли;
			Если Элем.Ключ = "User" Тогда
				User.FIO = Элем.Значение.FIO;
				User.Phone = Элем.Значение.Phone;
				User.Email = Элем.Значение.Email;
				Order.User = User;
			КонецЕсли;
		Иначе
			Если Элем.Ключ <> "nameOZON" И Элем.Ключ <> "barcodeOZON" Тогда
				Order[Элем.Ключ] = Элем.Значение;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Auth.Login 		= СтруктураАвторизации.Логин;
	Auth.Password 	= СтруктураАвторизации.Пароль;
	
	//Запись = Новый ЗаписьXML;
	//Запись.УстановитьСтроку(); 
	//Фабрика.ЗаписатьXML(Запись, Order);
	//ДанныеXML = Запись.Закрыть();
	
	//4Выгружаем результат
	Результат = Прокси.RegisterOrderExtended(Order,Auth);
	Если Результат.Errors.Error.Количество() > 0 Тогда
		МассивОшибок = Новый Массив;
		Для Каждого Error Из Результат.Errors.Error Цикл
			МассивОшибок.Добавить(Error);
		КонецЦикла;
		Возврат МассивОшибок;
	КонецЕсли;
	
	Возврат Результат.OrderId;
	
КонецФункции
//Асеев 12.12.2022 (Задача № 4947)<<<

// 2. обновление заказа в системе службы доставки
//
// Возвращает OrderId либо Неопределено
//
// Якурнов 07.11.2018 16:50:00 
Функция UpdateOrderExtended(НомерЗаказа,СтруктураЗаказа,СтруктураАвторизации) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.Strizh_test.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap");
		Логин 			= "12345678";
		Пароль 			= "12345";
		SettingID 		= "169";		
	Иначе
		Прокси =  WSСсылки.Strizh.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap");
		Логин = СтруктураАвторизации.Логин;
		Пароль = СтруктураАвторизации.Пароль;
	КонецЕсли;
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_Order = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Order");
	Order = Фабрика.Создать(Тип_Order);
	
	Тип_Auth = Фабрика.Пакеты.Получить("http://tempuri.org/").Получить("Authentication");
	Auth = Фабрика.Создать(Тип_Auth);
	
	//Дополнительные типы
	Тип_Address = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Address");
	Address = Фабрика.Создать(Тип_Address);
	
	Тип_ArrayOfItem = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("ArrayOfItem");
	ArrayOfItem = Фабрика.Создать(Тип_ArrayOfItem);
	
	Тип_Item = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Item");
	
	Тип_User = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("User");
	User = Фабрика.Создать(Тип_User);
	
	Тип_ArrayOfPieceBarcode = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("ArrayOfPieceBarcode");
	ArrayOfPieceBarcode = Фабрика.Создать(Тип_ArrayOfPieceBarcode);
	
	Тип_PieceBarcode = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("PieceBarcode");	
	
	//3Присваиваем значения
	Для Каждого Элем Из СтруктураЗаказа Цикл
		Если ТипЗнч(Элем.Значение) = Тип("Массив") Тогда
			Если Элем.Ключ = "Items" Тогда
				Для Каждого ЭлемМас из Элем.Значение Цикл
					Item = Фабрика.Создать(Тип_Item);
					Для Каждого Эл Из ЭлемМас Цикл
						Item[Эл.Ключ] = Эл.Значение;
					КонецЦикла;
					ArrayOfItem.Item.Добавить(Item);
				КонецЦикла;
				Order.Items = ArrayOfItem;
			КонецЕсли;
			Если Элем.Ключ = "barcodes" Тогда
				Для Каждого ЭлемМас из Элем.Значение Цикл
					PieceBarcode = Фабрика.Создать(Тип_PieceBarcode);
					Для Каждого Эл Из ЭлемМас Цикл
						PieceBarcode[Эл.Ключ] = Эл.Значение;
					КонецЦикла;
					ArrayOfPieceBarcode.PieceBarcode.Добавить(PieceBarcode);
				КонецЦикла;
				Order.barcodes = ArrayOfPieceBarcode;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элем.Значение) = Тип("Структура") Тогда
			Если Элем.Ключ = "Address" Тогда
				Address.FullAddress = Элем.Значение.FullAddress;
				Order.Address = Address;
			КонецЕсли;
			Если Элем.Ключ = "User" Тогда
				User.FIO = Элем.Значение.FIO;
				User.Phone = Элем.Значение.Phone;
				User.Email = Элем.Значение.Email;
				Order.User = User;
			КонецЕсли;
		Иначе
			Если Элем.Ключ <> "nameOZON" И Элем.Ключ <> "barcodeOZON" Тогда
				Order[Элем.Ключ] = Элем.Значение;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Order.SettingID = 169;
	КонецЕсли;
	
	Auth.Login 		= Логин;
	Auth.Password 	= Пароль;
	OrderID = Формат(Число(НомерЗаказа),"ЧГ="); 
	
	Результат = Прокси.UpdateOrderExtended(OrderID,Order,Auth);
	
	//Вывод результата в Строку XML
	ЗаписьРезультата = Новый ЗаписьXML;
	ЗаписьРезультата.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(ЗаписьРезультата, Результат);
	ДанныеXMLОтвета = ЗаписьРезультата.Закрыть();	
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, Order);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", OrderId);
	Описание = "Ошибки: ";
	ЭтоОшибка = Ложь; // Задача № 3553
	Для Каждого Элем Из Результат.Errors.Error Цикл
		ЭтоОшибка = Истина; // Задача № 3553
		Описание = Описание + Строка(Элем);
	КонецЦикла;
	
	
	Описание = Описание + Символы.ПС + "Предупреждения: ";
	
	Для Каждого Элем Из Результат.Warnings.Warning Цикл
		Описание = Описание + Строка(Элем);
	КонецЦикла;
	
	
	РезультатСтруктура.Вставить("Описание", Описание);
	
	//ЭтоОшибка = Не Описание = "Ошибки: ";
	
	// логирование
	// ++Задача № 3553
	//ЗаписатьЛог_ЛогОтправкиЗапросовAPISync(РезультатСтруктура, Перечисления.МетодыAPISync.UpdateOrderExtended,Документы.РеализацияТоваровУслуг.НайтиПоНомеру(НомерЗаказа), Неопределено, ДанныеXML);
	ЗаписатьЛог_ЛогОтправкиЗапросовAPISync(РезультатСтруктура, Перечисления.МетодыAPISync.UpdateOrderExtended, ДанныеXML,ДанныеXMLОтвета,ЭтоОшибка);	
	// --Задача № 3553
	
	Если Описание <> "" Тогда
		Возврат Описание;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Асеев 05.10.2021 (Задача № 4687)>>>
Функция RefuseOrder(НомерЗаказа, СтруктураАвторизации) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.Strizh_test.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap");
	Иначе
		Прокси =  WSСсылки.Strizh.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap");
	КонецЕсли;
	
	Фабрика = Прокси.ФабрикаXDTO;
	
	Тип_Auth = Фабрика.Пакеты.Получить("http://tempuri.org/").Получить("Authentication");
	Auth = Фабрика.Создать(Тип_Auth);	
	
	Auth.Login 		= СтруктураАвторизации.Логин;
	Auth.Password 	= СтруктураАвторизации.Пароль;
	
	orderId = НомерЗаказа;
	
	Возврат Прокси.RefuseOrder(orderId, Auth);
	
КонецФункции	
//Асеев 05.10.2021 (Задача № 4687)<<<

//Асеев 28.11.2022 (Задача № 4935)>>>
Функция RegisterWarehouse(СтруктураСклада,СтруктураАвторизации) Экспорт
	
	//1Подключаемся
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.Strizh_test.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap");
	Иначе
		Прокси =  WSСсылки.Strizh.СоздатьWSПрокси("http://tempuri.org/","Sinc","SincSoap");
	КонецЕсли;
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	//2Определяем типы входа
	Тип_Warehouse = Фабрика.Пакеты.Получить("strizh-logistic.ru/services/v2/sinc/RegionOrder").Получить("Warehouse");
	Warehouse = Фабрика.Создать(Тип_Warehouse);
	
	//Дополнительные типы

	//3Присваиваем значения
	Для Каждого Элем Из СтруктураСклада Цикл
		Warehouse[Элем.Ключ] = Элем.Значение;
	КонецЦикла;
	
	// вывод в строку XML	
	//Запись = Новый ЗаписьXML;
	//Запись.УстановитьСтроку(); 
	//Фабрика.ЗаписатьXML(Запись, Warehouse);
	//ДанныеXML = Запись.Закрыть();
	
	settingId = СтруктураАвторизации.SettingID;
	accessKey = СтруктураАвторизации.accessKey;
	
	//4Выгружаем результат
	Результат = Прокси.RegisterWarehouse(Warehouse,settingId,accessKey);
	//Если Результат.Errors.Error.Количество() > 0 Тогда
	//	Возврат Результат.Errors.Error[0];
	//КонецЕсли;	
	//
	//Возврат Результат.StockId;
	
	СтруктураВозврата = Новый Структура("Error,StockId",, Результат.StockId);
	Если Результат.Errors.Error.Количество() > 0 Тогда
		СтруктураВозврата.Error = Результат.Errors.Error[0];
	КонецЕсли;	
	Возврат СтруктураВозврата;
	
КонецФункции
//Асеев 28.11.2022 (Задача № 4935)<<<

#КонецОбласти

#Область Вспомогательные

Процедура ПередачаВАдминкуДопПараметровОЗОН(СтруктураЗаказа, НомерЗаказа)
	ПодключениеКИМ = Евген.СоздатьПодключениеКИнтернетМагазину();
	ТекстЗапроса = "EXEC bp_setOrderOzonInfo " + Формат(НомерЗаказа, "ЧГ=") + ",'" + СтруктураЗаказа.barcodeOZON + "','" + СтруктураЗаказа.nameOZON + "'";
	Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКИМ);
КонецПроцедуры	

//Переводит входящие данные структуры в вид соответствующий Api Sync
//На основе базовых типов, структур и массивов(БЕЗ XDTO!!!)
Функция КонвертацияСтруктурыЗаказаИзОзонВSync(СтруктураОзон,ДопПараметрыSync, СтруктураАвторизацииSync, КодСклада = Неопределено) Экспорт 
	
	СтруктураЗаказа	= Новый Структура;
	
	//Простые Типы
	СтруктураЗаказа.Вставить("SettingId",					СтруктураАвторизацииSync.SettingId);            //брать из кода Озона
	СтруктураЗаказа.Вставить("SourcePlaceId",				1);            //МСК?
	СтруктураЗаказа.Вставить("DeliveryPlaceId",				1);            //МСК?
	СтруктураЗаказа.Вставить("nameOZON",					СтруктураОзон.Id);
	СтруктураЗаказа.Вставить("barcodeOZON",					СтруктураОзон.Barcode);
	СтруктураЗаказа.Вставить("OrderIdImport",				СтруктураОзон.Name); //push.PostingNumber//
	
	Если СтруктураОзон.DeliveryType = "К" Тогда
		СтруктураЗаказа.Вставить("SelfDelivery",			0);            
	ИначеЕсли СтруктураОзон.DeliveryType = "С" Тогда
		СтруктураЗаказа.Вставить("SelfDelivery",			1);            
	КонецЕсли;
	
	СтруктураЗаказа.Вставить("Weight",						СтруктураОзон.Weight/1000);
	СтруктураЗаказа.Вставить("Volume",						СтруктураОзон.Length*СтруктураОзон.Width*СтруктураОзон.Height);
	СтруктураЗаказа.Вставить("PiecesOfFreight",				1);            //1 по умолчанию?
	СтруктураЗаказа.Вставить("TotalCost",					СтруктураОзон.ClientPrice);
	СтруктураЗаказа.Вставить("DeliveryCost",				СтруктураОзон.DeliveryPrice);
	СтруктураЗаказа.Вставить("IsPartialGiveoutDisabled",	0);            //1?
	СтруктураЗаказа.Вставить("AssessedCost",				СтруктураОзон.ItemPrice);  //как цена
	
	//Если СтруктураОзон.PrepaymentType = 1 Тогда
	//	СтруктураЗаказа.Вставить("PayType",				    7);
	//Иначе	
	////ИначеЕсли СтруктураОзон.PrepaymentType = 4 Тогда	
	//	СтруктураЗаказа.Вставить("PayType",				    1);            
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОзон.ClientPrice) Тогда
		СтруктураЗаказа.Вставить("PayType",				    1);
	Иначе	
		//ИначеЕсли СтруктураОзон.PrepaymentType = 4 Тогда	
		СтруктураЗаказа.Вставить("PayType",				    7);            
	КонецЕсли;
	
	
	СтруктураЗаказа.Вставить("Comment",						СтруктураОзон.Comment);
	СтруктураЗаказа.Вставить("DesiredDeliveryDate",			ПолучитьДатуSync(СтруктураОзон.ETADatetimeFrom));
	//СтруктураЗаказа.Вставить("ShipmentWHDate",				СтруктураОзон.а);            //Берем из даты поступления CarriageRecceve?
	СтруктураЗаказа.Вставить("TimeDeliveryFrom",			ПолучитьВремяSync(СтруктураОзон.ETADatetimeFrom));
	СтруктураЗаказа.Вставить("TimeDeliveryTo",				ПолучитьВремяSync(СтруктураОзон.ETADatetimeTo));
	Если КодСклада = Неопределено Тогда
		СтруктураЗаказа.Вставить("StockId",						ДопПараметрыSync.StockId);            //Идентификатор склада?
	Иначе
		СтруктураЗаказа.Вставить("StockId",						КодСклада);            //Идентификатор склада?
	КонецеСли;	
	СтруктураЗаказа.Вставить("LiftingIsPayed",				0); 
	СтруктураЗаказа.Вставить("NDSDelivery",					СтруктураОзон.DeliveryVATRate);
	СтруктураЗаказа.Вставить("PaymentMethodOfLifting",		1);            //?
	
	//Структуры*********************************************************************
	
	//User
	СтруктураЗаказаUser = Новый Структура;
	СтруктураЗаказаUser.Вставить("FIO",  СтруктураОзон.RecipientName);
	СтруктураЗаказаUser.Вставить("Phone",СтруктураОзон.Phone);
	СтруктураЗаказаUser.Вставить("Email",СтруктураОзон.Email);
	
	СтруктураЗаказа.Вставить("User",СтруктураЗаказаUser);
	
	//Address
	СтруктураЗаказаAddress = Новый Структура;
	//СтруктураЗаказаAddress.Вставить("Region",	  СтруктураОзон.а);
	//СтруктураЗаказаAddress.Вставить("City", 	  СтруктураОзон.а);
	//СтруктураЗаказаAddress.Вставить("Street",     СтруктураОзон.а);
	//СтруктураЗаказаAddress.Вставить("House",      СтруктураОзон.а);
	//СтруктураЗаказаAddress.Вставить("Case",       СтруктураОзон.а);
	//СтруктураЗаказаAddress.Вставить("Building",	  СтруктураОзон.а);
	//СтруктураЗаказаAddress.Вставить("Apartment",  СтруктураОзон.а);
	//СтруктураЗаказаAddress.Вставить("ZipCode",	  СтруктураОзон.а);
	СтруктураЗаказаAddress.Вставить("FullAddress",СтруктураОзон.DeliveryAddress);
	
	СтруктураЗаказа.Вставить("Address",СтруктураЗаказаAddress);
	
	//Массивы*********************************************************************
	
	//Проверка и Корректировка на суммы Предоплат и стоимости Товаров Озон
	СтоимостьПолная = СтруктураОзон.ClientPrice;
	СтоимостьДоставки = СтруктураОзон.DeliveryPrice;
	СтоимостьЗаказа = СтоимостьПолная - СтоимостьДоставки;
	
	//Items
	СтоимостьТоваров = 0;
	МассивЗаказаItems = Новый Массив;
	Для Каждого Элем Из СтруктураОзон.Items.ArticleItemInfo Цикл
		СтруктураЗаказаItems = Новый Структура;
		СтруктураЗаказаItems.Вставить("Article",     Элем.ID);
		СтруктураЗаказаItems.Вставить("Name",        Элем.Name);
		Если Элем.IsReturn Тогда 
			СтруктураЗаказаItems.Вставить("Count",       -1);          
		Иначе
			СтруктураЗаказаItems.Вставить("Count",       1);            
		КонецЕсли;
		СтруктураЗаказаItems.Вставить("Price",       Элем.Price);
		СтоимостьТоваров = СтоимостьТоваров + Элем.Price;
		
		//СтруктураЗаказаItems.Вставить("AssessedCost",Элем.а);
		СтруктураЗаказаItems.Вставить("Barcode",     Элем.Barcode);
		СтруктураЗаказаItems.Вставить("NDS",         Элем.VATRate);
		
		МассивЗаказаItems.Добавить(СтруктураЗаказаItems);
	КонецЦикла;
	
	СтруктураЗаказа.Вставить("Items",МассивЗаказаItems);
	
	Разница = СтоимостьЗаказа - СтоимостьТоваров;
	Если Разница <> 0 И СтоимостьЗаказа + СтоимостьДоставки <> 0 Тогда
		
		СтруктураЗаказа.IsPartialGiveoutDisabled = 1;
		
		Для Каждого Элем Из СтруктураЗаказа.Items Цикл
			СтТов = Элем.Price;
			ТекРазница = СтТов - Разница;
			Если ТекРазница > 0 Тогда
				Элем.Price = СтТов-ТекРазница;
				Разница = 0;
				Прервать;
			ИначеЕсли ТекРазница < 0 Тогда
				Элем.Price = 0;
				Разница = Разница-СтТов;
			Иначе 	
				Элем.Price = 0;
				Разница = 0;
				Прервать
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СтоимостьЗаказа + СтоимостьДоставки = 0 Тогда
		СтруктураЗаказа.IsPartialGiveoutDisabled = 1;	
	КонецЕсли;	
	
	//barcodes
	МассивЗаказаBarcodes = Новый Массив;
	
	СтруктураЗаказаBarcodes = Новый Структура;
	СтруктураЗаказаBarcodes.Вставить("piece",  1);
	СтруктураЗаказаBarcodes.Вставить("barcode",СтруктураОзон.Barcode);
	МассивЗаказаBarcodes.Добавить(СтруктураЗаказаBarcodes);
	СтруктураЗаказа.Вставить("barcodes",МассивЗаказаBarcodes);
	
	
	
	Возврат СтруктураЗаказа;
КонецФункции

Функция ПолучитьСтруктуруЗабораSync(СтруктураДанныхАПП) Экспорт 
	
	СтруктураЗаказа	= Новый Структура;
	
	//Простые Типы
	СтруктураЗаказа.Вставить("SettingId",					742);            //брать из кода Озона
	СтруктураЗаказа.Вставить("SourcePlaceId",				1);            //МСК?
	СтруктураЗаказа.Вставить("DeliveryPlaceId",				1);            //МСК?
	СтруктураЗаказа.Вставить("OrderIdImport",				СтруктураДанныхАПП.НомерВходящегоДокумента);
	
	СтруктураЗаказа.Вставить("SelfDelivery",				2);            
	
	СтруктураЗаказа.Вставить("Weight",						0);
	СтруктураЗаказа.Вставить("Volume",						0);
	СтруктураЗаказа.Вставить("PiecesOfFreight",				1);            //1 по умолчанию?
	СтруктураЗаказа.Вставить("TotalCost",					0);
	СтруктураЗаказа.Вставить("DeliveryCost",				0);
	СтруктураЗаказа.Вставить("IsPartialGiveoutDisabled",	0);            //1?
	СтруктураЗаказа.Вставить("AssessedCost",				0);  //как цена
	
	СтруктураЗаказа.Вставить("PayType",				    1);
	
	СтруктураЗаказа.Вставить("Comment",						СтруктураДанныхАПП.Наименование);
	
	ДатаЗабора = СтруктураДанныхАПП.ДатаВходящегоДокумента + 86400;
	
	СтруктураЗаказа.Вставить("DesiredDeliveryDate",			ПолучитьДатуSync(ДатаЗабора));
	//СтруктураЗаказа.Вставить("ShipmentWHDate",				СтруктураОзон.а);            //Берем из даты поступления CarriageRecceve?
	СтруктураЗаказа.Вставить("TimeDeliveryFrom",			ПолучитьВремяSync(Дата(Год(ДатаЗабора), Месяц(ДатаЗабора), День(ДатаЗабора), 13,0,0)));
	СтруктураЗаказа.Вставить("TimeDeliveryTo",				ПолучитьВремяSync(Дата(Год(ДатаЗабора), Месяц(ДатаЗабора), День(ДатаЗабора), 18,0,0)));
	//СтруктураЗаказа.Вставить("StockId",						ДопПараметрыSync.StockId);            //Идентификатор склада?
	СтруктураЗаказа.Вставить("LiftingIsPayed",				0); 
	СтруктураЗаказа.Вставить("NDSDelivery",					0);
	СтруктураЗаказа.Вставить("PaymentMethodOfLifting",		1);            //?
	
	//Структуры*********************************************************************
	
	//User
	СтруктураЗаказаUser = Новый Структура;
	СтруктураЗаказаUser.Вставить("FIO",  "Кладовщик");
	СтруктураЗаказаUser.Вставить("Phone",СтруктураДанныхАПП.НомерТелефонаСклада);
	СтруктураЗаказаUser.Вставить("Email","");
	
	СтруктураЗаказа.Вставить("User",СтруктураЗаказаUser);
	
	//Address
	СтруктураЗаказаAddress = Новый Структура;
	СтруктураЗаказаAddress.Вставить("FullAddress",СтруктураДанныхАПП.АдресСклада);
	
	СтруктураЗаказа.Вставить("Address",СтруктураЗаказаAddress);
	//
	////Массивы*********************************************************************
	//
	////Проверка и Корректировка на суммы Предоплат и стоимости Товаров Озон
	//СтоимостьПолная = СтруктураОзон.ClientPrice;
	//СтоимостьДоставки = СтруктураОзон.DeliveryPrice;
	//СтоимостьЗаказа = СтоимостьПолная - СтоимостьДоставки;
	//
	//Items	
	МассивЗаказаItems = Новый Массив;
	
	СтруктураЗаказаItems = Новый Структура;
	СтруктураЗаказаItems.Вставить("Article",     "1111");
	СтруктураЗаказаItems.Вставить("Name",        "Товар");
	СтруктураЗаказаItems.Вставить("Count",       1);            
	СтруктураЗаказаItems.Вставить("Price",       0);
	
	//СтруктураЗаказаItems.Вставить("AssessedCost",Элем.а);
	СтруктураЗаказаItems.Вставить("Barcode",     "");
	СтруктураЗаказаItems.Вставить("NDS",         -1);
	
	МассивЗаказаItems.Добавить(СтруктураЗаказаItems);
	
	СтруктураЗаказа.Вставить("Items",МассивЗаказаItems);
	//
	//Разница = СтоимостьЗаказа - СтоимостьТоваров;
	//Если Разница <> 0 Тогда
	//	
	//	СтруктураЗаказа.IsPartialGiveoutDisabled = 1;
	//	
	//	Для Каждого Элем Из СтруктураЗаказа.Items Цикл
	//		СтТов = Элем.Price;
	//		ТекРазница = СтТов - Разница;
	//		Если ТекРазница > 0 Тогда
	//			Элем.Price = СтТов-ТекРазница;
	//			Разница = 0;
	//			Прервать;
	//		ИначеЕсли ТекРазница < 0 Тогда
	//			Элем.Price = 0;
	//			Разница = Разница-СтТов;
	//		Иначе 	
	//			Элем.Price = 0;
	//			Разница = 0;
	//			Прервать
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;	
	//
	////barcodes
	//МассивЗаказаBarcodes = Новый Массив;
	//
	//СтруктураЗаказаBarcodes = Новый Структура;
	//СтруктураЗаказаBarcodes.Вставить("piece",  1);
	//СтруктураЗаказаBarcodes.Вставить("barcode",СтруктураОзон.Barcode);
	//МассивЗаказаBarcodes.Добавить(СтруктураЗаказаBarcodes);
	//СтруктураЗаказа.Вставить("barcodes",МассивЗаказаBarcodes);
	
	
	
	Возврат СтруктураЗаказа;
КонецФункции



//Дополнительные поля для конвертации
Функция ПолучениеДопПараметровДляSync(МагазинОзон,НомерЗаказа)Экспорт
	
	СтруктураДопПараметров = Новый Структура;
	
	// ИдентификаторНаправления в StockId
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.СкладМагазина.ИдентификаторНаправления КАК ИдентификаторНаправления
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|ГДЕ
	|	ДополнительныеПараметрыЗаказа.Заказ.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер",НомерЗаказа);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		StockId = Выборка.ИдентификаторНаправления;
		Если НЕ ЗначениеЗаполнено(StockId) Тогда
			StockId = "";
		КонецЕсли;	
		СтруктураДопПараметров.Вставить("StockId", StockId);
	Иначе
		СтруктураДопПараметров.Вставить("StockId", "");
	КонецЕсли;
	
	//Код Магазина
	//СтрКод = СтрЗаменить(МагазинОзон.Код,"Shop_","");
	//СтруктураДопПараметров.Вставить("SettingId", Число(СтрКод));
	
	Возврат СтруктураДопПараметров;
	
КонецФункции	

Функция ПолучитьДатуSync(Д) Экспорт 
	Возврат Формат(Год(Д), "ЧГ=") +"-"+ Евген.ЛидирующийНоль(Месяц(Д)) +"-"+ Евген.ЛидирующийНоль(День(Д));
КонецФункции

Функция ПолучитьВремяSync(Д) Экспорт 
	Возврат Строка(Евген.ЛидирующийНоль(Час(Д)))+":"+ Строка(Евген.ЛидирующийНоль(Минута(Д)));
КонецФункции

Функция ОтправитьСообщениеВит(СписокПолучателей = Неопределено, ТемаС = Неопределено, Знач ТекстС = Неопределено, ФайлС = Неопределено) Экспорт
	П = Новый ИнтернетПочтовыйПрофиль;
	П.АдресСервераSMTP = "smtp.yandex.ru";
	П.ПортSMTP = 465;
	//П.ПользовательSMTP = "noreply@strizh-logistic.ru";
	//П.ПарольSMTP = "4gbZuXsEaz";
	П.ПользовательSMTP = "noreply2@strizh-logistic.ru";
	//П.ПарольSMTP = "4gbZuXsEaz";
	П.ПарольSMTP = "kjaelrj985";
	
	П.ИспользоватьSSLSMTP= Истина;
	П.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	Поч= Новый ИнтернетПочта;
	Поч.Подключиться(п);
	
	Сооб = Новый ИнтернетПочтовоеСообщение;
	Сооб.ИмяОтправителя = "Сервер 1С";
	Сооб.Отправитель = "noreply2@strizh-logistic.ru";
	
	Сооб.Тема = ТемаС;
	
	Сооб.Тексты.Добавить(ТекстС);
	
	Если ФайлС <> Неопределено Тогда
		Если ТипЗнч(ФайлС) = Тип("Строка") Тогда
			Сооб.Вложения.Добавить(ФайлС);
		ИначеЕсли ТипЗнч(ФайлС) = Тип("Массив") Тогда	
			Для Каждого Тек Из ФайлС Цикл
				Сооб.Вложения.Добавить(Тек);
			КонецЦикла;	
		КонецеСли;	
	КонецеСли;	
	
	Для Каждого Тек Из СписокПолучателей Цикл
		Сооб.Получатели.Добавить(СокрЛП(Тек));
	КонецЦикла;
	
	Попытка
		Поч.Послать(Сооб);
	Исключение
		Ошибка = ОписаниеОшибки();
		Поч.Отключиться();
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Истина;
КонецФункции

// ++Задача № 3553
#Область СтароеЛогирование
//// Запись Лога в "РегистрСведений.oz_ИсторияОтправкиЗапросов"
//Процедура ЗаписатьЛог_ЛогОтправкиЗапросовAPISync(РезультатСтруктура, Метод, Заказ = Неопределено, ИсточникСобытия = Неопределено, ТекстЗапроса = "", ТекстОтвета = "") Экспорт
//	
//	//Набор = РегистрыСведений.oz_ИсторияОтправкиЗапросов.СоздатьНаборЗаписей();
//	//Если Заказ = Неопределено Тогда	
//	//	Набор.Отбор.Заказ.Установить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
//	//Иначе
//	//	Набор.Отбор.Заказ.Установить(Заказ.Ссылка);
//	//КонецЕсли;
//	//Набор.Отбор.Период.Установить(ТекущаяДата());
//	
//	//
//	//Запись = Набор.Добавить();
//	//Запись.Заказ    = ?(Заказ = Неопределено, Документы.РеализацияТоваровУслуг.ПустаяСсылка(), Заказ.Ссылка);	 
//	//Запись.Период   = ТекущаяДата();
//	//Запись.Метод    = Метод;
//	//Запись.Код      = РезультатСтруктура.Код;
//	//Запись.Описание = Лев(РезультатСтруктура.Описание ,200);
//	//Запись.КлючДоступа = Константы.oz_КлючДоступа.Получить();
//	//Запись.ИсточникСобытия = ИсточникСобытия;
//	//Запись.Запрос = ТекстЗапроса;
//	//Запись.Ответ = ТекстОтвета;
//	//	
//	//Попытка	
//	//	Набор.Записать();		
//	//Исключение
//	//	Сообщить("Ошибка записи логов отправки запросов Озон: " + ОписаниеОшибки());	
//	//КонецПопытки;
//	
//	
//	Набор = РегистрыСведений.ЛогОтправкиЗапросовAPISync.СоздатьНаборЗаписей();
//	Если Заказ = Неопределено Тогда	
//		Набор.Отбор.Объект.Установить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
//	Иначе
//		Набор.Отбор.Объект.Установить(Заказ.Ссылка);
//	КонецЕсли;
//	Набор.Отбор.Период.Установить(ТекущаяДата());
//	
//	
//	Запись = Набор.Добавить();
//	Запись.Объект    = ?(Заказ = Неопределено, Документы.РеализацияТоваровУслуг.ПустаяСсылка(), Заказ.Ссылка);	 
//	Запись.Период   = ТекущаяДата();
//	Запись.Метод    = Метод;
//	//Запись.Код      = РезультатСтруктура.Код;
//	Запись.Описание = Лев(РезультатСтруктура.Описание ,200);
//	Запись.Запрос = ТекстЗапроса;
//	Запись.Ответ = ТекстОтвета;
//	
//	Попытка	
//		Набор.Записать();		
//	Исключение
//		Сообщить("Ошибка записи логов отправки запросов API Sync : " + ОписаниеОшибки());	
//	КонецПопытки;
//	
//КонецПроцедуры
#КонецОбласти

Процедура ЗаписатьЛог_ЛогОтправкиЗапросовAPISync(РезультатСтруктура, Метод, ТекстЗапроса = "", ТекстОтвета = "", ЭтоОшибка = Ложь) Экспорт
	
	МетодСтрокой = XMLстрока(Метод);
	
	ПараметрыЗаписиЛога = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаСервиса(Справочники.API.Sync, Справочники.МетодыAPI[МетодСтрокой]);
	
	//Общие поля параметров
	ПараметрыЗаписиЛога.requestXML = ТекстЗапроса;
	ПараметрыЗаписиЛога.responseXML = ТекстОтвета;
	ПараметрыЗаписиЛога.isError = ЭтоОшибка;
	//isServerError
	//errorDescription
	//Дополнительные поля параметров
	//numberObjects
	//noData
	//responseCode
	ПараметрыЗаписиЛога.responseDescription = РезультатСтруктура.Описание;
	ПараметрыЗаписиЛога.orderNumber = РезультатСтруктура.Код;
	//eventSourceType
	//eventSourceCode
	
	ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаСервиса(ПараметрыЗаписиЛога);
	
	
КонецПроцедуры	
// --Задача № 3553

#КонецОбласти
