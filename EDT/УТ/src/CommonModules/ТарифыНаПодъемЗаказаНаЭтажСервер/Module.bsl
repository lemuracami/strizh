Процедура РегламентЗагрузкаТарифовИзАдминки() Экспорт
	
	//Получим дату последней загрузки
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ПараметрыРегламентныхЗаданий.Значение КАК ДатаПоследнейЗагрузки
    |ИЗ
    |   РегистрСведений.ПараметрыРегламентныхЗаданий КАК ПараметрыРегламентныхЗаданий
    |ГДЕ
    |   ПараметрыРегламентныхЗаданий.Ключ = ""ДатаЗагрузкаДанныхОТарифахНаПодъем""";
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        ДатаЗагрузки = Дата(ВыборкаДетальныеЗаписи.ДатаПоследнейЗагрузки);
    Иначе
        ДатаЗагрузки = Дата(2000,01,01);
    КонецЕсли;
    ДатаЗапроса = ТекущаяДата();
    //Получим данные из базы SQL
	
	СписокНеПрогруженныхТарифов = "";
	ЗапросНезагруженныеОбъекты = Новый Запрос("ВЫБРАТЬ
	                                          |	НезагруженныеОбъектыСрезПоследних.КодОбъекта КАК КодОбъекта
	                                          |ИЗ
	                                          |	РегистрСведений.НезагруженныеОбъекты.СрезПоследних(, ТипЗагрузки = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузок.ЗагрузкаДанныхОТарифахНаПодъем)) КАК НезагруженныеОбъектыСрезПоследних
	                                          |ГДЕ
	                                          |	НезагруженныеОбъектыСрезПоследних.Загружено = ЛОЖЬ");
	РезНезагруженныеОбъекты = ЗапросНезагруженныеОбъекты.Выполнить().Выбрать();		
	Пока РезНезагруженныеОбъекты.Следующий() Цикл
		СписокНеПрогруженныхТарифов = СписокНеПрогруженныхТарифов + РезНезагруженныеОбъекты.КодОбъекта + ",";		
	КонецЦикла;
	
	СписокНеПрогруженныхТарифов = Лев(СписокНеПрогруженныхТарифов, СтрДлина(СписокНеПрогруженныхТарифов)-1);
	
	Если ЗначениеЗаполнено(СписокНеПрогруженныхТарифов) Тогда
		
		ТекстЗапроса = "
	  	|  SELECT  
	  	|  	 id
	 	|	,r.shopId as settingid
	  	|	,s.internetshopid 
	  	|	,name
	  	|	,r.modifyDate
	  	|	,who_pays_rise
	  	|	,startDate
	  	|	,readonly
	  	|	,mode
	  	|FROM rk_rates_on_the_rise r
	  	|	join settings s on s.shopid=r.shopid
		|Where R.[modifyDate] >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "' 
		| or  R.[id] in ("+ СтрЗаменить(СписокНеПрогруженныхТарифов, Символы.НПП, "") +")";
		
	Иначе
		
		ТекстЗапроса = "
		|  SELECT  
		|  	 id
		|	,r.shopId as settingid
		|	,s.internetshopid 
		|	,name
		|	,r.modifyDate
		|	,who_pays_rise
		|	,startDate
		|	,readonly
	  	|	,mode
		|FROM rk_rates_on_the_rise r
		|	join settings s on s.shopid=r.shopid
		|Where R.[modifyDate] >= '" + Евген.ДатаВSQL(ДатаЗагрузки, Ложь) + "'";

		
	КонецЕсли;	
	
    ТаблицаТарифныхСетокСпериодомДействия = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
    
    ЕстьОшибки = Ложь;
	
	СписокТарифов = "";
	
    //Создаем или меняем элементы справочника Тарифные сетки
	Для каждого Стр Из ТаблицаТарифныхСетокСпериодомДействия Цикл
		
			
        //Найдем уже созданный элемент
        ТарифнаяСеткаНайденая = Справочники.ТарифыПодъемаЗаказовНаЭтаж.НайтиПоРеквизиту("КодТарифа", Число(СтрЗаменить(Стр.id, Символы.НПП, "")));
        Если ЗначениеЗаполнено(ТарифнаяСеткаНайденая) Тогда 
            ТарифнаяСеткаОбъект = ТарифнаяСеткаНайденая.ПолучитьОбъект();
            ЗаполнитьТарифнаяСетка(ТарифнаяСеткаОбъект,Стр);
        Иначе
            ТарифнаяСеткаОбъект = Справочники.ТарифыПодъемаЗаказовНаЭтаж.СоздатьЭлемент();
            ЗаполнитьТарифнаяСетка(ТарифнаяСеткаОбъект,Стр);
		КонецЕсли;
		
		// Неопределено может быть только в случае, когда не найден магазин
		Если ТарифнаяСеткаОбъект <> Неопределено Тогда
			
						
			Попытка
	            //Записываем элемент
				ТарифнаяСеткаОбъект.ПометкаУдаления = Ложь;
	            ТарифнаяСеткаОбъект.Записать();
				
				СписокТарифов = СписокТарифов + Формат(Стр.ID, "ЧГ=") + ",";

				// Помечаем сетку в РС НезагруженныеОбъекты как прогруженную		
				ЗапТС = Новый Запрос("ВЫБРАТЬ
				                     |	НезагруженныеОбъекты.Период КАК Период
				                     |ИЗ
				                     |	РегистрСведений.НезагруженныеОбъекты КАК НезагруженныеОбъекты
				                     |ГДЕ
				                     |	НезагруженныеОбъекты.КодОбъекта = &КодОбъекта
				                     |	И НезагруженныеОбъекты.ТипЗагрузки = ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузок.ЗагрузкаДанныхОТарифахНаПодъем)");
				
				ЗапТС.УстановитьПараметр("КодОбъекта", ТарифнаяСеткаОбъект.Код);					 
				РезТС = ЗапТС.Выполнить();	
				
				Если НЕ РезТС.Пустой() Тогда	
					
					mas.ЗаписьВРСНезагруженныеОбъекты(Перечисления.ТипыЗагрузок.ЗагрузкаДанныхОТарифахНаПодъем, ТарифнаяСеткаОбъект.Код, Истина);
					
				КонецЕсли;	
				
			Исключение
				
	            ЕстьОшибки = Истина;
	           
	            Сообщить(ОписаниеОшибки()+" ID сетки: "+Стр.id);   
							
	        КонецПопытки;
		КонецЕсли;
        
	КонецЦикла;
	
	СписокТарифов = Лев(СписокТарифов, СтрДлина(СписокТарифов)-1);	
	
	Если СписокТарифов <> "" Тогда
		
		ТекстЗапроса = "
		|SELECT		
		|	id 
		|	,id_rates
		|	,weight_from 
		|	,weight_to
		|	,lift_on
		|	,lift_off
		|	,typeid
		|FROM  rk_weight_break
		|WHERE id_rates in ("+ СписокТарифов +")";	
		
		
		ТаблицаВесовыеБрейкиРасчетаСтоимостиПодъемов  = smv.СформироватьТаблицуЗначенийИзДанныхSQL(ТекстЗапроса);
		
		Для каждого Стр Из ТаблицаВесовыеБрейкиРасчетаСтоимостиПодъемов Цикл				
			
			Най_ТарифыПодъемаЗаказовНаЭтаж = Справочники.ТарифыПодъемаЗаказовНаЭтаж.НайтиПоРеквизиту("КодТарифа", Число(СтрЗаменить(Стр.id_rates, Символы.НПП, "")));
			
			Если ЗначениеЗаполнено(Най_ТарифыПодъемаЗаказовНаЭтаж) Тогда
				
				НайБрейк_Об = Справочники.ВесовыеБрейкиРасчетаСтоимостиПодъемов.НайтиПоРеквизиту("КодБрейка", Число(СтрЗаменить(Стр.id, Символы.НПП, "")),, Най_ТарифыПодъемаЗаказовНаЭтаж);		
				Если ЗначениеЗаполнено(НайБрейк_Об) Тогда			
					БрейкОбъект_Об = НайБрейк_Об.ПолучитьОбъект();
				Иначе
					БрейкОбъект_Об = Справочники.ВесовыеБрейкиРасчетаСтоимостиПодъемов.СоздатьЭлемент();		
					БрейкОбъект_Об.КодБрейка = Стр.id;
				КонецЕсли;
				
				БрейкОбъект_Об.Владелец = Най_ТарифыПодъемаЗаказовНаЭтаж;
				БрейкОбъект_Об.ВесОт = Стр.weight_from;
				БрейкОбъект_Об.ВесДо = Стр.weight_to;
				БрейкОбъект_Об.СтоимостьПодъемаСНаличемЛифта = Стр.lift_on;
				БрейкОбъект_Об.СтоимостьПодъемаБезЛифта = Стр.lift_off;
				
				//+Степанов Задача № 1484
				// Якурнов 25.09.2018 12:05:01
				//Если Стр.typeid = 1 Тогда
				//	БрейкОбъект_Об.ВариантТарифногоБрейка = Перечисления.ВариантыТарифаНаПодъемЗаказов.ТарифДляЭкипажа;
				//Иначе
				//	БрейкОбъект_Об.ВариантТарифногоБрейка = Перечисления.ВариантыТарифаНаПодъемЗаказов.ТарифДляИМ;
				//КонецЕсли;
				Если Стр.typeid = 1 Тогда
					БрейкОбъект_Об.ВариантТарифногоБрейка = Перечисления.ВариантыТарифаНаПодъемЗаказов.ТарифДляИМ;
				Иначе
					БрейкОбъект_Об.ВариантТарифногоБрейка = Перечисления.ВариантыТарифаНаПодъемЗаказов.ТарифДляЭкипажа;
				КонецЕсли;
				//-Степанов
				
				Попытка
					БрейкОбъект_Об.Записать();
				Исключение
					
					ЕстьОшибки = Истина;
					
					#Если Клиент Тогда
						Сообщить(ОписаниеОшибки()+" Код брейка: "+Стр.categoryId);   
					#КонецЕсли
				КонецПопытки;			
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
    
	Если НЕ ЕстьОшибки Тогда 
		
        //Записываем в регистр сведений последнюю дату выгрузки данных
        НаборЗаписей = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Ключ.Установить("ДатаЗагрузкаДанныхОТарифахНаПодъем");
        Запись = НаборЗаписей.Добавить();
        Запись.Значение = ДатаВСтроку(ДатаЗапроса);
        Запись.Ключ = "ДатаЗагрузкаДанныхОТарифахНаПодъем";
        НаборЗаписей.Записать();
		
    КонецЕсли;

	
КонецПроцедуры	

Функция ДатаВСтроку(Д) Экспорт
	
    Возврат Формат(Год(Д), "ЧГ=") + Евген.ЛидирующийНоль(Месяц(Д)) + Евген.ЛидирующийНоль(День(Д)) + Евген.ЛидирующийНоль(Час(Д)) + Евген.ЛидирующийНоль(Минута(Д)) + Евген.ЛидирующийНоль(Секунда(Д));
	
КонецФункции


Процедура ЗаполнитьТарифнаяСетка (ТарифнаяСеткаОбъект,Стр)
	
	//Асеев 15.04.2022 (Задача № 4783)>>>
	//Владелец = Справочники.Контрагенты.НайтиПоКоду("Shop_"+Стр.internetShopID);
	Владелец = Справочники.Контрагенты.НайтиПоКоду("Shop_" + Формат(Стр.internetShopID, "ЧГ="));
	//Асеев 15.04.2022 (Задача № 4783)<<<
    Если ЗначениеЗаполнено(Владелец) Тогда
       
		ТарифнаяСеткаОбъект.Владелец = Владелец; 
		
		ТарифнаяСеткаОбъект.Наименование = Стр.name;
		ТарифнаяСеткаОбъект.КодТарифа = Стр.Id;
		ТарифнаяСеткаОбъект.МетодОплатыУслугиПодъема = ПолучитьМетодОплатыУслугиПодъема(Стр.who_pays_rise);
		
		// Якурнов 25.09.2018 12:05:01
		Если Стр.mode = 1 Тогда
			ТарифнаяСеткаОбъект.ТипТарифа = Перечисления.ТипТарифаНаПодъемЗаказов.РаздельныйТарифПоИМИЭкипажу;
		Иначе
			ТарифнаяСеткаОбъект.ТипТарифа = Перечисления.ТипТарифаНаПодъемЗаказов.ЕдиныйТарифныйПлан;
		КонецЕсли;
		
	Иначе

		mas.ЗаписьВРСНезагруженныеОбъекты(Перечисления.ТипыЗагрузок.ЗагрузкаДанныхОТарифахНаПодъем, Стр.Id, Ложь, "Не найден контрагент: " + Стр.internetShopID);
		ТарифнаяСеткаОбъект = Неопределено;
		
    КонецЕсли;
    
КонецПроцедуры

Функция ПолучитьМетодОплатыУслугиПодъема(КтоОплачиваетКод)
	
	Если КтоОплачиваетКод = 1 Тогда
		
		Возврат Перечисления.МетодыОплатыПодъёмаЗаказа.ОплачиваетПартнер;
		
	ИначеЕсли КтоОплачиваетКод = 2 Тогда
		
		Возврат Перечисления.МетодыОплатыПодъёмаЗаказа.ОплачиваетКлиент;
		
	ИначеЕсли КтоОплачиваетКод = 3 Тогда
		
		Возврат Перечисления.МетодыОплатыПодъёмаЗаказа.ОпределяетсяНастройкамиЗаказа;
		
	ИначеЕсли КтоОплачиваетКод = 4 Тогда
		
		Возврат Перечисления.МетодыОплатыПодъёмаЗаказа.ОпределяетсяПоКомментарию;
		
	Иначе 
		
		Возврат Перечисления.МетодыОплатыПодъёмаЗаказа.ПустаяСсылка();
		
	КонецЕсли;	
		
КонецФункции	

Функция ПолучитьСписокМетодОплатыУслугиПодъема() Экспорт 
	
	Структура = Новый Соответствие;
	
	Структура.Вставить("1", Перечисления.МетодыОплатыПодъёмаЗаказа.ОплачиваетПартнер);
	Структура.Вставить("2", Перечисления.МетодыОплатыПодъёмаЗаказа.ОплачиваетКлиент);
	Структура.Вставить("3", Перечисления.МетодыОплатыПодъёмаЗаказа.ОпределяетсяНастройкамиЗаказа);
	Структура.Вставить("4", Перечисления.МетодыОплатыПодъёмаЗаказа.ОпределяетсяПоКомментарию);
	
	Возврат Структура;
	
КонецФункции	

Функция ПолучитьРасчетныеДанныеПодъемаЗаказаНаЭтаж(ДанныеПодъема, ВариантТарифногоБрейка = Неопределено) Экспорт
	ОтветФункции = Новый Структура;
	Если ВариантТарифногоБрейка = Неопределено Тогда
		ВариантТарифногоБрейка = Перечисления.ВариантыТарифаНаПодъемЗаказов.ТарифДляЭкипажа;
	конецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ВесовыеБрейкиРасчетаСтоимостиПодъемов.Код КАК КодБрейка,
	            |	ВесовыеБрейкиРасчетаСтоимостиПодъемов.Ссылка КАК Брейк,
	            |	ДополнительныеПараметрыЗаказа.ТарифнаяСеткаПодъемаЗаказов.Ссылка КАК ТарифнаяСетка,
	            |	ДополнительныеПараметрыЗаказа.ТарифнаяСеткаПодъемаЗаказов.Код КАК КодТарифнойСетки,
	            |	ВесовыеБрейкиРасчетаСтоимостиПодъемов.СтоимостьПодъемаСНаличемЛифта КАК СтоимостьЛифт,
	            |	ВесовыеБрейкиРасчетаСтоимостиПодъемов.СтоимостьПодъемаБезЛифта КАК СтоимостьБезЛифта
	            |ИЗ
	            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	            |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВесовыеБрейкиРасчетаСтоимостиПодъемов КАК ВесовыеБрейкиРасчетаСтоимостиПодъемов
	            |			ПО ДополнительныеПараметрыЗаказа.ТарифнаяСеткаПодъемаЗаказов.Ссылка = ВесовыеБрейкиРасчетаСтоимостиПодъемов.Владелец.Ссылка
	            |		ПО РеализацияТоваровУслуг.Ссылка = ДополнительныеПараметрыЗаказа.Заказ.Ссылка
	            |ГДЕ
	            |	РеализацияТоваровУслуг.Номер = &НомерЗаказа
	            |	И ВесовыеБрейкиРасчетаСтоимостиПодъемов.ВесОт <= &ВесЗаказа
	            |	И ВесовыеБрейкиРасчетаСтоимостиПодъемов.ВесДо > &ВесЗаказа
	            |	И ВесовыеБрейкиРасчетаСтоимостиПодъемов.ВариантТарифногоБрейка = &ВариантТарифногоБрейка";
	Зап.УстановитьПараметр("ВесЗаказа", ДанныеПодъема.ВесЗаказа);
	Зап.УстановитьПараметр("НомерЗаказа", ДанныеПодъема.НомерЗаказа);
	Зап.УстановитьПараметр("ВариантТарифногоБрейка", ВариантТарифногоБрейка);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		ОтветФункции.Вставить("Успешно", Истина);
	Иначе
		ОтветФункции.Вставить("Успешно", Ложь);
		Возврат ОтветФункции;
	КонецеСли;
	
	ОтветФункции.Вставить("КодБрейка", Выб.КодБрейка);
	ОтветФункции.Вставить("Брейк", Выб.Брейк);
	ОтветФункции.Вставить("ТарифнаяСетка", Выб.ТарифнаяСетка);
	ОтветФункции.Вставить("КодТарифнойСетки", Выб.КодТарифнойСетки);
	
	СтоимостьПодъема = 0;
	
	Если ДанныеПодъема.МетодПодъема = Перечисления.ТипПодъемаНаЭтаж.ПодъемЗаказаБезЛифта Тогда
		СтоимостьПодъема = Выб.СтоимостьБезЛифта*ДанныеПодъема.КоличествоХодок*ДанныеПодъема.Этаж;
	ИначеЕсли ДанныеПодъема.МетодПодъема = Перечисления.ТипПодъемаНаЭтаж.ПодъемЗаказаНаЛифте Тогда	
		СтоимостьПодъема = Выб.СтоимостьЛифт*ДанныеПодъема.КоличествоХодок;
	КонецеСли;
	
	ОтветФункции.Вставить("СтоимостьПодъема", СтоимостьПодъема);
	Возврат ОтветФункции;
КонецФункции	