

	


//Эта функция позволяет в любой момент выполнить любой код на языке 1С над любыми данными, переданными ей. 
//Для отладки
Функция Ду(Код, П=Неопределено, П1=Неопределено,  П2=Неопределено, П3=Неопределено, П4=Неопределено)  Экспорт
	Перем Р;
	Выполнить(Код);
	Возврат Р;
КонецФункции

Функция Присвоить(А,Б) Экспорт
	А=Б; Возврат А;
КонецФункции

#Область ЖурналРегистрации

Функция SQL_СтрокаCNull(Данные)
	
	//Возврат "'" + Данные + "'";

	СтрокаДанные = Строка(Данные);
	
	Если СтрокаДанные <> "" Тогда
				
		//Если  СтрНайти(СтрокаДанные,"'") > 0 Тогда
		
		Возврат СтрЗаменить(СтрокаДанные, "'", """");
			
		//КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат СтрокаДанные;
	

КонецФункции	

Функция ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину, МассивПараметров = Неопределено) Экспорт
	
	Попытка
		
		Cmd = Новый COMОбъект("ADODB.Command");
		Cmd.ActiveConnection = ПодключениеКМагазину;
		Cmd.CommandText = ТекстЗапроса;
		Cmd.CommandType = 1;
		Cmd.CommandTimeout = 120;
		
		
		Если МассивПараметров <> Неопределено Тогда 
			
			Для Каждого СтрокаПараметр Из МассивПараметров Цикл 
				
				//Если СтрДлина(СтрокаПараметр) < 251 Тогда
					
					//СтрокаПараметр = "'" + "'";
				
					Param1 = Cmd.CreateParameter("@comment",201,1 ,3000 , СтрокаПараметр); 
				
					Cmd.Parameters.Append(Param1);	
				
				//КонецЕсли;			
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		Возврат Cmd.Execute();
		
	Исключение
		
		Текст = ОписаниеОшибки();
		
		СтрПараметры = Символы.ПС + "";
		
			Для Каждого СтрокаПараметр Из МассивПараметров Цикл 
				
				СтрПараметры = СтрПараметры + СтрокаПараметр + Символы.ПС;
				
			КонецЦикла;
		
		ВызватьИсключение Текст + Символы.ПС + ТекстЗапроса + СтрПараметры;
		
	КонецПопытки;
	
КонецФункции 

Функция Вернуть_СтатусТранзакцииЗаписиЖурналаРегистрации(Статус)
	
	//СтатусТранзакцииЗаписиЖурналаРегистрации (EventLogEntryTransactionStatus) 
	//Значения 
	//Зафиксирована (Committed) = 1
	//НеЗавершена (Unfinished) = 2
	//НетТранзакции (NotApplicable) = 3
	//Отменена (RolledBack) = 4
	
	Если Статус = СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована Тогда 
		Возврат 1;
	ИначеЕсли Статус = СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована Тогда 
		Возврат 2;	
	ИначеЕсли Статус = СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована Тогда 
		Возврат 3;
	Иначе 	
		Возврат 4
	КонецЕсли;	
	
КонецФункции

Функция Вернуть_УровеньЖурналаРегистрации(Уровень)		
	
	//УровеньЖурналаРегистрации (EventLogLevel) 
	//Значения
	//Информация (Information) = 1
	//Ошибка (Error) = 2
	//Предупреждение (Warning) = 3
	//Примечание (Note) = 4
	
	Если Уровень = УровеньЖурналаРегистрации.Информация Тогда 
		Возврат 1;
	ИначеЕсли Уровень = УровеньЖурналаРегистрации.Ошибка Тогда 
		Возврат 2;	
	ИначеЕсли Уровень = УровеньЖурналаРегистрации.Предупреждение Тогда 
		Возврат 3;
	Иначе 	
		Возврат 4
	КонецЕсли;	
	
КонецФункции	

Процедура ПолучитьОписаниеДанных(Данные, ID_Dannye, Vid__Dannye, Imya_Dannye)
	
	//ID_Dannye = Ссылка
	//Vid__Dannye = Справочник или Документ
	//Imya_Dannye = Имя справочника
	
	ID_Dannye = "";
	Vid__Dannye = "";
	Imya_Dannye = "";

	
	Если Данные = Неопределено 
		Или ТипЗнч(Данные)= Тип("Структура")
		Или ТипЗнч(Данные)= Тип("Строка") Тогда 
		
		Возврат;
		
	ИначеЕсли 	Метаданные.Справочники.Содержит(Данные.Метаданные()) Тогда 
		
		ID_Dannye = Строка(Данные.Ссылка.УникальныйИдентификатор());
		Vid__Dannye = "Справочник";
		Imya_Dannye = Данные.Метаданные().Имя;

		
	ИначеЕсли 	Метаданные.Документы.Содержит(Данные.Метаданные()) Тогда
		
		ID_Dannye = Строка(Данные.Ссылка.УникальныйИдентификатор());
		Vid__Dannye = "Документ";
		Imya_Dannye = Данные.Метаданные().Имя;

	КонецЕсли;	
	
КонецПроцедуры

Процедура ЭкспортВоВнешнийЖурналРегистрации1с() Экспорт
	
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЖурналаРегистрации");
	Запись.Прочитать();
	Если Запись.Количество() = 0 Тогда
		НоваяЗапись = Запись.Добавить();
	Иначе
		НоваяЗапись = Запись[0];
		Попытка
			ДатаПрошлойЗагрузки = Вычислить("'" + НоваяЗапись.Значение + "'");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;

	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(ДатаПрошлойЗагрузки) Тогда
		Отбор.Вставить("ДатаНачала", ДатаПрошлойЗагрузки);
	КонецЕсли;	
	
	ПутьКНастройкамЛогирования = "C:\log1s\sqlserverflag.txt";
	
	Файл = Новый Файл("C:\1s\");
	
	Если Не Файл.Существует() Тогда
		СоздатьКаталог("C:\1s\");
	КонецЕсли;	
	
	ПутьККопииЖурнала = "C:\1s\zurnal_" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")  + ".lgd";
	
	ТекущаяДатаНачалаОтбора = ДатаПрошлойЗагрузки;
	
	Пока ТекущаяДатаНачалаОтбора <= ТекущаяДата()  Цикл  
		
		Если ЗначениеЗаполнено(ДатаПрошлойЗагрузки) Тогда
			
			Отбор.Вставить("ДатаНачала", ТекущаяДатаНачалаОтбора);
			Отбор.Вставить("ДатаОкончания", ТекущаяДатаНачалаОтбора + 3*60*60);
			
		КонецЕсли;	
		
		ТекущаяДатаНачалаОтбора = ТекущаяДатаНачалаОтбора + 3*60*60;
		
		//СкопироватьЖурналРегистрации("", ПутьККопииЖурнала, Отбор); 
		//
		//ВыгрузитьЖурналРегистрации(ТЗ,,, ПутьККопииЖурнала);

		
		ВыгрузитьЖурналРегистрации(ТЗ, Отбор);
		
		ТекстЗапроса = "";
		ID_Dannye = ""; 
		Vid__Dannye = ""; 
		Imya_Dannye = "";
		ДатаЗаписи = Дата(1,1,1);
		
		ПодключениеКМагазину = Новый COMОбъект("ADODB.Connection"); 
		ПодключениеКМагазину.ConnectionTimeOut = 120;
		ПодключениеКМагазину.CursorLocation = 3;
		ПодключениеКМагазину.Open(Константы.СтрокаПодключенияКЖурналуРегистрации.Получить());
		ПодключениеКМагазину.BeginTrans();
		
		Сч = 0;  
		
		ПоследняяДатаЗаписи = Дата(1,1,1);
		
		Для Каждого СтрокаТЗ Из ТЗ Цикл     
			
			Если Сч > 1 Тогда
				
				ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
				ТекстЗапроса = "";
				Сч = 0;
			КонецЕсли;	
			
			СтатусТранзакции = Вернуть_СтатусТранзакцииЗаписиЖурналаРегистрации(СтрокаТЗ.СтатусТранзакции);
			Уровень = Вернуть_УровеньЖурналаРегистрации(СтрокаТЗ.Уровень);
			ID_Polzovatel = Строка(СтрокаТЗ.Пользователь);
			ПолучитьОписаниеДанных(СтрокаТЗ.Данные, ID_Dannye, Vid__Dannye, Imya_Dannye);
			ДатаЗаписи = Формат (СтрокаТЗ.Дата, "ДФ='ггггMMдд hh:mm:ss'" "");
			ПоследняяДатаЗаписи = СтрокаТЗ.Дата;
			
			ТекстЗапроса = ТекстЗапроса + "
			|  INSERT INTO [dbo].[event_log]
			|     ([VspomogatelnyjIPPort]
			|     ,[Dannye]
			|     ,[Data]
			|     ,[ImyaPolzovatelya]
			|     ,[ImyaPrilozheniya]
			|     ,[Kommentarij]
			|     ,[Kompyuter]
			|     ,[Metadannye]
			|     ,[OsnovnojIPPort]
			|     ,[Polzovatel]
			|     ,[PredstavlenieDannyh]
			|     ,[PredstavlenieMetadannyh]
			|     ,[PredstavleniePrilozheniya]
			|     ,[PredstavlenieSobytiya]
			|     ,[RabochijServer]
			|     ,[Seans]
			|     ,[Sobytie]
			|     ,[Soedinenie]
			|     ,[StatusTranzakcii]
			|     ,[Tranzakciya]
			|     ,[Uroven]
			|     ,[ID_Dannye]
			|     ,[ID_Polzovatel]
			|     ,[Vid__Dannye]
			|     ,[Imya_Dannye])
			|VALUES
			|     ('" + Формат(СтрокаТЗ.ВспомогательныйIPПорт, "ЧН=0; ЧГ=0") + "'
			|     ,'" + (СтрокаТЗ.Данные) + "'
			|     ,'" + (ДатаЗаписи) + "'
			|     ,'" + (СтрокаТЗ.ИмяПользователя) + "'
			|     ,'" + (СтрокаТЗ.ИмяПриложения) + "'
			|     ,'" + SQL_СтрокаCNull(СтрокаТЗ.Комментарий) + "'
			|     ,'" + (СтрокаТЗ.Компьютер) + "'
			|     ,'" + (СтрокаТЗ.Метаданные) + "'
			|     ,'" + Формат(СтрокаТЗ.ОсновнойIPПорт, "ЧН=0; ЧГ=0") + "'
			|     ,'" + (СтрокаТЗ.Пользователь) + "'
			|     ,'" + (СтрокаТЗ.ПредставлениеДанных) + "'
			|     ,'" + (СтрокаТЗ.ПредставлениеМетаданных) + "'
			|     ,'" + (СтрокаТЗ.ПредставлениеПриложения) + "'
			|     ,'" + (СтрокаТЗ.ПредставлениеСобытия) + "'
			|     ,'" + (СтрокаТЗ.РабочийСервер) + "'
			|     ,'" + Формат(СтрокаТЗ.Сеанс, "ЧН=0; ЧГ=0") + "'
			|     ,'" + (СтрокаТЗ.Событие) + "'
			|     ,'" + Формат(СтрокаТЗ.Соединение, "ЧН=0; ЧГ=0") + "'
			|     ,'" + Формат(СтатусТранзакции, "ЧН=0; ЧГ=0") + "'
			|     ,'" + (СтрокаТЗ.Транзакция) + "'
			|     ,'" + Формат(Уровень, "ЧН=0; ЧГ=0") + "'
			|     ,'" + (ID_Dannye) + "'
			|     ,'" + (ID_Polzovatel) + "'
			|     ,'" + (Vid__Dannye) + "'
			|     ,'" + (Imya_Dannye) + "')";
			
			Сч = Сч + 1;
			
		КонецЦикла;	
		
		Если Сч > 0 Тогда
			
			ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
			ПодключениеКМагазину.CommitTrans();
			
		КонецЕсли;	
		
		
		Если ЗначениеЗаполнено(ПоследняяДатаЗаписи) Тогда
			
			Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
			Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЖурналаРегистрации");
			Запись.Прочитать();
			Если Запись.Количество() = 0 Тогда
				НоваяЗапись = Запись.Добавить();
			Иначе
				НоваяЗапись = Запись[0];
			КонецЕсли;
			НоваяЗапись.Ключ = "ПоследняяЗагрузкаЖурналаРегистрации";
			НоваяЗапись.Значение = ДатаВСтроку(ПоследняяДатаЗаписи);
			
			Запись.Записать();
			
		КонецЕсли;
		
			
	КонецЦикла;
	
	//Попытка
	//	УдалитьФайлы(ПутьККопииЖурнала) 
	//Исключение
	//    Сообщить(ОписаниеОшибки());
	//КонецПопытки;
			
КонецПроцедуры

Функция ДатаВСтроку(Д) Экспорт 
	Возврат Формат(Год(Д), "ЧГ=") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + ЛидирующийНоль(Час(Д)) + ЛидирующийНоль(Минута(Д)) + ЛидирующийНоль(Секунда(Д));
КонецФункции

Функция ЛидирующийНоль(зн)
	Если Зн < 10 Тогда
		Возврат "0"+Зн;
	Иначе
		Возврат Зн;
	КонецЕсли;	
КонецФункции

Функция ВернутьДатуВЧисло(Дата) Экспорт 
	
	Возврат  Формат((Дата - Дата(1,1,1))*10000 - 108000000,"ЧГ=0" )
	
КонецФункции	

Процедура ЭкспортВоВнешнийЖурналРегистрации() Экспорт
	
	Попытка
		
		//ххх
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЖурналаРегистрации");
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
			ДатаПрошлойЗагрузки = Дата(2017,07,01);
		Иначе
			НоваяЗапись = Запись[0];
			Попытка
				ДатаПрошлойЗагрузки = Вычислить("'" + НоваяЗапись.Значение + "'");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		//ххх
		//ТЗ = Новый ТаблицаЗначений;
		//ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		//ххх
		ТекущаяДатаНачалаОтбора = ДатаПрошлойЗагрузки;
		
		ПоследняяДатаЗаписи = Дата(1,1,1);
		
		//ххх
		//ТекущаяДатаНачалаОтбора = Дата(2017,07,14);
		
		ФайлЖурналаРегистрации = Константы.ПутьКЖурналуРегистрации1с.Получить();
		
		
		//ххх
		//Пока ТекущаяДатаНачалаОтбора <= Дата(2017,07,15)  Цикл  
		Пока ТекущаяДатаНачалаОтбора <= ТекущаяДата()  Цикл  
			
			ДатаНачала =  Формат((ТекущаяДатаНачалаОтбора - Дата(1,1,1))*10000 - 108000000,"ЧГ=0" );
			ДатаОкончания =  Формат((ТекущаяДатаНачалаОтбора - Дата(1,1,1))*10000 - 108000000 + 60*60*10000,"ЧГ=0" );
			
			//ххх
			//ТекстовыйДокумент.ДобавитьСтроку("" + ТекущаяДата() + " .ТекущаяДатаНачалаОтбора " + ТекущаяДатаНачалаОтбора);
			
			
			
			#Область Запрос
			ТекстЗапроса =
			" 
			|SELECT  
			|EventLog.rowID,
			|EventLog.date as date,
			|EventLog.severity, 
			|CASE 
			|WHEN EventLog.date = 0 
			|THEN '0001-01-01 00:00:00' 
			|ELSE 
			|datetime((EventLog.date-2*60*60*10000)/10000-62135578800,'unixepoch') 
			|END as DatePresentation,
			|EventLog.connectID,
			|EventLog.session,
			|EventLog.transactionStatus,
			|CASE 
			|WHEN EventLog.transactionDate = 0 
			|THEN '0001-01-01 00:00:00' 
			|ELSE 
			|datetime((EventLog.transactionDate-2*60*60*10000)/10000-62135578800,'unixepoch') 
			|END as [transactionDatePresentation],
			|EventLog.transactionID,
			|EventLog.userCode,
			|UserCodes.name [UserName],
			|UserCodes.uuid [UserUuid],
			|EventLog.computerCode,
			|ComputerCodes.name [ComputerName],
			|EventLog.appCode,
			|AppCodes.name [AppName],
			|EventLog.eventCode,
			|EventCodes.name [EventName],
			|EventLog.comment,
			|EventLog.metadataCodes,
			|MetadataCodes.name [MetadataName],
			|EventLog.sessionDataSplitCode,
			|EventLog.dataType,
			|EventLog.data,
			|EventLog.dataPresentation,
			|EventLog.workServerCode,
			|EventLog.primaryPortCode,
			|PrimaryPortCodes.name [PrimaryPortName],
			|EventLog.secondaryPortCode,
			|SecondaryPortCodes.name [secondaryPortName]
			|FROM         EventLog 
			|				  LEFT JOIN
			|   	          	UserCodes ON  EventLog.userCode = userCodes.Code 
			|				LEFT JOIN
			|           		ComputerCodes ON  EventLog.computerCode = ComputerCodes.Code 					  
			|				LEFT JOIN
			|                   AppCodes ON  EventLog.appCode = AppCodes.Code 
			|				LEFT JOIN
			|                   EventCodes ON  EventLog.eventCode = EventCodes.Code 
			|				LEFT JOIN
			|					EventLogMetadata ON  EventLog.rowID = EventLogMetadata.EventlogID 	
			|				LEFT JOIN
			|					MetadataCodes ON  EventLogMetadata.metadataCode = MetadataCodes.code 	
			|				LEFT JOIN
			|               	PrimaryPortCodes ON  EventLog.primaryPortCode = PrimaryPortCodes.Code
			|				LEFT JOIN
			|               SecondaryPortCodes ON  EventLog.secondaryPortCode = SecondaryPortCodes.Code
			|					  
			|WHERE
			|EventCodes.name <> '""_$Access$_.Access""' and
			|EventCodes.name <> '""_$Data$_.DeletePredefinedData""' and
			|EventCodes.name <> '""_$Data$_.NewPredefinedData""' and
			|EventCodes.name <> '""_$Data$_.PredefinedDataInitialization""' and
			|EventCodes.name <> '""_$Data$_.PredefinedDataInitializationDataNotFound""' and
			|EventCodes.name <> '""_$Data$_.SetPredefinedDataInitialization""' and
			|EventCodes.name <> '""_$Data$_.SetStandardODataInterfaceContent""' and
			|EventCodes.name <> '""_$Data$_.TotalsMaxPeriodUpdate""' and
			|EventCodes.name <> '""_$Data$_.TotalsMinPeriodUpdate""' and
			|EventCodes.name <> '""_$Data$_.UpdatePredefinedData""' and
			|EventCodes.name <> '""_$InfoBase$_.ConfigExtensionUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.ConfigUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.DBConfigBackgroundUpdateCancel""' and
			|EventCodes.name <> '""_$InfoBase$_.DBConfigBackgroundUpdateFinish""' and
			|EventCodes.name <> '""_$InfoBase$_.DBConfigBackgroundUpdateResume""' and
			|EventCodes.name <> '""_$InfoBase$_.DBConfigBackgroundUpdateStart""' and
			|EventCodes.name <> '""_$InfoBase$_.DBConfigBackgroundUpdateSuspend""' and
			|EventCodes.name <> '""_$InfoBase$_.DBConfigExtensionUpdate""' and
			//|EventCodes.name <> '""_$InfoBase$_.DBConfigUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.EraseData""' and
			|EventCodes.name <> '""_$InfoBase$_.EventLogSettingsUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.InfoBaseAdmParamsUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.MasterNodeUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.PredefinedDataUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.RegionalSettingsUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.SetPredefinedDataUpdate""' and
			|EventCodes.name <> '""_$InfoBase$_.TARImportant""' and
			|EventCodes.name <> '""_$InfoBase$_.TARInfo""' and
			|EventCodes.name <> '""_$InfoBase$_.TARMess""' and
			|EventCodes.name <> '""_$Job$_.Start""' and
			|EventCodes.name <> '""_$Job$_.Succeed""' and
			|EventCodes.name <> '""_$Session$_.Authentication""' and
			|EventCodes.name <> '""_$Session$_.AuthenticationError""' and
			|EventCodes.name <> '""_$Session$_.ConfigExtensionApplyError""' and
			|EventCodes.name <> '""_$Session$_.Finish""' and
			|EventCodes.name <> '""_$Session$_.Start""' and
			|EventCodes.name <> '""_$User$_.Delete""' and
			|EventCodes.name <> '""_$Transaction$_.Begin""' and
			|EventCodes.name <> '""_$Transaction$_.Commit""' and
			|EventCodes.name <> '""_$User$_.Update ""'
			|and EventLog.date >= " + ДатаНачала + "
			|and EventLog.date < " + ДатаОкончания + "
			|ORDER BY rowID ";
			
			#КонецОбласти
			
			
			
			СтрокаСоединения = "DRIVER=SQLite3 ODBC Driver;Database=" + ФайлЖурналаРегистрации + ";BigInt=1;";
			
			ПодключениеКМагазину = Новый COMОбъект("ADODB.Connection"); 
			ПодключениеКМагазину.ConnectionTimeOut = 120;
			ПодключениеКМагазину.CursorLocation = 3;
			ПодключениеКМагазину.Open(СтрокаСоединения);
			
			RS = ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину);
			СписокКолонокДанныхКОнтрагентов = "rowID, date_Ч, DatePresentation, severity, connectID, session, transactionStatus, transactionDatePresentation,transactionID, userCode,UserName, UserUuid, computerCode,ComputerName,appCode,AppName,eventCode,EventName,comment,metadataCodes,MetadataName,sessionDataSplitCode,dataType,data,dataPresentation,workServerCode,primaryPortCode,PrimaryPortName,secondaryPortCode,secondaryPortName";
			Данные = СоздатьТаблицу(RS, СписокКолонокДанныхКОнтрагентов);
			
			APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.APDEX_КлючевыеОперации.ЭкпортВЖурналРегистрации);
			
			ТекстЗапроса = "";
			
			ПодключениеКМагазину = Новый COMОбъект("ADODB.Connection"); 
			ПодключениеКМагазину.ConnectionTimeOut = 120;
			ПодключениеКМагазину.CursorLocation = 3;
			//ххх
			ПодключениеКМагазину.Open(Константы.СтрокаПодключенияКЖурналуРегистрации.Получить());
			//ПодключениеКМагазину.Open("Provider=SQLOLEDB.1;Password=losir7_^534qtg;Persist Security Info=True;User ID=sa;Initial Catalog=event_log_1c;Data Source=DB-OTLADKA");
			ПодключениеКМагазину.BeginTrans();
			
			Сч = 0;  
			
			//ххх
			//ТекстовыйДокумент.ДобавитьСтроку("" + ТекущаяДата() + " .Обработка строк. Количество " + Данные.Количество());
			
			МассивПараметров = Новый Массив;
			
			Для Каждого СтрокаТЗ Из Данные Цикл  
				Если Сч > 1000 Тогда
					
					ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину, МассивПараметров);
					
					ПоследняяДатаЗаписиСтр = СтрЗаменить(СтрокаТЗ.DatePresentation, "-","");
					ПоследняяДатаЗаписиСтр = СтрЗаменить(ПоследняяДатаЗаписиСтр, " ","");
					ПоследняяДатаЗаписиСтр = СтрЗаменить(ПоследняяДатаЗаписиСтр, ":","");
					
					Попытка
						ПоследняяДатаЗаписи = Дата(ПоследняяДатаЗаписиСтр);
					Исключение
					КонецПопытки;
					
					ТекстЗапроса = "";
					Сч = 0;
					МассивПараметров.Очистить();
					
				КонецЕсли;	
				
				
				
				Если СтрДлина(СтрокаТЗ.comment) < 251 Тогда
				
					
					ТекстЗапроса = ТекстЗапроса + "
					|  INSERT INTO [dbo].[event_log]
					|     ([rowID]
					|     ,[date]         
					|     ,[DatePresentation]         
					|     ,[severity]
					|     ,[connectID]
					|     ,[session]
					|     ,[transactionStatus]
					|     ,[transactionDatePresentation]
					|     ,[UserName]
					|     ,[ComputerName]
					|     ,[AppName]
					|     ,[EventName]
					|     ,[comment]
					|     ,[MetadataName]
					|     ,[dataType]
					|     ,[UserUuid]
					|     ,[data] 
					|     ,[dataPresentation])
					|VALUES
					|     ('" + (СтрокаТЗ.rowID) + "'
					|     ,'" + Формат(СтрокаТЗ.date_Ч, "ЧГ=0") + "'
					|     ,'" + (СтрокаТЗ.DatePresentation) + "'
					|     ,'" + (СтрокаТЗ.severity) + "'
					|     ,'" + (СтрокаТЗ.connectID) + "'
					|     ,'" + (СтрокаТЗ.session) + "'
					|     ,'" + (СтрокаТЗ.transactionStatus) + "'
					|     ,'" + (СтрокаТЗ.transactionDatePresentation) + "'
					|     ,'" + (СтрокаТЗ.UserName) + "'
					|     ,'" + (СтрокаТЗ.ComputerName) + "'
					|     ,'" + (СтрокаТЗ.AppName) + "'
					|     ,'" + (СтрокаТЗ.EventName) + "'
					|     ,?
					|     ,'" + (СтрокаТЗ.MetadataName) + "'
					|     ,'" + (СтрокаТЗ.dataType) + "'
					|     ,'" + (СтрокаТЗ.UserUuid) + "'
					|     ,'" + (СтрокаТЗ.data) + "'
					|     ,?)";
					

					
					Если СтрокаТЗ.EventName = """_$InfoBase$_.DBConfigUpdate""" Тогда
						МассивПараметров.Добавить("");
					Иначе 
						МассивПараметров.Добавить("'" + СтрокаТЗ.comment + "'"); 
					КонецЕсли;	
					МассивПараметров.Добавить(СтрокаТЗ.dataPresentation);

					Сч = Сч + 1;
				
				КонецЕсли;  //  < 251
				
				
				
			КонецЦикла;	
			
			Если Сч > 0 Тогда
				
				ПоследняяДатаЗаписиСтр = СтрЗаменить(СтрокаТЗ.DatePresentation, "-","");
				ПоследняяДатаЗаписиСтр = СтрЗаменить(ПоследняяДатаЗаписиСтр, " ","");
				ПоследняяДатаЗаписиСтр = СтрЗаменить(ПоследняяДатаЗаписиСтр, ":","");
				
				Попытка
					ПоследняяДатаЗаписи = Дата(ПоследняяДатаЗаписиСтр);
				Исключение
				КонецПопытки;
				
				ЗапросКИнтернетМагазину(ТекстЗапроса, ПодключениеКМагазину, МассивПараметров);
				
			КонецЕсли;	
			
			ПодключениеКМагазину.CommitTrans();
			
			APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.APDEX_КлючевыеОперации.ЭкпортВЖурналРегистрации, "ТекущаяДатаНачалаОтбора " + ТекущаяДатаНачалаОтбора + " . Количество: " + Данные.Количество());
			
			ТекущаяДатаНачалаОтбора = ТекущаяДатаНачалаОтбора + 60*60;
						
			Если ЗначениеЗаполнено(ПоследняяДатаЗаписи) Тогда
				
				//ххх
				Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
				Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЖурналаРегистрации");
				Запись.Прочитать();
				Если Запись.Количество() = 0 Тогда
					НоваяЗапись = Запись.Добавить();
				Иначе
					НоваяЗапись = Запись[0];
				КонецЕсли;
				НоваяЗапись.Ключ = "ПоследняяЗагрузкаЖурналаРегистрации";
				НоваяЗапись.Значение = ДатаВСтроку(ПоследняяДатаЗаписи);
				
				Запись.Записать();
				
				Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
				Запись.Отбор.Ключ.Установить("ПоследняяЗагрузкаЖурналаРегистрацииВремяЗагрузки");
				Запись.Прочитать();
				Если Запись.Количество() = 0 Тогда
					НоваяЗапись = Запись.Добавить();
				Иначе
					НоваяЗапись = Запись[0];
				КонецЕсли;
				НоваяЗапись.Ключ = "ПоследняяЗагрузкаЖурналаРегистрацииВремяЗагрузки";
				НоваяЗапись.Значение = ДатаВСтроку(ТекущаяДата());
				
				Запись.Записать();

				
				//ххх
				//ТекстовыйДокумент.Записать("C:\log1s\Журнал регистрации.log");
				//ТекстовыйДокумент.Прочитать("C:\log1s\Журнал регистрации.log");
				//ТекстовыйДокумент.ДобавитьСтроку("" + ТекущаяДата() + " .ПоследняяЗагрузкаЖурналаРегистрации " + ПоследняяДатаЗаписи);
				
			КонецЕсли;
			
			
		КонецЦикла;
		
	Исключение
		
		
		Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.ЖурналаРегистрации_ОшибкаЭкспорта);
		//Мас = Новый Массив;
		//Мас.Добавить("artur.borisov@strizh-logistic.ru");
		
		
		
		
		Если Мас.Количество() > 0 Тогда
			
			ТекстПисьма = "Описание ошибки: " + Символы.ПС + ОписаниеОшибки();
			
			lem.ОтправитьСообщение(Мас, "Журнала регистрации - ошибка экспорта", ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст); 		
			
			
			
			ТекстПараметры = "Параметры: ";
			Для каждого Пар Из МассивПараметров Цикл	
				ТекстПараметры = ТекстПараметры + Символы.ПС + Пар; 			
			КонецЦикла;			
			lem.ОтправитьСообщение(Мас, "Подробности", ТекстПараметры, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст);
			
		КонецЕсли;
		
	КонецПопытки;
	
	//ххх
	//ТекстовыйДокумент.Записать("C:\log1s\Журнал регистрации.log");
	
	//Попытка
	//	УдалитьФайлы(ПутьККопииЖурнала) 
	//Исключение
	//    Сообщить(ОписаниеОшибки());
	//КонецПопытки;
			
КонецПроцедуры

Функция СоздатьПодключениеКИнтернетМагазину(Таймаут) Экспорт
	
	ПодключениеКМагазину = Новый COMОбъект("ADODB.Connection"); 
	ПодключениеКМагазину.ConnectionTimeOut = Таймаут;
	ПодключениеКМагазину.CursorLocation = 3;
	
	ФайлЖурналаРегистрации = "C:\log1s\1Cv8.lgd";

	СтрокаСоединения = "DRIVER=SQLite3 ODBC Driver;Database=" + ФайлЖурналаРегистрации + ";BigInt=1;";

	ПодключениеКМагазину.Open(СтрокаСоединения);
	Возврат ПодключениеКМагазину;
	
КонецФункции // СоздатьПодключениеКИнтернетМагазину()

Функция СоздатьТаблицу(RS, СписокКолонок) Экспорт
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		//Попытка
		Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
	//исключение
	//	ВывестиСообщение(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
	//	конецпопытки;
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
			КонецЕсли;
		КонецЦикла;
		Rs.MoveNext()
	КонецЦикла;
	
	Возврат Таб;
КонецФункции


#КонецОбласти

Функция ПолучитьПутьКФайлуЛогаОтказа(ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДополнительныеПараметры = Неопределено Тогда
	
		Возврат "C:\log1s\Отказы\";
		
	Иначе 
		
		Возврат "C:\log1s\" + ДополнительныеПараметры.Каталог + "\";
		
	КонецЕсли;	
	
КонецФункции

Процедура ЗаписатьВФайлЛогаОтказа(Запись, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Попытка
		
		СоздатьКаталог(ПолучитьПутьКФайлуЛогаОтказа(ДополнительныеПараметры));
		
		ИмяФайлаЛога = ПолучитьПутьКФайлуЛогаОтказа(ДополнительныеПараметры) + Формат(ДополнительныеПараметры.НомерПотока) + ".log" ;

	    ЛогФайл = Новый("ТекстовыйДокумент");
		
		Попытка
			ЛогФайл.Прочитать(ИмяФайлаЛога);
		Исключение
		КонецПопытки;	
		ЛогФайл.ДобавитьСтроку(Строка(ДополнительныеПараметры.НомерПотока) +  " " + ТекущаяДата() + " " + Запись);
		ЛогФайл.Записать(ИмяФайлаЛога);
		
	Исключение
		
		//Сообщить(ОписаниеОшибки());
		
	КонецПопытки;	
	
КонецПроцедуры	

Функция ВернутьСообщенияИзЛогаОтказа(ДополнительныеПараметры) Экспорт 
	
	Стр = "Читается лог";
	
	Попытка
		
		ИмяФайлаЛога = ПолучитьПутьКФайлуЛогаОтказа(ДополнительныеПараметры) + ДополнительныеПараметры.НомерПотока + ".log" ;
		
		ЛогФайл = Новый("ТекстовыйДокумент");
		
		ФайлЛога = Новый Файл(ИмяФайлаЛога);
		
		Если ФайлЛога.Существует() Тогда
			ЛогФайл.Прочитать(ИмяФайлаЛога);
			Стр = ЛогФайл.ПолучитьТекст(); 
			ЛогФайл = Неопределено;
		КонецЕсли;
		
	Исключение
		
		Возврат "Нет лога";
		
	КонецПопытки;	
	
	Попытка
		
		ЛогФайл = Новый("ТекстовыйДокумент");
		ЛогФайл.Записать(ИмяФайлаЛога);
		
	Исключение
		
	КонецПопытки;	
	
	Возврат Стр;
	
КонецФункции	

Функция ДобавитьНули(Значение, НужнаяДлинаЗначения) Экспорт   
	
    Значение = СтрЗаменить(Формат(Значение, "ЧГ="), " ", "");
    НадоНулей = НужнаяДлинаЗначения - СтрДлина(Значение);
    ВедущиеНули = Формат(0,"ЧЦ="+НадоНулей+";ЧН=; ЧВН=; ЧГ=0");
    Возврат ВедущиеНули + Значение;
   
КонецФункции

Функция ДобавитьПробелыПосле(Значение, НужнаяДлинаЗначения) Экспорт   
	
    Значение = СтрЗаменить(Формат(Значение, "ЧГ="), " ", "");
    НадоНулей = НужнаяДлинаЗначения - СтрДлина(Значение);
    ВедущиеНули = "";
	
	Если НадоНулей <= 0 Тогда
		
		Возврат Значение;
		
	КонецЕсли;	
	
	Для Сч = 1 По НадоНулей Цикл 
		
		ВедущиеНули = ВедущиеНули + " ";
		
	КонецЦикла;	
	
	Возврат Значение + ВедущиеНули;
   
КонецФункции

//+++ БАО 22.08.2017 №1730

Функция ПолучитьМассивТерминаловДоступныхПользователю() Экспорт 
	
	ТерминалСпис = Новый СписокЗначений;
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиПользователей.Пользователь КАК Пользователь,
	                      |	НастройкиПользователей.Настройка КАК Настройка,
	                      |	НастройкиПользователей.Значение КАК Значение
	                      |ИЗ
	                      |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                      |ГДЕ
	                      |	НастройкиПользователей.Пользователь = &Пользователь
	                      |	И НастройкиПользователей.Настройка = &Настройка");
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ТерминалДоставки);
	Рез = Запрос.Выполнить().Выбрать();
	
		
	Если Рез.Следующий() Тогда		
		Если Рез.Значение = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ИначеЕсли Рез.Значение = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		Иначе
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
			ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		КонецЕсли;	
	Иначе		
		ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		ТерминалСпис.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());	
	КонецЕсли;
	
	Возврат ТерминалСпис;
	
КонецФункции	

Функция ДобавитьОтборДинСпискаПоДоступнымПользователюТерминалам(Список, Поле = "") Экспорт 
	
	Если Поле = "" Тогда
		Поле = "ТерминалДоставки"
	КонецЕсли;	
	//
	//Отбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле); 
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке; 
	//Отбор.Использование = Истина; 
	//Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
	ПЗ = ПолучитьМассивТерминаловДоступныхПользователю();
	Исп = Истина;
	ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(Список.Отбор,
	Поле,
	ПЗ,
	,
	,
	Исп,
	,
	);
	//Отбор.ПравоеЗначение = ПолучитьМассивТерминаловДоступныхПользователю();
	
КонецФункции

Функция ДобавитьОтборСпискаПоДоступнымПользователюТерминалам(ЭтаФорма, Поле= "", ИмяСписка = Неопределено) Экспорт 
	
	Если Поле = "" Тогда
		Поле = "ТерминалДоставки"
	КонецЕсли;	
		
	ЭтаФорма.Отбор[Поле].ВидСравнения = ВидСравнения.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(bao.ПолучитьМассивТерминаловДоступныхПользователю().ВыгрузитьЗначения());
    ЭтаФорма.Отбор[Поле].Значение = СписокЗначений;
    ЭтаФорма.Отбор[Поле].Использование = Истина;
	
	// МАС - 25.08.2017 - № --->> 	
	Если ЭтаФорма.Заголовок = "Реализации товаров и услуг" Или ЗначениеЗаполнено(ИмяСписка) Тогда	
		ЭтаФорма.ЭлементыФормы[ИмяСписка].НастройкаОтбора[Поле].Доступность = Ложь;		
	Иначе	
	// <<--- МАС
		ЭтаФорма.ЭлементыФормы.Список.НастройкаОтбора[Поле].Доступность = Ложь;	
	// МАС - 25.08.2017 - № --->> 
	КонецЕсли;
	// <<--- МАС 
	
	
КонецФункции	

Функция ЭтоДокументДругогоТерминала(Терминал) Экспорт 
	
	Массив = ПолучитьМассивТерминаловДоступныхПользователю();
	
	Для Каждого СтрокаМассива Из Массив Цикл 
		
		Если СтрокаМассива.Значение = Терминал Тогда
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	
	
//--- БАО 22.08.2017 №1730	

Процедура ПроверкаЗагрузкиВоВнешнийЖР() Экспорт
	
	Стр = СтрокаСоединенияИнформационнойБазы();
	
	СпПол = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.ЖурналаРегистрации_ПроверкаРаботы);
	
	Если СпПол.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаНач = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЖурналаРегистрацииВремяЗагрузки");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаНач);
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		Попытка
			ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		Исключение
			lem.ОтправитьСообщение(СпПол, "Проверка загрузки во внешний ЖР. База (" + Стр + ")", "Ошибочное значение даты последней загрузки "+ДатаНач);
		КонецПопытки;
	Иначе
		lem.ОтправитьСообщение(СпПол, "Проверка загрузки во внешний ЖР. База (" + Стр + ")", "Не задана дата последней загрузки  (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ = ПоследняяЗагрузкаЖурналаРегистрации)");
	КонецЕсли;
	
	ПослДата = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗаписаннаяЗагрузкаЖурналаРегистрации");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ПослДата);
	ПослДата = Дата(ПослДата);
	
	
	Если ПослДата <> ДатаЗапроса Тогда
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗаписаннаяЗагрузкаЖурналаРегистрации");
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
		КонецЕсли;
		НоваяЗапись.Ключ = "ПоследняяЗаписаннаяЗагрузкаЖурналаРегистрации";
		НоваяЗапись.Значение = ДатаВСтроку(ДатаЗапроса);
		Попытка
			Запись.Записать();
		Исключение
			lem.ОтправитьСообщение(СпПол, "Проверка загрузки во внешний ЖР. База (" + Стр + ")", "Ошибка обновления границы загрузки во внешний ЖР.");
		КонецПопытки;
	Иначе
		lem.ОтправитьСообщение(СпПол, "Проверка загрузки во внешний ЖР. База (" + Стр + ")", "Не загружаются данный, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
	КонецеСли;
	
КонецПроцедуры
	
	