Функция ВывестиПараметрыОбъекта(объект) Экспорт
	кк = Справочники.Номенклатура.СоздатьЭлемент();
	дд = кк.Метаданные();
	дд = объект.Метаданные();
	Возврат Истина;
КонецФункции

//+++ БАО 05.06.2017 №976 
//---Функция СтрокаПодключенияКИнтернетМагазину()
Функция СтрокаПодключенияКИнтернетМагазину(ЭтоУстановкаПараметраСеанса = Ложь) Экспорт 
	
	Если Не ЭтоУстановкаПараметраСеанса Тогда 
		Возврат ПараметрыСеанса.СтрокаПодключенияКБДФронта;		
	КонецЕсли;
	
//--- БАО 05.06.2017 №976 	
	Если Не ЗначениеЗаполнено(Константы.БазаСД.Получить()) Тогда
		Возврат СокрЛП(Константы.СтрокаПодключенияКБД.Получить()) + "mainshop_test";	
	Иначе
		Возврат  СокрЛП(Константы.СтрокаПодключенияКБД.Получить()) + СокрЛП(Константы.БазаСД.Получить());	
	КонецеСли;	
КонецФункции


Функция ЭтоОшибкаДоступности(ТекстОшибки)
	Если СтрНайти(ТекстОшибки, "Время ожидания истекло") > 0 Или СтрНайти(ТекстОшибки, "Время ожидания запроса истекло") > 0 Или СтрНайти(ТекстОшибки, "Ошибка соединения") > 0 Или СтрНайти(ТекстОшибки, "Общая ошибка сети") > 0 Или СтрНайти(ТекстОшибки, "deadlock") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецеСли;	
КонецФункции	

Функция ЗапросКИнтернетМагазину(ТекстЗапроса, Подключение, Таймаут = 120, ЭтоОбработкаРегламентом = Ложь, КонтекстВызова = "") Экспорт
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Подключение;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandTimeout = Таймаут; // 2 минуты
	Cmd.CommandType = 1;
	
	//Асеев 09.09.2020 (Задача № 4205)>>>
	ИнформацияОКонтексте = ?(КонтекстВызова = "", "", " " + КонтекстВызова);
	//далее по тексту добавлена
	//Асеев 09.09.2020 (Задача № 4205)<<<
	
	ТекВр = ТекущаяДата();
	
	Попытка
		ДС = Cmd.Execute();
	Исключение
		Стр = ОписаниеОшибки();
		Наб = РегистрыСведений.ОшибкиSQL.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ИсточникДанных.Установить(Справочники.ВнешниеИсточникиДанных.БДЗаказов.Ссылка);
		Наб.Отбор.ТипОперации.Установить(Перечисления.ТипыОперацийADO.Execute);
		Нов = Наб.Добавить();
		Нов.ТекстЗапроса = ТекстЗапроса;
		Нов.Ошибка = Стр;
		Нов.Период = ТекВр;
		Нов.ИсточникДанных = Справочники.ВнешниеИсточникиДанных.БДЗаказов.Ссылка;
		Нов.ТипОперации = Перечисления.ТипыОперацийADO.Execute;
		Нов.ОбработкаРегламентом = ЭтоОбработкаРегламентом;
		Если Нов.ОбработкаРегламентом Тогда
			Нов.ДатаОбработкиРегламентом = ТекущаяДата();
		КонецеСли;	
		Нов.ОшибкаСвязанаСДоступностью = ЭтоОшибкаДоступности(Стр);
		Наб.Записать();
		Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			lem.ОтправитьНормальноеСообщениеАдминамИАнатолию("Ошибка SQL 1 (основная БД (р))" + ИнформацияОКонтексте, Стр + Символы.ПС + ТекстЗапроса);
		КонецеСли;	
		Возврат Неопределено;
	КонецПопытки;
	Попытка
		Если ДС <> Неопределено Тогда
			пока ДС.State()=0 цикл 
				ДС = ДС.NextRecordset();
				Если ДС = Неопределено Тогда
					Прервать;
				КонецеСли;	
			конеццикла;
		КонецеСли;
	Исключение
		Стр = ОписаниеОшибки();
		Наб = РегистрыСведений.ОшибкиSQL.СоздатьНаборЗаписей();
		Наб.Отбор.ИсточникДанных.Установить(Справочники.ВнешниеИсточникиДанных.БДЗаказов.Ссылка);
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ТипОперации.Установить(Перечисления.ТипыОперацийADO.Execute);
		Нов = Наб.Добавить();
		Нов.ТекстЗапроса = ТекстЗапроса;
		Нов.Ошибка = Стр;
		Нов.ИсточникДанных = Справочники.ВнешниеИсточникиДанных.БДЗаказов.Ссылка;
		Нов.Период = ТекВр;
		Нов.ТипОперации = Перечисления.ТипыОперацийADO.Execute;
		Нов.ОбработкаРегламентом = ЭтоОбработкаРегламентом;
		Если Нов.ОбработкаРегламентом Тогда
			Нов.ДатаОбработкиРегламентом = ТекущаяДата();
		КонецеСли;	
		Нов.ОшибкаСвязанаСДоступностью = ЭтоОшибкаДоступности(Стр);
		Наб.Записать();
		Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			lem.ОтправитьНормальноеСообщениеАдминамИАнатолию("Ошибка SQL 2 (основная БД (р))" + ИнформацияОКонтексте, Стр + Символы.ПС + ТекстЗапроса);
		КонецеСли;	
		Возврат Неопределено;
	КонецПопытки;
	Возврат ДС;
КонецФункции // ЗапросКИнтернетМагазину()

Функция СоздатьПодключениеКИнтернетМагазину(Таймаут = 120) Экспорт
	
	ПодключениеКМагазину = Новый COMОбъект("ADODB.Connection"); 
	ПодключениеКМагазину.ConnectionTimeOut = Таймаут;
	ПодключениеКМагазину.CursorLocation = 3;
	ПодключениеКМагазину.Open(СтрокаПодключенияКИнтернетМагазину());
	Возврат ПодключениеКМагазину;
	
КонецФункции // СоздатьПодключениеКИнтернетМагазину()

Процедура ОтключитьсяОтADO(Соединение) Экспорт
	ТекВр = ТекущаяДата();
	Попытка
		Соединение.Close();
	Исключение
		Стр = ОписаниеОшибки();
		ТекстЗапроса = "закрытие соединения";
		Наб = РегистрыСведений.ОшибкиSQL.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(ТекВр);
		Наб.Отбор.ИсточникДанных.Установить(Справочники.ВнешниеИсточникиДанных.БДЗаказов.Ссылка);
		Наб.Отбор.ТипОперации.Установить(Перечисления.ТипыОперацийADO.Close);
		Нов = Наб.Добавить();
		Нов.ТекстЗапроса = ТекстЗапроса;
		Нов.Ошибка = Стр;
		Нов.Период = ТекВр;
		Нов.ИсточникДанных = Справочники.ВнешниеИсточникиДанных.БДЗаказов.Ссылка;
		Нов.ТипОперации = Перечисления.ТипыОперацийADO.Close;
		Наб.Записать();
		Если Не ПараметрыСеанса.ЭтоТестоваяСреда Тогда
			lem.ОтправитьНормальноеСообщениеАдминам("Ошибка SQL 1 (основная БД , закрытие соединения)", Стр + Символы.ПС + ТекстЗапроса);
		КонецеСли;	
	КонецПопытки;
КонецПроцедуры



Функция ДатаВSQL(Д, ЭтоКонец) Экспорт
	Возврат Формат(Год(Д),"ЧГ=0") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + " " +
			ЛидирующийНоль(Час(Д)) + ":" + ЛидирующийНоль(Минута(Д)) + ":" + ЛидирующийНоль(Секунда(Д)) +
			?(ЭтоКонец, ".998", "");
КонецФункции

Функция ЛидирующийНоль(зн) Экспорт
	Если Зн < 10 Тогда
		Возврат "0"+Зн;
	Иначе
		Возврат Зн;
	КонецЕсли;	
КонецФункции

Функция СоздатьТаблицу(RS, СписокКолонок) Экспорт
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
			КонецЕсли;
		КонецЦикла;
		Rs.MoveNext()
	КонецЦикла;
	
	Возврат Таб;
КонецФункции

Функция ПолучитьТоварЧерезАдминку(Артикул, КодПартнера, Наименование) Экспорт
	Если СокрЛП(Артикул) = "" Тогда
		#Если Клиент Тогда
			Сообщить("Не указан артикул товара", СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	ИДПартнера = "";
	Если ТипЗнч(КодПартнера) = Тип("Строка") Тогда
		Родитель = Справочники.Номенклатура.НайтиПоКоду("Shop_" + КодПартнера);
		ИДПартнера = КодПартнера;
	ИначеЕсли ТипЗнч(КодПартнера) = Тип("Число") Тогда
		ИДПартнера = Формат(КодПартнера, "ЧН=0; ЧГ=");
		Родитель = Справочники.Номенклатура.НайтиПоКоду("Shop_" + ИДПартнера);
	ИначеЕсли ТипЗнч(КодПартнера) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Лев(КодПартнера.Код, 5) = "Shop_" Тогда
			Родитель = Справочники.Номенклатура.НайтиПоКоду(КодПартнера.Код);
			ИДПартнера = СокрЛП(Сред(КодПартнера.Код, 6));
		Иначе
			#Если Клиент Тогда
				Сообщить("Неправильный код у партнера", СтатусСообщения.Внимание);
			#КонецЕсли
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	Иначе
		#Если Клиент Тогда
			Сообщить("Не указан код партнера", СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Если Родитель = Справочники.Номенклатура.ПустаяСсылка() Тогда
		#Если Клиент Тогда
			Сообщить("Не найден партнер", СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Результат = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул, Родитель);
	Если Результат <> Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Наименование) Или ТипЗнч(Наименование) <> Тип("Строка") Тогда
		#Если Клиент Тогда
			Сообщить("Не задано наименование номенклатуры для её создания в админке", СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Попытка
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
	Исключение
		#Если Клиент Тогда
			Сообщить("Не удалось подключиться к админке: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	Попытка 
		РезультатЗапроса = ЗапросКИнтернетМагазину("
		|pb_UpdateProduct
		|	@internetShopID	= "  + ИДПартнера + "
		|	,@name			= '" + Наименование + "'
		|	,@sku			= '" + Артикул + "'
		|	,@dimention		= 0 
		|	,@cost			= 0
		|	,@code			= '" + Артикул + "'
		|	,@mass			= ''
		|", ПодключениеКМагазину);
		
		//exec [dbo].[pb_AddItemBase] 
		//@internetshopID = 167, 
		//@name = 'Чехол Artske uniq.case для iPhone 5',
		//@sku = 'UC-W10-IP5',
		//@dimention = 0,
		//@cost = 0,
		//@code = 'UC-W10-IP5',
		//@mass = ''
		КодТовара = РезультатЗапроса.Fields("productid").Value;
	Исключение
		#Если Клиент Тогда
			Сообщить("Ошибка выгрузки данных о товаре: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	Попытка
		RS = ЗапросКИнтернетМагазину("
		|SELECT
		|	S.skuId                         AS skuId,
		|	P.internetShopId                AS Shop,
		|	ISNULL(c.name4adding, '') + ' ' + ISNULL(b.name, '') + ' ' + p.name AS Name,
		|	P.code AS Articul
		|FROM
		|	product          P   (NOLOCK)
		|LEFT JOIN
		|	brand            B   (NOLOCK) ON B.brandId = P.brandId         AND B.brandID != 170 
		|LEFT JOIN
		|	objectInCategory OIC (NOLOCK) ON P.productId = OIC.objectId    AND OIC.objectTypeId = 2
		|LEFT JOIN
		|	category         C   (NOLOCK) ON C.categoryId = OIC.CategoryId
		|LEFT JOIN
        //Серегин М.В. 25.08.2015 16:47:12 objType
		|	sku              S   (NOLOCK) ON P.productId = S.productId AND s.objType = 1  
		|WHERE
		|	P.productId = '" + Формат(КодТовара, "ЧН=0; ЧГ=") + "'
		|", ПодключениеКМагазину);
		
		Таб = СоздатьТаблицу(RS, "skuId_Ч, Name, Articul, Shop_Ч");
		RS=0;
	Исключение
		#Если Клиент Тогда
			Сообщить("Ошибка чтения данных о товаре: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	Если Таб.Количество() = 0 Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	стр = Таб[0];
	Штуки = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");      // шт.
	ВидНоменклатуры =  Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001"); // Товар
	
	Товар = Справочники.Номенклатура.НайтиПоКоду(Формат(стр.skuId_Ч, "ЧН=0; ЧГ="));
	Если Товар = Справочники.Номенклатура.ПустаяСсылка() Тогда
		ТекТовар = Справочники.Номенклатура.СоздатьЭлемент();
	Иначе
		Возврат Товар;
	КонецЕсли;
	
	ТекТовар.Родитель                = Родитель;
	ТекТовар.Наименование            = стр.Name;
	ТекТовар.НаименованиеПолное      = стр.Name;
	ТекТовар.Код                     = Формат(стр.skuId_Ч, "ЧН=0; ЧГ=");
	ТекТовар.БазоваяЕдиницаИзмерения = Штуки;
	ТекТовар.ВидНоменклатуры         = ВидНоменклатуры;
	ТекТовар.Артикул				 = стр.articul;
	ТекТовар.СтавкаНДС               = Перечисления.СтавкиНДС.НДС18; // ++++++++++++++++++++++++++++++++++++++
	ТекТовар.ВестиУчетПоСериям       = Ложь;
	
	Попытка
		ТекТовар.Записать();
		#Если Клиент Тогда
			Сообщить("   +++ Записан новый товар: "+ ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")");
		#КонецЕсли
	Исключение
		#Если Клиент Тогда
			Сообщить("!!!Ошибка записи нового товара: " + ТекТовар.НаименованиеПолное + " (код сайта: " + СокрЛП(ТекТовар.Код) + ")" + Символы.ПС + ОписаниеОшибки());
		#КонецЕсли
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	// Записываем единицу хранения остатков и единицу для отчетов
	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, ТекТовар.Ссылка);
	Если ВыборкаЕдиниц.Следующий() Тогда
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
	Иначе
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(ТекТовар.БазоваяЕдиницаИзмерения);
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = ТекТовар.БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = ТекТовар.Ссылка;
		
		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		КонецПопытки;
		
		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
	КонецЕсли;
	
	ТекТовар.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
	ТекТовар.ЕдиницаДляОтчетов       = НайденнаяЕдиница;
	Попытка
		ТекТовар.Записать();
	Исключение
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	Возврат ТекТовар.Ссылка;
	
КонецФункции

Функция ПолучитьРейсыНаДату(ДатаПланирования) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.БизнесПроцесс.Транспорт КАК Транспорт,
	               |	Задачи.БизнесПроцесс.Водитель КАК Водитель,
	               |	Задачи.БизнесПроцесс.Экспедитор КАК Экспедитор
	               |ИЗ
	               |	Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(, НЕ Выполнена) КАК Задачи
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(Задачи.БизнесПроцесс.ДатаНачала, ДЕНЬ) = &ДатаПланирования";
	
	Запрос.УстановитьПараметр("ДатаПланирования",ДатаПланирования);
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции


