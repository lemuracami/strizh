// Процедуры получения объектов ИС и УТЛ по их соответстиям в регистрах сведений
//////////////////////////////////////////////////

Функция ПолучитьОбъектИС(ИсходныйОбъект) Экспорт
	//Исходный объект - объект из УТЛ
	МетаданныеОбъекта = ИсходныйОбъект.Метаданные();
	
	СоответствиеИменОбъектов = ПолучитьСоответствиеИменОбъектов("нова");
	СтруктураИмен = СоответствиеИменОбъектов.Получить(МетаданныеОбъекта.Имя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	   |	новаСоответствиеОбъектов."+СтруктураИмен.ИмяОбъектаИС+" КАК ОбъектИС
	   |ИЗ
	   |	РегистрСведений."+СтруктураИмен.ИмяРегистра+" КАК новаСоответствиеОбъектов
	   |ГДЕ
	   |	новаСоответствиеОбъектов."+СтруктураИмен.ИмяОбъектаУТЛ+" = &ОбъектПараметр";
				   
	Запрос.УстановитьПараметр("ОбъектПараметр", ИсходныйОбъект);			   
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОбъектИС;
	Иначе
		Возврат Справочники[СтруктураИмен.ИмяМетаданныхИС].ПустаяСсылка();
	КонецЕсли;

КонецФункции	

Функция ПолучитьОбъектУТЛ(ИсходныйОбъект) Экспорт
	//Исходный объект - объект из ИС
	МетаданныеОбъекта = ИсходныйОбъект.Метаданные();
	
	СоответствиеИменОбъектов = ПолучитьСоответствиеИменОбъектов();
	СтруктураИмен = СоответствиеИменОбъектов.Получить(МетаданныеОбъекта.Имя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	   |	новаСоответствиеОбъектов."+СтруктураИмен.ИмяОбъектаУТЛ+" КАК ОбъектУТЛ
	   |ИЗ
	   |	РегистрСведений."+СтруктураИмен.ИмяРегистра+" КАК новаСоответствиеОбъектов
	   |ГДЕ
	   |	новаСоответствиеОбъектов."+СтруктураИмен.ИмяОбъектаИС+" = &ОбъектПараметр";
				   
	Запрос.УстановитьПараметр("ОбъектПараметр", ИсходныйОбъект);			   
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОбъектУТЛ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции


//Процедуры записи соответствий объектов УТ и УТЛ
//////////////////////////////////////////////////

Функция ПолучитьСоответствиеИменОбъектов(Префикс="") Экспорт
	СтруктураКонтрагент  	= Новый Структура("ИмяРегистра, ИмяОбъектаИС, ИмяОбъектаУТЛ, ИмяМетаданныхИС, ИмяМетаданныхУТЛ",
										 	  "новаСоответствиеКонтрагентов", "Контрагент", "новаКонтрагент", "Контрагенты", "новаКонтрагенты");	
	
	СтруктураСклад		 	= Новый Структура("ИмяРегистра, ИмяОбъектаИС, ИмяОбъектаУТЛ, ИмяМетаданныхИС, ИмяМетаданныхУТЛ",
										   	  "новаСоответствиеСкладов", "Склад", "новаСклад", "Склады","новаСклады");
											  
	СтруктураНоменклатура	= Новый Структура("ИмяРегистра, ИмяОбъектаИС, ИмяОбъектаУТЛ, ИмяМетаданныхИС, ИмяМетаданныхУТЛ",
										      "новаСоответствиеНоменклатуры", "Номенклатура", "новаНоменклатура", "Номенклатура","новаНоменклатура");
										   
	СтруктураВалюта			= Новый Структура("ИмяРегистра, ИмяОбъектаИС, ИмяОбъектаУТЛ, ИмяМетаданныхИС, ИмяМетаданныхУТЛ",
										      "новаСоответствиеВалют", "Валюта", "новаВалюта", "Валюты","новаВалюты");
										   
	СтруктураФизЛицо		= Новый Структура("ИмяРегистра, ИмяОбъектаИС, ИмяОбъектаУТЛ, ИмяМетаданныхИС, ИмяМетаданныхУТЛ",
										      "новаСоответствиеФизЛиц", "ФизЛицо", "новаФизЛицо", "ФизическиеЛица","новаФизическиеЛица");
											  
	СтруктураПользователь	= Новый Структура("ИмяРегистра, ИмяОбъектаИС, ИмяОбъектаУТЛ, ИмяМетаданныхИС, ИмяМетаданныхУТЛ",
										      "новаСоответствиеПользователей", "Пользователь", "новаПользователь", "Пользователи", "новаПользователи");
										   
	СтруктураЕдИзмерения	= Новый Структура("ИмяРегистра, ИмяОбъектаИС, ИмяОбъектаУТЛ, ИмяМетаданныхИС, ИмяМетаданныхУТЛ",
										      "новаСоответствиеЕдиницИзмерения", "ЕдиницаИзмерения", "новаЕдиницаИзмерения", "ЕдиницыИзмерения", "новаЕдиницыИзмерения");
										   
	СтруктураОрганизация	= Новый Структура("ИмяРегистра, ИмяОбъектаИС, ИмяОбъектаУТЛ, ИмяМетаданныхИС, ИмяМетаданныхУТЛ",
										      "новаСоответствиеОрганизаций", "Организация", "новаОрганизация", "Организации", "новаОрганизации");	
	
	СоответствиеИменОбъектов = Новый Соответствие;
	
	СоответствиеИменОбъектов.Вставить(Префикс+"Контрагенты", СтруктураКонтрагент);
	
	СоответствиеИменОбъектов.Вставить(Префикс+"Склады", СтруктураСклад);
	СоответствиеИменОбъектов.Вставить(Префикс+"Номенклатура", СтруктураНоменклатура);
	СоответствиеИменОбъектов.Вставить(Префикс+"Валюты", СтруктураВалюта);
	СоответствиеИменОбъектов.Вставить(Префикс+"ФизическиеЛица", СтруктураФизЛицо);
	СоответствиеИменОбъектов.Вставить(Префикс+"Пользователи", СтруктураПользователь);
	СоответствиеИменОбъектов.Вставить(Префикс+"ЕдиницыИзмерения", СтруктураЕдИзмерения);
	СоответствиеИменОбъектов.Вставить(Префикс+"Организации", СтруктураОрганизация);
	
	Возврат СоответствиеИменОбъектов;
КонецФункции

Процедура новаПриЗаписиНоменклатурыЗаписатьСоответствие(ОбъектСсылка, Отказ) Экспорт
	
	НашлиЗапись = ПолучитьОбъектУТЛ(ОбъектСсылка);
	
	Если НашлиЗапись = Неопределено Тогда  // создаем новый элемент и новую запись
		
		Если ОбъектСсылка.ЭтоГруппа = Истина Тогда
			новаНоменклатура = Справочники.новаНоменклатура.СоздатьГруппу();
		Иначе
			новаНоменклатура = Справочники.новаНоменклатура.СоздатьЭлемент();
			новаНоменклатура.НаименованиеПолное = ОбъектСсылка.НаименованиеПолное;
		КонецЕсли;
		
		НашлиРодителя = ПолучитьОбъектУТЛ(ОбъектСсылка.Родитель);
		Если НашлиРодителя = Неопределено Тогда
			новаНоменклатура.Родитель = Справочники.новаНоменклатура.ПустаяСсылка();
		Иначе
			новаНоменклатура.Родитель = НашлиРодителя;
		КонецЕсли;	
						
		новаНоменклатура.Наименование = ОбъектСсылка.Наименование;
		новаНоменклатура.ПометкаУдаления = ОбъектСсылка.ПометкаУдаления;
		 
		новаНоменклатура.Записать();
		
		НаборЗаписей = РегистрыСведений.новаСоответствиеНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.новаНоменклатура.Установить(новаНоменклатура.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура = ОбъектСсылка;
		НоваяЗапись.новаНоменклатура = новаНоменклатура.Ссылка;
		
		НаборЗаписей.Записать();
		
	Иначе // перезаписываем элемент
		
		новаНоменклатура = НашлиЗапись.ПолучитьОбъект();
		
		Если ОбъектСсылка.ЭтоГруппа = Ложь Тогда	
			новаНоменклатура.НаименованиеПолное = ОбъектСсылка.НаименованиеПолное;
		КонецЕсли;
		
		НашлиРодителя = ПолучитьОбъектУТЛ(ОбъектСсылка.Родитель);
		Если НашлиРодителя = Неопределено Тогда
			новаНоменклатура.Родитель = Справочники.новаНоменклатура.ПустаяСсылка();
		Иначе
			новаНоменклатура.Родитель = НашлиРодителя;
		КонецЕсли;
		
		новаНоменклатура.Наименование = ОбъектСсылка.Наименование;
		новаНоменклатура.ПометкаУдаления = ОбъектСсылка.ПометкаУдаления;
		новаНоменклатура.Записать();
  		
	КонецЕсли;
	
КонецПроцедуры

Процедура новаПриЗаписиВалютыЗаписатьСоответствие(ОбъектСсылка, Отказ) Экспорт
	
	НашлиЗапись = ПолучитьОбъектУТЛ(ОбъектСсылка);
	
	Если НашлиЗапись = Неопределено Тогда  // создаем новый элемент и новую запись
		
		новаВалюта = Справочники.новаВалюты.СоздатьЭлемент();
		новаВалюта.НаименованиеПолное 	= ОбъектСсылка.НаименованиеПолное;
		новаВалюта.Наименование 		= ОбъектСсылка.Наименование;
		новаВалюта.Код 					= ОбъектСсылка.Код;
		новаВалюта.ПометкаУдаления 		= ОбъектСсылка.ПометкаУдаления;
		
		новаВалюта.Записать();
		
		НаборЗаписей = РегистрыСведений.новаСоответствиеВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.новаВалюта.Установить(новаВалюта.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Валюта = ОбъектСсылка;
		НоваяЗапись.новаВалюта = новаВалюта.Ссылка;
		
		НаборЗаписей.Записать();
		
	Иначе // перезаписываем элемент
		
		новаВалюта = НашлиЗапись.ПолучитьОбъект();
		
		новаВалюта.НаименованиеПолное 	= ОбъектСсылка.НаименованиеПолное;
		новаВалюта.Наименование 		= ОбъектСсылка.Наименование;
		новаВалюта.Код 					= ОбъектСсылка.Код;
		новаВалюта.ПометкаУдаления 		= ОбъектСсылка.ПометкаУдаления;
		
		новаВалюта.Записать();
  		
	КонецЕсли;
	
КонецПроцедуры

Процедура новаПриЗаписиКонтрагентаЗаписатьСоответствие(ОбъектСсылка, Отказ) Экспорт
	
	НашлиЗапись = ПолучитьОбъектУТЛ(ОбъектСсылка);
	
	Если НашлиЗапись = Неопределено Тогда  // создаем новый элемент и новую запись
		
		Если ОбъектСсылка.ЭтоГруппа = Истина Тогда
			новаКонтрагент = Справочники.новаКонтрагенты.СоздатьГруппу();
		Иначе
			новаКонтрагент = Справочники.новаКонтрагенты.СоздатьЭлемент();
			новаКонтрагент.НаименованиеПолное = ОбъектСсылка.НаименованиеПолное;
		КонецЕсли;
		
		НашлиРодителя = ПолучитьОбъектУТЛ(ОбъектСсылка.Родитель);
		Если НашлиРодителя = Неопределено Тогда
			новаКонтрагент.Родитель = Справочники.новаКонтрагенты.ПустаяСсылка();
		Иначе
			новаКонтрагент.Родитель = НашлиРодителя;
		КонецЕсли;	
						
		новаКонтрагент.Наименование = ОбъектСсылка.Наименование;
		новаКонтрагент.ПометкаУдаления 	= ОбъектСсылка.ПометкаУдаления;
		
		новаКонтрагент.Записать();
		
		НаборЗаписей = РегистрыСведений.новаСоответствиеКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.новаКонтрагент.Установить(новаКонтрагент.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Контрагент = ОбъектСсылка;
		НоваяЗапись.новаКонтрагент = новаКонтрагент.Ссылка;
		
		НаборЗаписей.Записать();
		
	Иначе // перезаписываем элемент
		
		новаКонтрагент = НашлиЗапись.ПолучитьОбъект();
		
		Если ОбъектСсылка.ЭтоГруппа = Ложь Тогда	
			новаКонтрагент.НаименованиеПолное = ОбъектСсылка.НаименованиеПолное;
		КонецЕсли;
		
		НашлиРодителя = ПолучитьОбъектУТЛ(ОбъектСсылка.Родитель);
		Если НашлиРодителя = Неопределено Тогда
			новаКонтрагент.Родитель = Справочники.новаКонтрагенты.ПустаяСсылка();
		Иначе
			новаКонтрагент.Родитель = НашлиРодителя;
		КонецЕсли;
		
		новаКонтрагент.Наименование 	= ОбъектСсылка.Наименование;
		новаКонтрагент.ПометкаУдаления 	= ОбъектСсылка.ПометкаУдаления;
		
		новаКонтрагент.Записать();
		
	КонецЕсли;
	
	МЗ = РегистрыСведений.новаОчередьОбъектовДляОбмена.СоздатьМенеджерЗаписи();
	МЗ.Ссылка = новаКонтрагент.Ссылка;
	МЗ.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить;
	
	МЗ.Записать();
		
КонецПроцедуры

Процедура новаПриЗаписиФизЛицаЗаписатьСоответствие(ОбъектСсылка, Отказ) Экспорт
	
	НашлиЗапись = ПолучитьОбъектУТЛ(ОбъектСсылка);
	
	Если НашлиЗапись = Неопределено Тогда  // создаем новый элемент и новую запись
		
		Если ОбъектСсылка.ЭтоГруппа = Истина Тогда
			новаФизЛицо = Справочники.новаФизическиеЛица.СоздатьГруппу();
		Иначе
			новаФизЛицо = Справочники.новаФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;
		
		НашлиРодителя = ПолучитьОбъектУТЛ(ОбъектСсылка.Родитель);
		Если НашлиРодителя = Неопределено Тогда
			новаФизЛицо.Родитель = Справочники.новаФизическиеЛица.ПустаяСсылка();
		Иначе
			новаФизЛицо.Родитель = НашлиРодителя;
		КонецЕсли;	
						
		новаФизЛицо.Наименование = ОбъектСсылка.Наименование;
		новаФизЛицо.ПометкаУдаления = ОбъектСсылка.ПометкаУдаления;
		
		новаФизЛицо.Записать();
		
		НаборЗаписей = РегистрыСведений.новаСоответствиеФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизЛицо.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.новаФизЛицо.Установить(новаФизЛицо.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ФизЛицо = ОбъектСсылка;
		НоваяЗапись.новаФизЛицо = новаФизЛицо.Ссылка;
		
		НаборЗаписей.Записать();
		
	Иначе // перезаписываем элемент
		
		новаФизЛицо = НашлиЗапись.ПолучитьОбъект();
		
		НашлиРодителя = ПолучитьОбъектУТЛ(ОбъектСсылка.Родитель);
		Если НашлиРодителя = Неопределено Тогда
			новаФизЛицо.Родитель = Справочники.новаФизическиеЛица.ПустаяСсылка();
		Иначе
			новаФизЛицо.Родитель = НашлиРодителя;
		КонецЕсли;
		
		новаФизЛицо.Наименование 	= ОбъектСсылка.Наименование;
		новаФизЛицо.ПометкаУдаления = ОбъектСсылка.ПометкаУдаления;
		
		новаФизЛицо.Записать();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура новаПриЗаписиСкладаЗаписатьСоответствие(ОбъектСсылка, Отказ) Экспорт
	
	НашлиЗапись = ПолучитьОбъектУТЛ(ОбъектСсылка);
	
	Если НашлиЗапись = Неопределено Тогда  // создаем новый элемент и новую запись
		
		Если ОбъектСсылка.ЭтоГруппа = Истина Тогда
			новаСклад = Справочники.новаСклады.СоздатьГруппу();
		Иначе
			новаСклад = Справочники.новаСклады.СоздатьЭлемент();
		КонецЕсли;
		
		НашлиРодителя = ПолучитьОбъектУТЛ(ОбъектСсылка.Родитель);
		Если НашлиРодителя = Неопределено Тогда
			новаСклад.Родитель = Справочники.новаСклады.ПустаяСсылка();
		Иначе
			новаСклад.Родитель = НашлиРодителя;
		КонецЕсли;	
						
		новаСклад.Наименование = ОбъектСсылка.Наименование;
		новаСклад.ПометкаУдаления 	= ОбъектСсылка.ПометкаУдаления;
		
		новаСклад.Записать();
		
		НаборЗаписей = РегистрыСведений.новаСоответствиеСкладов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.новаСклад.Установить(новаСклад.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Склад = ОбъектСсылка;
		НоваяЗапись.новаСклад = новаСклад.Ссылка;
		
		НаборЗаписей.Записать();
		
	Иначе // перезаписываем элемент
		
		новаСклад = НашлиЗапись.ПолучитьОбъект();
		
		НашлиРодителя = ПолучитьОбъектУТЛ(ОбъектСсылка.Родитель);
		Если НашлиРодителя = Неопределено Тогда
			новаСклад.Родитель = Справочники.новаСклады.ПустаяСсылка();
		Иначе
			новаСклад.Родитель = НашлиРодителя;
		КонецЕсли;
		
		новаСклад.Наименование 		= ОбъектСсылка.Наименование;
		новаСклад.ПометкаУдаления 	= ОбъектСсылка.ПометкаУдаления;
		
		новаСклад.Записать();
		
	КонецЕсли;
	
	МЗ = РегистрыСведений.новаОчередьОбъектовДляОбмена.СоздатьМенеджерЗаписи();
	МЗ.Ссылка = новаСклад.Ссылка;
	МЗ.Действие = Перечисления.новаРежимСинхронизацииОбъектов.Обновить;
	
	МЗ.Записать();
		
КонецПроцедуры

Процедура новаПриЗаписиПользователяЗаписатьСоответствие(ОбъектСсылка, Отказ) Экспорт
	
	НашлиЗапись = ПолучитьОбъектУТЛ(ОбъектСсылка);
	
	Если НашлиЗапись = Неопределено Тогда  // создаем новый элемент и новую запись
		
		новаПользователь = Справочники.новаПользователи.СоздатьЭлемент();
						
		новаПользователь.Наименование = ОбъектСсылка.Наименование;
		новаПользователь.ПометкаУдаления 	= ОбъектСсылка.ПометкаУдаления;
		
		новаПользователь.Записать();
		
		НаборЗаписей = РегистрыСведений.новаСоответствиеПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.новаПользователь.Установить(новаПользователь.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь = ОбъектСсылка;
		НоваяЗапись.новаПользователь = новаПользователь.Ссылка;
		
		НаборЗаписей.Записать();
		
	Иначе // перезаписываем элемент
		
		новаПользователь = НашлиЗапись.ПолучитьОбъект();
		
		новаПользователь.Наименование 		= ОбъектСсылка.Наименование;
		новаПользователь.ПометкаУдаления 	= ОбъектСсылка.ПометкаУдаления;
		
		новаПользователь.Записать();
		
	КонецЕсли;
КонецПроцедуры

Процедура новаПриЗаписиЕдиницыИзмеренияЗаписатьСоответствие(ОбъектСсылка, Отказ) Экспорт
	
	Если ОбъектСсылка.Владелец <> Справочники.Номенклатура Тогда
		Возврат;	
	КонецЕсли; 

	НашлиЗапись = ПолучитьОбъектУТЛ(ОбъектСсылка);
	
	Если НашлиЗапись = Неопределено Тогда  // создаем новый элемент и новую запись
		
		новаЕдиницаИзмерения = Справочники.новаЕдиницыНоменклатуры.СоздатьЭлемент();
		
		новаЕдиницаИзмерения.Наименование	= ОбъектСсылка.Наименование;
		новаЕдиницаИзмерения.Вес			= ОбъектСсылка.Вес;
		новаЕдиницаИзмерения.Объем			= ОбъектСсылка.Объем;
		новаЕдиницаИзмерения.Коэффициент	= ОбъектСсылка.Коэффициент;
		новаЕдиницаИзмерения.ПометкаУдаления = ОбъектСсылка.ПометкаУдаления;
		новаЕдиницаИзмерения.Владелец = ПолучитьОбъектУТЛ(ОбъектСсылка.Владелец);
		
		новаЕдиницаИзмерения.Записать();
		
		НаборЗаписей = РегистрыСведений.новаСоответствиеЕдиницИзмерения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЕдиницаИзмерения.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.новаЕдиницаИзмерения.Установить(новаЕдиницаИзмерения.Ссылка);
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.ЕдиницаИзмерения	= ОбъектСсылка;
		НоваяЗапись.новаЕдиницаИзмерения = новаЕдиницаИзмерения.Ссылка;
		
		НаборЗаписей.Записать();
		
	Иначе // перезаписываем элемент
		
		новаЕдиницаИзмерения = НашлиЗапись.ПолучитьОбъект();
		
		новаЕдиницаИзмерения.Наименование	= ОбъектСсылка.Наименование;
		новаЕдиницаИзмерения.Вес			= ОбъектСсылка.Вес;
		новаЕдиницаИзмерения.Объем			= ОбъектСсылка.Объем;
		новаЕдиницаИзмерения.Коэффициент	= ОбъектСсылка.Коэффициент;
		новаЕдиницаИзмерения.ПометкаУдаления = ОбъектСсылка.ПометкаУдаления;
		новаЕдиницаИзмерения.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура новаПриЗаписиОрганизацииЗаписатьСоответствие(ОбъектСсылка, Отказ) Экспорт
	
	НашлиЗапись = ПолучитьОбъектУТЛ(ОбъектСсылка);
	
	Если НашлиЗапись = Неопределено Тогда  // создаем новый элемент и новую запись
		
		новаОрганизация = Справочники.новаОрганизации.СоздатьЭлемент();
						
		новаОрганизация.Наименование = ОбъектСсылка.Наименование;
		новаОрганизация.ПометкаУдаления 	= ОбъектСсылка.ПометкаУдаления;
		
		новаОрганизация.Записать();
		
		НаборЗаписей = РегистрыСведений.новаСоответствиеОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.новаОрганизация.Установить(новаОрганизация.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = ОбъектСсылка;
		НоваяЗапись.новаОрганизация = новаОрганизация.Ссылка;
		
		НаборЗаписей.Записать();
		
	Иначе // перезаписываем элемент
		
		новаОрганизация = НашлиЗапись.ПолучитьОбъект();
		
		новаОрганизация.Наименование 		= ОбъектСсылка.Наименование;
		новаОрганизация.ПометкаУдаления 	= ОбъектСсылка.ПометкаУдаления;
		
		новаОрганизация.Записать();
		
	КонецЕсли;
		
КонецПроцедуры

//Процедуры работы с бизнес-процессами 
//////////////////////////////////////////////////

Функция ПолучитьМестнуюДоставкуПоОснованию(ОснованиеДоставки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	новаОснованиеМестнойДоставки.БизнесПроцесс КАК МестнаяДоставка
	               |ИЗ
	               |	РегистрСведений.новаСвязьДокументовДоставки КАК новаОснованиеМестнойДоставки
	               |ГДЕ
	               |	новаОснованиеМестнойДоставки.Документ = &ОснованиеДоставки
	               |	И новаОснованиеМестнойДоставки.БизнесПроцесс.Завершен = ЛОЖЬ";
	   
	Основание = ОснованиеДоставки;
	
	Если ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.КорректировкаЗаказаПокупателя") Тогда
		Основание = ОснованиеДоставки.ЗаказПокупателя;
		
	ИначеЕсли ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") Тогда
		Основание = ОснованиеДоставки.ЗаказПоставщику;
		
	ИначеЕсли ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.КорректировкаВнутреннегоЗаказа") Тогда
		Основание = ОснованиеДоставки.ВнутреннийЗаказ;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОснованиеДоставки", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МестнаяДоставка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗавершеннуюМестнуюДоставкуПоОснованию(ОснованиеДоставки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	новаОснованиеМестнойДоставки.БизнесПроцесс КАК МестнаяДоставка
	               |ИЗ
	               |	РегистрСведений.новаСвязьДокументовДоставки КАК новаОснованиеМестнойДоставки
	               |ГДЕ
	               |	новаОснованиеМестнойДоставки.Документ = &ОснованиеДоставки
	               |	И новаОснованиеМестнойДоставки.БизнесПроцесс.Завершен = ИСТИНА
	               |	И новаОснованиеМестнойДоставки.БизнесПроцесс.ДоставкаОтменена = ЛОЖЬ";
	   
	Основание = ОснованиеДоставки;
	
	Если ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.КорректировкаЗаказаПокупателя") Тогда
		Основание = ОснованиеДоставки.ЗаказПокупателя;
		
	ИначеЕсли ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") Тогда
		Основание = ОснованиеДоставки.ЗаказПоставщику;
		
	ИначеЕсли ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.КорректировкаВнутреннегоЗаказа") Тогда
		Основание = ОснованиеДоставки.ВнутреннийЗаказ;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОснованиеДоставки", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МестнаяДоставка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция  ПолучитьРейсПоМестнойДоставке(МестнаяДоставка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	новаЗаданияРейсов.Рейс
	|ИЗ
	|	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	|ГДЕ
	|	новаЗаданияРейсов.Доставка = &Доставка
	|	И новаЗаданияРейсов.Рейс.РейсОтменен = ЛОЖЬ"
	;
	Запрос.УстановитьПараметр("Доставка", МестнаяДоставка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Рейс;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Процедура ОтменитьМестнуюДоставку(МестнаяДоставка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	новаЗадачаМестнойДоставки.Ссылка
	|ИЗ
	|	Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
	|ГДЕ
	|	новаЗадачаМестнойДоставки.БизнесПроцесс.ВедущаяЗадача В
	|			(ВЫБРАТЬ
	|				новаЗадачаМестнойДоставки.Ссылка
	|			ИЗ
	|				Задача.новаЗадачаМестнойДоставки КАК новаЗадачаМестнойДоставки
	|			ГДЕ
	|				новаЗадачаМестнойДоставки.БизнесПроцесс = &БизнесПроцесс
	|				И новаЗадачаМестнойДоставки.Выполнена = ЛОЖЬ)
	|	И новаЗадачаМестнойДоставки.Выполнена = ЛОЖЬ"
	
	;
	Запрос.УстановитьПараметр("БизнесПроцесс", МестнаяДоставка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Задача = Выборка.Ссылка.ПолучитьОбъект();
		Задача.ДоставкаОтменена = Истина;
		Задача.ВыполнитьЗадачу();
	КонецЕсли;


КонецПроцедуры

Процедура ЗавершитьМестнуюДоставку(Основание, Отказ) Экспорт
	
	МестнаяДоставка = новаИнтеграция.ПолучитьМестнуюДоставкуПоОснованию(Основание);
	Если МестнаяДоставка = Неопределено Тогда
		ЗавершеннаяМестнаяДоставка = ПолучитьЗавершеннуюМестнуюДоставкуПоОснованию(Основание);
		Если ЗавершеннаяМестнаяДоставка <> Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Доставка по документу "+Основание+" завершена. Отмена проведения или удаление невозможно.", Отказ);
			Возврат;
		Иначе 
			Возврат;
		КонецЕсли;	
	Иначе	
		Рейс = новаИнтеграция.ПолучитьРейсПоМестнойДоставке(МестнаяДоставка);
		Если Рейс <> Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Заказ на доставку включен в рейс. Отмена проведения или удаление невозможно.", Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Если отменяются корректировки, доставку надо перезаполнить по документу-основанию этой корректировки
	Если ТипЗнч(Основание) = Тип("ДокументОбъект.КорректировкаЗаказаПокупателя") Тогда
		
		ЗаполнитьСпецификациюДоставкиПоОснованию(МестнаяДоставка, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументОбъект.КорректировкаЗаказаПоставщику") Тогда
	
		ЗаполнитьСпецификациюДоставкиПоОснованию(МестнаяДоставка, Основание, Ложь);
	
	Иначе
	
		новаИнтеграцияСвязьОбъектов.ОтменитьМестнуюДоставку(МестнаяДоставка);
	
	КонецЕсли; 
	
	
	Если РольДоступна("новаАдминистраторУТЛ") Или РольДоступна("новаПользовательУТЛ") Тогда
		обМестнаяДоставка = МестнаяДоставка.ПолучитьОбъект();
		мсОбъекты = Новый Массив;
		мсОбъекты.Добавить(обМестнаяДоставка);
		#Если Клиент Тогда
		новаОбщиеПроцедуры.ОповеститьОбОбновлении(мсОбъекты);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСпецификациюДоставкиПоОснованию(МестнаяДоставка, Основание, ЗаказПокупателя = Истина)

	обГруз = МестнаяДоставка.Груз.ПолучитьОбъект();
	обГруз.Спецификация.Очистить();
	Если ЗаказПокупателя Тогда
		новаИнтеграция.ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание, новаИнтеграция.ПолучитьТаблицуСпецификацииЗаказа(Основание.ЗаказПокупателя, "Товары", Основание));
		новаИнтеграция.ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание, новаИнтеграция.ПолучитьТаблицуСпецификацииЗаказа(Основание.ЗаказПокупателя, "ВозвратнаяТара", Основание));
	Иначе
		новаИнтеграция.ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание, новаИнтеграция.ПолучитьТаблицуСпецификацииЗаказа(Основание.ЗаказПоставщику, "Товары",Основание));
		новаИнтеграция.ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание, новаИнтеграция.ПолучитьТаблицуСпецификацииЗаказа(Основание.ЗаказПоставщику, "ВозвратнаяТара", Основание));
	КонецЕсли;	
    обГруз.Записать();
	
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Строка> - Имя константы
//
// Возвращаемое значение:
//      Значение константы
//
Функция ПолучитьЗначениеКонстанты(Имя) Экспорт
	
	Возврат Константы[Имя].Получить();

КонецФункции // ПолучитьЗначениеКонстанты()()
 
