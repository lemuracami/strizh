
// Возвращает контрагента (грузоотправителя или грузополучателя) местной доставки.
//
// Параметры:
//  Задание <БизнесПроцессОбъект.новаМестнаяДоставка>
//
// Возвращаемое значение:
//  <СправочникСсылка.новаКонтрагенты>
//
Функция ПолучитьКонтрагентаЗадания(Задание) Экспорт
	Если ЗначениеЗаполнено(Задание) Тогда
		отКонтрагент = Новый ОписаниеТипов("СправочникСсылка.новаКонтрагенты");
	
		Контрагент = отКонтрагент.ПривестиЗначение(Задание.Грузополучатель);
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = отКонтрагент.ПривестиЗначение(Задание.Грузоотправитель);
		КонецЕсли;
		
		Возврат Контрагент;		
	Иначе
		Возврат Справочники.новаКонтрагенты.ПустаяСсылка();	
	КонецЕсли;
КонецФункции

// Возвращает пустую таблицу для распределения доходов/расходов на транспорт.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[РаспределениеДоходовРасходов]>
//
Функция ПолучитьСтруктуруТаблицыРаспределения() Экспорт
	тзРаспределение = Новый ТаблицаЗначений;
	тзРаспределение.Колонки.Добавить("Задание");
	тзРаспределение.Колонки.Добавить("Транспорт");
	тзРаспределение.Колонки.Добавить("Водитель");
	тзРаспределение.Колонки.Добавить("Экспедитор");
	тзРаспределение.Колонки.Добавить("Контрагент");
	тзРаспределение.Колонки.Добавить("База");
	тзРаспределение.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат тзРаспределение;
КонецФункции

// Распределяет сумму по строкам таблицы распределения.
//
// Параметры:
//  тзРаспределение     <ТаблицаЗначений[РаспределениеДоходовРасходов]>: заполняется колонка "Сумма".
//  СуммаКРаспределению <Число>: распределяемая сумма.
//
Процедура РаспределитьСумму(тзРаспределение, СуммаКРаспределению) Экспорт
	Если тзРаспределение.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	База = тзРаспределение.Итог("База");
	Если База = 0 Тогда
		тзРаспределение.ЗаполнитьЗначения(0, "Сумма");
		Возврат;
	КонецЕсли;
	
	Для Каждого стрРаспределение Из тзРаспределение Цикл
		стрРаспределение.Сумма = СуммаКРаспределению * стрРаспределение.База / База;
	КонецЦикла;
	
	Дельта = СуммаКРаспределению - тзРаспределение.Итог("Сумма");
	тзРаспределение[тзРаспределение.Количество() - 1].Сумма = тзРаспределение[тзРаспределение.Количество() - 1].Сумма + Дельта;
КонецПроцедуры

#Если Клиент Тогда
//
// Создает на форме интерфейс редактирования табличной части [ДоходыРасходы].
//
// Параметры:
//  Форма        <Форма>: форма для размещения.
//  Панель       <Панель>: панель для размещения.
//  ВидАналитики <ПеречислениеСсылка.новаВидыАналитикСтатейДоходовРасходов, Массив>: определяет набор
//               статей доходов/расходов.
//  обКонтейнер  <ДокументОбъект, БизнесПроцессОбъект>: объект, содержащий табличную часть [ДоходыРасходы].
//
Процедура ПодключитьИнтерфейсДоходовРасходов(Форма, Панель, ВидАналитики, обКонтейнер) Экспорт
	СтраницаДоходовРасходов = Панель.Страницы.Добавить("ДоходыИРасходы", "Доходы и расходы");
	Панель.ТекущаяСтраница = СтраницаДоходовРасходов;
	
	Отступ = 6;
	
	Контейнер = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеКартинки"), Панель);
	Контейнер.Верх = Отступ;
	Контейнер.Лево = Отступ;
	Контейнер.Ширина = Панель.Ширина - Отступ * 2 - 2;
	Контейнер.Высота = Панель.Высота - Отступ * 2 - 20;
	Контейнер.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	Контейнер.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
	
	Журнал = новаЖурналы.НовыйЖурнал();
	Форма.ЖурналСтатей = Журнал;
	
	Журнал.ДобавитьНастройку("СтатьиДеревом");
	Журнал.РазворачиватьПолностью();
	
	Источник = Обработки.новаИсточникСтатьиДоходовРасходов.Создать();
	Форма.ИсточникСтатей = Источник;
	Источник.ДоходыРасходыДоставки = Истина;
	
	Если ТипЗнч(ВидАналитики) = Тип("Массив") Тогда
		Источник.УстановитьВидыАналитики(ВидАналитики);
	Иначе
		мсВидыАналитики = Новый Массив;
		мсВидыАналитики.Добавить(ВидАналитики);
		Источник.УстановитьВидыАналитики(мсВидыАналитики);
	КонецЕсли;
	
	Журнал.ДобавитьИсточник(Источник);
	
	Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "Статья";
	Источник.КонструкторДанных.ДобавитьГруппировку("Группа");
	Журнал.УстановитьШиринуИерархии(50);
	
	Журнал.ДобавитьКолонку("Сумма", ПоложениеКолонки.НоваяКолонка, -15,, РежимРедактированияКолонки.ВходПриВводе);
	
	Если ЗаданаВалютаУпрУчета() Тогда
		Журнал.ДобавитьКолонку("Валюта", ПоложениеКолонки.НоваяКолонка, -7);
	КонецЕсли;
	
	Журнал.ПодключитьИнтерфейс(Форма, Контейнер, Панель);
	
	Для Каждого стрСтатья Из обКонтейнер.ДоходыРасходы Цикл
		Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("Источник, Группировка, Статья", Источник, NULL, стрСтатья.Статья), Истина);
		Если Строки.Количество() = 0 Тогда Продолжить; КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Строки[0], стрСтатья);
		Журнал.ОкончитьРедактированиеСтроки(Строки[0]);
	КонецЦикла;
	
	Источник.РассчитатьИтоги(Журнал.Дерево.Значение.Строки);
КонецПроцедуры
#КонецЕсли

// Переносит введенные данные из элементов формы в табличную часть [ДоходыРасходы]
//
// Параметры:
//  Форма       <Форма>: форма, содержащая интерфейс редактирования доходов/расходов.
//  обКонтейнер <ДокументОбъект, БизнесПроцессОбъект>: объект, содержащий табличную часть [ДоходыРасходы].
//
Процедура СохранитьДоходыРасходы(Форма, обКонтейнер) Экспорт
	обКонтейнер.ДоходыРасходы.Очистить();
	Строки = Форма.ИсточникСтатей.ПолучитьРедактируемыеДоходыРасходы();
	Для Каждого Строка Из Строки Цикл
		ЗаполнитьЗначенияСвойств(обКонтейнер.ДоходыРасходы.Добавить(), Строка);
	КонецЦикла;
КонецПроцедуры

// Возвращает курс валюты на заданную дату.
//
// Параметры:
//  Валюта       <СправочникСсылка.новаВалюты>
//  НаДату       <Дата>
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
// Возвращаемое значение:
//  <Структура[КурсВалюты]>
//
Функция ПолучитьКурсВалюты(Валюта, НаДату, новаКонтекст = Неопределено) Экспорт 
	Возврат Неопределено;//новаИнтеграцияФинансов.ПолучитьКурсВалюты(Валюта, НаДату, новаКонтекст);
КонецФункции

// Переводит сумму из одной валюты в другую, используя курсы на заданную дату.
//
// Параметры:
//  Сумма           <Число>: исходная сумма.
//  Валюта          <СправочникСсылка.новаВалюты>: исходная валюта.
//  ВалютаПересчета <СправочникСсылка.новаВалюты>
//  НаДату          <Дата>
//  новаКонтекст    <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
// Возвращаемое значение:
//  <Число>: исходная сумма в валюте пересчета.
//
Функция ПересчитатьСуммуВВалюту(Сумма, Валюта, ВалютаПересчета, НаДату, новаКонтекст = Неопределено) Экспорт
	стКурсИсхВалюты = ПолучитьКурсВалюты(Валюта, НаДату, новаКонтекст);
	Если стКурсИсхВалюты = Неопределено Тогда Возврат 0 КонецЕсли;
	
	СуммаВРублях = Сумма * стКурсИсхВалюты.Курс / стКурсИсхВалюты.Кратность;
	
	стКурсВалютыПересчета = ПолучитьКурсВалюты(ВалютаПересчета, НаДату, новаКонтекст);
	СуммаВВалютеПересчета = (СуммаВРублях / стКурсВалютыПересчета.Курс) * стКурсВалютыПересчета.Кратность;
	ТипСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	Возврат ТипСуммы.ПривестиЗначение(СуммаВВалютеПересчета);
КонецФункции

// Переводит сумму в валюту управленческого учета, используя курсы на заданную дату.
//
// Параметры:
//  Сумма        <Число>: исходная сумма.
//  Валюта       <СправочникСсылка.новаВалюты>: исходная валюта.
//  НаДату       <>
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
// Возвращаемое значение:
//  <Число>: исходная сумма в валюте управленческого учета.
//
Функция ПересчитатьСуммуВВалютуУпрУчета(Сумма, Валюта, НаДату, новаКонтекст = Неопределено) Экспорт
	Если новаКонтекст = Неопределено Тогда
		ВалютаУпрУчета = Константы.новаВалютаУправленческогоУчета.Получить();
	Иначе
		Если Не новаКонтекст.Свойство("ВалютаУпрУчета") Тогда
			новаКонтекст.Вставить("ВалютаУпрУчета", Константы.новаВалютаУправленческогоУчета.Получить());
		КонецЕсли;
		ВалютаУпрУчета = новаКонтекст.ВалютаУпрУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаУпрУчета) Тогда
		Возврат ПересчитатьСуммуВВалюту(Сумма, Валюта, ВалютаУпрУчета, НаДату, новаКонтекст);
	Иначе
		Возврат Сумма;
	КонецЕсли;
КонецФункции

// Определяет, установлена ли в настройках валюта управленческого учета.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
// Возвращаемое значение:
//  <Булево>
//
Функция ЗаданаВалютаУпрУчета(новаКонтекст = Неопределено) Экспорт
	Если новаКонтекст = Неопределено Тогда
		Возврат ЗначениеЗаполнено(Константы.новаВалютаУправленческогоУчета.Получить());
	КонецЕсли;
	
	Если Не новаКонтекст.Свойство("ВалютаУпрУчета") Тогда
		новаКонтекст.Вставить("ВалютаУпрУчета", Константы.новаВалютаУправленческогоУчета.Получить());
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(новаКонтекст.ВалютаУпрУчета);
КонецФункции

// Возвращает установленную в настройках валюту управленческого учета.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
// Возвращаемое значение:
//  <СправочникСсылка.новаВалюты>
//
Функция ПолучитьВалютуУпрУчета(новаКонтекст = Неопределено) Экспорт
	Если новаКонтекст = Неопределено Тогда
		Возврат Константы.новаВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	
	Если Не новаКонтекст.Свойство("ВалютаУпрУчета") Тогда
		новаКонтекст.Вставить("ВалютаУпрУчета", Константы.новаВалютаУправленческогоУчета.Получить());
	КонецЕсли;
	
	Возврат новаКонтекст.ВалютаУпрУчета;
КонецФункции

// Рассчитывает итоговые суммы в валюте упр. учета по набору статей доходов/расходов.
//
// Параметры:
//  соСтатьи     <Соответствие[СправочникСсылка.новаСтатьиДоходовРасходов, Число]>: исходный набор статей и сумм.
//  НаДату       <Дата>: дата курса валюты упр. учета.
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
// Возвращаемое значение:
//  <Структура(Доходы:<Число>, Расходы:<Число>)>:
//
Функция СвернутьСтатьи(соСтатьи, НаДату, новаКонтекст) Экспорт
	Доходы = 0;
	Расходы = 0;
	
	Для Каждого ЭлСтатья Из соСтатьи Цикл
		Если ЭлСтатья.Ключ.Доход Тогда
			Доходы = Доходы + ПересчитатьСуммуВВалютуУпрУчета(ЭлСтатья.Значение, ЭлСтатья.Ключ.Валюта, НаДату, новаКонтекст);
		Иначе
			Расходы = Расходы + ПересчитатьСуммуВВалютуУпрУчета(ЭлСтатья.Значение, ЭлСтатья.Ключ.Валюта, НаДату, новаКонтекст);
		КонецЕсли;			
	КонецЦикла;
	
	Возврат Новый Структура("Доходы, Расходы", Доходы, Расходы);
КонецФункции
