
// Выполняет перерасчет календаря возможных рейсов.
//
Процедура ОбновитьТекущийКалендарьВозможныхРейсов() Экспорт
	РассчитатьКалендарьВозможныхРейсов();
КонецПроцедуры

// Выполняет перерасчет календаря возможных рейсов за заданный период, по выбранному транспорту и водителю.
//
// Параметры:
//  ДатаНачалаРасчета    <Дата>
//  ДатаОкончанияРасчета <Дата>
//  Транспорт            <СправочникСсылка.новаТранспорт>
//  Водитель             <СправочникСсылка.новаВодители>
//
Процедура РассчитатьКалендарьВозможныхРейсов(ДатаНачалаРасчета = Неопределено, ДатаОкончанияРасчета = Неопределено, Транспорт = Неопределено, Водитель = Неопределено, Экспедитор = Неопределено) Экспорт
	СекундВДне = 60 * 60 * 24;
	
	ДатаНачала = ?(ЗначениеЗаполнено(ДатаНачалаРасчета), ДатаНачалаРасчета, НачалоГода(ТекущаяДата()));
	Если ЗначениеЗаполнено(ДатаОкончанияРасчета) Тогда
		ДатаКонца = ДатаОкончанияРасчета;
	Иначе
		ДатаКонца = ДобавитьМесяц(ДатаНачала, Константы.новаГлубинаРасчетаКалендаряРейсов.Получить());
		ДатаКонца = ДатаКонца - СекундВДне;
	КонецЕсли;
	
	тзШкалаДат = Новый ТаблицаЗначений;
	тзШкалаДат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ъ = ДатаНачала;
	Пока ъ <= ДатаКонца Цикл
		тзШкалаДат.Добавить().Период = ъ;
		ъ = ъ + СекундВДне;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	ОтборДоступностиТранспорта = "";
	ОтборДоступностиВодителей = "";
	
	Если Транспорт <> Неопределено Тогда
		Запрос.УстановитьПараметр("Транспорт", Транспорт);
		
		Если ТипЗнч(Транспорт) = Тип("Массив") Тогда
			ОтборДоступностиТранспорта = ОтборДоступностиТранспорта + " И ДоступностьТранспорта.Транспорт В (&Транспорт)";
			ОтборДоступностиВодителей = ОтборДоступностиВодителей + " И ДоступностьВодителей.Транспорт В (&Транспорт)";
		Иначе
			ОтборДоступностиТранспорта = ОтборДоступностиТранспорта + " И ДоступностьТранспорта.Транспорт = &Транспорт";
			ОтборДоступностиВодителей = ОтборДоступностиВодителей + " И ДоступностьВодителей.Транспорт = &Транспорт";
		КонецЕсли;
	КонецЕсли;
	
	Если Водитель <> Неопределено Тогда
		Запрос.УстановитьПараметр("Водитель", Водитель);
		
		Если ТипЗнч(Водитель) = Тип("Массив") Тогда
			ОтборДоступностиВодителей = ОтборДоступностиВодителей + " И ДоступностьВодителей.Водитель В (&Водитель)";
		Иначе
			ОтборДоступностиВодителей = ОтборДоступностиВодителей + " И ДоступностьВодителей.Водитель = &Водитель";
		КонецЕсли;
	КонецЕсли;
	
	
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	Период
	|ПОМЕСТИТЬ ШкалаДат
	|ИЗ
	|	&ШкалаДат КАК ШкалаДат
	|;
	|
	|ВЫБРАТЬ
	|	ДоступностьВодителей.Транспорт КАК Транспорт,
	|	ДоступностьВодителей.Водитель КАК Водитель,
	|	ДоступностьВодителей.Экспедитор КАК Экспедитор,
	|	ДоступностьВодителей.НачалоПериода КАК ПервоеЧислоГрафика,
	|	ДоступностьВодителей.ГрафикРаботы КАК ГрафикРаботы,
	|	ДоступностьТранспорта.Гараж.ТочкаДоставки КАК НачалоРейса,
	|	МИНИМУМ(ШкалаДат.Период) КАК НачалоПериода,
	|	МАКСИМУМ(ШкалаДат.Период) КАК КонецПериода
	|
	|ИЗ
	|	ШкалаДат
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаДоступностьТранспорта КАК ДоступностьТранспорта
	|ПО
	|	ДоступностьТранспорта.Доступен
	| И (ШкалаДат.Период МЕЖДУ ДоступностьТранспорта.НачалоПериода И ДоступностьТранспорта.КонецПериода)
	| " + ОтборДоступностиТранспорта + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаГрафикиРаботыВодителей КАК ДоступностьВодителей
	|ПО
	|	ДоступностьВодителей.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.новаГрафикиРаботы.ПустаяСсылка)
	| И (ШкалаДат.Период МЕЖДУ ДоступностьВодителей.НачалоПериода И ДоступностьВодителей.КонецПериода)
	| И ДоступностьВодителей.Транспорт = ДоступностьТранспорта.Транспорт
	| " + ОтборДоступностиВодителей + "
	|
	|ГДЕ
	|	НЕ ДоступностьТранспорта.КодПериода ЕСТЬ NULL
	| И НЕ ДоступностьВодителей.КодПериода ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступностьВодителей.Транспорт,
	|	ДоступностьВодителей.Водитель,
	|	ДоступностьВодителей.Экспедитор,
	|	ДоступностьТранспорта.КодПериода, 
	|	ДоступностьВодителей.КодПериода, 
	|	ДоступностьВодителей.НачалоПериода, 
	|	ДоступностьВодителей.ГрафикРаботы,
	|	ДоступностьТранспорта.Гараж.ТочкаДоставки
	|";
	
	Запрос.УстановитьПараметр("ШкалаДат", тзШкалаДат);
	
	тзПериодыРаботы = Запрос.Выполнить().Выгрузить();

	НаборЗаписей = РегистрыСведений.новаКалендарьВозможныхРейсов.СоздатьНаборЗаписей();
	тзВозможныеРейсы = НаборЗаписей.Выгрузить();
	
	ПустаяДата = '00010101';
	Для Каждого стрПериодРаботы Из тзПериодыРаботы Цикл
		
		ТекДата = стрПериодРаботы.НачалоПериода;
		ДниГрафика = стрПериодРаботы.ГрафикРаботы.Дни;
		ДнейВГрафике = ДниГрафика.Количество();
		
		Пока ТекДата <= стрПериодРаботы.КонецПериода Цикл
			ДнейСНачалаГрафика = (ТекДата - стрПериодРаботы.ПервоеЧислоГрафика) / СекундВДне;
			ДеньГрафика = ДниГрафика[ДнейСНачалаГрафика % ДнейВГрафике];
			Если Не ДеньГрафика.Выходной Тогда
				стрВозможныйРейс = тзВозможныеРейсы.Добавить();
				стрВозможныйРейс.Транспорт = стрПериодРаботы.Транспорт;
				стрВозможныйРейс.Водитель = стрПериодРаботы.Водитель;
				стрВозможныйРейс.Экспедитор = стрПериодРаботы.Экспедитор;
				стрВозможныйРейс.НачалоПериода = ТекДата + (ДеньГрафика.ВремяНачала - ПустаяДата);
				стрВозможныйРейс.КонецПериода = ТекДата + (ДеньГрафика.ВремяОкончания - ПустаяДата);
				Если ДеньГрафика.ВремяОкончания <= ДеньГрафика.ВремяНачала Тогда
					стрВозможныйРейс.КонецПериода = стрВозможныйРейс.КонецПериода + СекундВДне; 
				КонецЕсли;
				стрВозможныйРейс.НачалоРейса = стрПериодРаботы.НачалоРейса;
			КонецЕсли;
			ТекДата = ТекДата + СекундВДне;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоступностьВодителей.Транспорт,
	|	ДоступностьВодителей.Водитель,
	|	ДоступностьВодителей.Экспедитор,
	|	ДоступностьВодителей.НачалоПериода 
	|ИЗ
	|	РегистрСведений.новаКалендарьВозможныхРейсов КАК ДоступностьВодителей
	|ГДЕ
	|	(НАЧАЛОПЕРИОДА(ДоступностьВодителей.НачалоПериода, День) МЕЖДУ &ДатаНачала И &ДатаКонца)
	| " + ОтборДоступностиВодителей;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Транспорт.Установить(Выборка.Транспорт);
		НаборЗаписей.Отбор.Водитель.Установить(Выборка.Водитель);
		НаборЗаписей.Отбор.НачалоПериода.Установить(Выборка.НачалоПериода);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	НаборЗаписей.Добавить();
	Для Каждого стрВозможныйРейс Из тзВозможныеРейсы Цикл
		НаборЗаписей.Отбор.Транспорт.Установить(стрВозможныйРейс.Транспорт);
		НаборЗаписей.Отбор.Водитель.Установить(стрВозможныйРейс.Водитель);
		НаборЗаписей.Отбор.НачалоПериода.Установить(стрВозможныйРейс.НачалоПериода);
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей[0], стрВозможныйРейс);
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция СформироватьПолноеНаименованиеКатегории(КатегорииТранспорта) Экспорт
	
	сзРезультат = Новый СписокЗначений();
	Для Каждого стрЗначениеКатегории ИЗ КатегорииТранспорта Цикл
		Категория = стрЗначениеКатегории.ЗначениеКатегории.Владелец;
		СокращениеКатегории = Категория.Сокращение;
		Если (Категория.ИспользоватьДляПолногоНаименованияКатегории) И (СокращениеКатегории <> "") Тогда
			НайденнаяКатегория = сзРезультат.НайтиПоЗначению(СокращениеКатегории);
			Если НайденнаяКатегория = Неопределено Тогда
				НайденнаяКатегория = сзРезультат.Добавить(СокращениеКатегории);
			КонецЕсли;	
			НайденнаяКатегория.Представление = НайденнаяКатегория.Представление + стрЗначениеКатегории.ЗначениеКатегории.Сокращение+",";
		КонецЕсли;	
	КонецЦикла;	
	
	Результат = "";
	Для Каждого стрРезультат ИЗ сзРезультат Цикл
		Результат = Результат + стрРезультат.Значение + ":" + Лев(стрРезультат.Представление,СтрДлина(стрРезультат.Представление)-1)+"/";
	КонецЦикла;	
	
	Возврат Лев(Результат,СтрДлина(Результат)-1);
КонецФункции

//Собирает график доступности/занятости транспорта
//
//  Параметры:
//    ДатаГрафика - <Дата.Дата> Дата, на которую необходимо получить графика транспорта
//    Транспорт - <Неопределено, Массив, СправочникСсылка.новаТранспорт> ссылка на трранспорт или список транспорта.
//                Если не указан, то выбирается весь транспорт.
//
//  Возвращаемое значение:
//    <ТаблицаЗначений>
//      Транспорт - <СправочникСсылка.новаТранспорт> транспорт;
//      График - <ТаблицаЗначений> график транспорта
//        Рейс - <БизнесПроцессСсылка.новаРейсМестнойДоставки> рейс, если есть указан период занятости, иначе пустая ссылка
//        Водитель - <СправочникСсылка.новаВодители> водитель
//        Экспедитор - <СправочникСсылка.новаЭкспедиторы> экспедитор
//        НачалоПериода - <Дата.ДатаВремя> начало периода доступности, занятости
//        КонецПериода - <Дата.ДатаВремя> конец периода доступности, занятости
//        НачалоРейса - <СправочникСсылка.новаТочкиДоставки> точка начала рейса
//
Функция ПолучитьГрафикТранспорта(Знач ДатаГрафика, Знач Транспорт = Неопределено) Экспорт
	
	ДатаГрафика = НачалоДня(ДатаГрафика);
	
	Если ТипЗнч(Транспорт) = Тип("СправочникСсылка.новаТранспорт") Тогда
		
		Если не Транспорт.Пустая() Тогда
			
			Врем = Новый Массив;
			Врем.Добавить(Транспорт);
			Транспорт = Врем;
			
		Иначе
			
			Транспорт = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.новаТранспорт"));
	Результат.Колонки.Добавить("График", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Результат.Индексы.Добавить("Транспорт");
	
	ШаблонГрафика = Новый ТаблицаЗначений;
	ШаблонГрафика.Колонки.Добавить("Рейс", Новый ОписаниеТипов("БизнесПроцессСсылка.новаРейсМестнойДоставки"));
	ШаблонГрафика.Колонки.Добавить("Водитель", Новый ОписаниеТипов("СправочникСсылка.новаВодители"));
	ШаблонГрафика.Колонки.Добавить("Экспедитор", Новый ОписаниеТипов("СправочникСсылка.новаЭкспедиторы"));
	ШаблонГрафика.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ШаблонГрафика.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ШаблонГрафика.Колонки.Добавить("НачалоРейса", Новый ОписаниеТипов("СправочникСсылка.новаТочкиДоставки"));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаГрафика", ДатаГрафика);
	Если Транспорт <> Неопределено Тогда
		Запрос.УстановитьПараметр("Транспорт", Транспорт);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    ВозможныеРейсы.Транспорт
	|    ,ВозможныеРейсы.Водитель
	|    ,ВозможныеРейсы.Экспедитор
	|    ,ВозможныеРейсы.НачалоПериода
	|    ,ВозможныеРейсы.КонецПериода
	|    ,ВозможныеРейсы.НачалоРейса
	|  ИЗ
	|    (
	|      ВЫБРАТЬ
	|          ВЫБОР
	|            КОГДА Корректировки.НовыйТранспорт ЕСТЬ NULL 
	|              ТОГДА ВозможныеРейсы.Транспорт
	|            КОГДА Корректировки.НовыйТранспорт = ЗНАЧЕНИЕ(Справочник.новаТранспорт.ПустаяСсылка)
	|              ТОГДА ВозможныеРейсы.Транспорт
	|            ИНАЧЕ Корректировки.НовыйТранспорт
	|          КОНЕЦ КАК Транспорт
	|
	|          ,ВЫБОР
	|            КОГДА Корректировки.НовыйВодитель ЕСТЬ NULL
	|              ТОГДА ВозможныеРейсы.Водитель
	|            КОГДА Корректировки.НовыйВодитель = ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)
	|              ТОГДА ВозможныеРейсы.Водитель
	|            ИНАЧЕ Корректировки.НовыйВодитель
	|          КОНЕЦ КАК Водитель
	|
	|          ,ВЫБОР
	|            КОГДА Корректировки.НовыйЭкспедитор ЕСТЬ NULL
	|              ТОГДА ВозможныеРейсы.Экспедитор
	|            КОГДА Корректировки.НовыйЭкспедитор = ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)
	|              ТОГДА ВозможныеРейсы.Экспедитор
	|            ИНАЧЕ Корректировки.НовыйЭкспедитор
	|          КОНЕЦ КАК Экспедитор
	|
	|          ,ВЫБОР
	|            КОГДА Закрытия.НовоеНачалоПериода ЕСТЬ NULL 
	|              ТОГДА
	|                ВЫБОР
	|                  КОГДА Корректировки.НовоеНачалоПериода ЕСТЬ NULL 
	|                    ТОГДА ВозможныеРейсы.НачалоПериода
	|                  КОГДА Корректировки.НовоеНачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|                    ТОГДА ВозможныеРейсы.НачалоПериода
	|                  ИНАЧЕ Корректировки.НовоеНачалоПериода
	|                КОНЕЦ
	|            ИНАЧЕ Закрытия.НовоеНачалоПериода
	|          КОНЕЦ КАК НачалоПериода
	|
	|          ,ВЫБОР
	|             КОГДА Закрытия.НовыйКонецПериода ЕСТЬ NULL 
	|               ТОГДА
	|                 ВЫБОР
	|                   КОГДА Корректировки.НовыйКонецПериода ЕСТЬ NULL 
	|                     ТОГДА ВозможныеРейсы.КонецПериода
	|                   КОГДА Корректировки.НовыйКонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|                     ТОГДА ВозможныеРейсы.КонецПериода
	|                   ИНАЧЕ Корректировки.НовыйКонецПериода
	|                 КОНЕЦ
	|             ИНАЧЕ Закрытия.НовыйКонецПериода
	|          КОНЕЦ КАК КонецПериода
	|
	|          ,ВЫБОР
	|            КОГДА Закрытия.НовоеНачалоРейса ЕСТЬ NULL
	|              ТОГДА
	|                ВЫБОР
	|                  КОГДА Корректировки.НовоеНачалоРейса ЕСТЬ NULL
	|                    ТОГДА ВозможныеРейсы.НачалоРейса
	|                  КОГДА Корректировки.НовоеНачалоРейса = ЗНАЧЕНИЕ(Справочник.новаТочкиДоставки.ПустаяСсылка)
	|                    ТОГДА ВозможныеРейсы.НачалоРейса
	|                  ИНАЧЕ Корректировки.НовоеНачалоРейса
	|                КОНЕЦ
	|              ИНАЧЕ Закрытия.НовоеНачалоРейса
	|          КОНЕЦ КАК НачалоРейса
	|
	|        ИЗ
	|          РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|          ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКорректировкаКалендаряВозможныхРейсов КАК Корректировки
	|            ПО
	|              ВозможныеРейсы.Транспорт = Корректировки.Транспорт
	|              И ВозможныеРейсы.Водитель = Корректировки.Водитель
	|              И (НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) = Корректировки.НачалоПериода)
	|          ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаЗакрытияВозможныхРейсов КАК Закрытия
	|            ПО
	|              (ВозможныеРейсы.Транспорт = Закрытия.Транспорт
	|              И ВозможныеРейсы.Водитель = Закрытия.Водитель)
	|              И (НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) = Закрытия.НачалоПериода)
	|        ГДЕ
	|         ( Корректировки.Отменен ЕСТЬ NULL 
	|           ИЛИ (НЕ Корректировки.Отменен))
	|         И ( Закрытия.Закрыт ЕСТЬ NULL 
	|             ИЛИ (НЕ Закрытия.Закрыт))
	|    ) КАК ВозможныеРейсы
	|  ГДЕ
	|    &ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(ВозможныеРейсы.КонецПериода, ДЕНЬ)
	|    " + ?(Транспорт <> Неопределено, "И Транспорт В (&Транспорт)", "") + "
	|  ИТОГИ ПО
	|    Транспорт
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоТранспорту = Результатзапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоТранспорту.Следующий() Цикл
			
			НовыйГрафик = Результат.Добавить();
			НовыйГрафик.Транспорт = ВыборкаПоТранспорту.Транспорт;
			НовыйГрафик.График = ШаблонГрафика.СкопироватьКолонки();
			
			ВыборкаПоГрафику = ВыборкаПоТранспорту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоГрафику.Следующий() Цикл
				
				НоваяСтрока = НовыйГрафик.График.Добавить();
				НоваяСтрока.Водитель = ВыборкаПоГрафику.Водитель;
				НоваяСтрока.Экспедитор = ВыборкаПоГрафику.Экспедитор;
				НоваяСтрока.НачалоПериода = ВыборкаПоГрафику.НачалоПериода;
				НоваяСтрока.КонецПериода = ВыборкаПоГрафику.КонецПериода;
				НоваяСтрока.НачалоРейса = ВыборкаПоГрафику.НачалоРейса;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    Ссылка КАК Рейс
	|    ,Транспорт
	|    ,Водитель
	|    ,Экспедитор
	|    ,ДатаНачала КАК НачалоПериода
	|    ,ДатаКонца КАК КонецПериода
	|    ,НачалоРейса
	|  ИЗ
	|    БизнесПроцесс.новаРейсМестнойДоставки
	|  ГДЕ
	|    НАЧАЛОПЕРИОДА(ДатаНачала, ДЕНЬ) = &ДатаГрафика
	|    " + ?(Транспорт <> Неопределено, "И Транспорт В (&Транспорт)", "") + "
	|    И (НЕ РейсОтменен)
	|  ИТОГИ ПО
	|    Транспорт
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоТранспорту = Результатзапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоТранспорту.Следующий() Цикл
			
			НайденныйГрафик = Результат.Найти(ВыборкаПоТранспорту.Транспорт, "Транспорт");
			Если НайденныйГрафик = Неопределено Тогда
				
				НайденныйГрафик = Результат.Добавить();
				НайденныйГрафик.Транспорт = ВыборкаПоТранспорту.Транспорт;
				НайденныйГрафик.График = ШаблонГрафика.СкопироватьКолонки();
			КонецЕсли;
			
			ВыборкаПоГрафику = ВыборкаПоТранспорту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоГрафику.Следующий() Цикл
				
				НоваяСтрока = НайденныйГрафик.График.Добавить();
				НоваяСтрока.Рейс = ВыборкаПоГрафику.Рейс;
				НоваяСтрока.Водитель = ВыборкаПоГрафику.Водитель;
				НоваяСтрока.Экспедитор = ВыборкаПоГрафику.Экспедитор;
				НоваяСтрока.НачалоПериода = ВыборкаПоГрафику.НачалоПериода;
				НоваяСтрока.КонецПериода = ВыборкаПоГрафику.КонецПериода;
				НоваяСтрока.НачалоРейса = ВыборкаПоГрафику.НачалоРейса;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаРезультата Из Результат Цикл
		
		СтрокаРезультата.График.Сортировать("НачалоПериода");
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Возврашает окна доступности тарнспорта
//
//  Параметры:
//    ДатаГрафика - <Дата.Дата> Дата, на которую необходимо получить графика транспорта
//    Транспорт - <Неопределено, Массив, СправочникСсылка.новаТранспорт> ссылка на трранспорт или список транспорта.
//                Если не указан, то выбирается весь транспорт.
//
//  Возвращаемое значение:
//    <ТаблицаЗначений>
//      Транспорт - <СправочникСсылка.новаТранспорт> транспорт;
//      График - <ТаблицаЗначений> график транспорта
//        Рейс - <БизнесПроцессСсылка.новаРейсМестнойДоставки> рейс, если есть указан период занятости, иначе пустая ссылка
//        Водитель - <СправочникСсылка.новаВодители> водитель
//        Экспедитор - <СправочникСсылка.новаЭкспедиторы> экспедитор
//        НачалоПериода - <Дата.ДатаВремя> начало периода доступности, занятости
//        КонецПериода - <Дата.ДатаВремя> конец периода доступности, занятости
//        НачалоРейса - <СправочникСсылка.новаТочкиДоставки> точка начала рейса
//
Функция ПолучитьГрафикДоступностиТранспорта(Дата, Транспорт = Неопределено) Экспорт
	
	Результат = ПолучитьГрафикТранспорта(Дата, Транспорт);
	
	Для ИндексТранспорта = -(Результат.Количество() - 1) По 0 Цикл
		
		График = Результат[-ИндексТранспорта].График;
		Для ИндексГрафика = -(График.Количество() - 1) По 0 Цикл
			
			ТекущаяСтрока = График[-ИндексГрафика];
			Если ЗначениеЗаполнено(ТекущаяСтрока.Рейс) Тогда
				
				График.Удалить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Если График.Количество() = 0 Тогда
			
			Результат.Удалить(-ИндексТранспорта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Возвращает окно оптимизации рейса
//
//  Параметры:
//    ДатаГрафика - <Дата.Дата> Дата, на которую необходимо получить графика транспорта
//    Рейсы - <Неопределено, Массив, БизнесПроцессСсылка.новаРейсМестнойДоставки> ссылка на рейс или список рейсов.
//            Если не указан, то выбираются все рейсы.
//
//  Возвращаемое значение:
//    <ТаблицаЗначений>
//      Рейс - <БизнесПроцессСсылка.новаРейсМестнойДоставки> рейс
//      НачалоПериода - <Дата.ДатаВремя> начало окна свободного времени
//      КонецПериода - <Дата.ДатаВремя> конец окна свободного времени
//
Функция ПолучитьОкноОптимизацииРейса(Знач ДатаГрафика, Знач Рейсы = Неопределено) Экспорт
	
	ДатаГрафика = НачалоДня(ДатаГрафика);
	
	Если ТипЗнч(Рейсы) = Тип("БизнесПроцессСсылка.новаРейсМестнойДоставки") Тогда
		
		Врем = Новый Массив;
		Врем.Добавить(Рейсы);
		Рейсы = Врем;
	КонецЕсли;
	
	Если Рейсы <> Неопределено Тогда
		
		ФильтрРейсов = Новый Соответствие;
		
		Для каждого Рейс Из Рейсы Цикл
			ФильтрРейсов.Вставить(Рейс, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Рейс", Новый ОписаниеТипов("БизнесПроцессСсылка.новаРейсМестнойДоставки"));
	Результат.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    Транспорт
	|  ИЗ
	|    БизнесПроцесс.новаРейсМестнойДоставки
	|  ГДЕ
	|    НАЧАЛОПЕРИОДА(ДатаНачала, ДЕНЬ) = &ДатаГрафика
	|    " + ?(Рейсы <> Неопределено, "И Ссылка В (&Рейсы)", "") + "
	|    И (НЕ РейсОтменен)
	|");
	
	Запрос.УстановитьПараметр("ДатаГрафика", ДатаГрафика);
	Если Рейсы <> Неопределено Тогда
		Запрос.УстановитьПараметр("Рейсы", Рейсы);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Транспорт = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Транспорт.Добавить(Выборка.Транспорт);
		КонецЦикла;
		
		ГрафикиТранспорта = ПолучитьГрафикТранспорта(ДатаГрафика, Транспорт);
		
		Для каждого ГрафикТранспорта Из ГрафикиТранспорта Цикл
			
			МаксимальныйИндексГрафика = ГрафикТранспорта.График.Количество() - 1;
			
			Для каждого СтрокаГрафика Из ГрафикТранспорта.График Цикл
				
				Если Рейсы <> Неопределено Тогда
					
					Если ФильтрРейсов[СтрокаГрафика.Рейс] <> Истина Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаГрафика.Рейс) Тогда
					
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.Рейс = СтрокаГрафика.Рейс;
					НоваяСтрока.НачалоПериода = СтрокаГрафика.НачалоПериода;
					НоваяСтрока.КонецПериода = СтрокаГрафика.КонецПериода;
					
					Индекс = ГрафикТранспорта.График.Индекс(СтрокаГрафика);
					Если Индекс > 0 Тогда
						
						НоваяСтрока.НачалоПериода = ГрафикТранспорта.График[Индекс - 1].НачалоПериода;
					КонецЕсли;
					Если Индекс < МаксимальныйИндексГрафика Тогда
						
						НоваяСтрока.КонецПериода = ГрафикТранспорта.График[Индекс + 1].КонецПериода;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
