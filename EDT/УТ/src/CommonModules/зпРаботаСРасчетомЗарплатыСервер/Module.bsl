&НаСервере
Функция РазрешитьЗаписьУдаление(МассивПараметров, РегистрКонтроля) Экспорт

	Если ПустаяСтрока(РегистрКонтроля) Или МассивПараметров.Количество() = 0 Тогда
		Возврат Истина;//блокируем запись/удаление
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	@Регистр@ 
		|ГДЕ ";
	
	Если РегистрКонтроля = "РегистрСведений.зпТарификацияЗППоЗаказам" Тогда
		КоллекцияОбъектов = Метаданные.РегистрыСведений.зпТарификацияЗППоЗаказам;
	ИначеЕсли РегистрКонтроля = "РегистрСведений.зпМинимальныеСтавки" Тогда
		КоллекцияОбъектов = Метаданные.РегистрыСведений.зпМинимальныеСтавки;
	ИначеЕсли РегистрКонтроля = "РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам" Тогда
		КоллекцияОбъектов = Метаданные.РегистрыСведений.зпИсходныеДанныеРасчетаЗППоЗаказам;
	ИначеЕсли РегистрКонтроля = "РегистрНакопления.зпНачислениеЗП" Тогда
		КоллекцияОбъектов = Метаданные.РегистрыНакопления.зпНачислениеЗП;
	КонецЕсли;		
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Регистр@", РегистрКонтроля);
	
	Измерения 	= КоллекцияОбъектов.Измерения;
	Ресурсы 	= КоллекцияОбъектов.Ресурсы;
	
	флНесколькоПолейОтбора = Ложь;
	Для Каждого Параметр Из МассивПараметров Цикл
		
		Для Каждого Ресурс Из Ресурсы Цикл
			Если Ресурс.Тип.СодержитТип(ТипЗнч(Параметр)) Тогда
				Если флНесколькоПолейОтбора Тогда //при добавлении первого параметра будет = Ложь
					Запрос.Текст = Запрос.Текст + " И ";	
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + РегистрКонтроля + "." + Ресурс.Имя + " = &" + Ресурс.Имя;
				Запрос.УстановитьПараметр(Ресурс.Имя, Параметр);
				флНесколькоПолейОтбора = Истина;
			Иначе
				//Геннадий 05.04.2022 ++
				//добавлена проверка, тип ресурса - перечисление
				ТипЗначения = Ресурс.Тип.Типы()[0];
				Если Не Метаданные.Перечисления.Содержит(Метаданные.НайтиПоТипу(ТипЗначения)) Тогда
				//Геннадий 05.04.2022 --
					Для Каждого элМассива Из Ресурс.Тип.Типы() Цикл	
						Если Не Метаданные.НайтиПоТипу(элМассива) = Неопределено Тогда
							Если Метаданные.НайтиПоТипу(элМассива).Владельцы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(Параметр))) Тогда
								Запрос.Текст = Запрос.Текст + РегистрКонтроля + "." + Ресурс.Имя + " = &" + Ресурс.Имя;
								Запрос.УстановитьПараметр(Ресурс.Имя, Параметр);
								флНесколькоПолейОтбора = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Измерение Из Измерения Цикл
			Если Измерение.Тип.СодержитТип(ТипЗнч(Параметр)) Тогда
				Если флНесколькоПолейОтбора Тогда //при добавлении первого параметра будет = Ложь
					Запрос.Текст = Запрос.Текст + " И ";	
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + РегистрКонтроля + "." + Измерение.Имя + " = &" + Измерение.Имя;
				Запрос.УстановитьПараметр(Измерение.Имя, Параметр);
				флНесколькоПолейОтбора = Истина;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Не Результат.Следующий() Тогда
		Возврат Ложь; 	//запись разрещена
	Иначе
		Возврат Истина; //запись запрещена
	КонецЕсли;
	
КонецФункции

Функция НетЗаписиВРегистре(ИмяРегистра, ИмяПоля, Значение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Значение", Значение);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	" + ИмяРегистра + " КАК ИмяРегистра
	|ГДЕ
	|	ИмяРегистра." + ИмяПоля + " = &Значение";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НетЗаписиВРегистрах(ИменаРегистров, ИмяПоля, Значение) Экспорт
	
	ЕстьЗапрос = Ложь;
	
	МассивТекстов = Новый Массив;
	
	Для Каждого ИмяРегистра Из ИменаРегистров Цикл
		Если ЕстьЗапрос Тогда
			МассивТекстов.Добавить(
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|");
		Иначе
			ЕстьЗапрос = Истина;
		КонецЕсли;
		МассивТекстов.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	" + ИмяРегистра + " КАК ИмяРегистра
		|ГДЕ
		|	ИмяРегистра." + ИмяПоля + " = &Значение");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Значение", Значение);
	Запрос.Текст = СтрСоединить(МассивТекстов);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

//CeHbKA #4101 27.10.2020
//по аналогии ОМ.ПолигональнаяМаршрутизацияСервер.УстановитьАктуальнуюСхемуПолигональнойМаршрутизацииВСистеме() 
Функция УстановитьАктуальнуюСхемуЗоныДоставкиЗПВСистеме(ИдентификаторСхемы, КодРегиона) Экспорт
	ВидМетода = Перечисления.ВидыЗапросовWEBСервис.SetActiveMapVersionResult;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСхемы", ИдентификаторСхемы);
	ПараметрыЗапроса.Вставить("КодРегиона", Формат(КодРегиона, "ЧГ="));
	
	ПолученныеДанные = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(ВидМетода, ПараметрыЗапроса);
	Если Не ПолученныеДанные.Успешно Тогда
		Возврат Ложь;
	Иначе
		
	КонецеСли;		
	
	РезультатОбработки = ИнтеграцияСАдминкойWEBСервис.ОбработатьПолученныеДанные(ПолученныеДанные, ВидМетода);	
	Возврат РезультатОбработки;
КонецФункции	
//CeHbKA #4101 27.10.2020

//CeHbKA #4131 20.10.2020
Функция ПолучитьСоответствиеЗаказовИЗон(МассивЗаказов) Экспорт
				
	МассивНомеровЗаказов = Новый Массив;
	Для каждого Тек Из МассивЗаказов Цикл
		МассивНомеровЗаказов.Добавить(СтрЗаменить(Строка(Тек.Номер), " ", ""));
	КонецЦикла;
	
	СоответствиеЗонИЗаказов = Новый Соответствие;
	
	ЗапПолигоны = Новый Запрос;
	ЗапПолигоны.Текст = "ВЫБРАТЬ
	|	новаМестнаяДоставка.Номер КАК НомерЗаказа,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта КАК Широта,
	|	новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота КАК Долгота,
	|	РеализацияТоваровУслуг.ТерминалДоставки КАК Регион
	//CeHbKA 06.11.2020
	|	,Значение(Перечисление.ТипыЗаказов.Доставка) КАК ТипЗаказа
	//CeHbKA 06.11.2020
	|ИЗ
	|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО новаМестнаяДоставка.Номер = РеализацияТоваровУслуг.Номер
	|ГДЕ
	|	новаМестнаяДоставка.Номер В(&НомераЗаказов)
	|	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Широта <> 0
	|	И новаМестнаяДоставка.ТочкаПрибытия.Адрес.Долгота <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаборТовара.Номер,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Широта,
	|	ЗаборТовара.ТочкаДоставки.Адрес.Долгота,
	|	ЗаборТовара.ТерминалДоставки
	//CeHbKA 06.11.2020
	|	,Значение(Перечисление.ТипыЗаказов.Забор) КАК ТипЗаказа
	//CeHbKA 06.11.2020
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|ГДЕ
	|	ЗаборТовара.Номер В(&НомераЗаказов)
	|	И ЗаборТовара.ТочкаДоставки.Адрес.Широта <> 0
	|	И ЗаборТовара.ТочкаДоставки.Адрес.Долгота <> 0";
	ЗапПолигоны.УстановитьПараметр("НомераЗаказов", МассивНомеровЗаказов);
	
	РезПолигоны = ЗапПолигоны.Выполнить();
	Если Не РезПолигоны.Пустой() Тогда
		ВыбПолигоны = РезПолигоны.Выбрать();
		МассивСтрук = Новый Массив;
		Пока ВыбПолигоны.Следующий() Цикл
			Струк = Новый Структура;
			
			Струк.Вставить("НомерЗаказа", Число(ВыбПолигоны.НомерЗаказа));
			Струк.Вставить("Широта", ВыбПолигоны.Широта);
			Струк.Вставить("Долгота", ВыбПолигоны.Долгота);
			Струк.Вставить("Регион", ВыбПолигоны.Регион);
			
			//CeHbKA 06.11.2020
			Струк.Вставить("ТипЗаказа", ВыбПолигоны.ТипЗаказа);
			//CeHbKA 06.11.2020
			
			МассивСтрук.Добавить(Струк);
		КонецЦикла;	
		
		СоответствиеЗонИЗаказов = ПолучитьЗоныЗаказов(МассивСтрук);

	КонецеСли;	
	
	Возврат СоответствиеЗонИЗаказов;
	
КонецФункции

//по аналогии ОМ.ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов()
Функция ПолучитьЗоныЗаказов(ДанныеЗаказов, ДатаАктуальностиСхем = Неопределено) Экспорт
	
	ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetPolygonsForOrdersResult;
	
	ПараметрыЗапроса = Новый Структура;
	//ПараметрыЗапроса.Вставить("versionId", Схема.id_Админка);
	Если ДатаАктуальностиСхем <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("actualDate", ДатаАктуальностиСхем);
	КонецеСли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегиональныеТерминалы.Ссылка КАК Регион,
		|	ЕСТЬNULL(зпАктивнаяСхемаРасчетаЗПСрезПоследних.СхемаРасчетаЗП, ЗНАЧЕНИЕ(Справочник.зпСхемыРасчетаЗП.ПустаяСсылка)) КАК СхемаРасчетаЗП,
		|	ЕСТЬNULL(зпСхемыРасчетаЗПСхемыЗонДоставки.СхемаЗон, ЗНАЧЕНИЕ(Справочник.зпСхемыЗонДоставки.ПустаяСсылка)) КАК СхемаЗонДоставкиЗП,
		|	ЕСТЬNULL(зпСхемыРасчетаЗПСхемыЗонДоставки.СхемаЗон.Карта, ЗНАЧЕНИЕ(Справочник.КартыКонструктораКарт.ПустаяСсылка)) КАК КартаКонструктораКарт,
		|	ЕСТЬNULL(зпСхемыРасчетаЗПСхемыЗонДоставки.СхемаЗон.Карта.ИдентификаторКарты, """""""") КАК ИдентификаторКарты
		//CeHbKA 06.11.2020
		|	,ЕСТЬNULL(зпСхемыРасчетаЗПСхемыЗонДоставки.ТипЗаказа, Значение(Перечисление.ТипыЗаказов.ПустаяСсылка)) КАК ТипЗаказа
		//CeHbKA 06.11.2020
		|ИЗ
		|	Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпАктивнаяСхемаРасчетаЗП.СрезПоследних КАК зпАктивнаяСхемаРасчетаЗПСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.зпСхемыРасчетаЗП.СхемыЗонДоставки КАК зпСхемыРасчетаЗПСхемыЗонДоставки
		|			ПО зпАктивнаяСхемаРасчетаЗПСрезПоследних.СхемаРасчетаЗП = зпСхемыРасчетаЗПСхемыЗонДоставки.Ссылка
		//CeHbKA 06.11.2020
		//|				И (зпСхемыРасчетаЗПСхемыЗонДоставки.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка))
		//CeHbKA 06.11.2020
		|		ПО РегиональныеТерминалы.Ссылка = зпАктивнаяСхемаРасчетаЗПСрезПоследних.Регион";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивДанных = Новый Массив;
	
	Для Каждого Тек Из ДанныеЗаказов Цикл
		Струк = Новый Структура;
		Струк.Вставить("OrderId", Тек.НомерЗаказа);
		
		СтрукТочки = Новый Структура;
		СтрукТочки.Вставить("Id", 1);
		СтрукТочки.Вставить("Latitude", Тек.Широта);
		СтрукТочки.Вставить("Longitude", Тек.Долгота);
		
		Струк.Вставить("Point", СтрукТочки);
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
		//CeHbKA 06.11.2020
		СтруктураОтбора = Новый Структура("Регион", Тек.Регион);
		СтруктураОтбора.Вставить("ТипЗаказа", Тек.ТипЗаказа);
		//CeHbKA 06.11.2020
		
		Пока ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураОтбора) Цикл
			Если ВыборкаДетальныеЗаписи.ИдентификаторКарты <> "" Тогда
				Струк.Вставить("ConstructorId", ВыборкаДетальныеЗаписи.ИдентификаторКарты);
			КонецЕсли; 	
		КонецЦикла;		
		
		Если НЕ Струк.Свойство("ConstructorId") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДанных.Добавить(Струк);
	КонецЦикла;	
	
	Если МассивДанных.Количество() = 0 Тогда
		//Геннадий 13.11.2020 ->
		Возврат Новый Соответствие;
		//Геннадий 13.11.2020 <-
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ordersLocations", МассивДанных);
	//Геннадий 04.03.2021 ->
	//по переписке
	ПараметрыЗапроса.Вставить("disableUpdateCoords", Истина);
	//Геннадий <-
	
	ПолученныеДанные = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(ВидМетода, ПараметрыЗапроса);
	
	Если ПолученныеДанные.Успешно Тогда 
		
		РезультатОбработки = ИнтеграцияСАдминкойWEBСервис.ОбработатьПолученныеДанные(ПолученныеДанные.Данные, ВидМетода);
		
		Возврат РезультатОбработки;

	КонецЕсли;
	
	Возврат Новый Соответствие;
	
КонецФункции

//по аналогии с ОМ.ПолигональнаяМаршрутизацияСервер.УстановитьПолигоныДляЗаказов()
Функция ПолучитьЗоныДоставкиДляЗаказов(Данные) Экспорт

	ТабПолигонов = Новый ТаблицаЗначений();
	ТабПолигонов.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
	ТабПолигонов.Колонки.Добавить("НомерПолигона", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	ТабПолигонов.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(20,13)));
	ТабПолигонов.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(20,13)));
	ТабПолигонов.Колонки.Добавить("НомерСхемы", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	Для Сч = 0 По Данные.Количество() - 1 Цикл
		Если Данные[Сч].Polygons = Неопределено Тогда 
			Продолжить;
		КонецеСли;	
		Если Данные[Сч].Polygons.Количество() <> 0 Тогда
			Нов = ТабПолигонов.Добавить();
			Нов.НомерЗаказа = Формат(Данные[Сч].OrderLocation.OrderId, "ЧГ=");
			Нов.НомерПолигона = Данные[Сч].Polygons[0].Id;
			Нов.НомерСхемы = Данные[Сч].VersionId;
			Нов.Широта = Данные[Сч].OrderLocation.Point.Latitude;
			Нов.Долгота = Данные[Сч].OrderLocation.Point.Longitude;
		КонецеСли;	
	КонецЦикла;	
	
	Если ТабПолигонов.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Таб.НомерЗаказа КАК НомерЗаказа,
	            |	Таб.НомерПолигона КАК НомерПолигона,
	            |	Таб.Широта КАК Широта,
	            |	Таб.Долгота КАК Долгота,
	            |	Таб.НомерСхемы КАК НомерСхемы
	            |ПОМЕСТИТЬ ВТ_Таб
	            |ИЗ
	            |	&Таб КАК Таб
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	зпЗоныДоставки.Ссылка КАК ЗонаДоставки,
	            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	            |	ВТ_Таб.Широта КАК Широта,
	            |	ВТ_Таб.Долгота КАК Долгота,
	            |	РеализацияТоваровУслуг.Дата КАК ДатаДоставки,
	            |	зпСхемыЗонДоставки.Ссылка КАК СхемаЗонДоставки
	            |ИЗ
	            |	ВТ_Таб КАК ВТ_Таб
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпЗоныДоставки КАК зпЗоныДоставки
	            |		ПО ВТ_Таб.НомерПолигона = зпЗоныДоставки.id_Админка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	            |		ПО ВТ_Таб.НомерЗаказа = РеализацияТоваровУслуг.Номер
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпСхемыЗонДоставки КАК зпСхемыЗонДоставки
	            |		ПО ВТ_Таб.НомерСхемы = зпСхемыЗонДоставки.id_Админка
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	зпЗоныДоставки.Ссылка,
	            |	ЗаборТовара.Ссылка,
	            |	ВТ_Таб.Широта,
	            |	ВТ_Таб.Долгота,
	            |	ЗаборТовара.Дата,
	            |	зпСхемыЗонДоставки.Ссылка
	            |ИЗ
	            |	ВТ_Таб КАК ВТ_Таб
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпЗоныДоставки КАК зпЗоныДоставки
	            |		ПО ВТ_Таб.НомерПолигона = зпЗоныДоставки.id_Админка
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
	            |		ПО ВТ_Таб.НомерЗаказа = ЗаборТовара.Номер
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпСхемыЗонДоставки КАК зпСхемыЗонДоставки
	            |		ПО ВТ_Таб.НомерСхемы = зпСхемыЗонДоставки.id_Админка";
	
	
	Зап.УстановитьПараметр("Таб", ТабПолигонов);
	
	РезультатЗапроса = Зап.Выполнить();
	
	СоответствениеДанных = Новый Соответствие();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() цикл
		СоответствениеДанных.Вставить(ВыборкаДетальныеЗаписи.Заказ, ВыборкаДетальныеЗаписи.ЗонаДоставки);
	КонецЦикла;
	
	Возврат СоответствениеДанных;	

КонецФункции // ()
//CeHbKA #4131 20.10.2020 

//CeHbKA #4167 27.08.2020

//Карта - спр.КартыКонструктораКарт
//СхемаЗонДоставки - спр.зпСхемыЗонДоставки
//по аналогии с ОМ.ПолигональнаяМаршрутизацияСервер.СоздатьНовуюСхемуМаршрутизации()
Функция СоздатьСхемуЗонРасчетаЗП(СхемаЗонДоставки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СхемаЗонДоставки) Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СхемаЗонДоставки.Карта.ИдентификаторКарты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидМетода = Перечисления.ВидыЗапросовWEBСервис.CreateMapResult;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("КодРегиона", Формат(СхемаЗонДоставки.Регион.Код, "ЧГ="));
	ПараметрыЗапроса.Вставить("constructorId", СхемаЗонДоставки.Карта.ИдентификаторКарты);
	                            
	ПолученныеДанные = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(ВидМетода, ПараметрыЗапроса);
	Если Не ПолученныеДанные.Успешно Тогда
		Возврат Ложь;
	Иначе
	КонецеСли;		
	
	ПолученныеДанные.Данные.Вставить("СхемаЗонДоставки", СхемаЗонДоставки);
	
	РезультатОбработки = ИнтеграцияСАдминкойWEBСервис.ОбработатьПолученныеДанные(ПолученныеДанные.Данные, ВидМетода, СхемаЗонДоставки.Карта.ИдентификаторКарты);	
	
	Если РезультатОбработки = Истина Тогда
		//ДанныеАдминки = Новый Структура("CreateDate");
		//ДанныеАдминки.Вставить("versionID");
		//ЗаполнитьЗначенияСвойств(ДанныеАдминки, ПолученныеДанные.Данные.CreateMapResult.Map);
		//Возврат ДанныеАдминки;
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	//Возврат РезультатОбработки;
	
КонецФункции

//по аналогии с ОМ.ПолигональнаяМаршрутизацияСервер.ЗагрузитьСхемыПолигональнойМаршрутизации()
Функция ЗагрузитьСхемыЗонДоставки(Данные, ВидМетода) Экспорт
	
	Таб = Новый ТаблицаЗначений();
	Таб.колонки.Добавить("CreateDate", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Таб.колонки.Добавить("versionID", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	Таб.колонки.Добавить("regionID", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	Если ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetMapVersionsResult Тогда
		Схемы = Данные.GetMapVersionsResult.Maps;
		Для Сч = 0 По Схемы.Количество() - 1 Цикл
			Нов = Таб.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, Схемы[Сч]);
		КонецЦикла;	
	ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.CreateMapResult Тогда
		Схема = Данные.CreateMapResult.Map;
		Нов = Таб.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Схема);
		Нов.CreateDate = ТекущаяДата();
	КонецеСли;
	
	СхемаЗонДоставки = Данные.СхемаЗонДоставки;
	
	СхемаЗонДоставкиОбъект = СхемаЗонДоставки.ПолучитьОбъект();	
	СхемаЗонДоставкиОбъект.id_Админка = Нов.versionID;
	СхемаЗонДоставкиОбъект.ДатаСоздания = Нов.CreateDate;
	
	СхемаЗонДоставкиОбъект.Записать();
	
	МассивИдентификаторовСхем = Новый Массив;
	
	Для каждого ТекСтрока из Таб цикл
		МассивИдентификаторовСхем.Добавить(ТекСтрока.versionID);
	КонецЦикла;
	
	//получение полигонов схем
	РезультатОбработки = ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныСхем(МассивИдентификаторовСхем, СхемаЗонДоставки.Карта.ИдентификаторКарты);
	Если Не РезультатОбработки Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецеСли;	
	
КонецФункции

//по аналогии с ОМ.ПолигональнаяМаршрутизацияСервер.ЗагрузитьПолигоныСхемы()
Функция ЗагрузитьЗоныДоставкиЗП(Данные, ВидМетода) Экспорт
	//пакетная обработка здесь не подойдет, вложенная таблица
	Схема = Справочники.зпСхемыЗонДоставки.НайтиПоРеквизиту("id_Админка", Данные.GetMapResult.Map.versionId);
	//Если ВидМетода = Перечисления.ВидыЗапросовWEBСервис.GetMapVersionsResult Тогда
		Полигоны = Данные.GetMapResult.Map.Polygons;
	//ИначеЕсли ВидМетода = Перечисления.ВидыЗапросовWEBСервис.CreateMapResult Тогда
	//	Полигоны = Данные.CreateMapResult.Map.Polygons;
	//КонецеСли;
	
	Для Сч = 0 По Полигоны.Количество() - 1 Цикл
		Полигон = Полигоны[Сч];
		ПолигонСсылка = Справочники.зпЗоныДоставки.НайтиПоРеквизиту("id_Админка", Полигон.id, , Схема);
		Если ПолигонСсылка.Пустая() Тогда
			ПолигонОбъект = Справочники.зпЗоныДоставки.СоздатьЭлемент();
			ПолигонОбъект.Владелец = Схема;
		Иначе	
			ПолигонОбъект = ПолигонСсылка.ПолучитьОбъект();
			ПолигонОбъект.ТочкиПолигона.Очистить();
		КонецеСли;	
		
		ПолигонОбъект.id_Админка = Полигон.id;
		ПолигонОбъект.Наименование = СокрЛП(СтрЗаменить(Полигон.Name, Символы.ПС, ""));
		
		ТочкиПолигона = Полигон.PolygonPoints;
		Для СчТочки = 0 По ТочкиПолигона.Количество() - 1 Цикл
			Нов = ПолигонОбъект.ТочкиПолигона.Добавить();
			Нов.id = ТочкиПолигона[СчТочки].id;
			Нов.Широта = ТочкиПолигона[СчТочки].Latitude;
			Нов.Долгота = ТочкиПолигона[СчТочки].Longitude;
		КонецЦикла;	
		ПолигонОбъект.Записать();
	КонецЦикла;	
	
	Возврат Истина;

КонецФункции

//CeHbKA #4167 27.08.2020

Функция ПолучитьАктивнуюСхемуРасчетаЗП(ДатаРасчета, Регион) Экспорт
	
	СРЗП = Справочники.зпСхемыРасчетаЗП.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	зпАктивнаяСхемаРасчетаЗПСрезПоследних.СхемаРасчетаЗП КАК СхемаРасчетаЗП
		|ИЗ
		|	РегистрСведений.зпАктивнаяСхемаРасчетаЗП.СрезПоследних(&ДатаРасчета, Регион = &Регион) КАК зпАктивнаяСхемаРасчетаЗПСрезПоследних";
	
	Запрос.УстановитьПараметр("Регион", 		Регион);
	Запрос.УстановитьПараметр("ДатаРасчета", 	ДатаРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СРЗП = ВыборкаДетальныеЗаписи.СхемаРасчетаЗП;		
	КонецЕсли;
	
	Возврат СРЗП;
	
КонецФункции

Функция ПолучитьАктивныйТарифРасчетаЗП(ДатаРасчета, СхемаРасчетаЗП) Экспорт
	
	ТарифРасчетаЗП = Справочники.зпТарифыРасчетаЗП.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	зпАктивныйТарифРасчетаЗПСрезПоследних.ТарифРасчетаЗП КАК ТарифРасчетаЗП
		|ИЗ
		|	РегистрСведений.зпАктивныйТарифРасчетаЗП.СрезПоследних(&ТекДата, СхемаРасчетаЗП = &СхемаРасчетаЗП) КАК зпАктивныйТарифРасчетаЗПСрезПоследних";
	
	Запрос.УстановитьПараметр("ТекДата", ДатаРасчета);
	Запрос.УстановитьПараметр("СхемаРасчетаЗП", СхемаРасчетаЗП);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ТарифРасчетаЗП = ВыборкаДетальныеЗаписи.ТарифРасчетаЗП; 			
		
	КонецЕсли;
	
	Возврат ТарифРасчетаЗП;
	
КонецФункции

//Геннадий 15.04.2021 ->
//вызов процедуры возможен из новаОтчетВодителя и КорректировкаУслугСД
//входящие параметры разные
Функция ПолучитьКатегориюЗаказа(СхемаРасчетаЗП, ВыборкаДетальныеЗаписи) Экспорт
	
	ДанныеКатегорииЗаказа = Новый Структура("КатегорияЗаказа, Показатель", Неопределено, Неопределено);
	
	//10.1.2 СхемаКатегорийЗаказов = СхемаРасчетаЗП.СхемыКатегорийЗаказов.СхемаКатегорий = определяем схему категорий заказов, по типу заказа
	СхемаКатегорийЗаказов = Справочники.зпСхемыКатегорийЗаказов.ПустаяСсылка();
	
	Для каждого СтрокаТЧ Из СхемаРасчетаЗП.СхемыКатегорийЗаказов Цикл
		
		Если СтрокаТЧ.ТипЗаказа = ВыборкаДетальныеЗаписи.ТипЗаказа Тогда				
			СхемаКатегорийЗаказов = СтрокаТЧ.СхемаКатегорий;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//10.2 Определяем Категорию заказа, по определенной в п. 10.1 СхемеКатегорий (владельцу справочника КатегорииЗаказов)
	Если НЕ СхемаКатегорийЗаказов.Пустая() Тогда
		
		//Асеев 04.07.2023 (Задача № 4101)>>>
		Если ВыборкаДетальныеЗаписи.УровеньОбслуживанияЗаказа <> Перечисления.УровниОбслуживания.ПустаяСсылка()
			И ВыборкаДетальныеЗаписи.УровеньОбслуживанияЗаказа <> Перечисления.УровниОбслуживания.СтандартныйУровень Тогда
			ВыборкаСпр = Справочники.зпКатегорииЗаказов.Выбрать(,СхемаКатегорийЗаказов,Новый Структура("УровеньОбслуживания", ВыборкаДетальныеЗаписи.УровеньОбслуживанияЗаказа),);
			Пока ВыборкаСпр.Следующий() Цикл
				Если Не ВыборкаСпр.ПометкаУдаления Тогда
					КатегорияЗаказа = ВыборкаСпр.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если КатегорияЗаказа = Неопределено Тогда
				ВидПоказателяКатегорийЗаказов = Перечисления.зпВидыПоказателейКатегорийЗаказов.ВесЗаказа;
				Показатель = ВыборкаДетальныеЗаписи.ТарифицируемыйВес;
				ВыборкаСпр = Справочники.зпКатегорииЗаказов.Выбрать(,СхемаКатегорийЗаказов,,);
				Пока ВыборкаСпр.Следующий() Цикл
					Если ВыборкаСпр.ПометкаУдаления Тогда
						Продолжить;
					КонецЕсли;
					Для каждого СтрокаТЧ Из ВыборкаСпр.ПоказателиКатегории Цикл
						Если СтрокаТЧ.ВидПоказателя = ВидПоказателяКатегорийЗаказов Тогда
							Если ТипЗнч(Показатель) = Тип("Число") 
								И ТипЗнч(СтрокаТЧ.Значение1) = Тип("Число")
								И ТипЗнч(СтрокаТЧ.Значение2) = Тип("Число") Тогда
								//Если (Показатель >= СтрокаТЧ.Значение1) И (Показатель < СтрокаТЧ.Значение2) Тогда
								//CeHbKA #4101 30.10.2020 по письму Re: ЗП 2020, карты в конструкторе карт Яндекса от 29.10.2020
								//Геннадий #4101 20.04.2021, исправлено на 0.001
								Показатель = ?(Показатель = 0, 0.001, Показатель);
								Если (Показатель > СтрокаТЧ.Значение1) И (Показатель <= СтрокаТЧ.Значение2) Тогда
									//CeHbKA #4101 30.10.2020 по письму Re: ЗП 2020, карты в конструкторе карт Яндекса от 29.10.2020
									КатегорияЗаказа = ВыборкаСпр.Ссылка;
									Прервать;
								КонецЕсли; 
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			//Асеев 04.07.2023 (Задача № 4101)<<<		
			
			//10.2.1 Определяем, какой именно брать показатель (Вес, Объем, или ЗначениеРеквизита), 
			//по СхемаКатегорийЗаказов.ВидыПоказателейКатегорийЗаказов.ВидПоказателяКатегорийЗаказов, 
			//где СхемаКатегорийЗаказов.ВидыПоказателейКатегорийЗаказов.ВидПоказателяДоступен = Истина. 
			//Здесь ТЧ, а не реквизит, но предполагается, что по схеме категорий будет доступен один вид показателя (в ТЧ будет одна строка с ВидПоказателяДоступен = Истина).
			ВидПоказателяКатегорийЗаказов = Перечисления.зпВидыПоказателейКатегорийЗаказов.ПустаяСсылка();
			ИмяРеквизита = "";
			
			Для каждого СтрокаТЧ Из СхемаКатегорийЗаказов.ВидыПоказателейКатегорийЗаказов Цикл
				
				Если СтрокаТЧ.ВидПоказателяДоступен Тогда
					ВидПоказателяКатегорийЗаказов = СтрокаТЧ.ВидПоказателяКатегорийЗаказов;		
					ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
				КонецЕсли;
				
			КонецЦикла; 
			
			//10.2.2 По полученному ВидуПоказателяКатегорийЗаказов определяем Категорию заказа
			Если НЕ ВидПоказателяКатегорийЗаказов.Пустая() Тогда
				
				//10.2.2.1 Определяем, какой именно показатель используем
				Показатель = Неопределено;
				
				//10.2.2.1.1 Если ТипЗаказа = Доставка и ВидПоказателяКатегорииЗаказов = ПеречислениеСсылка.зпВидыПоказателейКатегорийЗаказов.ВесЗаказа, 
				//то берем ДополнительныеПараметрыЗаказа.ТарифицируемыйВес (по РС.зпИсходныеДанныеРасчетаЗППоЗаказам.Заказ) в качестве Показателя = ВесЗаказа
				Если ВыборкаДетальныеЗаписи.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка
					И ВидПоказателяКатегорийЗаказов = Перечисления.зпВидыПоказателейКатегорийЗаказов.ВесЗаказа Тогда
					//берем ДополнительныеПараметрыЗаказа.ТарифицируемыйВес (по РС.зпИсходныеДанныеРасчетаЗППоЗаказам.Заказ) в качестве Показателя = ВесЗаказа
					Показатель = ВыборкаДетальныеЗаписи.ТарифицируемыйВес;
				КонецЕсли; 
				
				//10.2.2.1.2 Если ТипЗаказа = Доставка и ВидПоказателяКатегорииЗаказов = ПеречислениеСсылка.зпВидыПоказателейКатегорийЗаказов.ЗначениеРеквизитаЗаказа,
				//то берем значения РТиУ.<НаименованиеРеквизита> (НаименованиеРеквизита берем из  ИмяРеквизита,
				//в найденной в п. 10.2.1 строке ТЧ.ВидыПоказателейКатегорийЗаказов) в качестве Показателя = значения произвольного реквизита РТиУ
				Если ВыборкаДетальныеЗаписи.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка
					И ВидПоказателяКатегорийЗаказов = Перечисления.зпВидыПоказателейКатегорийЗаказов.ЗначениеРеквизитаЗаказа Тогда
					//берем значения РТиУ.<НаименованиеРеквизита> (НаименованиеРеквизита берем из  ИмяРеквизита, в найденной в п. 10.2.1 строке ТЧ.ВидыПоказателейКатегорийЗаказов) в качестве Показателя = значения произвольного реквизита РТиУ
					Попытка
						Показатель = ?(ИмяРеквизита <> "", ВыборкаДетальныеЗаписи.Заказ[ИмяРеквизита], Неопределено);		
					Исключение					
					КонецПопытки; 
				КонецЕсли; 
				
				//10.2.2.1.3 Если ТипЗаказа = Забор и ВидПоказателяКатегорииЗаказов = ПеречислениеСсылка.зпВидыПоказателейКатегорийЗаказов.ЗначениеРеквизитаЗаказа,
				//то берем значения Забор.<НаименованиеРеквизита> (НаименованиеРеквизита берем из  ИмяРеквизита, в найденной в п. 10.2.1 строке ТЧ.ВидыПоказателейКатегорийЗаказов)
				//в качестве Показателя = значения произвольного реквизита Забор
				Если ВыборкаДетальныеЗаписи.ТипЗаказа = Перечисления.ТипыЗаказов.Забор
					И ВидПоказателяКатегорийЗаказов = Перечисления.зпВидыПоказателейКатегорийЗаказов.ЗначениеРеквизитаЗаказа Тогда
					//берем значения Забор.<НаименованиеРеквизита> (НаименованиеРеквизита берем из  ИмяРеквизита, в найденной в п. 10.2.1 строке ТЧ.ВидыПоказателейКатегорийЗаказов) в качестве Показателя = значения произвольного реквизита Забор
					Попытка
						Показатель = ?(ИмяРеквизита <> "", ВыборкаДетальныеЗаписи.Заказ[ИмяРеквизита], Неопределено);		
					Исключение					
					КонецПопытки; 
				КонецЕсли; 
				
				//10.2.2.1.4 Если ТипЗаказа = Забор и ВидПоказателяКатегорииЗаказов = ПеречислениеСсылка.зпВидыПоказателейКатегорийЗаказов.ОбъемЗаказа,
				//то берем Забор.ОбъемЗабора в качестве Показателя = ОбъемЗаказа
				Если ВыборкаДетальныеЗаписи.ТипЗаказа = Перечисления.ТипыЗаказов.Забор
					И ВидПоказателяКатегорийЗаказов = Перечисления.зпВидыПоказателейКатегорийЗаказов.ОбъемЗаказа Тогда
					//берем Забор.ОбъемЗабора в качестве Показателя = ОбъемЗаказа
					Показатель = ВыборкаДетальныеЗаписи.ОбъемЗабора;
				КонецЕсли; 
				
				//10.2.2.2 По найденному в п.10.2.2.1 Показателю - ищем КатегориюЗаказа среди элементов справочника зпКатегорииЗаказов,
				//подчиненных владельцу, определенному на этапе 10.1.2. Ищем среди НЕ помеченных на удаление элементов,
				//где в ТЧ.ПоказателиКатегории есть ВидПоказателя равный ВидуПоказателя, определенному на этапе 10.2.1.
				//Правила сравнения показателя: Показатель >= зпКатегорииЗаказов.ПоказателиКатегории.Значение1 и Показатель < зпКатегорииЗаказов.ПоказателиКатегории.Значение2.
				Если Показатель <> Неопределено Тогда
					ВыборкаСпр = Справочники.зпКатегорииЗаказов.Выбрать(,СхемаКатегорийЗаказов,,);
					Пока ВыборкаСпр.Следующий() Цикл
						Если ВыборкаСпр.ПометкаУдаления Тогда
							Продолжить;
						КонецЕсли;
						Для каждого СтрокаТЧ Из ВыборкаСпр.ПоказателиКатегории Цикл
							Если СтрокаТЧ.ВидПоказателя = ВидПоказателяКатегорийЗаказов Тогда
								Если ТипЗнч(Показатель) = Тип("Число") 
									И ТипЗнч(СтрокаТЧ.Значение1) = Тип("Число")
									И ТипЗнч(СтрокаТЧ.Значение2) = Тип("Число") Тогда
									//Если (Показатель >= СтрокаТЧ.Значение1) И (Показатель < СтрокаТЧ.Значение2) Тогда
									//CeHbKA #4101 30.10.2020 по письму Re: ЗП 2020, карты в конструкторе карт Яндекса от 29.10.2020
									//Геннадий #4101 20.04.2021, исправлено на 0.001
									Показатель = ?(Показатель = 0, 0.001, Показатель);
									Если (Показатель > СтрокаТЧ.Значение1) И (Показатель <= СтрокаТЧ.Значение2) Тогда
										//CeHbKA #4101 30.10.2020 по письму Re: ЗП 2020, карты в конструкторе карт Яндекса от 29.10.2020
										КатегорияЗаказа = ВыборкаСпр.Ссылка;
										Прервать;
									КонецЕсли; 
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	ДанныеКатегорииЗаказа.Показатель 		= Показатель;
	ДанныеКатегорииЗаказа.КатегорияЗаказа 	= КатегорияЗаказа;

	Возврат ДанныеКатегорииЗаказа;	
	
КонецФункции
//Геннадий 15.04.2021 <-

Процедура ВводДокументаФиксацииМесяца(КодРегиона) Экспорт
	
	Сейчас = ТекущаяДата();
	
	Регион = Справочники.РегиональныеТерминалы.НайтиПоКоду(КодРегиона);
	ПериодРасчета = ДобавитьМесяц(Сейчас, -1);
	
	Док = Документы.зпФиксацияМесяца.СоздатьДокумент();
	Док.Дата = Сейчас;
	Результат = Док.ЗаполнитьИРассчитать(Регион, ПериодРасчета);
	Если Результат = "" Тогда
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		Сообщить(Результат);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПередЗаписьюРегистраСведенийЗППередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Асеев 09.02.2024 (Задача № 5227)>>>
	Если РегистрыСведений.РежимыПроверокДокументовПриИзменении.ПолучитьРазрешенияДокумента(Источник.Отбор.Регистратор.Значение, Перечисления.ОбластиПроверокИзмененияДанных.зп_РасчетЗП) Тогда
		Возврат;
	КонецЕсли;
	//Асеев 09.02.2024 (Задача № 5227)<<<
	
	Если Источник.Количество() Тогда
		//Проведение
		ТаблицаКонтроля = Источник.Выгрузить(, "Регион,ДатаРасчета");
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаКонтроля", ТаблицаКонтроля);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаКонтроля.Регион КАК Регион,
		|	НАЧАЛОПЕРИОДА(ТаблицаКонтроля.ДатаРасчета, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ТаблицаКонтроля.ДатаРасчета, МЕСЯЦ) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТ_Контроль
		|ИЗ
		|	&ТаблицаКонтроля КАК ТаблицаКонтроля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	зпЗакрытыеРасчетныеПериоды.РасчетныйПериод КАК РасчетныйПериод
		|ИЗ
		|	РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТ_Контроль.Регион КАК Регион,
		|			ВТ_Контроль.НачалоПериода КАК НачалоПериода,
		|			ВТ_Контроль.ОкончаниеПериода КАК ОкончаниеПериода,
		|			МАКСИМУМ(зпЗакрытыеРасчетныеПериоды.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контроль КАК ВТ_Контроль
		|				ПО зпЗакрытыеРасчетныеПериоды.Регион = ВТ_Контроль.Регион
		|					И (зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ ВТ_Контроль.НачалоПериода И ВТ_Контроль.ОкончаниеПериода)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ_Контроль.Регион,
		|			ВТ_Контроль.НачалоПериода,
		|			ВТ_Контроль.ОкончаниеПериода) КАК ВЗ_МаксПериоды
		|		ПО зпЗакрытыеРасчетныеПериоды.Период = ВЗ_МаксПериоды.Период
		|			И зпЗакрытыеРасчетныеПериоды.Регион = ВЗ_МаксПериоды.Регион
		|			И (зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ ВЗ_МаксПериоды.НачалоПериода И ВЗ_МаксПериоды.ОкончаниеПериода)
		|			И (зпЗакрытыеРасчетныеПериоды.ПериодЗакрыт)";
	Иначе
		//ОтменаПроведения
		ИмяРегистра = Источник.Метаданные().Имя;//зпИсходныеДанныеРасчетаЗППоЗаказам
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПсевдонимРегистра.Регион КАК Регион,
		|	НАЧАЛОПЕРИОДА(ПсевдонимРегистра.ДатаРасчета, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ПсевдонимРегистра.ДатаРасчета, МЕСЯЦ) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТ_Контроль
		|ИЗ
		|	РегистрСведений." + ИмяРегистра + " КАК ПсевдонимРегистра
		|ГДЕ
		|	ПсевдонимРегистра.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	зпЗакрытыеРасчетныеПериоды.РасчетныйПериод КАК РасчетныйПериод
		|ИЗ
		|	РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТ_Контроль.Регион КАК Регион,
		|			ВТ_Контроль.НачалоПериода КАК НачалоПериода,
		|			ВТ_Контроль.ОкончаниеПериода КАК ОкончаниеПериода,
		|			МАКСИМУМ(зпЗакрытыеРасчетныеПериоды.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контроль КАК ВТ_Контроль
		|				ПО зпЗакрытыеРасчетныеПериоды.Регион = ВТ_Контроль.Регион
		|					И (зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ ВТ_Контроль.НачалоПериода И ВТ_Контроль.ОкончаниеПериода)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ_Контроль.Регион,
		|			ВТ_Контроль.НачалоПериода,
		|			ВТ_Контроль.ОкончаниеПериода) КАК ВЗ_МаксПериоды
		|		ПО зпЗакрытыеРасчетныеПериоды.Период = ВЗ_МаксПериоды.Период
		|			И зпЗакрытыеРасчетныеПериоды.Регион = ВЗ_МаксПериоды.Регион
		|			И (зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ ВЗ_МаксПериоды.НачалоПериода И ВЗ_МаксПериоды.ОкончаниеПериода)
		|			И (зпЗакрытыеРасчетныеПериоды.ПериодЗакрыт)";
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Сообщить("Расчетный период з/п закрыт " + Формат(Выборка.РасчетныйПериод, "ДФ='MMMM yyyy'"));
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПередЗаписьюДокументаЗП(Отказ, РежимЗаписи, ДокументОбъект, НоваяСсылка = Неопределено) Экспорт
	
	//Асеев 09.02.2024 (Задача № 5227)>>>
	НовыйДокумент = ДокументОбъект.ЭтоНовый();
	Если НовыйДокумент Тогда
		Ссылка = НоваяСсылка;
	Иначе
		Ссылка = ДокументОбъект.Ссылка;
	КонецЕсли;
	ДатаДвижения = ДокументОбъект.Дата;
	
	ТипДокумента = ТипЗнч(ДокументОбъект);
	Если ТипДокумента = Тип("ДокументОбъект.зпФиксацияДополнительныхНачисленийУдержаний") Тогда
		КонтрольМинималки = Ложь;
		ПроверкаОдногоПериодаРасчета = Ложь;
		Регион = ДокументОбъект.Регион;
		ДатаРасчета = ДокументОбъект.ПериодРасчета;
		ИмяРеквизитаДатаРасчета = "ПериодРасчета";
		ИмяРеквизитаРегион = "Регион";
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.КорректировкаУслугСД") Тогда
		КонтрольМинималки = Истина;
		ПроверкаОдногоПериодаРасчета = Истина;
		//доп реквизиты>>
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗакрытиеЗаказов", ДокументОбъект.ЗакрытиеЗаказов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗакрытиеЗаказов.ТерминалДоставки КАК Регион,
		|	ЗакрытиеЗаказов.ДатаЗакрытия КАК ДатаРасчета
		|ИЗ
		|	Документ.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
		|ГДЕ
		|	ЗакрытиеЗаказов.Ссылка = &ЗакрытиеЗаказов";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Регион = Выборка.Регион;
		ДатаРасчета = Выборка.ДатаРасчета;
		//доп реквизиты<<
		ИмяРеквизитаДатаРасчета = "ЗакрытиеЗаказов.ДатаЗакрытия";
		ИмяРеквизитаРегион = "ЗакрытиеЗаказов.ТерминалДоставки";
	Иначе
		КонтрольМинималки = Истина;
		ПроверкаОдногоПериодаРасчета = Ложь;
		Регион = ДокументОбъект.ТерминалДоставки;
		ДатаРасчета = ДокументОбъект.ДатаЗакрытия;
		ИмяРеквизитаДатаРасчета = "ДатаЗакрытия";
		ИмяРеквизитаРегион = "ТерминалДоставки";
	КонецЕсли;
	
	Если НовыйДокумент Тогда
		РазрешенияДокумента = Новый Массив;
	Иначе
		РазрешенияДокумента = РегистрыСведений.РежимыПроверокДокументовПриИзменении.ПолучитьРазрешенияДокумента(Ссылка);
	КонецЕсли;
	Если РазрешенияДокумента.Найти(Перечисления.ОбластиПроверокИзмененияДанных.зп_РасчетЗП) = Неопределено Тогда
		//контроль расчета з/п
		Если НовыйДокумент Или ПроверкаОдногоПериодаРасчета Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			//проверка одного периода расчета
			ДатаРасчета2 = Неопределено;
		Иначе
			//дополнительная проверка периода расчета до записи, если он отличается от текущего
			ИмяДокумента = ДокументОбъект.Метаданные().Имя;
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
			Запрос.УстановитьПараметр("Регион", Регион);
			//Запрос.Текст =
			//"ВЫБРАТЬ
			//|	ПсевдонимДокумента.ДатаЗакрытия КАК ДатаРасчета,
			//|	ПсевдонимДокумента.ТерминалДоставки КАК Регион
			//|ИЗ
			//|	Документ.ЗакрытиеЗаказов КАК ПсевдонимДокумента
			//|ГДЕ
			//|	ПсевдонимДокумента.Ссылка = &Ссылка
			//|	И ПсевдонимДокумента.Проведен
			//|	И (ПсевдонимДокумента.ДатаЗакрытия <> &ДатаРасчета
			//|			ИЛИ ПсевдонимДокумента.ТерминалДоставки <> &Регион)";
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПсевдонимДокумента." + ИмяРеквизитаДатаРасчета + " КАК ДатаРасчета,
			|	ПсевдонимДокумента." + ИмяРеквизитаРегион + " КАК Регион
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК ПсевдонимДокумента
			|ГДЕ
			|	ПсевдонимДокумента.Ссылка = &Ссылка
			|	И ПсевдонимДокумента.Проведен
			|	И (ПсевдонимДокумента." + ИмяРеквизитаДатаРасчета + " <> &ДатаРасчета
			|			ИЛИ ПсевдонимДокумента." + ИмяРеквизитаРегион + " <> &Регион)";
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ДатаРасчета2 = Неопределено;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ДатаРасчета2 = Выборка.ДатаРасчета;
				Регион2 = Выборка.Регион;
			КонецЕсли;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регион", Регион);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета));
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(ДатаРасчета));
		Если ДатаРасчета2 = Неопределено Тогда
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	зпЗакрытыеРасчетныеПериоды.РасчетныйПериод КАК РасчетныйПериод
			|ИЗ
			|	РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
			|			зпЗакрытыеРасчетныеПериоды.Период КАК Период
			|		ИЗ
			|			РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
			|		ГДЕ
			|			зпЗакрытыеРасчетныеПериоды.Регион = &Регион
			|			И зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|		
			|		УПОРЯДОЧИТЬ ПО
			|			Период УБЫВ) КАК ВЗ_МаксПериоды
			|		ПО зпЗакрытыеРасчетныеПериоды.Период = ВЗ_МаксПериоды.Период
			|			И (зпЗакрытыеРасчетныеПериоды.Регион = &Регион)
			|			И (зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
			|			И (зпЗакрытыеРасчетныеПериоды.ПериодЗакрыт)";
		Иначе
			Запрос.УстановитьПараметр("Регион2", Регион2);
			Запрос.УстановитьПараметр("НачалоПериода2", НачалоМесяца(ДатаРасчета2));
			Запрос.УстановитьПараметр("ОкончаниеПериода2", КонецМесяца(ДатаРасчета2));
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	зпЗакрытыеРасчетныеПериоды.РасчетныйПериод КАК РасчетныйПериод
			|ИЗ
			|	РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ВЗ_Контроль.Регион КАК Регион,
			|			ВЗ_Контроль.НачалоПериода КАК НачалоПериода,
			|			ВЗ_Контроль.ОкончаниеПериода КАК ОкончаниеПериода,
			|			МАКСИМУМ(ВЗ_Контроль.Период) КАК Период
			|		ИЗ
			|			(ВЫБРАТЬ
			|				&Регион КАК Регион,
			|				&НачалоПериода КАК НачалоПериода,
			|				&ОкончаниеПериода КАК ОкончаниеПериода,
			|				зпЗакрытыеРасчетныеПериоды.Период КАК Период
			|			ИЗ
			|				РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
			|			ГДЕ
			|				зпЗакрытыеРасчетныеПериоды.Регион = &Регион
			|				И зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|			
			|			ОБЪЕДИНИТЬ ВСЕ
			|			
			|			ВЫБРАТЬ
			|				&Регион2,
			|				&НачалоПериода2,
			|				&ОкончаниеПериода2,
			|				зпЗакрытыеРасчетныеПериоды.Период
			|			ИЗ
			|				РегистрСведений.зпЗакрытыеРасчетныеПериоды КАК зпЗакрытыеРасчетныеПериоды
			|			ГДЕ
			|				зпЗакрытыеРасчетныеПериоды.Регион = &Регион2
			|				И зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ &НачалоПериода2 И &ОкончаниеПериода2) КАК ВЗ_Контроль
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ВЗ_Контроль.НачалоПериода,
			|			ВЗ_Контроль.ОкончаниеПериода,
			|			ВЗ_Контроль.Регион) КАК ВЗ_МаксПериоды
			|		ПО зпЗакрытыеРасчетныеПериоды.Период = ВЗ_МаксПериоды.Период
			|			И зпЗакрытыеРасчетныеПериоды.Регион = ВЗ_МаксПериоды.Регион
			|			И (зпЗакрытыеРасчетныеПериоды.РасчетныйПериод МЕЖДУ ВЗ_МаксПериоды.НачалоПериода И ВЗ_МаксПериоды.ОкончаниеПериода)
			|			И (зпЗакрытыеРасчетныеПериоды.ПериодЗакрыт)";
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Отказ = Истина;
			Сообщить("Расчетный период з/п закрыт " + Формат(Выборка.РасчетныйПериод, "ДФ='MMMM yyyy'") + " (контроль документа)");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если КонтрольМинималки И РазрешенияДокумента.Найти(Перечисления.ОбластиПроверокИзмененияДанных.зп_ФиксацияЗП) = Неопределено Тогда
		//контроль минималки
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Если РегистрыСведений.зпИсходныеДанныеРасчетаМинимальнойЗП.ПолнаяБлокировкаФормирования(Регион, ДатаРасчета, ДатаДвижения) = Истина Тогда
				Отказ = Истина;
				Сообщить("Произведена фиксация месяца по минимальной з/п " + Формат(ДатаРасчета, "ДФ='MMMM yyyy'") + " (контроль документа)");
				Возврат;
			Конецесли;
		Иначе//ОтменаПроведения
			ДатаРасчета = РегистрыСведений.зпИсходныеДанныеРасчетаМинимальнойЗП.ПолучитьДатуРасчетаЗапрещенныхКУдалениюЗаписей(Ссылка);
			Если ДатаРасчета = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Отказ = Истина;
			Сообщить("Произведена фиксация месяца по минимальной з/п " + Формат(ДатаРасчета, "ДФ='MMMM yyyy'") + " (контроль документа)");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Асеев 09.02.2024 (Задача № 5227)<<<
	
КонецПроцедуры

