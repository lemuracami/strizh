
Процедура ЗагрузкаДанныхСТСД(Ид, ТЗШтрихкодыЗаказов, СерверТСД = Неопределено, УдалятьДокументыССервера = Неопределено, Склад = Неопределено) Экспорт
	Если Ид = "" Тогда
		Возврат;
	КонецЕсли;	
	
	Спис = Новый СписокЗначений;
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(ИД, Обработка, Объект);
	
	Если СерверТСД <> Неопределено Тогда
		Если СерверТСД.ВерсияMobileSmarts = Перечисления.ВерсииMobileSmarts.v3 Тогда
			Попытка
				Объект.Драйвер.StorageConnector.SelectCurrentApp(СокрЛП(СерверТСД.v3_КодБД));
			Исключение
				
			КонецПопытки;	
		КонецеСли;	
	КонецеСли;	
	Если Объект = Неопределено Тогда
		#Если Клиент Тогда
		Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	СписокИд = Новый СписокЗначений;
	ДокументыТСДНаСервере = Объект.Драйвер.ПолучитьДокументы(Неопределено);
	
	
	ШтрихкодыГабаритов = ПолучитьШтрихкодыИзмеренияГабаритов();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	ЗагрузкаСТСД.Ссылка КАК Ссылка,
	            |	ЗагрузкаСТСД.ТипЗагрузкиТСД КАК ТипЗагрузкиТСД
	            |ИЗ
	            |	Документ.ЗагрузкаСТСД КАК ЗагрузкаСТСД
	            |ГДЕ
	            |	НЕ ЗагрузкаСТСД.ТипЗагрузкиТСД В (ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ВозвратКомитенту), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.Приход), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.КорректировкиВозвратов), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ПогрузкаВАвто), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ПогрузкаВАвтоФактическая), ЗНАЧЕНИЕ(Перечисление.ТипыЗагрузкиТСД.ПогрузкаВАвтоНезагруженныеЗаказы))
	            |	И ЗагрузкаСТСД.СерверТСД = &СерверТСД
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ЗагрузкаСТСД.Дата УБЫВ";
    Зап.УстановитьПараметр("СерверТСД",?(СерверТСД<>Неопределено,СерверТСД,Справочники.СерверыWiFiТСД.ПустаяСсылка()));  
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
	    ТекТипЗагрузки = Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRoute;
	Иначе	
		ТекТипЗагрузки = Рез.Выгрузить()[0].ТипЗагрузкиТСД;
	КонецЕсли;
	    				
	
	Если Не ЗначениеЗаполнено(ТекТипЗагрузки) Или ТекТипЗагрузки = Перечисления.ТипыЗагрузкиТСД.Аксиомус Тогда
		ТекТипЗагрузки = Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRoute;
	КонецеСли;	
	
	КолЗагДок = 0;
	Д1 = Истина;
	Сообщить(Строка(СерверТСД));
	Для Инд = 0 По ДокументыТСДНаСервере.Количество-1 Цикл
		
		
		ТабИзмерений = Новый ТаблицаЗначений;
		ТабИзмерений.Колонки.Добавить("Заказ");
		ТабИзмерений.Колонки.Добавить("Сторона1");
		ТабИзмерений.Колонки.Добавить("Сторона2");
		ТабИзмерений.Колонки.Добавить("Сторона3");
		ТабИзмерений.Колонки.Добавить("Произведение");
		ТабИзмерений.Колонки.Добавить("Отмена");
		
		ДокументТСД = ДокументыТСДНаСервере.Элемент(Инд);
		Если ДокументТСД.СтрокиПлан.Количество = 0 или Найти(ДокументТСД.Ид,"new") > 0 Тогда
			ТаблицаДокументаТСД = "СтрокиФакт";
		КонецеСли;
		МасЗ = Новый Массив;
		
		
		ЗапИд = Новый Запрос;
		
		ЗапИд.Текст = "ВЫБРАТЬ
		              |	ЗагрузкаСТСД.Ссылка
		              |ИЗ
		              |	Документ.ЗагрузкаСТСД КАК ЗагрузкаСТСД
		              |ГДЕ
		              |	ЗагрузкаСТСД.Ид_Документа = &Ид_Документа";
		ЗапИд.УстановитьПараметр("Ид_Документа", ДокументТСД.Ид);
		РезИд = ЗапИд.Выполнить();
		
		Если Не РезИд.Пустой() Тогда
			#Если Клиент Тогда
				Сообщить("Документ ID " + ДокументТСД.Ид + " от " + Формат(ДокументТСД.ДатаСоздания, "ДЛФ=DD") + " уже был загружен!"); 
			#КонецеСли
			СписокИд.Добавить(ДокументТСД.Ид);
			Продолжить;
		КонецеСли;	
		
		
		Д = Документы.ЗагрузкаСТСД.СоздатьДокумент();
		
		Д.ИмяДокумента      = ДокументТСД.Имя;
		Д.ДатаДокумента = ДокументТСД.ДатаСоздания;
		Если СерверТСД.ВерсияMobileSmarts = Перечисления.ВерсииMobileSmarts.v3 Тогда
			Д.ДатаИзменения = ДокументТСД.ВремяИзменения;
		КонецЕсли;	
		Д.Ид_Документа   = ДокументТСД.Ид;
		Д.Изменен       = ДокументТСД.Изменен;
		Д.Завершен      = ДокументТСД.Завершен;
		Д.Пользователь = ДокументТСД.ИмяПользователя;
		Д.Ид_Терминала = ДокументТСД.DeviceId;
		Д.IP          = ДокументТСД.DeviceIP;
		Д.СтрокФакт   = ДокументТСД.СтрокиФакт.Количество;
		Д.ТерминалПриема = Справочники.РегиональныеТерминалы.МоскваСтриж;
		Если Склад <> Неопределено Тогда
			Д.Склад = Склад;			
			// Михушкин - 01.06.2017 - костыль для Терминала доставки по Питеру --->> 
			Если Склад = Справочники.Склады.НайтиПоКоду("000000006") Тогда	
				Д.ТерминалПриема = Справочники.РегиональныеТерминалы.СПбСтриж;			
			КонецЕсли;
			// <<--- Михушкин 
		КонецЕсли;	
		
		Скл = Неопределено;
		Если ЗначениеЗаполнено(Склад) Тогда
			Скл = Склад.Ссылка;
		КонецЕсли;	
		
		Д.ЛинейкаИзмеренияГабаритов = ПолучитьАктуальнуюЛинейкуИзмерененияГабаритов(Скл);
		Если СерверТСД <> Неопределено Тогда
			Д.СерверТСД = СерверТСД;
		КонецеСли;	
		
		Сообщить(ДокументТСД.Ид);
		//МасНеопознанныхШК = Новый Массив;
		ТекЗаказ = Неопределено;
		
		//// МАС - 20.07.2017 - №1428 --->>
		ФлПогрузкаВАвто = Ложь;
		//ФлБэйджСотрудника = Ложь;
		ФлПогрузкаВАвтоНезагруженныеЗаказы = Ложь;
		//// <<--- МАС 
		АктуальныйРежимТСД = Неопределено;
		
		Для Инд1 = 0 По ДокументТСД["СтрокиФакт"].Количество - 1 Цикл
			
			СтрокаТаблицыДокумента = ДокументТСД["СтрокиФакт"].Элемент(Инд1);
			Сообщить(Строка(Инд1));
			Если СтрокаТаблицыДокумента.ProductID = "*" Тогда
				Шк = ПолучитьШКИзСтрокиДокумента(СтрокаТаблицыДокумента);
				С_ШК = ПроверкаШКНаСервисный(ШК);
				
				Если С_ШК <> Неопределено Тогда					
					АктуальныйРежимТСД = С_ШК;
					// МАС - 20.07.2017 - №1428 --->> 
					НСервШК = Д.СервисныеШК.Добавить();
					НСервШК.Режим = С_ШК;
					НСервШК.Штрихкод = ШК;				
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвтоНезагруженныеЗаказы Тогда		
						ФлПогрузкаВАвтоНезагруженныеЗаказы = Истина;											
					КонецЕсли;
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто Тогда		
						ФлПогрузкаВАвто = Истина;											
					КонецЕсли;
					// <<--- МАС 	
					
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПриездАвтоКомитента Тогда
						Д.ЭтоПриходПринципала = Истина;
						Продолжить;
					Иначе	
						ТекТипЗагрузки = С_ШК;
						Если СтрДлина(ШК) <> 12 И Лев(ШК, 7) <> "3100000" И Лев(ШК, 7) <> "3100001" И Лев(ШК, 7) <> "3100002" Тогда
							Продолжить;
						КонецеСли;	
					КонецеСли;	
				КонецеСли;	
				Нов = Д.Штрихкоды.Добавить();
				Нов.Штрихкод = Шк;
				Нов.КоличествоМест = СтрокаТаблицыДокумента.КоличествоФакт;
				НайЗак = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
				Нов.Вес = СтрокаТаблицыДокумента.получитьполе("weight");
				Нов.ДатаВремя = СтрокаТаблицыДокумента.получитьполе("TimeStamp");
				Нов.Флаг = СтрокаТаблицыДокумента.получитьполе("Tag");
				Нов.НеизвестныйТовар = Истина;
				
				// Якурнов 27.08.2018 10:58:41
				//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
				
				//Если ЗначениеЗаполнено(ШК) Тогда
				//    ////+++++Серегин М.В. 19.11.2015 13:13:59 старый код 
				//    //НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Шк);
				//    //+++++Серегин М.В. 19.11.2015 13:26:39 новый
				//    Если Лев(Шк,4) = "3700" И (СтрДлина(Шк) = 12 Или СтрДлина(Шк) = 13) Тогда
				//        Шк = Прав(ШК,СтрДлина(Шк)-2); //убираем 37
				//        Шк = Формат(Число(Шк),"ЧГ="); //убираем 0
				//        Шк = Лев(ШК,СтрДлина(Шк)-1);  //убираем контрольный символ
				//        НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Шк); //ищем реализацию по номеру
				//    Иначе
				//        НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Шк);
				//    КонецЕсли;
				//    //-----Серегин М.В. 19.11.2015 13:14:03 
				//	
				//	Если Найзак.Пустая() Тогда
				//		НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", Шк);
				//	КонецеСли;
				//	
				//	Если Найзак.Пустая() И СтрДлина(ШК) <> 6 Тогда
				//		НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("НомерВнешнегоЗаказа", Лев(Шк, СтрДлина(ШК) - 2));
				//	КонецеСли;	
				//	
				//	Нов.Заказ = НайЗак.Ссылка;
				//	// Михушкин - 24.06.2016 - поиск заказов в РС ШтрихкодыЗаказов, если не находит по внешнему номеру --->> 
				//	Если Найзак.Пустая() Тогда											
				//		ЗапросШК = Новый Запрос("ВЫБРАТЬ
				//		                        |	ШтрихкодыЗаказов.Заказ
				//		                        |ИЗ
				//		                        |	РегистрСведений.ШтрихкодыЗаказов КАК ШтрихкодыЗаказов
				//		                        |ГДЕ
				//		                        |	ШтрихкодыЗаказов.Штрихкод = &Штрихкод");
				//		ЗапросШК.УстановитьПараметр("Штрихкод", ШК);
				//		РезШК = ЗапросШК.Выполнить().Выбрать();
				//		
				//		Если РезШК.Следующий() Тогда					
				//			Нов.Заказ = РезШК.Заказ;	
				//		КонецЕсли;	
				//	КонецЕсли;		
				//	// <<--- Михушкин						
				//КонецеСли;	
				
				Если ЗначениеЗаполнено(ШК) Тогда
					Отбор = Новый Структура("Штрихкод",ШК);
					НайденныеСтроки = ТЗШтрихкодыЗаказов.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						Нов.Заказ = НайденныеСтроки[0].Заказ; //Добавляем Заказ из ранее сформированной таблицы ТЗШтрихкодыЗаказов
						НайЗак = Нов.Заказ;
						
					КонецЕсли;
				КонецЕсли;
				//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
				
				
				
				// МАС - 18.07.2017 - №1386 - Заполнение ТЧ БэйджиСотрудников --->> 
				Если ЗначениеЗаполнено(ШК) Тогда				
					НайБэйдж = Справочники.БэйджиСотрудников.НайтиПоРеквизиту("КодСотрудника", ШК);	
					Если НЕ НайБэйдж.Пустая() Тогда
						НовБ = Д.БэйджиСотрудников.Добавить();
						НовБ.БейджСотрудника = НайБэйдж;
						НовБ.Сотрудник = НайБэйдж.Владелец;
						Если ТипЗнч(НовБ.Сотрудник) = Тип("СправочникСсылка.новаВодители") Тогда					
							НовБ.ТипУчастникаЭкипажа = Перечисления.УчастникЭкипажа.Водитель;						
						ИначеЕсли ТипЗнч(НовБ.Сотрудник) = Тип("СправочникСсылка.новаЭкспедиторы") Тогда					
							НовБ.ТипУчастникаЭкипажа = Перечисления.УчастникЭкипажа.Экспедитор;			
						КонецЕсли;		
					КонецЕсли;			
				КонецЕсли;
				// <<--- МАС
			
			
				//Если Не НайЗак.Пустая() Тогда
				//	Нов.Контрагент = НайЗак.ВладелецТовара;
				//	НайДост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
				//	Струк = Новый Структура;
				//	Струк.Вставить("Доставка", НайДост.Ссылка);
				//	НайСт = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(Д.Дата, Струк);
				//	Нов.РезультатДоставки = НайСт.РезультатДоставки;
				//	Нов.ПричинаНевыполнения = НайСт.ПричинаНевыполнения;
				//	Нов.Сумма = НайЗак.Товары.Итог("Сумма");
				//	Нов.ВнешнийНомерЗаказа = НайЗак.НомерВнешнегоЗаказа;
				//КонецЕСли;	
				
				//Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(ШК) Тогда
				//	
				//	Попытка
				//		Нов.Контрагент = НайденныеСтроки[0].ИМ;
				//		Нов.РезультатДоставки = НайденныеСтроки[0].РезультатДоставки;
				//		Нов.ПричинаНевыполнения = НайденныеСтроки[0].ПричинаНевыполнения;
				//		Нов.Сумма = 0;
				//		Нов.ВнешнийНомерЗаказа = НайденныеСтроки[0].НомерЗаказаИМ;
				//		
				//		Если НайденныеСтроки[0].Доставка = 1 Тогда
				//			Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
				//		Иначе
				//			Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
				//		КонецеСли;	
				//		
				//	Исключение
				//		ОпОш = ОписаниеОшибки() + " номер " + Нов.Заказ;
				//		lem.ОтправитьНормальноеСообщениеАдминам("ТСД", ОпОш);
				//	КонецПопытки;
				//ИначеЕсли ЗначениеЗаполнено(ШК) Тогда
					
				Если Не НайЗак.Пустая() Тогда
					Нов.Контрагент = НайЗак.ВладелецТовара;
					НайДост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
					Струк = Новый Структура;
					Струк.Вставить("Доставка", НайДост.Ссылка);
					НайСт = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(Д.Дата, Струк);
					Нов.РезультатДоставки = НайСт.РезультатДоставки;
					Нов.ПричинаНевыполнения = НайСт.ПричинаНевыполнения;
					Нов.Сумма = НайЗак.Товары.Итог("Сумма");
					Нов.ВнешнийНомерЗаказа = НайЗак.НомерВнешнегоЗаказа;
				КонецЕСли;
				
				//КонецЕсли;
				
				
				
				ТекЗаказ = Нов.Заказ;
				
				//Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
				//Если Дост.Пустая() Тогда
				//	Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
				//Иначе
				//	Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
				//КонецеСли;	
				
			Иначе
				Barcode = "";
				Шк = ПолучитьШКИзСтрокиДокумента(СтрокаТаблицыДокумента, Barcode);
				С_ШК = ПроверкаШКНаСервисный(ШК);
				Если С_ШК <> Неопределено Тогда
					//lem добавил блок с верхней ветки (блок мас)
					АктуальныйРежимТСД = С_ШК;
					// МАС - 20.07.2017 - №1428 --->> 
					НСервШК = Д.СервисныеШК.Добавить();
					НСервШК.Режим = С_ШК;
					НСервШК.Штрихкод = ШК;				
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвтоНезагруженныеЗаказы Тогда		
						ФлПогрузкаВАвтоНезагруженныеЗаказы = Истина;											
					КонецЕсли;
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто Тогда		
						ФлПогрузкаВАвто = Истина;											
					КонецЕсли;
					// <<--- МАС 	
					//lem добавил блок с верхней ветки (блок мас)
					
					Если С_ШК = Перечисления.ТипыЗагрузкиТСД.ПриездАвтоКомитента Тогда
						Д.ЭтоПриходПринципала = Истина;
						Продолжить;
					Иначе	
						ТекТипЗагрузки = С_ШК;
						Если СтрДлина(ШК) <> 12 И Лев(ШК, 7) <> "3100000"  И Лев(ШК, 7) <> "3100001" И Лев(ШК, 7) <> "3100002" Тогда
							Продолжить;
						КонецеСли;	
					КонецеСли;
				КонецеСли;	
				
				
				// МАС - 18.07.2017 - №1386 - Заполнение ТЧ БэйджиСотрудников --->> 
				Если ЗначениеЗаполнено(ШК) Тогда				
					НайБэйдж = Справочники.БэйджиСотрудников.НайтиПоРеквизиту("КодСотрудника", ШК);	
					Если НЕ НайБэйдж.Пустая() Тогда
						НовБ = Д.БэйджиСотрудников.Добавить();
						НовБ.БейджСотрудника = НайБэйдж;
						НовБ.Сотрудник = НайБэйдж.Владелец;
						Если ТипЗнч(НовБ.Сотрудник) = Тип("СправочникСсылка.новаВодители") Тогда					
							НовБ.ТипУчастникаЭкипажа = Перечисления.УчастникЭкипажа.Водитель;						
						ИначеЕсли ТипЗнч(НовБ.Сотрудник) = Тип("СправочникСсылка.новаЭкспедиторы") Тогда					
							НовБ.ТипУчастникаЭкипажа = Перечисления.УчастникЭкипажа.Экспедитор;			
						КонецЕсли;		
					КонецЕсли;			
				КонецЕсли;
				// <<--- МАС
				
				
				НайГабарит = ШтрихкодыГабаритов.Найти(Шк);
				
				Если НайГабарит = Неопределено Тогда
					Нов = Д.Штрихкоды.Добавить();
					НайЗак = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(СокрЛП(Шк));
					Нов.Заказ = НайЗак.Ссылка;
					// Марочкин - спроецировал код из верхней ветки сюда::
					// Михушкин - 24.06.2016 - поиск заказов в РС ШтрихкодыЗаказов, если не находит по внешнему номеру --->> 
					Если Найзак.Пустая() Тогда											
						ЗапросШК = Новый Запрос("ВЫБРАТЬ
						|	ШтрихкодыЗаказов.Заказ
						|ИЗ
						|	РегистрСведений.ШтрихкодыЗаказов КАК ШтрихкодыЗаказов
						|ГДЕ
						|	ШтрихкодыЗаказов.Штрихкод = &Штрихкод");
						ЗапросШК.УстановитьПараметр("Штрихкод", Barcode);
						РезШК = ЗапросШК.Выполнить().Выбрать();
						
						Если РезШК.Следующий() Тогда					
							Нов.Заказ = РезШК.Заказ;	
						КонецЕсли;	
					КонецЕсли;		
					// <<--- Михушкин
					// Марочкин - спроецировал код из верхней ветки сюда::
					
					ТекЗаказ = Нов.Заказ;	
					Нов.Штрихкод = Barcode;
					
					Нов.КоличествоМест = СтрокаТаблицыДокумента.КоличествоФакт;
					Нов.Вес = СтрокаТаблицыДокумента.получитьполе("weight");
					Нов.ДатаВремя = СтрокаТаблицыДокумента.получитьполе("TimeStamp");
					Если Не НайЗак.Пустая() Тогда
						Нов.Контрагент = НайЗак.ВладелецТовара;
						НайДост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
						Струк = Новый Структура;
						Струк.Вставить("Доставка", НайДост.Ссылка);
						НайСт = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(Д.Дата, Струк);
						Нов.РезультатДоставки = НайСт.РезультатДоставки;
						Нов.ПричинаНевыполнения = НайСт.ПричинаНевыполнения;
						Нов.Сумма = НайЗак.Товары.Итог("Сумма");						
						Нов.ВнешнийНомерЗаказа = НайЗак.НомерВнешнегоЗаказа;
					КонецЕСли;	
					
					Дост = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(НайЗак.Номер);
					Если Дост.Пустая() Тогда
						Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Самовывоз;
					Иначе
						Нов.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
					КонецеСли;
				Иначе
					ДобавитьШКИзмерения(ТабИзмерений, ШтрихкодыГабаритов, ШК, ТекЗаказ, Д.ИзмерениеГабаритов);
				КонецеСли;
			КонецЕСли;	
		КонецЦикла;
		
		
		Д.ТипЗагрузкиТСД = ТекТипЗагрузки;
		Если Д.ТипЗагрузкиТСД <> Перечисления.ТипыЗагрузкиТСД.ПриходWiFiVeeRouteСВесом Тогда
			//Для Каждого Тек Из Д.Штрихкоды Цикл
			//	Тек.Вес = 0;
			//КонецЦикла;	
		Иначе
			Если СерверТСД.СчитыватьВес Тогда
				Д.СчитыватьВес = Истина;
				Д.ЭлектронныеВесы = СерверТСД.Весы;
			КонецеСли;	
		КонецеСли;	
		
		
		//обработка габаритов
		Если ТабИзмерений.Количество() <> 0 Тогда
			Для Каждого ТекИзм Из ТабИзмерений Цикл
				Если ТекИзм.Отмена Тогда
					Продолжить;
				КонецеСли;
				
				Най = Д.Штрихкоды.Найти(ТекИзм.Заказ);
				Най.СканированныйОбъем = ТекИзм.Произведение;
			КонецЦикла;	
		КонецеСли;	
		
		
		// МАС - 20.07.2017 - №1428 --->> 
		Если АктуальныйРежимТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто И НЕ Д.БэйджиСотрудников.Количество() Тогда			
			Д.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
			Д.ВспомогательныйРежимТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;	
		ИначеЕсли НЕ ФлПогрузкаВАвто И Д.БэйджиСотрудников.Количество() И ФлПогрузкаВАвтоНезагруженныеЗаказы Тогда	
			Д.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
			Д.ВспомогательныйРежимТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвтоНезагруженныеЗаказы;
		ИначеЕсли НЕ ФлПогрузкаВАвто И Д.БэйджиСотрудников.Количество() Тогда	
			Д.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
			Д.ВспомогательныйРежимТСД = Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвтоФактическая;
		КонецЕсли;
		// <<--- МАС 
		
		
		Д.Дата = ТекущаяДата();
		
		//+++ БАО 28.07.2017 №1540 
		Д.ДополнительныеСвойства.Вставить("НомерПотока", 1);
		Д.ДополнительныеСвойства.Вставить("Каталог", "ЗагрузкаДанныхСТСД");
		bao.ВернутьСообщенияИзЛогаОтказа(Д.ДополнительныеСвойства);
		//--- БАО 28.07.2017 №1540 
		
		
		// МАС - 02.11.2017 - №2002 --->> 
		ОбработатьМеста(Д);
		// <<--- МАС
		
		
		Д.Записать(РежимЗаписиДокумента.Запись);
				
		Попытка	
		//	Если Д.ТипЗагрузкиТСД <> Перечисления.ТипыЗагрузкиТСД.ПриходOZONE Тогда
				Д.Записать(РежимЗаписиДокумента.Проведение);
			//КонецеСли;	
		Исключение
			СписокПолучателей = Новый Массив;
			СписокПолучателей.Добавить("m.aseev@strizh-logistic.ru");
			СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
			//+++ БАО 06.06.2017 №966
			//СписокПолучателей.Добавить("artur.borisov@strizh-logistic.ru");
			//--- БАО 06.06.2017 №966
			
			//СписокПолучателей.Добавить("dmitry.khnychkov@strizh-logistic.ru");
			//СписокПолучателей.Добавить("sklad1@strizh-logistic.ru");
			
			
			СообщениеОбОшибке = ОписаниеОшибки(); 

			//+++ БАО 28.07.2017 №1540 
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС +  bao.ВернутьСообщенияИзЛогаОтказа(Д.ДополнительныеСвойства); 

			//--- БАО 28.07.2017 №1540 
			Отпр = lem.ОтправитьСообщение(СписокПолучателей, "не провелся документ ЗагрузкаСТСД", "Причина: "+ СообщениеОбОшибке, , "Логистическая компания ""Стриж""");	

			pkv.ДобавитьВСписокОтложенногоПроведения(Д.Ссылка, СообщениеОбОшибке);
		КонецПопытки;
		
        //Серегин М.В. 14.05.2015 10:45:54 
        Если Д.ТипЗагрузкиТСД = Перечисления.ТипыЗагрузкиТСД.НаборнаяВедомостьВозвраты Тогда
            smv.ЗаполнитьВзаимосвязьЗагрузкаСТСД(Д);
        КонецЕсли;
        //Серегин М.В. 14.05.2015 10:45:56
		КолЗагДок = КолЗагДок + 1;
		СписокИд.Добавить(ДокументТСД.Ид);
	КонецЦикла;	
	
	
	#Если Клиент Тогда
		Если КолЗагДок = 0 Тогда
			Сообщить("Отсутствуют документы к загрузке!");
		Иначе
			Сообщить("Загружено " + Строка(КолЗагДок) + " документов!");
		КонецеСли;	
	#КонецеСли
	
	Если УдалятьДокументыССервера Тогда
		Если СписокИД.Количество() <> 0 Тогда
			Объект.Драйвер.УдалитьДокументы(СписокИд);
		КонецеСли;	
	КонецеСли;
      
	Объект.Драйвер.ОсвободитьРесурсы();
	
КонецПроцедуры	

Процедура РегламентЗагрузкаДанныхСТСД_V2(УдалятьДокументыССервера = Неопределено) Экспорт
	//Ид = Константы.ИдентификаторТСДДляРегламентнойЗагрузки.Получить();	
	//ЗагрузкаДанныхСТСД(Ид);
	//
	
	// Якурнов 27.08.2018 11:50:19
	ТЗШтрихкоды = ПолучитьТЗШтрихкодыЗаказов();

	Если Константы.ФлагЗагрузкиДанныхСТСД.Получить() Тогда
		#Если Клиент Тогда
			Сообщить("В данный момент уже производится загрузка данных с ТСД!", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецеСли;
	
	Константы.ФлагЗагрузкиДанныхСТСД.Установить(Истина);
	
	Попытка
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	СерверыWiFiТСД.ИдентификаторТСД,
		            |	СерверыWiFiТСД.Ссылка КАК Сервер,
		            |	СерверыWiFiТСД.ПроверятьПодключение,
		            |	МестонахождениеТСДСрезПоследних.Склад
		            |ИЗ
		            |	Справочник.СерверыWiFiТСД КАК СерверыWiFiТСД
		            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеТСД.СрезПоследних КАК МестонахождениеТСДСрезПоследних
		            |		ПО (МестонахождениеТСДСрезПоследних.ТСД = СерверыWiFiТСД.Ссылка)
		            |ГДЕ
		            |	СерверыWiFiТСД.ПометкаУдаления = ЛОЖЬ
		            |	И СерверыWiFiТСД.ВерсияMobileSmarts = ЗНАЧЕНИЕ(Перечисление.ВерсииMobileSmarts.v2)
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	СерверыWiFiТСД.Код";
		
		Рез = Зап.Выполнить().Выгрузить();
		Для Каждого Тек Из Рез Цикл
			Если Тек.ПроверятьПодключение Тогда
				ПроверкаСоединенияНажатие(Тек.Сервер);
			КонецеСли;	
			ЗагрузкаДанныхСТСД(Тек.ИдентификаторТСД, ТЗШтрихкоды, Тек.Сервер, УдалятьДокументыССервера, Тек.Склад);
		КонецЦикла;	
		Константы.ФлагЗагрузкиДанныхСТСД.Установить(Ложь);
	Исключение
		Константы.ФлагЗагрузкиДанныхСТСД.Установить(Ложь);
	КонецПопытки;
КонецПроцедуры	

Процедура РегламентЗагрузкаДанныхСТСД_V3(СерверОбмена, УдалятьДокументыССервера = Неопределено) Экспорт
	//Ид = Константы.ИдентификаторТСДДляРегламентнойЗагрузки.Получить();	
	//ЗагрузкаДанныхСТСД(Ид);
	//
	
	// Якурнов 27.08.2018 11:50:19
	ТЗШтрихкоды = ПолучитьТЗШтрихкодыЗаказов();
	
	//Если Константы.ФлагЗагрузкиДанныхСТСД_V3.Получить() Тогда
	Если ПолучитьФлагЗагрузкиСТСД(СерверОбмена) Тогда
		#Если Клиент Тогда
			Сообщить("В данный момент уже производится загрузка данных с ТСД!", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецеСли;
	
	//Константы.ФлагЗагрузкиДанныхСТСД_V3.Установить(Истина);
	УстановитьФлагЗагрузкиСТСД(СерверОбмена, Истина);
	
	Попытка
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	СерверыWiFiТСД.ИдентификаторТСД КАК ИдентификаторТСД,
		            |	СерверыWiFiТСД.Ссылка КАК Сервер,
		            |	СерверыWiFiТСД.ПроверятьПодключение КАК ПроверятьПодключение,
		            |	МестонахождениеТСДСрезПоследних.Склад КАК Склад
		            |ИЗ
		            |	Справочник.СерверыWiFiТСД КАК СерверыWiFiТСД
		            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеТСД.СрезПоследних КАК МестонахождениеТСДСрезПоследних
		            |		ПО (МестонахождениеТСДСрезПоследних.ТСД = СерверыWiFiТСД.Ссылка)
		            |ГДЕ
		            |	СерверыWiFiТСД.ПометкаУдаления = ЛОЖЬ
		            |	И СерверыWiFiТСД.ВерсияMobileSmarts = ЗНАЧЕНИЕ(Перечисление.ВерсииMobileSmarts.v3)
		            |	И СерверыWiFiТСД.СерверОбменаСТСД = &СерверОбменаСТСД";
		Зап.УстановитьПараметр("СерверОбменаСТСД", СерверОбмена);
		Рез = Зап.Выполнить().Выгрузить();
		Для Каждого Тек Из Рез Цикл
			Если Тек.ПроверятьПодключение Тогда
				ПроверкаСоединенияНажатие(Тек.Сервер);
			КонецеСли;	
			
			//заглушка тест
			//Сообщить(СерверОбмена.наименование + "---" + Тек.Сервер);
			
			ЗагрузкаДанныхСТСД(Тек.ИдентификаторТСД, ТЗШтрихкоды, Тек.Сервер, УдалятьДокументыССервера, Тек.Склад);
		КонецЦикла;	
		//Константы.ФлагЗагрузкиДанныхСТСД_V3.Установить(Ложь);
		УстановитьФлагЗагрузкиСТСД(СерверОбмена, Ложь);
	Исключение
		Ош = ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить(Ош, СтатусСообщения.Важное);
		#КонецЕсли
		
		//Константы.ФлагЗагрузкиДанныхСТСД_V3.Установить(Ложь);
		УстановитьФлагЗагрузкиСТСД(СерверОбмена, Ложь);
	КонецПопытки;
КонецПроцедуры


#Область ДополнительныеФункции

// Якурнов 27.08.2018 11:45:37
Функция ПолучитьТЗШтрихкодыЗаказов() Экспорт
	ЗапросШК = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	ШтрихкодыЗаказов.Штрихкод КАК Штрихкод,
	                        |	ШтрихкодыЗаказов.Заказ.Ссылка КАК Заказ,
	                        |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.Доставка, 1) КАК Доставка,
	                        |	СостоянияЗаказовСрезПоследних.РезультатДоставки КАК РезультатДоставки,
	                        |	СостоянияЗаказовСрезПоследних.ПричинаНеВыполнения КАК ПричинаНеВыполнения,
	                        |	ШтрихкодыЗаказов.Заказ.НомерВнешнегоЗаказа КАК НомерЗаказаИМ,
	                        |	ШтрихкодыЗаказов.Заказ.ВладелецТовара КАК ИМ
	                        |ИЗ
	                        |	РегистрСведений.ШтрихкодыЗаказов КАК ШтрихкодыЗаказов
	                        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	                        |		ПО ШтрихкодыЗаказов.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	                        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов.СрезПоследних КАК СостоянияЗаказовСрезПоследних
	                        |		ПО ШтрихкодыЗаказов.Заказ = СостоянияЗаказовСрезПоследних.Заказ
	                        |ГДЕ
	                        |	ШтрихкодыЗаказов.Заказ.Дата >= &ДатаЗаказа
	                        |	И ШтрихкодыЗаказов.Штрихкод <> """"
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	Штрихкод");
	
	ДатаЗаказа = НачалоДня(ДобавитьМесяц(ТекущаяДата(),-1)); //ТекДата минус Месяц
	
	ЗапросШК.УстановитьПараметр("ДатаЗаказа", ДатаЗаказа);
	
	ВыбЗапросШК = ЗапросШК.Выполнить().Выбрать();
	
	ТЗШтрихкодыЗаказов = Новый ТаблицаЗначений;
	ТЗШтрихкодыЗаказов.Колонки.Добавить("Заказ");
	ТЗШтрихкодыЗаказов.Колонки.Добавить("Штрихкод");
	
	Пока ВыбЗапросШК.Следующий() Цикл
		НовСтр = ТЗШтрихкодыЗаказов.Добавить();
		НовСтр.Заказ = ВыбЗапросШК.Заказ;
		НовСтр.Штрихкод = ВыбЗапросШК.Штрихкод;
	КонецЦикла;	

	Возврат ТЗШтрихкодыЗаказов;
КонецФункции


Функция ПолучитьШтрихкодыИзмеренияГабаритов(ЛинейкаИзмеренияГабаритов = Неопределено) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ШтрихкодыИзмеренияГабаритов.ЛинейкаИзмерения КАК ЛинейкаИзмерения,
	            |	ШтрихкодыИзмеренияГабаритов.Измерение КАК Измерение,
	            |	ШтрихкодыИзмеренияГабаритов.ПоказательИзмерения КАК ПоказательИзмерения,
	            |	ШтрихкодыИзмеренияГабаритов.ШтрихкодИзмерения КАК ШтрихкодИзмерения,
	            |	ЛОЖЬ КАК ОтменаИзмерения
	            |ИЗ
	            |	РегистрСведений.ШтрихкодыИзмеренияГабаритов КАК ШтрихкодыИзмеренияГабаритов
	            |ГДЕ
	            |	1 = 1
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ЛинейкиИзмеренияГабаритов.Ссылка,
	            |	НЕОПРЕДЕЛЕНО,
	            |	0,
	            |	ЛинейкиИзмеренияГабаритов.ШКОтменяющийИзмерение,
	            |	ИСТИНА
	            |ИЗ
	            |	Справочник.ЛинейкиИзмеренияГабаритов КАК ЛинейкиИзмеренияГабаритов
	            |ГДЕ
	            |	2 = 2";
	Если ЛинейкаИзмеренияГабаритов <> Неопределено Тогда
		Зап.Текст = СтрЗаменить(Зап.Текст, "1 = 1", "ШтрихкодыИзмеренияГабаритов.ЛинейкаИзмерения = &Линейка");
		Зап.Текст = СтрЗаменить(Зап.Текст, "2 = 2", "ЛинейкиИзмеренияГабаритов.Ссылка = &Линейка");
		Зап.УстановитьПараметр("Линейка", ЛинейкаИзмеренияГабаритов.Ссылка);
	КонецеСли;
	
	Рез = Зап.Выполнить().Выгрузить();
	Возврат Рез;
КонецФункции	

Функция ПолучитьАктуальнуюЛинейкуИзмерененияГабаритов(Склад = Неопределено, ДатаЗапроса = Неопределено) Экспорт
	Если ДатаЗапроса = Неопределено Тогда
		ДатаЗапроса = ТекущаяДата();
	КонецеСли;	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	АктуальныеЛинейкиИзмеренияГабаритовСрезПоследних.ЛинейкаИзмеренияГабаритов КАК ЛинейкаИзмеренияГабаритов
	            |ИЗ
	            |	РегистрСведений.АктуальныеЛинейкиИзмеренияГабаритов.СрезПоследних(&ДатаЗапроса, 1 = 1) КАК АктуальныеЛинейкиИзмеренияГабаритовСрезПоследних";
	
	Зап.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Если Склад <> Неопределено Тогда
		Зап.Текст = СтрЗаменить(Зап.Текст, "1 = 1", "Склад = &ВыбСклад");
		Зап.УстановитьПараметр("ВыбСклад", Склад.Ссылка);
	КонецеСли;
	
	Рез = Зап.Выполнить();
	Если Склад <> Неопределено И Рез.Пустой() Тогда
		// выбираем без отбора по складу
		Зап.Текст = "ВЫБРАТЬ
		|	АктуальныеЛинейкиИзмеренияГабаритовСрезПоследних.ЛинейкаИзмеренияГабаритов КАК ЛинейкаИзмеренияГабаритов
		|ИЗ
		|	РегистрСведений.АктуальныеЛинейкиИзмеренияГабаритов.СрезПоследних(&ДатаЗапроса) КАК АктуальныеЛинейкиИзмеренияГабаритовСрезПоследних";
		Зап.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
		Рез = Зап.Выполнить();
	КонецЕсли;	
	
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб = Рез.Выбрать();
		Если Выб.Следующий() Тогда
			Возврат Выб.ЛинейкаИзмеренияГабаритов;
		Иначе
			Возврат Неопределено;
		КонецеСли;	
	КонецеСли;	
КонецФункции	

Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект)
	
	Перем ОбработкаОбслуживания;
	
	мИмяДляХраненияНастроекПрефикс = Идентификатор;
	
	мНетОшибки = 1;
	мОшибкаНеизвестно = -1;
	Результат = мНетОшибки;
	
	ТО = ПолучитьТО();
	Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
	Если Оборудование = Неопределено Тогда
		//Результат = мОшибкаНеизвестно;
		ТО = ПодключитьОборудование(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных, Неопределено, Идентификатор);
		//ТО = ПолучитьТО();
		Если ТО = Неопределено Тогда
			Результат = мОшибкаНеизвестно;
		Иначе
			Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
			Если Оборудование = Неопределено Тогда
				Результат = мОшибкаНеизвестно;
			КонецЕсли;			
		КонецеСли;	
	КонецЕсли;	
	
	Если Оборудование <> Неопределено Тогда
		Обработка = Оборудование.Обработка;
		Объект    = Оборудование.Объект;
	КонецЕсли;
	
	Попытка
		мТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера(); 
		мИмяДляХраненияНастроек = мИмяДляХраненияНастроекПрефикс +  мТипПодключенногоДрайвера;
		Заголовок = "Клеверенс Софт: Выгрузка номенклатуры на ТСД [драйвер "+мТипПодключенногоДрайвера+"]" 
	Исключение
		мБатчДрайвер              = Ложь;
		мТипПодключенногоДрайвера = "";
		мИмяДляХраненияНастроек   = мИмяДляХраненияНастроекПрефикс;
		Заголовок = "Клеверенс Софт: Выгрузка номенклатуры на ТСД";
		Результат = мОшибкаНеизвестно;
	КонецПопытки;
	
		//ОписаниеОбработки   = ПолучитьОписаниеОбработки(Обработка.ИспользуемоеИмяФайла);
		//ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
		//ПодключенныйДрайвер = ПолучитьПринадлежностьОбработкиКДрайверу("Клеверенс " + мТипПодключенногоДрайвера);
		//Если ЗначениеЗаполнено(ОбработкаКлеверенс) и ОбработкаКлеверенс <> ПодключенныйДрайвер Тогда
		//	Результат = "Обработка обслуживания не соответствует подключенному драйверу";
		//	Объект    = Неопределено;
		//КонецЕсли;
	
	мВидимостьЭлементовФормы = Результат = мНетОшибки;
	//ВидимостьЭлементовФормы();	
	
	Возврат Результат;
	
КонецФункции // ПолучитьОбъектДрайвера()

Функция ПолучитьШКИзСтрокиДокумента(СтрокаДокументаТСД, Barcode = "") Экспорт  
	
	ШК = СтрокаДокументаТСД.ПолучитьПоле("code");
	Если ШК = Неопределено Или ПустаяСтрока(ШК) Или
		ШК = "00000000" Или ШК = "0" Или Найти(ШК, "{") > 0 Тогда
			ШК = СтрокаДокументаТСД.ПолучитьПоле("barcode");
	КонецЕсли;
	Barcode = СтрокаДокументаТСД.ПолучитьПоле("barcode");
	
	Если ШК <> Неопределено Тогда
		Инд = Найти(ШК, "|");
		Если Инд > 0 Тогда
			ШК = Лев(ШК, Инд-1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШК;
	
КонецФункции

Функция ПолучитьТО()

	ТО = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Если ТО.Колонки.Количество() = 0 Тогда
		ТО.Колонки.Добавить("Вид");
		ТО.Колонки.Добавить("Ссылки");
		ТО.Колонки.Добавить("Идентификатор");
		ТО.Колонки.Добавить("Наименование");
		ТО.Колонки.Добавить("Обработка");
		ТО.Колонки.Добавить("Объект");
		ТО.Колонки.Добавить("ИмяИсточникаВнешнегоСобытия");
	КонецЕсли;

	Возврат ТО;

КонецФункции

Функция ПодключитьОборудование(Вид, Клиент, ПодключИдентификатор=Неопределено)
	мНетОшибки = 1;
	Результат = мНетОшибки;
	ПоследняяОшибка = мНетОшибки;

	ТО      = ПолучитьТО();
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");

	СтруктураПоиска = Новый Структура("Вид", Вид);
	СтрокиТО        = ТО.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТО.Количество() = 0 Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    РегТО.Идентификатор       КАК Идентификатор,
		|    РегТО.Модель.Наименование КАК Наименование,
		|    РегТО.Модель              КАК Модель,
		|    РегТО.Параметры           КАК Параметры
		|ИЗ
		|    РегистрСведений.ТорговоеОборудование КАК РегТО
		|ГДЕ
		|    РегТО.Идентификатор                      = &Компьютер         
		|");
		 //ИмяКомпьютераТО = "";
		 //Выполнить("ИмяКомпьютераТО = ПолучитьСерверТО().ПолучитьИмяКомпьютераТО()");
		Запрос.УстановитьПараметр("Компьютер", ПодключИдентификатор);
		//+?(Найти(мНазваниеКонфигурации,"управлениеторговлей")>0 и ОбработкаОбъект.ПолучитьВерсиюКонфигурации() >= 10030608 ," И РегТО.Подключено ","")+
		СтрокиТО = Запрос.Выполнить().Выгрузить();
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			ИмяВременногФайла = ПолучитьИмяВременногоФайла(".epf");
			МакетОбработки = СтрокаТО.Модель.ОбработкаОбслуживания.Обработка.Получить();
			МакетОбработки.Записать(ИмяВременногФайла);	
			ПутьКФайлуВнешнейОбработки = ИмяВременногФайла;
			ОписаниеОбработки = ПолучитьОписаниеОбработки(ИмяВременногФайла);
			ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
            Если ЗначениеЗаполнено(ОбработкаКлеверенс) Тогда
				Идентификатор = СтрокаТО.Идентификатор;
				Наименование  = СтрокаТО.Наименование;
				Обработка     = Неопределено;
				Параметры     = ?(ПустаяСтрока(СтрокаТО.Параметры),
				Новый Структура(),
				ЗначениеИзСтрокиВнутр(СтрокаТО.Параметры));
				Модель        = СтрокаТО.Модель.Модель;
				мМодельПодключаемогоТО = Модель;
				
				Результат = "";
				выполнить("Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СтрокаТО.Модель, Обработка)");
				
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
				#Если Клиент Тогда
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное); 
				#КонецеСли
				ПоследняяОшибка = Результат;
				
				
				Продолжить;
			КонецЕсли;
			
			Объект    = Неопределено;
			Результат = Обработка.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					#Если Клиент Тогда

					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					#КонецеСли
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;

				Результат = Обработка.Подключить(Объект);
				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					#Если Клиент Тогда
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					#КонецеСли
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;

				Оборудование                             = ТО.Добавить();
				Оборудование.Вид                         = Вид;
				Оборудование.Ссылки                      = 1;
				Оборудование.Идентификатор               = Идентификатор;
				Оборудование.Наименование                = Наименование;
				Оборудование.Обработка                   = Обработка;
				Оборудование.Объект                      = Объект;
				Оборудование.ИмяИсточникаВнешнегоСобытия = Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(Объект);

				//СообщенияКлиента = Клиенты[Клиент];
				//Сообщения        = Обработка.ПолучитьОписаниеСобытий(Объект);
				//Сообщения.Колонки.Добавить("Идентификатор");
				//Сообщения.Колонки.Добавить("Вид");
				//Сообщения.ЗаполнитьЗначения(Идентификатор, "Идентификатор");
				//Сообщения.ЗаполнитьЗначения(Вид,           "Вид");

				//Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				//	Клиенты[Клиент] = Сообщения;
				//Иначе
				//	Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
				//		СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
				//		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				//	КонецЦикла;
				//КонецЕсли;
            КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Если СтрокаТО.Ссылки = 0 Тогда
				мМодельПодключаемогоТО = СтрокаТО.Объект.Модель;
				Результат = СтрокаТО.Обработка.Подключить(СтрокаТО.Объект);

				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = СтрокаТО.Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					#Если Клиент Тогда

					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					#КонецеСли
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;
				СтрокаТО.ИмяИсточникаВнешнегоСобытия = СтрокаТО.Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(СтрокаТО.Объект);
			КонецЕсли;

//			СообщенияКлиента = Клиенты[Клиент];
//			Сообщения        = СтрокаТО.Обработка.ПолучитьОписаниеСобытий(СтрокаТО.Объект);
//			Сообщения.Колонки.Добавить("Идентификатор");
//			Сообщения.Колонки.Добавить("Вид");
//			Сообщения.ЗаполнитьЗначения(СтрокаТО.Идентификатор, "Идентификатор");
//			Сообщения.ЗаполнитьЗначения(СтрокаТО.Вид,           "Вид");

//			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
//				Клиенты[Клиент] = Сообщения;
//			Иначе
//				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
//					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
//					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
//				КонецЦикла;
//			КонецЕсли;

			СтрокаТО.Ссылки = СтрокаТО.Ссылки + 1;
		КонецЦикла;
	КонецЕсли;

	Возврат ТО;

КонецФункции // ПодключитьОборудование()

Функция ПолучитьПараметрСервераТО(ИмяПараметра, ТипПараметра)
    Перем мДанныеСервера;
	Если мДанныеСервера = Неопределено Тогда
		мДанныеСервера = Новый Структура();
	КонецЕсли;

	Результат = Неопределено;
	мДанныеСервера.Свойство(ИмяПараметра, Результат);
	Если Результат = Неопределено Тогда
		Результат = Новый(Тип(ТипПараметра));
		мДанныеСервера.Вставить(ИмяПараметра, Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПараметрСервераТО()

Функция ПолучитьОписаниеОбработки(ИмяФайлаОбработки)
	
	Результат = "";
	
	Попытка
		ОбрОбслуживания   = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
		Форма             = ОбрОбслуживания.ПолучитьФорму();
		Результат         = Форма.ПолучитьОписание().Наименование;
	Исключение
		Возврат Результат;
	КонецПопытки;
	
 	Возврат Результат;
	
КонецФункции

Функция ПолучитьПринадлежностьОбработкиКДрайверу(Знач ОписаниеОбработки)
	
	КодДрайвера = Неопределено;
	ОписаниеОбработки = нрег(ОписаниеОбработки);
	
	Если Найти(ОписаниеОбработки,"cleverence")>0 или Найти(ОписаниеОбработки,"клеверенс")>0 Тогда
		Если Найти(ОписаниеОбработки,"wi-fi")>0 и (Найти(ОписаниеОбработки,"проф")>0 или Найти(ОписаниеОбработки,"prof")>0) Тогда
			КодДрайвера = 1;     //Wi-Fi ПРОФ
		ИначеЕсли Найти(ОписаниеОбработки,"wi-fi")>0 и Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0  Тогда
			КодДрайвера = 2;     //Wi-Fi
		ИначеЕсли Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0 и Найти(ОписаниеОбработки,"wi-fi")= 0 Тогда
			КодДрайвера = 3;     //батч
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодДрайвера;
	
КонецФункции

Функция ПолучитьСтрокуПодключения(ИпАдрес) Экспорт
	
	СтрокаПодключения = ИпАдрес;
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		СтрокаПодключения = "localhost:9500";
	КонецЕсли;
	
	СтрокаПодключения = НРег(СокрЛП(СтрокаПодключения));
	Если СтрДлина(СтрокаПодключения) < 8 Тогда
		СтрокаПодключения = "http://" + СтрокаПодключения;	
	Иначе
		Если Лев(СтрокаПодключения, 7) <> "http://" И Лев(СтрокаПодключения, 8) <> "https://" Тогда
			СтрокаПодключения = "http://" + СтрокаПодключения;	
		КонецЕсли;
	КонецЕсли;
			
	Если Прав(СтрокаПодключения, 5) <> ".asmx" Тогда
		
		Инд = 0;
		Если Лев(СтрокаПодключения, 7) = "http://" Тогда
			Инд = 7;
		ИначеЕсли Лев(СтрокаПодключения, 8) = "https://" Тогда
			Инд = 8;
        КонецЕсли;
		
		Если Найти(Прав(СтрокаПодключения, СтрДлина(СтрокаПодключения)-Инд), ":") = 0 Тогда
			СтрокаПодключения = СтрокаПодключения + ":9500";
		КонецЕсли;
		СтрокаПодключения = СтрокаПодключения + "/MobileSMARTS/DataStorage.asmx";
	КонецЕсли;	
			
	Возврат СтрокаПодключения;		
КонецФункции

Функция ПроверкаШКНаСервисный(ШК) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	НастройкиОперацийТСД.Операция Как Опер
	            |ИЗ
	            |	РегистрСведений.НастройкиОперацийТСД КАК НастройкиОперацийТСД
	            |ГДЕ
	            |	НастройкиОперацийТСД.ШтрихкодСтр = &ШтрихкодСтр";
	Зап.УстановитьПараметр("ШтрихкодСтр", ШК);
	
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
		Если Лев(ШК, 3) = "084" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.ВозвратWiFiПоКонтрагентам;
        //Серегин М.В. 12.05.2015 18:33:10 
		ИначеЕсли Лев(ШК, 3) = "090" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.НаборнаяВедомостьВозвраты;
		ИначеЕсли Лев(ШК, 7) = "3100000" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
		ИначеЕсли Лев(ШК, 7) = "3100001" Или Лев(ШК, 7) = "3100002" Или Лев(ШК, 7) = "3100003" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.ПогрузкаВАвто;
			
		ИначеЕсли ШК = "012345678950" Тогда 
			Возврат Перечисления.ТипыЗагрузкиТСД.ПриездАвтоКомитента;
        //Серегин М.В. 12.05.2015 18:33:12 
		Иначе	
			Возврат Неопределено;
		КонецеСли;	
	Иначе
		Возврат Рез.Выгрузить()[0].Опер;
	КонецеСли;	
КонецФункции	

Процедура ДобавитьШКИзмерения(ТабИзмерений, ТабШК, ШК, Заказ, ТабДока) Экспорт 
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецеСли;
	
	СтрокаШК = ТабШК.Найти(ШК);
	
	ОтменаИзмерения = СтрокаШК.ОтменаИзмерения;
	ПоказательИзмерения = СтрокаШК.ПоказательИзмерения;
	
	
	
	Струк = Новый Структура;
	Струк.Вставить("Отмена", Ложь);
	Струк.Вставить("Заказ", Заказ);
	
	НайСтроки = ТабИзмерений.НайтиСтроки(Струк);
	
	Если Не ОтменаИзмерения Тогда
		Если НайСтроки.Количество() = 0 Тогда
			СтрокаДанных = ТабИзмерений.Добавить();
			СтрокаДанных.Заказ = Заказ;
			СтрокаДанных.Сторона1 = ПоказательИзмерения;
			СтрокаДанных.Сторона2 = 0;
			СтрокаДанных.Сторона3 = 0;
			СтрокаДанных.Отмена = Ложь;
		Иначе
			СтрокаДанных = НайСтроки[0];
			Если СтрокаДанных.Сторона1 = 0 Тогда
				СтрокаДанных.Сторона1 = ПоказательИзмерения;
			ИначеЕсли СтрокаДанных.Сторона2 = 0 Тогда
				СтрокаДанных.Сторона2 = ПоказательИзмерения;
			ИначеЕсли СтрокаДанных.Сторона3 = 0 Тогда
				СтрокаДанных.Сторона3 = ПоказательИзмерения;
				СтрокаДанных.Произведение = Окр((СтрокаДанных.Сторона1 * СтрокаДанных.Сторона2 * СтрокаДанных.Сторона3)/1000000, 3);
			Иначе
				//ничего не делаем. количество измерений больше трёх
			конецеСли;	
		КонецеСли;	
		Нов = ТабДока.Добавить();
		Нов.Заказ = Заказ;
		Нов.ШтрихкодГабарита = ШК;
		Нов.ЗначениеИзмерения = ПоказательИзмерения;
	Иначе
		Если НайСтроки.Количество() > 0 Тогда
			НайСтроки[0].Отмена = Истина;
		КонецеСли;	
		Струк = Новый Структура;
		Струк.Вставить("Заказ", Заказ);
		
		НайСтрокиДока = ТабДока.НайтиСтроки(Струк);
		Для Каждого Тек Из НайСтрокиДока Цикл
			Тек.ОтменаИзмерения = Истина;
		КонецЦикла;	
	КонецеСли;
КонецПроцедуры	

Процедура ОбработатьМеста(Док)

	// Отключено по Задача № 3311
	//МассивКонтрагентов = Док.Штрихкоды.Выгрузить(, "Контрагент");
	//
	//
	//ЗапросКонтр = Новый Запрос("ВЫБРАТЬ
	//                           |	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	//                           |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам, ЛОЖЬ) КАК УчетЗаказовПоМестам
	//                           |ИЗ
	//                           |	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент В (&МассивКонтрагентов)) КАК ПараметрыКонтрагентовСрезПоследних");	
	//ЗапросКонтр.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	//КонтрагентыТЗ = ЗапросКонтр.Выполнить().Выгрузить();
	
	
	
	Для каждого Стр Из Док.Штрихкоды Цикл		
		
		// Отключено по Задача № 3311
		//НайКонтр = КонтрагентыТЗ.НайтиСтроки(Новый Структура("Контрагент", Стр.Контрагент));		
		//Если НайКонтр.Количество() И НайКонтр[0].УчетЗаказовПоМестам Тогда
			
			ЗапросМеста = Новый Запрос("ВЫБРАТЬ
			                           |	МестаПоЗаказам.Ссылка КАК Место
			                           |ИЗ
			                           |	Справочник.МестаПоЗаказам КАК МестаПоЗаказам
			                           |ГДЕ
			                           |	МестаПоЗаказам.Штрихкод = &Штрихкод");	
			ЗапросМеста.УстановитьПараметр("Штрихкод", Стр.Штрихкод);
			РезМесто = ЗапросМеста.Выполнить().Выбрать();
			Если РезМесто.Следующий() Тогда
			
				Стр.МестоЗаказа = РезМесто.Место;	
			
			КонецЕсли;	
		
		//КонецЕсли;	
		
	КонецЦикла;
	
	

КонецПроцедуры

Процедура ПроверкаСоединенияНажатие(Сервер) Экспорт
	Перем мМодель;
	Перем мНетОшибки;
	
	ТипСвязи = "Сервер";
	
	мНетОшибки = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
	Объект = Неопределено;
    ОбработкаОбъект = Обработки.ТСД.Создать();
	времПараметры = Новый Структура;
	
	Прокси = "";
	ПортПрокси = "";
	
	//времПараметры.Вставить("НомерБазы",                НомерБазы);
	//времПараметры.Вставить("НомерДокумента",           НомерДокумента);
	времПараметры.Вставить("ВыбиратьИсточникЗагрузки", Истина);

	времПараметры.Вставить("ТипСвязи",                ТипСвязи);
	времПараметры.Вставить("СтрокаПодключенияКСерверу", ПолучитьСтрокуПодключения(Сервер.СтрокаПодключения));
	времПараметры.Вставить("Прокси", Прокси);
	времПараметры.Вставить("ПортПрокси", ПортПрокси);

	Если ОбработкаОбъект.СоздатьОбъектДрайвера(Объект, мМодель, времПараметры) = мНетОшибки Тогда
		МассивЗначений = Новый Массив;
		Если ТипСвязи = "Сервер" Тогда
			МассивЗначений.Добавить(1);	
			МассивЗначений.Добавить(ПолучитьСтрокуПодключения(Сервер.СтрокаПодключения));	
			//МассивЗначений.Добавить(Прокси);
			//МассивЗначений.Добавить(ПортПрокси);
		КонецЕсли;
		
		Если Объект.Драйвер.ПроверитьСоединениеССервером(МассивЗначений) Тогда
			#Если Клиент Тогда
			Сообщить("Проверка соединения с ТСД прошла успешно! (" + СокрЛП(Сервер.Наименование) + ")");	
			#КонецеСли
		Иначе
			Ошибка = "";
			Объект.Драйвер.ПолучитьОшибку(Ошибка);
			#Если Клиент Тогда
			Сообщить("Соединение с ТСД не установлено! (" + СокрЛП(Сервер.Наименование) + ") Ошибка: " + Ошибка);
			#КонецеСли
		КонецЕсли;	
		
		Объект.Драйвер.ОсвободитьРесурсы();
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

Процедура ПроверкаВыполненияОбменаСТСД() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МылоОдминов.Мыло Как Мыло
	|ИЗ
	|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	Стр = СтрокаСоединенияИнформационнойБазы();
	Таб = Зап.Выполнить().Выгрузить();			
	СпПол = Таб.ВыгрузитьКолонку("Мыло");
	ДатаНач = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЗаказовСТСД_2");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаНач);
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		Попытка
			ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		Исключение
			lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Ошибочное значение даты последней загрузки доставок "+ДатаНач);
		КонецПопытки;
	Иначе
		lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказовСТСД_2)");
	КонецЕсли;
	
	ПослДата = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД");
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ПослДата);
	ПослДата = Дата(ПослДата);
	КоличествоОшибок = 0;
	
	Если ПослДата <> ДатаЗапроса Тогда
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД");
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
		КонецЕсли;
		НоваяЗапись.Ключ = "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД";
		НоваяЗапись.Значение = lem.ДатаВСтроку(ДатаЗапроса);
		Попытка
			Запись.Записать();
		Исключение
			lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Ошибка обновления границы новых заказов");
		КонецПопытки;
		//МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД");
		МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД", 0);
	Иначе
		ОтборОбновленияЗаказов = Новый Структура;
		ОтборОбновленияЗаказов.Вставить("Ключ", "КоличествоСообщенийОшибкаТСД");
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
		Запись.Свойство("Значение", КоличествоОшибок);
		Если Не ЗначениеЗаполнено(КоличествоОшибок) Тогда
			КоличествоОшибок = 0;
		КонецеСли;	
		КоличествоОшибок = Число(КоличествоОшибок);
		
		Если КоличествоОшибок > 1 Тогда
			Константы.ФлагЗагрузкиДанныхСТСД.Установить(Ложь);
			lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT") + ". Будет произведена попытка восстановления обмена.");
			МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД", 0);
		Иначе	
			lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД. База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
			МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД");
		КонецеСли;	
	КонецеСли;
КонецПроцедуры

Процедура ПроверкаВыполненияОбменаСТСД_v3() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	СерверыОбменаСТСД.Ссылка КАК СерверОбмена
	            |ИЗ
	            |	Справочник.СерверыОбменаСТСД КАК СерверыОбменаСТСД
	            |ГДЕ
	            |	СерверыОбменаСТСД.ПометкаУдаления = ЛОЖЬ
	            |	И СерверыОбменаСТСД.ВерсияMobileSmarts = ЗНАЧЕНИЕ(Перечисление.ВерсииMobileSmarts.v3)";
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ПроверкаВыполненияОбменаСТСД_v3_ПоСерверуОбмена(Выб.СерверОбмена);
	КонецЦикла;	
	
	//Зап = Новый Запрос;
	//Зап.Текст = "ВЫБРАТЬ
	//|	МылоОдминов.Мыло Как Мыло
	//|ИЗ
	//|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	//Стр = СтрокаСоединенияИнформационнойБазы();
	//Таб = Зап.Выполнить().Выгрузить();			
	//СпПол = Таб.ВыгрузитьКолонку("Мыло");
	//ДатаНач = Неопределено;
	//ОтборОбновленияЗаказов = Новый Структура;
	//ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЗаказовСТСД_3");
	//Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	//Запись.Свойство("Значение", ДатаНач);
	//Если ЗначениеЗаполнено(ДатаНач) Тогда
	//	Попытка
	//		ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
	//	Исключение
	//		lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Ошибочное значение даты последней загрузки доставок "+ДатаНач);
	//	КонецПопытки;
	//Иначе
	//	lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказовСТСД_2)");
	//КонецЕсли;
	//
	//ПослДата = Неопределено;
	//ОтборОбновленияЗаказов = Новый Структура;
	//ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3");
	//Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	//Запись.Свойство("Значение", ПослДата);
	//ПослДата = Дата(ПослДата);
	//КоличествоОшибок = 0;
	//
	//Если ПослДата <> ДатаЗапроса Тогда
	//	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	//	Запись.Отбор.Ключ.Установить("ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3");
	//	Запись.Прочитать();
	//	Если Запись.Количество() = 0 Тогда
	//		НоваяЗапись = Запись.Добавить();
	//	Иначе
	//		НоваяЗапись = Запись[0];
	//	КонецЕсли;
	//	НоваяЗапись.Ключ = "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3";
	//	НоваяЗапись.Значение = lem.ДатаВСтроку(ДатаЗапроса);
	//	Попытка
	//		Запись.Записать();
	//	Исключение
	//		lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Ошибка обновления границы новых заказов");
	//	КонецПопытки;
	//	МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД_v3", 0);
	//Иначе
	//	//lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
	//	
	//	
	//	
	//	ОтборОбновленияЗаказов = Новый Структура;
	//	ОтборОбновленияЗаказов.Вставить("Ключ", "КоличествоСообщенийОшибкаТСД_v3");
	//	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	//	Запись.Свойство("Значение", КоличествоОшибок);
	//	Если Не ЗначениеЗаполнено(КоличествоОшибок) Тогда
	//		КоличествоОшибок = 0;
	//	КонецеСли;	
	//	КоличествоОшибок = Число(КоличествоОшибок);
	//	
	//	Если КоличествоОшибок > 1 Тогда
	//		Константы.ФлагЗагрузкиДанныхСТСД_V3.Установить(Ложь);
	//		lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT") + ". Будет произведена попытка восстановления обмена.");
	//		МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД_v3", 0);
	//	Иначе	
	//		lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
	//		МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД_v3");
	//	КонецеСли;	
	//	
	//КонецеСли;
КонецПроцедуры

Процедура МодифицироватьСчетчикПараметровРЗ(ИмяПараметра, ЗначениеСчетчика = -1)
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Запись.Отбор.Ключ.Установить(ИмяПараметра);
	Запись.Прочитать();
	Если Запись.Количество() = 0 Тогда
		НоваяЗапись = Запись.Добавить();
		НоваяЗапись.Значение = "1";	
	Иначе
		НоваяЗапись = Запись[0];
		Если НоваяЗапись.Значение = "1" Или НоваяЗапись.Значение = "0" Тогда
			НоваяЗапись.Значение = Формат(Число(НоваяЗапись.Значение) + 1, "ЧН=0; ЧГ=");
		Иначе
			Попытка
				ТекЗн = Число(НоваяЗапись.Значение);
				ТекЗн = ТекЗн + 1;
				НоваяЗапись.Значение = Формат(Число(НоваяЗапись.Значение) + 1, "ЧН=0; ЧГ=");
			Исключение
				НоваяЗапись.Значение = "0";
			КонецПопытки	
		КонецеСли;	
		
	КонецЕсли;
	
	
	Если ЗначениеСчетчика <> - 1 Тогда
		НоваяЗапись.Значение = "0";
	КонецеСли;
	
	НоваяЗапись.Ключ = ИмяПараметра;
	Запись.Записать();
КонецПроцедуры	
	

//////процедуры работы с ТСД с использованием сервера обмена ТСД
#Область РаботаСТСД_СерверОбменаТСД
Процедура УстановитьФлагЗагрузкиСТСД(СерверОбмена, ЗначениеФлага) Экспорт
	ИмяПараметра = "ФлагЗагрузкиТСД__" + СокрЛП(СерверОбмена.Код);
	Если ЗначениеФлага Тогда
		ФлагВРС = "1";
	Иначе
		ФлагВРС = "0";
	КонецЕсли;
	
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Запись.Отбор.Ключ.Установить(ИмяПараметра);
	Запись.Прочитать();
	Если Запись.Количество() = 0 Тогда
		НоваяЗапись = Запись.Добавить();
		НоваяЗапись.Ключ = ИмяПараметра;
	Иначе
		НоваяЗапись = Запись[0];
	КонецЕсли;
	НоваяЗапись.Значение = ФлагВРС;	
	Запись.Записать();
КонецПроцедуры

Функция ПолучитьФлагЗагрузкиСТСД(СерверОбмена) Экспорт
	ИмяПараметра = "ФлагЗагрузкиТСД__" + СокрЛП(СерверОбмена.Код);
	
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Запись.Отбор.Ключ.Установить(ИмяПараметра);
	Запись.Прочитать();
	Если Запись.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Если Запись[0].Значение = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецеСли;	
	КонецЕсли;
КонецФункции


Процедура ПроверкаВыполненияОбменаСТСД_v3_ПоСерверуОбмена(СерверОбмена) Экспорт
	
	ДополнениеККлючам = СокрЛП(СерверОбмена.Код);
	ДополнениеКПисьмам = СокрЛП(СерверОбмена.Наименование);
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МылоОдминов.Мыло Как Мыло
	|ИЗ
	|	РегистрСведений.МылоОдминов КАК МылоОдминов";
	Стр = СтрокаСоединенияИнформационнойБазы();
	Таб = Зап.Выполнить().Выгрузить();			
	СпПол = Таб.ВыгрузитьКолонку("Мыло");
	ДатаНач = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗагрузкаЗаказовСТСД_3__" + ДополнениеККлючам);
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ДатаНач);
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		Попытка
			ДатаЗапроса = Вычислить("'" + ДатаНач + "'");
		Исключение
			lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3/" + ДополнениеКПисьмам + "). База (" + Стр + ")", "Ошибочное значение даты последней загрузки доставок "+ДатаНач);
		КонецПопытки;
	Иначе
		lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3/" + ДополнениеКПисьмам + "). База (" + Стр + ")", "Не задана дата последней загрузки доставок (РегистрСведений.ПараметрыРегламентныхЗаданий, Ключ=ПоследняяЗагрузкаЗаказовСТСД_2)");
	КонецЕсли;
	
	ПослДата = Неопределено;
	ОтборОбновленияЗаказов = Новый Структура;
	ОтборОбновленияЗаказов.Вставить("Ключ", "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3__" + ДополнениеККлючам);
	Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
	Запись.Свойство("Значение", ПослДата);
	ПослДата = Дата(ПослДата);
	КоличествоОшибок = 0;
	
	Если ПослДата <> ДатаЗапроса Тогда
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
		Запись.Отбор.Ключ.Установить("ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3__" + ДополнениеККлючам);
		Запись.Прочитать();
		Если Запись.Количество() = 0 Тогда
			НоваяЗапись = Запись.Добавить();
		Иначе
			НоваяЗапись = Запись[0];
		КонецЕсли;
		НоваяЗапись.Ключ = "ПоследняяЗаписаннаяЗагрузкаЗаказовСТСД_3__" + ДополнениеККлючам;
		НоваяЗапись.Значение = lem.ДатаВСтроку(ДатаЗапроса);
		Попытка
			Запись.Записать();
		Исключение
			lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3/" + ДополнениеКПисьмам + "). База (" + Стр + ")", "Ошибка обновления границы новых заказов");
		КонецПопытки;
		МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД_v3__" + ДополнениеККлючам, 0);
	Иначе
		//lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3). База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
		
		
		
		ОтборОбновленияЗаказов = Новый Структура;
		ОтборОбновленияЗаказов.Вставить("Ключ", "КоличествоСообщенийОшибкаТСД_v3__" + ДополнениеККлючам);
		Запись = РегистрыСведений.ПараметрыРегламентныхЗаданий.Получить(ОтборОбновленияЗаказов);
		Запись.Свойство("Значение", КоличествоОшибок);
		Если Не ЗначениеЗаполнено(КоличествоОшибок) Тогда
			КоличествоОшибок = 0;
		КонецеСли;	
		КоличествоОшибок = Число(КоличествоОшибок);
		
		Если КоличествоОшибок > 1 Тогда
			//Константы.ФлагЗагрузкиДанныхСТСД_V3.Установить(Ложь);
			УстановитьФлагЗагрузкиСТСД(СерверОбмена, Ложь);
			lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3/" + ДополнениеКПисьмам + "). База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT") + ". Будет произведена попытка восстановления обмена.");
			МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД_v3__" + ДополнениеККлючам, 0);
		Иначе	
			lem.ОтправитьСообщение(СпПол, "Проверка состояния обмена ТСД (V3/" + ДополнениеКПисьмам + "). База (" + Стр + ")", "Не загружаются заказы, начиная с " + Формат(ДатаЗапроса, "ДЛФ=DDT"));
			МодифицироватьСчетчикПараметровРЗ("КоличествоСообщенийОшибкаТСД_v3__" + ДополнениеККлючам);
		КонецеСли;	
		
	КонецеСли;
КонецПроцедуры


#КонецОбласти

//////процедуры работы с ТСД с использованием сервера обмена ТСД