
// Устанавливает ссылку нового для объекта
//
//  Параметры:
//    Объект - <ДокументОбъект.*, СправочникОбъект.*, БизнесПроцессОбъект.*, ЗадачаОбъект.*>
//
//  Возвращаемое значение:
//    Ссылка на объект
//
//  Описание:
//    В случае пустой ссылки у новго объекта, создаёт и устанавливает случайную ссылку
//
Функция УстановитьСсылкуНового(Объект) Экспорт
	
	СсылкаОбъекта = Неопределено;
	
	Если Объект.ЭтоНовый() Тогда
		
		СсылкаОбъекта = Объект.ПолучитьСсылкуНового();
		Если СсылкаОбъекта.Пустая() Тогда
			
			мдОбъект = Объект.Метаданные();
			Если Метаданные.Справочники.Содержит(мдОбъект) Тогда
				Коллекция = Справочники;
				
			ИначеЕсли Метаданные.Документы.Содержит(мдОбъект) Тогда
				Коллекция = Документы;
				
			ИначеЕсли Метаданные.БизнесПроцессы.Содержит(мдОбъект) Тогда
				Коллекция = БизнесПроцессы;
				
			ИначеЕсли Метаданные.Задачи.Содержит(мдОбъект) Тогда
				Коллекция = Задачи;
			КонецЕсли;
			
			СсылкаОбъекта = Коллекция[мдОбъект.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор);
			
			Объект.УстановитьСсылкуНового(СсылкаОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаОбъекта;
	
КонецФункции

// Создает уникальную строку, имеющую формат идентификатора
//
// Параметры:      
//
// Возвращаемое значение: 
//  Строка - Уникальная строка вида УИД_хххх_хххх_хххх_хххх
//
Функция УИД() Экспорт
	Возврат "УИД_" + СтрЗаменить(СокрЛП(Новый УникальныйИдентификатор), "-", "_");
КонецФункции

// Вычисляет ширину текстовой строки в пикселях.
//
// Параметры:
//  Текст <Строка>
//
// Возвращаемое значение:
//  <Число>
//
Функция ШиринаТекста(Текст) Экспорт
	Если Текст = "" Тогда Возврат 0; КонецЕсли; 
	
	соРазмерыСимволов = Новый Соответствие;
	соРазмерыСимволов.Вставить(" ", 3);
	соРазмерыСимволов.Вставить("0", 6);
	соРазмерыСимволов.Вставить("1", 6);
	соРазмерыСимволов.Вставить("2", 6);
	соРазмерыСимволов.Вставить("3", 6);
	соРазмерыСимволов.Вставить("4", 6);
	соРазмерыСимволов.Вставить("5", 6);
	соРазмерыСимволов.Вставить("6", 6);
	соРазмерыСимволов.Вставить("7", 6);
	соРазмерыСимволов.Вставить("8", 6);
	соРазмерыСимволов.Вставить("9", 6);
	соРазмерыСимволов.Вставить("-", 3);
	соРазмерыСимволов.Вставить(".", 3);
	соРазмерыСимволов.Вставить("А", 7);
	соРазмерыСимволов.Вставить("Б", 7);
	соРазмерыСимволов.Вставить("В", 7);
	соРазмерыСимволов.Вставить("Г", 7);
	соРазмерыСимволов.Вставить("Д", 9);
	соРазмерыСимволов.Вставить("Е", 7);
	соРазмерыСимволов.Вставить("Ё", 7);
	соРазмерыСимволов.Вставить("Ж", 11);
	соРазмерыСимволов.Вставить("З", 7);
	соРазмерыСимволов.Вставить("И", 8);
	соРазмерыСимволов.Вставить("Й", 8);
	соРазмерыСимволов.Вставить("К", 7);
	соРазмерыСимволов.Вставить("Л", 8);
	соРазмерыСимволов.Вставить("М", 9);
	соРазмерыСимволов.Вставить("Н", 8);
	соРазмерыСимволов.Вставить("О", 8);
	соРазмерыСимволов.Вставить("П", 8);
	соРазмерыСимволов.Вставить("Р", 7);
	соРазмерыСимволов.Вставить("С", 6);
	соРазмерыСимволов.Вставить("Т", 7);
	соРазмерыСимволов.Вставить("У", 8);
	соРазмерыСимволов.Вставить("Ф", 11);
	соРазмерыСимволов.Вставить("Х", 7);
	соРазмерыСимволов.Вставить("Ц", 8);
	соРазмерыСимволов.Вставить("Ч", 8);
	соРазмерыСимволов.Вставить("Ш", 9);
	соРазмерыСимволов.Вставить("Щ", 10);
	соРазмерыСимволов.Вставить("Ь", 7);
	соРазмерыСимволов.Вставить("Ы", 10);
	соРазмерыСимволов.Вставить("Ъ", 8);
	соРазмерыСимволов.Вставить("Э", 7);
	соРазмерыСимволов.Вставить("Ю", 9);
	соРазмерыСимволов.Вставить("Я", 8);
	соРазмерыСимволов.Вставить("а", 6);
	соРазмерыСимволов.Вставить("б", 6);
	соРазмерыСимволов.Вставить("в", 6);
	соРазмерыСимволов.Вставить("г", 5);
	соРазмерыСимволов.Вставить("д", 6);
	соРазмерыСимволов.Вставить("е", 6);
	соРазмерыСимволов.Вставить("ё", 6);
	соРазмерыСимволов.Вставить("ж", 8);
	соРазмерыСимволов.Вставить("з", 6);
	соРазмерыСимволов.Вставить("и", 6);
	соРазмерыСимволов.Вставить("й", 6);
	соРазмерыСимволов.Вставить("к", 6);
	соРазмерыСимволов.Вставить("л", 6);
	соРазмерыСимволов.Вставить("м", 8);
	соРазмерыСимволов.Вставить("н", 6);
	соРазмерыСимволов.Вставить("о", 6);
	соРазмерыСимволов.Вставить("п", 6);
	соРазмерыСимволов.Вставить("р", 6);
	соРазмерыСимволов.Вставить("с", 6);
	соРазмерыСимволов.Вставить("т", 6);
	соРазмерыСимволов.Вставить("у", 5);
	соРазмерыСимволов.Вставить("ф", 8);
	соРазмерыСимволов.Вставить("х", 5);
	соРазмерыСимволов.Вставить("ц", 6);
	соРазмерыСимволов.Вставить("ч", 5);
	соРазмерыСимволов.Вставить("ш", 8);
	соРазмерыСимволов.Вставить("щ", 9);
	соРазмерыСимволов.Вставить("ь", 6);
	соРазмерыСимволов.Вставить("ы", 8);
	соРазмерыСимволов.Вставить("ъ", 7);
	соРазмерыСимволов.Вставить("э", 6);
	соРазмерыСимволов.Вставить("ю", 8);
	соРазмерыСимволов.Вставить("я", 6);
	соРазмерыСимволов.Вставить("+", 6);
	соРазмерыСимволов.Вставить("-", 3);
	соРазмерыСимволов.Вставить("*", 4);
	соРазмерыСимволов.Вставить("\", 5);
	соРазмерыСимволов.Вставить("/", 5);
	соРазмерыСимволов.Вставить("!", 3);
	соРазмерыСимволов.Вставить("№", 11);
	соРазмерыСимволов.Вставить("%", 8);
	соРазмерыСимволов.Вставить(":", 3);
	соРазмерыСимволов.Вставить("?", 6);
	соРазмерыСимволов.Вставить("_", 6);
	соРазмерыСимволов.Вставить("(", 3);
	соРазмерыСимволов.Вставить(")", 3);
	
	соРазмерыСимволов.Вставить("a", 6);
	соРазмерыСимволов.Вставить("b", 6);
	соРазмерыСимволов.Вставить("c", 6);
	соРазмерыСимволов.Вставить("d", 6);
	соРазмерыСимволов.Вставить("e", 6);
	соРазмерыСимволов.Вставить("f", 3);
	соРазмерыСимволов.Вставить("g", 6);
	соРазмерыСимволов.Вставить("h", 6);
	соРазмерыСимволов.Вставить("i", 2);
	соРазмерыСимволов.Вставить("j", 2);
	соРазмерыСимволов.Вставить("k", 6);
	соРазмерыСимволов.Вставить("l", 2);
	соРазмерыСимволов.Вставить("m", 8);
	соРазмерыСимволов.Вставить("n", 6);
	соРазмерыСимволов.Вставить("o", 6);
	соРазмерыСимволов.Вставить("p", 6);
	соРазмерыСимволов.Вставить("q", 6);
	соРазмерыСимволов.Вставить("r", 3);
	соРазмерыСимволов.Вставить("s", 5);
	соРазмерыСимволов.Вставить("t", 3);
	соРазмерыСимволов.Вставить("u", 6);
	соРазмерыСимволов.Вставить("v", 6);
	соРазмерыСимволов.Вставить("w", 8);
	соРазмерыСимволов.Вставить("x", 5);
	соРазмерыСимволов.Вставить("y", 5);
	соРазмерыСимволов.Вставить("z", 4);
	
	соРазмерыСимволов.Вставить("A", 8);
	соРазмерыСимволов.Вставить("B", 7);
	соРазмерыСимволов.Вставить("C", 7);
	соРазмерыСимволов.Вставить("D", 8);
	соРазмерыСимволов.Вставить("E", 7);
	соРазмерыСимволов.Вставить("F", 6);
	соРазмерыСимволов.Вставить("G", 8);
	соРазмерыСимволов.Вставить("H", 8);
	соРазмерыСимволов.Вставить("I", 3);
	соРазмерыСимволов.Вставить("J", 5);
	соРазмерыСимволов.Вставить("K", 7);
	соРазмерыСимволов.Вставить("L", 6);
	соРазмерыСимволов.Вставить("M", 9);
	соРазмерыСимволов.Вставить("N", 8);
	соРазмерыСимволов.Вставить("O", 8);
	соРазмерыСимволов.Вставить("P", 7);
	соРазмерыСимволов.Вставить("Q", 8);
	соРазмерыСимволов.Вставить("R", 8);
	соРазмерыСимволов.Вставить("S", 8);
	соРазмерыСимволов.Вставить("T", 7);
	соРазмерыСимволов.Вставить("U", 8);
	соРазмерыСимволов.Вставить("V", 8);
	соРазмерыСимволов.Вставить("W", 12);
	соРазмерыСимволов.Вставить("X", 8);
	соРазмерыСимволов.Вставить("Y", 8);
	соРазмерыСимволов.Вставить("Z", 8);	
	
	ъ = СтрДлина(Текст);
	Ширина = 0;
	Пока ъ > 0 Цикл
		ШиринаСимвола = соРазмерыСимволов[Сред(Текст, ъ, 1)];
		Ширина = Ширина + ?(ШиринаСимвола = Неопределено, 0, ШиринаСимвола);
		ъ = ъ - 1;
	КонецЦикла;
	Возврат Ширина;
КонецФункции

// Возвращает строковое представление списка значений.
//
// Параметры:
//  Список <СписокЗначений>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьПредставлениеСписка(Список) Экспорт
	Текст = "";
	Для Каждого ЭлЗначение Из Список Цикл
		Текст = Текст + ?(Текст = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
	КонецЦикла;
	
	Возврат Текст;
КонецФункции

// Отображает на форме бизнес-процесса его текущее состояние.
//
// Параметры:
//  Форма <Форма>
//
Процедура ОтобразитьСостояниеБизнесПроцесса(Форма) Экспорт
	Если Форма.Стартован Тогда
		Если Форма.Завершен Тогда
			Состояние = "Завершен";
		Иначе
			Состояние = "Выполняется";
		КонецЕсли;
	Иначе
		Состояние = "Не страртован";
	КонецЕсли;
	Форма.ЭлементыФормы.Состояние.Заголовок = Состояние;
КонецПроцедуры

// Возвращает строковое представление периода
//
// Параметры:
//  ДатаС                       <Дата>
//  ДатаПо                      <Дата>
//  ПредставлениеПустогоПериода <Строка>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПериодВСтроку(Знач ДатаС, Знач ДатаПо, ПредставлениеПустогоПериода = "") Экспорт
	Если Не ЗначениеЗаполнено(ДатаС) И Не ЗначениеЗаполнено(ДатаПо) Тогда
		Возврат ПредставлениеПустогоПериода;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаС) Тогда
		Возврат "по " + Формат(ДатаПо, "ДФ='dd ММММ yyyy'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПо) Тогда
		Возврат "с " + Формат(ДатаС, "ДФ='dd ММММ yyyy'");
	КонецЕсли;
	
	ДатаС = НачалоДня(ДатаС);
	ДатаПо = КонецДня(ДатаПо);
	
	ГодС = НачалоГода(ДатаС);
	ГодПо = НачалоГода(ДатаПо);
	Если ГодС = ГодПо Тогда
		стрГод = СтрЗаменить(Строка(Год(ДатаС)), Символы.НПП, "");
		
		Если ДатаС = НачалоГода(ДатаС) И ДатаПо = КонецГода(ДатаПо) Тогда
			Возврат "за " + стрГод + " г";
		КонецЕсли;
		
		Если ДатаС = НачалоГода(ДатаС) И ДатаПо = КонецМесяца(ДобавитьМесяц(НачалоГода(ДатаС), 6)) Тогда
			Возврат "за 1 полугодие " + стрГод + " г";
		КонецЕсли;
		
		Если ДатаС = НачалоМесяца(ДобавитьМесяц(НачалоГода(ДатаС), 7)) И ДатаПо = КонецГода(ДатаПо) Тогда
			Возврат "за 2 полугодие " + стрГод + " г";
		КонецЕсли;
		
		Если НачалоКвартала(ДатаС) = ДатаС И НачалоКвартала(ДатаС) = НачалоКвартала(ДатаПо) И КонецКвартала(ДатаПо) = ДатаПо Тогда
			Возврат "за " + Строка(Цел(Месяц(ДатаС) / 4) + 1) + " квартал " + стрГод + " г";
		КонецЕсли;
		
		Если НачалоМесяца(ДатаС) = ДатаС И НачалоМесяца(ДатаС) = НачалоМесяца(ДатаПо) И КонецМесяца(ДатаПо) = ДатаПо Тогда
			Возврат "за " + Формат(ДатаС, "ДФ=ММММ") + " " + стрГод + " г";
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачалоДня(ДатаС) = НачалоДня(ДатаПо) Тогда
		Возврат "за " + Формат(ДатаС, "ДФ='dd ММММ yyyy'");
	Иначе
		Возврат "за " + Формат(ДатаС, "ДФ='dd ММММ yyyy'") + " - " + Формат(ДатаПо, "ДФ='dd ММММ yyyy'");
	КонецЕсли;
	
КонецФункции

#Если Клиент Тогда
//
// Открывает диалоговое окно редактирования периода.
//
// Параметры:
//  ДатаС  <Дата>
//  ДатаПо <Дата>
//
// Возвращаемое значение:
//  <Структура(ДатаНачала:<Дата>, ДатаОкончания:<Дата>), Неопределено>
//
Функция РедактироватьПериод(Знач ДатаС, Знач ДатаПо) Экспорт
	Если Не ЗначениеЗаполнено(ДатаС) Тогда
		ДатаС = '00010101';
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПо) Тогда
		ДатаПо = '00010101';
	КонецЕсли;
	
	ДатаС = НачалоДня(ДатаС);
	ДатаПо = ?(ДатаПо = '00010101', ДатаПо, КонецДня(ДатаПо));
	
	НП = Новый НастройкаПериода;
	НП.УстановитьПериод(ДатаС, ДатаПо);
	
	ГодС = НачалоГода(ДатаС);
	ГодПо = НачалоГода(ДатаПо);
	Если ГодС = ГодПо Тогда
		
		Если ДатаС = НачалоГода(ДатаС) И ДатаПо = КонецГода(ДатаПо) Тогда
			НП.ВариантПериода = ВариантПериода.Год;
			НП.ВариантНачала = ВариантГраницыИнтервала.Год;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Год;
			НП.ЗначениеПериода = ДатаС;
		КонецЕсли;
		
		Если НачалоКвартала(ДатаС) = ДатаС И НачалоКвартала(ДатаС) = НачалоКвартала(ДатаПо) И КонецКвартала(ДатаПо) = ДатаПо Тогда
			Если ДатаС = НачалоГода(ДатаС) Тогда
				НП.ВариантПериода = ВариантПериода.КварталСНачалаГода;
			Иначе
				НП.ВариантПериода = ВариантПериода.Квартал;
			КонецЕсли;
			НП.ВариантНачала = ВариантГраницыИнтервала.Квартал;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Квартал;
			НП.ЗначениеПериода = ДатаС;
		КонецЕсли;
		
		Если НачалоМесяца(ДатаС) = ДатаС И НачалоМесяца(ДатаС) = НачалоМесяца(ДатаПо) И КонецМесяца(ДатаПо) = ДатаПо Тогда
			Если ДатаС = НачалоГода(ДатаС) Тогда
				НП.ВариантПериода = ВариантПериода.МесяцСНачалаКвартала;
			Иначе
				НП.ВариантПериода = ВариантПериода.Месяц;
			КонецЕсли;
			НП.ВариантНачала = ВариантГраницыИнтервала.Месяц;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Месяц;
			НП.ЗначениеПериода = ДатаС;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НП.Редактировать() Тогда
		Возврат Новый Структура("ДатаНачала, ДатаОкончания", НП.ПолучитьДатуНачала(), НП.ПолучитьДатуОкончания());
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
#КонецЕсли
	
#Если Клиент Тогда
//
// Оповещает конфигурацию об интерактивном изменении базы данных.
//
// Параметры:
//  Объект <Строка, ПрикладнойОбъект, Массив(<Строка, ПрикладнойОбъект>)>
//
Процедура ОповеститьОбОбновлении(Объект) Экспорт
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		мсОбъекты = Объект;
	Иначе
		мсОбъекты = Новый Массив;
		мсОбъекты.Добавить(Объект);
	КонецЕсли;
	
	мсТаблицы = Новый Массив;
	Для Каждого ОбновляемыйОбъект Из мсОбъекты Цикл
		Если ТипЗнч(ОбновляемыйОбъект) = Тип("Строка") Тогда
			мсТаблицы.Добавить(ОбновляемыйОбъект);
		Иначе
			мдОбъект = Метаданные.НайтиПоТипу(ТипЗнч(ОбновляемыйОбъект));
			мсТаблицы.Добавить(мдОбъект.ПолноеИмя());
			
			Если Метаданные.Документы.Содержит(мдОбъект) Тогда
				Для Каждого мдРегистр Из мдОбъект.Движения Цикл
					мсТаблицы.Добавить(мдРегистр.ПолноеИмя());
				КонецЦикла;
				
			ИначеЕсли Метаданные.БизнесПроцессы.Содержит(мдОбъект) Тогда
				мсТаблицы.Добавить(мдОбъект.Задача.ПолноеИмя());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Оповестить("ОбновленОбъект", Объект);
	Оповестить("новаИзмененыТаблицы", мсТаблицы);
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
//
// Изменяет координаты поля ввода таким образом, что оно позиционируется на кнопку командной панели.
//
// Параметры:
//  Форма  - Форма - текущая форма.
//  КоманднаяПанель - КоманднаяПанель - командная панель, на которую позиционируем.
//  Кнопка - КнопкаКоманднойПанели - кнопка, на которую позиционируем.
//  ПолеВвода - ПолеВвода - элемент, который позиционируем.
//	нопКонтекст - Структура - контейнер глобальных переменных.
// 
Процедура ПоместитьПолеВводаНаКоманднуюПанель(Форма, КоманднаяПанель, Кнопка, ПолеВвода) Экспорт
	Если Не Форма.Расширение.Свойство("ПоляВводаКомандныхПанелей") Тогда
		тзПоля = Новый ТаблицаЗначений;
		тзПоля.Колонки.Добавить("КоманднаяПанель");
		тзПоля.Колонки.Добавить("Кнопка");
		тзПоля.Колонки.Добавить("ПолеВвода");
		тзПоля.Колонки.Добавить("ОставлятьКартинку");
		Форма.Расширение.Вставить("ПоляВводаКомандныхПанелей", тзПоля);
	КонецЕсли; 
	стрПоле = Форма.Расширение.ПоляВводаКомандныхПанелей.Добавить();
	стрПоле.КоманднаяПанель = КоманднаяПанель;
	стрПоле.Кнопка = Кнопка;
	стрПоле.ПолеВвода = ПолеВвода;
	стрПоле.ОставлятьКартинку = ТипЗнч(ПолеВвода) = Тип("ПолеВвода");
	
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Лево, КоманднаяПанель, ГраницаЭлементаУправления.Лево);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Право, КоманднаяПанель, ГраницаЭлементаУправления.Лево);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Верх, КоманднаяПанель, ГраницаЭлементаУправления.Верх);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Низ, КоманднаяПанель, ГраницаЭлементаУправления.Верх);
	
	ОбновитьКомандныеПанели(Форма);
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
//
// Удаляет размещение поля ввода на командной панели.
//
// Параметры:
//  Форма     <Форма>
//  ПолеВвода <ПолеВвода>
//
Процедура УдалитьПолеВводаСКоманднойПанели(Форма, ПолеВвода) Экспорт
	Если Не Форма.Расширение.Свойство("ПоляВводаКомандныхПанелей") Тогда Возврат; КонецЕсли;
	
	стрПоле = Форма.Расширение.ПоляВводаКомандныхПанелей.Найти(ПолеВвода, "ПолеВвода");
	Если стрПоле = Неопределено Тогда Возврат; КонецЕсли;
	
	Форма.Расширение.ПоляВводаКомандныхПанелей.Удалить(стрПоле);
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
//
// Пересчитывает координаты полей ввода, размещенных на командных панелях.
//
// Параметры:
//  Форма  - Форма - текущая форма.
//	нопКонтекст - Структура - контейнер глобальных переменных.
// 
Процедура ОбновитьКомандныеПанели(Форма) Экспорт
	Если Не Форма.Расширение.Свойство("ПоляВводаКомандныхПанелей") Тогда Возврат; КонецЕсли;
	Для Каждого стрПоле Из Форма.Расширение.ПоляВводаКомандныхПанелей Цикл
		Смещение = 0;
		Для Каждого Кнопка Из стрПоле.КоманднаяПанель.Кнопки Цикл
			Если Кнопка = стрПоле.Кнопка Тогда Прервать; КонецЕсли;
			Если (Смещение = 0) И (Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель) Тогда Продолжить; КонецЕсли;
			Смещение = Смещение + ШиринаКнопки(Кнопка);
		КонецЦикла;
		
		Если стрПоле.ОставлятьКартинку И стрПоле.Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка Тогда
			ОтступДляКартинки = 16;
		Иначе
			ОтступДляКартинки = 0;
		КонецЕсли;
		
		стрПоле.ПолеВвода.Верх = стрПоле.КоманднаяПанель.Верх + 3;
		стрПоле.ПолеВвода.Лево = стрПоле.КоманднаяПанель.Лево + Смещение + 3 + ОтступДляКартинки;
		стрПоле.ПолеВвода.Высота = 19;
		Ширина = ШиринаКнопки(стрПоле.Кнопка) - 4 - ОтступДляКартинки;
		стрПоле.ПолеВвода.Ширина = Ширина;
		
		стрПоле.ПолеВвода.Видимость = стрПоле.КоманднаяПанель.Видимость; 
	КонецЦикла;
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
//
// Вычисляет ширину кнопки командной панели в пикселях.
//
// Параметры:
//  Кнопка - КнопкаКоманднойПанели - кнопка;
//	нопКонтекст - Структура - контейнер глобальных переменных;
// 
// Возвращаемое значение: 
//  Число - Ширина кнопки в пикселях
//
Функция ШиринаКнопки(Кнопка)
	Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель Тогда
		Ширина = 5;
	Иначе
		фСтандартнаяКнопка = Ложь;
		фЕстьКартинка = Ложь;
		Надпись = "";
		Если Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Авто Тогда
			СтандартноеДействие = СокрЛП(Кнопка.Действие);
			Если (СтандартноеДействие = "Восстановить значения...")
			 Или (СтандартноеДействие = "Сохранить значения...")
			 Или (СтандартноеДействие = "Справка") Тогда
				фСтандартнаяКнопка = Истина;
			КонецЕсли;
			
			Если фСтандартнаяКнопка Тогда
				фЕстьКартинка = Истина;
				Надпись = "";
			Иначе
				фЕстьКартинка = Кнопка.Картинка.Вид <> ВидКартинки.Пустая;
				Надпись = ?(фЕстьКартинка, "", Кнопка.Текст);
			КонецЕсли;
		ИначеЕсли Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка Тогда
			фЕстьКартинка = Истина;
		ИначеЕсли Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Надпись Тогда
			Надпись = Кнопка.Текст;
		Иначе
			Надпись = Кнопка.Текст;
			фЕстьКартинка = Кнопка.Картинка.Вид <> ВидКартинки.Пустая;
		КонецЕсли;
		Ширина = ?(фЕстьКартинка, 23, 8) + ШиринаТекста(Надпись) - ?(фСтандартнаяКнопка, 1, 0);
		
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
			Ширина = Ширина + 7;	
		КонецЕсли;
	КонецЕсли;
	Возврат Ширина;
КонецФункции
#КонецЕсли

// Определяет, принадлежит ли одна подсистема другой.
//
// Параметры:
//  мдПодсистема         <ОбъектМетаданных.Подсистема>
//  мдПодсистемаРодитель <ОбъектМетаданных.Подсистема>
//
// Возвращаемое значение:
//  <Булево>: Истина, если мдПодсистема принадлежит мдПодсистемаРодитель.
//
Функция ПодсистемаПринадлежитПодсистеме(мдПодсистема, мдПодсистемаРодитель)
	Если мдПодсистемаРодитель.Подсистемы.Содержит(мдПодсистема) Тогда
		Возврат Истина;
	КонецЕсли;
	Для Каждого мдПодчПодсистема Из мдПодсистемаРодитель.Подсистемы Цикл
		Если ПодсистемаПринадлежитПодсистеме(мдПодсистема, мдПодчПодсистема) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

//Определяет принадлежит ли объект вложенным подсистемам
//
// Параметры:
//  мдПодсистема <ОбъектМетаданных.Подсистема>
//  Объект       <ОбъектМетаданных>
//
// Возвращаемое значение:
//  <Булево>: Истина, если мдПодсистема принадлежит мдПодсистемаРодитель.
//
Функция ОбъектПринадлежитВложеннымПодсистемам(Подсистема, Объект);
	
	Если Подсистема.Состав.Содержит(Объект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		
		Если ОбъектПринадлежитВложеннымПодсистемам(ПодчиненнаяПодсистема, Объект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определяет, принадлежит ли объект метаданных определенной подсистеме.
//
// Параметры:
//  мдОбъект     <ОбъектМетаданных>
//  мдПодсистема <ОбъектМетаданных.Подсистема>
//
// Возвращаемое значение:
//  <Булево>: Истина, если объект принадлежит подсистеме.
//
Функция ОбъектПринадлежитПодсистеме(мдОбъект, мдПодсистема) Экспорт
	
	Возврат ОбъектПринадлежитВложеннымПодсистемам(мдПодсистема, мдОбъект);
	
КонецФункции

// Формирует картинку 14*14, залитую определенным цветом.
//
// Параметры:
//  Цвет <Цвет>
//
// Возвращаемое значение:
//  <Картинка>
//
Функция ПолучитьКартинкуЦвета(Цвет) Экспорт
	ПустаяДиаграмма = Новый Диаграмма;
	ПустаяДиаграмма.ЦветФона = Цвет;
	Возврат ПустаяДиаграмма.ПолучитьКартинку(14, 14, ФорматКартинки.BMP);
КонецФункции

#Если Клиент Тогда
//
// Заменяет объект ссылочного типа на сериализующийся объект
//
// Параметры:      
//	Объект      - Любой тип - объект, подлежащий замене;
//	соСсылки    - Соответствие - туда будут вставлены ссылки объекта;
//	нопКонтекст - Структура - контейнер глобальных переменных;
//
Процедура ЗаменитьСсылкиОбъекта(Объект, соСсылки, новаКонтекст)
	Если Объект = Неопределено Тогда Возврат; КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	Если новаКонтекст.ЗаменаСсылок.Справочники.СодержитТип(ТипОбъекта) Тогда
		Сообщить(Объект);
		Если Объект.Пустая() Тогда
			Объект = Новый Структура("СсылкаНаСправочник", Объект.Метаданные().Имя);
			Возврат;
		КонецЕсли;
		
		соСсылки.Вставить(Объект, Истина);
		обОбъект = Объект.ПолучитьОбъект();
		Попытка
			Описатель = обОбъект.ПолучитьОписатель();
		Исключение
			Описатель = Неопределено;
		КонецПопытки;
		Если Описатель = Неопределено Тогда
			Объект = Новый Структура("СсылкаНаСправочник, УИД", Объект.Метаданные().Имя, Объект.УникальныйИдентификатор());
		Иначе
			Объект = Новый Структура("СсылкаНаСправочник, УИД, Описатель", Объект.Метаданные().Имя, Объект.УникальныйИдентификатор(), Описатель);
		КонецЕсли;
		
	ИначеЕсли новаКонтекст.ЗаменаСсылок.Перечисления.СодержитТип(ТипОбъекта) Тогда
		Сообщить(Объект);
		соСсылки.Вставить(Объект, Истина);
		Перечисление = Объект.Метаданные().Имя;
		Если Объект.Пустая() Тогда
			Значение = "";
		Иначе
			Значение = Объект.Метаданные().ЗначенияПеречисления[Перечисления[Перечисление].Индекс(Объект)].Имя;
		КонецЕсли;
		Объект = Новый Структура("СсылкаНаПеречисление, Значение", Перечисление, Значение);
		
	ИначеЕсли новаКонтекст.ЗаменаСсылок.Картинка = ТипОбъекта Тогда
		Для Каждого мдКартинка Из Метаданные.ОбщиеКартинки Цикл
			Картинка = БиблиотекаКартинок[мдКартинка.Имя];
			Если Картинка = Объект Тогда
				Сообщить(мдКартинка.Имя);
				Объект = Новый Структура("СсылкаНаОбщуюКартинку", мдКартинка.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
//
// Заменяет коллекцию объектов ссылочного типа на сериализующуюся коллекцию
//
// Параметры:      
//	Коллекция   - Любой тип - объект, подлежащий замене;
//	соСсылки    - Соответствие - туда будут вставлены ссылки объекта;
//	нопКонтекст - Структура - контейнер глобальных переменных;
//
Функция ЗаменитьСсылкиКоллекции(Коллекция, соСсылки, новаКонтекст)
	фМодификация = Ложь;
	Если Коллекция = Неопределено Тогда Возврат фМодификация; КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Коллекция);
	Если ТипОбъекта = новаКонтекст.ЗаменаСсылок.Структура Тогда
		мсКлючи = Новый Массив;
		Для Каждого ЭлКоллекция Из Коллекция Цикл
			мсКлючи.Добавить(ЭлКоллекция.Ключ);
		КонецЦикла;
		Для Каждого Ключ Из мсКлючи Цикл
			Значение = Коллекция[Ключ];
			фЗначениеИзменено = ЗаменитьСсылкиКоллекции(Значение, соСсылки, новаКонтекст);
			Если фЗначениеИзменено Тогда
				Коллекция.Вставить(Ключ, Значение);
				фМодификация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Соответствие Тогда
		мсКлючи = Новый Массив;
		Для Каждого ЭлКоллекция Из Коллекция Цикл
			мсКлючи.Добавить(ЭлКоллекция.Ключ);
		КонецЦикла;
		Для Каждого Ключ Из мсКлючи Цикл
			Значение = Коллекция[Ключ];
			фЗначениеИзменено = ЗаменитьСсылкиКоллекции(Значение, соСсылки, новаКонтекст);
			Если новаКонтекст.ЗаменаСсылок.ВсеЗаменяемые.СодержитТип(ТипЗнч(Ключ)) Тогда
				НовыйКлюч = Ключ;
				ЗаменитьСсылкиОбъекта(НовыйКлюч, соСсылки, новаКонтекст);
				фМодификация = Истина;
				Коллекция.Вставить(НовыйКлюч, Значение);
				Коллекция.Удалить(Ключ);
			ИначеЕсли фЗначениеИзменено Тогда
				Коллекция.Вставить(Ключ, Значение);
				фМодификация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Список Тогда
		Размер = Коллекция.Количество() - 1;
		Для ъ = 0 По Размер Цикл
			Значение = Коллекция[ъ].Значение;
			фЗначениеИзменено = ЗаменитьСсылкиКоллекции(Значение, соСсылки, новаКонтекст);
			Если фЗначениеИзменено Тогда
				Коллекция[ъ].Значение = Значение;
				фМодификация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Массив Тогда
		Размер = Коллекция.Количество() - 1;
		Для ъ = 0 По Размер Цикл
			Значение = Коллекция[ъ];
			фЗначениеИзменено = ЗаменитьСсылкиКоллекции(Значение, соСсылки, новаКонтекст);
			Если фЗначениеИзменено Тогда
				Коллекция[ъ] = Значение;
				фМодификация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Таблица Тогда
		КоличествоКолонок = Коллекция.Колонки.Количество() - 1;
		мсКолонки = Новый Массив(КоличествоКолонок + 1);
		мсКолонкиСсылок = Новый Массив(КоличествоКолонок + 1);
		Для ъ = 0 По КоличествоКолонок Цикл
			ИмяКолонки = Коллекция.Колонки[ъ].Имя;
			мсКолонки[ъ] = ИмяКолонки;
			мсКолонкиСсылок[ъ] = ИмяКолонки + "_ЗаменаСсылок";
			Если Коллекция.Колонки.Найти(мсКолонкиСсылок[ъ]) = Неопределено Тогда
				Коллекция.Колонки.Добавить(мсКолонкиСсылок[ъ]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из Коллекция Цикл
			Для ъ = 0 По КоличествоКолонок Цикл
				Значение = Строка[мсКолонки[ъ]];
				фЗначениеИзменено = ЗаменитьСсылкиКоллекции(Значение, соСсылки, новаКонтекст);
				Строка[мсКолонкиСсылок[ъ]] = Значение;
				фМодификация = фМодификация Или фЗначениеИзменено;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Дерево Тогда
		КоличествоКолонок = Коллекция.Колонки.Количество() - 1;
		мсКолонки = Новый Массив(КоличествоКолонок + 1);
		мсКолонкиСсылок = Новый Массив(КоличествоКолонок + 1);
		Для ъ = 0 По КоличествоКолонок Цикл
			ИмяКолонки = Коллекция.Колонки[ъ].Имя;
			мсКолонки[ъ] = ИмяКолонки;
			мсКолонкиСсылок[ъ] = ИмяКолонки + "_ЗаменаСсылок";
			Если Коллекция.Колонки.Найти(мсКолонкиСсылок[ъ]) = Неопределено Тогда
				Коллекция.Колонки.Добавить(мсКолонкиСсылок[ъ]);
			КонецЕсли;
		КонецЦикла;
		
		фМодификация = ЗаменитьСсылкиСтрокДерева(мсКолонки, мсКолонкиСсылок, Коллекция.Строки, соСсылки, новаКонтекст);
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Картинка Тогда
		ЗаменитьСсылкиОбъекта(Коллекция, соСсылки, новаКонтекст);
		фМодификация = Истина;
	ИначеЕсли новаКонтекст.ЗаменаСсылок.ВсеЗаменяемые.СодержитТип(ТипОбъекта) Тогда
		ЗаменитьСсылкиОбъекта(Коллекция, соСсылки, новаКонтекст);
		фМодификация = Истина;
	КонецЕсли;
	
	Возврат фМодификация;
КонецФункции
#КонецЕсли

#Если Клиент Тогда
//
// Заменяет объекты ссылочного типа, записанные в строки дерева значений,
//	на сериализующиеся объекты
//
// Параметры:      
//	мсКолонки       - Массив - имена колонок, содержащих ссылки;
//	мсКолонкиСсылок - Массив - имена колонок для записи сериализованных объектов;
//	Строки          - КоллекцияСтрокДереваЗначений - строки для замены;
//	соСсылки        - Соответствие - туда будут вставлены ссылки объекта;
//	нопКонтекст     - Структура - контейнер глобальных переменных;
//
Функция ЗаменитьСсылкиСтрокДерева(мсКолонки, мсКолонкиСсылок, Строки, соСсылки, новаКонтекст)
	КоличествоКолонок = мсКолонки.Количество() - 1;
	фМодификация = Ложь;
	Для Каждого Строка Из Строки Цикл
		Для ъ = 0 По КоличествоКолонок Цикл
			Значение = Строка[мсКолонки[ъ]];
			фЗначениеИзменено = ЗаменитьСсылкиКоллекции(Значение, соСсылки, новаКонтекст);
			Строка[мсКолонкиСсылок[ъ]] = Значение;
			фМодификация = фМодификация Или фЗначениеИзменено;
		КонецЦикла;
		фСтрокиИзменены = ЗаменитьСсылкиСтрокДерева(мсКолонки, мсКолонкиСсылок, Строка.Строки, соСсылки, новаКонтекст);
		фМодификация = фМодификация Или фСтрокиИзменены;
	КонецЦикла;
	Возврат фМодификация;
КонецФункции
#КонецЕсли

#Если Клиент Тогда
//
// Заменяет объект ссылочного типа на сериализующийся объект
//
// Параметры:      
//	Объект      - Любой тип - объект, подлежащий замене;
//	нопКонтекст - Структура - контейнер глобальных переменных;
//
Функция ЗаменитьСсылки(Объект, новаКонтекст) Экспорт
	ЗаменаСсылок = Новый Структура("Структура, Соответствие, Список, Массив, Таблица, Дерево, Справочники, Перечисления, ВсеЗаменяемые, Картинка",
		Тип("Структура"),
		Тип("Соответствие"),
		Тип("СписокЗначений"),
		Тип("Массив"),
		Тип("ТаблицаЗначений"),
		Тип("ДеревоЗначений"),
		Справочники.ТипВсеСсылки(),
		Перечисления.ТипВсеСсылки(),
		Новый ОписаниеТипов(Справочники.ТипВсеСсылки(), Перечисления.ТипВсеСсылки().Типы()),
		Тип("Картинка"));
	новаКонтекст.Вставить("ЗаменаСсылок", ЗаменаСсылок);
	соСсылки = Новый Соответствие;
	ЗаменитьСсылкиКоллекции(Объект, соСсылки, новаКонтекст);
	Возврат соСсылки;
КонецФункции
#КонецЕсли

#Если Клиент Тогда
//
// Восстанавливает объекты ссылочного типа, записанные в строки дерева значений,
//	из сериализующиеся объектов
//
// Параметры:      
//	мсКолонки       - Массив - имена колонок для записи ссылок;
//	мсКолонкиСсылок - Массив - имена колонок сериализованных объектов;
//	Строки          - КоллекцияСтрокДереваЗначений - строки для восстановления;
//	соСсылки        - Соответствие - туда будут вставлены ссылки объекта;
//	нопКонтекст     - Структура - контейнер глобальных переменных;
//	фМодификация    - Булево - устанавливается в значение Истина, если коллекция строк была изменена;
//
Процедура ВосстановитьСтрокиДерева(мсКолонки, мсКолонкиСсылок, Строки, соСсылки, новаКонтекст, фМодификация)
	КоличествоКолонок = мсКолонки.Количество() - 1;
		
	Для Каждого Строка Из Строки Цикл
		Для ъ = 0 По КоличествоКолонок Цикл
			Значение = Строка[мсКолонкиСсылок[ъ]];
			фЗначениеИзменено = ВосстановитьКоллекцию(Значение, соСсылки, новаКонтекст);
			Строка[мсКолонки[ъ]] = Значение;
			фМодификация = фМодификация Или фЗначениеИзменено;
		КонецЦикла;
		ВосстановитьСтрокиДерева(мсКолонки, мсКолонкиСсылок, Строка.Строки, соСсылки, новаКонтекст, фМодификация);
	КонецЦикла;
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
//
// Восстанавливает ссылку из сериализующиегося объекта
//
// Параметры:      
//	стСсылка    - Структура - сериализующийся объект;
//	соСсылки    - Соответствие - туда будут вставлены ссылки объекта;
//	нопКонтекст - Структура - контейнер глобальных переменных;
//
Процедура ВосстановитьСсылку(стСсылка, соСсылки, новаКонтекст)
	Если стСсылка.Свойство("СсылкаНаСправочник") Тогда
		Попытка
			спрОбъект = Справочники[стСсылка.СсылкаНаСправочник];
		Исключение
			стСсылка = Неопределено;
			Возврат;
		КонецПопытки;
		Если Не стСсылка.Свойство("УИД") Тогда
			стСсылка = Справочники[стСсылка.СсылкаНаСправочник].ПустаяСсылка();
			Возврат;
		КонецЕсли;
		
		Если стСсылка.Свойство("Описатель") Тогда
			Если стСсылка.Описатель.Свойство("КлючевоеПоле") Тогда
				НашаСсылка = Справочники[стСсылка.СсылкаНаСправочник].НайтиПоРеквизиту(стСсылка.Описатель.КлючевоеПоле, стСсылка.Описатель.ЗначениеКлючевогоПоля);
				Если Не НашаСсылка.Пустая() Тогда
					стСсылка = НашаСсылка;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Ссылка = спрОбъект.ПолучитьСсылку(стСсылка.УИД);
		Если Лев(СокрЛП(Ссылка), 18) = "<Объект не найден>" Тогда
			Объект = спрОбъект.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);
			Если стСсылка.Свойство("Описатель") Тогда
				Объект.УстановитьОписатель(стСсылка.Описатель);
			КонецЕсли;
			Объект.Записать();
			стСсылка = Объект.Ссылка;
		Иначе
			стСсылка = Ссылка;
		КонецЕсли;
	ИначеЕсли стСсылка.Свойство("СсылкаНаПеречисление") Тогда
		Если стСсылка.Значение = "" Тогда
			стСсылка = Перечисления[стСсылка.СсылкаНаПеречисление].ПустаяСсылка();
		Иначе
			стСсылка = Перечисления[стСсылка.СсылкаНаПеречисление][стСсылка.Значение];
		КонецЕсли;
	ИначеЕсли стСсылка.Свойство("СсылкаНаОбщуюКартинку") Тогда
		стСсылка = БиблиотекаКартинок[стСсылка.СсылкаНаОбщуюКартинку];
	КонецЕсли;
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
//
// Проверяет, является ли объект сериализованной ссылкой
//
// Параметры:      
//	Ссылка      - Любой тип - проверяемый объект;
//	нопКонтекст - Структура - контейнер глобальных переменных;
//
// Возвращаемое значение: 
//  Истина - объект является сериализованной ссылкой
//
Функция ЭтоСохраненнаяСсылка(Ссылка, новаКонтекст)
	ТипОбъекта = ТипЗнч(Ссылка);
	Если ТипОбъекта <> новаКонтекст.ЗаменаСсылок.Структура Тогда Возврат Ложь; КонецЕсли;
	Возврат Ссылка.Свойство("СсылкаНаСправочник") Или Ссылка.Свойство("СсылкаНаПеречисление") Или Ссылка.Свойство("СсылкаНаОбщуюКартинку");
КонецФункции
#КонецЕсли

#Если Клиент Тогда
//
// Восстанавливает ссылки коллекции из сериализующихся объектов
//
// Параметры:      
//	Коллекция   - Любой тип - восстанавливаемая коллекция;
//	соСсылки    - Соответствие - туда будут вставлены ссылки объекта;
//	нопКонтекст - Структура - контейнер глобальных переменных;
//
Функция ВосстановитьКоллекцию(Коллекция, соСсылки, новаКонтекст)
	фМодификация = Ложь;
	Если Коллекция = Неопределено Тогда Возврат фМодификация; КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Коллекция);
	Если ЭтоСохраненнаяСсылка(Коллекция, новаКонтекст) Тогда
		ВосстановитьСсылку(Коллекция, соСсылки, новаКонтекст);
		фМодификация = Истина;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Структура Тогда
		мсКлючи = Новый Массив;
		Для Каждого ЭлКоллекция Из Коллекция Цикл
			мсКлючи.Добавить(ЭлКоллекция.Ключ);
		КонецЦикла;
		Для Каждого Ключ Из мсКлючи Цикл
			Значение = Коллекция[Ключ];
			фЗначениеИзменено = ВосстановитьКоллекцию(Значение, соСсылки, новаКонтекст);
			Если фЗначениеИзменено Тогда
				Коллекция.Вставить(Ключ, Значение);
				фМодификация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Соответствие Тогда
		мсКлючи = Новый Массив;
		Для Каждого ЭлКоллекция Из Коллекция Цикл
			мсКлючи.Добавить(ЭлКоллекция.Ключ);
		КонецЦикла;
		Для Каждого Ключ Из мсКлючи Цикл
			Значение = Коллекция[Ключ];
			фЗначениеИзменено = ВосстановитьКоллекцию(Значение, соСсылки, новаКонтекст);
			Если ЭтоСохраненнаяСсылка(Ключ, новаКонтекст) Тогда
				НовыйКлюч = Ключ;
				ВосстановитьСсылку(НовыйКлюч, соСсылки, новаКонтекст);
				фМодификация = Истина;
				Коллекция.Вставить(НовыйКлюч, Значение);
				Коллекция.Удалить(Ключ);
			ИначеЕсли фЗначениеИзменено Тогда
				Коллекция.Вставить(Ключ, Значение);
				фМодификация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Список Тогда
		Размер = Коллекция.Количество() - 1;
		Для ъ = 0 По Размер Цикл
			Значение = Коллекция[ъ].Значение;
			фЗначениеИзменено = ВосстановитьКоллекцию(Значение, соСсылки, новаКонтекст);
			Если фЗначениеИзменено Тогда
				Коллекция[ъ].Значение = Значение;
				фМодификация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Массив Тогда
		Размер = Коллекция.Количество() - 1;
		Для ъ = 0 По Размер Цикл
			Значение = Коллекция[ъ];
			фЗначениеИзменено = ВосстановитьКоллекцию(Значение, соСсылки, новаКонтекст);
			Если фЗначениеИзменено Тогда
				Коллекция[ъ] = Значение;
				фМодификация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Таблица Тогда
		мсКолонки = Новый Массив();
		мсКолонкиСсылок = Новый Массив();
		Для Каждого Колонка Из Коллекция.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если Прав(ИмяКолонки, 13) = "_ЗаменаСсылок" Тогда
				мсКолонкиСсылок.Добавить(ИмяКолонки);
			Иначе
				мсКолонки.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		КоличествоКолонок = мсКолонки.Количество() - 1;
		
		Для Каждого Строка Из Коллекция Цикл
			Для ъ = 0 По КоличествоКолонок Цикл
				Значение = Строка[мсКолонкиСсылок[ъ]];
				фЗначениеИзменено = ВосстановитьКоллекцию(Значение, соСсылки, новаКонтекст);
				Строка[мсКолонки[ъ]] = Значение;
				фМодификация = фМодификация Или фЗначениеИзменено;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Колонка Из мсКолонкиСсылок Цикл
			Коллекция.Колонки.Удалить(Коллекция.Колонки.Найти(Колонка));
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = новаКонтекст.ЗаменаСсылок.Дерево Тогда
		мсКолонки = Новый Массив();
		мсКолонкиСсылок = Новый Массив();
		Для Каждого Колонка Из Коллекция.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если Прав(ИмяКолонки, 13) = "_ЗаменаСсылок" Тогда
				мсКолонкиСсылок.Добавить(ИмяКолонки);
			Иначе
				мсКолонки.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		
		ВосстановитьСтрокиДерева(мсКолонки, мсКолонкиСсылок, Коллекция.Строки, соСсылки, новаКонтекст, фМодификация);
		
		Для Каждого Колонка Из мсКолонкиСсылок Цикл
			Коллекция.Колонки.Удалить(Коллекция.Колонки.Найти(Колонка));
		КонецЦикла;
	КонецЕсли;
	
	Возврат фМодификация;
КонецФункции
#КонецЕсли

#Если Клиент Тогда
//
// Восстанавливает ссылки объекта из сериализующихся объектов
//
// Параметры:      
//	Коллекция   - Любой тип - восстанавливаемый объект;
//	нопКонтекст - Структура - контейнер глобальных переменных;
//
Функция ВосстановитьСсылки(Описатель, новаКонтекст) Экспорт
	ЗаменаСсылок = Новый Структура("Структура, Соответствие, Список, Массив, Таблица, Дерево",
		Тип("Структура"),
		Тип("Соответствие"),
		Тип("СписокЗначений"),
		Тип("Массив"),
		Тип("ТаблицаЗначений"),
		Тип("ДеревоЗначений"));
	новаКонтекст.Вставить("ЗаменаСсылок", ЗаменаСсылок);
	соСсылки = Новый Соответствие;
	ВосстановитьКоллекцию(Описатель, соСсылки, новаКонтекст);
	Возврат соСсылки;
КонецФункции
#КонецЕсли

#Если Клиент Тогда
//
// Открывает диалог выбора файла
//
// Параметры:      
//	Файл   - Строка - исходное имя файла; в эту переменную записывается выбранное имя файла
//	Описание - Строка - заголовок диалога выбора файла;
//	Маска - Строка - маска выбора файла;
//
Процедура ВыбратьФайл(Файл, Описание, Маска) Экспорт
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = Описание;
	ДиалогОткрытияФайла.Фильтр = Маска;
	ДиалогОткрытияФайла.ПолноеИмяФайла = Файл;
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Файл = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
//
// Открывает диалог выбора каталога
//
// Параметры:      
//	Каталог   - Строка - исходное имя каталога; в эту переменную записывается выбранное имя каталога
//	Описание - Строка - заголовок диалога выбора каталога;
//
Процедура ВыбратьКаталог(Каталог, Описание) Экспорт
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = Описание;
	ДиалогОткрытияФайла.Каталог = Каталог;
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Каталог = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;
КонецПроцедуры
#КонецЕсли

//
//
// Параметры:
//  Секунд <>:
//
// Возвращаемое значение:
//  <>:
//
Функция СекундыВЧасыИМинутыСтрокой(Секунд) Экспорт
	Минут = Цел(Секунд / 60);
	
	Длительность = "";
	Часов = Цел(Минут / 60);
	Минут = Минут - Часов * 60;
	Если Часов > 0 Тогда
		Длительность = Строка(Часов) + " ч ";
	КонецЕсли;
	Если Минут > 0 Тогда
		Длительность = Длительность + Строка(Минут) + " мин";
	КонецЕсли;
	
	Возврат Длительность;
КонецФункции

#Если Клиент Тогда
//
// Возвращает стандартную картинку, соответствующую определенной таблице.
//
// Параметры:
//  ИмяТаблицы <Строка>: Имя таблицы, как оно задается в языке запросов.
//
// Возвращаемое значение:
//  <Картинка>
//
Функция ПолучитьКартинкуТаблицы(ИмяТаблицы) Экспорт
	Если Лев(ИмяТаблицы, 3) = "Спр" Тогда
		Картинка = БиблиотекаКартинок.СправочникОбъект;
		
	ИначеЕсли Лев(ИмяТаблицы, 3) = "Док" Тогда
		Картинка = БиблиотекаКартинок.ДокументОбъект;
		
	ИначеЕсли Лев(ИмяТаблицы, 3) = "Биз" Тогда
		Картинка = БиблиотекаКартинок.БизнесПроцессОбъект;
		
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Возврат Картинка;
КонецФункции
#КонецЕсли

#Если Клиент Тогда
// Исправляет кириллическую строку, набранную по ошибке латиницей.
//
// Параметры:
//  Строка <Строка>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ИсправитьРаскладкуКлавиатуры(Строка) Экспорт
	СимволыНаКирилице = "абвгдежзиклмнопрстуфхцчшщъьэюяАБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЪЬЭЮЯ";
	СимволыНаЛатинице = "f,dult;pbrkvyjghcnea[wxio]m'.zF,DULT;PBRKVYJGHCNEA[WXIO]M'.Z";
	
	ДлинаСтроки = СтрДлина(Строка);
	НайденоСимволовНаЛатинице = 0;
	Для ъ = 1 по ДлинаСтроки Цикл
		Если Найти(СимволыНаЛатинице,Сред(Строка, ъ, 1)) > 0 Тогда
			НайденоСимволовНаЛатинице = НайденоСимволовНаЛатинице + 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НайденоСимволовНаЛатинице = ДлинаСтроки Тогда
		ИсправленнаяСтрока = "";
		Для ъ = 1 по ДлинаСтроки Цикл
			НомерСимвола = Найти(СимволыНаЛатинице,Сред(Строка, ъ, 1));
			ИсправленнаяСтрока = ИсправленнаяСтрока	+ Сред(СимволыНаКирилице, НомерСимвола, 1)
		КонецЦикла	      
		
	Иначе	
		ИсправленнаяСтрока = Строка;
	КонецЕсли;	
	
	Возврат ИсправленнаяСтрока;
КонецФункции
#КонецЕсли

// Возвращает имя, заданное в конфигураторе, ссылки на перечисление.
//
// Параметры:
//  Ссылка <ПеречислениеСсылка>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьИмяЗначенияПеречисления(Ссылка) Экспорт
	Возврат Ссылка.Метаданные().ЗначенияПеречисления[Перечисления[Ссылка.Метаданные().Имя].Индекс(Ссылка)].Имя;
КонецФункции

// Возвращает массив объектов метаданных из переданной коллекции, которые входят в определенную подсистему.
//
// Параметры:
//  мдКоллекция <КоллекцияОбъектовМетаданных>
//  мдКласс     <ОбъектМетаданных.Подсистема>
//
// Возвращаемое значение:
//  <Массив(<ОбъектМетаданных>)>
//
Функция ПолучитьОбъектыМетаданныхКласса(мдКоллекция, мдКласс) Экспорт
	мсОбъекты = Новый Массив;
	Для Каждого мдОбъект Из мдКоллекция Цикл
		Если ОбъектПринадлежитПодсистеме(мдОбъект, мдКласс) Тогда
			мсОбъекты.Добавить(мдОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мсОбъекты;
КонецФункции

// Возвращает имя временного файла для выгрузки макета на диск.
//
// Параметры:
//  мдМакет                   <ОбъектМетаданных.Макет>
//  новаКонтекст              <Структура[Контекст]>: используется для повторного использования вычисленных
//                                                   значений на клиенте.
//  Каталог                   <Строка>: каталог для выгрузки макета.
//  ДобавлятьСлучайныйСуффикс <Булево>
//
// Возвращаемое значение:
//  <Строка>: полный путь к файлу макета.
//
Функция ПолучитьИмяФайлаМакета(мдМакет, новаКонтекст, Каталог = Неопределено, ДобавлятьСлучайныйСуффикс = Ложь) Экспорт
	ИмяМакета = мдМакет.Имя;
	ИмяФайла = Прав(ИмяМакета, СтрДлина(ИмяМакета) - 4);
	
	Если ДобавлятьСлучайныйСуффикс Тогда
		Суффикс = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
		ИмяФайла = СтрЗаменить(ИмяФайла, "_", Суффикс + "_");
	КонецЕсли;
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "_", ".");
	
	Если Каталог = Неопределено Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла("");
		ъ = СтрДлина(ВременныйФайл);
		Пока ъ > 0 Цикл
			Симв = Сред(ВременныйФайл, ъ , 1);
			Если Симв = "/" Или Симв = "\" Тогда
				Прервать;
			КонецЕсли;
			ъ = ъ - 1;
		КонецЦикла;
		ИмяФайла = Лев(ВременныйФайл, ъ) + ИмяФайла;
		
		Если Не новаКонтекст.Свойство("ВременныеФайлы") Тогда
			новаКонтекст.Вставить("ВременныеФайлы", Новый Массив);
		КонецЕсли;
		
		новаКонтекст.ВременныеФайлы.Добавить(ИмяФайла);
	Иначе
		ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
	Возврат ИмяФайла;
КонецФункции

// Выгружает макет на диск.
//
// Параметры:
//  мдМакет                   <ОбъектМетаданных.Макет>:
//  новаКонтекст              <Структура[Контекст]>: используется для повторного использования вычисленных
//                                                   значений на клиенте.
//  Каталог                   <Строка>: каталог для выгрузки макета.
//  ДобавлятьСлучайныйСуффикс <Булево>
//
// Возвращаемое значение:
//  <Строка>: полный путь к файлу макета.
//
Функция ВыгрузитьМакетНаДиск(мдМакет, новаКонтекст, Каталог = Неопределено, ДобавлятьСлучайныйСуффикс = Ложь) Экспорт
	ИмяФайла = ПолучитьИмяФайлаМакета(мдМакет, новаКонтекст, Каталог, ДобавлятьСлучайныйСуффикс);
	
	Если Метаданные.ОбщиеМакеты.Содержит(мдМакет) Тогда
		Макет = ПолучитьОбщийМакет(мдМакет.Имя);
		
	Иначе
		Макет = Константы[мдМакет.Имя].Получить().Получить();
	КонецЕсли;
	Макет.Записать(ИмяФайла);
	
	Возврат ИмяФайла;
КонецФункции

// Удаляет временные файлы, в которые были ранее выгружены макеты функцией ВыгрузитьМакетНаДиск.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
Процедура УдалитьВременныеФайлы(новаКонтекст) Экспорт
	Если новаКонтекст.Свойство("ВременныеФайлы") Тогда
		Для Каждого Файл Из новаКонтекст.ВременныеФайлы Цикл
			УдалитьФайлы(Файл);
		КонецЦикла;
		новаКонтекст.ВременныеФайлы.Очистить();
	КонецЕсли;
КонецПроцедуры

// Регистрирует в системе ActiveX контрол, содержащийся в макете.
//
// Параметры:
//  мдМакет <ОбъектМетаданных.Макет>
//
// Возвращаемое значение:
//  <Булево>: Истина, если регистрация прошла успешно.
//
Функция ЗарегистрироватьActiveXКонтрол(мдМакет) Экспорт
	ФормаРегистрации = ПолучитьОбщуюФорму("новаФормаРегистрацииActiveXКонтрола");
	ФормаРегистрации.Макет = мдМакет;
	Если ФормаРегистрации.ЗарегистрироватьКонтрол() Тогда
		Возврат Истина;		
	Иначе		
		Возврат ФормаРегистрации.ОткрытьМодально() = Истина;
	КонецЕсли;
КонецФункции

// Возвращает текущий часовой пояс, установленный в операционной системе.
//
// Возвращаемое значение:
//  <Число, Неопределено>: количество секунд смещения относительно UTC.
//
Функция ПолучитьТекущийЧасовойПояс() Экспорт
	Попытка
		Сервер = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\CIMV2");
		Выборка = Сервер.ExecQuery("SELECT * FROM Win32_OperatingSystem");
		Для Каждого СтрокаВыборки Из Выборка Цикл
			Возврат СтрокаВыборки.CurrentTimeZone * 60;
		КонецЦикла;
		
	Исключение
		Возврат Неопределено;		
	КонецПопытки;
КонецФункции

// Выводит всю информацию об ошибке.
//
// Параметры:
//  Ошибка <ИнформацияОбОшибке>
//
Процедура ВывестиПодробнуюИнформациюОбОшибке(Ошибка) Экспорт
	
	мсСтроки = Новый Массив;
	ПредставлеениеДляЖурналаРегистрации = "";
	
	Пока Ошибка <> Неопределено Цикл
		
		мсСтроки.Вставить(0, Ошибка.Описание);
		
	    ПредставлеениеДляЖурналаРегистрации = ПредставлеениеДляЖурналаРегистрации + "Описание='" + Ошибка.Описание + "'" + Символы.ПС;
	    ПредставлеениеДляЖурналаРегистрации = ПредставлеениеДляЖурналаРегистрации + "ИмяМодуля='" + Ошибка.ИмяМодуля + "'" + Символы.ПС;
	    ПредставлеениеДляЖурналаРегистрации = ПредставлеениеДляЖурналаРегистрации + "НомерСтроки=" + Ошибка.НомерСтроки + Символы.ПС;
	    ПредставлеениеДляЖурналаРегистрации = ПредставлеениеДляЖурналаРегистрации + "ИсходнаяСтрока='" + Ошибка.ИсходнаяСтрока + "'" + Символы.ПС;
	    ПредставлеениеДляЖурналаРегистрации = ПредставлеениеДляЖурналаРегистрации + Символы.ПС;
		
		Ошибка = Ошибка.Причина;
	КонецЦикла;
	
	ПредставлеениеДляЖурналаРегистрации = СокрЛП(ПредставлеениеДляЖурналаРегистрации);
	
	стрОшибка = "";
	Для Каждого Строка Из мсСтроки Цикл
		Если ПустаяСтрока(СокрЛП(Строка)) Тогда Продолжить; КонецЕсли;
		
		стрОшибка = стрОшибка + ?(стрОшибка = "", "", Символы.ПС) + Строка;
	КонецЦикла;
	
	#Если Клиент Тогда
		ЗаписьЖурналаРегистрации("Исключительная ситуация клиента (УТЛ)", УровеньЖурналаРегистрации.Ошибка, , , ПредставлеениеДляЖурналаРегистрации);
		Сообщить(стрОшибка);
	#ИначеЕсли Сервер Тогда
		ЗаписьЖурналаРегистрации("Исключительная ситуация сервера (УТЛ)", УровеньЖурналаРегистрации.Ошибка, , , ПредставлеениеДляЖурналаРегистрации);
		Сообщить(стрОшибка);
	#ИначеЕсли ВнешнееСоединение Тогда
		ЗаписьЖурналаРегистрации("Исключительная ситуация внешнего соединения (УТЛ)", УровеньЖурналаРегистрации.Ошибка, , , ПредставлеениеДляЖурналаРегистрации);
	#КонецЕсли
	
КонецПроцедуры

#Если Клиент Тогда

//
// Интерактивно корректирует КПП при измении ИНН.
//
// Параметры:
//  ИНН <Строка>
//  КПП <Строка>
//
// Возвращаемое значение:
//  <Строка>: скорректированный КПП
//
Функция ПолучитьКПП(ИНН, КПП) Экспорт
   Если ЗначениеЗаполнено(КПП) Тогда
		Ответ = Вопрос("Изменить КПП", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);	
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат КПП;			
		КонецЕсли; 
	КонецЕсли; 
	Возврат Сред(ИНН, 1, 4) + "01001"; 
КонецФункции 

#КонецЕсли
 
#Если Клиент Тогда
// Выполняет склонение ФИО в нужный падеж
//
// Параметры:
//  Компонента        <Внешняя компонента>
//  ФИО               <Строка>
//  Падеж             <Число>
//  Пол               <Число>
//  Результат         <Строка>
//  СообщениеОбОшибке <Строка>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПросклонятьФИО(Компонента, Знач ФИО = "", Падеж = 1, Пол = 0, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	Результат = ФИО;
	Если Компонента <> Неопределено Тогда
		Если ПустаяСтрока(ФИО) Тогда
			СообщениеОбОшибке = "Строка с ФИО не должна быть пустой.";
			Результат = "";
			Возврат Результат;
		КонецЕсли;
		
		Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
			СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени и отчества пробелов быть не должно.";
			Результат = "";
			Возврат Результат;
		КонецЕсли;
		
					
		Попытка
			Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
				Результат = Компонента.Просклонять(ФИО, Падеж, 1);
					
			ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				Результат = Компонента.Просклонять(ФИО, Падеж, 2);
					
			Иначе
				Результат = Компонента.Просклонять(ФИО, Падеж);
			КонецЕсли;
			
		Исключение
			Результат = "";
			Возврат Результат;
		КонецПопытки;
		
		Возврат Результат;
	КонецЕсли;
	Возврат Результат;
КонецФункции 
#КонецЕсли

//Создание пользователя в справочнике по пользователю ИБ
//
Функция СоздатьПользователя(ПользовательИБ) Экспорт
	
	новаИнтеграция.СоздатьПользователя(ПользовательИБ);
	
	Пользователь = Справочники.новаПользователи.НайтиПоНаименованию(ПользовательИБ.Имя, Истина);
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		обПользователь = Справочники.новаПользователи.СоздатьЭлемент();
		обПользователь.Наименование = ПользовательИБ.Имя;
		обПользователь.Записать();
		Пользователь = обПользователь.Ссылка;
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

//Выводит пользователю сообщение об ошибке, работает только на клиенте
//
//  Параметры:
//    КодОшибки - <Строка> уникаьлный идентификатор ошибки
//    ОписаниеОшибки - <Строка> подробное описание ошибки
//
Процедура СообщитьПользователюОбОшибке(КодОшибки, ОписаниеОшибки) Экспорт
	
	#Если Клиент Тогда
		ЗаписьЖурналаРегистрации("Исключительная ситуация клиента (УТЛ)", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		
		//Форма = Обработки.новаОписаниеСитуаций.ПолучитьФорму("ОписаниеОшибки");
		//Форма.КодОшибки = КодОшибки;
		//Форма.ОписаниеОшибки = ОписаниеОшибки;
		
		//Форма.ОткрытьМодально();
		Сообщить("" + КодОшибки + ": " + ОписаниеОшибки);
		
	#ИначеЕсли Сервер Тогда
		ЗаписьЖурналаРегистрации("Исключительная ситуация сервера (УТЛ)", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	#ИначеЕсли ВнешнееСоединение Тогда
		ЗаписьЖурналаРегистрации("Исключительная ситуация внешнего соединения (УТЛ)", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	#КонецЕсли
	
КонецПроцедуры

//Возвращает версию конфигурации
//
Функция ПолучитьВерсиюКонфигурации() Экспорт
	
	Результат = СокрЛП(Метаданные.Версия);
	Слэш = Найти(Результат, "/");
	Если Слэш > 0 Тогда
		Результат = СокрЛП(Сред(Результат, Слэш + 1));
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции
