

Функция ПолучитьКассира(Организация, ККМ, ОткрытиеСмены = Ложь, ВычислятьЕслиОтсутствует = Истина) Экспорт
	
	
	Если ОткрытиеСмены Тогда // тупо возвращаем нового кассира
		
		Кассир = ВычислитьКассира(Организация, ККМ);
		Возврат Кассир;	
	
	Иначе
		
		ЗапросПоследняяЗапись = Новый Запрос("ВЫБРАТЬ
		                                     |	СостояниеСменККМСрезПоследних.СостояниеСмены КАК СостояниеСмены,
		                                     |	СостояниеСменККМСрезПоследних.Кассир КАК Кассир,
		                                     |	СостояниеСменККМСрезПоследних.График КАК График,
		                                     |	СостояниеСменККМСрезПоследних.Период КАК Период,
		                                     |	СостояниеСменККМСрезПоследних.Регистратор КАК Регистратор
		                                     |ИЗ
		                                     |	РегистрСведений.СостояниеСменККМ.СрезПоследних КАК СостояниеСменККМСрезПоследних
		                                     |ГДЕ
		                                     |	СостояниеСменККМСрезПоследних.ККМ = &ККМ");
		ЗапросПоследняяЗапись.УстановитьПараметр("ККМ", ККМ);
		РезПоследняяЗапись = ЗапросПоследняяЗапись.Выполнить().Выбрать();
		
		Если РезПоследняяЗапись.Следующий() Тогда	
			
			Если РезПоследняяЗапись.СостояниеСмены = Перечисления.СостояниеСменККМ.СменаОткрыта Тогда
				
				Возврат РезПоследняяЗапись.Кассир;
				
				//// ищем в регистре  СостояниеСменККМ
				//Запрос = Новый Запрос("ВЫБРАТЬ
				//                      |	СостояниеСменККМ.Кассир КАК Кассир
				//                      |ИЗ
				//                      |	РегистрСведений.СостояниеСменККМ КАК СостояниеСменККМ
				//                      |ГДЕ
				//                      |	СостояниеСменККМ.Период МЕЖДУ &Период1 И &Период2
				//                      |	И СостояниеСменККМ.ККМ = &ККМ");
				//Запрос.УстановитьПараметр("Период1", НачалоДня(ТекущаяДата()));
				//Запрос.УстановитьПараметр("Период2", КонецДня(ТекущаяДата()));
				//Запрос.УстановитьПараметр("ККМ", ККМ);
				//рез = Запрос.Выполнить().Выбрать();				
				//
				//Если рез.Следующий() Тогда
				//	Возврат рез.Кассир;		
				//Иначе
				//	Если ВычислятьЕслиОтсутствует Тогда	
				//		Кассир = ВычислитьКассира(Организация, ККМ);
				//		Возврат Кассир;			
				//	Иначе	
				//		Возврат Неопределено;
				//	КонецЕсли;
				//КонецЕсли;
					
			Иначе // смена закрыта, а значит нужен новый кассир
				
				Кассир = ВычислитьКассира(Организация, ККМ);
				Возврат Кассир;			
			
			КонецЕсли;
			
		Иначе
			
			Кассир = ВычислитьКассира(Организация, ККМ);
			Возврат Кассир;	
			
		КонецЕсли;	
	
	КонецЕсли;
	
	

КонецФункции // ()


Функция ВычислитьКассира(Организация, ККМ) Экспорт

	
	// получим всех доступных кассиров	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НазначениеКассировПоОрганизациямСрезПоследних.Кассир КАК Кассир,
	                      |	НазначениеКассировПоОрганизациямСрезПоследних.Порядок КАК Порядок,
	                      |	НазначениеКассировПоОрганизациямСрезПоследних.График КАК График,
	                      |	ЕСТЬNULL(НазначениеКассировПоОрганизациямСрезПоследних.УчитываетсяПриНазначении, ЛОЖЬ) КАК УчитываетсяПриНазначении
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрСведений.НазначениеКассировПоОрганизациям.СрезПоследних(
	                      |			,
	                      |			Организация = &Организация
	                      |				И Терминал = &Терминал) КАК НазначениеКассировПоОрганизациямСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Кассир КАК Кассир,
	                      |	ВТ.Порядок КАК Порядок,
	                      |	ВТ.График КАК График,
	                      |	ВТ.УчитываетсяПриНазначении КАК УчитываетсяПриНазначении
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |ГДЕ
	                      |	ВТ.УчитываетсяПриНазначении = ИСТИНА");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Терминал", ККМ.Терминал);
	ТЗ_Кассиры = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТЗ_Кассиры.Количество() Тогда	
		#Если Клиент Тогда
		Сообщить("Нет кассиров для организации " + Организация);	
		#КонецЕсли
	КонецЕсли;
	
	
	// получим последние 10 дней
	ЗапросСмены = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 10
	                           |	СостояниеСменККМ.Период КАК Период,
	                           |	СостояниеСменККМ.Регистратор КАК Регистратор,
	                           |	СостояниеСменККМ.НомерСтроки КАК НомерСтроки,
	                           |	СостояниеСменККМ.ККМ КАК ККМ,
	                           |	СостояниеСменККМ.СостояниеСмены КАК СостояниеСмены,
	                           |	СостояниеСменККМ.Кассир КАК Кассир,
	                           |	СостояниеСменККМ.График КАК График
	                           |ИЗ
	                           |	РегистрСведений.СостояниеСменККМ КАК СостояниеСменККМ
	                           |ГДЕ
	                           |	СостояниеСменККМ.ККМ = &ККМ
	                           |	И СостояниеСменККМ.СостояниеСмены = ЗНАЧЕНИЕ(Перечисление.СостояниеСменККМ.СменаОткрыта)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	СостояниеСменККМ.Период УБЫВ");
	ЗапросСмены.УстановитьПараметр("ККМ", ККМ);
	ТЗ_КрайниеСмены = ЗапросСмены.Выполнить().Выгрузить();
	
	Если ТЗ_КрайниеСмены.Количество() Тогда
		
		КрайнийКассир = ТЗ_КрайниеСмены[0].Кассир;	
		НайКассир = ТЗ_Кассиры.НайтиСтроки(Новый Структура("Кассир", КрайнийКассир));
		
		Если НЕ НайКассир.Количество() Тогда		
			Попытка
			СледующийКассир = ТЗ_Кассиры[0].Кассир;	
			Возврат СледующийКассир;				
		Исключение
			Возврат КрайнийКассир;
			КонецПопытки;
		КонецЕсли;
		
		ПорядокКассира = НайКассир[0].Порядок;
		ГрафикКассира = НайКассир[0].График;
		РабочиеДниКассира = ГрафикКассира.КоличествоРабочихДней;
		СледующийКассир = Неопределено;	
		Ном = 0;  КоличествоСмен = 0;
		ВсегоЗаписей = ТЗ_КрайниеСмены.Количество();
		
		Пока ВсегоЗаписей >= Ном + 1 И ТЗ_КрайниеСмены[Ном].Кассир = КрайнийКассир Цикл	
			КоличествоСмен = КоличествоСмен + 1;		
			Ном = Ном + 1;	
		КонецЦикла;
		
		
		Если РабочиеДниКассира - КоличествоСмен = 0 Тогда		
			// вычислим следующего кассира			
			Н = 0;
			Для каждого Стр Из ТЗ_Кассиры Цикл		
				Если Стр.Кассир = КрайнийКассир Тогда
				    Если Н + 2 <= ТЗ_Кассиры.Количество() Тогда				
						СледующийКассир = ТЗ_Кассиры[Н + 1].Кассир;		
						Возврат СледующийКассир;
					Иначе		
						СледующийКассир = ТЗ_Кассиры[0].Кассир;	
						Возврат СледующийКассир;
					КонецЕсли;						
				КонецЕсли;		
			    Н = Н + 1;	
			КонецЦикла;				
		Иначе		
			
			Возврат КрайнийКассир;	
			
		КонецЕсли;	
	
	Иначе
		Если ТЗ_Кассиры.Количество() Тогда		
			
			ТЗ_Кассиры.Сортировать("Кассир ВОЗР");	
			Возврат ТЗ_Кассиры[0].Кассир;	
	
		КонецЕсли;
	КонецЕсли;
	

КонецФункции // ВычислитьКассира()



