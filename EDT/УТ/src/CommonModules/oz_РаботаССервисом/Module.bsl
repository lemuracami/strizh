
#Область СервисныеФункцииOZON

//Возвращает Логин Пароль и ContractID ОЗОН
Функция СтруктураДанныхДоступаОЗОН() Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Логин 			= "SapiUserTestStrizhLogistic";
		Пароль 			= "SapiUserTestStrizhLogistic";
		//ContractID 		= "15045326344000";	
		ContractID 		= "15308416936000"; // 2019.01.16 новый тестовый пользователь
	Иначе
		КлючДоступа = Константы.oz_КлючДоступа.Получить();
		//Логин = "SapiUserStrizh";
		//Пароль = "ebie6fi4";
		//ContractID = Константы.oz_КлючДоступа.Получить().Код;
		
		Логин = КлючДоступа.Логин;
		Пароль = КлючДоступа.Пароль;
		ContractID = КлючДоступа.Код;
	КонецЕсли;
	
	СтруктураДоступа = Новый Структура; 
	СтруктураДоступа.Вставить("Логин",Логин);
	СтруктураДоступа.Вставить("Пароль",Пароль);
	СтруктураДоступа.Вставить("ContractID",ContractID);
	
	Возврат СтруктураДоступа;
	
КонецФункции	

// 1. Получение списка перевозок CarriageListGet
// Фильтр(значения):
// Created 				- Перевозка создана
// DecisionRequired		- Требуется принять решение по перевозке
// Finish				- Перевозка завершена
// Received				- Перевозка получена
// ReceivedBroken		- Перевозка получена с нарушением пломбы
// Send					- Перевозка отправлена
// All					- Все перевозки (без фильтра) = без указания значения данного параметра = null
//
// Возвращает Массив либо Неопределено
//
// Якурнов 04.10.2018 9:25:37
Функция CarriageListGet(ДатаНачала, ДатаОкончания, Фильтр = "all") Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONCarriageService_test.СоздатьWSПрокси("ozon/api/subagent","CarriageService","BasicHttpBinding_ICarriageService");
	Иначе
		Прокси =  WSСсылки.OZONCarriageService_work.СоздатьWSПрокси("ozon/api/subagent","CarriageService","BasicHttpBinding_ICarriageService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	ДатаНачала 		= Формат(ДатаНачала, "ДЛФ=Д");
	ДатаОкончания	= Формат(ДатаОкончания, "ДЛФ=Д");
	КоличествоЭлементовНаСтраницу = 100;
	
	Фабрика = Прокси.ФабрикаXDTO;    
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestCarriageListGet");
	request = Фабрика.Создать(Тип_request);
	
	request.Login 		= Логин;
	request.Password 	= Пароль;
	request.ContractID 	= ContractID;
	request.StartDate 	= ДатаНачала; 
	request.StopDate 	= ДатаОкончания;
	request.State 		= Фильтр;
	
	Результат = Прокси.CarriageListGet(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть(); 
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.CarriageListGet, , , ДанныеXML,"Получено строк: "+Строка(Результат.Rows));
	
	Если Результат.Rows > 0 Тогда
		МассивInfoList = Новый Массив;
		Для Каждого Элем из Результат.CarriageInfoList.CarriageInfo Цикл
			СтруктураCarriageInfo = Новый Структура;
			СтруктураCarriageInfo.Вставить("НомерВходящегоДокумента",Формат(Элем.ID,"ЧГ="));
			СтруктураCarriageInfo.Вставить("Наименование",Элем.Name);
			СтруктураCarriageInfo.Вставить("ШтрихкодПеревозки",Элем.Barcode);
			СтруктураCarriageInfo.Вставить("StateID",Формат(Элем.StateID,"ЧГ="));
			
			Статус = Элем.StateSysName;
			
			Если Статус = "Created" Тогда
				СтатусПеревод = "Перевозка создана";
			ИначеЕсли Статус = "DecisionRequired" Тогда
				СтатусПеревод = "Требуется принять решение по перевозке";
			ИначеЕсли Статус = "Finish" Тогда
				СтатусПеревод = "Перевозка завершена";
			ИначеЕсли Статус = "Received" Тогда
				СтатусПеревод = "Перевозка получена";
			ИначеЕсли Статус = "ReceivedBroken" Тогда
				СтатусПеревод = "Перевозка получена с нарушением пломбы";
			ИначеЕсли Статус = "Send" Тогда
				СтатусПеревод = "Перевозка отправлена";
			Иначе	
				СтатусПеревод  = "";
			КонецЕсли;
			
			СтруктураCarriageInfo.Вставить("Статус",СтатусПеревод);
			СтруктураCarriageInfo.Вставить("StateName",Элем.StateName);
			СтруктураCarriageInfo.Вставить("StateSysName",Элем.StateSysName);
			СтруктураCarriageInfo.Вставить("Description",Элем.Description);
			СтруктураCarriageInfo.Вставить("RouteName",Элем.RouteName);
			СтруктураCarriageInfo.Вставить("ДатаВходящегоДокумента",Дата(Элем.Moment));
			МассивInfoList.Добавить(СтруктураCarriageInfo);
		КонецЦикла;
	Иначе
		МассивInfoList = Неопределено;
	КонецЕсли;
	
	Возврат МассивInfoList;
	
	
КонецФункции // ()

// 2. Получение информции об одной перевозке CarriageContentGet и создание ПриходЗаказовНаСклад с типом WEBСервисOZON
// Возвращает Массив либо Неопределено
//Вход:
//Массив Со Структурой
//CarriageID      (Long)
//CarriageBarcode (String)
//Выход:
//Массив Со Структурой PostingInfo
// Якурнов 04.10.2018 9:25:37
Функция CarriageContentGet(СтруктураДокументаПеревозки) Экспорт
	
	МагазинОЗОН = ПараметрыСеанса.oz_МагазинOZON;
	
	Если МагазинОЗОН.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONCarriageService_test.СоздатьWSПрокси("ozon/api/subagent","CarriageService","BasicHttpBinding_ICarriageService");
	Иначе
		Прокси =  WSСсылки.OZONCarriageService_work.СоздатьWSПрокси("ozon/api/subagent","CarriageService","BasicHttpBinding_ICarriageService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Если СтруктураДокументаПеревозки.ШтрихкодПеревозки = "" И СтруктураДокументаПеревозки.НомерВходящегоДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestCarriageContentGet");
	request = Фабрика.Создать(Тип_request);
	
	request.Login 		= Логин;
	request.Password 	= Пароль;
	request.ContractID 	= ContractID;
	request.CarriageBarcode = СтруктураДокументаПеревозки.ШтрихкодПеревозки;
	Если СтруктураДокументаПеревозки.НомерВходящегоДокумента <> Неопределено Тогда
		request.CarriageID 	= СтруктураДокументаПеревозки.НомерВходящегоДокумента;
	КонецЕсли;
	
	Результат = Прокси.CarriageContentGet(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть(); 
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.CarriageContentGet, , , ДанныеXML,"Получено строк: "+Строка(Результат.Rows));
	
	Если Результат.Rows > 0 Тогда
		МассивPostingInfo = Результат.PostingInfoList.PostingInfo;
	Иначе
		МассивPostingInfo = Неопределено;
	КонецЕсли;
	
	Возврат МассивPostingInfo;
	
КонецФункции // ()

// Получение информции об экземплярах товаров посылки по штрихкоду
//
// Возвращает Массив либо Неопределено
//
// Якурнов 04.10.2018 9:25:37
Функция ArticleInfoGet(ШтрихкодПосылки) Экспорт
	
	МагазинОЗОН = ПараметрыСеанса.oz_МагазинOZON;
	
	Если МагазинОЗОН.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestArticleInfoGet");
	request = Фабрика.Создать(Тип_request);
	
	request.Login 		= Логин;
	request.Password 	= Пароль;
	request.ContractID 	= ContractID;
	request.ArticleBarcode = ШтрихкодПосылки;
	
	Результат = Прокси.ArticleInfoGet(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть(); 
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.ArticleInfoGet, , , ДанныеXML);
	
	Если Результат.ResultCode = 0 Тогда
		МассивArticleInfo = Результат.ArticleInfo;
	Иначе
		МассивArticleInfo = Неопределено;
	КонецЕсли;
	
	Возврат МассивArticleInfo;
	
КонецФункции // ()

// 3. Отправка данных о Приеме Забора CarriageReceive
Функция CarriageReceive(Штрихкод, Поврежден, Комментарий = "", Источник) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONCarriageService_test.СоздатьWSПрокси("ozon/api/subagent","CarriageService","BasicHttpBinding_ICarriageService");
	Иначе
		Прокси =  WSСсылки.OZONCarriageService_work.СоздатьWSПрокси("ozon/api/subagent","CarriageService","BasicHttpBinding_ICarriageService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestCarriageReceive");
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	request.CarriageBarcode = Штрихкод; 
	request.IsBroken = Поврежден;
	request.Comment = Комментарий;
	
	Результат = Прокси.CarriageReceive(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть(); 
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.CarriageReceive, , Источник, ДанныеXML);
	
	Возврат РезультатСтруктура;
	
	
КонецФункции // ()

// 4. Отправка данных о Приеме Забора по Заказу PostingReceive
Функция PostingReceive(ШтрихкодПеревозки, ШтрихкодОтправления, Поврежден, Заказ, Источник = Неопределено) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPostingReceive");
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	request.CarriageBarcode = ШтрихкодПеревозки; 
	request.PostingBarcode = ШтрихкодОтправления;
	request.IsDamaged = Поврежден;
	
	Результат = Прокси.PostingReceive(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PostingReceive, Заказ, Источник, ДанныеXML);
	
	Возврат РезультатСтруктура;
	
КонецФункции // ()

// 4.1 Отправка данных о Приеме Забора по Заказу PostingReceive, облегченный
Функция PostingReceiveAdds(ШтрихкодПеревозки = Неопределено, ШтрихкодОтправления, Поврежден = Неопределено, Заказ, Источник = Неопределено) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPostingReceive");
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	
	Если Не ШтрихкодПеревозки = Неопределено тогда
		request.CarriageBarcode = ШтрихкодПеревозки;
	КонецЕсли;
	
	request.PostingBarcode = ШтрихкодОтправления;
	
	Если Не Поврежден = Неопределено Тогда
		request.IsDamaged = Поврежден;
	КонецЕсли;
	
	Результат = Прокси.PostingReceive(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PostingReceive, Заказ, Источник, ДанныеXML);
	
	Возврат РезультатСтруктура;
	
КонецФункции // ()

// 5. Отправка данных о Сформированном Рейсе по Заказу PostingGiveoutToCourier
Функция PostingGiveoutToCourier(Штрихкод, Заказ) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPostingGiveoutToCourier");
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	request.PostingBarcode = Штрихкод;
	
	Результат = Прокси.PostingGiveoutToCourier(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PostingGiveoutToCourier, Заказ, , ДанныеXML);
	
	Возврат РезультатСтруктура;
	
КонецФункции 

// 6. 
Функция PostingReturn(Штрихкод,ReturnReasonID, Заказ, Источник = Неопределено) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPostingReturn");
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	request.PostingBarcode = Штрихкод;
	request.ReturnReasonID = ReturnReasonID;
	
	Результат = Прокси.PostingReturn(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PostingReturn, Заказ, Источник, ДанныеXML);
	
	Возврат РезультатСтруктура;
	
КонецФункции // PostingReturn()

//IsCash - тип оплаты (Булево - наличные, остальные безнал)
///В ТаблицаОтказныхПозиций две колонки "Barcode" - штрихкод позиции (номенклатуры) и "ReturnReasonID" - код причины возврата
Функция PostingGiveout(Штрихкод, IsCash, ТаблицаОтказныхПозиций, Заказ, Источник = Неопределено) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPostingGiveout");
	Тип_ArrayOfExemplarReturnedInfo = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("ArrayOfExemplarReturnedInfo");
	Тип_ExemplarReturnedInfo = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("ExemplarReturnedInfo");
	
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	request.PostingBarcode = Штрихкод;
	request.IsCash = IsCash;
	
	
	Если ТаблицаОтказныхПозиций<>Неопределено Тогда 
		ArrayOfExemplarReturnedInfo = Фабрика.Создать(Тип_ArrayOfExemplarReturnedInfo);
		Для каждого Стр Из ТаблицаОтказныхПозиций Цикл
			ExemplarReturnedInfo = Фабрика.Создать(Тип_ExemplarReturnedInfo);
			ExemplarReturnedInfo.Barcode = Стр.Barcode;
			Если ЗначениеЗаполнено(Стр.ReturnReasonID) Тогда		
				ExemplarReturnedInfo.ReturnReasonID = Стр.ReturnReasonID.ID;		
			КонецЕсли;	
			ArrayOfExemplarReturnedInfo.ExemplarReturnedInfo.Добавить(ExemplarReturnedInfo);
		КонецЦикла;
		request.ExemplarReturnedInfoList = ArrayOfExemplarReturnedInfo;
	КонецЕсли;
	
	
	Результат = Прокси.PostingGiveout(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PostingGiveout, Заказ, Источник, ДанныеXML);
	
	Возврат РезультатСтруктура;
	
КонецФункции // PostingGiveout()

Функция PostingDeliveryDateChange(Штрихкод, ДатаС, ДатаПо, Заказ, Источник = Неопределено) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPostingDeliveryDateChange");
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	request.PostingBarcode = Штрихкод;
	request.DateFrom = Формат(ДатаС,"ДФ='dd.MM.yyyy HH:mm'");
	request.DateTo = Формат(ДатаПо,"ДФ='dd.MM.yyyy HH:mm'");
	
	Результат = Прокси.PostingDeliveryDateChange(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PostingDeliveryDateChange, Заказ, Источник, ДанныеXML);
	
	Возврат РезультатСтруктура;
	
КонецФункции // PostingDeliveryDateChange()

//Получение списка ReturnReasonID
Функция ReturnReasonListGet() Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONInformationService_test.СоздатьWSПрокси("ozon/api/subagent","InformationService","BasicHttpBinding_IInformationService");
	Иначе
		Прокси =  WSСсылки.OZONInformationService_work.СоздатьWSПрокси("ozon/api/subagent","InformationService","BasicHttpBinding_IInformationService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestReturnReasonListGet");
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	
	Результат = Прокси.ReturnReasonListGet(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	// вывод в строку XML	
	Запись_request = Новый ЗаписьXML;
	Запись_request.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись_request, Результат);
	ДанныеXML_request = Запись_request.Закрыть();
	
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	РезультатСтруктура.Вставить("ТаблицаПричин", Результат.ReturnReasonInfoList.ReturnReasonInfo);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.ReturnReasonListGet, , , ДанныеXML, ДанныеXML_request);
	
	Возврат РезультатСтруктура;
	
КонецФункции // ReturnReasonListGet()

//Используется в ВозвратТоваровПоставщику
Функция ArticleReturnedSend(ТаблицаВозвратов, Заказ, Источник) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestArticleReturnedSend");
	//Тип_ArticlePairInfoList = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("ArticlePairInfoList");
	Тип_ArrayOfPairInfo = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("ArrayOfPairInfo");
	Тип_PairInfo = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("PairInfo");
	
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	
	Если ТаблицаВозвратов <> Неопределено Тогда 
		ArticlePairInfoList = Фабрика.Создать(Тип_ArrayOfPairInfo);
		Для каждого Стр Из ТаблицаВозвратов Цикл
			PairInfo = Фабрика.Создать(Тип_PairInfo);
			PairInfo.ID = Стр.ID;
			PairInfo.Name = Стр.Name;
			
			ArticlePairInfoList.ArticlePairInfo.Добавить(PairInfo);
		КонецЦикла;
		request.ArticlePairInfoList = ArticlePairInfoList;
	КонецЕсли;
	
	
	Результат = Прокси.ArticleReturnedSend(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	РезультатСтруктура.Вставить("CarriageID", Результат.CarriageID);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.ArticleReturnedSend, Заказ, Источник, ДанныеXML);
	
	Возврат РезультатСтруктура;
	
	
КонецФункции // ()

//Метод создание коробки на возврат 
Функция ReturnBoxCreate(МассивIdЭкземпляров, ИдентификаторСклада, Описание = "") Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestReturnBoxCreate");
	Тип_ArrayOfLong1 = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("ArrayOfLong1");
	
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ContractID = ContractID;
	request.DestinationPlaceID = ИдентификаторСклада;
	request.Description = Описание;
	
	Если МассивIdЭкземпляров <> Неопределено Тогда 
		ReturnExemplarList = Фабрика.Создать(Тип_ArrayOfLong1);
		Для каждого Стр Из МассивIdЭкземпляров Цикл
			ReturnExemplarList.long.Добавить(Стр);
		КонецЦикла;
		request.ReturnExemplarList = ReturnExemplarList;
	КонецЕсли;
	
	
	Результат = Прокси.ReturnBoxCreate(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	РезультатСтруктура.Вставить("ИдентификаторКоробки", Результат.ArticleBoxID);
	РезультатСтруктура.Вставить("НаименованиеКоробки", Результат.ArticleBoxName);
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.ReturnBoxCreate,,, ДанныеXML);
	
	Возврат РезультатСтруктура;
	
КонецФункции // ()

// Возвращает печатные формы
// НомерЗаказа - ВнешнийНомер, Тип - тип файла (1 - PDF, 2 - Excel), ТипБланка - наименование типа печатной формы
Функция ReportGet(Заказ, Тип = 1, ТипБланка = "SAPostingReceipt", СохранятьДокумент = Ложь, НомерЗаказа = "") Экспорт
	
	Если НомерЗаказа <> "" Тогда
		
		НомерЗаказа = СокрЛП(НомерЗаказа);	
		
	Иначе
		
		Зап = Новый Запрос("ВЫБРАТЬ
		|	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ДополнительныйНомерЗаказа, """") КАК id
		|ИЗ
		|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		|ГДЕ
		|	ДополнительныеПараметрыЗаказа.Заказ = &Заказ");
		Зап.УстановитьПараметр("Заказ", Заказ);	
		Рез = Зап.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда		
			НомерЗаказа = Рез.id;			
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONReportService_test.СоздатьWSПрокси("ozon/api/subagent","ReportService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONReportService_work.СоздатьWSПрокси("ozon/api/subagent","ReportService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;                                      
	
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestReportGet");
	request = Фабрика.Создать(Тип_request);
	
	request.Login = Логин;
	request.Password = Пароль;
	request.ID = НомерЗаказа;
	//request.ReportType = "SAPostingReceipt";	
	request.ReportType = ТипБланка;
	Если Тип = 1 Тогда
		ФорматФайла = "PDF";	
	Иначе
		ФорматФайла = "EXCEL";
	КонецЕсли;	
	request.ReportFormat = ФорматФайла; 	
	
	Результат = Прокси.ReportGet(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	РезультатСтруктура.Вставить("ReportData", Результат.ReportData);
	
	
	// сохранение документа
	Если СохранятьДокумент Тогда			
		Если ТипБланка = "SAPostingReceipt" Тогда		
			ТипБланкаСсылка = Перечисления.ozone_ТипыБланковЗаказов.Квитанция;	
		ИначеЕсли ТипБланка = "SAPostingCashMemo" Тогда
			ТипБланкаСсылка = Перечисления.ozone_ТипыБланковЗаказов.ТоварныйЧек;
		КонецЕсли;
		
		Набор = РегистрыСведений.ozone_БланкиЗаказов.СоздатьНаборЗаписей();
		Набор.Отбор.Заказ.Установить(Заказ);
		Набор.Прочитать();
		
		НЗапись = Набор.Добавить();
		НЗапись.Период = ТекущаяДата();
		НЗапись.Заказ = Заказ;
		НЗапись.ТипБланка = ТипБланкаСсылка;
		НЗапись.Бланк = Новый ХранилищеЗначения(РезультатСтруктура.ReportData, Новый СжатиеДанных(9));		
		Набор.Записать();	
	КонецЕсли;	
	
	
	// логирование
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.ReportGet, Заказ, , ДанныеXML);
	
	Возврат РезультатСтруктура;
	
	
КонецФункции // ()

// Получение списка целевых мест PlaceInfoListGet
//
// Возвращает Массив со Структурой(ИдентификаторНаправления,НаименованиеСклада,АдресСклада) либо Неопределено
//
// Якурнов 25.10.2018 10:35:02  
Функция PlaceInfoListGet() Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONInformationService_test.СоздатьWSПрокси("ozon/api/subagent","InformationService","BasicHttpBinding_IInformationService");
	Иначе
		Прокси =  WSСсылки.OZONInformationService_work.СоздатьWSПрокси("ozon/api/subagent","InformationService","BasicHttpBinding_IInformationService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPlaceInformationListGet");
	request = Фабрика.Создать(Тип_request);
	
	request.Login 		= Логин;
	request.Password 	= Пароль;
	request.ContractID 	= ContractID;
	request.PageSize 	= 500;
	request.PageNumber 	= 1;
	
	Результат = Прокси.PlaceInformationListGet(request);
	
	// вывод в строку XML	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Фабрика.ЗаписатьXML(Запись, request);
	ДанныеXML = Запись.Закрыть(); 
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	
	ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PlaceInfoListGet, , , ДанныеXML,"Получено строк: "+Строка(Результат.Rows));
	
	Если Результат.Rows > 0 Тогда
		МассивPlaceInfoList = Новый Массив;
		Для Каждого Элем из Результат.PlaceInfoList.PlaceInfo Цикл
			СтруктураPlaceInfo = Новый Структура;
			СтруктураPlaceInfo.Вставить("ИдентификаторНаправления",Формат(Элем.ID,"ЧГ="));
			СтруктураPlaceInfo.Вставить("НаименованиеСклада",Элем.Name);
			СтруктураPlaceInfo.Вставить("АдресСклада",Элем.Address);
			
			МассивPlaceInfoList.Добавить(СтруктураPlaceInfo);
		КонецЦикла;
	Иначе
		МассивPlaceInfoList = Неопределено;
	КонецЕсли;
	
	Возврат МассивPlaceInfoList;
	
	
КонецФункции // ()

#КонецОбласти

#Область ВспомогательныеФункции


// 2.1 Вспомогательная для CarriageContentGet ПриходЗаказовНаСклад
Процедура ЗаполнитьOZONЗаказы(ТабличнаяЧасть, ТабличнаяЧасть2 ,ВходныеДанные, Док = Неопределено)
	//Заполняем таб часть
	ТаблицаОзон = Новый ТаблицаЗначений;
	ТипСтрока = Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	ТаблицаОзон.Колонки.Добавить("ВнешнийНомерЗаказа",ТипСтрока);
	ТаблицаОзон.Колонки.Добавить("ШтрихкодOZON",ТипСтрока);
	
	Для Каждого Элем Из ВходныеДанные Цикл
		НовСтр = ТаблицаОзон.Добавить();
		НовСтр.ВнешнийНомерЗаказа = Строка(Формат(Элем.PostingName,"ЧГ=")); 
		НовСтр.ШтрихкодOZON = Элем.PostingBarcode; 
	КонецЦикла;
	
	Реализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОзон.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	|	ТаблицаОзон.ШтрихкодOZON КАК ШтрихкодOZON
	|ПОМЕСТИТЬ ВТ_Озон
	|ИЗ
	|	&ТаблицаОзон КАК ТаблицаОзон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.Заказ.Ссылка КАК Заказ,
	|	ВТ_Озон.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	|	ВТ_Озон.ШтрихкодOZON КАК ШтрихкодOZON
	|ИЗ
	|	ВТ_Озон КАК ВТ_Озон
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_Озон.ШтрихкодOZON = ДополнительныеПараметрыЗаказа.ШтрихкодOZON";
	
	Запрос.УстановитьПараметр("ТаблицаОзон", ТаблицаОзон);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ФлСкл = 1;
	Пока Выборка.Следующий() Цикл
		//Добавляем склад магазина
		Реализация = Выборка.Заказ;
		Если ФлСкл = 1 И Док <> Неопределено И ЗначениеЗаполнено(Реализация) Тогда
			Док.СкладМагазина = lem.ПолучитьСкладМагазинаПоЗаказу(Реализация);
			ФлСкл = 0;
		КонецЕсли;
		
		НовСтр = ТабличнаяЧасть.Добавить();
		НовСтр.ВнешнийНомерЗаказа = Выборка.ВнешнийНомерЗаказа;
		НовСтр.Заказ = Реализация;
		НовСтр.КоличествоМест = 1;
		
		
		НовСтр = ТабличнаяЧасть2.Добавить();
		НовСтр.ВнешнийНомерЗаказа = Выборка.ВнешнийНомерЗаказа;
		НовСтр.Заказ = Реализация;
		НовСтр.ИдентификаторМеста = 1;
		НовСтр.Штрихкод = Выборка.ШтрихкодOZON;
	КонецЦикла;
	
	
	
КонецПроцедуры

//Проверяем на наличие заказа в системе
Функция ПроверкаНаOrderID(МассивПосылок) Экспорт
	//Заполняем таб часть
	ТаблицаОзон = Новый ТаблицаЗначений;
	ТипСтрока = Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	ТаблицаОзон.Колонки.Добавить("ВнешнийНомерЗаказа",ТипСтрока);
	ТаблицаОзон.Колонки.Добавить("ШтрихкодOZON",ТипСтрока);
	ТаблицаОзон.Колонки.Добавить("КодСклада",ТипСтрока);
	
	Для Каждого Элем Из МассивПосылок Цикл
		НовСтр = ТаблицаОзон.Добавить();
		НовСтр.ВнешнийНомерЗаказа = Строка(Формат(Элем.PostingID,"ЧГ=")); 
		НовСтр.ШтрихкодOZON = Элем.PostingBarcode; 
		НовСтр.КодСклада = Формат(Элем.SourcePlaceID, "ЧГ=");
	КонецЦикла;
	
	Реализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОзон.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	|	ТаблицаОзон.ШтрихкодOZON КАК ШтрихкодOZON,
	|	ТаблицаОзон.КодСклада КАК КодСклада
	|ПОМЕСТИТЬ ВТ_Озон
	|ИЗ
	|	&ТаблицаОзон КАК ТаблицаОзон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.Заказ.Номер КАК OrderID,
	|	ВТ_Озон.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
	|	ВТ_Озон.ШтрихкодOZON КАК ШтрихкодOZON,
	|	ДополнительныеПараметрыЗаказа.Заказ.Ссылка КАК Заказ,
	|	ВТ_Озон.КодСклада КАК КодСклада
	|ИЗ
	|	ВТ_Озон КАК ВТ_Озон
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО ВТ_Озон.ШтрихкодOZON = ДополнительныеПараметрыЗаказа.ШтрихкодOZON";
	
	Запрос.УстановитьПараметр("ТаблицаОзон", ТаблицаОзон);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ВнешнийНомерЗаказа");
	ТаблицаЗначений.Колонки.Добавить("OrderID");
	ТаблицаЗначений.Колонки.Добавить("ШтрихкодOZON");
	ТаблицаЗначений.Колонки.Добавить("Заказ");
	ТаблицаЗначений.Колонки.Добавить("КодСклада");
	
	Пока Выборка.Следующий() Цикл
		НовСтр = ТаблицаЗначений.Добавить();
		НовСтр.ВнешнийНомерЗаказа = Выборка.ВнешнийНомерЗаказа;
		НовСтр.OrderID 	  = СокрЛП(Выборка.OrderID);
		НовСтр.ШтрихкодOZON 	  = Выборка.ШтрихкодOZON;
		НовСтр.Заказ 	  = Выборка.Заказ;
		НовСтр.КодСклада 	  = Выборка.КодСклада;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
КонецФункции

Процедура СоздатьПриходЗаказовНаСклад(МассивПосылок,СтруктураДокументаПеревозки)
	
	МагазинОЗОН = ПараметрыСеанса.oz_МагазинOZON;
	
	Если МассивПосылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Формируем документ ПриходЗаказовНаСклад
	//Проверим на наличие ранее созданных документов по внешнему номеру
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ПриходЗаказовНаСклад.Ссылка КАК Док
	|ИЗ
	|	Документ.ПриходЗаказовНаСклад КАК ПриходЗаказовНаСклад
	|ГДЕ
	|	ПриходЗаказовНаСклад.НомерВходящегоДокумента = &НомерВходящегоДокумента
	|	И ПриходЗаказовНаСклад.Контрагент = &Контрагент";
	Зап.УстановитьПараметр("НомерВходящегоДокумента", СтруктураДокументаПеревозки.НомерВходящегоДокумента);
	Зап.УстановитьПараметр("Контрагент", МагазинОЗОН.Ссылка);
	
	ДокументПриходзаказовНаСкладСсылка = Документы.ПриходЗаказовНаСклад.ПустаяСсылка();
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда	
		ДокументПриходзаказовНаСкладСсылка = Выб.Док;
	КонецеСли;	
	//ДокументПриходзаказовНаСкладСсылка = Документы.ПриходЗаказовНаСклад.НайтиПоРеквизиту("НомерВходящегоДокумента", СтруктураДокументаПеревозки.НомерВходящегоДокумента); 
	Если НЕ ДокументПриходзаказовНаСкладСсылка.Пустая() Тогда
		//Получаем объект
		ДатаДоставкиЗаказа = ТекущаяДата();
		ДокументПриходзаказовНаСкладОбъект = ДокументПриходзаказовНаСкладСсылка.ПолучитьОбъект();
		
		Если ДокументПриходзаказовНаСкладОбъект.Заказы.Количество() <> 0 Тогда
			ДатаДоставкиЗаказа = ДокументПриходзаказовНаСкладОбъект.Заказы[0].Заказ.Дата;
		КонецеСли;	
		
		
		//Очищаем табличные части для ввода новых данных
		ДокументПриходзаказовНаСкладОбъект.Заказы.Очистить();
		ДокументПриходзаказовНаСкладОбъект.Товары.Очистить();
		
		//Заполнение табличной части Заказы
		ЗаполнитьOZONЗаказы(ДокументПриходзаказовНаСкладОбъект.Заказы, ДокументПриходзаказовНаСкладОбъект.ШтрихкодыПоМестам, МассивПосылок, ДокументПриходзаказовНаСкладОбъект);
		
	Иначе
		//Создаем новый ДокументОбъект
		ДокументПриходзаказовНаСкладОбъект = Документы.ПриходЗаказовНаСклад.СоздатьДокумент();
		
		ДатаДоставкиЗаказа = ТекущаяДата();
		
		//Заполнение табличной части Заказы
		ЗаполнитьOZONЗаказы(ДокументПриходзаказовНаСкладОбъект.Заказы, ДокументПриходзаказовНаСкладОбъект.ШтрихкодыПоМестам, МассивПосылок, ДокументПриходзаказовНаСкладОбъект);
	КонецЕсли;
	
	//Асеев 07.09.2020 (Задача № 4197)>>>
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", МагазинОЗОН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП, ЛОЖЬ) КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Поле1) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
	|		ПО (ИСТИНА)";
	ВыборкаПараметрыКонтрагента = Запрос.Выполнить().Выбрать();
	ВыборкаПараметрыКонтрагента.Следующий();
	//Асеев 07.09.2020 (Задача № 4197)<<<
	
	//Записываем документ
	Попытка
		//Заполняем шапку
		ДокументПриходзаказовНаСкладОбъект.Основание = Перечисления.ТипыЗагрузкиДанных.WEBСервисOZON;
		ДокументПриходзаказовНаСкладОбъект.Контрагент = МагазинОЗОН;
		ДокументПриходзаказовНаСкладОбъект.НомерВходящегоДокумента = СтруктураДокументаПеревозки.НомерВходящегоДокумента;
		ДокументПриходзаказовНаСкладОбъект.ДатаВходящегоДокумента = СтруктураДокументаПеревозки.ДатаВходящегоДокумента;
		ДокументПриходзаказовНаСкладОбъект.Дата = ТекущаяДата();
		
		//Асеев 07.09.2020 (Задача № 4197)>>>
		ДокументПриходзаказовНаСкладОбъект.ОбновлятьКоличествоМестЗаказов = ВыборкаПараметрыКонтрагента.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
		//Асеев 07.09.2020 (Задача № 4197)<<<
		
		//Запись
		ДокументПриходзаказовНаСкладОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		
		СтруктураДокументаПеревозки.Вставить("КодСклада", ДокументПриходзаказовНаСкладОбъект.СкладМагазина.Код);
		СтруктураДокументаПеревозки.Вставить("НомерТелефонаСклада", ДокументПриходзаказовНаСкладОбъект.СкладМагазина.ТелефонныйНомерПриЗабореТовара);
		СтруктураДокументаПеревозки.Вставить("АдресСклада", ДокументПриходзаказовНаСкладОбъект.СкладМагазина.Адрес);
		
		
		Набор = РегистрыСведений.ДополнительныеПараметрыПриходЗаказовНаСклад.СоздатьНаборЗаписей();
		Набор.Отбор.ПриходЗаказовНаСклад.Установить(ДокументПриходзаказовНаСкладОбъект.Ссылка);
		Набор.Прочитать();
		
		СоздаватьЗаявкуНаЗаборВАдминке = Ложь;
		
		//Если Набор.Количество() = 0 Тогда
		//	СоздаватьЗаявкуНаЗаборВАдминке = Истина;
		//Иначе
		//	Если Не ЗначениеЗаполнено(Набор[0].oz_НомерЗабораСДСтриж) Тогда
		//		СоздаватьЗаявкуНаЗаборВАдминке = Истина;
		//	КонецеСли;	
		//КонецеСли;	
		
		Номерзабора = 0;
		Если СоздаватьЗаявкуНаЗаборВАдминке Тогда
			СтруктураДляРегистрацииЗабораВAPISync = ИнтеграцияССервисомSync.ПолучитьСтруктуруЗабораSync(СтруктураДокументаПеревозки);
			
			СтруктураАвторизацииSync = ИнтеграцияССервисомSync.СтруктураДоступаSync(ПараметрыСеанса.oz_МагазинOZON);
			НомерЗабора = ИнтеграцияССервисомSync.RegisterOrderExtended(СтруктураДляРегистрацииЗабораВAPISync,СтруктураАвторизацииSync, ДокументПриходзаказовНаСкладОбъект.Ссылка);
			
			Если НомерЗабора = Неопределено Тогда
				Номерзабора = -1;
			КонецеСли;
		Иначе
			НомерЗабора = 0;
			//Набор[0].oz_НомерЗабораСДСтриж;
		КонецеСли;
		
		Набор = РегистрыСведений.ДополнительныеПараметрыПриходЗаказовНаСклад.СоздатьНаборЗаписей();
		Набор.Отбор.ПриходЗаказовНаСклад.Установить(ДокументПриходзаказовНаСкладОбъект.Ссылка);
		
		Запись = Набор.Добавить();
		Запись.ПриходЗаказовНаСклад = ДокументПриходзаказовНаСкладОбъект.Ссылка;	 
		Запись.oz_ИдентификаторПеревозки = СтруктураДокументаПеревозки.НомерВходящегоДокумента;
		Запись.oz_ШтрихкодПеревозки = СтруктураДокументаПеревозки.ШтрихкодПеревозки;
		Запись.oz_НомерЗабораСДСтриж = НомерЗабора;
		Набор.Записать();		
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки	
	
КонецПроцедуры


//Из РС.ДопПараметрыЗаказ получаем ШтрихкодOZON 
Функция ПолучитьШтрихкодOZONПоНомеру(НомерЗаказа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.ШтрихкодOZON КАК ШтрихкодOZON
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|ГДЕ
	|	ДополнительныеПараметрыЗаказа.Заказ.Номер = &НомерЗаказа";
	
	Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШтрихкодOZON = Выборка.ШтрихкодOZON;
		Если ШтрихкодOZON = "" Тогда
			Возврат Неопределено;
		Иначе
			Возврат ШтрихкодOZON;
		КонецЕсли;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьДополнительныеПараметрыЗаказов()

Функция Service1CLoadPostingItems(Штрихкод) Экспорт
	//Если Константы.ТестовыйРежимOZONE.Получить() Тогда
	//    Прокси =  WSСсылки.FrontDeliveryTest.СоздатьWSПрокси("strizh-logistic.ru/services","Service1C","BasicHttpBinding_IService1C");
	//Иначе
	Прокси =  WSСсылки.FrontDelivery.СоздатьWSПрокси("http://tempuri.org/","Service1C","BasicHttpBinding_IService1C");
	//КонецЕсли;
	
	//Результат = Прокси.LoadPostingItems     lem
	//Результат = Прокси.LoadPostingItems_test(Штрихкод); //+++++Серегин М.В. 22.03.2016 16:57:09 не знаю нужен ли на боевой этот символ "%303%", но на тесте без него не распознаются   
	
	Результат = Прокси.LoadPostingItems(Штрихкод);  
	
	
	Возврат Результат;	
	
КонецФункции // ()

//Получить ReturnReasonID по нашим причинам возврата
Функция ПолучитьReturnReasonID(ПричинаНевыполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаOZON.ID КАК Код
	|ИЗ
	|   РегистрСведений.ВзаимосвязьПричинВозвратаOZON КАК ВзаимосвязьПричинВозвратаOZON
	|ГДЕ
	|   ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаУТЛ = &ПричинаВозвратаУТЛ";
	
	Запрос.УстановитьПараметр("ПричинаВозвратаУТЛ", ПричинаНевыполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Код;
	Иначе
		Возврат Справочники.oz_ПричиныВозврата.НайтиПоКоду("6").ID;
	КонецЕсли;
	
	
КонецФункции // Получить()

//Старая 5.  
Процедура ОбработатьВыдачуКурьеру_OZON() Экспорт
	
	МагазинОЗОН = ПараметрыСеанса.oz_МагазинOZON;
	
	Если МагазинОЗОН.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.ШтрихкодOZON,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ
	|ИЗ
	|	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|			ПО РеализацияТоваровУслуг.Ссылка = ДополнительныеПараметрыЗаказа.Заказ
	|				И (НЕ ДополнительныеПараметрыЗаказа.ШтрихкодOZON ЕСТЬ NULL )
	|				И (ДополнительныеПараметрыЗаказа.ШтрихкодOZON <> """")
	|		ПО новаЗаданияРейсов.Доставка.Номер = РеализацияТоваровУслуг.Номер
	|		ПОЛНОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаРейсМестнойДоставки КАК новаРейсМестнойДоставки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Задача.новаЗадачаРейсаМестнойДоставки КАК ЗадачаРейса
	|			ПО новаРейсМестнойДоставки.Ссылка = ЗадачаРейса.БизнесПроцесс
	|				И (НЕ ЗадачаРейса.ТочкаМаршрута В (&ТочкаМаршрута))
	|		ПО новаЗаданияРейсов.Рейс = новаРейсМестнойДоставки.Ссылка
	|ГДЕ
	|	новаРейсМестнойДоставки.ПометкаУдаления = ЛОЖЬ
	|	И новаРейсМестнойДоставки.Стартован = ИСТИНА
	|	И новаРейсМестнойДоставки.ДатаНачала МЕЖДУ &Дата1 И &Дата2
	|	И новаРейсМестнойДоставки.РейсОтменен = ЛОЖЬ
	|	И РеализацияТоваровУслуг.ВладелецТовара = &МагазинОзон
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДополнительныеПараметрыЗаказа.ШтрихкодOZON";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	ТочкиМаршрута = Новый СписокЗначений;
	ТочкиМаршрута.Добавить(БизнесПроцессы.новаРейсМестнойДоставки.ТочкиМаршрута.РейсЗавершен);
	ТочкиМаршрута.Добавить(БизнесПроцессы.новаРейсМестнойДоставки.ТочкиМаршрута.РейсОтменен);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкиМаршрута);
	Запрос.УстановитьПараметр("МагазинОзон", МагазинОЗОН);
	
	
	РезультатЗапроса = Запрос.Выполнить();   
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ШтрихкодOZON) Тогда	
			
			Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPostingGiveoutToCourier");
			request = Фабрика.Создать(Тип_request);
			
			request.Login = Логин;
			request.Password = Пароль;
			request.ContractID = ContractID;
			request.PostingBarcode = ВыборкаДетальныеЗаписи.ШтрихкодOZON;
			
			Результат = Прокси.PostingGiveoutToCourier(request);
			
			// вывод в строку XML	
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку(); 
			Фабрика.ЗаписатьXML(Запись, request);
			ДанныеXML = Запись.Закрыть();
			
			РезультатСтруктура = Новый Структура;
			РезультатСтруктура.Вставить("Код", Результат.ResultCode);
			РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
			
			ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PostingGiveoutToCourier, ВыборкаДетальныеЗаписи.Заказ, , ДанныеXML);
			//Возврат РезультатСтруктура;
		КонецЕсли;
		
		
	КонецЦикла;
	
	
КонецПроцедуры

// Запись Лога в "РегистрСведений.oz_ИсторияОтправкиЗапросов"
Процедура ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Метод, Заказ = Неопределено, ИсточникСобытия = Неопределено, ТекстЗапроса = "", ТекстОтвета = "") Экспорт
	// ++Задача № 3553
	#Область СтароеЛогирование
	//Набор = РегистрыСведений.oz_ИсторияОтправкиЗапросов.СоздатьНаборЗаписей();
	//Если Заказ = Неопределено Тогда	
	//	Набор.Отбор.Заказ.Установить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	//Иначе
	//	Набор.Отбор.Заказ.Установить(Заказ.Ссылка);
	//КонецЕсли;
	//Набор.Отбор.Период.Установить(ТекущаяДата());
	//
	//
	//Запись = Набор.Добавить();
	//Запись.Заказ    = ?(Заказ = Неопределено, Документы.РеализацияТоваровУслуг.ПустаяСсылка(), Заказ.Ссылка);	 
	//Запись.Период   = ТекущаяДата();
	//Запись.Метод    = Метод;
	//Запись.Код      = РезультатСтруктура.Код;
	//Запись.Описание = Лев(РезультатСтруктура.Описание ,200);
	//Запись.КлючДоступа = Константы.oz_КлючДоступа.Получить();
	//Запись.ИсточникСобытия = ИсточникСобытия;
	//Запись.Запрос = ТекстЗапроса;
	//Запись.Ответ = ТекстОтвета;
	//
	//Попытка	
	//	Набор.Записать();		
	//Исключение
	//	Сообщить("Ошибка записи логов отправки запросов Озон: " + ОписаниеОшибки());	
	//КонецПопытки;
	#КонецОбласти
	
	Попытка
		
		МетодAPI = Справочники.МетодыAPI[XMLСтрока(Метод)];
		ПараметрыЗаписиЛога = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаСервиса(Справочники.API.OZONE, МетодAPI);
		
		//Общие поля параметров
		ПараметрыЗаписиЛога.requestXML = ТекстЗапроса;
		ПараметрыЗаписиЛога.responseXML = ТекстОтвета;
		//isError
		//isServerError
		//errorDescription
		//Дополнительные поля параметров
		//numberObjects
		//noData
		ПараметрыЗаписиЛога.responseCode = РезультатСтруктура.Код;
		ПараметрыЗаписиЛога.responseDescription = РезультатСтруктура.Описание;
		ПараметрыЗаписиЛога.orderNumber = ?(Заказ = Неопределено,0,Число(Заказ.Номер));
		КлючДоступа = Константы.oz_КлючДоступа.Получить();
		ПараметрыЗаписиЛога.accessKey = КлючДоступа.Код;
		
		Если Не ИсточникСобытия = Неопределено Тогда
			
			Если Метаданные.Документы.Содержит(ИсточникСобытия.Метаданные()) Тогда
				ПараметрыЗаписиЛога.eventSourceType = "Документ." + ИсточникСобытия.Метаданные().Имя; 
				ПараметрыЗаписиЛога.eventSourceCode = ИсточникСобытия.Номер;
			КонецЕсли;
			Если Метаданные.Справочники.Содержит(ИсточникСобытия.Метаданные()) Тогда
				ПараметрыЗаписиЛога.eventSourceType = "Справочник." + ИсточникСобытия.Метаданные().Имя; 
				ПараметрыЗаписиЛога.eventSourceCode = ИсточникСобытия.Код;
			КонецЕсли;			

		КонецЕсли;
		
		ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаСервиса(ПараметрыЗаписиЛога);
		
	Исключение
		Сообщить("Ошибка записи логов отправки запросов Озон: " + ОписаниеОшибки());	
	КонецПопытки;

	// --Задача № 3553
КонецПроцедуры

Функция ПолучитьТаблицаОтказныхПозиций(НомерЗаказа)
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	новаОтчетВодителяДанныеМобильногоПриложения.Документ
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.новаОтчетВодителя.ДанныеМобильногоПриложения КАК новаОтчетВодителяДанныеМобильногоПриложения
	|ГДЕ
	|	новаОтчетВодителяДанныеМобильногоПриложения.Доставка.Номер = &Номер
	|	И новаОтчетВодителяДанныеМобильногоПриложения.АктуальныеДанные = ИСТИНА
	|	И новаОтчетВодителяДанныеМобильногоПриложения.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	новаОтчетВодителяДанныеМобильногоПриложения.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Штрихкод КАК Barcode,
	|	ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаOZON.ID КАК ReturnReasonID
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя.ОтказныеЭкземплярыТоваров КАК ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВзаимосвязьПричинВозвратаOZON КАК ВзаимосвязьПричинВозвратаOZON
	|			ПО ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Ссылка.ПричинаОтказаПереноса = ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаУТЛ
	|		ПО ВТ.Документ = ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Ссылка.Ссылка";
	
	Запрос.УстановитьПараметр("Номер", НомерЗаказа);
	//Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|   ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Штрихкод КАК Barcode,
	//|   ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаOZON.ID КАК ReturnReasonID
	//|ИЗ
	//|   Документ.ДанныеЗаказаВодителя.ОтказныеЭкземплярыТоваров КАК ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров
	//|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВзаимосвязьПричинВозвратаOZON КАК ВзаимосвязьПричинВозвратаOZON
	//|       ПО ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Ссылка.ПричинаОтказаПереноса = ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаУТЛ
	//|ГДЕ
	//|   ДанныеЗаказаВодителяОтказныеЭкземплярыТоваров.Ссылка.Реализация.Номер = &Номер";
	
	//Запрос.УстановитьПараметр("Номер", Номер);
	
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ПричинаПоУмолчанию = Справочники.oz_ПричиныВозврата.НайтиПоКоду("6");	
	Для каждого Стр Из Таблица Цикл		
		Если НЕ ЗначениеЗаполнено(Стр.ReturnReasonID) Тогда		
			Стр.ReturnReasonID = ПричинаПоУмолчанию.ID;			
		КонецЕсли;		
	КонецЦикла;
	
	Если Таблица.Количество()>0 Тогда
		Возврат Таблица;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции // Получить()

Функция ПолучитьТаблицаОтказныхПозиций_ВсеТовары(Заказ, ПричинаОтказа)
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	oz_ЭкземплярыТоваровЗаказов.Заказ,
	|	oz_ЭкземплярыТоваровЗаказов.Номенклатура,
	|	oz_ЭкземплярыТоваровЗаказов.Экземпляр,
	|	oz_ЭкземплярыТоваровЗаказов.Штрихкод,
	|	oz_ЭкземплярыТоваровЗаказов.id
	|ИЗ
	|	РегистрСведений.oz_ЭкземплярыТоваровЗаказов КАК oz_ЭкземплярыТоваровЗаказов
	|ГДЕ
	|	oz_ЭкземплярыТоваровЗаказов.Заказ = &Заказ");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Рез = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Стр Из Рез Цикл
		oz_СоздатьОтказнойЭкземпляр(Стр);		
	КонецЦикла;					
	
	ПричинаВозвратаOZON = Неопределено;
	ЗапросПричина = Новый Запрос("ВЫБРАТЬ
	|	oz_ЭкземплярыТоваровЗаказов.Штрихкод КАК Barcode,
	|	ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаOZON КАК ReturnReasonID
	|ИЗ
	|	РегистрСведений.ВзаимосвязьПричинВозвратаOZON КАК ВзаимосвязьПричинВозвратаOZON,
	|	РегистрСведений.oz_ЭкземплярыТоваровЗаказов КАК oz_ЭкземплярыТоваровЗаказов
	|ГДЕ
	|	ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаУТЛ = &ПричинаВозвратаУТЛ
	|	И oz_ЭкземплярыТоваровЗаказов.Заказ = &Заказ");
	ЗапросПричина.УстановитьПараметр("Заказ", Заказ);							 
	ЗапросПричина.УстановитьПараметр("ПричинаВозвратаУТЛ", ПричинаОтказа);
	ТабВозвратов = ЗапросПричина.Выполнить().Выгрузить();
	
	ПричинаПоУмолчанию = Справочники.oz_ПричиныВозврата.НайтиПоКоду("6");	
	Для каждого Стр Из ТабВозвратов Цикл		
		Если НЕ ЗначениеЗаполнено(Стр.ReturnReasonID) Тогда		
			Стр.ReturnReasonID = ПричинаПоУмолчанию.ID;			
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ТабВозвратов;
	
	
КонецФункции // Получить()

Функция ПолучитьТаблицаОтказныхПозицийИзЗакрытиеЗаказов(ДокЗакрытиеЗаказов,Заказ, ПричинаОтказа, РезультатДоставки)
	
	Если РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	oz_ЭкземплярыТоваровЗаказов.Заказ КАК Заказ,
		|	oz_ЭкземплярыТоваровЗаказов.Номенклатура КАК Номенклатура,
		|	oz_ЭкземплярыТоваровЗаказов.Экземпляр КАК Экземпляр,
		|	oz_ЭкземплярыТоваровЗаказов.Штрихкод КАК Штрихкод,
		|	oz_ЭкземплярыТоваровЗаказов.id КАК id
		|ИЗ
		|	Документ.ЗакрытиеЗаказов.Товары КАК ЗакрытиеЗаказовТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.oz_ЭкземплярыТоваровЗаказов КАК oz_ЭкземплярыТоваровЗаказов
		|		ПО ЗакрытиеЗаказовТовары.Реализация = oz_ЭкземплярыТоваровЗаказов.Заказ
		|			И ЗакрытиеЗаказовТовары.Номенклатура = oz_ЭкземплярыТоваровЗаказов.Номенклатура
		|ГДЕ
		|	oz_ЭкземплярыТоваровЗаказов.Заказ = &Заказ
		|	И ЗакрытиеЗаказовТовары.Ссылка.Ссылка = &ДокументЗакрытие
		|	И ЗакрытиеЗаказовТовары.КоличествоВозвращено > 0");
		
		Запрос.УстановитьПараметр("ДокументЗакрытие", ДокЗакрытиеЗаказов);
		Запрос.УстановитьПараметр("Заказ", Заказ);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	oz_ЭкземплярыТоваровЗаказов.Заказ,
		|	oz_ЭкземплярыТоваровЗаказов.Номенклатура,
		|	oz_ЭкземплярыТоваровЗаказов.Экземпляр,
		|	oz_ЭкземплярыТоваровЗаказов.Штрихкод,
		|	oz_ЭкземплярыТоваровЗаказов.id
		|ИЗ
		|	РегистрСведений.oz_ЭкземплярыТоваровЗаказов КАК oz_ЭкземплярыТоваровЗаказов
		|ГДЕ
		|	oz_ЭкземплярыТоваровЗаказов.Заказ = &Заказ");
		
		Запрос.УстановитьПараметр("Заказ", Заказ);
	КонецЕсли;
	
	РезультатВыборки = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Стр Из РезультатВыборки Цикл
		oz_СоздатьОтказнойЭкземпляр(Стр);		
	КонецЦикла;					
	
	
	ТабВозвратов = Новый ТаблицаЗначений;
	ТабВозвратов.Колонки.Добавить("Barcode");
	ТабВозвратов.Колонки.Добавить("ReturnReasonID");
	
	
	ПричинаВозвратаOZON = Неопределено;
	ЗапросПричина = Новый Запрос("ВЫБРАТЬ
	|	ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаOZON КАК ReturnReasonID
	|ИЗ
	|	РегистрСведений.ВзаимосвязьПричинВозвратаOZON КАК ВзаимосвязьПричинВозвратаOZON
	|ГДЕ
	|	ВзаимосвязьПричинВозвратаOZON.ПричинаВозвратаУТЛ = &ПричинаВозвратаУТЛ");
	ЗапросПричина.УстановитьПараметр("ПричинаВозвратаУТЛ", ПричинаОтказа);
	Выборка = ЗапросПричина.Выполнить().Выбрать();
	
	ПричинаПоУмолчанию = Справочники.oz_ПричиныВозврата.НайтиПоКоду("6");	
	Если Выборка.Следующий() Тогда		
		ReturnReasonID = Выборка.ReturnReasonID;
	Иначе		
		ReturnReasonID = ПричинаПоУмолчанию.ID;		
	КонецЕсли;
	
	
	Для Каждого Элем Из РезультатВыборки Цикл
		НовСтр = ТабВозвратов.Добавить();
		НовСтр.Barcode = Элем.Штрихкод;
		НовСтр.ReturnReasonID = ReturnReasonID;
	КонецЦикла;
	
	Возврат ТабВозвратов;
	
	
КонецФункции // Получить()

Процедура oz_СоздатьОтказнойЭкземпляр(СтрокаРез)
	
	ЭкземплярСпр = Справочники.oz_ОтказныеЭкземплярыТоваров.НайтиПоРеквизиту("Штрихкод", СтрокаРез.Штрихкод);
	
	Если НЕ ЗначениеЗаполнено(ЭкземплярСпр) Тогда		
		ЭкземплярСпр = Справочники.oz_ОтказныеЭкземплярыТоваров.СоздатьЭлемент();
		ЭкземплярСпр.Наименование = "" + СтрокаРез.Номенклатура;
		ЭкземплярСпр.Заказ = СтрокаРез.Заказ;
		ЭкземплярСпр.Номенклатура = СтрокаРез.Номенклатура;
		ЭкземплярСпр.id = СтрокаРез.id;
		ЭкземплярСпр.Штрихкод = СтрокаРез.Штрихкод;	
		ЭкземплярСпр.Записать();
	КонецЕсли;
	
	Набор = РегистрыСведений.oz_ЭкземплярыТоваровЗаказов.СоздатьНаборЗаписей();
	Набор.Отбор.Заказ.Установить(СтрокаРез.Заказ);
	Набор.Отбор.Номенклатура.Установить(СтрокаРез.Номенклатура);
	Набор.Отбор.Штрихкод.Установить(СтрокаРез.Штрихкод);
	Набор.Прочитать();
	
	Для каждого Стр Из Набор Цикл
		Стр.Экземпляр = ЭкземплярСпр.Ссылка;		
	КонецЦикла;
	
	Попытка	
		Набор.Записать();
	Исключение	
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ЗаполнитьРСoz_ЭкземплярыТоваровЗаказов(Заказ) Экспорт
	
	МагазинОзон  = ПараметрыСеанса.oz_МагазинOZON;   // код озон
	
	Если МагазинОЗОН.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	КодСайтаПапки = Формат(МагазинОЗОН.Код, "ЧН=0; ЧГ=");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ИСТИНА
	|	И Номенклатура.Код = &Код";
	Запрос.УстановитьПараметр("Код", КодСайтаПапки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПапкаМагазина = Справочники.Номенклатура.ПустаяСсылка();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	Иначе
		ПапкаМагазина = Выборка.Ссылка;
	КонецЕсли;
	
	
	Таблица = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC p1c_getOzonPostingItems "+СокрЛП(Заказ.Номер));    
	
	Если Таблица.Количество()>0 Тогда
		
		НаборЗаписей = РегистрыСведений.oz_ЭкземплярыТоваровЗаказов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Заказ.Ссылка);
		
		Для каждого Стр Из Таблица Цикл		
			Штрихкод = Стр.barcode;
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Стр.code, ПапкаМагазина);
			Если Номенклатура = Неопределено Тогда
				#Если Клиент Тогда
					Сообщить("Не найдена номенклатура с артикулом: " + Стр.code);
				#КонецЕсли
				Продолжить;
			КонецЕсли;
			
			Запись = НаборЗаписей.Добавить();
			Запись.Заказ = Заказ.Ссылка;
			Запись.Номенклатура = Номенклатура;
			Запись.Штрихкод = Штрихкод;
			Запись.id = СтрЗаменить(Стр.id, Символы.НПП, "");
			
		КонецЦикла;    
		
		Попытка			
			НаборЗаписей.Записать();			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРСoz_ЭкземплярыТоваровЗаказов_ПоДаннымArticleInfoGet(Заказ, ДанныеArticleInfoGet) Экспорт
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Заказ,
	|	НоменклатураСпр.Артикул КАК ID,
	|	"""" КАК Штрихкод,
	|	РеализацияТоваровУслугТовары.Ссылка.Номер КАК НомерЗаказа
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = НоменклатураСпр.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Заказ";
	Зап.УстановитьПараметр("Заказ", Заказ.Ссылка);
	
	Таб = Зап.Выполнить().Выгрузить();
	
	СпПолучателей = Новый Массив;
	СпПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	
	
	Если Таб.Количество() <> ДанныеArticleInfoGet.Items.ArticleItemInfo.Количество() Тогда
		//	lem.ОтправитьСообщение(СпПолучателей, "OZONe получение кодов экземпляров", "Заказ " + Заказ.Номер + ", разное количество строк!");
		//	Возврат;
		УстановитьЗначениеФлагаОбновленияЭкземпляров(Таб[0].НомерЗаказа, Истина);
	КонецеСли;	
	
	
	Наб = РегистрыСведений.oz_ЭкземплярыТоваровЗаказов.СоздатьНаборЗаписей();
	Наб.Отбор.Заказ.Установить(Заказ.Ссылка);
	
	
	Для Каждого Тек Из ДанныеArticleInfoGet.Items.ArticleItemInfo Цикл
		Струк = Новый Структура;
		Струк.Вставить("ID", Формат(Тек.ID, "ЧГ="));
		НайСтроки = Таб.НайтиСтроки(Струк);
		
		Если НайСтроки.Количество() >= 1 Тогда
			Нов = Наб.Добавить();
			Нов.id = Число(Тек.ID);
			Нов.Заказ = Заказ;
			Нов.Номенклатура = НайСтроки[0].Номенклатура;
			Нов.Штрихкод = Тек.Barcode;
			Нов.ДатаМодификации = ТекущаяДата();
		Иначе	
			//lem.ОтправитьСообщение(СпПолучателей, "OZONe получение кодов экземпляров", "Заказ " + Заказ.Номер + ", не найден товар с кодом! Код " + Формат(Тек.ID, "ЧГ="));
			//Возврат;		
			УстановитьЗначениеФлагаОбновленияЭкземпляров(Таб[0].НомерЗаказа, Истина);
		КонецеСли;	
	КонецЦикла;	
	
	Наб.Записать();
	
	УстановитьЗначениеФлагаОбновленияЭкземпляров(Таб[0].НомерЗаказа, Ложь);
КонецпРоцедуры	

Функция УстановитьЗначениеФлагаОбновленияЭкземпляров(НомерЗаказа, ЗначениеФлага) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Док
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер = &НомерЗаказа";
	Зап.УстановитьПараметр("НомерЗаказа", СокрЛП(Формат(НомерЗаказа, "ЧГ=")));
	
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	КонецеСли;	
	
	Заказ = "";
	
	Выб = Рез.Выбрать();
	Если Выб.Следующий() Тогда
		Заказ = Выб.Док;
	КонецЕсли;	
	
	ТекВр = ТекущаяДата();
	
	Наб = РегистрыСведений.oz_ИсторияПолученияЭкземпляровТоваров.СоздатьНаборЗаписей();
	Наб.Отбор.Заказ.Установить(Заказ);
	Наб.Отбор.Период.Установить(ТекВр);
	
	
	Нов = наб.Добавить();
	Нов.Период = ТекВр;
	Нов.Заказ = Заказ;
	Нов.ТребуетсяПолучитьЭкземплярыТоваров = ЗначениеФлага;
	
	Наб.Записать();
КонецФункции

#КонецОбласти

#Область ЭкспортныеФункции

//Используется в справочнике oz_ПричиныВозврата для получения ReturnReasonID
Процедура Озон_ПричиныВозврата() Экспорт
	
	Рез = ReturnReasonListGet();
	
	// Якурнов 09.10.2018 16:15:34
	// Помечаем все элементы на удаление
	ВыборкаПричиныВозврата = Справочники.oz_ПричиныВозврата.Выбрать();
	Пока ВыборкаПричиныВозврата.Следующий() Цикл
		РедСтр = ВыборкаПричиныВозврата.ПолучитьОбъект();
		РедСтр.ПометкаУдаления = Истина;
		РедСтр.Записать();
	КонецЦикла;	
	
	Для каждого Стр Из Рез.ТаблицаПричин Цикл		
		Най = Справочники.oz_ПричиныВозврата.НайтиПоКоду(СокрЛП(Стр.CODE));	
		Если ЗначениеЗаполнено(Най) Тогда		
			СпрЭлемент = Най.ПолучитьОбъект();
			СпрЭлемент.ID = СтрЗаменить(Стр.ID, Символы.НПП, "");
			СпрЭлемент.Наименование = Стр.Name;
			СпрЭлемент.ПометкаУдаления = Ложь;
		Иначе		
			СпрЭлемент = Справочники.oz_ПричиныВозврата.СоздатьЭлемент();
			СпрЭлемент.ID = СтрЗаменить(Стр.ID, Символы.НПП, "");
			СпрЭлемент.Код = СокрЛП(Стр.CODE);
			СпрЭлемент.Наименование = Стр.Name;		
		КонецЕсли;		
		СпрЭлемент.Записать();	
	КонецЦикла;
	
	
КонецПроцедуры

// 3.CarriageReceive и 4.PostingReceive Используется в документе oz_ПриёмПосылок

// 5.1. Тоже что и 5.PostingGiveoutToCourier но с записью заказов из Документ.Рейс 
//Якурнов 09.10.2018 9:49:04
Процедура ОбработатьВыдачуКурьеру_OZONПоРейсу(Рейс) Экспорт
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		Прокси =  WSСсылки.OZONArticleService_test.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	Иначе
		Прокси =  WSСсылки.OZONArticleService_work.СоздатьWSПрокси("ozon/api/subagent","ArticleService","BasicHttpBinding_IArticleService");
	КонецЕсли;
	
	// Логин Пароль и ContractID  
	ДаннныеДоступаОЗОН = СтруктураДанныхДоступаОЗОН();
	Логин 				= ДаннныеДоступаОЗОН.Логин;
	Пароль 				= ДаннныеДоступаОЗОН.Пароль;
	ContractID 			= ДаннныеДоступаОЗОН.ContractID;
	// <<<<<<<<	
	
	Фабрика = Прокси.ФабрикаXDTO;    
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеПараметрыЗаказа.ШтрихкодOZON КАК ШтрихкодOZON,
	|	РейсЗаказы.Заказ КАК Заказ
	|ИЗ
	|	Документ.Рейс.Заказы КАК РейсЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО РейсЗаказы.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|ГДЕ
	|	РейсЗаказы.Ссылка.Ссылка = &Рейс
	|	И НЕ ДополнительныеПараметрыЗаказа.ШтрихкодOZON ЕСТЬ NULL
	|	И НЕ ДополнительныеПараметрыЗаказа.ШтрихкодOZON = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	РейсЗаказы.Заказ,
	|	ДополнительныеПараметрыЗаказа.ШтрихкодOZON";
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	
	
	РезультатЗапроса = Запрос.Выполнить();   
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Тип_request = Фабрика.Пакеты.Получить("ozon/api/subagent").Получить("RequestPostingGiveoutToCourier");
			request = Фабрика.Создать(Тип_request);
			
			request.Login = Логин;
			request.Password = Пароль;
			request.ContractID = ContractID;
			request.PostingBarcode = ВыборкаДетальныеЗаписи.ШтрихкодOZON;
			
			Результат = Прокси.PostingGiveoutToCourier(request);
			
			// вывод в строку XML	
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку(); 
			Фабрика.ЗаписатьXML(Запись, request);
			ДанныеXML = Запись.Закрыть();
			
			РезультатСтруктура = Новый Структура;
			РезультатСтруктура.Вставить("Код", Результат.ResultCode);
			РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
			
			ЗаписатьЛог_oz_ИсторияОтправкиЗапросов(РезультатСтруктура, Перечисления.oz_Методы.PostingGiveoutToCourier, ВыборкаДетальныеЗаписи.Заказ, , ДанныеXML);
	
	КонецЦикла;
	
	
КонецПроцедуры

// 6.PostingReturn, PostingDeliveryDateChange и PostingGiveout
Процедура ВыполнитьОбменДаннымиOZONПриЗакрытииЗаказов(ДокЗакрытиеЗаказов) Экспорт
	
	ЕстьРезультатОтправки = Ложь;
	
	МагазинОЗОН = ПараметрыСеанса.oz_МагазинOZON;
	
	Если МагазинОЗОН.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗакрытиеЗаказовЗаказы.Ссылка КАК Ссылка,
	|	ЗакрытиеЗаказовЗаказы.НомерСтроки КАК НомерСтроки,
	|	ЗакрытиеЗаказовЗаказы.РезультатДоставки КАК РезультатДоставки,
	|	ЗакрытиеЗаказовЗаказы.ПричинаНевыполнения КАК ПричинаНевыполнения,
	|	ЗакрытиеЗаказовЗаказы.ПричинаОтказа КАК ПричинаОтказа,
	|	ЗакрытиеЗаказовЗаказы.ТипОплаты КАК ТипОплаты,
	|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
	|	ЗакрытиеЗаказовЗаказы.Закрыть КАК Закрыть,
	|	ЗакрытиеЗаказовЗаказы.Отклонить КАК Отклонить,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ИЗ
	|	Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ЗакрытиеЗаказовЗаказы.Реализация = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	ЗакрытиеЗаказовЗаказы.Ссылка = &Ссылка
	|	И РеализацияТоваровУслуг.ВладелецТовара = &МагазинОзон");
	
	Запрос.УстановитьПараметр("Ссылка", ДокЗакрытиеЗаказов);
	
	
	Запрос.УстановитьПараметр("МагазинОзон", МагазинОЗОН);
	Стр = Запрос.Выполнить().Выбрать();
	
	Пока Стр.Следующий() Цикл	
		ЕстьРезультатОтправки = Ложь;
		Штрихкод = Неопределено; 
		Штрихкод = ПолучитьШтрихкодOZONПоНомеру(Стр.НомерЗаказа);
		Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда 
			Продолжить; 
		КонецЕсли;
		
		//PostingReturn
		Если Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда И Стр.Отклонить Тогда
			//Если Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаБезЗаезда Тогда
			ReturnReasonID = ПолучитьReturnReasonID(Стр.ПричинаОтказа);
			Попытка
				Результат = PostingReturn(Штрихкод, ReturnReasonID, Стр.Заказ, ДокЗакрытиеЗаказов);	
			Исключение	
				Сообщить("Ошибка выполнения запроса к Ozon");
			КонецПопытки;                 
			
			//PostingDeliveryDateChange	
			//ИначеЕсли Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносДоставки
			//	ИЛИ Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносНаВторуюОчередь
			//	ИЛИ Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ПереносСЗаездом Тогда
			//	Попытка
			//		Результат = PostingDeliveryDateChange(Штрихкод, Стр.Дата, Стр.Дата, Стр.Заказ, ДокЗакрытиеЗаказов);
			//	Исключение
			//		Сообщить("Ошибка выполнения запроса к Ozon");
			//	КонецПопытки;
			//PostingGiveout	
		ИначеЕсли Стр.Закрыть ИЛИ Стр.Отклонить Тогда
			//Иначе
			
			Если Стр.ТипОплаты = Справочники.ТипыОплат.Наличные Тогда
				ТипОплаты =  1;
			Иначе
				ТипОплаты = 0;
			КонецЕсли;	
			
			Если Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена 
				ИЛИ Стр.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично Тогда
				
				Если Стр.ПричинаНевыполнения = Справочники.ПричиныНеВыполненияДоставки.ОтказКлиентаСЗаездом Тогда
					ПричинаОтказа =  Справочники.ПричиныОтказаПереноса.ПустаяСсылка();
				Иначе
					ПричинаОтказа = Стр.ПричинаОтказа;
				КонецЕсли;	
				
				ТаблицаОтказныхПозиций = ПолучитьТаблицаОтказныхПозицийИзЗакрытиеЗаказов(ДокЗакрытиеЗаказов ,Стр.Заказ, ПричинаОтказа, Стр.РезультатДоставки); 
				Попытка
					Результат = PostingGiveout(Штрихкод, ТипОплаты, ТаблицаОтказныхПозиций, Стр.Заказ, ДокЗакрытиеЗаказов);
				Исключение
					Сообщить("Ошибка выполнения запроса к Ozon");
				КонецПопытки;
				
			Иначе
				Попытка
					Результат = PostingGiveout(Штрихкод, ТипОплаты, Неопределено, Стр.Заказ, ДокЗакрытиеЗаказов);
				Исключение
					Сообщить("Ошибка выполнения запроса к Ozon");
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Создание Коробки Возврата ОЗОН и записи её в справочники oz_КоробкиНаВозврат
// Возвращает коробку зафиксированную в системе ОЗОН () либо Неопределено
Функция ФормированиеКоробкиВозвратаОЗОН(МассивВозвращаемойНоменклатуры,ДокументВозвратТоваровПоставщику,СкладМагазина = Неопределено) Экспорт
	
	ДокументВозвратТоваровПоставщику = Документы.ВозвратТоваровПоставщику.ПустаяСсылка();
	
	МагазинОЗОН = ПараметрыСеанса.oz_МагазинOZON;
	Если МагазинОзон.Пустая() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	Если ДокументВозвратТоваровПоставщику.Контрагент <> МагазинОзон Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	//Если склад не задан берем из документа 
	Если СкладМагазина = Неопределено Тогда 
		СкладМагазина = ДокументВозвратТоваровПоставщику.СкладМагазина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	oz_ОтказныеЭкземплярыТоваров.id КАК id,
	|	oz_ОтказныеЭкземплярыТоваров.Ссылка КАК ОтказнаяНоменклатура
	|ИЗ
	|	Справочник.oz_ОтказныеЭкземплярыТоваров КАК oz_ОтказныеЭкземплярыТоваров
	|ГДЕ
	|	oz_ОтказныеЭкземплярыТоваров.Номенклатура В(&МассивНоменклатуры)";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры",МассивВозвращаемойНоменклатуры );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивID = Новый Массив;
	МассивНоменклатуры = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивID.Добавить(Выборка.id);
		МассивНоменклатуры.Добавить(Выборка.ОтказнаяНоменклатура);
	КонецЦикла;
	
	Результат = ReturnBoxCreate(МассивID,СкладМагазина.ИдентификаторНаправления);
	
	//РезультатСтруктура.Вставить("Код", Результат.ResultCode);
	//РезультатСтруктура.Вставить("Описание", Результат.ResultMessage);
	//РезультатСтруктура.Вставить("ИдентификаторКоробки", Результат.ArticleBoxID);
	//РезультатСтруктура.Вставить("НаименованиеКоробки", Результат.ArticleBoxName);
	
	Если Результат.Код = 0 Тогда
		
		Если МассивID.Количество() = 0 Тогда
			ЭтоКоробкаСДокументами = Истина;
		Иначе
			ЭтоКоробкаСДокументами = Ложь;
		КонецЕсли;	
		
		НайденнаяКоробка = Справочники.oz_КоробкиНаВозврат.НайтиПоРеквизиту("ИдентификаторКоробки",Результат.ИдентификаторКоробки);
		
		Если НайденнаяКоробка.Пустая() Тогда
			КоробкаОзон = Справочники.oz_КоробкиНаВозврат.СоздатьЭлемент();
		Иначе
			КоробкаОзон = НайденнаяКоробка.ПолучитьОбъект();
		КонецЕсли;
		
		КоробкаОзон.ИдентификаторКоробки = Результат.ИдентификаторКоробки;
		КоробкаОзон.СкладМагазина = СкладМагазина;
		КоробкаОзон.НаименованиеКоробки = Результат.НаименованиеКоробки;
		КоробкаОзон.ДатаСоздания = ТекущаяДата();
		КоробкаОзон.КоробкаСДокументами = ЭтоКоробкаСДокументами;
		КоробкаОзон.ВозвратТоваров = ДокументВозвратТоваровПоставщику;
		
		КоробкаОзон.ЭкземплярыТоваров.Очистить();
		
		Для Каждого Элем Из МассивНоменклатуры Цикл
			НовСтр = КоробкаОзон.ЭкземплярыТоваров.Добавить();
			НовСтр.ОтказнойЭкземпляр = Элем;
		КонецЦикла;
		
		КоробкаОзон.Записать();
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	
#КонецОбласти

#Область РегламентныеЗадания

// 1.CarriageListGet и 2.CarriageContentGet Собитаем данные по АПП_OZON созданием ПриходЗаказовНаСклад с типом WEBСервисOZON 
// Якурнов 04.10.2018 17:56:30
Процедура oz_РегламентПолучениеДанныхАПП() Экспорт
	ДатаНачала = НачалоДня(ТекущаяДата() - 24*60*60);
	ДатаОкончания = КонецДня(ТекущаяДата() + 24*60*60);
	
	МассивФильтров = Новый Массив;
	МассивФильтров.Добавить("Created");
	МассивФильтров.Добавить("DecisionRequired");
	МассивФильтров.Добавить("Send");
	
	
	СтруктураАвторизацииSync = ИнтеграцияССервисомSync.СтруктураДоступаSync(ПараметрыСеанса.oz_МагазинOZON);
	
	Для Каждого Фильтр из МассивФильтров Цикл
		МассивОзон = CarriageListGet(ДатаНачала,ДатаОкончания,Фильтр);
		Если МассивОзон <> Неопределено Тогда
			МагазинОзон = ПараметрыСеанса.oz_МагазинOZON;
			
			
			ТекстРассылки = "";
			
			Для каждого Элем из МассивОзон Цикл
				Попытка	
					МассивПосылокОзон = CarriageContentGet(Элем);
					
					ТабOrderID = oz_РаботаССервисом.ПроверкаНаOrderID(МассивПосылокОзон);
					
					Для Каждого ЭлемОзон Из ТабOrderID Цикл
						ЗаказОзон = oz_РаботаССервисом.ArticleInfoGet(ЭлемОзон.ШтрихкодOZON);
						
						ДопПараметрыSync = ИнтеграцияССервисомSync.ПолучениеДопПараметровДляSync(МагазинОзон,ЭлемОзон.OrderID);
						СтруктураЗаказа = ИнтеграцияССервисомSync.КонвертацияСтруктурыЗаказаИзОзонВSync(ЗаказОзон,ДопПараметрыSync, СтруктураАвторизацииSync, ЭлемОзон.КодСклада);
						
						Если ЗначениеЗаполнено(ЭлемОзон.OrderID) Тогда
							ЗаполнитьРСoz_ЭкземплярыТоваровЗаказов_ПоДаннымArticleInfoGet(ЭлемОзон.Заказ, ЗаказОзон);
							ИнтеграцияССервисомSync.UpdateOrderExtended(ЭлемОзон.OrderID,СтруктураЗаказа,СтруктураАвторизацииSync);
						Иначе
							//ТекстРассылки = ТекстРассылки + "Не загружен заказ: " + ЭлемОзон.ВнешнийНомерЗаказа+ " штр: "+ ЭлемОзон.ШтрихкодOZON  + Символы.ПС;	
							ИнтеграцияССервисомSync.RegisterOrderExtended(СтруктураЗаказа,СтруктураАвторизацииSync);
						КонецЕсли;
						
					КонецЦикла;
					
					СоздатьПриходЗаказовНаСклад(МассивПосылокОзон,Элем)
				Исключение
				КонецПопытки;	
			КонецЦикла;
			
			Если ТекстРассылки <> "" Тогда
				МассивРассылки = Новый Массив;
				//МассивРассылки.Добавить("v.yakurnov@strizh-logistic.ru");
				МассивРассылки.Добавить("evgeniy.marochkin@strizh-logistic.ru");	
				
				ТемаРассылки  = "Получены недогруженные в Sync заказы из ОЗОН";
				ИнтеграцияССервисомSync.ОтправитьСообщениеВит(МассивРассылки,ТемаРассылки, ТекстРассылки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

//только обновление данных складов
Процедура ПолучениеДанныхПоСкладамМагазина() Экспорт
	
	МагазинOZON = ПараметрыСеанса.oz_МагазинOZON;
	Если МагазинOZON.Пустая() Тогда
		Возврат;
	КонецЕсли;
	МассивСкладовмагазинов = PlaceInfoListGet();
	Если МассивСкладовмагазинов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элем Из МассивСкладовмагазинов Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СкладыМагазинов.Ссылка КАК Ссылка,
		|	СкладыМагазинов.Наименование КАК Наименование,
		|	СкладыМагазинов.Адрес КАК Адрес,
		|	СкладыМагазинов.ИдентификаторНаправления КАК ИдентификаторНаправления,
		|	СкладыМагазинов.ТелефонныйНомерПриЗабореТовара КАК ТелефонныйНомерПриЗабореТовара
		|ИЗ
		|	Справочник.СкладыМагазинов КАК СкладыМагазинов
		|ГДЕ
		|	СкладыМагазинов.Владелец = &Владелец
		|	И СкладыМагазинов.ИдентификаторНаправления = &ИдентификаторНаправления";
		
		Запрос.УстановитьПараметр("Владелец", МагазинOZON);
		Запрос.УстановитьПараметр("ИдентификаторНаправления", Элем.ИдентификаторНаправления);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.Наименование <> Элем.НаименованиеСклада
				ИЛИ Выборка.Адрес <> Элем.АдресСклада Тогда
				
				СкладМагазина = Выборка.Ссылка.ПолучитьОбъект();
				СкладМагазина.Наименование = Элем.НаименованиеСклада;
				СкладМагазина.Адрес = Элем.АдресСклада;
				СкладМагазина.Записать();
				
			КонецЕсли;
		Иначе
			
			//НовСкладМагазина = Справочники.СкладыМагазинов.СоздатьЭлемент();
			//НовСкладМагазина.Владелец = МагазинOZON;
			//НовСкладМагазина.Наименование = Элем.НаименованиеСклада;
			//НовСкладМагазина.Адрес = Элем.АдресСклада;
			//НовСкладМагазина.ИдентификаторНаправления = Элем.ИдентификаторНаправления;
			//НовСкладМагазина.Записать();
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры	

Процедура ПолучениеСпискаЗаказовНаВозврат() Экспорт
	
КонецПроцедуры	

Процедура РегламентОбновлениеЭкземпляровТоваров() Экспорт
	Зап = Новый Запрос;
	//+Степанов В параметры среза последних регистра oz_ИсторияПолученияЭкземпляровТоваров добавлено условие, исключающее заказы с методом создания WEB_Интерфейс.
	Зап.Текст = "ВЫБРАТЬ
	|	oz_ИсторияПолученияЭкземпляровТоваровСрезПоследних.Заказ КАК Заказ,
	|	ДополнительныеПараметрыЗаказа.ШтрихкодOZON КАК ШтрихкодOZON
	|ИЗ
	|	РегистрСведений.oz_ИсторияПолученияЭкземпляровТоваров.СрезПоследних(, Заказ.МетодСозданияЗаказа <> ЗНАЧЕНИЕ(Перечисление.МетодСозданияЗаказа.WEB_Интерфейс)) КАК oz_ИсторияПолученияЭкземпляровТоваровСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	|		ПО oz_ИсторияПолученияЭкземпляровТоваровСрезПоследних.Заказ = ДополнительныеПараметрыЗаказа.Заказ
	|ГДЕ
	|	oz_ИсторияПолученияЭкземпляровТоваровСрезПоследних.ТребуетсяПолучитьЭкземплярыТоваров = ИСТИНА";
	
	
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		ДанныеAIG = oz_РаботаССервисом.ArticleInfoGet(Выб.ШтрихкодOZON);	
		ЗаполнитьРСoz_ЭкземплярыТоваровЗаказов_ПоДаннымArticleInfoGet(Выб.Заказ, ДанныеAIG);
	КонецЦикла;	
КонецПроцедуры
#КонецОбласти
