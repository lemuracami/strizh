Процедура ЗафиксироватьНомерВерсии(МП, НомерВерсии, ОписаниеВерсии, ЭтоРелиз) Экспорт
	ВерсияМП = ПолучитьВерсиюМП(НомерВерсии, ОписаниеВерсии, ЭтоРелиз);
	ТекущаяВерсияМП = ПолучитьТекущуюВерсиюМП(МП);
	
	
	Если ВерсияМП <> ТекущаяВерсияМП Тогда
		УстановитьТекущуюВерсиюМП(МП, ВерсияМП);
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗафиксироватьТранспортМП(МП, КодТранспорта) Экспорт
	Транспорт = Справочники.новаТранспорт.НайтиПоКоду(КодТранспорта);
	ТекущийТранспортМП = ПолучитьТекущийТранспортМП(МП);
	
	
	Если Транспорт <> ТекущийТранспортМП Тогда
		УстановитьТекущийТранспортМП(МП, Транспорт);
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьВерсиюМП(ВерсияМПСтрока, ОписаниеВерсии, ЭтоРелиз) Экспорт 
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	НомераВерсийМП.Ссылка КАК Версия
	|ИЗ
	|	Справочник.НомераВерсийМП КАК НомераВерсийМП
	|ГДЕ
	|	НомераВерсийМП.НомерВерсии = &НомерВерсии";
	Зап.УстановитьПараметр("НомерВерсии", ВерсияМПСтрока);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Версия;
	Иначе	
		Нов = Справочники.НомераВерсийМП.СоздатьЭлемент();
		Нов.НомерВерсии = ВерсияМПСтрока;
		Нов.Наименование = ВерсияМПСтрока;
		Нов.ДатаСозданияВерсии = ТекущаяДата();
		Нов.Описание = ОписаниеВерсии;
		Нов.РелизнаяВерсия = ЭтоРелиз;
		Нов.Записать();
		Возврат Нов.Ссылка;
	КонецеСли;	
КонецФункции	


Функция ПолучитьТекущуюВерсиюМП(МП) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ВерсииМПСрезПоследних.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииМП.СрезПоследних(, МП.Ссылка = &МП) КАК ВерсииМПСрезПоследних";
	Зап.УстановитьПараметр("МП", МП);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Версия;
	Иначе	
		Возврат Неопределено;
	КонецеСли;	
КонецФункции	

Функция ПолучитьТекущийТранспортМП(МП) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	СоответствиеТранспортаМПСрезПоследних.МП КАК МП,
	|	СоответствиеТранспортаМПСрезПоследних.Транспорт КАК Транспорт
	|ИЗ
	|	РегистрСведений.СоответствиеТранспортаМП.СрезПоследних(, ) КАК СоответствиеТранспортаМПСрезПоследних
	|ГДЕ
	|	СоответствиеТранспортаМПСрезПоследних.МП = &МП
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоответствиеТранспортаМПСрезПоследних.Период УБЫВ";
	Зап.УстановитьПараметр("МП", МП);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Транспорт;
	Иначе	
		Возврат Неопределено;
	КонецеСли;	
КонецФункции

Процедура УстановитьТекущуюВерсиюМП(МП, ВерсияМП) Экспорт
	Наб = РегистрыСведений.ВерсииМП.СоздатьНаборЗаписей();
	
	ТекД = ТекущаяДата();
	
	Наб.Отбор.Период.Установить(ТекД);
	Наб.Отбор.МП.Установить(МП);
	
	Нов = Наб.Добавить();
	Нов.МП = МП;
	Нов.Период = Текд;
	Нов.Версия = ВерсияМП;
	
	Наб.Записать();
КонецПроцедуры	

Процедура УстановитьТекущийТранспортМП(МП, Транспорт) Экспорт
	Наб = РегистрыСведений.СоответствиеТранспортаМП.СоздатьНаборЗаписей();
	
	ТекД = ТекущаяДата();
	
	Наб.Отбор.Период.Установить(ТекД);
	Наб.Отбор.Транспорт.Установить(Транспорт);
	
	Нов = Наб.Добавить();
	Нов.МП = МП;
	Нов.Период = Текд;
	Нов.Транспорт = Транспорт;
	
	Наб.Записать();
КонецПроцедуры	

Функция ПолучитьМассивУзловМП() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ИзмененияДляМП.Ссылка КАК ПЛ
	|ИЗ
	|	ПланОбмена.ИзмененияДляМП КАК ИзмененияДляМП
	|ГДЕ
	|	ИзмененияДляМП.ПометкаУдаления = ЛОЖЬ
	|	И ИзмененияДляМП.ЭтотУзел = ЛОЖЬ";
	Возврат Зап.Выполнить().Выгрузить().ВыгрузитьКолонку("ПЛ");
	
КонецФункции	

Процедура ИнициализироватьРегистрациюИзмененийПоПартнерам(УзелОбмена) Экспорт
	Зап  = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В ИЕРАРХИИ(&ГруппаКомитентов)
	|	И Контрагенты.Ссылка <> &ГруппаКомитентов
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	
	Зап.УстановитьПараметр("ГруппаКомитентов", ПараметрыСеанса.ГруппаКонтрагентов_Принципалы);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выб.Контрагент);
	КонецЦикла;	
КонецПроцедуры	

Процедура ОтправкаУведомлений(МассивУстройств, ДанныеОтправки) Экспорт
	КлючСервера_ = "AAAAnkZ1yfQ:APA91bG4DA4YZgMfwt579a_ArmOXx_fZxPetN-yEKyu8bUWfiIP1N78dGN71IGV8FEeZ4X7dT88BEfKTcV0hUVix3jdWJAFVGZ5_gtTThyP9HaJUmyIc1uAtbdAJs_X1SjoFFRucrxo9";
	
	АдресСервера = "fcm.googleapis.com/fcm/send";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(АдресСервера,,,,,,ssl);
	
	ТелоСообщения = Новый Структура;
	ТелоСообщения.Вставить("title", ДанныеОтправки.Заголовок);
	ТелоСообщения.Вставить("name", ДанныеОтправки.Наименование);
	ТелоСообщения.Вставить("text", ДанныеОтправки.Текст);
	ТелоСообщения.Вставить("data", ДанныеОтправки.Данные);
	
	ПараметрыСообщения = Новый Структура;                          
	ПараметрыСообщения.Вставить("registration_ids", МассивУстройств);  // получаем на мобилках, как и при GCM ( IDПодписчика = ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений());
	ПараметрыСообщения.Вставить("data", ТелоСообщения);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыСообщения);
	
	СтрокаТелоЗапроса = ЗаписьJSON.Закрыть();
	
	Запрос = Новый HTTPЗапрос();
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("Authorization", "key="+КлючСервера_);
	Запрос.УстановитьТелоИзСтроки(СтрокаТелоЗапроса, КодировкаТекста.UTF8);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос); 
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
КонецПроцедуры	

#Область ОбменДаннымиСМПЭкипажей

Функция ДанныеJSONВСтруктуру(ДанныеJSON, ИменаСвойствСоЗначениямиДата = "") Экспорт
	Чт = Новый ЧтениеJSON;
	Чт.УстановитьСтроку(ДанныеJSON);
	СтруктураДанных = ПрочитатьJSON(Чт, Ложь, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.Microsoft);
	Возврат СтруктураДанных;
КонецФункции

Функция СформироватьСтрокуJSON(СтруктураJSON) Экспорт
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;	
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
КонецФункции


Функция ЗафиксироватьСтатусыМП(ДанныеСтатусов) Экспорт
	Попытка
		МассивНомеров = Новый Массив;
		СтруктураОтвета = Новый Структура;
		
		Если Не ЗначениеЗаполнено(ДанныеСтатусов.statuses) Тогда
			СтруктураОтвета.Вставить("result", Истина);
			СтруктураОтвета.Вставить("error", Ложь);
			СтруктураОтвета.Вставить("numbers", МассивНомеров);
			Возврат СтруктураОтвета;
		КонецеСли;	
		
		УзелМП = lem.ПолучитьУзелПланаОбмена(ДанныеСтатусов.IDMA);
		
		ТаблицаРеквизитовДанныхМП = Новый ТаблицаЗначений;
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("НомерДокумента",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("НомерРейса",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("НомерРеализации",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("НомерЗабора",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));	
		
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("УзелМП", Новый ОписаниеТипов("ПланОбменаСсылка.ИзмененияДляМП"));	
		
		
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("КодТипаОплаты",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("КодТипаОплатыЧек",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
		
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("КодПричиныНевыполненияДоставки",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));	
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("КодПричиныОтказаПереноса",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));	
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("КодОбъемногоБрейка",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));	  
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("КодВесовогоБрейка",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));	
		ТаблицаРеквизитовДанныхМП.Колонки.Добавить("НомерВерсииМП",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(15)));	
		
		
		
		ТаблицаСтрокДанныхМП = Новый ТаблицаЗначений;
		ТаблицаСтрокДанныхМП.Колонки.Добавить("КодНоменклатуры",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		ТаблицаСтрокДанныхМП.Колонки.Добавить("ШКНоменклатуры",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
		
		
		Для Каждого ТекСтатус из ДанныеСтатусов.statuses Цикл
			НовСтрока = ТаблицаРеквизитовДанныхМП.Добавить();
			НовСтрока.НомерДокумента = ТекСтатус.numberDoc;
			НовСтрока.НомерРейса = ТекСтатус.routeId;
			НовСтрока.НомерРеализации = ТекСтатус.orderId;
			НовСтрока.НомерЗабора = ТекСтатус.shipmentId;
			НовСтрока.КодТипаОплаты = ТекСтатус.payTypeId;
			НовСтрока.КодТипаОплатыЧек = ТекСтатус.payTypeIdCheck;
			НовСтрока.КодПричиныНевыполненияДоставки = ТекСтатус.ResultOfDelivery;
			НовСтрока.КодПричиныОтказаПереноса = ТекСтатус.reasonRejectionId;
			НовСтрока.КодОбъемногоБрейка = ТекСтатус.volumeBreakId;
			НовСтрока.КодВесовогоБрейка = ТекСтатус.liftingBreakId;
			НовСтрока.УзелМП = УзелМП;
			/////////////////////////////
			НовСтрока.НомерВерсииМП = "";
			/////////////////////////////
			
			Для Каждого ТекТовар из ТекСтатус.goods Цикл
				НовСтрокаТовар = ТаблицаСтрокДанныхМП.Добавить();
				НовСтрокаТовар.КодНоменклатуры = ТекТовар.goodsId;
				// шк товара
				//НовСтрокаТовар.ШКНоменклатуры = ТекТовар.goodsBarcode;
				/////////////////////////////
				НовСтрокаТовар.ШКНоменклатуры = "";
				/////////////////////////////
				// шк товара
			КонецЦикла;	
		КонецЦикла;	
		
		
		
		
		Запрос = Новый Запрос; 
		Запрос.Текст = "ВЫБРАТЬ
		|	ВтСтатусы.НомерДокумента КАК ИдДокумента,
		|	ВтСтатусы.НомерРейса КАК НомерРейса,
		|	ВтСтатусы.НомерРеализации КАК НомерРеализации,
		|	ВтСтатусы.НомерЗабора КАК НомерЗабора,
		|	ВтСтатусы.КодТипаОплаты КАК КодТипаОплаты,
		|	ВтСтатусы.КодПричиныНевыполненияДоставки КАК КодПричиныНевыполненияДоставки,
		|	ВтСтатусы.КодПричиныОтказаПереноса КАК КодПричиныОтказаПереноса,
		|	ВтСтатусы.КодОбъемногоБрейка КАК КодОбъемногоБрейка,
		|	ВтСтатусы.КодВесовогоБрейка КАК КодВесовогоБрейка,
		|	ВтСтатусы.УзелМП КАК УзелМП,
		|	ВтСтатусы.КодТипаОплатыЧек КАК КодТипаОплатыЧек
		|ПОМЕСТИТЬ ВТСтатусы
		|ИЗ
		|	&Статусы КАК ВтСтатусы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСтатусы.ИдДокумента КАК ИдДокумента,
		|	ВТСтатусы.НомерРейса КАК НомерРейса,
		|	ВТСтатусы.НомерРеализации КАК НомерРеализации,
		|	ВТСтатусы.НомерЗабора КАК НомерЗабора,
		|	ВТСтатусы.КодТипаОплаты КАК КодТипаОплаты,
		|	ВТСтатусы.КодПричиныНевыполненияДоставки КАК КодПричиныНевыполненияДоставки,
		|	ВТСтатусы.КодПричиныОтказаПереноса КАК КодПричиныОтказаПереноса,
		|	ВТСтатусы.КодОбъемногоБрейка КАК КодОбъемногоБрейка,
		|	ВТСтатусы.КодВесовогоБрейка КАК КодВесовогоБрейка,
		|	ВТСтатусы.УзелМП КАК УзелМП,
		|	ДанныеЗаказаВодителя.Ссылка КАК ДанныеМП,
		|	РейсДок.Ссылка КАК Рейс,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	ЗаборТовара.Ссылка КАК Забор,
		|	ТипыОплат.Ссылка КАК ТипОплаты,
		|	ПричиныНеВыполненияДоставки.Ссылка КАК ПричинаНеВыполненияДоставки,
		|	ПричиныОтказаПереноса.Ссылка КАК ПричинаОтказаПереноса,
		|	ОбъемныеБрейки.Ссылка КАК ОбъемныйБрейк,
		|	ВесовыеБрейкиРасчетаСтоимостиПодъемов.Ссылка КАК ВесовойБрейкРасчетаСтоимостиПодъемов,
		|	ПричиныОтказаПереноса.ИнициаторСостояния КАК ИнициаторСостояния,
		|	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
		|	ТипыОплатЧек.Ссылка КАК ТипОплатыЧек
		|ИЗ
		|	ВТСтатусы КАК ВТСтатусы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
		|		ПО ВТСтатусы.ИдДокумента = ДанныеЗаказаВодителя.Номер
		|			И ВТСтатусы.УзелМП = ДанныеЗаказаВодителя.УзелОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК РейсДок
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
		|			ПО РейсДок.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
		|		ПО ВТСтатусы.НомерРейса = РейсДок.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТСтатусы.НомерРеализации = РеализацияТоваровУслуг.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
		|		ПО ВТСтатусы.НомерЗабора = ЗаборТовара.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
		|		ПО ВТСтатусы.КодТипаОплаты = ТипыОплат.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПричиныНеВыполненияДоставки КАК ПричиныНеВыполненияДоставки
		|		ПО ВТСтатусы.КодПричиныНевыполненияДоставки = ПричиныНеВыполненияДоставки.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПричиныОтказаПереноса КАК ПричиныОтказаПереноса
		|		ПО ВТСтатусы.КодПричиныОтказаПереноса = ПричиныОтказаПереноса.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъемныеБрейки КАК ОбъемныеБрейки
		|		ПО ВТСтатусы.КодОбъемногоБрейка = ОбъемныеБрейки.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВесовыеБрейкиРасчетаСтоимостиПодъемов КАК ВесовыеБрейкиРасчетаСтоимостиПодъемов
		|		ПО ВТСтатусы.КодВесовогоБрейка = ВесовыеБрейкиРасчетаСтоимостиПодъемов.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплатЧек
		|		ПО ВТСтатусы.КодТипаОплатыЧек = ТипыОплатЧек.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.КодНоменклатуры КАК КодНоменклатуры
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	&Номенклатура КАК Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТовары.КодНоменклатуры КАК КодНоменклатуры,
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	ВТТовары КАК ВТТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТТовары.КодНоменклатуры = Номенклатура.Код";
		
		
		Запрос.УстановитьПараметр("Статусы", ТаблицаРеквизитовДанныхМП);
		Запрос.УстановитьПараметр("Номенклатура", ТаблицаСтрокДанныхМП);
		
		МассивРезультатовПакета = Запрос.ВыполнитьПакет();
		ТЗСтатусов = МассивРезультатовПакета[1].Выгрузить();
		ТЗТоваров = МассивРезультатовПакета[3].Выгрузить();
		
		
		
		
		Для Каждого ТекСтатус из ДанныеСтатусов.statuses Цикл
			
			СтрокиСтатуса = ТЗСтатусов.НайтиСтроки(Новый Структура("ИдДокумента", ТекСтатус.numberDoc));
			ДанныеСтатуса = СтрокиСтатуса[0];
			
			ЭтоЗабор = Ложь;
			Если ЗначениеЗаполнено(ДанныеСтатуса.НомерЗабора) Тогда
				ЭтоЗабор = Истина;
			конецеСли;	
			
			Если Не ЗначениеЗаполнено(ДанныеСтатуса.ДанныеМП) Тогда
				ДокументСтатуса = Документы.ДанныеЗаказаВодителя.СоздатьДокумент();
				ДокументСтатуса.Дата = ТекСтатус.Date;
				ДокументСтатуса.Номер = ТекСтатус.NumberDoc;
			Иначе
				ДокументСтатуса = ДанныеСтатуса.ДанныеМП.ПолучитьОбъект();
				ДокументСтатуса.ДоставленныеТовары.Очистить();
				
				СписокПолучателей = Новый Массив;
				
				СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
				
				//Отпр = lem.ОтправитьСообщение(СписокПолучателей, "ИЗМЕНЕНИЕ ДАННЫХ МП  " + ДокументСтатуса.Ссылка, "Был заказ " + Строка(?(ЗначениеЗаполнено(ДокументСтатуса.Реализация) = Истина, ДокументСтатуса.Реализация, "")) , , "Логистическая компания ""Стриж""");	
				
			КонецЕсли;	
			
			
			ДокументСтатуса.Реализация = ДанныеСтатуса.Заказ;
			ДокументСтатуса.Забор = ДанныеСтатуса.Забор;
			
			
			ДокументСтатуса.ПричинаНеВыполненияДоставки = ДанныеСтатуса.ПричинаНеВыполненияДоставки;
			
			ДокументСтатуса.ТипОплаты = ДанныеСтатуса.ТипОплаты;
			
			
			ДокументСтатуса.ИнициаторСостояния = ДанныеСтатуса.ИнициаторСостояния;
			
			
			ДокументСтатуса.ПричинаОтказаПереноса = ДанныеСтатуса.ПричинаОтказаПереноса;
			
			
			ДокументСтатуса.ДатаПереноса = ТекСтатус.DateReason;
			
			ДокументСтатуса.Транспорт = ДанныеСтатуса.Транспорт;
			
			ДокументСтатуса.Сумма = ТекСтатус.Summa;
			
			ДокументСтатуса.ДатаДоставки = ТекСтатус.Date;
			
			Если ЭтоЗабор Тогда
				ДокументСтатуса.ТипЗаказа = Перечисления.ТипыЗаказов.Забор;
				ДокументСтатуса.КоличествоМест = ТекСтатус.PiecesOfFreight;
				ДокументСтатуса.КоличествоПалет = ТекСтатус.PaletCount;
				ДокументСтатуса.ОбъемныйБрейк = ДанныеСтатуса.ОбъемныйБрейк;
			Иначе
				ДокументСтатуса.ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
			КонецеСли;	
			
			ДокументСтатуса.УзелОбмена = УзелМП;
			
			Если ТекСтатус.TypeOfLifting = 1 Тогда
				ДокументСтатуса.ВидПодъема = Перечисления.ВидыПодъемовВодителя.Лифт;
			ИначеЕсли ТекСтатус.TypeOfLifting = 2 Тогда	
				ДокументСтатуса.ВидПодъема = Перечисления.ВидыПодъемовВодителя.РучнойПодъем;
			ИначеЕсли ТекСтатус.TypeOfLifting = 3 Тогда	
				ДокументСтатуса.ВидПодъема = Перечисления.ВидыПодъемовВодителя.БезПодъема;				
			КонецеСли;	
			
			ДокументСтатуса.Этаж = ТекСтатус.FloorOfLifting;
			
			
			ДокументСтатуса.КоличествоПовторовЗапросаСостоянияЧека = ТекСтатус.countRequestPrintingCheck;
			ДокументСтатуса.ДатаОтправкиЧекаНаПечать = ТекСтатус.dateOfSendingDataOfCheck;
			ДокументСтатуса.ДатаПечатиЧеков = ТекСтатус.dateOfPrintingCheck;
			ДокументСтатуса.ИдентификаторЧека = ТекСтатус.idCheck;
			ДокументСтатуса.ИдентификаторВозвратногоЧека = ТекСтатус.idReturnCheck;
			ДокументСтатуса.ОшибкаФормированияЧекаНаСервере = ТекСтатус.errorFormingCheck;
			ДокументСтатуса.EmailКлиента = ТекСтатус.emailRecepient;		
			
			ДокументСтатуса.ТипОплатыЧек = ДанныеСтатуса.ТипОплатыЧек;
			
			ДокументСтатуса.КоличествоХодокНаЭтаж = ТекСтатус.liftingCountOfWalkersPerFloor;
			ДокументСтатуса.РассчитаннаяСтоимостьПодъема = ТекСтатус.liftingCalcSum;
			ДокументСтатуса.ВнесеннаяСтоимостьПодъема = ТекСтатус.liftingApprovedSum;
			ДокументСтатуса.ВесРасчетаПодъема = ТекСтатус.liftingWeight;
			ДокументСтатуса.ВесРасчетаПодъемаВыгруженный = ТекСтатус.liftingWeightUploaded;
			ДокументСтатуса.БрейкРасчетаПодъема = ДанныеСтатуса.ВесовойБрейкРасчетаСтоимостиПодъемов;
			
			ДокументСтатуса.Рейс = ДанныеСтатуса.Рейс;
			
			ДокументСтатуса.КодИдентификацииКлиента = ТекСтатус.customerIdentificationCode;
			ДокументСтатуса.СтатусУстановленБезКИК = ТекСтатус.statusSetWithoutCIC;
			
			
			//комментируем, пока не перешли на новую версию МП
			Попытка
				ДокументСтатуса.ОплаченаСтоимостьДоставкиПриОтменеЗаказа = ТекСтатус.CostDelivRequiredIfRefuse; 
				ДокументСтатуса.РасчетнаяСтоимостьДоставки = ТекСтатус.calculatedDeliveryCost; 
				ДокументСтатуса.СтоимостьДоставки = ТекСтатус.DeliveryCost; 
			Исключение
				
			КонецПопытки;
			//комментируем, пока не перешли на новую версию
			
			//Асеев 05.03.2022 (Задача № 4757)>>>
			Попытка
				ДокументСтатуса.БылаПримерка = ТекСтатус.fittingHappened;
				ДокументСтатуса.КоличествоSKUПримерки = ТекСтатус.countSKUForFitting;
			Исключение
			КонецПопытки;
			//Асеев 05.03.2022 (Задача № 4757)<<<

			//Асеев 28.10.2024 (Задача № 5337)>>>
			Попытка
				ДокументСтатуса.ВозвратНаДоставку = ТекСтатус.returnToDelivery;
			Исключение
			КонецПопытки;
			//Асеев 28.10.2024 (Задача № 5337)<<<

			ДокументСтатуса.ДатаВыгрузки = ТекущаяДата();
			
			
			Для Каждого ТекТовар Из ТекСтатус.goods Цикл
				НовТовар = ДокументСтатуса.ДоставленныеТовары.Добавить();
				СтрокиТовара = ТЗТоваров.НайтиСтроки(Новый Структура("КодНоменклатуры", ТекТовар.goodsId));
				ДанныеТовара = СтрокиТовара[0];
				
				НовТовар.Номенклатура = ДанныеТовара.Номенклатура;
				НовТовар.КоличествоДоставлено = ТекТовар.count;
				НовТовар.КодМаркировки = ТекТовар.markingCode;
			КонецЦикла;	
			
			
			ДокументСтатуса.Записать(РежимЗаписиДокумента.Запись);
			МассивНомеров.Добавить(СокрЛП(ДокументСтатуса.Номер));
			Попытка
				ДокументСтатуса.Записать(РежимЗаписиДокумента.Проведение);
			исключение
				СписокПолучателей = Новый Массив;
				//СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
				СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//проблема со статусами рейса Рейс 000209825 от 11.01.2021 13:54:48
		//Если СокрЛП(УзелМП.Код) <> "23284bd0-23cb-547a-be00-634707e4e29e" Тогда
			
				Отпр = lem.ОтправитьСообщение(СписокПолучателей, "Ошибка при проведении  " + ДокументСтатуса.Ссылка, ОписаниеОшибки() , , "Логистическая компания ""Стриж""");	
				//+Степанов Задача Задача № 3595
				pkv.ДобавитьВСписокОтложенногоПроведения(ДокументСтатуса.Ссылка,ОписаниеОшибки());
		//КонецЕсли;
				//-Степанов Задача № 3595
			КонецПопытки;	
		КонецЦикла;	
	исключение                 
		лОписаниеОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("result", Ложь);
		СтруктураОтвета.Вставить("error", истина);
		СтруктураОтвета.Вставить("errorText", лОписаниеОшибки);
		
		СписокПолучателей = Новый Массив;
		СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		
		//проблема со статусами рейса Рейс 000209825 от 11.01.2021 13:54:48
		//Если СокрЛП(УзелМП.Код) <> "23284bd0-23cb-547a-be00-634707e4e29e" Тогда
			
			lem.ОтправитьСообщение(СписокПолучателей, "Ошибка при отработке ЗафиксироватьСтатусыМП()", лОписаниеОшибки , , "Логистическая компания ""Стриж""");
		//КонецЕсли;
		Возврат СтруктураОтвета;
	конецПопытки;
	
	СтруктураОтвета.Вставить("result", Истина);
	СтруктураОтвета.Вставить("error", Ложь);
	СтруктураОтвета.Вставить("numbers", МассивНомеров);
	
	Возврат СтруктураОтвета;
КонецФункции	

Функция ВыгрузитьСведенияПоПоставшикамТоваров(IDУзла) Экспорт
	УзелМП = lem.ПолучитьУзелПланаОбмена(IDУзла);
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПоставщикиТоваровИзменения.Ссылка.Код КАК id,
	|	ПоставщикиТоваровИзменения.Ссылка.Наименование КАК name,
	|	ПоставщикиТоваровИзменения.Ссылка.ИНН КАК inn,
	|	ПоставщикиТоваровИзменения.Ссылка.Телефон КАК phoneNumber
	|ИЗ
	|	Справочник.ПоставщикиТоваров.Изменения КАК ПоставщикиТоваровИзменения
	|ГДЕ
	|	ПоставщикиТоваровИзменения.Узел = &Узел";
	Зап.УстановитьПараметр("Узел", УзелМП);
	РезультатПоставщики = Зап.Выполнить();
	ВыборкаПоставщиков = РезультатПоставщики.Выбрать();
	
	
	МассивПоставщиков = Новый Массив;
	Пока ВыборкаПоставщиков.Следующий() Цикл
		СтруктураПоставщика = Новый Структура;
		Для каждого ТекКолонка Из РезультатПоставщики.Колонки Цикл
			СтруктураПоставщика.Вставить(ТекКолонка.Имя, ВыборкаПоставщиков[ТекКолонка.Имя]);
		КонецЦикла;	
		МассивПоставщиков.Добавить(СтруктураПоставщика);
	КонецЦикла;	
	
	
	
	Возврат МассивПоставщиков;
КонецФункции	


Функция ПолучитьСодержимоеСтраницыМаршрутизации(IDУзла) Экспорт
	УзелМП = lem.ПолучитьУзелПланаОбмена(IDУзла);
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних.ВерсияСтраницыМаршрутизацииМП.Наименование КАК routeMapVersion,
	            |	ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних.ВерсияСтраницыМаршрутизацииМП.СодержимоеСтраницыМашрутизации КАК routeMapBody,
	            |	ЛОЖЬ КАК isEmpty
	            |ИЗ
	            |	РегистрСведений.ТекущаяВерсияСтраницыМаршрутизацииМП.СрезПоследних КАК ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних";
	//Зап.УстановитьПараметр("Узел", УзелМП);
	РезультатСтраница = Зап.Выполнить();
	ВыборкаСтраница = РезультатСтраница.Выбрать();
	
	СтруктураСтраница = Новый Структура;
	Если ВыборкаСтраница.Следующий() Тогда
		Для каждого ТекКолонка Из РезультатСтраница.Колонки Цикл
			СтруктураСтраница.Вставить(ТекКолонка.Имя, ВыборкаСтраница[ТекКолонка.Имя]);
		КонецЦикла;	
	Иначе
		СтруктураСтраница.Вставить("isEmpty", Истина);		
	КонецЕсли;	
	
	Возврат СтруктураСтраница;
КонецФункции

Функция УдалитьРегистрациюИзменений(ВходныеДанные) Экспорт
	Попытка
		
		СтруктураОтвета = Новый Структура;
		
		МассивНомеров = ВходныеДанные.numbers;
		УзелМП = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID); 
		ТипМетаданных = ВходныеДанные.typeMetadata;
		
		Если СтрЧислоВхождений(ТипМетаданных,"Справочник") > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|   ОбъектМетаданных.Ссылка
			|ИЗ
			|   " + ТипМетаданных + " КАК ОбъектМетаданных
			|ГДЕ
			|   ОбъектМетаданных.Код В (&Номера)";
			
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|   ОбъектМетаданных.Ссылка
			|ИЗ
			|   " + ТипМетаданных + " КАК ОбъектМетаданных
			|ГДЕ
			|   ОбъектМетаданных.Номер В (&Номера)";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номера", МассивНомеров);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелМП, ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	исключение
		лОписаниеОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("result", Ложь);
		СтруктураОтвета.Вставить("error", истина);
		СтруктураОтвета.Вставить("errorText", лОписаниеОшибки);
		
		СписокПолучателей = Новый Массив;
		СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		
		lem.ОтправитьСообщение(СписокПолучателей, "Ошибка при отработке УдалитьРегистрациюИзменений()", лОписаниеОшибки , , "Логистическая компания ""Стриж""");
		Возврат СтруктураОтвета;
	конецПопытки;
	
	
	СтруктураОтвета.Вставить("result", Истина);
	СтруктураОтвета.Вставить("error", Ложь);
	
	Возврат СтруктураОтвета;
КонецФункции	

//Асеев 01.10.2020 (Задача № 4285)>>>
Функция ЗаписатьТранзакцииСБП(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура;
	
	Попытка
		
		УзелМП = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);
		МассивТранзакций = ВходныеДанные.arrayOfTransactionQPS;
		
		ТаблицаТранзакций = Новый ТаблицаЗначений;
		КолонкиТаблицы = ТаблицаТранзакций.Колонки;
		КолонкиТаблицы.Добавить("Заказ", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11));
		КолонкиТаблицы.Добавить("ЭтапПроцессаОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ЭтапыПроцессаОплатыСБП"));
		КолонкиТаблицы.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КолонкиТаблицы.Добавить("Организация", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9));
		КолонкиТаблицы.Добавить("КодСообщения", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
		КолонкиТаблицы.Добавить("Сообщение", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
		КолонкиТаблицы.Добавить("qrID", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
		КолонкиТаблицы.Добавить("qrUrl", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
		КолонкиТаблицы.Добавить("ДатаТранзакции", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		КолонкиТаблицы.Добавить("ИдентификаторТранзакции", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(20));
		КолонкиТаблицы.Добавить("СтатусПлатежа", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПлатежаСБП"));
		КолонкиТаблицы.Добавить("Период", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		
		Для Каждого Транзакция Из МассивТранзакций Цикл
			СтрокаТаблицы = ТаблицаТранзакций.Добавить();
			СтрокаТаблицы.Заказ = Транзакция.order;
			
			СтрокаТаблицы.ЭтапПроцессаОплаты = Перечисления.ЭтапыПроцессаОплатыСБП[Транзакция.stagePaymentProcess];
			
			СтрокаТаблицы.Сумма = Транзакция.total;
			СтрокаТаблицы.Организация = Транзакция.Organization;
			СтрокаТаблицы.КодСообщения = Транзакция.code;
			СтрокаТаблицы.Сообщение = Транзакция.message;
			СтрокаТаблицы.qrID = Транзакция.qrID;
			СтрокаТаблицы.qrUrl = Транзакция.qrUrl;
			СтрокаТаблицы.ДатаТранзакции = Транзакция.transactionDate;
			СтрокаТаблицы.ИдентификаторТранзакции = Транзакция.transactionId;
			
			Если ЗначениеЗаполнено(Транзакция.paymentStatus) Тогда
				СтрокаТаблицы.СтатусПлатежа = Перечисления.СтатусыПлатежаСБП[Транзакция.paymentStatus];
			КонецеСлИ;	
			
			СтрокаТаблицы.Период = Транзакция.period;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаТранзакций", ТаблицаТранзакций);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТранзакций.Заказ КАК Заказ,
		|	ТаблицаТранзакций.ЭтапПроцессаОплаты КАК ЭтапПроцессаОплаты,
		|	ТаблицаТранзакций.Сумма КАК Сумма,
		|	ТаблицаТранзакций.Организация КАК Организация,
		|	ТаблицаТранзакций.КодСообщения КАК КодСообщения,
		|	ТаблицаТранзакций.Сообщение КАК Сообщение,
		|	ТаблицаТранзакций.qrID КАК qrID,
		|	ТаблицаТранзакций.qrUrl КАК qrUrl,
		|	ТаблицаТранзакций.ДатаТранзакции КАК ДатаТранзакции,
		|	ТаблицаТранзакций.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
		|	ТаблицаТранзакций.СтатусПлатежа КАК СтатусПлатежа,
		|	ТаблицаТранзакций.Период КАК Период
		|ПОМЕСТИТЬ ВТ_Транзакции
		|ИЗ
		|	&ТаблицаТранзакций КАК ТаблицаТранзакций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	ВТ_Транзакции.ЭтапПроцессаОплаты КАК ЭтапПроцессаОплаты,
		|	ВТ_Транзакции.Сумма КАК Сумма,
		|	Организации.Ссылка КАК Организация,
		|	ВТ_Транзакции.КодСообщения КАК КодСообщения,
		|	ВТ_Транзакции.Сообщение КАК Сообщение,
		|	ВТ_Транзакции.qrID КАК qrID,
		|	ВТ_Транзакции.qrUrl КАК qrUrl,
		|	ВТ_Транзакции.ДатаТранзакции КАК ДатаТранзакции,
		|	ВТ_Транзакции.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
		|	ВТ_Транзакции.СтатусПлатежа КАК СтатусПлатежа,
		|	ВТ_Транзакции.Период КАК Период
		|ИЗ
		|	ВТ_Транзакции КАК ВТ_Транзакции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТ_Транзакции.Заказ = РеализацияТоваровУслуг.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_Транзакции.Организация = Организации.Код";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаписьРегистра = РегистрыСведений.ТранзакцииСБП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
			ЗаписьРегистра.УзелМП = УзелМП;
			ЗаписьРегистра.Записать();
			
		КонецЦикла;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("result", Ложь);
		СтруктураОтвета.Вставить("error", Истина);
		СтруктураОтвета.Вставить("errorText", ТекстОшибки);
		СписокПолучателей = Новый Массив;
		//СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
		СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		
		lem.ОтправитьСообщение(СписокПолучателей, "Ошибка при записи транзакций СБП", ОписаниеОшибки() , , "Логистическая компания ""Стриж""");
		Возврат СтруктураОтвета;
	КонецПопытки;
	
	СтруктураОтвета.Вставить("result", Истина);
	СтруктураОтвета.Вставить("error", Ложь);
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 01.10.2020 (Задача № 4285)<<<

//Асеев 02.10.2020 (Задача № 4287)>>>
Функция ПолучитьИнформированиеЭкипажейОбИзмененияхВЗаказах(ВходныеДанные) Экспорт
	
	НомерРейса = ВходныеДанные.routeId;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерРейса", НомерРейса);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.Период КАК period,
	|	ЕСТЬNULL(ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.Заказ.Номер, """") КАК order,
	|	ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.Реквизит КАК Реквизит,
	|	ЕСТЬNULL(ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.Транспорт.Код, """") КАК carId,
	|	ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.СтароеЗначение КАК oldValue,
	|	ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.НовоеЗначение КАК newValue,
	|	""ИзменениеЗафиксировано"" КАК changeStatus,
	|	ЕСТЬNULL(ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.УзелМП.Код, """") КАК IDMA
	|ИЗ
	|	РегистрСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах.СрезПоследних(, ) КАК ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних
	|ГДЕ
	|	ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.Рейс.Номер = &НомерРейса
	|	И ИнформированиеЭкипажейОбИзмененияхВЗаказахСрезПоследних.СтатусТрансляцииИзменения = ЗНАЧЕНИЕ(Перечисление.СтатусыТрансляцииИзмененийВЗаказах.ИзменениеЗафиксировано)";
	
	МассивИзмененийПоЗаказам = Новый Массив;
	
	Реквизит_ЗначенияПеречисления = Метаданные.Перечисления.РеквизитыЗаказа.ЗначенияПеречисления;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураИзмененийПоЗаказу = Новый Структура("period,order,carId,oldValue,newValue,changeStatus,IDMA");
		ЗаполнитьЗначенияСвойств(СтруктураИзмененийПоЗаказу, Выборка);
		
		ИндексЗначенияПеречисления = Перечисления.РеквизитыЗаказа.Индекс(Выборка.Реквизит);
		СтруктураИзмененийПоЗаказу.Вставить("property", Реквизит_ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя);
		
		МассивИзмененийПоЗаказам.Добавить(СтруктураИзмененийПоЗаказу);
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("arrayOfChangesOrders", МассивИзмененийПоЗаказам);
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 02.10.2020 (Задача № 4287)<<<

//Асеев 07.10.2020 (Задача № 4291)>>>
Функция ЗаписатьИнформированиеЭкипажейОбИзмененияхВЗаказах(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура;
	
	Попытка
		
		УзелМП = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);
		СтатусТрансляцииИзменения = Перечисления.СтатусыТрансляцииИзмененийВЗаказах[ВходныеДанные.changeStatus];
		
		МассивИнформирования = ВходныеДанные.arrayOfChangesOrders;
		
		ТаблицаИнформирования = Новый ТаблицаЗначений;
		КолонкиТаблицы = ТаблицаИнформирования.Колонки;
		КолонкиТаблицы.Добавить("Рейс", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9));
		КолонкиТаблицы.Добавить("Заказ", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11));
		КолонкиТаблицы.Добавить("Реквизит", Новый ОписаниеТипов("ПеречислениеСсылка.РеквизитыЗаказа"));
		КолонкиТаблицы.Добавить("Транспорт", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(6));
		КолонкиТаблицы.Добавить("СтароеЗначение", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
		КолонкиТаблицы.Добавить("НовоеЗначение", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
		КолонкиТаблицы.Добавить("Период", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		
		Для Каждого Информирование Из МассивИнформирования Цикл
			СтрокаТаблицы = ТаблицаИнформирования.Добавить();
			СтрокаТаблицы.Рейс = Информирование.routeID;
			СтрокаТаблицы.Заказ = Информирование.order;
			
			СтрокаТаблицы.Реквизит = Перечисления.РеквизитыЗаказа[Информирование.property];
			
			СтрокаТаблицы.Транспорт = Информирование.carId;
			СтрокаТаблицы.СтароеЗначение = Информирование.oldValue;
			СтрокаТаблицы.НовоеЗначение = Информирование.newValue;
			СтрокаТаблицы.Период = Информирование.period;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИнформирования", ТаблицаИнформирования);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаИнформирования.Рейс КАК Рейс,
		|	ТаблицаИнформирования.Заказ КАК Заказ,
		|	ТаблицаИнформирования.Реквизит КАК Реквизит,
		|	ТаблицаИнформирования.Транспорт КАК Транспорт,
		|	ТаблицаИнформирования.СтароеЗначение КАК СтароеЗначение,
		|	ТаблицаИнформирования.НовоеЗначение КАК НовоеЗначение,
		|	ТаблицаИнформирования.Период КАК Период
		|ПОМЕСТИТЬ ВТ_Информирование
		|ИЗ
		|	&ТаблицаИнформирования КАК ТаблицаИнформирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т_Рейс.Ссылка КАК Рейс,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	ВТ_Информирование.Реквизит КАК Реквизит,
		|	новаТранспорт.Ссылка КАК Транспорт,
		|	ВТ_Информирование.СтароеЗначение КАК СтароеЗначение,
		|	ВТ_Информирование.НовоеЗначение КАК НовоеЗначение,
		|	ВТ_Информирование.Период КАК Период
		|ИЗ
		|	ВТ_Информирование КАК ВТ_Информирование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Т_Рейс
		|		ПО ВТ_Информирование.Рейс = Т_Рейс.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТ_Информирование.Заказ = РеализацияТоваровУслуг.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаТранспорт КАК новаТранспорт
		|		ПО ВТ_Информирование.Транспорт = новаТранспорт.Код";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаписьРегистра = РегистрыСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
			ЗаписьРегистра.СтатусТрансляцииИзменения = СтатусТрансляцииИзменения;
			ЗаписьРегистра.УзелМП = УзелМП;
			ЗаписьРегистра.Записать();
			
		КонецЦикла;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("result", Ложь);
		СтруктураОтвета.Вставить("error", Истина);
		СтруктураОтвета.Вставить("errorText", ТекстОшибки);
		
		Возврат СтруктураОтвета;
	КонецПопытки;
	
	СтруктураОтвета.Вставить("result", Истина);
	СтруктураОтвета.Вставить("error", Ложь);
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 07.10.2020 (Задача № 4291)<<<

//Асеев 24.09.2021 (Задача № 4679)>>>
Функция ЗаписатьТранзакцииAssist(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура;
	
	Попытка
		
		УзелМП = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);
		МассивТранзакций = ВходныеДанные.arrayOfTransactionAssist;
		
		ТаблицаТранзакций = Новый ТаблицаЗначений;
		КолонкиТаблицы = ТаблицаТранзакций.Колонки;
		КолонкиТаблицы.Добавить("Заказ", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11));
		КолонкиТаблицы.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КолонкиТаблицы.Добавить("Организация", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9));
		КолонкиТаблицы.Добавить("billnumber", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
		КолонкиТаблицы.Добавить("Оплачен", Новый ОписаниеТипов("Булево"));
		КолонкиТаблицы.Добавить("ДатаТранзакции", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		КолонкиТаблицы.Добавить("ТипОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2));
		КолонкиТаблицы.Добавить("merchant_id", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
		КолонкиТаблицы.Добавить("Рейс", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9));
		КолонкиТаблицы.Добавить("Водитель", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(6));
		КолонкиТаблицы.Добавить("Экспедитор", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9));
		КолонкиТаблицы.Добавить("Период", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		КолонкиТаблицы.Добавить("ТипОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОперацийAssist"));
		
		Для Каждого Транзакция Из МассивТранзакций Цикл
			СтрокаТаблицы = ТаблицаТранзакций.Добавить();
			СтрокаТаблицы.Заказ = Транзакция.order;
			СтрокаТаблицы.Сумма = Транзакция.total;
			СтрокаТаблицы.Организация = Транзакция.Organization;
			СтрокаТаблицы.billnumber = Транзакция.billnumber;
			СтрокаТаблицы.Оплачен = Транзакция.payed;
			СтрокаТаблицы.ДатаТранзакции = Транзакция.transactionDate;
			СтрокаТаблицы.ТипОплаты = Транзакция.PayType;
			СтрокаТаблицы.merchant_id = Транзакция.merchant_id;
			СтрокаТаблицы.Рейс = Транзакция.route;
			СтрокаТаблицы.Водитель = Транзакция.driverId;
			СтрокаТаблицы.Экспедитор = Транзакция.forwarderId;
			СтрокаТаблицы.Период = Транзакция.period;
			
			Если Транзакция.Свойство("OperationType") И Транзакция.OperationType <> "" Тогда
				СтрокаТаблицы.ТипОперации = Перечисления.ТипыОперацийAssist[Транзакция.OperationType];
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаТранзакций", ТаблицаТранзакций);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТранзакций.Заказ КАК Заказ,
		|	ТаблицаТранзакций.Сумма КАК Сумма,
		|	ТаблицаТранзакций.Организация КАК Организация,
		|	ТаблицаТранзакций.billnumber КАК billnumber,
		|	ТаблицаТранзакций.Оплачен КАК Оплачен,
		|	ТаблицаТранзакций.ДатаТранзакции КАК ДатаТранзакции,
		|	ТаблицаТранзакций.ТипОплаты КАК ТипОплаты,
		|	ТаблицаТранзакций.merchant_id КАК merchant_id,
		|	ТаблицаТранзакций.Рейс КАК Рейс,
		|	ТаблицаТранзакций.Водитель КАК Водитель,
		|	ТаблицаТранзакций.Экспедитор КАК Экспедитор,
		|	ТаблицаТранзакций.Период КАК Период,
		|	ТаблицаТранзакций.ТипОперации КАК ТипОперации
		|ПОМЕСТИТЬ ВТ_Транзакции
		|ИЗ
		|	&ТаблицаТранзакций КАК ТаблицаТранзакций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	ВТ_Транзакции.Сумма КАК Сумма,
		|	Организации.Ссылка КАК Организация,
		|	ВТ_Транзакции.billnumber КАК billnumber,
		|	ВТ_Транзакции.Оплачен КАК Оплачен,
		|	ВТ_Транзакции.ДатаТранзакции КАК ДатаТранзакции,
		|	ТипыОплат.Ссылка КАК ТипОплаты,
		|	ВТ_Транзакции.merchant_id КАК merchant_id,
		|	Т_Рейс.Ссылка КАК Рейс,
		|	ЕСТЬNULL(новаВодители.ФизЛицо, новаЭкспедиторы.ФизЛицо) КАК ФизЛицо,
		|	ВТ_Транзакции.Период КАК Период,
		|	ВТ_Транзакции.ТипОперации КАК ТипОперации
		|ИЗ
		|	ВТ_Транзакции КАК ВТ_Транзакции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТ_Транзакции.Заказ = РеализацияТоваровУслуг.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ВТ_Транзакции.Организация = Организации.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОплат КАК ТипыОплат
		|		ПО ВТ_Транзакции.ТипОплаты = ТипыОплат.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Т_Рейс
		|		ПО ВТ_Транзакции.Рейс = Т_Рейс.Номер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаВодители КАК новаВодители
		|		ПО ВТ_Транзакции.Водитель = новаВодители.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.новаЭкспедиторы КАК новаЭкспедиторы
		|		ПО ВТ_Транзакции.Экспедитор = новаЭкспедиторы.Код";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаписьРегистра = РегистрыСведений.ТранзакцииAssist.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
			ЗаписьРегистра.УзелМП = УзелМП;
			ЗаписьРегистра.Записать();
			
		КонецЦикла;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("result", Ложь);
		СтруктураОтвета.Вставить("error", Истина);
		СтруктураОтвета.Вставить("errorText", ТекстОшибки);
		СписокПолучателей = Новый Массив;
		//СписокПолучателей.Добавить("n.stepanov@strizh-logistic.ru");
		СписокПолучателей.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		
		lem.ОтправитьСообщение(СписокПолучателей, "Ошибка при записи транзакций Assist", ТекстОшибки , , "Логистическая компания ""Стриж""");
		Возврат СтруктураОтвета;
	КонецПопытки;
	
	СтруктураОтвета.Вставить("result", Истина);
	СтруктураОтвета.Вставить("error", Ложь);
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 24.09.2021 (Задача № 4679)<<<

//Асеев 13.07.2022 (Задача № 4847)>>>
Функция ПолучитьТекстЗапросаЯндексМаршрутизации(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура;
	
	Попытка
		
		НомерРейса = ВходныеДанные.tripId;
		
		ДокРейс = Документы.Рейс.НайтиПоНомеру(НомерРейса);
		
		МассивСтруктурЗаказов = Неопределено;
		Если ВходныеДанные.Свойство("orders") Тогда
			МассивСтруктурЗаказов = Новый Массив;
			Для Каждого Тек из ВходныеДанные.orders Цикл
				Струк = Новый Структура;
				Струк.Вставить("НомерЗаказа", Тек.strizhId);
				Струк.Вставить("ПорядокМаршрутизации", Тек.routeIndex);
				МассивСтруктурЗаказов.Добавить(Струк);
			КонецЦикла;	
		КонецЕсли;	
		
		УчитыватьПорядок = Ложь;
		Если ВходныеДанные.Свойство("useRouteIndex") Тогда
			УчитыватьПорядок = ВходныеДанные.useRouteIndex;
		КонецеСли;
		
		
		Если ЗначениеЗаполнено(ДокРейс) Тогда
			
			Обр = Обработки.СТРИЖ_ИнтеграцияЯндексМаршрутизация.Создать();
			ТекстЗапроса = Обр.ПолучитьТекстЗапроса_МаршрутизированиеЗаказовПоРейсу(НомерРейса, МассивСтруктурЗаказов, УчитыватьПорядок);
			
			СтруктураОтвета.Вставить("error", Ложь);
			СтруктураОтвета.Вставить("textQuery", ТекстЗапроса);
			
		Иначе
			СтруктураОтвета.Вставить("error", Истина);
			СтруктураОтвета.Вставить("errorText", "Рейс не найден");
		КонецЕсли;
		
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("error", Истина);
		СтруктураОтвета.Вставить("errorText", ТекстОшибки);
		
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 13.07.2022 (Задача № 4847)<<<
Функция ПоставитьЗадачуЯндексМаршрутизации(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура;
	
	Попытка
		
		НомерРейса = ВходныеДанные.tripId;
		
		ДокРейс = Документы.Рейс.НайтиПоНомеру(НомерРейса);
		
		МассивСтруктурЗаказов = Неопределено;
		Если ВходныеДанные.Свойство("orders") Тогда
			МассивСтруктурЗаказов = Новый Массив;
			Для Каждого Тек из ВходныеДанные.orders Цикл
				Струк = Новый Структура;
				Струк.Вставить("НомерЗаказа", Тек.strizhId);
				Струк.Вставить("ПорядокМаршрутизации", Тек.routeIndex);
				МассивСтруктурЗаказов.Добавить(Струк);
			КонецЦикла;	
		КонецЕсли;	
		
		УчитыватьПорядок = Ложь;
		Если ВходныеДанные.Свойство("useRouteIndex") Тогда
			УчитыватьПорядок = ВходныеДанные.useRouteIndex;
		КонецеСли;
		
		АдресТочкиВозвращения = Неопределено;
		Если ВходныеДанные.Свойство("pointReturnAddress") Тогда
			АдресТочкиВозвращения = ВходныеДанные.pointReturnAddress;
		КонецеСли;
		
		
		ДанныеТекущейТочки = Неопределено;
		Если ВходныеДанные.Свойство("currentPoint") Тогда
			ДанныеТекущейТочки = Новый Структура;
			ДанныеТекущейТочки.Вставить("Широта", ВходныеДанные.currentPoint.latitude);  
			ДанныеТекущейТочки.Вставить("Долгота", ВходныеДанные.currentPoint.longitude);
			Если ВходныеДанные.currentPoint.Свойство("startTime") Тогда
				ДанныеТекущейТочки.Вставить("ТекущееВремя", ВходныеДанные.currentPoint.startTime);
			Иначе
				ДанныеТекущейТочки.Вставить("ТекущееВремя", ТекущаяДата());
			КонецЕсли;	
		КонецеСли;
		ВремяСтарта = Неопределено;
		Если ВходныеДанные.Свойство("startTime") Тогда
			ВремяСтарта = ВходныеДанные.startTime;
		КонецЕсли;	
		Если ЗначениеЗаполнено(ДокРейс) Тогда
			
			Обр = Обработки.СТРИЖ_ИнтеграцияЯндексМаршрутизация.Создать();
			ИдЗадания = Обр.НачатьМаршрутизированиеЗаказовПоРейсу(НомерРейса, МассивСтруктурЗаказов, УчитыватьПорядок, ДанныеТекущейТочки, ВремяСтарта, АдресТочкиВозвращения);
			
			СтруктураОтвета.Вставить("error", Ложь);
			СтруктураОтвета.Вставить("idQuery", ИдЗадания);
			
		Иначе
			СтруктураОтвета.Вставить("error", Истина);
			СтруктураОтвета.Вставить("errorText", "Рейс не найден");
		КонецЕсли;
		
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("error", Истина);
		СтруктураОтвета.Вставить("errorText", ТекстОшибки);
		
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьРезультатЯндексМаршрутизации(ВходныеДанные, РеквизитыФиксацииМаршрутизации = Неопределено) Экспорт
	
	СтруктураОтвета = Новый Структура;
	
	Попытка
		
		идЗапроса = ВходныеДанные.idQuery;
		
		НомерРейса = ВходныеДанные.tripId;
		
		ДокРейс = Документы.Рейс.НайтиПоНомеру(НомерРейса);
		
		УзелМП = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);
		
		Обр = Обработки.СТРИЖ_ИнтеграцияЯндексМаршрутизация.Создать();
		ДанныеМаршрутизации = Обр.ПолучитьРезультатыМаршрутизированияЗаказовПоРейсу(идЗапроса);
		
		Если ТипЗнч(ДанныеМаршрутизации) = Тип("Булево") Тогда
			СтруктураОтвета.Вставить("error", Истина);
			СтруктураОтвета.Вставить("errorText", "Данные не получены");
		Иначе	
			СтруктураОтвета.Вставить("error", Ложь);
			СтруктураОтвета.Вставить("routing", ДанныеМаршрутизации.МассивТочек);
		КонецЕсли;	
		
		
		ЗаказыМаршрутизацияРезультат = Новый ТаблицаЗначений;
		ЗаказыМаршрутизацияРезультат.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		ЗаказыМаршрутизацияРезультат.Колонки.Добавить("ПорядокВРейсе", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4,0)));    
		ЗаказыМаршрутизацияРезультат.Колонки.Добавить("ВремяПрибытия", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Для Каждого Тек Из ДанныеМаршрутизации.МассивТочек Цикл
			Нов = ЗаказыМаршрутизацияРезультат.Добавить();
			Нов.НомерЗаказа = Тек.idStrizh;
			Нов.ПорядокВРейсе = Тек.routingOrder;
			Нов.ВремяПрибытия = Тек.timeOfArrival;
		КонецЦикла;	
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	Таб.НомерЗаказа КАК НомерЗаказа,
		            |	Таб.ПорядокВРейсе КАК ПорядокВРейсе,
		            |	Таб.ВремяПрибытия КАК ВремяПрибытия
		            |ПОМЕСТИТЬ ВТ
		            |ИЗ
		            |	&Таб КАК Таб
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ
		            |	ВТ.НомерЗаказа КАК НомерЗаказа,
		            |	ВТ.ПорядокВРейсе КАК ПорядокВРейсе,
		            |	ВТ.ВремяПрибытия КАК ВремяПрибытия,
		            |	РеализацияТоваровУслуг.Ссылка КАК Заказ
		            |ИЗ
		            |	ВТ КАК ВТ
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |		ПО ВТ.НомерЗаказа = РеализацияТоваровУслуг.Номер
		            |
		            |ОБЪЕДИНИТЬ ВСЕ
		            |
		            |ВЫБРАТЬ
		            |	ВТ.НомерЗаказа,
		            |	ВТ.ПорядокВРейсе,
		            |	ВТ.ВремяПрибытия,
		            |	ЗаборТовара.Ссылка
		            |ИЗ
		            |	ВТ КАК ВТ
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
		            |		ПО ВТ.НомерЗаказа = ЗаборТовара.Номер";
		Зап.УстановитьПараметр("Таб", ЗаказыМаршрутизацияРезультат);
		Выб = Зап.Выполнить().Выбрать();
		НовДок = Документы.ФиксацияМаршрутизацииРейса.СоздатьДокумент();
		НовДок.МП = УзелМП;
		НовДок.Рейс = ДокРейс;
		НовДок.ИдентификаторЗапросаЯндекс = идЗапроса;
		НовДок.Пробег = ДанныеМаршрутизации.ТЗМаршрутов.Итог("total_transit_distance_m");
		НовДок.ОбщееВремяМаршрута = ДанныеМаршрутизации.ТЗМаршрутов.Итог("total_duration_s");
		НовДок.ОбщееВремяДвижения = ДанныеМаршрутизации.ТЗМаршрутов.Итог("total_transit_duration_s");
		НовДок.ОбщееВремяОжидания = ДанныеМаршрутизации.ТЗМаршрутов.Итог("total_waiting_duration_s");
		НовДок.Дата = ТекущаяДата();
		НовДок.ЯндексМаршрутизацияМП = Истина;
		Если РеквизитыФиксацииМаршрутизации <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НовДок, РеквизитыФиксацииМаршрутизации);
		ИначеЕсли ВходныеДанные.Свойство("routeData") Тогда
			НовДок.ТипФинальнойТочкиМаршрута = ВходныеДанные.routeData.typeFinalPoint;
			НовДок.АдресФинальнойТочкиМаршрута = ВходныеДанные.routeData.addressFinalPoint;
			НовДок.ШиротаФинальнойТочкиМаршрута = ВходныеДанные.routeData.latFinalPoint;
			НовДок.ДолготаФинальнойТочкиМаршрута = ВходныеДанные.routeData.longFinalPoint;			
		КонецЕсли;
		
		Пока Выб.Следующий() Цикл
			Нов = НовДок.Заказы.Добавить();
			Нов.Заказ = Выб.Заказ;
			Нов.ПорядокМаршрутизации = Выб.ПорядокВРейсе;
			Нов.ВремяПрибытия = Выб.ВремяПрибытия;
		КонецЦикла;	
		//Если ВходныеДанные.Свойство("routeData") Тогда
		//	НовДок.ТипФинальнойТочкиМаршрута = ВходныеДанные.routeData.typeFinalPoint;
		//	НовДок.АдресФинальнойТочкиМаршрута = ВходныеДанные.routeData.addressFinalPoint;
		//	НовДок.ШиротаФинальнойТочкиМаршрута = ВходныеДанные.routeData.latFinalPoint;
		//	НовДок.ДолготаФинальнойТочкиМаршрута = ВходныеДанные.routeData.longFinalPoint;
		//КонецЕсли;	
		НовДок.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("error", Истина);
		СтруктураОтвета.Вставить("errorText", ТекстОшибки);
		
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ВыгрузитьДанныеРучнойМаршрутизацииМП(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("error", Ложь);
	
	Попытка
				
		НомерРейса = ВходныеДанные.tripId;
		
		ДокРейс = Документы.Рейс.НайтиПоНомеру(НомерРейса);
		
		УзелМП = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);
				
		
		ЗаказыМаршрутизацияРезультат = Новый ТаблицаЗначений;
		ЗаказыМаршрутизацияРезультат.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		ЗаказыМаршрутизацияРезультат.Колонки.Добавить("ПорядокВРейсе", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4,0)));    
		Для Каждого Тек Из ВходныеДанные.routing Цикл
			Нов = ЗаказыМаршрутизацияРезультат.Добавить();
			Нов.НомерЗаказа = Тек.Strizhid;
			Нов.ПорядокВРейсе = Тек.routeIndex;
		КонецЦикла;	
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	Таб.НомерЗаказа КАК НомерЗаказа,
		            |	Таб.ПорядокВРейсе КАК ПорядокВРейсе
		            |ПОМЕСТИТЬ ВТ
		            |ИЗ
		            |	&Таб КАК Таб
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ
		            |	ВТ.НомерЗаказа КАК НомерЗаказа,
		            |	ВТ.ПорядокВРейсе КАК ПорядокВРейсе,
		            |	РеализацияТоваровУслуг.Ссылка КАК Заказ
		            |ИЗ
		            |	ВТ КАК ВТ
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		            |		ПО ВТ.НомерЗаказа = РеализацияТоваровУслуг.Номер
		            |
		            |ОБЪЕДИНИТЬ ВСЕ
		            |
		            |ВЫБРАТЬ
		            |	ВТ.НомерЗаказа,
		            |	ВТ.ПорядокВРейсе,
		            |	ЗаборТовара.Ссылка
		            |ИЗ
		            |	ВТ КАК ВТ
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
		            |		ПО ВТ.НомерЗаказа = ЗаборТовара.Номер";
		Зап.УстановитьПараметр("Таб", ЗаказыМаршрутизацияРезультат);
		Выб = Зап.Выполнить().Выбрать();
		НовДок = Документы.ФиксацияМаршрутизацииРейса.СоздатьДокумент();
		НовДок.МП = УзелМП;
		НовДок.Рейс = ДокРейс;
		НовДок.Дата = ТекущаяДата();
		НовДок.РучнаяМаршрутизацияМП = Истина;
		
		Пока Выб.Следующий() Цикл
			Нов = НовДок.Заказы.Добавить();
			Нов.Заказ = Выб.Заказ;
			Нов.ПорядокМаршрутизации = Выб.ПорядокВРейсе;
		КонецЦикла;	
		
		НовДок.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("error", Истина);
		СтруктураОтвета.Вставить("errorText", ТекстОшибки);
		
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

//Асеев 14.09.2022 (Задача № 4897)>>>
Функция ПолучитьКоординатыАдреса(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура;
	
	Попытка
		
		Адрес = ВходныеДанные.address;
		
		ОбъектПоискаАдреса = Обработки.новаПоискАдреса.Создать();
		ОбъектПоискаАдреса.ОбластьПоискаКлассификатор = Ложь;
		ОбъектПоискаАдреса.ОбластьПоискаЯндекс = Истина;
		
		тзАдреса = ОбъектПоискаАдреса.ПолучитьТаблицуАдресов(Адрес);
		Если тзАдреса = Неопределено Или Не тзАдреса.Количество() Тогда
			СтруктураОтвета.Вставить("error", Истина);
			СтруктураОтвета.Вставить("errorText", "Адрес не распознан");
		Иначе
			СтрокаАдреса = тзАдреса[0];
			
			СтруктураОтвета.Вставить("error", Ложь);
			СтруктураОтвета.Вставить("location", Новый Структура("lat,long,addressLocation", СтрокаАдреса.Широта, СтрокаАдреса.Долгота, СтрокаАдреса.Наименование));
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.Вставить("error", Истина);
		СтруктураОтвета.Вставить("errorText", ТекстОшибки);
		
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 14.09.2022 (Задача № 4897)<<<

//Асеев 08.08.2023 (Задача № 5093)>>>
Функция ПолучитьКалендариДоставки(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура("result", Новый Структура("arrayOfCalendars,error,errorText", Неопределено, Ложь));
	
	Попытка
		УзелМП = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Узел", УзелМП);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КалендариДоставки.Ссылка КАК Ссылка,
		|	КалендариДоставки.Код КАК id,
		|	КалендариДоставки.Наименование КАК name,
		|	КалендариДоставки.ДнейСМоментаПоступления КАК countOfDays,
		|	КалендариДоставки.ПометкаУдаления КАК isDeleted,
		|	КалендариДоставкиДниДоставки.ДеньНедели.Порядок + 1 КАК day
		|ИЗ
		|	Справочник.КалендариДоставки.Изменения КАК КалендариДоставкиИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КалендариДоставки КАК КалендариДоставки
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендариДоставки.ДниДоставки КАК КалендариДоставкиДниДоставки
		|			ПО КалендариДоставки.Ссылка = КалендариДоставкиДниДоставки.Ссылка
		|		ПО (КалендариДоставкиИзменения.Узел = &Узел)
		|			И КалендариДоставкиИзменения.Ссылка = КалендариДоставки.Ссылка
		|ИТОГИ ПО
		|	Ссылка";
		
		МассивКалендарей = Новый Массив;
		ШаблонКалендаря = Новый ФиксированнаяСтруктура("id,name,countOfDays,isDeleted,days");
		
		ВыборкаКалендарь = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКалендарь.Следующий() Цикл
			СтруктураКалендаря = Новый Структура(ШаблонКалендаря);
			ЗаполнятьСтруктуру = Истина;
			МассивДней = Новый Массив;
			Выборка = ВыборкаКалендарь.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗаполнятьСтруктуру Тогда
					ЗаполнятьСтруктуру = Ложь;
					ЗаполнитьЗначенияСвойств(СтруктураКалендаря, Выборка);
				КонецЕсли;
				Если Выборка.day <> Null Тогда
					МассивДней.Добавить(Выборка.day);
				КонецЕсли;
			КонецЦикла;
			СтруктураКалендаря.days = МассивДней;
			МассивКалендарей.Добавить(СтруктураКалендаря);
		КонецЦикла;
		
		СтруктураОтвета.result.arrayOfCalendars = МассивКалендарей;
		
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		СтруктураОтвета.result.error = Истина;
		СтруктураОтвета.result.errorText = лОписаниеОшибки;
		
		Возврат СтруктураОтвета;
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 08.08.2023 (Задача № 5093)<<<
#КонецОбласти

//Асеев 23.03.2021 (Задача № 4503)>>>
Процедура ЭмуляцияДанныеЗаказаВодителя(ПараметрыДокумента) Экспорт
	
	Док = Документы.ДанныеЗаказаВодителя.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Док, ПараметрыДокумента);
	Док.УстановитьНовыйНомер();
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры
//Асеев 23.03.2021 (Задача № 4503)<<<

//Асеев 28.12.2023 (Задача № 5199)>>>
Функция ПолучитьКодДоступаРабочегоМестаМаршрутизации(ВходныеДанные) Экспорт
	
	СтруктураОтвета = Новый Структура("result", Новый Структура("code,error,errorText", Неопределено, Ложь));
	
	Сейчас = ТекущаяДата();
	
	Попытка
		
		КодТерминала = ВходныеДанные.regionId;
		НомерРейса = ВходныеДанные.idRoute;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КодТерминала", Число(КодТерминала));
		Запрос.УстановитьПараметр("НомерРейса", НомерРейса);
		Запрос.УстановитьПараметр("ГраницаКодов", Сейчас - 60);
		Запрос.УстановитьПараметр("Сегодня", НачалоДня(Сейчас));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Рейс.Ссылка КАК Рейс
		|ПОМЕСТИТЬ ВТ_Рейс
		|ИЗ
		|	Документ.Рейс КАК Рейс
		|ГДЕ
		|	Рейс.Номер = &НомерРейса
		|	И Рейс.ТерминалДоставки.Код = &КодТерминала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Рейс.Рейс КАК Рейс,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_Рейс.Рейс.Проведен
		|			ТОГДА ""Рейс не проведен!""
		|		КОГДА РейсЗаказы.Ссылка ЕСТЬ NULL
		|			ТОГДА ""В рейсе отсутствуют заказы!""
		|		КОГДА ВТ_Рейс.Рейс.ДатаРейса < &Сегодня
		|			ТОГДА ""Выбран рейс с прошлой датой доставки!""
		|		КОГДА НЕ КодыДоступаКФункционалуМашрутизацииСрезПоследних.КодДоступаИспользован ЕСТЬ NULL
		|			ТОГДА ""Предыдущий код был запрошен менее, чем минуту назад, подождите!""
		|	КОНЕЦ КАК Ошибка
		|ИЗ
		|	ВТ_Рейс КАК ВТ_Рейс
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
		|		ПО ВТ_Рейс.Рейс = РейсЗаказы.Ссылка
		|			И (РейсЗаказы.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыДоступаКФункционалуМашрутизации.СрезПоследних(
		|				,
		|				Рейс В
		|					(ВЫБРАТЬ
		|						ВТ_Рейс.Рейс КАК Рейс
		|					ИЗ
		|						ВТ_Рейс КАК ВТ_Рейс)) КАК КодыДоступаКФункционалуМашрутизацииСрезПоследних
		|		ПО (НЕ КодыДоступаКФункционалуМашрутизацииСрезПоследних.КодДоступаИспользован)
		|			И (КодыДоступаКФункционалуМашрутизацииСрезПоследних.Период > &ГраницаКодов)";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СтруктураОтвета.result.error = Истина;
			СтруктураОтвета.result.errorText = "Рейс не найден!";
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.Ошибка = Null Тогда
				
				УзелМП = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);
				
				КодДоступа = Формат((Число(НомерРейса) * 23 + 7) % 100000, "ЧЦ=5; ЧВН=; ЧГ=");
				
				ЗаписьРегистра = РегистрыСведений.КодыДоступаКФункционалуМашрутизации.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.Период = Сейчас;
				ЗаписьРегистра.Рейс = Выборка.Рейс;
				ЗаписьРегистра.КодДоступа = КодДоступа;
				ЗаписьРегистра.УзелМП = УзелМП;
				ЗаписьРегистра.Записать();
				
				СтруктураОтвета.result.code = КодДоступа;
				
			Иначе
				СтруктураОтвета.result.error = Истина;
				СтруктураОтвета.result.errorText = Выборка.Ошибка;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		СтруктураОтвета.result.error = Истина;
		СтруктураОтвета.result.errorText = лОписаниеОшибки;
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции
//Асеев 28.12.2023 (Задача № 5199)<<<

#Область ПрограммныйИнтерфейс
Функция ПолучитьСписокIPСерверовОбмена() Экспорт
	СтруктураОтвета = Новый Структура("result", Новый Структура("arrayOfIPs,error,errorText", Неопределено, Ложь));
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МассивАдресовДляОбменаСМП.Терминал.Код КАК regionID,
	|	МассивАдресовДляОбменаСМП.Адрес КАК address,
	|	МассивАдресовДляОбменаСМП.Приоритет КАК priority
	|ИЗ
	|	РегистрСведений.МассивАдресовДляОбменаСМП КАК МассивАдресовДляОбменаСМП";
	
	
	ШаблонСтруктурыАдреса = Новый ФиксированнаяСтруктура("regionID, address, priority");
	МассивСтруктур = Новый Массив;
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		СтруктураАдреса = Новый Структура(ШаблонСтруктурыАдреса);
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, Выб);
		МассивСтруктур.Добавить(СтруктураАдреса);
	КонецЦикла;
	СтруктураОтвета.result.arrayOfIPs = МассивСтруктур;
	Возврат СтруктураОтвета;	
КонецФункции	

Функция ПолучитьСписокРегионов(ВходныеДанные) Экспорт
	СтруктураОтвета = Новый Структура("result", Новый Структура("arrayOfRegions,error,errorText", Неопределено, Ложь));
	УзелПО = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);


	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РегиональныеТерминалыИзменения.Ссылка.Код КАК code,
	|	РегиональныеТерминалыИзменения.Ссылка.Наименование КАК name,
	|	РегиональныеТерминалыИзменения.Ссылка.НачальнаяШиротаЗоны КАК minLat,
	|	РегиональныеТерминалыИзменения.Ссылка.НачальнаяДолготаЗоны КАК minLong,
	|	РегиональныеТерминалыИзменения.Ссылка.КонечнаяШиротаЗоны КАК maxLat,
	|	РегиональныеТерминалыИзменения.Ссылка.КонечнаяДолготаЗоны КАК maxLong,
	|	РегиональныеТерминалыИзменения.Ссылка.ксАдресСервера КАК cashServerAdress,
	|	РегиональныеТерминалыИзменения.Ссылка.ксИмяПользователя КАК cashUserName,
	|	РегиональныеТерминалыИзменения.Ссылка.ксПарольПользователя КАК cashUserPassword,
	|	РегиональныеТерминалыИзменения.Ссылка.НомерТелефонаСтаршегоЛогиста КАК phoneNumberSeniorLogist,
	|	РегиональныеТерминалыИзменения.Ссылка.РежимПечатиЧековРМЭкипажа КАК checkPrintingMode,
	|	РегиональныеТерминалыИзменения.Ссылка.НачалоИнтервалаДоставкиВОбласти КАК startOfDeliveryIntervalInTheArea,
	|	РегиональныеТерминалыИзменения.Ссылка.ОкончаниеИнтервалаДоставкиВОбласти КАК endOfDeliveryIntervalInTheArea,
	|	РегиональныеТерминалыИзменения.Ссылка.ШиротаЦентраЗоны КАК latCenterZone,
	|	РегиональныеТерминалыИзменения.Ссылка.ДолготаЦентраЗоны КАК longCenterZone
	|ИЗ
	|	Справочник.РегиональныеТерминалы.Изменения КАК РегиональныеТерминалыИзменения
	|ГДЕ
	|	РегиональныеТерминалыИзменения.Узел.Ссылка = &Узел";
	Зап.УстановитьПараметр("Узел", УзелПО.ссылка);
	
	ШаблонСтруктура = Новый ФиксированнаяСтруктура("code, name, minLat, minLong, maxLat, maxLong, cashServerAdress, cashUserName, cashUserPassword, phoneNumberSeniorLogist, checkPrintingMode, startOfDeliveryIntervalInTheArea, endOfDeliveryIntervalInTheArea, latCenterZone, longCenterZone");
	МассивСтруктур = Новый Массив;
	
	Выб = Зап.Выполнить().Выбрать();
 
	Пока Выб.Следующий() Цикл
		СтрокаСтруктура  = Новый Структура(ШаблонСтруктура); 
		ЗаполнитьЗначенияСвойств(СтрокаСтруктура, Выб);
		
			Если ЗначениеЗаполнено(Выб.checkPrintingMode) Тогда
				ИндексЗначенияПеречисления = Перечисления.ВариантыПечатиЧековРМЭкипажа.Индекс(Выб.checkPrintingMode);
				СтрокаСтруктура.checkPrintingMode = Метаданные.Перечисления.ВариантыПечатиЧековРМЭкипажа.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
			Иначе
				СтрокаСтруктура.checkPrintingMode = "";
			КонецеСли;	
		
		
		МассивСтруктур.Добавить(СтрокаСтруктура);
	КонецЦикла;	
	СтруктураОтвета.result.arrayOfRegions = МассивСтруктур;
    Возврат СтруктураОтвета;
КонецФункции


// Получить список типов прикрепленных документов.
// 
// Параметры:
//   Структура ВходныеДанные Входные данные: 
// 		ID - Строка
// Возвращаемое значение:
//  Структура - Получить список типов прикрепленных документов:
// * result - Структура - :
// ** arrayOfTypesAttachedDocs - Неопределено - 
// ** error - Булево - 
// ** errorText - Строка
Функция ПолучитьСписокТиповПрикрепленныхДокументов(ВходныеДанные) Экспорт
	СтруктураОтвета = Новый Структура("result", Новый Структура("arrayOfTypesAttachedDocs,error,errorText", Неопределено, Ложь));
	УзелПО = lem.ПолучитьУзелПланаОбмена(ВходныеДанные.ID);
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТипыПрикрепленныхДокументовИзменения.Ссылка.Код КАК id,
	            |	ТипыПрикрепленныхДокументовИзменения.Ссылка.Наименование КАК name,
	            |	ТипыПрикрепленныхДокументовИзменения.Ссылка.ДоступенВыборВМП КАК enabledForMA,
				|	ТипыПрикрепленныхДокументовИзменения.Ссылка.ПрефиксИмениФайла КАК filePrefix,
				|	ТипыПрикрепленныхДокументовИзменения.Ссылка.КачествоФото КАК photoQuality,				
				|	ТипыПрикрепленныхДокументовИзменения.Ссылка.ЧерноБелоеФото КАК blackAndWhitePhoto,				
				|	ТипыПрикрепленныхДокументовИзменения.Ссылка.ОтметкаНаФотоснимке КАК photoMark,				
	            |	ТипыПрикрепленныхДокументовИзменения.Ссылка.ДоступностьПоТипамЗаказов.(
	            |		Ссылка КАК СсылкаСсылка,
	            |		НомерСтроки КАК СсылкаНомерСтроки,
	            |		ТипЗаказа КАК orderType,
	            |		Доступен КАК available
	            |	) КАК Ссылка
	            |ИЗ
	            |	Справочник.ТипыПрикрепленныхДокументов.Изменения КАК ТипыПрикрепленныхДокументовИзменения
	            |ГДЕ
	            |	ТипыПрикрепленныхДокументовИзменения.Узел = &Узел
	            |	И ТипыПрикрепленныхДокументовИзменения.Ссылка.ЭтоГруппа = ЛОЖЬ";
	Зап.УстановитьПараметр("Узел", УзелПО);
	Выб = Зап.Выполнить().Выбрать();
	
	
	ШаблонСтруктура = Новый ФиксированнаяСтруктура("id,name,enabledForMA,filePrefix,photoQuality,blackAndWhitePhoto,photoMark,availability");
	ШаблонСтруктураДоступность = Новый ФиксированнаяСтруктура("orderType, available");
	
	МассивСтруктур = Новый Массив;
 	
	КачествоФотоПоУмолчанию = Константы.КачествоФотоснимкаМПЭкипажейПоУмолчанию.Получить();
	Если КачествоФотоПоУмолчанию = 0 Тогда
		КачествоФотоПоУмолчанию = 60;
	КонецеСли;	
	
	Пока Выб.Следующий() Цикл

		СтруктураТипДокумента = Новый Структура(ШаблонСтруктура);
		ЗаполнитьЗначенияСвойств(СтруктураТипДокумента, Выб);
		
		Если Не ЗначениеЗаполнено(СтруктураТипДокумента.photoQuality) Тогда
			СтруктураТипДокумента.photoQuality = КачествоФотоПоУмолчанию;
		КонецеСли;	
		
		МассивСтруктурДоступности = Новый Массив;
		
		ВыбСтрок = Выб.Ссылка.Выбрать();
		Пока ВыбСтрок.Следующий() Цикл
			СтруктураДоступность= Новый Структура(ШаблонСтруктураДоступность);
			ЗаполнитьЗначенияСвойств(СтруктураДоступность, ВыбСтрок);
			
			ИндексЗначенияПеречисления = Перечисления.ТипыЗаказов.Индекс(ВыбСтрок.orderType);
			СтруктураДоступность.orderType = Метаданные.Перечисления.ТипыЗаказов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
			
			МассивСтруктурДоступности.Добавить(СтруктураДоступность);
		КонецЦикла;
		СтруктураТипДокумента.availability = МассивСтруктурДоступности;
		МассивСтруктур.Добавить(СтруктураТипДокумента);
	КонецЦикла;	
	СтруктураОтвета.result.arrayOfTypesAttachedDocs = МассивСтруктур;
	Возврат СтруктураОтвета;
КонецФункции

// Выгрузить прикрепленные документы.
// 
// Параметры:
//   Структура ВходныеДанные Входные данные: 
// 		ID - Строка
// 		arrayOfAttachedDocs - Массив
// Возвращаемое значение:
//  Структура - Выгрузить прикрепленные документы:
// * result - Структура - :
// ** error - Булево - 
// ** errorText - Строка 
Функция ВыгрузитьПрикрепленныеДокументы(ВходныеДанные) Экспорт
	// Вставить содержимое обработчика.
	Попытка
		СтруктураОтвета = Новый Структура("result", Новый Структура("error,errorText", Ложь));
		
		Узел = ПланыОбмена.ИзмененияДляМП.НайтиПоКоду(ВходныеДанные.ID);
		
		МассивФайлов = ВходныеДанные.arrayOfAttachedDocs;
			
		ТабЗаказов = Новый ТаблицаЗначений;
		ТабЗаказов.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		ТабЗаказов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(11)));
		ТабЗаказов.Колонки.Добавить("name", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
		ТабЗаказов.Колонки.Добавить("nameExt", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		ТабЗаказов.Колонки.Добавить("id", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(11)));
		ТабЗаказов.Колонки.Добавить("createDate", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(частидаты.ДатаВремя)));
		
		ТабЗаборов = Новый ТаблицаЗначений;
		ТабЗаборов.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
		ТабЗаборов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(11)));
		ТабЗаборов.Колонки.Добавить("name", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
		ТабЗаборов.Колонки.Добавить("nameExt", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		ТабЗаборов.Колонки.Добавить("id", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(11)));
		ТабЗаборов.Колонки.Добавить("createDate", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(частидаты.ДатаВремя)));
		
		Для Каждого ТекФайл Из МассивФайлов Цикл

			ТипЗаказа = "";
			Если ТекФайл.Получить("orderType") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ТекФайл.orderType) Тогда	
					ИндексЗначенияПеречисления = Перечисления.ТипыЗаказов.Индекс(ТекФайл.orderType);
					ТипЗаказа = Метаданные.Перечисления.ТипыЗаказов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
				Иначе
					ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;	
				КонецеСли;		
					
			Иначе	
				ТипЗаказа = Перечисления.ТипыЗаказов.Доставка;
			КонецЕсли;	
			
			Если ТипЗаказа = Перечисления.ТипыЗаказов.Доставка Тогда
				Нов = ТабЗаказов.Добавить();
			Иначе
				Нов = ТабЗаборов.Добавить();
			КонецеСли;	
			Нов.НомерЗаказа = СокрЛП(ТекФайл.orderId);
			Нов.ТипДокумента = Число(ТекФайл.typeDoc);
			Нов.name = СокрЛП(ТекФайл.name);
			Нов.nameExt = СокрЛП(ТекФайл.nameExt);
			Нов.id = ТекФайл.id;
			Нов.createDate = ТекФайл.createDate;
		КонецЦикла;	
		
		//заказы
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	Таб.НомерЗаказа КАК НомерЗаказа,
		|	Таб.ТипДокумента КАК ТипДокумента,
		|	Таб.name КАК name,
		|	Таб.nameExt КАК nameExt,
		|	Таб.id КАК id,
		|	Таб.createDate КАК createDate
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.НомерЗаказа КАК НомерЗаказа,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	ТипыПрикрепленныхДокументов.Ссылка КАК ТипДокумента,
		|	ВТ_Заказы.name КАК name,
		|	ВТ_Заказы.nameExt КАК nameExt,
		|	ВТ_Заказы.id КАК id,
		|	ВТ_Заказы.createDate КАК createDate		
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТ_Заказы.НомерЗаказа = РеализацияТоваровУслуг.Номер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыПрикрепленныхДокументов КАК ТипыПрикрепленныхДокументов
		|		ПО ВТ_Заказы.ТипДокумента = ТипыПрикрепленныхДокументов.Код";
		Зап.УстановитьПараметр("Таб", ТабЗаказов);
		
		ТабДанных = Зап.Выполнить().Выгрузить();
		
		Для Каждого Тек Из ТабДанных Цикл
			//РаботаСПрикрепленнымиФайламиСервер.ЗаписатьВыбранныйФайлМПВБД(Тек.name, Тек.nameExt, Тек.data, ТабДанных.Найти(СокрЛП(Тек.orderId)).ТипДокумента, ТабДанных.Найти(СокрЛП(Тек.orderId)).Заказ, Тек.id, Узел, Тек.createDate, Перечисления.ТипыЗаказов.Доставка); 
			ДанныеМП = "";
			Для Сч = 0 По МассивФайлов.attachedDocs.Количество() - 1 Цикл
				Файл = МассивФайлов.attachedDocs[Сч];
				Если Файл.id = Тек.id Тогда
					ДанныеМП = Файл.data;
					Прервать;
				КонецеСли;	
			КонецЦикла;	
			РаботаСПрикрепленнымиФайламиСервер.ЗаписатьВыбранныйФайлМПВБД(Тек.name, Тек.nameExt, ДанныеМП, Тек.ТипДокумента, Тек.Заказ, Тек.id, Узел, Тек.createDate, Перечисления.ТипыЗаказов.Доставка); 
		КонецЦикла;
		
		
		//заборы
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	Таб.НомерЗаказа КАК НомерЗаказа,
		|	Таб.ТипДокумента КАК ТипДокумента,
		|	Таб.name КАК name,
		|	Таб.nameExt КАК nameExt,
		|	Таб.id КАК id,
		|	Таб.createDate КАК createDate
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.НомерЗаказа КАК НомерЗаказа,
		|	ЗаборТовара.Ссылка КАК Заказ,
		|	ТипыПрикрепленныхДокументов.Ссылка КАК ТипДокумента,
		|	ВТ_Заказы.name КАК name,
		|	ВТ_Заказы.nameExt КАК nameExt,
		|	ВТ_Заказы.id КАК id,
		|	ВТ_Заказы.createDate КАК createDate		
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаборТовара КАК ЗаборТовара
		|		ПО ВТ_Заказы.НомерЗаказа = ЗаборТовара.Номер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыПрикрепленныхДокументов КАК ТипыПрикрепленныхДокументов
		|		ПО ВТ_Заказы.ТипДокумента = ТипыПрикрепленныхДокументов.Код";
		Зап.УстановитьПараметр("Таб", ТабЗаборов);
		
		ТабДанных = Зап.Выполнить().Выгрузить();
		
		Для Каждого Тек Из ТабДанных Цикл
			//РаботаСПрикрепленнымиФайламиСервер.ЗаписатьВыбранныйФайлМПВБД(Тек.name, Тек.nameExt, Тек.data, ТабДанных.Найти(СокрЛП(Тек.orderId)).ТипДокумента, ТабДанных.Найти(СокрЛП(Тек.orderId)).Заказ, Тек.id, Узел, Тек.createDate, Перечисления.ТипыЗаказов.Забор); 
			ДанныеМП = "";
			Для Сч = 0 По МассивФайлов.attachedDocs.Количество() - 1 Цикл
				Файл = МассивФайлов.attachedDocs[Сч];
				Если Файл.id = Тек.id Тогда
					ДанныеМП = Файл.data;
					Прервать;
				КонецеСли;	
			КонецЦикла;	
			РаботаСПрикрепленнымиФайламиСервер.ЗаписатьВыбранныйФайлМПВБД(Тек.name, Тек.nameExt, ДанныеМП, Тек.ТипДокумента, Тек.Заказ, Тек.id, Узел, Тек.createDate, Перечисления.ТипыЗаказов.Забор); 
			
		КонецЦикла;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОтвета.result.error = Истина;
		СтруктураОтвета.result.errorText = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецПопытки;
	
	Возврат СтруктураОтвета;
КонецФункции

// Получить параметры.
// 
// 
// Параметры:
//   Структура ВходныеДанные Входные данные: 
// 		IDCar - Строка

// Возвращаемое значение:
//  Структура - Get parameters:
// * result - Структура - :
// ** arrayOfParameters - Неопределено - 
// ** error - Булево - 
// ** errorText - Строка
Функция ПолучитьПараметры(ВходныеПараметры) Экспорт	
	СтруктураОтвета = Новый Структура("result", Новый Структура("arrayOfParameters, error, errorText", Неопределено, Ложь));
	
	СтруктураПараметрШаблон = Новый ФиксированнаяСтруктура("name, value");
	МассивПараметров = Новый Массив;
	
	Попытка
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	ДополнительныеПараметрыТранспортаСрезПоследних.УдаленноеЗакрытиеРейсов КАК УдаленноеЗакрытиеРейсов
		|ИЗ
		|	РегистрСведений.ДополнительныеПараметрыТранспорта.СрезПоследних КАК ДополнительныеПараметрыТранспортаСрезПоследних
		|ГДЕ
		|	ДополнительныеПараметрыТранспортаСрезПоследних.Транспорт.Код = &КодТранспорта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних.ВерсияСтраницыМаршрутизацииМП.Наименование КАК routeMapVersion
		|ИЗ
		|	РегистрСведений.ТекущаяВерсияСтраницыМаршрутизацииМП.СрезПоследних КАК
		|		ТекущаяВерсияСтраницыМаршрутизацииМПСрезПоследних";
		Зап.УстановитьПараметр("КодТранспорта", ВходныеПараметры.IDCar);
		РезультатЗапросаПакет = Зап.ВыполнитьПакет(); 
		
		Выб = РезультатЗапросаПакет[0].Выбрать();
		
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон); 
		СтруктураПараметр.name = "remoteClosing";	
		Если Выб.Следующий() Тогда
			Если Выб.УдаленноеЗакрытиеРейсов Тогда
				СтруктураПараметр.value = "1";
			Иначе
				СтруктураПараметр.value = "0";
			КонецеСли;	
		Иначе
			СтруктураПараметр.value = "0";
		КонецеСли;	
		МассивПараметров.Добавить(СтруктураПараметр);
		
	//=============================
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "periodCheckingOfTimeInterval";
		СтруктураПараметр.value = "300";
		МассивПараметров.Добавить(СтруктураПараметр);
	//=============================
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "useYandexRouteQueryAfterBuildingRouteOnMap";
		СтруктураПараметр.value = "1";
		МассивПараметров.Добавить(СтруктураПараметр);		
	//=============================
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "periodAutoExchange";
		СтруктураПараметр.value = "1000";
		МассивПараметров.Добавить(СтруктураПараметр);
	//=============================	
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "depthOfIntervalCheckingOfTimeInterval";
		СтруктураПараметр.value = "60";
		МассивПараметров.Добавить(СтруктураПараметр);
	//=============================
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "autoLogin";
		ЗначениеПараметра = Константы.МобильноеПриложениеАвтологин.Получить();
		Если ЗначениеПараметра Тогда
			СтруктураПараметр.value = "1";
		Иначе
			СтруктураПараметр.value = "0";
		КонецеСли;			
		МассивПараметров.Добавить(СтруктураПараметр);
	//=============================
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "depthOfIntervalAutoLogin";
		ЗначениеПараметра = Константы.МобильноеПриложениеПериодХраненияДанныхВхода.Получить();
		Если ЗначениеПараметра Тогда
			СтруктураПараметр.value = "1";
		Иначе
			СтруктураПараметр.value = "0";
		КонецеСли;			
		МассивПараметров.Добавить(СтруктураПараметр);
	//=============================
	
	//////////////////////сбп//////////////////////////
	//==============	Параметр = ФабрикаXDTO.Создать(ТипПараметр);
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "KeyRaifQPS";
	
		ЗначениеПараметра = Константы.СекретныйКлючСБПРайффайзен.Получить();
		СтруктураПараметр.value = ЗначениеПараметра;
			
		МассивПараметров.Добавить(СтруктураПараметр);
	//==============
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "merchantIdRaifQPS";
	
		ЗначениеПараметра = Константы.merchantIdСБПРайффайзен.Получить();
		СтруктураПараметр.value = ЗначениеПараметра;
			
		МассивПараметров.Добавить(СтруктураПараметр);
	//==============
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "intervalRequestQPS";
	
		ЗначениеПараметра = Константы.ИнтервалОпросаСостоянияОплатыСБПВМП.Получить();
		СтруктураПараметр.value = Формат(ЗначениеПараметра, "ЧН=0; ЧГ=");
			
		МассивПараметров.Добавить(СтруктураПараметр);
	//==============
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "usingQPS";
	
		ЗначениеПараметра = Константы.ИспользоватьОплатуСБПВМП.Получить();
		Если ЗначениеПараметра Тогда
			СтруктураПараметр.value = "1";
		Иначе
			СтруктураПараметр.value = "0";
		КонецеСли;			
		МассивПараметров.Добавить(СтруктураПараметр);
	//==============
	//////////////////////сбп//////////////////////////
	
	//////////////////////карта маршрутизации//////////////////////////
	//==============	
		СтруктураПараметр = Новый Структура(СтруктураПараметрШаблон);
		СтруктураПараметр.name = "routeMapVersion";
		Выб = РезультатЗапросаПакет[1].Выбрать();
		Если Выб.Следующий() Тогда
			СтруктураПараметр.value = СокрЛП(Выб.routeMapVersion);
		Иначе
			СтруктураПараметр.value = "";
		КонецЕсли;	
		МассивПараметров.Добавить(СтруктураПараметр);
	//==============
		
		
		СтруктураОтвета.result.arrayOfParameters = МассивПараметров;
	Исключение
		СтруктураОтвета.result.error = Истина;
		СтруктураОтвета.result.errorText = ОписаниеОшибки();
	КонецПопытки;	
    Возврат СтруктураОтвета;
КонецФункции
#КонецОбласти
