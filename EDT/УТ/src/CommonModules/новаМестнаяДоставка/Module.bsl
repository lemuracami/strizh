
// Обновляет окна доступности в календаре возможных рейсов.
//
// Параметры:
//  Источник <БизнесПроцессОбъект.новаРейсМестнойДоставки>
//  фУдален  <Булево>: Истина, если необходимо пересчитать календарь с учетом отмены рейса.
//
Процедура ПересчитатьЗакрытиеПоРейсу(Источник, фУдален = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозможныеРейсы.Транспорт КАК Транспорт,
	|	ВозможныеРейсы.Водитель КАК Водитель,
	|	ВЫБОР
	|		КОГДА Корректировки.НовоеНачалоРейса ЕСТЬ NULL ТОГДА ВозможныеРейсы.НачалоРейса
	|		КОГДА Корректировки.НовоеНачалоРейса = ЗНАЧЕНИЕ(Справочник.новаТочкиДоставки.ПустаяСсылка) ТОГДА ВозможныеРейсы.НачалоРейса
	|		ИНАЧЕ Корректировки.НовоеНачалоРейса
	|	КОНЕЦ КАК НачалоРейса,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовоеНачалоПериода ЕСТЬ NULL ТОГДА ВозможныеРейсы.НачалоПериода
	|		КОГДА Корректировки.НовоеНачалоПериода = &ПустаяДата ТОГДА ВозможныеРейсы.НачалоПериода
	|		ИНАЧЕ Корректировки.НовоеНачалоПериода
	|	КОНЕЦ КАК НачалоПериода,
	|
	|	ВЫБОР
	|		КОГДА Корректировки.НовыйКонецПериода ЕСТЬ NULL ТОГДА ВозможныеРейсы.КонецПериода
	|		КОГДА Корректировки.НовыйКонецПериода = &ПустаяДата ТОГДА ВозможныеРейсы.КонецПериода
	|		ИНАЧЕ Корректировки.НовыйКонецПериода
	|	КОНЕЦ КАК КонецПериода
	|
	|ИЗ
	|
	|РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаКорректировкаКалендаряВозможныхРейсов КАК Корректировки
	|ПО
	|	ВозможныеРейсы.Транспорт = Корректировки.Транспорт
	| И ВозможныеРейсы.Водитель = Корректировки.Водитель
	| И НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, День) = Корректировки.НачалоПериода
	|
	|ГДЕ
	|	(Корректировки.Отменен ЕСТЬ NULL ИЛИ НЕ Корректировки.Отменен)
	|   И (ВЫБОР
	|       КОГДА Корректировки.НовыйТранспорт ЕСТЬ NULL 
	|         ТОГДА ВозможныеРейсы.Транспорт
	|       КОГДА Корректировки.НовыйТранспорт = ЗНАЧЕНИЕ(Справочник.новаТранспорт.ПустаяСсылка)
	|         ТОГДА ВозможныеРейсы.Транспорт
	|       ИНАЧЕ Корректировки.НовыйТранспорт
	|     КОНЕЦ = &Транспорт
	|    ИЛИ ВЫБОР
	|        КОГДА Корректировки.НовыйВодитель ЕСТЬ NULL
	|          ТОГДА ВозможныеРейсы.Водитель
	|        КОГДА Корректировки.НовыйВодитель = ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)
	|          ТОГДА ВозможныеРейсы.Водитель
	|        ИНАЧЕ Корректировки.НовыйВодитель
	|      КОНЕЦ = &Водитель)
	| И (&ДатаНачалаРейса МЕЖДУ
	|		ВЫБОР
	|			КОГДА Корректировки.НовоеНачалоПериода ЕСТЬ NULL ТОГДА НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода,ДЕНЬ)
	|			КОГДА Корректировки.НовоеНачалоПериода = &ПустаяДата ТОГДА НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода,ДЕНЬ)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(Корректировки.НовоеНачалоПериода,ДЕНЬ)
	|		КОНЕЦ
	|	И
	|		ВЫБОР
	|			КОГДА Корректировки.НовыйКонецПериода ЕСТЬ NULL ТОГДА КОНЕЦПЕРИОДА(ВозможныеРейсы.КонецПериода,ДЕНЬ)
	|			КОГДА Корректировки.НовыйКонецПериода = &ПустаяДата ТОГДА КОНЕЦПЕРИОДА(ВозможныеРейсы.КонецПериода,ДЕНЬ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(Корректировки.НовыйКонецПериода,ДЕНЬ)
	|		КОНЕЦ)";
	
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ДатаНачалаРейса", Источник.ДатаНачала);
	Запрос.УстановитьПараметр("Транспорт", Источник.Транспорт);
	Запрос.УстановитьПараметр("Водитель", Источник.Водитель);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат; КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачалоПериода = Выборка.НачалоПериода;
		КонецПериода = Выборка.КонецПериода;
		НачалоРейса = Выборка.НачалоРейса;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Рейсы.Ссылка КАК Рейс
		|ИЗ
		|	БизнесПроцесс.новаРейсМестнойДоставки КАК Рейсы
		|ГДЕ
		|	(
		|    Рейсы.Транспорт = &Транспорт
		|    ИЛИ
		|    Рейсы.Водитель = &Водитель
		|    )
		| И	Рейсы.Ссылка <> &УдаленныйРейс
		| И	НЕ Рейсы.РейсОтменен
		| И Рейсы.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|УПОРЯДОЧИТЬ ПО Рейсы.ДатаНачала ВОЗР";
		
		Запрос.УстановитьПараметр("Транспорт", Выборка.Транспорт);
		Запрос.УстановитьПараметр("Водитель", Выборка.Водитель);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
		Запрос.УстановитьПараметр("УдаленныйРейс", ?(фУдален, Источник.Ссылка, Неопределено));
		
		тзРейсы = Запрос.Выполнить().Выгрузить();
		
		НаборЗаписей = РегистрыСведений.новаЗакрытияВозможныхРейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Транспорт.Установить(Выборка.Транспорт);
		НаборЗаписей.Отбор.Водитель.Установить(Выборка.Водитель);
		НаборЗаписей.Отбор.НачалоПериода.Установить(НачалоПериода);
		
		Если тзРейсы.Количество() = 0 Тогда
			НаборЗаписей.Записать();
			Продолжить;
		КонецЕсли;
		
		тзПериоды = Новый ТаблицаЗначений;
		тзПериоды.Колонки.Добавить("НачалоРейса");
		тзПериоды.Колонки.Добавить("С", Новый ОписаниеТипов("Дата"));
		тзПериоды.Колонки.Добавить("По", Новый ОписаниеТипов("Дата"));
		
		стрПериод = тзПериоды.Добавить();
		стрПериод.НачалоРейса = НачалоРейса;
		стрПериод.С = НачалоПериода;
		стрПериод.По = КонецПериода;
		Для Каждого стрРейс Из тзРейсы Цикл
			Рейс = стрРейс.Рейс;
			ъ = 0;
			КоличествоПериодов = тзПериоды.Количество();
			Пока ъ < КоличествоПериодов Цикл
				стрПериод = тзПериоды[ъ];
				
				Если Рейс.ДатаНачала >= стрПериод.С Тогда
					Если Рейс.ДатаНачала < стрПериод.По Тогда
						Если Рейс.ДатаКонца < стрПериод.По Тогда
							Если Рейс.ДатаНачала > стрПериод.С Тогда
								стрНовыйПериод = тзПериоды.Добавить();
								стрНовыйПериод.НачалоРейса = Рейс.КонецРейса;
								стрНовыйПериод.С = Рейс.ДатаКонца;
								стрНовыйПериод.По = стрПериод.По;
								стрПериод.По = Рейс.ДатаНачала;		
							Иначе
								стрПериод.НачалоРейса = Рейс.КонецРейса;
								стрПериод.С = Рейс.ДатаКонца;
							КонецЕсли;
						Иначе
							Если Рейс.ДатаНачала > стрПериод.С Тогда
								стрПериод.По = Рейс.ДатаНачала;		
							Иначе
								тзПериоды.Удалить(стрПериод);
								КоличествоПериодов = КоличествоПериодов - 1;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Рейс.ДатаКонца >= стрПериод.С Тогда
						Если Рейс.ДатаКонца < стрПериод.По Тогда
							стрПериод.НачалоРейса = Рейс.КонецРейса;
							стрПериод.С = Рейс.ДатаКонца;
						Иначе
							тзПериоды.Удалить(стрПериод);
							КоличествоПериодов = КоличествоПериодов - 1;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ъ = ъ + 1;
			КонецЦикла;
			
		КонецЦикла;
		
		Если тзПериоды.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Транспорт = Выборка.Транспорт;
			Запись.Водитель = Выборка.Водитель;
			Запись.НачалоПериода = НачалоПериода;
			Запись.НомерПериода = 0;
			Запись.Закрыт = Истина;
		Иначе
			Для Каждого стрПериод Из тзПериоды Цикл
				НомерПериода = тзПериоды.Индекс(стрПериод);
				Запись = НаборЗаписей.Добавить();
				Запись.Транспорт = Выборка.Транспорт;
				Запись.Водитель = Выборка.Водитель;
				Запись.НачалоПериода = НачалоПериода;
				Запись.НомерПериода = НомерПериода;
				Запись.НовоеНачалоРейса = стрПериод.НачалоРейса;
				Запись.НовоеНачалоПериода = стрПериод.С;
				Запись.НовыйКонецПериода = стрПериод.По;
			КонецЦикла;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла; 
	
КонецПроцедуры

// Проверяет, нужно ли выполнять точку маршрута бизнес-процесса.
//
// Параметры:
//  Роль <СправочникСсылка.новаРоли>
//
// Возвращаемое значение:
//  <Булево>
//
Функция НужноВыполнятьТочкуМаршрута(Роль) Экспорт
	Возврат Роль.ВыполнятьЭтап;
КонецФункции

// Возвращает проведенный документ "Отчет водителя", введенный по рейсу.
//
// Параметры:
//  Рейс <БизнесПроцессСсылка.новаРейсМестнойДоставки>
//
// Возвращаемое значение:
//  <ДокументСсылка.новаОтчетВодителя>
//
Функция ПолучитьОтчетРейса(Рейс) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Отчеты.Ссылка КАК ОтчетВодителя
	|ИЗ
	|	Документ.новаОтчетВодителя КАК Отчеты
	|
	|ГДЕ
	|	Отчеты.Рейс = &Рейс
	| И Отчеты.Проведен";
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	
	тзОтчеты = Запрос.Выполнить().Выгрузить();
	Если тзОтчеты.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
	
	Возврат тзОтчеты[0].ОтчетВодителя;
КонецФункции

#Если Клиент Тогда
//
// Настраивает колонки журнала местной доставки.
//
// Параметры:
//  Журнал           <ОбработкаОбъект.новаУниверсальныйЖурнал>
//  ИсточникДоставки <ОбработкаОбъект>
//  СоздатьФлажки    <Булево>: журнал будет содержать флажки для выбора доставок.
//
Процедура НастроитьЖурналДоставок(Журнал, ИсточникДоставки, СоздатьФлажки = Ложь) Экспорт
	Если ИсточникДоставки.ОтменаДоставки Тогда
		Журнал.ДобавитьНастройку("ПоКонтрагенту");
		
		Источник = ИсточникДоставки;
		Журнал.ДобавитьИсточник(Источник);
		
		Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ОсновнаяТочка";
		Источник.КонструкторДанных.ДобавитьГруппировку("ОсновнойКонтрагент");
		Журнал.УстановитьШиринуИерархии(30);
		
		Если СоздатьФлажки Тогда
			Журнал.ИспользоватьФлажок("Выбрана", "ОсновнойКонтрагент");
			Журнал.ИспользоватьФлажок("Выбрана", "ОсновнаяТочка");
		КонецЕсли;
		
		Журнал.ДобавитьКолонку("НомерДоставки", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("ОтсутствуетНаСкладе", ПоложениеКолонки.НоваяКолонка, 4);
		Журнал.СделатьНевидимой();
		Журнал.ДобавитьКолонку("ДатаФормирования", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("КоличествоЗаказов",ПоложениеКолонки.НоваяКолонка, -5);
		Журнал.ДобавитьКолонку("ВремяПрибытияС", ПоложениеКолонки.НоваяКолонка, 12);
		Журнал.ДобавитьКолонку("ОсновнойРайон", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("ОсновнаяТочка", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("ОсновнойАдрес", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("ОсновнаяКатегорияТранспорта", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НоваяКолонка, 8);
		Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Грузоотправитель", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("Комментарий", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьСортировку("НомерДоставки", "ВОЗР");
		Журнал.ДобавитьКолонку("Вид", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("Широта", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.УстановитьПризнакВыбиратьИзБазы();
		Журнал.ДобавитьКолонку("Долгота", ПоложениеКолонки.НоваяКолонка, 20);
		
		Журнал.СделатьНевидимой();
		Журнал.УстановитьПризнакВыбиратьИзБазы();
	Иначе
		Журнал.ДобавитьНастройку("ПоРайонам");
		
		Источник = ИсточникДоставки;
		Источник.КнопкиГруппировкиРайонов = Истина;
		Журнал.ДобавитьИсточник(Источник);
		
		Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ОсновнаяТочка";
		Источник.КонструкторДанных.ДобавитьГруппировку("ОсновнойРайон");
		Журнал.УстановитьШиринуИерархии(30);
		
		Если СоздатьФлажки Тогда
			Журнал.ИспользоватьФлажок("Выбрана", "РайонПрибытия");
			Журнал.ИспользоватьФлажок("Выбрана", "ОсновнаяТочка");
		КонецЕсли;
		Журнал.ДобавитьКолонку("Доставка", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.ДобавитьКолонку("ОтсутствуетНаСкладе", ПоложениеКолонки.НоваяКолонка, 4);
		Журнал.СделатьНевидимой();
		Журнал.ДобавитьКолонку("ОсновнойКонтрагент", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("ВладелецТовара", ПоложениеКолонки.НоваяКолонка, 30);
		//Журнал.ДобавитьКолонку("ОсновнойАдрес", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("ОсновнаяТочка", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("КоличествоЗаказов",ПоложениеКолонки.НоваяКолонка, -5);
		Журнал.ДобавитьКолонку("ВремяПрибытияС", ПоложениеКолонки.НоваяКолонка, 12);
		Журнал.ДобавитьКолонку("ВремяПрибытияПо", ПоложениеКолонки.НоваяКолонка, 12);
		Журнал.ДобавитьКолонку("КатегорииТранспорта", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("ОсновнаяКатегорияТранспорта", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НоваяКолонка, 8);
		Журнал.ДобавитьКолонку("ОбщийВесТочки", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Грузополучатель", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("Комментарий", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("ДатаФормирования", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("Вид", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("НомерДоставки", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("Широта", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.УстановитьПризнакВыбиратьИзБазы();
		Журнал.ДобавитьКолонку("Долгота", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.УстановитьПризнакВыбиратьИзБазы();
		
		Журнал.ДобавитьНастройку("ПоРайонамИТочкам");
		
		Источник = ИсточникДоставки.Скопировать();
		Журнал.ДобавитьИсточник(Источник);
		
		Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "НомерДоставки";
		Источник.КонструкторДанных.ДобавитьГруппировку("ОсновнойРайон");
		Источник.КонструкторДанных.ДобавитьГруппировку("ОсновнойАдрес");
		Журнал.УстановитьШиринуИерархии(30);
		
		Если СоздатьФлажки Тогда
			Журнал.ИспользоватьФлажок("Выбрана", "ОсновнойРайон");
			Журнал.ИспользоватьФлажок("Выбрана", "ОсновнаяТочка");
		КонецЕсли;
		
		Журнал.ДобавитьКолонку("Доставка", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.ДобавитьКолонку("ОтсутствуетНаСкладе", ПоложениеКолонки.НоваяКолонка, 4);
		Журнал.СделатьНевидимой();
		Журнал.ДобавитьКолонку("ВладелецТовара", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("ОсновнойАдрес", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("КоличествоЗаказов",ПоложениеКолонки.НоваяКолонка, -5);
		Журнал.ДобавитьКолонку("ОсновнаяКатегорияТранспорта", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("КатегорииТранспорта", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("ВремяПрибытияС", ПоложениеКолонки.НоваяКолонка, 12);
		Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НоваяКолонка, 8);
		Журнал.ДобавитьКолонку("ОбщийВесТочки", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Грузоотправитель", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("Грузополучатель", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("Комментарий", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("ДатаФормирования", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("Вид", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("НомерДоставки", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("Широта", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.УстановитьПризнакВыбиратьИзБазы();
		Журнал.ДобавитьКолонку("Долгота", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.УстановитьПризнакВыбиратьИзБазы();
		
		Журнал.ДобавитьНастройку("ПоВидамИРайонам");
		
		Источник = ИсточникДоставки.Скопировать();
		Журнал.ДобавитьИсточник(Источник);
		
		Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ОсновнаяТочка";
		Источник.КонструкторДанных.ДобавитьГруппировку("Вид");
		Источник.КонструкторДанных.ДобавитьГруппировку("ОсновнойРайон");
		Журнал.УстановитьШиринуИерархии(30);
		
		Если СоздатьФлажки Тогда
			Журнал.ИспользоватьФлажок("Выбрана", "ОсновнойРайон");
			Журнал.ИспользоватьФлажок("Выбрана", "ОсновнаяТочка");
		КонецЕсли;
		
		Журнал.УстановитьШиринуИерархии(30);
		Журнал.ДобавитьКолонку("Доставка", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.ДобавитьКолонку("ОтсутствуетНаСкладе", ПоложениеКолонки.НоваяКолонка, 4);
		Журнал.СделатьНевидимой();
		Журнал.ДобавитьКолонку("ВладелецТовара", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("ОсновнойАдрес", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("КоличествоЗаказов",ПоложениеКолонки.НоваяКолонка, -5);
		Журнал.ДобавитьКолонку("ОсновнаяКатегорияТранспорта", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("КатегорииТранспорта", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("ВремяПрибытияС", ПоложениеКолонки.НоваяКолонка, 12);
		Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НоваяКолонка, 8);
		Журнал.ДобавитьКолонку("ОбщийВесТочки", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НоваяКолонка, 10);
		Журнал.ДобавитьКолонку("Грузоотправитель", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("Грузополучатель", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("Комментарий", ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("ДатаФормирования", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("РайонОтправления",ПоложениеКолонки.НоваяКолонка, 30);
		Журнал.ДобавитьКолонку("НомерДоставки", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.ДобавитьКолонку("Широта", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.УстановитьПризнакВыбиратьИзБазы();
		Журнал.ДобавитьКолонку("Долгота", ПоложениеКолонки.НоваяКолонка, 20);
		Журнал.СделатьНевидимой();
		Журнал.УстановитьПризнакВыбиратьИзБазы();
	КонецЕсли;
	
	Журнал.ДобавитьНастройку("ПоИнтерваламДоставки,РайонамИКатегориямТс");
	
	Источник = ИсточникДоставки.Скопировать();
	Журнал.ДобавитьИсточник(Источник);
    Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ОсновнаяТочка";
	Источник.КонструкторДанных.ДобавитьГруппировку("ИнтервалДоставкиСтрокой");
	Источник.КонструкторДанных.ДобавитьГруппировку("ОсновнойРайон");
	Источник.КонструкторДанных.ДобавитьГруппировку("КатегорииТранспорта");
	
	Журнал.УстановитьШиринуИерархии(30);
	Если СоздатьФлажки Тогда
		Журнал.ИспользоватьФлажок("Выбрана", "ИнтервалДоставкиСтрокой");
		Журнал.ИспользоватьФлажок("Выбрана", "ОсновнойРайон");
		Журнал.ИспользоватьФлажок("Выбрана", "КатегорииТранспорта");
	КонецЕсли;
		
	Журнал.УстановитьШиринуИерархии(30);
	Журнал.ДобавитьКолонку("Доставка", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ОтсутствуетНаСкладе", ПоложениеКолонки.НоваяКолонка, 4);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ИнтервалДоставкиСтрокой", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ВладелецТовара", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НоваяКолонка, 8);
	Журнал.ДобавитьКолонку("КоличествоЗаказов",ПоложениеКолонки.НоваяКолонка, -5);
	Журнал.ДобавитьКолонку("ОбщийВесТочки", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Грузоотправитель", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("Грузополучатель", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("Комментарий", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("ДатаФормирования", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ДобавитьКолонку("НомерДоставки", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ДобавитьКолонку("Широта", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.УстановитьПризнакВыбиратьИзБазы();
	Журнал.ДобавитьКолонку("Долгота", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.УстановитьПризнакВыбиратьИзБазы();
	
	Журнал.ДобавитьНастройку("ПоРайонам,ИнтерваламДоставкиИКатегориямТс");	
	Источник =ИсточникДоставки.Скопировать();
	Журнал.ДобавитьИсточник(Источник);
    Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ОсновнаяТочка";
	Источник.КонструкторДанных.ДобавитьГруппировку("ОсновнойРайон");
	Источник.КонструкторДанных.ДобавитьГруппировку("ИнтервалДоставкиСтрокой");
	Источник.КонструкторДанных.ДобавитьГруппировку("КатегорииТранспорта");
	Журнал.УстановитьШиринуИерархии(30);
	Если СоздатьФлажки Тогда
		Журнал.ИспользоватьФлажок("Выбрана", "ОсновнойРайон");
		Журнал.ИспользоватьФлажок("Выбрана", "ИнтервалДоставкиСтрокой");
		Журнал.ИспользоватьФлажок("Выбрана", "КатегорииТранспорта");
	КонецЕсли;
	Журнал.ДобавитьКолонку("Доставка", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ОтсутствуетНаСкладе", ПоложениеКолонки.НоваяКолонка, 4);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ИнтервалДоставкиСтрокой", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ВладелецТовара", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НоваяКолонка, 8);
	Журнал.ДобавитьКолонку("КоличествоЗаказов",ПоложениеКолонки.НоваяКолонка, -5);
	Журнал.ДобавитьКолонку("ОбщийВесТочки", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Грузоотправитель", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("Грузополучатель", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("Комментарий", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("ДатаФормирования", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ДобавитьКолонку("НомерДоставки", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ДобавитьКолонку("Широта", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.УстановитьПризнакВыбиратьИзБазы();
	Журнал.ДобавитьКолонку("Долгота", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.УстановитьПризнакВыбиратьИзБазы();
	Журнал.ДобавитьНастройку("Доставки");	
	Источник = ИсточникДоставки.Скопировать();
	Журнал.ДобавитьИсточник(Источник);
	
	Если СоздатьФлажки Тогда
		Журнал.ДобавитьКолонку("Выбрана", ПоложениеКолонки.НоваяКолонка, -3,, РежимРедактированияКолонки.Непосредственно);
	КонецЕсли;
	
	Журнал.ДобавитьКолонку("Доставка", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ОтсутствуетНаСкладе", ПоложениеКолонки.НоваяКолонка, 4);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ВладелецТовара", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("НомерДоставки", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ДобавитьСортировку("НомерДоставки", "ВОЗР");
	Журнал.ДобавитьКолонку("ВремяПрибытияС", ПоложениеКолонки.НоваяКолонка, 12);
	Журнал.ДобавитьКолонку("ОсновнойРайон", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("ОсновнойКонтрагент", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("ОсновнаяТочка", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("ОсновнойАдрес", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ДобавитьКолонку("ОсновнаяКатегорияТранспорта", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НоваяКолонка, 8);
	Журнал.ДобавитьКолонку("ОбщийВесТочки", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НоваяКолонка, 10);
	Журнал.ДобавитьКолонку("Грузоотправитель", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("Комментарий", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("ДатаФормирования", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ДобавитьКолонку("Вид", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ДобавитьКолонку("Широта", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.УстановитьПризнакВыбиратьИзБазы();
	Журнал.ДобавитьКолонку("Долгота", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.СделатьНевидимой();
	Журнал.УстановитьПризнакВыбиратьИзБазы();

КонецПроцедуры

Процедура НастроитьЖурналСборок(Журнал, ИсточникОбразец) Экспорт
	Журнал.ДобавитьНастройку("Список");
	
	Журнал.ДобавитьИсточник(ИсточникОбразец);
	
	Журнал.ДобавитьКолонку("Доставка", ПоложениеКолонки.НоваяКолонка, 16);
	Журнал.ДобавитьКолонку("Контрагент", ПоложениеКолонки.НоваяКолонка, 16);
	Журнал.ДобавитьКолонку("ТочкаПрибытия", ПоложениеКолонки.НоваяКолонка, 16);
	Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НоваяКолонка, 10);
	ИсточникОбразец.КонструкторДанных.ДобавитьГруппировку("СборкаНаСкладе");
	ИсточникОбразец.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "Доставка";
	
КонецПроцедуры

#КонецЕсли 

// Рассчитывает допустимые комбинации доставок и транспорта, для алгоритма автопланирования.
//
// Параметры:
//  стДоставки  <Структура[ДоставкиДляАвтопланирования]>
//  стТранспорт <Структура[ТранспортДляАвтопланирования]>
//
// Возвращаемое значение:
//  <Структура[СоответствиеДоставокИТранспортаДляАвтопланирования]>
//
Функция ПолучитьСоответствиеДоставокИТранспорта(стДоставки, стТранспорт) Экспорт
	соДоставкиТранспорта = Новый Соответствие;
	соТранспортДоставок = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаПланирования	
	|ИЗ
	|	РегистрСведений.новаОперативноеРаспределениеВозможныхРейсовПоРайонам
	|ГДЕ
	|	ДатаПланирования = &ДатаПланирования	
	| И СменаПланирования = &СменаПланирования";
	
	Запрос.УстановитьПараметр("ДатаПланирования", стТранспорт.ДатаПланирования);
	Запрос.УстановитьПараметр("СменаПланирования", стТранспорт.СменаПланирования);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		ТаблицаРайонов = "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|   	РайоныТранспорта.Транспорт КАК Транспорт,
		|   	РайоныТранспорта.Водитель КАК Водитель,
		|   	РайоныТранспорта.НачалоПериода КАК НачалоПериода,
		|		ЕСТЬNULL(ГруппыТранспорта.Группа, РайоныТранспорта.Район) КАК Район
		|	ИЗ
		|		РегистрСведений.новаОперативноеРаспределениеВозможныхРейсовПоРайонам КАК РайоныТранспорта
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыТранспорта
		|	ПО
		|		ГруппыТранспорта.Район = РайоныТранспорта.Район
		|
		|   ГДЕ
		|   	РайоныТранспорта.ДатаПланирования = &ДатаПланирования
		| 	  И РайоныТранспорта.СменаПланирования = &СменаПланирования
		|
		|   ) РайоныТранспорта
		|ПО
		|	РайоныТранспорта.Транспорт = ВозможныеРейсы.ТранспортСсылка
		| И РайоныТранспорта.Водитель = ВозможныеРейсы.ВодительСсылка
		| И РайоныТранспорта.НачалоПериода = ВозможныеРейсы.НачалоДоступности
		| И РайоныТранспорта.Район = ЕСТЬNULL(ГруппыДоставок.Группа, РайоныДоставок.Район)
		|";
		
		УсловиеРайонов = "";
	Иначе
		Если Константы.новаСпособОпределенияРайонаВозможногоРейса.Получить() = Перечисления.новаСпособыОпределенияРайонаВозможногоРейса.ПоВодителю Тогда
			ТаблицаРайонов = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|		РайоныТранспорта.Ссылка КАК Ссылка,
			|		ЕСТЬNULL(ГруппыТранспорта.Группа, РайоныТранспорта.Район) КАК Район
			|
			|	ИЗ
			|		Справочник.новаВодители.Районы КАК РайоныТранспорта
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыТранспорта
			|	ПО
			|		ГруппыТранспорта.Район = РайоныТранспорта.Район
			|   ) КАК РайоныТранспорта
			|ПО
			|	РайоныТранспорта.Ссылка = ВозможныеРейсы.ВодительСсылка
			| И РайоныТранспорта.Район = ЕСТЬNULL(ГруппыДоставок.Группа, РайоныДоставок.Район)
			|
			|";
			
			УсловиеРайонов = "";
		Иначе		
			ТаблицаРайонов = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|		РайоныТранспорта.Ссылка КАК Ссылка,
			|		ЕСТЬNULL(ГруппыТранспорта.Группа, РайоныТранспорта.Район) КАК Район
			|
			|	ИЗ
			|		Справочник.новаТранспорт.Районы КАК РайоныТранспорта
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыТранспорта
			|	ПО
			|		ГруппыТранспорта.Район = РайоныТранспорта.Район
			|   ) КАК РайоныТранспорта
			|ПО
			|	РайоныТранспорта.Ссылка = ВозможныеРейсы.ТранспортСсылка
			| И РайоныТранспорта.Район = ЕСТЬNULL(ГруппыДоставок.Группа, РайоныДоставок.Район)
			|
			|";
			
			УсловиеРайонов = "ИЛИ ТранспортДоставокПоРайонам.Транспорт.КоличествоВыбранныхРайонов = 0";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ Транспорт ИЗ &Транспорт КАК Данные;
	|
	|ВЫБРАТЬ
	|	ТранспортДоставок.Доставка КАК Доставка,
	|	ТранспортДоставок.ВозможныйРейс КАК ВозможныйРейс
	|
	|ПОМЕСТИТЬ ВозможныеРейсыДоставок
	|
	|ИЗ
	|   (ВЫБРАТЬ
	|		ТранспортДоставок.Доставка КАК Доставка,
	|		ТранспортДоставок.ВозможныйРейс КАК ВозможныйРейс
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Доставки.Ссылка КАК Доставка,
	|			ВозможныеРейсы.Ид КАК ВозможныйРейс,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КатегорииДоставок.ЗначениеКатегории.Владелец) КАК КоличествоКатегорийДоставки,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияКатегорийТранспорта.ЗначениеКатегории.Владелец) КАК КоличествоСовпадающихКатегорий
	|		ИЗ
	|			БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			БизнесПроцесс.новаМестнаяДоставка.КатегорииТранспорта КАК КатегорииДоставок
	|		ПО
	|			КатегорииДоставок.Ссылка = Доставки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Транспорт КАК ВозможныеРейсы
	|		ПО Истина
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.новаТранспорт.КатегорииТранспорта КАК ЗначенияКатегорийТранспорта
	|		ПО
	|			ЗначенияКатегорийТранспорта.Ссылка = ВозможныеРейсы.ТранспортСсылка
	|	  	  И ЗначенияКатегорийТранспорта.ЗначениеКатегории = КатегорииДоставок.ЗначениеКатегории
	|
	|		ГДЕ
	|			Доставки.Ссылка В (&Доставки)
	|
	|   	СГРУППИРОВАТЬ ПО Доставки.Ссылка, ВозможныеРейсы.Ид 
	|		) КАК ТранспортДоставок
	|	ГДЕ
	|		ТранспортДоставок.КоличествоКатегорийДоставки = 0
	|	ИЛИ ТранспортДоставок.КоличествоСовпадающихКатегорий = ТранспортДоставок.Доставка.КоличествоВыбранныхКатегорий
	|	) КАК ТранспортДоставок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|	Доставки.Ссылка КАК Доставка,
	|   ВозможныеРейсы.Ид КАК ВозможныйРейс,
	|	ВозможныеРейсы.ТранспортСсылка КАК Транспорт,
	|	КОЛИЧЕСТВО(РайоныТранспорта.Район) КАК КоличествоРайонов
	|	ИЗ
	|		БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|	
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.новаРайоныАдресов КАК РайоныДоставок
	|	ПО
	|		РайоныДоставок.Адрес = Доставки.ОсновнаяТочка.Адрес
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.новаОперативнаяГруппировкаРайонов КАК ГруппыДоставок
	|	ПО
	|		ГруппыДоставок.Район = РайоныДоставок.Район
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Транспорт КАК ВозможныеРейсы
	|   ПО Истина
	|   	
	|	" + ТаблицаРайонов + "
	|
	|	ГДЕ
	|		Доставки.Ссылка В (&Доставки)
	|
	|   СГРУППИРОВАТЬ ПО Доставки.Ссылка, ВозможныеРейсы.Ид, ВозможныеРейсы.ТранспортСсылка 
	|   ) КАК ТранспортДоставокПоРайонам
	|ПО
	|	ТранспортДоставок.ВозможныйРейс = ТранспортДоставокПоРайонам.ВозможныйРейс
	| И ТранспортДоставок.Доставка = ТранспортДоставокПоРайонам.Доставка
	| И (ТранспортДоставокПоРайонам.КоличествоРайонов > 0
	|	 " + УсловиеРайонов + ")
	|
	|ГДЕ
	|	НЕ ТранспортДоставокПоРайонам.Доставка ЕСТЬ NULL
	|;
	|ВЫБРАТЬ * ИЗ ВозможныеРейсыДоставок
	|";
	
	Запрос.УстановитьПараметр("Доставки", стДоставки.Доставки);
	Запрос.УстановитьПараметр("Транспорт", стТранспорт.ТаблицаТранспорта);
	
	тзДоставки = стДоставки.ТаблицаДоставок; 
	тзДоставки.Индексы.Добавить("ДоставкаСсылка");
	
	тзТранспорт = стТранспорт.ТаблицаТранспорта;
	
	Для Каждого стрДоставка Из тзДоставки Цикл
		соТранспортДоставок.Вставить(стрДоставка, Новый Массив);
	КонецЦикла;
	
	Для Каждого стрТранспорт Из тзТранспорт Цикл
		соДоставкиТранспорта.Вставить(стрТранспорт, Новый Массив);
	КонецЦикла;
	
	соСвернутыеСтрокиДоставок = стДоставки.СвернутыеСтрокиДоставок;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		стрДоставка = соСвернутыеСтрокиДоставок[Выборка.Доставка];
		стрТранспорт = тзТранспорт[Выборка.ВозможныйРейс];
		
		мсТранспортДоставки = соТранспортДоставок[стрДоставка];
		Если мсТранспортДоставки.Найти(стрТранспорт) = Неопределено Тогда
			мсТранспортДоставки.Добавить(стрТранспорт);
		КонецЕсли;
		
		мсДоставкиТранспорта = соДоставкиТранспорта[стрТранспорт];
		Если мсДоставкиТранспорта.Найти(стрДоставка) = Неопределено Тогда
			мсДоставкиТранспорта.Добавить(стрДоставка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозможныеРейсыДоставок.Доставка КАК Доставка,
	|	ВозможныеРейсыДоставок.ВозможныйРейс КАК ВозможныйРейс,
	|	ВЫБОР
	|		КОГДА РайоныВодителей.КоэффициентОпытности ЕСТЬ NULL ТОГДА ВозможныеРейсы.ВодительСсылка.КоэффициентОпытности
	|		КОГДА РайоныВодителей.КоэффициентОпытности = 0 ТОГДА ВозможныеРейсы.ВодительСсылка.КоэффициентОпытности
	|		ИНАЧЕ РайоныВодителей.КоэффициентОпытности
	|	КОНЕЦ КАК КоэффициентОпытности
	|
	|ИЗ
	|	ВозможныеРейсыДоставок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаРайоныАдресов КАК РайоныДоставок
	|ПО
	|	РайоныДоставок.Классификатор = &Классификатор
	| И	РайоныДоставок.Адрес = ВозможныеРейсыДоставок.Доставка.ОсновнаяТочка.Адрес
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Транспорт КАК ВозможныеРейсы
	|ПО
	|	ВозможныеРейсы.Ид = ВозможныеРейсыДоставок.ВозможныйРейс
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.новаВодители.Районы КАК РайоныВодителей
	|ПО
	|	РайоныВодителей.Ссылка = ВозможныеРейсы.ВодительСсылка
	| И РайоныВодителей.Район = РайоныДоставок.Район
	|";
	
	Запрос.УстановитьПараметр("Классификатор", новаКарты.ПолучитьТекущийКлассификаторРайонов());
	
	соКоэффициентыОпытностиДоставокТранспорта = Новый Соответствие;
	Для Каждого стрТранспорт Из тзТранспорт Цикл
		соКоэффициентыОпытностиДоставокТранспорта.Вставить(стрТранспорт, Новый Соответствие);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		стрДоставка = соСвернутыеСтрокиДоставок[Выборка.Доставка];
		стрТранспорт = тзТранспорт[Выборка.ВозможныйРейс];
		
		соКоэффициентыОпытностиДоставок = соКоэффициентыОпытностиДоставокТранспорта[стрТранспорт.Транспорт];
		Если соКоэффициентыОпытностиДоставок = Неопределено Тогда
			соКоэффициентыОпытностиДоставок = Новый Соответствие;
			соКоэффициентыОпытностиДоставокТранспорта.Вставить(стрТранспорт.Транспорт, соКоэффициентыОпытностиДоставок);	
		КонецЕсли;
		
		соКоэффициентыОпытностиДоставок.Вставить(стрДоставка.ЗаказНаДоставку, Выборка.КоэффициентОпытности);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РайоныВодителей.Район.Код Район,
	|	РайоныВодителей.Ссылка.Код КАК Водитель,
	|	РайоныВодителей.КоэффициентОпытности КАК КоэффициентОпытности
	|
	|ИЗ
	|	Справочник.новаВодители.Районы КАК РайоныВодителей
	|
	|ГДЕ
	|	РайоныВодителей.Ссылка В (ВЫБРАТЬ ВодительСсылка ИЗ Транспорт)
	| И РайоныВодителей.КоэффициентОпытности <> 0
	|
	|УПОРЯДОЧИТЬ ПО РайоныВодителей.Ссылка.Код ВОЗР, РайоныВодителей.Район.Код ВОЗР";
	
	тзКоэффициентыОпытностиВодителейПоРайонам = Запрос.Выполнить().Выгрузить();
	
	Возврат Новый Структура("ДоставкиТранспорта, ТранспортДоставок, КоэффициентыОпытностиТранспортаДоставки, КоэффициентыОпытностиВодителейПоРайонам",
		соДоставкиТранспорта,
		соТранспортДоставок,
		соКоэффициентыОпытностиДоставокТранспорта,
		тзКоэффициентыОпытностиВодителейПоРайонам);
КонецФункции

// Инициализация подсистемы "Местная доставка". Вызывается при начале работы системы.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
Процедура Инициализировать(новаКонтекст) Экспорт
КонецПроцедуры

#Если Клиент Тогда
//
// Настраивает колонки журнала рейсов местной доставки.
//
// Параметры:
//  Журнал <ОбработкаОбъект.новаУниверсальныйЖурнал>
//  Роль   <СправочникСсылка.новаРоли>: определяет состав рейсов, отображаемых в журнале.
//
Процедура НастроитьЖурналРейсов(Журнал, Роль, РедактированиеРейсов = Ложь) Экспорт
	Журнал.МножественныйВыбор = Истина;
	
	ИспользоватьСборкиПоРейсам = Константы.новаИспользоватьСборкиПоРейсам.Получить();
	
	// =============================   Настройка "По транспорту"   ==============================================
	Журнал.ДобавитьНастройку("ПоТранспорту");
	
	ИсточникРейсов = Обработки.новаИсточникРейсов.Создать();
	ИсточникРейсов.РедактированиеРейсов = РедактированиеРейсов;
	ИсточникРейсов.РедактированиеМаршрутов = РедактированиеРейсов;
	ИсточникРейсов.Роль = Роль;
	ИсточникРейсов.ГруппироватьРайоны = Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки;
	Журнал.ДобавитьИсточник(ИсточникРейсов);
	ИсточникРейсов.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "Рейс";
	
	ИсточникМаршрута = Обработки.новаИсточникМаршрутРейса.Создать();
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
		ИсточникМаршрута.ИнтерактивноеИзменениеПорядкаТочек = Истина;
		ИсточникМаршрута.АвтоСохранениеИзменений = Истина;
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки 
	 Или Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки Тогда
		ИсточникМаршрута.МаршрутСопровождения = Истина;
	КонецЕсли;
	
	// Якурнов 25.10.2018 9:38:48 ТУТ Делаем изменение колонок в ЗавершениеРейсов 
	
	Журнал.ДобавитьИсточник(ИсточникМаршрута, ИсточникРейсов, Новый Структура("Рейс", "Рейс"));
	ИсточникМаршрута.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ОписаниеЗадания";
	ИсточникМаршрута.КонструкторДанных.ДобавитьГруппировку("НомерТочки");
	
	Журнал.ДобавитьКолонку("Рейс", ПоложениеКолонки.НоваяКолонка, 30);
	Журнал.ИспользоватьФлажок("РейсВыбран");
	
	Журнал.ДобавитьКолонку("НовыйПорядковыйНомерТочки", ПоложениеКолонки.НоваяКолонка, -5, ИсточникМаршрута, РежимРедактированияКолонки.Вход);
	Журнал.ИспользоватьФлажок("Упорядочивать");
	Журнал.СделатьНевидимой();
	
	Журнал.ДобавитьКолонку("Транспорт", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("Водитель", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
    Журнал.ДобавитьКолонку("КонецРейсаСовпадаетСНачалом", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
    Журнал.ДобавитьКолонку("КоэффициентСкорости", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
    Журнал.ДобавитьКолонку("ВидТС", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("РасстояниеПлан", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("НомерРейса", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ДатаКонца", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("НачалоРейса", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("КонецРейса", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();


	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки Тогда
		Журнал.ДобавитьКолонку("ОтображатьРейсНаКарте", ПоложениеКолонки.НоваяКолонка, 1, ИсточникРейсов, РежимРедактированияКолонки.Непосредственно);
	КонецЕсли;
	
	Журнал.ДобавитьКолонку("ОсновнойРайон", ПоложениеКолонки.НоваяКолонка, 20, ИсточникРейсов);
	Журнал.ДобавитьКолонку("ВладелецТочки", ПоложениеКолонки.НаСледующейСтроке, 20, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("ПроцентЗагрузкиПоВесу", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ПроцентЗагрузкиПоОбъему", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
		
	Журнал.ДобавитьКолонку("ЗагрузкаПоВесу", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НаСледующейСтроке, -10, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("ЗагрузкаПоОбъему", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НаСледующейСтроке, -10, ИсточникМаршрута);
		
	Журнал.ДобавитьКолонку("ЗагрузкаПоЕдиницамПеревозки", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НаСледующейСтроке, -5, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("ПалеттВРейсе", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НаСледующейСтроке, -5, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("СтоимостьРейса", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НаСледующейСтроке, -10, ИсточникМаршрута);
	
	Если ИспользоватьСборкиПоРейсам Тогда
		Журнал.ДобавитьКолонку("КоличествоДоставокДляСборки", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	КонецЕсли;
	
	Журнал.ДобавитьКолонку("КоличествоТочекВРейсе", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	Журнал.ДобавитьКолонку("КоличествоДоставокВРейсе", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	
	Если Роль <>  Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки Тогда
		Журнал.ДобавитьКолонку("Окно", ПоложениеКолонки.НоваяКолонка, -10, ИсточникМаршрута);
	Иначе
		Журнал.ДобавитьКолонку("СостояниеОбмена", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
		Журнал.ДобавитьКолонку("Окно", ПоложениеКолонки.НаСледующейСтроке, -10, ИсточникМаршрута);
	КонецЕсли; 
	
	Журнал.ДобавитьКолонку("ВремяВыезда", ПоложениеКолонки.НоваяКолонка, 5, ИсточникРейсов);
	Журнал.ДобавитьКолонку("ПлановаяДатаПосещения", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("ДлительностьРейса", ПоложениеКолонки.НоваяКолонка, 5, ИсточникРейсов);
	Журнал.ДобавитьКолонку("ПлановоеВремяПосещения", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута);
	Журнал.ДобавитьКолонку("ВремяПребыванияЗадания", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута);
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки 
	 Или Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки Тогда
		Журнал.ДобавитьКолонку("ДатаВыездаФакт", ПоложениеКолонки.НоваяКолонка, 10, ИсточникРейсов, РежимРедактированияКолонки.ВходПриВводе);
		Журнал.ДобавитьКолонку("ДатаПрибытия", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута, РежимРедактированияКолонки.ВходПриВводе);
		Журнал.ДобавитьКолонку("ПрогнозируемаяДатаПрибытия", ПоложениеКолонки.ВТойЖеКолонке, 5, ИсточникМаршрута);
		
		Журнал.ДобавитьКолонку("ДатаВозвращенияФакт", ПоложениеКолонки.НоваяКолонка, 10, ИсточникРейсов, РежимРедактированияКолонки.ВходПриВводе);
		Журнал.ДобавитьКолонку("ДатаУбытия", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута, РежимРедактированияКолонки.ВходПриВводе);
		Журнал.ДобавитьКолонку("ПрогнозируемаяДатаУбытия", ПоложениеКолонки.ВТойЖеКолонке, 5, ИсточникМаршрута);
		
		Журнал.ДобавитьКолонку("ЗаданиеВыполнено", ПоложениеКолонки.НоваяКолонка, -3);
		
		Журнал.ДобавитьКолонку("ДлительностьРейсаФакт", ПоложениеКолонки.НоваяКолонка, -3, ИсточникРейсов);
		Журнал.СделатьНевидимой();  
		Журнал.ДобавитьКолонку("РасстояниеФакт", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
		Журнал.СделатьНевидимой();
		
	КонецЕсли;
	
	Журнал.ДобавитьСортировку("ВремяВыезда", "УБЫВ");
	Журнал.ДобавитьСортировку("НомерТочки", "ВОЗР");
	Журнал.ДобавитьСортировку("НомерЗадания", "ВОЗР");
	
	// =============================   Настройка "По районам"   ==============================================
	Журнал.ДобавитьНастройку("ПоРайонам");
	
	ИсточникРейсов = Обработки.новаИсточникРейсов.Создать();
	ИсточникРейсов.РедактированиеРейсов = РедактированиеРейсов;
	ИсточникРейсов.РедактированиеМаршрутов = РедактированиеРейсов;
	ИсточникРейсов.Роль = Роль;
	ИсточникРейсов.ГруппироватьРайоны = Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки;
	Журнал.ДобавитьИсточник(ИсточникРейсов);
	ИсточникРейсов.КонструкторДанных.ДобавитьГруппировку("ОсновнойРайон");
	ИсточникРейсов.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "Рейс";
	
	ИсточникМаршрута = Обработки.новаИсточникМаршрутРейса.Создать();
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки Тогда
		ИсточникМаршрута.ИнтерактивноеИзменениеПорядкаТочек = Истина;
		ИсточникМаршрута.АвтоСохранениеИзменений = Истина;
	КонецЕсли;
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки Тогда
		ИсточникМаршрута.МаршрутСопровождения = Истина;
	КонецЕсли;
	
	Журнал.ДобавитьИсточник(ИсточникМаршрута, ИсточникРейсов, Новый Структура("Рейс", "Рейс"));
	ИсточникМаршрута.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ОписаниеЗадания";
	ИсточникМаршрута.КонструкторДанных.ДобавитьГруппировку("НомерТочки");
	
	Журнал.ДобавитьКолонку("Рейс", ПоложениеКолонки.НоваяКолонка, 20);
	Журнал.ИспользоватьФлажок("РейсВыбран");
	
	Журнал.ДобавитьКолонку("НовыйПорядковыйНомерТочки", ПоложениеКолонки.НоваяКолонка, -5, ИсточникМаршрута, РежимРедактированияКолонки.Непосредственно);
	Журнал.ИспользоватьФлажок("Упорядочивать");
	Журнал.СделатьНевидимой();
	
	Журнал.ДобавитьКолонку("Транспорт", ПоложениеКолонки.НоваяКолонка, -5, ИсточникМаршрута, РежимРедактированияКолонки.Вход);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("Водитель", ПоложениеКолонки.НоваяКолонка, -5, ИсточникМаршрута, РежимРедактированияКолонки.Вход);
	Журнал.СделатьНевидимой();
    Журнал.ДобавитьКолонку("КонецРейсаСовпадаетСНачалом", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
    Журнал.ДобавитьКолонку("КоэффициентСкорости", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
    Журнал.ДобавитьКолонку("ВидТС", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	//Журнал.ДобавитьКолонку("КатегорияТС", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	//Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("РасстояниеПлан", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("НомерРейса", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("ДатаКонца", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("НачалоРейса", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	Журнал.ДобавитьКолонку("КонецРейса", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.СделатьНевидимой();
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки
	  Или Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки Тогда
		Журнал.ДобавитьКолонку("ОтображатьРейсНаКарте", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов, РежимРедактированияКолонки.Непосредственно);
	КонецЕсли;
	
	//Журнал.ДобавитьКолонку("Адрес", ПоложениеКолонки.НоваяКолонка, 20, ИсточникМаршрута);
	Журнал.ДобавитьКолонку("ВладелецТочки", ПоложениеКолонки.НоваяКолонка, 20, ИсточникМаршрута);
	
	//Журнал.ДобавитьКолонку("Грузоотправитель", ПоложениеКолонки.НоваяКолонка, 20, ИсточникМаршрута);
	//Журнал.СделатьНевидимой();
	//Журнал.ДобавитьКолонку("Грузополучатель", ПоложениеКолонки.НоваяКолонка, 20, ИсточникМаршрута);
	//Журнал.СделатьНевидимой();
	
	Журнал.ДобавитьКолонку("ЗагрузкаПоВесу", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	Журнал.ДобавитьКолонку("Вес", ПоложениеКолонки.НаСледующейСтроке, -10, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("ЗагрузкаПоОбъему", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	Журнал.ДобавитьКолонку("Объем", ПоложениеКолонки.НаСледующейСтроке, -10, ИсточникМаршрута);
		
	Журнал.ДобавитьКолонку("ЗагрузкаПоЕдиницамПеревозки", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.ДобавитьКолонку("КоличествоЕдиницПеревозки", ПоложениеКолонки.НаСледующейСтроке, -5, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("ПалеттВРейсе", ПоложениеКолонки.НоваяКолонка, -5, ИсточникРейсов);
	Журнал.ДобавитьКолонку("Палетт", ПоложениеКолонки.НаСледующейСтроке, -5, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("СтоимостьРейса", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	Журнал.ДобавитьКолонку("Стоимость", ПоложениеКолонки.НаСледующейСтроке, -10, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("КоличествоТочекВРейсе", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	Журнал.ДобавитьКолонку("КоличествоДоставокВРейсе", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки Тогда

		Журнал.ДобавитьКолонку("СостояниеОбмена", ПоложениеКолонки.НоваяКолонка, -10, ИсточникРейсов);
		Журнал.ДобавитьКолонку("Окно", ПоложениеКолонки.НаСледующейСтроке, -10, ИсточникМаршрута);
	Иначе
		Журнал.ДобавитьКолонку("Окно", ПоложениеКолонки.НоваяКолонка, -10, ИсточникМаршрута);
	КонецЕсли;
	
	Журнал.ДобавитьКолонку("ВремяВыезда", ПоложениеКолонки.НоваяКолонка, 5, ИсточникРейсов);
	Журнал.ДобавитьКолонку("ПлановаяДатаПосещения", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута);
	
	Журнал.ДобавитьКолонку("ДлительностьРейса", ПоложениеКолонки.НоваяКолонка, 5, ИсточникРейсов);
	Журнал.ДобавитьКолонку("ПлановоеВремяПосещения", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута);
	Журнал.ДобавитьКолонку("ВремяПребыванияЗадания", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута);
	
	Если Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки 
	 Или Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки Тогда
		Журнал.ДобавитьКолонку("ДатаВыездаФакт", ПоложениеКолонки.НоваяКолонка, 5, ИсточникРейсов, РежимРедактированияКолонки.ВходПриВводе);
		Журнал.ДобавитьКолонку("ДатаПрибытия", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута, РежимРедактированияКолонки.ВходПриВводе);
		Журнал.ДобавитьКолонку("ПрогнозируемаяДатаПрибытия", ПоложениеКолонки.ВТойЖеКолонке, 5, ИсточникМаршрута);
		
		Журнал.ДобавитьКолонку("ДатаВозвращенияФакт", ПоложениеКолонки.НоваяКолонка, 5, ИсточникРейсов, РежимРедактированияКолонки.ВходПриВводе);
		Журнал.ДобавитьКолонку("ДатаУбытия", ПоложениеКолонки.НаСледующейСтроке, 5, ИсточникМаршрута, РежимРедактированияКолонки.ВходПриВводе);
		Журнал.ДобавитьКолонку("ПрогнозируемаяДатаУбытия", ПоложениеКолонки.ВТойЖеКолонке, 5, ИсточникМаршрута);
	КонецЕсли;
	
	Журнал.ДобавитьСортировку("ВремяВыезда", "УБЫВ");
	Журнал.ДобавитьСортировку("НомерТочки", "ВОЗР");
	Журнал.ДобавитьСортировку("НомерЗадания", "ВОЗР");
КонецПроцедуры
#КонецЕсли

// Возвращает массив точек доставок, с которыми может работать текущий пользователь.
// Используется для фильтрации доставок по складам.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
// Возвращаемое значение:
//  <Массив(<СправочникСсылка.новаТочкиДоставки>)>
//
Функция ПолучитьТекущиеТочкиДоставки(новаКонтекст) Экспорт
	Возврат ПараметрыСеанса.новаТекущийПользователь.ТочкиДоставки.ВыгрузитьКолонку("ТочкаДоставки");
КонецФункции

// Возвращает массив георайонов, с которыми может работать текущий пользователь.
// Используется для фильтрации доставок по районам.
//
// Параметры:
//  новаКонтекст <Структура[Контекст]>: используется для повторного использования вычисленных значений на клиенте.
//
// Возвращаемое значение:
//  <Массив(<СправочникСсылка.новаГеоРайоны>)>
//
Функция ПолучитьТекущиеРайоны(новаКонтекст) Экспорт
	Возврат ПараметрыСеанса.новаТекущийПользователь.Районы.ВыгрузитьКолонку("Район");
КонецФункции

// Возвращает таблицу значений доставок по которым не оформлены сборки
//
// Параметры: 
//   Рейс <БизнесПроцессСсылка.новаРейсМестнойДоставки> - рейс по которому необходимо получить несобранные доставки
//
// Возвращаемое значение:
//   <ТаблицаЗначений>
//
Функция ПолучитьНесобранныеДоставкиПоРейсу(Рейс) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	новаЗаданияРейсов.Доставка КАК МестнаяДоставка,
	               |	новаСборкаНаСкладеСостав.МестнаяДоставка КАК Сборка
	               |ИЗ
	               |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.новаСборкаНаСкладе.Состав КАК новаСборкаНаСкладеСостав
	               |		ПО новаЗаданияРейсов.Рейс = новаСборкаНаСкладеСостав.Ссылка.Рейс
	               |			И новаЗаданияРейсов.Доставка = новаСборкаНаСкладеСостав.МестнаяДоставка
	               |ГДЕ
	               |	новаЗаданияРейсов.Рейс = &Рейс
				   //|	И (НЕ новаСборкаНаСкладеСостав.Ссылка.ПометкаУдаления)
				   |	И новаЗаданияРейсов.Вид = &ВидЗадания
				   |    И новаСборкаНаСкладеСостав.МестнаяДоставка ЕСТь NULL
	               |	И новаЗаданияРейсов.Доставка.Грузоотправитель ССЫЛКА Справочник.новаСклады";
				   
	Запрос.УстановитьПараметр("Рейс",Рейс);				
	Запрос.УстановитьПараметр("ВидЗадания",Перечисления.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка);	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Процедура ОбновитьСостояниеСборок(Рейс) Экспорт
	Если НЕ Константы.новаИспользоватьСборкиПоРейсам.Получить() Тогда Возврат; КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.новаСостояниеСборокПоРейсам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рейс.Установить(Рейс.Ссылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Удалить(0);
	КонецЕсли;	
	
	КоличествоНеСобранных = 0;
	НесобранныеДоставки = новаМестнаяДоставка.ПолучитьНесобранныеДоставкиПоРейсу(Рейс);
	Если НесобранныеДоставки <> Неопределено Тогда
		КоличествоНеСобранных = НесобранныеДоставки.Количество();
		Если КоличествоНеСобранных > 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Рейс = Рейс.Ссылка;
			Запись.Количество = КоличествоНеСобранных;
		КонецЕсли;
	КонецЕсли;
	 
	НаборЗаписей.Записать(Истина);	 

КонецПроцедуры	

Процедура ОбновитьПолныеНаименованияКатегорийТранспорта() Экспорт
	
	спрТранспорт = Справочники.новаТранспорт.Выбрать();
	Пока спрТранспорт.Следующий() Цикл
		Если спрТранспорт.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		
		обТранспорт = спрТранспорт.ПолучитьОбъект();	
		обТранспорт.Записать();
		#Если Клиент Тогда
			Сообщить("Записан элемент " + обТранспорт);
		#КонецЕсли

	КонецЦикла;	
	
КонецПроцедуры	

Процедура ОбновитьПолныеНаименованияКатегорийЗаказов(НачПериода,КонПериода) Экспорт
	
	бпЗаказы = БизнесПроцессы.новаМестнаяДоставка.Выбрать(НачПериода,КонПериода);
	Пока бпЗаказы.Следующий() Цикл
		Если бпЗаказы.ПометкаУдаления Тогда Продолжить; КонецЕсли;
		
		обЗаказ = бпЗаказы.ПолучитьОбъект();	
		обЗаказ.Записать();
		#Если Клиент Тогда
			Сообщить("Записан элемент " + обЗаказ);
		#КонецЕсли

	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьКлассификаторОшибокДиагностикиДанных() Экспорт
	
	Ошибки = Новый ТаблицаЗначений();
	Ошибки.Колонки.Добавить("Код"); // XXYY, где 
	                                // ХХ - категория ошибки:
									//      01 - транспорт
									//      02 - заказы
									// YY - порядковый номер
	Ошибки.Колонки.Добавить("Критичность"); // 0 - невозможно продолжать автопланирование
											// 1 - не полные данные
											// 2 - предупреждение (исправлние ошибки желательно, но не критично для автопланирования)
	Ошибки.Колонки.Добавить("Наименование");
	Ошибки.Колонки.Добавить("Описание");
	
	// ТРАНСПОРТ
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0101";
	Ошибка.Критичность = 2;
	Ошибка.Наименование = "Отсутствует начало рейса";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0102";
	Ошибка.Критичность = 0;
	Ошибка.Наименование = "Начало окна доступности больше конца окна доступности";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0103";
	Ошибка.Критичность = 0;
	Ошибка.Наименование = "Не заданы объемо-весовые характеристики";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0104";
	Ошибка.Критичность = 1;
	Ошибка.Наименование = "Не задана грузоподъемность";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0105";
	Ошибка.Критичность = 1;
	Ошибка.Наименование = "Не задана грузовместимость (объем кузова)";
	
	
	// ЗАКАЗЫ
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0201";
	Ошибка.Критичность = 1;
	Ошибка.Наименование = "Отсутствует транспорт для доставки заказа";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0202";
	Ошибка.Критичность = 0;
	Ошибка.Наименование = "Начало временного окна отправления больше конца временного окна отправления";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0203";
	Ошибка.Критичность = 1;
	Ошибка.Наименование = "Точка доставки не геокодирована";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0204";
	Ошибка.Критичность = 2;
	Ошибка.Наименование = "Начало временного окна  прибытия совпадает с концом временного окна прибытия";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0205";
	Ошибка.Критичность = 2;
	Ошибка.Наименование = "Не указана длительность разгрузки";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0206";
	Ошибка.Критичность = 2;
	Ошибка.Наименование = "Заказ отброшен по фильтру 'Склады' в сценарии планирования";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0207";
	Ошибка.Критичность = 0;
	Ошибка.Наименование = "Не указана точка прибытия";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0208";
	Ошибка.Критичность = 0;
	Ошибка.Наименование = "Не указана точка отправления";
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Код = "0209";
	Ошибка.Критичность = 1;
	Ошибка.Наименование = "Вес заказа превышает грузоподъемность транспорта";
	
	Возврат Ошибки;
	
КонецФункции	

//Получает список дат на кторые есть хотя бы один заказ в стадии планирования
//Возвращает результат запроса
//
Функция ПолучитьСписокВозможныхДатПланирования() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    НАЧАЛОПЕРИОДА(БизнесПроцесс.Доставка.ВремяОтправленияС, ДЕНЬ) КАК ДатаПосещения
	|  ИЗ
	|    Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю
	|      (
	|        ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)
	|        ,(НЕ Выполнена)
	|      )
	|  ГДЕ
	|    БизнесПроцесс.Доставка.ВремяОтправленияС ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    НАЧАЛОПЕРИОДА(БизнесПроцесс.ДатаНачала, ДЕНЬ)
	|  ИЗ
	|    Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю
	|      (
	|        ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки)
	|        ,(НЕ Выполнена)
	|      )
	|  ГДЕ
	|    БизнесПроцесс.ДатаНачала ЕСТЬ НЕ NULL 
	|    И БизнесПроцесс.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|  УПОРЯДОЧИТЬ ПО
	|    ДатаПосещения
	|");
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьРейсыНаДату(ДатаПланирования) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Задачи.БизнесПроцесс.Транспорт КАК Транспорт,
	               |	Задачи.БизнесПроцесс.Водитель КАК Водитель
	               |ИЗ
	               |	Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(, НЕ Выполнена) КАК Задачи
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(Задачи.БизнесПроцесс.ДатаНачала, ДЕНЬ) = &ДатаПланирования";
	
	Запрос.УстановитьПараметр("ДатаПланирования",ДатаПланирования);
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

#Если Клиент Тогда

//*** вызываются при завершении планирования рейсов ***//

// Получает период работы водителей на дату планирования
//
// Параметры
//  соЗадачи  - <Соответствие(<ЗадачаСсылка.новаЗадачаРейсаМестнойДоставки>,<СтрокаДереваЗначений>) 
//
// Возвращаемое значение:
//   Выборка из результата запроса  
//
Функция ПолучитьКонецПериодаРаботыВодителей(соЗадачи, ДатаПланирования) Экспорт 
	
	Водители = Новый Массив;
	Транспорт = Новый Массив;
	Для Каждого ЭлЗадача Из соЗадачи Цикл
		Водители.Добавить(ЭлЗадача.Ключ.БизнесПроцесс.Водитель);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРаботаВодителей();
		
	РазмерПериода = Макс(1,(ПараметрыСеанса.новаТекущийПользователь.МинимальноеОкноДоступностиТранспорта - '00010101'));
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);				
	Запрос.УстановитьПараметр("РазмерПериода", РазмерПериода);
	Запрос.УстановитьПараметр("Водители", Водители);
		
    Возврат Запрос.Выполнить().Выбрать();

КонецФункции // ПолучитьПериодыРаботыВодителей()

// Получает период работы водителя на дату планирования
//
// Параметры
//  Ссылка  - <БизнесПроцессСсылка.новаРейсМестнойДоставки> 
//
// Возвращаемое значение:
//   <Дата> - конец периода работы  
//
Функция ПолучитьКонецПериодаРаботыВодителя(Ссылка, ДатаПланирования) Экспорт 
	
	Водители = Новый Массив;
	Водители.Добавить(Ссылка.Водитель);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРаботаВодителей();	
	
	РазмерПериода = Макс(1,(ПараметрыСеанса.новаТекущийПользователь.МинимальноеОкноДоступностиТранспорта - '00010101'));
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);				
	Запрос.УстановитьПараметр("РазмерПериода", РазмерПериода);
	Запрос.УстановитьПараметр("Водители", Водители);
		
    Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КонецПериода;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьПериодыРаботыВодителей()

Функция ТекстЗапросаРаботаВодителей()
	
	Текст = "ВЫБРАТЬ
	|	ВозможныеРейсы.Водитель,
	|	МАКСИМУМ(ВозможныеРейсы.КонецПериода) КАК КонецПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Корректировки.НовыйТранспорт ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.Транспорт
	|			КОГДА Корректировки.НовыйТранспорт = ЗНАЧЕНИЕ(Справочник.новаТранспорт.ПустаяСсылка)
	|				ТОГДА ВозможныеРейсы.Транспорт
	|			ИНАЧЕ Корректировки.НовыйТранспорт
	|		КОНЕЦ КАК Транспорт,
	|		ВЫБОР
	|			КОГДА Корректировки.НовыйВодитель ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.Водитель
	|			КОГДА Корректировки.НовыйВодитель = ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)
	|				ТОГДА ВозможныеРейсы.Водитель
	|			ИНАЧЕ Корректировки.НовыйВодитель
	|		КОНЕЦ КАК Водитель,
	|		ВЫБОР
	|			КОГДА Корректировки.НовыйЭкспедитор ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.Экспедитор
	|			КОГДА Корректировки.НовыйЭкспедитор = ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)
	|				ТОГДА ВозможныеРейсы.Экспедитор
	|			ИНАЧЕ Корректировки.НовыйЭкспедитор
	|		КОНЕЦ КАК Экспедитор,
	|		ВЫБОР
	|			КОГДА Корректировки.НовоеНачалоПериода ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.НачалоПериода
	|			КОГДА Корректировки.НовоеНачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВозможныеРейсы.НачалоПериода
	|			ИНАЧЕ Корректировки.НовоеНачалоПериода
	|		КОНЕЦ КАК НачалоПериода,
	|		ВЫБОР
	|			КОГДА Корректировки.НовыйКонецПериода ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.КонецПериода
	|			КОГДА Корректировки.НовыйКонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВозможныеРейсы.КонецПериода
	|			ИНАЧЕ Корректировки.НовыйКонецПериода
	|		КОНЕЦ КАК КонецПериода,
	|		ВЫБОР
	|			КОГДА Корректировки.НовоеНачалоРейса ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.НачалоРейса
	|			КОГДА Корректировки.НовоеНачалоРейса = ЗНАЧЕНИЕ(Справочник.новаТочкиДоставки.ПустаяСсылка)
	|				ТОГДА ВозможныеРейсы.НачалоРейса
	|			ИНАЧЕ Корректировки.НовоеНачалоРейса
	|		КОНЕЦ КАК НачалоРейса,
	|		ВЫБОР
	|			КОГДА Корректировки.НовоеНачалоРейса ЕСТЬ NULL 
	|				ТОГДА ВозможныеРейсы.НачалоРейса
	|			КОГДА Корректировки.НовоеНачалоРейса = ЗНАЧЕНИЕ(Справочник.новаТочкиДоставки.ПустаяСсылка)
	|				ТОГДА ВозможныеРейсы.НачалоРейса
	|			ИНАЧЕ Корректировки.НовоеНачалоРейса
	|		КОНЕЦ КАК ТочкаВыезда
	|	ИЗ
	|		РегистрСведений.новаКалендарьВозможныхРейсов КАК ВозможныеРейсы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаКорректировкаКалендаряВозможныхРейсов КАК Корректировки
	|			ПО ВозможныеРейсы.Транспорт = Корректировки.Транспорт
	|				И ВозможныеРейсы.Водитель = Корректировки.Водитель
	|				И (НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) = НАЧАЛОПЕРИОДА(Корректировки.НачалоПериода, ДЕНЬ))
	|	ГДЕ
	|		(Корректировки.Отменен ЕСТЬ NULL 
	|				ИЛИ НЕ Корректировки.Отменен)) КАК ВозможныеРейсы
	|ГДЕ
	|	&ДатаПланирования МЕЖДУ НАЧАЛОПЕРИОДА(ВозможныеРейсы.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(ВозможныеРейсы.КонецПериода, ДЕНЬ)
	|	И РАЗНОСТЬДАТ(ВозможныеРейсы.НачалоПериода, ВозможныеРейсы.КонецПериода, СЕКУНДА) >= &РазмерПериода
	|	И ВозможныеРейсы.Водитель В(&Водители)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозможныеРейсы.Водитель";
	
	Возврат Текст;	
	
КонецФункции // ТекстЗапросаРаботыВодителей()

//*** вызываются при переводе рейсов на сопровождение ***//

// Проверяется существование рейсов на сопровождении для водителя 
//
// Параметры
//  соЗадачи  - <ЗадачаСсылка.новаЗадачаРейсаМестнойДоставки;
//				ЗадачаОбъект.новаЗадачаРейсаМестнойДоставки;
//				Соответствие[ЗадачаСсылка.новаЗадачаРейсаМестнойДоставки;]> 
//
Функция ПроверкаПереводаРейсовНаСопровождении(соЗадачи) Экспорт 
	
	времЗадача = Неопределено;
	Если ТипЗнч(соЗадачи) = Тип("ЗадачаСсылка.новаЗадачаРейсаМестнойДоставки") 
	ИЛИ ТипЗнч(соЗадачи) = Тип("ЗадачаОбъект.новаЗадачаРейсаМестнойДоставки") Тогда
		времЗадача = соЗадачи;
		соЗадачи = Новый Соответствие;
		соЗадачи.Вставить(времЗадача, Истина);
	КонецЕсли;
		
	НеобходимоСопроводить = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки.ВыполнятьЭтап;
	Если НеобходимоСопроводить Тогда
		ЗадачиДляКонтроля = Новый Массив;
		
		Если соЗадачи.Количество() = 1 Тогда
			
			Для Каждого ЭлЗадача Из соЗадачи Цикл
				Рейс = ЭлЗадача.Ключ.БизнесПроцесс;
				Водитель = Рейс.Водитель;
				Если новаМониторинг.СуществуетРейсНаСопровожденииДляВодителя(Водитель, Рейс) Тогда
					ЗадачиДляКонтроля.Добавить(ЭлЗадача.Ключ);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			мсЗадачи = Новый Массив;
			Для Каждого ЭлЗадача Из соЗадачи Цикл
				мсЗадачи.Добавить(ЭлЗадача.Ключ);
			КонецЦикла;
			ЗадачиДляКонтроля = новаМониторинг.РейсыСИмеющимисяДляВодителейРейсамиНаСопровождении(мсЗадачи);
						
		КонецЕсли;
				
		Если ЗадачиДляКонтроля.Количество() > 0 Тогда
			Если соЗадачи.Количество() > 1 Тогда
				
				ТекстВопроса = "У некоторых водителей уже есть текущий рейс на сопровождении. 
				|Вы уверены что хотите передать такие рейсы на сопровождение?";
				
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЗадачиДляКонтроля.Очистить();
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда	
					Возврат Неопределено;				
				Иначе
					ФормаПодтверждения = ПолучитьОбщуюФорму("новаФормаРейсыДляПодтверждения");
					ФормаПодтверждения.Заголовок = "Выберите рейсы для перевода на сопровождение";
					ФормаПодтверждения.ЗадачиДляКонтроля = ЗадачиДляКонтроля;
					РезультатПодтверждения = ФормаПодтверждения.ОткрытьМодально(); 
					Если ТипЗнч(РезультатПодтверждения) = Тип("Массив") Тогда
						ЗадачиДляКонтроля = РезультатПодтверждения;					
					КонецЕсли;
				КонецЕсли;
				
			Иначе	
				
				ТекстВопроса = "У водителя уже есть текущий рейс на сопровождении. 
				|Вы уверены что хотите передать рейс на сопровождение?";
				
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЗадачиДляКонтроля.Очистить();
				КонецЕсли;
				
			КонецЕсли;	
			
			Для Каждого Задача Из ЗадачиДляКонтроля Цикл
				соЗадачи.Удалить(Задача);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если времЗадача <> Неопределено Тогда
		Если соЗадачи[времЗадача] = Неопределено Тогда
			Возврат Неопределено; 
		Иначе
			соЗадачи = времЗадача;
			Возврат времЗадача;
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции

#КонецЕсли

