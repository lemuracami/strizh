// Запускает на выполнение цепочку событий, назначенных элементу управления формы
//
// Параметры:
//  Форма       		 - Форма - форма, на которой расположен элемент;
//  КоличествоПараметров - Число - количество параметров обработчика события;
//  НомерОбработчика 	 - Число - код события;
//  Элемент     - Элемент формы или Форма - элемент формы, форма или кнопка командной панели;
//	нопКонтекст - Структура - контейнер глобальных переменных;
//  Параметр1   - Любой - параметр обработчика события;
//  Параметр2   - Любой - параметр обработчика события;
//  Параметр3   - Любой - параметр обработчика события;
//  Параметр4   - Любой - параметр обработчика события;
// 
Процедура ВыполнитьСобытиеФормы(Форма, КоличествоПараметров, НомерОбработчика, вхЭлемент, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено) Экспорт
	
	Попытка
		тзОбработчики = Форма.Расширение.ОбработчикиСобытий;
		соСоответствиеСобытий = Форма.Расширение.СоответствиеСобытий;
	Исключение
		//Сообщить("Форма не инициализирована!", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	ТипыЭлементовФормы = Новый ОписаниеТипов("КнопкаКоманднойПанели,Индикатор,ПолеКалендаря,Кнопка,Надпись,Панель,Переключатель,ПолеHTMLДокумента,ПолеТекстовогоДокумента,ПолеВвода,ПолеВыбора,ПолеСписка,ПолеКартинки,ПолосаРегулирования,ТабличноеПоле,Флажок,ПолеГрафическойСхемы,ПолеГеографическойСхемы,ActiveX");
	фПередатьЭлементПервымПараметром = ТипыЭлементовФормы.СодержитТип(ТипЗнч(вхЭлемент));
	Элемент = ?(фПередатьЭлементПервымПараметром, вхЭлемент, Форма);
	
	КоличествоПараметровОбработчика = КоличествоПараметров + 1;
	
	соСобытия = соСоответствиеСобытий[Элемент];
	Если соСобытия = Неопределено Тогда Возврат; КонецЕсли;
	Событие = соСобытия[Строка(КоличествоПараметровОбработчика) + "_" + Строка(НомерОбработчика)];
	Если Событие = Неопределено Тогда Возврат; КонецЕсли;
	
	Отбор = Новый Структура("Элемент, Событие", Элемент, Событие);
	Обработчики = тзОбработчики.НайтиСтроки(Отбор);
	СтароеДействие = Неопределено;
	Прекратить = Неопределено;
	Попытка
		Для Каждого Обработчик Из Обработчики Цикл
			Если (Обработчик.ВНачало = Неопределено) Или (Обработчик.ВНачало = Истина) Тогда
				Если Элемент = Форма Тогда
					Прекратить = Форма.ВыполнитьМакрос(Обработчик.Обработчик.Формула, вхЭлемент, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);
				Иначе
					Прекратить = Форма.ВыполнитьМакрос(Обработчик.Обработчик.Формула, Элемент, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);
				КонецЕсли;
				Если Прекратить = Истина Тогда Прервать; КонецЕсли;
			КонецЕсли;
			
			Если тзОбработчики.Индекс(Обработчик) < 0 Тогда Прервать; КонецЕсли;
			
			Если (Обработчик.СтароеДействие <> Неопределено) И (СокрЛП(Обработчик.СтароеДействие) <> "") Тогда
				СтароеДействие = Обработчик.СтароеДействие;
				
				Если фПередатьЭлементПервымПараметром Тогда
					Если КоличествоПараметров = 0 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1)", Элемент);
					ИначеЕсли КоличествоПараметров = 1 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2)", Элемент, Параметр1);
					ИначеЕсли КоличествоПараметров = 2 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2, Параметр3)", Элемент, Параметр1, Параметр2);
					ИначеЕсли КоличествоПараметров = 3 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2, Параметр3, Параметр4)", Элемент, Параметр1, Параметр2, Параметр3);
					ИначеЕсли КоличествоПараметров = 4 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2, Параметр3, Параметр4, Параметр5)", Элемент, Параметр1, Параметр2, Параметр3, Параметр4);
					ИначеЕсли КоличествоПараметров = 5 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2, Параметр3, Параметр4, Параметр5)", Элемент, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);
					КонецЕсли;
				Иначе
					Если КоличествоПараметровОбработчика = 0 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "()");
					ИначеЕсли КоличествоПараметровОбработчика = 1 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1)", вхЭлемент);
					ИначеЕсли КоличествоПараметровОбработчика = 2 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2)", вхЭлемент, Параметр1);
					ИначеЕсли КоличествоПараметровОбработчика = 3 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2, Параметр3)", вхЭлемент, Параметр1, Параметр2);
					ИначеЕсли КоличествоПараметровОбработчика = 4 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2, Параметр3, Параметр4)", вхЭлемент, Параметр1, Параметр2, Параметр3);
					ИначеЕсли КоличествоПараметровОбработчика = 5 Тогда
						Форма.ВыполнитьМакрос(СокрЛП(СтароеДействие) + "(Параметр1, Параметр2, Параметр3, Параметр4, Параметр5)", вхЭлемент, Параметр1, Параметр2, Параметр3, Параметр4);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;		
			
			Если тзОбработчики.Индекс(Обработчик) < 0 Тогда Прервать; КонецЕсли;
			
			Если Обработчик.ВНачало = Ложь Тогда
				Если Элемент = Форма Тогда
					Прекратить = Форма.ВыполнитьМакрос(Обработчик.Обработчик.Формула, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);
				Иначе
					Прекратить = Форма.ВыполнитьМакрос(Обработчик.Обработчик.Формула, Элемент, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);
				КонецЕсли;
				Если Прекратить = Истина Тогда Прервать; КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		стрОшибка = ОписаниеОшибки();
		новаОбщиеПроцедуры.ВывестиПодробнуюИнформациюОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Событие = "ПриЗакрытии" Тогда
		тзОбработчики.Очистить();
		соСоответствиеСобытий.Очистить();
		Форма.Расширение.НазначенныеСобытия.Очистить();
		Если Форма.Расширение.ОсвобождатьРесурсыАвтоматически Тогда
			Форма.Расширение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает имя предопределенной процедуры для назначения обработчика события элемента
//
// Параметры:
//  КодСобытия			 - Число - код события;
//  КоличествоПараметров - Число - количество параметров обработчика события;
// 
// Возвращаемое значение: 
//  Строка - имя процедуры
//
Функция ПолучитьИмяОбработчикаДействия(КодСобытия, КоличествоПараметров)
	
	Если КоличествоПараметров = 0 Тогда
		Возврат "ОбработчикДействия" + Строка(КодСобытия);
	Иначе
		Возврат "ОбработчикДействия" + Строка(КоличествоПараметров - 1) + "_" + Строка(КодСобытия);
	КонецЕсли;
	
КонецФункции

// Инициализирует форму
//
// Параметры:
//  Форма       - Форма - форма, которую инициализируем;
//  Расширение  - Структура - переменная модуля формы "Расширение";
// 
Процедура ПодключитьФорму(Форма, Расширение, ИмяФормы = Неопределено, ОсвобождатьРесурсыАвтоматически = Ложь) Экспорт
	
	Если  РольДоступна("новаАдминистраторУТЛ")
		ИЛИ РольДоступна("новаПользовательУТЛ")
		ИЛИ РольДоступна("Логист") Тогда //+++ Костя 031115
		 новаКонтекст.СборщикМусора.ЗарегистрироватьРасширениеФормы(Форма);
	КонецЕсли;
			
	Если ТипЗнч(Расширение) <> Тип("Структура") Тогда
		Расширение = Новый Структура;	
	КонецЕсли;
	Расширение.Вставить("СчетчикДобавленныхЭлементов", 0);
	Расширение.Вставить("ОсвобождатьРесурсыАвтоматически", ОсвобождатьРесурсыАвтоматически);
	
	тзОбработчики = Новый ТаблицаЗначений;
	тзОбработчики.Колонки.Добавить("Элемент");
	тзОбработчики.Колонки.Добавить("Событие");
	тзОбработчики.Колонки.Добавить("СтароеДействие");
	тзОбработчики.Колонки.Добавить("НовоеДействие");
	тзОбработчики.Колонки.Добавить("Обработчик");
	тзОбработчики.Колонки.Добавить("ВНачало");
	Расширение.Вставить("ОбработчикиСобытий", тзОбработчики);
	Расширение.Вставить("СоответствиеСобытий", Новый Соответствие);
	Расширение.Вставить("НазначенныеСобытия", Новый Соответствие);
	
	Расширение.Вставить("ИмяФормы", ИмяФормы);
	
	Если ИмяФормы <> Неопределено Тогда
		новаИнтеграция.ИнициализацияФормы(Форма, Расширение);
	КонецЕсли;
	
	УстановитьОбработчикСобытия(Форма, Форма, "ПередОткрытием", 2, "",, Расширение);
	УстановитьОбработчикСобытия(Форма, Форма, "ПриОткрытии", 0, "",, Расширение);
	УстановитьОбработчикСобытия(Форма, Форма, "ПриЗакрытии", 0, "",, Расширение);
	
КонецПроцедуры

// Удаляет все назначенные элементу обработчики события
//
// Параметры:
//  Форма       - Форма - форма, на которой расположен элемент;
//  Элемент     - Элемент формы или Форма - элемент формы, форма или кнопка командной панели;
//  Событие     - Строка, Неопределено - имя события; если не задано, удаляются все события;
//	нопКонтекст - Структура - контейнер глобальных переменных;
// 
Процедура ОчиститьОбработчикиСобытия(Форма, Элемент, Событие = Неопределено) Экспорт
	
	тзОбработчики = Форма.Расширение.ОбработчикиСобытий;
	Если Событие = Неопределено Тогда
		мсОбработчики = тзОбработчики.НайтиСтроки(Новый Структура("Элемент", Элемент));
	Иначе
		мсОбработчики = тзОбработчики.НайтиСтроки(Новый Структура("Элемент, Событие", Элемент, Событие));
	КонецЕсли;
	Для Каждого стрОбработчик Из мсОбработчики Цикл
		тзОбработчики.Удалить(стрОбработчик);
	КонецЦикла;
	
КонецПроцедуры

// Назначает элементу обработчик события
//
// Параметры:
//  Форма				 <Форма>: форма, на которой расположен элемент;
//  Элемент				 <ЭлементФормы, Форма, КнопкаКоманднойПанели>: объект, которому назначается событие;
//  Событие				 - Строка - имя события;
//  КоличествоПараметров - Число - количество параметров обработчика события;
//  Формула     - Строка - код, выполняемый в контексте формы;
//  ВНачало     - Истина - добавлять обработчик в начало цепочки;
// 
Функция УстановитьОбработчикСобытия(Форма, Элемент, Событие, вхКоличествоПараметров, Формула, ВНачало = Истина, Расширение = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Расширение) Тогда
		ТекущееРасширение = Расширение;
	Иначе	
		ТекущееРасширение = Форма.Расширение;
	КонецЕсли;
	
	Если НЕ ТекущееРасширение.Свойство("ОбработчикиСобытий") Тогда 
		Возврат Неопределено; 
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("Форма") Тогда
		КоличествоПараметров = вхКоличествоПараметров;
		
	ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаКоманднойПанели") Тогда
		КоличествоПараметров = вхКоличествоПараметров + 1;
		
	Иначе
		КоличествоПараметров = вхКоличествоПараметров + 1;
	КонецЕсли;
	
	соСобытияЭлементаПоКоличествуПараметров = ТекущееРасширение.НазначенныеСобытия[Элемент];
	Если соСобытияЭлементаПоКоличествуПараметров = Неопределено Тогда
		соСобытияЭлементаПоКоличествуПараметров = Новый Соответствие;
		ТекущееРасширение.НазначенныеСобытия.Вставить(Элемент, соСобытияЭлементаПоКоличествуПараметров);
	КонецЕсли;
	
	сзСобытияЭлементаПоИмени = соСобытияЭлементаПоКоличествуПараметров[КоличествоПараметров];
	Если сзСобытияЭлементаПоИмени = Неопределено Тогда
		сзСобытияЭлементаПоИмени = Новый СписокЗначений;
		соСобытияЭлементаПоКоличествуПараметров.Вставить(КоличествоПараметров, сзСобытияЭлементаПоИмени);
	КонецЕсли;
	
	ЭлСобытие = сзСобытияЭлементаПоИмени.НайтиПоЗначению(Событие);
	Если ЭлСобытие = Неопределено Тогда
		Если сзСобытияЭлементаПоИмени.Количество() > 5 Тогда
			Сообщить("Превышено допустимое количество обработчиков событий!", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		Иначе
			сзСобытияЭлементаПоИмени.Добавить(Событие);
			КодСобытия = сзСобытияЭлементаПоИмени.Количество();
		КонецЕсли;
	Иначе
		КодСобытия = сзСобытияЭлементаПоИмени.Индекс(ЭлСобытие) + 1;
	КонецЕсли;
	
	соСобытияЭлемента = ТекущееРасширение.СоответствиеСобытий[Элемент];
	Если соСобытияЭлемента = Неопределено Тогда
		соСобытияЭлемента = Новый Соответствие;
		ТекущееРасширение.СоответствиеСобытий.Вставить(Элемент, соСобытияЭлемента);
	КонецЕсли;
	соСобытияЭлемента.Вставить(Строка(КоличествоПараметров) + "_" + Строка(КодСобытия), Событие);
	
	тзОбработчики = ТекущееРасширение.ОбработчикиСобытий;
	Если ВНачало Тогда
		Обработчик = тзОбработчики.Вставить(0);
	Иначе
		Обработчик = тзОбработчики.Добавить();
	КонецЕсли;
	Обработчик.Элемент = Элемент;
	Обработчик.Событие = Событие;
	Обработчик.Обработчик = Новый Структура("Формула", Формула);
	Обработчик.ВНачало = ВНачало;
	
	Попытка
		Если ТипЗнч(Элемент) = Тип("КнопкаКоманднойПанели") Тогда
			СтароеДействие = Элемент.Действие;
			Попытка
				стрСтароеДействие = СокрЛП(СтароеДействие);
			Исключение
				стрСтароеДействие = "ПустоеДействие";
			КонецПопытки;
			Если (СтароеДействие = Неопределено) Или (стрСтароеДействие = "ПустоеДействие") Тогда
				НовоеДействие = Новый Действие(ПолучитьИмяОбработчикаДействия(КодСобытия, КоличествоПараметров));
				Элемент.Действие = НовоеДействие;
				Обработчик.НовоеДействие = НовоеДействие;
			Иначе
				Если тзОбработчики.Найти(СтароеДействие, "НовоеДействие") = Неопределено Тогда
					Обработчик.СтароеДействие = СтароеДействие;
					НовоеДействие = Новый Действие(ПолучитьИмяОбработчикаДействия(КодСобытия, КоличествоПараметров));
					Элемент.Действие = НовоеДействие;
					Обработчик.НовоеДействие = НовоеДействие;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			СтароеДействие = Элемент.ПолучитьДействие(Событие);
			Если СтароеДействие = Неопределено Тогда
				НовоеДействие = Новый Действие(ПолучитьИмяОбработчикаДействия(КодСобытия, КоличествоПараметров));
				Элемент.УстановитьДействие(Событие, НовоеДействие);
				Обработчик.НовоеДействие = НовоеДействие;
			Иначе
				Если тзОбработчики.Найти(СтароеДействие, "НовоеДействие") = Неопределено Тогда
					Обработчик.СтароеДействие = СтароеДействие;
					НовоеДействие = Новый Действие(ПолучитьИмяОбработчикаДействия(КодСобытия, КоличествоПараметров));
					Элемент.УстановитьДействие(Событие, НовоеДействие);
					Обработчик.НовоеДействие = НовоеДействие;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Если Найти(Ошибка, "Процедура, указанная в качестве обработчика события, имеет неверное количество параметров") > 0 Тогда
			Сообщить(Ошибка, СтатусСообщения.Важное);
			Сообщить("Следует использовать...");
				
			Для ъ = 0 По 4 Цикл
				Если ъ = КоличествоПараметров Тогда Продолжить; КонецЕсли;
				Попытка
					НовоеДействие = Новый Действие(ПолучитьИмяОбработчикаДействия(КодСобытия, ъ));
					Элемент.УстановитьДействие(Событие, НовоеДействие);
				Исключение
					Продолжить;					
				КонецПопытки;
				Сообщить(ъ);
			КонецЦикла;
		Иначе
			Сообщить(Ошибка, СтатусСообщения.Важное);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Обработчик;
	
КонецФункции

// Добавляет в расширение формы произвольный объект.
//
// Параметры:
//  Форма  <Форма>
//  Объект <ЛюбойОбъект>
//
// Возвращаемое значение:
//  <Строка>: путь, по которому можно получить добавленный объект в контексте формы.
//
Функция ДобавитьОбъектНаФорму(Форма, Объект) Экспорт
	ИмяОбъекта = "Объект" + СтрЗаменить(Строка(Форма.Расширение.СчетчикДобавленныхЭлементов), Символы.НПП, "");
	Форма.Расширение.СчетчикДобавленныхЭлементов = Форма.Расширение.СчетчикДобавленныхЭлементов + 1;
	Форма.Расширение.Вставить(ИмяОбъекта, Объект);
	
	Возврат "Расширение." + ИмяОбъекта;
КонецФункции

// Создает на форме элемент управления заданного типа, назначая ему уникальное имя.
// Созданные элементы относятся к заданному интерфейсу, для их последующего удаления при его отключении.
//
// Параметры:
//  Форма       <Форма>
//  ТипЭлемента <Тип>
//  Панель      <Панель>
//  Интерфейс   <ЛюбоеЗначение>: группирует добавленные элементы.
//
// Возвращаемое значение:
//  <ЭлементУправления>
//
Функция ДобавитьЭлементНаФорму(Форма, ТипЭлемента, Панель, Интерфейс = Неопределено) Экспорт
	
	ИмяЭлемента = "ДобЭлемент" + СтрЗаменить(Строка(Форма.Расширение.СчетчикДобавленныхЭлементов), Символы.НПП, "");
	Форма.Расширение.СчетчикДобавленныхЭлементов = Форма.Расширение.СчетчикДобавленныхЭлементов + 1;
	Элемент = Форма.ЭлементыФормы.Добавить(ТипЭлемента, ИмяЭлемента, Истина, Панель);
	
	Если Интерфейс <> Неопределено Тогда
		
		Если Не Форма.Расширение.Свойство("ДобавленныеЭлементыИнтерфейсов") Тогда
			Форма.Расширение.Вставить("ДобавленныеЭлементыИнтерфейсов", Новый Соответствие);
		КонецЕсли;
		
		ДобавленныеЭлементы = Форма.Расширение.ДобавленныеЭлементыИнтерфейсов[Интерфейс];
		Если ДобавленныеЭлементы = Неопределено Тогда
			ДобавленныеЭлементы = Новый Массив;
			Форма.Расширение.ДобавленныеЭлементыИнтерфейсов.Вставить(Интерфейс, ДобавленныеЭлементы);
		КонецЕсли;
		ДобавленныеЭлементы.Добавить(Элемент);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Удаляет ранее добавленные на форму элементы управления, принадлежащие определенному интерфейсу.
//
// Параметры:
//  Форма     <Форма>
//  Интерфейс <ЛюбойОбъект>
//
Процедура УдалитьЭлементыСФормы(Форма, Интерфейс) Экспорт
	
	Если Не Форма.Расширение.Свойство("ДобавленныеЭлементыИнтерфейсов") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленныеЭлементы = Форма.Расширение.ДобавленныеЭлементыИнтерфейсов[Интерфейс];
	Если ДобавленныеЭлементы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ДобавленныеЭлементы Цикл
		новаОбщиеПроцедуры.УдалитьПолеВводаСКоманднойПанели(Форма, Элемент);
		ОчиститьОбработчикиСобытия(Форма, Элемент);
		Форма.ЭлементыФормы.Удалить(Элемент);
	КонецЦикла;
	
	Форма.Расширение.ДобавленныеЭлементыИнтерфейсов.Удалить(Интерфейс);
	
КонецПроцедуры

// Копирует привязку границы одного элемента управления в другой.
//
// Параметры:
//  Приемник         <ЭлементУправления>
//  Источник         <ЭлементУправления>
//  ГраницаПриемника <ГраницаЭлементаУправления>
//  ГраницаИсточника <ГраницаЭлементаУправления>
//
Процедура СкопироватьПривязку(Приемник, Источник, ГраницаПриемника, ГраницаИсточника) Экспорт
	ЭлементПривязки1 = Неопределено;
	ГраницаПривязки1 = Неопределено;
	ЭлементПривязки2 = Неопределено;
	ГраницаПривязки2 = Неопределено;
	Источник.ПолучитьПривязку(ГраницаИсточника, ЭлементПривязки1, ГраницаПривязки1, ЭлементПривязки2, ГраницаПривязки2);
	Приемник.УстановитьПривязку(ГраницаПриемника, ЭлементПривязки1, ГраницаПривязки1, ЭлементПривязки2, ГраницаПривязки2);
КонецПроцедуры

//Отключение подключенных обработчиков
//
Процедура ВыполнитьОсвобождениеРесурсов(Форма) Экспорт
	
	Если Форма.Расширение <> Неопределено Тогда
		
		Форма.Расширение.ОбработчикиСобытий.Очистить();
		Форма.Расширение.СоответствиеСобытий.Очистить();
		Форма.Расширение.НазначенныеСобытия.Очистить();
		
		Если Форма.Расширение.Свойство("ДобавленныеЭлементыИнтерфейсов") Тогда
			
			Для каждого ДобавленныеЭлементы Из Форма.Расширение.ДобавленныеЭлементыИнтерфейсов Цикл
				
				Для Каждого Элемент Из ДобавленныеЭлементы.Значение Цикл
					
					новаОбщиеПроцедуры.УдалитьПолеВводаСКоманднойПанели(Форма, Элемент);
					ОчиститьОбработчикиСобытия(Форма, Элемент);
					Форма.ЭлементыФормы.Удалить(Элемент);
				КонецЦикла;
			КонецЦикла;
			
			Форма.Расширение.ДобавленныеЭлементыИнтерфейсов.Очистить();
		КонецЕсли;
		
		Форма.Расширение.Очистить();
		Форма.Расширение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
