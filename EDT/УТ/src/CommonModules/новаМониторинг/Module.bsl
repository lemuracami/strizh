
//Инициализация механизмов мониторинга
//
Процедура Инициализировать(новаКонтекст) Экспорт
	
	#Если Клиент тогда
		Если РольДоступна("новаПоставщикДанныхСопровождения") Тогда
			
			ПоставщикДанныхСопровождения = Обработки.новаПоставщикДанныхСопровождения.Создать();
			ПоставщикДанныхСопровождения.Настроить();
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьТерминалТранспорта(Транспорт, МоментВремени) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    Терминал
	|  ИЗ
	|    Документ.новаРасположениеТерминала
	|  ГДЕ
	|    Расположение = &Транспорт
	|    И НачалоПериода <= &МоментВремени
	|  УПОРЯДОЧИТЬ ПО
	|    НачалоПериода УБЫВ
	|    ,МоментВремени ВОЗР
	|");
	
	Запрос.УстановитьПараметр("Транспорт", Транспорт);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Выборка.Терминал;
	КонецЕсли;
	
	возврат Результат;
	
КонецФункции

//**** Постановка рейса на сопровождение ****//

//Возвращает время начала окна сопровождения рейса
//
//  Параметры:
//    Рейс - <БизнеспроцессСсылка.новаРейсМестнойДоставки, БизнеспроцессОбъект.новаРейсМестнойДоставки> рейс
//    РассчитатьЗаново - <Булево> Истина - рассчитать, даже если в рейсе указано
//
Функция ПолучитьНачалоОкнаСопровожденияРейса(Рейс, РассчитатьЗаново = Истина) Экспорт
	
	Результат = Неопределено;
	
	Если не РассчитатьЗаново Тогда
		Результат = Рейс.НачалоОкнаСопровождения;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Результат) Тогда
		
		ДопустимоеФактическоеОпережениеГрафикаРейса = Константы.новаДопустимоеФактическоеОпережениеГрафикаРейса.Получить();
		
		Если Константы.новаДопустимоеФактическоеОпережениеГрафикаРейсаУказаноОтносительно.Получить() Тогда
			Результат = Рейс.ДатаНачала - (ДопустимоеФактическоеОпережениеГрафикаРейса - '00010101');
		Иначе
			Результат = НачалоДня(Рейс.ДатаНачала) + (ДопустимоеФактическоеОпережениеГрафикаРейса - '00010101');
			Если Рейс.ДатаНачала < Результат Тогда
				Результат = Рейс.ДатаНачала;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Возвращает время конца окна сопровождения рейса
//
//  Параметры:
//    Рейс - <БизнеспроцессСсылка.новаРейсМестнойДоставки, БизнеспроцессОбъект.новаРейсМестнойДоставки> рейс
//    РассчитатьЗаново - <Булево> Истина - рассчитать, даже если в рейсе указано
//
Функция ПолучитьКонецОкнаСопровожденияРейса(Рейс, РассчитатьЗаново = Истина) Экспорт
	
	Результат = Неопределено;
	
	Если не РассчитатьЗаново Тогда
		Результат = Рейс.КонецОкнаСопровождения;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Результат) Тогда
		
		ДопустимоеФактическоеОпозданиеОтГрафикаРейса = Константы.новаДопустимоеФактическоеОпозданиеОтГрафикаРейса.Получить();
		
		Если Константы.новаДопустимоеФактическоеОпережениеГрафикаРейсаУказаноОтносительно.Получить() Тогда
			Результат = Рейс.ДатаКонца + (ДопустимоеФактическоеОпозданиеОтГрафикаРейса - '00010101');
		Иначе
			Результат = НачалоДня(Рейс.ДатаНачала) + (ДопустимоеФактическоеОпозданиеОтГрафикаРейса - '00010101');
			Если Рейс.ДатаНачала > Результат Тогда
				Результат = Рейс.ДатаКонца;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Очистка данных автоматического сопровождения по рейсу. Данные, у которых проставлен признак *УказаноВРучную не обнуляются.
//
//  Параметры:
//    Рейс - <БизнеспроцессСсылка.новаРейсМестнойДоставки> рейс
//
Процедура ОчиститьДанныеАвтоматическогоСопровождения(Рейс)
	
	НачатьТранзакцию();
	
	обРейс = Рейс.ПолучитьОбъект();
	Если не обРейс.ФактическоеВремяНачалаУказаноВручную Тогда
		обРейс.ДатаНачалаФакт = '00010101';
	КонецЕсли;
	Если не обРейс.ФактическоеВремяКонцаУказаноВручную Тогда
		обРейс.ДатаКонцаФакт = '00010101';
	КонецЕсли;
	обРейс.РасстояниеФакт = 0;
	обРейс.Записать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Рейс
	|    ,НомерТочки
	|    ,МаршрутСопровождения
	|    ,КодТочки
	|    ,Действие
	|    ,ТочкаМаршрута
	|    ,ПлановаяДатаПосещения
	|    ,ПлановоеВремяПосещения
	|    ,ПлановоеВремяПосещенияУказаноВручную
	|    ,ФактическоеВремяПосещенияУказаноВручную
	|    ,КодУчасткаТрекаКТочке
	|    ,КодУчасткаТрекаОтТочки
	|    ,РасстояниеКТочке
	|    ,РасстояниеОтТочки
	|    ,ВремяКТочке
	|    ,ВремяОтТочки
	|    ,ИдТочки
	|  ИЗ
	|    РегистрСведений.новаТочкиМаршрутаРейсов
	|  ГДЕ
	|    Рейс = &Рейс
	|    И МаршрутСопровождения
	|    И (НЕ ФактическоеВремяПосещенияУказаноВручную)
	|  ДЛЯ ИЗМЕНЕНИЯ
	|    РегистрСведений.новаТочкиМаршрутаРейсов
	|");
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МЗ = РегистрыСведений.новаТочкиМаршрутаРейсов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			
			МЗ.ДатаПрибытия = '00010101';
			МЗ.ДатаУбытия = '00010101';
			
			МЗ.Записать();
		КонецЦикла;
	КонецЕсли;
	
	НЗ = РегистрыСведений.новаВнеплановыеСтоянкиРейсов.СоздатьНаборЗаписей();
	НЗ.Отбор.Рейс.Установить(Рейс);
	
	НЗ.Записать();
	
	НЗ = РегистрыСведений.новаСобытияРейсов.СоздатьНаборЗаписей();
	НЗ.Отбор.Рейс.Установить(Рейс);
	
	НЗ.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

//Передаёт данные рейса на КСЛ для сопровождения
//
//  Параметры:
//    Рейс - <БизнеспроцессСсылка.новаРейсМестнойДоставки>
//
Процедура НачатьСопровождениеРейса(Рейс) Экспорт
	
	ОчиститьДанныеАвтоматическогоСопровождения(Рейс);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    НачалоРейса
	|    ,ДатаНачала
	|    ,ИдНачала
	|    ,НачалоРейсаУказаноВручную
	|    ,КонецРейса
	|    ,ДатаКонца
	|    ,ИдКонца
	|    ,КонецРейсаУказанВручную
	|    ,КонецРейсаСовпадаетСНачалом
	|  ПОМЕСТИТЬ
	|    Рейсы
	|  ИЗ
	|    БизнесПроцесс.новаРейсМестнойДоставки
	|  ГДЕ
	|    Ссылка = &Рейс
	|;
	|////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|    ТочкаМаршрута
	|    ,ПлановаяДатаПосещения
	|    ,ПлановоеВремяПосещения
	|    ,ИдТочки
	|    ,НомерТочки
	|  ПОМЕСТИТЬ
	|    ТочкиМаршрута
	|  ИЗ
	|    РегистрСведений.новаТочкиМаршрутаРейсов
	|  ГДЕ
	|    Рейс = &Рейс
	|    И НЕ МаршрутСопровождения
	|;
	|////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|    ПРЕДСТАВЛЕНИЕ(НачалоРейса) КАК ПредставлениеТочкиДоставки
	|    ,НачалоРейса.Радиус КАК Радиус
	|    ,НачалоРейса.Адрес.Широта КАК Широта
	|    ,НачалоРейса.Адрес.Долгота КАК Долгота
	|    ,НачалоРейса.ВремяНахождениеТранспортаВРадиусе КАК ДлительностьНахожденияВЗоне
	|    ,ДатаНачала КАК ПлановоеВремяПрибытия
	|    ,ДАТАВРЕМЯ(1, 1, 1) КАК ПлановаяДлительностьПребывания
	|    ,ИдНачала КАК ИдТочки
	|    ,""Стартовая"" КАК Вид
	|    ,-1 КАК Порядок
	|  ИЗ
	|    Рейсы
	|  ГДЕ
	|    НачалоРейсаУказаноВручную
	|    И ( НЕ (НачалоРейса В
	|      (
	|         ВЫБРАТЬ ПЕРВЫЕ 1
	|             ТочкаМаршрута
	|           ИЗ
	|             ТочкиМаршрута
	|           УПОРЯДОЧИТЬ ПО
	|             НомерТочки
	|      )))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|    ПРЕДСТАВЛЕНИЕ(ТочкаМаршрута)
	|    ,ТочкаМаршрута.Радиус
	|    ,ТочкаМаршрута.Адрес.Широта
	|    ,ТочкаМаршрута.Адрес.Долгота
	|    ,ТочкаМаршрута.ВремяНахождениеТранспортаВРадиусе
	|    ,ПлановаяДатаПосещения
	|    ,ПлановоеВремяПосещения
	|    ,ИдТочки
	|    ,ВЫБОР
	|      КОГДА УдаляемаяТочкаМаршрута ЕСТЬ NULL
	|        ТОГДА ""Плановая""
	|      ИНАЧЕ ""Конечная""
	|    КОНЕЦ
	|    ,НомерТочки
	|  ИЗ
	|    ТочкиМаршрута
	|    ЛЕВОЕ СОЕДИНЕНИЕ
	|        (
	|          ВЫБРАТЬ РАЗЛИЧНЫЕ
	|              НомерПоследнейТочки КАК НомерПоследнейТочки
	|              ,ТочкаМаршрута КАК УдаляемаяТочкаМаршрута
	|            ИЗ
	|              ТочкиМаршрута
	|              СОЕДИНЕНИЕ 
	|                  (
	|                    ВЫБРАТЬ
	|                        МАКСИМУМ(НомерТочки) КАК НомерПоследнейТочки
	|                      ИЗ
	|                        ТочкиМаршрута
	|                  ) КАК ПоследняяТочкаМаршрута
	|                ПО
	|                  ИСТИНА // Периодически не корректно обрабатывается соединение таблиц чере запятую
	|            ГДЕ
	|              ТочкаМаршрута В
	|                (
	|                  ВЫБРАТЬ
	|                      КонецРейса
	|                    ИЗ
	|                      Рейсы
	|                    ГДЕ
	|                      КонецРейсаУказанВручную
	|                      ИЛИ КонецРейсаСовпадаетСНачалом
	|                )
	|        ) КАК УдаляемыеТочки
	|      ПО
	|        ТочкаМаршрута = УдаляемаяТочкаМаршрута
	|        И НомерТочки = НомерПоследнейТочки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|    ПРЕДСТАВЛЕНИЕ(КонецРейса)
	|    ,КонецРейса.Радиус
	|    ,КонецРейса.Адрес.Широта
	|    ,КонецРейса.Адрес.Долгота
	|    ,КонецРейса.ВремяНахождениеТранспортаВРадиусе
	|    ,ДатаКонца
	|    ,ДАТАВРЕМЯ(1, 1, 1)
	|    ,ИдКонца
	|    ,""Конечная""
	|    ,99999999 //Очень сомнительно, что транспорт повезёт больше доставок
	|  ИЗ
	|    Рейсы
	|  ГДЕ
	|    ( КонецРейсаУказанВручную
	|      ИЛИ КонецРейсаСовпадаетСНачалом)
	|    И ( НЕ (КонецРейса В
	|      (
	|         ВЫБРАТЬ ПЕРВЫЕ 1
	|             ТочкаМаршрута
	|           ИЗ
	|             ТочкиМаршрута
	|           УПОРЯДОЧИТЬ ПО
	|             НомерТочки УБЫВ
	|      )))
	|
	|  УПОРЯДОЧИТЬ ПО
	|    Порядок
	|");
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
		
		РадиусПоУмолчанию = Константы.новаРадиусТочкиДоставки.Получить();
		
		Сопровождение = КСЛ.Сопровождение_СопровождениеРейса();
		
		Сопровождение.Ид = Строка(Рейс.УникальныйИдентификатор());
		Сопровождение.Рейс.Ид = Сопровождение.Ид;
		Сопровождение.Транспорт.Ид = Строка(Рейс.Транспорт.УникальныйИдентификатор());
		Сопровождение.МоментВремени = Рейс.Дата - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
		Сопровождение.Номер = Рейс.Номер;
		Если ЗначениеЗаполнено(Рейс.НачалоОкнаСопровождения) Тогда
			Сопровождение.НачалоОкна = Рейс.НачалоОкнаСопровождения - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
		Иначе
			Сопровождение.НачалоОкна = ПолучитьНачалоОкнаСопровожденияРейса(Рейс, Ложь) - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
		КонецЕсли;
		Если ЗначениеЗаполнено(Рейс.КонецОкнаСопровождения) Тогда
			Сопровождение.КонецОкна = Рейс.КонецОкнаСопровождения - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
		Иначе
			Сопровождение.КонецОкна = ПолучитьКонецОкнаСопровожденияРейса(Рейс, Ложь) - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
		КонецЕсли;
		Сопровождение.Состояние = "ОжидаетВыполнения";
		
		ДлительностьНахожденияВЗонеПоУмолчанию = Константы.новаВремяНахождениеТранспортаВРадиусеТочкиДоставки.Получить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТочкаСопровождения = КСЛ.Сопровождение_ТочкаМаршрутаСопровождения();
			ТочкаСопровождения.Ид = Выборка.ИдТочки;
			ТочкаСопровождения.СопровождениеМаршрута.Ид = Сопровождение.Ид;
			ТочкаСопровождения.Наименование = Выборка.ПредставлениеТочкиДоставки;
			ТочкаСопровождения.ПлановоеВремяПрибытия = Выборка.ПлановоеВремяПрибытия - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
			ТочкаСопровождения.ПлановаяДлительностьПребывания = Выборка.ПлановаяДлительностьПребывания - '00010101';
			ТочкаСопровождения.Вид = Выборка.Вид;
			Если ЗначениеЗаполнено(Выборка.Радиус) Тогда
				ТочкаСопровождения.Радиус = Выборка.Радиус;
			Иначе
				ТочкаСопровождения.Радиус = РадиусПоУмолчанию;
			КонецЕсли;
			ТочкаСопровождения.Координаты.Широта = Выборка.Широта;
			ТочкаСопровождения.Координаты.Долгота = Выборка.Долгота;
			Если ЗначениеЗаполнено(Выборка.ДлительностьНахожденияВЗоне) Тогда
				ТочкаСопровождения.ДлительностьНахожденияВЗоне = (Выборка.ДлительностьНахожденияВЗоне - '00010101');
			Иначе
				ТочкаСопровождения.ДлительностьНахожденияВЗоне = (ДлительностьНахожденияВЗонеПоУмолчанию - '00010101');
			КонецЕсли;

			Сопровождение.Маршрут.Добавить(ТочкаСопровождения);
		КонецЦикла;
		
		Сопровождение.Сохранить();
	КонецЕсли;
	
КонецПроцедуры

//**** АРМ водителя ****//

//Обновление списка сообщений доступных водителю для отправки
//
Процедура ОбновитьСписокСообщенийАРМВодителя() Экспорт
	
	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Ссылка
	|  ИЗ
	|    Справочник.новаТерминалы
	|  ГДЕ
	|    Настраиваемый
	|    И (НЕ ПометкаУдаления)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|    Ссылка
	|  ИЗ
	|    Справочник.новаСообщенияАРМВодителя
	|  ГДЕ
	|    НЕ ПометкаУдаления
	|");
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатПоТерминалам = РезультатыЗапроса[0];
	РезультатПоСообщениям = РезультатыЗапроса[1];
	
	Если не ( РезультатПоТерминалам.Пустой()
		      или РезультатПоСообщениям.Пустой()) Тогда
		
		ВыборкаТерминалов = РезультатПоТерминалам.Выбрать();
		Пока ВыборкаТерминалов.Следующий() Цикл
			
            Запись = КСЛ.Мониторинг_ЗаписьИсторииСообщенийАРМВодитля();
            Запись.Вид = "УдалениеСпискаСообщений";
            Запись.Выполнено = Ложь;
            Запись.Ид = Строка(Новый УникальныйИдентификатор());
            Запись.МоментВремени = ТекущаяДата() - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
            Запись.МоментВремениПрименения = Запись.МоментВремени;
            Запись.Получатель = "АрмВодителя";
            Запись.Принадлежность = "Пользовательское";
            Запись.Терминал.Ид = Строка(ВыборкаТерминалов.Ссылка.УникальныйИдентификатор());

            Запись.Сохранить();
			
			ВыборкаПоСообщениям = РезультатПоСообщениям.Выбрать();
			Пока ВыборкаПоСообщениям.Следующий() Цикл
				
				Сообщение = КСЛ.Мониторинг_СообщениеАРМВодителяСсылка();
				Сообщение.Ид = Строка(ВыборкаПоСообщениям.Ссылка.УникальныйИдентификатор());
				
	            Запись = КСЛ.Мониторинг_ЗаписьИсторииСообщенийАРМВодитля();
	            Запись.Вид = "ОбновлениеСпискаСообщений";
	            Запись.Выполнено = Ложь;
	            Запись.Ид = Строка(Новый УникальныйИдентификатор());
	            Запись.МоментВремени = ТекущаяДата() - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
	            Запись.МоментВремениПрименения = Запись.МоментВремени + 15;
                Запись.ПредметСообщения.Заполнить(Сообщение);
	            Запись.Получатель = "АрмВодителя";
	            Запись.Принадлежность = "Пользовательское";
	            Запись.Терминал.Ид = Строка(ВыборкаТерминалов.Ссылка.УникальныйИдентификатор());

	            Запись.Сохранить();
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Обновление настроек АРМ водителя
//  Если указан первый параметр, то обновляются настройки только по нему. В этом случае второй параметр игнорируется.
//  Если первый параметр не указан, а второй указан , то обновляются все терминалы ссылающиеся на эти настройки.
//
//  Параметры:
//    Терминал - <СправочникСсылка.новаТерминалы> обновляемый терминал
//    НастройкаТерминала - <СправочникСсылка.новаНастройкиТерминалов> настройки терминала, которые необходимо отправить
//
Процедура ОбновитьНастройкиАРМВодителя(Терминал = Неопределено, НастройкаТерминала = Неопределено) Экспорт
	
	Если Терминал = Неопределено
		 и НастройкаТерминала = Неопределено Тогда
		
		ВызватьИсключение "Одновременно не заданы параметры: ""Терминал"" и ""НастройкаТерминала"".";
	КонецЕсли;
	
	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	
	ОбновляемыеТерминалы = Новый Массив;
	
	Если Терминал <> Неопределено Тогда
		
		ОбновляемыеТерминалы.Добавить(Терминал);
		НастройкаТерминала = Терминал.Настройки;
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|    Ссылка
		|  ИЗ
		|    Справочник.новаТерминалы
		|  ГДЕ
		|    Настройки = &НастройкаТерминала
		|    И (НЕ ПометкаУдаления)
		|");
		
		Запрос.УстановитьПараметр("НастройкаТерминала", НастройкаТерминала);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОбновляемыеТерминалы.Добавить(Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаТерминала) Тогда
		
		Для каждого ТекущийТерминал Из ОбновляемыеТерминалы Цикл
			
			Настройки = КСЛ.Мониторинг_Терминалы_НастройкиТерминалаСсылка();
			Настройки.Ид = Строка(НастройкаТерминала.УникальныйИдентификатор());
			
            Запись = КСЛ.Мониторинг_ЗаписьИсторииСообщенийАРМВодитля();
            Запись.Вид = "ОбновлениеНастроек";
            Запись.Выполнено = Ложь;
            Запись.Ид = Строка(Новый УникальныйИдентификатор());
            Запись.МоментВремени = ТекущаяДата() - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
            Запись.МоментВремениПрименения = Запись.МоментВремени;
            Запись.ПредметСообщения.Заполнить(Настройки);
            Запись.Получатель = "АрмВодителя";
            Запись.Принадлежность = "Пользовательское";
            Запись.Терминал.Ид = Строка(ТекущийТерминал.УникальныйИдентификатор());

            Запись.Сохранить();
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

//Передача планового рейса на АРМ водителя
//
//  Параметры:
//    Рейс - <БизнесПроцессСсылка.новаРейсМестнойДоставки> маршрут, который необходимо передать
//
Процедура ОбновитьМаршрутАРМВодителя(Рейс) Экспорт

	КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    Транспорт
	|    ,ДатаНачала КАК МоментВремени
	|  ИЗ
	|    БизнесПроцесс.новаРейсМестнойДоставки
	|  ГДЕ
	|    Ссылка = &Рейс
	|");
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекущийТерминал = ПолучитьТерминалТранспорта(Выборка.Транспорт, Выборка.МоментВремени);
		
		Если ТекущийТерминал <> Неопределено Тогда
			
			РейсКСЛ = КСЛ.Доставка_РейсСсылка();
			РейсКСЛ.Ид = Строка(Рейс.УникальныйИдентификатор());
			
		    Запись = КСЛ.Мониторинг_ЗаписьИсторииСообщенийАРМВодитля();
		    Запись.Вид = "ОбновлениеМаршрута";
		    Запись.Выполнено = Ложь;
		    Запись.Ид = Строка(Новый УникальныйИдентификатор());
		    Запись.МоментВремени = ТекущаяДата() - КСЛ.Клиент_КлиентУТЛ.ЧасовойПояс;
		    Запись.МоментВремениПрименения = Запись.МоментВремени;
		    Запись.ПредметСообщения.Заполнить(РейсКСЛ);
		    Запись.Получатель = "АрмВодителя";
		    Запись.Принадлежность = "Пользовательское";
		    Запись.Терминал.Ид = Строка(ТекущийТерминал.УникальныйИдентификатор());

		    Запись.Сохранить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверка, есть ли для этого водителя текущий рейс на сопровождении
// Если рейс на сопровождении для этого водителя уже есть, то надо выдавать логисту предупреждающее сообщение
//
// Параметры
//  Водитель  - <СправочникСсылка.новаВодители> - водитель, для которого осуществляется проверка
//  Рейс      - <БизнесПроцессСсылка.новаРейсМестнойДоставки> - рейс, на который водитель назначен
//
// Возвращаемое значение:
//   <Булево>   - Истина - рейса на сопровождении существует
//				- Ложь - рейса на сопровождении не существует
Функция СуществуетРейсНаСопровожденииДляВодителя(Водитель, Рейс) Экспорт 

	РейсСуществует = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	новаЗадачаРейсаМестнойДоставкиЗадачиПоИсполнителю.БизнесПроцесс КАК Рейс
		|ИЗ
		|	Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(
		|			,
		|			НЕ Выполнена
		|				И Роль = &Роль
		|				И БизнесПроцесс.Водитель = &Водитель
		|				И БизнесПроцесс <> &Рейс) КАК новаЗадачаРейсаМестнойДоставкиЗадачиПоИсполнителю";

	Запрос.УстановитьПараметр("Водитель", Водитель);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("Роль", Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		РейсСуществует = Истина;
			
	КонецЕсли;
	
	Возврат РейсСуществует;
	
КонецФункции // ПроверкаСуществованиеРейсаНаСопровождения()

// Возвращает массив задач, у коротых для водителей существуют ресы на сопровождении
//
// Параметры
//  мсЗадачи - <Массив[ЗадачаСсылка.новаЗадачаРейсаМестнойДоставки]> - задачи, для которых необходимо проверить существование рейсов на сопровождении
//
// Возвращаемое значение:
//  <Массив[ЗадачаСсылка.новаЗадачаРейсаМестнойДоставки]> - задачи из исходного массива, не прошедшие проверку  
//				
Функция РейсыСИмеющимисяДляВодителейРейсамиНаСопровождении(мсЗадачи) Экспорт 

	РейсСуществует = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|    БизнесПроцесс КАК Рейс
		|    ,Ссылка КАК Задача
		|    ,БизнесПроцесс.Водитель КАК Водитель
		|  ПОМЕСТИТЬ ВТ_Рейсы
		|  ИЗ
		|    Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(, Ссылка В (&мсЗадачи))
		|  ИНДЕКСИРОВАТЬ ПО
		|    Водитель
		|    ,Рейс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|    БизнесПроцесс КАК РейсНаСопровождении
		|    ,БизнесПроцесс.Водитель КАК Водитель
		|  ПОМЕСТИТЬ ВТ_Сопровождение
		|  ИЗ
		|    Задача.новаЗадачаРейсаМестнойДоставки.ЗадачиПоИсполнителю(&РольСопровождение, НЕ выполнена)
		|  ИНДЕКСИРОВАТЬ ПО
		|    Водитель
		|    ,РейсНаСопровождении
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|    ВТ_Рейсы.Рейс КАК Рейс
		|    ,КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Сопровождение.РейсНаСопровождении) КАК РейсНаСопровожденииКоличество
		|    ,ВТ_Рейсы.Водитель КАК Водитель
		|    ,ВТ_Рейсы.Задача
		|  ПОМЕСТИТЬ ВТ_Итог
		|  ИЗ
		|    ВТ_Рейсы КАК ВТ_Рейсы
		|    ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сопровождение КАК ВТ_Сопровождение
		|      ПО
		|        ВТ_Рейсы.Водитель = ВТ_Сопровождение.Водитель
		|        И ВТ_Рейсы.Рейс <> ВТ_Сопровождение.РейсНаСопровождении
		|  СГРУППИРОВАТЬ ПО
		|    ВТ_Рейсы.Рейс
		|    ,ВТ_Рейсы.Водитель
		|    ,ВТ_Рейсы.Задача
		|  ИНДЕКСИРОВАТЬ ПО
		|    Водитель
		|    ,Рейс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|    Рейс
		|    ,РейсНаСопровожденииКоличество
		|    ,Водитель
		|    ,Задача
		|  ИЗ
		|    ВТ_Итог
		|  ГДЕ
		|    РейсНаСопровожденииКоличество > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|    ВТ_Итог.Рейс
		|    ,ВТ_Итог.РейсНаСопровожденииКоличество
		|    ,ВТ_Итог.Водитель
		|    ,ВТ_Итог.Задача
		|  ИЗ
		|    ВТ_Итог КАК ВТ_Итог
		|    ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейсы КАК ВТ_Рейсы
		|      ПО
		|        ВТ_Итог.Водитель = ВТ_Рейсы.Водитель
		|        И ВТ_Итог.Рейс <> ВТ_Рейсы.Рейс
		|  ГДЕ
		|    ВТ_Итог.РейсНаСопровожденииКоличество = 0
		|    И НЕ ВТ_Рейсы.Рейс ЕСТЬ NULL
		|";

	Запрос.УстановитьПараметр("мсЗадачи", мсЗадачи);
	Запрос.УстановитьПараметр("РольСопровождение", Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки);
	
	Результат = Запрос.Выполнить().Выгрузить();
		
	Возврат Результат.ВыгрузитьКолонку("Задача");
	
КонецФункции 
