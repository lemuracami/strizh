
// Создает пустую таблицу отборов.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьТаблицуОтборов() Экспорт
	тзОтборы = Новый ТаблицаЗначений;
	тзОтборы.Колонки.Добавить("Отбор");
	тзОтборы.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	тзОтборы.Колонки.Добавить("Представление");
	тзОтборы.Колонки.Добавить("ТипЗначения");
	тзОтборы.Колонки.Добавить("ВидСравнения");
	тзОтборы.Колонки.Добавить("Значение");
	тзОтборы.Колонки.Добавить("ЗначениеНачало");
	тзОтборы.Колонки.Добавить("ЗначениеКонец");
	тзОтборы.Колонки.Добавить("НаФорме", Новый ОписаниеТипов("Булево"));
	тзОтборы.Колонки.Добавить("МакросПоместитьЗначениеНаФорму");
	тзОтборы.Колонки.Добавить("МакросПрочитатьЗначениеСФормы");
	тзОтборы.Колонки.Добавить("ЭлементФлажокИспользования");
	тзОтборы.Колонки.Добавить("ЭлементВидСравнения");
	тзОтборы.Колонки.Добавить("ЭлементПолеВвода");
	тзОтборы.Колонки.Добавить("ЭлементПолеВводаНачало");
	тзОтборы.Колонки.Добавить("ЭлементПолеВводаКонец");
	тзОтборы.Колонки.Добавить("ДоступныеВидыСравнений");
	тзОтборы.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	тзОтборы.Колонки.Добавить("НеВключатьВУсловияФормирования", Новый ОписаниеТипов("Булево"));
	
	Возврат тзОтборы;
КонецФункции

// Возвращает пустую таблицу группировок.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаГруппировок]>
//
Функция ПолучитьТаблицуГруппировок() Экспорт
	тзГруппировки = Новый ТаблицаЗначений;
	тзГруппировки.Колонки.Добавить("Группировка");
	тзГруппировки.Колонки.Добавить("Представление");
	тзГруппировки.Колонки.Добавить("Показатели", Новый ОписаниеТипов("Массив"));
	
	Возврат тзГруппировки;
КонецФункции

// Возвращает пустую таблицу показателей.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПоказателей]>
//
Функция ПолучитьТаблицуПоказателей() Экспорт
	тзПоказатели = Новый ТаблицаЗначений;
	тзПоказатели.Колонки.Добавить("Показатель");
	тзПоказатели.Колонки.Добавить("Представление");
	
	Возврат тзПоказатели;
КонецФункции

// Возвращает пустую таблицу сортировок.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьТаблицуСортировок() Экспорт
	тзСортировки = Новый ТаблицаЗначений;
	тзСортировки.Колонки.Добавить("Сортировка");
	тзСортировки.Колонки.Добавить("Представление");
	тзСортировки.Колонки.Добавить("Направление");
	
	Возврат тзСортировки;
КонецФункции

// Возвращает пустую таблицу итогов.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаИтогов]>
//
Функция ПолучитьТаблицуИтогов() Экспорт
	тзИтоги = Новый ТаблицаЗначений;
	тзИтоги.Колонки.Добавить("Псевдоним");
	тзИтоги.Колонки.Добавить("КонтрольнаяТочка");
	тзИтоги.Колонки.Добавить("Поле");
	тзИтоги.Колонки.Добавить("МакросВывода", Новый ОписаниеТипов("Строка"));
	тзИтоги.Колонки.Добавить("Представление");
	тзИтоги.Колонки.Добавить("Иерархия", Новый ОписаниеТипов("Булево"));
	
	Возврат тзИтоги;
КонецФункции

// Копирует таблицу отборов.
//
// Параметры:
//  тзИсточник <ТаблицаЗначений[ТаблицаОтборов]>
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция СкопироватьОтборы(тзИсточник) Экспорт
	тзОтборы = ПолучитьТаблицуОтборов();
	
	Для Каждого Строка Из тзИсточник Цикл
		ЗаполнитьЗначенияСвойств(тзОтборы.Добавить(), Строка, "Отбор,Использование,Представление,ТипЗначения,ВидСравнения,Значение,ЗначениеНачало,ЗначениеКонец,НаФорме,ДоступныеВидыСравнений,ТолькоПросмотр");
	КонецЦикла;
	
	Возврат тзОтборы;
КонецФункции

// Копирует отборы из источника в приемник.
//
// Параметры:
//  тзПриемник <ТаблицаЗначений[ТаблицаОтборов]>
//  тзИсточник <ТаблицаЗначений[ТаблицаОтборов]>
//
Процедура ПеренестиОтборы(тзПриемник, тзИсточник) Экспорт
	Для Каждого стрИсточник Из тзИсточник Цикл
		стрПриемник = тзПриемник.Найти(стрИсточник.Отбор, "Отбор");
		Если стрПриемник = Неопределено Тогда Продолжить; КонецЕсли;
		Если стрПриемник.ТолькоПросмотр Тогда Продолжить; КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(стрПриемник, стрИсточник, "Использование,ВидСравнения,Значение,ЗначениеНачало,ЗначениеКонец");
	КонецЦикла;
КонецПроцедуры

// Открывает форму отчета.
//
// Параметры:
//  ОсновнойОтчет            <ОтчетОбъект>: отчет, который будет открыт.
//  фСформироватьПриОткрытии <Булево>
//
Процедура ОткрытьФормуОтчета(ОсновнойОтчет, фСформироватьПриОткрытии = Ложь) Экспорт
	Форма = ПолучитьОбщуюФорму("новаФормаОтчета",, ОсновнойОтчет);
	Форма.ОсновнойОтчет = ОсновнойОтчет;
	Форма.СформироватьПриОткрытии = фСформироватьПриОткрытии;
	ЗаполнитьПараметрыПоУмолчанию(Форма);
	Форма.Открыть();
КонецПроцедуры

// Рассчитывает, сколько пикселей в высоту займут отборы на форме.
//
// Параметры:
//  Отборы <Коллекция(<СтрокаТаблицыЗначений[ЭлементОтбора]>)>
//
// Возвращаемое значение:
//  <Число>
//
Функция ПолучитьВысотуОтборов(Отборы) Экспорт
	Возврат Отборы.Количество() * (19 + 7);
КонецФункции

// Возвращает уникальное имя элемента упрвавления формы.
//
// Возвращаемое значение:
//  <Строка>
//
Функция НовоеИмяЭлемента()
	Возврат "ЭУ_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "_");
КонецФункции

// Определяет, какие виды сравнения применимы к элементу отбора с определенным типом.
//
// Параметры:
//  Тип <Тип>
//
// Возвращаемое значение:
//  <СписокЗначений(<ВидСравнения>)>
//
Функция ПолучитьСписокВидовСравненийПоТипу(ОписаниеТипов)
	сзВидыСравнений = Новый СписокЗначений;
	
	Тип = ОписаниеТипов.Типы()[0];
	
	Если Тип = Тип("Строка") Тогда
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		сзВидыСравнений.Добавить(ВидСравнения.Содержит, "Содержит");
		сзВидыСравнений.Добавить(ВидСравнения.НеСодержит, "Не содержит");
		
	ИначеЕсли Тип = Тип("Число") Тогда
		сзВидыСравнений.Добавить(ВидСравнения.ИнтервалВключаяГраницы, "Интервал");
		сзВидыСравнений.Добавить(ВидСравнения.БольшеИлиРавно, "Больше или равно");
		сзВидыСравнений.Добавить(ВидСравнения.МеньшеИлиРавно, "Меньше или равно");
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		сзВидыСравнений.Добавить(ВидСравнения.ИнтервалВключаяГраницы, "Интервал");
		сзВидыСравнений.Добавить(ВидСравнения.БольшеИлиРавно, "Больше или равно");
		сзВидыСравнений.Добавить(ВидСравнения.МеньшеИлиРавно, "Меньше или равно");
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		
	Иначе
		сзВидыСравнений.Добавить(ВидСравнения.Равно, "Равно");
		сзВидыСравнений.Добавить(ВидСравнения.НеРавно, "Не равно");
		
		сзВидыСравнений.Добавить(ВидСравнения.ВСписке, "В списке");
		сзВидыСравнений.Добавить(ВидСравнения.НеВСписке, "Не в списке");
		
		мдТип = Метаданные.НайтиПоТипу(Тип);
		Если Метаданные.Справочники.Содержит(мдТип) Тогда
			Если мдТип.Иерархический Тогда
				сзВидыСравнений.Добавить(ВидСравнения.ВИерархии, "В иерархии");
				сзВидыСравнений.Добавить(ВидСравнения.НеВИерархии, "Не в иерархии");
				
				сзВидыСравнений.Добавить(ВидСравнения.ВСпискеПоИерархии, "В списке по иерархии");
				сзВидыСравнений.Добавить(ВидСравнения.НеВСпискеПоИерархии, "Не в списке по иерархии");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат сзВидыСравнений;
КонецФункции

// Формирует представление значения отбора, если отбор задан списком.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>
//
Процедура СформироватьПредставлениеСписка(Отбор) Экспорт
	Текст = "";
	Для Каждого ЭлЗначение Из Отбор.ЭлементПолеВвода.СписокВыбора Цикл
		Текст = Текст + ?(Текст = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
	КонецЦикла;
	Отбор.ЭлементПолеВвода.Значение = Текст;
КонецПроцедуры

// Настраивает элементы управления отбора по типу отбора.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>
//
Процедура НастроитьВидОтбора(Отбор)
	текВидСравнения = Отбор.ЭлементВидСравнения.Значение.Значение;
	Если текВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Отбор.ЭлементПолеВвода.Видимость = Ложь;
		Отбор.ЭлементПолеВводаНачало.Видимость = Истина;
		Отбор.ЭлементПолеВводаКонец.Видимость = Истина;
	Иначе
		Отбор.ЭлементПолеВвода.Видимость = Истина;
		Отбор.ЭлементПолеВводаНачало.Видимость = Ложь;
		Отбор.ЭлементПолеВводаКонец.Видимость = Ложь;
		
		Если текВидСравнения = ВидСравнения.ВСписке
		 Или текВидСравнения = ВидСравнения.ВСпискеПоИерархии
		 Или текВидСравнения = ВидСравнения.НеВСписке
		 Или текВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			 
		    Если Отбор.ЭлементПолеВвода.РедактированиеТекста Тогда
				Если ЗначениеЗаполнено(Отбор.ЭлементПолеВвода.Значение) Тогда
					сзЗначения = Новый СписокЗначений;
					сзЗначения.Добавить(Отбор.ЭлементПолеВвода.Значение);
					Отбор.ЭлементПолеВвода.СписокВыбора = сзЗначения;
				КонецЕсли;
			КонецЕсли;
		 
		 	Отбор.ЭлементПолеВвода.ТипЗначения = Новый ОписаниеТипов("Строка");
			СформироватьПредставлениеСписка(Отбор);
		 	Отбор.ЭлементПолеВвода.РедактированиеТекста = Ложь;
			Отбор.ЭлементПолеВвода.КнопкаВыбора = Истина;
			
		Иначе 
			фБылСписок = Не Отбор.ЭлементПолеВвода.РедактированиеТекста;
			
			ЗначениеОтбора = Отбор.ЭлементПолеВвода.Значение;
			
			мсТипы = Отбор.ТипЗначения.Типы();
			Отбор.ЭлементПолеВвода.ТипЗначения = Новый ОписаниеТипов(мсТипы);
			
			Если фБылСписок Тогда
				Если Отбор.ЭлементПолеВвода.СписокВыбора.Количество() > 0 Тогда
					Отбор.ЭлементПолеВвода.Значение = Отбор.ЭлементПолеВвода.СписокВыбора[0].Значение;
				КонецЕсли;
			Иначе
				Отбор.ЭлементПолеВвода.Значение = Отбор.ЭлементПолеВвода.ТипЗначения.ПривестиЗначение(ЗначениеОтбора);
			КонецЕсли;
			
			Отбор.ЭлементПолеВвода.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Настраивает элементы управления отбора по виду сравнения.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>
//
Процедура УстановитьВидЗначенияВОтбор(Отбор) Экспорт
	Отбор.ЭлементВидСравнения.Значение = Отбор.ЭлементВидСравнения.СписокВыбора[0].Значение;
	Для Каждого ЭлВидСравнения Из Отбор.ЭлементВидСравнения.СписокВыбора Цикл
		Если ЭлВидСравнения.Значение.Значение = Отбор.ВидСравнения Тогда
			Отбор.ЭлементВидСравнения.Значение = ЭлВидСравнения.Значение;
			Прервать;
		КонецЕсли; 	
	КонецЦикла;
	НастроитьВидОтбора(Отбор);
КонецПроцедуры

//  Обработчик события ПриИзменении вида сравнения отбора.
//
// Параметры:
//  Отборы  <ТаблицаЗначений[ТаблицаОтборов]>
//  Элемент <ПолеВвода>
//
Процедура ПриИзмененииВидаСравненияОтбора(Отборы, Элемент) Экспорт
	НастроитьВидОтбора(Отборы.Найти(Элемент, "ЭлементВидСравнения"));
КонецПроцедуры

//  Обработчик события НачалоВыбора значения отбора.
//
// Параметры:
//  Форма                <Форма>
//  Отборы               <ТаблицаЗначений[ТаблицаОтборов]>
//  Элемент              <ПолеВвода>
//  СтандартнаяОбработка <Булево>
//
Процедура НачалоВыбораЗначенияОтбора(Форма, Отборы, Элемент, СтандартнаяОбработка) Экспорт
	Если Элемент.РедактированиеТекста Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Отборы.Найти(Элемент, "ЭлементПолеВвода");
	
	ФормаРедактированияСписка = ПолучитьОбщуюФорму("новаФормаРедактированияСписка", Форма, Элемент);
	ФормаРедактированияСписка.Заголовок = Отбор.Представление + " - редактирование списка отбора";
	ФормаРедактированияСписка.Отбор = Отбор;
	
	Форма.Панель.Доступность = Ложь;
	ФормаРедактированияСписка.Открыть();
КонецПроцедуры

// Помещает на форму элементы управления отборами.
//
// Параметры:
//  Отборы <ТаблицаЗначений[ТаблицаОтборов]>
//  Форма  <Форма>
//  Панель <Панель>
//
Процедура СформироватьИнтерфейсОтборов(Отборы, Форма, Панель) Экспорт
	Если Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать Тогда
		Верх = 0;
		ЛевыйОтступ = 0;
	Иначе
		Верх = 7;
		ЛевыйОтступ = 7;
	КонецЕсли;
	
	МаксимальныйРазмерПредставления = 0;
	Для Каждого Отбор Из Отборы Цикл
		МаксимальныйРазмерПредставления = Макс(МаксимальныйРазмерПредставления, новаОбщиеПроцедуры.ШиринаТекста(Отбор.Представление));
	КонецЦикла;
	МаксимальныйРазмерПредставления = МаксимальныйРазмерПредставления + 18;
	
	Для Каждого Отбор Из Отборы Цикл
		Отбор.МакросПоместитьЗначениеНаФорму = "";
		Отбор.МакросПрочитатьЗначениеСФормы = "";
		
		Отбор.ЭлементФлажокИспользования = Форма.ЭлементыФормы.Добавить(Тип("Флажок"), НовоеИмяЭлемента(), Истина, Панель);
		Отбор.ЭлементФлажокИспользования.Лево = ЛевыйОтступ;
		Отбор.ЭлементФлажокИспользования.Верх = Верх;
		Отбор.ЭлементФлажокИспользования.Высота = 19;
		Отбор.ЭлементФлажокИспользования.Ширина = 10 + МаксимальныйРазмерПредставления;
		Отбор.ЭлементФлажокИспользования.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.ЭлементФлажокИспользования.Заголовок = Отбор.Представление;
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|Форма.ЭлементыФормы." + Отбор.ЭлементФлажокИспользования.Имя + ".Значение = Отбор.Использование;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Отбор.Использование = Форма.ЭлементыФормы." + Отбор.ЭлементФлажокИспользования.Имя + ".Значение;";
		
		
		Отбор.ЭлементВидСравнения = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), НовоеИмяЭлемента(), Истина, Панель);
		Отбор.ЭлементВидСравнения.Лево = Отбор.ЭлементФлажокИспользования.Лево + Отбор.ЭлементФлажокИспользования.Ширина + 7;
		Отбор.ЭлементВидСравнения.Верх = Верх;
		Отбор.ЭлементВидСравнения.Высота = 19;
		Отбор.ЭлементВидСравнения.Ширина = 120;
		Отбор.ЭлементВидСравнения.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.ЭлементВидСравнения.РежимВыбораИзСписка = Истина;
		
		Если Отбор.ДоступныеВидыСравнений = Неопределено Тогда
			сзВидыСравнений = ПолучитьСписокВидовСравненийПоТипу(Отбор.ТипЗначения);
		Иначе
			сзВидыСравнений = Отбор.ДоступныеВидыСравнений.Скопировать();
		КонецЕсли;
		
		Для Каждого ЭлВидСравнения Из сзВидыСравнений Цикл
			Если ПустаяСтрока(ЭлВидСравнения.Представление) Тогда
				ЭлВидСравнения.Представление = СокрЛП(ЭлВидСравнения.Значение);
			КонецЕсли;
			ЭлВидСравнения.Значение = Новый Структура("Значение", ЭлВидСравнения.Значение);
		КонецЦикла;
		Отбор.ЭлементВидСравнения.СписокВыбора = сзВидыСравнений;
		
		Отбор.ЭлементВидСравнения.ТипЗначения = Новый ОписаниеТипов("Структура");
		Отбор.ЭлементВидСравнения.РедактированиеТекста = Ложь;
		
		Отбор.ЭлементВидСравнения.УстановитьДействие("ПриИзменении", Новый Действие("ПриИзмененииВидаСравненияОтбора"));
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|УстановитьВидЗначенияВОтбор(Отбор);";
		//|Для Каждого ЭлВидСравнения Из Форма.ЭлементыФормы." + Отбор.ЭлементВидСравнения.Имя + ".СписокВыбора Цикл
		//|	Если ЭлВидСравнения.Значение.Значение = Отбор.ВидСравнения Тогда
		//|		Форма.ЭлементыФормы." + Отбор.ЭлементВидСравнения.Имя + ".Значение = ЭлВидСравнения.Значение;
		//|		НастроитьВидОтбора(Отбор);
		//|		Прервать;
		//|	КонецЕсли; 	
		//|КонецЦикла;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Отбор.ВидСравнения = Форма.ЭлементыФормы." + Отбор.ЭлементВидСравнения.Имя + ".Значение.Значение;";
		
		
		Отбор.ЭлементПолеВвода = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), НовоеИмяЭлемента(), Истина, Панель);
		Отбор.ЭлементПолеВвода.Лево = Отбор.ЭлементВидСравнения.Лево + Отбор.ЭлементВидСравнения.Ширина + 7;
		Отбор.ЭлементПолеВвода.Верх = Верх;
		Отбор.ЭлементПолеВвода.Высота = 19;
		Отбор.ЭлементПолеВвода.Ширина = Панель.Ширина - Отбор.ЭлементПолеВвода.Лево - ЛевыйОтступ;
		Отбор.ЭлементПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		Отбор.ЭлементПолеВвода.УстановитьДействие("НачалоВыбора", Новый Действие("НачалоВыбораЗначенияОтбора"));
		Отбор.ЭлементПолеВвода.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|Если ТипЗнч(Отбор.Значение) = Тип(""СписокЗначений"") Тогда
		|   Отбор.ЭлементПолеВвода.СписокВыбора = Отбор.Значение;
		| 	Отбор.ЭлементПолеВвода.ТипЗначения = Новый ОписаниеТипов(""Строка"");
		|	СформироватьПредставлениеСписка(Отбор);
		| 	Отбор.ЭлементПолеВвода.РедактированиеТекста = Ложь;
		|	Отбор.ЭлементПолеВвода.КнопкаВыбора = Истина;
		|Иначе
		|	Если ТипЗнч(Отбор.ТипЗначения) = Тип(""ОписаниеТипов"") Тогда
		|		мсТипы = Отбор.ТипЗначения.Типы();
		|	Иначе
		|		мсТипы = Новый Массив;
		|		мсТипы.Добавить(Отбор.ТипЗначения);
		|   КонецЕсли;
		|	Отбор.ЭлементПолеВвода.ТипЗначения = Новый ОписаниеТипов(мсТипы);
		|	Отбор.ЭлементПолеВвода.Значение = Отбор.ЭлементПолеВвода.ТипЗначения.ПривестиЗначение(Отбор.Значение);
		| 	Отбор.ЭлементПолеВвода.РедактированиеТекста = Истина;
		|КонецЕсли;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Если Отбор.ЭлементПолеВвода.РедактированиеТекста Тогда
		|	Отбор.Значение = Отбор.ЭлементПолеВвода.Значение;
		|Иначе
		|	Отбор.Значение = Отбор.ЭлементПолеВвода.СписокВыбора;
		|КонецЕсли;";
		
		
		Отбор.ЭлементПолеВводаНачало = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), НовоеИмяЭлемента(), Ложь, Панель);
		Отбор.ЭлементПолеВводаНачало.Лево = Отбор.ЭлементПолеВвода.Лево;
		Отбор.ЭлементПолеВводаНачало.Верх = Верх;
		Отбор.ЭлементПолеВводаНачало.Высота = 19;
		Отбор.ЭлементПолеВводаНачало.Ширина = (Панель.Ширина - Отбор.ЭлементПолеВвода.Лево - 7 - ЛевыйОтступ) / 2;
		мсТипы = Новый Массив;
		мсТипы.Добавить(Отбор.ТипЗначения);
		Отбор.ЭлементПолеВводаНачало.ТипЗначения = Новый ОписаниеТипов(мсТипы);
		Отбор.ЭлементПолеВводаНачало.УстановитьПривязку(ГраницаЭлементаУправления.Право, Отбор.ЭлементПолеВвода, ГраницаЭлементаУправления.Центр);
		Отбор.ЭлементПолеВводаНачало.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|Форма.ЭлементыФормы." + Отбор.ЭлементПолеВводаНачало.Имя + ".Значение = Отбор.ЗначениеНачало;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Отбор.ЗначениеНачало = Форма.ЭлементыФормы." + Отбор.ЭлементПолеВводаНачало.Имя + ".Значение;";
		
		
		Отбор.ЭлементПолеВводаКонец = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), НовоеИмяЭлемента(), Ложь, Панель);
		Отбор.ЭлементПолеВводаКонец.Лево = Отбор.ЭлементПолеВводаНачало.Лево + Отбор.ЭлементПолеВводаНачало.Ширина + 7;
		Отбор.ЭлементПолеВводаКонец.Верх = Верх;
		Отбор.ЭлементПолеВводаКонец.Высота = 19;
		Отбор.ЭлементПолеВводаКонец.Ширина = Панель.Ширина - Отбор.ЭлементПолеВводаКонец.Лево - ЛевыйОтступ;
		мсТипы = Новый Массив;
		мсТипы.Добавить(Отбор.ТипЗначения);
		Отбор.ЭлементПолеВводаКонец.ТипЗначения = Новый ОписаниеТипов(мсТипы);
		Отбор.ЭлементПолеВводаКонец.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Отбор.ЭлементПолеВводаНачало, ГраницаЭлементаУправления.Право);
		Отбор.ЭлементПолеВводаКонец.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		Отбор.ЭлементПолеВводаКонец.Доступность = Не Отбор.ТолькоПросмотр;
		
		Отбор.МакросПоместитьЗначениеНаФорму = Отбор.МакросПоместитьЗначениеНаФорму + "
		|Форма.ЭлементыФормы." + Отбор.ЭлементПолеВводаКонец.Имя + ".Значение = Отбор.ЗначениеКонец;";
		
		Отбор.МакросПрочитатьЗначениеСФормы = Отбор.МакросПрочитатьЗначениеСФормы + "
		|Отбор.ЗначениеКонец = Форма.ЭлементыФормы." + Отбор.ЭлементПолеВводаКонец.Имя + ".Значение;";
		
		
		Верх = Верх + 19 + 7;
	КонецЦикла;
КонецПроцедуры

// Устанавливает отборы из таблицы в элементы управления отборами, размещенные на форме.
//
// Параметры:
//  Отборы <ТаблицаЗначений[ТаблицаОтборов]>
//  Форма  <Форма>
//
Процедура ПоместитьЗначенияНаФорму(Отборы, Форма) Экспорт
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор.ЭлементФлажокИспользования = Неопределено Тогда Продолжить; КонецЕсли;
		Выполнить(Отбор.МакросПоместитьЗначениеНаФорму);
	КонецЦикла;
КонецПроцедуры

// Устанавливает отборы из элементов управления отборами на форме в таблицу отборов.
//
// Параметры:
//  Отборы <ТаблицаЗначений[ТаблицаОтборов]>
//  Форма  <Форма>
//
Процедура ПрочитатьЗначенияСФормы(Отборы, Форма) Экспорт
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор.ЭлементФлажокИспользования = Неопределено Тогда Продолжить; КонецЕсли;
		Выполнить(Отбор.МакросПрочитатьЗначениеСФормы);
	КонецЦикла;
КонецПроцедуры

// Возвращает настройки выбранного отчета для текущего пользователя.
//
// Параметры:
//  обОтчет <ОтчетОбъект>
//
// Возвращаемое значение:
//  <ТаблицаЗначений[НастройкиОтчетов]>
//
Функция ПолучитьНастройки(обОтчет) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.новаНастройкиОтчетов
	|ГДЕ
	|	(Пользователь = &Пользователь Или Пользователь = &ОбщийПользователь)
	| И Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО Пользователь ВОЗР, Настройка ВОЗР";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.новаТекущийПользователь);
	Запрос.УстановитьПараметр("Объект", обОтчет.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("ОбщийПользователь", Справочники.новаПользователи.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Сохраняет настройку отчета в ИБ для текущего пользователя.
//
// Параметры:
//  обОтчет                 <ОтчетОбъект>
//  СтараяНастройка         <Строка>: если при изменении настройки изменили ее название
//  СтарыйПользователь      <СправочникСсылка.новаПользователи>: если при изменении настройки изменили ее пользователя
//  НоваяНастройка          <Строка>
//  ДанныеНастройки         <ХранилищеЗначения>
//  ИспользоватьПриОткрытии <Булево>
//  ДляВсехПользователей    <Булево>
//
Процедура СохранитьНастройку(обОтчет, СтараяНастройка, СтарыйПользователь, НоваяНастройка, ДанныеНастройки, ИспользоватьПриОткрытии, ДляВсехПользователей) Экспорт
	НачатьТранзакцию();
	
	текПользователь = ?(ДляВсехПользователей, Справочники.Пользователи.ПустаяСсылка(), ПараметрыСеанса.новаТекущийПользователь);
	
	НаборЗаписей = РегистрыСведений.новаНастройкиОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(обОтчет.Метаданные().ПолноеИмя());
	
	Если ЗначениеЗаполнено(СтараяНастройка) Тогда
		НаборЗаписей.Отбор.Пользователь.Установить(СтарыйПользователь);
		НаборЗаписей.Отбор.Настройка.Установить(СтараяНастройка);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Пользователь.Установить(текПользователь);
	НаборЗаписей.Отбор.Настройка.Установить(НоваяНастройка);
	Запись = НаборЗаписей.Добавить();
	Запись.Пользователь = текПользователь;
	Запись.Объект = обОтчет.Метаданные().ПолноеИмя();
	Запись.Настройка = НоваяНастройка;
	Запись.ДанныеНастройки = ДанныеНастройки;
	Запись.ИспользоватьПриОткрытии = ИспользоватьПриОткрытии;
	НаборЗаписей.Записать();
	
	Если ИспользоватьПриОткрытии Тогда
		НаборЗаписей.Отбор.Настройка.Использование = Ложь;
		НаборЗаписей.Прочитать();
		
		тзНастройки = НаборЗаписей.Выгрузить();
		
		НаборЗаписей.Очистить();
		Запись = НаборЗаписей.Добавить();
		
		ИспользуемыеПриОткрытии = тзНастройки.НайтиСтроки(Новый Структура("ИспользоватьПриОткрытии", Истина));
		Для Каждого Настройка Из ИспользуемыеПриОткрытии Цикл
			Если Настройка.Настройка = НоваяНастройка Тогда Продолжить; КонецЕсли;
			
			НаборЗаписей.Отбор.Настройка.Установить(Настройка.Настройка);
			ЗаполнитьЗначенияСвойств(Запись, Настройка);
			Запись.ИспользоватьПриОткрытии = Ложь;
			
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

// Удаляет настройку отчета из ИБ для текущего пользователя.
//
// Параметры:
//  обОтчет   <ОтчетОбъект>
//  Настройка <Строка>
//
Процедура УдалитьНастройку(обОтчет, Настройка) Экспорт
	НаборЗаписей = РегистрыСведений.новаНастройкиОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(обОтчет.Метаданные().ПолноеИмя());
	НаборЗаписей.Отбор.Настройка.Установить(Настройка);
	НаборЗаписей.Записать();
КонецПроцедуры

// Формирует уникальное имя параметра запроса.
//
// Возвращаемое значение:
//  <Строка>
//
Функция НовоеИмяПараметра()
	Возврат "П_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "_");
КонецФункции

// Формирует текст запроса, соответствующий коллекции отборов.
//
// Параметры:
//  Отборы        <Коллекция(<СтрокаТаблицыЗначений[ЭлементОтбора]>)>
//  соПутиОтборов <Соответствие(ИмяОтбора:<Строка>, ПутьКДанным:<Строка>)>
//  Префикс       <Строка>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>:
//
Функция ПолучитьЗапросОтборов(Отборы, соПутиОтборов) Экспорт
	Текст = "";
	Параметры = Новый Структура;
	
	Для Каждого Отбор Из Отборы Цикл
		Путь = соПутиОтборов[Отбор.Отбор];
		Если Путь = Неопределено Тогда Продолжить; КонецЕсли;
		стЗапрос = ПолучитьЗапросОтбора(Отбор, Путь);
		Если стЗапрос = Неопределено Тогда Продолжить; КонецЕсли;
		
		Текст = Текст + ?(Текст = "", "", " И ") + "(" + стЗапрос.Текст + ")";
		Для Каждого ЭлПараметр Из стЗапрос.Параметры Цикл
			Параметры.Вставить(ЭлПараметр.Ключ, ЭлПараметр.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Если Текст = "" Тогда Возврат Неопределено; КонецЕсли;
	Возврат Новый Структура("Текст, Параметры", Текст, Параметры);
КонецФункции

// Формирует текст запроса, соответствующий отбору.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>:
//  Путь  <Строка>: путь к данным.
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>:
//
Функция ПолучитьЗапросОтбора(Отбор, Путь) Экспорт
	Если Не Отбор.Использование Тогда Возврат Неопределено; КонецЕсли;
	
	ПутьОтбора = ?(Путь = Неопределено, Отбор.Отбор, Путь);
	
	Текст = "";
	Параметры = Новый Структура;
	ПараметрЗначения = НовоеИмяПараметра();
	
	Если Отбор.ВидСравнения = ВидСравнения.Больше Тогда
		Текст = ПутьОтбора + " > &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Текст = ПутьОтбора + " >= &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВИерархии Тогда
		Текст = ПутьОтбора + " В ИЕРАРХИИ (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке Тогда
		Текст = ПутьОтбора + " В (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		Текст = ПутьОтбора + " В ИЕРАРХИИ (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
		ПараметрЗначенияКонец = НовоеИмяПараметра();
		Текст = ПутьОтбора + " > &" + ПараметрЗначения + " И " + ПутьОтбора + " < &" + ПараметрЗначенияКонец;
		Параметры.Вставить(ПараметрЗначения, Отбор.ЗначениеНачало);
		Параметры.Вставить(ПараметрЗначенияКонец, Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		ПараметрЗначенияКонец = НовоеИмяПараметра();
		Текст = ПутьОтбора + " МЕЖДУ &" + ПараметрЗначения + " И &" + ПараметрЗначенияКонец;
		Параметры.Вставить(ПараметрЗначения, Отбор.ЗначениеНачало);
		Параметры.Вставить(ПараметрЗначенияКонец, Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		ПараметрЗначенияКонец = НовоеИмяПараметра();
		Текст = ПутьОтбора + " >= &" + ПараметрЗначения + " И " + ПутьОтбора + " < &" + ПараметрЗначенияКонец;
		Параметры.Вставить(ПараметрЗначения, Отбор.ЗначениеНачало);
		Параметры.Вставить(ПараметрЗначенияКонец, Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		ПараметрЗначенияКонец = НовоеИмяПараметра();
		Текст = ПутьОтбора + " > &" + ПараметрЗначения + " И " + ПутьОтбора + " <= &" + ПараметрЗначенияКонец;
		Параметры.Вставить(ПараметрЗначения, Отбор.ЗначениеНачало);
		Параметры.Вставить(ПараметрЗначенияКонец, Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Меньше Тогда
		Текст = ПутьОтбора + " < &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Текст = ПутьОтбора + " <= &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВИерархии Тогда
		Текст = "НЕ " + ПутьОтбора + " В ИЕРАРХИИ (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Текст = "НЕ " + ПутьОтбора + " В (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		Текст = "НЕ " + ПутьОтбора + " В ИЕРАРХИИ (&" + ПараметрЗначения + ")";
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеРавно Тогда
		Текст = ПутьОтбора + " <> &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеСодержит Тогда
		Текст = ПутьОтбора + " НЕ ПОДОБНО &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, "%" + СокрЛП(Отбор.Значение) + "%");
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Равно Тогда
		Текст = ПутьОтбора + " = &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Содержит Тогда
		Текст = ПутьОтбора + " ПОДОБНО &" + ПараметрЗначения;
		Параметры.Вставить(ПараметрЗначения, "%" + СокрЛП(Отбор.Значение) + "%");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Текст, Параметры", Текст, Параметры);
КонецФункции

// Возвращает строковое представление элемента отбора.
//
// Параметры:
//  Отбор <СтрокаТаблицыЗначений[ЭлементОтбора]>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьОписаниеОтбора(Отбор) Экспорт
	Текст = "";
	
	Если Отбор.ВидСравнения = ВидСравнения.Больше Тогда
		Текст = Отбор.Представление + " > " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Текст = Отбор.Представление + " >= " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВИерархии Тогда
		Текст = Отбор.Представление + " в иерархии " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке Тогда
		Список = "";
		Для Каждого ЭлЗначение Из Отбор.Значение Цикл
			Список = Список + ?(Список = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
		КонецЦикла;
		Текст = Отбор.Представление + " в списке (" + Список + ")";
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		Список = "";
		Для Каждого ЭлЗначение Из Отбор.Значение Цикл
			Список = Список + ?(Список = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
		КонецЦикла;
		Текст = Отбор.Представление + " в иерархии (" + Список + ")";
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
		Текст = Отбор.Представление + " > " + СокрЛП(Отбор.ЗначениеНачало) + " И < " + СокрЛП(Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Текст = Отбор.Представление + " между " + СокрЛП(Отбор.ЗначениеНачало) + " И " + СокрЛП(Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		Текст = Отбор.Представление + " >= " + СокрЛП(Отбор.ЗначениеНачало) + " И < " + СокрЛП(Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Текст = Отбор.Представление + " > " + СокрЛП(Отбор.ЗначениеНачало) + " И <= " + СокрЛП(Отбор.ЗначениеКонец);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Меньше Тогда
		Текст = Отбор.Представление + " < " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Текст = Отбор.Представление + " <= " + СокрЛП(Отбор.Значение);
		
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВИерархии Тогда
		Текст = Отбор.Представление + " не в иерархии " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Список = "";
		Для Каждого ЭлЗначение Из Отбор.Значение Цикл
			Список = Список + ?(Список = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
		КонецЦикла;
		Текст = Отбор.Представление + " не в списке (" + Список + ")";
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		Список = "";
		Для Каждого ЭлЗначение Из Отбор.Значение Цикл
			Список = Список + ?(Список = "", "", ", ") + СокрЛП(ЭлЗначение.Значение);
		КонецЦикла;
		Текст = Отбор.Представление + " не в иерархии (" + Список + ")";
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеРавно Тогда
		Текст = Отбор.Представление + " <> " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.НеСодержит Тогда
		Текст = Отбор.Представление + " не содержит " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Равно Тогда
		Текст = Отбор.Представление + " = " + СокрЛП(Отбор.Значение);
	
	ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Содержит Тогда
		Текст = Отбор.Представление + " содержит " + СокрЛП(Отбор.Значение);
		
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

// Возвращает текст запроса, соответствующий итогам.
//
// Параметры:
//  тзИтоги    <ТаблицаЗначений[ТаблицаИтогов]>
//  Показатели <Строка>: показатели итогов.
//  фОбщие     <Булево>
//
// Возвращаемое значение:
//  <Строка>
//
Функция СформироватьСтрокуИтогов(тзИтоги, Показатели = "", фОбщие = Ложь) Экспорт
	КонтрольныеТочки = "";
	Для Каждого стрИтог Из тзИтоги Цикл
		КонтрольныеТочки = КонтрольныеТочки + ?(КонтрольныеТочки = "", "", ", ")
			+ ?(ЗначениеЗаполнено(стрИтог.КонтрольнаяТочка), стрИтог.КонтрольнаяТочка, стрИтог.Поле)
			+ ?(стрИтог.Иерархия, " ИЕРАРХИЯ", "");
	КонецЦикла;
	
	ПоказателиИтогов = Показатели;
	
	Если тзИтоги.Количество() > 0 Тогда
		ПоказателиИтогов = Показатели + ?(Показатели = "", "", ", ") + "ВЫБОР ";
		
		ъ = тзИтоги.Количество() - 1;
		Пока ъ >= 0 Цикл
			стрИтог = тзИтоги[ъ];
			ПоказателиИтогов = ПоказателиИтогов + "КОГДА НЕ " + стрИтог.Поле + " ЕСТЬ NULL ТОГДА " + СтрЗаменить(Строка(ъ), Символы.НПП, "") + Символы.ПС;
			ъ = ъ - 1;
		КонецЦикла;
		
		ПоказателиИтогов = ПоказателиИтогов + "КОНЕЦ КАК Группировка";
	КонецЕсли;
	
	Если ПоказателиИтогов = "" Тогда Возврат ""; КонецЕсли;
	Возврат "ИТОГИ " + ?(фОбщие И тзИтоги.Количество() = 0, "-1 КАК Группировка, ", "") + ПоказателиИтогов + " ПО " + ?(фОбщие, "ОБЩИЕ" + ?(КонтрольныеТочки = "", "", ", "), "") +  КонтрольныеТочки;
КонецФункции

// Возвращает текст запроса, соответствующий упорядочиванию.
//
// Параметры:
//  тзСортировки     <ТаблицаЗначений[ТаблицаСортировок]>
//  соПутиСортировок <Соответствие(ИмяСортировки:<Строка>, ПутьКДанным:<Строка>)>
//
// Возвращаемое значение:
//  <Строка>
//
Функция СформироватьСтрокуУпорядочивания(тзСортировки, соПутиСортировок = Неопределено) Экспорт
	Поля = "";
	Для Каждого стрСортировка Из тзСортировки Цикл
		Путь = ?(соПутиСортировок = Неопределено, Неопределено, соПутиСортировок[стрСортировка.Сортировка]);
		Поля = Поля + ?(Поля = "", "", ", ") + ?(Путь = Неопределено, стрСортировка.Сортировка, Путь) + " " + стрСортировка.Направление;
	КонецЦикла;
	
	Если Поля = "" Тогда Возврат ""; КонецЕсли;
	Возврат "УПОРЯДОЧИТЬ ПО " + Поля;
КонецФункции

// Удаляет из макета отчета вертикальные области, соответствующие невыбранным показателям.
//
// Параметры:
//  Макет                         <ТабличныйДокумент>
//  тзПоказателиУдаляемыеИзМакета <ТаблицаЗначений[ТаблицаУдаляемыхПоказателей]>
//
Процедура УдалитьНеиспользуемыеПоказателиИзМакета(Макет, тзПоказателиУдаляемыеИзМакета)
	тзОбласти = Новый ТаблицаЗначений;
	тзОбласти.Колонки.Добавить("Имя");
	тзОбласти.Колонки.Добавить("Лево");
	тзОбласти.Колонки.Добавить("Право");
	тзОбласти.Колонки.Добавить("Верх");
	тзОбласти.Колонки.Добавить("Низ");
	тзОбласти.Колонки.Добавить("ГраницаСверху");
	тзОбласти.Колонки.Добавить("ГраницаСнизу");
	тзОбласти.Колонки.Добавить("ГраницаСправа");
	тзОбласти.Колонки.Добавить("ГраницаСлева");
	Для Каждого Область Из Макет.Области Цикл
		ЗаполнитьЗначенияСвойств(тзОбласти.Добавить(), Область);
		Если Лев(Область.Имя, 11) = "Объединение" Тогда
			Текст = Область.Текст;
			Область.Разъединить();
			Область.Текст = Текст;
		КонецЕсли;
	КонецЦикла;
	
	мсРазмерыКолонок = Новый Массив;
	мсРазмерыКолонок.Добавить(0);
	Для Колонка = 1 По Макет.ШиринаТаблицы Цикл
		мсРазмерыКолонок.Добавить(Макет.Область(1, Колонка).ШиринаКолонки);
	КонецЦикла;
	
	Смещение = 0;
	Для Каждого стрУдаляемыйПоказатель Из тзПоказателиУдаляемыеИзМакета Цикл
		Лево = стрУдаляемыйПоказатель.Лево - Смещение;
		Право = стрУдаляемыйПоказатель.Право - Смещение;
		
		УдаляемаяОбласть = Макет.Область(1, Лево, Макет.ВысотаТаблицы, Право);
		Смещение = Смещение + УдаляемаяОбласть.Право - УдаляемаяОбласть.Лево + 1;
		Макет.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		
		Для ъ = Лево По Право Цикл
			мсРазмерыКолонок.Удалить(Лево);
		КонецЦикла;
		
		ъ = тзОбласти.Количество() - 1;
		Пока ъ >= 0 Цикл
			стрЯчейка = тзОбласти[ъ];
			ъ = ъ - 1;
			
			Если стрЯчейка.Право < Лево Тогда Продолжить; КонецЕсли;
			Если стрЯчейка.Лево > Право Тогда
				стрЯчейка.Лево = стрЯчейка.Лево - (Право - Лево + 1);
				стрЯчейка.Право = стрЯчейка.Право - (Право - Лево + 1);
				Продолжить;
			КонецЕсли;
			
			стрЯчейка.Право = стрЯчейка.Право - (Право - Лево + 1);
			Если стрЯчейка.Право < стрЯчейка.Лево Тогда
				тзОбласти.Удалить(стрЯчейка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Колонка = 1 По Макет.ШиринаТаблицы Цикл
		Макет.Область(1, Колонка).ШиринаКолонки = мсРазмерыКолонок[Колонка]; 
	КонецЦикла;
	
	Для Каждого стрОбласть Из тзОбласти Цикл
		Область = Макет.Область(стрОбласть.Верх, стрОбласть.Лево, стрОбласть.Низ, стрОбласть.Право);
		Если Лев(стрОбласть.Имя, 11) = "Объединение" Тогда
			Область.Объединить();
			Область.Обвести(стрОбласть.ГраницаСлева, стрОбласть.ГраницаСверху, стрОбласть.ГраницаСправа, стрОбласть.ГраницаСнизу);
		КонецЕсли;
		Область.Имя = стрОбласть.Имя;
	КонецЦикла;
КонецПроцедуры

// Добавляет в макет колонки горизонтальной группировки.
//
// Параметры:
//  Макет                     <ТабличныйДокумент>
//  ОбластьГруппировки        <ОбластьТабличногоДокумента>: область колонки горизонтальной группировки.
//  ГоризонтальнаяГруппировка <ТаблицаЗначений[ТаблицаГоризонтальнойГруппировки]>
//  фШапка                    <Булево>: макет является макетом шапки.
//
Процедура ДобавитьГоризонтальнуюГруппировкуВМакет(Макет, ОбластьГруппировки, ГоризонтальнаяГруппировка, фШапка = Ложь)
	Если ГоризонтальнаяГруппировка = Неопределено Тогда Возврат; КонецЕсли;
	
	Позиция = ГоризонтальнаяГруппировка.Лево;
	Для Каждого стрКолонка Из ГоризонтальнаяГруппировка.Колонки Цикл
		
		облПриемник = Макет.Область(1, Позиция, Макет.ВысотаТаблицы, Позиция + ОбластьГруппировки.Право - ОбластьГруппировки.Лево);
		Макет.ВставитьОбласть(ОбластьГруппировки, облПриемник, ТипСмещенияТабличногоДокумента.ПоГоризонтали, Ложь);
		облПриемник.ШиринаКолонки = ОбластьГруппировки.ШиринаКолонки;
		
		Если фШапка Тогда
			Макет.Область(2, Позиция, Макет.ВысотаТаблицы, Позиция + ОбластьГруппировки.Право - ОбластьГруппировки.Лево).Текст = стрКолонка.Представление;
		Иначе			
			облПриемник.Параметр = стрКолонка.Поле;
			облПриемник.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		КонецЕсли;
		
		Позиция = Позиция + ОбластьГруппировки.Право - ОбластьГруппировки.Лево + 1;
	КонецЦикла;
	
	Если фШапка Тогда
		облШапка = Макет.Область(1, ГоризонтальнаяГруппировка.Лево, 1, Позиция - (ОбластьГруппировки.Право - ОбластьГруппировки.Лево + 1));
		облШапка.Объединить();
	КонецЕсли;
	
	облПриемник = Макет.Область(1, Позиция, Макет.ВысотаТаблицы, Позиция + ОбластьГруппировки.Право - ОбластьГруппировки.Лево);
	Макет.УдалитьОбласть(облПриемник, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
КонецПроцедуры

// Формирует табличный документ из дерева значений и коллекции макетов.
//
// Параметры:
//  ОсновнойОтчет        <ОтчетОбъект>
//  ТД                   <ТабличныйДокумент>: табличный документ, который будет сформирован.
//  дзРезультат          <ДеревоЗначений>
//  тзИтоги              <ТаблицаЗначений[ТаблицаИтогов]>
//  МакросДетальныхСтрок <Строка>: Код, заполняющий ячейку иерархии в детальной строке.
//  фОбщийИтог           <Булево>
//  ВыделятьФонСтрок     <Булево>
//
Процедура СформироватьТабличныйДокумент(ОсновнойОтчет, ТД, дзРезультат, тзИтоги, МакросДетальныхСтрок, фОбщийИтог = Ложь, ВыделятьФонСтрок = Ложь) Экспорт
	стСвойстваОтчета = ОсновнойОтчет.ПолучитьСвойства();
	
	мсЦветаГруппировок = Новый Массив;
	мсЦветаГруппировок.Добавить(Новый Цвет(207, 203, 191));
	мсЦветаГруппировок.Добавить(Новый Цвет(222, 217, 204));
	мсЦветаГруппировок.Добавить(Новый Цвет(238, 233, 219));
	
	дзРезультат.Колонки.Добавить("ЗначениеГруппировки");
	дзРезультат.Колонки.Добавить("РасшифровкаГруппировки");
	
	Макет = ОсновнойОтчет.ПолучитьМакет("Макет");
	
	тзВсеПоказатели = ОсновнойОтчет.ПолучитьПоказатели();
	тзВсеГруппировки = ОсновнойОтчет.ПолучитьГруппировки();
	тзПоказателиУдаляемыеИзМакета = Новый ТаблицаЗначений;
	тзПоказателиУдаляемыеИзМакета.Колонки.Добавить("Лево");
	тзПоказателиУдаляемыеИзМакета.Колонки.Добавить("Право");
	
	Для Каждого стрПоказатель Из тзВсеПоказатели Цикл
		облПоказатель = Макет.Область(стрПоказатель.Показатель);
		Если ОсновнойОтчет.ПараметрыФормирования.Показатели.Найти(стрПоказатель.Показатель) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(тзПоказателиУдаляемыеИзМакета.Добавить(), облПоказатель);
		Иначе
			фНедоступен = Ложь;
			Для Каждого ВыбраннаяГруппировка Из ОсновнойОтчет.ПараметрыФормирования.Группировки Цикл
				стрГруппировка = тзВсеГруппировки.Найти(ВыбраннаяГруппировка, "Группировка");
				Если стрГруппировка.Показатели.Найти(стрПоказатель.Показатель) <> Неопределено Тогда
					фНедоступен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если фНедоступен Тогда
				ЗаполнитьЗначенияСвойств(тзПоказателиУдаляемыеИзМакета.Добавить(), облПоказатель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	облГруппировки = Макет.Области.Найти("Группировки");
	Если тзИтоги.Количество() = 0 И облГруппировки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(тзПоказателиУдаляемыеИзМакета.Добавить(), облГруппировки);
	КонецЕсли;
	
	Если ОсновнойОтчет.ПараметрыФормирования.Свойство("ГоризонтальнаяГруппировка") Тогда
		ГоризонтальнаяГруппировка = ОсновнойОтчет.ПараметрыФормирования.ГоризонтальнаяГруппировка;
		ШапкаГоризонтальнойГруппировки = Макет.Область("Шапка|" + ГоризонтальнаяГруппировка.Область);
		СтрокаГоризонтальнойГруппировки = Макет.Область("Строка|" + ГоризонтальнаяГруппировка.Область);
		облГоризонтальнаяГруппировка = Макет.Области.Найти(ГоризонтальнаяГруппировка.Область);
		ГоризонтальнаяГруппировка.Вставить("Лево", облГоризонтальнаяГруппировка.Лево);
		ФиксацияГоризонтальнойГруппировки = облГоризонтальнаяГруппировка.Лево - 1;
	Иначе
		ГоризонтальнаяГруппировка = Неопределено;
	КонецЕсли;
	
	УдаленоКолонок = 0;
	Для Каждого стрУдаляемыйПоказатель Из тзПоказателиУдаляемыеИзМакета Цикл
		УдаленоКолонок = УдаленоКолонок + стрУдаляемыйПоказатель.Право - стрУдаляемыйПоказатель.Лево + 1;
	КонецЦикла;
	
	тзПоказателиУдаляемыеИзМакета.Сортировать("Лево ВОЗР");
	
	МакетЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	МакетШапки = Макет.ПолучитьОбласть("Шапка");
		
	ДобавитьГоризонтальнуюГруппировкуВМакет(МакетШапки, ШапкаГоризонтальнойГруппировки, ГоризонтальнаяГруппировка, Истина);
	УдалитьНеиспользуемыеПоказателиИзМакета(МакетШапки, тзПоказателиУдаляемыеИзМакета);
	
	МакросЯчейкиГруппировки = "Если Строка.Группировка = NULL Тогда
	|	" + МакросДетальныхСтрок;
	
	ТекстШапкиГруппировок = "";
	соМакетыГруппировок = Новый Соответствие;
	Для Каждого стрИтог Из тзИтоги Цикл
		Уровень = тзИтоги.Индекс(стрИтог);
		
		Представление = ?(ЗначениеЗаполнено(стрИтог.Представление), стрИтог.Представление, стрИтог.Псевдоним);
		ТекстШапкиГруппировок = ТекстШапкиГруппировок + ?(ТекстШапкиГруппировок = "", "", Символы.ПС) + Представление;
		
		МакросЯчейкиГруппировки = МакросЯчейкиГруппировки + "
		|ИначеЕсли Строка.Группировка = " + СтрЗаменить(Строка(Уровень), Символы.НПП, "") + " Тогда
		|	Строка.ЗначениеГруппировки = Строка." + стрИтог.Псевдоним + ";
		|	Строка.РасшифровкаГруппировки = Строка." + стрИтог.Псевдоним + ";
		|	" + СокрЛП(стрИтог.МакросВывода);
		
		МакетГруппировки = Макет.ПолучитьОбласть("Строка");
		МакетГруппировки.Область(1, 2).Формат = Макет.Область("Строка|" + стрИтог.Поле).Формат;
		
		ДобавитьГоризонтальнуюГруппировкуВМакет(МакетГруппировки, СтрокаГоризонтальнойГруппировки, ГоризонтальнаяГруппировка);
		УдалитьНеиспользуемыеПоказателиИзМакета(МакетГруппировки, тзПоказателиУдаляемыеИзМакета);
		
		ИндексЦвета = Макс(Уровень + ?(ПустаяСтрока(МакросДетальныхСтрок), 1, 0) - (тзИтоги.Количество() - мсЦветаГруппировок.Количество()), 0);
		Если ПустаяСтрока(МакросДетальныхСтрок) Тогда
			Если Уровень = тзИтоги.Количество() - 1 Тогда
				ИндексЦвета = -1;
			КонецЕсли;
		КонецЕсли;
		
		Если ИндексЦвета >= 0 Тогда
			МакетГруппировки.Область(1, 2, МакетГруппировки.ВысотаТаблицы, МакетГруппировки.ШиринаТаблицы).ЦветФона =
				мсЦветаГруппировок[ИндексЦвета];
		КонецЕсли;
		
		соМакетыГруппировок.Вставить(Уровень, МакетГруппировки);
	КонецЦикла;
	МакросЯчейкиГруппировки = МакросЯчейкиГруппировки + "
	|КонецЕсли;";
	
	МакетГруппировки = Макет.ПолучитьОбласть("Строка");
	ДобавитьГоризонтальнуюГруппировкуВМакет(МакетГруппировки, СтрокаГоризонтальнойГруппировки, ГоризонтальнаяГруппировка);
	УдалитьНеиспользуемыеПоказателиИзМакета(МакетГруппировки, тзПоказателиУдаляемыеИзМакета);
	соМакетыГруппировок.Вставить(NULL, МакетГруппировки);
		
	Если фОбщийИтог Тогда
		МакетИтогов = Макет.ПолучитьОбласть("Итог");
		ДобавитьГоризонтальнуюГруппировкуВМакет(МакетИтогов, СтрокаГоризонтальнойГруппировки, ГоризонтальнаяГруппировка);
		УдалитьНеиспользуемыеПоказателиИзМакета(МакетИтогов, тзПоказателиУдаляемыеИзМакета);
		соМакетыГруппировок.Вставить(-1, МакетИтогов);
	КонецЕсли;
	
	МакетШапки.Параметры.Заполнить(Новый Структура("ШапкаГруппировок", ТекстШапкиГруппировок));
	МакетЗаголовка.Параметры.Заполнить(ОсновнойОтчет.ПараметрыФормирования);
	
	ТД.Очистить();
	ТД.Вывести(МакетЗаголовка);
	
	Если Макет.Области.Найти("УсловияФормирования") <> Неопределено Тогда
		Если ОсновнойОтчет.ПараметрыФормирования.УсловияФормирования <> "" Тогда
			МакетУсловийФормирования = Макет.ПолучитьОбласть("УсловияФормирования");
			МакетУсловийФормирования.Параметры.Заполнить(ОсновнойОтчет.ПараметрыФормирования);
			ТД.Вывести(МакетУсловийФормирования);
		КонецЕсли;
	КонецЕсли;
	
	ТД.Вывести(МакетШапки);
	ТД.ФиксацияСверху = ТД.ВысотаТаблицы;
	Если ОсновнойОтчет.ПараметрыФормирования.Свойство("ГоризонтальнаяГруппировка") Тогда
		ТД.ФиксацияСлева = ФиксацияГоризонтальнойГруппировки - УдаленоКолонок;
	Иначе
		Если тзИтоги.Количество() > 0 И облГруппировки <> Неопределено Тогда
			ТД.ФиксацияСлева = облГруппировки.Право;
		КонецЕсли;
	КонецЕсли;
	
	Если дзРезультат.Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Если фОбщийИтог Тогда
		дзРезультат.Строки[0].Группировка = -1;
		Строки = дзРезультат.Строки[0].Строки;
		ЗаполнитьЗначенияСвойств(дзРезультат.Строки[0].Строки.Добавить(), дзРезультат.Строки[0]);
		
	Иначе	
		Строки = дзРезультат.Строки;
	КонецЕсли;
	
	Если ПустаяСтрока(МакросДетальныхСтрок) Тогда
		ПоследняяГруппировка = тзИтоги.Количество() - 1;
	Иначе
		ПоследняяГруппировка = NULL;
	КонецЕсли;

	Макрос = "
	|мсУровни = Новый Массив;
	|мсПозиции = Новый Массив;
	|Уровень = 0;
	|Позиция = 0;
	|Пока Истина Цикл
	|	Если Позиция = Строки.Количество() Тогда
	|		Если Уровень = 0 Тогда Прервать; КонецЕсли;
	|		ТД.ЗакончитьГруппуСтрок();
	|		Уровень = Уровень - 1;
	|		
	|		Позиция = мсПозиции[Уровень] + 1;
	|		Строки = мсУровни[Уровень];
	|		
	|		мсПозиции.Удалить(Уровень);
	|		мсУровни.Удалить(Уровень);
	|		Продолжить;
	|	КонецЕсли;
	|	
	|	Строка = Строки[Позиция];
	|	МакетГруппировки = соМакетыГруппировок[Строка.Группировка];
	|
	|	" + МакросЯчейкиГруппировки + "
	|
	|	Строка.РасшифровкаГруппировки = Новый Структура(""Строка, Значение"", Строка, Строка.РасшифровкаГруппировки);
	|	
	|	МакетГруппировки.Параметры.Заполнить(Строка);
	|	МакетГруппировки.Область(1, 2).Отступ = Уровень * 2;
	|	Если ВыделятьФонСтрок Тогда
	|        Если ЗначениеЗаполнено(Строка.СостояниеДвижения) Тогда
	|    		МакетГруппировки.Область(1, 2, МакетГруппировки.ВысотаТаблицы, МакетГруппировки.ШиринаТаблицы).ЦветФона = мсЦветаГруппировок[?(Строка.СостояниеДвижения = Перечисления.новаСостоянияОбъектовМониторинга.Стоянка,2,1)];
	|		КонецЕсли; 
	|	КонецЕсли; 
	|	ТД.Вывести(МакетГруппировки);
	|	
    |	СледующаяЗапись = Ложь;
	|	Если Строка.Группировка = ПоследняяГруппировка Тогда
	|		Если Строка.Строки.Количество() = 0 Тогда
	|			СледующаяЗапись = Истина;
	|		Иначе
	|			СледующаяЗапись = Строка.Строки[0].Группировка = NULL;
	|		КонецЕсли;	
	|	КонецЕсли;

	|	Если СледующаяЗапись Тогда
	|		Позиция = Позиция + 1;
	|	Иначе
	|		ТД.НачатьГруппуСтрок();
	|		мсУровни.Добавить(Строки);
	|		мсПозиции.Добавить(Позиция);
	|		Строки = Строка.Строки;
	|		Позиция = 0;
	|		Уровень = Уровень + 1;
	|	КонецЕсли;
	|КонецЦикла;";
	
	Выполнить(Макрос);
	
	ТД.ОтображатьГруппировки = Истина;
	ТД.ОтображатьЗаголовки = Истина;
	ТД.ТолькоПросмотр = Истина;
КонецПроцедуры

// Возвращает текст запроса, соответствующий отбору на вхождение в период.
//
// Параметры:
//  ДатаНачала <Дата>
//  ДатаКонца  <Дата>
//  ПутьДаты   <Строка>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>:
//
Функция ПолучитьОтборПоПериоду(ДатаНачала, ДатаКонца, ПутьДаты) Экспорт
	Параметры = Новый Структура;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Параметры.Вставить("НачалоПериода", ДатаНачала);
		
		Если ЗначениеЗаполнено(ДатаКонца) Тогда
			Параметры.Вставить("КонецПериода", ДатаКонца);
			
			Текст = ПутьДаты + " МЕЖДУ &НачалоПериода И &КонецПериода";
		Иначе	
			Текст = ПутьДаты + " >= &НачалоПериода";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДатаКонца) Тогда
			Параметры.Вставить("КонецПериода", ДатаКонца);
			
			Текст = ПутьДаты + " <= &КонецПериода";
		Иначе	
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Текст, Параметры", Текст, Параметры);	
КонецФункции


// Объединяет тексты запросов, соответствующие отборам, по выбранному союзу.
//
// Параметры:
//  мсОтборы <Массив(<Структура(Текст:<Строка>, Параметры:<Структура>)>)>
//  Союз     <Строка>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>), Неопределено>
//
Функция ОбъединитьСписокОтборов(мсОтборы, Союз) Экспорт
	Текст = "";
	Параметры = Новый Структура;
	
	Для Каждого Отбор Из мсОтборы Цикл
		Если Отбор = Неопределено Тогда Продолжить; КонецЕсли;
		Если Отбор.Текст = "" Тогда Продолжить; КонецЕсли;
		
		Текст = Текст + ?(Текст = "", "", " " + Союз + " ") + Отбор.Текст;
		Для Каждого ЭлПараметр Из Отбор.Параметры Цикл
			Параметры.Вставить(ЭлПараметр.Ключ, ЭлПараметр.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ?(Текст = "", Неопределено, Новый Структура("Текст, Параметры", Текст, Параметры));
КонецФункции

// Соединяет 2 или 3 отбора по И.
//
// Параметры:
//  Отбор1 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//  Отбор2 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//  Отбор3 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>
//
Функция ОбъединитьОтборы(Отбор1, Отбор2, Отбор3 = Неопределено) Экспорт
	мсОтборы = Новый Массив;
	мсОтборы.Добавить(Отбор1);
	мсОтборы.Добавить(Отбор2);
	мсОтборы.Добавить(Отбор3);
	
	Возврат ОбъединитьСписокОтборов(мсОтборы, "И");
КонецФункции

// Соединяет 2 или 3 отбора по ИЛИ.
//
// Параметры:
//  Отбор1 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//  Отбор2 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//  Отбор3 <Структура(Текст:<Строка>, Параметры:<Структура>)>
//
// Возвращаемое значение:
//  <Структура(Текст:<Строка>, Параметры:<Структура>)>
//
Функция ОбъединитьОтборыПоИли(Отбор1, Отбор2, Отбор3 = Неопределено) Экспорт
	мсОтборы = Новый Массив;
	мсОтборы.Добавить(Отбор1);
	мсОтборы.Добавить(Отбор2);
	мсОтборы.Добавить(Отбор3);
	
	стОтборы = ОбъединитьСписокОтборов(мсОтборы, "ИЛИ");
	Если стОтборы.Текст <> "" Тогда
		стОтборы.Текст = "(" + стОтборы.Текст + ")";
	КонецЕсли;
	
	Возврат стОтборы;
КонецФункции
	
// Возвращает строковое представление периода
//
// Параметры:
//  ДатаС                       <Дата>
//  ДатаПо                      <Дата>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПериодВСтроку(Знач ДатаС, Знач ДатаПо) Экспорт
	Если Не ЗначениеЗаполнено(ДатаС) И Не ЗначениеЗаполнено(ДатаПо) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаС) Тогда
		Возврат "по " + Формат(ДатаПо, "ДФ='dd ММММ yyyy'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПо) Тогда
		Возврат "с " + Формат(ДатаС, "ДФ='dd ММММ yyyy'");
	КонецЕсли;
	
	ДатаС = НачалоДня(ДатаС);
	ДатаПо = КонецДня(ДатаПо);
	
	ГодС = НачалоГода(ДатаС);
	ГодПо = НачалоГода(ДатаПо);
	Если ГодС = ГодПо Тогда
		стрГод = СтрЗаменить(Строка(Год(ДатаС)), Символы.НПП, "");
		
		Если ДатаС = НачалоГода(ДатаС) И ДатаПо = КонецГода(ДатаПо) Тогда
			Возврат "за " + стрГод + " г";
		КонецЕсли;
		
		Если ДатаС = НачалоГода(ДатаС) И ДатаПо = КонецМесяца(ДобавитьМесяц(НачалоГода(ДатаС), 6)) Тогда
			Возврат "за 1 полугодие " + стрГод + " г";
		КонецЕсли;
		
		Если ДатаС = НачалоМесяца(ДобавитьМесяц(НачалоГода(ДатаС), 7)) И ДатаПо = КонецГода(ДатаПо) Тогда
			Возврат "за 2 полугодие " + стрГод + " г";
		КонецЕсли;
		
		Если НачалоКвартала(ДатаС) = ДатаС И НачалоКвартала(ДатаС) = НачалоКвартала(ДатаПо) И КонецКвартала(ДатаПо) = ДатаПо Тогда
			Возврат "за " + Строка(Цел(Месяц(ДатаС) / 4) + 1) + " квартал " + стрГод + " г";
		КонецЕсли;
		
		Если НачалоМесяца(ДатаС) = ДатаС И НачалоМесяца(ДатаС) = НачалоМесяца(ДатаПо) И КонецМесяца(ДатаПо) = ДатаПо Тогда
			Возврат "за " + Формат(ДатаС, "ДФ=ММММ") + " " + стрГод + " г";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "за " + Формат(ДатаС, "ДФ='dd ММММ yyyy'") + " - " + Формат(ДатаПо, "ДФ='dd ММММ yyyy'");
КонецФункции

// Открывает диалоговое окно редактирования периода.
//
// Параметры:
//  ДатаС  <Дата>
//  ДатаПо <Дата>
//
// Возвращаемое значение:
//  <Структура(ДатаНачала:<Дата>, ДатаОкончания:<Дата>), Неопределено>
//
Функция РедактироватьПериод(Знач ДатаС, Знач ДатаПо) Экспорт
	Если Не ЗначениеЗаполнено(ДатаС) Тогда
		ДатаС = '00010101';
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПо) Тогда
		ДатаПо = '00010101';
	КонецЕсли;
	
	ДатаС = НачалоДня(ДатаС);
	ДатаПо = ?(ДатаПо = '00010101', ДатаПо, КонецДня(ДатаПо));
	
	НП = Новый НастройкаПериода;
	НП.УстановитьПериод(ДатаС, ДатаПо);
	
	ГодС = НачалоГода(ДатаС);
	ГодПо = НачалоГода(ДатаПо);
	Если ГодС = ГодПо Тогда
		
		Если ДатаС = НачалоГода(ДатаС) И ДатаПо = КонецГода(ДатаПо) Тогда
			НП.ВариантПериода = ВариантПериода.Год;
			НП.ВариантНачала = ВариантГраницыИнтервала.Год;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Год;
			НП.ЗначениеПериода = ДатаС;
		КонецЕсли;
		
		Если НачалоКвартала(ДатаС) = ДатаС И НачалоКвартала(ДатаС) = НачалоКвартала(ДатаПо) И КонецКвартала(ДатаПо) = ДатаПо Тогда
			Если ДатаС = НачалоГода(ДатаС) Тогда
				НП.ВариантПериода = ВариантПериода.КварталСНачалаГода;
			Иначе
				НП.ВариантПериода = ВариантПериода.Квартал;
			КонецЕсли;
			НП.ЗначениеПериода = ДатаС;
			НП.ВариантНачала = ВариантГраницыИнтервала.Квартал;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Квартал;
		КонецЕсли;
		
		Если НачалоМесяца(ДатаС) = ДатаС И НачалоМесяца(ДатаС) = НачалоМесяца(ДатаПо) И КонецМесяца(ДатаПо) = ДатаПо Тогда
			Если ДатаС = НачалоГода(ДатаС) Тогда
				НП.ВариантПериода = ВариантПериода.МесяцСНачалаКвартала;
			Иначе
				НП.ВариантПериода = ВариантПериода.Месяц;
			КонецЕсли;
			НП.ЗначениеПериода = ДатаС;
			НП.ВариантНачала = ВариантГраницыИнтервала.Месяц;
			НП.ВариантОкончания = ВариантГраницыИнтервала.Месяц;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НП.Редактировать() Тогда
		Возврат Новый Структура("ДатаНачала, ДатаОкончания", НП.ПолучитьДатуНачала(), НП.ПолучитьДатуОкончания());
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Расшифровка отчета по умолчанию, вызывается из обработчика события табличного документа отчета.
//
// Параметры:
//  Форма       <Форма>
//  Элемент     <ЭлементУправления>
//  Расшифровка <Произвольный>
//
// Возвращаемое значение:
//  <Булево>: Истина, когда отчет расшифрован страндартным способом.
//
Функция Расшифровать(Форма, Элемент, Расшифровка) Экспорт
	Если Не ЗначениеЗаполнено(Расшифровка) Тогда Возврат Истина; КонецЕсли;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СоздатьРасшифровкуОтчета(Форма, Расшифровка);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Заполняет параметры формирования отчета.
//
// Параметры:
//  ОсновнойОтчет <ОтчетОбъект>
//
Процедура ЗаполнитьПараметрыФормированияПоУмолчанию(ОсновнойОтчет) Экспорт
	ОсновнойОтчет.ПараметрыФормирования = Новый Структура("Дата, НачалоПериода, КонецПериода, Группировки, Показатели, Отборы, Сортировки, УсловияФормирования",
		'00010101',
		'00010101',
		'00010101',
		ОсновнойОтчет.ПолучитьВыбранныеГруппировкиПоУмолчанию(),
		ОсновнойОтчет.ПолучитьВыбранныеПоказателиПоУмолчанию(),
		ОсновнойОтчет.ПолучитьОтборы(),
		ОсновнойОтчет.ПолучитьСортировкиПоУмолчанию(),
		"");
КонецПроцедуры
	
// Заполняет параметры по умолчанию формы отчета.
//
// Параметры:
//  Форма <Форма>
//
Процедура ЗаполнитьПараметрыПоУмолчанию(Форма)
	Форма.мсВыбранныеПоказатели = Форма.ОсновнойОтчет.ПолучитьВыбранныеПоказателиПоУмолчанию();
	стрПараметрыФормирования = Форма.ОсновнойОтчет.ПараметрыФормирования;
	Если стрПараметрыФормирования = Неопределено Тогда
		Форма.тзОтборы = Форма.ОсновнойОтчет.ПолучитьОтборы();
		Форма.мсВыбранныеГруппировки = Форма.ОсновнойОтчет.ПолучитьВыбранныеГруппировкиПоУмолчанию();
		Форма.тзВыбранныеСортировки = Форма.ОсновнойОтчет.ПолучитьСортировкиПоУмолчанию();	
	Иначе
		Форма.тзОтборы = стрПараметрыФормирования.Отборы;
		Форма.мсВыбранныеГруппировки = стрПараметрыФормирования.Группировки; 
		Форма.тзВыбранныеСортировки = стрПараметрыФормирования.Сортировки;
	КонецЕсли;
КонецПроцедуры

// Создает отчет-расшифровку.
//
// Параметры:
//  Форма       <Форма>
//  Расшифровка <Структура[РасшифровкаЯчейкиИерархииТабличногоДокумента]>
//
Процедура СоздатьРасшифровкуОтчета(Форма, Расшифровка)
	обКопияОсновногоОтчета = Форма.ОсновнойОтчет.Скопировать();
	Отказ = ЗаполнитьПараметрыФормированияРасшифровки(Форма, обКопияОсновногоОтчета, Расшифровка);
	Если Отказ Тогда Возврат; КонецЕсли;
	новаОтчеты.ОткрытьФормуОтчета(обКопияОсновногоОтчета, Истина);
КонецПроцедуры  

// Настраивает расшифровку отчета.
//
// Параметры:
//  Форма                  <Форма>
//  обКопияОсновногоОтчета <ОтчетОбъект>
//  Расшифровка            <Структура[РасшифровкаЯчейкиИерархииТабличногоДокумента]>
//
// Возвращаемое значение:
//  <Булево>: Истина, если расшифровку удалось настроить и ее можно открывать.
//
Функция ЗаполнитьПараметрыФормированияРасшифровки(Форма, обКопияОсновногоОтчета, Расшифровка)
	сзГруппировки = Новый СписокЗначений;
	тзДоступныеГруппировки = Форма.ОсновнойОтчет.ПолучитьГруппировки();
	Для Каждого стрДоступныеГруппировки Из тзДоступныеГруппировки Цикл
		Номер = Форма.мсВыбранныеГруппировки.Найти(стрДоступныеГруппировки.Группировка);
		стрОтбор = Форма.тзОтборы.Найти(стрДоступныеГруппировки.Группировка);
		Если Номер = Неопределено И НЕ стрОтбор.Использование Тогда
			сзГруппировки.Добавить(стрДоступныеГруппировки.Группировка, стрДоступныеГруппировки.Представление);	
		КонецЕсли; 		
	КонецЦикла; 
	сзВыбраннаяГруппировка = Форма.ВыбратьИзМеню(сзГруппировки);
	
	Если сзВыбраннаяГруппировка = Неопределено Тогда Возврат Истина; КонецЕсли;
	
	стрПараметрыФормирования = обКопияОсновногоОтчета.ПараметрыФормирования;
	стрРасшифровка = Расшифровка.Строка;
	соУстановленныеОтборы = Новый Соответствие;
	Пока Не стрРасшифровка = Неопределено Цикл
		Группировка = стрПараметрыФормирования.Группировки[стрРасшифровка.Группировка];
		Если соУстановленныеОтборы[Группировка] = Неопределено Тогда
			соУстановленныеОтборы.Вставить(Группировка, Истина);
			
			стрОтбор = стрПараметрыФормирования.Отборы.Найти(Группировка, "Отбор");
			стрОтбор.Использование = Истина;
			стрОтбор.Значение = стрРасшифровка.ЗначениеГруппировки;
			стрОтбор.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;
		стрРасшифровка = стрРасшифровка.Родитель;	
	КонецЦикла;
			
	стрПараметрыФормирования.Группировки.Очистить();
	стрПараметрыФормирования.Группировки.Добавить(сзВыбраннаяГруппировка.Значение);
	
	Возврат Ложь;
КонецФункции

 
 