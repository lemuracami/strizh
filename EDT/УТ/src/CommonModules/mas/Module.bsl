
Процедура ЗаполнитьРСoz_ЭкземплярыТоваровЗаказов(Заказ) Экспорт

	Таблица = smv.СформироватьТаблицуЗначенийИзДанныхSQL("EXEC p1c_getOzonPostingItems "+СокрЛП(Заказ.Номер));    
	
	Если Таблица.Количество()>0 Тогда
		МагазинОзон  = Справочники.Номенклатура.НайтиПоКоду("Shop_612");   // код озон
		НаборЗаписей = РегистрыСведений.oz_ЭкземплярыТоваровЗаказов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Заказ.Ссылка);

		Для каждого Стр Из Таблица Цикл		
			Штрихкод = Стр.barcode;
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Стр.code, МагазинОзон);
			Если Номенклатура = Неопределено Тогда
				#Если Клиент Тогда
				Сообщить("Не найдена номенклатура с артикулом: " + Стр.code);
				#КонецЕсли
				Продолжить;
			КонецЕсли;
			
			Запись = НаборЗаписей.Добавить();
	        Запись.Заказ = Заказ.Ссылка;
	        Запись.Номенклатура = Номенклатура;
	        Запись.Штрихкод = Штрихкод;
			Запись.id = СтрЗаменить(Стр.id, Символы.НПП, "");
				        
		КонецЦикла;    
		
		Попытка			
			НаборЗаписей.Записать();			
		Исключение
		КонецПопытки;
		
    КонецЕсли;

КонецПроцедуры


Процедура axi_ОбработкаПолученияМаршрутаПоЗаказам() Экспорт
	
	// Сначала обновляем инфу по транспортам
	axi_ОбновитьТипыТранспортовВероут();
	
	

	Отказ = Ложь;
	ТабРезультатМаршруты = Неопределено;
	//+++ БАО 26.09.2017 №1880
	//---ТранспортSPB = Справочники.ТипыТранспортовВероут.SPB;
	ТранспортSPB = Справочники.ТипыТранспортовВероут.НайтиПоНаименованию("SPB");
	//--- БАО 26.09.2017 №1880
	
	// Получаем заказы к обработке
	ЗапросЗаказыСПБ = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                               |	РеализацияТоваровУслуг.Ссылка
	                               |ПОМЕСТИТЬ ВТЗаказыСПБ
	                               |ИЗ
	                               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                               |ГДЕ
	                               |	РеализацияТоваровУслуг.ТерминалДоставки.Код = 2
	                               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	                               |;
	                               |
	                               |////////////////////////////////////////////////////////////////////////////////
	                               |ВЫБРАТЬ
	                               |	ДополнительныеПараметрыЗаказа.Заказ,
	                               |	ДополнительныеПараметрыЗаказа.okey,
	                               |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(10, 0)) КАК polygon_id,
	                               |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(4, 0)) КАК courier_id,
	                               |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК courier_key
	                               |ИЗ
	                               |	ВТЗаказыСПБ КАК ВТЗаказыСПБ
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	                               |		ПО ВТЗаказыСПБ.Ссылка = ДополнительныеПараметрыЗаказа.Заказ
	                               |ГДЕ
	                               |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.okey, """") <> """"");
	ЗапросЗаказыСПБ.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	ЗапросЗаказыСПБ.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	РезЗаказыСПБ = ЗапросЗаказыСПБ.Выполнить().Выгрузить();							   
	
	// Получаем маршруты
	Попытка
		ТабРезультатМаршруты = smv.ЗапросМаршрутаЗаказов(РезЗаказыСПБ);	
	Исключение
		#Если Клиент Тогда
		Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Отказ = Истина;
	КонецПопытки;
			
	
	Если НЕ Отказ Тогда
		
		// проверка полученной таблицы от axi
		МассивСтрокДляУдаления = ТабРезультатМаршруты.Найтистроки(Новый Структура("courier_id",0));
		Для каждого СтрМас Из МассивСтрокДляУдаления Цикл
		
			#Если Клиент Тогда	
			Сообщить("Отсутствуют данные по заказу "+ СтрМас.Заказ + " (в системе Аксиомус)");
			#КонецЕсли
			ТабРезультатМаршруты.Удалить(СтрМас);		
		
		КонецЦикла;
		
		//+Степанов Задача № 3833	
		//Асеев 11.09.2024 (Задача № 5321)>>>
		ТаблицаПараметровТарифовЗаказов = ТарификацияУслугСервер.СоздатьТаблицуПараметровТарифовЗаказов();
		//Асеев 11.09.2024 (Задача № 5321)<<<
		//-Степанов Задача № 3833

		
		// Ищем ГруппыРайонов по polyon_id и пишем в заказ
		Для каждого Стр Из ТабРезультатМаршруты Цикл
			
			Если ЗначениеЗаполнено(Стр.polygon_id) Тогда	
				
				НайЭлемент = Справочники.ГруппыРайонов.НайтиПоРеквизиту("axi_polygon_id", Стр.polygon_id);	
				Если ЗначениеЗаполнено(НайЭлемент) Тогда
					ДокЗаказОбъект = Стр.Заказ.ПолучитьОбъект();
				    ДокЗаказОбъект.ЗонаТарификации = НайЭлемент;
					ДокЗаказОбъект.ОбменДанными.Загрузка = Истина;			
					Попытка
						ДокЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
						//+Степанов Задача № 3833
						СтрокаТарифа = ТаблицаПараметровТарифовЗаказов.Добавить();
						СтрокаТарифа.Заказ = Стр.Заказ;
						СтрокаТарифа.ЗонаТарификации = НайЭлемент; 
						//-Степанов Задача № 3833
					Исключение	
						 
						МассивРассылки = Новый Массив;
						МассивРассылки.Добавить("v.yakurnov@strizh-logistic.ru");
						МассивРассылки.Добавить("evgeniy.marochkin@strizh-logistic.ru");	
						ТемаРассылки  = "Ошибка перезаписи док. Реализация";
						ТекстРассылки = "Ошибка перезаписи док. Реализация с рекв. ГруппыРайонов (Получение маршрутов Аксиомус)";
						lem.ОтправитьСообщение(МассивРассылки, ТемаРассылки, ТекстРассылки);
					
						//#Если Клиент Тогда	
						//Сообщить("Не удалось записать документ "+ ДокЗаказОбъект + ": " + ОписаниеОшибки());
						//#КонецЕсли	
					КонецПопытки;	   
				КонецЕсли;
			// Михушкин - 08.06.2016 --->> 
			Иначе
				ДокЗаказОбъект = Стр.Заказ.ПолучитьОбъект();
				//+Степанов Задача № 3833
				ЗонаДоКад = Справочники.ГруппыРайонов.ДоКАД;
				//-Степанов Задача № 3833
				ДокЗаказОбъект.ЗонаТарификации = ЗонаДоКад;
				ДокЗаказОбъект.ОбменДанными.Загрузка = Истина;			
				Попытка
					ДокЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
					//+Степанов Задача № 3833
					СтрокаТарифа = ТаблицаПараметровТарифовЗаказов.Добавить();
					СтрокаТарифа.Заказ = Стр.Заказ;
					СтрокаТарифа.ЗонаТарификации = ЗонаДоКад; 
					//-Степанов Задача № 3833
				Исключение	
					 
					МассивРассылки = Новый Массив;
					МассивРассылки.Добавить("v.yakurnov@strizh-logistic.ru");
					МассивРассылки.Добавить("evgeniy.marochkin@strizh-logistic.ru");	
					ТемаРассылки  = "Ошибка перезаписи док. Реализация";
					ТекстРассылки = "Ошибка перезаписи док. Реализация с рекв. ГруппыРайонов (Получение маршрутов Аксиомус)";
					lem.ОтправитьСообщение(МассивРассылки, ТемаРассылки, ТекстРассылки);
				
					//#Если Клиент Тогда	
					//Сообщить("Не удалось записать документ "+ ДокЗаказОбъект + ": " + ОписаниеОшибки());
					//#КонецЕсли	
				КонецПопытки;
				
			// <<--- Михушкин 	
			КонецЕсли;
			
			// Заодно сообщаем об удачно полученных данных
			#Если Клиент Тогда	
			Сообщить("Данные по заказу "+ Стр.Заказ + " получены от Аксиомус");
			#КонецЕсли		
		КонецЦикла;
		
		//+Степанов Задача № 3833
		ТарификацияУслугСервер.ЗаписатьПараметрыТарифаЗаказа(ТаблицаПараметровТарифовЗаказов);
		//-Степанов Задача № 3833

			
		НачатьТранзакцию();
		
		
		
		// Получим таблицу Транспортов Вероут	
		ТЗТранспортыРейсыВероут = ПолучитьТаблицуТранспортовВероут(ТабРезультатМаршруты.Скопировать());	
		
		
		// Получаем док. ЗагрузкаРейсовВероут за текущую дату
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ЗагрузкаРейсовВероут.Ссылка КАК Док,
		            |	ЗагрузкаРейсовВероут.Рейсы.(
		            |		Ссылка,
		            |		НомерСтроки,
		            |		Рейс,
		            |		Рейс.Идентификатор КАК Идентификатор
		            |	)
		            |ИЗ
		            |	Документ.ФормированиеРейсов КАК ЗагрузкаРейсовВероут
		            |ГДЕ
		            |	ЗагрузкаРейсовВероут.ДатаРейсов МЕЖДУ &ДатаНач И &ДатаКон
		            |	И ЗагрузкаРейсовВероут.ПометкаУдаления = ЛОЖЬ
		            |	И ЗагрузкаРейсовВероут.РежимЗагрузкиДанных = 1
		            |	И ЗагрузкаРейсовВероут.axi_Загрузка = ИСТИНА";
		Зап.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));			
		Зап.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));			
		Рез = Зап.Выполнить().Выбрать();
		
		
		
		// получаем док ЗагрузкаРейсовВероут или создаем новый
		Если Не Рез.Следующий() Тогда
			ДокЗагрузка = Документы.ФормированиеРейсов.СоздатьДокумент();
			ДокЗагрузка.Дата = ТекущаяДата();
			ДокЗагрузка.ДатаРейсов = ТекущаяДата();
			ДокЗагрузка.РежимЗагрузкиДанных = 1;
			ДокЗагрузка.axi_Загрузка = Истина;	
			//lem 26/05/2017
			ДокЗагрузка.ТерминалДоставки = Справочники.РегиональныеТерминалы.СПбСтриж;	
			//lem 26/05/2017
		Иначе
			ДокЗагрузка = Рез.Док.ПолучитьОбъект();
			ДокЗагрузка.Рейсы.Очистить();
		КонецЕсли;
		
				
	    // Добавляем рейсы в ТЧ
		Для каждого Стр Из ТЗТранспортыРейсыВероут Цикл		
			НСтрЗагрузка = ДокЗагрузка.Рейсы.Добавить();
			НСтрЗагрузка.Рейс = Стр.Рейс;
						
			// очищаем ТЧ заказы документа Рейс, без признака "ЗаказДобавленВРучную"
			ДокРейс = Стр.Рейс.ПолучитьОбъект();			
			Струк = Новый Структура;
			Струк.Вставить("ЗаказДобавленВРучную", Ложь);
			Най = ДокРейс.Заказы.НайтиСтроки(Струк);
			Для Каждого ТекЗ Из Най Цикл
				ДокРейс.Заказы.Удалить(ТекЗ);
			КонецЦикла;	
			ДокРейс.Поездки.Очистить();
			ДокРейс.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;	
		
		// Пробуем записать док. РежимЗаписиДокумента
		Попытка
			ДокЗагрузка.Записать(РежимЗаписиДокумента.Запись);	
		Исключение	
			#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
			#КонецЕсли
			ОтменитьТранзакцию();
		КонецПопытки;
		
		
		// Делаем итоговый запрос	
		ЗапросМаршрутыКонечный = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                                      |	ТЗМаршруты.courier_id,
		                                      |	ТЗМаршруты.courier_key,
		                                      |	ТЗМаршруты.Заказ
		                                      |ПОМЕСТИТЬ ВТ_ТЗ
		                                      |ИЗ
		                                      |	&ТЗМаршруты КАК ТЗМаршруты
		                                      |;
		                                      |
		                                      |////////////////////////////////////////////////////////////////////////////////
		                                      |ВЫБРАТЬ
		                                      |	ТЗ_ТранспортыРейсы.courier_id,
		                                      |	ТЗ_ТранспортыРейсы.courier_key,
		                                      |	ТЗ_ТранспортыРейсы.Рейс
		                                      |ПОМЕСТИТЬ ВТ_ТранспортыРейсы
		                                      |ИЗ
		                                      |	&ТЗ_ТранспортыРейсы КАК ТЗ_ТранспортыРейсы
		                                      |;
		                                      |
		                                      |////////////////////////////////////////////////////////////////////////////////
		                                      |ВЫБРАТЬ
		                                      |	ВТ_ТЗ.Заказ,
		                                      |	ВТ_ТранспортыРейсы.Рейс КАК Рейс
		                                      |ИЗ
		                                      |	ВТ_ТЗ КАК ВТ_ТЗ
		                                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТранспортыРейсы КАК ВТ_ТранспортыРейсы
		                                      |		ПО ВТ_ТЗ.courier_id = ВТ_ТранспортыРейсы.courier_id
		                                      |			И ВТ_ТЗ.courier_key = ВТ_ТранспортыРейсы.courier_key
		                                      |ИТОГИ ПО
		                                      |	Рейс");	
		ЗапросМаршрутыКонечный.УстановитьПараметр("ТЗМаршруты", ТабРезультатМаршруты);
		ЗапросМаршрутыКонечный.УстановитьПараметр("ТЗ_ТранспортыРейсы", ТЗТранспортыРейсыВероут);
		РезультатМаршрутыГруппировка = ЗапросМаршрутыКонечный.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		Пока РезультатМаршрутыГруппировка.Следующий() Цикл
			
			ДокРейсОбъект = РезультатМаршрутыГруппировка.Рейс.ПолучитьОбъект();  // Док рейс объект
			
			РезультатМаршруты = РезультатМаршрутыГруппировка.Выбрать();
			Пока РезультатМаршруты.Следующий() Цикл	 
				НСтрЗаказ = ДокРейсОбъект.Заказы.Добавить();	
				НСтрЗаказ.Заказ = РезультатМаршруты.Заказ;	
				НСтрЗаказ.ВидЗаказа = Перечисления.ВидыЗаказовВероут.DROP;
			КонецЦикла;
			
			//попытка записи
			Попытка
				ДокРейсОбъект.Записать(РежимЗаписиДокумента.Запись);	
			Исключение
				#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
				#КонецЕсли
				ОтменитьТранзакцию();
			КонецПопытки;			
		КонецЦикла;		
					
		
		
		// Проводим все Рейсы
		ТЗРейсы = ТЗТранспортыРейсыВероут.Скопировать();
		ТЗРейсы.свернуть("Рейс");	
		Для каждого РейсСтр Из ТЗРейсы Цикл		
			РейсОбъект = РейсСтр.Рейс.ПолучитьОбъект();
		    Попытка		
				РейсОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				#Если Клиент Тогда
			    Сообщить("Не удалось провести документ " + РейсОбъект.Ссылка + ", по причине: " + ОписаниеОшибки());
				#КонецЕсли
				ОтменитьТранзакцию();
			КонецПопытки;		
		КонецЦикла;
		
		
		
		// Проводим док РежимЗаписиДокумента
		Попытка
			ДокЗагрузка.Записать(РежимЗаписиДокумента.Проведение);	
		Исключение	
			#Если Клиент Тогда
			Сообщить("Не удалось провести документ " + ДокЗагрузка.Ссылка + ", по причине: " + ОписаниеОшибки());
			#КонецЕсли
			ОтменитьТранзакцию();
		КонецПопытки;
		
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
		

КонецПроцедуры

// Формирует таблицу с транспортами и рейсами (если элементов не найдено, - создает новые)
Функция ПолучитьТаблицуТранспортовВероут(ТЗ)

	ТЗ.Свернуть("courier_id, courier_key");
	
		
	//+++ БАО 26.09.2017 №1880
	//---ТранспортSPB = Справочники.ТипыТранспортовВероут.SPB;
	ТранспортSPB = Справочники.ТипыТранспортовВероут.НайтиПоНаименованию("SPB");
	//--- БАО 26.09.2017 №1880


	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТЗВероут.courier_id,
	                      |	ТЗВероут.courier_key
	                      |ПОМЕСТИТЬ ВТ_ТЗ
	                      |ИЗ
	                      |	&ТЗВероут КАК ТЗВероут
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТипыТранспортовВероут.Ссылка,
	                      |	ВТ_ТЗ.courier_id,
	                      |	ВТ_ТЗ.courier_key
	                      |ПОМЕСТИТЬ ВТ_Транспорты
	                      |ИЗ
	                      |	ВТ_ТЗ КАК ВТ_ТЗ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыТранспортовВероут КАК ТипыТранспортовВероут
	                      |		ПО ВТ_ТЗ.courier_id = ТипыТранспортовВероут.axi_id
	                      |			И (ТипыТранспортовВероут.ПометкаУдаления = ЛОЖЬ)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Рейс.Ссылка КАК Рейс,
	                      |	ВТ_Транспорты.courier_id,
	                      |	ВТ_Транспорты.courier_key,
	                      |	ВТ_Транспорты.Ссылка КАК Транспорт
	                      |ИЗ
	                      |	ВТ_Транспорты КАК ВТ_Транспорты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	                      |		ПО ВТ_Транспорты.Ссылка = Рейс.Транспорт
	                      |			И (Рейс.Дата МЕЖДУ &Дата1 И &Дата2)
	                      |			И (Рейс.ПометкаУдаления = ЛОЖЬ)");
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТЗВероут", ТЗ);
	РезТЗ = Запрос.Выполнить().Выгрузить();	
	
	// Создаем Транспорты и Рейсы для отсутствующих
	Для каждого Стр Из РезТЗ Цикл		
		Если НЕ ЗначениеЗаполнено(Стр.Транспорт) Тогда
			ТранспортВероут = Справочники.ТипыТранспортовВероут.СоздатьЭлемент();
			ТранспортВероут.Родитель = ТранспортSPB;
			ТранспортВероут.Наименование = Стр.courier_id;
			ТранспортВероут.axi_id  = Стр.courier_id;
			//ТранспортВероут.axi_key = Стр.courier_key;
			ТранспортВероут.Записать();
			Стр.Транспорт = ТранспортВероут.Ссылка;
			
			ДокРейс = axi_СоздатьНовыйРейс();
			ДокРейс.Транспорт = ТранспортВероут.Ссылка;
			ДокРейс.Записать(РежимЗаписиДокумента.Запись);
			Стр.Рейс = ДокРейс.Ссылка;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.Рейс) Тогда			
			ДокРейс = axi_СоздатьНовыйРейс();
			ДокРейс.Транспорт = Стр.Транспорт;
			ДокРейс.Записать(РежимЗаписиДокумента.Запись);
			Стр.Рейс = ДокРейс.Ссылка;
		КонецЕсли;			
	КонецЦикла;
	
	
	Возврат РезТЗ;

КонецФункции // ()


Функция axi_СоздатьНовыйРейс()

	ДокРейс = Документы.Рейс.СоздатьДокумент();	
	ДокРейс.axi_Загрузка = Истина;
	ДокРейс.РежимЗагрузкиДанных = 1;
	ДокРейс.ДатаРейса = ТекущаяДата();
	ДокРейс.Дата      = ТекущаяДата();
			
	Если ДокРейс.РейсМестнойДоставки.Пустая() Тогда
		нРейс = БизнесПроцессы.новаРейсМестнойДоставки.СоздатьБизнесПроцесс();
		нРейс.Дата = ТекущаяДата();
		нРейс.ДатаНачала = НачалоДня(ТекущаяДата()) + 32400;
		нРейс.ДатаКонца = НачалоДня(ТекущаяДата()) + 82800;
		нРейс.РейсЗагруженИзВероут = Ложь;  
		нРейс.Записать();
		нРейс.Старт();

		ДокРейс.РейсМестнойДоставки = нРейс.Ссылка;

		//
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	новаЗадачаРейсаМестнойДоставки.Ссылка Как План
		            |ИЗ
		            |	Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
		            |ГДЕ
		            |	новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка = &Рейс
		            |	И новаЗадачаРейсаМестнойДоставки.ТочкаМаршрута = ЗНАЧЕНИЕ(справочник.новаэтапыместнойдоставки.планированиеместнойдоставки)
		            |	И новаЗадачаРейсаМестнойДоставки.Выполнена = ЛОЖЬ";
		Зап.УстановитьПараметр("Рейс", нРейс.Ссылка);			
		РезЗадач = Зап.Выполнить().Выбрать();
		Если РезЗадач.Следующий() Тогда
			Задача = РезЗадач.План.ПолучитьОбъект();
			Задача.ВыполнитьЗадачу();
		КонецеСли;	
	КонецЕсли;
	
	
	Возврат ДокРейс;

КонецФункции // ()


Процедура axi_ПолучениеСтатусовЗаказов() Экспорт
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	РеализацияТоваровУслуг.Ссылка
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.СтатусИнтернетМагазина = 2
	                      |	И РеализацияТоваровУслуг.Дата >= &Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДополнительныеПараметрыЗаказа.okey КАК okey,
	                      |	ДополнительныеПараметрыЗаказа.Заказ,
	                      |	ЗНАЧЕНИЕ(Справочник.СтатусыAxiomus.ПустаяСсылка) КАК Статус,
	                      |	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК НомерЗаказа
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	                      |		ПО ВТ.Ссылка = ДополнительныеПараметрыЗаказа.Заказ
	                      |ГДЕ
	                      |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.okey, """") <> """"");
	Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 31 * 86400);					  
	РезТЗ = Запрос.Выполнить().Выгрузить();		
	
	ТекНомер = 0;  Порция = 200;
	РезТЗ_Порция = Новый ТаблицаЗначений;
	РезТЗ_Порция = РезТЗ.Скопировать();
	РезТЗ_Порция.Очистить();
	
	Для каждого Стр Из РезТЗ Цикл
		
		Если ТекНомер >= Порция Тогда		
			
			Результат = smv.ЗапросТекущегоСтатусаЗаказов(РезТЗ_Порция, "63df707cfb53dbc4e38f9eb77150cee6");
			
			ОбработатьПорциюСтатусов(Результат);			
			РезТЗ_Порция = РезТЗ.Скопировать();
			РезТЗ_Порция.Очистить();		
			Порция = Порция + 200;		
		КонецЕсли;
		
		НСтр = РезТЗ_Порция.Добавить();	
		ЗаполнитьЗначенияСвойств(НСтр, Стр);
		
		ТекНомер = ТекНомер + 1;
		
	КонецЦикла;
	
	Результат = smv.ЗапросТекущегоСтатусаЗаказов(РезТЗ_Порция, "63df707cfb53dbc4e38f9eb77150cee6");
	
	ОбработатьПорциюСтатусов(Результат);
	
	РезТЗ_Порция.Очистить();
	
		
КонецПроцедуры



Процедура ОбработатьПорциюСтатусов(Результат)

	
	// обрабатываем переносы доставки
	axi_ОбработатьПереносы(Результат.Скопировать());    	
	
	ЗапросИзмененныеСтатусы = Новый Запрос("ВЫБРАТЬ
	                                       |	ТЗ_СтатусыАкси.Заказ,
	                                       |	ТЗ_СтатусыАкси.НомерЗаказа,
	                                       |	ТЗ_СтатусыАкси.Статус
	                                       |ПОМЕСТИТЬ ВТ_СтатусыАкси
	                                       |ИЗ
	                                       |	&ТЗ_СтатусыАкси КАК ТЗ_СтатусыАкси
	                                       |;
	                                       |
	                                       |////////////////////////////////////////////////////////////////////////////////
	                                       |ВЫБРАТЬ
	                                       |	ВТ_СтатусыАкси.Заказ,
	                                       |	ВТ_СтатусыАкси.Статус,
	                                       |	ВТ_СтатусыАкси.НомерЗаказа
	                                       |ПОМЕСТИТЬ ВТ_ИзмененныеСтатусы
	                                       |ИЗ
	                                       |	ВТ_СтатусыАкси КАК ВТ_СтатусыАкси
	                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаказовAxiomus.СрезПоследних(, НЕ Статус ЕСТЬ NULL ) КАК СтатусыЗаказовAxiomusСрезПоследних
	                                       |		ПО ВТ_СтатусыАкси.Заказ = СтатусыЗаказовAxiomusСрезПоследних.Заказ
	                                       |ГДЕ
	                                       |	ВТ_СтатусыАкси.Статус <> СтатусыЗаказовAxiomusСрезПоследних.Статус
	                                       |;
	                                       |
	                                       |////////////////////////////////////////////////////////////////////////////////
	                                       |ВЫБРАТЬ
	                                       |	ВТ_ИзмененныеСтатусы.Заказ,
	                                       |	ВТ_ИзмененныеСтатусы.Статус,
	                                       |	ax_СоответствиеСтатусов.СтатусСтриж,
	                                       |	ВТ_ИзмененныеСтатусы.НомерЗаказа,
	                                       |	ax_СоответствиеСтатусов.СтатусСтриж.Код КАК СтатусСтриж_Код,
	                                       |	ax_СоответствиеСтатусов.СтатусСтрижОбратныйПоток.Код КАК СтатусСтрижОбратныйПоток_Код,
	                                       |	ax_СоответствиеСтатусов.СтатусСтрижФинальный,
	                                       |	ЕСТЬNULL(ДополнительныеПараметрыЗаказа.ПредварительноеЗакрытие, ЛОЖЬ) КАК ПредварительноеЗакрытие,
	                                       |	ax_СоответствиеСтатусов.РезультатДоставки,
	                                       |	ax_СоответствиеСтатусов.ПричинаНеВыполненияДоставки
	                                       |ИЗ
	                                       |	ВТ_ИзмененныеСтатусы КАК ВТ_ИзмененныеСтатусы
	                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ax_СоответствиеСтатусов КАК ax_СоответствиеСтатусов
	                                       |		ПО ВТ_ИзмененныеСтатусы.Статус = ax_СоответствиеСтатусов.СтатусAxiomus
	                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	                                       |		ПО ВТ_ИзмененныеСтатусы.Заказ = ДополнительныеПараметрыЗаказа.Заказ");
	ЗапросИзмененныеСтатусы.УстановитьПараметр("ТЗ_СтатусыАкси", Результат);	
	РезИзмененныеСтатусы = ЗапросИзмененныеСтатусы.Выполнить().Выгрузить();
	
	Если РезИзмененныеСтатусы.Количество() Тогда
		
		
		РезИзмененныеСтатусы.Колонки.Добавить("ТипОплаты");		
		Для каждого СтрС Из РезИзмененныеСтатусы Цикл	
			НайС = Результат.НайтиСтроки(Новый Структура("Заказ", СтрС.Заказ));
			Если НайС.Количество() Тогда
				
				Если НЕ ЗначениеЗаполнено(НайС[0].payment_mode) Тогда			
					СтрС.ТипОплаты = Справочники.ТипыОплат.ПустаяСсылка();				
				ИначеЕсли Число(НайС[0].payment_mode) = 1 ИЛИ Число(НайС[0].payment_mode) = 2 Тогда			
					СтрС.ТипОплаты = Справочники.ТипыОплат.Наличные;
				ИначеЕсли Число(НайС[0].payment_mode) = 3 Тогда			
					СтрС.ТипОплаты = Справочники.ТипыОплат.Терминал;	
				Иначе
					СтрС.ТипОплаты = Справочники.ТипыОплат.ПустаяСсылка();
				КонецЕсли;
							
			КонецЕсли;					
		КонецЦикла;
		
		
		// Пишем статусы в РС СтатусыЗаказовAxiomus	
		РезИзмененныеСтатусы.Колонки.Добавить("Период");
	
		ТекПер = ТекущаяДата();
		Для каждого Стр Из РезИзмененныеСтатусы Цикл
			Стр.Период = ТекПер;
		КонецЦикла;
	
		Набор = РегистрыСведений.СтатусыЗаказовAxiomus.СоздатьНаборЗаписей();	
		Набор.Отбор.Период.Установить(ТекПер);

		
		Набор.Загрузить(РезИзмененныеСтатусы);
		Попытка
			Набор.Записать();
		Исключение
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;	
		
		
		// Пишем статусы в РС СтатусыЗаказов
		НаборСтатусы = РегистрыСведений.СтатусыЗаказов.СоздатьНаборЗаписей();	
		ТекПер = ТекущаяДата();
		НаборСтатусы.Отбор.Период.Установить(ТекПер);

		Для каждого Стр Из РезИзмененныеСтатусы Цикл
			НЗапись = НаборСтатусы.Добавить();
			НЗапись.Заказ = Стр.Заказ;
			
			Если Стр.Заказ.ТерминалПриема = Справочники.РегиональныеТерминалы.СПбСтриж Тогда				
				НЗапись.Статус = Стр.СтатусСтрижОбратныйПоток_Код;		
			Иначе
				НЗапись.Статус = Стр.СтатусСтриж_Код;				
			КонецЕсли;
			
			НЗапись.Период = ТекПер;
			//НЗапись.ДокументРегистратор = ;
			НЗапись.СтатусAxiomus = Стр.Статус;	
			НЗапись.Терминал = Справочники.РегиональныеТерминалы.СПбСтриж;
		КонецЦикла;
		
		Попытка
			НаборСтатусы.Записать();
		Исключение
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;
			
		Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
		
		МассивСтатусов = Неопределено;// Задача № 2813
		
		Для Каждого Стр Из РезИзмененныеСтатусы Цикл
			
			// Обновляем статусы в админке
			Если ЗначениеЗаполнено(Стр.СтатусСтриж) Тогда
				// Задача № 2813
				//СтрЗапроса = "EXEC import_setOrderStatusIDFrom1C " + Формат(СокрЛП(Стр.Заказ.Номер), "ЧГ=") + "," + Строка(Стр.СтатусСтриж.Код) +",'регламент'";
				//Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);
				МассивСтатусов = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(Стр.Заказ.Номер, Стр.СтатусСтриж.Код, "регламент",,,МассивСтатусов); 
				// Задача № 2813
			Иначе	
				#Если Клиент Тогда
					Сообщить("Не найдено соответствие статуса Стриж для статуса Аксиомус: " + Стр.Статус);
				#КонецЕсли
			КонецЕсли;
			
			
			// Предварительное закрытие
			Если ЗначениеЗаполнено(Стр.СтатусСтрижФинальный) И Стр.ПредварительноеЗакрытие Тогда				
				Най = Документы.ПредварительноеЗакрытиеЗаказа.НайтиПоРеквизиту("Заказ", Стр.Заказ);
				Если НЕ ЗначениеЗаполнено(Най) Тогда
					СоздатьПредварительноеЗакрытиеЗаказа(Стр.Заказ, Стр.СтатусСтрижФинальный);	
				КонецЕсли;					
			КонецЕсли;	
			
			
			
			//Создать_ВводДанныхОСостоянииЗаказа();
			Если ЗначениеЗаполнено(Стр.РезультатДоставки) ИЛИ ЗначениеЗаполнено(Стр.ТипОплаты) Тогда
				
				ДокВвод = Документы.ВводДанныхОСостоянииЗаказа.СоздатьДокумент();
				ДокВвод.СформированАвтоматически = Истина;
				ДокВвод.Заказ = Стр.Заказ;
				ДокВвод.Дата = ТекущаяДата();
				//ДокВвод.ДатаПереноса = ДатаПереноса;
				ДокВвод.ФормироватьДвиженияПоСостояниюЗаказов = Истина;
				
				Если ЗначениеЗаполнено(Стр.РезультатДоставки) Тогда			
					ДокВвод.РезультатДоставки = Стр.РезультатДоставки;				
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.ПричинаНеВыполненияДоставки) Тогда
					ДокВвод.ПричинаНевыполнения = Стр.ПричинаНеВыполненияДоставки;	
				КонецЕсли;	
				
				// ввод данных о типе оплаты
				СтарыйТипОплаты = Справочники.ТипыОплат.НайтиПоКоду(Стр.Заказ.ТипОплаты);
				Если ЗначениеЗаполнено(Стр.ТипОплаты) И Стр.ТипОплаты <> СтарыйТипОплаты 
					И (Стр.ТипОплаты = Справочники.ТипыОплат.Наличные ИЛИ Стр.ТипОплаты = Справочники.ТипыОплат.Терминал) 
					И (СтарыйТипОплаты = Справочники.ТипыОплат.Наличные ИЛИ СтарыйТипОплаты = Справочники.ТипыОплат.Терминал) Тогда
					ДокВвод.ТипОплатыДо = СтарыйТипОплаты;
					ДокВвод.ТипОплатыПосле = Стр.ТипОплаты;	
				КонецЕсли;
								
							
				ЗапросР = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				                      |	РейсЗаказы.Ссылка КАК Ссылка,
				                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки,
				                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Транспорт КАК Транспорт,
				                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Водитель КАК Водитель,
				                      |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Экспедитор КАК Экспедитор
				                      |ИЗ
				                      |	Документ.Рейс.Заказы КАК РейсЗаказы
				                      |ГДЕ
				                      |	РейсЗаказы.УдаленИзРейса = ЛОЖЬ
				                      |	И РейсЗаказы.Заказ = &Заказ
				                      |	И РейсЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
				                      |
				                      |УПОРЯДОЧИТЬ ПО
				                      |	РейсЗаказы.Ссылка.Дата УБЫВ");
				ЗапросР.УстановитьПараметр("Заказ", Стр.Заказ);
				РезР = ЗапросР.Выполнить().Выбрать();
				Если РезР.Следующий() Тогда			
					ДокВвод.Рейс = РезР.Ссылка;
					ДокВвод.Транспорт  = РезР.Транспорт;
					ДокВвод.Водитель   = РезР.Водитель;
					ДокВвод.Экспедитор = РезР.Экспедитор;		
				КонецЕсли;
					
				Попытка		
					ДокВвод.Записать(РежимЗаписиДокумента.Запись);
					ДокВвод.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение
				КонецПопытки;
				
				
				// отправка Типа оплаты в Админку
				Если ЗначениеЗаполнено(Стр.ТипОплаты) Тогда
					Попытка				
						Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();	
						ТекстЗапроса = "EXEC import_setOrderPayType " + СокрЛП(Стр.Заказ.Номер) + ", " + Формат(Стр.ТипОплаты.Код, "ЧГ=");
						Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);
						
						// запись реализации
						Д = Стр.Заказ.ПолучитьОбъект();
						Д.ТипОплаты = Стр.ТипОплаты.Код;
						Д.Записать(РежимЗаписиДокумента.Запись);			
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Задача № 2813
		mas.ОтправитьМассивСтатусовЗаказов(МассивСтатусов);
		// Задача № 2813
		
	КонецЕсли;
	
	Для каждого Стр из РезИзмененныеСтатусы Цикл
		may.ВнестиИзмененияОтАкси(Стр.Заказ, Стр.РезультатДоставки, Стр.ПричинаНеВыполненияДоставки);
	КонецЦикла;	

КонецПроцедуры


//Процедура ИзменениеТипаОплаты()
//	
//	
//	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();	
//	ТекстЗапроса = "EXEC import_setOrderPayType " + СокрЛП(Заказ.Номер) + ", " + Формат(ТипОплатыПосле.Код, "ЧГ=");
//	Евген.ЗапросКИнтернетМагазину(ТекстЗапроса, Подкл);
//	
//	Д = Заказ.ПолучитьОбъект();
//	Д.ТипОплаты = ТипОплатыПосле.Код;
//	Д.Записать(РежимЗаписиДокумента.Запись);
//		
//Конецпроцедуры


// получает данные машин СПБ
Функция axi_ПолучитьДанныеТранспортовВероут(ukey) Экспорт

    стрURL = Константы.AxiomusApiUrl.Получить();
    ПараметрыОтвета = Новый Структура;
        
    Если НЕ ЗначениеЗаполнено(стрURL) Тогда
        ПараметрыОтвета.Вставить("Статус",Справочники.СтатусыAxiomus.НайтиПоКоду(400));
        Возврат ПараметрыОтвета;    
    КонецЕсли;
    
    Типsingleorder = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusRequest","singleorder");
    Типauth = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusRequest","auth");
    singleorder = ФабрикаXDTO.Создать(Типsingleorder);
    singleorder.mode = "get_spbcouriers";
    auth = ФабрикаXDTO.Создать(Типauth);
    auth.ukey = ukey;
    singleorder.auth = auth;
	
	СтрокаXML = smv.СформироватьСтрокуXML(ФабрикаXDTO,singleorder);
    
    Попытка
        oXMLHTTP = Новый COMОбъект("MSXML2.XMLHTTP");
        стрURL=стрURL;
        oXMLHTTP.open("POST", стрURL, 0);
        oXMLHTTP.setRequestHeader("HOST", "axiomus.ru");
        oXMLHTTP.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        oXMLHTTP.send("data="+СтрокаXML);
    Исключение
        ПараметрыОтвета.Вставить("Статус",Справочники.СтатусыAxiomus.НайтиПоКоду(400));
        Возврат ПараметрыОтвета;    
    КонецПопытки;
    
    ОтветXML = oXMLHTTP.responseText;
    
    ОтветXDTO_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusStatusResponse","response");
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ОтветXML);
    ОтветXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ОтветXDTO_Тип);
	
	
	
	// Создание описателя типов для таблицы значений
	КЧ = Новый КвалификаторыЧисла(4,0);
	КС = Новый КвалификаторыСтроки(25);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	 
	ТабТипыТранспортов = Новый ТаблицаЗначений;
	ТабТипыТранспортов.Колонки.Добавить("id", ОписаниеТиповЧ);
	ТабТипыТранспортов.Колонки.Добавить("name", ОписаниеТиповС);	
	
	Попытка  
		Если ТипЗнч(ОтветXDTO.courierlist.courier) = Тип("СписокXDTO") Тогда
            Для каждого Стр Из ОтветXDTO.courierlist.courier Цикл
				
				НСтр = ТабТипыТранспортов.Добавить();
				НСтр.id = Стр.id;
				НСтр.name = Стр.name;
            КонецЦикла;
        Иначе
            
            Стр = ОтветXDTO.courierlist.courier;
			НСтр = ТабТипыТранспортов.Добавить();
			НСтр.id = Стр.id;
			НСтр.name = Стр.name;			
        КонецЕсли;
    Исключение
	КонецПопытки;
	
	// возвращает таблицу (id, name)
	Возврат ТабТипыТранспортов; 

КонецФункции


Процедура axi_ОбновитьТипыТранспортовВероут() Экспорт
	
		
	//+++ БАО 26.09.2017 №1880
	//---РодительСПБ  = Справочники.ТипыТранспортовВероут.SPB;
	РодительСПБ = Справочники.ТипыТранспортовВероут.НайтиПоНаименованию("SPB");
	//--- БАО 26.09.2017 №1880

	
	ТабДанныеСПБ = Новый ТаблицаЗначений;
	ТабДанныеСПБ = axi_ПолучитьДанныеТранспортовВероут("63df707cfb53dbc4e38f9eb77150cee6");  // доделать  ukey !!!

	Если ТабДанныеСПБ.Количество() Тогда
		Для каждого Стр Из ТабДанныеСПБ Цикл
			
			НайТранспорт = Справочники.ТипыТранспортовВероут.НайтиПоРеквизиту("axi_id", Стр.id, РодительСПБ); 
			Если ЗначениеЗаполнено(НайТранспорт) Тогда				
				ТранспортОбъект = НайТранспорт.ПолучитьОбъект();
				ТранспортОбъект.Наименование = Стр.name;
				Попытка
					ТранспортОбъект.Записать();									
				Исключение
					#Если Клиент Тогда
					Сообщить(ОписаниеОшибки());
					#КонецЕсли		
				КонецПопытки;			
			Иначе         			
				// создать элемент
				НовТранспорт = Справочники.ТипыТранспортовВероут.СоздатьЭлемент();
				НовТранспорт.Родитель = РодительСПБ;
				НовТранспорт.Наименование = Стр.name;
				НовТранспорт.axi_id = Стр.id;
				НовТранспорт.Записать();			
			КонецЕсли;		
		
		КонецЦикла;	
	КонецЕсли;
	

КонецПроцедуры

Функция axi_ПолучитьРезультатДоставкиПоСтатусу(СтатусЭлемент) Экспорт
	
	Если СтатусЭлемент.Код = 107 // Вручен
		ИЛИ СтатусЭлемент.Код = 100 // Выполнен 
		ИЛИ СтатусЭлемент.Код = 80 // Исполнен
		Тогда		
		Возврат Справочники.новаРезультатМестнойДоставки.Выполнена;	
	ИначеЕсли СтатусЭлемент.Код = 110 // Частичный отказ
		Тогда		
		Возврат Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично;
	ИначеЕсли СтатусЭлемент.Код = 120 //Полный отказ
		ИЛИ СтатусЭлемент.Код = 90 // Отмена
		ИЛИ СтатусЭлемент.Код = 81 // Предотмена
		Тогда		
		Возврат Справочники.новаРезультатМестнойДоставки.НеВыполнена;	
	КонецЕсли;	
	
	Возврат Неопределено;

КонецФункции // ()


Процедура axi_ОбработатьПереносы(ТабСтатусы)
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТабСтатусы.Статус,
						  |	ТабСтатусы.Заказ
	                      |ПОМЕСТИТЬ ВТ_Статусы
	                      |ИЗ
	                      |	&ТабСтатусы КАК ТабСтатусы
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Статусы.Заказ,
	                      |	ax_СоответствиеСтатусов.СтатусСтриж
	                      |ПОМЕСТИТЬ ВТ_Итог
	                      |ИЗ
	                      |	ВТ_Статусы КАК ВТ_Статусы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ax_СоответствиеСтатусов КАК ax_СоответствиеСтатусов
	                      |		ПО ВТ_Статусы.Статус = ax_СоответствиеСтатусов.СтатусAxiomus
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Итог.Заказ,
	                      |	ВТ_Итог.СтатусСтриж
	                      |ИЗ
	                      |	ВТ_Итог КАК ВТ_Итог
	                      |ГДЕ
						  |	ВТ_Итог.СтатусСтриж = ЗНАЧЕНИЕ(Справочник.СтатусыЗаказов.Перенос)");
	Запрос.УстановитьПараметр("ТабСтатусы", ТабСтатусы);
	
	Рез = Запрос.Выполнить().Выбрать();	
	
	Пока Рез.Следующий() Цикл
			
		Если ЗначениеЗаполнено(Рез.Заказ) Тогда
					
			Реализация = Рез.Заказ;
			Най = ТабСтатусы.НайтиСтроки(Новый Структура("Заказ", Реализация));
			ДатаПереноса = Дата(СокрЛП(Най[0].exe_date) + " 00:00:00");
			Если НачалоДня(Реализация.Дата) <> НачалоДня(ДатаПереноса) Тогда
								
				ДокПереносДаты = Документы.ИзменениеДатыДоставки.СоздатьДокумент();
			    ДокПереносДаты.axi = Истина;
				ДокПереносДаты.Дата = ТекущаяДата();
				ДокПереносДаты.ДатаДоставки = ДатаПереноса;
				ДокПереносДаты.КорректироватьДатуВАдминке = Истина;
				ДокПереносДаты.Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Реализация.Номер));
				ДокПереносДаты.Заказ = Реализация.Ссылка;
				ДокПереносДаты.ПричинаИзмененияДаты = Перечисления.ПричиныИзмененияДатыДоставки.ВыгрузкаИзСистемыАксиомус;
				
				Попытка				
					ДокПереносДаты.Записать(РежимЗаписиДокумента.Запись);
					ДокПереносДаты.Записать(РежимЗаписиДокумента.Проведение);		
				Исключение
					#Если Клиент Тогда
						Сообщить("Не удалось создать перенос даты доставки (Аксиомус) по причине: " + ОписаниеОшибки());
					#КонецЕсли	
				КонецПопытки;
								
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЦикла;
	
	// проставить ДоставкаЗавершена 
	axi_ПроставитьДоставкаЗавершена(ТабСтатусы);	
	
	

КонецПроцедуры

Процедура axi_ПроставитьДоставкаЗавершена(ТабСтатусы)
	
	Для каждого Стр Из ТабСтатусы Цикл
	    Если Стр.Статус = Справочники.СтатусыAxiomus.Выполнен ИЛИ Стр.Статус = Справочники.СтатусыAxiomus.Вручен ИЛИ Стр.Статус = Справочники.СтатусыAxiomus.Исполнен Тогда
		
			Доставка = БизнесПроцессы.новаМестнаяДоставка.НайтиПоНомеру(СокрЛП(Стр.Заказ.Номер));
			Если ЗначениеЗаполнено(Доставка) И НЕ Доставка.ДоставкаЗавершена Тогда
				ДоставкаОбъект = Доставка.ПолучитьОбъект();
				ДоставкаОбъект.ДоставкаЗавершена = Истина;
				Попытка
					ДоставкаОбъект.Записать();
				Исключение
				КонецПопытки;		
			Иначе				
			КонецЕсли;		
				
		КонецЕсли;		
	КонецЦикла;	

КонецПроцедуры

// регламент Аксиомус
Процедура axi_ЗагрузкаРезультатовДоставки() Экспорт

	
	ТекДата = ТекущаяДата();  
	//ТекДата = Дата("20160523");  // тест
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Рейс.Ссылка КАК Рейс,
	                      |	Рейс.Транспорт.axi_id КАК axi_id,
	                      |	Рейс.Транспорт.Ссылка КАК Транспорт
	                      |ИЗ
	                      |	Документ.Рейс КАК Рейс
	                      |ГДЕ
	                      |	Рейс.ТерминалДоставки = &ТерминалДоставки
	                      |	И Рейс.Дата МЕЖДУ &Дата1 И &Дата2
	                      |	И Рейс.Проведен = ИСТИНА");	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекДата));	
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекДата));
	Запрос.УстановитьПараметр("ТерминалДоставки", Справочники.РегиональныеТерминалы.СПбСтриж);
	Рез = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого Стр Из Рез Цикл
		
		ТабРезультат = axi_GetCourierOrders(ТекДата, Стр.axi_id);
		
		ТабРезультат = ДополнитьРезультатЗаказом(ТабРезультат);
		
		ОбработатьПриходДСПоОтчетуВодителей(ТабРезультат, ТекДата, Стр.axi_id);
			
	КонецЦикла;
			
	
КонецПроцедуры


Функция axi_GetCourierOrders(date, courier_id) Экспорт

	
	стрURL = Константы.AxiomusApiUrl.Получить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(0 КАК ЧИСЛО) КАК status,
						  |	ВЫРАЗИТЬ(0 КАК ЧИСЛО) КАК customer_price,
						  |	ВЫРАЗИТЬ(0 КАК ЧИСЛО) КАК num,
						  |	ВЫРАЗИТЬ(0 КАК ЧИСЛО) КАК id,
	                      |	ВЫРАЗИТЬ("""" КАК СТРОКА(40)) КАК okey");
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();	
	ТаблицаРезультат.Очистить();
	
	//ТаблицаРезультат = Новый ТаблицаЗначений;
	//ТаблицаРезультат.Колонки.Добавить("status");
	//ТаблицаРезультат.Колонки.Добавить("customer_price");
	//ТаблицаРезультат.Колонки.Добавить("okey");
	//ТаблицаРезультат.Колонки.Добавить("num");
	//ТаблицаРезультат.Колонки.Добавить("id");
	
    
    Тип_singleorder = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusGetCourierOrdersRequest","singleorder");
    Тип_courier = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusGetCourierOrdersRequest","courier");
    Тип_auth = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusGetCourierOrdersRequest","auth");

    singleorder = ФабрикаXDTO.Создать(Тип_singleorder);
	auth = ФабрикаXDTO.Создать(Тип_auth);	
    auth.ukey = "63df707cfb53dbc4e38f9eb77150cee6";

    singleorder.mode = "get_courierorders";
	singleorder.query = "63df707cfb53dbc4e38f9eb77150cee6";
	singleorder.auth = auth;
	
    courier = ФабрикаXDTO.Создать(Тип_courier);
    courier.date = date;
	courier.id = courier_id;
    singleorder.courier	= courier;    	
		
    СтрокаXML = smv.СформироватьСтрокуXML(ФабрикаXDTO, singleorder);
    СтрокаXML = СтрЗаменить(СтрокаXML,"<?xml version=""1.0""?>","");
    
    Попытка
        oXMLHTTP = Новый COMОбъект("MSXML2.XMLHTTP");
        стрURL=стрURL;
        oXMLHTTP.open("POST", стрURL, 0);
        oXMLHTTP.setRequestHeader("HOST", "axiomus.ru");
        oXMLHTTP.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        oXMLHTTP.send("data="+СтрокаXML);
    Исключение
         
    КонецПопытки;
    
    ОтветXML = oXMLHTTP.responseText;
    
    ОтветXDTO_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusGetCourierOrdersResponse","Неопределено");
	//ОтветXDTO_Тип = ФабрикаXDTO.Тип("http://www.strizh-logistic.ru/AxiomusGetCourierOrdersResponse","response");
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ОтветXML);
    ОтветXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ОтветXDTO_Тип);
    
	Попытка 
		Если ТипЗнч(ОтветXDTO.group.order) = Тип("СписокXDTO") Тогда
	        Для каждого Стр Из ОтветXDTO.group.order Цикл
				
				НСтр = ТаблицаРезультат.Добавить();
				НСтр.status = ?(Стр.status = "", 0, Стр.status);
				НСтр.customer_price = ?(Стр.customer_price = "", 0, Стр.customer_price);
				НСтр.okey = Стр.okey;
				НСтр.num = ?(Стр.num = "", 0, Стр.num);
				НСтр.id = ?(Стр.id = "", 0, Стр.id);
			
	        КонецЦикла;
	    Иначе
	        
	        Стр = ОтветXDTO.group.order;
	        НСтр = ТаблицаРезультат.Добавить();
			НСтр.status = ?(Стр.status = "", 0, Стр.status);
			НСтр.customer_price = ?(Стр.customer_price = "", 0, Стр.customer_price);
			НСтр.okey = Стр.okey;
			НСтр.num = ?(Стр.num = "", 0, Стр.num);
			НСтр.id = ?(Стр.id = "", 0, Стр.id);
			
	    КонецЕсли;
	Исключение
	КонецПопытки;
    
    Возврат ТаблицаРезультат;


КонецФункции // ()


Функция ОбработатьПриходДСПоОтчетуВодителей(ТабРезультат, ТекДата, axi_id);
		
	// Ищем документ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПриходДСПоОтчетуВодителя.Ссылка
	                      |ИЗ
	                      |	Документ.ПриходДСПоОтчетуВодителя КАК ПриходДСПоОтчетуВодителя
	                      |ГДЕ
	                      |	ПриходДСПоОтчетуВодителя.axi_id = &axi_id
	                      |	И ПриходДСПоОтчетуВодителя.Дата МЕЖДУ &Дата1 И &Дата2
	                      |	И ПриходДСПоОтчетуВодителя.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("axi_id", axi_id);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекДата));
	Рез = Запрос.Выполнить().Выбрать();
							  	
	Если Рез.Следующий() Тогда		
		Док = Рез.Ссылка.ПолучитьОбъект();
		Док.Доставки.Очистить();
		Док.Товары.Очистить();
	Иначе
		Док = Документы.ПриходДСПоОтчетуВодителя.СоздатьДокумент();
	КонецЕсли;
	
	Док.Дата = НачалоДня(ТекДата);
	Док.axi_id = axi_id;
	Док.axi_Загрузка = Истина;	
		
	
	// заполняем ТЧ Доставки
	Для каждого Стр Из ТабРезультат Цикл	
		
		Если ЗначениеЗаполнено(Стр.Заказ) Тогда
			РезультатДоставки = Неопределено;		
			НДоставка = Док.Доставки.Добавить();
			НДоставка.Доставка = Стр.Заказ;
			НДоставка.Сумма = Стр.Заказ.СуммаДокумента;
			НДоставка.КОплатеКлиентом = Стр.customer_price;
						
			ЗаполнитьТЧТовары(Док, Стр.Заказ, РезультатДоставки);	
			
			НДоставка.РезультатДоставки = РезультатДоставки;		
		Иначе
		    // отправить сообщение
		КонецЕсли;
	КонецЦикла;
		

	// записываем 
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
		Док.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение	
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
	КонецПопытки;
	
	
КонецФункции // ()



Процедура ЗаполнитьТЧТовары(Док, Заказ, РезультатДоставки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	                      |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(7, 0)) КАК КоличествоОтказ,
	                      |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(12, 2)) КАК Цена");
	ОтказныеТоварыТЗ = Запрос.Выполнить().Выгрузить();
		
	СтрОтбор = Новый Структура("Заказ", Заказ);
	

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДополнительныеПараметрыЗаказа.okey
	                      |ИЗ
	                      |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	                      |ГДЕ
	                      |	ДополнительныеПараметрыЗаказа.Заказ = &Заказ");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда	
		okey = Рез.okey;		
	КонецЕсли;

	ОтказыТЗ = smv.ЗапросТекущегоСтатусаЗаказа(okey, "63df707cfb53dbc4e38f9eb77150cee6");
	
	Если ОтказыТЗ.Свойство("refused_items") Тогда 
		
		Если ТипЗнч(ОтказыТЗ.refused_items.item) = Тип("СписокXDTO") Тогда		
			Для каждого Стр Из ОтказыТЗ.refused_items.item Цикл		
				НСтр = ОтказныеТоварыТЗ.Добавить();	
				НСтр.Номенклатура = РазобратьСтрокуНоменклатуры(Стр.name, Заказ.ВладелецТовара);
				НСтр.КоличествоОтказ = Стр.quantity;
				НСтр.Цена = Стр.price;
			КонецЦикла;		
		Иначе
			Стр = ОтказыТЗ.refused_items.item;
			НСтр = ОтказныеТоварыТЗ.Добавить();	
			НСтр.Номенклатура = РазобратьСтрокуНоменклатуры(Стр.name, Заказ.ВладелецТовара);
			НСтр.КоличествоОтказ = Стр.quantity;
			НСтр.Цена = Стр.price;	
		КонецЕсли;
	
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
		                      |	ПоступлениеТоваровУслугТовары.Номенклатура,
		                      |	СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма
		                      |ПОМЕСТИТЬ ВТ_ТЧ
		                      |ИЗ
		                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		                      |ГДЕ
		                      |	ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ПоступлениеТоваровУслугТовары.Номенклатура
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ВТ_Отказы.Номенклатура,
		                      |	ВТ_Отказы.КоличествоОтказ
		                      |ПОМЕСТИТЬ ВТ_отказ
		                      |ИЗ
		                      |	&ВТ_Отказы КАК ВТ_Отказы
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ВТ_ТЧ.Количество КАК ИсходноеКоличество,
		                      |	ВТ_ТЧ.Номенклатура,
		                      |	ВТ_ТЧ.Сумма,
		                      |	ВТ_ТЧ.Количество - ЕСТЬNULL(ВТ_отказ.КоличествоОтказ, 0) КАК Количество
		                      |ИЗ
		                      |	ВТ_ТЧ КАК ВТ_ТЧ
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_отказ КАК ВТ_отказ
		                      |		ПО ВТ_ТЧ.Номенклатура = ВТ_отказ.Номенклатура");
		Запрос.УстановитьПараметр("Номер", СокрЛП(Заказ.Номер));
		Запрос.УстановитьПараметр("ВТ_Отказы", ОтказныеТоварыТЗ);
	Иначе		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
		                      |	ПоступлениеТоваровУслугТовары.Номенклатура,
		                      |	СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма,
		                      |	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК ИсходноеКоличество
		                      |ИЗ
		                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		                      |ГДЕ
		                      |	ПоступлениеТоваровУслугТовары.Ссылка.Номер = &Номер
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ПоступлениеТоваровУслугТовары.Номенклатура");
		Запрос.УстановитьПараметр("Номер", СокрЛП(Заказ.Номер));		
	КонецЕсли;
	
	Рез = Запрос.Выполнить().Выбрать();
	
	ЕстьОтказы = ложь;
	ЕстьВыполнения = Ложь;
	
	Пока Рез.Следующий() Цикл		
		НТовар = Док.Товары.Добавить();	
		НТовар.Доставка = Заказ; 				
		НТовар.Номенклатура = Рез.Номенклатура;
		НТовар.Количество = Рез.Количество;
		НТовар.ИсходноеКоличество = Рез.ИсходноеКоличество;
		НТовар.Сумма = Рез.Сумма;	
		
		Если Рез.ИсходноеКоличество > Рез.Количество  Тогда		
			ЕстьОтказы = Истина;		
		КонецЕсли;
		Если  Рез.Количество > 0 Тогда		
			ЕстьВыполнения = Истина;		
		КонецЕсли;	
	КонецЦикла;	
	
	
	Если ЕстьОтказы И ЕстьВыполнения Тогда		
		РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ВыполненаЧастично;		
	ИначеЕсли ЕстьОтказы И НЕ ЕстьВыполнения Тогда	
		РезультатДоставки = Справочники.новаРезультатМестнойДоставки.НеВыполнена;		
	ИначеЕсли НЕ ЕстьОтказы И ЕстьВыполнения Тогда	
		РезультатДоставки = Справочники.новаРезультатМестнойДоставки.Выполнена;	
	КонецЕсли;
	
КонецПроцедуры


Функция РазобратьСтрокуНоменклатуры(СтрокаТовар, Магазин)
		
	СтрокаТовар = СтрЗаменить(СтрокаТовар, "//", "#");	
	КодТовара = "";
	Сч = 1; Симв = "";
	
	Пока Симв <> "#" И Сч < СтрДлина(СтрокаТовар) Цикл
		Симв = Сред(СтрокаТовар, Сч, 1);
		КодТовара = КодТовара + Симв;	
		Сч = Сч + 1;
	КонецЦикла;	
	КодТовара = СтрЗаменить(КодТовара, "#", "");
	
	ТоварыСпр = Справочники.Номенклатура.НайтиПоКоду("00000000002");
	Родитель = Справочники.Номенклатура.НайтиПоКоду(Магазин.Код,,ТоварыСпр);
	Товар = Справочники.Номенклатура.НайтиПоКоду(КодТовара,, Родитель);
	
	Возврат Товар;	

КонецФункции // ()



Функция ДополнитьРезультатЗаказом(ТабРезультат) 
	
	ТабРезультат.колонки.Добавить("Заказ");
		
	Для каждого Стр Из ТабРезультат Цикл
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДополнительныеПараметрыЗаказа.Заказ,
		                      |	ДополнительныеПараметрыЗаказа.ОценочнаяСтоимость,
		                      |	ДополнительныеПараметрыЗаказа.КОплатеКлиентом,
		                      |	ДополнительныеПараметрыЗаказа.СкладМагазина,
		                      |	ДополнительныеПараметрыЗаказа.ПричинаОтклоненияЗаказа,
		                      |	ДополнительныеПараметрыЗаказа.ЧастичныйВыкупЗапрещен,
		                      |	ДополнительныеПараметрыЗаказа.СОжиданием,
		                      |	ДополнительныеПараметрыЗаказа.КОплатеКлиентомИзмененное,
		                      |	ДополнительныеПараметрыЗаказа.okey,
		                      |	ДополнительныеПараметрыЗаказа.ДатаОтгрузки,
		                      |	ДополнительныеПараметрыЗаказа.ШтрихкодOZON,
		                      |	ДополнительныеПараметрыЗаказа.nameOZON,
		                      |	ДополнительныеПараметрыЗаказа.ВозвратЗапрещен,
		                      |	ДополнительныеПараметрыЗаказа.ПодъемОплачен
		                      |ИЗ
		                      |	РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
		                      |ГДЕ
		                      |	ДополнительныеПараметрыЗаказа.okey = &okey");
	    Запрос.УстановитьПараметр("okey", СокрЛП(Стр.okey));
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
		
			Стр.Заказ = Рез.Заказ;	
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТабРезультат;	

КонецФункции // ()


Функция ВернутьТекстЗапросаПоездкиПоЗакрытию() Экспорт
	
	Текст = "ВЫБРАТЬ
	        |	ЗакрытиеЗаказовЗаказы.Реализация
	        |ПОМЕСТИТЬ ВТ_Заказы
	        |ИЗ
	        |	Документ.ЗакрытиеЗаказов.Заказы КАК ЗакрытиеЗаказовЗаказы
	        |ГДЕ
	        |	(ЗакрытиеЗаказовЗаказы.Закрыть = ИСТИНА
	        |			ИЛИ ЗакрытиеЗаказовЗаказы.Отклонить = ИСТИНА)
	        |	И ЗакрытиеЗаказовЗаказы.Реализация ССЫЛКА Документ.РеализацияТоваровУслуг
	        |	И ЗакрытиеЗаказовЗаказы.Ссылка = &Ссылка
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	СостоянияЗаказов.Заказ КАК Заказ,
	        |	СостоянияЗаказов.РезультатДоставки,
	        |	СостоянияЗаказов.ПричинаНеВыполнения,
	        |	СостоянияЗаказов.ПричинаОтказа,
	        |	СостоянияЗаказов.ДатаПереноса,
	        |	СостоянияЗаказов.Экспедитор,
	        |	СостоянияЗаказов.Водитель
	        |ИЗ
	        |	ВТ_Заказы КАК ВТ_Заказы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказов
	        |		ПО ВТ_Заказы.Реализация = СостоянияЗаказов.Заказ
	        |ИТОГИ ПО
	        |	Заказ";
	
	Возврат Текст;

КонецФункции // ()


// Раздельное выполнение регламента по терминалам 
Процедура ОбработатьВыгрузкуМашинВАдминкуПоТерминалам(КодНастройки) Экспорт
	//Возврат;
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Терминал = Справочники.РегиональныеТерминалы.НайтиПоКоду(КодНастройки);
		
	
	Обр = Обработки.ВыгрузкаМашин.Создать();
	//Обр.ДатаДоставки = Дата("20180924");// Тест
	Обр.ДатаДоставки = ТекущаяДата();  
	ТабЗаказовМашин = "";
	Рез = Обр.ВыгрузитьМашины(ТабЗаказовМашин, Терминал);
	МасП = Новый Массив;
	
	//МасП.Добавить("svn@strizh-logistic.ru");
	МасП.Добавить("rea@strizh-logistic.ru");
	МасП.Добавить("maksim.ivanov@strizh-logistic.ru");		
	МасП.Добавить("logist@strizh-logistic.ru");
	МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	МасП.Добавить("alexey.kuzmichev@strizh-logistic.ru");
	//МасП.Добавить("anatoly.kopytin@strizh-logistic.ru");
	МасП.Добавить("syn@strizh-logistic.ru");
	МасП.Добавить("denis.zherebtsov@strizh-logistic.ru"); // ТЕСТ 
	МасП.Добавить("v.yakurnov@strizh-logistic.ru");
	//МасП.Добавить("igor.tischenko@strizh-logistic.ru");
	
	Если Рез = "" Тогда
		КолЗаказов = ТабЗаказовМашин.Количество();
		ТабМ = ТабЗаказовМашин.Скопировать();
		ТабМ.Свернуть("Машина", "Кол");
		ТабМ.Сортировать("Кол Убыв");
		
		МакетHTML = Обр.ПолучитьМакет("МакетHTML");
		ТекстHTMLМакет = МакетHTML.ПолучитьТекст();
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоМашин]"  , ТабМ.Количество());
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоЗаказов]", КолЗаказов);
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"</tbody></table></body></html>","");
		                                   		
		Т = "";
		СчМаш = 0;
		Для Каждого Тек Из ТабМ Цикл
			Если ЗначениеЗаполнено(Тек.Машина) Тогда
				ГосНомер = Тек.Машина.НомерГосударственнойРегистрации;
			Иначе
				ГосНомер = "машины нет";
			КонецеСли;	
			Т = Т + ГосНомер + ": " + Формат(Тек.Кол, "ЧГ=") + " шт;" + Символы.ПС;
			СчМаш = СчМаш + 1;
			
			ТекстHTMLМакет = ТекстHTMLМакет + 
			"<TR style='BACKGROUND-COLOR: #F5F5DC';'HEIGHT: 11.25pt' height=15>" +
			"<TD align='CENTER';class=xl67 style='BORDER-TOP: windowtext 0.5pt solid; HEIGHT: 11.25pt; BORDER-RIGHT:  2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext 0.5pt solid; ' height=15><FONT size=2 face=Arial>"+СчМаш+"</FONT></TD>"+
			"<TD align='RIGHT'; class=xl70 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; ' colSpan=2><FONT size=2 face=Arial>"+ГосНомер+"</FONT></TD>"+
			"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Тек.Кол+"</FONT></TD></TR>";			
			
		КонецЦикла;	
		
		Т = Т + "ИТОГО: доставок  = " + Формат(КолЗаказов) + " шт." + ", машин = " + Формат(СчМаш);
		
		ТекстHTMLМакет = ТекстHTMLМакет + "</TBODY></TABLE></BODY></HTML>";
		
		//Отпр = lem.ОтправитьСообщение(МасП, "Произведена выгрузка машин (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст) ;
		Отпр = lem.ОтправитьСообщение(МасП,                                                // Массив адресов
		"Произведена выгрузка машин - "+ Терминал.Город + " (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", // Тема 
		ТекстHTMLМакет,                                                         // Текст
		,                                                                       // Файл
		"Логистическая компания ""Стриж""",                                     // Имя отправителя
		,                                                                       // Обратный адрес
		ТипТекстаПочтовогоСообщения.HTML) ;                                     // Тип текста		
		
	Иначе
		Если ТипЗнч(Рез) = Тип("Булево") Тогда
			Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст) ;
		Иначе
			Т = Рез;
			Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст) ;
		КонецеСли;	
	КонецеСли;
	
		
	
	Пер = Новый СтандартныйПериод;
	Пер.ДатаНачала = НачалоДня(ТекущаяДата());
	Пер.ДатаОкончания = КонецДня(ТекущаяДата());
	
	//Пер.ДатаНачала = НачалоДня(Дата("20160413"));    //тест
	//Пер.ДатаОкончания = КонецДня(Дата("20160413"));  //тест
	
	От = Отчеты.ОтчетПоДоставкамКомитента.Создать();
	//Серегин М.В. 08.09.2015 14:54:03 получим контрагентов исключений
	ТаблицаКонтрагентовИсключений = smv.ПолучитьКонтрагентовИсключений(Перечисления.ТипыСвязейКонтрагентовИсключений.РегламентВыгрузкаМашин);
	//Серегин М.В. 08.09.2015 15:04:43 
	
	От.СформироватьОтправитьПоПочте(Пер, ТаблицаКонтрагентовИсключений, Неопределено, Терминал);

КонецПроцедуры



Процедура ВнутреннееПеремещениеЗаказов()  Экспорт
	
	
	ДатаДоставки = ТекущаяДата() + 86400;
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	//                      |	МАКСИМУМ(ИСТИНА) КАК Отправлено,
	//                      |	МАКСИМУМ(ИСТИНА) КАК КОтправлению,
	//                      |	ЕСТЬNULL(Накладная003Заказы.КоличествоМест, РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест
	//                      |ПОМЕСТИТЬ ВТ
	//                      |ИЗ
	//                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
	//                      |		ПО РеализацияТоваровУслуг.Ссылка = ЗагрузкаСТСДШтрихкоды.Заказ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Накладная003.Заказы КАК Накладная003Заказы
	//                      |		ПО РеализацияТоваровУслуг.Ссылка = Накладная003Заказы.Заказ
	//                      |ГДЕ
	//                      |	РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	//                      |	И РеализацияТоваровУслуг.ТерминалПриема = &ТерминалПриема
	//                      |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	//                      |	И РеализацияТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	//                      |	И ЗагрузкаСТСДШтрихкоды.Ссылка.ТерминалПриема = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж)
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	РеализацияТоваровУслуг.Ссылка,
	//                      |	ЕСТЬNULL(Накладная003Заказы.КоличествоМест, РеализацияТоваровУслуг.КоличествоМест)
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ.Заказ,
	//                      |	ВТ.Отправлено,
	//                      |	ВТ.КОтправлению,
	//                      |	ВнутреннееПеремещениеЗаказовЗаказы.Ссылка КАК ВПЗ,
	//                      |	ВТ.КоличествоМест
	//                      |ПОМЕСТИТЬ ВТ_ВПЗ
	//                      |ИЗ
	//                      |	ВТ КАК ВТ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПеремещениеЗаказов.Заказы КАК ВнутреннееПеремещениеЗаказовЗаказы
	//                      |		ПО ВТ.Заказ = ВнутреннееПеремещениеЗаказовЗаказы.Заказ
	//                      |			И (ВнутреннееПеремещениеЗаказовЗаказы.Ссылка.Дата < &Дата1)
	//                      |			И (ВнутреннееПеремещениеЗаказовЗаказы.Ссылка.ТерминалОтправки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж))
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_ВПЗ.Заказ,
	//                      |	ВТ_ВПЗ.Отправлено,
	//                      |	ВТ_ВПЗ.КОтправлению,
	//                      |	ВТ_ВПЗ.КоличествоМест
	//                      |ИЗ
	//                      |	ВТ_ВПЗ КАК ВТ_ВПЗ
	//                      |ГДЕ
	//                      |	ВТ_ВПЗ.ВПЗ ЕСТЬ NULL 
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	ВТ_ВПЗ.Отправлено,
	//                      |	ВТ_ВПЗ.Заказ,
	//                      |	ВТ_ВПЗ.КОтправлению,
	//                      |	ВТ_ВПЗ.КоличествоМест");
//======================================lem 13.07.2017	== убираем ограничение по дате заказа (учитываем все заказы с датой завтра и позже)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
	                      |	МАКСИМУМ(ИСТИНА) КАК Отправлено,
	                      |	МАКСИМУМ(ИСТИНА) КАК КОтправлению,
	                      |	ЕСТЬNULL(Накладная003Заказы.КоличествоМест, РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
	                      |		ПО РеализацияТоваровУслуг.Ссылка = ЗагрузкаСТСДШтрихкоды.Заказ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Накладная003.Заказы КАК Накладная003Заказы
	                      |		ПО РеализацияТоваровУслуг.Ссылка = Накладная003Заказы.Заказ
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	                      |	И РеализацияТоваровУслуг.ТерминалПриема = &ТерминалПриема
	                      |	И РеализацияТоваровУслуг.ТерминалДоставки = &ТерминалДоставки
	                      |	И РеализацияТоваровУслуг.Дата >= &Дата1
	                      |	И ЗагрузкаСТСДШтрихкоды.Ссылка.ТерминалПриема = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РеализацияТоваровУслуг.Ссылка,
	                      |	ЕСТЬNULL(Накладная003Заказы.КоличествоМест, РеализацияТоваровУслуг.КоличествоМест)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Заказ КАК Заказ,
	                      |	ВТ.Отправлено КАК Отправлено,
	                      |	ВТ.КОтправлению КАК КОтправлению,
	                      |	ВнутреннееПеремещениеЗаказовЗаказы.Ссылка КАК ВПЗ,
	                      |	ВТ.КоличествоМест КАК КоличествоМест
	                      |ПОМЕСТИТЬ ВТ_ВПЗ
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПеремещениеЗаказов.Заказы КАК ВнутреннееПеремещениеЗаказовЗаказы
	                      |		ПО ВТ.Заказ = ВнутреннееПеремещениеЗаказовЗаказы.Заказ
	                      |			И (ВнутреннееПеремещениеЗаказовЗаказы.Ссылка.Дата < &Дата1)
	                      |			И (ВнутреннееПеремещениеЗаказовЗаказы.Ссылка.ТерминалОтправки = ЗНАЧЕНИЕ(Справочник.РегиональныеТерминалы.МоскваСтриж))
	                      |			И (ВнутреннееПеремещениеЗаказовЗаказы.Отправлено = ИСТИНА)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ВПЗ.Заказ КАК Заказ,
	                      |	ВТ_ВПЗ.Отправлено КАК Отправлено,
	                      |	ВТ_ВПЗ.КОтправлению КАК КОтправлению,
	                      |	ВТ_ВПЗ.КоличествоМест КАК КоличествоМест
	                      |ИЗ
	                      |	ВТ_ВПЗ КАК ВТ_ВПЗ
	                      |ГДЕ
	                      |	ВТ_ВПЗ.ВПЗ ЕСТЬ NULL
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ВПЗ.Отправлено,
	                      |	ВТ_ВПЗ.Заказ,
	                      |	ВТ_ВПЗ.КОтправлению,
	                      |	ВТ_ВПЗ.КоличествоМест");
	
	Запрос.УстановитьПараметр("ТерминалПриема", Справочники.РегиональныеТерминалы.МоскваСтриж);	
	Запрос.УстановитьПараметр("ТерминалДоставки", Справочники.РегиональныеТерминалы.СПбСтриж);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаДоставки));
//======================================lem 13.07.2017	== убираем ограничение по дате заказа (учитываем все заказы с датой завтра и позже)	
	//Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаДоставки));
//=====================================================================================================	
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Если РезТЗ.Количество() Тогда

		ДокПеремещение = Документы.ВнутреннееПеремещениеЗаказов.СоздатьДокумент();
		ДокПеремещение.ТерминалОтправки = Справочники.РегиональныеТерминалы.МоскваСтриж;
		ДокПеремещение.ТерминалПолучения = Справочники.РегиональныеТерминалы.СПбСтриж;
		ДокПеремещение.Дата = ТекущаяДата();
		
		ДокПеремещение.Заказы.Загрузить(РезТЗ);
		
		Попытка
			ДокПеремещение.Записать(РежимЗаписиДокумента.Запись);
			ДокПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			#Если Клиент Тогда
				Сообщить("Не удалось провести документ Внутреннее перемещение по причине: " + ОписаниеОшибки());
			#КонецЕсли	
		КонецПопытки;
		
	КонецЕсли;
	

КонецПроцедуры


// Раздельное выполнение регламента по терминалам
Процедура РегламентЗакрытиеОперДняСклад(КодНастройки) Экспорт
   	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Терминал = Справочники.РегиональныеТерминалы.НайтиПоКоду(КодНастройки);
	
	
	//// Михушкин - 15.04.2016 - добавлены терминалы --->> 
	Зап = Новый Запрос;
	Зап.Текст = 
	    "ВЫБРАТЬ
	    |	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	    |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТовара,
	    |	РеализацияТоваровУслугТовары.СкладМагазина КАК СкладМагазина
	    |ПОМЕСТИТЬ ВТСуммаТовара
	    |ИЗ
	    |	(ВЫБРАТЬ
	    |		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	    |		СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	    |		РеализацияТоваровУслугТовары.СкладМагазина КАК СкладМагазина
	    |	ИЗ
	    |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	    |	ГДЕ
	    |		РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	    |	
	    |	СГРУППИРОВАТЬ ПО
	    |		РеализацияТоваровУслугТовары.Ссылка,
	    |		РеализацияТоваровУслугТовары.СкладМагазина
	    |	
	    |	ОБЪЕДИНИТЬ ВСЕ
	    |	
	    |	ВЫБРАТЬ
	    |		РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	    |		СУММА(РеализацияТоваровУслугПодарочныеПозиции.Сумма),
	    |		РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина
	    |	ИЗ
	    |		Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	    |	ГДЕ
	    |		РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	    |	
	    |	СГРУППИРОВАТЬ ПО
	    |		РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	    |		РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина) КАК РеализацияТоваровУслугТовары
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	РеализацияТоваровУслугТовары.Ссылка,
	    |	РеализацияТоваровУслугТовары.СкладМагазина
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказов,
	    |	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара,
	    |	ВЫБОР
	    |		КОГДА РеализацияТоваровУслуг.ВладелецТовара = &КонтрагентТопДеливери
	    |				И ВТСуммаТовара.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	    |			ТОГДА &СкладТопДеливери
	    |		ИНАЧЕ ВТСуммаТовара.СкладМагазина
	    |	КОНЕЦ КАК СкладМагазина,
	    |	РеализацияТоваровУслуг.ТерминалПриема КАК ТерминалПриема,
	    |	РеализацияТоваровУслуг.ТерминалДоставки КАК ТерминалДоставки
	    |ПОМЕСТИТЬ ВТКомитенты
	    |ИЗ
	    |	ВТСуммаТовара КАК ВТСуммаТовара
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	    |		ПО ВТСуммаТовара.Реализация = РеализацияТоваровУслуг.Ссылка
	    |ГДЕ
	    |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	    |	И НЕ РеализацияТоваровУслуг.ВладелецТовара В
	    |				(ВЫБРАТЬ
	    |					КонтрагеныИсключения.Владелец КАК Контрагент
	    |				ИЗ
	    |					Справочник.КонтрагеныИсключения КАК КонтрагеныИсключения
	    |				ГДЕ
	    |					КонтрагеныИсключения.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.ТипыСвязейКонтрагентовИсключений.ФактическийПриход))
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	РеализацияТоваровУслуг.ВладелецТовара,
	    |	ВЫБОР
	    |		КОГДА РеализацияТоваровУслуг.ВладелецТовара = &КонтрагентТопДеливери
	    |				И ВТСуммаТовара.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	    |			ТОГДА &СкладТопДеливери
	    |		ИНАЧЕ ВТСуммаТовара.СкладМагазина
	    |	КОНЕЦ,
	    |	РеализацияТоваровУслуг.ТерминалПриема,
	    |	РеализацияТоваровУслуг.ТерминалДоставки
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ФактическийПриходЗаказовНаСклад.Ссылка КАК Док,
	    |	ФактическийПриходЗаказовНаСклад.Контрагент КАК Контрагент,
	    |	ФактическийПриходЗаказовНаСклад.СкладМагазина КАК СкладМагазина,
	    |	ФактическийПриходЗаказовНаСклад.ТерминалПриема КАК ТерминалПриема,
	    |	ФактическийПриходЗаказовНаСклад.ТерминалДоставки КАК ТерминалДоставки
	    |ПОМЕСТИТЬ ВТДок
	    |ИЗ
	    |	Документ.ФактическийПриходЗаказовНаСклад КАК ФактическийПриходЗаказовНаСклад
	    |ГДЕ
	    |	ФактическийПриходЗаказовНаСклад.ДатаНачалаВыборки МЕЖДУ &ДатаНач2 И &ДатаКон2
	    |	И ФактическийПриходЗаказовНаСклад.Проведен = ИСТИНА
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ВЫБОР
	    |		КОГДА ЕСТЬNULL(ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе, ЛОЖЬ)
	    |			ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	    |		ИНАЧЕ ВТКомитенты.ВладелецТовара
	    |	КОНЕЦ КАК Родитель,
	    |	ВТКомитенты.КоличествоЗаказов КАК КоличествоЗаказов,
	    |	ВТКомитенты.ВладелецТовара КАК ВладелецТовара,
	    |	ВТКомитенты.СкладМагазина КАК СкладМагазина,
	    |	ВТКомитенты.ТерминалПриема КАК ТерминалПриема,
	    |	ВТКомитенты.ТерминалДоставки КАК ТерминалДоставки
	    |ИЗ
	    |	ВТКомитенты КАК ВТКомитенты
	    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДок КАК ВТДок
	    |		ПО (ВЫБОР
	    |				КОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе
	    |					ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	    |				ИНАЧЕ ВТКомитенты.ВладелецТовара
	    |			КОНЕЦ = ВТДок.Контрагент)
	    |			И ВТКомитенты.СкладМагазина = ВТДок.СкладМагазина
	    |			И ВТКомитенты.ТерминалПриема = ВТДок.ТерминалПриема
	    |			И ВТКомитенты.ТерминалДоставки = ВТДок.ТерминалДоставки
	    |ГДЕ
	    |	ЕСТЬNULL(ВТДок.Док, ИСТИНА) = ИСТИНА
	    |	И ВТКомитенты.ТерминалДоставки = &ТерминалДоставки
	    |	И НЕ ВТКомитенты.ВладелецТовара В (&КонтЧтоНеНадо)
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	Родитель,
	    |	СкладМагазина УБЫВ,
	    |	ТерминалПриема,
	    |	ТерминалДоставки
	    |ИТОГИ
	    |	СУММА(КоличествоЗаказов)
	    |ПО
	    |	Родитель,
	    |	СкладМагазина,
	    |	ТерминалПриема,
	    |	ТерминалДоставки
	    |АВТОУПОРЯДОЧИВАНИЕ";
	// <<--- Михушкин 
	
	
	
	//Зап = Новый Запрос("ВЫБРАТЬ
	//                   |	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	//                   |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаТовара,
	//                   |	РеализацияТоваровУслугТовары.СкладМагазина КАК СкладМагазина
	//                   |ПОМЕСТИТЬ ВТСуммаТовара
	//                   |ИЗ
	//                   |	(ВЫБРАТЬ
	//                   |		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	//                   |		СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	//                   |		РеализацияТоваровУслугТовары.СкладМагазина КАК СкладМагазина,
	//                   |		РеализацияТоваровУслугТовары.Ссылка.ВладелецТовара КАК ВладелецТовара
	//                   |	ИЗ
	//                   |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//                   |	ГДЕ
	//                   |		РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//                   |	
	//                   |	СГРУППИРОВАТЬ ПО
	//                   |		РеализацияТоваровУслугТовары.Ссылка,
	//                   |		РеализацияТоваровУслугТовары.СкладМагазина,
	//                   |		РеализацияТоваровУслугТовары.Ссылка.ВладелецТовара
	//                   |	
	//                   |	ОБЪЕДИНИТЬ ВСЕ
	//                   |	
	//                   |	ВЫБРАТЬ
	//                   |		РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	//                   |		СУММА(РеализацияТоваровУслугПодарочныеПозиции.Сумма),
	//                   |		РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина,
	//                   |		РеализацияТоваровУслугПодарочныеПозиции.Ссылка.ВладелецТовара
	//                   |	ИЗ
	//                   |		Документ.РеализацияТоваровУслуг.ПодарочныеПозиции КАК РеализацияТоваровУслугПодарочныеПозиции
	//                   |	ГДЕ
	//                   |		РеализацияТоваровУслугПодарочныеПозиции.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//                   |	
	//                   |	СГРУППИРОВАТЬ ПО
	//                   |		РеализацияТоваровУслугПодарочныеПозиции.Ссылка,
	//                   |		РеализацияТоваровУслугПодарочныеПозиции.СкладМагазина,
	//                   |		РеализацияТоваровУслугПодарочныеПозиции.Ссылка.ВладелецТовара) КАК РеализацияТоваровУслугТовары
	//                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РежимыЗакрытияОперационногоДняПоКонтрагентам КАК РежимыЗакрытияОперационногоДняПоКонтрагентам
	//                   |		ПО РеализацияТоваровУслугТовары.ВладелецТовара = РежимыЗакрытияОперационногоДняПоКонтрагентам.Контрагент
	//                   |ГДЕ
	//                   |	ЕСТЬNULL(РежимыЗакрытияОперационногоДняПоКонтрагентам.РежимЗакрытияПоАПП, ЛОЖЬ) = ЛОЖЬ
	//                   |
	//                   |СГРУППИРОВАТЬ ПО
	//                   |	РеализацияТоваровУслугТовары.Ссылка,
	//                   |	РеализацияТоваровУслугТовары.СкладМагазина
	//                   |;
	//                   |
	//                   |////////////////////////////////////////////////////////////////////////////////
	//                   |ВЫБРАТЬ
	//                   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоЗаказов,
	//                   |	РеализацияТоваровУслуг.ВладелецТовара КАК ВладелецТовара,
	//                   |	ВЫБОР
	//                   |		КОГДА РеализацияТоваровУслуг.ВладелецТовара = &КонтрагентТопДеливери
	//                   |				И ВТСуммаТовара.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//                   |			ТОГДА &СкладТопДеливери
	//                   |		ИНАЧЕ ВТСуммаТовара.СкладМагазина
	//                   |	КОНЕЦ КАК СкладМагазина,
	//                   |	РеализацияТоваровУслуг.ТерминалПриема КАК ТерминалПриема,
	//                   |	РеализацияТоваровУслуг.ТерминалДоставки КАК ТерминалДоставки
	//                   |ПОМЕСТИТЬ ВТКомитенты
	//                   |ИЗ
	//                   |	ВТСуммаТовара КАК ВТСуммаТовара
	//                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//                   |		ПО ВТСуммаТовара.Реализация = РеализацияТоваровУслуг.Ссылка
	//                   |ГДЕ
	//                   |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//                   |	И НЕ РеализацияТоваровУслуг.ВладелецТовара В
	//                   |				(ВЫБРАТЬ
	//                   |					КонтрагеныИсключения.Владелец КАК Контрагент
	//                   |				ИЗ
	//                   |					Справочник.КонтрагеныИсключения КАК КонтрагеныИсключения
	//                   |				ГДЕ
	//                   |					КонтрагеныИсключения.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.ТипыСвязейКонтрагентовИсключений.ФактическийПриход))
	//                   |
	//                   |СГРУППИРОВАТЬ ПО
	//                   |	РеализацияТоваровУслуг.ВладелецТовара,
	//                   |	ВЫБОР
	//                   |		КОГДА РеализацияТоваровУслуг.ВладелецТовара = &КонтрагентТопДеливери
	//                   |				И ВТСуммаТовара.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//                   |			ТОГДА &СкладТопДеливери
	//                   |		ИНАЧЕ ВТСуммаТовара.СкладМагазина
	//                   |	КОНЕЦ,
	//                   |	РеализацияТоваровУслуг.ТерминалПриема,
	//                   |	РеализацияТоваровУслуг.ТерминалДоставки
	//                   |;
	//                   |
	//                   |////////////////////////////////////////////////////////////////////////////////
	//                   |ВЫБРАТЬ
	//                   |	ФактическийПриходЗаказовНаСклад.Ссылка КАК Док,
	//                   |	ФактическийПриходЗаказовНаСклад.Контрагент КАК Контрагент,
	//                   |	ФактическийПриходЗаказовНаСклад.СкладМагазина КАК СкладМагазина,
	//                   |	ФактическийПриходЗаказовНаСклад.ТерминалПриема КАК ТерминалПриема,
	//                   |	ФактическийПриходЗаказовНаСклад.ТерминалДоставки КАК ТерминалДоставки
	//                   |ПОМЕСТИТЬ ВТДок
	//                   |ИЗ
	//                   |	Документ.ФактическийПриходЗаказовНаСклад КАК ФактическийПриходЗаказовНаСклад
	//                   |ГДЕ
	//                   |	ФактическийПриходЗаказовНаСклад.Дата МЕЖДУ &ДатаНач2 И &ДатаКон2
	//                   |	И ФактическийПриходЗаказовНаСклад.Проведен = ИСТИНА
	//                   |;
	//                   |
	//                   |////////////////////////////////////////////////////////////////////////////////
	//                   |ВЫБРАТЬ
	//                   |	КОЛИЧЕСТВО(ПриходЗаказовНаСкладЗаказы.Заказ) КАК КоличествоЗаказов,
	//                   |	ПриходЗаказовНаСкладЗаказы.Ссылка.Контрагент КАК Контрагент,
	//                   |	ВЫБОР
	//                   |		КОГДА ПриходЗаказовНаСкладЗаказы.Ссылка.Контрагент = &КонтрагентТопДеливери
	//                   |				И ПриходЗаказовНаСкладЗаказы.Ссылка.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//                   |			ТОГДА &СкладТопДеливери
	//                   |		ИНАЧЕ ПриходЗаказовНаСкладЗаказы.Ссылка.СкладМагазина
	//                   |	КОНЕЦ КАК СкладМагазина,
	//                   |	ПриходЗаказовНаСкладЗаказы.Ссылка.ТерминалПриема КАК ТерминалПриема,
	//                   |	ПриходЗаказовНаСкладЗаказы.Ссылка.ТерминалДоставки КАК ТерминалДоставки
	//                   |ПОМЕСТИТЬ ВТ_ПоАПП
	//                   |ИЗ
	//                   |	Документ.ПриходЗаказовНаСклад.Заказы КАК ПриходЗаказовНаСкладЗаказы
	//                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РежимыЗакрытияОперационногоДняПоКонтрагентам КАК РежимыЗакрытияОперационногоДняПоКонтрагентам
	//                   |		ПО ПриходЗаказовНаСкладЗаказы.Ссылка.Контрагент = РежимыЗакрытияОперационногоДняПоКонтрагентам.Контрагент
	//                   |ГДЕ
	//                   |	ПриходЗаказовНаСкладЗаказы.Ссылка.Проведен
	//                   |	И ПриходЗаказовНаСкладЗаказы.Ссылка.ДатаВходящегоДокумента МЕЖДУ &ДатаНач4 И &ДатаКон4
	//                   |	И ЕСТЬNULL(РежимыЗакрытияОперационногоДняПоКонтрагентам.РежимЗакрытияПоАПП, ЛОЖЬ) = ИСТИНА
	//                   |
	//                   |СГРУППИРОВАТЬ ПО
	//                   |	ПриходЗаказовНаСкладЗаказы.Ссылка.Контрагент,
	//                   |	ПриходЗаказовНаСкладЗаказы.Ссылка.ТерминалПриема,
	//                   |	ПриходЗаказовНаСкладЗаказы.Ссылка.ТерминалДоставки,
	//                   |	ВЫБОР
	//                   |		КОГДА ПриходЗаказовНаСкладЗаказы.Ссылка.Контрагент = &КонтрагентТопДеливери
	//                   |				И ПриходЗаказовНаСкладЗаказы.Ссылка.СкладМагазина = ЗНАЧЕНИЕ(Справочник.СкладыМагазинов.ПустаяСсылка)
	//                   |			ТОГДА &СкладТопДеливери
	//                   |		ИНАЧЕ ПриходЗаказовНаСкладЗаказы.Ссылка.СкладМагазина
	//                   |	КОНЕЦ
	//                   |;
	//                   |
	//                   |////////////////////////////////////////////////////////////////////////////////
	//                   |ВЫБРАТЬ
	//                   |	ВЫБОР
	//                   |		КОГДА ЕСТЬNULL(ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе, ЛОЖЬ)
	//                   |			ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	//                   |		ИНАЧЕ ВТКомитенты.ВладелецТовара
	//                   |	КОНЕЦ КАК Родитель,
	//                   |	МАКСИМУМ(ВТКомитенты.КоличествоЗаказов) КАК КоличествоЗаказов,
	//                   |	ВТКомитенты.ВладелецТовара КАК ВладелецТовара,
	//                   |	ВТКомитенты.СкладМагазина КАК СкладМагазина,
	//                   |	ВТКомитенты.ТерминалПриема КАК ТерминалПриема,
	//                   |	ВТКомитенты.ТерминалДоставки КАК ТерминалДоставки
	//                   |ИЗ
	//                   |	ВТКомитенты КАК ВТКомитенты
	//                   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДок КАК ВТДок
	//                   |		ПО (ВЫБОР
	//                   |				КОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе
	//                   |					ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	//                   |				ИНАЧЕ ВТКомитенты.ВладелецТовара
	//                   |			КОНЕЦ = ВТДок.Контрагент)
	//                   |			И ВТКомитенты.СкладМагазина = ВТДок.СкладМагазина
	//                   |			И ВТКомитенты.ТерминалПриема = ВТДок.ТерминалПриема
	//                   |			И ВТКомитенты.ТерминалДоставки = ВТДок.ТерминалДоставки
	//                   |ГДЕ
	//                   |	ЕСТЬNULL(ВТДок.Док, ИСТИНА) = ИСТИНА
	//                   |	И ВТКомитенты.ТерминалДоставки = &ТерминалДоставки
	//                   |	И НЕ ВТКомитенты.ВладелецТовара В (&КонтЧтоНеНадо)
	//                   |
	//                   |СГРУППИРОВАТЬ ПО
	//                   |	ВТКомитенты.СкладМагазина,
	//                   |	ВТКомитенты.ВладелецТовара,
	//                   |	ВТКомитенты.ТерминалПриема,
	//                   |	ВТКомитенты.ТерминалДоставки,
	//                   |	ВЫБОР
	//                   |		КОГДА ЕСТЬNULL(ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе, ЛОЖЬ)
	//                   |			ТОГДА ВТКомитенты.ВладелецТовара.Родитель.ОсновнойМагазин
	//                   |		ИНАЧЕ ВТКомитенты.ВладелецТовара
	//                   |	КОНЕЦ
	//                   |
	//                   |ОБЪЕДИНИТЬ ВСЕ
	//                   |
	//                   |ВЫБРАТЬ
	//                   |	ВЫБОР
	//                   |		КОГДА ЕСТЬNULL(ВТ_ПоАПП.Контрагент.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе, ЛОЖЬ)
	//                   |			ТОГДА ВТ_ПоАПП.Контрагент.Родитель.ОсновнойМагазин
	//                   |		ИНАЧЕ ВТ_ПоАПП.Контрагент
	//                   |	КОНЕЦ,
	//                   |	МАКСИМУМ(ВТ_ПоАПП.КоличествоЗаказов),
	//                   |	ВТ_ПоАПП.Контрагент,
	//                   |	ВТ_ПоАПП.СкладМагазина,
	//                   |	ВТ_ПоАПП.ТерминалПриема,
	//                   |	ВТ_ПоАПП.ТерминалДоставки
	//                   |ИЗ
	//                   |	ВТ_ПоАПП КАК ВТ_ПоАПП
	//                   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДок КАК ВТДок
	//                   |		ПО (ВЫБОР
	//                   |				КОГДА ВТ_ПоАПП.Контрагент.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе
	//                   |					ТОГДА ВТ_ПоАПП.Контрагент.Родитель.ОсновнойМагазин
	//                   |				ИНАЧЕ ВТ_ПоАПП.Контрагент
	//                   |			КОНЕЦ = ВТДок.Контрагент)
	//                   |			И ВТ_ПоАПП.СкладМагазина = ВТДок.СкладМагазина
	//                   |			И ВТ_ПоАПП.ТерминалПриема = ВТДок.ТерминалПриема
	//                   |			И ВТ_ПоАПП.ТерминалДоставки = ВТДок.ТерминалДоставки
	//                   |ГДЕ
	//                   |	НЕ ВТ_ПоАПП.Контрагент В (&КонтЧтоНеНадо)
	//                   |	И ВТ_ПоАПП.ТерминалДоставки = &ТерминалДоставки
	//                   |	И ВТДок.Док ЕСТЬ NULL
	//                   |
	//                   |СГРУППИРОВАТЬ ПО
	//                   |	ВЫБОР
	//                   |		КОГДА ЕСТЬNULL(ВТ_ПоАПП.Контрагент.Родитель.ОсновнойМагазин.ЗаполнятьФактическийПриходПоГруппе, ЛОЖЬ)
	//                   |			ТОГДА ВТ_ПоАПП.Контрагент.Родитель.ОсновнойМагазин
	//                   |		ИНАЧЕ ВТ_ПоАПП.Контрагент
	//                   |	КОНЕЦ,
	//                   |	ВТ_ПоАПП.Контрагент,
	//                   |	ВТ_ПоАПП.СкладМагазина,
	//                   |	ВТ_ПоАПП.ТерминалПриема,
	//                   |	ВТ_ПоАПП.ТерминалДоставки
	//                   |
	//                   |УПОРЯДОЧИТЬ ПО
	//                   |	Родитель,
	//                   |	СкладМагазина УБЫВ,
	//                   |	ТерминалПриема,
	//                   |	ТерминалДоставки
	//                   |ИТОГИ
	//                   |	СУММА(КоличествоЗаказов)
	//                   |ПО
	//                   |	Родитель,
	//                   |	СкладМагазина,
	//                   |	ТерминалПриема,
	//                   |	ТерминалДоставки
	//                   |АВТОУПОРЯДОЧИВАНИЕ");
				
                
				
	ТДата = ТекущаяДата();
	//ТДата = Дата("20170125");	   // тест
    
	НачД = НачалоДня(ТДата);	
    
	//Вр = Константы.ВремяОкончанияОперационногоДняСклада.Получить();
	//СобрД1 = Дата(Год(НачД), Месяц(НачД), День(НачД), Час(Вр), Минута(Вр), Секунда(Вр));
	Вр = Терминал.ВремяЗакрытияОперДня;
	СобрД1 = Дата(Год(НачД), Месяц(НачД), День(НачД), Час(Вр), Минута(Вр), Секунда(Вр));	
	
	Зап.УстановитьПараметр("ДатаНач", СобрД1);			
	Зап.УстановитьПараметр("ДатаКон", СобрД1 + 86400);			
	
	Зап.УстановитьПараметр("ДатаНач2", НачалоДня(ТДата));			
	Зап.УстановитьПараметр("ДатаКон2", КонецДня(ТДата));
	
	ТДата4 = ТДата - 86400;
	Зап.УстановитьПараметр("ДатаНач4", НачалоДня(ТДата4));			
	Зап.УстановитьПараметр("ДатаКон4", КонецДня(ТДата4));
	
    //+++++Серегин М.В. 18.09.2015 13:38:21 
    КонтрагентТопДеливери = Справочники.Контрагенты.НайтиПоКоду("Shop_222");
    СкладТопДеливери = Справочники.СкладыМагазинов.НайтиПоКоду("7");
    Зап.УстановитьПараметр("КонтрагентТопДеливери", КонтрагентТопДеливери);
    Зап.УстановитьПараметр("СкладТопДеливери", СкладТопДеливери);
	Зап.УстановитьПараметр("ТерминалДоставки", Терминал);
	Зап.УстановитьПараметр("КонтЧтоНеНадо", may.ПолучитьСписокКонтрагентов());
	
    //-----Серегин М.В. 18.09.2015 13:38:25 
    
    РезультатЗапроса = Зап.Выполнить();
    ВыборкаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    //Создаем документ закрытие опер дня
	НовДок = Документы.ЗакрытиеОперДня.СоздатьДокумент();
	НовДок.Дата = ТДата;
    
	Пока ВыборкаРодитель.Следующий() Цикл  // --- группировка Родитель
		
        ВыборкаСкладМагазина = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);        
		Пока ВыборкаСкладМагазина.Следующий() Цикл // --- группировка СкладМагазина
			
			ВыборкаТерминалПриема = ВыборкаСкладМагазина.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);        
			Пока ВыборкаТерминалПриема.Следующий() Цикл // --- группировка ТерминалПриема
				
				ВыборкаТерминалДоставки = ВыборкаТерминалПриема.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);        
        		Пока ВыборкаТерминалДоставки.Следующий() Цикл // --- группировка ТерминалДоставки
            
		            //Добавляем строки в ТЧФактическийПриход
		            Нов = НовДок.ФактическийПриход.Добавить();
		            
		            //Серегин М.В. 24.08.2015 15:27:02 костыль на обновление данных по подтягиванию реализаций 
					Если ВыборкаТерминалДоставки.Родитель = Справочники.Контрагенты.НайтиПоКоду("Shop_180") 
						ИЛИ ВыборкаТерминалДоставки.Родитель = Справочники.Контрагенты.НайтиПоКоду("Shop_434") Тогда // 11.05.2017 добавлен westwing
		                lem.ОбновитьДанныеПоприходу(ВыборкаТерминалДоставки.Родитель,ТДата);    
		            КонецЕсли;
		            //Серегин М.В. 24.08.2015 15:27:05 
		            
		            //Создаем документ ФактическогоПрихода
		            НовПр = Документы.ФактическийПриходЗаказовНаСклад.СоздатьДокумент();
		            НовПр.Дата = ТДата;
		            НовПр.Контрагент = ВыборкаТерминалДоставки.Родитель;
		            НовПр.ДатаНачалаВыборки = СобрД1- 86400;
		            НовПр.ДатаОкончанияВыборки = СобрД1 ;
		            НовПр.ПереключательПоДате = 1;
		            НовПр.СкладМагазина = ВыборкаТерминалДоставки.СкладМагазина;
					НовПр.ТерминалПриема = ВыборкаТерминалДоставки.ТерминалПриема;
					НовПр.ТерминалДоставки = ВыборкаТерминалДоставки.ТерминалДоставки;
		            
		            //Заполняем табличную часть документа ФактическийПриход Контрагенты
		            ВыборкаДетальныеЗаписи = ВыборкаТерминалДоставки.Выбрать();
		            Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    // --- детальные записи
		                ТЧКонтрагенты = НовПр.Контрагенты.Добавить();
		                ТЧКонтрагенты.Контрагент = ВыборкаДетальныеЗаписи.ВладелецТовара;
		            КонецЦикла;
		            
		            //После заполнения табличной части контрагентов, можно заполнить и записать фактический приход
		            НовПр.ЗаполнитьНаСервере();
					Если НовПр.Заказы.Количество()>0 Тогда //пустые документы не нужны
						
						Попытка
						    НовПр.Записать(РежимЗаписиДокумента.Запись);	
						Исключение	
						КонецПопытки;
						
		                Попытка
							//НовПр.Записать(РежимЗаписиДокумента.Запись);
		                    НовПр.Записать(РежимЗаписиДокумента.Проведение);
		                Исключение
							lem.ОтправитьНормальноеСообщениеАдминам("Ошибка при формировании фактического прихода", ОписаниеОшибки());
		                    #Если Клиент Тогда
		                        Сообщить("Ошибка: " + ОписаниеОшибки());
							#КонецЕсли		
							// МАС - 15.02.2018 - № --->> 
							pkv.ДобавитьВСписокОтложенногоПроведения(НовПр.Ссылка, ОписаниеОшибки());
							// <<--- МАС 
		                КонецПопытки;
		            КонецЕсли;
		            
		            Нов.Контрагент = ВыборкаТерминалДоставки.Родитель;
		            Нов.ДокументПрихода = НовПр.Ссылка;
		            Нов.КоличествоЗаказов = ВыборкаТерминалДоставки.КоличествоЗаказов;
		            Нов.СкладМагазина = ВыборкаТерминалДоставки.СкладМагазина;
					Нов.ТерминалПриема = ВыборкаТерминалДоставки.ТерминалПриема;
					Нов.ТерминалДоставки = ВыборкаТерминалДоставки.ТерминалДоставки;
				КонецЦикла;
			КонецЦикла;	
        КонецЦикла;
    КонецЦикла;
	
	Успешно = Ложь; // Костя 290915
	Попытка
		НовДок.Записать(РежимЗаписиДокумента.Запись);
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
	КонецПопытки;
	
	// Костя 290915	
	Если Успешно Тогда // Отправить инфо-письмо
		МасП = Новый Массив;
		//МасП.Добавить("tovaroved@strizh-logistic.ru");
		//МасП.Добавить("yulia.semenova@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасП.Добавить("ekaterina.krutenkova@strizh-logistic.ru");
		МасП.Добавить("aleksandra.frolova@strizh-logistic.ru");
	    МасП.Добавить("samovivoz@strizh-logistic.ru");
		МасП.Добавить("v.yakurnov@strizh-logistic.ru");
		lem.ОтправитьСообщение(МасП,  "Данные по фактическому приходу сформированы",   "Данные по фактическому приходу сформированы");
	КонецЕсли;
	// Костя 290915
	
	   
КонецПроцедуры

// Вычисляет растояние по геокоординатам двух точек
Функция ВычислитьГеоРасстояние(Широта1, Долгота1, Широта2, Долгота2) Экспорт
	
	Попытка		
		Широта1 = Число(Широта1);
		Долгота1 = Число(Долгота1);
		Широта2 = Число(Широта2);
		Долгота2 = Число(Долгота2);	
	Исключение
		#Если Клиент Тогда
			Сообщить("Некорректные входные данные, ошибка преобразования в тип Число.");
		#КонецЕсли	
	    Возврат Неопределено;
	КонецПопытки;
	
	
	Пи = 3.14;	
	Рез = 6371 * ACos(Sin(Широта1 * Пи/180) * Sin(Широта2 * Пи/180) + Cos(Широта1 * Пи/180) * Cos(Широта2 * Пи/180) * Cos(Долгота1 * Пи/180 - Долгота2 * Пи/180));	

	Возврат Рез;
	
	
КонецФункции // ()

// Записывает категорию для расчета ЗП в РС ДополнительныеПараметрыЗаказа
Процедура УстановитьКатегориюДляРасчетаЗП(Заказ) Экспорт
	
	КонечныйВес = Неопределено;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Накладная003Заказы.Вес КАК Вес003,
	                      |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	                      |	РеализацияТоваровУслуг.ОбщийВес КАК Вес,
	                      |	РеализацияТоваровУслуг.Дата КАК Дата,
	                      |	РеализацияТоваровУслуг.Номер КАК Номер,
	                      |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	                      |	ВложенныйЗапрос.ВесПотоварный КАК ВесПотоварный
	                      |ПОМЕСТИТЬ ВТ_Заказы
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Накладная003.Заказы КАК Накладная003Заказы
	                      |		ПО РеализацияТоваровУслуг.Ссылка = Накладная003Заказы.Заказ,
	                      |	(ВЫБРАТЬ
	                      |		СУММА(РеализацияТоваровУслугТовары.Вес * РеализацияТоваровУслугТовары.Количество) КАК ВесПотоварный
	                      |	ИЗ
	                      |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |	ГДЕ
	                      |		РеализацияТоваровУслугТовары.Ссылка.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(ФиксацияВесаСрезПоследних.Вес, 0) КАК Вес,
	                      |	ФиксацияВесаСрезПоследних.Весы КАК Весы,
	                      |	ФиксацияВесаСрезПоследних.Заказ КАК Заказ,
	                      |	ФиксацияВесаСрезПоследних.МестоЗаказа КАК МестоЗаказа,
	                      |	ФиксацияВесаСрезПоследних.Период КАК Период
	                      |ПОМЕСТИТЬ ПоследнийСрез
	                      |ИЗ
	                      |	РегистрСведений.ФиксацияВеса.СрезПоследних(, Заказ = &Ссылка) КАК ФиксацияВесаСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПоследнийСрез.Заказ КАК Заказ,
	                      |	ПоследнийСрез.МестоЗаказа КАК МестоЗаказа,
	                      |	МАКСИМУМ(ПоследнийСрез.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТ_КрайниеВесаПоМестам
	                      |ИЗ
	                      |	ПоследнийСрез КАК ПоследнийСрез
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПоследнийСрез.Заказ,
	                      |	ПоследнийСрез.МестоЗаказа
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ПоследнийСрез.Вес) КАК Вес,
	                      |	ПоследнийСрез.Заказ КАК Заказ,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоследнийСрез.МестоЗаказа) КАК МестоЗаказа
	                      |ПОМЕСТИТЬ ВТ_Срез
	                      |ИЗ
	                      |	ПоследнийСрез КАК ПоследнийСрез
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КрайниеВесаПоМестам КАК ВТ_КрайниеВесаПоМестам
	                      |		ПО ПоследнийСрез.Заказ = ВТ_КрайниеВесаПоМестам.Заказ
	                      |			И ПоследнийСрез.МестоЗаказа = ВТ_КрайниеВесаПоМестам.МестоЗаказа
	                      |			И ПоследнийСрез.Период = ВТ_КрайниеВесаПоМестам.Период
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПоследнийСрез.Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(ВТ_Срез.Вес) КАК Вес,
	                      |	ВТ_Срез.Заказ КАК Заказ
	                      |ПОМЕСТИТЬ ВТ_МаксимальныйСрез
	                      |ИЗ
	                      |	ВТ_Срез КАК ВТ_Срез
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_Срез.Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ЕСТЬNULL(ВТ_МаксимальныйСрез.Вес, 0)) КАК ВесСтриж,
	                      |	ЕСТЬNULL(ВТ_Заказы.Вес003, 0) КАК Вес003,
	                      |	ВТ_Заказы.Ссылка КАК Ссылка,
	                      |	ВТ_Заказы.Вес КАК Вес,
	                      |	ВТ_Заказы.Дата КАК Дата,
	                      |	ВТ_Заказы.Номер КАК Номер,
	                      |	ВТ_Заказы.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
	                      |	ЕСТЬNULL(ВТ_Заказы.ВесПотоварный, 0) КАК ВесПотоварный
	                      |ИЗ
	                      |	ВТ_Заказы КАК ВТ_Заказы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксимальныйСрез КАК ВТ_МаксимальныйСрез
	                      |		ПО ВТ_Заказы.Ссылка = ВТ_МаксимальныйСрез.Заказ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_Заказы.Ссылка,
	                      |	ВТ_Заказы.Дата,
	                      |	ВТ_Заказы.Номер,
	                      |	ВТ_Заказы.НомерВнешнегоЗаказа,
	                      |	ЕСТЬNULL(ВТ_Заказы.Вес003, 0),
	                      |	ВТ_Заказы.Вес,
	                      |	ЕСТЬNULL(ВТ_Заказы.ВесПотоварный, 0)");
	Запрос.УстановитьПараметр("Ссылка", Заказ.Ссылка);	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
	//+Степанов	 Исключаем потоварный вес.
		//	КонечныйВес = Макс(Рез.Вес, Рез.Вес003, Рез.ВесСтриж, Рез.ВесПотоварный); 	
		КонечныйВес = Макс(Рез.Вес, Рез.Вес003, Рез.ВесСтриж);
	//-Степанов	
	КонецЕсли;					  
		
	ЗапросПравила = Новый Запрос("ВЫБРАТЬ
	                             |	ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗППравила.ВесОт,
	                             |	ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗППравила.ВесДо,
	                             |	ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗППравила.КатегорияЗаказаДляРасчетаЗП,
	                             |	ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗППравила.Ссылка
	                             |ИЗ
	                             |	РегистрСведений.ПрименениеПравилДляРасчетаКатегорийЗаказовДляЗП.СрезПоследних(&Дата, ) КАК ПрименениеПравилДляРасчетаКатегорийЗаказовДляЗПСрезПоследних
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗП.Правила КАК ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗППравила
	                             |		ПО ПрименениеПравилДляРасчетаКатегорийЗаказовДляЗПСрезПоследних.Правила = ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗППравила.Ссылка.Ссылка
	                             |ГДЕ
	                             |	ПрименениеПравилДляРасчетаКатегорийЗаказовДляЗПСрезПоследних.ИнтернетМагазин = &ИнтернетМагазин
	                             |	И ПрименениеПравилДляРасчетаКатегорийЗаказовДляЗПСрезПоследних.Правила <> ЗНАЧЕНИЕ(Справочник.ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗП.ПустаяСсылка)");
								 
	Хозяин = Неопределено;		
	РодительХозяина = Неопределено;	
	Если ЗначениеЗаполнено(Заказ.ВладелецТовара) Тогда 
		Если Не Заказ.ВладелецТовара.Родитель.ОсновнойМагазин.Пустая() Тогда
			РодительХозяина = Заказ.ВладелецТовара.Родитель.ОсновнойМагазин;
			Хозяин = Заказ.ВладелецТовара;
		Иначе
			Хозяин = Заказ.ВладелецТовара;
		КонецеСли;
	КонецЕсли;
	
	ПравилаХозяина = РегистрыСведений.ПрименениеПравилДляРасчетаКатегорийЗаказовДляЗП.СрезПоследних(Заказ.Дата, Новый Структура("ИнтернетМагазин", Хозяин));
	
	Если НЕ ПравилаХозяина.Количество() И ЗначениеЗаполнено(РодительХозяина) Тогда
		ИнтернетМагазин = РодительХозяина;
		ЗапросПравила.УстановитьПараметр("ИнтернетМагазин", РодительХозяина);	
	Иначе
		ИнтернетМагазин = Хозяин;
	    ЗапросПравила.УстановитьПараметр("ИнтернетМагазин", Хозяин);
	КонецЕсли;
							 
								 
	//ЗапросПравила.УстановитьПараметр("ИнтернетМагазин", Заказ.ВладелецТовара);	
	ЗапросПравила.УстановитьПараметр("Дата", Заказ.Дата);
	РезПравила = ЗапросПравила.Выполнить().Выбрать();	
	
	Категория = Неопределено;
	Правило = Неопределено;
	Пока РезПравила.Следующий() И КонечныйВес <> Неопределено Цикл
		Если РезПравила.ВесОт <= КонечныйВес И КонечныйВес < РезПравила.ВесДо Тогда		
			Категория = РезПравила.КатегорияЗаказаДляРасчетаЗП;		
			Правило   = РезПравила.Ссылка;
		КонецЕсли;		
	КонецЦикла;
	
	
	// МАС - 01.03.2018 - принято решение устанавливать для всех партнеров дефолтное правило, если оно не назначено --->> 
	Если Категория = Неопределено Тогда		
		Правило = Справочники.ПравилаСопоставленияКатегорийЗаказовДляРасчетаЗП.НайтиПоКоду("000000004");	// по дефолту правило 15-30-130 ( с 01.03.2018 )
		Для каждого СтрПравило Из Правило.Правила Цикл	
			Если КонечныйВес <> Неопределено Тогда
				Если СтрПравило.ВесОт <= КонечныйВес И КонечныйВес < СтрПравило.ВесДо Тогда		
					Категория = СтрПравило.КатегорияЗаказаДляРасчетаЗП;		
				КонецЕсли;			
			КонецЕсли;							
		КонецЦикла;		
	КонецЕсли;	
	// <<--- МАС
	
	
	
	// МАС - 01.03.2018 - миго ебаное --->> 
	КатегорияМИГО = Неопределено;
	ЗапросИсключения = Новый Запрос("ВЫБРАТЬ
	                                |	мгПереопределениеКатегорийДляРасчетаЗПСрезПоследних.Период КАК Период,
	                                |	мгПереопределениеКатегорийДляРасчетаЗПСрезПоследних.Контрагент КАК Контрагент,
	                                |	мгПереопределениеКатегорийДляРасчетаЗПСрезПоследних.КатегорияРасчетаЗП КАК КатегорияРасчетаЗП,
	                                |	мгПереопределениеКатегорийДляРасчетаЗПСрезПоследних.Использование КАК Использование
	                                |ИЗ
	                                |	РегистрСведений.мгПереопределениеКатегорийДляРасчетаЗП.СрезПоследних(, Контрагент = &Контрагент) КАК мгПереопределениеКатегорийДляРасчетаЗПСрезПоследних");
	ЗапросИсключения.УстановитьПараметр("Контрагент" ,ИнтернетМагазин);
	РезИсключ = ЗапросИсключения.Выполнить().Выбрать();	
	
	Если РезИсключ.Следующий() И РезИсключ.Использование Тогда
		КатегорияМИГО = РезИсключ.КатегорияРасчетаЗП;		
	КонецЕсли;	
	
	
	Если КатегорияМИГО = Неопределено Тогда		
		ЗапросГраницыМиго = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                                 |	мгЗначенияКатегорийЗаказовСрезПоследних.Категория КАК Категория,
		                                 |	мгЗначенияКатегорийЗаказовСрезПоследних.ВесЗаказаОт КАК ВесЗаказаОт,
		                                 |	мгЗначенияКатегорийЗаказовСрезПоследних.ВключительноОт КАК ВключительноОт,
		                                 |	мгЗначенияКатегорийЗаказовСрезПоследних.ВесЗаказаДо КАК ВесЗаказаДо,
		                                 |	мгЗначенияКатегорийЗаказовСрезПоследних.ВключительноДо КАК ВключительноДо
		                                 |ИЗ
		                                 |	РегистрСведений.мгЗначенияКатегорийЗаказов.СрезПоследних КАК мгЗначенияКатегорийЗаказовСрезПоследних");
		РезГраницыМигоТЗ = ЗапросГраницыМиго.Выполнить().Выгрузить();		
		Для каждого СтрПравило Из РезГраницыМигоТЗ Цикл	
			Если КонечныйВес <> Неопределено Тогда
				Если СтрПравило.ВесЗаказаОт <= КонечныйВес И КонечныйВес <= СтрПравило.ВесЗаказаДо Тогда		
					КатегорияМИГО = СтрПравило.Категория;		
				КонецЕсли;		
			КонецЕсли;						
		КонецЦикла;				
	КонецЕсли;	
	// <<--- МАС 
		
	
	НаборДопСведений = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
	НаборДопСведений.Отбор.Заказ.Установить(Заказ.Ссылка);
	НаборДопСведений.Прочитать();
	
	Для каждого Стр Из НаборДопСведений Цикл
		Если ЗначениеЗаполнено(Категория) Тогда		
			Стр.КатегорияДляРасчетаЗП = Категория;	
			Стр.ПравилоСопоставленияКатегории = Правило; 			
		Иначе
			НайКат = Справочники.КатегорииДоставки2014.НайтиПоРеквизиту("Категория", Число(Заказ.КатегорияДоставки));
			Если ЗначениеЗаполнено(НайКат) Тогда	
				Стр.КатегорияДляРасчетаЗП = НайКат;		
			КонецЕсли;
		КонецЕсли;	
		// МАС - 01.03.2018 - № --->> 
		Если КатегорияМИГО <> Неопределено Тогда
			Стр.КатегорияДляРасчетаЗП_Миго = КатегорияМИГО;
		КонецЕсли;	
		// <<--- МАС
	КонецЦикла;
	
	НаборДопСведений.Записать();
	
	
КонецПроцедуры


// движение по РС СтатусыЗакрытияЗаказов
Процедура СтатусыЗакрытияЗаказов(ТабЗаказы, Режим) Экспорт
	
	Если Режим = РежимЗаписиДокумента.Проведение Тогда
		
		ТекДата = ТекущаяДата();
		Набор = РегистрыСведений.СтатусыЗакрытияЗаказов.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(ТекДата);
		
		Для каждого Стр Из ТабЗаказы Цикл		
			НЗапись = Набор.Добавить();
			НЗапись.ДокументРегистратор = Стр.Регистратор;
			НЗапись.Заказ = Стр.Заказ;
			НЗапись.Период = ТекДата;
			Если ТипЗнч(Стр.Регистратор) = Тип("ДокументСсылка.ПриходДСПоОтчетуВодителя") Тогда
				НЗапись.СтатусЗакрытия = Перечисления.СтатусыПредварительногоЗакрытияЗаказов.ЗаказЗакрытПредварительно;
			ИначеЕсли ТипЗнч(Стр.Регистратор) = Тип("ДокументСсылка.ЗакрытиеЗаказов") Тогда	
			    НЗапись.СтатусЗакрытия = Перечисления.СтатусыПредварительногоЗакрытияЗаказов.ЗаказЗакрытОкончательно;
			КонецЕсли;					
		КонецЦикла;	
		Набор.Записать();
		
	ИначеЕсли Режим = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ТекДата = ТекущаяДата();
		Набор = РегистрыСведений.СтатусыЗакрытияЗаказов.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(ТекДата);
		
		Для каждого Стр Из ТабЗаказы Цикл		
			НЗапись = Набор.Добавить();
			НЗапись.ДокументРегистратор = Стр.Регистратор;
			НЗапись.Заказ = Стр.Заказ;
			НЗапись.Период = ТекДата;
			Если ТипЗнч(Стр.Регистратор) = Тип("ДокументСсылка.ПриходДСПоОтчетуВодителя") Тогда
				НЗапись.СтатусЗакрытия = Перечисления.СтатусыПредварительногоЗакрытияЗаказов.ЗаказОткрыт;
			ИначеЕсли ТипЗнч(Стр.Регистратор) = Тип("ДокументСсылка.ЗакрытиеЗаказов") Тогда	
			    НЗапись.СтатусЗакрытия = Перечисления.СтатусыПредварительногоЗакрытияЗаказов.ЗаказЗакрытПредварительно;
			КонецЕсли;
		КонецЦикла;	
		Набор.Записать();		
	
	КонецЕсли;	

КонецПроцедуры

  
Процедура ДобавитьВСписокОтложенногоПроведения(ДокСсылка, ТекстОшибки = Неопределено, Проведен = Ложь, НеМожетБытьПроведен = Ложь) Экспорт
	
	
	// !!!!!!!! процедура переехала в модуль pkv, ибо он не имеет клиентского контекста !!!!!!
	pkv.ДобавитьВСписокОтложенногоПроведения(ДокСсылка, ТекстОшибки, Проведен, НеМожетБытьПроведен); 
	
	
	
	//ТекВр = ТекущаяДата();
	//
	//Набор = РегистрыСведений.ДокументыКОтложенномуПроведению.СоздатьНаборЗаписей();
	//Набор.Отбор.Документ.Установить(ДокСсылка);
	//Набор.Отбор.Период.Установить(ТекВр);
	//Набор.Прочитать();
	//
	//НЗапись = Набор.Добавить();
	//НЗапись.Период = ТекВр;
	//НЗапись.Документ = ДокСсылка.Ссылка;
	//НЗапись.Проведен = Проведен;
	//НЗапись.НеМожетБытьПроведен = НеМожетБытьПроведен;
	//Если ТекстОшибки <> Неопределено Тогда	
	//	НЗапись.Ошибка = ТекстОшибки;		
	//КонецЕсли;
	//
	//Набор.Записать();
	

КонецПроцедуры


Процедура ОтложенноеПроведениеРегламент() Экспорт
	
	
	// !!!!!!!! процедура переехала в модуль pkv, ибо он не имеет клиентского контекста !!!!!!
	pkv.ОтложенноеПроведениеРегламент();
	
	
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ДокументыКОтложенномуПроведениюСрезПоследних.Период,
	//                      |	ДокументыКОтложенномуПроведениюСрезПоследних.Документ,
	//                      |	ДокументыКОтложенномуПроведениюСрезПоследних.Проведен,
	//                      |	ДокументыКОтложенномуПроведениюСрезПоследних.НеМожетБытьПроведен
	//                      |ИЗ
	//                      |	РегистрСведений.ДокументыКОтложенномуПроведению.СрезПоследних(, ) КАК ДокументыКОтложенномуПроведениюСрезПоследних");
	//Рез = Запрос.Выполнить().Выбрать();
	//
	//Пока Рез.Следующий() Цикл
	//	Если НЕ Рез.Проведен И НЕ Рез.НеМожетБытьПроведен Тогда
	//		Попытка
	//			ДокОбъект = Рез.Документ.ПолучитьОбъект();	
	//			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//			pkv.ДобавитьВСписокОтложенногоПроведения(ДокОбъект.Ссылка, , Истина);
	//		Исключение
	//			ТекстОшибки = ОписаниеОшибки();
	//			
	//			Зап = Новый Запрос("ВЫБРАТЬ
	//			                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыКОтложенномуПроведению.Период) КАК Количество
	//			                      |ИЗ
	//			                      |	РегистрСведений.ДокументыКОтложенномуПроведению КАК ДокументыКОтложенномуПроведению
	//			                      |ГДЕ
	//			                      |	ДокументыКОтложенномуПроведению.Документ = &Документ
	//			                      |	И ДокументыКОтложенномуПроведению.Проведен = ЛОЖЬ
	//			                      |	И ДокументыКОтложенномуПроведению.НеМожетБытьПроведен = ЛОЖЬ");
	//			Зап.УстановитьПараметр("Документ", Рез.Документ);	
	//			Результат = Зап.Выполнить().Выбрать();			
	//			
	//			Если Результат.Следующий() И Результат.Количество >= 4 Тогда										
	//				pkv.ДобавитьВСписокОтложенногоПроведения(Рез.Документ, ТекстОшибки, , Истина);	
	//			Иначе
	//				pkv.ДобавитьВСписокОтложенногоПроведения(Рез.Документ, ТекстОшибки);	
	//			КонецЕсли;					
	//
	//		КонецПопытки;
	//    КонецЕсли;
	//КонецЦикла;	

КонецПроцедуры


Процедура СоздатьПредварительноеЗакрытиеЗаказа(Заказ, Статус) Экспорт
	
	ТекДата = ТекущаяДата();
	
	ДокПЗЗ = Документы.ПредварительноеЗакрытиеЗаказа.СоздатьДокумент();
	ДокПЗЗ.Дата = ТекДата;
	ДокПЗЗ.Заказ = Заказ.Ссылка;
	//ДокПЗЗ.ПричинаНеВыполнения
	//ДокПЗЗ.ПричинаОтказа
	ДокПЗЗ.ФинальныйСтатус = Статус;

	ДокПЗЗ.Записать(РежимЗаписиДокумента.Запись);
	Попытка	
		ДокПЗЗ.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

// Запись в РС РеализацияТоваровУслугИсторияРеквизитов --->> 		
Процедура ЗаписьВРСРеализацияТоваровУслугИсторияРеквизитов(Заказ, Событие) Экспорт
	
	ТекДата = ТекущаяДата();
	Набор = РегистрыСведений.РеализацияТоваровУслугИсторияРеквизитов.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(ТекДата);	
	Набор.Прочитать();
	
	НЗапись = Набор.Добавить();
	ЗаполнитьЗначенияСвойств(НЗапись, Заказ);
	
	НЗапись.Период = ТекДата;
	НЗапись.Заказ = Заказ;
	НЗапись.Событие = Событие;
	
	Попытка
		Набор.Записать();	
	Исключение
		#Если Клиент Тогда
			ТекстОшибки = ОписаниеОшибки();
			Сообщить("Ошибка записи в РС РеализацияТоваровУслугИсторияРеквизитов: " + ТекстОшибки + "(событие: " + Событие + ")");
		#КонецЕсли	
	КонецПопытки;
	

КонецПроцедуры


Процедура ЗаписьВРСНезагруженныеОбъекты(ТипЗагрузки, КодОбъекта, Загружено, Описание = "") Экспорт

	ТекДата = ТекущаяДата();
	Набор = РегистрыСведений.НезагруженныеОбъекты.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(ТекДата);	
	Набор.Прочитать();
	
	НЗапись = Набор.Добавить();
	НЗапись.Период = ТекДата;
	НЗапись.ТипЗагрузки = ТипЗагрузки;
	НЗапись.КодОбъекта = КодОбъекта;
	НЗапись.Загружено = Загружено;
	НЗапись.ОписаниеОшибки = Описание;
	
	Попытка
		Набор.Записать();	
	Исключение
		#Если Клиент Тогда
			ТекстОшибки = ОписаниеОшибки();
			Сообщить("Ошибка записи в РС НезагруженныеОбъекты: " + ТекстОшибки + "(ТипЗагрузки: " + ТипЗагрузки + ")");
		#КонецЕсли	
	КонецПопытки;
	

КонецПроцедуры


// Регламент загрузки Лого
Процедура РегламентЗагрузкаЛоготипов() Экспорт
	
	// подключение..
	Попытка
		Подкл = lem.СоздатьПодключениеКБазеДокументов();
	Исключение
		#Если Клиент Тогда
			Сообщить("Ошибка при подключении к базе документов! (" + ОписаниеОшибки() + ")", СтатусСообщения.ОченьВажное);
		#КонецЕсли	
		Возврат;
	КонецПопытки;
	
	ТекДата = ТекущаяДата();
	КрайняяДата = Константы.ГраницаЗагрузкиЛоготиповКонтрагентов.Получить();
	Если НЕ ЗначениеЗаполнено(КрайняяДата) Тогда	
		КрайняяДата	= Дата("20000101");	
	КонецЕсли;
		
	СтрЗапроса = "SELECT  [id]
     | ,[logo]
     | ,[applyDate]
     | ,[logoType]
     | ,[internetShopID]
     |FROM [tb_logo]
	 | WHERE [applyDate] > '" + Евген.ДатаВSQL(КрайняяДата, Ложь) + "'";
	 
	Попытка
		Рез = Евген.ЗапросКИнтернетМагазину(СтрЗапроса, Подкл);	
		//Асеев 15.04.2022 (Задача № 4783)>>>
		//Сп = СоздатьТаблицу(Рез, "logo,applyDate,logoType,internetShopID");
		Сп = СоздатьТаблицу(Рез, "logo,applyDate,logoType,internetShopID_Ч");
		//Асеев 15.04.2022 (Задача № 4783)<<<
	
		Для каждого Стр Из Сп Цикл
			
			//Асеев 15.04.2022 (Задача № 4783)>>>
			//НайКонтрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_" + Стр.internetShopID);
			НайКонтрагент = Справочники.Контрагенты.НайтиПоКоду("Shop_" + Формат(Стр.internetShopID_Ч, "ЧГ="));
			//Асеев 15.04.2022 (Задача № 4783)<<<
			
			Если ЗначениеЗаполнено(НайКонтрагент) Тогда
				
				ДвоичныеДанные = Base64Значение(Стр.logo);	
				//Асеев 15.04.2022 (Задача № 4783)>>>
				//ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_Лого_" + Стр.internetShopID + ".jpg";
				ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_Лого_" + Формат(Стр.internetShopID_Ч, "ЧГ=") + ".jpg";
				//Асеев 15.04.2022 (Задача № 4783)<<<
				ДвоичныеДанные.Записать(ПутьКФайлу);		
				//ЗапуститьПриложение(ПутьКФайлу);
				
				КартинкаЛого = Новый Картинка(ПутьКФайлу, Ложь);
				
				Набор = РегистрыСведений.ЛоготипыКонтрагентов.СоздатьНаборЗаписей();
				Набор.отбор.Контрагент.Установить(НайКонтрагент);
				Набор.Прочитать();
				Если Набор.Количество() Тогда
					
					Набор[0].Период = Стр.applyDate;
					Набор[0].Контрагент = НайКонтрагент;
					Если Строка(Стр.logoType) = "1" Тогда
						Набор[0].ЛоготипЛевый = Новый ХранилищеЗначения(КартинкаЛого,Новый СжатиеДанных(9));
					ИначеЕсли Строка(Стр.logoType) = "2" Тогда	
					    Набор[0].ЛоготипПравый = Новый ХранилищеЗначения(КартинкаЛого,Новый СжатиеДанных(9));
					КонецЕсли;	
					Набор[0].ЗагруженИзАдминки = Истина;
					Набор.Записать();
				Иначе
					НЗапись = Набор.Добавить();
					НЗапись.Период = Стр.applyDate;
					НЗапись.Контрагент = НайКонтрагент;
					Если Строка(Стр.logoType) = "1" Тогда
						НЗапись.ЛоготипЛевый = Новый ХранилищеЗначения(КартинкаЛого, Новый СжатиеДанных(9));
					ИначеЕсли Строка(Стр.logoType) = "2" Тогда	
					    НЗапись.ЛоготипПравый = Новый ХранилищеЗначения(КартинкаЛого, Новый СжатиеДанных(9));
					КонецЕсли;	
					НЗапись.ЗагруженИзАдминки = Истина;
					Набор.Записать();
				КонецЕсли;
								
			КонецЕсли;			
		КонецЦикла;
		
		Константы.ГраницаЗагрузкиЛоготиповКонтрагентов.Установить(ТекДата);
	Исключение
		
	КонецПопытки; 
		
	
	
КонецПроцедуры


Функция СоздатьТаблицу(RS, СписокКолонок) Экспорт
	Таб = Новый ТаблицаЗначений;
	Разделитель = Найти(СписокКолонок, ",");
	Пока Разделитель > 0 Цикл
		Таб.Колонки.Добавить(СокрЛП(Лев(СписокКолонок, Разделитель - 1)));
		СписокКолонок = Сред(СписокКолонок, Разделитель + 1);
		Разделитель = Найти(СписокКолонок, ",");
	КонецЦикла;
	Таб.Колонки.Добавить(СокрЛП(СписокКолонок));
	
	СписокКолонок = Таб.Колонки;
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = Таб.Добавить();
		Для Кол = 1 По СписокКолонок.Количество() Цикл
			ИмяКолонки = СписокКолонок.Получить(Кол - 1).Имя;
			Суффикс = Прав(ИмяКолонки, 2);
			Если Суффикс = "_Ч" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			ИначеЕсли Суффикс = "_Д" Тогда
				НоваяСтрока.Установить(Кол - 1, RS.Fields(Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2)).Value);
			Иначе
				НоваяСтрока.Установить(Кол - 1,  СокрЛП(RS.Fields(ИмяКолонки).Value));
			КонецЕсли;
		КонецЦикла;
		Rs.MoveNext()
	КонецЦикла;
	
	Возврат Таб;
КонецФункции



Процедура OZONE_РегламентВыдачаКурьеру() Экспорт
	
	oz_РаботаССервисом.ОбработатьВыдачуКурьеру_OZON();
	
КонецПроцедуры	

//Подсветка зон в тексте отчета другим цветом //--Задача № 2799
Процедура ОбработатьЗоныЦветом(СтрЗоны, ЗоныДляРаскраски) Экспорт
	
	СоставСтрокиЗоны = СтрРазделить(СтрЗоны, ";");
	МассивОбработанных = Новый Массив;
	
	Для Каждого Подстрока Из СоставСтрокиЗоны Цикл
		
		СоставПодстроки = СтрРазделить(Подстрока,"-");
		
		Попытка
			
			НомерЗоны = Число(СоставПодстроки[0]);
			
			Если НЕ ЗоныДляРаскраски.Найти(НомерЗоны)=Неопределено Тогда
				Подстрока = "<b><span style=""color: #ff6600;"">" + Строка(НомерЗоны) + "</span></b>" + "-" + СоставПодстроки[1];			
			КонецЕсли;	
						
		Исключение
		Конецпопытки;
	
		МассивОбработанных.Добавить(Подстрока);
		
	КонецЦикла;	
	СтрЗоны = СтрСоединить(МассивОбработанных,";");
	
КонецПроцедуры
//--Задача № 2799

// Выгрузка в админку по терминалам и с заборами
Процедура ОбработатьВыгрузкуМашинВАдминкуПоТерминаламСЗаборами(КодНастройки) Экспорт
	
	//++Задача № 3581
	// Переключение на новое тело регламента
	МаршрутизацияЗаказовСервер.ОбработатьВыгрузкуМашинВАдминкуПоТерминаламСЗаборамиНовая(КодНастройки);
	Возврат;
	//--Задача № 3581
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Терминал = Справочники.РегиональныеТерминалы.НайтиПоКоду(КодНастройки);
		
	ДатаОтчета = ТекущаяДата();  
	//ДатаОтчета = Дата("20180924"); // Заменить для теста 2596

	Обр = Обработки.ВыгрузкаМашин.Создать();
	Обр.ДатаДоставки = ДатаОтчета;  //  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Тест
	//Обр.ДатаДоставки = ТекущаяДата();   //
	ТабЗаказовМашин = "";
	Рез = Обр.ВыгрузитьМашины(ТабЗаказовМашин, Терминал);
	МасП = Новый Массив;
	
	
	// Михушкин - Заборы --->> 
	РезЗаборы = ВыгрузитьВАдминкуНаСервереЗаборы(Терминал, ДатаОтчета);
	//РезЗаборы.Колонки.Добавить("Кол");
	//РезЗаборы.Колонки.Добавить("Выгружен");
	//Для каждого СтрЗ Из РезЗаборы Цикл
	//	СтрЗ.Кол = 1;
	//	СтрЗ.Выгружен = Ложь;
	//КонецЦикла;
	//РезЗаборы.Свернуть("НомерТранспорта,Маршрут,Выгружен", "Кол");
	//	
	//КопияРезЗаборы = РезЗаборы.Скопировать();
	//КопияРезЗаборы.Свернуть("", "Кол");
	//
	//Если КопияРезЗаборы.Количество() Тогда
	//	КолЗаборыВсего = КопияРезЗаборы[0].Кол;
	//КонецЕсли;	
	// <<--- Михушкин 
	
	МасП.Добавить("rea@strizh-logistic.ru");
	МасП.Добавить("maksim.ivanov@strizh-logistic.ru");		
	МасП.Добавить("logist@strizh-logistic.ru");
	МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	МасП.Добавить("alexey.kuzmichev@strizh-logistic.ru");
	//МасП.Добавить("anatoly.kopytin@strizh-logistic.ru");
	МасП.Добавить("syn@strizh-logistic.ru");
	МасП.Добавить("denis.zherebtsov@strizh-logistic.ru"); // ТЕСТ 
	//МасП.Добавить("v.yakurnov@strizh-logistic.ru");
	//МасП.Добавить("igor.tischenko@strizh-logistic.ru");
	МасП.Добавить("stanislav.tumakov@strizh-logistic.ru");
	МасП.Добавить("denis.matskevich@strizh-logistic.ru");
	МасП.Добавить("i.belov@strizh-logistic.ru");
	МасП.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
	МасП.Добавить("a.pryalkin@strizh-logistic.ru");
	МасП.Добавить("n.stepanov@strizh-logistic.ru");
	МасП.Добавить("i.markelova@strizh-logistic.ru");	
	МасП.Добавить("a.matveenko@strizh-logistic.ru");
	МасП.Добавить("y.semichastnov@strizh-logistic.ru");
	МасП.Добавить("o.silivanova@strizh-logistic.ru");
	
	//lem 
	Если Терминал = Справочники.РегиональныеТерминалы.СПбСтриж Тогда
		//МасП.Добавить("igor.galadziy@strizh-logistic.ru");
		МасП.Добавить("vladimir.goryainov@strizh-logistic.ru");	
	КонецеСли;	
	//lem
	
	Если Рез = "" Тогда
		КолЗаказов = ТабЗаказовМашин.Количество();
		//ТабМ = ТабЗаказовМашин.Скопировать();
		//ТабМ.Свернуть("Машина,Маршрут", "Кол");
		
		//+++ БАО 16.08.2017 №1144
		
		РезЗаборыДляРЕД = РезЗаборы.Скопировать();
		ТабЗаказовМашинДляРЕД = ТабЗаказовМашин.Скопировать(); 
		//--- БАО 16.08.2017 №1144
		
		ТабМ = may.ОбъединитьТаблициЗаказовИЗаборов(ТабЗаказовМашин,РезЗаборы);
		
		СписокВодителейЭкспедиторов = Неопределено;//Задача № 2799
		ТаблицаПолигонов = СвернутьПолигонМаршрутизацииПорядокПоМаршруту(ТабЗаказовМашинДляРЕД, СписокВодителейЭкспедиторов);
		
		ПолигоныСоСложнойПарковкой = РегистрыСведений.ДополнительныеПараметрыПолигоновМаршрутизации.СписокПолигоновСоСложнойПарковкой();//Задача № 2799 
		
		//+++ БАО 22.06.2017 №1144
		Если ТипЗнч(ТабЗаказовМашинДляРЕД) = Тип("ТаблицаЗначений") И ТабЗаказовМашинДляРЕД.Колонки.Найти("Ссылка") <> Неопределено Тогда 
			МассивЗаказов = ТабЗаказовМашинДляРЕД.ВыгрузитьКолонку("Ссылка");
		Иначе
			МассивЗаказов = Новый Массив;
		КонецЕсли;	
		
		Если ТипЗнч(РезЗаборыДляРЕД) = Тип("ТаблицаЗначений") И РезЗаборыДляРЕД.Колонки.Найти("Забор") <> Неопределено Тогда 
			МассивЗаборов = РезЗаборыДляРЕД.ВыгрузитьКолонку("Забор");
		Иначе
			МассивЗаборов = Новый Массив;
		КонецЕсли;	
		
		// Закомментировать для теста 2596
		рэИнтеграцияРэдЭкспресс.REDПередачаДанныхОСтатусах_ОтсортированНаМаршрут_РегистрацияДляОтправки(МассивЗаказов, МассивЗаборов);
		//--- БАО 22.06.2017 №1144
		                   
		//МакетHTML = Обр.ПолучитьМакет("МакетHTML");
		МакетHTML = Обр.ПолучитьМакет("МакетHTML_4");
		ТекстHTMLМакет = МакетHTML.ПолучитьТекст();
		//ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоМашин]"  , ТабМ.Количество());
		//ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоЗаказов]", КолЗаказов);
		//ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоЗаборов]", КолЗаборыВсего);
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"</tbody></table></body></html>","");
		                                   		
		Т = "";
		СчМаш = 0;
		КолЗаборыВсего = 0;
		ЕстьСтрокаБезМашины = Ложь;
		
		МакетHTMLСтр = Обр.ПолучитьМакет("Макет1");
		ТекстСтроки = МакетHTMLСтр.ПолучитьТекст();	
		Для Каждого Тек Из ТабМ Цикл
			
			//Если ЗначениеЗаполнено(Тек.Машина) Тогда				
			//	НайКолЗаборы = РезЗаборы.НайтиСтроки(Новый Структура("НомерТранспорта", Тек.Машина.НомерГосударственнойРегистрации));
			//Иначе
			//	НайКолЗаборы = РезЗаборы.НайтиСтроки(Новый Структура("НомерТранспорта", null));		
			//КонецЕсли;
			//
			//Если ЗначениеЗаполнено(Тек.Машина) И НайКолЗаборы.Количество() Тогда
			//	КолЗаборы = НайКолЗаборы[0].Кол;
			//	НайКолЗаборы[0].Выгружен = Истина;
			//Иначе
			//	КолЗаборы = "-";
			//КонецЕсли;		
			
			
			Если ЗначениеЗаполнено(Тек.НомерМашины) Тогда
				ГосНомер = Тек.НомерМашины;
			Иначе
				ГосНомер = "Машины нет";
				ЕстьСтрокаБезМашины = Истина;
			КонецеСли;
			
			СтрЗоныМаршрута = ТаблицаПолигонов.НайтиСтроки(Новый Структура("Маршрут, Транспорт",Тек.Маршрут,Тек.НомерМашины));
			СтрЗоны = ?(СтрЗоныМаршрута.Количество()>0, СтрЗоныМаршрута[0].ЗоныМаршрутов,"");
			
			// //Задача № 2799
			СтрВодитель = "";
			СтрЭкспедитор = "";
			Попытка
				// СписокВодителейЭкспедиторов Маршрут,Транспорт,Водитель,Экспедитор		
				СтрокаМаршрутТранспорт = СписокВодителейЭкспедиторов.НайтиСтроки(Новый Структура("Маршрут,Транспорт",Тек.Маршрут,Тек.НомерМашины));
				Если СтрокаМаршрутТранспорт.Количество()>0 Тогда
					СтрВодитель = СокрЛП(СтрокаМаршрутТранспорт[0].Водитель);     
					СтрЭкспедитор = СокрЛП(СтрокаМаршрутТранспорт[0].Экспедитор);
				КонецЕсли;
			Исключение
			КонецПопытки;
			// //Задача № 2799
			
			
			//Т = Т + ГосНомер + ": " + Формат(Тек.Кол, "ЧГ=") + " шт;" + Символы.ПС;
			СчМаш = СчМаш + 1;
			
			ТекстHTMLСтр = ТекстСтроки;
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Номер", СчМаш);
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Маршрут", Тек.Маршрут);
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Машина", ГосНомер);
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Водитель", ВозвратНеПустойСтроки(СтрВодитель));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Экспедитор", ВозвратНеПустойСтроки(СтрЭкспедитор));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"ВсегоЗаказов", ВозвратНеПустойСтроки(Тек.Кол));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"МГТ", ВозвратНеПустойСтроки(Тек.МГТ));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"СГТ", ВозвратНеПустойСтроки(Тек.СГТ));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"КГТ", ВозвратНеПустойСтроки(Тек.КГТ));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"ВсегоЗаборов", ВозвратНеПустойСтроки(Тек.КолЗаборов));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"До1м3", ВозвратНеПустойСтроки(Тек.Мение));
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Более1м3", ВозвратНеПустойСтроки(Тек.Более));
			
			ОбработатьЗоныЦветом(СтрЗоны, ПолигоныСоСложнойПарковкой);//Задача № 2799
			
			ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"СписокЗон", ВозвратНеПустойСтроки(СтрЗоны));
			
			ТекстHTMLМакет = ТекстHTMLМакет + ТекстHTMLСтр; 
			//ТекстHTMLМакет = ТекстHTMLМакет + 
			//"<TR style='BACKGROUND-COLOR: #F5F5DC';'HEIGHT: 11.25pt' height=15>" +
			//"<TD align='CENTER';class=xl67 style='BORDER-TOP: windowtext 0.5pt solid; HEIGHT: 11.25pt; BORDER-RIGHT:  2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext 0.5pt solid; ' height=15><FONT size=2 face=Arial>"+СчМаш+"</FONT></TD>"+
			//"<TD align='RIGHT';class=xl67 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Тек.Маршрут+"</FONT></TD>" +
			//"<TD align='RIGHT';class=xl70 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; ' colSpan=3><FONT size=2 face=Arial>"+ГосНомер+"</FONT></TD>"+
			//"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Тек.Кол+"</FONT></TD>" +
			//"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+КолЗаборы+"</FONT></TD></TR>";
			
		КонецЦикла;	
		
		// обработаем случаи, когда есть транспорт с заборами и без доставок
		//Для каждого Стр Из РезЗаборы Цикл			
		//	Если НЕ Стр.выгружен Тогда
		//		
		//		Если ЗначениеЗаполнено(Стр.НомерТранспорта) Тогда
		//		    ГосНомер = Стр.НомерТранспорта;
		//		Иначе	
		//			ГосНомер = "машины нет";				
		//		КонецЕсли;			
		//		
		//		СчМаш = СчМаш + 1;
		//		КолЗаборы = Стр.Кол;
		//		Колмаш = "-";
		//		Маршрут = Стр.Маршрут;
		//		
		//		ТекстHTMLСтр = МакетHTMLСтр.ПолучитьТекст();
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Номер", СчМаш);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Маршрут", Тек.Маршрут);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Машина", ГосНомер);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"ВсегоЗаказов", Колмаш);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"МГТ", СчМаш);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"СГТ", СчМаш);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"КГТ", СчМаш);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"ВсегоЗаборов", КолЗаборы);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"До1м3", СчМаш);
		//		ТекстHTMLСтр = СтрЗаменить(ТекстHTMLСтр,"Более1м3", СчМаш);
		//		
		//		ТекстHTMLМакет = ТекстHTMLМакет + ТекстHTMLСтр;
		//		//ТекстHTMLМакет = ТекстHTMLМакет + 
		//		//"<TR style='BACKGROUND-COLOR: #F5F5DC';'HEIGHT: 11.25pt' height=15>" +
		//		//"<TD align='CENTER';class=xl67 style='BORDER-TOP: windowtext 0.5pt solid; HEIGHT: 11.25pt; BORDER-RIGHT:  2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext 0.5pt solid; ' height=15><FONT size=2 face=Arial>"+СчМаш+"</FONT></TD>"+
		//		//"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Маршрут+"</FONT></TD>" +
		//		//"<TD align='RIGHT';class=xl70 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid; windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; ' colSpan=3><FONT size=2 face=Arial>"+ГосНомер+"</FONT></TD>"+
		//		//"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+Колмаш+"</FONT></TD>" + 
		//		//"<TD align='RIGHT';class=xl68 style='BORDER-TOP: windowtext 0.5pt solid; BORDER-RIGHT: 2px solid;windowtext 0.5pt solid; BORDER-BOTTOM: windowtext 0.5pt solid; BORDER-LEFT:  2px solid; windowtext; '><FONT size=2 face=Arial>"+КолЗаборы+"</FONT></TD></TR>";
		//					
		//	КонецЕсли;	
		//КонецЦикла;
		
		Если ЕстьСтрокаБезМашины тогда
			СчМаш = СчМаш - 1;
		КонецЕсли;
		КолЗаказов = ТабМ.Итог("Кол");
		КолЗаборыВсего = ТабМ.Итог("КолЗаборов");
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоМашин]"  , СчМаш);
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоЗаказов]", КолЗаказов);
		ТекстHTMLМакет = СтрЗаменить(ТекстHTMLМакет,"[КоличествоЗаборов]", КолЗаборыВсего);
						
		Т = Т + "ИТОГО: доставок  = " + Формат(КолЗаказов) + " шт." + ", заборов = " + Формат(КолЗаборыВсего) + ", машин = " + Формат(СчМаш);
		
		ТекстHTMLМакет = ТекстHTMLМакет + "</TBODY></TABLE></BODY></HTML>";
		
		// Закомментировать для теста 2596
		//Отпр = lem.ОтправитьСообщение(МасП, "Произведена выгрузка машин (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст) ;
		Отпр = lem.ОтправитьСообщение(МасП,                                                // Массив адресов
		"Произведена выгрузка машин - "+ Терминал.Город + " (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", // Тема 
		ТекстHTMLМакет,                                                         // Текст
		,                                                                       // Файл
		"Логистическая компания ""Стриж""",                                     // Имя отправителя
		,                                                                       // Обратный адрес
		ТипТекстаПочтовогоСообщения.HTML);                                      // Тип текста		
		
	Иначе
		Если ТипЗнч(Рез) = Тип("Булево") Тогда
			Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст);
		Иначе
			Т = Рез;
			Отпр = lem.ОтправитьСообщение(МасП, "Выгрузка машин произведена с ошибками (" + Формат(ТекущаяДата(), "ДЛФ=DD") + ")", Т, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст);
		КонецеСли;	
	КонецеСли;
	
		
	
	Пер = Новый СтандартныйПериод;
	Пер.ДатаНачала = НачалоДня(ТекущаяДата());
	Пер.ДатаОкончания = КонецДня(ТекущаяДата());
	
	//Пер.ДатаНачала = НачалоДня(Дата("20160413"));    //тест
	//Пер.ДатаОкончания = КонецДня(Дата("20160413"));  //тест
	
	От = Отчеты.ОтчетПоДоставкамКомитента.Создать();
	//Серегин М.В. 08.09.2015 14:54:03 получим контрагентов исключений
	ТаблицаКонтрагентовИсключений = smv.ПолучитьКонтрагентовИсключений(Перечисления.ТипыСвязейКонтрагентовИсключений.РегламентВыгрузкаМашин);
	//Серегин М.В. 08.09.2015 15:04:43 
	
	От.СформироватьОтправитьПоПочте(Пер,ТаблицаКонтрагентовИсключений,Неопределено,Терминал);

КонецПроцедуры

Функция СвернутьПолигонМаршрутизацииПорядокПоМаршруту(Знач ТаблДанных, СписокВодителейЭкспедиторов = Неопределено) Экспорт
	
	// Задача № 2799
	СписокВодителейЭкспедиторов = ТаблДанных.Скопировать();
	СписокВодителейЭкспедиторов.Свернуть("Маршрут,Транспорт,Водитель,Экспедитор");
	// Задача № 2799
	
	ТаблицаПолигонов = ТаблДанных.Скопировать();
	//ТаблицаПолигонов.Свернуть("Маршрут,НомерМашины,ПолигонМаршрутизацииПорядок");
	ТаблицаПолигонов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПолигонов.ЗаполнитьЗначения(1, "Количество"); 
	ТаблицаПолигонов.Свернуть("Маршрут,Транспорт,ПолигонМаршрутизацииПорядок", "Количество");

	ТаблицаРезультата = ТаблДанных.Скопировать(,"Маршрут,Транспорт");       //,ПолигонМаршрутизацииПорядок
	ТаблицаРезультата.Очистить();
	ТаблицаРезультата.Колонки.Добавить("ЗоныМаршрутов", Новый ОписаниеТипов("Строка"));

	ТаблицаМаршрутов = ТаблДанных.Скопировать(); 
	ТаблицаМаршрутов.Свернуть("Маршрут,Транспорт");
	
	Для Каждого СтрокаМаршрут Из ТаблицаМаршрутов Цикл
		
		СтрокиПолигонов = ТаблицаПолигонов.НайтиСтроки(Новый Структура("Маршрут,Транспорт",СтрокаМаршрут.Маршрут,СтрокаМаршрут.Транспорт));
		
		МассивПолигонов = Новый Массив;
		Для Каждого СтрокаПолигонов Из СтрокиПолигонов Цикл
			
			МассивПолигонов.Добавить(Строка(СтрокаПолигонов.ПолигонМаршрутизацииПорядок) + "-"  + Строка(СтрокаПолигонов.Количество));
			
		КонецЦикла;	
		
		СтрокаРезультата = ТаблицаРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаМаршрут);
		СтрокаРезультата.ЗоныМаршрутов = СтрСоединить(МассивПолигонов, ";");
		
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции	

Функция ВыгрузитьВАдминкуНаСервереЗаборы(Терминал, ДатаОтчета)  Экспорт
	
	Попытка
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину(); 
	Исключение
		Сообщить("Не удалось создать подключение: "+ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;	
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ЗаборТовара.Номер КАК Номер,
	            |	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Транспорт.НомерГосударственнойРегистрации, """") КАК НомерТранспорта,
	            |	ЗаборТовара.ДатаДоставки КАК ДатаДоставки,
	            |	ЗаборТовара.ТочкаДоставки.Адрес.Наименование КАК АдресДоставки,
	            |	ЕСТЬNULL(ЗаборТовара.ТочкаДоставки.Москва, ИСТИНА) КАК ЭтоМосква,
	            |	РейсЗаказы.Ссылка.РейсМестнойДоставки.Номер КАК НомерРейса,
				//Асеев 04.02.2021 (Задача № 4353)>>>
				//|	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Водитель, ЗНАЧЕНИЕ(Справочник.новаВодители.ПустаяСсылка)) КАК Водитель,
				//|	ЗаборТовара.Экспедитор КАК Экспедитор,
	            |	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Водитель.Наименование, """") КАК Водитель,
	            |	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Наименование, """") КАК Экспедитор,
				//Асеев 04.02.2021 (Задача № 4353)<<<
	            |	ЗаборТовара.Ссылка КАК Забор,
	            |	1 КАК КолЗаборов,
	            |	РейсЗаказы.Ссылка.НомерПалетты КАК Маршрут,
	            |	ВЫБОР
	            |		КОГДА ЗаборТовара.ОбъемЗабора <= 1
	            |			ТОГДА 1
	            |		ИНАЧЕ 0
	            |	КОНЕЦ КАК Мение,
	            |	ВЫБОР
	            |		КОГДА ЗаборТовара.ОбъемЗабора > 1
	            |			ТОГДА 1
	            |		ИНАЧЕ 0
	            |	КОНЕЦ КАК Более,
	            |	ЕСТЬNULL(ПривязкаМашинКРейсамСрезПоследних.Транспорт, ЗНАЧЕНИЕ(Справочник.новаТранспорт.Пустаяссылка)) КАК Транспорт
	            |ИЗ
	            |	Документ.ЗаборТовара КАК ЗаборТовара
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	            |			ПО РейсЗаказы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	            |		ПО ЗаборТовара.Ссылка = РейсЗаказы.Заказ
	            |ГДЕ
	            |	ЗаборТовара.ПометкаУдаления = ЛОЖЬ
	            |	И НЕ ЗаборТовара.СтатусИнтернетМагазина В (3, 4)
	            |	И ЗаборТовара.Дата МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ЗаборТовара.ТерминалДоставки = &ТерминалДоставки";
	
	//--- БАО 29.09.2017 №1868
				
	Зап.УстановитьПараметр("ТерминалДоставки", Терминал);
	Зап.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОтчета));			
	Зап.УстановитьПараметр("ДатаКон", КонецДня(ДатаОтчета));   
	
		
	Таб = Зап.Выполнить().Выгрузить();
	Таб.Колонки.Добавить("Зона");
	//Асеев 11.09.2024 (Задача № 5321)>>>
	Таб.Колонки.Добавить("КодТарифа");
	//Асеев 11.09.2024 (Задача № 5321)<<<
	//добавим районы
	УстановкаРайонов(Таб);
	
	
	
	//Стр = "DECLARE @t TOrderCar   ";
	
	Стр2 = "DECLARE @t TOrderTrip   ";
	
	СтрWho = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
	
	//CeHbKA
	МассивПараметров = Новый Массив;
	
	Для Каждого Тек Из Таб Цикл
		
		Если ЗначениеЗаполнено(Тек.Зона) Тогда
			//Асеев 11.09.2024 (Задача № 5321)>>>
			//ЗонаРайон = Формат(Тек.Зона.КодТарифа, "ЧН=0; ЧГ=");
			ЗонаРайон = Формат(Тек.КодТарифа, "ЧН=0; ЧГ=");
			//Асеев 11.09.2024 (Задача № 5321)<<<
		Иначе	
		    ЗонаРайон = ?(Тек.ЭтоМосква, 0, 1);
		КонецЕсли;
		
		
		//Стр = Стр + "                                                                                                                                                                                                                      
		//|INSERT INTO @t ([orderID],[car],[who],[deliveryDate],[computedAddress],isRegion) VALUES (" + СокрЛП(Тек.Номер) + ",'" + Тек.НомерТранспорта + "','" + ПараметрыСеанса.ТекущийПользователь + "', '" + ДатаИз1С(Тек.ДатаДоставки, Ложь)+"', " + ?(Тек.АдресДоставки="NULL", "NULL", "'" + Тек.АдресДоставки + "'") + "," + Строка(ЗонаРайон) + ")";
		
		Если ЗначениеЗаполнено(Тек.НомерРейса) Тогда			
			Стр2 = "" + Стр2 + "
			|INSERT INTO @t ([orderId],[tripId],[car],[fio1],[fio2]) VALUES (" + СокрЛП(Тек.Номер) + "," + Формат(Число(Тек.НомерРейса), "ЧГ=") + ",'" + Тек.НомерТранспорта + "','" + Тек.Водитель + "', '" + Тек.Экспедитор + "')";			
		КонецЕсли;

		//CeHbKA
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Address", ?(Тек.АдресДоставки = "NULL", "NULL", "" + Тек.АдресДоставки + ""));
		ПараметрыЗапроса.Вставить("Car", Тек.НомерТранспорта);
		ПараметрыЗапроса.Вставить("DeliveryDate", ДатаИз1С(Тек.ДатаДоставки, Ложь));
		ПараметрыЗапроса.Вставить("IsRegion", Строка(ЗонаРайон));
		ПараметрыЗапроса.Вставить("OrderId", Тек.Номер);
		ПараметрыЗапроса.Вставить("Who", СтрWho); // Дробница Р. 06.10.2018
		
		МассивПараметров.Добавить(ПараметрыЗапроса);
		
	КонецЦикла;	
	
	//Попытка
	//	ЗапросКИнтернетМагазину(Стр + "
	//	|EXEC import_setOrderCarsFrom1C @t
	//	|");		
	//	Сообщить("Выгрузка окончена.");
	//Исключение
	//	Сообщить("Ошибка выгрузки машин. " + ОписаниеОшибки(), СтатусСообщения.Важное);
	//КонецПопытки;
	
	//CeHbKA
	//Для каждого ПараметрыЗапроса Из МассивПараметров Цикл

	//	СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(Перечисления.ВидыЗапросовWEBСервис.SetOrderCarsResult, ПараметрыЗапроса);
	//	
	//	Если НЕ СтруктураВозврата.Успешно Тогда
	//		Сообщить("Ошибка выгрузки машин. " + ОписаниеОшибки(), СтатусСообщения.Важное);
	//	КонецЕсли; 
	//	
	//КонецЦикла; 
	
	// Закомментировать для теста 2596
	// Михушкин --->> 	
	Если НЕ Стр2 = "" Тогда			
		Попытка
			//Асеев 09.09.2020 (Задача № 4205)>>>
			//добавлен КонтекстВызова
			Евген.ЗапросКИнтернетМагазину(Стр2 + "
			|EXEC import_setTripFrom1C @t
			|", ПодключениеКМагазину,,, "ОбщийМодуль.mas.ВыгрузитьВАдминкуНаСервереЗаборы");
			//Асеев 09.09.2020 (Задача № 4205)<<<
		Исключение
			#Если Клиент Тогда
				Сообщить("Ошибка выгрузки заборов. " + ОписаниеОшибки(), СтатусСообщения.Важное);
			#КонецеСли
		КонецПопытки;		
	КонецЕсли;	
	// <<--- Михушкин 
	
	
	Возврат Таб;
	
	
КонецФункции

Функция ВозвратНеПустойСтроки(Значение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "-";
	КонецЕсли;
	Возврат Значение;		
КонецФункции


Функция ДатаИз1С(Д, ЭтоКонец) Экспорт
	
	Возврат Формат(Год(Д),"ЧЦ=4; ЧВН=; ЧГ=0") + ЛидирующийНоль(Месяц(Д)) + ЛидирующийНоль(День(Д)) + " " +
			ЛидирующийНоль(Час(Д)) + ":" + ЛидирующийНоль(Минута(Д)) + ":" + ЛидирующийНоль(Секунда(Д)) +
			?(ЭтоКонец, ".998", "");
			
КонецФункции // ДатаИз1С()
		
			
Функция ЗапросКИнтернетМагазину(ТекстЗапроса) Экспорт
	
	Попытка	
		ПодключениеКМагазину = Евген.СоздатьПодключениеКИнтернетМагазину();	
	Исключение	
	КонецПопытки;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = ПодключениеКМагазину;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.CommandType = 1;
	Возврат Cmd.Execute();
	
КонецФункции


Функция ЛидирующийНоль(зн)
	Если Зн < 10 Тогда
		Возврат "0"+Зн;
	Иначе
		Возврат Зн;
	КонецЕсли;	
КонецФункции


Процедура УстановкаРайонов(Таб)
	
	Зап = Новый Запрос;	
	//Асеев 11.09.2024 (Задача № 5321)>>>
	//Асеев 11.09.2024 (Задача № 5321)<<<
	Зап.Текст =
	"ВЫБРАТЬ
	|	ЗаборТовара.Ссылка КАК Забор,
	|	ЗаборТовара.ТарифнаяСетка.КартаТарификацииПартнеров КАК КартаТарификацииПартнеров,
	|	АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних.СхемаЗонТарификацииПартнеров КАК СхемаЗонТарификации
	|ПОМЕСТИТЬ ВТ_РасчетЯндекс
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеСхемыЗонКартТарификацииПартнеров.СрезПоследних КАК АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних
	|		ПО (ЗаборТовара.Ссылка В (&Мас))
	|			И (ЗаборТовара.ТарифнаяСетка.МетодОпределенияЗоныТарификации = ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмКартЯндекс))
	|			И ЗаборТовара.ТарифнаяСетка.КартаТарификацииПартнеров = АктуальныеСхемыЗонКартТарификацииПартнеровСрезПоследних.КартаКонструктораКарт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТарифныеСеткиДоступныеЗоныТарификацииЗаборов.Зона КАК ЗонаТарификации,
	|	ТарифныеСеткиДоступныеЗоныТарификацииЗаборов.Ссылка.КлассификаторТарификацииЗаборов КАК КлассификаторТарификацииЗаборов,
	|	ГруппыРайоновРайоны.Район КАК Район,
	|	ЗаборТовара.Ссылка КАК Забор
	|ПОМЕСТИТЬ ВТДоступныеЗоныТарификации
	|ИЗ
	|	Документ.ЗаборТовара КАК ЗаборТовара
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифныеСетки.ДоступныеЗоныТарификацииЗаборов КАК ТарифныеСеткиДоступныеЗоныТарификацииЗаборов
	|		ПО (ЗаборТовара.Ссылка В (&Мас))
	|			И ЗаборТовара.ТарифнаяСетка = ТарифныеСеткиДоступныеЗоныТарификацииЗаборов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРайонов.Районы КАК ГруппыРайоновРайоны
	|		ПО (ТарифныеСеткиДоступныеЗоныТарификацииЗаборов.Зона = ГруппыРайоновРайоны.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|		ПО ЗаборТовара.Ссылка = ВТ_РасчетЯндекс.Забор
	|ГДЕ
	|	ВТ_РасчетЯндекс.Забор ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоступныеЗоныТарификации.Забор КАК Забор,
	|	ВТДоступныеЗоныТарификации.ЗонаТарификации КАК ЗонаТарификации,
	|	ВТДоступныеЗоныТарификации.ЗонаТарификации.КодТарифа КАК КодТарифа,
	|	ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмНова) КАК МетодОпределенияЗоныТарификации,
	|	ЛОЖЬ КАК ЗонаНеОпределена
	|ИЗ
	|	ВТДоступныеЗоныТарификации КАК ВТДоступныеЗоныТарификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаРайоныАдресов КАК новаРайоныАдресов
	|		ПО ВТДоступныеЗоныТарификации.Район = новаРайоныАдресов.Район
	|			И ВТДоступныеЗоныТарификации.Забор.ТочкаДоставки.Адрес = новаРайоныАдресов.Адрес
	|			И ВТДоступныеЗоныТарификации.КлассификаторТарификацииЗаборов = новаРайоныАдресов.Классификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_РасчетЯндекс.Забор,
	|	ЕСТЬNULL(ГруппыРайоновЗоныТарификацииПартнеров.Ссылка, ВТ_РасчетЯндекс.КартаТарификацииПартнеров.ЗонаТарификацииПриНепривязанномАдресе),
	|	ЕСТЬNULL(ГруппыРайоновЗоныТарификацииПартнеров.Ссылка.КодТарифа, ВТ_РасчетЯндекс.КартаТарификацииПартнеров.ЗонаТарификацииПриНепривязанномАдресе.КодТарифа),
	|	ЗНАЧЕНИЕ(Перечисление.МетодыОпределенияЗоныТарификации.МеханизмКартЯндекс),
	|	ГруппыРайоновЗоныТарификацииПартнеров.Ссылка ЕСТЬ NULL
	|ИЗ
	|	ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_РасчетЯндекс.Забор КАК Забор,
	|			ВТ_РасчетЯндекс.КартаТарификацииПартнеров КАК КартаТарификацииПартнеров,
	|			ЗоныТарификацииПартнеровСрезПоследних.ЗонаТарификации.НомерЗоны КАК НомерЗоны
	|		ИЗ
	|			ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗоныТарификацииПартнеров.СрезПоследних(
	|						,
	|						(Заказ, СхемаЗонТарификации) В
	|							(ВЫБРАТЬ
	|								ВТ_РасчетЯндекс.Забор КАК Забор,
	|								ВТ_РасчетЯндекс.СхемаЗонТарификации КАК СхемаЗонТарификации
	|							ИЗ
	|								ВТ_РасчетЯндекс КАК ВТ_РасчетЯндекс)) КАК ЗоныТарификацииПартнеровСрезПоследних
	|				ПО ВТ_РасчетЯндекс.Забор = ЗоныТарификацииПартнеровСрезПоследних.Заказ) КАК ВЗ_ЗоныТарификацииЗаказов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРайонов.ЗоныТарификацииПартнеров КАК ГруппыРайоновЗоныТарификацииПартнеров
	|			ПО ВЗ_ЗоныТарификацииЗаказов.НомерЗоны = ГруппыРайоновЗоныТарификацииПартнеров.НомерЗоныТарификации
	|				И ВЗ_ЗоныТарификацииЗаказов.КартаТарификацииПартнеров = ГруппыРайоновЗоныТарификацииПартнеров.Ссылка.КартаТарификацииПартнеров
	|		ПО ВТ_РасчетЯндекс.Забор = ВЗ_ЗоныТарификацииЗаказов.Забор";
	
	Мас = Таб.ВыгрузитьКолонку("Забор");	
	Зап.УстановитьПараметр("Мас", Мас);
	
	//Асеев 11.09.2024 (Задача № 5321)>>>
	МассивЗаказовОшибкаЗоныЯндекс = Новый Массив;
	//Асеев 11.09.2024 (Задача № 5321)<<<
	
	Выборка = Зап.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//Асеев 11.09.2024 (Задача № 5321)>>>
		Если Выборка.ЗонаНеОпределена Тогда
			МассивЗаказовОшибкаЗоныЯндекс.Добавить(Выборка.Забор);
		КонецЕсли;
		//Асеев 11.09.2024 (Задача № 5321)<<<
		
		Най = Таб.Найти(Выборка.Забор);
		Если Най <> Неопределено Тогда
			Най.Зона = Выборка.ЗонаТарификации;
			Най.КодТарифа = Выборка.КодТарифа;
		КонецеСли;	
		
		//заполним реквизит ЗонаТарификации заодно
		Если ЗначениеЗаполнено(Выборка.ЗонаТарификации) Тогда			
			ДокЗабор = Выборка.Забор.ПолучитьОбъект();
			ДокЗабор.ЗонаТарификации = Выборка.ЗонаТарификации;
			ДокЗабор.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЦикла;
	
	//Асеев 11.09.2024 (Задача № 5321)>>>
	Если МассивЗаказовОшибкаЗоныЯндекс.Количество() Тогда
		МаршрутизацияЗаказовСервер.ОтправитьПисьмоОшибкаЗоныЯндекс(МассивЗаказовОшибкаЗоныЯндекс, "mas.УстановкаРайонов");
	КонецЕсли;
	//Асеев 11.09.2024 (Задача № 5321)<<<
	
КонецПроцедуры

Процедура РегламентСозданиеПриходаОЗОН() Экспорт
	
	
	ГраницаЗапроса = НачалоДня(ТекущаяДата()) - 15 * 60 * 60;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	oz_ПриёмПосылокЗаказы.Ссылка,
	                      |	oz_ПриёмПосылокЗаказы.Заказ,
	                      |	oz_ПриёмПосылокЗаказы.ШтрихкодПосылки,
	                      |	oz_ПриёмПосылокЗаказы.Ожидается,
	                      |	oz_ПриёмПосылокЗаказы.ПризнакПоврежденияПосылки,
	                      |	oz_ПриёмПосылокЗаказы.РезультатЭкспорта,
	                      |	oz_ПриёмПосылокЗаказы.Ссылка.ШтрихкодПеревозки
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.oz_ПриёмПосылок.Заказы КАК oz_ПриёмПосылокЗаказы
	                      |ГДЕ
	                      |	oz_ПриёмПосылокЗаказы.Ссылка.Дата >= &Дата
	                      |	И oz_ПриёмПосылокЗаказы.Ссылка.ПроизведенЭкспортДанных = ЛОЖЬ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Ссылка КАК Ссылка,
	                      |	ВТ.Заказ,
	                      |	ВТ.ШтрихкодПосылки,
	                      |	ВТ.Ожидается,
	                      |	ВТ.ПризнакПоврежденияПосылки,
	                      |	ВТ.РезультатЭкспорта,
	                      |	ВТ.ШтрихкодПеревозки,
	                      |	ВЫБОР
	                      |		КОГДА ЗагрузкаСТСДШтрихкоды.Заказ ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК ЕстьНаТСД
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗагрузкаСТСД.Штрихкоды КАК ЗагрузкаСТСДШтрихкоды
	                      |		ПО ВТ.ШтрихкодПосылки = ЗагрузкаСТСДШтрихкоды.Штрихкод
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.ШтрихкодПосылки,
	                      |	ВТ.ПризнакПоврежденияПосылки,
	                      |	ВЫБОР
	                      |		КОГДА ЗагрузкаСТСДШтрихкоды.Заказ ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ,
	                      |	ВТ.Ожидается,
	                      |	ВТ.Ссылка,
	                      |	ВТ.ШтрихкодПеревозки,
	                      |	ВТ.Заказ,
	                      |	ВТ.РезультатЭкспорта
	                      |ИТОГИ ПО
	                      |	Ссылка");
	Запрос.УстановитьПараметр("Дата", ГраницаЗапроса);	
	РезПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока РезПоДокументу.Следующий() Цикл
		
		ДокПриемПосылок = РезПоДокументу.Ссылка.ПолучитьОбъект();
		РезДетальныеЗаписи = РезПоДокументу.Выбрать();		
		Пока РезДетальныеЗаписи.Следующий() Цикл
			
			Если РезДетальныеЗаписи.ЕстьНаТСД Тогда		
				НайСтр = ДокПриемПосылок.Заказы.НайтиСтроки(Новый Структура("ШтрихкодПосылки", РезДетальныеЗаписи.ШтрихкодПосылки));
				Если НайСтр.Количество() Тогда
					НайСтр[0].Поступило = Истина;
				КонецЕсли;				 		
			КонецЕсли;
			
		КонецЦикла;
			
		Попытка
			ДокПриемПосылок.Записать(РежимЗаписиДокумента.Запись);
		Исключение		
		КонецПопытки;		
		Попытка
			ДокПриемПосылок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение		
		КонецПопытки;
	
	КонецЦикла;
						  
	
	
КонецПроцедуры	

// процедура регламентного задания (ТипРассылки: 1 - уехавшие заказы, 2 - самовывоз)
Процедура КонтрольВыполненияРассылкиСМС(ТипРассылки = 1) Экспорт

	МасП = Новый Массив;
	МасП.Добавить("logist@strizh-logistic.ru");
	МасП.Добавить("igor.tischenko@strizh-logistic.ru");
	
	//Получим дату последней рассылки
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
	    |   ПараметрыРегламентныхЗаданий.Значение КАК Значение
	    |ИЗ
	    |   РегистрСведений.ПараметрыРегламентныхЗаданий КАК ПараметрыРегламентныхЗаданий
	    |ГДЕ
	    |   ПараметрыРегламентныхЗаданий.Ключ = &Ключ";
	Запрос.УстановитьПараметр("Ключ", ?(ТипРассылки = 1, "РассылкаОбУехавшихЗаказах", "РассылкаСамовывоз"));
    Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ДатаРассылки = Дата(Результат.Значение);
		
		Если ДатаРассылки < НачалоДня(ТекущаяДата()) Тогда
			
			ТемаПисьма = "Не были отправлены СМС (" + ?(ТипРассылки = 1, "РассылкаОбУехавшихЗаказах", "РассылкаСамовывоз") + ")";
			ТекстПисьма = "Не были отправлены СМС (" + ?(ТипРассылки = 1, "РассылкаОбУехавшихЗаказах", "РассылкаСамовывоз") + ")";
		
			Отпр = lem.ОтправитьСообщение(МасП, ТемаПисьма, ТекстПисьма, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.ПростойТекст);	
		
		КонецЕсли;
		
	КонецЕсли;
    

КонецПроцедуры

// ShopID - число или код контрагента
Функция ВнешнийНомерЕстьВАдминке(ВнешнийНомер, ShopID) Экспорт

	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();	
	RS = Евген.ЗапросКИнтернетМагазину("SELECT dbo.fs_checkDuplicateOrderIdImport('" + ВнешнийНомер + "'," + СокрЛП(СтрЗаменить(ShopID, "Shop_", "")) + ") As Nom", Подкл);	
	РезАдминка = Евген.СоздатьТаблицу(RS, "Nom_Ч");
	
	Если НЕ РезАдминка.Количество() Тогда
		Возврат Ложь;	
	Иначе
		Если ЗначениеЗаполнено(РезАдминка[0].Nom_Ч) Тогда		
			Возврат Истина;	
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // ()

// регламент - ОтложеннаяОбработкаАПП
Процедура ОтложеннаяОбработкаАПП() Экспорт

		
	ТопДел = Справочники.Контрагенты.НайтиПоКоду("Shop_334");	
	ГраницаОбработанныхАПП = ТекущаяДата() - 86400;
	    //21600
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПриходЗаказовНаСклад.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ПриходЗаказовНаСклад КАК ПриходЗаказовНаСклад
	                      |ГДЕ
	                      |	ПриходЗаказовНаСклад.Проведен = ИСТИНА
	                      |	И ПриходЗаказовНаСклад.Дата >= &Граница");
	Запрос.УстановитьПараметр("Граница", ГраницаОбработанныхАПП);
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		Док = Рез.Ссылка;		
		
		// обработаем ТЧ Заказы
		Най = Док.Заказы.НайтиСтроки(Новый Структура("Заказ", Документы.РеализацияТоваровУслуг.ПустаяСсылка()));
		Если Най.Количество() Тогда
						
			Если Док.Контрагент = ТопДел Тогда		
				ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ
				                            |	ПриходЗаказовНаСкладЗаказы.Ссылка КАК Ссылка,
				                            |	ПриходЗаказовНаСкладЗаказы.НомерСтроки КАК НомерСтроки,
				                            |	ПриходЗаказовНаСкладЗаказы.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
				                            |	ПриходЗаказовНаСкладЗаказы.Заказ КАК Заказ,
				                            |	ПриходЗаказовНаСкладЗаказы.КоличествоМест КАК КоличествоМест,
				                            |	ПриходЗаказовНаСкладЗаказы.СуммаДокумента КАК СуммаДокумента
				                            |ПОМЕСТИТЬ ВТ
				                            |ИЗ
				                            |	Документ.ПриходЗаказовНаСклад.Заказы КАК ПриходЗаказовНаСкладЗаказы
				                            |ГДЕ
				                            |	ПриходЗаказовНаСкладЗаказы.Ссылка = &Ссылка
				                            |;
				                            |
				                            |////////////////////////////////////////////////////////////////////////////////
				                            |ВЫБРАТЬ
				                            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
				                            |	ВТ.ВнешнийНомерЗаказа КАК НомерВнешнегоЗаказа
				                            |ИЗ
				                            |	ВТ КАК ВТ
				                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				                            |		ПО ВТ.ВнешнийНомерЗаказа = РеализацияТоваровУслуг.НомерВнешнегоЗаказа");
				ЗапросЗаказы.УстановитьПараметр("Ссылка", Док);
				РезТЗ = ЗапросЗаказы.Выполнить().Выгрузить();				
			Иначе				
				МассивНомеров = Док.Заказы.Выгрузить(, "ВнешнийНомерЗаказа");
				ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ
				                            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
				                            |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
				                            |	РеализацияТоваровУслуг.Номер КАК Номер
				                            |ИЗ
				                            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				                            |ГДЕ
				                            |	РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара
				                            |	И РеализацияТоваровУслуг.НомерВнешнегоЗаказа В(&МассивНомеров)");
				ЗапросЗаказы.УстановитьПараметр("МассивНомеров", МассивНомеров);
				ЗапросЗаказы.УстановитьПараметр("ВладелецТовара", Док.Контрагент);
				РезТЗ = ЗапросЗаказы.Выполнить().Выгрузить();			
			КонецЕсли;
			
			АППОбъект = Док.ПолучитьОбъект();
			Для каждого Ст Из АППОбъект.Заказы Цикл		
				Если НЕ ЗначениеЗаполнено(Ст.Заказ) Тогда
				
					НайЗак = РезТЗ.НайтиСтроки(Новый Структура("НомерВнешнегоЗаказа", СокрЛП(Ст.ВнешнийНомерЗаказа)));
					Если НайЗак.Количество() Тогда		
						Ст.Заказ = НайЗак[0].Заказ;			
					КонецЕсли;
				
				КонецЕсли;			
			КонецЦикла;	
			
			Попытка	
				АППОбъект.Записать(РежимЗаписиДокумента.Запись);
				АППОбъект.Записать(РежимЗаписиДокумента.Проведение);				
			Исключение			
			КонецПопытки;
				
		КонецЕсли;
		
		
		
		
		// обработаем ТЧ ШтрихкодыПоМестам
		Най = Док.ШтрихкодыПоМестам.НайтиСтроки(Новый Структура("Заказ", Документы.РеализацияТоваровУслуг.ПустаяСсылка()));
		Если Най.Количество() Тогда
			
			Если Док.Контрагент = ТопДел Тогда												
				ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ
				                            |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка КАК Ссылка,
				                            |	ПриходЗаказовНаСкладШтрихкодыПоМестам.НомерСтроки КАК НомерСтроки,
				                            |	ПриходЗаказовНаСкладШтрихкодыПоМестам.ВнешнийНомерЗаказа КАК ВнешнийНомерЗаказа,
				                            |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Заказ КАК Заказ
				                            |ПОМЕСТИТЬ ВТ
				                            |ИЗ
				                            |	Документ.ПриходЗаказовНаСклад.ШтрихкодыПоМестам КАК ПриходЗаказовНаСкладШтрихкодыПоМестам
				                            |ГДЕ
				                            |	ПриходЗаказовНаСкладШтрихкодыПоМестам.Ссылка = &Ссылка
				                            |;
				                            |
				                            |////////////////////////////////////////////////////////////////////////////////
				                            |ВЫБРАТЬ
				                            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
				                            |	ВТ.ВнешнийНомерЗаказа КАК НомерВнешнегоЗаказа
				                            |ИЗ
				                            |	ВТ КАК ВТ
				                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				                            |		ПО ВТ.ВнешнийНомерЗаказа = РеализацияТоваровУслуг.НомерВнешнегоЗаказа");
				ЗапросЗаказы.УстановитьПараметр("Ссылка", Док);
				РезТЗ = ЗапросЗаказы.Выполнить().Выгрузить();			
			Иначе				
				МассивНомеров = Док.ШтрихкодыПоМестам.Выгрузить(, "ВнешнийНомерЗаказа");
				ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ
				                            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
				                            |	РеализацияТоваровУслуг.НомерВнешнегоЗаказа КАК НомерВнешнегоЗаказа,
				                            |	РеализацияТоваровУслуг.Номер КАК Номер
				                            |ИЗ
				                            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				                            |ГДЕ
				                            |	РеализацияТоваровУслуг.ВладелецТовара = &ВладелецТовара
				                            |	И РеализацияТоваровУслуг.НомерВнешнегоЗаказа В(&МассивНомеров)");
				ЗапросЗаказы.УстановитьПараметр("МассивНомеров", МассивНомеров);
				ЗапросЗаказы.УстановитьПараметр("ВладелецТовара", Док.Контрагент);
				РезТЗ = ЗапросЗаказы.Выполнить().Выгрузить();	
			КонецЕсли;
			
			АППОбъект = Док.ПолучитьОбъект();
			Для каждого Ст Из АППОбъект.ШтрихкодыПоМестам Цикл		
				Если НЕ ЗначениеЗаполнено(Ст.Заказ) Тогда
				
					НайЗак = РезТЗ.НайтиСтроки(Новый Структура("НомерВнешнегоЗаказа", СокрЛП(Ст.ВнешнийНомерЗаказа)));
					Если НайЗак.Количество() Тогда		
						Ст.Заказ = НайЗак[0].Заказ;			
					КонецЕсли;
				
				КонецЕсли;			
			КонецЦикла;	
			
			Попытка
				АППОбъект.Записать(РежимЗаписиДокумента.Запись);
				АППОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение		
			КонецПопытки;
				
		КонецЕсли;
		
	КонецЦикла;
	
	
		

КонецПроцедуры

Функция СоздатьБэйджСотрудника(Сотрудник) Экспорт

	// создадим элемент спр.БэйджиСотрудников
	НБэйдж = Справочники.БэйджиСотрудников.СоздатьЭлемент();
	НБэйдж.Владелец = Сотрудник;
	НБэйдж.Записать();
	
	Префикс = "";	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.новаВодители") Тогда	
		Префикс = "CM";			
	ИначеЕсли ТипЗнч(Сотрудник) = Тип("СправочникСсылка.новаЭкспедиторы") Тогда
		Префикс = "FF";		
	КонецЕсли;
	 
	НБэйдж.КодСотрудника = "" + Префикс + Прав(НБэйдж.Код, 9);
	НБэйдж.Записать();
	
	
	// создадим запись в РС УчетБэйджейСотрудников
	ТекВр = ТекущаяДата();
	Набор = РегистрыСведений.УчетБэйджейСотрудников.СоздатьНаборЗаписей();
	Набор.Отбор.Сотрудник.Установить(Сотрудник);
	Набор.Отбор.Период.Установить(ТекВр);
	Набор.Прочитать();
	
	НЗапись = Набор.Добавить();
	НЗапись.Бэйдж = НБэйдж.Ссылка;
	НЗапись.Период = ТекВр;
	НЗапись.БэйджАктуален = Истина;
	НЗапись.Сотрудник = Сотрудник;
	
	Набор.Записать();
	
	
	Возврат НБэйдж.Ссылка;
	

КонецФункции // ()


Процедура ДеАктуализироватьБэйдж(БэйджСсылка) Экспорт

	ТекВр = ТекущаяДата();
	
	Набор = РегистрыСведений.УчетБэйджейСотрудников.СоздатьНаборЗаписей();
	Набор.Отбор.Сотрудник.Установить(БэйджСсылка.Владелец);
	Набор.Отбор.Период.Установить(ТекВр);
	Набор.Прочитать();
	
	НЗапись = Набор.Добавить();
	НЗапись.Бэйдж = БэйджСсылка;
	НЗапись.Период = ТекВр;
	НЗапись.БэйджАктуален = Ложь;
	НЗапись.Сотрудник = БэйджСсылка.Владелец;
	
	Набор.Записать();
			

КонецПроцедуры



// печать бэйджа
Процедура НапечататьБэйджНаСервере(БэйджСсылка, ТабличныйДокумент) Экспорт

	МассивБэйджей = Новый Массив;
	МассивБэйджей.Добавить(БэйджСсылка);
	ТабличныйДокумент = ПечатьБэйджаГрупповая(МассивБэйджей, ТабличныйДокумент);
	
	
	//ТабличныйДокумент = ТабДок;
	//
	//Макет = Справочники.БэйджиСотрудников.ПолучитьМакет("Бэйдж");
	////ТабличныйДокумент = Новый ТабличныйДокумент;	
	//
	//ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//ТабличныйДокумент.АвтоМасштаб = Истина;
	//
	//Должность = "";
	//Если ТипЗнч(БэйджСсылка.Владелец) = Тип("СправочникСсылка.новаВодители") Тогда		
	//	Должность = "Водитель";	
	//ИначеЕсли ТипЗнч(БэйджСсылка.Владелец) = Тип("СправочникСсылка.новаЭкспедиторы") Тогда	
	//	Должность = "Экспедитор";	
	//КонецЕсли;
	//
	//ОбластьБэйджа = Макет.ПолучитьОбласть("ОбластьБэйджа");
	//
	//ОбластьБэйджа.Параметры.ФИО = БэйджСсылка.Владелец.Наименование;		
	//ОбластьБэйджа.Параметры.Должность = Должность;
	//ОбластьБэйджа.Параметры.Штрихкод = may.ПолучитьШКCode_39(СокрЛП(БэйджСсылка.Код));	

	//ТабличныйДокумент.ОтображатьСетку = Ложь;
	//ТабличныйДокумент.Вывести(ОбластьБэйджа);
	

КонецПроцедуры


&НаСервере
Функция ПолучитьБэйджНаСервере(ТекСотрудник) Экспорт
	

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БэйджиСотрудников.Ссылка КАК Ссылка,
	                      |	УчетБэйджейСотрудниковСрезПервых.Сотрудник КАК Сотрудник,
	                      |	ЕСТЬNULL(УчетБэйджейСотрудниковСрезПервых.БэйджАктуален, ЛОЖЬ) КАК БэйджАктуален
	                      |ИЗ
	                      |	Справочник.БэйджиСотрудников КАК БэйджиСотрудников
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетБэйджейСотрудников.СрезПервых КАК УчетБэйджейСотрудниковСрезПервых
	                      |		ПО БэйджиСотрудников.Владелец = УчетБэйджейСотрудниковСрезПервых.Сотрудник
	                      |ГДЕ
	                      |	БэйджиСотрудников.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", ТекСотрудник);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда			
		Если Рез.БэйджАктуален Тогда			
			
			Возврат Рез.ссылка;		
		Иначе
		    Сообщить("Бэйдж сотрудника более не актуален. ");
			Возврат Неопределено;	
		КонецЕсли;				
	Иначе
		Сообщить("Нет назначенного бейджа. ");
		Возврат Неопределено;	
	КонецЕсли;
	
	
КонецФункции


Функция ПечатьБэйджаГрупповая(СписокБэйджей, ТабДокумент) Экспорт

	//ТабДокумент                     = Новый ТабличныйДокумент;
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Ценник";
	Макет                           = Справочники.БэйджиСотрудников.ПолучитьМакет("Бэйдж");
	ОбластьБэйджа                  = Макет.ПолучитьОбласть("Строка|Столбец");
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ОтображатьСетку = Ложь;
	//ТабДокумент.АвтоМасштаб = Истина;
	
	ТекСтолбец = 0;
	ТекСтрока  = 0;

	Для каждого Бэ Из СписокБэйджей Цикл
		
		Должность = "";
		Если ТипЗнч(Бэ.Владелец) = Тип("СправочникСсылка.новаВодители") Тогда		
			Должность = "Водитель";	
		ИначеЕсли ТипЗнч(Бэ.Владелец) = Тип("СправочникСсылка.новаЭкспедиторы") Тогда	
			Должность = "Экспедитор";	
		КонецЕсли;
		
		ОбластьБэйджа.Параметры.ФИО = Бэ.Владелец.Наименование;		
		ОбластьБэйджа.Параметры.Должность = Должность;
		ОбластьБэйджа.Параметры.Штрихкод = may.ПолучитьШКCode_39(СокрЛП(Бэ.КодСотрудника));
				
		
		Если ТекСтолбец = 0 Тогда
			ТабДокумент.Вывести(ОбластьБэйджа);
		Иначе
			ТабДокумент.Присоединить(ОбластьБэйджа);
		КонецЕсли;

		ТекСтолбец = ТекСтолбец + 1;

		Если ТекСтолбец = 2 Тогда
			ТекСтрока  = ТекСтрока + 1;
			ТекСтолбец = 0;
		КонецЕсли;

		Если ТекСтрока = 4 Тогда
			ТекСтрока = 0;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

	КонецЦикла;
	
	
	ТабДокумент.ТолькоПросмотр = Истина;

	Возврат ТабДокумент;

КонецФункции // ПечатьБэйджаГрупповая()

// МАС - 25.09.2017 - №1844 - регламент "ЗагрузкаЗонДоставкиПоЗаказамИзВироут" --->> 
Процедура ЗагрузкаЗонДоставкиПоЗаказамИзВироут() Экспорт
	
	
	ТекВр = НачалоДня(ТекущаяДата());
	
	//Выборка = Справочники.РегиональныеТерминалы.Выбрать();
	//Пока Выборка.Следующий() Цикл
	
		//ТерминалДоставки = Выборка.Ссылка;
		ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж;
		
		ИДСессии = ПолучитьСессию(ТерминалДоставки); 
	
		Ресурс = "distribution-api/orders/getOrdersWithZone?sessionID=" + ИДСессии + "&date=" + Формат(ТекВр, "ДЛФ=D") + "&aocID=825";	
		
		Попытка	
			Результат = ВыполнитьPostЗапрос(Ресурс, , ТерминалДоставки);		
		Исключение
			// обработать исключение	
		КонецПопытки;
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("zoneId");
		ТЗ.Колонки.Добавить("zoneName");
		ТЗ.Колонки.Добавить("OrderID");
		ТЗ.Колонки.Добавить("Зона");
		ТЗ.Колонки.Добавить("Заказ");
		
		// обход результата
		Если Результат.OrdersWithZoneResponse.orders.order.Количество() Тогда
			
			Для каждого Стр Из Результат.OrdersWithZoneResponse.orders.order Цикл
				
				Попытка				
					Если ЗначениеЗаполнено(Стр.zoneId) Тогда			
						НСтр = ТЗ.Добавить();
						НСтр.zoneId   = Число(СтрЗаменить(Стр.zoneId, Символы.НПП, ""));
						НСтр.zoneName = Стр.zoneName;
						НСтр.OrderID  = Лев(СокрЛП(Стр.referenceNumber), 7);
					Иначе
						НСтр = ТЗ.Добавить();
					    НСтр.zoneId   = -5;
						НСтр.zoneName = "Пустая зона";
						НСтр.OrderID  = Лев(СокрЛП(Стр.referenceNumber), 7);			
					КонецЕсли;							
					
				Исключение
					НСтр = ТЗ.Добавить();
				    НСтр.zoneId   = -5;
					НСтр.zoneName = "Пустая зона";
					НСтр.OrderID  = Лев(СокрЛП(Стр.referenceNumber), 7);		
				КонецПопытки;					
			
			КонецЦикла;	
			
			СписокЗон = ТЗ.ВыгрузитьКолонку("zoneId");
			
			ЗапросЗоны = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			                          |	ЗоныПланированияVeeroute.Ссылка КАК Зона,
			                          |	ЗоныПланированияVeeroute.ИдентификаторЗоныVeeroute КАК zoneId
			                          |ИЗ
			                          |	Справочник.ЗоныПланированияVeeroute КАК ЗоныПланированияVeeroute
			                          |ГДЕ
			                          |	ЗоныПланированияVeeroute.ИдентификаторЗоныVeeroute В(&СписокЗон)
			                          |	И ЗоныПланированияVeeroute.ПометкаУдаления = ЛОЖЬ");
			ЗапросЗоны.УстановитьПараметр("СписокЗон", СписокЗон);
			ЗоныТЗ = ЗапросЗоны.Выполнить().Выгрузить();	
			
			Для каждого СтЗона Из ТЗ Цикл
				
				НайЗона = ЗоныТЗ.НайтиСтроки(Новый Структура("zoneId", СтЗона.zoneId));
				Если НайЗона.Количество() Тогда
					СтЗона.Зона = НайЗона[0].Зона;
				Иначе	
				    СтЗона.Зона = СоздатьЭлементСправочника_ЗоныПланированияVeeroute(СтЗона, ТерминалДоставки);
					НЗона = ЗоныТЗ.Добавить();
					НЗона.Зона = СтЗона.Зона;
					НЗона.zoneId = СтЗона.zoneId;
				КонецЕсли;		
				
			КонецЦикла;
			
			
			СписокЗаказов = ТЗ.ВыгрузитьКолонку("OrderID");	
			
			ЗапросЗаказы = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			                            |	РеализацияТоваровУслуг.Ссылка КАК Заказ,
			                            |	РеализацияТоваровУслуг.Номер КАК OrderID
			                            |ИЗ
			                            |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			                            |ГДЕ
			                            |	РеализацияТоваровУслуг.Номер В(&СписокЗаказов)
			                            |
			                            |ОБЪЕДИНИТЬ ВСЕ
			                            |
			                            |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                            |	ЗаборТовара.Ссылка,
			                            |	ЗаборТовара.Номер
			                            |ИЗ
			                            |	Документ.ЗаборТовара КАК ЗаборТовара
			                            |ГДЕ
			                            |	ЗаборТовара.Номер В(&СписокЗаказов)");
			ЗапросЗаказы.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
			ЗаказыТЗ = ЗапросЗаказы.Выполнить().Выгрузить();
						
			Для каждого СтЗак Из ЗаказыТЗ Цикл	
				СтЗак.OrderID = СокрЛП(СтЗак.OrderID);			
			КонецЦикла;	
			
			
			
			Для каждого Ст Из ТЗ Цикл

				НайЗаказ = ЗаказыТЗ.НайтиСтроки(Новый Структура("OrderID", Ст.OrderID));
				Если НайЗаказ.Количество() Тогда
					Ст.Заказ = НайЗаказ[0].Заказ;
				Иначе	
				    Ст.Заказ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
				КонецЕсли;
								
				
				//Запись в РС НазначенныеЗоныПланированияVeeroute
				Если ЗначениеЗаполнено(Ст.Заказ) Тогда
					
					Набор = РегистрыСведений.НазначенныеЗоныПланированияVeeroute.СоздатьНаборЗаписей(); 
					Набор.Отбор.Заказ.Установить(Ст.Заказ);
					Набор.Отбор.Период.Установить(ТекВр);
					Набор.Прочитать();
					Набор.Очистить();
					
					НЗапись = Набор.Добавить();
					НЗапись.Период = ТекВр;
					НЗапись.Заказ = Ст.Заказ;
					НЗапись.ЗонаПланирования = Ст.Зона;
					
					Набор.Записать();			
				
				КонецЕсли;	
				
				
			КонецЦикла;
		
		КонецЕсли;
			
	//КонецЦикла;

	
	
КонецПроцедуры


Функция ВыполнитьPostЗапрос(Ресурс, СтрокаТекста = Неопределено, ТерминалДоставки);
		
	
	Если Не ЗначениеЗаполнено(ТерминалДоставки.vr_АдресБоевогоСервера) Тогда
		Сервер = "prof.veeroute.com";
	Иначе
		Сервер = ТерминалДоставки.vr_АдресБоевогоСервера;
	КонецеСли;	
		
	ОбщийРесурс = "/rest/2/";
	
	РесурсНаСервере = ОбщийРесурс + Ресурс;
	
	
	Попытка
		Соединение = Новый HTTPСоединение(Сервер, , , , , 600);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	
	//Формируем заголовок POST-запроса.
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/xml");
	
	
	
	//Создаём файл отправки - содержимое POST-запроса. 
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("xml");
	Если СтрокаТекста = Неопределено Тогда
		Запрос = Новый HTTPЗапрос(РесурсНаСервере);
		Запрос.УстановитьТелоИзСтроки(""); 
	Иначе
		Запрос = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовокHTTP);
		Запрос.УстановитьТелоИзСтроки(СтрокаТекста, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать); 
	КонецеСли;		
	
	Соединение.ОтправитьДляОбработки(Запрос, ИмяФайлаРезультата);
	Соединение = Неопределено;
	
	
	Т = Новый ТекстовыйДокумент;
	Т.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
	Стр_ = Т.ПолучитьТекст();
	Стр_ = СтрЗаменить(Стр_, """АвиаПарк""", "АвиаПарк");
	Стр_ = СтрЗаменить(Стр_, "&laquo", "&#1042");
	Стр_ = СтрЗаменить(Стр_, "&raquo", "&#1042");
	Стр_ = СтрЗаменить(Стр_, "&nbsp", "&#1042");
	
	Т.УстановитьТекст(Стр_);
	Т.Записать(ИмяФайлаРезультата);
	
	
	ФайлРезультата = Новый ЧтениеXML();
	ФайлРезультата.ОткрытьФайл(ИмяФайлаРезультата);
	Фабрика = Новый ФабрикаXDTO;
	Попытка
		Результат = Фабрика.ПрочитатьXML(ФайлРезультата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьСессию(ТерминалДоставки)
		
	Ресурс = "authentication/createSession?accountID=" + СокрЛП(ТерминалДоставки.vr_АккаунтБоевогоСервера) + "&user=" + СокрЛП(ТерминалДоставки.vr_БоевойСерверИмяПользователя) + "&password=" + СокрЛП(ТерминалДоставки.vr_БоевойСерверПарольПользователя);
			
	ПолученныйОбъект = ВыполнитьPostЗапрос(Ресурс, , ТерминалДоставки);
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПолученныйОбъект.authResponse.sessionID;
	КонецеСли;	
	
КонецФункции


Функция СоздатьЭлементСправочника_ЗоныПланированияVeeroute(Ст, ТерминалДоставки)

	НЭлемент = Справочники.ЗоныПланированияVeeroute.СоздатьЭлемент();
	НЭлемент.Наименование = Ст.zoneName;
	НЭлемент.ИдентификаторЗоныVeeroute = Ст.zoneId;
	НЭлемент.Владелец = ТерминалДоставки;
	НЭлемент.Записать();

	Возврат НЭлемент.Ссылка;
	
КонецФункции // ()
// <<--- МАС 


// МАС - 27.10.2017 - №1992 - регламент проверки корректности документов Рейс --->> 
Процедура ПроверкаКорректностиРейсов(Терминал = 1, ДатаПроверки = Неопределено) Экспорт

	
	ТерминалСсылка = Справочники.РегиональныеТерминалы.НайтиПоКоду(Терминал);
	
	ЕстьОшибки = Ложь;
	ОписаниеПроблем = "";
	Если ДатаПроверки = Неопределено Тогда	
		ДатаПроверки = НачалоДня(ТекущаяДата());		
	КонецЕсли;
	
	
	
	//	Что надо проверять:
	//1. Ко всем проведенным документам рейсам привязан экипаж (авто-водитель)
	//2. Нет задублированных проведенных рейсов с одинаковым ТраснпортомВероут
	//3. Дубли заказов в разных рейсах.
	//4. Несколько документов Рейс по одному и тому же РейсМестнойДоставки
	//5. Нет дублей рейсов с одинаковым привязанным Транспортом
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Рейс.Ссылка КАК Ссылка,
	                      |	Рейс.Транспорт КАК ТранспортВероут,
	                      |	Рейс.РейсМестнойДоставки КАК РейсМестнойДоставки,
	                      |	Рейс.ДатаРейса КАК ДатаРейса
	                      |ПОМЕСТИТЬ ВТ_Рейсы
	                      |ИЗ
	                      |	Документ.Рейс КАК Рейс
	                      |ГДЕ
	                      |	Рейс.ДатаРейса МЕЖДУ &Дата1 И &Дата2
	                      |	И Рейс.ТерминалДоставки = &ТерминалДоставки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Рейсы.Ссылка КАК Ссылка,
	                      |	ВТ_Рейсы.РейсМестнойДоставки КАК РейсМестнойДоставки,
	                      |	ПривязкаМашинКРейсамСрезПоследних.Транспорт КАК Транспорт,
	                      |	ПривязкаМашинКРейсамСрезПоследних.Водитель КАК Водитель,
	                      |	ВТ_Рейсы.ДатаРейса КАК ДатаРейса,
	                      |	ВТ_Рейсы.ТранспортВероут КАК ТранспортВероут
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	ВТ_Рейсы КАК ВТ_Рейсы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних КАК ПривязкаМашинКРейсамСрезПоследних
	                      |		ПО ВТ_Рейсы.Ссылка = ПривязкаМашинКРейсамСрезПоследних.Рейс
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.ТранспортВероут КАК ТранспортВероут,
	                      |	СУММА(1) КАК Кол
	                      |ПОМЕСТИТЬ ВТ_ДублиТранспортВероут
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |ГДЕ
	                      |	ВТ.Ссылка.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.ТранспортВероут
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Транспорт КАК Транспорт,
	                      |	СУММА(1) КАК Кол,
	                      |	ВТ.Ссылка КАК Рейс
	                      |ПОМЕСТИТЬ ВТ_ДублиТранспорт
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |ГДЕ
	                      |	ВТ.Ссылка.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.Транспорт,
	                      |	ВТ.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.РейсМестнойДоставки КАК РейсМестнойДоставки,
	                      |	СУММА(1) КАК Кол
	                      |ПОМЕСТИТЬ ВТ_ЗадвоениеПривязкиРейсовМестнойДоставки
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |ГДЕ
	                      |	ВТ.РейсМестнойДоставки.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.РейсМестнойДоставки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ДублиТранспорт.Транспорт КАК ОбъектПроверки,
	                      |	""ДублиТранспорт"" КАК ЗадвоенныйРеквизит,
	                      |	ВТ_ДублиТранспорт.Рейс КАК Рейс
	                      |ПОМЕСТИТЬ ВТ_Итог
	                      |ИЗ
	                      |	ВТ_ДублиТранспорт КАК ВТ_ДублиТранспорт
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	                      |		ПО ВТ_ДублиТранспорт.Транспорт = ВТ.Транспорт
	                      |ГДЕ
	                      |	ВТ_ДублиТранспорт.Кол > 1
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ_ЗадвоениеПривязкиРейсовМестнойДоставки.РейсМестнойДоставки,
	                      |	""ДублиРейсМестнойДоставки"",
	                      |	ВТ.Ссылка
	                      |ИЗ
	                      |	ВТ_ЗадвоениеПривязкиРейсовМестнойДоставки КАК ВТ_ЗадвоениеПривязкиРейсовМестнойДоставки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	                      |		ПО ВТ_ЗадвоениеПривязкиРейсовМестнойДоставки.РейсМестнойДоставки = ВТ.РейсМестнойДоставки
	                      |ГДЕ
	                      |	ВТ_ЗадвоениеПривязкиРейсовМестнойДоставки.Кол > 1
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РейсЗаказы.Заказ КАК Заказ,
	                      |	СУММА(1) КАК Кол
	                      |ПОМЕСТИТЬ ВТ_ДублиЗаказов
	                      |ИЗ
	                      |	ВТ_Рейсы КАК ВТ_Рейсы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	                      |		ПО ВТ_Рейсы.Ссылка = РейсЗаказы.Ссылка
	                      |ГДЕ
	                      |	РейсЗаказы.УдаленИзРейса = ЛОЖЬ
	                      |	И РейсЗаказы.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_Рейсы.Ссылка
	                      |			ИЗ
	                      |				ВТ_Рейсы КАК ВТ_Рейсы)
	                      |	И ВТ_Рейсы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РейсЗаказы.Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Ссылка КАК Рейс,
	                      |	ВТ_Итог.ЗадвоенныйРеквизит КАК Проблема,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_Итог.ЗадвоенныйРеквизит = ""ДублиТранспорт""
	                      |			ТОГДА ВТ.Транспорт.Наименование
	                      |		КОГДА ВТ_Итог.ЗадвоенныйРеквизит = ""ДублиТранспортВероут""
	                      |			ТОГДА ВТ.ТранспортВероут.Представление
	                      |		КОГДА ВТ_Итог.ЗадвоенныйРеквизит = ""ДублиРейсМестнойДоставки""
	                      |			ТОГДА ВТ.РейсМестнойДоставки.Номер
	                      |	КОНЕЦ КАК ОбъектЗадвоения,
	                      |	NULL КАК ОшибкаПривязки,
	                      |	ВТ.Ссылка.Номер КАК Номер,
	                      |	ВТ.Ссылка.Дата КАК Дата,
	                      |	NULL КАК ТипЗаказа
	                      |ИЗ
	                      |	ВТ_Итог КАК ВТ_Итог
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	                      |		ПО ВТ_Итог.Рейс = ВТ.Ссылка
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ.Ссылка,
	                      |	""ОшибкаПривязки"",
	                      |	NULL,
	                      |	ВЫБОР
	                      |		КОГДА ВТ.Транспорт ЕСТЬ NULL
	                      |			ТОГДА ""НетТранспорта""
	                      |		КОГДА ВТ.Водитель ЕСТЬ NULL
	                      |			ТОГДА ""НетВодителя""
	                      |		ИНАЧЕ NULL
	                      |	КОНЕЦ,
	                      |	ВТ.Ссылка.Номер,
	                      |	ВТ.Ссылка.Дата,
	                      |	NULL
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |ГДЕ
	                      |	(ВТ.Транспорт ЕСТЬ NULL
	                      |			ИЛИ ВТ.Водитель ЕСТЬ NULL)
	                      |	И ВТ.Ссылка.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РейсЗаказы.Ссылка,
	                      |	""ДублиЗаказа"",
	                      |	ВТ_ДублиЗаказов.Заказ.Номер,
	                      |	NULL,
	                      |	РейсЗаказы.Ссылка.Номер,
	                      |	РейсЗаказы.Ссылка.Дата,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ДублиЗаказов.Заказ ССЫЛКА Документ.РеализацияТоваровУслуг
	                      |			ТОГДА ""Реализация № ""
	                      |		КОГДА ВТ_ДублиЗаказов.Заказ ССЫЛКА Документ.ЗаборТовара
	                      |			ТОГДА ""Забор № ""
	                      |	КОНЕЦ
	                      |ИЗ
	                      |	ВТ_ДублиЗаказов КАК ВТ_ДублиЗаказов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	                      |		ПО ВТ_ДублиЗаказов.Заказ = РейсЗаказы.Заказ
	                      |ГДЕ
	                      |	ВТ_ДублиЗаказов.Кол > 1
	                      |	И РейсЗаказы.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_Рейсы.Ссылка
	                      |			ИЗ
	                      |				ВТ_Рейсы КАК ВТ_Рейсы)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Проблема,
	                      |	ОбъектЗадвоения
	                      |ИТОГИ ПО
	                      |	Проблема,
	                      |	ОбъектЗадвоения");
	Запрос.УстановитьПараметр("Дата1", ДатаПроверки);
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаПроверки));
	Запрос.УстановитьПараметр("ТерминалДоставки", ТерминалСсылка);
	РезЗапроса = Запрос.Выполнить();	
	
	Если НЕ РезЗапроса.Пустой() Тогда
		
		ТекПроблема = Неопределено;
		ЕстьОшибки = Истина;	
		НуженДвойнойПереносСтроки = Ложь;
		Рез_ГруппаПроблема = РезЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		
		Пока Рез_ГруппаПроблема.Следующий() Цикл			
					
			Если НЕ ЗначениеЗаполнено(ТекПроблема) Тогда			
				ТекПроблема = Рез_ГруппаПроблема.Проблема;	
				ОписаниеПроблем = ОписаниеПроблем + ТекПроблема + ": " + Символы.ПС + Символы.ПС;
			Иначе		
				Если ТекПроблема <> Рез_ГруппаПроблема.Проблема Тогда			
					НуженДвойнойПереносСтроки = Истина;				
				    ТекПроблема = Рез_ГруппаПроблема.Проблема;
					ОписаниеПроблем = ОписаниеПроблем + Символы.ПС + ТекПроблема + ": " + Символы.ПС + Символы.ПС;
				КонецЕсли;		
			КонецЕсли;
			
			
		    Рез_ГруппаОбъект = Рез_ГруппаПроблема.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Рез_ГруппаОбъект.Следующий() Цикл
			
				Если ТекПроблема = "ДублиТранспорт" Тогда			
					
					ОписаниеПроблем = ОписаниеПроблем + "Обнаружены дубли Транспорта " + Рез_ГруппаОбъект.ОбъектЗадвоения + " по рейсам: " + Символы.ПС;		
					Рез_Детальные = Рез_ГруппаОбъект.Выбрать();		
					Пока Рез_Детальные.Следующий() Цикл			
						ОписаниеПроблем = ОписаниеПроблем + Рез_Детальные.Номер + Символы.ПС;					
					КонецЦикла;
					
				//ИначеЕсли ТекПроблема = "ДублиТранспортВероут" Тогда			
				//	
				//	ОписаниеПроблем = ОписаниеПроблем + "Обнаружены дубли Транспорта Вероут " + Рез_ГруппаОбъект.ОбъектЗадвоения + " по рейсам: " + Символы.ПС;
				//	Рез_Детальные = Рез_ГруппаОбъект.Выбрать();
				//	Пока Рез_Детальные.Следующий() Цикл				
				//		ОписаниеПроблем = ОписаниеПроблем + Рез_Детальные.Номер + Символы.ПС;						
				//	КонецЦикла;
					
				ИначеЕсли ТекПроблема = "ДублиРейсМестнойДоставки" Тогда		
					
					ОписаниеПроблем = ОписаниеПроблем + "Обнаружены дубли РейсаМестнойДоставки " + Рез_ГруппаОбъект.ОбъектЗадвоения + " по рейсам: " + Символы.ПС;
					Рез_Детальные = Рез_ГруппаОбъект.Выбрать();
					Пока Рез_Детальные.Следующий() Цикл				
						ОписаниеПроблем = ОписаниеПроблем + Рез_Детальные.Номер + Символы.ПС;						
					КонецЦикла;
					
				ИначеЕсли ТекПроблема = "ДублиЗаказа" Тогда		
						
					Рез_Детальные = Рез_ГруппаОбъект.Выбрать();
					ОписаниеБыло = Ложь;
					
					Пока Рез_Детальные.Следующий() Цикл			
						Если НЕ ОписаниеБыло Тогда
						    ОписаниеПроблем = ОписаниеПроблем + "Обнаружены дубли: " + Рез_Детальные.ТипЗаказа + СокрЛП(Строка(Рез_Детальные.ОбъектЗадвоения)) + " по рейсам: " + Символы.ПС;
							ОписаниеБыло = Истина;
						КонецЕсли;
						ОписаниеПроблем = ОписаниеПроблем + Рез_Детальные.Номер + Символы.ПС;					
					КонецЦикла;			
					
				ИначеЕсли ТекПроблема = "ОшибкаПривязки" Тогда				
					
					Рез_Детальные = Рез_ГруппаОбъект.Выбрать();
					Если Рез_Детальные.Следующий() Тогда			
						Если Рез_Детальные.ОшибкаПривязки = "НетТранспорта" Тогда	
							ОписаниеПроблем = ОписаниеПроблем + "Не привязан транспорт по рейсу: " + Рез_Детальные.Номер + Символы.ПС;				
						ИначеЕсли Рез_Детальные.ОшибкаПривязки = "НетВодителя" Тогда			
							ОписаниеПроблем = ОписаниеПроблем + "Не привязан водитель по рейсу: " + Рез_Детальные.Номер + Символы.ПС;			
						КонецЕсли;									
					КонецЕсли;								
					
				КонецЕсли;
				
			КонецЦикла;
			
	
			Если НуженДвойнойПереносСтроки Тогда
				ОписаниеПроблем = ОписаниеПроблем + Символы.ПС + Символы.ПС;	
			Иначе
				ОписаниеПроблем = ОписаниеПроблем + Символы.ПС;	
			КонецЕсли;			
			НуженДвойнойПереносСтроки = Ложь;
			
		КонецЦикла;
		
	Иначе		
	КонецЕсли;
		

	ТемаПисьма = "Маршрутизация на " + Формат(ДатаПроверки, "ДЛФ=DD") + " (" + ТерминалСсылка.Город + ")";
	
	Если ЕстьОшибки Тогда	
		ТекстПисьма = "Обнаружены ошибки: " + Символы.ПС + Символы.ПС + ОписаниеПроблем;	
	Иначе	
		ТекстПисьма = "Ошибок в маршрутизации не обнаружено";			
	КонецЕсли;
	
	Мас = ОбработкаСобытийИУведомленийСервер.ВернутьМассивАдресатовПоСобытию(Перечисления.ВидыСобытийУведомленияАбонентов.Регламент_ПроверкаКорректностиРейсов, ТерминалСсылка);
	
	lem.ОтправитьСообщение(Мас, ТемаПисьма, ТекстПисьма, , "Логистическая компания ""Стриж""", , ТипТекстаПочтовогоСообщения.ПростойТекст);
	

КонецПроцедуры
// <<--- МАС 


// МАС - 07.11.2017 - №2006 - Регламент проверки создания документов ДанныеЗаказаВодителя --->> 
Процедура ПроверкаЗагрузкиДанныхОтВодителя() Экспорт

	ТекВр = ТекущаяДата();
	ДатаПроверки = ТекВр - 60 * 10;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ДанныеЗаказаВодителя.Ссылка КАК Ссылка,
	                      |	ДанныеЗаказаВодителя.Дата КАК Дата
	                      |ИЗ
	                      |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");	
	Рез = Запрос.Выполнить().Выбрать();
	Рез.Следующий();
	
	ПослДата = Рез.Дата;
		
	Если ПослДата < ДатаПроверки Тогда
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	МылоОдминов.Мыло Как Мыло
		|ИЗ
		|	РегистрСведений.МылоОдминов КАК МылоОдминов";
		Стр = СтрокаСоединенияИнформационнойБазы();
		Таб = Зап.Выполнить().Выгрузить();			
		СпПол = Таб.ВыгрузитьКолонку("Мыло");
	
		lem.ОтправитьСообщение(СпПол, "Проверка состояния загрузки данных от водителя", "Не создаются документы ДанныеЗаказаВодителя с " + Формат(ПослДата, "ДЛФ=DDT"));			
	
	КонецЕсли;
	
		

КонецПроцедуры
// <<--- МАС 


Функция НайтиАПППоВходящемуНомеру(registerIDImport, Контрагент) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |	ПриходЗаказовНаСклад.Ссылка КАК Ссылка
        |ИЗ
        |	Документ.ПриходЗаказовНаСклад КАК ПриходЗаказовНаСклад
        |ГДЕ
        |	ПриходЗаказовНаСклад.НомерВходящегоДокумента = &НомерВходящегоДокумента
        |	И ПриходЗаказовНаСклад.Контрагент = &Контрагент";
    
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", registerIDImport);
    
    Рез = Запрос.Выполнить().Выбрать();
    
	Если Рез.Следующий() Тогда	
		Возврат Рез.Ссылка; 		
	Иначе	
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции // ()

Функция ПользователюВключенаРаботаСВозвратами() Экспорт
	Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ИнтерфейсРаботаСВозвратами");
КонецФункции

// Задача № 2813
// Создает новый массив параметров или добавляет в существующий параметры заказа для 
// ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке для setOrderStatus
// Параметры:
//   НомерЗаказа - Строка - Номер заказа (OrderId)
//   КодСтатуса - Строка - Код статуса заказа (StatusId)
//   Комментарий - Строка - Комментарий (Comment)
//   ПримечаниеДоставки - Строка - Примечание доставки (DeliveryNote) - не обязательный
//   ДатаСобытия - Дата - Дата события (DateEvent)  - не обязательный
//   МассивПараметров - Массив - массив параметров к отправке
//	 ДопПараметры - Структура - Структура, содержащая дополнительные параметры статуса (например Initiator)
// Возвращаемое значение:
//   Массив - массив параметров заказов к отправке в setOrderStatus
Функция ДобавитьПараметрыЗаказаДляУстановкиСтатуса(НомерЗаказа, КодСтатуса, Комментарий = "", 
	ПримечаниеДоставки = Неопределено, ДатаСобытия = Неопределено, МассивПараметров = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если  МассивПараметров = Неопределено Тогда
		МассивПараметров = Новый Массив;
	КонецЕсли;	
	
	Попытка
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("OrderId", Число(НомерЗаказа));
		ПараметрыЗапроса.Вставить("StatusId", Число(КодСтатуса));
		ПараметрыЗапроса.Вставить("Comment", СокрЛП(Комментарий));
		Если НЕ ПримечаниеДоставки = Неопределено Тогда
			ПараметрыЗапроса.Вставить("DeliveryNote", СокрЛП(ПримечаниеДоставки));
		КонецЕсли;
		Если Не ДатаСобытия = Неопределено Тогда
			ПараметрыЗапроса.Вставить("DateEvent", ДатаСобытия);
		КонецЕсли;
		
		Если ТипЗНЧ(ДопПараметры) = Тип("Структура") Тогда
			Для Каждого ДопПараметр Из ДопПараметры Цикл
				ПараметрыЗапроса.Вставить(ДопПараметр.Ключ, ДопПараметр.Значение);
			КонецЦикла;	
		КонецЕсли;
		
		МассивПараметров.Добавить(ПараметрыЗапроса);	
	Исключение
		// "Невозможное исключение" при приведении номера заказа и кода статуса
	Конецпопытки;
	
	Возврат МассивПараметров;
	
КонецФункции	

//Создает или дополняет структуру, содержащую дополнительные параметры статуса заказа
// Параметры:
//	ИмяПараметра - Строка - Имя дополнительного параметра
//	ЗначениеПараметра - Строка, Число, Дата - Значение дополнительного параметра, должно соответствовать типу в админке, если не заполнен, то параметр не добавляется
//	ДополнительныеПараметры - Структура - структура доп.параметров, которые необходимо дополнить
// Возвращаемое значение:
//	Структура - Структура дополнительных параметров
Функция ДобавитьДополнительныйПараметрСтатуса(ИмяПараметра, ЗначениеПараметра, ДополнительныеПараметры = Неопределено, ПередатьНольЗначением = Ложь) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	
	
	//Если ИмяПараметра = "ProcessingTerminal" Тогда //Отключить при наличии в боевой обновления
	//	Возврат ДополнительныеПараметры;
	//КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		
		ДополнительныеПараметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		
	Иначе
		
		Если ПередатьНольЗначением И ТипЗНЧ(ЗначениеПараметра)= Тип("Число") Тогда
			
			ДополнительныеПараметры.Вставить(ИмяПараметра, 0);

		КонецЕсли;	
		
	Конецесли;

	Возврат ДополнительныеПараметры;
	
КонецФункции

// Проверяет МассивСтатусов и отправляет данные в ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке
// для setOrderStatus (по умолчанию), дополнено SetAcceptedPlaces в рамках 2943, дополнено SetOrdersFinalStatus в рамках 2586 
// Параметры:
//   МассивПараметров - Массив - массив параметров к отправке
// Возвращаемое значение:
//   Массив - СтруктураВозврата из ИнтеграцияСАдминкойWEBСервис либо собственная структуру с сообщением об отправке статусов
Функция ОтправитьМассивСтатусовЗаказов(МассивПараметров, ИмяМетода = "SetOrderStatus", ФайлДляКонтроля = Неопределено, ТолькоСохранитьФайл = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура("Успешно, ОписаниеОшибки", Ложь, "Нет данных для отправки");
	
	СопоставлениеМетодов = Новый Структура;
	СопоставлениеМетодов.Вставить("SetOrderStatus", новый Структура("ИмяМассива, ВидЗапроса","ordersStatuses", Перечисления.ВидыЗапросовWEBСервис.SetOrdersStatusResult));
	СопоставлениеМетодов.Вставить("SetAcceptedPlaces", новый Структура("ИмяМассива, ВидЗапроса","acceptedPlaces", Перечисления.ВидыЗапросовWEBСервис.SetAcceptedPlacesResult));
	СопоставлениеМетодов.Вставить("SetOrdersFinalStatus", новый Структура("ИмяМассива, ВидЗапроса","orders", Перечисления.ВидыЗапросовWEBСервис.SetOrdersFinalStatusResult)); // Задача № 2586

	Если ТипЗНЧ(МассивПараметров) = Тип("Массив") Тогда
		
		Если МассивПараметров.Количество() > 0 Тогда
			
			ИмяМассива = СопоставлениеМетодов[ИмяМетода].ИмяМассива;
			ВидЗапроса = СопоставлениеМетодов[ИмяМетода].ВидЗапроса;

			ПараметрыЗапроса = Новый Структура;		
			ПараметрыЗапроса.Вставить(ИмяМассива, МассивПараметров);
			
			СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(ВидЗапроса, ПараметрыЗапроса, ФайлДляКонтроля, ТолькоСохранитьФайл);
			
		КонецЕсли;
		
	КонецЕсли;
			
	Возврат СтруктураВозврата;
	
КонецФункции	
// Задача № 2813

// Задача № 2586 
Функция ДобавитьФинальныйСтатусКПакету(orderID, statusID, comment,
	Who = Неопределено, 
	CompleteDate = Неопределено, 
	ServiceDc = Неопределено, 
	ServiceDCclean = Неопределено, 
	IsRefusal = Неопределено, 
	ReasonRefusal = Неопределено, 
	DeliveryPrice = Неопределено, 
	PayType = Неопределено, 
	ReasonRefusalId = Неопределено, 
	TotalCost = Неопределено, 
	CloseFlag = Неопределено, 
	ProcessingTerminal = Неопределено,
	ItemsPrice = Неопределено,
	МассивФинальныхСтатусов = Неопределено,
	reasonId = Неопределено,
	FinalStatusId = Неопределено,
	DistBeyondHighway = Неопределено) Экспорт
	
	Если МассивФинальныхСтатусов = Неопределено Тогда
		МассивФинальныхСтатусов = Новый Массив;
	КонецЕсли;	
	
	ДопПараметрыСтатуса = Неопределено; 
	
	ДопПараметрыСтатуса = ?(Не Who = Неопределено, 				  mas.ДобавитьДополнительныйПараметрСтатуса("Who", СокрЛП(Who),							ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не CompleteDate = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("CompleteDate", CompleteDate, 				ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ServiceDc = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("ServiceDc", serviceDC, 					ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ServiceDCclean = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("ServiceDCclean", serviceDCclean, 			ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не IsRefusal = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("IsRefusal", IsRefusal, 					ДопПараметрыСтатуса, Истина), 	ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ReasonRefusal = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("ReasonRefusal", ReasonRefusal, 			ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не DeliveryPrice = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("DeliveryPrice", deliveryPrice, 			ДопПараметрыСтатуса, Истина), 	ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не PayType = Неопределено, 			  mas.ДобавитьДополнительныйПараметрСтатуса("PayType", payType, 						ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ReasonRefusalId = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("ReasonRefusalId", ReasonRefusalID, 		ДопПараметрыСтатуса, Истина), 	ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не TotalCost = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("TotalCost", TotalCost, 					ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не CloseFlag = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("CloseFlag", CloseFlag, 					ДопПараметрыСтатуса, Истина), 	ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ProcessingTerminal = Неопределено, mas.ДобавитьДополнительныйПараметрСтатуса("ProcessingTerminal", ProcessingTerminal, 	ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ItemsPrice = Неопределено, 	  	  mas.ДобавитьДополнительныйПараметрСтатуса("ItemsPrice", ItemsPrice, 					ДопПараметрыСтатуса, Истина), 	ДопПараметрыСтатуса);							
	
	//CeHbKA #3225
	ДопПараметрыСтатуса = ?(Не reasonId = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("ReasonId", reasonId, 						ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	//CeHbKA #3225
	
	//Задача № 3241 
	ДопПараметрыСтатуса = ?(Не FinalStatusId = Неопределено,	  mas.ДобавитьДополнительныйПараметрСтатуса("FinalStatusId", FinalStatusId, 			ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	//Задача № 3241
	
	//Асеев 15.03.2024 (Задача № 3163)>>>
	ДопПараметрыСтатуса = ?(Не DistBeyondHighway = Неопределено,  mas.ДобавитьДополнительныйПараметрСтатуса("DistBeyondHighway", DistBeyondHighway, 	ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	//Асеев 15.03.2024 (Задача № 3163)<<<
	
	МассивФинальныхСтатусов = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(orderID, statusID, comment,,,МассивФинальныхСтатусов,ДопПараметрыСтатуса);	
	
	//МассивФинальныхСтатусов.Добавить(ПараметрыСтатуса);
	
	Возврат МассивФинальныхСтатусов;
	
КонецФункции	

Функция ОтправитьФинальныйСтатусВАдминку(orderID, statusID, comment,
	Who = Неопределено, 
	CompleteDate = Неопределено, 
	ServiceDc = Неопределено, 
	ServiceDCclean = Неопределено, 
	IsRefusal = Неопределено, 
	ReasonRefusal = Неопределено, 
	DeliveryPrice = Неопределено, 
	PayType = Неопределено, 
	ReasonRefusalId = Неопределено, 
	TotalCost = Неопределено, 
	CloseFlag = Неопределено, 
	ProcessingTerminal = Неопределено,
	ItemsPrice = Неопределено,
	ФайлДляКонтроля = Неопределено) Экспорт
	
	ДопПараметрыСтатуса = Неопределено; 
	
	ДопПараметрыСтатуса = ?(Не Who = Неопределено, 				  mas.ДобавитьДополнительныйПараметрСтатуса("Who", СокрЛП(Who),							ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не CompleteDate = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("CompleteDate", CompleteDate, 				ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ServiceDc = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("ServiceDc", serviceDC, 					ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ServiceDCclean = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("ServiceDCclean", serviceDCclean, 			ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не IsRefusal = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("IsRefusal", IsRefusal, 					ДопПараметрыСтатуса, Истина), 	ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ReasonRefusal = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("ReasonRefusal", ReasonRefusal, 			ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не DeliveryPrice = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("DeliveryPrice", deliveryPrice, 			ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не PayType = Неопределено, 			  mas.ДобавитьДополнительныйПараметрСтатуса("PayType", payType, 						ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ReasonRefusalId = Неопределено, 	  mas.ДобавитьДополнительныйПараметрСтатуса("ReasonRefusalId", ReasonRefusalID, 		ДопПараметрыСтатуса, Истина), 	ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не TotalCost = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("TotalCost", TotalCost, 					ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не CloseFlag = Неопределено, 		  mas.ДобавитьДополнительныйПараметрСтатуса("CloseFlag", CloseFlag, 					ДопПараметрыСтатуса, Истина), 	ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ProcessingTerminal = Неопределено, mas.ДобавитьДополнительныйПараметрСтатуса("ProcessingTerminal", ProcessingTerminal, 	ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);
	ДопПараметрыСтатуса = ?(Не ItemsPrice = Неопределено, 	  	  mas.ДобавитьДополнительныйПараметрСтатуса("ItemsPrice", ItemsPrice, 					ДопПараметрыСтатуса), 			ДопПараметрыСтатуса);						
	
	//Альтернативное заполнение параметров
	//ДопПараметрыСтатуса = Новый Структура("Who, CompleteDate, ServiceDc, ServiceDCclean,IsRefusal, ReasonRefusal,DeliveryPrice, PayType, ReasonRefusalId, TotalCost, CloseFlag, ProcessingTerminal, ItemsPrice",
	//										 who, CompleteDate, serviceDC, ServiceDCclean, IsRefusal, ReasonRefusal,deliveryPrice, payType, ReasonRefusalID, TotalCost, CloseFlag, ProcessingTerminal, ItemsPrice);
	
	ПараметрыСтатуса = mas.ДобавитьПараметрыЗаказаДляУстановкиСтатуса(orderID, statusID, comment,,,,ДопПараметрыСтатуса);
	Возврат mas.ОтправитьМассивСтатусовЗаказов(ПараметрыСтатуса, "SetOrdersFinalStatus",ФайлДляКонтроля); 							
	
КонецФункции	
// Задача № 2586

// Задача № 3451
Функция ДобавитьИсключенныеШтрихкодыЗаказа(Заказ, МассивШтрихкодов, МассивЗаказов = Неопределено) Экспорт
	
	Если МассивЗаказов = неопределено Тогда
		
		МассивЗаказов = Новый Массив;
		
	КонецЕсли;	
	
	OrderId = Число(СокрЛП(Заказ.Номер));
	ExcludedBarcodes = Новый Массив;
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		
		ExcludedBarcodes.Добавить(Новый Структура("Barcode", Строка(Штрихкод)));
		
	КонецЦикла;	
	
	СтруктураЗаказа = Новый Структура("OrderId, ExcludedBarcodes", OrderId, ExcludedBarcodes);
	МассивЗаказов.Добавить(СтруктураЗаказа);
	
	Возврат МассивЗаказов;
	
КонецФункции
// Задача № 3451
