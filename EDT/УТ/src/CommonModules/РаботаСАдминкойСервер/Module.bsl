Процедура ОчиститьТранспортПоЗаказу(НомерЗаказа) Экспорт
    Соединение = Евген.СоздатьПодключениеКИнтернетМагазину();
    евген.ЗапросКИнтернетМагазину("
	|EXEC p1c_removeCarriageFromOrder " + Формат(НомерЗаказа, "ЧГ=") + "
    |EXEC mp_saveOrderHistory " + Формат(НомерЗаказа, "ЧГ="), Соединение);
КонецПроцедуры

Процедура РегламентОбработкаОшибокSQL() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ОшибкиSQL.ТекстЗапроса КАК ТекстЗапроса,
	            |	ОшибкиSQL.Период КАК Период,
	            |	ОшибкиSQL.ИсточникДанных КАК ИсточникДанных,
	            |	ОшибкиSQL.ТипОперации КАК ТипОперации,
	            |	ОшибкиSQL.Ошибка КАК Ошибка
	            |ИЗ
	            |	РегистрСведений.ОшибкиSQL КАК ОшибкиSQL
	            |ГДЕ
	            |	ОшибкиSQL.ОшибкаСвязанаСДоступностью = ИСТИНА
	            |	И ОшибкиSQL.ОшибкаОбработанаРегламентом = ЛОЖЬ
	            |	И ОшибкиSQL.Период МЕЖДУ &НачДата И &КонДата";
	ТекД = ТекущаяДата();
	
	Зап.УстановитьПараметр("НачДата", ТекД - 86400);
	Зап.УстановитьПараметр("КонДата", ТекД);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Подкл = Евген.СоздатьПодключениеКИнтернетМагазину();
	
	МассивОбработанныхОшибок = Новый Массив;
	
	Пока Выб.Следующий() Цикл
		Евген.ЗапросКИнтернетМагазину(Выб.ТекстЗапроса, Подкл,,Истина);
		
		Наб = РегистрыСведений.ОшибкиSQL.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(Выб.Период);
		Наб.Отбор.ИсточникДанных.Установить(Выб.ИсточникДанных);
		Наб.Отбор.ТипОперации.Установить(Выб.ТипОперации);
		
		Наб.Прочитать();
		
		Для Сч = 0 По Наб.Количество() - 1 Цикл
			Запись = Наб[Сч];
			Если Запись.ТекстЗапроса = Выб.ТекстЗапроса И Запись.Ошибка = Выб.Ошибка тогда
				Запись.ОшибкаОбработанаРегламентом = Истина;
				Запись.ДатаОбработкиРегламентом = ТекущаяДата();
			КонецеСли;	
		КонецЦикла;	
		
		Наб.УстановитьКомментарийВерсииИсторииДанных("Обработка ошибки SQL регламентом");
		Наб.Записать(Истина);
		
		МассивОбработанныхОшибок.Добавить(Выб.ТекстЗапроса);
	КонецЦикла;	
	
	Если МассивОбработанныхОшибок.Количество() > 0 Тогда
		ТекстПисьма = "Количество обработанных ошибок: " + Формат(МассивОбработанныхОшибок.Количество(), "") + Символы.ПС;
		для Сч = 0 По МассивОбработанныхОшибок.Количество() - 1 Цикл
			ТекстПисьма = ТекстПисьма + Символы.ПС + "-----------------------------------------------" + Символы.ПС;
			ТекстПисьма = ТекстПисьма + МассивОбработанныхОшибок[Сч];
		КонецЦикла;	
		
		lem.ОтправитьНормальноеСообщениеАдминам("Регламент обработки ошибок SQL", ТекстПисьма);
	КонецеСли;
КонецПроцедуры	

Функция СопоставлениеИнициатораСостоянияДляАдминки() Экспорт
	
	 СопоставлениеИнициатора = Новый Соответствие();
	 СопоставлениеИнициатора.Вставить(Перечисления.ИнициаторыСостояния.ИнтернетМагазин, 1);
	 СопоставлениеИнициатора.Вставить(Перечисления.ИнициаторыСостояния.Клиент, 2);
	 СопоставлениеИнициатора.Вставить(Перечисления.ИнициаторыСостояния.ТранспортнаяКомпания, 3);
	 
	 Возврат СопоставлениеИнициатора;                                                                             
	 
КонецФункции	

Функция ИнициаторСостоянияВАдминку(ИнициаторСостояния, СопоставлениеИнициатора = Неопределено) Экспорт
	
	Если СопоставлениеИнициатора = Неопределено Тогда
		 СопоставлениеИнициатора = СопоставлениеИнициатораСостоянияДляАдминки();
	Конецесли;	 
	
	ИнициаторСостоянияВАдминку = Неопределено;
	
	Если ЗначениеЗаполнено(ИнициаторСостояния) Тогда
		Попытка
			ИнициаторСостоянияВАдминку = СопоставлениеИнициатора[ИнициаторСостояния];
		Исключение
			ИнициаторСостоянияВАдминку = Неопределено;
		Конецпопытки;
	Иначе
		ИнициаторСостоянияВАдминку = Неопределено;
	КонецЕсли;	
	
	Возврат ИнициаторСостоянияВАдминку;
	
КонецФункции

	
Процедура РегламентВыгрузкаПричинОтказовПереносов(КодПланаОбмена) Экспорт
	
	УзелОбмена = ПланыОбмена.ОбменСАдминкой.НайтиПоКоду(КодПланаОбмена);
	
	МассивДанных = Новый Массив;
	
	Выборка = ПланыОбмена.ВыбратьИзменения(УзелОбмена, 1);
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект = Выборка.Получить();
		
		//Сообщить("Объект "+СпрОбъект+" зарегистрирован к отправке");
		
		МассивДанных.Добавить(СпрОбъект.Ссылка);
		
		//ПланыОбмена.УдалитьРегистрациюИзменений(Узелок, СпрОбъект);
		
		//Сообщить("Объект "+СпрОбъект+" удален из отправки");
		
	КонецЦикла; 
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПричиныОтказаПереноса.Ссылка КАК Ссылка,
		|	ПричиныОтказаПереноса.Код КАК code1C,
		|	ПричиныОтказаПереноса.Наименование КАК name,
		|	ВЫБОР
		|		КОГДА ПричиныОтказаПереноса.ПометкаУдаления
		|				ИЛИ ПричиныОтказаПереноса.ЗапретВыбораВАдминке
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК isActual,
		|	ВЫБОР
		|		КОГДА ПричиныОтказаПереноса.СторонаПретензии = ЗНАЧЕНИЕ(Перечисление.СторонаПретензий.Партнер)
		|			ТОГДА 1
		|		КОГДА ПричиныОтказаПереноса.СторонаПретензии = ЗНАЧЕНИЕ(Перечисление.СторонаПретензий.Компания)
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК guilty,
		|	ВЫБОР
		|		КОГДА ПричиныОтказаПереноса.ИнициаторСостояния = ЗНАЧЕНИЕ(Перечисление.ИнициаторыСостояния.ИнтернетМагазин)
		|			ТОГДА 1
		|		КОГДА ПричиныОтказаПереноса.ИнициаторСостояния = ЗНАЧЕНИЕ(Перечисление.ИнициаторыСостояния.Клиент)
		|			ТОГДА 2
		|		КОГДА ПричиныОтказаПереноса.ИнициаторСостояния = ЗНАЧЕНИЕ(Перечисление.ИнициаторыСостояния.ТранспортнаяКомпания)
		|			ТОГДА 3
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК initiator,
		|	ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа.ПричинаНевыполнения.КодАдминки КАК eventId,
		|	ВЫБОР
		|		КОГДА ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
		|			ТОГДА 0
		|		КОГДА ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Самовывоз)
		|			ТОГДА 1
		|		КОГДА ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
		|			ТОГДА 2
		|		ИНАЧЕ -1
		|			
		|	КОНЕЦ КАК deliveryType
		|ИЗ
		|	Справочник.ПричиныОтказаПереноса КАК ПричиныОтказаПереноса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПричиныОтказаПереноса.ДоступностьПоПричинамНеВыполненияЗаказа КАК ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа
		|		ПО (ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа.Ссылка = ПричиныОтказаПереноса.Ссылка)
		|			И (ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Самовывоз)
		|				ИЛИ ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
		|				ИЛИ ПричиныОтказаПереносаДоступностьПоПричинамНеВыполненияЗаказа.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор))
		|ГДЕ
		|	ПричиныОтказаПереноса.Ссылка В(&МассивДанных)
		|ИТОГИ
		|	МИНИМУМ(code1C),
		|	МИНИМУМ(name),
		|	МИНИМУМ(isActual),
		|	МИНИМУМ(guilty),
		|	МИНИМУМ(initiator)
		|ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДанных", МассивДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивПараметров = Новый Массив;
	
	Пока ВыборкаСсылка.Следующий() Цикл
			
		СтруктураПараметров = Новый Структура("code1C"); 	
		СтруктураПараметров.Вставить("name");
		СтруктураПараметров.Вставить("isActual");
		СтруктураПараметров.Вставить("guilty");
		СтруктураПараметров.Вставить("initiator");
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВыборкаСсылка);
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		
		МассивТЧ = Новый Массив;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
			Если (НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.eventId))
				ИЛИ (ВыборкаДетальныеЗаписи.deliveryType < 0) Тогда
			Иначе			
				СтруктураТЧ = Новый Структура("eventId");
				СтруктураТЧ.Вставить("deliveryType");
				
				ЗаполнитьЗначенияСвойств(СтруктураТЧ, ВыборкаДетальныеЗаписи);
				
				ПреобразоватьЗначенияСтруктурыВСтроку(СтруктураТЧ);
				МассивТЧ.Добавить(СтруктураТЧ);				
			КонецЕсли; 	
			
		КонецЦикла;
		
		Если МассивТЧ.Количество() > 0 Тогда
			СтруктураПараметров.Вставить("events", МассивТЧ);
		КонецЕсли; 
		
		ПреобразоватьЗначенияСтруктурыВСтроку(СтруктураПараметров);
		
		МассивПараметров.Добавить(СтруктураПараметров);
		
	КонецЦикла;
		
	ПараметрыЗапроса = Новый Структура;		
	ПараметрыЗапроса.Вставить("reasons", МассивПараметров);
	
	СтруктураВозврата = ИнтеграцияСАдминкойWEBСервис.ВыполнитьЗапросКАдминке(Перечисления.ВидыЗапросовWEBСервис.UpdateReasonsDirectoryResult, ПараметрыЗапроса,,,Истина);
	Если НЕ СтруктураВозврата.Успешно Тогда
		//ВызватьИсключение СтруктураВозврата.ОписаниеОшибки;
		Возврат;	
	КонецЕсли;
	
	Для каждого ПричинаОтказа Из МассивДанных Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ПричинаОтказа);
	КонецЦикла; 
	
КонецПроцедуры	

//CeHbKA #2941
Процедура ПреобразоватьЗначенияСтруктурыВСтроку(СтруктураОбработки)
	
	Для каждого ЭлементСтруктуры Из СтруктураОбработки Цикл
		
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТипЗнч(ЭлементСтруктуры.Значение) <> Тип("Строка") Тогда
			СтруктураОбработки[ЭлементСтруктуры.Ключ] = Строка(Число(ЭлементСтруктуры.Значение));
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
 