
Процедура Инициализировать(новаКонтекст) Экспорт
	ИнициализироватьАвтоматическоеСозданиеМестнойДоставки();
КонецПроцедуры

#Если Клиент Тогда 
	
Процедура ИнициализацияФормы(Форма, Расширение) Экспорт
	новаИнтеграцияМодификацияФорм.ИнициализацияФормы(Форма, Расширение);
КонецПроцедуры

Функция ПолучитьДеревоПечатныхФормКИС() Экспорт
	мсДокументы = Новый Массив;
	мсДокументы.Добавить("ВнутреннийЗаказ");
	мсДокументы.Добавить("ПеремещениеТоваров");
	мсДокументы.Добавить("ЗаказПокупателя");
	мсДокументы.Добавить("ЗаказПоставщику");
	мсДокументы.Добавить("ПоступлениеТоваровУслуг");
	мсДокументы.Добавить("РеализацияТоваровУслуг");
	мсДокументы.Добавить("СчетФактураВыданный");
	
	тзПечатныеФормы = новаПечатныеФормы.ПолучитьТаблицуПечатныхФорм();
	
	Для Каждого ИмяДокумента Из мсДокументы Цикл
		обДокумент = Документы[ИмяДокумента].СоздатьДокумент();	
		Представление = Метаданные.Документы[ИмяДокумента].Представление();
		
		дзПечатныеФормыКИС = ПолучитьПечатныеФормыДокумента(обДокумент);
		Для Каждого стрПечатнаяФормаКИС Из дзПечатныеФормыКИС.Строки Цикл
			стрПечатнаяФорма = тзПечатныеФормы.Добавить();
			стрПечатнаяФорма.ИмяДокумента = ИмяДокумента;
			стрПечатнаяФорма.Представление = Представление;
			стрПечатнаяФорма.ПредставлениеПечатнойФормы = стрПечатнаяФормаКИС.Текст;
			Если ТипЗнч(стрПечатнаяФормаКИС.Расшифровка) = Тип("Структура") Тогда
				стрПечатнаяФорма.ПечатнаяФорма = "КИС_ВНЕШН" + ЗначениеВСтрокуВнутр(стрПечатнаяФормаКИС.Расшифровка.СсылкаНаВнешнююОбработку);
			Иначе
				стрПечатнаяФорма.ПечатнаяФорма = "КИС_ВНУТР" + стрПечатнаяФормаКИС.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат тзПечатныеФормы;
КонецФункции

Процедура НастроитьИнтерфейсПутевогоЛиста(Форма, ЭтотОбъект) Экспорт
	новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, ЭтотОбъект.ПолеОрганизация,
		"ОбработкаВыбора",
		2,
		"Результат = новаИнтеграцияМодификацияФорм.ИнтеграцияОбработкаВыбора(Параметр1, Параметр2);
		|Если Результат = Неопределено Тогда
		|	Параметр3 = Истина;
		|Иначе
		|	Параметр3 = Ложь;
		|	Параметр1.Значение = Результат;
		|КонецЕсли;",
		,
		);	
КонецПроцедуры	

Процедура ПриПервомЗапускеПослеИнтеграции() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Порядок КАК Порядок,
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		3 КАК Порядок
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.Ссылка,
	|		1
	|	ИЗ
	|		Справочник.Валюты КАК Валюты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Контрагенты.Ссылка,
	|		2
	|	ИЗ
	|		Справочник.Контрагенты КАК Контрагенты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка,
	|		7
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕдиницыНоменклатуры.Ссылка,
	|		4
	|	ИЗ
	|		Справочник.ЕдиницыИзмерения КАК ЕдиницыНоменклатуры
	|	ГДЕ
	|		ЕдиницыНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Склады.Ссылка,
	|		5
	|	ИЗ
	|		Справочник.Склады КАК Склады
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Ссылка,
	|		6
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Пользователи.Ссылка,
	|		8
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	Порядок"
	;
	
	Выборка = Запрос.Выполнить();
	
	Форма = ПолучитьОбщуюФорму("новаФормаИндикации");
	Форма.Заголовок = "Заполнение соответствий объектов";
	
	ОбщееКоличество = Выборка.Выбрать().Количество();
	Форма.ОбщееМаксимальноеЧисло = ОбщееКоличество;
	СчетчикОбщий = 0;
	Форма.Открыть();
	
	ВыборкаГрупп = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГрупп.Следующий() Цикл
		
		СчетчикОбщий = СчетчикОбщий+1;
		ВыборкаЭлементов = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаКоличество = ВыборкаЭлементов.Количество();
		Форма.МаксимальноеЧисло = ВыборкаКоличество;
		Форма.ИндикаторПромежуточный = 0;
		СчетчикЭлементов = 0;
		
		Пока ВыборкаЭлементов.Следующий() Цикл
			
		    Объект = ВыборкаЭлементов.Ссылка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			
			СчетчикОбщий = СчетчикОбщий+1;
			СчетчикЭлементов = СчетчикЭлементов+1;
			
			Форма.ТекстПромежуточный = "Справочник "+ВыборкаЭлементов.Ссылка.Метаданные().Синоним+":";
			Форма.ТекстЭлемента = "Элемент :"+ВыборкаЭлементов.Ссылка;
			Форма.ИндикаторОбщий = СчетчикОбщий;
			Форма.ИндикаторПромежуточный = СчетчикЭлементов;
			
	    КонецЦикла;
	КонецЦикла;
	
	Форма.Закрыть();
	
КонецПроцедуры

Процедура СформироватьЖурналПечатныхФорм(Форма, Расширение, Панель, ДеревоПечатныхФорм)
	
	Журнал = новаЖурналы.НовыйЖурнал();
	Расширение.Вставить("ЖурналПечатныхФорм",Журнал);
	
	Журнал.ДобавитьНастройку("ПоДокументам");
	Журнал.РазворачиватьПолностью();
	
	Источник = Обработки.новаИсточникДереваПечатныхФорм.Создать();
	Источник.ВключитьВстроенныеПечатныеФормы = Ложь;
	Источник.ВключитьПечатныеФормыКИС = Истина;
	ИсточникДереваПФ = Источник;
	
	Журнал.ДобавитьИсточник(Источник);
	
	Источник.КонструкторДанных.ЯчейкаОтображенияДетальнойСтрокиВИерархии = "ПредставлениеПечатнойФормы";
	Журнал.ИспользоватьФлажок("Выбран", "ПредставлениеПечатнойФормы");
	
	Источник.КонструкторДанных.ДобавитьГруппировку("ПредставлениеДокумента");
	Журнал.УстановитьШиринуИерархии(50);
	
	Журнал.ДобавитьКолонку("Количество", ПоложениеКолонки.НоваяКолонка, -10, , РежимРедактированияКолонки.Непосредственно);
	Журнал.ДобавитьКолонку("НаПринтер", ПоложениеКолонки.НоваяКолонка, -10, , РежимРедактированияКолонки.Непосредственно);
	
	Журнал.ДобавитьСортировку("ПредставлениеПечатнойФормы", "ВОЗР");
	Журнал.ДобавитьСортировку("ПредставлениеДокумента", "ВОЗР");
	
	Журнал.ПодключитьИнтерфейс(Форма, ДеревоПечатныхФорм, Панель);
	Журнал.Дерево.ИзменяетДанные = Истина;
	Журнал.Дерево.ГоризонтальныеЛинии = Ложь;
		
	Отбор = Новый Структура("Шаблон", Расширение.КонтрагентНова);
	Выборка = РегистрыСведений.новаПечатныеФормы.Выбрать(Отбор);
	Пока Выборка.Следующий() Цикл
		Строки = Журнал.Дерево.Значение.Строки.НайтиСтроки(Новый Структура("ИмяДокумента, ПечатнаяФорма", Выборка.Документ, Выборка.ПечатнаяФорма), Истина);
		Для Каждого Строка Из Строки Цикл
			Строка.Выбран 		= Истина;
			Строка.Количество 	= Выборка.Количество;
			Строка.НаПринтер	= Выборка.НаПринтер;
			Журнал.ОкончитьРедактированиеСтроки(Строка);			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВФормуПечатныеФормы(Форма, Расширение, Панель) Экспорт
	
	Если ТипЗнч(Форма.ЭтотОбъект.Ссылка)=Тип("СправочникСсылка.Контрагенты") Тогда
		Расширение.Вставить("КонтрагентНова",новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Форма.ЭтотОбъект.Ссылка));
	Иначе
		Расширение.Вставить("КонтрагентНова", Форма.ЭтотОбъект.Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Расширение.КонтрагентНова) Тогда
		ТекущаяСтраница = Панель.ТекущаяСтраница;
		Страница = Панель.Страницы.Добавить("ПечаныеФормы", "Печатные формы");
		Панель.ТекущаяСтраница = Страница;
		
		Отступ = 10;
		Высота = 19;
		ОтступНадписи = 22;
		ВысотаНадписи = 15;
		ШиринаНадписи = 170;
		
		Х = Отступ;
		У = Отступ;
		
		//РамкаГруппыВыбора = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("РамкаГруппы"), Панель);// ,, Расширение
		//РамкаГруппыВыбора.Заголовок = "Настройка печати";
		//РамкаГруппыВыбора.Лево 	= 10;
		//РамкаГруппыВыбора.Верх 	= 5;
		//РамкаГруппыВыбора.Ширина = Панель.Ширина-20;
		//РамкаГруппыВыбора.Высота = 80;
		//РамкаГруппыВыбора.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Верх);
		//РамкаГруппыВыбора.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
		//РамкаГруппыВыбора.УстановитьПривязку(ГраницаЭлементаУправления.Низ, РамкаГруппыВыбора, ГраницаЭлементаУправления.Верх);
		//РамкаГруппыВыбора.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		
		Шаблон = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель);// ,, Расширение
		Шаблон.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.новаШаблоныПечатныхФорм");
		Шаблон.Значение = Расширение.КонтрагентНова.Шаблон;
		Шаблон.Лево 	= Отступ;
		Шаблон.Верх 	= Отступ+Высота+4;
		Шаблон.Ширина 	= Панель.Ширина-Отступ*2;
		Шаблон.Высота 	= Высота;
		Шаблон.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Шаблон, ГраницаЭлементаУправления.Верх);
		Шаблон.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		
		ПереключательОсновной = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Переключатель"), Панель);// ,, Расширение
		ПереключательОсновной.ТипЗначения = Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(1,0));
		ПереключательОсновной.ПервыйВГруппе = Истина;
		ПереключательОсновной.ВыбираемоеЗначение = 1;
		ПереключательОсновной.Заголовок = "По умолчанию";
		ПереключательОсновной.Лево 	= ОтступНадписи;
		ПереключательОсновной.Верх 	= Отступ;
		ПереключательОсновной.Ширина = ШиринаНадписи;
		ПереключательОсновной.Высота = ВысотаНадписи;
		ПереключательОсновной.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПереключательОсновной, ГраницаЭлементаУправления.Верх);
		ПереключательОсновной.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПереключательОсновной, ГраницаЭлементаУправления.Лево);
		
		ПереключательШаблон = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Переключатель"), Панель);// ,, Расширение
		ПереключательШаблон.Заголовок = "Из шаблона";
		ПереключательШаблон.ВыбираемоеЗначение = 2;
		ПереключательШаблон.Лево 	= ОтступНадписи+ШиринаНадписи;
		ПереключательШаблон.Верх 	= Отступ;
		ПереключательШаблон.Ширина = ШиринаНадписи;
		ПереключательШаблон.Высота = ВысотаНадписи;
		ПереключательШаблон.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПереключательОсновной, ГраницаЭлементаУправления.Верх);
		ПереключательШаблон.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПереключательОсновной, ГраницаЭлементаУправления.Лево);
		
		ПереключательИндивидуальный = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Переключатель"), Панель);// ,, Расширение
		ПереключательИндивидуальный.Заголовок = "Индивидуальная настройка";
		ПереключательИндивидуальный.ВыбираемоеЗначение = 3;
		ПереключательИндивидуальный.Лево 	= ОтступНадписи+ШиринаНадписи*2;
		ПереключательИндивидуальный.Верх 	= Отступ;
		ПереключательИндивидуальный.Ширина = ШиринаНадписи;
		ПереключательИндивидуальный.Высота = ВысотаНадписи;
		ПереключательИндивидуальный.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПереключательОсновной, ГраницаЭлементаУправления.Верх);
		ПереключательИндивидуальный.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПереключательОсновной, ГраницаЭлементаУправления.Лево);
		
		Картинка = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеКартинки"), Панель);
		Картинка.Лево 	= Отступ;
		Картинка.Верх 	= ОтступНадписи+Высота+Отступ*2;
		Картинка.Ширина = Панель.Ширина-Отступ*2;
		Картинка.Высота = Панель.Высота-Отступ*2;
		Картинка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Верх);
		Картинка.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
		Картинка.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		Картинка.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, ПереключательОсновной,
			"ПриИзменении",
			0,
			"Если ЭлементыФормы."+ ПереключательОсновной.Имя + ".Значение=2 Тогда
			|	ЭлементыФормы."+Шаблон.Имя+".Доступность = Истина;
			|Иначе
			|	ЭлементыФормы."+Шаблон.Имя+".Доступность = Ложь;
			|КонецЕсли; 
			|Если ЭлементыФормы."+ ПереключательОсновной.Имя + ".Значение=3 Тогда
			|	ЭлементыФормы."+Картинка.Имя+".Доступность = Истина;
			|Иначе
			|	ЭлементыФормы."+Картинка.Имя+".Доступность = Ложь;
			|КонецЕсли;", 
			,
			Расширение);
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, Форма,
			"ПриЗаписи",
			1,
			"Если ЗначениеЗаполнено(Расширение.КонтрагентНова) Тогда
			|	КонтрагентНоваОбъект = Расширение.КонтрагентНова.ПолучитьОбъект();
			|	КонтрагентНоваОбъект.ВариантПечатныхФорм = ЭлементыФормы."+ПереключательОсновной.Имя+".Значение;
			|	КонтрагентНоваОбъект.Шаблон = ЭлементыФормы."+Шаблон.Имя+".Значение;
			|	КонтрагентНоваОбъект.Записать();
			|	РегПечатныхФорм = РегистрыСведений.новаПечатныеФормы.СоздатьНаборЗаписей();
			|	РегПечатныхФорм.Отбор.Шаблон.Установить(Расширение.КонтрагентНова);
			|	Строки = Расширение.ЖурналПечатныхФорм.Дерево.Значение.Строки.НайтиСтроки(Новый Структура(""Выбран"", Истина), Истина);
			|	Для Каждого Строка Из Строки Цикл
			|		НоваяСтрока = РегПечатныхФорм.Добавить();
			|		НоваяСтрока.Шаблон						= Расширение.КонтрагентНова;
			|		НоваяСтрока.Документ					= Строка.ИмяДокумента;
			|		НоваяСтрока.ПечатнаяФорма				= Строка.ПечатнаяФорма;
			|		НоваяСтрока.ПредставлениеПечатнаяФорма	= Строка.ПредставлениеПечатнойФормы;
			|		НоваяСтрока.Количество					= Строка.Количество;
			|		НоваяСтрока.НаПринтер					= Строка.НаПринтер;
			|	КонецЦикла;
			|	РегПечатныхФорм.Записать();
			|КонецЕсли;",
			Ложь,
			Расширение);
					
		СформироватьЖурналПечатныхФорм(Форма, Расширение, Панель, Картинка);
		Вариант = Расширение.КонтрагентНова.ВариантПечатныхФорм;
		Если НЕ ЗначениеЗаполнено(Вариант) Тогда
			Вариант = 1;
		КонецЕсли;
		Форма.ЭлементыФормы[ПереключательОсновной.Имя].Значение = Вариант;
		Панель.ТекущаяСтраница = ТекущаяСтраница;
	Иначе
		
		Предупреждение("Не найдены настройки печатных форм контрагента!");
	
	КонецЕсли; 
		
		
КонецПроцедуры

Функция ПолучитьПечатныеФормыДокумента(Объект)
	
	// Получить внутренние печатные формы (имена макетов объектов)
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм();
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	// Сформировать дерево макетов печати
	Возврат УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм,,, Ложь);
		
КонецФункции

Процедура Печать(Объект, ТекущаяПечатнаяФорма, ПараметрыПечати) Экспорт
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Количество = ПараметрыПечати.Количество;
		НаПринтер = ПараметрыПечати.НаПринтер;
	Иначе
		Количество 	= 1;
		НаПринтер 	= Ложь;
	КонецЕсли;
	
	ПечатнаяФорма = Сред(ТекущаяПечатнаяФорма, 10);
	Префикс = Лев(ТекущаяПечатнаяФорма, 9);
	ДеревоЗначенийПФ = ПолучитьПечатныеФормыДокумента(Объект);
	Если Префикс="КИС_ВНЕШН" Тогда
		
		Строки = ДеревоЗначенийПФ.Строки.НайтиСтроки(Новый Структура("Подсказка","Подключаемая печатная форма"));
		Для Каждого Строка Из Строки Цикл
			Если ЗначениеВСтрокуВнутр(Строка.Расшифровка.СсылкаНаВнешнююОбработку)=ПечатнаяФорма Тогда
				СтрокаПечФормы = Строка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Префикс="КИС_ВНУТР" Тогда
		
		СтрокаПечФормы = ДеревоЗначенийПФ.Строки.Найти(ПечатнаяФорма, "Имя", Истина);
		
	КонецЕсли;
	
	Если СтрокаПечФормы <> Неопределено Тогда
	
		Расшифровка = СтрокаПечФормы.Расшифровка;
		
		Если ТипЗнч(Расшифровка) = Тип("Структура") и Расшифровка.ВидПечатнойФормы = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
			ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, Количество, НаПринтер, ?(ЭтоДокумент, ОбщегоНазначения.СформироватьЗаголовокДокумента(Объект), Строка(Объект)), Объект.Ссылка, Расшифровка);
		Иначе
			Объект.Печать(Расшифровка, Количество, НаПринтер);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНаличиеНеобходимыхДокументов(Доставка) Экспорт

	ОснованиеДоставки = новаИнтеграция.ПолучитьОснованиеПоМестнойДоставке(Доставка);
	Если ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.ЗаказПокупателя")
		Или ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ПроверитьНаличиеПодчиненныхДокументов(ОснованиеДоставки);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНаличиеПодчиненныхДокументов(ОснованиеДоставки) 
	
	Запрос = Новый Запрос;
	
	Если  ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//проверяем сначала реализацию, потом счет-фактуру
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	РеализацияТоваровУслуг.Ссылка 
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Сделка = &Основание"
	    ;
		Запрос.УстановитьПараметр("Основание", ОснованиеДоставки);
		
		ВыборкаРеализации = Запрос.Выполнить();
		
		Если НЕ ВыборкаРеализации.Пустой() Тогда
			Выборка = ВыборкаРеализации.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если НЕ Выборка.Ссылка.Проведен Тогда
					Сообщить(""+Выборка.Ссылка+" не проведен!", СтатусСообщения.Важное);
				КонецЕсли;
				
				ЕстьСчетФактура = ПроверитьНаличиеСчетФактуры(Выборка.Ссылка);
				
				Если НЕ ЕстьСчетФактура Тогда
					Сообщить("На докум. "+Выборка.Ссылка+" не выписан счет-фактура!", СтатусСообщения.Важное);
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			Сообщить("На "+ОснованиеДоставки+" не выписаны реализация и счет-фактура!", СтатусСообщения.Важное);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОснованиеДоставки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ЕстьСчетФактура = ПроверитьНаличиеСчетФактуры(ОснованиеДоставки);
		
		Если НЕ ЕстьСчетФактура Тогда
			Сообщить("На "+ОснованиеДоставки+" не выписан счет-фактура!", СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры	
	
Функция ПроверитьНаличиеСчетФактуры(Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактура.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.ДокументОснование = &Основание"
	;
	Запрос.УстановитьПараметр("Основание", Основание);
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		Возврат Ложь;
	Иначе
		ВыборкаСФ = Выборка.Выбрать();
		ВыборкаСф.Следующий();
		Если НЕ ВыборкаСФ.Ссылка.Проведен Тогда
			Сообщить(""+ВыборкаСФ.Ссылка+" не проведен!", СтатусСообщения.Важное);
		КонецЕсли;	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецЕсли

Процедура ПолучитьДокументыДоставки(Доставка, Контрагент, ИтоговаяТаблица) Экспорт
	
	ДеревоДокументов = Новый ДеревоЗначений;
	ДеревоДокументов.Колонки.Добавить("Ссылка");
	ДеревоДокументов.Колонки.Добавить("Проведен");
	ДеревоДокументов.Колонки.Добавить("ПометкаУдаления");
	соНайденныеДокументы = Новый Соответствие;
	СвязанныеДокументы = ПолучитьСвязанныеДокументы();
	
	//Получаем связанные документы
	МенеджерСвязанныхДокументов = РегистрыСведений.новаСвязьДокументовДоставки;
	Отбор = Новый Структура("БизнесПроцесс", Доставка);
	ВыборкаДокументов = МенеджерСвязанныхДокументов.Выбрать(Отбор);
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НоваяСтрока 				= ИтоговаяТаблица.Добавить();
		НоваяСтрока.Шаблон	 		= Контрагент;
		НоваяСтрока.Объект	 		= ВыборкаДокументов.Документ;
		
		// поиск цепочки документов
		ДеревоДокументов.Строки.Очистить();
		мДерево = ДеревоДокументов;	
		соНайденныеДокументы.Очистить();
		
		// Добавляем документ из выборки
		НоваяСтрока = мДерево.Строки.Добавить();
		НоваяСтрока.Ссылка = ВыборкаДокументов.Документ.Ссылка;
		НоваяСтрока.Проведен = ВыборкаДокументов.Документ.Проведен;
		НоваяСтрока.ПометкаУдаления = ВыборкаДокументов.Документ.ПометкаУдаления;		
		соНайденныеДокументы.Вставить(ВыборкаДокументов.Документ.Ссылка, Истина);
		// Заполняем по этому документу подчиненные
		ВывестиДокументыПоСписку(НоваяСтрока, мДерево, соНайденныеДокументы, СвязанныеДокументы, Истина);
		ВывестиДокументыПоСписку(НоваяСтрока, мДерево, соНайденныеДокументы, СвязанныеДокументы, Ложь);
		
		Для Каждого СтрокаДерева Из ВыбратьУзлы(ДеревоДокументов) Цикл 
			Если НЕ СтрокаДерева.ПометкаУдаления Тогда
				НоваяСтрока 				= ИтоговаяТаблица.Добавить();
				НоваяСтрока.Шаблон	 		= Контрагент;
				НоваяСтрока.Объект	 		= СтрокаДерева.Ссылка;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Добавляет строку в таблицу изменяемых при интеграции объектов конфигурации.
//
// Параметры:
//  ТаблицаОбъектов <ТаблицаЗначений[ТаблицаИзмененныхОбъектов]>
//  ТипОбъекта      <Строка>
//  ИмяОбъекта      <Строка>
//  ИмяФормыОбъекта <Строка>
//
Процедура ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, ТипОбъекта, ИмяОбъекта, ИмяФормыОбъекта = "ОбщаяФорма")
	СтрокаТаблицыОбъектов = ТаблицаОбъектов.Добавить();
	СтрокаТаблицыОбъектов.ТипОбъекта		 = ТипОбъекта;
	СтрокаТаблицыОбъектов.ИмяОбъекта		 = ИмяОбъекта;
	СтрокаТаблицыОбъектов.ИмяФормыОбъекта	 = ИмяФормыОбъекта;
КонецПроцедуры

// Возвращает таблицу всех объектов, модифицированных при интеграции.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаИзмененныхОбъектов]>
//
Функция ПолучитьТаблицуИзмененныхОбъектов() Экспорт
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	
	ТаблицаОбъектов.Колонки.Добавить("ТипОбъекта");
	ТаблицаОбъектов.Колонки.Добавить("ИмяОбъекта");
	ТаблицаОбъектов.Колонки.Добавить("ИмяФормыОбъекта");
		
	// Объекты ИС	
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Документ",	"ЗаказПокупателя", 					"ФормаДокумента");
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Документ",	"ЗаказПоставщику", 					"ФормаДокумента");
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Документ",	"РеализацияТоваровУслуг", 			"ФормаДокумента");
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Документ",	"КорректировкаЗаказаПокупателя", 	"ФормаДокумента");
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Документ",	"КорректировкаЗаказаПоставщику", 	"ФормаДокумента");
	//ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Документ",	"КорректировкаВнутреннегоЗаказа", 	"ФормаДокумента");
	//ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Документ",	"ВнутреннийЗаказ", 					"ФормаДокумента");
	
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Справочник", "Контрагенты",	"ФормаЭлемента");
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Справочник", "Контрагенты",	"ФормаВыбора");
	
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Справочник", "Номенклатура",	"ФормаЭлемента");
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Справочник", "Номенклатура",	"ФормаВыбора");
	
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Справочник", "Склады",			"ФормаЭлемента");
	ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Справочник", "Склады",			"ФормаВыбора");
		
	//ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "Обработка", "новаОбновлениеРасширенияФорм", 				"ФормаОбработки");
	
	
	//ДобавитьСтрокуВТаблицуОбъектов(ТаблицаОбъектов, "", "", "");
   	
	Возврат ТаблицаОбъектов;
	

КонецФункции

//-----------------------------------------------------------------------------
//Процедуры первого запуска после интеграции

Процедура ПервыйЗапуск() Экспорт
	
	Константы.новаРазрешитьПерепроведениеОснованияМестнойДоставки.Установить(Истина);
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		СтрокаОшибки = "Первый запуск должен производиться пользователем с полными правами!";
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	
	
	Выборка = новаИнтеграция.ПроверитьЗаполнениеСоответствийСправочников();
	
	Если Выборка.Пустой() Тогда
		#Если Клиент Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Выполнить начальное заполнение соответствий справочников?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Состояние("Производится заполнение соответствий справочников. Процедура может занять продолжительное время.");
		    новаИнтеграция.ПриПервомЗапускеПослеИнтеграции();
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры	

//Создание пользователя в справочнике по пользователю ИБ
//
Процедура СоздатьПользователя(ПользовательИБ) Экспорт
	
	
	
КонецПроцедуры

Функция ПолучитьПредставлениеДокументаВодителя(Водитель,Документ) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	новаДокументыВодителей.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.новаДокументыВодителей КАК новаДокументыВодителей
	               |ГДЕ
	               |	новаДокументыВодителей.Владелец = &Водитель
	               |	И новаДокументыВодителей.ВидДокумента = &Документ";
	Запрос.УстановитьПараметр("Водитель",Водитель);				   
	Запрос.УстановитьПараметр("Документ",Документ);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Наименование;
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

Процедура ИнициализироватьАвтоматическоеСозданиеМестнойДоставки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипОбъекта
	|ИЗ
	|	РегистрСведений.новаДокументыВводаБизнесПроцесса
	|ГДЕ
	|	РежимВвода = ЗНАЧЕНИЕ(Перечисление.новаВводМестнойДоставки.Автоматически)";
	
	стрТип = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		стрТип = стрТип + ?(стрТип = "", "", ", ") + "ДокументОбъект." + Выборка.ТипОбъекта;
	КонецЦикла;
	
	ПараметрыСеанса.новаДокументыОснованияМестнойДоставки = Новый ОписаниеТипов(стрТип);
КонецПроцедуры

Функция ПроверитьЗаполнениеСоответствийСправочников() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	новаНоменклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.новаНоменклатура КАК новаНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	новаВалюты.Ссылка
	|ИЗ
	|	Справочник.новаВалюты КАК новаВалюты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.новаКонтрагенты КАК Контрагенты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	новаФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.новаФизическиеЛица КАК новаФизическиеЛица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	новаЕдиницыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.новаЕдиницыНоменклатуры КАК новаЕдиницыНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	новаСклады.Ссылка
	|ИЗ
	|	Справочник.новаСклады КАК новаСклады
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	новаОрганизации.Ссылка
	|ИЗ
	|	Справочник.новаОрганизации КАК новаОрганизации"
	;
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция ПолучитьНомерВерсииКонфигурации() Экспорт
	н = Константы.НомерВерсииКонфигурации.Получить();
	Позиция = Найти(н,"/");
	Если Позиция <> 0 Тогда
		Возврат СокрЛП(Лев(н, Позиция-1));
	Иначе 
		Возврат н;
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерВерсииКонфигурацииМетаданные() Экспорт
	н = Метаданные.Версия;
	Позиция = Найти(н,"/");
	Если Позиция <> 0 Тогда
		Возврат СокрЛП(Лев(н, Позиция-1));
	Иначе 
		Возврат н;
	КонецЕсли;
КонецФункции

//-----------------------------------------------------------------------------
//Процедуры - обработчики событий ПриЗаписи для сопоставляемых объектов ИС

Процедура новаПриЗаписиНоменклатурыПриЗаписи(Источник, Отказ) Экспорт
	
	ОбъектСсылка = Источник.Ссылка;
	новаИнтеграцияСвязьОбъектов.новаПриЗаписиНоменклатурыЗаписатьСоответствие(ОбъектСсылка, Отказ);
	
КонецПроцедуры

Процедура новаПриЗаписиВалютыПриЗаписи(Источник, Отказ) Экспорт
	
	ОбъектСсылка = Источник.Ссылка;
	новаИнтеграцияСвязьОбъектов.новаПриЗаписиВалютыЗаписатьСоответствие(ОбъектСсылка, Отказ);
	
КонецПроцедуры

Процедура новаПриЗаписиКонтрагентаПриЗаписи(Источник, Отказ) Экспорт
	
	ОбъектСсылка = Источник.Ссылка;
	новаИнтеграцияСвязьОбъектов.новаПриЗаписиКонтрагентаЗаписатьСоответствие(ОбъектСсылка, Отказ);
//херим нова
	//#Если Клиент Тогда
	//	Если РольДоступна("новаАдминистраторУТЛ")
	//	 Или РольДоступна("новаПользовательУТЛ") Тогда
	//	  	
	//		новаОбменКСЛ.СохранитьКонтрагента(новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Источник.Ссылка).ПолучитьОбъект());
	//	КонецЕсли;
	//#КонецЕсли
//херим нова	
КонецПроцедуры

Процедура новаПриЗаписиФизЛицаПриЗаписи(Источник, Отказ) Экспорт
	
	ОбъектСсылка = Источник.Ссылка;
	новаИнтеграцияСвязьОбъектов.новаПриЗаписиФизЛицаЗаписатьСоответствие(ОбъектСсылка, Отказ);

КонецПроцедуры

Процедура новаПриЗаписиСкладаПриЗаписи(Источник, Отказ) Экспорт
	
	ОбъектСсылка = Источник.Ссылка;
	новаИнтеграцияСвязьОбъектов.новаПриЗаписиСкладаЗаписатьСоответствие(ОбъектСсылка, Отказ);

	#Если Клиент Тогда
		Если РольДоступна("новаАдминистраторУТЛ")
		 Или РольДоступна("новаПользовательУТЛ") Тогда
		  	
			новаОбменКСЛ.СохранитьСклад(новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Источник.Ссылка).ПолучитьОбъект());
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура новаПриЗаписиПользователяПриЗаписи(Источник, Отказ) Экспорт
	
	ОбъектСсылка = Источник.Ссылка;
	новаИнтеграцияСвязьОбъектов.новаПриЗаписиПользователяЗаписатьСоответствие(ОбъектСсылка, Отказ);
	
КонецПроцедуры

Процедура новаПриЗаписиЕдиницыИзмеренияПриЗаписи(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник.Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Источник.Ссылка;
	новаИнтеграцияСвязьОбъектов.новаПриЗаписиЕдиницыИзмеренияЗаписатьСоответствие(ОбъектСсылка, Отказ);	
	
КонецПроцедуры

Процедура новаПриЗаписиОрганизацииПриЗаписи(Источник, Отказ) Экспорт
	
	ОбъектСсылка = Источник.Ссылка;
	новаИнтеграцияСвязьОбъектов.новаПриЗаписиОрганизацииЗаписатьСоответствие(ОбъектСсылка, Отказ);
		
КонецПроцедуры

Функция МестнаяДоставкаСтартовала(МестнаяДоставка) Экспорт
	
	Если МестнаяДоставка.ДоставкаЗапланирована
	 Или МестнаяДоставка.ДоставкаПодтверждена
	 Или МестнаяДоставка.ДоставкаВыполнена
	 Или МестнаяДоставка.ДоставкаЗавершена Тогда		
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
		
КонецФункции

////////

Процедура ЗаписатьРеквизитыУсловийДоставки(Документ) Экспорт
	Перем ДополнительныеСвойства;
	Если (Документ.ПометкаУдаления) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойстваДокумента = Документ.ДополнительныеСвойства;	
	ДополнительныеСвойстваДокумента.Свойство("ДополнительныеСвойства", ДополнительныеСвойства);
	
	Если ДополнительныеСвойства <> Неопределено Тогда
		
		НаборЗаписей = РегистрыСведений.новаРеквизитыУсловийДоставки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Документ.Ссылка);
			
		Запись = НаборЗаписей.Добавить();
		Запись.Документ = Документ.Ссылка;
		Запись.ТочкаДоставки = ДополнительныеСвойства.ТочкаДоставки;
			
		Запись.ВремяПрибытияС = Дата(Год(ДополнительныеСвойства.ДатаПрибытияС),
				Месяц(ДополнительныеСвойства.ДатаПрибытияС),
				День(ДополнительныеСвойства.ДатаПрибытияС),
				Час(ДополнительныеСвойства.ВремяПрибытияС),
				Минута(ДополнительныеСвойства.ВремяПрибытияС),
				0);
			
		Запись.ВремяПрибытияПо = Дата(Год(ДополнительныеСвойства.ДатаПрибытияПо),
				Месяц(ДополнительныеСвойства.ДатаПрибытияПо),
				День(ДополнительныеСвойства.ДатаПрибытияПо),
				Час(ДополнительныеСвойства.ВремяПрибытияПо),
				Минута(ДополнительныеСвойства.ВремяПрибытияПо),
				0);
					
		Запись.ДлительностьРазгрузки = ДополнительныеСвойства.ДлительностьРазгрузки;
		Запись.ТребуетсяДоставка = ДополнительныеСвойства.ТребуетсяДоставка;	
		НаборЗаписей.Записать();
    КонецЕсли;
КонецПроцедуры	

Процедура ЗаполнитьУсловияДоставкиИзОснования(обДоставка, Основание) Экспорт
	Перем Выборка;
	
	ДополнительныеСвойстваДокумента = Основание.ДополнительныеСвойства;	
	ДополнительныеСвойстваДокумента.Свойство("ДополнительныеСвойства", Выборка);
	
	// Если дополнительных свойств нет, значит запись не из формы, тогда читаем регистр
	Если Выборка = Неопределено Тогда
		Выборка = РегистрыСведений.новаРеквизитыУсловийДоставки.Выбрать(Новый Структура("Документ", Основание.Ссылка));
		Выборка.Следующий();
	КонецЕсли;
	
	Если ТипЗнч(Выборка.ТочкаДоставки) = Тип("СправочникСсылка.новаТочкиДоставки") Тогда
		
		Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") 
			Или ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") Тогда
			
			обДоставка.ТочкаОтправления = Выборка.ТочкаДоставки;
		Иначе
			обДоставка.ТочкаПрибытия = Выборка.ТочкаДоставки;
		КонецЕсли;	
		
	Иначе
		
		ВладелецТочки = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.Контрагент);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|    Ссылка
		|  ИЗ
		|    Справочник.новаТочкиДоставки
		|  ГДЕ
		|    ВладелецТочки = &ВладелецТочки
		|    И Адрес = &Адрес
		|";
		
		Запрос.УстановитьПараметр("ВладелецТочки", новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.Контрагент));
		Запрос.УстановитьПараметр("Адрес", Выборка.ТочкаДоставки);
		
		ВыборкаТочек = Запрос.Выполнить().Выбрать();
		Если ВыборкаТочек.Следующий() Тогда
			ТочкаДоставки = ВыборкаТочек.Ссылка;
		Иначе
			обТочкаДоставки = Справочники.новаТочкиДоставки.СоздатьЭлемент();
			обТочкаДоставки.Наименование = СокрЛП(Выборка.ТочкаДоставки);
			обТочкаДоставки.ВладелецТочки = ВладелецТочки;
			обТочкаДоставки.Адрес = Выборка.ТочкаДоставки;
			обТочкаДоставки.Записать();
			
			ТочкаДоставки = обТочкаДоставки.Ссылка;
		КонецЕсли;
		
		Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") 
			Или ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") Тогда
			
			обДоставка.ТочкаОтправления = ТочкаДоставки;
		Иначе
			обДоставка.ТочкаПрибытия = ТочкаДоставки;
		КонецЕсли;	
	КонецЕсли;
	
	Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") 
		Или ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") Тогда
		
		обДоставка.ВремяОтправленияС = Выборка.ВремяПрибытияС;
		обДоставка.ВремяОтправленияПо = Выборка.ВремяПрибытияПо;
		обДоставка.ВремяПребыванияГрузоотправителя = Выборка.ДлительностьРазгрузки;
		обДоставка.ВремяПрибытияС = Выборка.ВремяПрибытияС;
		обДоставка.ВремяПрибытияПо = Выборка.ВремяПрибытияПо;
		обДоставка.ВремяПребыванияГрузополучателя = Выборка.ДлительностьРазгрузки;
		
	Иначе
		обДоставка.ВремяПрибытияС = Выборка.ВремяПрибытияС;
		обДоставка.ВремяПрибытияПо = Выборка.ВремяПрибытияПо;
		обДоставка.ВремяПребыванияГрузополучателя = Выборка.ДлительностьРазгрузки;
		обДоставка.ВремяОтправленияС = Выборка.ВремяПрибытияС;
		обДоставка.ВремяОтправленияПо = Выборка.ВремяПрибытияПо;
		обДоставка.ВремяПребыванияГрузоотправителя = Выборка.ДлительностьРазгрузки;

	КонецЕсли;		
	
КонецПроцедуры

Функция ПолучитьМестнуюДоставкуПоОснованию(ОснованиеДоставки) Экспорт

	Возврат новаИнтеграцияСвязьОбъектов.ПолучитьМестнуюДоставкуПоОснованию(ОснованиеДоставки);
		
КонецФункции

Функция ПолучитьЗавершеннуюМестнуюДоставкуПоОснованию(ОснованиеДоставки) Экспорт

	Возврат новаИнтеграцияСвязьОбъектов.ПолучитьЗавершеннуюМестнуюДоставкуПоОснованию(ОснованиеДоставки);
	
КонецФункции

Функция ПолучитьОснованиеПоМестнойДоставке(БизнесПроцесс) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	   |	новаОснованиеМестнойДоставки.Документ КАК ОснованиеДоставки
	   |ИЗ
	   |	РегистрСведений.новаСвязьДокументовДоставки КАК новаОснованиеМестнойДоставки
	   |ГДЕ
	   |	новаОснованиеМестнойДоставки.БизнесПроцесс = &БизнесПроцесс";
	   
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].ОснованиеДоставки;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРеквизитыДоставкиИзБизнесПроцессаПоОснованию(Основание) Экспорт
	МестнаяДоставка = новаИнтеграция.ПолучитьМестнуюДоставкуПоОснованию(Основание);
	Если МестнаяДоставка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("ТочкаДоставки, ВремяПрибытияС, ВремяПрибытияПо, ДлительностьРазгрузки, ТребуетсяДоставка",
				МестнаяДоставка.ТочкаПрибытия, МестнаяДоставка.ВремяПрибытияС, МестнаяДоставка.ВремяПрибытияПо, МестнаяДоставка.ВремяПребыванияГрузополучателя, Истина);
	КонецЕсли;	
КонецФункции

Процедура ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание, ТЧ) Экспорт
	
	Для Каждого Строка Из ТЧ Цикл
		Если Строка.Количество = 0 Тогда 
			продолжить;
		КонецЕсли;
		
		стрСпецификация	= обГруз.Спецификация.Добавить();
		стрСпецификация.Товар = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Строка.Номенклатура);
		стрСпецификация.Количество = Строка.Количество;
		стрСпецификация.Артикул = Строка.Номенклатура.Артикул;
		стрСпецификация.НомерГТД = Строка.Номенклатура.НомерГТД;
		// стрСпецификация.Страна = Строка.Номенклатура.СтранаПроисхождения;
		Если ТЧ.Колонки.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			стрСпецификация.ЕдиницаИзмерения = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Строка.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(стрСпецификация.ЕдиницаИзмерения) Тогда
			стрСпецификация.Вес	= стрСпецификация.ЕдиницаИзмерения.Вес * стрСпецификация.Количество;
			стрСпецификация.Объем = стрСпецификация.ЕдиницаИзмерения.Объем * стрСпецификация.Количество;
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			стрСпецификация.Стоимость = Строка.Сумма;
			стрСпецификация.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.ВалютаДокумента);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьМестнуюДоставку(Основание) Экспорт
	ТипОснования = ТипЗнч(Основание);
	
	МестнаяДоставка = ПолучитьМестнуюДоставкуПоОснованию(Основание.Ссылка);
	
	Если МестнаяДоставка = Неопределено Тогда // создаем новый бизнес-процесс "Местная доставка"
		обМестнаяДоставка = БизнесПроцессы.новаМестнаяДоставка.СоздатьБизнесПроцесс();
		обГруз = Документы.новаГруз.СоздатьДокумент();
	Иначе		
		обМестнаяДоставка = МестнаяДоставка.ПолучитьОбъект();
		обГруз = МестнаяДоставка.Груз.ПолучитьОбъект();
	КонецЕсли;
	
	обМестнаяДоставка.Номер = Основание.Номер;
	
	Если ТипОснования = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		Если ТипЗнч(Основание.СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
			СкладОтправитель = Основание.СкладГруппа;
		Иначе
			СкладОтправитель = ПолучитьСкладИзГруппыДоступностиСкладов(Основание.СкладГруппа);
		КонецЕсли;
		
		Если СкладОтправитель <> Справочники.Склады.ПустаяСсылка() Тогда
			обМестнаяДоставка.Грузоотправитель = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(СкладОтправитель);
			обМестнаяДоставка.ТочкаОтправления = обМестнаяДоставка.Грузоотправитель.ТочкаДоставки;
		КонецЕсли;
		
		обМестнаяДоставка.Грузополучатель = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.Контрагент);
		
		ЗаполнитьУсловияДоставкиИзОснования(обМестнаяДоставка, Основание);
		
		Если ЗначениеЗаполнено(обМестнаяДоставка.ТочкаОтправления) Тогда
			ВремяРаботы = ПолучитьРежимРаботыТочкиДоставки(обМестнаяДоставка.ТочкаОтправления, обМестнаяДоставка.ВремяПрибытияС);
			обМестнаяДоставка.ВремяОтправленияС = ВремяРаботы.ВремяНачала;
			обМестнаяДоставка.ВремяОтправленияПо = ВремяРаботы.ВремяОкончания;
			обМестнаяДоставка.ВремяПребыванияГрузоотправителя = ВремяРаботы.ВремяПребывания;
		КонецЕсли;
		
		обГруз.Спецификация.Очистить();
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, ПолучитьТаблицуСпецификацииЗаказа(Основание.Ссылка, "Товары"));
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, ПолучитьТаблицуСпецификацииЗаказа(Основание.Ссылка, "ВозвратнаяТара"));
		
		обГруз.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.ВалютаДокумента);
		
	ИначеЕсли ТипОснования = Тип("ДокументОбъект.ЗаказПоставщику") Тогда	
		
		обМестнаяДоставка.Грузополучатель = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.Склад);
		обМестнаяДоставка.Грузоотправитель = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.Контрагент);
		обМестнаяДоставка.ТочкаПрибытия    = обМестнаяДоставка.Грузополучатель.ТочкаДоставки;
		
		ЗаполнитьУсловияДоставкиИзОснования(обМестнаяДоставка, Основание);
		
		Если ЗначениеЗаполнено(обМестнаяДоставка.ТочкаПрибытия) Тогда
			ВремяРаботы = ПолучитьРежимРаботыТочкиДоставки(обМестнаяДоставка.ТочкаПрибытия, обМестнаяДоставка.ВремяПрибытияС);
			обМестнаяДоставка.ВремяОтправленияС = ВремяРаботы.ВремяНачала;
			обМестнаяДоставка.ВремяОтправленияПо = ВремяРаботы.ВремяОкончания;
			обМестнаяДоставка.ВремяПребыванияГрузоотправителя = ВремяРаботы.ВремяПребывания;
		КонецЕсли;
		
		обГруз.Спецификация.Очистить();
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, ПолучитьТаблицуСпецификацииЗаказа(Основание.Ссылка, "Товары"));
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, ПолучитьТаблицуСпецификацииЗаказа(Основание.Ссылка, "ВозвратнаяТара"));
		
		обГруз.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.ВалютаДокумента);
		
	ИначеЕсли ТипОснования	= Тип("ДокументОбъект.ВнутреннийЗаказ") Тогда
		
		//МестнаяДоставка.Грузоотправитель = ПолучитьОбъектУТЛ(Основание.Контрагент);
		
		Если ТипЗнч(Основание.Заказчик) = Тип("СправочникСсылка.Склады") Тогда
			обМестнаяДоставка.Грузополучатель = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.Заказчик);
		КонецЕсли;
		
		ЗаполнитьУсловияДоставкиИзОснования(обМестнаяДоставка, Основание);
		
		обГруз.Спецификация.Очистить();
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, Основание.Товары.Выгрузить());
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, Основание.ВозвратнаяТара.Выгрузить());
		
	ИначеЕсли ТипОснования	= Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		обМестнаяДоставка.Грузоотправитель = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.Склад);
		обМестнаяДоставка.ТочкаОтправления = обМестнаяДоставка.Грузоотправитель.ТочкаДоставки;
		обМестнаяДоставка.Грузополучатель  = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.Контрагент);
		
		ЗаполнитьУсловияДоставкиИзОснования(обМестнаяДоставка, Основание);
		
		Если ЗначениеЗаполнено(обМестнаяДоставка.ТочкаОтправления) Тогда
			ВремяРаботы = ПолучитьРежимРаботыТочкиДоставки(обМестнаяДоставка.ТочкаОтправления, обМестнаяДоставка.ВремяПрибытияС);
			обМестнаяДоставка.ВремяОтправленияС = ВремяРаботы.ВремяНачала;
			обМестнаяДоставка.ВремяОтправленияПо = ВремяРаботы.ВремяОкончания;
			обМестнаяДоставка.ВремяПребыванияГрузоотправителя = ВремяРаботы.ВремяПребывания;
		КонецЕсли;
		
		обГруз.Спецификация.Очистить();
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, Основание.Товары.Выгрузить());
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, Основание.ВозвратнаяТара.Выгрузить());
		
		обГруз.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.ВалютаДокумента);
		
	ИначеЕсли ТипОснования = Тип("ДокументОбъект.КорректировкаЗаказаПокупателя") Тогда
		
		ЗаполнитьУсловияДоставкиИзОснования(обМестнаяДоставка, Основание);
		
		обГруз.Спецификация.Очистить();
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, ПолучитьТаблицуСпецификацииЗаказа(Основание.ЗаказПокупателя, "Товары"));
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, ПолучитьТаблицуСпецификацииЗаказа(Основание.ЗаказПокупателя, "ВозвратнаяТара"));
		
		обГруз.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.ВалютаДокумента);
		
	ИначеЕсли ТипОснования = Тип("ДокументОбъект.КорректировкаЗаказаПоставщику") Тогда
		
		ЗаполнитьУсловияДоставкиИзОснования(обМестнаяДоставка, Основание);
		
		обГруз.Спецификация.Очистить();
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, ПолучитьТаблицуСпецификацииЗаказа(Основание.ЗаказПоставщику, "Товары"));
		ДобавитьДанныеИзТабличнойЧастиВСпецификацию(обГруз, Основание.Ссылка, ПолучитьТаблицуСпецификацииЗаказа(Основание.ЗаказПоставщику, "ВозвратнаяТара"));
		
		обГруз.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.ВалютаДокумента);
		
		
	ИначеЕсли ТипОснования = Тип("ДокументОбъект.КорректировкаВнутреннегоЗаказа") Тогда
		
		Если ТипЗнч(Основание.Заказчик) = Тип("СправочникСсылка.Склады") Тогда
			обМестнаяДоставка.Грузополучатель = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.ВнутреннийЗаказ.Заказчик);
		КонецЕсли;
		
		ЗаполнитьУсловияДоставкиИзОснования(обМестнаяДоставка, Основание);
		
		обГруз.Спецификация.Очистить();
		
		обГруз.Валюта = новаИнтеграцияСвязьОбъектов.ПолучитьОбъектУТЛ(Основание.ВнутреннийЗаказ.ВалютаДокумента);
	Иначе	
		ВызватьИсключение Строка(ТипОснования) + ": Тип основания не поддерживается!";
	КонецЕсли;
	
	обГруз.Стоимость = обГруз.Спецификация.Итог("Стоимость");
	обГруз.Вес = обГруз.Спецификация.Итог("Вес");
	обГруз.Объем = обГруз.Спецификация.Итог("Объем");
	
	обГруз.Дата = ТекущаяДата();
	обГруз.Записать();
	
	обМестнаяДоставка.Груз = обГруз.Ссылка;
	обМестнаяДоставка.Дата = обГруз.Дата;
	обМестнаяДоставка.Записать();
	Если Не обМестнаяДоставка.Стартован Тогда
		обМестнаяДоставка.Старт();
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.новаСвязьДокументовДоставки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Основание.Ссылка);
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(обМестнаяДоставка.Ссылка);
	Запись = НаборЗаписей.Добавить();
	Запись.Документ = Основание.Ссылка;
	Запись.БизнесПроцесс = обМестнаяДоставка.Ссылка;
	НаборЗаписей.Записать();
КонецПроцедуры		

Процедура КорректироватьМестнуюДоставку(Документ, Отказ, РежимПроведения) Экспорт
	
	
	Если ТипЗнч(Документ) <> Тип("ДокументОбъект.ФактическийПриходЗаказовНаСклад") Тогда
		
		БезусловноеПроведениеДокументаОснования = ложь;
		
		//новаИнтеграцияСвязьОбъектов.ПолучитьЗначениеКонстанты("новаРазрешитьПерепроведениеОснованияМестнойДоставки");
		
		Если Не РольДоступна("новаАдминистраторУТЛ")
		   И Не РольДоступна("новаПользовательУТЛ") Тогда
		   
			Если Документ.ДополнительныеСвойства.Свойство("ФормаДокументаОткрыта") Тогда
				МестнаяДоставка = новаИнтеграция.ПолучитьМестнуюДоставкуПоОснованию(Документ.Ссылка);	
				Если МестнаяДоставка = Неопределено Тогда
					ЗавершеннаяМестнаяДоставка = ПолучитьЗавершеннуюМестнуюДоставкуПоОснованию(Документ.Ссылка);
				Иначе	
					ЗавершеннаяМестнаяДоставка = Неопределено;
				КонецЕсли;
			КонецЕсли;
		  
			Если МестнаяДоставка <> Неопределено Или ЗавершеннаяМестнаяДоставка <> Неопределено Тогда
				Если БезусловноеПроведениеДокументаОснования Тогда
					#Если Клиент Тогда
					Сообщить("По данному заказу существует Заказ на доставку. Изменение документа приведет к некорректным данным в Заказе на доставку!");
					#КонецЕсли
				Иначе	
					ОбщегоНазначения.СообщитьОбОшибке("По данному заказу существует Заказ на доставку. Проведение невозможно!", Отказ);
				КонецЕсли;	
			КонецЕсли;	
			Возврат;
		КонецЕсли;
			
		Если ПараметрыСеанса.новаДокументыОснованияМестнойДоставки.СодержитТип(ТипЗнч(Документ)) Тогда	
			УсловияПроведения = ПроверитьВозможностьПроведенияОснованияИСозданияДоставки(Документ);
			Если УсловияПроведения.ПроводитьДокумент Тогда
				Если УсловияПроведения.КорректироватьДоставку Тогда
					Если ПроверитьНеобходимостьДоставки(Документ) Тогда
						СоздатьМестнуюДоставку(Документ);
					КонецЕсли;
				КонецЕсли;	
			Иначе
				Если БезусловноеПроведениеДокументаОснования Тогда
					#Если Клиент Тогда
					Сообщить("По данному заказу существует Заказ на доставку. Изменение документа приведет к некорректным данным в Заказе на доставку!");
					#КонецЕсли
				Иначе	
					ОбщегоНазначения.СообщитьОбОшибке("Заказ на доставку включен в рейс. Проведение невозможно!",Отказ);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры		

Процедура УдалитьМестнуюДоставкуПриУдаленииОснования(Документ, Отказ) Экспорт
	Если Не	Отказ Тогда
		
		//+++ БАО 03.07.2017 №1250 
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(Документ) = Тип("ДокументОбъект.Фрахт") Или ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаборТовара") Тогда
		//--- БАО 03.07.2017 №	
			новаИнтеграцияСвязьОбъектов.ЗавершитьМестнуюДоставку(Документ.Ссылка, Отказ);
		//+++ БАО 03.07.2017 №1250
		КонецЕсли;
		//--- БАО 03.07.2017 №1250
	КонецЕсли;	
КонецПроцедуры	

Процедура ДокументКорректировкиЗаказаПередЗаписью(Документ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если НЕ Документ.Проведен Тогда
		//Если корректировка не проведена, то её надо обрабатывать так, как будто это запись из формы
	    Документ.ДополнительныеСвойства.Вставить("ФормаДокументаОткрыта", Истина);
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьРежимРаботыТочкиДоставки(ТочкаДоставки, ДатаЗаказа)
	
	НачальныйДеньНедели = ДеньНедели(ДатаЗаказа);
	
	СтрокаГрафика = ТочкаДоставки.ГрафикРаботы[НачальныйДеньНедели-1];
	
	СтруктураРаботы = Новый Структура;
	
	СтруктураРаботы.Вставить("ВремяНачала", НачалоДня(ДатаЗаказа) + (СтрокаГрафика.ВремяНачала - '00010101'));
	СтруктураРаботы.Вставить("ВремяОкончания", НачалоДня(ДатаЗаказа) + (СтрокаГрафика.ВремяОкончания - '00010101'));
	СтруктураРаботы.Вставить("ВремяПребывания", СтрокаГрафика.ВремяПребывания);
	
	Возврат СтруктураРаботы;
КонецФункции	
/////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры для формирования местной доставки

//-----------------------------------------------------------------------------
// Процедуры и функции заполнения спецификации доставки по документам-основаниям
//

Функция ПолучитьСкладИзГруппыДоступностиСкладов(ГруппаДоступности)

	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоставГрупп.Склад КАК Склад
	|ИЗ
	|	РегистрСведений.СоставГруппДоступностиСкладов КАК СоставГрупп
	|ГДЕ
	|   СоставГрупп.ГруппаДоступности = &ГруппаДоступности"
	;
	Запрос.УстановитьПараметр("ГруппаДоступности", ГруппаДоступности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Склад;
	Иначе
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;	

КонецФункции // ПолучитьСкладИзГруппыДоступностиСкладов(СкладГруппа)()
 

// Получает спецификацию из документа-заказа с учетом введенных корректировок
//
// Параметры
//  Заказ  		 			 - ДокументСсылка. Заказ покупателя или заказ поставщику
//                
//  ИсключаемаяКорректировка - ДокументСсылка. Корректировка заказа, которая не должна учитываться.
//                             используется при отмене проведения корректировки
//
//  ИмяТабличнойЧасти		 - Строка. Имя табличной части документа.
//
// Возвращаемое значение:
//   ТаблицаТоваров   		 - Таблица значений.
//
Функция ПолучитьТаблицуСпецификацииЗаказа(Заказ, ИмяТабличнойЧасти, ИсключаемаяКорректировка = Неопределено) Экспорт
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	
		ОсновнаяТаблица 	 = "ЗаказПокупателя";
		ТаблицаКорректировки = "КорректировкаЗаказаПокупателя";
		
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	
		ОсновнаяТаблица 	 = "ЗаказПоставщику";
		ТаблицаКорректировки = "КорректировкаЗаказаПоставщику";
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		ЕдиницаИзмерения = "ЕдиницаИзмерения"; 
	Иначе
		ЕдиницаИзмерения = "Номенклатура.ЕдиницаХраненияОстатков";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОсновнойЗаказ.Номенклатура КАК Номенклатура,
	|	ОсновнойЗаказ."+ЕдиницаИзмерения+" КАК ЕдиницаИзмерения,
	|	ОсновнойЗаказ.Количество КАК Количество,
	|	ОсновнойЗаказ.Сумма КАК Сумма
	|ИЗ
	|	Документ."+ОсновнаяТаблица+"."+ИмяТабличнойЧасти+" КАК ОсновнойЗаказ
	|ГДЕ
	|	ОсновнойЗаказ.Ссылка = &Заказ
	|	И ОсновнойЗаказ.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаЗаказа.Номенклатура,
	|	КорректировкаЗаказа."+ЕдиницаИзмерения+",
	|	КорректировкаЗаказа.Количество,
	|	КорректировкаЗаказа.Сумма
	|ИЗ
	|	Документ."+ТаблицаКорректировки+"."+ИмяТабличнойЧасти+" КАК КорректировкаЗаказа
	|ГДЕ
	|	КорректировкаЗаказа.Ссылка."+ОсновнаяТаблица+" = &Заказ
	|	И КорректировкаЗаказа.Ссылка.Проведен = ИСТИНА"
	;
	
	Если ИсключаемаяКорректировка <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И КорректировкаЗаказа.Ссылка <> &ИсключаемаяКорректировка";
		Запрос.УстановитьПараметр("ИсключаемаяКорректировка", ИсключаемаяКорректировка);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	ТЧТовары = Запрос.Выполнить().Выгрузить();
	ТЧТовары.Свернуть("Номенклатура, ЕдиницаИзмерения", "Количество, Сумма"); 
	
	Возврат ТЧТовары;
	

КонецФункции // ПолучитьТаблицуСпецификацииЗаказа()

Функция ВыбратьУзлы(Дерево,СписокУзлов=Неопределено)
    Если СписокУзлов=Неопределено Тогда
 		СписокУзлов=Новый Массив;
    КонецЕсли;
    Для каждого Узел Из Дерево.Строки Цикл
		СписокУзлов.Добавить(Узел);
		ВыбратьУзлы(Узел,СписокУзлов);
    КонецЦикла; 
    Возврат СписокУзлов;
КонецФункции //ВыбратьУзлы

Функция ПолучитьСвязанныеДокументы()

	СвязанныеДокументы = Новый ТаблицаЗначений;
	СвязанныеДокументы.Колонки.Добавить("Документ");
	СвязанныеДокументы.Колонки.Добавить("Основание");
	СвязанныеДокументы.Колонки.Добавить("Реквизит");
	
	НоваяСтрока = СвязанныеДокументы.Добавить();
	НоваяСтрока.Документ 	= "ВнутреннийЗаказ";
	НоваяСтрока.Основание 	= "ПеремещениеТоваров";
	НоваяСтрока.Реквизит 	= "ВнутреннийЗаказ";

	НоваяСтрока = СвязанныеДокументы.Добавить();
	НоваяСтрока.Документ 	= "ЗаказПокупателя";
	НоваяСтрока.Основание 	= "ЗаказПоставщику";
	НоваяСтрока.Реквизит 	= "ДокументОснование";
	
	НоваяСтрока = СвязанныеДокументы.Добавить();
	НоваяСтрока.Документ 	= "ЗаказПокупателя";
	НоваяСтрока.Основание 	= "РеализацияТоваровУслуг";
	НоваяСтрока.Реквизит 	= "Сделка";
	
	НоваяСтрока = СвязанныеДокументы.Добавить();
	НоваяСтрока.Документ 	= "ЗаказПоставщику";
	НоваяСтрока.Основание 	= "ЗаказПокупателя";
	НоваяСтрока.Реквизит 	= "ДокументОснование";
	
	НоваяСтрока = СвязанныеДокументы.Добавить();
	НоваяСтрока.Документ 	= "ЗаказПоставщику";
	НоваяСтрока.Основание 	= "ПоступлениеТоваровУслуг";
	НоваяСтрока.Реквизит 	= "Сделка";

	НоваяСтрока = СвязанныеДокументы.Добавить();
	НоваяСтрока.Документ 	= "РеализацияТоваровУслуг";
	НоваяСтрока.Основание 	= "СчетФактураВыданный";
	НоваяСтрока.Реквизит 	= "ДокументОснование";
	
	Возврат СвязанныеДокументы;
	
КонецФункции // ПолучитьСвязанныеДокументы()

Процедура ВывестиДокументыПоСписку(СтрокаДерева, мДерево, соНайденныеДокументы, СвязанныеДокументы, Родительские)
	
	ТекущийДокумент = СтрокаДерева.Ссылка;	
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	Отбор = Новый Структура(?(Родительские, "Основание", "Документ"), ТекущийДокумент.Метаданные().Имя);
	Строки = СвязанныеДокументы.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 Тогда
	
		Для каждого Строка Из Строки Цикл
			
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
				|ВЫБРАТЬ ", "
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ") + "
				|Дата, Ссылка, Проведен, ПометкаУдаления" +  ?(Родительские, "
				|ИЗ Документ." + Строка.Документ + "
				|ГДЕ Ссылка = &Ссылка", "
				|ИЗ Документ." + Строка.Основание + "
				|ГДЕ " + Строка.Реквизит +" = &ДокументОснование"); 
		
		КонецЦикла;
		
		Если Родительские Тогда
			Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент[Строка.Реквизит]);		
		Иначе
			Запрос.УстановитьПараметр("ДокументОснование", ТекущийДокумент);		
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
		
		Выборка = Запрос.Выполнить().Выбрать();	
		Пока Выборка.Следующий() Цикл
			Если соНайденныеДокументы[Выборка.Ссылка] = Неопределено Тогда
				НоваяСтрока = СтрокаДерева.Строки.Добавить();
				НоваяСтрока.Ссылка = Выборка.Ссылка;
				НоваяСтрока.Проведен = Выборка.Проведен;
				НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;		
				соНайденныеДокументы.Вставить(Выборка.Ссылка, Истина);
				ВывестиДокументыПоСписку(НоваяСтрока, мДерево, соНайденныеДокументы, СвязанныеДокументы, Родительские);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПроверитьВозможностьПроведенияОснованияИСозданияДоставки(Основание)
	
	Перем Условия;
	Перем ДопСвойста;
	
	Условия = Новый Структура;
	Условия.Вставить("ПроводитьДокумент", Истина);
	Условия.Вставить("КорректироватьДоставку", Истина);
	
	МестнаяДоставка = новаИнтеграция.ПолучитьМестнуюДоставкуПоОснованию(Основание.Ссылка);
		
	Если МестнаяДоставка <> Неопределено Тогда
		Рейс = ПолучитьРейсПоМестнойДоставке(МестнаяДоставка); 
		Если Рейс <> Неопределено Тогда
			Условия.КорректироватьДоставку = Ложь;
			Условия.ПроводитьДокумент = Ложь;
		КонецЕсли;
	Иначе
		МестнаяДоставка = новаИнтеграция.ПолучитьЗавершеннуюМестнуюДоставкуПоОснованию(Основание.Ссылка);
		Если МестнаяДоставка <> Неопределено Тогда
			Условия.КорректироватьДоставку = Ложь;
			Условия.ПроводитьДокумент = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Условия;	
КонецФункции
	
Функция ПроверитьНеобходимостьДоставки(Основание)
	Перем Выборка;
	
	ДополнительныеСвойстваДокумента = Основание.ДополнительныеСвойства;	
	ДополнительныеСвойстваДокумента.Свойство("ДополнительныеСвойства", Выборка);
	
	// Если дополнительных свойств нет, значит запись не из формы, тогда читаем регистр
	Если Выборка = Неопределено Тогда
		Выборка = РегистрыСведений.новаРеквизитыУсловийДоставки.Выбрать(Новый Структура("Документ", Основание.Ссылка));
		Выборка.Следующий();
	КонецЕсли;	
	
	Возврат Выборка.ТребуетсяДоставка;
	
КонецФункции	

Функция ПолучитьРейсПоМестнойДоставке(МестнаяДоставка) Экспорт
	
	Возврат новаИнтеграцияСвязьОбъектов.ПолучитьРейсПоМестнойДоставке(МестнаяДоставка);
	
КонецФункции

Функция ТекущееСостояниеРейса(Рейс) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	новаЗадачаРейсаМестнойДоставки.Роль,
	|	новаЗадачаРейсаМестнойДоставки.Выполнена
	|ИЗ
	|	Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
	|ГДЕ
	|	новаЗадачаРейсаМестнойДоставки.БизнесПроцесс = &Рейс"
	;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТекСтрока = Результат.Найти(Ложь, "Выполнена");
	
	Если ТекСтрока <> Неопределено Тогда
		Возврат ТекСтрока.Роль;
	Иначе
		Возврат "Рейс завершен";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПлановоеВремяПосещенияТочки(Рейс, Точка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	новаТочкиМаршрутаРейсов.ПлановаяДатаПосещения,
	|	новаТочкиМаршрутаРейсов.ПлановоеВремяПосещения
	|ИЗ
	|	РегистрСведений.новаТочкиМаршрутаРейсов КАК новаТочкиМаршрутаРейсов
	|ГДЕ
	|	новаТочкиМаршрутаРейсов.Рейс = &Рейс
	|	И новаТочкиМаршрутаРейсов.ТочкаМаршрута = &ТочкаМаршрута"
	;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", Точка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПлановаяДатаПосещения;
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции	

