
#Область ОбменСИТРП

Процедура РегламентВыгрузкаДанныхВИТРП() Экспорт
	УзелПланаОбмена = ПланыОбмена.ОбменСИТРП.НайтиПоКоду("ITRP");
	
	Если УзелПланаОбмена.Пустая() Тогда
		Сообщить("УзелПланаОбмена не найден");
		Возврат;
	КонецЕсли;	
	
	Прокси = ПолучитьПроксиИТРП(УзелПланаОбмена);
	
	ВыгрузкаПодразделений(УзелПланаОбмена, Прокси);
	ВыгрузкаСотрудников(УзелПланаОбмена, Прокси);
	ВыгрузкаСписокПодсистемКонфигурации(УзелПланаОбмена, Прокси);
	
	НаборЗаписей = РегистрыСведений.ПараметрыРегламентныхЗаданий.СоздатьНаборЗаписей();
	Ключ = "ДатаЗагрузкиДанныхВИТРП";
	
	НаборЗаписей.Отбор.Ключ.Установить(Ключ);
	Запись = НаборЗаписей.Добавить();
	Запись.Значение = lem.ДатаВСтроку(ТекущаяДата());
	Запись.Ключ = Ключ;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьПроксиИТРП(УзелПланаОбмена)
	WSОпр = Новый WSОпределения(УзелПланаОбмена.АдресWebСервиса, УзелПланаОбмена.ИмяПользователя, УзелПланаОбмена.ПарольПользователя);	
	Прокси = Новый WSПрокси(WSОпр, "http://www.strizh.org/exchange_utl", "ExchangeUTL", "ExchangeUTLSoap");
	Прокси.Пользователь = УзелПланаОбмена.ИмяПользователя;
	Прокси.Пароль = УзелПланаОбмена.ПарольПользователя;
	
	Возврат Прокси;
КонецФункции	

Процедура УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, МенеджерДанных)
	Для Сч = 0 По СписокСсылокXDTO.data.Количество() - 1 Цикл
		UIDD = Новый УникальныйИдентификатор(СписокСсылокXDTO.data[Сч]);
		Ссылка = МенеджерДанных.ПолучитьСсылку(UIDD);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена, Ссылка);
	КонецЦикла;
КонецПроцедуры	

Процедура ВыгрузкаПодразделений(УзелПланаОбмена, Прокси)
	
	Попытка
		МассивПодразделенийТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfUnit");
		ПодразделениеТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "Unit");
		
		МассивПодразделений = Прокси.ФабрикаXDTO.Создать(МассивПодразделенийТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПодразделенияИзменения.Ссылка КАК СсылкаПодразделение,
		            |	ПодразделенияИзменения.Ссылка.Родитель.Ссылка КАК СсылкаРодителя,
		            |	ПодразделенияИзменения.Ссылка.Код КАК code,
		            |	ПодразделенияИзменения.Ссылка.Наименование КАК name,
		            |	ПодразделенияИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
		            |	ВЫБОР
		            |		КОГДА ПодразделенияИзменения.Ссылка.Родитель ЕСТЬ NULL
		            |			ТОГДА 0
		            |		КОГДА ПодразделенияИзменения.Ссылка.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 1
		            |		КОГДА ПодразделенияИзменения.Ссылка.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 2
		            |		КОГДА ПодразделенияИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 3
		            |		КОГДА ПодразделенияИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 4
		            |		КОГДА ПодразделенияИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 5
		            |		КОГДА ПодразделенияИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 6
		            |		ИНАЧЕ 7
		            |	КОНЕЦ КАК Уровень
		            |ИЗ
		            |	Справочник.Подразделения.Изменения КАК ПодразделенияИзменения
		            |ГДЕ
		            |	ПодразделенияИзменения.Узел.Ссылка = &УзелПланаОбмена
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	Уровень";
		
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		Рез = Зап.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				Подразделение = Прокси.ФабрикаXDTO.Создать(ПодразделениеТип);
				ЗаполнитьЗначенияСвойств(Подразделение, Выб);
				
				Подразделение.id = Выб.СсылкаПодразделение.УникальныйИдентификатор();
				Если ЗначениеЗаполнено(Выб.СсылкаРодителя) Тогда
					Подразделение.parentId = Выб.СсылкаРодителя.УникальныйИдентификатор();
				КонецЕсли;
				
				МассивПодразделений.Unit.Добавить(Подразделение);
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивПодразделений);
			Результат = ЗаписьXML.Закрыть();	
			
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadUnit(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
			
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.Подразделения);
		КонецеСли;
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры	

Процедура ВыгрузкаСотрудников(УзелПланаОбмена, Прокси)
	
	Попытка
		МассивСотрудникиТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfWorker");
		СотрудникТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "Worker");
		
		МассивСотрудников = Прокси.ФабрикаXDTO.Создать(МассивСотрудникиТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	СотрудникиИзменения.Ссылка КАК СсылкаСотрудник,
		|	СотрудникиИзменения.Ссылка.Код КАК code,
		|	СотрудникиИзменения.Ссылка.Наименование КАК name,
		|	СотрудникиИзменения.Ссылка.ПометкаУдаления КАК isDeleting
		|ИЗ
		|	Справочник.Сотрудники.Изменения КАК СотрудникиИзменения
		|ГДЕ
		|	СотрудникиИзменения.Узел.Ссылка = &УзелПланаОбмена";
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		Рез = Зап.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				Сотрудник = Прокси.ФабрикаXDTO.Создать(СотрудникТип);
				ЗаполнитьЗначенияСвойств(Сотрудник, Выб);
				
				Сотрудник.id = Выб.СсылкаСотрудник.УникальныйИдентификатор();
				
				МассивСотрудников.Worker.Добавить(Сотрудник);
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивСотрудников);
			Результат = ЗаписьXML.Закрыть();	
			
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadWorker(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
			
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.Сотрудники);
		КонецеСли;
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры	

Процедура ВыгрузкаСписокПодсистемКонфигурации(УзелПланаОбмена, Прокси)
	
	Попытка
		МассивСПКТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfListConfSystem");
		СПКТип = Прокси.ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "ListConfSystem");
		
		МассивСПК = Прокси.ФабрикаXDTO.Создать(МассивСПКТип);
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	СписокПодсистемКонфигурацииИзменения.Ссылка КАК СсылкаСПК,
		            |	СписокПодсистемКонфигурацииИзменения.Ссылка.Код КАК code,
		            |	СписокПодсистемКонфигурацииИзменения.Ссылка.Наименование КАК name,
		            |	СписокПодсистемКонфигурацииИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
		            |	СписокПодсистемКонфигурацииИзменения.Ссылка.ДатаДобавления КАК Date,
		            |	СписокПодсистемКонфигурацииИзменения.Ссылка.ПодсистемаУдалена КАК isDeletSub,
		            |	СписокПодсистемКонфигурацииИзменения.Ссылка.Родитель КАК СсылкаРодителя,
		            |	ВЫБОР
		            |		КОГДА СписокПодсистемКонфигурацииИзменения.Ссылка.Родитель ЕСТЬ NULL
		            |			ТОГДА 0
		            |		КОГДА СписокПодсистемКонфигурацииИзменения.Ссылка.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 1
		            |		КОГДА СписокПодсистемКонфигурацииИзменения.Ссылка.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 2
		            |		КОГДА СписокПодсистемКонфигурацииИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 3
		            |		КОГДА СписокПодсистемКонфигурацииИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 4
		            |		КОГДА СписокПодсистемКонфигурацииИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 5
		            |		КОГДА СписокПодсистемКонфигурацииИзменения.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель ЕСТЬ NULL
		            |			ТОГДА 6
		            |		ИНАЧЕ 7
		            |	КОНЕЦ КАК Уровень
		            |ИЗ
		            |	Справочник.СписокПодсистемКонфигурации.Изменения КАК СписокПодсистемКонфигурацииИзменения
		            |ГДЕ
		            |	СписокПодсистемКонфигурацииИзменения.Узел.Ссылка = &УзелПланаОбмена
		            |
		            |УПОРЯДОЧИТЬ ПО
		            |	Уровень";
		Зап.УстановитьПараметр("УзелПланаОбмена", УзелПланаОбмена);
		Рез = Зап.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат;
		Иначе
			Выб = Рез.Выбрать();
			
			Пока Выб.Следующий() Цикл
				СПК = Прокси.ФабрикаXDTO.Создать(СПКТип);
				ЗаполнитьЗначенияСвойств(СПК, Выб);
				
				СПК.id = Выб.СсылкаСПК.УникальныйИдентификатор();
				
				Если ЗначениеЗаполнено(Выб.СсылкаРодителя) Тогда
					СПК.parentId = Выб.СсылкаРодителя.УникальныйИдентификатор();
				КонецЕсли;

				МассивСПК.ListConfSystem.Добавить(СПК);
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивСПК);
			Результат = ЗаписьXML.Закрыть();	
			
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			СписокКодов = Прокси.loadListConfSystem(Хр);
			
			Зап = СписокКодов.Получить();
			Чт = Новый ЧтениеXML();
			Чт.УстановитьСтроку(Зап);
			МассивГУИДТип = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
			СписокСсылокXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(Чт, МассивГУИДТип);
			
			УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, Справочники.СписокПодсистемКонфигурации);
		КонецеСли;
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры	


#КонецОбласти


// Якурнов 14.08.2018 9:51:22
Процедура ВыполнитьОбновлениеСправочникаСписокПодсистемКонфигурации() Экспорт
	
	Если НЕ РольДоступна("Админы") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПрисутствующихПодсистем = Новый Массив;
	
	Для Каждого Элем из Метаданные["Подсистемы"] Цикл
		ТекЭлем = Справочники.СписокПодсистемКонфигурации.НайтиПоНаименованию(Элем.Имя,Истина);
		Если ТекЭлем.Пустая() Тогда
			НовЭлем = Справочники.СписокПодсистемКонфигурации.СоздатьЭлемент();
			НовЭлем.Наименование = Элем.Имя;
			НовЭлем.ДатаДобавления = ТекущаяДата();
			НовЭлем.Записать();
			ТекЭлем = НовЭлем.Ссылка;
			//Сообщить("Создан: " + НовЭлем.Наименование);    
			
		КонецЕсли;
		
		Если ТекЭлем.ПодсистемаУдалена Тогда
				ЭлРед = ТекЭлем.ПолучитьОбъект();
				ЭлРед.ПодсистемаУдалена = Ложь;
				ЭлРед.Записать();
		КонецЕсли;		

		
		МассивПрисутствующихПодсистем.Добавить(ТекЭлем);
		
		Для Каждого ЭлемПод Из Элем.Подсистемы Цикл
			ТекЭлемПод = Справочники.СписокПодсистемКонфигурации.НайтиПоНаименованию(ЭлемПод.Имя,Истина);
			Если ТекЭлемПод.Пустая() Тогда
				НовЭлемПод = Справочники.СписокПодсистемКонфигурации.СоздатьЭлемент();
				НовЭлемПод.Наименование = ЭлемПод.Имя;
				
				НовЭлемПод.Родитель = ТекЭлем;
				
				НовЭлемПод.ДатаДобавления = ТекущаяДата();
				НовЭлемПод.Записать();
				
				ТекЭлемПод = НовЭлемПод.Ссылка;
				
				//Сообщить("Создан: " + НовЭлем.Наименование + " Родитель: " + ТекЭлем.Наименование);    
			Иначе
				Если ТекЭлемПод.Родитель <> ТекЭлем Тогда
					ЭлПодРед = ТекЭлемПод.ПолучитьОбъект();
					ЭлПодРед.Родитель = ТекЭлем;
					ЭлПодРед.Записать();
				КонецЕсли;
				Если ТекЭлемПод.ПодсистемаУдалена Тогда
					ЭлРедПод = ТекЭлемПод.ПолучитьОбъект();
					ЭлРедПод.ПодсистемаУдалена = Ложь;
					ЭлРедПод.Записать();
				КонецЕсли;		
			КонецЕсли;
			
			МассивПрисутствующихПодсистем.Добавить(ТекЭлемПод);
			
		КонецЦикла;
	КонецЦикла;
	
	//Проверяем на присутствие подсистемы в конфигурации
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокПодсистемКонфигурации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СписокПодсистемКонфигурации КАК СписокПодсистемКонфигурации
	               |ГДЕ
	               |	НЕ СписокПодсистемКонфигурации.Ссылка В (&МассивПрисутствующихПодсистем)
	               |	И НЕ СписокПодсистемКонфигурации.ПодсистемаУдалена";
	
	Запрос.УстановитьПараметр("МассивПрисутствующихПодсистем",МассивПрисутствующихПодсистем);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Ред = Выборка.Ссылка.ПолучитьОбъект();
		Ред.ПодсистемаУдалена = Истина;
		Ред.Записать();
	КонецЦикла;
	
	
КонецПроцедуры
