
Функция ЧекОткрыт(СерверККТ) Экспорт
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_RECEIPT_STATE);
	СерверККТ.queryData();
	
	ТипЧека  = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE);
	
	Если ТипЧека = СерверККТ.LIBFPTR_RT_CLOSED Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецеСли;	
КонецФункции	


Функция unixtime(ПараметрДата) Экспорт
	Возврат ПараметрДата - дата(1970,1,1,1,0,0);
КонецФункции

Функция ПечатьЧекаФФД_1_05(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДополнительныеПараметрыЧека,ЭтоВозврат = Ложь, ТипКассовогоЧека) Экспорт
	Попытка
		Струк = Новый Структура;
		
		
		Если ЧекОткрыт(СерверККТ) Тогда
			Рез = СерверККТ.cancelReceipt();
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецеСли;
		
		СерверККТ.setParam(1021, ДополнительныеПараметрыЧека.Кассир);
        СерверККТ.operatorLogin();
		
		СостояниеСмены = Ложь;
		СменаОткрыта(СерверККТ, СостояниеСмены);   //смена постоянно закрыта!!
		Если Не СостояниеСмены Тогда
			Кассир = УчетКассировСервер.ПолучитьКассира(КассаККМ.Владелец, КассаККМ, Истина);
			ОткрытьСменуНаККМ(СерверККТ, КассаККМ, Кассир);
			РаботаСКассовымСерверомСервер.ЗарегистрироватьОткрытиеСменыККМ(КассаККМ, Кассир);
		КонецеСли;	
		
		
		
		
		
		
		
		Если ЗначениеЗаполнено(ДополнительныеПараметрыЧека.НомерВнешнегоЗаказа) Тогда
			СерверККТ.setParam(1085, "Номер заказа Интернет-магазина");
			СерверККТ.setParam(1086, ДополнительныеПараметрыЧека.НомерВнешнегоЗаказа);
			СерверККТ.utilFormTlv();
			СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
			СерверККТ.setNonPrintableParam(1084, СоставнойАтрибут);
		КонецеСли;	
		//СерверККТ.setParam(1084, СоставнойАтрибут);

		
		
		ТипЧекаККТ = РаботаСКассовымСерверомСервер.ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипКассовогоЧека);
		//ксРаботаСККМСервер.ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипКассовогоЧека);
		
		Если ТипЧекаККТ = 1 Тогда
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL);
		ИначеЕсли ТипЧекаККТ = 2 Тогда	
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_RETURN);
		ИначеЕсли ТипЧекаККТ = 7 Тогда
				
			//СерверККТ.setParam(1177, ДополнительныеПараметрыЧека.ОснованиеКоррекции);
			СерверККТ.setParam(1178, ДополнительныеПараметрыЧека.ДатаДокументаОснования); //lem.unixtime(ДополнительныеПараметрыЧека.ДатаДокументаОснования)
			СерверККТ.setParam(1179, ДополнительныеПараметрыЧека.НомерДокументаОснования);
			СерверККТ.utilFormTlv();
			СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_CORRECTION);
		ИначеЕсли ТипЧекаККТ = 9 Тогда		
				
			//СерверККТ.setParam(1177, ДополнительныеПараметрыЧека.ОснованиеКоррекции);
			СерверККТ.setParam(1178, ДополнительныеПараметрыЧека.ДатаДокументаОснования); //lem.unixtime(ДополнительныеПараметрыЧека.ДатаДокументаОснования)
			СерверККТ.setParam(1179, ДополнительныеПараметрыЧека.НомерДокументаОснования);
			СерверККТ.utilFormTlv();
			СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_BUY_CORRECTION);
		КонецЕсли;	

		
		
		//Если ЭтоВозврат Тогда
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_RETURN);
		//Иначе
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL);
		//КонецеСли;
		//Если КассаККМ.НеВыводитьДанныеНаПечать Тогда
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY, Истина);
		//КонецеСли;
		// даем аттрибуты для передачи электронного чека
		
		///атрибуты информирования
		
		
		
		
		Если ТипЧекаККТ = 7 Или ТипЧекаККТ = 9 Тогда
				СерверККТ.setParam(1173, ДополнительныеПараметрыЧека.ТипКоррекции);
				
				
				// Основание для коррекции
				//СерверККТ.AttrNumber = 1174;
				//СерверККТ.BeginComplexAttribute();
				//СерверККТ.AttrNumber = 1177;
				//СерверККТ.AttrValue = ДополнительныеПараметрыЧека.ОснованиеКоррекции; // Наименование документа основания для коррекции
				//СерверККТ.WriteAttribute();
				//СерверККТ.AttrNumber = 1178;
				//СерверККТ.AttrValue = lem.unixtime(ДополнительныеПараметрыЧека.ДатаДокументаОснования); // (01.05.2017) Дата документа основания для коррекции 
				//СерверККТ.WriteAttribute();
				//СерверККТ.AttrNumber = 1179;
				//СерверККТ.AttrValue = ДополнительныеПараметрыЧека.НомерДокументаОснования; // Номер документа основания для коррекции
				//СерверККТ.WriteAttribute();
				//СерверККТ.EndComplexAttribute();	
				
			СерверККТ.setParam(1174, СоставнойАтрибут);
			
		Иначе
			
			СерверККТ.setParam(1008, СокрЛП(ДополнительныеПараметрыЧека.АдресИнформирования));
		КонецеСли;
		
		
		
		Рез = СерверККТ.openReceipt();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		ИтСум = 0;
		Если ТипЧекаККТ = 7 Или ТипЧекаККТ = 9 Тогда
			
			
			
			
				// Тип коррекции
				//СерверККТ.AttrNumber = 1173;
				//СерверККТ.AttrValue = ДополнительныеПараметрыЧека.ТипКоррекции; // Самостоятельно, 0
				//СерверККТ.WriteAttribute();
				
			Если ДополнительныеПараметрыЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_COMMODITY_NAME, "Коррекция прихода");
			Иначе 	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_COMMODITY_NAME, "Коррекция расхода");
			КонецЕсли;
			
				
				
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PRICE,  ДополнительныеПараметрыЧека.СуммаДокумента);
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_QUANTITY, 1);
			
			
			
			
			Если Не ЗначениеЗаполнено(ДополнительныеПараметрыЧека.СтавкаНДС) тогда   //проблема со ставкой 0 и 10
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
			ИначеЕсли ДополнительныеПараметрыЧека.СтавкаНДС = Справочники.СтавкиНДСФЗ54.БезНДС тогда	   
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_NO);
			ИначеЕсли ДополнительныеПараметрыЧека.СтавкаНДС = Справочники.СтавкиНДСФЗ54.НДС10 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT10);
			ИначеЕсли ДополнительныеПараметрыЧека.СтавкаНДС= Справочники.СтавкиНДСФЗ54.НДС0 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT0);					
			ИначеЕсли ДополнительныеПараметрыЧека.СтавкаНДС = Справочники.СтавкиНДСФЗ54.НДС18 Или ДополнительныеПараметрыЧека.СтавкаНДС = Справочники.СтавкиНДСФЗ54.НДС20 тогда	   
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
			КонецЕСли; 
			
			ИтСум = ДополнительныеПараметрыЧека.СуммаДокумента;
			
			
			Рез = СерверККТ.registration();
			
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Регистрация позиции, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		Иначе	
			Для каждого Тек Из ТаблицаТоваров Цикл
				Если Тек.Количество <= 0 Тогда
					продолжить;
				КонецЕсли;	
				
				
				ПП = 0;
				если ПП = 0 Тогда
					
					//код маркировки
					КодМаркировки = СокрЛП(Тек.КодМаркировки);
					Если ЗначениеЗаполнено(КодМаркировки) Тогда
						ПропускаемМаркировку= Ложь;
						Если СтрДлина(КодМаркировки) = 27 Или СтрДлина(КодМаркировки) = 31 Тогда
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_NOMENCLATURE_TYPE, СерверККТ.LIBFPTR_NT_SHOES);
						ИначеЕсли СтрДлина(КодМаркировки) = 21 Тогда	
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_NOMENCLATURE_TYPE, СерверККТ.LIBFPTR_NT_TOBACCO);
						ИначеЕсли СтрДлина(КодМаркировки) = 34 Тогда	
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_NOMENCLATURE_TYPE, СерверККТ.LIBFPTR_NT_FURS);
						Иначе
							ПропускаемМаркировку = Истина;
						КонецеСли;
						
						
						Если Не ПропускаемМаркировку Тогда
							Если СтрДлина(КодМаркировки) = 31 Тогда
								GTIN = Лев(КодМаркировки, 18);	
								SN = Прав(КодМаркировки, СтрДлина(КодМаркировки) - 18);
							Иначе
								GTIN = Лев(КодМаркировки, 14);	
								SN = Прав(КодМаркировки, СтрДлина(КодМаркировки) - 14);
							Конецесли;	
							
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_GTIN, GTIN);
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_SERIAL_NUMBER, SN);
							СерверККТ.utilFormNomenclature();
							nomenclatureCode = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
							СерверККТ.setParam(1162, nomenclatureCode);			
							
							//Если Рез <> 0 тогда
							//	Струк.Вставить("Результат", Ложь);
							//	Струк.Вставить("КодОшибки", СерверККТ.errorCode());
							//	Струк.Вставить("ТекстОшибки", "Код маркировки, проблема");
							//	Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
							//	Возврат Струк;
							//КонецЕсли;
						КонецеСли;
					КонецеСли;
				КонецеСли;
				//код маркировки
				
				
				
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_COMMODITY_NAME, Тек.Наименование);
				
				//Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.ОплаченоВМагазине Тогда
				//	СерверККТ.setParam(1214, 4); //еще не тестировалось
				//	СерверККТ.setParam(1214, 10)
				//КонецеСли;	
				
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PRICE, Тек.Цена);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_QUANTITY, Тек.Количество);
				
				
				
				Если Не ЗначениеЗаполнено(Тек.СтавкаНДССпр) тогда   //проблема со ставкой 0 и 10
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
				ИначеЕсли Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.БезНДС тогда	   
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_NO);
				ИначеЕсли Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.НДС10 тогда
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT10);
				ИначеЕсли Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.НДС0 тогда
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT0);					
				ИначеЕсли Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.НДС18 Или Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.НДС20 тогда	   
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
				КонецЕСли;   
				
				
				
				
				ИтСум = ИтСум + Окр(Тек.Количество*Тек.Цена, 2);
				
				
				//			
				//LIBFPTR_AT_BANK_PAYING_AGENT - банковский платежный агент
				//LIBFPTR_AT_BANK_PAYING_SUBAGENT - банковский платежный субагент
				//LIBFPTR_AT_PAYING_AGENT - платежный агент
				//LIBFPTR_AT_PAYING_SUBAGENT - платежный субагент
				//LIBFPTR_AT_ATTORNEY - поверенный
				//LIBFPTR_AT_COMMISSION_AGENT - комиссионер
				//LIBFPTR_AT_ANOTHER - другой тип агента			
				
				//Если ДополнительныеПараметрыЧека.ВыводитьДанныеКонтрагента Тогда
				//	СерверККТ.AttrNumber=1222;
				//	СерверККТ.AttrValue= 6; //Признак АГЕНТ
				//	СерверККТ.WriteAttribute();				
				//КонецеСли;	
				
				
				//Если ДополнительныеПараметрыЧека.ВыводитьДанныеКонтрагента Тогда
				//	СерверККТ.AttrNumber=1226;
				//	СерверККТ.AttrValue= ДополнительныеПараметрыЧека.ИННКонтрагента; //ИНН Организации по агентскому договору.
				//	СерверККТ.WriteAttribute();
				//	СерверККТ.AttrNumber=1224;
				//	//ECR.WriteAttribute(); 
				//	СерверККТ.BeginComplexAttribute();
				//	СерверККТ.AttrNumber=1171; 
				//	СерверККТ.AttrValue = ДополнительныеПараметрыЧека.ТелефонКонтрагента; //Номер телефона Организации по агентскому договору 
				//	СерверККТ.WriteAttribute(); 
				//	СерверККТ.AttrNumber=1225; 
				//	СерверККТ.AttrValue = ДополнительныеПараметрыЧека.НаименованиеКонтрагента; //Наименование Организации по агентскому договору 
				//	СерверККТ.WriteAttribute();
				//	СерверККТ.EndComplexAttribute(); 
				//КонецеСли;
				
				
				
				Рез = СерверККТ.registration();
				
				Если Рез <> 0 тогда
					Струк.Вставить("Результат", Ложь);
					Струк.Вставить("КодОшибки", СерверККТ.errorCode());
					Струк.Вставить("ТекстОшибки", "Регистрация позиции, проблема");
					Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
					Возврат Струк;
				КонецЕсли;
			КонецЦикла;
		КонецеСли;
		
		
		Если ИтСум <> 0 Тогда
			Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
				//СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум);
			ИначеЕсли ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ТипыОплат.Терминал Тогда	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_ELECTRONICALLY);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум);
			Иначе	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_CASH);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум);				
			КонецеСли;
			
			Рез = СерверККТ.payment();		
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Регистрация оплаты, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		Рез = СерверККТ.closeReceipt();		
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Закрытие чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		
		Рез = СерверККТ.checkDocumentClosed();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Проверка чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		Результат = ПолучитьТекущиеПараметрыККМ(СерверККТ, ПараметрыЧека);
		
		Если Не Результат Тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", 1);
			Струк.Вставить("ТекстОшибки", "Получение параметров пробитого чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецеСли;	
		
	Исключение
		Струк.Вставить("Результат", Ложь);
		Струк.Вставить("КодОшибки", 111);
		Струк.Вставить("ТекстОшибки", ОписаниеОшибки());
		Струк.Вставить("ОписаниеОшибкиККМ", "");
		Возврат Струк;
		
	КонецПопытки;
	
	Струк.Вставить("Результат", Истина);
	Струк.Вставить("КодОшибки", 0);
	Струк.Вставить("ТекстОшибки", "all good");
	Струк.Вставить("ОписаниеОшибкиККМ", "all good");
	Возврат Струк;
КонецФункции	


Функция ПечатьЧекаФФД_1_2(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДополнительныеПараметрыЧека,ЭтоВозврат = Ложь, ТипКассовогоЧека) Экспорт
	Попытка
		Струк = Новый Структура;
		
		
		Если ЧекОткрыт(СерверККТ) Тогда
			Рез = СерверККТ.cancelReceipt();
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецеСли;
		
		СерверККТ.setParam(1021, ДополнительныеПараметрыЧека.Кассир);
        СерверККТ.operatorLogin();
		
		Попытка
			//стираем все запрошенные маркировки из памяти кассового аппарата
			СерверККТ.clearMarkingCodeValidationResult();
		Исключение
		КонецПопытки;		
		
		СостояниеСмены = Ложь;
		СменаОткрыта(СерверККТ, СостояниеСмены);   //смена постоянно закрыта!!
		Если Не СостояниеСмены Тогда
			Кассир = УчетКассировСервер.ПолучитьКассира(КассаККМ.Владелец, КассаККМ, Истина);
			ОткрытьСменуНаККМ(СерверККТ, КассаККМ, Кассир);
			РаботаСКассовымСерверомСервер.ЗарегистрироватьОткрытиеСменыККМ(КассаККМ, Кассир);
		КонецеСли;	
		
		
		
		
		
		
		
		Если ЗначениеЗаполнено(ДополнительныеПараметрыЧека.НомерВнешнегоЗаказа) Тогда		
			СерверККТ.setParam(1085, "Номер заказа Интернет-магазина");
			СерверККТ.setParam(1086, ДополнительныеПараметрыЧека.НомерВнешнегоЗаказа);
			СерверККТ.utilFormTlv();
			СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
			СерверККТ.setNonPrintableParam(1084, СоставнойАтрибут);
		КонецеСли;
		//СерверККТ.setParam(1084, СоставнойАтрибут);

		
		
		//ТипЧекаККТ = ксРаботаСККМСервер.ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипКассовогоЧека);
		ТипЧекаККТ = РаботаСКассовымСерверомСервер.ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипКассовогоЧека);
		
		Если ТипЧекаККТ = 1 Тогда
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL);
		ИначеЕсли ТипЧекаККТ = 2 Тогда	
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_RETURN);
		ИначеЕсли ТипЧекаККТ = 7 Тогда
				
			//СерверККТ.setParam(1177, ДополнительныеПараметрыЧека.ОснованиеКоррекции);
			СерверККТ.setParam(1178, ДополнительныеПараметрыЧека.ДатаДокументаОснования); //lem.unixtime(ДополнительныеПараметрыЧека.ДатаДокументаОснования)
			СерверККТ.setParam(1179, ДополнительныеПараметрыЧека.НомерДокументаОснования);
			СерверККТ.utilFormTlv();
			СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_CORRECTION);
		ИначеЕсли ТипЧекаККТ = 9 Тогда		
				
			//СерверККТ.setParam(1177, ДополнительныеПараметрыЧека.ОснованиеКоррекции);
			СерверККТ.setParam(1178, ДополнительныеПараметрыЧека.ДатаДокументаОснования); //lem.unixtime(ДополнительныеПараметрыЧека.ДатаДокументаОснования)
			СерверККТ.setParam(1179, ДополнительныеПараметрыЧека.НомерДокументаОснования);
			СерверККТ.utilFormTlv();
			СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_BUY_CORRECTION);
		КонецЕсли;	

		
		
		
		
		//Если ЭтоВозврат Тогда
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_RETURN);
		//Иначе
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL);
		//КонецеСли;
		//Если КассаККМ.НеВыводитьДанныеНаПечать Тогда
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY, Истина);
		//КонецеСли;
		// даем аттрибуты для передачи электронного чека
		Если ТипЧекаККТ = 7 Или ТипЧекаККТ = 9 Тогда
				СерверККТ.setParam(1173, ДополнительныеПараметрыЧека.ТипКоррекции);
				
				
				// Основание для коррекции
				//СерверККТ.AttrNumber = 1174;
				//СерверККТ.BeginComplexAttribute();
				//СерверККТ.AttrNumber = 1177;
				//СерверККТ.AttrValue = ДополнительныеПараметрыЧека.ОснованиеКоррекции; // Наименование документа основания для коррекции
				//СерверККТ.WriteAttribute();
				//СерверККТ.AttrNumber = 1178;
				//СерверККТ.AttrValue = lem.unixtime(ДополнительныеПараметрыЧека.ДатаДокументаОснования); // (01.05.2017) Дата документа основания для коррекции 
				//СерверККТ.WriteAttribute();
				//СерверККТ.AttrNumber = 1179;
				//СерверККТ.AttrValue = ДополнительныеПараметрыЧека.НомерДокументаОснования; // Номер документа основания для коррекции
				//СерверККТ.WriteAttribute();
				//СерверККТ.EndComplexAttribute();	
				
			СерверККТ.setParam(1174, СоставнойАтрибут);
			
		Иначе
			
			СерверККТ.setParam(1008, СокрЛП(ДополнительныеПараметрыЧека.АдресИнформирования));
		КонецеСли;
		///атрибуты информирования
		
		
		
		
		
		
		
		
		
		Рез = СерверККТ.openReceipt();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		ИтСум = 0;
		Если ТипЧекаККТ = 7 Или ТипЧекаККТ = 9 Тогда
			
			
			
			
			// Тип коррекции
			//СерверККТ.AttrNumber = 1173;
			//СерверККТ.AttrValue = ДополнительныеПараметрыЧека.ТипКоррекции; // Самостоятельно, 0
			//СерверККТ.WriteAttribute();
			
			Если ДополнительныеПараметрыЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_COMMODITY_NAME, "Коррекция прихода");
			Иначе 	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_COMMODITY_NAME, "Коррекция расхода");
			КонецЕсли;
			
			
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PRICE,  ДополнительныеПараметрыЧека.СуммаДокумента);
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_QUANTITY, 1);
			
			
			
			
			Если Не ЗначениеЗаполнено(ДополнительныеПараметрыЧека.СтавкаНДС) тогда   //проблема со ставкой 0 и 10
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
			ИначеЕсли ДополнительныеПараметрыЧека.СтавкаНДС = Справочники.СтавкиНДСФЗ54.БезНДС тогда	   
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_NO);
			ИначеЕсли ДополнительныеПараметрыЧека.СтавкаНДС = Справочники.СтавкиНДСФЗ54.НДС10 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT10);
			ИначеЕсли ДополнительныеПараметрыЧека.СтавкаНДС= Справочники.СтавкиНДСФЗ54.НДС0 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT0);					
			ИначеЕсли ДополнительныеПараметрыЧека.СтавкаНДС = Справочники.СтавкиНДСФЗ54.НДС18 Или ДополнительныеПараметрыЧека.СтавкаНДС = Справочники.СтавкиНДСФЗ54.НДС20 тогда	   
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
			КонецЕСли; 
			
			ИтСум = ДополнительныеПараметрыЧека.СуммаДокумента;
			
			
			Рез = СерверККТ.registration();
			
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Регистрация позиции, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		Иначе	
			
			Для каждого Тек Из ТаблицаТоваров Цикл
				Если Тек.Количество <= 0 Тогда
					продолжить;
				КонецЕсли;	
				
				
				
				//пробуем вынести это 19.03.2021 по письму Андриенко , не работает
				//СерверККТ.setParam(1222, СерверККТ.LIBFPTR_AT_ANOTHER);			
				
				//данные поставщика
				//Если ЗначениеЗаполнено(Тек.ПоставщикИНН) Тогда
				//	Если ЗначениеЗаполнено(Тек.ПоставщикТелефон) И ЗначениеЗаполнено(Тек.ПоставщикНаименование) Тогда
				//		СерверККТ.setParam(1171, ТолькоЦифры(Тек.ПоставщикТелефон));
				//		СерверККТ.setParam(1225, Тек.ПоставщикНаименование);
				//		СерверККТ.utilFormTlv();
				//		СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
				//		СерверККТ.setParam(1224, СоставнойАтрибут);
				//	конецеСли;	
				//	
				//	
				//	СерверККТ.setParam(1222, СерверККТ.LIBFPTR_AT_ANOTHER);			
				//	СерверККТ.setParam(1226, Тек.ПоставщикИНН);			
				//	
				//	
				//КонецеСли;
				
				ПропускаемМаркировку = Истина;
				//Если Константы.ксПередаватьНаККМКодыМаркировки.Получить() Тогда
					//код маркировки
					КодМаркировки = СокрЛП(Тек.КодМаркировки);
					
					//проверка кода маркировки ФФД 1.2
					Разделитель = Символ(29);
					
					//тест
					//КодМаркировки = СокрЛП(КодМаркировки);
					
					//КодМаркировки = СтрЗаменить(КодМаркировки,Разделитель,"");
					КМОбработанный1 = СтрЗаменить(КодМаркировки,"<GS>",Разделитель);
					КМОбработанный = СтрЗаменить(КМОбработанный1,"<gs>",Разделитель);
					//КМОбработанный = Лев(КодМаркировки, 31) + Разделитель + Сред(КодМаркировки, 32, 6) + Разделитель + Сред(КодМаркировки, 38);				
					//тест
					//КМОбработанный = КодМаркировки;
					Если ЗначениеЗаполнено(КМОбработанный) Тогда
						ПропускаемМаркировку = Ложь;
						Если СтрНайти(КМОбработанный, Разделитель) = 0 Тогда
							ПропускаемМаркировку = Истина;
						КонецеСли;	
						
						Если Не ПропускаемМаркировку Тогда
							Если ТипЧекаККТ = 1 Тогда
								status = 1;
							ИначеЕсли ТипЧекаККТ = 2 Тогда
								status = СерверККТ.LIBFPTR_MES_PIECE_RETURN;
							КонецЕсли;	
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_TYPE, СерверККТ.LIBFPTR_MCT12_AUTO);
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE, КМОбработанный);
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_STATUS, status);
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_WAIT_FOR_VALIDATION_RESULT, Истина);
							СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_PROCESSING_MODE, 0);					
							
							СерверККТ.beginMarkingCodeValidation();
							ВремяНачала = ТекущаяДата();
							ВремяОжидания = 60;
							
							// Начало проверки 
							Пока истина Цикл
								СерверККТ.getMarkingCodeValidationStatus();
								Если СерверККТ.getParamBool(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_VALIDATION_READY) тогда
									прервать;
								КонецЕсли;	
								Если ТекущаяДата() - ВремяНачала > ВремяОжидания тогда
									прервать;
								КонецЕсли;	
							КонецЦикла;
							
							validationResult = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_RESULT);
							
							СерверККТ.acceptMarkingCode();
							//ЗаписатьВБДРезультатПроверкиКМ(КассаККМ, ДополнительныеПараметрыЧека.ДокументЧек, Тек.Товар, validationResult);
							//Наш штрихкод проверен и занесен в память аппарата
							// Теперь его ОБЯЗАТЕЛЬНО надо повторить в самой продаже
							// Если этого не сделать - то ничего и не отошлется					КонецеСли;	
						КонецеСли;
					КонецЕСли;	
					//после 10.8.1 конец
					
				//КонецеСли;			
				
				//код маркировки
				
				
				
				//СерверККТ.setParam(1212, Тек.ПризнакПредметаРасчета);		//услуга 4	
				//СерверККТ.setParam(1214, 4);			
				//СерверККТ.setParam(1214, Тек.ПризнакСпособаРасчета);			
				
				
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_COMMODITY_NAME, Тек.Наименование);
				
				
				
				
				//Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.ОплаченоВМагазине Тогда
				//	СерверККТ.setParam(1214, 4); //еще не тестировалось
				//	СерверККТ.setParam(1214, 10)
				//КонецеСли;	
				
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PRICE, Тек.Цена);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_QUANTITY, Тек.Количество);
				СерверККТ.setParam(2108, 0);
				
				
				//изменено 27.10.2020
				//Если Тек.КодНалога = -2 или Тек.КодНалога = -1 тогда   //проблема со ставкой 0 и 10
				//Если Тек.КодНалога = -2 тогда   //проблема со ставкой 0 и 10
				//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
				//	//изменено 27.10.2020
				//ИначеЕсли Тек.КодНалога = 0 или Тек.КодНалога = -1 тогда	   
				//	//изменено 27.10.2020
				//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_NO);
				//ИначеЕсли Тек.КодНалога = 10 тогда
				//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT10);
				//ИначеЕсли Тек.КодНалога = 18 Или Тек.КодНалога = 20 тогда	   
				//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
				//КонецЕСли;   
				
				Если Не ЗначениеЗаполнено(Тек.СтавкаНДССпр) тогда   //проблема со ставкой 0 и 10
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
				ИначеЕсли Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.БезНДС тогда	   
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_NO);
				ИначеЕсли Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.НДС10 тогда
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT10);
				ИначеЕсли Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.НДС0 тогда
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT0);					
				ИначеЕсли Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.НДС18 Или Тек.СтавкаНДССпр = Справочники.СтавкиНДСФЗ54.НДС20 тогда	   
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
				КонецЕСли;   
				
				
				
				
				
				
				ИтСум = ИтСум + Окр(Тек.Количество*Тек.Цена, 2);
				
				Если Не ПропускаемМаркировку Тогда
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE, КМОбработанный);
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_STATUS, status);
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_RESULT, validationResult);
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_PROCESSING_MODE, 0);			
				КонецЕсли;
				
				Рез = СерверККТ.registration();
				
				Если Рез <> 0 тогда
					Струк.Вставить("Результат", Ложь);
					Струк.Вставить("КодОшибки", СерверККТ.errorCode());
					Струк.Вставить("ТекстОшибки", "Регистрация позиции, проблема");
					Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
					Возврат Струк;
				КонецЕсли;
			КонецЦикла;
		КонецеСли;
		
		
		Если ИтСум <> 0 Тогда
			Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ТипыОплат.ОплаченоВМагазине Тогда
				//СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум);
			ИначеЕсли ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ТипыОплат.Терминал Тогда	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_ELECTRONICALLY);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум);
			Иначе	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_CASH);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум);				
			КонецеСли;
			
			Рез = СерверККТ.payment();		
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Регистрация оплаты, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		Рез = СерверККТ.closeReceipt();		
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Закрытие чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		
		Рез = СерверККТ.checkDocumentClosed();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Проверка чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		Результат = ПолучитьТекущиеПараметрыККМ(СерверККТ, ПараметрыЧека);
		
		Если Не Результат Тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", 1);
			Струк.Вставить("ТекстОшибки", "Получение параметров пробитого чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецеСли;	
		
	Исключение
		Струк.Вставить("Результат", Ложь);
		Струк.Вставить("КодОшибки", 111);
		Струк.Вставить("ТекстОшибки", ОписаниеОшибки());
		Струк.Вставить("ОписаниеОшибкиККМ", "");
		Возврат Струк;
		
	КонецПопытки;
	
	Струк.Вставить("Результат", Истина);
	Струк.Вставить("КодОшибки", 0);
	Струк.Вставить("ТекстОшибки", "all good");
	Струк.Вставить("ОписаниеОшибкиККМ", "all good");
	Возврат Струк;
КонецФункции	


Функция ПодключитьсяКККМ(ККМ) Экспорт
	СерверККТ = Новый COMОбъект("AddIn.Fptr10");
	ДобавитьУстройствоATOL(СерверККТ, ККМ);  
	
	Рез = СерверККТ.open(); //Соединение с ККТ 
	Если Рез <> 0 тогда //Соединение с ККТ
		//ЗаписатьФлагСоединенияСККМ(ККМ, Ложь);
        Возврат Ложь;
	КонецЕсли;	
	
	Возврат СерверККТ;
КонецФункции	


Функция ОтключитьсяОтККМ(СерверККТ, ККМ) Экспорт
	Если СерверККТ.close() <> 0 Тогда
		Возврат Ложь;
	КонецеСли;	
	СерверККТ = "";
	Возврат Истина;
КонецФункции

Функция ПолучитьТекущиеПараметрыККМ(СерверККТ, СтруктураДанных) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_RECEIPT_STATE);
	СерверККТ.queryData();
                
    НомерЧека       = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_RECEIPT_NUMBER);          //3 ?
    НомерДокумента        = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_DOCUMENT_NUMBER);
    //СуммаЧека        = СерверККТ.getParamDouble(СерверККТ.LIBFPTR_PARAM_RECEIPT_SUM);     //0 ?
    //ТипЧекаККТ  = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE);       //0 ? закрыт
	
				
		
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_SHIFT_STATE);
	СерверККТ.queryData();
	
 	НомерСмены     = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_SHIFT_NUMBER);
	
	
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_FN_DATA_TYPE, СерверККТ.LIBFPTR_FNDT_LAST_RECEIPT);
    СерверККТ.fnQueryData();	

    СуммаЧека        = СерверККТ.getParamDouble(СерверККТ.LIBFPTR_PARAM_RECEIPT_SUM);
    ТипЧекаККТ        = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE);
	
	ТипЧека = 1;
	Если ТипЧекаККТ = СерверККТ.LIBFPTR_RT_SELL Тогда
		ТипЧека = 1;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_SELL_RETURN Тогда
		ТипЧека = 2;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_BUY Тогда
		ТипЧека = 4;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_BUY_RETURN Тогда
		ТипЧека = 5;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_SELL_CORRECTION Тогда
		ТипЧека = 7;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_BUY_CORRECTION Тогда
		ТипЧека = 9;
	КонецеСли;	
	
	СтруктураДанных.Вставить("НомерЧека", НомерЧека);
	СтруктураДанных.Вставить("НомерДокумента", НомерДокумента);
	СтруктураДанных.Вставить("НомерСмены", НомерСмены);
	СтруктураДанных.Вставить("ТипЧека", ТипЧека);
	СтруктураДанных.Вставить("СуммаЧека", СуммаЧека);
	
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_FN_DATA_TYPE, СерверККТ.LIBFPTR_FNDT_LAST_DOCUMENT);
    СерверККТ.fnQueryData();	

    ФПД        = СерверККТ.getParamString(СерверККТ.LIBFPTR_PARAM_FISCAL_SIGN);
    ФД        = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_DOCUMENT_NUMBER);
    ДатаЧека  = СерверККТ.getParamDateTime(СерверККТ.LIBFPTR_PARAM_DATE_TIME);
	
	
	
	СтруктураДанных.Вставить("ФПД", ФПД);
	СтруктураДанных.Вставить("ФД", ФД);
	СтруктураДанных.Вставить("ДатаЧека", ДатаЧека);
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_STATUS);
	СерверККТ.queryData();
	РН_ККТ = СерверККТ.getParamString(СерверККТ.LIBFPTR_PARAM_SERIAL_NUMBER);;
	
	СтруктураДанных.Вставить("РН_ККТ", РН_ККТ);
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_FN_DATA_TYPE, СерверККТ.LIBFPTR_FNDT_FN_INFO);
    СерверККТ.fnQueryData();	
	ФН = СерверККТ.getParamString(СерверККТ.LIBFPTR_PARAM_SERIAL_NUMBER);;
	
	СтруктураДанных.Вставить("ФН", ФН);
	
	Возврат Истина;
КонецФункции	


Функция СменаОткрыта(СерверККТ, СменаОткрыта) Экспорт
	
	СерверККТ.queryData();
                
    СостояниеСмены  = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_SHIFT_STATE);
	Если СостояниеСмены = СерверККТ.LIBFPTR_SS_CLOSED Тогда   
		СменаОткрыта = Ложь;
	Иначе
		СменаОткрыта = Истина;
	КонецеСли;	
	Возврат Истина;
КонецФункции	


Функция СнятьXОтчет(СерверККТ, Кассир = "") Экспорт
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_REPORT_TYPE, СерверККТ.LIBFPTR_RT_X);
	
	Если СерверККТ.report() <> 0 тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции	

Функция СнятьZОтчет(СерверККТ, Кассир) Экспорт
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_REPORT_TYPE, СерверККТ.LIBFPTR_RT_CLOSE_SHIFT);
	
	Если СерверККТ.report() <> 0 тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ПолучитьФН(НомерФН) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ксФискальныеНакопители.Ссылка КАК ФН
	|ИЗ
	|	Справочник.ксФискальныеНакопители КАК ксФискальныеНакопители
	|ГДЕ
	|	ксФискальныеНакопители.КодФН = &КодФН";
	Зап.УстановитьПараметр("КодФН", НомерФН);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.ФН;
	КонецеСли;
	
	Нов = Справочники.ксФискальныеНакопители.СоздатьЭлемент();
	Нов.Наименование = НомерФН;
	Нов.КодФН = НомерФН;
	Нов.Записать();
	
	Возврат Нов.Ссылка;
КонецФункции	

Функция ОткрытьСменуНаККМ(СерверККТ, ККМ, Кассир) Экспорт
	Рез = СерверККТ.openShift();
	
	
	//СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_SHIFT_STATE);
	//СерверККТ.queryData();
	//
	// НомерСмены     = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_SHIFT_NUMBER);
	
	
	Если Рез = 0 Тогда
		Возврат "СменаОткрытаУспешно";
	Иначе	
		Возврат "СменаНеОткрыта";
	КонецеСли;	
КонецФункции	

Процедура ЗаписьЛогаОшибкиККМ(КодОшибки, Описание, ПроизводительККМ, ЧекККМ, ОписаниеОшибкиККМ = "") Экспорт
	
	Элем = неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ксКодыОшибокККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ксКодыОшибокККМ КАК ксКодыОшибокККМ
	|ГДЕ
	|	ксКодыОшибокККМ.Владелец = &Владелец
	|	И ксКодыОшибокККМ.КодОшибкиККМ = &КодОшибкиККМ");
	Запрос.УстановитьПараметр("Владелец", ПроизводительККМ);
	Запрос.УстановитьПараметр("КодОшибкиККМ", КодОшибки);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Элем = Рез.Ссылка;			
	КонецЕсли;
	
	ТекВр = ТекущаяДата();
	Набор = РегистрыСведений.ксЛогПробитияЧеков.СоздатьНаборЗаписей();
	Набор.Отбор.ЧекККМ.Установить(ЧекККМ);
	Набор.Прочитать();
	НЗапись = Набор.Добавить();
	НЗапись.ЧекККМ = ЧекККМ;
	НЗапись.Период = ТекВр;
	НЗапись.КодОшибки = КодОшибки;
	НЗапись.ОписаниеОшибки = Описание;
	НЗапись.ОписаниеОшибкиККМ = ОписаниеОшибкиККМ;
	// МАС - 21.08.2017 - №1718 --->> 
	НЗапись.КассаККМ = ЧекККМ.КассаККМ;
	// <<--- МАС 	
	
	Если Элем <> Неопределено Тогда	
		НЗапись.ОшибкаККМ = Элем;		
	КонецЕсли;
	
	Набор.Записать();
	
КонецПроцедуры


Процедура ДобавитьУстройствоATOL(СерверККТ, КассаККМ)
	СерверККТ.setSingleSetting(СерверККТ.LIBFPTR_SETTING_MODEL, Строка(СерверККТ.LIBFPTR_MODEL_ATOL_77F));      //Строка(
	СерверККТ.setSingleSetting(СерверККТ.LIBFPTR_SETTING_PORT, Строка(СерверККТ.LIBFPTR_PORT_TCPIP));
	СерверККТ.setSingleSetting(СерверККТ.LIBFPTR_SETTING_IPADDRESS, СтрЗаменить(КассаККМ.АдресККМ, ":5555", ""));
	СерверККТ.setSingleSetting(СерверККТ.LIBFPTR_SETTING_IPPORT , "5555");
	СерверККТ.applySingleSettings();
КонецПроцедуры	

Функция ЛогинОператора(СерверККТ, КассаККМ)
	Кассир = УчетКассировСервер.ПолучитьКассира(КассаККМ.Владелец, КассаККМ, Истина);
	
	СерверККТ.setParam(1021, Кассир.Наименование);
    СерверККТ.operatorLogin();	
КонецФункции	

Функция СнятьОтчетККМ(СерверККТ, КассаККМ, ТипОтчета) Экспорт
	Если ТипОтчета = Перечисления.ТипыОтчетовККМ.XОтчет Тогда
		СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_REPORT_TYPE, СерверККТ.LIBFPTR_RT_X);
	ИначеЕсли ТипОтчета = Перечисления.ТипыОтчетовККМ.ОтчетОТекущемСостоянииРасчетов Тогда	
		//СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_REPORT_TYPE, СерверККТ.LIBFPTR_RT_OFD_EXCHANGE_STATUS); не работает
		СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_REPORT_TYPE, СерверККТ.LIBFPTR_RT_OFD_EXCHANGE_STATUS);
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	
	Если СерверККТ.Report() <> 0 тогда		
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	РаботаСКассовымСерверомСервер.ЗафиксироватьСнятиеОтчетаВРС(КассаККМ, ТипОтчета, ПараметрыСеанса.ТекущийПользователь, ЕстьОшибка);
	
	Возврат Не ЕстьОшибка;
КонецФункции