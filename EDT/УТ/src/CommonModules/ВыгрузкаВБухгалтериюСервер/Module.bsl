#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьДокументы(ДанныеВыгрузки, ДатаДокументов, ОшибкиВыгрузки) Экспорт
	
	ДатаДокументов = НачалоДня(ДатаДокументов);
	//ДанныеВыгрузки - табл.значений - "Организация, ИсточникДанных, Партнер, ПланВыгрузки, Спецсчет, СуммаНаличные, СуммаТерминал, ТерминалДоставки"
		
	ПартнерыПоВыгрузке = ДанныеВыгрузки.ВыгрузитьКолонку("Партнер");
	ДанныеПоВыгруженнымДокументам = ДанныеПоВыгруженнымДокументамПартнеров(ПартнерыПоВыгрузке, ДатаДокументов);
	// ДанныеПоВыгруженнымДокументам - табл.значений:
	// Партнер, ТерминалДоставки, ДатаВыгрузки
	// ПланВыгрузки, СуммаТерминал, СуммаНаличные, ИдентификаторДокументаПоступления, ИдентификаторДокументаПКО, ИдентификаторДокументаОтчетОРоничнойПродажи, ИдентификаторОперацииВведеннойВручную, Ошибка
	// Пользователь, ТекстОшибки

	ДанныеПредыдущейВыгрузки = Новый Структура();
	Для Каждого Колонка Из ДанныеПоВыгруженнымДокументам.Колонки Цикл
		ДанныеПредыдущейВыгрузки.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;		
	СтруктураВыгрузки = Новый ФиксированнаяСтруктура(ДанныеПредыдущейВыгрузки);
	
	СписокИсточниковДанных = ДанныеВыгрузки.Скопировать();
	СписокИсточниковДанных.Свернуть("ИсточникДанных");
	СписокИсточниковДанных = СписокИсточниковДанных.ВыгрузитьКолонку("ИсточникДанных");
	
	Для Каждого СтрокаИсточниковДанных Из СписокИсточниковДанных Цикл
		
		СтруктураCOM = ПлатежиКомитентамСервер.ПолучитьСоединениеСБазой(СтрокаИсточниковДанных);
		
		Если СтруктураCOM = Неопределено Тогда
			Сообщить("Не удалось установить соединение для источника данных " + СокрЛП(СтрокаИсточниковДанных.ИсточникДанных));
			Продолжить;
		КонецЕсли; 
		
		Соединение = СтруктураCOM.Соединение;
		БазаБух = СтруктураCOM.БазаБух;
		
		#Область ТаблицаПроводокРучнойОперации
		СтрокиВыгрузкиПоИсточникуДанных = ДанныеВыгрузки.Скопировать(ДанныеВыгрузки.НайтиСтроки(Новый Структура("ИсточникДанных",СтрокаИсточниковДанных)));
		
		СтрокиВведенияРучнойОперации = Новый ТаблицаЗначений;
		СтрокиВведенияРучнойОперации.Колонки.Добавить("ЭтапВыгрузки");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("СчетДт");
		
		СтрокиВведенияРучнойОперации.Колонки.Добавить("Субконто1Дт");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("ВидСубконто1Дт");

		СтрокиВведенияРучнойОперации.Колонки.Добавить("Субконто2Дт");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("ВидСубконто2Дт");

		СтрокиВведенияРучнойОперации.Колонки.Добавить("Субконто3Дт");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("ВидСубконто3Дт");

		СтрокиВведенияРучнойОперации.Колонки.Добавить("СчетКт");
		
		СтрокиВведенияРучнойОперации.Колонки.Добавить("Субконто1Кт");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("ВидСубконто1Кт");

		СтрокиВведенияРучнойОперации.Колонки.Добавить("Субконто2Кт");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("ВидСубконто2Кт");

		СтрокиВведенияРучнойОперации.Колонки.Добавить("Субконто3Кт");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("ВидСубконто3Кт");

		СтрокиВведенияРучнойОперации.Колонки.Добавить("КоличествоДт");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("КоличествоКт");

		СтрокиВведенияРучнойОперации.Колонки.Добавить("Сумма");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("СуммаДт");
		СтрокиВведенияРучнойОперации.Колонки.Добавить("СуммаКт");
		#КонецОбласти
		
		
		
		Для Каждого СтрокаВыгрузки Из СтрокиВыгрузкиПоИсточникуДанных Цикл
			ЭтапВыгрузки = "Сбор данных для формирования документов";
			// спорно
			//Если СтрокаВыгрузки.СуммаНаличные = 0 И СтрокаВыгрузки.СуммаТерминал = 0 Тогда
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для партнера " + СокрЛП(СтрокаВыгрузки) + " нет суммы выручки за " + СокрЛП(ДатаДокументов));
			//	Продолжить;
			//КонецЕсли;	
			
			ТекстОшибкиПроведения = "";
			
			СтрокиВведенияРучнойОперации.Очистить();
			
			СтрокаКомментария = "";
			
			СтрокиДанныхПредыдущейВыгрузки = ДанныеПоВыгруженнымДокументам.НайтиСтроки(Новый Структура("Партнер, ДатаВыгрузки, ТерминалДоставки", СтрокаВыгрузки.Партнер, ДатаДокументов, СтрокаВыгрузки.ТерминалДоставки));
			
			Если СтрокиДанныхПредыдущейВыгрузки.Количество() > 0 Тогда //Выгрузка уже была
				ЗаполнитьЗначенияСвойств(ДанныеПредыдущейВыгрузки, СтрокиДанныхПредыдущейВыгрузки[0]);
				СтрокаКомментария = "Обновлено из УТЛ" + ?(СтрокаВыгрузки.ПланВыгрузки.ОбменМеждуСвоимиЮрлицами, ", " + СокрЛ(СтрокаВыгрузки.ТерминалДоставки),"");
			Иначе // Выгрузки небыло	
				ДанныеПредыдущейВыгрузки = Новый Структура(СтруктураВыгрузки);
				СтрокаКомментария = "Выгружено из УТЛ" + ?(СтрокаВыгрузки.ПланВыгрузки.ОбменМеждуСвоимиЮрлицами, ", " + СокрЛ(СтрокаВыгрузки.ТерминалДоставки),"");
			КонецЕсли;
			
			// Заполнение общей информации по выгрузке
			ДанныеПредыдущейВыгрузки.ДатаВыгрузки = ДатаДокументов;		
			ЗаполнитьЗначенияСвойств(ДанныеПредыдущейВыгрузки, СтрокаВыгрузки, "Партнер,СуммаНаличные,СуммаТерминал,ПланВыгрузки,ТерминалДоставки");
			ДанныеПредыдущейВыгрузки.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			ДанныеПредыдущейВыгрузки.Ошибка = Ложь;
			ДанныеПредыдущейВыгрузки.ТекстОшибки = "";
			
			ПараметрыДобавленияТовараНаличные = ПараметрыДобавленияТовараВДокумент(СтрокаВыгрузки.ПланВыгрузки);
			ПараметрыДобавленияТовараБезНаличные = ПараметрыДобавленияТовараВДокумент(СтрокаВыгрузки.ПланВыгрузки, Ложь);
			
			Попытка
				
				#Область ФормированиеОбщейСтруктурыПараметровДокументов
				
				СтруктураЗаполненияДокумента = Новый Структура;
				СтруктураЗаполненияДокумента.Вставить("Организация", БазаБух.Справочники.Организации.НайтиПоРеквизиту("ИНН", СтрокаВыгрузки.Организация.ИНН));
				СтруктураЗаполненияДокумента.Вставить("Контрагент", БазаБух.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтрокаВыгрузки.Партнер.ИНН));
				СтруктураЗаполненияДокумента.Вставить("ОрганизацияДляНаличныхОпераций", БазаБух.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтрокаВыгрузки.ПланВыгрузки.ОрганизацияДляНаличныхРасчетовИНН));

				
				Если СтруктураЗаполненияДокумента.Контрагент.Ссылка.Пустая() Тогда
					ВызватьИсключение "Контрагент с ИНН " + СтрокаВыгрузки.Партнер.ИНН + " (" + СокрЛП(СтрокаВыгрузки.Партнер)  + ") не найден";
				КонецЕсли;	
				
				Если СтруктураЗаполненияДокумента.Организация.Ссылка.Пустая() Тогда
					ВызватьИсключение "Организация с ИНН " + СтрокаВыгрузки.Организация.ИНН + " (" + СокрЛП(СтрокаВыгрузки.Организация)  + ") не найден";
				КонецЕсли;	
				
				СтруктураЗаполненияДокумента.Вставить("Комментарий", СтрокаКомментария);
				СтруктураЗаполненияДокумента.Вставить("Ответственный", БазаБух.ПараметрыСеанса.ТекущийПользователь);
				СтруктураЗаполненияДокумента.Вставить("Склад", СтруктураЗаполненияДокумента.Контрагент.СкладВыгрузкиУТЛ);
				СтруктураЗаполненияДокумента.Вставить("СуммаВключаетНДС", Истина);
				
				Запрос = БазаБух.NewObject("Запрос");
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
				|ИЗ
				|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
				|ГДЕ
				|	ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
				|	И ОсновныеДоговорыКонтрагента.Организация = &Организация
				|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)";
				
				Запрос.УстановитьПараметр("Контрагент", СтруктураЗаполненияДокумента.Контрагент);
				Запрос.УстановитьПараметр("Организация", СтруктураЗаполненияДокумента.Организация);
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				ПредъявляетНДС = Ложь;
				СтавкаНДСДляДокументов = БазаБух.Перечисления.СтавкиНДС.БезНДС;
				ПроцентНДС = 0;
				
				Попытка
					
					Если ВыборкаДетальныеЗаписи.Следующий() тогда
						
						СтруктураЗаполненияДокумента.Вставить("ДоговорКонтрагента", ВыборкаДетальныеЗаписи.Договор);
						ПредъявляетНДС = БазаБух.String(ВыборкаДетальныеЗаписи.Договор.СпособЗаполненияСтавкиНДС) = БазаБух.String(БазаБух.Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически);//2019-01-22
						//ПредъявляетНДС = СтруктураЗаполненияДокумента.ДоговорКонтрагента.УдалитьПредъявляетНДС;
						//ПредъявляетНДС = СтруктураЗаполненияДокумента.ДоговорКонтрагента.ПредъявляетНДС;
						
						СтавкаНДС = Неопределено;
						Если ДатаДокументов < Дата(2019,1,1,0,0,0) ТОГДА
						    СтавкаНДС = БазаБух.Перечисления.СтавкиНДС.НДС18;
						Иначе
							СтавкаНДС = БазаБух.Перечисления.СтавкиНДС.НДС20;
						КонецЕсли;	
						
						СтавкаНДСДляДокументов = ?(ПредъявляетНДС, СтавкаНДС, БазаБух.Перечисления.СтавкиНДС.БезНДС);
						ПроцентНДСДляДокументов = БазаБух.УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСДляДокументов);
						
					Иначе
						
						ВызватьИсключение "Не установлен основной договор контрагента " + БазаБух.String(СтруктураЗаполненияДокумента.Контрагент) + " " + ОписаниеОшибки();
						
					КонецЕсли;
					
				Исключение
					
					ВызватьИсключение "Не установлен основной договор контрагента " + БазаБух.String(СтруктураЗаполненияДокумента.Контрагент) + " " + ОписаниеОшибки();
					
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не установлен основной договор контрагента " + БазаБух.String(СтруктураЗаполненияДокумента.Контрагент));
					//Продолжить;
					
				КонецПопытки;
				
				Запрос = БазаБух.NewObject("Запрос");
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
				|ИЗ
				|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
				|ГДЕ
				|	ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
				|	И ОсновныеДоговорыКонтрагента.Организация = &Организация
				|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)";
				
				Запрос.УстановитьПараметр("Контрагент", СтруктураЗаполненияДокумента.ОрганизацияДляНаличныхОпераций);
				Запрос.УстановитьПараметр("Организация", СтруктураЗаполненияДокумента.Организация);
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								
				Попытка
					
					Если ВыборкаДетальныеЗаписи.Следующий() тогда
						
						СтруктураЗаполненияДокумента.Вставить("ДоговорОрганизацияДляНаличныхОпераций", ВыборкаДетальныеЗаписи.Договор);				
						
					Иначе
						
						ВызватьИсключение "Не установлен основной договор организации для наличных операций " + БазаБух.String(СтруктураЗаполненияДокумента.ОрганизацияДляНаличныхОпераций);
						
					КонецЕсли;
					
				Исключение
					
					Если СтрокаВыгрузки.ПланВыгрузки.СоздаватьОперациюВведеннуюВручную Тогда
						
						ВызватьИсключение "Не установлен основной договор организации для наличных операций " + БазаБух.String(СтруктураЗаполненияДокумента.ОрганизацияДляНаличныхОпераций);
						
					КонецЕсли;	
					
				КонецПопытки;

				
				#КонецОбласти
				
				#Область ФормированиеДополнительныхПараметровДокументов
				
				Если ЗначениеЗаполнено(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаТоваров) Тогда
					СчетУчетаТоваров = БазаБух.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаТоваров.Код); 
				Иначе 
					СчетУчетаТоваров = Неопределено; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаВзаиморасчетов) Тогда
					СчетУчетаВзаиморасчетов = БазаБух.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаВзаиморасчетов.Код); 
				Иначе 
					СчетУчетаВзаиморасчетов = Неопределено; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаНДС) Тогда
					СчетУчетаНДС = БазаБух.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаНДС.Код); 
				Иначе 
					СчетУчетаНДС = Неопределено; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаКассы) Тогда
					СчетУчетаКассы = БазаБух.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаКассы.Код); 
				Иначе 
					СчетУчетаКассы = Неопределено; 
				КонецЕсли;
				
				СчетРучнойОперацииПоступлениеДт = БазаБух.ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.05");
				СчетРучнойОперацииПоступлениеКт = БазаБух.ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.09");
				
				Если ЗначениеЗаполнено(СтрокаВыгрузки.ПланВыгрузки.ИдентификаторСтатьиДДС) Тогда
					УИДСтатьиДДС = БазаБух.NewObject("УникальныйИдентификатор", Строка(СтрокаВыгрузки.ПланВыгрузки.ИдентификаторСтатьиДДС));
					СтруктураЗаполненияДокумента.Вставить("СтатьяДвиженияДенежныхСредств", БазаБух.Справочники.СтатьиДвиженияДенежныхСредств.GetRef(УИДСтатьиДДС));
				Иначе
					СтруктураЗаполненияДокумента.Вставить("СтатьяДвиженияДенежныхСредств", Неопределено);
				КонецЕсли;
				
				#КонецОбласти
				
				//Попытка
				
				#Область ВыгрузкаПоступления
				Если СтрокаВыгрузки.ПланВыгрузки.СоздаватьПоступлениеТоваров Тогда
					ЭтапВыгрузки = "ПоступлениеТоваровУслуг";
					ДатаДокументаПоступление = НачалоДня(ДатаДокументов) + (СтрокаВыгрузки.ПланВыгрузки.ВремяДокументаПоступления - НачалоДня(СтрокаВыгрузки.ПланВыгрузки.ВремяДокументаПоступления));
					
					Если ЗначениеЗаполнено(ДанныеПредыдущейВыгрузки.ИдентификаторДокументаПоступления) Тогда
						
						УИД = БазаБух.NewObject("УникальныйИдентификатор", Строка(ДанныеПредыдущейВыгрузки.ИдентификаторДокументаПоступления));
						ДокументБух = БазаБух.Документы[ЭтапВыгрузки].GetRef(УИД).ПолучитьОбъект();
						ДокументБух.Товары.Очистить();
						
					Иначе
						
						Если СтрокаВыгрузки.СуммаНаличные = 0 И СтрокаВыгрузки.СуммаТерминал = 0 Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для партнера " + СокрЛП(СтрокаВыгрузки.Партнер) + " нет суммы выручки за " + СокрЛП(ДатаДокументов) + " (Поступление)");
							Продолжить;
						КонецЕсли;	
						
						ДокументБух = БазаБух.Документы[ЭтапВыгрузки].СоздатьДокумент();
						ДокументБух.Дата = ДатаДокументаПоступление;
						
					КонецЕсли;			
					
					СтруктураЗаполненияДокумента.Вставить("ВидОперации", БазаБух.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);												
					//СтруктураЗаполненияДокумента.Вставить("", );
					
					БазаБух.ЗаполнениеДокументов.Заполнить(ДокументБух, СтруктураЗаполненияДокумента, Истина);
					ЗаполнитьЗначенияСвойств(ДокументБух, СтруктураЗаполненияДокумента);			
					
					ДокументБух.СчетУчетаРасчетовСКонтрагентом = СчетУчетаВзаиморасчетов;
					
					СтрокиДокумента = Новый Массив;
					
					СтрокаНаличныеТЧ = Неопределено;
					
					СуммаНаличные = 0;
					
					Если СтрокаВыгрузки.СуммаНаличные > 0 Тогда
						ПараметрыДобавленияТовара = ПараметрыДобавленияТовараНаличные;
						ТоварВДокумент = Неопределено;
						Если ПараметрыДобавленияТовараНаличные.ТоварПривязанККонтрагенту Тогда
							ТоварВДокумент = СтруктураЗаполненияДокумента.Контрагент.ТоварУчетаВыручкиУТ;
							
							Если ТоварВДокумент.Ссылка.Пустая() Тогда
								
								ВызватьИсключение "Для контрагента "  + Строка(СтрокаВыгрузки.Партнер) + " не определен товар для наличных";
								
							КонецЕсли;	
							
						Иначе
							УИДТовара = БазаБух.NewObject("УникальныйИдентификатор", Строка(ПараметрыДобавленияТовараНаличные.ИдентификаторТовара));
							ТоварВДокумент = БазаБух.Справочники.Номенклатура.GetRef(УИДТовара);
							
							Если ТоварВДокумент.Ссылка.Пустая() Тогда
								
								ВызватьИсключение "Для плана выгрузки "  + Строка(СтрокаВыгрузки.ПланВыгрузки) + " не определен товар для наличных";
								
							КонецЕсли;	
							
						КонецЕсли;
						
						СтрокаТЧ = ДокументБух.Товары.Добавить();
						СтрокаТЧ.СчетУчета = СчетУчетаТоваров;
						СтрокаТЧ.Номенклатура = ТоварВДокумент;
						СтрокаТЧ.Количество = 1;
						СтрокаТЧ.Цена = СтрокаВыгрузки.СуммаНаличные;
						СтрокаТЧ.СчетУчета = СчетУчетаТоваров;
						СтрокаТЧ.СтавкаНДС = СтавкаНДСДляДокументов;
						
						БазаБух.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
						БазаБух.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументБух.СуммаВключаетНДС, Ложь);;
						
						
						СтрокиДокумента.Добавить(СтрокаТЧ);					
						
						СуммаНаличные = СуммаНаличные + СтрокаТЧ.Сумма;
						
					КонецЕсли;
					
					Если СтрокаВыгрузки.СуммаТерминал > 0 
						И НЕ ПараметрыДобавленияТовараБезНаличные.ТоварПривязанККонтрагенту = Неопределено Тогда
						
						ТоварВДокумент = Неопределено;
						Если ПараметрыДобавленияТовараБезНаличные.ТоварПривязанККонтрагенту Тогда
							ТоварВДокумент = СтруктураЗаполненияДокумента.Контрагент.ТоварУчетаВыручкиУТ;
							
							Если ТоварВДокумент.Ссылка.Пустая() Тогда
								
								ВызватьИсключение "Для контрагента "  + Строка(СтрокаВыгрузки.Партнер) + " не определен товар для терминала";
								
							КонецЕсли;
							
						Иначе
							УИДТовара = БазаБух.NewObject("УникальныйИдентификатор", Строка(ПараметрыДобавленияТовараБезНаличные.ИдентификаторТовара));
							ТоварВДокумент = БазаБух.Справочники.Номенклатура.GetRef(УИДТовара);
							
							Если ТоварВДокумент.Ссылка.Пустая() Тогда
								
								ВызватьИсключение "Для плана выгрузки "  + Строка(СтрокаВыгрузки.ПланВыгрузки) + " не определен товар для терминала";
								
							КонецЕсли;	
							
						КонецЕсли;
						
						СтрокаТЧ = ДокументБух.Товары.Добавить();
						СтрокаТЧ.СчетУчета = СчетУчетаТоваров;
						СтрокаТЧ.Номенклатура = ТоварВДокумент;
						СтрокаТЧ.Количество = 1;
						СтрокаТЧ.Цена = СтрокаВыгрузки.СуммаТерминал;
						СтрокаТЧ.СчетУчета = СчетУчетаТоваров;
						СтрокаТЧ.СтавкаНДС = СтавкаНДСДляДокументов;					
						
						БазаБух.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
						БазаБух.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументБух.СуммаВключаетНДС, Ложь);
						
						//СтрокиДокумента.Добавить(СтрокаТЧ);
						
					КонецЕсли;
					
					Попытка
						ДокументБух.Записать(БазаБух.РежимЗаписиДокумента.Проведение);
					Исключение
						
						ДокументБух.Записать();
						ТекстОшибкиПроведения = "Ошибка проведения " + БазаБух.String(ДокументБух.ref);
						
					КонецПопытки;
					
					ДанныеПредыдущейВыгрузки.ИдентификаторДокументаПоступления = Новый УникальныйИдентификатор(БазаБух.String(ДокументБух.ref.УникальныйИдентификатор()));
					
					// Добавление строки ручной операции (только наличка)
					Если СтрокаВыгрузки.ПланВыгрузки.СоздаватьОперациюВведеннуюВручную 
						И СтрокиДокумента.Количество() > 0 Тогда
						
						СтрокаРучнойОперации = СтрокиВведенияРучнойОперации.Добавить();
						
						СтрокаРучнойОперации.ЭтапВыгрузки =  ЭтапВыгрузки;
						СтрокаРучнойОперации.СчетДт = СчетРучнойОперацииПоступлениеДт;
						СтрокаРучнойОперации.Субконто1Дт = СтруктураЗаполненияДокумента.ОрганизацияДляНаличныхОпераций;//ДокументБух.Организация;
						СтрокаРучнойОперации.ВидСубконто1Дт = "Контрагенты";
						СтрокаРучнойОперации.Субконто2Дт = СтруктураЗаполненияДокумента.ДоговорОрганизацияДляНаличныхОпераций;
						СтрокаРучнойОперации.ВидСубконто2Дт = "Договоры";
						СтрокаРучнойОперации.Субконто3Дт = Неопределено;
						СтрокаРучнойОперации.ВидСубконто3Дт = Неопределено;//"ДокументыРасчетовСКонтрагентами";
						
						СтрокаРучнойОперации.СчетКт = СчетРучнойОперацииПоступлениеКт;
						СтрокаРучнойОперации.Субконто1Кт = ДокументБух.Контрагент;
						СтрокаРучнойОперации.ВидСубконто1Кт = "Контрагенты";
						СтрокаРучнойОперации.Субконто2Кт = ДокументБух.ДоговорКонтрагента;
						СтрокаРучнойОперации.ВидСубконто2Кт = "Договоры";
						СтрокаРучнойОперации.Субконто3Кт = ДокументБух.ref;
						СтрокаРучнойОперации.ВидСубконто3Кт = "ДокументыРасчетовСКонтрагентами";
						СтрокаРучнойОперации.КоличествоДт = Неопределено;
						
						СтрокаРучнойОперации.Сумма =  СуммаНаличные;

						Если СтрокаВыгрузки.ПланВыгрузки.ДобавлятьСкладВПроводку Тогда
							
							СтрокаРучнойОперации.СуммаДт = СуммаНаличные;
							СтрокаРучнойОперации.СуммаКт = СуммаНаличные;

						КонецЕсли;
						
						Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
							
							СтрокаРучнойОперации = СтрокиВведенияРучнойОперации.Добавить();
							
							СтрокаРучнойОперации.ЭтапВыгрузки =  ЭтапВыгрузки;
							СтрокаРучнойОперации.СчетДт = Неопределено;
							СтрокаРучнойОперации.Субконто1Дт = Неопределено;
							СтрокаРучнойОперации.Субконто2Дт = Неопределено;
							
							СтрокаРучнойОперации.СчетКт = СчетУчетаТоваров;
							
							СтрокаРучнойОперации.Субконто1Кт = ДокументБух.ref;
							СтрокаРучнойОперации.ВидСубконто1Кт = "Партии";
							
							СтрокаРучнойОперации.Субконто2Кт = СтрокаДокумента.Номенклатура;
							СтрокаРучнойОперации.ВидСубконто2Кт = "Номенклатура";
							
							Если СтрокаВыгрузки.ПланВыгрузки.ДобавлятьСкладВПроводку Тогда
								СтрокаРучнойОперации.Субконто3Кт = ДокументБух.Склад;
								СтрокаРучнойОперации.ВидСубконто3Кт = "Склады";
								
								СтрокаРучнойОперации.СуммаКт = СтрокаДокумента.Сумма;
							КонецЕсли;						
							
							СтрокаРучнойОперации.КоличествоКт = 1;
							СтрокаРучнойОперации.Сумма =  СтрокаДокумента.Сумма;

						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
				#Область ВыгрузкаОтчетОРозничныхПродажах
				
				//Отчет о розничных продажах создается:
				// По простому плану выгрузки - на безналичную выручку (терминал), на наличную выручку создается ручная операция
				// По плану выгрузки со спецсчетом - на наличную выручку (ручная операция НЕ создается)
				
				Если СтрокаВыгрузки.ПланВыгрузки.СоздаватьОтчетОРозничныхПродажах Тогда
					
					ЭтапВыгрузки = "ОтчетОРозничныхПродажах";
					
					СчетУчетаДоходов = БазаБух.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаДоходов.Код);
					СчетУчетаРасходов = БазаБух.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаВыгрузки.ПланВыгрузки.СчетУчетаРасходов.Код);
					
					ДатаДокументаРозничнойПродажи = НачалоДня(ДатаДокументов) + (СтрокаВыгрузки.ПланВыгрузки.ВремяДокументаОтчетОРозничныхПродажах - НачалоДня(СтрокаВыгрузки.ПланВыгрузки.ВремяДокументаОтчетОРозничныхПродажах));
					
					ВводитьДокумент = Истина;
					
					Если ЗначениеЗаполнено(ДанныеПредыдущейВыгрузки.ИдентификаторДокументаОтчетОРозничнойПродаже) Тогда
						
						УИД = БазаБух.NewObject("УникальныйИдентификатор", Строка(ДанныеПредыдущейВыгрузки.ИдентификаторДокументаОтчетОРозничнойПродаже));
						ДокументБух = БазаБух.Документы[ЭтапВыгрузки].GetRef(УИД).ПолучитьОбъект();
						ДокументБух.Товары.Очистить();
						ДокументБух.Оплата.Очистить();
						
					Иначе
						
						// Обработка ситуации ввода нового документа
						Если (СтрокаВыгрузки.ПланВыгрузки.ОбменМеждуСвоимиЮрлицами
							И СтрокаВыгрузки.СуммаТерминал = 0
							И СтрокаВыгрузки.СуммаНаличные = 0)
							ИЛИ (Не СтрокаВыгрузки.ПланВыгрузки.ОбменМеждуСвоимиЮрлицами 
							И ((СтрокаВыгрузки.СуммаТерминал = 0 И НЕ СтрокаВыгрузки.ПланВыгрузки.Спецсчет) > 0 
							ИЛИ (СтрокаВыгрузки.СуммаНаличные = 0 И СтрокаВыгрузки.ПланВыгрузки.Спецсчет))) Тогда
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для партнера " + СокрЛП(СтрокаВыгрузки.Партнер) + " нет суммы выручки за " + СокрЛП(ДатаДокументов) + " (Отчет о розничных продажах)");
							ВводитьДокумент = Ложь;

						Иначе
							
							ДокументБух = БазаБух.Документы[ЭтапВыгрузки].СоздатьДокумент();
							ДокументБух.Дата = ДатаДокументаРозничнойПродажи;
							
						КонецЕсли;

					КонецЕсли;
					
					Если ВводитьДокумент Тогда
						
						СтруктураЗаполненияДокумента.Вставить("ВидОперации", БазаБух.Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах);
						
						СтруктураЗаполненияДокумента.Вставить("СчетКасса", СчетУчетаКассы);
						СтруктураЗаполненияДокумента.Вставить("ТипЦен", СтруктураЗаполненияДокумента.Склад.ТипЦенРозничнойТорговли);
						СтруктураЗаполненияДокумента.Вставить("ДокументБезНДС", Ложь);
						СтруктураЗаполненияДокумента.Вставить("СуммаВключаетНДС",Истина);
						
						БазаБух.ЗаполнениеДокументов.Заполнить(ДокументБух, СтруктураЗаполненияДокумента, Истина);
						ЗаполнитьЗначенияСвойств(ДокументБух, СтруктураЗаполненияДокумента);
						
						Если (СтрокаВыгрузки.ПланВыгрузки.ОбменМеждуСвоимиЮрлицами
							И СтрокаВыгрузки.СуммаНаличные > 0)
							ИЛИ (СтрокаВыгрузки.СуммаНаличные > 0 И СтрокаВыгрузки.ПланВыгрузки.Спецсчет) Тогда
							ПараметрыДобавленияТовара = ПараметрыДобавленияТовараНаличные;
							ТоварВДокумент = Неопределено;
							Если ПараметрыДобавленияТовараНаличные.ТоварПривязанККонтрагенту Тогда
								ТоварВДокумент = СтруктураЗаполненияДокумента.Контрагент.ТоварУчетаВыручкиУТ;
								
								Если ТоварВДокумент.Ссылка.Пустая() Тогда
									
									ВызватьИсключение "Для контрагента "  + Строка(СтрокаВыгрузки.Партнер) + " не определен товар для наличных";
									
								КонецЕсли;	
								
							Иначе
								УИДТовара = БазаБух.NewObject("УникальныйИдентификатор", Строка(ПараметрыДобавленияТовараНаличные.ИдентификаторТовара));
								ТоварВДокумент = БазаБух.Справочники.Номенклатура.GetRef(УИДТовара);
								
								Если ТоварВДокумент.Ссылка.Пустая() Тогда
									
									ВызватьИсключение "Для плана выгрузки "  + Строка(СтрокаВыгрузки.ПланВыгрузки) + " не определен товар для наличных";
									
								КонецЕсли;	
								
							КонецЕсли;
							
							
							СтрокаТЧ = ДокументБух.Товары.Добавить();
							СтрокаТЧ.СчетУчета = СчетУчетаТоваров;
							СтрокаТЧ.Номенклатура = ТоварВДокумент;
							СтрокаТЧ.Количество = 1;
							СтрокаТЧ.Цена = СтрокаВыгрузки.СуммаНаличные;
							СтрокаТЧ.СтавкаНДС = СтавкаНДСДляДокументов;
							СтрокаТЧ.СчетУчета = СчетУчетаТоваров;
							СтрокаТЧ.СчетДоходов  = СчетУчетаДоходов;
							СтрокаТЧ.СчетРасходов = СчетУчетаРасходов;
							
							СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетУчетаНДС;
							
							БазаБух.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
							БазаБух.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументБух.СуммаВключаетНДС, Ложь);
							
						КонецЕсли;
						
						Если СтрокаВыгрузки.СуммаТерминал > 0 
							И НЕ ПараметрыДобавленияТовараБезНаличные.ТоварПривязанККонтрагенту = Неопределено Тогда
							
							ТоварВДокумент = Неопределено;
							Если ПараметрыДобавленияТовараБезНаличные.ТоварПривязанККонтрагенту Тогда
								ТоварВДокумент = СтруктураЗаполненияДокумента.Контрагент.ТоварУчетаВыручкиУТ;
								
								Если ТоварВДокумент.Ссылка.Пустая() Тогда
									
									ВызватьИсключение "Для контрагента "  + Строка(СтрокаВыгрузки.Партнер) + " не определен товар для терминала";
									
								КонецЕсли;
								
							Иначе
								УИДТовара = БазаБух.NewObject("УникальныйИдентификатор", Строка(ПараметрыДобавленияТовараБезНаличные.ИдентификаторТовара));
								ТоварВДокумент = БазаБух.Справочники.Номенклатура.GetRef(УИДТовара);
								
								Если ТоварВДокумент.Ссылка.Пустая() Тогда
									
									ВызватьИсключение "Для плана выгрузки "  + Строка(СтрокаВыгрузки.ПланВыгрузки) + " не определен товар для терминала";
									
								КонецЕсли;	
								
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ПараметрыДобавленияТовараБезНаличные.ИдентификаторТипаОплаты) Тогда
								УИДВидаОплаты = БазаБух.NewObject("УникальныйИдентификатор", Строка(ПараметрыДобавленияТовараБезНаличные.ИдентификаторТипаОплаты));
								ВидаОплатыВДокумент = БазаБух.Справочники.ВидыОплатОрганизаций.GetRef(УИДВидаОплаты);
							Иначе
								ВидаОплатыВДокумент = Неопределено;
							КонецЕсли;
							
							СтрокаТЧ = ДокументБух.Товары.Добавить();
							СтрокаТЧ.СчетУчета = СчетУчетаТоваров;
							СтрокаТЧ.Номенклатура = ТоварВДокумент;
							СтрокаТЧ.Количество = 1;
							СтрокаТЧ.Цена = СтрокаВыгрузки.СуммаТерминал;
							СтрокаТЧ.СчетУчета = СчетУчетаТоваров;
							СтрокаТЧ.СтавкаНДС = СтавкаНДСДляДокументов;					
							СтрокаТЧ.СчетДоходов  = СчетУчетаДоходов;
							СтрокаТЧ.СчетРасходов = СчетУчетаРасходов;
							
							СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетУчетаНДС;
							
							
							БазаБух.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
							БазаБух.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументБух.СуммаВключаетНДС, Ложь);
							
							СтрокаТЧОплата = ДокументБух.Оплата.Добавить();
							СтрокаТЧОплата.ВидОплаты = ВидаОплатыВДокумент;
							СтрокаТЧОплата.СуммаОплаты = СтрокаВыгрузки.СуммаТерминал;
							
						КонецЕсли;
						
						Попытка
							ДокументБух.Записать(БазаБух.РежимЗаписиДокумента.Проведение);
						Исключение
							ДокументБух.Записать();						
							ТекстОшибкиПроведения = ТекстОшибкиПроведения + ?(ЗначениеЗаполнено(ТекстОшибкиПроведения), Символы.ПС,"") + "Ошибка проведения " + БазаБух.String(ДокументБух.ref);
						КонецПопытки;
						
						
						ДанныеПредыдущейВыгрузки.ИдентификаторДокументаОтчетОРозничнойПродаже = Новый УникальныйИдентификатор(БазаБух.String(ДокументБух.ref.УникальныйИдентификатор()));
						
					КонецЕсли;	
				КонецЕсли;	
				#КонецОбласти
				
				#Область ВыгрузкаПриходныйКассовыйОрдер
				Если СтрокаВыгрузки.ПланВыгрузки.СоздаватьПКО 
					И СтрокаВыгрузки.СуммаНаличные > 0 Тогда
					
					ИННТопДеливери = "7722756984";
					УстановитьПрефиксТопДеливери = Ложь;
					
					ЭтапВыгрузки = "ПриходныйКассовыйОрдер";
					
					ДатаДокументаПКО = НачалоДня(ДатаДокументов) + (СтрокаВыгрузки.ПланВыгрузки.ВремяДокументаПКО - НачалоДня(СтрокаВыгрузки.ПланВыгрузки.ВремяДокументаПКО));
					
					Если ЗначениеЗаполнено(ДанныеПредыдущейВыгрузки.ИдентификаторДокументаПКО) Тогда
						
						УИД = БазаБух.NewObject("УникальныйИдентификатор", Строка(ДанныеПредыдущейВыгрузки.ИдентификаторДокументаПКО));
						ДокументБух = БазаБух.Документы[ЭтапВыгрузки].GetRef(УИД).ПолучитьОбъект();
						
					Иначе
						
						ДокументБух = БазаБух.Документы[ЭтапВыгрузки].СоздатьДокумент();
						ДокументБух.Дата = ДатаДокументаПКО;
						
						Если СокрЛП(СтрокаВыгрузки.Партнер.ИНН) = ИННТопДеливери Тогда
							 УстановитьПрефиксТопДеливери = Истина;
						КонецЕсли;
						
					КонецЕсли;
									
					//Заполнение реквизитов печати
					ДокументБух.ПринятоОт  = "покупателей " + БазаБух.String(СтруктураЗаполненияДокумента.Контрагент.НаименованиеПолное);
					ПредставлениеДоговора = БазаБух.String(СтруктураЗаполненияДокумента.ДоговорКонтрагента);
					ДокументБух.Основание  = СтрЗаменить(ПредставлениеДоговора, "Агентский договор", "по субагентскому договору");
					//					
					
					СтруктураЗаполненияДокумента.Вставить("ВидОперации", БазаБух.Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
					СтруктураЗаполненияДокумента.Вставить("СчетКасса", СчетУчетаКассы);					
					
					СтруктураЗаполненияДокументаПКО = новый Структура();
					
					Для Каждого ЭлементЗаполнения Из СтруктураЗаполненияДокумента Цикл					
						СтруктураЗаполненияДокументаПКО.Вставить(ЭлементЗаполнения.Ключ, ЭлементЗаполнения.Значение);					
					КонецЦикла;
					
					СтруктураЗаполненияДокументаПКО.Вставить("СуммаДокумента", СтрокаВыгрузки.СуммаНаличные);
					СтруктураЗаполненияДокументаПКО.Вставить("СтавкаНДС", СтавкаНДСДляДокументов);
					
					СтруктураЗаполненияДокументаПКО.Контрагент = СтруктураЗаполненияДокументаПКО.Склад;
					СтруктураЗаполненияДокументаПКО.ДоговорКонтрагента = Неопределено;
					
					БазаБух.ЗаполнениеДокументов.Заполнить(ДокументБух, СтруктураЗаполненияДокументаПКО, Истина);
					ЗаполнитьЗначенияСвойств(ДокументБух, СтруктураЗаполненияДокументаПКО);
					
					ДокументБух.РасшифровкаПлатежа.Очистить();
					
					СтрокаТЧ = ДокументБух.РасшифровкаПлатежа.Добавить();
					СтрокаТЧ.ДоговорКонтрагента = СтруктураЗаполненияДокумента.ДоговорКонтрагента;
					СтрокаТЧ.СпособПогашенияЗадолженности   = БазаБух.Перечисления.СпособыПогашенияЗадолженности.Автоматически;
					СтрокаТЧ.СуммаПлатежа = СтрокаВыгрузки.СуммаНаличные;
					СтрокаТЧ.СтавкаНДС = СтавкаНДСДляДокументов;
					СтрокаТЧ.СтатьяДвиженияДенежныхСредств = СтруктураЗаполненияДокумента.СтатьяДвиженияДенежныхСредств;
					СтрокаТЧ.СуммаВзаиморасчетов = СтрокаВыгрузки.СуммаНаличные;
					БазаБух.ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаТЧ); 
					
					Попытка
						ДокументБух.Записать(БазаБух.РежимЗаписиДокумента.Проведение);
					Исключение
						ДокументБух.Записать();
						ТекстОшибкиПроведения = ТекстОшибкиПроведения + ?(ЗначениеЗаполнено(ТекстОшибкиПроведения), Символы.ПС,"") + "Ошибка проведения " + БазаБух.String(ДокументБух.ref);					
					КонецПопытки;
					
					#Область УстановкаУникальногоПрефиксаПКО
					
					Если УстановитьПрефиксТопДеливери Тогда
						
						Запрос = БазаБух.NewObject("Запрос");
						Запрос.Текст = "
						|ВЫБРАТЬ
						|	МАКСИМУМ(ПриходныйКассовыйОрдер.Номер) КАК Номер
						|ИЗ
						|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
						|ГДЕ
						|	ПриходныйКассовыйОрдер.Номер ПОДОБНО &Префикс
						|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
						Запрос.УстановитьПараметр("Префикс", "ПА%");
						Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ДокументБух.Дата));
						Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ДокументБух.Дата));
						
						РезультатЗапроса = Запрос.Выполнить();
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
						НовыйНомер = "";
						ПолученНовыйНомер = Ложь;
						
						Если ВыборкаДетальныеЗаписи.Следующий() тогда
							Попытка
								НовыйНомер = Число(СтрЗаменить(ВыборкаДетальныеЗаписи.Номер,"ПА","")) + 1;
								ДокументБух.Номер = "ПА" + Формат(НовыйНомер,"ЧЦ=6; ЧН=0; ЧВН=; ЧГ=0");
								ПолученНовыйНомер = Истина;
							Исключение
								
							КонецПопытки;	
						Иначе
							НовыйНомер = "ПА000001";
							ДокументБух.Номер = НовыйНомер;
							ПолученНовыйНомер = Истина;
						КонецЕсли;						
						
						Если ПолученНовыйНомер Тогда
							Попытка
								ДокументБух.Записать();
							Исключение
								ТекстОшибкиПроведения = ТекстОшибкиПроведения + ?(ЗначениеЗаполнено(ТекстОшибкиПроведения), Символы.ПС,"") + "Ошибка установки номера " + БазаБух.String(ДокументБух.ref);
							КонецПопытки;	
						Иначе
							ТекстОшибкиПроведения = ТекстОшибкиПроведения + ?(ЗначениеЗаполнено(ТекстОшибкиПроведения), Символы.ПС,"") + "Ошибка получения очередного номера " + БазаБух.String(ДокументБух.ref);
						КонецЕсли;
					
					КонецЕсли;	
					
					#КонецОбласти
					
					ДанныеПредыдущейВыгрузки.ИдентификаторДокументаПКО = Новый УникальныйИдентификатор(БазаБух.String(ДокументБух.ref.УникальныйИдентификатор()));
					
				КонецЕсли;	
				#КонецОбласти
				
				#Область ВыгрузкаОперациюВведеннуюВручную
				Если СтрокиВведенияРучнойОперации.Количество() > 0 Тогда
					ЭтапВыгрузки = "ОперацияБух";
					
					ДатаДокументаОперации = НачалоДня(ДатаДокументов) + (СтрокаВыгрузки.ПланВыгрузки.ВремяОперацииВведеннойВручную - НачалоДня(СтрокаВыгрузки.ПланВыгрузки.ВремяОперацииВведеннойВручную));
					
					Если ЗначениеЗаполнено(ДанныеПредыдущейВыгрузки.ИдентификаторОперацииВведеннойВручную) Тогда
						
						УИД = БазаБух.NewObject("УникальныйИдентификатор", Строка(ДанныеПредыдущейВыгрузки.ИдентификаторОперацииВведеннойВручную));
						ДокументБух = БазаБух.Документы[ЭтапВыгрузки].GetRef(УИД).ПолучитьОбъект();
						
					Иначе
						
						ДокументБух = БазаБух.Документы[ЭтапВыгрузки].СоздатьДокумент();
						ДокументБух.Дата = ДатаДокументаОперации;
						
					КонецЕсли;
					
					ДокументБух.Организация = СтруктураЗаполненияДокумента.Организация;
					ДокументБух.СуммаОперации = СтрокиВведенияРучнойОперации.Итог("Сумма"); 
					ДокументБух.СпособЗаполнения = "Вручную";
					ДокументБух.Ответственный = СтруктураЗаполненияДокумента.Ответственный;
					ДокументБух.Содержание = БазаБух.String(СтруктураЗаполненияДокумента.Контрагент);
					ДокументБух.Комментарий = СтрокаКомментария;
					
					ДокументБух.Записать();
					ДанныеПредыдущейВыгрузки.ИдентификаторОперацииВведеннойВручную = Новый УникальныйИдентификатор(БазаБух.String(ДокументБух.ref.УникальныйИдентификатор()));
					
					ПроводкиОперации = ДокументБух.Движения.Хозрасчетный;
					ПроводкиОперации.Прочитать();					
					ПроводкиОперации.Очистить();
					
					Для Каждого СтрокаПроводки Из СтрокиВведенияРучнойОперации Цикл
						НоваяПроводка = ПроводкиОперации.Добавить();
						
						НоваяПроводка.СчетДт = СтрокаПроводки.СчетДт;
						Если  Не СтрокаПроводки.ВидСубконто1Дт = Неопределено тогда
							НоваяПроводка.СубконтоДт[СтрокаПроводки.ВидСубконто1Дт] = СтрокаПроводки.Субконто1Дт;
						КонецЕсли;
						Если  Не СтрокаПроводки.ВидСубконто2Дт = Неопределено тогда
							НоваяПроводка.СубконтоДт[СтрокаПроводки.ВидСубконто2Дт] = СтрокаПроводки.Субконто2Дт;
						КонецЕсли;
						Если  Не СтрокаПроводки.ВидСубконто3Дт = Неопределено тогда
							НоваяПроводка.СубконтоДт[СтрокаПроводки.ВидСубконто3Дт] = СтрокаПроводки.Субконто3Дт;
						КонецЕсли;
						
						НоваяПроводка.СчетКт = СтрокаПроводки.СчетКт;
						Если  Не СтрокаПроводки.ВидСубконто1Кт = Неопределено тогда
							НоваяПроводка.СубконтоКт[СтрокаПроводки.ВидСубконто1Кт] = СтрокаПроводки.Субконто1Кт;
						КонецЕсли;
						Если  Не СтрокаПроводки.ВидСубконто2Кт = Неопределено тогда
							НоваяПроводка.СубконтоКт[СтрокаПроводки.ВидСубконто2Кт] = СтрокаПроводки.Субконто2Кт;
						КонецЕсли;
						Если  Не СтрокаПроводки.ВидСубконто3Кт = Неопределено тогда
							НоваяПроводка.СубконтоКт[СтрокаПроводки.ВидСубконто3Кт] = СтрокаПроводки.Субконто3Кт;
						КонецЕсли;
						
						НоваяПроводка.Период = ДатаДокументаОперации;
						НоваяПроводка.Организация = ДокументБух.Организация;
						НоваяПроводка.Сумма = СтрокаПроводки.Сумма;
						
						Если Не СтрокаПроводки.СуммаДт = Неопределено Тогда				
							НоваяПроводка.СуммаНУДт = СтрокаПроводки.СуммаДт;
						КонецЕслИ;
						
						Если Не СтрокаПроводки.СуммаКт = Неопределено Тогда	
							НоваяПроводка.СуммаНУКт = СтрокаПроводки.СуммаКт;
						КонецЕслИ;

						Если Не СтрокаПроводки.КоличествоДт = Неопределено Тогда
							НоваяПроводка.КоличествоДт = СтрокаПроводки.КоличествоДт;
						КонецЕслИ;
						Если Не СтрокаПроводки.КоличествоКт = Неопределено Тогда
							НоваяПроводка.КоличествоКт = СтрокаПроводки.КоличествоКт;
						КонецЕслИ;
						//НоваяПроводка.Содержание = ДокументБух.Содержание;			
						
					КонецЦикла;	
					
					ПроводкиОперации.Записать(Истина);
					
					
				КонецЕсли;	
				#КонецОбласти
				
			Исключение
				
				ДанныеПредыдущейВыгрузки.Ошибка = Истина;
				ДанныеПредыдущейВыгрузки.ТекстОшибки = ТекстОшибкиПроведения + Символы.ПС + ОписаниеОшибки();
				
				ОшибкиВыгрузки = ОшибкиВыгрузки  + Символы.ПС + Строка(СтрокаВыгрузки.Партнер) + " ошибка выгрузки " + ЭтапВыгрузки + " " + ДанныеПредыдущейВыгрузки.ТекстОшибки;
				
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ТекстОшибкиПроведения) И Не ДанныеПредыдущейВыгрузки.Ошибка Тогда
				ДанныеПредыдущейВыгрузки.Ошибка = Истина;
				ДанныеПредыдущейВыгрузки.ТекстОшибки = ТекстОшибкиПроведения;
				
				ОшибкиВыгрузки = ОшибкиВыгрузки  + Символы.ПС + ТекстОшибкиПроведения;
				
			КонецЕсли;	 
			
			Набор = РегистрыСведений.ВыгрузкаДанныхВБухгалтерию.СоздатьНаборЗаписей();
			Набор.Отбор.Партнер.Установить(ДанныеПредыдущейВыгрузки.Партнер);
			Набор.Отбор.ТерминалДоставки.Установить(ДанныеПредыдущейВыгрузки.ТерминалДоставки);
			Набор.Отбор.ДатаВыгрузки.Установить(ДанныеПредыдущейВыгрузки.ДатаВыгрузки);
			Набор.Прочитать();
				
			Запись = Набор.Добавить();
			Запись.Период = ТекущаяДата();
			
			ЗаполнитьЗначенияСвойств(Запись, ДанныеПредыдущейВыгрузки);	
			Набор.Записать();

		КонецЦикла;		
				
		Соединение = Неопределено;
		БазаБух = Неопределено;		
		
	КонецЦикла;		
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыДобавленияТовараВДокумент(ПланВыгрузки, Наличные = Истина)

	ПараметрыДобавленияТовара = Новый Структура("ТипОплаты, ТоварПривязанККонтрагенту, ИдентификаторТовара, ИдентификаторТипаОплаты", Неопределено, Неопределено, Неопределено);
	
	Если  Наличные Тогда
		ТипОплат = Справочники.ТипыОплат.Наличные;
	Иначе
		ТипОплат = Справочники.ТипыОплат.Терминал;
	КонецЕсли;
		
	СтрокаТипаОплаты  = ПланВыгрузки.ТипыОплат.Найти(ТипОплат, "ТипОплаты");
	Если Не СтрокаТипаОплаты = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыДобавленияТовара, СтрокаТипаОплаты);
	Конецесли;
	
	Возврат ПараметрыДобавленияТовара;
	
КОнецФункции	

Функция ДанныеПоВыгруженнымДокументамПартнеров(Партнеры, ДатаВыгрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.Партнер КАК Партнер,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.ТерминалДоставки КАК ТерминалДоставки,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.ПланВыгрузки КАК ПланВыгрузки,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.СуммаТерминал КАК СуммаТерминал,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.СуммаНаличные КАК СуммаНаличные,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.ИдентификаторДокументаПоступления КАК ИдентификаторДокументаПоступления,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.ИдентификаторДокументаПКО КАК ИдентификаторДокументаПКО,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.ИдентификаторДокументаОтчетОРозничнойПродаже КАК ИдентификаторДокументаОтчетОРозничнойПродаже,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.ИдентификаторОперацииВведеннойВручную КАК ИдентификаторОперацииВведеннойВручную,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.Ошибка КАК Ошибка,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.Пользователь КАК Пользователь,
		|	ВыгрузкаДанныхВБухгалтериюСрезПоследних.ТекстОшибки КАК ТекстОшибки
		|ИЗ
		|	РегистрСведений.ВыгрузкаДанныхВБухгалтерию.СрезПоследних(
		|			,
		|			Партнер В (&СписокПартнеров)
		|				И (ДатаВыгрузки МЕЖДУ &НачДатаВыгрузки И &КонДатаВыгрузки)) КАК ВыгрузкаДанныхВБухгалтериюСрезПоследних";
	
	Запрос.УстановитьПараметр("СписокПартнеров", Партнеры);
	Запрос.УстановитьПараметр("НачДатаВыгрузки", НачалоДня(ДатаВыгрузки));
	Запрос.УстановитьПараметр("КонДатаВыгрузки", КонецДня(ДатаВыгрузки));
	
	Возврат  Запрос.Выполнить().Выгрузить();
	
КонецФункции	

#КонецОбласти
 
