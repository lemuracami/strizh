#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	 УправлениеДоступностьюРеквизитов();
	 ПолучитьПредставленияОбъектовБухгалтерии();
	 ЗаполнитьПредставленияОбъектовБухгалтерии();
	 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ПланАктивен Тогда//И Объект.Спецсчет Тогда
		
		Отказ = ПроверитьНаличиеПохожихСуществующихПланов();
		
		Если  Отказ Тогда
			ПоказатьВопрос(
			Новый ОписаниеОповещения("ОбработатьПохожиеПланыПриЗаписи", ЭтотОбъект),
			"Обнаружены похожие планы. Установить их неактивными?", 
			РежимДиалогаВопрос.ДаНет);
		КонецЕслИ;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура СтатьяДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПолученияОбъектов = Новый Структура("ИсточникДанных, Организация, ИмяОбъектаБухгалтерии", Объект.ИсточникДанных, Объект.Организация, "Справочник.СтатьиДвиженияДенежныхСредств");
	ОткрытьФорму("Справочник.ПланыВыгрузкиДанныхВБухгалтерию.Форма.ФормаВыбораОбъектовБухгалтерии",ПараметрыПолученияОбъектов,Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)= Тип("Структура") Тогда
		Объект.ИдентификаторСтатьиДДС = ВыбранноеЗначение.Идентификатор;
		Объект.ПредставлениеСтатьиДДС = ВыбранноеЗначение.Представление;
	КонецЕсли;
	ЗаполнитьПредставленияОбъектовБухгалтерии();

КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ИдентификаторСтатьиДДС = Неопределено;
	Объект.ПредставлениеСтатьиДДС = Неопределено;
	ЗаполнитьПредставленияОбъектовБухгалтерии();

КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.Спецсчет Тогда
		Если Объект.ТипыОплат.Количество()= 1	Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя добавлять более одного типа оплаты по спецсчету!");
		КонецЕсли;
	Иначе
		Если Объект.ТипыОплат.Количество()= 2	Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя добавлять более двух типов оплаты!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНастроекПриИзменении(Элемент)
	
	УправлениеДоступностьюРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТипОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Объект.Спецсчет Тогда		
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.ТипыОплат.Наличные"));
	Иначе
		
		Если Не ЕстьТипОплаты(ПредопределенноеЗначение("Справочник.ТипыОплат.Наличные")) Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.ТипыОплат.Наличные"));
		КонецЕсли;
		Если Не ЕстьТипОплаты(ПредопределенноеЗначение("Справочник.ТипыОплат.Терминал")) Тогда	
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.ТипыОплат.Терминал"));		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СпецсчетПриИзменении(Элемент)
	
	СтрокиНаличные = Объект.ТипыОплат.НайтиСтроки(Новый Структура("ТипОплаты",ПредопределенноеЗначение("Справочник.ТипыОплат.Наличные")));
	
	Если Объект.Спецсчет И СтрокиНаличные.Количество() < Объект.ТипыОплат.Количество() Тогда
		
		ПоказатьВопрос(
		Новый ОписаниеОповещения("ИзменениеТиповОплатПоСпецСчету",ЭтотОбъект),
		"Из типов оплат будут удалены все строки, не соответствующие спецсчету. Продолжить?",
		РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТоварБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПолученияОбъектов = Новый Структура("ИсточникДанных, Организация, ИмяОбъектаБухгалтерии", Объект.ИсточникДанных, Объект.Организация, "Справочник.Номенклатура");
	ОткрытьФорму("Справочник.ПланыВыгрузкиДанныхВБухгалтерию.Форма.ФормаВыбораОбъектовБухгалтерии",ПараметрыПолученияОбъектов,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТипОплатыБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПолученияОбъектов = Новый Структура("ИсточникДанных, Организация, ИмяОбъектаБухгалтерии", Объект.ИсточникДанных, Объект.Организация, "Справочник.ВидыОплатОрганизаций");
	ОткрытьФорму("Справочник.ПланыВыгрузкиДанныхВБухгалтерию.Форма.ФормаВыбораОбъектовБухгалтерии",ПараметрыПолученияОбъектов, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТипОплатыБухгалтерииОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ТипыОплат.ТекущиеДанные.ИдентификаторТипаОплаты = Неопределено;
	Элементы.ТипыОплат.ТекущиеДанные.ПредставлениеТипаОплаты = Неопределено;
	ЗаполнитьПредставленияОбъектовБухгалтерии();

КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТоварБухгалтерииОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ТипыОплат.ТекущиеДанные.ИдентификаторТовара = Неопределено;
	Элементы.ТипыОплат.ТекущиеДанные.ПредставлениеТовара = Неопределено;
	ЗаполнитьПредставленияОбъектовБухгалтерии();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТипОплатыБухгалтерииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)= Тип("Структура") Тогда
		Элементы.ТипыОплат.ТекущиеДанные.ИдентификаторТипаОплаты = ВыбранноеЗначение.Идентификатор;
		Элементы.ТипыОплат.ТекущиеДанные.ПредставлениеТипаОплаты = ВыбранноеЗначение.Представление;
	КонецЕсли;
	ЗаполнитьПредставленияОбъектовБухгалтерии();

КонецПроцедуры


&НаКлиенте
Процедура ТипыОплатТоварБухгалтерииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)= Тип("Структура") Тогда
		Элементы.ТипыОплат.ТекущиеДанные.ИдентификаторТовара = ВыбранноеЗначение.Идентификатор;
		Элементы.ТипыОплат.ТекущиеДанные.ПредставлениеТовара = ВыбранноеЗначение.Представление;
	КонецЕсли;
	ЗаполнитьПредставленияОбъектовБухгалтерии();

КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТипыОплат.ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Элементы.ТипыОплатТоварБухгалтерии.ТолькоПросмотр = Элементы.ТипыОплат.ТекущиеДанные.ТоварПривязанККонтрагенту;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаСервере
Процедура ОбновитьПредставленияОбъектовБухгалтерииНаСервере()
	
	ПолучитьПредставленияОбъектовБухгалтерии();
	ЗаполнитьПредставленияОбъектовБухгалтерии();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставленияОбъектовБухгалтерии(Команда)
	ОбновитьПредставленияОбъектовБухгалтерииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЕстьТипОплаты(ТипОплаты)
	Возврат  Объект.ТипыОплат.НайтиСтроки(Новый Структура("ТипОплаты", ТипОплаты)).Количество() > 0;  	
КонецФункции	

&НаСервере
Функция ПроверитьНаличиеПохожихСуществующихПланов()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыВыгрузкиДанныхВБухгалтерию.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПланыВыгрузкиДанныхВБухгалтерию КАК ПланыВыгрузкиДанныхВБухгалтерию
	|ГДЕ
	|	ПланыВыгрузкиДанныхВБухгалтерию.ПланАктивен
	|	И ПланыВыгрузкиДанныхВБухгалтерию.Спецсчет = &Спецсчет
	|	И ПланыВыгрузкиДанныхВБухгалтерию.Организация = &Организация
	|	И НЕ ПланыВыгрузкиДанныхВБухгалтерию.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Спецсчет", Объект.Спецсчет);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат РезультатЗапроса.Следующий(); 
		
КонецФункции	

&НаСервере 
Функция ОтключитьПохожиеПланы()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланыВыгрузкиДанныхВБухгалтерию.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПланыВыгрузкиДанныхВБухгалтерию КАК ПланыВыгрузкиДанныхВБухгалтерию
		|ГДЕ
		|	ПланыВыгрузкиДанныхВБухгалтерию.ПланАктивен
		|	И ПланыВыгрузкиДанныхВБухгалтерию.Спецсчет = &Спецсчет
		|	И ПланыВыгрузкиДанныхВБухгалтерию.Организация = &Организация
		|	И НЕ ПланыВыгрузкиДанныхВБухгалтерию.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Спецсчет", Объект.Спецсчет);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Попытка
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПланОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ПланОбъект.ПланАктивен = Ложь;
			ПланОбъект.Записать();
		КонецЦикла;
		
		Возврат Истина;
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;

	Конецпопытки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПохожиеПланыПриЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		 Если ОтключитьПохожиеПланы() Тогда
		 	ЭтотОбъект.Записать();
		 КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьПредставленияОбъектовБухгалтерии()
	
	Если Не ЗначениеЗаполнено(Объект.ИсточникДанных) Тогда Возврат КонецЕсли;
	Если Не Объект.ОбновлятьОбъектыБухгалтерииПриОткрытии Тогда Возврат КонецЕсли;
	
	
	МассивОбновляемыхСтрок = НОвый Массив;
	Для Каждого СтрокаТипОплаты Из Объект.ТипыОплат Цикл
		Если ЗначениеЗаполнено(СтрокаТипОплаты.ИдентификаторТовара) 
			ИЛИ ЗначениеЗаполнено(СтрокаТипОплаты.ИдентификаторТипаОплаты) Тогда
			
			МассивОбновляемыхСтрок.Добавить(СтрокаТипОплаты);
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если МассивОбновляемыхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураCOM = ПлатежиКомитентамСервер.ПолучитьСоединениеСБазой(Объект.ИсточникДанных);
	
	Если СтруктураCOM = Неопределено Тогда
		Сообщить("Не удалось установить соединение для организации " + Объект.Организация);
		Возврат;
	КонецЕсли; 
	
	Соединение = СтруктураCOM.Соединение;
	БазаБух = СтруктураCOM.БазаБух;

	Для Каждого СтрокаТипОплаты Из МассивОбновляемыхСтрок Цикл
		
		Если ЗначениеЗаполнено(СтрокаТипОплаты.ИдентификаторТовара) Тогда
			УИД = БазаБух.NewObject("УникальныйИдентификатор", Строка(СтрокаТипОплаты.ИдентификаторТовара));
			ОбъектБух = БазаБух.Справочники.Номенклатура.GetRef(УИД);
			СтрокаТипОплаты.ПредставлениеТовара = БазаБух.String(ОбъектБух);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТипОплаты.ИдентификаторТипаОплаты) Тогда
			УИД = БазаБух.NewObject("УникальныйИдентификатор", Строка(СтрокаТипОплаты.ИдентификаторТипаОплаты));
			ОбъектБух = БазаБух.Справочники.ВидыОплатОрганизаций.GetRef(УИД);
			СтрокаТипОплаты.ПредставлениеТипаОплаты = БазаБух.String(ОбъектБух);
		КонецЕсли;

	КонецЦикла;
	
	Соединение = Неопределено;
	БазаБух = Неопределено;
	
КонецПроцедуры	

&НаСервере
Процедура ИзменениеТиповОплатПоСпецСчетуНаСервере()
	
	СтрокиНаличные = Объект.ТипыОплат.НайтиСтроки(Новый Структура("ТипОплаты",ПредопределенноеЗначение("Справочник.ТипыОплат.Наличные")));
	ТаблицаСтрокОплаты = Новый ТаблицаЗначений;
	
	ТаблицаСтрокОплаты = Объект.ТипыОплат.Выгрузить(СтрокиНаличные);
	
	Объект.ТипыОплат.Очистить();
	Объект.ТипыОплат.Загрузить(ТаблицаСтрокОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеТиповОплатПоСпецСчету(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИзменениеТиповОплатПоСпецСчетуНаСервере();
	Иначе
		Объект.Спецсчет = Ложь;
	КонецЕсли;
	
Конецпроцедуры	

&НаСервере
Процедура ЗаполнитьПредставленияОбъектовБухгалтерии()
	
	СтатьяДДС = Объект.ПредставлениеСтатьиДДС + ?(ЗначениеЗаполнено(Объект.ИдентификаторСтатьиДДС), " (" + СокрЛП(Объект.ИдентификаторСтатьиДДС) + ")","");
	
	Для Каждого СтрокаТЧ Из Объект.ТипыОплат Цикл
		
		СтрокаТЧ.ТоварБухгалтерии  = СокрЛП(СтрокаТЧ.ПредставлениеТовара) + ?(ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторТовара), " (" + СокрЛП(СтрокаТЧ.ИдентификаторТовара) + ")","");
		СтрокаТЧ.ТипОплатыБухгалтерии  = СокрЛП(СтрокаТЧ.ПредставлениеТипаОплаты) +  ?(ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторТипаОплаты), " (" + СокрЛП(СтрокаТЧ.ИдентификаторТипаОплаты) + ")","");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов()
	
	СимволОтметки = " (включен)";
	Элементы.ГруппаРеквизитов.Доступность = Объект.ПланАктивен;
	
	Элементы.ГруппаРеквизитыПоступление.Доступность = Объект.СоздаватьПоступлениеТоваров;
	Элементы.ГруппаСоздаватьПоступление.ЗаголовокСвернутогоОтображения = Элементы.ГруппаСоздаватьПоступление.Заголовок + ?(Объект.СоздаватьПоступлениеТоваров,СимволОтметки,"");
	
	Элементы.ГруппаРеквизитыПКО.Доступность = Объект.СоздаватьПКО;
	Элементы.ГруппаСоздаватьПКО.ЗаголовокСвернутогоОтображения = Элементы.ГруппаСоздаватьПКО.Заголовок + ?(Объект.СоздаватьПКО,СимволОтметки,"");

	Элементы.ГруппаРеквизитыОтчетПоРознице.Доступность = Объект.СоздаватьОтчетОРозничныхПродажах;
	Элементы.ГруппаСоздаватьОтчетРозницы.ЗаголовокСвернутогоОтображения = Элементы.ГруппаСоздаватьОтчетРозницы.Заголовок + ?(Объект.СоздаватьОтчетОРозничныхПродажах,СимволОтметки,"");

	Элементы.ГруппаРеквизитыРучнойОперации.Доступность = Объект.СоздаватьОперациюВведеннуюВручную;
	Элементы.ГруппаСоздаватьРучныеОперации.ЗаголовокСвернутогоОтображения = Элементы.ГруппаСоздаватьРучныеОперации.Заголовок + ?(Объект.СоздаватьОперациюВведеннуюВручную,СимволОтметки,"");

КонецПроцедуры	

#КонецОбласти