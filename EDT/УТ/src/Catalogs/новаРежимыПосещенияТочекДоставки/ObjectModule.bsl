
// Возвращает дни месяца, попадающие в расписание доставки.
//
// Параметры:
//  Месяц       <Дата>: месяц расчета.
//  соПраздники <Соответствие(<Дата>)>: праздничные дни.
//
// Возвращаемое значение:
//  <Соответствие(<Дата>, Структура(ВремяНачала, ВремяОкончания, ВремяПребывания: <Дата>))>
//
Функция ПолучитьДниПосещения(Месяц, соПраздники) Экспорт
	соДниПосещения = Новый Соответствие;
	
	СекундВДне = 60 * 60 * 24;
	
	Если ВидРасписания = Перечисления.новаВидыРасписанийПосещенияТочекДоставки.ПоДнямНедели Тогда
		текДата = НачалоМесяца(Месяц);
		ПоследняяДата = КонецМесяца(Месяц);
		Пока текДата <= ПоследняяДата Цикл
			перДеньНедели = Перечисления.новаДниНедели[ДеньНедели(текДата) - 1];
			стрДеньНедели = ДниНедели.Найти(перДеньНедели, "ДеньНедели");
			
			Если стрДеньНедели <> Неопределено Тогда
				соДниПосещения.Вставить(текДата, Новый Структура("ВремяНачала, ВремяОкончания, ВремяПребывания",
					стрДеньНедели.ВремяНачала,
					стрДеньНедели.ВремяОкончания,
					стрДеньНедели.ВремяПребывания));
			КонецЕсли;
			
			текДата = текДата + СекундВДне;
		КонецЦикла;
		
	ИначеЕсли ВидРасписания = Перечисления.новаВидыРасписанийПосещенияТочекДоставки.ПоДнямНеделиМесяца Тогда
		СекундВНеделе = СекундВДне * 7;
		
		Для Каждого стрДеньНеделиМесяца Из ДниНеделиМесяца Цикл
			чслДеньНедели = Перечисления.новаДниНедели.Индекс(стрДеньНеделиМесяца.ДеньНедели) + 1;
			
			Если ДниНеделиНумероватьСКонцаМесяца Тогда
				текДата = КонецМесяца(Месяц);
				ПоследняяДата = НачалоМесяца(Месяц);
				Пока текДата >= ПоследняяДата Цикл
					Если ДеньНедели(текДата) = чслДеньНедели Тогда Прервать; КонецЕсли;
					
					текДата = текДата - СекундВДне;
				КонецЦикла;
				
				СекундВНеделе = -СекундВНеделе;
			Иначе	
				текДата = НачалоМесяца(Месяц);
				ПоследняяДата = КонецМесяца(Месяц);
				Пока текДата <= ПоследняяДата Цикл
					Если ДеньНедели(текДата) = чслДеньНедели Тогда Прервать; КонецЕсли;
					
					текДата = текДата + СекундВДне;
				КонецЦикла;
			КонецЕсли;
			
			ъ = стрДеньНеделиМесяца.НомерДня;
			Пока ъ > 1 Цикл
				текДата = текДата + СекундВНеделе;
				
				ъ = ъ - 1;	
			КонецЦикла;
			
			Если НачалоМесяца(текДата) <> НачалоМесяца(Месяц) Тогда Продолжить;	КонецЕсли;
			
			соДниПосещения.Вставить(текДата, Новый Структура("ВремяНачала, ВремяОкончания, ВремяПребывания",
				стрДеньНеделиМесяца.ВремяНачала,
				стрДеньНеделиМесяца.ВремяОкончания,
				стрДеньНеделиМесяца.ВремяПребывания));
		КонецЦикла;
		
	ИначеЕсли ВидРасписания = Перечисления.новаВидыРасписанийПосещенияТочекДоставки.ПоЧисламМесяца Тогда
		Для Каждого стрЧислоМесяца Из ЧислаМесяца Цикл
			Попытка
				текДата = Дата(Год(Месяц), Месяц(Месяц), стрЧислоМесяца.ЧислоМесяца);
			Исключение
				Продолжить;				
			КонецПопытки;
			
			соДниПосещения.Вставить(текДата, Новый Структура("ВремяНачала, ВремяОкончания, ВремяПребывания",
				стрЧислоМесяца.ВремяНачала,
				стрЧислоМесяца.ВремяОкончания,
				стрЧислоМесяца.ВремяПребывания));
		КонецЦикла;
	КонецЕсли;
	
	Если СпособУчетаПраздников = Перечисления.новаСпособыУчетаПраздников.Включать Тогда
		Для Каждого ЭлПраздник Из соПраздники Цикл
			стОкно = соДниПосещения[ЭлПраздник.Ключ];
			Если стОкно <> Неопределено Тогда Продолжить; КонецЕсли;
			
			соДниПосещения.Вставить(ЭлПраздник.Ключ, Новый Структура("ВремяНачала, ВремяОкончания, ВремяПребывания"));
		КонецЦикла;
		
	ИначеЕсли СпособУчетаПраздников = Перечисления.новаСпособыУчетаПраздников.Исключать Тогда
		Для Каждого ЭлПраздник Из соПраздники Цикл                              
			соДниПосещения.Удалить(ЭлПраздник.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат соДниПосещения;
КонецФункции