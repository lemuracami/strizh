&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не РольДоступна("Админы") Тогда
		ТолькоПросмотр = Истина;
	КонецеСли;	
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЧтениеПараметровРегиональныхТерминалов();
КонецПроцедуры



&НаСервере
Процедура РедактироватьНастройкиРегламентногоЗадания()
	
	// ---------------  регламентное задание "ВыгрузкаМашинВАдминку"	
	мРегламентноеЗадание = Неопределено;
	ТекущееРегламентноеЗадание = НайтиРеглЗаданиеПоПараметру(Объект.РегламентноеЗадание);

	Если ЗначениеЗаполнено(мРегламентноеЗадание)  Тогда	
		ОбъектЗадания = ПолучитьИзВременногоХранилища(мРегламентноеЗадание);		
	Иначе	
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ВыгрузкаМашинВАдминку");	
	    Объект.РегламентноеЗадание = ОбъектЗадания.УникальныйИдентификатор;
		ОбъектЗадания.Параметры.Добавить(Объект.Код);
	КонецЕсли;
	
	Если ОбъектЗадания = Неопределено Тогда		
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ВыгрузкаМашинВАдминку");	
	    Объект.РегламентноеЗадание = ОбъектЗадания.УникальныйИдентификатор;
		ОбъектЗадания.Параметры.Добавить(Объект.Код);
	КонецЕсли;
								
	ОбъектЗадания.Наименование = "ВыгрузкаМашинВАдминку";
	ОбъектЗадания.Использование = Объект.Активен;
	ОбъектЗадания.Ключ = Объект.Код;	
	ОбъектЗадания.Расписание.ВремяНачала = Объект.ВремяВыгрузки;
	ОбъектЗадания.Расписание.ПериодПовтораДней = 1;

	Попытка	
		ОбъектЗадания.Записать();		   
	Исключение
		#Если Клиент Тогда
			Сообщить("Не удалось создать регламентное задание ""ВыгрузкаМашинВАдминку"". ");
		#КонецЕсли	
	КонецПопытки;
	
	// ---------------  регламентное задание "Закрытие опер дня"
	мРегламентноеЗадание = Неопределено;
	ТекущееРегламентноеЗадание = НайтиРеглЗаданиеПоПараметру(Объект.РеглЗаданиеЗакрытиеОперДня);

	Если ЗначениеЗаполнено(мРегламентноеЗадание)  Тогда	
		ОбъектЗадания = ПолучитьИзВременногоХранилища(мРегламентноеЗадание);		
	Иначе	
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗакрытиеОперДня");	
	    Объект.РеглЗаданиеЗакрытиеОперДня = ОбъектЗадания.УникальныйИдентификатор;	
		ОбъектЗадания.Параметры.Добавить(Объект.Код);
	КонецЕсли;
	
	Если ОбъектЗадания = Неопределено Тогда		
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗакрытиеОперДня");	
	    Объект.РеглЗаданиеЗакрытиеОперДня = ОбъектЗадания.УникальныйИдентификатор;
		ОбъектЗадания.Параметры.Добавить(Объект.Код);
	КонецЕсли;
								
	ОбъектЗадания.Наименование = "РегламентЗакрытиеОперДняСклад";
	ОбъектЗадания.Ключ = Объект.Код;	
	ОбъектЗадания.Использование = Объект.Активен;
	ОбъектЗадания.Расписание.ВремяНачала = Объект.ВремяЗакрытияОперДня;    
	ОбъектЗадания.Расписание.ПериодПовтораДней = 1;

	Попытка	
		ОбъектЗадания.Записать();		   
	Исключение
		#Если Клиент Тогда
			Сообщить("Не удалось создать регламентное задание ""РегламентЗакрытиеОперДняСклад"". ");
		#КонецЕсли	
	КонецПопытки;
	
		
КонецПроцедуры

&НаСервере
Функция НайтиРеглЗаданиеПоПараметру(УникальныйНомерЗадания)
	
	Попытка
		
		Если НЕ ПустаяСтрока(УникальныйНомерЗадания) Тогда
			
			УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(УникальныйНомерЗадания);
			ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
			
		Иначе
			
			ТекущееРегламентноеЗадание = Неопределено;
			
		КонецЕсли;
		
	Исключение
		
		ТекущееРегламентноеЗадание = Неопределено;
		
    КонецПопытки;
	
	мРегламентноеЗадание = ПоместитьВоВременноеХранилище(ТекущееРегламентноеЗадание);
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЧтениеПараметровРегиональныхТерминалов()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПараметрыРегиональныхТерминаловСрезПоследних.Период КАК Период,
	                      |	ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал КАК РегиональныйТерминал,
	                      |	ПараметрыРегиональныхТерминаловСрезПоследних.РежимНазначенияНомеровПалетПриМаршрутизации КАК РежимНазначенияНомеровПалетПриМаршрутизации,
	                      |	ПараметрыРегиональныхТерминаловСрезПоследних.МетодикаЛогистическойМаршрутизации КАК МетодикаЛогистическойМаршрутизации,
	                      |	ПараметрыРегиональныхТерминаловСрезПоследних.СхемаНазначенияНомеровПалетПоПолигонам КАК СхемаНазначенияНомеровПалетПоПолигонам,
	                      |	ПараметрыРегиональныхТерминаловСрезПоследних.ИспользоватьОпределениеСменыМаршрутизации КАК ИспользоватьОпределениеСменыМаршрутизации,
						  |	ПараметрыРегиональныхТерминаловСрезПоследних.ЗонаТарификацииЗаказовСамовывоза КАК ЗонаТарификацииЗаказовСамовывоза
	                      |ИЗ
	                      |	РегистрСведений.ПараметрыРегиональныхТерминалов.СрезПоследних КАК ПараметрыРегиональныхТерминаловСрезПоследних
	                      |ГДЕ
	                      |	ПараметрыРегиональныхТерминаловСрезПоследних.РегиональныйТерминал = &РегиональныйТерминал");
	Запрос.УстановитьПараметр("РегиональныйТерминал", Объект.Ссылка);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда				
		РежимНазначенияНомеровПалетПриМаршрутизации = Рез.РежимНазначенияНомеровПалетПриМаршрутизации;
		МетодикаЛогистическойМаршрутизации = Рез.МетодикаЛогистическойМаршрутизации;	
		СхемаНазначенияНомеровПалетПоПолигонам = Рез.СхемаНазначенияНомеровПалетПоПолигонам;
		ИспользоватьОпределениеСменыМаршрутизации = Рез.ИспользоватьОпределениеСменыМаршрутизации;
		ЗонаТарификацииЗаказовСамовывоза = Рез.ЗонаТарификацииЗаказовСамовывоза;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаписьПараметровРегиональныхТерминалов()

	ТекВр = ТекущаяДата();
	
	Набор = РегистрыСведений.ПараметрыРегиональныхТерминалов.СоздатьНаборЗаписей();
	Набор.Отбор.РегиональныйТерминал.Установить(Объект.Ссылка);
	Набор.Прочитать();
	
	НЗапись = Набор.Добавить();
	НЗапись.Период = ТекВр;
	НЗапись.РегиональныйТерминал = Объект.Ссылка;
	НЗапись.МетодикаЛогистическойМаршрутизации = МетодикаЛогистическойМаршрутизации;
	НЗапись.РежимНазначенияНомеровПалетПриМаршрутизации = РежимНазначенияНомеровПалетПриМаршрутизации;
	НЗапись.СхемаНазначенияНомеровПалетПоПолигонам = СхемаНазначенияНомеровПалетПоПолигонам;
	НЗапись.ИспользоватьОпределениеСменыМаршрутизации = ИспользоватьОпределениеСменыМаршрутизации;
	НЗапись.ЗонаТарификацииЗаказовСамовывоза = ЗонаТарификацииЗаказовСамовывоза;
	
	Набор.Записать();	
	
	ДоступностьРедактированияСхемаНазначенияНомеровПалетПоПолигонам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	От = Вопрос("Изменить параметры регламентных заданий?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
	Если От = КодВозвратаДиалога.Да Тогда
		РедактироватьНастройкиРегламентногоЗадания();
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаписьПараметровРегиональныхТерминалов();
КонецПроцедуры

// Якурнов 21.08.2018 17:56:10
&НаСервере
Процедура ДоступностьРедактированияСхемаНазначенияНомеровПалетПоПолигонам()
	
	Если НЕ РежимНазначенияНомеровПалетПриМаршрутизации = Перечисления.РежимыНазначенияНомеровПалет.ПоМаркеТранспортаИНомеруПолигона Тогда
		Элементы.СхемаНазначенияНомеровПалетПоПолигонам.Доступность = Ложь;
	Иначе
		Элементы.СхемаНазначенияНомеровПалетПоПолигонам.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДоступностьРедактированияСхемаНазначенияНомеровПалетПоПолигонам();
КонецПроцедуры

&НаКлиенте
Процедура РежимНазначенияНомеровПалетПриМаршрутизацииПриИзменении(Элемент)
	ДоступностьРедактированияСхемаНазначенияНомеровПалетПоПолигонам();
КонецПроцедуры
