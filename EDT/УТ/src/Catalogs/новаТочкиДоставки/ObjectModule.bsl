
//**** Вспомогательные функции ****//

// Заполняет незаполненные параметры точки доставки по умолчанию.
//
Процедура ЗаполнитьПараметры() Экспорт
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		ЗаполнитьГрафик(Константы.новаТочкаДоставкиГрафикРаботыПоУмолчанию.Получить());
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(ВремяПребывания) Тогда
		ВремяПребывания = Константы.новаТочкаДоставкиВремяПребыванияПоУмолчанию.Получить();
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(ВремяРаботыНачало) Тогда
		ВремяРаботыНачало = Константы.новаТочкаДоставкиВремяРаботыНачалоПоУмолчанию.Получить();
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(ВремяРаботыОкончание) Тогда
		ВремяРаботыОкончание = Константы.новаТочкаДоставкиВремяРаботыОкончаниеПоУмолчанию.Получить();
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(СменаПланирования) Тогда
		СменаПланирования = Константы.новаТочкаДоставкиСменаПланированияПоУмолчанию.Получить();
	КонецЕсли;		
КонецПроцедуры

// Возвращает окно доставки на заданную дату, из графика работы точки.
//
// Параметры:
//  НаДату <Дата>
//
// Возвращаемое значение:
//  <Структура(ВремяНачала, ВремяОкончания, ВремяПребывания: <Дата>)>
//
Функция ПолучитьОкноДоставки(НаДату) Экспорт
	ДеньГрафика = ДеньНедели(НаДату) - 1;
	Если ДеньГрафика < ГрафикРаботы.Количество() Тогда
		стрДеньГрафика = ГрафикРаботы[ДеньГрафика];
		Если стрДеньГрафика.Используется Тогда
			Возврат Новый Структура("ВремяНачала, ВремяОкончания, ВремяПребывания",
				стрДеньГрафика.ВремяНачала,
				стрДеньГрафика.ВремяОкончания,
				стрДеньГрафика.ВремяПребывания);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ВремяНачала, ВремяОкончания, ВремяПребывания",
		ВремяРаботыНачало,
		ВремяРаботыОкончание,
		ВремяПребывания);
КонецФункции
	
// Заполняет индивидуальный график работы точки по типовому графику работы.
//
// Параметры:
//  График <СправочникСсылка.новаГрафикиРаботы>
//
Процедура ЗаполнитьГрафик(График) Экспорт
	Если Не ЗначениеЗаполнено(График) Тогда Возврат; КонецЕсли; 
	
	ГрафикРаботы.Очистить();
	Для ъ = 0 По 6 Цикл
		стрДень = ГрафикРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(стрДень, График.Дни[ъ % График.Дни.Количество()]);
		стрДень.Используется = Истина;
	КонецЦикла;
КонецПроцедуры

//**** Обработчики событий объекта ****//

//Заполнение графика работы
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	Конецесли;

	Если ГрафикРаботы.Количество() = 0 Тогда
		ЗаполнитьГрафик(Константы.новаТочкаДоставкиГрафикРаботыПоУмолчанию.Получить());
	КонецЕсли;
	
	//Бухаров 03.09.2013
	Если ЗначениеЗаполнено(Адрес) И ЗначениеЗаполнено(Адрес.Широта) И ЗначениеЗаполнено(Адрес.Долгота) Тогда
		Москва = Справочники.новаГеоРайоны.ОпределениеМосквы(Адрес.Широта, Адрес.Долгота);	
	КонецЕсли;
	//Бухаров

КонецПроцедуры

//Синхронизация с КСЛ
//
Процедура ПриЗаписи(Отказ)
//херим нова	
	//Попытка
	//	новаОбменКСЛ.СохранитьТочкуДоставки(ЭтотОбъект);
	//Исключение
	//	#Если Клиент Тогда			
	//		новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("ВнутренняОшибкаСервера", ОписаниеОшибки());
	//	#КонецЕсли
	//	Отказ = Истина;
	//КонецПопытки;
	//херим нова	
КонецПроцедуры

//Синхронизация с КСЛ
//
Процедура ПередУдалением(Отказ)
//херим нова	
	//Попытка
	//	новаОбменКСЛ.УдалитьТочкуДоставки(ЭтотОбъект);
	//Исключение
	//	#Если Клиент Тогда			
	//		новаОбщиеПроцедуры.СообщитьПользователюОбОшибке("ВнутренняОшибкаСервера", ОписаниеОшибки());
	//	#КонецЕсли
	//	Отказ = Истина;
	//КонецПопытки;
//херим нова	
КонецПроцедуры
