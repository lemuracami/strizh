
&НаКлиенте
Процедура НайтиАдрес(Команда)
	
	СтрПараметров = Новый Структура;
	Если ПолучитьНаименованиеАдреса() = "" Тогда
		СтрПараметров.Вставить("Адрес",Объект.Наименование);
	Иначе
		СтрПараметров.Вставить("Адрес",ПолучитьНаименованиеАдреса());
	КонецЕсли;
	ОткрытьФорму("Обработка.новаПоискАдреса.Форма.ФормаУпр",СтрПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаименованиеАдреса()
	Возврат Объект.Адрес.Наименование;
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыбранАдрес" Тогда
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			ВыполнитьПодстановкуАдреса(Параметр);
			Модифицированность = Истина;
			
			РайоныАдресов.Отбор.Элементы.Очистить();
			ЭлементОтбораСчета = РайоныАдресов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			ЭлементОтбораСчета.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Адрес"); 
			ЭлементОтбораСчета.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементОтбораСчета.Использование = Истина; 
			ЭлементОтбораСчета.ПравоеЗначение = Объект.Адрес;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПодстановкуАдреса(обАдрес)
	
	Объект.Наименование = ОбАдрес.Наименование;
	Объект.Адрес = обАдрес;
	
	ТекВр = ТекущаяДата();
	Наб = РегистрыСведений.ЛогПривязкиАдресов.СоздатьНаборЗаписей();
	Наб.Отбор.ТочкаДоставки.Установить(Объект.Ссылка);
	Наб.Отбор.Период.Установить(ТекВр);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекВр;
	Нов.ТочкаДоставки = Объект.Ссылка;
	Нов.Адрес = ОбАдрес.Наименование;
	Нов.РучнаяПривязка = Истина;
	Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Наб.Записать();
	
	//НастроитьПоляАдреса();
	
	НаборЗаписей = РегистрыСведений.новаРайоныАдресов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Адрес.Установить(обАдрес.Ссылка);
	НаборЗаписей.Прочитать();
	ГеоРайоны = НаборЗаписей.Выгрузить();
	
	// Михушкин --->> 
	//ищем БП местная доставка
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаборТовара") Тогда
		Если НадоПроизводитьПоискПолигона Тогда
			Если ЗначениеЗаполнено(обАдрес.Долгота) И ЗначениеЗаполнено(обАдрес.Широта) Тогда
				МассивСтрук = Новый Массив;
				
				Струк = Новый Структура;
				
				Струк.Вставить("НомерЗаказа", Число(СокрЛП(Заказ.Номер)));
				Струк.Вставить("Широта", обАдрес.Широта);
				Струк.Вставить("Долгота", обАдрес.Долгота);
				МассивСтрук.Добавить(Струк);
				
				//+Широков 24.12.2020 по письму
				//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);	
				ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "Справочник.новаТочкиДоставки.ФормаЭлементаУпр.ВыполнитьПодстановкуАдреса(84, 5)");	
				//-Широков 24.12.2020 по письму
				
				//Асеев 14.10.2022 (Задача № 4913)>>>
				МассивЗаказовЗон = Новый Массив;
				МассивЗаказовЗон.Добавить(Заказ);
				ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
				//Асеев 14.10.2022 (Задача № 4913)<<<
			КонецеСли;
		КонецеСли;
	Иначе	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	новаМестнаяДоставка.Ссылка КАК Ссылка,
		|	новаМестнаяДоставка.Номер КАК Номер,
		|	новаМестнаяДоставка.ТочкаОтправления КАК ТочкаОтправления
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
		|ГДЕ
		|	новаМестнаяДоставка.ТочкаПрибытия = &ТочкаПрибытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.Номер КАК Номер,
		|	ВТ.ТочкаОтправления КАК ТочкаОтправления,
		|	РеализацияТоваровУслуг.Ссылка КАК Заказ,
		|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТ.Номер = РеализацияТоваровУслуг.Номер
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Заказ");
		Запрос.УстановитьПараметр("ТочкаПрибытия", Объект.Ссылка);	
		//mel добавление отбора по заказу 07.02.2018
		Запрос.УстановитьПараметр("Заказ", Заказ);	
		//mel добавление отбора по заказу 07.02.2018
		
		Рез = Запрос.Выполнить().Выбрать();
		
		
		
		РасстояниеПоДорогам = 0;
		
		Пока Рез.Следующий() Цикл	
			
			//mel установка полигонального адреса 07.02.2018
			Если НадоПроизводитьПоискПолигона Тогда
				Если ЗначениеЗаполнено(обАдрес.Долгота) И ЗначениеЗаполнено(обАдрес.Широта) Тогда
					МассивСтрук = Новый Массив;
					
					Струк = Новый Структура;
					
					Струк.Вставить("НомерЗаказа", Число(Рез.НомерЗаказа));
					Струк.Вставить("Широта", обАдрес.Широта);
					Струк.Вставить("Долгота", обАдрес.Долгота);
					МассивСтрук.Добавить(Струк);
					
					//+Широков 24.12.2020 по письму
					//ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук);
					ПолигональнаяМаршрутизацияСервер.ПолучитьПолигоныЗаказов(МассивСтрук, Неопределено, "Справочник.новаТочкиДоставки.ФормаЭлементаУпр.ВыполнитьПодстановкуАдреса(137, 6)");
					//-Широков 24.12.2020 по письму
					
					//Асеев 14.10.2022 (Задача № 4913)>>>
					МассивЗаказовЗон = Новый Массив;
					МассивЗаказовЗон.Добавить(Заказ);
					ТарификацияУслугСервер.УстановитьЗонуЗаказов(МассивЗаказовЗон);
					//Асеев 14.10.2022 (Задача № 4913)<<<
					
					//++Задача № 3303
					ЗаказКОбработкеПоСменам = Новый Массив;
					ЗаказКОбработкеПоСменам.Добавить(Заказ);
					МаршрутизацияЗаказовСервер.УстановкаСменыДляЗаказов(ЗаказКОбработкеПоСменам);
					//--Задача № 3303
				КонецеСли;
			КонецеСли;
			//mel установка полигонального адреса 07.02.2018
			
			
			// рассчитаем расстояние
			Если ЗначениеЗаполнено(Рез.ТочкаОтправления.Адрес) И ЗначениеЗаполнено(Объект.Адрес) Тогда					
				РасстояниеПоДорогам = РаботаСГеокодированием.ПолучитьРасстояниеПоДорогам_GoogleAPI(Рез.ТочкаОтправления.Адрес.Широта, Рез.ТочкаОтправления.Адрес.Долгота, Объект.Адрес.Широта, Объект.Адрес.Долгота);
			КонецЕсли;
			
			// сделаем запись в РС ДопПараметры
			Если ЗначениеЗаполнено(РасстояниеПоДорогам) Тогда
				Набор = РегистрыСведений.ДополнительныеПараметрыЗаказа.СоздатьНаборЗаписей();
				Набор.Отбор.Заказ.Установить(Рез.Заказ);
				Набор.Прочитать();
				Если Набор.Количество() Тогда			
					Для каждого Стр Из Набор Цикл					
						Стр.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;	
					КонецЦикла;		
				Иначе
					НЗапись = Набор.Добавить();
					НЗапись.РасстояниеОтБазыПоДорогам = РасстояниеПоДорогам;
				КонецЕсли;	
				
				Попытка
					Набор.Записать();	
				Исключение				
				КонецПопытки;					
			КонецЕсли;		
			
		КонецЦикла;	
	КонецеСли;
	// <<--- Михушкин 			
	


КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Закрыть(Объект.Ссылка);
	//ОповеститьОВыборе(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если не новаУправлениеПользователями.ПользовательИмеетПравоРаботатьСКСЛ() Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	Если Объект.ГрафикРаботы.Количество() = 0 Тогда
		Для ъ = 1 По 5 Цикл
			стрГрафикРаботы = Объект.ГрафикРаботы.Добавить();
			стрГрафикРаботы.ВремяНачала = '00010101080000';
			стрГрафикРаботы.ВремяОкончания = '00010101200000';
			стрГрафикРаботы.ВремяПребывания = '00010101003000';
		КонецЦикла;
	
		Для ъ = 1 По 2 Цикл
			стрГрафикРаботы = Объект.ГрафикРаботы.Добавить();
			стрГрафикРаботы.Выходной = Истина;
		КонецЦикла;
	КонецЕсли;
	
	РайоныАдресов.Отбор.Элементы.Очистить();
	ЭлементОтбораСчета = РайоныАдресов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораСчета.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Адрес"); 
	ЭлементОтбораСчета.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораСчета.Использование = Истина; 
	ЭлементОтбораСчета.ПравоеЗначение = Объект.Адрес;
	

КонецПроцедуры

&НаКлиенте
Процедура РайоныАдресовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры




