#Область ПрограммныйИнтерфейс

Функция ОтправитьРассылку(Рассылка, ПериодРассылки = Неопределено, ТолькоВернутьТаблицуРассылки = Ложь, ОператорРассылки = 1) Экспорт
	
	Если НЕ Рассылка.ПрофильАктивен Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ПериодРассылки = Неопределено Тогда
		
		ПериодРассылки = Новый СтандартныйПериод;
		
		ВчерашнийДень = НачалоДня(ТекущаяДата()) - 1;

		Если Рассылка.ИнтервалПериода = 0 Тогда
			
			ПериодРассылки.ДатаНачала  = НачалоДня(ВчерашнийДень - (3 * 24*60*60));
			ПериодРассылки.ДатаОкончания = КонецДня(ВчерашнийДень);
			
		Иначе
			
			ПериодРассылки.ДатаНачала  = НачалоДня(ВчерашнийДень - (Рассылка.ИнтервалПериода * 24*60*60));
			ПериодРассылки.ДатаОкончания = КонецДня(ВчерашнийДень);
		
		КонецЕсли;
		
	КонецЕсли;	
	
	ТаблицаЗаказов = ПолучитьСписокЗаказов(Рассылка, ПериодРассылки); 
	
	Если ТаблицаЗаказов = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Параметры отбора заказов заданы не корректно");
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ТолькоВернутьТаблицуРассылки Тогда
		
		Возврат ТаблицаЗаказов;
		
	КонецЕсли;
	
	ЕстьНеОтправленные = Ложь;	
	ТекстНеОтправленные = "По некоторым заказам отсутствует e-mail, рассылка по ним не выполнена: ";
	ЕстьРанееОтправленные = Ложь;
	ТекстРанееОтправленные = "По некоторым заказам рассылка была осуществлена ранее, повторные сообщения по ним не отправлены: ";

	Возврат ОтправитьПисьмаНаСервере(ТаблицаЗаказов, Рассылка, ЕстьНеОтправленные, ТекстНеОтправленные, ЕстьРанееОтправленные, ТекстРанееОтправленные, ОператорРассылки);			

КонецФункции		

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьПулАдресовОтправки(ВозможноеКоличествоОтправки = 0)
	
	// -- Определение адрессов рассылки, здесь их можно добавлять/изменять.
	ПулАдресовОтправки = Новый Массив;
	ПулАдресовОтправки.Добавить(Новый Структура("Адрес, Пароль, Пул", "mind@strizh-logistic.ru", "pzW5z6Vu", 250));
	ПулАдресовОтправки.Добавить(Новый Структура("Адрес, Пароль, Пул", "quality.cheking@strizh-logistic.ru", "adYyd25A", 450));
	ПулАдресовОтправки.Добавить(Новый Структура("Адрес, Пароль, Пул", "say@strizh-logistic.ru", "adYyd25A", 450));
	ПулАдресовОтправки.Добавить(Новый Структура("Адрес, Пароль, Пул", "voice@strizh-logistic.ru", "adYyd25A", 450));
	ПулАдресовОтправки.Добавить(Новый Структура("Адрес, Пароль, Пул", "view@strizh-logistic.ru", "adYyd25A", 450));
	ПулАдресовОтправки.Добавить(Новый Структура("Адрес, Пароль, Пул", "quality@strizh-logistic.ru", "adYyd25A", 450));
	ПулАдресовОтправки.Добавить(Новый Структура("Адрес, Пароль, Пул", "check@strizh-logistic.ru", "adYyd25A", 450));
	// Определение адрессов рассылки, здесь их можно добавлять/изменять.  -- 

	ТаблицаПуловОтправки = Новый ТаблицаЗначений;
	ТаблицаПуловОтправки.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	ТаблицаПуловОтправки.Колонки.Добавить("Пароль", Новый ОписаниеТипов("Строка"));
	ТаблицаПуловОтправки.Колонки.Добавить("Начало", Новый ОписаниеТипов("Число"));
	ТаблицаПуловОтправки.Колонки.Добавить("Конец", Новый ОписаниеТипов("Число"));
	
	// Распределение пула адресов по рассылкам
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтправкаРассылки.ИсходящийАдрес КАК Адрес,
		|	СУММА(ОтправкаРассылки.Количество) КАК Количество
		|ИЗ
		|	РегистрСведений.ОтправкаРассылки КАК ОтправкаРассылки
		|ГДЕ
		|	ОтправкаРассылки.ДатаРассылки МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаРассылки, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаРассылки, ДЕНЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтправкаРассылки.ИсходящийАдрес";
	
	Запрос.УстановитьПараметр("ДатаРассылки", ТекущаяДата());	
	ОтправленоПисемПоАдресам = Запрос.Выполнить().Выгрузить();
	// Распределение пула адресов по рассылкам
	
	НачалоПула = 1;
	УжеОтправлено = 0;

	Для Сч=0 По ПулАдресовОтправки.ВГраница() Цикл
		
		ПулАдресов = ПулАдресовОтправки[Сч];
		
		// Распределение пула адресов по рассылкам
		ОтправленоПоАдресу = ОтправленоПисемПоАдресам.Найти(ПулАдресов.Адрес, "Адрес");
		
		Если НЕ ОтправленоПоАдресу = Неопределено Тогда
			УжеОтправлено = ОтправленоПоАдресу.Количество;
		Иначе
			УжеОтправлено = 0;
		КонецЕсли;	
		
		Если УжеОтправлено > 0 И УжеОтправлено >= ПулАдресов.Пул Тогда
			
			Продолжить;
			
		Иначе
			ПулАдресов.Пул = ПулАдресов.Пул - УжеОтправлено;			
		КонецЕсли;	
		// Распределение пула адресов по рассылкам
		
		ОписательПула = ТаблицаПуловОтправки.Добавить();
		ЗаполнитьЗначенияСвойств(ОписательПула, ПулАдресов);
		ОписательПула.Начало = НачалоПула;
		ОписательПула.Конец =  НачалоПула + ПулАдресов.Пул;
		
		ВозможноеКоличествоОтправки = ОписательПула.Конец;
		
		НачалоПула = ОписательПула.Конец + 1;	

	КонецЦикла;
		
	Возврат ТаблицаПуловОтправки;
	
КонецФункции

Функция ОтправитьПисьмаНаСервере(ТаблицаЗаказов, Рассылка, ЕстьНеОтправленные, ТекстНеОтправленные, ЕстьРанееОтправленные, ТекстРанееОтправленные, ОператорРассылки = 1)
		
		
	МассивЗаказов = ТаблицаЗаказов.ВыгрузитьКолонку("Реализация");	
	//МассивЗаказов = Результат.ВыгрузитьКолонку("Реализация");
		
	// Задача № 2314
	ВозможноеКоличествоОтправки = 0;
	ПулАдресовОтправки = ОпределитьПулАдресовОтправки(ВозможноеКоличествоОтправки);			
	// Задача № 2314

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ИсторияРассылки.Отправлено КАК Отправлено,
	                      |	ИсторияРассылки.Заказ КАК Заказ
	                      |ИЗ
	                      |	РегистрСведений.ИсторияРассылки КАК ИсторияРассылки
	                      |ГДЕ
	                      |	ЕСТЬNULL(ИсторияРассылки.Отправлено, ЛОЖЬ) = ИСТИНА
	                      |	И ИсторияРассылки.Заказ В(&МассивЗаказов)
	                      |	И НЕ ИсторияРассылки.ТестРассылки");	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	ОтправленныеТЗ = Запрос.Выполнить().Выгрузить();		
	
	// Распределение пула адресов по рассылкам
	ИспользованныйПулАдресОтправки = Новый ТаблицаЗначений;
	ИспользованныйПулАдресОтправки.Колонки.Добавить("ИсходящийАдрес", Новый ОписаниеТипов("Строка"));
	ИспользованныйПулАдресОтправки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	// Распределение пула адресов по рассылкам
	
	//отправка писем
	СчПулаОтправки = 0; // Задача № 2314
	Для каждого Стр Из ТаблицаЗаказов Цикл
		
		//Если Стр.КОбработке Тогда
						
			Если ЗначениеЗаполнено(Стр.EmailКлиента) Тогда
				
				Най = ОтправленныеТЗ.НайтиСтроки(Новый Структура("Заказ", Стр.Реализация));
				Если Най.Количество() Тогда
					ЕстьРанееОтправленные = Истина;
					ТекстРанееОтправленные = ТекстРанееОтправленные + Символы.ПС + "Заказ №" + СокрЛП(Стр.Реализация.Номер);	
				Иначе
					
					// Задача № 2314 отправка писем пулом по разным отправителям
					#Область ОпределениеАдресаОтправки
					СчПулаОтправки = СчПулаОтправки + 1;
					
					АдресОтправки = "";
					ПарольОтправки = "";
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВЫРАЗИТЬ(ТаблицаАдресов.Адрес КАК СТРОКА) КАК Адрес,
					|	ВЫРАЗИТЬ(ТаблицаАдресов.Пароль КАК СТРОКА) КАК Пароль,
					|	ВЫРАЗИТЬ(ТаблицаАдресов.Начало КАК ЧИСЛО) КАК Начало,
					|	ВЫРАЗИТЬ(ТаблицаАдресов.Конец КАК ЧИСЛО) КАК Конец
					|ПОМЕСТИТЬ Адреса
					|ИЗ
					|	&ТаблицаАдресов КАК ТаблицаАдресов
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Адреса.Адрес КАК Адрес,
					|	Адреса.Пароль КАК Пароль,
					|	Адреса.Начало КАК Начало,
					|	Адреса.Конец КАК Конец
					|ИЗ
					|	Адреса КАК Адреса
					|ГДЕ
					|	&СчПисьма >= Адреса.Начало 
					|	И &СчПисьма <=Адреса.Конец";
					
					Запрос.УстановитьПараметр("ТаблицаАдресов", ПулАдресовОтправки);
					Запрос.УстановитьПараметр("СчПисьма", СчПулаОтправки);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						АдресОтправки  = СокрЛП(ВыборкаДетальныеЗаписи.Адрес);
						ПарольОтправки = СокрЛП(ВыборкаДетальныеЗаписи.Пароль);
					Иначе
						ТекстНеОтправленные = ТекстНеОтправленные + Символы.ПС + "Заказ " + СокрЛП(Стр.Реализация.Номер) + ", от " + Строка(Стр.ИнтернетМагазин) + ". Письмо за пределами пула отправки (" + СокрЛП(СчПулаОтправки) + ", ограничение " + СокрЛП(ВозможноеКоличествоОтправки) + ")";
						ЕстьНеОтправленные = Истина;
						Продолжить;
					КонецЕсли;
					#КонецОбласти
					// Задача № 2314 отправка писем пулом по разным отправителям					
					
					ТекстСообщения = Рассылка.ТекстСообщения;
					
				    ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номерзаказа]", "[НомерЗаказа]");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[номерзаказа]", "[НомерЗаказа]");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номер заказа]", "[НомерЗаказа]");			
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[партнер]", "[Партнер]");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[партнёр]", "[Партнер]");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Партнёр]", "[Партнер]");
					
					МасП = Новый Массив;	
					
					Если Рассылка.ТолькоТест Тогда
						
						МасП.Добавить("i.belov@strizh-logistic.ru");
						МасП.Добавить("r.drobnitsa@strizh-logistic.ru");
						МасП.Добавить("g.polyakov@strizh-logistic.ru");
						
						ТекстСообщения = ТекстСообщения + Символы.ПС + "Оригинальный получатель " + СокрЛП(Стр.EmailКлиента);
						
					Иначе
						
						МасП.Добавить(СокрЛП(Стр.EmailКлиента));
						
					КонецЕсли;
				
					ТекстС = СтрЗаменить(ТекстСообщения, "[НомерЗаказа]", СокрЛП(Стр.Реализация.Номер));					
					ТекстС = СтрЗаменить(ТекстС, "[Партнер]", Строка(Стр.ИнтернетМагазин));		
					
					//добавим подпись
					ТекстС = ТекстС + Символы.ПС + Символы.ПС + Рассылка.ТекстПодписи;
					
					
					ОтправкаАдресомИзПула = Новый Структура("Адрес, Пароль", АдресОтправки, ПарольОтправки);

					//Геннадий #Переписка 14.01.2021 ->
					Если ОператорРассылки = 2 Тогда 
						Рез = ОтправитьСообщение(МасП, Рассылка.ТемаСообщения, ТекстС,,,,,,,,, ОтправкаАдресомИзПула);	
					ИначеЕсли ОператорРассылки = 1 Тогда
  						ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
						ТекстОшибки = "";
						ТекстС 	= СтрЗаменить(ТекстС, Символы.ПС, "<br>");
						ТемаС 	= Рассылка.ТемаСообщения;
						Рез 	= ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, ТемаС, ТекстС,, "Логистическая компания ""Стриж""",,,,ТекстОшибки);
					КонецЕсли;	
					//Геннадий 14.01.2021 <-
					
					// ДЛЯ ТЕСТИРОВАНИЯ
					// Рез = Новый Структура("Ответ, ОписаниеОшибки", Истина, "");// УБРАТЬ ПОСЛЕ ТЕСТИРОВАНИЯ
					// ДЛЯ ТЕСТИРОВАНИЯ
					
					// Логирование
					НаборЗ = РегистрыСведений.ИсторияРассылки.СоздатьНаборЗаписей();
					НаборЗ.Отбор.Заказ.Установить(Стр.Реализация);
					НЗапись = НаборЗ.Добавить();
					НЗапись.Текст = ТекстС;
					НЗапись.Заказ = Стр.Реализация;
					НЗапись.ТемаСообщения = Рассылка.ТемаСообщения;
					НЗапись.Партнер = Стр.Партнер;
					НЗапись.Почта = СокрЛП(Стр.EmailКлиента);
					НЗапись.ПериодОтправки = ТекущаяДата();
					
					НЗапись.ТестРассылки = Рассылка.ТолькоТест; // Обработка тестовых рассылок
					
					//Геннадий 15.01.2021 -> 
					Если ОператорРассылки = 2 Тогда
						
						Если Рез.Ответ Тогда
							НЗапись.Отправлено = Истина;	
							// Распределение пула адресов по рассылкам
							СтрокаИспользованногоПула = ИспользованныйПулАдресОтправки.Добавить();
							СтрокаИспользованногоПула.ИсходящийАдрес = ОтправкаАдресомИзПула.Адрес;
							СтрокаИспользованногоПула.Количество = 1;
							// Распределение пула адресов по рассылкам
							
						Иначе
							НЗапись.Отправлено = Ложь;
							НЗапись.ОписаниеОшибки = Рез.ОписаниеОшибки;			
						КонецЕсли;			
						
					ИначеЕсли ОператорРассылки = 1 Тогда 
						
						НЗапись.Отправлено 		= Рез;			
						НЗапись.ОписаниеОшибки 	= ТекстОшибки;			
						
					КонецЕсли;
					//Геннадий 15.01.2021 <- 
					
					НаборЗ.Записать();
				КонецЕсли;	
			Иначе
				
				ТекстНеОтправленные = ТекстНеОтправленные + Символы.ПС + "Заказ " + СокрЛП(Стр.Реализация.Номер) + ", от " + Строка(Стр.ИнтернетМагазин);
			    ЕстьНеОтправленные = Истина;
			КонецЕсли;
			
		//КонецЕсли;	
		
	КонецЦикла;		
	
	// Распределение пула адресов по рассылкам
	ИспользованныйПулАдресОтправки.Свернуть("ИсходящийАдрес", "Количество");
	ДатаРассылки = ТекущаяДата();
	Для Каждого СтрокаИспользованногоПула Из ИспользованныйПулАдресОтправки Цикл
		НаборЗаписей = РегистрыСведений.ОтправкаРассылки.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.ИсходящийАдрес.Установить(СтрокаИспользованногоПула.ИсходящийАдрес); 
		НаборЗаписей.Отбор.ДатаРассылки.Установить(ДатаРассылки); 
		
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.ИсходящийАдрес = СтрокаИспользованногоПула.ИсходящийАдрес; 
		НоваяЗапись.ДатаРассылки = ДатаРассылки; 
		НоваяЗапись.Количество = СтрокаИспользованногоПула.Количество; 
		
		НаборЗаписей.Записать();  
	КонецЦикла;
	// Распределение пула адресов по рассылкам
	
	Возврат Новый Структура("ТаблицаЗаказов, ЕстьНеОтправленные, ТекстНеОтправленные, ЕстьРанееОтправленные, ТекстРанееОтправленные", ТаблицаЗаказов, ЕстьНеОтправленные, ТекстНеОтправленные, ЕстьРанееОтправленные, ТекстРанееОтправленные);
	
КонецФункции // ()

Функция ОпределитьОтправителя(ОтправкаПулаПисем)
	
КонецФункции	

Функция ОтправитьСообщение(СписокПолучателей = Неопределено, ТемаС = Неопределено, Знач ТекстС = Неопределено, ФайлС = Неопределено, ИмяОтправителя = "Логистическая компания ""Стриж""", ОбратныйАдрес = "mind@strizh-logistic.ru", ТипТекста = Неопределено, Сообщение = Неопределено, Ошибка = "", ТипРассылки = Неопределено, ДополнитьАдреса = Истина, ОтправкаАдресомИзПула = Неопределено) Экспорт
	
	П = Новый ИнтернетПочтовыйПрофиль;
	П.АдресСервераSMTP = "smtp.yandex.ru";
	П.ПортSMTP = 465;
	
	Если ОтправкаАдресомИзПула = Неопределено Тогда
		
		П.ПользовательSMTP = "mind@strizh-logistic.ru";
		П.ПарольSMTP = "pzW5z6Vu";
		
	Иначе
		//"Адрес, Пароль"
		
		П.ПользовательSMTP = ОтправкаАдресомИзПула.Адрес;
		П.ПарольSMTP = ОтправкаАдресомИзПула.Пароль;
 
		ОбратныйАдрес = ОтправкаАдресомИзПула.Адрес;
		
	КонецЕсли;
	
	П.ИспользоватьSSLSMTP= Истина;
	П.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	Поч= Новый ИнтернетПочта;
	Поч.Подключиться(п);
	
	
	РезСтрукт = Новый Структура;
	РезСтрукт.Вставить("Ответ");
	РезСтрукт.Вставить("ОписаниеОшибки");

		
	Если Сообщение = "" Или Сообщение = Неопределено Тогда
		
		Сооб = Новый ИнтернетПочтовоеСообщение;
		Сооб.ИмяОтправителя = ИмяОтправителя;
		
		Сооб.ИмяОтправителя = ИмяОтправителя;
		Сооб.Отправитель = ОбратныйАдрес;
			
		
		Сооб.Тема = ТемаС;

		если ТипТекста = Неопределено Тогда
			Сооб.Тексты.Добавить(ТекстС);
		Иначе
			Сооб.Тексты.Добавить(ТекстС, ТипТекста);
		КонецеСли;
		
		Если ФайлС <> Неопределено Тогда
			Если ТипЗнч(ФайлС) = Тип("Строка") Тогда
				Сооб.Вложения.Добавить(ФайлС);
			ИначеЕсли ТипЗнч(ФайлС) = Тип("Массив") Тогда	
				Для Каждого Тек Из ФайлС Цикл
					Сооб.Вложения.Добавить(Тек);
				КонецЦикла;	
			КонецеСли;	
		КонецеСли;	
				
		Для Каждого Тек Из СписокПолучателей Цикл
			Сооб.Получатели.Добавить(СокрЛП(Тек));
		КонецЦикла;			
		Сообщение = Сооб;	
	Иначе		
		Сооб = Сообщение;
	КонецеСли;
	
	попытка
		Поч.Послать(Сооб);
	Исключение
		Ошибка = ОписаниеОшибки();
		Поч.Отключиться();
		РезСтрукт.ОписаниеОшибки = Ошибка;
		РезСтрукт.Ответ = Ложь;
		Возврат РезСтрукт;
	КонецПопытки;		

	РезСтрукт.Ответ = Истина;
	Возврат РезСтрукт;
					
	
КонецФункции


Функция СкомпоноватьВТаблицуЗначений(СхемаКомпоновкиДанных, КомпоновщикНастроек) Экспорт

    //Запускаем компоновку
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	//Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);


	//Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ = ПроцессорВывода.Вывести(ПроцессорКомпоновки, истина);

	Возврат ТЗ;

КонецФункции

Функция ПолучитьСписокЗаказов(Рассылка, ПериодРассылки)

	
	//ОО = РеквизитФормыВЗначение("Объект");

	СКД = Справочники.ПрофилиРассылки.ПолучитьМакет("ЗаказыОтбор");

	ОтборЗаказов = Новый КомпоновщикНастроекКомпоновкиДанных;
	НастройкиОтбора = Рассылка.НастройкиОтбораРассылки.Получить();
	URLСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	ОтборЗаказов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСКД));
	ОтборЗаказов.ЗагрузитьНастройки(НастройкиОтбора);

	
	Для каждого Эл Из ОтборЗаказов.Настройки.ПараметрыДанных.Элементы Цикл						
		Если Строка(Эл.Параметр) = "Дата1" Тогда		
			Эл.Значение = НачалоДня(ПериодРассылки.ДатаНачала);		
		КонецЕсли;
		Если Строка(Эл.Параметр) = "Дата2" Тогда		
			Эл.Значение = КонецДня(ПериодРассылки.ДатаОкончания);		
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из ОтборЗаказов.Настройки.Отбор.Элементы Цикл
		Попытка		
			Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Партнер" Тогда
				Если Не ЭлементОтбора.Использование Тогда
					Возврат Неопределено;
				Конецесли;
				Если Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
					Возврат Неопределено;
				Конецесли;
			Конецесли;	
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	УстановитьСтруктуруНастроекДляВыводаВТаблицуСКолонкойСсылка(ОтборЗаказов.Настройки); 		
	
	МассивЗаказов = СкомпоноватьВТаблицуЗначений(СКД, ОтборЗаказов).ВыгрузитьКолонку("Ссылка");
		
	Возврат ЗаполнитьСписокЗаказов(Рассылка, ПериодРассылки, МассивЗаказов);	
	
КонецФункции

Функция УстановитьСтруктуруНастроекДляВыводаВТаблицуСКолонкойСсылка(Настройки)  Экспорт

	Настройки.Структура.Очистить();
	ТекГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ТекГруппировка.Использование = Истина;
	ТекПолеГруппировки = ТекГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ТекПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ТекПолеГруппировки.Использование = истина;
	АвтоВыбор = ТекГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоВыбор.Использование = Истина;

КонецФункции

Функция  ЗаполнитьСписокЗаказов(Рассылка, ПериодРассылки, МассивЗаказов = Неопределено)

	
	Если МассивЗаказов = Неопределено Тогда	
		МассивЗаказов = Новый Массив;
		ИспользоватьОтбор = Ложь;
	Иначе
		ИспользоватьОтбор = Истина;
	КонецЕсли;
	
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗакрытыеЗаказы.Реализация КАК Реализация,
	                      |	ЗакрытыеЗаказы.Партнер КАК Партнер,
	                      |	ЗакрытыеЗаказы.Водитель КАК Водитель,
	                      |	ЗакрытыеЗаказы.Экспедитор КАК Экспедитор,
	                      |	ЗакрытыеЗаказы.Клиент КАК Клиент,
	                      |	ЗакрытыеЗаказы.КатегорияДоставки КАК КатегорияДоставки,
	                      |	ВЫБОР
	                      |		КОГДА ЗакрытыеЗаказы.ИнтернетМагазин.Код = ""Shop_601 "" ИЛИ ЗакрытыеЗаказы.ИнтернетМагазин.Код = ""Shop_752 ""
	                      |			ТОГДА ДополнительныеПараметрыЗаказа.Заказ.ИнтернетМагазинЯндекса
	                      |		ИНАЧЕ ЗакрытыеЗаказы.ИнтернетМагазин
	                      |	КОНЕЦ КАК ИнтернетМагазин,
	                      |	ЗакрытыеЗаказы.Период КАК Период,
	                      |	ЗакрытыеЗаказы.ТерминалДоставки КАК ТерминалДоставки,
	                      |	ЗакрытыеЗаказы.Транспорт КАК Транспорт,
	                      |	новаМестнаяДоставка.ИнтервалДоставкиСтрокой КАК ИнтервалДоставкиСтрокой,
	                      |	ДополнительныеПараметрыЗаказа.EmailКлиента КАК EmailКлиента,
	                      |	ДанныеЗаказаВодителя.Дата КАК ВремяВыполненияЗаказа,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РейсЗаказы.Ссылка) КАК КоличествоПоездок
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрНакопления.ЗакрытыеЗаказы КАК ЗакрытыеЗаказы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.новаМестнаяДоставка КАК новаМестнаяДоставка
	                      |		ПО ЗакрытыеЗаказы.Доставка = новаМестнаяДоставка.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыЗаказа КАК ДополнительныеПараметрыЗаказа
	                      |		ПО ЗакрытыеЗаказы.Реализация = ДополнительныеПараметрыЗаказа.Заказ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	                      |		ПО ЗакрытыеЗаказы.Реализация = ДанныеЗаказаВодителя.Реализация
	                      |			И (ДанныеЗаказаВодителя.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ЗакрытыеЗаказы.Период, ДЕНЬ) И КОНЕЦПЕРИОДА(ЗакрытыеЗаказы.Период, ДЕНЬ))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	                      |		ПО ЗакрытыеЗаказы.Реализация = РейсЗаказы.Заказ
	                      |			И (НЕ РейсЗаказы.УдаленИзРейса)
	                      |			И (НЕ РейсЗаказы.Ссылка.ПометкаУдаления)
	                      |ГДЕ
	                      |	ЗакрытыеЗаказы.Корректировка = ЛОЖЬ
	                      |	И ЗакрытыеЗаказы.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	                      |	И ЗакрытыеЗаказы.Период МЕЖДУ &Дата1 И &Дата2
	                      |	И ВЫБОР
	                      |			КОГДА &ВИнтервал
	                      |				ТОГДА ЧАС(ДанныеЗаказаВодителя.Дата) >= ЧАС(новаМестнаяДоставка.ВремяПрибытияС)
	                      |						И ЧАС(ДанныеЗаказаВодителя.Дата) <= ЧАС(новаМестнаяДоставка.ВремяПрибытияПо)
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ДанныеЗаказаВодителя.Дата,
	                      |	ЗакрытыеЗаказы.Водитель,
	                      |	ЗакрытыеЗаказы.КатегорияДоставки,
	                      |	ЗакрытыеЗаказы.Период,
	                      |	ЗакрытыеЗаказы.Экспедитор,
	                      |	ЗакрытыеЗаказы.Реализация,
	                      |	ЗакрытыеЗаказы.Клиент,
	                      |	ЗакрытыеЗаказы.ТерминалДоставки,
	                      |	ДополнительныеПараметрыЗаказа.EmailКлиента,
	                      |	новаМестнаяДоставка.ИнтервалДоставкиСтрокой,
	                      |	ЗакрытыеЗаказы.Транспорт,
	                      |	ЗакрытыеЗаказы.Партнер,
	                      |	ВЫБОР
	                      |		КОГДА ЗакрытыеЗаказы.ИнтернетМагазин.Код = ""Shop_601 "" ИЛИ ЗакрытыеЗаказы.ИнтернетМагазин.Код = ""Shop_752 ""
	                      |			ТОГДА ДополнительныеПараметрыЗаказа.Заказ.ИнтернетМагазинЯндекса
	                      |		ИНАЧЕ ЗакрытыеЗаказы.ИнтернетМагазин
	                      |	КОНЕЦ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Реализация КАК Реализация,
	                      |	ВТ.Партнер КАК Партнер,
	                      |	ВТ.Водитель КАК Водитель,
	                      |	ВТ.Экспедитор КАК Экспедитор,
	                      |	ВТ.Клиент КАК Клиент,
	                      |	ВТ.КатегорияДоставки КАК КатегорияДоставки,
	                      |	ВТ.ИнтернетМагазин КАК ИнтернетМагазин,
	                      |	ВТ.Период КАК Период,
	                      |	ВТ.ТерминалДоставки КАК ТерминалДоставки,
	                      |	ВТ.Транспорт КАК Транспорт,
	                      |	ВТ.ИнтервалДоставкиСтрокой КАК ИнтервалДоставкиСтрокой,
	                      |	ВТ.EmailКлиента КАК EmailКлиента,
	                      |	ВТ.ВремяВыполненияЗаказа КАК ВремяВыполненияЗаказа,
	                      |	ВТ.КоличествоПоездок КАК КоличествоПоездок,
	                      |	ЕСТЬNULL(ИсторияРассылки.Отправлено, ЛОЖЬ) КАК БылаОтправкаПоЗаказу
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРассылки КАК ИсторияРассылки
	                      |		ПО ВТ.Реализация = ИсторияРассылки.Заказ
	                      |ГДЕ
	                      |	ВЫБОР
	                      |			КОГДА &ИспользоватьОтбор
	                      |				ТОГДА ВТ.Реализация В (&МассивЗаказов)
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ
	                      |	И ВЫБОР
	                      |			КОГДА &СПервогоРаза
	                      |				ТОГДА ВТ.КоличествоПоездок < 2
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ");
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ПериодРассылки.ДатаНачала));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ПериодРассылки.ДатаОкончания));
	
	Запрос.УстановитьПараметр("ВИнтервал", Рассылка.ДоставленВИнтервал);
	Запрос.УстановитьПараметр("СПервогоРаза", Рассылка.ДоставленСПервогоРаза);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ИспользоватьОтбор", ИспользоватьОтбор);
		
	РезТЗ = Запрос.Выполнить().Выгрузить();	
		
	// ++Обработка исключений по адресам
	МасПочтыКИсключению = Новый Массив;
	СохраненныйСписокИсключений = ХранилищеОбщихНастроек.Загрузить(
	"НастройкиИсключенийАдресовПочтовыхРассылок", 
	"НастройкиПочтовыхРассылок", 
	"Настройки исключений адресов почтовых рассылок",
	"Стриж");
	
	Если Не СохраненныйСписокИсключений = Неопределено Тогда
		
		Для каждого Ст Из РезТЗ Цикл		
			Если Не СохраненныйСписокИсключений.Найти(Ст.EmailКлиента) = Неопределено Тогда	
				МасПочтыКИсключению.Добавить(Ст);			
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
		
	Для каждого ЗнаМ Из МасПочтыКИсключению Цикл	
		РезТЗ.Удалить(ЗнаМ);	
	КонецЦикла;	
	// --Обработка исключений по адресам
	
	
	// ++Обработка исключений по доменам почты
	МасПочтыКИсключению = Новый Массив;
	СохраненныйСписокИсключений = ХранилищеОбщихНастроек.Загрузить(
	"НастройкиДоступныхДоменовПочтовыхРассылок", 
	"НастройкиПочтовыхРассылок", 
	"Настройки доступных доменов почтовых рассылок",
	"Стриж");
	
	Если Не СохраненныйСписокИсключений = Неопределено Тогда
		
		Для каждого Ст Из РезТЗ Цикл
			
			EmailКлиента = СтрРазделить(Ст.EmailКлиента, "@");
			Попытка
				
				Если СохраненныйСписокИсключений.Найти("@" + EmailКлиента[1]) = Неопределено Тогда
					
					МасПочтыКИсключению.Добавить(Ст);

				КонецЕсли;	
				
			Исключение
				
				 МасПочтыКИсключению.Добавить(Ст);
				 
			Конецпопытки;	
			
		КонецЦикла;
		
	КонецЕсли;
		
	Для каждого ЗнаМ Из МасПочтыКИсключению Цикл	
		РезТЗ.Удалить(ЗнаМ);	
	КонецЦикла;			
	// --Обработка исключений по доменам почты

	Возврат РезТЗ;
			
КонецФункции

#КонецОбласти
