// Используется при записи параметров задачи в файл.
//
Перем ЗаписьХМЛ Экспорт; // <ЗаписьXML>

// Используется при чтении параметров задачи из файла.
//
Перем ЧтениеХМЛ Экспорт; // <ЧтениеXML>

// Форма, для которой будет формироваться интерфейс
//
Перем Форма Экспорт; // <Форма>

// Панель, на которой программно создаются элементы интерфейса
//
Перем Панель Экспорт; // <Панель>

// Содержит файлы импорта для задачи
//
Перем ЗапросыНаИменаФайлов Экспорт; // <ТаблицаЗначений>

// Путь, по которому можно получить добавленный объект в контексте формы.
//
Перем ИмяИнтерфейса; // <Строка>


// Выполняет импорт данных
//
// Параметры:
//  ОбменДанными <СправочникСсылка.новаОбменыДанными>: Используется при автообмене
//
// Возвращаемое значение:
//  <Структура>: Импортированные данные
//
Функция ВыполнитьИмпорт(ОбменДанными = Неопределено) Экспорт
	стИмпортированныеДанные = Новый Структура("Таблицы", Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка КАК Задача
	|ИЗ
	|	Справочник.новаЗадачаИмпортаДанных
	|ГДЕ
	|	НЕ ПометкаУдаления И Владелец = &ПланИмпорта
	|УПОРЯДОЧИТЬ ПО Код ВОЗР";
	
	Запрос.УстановитьПараметр("ПланИмпорта", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		обЗадача = Выборка.Задача.ПолучитьОбъект();
		
		стрЗадача = ЗапросыНаИменаФайлов.Найти(Выборка.Задача, "Задача");
		Если ОбменДанными <> Неопределено Тогда
			//Получаем имя файла для импорта данных
			ИмяФайла = ОбменДанными.ПолучитьОбъект().ПолучитьИмяФайлаДляЗадачи(Выборка.Задача);
			обЗадача.ВыполнитьИмпорт(стИмпортированныеДанные, ИмяФайла);
		Иначе
			Если стрЗадача = Неопределено Тогда
				обЗадача.ВыполнитьИмпорт(стИмпортированныеДанные);
			Иначе
				обЗадача.ВыполнитьИмпорт(стИмпортированныеДанные, стрЗадача.ПолеВводаИмениФайла.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат стИмпортированныеДанные;
КонецФункции

Процедура СообщитьОбОшибкеИмпорта(Таблица, стрДанные, РегистраторСобытий = Неопределено)
	Сообщить("Импорт " + Таблица.СтруктураТаблицы.ПредставлениеТаблицы);
	
	Представление = "";
	Для Каждого Колонка Из Таблица.Данные.Колонки Цикл
		Если Колонка.Имя = "Ссылка" Тогда Продолжить; КонецЕсли;
		Представление = Представление + " " + СокрЛП(стрДанные[Колонка.Имя]);
	КонецЦикла;
	Сообщить(Представление);
	Сообщить(ОписаниеОшибки());
	
	новаОбмены.РегистрацияСобытия(РегистраторСобытий, СтатусСообщения.ОченьВажное, "Ошибка", "Импорт " + Таблица.СтруктураТаблицы.ПредставлениеТаблицы, Представление);					
КонецПроцедуры

// Сохраняет импортированные данные в базу данных
//
// Параметры:
//  стИмпортированныеДанные <Структура>
//  РегистраторСобытий      <ОбработкаОбъект.новаРегистраторСобытий>: Используется для логирования
//
Процедура СохранитьИмпортированныеДанные(стИмпортированныеДанные, РегистраторСобытий = Неопределено) Экспорт
	сзПорядокИмпортаТаблиц = Новый СписокЗначений;
	
	Для Каждого ЭлТаблица Из стИмпортированныеДанные.Таблицы Цикл
		Таблица = ЭлТаблица.Значение;
		
		//мсИмпортируемыеКолонки = Новый Массив;
		//Для Каждого Колонка Из Таблица.Данные Цикл
		//	Если Колонка.Имя = "Ссылка" Или Колонка.Имя = "ЭтоНовый" Тогда Продолжить; КонецЕсли;
		//	
		//	мсИмпортируемыеКолонки.Добавить(Колонка.Имя);
		//КонецЦикла;
		//Таблица.Вставить("ИмпортируемыеКолонки", мсИмпортируемыеКолонки);
		
		Если Таблица.СтруктураТаблицы.ВидТаблицы = "ТабличнаяЧасть" Тогда Продолжить; КонецЕсли;
		Таблица.Вставить("ТабличныеЧасти", Новый Структура);
	КонецЦикла;
	
	Для Каждого ЭлТаблица Из стИмпортированныеДанные.Таблицы Цикл
		Таблица = ЭлТаблица.Значение;
		Если сзПорядокИмпортаТаблиц.НайтиПоЗначению(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы) <> Неопределено Тогда Продолжить; КонецЕсли;
		
		Если Лев(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы, 3) <> "Спр" Тогда Продолжить; КонецЕсли;
		Если Таблица.СтруктураТаблицы.ВидТаблицы = "ТабличнаяЧасть" Тогда
			ИмяТЧ = СтрПолучитьСтроку(СтрЗаменить(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы, ".", Символы.ПС), 3);
			стИмпортированныеДанные.Таблицы[Таблица.СтруктураТаблицы.Объект].ТабличныеЧасти.Вставить(ИмяТЧ, Таблица);
			Продолжить;
		КонецЕсли;
		
		мдСправочник = Метаданные.НайтиПоПолномуИмени(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы);
		Для Каждого мдВладелец Из мдСправочник.Владельцы Цикл
			ИмяВладелеца = мдВладелец.ПолноеИмя();
			
			Если стИмпортированныеДанные.Таблицы[ИмяВладелеца] = Неопределено Тогда Продолжить; КонецЕсли;
			Если сзПорядокИмпортаТаблиц.НайтиПоЗначению(ИмяВладелеца) <> Неопределено Тогда Продолжить; КонецЕсли;
			
			сзПорядокИмпортаТаблиц.Добавить(ИмяВладелеца);
		КонецЦикла;
		
		сзПорядокИмпортаТаблиц.Добавить(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы);
	КонецЦикла;
	
	Для Каждого ЭлТаблица Из стИмпортированныеДанные.Таблицы Цикл
		Таблица = ЭлТаблица.Значение;
		
		Если Лев(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы, 3) = "Спр" Тогда Продолжить; КонецЕсли;
		Если Таблица.СтруктураТаблицы.ВидТаблицы = "ТабличнаяЧасть" Тогда
			ИмяТЧ = СтрПолучитьСтроку(СтрЗаменить(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы, ".", Символы.ПС), 3);
			стИмпортированныеДанные.Таблицы[Таблица.СтруктураТаблицы.Объект].ТабличныеЧасти.Вставить(ИмяТЧ, Таблица);
			Продолжить;
		КонецЕсли;
		
		сзПорядокИмпортаТаблиц.Добавить(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы);
	КонецЦикла;
	
	Для Каждого ЭлТаблица Из сзПорядокИмпортаТаблиц Цикл
		Таблица = стИмпортированныеДанные.Таблицы[ЭлТаблица.Значение];
		ПредставлениеТаблицы = Таблица.СтруктураТаблицы.ПредставлениеТаблицы;
		
		Если Лев(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы, 3) = "Спр" Тогда
			ъ = Таблица.Данные.Количество();
			Для Каждого стрДанные Из Таблица.Данные Цикл
#Если Клиент Тогда
				Состояние(ПредставлениеТаблицы + " " + Строка(ъ));
#КонецЕсли
				ъ = ъ - 1;
				
				Если стрДанные.НовыйОбъект Тогда
					обИмпорт = Таблица.СтруктураТаблицы.Менеджер.СоздатьЭлемент();
					обИмпорт.УстановитьСсылкуНового(стрДанные.Ссылка);
					ЗаполнитьЗначенияСвойств(обИмпорт, стрДанные,, "Ссылка");
				Иначе
					обИмпорт = стрДанные.Ссылка.ПолучитьОбъект();
					
					ИсклПоля = "Ссылка";
					Для Каждого Колонка Из Таблица.Данные.Колонки Цикл
						Если Прав(Колонка.Имя, 16) <> "_НеИмпортировать" Тогда Продолжить; КонецЕсли;
						Если стрДанные[Колонка.Имя] Тогда
							ИсклПоля = ИсклПоля + "," + Лев(Колонка.Имя, СтрДлина(Колонка.Имя) - 16);
						КонецЕсли;
					КонецЦикла;
					
					ЗаполнитьЗначенияСвойств(обИмпорт, стрДанные,, ИсклПоля);
				КонецЕсли;
				
				стОтборТЧ = Новый Структура("Ссылка", стрДанные.Ссылка);
				Для Каждого ЭлТЧ Из Таблица.ТабличныеЧасти Цикл
					ТЧ = обИмпорт[ЭлТЧ.Ключ];
					ТЧ.Очистить();
					СтрокиТЧ = ЭлТЧ.Значение.Данные.НайтиСтроки(стОтборТЧ);
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						ЗаполнитьЗначенияСвойств(ТЧ.Добавить(), СтрокаТЧ);
					КонецЦикла;
				КонецЦикла;
				
				Попытка
					Если Таблица.СтруктураТаблицы.Обработчики.Свойство("ПередЗаписью") Тогда
						Объект = обИмпорт;
						Выполнить(Таблица.СтруктураТаблицы.Обработчики.ПередЗаписью);
					КонецЕсли;
					
					//обИмпорт.ОбменДанными.Загрузка = Истина;
					обИмпорт.Записать();
					             
					новаОбмены.РегистрацияСобытия(РегистраторСобытий, СтатусСообщения.Информация, ?(стрДанные.НовыйОбъект,"Добавлен","Перезаписан"), "Импортирован: "+ПредставлениеТаблицы, обИмпорт);
					новаОбмены.УвеличитьКоличествоСправочников(РегистраторСобытий);
					
					стрДанные.НовыйОбъект = Ложь;
				Исключение
					СообщитьОбОшибкеИмпорта(Таблица, стрДанные, РегистраторСобытий);
				КонецПопытки;
			КонецЦикла;
			
		ИначеЕсли Лев(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы, 3) = "Док" Тогда
			ъ = Таблица.Данные.Количество();
			Для Каждого стрДанные Из Таблица.Данные Цикл
#Если Клиент Тогда
				Состояние(ПредставлениеТаблицы + " " + Строка(ъ));
#КонецЕсли
				ъ = ъ - 1;
				
				Если стрДанные.НовыйОбъект Тогда
					обИмпорт = Таблица.СтруктураТаблицы.Менеджер.СоздатьДокумент();
					обИмпорт.УстановитьСсылкуНового(стрДанные.Ссылка);
					ЗаполнитьЗначенияСвойств(обИмпорт, стрДанные,, "Ссылка");
				Иначе
					обИмпорт = стрДанные.Ссылка.ПолучитьОбъект();
					
					ИсклПоля = "Ссылка";
					Для Каждого Колонка Из Таблица.Данные.Колонки Цикл
						Если Прав(Колонка.Имя, 16) <> "_НеИмпортировать" Тогда Продолжить; КонецЕсли;
						Если стрДанные[Колонка.Имя] Тогда
							ИсклПоля = ИсклПоля + "," + Лев(Колонка.Имя, СтрДлина(Колонка.Имя) - 16);
						КонецЕсли;
					КонецЦикла;
					
					ЗаполнитьЗначенияСвойств(обИмпорт, стрДанные,, ИсклПоля);
				КонецЕсли;
				
				стОтборТЧ = Новый Структура("Ссылка", стрДанные.Ссылка);
				Для Каждого ЭлТЧ Из Таблица.ТабличныеЧасти Цикл
					ТЧ = обИмпорт[ЭлТЧ.Ключ];
					ТЧ.Очистить();
					СтрокиТЧ = ЭлТЧ.Значение.Данные.НайтиСтроки(стОтборТЧ);
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						ЗаполнитьЗначенияСвойств(ТЧ.Добавить(), СтрокаТЧ);
					КонецЦикла;
				КонецЦикла;
				
				Попытка
					Если Таблица.СтруктураТаблицы.Обработчики.Свойство("ПередЗаписью") Тогда
						Объект = обИмпорт;
						Выполнить(Таблица.СтруктураТаблицы.Обработчики.ПередЗаписью);
					КонецЕсли;
					
					обИмпорт.Записать(РежимЗаписиДокумента.Проведение);
					
					новаОбмены.РегистрацияСобытия(РегистраторСобытий, СтатусСообщения.Информация, ?(стрДанные.НовыйОбъект,"Добавлен","Перезаписан"), "Импортирован: "+ПредставлениеТаблицы, обИмпорт, обИмпорт.ИдентификаторДляОбмена);
					новаОбмены.УвеличитьКоличествоДокументов(РегистраторСобытий);
					
					стрДанные.НовыйОбъект = Ложь;
				Исключение
					СообщитьОбОшибкеИмпорта(Таблица, стрДанные, РегистраторСобытий);
				КонецПопытки;
			КонецЦикла;
			
		ИначеЕсли Лев(Таблица.СтруктураТаблицы.ПолноеИмяТаблицы, 3) = "Биз" Тогда
			ъ = Таблица.Данные.Количество();
			Для Каждого стрДанные Из Таблица.Данные Цикл
#Если Клиент Тогда
				Состояние(ПредставлениеТаблицы + " " + Строка(ъ));
#КонецЕсли
				ъ = ъ - 1;
				
				Если стрДанные.НовыйОбъект Тогда
					обИмпорт = Таблица.СтруктураТаблицы.Менеджер.СоздатьБизнесПроцесс();
					обИмпорт.УстановитьСсылкуНового(стрДанные.Ссылка);
					ЗаполнитьЗначенияСвойств(обИмпорт, стрДанные,, "Ссылка");
				Иначе
					обИмпорт = стрДанные.Ссылка.ПолучитьОбъект();
					
					ИсклПоля = "Ссылка";
					Для Каждого Колонка Из Таблица.Данные.Колонки Цикл
						Если Прав(Колонка.Имя, 16) <> "_НеИмпортировать" Тогда Продолжить; КонецЕсли;
						Если стрДанные[Колонка.Имя] Тогда
							ИсклПоля = ИсклПоля + "," + Лев(Колонка.Имя, СтрДлина(Колонка.Имя) - 16);
						КонецЕсли;
					КонецЦикла;
					
					ЗаполнитьЗначенияСвойств(обИмпорт, стрДанные,, ИсклПоля);
				КонецЕсли;
				
				стОтборТЧ = Новый Структура("Ссылка", стрДанные.Ссылка);
				Для Каждого ЭлТЧ Из Таблица.ТабличныеЧасти Цикл
					ТЧ = обИмпорт[ЭлТЧ.Ключ];
					ТЧ.Очистить();
					СтрокиТЧ = ЭлТЧ.Значение.Данные.НайтиСтроки(стОтборТЧ);
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						ЗаполнитьЗначенияСвойств(ТЧ.Добавить(), СтрокаТЧ);
					КонецЦикла;
				КонецЦикла;
				
				МожноСтартовать = Истина;
				Попытка
					Если Таблица.СтруктураТаблицы.Обработчики.Свойство("ПередЗаписью") Тогда
						Объект = обИмпорт;
						Выполнить(Таблица.СтруктураТаблицы.Обработчики.ПередЗаписью);
					КонецЕсли;
					
					обИмпорт.Записать();
					
					новаОбмены.РегистрацияСобытия(РегистраторСобытий, СтатусСообщения.Информация, ?(стрДанные.НовыйОбъект,"Добавлен","Перезаписан"), "Импортирован: "+ПредставлениеТаблицы, обИмпорт, обИмпорт.ИдентификаторДляОбмена);
					новаОбмены.УвеличитьКоличествоБП(РегистраторСобытий);
					
					стрДанные.НовыйОбъект = Ложь;
				Исключение
					Сообщить(ОписаниеОшибки());
					СообщитьОбОшибкеИмпорта(Таблица, стрДанные, РегистраторСобытий);
					МожноСтартовать = Ложь;
				КонецПопытки;
				
				Если Не обИмпорт.Стартован 
					И МожноСтартовать 		Тогда
					
				    обИмпорт.Старт();
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Если Клиент Тогда
// Выгружает данные задачи в XML-файл
//
// Параметры:
//  ФайлВыгрузки <Строка>
//
Процедура ВыгрузитьВФайл(ФайлВыгрузки) Экспорт
	Попытка
	    ЗаписьХМЛ = Новый ЗаписьXML;
		ЗаписьХМЛ.ОткрытьФайл(ФайлВыгрузки, "UTF-16");
	Исключение
		Предупреждение("Не удалось создать файл выгрузки!");
		Возврат;
	КонецПопытки;
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ПланИмпортаДанных");
	ЗаписьХМЛ.ЗаписатьАтрибут("Наименование", Наименование);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.новаЗадачаИмпортаДанных
	|ГДЕ
	|	Владелец = &ПланИмпорта
	| И НЕ ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПланИмпорта", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		обЗадача = Выборка.Ссылка.ПолучитьОбъект();
		обЗадача.ВыгрузитьВХМЛ(ЗаписьХМЛ);
	КонецЦикла;
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
// Загружает данные задачи из XML-файла
//
// Параметры:
//  ФайлЗагрузки <Строка>
//
Процедура ЗагрузитьИзФайла(ФайлЗагрузки) Экспорт;

	Попытка
	    ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлЗагрузки);
	Исключение
		Предупреждение("Не удалось открыть файл загрузки!");
		Возврат;
	КонецПопытки;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.новаЗадачаИмпортаДанных
	|ГДЕ
	|	Владелец = &ПланИмпорта";
	
	Запрос.УстановитьПараметр("ПланИмпорта", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		обЗадача = Выборка.Ссылка.ПолучитьОбъект();
		обЗадача.Удалить();
	КонецЦикла;
	
	ЧтениеХМЛ.Прочитать();
	ЧтениеХМЛ.Прочитать();
	Пока ЧтениеХМЛ.Имя = "ЗадачаИмпортаДанных" Цикл
		обЗадача = Справочники.новаЗадачаИмпортаДанных.СоздатьЭлемент();
		обЗадача.Владелец = Ссылка;
		обЗадача.ЗагрузитьИзХМЛ(ЧтениеХМЛ);
		ЧтениеХМЛ.Прочитать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры
#КонецЕсли
 
#Если Клиент Тогда
// Выполняет инициализацию интерфейса
//
Процедура ПодключитьИнтерфейс() Экспорт
	ИмяИнтерфейса = новаРасширениеФорм.ДобавитьОбъектНаФорму(Форма, ЭтотОбъект);
	
	МаксШиринаОписанияЗапроса = 0;
	Для Каждого стрЗапрос Из ЗапросыНаИменаФайлов Цикл
		Ширина = новаОбщиеПроцедуры.ШиринаТекста(СокрЛП(стрЗапрос.Задача));
		Если Ширина > МаксШиринаОписанияЗапроса Тогда
			МаксШиринаОписанияЗапроса = Ширина;
		КонецЕсли;
	КонецЦикла;
	
	Отступ = 8;
	У = Отступ;
	Для Каждого стрЗапрос Из ЗапросыНаИменаФайлов Цикл
		Надпись = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("Надпись"), Панель, ЭтотОбъект);
		Надпись.Лево = Отступ;
		Надпись.Ширина = МаксШиринаОписанияЗапроса + 8;
		Надпись.Верх = У;
		Надпись.Высота = 19;
		Надпись.Заголовок = СокрЛП(стрЗапрос.Задача) + ":";
		
		стрЗапрос.ПолеВводаИмениФайла = новаРасширениеФорм.ДобавитьЭлементНаФорму(Форма, Тип("ПолеВвода"), Панель, ЭтотОбъект);
		стрЗапрос.ПолеВводаИмениФайла.Лево = Надпись.Лево + Надпись.Ширина;
		стрЗапрос.ПолеВводаИмениФайла.Ширина = Панель.Ширина - Отступ - стрЗапрос.ПолеВводаИмениФайла.Лево;
		стрЗапрос.ПолеВводаИмениФайла.Верх = У;
		стрЗапрос.ПолеВводаИмениФайла.Высота = 19;
		стрЗапрос.ПолеВводаИмениФайла.КнопкаОчистки = Ложь;
		стрЗапрос.ПолеВводаИмениФайла.КнопкаВыбора = Истина;
		стрЗапрос.ПолеВводаИмениФайла.АвтоОтметкаНезаполненного = Истина;
		стрЗапрос.ПолеВводаИмениФайла.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		
		новаРасширениеФорм.УстановитьОбработчикСобытия(Форма, стрЗапрос.ПолеВводаИмениФайла,
			"НачалоВыбора",
			1,
			ИмяИнтерфейса + ".НачалоВыбораФайла(Параметр1, Параметр2);");
		
		У = У + стрЗапрос.ПолеВводаИмениФайла.Высота + 4;
	КонецЦикла;
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
// Отключает элементы интерфейса, созданные программно
//
Процедура ОтключитьИнтерфейс() Экспорт
	новаРасширениеФорм.УдалитьЭлементыСФормы(Форма, ЭтотОбъект);
КонецПроцедуры
#КонецЕсли

// Получает имена файлов данных для задач плана импорта
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьЗапросыНаФайлыИмпорта() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка КАК Задача,
	|	ФильтрИмпорта КАК Фильтр
	|ИЗ
	|	Справочник.новаЗадачаИмпортаДанных
	|ГДЕ
	|	НЕ ПометкаУдаления И Владелец = &ПланИмпорта И ЗапрашиватьИмяФайлаПередИмпортом
	|УПОРЯДОЧИТЬ ПО Код ВОЗР";
	
	Запрос.УстановитьПараметр("ПланИмпорта", Ссылка);
	тзЗапросы = Запрос.Выполнить().Выгрузить();
	тзЗапросы.Колонки.Добавить("ПолеВводаИмениФайла");
	Возврат тзЗапросы;
КонецФункции

#Если Клиент Тогда
// Обработчик события "НачалоВыбора", назначаемый программно
//
// Параметры:
//  Элемент              <Элемент управления>
//  СтандартнаяОбработка <Булево>:
//
Процедура НачалоВыбораФайла(Элемент, СтандартнаяОбработка) Экспорт
	стрЗапрос = ЗапросыНаИменаФайлов.Найти(Элемент, "ПолеВводаИмениФайла");
	
	обФильтрИмпорта = Обработки[стрЗапрос.Фильтр].Создать();
	новаОбщиеПроцедуры.ВыбратьФайл(Элемент.Значение, СокрЛП(стрЗапрос.Задача), обФильтрИмпорта.МаскаФайла);
КонецПроцедуры
#КонецЕсли

ЗапросыНаИменаФайлов = ПолучитьЗапросыНаФайлыИмпорта();