
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ТаблицаРеквизитовКИ = Неопределено;
	//ДобавлениеРеквизитовКонИнформацииПриОткрытии(ТаблицаРеквизитовКИ);
	//+Степанов Задача № 3943
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.ТипОплаты КАК ТипОплаты,
	               |	ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних.Учитывать КАК Учитывать
	               |ИЗ
	               |	РегистрСведений.ТипыОплатТребованиеИдентификацииКлиентов.СрезПоследних(, Партнер = &Партнер) КАК ТипыОплатТребованиеИдентификацииКлиентовСрезПоследних";
	Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТипыОплатТребованиеИдентификацииКлиентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;	
	//-Степанов Задача № 3943
	
	//перенесено из ПриОткрытии
	НастройкиОтборовСписковПоВладельцу();
	
	ИнициализацияПараметровКонтрагента();
	МодифицированностьДопПараметров = ЛОЖЬ;
	
	ИнициализацияСвязокККМ();
	УстановитьОтборРассылки(Перечисления.ТипыРассылки.АдминистративнаяРассылка);
	СформироватьЗаголовокСтраницРассылки();
	УстановитьОтборЮрЛица(ПолучитьПеречисленияТипыЗаказов("Доставка"));
	ПолучитьНастройкиПечатиЧековПоФЗ54();
	
	ДобавлениеРеквизитовКонИнформацииПриОткрытии();

	ЗаполнениеПриОткрытииИПроверкаНаДоступностьШаблонаСМСРассылки();
	
	ВидимостьКнопкиИнтеграция();
	
	ИмяПредыдущейКнопки = "Общая";
	КнИмяТек = "КнОбщая";
	Элементы[КнИмяТек].ЦветФона = Новый Цвет(135, 206, 235); 
	//+Степанов Задача № 3943
	Элементы.ТипыОплатТребованиеИдентификацииКлиентов.Доступность = ИспользоватьКодИдентификацииКлиента;
	//-Степанов Задача № 3943
	
	//Асеев 28.02.2022 (Задача № 4749)>>>
	УстановитьОтборПоказателейТарифаПримерки();
	//Асеев 28.02.2022 (Задача № 4749)<<<
	
	//Асеев 31.05.2022 (Задача № 4813)>>>
	УстановитьДоступностьШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа();
	//Асеев 31.05.2022 (Задача № 4813)<<<
	
	//Асеев 31.01.2023 (Задача № 4977)>>>
	ЛьготнаяКатегорияЭквайрингаДоИзменения = ЛьготнаяКатегорияЭквайринга;
	//Асеев 31.01.2023 (Задача № 4977)<<<

	//Асеев 30.09.2024 (Задача № 5329)>>>
	Элементы.ВремяФормированияАПП.ТолькоПросмотр = Не ФормироватьАПП;
	//Асеев 30.09.2024 (Задача № 5329)<<<
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Асеев 31.05.2022 (Задача № 4813)>>>
	//НастройкиОтборовСписковПоВладельцу();
	//
	//ИнициализацияПараметровКонтрагента();
	//МодифицированностьДопПараметров = ЛОЖЬ;
	//
	//ИнициализацияСвязокККМ();
	//УстановитьОтборРассылки(ПолучитьПеречисленияТипыРассылки("АдминистративнаяРассылка"));
	//СформироватьЗаголовокСтраницРассылки();
	//УстановитьОтборЮрЛица(ПолучитьПеречисленияТипыЗаказов("Доставка"));
	//ПолучитьНастройкиПечатиЧековПоФЗ54();
	//
	//ДобавлениеРеквизитовКонИнформацииПриОткрытии();

	//ЗаполнениеПриОткрытииИПроверкаНаДоступностьШаблонаСМСРассылки();
	//
	//ВидимостьКнопкиИнтеграция();
	//
	//ИмяПредыдущейКнопки = "Общая";
	//КнИмяТек = "КнОбщая";
	//Элементы[КнИмяТек].ЦветФона = Новый Цвет(135, 206, 235); 
	////+Степанов Задача № 3943
	//Элементы.ТипыОплатТребованиеИдентификацииКлиентов.Доступность = ИспользоватьКодИдентификацииКлиента;
	////-Степанов Задача № 3943
	//
	////Асеев 28.02.2022 (Задача № 4749)>>>
	//УстановитьОтборПоказателейТарифаПримерки();
	////Асеев 28.02.2022 (Задача № 4749)<<<
	//Асеев 31.05.2022 (Задача № 4813)<<<
	
КонецПроцедуры

#Область Инициализации
//Производит установку отборов динамических списков по Владельцу(Контрагенту)
//Счета, Договоры и т.д
&НаСервере
Процедура НастройкиОтборовСписковПоВладельцу()
	
	Счета.Отбор.Элементы.Очистить();
	ЭлементОтбораСчета = Счета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораСчета.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец"); 
	ЭлементОтбораСчета.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораСчета.Использование = Истина; 
	ЭлементОтбораСчета.ПравоеЗначение = Объект.Ссылка;
	
	Договоры.Отбор.Элементы.Очистить();
	ЭлементОтбораДоговоров = Договоры.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораДоговоров.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец"); 
	ЭлементОтбораДоговоров.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораДоговоров.Использование = Истина; 
	ЭлементОтбораДоговоров.ПравоеЗначение = Объект.Ссылка;
	
	КонтактнаяИнформация.Отбор.Элементы.Очистить();
	ЭлементОтбораКИ = КонтактнаяИнформация.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораКИ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект"); 
	ЭлементОтбораКИ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораКИ.Использование = Истина; 
	ЭлементОтбораКИ.ПравоеЗначение = Объект.Ссылка;
	
	КонтактныеЛица.Отбор.Элементы.Очистить();
	ЭлементОтбораКЛК = КонтактныеЛица.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораКЛК.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец"); 
	ЭлементОтбораКЛК.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораКЛК.Использование = Истина; 
	ЭлементОтбораКЛК.ПравоеЗначение = Объект.Ссылка;
	
	ПечатьБЗ.Отбор.Элементы.Очистить();
	ЭлементОтбораПечатьБЗ = ПечатьБЗ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораПечатьБЗ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); 
	ЭлементОтбораПечатьБЗ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораПечатьБЗ.Использование = Истина; 
	ЭлементОтбораПечатьБЗ.ПравоеЗначение = Объект.Ссылка;
	
	АвтРассылкаОтчетов.Отбор.Элементы.Очистить();
	ЭлементОтбораАРО = АвтРассылкаОтчетов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораАРО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец"); 
	ЭлементОтбораАРО.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораАРО.Использование = Истина; 
	ЭлементОтбораАРО.ПравоеЗначение = Объект.Ссылка;
	
	ВидыПодъемов.Отбор.Элементы.Очистить();
	ЭлементОтбораВП = ВидыПодъемов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораВП.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); 
	ЭлементОтбораВП.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораВП.Использование = Истина; 
	ЭлементОтбораВП.ПравоеЗначение = Объект.Ссылка;
	
	СтавкиДопУслуг.Отбор.Элементы.Очистить();
	ЭлементОтбораСтавкиДопУслуг = СтавкиДопУслуг.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораСтавкиДопУслуг.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); 
	ЭлементОтбораСтавкиДопУслуг.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораСтавкиДопУслуг.Использование = Истина; 
	ЭлементОтбораСтавкиДопУслуг.ПравоеЗначение = Объект.Ссылка;
	
	ПравилаРассчетаКатегорийЗП.Отбор.Элементы.Очистить();
	ЭлементОтбораЗП = ПравилаРассчетаКатегорийЗП.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораЗП.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнтернетМагазин"); 
	ЭлементОтбораЗП.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораЗП.Использование = Истина; 
	ЭлементОтбораЗП.ПравоеЗначение = Объект.Ссылка;
	
	
КонецПроцедуры	

&НаСервере
Процедура ИнициализацияПараметровКонтрагента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
	|	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
	|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
	|	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
	|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
	|	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
	|	ПараметрыКонтрагентовСрезПоследних.ВесЗапросаДанныхОПодъемеОтВодителя КАК ВесЗапросаДанныхОПодъемеОтВодителя,
	|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
	|	ПараметрыКонтрагентовСрезПоследних.ТипОперативнойПриемки КАК ТипОперативнойПриемки,
	|	ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам КАК УчетЗаказовПоМестам,
	|	ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам КАК УчетШКПоТоварам,
	|	ПараметрыКонтрагентовСрезПоследних.УчетТоваровПоМестам КАК УчетТоваровПоМестам,
	|	ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах КАК АгрегироватьДанныеВОтправляемыхОтчетах,
	|	ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей КАК НаименованиеЛатиницей,
	|	ПараметрыКонтрагентовСрезПоследних.ЭтоАгрегатор КАК ЭтоАгрегатор,
	|	ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности КАК СпособКонтроляДнейЗадолженности,
	|	ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
	|	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет,
	|	ПараметрыКонтрагентовСрезПоследних.ТипОтношенийСКлиентами КАК ТипОтношенийСКлиентами,
	|	ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
	|	ПараметрыКонтрагентовСрезПоследних.setiingId_Strizh КАК setiingId_Strizh,
	|	ПараметрыКонтрагентовСрезПоследних.login_Strizh КАК login_Strizh,
	|	ПараметрыКонтрагентовСрезПоследних.password_Strizh КАК password_Strizh,
	|	ПараметрыКонтрагентовСрезПоследних.СкладскаяОбработкаОтсутствует КАК СкладскаяОбработкаОтсутствует,
	|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто КАК АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто,
	|	ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
	|	ПараметрыКонтрагентовСрезПоследних.НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
	|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто КАК АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто,
	//Поляков #3983 26.05.2020 ->
	|	ПараметрыКонтрагентовСрезПоследних.НеСоздаватьМестаЗаказовПоПриходнымАПП КАК НеСоздаватьМестаЗаказовПоПриходнымАПП,
	//Поляков #3983 26.05.2020 <-
	//Асеев 07.09.2020 (Задача № 4197)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП,
	//Асеев 07.09.2020 (Задача № 4197)<<<
	//Асеев 26.01.2021 (Задача № 4449)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОдинаковыеШКНаВсехМестахЗаказа КАК ОдинаковыеШКНаВсехМестахЗаказа,
	//Асеев 26.01.2021 (Задача № 4449)<<<
	//Асеев 20.08.2021 (Задача № 4645)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
	//Асеев 20.08.2021 (Задача № 4645)<<<
	//Асеев 28.02.2022 (Задача № 4749)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ТарифПримерки КАК ТарифПримерки,
	//Асеев 28.02.2022 (Задача № 4749)<<<
	//Асеев 29.03.2022 (Задача № 4767)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail КАК ОтправкаСсылкиЛКПолучателяЗаказаНаEmail,
	//Асеев 29.03.2022 (Задача № 4767)<<<
	//Асеев 31.05.2022 (Задача № 4813)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаSMS КАК ОтправкаСсылкиЛКПолучателяЗаказаSMS,
	|	ПараметрыКонтрагентовСрезПоследних.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа КАК ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа,
	//Асеев 31.05.2022 (Задача № 4813)<<<
	//Асеев 18.08.2022 (Задача № 4873)>>>
	|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке,
	//Асеев 18.08.2022 (Задача № 4873)<<<
	//Асеев 30.08.2022 (Задача № 4883)>>>
	|	ПараметрыКонтрагентовСрезПоследних.БезусловнаяПечатьБланковЗаказов КАК БезусловнаяПечатьБланковЗаказов,
	//Асеев 30.08.2022 (Задача № 4883)<<<
	//Асеев 28.11.2022 (Задача № 4935)>>>
	|	ПараметрыКонтрагентовСрезПоследних.accessKey КАК accessKey,
	//Асеев 28.11.2022 (Задача № 4935)<<<
	//Асеев 26.01.2023 (Задача № 4977)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ЛьготнаяКатегорияЭквайринга КАК ЛьготнаяКатегорияЭквайринга,
	//Асеев 26.01.2023 (Задача № 4977)<<<
	//Асеев 12.05.2023 (по письму Контроль заказов)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ПроизводитьРассылкуКонтроляЗаказов КАК ПроизводитьРассылкуКонтроляЗаказов,
	//Асеев 12.05.2023 (по письму Контроль заказов)<<<
	//Асеев 30.09.2024 (Задача № 5329)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ФормироватьАПП КАК ФормироватьАПП,
	|	ПараметрыКонтрагентовСрезПоследних.ВремяФормированияАПП КАК ВремяФормированияАПП,
	//Асеев 30.09.2024 (Задача № 5329)<<<
	//Асеев 31.10.2024 (Задача № 5339)>>>
	|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
	//Асеев 31.10.2024 (Задача № 5339)<<<
	|ИЗ
	|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Ссылка) КАК ПараметрыКонтрагентовСрезПоследних";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗапретЧастичногоВыкупа = ВыборкаДетальныеЗаписи.ЗапретЧастичногоВыкупа;
		ЗапретСменыОплаты = ВыборкаДетальныеЗаписи.ЗапретСменыОплаты;
		МетодОплатыПодъёма = ВыборкаДетальныеЗаписи.МетодОплатыПодъёма;
		ВычисляемыйЗапретЧастичногоВыкупа = ВыборкаДетальныеЗаписи.ВычисляемыйЗапретЧастичногоВыкупа;
		ПриёмИтогоСКлиента = ВыборкаДетальныеЗаписи.ПриёмИтогоСКлиента;
		ПредварительноеЗакрытиеЗаказов = ВыборкаДетальныеЗаписи.ПредварительноеЗакрытиеЗаказов;
		ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной = ВыборкаДетальныеЗаписи.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной;
		ВесЗапросаДанныхОПодъемеОтВодителя = ВыборкаДетальныеЗаписи.ВесЗапросаДанныхОПодъемеОтВодителя;
		НаименованиеЛатиницей = ВыборкаДетальныеЗаписи.НаименованиеЛатиницей;
		ОперативнаяПриемка = ВыборкаДетальныеЗаписи.ОперативнаяПриемка;
		ТипОперативнойПриемки = ВыборкаДетальныеЗаписи.ТипОперативнойПриемки;	
		УчетЗаказовПоМестам = ВыборкаДетальныеЗаписи.УчетЗаказовПоМестам;
		УчетШКПоТоварам = ВыборкаДетальныеЗаписи.УчетШКПоТоварам; //CeHbKA
		УчетТоваровПоМестам = ВыборкаДетальныеЗаписи.УчетТоваровПоМестам;
		АгрегироватьДанныеВОтправляемыхОтчетах = ВыборкаДетальныеЗаписи.АгрегироватьДанныеВОтправляемыхОтчетах;
		ЭтоАгрегатор = ВыборкаДетальныеЗаписи.ЭтоАгрегатор;
		СпособКонтроляДнейЗадолженности = ВыборкаДетальныеЗаписи.СпособКонтроляДнейЗадолженности;
		КоличествоДнейДоПросрочкиДолга = ВыборкаДетальныеЗаписи.КоличествоДнейДоПросрочкиДолга;
		Спецсчет = ВыборкаДетальныеЗаписи.СпецСчет;
		ТипОтношенийСКлиентами = ВыборкаДетальныеЗаписи.ТипОтношенийСКлиентами;
		ПечатьПредоплаченныхЧеков = ВыборкаДетальныеЗаписи.ПечатьПредоплаченныхЧеков; //Тимур Ибрагимов 12.03.2019
		StrizhLogin = ВыборкаДетальныеЗаписи.login_Strizh;
		StrizhPassword = ВыборкаДетальныеЗаписи.password_Strizh;
		StrizhSetiingId = ВыборкаДетальныеЗаписи.setiingId_Strizh;
		//+Степанов
		СкладскаяОбработкаОтсутствует = ВыборкаДетальныеЗаписи.СкладскаяОбработкаОтсутствует;
		АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто = ВыборкаДетальныеЗаписи.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто;
		АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто = ВыборкаДетальныеЗаписи.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто;
		//-Степанов
		//+Степанов Задача № 3905
		ИспользоватьКодИдентификацииКлиента = ВыборкаДетальныеЗаписи.ИспользоватьКодИдентификацииКлиента;
		НазначениеКодаИдентификацииКлиентаИССтрижа = ВыборкаДетальныеЗаписи.НазначениеКодаИдентификацииКлиентаИССтрижа;
		Элементы.НазначениеКодаИдентификацииКлиентаИССтрижа.Доступность = ИспользоватьКодИдентификацииКлиента;
		//-Степанов Задача № 3905
		//Поляков #3983 26.05.2020 ->
		НеСоздаватьМестаЗаказовПоПриходнымАПП = ВыборкаДетальныеЗаписи.НеСоздаватьМестаЗаказовПоПриходнымАПП;
		//Поляков #3983 26.05.2020 <-
		//Асеев 07.09.2020 (Задача № 4197)>>>
		ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП = ВыборкаДетальныеЗаписи.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
		//Асеев 07.09.2020 (Задача № 4197)<<<
		//Асеев 26.01.2021 (Задача № 4449)>>>
		ОдинаковыеШКНаВсехМестахЗаказа = ВыборкаДетальныеЗаписи.ОдинаковыеШКНаВсехМестахЗаказа;
		//Асеев 26.01.2021 (Задача № 4449)<<<
		//Асеев 20.08.2021 (Задача № 4645)>>>
		ОтключитьПроверкуБНЗаказов = ВыборкаДетальныеЗаписи.ОтключитьПроверкуБНЗаказов;
		//Асеев 20.08.2021 (Задача № 4645)<<<
		//Асеев 28.02.2022 (Задача № 4749)>>>
		ТарифПримерки = ВыборкаДетальныеЗаписи.ТарифПримерки;
		//Асеев 28.02.2022 (Задача № 4749)<<<
		//Асеев 29.03.2022 (Задача № 4767)>>>
		ОтправкаСсылкиЛКПолучателяЗаказаНаEmail = ВыборкаДетальныеЗаписи.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail;
		//Асеев 29.03.2022 (Задача № 4767)<<<
		//Асеев 31.05.2022 (Задача № 4813)>>>
		ОтправкаСсылкиЛКПолучателяЗаказаSMS = ВыборкаДетальныеЗаписи.ОтправкаСсылкиЛКПолучателяЗаказаSMS;
		ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа = ВыборкаДетальныеЗаписи.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа;
		//Асеев 31.05.2022 (Задача № 4813)<<<
		//Асеев 18.08.2022 (Задача № 4873)>>>
		СопроводительныеДокументыНаходятсяВКоробке = ВыборкаДетальныеЗаписи.СопроводительныеДокументыНаходятсяВКоробке;
		//Асеев 18.08.2022 (Задача № 4873)<<<
		//Асеев 30.08.2022 (Задача № 4883)>>>
		БезусловнаяПечатьБланковЗаказов = ВыборкаДетальныеЗаписи.БезусловнаяПечатьБланковЗаказов;
		//Асеев 30.08.2022 (Задача № 4883)<<<
		//Асеев 28.11.2022 (Задача № 4935)>>>
		StrizhAccessKey = ВыборкаДетальныеЗаписи.accessKey;
		//Асеев 28.11.2022 (Задача № 4935)<<<
		//Асеев 26.01.2023 (Задача № 4977)>>>
		ЛьготнаяКатегорияЭквайринга = ВыборкаДетальныеЗаписи.ЛьготнаяКатегорияЭквайринга;
		//Асеев 26.01.2023 (Задача № 4977)<<<
		//Асеев 12.05.2023 (по письму Контроль заказов)>>>
		ПроизводитьРассылкуКонтроляЗаказов = ВыборкаДетальныеЗаписи.ПроизводитьРассылкуКонтроляЗаказов;
		//Асеев 12.05.2023 (по письму Контроль заказов)<<<
		//Асеев 30.09.2024 (Задача № 5329)>>>
		ФормироватьАПП = ВыборкаДетальныеЗаписи.ФормироватьАПП;
		ВремяФормированияАПП = ВыборкаДетальныеЗаписи.ВремяФормированияАПП;
		//Асеев 30.09.2024 (Задача № 5329)<<<
		//Асеев 31.10.2024 (Задача № 5339)>>>
		ОператорРассылки = ВыборкаДетальныеЗаписи.ОператорРассылки;
		//Асеев 31.10.2024 (Задача № 5339)<<<
	Иначе
		ЗапретЧастичногоВыкупа = Ложь;
		ЗапретСменыОплаты = Ложь;
		МетодОплатыПодъёма = Перечисления.МетодыОплатыПодъёмаЗаказа.ПустаяСсылка();
		ВычисляемыйЗапретЧастичногоВыкупа = Ложь;
		ПриёмИтогоСКлиента = Ложь;
		ПредварительноеЗакрытиеЗаказов = Ложь;
		ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной = Ложь;
		ВесЗапросаДанныхОПодъемеОтВодителя = 0;
		НаименованиеЛатиницей = "";
		ОперативнаяПриемка = Ложь;
		ТипОперативнойПриемки = Перечисления.ТипыОперативнойПриемки.ПустаяСсылка();
		УчетЗаказовПоМестам = Ложь;
		УчетШКПоТоварам = Ложь;
		АгрегироватьДанныеВОтправляемыхОтчетах = Ложь;
		ЭтоАгрегатор = Ложь;
		Спецсчет = Ложь;
		ПечатьПредоплаченныхЧеков = Ложь; //Тимур Ибрагимов 12.03.2019
		//+Степанов
		СкладскаяОбработкаОтсутствует = Ложь;
		АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто = Ложь;
		//-Степанов
		
		//Поляков #3983 26.05.2020 ->
		НеСоздаватьМестаЗаказовПоПриходнымАПП = Ложь;
		//Поляков #3983 26.05.2020 <-
		//Асеев 07.09.2020 (Задача № 4197)>>>
		ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП = Ложь;
		//Асеев 07.09.2020 (Задача № 4197)<<<
		//Асеев 26.01.2021 (Задача № 4449)>>>
		ОдинаковыеШКНаВсехМестахЗаказа = Ложь;
		//Асеев 26.01.2021 (Задача № 4449)<<<
		//Асеев 20.08.2021 (Задача № 4645)>>>
		ОтключитьПроверкуБНЗаказов = Ложь;
		//Асеев 20.08.2021 (Задача № 4645)<<<
	КонецЕсли;
	
	//Геннадий 12.10.2020 ->
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РассылкаСМСПоКонтрагентамСрезПоследних.ПроизводитьРассылку КАК ПроизводитьРассылку
	|ИЗ
	|	РегистрСведений.РассылкаСМСПоКонтрагентам.СрезПоследних(, Контрагент = &Ссылка) КАК РассылкаСМСПоКонтрагентамСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПроизводитьРассылкуСМС = ВыборкаДетальныеЗаписи.ПроизводитьРассылку;
	Иначе	
		ПроизводитьРассылкуСМС = Ложь;
	КонецЕсли;
	//Геннадий 12.10.2020 <-
	
КонецПроцедуры

// Якурнов 12.07.2018 11:50:24
&НаСервере
Процедура ИнициализацияСвязокККМ()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	СвязкиККМПоКонтрагентамСрезПоследних.СвязкаККМ,
	|	СвязкиККМПоКонтрагентамСрезПоследних.ТипОплаты
	|ИЗ
	|	РегистрСведений.СвязкиККМПоКонтрагентам.СрезПоследних КАК СвязкиККМПоКонтрагентамСрезПоследних
	|ГДЕ
	|	СвязкиККМПоКонтрагентамСрезПоследних.Контрагент = &Контрагент";
	
	Зап.УстановитьПараметр("Контрагент", Объект.Ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.ТипОплаты = Справочники.ТипыОплат.Наличные Тогда
			СвязкаККМНаличнаяОплата = Выб.СвязкаККМ;
			ТекСвязкаККМНаличнаяОплата = СвязкаККМНаличнаяОплата;
		ИначеЕсли Выб.ТипОплаты = Справочники.ТипыОплат.Терминал Тогда
			СвязкаККМТерминал = Выб.СвязкаККМ;
			ТекСвязкаККМТерминал = СвязкаККМТерминал;
		ИначеЕсли Выб.ТипОплаты = Справочники.ТипыОплат.ВКредит Тогда
			СвязкаККМКредит = Выб.СвязкаККМ;
			ТекСвязкаККМКредит = СвязкаККМТерминал;			
		КонецеСли;	
	КонецЦикла;	
	
КонецПроцедуры

// Якурнов 12.07.2018 10:40:35
&НаСервере
Процедура ПолучитьЛоготипы()
	Стр = Новый Структура;
	Стр.Вставить("Контрагент", Объект.Ссылка);
	Выб = РегистрыСведений.ЛоготипыКонтрагентов.Выбрать(Стр);
	Если Выб.Следующий() Тогда
		Попытка	
			Лого1 = ПоместитьВоВременноеХранилище(Выб.ЛоготипЛевый.Получить());
		Исключение	
		КонецПопытки;
		Попытка
			Лого2 = ПоместитьВоВременноеХранилище(Выб.ЛоготипПравый.Получить());
		Исключение	
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

// Якурнов 07.11.2018 15:52:30  
&НаСервере
Процедура ВидимостьКнопкиИнтеграция()
	Элементы.КнИнтеграция.Видимость = РольДоступна("Админы");
КонецПроцедуры

#КонецОбласти

#Область ИзмененийИДобавлений

&НаКлиенте
Процедура СтраницыГруппВкладокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "Прочее" Тогда
		ПолучитьЛоготипы();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ДобавлениеРеквизитовКонИнформацииПриОткрытии()
	
	ТаблицаРеквизитовКИ = Неопределено;
	
	ТаблицаРеквизитовКИ = ПолучитьТЗКонИнф();
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТаблицаРеквизитовКИ, Новый УникальныйИдентификатор);

	Если ТаблицаРеквизитовКИ = Неопределено Тогда;
		Возврат;
	КонецЕсли;
	
	Страница = Элементы.Добавить("Страница",Тип("ГруппаФормы"),Элементы.КонтактнаяИнформация);
	Страница.Вид = ВидГруппыФормы.Страница;
	Страница.Заголовок = "Контактная информация";
	Страница.Видимость = Истина;
	
	//в группе КонтактнаяИнформация (страницы) создаю страницу с именем страница
	
	Для Каждого Элем Из ТаблицаРеквизитовКИ Цикл
		ДобавляемыеРеквизиты = Новый Массив;
		Реквизит = Новый РеквизитФормы(Элем.Имя, Новый ОписаниеТипов("Строка"), , Элем.Имя, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		НовыйЭлемент =Элементы.Добавить(Элем.Имя, Тип("ПолеФормы"),Элементы.Страница);
		НовыйЭлемент.ПутьКДанным = Элем.Имя;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = Строка(Элем.Вид);
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
		СтрИмени = Элем.Имя;
		ЭтаФорма[СтрИмени] = Элем.Представление;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновлениеРеквизитовКонИнформации()
	
	ТаблицаРеквизитовКИ = ПолучитьИзВременногоХранилища(АдресВременногоХранилища); 
	
	Если ТаблицаРеквизитовКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	МассивРекДляУдаления = Новый Массив;
	ВсеРеквизиты = ЭтаФорма.ПолучитьРеквизиты();
	
	Для Каждого ЭлемКИ из ТаблицаРеквизитовКИ Цикл
		Для Каждого Элемент из ВсеРеквизиты Цикл
			//Если Найти(Элемент.Имя, ЭлемКИ.Имя) тогда
			Если Элемент.Имя = ЭлемКИ.Имя Тогда
				МассивРекДляУдаления.Добавить(Элемент.Имя);
				Элементы.Удалить(Элементы[Элемент.Имя]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Удаляем
	ИзменитьРеквизиты(, МассивРекДляУдаления);
	
	//и считываем заново
	
	ТаблицаРеквизитовКИ = ПолучитьТЗКонИнф();
	
	Если ТаблицаРеквизитовКИ = Неопределено Тогда;
		Возврат;
	КонецЕсли;
	
	Для Каждого Элем Из ТаблицаРеквизитовКИ Цикл
		ДобавляемыеРеквизиты = Новый Массив;
		Реквизит = Новый РеквизитФормы(Элем.Имя, Новый ОписаниеТипов("Строка"), , Элем.Имя, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		НовыйЭлемент =Элементы.Добавить(Элем.Имя, Тип("ПолеФормы"),Элементы.Страница);
		НовыйЭлемент.ПутьКДанным = Элем.Имя;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = Строка(Элем.Вид);
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
		СтрИмени = Элем.Имя;
		ЭтаФорма[СтрИмени] = Элем.Представление;
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТаблицаРеквизитовКИ,Новый УникальныйИдентификатор);
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьТЗКонИнф()
	
	//ТаблицаЗначенийКИ = Новый ТаблицаЗначений;
	//ТипСтрока = Новый ОписаниеТипов("Строка", ,
	//			Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	//			
	//ТаблицаЗначенийКИ.Колонки.Добавить("Имя");
	//ТаблицаЗначенийКИ.Колонки.Добавить("Вид");
	//ТаблицаЗначенийКИ.Колонки.Добавить("Тип");
	//ТаблицаЗначенийКИ.Колонки.Добавить("Представление",ТипСтрока);
	ТаблицаЗначенийКИ = Новый Массив;
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.Тип КАК Тип
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект",Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//НовСтр = ТаблицаЗначенийКИ.Добавить();
		
		ИмяЭлем = Строка(Выборка.Вид);
		ИмяЭлем = СтрЗаменить(ИмяЭлем," ","");
		
		НовСтр =  Новый Структура;
		//НовСтр.Имя = ИмяЭлем;
		//
		//НовСтр.Вид = Выборка.Вид;
		//НовСтр.Тип = Выборка.Тип;
		//НовСтр.Представление = Выборка.Представление;
		
		// Якурнов 24.07.2018 9:34:13
		//Перевод для тонкого клиента Таблицы значений как Массив
		
		НовСтр.Вставить("Имя",ИмяЭлем);
		НовСтр.Вставить("Вид",Выборка.Вид);
		НовСтр.Вставить("Тип",Выборка.Тип);
		НовСтр.Вставить("Представление",Выборка.Представление);
		ТаблицаЗначенийКИ.Добавить(НовСтр);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийКИ;
КонецФункции

&НаКлиенте
Процедура КомандаПереключенияВкладок(Команда)
	
	КнИмяБывш = "Кн" + ИмяПредыдущейКнопки;
	ИмяБывшегоЭлемента = ИмяПредыдущейКнопки;
	
	Элементы[КнИмяБывш].ЦветФона = Новый Цвет(); 
	Элементы[ИмяБывшегоЭлемента].Видимость = Ложь;
	
	ТекЭлем = ЭтаФорма.ТекущийЭлемент;
	
	КнИмяТек = ТекЭлем.Имя;
	ИмяТекЭлемента = Сред(ТекЭлем.Имя,3);
	
	Элементы[КнИмяТек].ЦветФона = Новый Цвет(135, 206, 235); 
	Элементы[ИмяТекЭлемента].Видимость = Истина;
	
	ИмяПредыдущейКнопки = ИмяТекЭлемента;
	ЭтаФорма.ТекущийЭлемент = Элементы[ИмяТекЭлемента];
	
	Если ИмяТекЭлемента = "Прочее" Тогда
		ПолучитьЛоготипы();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДоговор(Команда)
	
	Если Элементы.Договоры.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ОсновнойДоговорКонтрагента = Элементы.Договоры.ТекущаяСтрока.Ссылка;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОсновнойДоговорЗавершение", ЭтотОбъект), "Для переназначения Основного Договора нужно записать. Записать?", Режим, 0,КодВозвратаДиалога.Нет, "Внимание!!!");
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДоговорЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ЭтаФорма.Записать();
		Элементы.Договоры.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСчет(Команда)
	
	Если Элементы.Счета.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ОсновнойБанковскийСчет = Элементы.Счета.ТекущаяСтрока.Ссылка;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОсновнойСчетЗавершение", ЭтотОбъект), "Для переназначения Основного Счета нужно записать. Записать?", Режим, 0,КодВозвратаДиалога.Нет, "Внимание!!!");
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ЭтаФорма.Записать();
		Элементы.Счета.Обновить();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ИзмененийИДобавленийКартинок
&НаСервере
Процедура ДобавлениеИзменениеЛоготиповНаСервере()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Контрагент не записан. Сначала нужно Записать");
		Возврат;
	КонецЕсли;
	
	Наб = РегистрыСведений.ЛоготипыКонтрагентов.СоздатьНаборЗаписей();
	
	Наб.Отбор.Контрагент.Установить(Объект.Ссылка);
	Наб.Прочитать();
	
	Наб.Очистить();
	Нов = Наб.Добавить();
	Нов.Контрагент = Объект.Ссылка;
	
	Если Лого1 = "" Тогда
		Нов.ЛоготипЛевый   = Новый ХранилищеЗначения(Новый Картинка);
	Иначе
		РежимСжатия        = Новый СжатиеДанных(9);
		ДанныеСохранения   = ПолучитьИзВременногоХранилища(Лого1);
		Нов.ЛоготипЛевый   = Новый ХранилищеЗначения(ДанныеСохранения, РежимСжатия);
	КонецЕсли;
	
	Если Лого2 = "" Тогда
		Нов.ЛоготипПравый   = Новый ХранилищеЗначения(Новый Картинка);
	Иначе
		РежимСжатия        = Новый СжатиеДанных(9);
		ДанныеСохранения   = ПолучитьИзВременногоХранилища(Лого2);
		Нов.ЛоготипПравый   = Новый ХранилищеЗначения(ДанныеСохранения, РежимСжатия);
	КонецЕсли;
	
	//Если Лого1 <> "" ИЛИ Лого2 <> "" Тогда
	//КонецЕсли;
	
	Если Лого1 = "" И Лого2 = "" Тогда
		Наб.Очистить();
	КонецЕсли;
	
	Наб.Записать();

	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИзмененияЛого1(Команда)
	Если Модифицированность Тогда
		Воп = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("КнопкаИзмененияЛого1Завершение1", ЭтотОбъект), "Данные изменены. Записать?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Возврат;	
	КонецеСли;	
	КнопкаИзмененияЛого1Фрагмент();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИзмененияЛого1Завершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Воп = РезультатВопроса;
	Если Воп = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕСли;	
	
	КнопкаИзмененияЛого1Фрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИзмененияЛого1Фрагмент()
	
	Перем Выб;
	
	Выб = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Выб.Фильтр = "Картинка(*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg";
	
	Выб.Показать(Новый ОписаниеОповещения("КнопкаИзмененияЛого1Завершение", ЭтотОбъект, Новый Структура("Выб", Выб)));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИзмененияЛого1Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Выб = ДополнительныеПараметры.Выб;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Кар = Новый Картинка(Выб.ПолноеИмяФайла);
		Лого1 = ПоместитьВоВременноеХранилище(Кар);
		ДобавлениеИзменениеЛоготиповНаСервере()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИзмененияЛого2(Команда)
	Если Модифицированность Тогда
		Воп = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("КнопкаИзмененияЛого2Завершение1", ЭтотОбъект), "Данные изменены. Записать?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Возврат;	
	КонецеСли;	
	КнопкаИзмененияЛого2Фрагмент();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИзмененияЛого2Завершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Воп = РезультатВопроса;
	Если Воп = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕСли;	
	
	КнопкаИзмененияЛого2Фрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИзмененияЛого2Фрагмент()
	
	Перем Выб;
	
	Выб = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Выб.Фильтр = "Картинка(*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg";
	
	Выб.Показать(Новый ОписаниеОповещения("КнопкаИзмененияЛого2Завершение", ЭтотОбъект, Новый Структура("Выб", Выб)));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаИзмененияЛого2Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Выб = ДополнительныеПараметры.Выб;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Кар = Новый Картинка(Выб.ПолноеИмяФайла);
		Лого2 = ПоместитьВоВременноеХранилище(Кар);
		ДобавлениеИзменениеЛоготиповНаСервере()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдаленияЛого1(Команда)
	Лого1 = "";
	ДобавлениеИзменениеЛоготиповНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдаленияЛого2(Команда)
	Лого2 = "";
	ДобавлениеИзменениеЛоготиповНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СвязкиККМ

&НаСервере
Процедура ЗаписьСвязкиККМ(Связка, ТипОплатыИмя)
	
	ТипОплаты =  Справочники.ТипыОплат[ТипОплатыИмя];
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Контрагент не записан. Сначала нужно Записать");
		Возврат;
	КонецЕсли;
	
	ТекВр = ТекущаяДата();
	Наб = РегистрыСведений.СвязкиККМПоКонтрагентам.СоздатьНаборЗаписей();
	Наб.Отбор.Контрагент.Установить(Объект.Ссылка);
	Наб.Отбор.ТипОплаты.Установить(ТипОплаты);
	Наб.Отбор.Период.Установить(ТекВр);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекВр;
	Нов.ТипОплаты = ТипОплаты;
	Нов.Контрагент = Объект.Ссылка;
	Нов.СвязкаККМ = Связка;
	
	Наб.Записать();
КонецПроцедуры	

&НаКлиенте
Процедура СвязкаККМНаличнаяОплатаПриИзменении(Элемент)
	
	ЗаписьСвязкиККМ(СвязкаККМНаличнаяОплата, "Наличные");
	
КонецПроцедуры

&НаКлиенте
Процедура СвязкаККМТерминалПриИзменении(Элемент)
	
	ЗаписьСвязкиККМ(СвязкаККМТерминал, "Терминал");
	
КонецПроцедуры

&НаКлиенте
Процедура СвязкаККМКредитПриИзменении(Элемент)
	
	ЗаписьСвязкиККМ(СвязкаККМКредит, "ВКредит");
	
КонецПроцедуры

#КонецОбласти

#Область ИзмененийИДобавленийПараметровКонтрагента

&НаСервере
Процедура ДобавлениеИзменениеПараметровКонтрагента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Сначала запишите контрагента!");
		Возврат;
	КонецЕсли;	
	
	Период = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Контрагент.Установить(Объект.Ссылка);
	Запись = НаборЗаписей.Добавить();
	Запись.Период = Период;
	Запись.Контрагент = Объект.Ссылка;
	Запись.ЗапретЧастичногоВыкупа = ЗапретЧастичногоВыкупа;
	Запись.ЗапретСменыОплаты = ЗапретСменыОплаты;
	Запись.МетодОплатыПодъёма = МетодОплатыПодъёма;
	Запись.ПриёмИтогоСКлиента = ПриёмИтогоСКлиента;
	Запись.ВычисляемыйЗапретЧастичногоВыкупа = ВычисляемыйЗапретЧастичногоВыкупа;
	Запись.ПредварительноеЗакрытиеЗаказов = ПредварительноеЗакрытиеЗаказов;
	Запись.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной = ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной;
	Запись.ВесЗапросаДанныхОПодъемеОтВодителя = ВесЗапросаДанныхОПодъемеОтВодителя;
	Запись.НаименованиеЛатиницей = НаименованиеЛатиницей;
	Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Запись.ОперативнаяПриемка = ОперативнаяПриемка;
	Запись.ТипОперативнойПриемки = ТипОперативнойПриемки;
	Запись.УчетЗаказовПоМестам = УчетЗаказовПоМестам;
	Запись.УчетШКПоТоварам = УчетШКПоТоварам;
	Запись.УчетТоваровПоМестам = УчетТоваровПоМестам; //CeHbKA
	Запись.АгрегироватьДанныеВОтправляемыхОтчетах = АгрегироватьДанныеВОтправляемыхОтчетах;		
	Запись.ЭтоАгрегатор = ЭтоАгрегатор;	
	Запись.СпособыКонтроляДнейЗадолженности = СпособКонтроляДнейЗадолженности;
	Запись.КоличествоДнейДоПросрочкиДолга = КоличествоДнейДоПросрочкиДолга;
	Запись.Спецсчет = Спецсчет;
	Запись.ТипОтношенийСКлиентами = ТипОтношенийСКлиентами;
	Запись.ПечатьПредоплаченныхЧеков = ПечатьПредоплаченныхЧеков; //Тимур Ибрагимов 12.03.2019
	Запись.login_Strizh = StrizhLogin;
	Запись.password_Strizh = StrizhPassword;
	Запись.setiingId_Strizh = StrizhSetiingId;
	//+Степанов
	Запись.СкладскаяОбработкаОтсутствует = СкладскаяОбработкаОтсутствует;
	Запись.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто = АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто;
	//-Степанов
	//+Степанов Задача № 3905
	Запись.ИспользоватьКодИдентификацииКлиента = ИспользоватьКодИдентификацииКлиента;
	Запись.НазначениеКодаИдентификацииКлиентаИССтрижа = НазначениеКодаИдентификацииКлиентаИССтрижа;
	//-Степанов Задача № 3905
	
	//+Широков Задача 3905 01.09.2021
	УстановитьКодыИдентификацииДляПодчиненныхМагазинов(Объект.Ссылка);
	//-Широков Задача 3905 01.09.2021
	
	//+Степанов Задача № 3949
	Запись.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто = АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто;
	//-Степанов Задача № 3949
	
	//Поляков #3983 19.05.2020 ->
	Запись.НеСоздаватьМестаЗаказовПоПриходнымАПП = НеСоздаватьМестаЗаказовПоПриходнымАПП;
	//Поляков #3983 19.05.2020 <-
	//Асеев 07.09.2020 (Задача № 4197)>>>
	Запись.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП = ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
	//Асеев 07.09.2020 (Задача № 4197)<<<
	//Асеев 26.01.2021 (Задача № 4449)>>>
	Запись.ОдинаковыеШКНаВсехМестахЗаказа = ОдинаковыеШКНаВсехМестахЗаказа;
	//Асеев 26.01.2021 (Задача № 4449)<<<	
	//Асеев 20.08.2021 (Задача № 4645)>>>
	Запись.ОтключитьПроверкуБНЗаказов = ОтключитьПроверкуБНЗаказов;
	//Асеев 20.08.2021 (Задача № 4645)<<<
	//Асеев 28.02.2022 (Задача № 4749)>>>
	Запись.ТарифПримерки = ТарифПримерки;
	//Асеев 28.02.2022 (Задача № 4749)<<<
	//Асеев 29.03.2022 (Задача № 4767)>>>
	Запись.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail = ОтправкаСсылкиЛКПолучателяЗаказаНаEmail;
	//Асеев 29.03.2022 (Задача № 4767)<<<
	//Асеев 31.05.2022 (Задача № 4813)>>>
	Запись.ОтправкаСсылкиЛКПолучателяЗаказаSMS = ОтправкаСсылкиЛКПолучателяЗаказаSMS;
	Запись.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа = ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа;
	//Асеев 31.05.2022 (Задача № 4813)<<<
	//Асеев 18.08.2022 (Задача № 4873)>>>
	Запись.СопроводительныеДокументыНаходятсяВКоробке = СопроводительныеДокументыНаходятсяВКоробке;
	//Асеев 18.08.2022 (Задача № 4873)<<<
	//Асеев 30.08.2022 (Задача № 4883)>>>
	Запись.БезусловнаяПечатьБланковЗаказов = БезусловнаяПечатьБланковЗаказов;
	//Асеев 30.08.2022 (Задача № 4883)<<<
	//Асеев 28.11.2022 (Задача № 4935)>>>
	Запись.accessKey = StrizhAccessKey;
	//Асеев 28.11.2022 (Задача № 4935)<<<
	//Асеев 26.01.2023 (Задача № 4977)>>>
	Запись.ЛьготнаяКатегорияЭквайринга = ЛьготнаяКатегорияЭквайринга;
	//Асеев 26.01.2023 (Задача № 4977)<<<
	//Асеев 12.05.2023 (по письму Контроль заказов)>>>
	Запись.ПроизводитьРассылкуКонтроляЗаказов = ПроизводитьРассылкуКонтроляЗаказов;
	//Асеев 12.05.2023 (по письму Контроль заказов)<<<
	//Асеев 30.09.2024 (Задача № 5329)>>>
	Запись.ФормироватьАПП = ФормироватьАПП;
	Запись.ВремяФормированияАПП = ВремяФормированияАПП;
	//Асеев 30.09.2024 (Задача № 5329)<<<
	//Асеев 31.10.2024 (Задача № 5339)>>>
	Запись.ОператорРассылки = ОператорРассылки;
	//Асеев 31.10.2024 (Задача № 5339)<<<
	Попытка
		НаборЗаписей.Записать();
		//Сообщить("Внимание данный реквизит сохраняется сразу!!!")
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Геннадий 12.10.2020 ->
	НаборЗаписей = РегистрыСведений.РассылкаСМСПоКонтрагентам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Контрагент.Установить(Объект.Ссылка);
	Запись = НаборЗаписей.Добавить();
	Запись.Период = Период;
	Запись.Контрагент = Объект.Ссылка;
	Запись.ПроизводитьРассылку = ПроизводитьРассылкуСМС;
	Попытка
		НаборЗаписей.Записать();
		//Сообщить("Внимание данный реквизит сохраняется сразу!!!")
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//Геннадий 12.10.2020 <-
	
	ПараметрыПриИзмененииПодчиненныеМагазины();
	
КонецПроцедуры

//+Широков Задача 3905 01.09.2021
&НаСервере
Процедура УстановитьКодыИдентификацииДляПодчиненныхМагазинов(нКонтрагент)
	Попытка
		ЗапросПК = Новый Запрос;
		ЗапросПК.Текст = "ВЫБРАТЬ
		|	ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
		|	ПараметрыКонтрагентовСрезПоследних.НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
		|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Ссылка) КАК ПараметрыКонтрагентовСрезПоследних";
		
		ЗапросПК.УстановитьПараметр("Ссылка",нКонтрагент);
		ВыборкаПК = ЗапросПК.Выполнить().Выбрать();
		
		ЗапросТК = Новый Запрос;
		ЗапросТК.Текст = "ВЫБРАТЬ
		|	ТипыОплатТребованиеИдентификацииКлиентов.Партнер КАК Партнер,
		|	ТипыОплатТребованиеИдентификацииКлиентов.Учитывать КАК Учитывать,
		|	ТипыОплатТребованиеИдентификацииКлиентов.ТипОплаты КАК ТипОплаты,
		|	ТипыОплатТребованиеИдентификацииКлиентов.Период КАК Период
		|ИЗ
		|	РегистрСведений.ТипыОплатТребованиеИдентификацииКлиентов.СрезПоследних(, Партнер = &Ссылка) КАК ТипыОплатТребованиеИдентификацииКлиентов";
		
		ЗапросТК.УстановитьПараметр("Ссылка",нКонтрагент);
		ВыборкаТК = ЗапросТК.Выполнить().Выгрузить();
		
		Пока ВыборкаПК.Следующий() Цикл
			
			ЗапросВ = Новый Запрос;
			ЗапросВ.Текст = "ВЫБРАТЬ
			|	ПараметрыКонтрагентовСрезПоследних.Период КАК Период,
			|	ПараметрыКонтрагентовСрезПоследних.Контрагент.Код КАК Код,
			|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
			|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Ссылка,
			|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
			|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
			|	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
			|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
			|	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
			|	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
			|	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
			|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
			|	ПараметрыКонтрагентовСрезПоследних.ВесЗапросаДанныхОПодъемеОтВодителя КАК ВесЗапросаДанныхОПодъемеОтВодителя,
			|	ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей КАК НаименованиеЛатиницей,
			|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
			|	ПараметрыКонтрагентовСрезПоследних.ТипОперативнойПриемки КАК ТипОперативнойПриемки,
			|	ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам КАК УчетЗаказовПоМестам,
			|	ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам КАК УчетШКПоТоварам,
			|	ПараметрыКонтрагентовСрезПоследних.СкладскаяОбработкаОтсутствует КАК СкладскаяОбработкаОтсутствует,
			|	ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах КАК АгрегироватьДанныеВОтправляемыхОтчетах,
			|	ПараметрыКонтрагентовСрезПоследних.СвязкаНастройкиПечатиЧеков КАК СвязкаНастройкиПечатиЧеков,
			|	ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности КАК СпособыКонтроляДнейЗадолженности,
			|	ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
			|	ПараметрыКонтрагентовСрезПоследних.ЭтоАгрегатор КАК ЭтоАгрегатор,
			|	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет,
			|	ПараметрыКонтрагентовСрезПоследних.ТипОтношенийСКлиентами КАК ТипОтношенийСКлиентами,
			|	ПараметрыКонтрагентовСрезПоследних.setiingId_Strizh КАК setiingId_Strizh,
			|	ПараметрыКонтрагентовСрезПоследних.login_Strizh КАК login_Strizh,
			|	ПараметрыКонтрагентовСрезПоследних.password_Strizh КАК password_Strizh,
			|	ПараметрыКонтрагентовСрезПоследних.УчетТоваровПоМестам КАК УчетТоваровПоМестам,
			|	ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
			|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто КАК АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто,
			|	&ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
			|	&НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
			|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто КАК АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто,
			|	ПараметрыКонтрагентовСрезПоследних.НеСоздаватьМестаЗаказовПоПриходнымАПП КАК НеСоздаватьМестаЗаказовПоПриходнымАПП,
			|	ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП,
			|	ПараметрыКонтрагентовСрезПоследних.ОдинаковыеШКНаВсехМестахЗаказа КАК ОдинаковыеШКНаВсехМестахЗаказа,
			|	ПараметрыКонтрагентовСрезПоследних.Пользователь КАК Пользователь,
			//Асеев 29.03.2022 (Задача № 4767)>>>
			|	ПараметрыКонтрагентовСрезПоследних.ОтключитьПроверкуБНЗаказов КАК ОтключитьПроверкуБНЗаказов,
			|	ПараметрыКонтрагентовСрезПоследних.ТарифПримерки КАК ТарифПримерки,
			|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail КАК ОтправкаСсылкиЛКПолучателяЗаказаНаEmail,
			//Асеев 29.03.2022 (Задача № 4767)<<<
			//Асеев 31.05.2022 (Задача № 4813)>>>
			|	ПараметрыКонтрагентовСрезПоследних.ОтправкаСсылкиЛКПолучателяЗаказаSMS КАК ОтправкаСсылкиЛКПолучателяЗаказаSMS,
			|	ПараметрыКонтрагентовСрезПоследних.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа КАК ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа,
			//Асеев 31.05.2022 (Задача № 4813)<<<
			//Асеев 18.08.2022 (Задача № 4873)>>>
			|	ПараметрыКонтрагентовСрезПоследних.СопроводительныеДокументыНаходятсяВКоробке КАК СопроводительныеДокументыНаходятсяВКоробке,
			//Асеев 18.08.2022 (Задача № 4873)<<<
			//Асеев 30.08.2022 (Задача № 4883)>>>
			|	ПараметрыКонтрагентовСрезПоследних.БезусловнаяПечатьБланковЗаказов КАК БезусловнаяПечатьБланковЗаказов,
			//Асеев 30.08.2022 (Задача № 4883)<<<
			//Асеев 28.11.2022 (Задача № 4935)>>>
			|	ПараметрыКонтрагентовСрезПоследних.accessKey КАК accessKey,
			//Асеев 28.11.2022 (Задача № 4935)<<<
			//Асеев 26.01.2023 (Задача № 4977)>>>
			|	ПараметрыКонтрагентовСрезПоследних.ЛьготнаяКатегорияЭквайринга КАК ЛьготнаяКатегорияЭквайринга,
			//Асеев 26.01.2023 (Задача № 4977)<<<
			//Асеев 12.05.2023 (по письму Контроль заказов)>>>
			|	ПараметрыКонтрагентовСрезПоследних.ПроизводитьРассылкуКонтроляЗаказов КАК ПроизводитьРассылкуКонтроляЗаказов,
			//Асеев 12.05.2023 (по письму Контроль заказов)<<<
			//Асеев 30.09.2024 (Задача № 5329)>>>
			|	ПараметрыКонтрагентовСрезПоследних.ФормироватьАПП КАК ФормироватьАПП,
			|	ПараметрыКонтрагентовСрезПоследних.ВремяФормированияАПП КАК ВремяФормированияАПП,
			//Асеев 30.09.2024 (Задача № 5329)<<<
			//Асеев 31.10.2024 (Задача № 5339)>>>
			|	ПараметрыКонтрагентовСрезПоследних.ОператорРассылки КАК ОператорРассылки
			//Асеев 31.10.2024 (Задача № 5339)<<<
			|ИЗ
			|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент.Родитель.ОсновнойМагазин = &Ссылка) КАК ПараметрыКонтрагентовСрезПоследних";
			
			ЗапросВ.УстановитьПараметр("Ссылка",нКонтрагент);
			ЗапросВ.УстановитьПараметр("ИспользоватьКодИдентификацииКлиента",ВыборкаПК.ИспользоватьКодИдентификацииКлиента);
			ЗапросВ.УстановитьПараметр("НазначениеКодаИдентификацииКлиентаИССтрижа",ВыборкаПК.НазначениеКодаИдентификацииКлиентаИССтрижа);
			ВыборкаВ = ЗапросВ.Выполнить().Выбрать();
			Пока ВыборкаВ.Следующий() Цикл
				
				НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
				НаборПК.Отбор.Контрагент.Установить(ВыборкаВ.Ссылка);
				НаборПК.Прочитать();
				
				Если НаборПК.Выбран() Тогда
					ЗаполнитьЗначенияСвойств(НаборПК, ВыборкаВ);
					НаборПК.Записать();		
				КонецЕсли;
				
				//Аналогично по РС.ТипыОплатТребованиеИдентификацииКлиентов
				ТЗГоловной = ВыборкаТК.Скопировать();
				ТЗГоловной.ЗаполнитьЗначения(ВыборкаВ.Ссылка,"Партнер");
				ТЗГоловной.ЗаполнитьЗначения(ТекущаяДата(),"Период");
				НаборВТК = РегистрыСведений.ТипыОплатТребованиеИдентификацииКлиентов.СоздатьНаборЗаписей();
				НаборВТК.Отбор.Партнер.Установить(ВыборкаВ.Ссылка);
				НаборВТК.Прочитать();
				НаборВТК.Загрузить(ТЗГоловной);
				НаборВТК.Записать();
			КонецЦикла;
			
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры
//-Широков Задача 3905 01.09.2021

&НаСервере
Процедура ПараметрыПриИзмененииПодчиненныеМагазины()
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Родитель.ОсновнойМагазин = &Контрагент";
	Зап.УстановитьПараметр("Контрагент", Объект.Ссылка);	
	
	Рез = Зап.Выполнить().Выгрузить();
	
	Для Каждого Тек Из Рез Цикл
		
		Период = ТекущаяДата();
		НаборЗаписей = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.Контрагент.Установить(Тек.Контрагент);
		Запись = НаборЗаписей.Добавить();
		Запись.Период = Период;
		Запись.Контрагент = Тек.Контрагент;
		Запись.ЗапретЧастичногоВыкупа = ЗапретЧастичногоВыкупа;
		Запись.ЗапретСменыОплаты = ЗапретСменыОплаты;
		Запись.МетодОплатыПодъёма = МетодОплатыПодъёма;
		Запись.ПриёмИтогоСКлиента = ПриёмИтогоСКлиента;
		Запись.ВычисляемыйЗапретЧастичногоВыкупа = ВычисляемыйЗапретЧастичногоВыкупа;
		Запись.ПредварительноеЗакрытиеЗаказов = ПредварительноеЗакрытиеЗаказов;
		Запись.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной = ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной;
		Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Запись.ВесЗапросаДанныхОПодъемеОтВодителя = ВесЗапросаДанныхОПодъемеОтВодителя;
		Запись.ОперативнаяПриемка = ОперативнаяПриемка;		
		Запись.ТипОперативнойПриемки = ТипОперативнойПриемки;
		Запись.УчетЗаказовПоМестам = УчетЗаказовПоМестам;
		Запись.УчетШКПоТоварам = УчетШКПоТоварам;
		Запись.УчетТоваровПоМестам = УчетТоваровПоМестам; //CeHbKA
		Запись.ПечатьПредоплаченныхЧеков = ПечатьПредоплаченныхЧеков; //Тимур Ибрагимов 12.03.2019
		Запись.АгрегироватьДанныеВОтправляемыхОтчетах = АгрегироватьДанныеВОтправляемыхОтчетах;		
		Запись.ЭтоАгрегатор = ЭтоАгрегатор;		
		//+Степанов
		Запись.СкладскаяОбработкаОтсутствует = СкладскаяОбработкаОтсутствует;
		Запись.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто = АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто;
		//-Степанов
		//+Степанов Задача № 3905
		Запись.ИспользоватьКодИдентификацииКлиента = ИспользоватьКодИдентификацииКлиента;
		Запись.НазначениеКодаИдентификацииКлиентаИССтрижа = НазначениеКодаИдентификацииКлиентаИССтрижа;
		//-Степанов Задача № 3905
		//+Степанов Задача № 3949
		Запись.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто = АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто;
		//-Степанов Задача № 3949
		
		//Поляков #3983 19.05.2020 ->
		Запись.НеСоздаватьМестаЗаказовПоПриходнымАПП = НеСоздаватьМестаЗаказовПоПриходнымАПП;
		//Поляков #3983 19.05.2020 <-
		//Асеев 07.09.2020 (Задача № 4197)>>>
		Запись.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП = ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП;
		//Асеев 07.09.2020 (Задача № 4197)<<<
		//Асеев 26.01.2021 (Задача № 4449)>>>
		Запись.ОдинаковыеШКНаВсехМестахЗаказа = ОдинаковыеШКНаВсехМестахЗаказа;
		//Асеев 26.01.2021 (Задача № 4449)<<<		
		//Асеев 20.08.2021 (Задача № 4645)>>>
		Запись.ОтключитьПроверкуБНЗаказов = ОтключитьПроверкуБНЗаказов;
		//Асеев 20.08.2021 (Задача № 4645)<<<
		//Асеев 28.02.2022 (Задача № 4749)>>>
		Запись.ТарифПримерки = ТарифПримерки;
		//Асеев 28.02.2022 (Задача № 4749)<<<
		//Асеев 29.03.2022 (Задача № 4767)>>>
		Запись.ОтправкаСсылкиЛКПолучателяЗаказаНаEmail = ОтправкаСсылкиЛКПолучателяЗаказаНаEmail;
		//Асеев 29.03.2022 (Задача № 4767)<<<
		//Асеев 31.05.2022 (Задача № 4813)>>>
		Запись.ОтправкаСсылкиЛКПолучателяЗаказаSMS = ОтправкаСсылкиЛКПолучателяЗаказаSMS;
		Запись.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа = ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа;
		//Асеев 31.05.2022 (Задача № 4813)<<<
		//Асеев 18.08.2022 (Задача № 4873)>>>
		Запись.СопроводительныеДокументыНаходятсяВКоробке = СопроводительныеДокументыНаходятсяВКоробке;
		//Асеев 18.08.2022 (Задача № 4873)<<<
		//Асеев 30.08.2022 (Задача № 4883)>>>
		Запись.БезусловнаяПечатьБланковЗаказов = БезусловнаяПечатьБланковЗаказов;
		//Асеев 30.08.2022 (Задача № 4883)<<<
		//Асеев 28.11.2022 (Задача № 4935)>>>
        Запись.accessKey = StrizhAccessKey;
		//Асеев 28.11.2022 (Задача № 4935)<<<
		//Асеев 26.01.2023 (Задача № 4977)>>>
		Запись.ЛьготнаяКатегорияЭквайринга = ЛьготнаяКатегорияЭквайринга;
		//Асеев 26.01.2023 (Задача № 4977)<<<
		//Асеев 12.05.2023 (по письму Контроль заказов)>>>
		Запись.ПроизводитьРассылкуКонтроляЗаказов = ПроизводитьРассылкуКонтроляЗаказов;
		//Асеев 12.05.2023 (по письму Контроль заказов)<<<
		//Асеев 30.09.2024 (Задача № 5329)>>>
		Запись.ФормироватьАПП = ФормироватьАПП;
		Запись.ВремяФормированияАПП = ВремяФормированияАПП;
		//Асеев 30.09.2024 (Задача № 5329)<<<
		//Асеев 31.10.2024 (Задача № 5339)>>>
		Запись.ОператорРассылки = ОператорРассылки;
		//Асеев 31.10.2024 (Задача № 5339)<<<
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура МодифицированностьДополнительныхПараметровПриИзменении(Элемент)
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
КонецПроцедуры

//+Степанов Задача № 3905 
&НаКлиенте
Процедура ИспользоватьКодИдентификацииКлиентаПриИзменении(Элемент)
	МодифицированностьДопПараметров = Истина;
	Если Не ИспользоватьКодИдентификацииКлиента Тогда
		НазначениеКодаИдентификацииКлиентаИССтрижа = Ложь;
	КонецЕсли;	
	Элементы.НазначениеКодаИдентификацииКлиентаИССтрижа.Доступность = ИспользоватьКодИдентификацииКлиента;
	Элементы.ТипыОплатТребованиеИдентификацииКлиентов.Доступность = ИспользоватьКодИдентификацииКлиента;
КонецПроцедуры

&НаКлиенте
Процедура НазначениеКодаИдентификацииКлиентаИССтрижаПриИзменении(Элемент)
	МодифицированностьДопПараметров = Истина;
КонецПроцедуры
//-Степанов Задача № 3905
#КонецОбласти

#Область Рассылка

&НаСервере
Процедура грРассылкиПриСменеСтраницыНаСервере()
	
	ТекущаяСтраница = Элементы.грРассылки.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.Административная Тогда
		ТипРассылки = Перечисления.ТипыРассылки.АдминистративнаяРассылка;
	ИначеЕсли ТекущаяСтраница = Элементы.Бухгалтерская Тогда
		ТипРассылки = Перечисления.ТипыРассылки.БухгалтерскаяРассылка;
	ИначеЕсли ТекущаяСтраница = Элементы.Логистическая Тогда
		ТипРассылки = Перечисления.ТипыРассылки.ЛогистическаяРассылка;
	ИначеЕсли ТекущаяСтраница = Элементы.Складская Тогда
		ТипРассылки = Перечисления.ТипыРассылки.СкладскаяРассылка;
	ИначеЕсли ТекущаяСтраница = Элементы.Техническая Тогда
		ТипРассылки = Перечисления.ТипыРассылки.ТехническаяРассылка;
	ИначеЕсли ТекущаяСтраница = Элементы.Финансовая Тогда
		ТипРассылки = Перечисления.ТипыРассылки.ФинансоваяРассылка;
	ИначеЕсли ТекущаяСтраница = Элементы.ЗагрузкаЗаказов Тогда
		ТипРассылки = Перечисления.ТипыРассылки.ЗагрузкаЗаказов;
	ИначеЕсли ТекущаяСтраница = Элементы.ЗагрузкаАктовПриемаПередачи Тогда
		ТипРассылки = Перечисления.ТипыРассылки.ЗагрузкаАктовПриемаПередачи;
	ИначеЕсли ТекущаяСтраница = Элементы.ЗаборнаяЛогистика Тогда
		ТипРассылки = Перечисления.ТипыРассылки.ЗаборнаяЛогистика;
	ИначеЕсли ТекущаяСтраница = Элементы.КонтрольЗаказов Тогда
		ТипРассылки = Перечисления.ТипыРассылки.КонтрольЗаказов;
	Иначе
		ТипРассылки = Перечисления.ТипыРассылки.ПустаяСсылка();
	КонецЕсли;
	УстановитьОтборРассылки(ТипРассылки);
	
КонецПроцедуры

&НаКлиенте
Процедура грРассылкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	грРассылкиПриСменеСтраницыНаСервере();
КонецПроцедуры

// Якурнов 12.07.2018 15:31:22
&НаСервере
Процедура УстановитьОтборРассылки(ТипРассылки)
	
	Рассылка.Отбор.Элементы.Очистить();
	
	ЭлементОтбораРассылка = Рассылка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораРассылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); 
	ЭлементОтбораРассылка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораРассылка.Использование = Истина; 
	ЭлементОтбораРассылка.ПравоеЗначение = Объект.Ссылка;
	
	ЭлементОтбораРассылка = Рассылка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораРассылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипРассылки"); 
	ЭлементОтбораРассылка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораРассылка.Использование = Истина; 
	ЭлементОтбораРассылка.ПравоеЗначение = ТипРассылки;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСтраницРассылки()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РассылкиКонтрагентов.ТипРассылки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РассылкиКонтрагентов.Почта) КАК Кол
	|ИЗ
	|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
	|ГДЕ
	|	РассылкиКонтрагентов.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	РассылкиКонтрагентов.ТипРассылки";
	Зап.УстановитьПараметр("Контрагент", Объект.Ссылка);	
	Рез = Зап.Выполнить().Выгрузить();
	
	Для Каждого Тек Из Элементы.грРассылки.ПодчиненныеЭлементы Цикл
		Тек.Заголовок = Тек.Имя;
	КонецЦикла;	
	
	Для Каждого Тек Из Рез Цикл
		Страница = ПолучитьПанельРассылки(Тек.ТипРассылки);
		Страница.Заголовок = Страница.Заголовок + " (" + Строка(Тек.Кол) + ")";
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьПанельРассылки(Стр)
	Если Стр = Перечисления.ТипыРассылки.АдминистративнаяРассылка Тогда
		Возврат Элементы.Административная;
	ИначеЕсли Стр = Перечисления.ТипыРассылки.БухгалтерскаяРассылка Тогда
		Возврат Элементы.Бухгалтерская;	
	ИначеЕсли Стр = Перечисления.ТипыРассылки.ЛогистическаяРассылка Тогда
		Возврат Элементы.Логистическая;	
	ИначеЕсли Стр = Перечисления.ТипыРассылки.СкладскаяРассылка Тогда
		Возврат Элементы.Складская;	
	ИначеЕсли Стр = Перечисления.ТипыРассылки.ТехническаяРассылка Тогда
		Возврат Элементы.Техническая;	
	ИначеЕсли Стр = Перечисления.ТипыРассылки.ФинансоваяРассылка Тогда
		Возврат Элементы.Финансовая;			
	ИначеЕсли Стр = Перечисления.ТипыРассылки.ЗагрузкаЗаказов Тогда
		Возврат Элементы.ЗагрузкаЗаказов;		
	ИначеЕсли Стр = Перечисления.ТипыРассылки.ЗагрузкаАктовПриемаПередачи Тогда
		Возврат Элементы.ЗагрузкаАктовПриемаПередачи;							
	//Асеев 10.03.2022 (по письму Рассылка по проблемным заборам)>>>
	ИначеЕсли Стр = Перечисления.ТипыРассылки.ЗаборнаяЛогистика Тогда
		Возврат Элементы.ЗаборнаяЛогистика;
	//Асеев 10.03.2022 (по письму Рассылка по проблемным заборам)<<<
	ИначеЕсли Стр = Перечисления.ТипыРассылки.КонтрольЗаказов Тогда
		Возврат Элементы.КонтрольЗаказов;
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура Рассылка1ПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("СформироватьЗаголовокСтраницРассылкиНаКлиенте",1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокСтраницРассылкиНаКлиенте()
	СформироватьЗаголовокСтраницРассылки()
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПриОткрытииИПроверкаНаДоступностьШаблонаСМСРассылки()
	ЗаполнениеПриОткрытииШаблонаСМСРассылки();
	Элементы.ШаблонСМСРассылки.ТолькоПросмотр = НЕ РольДоступна("РедактированиеДанныхШаблоновСМСИнформирования");
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПриОткрытииШаблонаСМСРассылки()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШаблоныСМСРассылокПоКонтрагентамСрезПоследних.ШаблонРассылки КАК ШаблонРассылки
	|ИЗ
	|	РегистрСведений.ШаблоныСМСРассылокПоКонтрагентам.СрезПоследних КАК ШаблоныСМСРассылокПоКонтрагентамСрезПоследних
	|ГДЕ
	|	ШаблоныСМСРассылокПоКонтрагентамСрезПоследних.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент",Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() > 0 Тогда
		ШаблонСМСРассылки = Выборка[0].ШаблонРассылки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСМСРассылкиПриИзменении(Элемент)
	ШаблонСМСРассылкиПриИзмененииНаСервере()
КонецПроцедуры

#Область УправлениеПодчиненнымиАдресамиРассылки

&НаСервере
Процедура ШаблонСМСРассылкиПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Контрагент не записан. Сначала неодходимо записать");
		ШаблонСМСРассылки = Справочники.ШаблоныСМСРассылок.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	//Убираем Актуальность предыдуших шаблонов
	НаборЗаписей = РегистрыСведений.ШаблоныСМСРассылокПоКонтрагентам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Объект.Ссылка); 
	НаборЗаписей.Прочитать();
	Для Каждого Элем Из НаборЗаписей Цикл
		Элем.ШаблонАктуален = Ложь;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		
	КонецПопытки;
	
	//Записываем текущий шаблон
	ЗаписьШаблонСМСРассылок = РегистрыСведений.ШаблоныСМСРассылокПоКонтрагентам.СоздатьМенеджерЗаписи();
	ЗаписьШаблонСМСРассылок.Контрагент = Объект.Ссылка;
	ЗаписьШаблонСМСРассылок.Активность = Истина;
	ЗаписьШаблонСМСРассылок.Период = ТекущаяДата();
	ЗаписьШаблонСМСРассылок.ШаблонАктуален = Истина;
	ЗаписьШаблонСМСРассылок.ШаблонРассылки = ШаблонСМСРассылки;
	ЗаписьШаблонСМСРассылок.ТипСМСРассылки = ШаблонСМСРассылки.ТипСМСРассылки;
	ЗаписьШаблонСМСРассылок.Записать();
	
КонецПроцедуры

&НаСервере
Функция СписокПодчиненныхАдресовнаСервере(ТипРассылки, Почта)
	
	Возврат РегистрыСведений.РассылкиКонтрагентов.СписокПодчиненныхРассылокПоРодителю(объект.Ссылка, ТипРассылки, Почта);
	
КонецФункции	

&НаСервере
Процедура УдалитьПодчиненныеАдресаРассылки(ТипРассылки, Почта)
	
	РегистрыСведений.РассылкиКонтрагентов.УдалитьАдресаРассылокПодчиненныхКонтрагентов(Объект.Ссылка, ТипРассылки, Почта);
	
Конецпроцедуры	

&НаКлиенте
Процедура УдалениеАдресаРассылки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		 УдалитьПодчиненныеАдресаРассылки(ДополнительныеПараметры.ТипРассылки, ДополнительныеПараметры.Почта);
		 
	КонецЕсли;
	
КонецПроцедуры	


&НаКлиенте
Процедура Рассылка1ПослеУдаления(Элемент)
	
	Если Не УдаляемаяЗаписьРассылкиКонтрагента = Неопределено Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("УдалениеАдресаРассылки", ЭтотОбъект, Новый Структура("ТипРассылки, Почта", УдаляемаяЗаписьРассылкиКонтрагента.ТипРассылки, УдаляемаяЗаписьРассылкиКонтрагента.Почта)),
		"Удалить адреса рассылок подчиненных контрагентов (" + Строка(УдаляемаяЗаписьРассылкиКонтрагента.КоличествоЗаписей) + ")?",
		РежимДиалогаВопрос.ДаНет);
		
		УдаляемаяЗаписьРассылкиКонтрагента = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Рассылка1ПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Рассылка1.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ПодчиненныеАдреса  = СписокПодчиненныхАдресовнаСервере(ТекущиеДанные.ТипРассылки, ТекущиеДанные.Почта);	
		Если ПодчиненныеАдреса.Количество() > 0 Тогда
			
			УдаляемаяЗаписьРассылкиКонтрагента = Новый Структура("ТипРассылки, Почта, КоличествоЗаписей", ТекущиеДанные.ТипРассылки, ТекущиеДанные.Почта, ПодчиненныеАдреса.Количество());
			
		Конецесли;	
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область ЮрЛица

&НаСервере
Функция ПолучитьПеречисленияТипыЗаказов(Имя)
	Возврат Перечисления.ТипыЗаказов[Имя];
КонецФункции

&НаКлиенте
Процедура грЮрЛицаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "стрДоставка" Тогда
		УстановитьОтборЮрЛица(ПолучитьПеречисленияТипыЗаказов("Доставка"));
	ИначеЕсли ТекущаяСтраница.Имя = "стрСамовывоз" Тогда
		УстановитьОтборЮрЛица(ПолучитьПеречисленияТипыЗаказов("Самовывоз"));
	ИначеЕсли ТекущаяСтраница.Имя = "стрЗабор" Тогда
		УстановитьОтборЮрЛица(ПолучитьПеречисленияТипыЗаказов("Забор"));
	ИначеЕсли ТекущаяСтраница.Имя = "стрФрахт" Тогда
		УстановитьОтборЮрЛица(ПолучитьПеречисленияТипыЗаказов("Фрахт"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЮрЛица(ТипЗаказа)
	
	ЮрЛицаПоДоставке.Отбор.Элементы.Очистить();
	
	ЭлементОтбораРассылка = ЮрЛицаПоДоставке.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораРассылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); 
	ЭлементОтбораРассылка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораРассылка.Использование = Истина; 
	ЭлементОтбораРассылка.ПравоеЗначение = Объект.Ссылка;
	
	ЭлементОтбораРассылка = ЮрЛицаПоДоставке.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбораРассылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипДоставки"); 
	ЭлементОтбораРассылка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбораРассылка.Использование = Истина; 
	ЭлементОтбораРассылка.ПравоеЗначение = ТипЗаказа;
	
КонецПроцедуры


#КонецОбласти

#Область ККМ54ФЗ


// Якурнов 12.07.2018 17:27:03
&НаСервере
Процедура ПолучитьНастройкиПечатиЧековПоФЗ54()
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	ОргТерминал = may.ПолучитьОрганизациюИзРС(Объект.Ссылка,Справочники.ТипыОплат.Терминал);
	ОргНал = may.ПолучитьОрганизациюИзРС(Объект.Ссылка,Справочники.ТипыОплат.Наличные);
	//Геннадий #4257 21.09.2020 ->
	ОргСБП = may.ПолучитьОрганизациюИзРС(Объект.Ссылка, Справочники.ТипыОплат.СБП);
	//Геннадий #4257 21.09.2020 <-
КонецПроцедуры

&НаСервере
Процедура ЗаписьВРСНастройкиПечатиЧековПоФЗ54()
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОргТерминал <> may.ПолучитьОрганизациюИзРС(Объект.Ссылка,Справочники.ТипыОплат.Терминал) И НЕ ОргТерминал.Пустая() Тогда
		may.ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Объект.Ссылка,Справочники.ТипыОплат.Терминал,ОргТерминал);
		СписокКонтр = ПолучитьТаблицуПодчиненныхКонтрагентов();
		Для каждого Элем из СписокКонтр Цикл
			may.ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Элем.Ссылка,Справочники.ТипыОплат.Терминал,ОргТерминал);	
		КонецЦикла;
	КонецЕсли;
	
	Если ОргНал <> may.ПолучитьОрганизациюИзРС(Объект.Ссылка,Справочники.ТипыОплат.Наличные) И НЕ ОргНал.Пустая() Тогда
		may.ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Объект.Ссылка,Справочники.ТипыОплат.Наличные,ОргНал);
		may.ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Объект.Ссылка,Справочники.ТипыОплат.ВКредит,ОргНал);
		СписокКонтр = ПолучитьТаблицуПодчиненныхКонтрагентов();
		Для каждого Элем из СписокКонтр Цикл
			may.ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Элем.Ссылка,Справочники.ТипыОплат.Наличные,ОргНал);
			may.ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Элем.Ссылка,Справочники.ТипыОплат.ВКредит,ОргНал);
		КонецЦикла;
	КонецЕсли;	
	
	//Геннадий #4257 21.09.2020 ->
	Если ОргСБП <> may.ПолучитьОрганизациюИзРС(Объект.Ссылка, Справочники.ТипыОплат.СБП) И НЕ ОргСБП.Пустая() Тогда
		may.ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Объект.Ссылка, Справочники.ТипыОплат.СБП, ОргСБП);
		СписокКонтр = ПолучитьТаблицуПодчиненныхКонтрагентов();
		Для каждого Элем из СписокКонтр Цикл
			may.ЗаписьВРСНастройкиПечатиЧековПоФЗ54(Элем.Ссылка, Справочники.ТипыОплат.СБП, ОргСБП);	
		КонецЦикла;
	КонецЕсли;	
	//Геннадий #4257 21.09.2020 <-
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПодчиненныхКонтрагентов()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Родитель.ОсновнойМагазин = &ОсновнойМагазин";
	
	Запрос.УстановитьПараметр("ОсновнойМагазин", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();		
КонецФункции

&НаКлиенте
Процедура ОргНалПриИзменении(Элемент)
	ЗаписьВРСНастройкиПечатиЧековПоФЗ54();
КонецПроцедуры

&НаКлиенте
Процедура ОргТерминалПриИзменении(Элемент)
	ЗаписьВРСНастройкиПечатиЧековПоФЗ54();
КонецПроцедуры

//Геннадий #4257 21.09.2020 ->
&НаКлиенте
Процедура ОргСБППриИзменении(Элемент)
	ЗаписьВРСНастройкиПечатиЧековПоФЗ54();
КонецПроцедуры
//Геннадий #4257 21.09.2020 <-

#КонецОбласти

#Область ОбработкиДобавления

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформацию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбновлениеКонИнформацииПриЗакрытииФормыРегистра", ЭтотОбъект);
	Отбор = Новый Структура;
	Отбор.Вставить("Объект",Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",Отбор);
	
	ОткрытьФорму("РегистрСведений.КонтактнаяИнформация.Форма.ФормаРедактированияУпр", ПараметрыФормы,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеКонИнформацииПриЗакрытииФормыРегистра(Объект, Параметры) Экспорт
	ОбновлениеРеквизитовКонИнформации();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если МодифицированностьДопПараметров Тогда
		ДобавлениеИзменениеПараметровКонтрагента()
	КонецЕсли;
	//+Степанов Задача № 3943
	Если ИзменениеТиповОплатИдентификации Тогда
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Родитель.ОсновнойМагазин = &Контрагент";
		Зап.УстановитьПараметр("Контрагент", Объект.Ссылка);	
		
		СписокКонтрагентов = Зап.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
		СписокКонтрагентов.Добавить(Объект.Ссылка);
		
		Период = ТекущаяДата();
		Для Каждого Партнер Из СписокКонтрагентов Цикл
			Для Каждого СтрокаТЧ Из ТипыОплатТребованиеИдентификацииКлиентов Цикл
				НаборЗаписей = РегистрыСведений.ТипыОплатТребованиеИдентификацииКлиентов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(Период);
				НаборЗаписей.Отбор.Партнер.Установить(Партнер);
				НаборЗаписей.Отбор.ТипОплаты.Установить(СтрокаТЧ.ТипОплаты);
				Запись = НаборЗаписей.Добавить();
				Запись.Период = Период;
				Запись.Партнер = Партнер;
				Запись.ТипОплаты = СтрокаТЧ.ТипОплаты;
				Запись.Учитывать = СтрокаТЧ.Учитывать;
				НаборЗаписей.Записать();
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	
	//-Степанов Задача № 3943
	
	//Асеев 31.01.2023 (Задача № 4977)>>>
	ЛьготнаяКатегорияЭквайрингаДоИзменения = ЛьготнаяКатегорияЭквайринга;
	//Асеев 31.01.2023 (Задача № 4977)<<<

КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТребованиеИдентификацииКлиентовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТребованиеИдентификацииКлиентовПриИзменении(Элемент)
	ИзменениеТиповОплатИдентификации = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипыОплатТребованиеИдентификацииКлиентовТипОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипыОплатТребованиеИдентификацииКлиентов.НайтиСтроки(Новый Структура("ТипОплаты", ВыбранноеЗначение)).Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Выбранный тип оплаты уже указан в таблице типов оплат!");
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

//Асеев 07.09.2020 (Задача № 4197)>>>
&НаКлиенте
Процедура ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПППриИзменении(Элемент)
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
КонецПроцедуры
//Асеев 07.09.2020 (Задача № 4197)<<<

//Геннадий 12.10.2020 ->
&НаКлиенте
Процедура ПроизводитьРассылкуСМСПриИзменении(Элемент)
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
КонецПроцедуры
//Геннадий 12.10.2020 <-

//Асеев 26.01.2021 (Задача № 4449)>>>
&НаКлиенте
Процедура ОдинаковыеШКНаВсехМестахЗаказаПриИзменении(Элемент)
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
КонецПроцедуры
//Асеев 26.01.2021 (Задача № 4449)<<<

//Асеев 20.08.2021 (Задача № 4645)>>>
&НаКлиенте
Процедура ОтключитьПроверкуБНЗаказовПриИзменении(Элемент)
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
КонецПроцедуры
//Асеев 20.08.2021 (Задача № 4645)<<<

&НаСервереБезКонтекста
Функция ПолучитьВидОтчетаКонтрагента(Знач Владелец)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиАвтоматическойОтправкиОтчетов.Отчет КАК Отчет
	|ИЗ
	|	Справочник.НастройкиАвтоматическойОтправкиОтчетов КАК НастройкиАвтоматическойОтправкиОтчетов
	|ГДЕ
	|	НастройкиАвтоматическойОтправкиОтчетов.Владелец = &Владелец
	|	И НЕ НастройкиАвтоматическойОтправкиОтчетов.ПометкаУдаления
	|	И НастройкиАвтоматическойОтправкиОтчетов.Отчет <> ЗНАЧЕНИЕ(Перечисление.ВидыОтправляемыхОтчетов.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Отчет;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидОтчетаНастройки(Знач Настройка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка", Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиАвтоматическойОтправкиОтчетов.Отчет КАК Отчет
	|ИЗ
	|	Справочник.НастройкиАвтоматическойОтправкиОтчетов КАК НастройкиАвтоматическойОтправкиОтчетов
	|ГДЕ
	|	НастройкиАвтоматическойОтправкиОтчетов.Ссылка = &Настройка";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Отчет;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидОтчетаСправочник(Знач ВидОтчетаПеречисление)
	
	ИндексЗначенияПеречисления = Перечисления.ВидыОтправляемыхОтчетов.Индекс(ВидОтчетаПеречисление);
	ИмяЗначенияПеречисления = ВидОтчетаПеречисление.Метаданные().ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	Попытка
		ВидОтчетаСправочник = Справочники.ВидыОтправляемыхОтчетов[ИмяЗначенияПеречисления];
	Исключение
		ВидОтчетаСправочник = Неопределено;
	КонецПопытки;
	
	Возврат ВидОтчетаСправочник;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидОтчетаЛогаПоКонтрагенту(Знач Владелец)
	
	ВидОтчета = ПолучитьВидОтчетаКонтрагента(Владелец);
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ВидОтчета = ПолучитьВидОтчетаСправочник(ВидОтчета);
	КонецЕсли;
	
	Возврат ВидОтчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидОтчетаЛогаПоНастройке(Знач Настройка)
	
	ВидОтчета = ПолучитьВидОтчетаНастройки(Настройка);
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ВидОтчета = ПолучитьВидОтчетаСправочник(ВидОтчета);
	КонецЕсли;
	
	Возврат ВидОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЛогОтправкиОтчетовНажатие(Элемент)
	
	СтрокаНастройки = Элементы.АвтРассылкаОтчетов.ТекущаяСтрока;
	Если СтрокаНастройки <> Неопределено Тогда
		ВидОтчета = ПолучитьВидОтчетаЛогаПоНастройке(СтрокаНастройки);
	Иначе
		ВидОтчета = ПолучитьВидОтчетаЛогаПоКонтрагенту(Объект.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ПараметрыОткрытия = Новый Структура("ВидОтчета,Контрагент,ТипОтправкиОтчетов", ВидОтчета, Объект.Ссылка, ПредопределенноеЗначение("Справочник.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент"));
		
		ОткрытьФорму("ВнешнийИсточникДанных.ВнешнийЛог.Таблица.dbo_UnloadingReports.Форма.ФормаОтчета", ПараметрыОткрытия,, ВидОтчета);
	Иначе
		ПараметрыОткрытия = Новый Структура("Контрагент,ТипОтправкиОтчетов", Объект.Ссылка, ПредопределенноеЗначение("Справочник.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент"));
		
		ОткрытьФорму("ВнешнийИсточникДанных.ВнешнийЛог.Таблица.dbo_UnloadingReports.Форма.ФормаОтчета", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

//Асеев 28.02.2022 (Задача № 4749)>>>
&НаСервере
Процедура УстановитьОтборПоказателейТарифаПримерки()
	
	ИмяОтбора = "ТарифПримеркиКонтрагента";
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер83.СоздатьГруппуЭлементовОтбора(ПоказателиТарифаПримерки.Отбор.Элементы, ИмяОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер83.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "ТарифПримерки", ТарифПримерки, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТарифПримерки", ТарифПримерки);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления КАК зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления
	|ГДЕ
	|	зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.ТарифПримерки = &ТарифПримерки";
	
	Элементы.ПоказателиТарифаПримерки.ТолькоПросмотр = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТарифПримеркиНаСервере()
	
	Спр = Справочники.ТарифыПримерка.СоздатьЭлемент();
	Спр.Наименование = "Тариф примерки " + СокрЛП(Объект.Наименование) + " " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	Спр.ИнтернетМагазин = Объект.Ссылка;
	Спр.Записать();
	
	ТарифПримерки = Спр.Ссылка;
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
	УстановитьОтборПоказателейТарифаПримерки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаДобавленияТарифаПримерки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДобавитьТарифПримеркиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТарифПримерки(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Контрагент не записан");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаДобавленияТарифаПримерки", ЭтотОбъект), "Вы действительно хотите добавить новый тариф примерки?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ТарифПримеркиПриИзмененииНаСервере()
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	УстановитьОтборПоказателейТарифаПримерки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифПримеркиПриИзменении(Элемент)
	ТарифПримеркиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиТарифаПримеркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ТарифПримерки.Пустая() Тогда
		ПоказатьПредупреждение(, "Не выбран Тариф примерки");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ПоказателиТарифаПримерки.ФормаЗаписи", Новый Структура("ТарифПримерки", ТарифПримерки));
	
КонецПроцедуры
//Асеев 28.02.2022 (Задача № 4749)<<<

//Асеев 29.03.2022 (Задача № 4767)>>>
&НаКлиенте
Процедура ОтправкаСсылкиЛКПолучателяЗаказаНаEmailПриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры
//Асеев 29.03.2022 (Задача № 4767)<<<

//Асеев 31.05.2022 (Задача № 4813)>>>
&НаСервере
Процедура УстановитьДоступностьШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа()
	
	Элементы.ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа.Доступность = Не (ОтправкаСсылкиЛКПолучателяЗаказаSMS.Пустая() Или ОтправкаСсылкиЛКПолучателяЗаказаSMS = Перечисления.ВариантыОтправкиСсылокЛКПолучателейЗаказов.НеОптправлять);
	
КонецПроцедуры

&НаСервере
Процедура ОтправкаСсылкиЛКПолучателяЗаказаSMSПриИзмененииНаСервере()
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	УстановитьДоступностьШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаСсылкиЛКПолучателяЗаказаSMSПриИзменении(Элемент)
	
	ОтправкаСсылкиЛКПолучателяЗаказаSMSПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеНаСервере(Отказ)
	
	ТекстПредупреждения = "";
	
	Если Не (ОтправкаСсылкиЛКПолучателяЗаказаSMS.Пустая() Или ОтправкаСсылкиЛКПолучателяЗаказаSMS = Перечисления.ВариантыОтправкиСсылокЛКПолучателейЗаказов.НеОптправлять) Тогда
		Если ШаблонSMSОтправкиСсылкиЛКПолучателяЗаказа.Пустая() Тогда
			ТекстПредупреждения = "Не указан Шаблон SMS отправки ссылки ЛК получателя заказа";
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстПредупреждения <> "" Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ТекстПредупреждения = ПроверитьЗаполнениеНаСервере(Отказ);
	
	Если ТекстПредупреждения <> "" Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры
//Асеев 31.05.2022 (Задача № 4813)<<<

//Асеев 18.08.2022 (Задача № 4873)>>>
&НаКлиенте
Процедура СопроводительныеДокументыНаходятсяВКоробкеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры
//Асеев 18.08.2022 (Задача № 4873)<<<

//Асеев 30.08.2022 (Задача № 4883)>>>
&НаКлиенте
Процедура БезусловнаяПечатьБланковЗаказовПриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры
//Асеев 30.08.2022 (Задача № 4883)<<<

//Асеев 28.11.2022 (Задача № 4935)>>>
&НаКлиенте
Процедура StrizhAccessKeyПриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры
//Асеев 28.11.2022 (Задача № 4935)<<<

//Асеев 26.01.2023 (Задача № 4977)>>>
&НаКлиенте
Процедура ЛьготнаяКатегорияЭквайрингаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры
//Асеев 26.01.2022 (Задача № 4977)<<<

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Асеев 31.01.2023 (Задача № 4977)>>>
	Если ЛьготнаяКатегорияЭквайринга <> ЛьготнаяКатегорияЭквайрингаДоИзменения Тогда
		
		МассивУзлов = РаботаСМобильнымПриложениемЭкипажейСервер.ПолучитьМассивУзловМП();
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ТекущийОбъект.Ссылка);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты_Группа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (Контрагенты_Группа.ОсновнойМагазин = &Ссылка)
		|			И (Контрагенты.Родитель = Контрагенты_Группа.Ссылка)";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	//Асеев 31.01.2023 (Задача № 4977)<<<
	
КонецПроцедуры

//Асеев 12.05.2023 (по письму Контроль заказов)>>>
&НаКлиенте
Процедура ПроизводитьРассылкуКонтроляЗаказовПриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры
//Асеев 12.05.2023 (по письму Контроль заказов)<<<

//Асеев 30.09.2024 (Задача № 5329)>>>
&НаКлиенте
Процедура ФормироватьАПППриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	Элементы.ВремяФормированияАПП.ТолькоПросмотр = Не ФормироватьАПП;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяФормированияАПППриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры
//Асеев 30.09.2024 (Задача № 5329)<<<

//Асеев 31.10.2024 (Задача № 5339)>>>
&НаКлиенте
Процедура ОператорРассылкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьДопПараметров = Истина;
	
КонецПроцедуры
//Асеев 31.10.2024 (Задача № 5339)<<<
