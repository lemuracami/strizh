Перем мОснование;
Перем НовыйОбъект;

// Обработчик события ПриКопировании
//
Процедура ПриКопировании(ОбъектКопирования)

	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
		ЭтотОбъект.ОсновнойДоговорКонтрагента = Неопределено;
		ЭтотОбъект.ОсновнойБанковскийСчет     = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает результат запроса по справочнику контрагентов с заданным головным контрагентом
//
// Параметры:
//  ГоловнойКонтрагент - заданный головной контрагент
//
// Возвращаемое значение:
//  Результат - результат работы запроса
// 
Функция ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту(ГоловнойКонтрагент) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнойКонтрагент", ГоловнойКонтрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Организации") Тогда
		
		Наименование           = Основание.Наименование;
		ЮрФизЛицо              = Основание.ЮрФизЛицо;
		НаименованиеПолное     = Основание.НаименованиеПолное;
		ОсновнойБанковскийСчет = Основание.ОсновнойБанковскийСчет;
		ИНН                    = Основание.ИНН;
		КПП                    = Основание.КПП;
		КодПоОКПО              = Основание.КодПоОКПО;
		мОснование             = Основание;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ)
	Перем мСсылкаНового;
	
	Если НЕ ОбменДанными.Загрузка Тогда
		
		// Проверим основной вид деятельности контрагента
		Если ЗначениеЗаполнено(ОсновнойВидДеятельности) И ВидыДеятельности.Найти(ОсновнойВидДеятельности, "ВидДеятельности") = Неопределено Тогда
			ОсновнойВидДеятельности = Справочники.ВидыДеятельностиКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		НастройкаПравДоступа.ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель, мСсылкаНового);
		
		// установим головного контрагента если он не заполнен
		Если НЕ ЭтоГруппа Тогда
			Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
				Если ЭтоНовый() Тогда
					ГоловнойКонтрагент = мСсылкаНового;
				Иначе
					ГоловнойКонтрагент = Ссылка;
				КонецЕсли;
			КонецЕсли;
        КонецЕсли;
        //+++++Серегин М.В. 03.03.2016 14:18:12 
        Если ЭтоНовый() Тогда
            НовыйОбъект = Истина;		
        КонецЕсли;
		//-----Серегин М.В. 03.03.2016 14:18:13 
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если НЕ ОбменДанными.Загрузка Тогда
		
		Если ПринадлежитЭлементу(ПараметрыСеанса.ГруппаКонтрагентов_Принципалы) И Не ЭтоГруппа Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(РаботаСМобильнымПриложениемЭкипажейСервер.ПолучитьМассивУзловМП(), Ссылка);
		КонецеСли;	
		
		Если ЗначениеЗаполнено(ГоловнойКонтрагент) И ГоловнойКонтрагент <> Ссылка Тогда
			
			Если ЗначениеЗаполнено(ГоловнойКонтрагент.ГоловнойКонтрагент) И ГоловнойКонтрагент.ГоловнойКонтрагент <> ГоловнойКонтрагент Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Контрагент "+СокрЛП(ГоловнойКонтрагент)+" не может быть выбран головным, 
								|так как для него уже был назначен головной контрагент "+СокрЛП(ГоловнойКонтрагент.ГоловнойКонтрагент)+"!");
				Отказ = Истина;
				Возврат;
			Иначе
				
				// надо проверить, что если указываем головного контрагента, то этот элемент уже не был установлен
				// в качестве головного у другого контрагента.
				ВыборкаПоГоловномуКонтрагенту = ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту(Ссылка).Выбрать();
				Если ВыборкаПоГоловномуКонтрагенту.Количество() <> 0 Тогда
					
					СообщениеОНевозможностиЗаписи = "Контрагент "+СокрЛП(ЭтотОбъект)+" не может иметь головного контрагента!
													|Этот контрагент уже установлен головным для: ";
					Пока ВыборкаПоГоловномуКонтрагенту.Следующий() Цикл
						СообщениеОНевозможностиЗаписи = СообщениеОНевозможностиЗаписи + Символы.ПС + СокрЛП(ВыборкаПоГоловномуКонтрагенту.Контрагент);
					КонецЦикла;
					
					ОбщегоНазначения.СообщитьОбОшибке(СообщениеОНевозможностиЗаписи);
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(мОснование) Тогда
			НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Контрагент = Ссылка;
			ЗаписьРегистра.ВидСвязи   = Перечисления.ВидыСобственныхКонтрагентов.Организация;
			ЗаписьРегистра.Объект     = мОснование;
			НаборЗаписей.Записать(Ложь);
			мОснование = "";
		КонецЕсли;
		Если ЭтоНовый() Тогда
			НаборЗаписей = РегистрыСведений.ПечататьБланкиПоКонтрагентам.СоздатьНаборЗаписей();
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Контрагент = Ссылка;
			НаборЗаписей.Записать();
		КонецеСли;
		
		//Асеев 15.12.2022 (Задача № 4953)>>>
		ГруппаКомитенты = Справочники.Контрагенты.НайтиПоКоду("000000004");
		Если Родитель = ГруппаКомитенты Тогда
			РегистрироватьДляСервераСканирования = Истина;
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Комитенты", ГруппаКомитенты);
			Запрос.УстановитьПараметр("Родитель", Родитель);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ИСТИНА КАК Поле1
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка = &Родитель
			|	И Контрагенты.Родитель = &Комитенты";
			РегистрироватьДляСервераСканирования = Не Запрос.Выполнить().Пустой();
		КонецЕсли;
		Если РегистрироватьДляСервераСканирования Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(РаботаССервисомСканированияСервер.ПолучитьУзелОбменаССерверомСканированияПоКоду(), Ссылка);
		КонецЕсли;
		//Асеев 15.12.2022 (Задача № 4953)<<<
    КонецЕсли;
    
    //+++++Серегин М.В. 03.03.2016 13:42:01
    Если НовыйОбъект Тогда
        ДобавитьЗаписиРассылкиКонтрагентовПоРодителю(Родитель.ОсновнойМагазин,Ссылка);	
		СоздатьЗаписьВРСПараметрыКонтрагентов();
    КонецЕсли;
    //-----Серегин М.В. 03.03.2016 13:42:03 
	
	//+Широков Задача 3905 20.07.2021
		//+Широков Задача 3905 01.09.2021
		//ОбновитьЗаписьВРСПараметрыКонтрагентов();
		//-Широков Задача 3905 01.09.2021
	//-Широков Задача 3905 20.07.2021

КонецПроцедуры

//+Широков Задача 3905 20.07.2021
Процедура ОбновитьЗаписьВРСПараметрыКонтрагентов()
	//+Широков Задача 3905 01.09.2021
	//Попытка
	//	ЗапросПК = Новый Запрос;
	//	ЗапросПК.Текст = "ВЫБРАТЬ
	//	                 |	ПараметрыКонтрагентовСрезПоследних.ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
	//	                 |	ПараметрыКонтрагентовСрезПоследних.НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
	//	                 |	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент
	//	                 |ИЗ
	//	                 |	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Ссылка) КАК ПараметрыКонтрагентовСрезПоследних";
	//	
	//	ЗапросПК.УстановитьПараметр("Ссылка",Ссылка);
	//	ВыборкаПК = ЗапросПК.Выполнить().Выбрать();
	//	
	//	ЗапросТК = Новый Запрос;
	//	ЗапросТК.Текст = "ВЫБРАТЬ
	//	                 |	ТипыОплатТребованиеИдентификацииКлиентов.Партнер КАК Партнер,
	//	                 |	ТипыОплатТребованиеИдентификацииКлиентов.Учитывать КАК Учитывать,
	//	                 |	ТипыОплатТребованиеИдентификацииКлиентов.ТипОплаты КАК ТипОплаты,
	//	                 |	ТипыОплатТребованиеИдентификацииКлиентов.Период КАК Период
	//	                 |ИЗ
	//	                 |	РегистрСведений.ТипыОплатТребованиеИдентификацииКлиентов.СрезПоследних(, Партнер = &Ссылка) КАК ТипыОплатТребованиеИдентификацииКлиентов";
	//	
	//	ЗапросТК.УстановитьПараметр("Ссылка",Ссылка);
	//	ВыборкаТК = ЗапросТК.Выполнить().Выгрузить();
	//	
	//	Пока ВыборкаПК.Следующий() Цикл
	//		
	//		ЗапросВ = Новый Запрос;
	//		ЗапросВ.Текст = "ВЫБРАТЬ
	//		|	ПараметрыКонтрагентовСрезПоследних.Период КАК Период,
	//		|	ПараметрыКонтрагентовСрезПоследних.Контрагент.Код КАК Код,
	//		|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	//		|	ПараметрыКонтрагентовСрезПоследних.Контрагент КАК Ссылка,
	//		|	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа КАК ЗапретЧастичногоВыкупа,
	//		|	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты КАК ЗапретСменыОплаты,
	//		|	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара КАК ВремяОжиданияПриЗабореТовара,
	//		|	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа КАК ВычисляемыйЗапретЧастичногоВыкупа,
	//		|	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента КАК ПриёмИтогоСКлиента,
	//		|	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма КАК МетодОплатыПодъёма,
	//		|	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной КАК ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
	//		|	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов КАК ПредварительноеЗакрытиеЗаказов,
	//		|	ПараметрыКонтрагентовСрезПоследних.ВесЗапросаДанныхОПодъемеОтВодителя КАК ВесЗапросаДанныхОПодъемеОтВодителя,
	//		|	ПараметрыКонтрагентовСрезПоследних.НаименованиеЛатиницей КАК НаименованиеЛатиницей,
	//		|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка КАК ОперативнаяПриемка,
	//		|	ПараметрыКонтрагентовСрезПоследних.ТипОперативнойПриемки КАК ТипОперативнойПриемки,
	//		|	ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам КАК УчетЗаказовПоМестам,
	//		|	ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам КАК УчетШКПоТоварам,
	//		|	ПараметрыКонтрагентовСрезПоследних.СкладскаяОбработкаОтсутствует КАК СкладскаяОбработкаОтсутствует,
	//		|	ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах КАК АгрегироватьДанныеВОтправляемыхОтчетах,
	//		|	ПараметрыКонтрагентовСрезПоследних.СвязкаНастройкиПечатиЧеков КАК СвязкаНастройкиПечатиЧеков,
	//		|	ПараметрыКонтрагентовСрезПоследних.СпособыКонтроляДнейЗадолженности КАК СпособыКонтроляДнейЗадолженности,
	//		|	ПараметрыКонтрагентовСрезПоследних.КоличествоДнейДоПросрочкиДолга КАК КоличествоДнейДоПросрочкиДолга,
	//		|	ПараметрыКонтрагентовСрезПоследних.ЭтоАгрегатор КАК ЭтоАгрегатор,
	//		|	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет,
	//		|	ПараметрыКонтрагентовСрезПоследних.ТипОтношенийСКлиентами КАК ТипОтношенийСКлиентами,
	//		|	ПараметрыКонтрагентовСрезПоследних.setiingId_Strizh КАК setiingId_Strizh,
	//		|	ПараметрыКонтрагентовСрезПоследних.login_Strizh КАК login_Strizh,
	//		|	ПараметрыКонтрагентовСрезПоследних.password_Strizh КАК password_Strizh,
	//		|	ПараметрыКонтрагентовСрезПоследних.УчетТоваровПоМестам КАК УчетТоваровПоМестам,
	//		|	ПараметрыКонтрагентовСрезПоследних.ПечатьПредоплаченныхЧеков КАК ПечатьПредоплаченныхЧеков,
	//		|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто КАК АвтоматическоеИсключениеМестЗаказаПриПогрузкеВАвто,
	//		|	&ИспользоватьКодИдентификацииКлиента КАК ИспользоватьКодИдентификацииКлиента,
	//		|	&НазначениеКодаИдентификацииКлиентаИССтрижа КАК НазначениеКодаИдентификацииКлиентаИССтрижа,
	//		|	ПараметрыКонтрагентовСрезПоследних.АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто КАК АвтоматическоеИсключениеЧастичноПринятыхНаСкладЗаказовПриПогрузкеВАвто,
	//		|	ПараметрыКонтрагентовСрезПоследних.НеСоздаватьМестаЗаказовПоПриходнымАПП КАК НеСоздаватьМестаЗаказовПоПриходнымАПП,
	//		|	ПараметрыКонтрагентовСрезПоследних.ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП КАК ОбновлятьКоличествоМестЗаказовПриВыгрузкеАПП,
	//		|	ПараметрыКонтрагентовСрезПоследних.ОдинаковыеШКНаВсехМестахЗаказа КАК ОдинаковыеШКНаВсехМестахЗаказа,
	//		|	ПараметрыКонтрагентовСрезПоследних.Пользователь КАК Пользователь
	//		|ИЗ
	//		|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент.Родитель.ОсновнойМагазин = &Ссылка) КАК ПараметрыКонтрагентовСрезПоследних";
	//		
	//		ЗапросВ.УстановитьПараметр("Ссылка",Ссылка);
	//		ЗапросВ.УстановитьПараметр("ИспользоватьКодИдентификацииКлиента",ВыборкаПК.ИспользоватьКодИдентификацииКлиента);
	//		ЗапросВ.УстановитьПараметр("НазначениеКодаИдентификацииКлиентаИССтрижа",ВыборкаПК.НазначениеКодаИдентификацииКлиентаИССтрижа);
	//		ВыборкаВ = ЗапросВ.Выполнить().Выбрать();
	//		Пока ВыборкаВ.Следующий() Цикл
	//			
	//			НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
	//			НаборПК.Отбор.Контрагент.Установить(ВыборкаВ.Ссылка);
	//			НаборПК.Прочитать();
	//			
	//			Если НаборПК.Выбран() Тогда
	//				ЗаполнитьЗначенияСвойств(НаборПК, ВыборкаВ);
	//				НаборПК.Записать();		
	//			КонецЕсли;
	//			
	//			//Аналогично по РС.ТипыОплатТребованиеИдентификацииКлиентов
	//			ТЗГоловной = ВыборкаТК.Скопировать();
	//			ТЗГоловной.ЗаполнитьЗначения(ВыборкаВ.Ссылка,"Партнер");
	//			ТЗГоловной.ЗаполнитьЗначения(ТекущаяДата(),"Период");
	//			НаборВТК = РегистрыСведений.ТипыОплатТребованиеИдентификацииКлиентов.СоздатьНаборЗаписей();
	//			НаборВТК.Отбор.Партнер.Установить(ВыборкаВ.Ссылка);
	//			НаборВТК.Прочитать();
	//			НаборВТК.Загрузить(ТЗГоловной);
	//			НаборВТК.Записать();
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	//-Широков Задача 3905 01.09.2021
КонецПроцедуры
//-Широков Задача 3905 20.07.2021

//+++++Серегин М.В. 03.03.2016 12:31:34 
Процедура ДобавитьЗаписиРассылкиКонтрагентовПоРодителю(Родитель,Контрагент) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   РассылкиКонтрагентов.ТипРассылки,
    |   РассылкиКонтрагентов.Почта,
    |   РассылкиКонтрагентов.Активна
    |ИЗ
    |   РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
    |ГДЕ
    |   РассылкиКонтрагентов.Контрагент = &Родитель";
    
    Запрос.УстановитьПараметр("Родитель", Родитель);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        НаборЗаписей = РегистрыСведений.РассылкиКонтрагентов.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
        НаборЗаписей.Отбор.ТипРассылки.Установить(ВыборкаДетальныеЗаписи.ТипРассылки);
        НаборЗаписей.Отбор.Почта.Установить(ВыборкаДетальныеЗаписи.Почта);
        НаборЗаписей.Отбор.Активна.Установить(ВыборкаДетальныеЗаписи.Активна);
        Запись = НаборЗаписей.Добавить();
        ЗаполнитьЗначенияСвойств(Запись,ВыборкаДетальныеЗаписи);
        Запись.Контрагент = Контрагент;
        НаборЗаписей.Записать();
    КонецЦикла;

КонецПроцедуры
//-----Серегин М.В. 03.03.2016 12:31:37 

Процедура СоздатьЗаписьВРСПараметрыКонтрагентов()
	
	Набор = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
	Набор.Отбор.Контрагент.Установить(Ссылка);
	Набор.Прочитать();

	
	//Если НЕ Набор.Количество() Тогда		
	//	НЗапись = Набор.Добавить();
	//	НЗапись.Период = ТекущаяДата();
	//	НЗапись.Контрагент = Ссылка;
	//	Набор.Записать();	
	//КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Ссылка.Родитель.ОсновнойМагазин) Тогда
			
		ЗапросПК = Новый Запрос("ВЫБРАТЬ
		                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретЧастичногоВыкупа,
		                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретСменыОплаты,
		                        |	ПараметрыКонтрагентовСрезПоследних.ВремяОжиданияПриЗабореТовара,
		                        |	ПараметрыКонтрагентовСрезПоследних.ВычисляемыйЗапретЧастичногоВыкупа,
		                        |	ПараметрыКонтрагентовСрезПоследних.ПриёмИтогоСКлиента,
		                        |	ПараметрыКонтрагентовСрезПоследних.МетодОплатыПодъёма,
		                        |	ПараметрыКонтрагентовСрезПоследних.ЗапретУстановкиСуммыПодъемаВодителюБольшеВыставленной,
		                        |	ПараметрыКонтрагентовСрезПоследних.ПредварительноеЗакрытиеЗаказов,
								|	ПараметрыКонтрагентовСрезПоследних.ОперативнаяПриемка,
								|	ПараметрыКонтрагентовСрезПоследних.ТипОперативнойПриемки,
								|	ПараметрыКонтрагентовСрезПоследних.УчетЗаказовПоМестам,
								|	ПараметрыКонтрагентовСрезПоследних.УчетШКПоТоварам,		
								|	ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах,
		                        |	ПараметрыКонтрагентовСрезПоследних.ВесЗапросаДанныхОПодъемеОтВодителя
		                        |ИЗ
		                        |	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних");
		ЗапросПК.УстановитьПараметр("Контрагент", Ссылка.Родитель.ОсновнойМагазин.Ссылка);	
		РезПК = ЗапросПК.Выполнить().Выгрузить();
				
		НаборПК = РегистрыСведений.ПараметрыКонтрагентов.СоздатьНаборЗаписей();
		НаборПК.Отбор.Контрагент.Установить(Ссылка);
		НаборПК.Прочитать();
		
		Если НЕ Набор.Количество() И РезПК.Количество() Тогда
			НЗаписьПК = НаборПК.Добавить();					
			ЗаполнитьЗначенияСвойств(НЗаписьПК, РезПК[0]);
			НЗаписьПК.Период = ТекущаяДата();
			НЗаписьПК.Контрагент = Ссылка;
			НЗаписьПК.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			НаборПК.Записать();		
		КонецЕсли;
		
	КонецЕсли;	
	
	
КонецПроцедуры


НовыйОбъект = Ложь;