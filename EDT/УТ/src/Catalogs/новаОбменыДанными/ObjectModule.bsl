
Процедура ПриКопировании(ОбъектКопирования)
	УникальныйИдентификаторРегламентногоЗадания = Неопределено;    
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если Не ЗначениеЗаполнено(ТипОбмена) Тогда
#Если Клиент Тогда
		Предупреждение("Необходимо заполнить тип обмена");
#КонецЕсли		
		Отказ = Истина;
	    Возврат;
	КонецЕсли;
	
	ОбъектЗадания = Неопределено;
	Если ЗначениеЗаполнено(УникальныйИдентификаторРегламентногоЗадания) Тогда
		УИД = Новый УникальныйИдентификатор(УникальныйИдентификаторРегламентногоЗадания);
		ОбъектЗадания = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УИД);
	КонецЕсли;                                        
	                           
	Если ОбъектЗадания = Неопределено Тогда
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("новаИмпортДанных");
		ОбъектЗадания.Наименование = Наименование;
//		ОбъектЗадания.КоличествоПовторовПриАварийномЗавершении = 0;
	КонецЕсли;
	ОбъектЗадания.Использование = ВыполнятьПоРасписанию;
	//Передаем параметр (Код)
	Массив = Новый Массив();
	Массив.Добавить(Код);
	ОбъектЗадания.Параметры = Массив;
	ОбъектЗадания.Записать();
	УникальныйИдентификаторРегламентногоЗадания = ОбъектЗадания.УникальныйИдентификатор;
	
КонецПроцедуры

// Возвращает полный путь к файлу импорта для задачи импорта
//
// Параметры:
//  Задача <СправочникСсылка.новаЗадачаИмпортаДанных>
//
// Возвращаемое значение:
//  <Строка>: Полный путь к файлу импорта
//
Функция ПолучитьИмяФайлаДляЗадачи(Задача) Экспорт
	СтрокаТЧИменаФайлов = ИменаФайлов.Найти(Задача, "ЗадачаИмпорта");
	Если СтрокаТЧИменаФайлов = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат КаталогЗагрузки + "\" + СтрокаТЧИменаФайлов.ИмяФайла;
	КонецЕсли;
КонецФункции
