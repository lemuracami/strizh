//+++ БАО 27.09.2017 №1880

&НаСервереБезКонтекста
Функция ПреобразоватьБулианИзСтроки(Строка)
	
	Если Строка = "true" Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

Функция ПреобразоватьБулианВСтроку(Строка)
	
	Если Строка = Истина Тогда
		Возврат "true";
	Иначе 
		Возврат "false";
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПреобразоватьКЧислуИзСтроки(Строка)
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		
		Возврат Строка;
		
	КонецЕсли;	
	
	Результат = 0;
	
	Попытка
		Строка = СтрЗаменить(Строка, " ", "");
		Строка = СтрЗаменить(Строка, Символы.НПП , "");
		Строка = СтрЗаменить(Строка, "," , ".");

		Возврат Число(Формат(Строка, "ЧГ=0"))
	Исключение

	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьPostЗапрос(Терминал, Ресурс, СтрокаТекста = Неопределено, ДляИмпорта = Истина, ЭтоГет = Ложь);
	
	Если ДляИмпорта Тогда
		
		Если Не ЗначениеЗаполнено(Терминал.vr_АдресБоевогоСервера) Тогда
			Сервер = "prof.veeroute.com";
		Иначе
			Сервер = Терминал.vr_АдресБоевогоСервера;		
		КонецеСли;	
		
	Иначе 
		
		Если Не ОбщегоНазначенияПривелигированный.ЭтоТестоваяБД() Тогда
			Если Не ЗначениеЗаполнено(Терминал.vr_АдресБоевогоСервера) Тогда
				Сервер = "prof.veeroute.com";
			Иначе
				Сервер = Терминал.vr_АдресБоевогоСервера;
			КонецеСли;	
		Иначе
			Если Не ЗначениеЗаполнено(Терминал.vr_АдресТестовогоСервера) Тогда
				Сервер = "trial3.veeroute.com";
			Иначе
				Сервер = Терминал.vr_АдресТестовогоСервера;
			КонецеСли;			
		КонецеСли;	
		
	КонецЕсли;	
		
	
	ОбщийРесурс = "/rest/2/";
	РесурсНаСервере = ОбщийРесурс + Ресурс;
	
	Попытка
		Соединение = Новый HTTPСоединение(Сервер, , , , , 600);
	Исключение
		Сообщить("Не удалось установить соединение с сервером:" 
			+ Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	//Формируем заголовок POST-запроса.
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/xml");
	
	//Создаём файл отправки - содержимое POST-запроса. 
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("xml");
	Если СтрокаТекста = Неопределено Тогда
		Запрос = Новый HTTPЗапрос(РесурсНаСервере);
		Запрос.УстановитьТелоИзСтроки(""); 
	Иначе
		Запрос = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовокHTTP);
		Запрос.УстановитьТелоИзСтроки(СтрокаТекста, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать); 
	КонецеСли;	
	
    Если Не ЭтоГет Тогда
	
		Соединение.ОтправитьДляОбработки(Запрос, ИмяФайлаРезультата);
		
	Иначе 	
		
		Соединение.ВызватьHTTPМетод("GET", Запрос, ИмяФайлаРезультата);
		
	КонецЕсли;	
	
	Соединение = Неопределено;
	
	Т = Новый ТекстовыйДокумент;
	Т.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
	Стр_ = Т.ПолучитьТекст();
	Стр_ = СтрЗаменить(Стр_, """АвиаПарк""", "АвиаПарк");
	Стр_ = СтрЗаменить(Стр_, "&laquo", "&#1042");
	Стр_ = СтрЗаменить(Стр_, "&raquo", "&#1042");
	Стр_ = СтрЗаменить(Стр_, "&nbsp", "&#1042");
	
	Т.УстановитьТекст(Стр_);
	Т.Записать(ИмяФайлаРезультата);
	
	
	ФайлРезультата = Новый ЧтениеXML();
	ФайлРезультата.ОткрытьФайл(ИмяФайлаРезультата);
	Фабрика = Новый ФабрикаXDTO;
	Попытка
		Результат = Фабрика.ПрочитатьXML(ФайлРезультата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьСессию(Терминал, ДляИмпорта = Истина)
	
	Если ДляИмпорта Тогда 
		
		Если Не ЗначениеЗаполнено(Терминал.vr_АдресБоевогоСервера) тогда
			Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";
		Иначе                                                 
			Ресурс = "authentication/createSession?accountID=" + СокрЛП(Терминал.vr_АккаунтБоевогоСервера) + "&user=" + СокрЛП(Терминал.vr_БоевойСерверИмяПользователя) + "&password=" + СокрЛП(Терминал.vr_БоевойСерверПарольПользователя);
		КонецеСли;	
		
	Иначе
		
		Если Не ОбщегоНазначенияПривелигированный.ЭтоТестоваяБД() Тогда
			Если Не ЗначениеЗаполнено(Терминал.vr_АдресБоевогоСервера) тогда
				Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";
			Иначе                                                 //strizh
				Ресурс = "authentication/createSession?accountID=" + СокрЛП(Терминал.vr_АккаунтБоевогоСервера) + "&user=" + СокрЛП(Терминал.vr_БоевойСерверИмяПользователя) + "&password=" + СокрЛП(Терминал.vr_БоевойСерверПарольПользователя);
			КонецеСли;	
		Иначе 
			Если Не ЗначениеЗаполнено(Терминал.vr_АдресТестовогоСервера) тогда
				Ресурс = "authentication/createSession?accountID=strizh&user=strizh.admin&password=admin111";      //dzhigurda
			Иначе
				Ресурс = "authentication/createSession?accountID=" + СокрЛП(Терминал.vr_АккаунтТестовогоСервера) + "&user=" + СокрЛП(Терминал.vr_ТестовыйСерверИмяПользователя) + "&password=" + СокрЛП(Терминал.vr_ТестовыйСерверПарольПользователя);
			КонецеСли;	
		КонецеСли;	
		
	КонецЕсли;	
	
	ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал, Ресурс, ,ДляИмпорта);
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO") Тогда
		
		Сообщить("Некорректный ответ с сервера при получении сессии", СтатусСообщения.Важное);
		Возврат Неопределено;
		
	Иначе
		Возврат ПолученныйОбъект.authResponse.sessionID;
	КонецеСли
	
КонецФункции	

&НаКлиенте
Процедура ИмпортироватьМашиныНаСервере()
	
	Терминал = Справочники.РегиональныеТерминалы.Выбрать(); 
	
	Пока Терминал.Следующий() Цикл 
		
		ИДСессии = ПолучитьСессию(Терминал.Ссылка);
		
		Ресурс =  "distribution-api/objects/exportVehicles?sessionID=" + ИДСессии;
		ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал.Ссылка, Ресурс);
		
		Если ПолученныйОбъект <> Неопределено  Тогда
			
			Для Каждого Машина Из  ПолученныйОбъект.vehiclesDetails.vehicles.vehicle Цикл 
				
				Попытка
					
					ТранспортВероут = Справочники.ТипыТранспортовВероут.НайтиПоНаименованию(Машина.name);
					
					Если ТранспортВероут.Пустая() Тогда
						
						ТранспортВероутОбъект = Справочники.ТипыТранспортовВероут.СоздатьЭлемент();
						ТранспортВероутОбъект.Наименование = Машина.name;
						Сообщить("Создана машина " + Машина.name);
						
					Иначе 
						
						ТранспортВероутОбъект = ТранспортВероут.ПолучитьОбъект(); 
						ТранспортВероутОбъект.ПометкаУдаления = Ложь;
						ТранспортВероутОбъект.vehicleRequirements.Очистить();
						
					КонецЕсли;	
					
					ТранспортВероутОбъект.Владелец = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоРеквизиту("НаименованиеVeeroute",СокрЛП(Машина.areaOfControl),,Терминал.Ссылка);
					
					ТранспортВероутОбъект.id = Машина.id;
					ТранспортВероутОбъект.externalId = Машина.externalId;
					ТранспортВероутОбъект.active = ПреобразоватьБулианИзСтроки(Машина.active);
					ТранспортВероутОбъект.suspended = ПреобразоватьБулианИзСтроки(Машина.suspended);
					ТранспортВероутОбъект.costByDistance = ПреобразоватьКЧислуИзСтроки(Машина.costByDistance);
					ТранспортВероутОбъект.maxWeight = ПреобразоватьКЧислуИзСтроки(Машина.maxWeight);
					ТранспортВероутОбъект.maxVolume = ПреобразоватьКЧислуИзСтроки(Машина.maxVolume);
					ТранспортВероутОбъект.averageSpeed = ПреобразоватьКЧислуИзСтроки(Машина.averageSpeed);
					ТранспортВероутОбъект.color = Машина.color;
					ТранспортВероутОбъект.allowSpeedCorrectionFactor = ПреобразоватьБулианИзСтроки(Машина.allowSpeedCorrectionFactor);
					ТранспортВероутОбъект.areaOfControl = Машина.areaOfControl;
					
					
					Если  Машина.Свойства().получить("homeLocation") <> Неопределено И Машина.homeLocation.Свойства().получить("address") <> Неопределено Тогда
						
						ТранспортВероутОбъект.address = Машина.homeLocation.address;
						ТранспортВероутОбъект.latitude = ПреобразоватьКЧислуИзСтроки(Машина.homeLocation.latitude);
						ТранспортВероутОбъект.longitude = ПреобразоватьКЧислуИзСтроки(Машина.homeLocation.longitude);
						ТранспортВероутОбъект.homeLocationName = Машина.homeLocation.name;
						
					КонецЕсли;	
					
					
					Если  Машина.Свойства().получить("vehicleRequirements") <> Неопределено И Машина.vehicleRequirements.Свойства().получить("vehicleRequirement") <> Неопределено  Тогда
						
						Если ТипЗнч(Машина.vehicleRequirements.vehicleRequirement)  = Тип("СписокXDTO") Тогда
							
							Для Каждого  Требование Из Машина.vehicleRequirements.vehicleRequirement Цикл 
								
								СтрокаТребование =  ТранспортВероутОбъект.vehicleRequirements.Добавить();
								СтрокаТребование.name = Требование.name;
								СтрокаТребование.abbreviation = Требование.abbreviation;
								
							КонецЦикла;	
							
						ИначеЕсли ТипЗнч(Машина.vehicleRequirements.vehicleRequirement)  = Тип("ОбъектXDTO") Тогда
							
							СтрокаТребование =  ТранспортВероутОбъект.vehicleRequirements.Добавить();
							СтрокаТребование.name = Машина.vehicleRequirements.vehicleRequirement.name;
							СтрокаТребование.abbreviation = Машина.vehicleRequirements.vehicleRequirement.abbreviation;
							
						КонецЕсли;	
						
					КонецЕсли;	
					
					ТранспортВероутОбъект.Записать();
					
				Исключение
					
					Сообщить("Терминал " + Терминал + ". Ошибка создания/обновления машины " + Машина.name + ". " + ОписаниеОшибки());
					
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьМашины(Команда)
	ИмпортироватьМашиныНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьВодителейНаСервере()
	
	Терминал = Справочники.РегиональныеТерминалы.Выбрать(); 
	
	Пока Терминал.Следующий() Цикл 
		
		
		ИДСессии = ПолучитьСессию(Терминал.Ссылка, Ложь);
		
		Ресурс =  "distribution-api/objects/exportPerformers?sessionID=" + ИДСессии;
		ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал.Ссылка, Ресурс,,Ложь);
		
		Если ПолученныйОбъект <> Неопределено  Тогда
			
			Для Каждого Водитель Из ПолученныйОбъект.performersDetails.performers.performer Цикл 
				
				Попытка
					
					ВодительВероут = Справочники.ВодителиВероут.НайтиПоНаименованию(Водитель.name);
					
					Если ВодительВероут.Пустая() Тогда
						
						ВодительВероутОбъект = Справочники.ВодителиВероут.СоздатьЭлемент();
						ВодительВероутОбъект.Наименование = Водитель.name;
						Сообщить("Создан " + Водитель.name);
						
					Иначе 
						
						ВодительВероутОбъект = ВодительВероут.ПолучитьОбъект(); 
						ВодительВероутОбъект.ПометкаУдаления = Ложь;
						ВодительВероутОбъект.availabilities.Очистить();
						
					КонецЕсли;
					
					ВодительВероутОбъект.Владелец =  Справочники.РаспределительныеЦентрыVeeroute.НайтиПоРеквизиту("НаименованиеVeeroute",СокрЛП(Водитель.areaOfControl),,Терминал.Ссылка);
					
					ВодительВероутОбъект.globalId = Водитель.globalId;
					ВодительВероутОбъект.email = Водитель.email;
					ВодительВероутОбъект.login = Водитель.login;
					ВодительВероутОбъект.maxWorkingHours = Водитель.maxWorkingHours;
					ВодительВероутОбъект.allowedOvertimePerWeek = Водитель.allowedOvertimePerWeek;
					ВодительВероутОбъект.priceForOneHour = ПреобразоватьКЧислуИзСтроки(Водитель.priceForOneHour);
					ВодительВероутОбъект.allowDailyDrivingLimit = ПреобразоватьБулианИзСтроки(Водитель.allowDailyDrivingLimit);
					ВодительВероутОбъект.allowDailyWorkingLimit = ПреобразоватьБулианИзСтроки(Водитель.allowDailyWorkingLimit);
					ВодительВероутОбъект.allowRunTimeLimit = ПреобразоватьБулианИзСтроки(Водитель.allowRunTimeLimit);
					ВодительВероутОбъект.breakShift = ПреобразоватьКЧислуИзСтроки(Водитель.breakShift);
					ВодительВероутОбъект.areaOfControl = Водитель.areaOfControl;
					
					
					Если  Водитель.Свойства().получить("availabilities") <> Неопределено И Водитель.availabilities.Свойства().получить("availability") <> Неопределено  Тогда
						
						Если ТипЗнч(Водитель.availabilities.availability)  = Тип("СписокXDTO") Тогда
							
							Для Каждого  availability Из Водитель.availabilities.availability Цикл 
								
								Строка_availabilities =  ВодительВероутОбъект.availabilities.Добавить();
								Строка_availabilities.weekDay = availability.weekDay;
								Строка_availabilities.timefrom = availability.from;
								Строка_availabilities.to = availability.to;
								Строка_availabilities.fixedDayStart = ПреобразоватьБулианИзСтроки(availability.fixedDayStart);
								
							КонецЦикла;	
							
						ИначеЕсли ТипЗнч(Водитель.availabilities.availability)  = Тип("ОбъектXDTO") Тогда
							
							Строка_availabilities =  ВодительВероутОбъект.availabilities.Добавить();
							Строка_availabilities.weekDay = Водитель.availabilities.availability.weekDay;
							Строка_availabilities.from = Водитель.availabilities.availability.from;
							Строка_availabilities.to = Водитель.availabilities.availability.to;
							Строка_availabilities.fixedDayStart = ПреобразоватьБулианИзСтроки(Водитель.availabilities.availability.fixedDayStart);
							
						КонецЕсли;	
						
					КонецЕсли;	
					
					ВодительВероутОбъект.Записать();
					
					
				Исключение
					
					Сообщить("Терминал " + Терминал + ". Ошибка создания/обновления водителя " + Водитель.name + ". " + ОписаниеОшибки());
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьВодителей(Команда)
	ИмпортироватьВодителейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьСвязкиМашинИВодителейНаСервере()
	
	Терминал = Справочники.РегиональныеТерминалы.Выбрать(); 
	
	Пока Терминал.Следующий() Цикл 
		
		ИДСессии = ПолучитьСессию(Терминал.Ссылка);
		
		РаспредЦентрыТерминала = Справочники.РаспределительныеЦентрыVeeroute.Выбрать(,Терминал.Ссылка);
		
		Пока РаспредЦентрыТерминала.Следующий() Цикл 
			
			Если Не ОбщегоНазначенияПривелигированный.ЭтоТестоваяБД() Тогда
				Ресурс = "distribution-api/objects/getVehiclesByAoc?sessionID=" + ИДСессии + "&aocID=" + ?(Формат(РаспредЦентрыТерминала.КодVeeroute, "ЧН=0; ЧГ=") = 0, "825", Формат(РаспредЦентрыТерминала.КодVeeroute, "ЧН=0; ЧГ=")) + "&date=" + Формат(ТекущаяДата(), "ДЛФ=D");
			Иначе
				Ресурс = "distribution-api/objects/getVehiclesByAoc?sessionID=" + ИДСессии + "&aocID=" + ?(Формат(РаспредЦентрыТерминала.КодVeerouteТест, "ЧН=0; ЧГ=") = 0, "781", Формат(РаспредЦентрыТерминала.КодVeerouteТест, "ЧН=0; ЧГ=")) + "&date=" + Формат(ТекущаяДата(), "ДЛФ=D"); 
			КонецеСли;	
			
			ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал.Ссылка, Ресурс,,,Ложь);
			
			Если ПолученныйОбъект <> Неопределено  Тогда
				
				//Для Каждого Машина Из  ПолученныйОбъект.vehiclesDetails.vehicles.vehicle Цикл 
				//	
				//	Попытка
				//		
				//		
				//	Исключение
				//		
				//		Сообщить("Терминал " + Терминал + ". Ошибка создания/обновления связки машин " + Машина.name + ". " + ОписаниеОшибки());
				//		
				//		
				//	КонецПопытки;
				//	
				//КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьСвязкиМашинИВодителей(Команда)
	ИмпортироватьСвязкиМашинИВодителейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьМашиныНаСервере()
	
	Терминал = Справочники.РегиональныеТерминалы.Выбрать(); 
	
	Пока Терминал.Следующий() Цикл 
		
		Если Терминал.Ссылка <> Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			Продолжить;
		КонецеСли;	
		
		ИДСессии = ПолучитьСессию(Терминал.Ссылка, Ложь);
		
		Мас = Новый Массив;
		
		Тип_apiRequest = ФабрикаXDTO.Тип("http://veeroute.com/vehicle", "apiRequest");
		apiRequest = ФабрикаXDTO.Создать(Тип_apiRequest);
		
		Тип_vehiclesDetails = ФабрикаXDTO.Тип("http://veeroute.com/vehicle", "vehiclesDetails");
		vehiclesDetails = ФабрикаXDTO.Создать(Тип_vehiclesDetails);
		
		Тип_arrayOfVehicle = ФабрикаXDTO.Тип("http://veeroute.com/vehicle", "arrayOfVehicle");
		arrayOfVehicle = ФабрикаXDTO.Создать(Тип_arrayOfVehicle);
		
		Тип_vehicle = ФабрикаXDTO.Тип("http://veeroute.com/vehicle", "vehicle");
		Тип_homeLocation = ФабрикаXDTO.Тип("http://veeroute.com/vehicle", "homeLocation");
		Тип_ArrayvehicleRequirements = ФабрикаXDTO.Тип("http://veeroute.com/vehicle", "ArrayvehicleRequirements");
		Тип_vehicleRequirement = ФабрикаXDTO.Тип("http://veeroute.com/vehicle", "vehicleRequirement");
		
		Тип_homeLocation = ФабрикаXDTO.Тип("http://veeroute.com/vehicle", "homeLocation");

		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыТранспортовВероут.Ссылка КАК Ссылка,
		|	ТипыТранспортовВероут.Владелец.НаименованиеVeeroute КАК areaOfControl,
		|	ТипыТранспортовВероут.Родитель КАК Родитель,
		|	ТипыТранспортовВероут.Код КАК Код,
		|	ТипыТранспортовВероут.Наименование КАК name,
		|	ТипыТранспортовВероут.id КАК id,
		|	ТипыТранспортовВероут.externalID КАК externalID,
		|	ТипыТранспортовВероут.active КАК active,
		|	ТипыТранспортовВероут.suspended КАК suspended,
		|	ТипыТранспортовВероут.costByDistance КАК costByDistance,
		|	ТипыТранспортовВероут.maxWeight КАК maxWeight,
		|	ТипыТранспортовВероут.maxVolume КАК maxVolume,
		|	ТипыТранспортовВероут.averageSpeed КАК averageSpeed,
		|	ТипыТранспортовВероут.color КАК color,
		|	ТипыТранспортовВероут.allowSpeedCorrectionFactor КАК allowSpeedCorrectionFactor,
		|	ТипыТранспортовВероут.БазовыйТранспорт КАК БазовыйТранспорт,
		|	ТипыТранспортовВероут.homeLocationName КАК homeLocationName,
		|	ТипыТранспортовВероут.address КАК address,
		|	ТипыТранспортовВероут.latitude КАК latitude,
		|	ТипыТранспортовВероут.longitude КАК longitude,
		|	ТипыТранспортовВероут.vehicleRequirements.(
		|		name КАК name,
		|		abbreviation КАК abbreviation
		|	) КАК vehicleRequirementsТаблица
		|ИЗ
		|	Справочник.ТипыТранспортовВероут КАК ТипыТранспортовВероут
		|ГДЕ
		|	ТипыТранспортовВероут.ЭтоГруппа = ЛОЖЬ
		|	И ТипыТранспортовВероут.Владелец.НаименованиеVeeroute <> """"
		|	И ТипыТранспортовВероут.Владелец.Владелец = &Владелец
		|	И ТипыТранспортовВероут.Владелец.НаименованиеVeeroute <> ""Склад""
		|	И ТипыТранспортовВероут.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Владелец", Терминал.Ссылка);		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			vehicle = ФабрикаXDTO.Создать(Тип_vehicle);
			ЗаполнитьЗначенияСвойств(vehicle, ВыборкаДетальныеЗаписи);
			
			vehicle.costByDistance = ПреобразоватьКЧислуИзСтроки(ВыборкаДетальныеЗаписи.costByDistance);
			vehicle.maxWeight = ПреобразоватьКЧислуИзСтроки(ВыборкаДетальныеЗаписи.maxWeight);
			vehicle.maxVolume = ПреобразоватьКЧислуИзСтроки(ВыборкаДетальныеЗаписи.maxVolume);
			vehicle.averageSpeed = ПреобразоватьКЧислуИзСтроки(ВыборкаДетальныеЗаписи.averageSpeed);
			
			vehicle.color = СокрЛП(ВыборкаДетальныеЗаписи.color);
			
			homeLocation = ФабрикаXDTO.Создать(Тип_homeLocation); 
			homeLocation.name = ВыборкаДетальныеЗаписи.homeLocationName; 
			homeLocation.address = ВыборкаДетальныеЗаписи.homeLocationName; 
			homeLocation.latitude = ПреобразоватьКЧислуИзСтроки(ВыборкаДетальныеЗаписи.latitude);
			homeLocation.longitude = ПреобразоватьКЧислуИзСтроки(ВыборкаДетальныеЗаписи.longitude);
			vehicle.homeLocation = homeLocation;

			ArrayvehicleRequirements = ФабрикаXDTO.Создать(Тип_ArrayvehicleRequirements);
			
			Выборка_vehicleRequirementsТаблица  = ВыборкаДетальныеЗаписи.vehicleRequirementsТаблица.Выбрать();
			
			Пока Выборка_vehicleRequirementsТаблица.Следующий() Цикл 				
				
				vehicleRequirement = ФабрикаXDTO.Создать(Тип_vehicleRequirement);
				vehicleRequirement.name = Выборка_vehicleRequirementsТаблица.name;
				vehicleRequirement.abbreviation = Выборка_vehicleRequirementsТаблица.abbreviation;
				ArrayvehicleRequirements.vehicleRequirement.Добавить(vehicleRequirement);
				
			КонецЦикла;
			
			vehicle.vehicleRequirements = ArrayvehicleRequirements;
			
			arrayOfVehicle.vehicle.Добавить(vehicle);
			
		КонецЦикла;
		
		
		vehiclesDetails.vehicles = arrayOfVehicle;
		
		apiRequest.sessionID = ИДСессии;
		apiRequest.vehiclesDetails = vehiclesDetails;
		
		
		ЗаписьXML = Новый ЗаписьXML;	
		ЗаписьXML.УстановитьСтроку(); 
		ЗаписьXML.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, apiRequest);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		
		Ресурс = "distribution-api/objects/importVehicles";
		ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал.Ссылка, Ресурс, СтрокаXML, Ложь);
		
		Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO")  Тогда
			
			Сообщить("Терминал " + Терминал +  ". Некорректный ответ с сервера при создании транспорта " + Строка(ПолученныйОбъект), СтатусСообщения.Важное);
			
		Иначе
			
			Попытка
				
				Попытка
				
					Если ПолученныйОбъект.objects.ПолучитьСписок("updatedObject") = Неопределено Тогда
				
						Возврат;
					
					КонецЕсли;
					
				Исключение
					
					Возврат;
					
				КонецПопытки;	

				
				//Ошибка = ПолученныйОбъект.ПолучитьXDTO("error");
				//Сообщить("Терминал " + Терминал +  ". Возникла ошибка при создании транспорта. Код " + Ошибка.errorCode + ". Описание: " + Ошибка.errorMessage, СтатусСообщения.Важное);
				
				Для Каждого	СтрокаМашина Из ПолученныйОбъект.objects.updatedObject Цикл
					
					Если Не СтрокаМашина.Свойства().получить("errors") <> Неопределено Тогда
						Продолжить;
					КонецЕсли;	
					
					Если ТипЗнч(СтрокаМашина.errors.error) = Тип("ОбъектXDTO") Тогда
						Сообщить("Терминал " + Терминал.Ссылка + ". Машина " + СтрокаМашина.name +  ". Код " + СтрокаМашина.errors.error.errorCode  + ". Ошибка " + СтрокаМашина.errors.error.errorMessage);
					ИначеЕсли ТипЗнч(СтрокаМашина.errors.error) = Тип("СписокXDTO") Тогда
						
						Для Каждого СтрокаОшибки Из СтрокаМашина.errors.error Цикл 
							
							Сообщить("Терминал " + Терминал.Ссылка + ". Машина " + СтрокаМашина.name +  ". Код " + СтрокаОшибки.errorCode  + ". Ошибка " + СтрокаОшибки.errorMessage);
							
						КонецЦикла;	
						
					КонецЕсли;
					
				КонецЦикла;	
				
			Исключение
				
				Сообщить("Ошибка при обработке ответа сервера. Терминал " + Терминал.Ссылка);
				
			КонецПопытки;
			
		КонецеСли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьМашины(Команда)
	ЭкспортироватьМашиныНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьСписокРаспределительныхЦентровНаСервере()
	
	Терминал = Справочники.РегиональныеТерминалы.Выбрать(); 
	
	Пока Терминал.Следующий() Цикл 
		
		ИДСессии = ПолучитьСессию(Терминал, Ложь);
		
		Ресурс =  "distribution-api/objects/getAreaOfControls?sessionID=" + ИДСессии;
		ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал.Ссылка, Ресурс,, Ложь);
		
		Если ПолученныйОбъект <> Неопределено  Тогда
			
			Если ТипЗнч(ПолученныйОбъект.areaOfControlResponse.aocs.aoc) = Тип("ОбъектXDTO") Тогда
				
				Сообщить("Терминал " + Терминал + ". Центр " + ПолученныйОбъект.areaOfControlResponse.aocs.aoc.name + ". ИД " + ПолученныйОбъект.areaOfControlResponse.aocs.aoc.id);
				ДобавитьЦентр(Терминал.Ссылка, ПолученныйОбъект.areaOfControlResponse.aocs.aoc.name, ПолученныйОбъект.areaOfControlResponse.aocs.aoc.id);


			ИначеЕсли ТипЗнч(ПолученныйОбъект.areaOfControlResponse.aocs.aoc) = Тип("СписокXDTO") Тогда
				
				Для Каждого РаспредЦентр Из  ПолученныйОбъект.areaOfControlResponse.aocs.aoc Цикл 
					
					Сообщить("Терминал " + Терминал + ". Центр " + РаспредЦентр.name + ". ИД " + РаспредЦентр.id);
					
					ДобавитьЦентр(Терминал.Ссылка, РаспредЦентр.name, РаспредЦентр.id);
					
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДобавитьЦентр(Терминал, Имя, Код)
	
	Спр = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоРеквизиту("НаименованиеVeeroute", Имя, , Терминал);
	Если ЗначениеЗаполнено(Спр) Тогда
		СпрОбъект = Спр.ПолучитьОбъект();
	Иначе 
		СпрОбъект = Справочники.РаспределительныеЦентрыVeeroute.СоздатьЭлемент();
		СпрОбъект.Наименование = Имя;
		СпрОбъект.НаименованиеVeeroute = Имя;
		СпрОбъект.Владелец = Терминал;
	КонецЕсли;	
		
	СпрОбъект.КодVeeroute = Код;
	СпрОбъект.КодVeerouteТест = Код;
	
	СпрОбъект.Записать();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьСписокРаспределительныхЦентров(Команда)
	ИмпортироватьСписокРаспределительныхЦентровНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьВодителейНаСервере()
	
	
	Терминал = Справочники.РегиональныеТерминалы.Выбрать(); 
	
	Пока Терминал.Следующий() Цикл 
		Если Терминал.Ссылка <> Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			Продолжить;
		КонецеСли;	
		ИДСессии =   ПолучитьСессию(Терминал, Ложь);
		
		Тип_apiRequest = ФабрикаXDTO.Тип("http://veeroute.com/performer", "apiRequest");
		apiRequest = ФабрикаXDTO.Создать(Тип_apiRequest);
		
		Тип_performersDetails = ФабрикаXDTO.Тип("http://veeroute.com/performer", "performersDetails");
		performersDetails = ФабрикаXDTO.Создать(Тип_performersDetails);
		
		Тип_arrayOfPerformers = ФабрикаXDTO.Тип("http://veeroute.com/performer", "arrayOfPerformers");
		arrayOfPerformers = ФабрикаXDTO.Создать(Тип_arrayOfPerformers);
		
		Тип_performer = ФабрикаXDTO.Тип("http://veeroute.com/performer", "performer");
		Тип_homeLocation = ФабрикаXDTO.Тип("http://veeroute.com/performer", "homeLocation");
		Тип_startLocation = ФабрикаXDTO.Тип("http://veeroute.com/performer", "startLocation");
		Тип_ArrayOfAvailabilities = ФабрикаXDTO.Тип("http://veeroute.com/performer", "ArrayOfAvailabilities");
		Тип_availabilitie = ФабрикаXDTO.Тип("http://veeroute.com/performer", "availability");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВодителиВероут.Ссылка КАК Ссылка,
		|	ВодителиВероут.Владелец.НаименованиеVeeroute КАК areaOfControl,
		|	ВодителиВероут.Код КАК id,
		|	ВодителиВероут.Наименование КАК name,
		|	ВодителиВероут.globalId КАК globalId,
		|	ВодителиВероут.login КАК login,
		|	ВЫБОР
		|		КОГДА ВодителиВероут.email = """"
		|			ТОГДА ""email@email.com""
		|		ИНАЧЕ ВодителиВероут.email
		|	КОНЕЦ КАК email,
		|	ВодителиВероут.maxWorkingHours КАК maxWorkingHours,
		|	ВодителиВероут.allowedOvertimePerWeek КАК allowedOvertimePerWeek,
		|	ВодителиВероут.priceForOneHour КАК priceForOneHour,
		|	ВодителиВероут.allowDailyDrivingLimit КАК allowDailyDrivingLimit,
		|	ВодителиВероут.allowDailyWorkingLimit КАК allowDailyWorkingLimit,
		|	ВодителиВероут.allowRunTimeLimit КАК allowRunTimeLimit,
		|	ВодителиВероут.breakShift КАК breakShift,
		|	ВодителиВероут.availabilities.(
		|		weekDay КАК weekDay,
		|		timefrom КАК timefrom,
		|		to КАК to,
		|		fixedDayStart КАК fixedDayStart
		|	) КАК availabilities_выборка,
		|	""password"" КАК password
		|ИЗ
		|	Справочник.ВодителиВероут КАК ВодителиВероут
		|ГДЕ
		|	ВодителиВероут.Владелец.Владелец = &Владелец
		|	И ВодителиВероут.ПометкаУдаления = ЛОЖЬ
		|	И ВодителиВероут.Владелец.НаименованиеVeeroute <> ""Склад""";
		
		Запрос.УстановитьПараметр("Владелец", Терминал.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Сч = 1;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			performer = ФабрикаXDTO.Создать(Тип_performer);
			ЗаполнитьЗначенияСвойств(performer, ВыборкаДетальныеЗаписи);
			
			performer.email = Формат(ВыборкаДетальныеЗаписи.id, "ЧГ=") + "@gmail.com";
			//Формат(ВыборкаДетальныеЗаписи.id, "ЧГ=") + performer.email;
			
			ArrayOfAvailabilities = ФабрикаXDTO.Создать(Тип_ArrayOfAvailabilities);
			
			ВыборкаДоступности = ВыборкаДетальныеЗаписи.availabilities_выборка.Выбрать();
			
			Пока ВыборкаДоступности.Следующий() Цикл
				
				availabilitie = ФабрикаXDTO.Создать(Тип_availabilitie);
				availabilitie.weekDay = ВыборкаДоступности.weekDay;
				availabilitie.from = Формат(ВыборкаДоступности.timefrom,"ДФ=HH:mm");
				availabilitie.to = Формат(ВыборкаДоступности.to,"ДФ=HH:mm");
				availabilitie.fixedDayStart = ПреобразоватьБулианВСтроку(ВыборкаДоступности.fixedDayStart);
				
				ArrayOfAvailabilities.availability.Добавить(availabilitie);
				
			КонецЦикла;
			
			performer.availabilities = ArrayOfAvailabilities;
			arrayOfPerformers.performer.Добавить(performer);
			
			Сч = Сч + 1;
			
			Если Сч > 20 Тогда
				
				performersDetails.units =  ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://veeroute.com/performer", "unit"));
				performersDetails.performers = arrayOfPerformers;
				apiRequest.sessionID = ИДСессии;
				apiRequest.performersDetails = performersDetails;
				
				ЗаписьXML = Новый ЗаписьXML;	
				ЗаписьXML.УстановитьСтроку(); 
				ЗаписьXML.ЗаписатьОбъявлениеXML(); 
				
				ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, apiRequest);
				СтрокаXML = ЗаписьXML.Закрыть();
				
				Ресурс = "distribution-api/objects/importPerformers";
				
				ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал.Ссылка, Ресурс, СтрокаXML, Ложь);
				
				ОбработатьОшибкиЭкспортаВодителей(ПолученныйОбъект, Терминал);
				
				Тип_apiRequest = ФабрикаXDTO.Тип("http://veeroute.com/performer", "apiRequest");
				apiRequest = ФабрикаXDTO.Создать(Тип_apiRequest);
				
				Тип_performersDetails = ФабрикаXDTO.Тип("http://veeroute.com/performer", "performersDetails");
				performersDetails = ФабрикаXDTO.Создать(Тип_performersDetails);
				
				Тип_arrayOfPerformers = ФабрикаXDTO.Тип("http://veeroute.com/performer", "arrayOfPerformers");
				arrayOfPerformers = ФабрикаXDTO.Создать(Тип_arrayOfPerformers);
				
				Тип_performer = ФабрикаXDTO.Тип("http://veeroute.com/performer", "performer");
				Тип_homeLocation = ФабрикаXDTO.Тип("http://veeroute.com/performer", "homeLocation");
				Тип_startLocation = ФабрикаXDTO.Тип("http://veeroute.com/performer", "startLocation");
				Тип_ArrayOfAvailabilities = ФабрикаXDTO.Тип("http://veeroute.com/performer", "ArrayOfAvailabilities");
				Тип_availabilitie = ФабрикаXDTO.Тип("http://veeroute.com/performer", "availability");

				Сч = 1;
				Возврат;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Сч > 1 Тогда
			
			performersDetails.units =  ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://veeroute.com/performer", "unit"));
			performersDetails.performers = arrayOfPerformers;
			apiRequest.sessionID = ИДСессии;
			apiRequest.performersDetails = performersDetails;
			
			ЗаписьXML = Новый ЗаписьXML;	
			ЗаписьXML.УстановитьСтроку(); 
			ЗаписьXML.ЗаписатьОбъявлениеXML(); 
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, apiRequest);
			СтрокаXML = ЗаписьXML.Закрыть();
			
			Ресурс = "distribution-api/objects/importPerformers";
			
			ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал.Ссылка, Ресурс, СтрокаXML, Ложь);
			
			ОбработатьОшибкиЭкспортаВодителей(ПолученныйОбъект, Терминал);
				
		КонецЕсли;		
		

		
		//Если Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
		//	
		//	СтрокаXML = " <apiRequest>
		//	| <sessionID>577cd66330914c39b9658561fa2abd6d</sessionID>
		//	| <performersDetails>
		//	|      <units />
		//	|      <performers>
		//	|<performer name=""Тестовый водитель"" email=""driver277@gmail.com"" login=""gaz2771"" password=""123"" priceForOneHour=""100"" breakShift=""0"" areaOfControl=""Склад"">
		//	|            <availabilities>
		//	|             <availability weekDay=""thursday"" from=""09:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|                <availability weekDay=""wednesday"" from=""09:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|                </availabilities>
		//	|         </performer>
		//	| 
		//	|<performer name=""Водитель Наемник915"" email=""driver915@gmail.com"" login=""driver915"" password=""123"" priceForOneHour=""1"" breakShift=""0"" areaOfControl=""Склад"">
		//	|            <availabilities>
		//	|             <availability weekDay=""monday"" from=""08:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|             <availability weekDay=""thursday"" from=""08:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|                <availability weekDay=""wednesday"" from=""08:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|                <availability weekDay=""tuesday"" from=""08:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|                <availability weekDay=""friday"" from=""08:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|                <availability weekDay=""saturday"" from=""08:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|                <availability weekDay=""sunday"" from=""08:00"" to=""23:59"" fixedDayStart=""false""/>
		//	|            </availabilities>
		//	|         </performer>
		//	|      </performers>
		//	|   </performersDetails>
		//	|</apiRequest>";
		//	
		//	СтрокаXML = СтрЗаменить(СтрокаXML, "577cd66330914c39b9658561fa2abd6d",ИДСессии); 
		//	
		//КонецЕсли;
		
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкиЭкспортаВодителей(ПолученныйОбъект, Терминал)
	
	Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO")  Тогда
		
		Сообщить("Некорректный ответ с сервера при создании транспорта", СтатусСообщения.Важное);
		
		Возврат;
	Иначе
		Попытка
			
			Попытка
				
				Если ПолученныйОбъект.performers.ПолучитьСписок("performer") = Неопределено Тогда
					
					Возврат;
					
				КонецЕсли;
				
			Исключение
				
				Возврат;
				
			КонецПопытки;	
			
			
			
			Для Каждого	СтрокаВодителя Из ПолученныйОбъект.performers.performer Цикл
				
				Если СтрокаВодителя.Свойства().получить("errors") <> Неопределено Тогда
					Если ТипЗнч(СтрокаВодителя.errors.error) = Тип("ОбъектXDTO") Тогда
						Сообщить("Терминал " + Терминал.Ссылка + ". Водитель " + СтрокаВодителя.name +  ". Код " + СтрокаВодителя.errors.error.errorCode  + ". Ошибка " + СтрокаВодителя.errors.error.errorMessage);
					ИначеЕсли ТипЗнч(СтрокаВодителя.errors.error) = Тип("СписокXDTO") Тогда
						
						Для Каждого СтрокаОшибки Из СтрокаВодителя.errors.error Цикл 
							
							Сообщить("Терминал " + Терминал.Ссылка + ". Водитель " + СтрокаВодителя.name +  ". Код " + СтрокаОшибки.errorCode  + ". Ошибка " + СтрокаОшибки.errorMessage);
							
						КонецЦикла;	
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
			
		Исключение
			
			Сообщить("Ошибка при обработке ответа сервера. Терминал " + Терминал.Ссылка);
			
		КонецПопытки;
		
	КонецеСли	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЭкспортироватьВодителей(Команда)
	ЭкспортироватьВодителейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьСвязкиМашинИВодителейНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПривязкаМашинИВодителейВероутСрезПоследних.Период КАК Период,
	               |	ПривязкаМашинИВодителейВероутСрезПоследних.РаспределительныйЦентр КАК РаспределительныйЦентр,
	               |	ПривязкаМашинИВодителейВероутСрезПоследних.Транспорт КАК Транспорт,
	               |	ПривязкаМашинИВодителейВероутСрезПоследних.Водитель КАК Водитель,
	               |	ПривязкаМашинИВодителейВероутСрезПоследних.РаспределительныйЦентр.Владелец КАК Терминал,
	               |	ПривязкаМашинИВодителейВероутСрезПоследних.Транспорт.Наименование КАК ТранспортНаименование,
	               |	ПривязкаМашинИВодителейВероутСрезПоследних.Водитель.Наименование КАК ВодительНаименование
	               |ИЗ
	               |	РегистрСведений.ПривязкаМашинИВодителейВероут.СрезПоследних КАК ПривязкаМашинИВодителейВероутСрезПоследних
	               |ИТОГИ ПО
	               |	Терминал";
	
	ВыборкаТерминал = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТерминал.Следующий() Цикл
		Если ВыборкаТерминал.Терминал <> Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			Продолжить;
		КонецеСли;	
		Тип_apiRequest = ФабрикаXDTO.Тип("http://veeroute.com/assignPerformersToVehicles", "apiRequest");
		apiRequest = ФабрикаXDTO.Создать(Тип_apiRequest);
		
		Тип_allocationsDetails = ФабрикаXDTO.Тип("http://veeroute.com/assignPerformersToVehicles", "allocationsDetails");
		allocationsDetails = ФабрикаXDTO.Создать(Тип_allocationsDetails);
		
		Терминал = ВыборкаТерминал.Терминал; 
		
		ИДСессии =   ПолучитьСессию(Терминал, Ложь);
		Тип_allocations = ФабрикаXDTO.Тип("http://veeroute.com/assignPerformersToVehicles", "allocations");
		allocations = ФабрикаXDTO.Создать(Тип_allocations);
		
		ВыборкаДанные = ВыборкаТерминал.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДанные.Следующий() Цикл 
			
			Тип_allocation = ФабрикаXDTO.Тип("http://veeroute.com/assignPerformersToVehicles", "allocation");
			allocation = ФабрикаXDTO.Создать(Тип_allocation);
			
			allocation.performerName = ВыборкаДанные.ВодительНаименование;
			allocation.vehicleName = ВыборкаДанные.ТранспортНаименование;
			
			allocations.allocation.Добавить(allocation);
			
		КонецЦикла;
		
		allocationsDetails.allocations.Добавить(allocations);
		
		apiRequest.sessionID = ИДСессии;
		apiRequest.allocationsDetails = allocationsDetails; 
		
		ЗаписьXML = Новый ЗаписьXML;	
		ЗаписьXML.УстановитьСтроку(); 
		ЗаписьXML.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, apiRequest);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Ресурс = "distribution-api/objects/assignPerformersToVehicles";
		ПолученныйОбъект = ВыполнитьPostЗапрос(Терминал.Ссылка, Ресурс, СтрокаXML, Ложь);
		
		Если ТипЗнч(ПолученныйОбъект) <> Тип("ОбъектXDTO")  Тогда
		
				Сообщить("Некорректный ответ с сервера при создании транспорта", СтатусСообщения.Важное);
				
				Возврат;
		Иначе
			Попытка
				
				Попытка
				
					Если ПолученныйОбъект.objects.Получить("updatedObject") = Неопределено Тогда
				
						Возврат;
					
					КонецЕсли;
					
				Исключение
					
					Возврат;
					
				КонецПопытки;	
				
				
				
				Если ПолученныйОбъект.objects.updatedObject.Свойства().Получить("errors") = Неопределено Тогда
					
					Сообщить("Терминал " + Терминал + "Ошибка код " + ПолученныйОбъект.objects.updatedObject.errors.error.errorCode + " текст: " + ПолученныйОбъект.objects.updatedObject.errors.error.errorMessage);
					
				КонецЕсли;	
				
				
			Исключение
				
				Сообщить("Ошибка при обработке ответа сервера. Терминал " + Терминал.Ссылка);
				
			КонецПопытки;
			
		КонецеСли	

			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьСвязкиМашинИВодителей(Команда)
	ЭкспортироватьСвязкиМашинИВодителейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КлонироватьСправочникиВодителейИТраспорта(Команда)
	
	ОткрытьФорму("Справочник.РаспределительныеЦентрыVeeroute.Форма.ФормаКлонирования");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьПривязкиИзФайлаНаСервере(Адрес)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
    ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Если Истина Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ИмяВременногоФайла);
		Сч = 2;
		
		Владелец = Справочники.РаспределительныеЦентрыVeeroute.НайтиПоНаименованию("Склад", Истина,,Справочники.РегиональныеТерминалы.МоскваСтриж);
		
		Пока ТабДок.Область(Сч,11,Сч,11).Текст <> "" Цикл
			
			Транспорт = Справочники.ТипыТранспортовВероут.НайтиПоНаименованию(СокрЛП(ТабДок.Область(Сч,11,Сч,11).Текст), Истина,, Владелец);
			Водитель = Справочники.ВодителиВероут.НайтиПоНаименованию(СокрЛП(ТабДок.Область(Сч,13,Сч,13).Текст), Истина,, Владелец);
			
			
			
			Если Не ЗначениеЗаполнено(Транспорт) Тогда 
				
				Сообщить("Транспорт не найден " + СокрЛП(ТабДок.Область(Сч,11,Сч,11).Текст));
				Сч = Сч + 1;
				
				Продолжить;			
				
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(Водитель) Тогда
				
				Сообщить("Водитель не найден " + СокрЛП(ТабДок.Область(Сч,13,Сч,13).Текст));
				Сч = Сч + 1;
				
				Продолжить;
				
			КонецЕсли;	
			
			Сч = Сч + 1;
			
			
			МенеджерЗаписи = РегистрыСведений.ПривязкаМашинИВодителейВероут.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.РаспределительныйЦентр = Владелец;
			МенеджерЗаписи.Транспорт = Транспорт;
			МенеджерЗаписи.Водитель = Водитель;
			МенеджерЗаписи.Записать();
			
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьПривязкиИзФайла(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'xlsx'; en = 'xlsx'")
	+ "(*.xlsx)|*.xlsx";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			
			Адрес = "";
			
			Если ПоместитьФайл(Адрес,ИмяФайла,ИмяФайла,Ложь,ЭтаФорма.УникальныйИдентификатор) Тогда
				ИмпортироватьПривязкиИзФайлаНаСервере(Адрес);
			КонецЕсли;	
			
		КонецЦикла;
	Иначе
		Предупреждение(НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
	КонецЕсли;
	
КонецПроцедуры

//--- БАО 27.09.2017 №1880
