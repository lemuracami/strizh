
// Возвращает параметры пути к данным для загрузки
//
// Параметры:
//  Путь <Строка>
//
// Возвращаемое значение:
//  <Структура>
//
Функция ПолучитьПараметрыПути(Путь) Экспорт
	стрПуть = СтрЗаменить(Путь, ".", Символы.ПС);
	мдОбъект = Метаданные.НайтиПоПолномуИмени(СтрПолучитьСтроку(стрПуть, 1) + "." + СтрПолучитьСтроку(стрПуть, 2));
	Если мдОбъект = Неопределено Тогда
		Возврат Новый Структура("Тип, Представление, КраткоеПредставление", Неопределено, "", "");
	КонецЕсли;
	
	ПредставлениеОбъекта = мдОбъект.Представление();
	
	Если СтрЧислоСтрок(стрПуть) = 2 Тогда
		Возврат Новый Структура("Тип, Представление, КраткоеПредставление", Новый ОписаниеТипов(СтрЗаменить(Путь, ".", "Ссылка.")), ПредставлениеОбъекта, ПредставлениеОбъекта);
		
	ИначеЕсли СтрЧислоСтрок(стрПуть) = 3 Тогда
		Реквизит = СтрПолучитьСтроку(стрПуть, 3);
		мдРеквизит = мдОбъект.Реквизиты.Найти(Реквизит);
		
	Иначе
		Реквизит = "";
		мдТЧ = мдОбъект.ТабличныеЧасти.Найти(СтрПолучитьСтроку(стрПуть, 3));
		Если мдТЧ = Неопределено Тогда Возврат Новый Структура("Тип, Представление, КраткоеПредставление", Неопределено, "", ""); КонецЕсли;
		
		ПредставлениеОбъекта = ПредставлениеОбъекта + "." + мдТЧ.Представление();
		
		мдРеквизит = мдТЧ.Реквизиты.Найти(СтрПолучитьСтроку(стрПуть, 4));
	КонецЕсли;
	
	Если мдРеквизит = Неопределено Тогда
		Тип = Неопределено;
		Если Реквизит = "Номер" Тогда
			Если СокрЛП(мдОбъект.ТипНомера) = "Строка" Тогда
				Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(мдОбъект.ДлинаНомера));	
			ИначеЕсли СокрЛП(мдОбъект.ТипНомера) = "Число" Тогда
				Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(мдОбъект.ДлинаНомера, 0, ДопустимыйЗнак.Неотрицательный));
			КонецЕсли;
			
		ИначеЕсли Реквизит = "Дата" Тогда			
			Тип = Новый ОписаниеТипов("Дата");
			
		ИначеЕсли Реквизит = "Код" Тогда			
			Если СокрЛП(мдОбъект.ТипКода) = "Строка" Тогда
				Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(мдОбъект.ДлинаКода));	
			ИначеЕсли СокрЛП(мдОбъект.ТипКода) = "Число" Тогда
				Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(мдОбъект.ДлинаКода, 0, ДопустимыйЗнак.Неотрицательный));
			КонецЕсли;
			
		ИначеЕсли Реквизит = "Наименование" Тогда
			Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(мдОбъект.ДлинаНаименования));
			
		КонецЕсли;
		
		Возврат Новый Структура("Тип, Представление, КраткоеПредставление", Тип, ПредставлениеОбъекта + "." + Реквизит, Реквизит);
	Иначе
		Возврат Новый Структура("Тип, Представление, КраткоеПредставление", мдРеквизит.Тип, ПредставлениеОбъекта + "." + мдРеквизит.Представление(), мдРеквизит.Представление());
	КонецЕсли;
КонецФункции

// Возвращает строковое представление путей к данным
//
// Параметры:
//  Пути <Строка>
//
// Возвращаемое значение:
//  <Строка>
//
Функция ПолучитьПредставлениеПутей(Пути) Экспорт
	стрПути = СтрЗаменить(Пути, ",", Символы.ПС);
	Представление = "";
	Для ъ = 1 По СтрЧислоСтрок(стрПути) Цикл
		Путь = СокрЛП(СтрПолучитьСтроку(стрПути, ъ));
		
		Представление = Представление + ?(Представление = "", "", ", ") +
			ПолучитьПараметрыПути(Путь).Представление;
	КонецЦикла;
	
	Возврат Представление;	
КонецФункции

// Выполняет импорт данных
//
// Параметры:
//  стИмпортированныеДанные <Структура>
//  ИмяФайла                <Строка>
//
Процедура ВыполнитьИмпорт(стИмпортированныеДанные, ИмяФайла = Неопределено) Экспорт
	стДанныеИмпорта = ПолучитьДанныеИмпорта(ИмяФайла);
	тзДанныеИмпорта = стДанныеИмпорта.Данные;
	
	стИмпорт = СформироватьСтруктуруИмпорта(стДанныеИмпорта.СоставДанных);
	
	ъ = тзДанныеИмпорта.Количество();
	Для Каждого стрДанныеИмпорта Из тзДанныеИмпорта Цикл
#Если Клиент Тогда
		Состояние("Связывание " + Строка(ъ));
#КонецЕсли
		ъ = ъ - 1;
		
		//ОтброситьСтроку = Ложь;
		//Для Каждого Таблица Из стИмпорт.ПорядокИмпортаТаблиц Цикл
		//	СтруктураТаблицы = стИмпорт.Таблицы[Таблица];
		//	Для Каждого Поле Из СтруктураТаблицы.КлючевыеПоля Цикл
		//		Если СокрЛП(стрДанныеИмпорта[Поле.Ид]) = "" Тогда
		//			ОтброситьСтроку = Истина;
		//			Прервать;
		//		КонецЕсли;;
		//	КонецЦикла;
		//	Если ОтброситьСтроку Тогда Прервать; КонецЕсли;
		//КонецЦикла;
		//Если ОтброситьСтроку Тогда
		//	Сообщить("Не заполнены ключевые поля в строке " + Строка(стрДанныеИмпорта.ИдСтроки));
		//	Продолжить;
		//КонецЕсли;
		
		Для Каждого Таблица Из стИмпорт.ПорядокИмпортаТаблиц Цикл
			СтруктураТаблицы = стИмпорт.Таблицы[Таблица];
			
			ТаблицаДанных = стИмпортированныеДанные.Таблицы[СтруктураТаблицы.ПолноеИмяТаблицы];
			Если ТаблицаДанных = Неопределено Тогда
				ТаблицаДанных = Новый Структура("СтруктураТаблицы, Данные", СтруктураТаблицы, Новый ТаблицаЗначений);
				стИмпортированныеДанные.Таблицы.Вставить(СтруктураТаблицы.ПолноеИмяТаблицы, ТаблицаДанных);
				
				ТаблицаДанных.Данные.Колонки.Добавить("Ссылка");
				ТаблицаДанных.Данные.Колонки.Добавить("НовыйОбъект", Новый ОписаниеТипов("Булево"));
				
				Для Каждого Поле Из СтруктураТаблицы.КлючевыеПоля Цикл
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь, Поле.Тип, Поле.Представление);
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь + "_Ошибка", Новый ОписаниеТипов("Булево"));
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь + "_НеИмпортировать", Новый ОписаниеТипов("Булево"));
				КонецЦикла;
				
				Для Каждого Поле Из СтруктураТаблицы.СсылочныеКлючевыеПоля Цикл
					Если Поле.Путь = "Ссылка" Тогда Продолжить;	КонецЕсли;
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь, Поле.Тип, Поле.Представление);
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь + "_НеИмпортировать", Новый ОписаниеТипов("Булево"));
				КонецЦикла;
				
				Для Каждого Поле Из СтруктураТаблицы.Поля Цикл
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь, Поле.Тип, Поле.Представление);
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь + "_Ошибка", Новый ОписаниеТипов("Булево"));
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь + "_НеИмпортировать", Новый ОписаниеТипов("Булево"));
				КонецЦикла;
				
				Для Каждого Поле Из СтруктураТаблицы.СсылочныеПоля Цикл
					Если Поле.Путь = "Ссылка" Тогда Продолжить;	КонецЕсли;
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь, Поле.Тип, Поле.Представление);
					ТаблицаДанных.Данные.Колонки.Добавить(Поле.Путь + "_НеИмпортировать", Новый ОписаниеТипов("Булево"));
				КонецЦикла;
			КонецЕсли;
			
			стКлюч = Новый Структура;
			фПустойКлюч = Ложь;
			Для Каждого Поле Из СтруктураТаблицы.КлючевыеПоля Цикл
				Ключ = стрДанныеИмпорта[Поле.Ид];
				фПустойКлюч = фПустойКлюч Или Не ЗначениеЗаполнено(Ключ);
				стКлюч.Вставить(Поле.Путь, Ключ);
			КонецЦикла;
			Для Каждого Поле Из СтруктураТаблицы.СсылочныеКлючевыеПоля Цикл
				ТД = стИмпорт.Таблицы[Поле.Объект].ТекущиеДанные;
				Если ТД = Неопределено Тогда
					Ключ = Неопределено;	
				Иначе
					Ключ = ТД.Ссылка;
				КонецЕсли;
				фПустойКлюч = фПустойКлюч Или Не ЗначениеЗаполнено(Ключ);
				стКлюч.Вставить(Поле.Путь, Ключ);
			КонецЦикла;
			
			Если стКлюч.Количество() = 0 Тогда
				стрИмпортированныеДанные = ТаблицаДанных.Данные.Добавить();
				стрИмпортированныеДанные.НовыйОбъект = Истина;
				
			Иначе
				Если фПустойКлюч Тогда
					СтруктураТаблицы.ТекущиеДанные = Неопределено;
					Продолжить;
				КонецЕсли;
				
				Строки = ТаблицаДанных.Данные.НайтиСтроки(стКлюч);
				Если Строки.Количество() = 0 Тогда
					Запрос = Новый Запрос;
					Отбор = "";
					
					НомерПараметра = 0;
					Для Каждого ЭлКлюч Из стКлюч Цикл
						ПараметрКлюча = "Ключ" + СтрЗаменить(Строка(НомерПараметра), Символы.НПП, "");
						Отбор = Отбор + ?(Отбор = "", "", " И ") + ЭлКлюч.Ключ + " = &" + ПараметрКлюча;
						Запрос.УстановитьПараметр(ПараметрКлюча, ЭлКлюч.Значение);
						НомерПараметра = НомерПараметра + 1;
					КонецЦикла;
					
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	Ссылка
					|ИЗ
					|	" + ТаблицаДанных.СтруктураТаблицы.ПолноеИмяТаблицы + "
					|ГДЕ
					|	" + Отбор;
					
					стрИмпортированныеДанные = ТаблицаДанных.Данные.Добавить();
					
					Результат = Запрос.Выполнить();
					Если Результат.Пустой() Тогда
						стрИмпортированныеДанные.НовыйОбъект = Истина;
						стрИмпортированныеДанные.Ссылка = СтруктураТаблицы.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор());
					Иначе
						Выборка = Результат.Выбрать();
						Выборка.Следующий();
						стрИмпортированныеДанные.Ссылка = Выборка.Ссылка;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(стрИмпортированныеДанные, стКлюч);
				Иначе	
					стрИмпортированныеДанные = Строки[0];	
				КонецЕсли;
				
				Для Каждого Поле Из СтруктураТаблицы.КлючевыеПоля Цикл
					стрИмпортированныеДанные[Поле.Путь + "_Ошибка"] = стрДанныеИмпорта[Поле.Ид + "_Ошибка"];
				КонецЦикла;
			КонецЕсли;
			
			Если стрИмпортированныеДанные.НовыйОбъект Тогда
				Для Каждого Поле Из СтруктураТаблицы.Поля Цикл
					стрИмпортированныеДанные[Поле.Путь] = стрДанныеИмпорта[Поле.Ид];
					стрИмпортированныеДанные[Поле.Путь + "_Ошибка"] = стрДанныеИмпорта[Поле.Ид + "_Ошибка"];
				КонецЦикла;
			Иначе
				Для Каждого Поле Из СтруктураТаблицы.Поля Цикл
					Если СтруктураТаблицы.ТолькоНовыеПоля.Найти(Поле.Путь) <> Неопределено Тогда
						стрИмпортированныеДанные[Поле.Путь + "_НеИмпортировать"] = Истина;
					КонецЕсли;
					
					стрИмпортированныеДанные[Поле.Путь] = стрДанныеИмпорта[Поле.Ид];
					стрИмпортированныеДанные[Поле.Путь + "_Ошибка"] = стрДанныеИмпорта[Поле.Ид + "_Ошибка"];
				КонецЦикла;
			КонецЕсли;
			
			СтруктураТаблицы.ТекущиеДанные = стрИмпортированныеДанные;
		КонецЦикла;
		
		Для Каждого ЭлТаблица Из стИмпорт.Таблицы Цикл
			СтруктураТаблицы = ЭлТаблица.Значение;
			Если СтруктураТаблицы.ТекущиеДанные = Неопределено Тогда Продолжить; КонецЕсли;
			
			Для Каждого СсылочноеПоле Из СтруктураТаблицы.СсылочныеПоля Цикл
				ТД = стИмпорт.Таблицы[СсылочноеПоле.Объект].ТекущиеДанные;
				Если ТД = Неопределено Тогда
					СтруктураТаблицы.ТекущиеДанные[СсылочноеПоле.Путь] = Неопределено;	
				Иначе
					СтруктураТаблицы.ТекущиеДанные[СсылочноеПоле.Путь] = ТД.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДанныеИмпорта(ИмяФайла = Неопределено)
	Перем стрДанные;
	
	обФильтрИмпорта = Обработки[ФильтрИмпорта].Создать();
	обФильтрИмпорта.Задание = ЭтотОбъект;
	
	тзСоставДанныхИмпорта = Новый ТаблицаЗначений;
	тзСоставДанныхИмпорта.Колонки.Добавить("Ид");
	тзСоставДанныхИмпорта.Колонки.Добавить("Представление");
	
	Для Каждого стрСоставДанных Из СоставДанных Цикл
		Если ПустаяСтрока(стрСоставДанных.Ид) Тогда Продолжить; КонецЕсли;
		Если тзСоставДанныхИмпорта.Найти(стрСоставДанных.Ид, "Ид") <> Неопределено Тогда Продолжить; КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(тзСоставДанныхИмпорта.Добавить(), стрСоставДанных);
	КонецЦикла;
	
	тзИмпорт = обФильтрИмпорта.ПолучитьДанные(?(ИмяФайла = Неопределено, Образец, ИмяФайла), тзСоставДанныхИмпорта);
	
	тзСоставДанныхИмпорта = СоставДанных.Выгрузить();
	Для Каждого стрСоставДанных Из тзСоставДанныхИмпорта Цикл
		Если ПустаяСтрока(стрСоставДанных.Ид) Тогда
			стрСоставДанных.Ид = новаОбщиеПроцедуры.УИД();
			тзИмпорт.Колонки.Добавить(стрСоставДанных.Ид);
		КонецЕсли;
	КонецЦикла;
	
	мсКолонки = Новый Массив;
	Для Каждого Колонка Из тзИмпорт.Колонки Цикл мсКолонки.Добавить(Колонка); КонецЦикла;
	
	Для Каждого Колонка Из мсКолонки Цикл
		тзИмпорт.Колонки.Добавить(Колонка.Имя + "_Ошибка", Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	
	стДанныеМакросов = Новый Структура;
	ТекстМакроса = "";
	
	Для Каждого стрСоставДанных Из тзСоставДанныхИмпорта Цикл
		Описатель = стрСоставДанных.НастройкаИмпорта.Получить();
		Если Описатель = Неопределено Тогда Продолжить; КонецЕсли;
		
		стМакрос = ПолучитьМакросРазбораКолонки(Описатель);
		Если Описатель.ПоФормату Тогда
			Текст = стМакрос.Текст;
		Иначе
			Текст = Описатель.Макрос;
		КонецЕсли;
		
		Если Описатель.Преобразование.Свойство("ПоУмолчанию") Тогда
			ЗначениеПоУмолчанию = Описатель.Преобразование.ПоУмолчанию;
		Иначе
			ЗначениеПоУмолчанию = Неопределено;
		КонецЕсли;
		
		стДанныеМакросов.Вставить(стрСоставДанных.Ид, Новый Структура("Параметры, ЗначениеПоУмолчанию", стМакрос.Параметры, ЗначениеПоУмолчанию));
		
		ТекстМакроса = ТекстМакроса + "
		|Параметры = стДанныеМакросов." + стрСоставДанных.Ид + ".Параметры;
		|ЗначениеПоУмолчанию = стДанныеМакросов." + стрСоставДанных.Ид + ".ЗначениеПоУмолчанию;
		|Значение = стрДанные." + стрСоставДанных.Ид + ";
		|Попытка
		|" + Текст + "
		|	стрДанные." + стрСоставДанных.Ид + " = Значение;
		|Исключение
		|	стрДанные." + стрСоставДанных.Ид + "_Ошибка = Истина;
		|	стрДанные." + стрСоставДанных.Ид + " = ЗначениеПоУмолчанию;
		|КонецПопытки;";
	КонецЦикла;
	
	ТекстМакроса1 = "соОшибочныеСтроки = Новый Соответствие;
	|Для Каждого стрДанные Из тзИмпорт Цикл";
#Если Клиент Тогда	
	ТекстМакроса1 = ТекстМакроса1 + "
	|Состояние(""Преобразование "" + Строка(СчетчикПреобразования));";
#КонецЕсли	
	ТекстМакроса1 = ТекстМакроса1 + "
	|ИсключитьСтроку = Ложь;
	|СчетчикПреобразования = СчетчикПреобразования - 1;
	|" + ТекстМакроса + "
	|Если ИсключитьСтроку Тогда
	|	соОшибочныеСтроки.Вставить(стрДанные); 
	|КонецЕсли;
	|КонецЦикла;
	|
	|Для Каждого ЭлОшибочнаяСтрока Из соОшибочныеСтроки Цикл
	|	тзИмпорт.Удалить(ЭлОшибочнаяСтрока.Ключ);
	|КонецЦикла;
	|соОшибочныеСтроки = Неопределено;";
	ТекстМакроса = ТекстМакроса1;
	
	СчетчикПреобразования = тзИмпорт.Количество();
	Выполнить(ТекстМакроса);
	
	Возврат Новый Структура("СоставДанных, Данные", тзСоставДанныхИмпорта, тзИмпорт);
КонецФункции

Функция СформироватьСтруктуруИмпорта(СоставДанныхИмпорта)
	соСтруктураИмпорта = Новый Соответствие;
	
//	мсПутиКСсылкам = Новый Массив;
	
	Для Каждого стрИмпорт Из СоставДанныхИмпорта Цикл
		Описатель = стрИмпорт.НастройкаИмпорта.Получить();
		Если Описатель = Неопределено Тогда Продолжить; КонецЕсли;
		Если Не ЗначениеЗаполнено(Описатель.ПутьКДанным) Тогда Продолжить; КонецЕсли;
		
		//Если Описатель.ПутьКСсылке <> Неопределено Тогда
		//	мсПутиКСсылкам.Добавить(Описатель.ПутьКСсылке);
		//КонецЕсли;
		
		стрПутиКДанным = СтрЗаменить(Описатель.ПутьКДанным, ",", Символы.ПС);
		Для ъ = 1 По СтрЧислоСтрок(стрПутиКДанным) Цикл
			ПутьКДанным = СокрЛП(СтрПолучитьСтроку(стрПутиКДанным, ъ));
			стрПутьКДанным = СтрЗаменить(ПутьКДанным, ".", Символы.ПС);
			ПараметрыПоля = ПолучитьПараметрыПути(ПутьКДанным);
			
			Объект = СтрПолучитьСтроку(стрПутьКДанным, 1) + "." + СтрПолучитьСтроку(стрПутьКДанным, 2);
			Если СтрЧислоСтрок(стрПутьКДанным) = 3 Тогда
				ПолноеИмяТаблицы = СтрПолучитьСтроку(стрПутьКДанным, 1) + "." + СтрПолучитьСтроку(стрПутьКДанным, 2);
				Поле = Новый Структура("Ид, Путь, Тип, Представление", стрИмпорт.Ид, СтрПолучитьСтроку(стрПутьКДанным, 3), ПараметрыПоля.Тип, ПараметрыПоля.КраткоеПредставление);
				ВидТаблицы = "Объект";
				ПредставлениеТаблицы = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТаблицы).Представление();
			Иначе
				ПолноеИмяТаблицы = СтрПолучитьСтроку(стрПутьКДанным, 1) + "." + СтрПолучитьСтроку(стрПутьКДанным, 2) + "." + СтрПолучитьСтроку(стрПутьКДанным, 3);
				Поле = Новый Структура("Ид, Путь, Тип, Представление", стрИмпорт.Ид, СтрПолучитьСтроку(стрПутьКДанным, 4), ПараметрыПоля.Тип, ПараметрыПоля.КраткоеПредставление);
				ВидТаблицы = "ТабличнаяЧасть";
				ПредставлениеТаблицы = Метаданные.НайтиПоПолномуИмени(СтрПолучитьСтроку(стрПутьКДанным, 1) + "." + СтрПолучитьСтроку(стрПутьКДанным, 2)).ТабличныеЧасти.Найти(СтрПолучитьСтроку(стрПутьКДанным, 3)).Представление();
			КонецЕсли;
		
			Таблица = соСтруктураИмпорта[ПолноеИмяТаблицы];
			Если Таблица = Неопределено Тогда
				Если Лев(Объект, 3) = "Спр" Тогда
					Менеджер = Справочники;
				ИначеЕсли Лев(Объект, 3) = "Док" Тогда
					Менеджер = Документы;
				ИначеЕсли Лев(Объект, 3) = "Биз" Тогда
					Менеджер = БизнесПроцессы;
				КонецЕсли;
				Менеджер = Менеджер[СтрПолучитьСтроку(стрПутьКДанным, 2)];
				
				Таблица = Новый Структура("Объект, ПолноеИмяТаблицы, ПредставлениеТаблицы, ВидТаблицы, Менеджер, КлючевыеПоля, СсылочныеКлючевыеПоля, Поля, СсылочныеПоля, ПутьКСсылке, ТекущиеДанные, ТолькоНовыеПоля, Обработчики",
					Объект,
					ПолноеИмяТаблицы,
					ПредставлениеТаблицы,
					ВидТаблицы,
					Менеджер,
					Новый Массив,
					Новый Массив,
					Новый Массив,
					Новый Массив,
					Неопределено, //Описатель.ПутьКСсылке,
					Неопределено,
					Новый Массив,
					Новый Структура);
				соСтруктураИмпорта.Вставить(ПолноеИмяТаблицы, Таблица);
			КонецЕсли;
		
			Если КлючевыеПоля.Найти(ПутьКДанным, "Поле") = Неопределено Тогда
				Таблица.Поля.Добавить(Поле);
			Иначе
				Таблица.КлючевыеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Для Каждого стрСсылочныеПоля Из СсылочныеПоля Цикл
		Если ПустаяСтрока(стрСсылочныеПоля.Поля) Тогда Продолжить; КонецЕсли;
		стрПутиКСсылкам = СтрЗаменить(стрСсылочныеПоля.Поля, ",", Символы.ПС);
		Для ъ = 1 По СтрЧислоСтрок(стрПутиКСсылкам) Цикл
			ПараметрыПоля = ПолучитьПараметрыПути(СокрЛП(СтрПолучитьСтроку(стрПутиКСсылкам, ъ)));
			стрПутьКСсылке = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(стрПутиКСсылкам, ъ)), ".", Символы.ПС);
			Если СтрЧислоСтрок(стрПутьКСсылке) > 3 Тогда
				Объект = СтрПолучитьСтроку(стрПутьКСсылке, 1) + "." + СтрПолучитьСтроку(стрПутьКСсылке, 2);
				ПолноеИмяТаблицы = СтрПолучитьСтроку(стрПутьКСсылке, 1) + "." + СтрПолучитьСтроку(стрПутьКСсылке, 2) + "." + СтрПолучитьСтроку(стрПутьКСсылке, 3);
				Поле = Новый Структура("Объект, Путь, Тип, Представление", стрСсылочныеПоля.Объект, СтрПолучитьСтроку(стрПутьКСсылке, 4), ПараметрыПоля.Тип, ПараметрыПоля.КраткоеПредставление);
				
				Таблица = соСтруктураИмпорта[ПолноеИмяТаблицы];
				Если Таблица = Неопределено Тогда
					Таблица = Новый Структура("Объект, ПолноеИмяТаблицы, ПредставлениеТаблицы, ВидТаблицы, Менеджер, КлючевыеПоля, СсылочныеКлючевыеПоля, Поля, СсылочныеПоля, ПутьКСсылке, ТекущиеДанные, ТолькоНовыеПоля, Обработчики",
						Объект,
						ПолноеИмяТаблицы,
						Метаданные.НайтиПоПолномуИмени(СтрПолучитьСтроку(стрПутьКСсылке, 1) + "." + СтрПолучитьСтроку(стрПутьКСсылке, 2)).ТабличныеЧасти.Найти(СтрПолучитьСтроку(стрПутьКСсылке, 3)).Представление(),
						"ТабличнаяЧасть",
						Неопределено,
						Новый Массив,
						Новый Массив,
						Новый Массив,
						Новый Массив,
						Неопределено,
						Неопределено,
						Новый Массив,
						Новый Структура);
						
					соСтруктураИмпорта.Вставить(ПолноеИмяТаблицы, Таблица);
				КонецЕсли;
				
				Таблица.СсылочныеПоля.Добавить(Поле);
			Иначе
				Объект = СтрПолучитьСтроку(стрПутьКСсылке, 1) + "." + СтрПолучитьСтроку(стрПутьКСсылке, 2);
				Поле = Новый Структура("Объект, Путь, Тип, Представление", стрСсылочныеПоля.Объект, СтрПолучитьСтроку(стрПутьКСсылке, 3), ПараметрыПоля.Тип, ПараметрыПоля.КраткоеПредставление);
				
				Таблица = соСтруктураИмпорта[Объект];
				Если Таблица = Неопределено Тогда Продолжить; КонецЕсли;
				
				Если КлючевыеПоля.Найти(Объект + "." + Поле.Путь, "Поле") = Неопределено Тогда
					Таблица.СсылочныеПоля.Добавить(Поле);
				Иначе
					Таблица.СсылочныеКлючевыеПоля.Добавить(Поле);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого стрТолькоНовыеПоля Из ИмпортируемыеТолькоНовыеПоля Цикл
		Если ПустаяСтрока(стрТолькоНовыеПоля.Поле) Тогда Продолжить; КонецЕсли;
		стрТолькоНовыеПути = СтрЗаменить(стрТолькоНовыеПоля.Поле, ",", Символы.ПС);
		Для ъ = 1 По СтрЧислоСтрок(стрТолькоНовыеПути) Цикл
			стрТолькоНовыйПуть = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(стрТолькоНовыеПути, ъ)), ".", Символы.ПС);
			
			Объект = СтрПолучитьСтроку(стрТолькоНовыйПуть, 1) + "." + СтрПолучитьСтроку(стрТолькоНовыйПуть, 2);
			Таблица = соСтруктураИмпорта[Объект];
			Если Таблица = Неопределено Тогда Продолжить; КонецЕсли;
			
			Таблица.ТолькоНовыеПоля.Добавить(СтрПолучитьСтроку(стрТолькоНовыйПуть, 3));
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлТаблица Из соСтруктураИмпорта Цикл
		Если ЭлТаблица.Значение.ВидТаблицы <> "ТабличнаяЧасть" Тогда Продолжить; КонецЕсли;
		
		ПараметрыПоля = ПолучитьПараметрыПути(ЭлТаблица.Значение.Объект);
		ЭлТаблица.Значение.СсылочныеПоля.Добавить(Новый Структура("Объект, Путь, Тип, Представление", ЭлТаблица.Значение.Объект, "Ссылка", ПараметрыПоля.Тип, ПараметрыПоля.КраткоеПредставление));
	КонецЦикла;
	
	сзПорядокИмпортаТаблиц = Новый СписокЗначений;
	Для Каждого ЭлТаблица Из соСтруктураИмпорта Цикл
		Если сзПорядокИмпортаТаблиц.НайтиПоЗначению(ЭлТаблица.Ключ) <> Неопределено Тогда Продолжить; КонецЕсли;
		
		Для Каждого Поле Из ЭлТаблица.Значение.СсылочныеКлючевыеПоля Цикл
			Если сзПорядокИмпортаТаблиц.НайтиПоЗначению(Поле.Объект) <> Неопределено Тогда Продолжить; КонецЕсли;
			сзПорядокИмпортаТаблиц.Добавить(Поле.Объект);
		КонецЦикла;
		сзПорядокИмпортаТаблиц.Добавить(ЭлТаблица.Ключ);
	КонецЦикла;
	мсПорядокИмпортаТаблиц = сзПорядокИмпортаТаблиц.ВыгрузитьЗначения();
	
	Для Каждого стрОбработчики Из Обработчики Цикл
		Если ПустаяСтрока(стрОбработчики.Объект) Тогда Продолжить; КонецЕсли;
		
		Таблица = соСтруктураИмпорта[стрОбработчики.Объект];
		Если Таблица = Неопределено Тогда Продолжить; КонецЕсли;
		
		Для Каждого мдРеквизит Из Метаданные.Справочники.новаЗадачаИмпортаДанных.ТабличныеЧасти.Обработчики.Реквизиты Цикл
			Если мдРеквизит.Имя = "Объект" Тогда Продолжить; КонецЕсли;
			
			Если Таблица.Обработчики.Свойство(мдРеквизит.Имя) Тогда
				Обработчик = Таблица.Обработчики[мдРеквизит.Имя] + Символы.ПС + стрОбработчики[мдРеквизит.Имя];
			Иначе
				Обработчик = стрОбработчики[мдРеквизит.Имя];
			КонецЕсли;
			Таблица.Обработчики.Вставить(мдРеквизит.Имя, Обработчик);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("Таблицы, ПорядокИмпортаТаблиц", соСтруктураИмпорта, мсПорядокИмпортаТаблиц);
КонецФункции

// Возвращает код макроса для разбора данных колонки (текст и параметры)
//
// Параметры:
//  НастройкаИмпорта <Структура>
//
// Возвращаемое значение:
//  <Структура>
//
Функция ПолучитьМакросРазбораКолонки(НастройкаИмпорта) Экспорт
	Если НастройкаИмпорта = Неопределено Тогда Возврат Новый Структура("Текст, Параметры", "", Новый Структура); КонецЕсли;
	
	Параметры = Новый Структура;
	Текст = "";
	
	Если НастройкаИмпорта.ПреобразоватьКак = "Число" Тогда
		Текст = Текст + "стрЗначение = СтрЗаменить(СокрЛП(Значение), "" "", """");
		|стрЗначение = СтрЗаменить(стрЗначение, Символы.НПП, """");";
		
		Разделитель = СокрЛП(НастройкаИмпорта.Преобразование.РазделительДробнойЧасти);
		Если Не (Разделитель = "" Или Разделитель = ".") Тогда
			Текст = Текст + "
			|стрЗначение = СтрЗаменить(СокрЛП(Значение), """ + Разделитель + """, ""."");";
		КонецЕсли;
		
		Текст = Текст + "
		|Значение = ?(стрЗначение = """", 0, Число(стрЗначение));";
		
		Если НастройкаИмпорта.Преобразование.ОграничитьСнизу Тогда
			Текст = Текст + "
			|Значение = Макс(Значение, " + СтрЗаменить(Строка(НастройкаИмпорта.Преобразование.НижняяГраница), Символы.НПП, "") + ");";
		КонецЕсли;
		
		Если НастройкаИмпорта.Преобразование.ОграничитьСверху Тогда
			Текст = Текст + "
			|Значение = Мин(Значение, " + СтрЗаменить(Строка(НастройкаИмпорта.Преобразование.ВерхняяГраница), Символы.НПП, "") + ");";
		КонецЕсли;
		
	ИначеЕсли НастройкаИмпорта.ПреобразоватьКак = "Строка" Тогда
		
	ИначеЕсли НастройкаИмпорта.ПреобразоватьКак = "Дата" Тогда
		Если НастройкаИмпорта.Преобразование.ЧастиДаты.Количество() = 0 Тогда
			Текст = "Значение = Параметры.ПоУмолчанию;";
			Параметры.Вставить("ПоУмолчанию", НастройкаИмпорта.Преобразование.ПоУмолчанию);
		Иначе
			стрЧД = НастройкаИмпорта.Преобразование.ЧастиДаты.Найти("Год", "ЧастьДаты");
			стрГод = ?(стрЧД = Неопределено, "1", "Число(мсЧастиДаты[" + Строка(НастройкаИмпорта.Преобразование.ЧастиДаты.Индекс(стрЧД)) + "])");
			
			стрЧД = НастройкаИмпорта.Преобразование.ЧастиДаты.Найти("Месяц", "ЧастьДаты");
			стрМесяц = ?(стрЧД = Неопределено, "1", "Число(мсЧастиДаты[" + Строка(НастройкаИмпорта.Преобразование.ЧастиДаты.Индекс(стрЧД)) + "])");
			
			стрЧД = НастройкаИмпорта.Преобразование.ЧастиДаты.Найти("День", "ЧастьДаты");
			стрДень = ?(стрЧД = Неопределено, "1", "Число(мсЧастиДаты[" + Строка(НастройкаИмпорта.Преобразование.ЧастиДаты.Индекс(стрЧД)) + "])");
			
			стрЧД = НастройкаИмпорта.Преобразование.ЧастиДаты.Найти("Час", "ЧастьДаты");
			стрЧас = ?(стрЧД = Неопределено, "0", "Число(мсЧастиДаты[" + Строка(НастройкаИмпорта.Преобразование.ЧастиДаты.Индекс(стрЧД)) + "])");
			
			стрЧД = НастройкаИмпорта.Преобразование.ЧастиДаты.Найти("Минута", "ЧастьДаты");
			стрМинута = ?(стрЧД = Неопределено, "0", "Число(мсЧастиДаты[" + Строка(НастройкаИмпорта.Преобразование.ЧастиДаты.Индекс(стрЧД)) + "])");
			
			стрЧД = НастройкаИмпорта.Преобразование.ЧастиДаты.Найти("Секунда", "ЧастьДаты");
			стрСекунда = ?(стрЧД = Неопределено, "0", "Число(мсЧастиДаты[" + Строка(НастройкаИмпорта.Преобразование.ЧастиДаты.Индекс(стрЧД)) + "])");
			
			Текст = "мсЧастиДаты = Новый Массив;
			|ъ = 1;
			|НачалоЧастиДаты = 1;
			|РазмерСтроки = СтрДлина(Значение);
			|фРазделитель = Ложь;
			|Пока ъ <= РазмерСтроки Цикл
			|	Если Найти(""0123456789"", Сред(Значение, ъ, 1)) = 0 Тогда
			|		Если Не фРазделитель Тогда
			|       	фРазделитель = Истина;
			|			мсЧастиДаты.Добавить(Сред(Значение, НачалоЧастиДаты, ъ - НачалоЧастиДаты));
			|			Если мсЧастиДаты.Количество() = " + Строка(НастройкаИмпорта.Преобразование.ЧастиДаты.Количество()) + " Тогда Прервать; КонецЕсли;
			|		КонецЕсли;
			|	Иначе
			|		Если фРазделитель Тогда
			|			НачалоЧастиДаты = ъ;
			|			фРазделитель = Ложь;
			|		КонецЕсли;
			|	КонецЕсли;
			|	ъ = ъ + 1;
			|КонецЦикла;
			|Если Не фРазделитель Тогда
			|	мсЧастиДаты.Добавить(Сред(Значение, НачалоЧастиДаты, ъ - НачалоЧастиДаты));
			|КонецЕсли;
			|врГод = " + стрГод + ";
			|Если врГод < 1000 И врГод > 1 Тогда
			|	 врГод = врГод + 2000;
			|КонецЕсли;
			|Значение = Дата(врГод, " + стрМесяц + ", " + стрДень + ", " + стрЧас + ", " + стрМинута + ", " + стрСекунда + ");";
		КонецЕсли;
		
	ИначеЕсли НастройкаИмпорта.ПреобразоватьКак = "Булево" Тогда
		Текст = "стрЗначение = Параметры.Таблица.Найти(Значение, ""ИсходнаяСтрока"");
		|Если стрЗначение = Неопределено Тогда
		|	Значение = Параметры.ПоУмолчанию;
		|Иначе
		|	Значение = стрЗначение.ЗначениеБулево;
		|КонецЕсли;";
		
		Параметры.Вставить("Таблица", НастройкаИмпорта.Преобразование.Значения);
		Параметры.Вставить("ПоУмолчанию", НастройкаИмпорта.Преобразование.ПоУмолчанию);
		
	ИначеЕсли НастройкаИмпорта.ПреобразоватьКак = "Ссылка" Тогда
		Текст = "стрЗначение = Параметры.Таблица.Найти(Значение, ""ИсходнаяСтрока"");
		|Если стрЗначение = Неопределено Тогда
		|	Значение = Параметры.ПоУмолчанию;
		|Иначе
		|	Значение = стрЗначение.ЗначениеСсылки;
		|КонецЕсли;";
		
		Параметры.Вставить("Таблица", НастройкаИмпорта.Преобразование.Значения);
		Параметры.Вставить("ПоУмолчанию", НастройкаИмпорта.Преобразование.ПоУмолчанию);
		
	КонецЕсли;
	
	Возврат Новый Структура("Текст, Параметры", Текст, Параметры);
КонецФункции

#Если Клиент Тогда
// Выгружает параметры задачи импорта в XML-документ
//
// Параметры:
//  ЗаписьХМЛ <ЗаписьXML>
//
Процедура ВыгрузитьВХМЛ(ЗаписьХМЛ) Экспорт
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ЗадачаИмпортаДанных");
	ЗаписьХМЛ.ЗаписатьАтрибут("Наименование", Наименование);
	ЗаписьХМЛ.ЗаписатьАтрибут("Образец", Образец);
	ЗаписьХМЛ.ЗаписатьАтрибут("ФильтрИмпорта", ФильтрИмпорта);
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СоставДанных");
//	ЗаписьХМЛ.ЗаписатьАтрибут("Количество", СоставДанных.Количество());
	Для Каждого стрСоставДанных Из СоставДанных Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СтрокаСоставаДанных");
		ЗаписьХМЛ.ЗаписатьАтрибут("Ид", стрСоставДанных.Ид);
		ЗаписьХМЛ.ЗаписатьАтрибут("Представление", стрСоставДанных.Представление);
		
		Описатель = стрСоставДанных.НастройкаИмпорта.Получить();
		Если Описатель = Неопределено Тогда
			ЗаписьХМЛ.ЗаписатьАтрибут("НастройкаИмпорта", "");
		Иначе
			новаОбщиеПроцедуры.ЗаменитьСсылки(Описатель, новаКонтекст);
			ЗаписьХМЛ.ЗаписатьАтрибут("НастройкаИмпорта", ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(Описатель)));
		КонецЕсли;
		
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СсылочныеПоля");
//	ЗаписьХМЛ.ЗаписатьАтрибут("Количество", СсылочныеПоля.Количество());
	Для Каждого стрСсылочныеПоля Из СсылочныеПоля Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СтрокаСсылочныхПолей");
		ЗаписьХМЛ.ЗаписатьАтрибут("Объект", стрСсылочныеПоля.Объект);
		ЗаписьХМЛ.ЗаписатьАтрибут("Поля", стрСсылочныеПоля.Поля);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("КлючевыеПоля");
//	ЗаписьХМЛ.ЗаписатьАтрибут("Количество", КлючевыеПоля.Количество());
	Для Каждого стрКлючевыеПоля Из КлючевыеПоля Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СтрокаКлючевыхПолей");
		ЗаписьХМЛ.ЗаписатьАтрибут("Поле", стрКлючевыеПоля.Поле);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ИмпортируемыеТолькоНовыеПоля");
	Для Каждого стрПоля Из ИмпортируемыеТолькоНовыеПоля Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СтрокаИмпортируемыхТолькоНовыхПолей");
		ЗаписьХМЛ.ЗаписатьАтрибут("Поле", стрПоля.Поле);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Обработчики");
	Для Каждого стрОбработчики Из Обработчики Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СтрокаОбработчиков");
		Для Каждого мдРеквизит Из Метаданные.Справочники.новаЗадачаИмпортаДанных.ТабличныеЧасти.Обработчики.Реквизиты Цикл
			Атрибут = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(стрОбработчики[мдРеквизит.Имя]));
			ЗаписьХМЛ.ЗаписатьАтрибут(мдРеквизит.Имя, Атрибут);
		КонецЦикла;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
КонецПроцедуры
#КонецЕсли

#Если Клиент Тогда
// Загружает параметры задачи импорта из XML-документа
//
// Параметры:
//  ЧтениеХМЛ <ЧтениеXML>:
//
Процедура ЗагрузитьИзХМЛ(ЧтениеХМЛ) Экспорт
	Наименование = ЧтениеХМЛ.ПолучитьАтрибут("Наименование");
	Сообщить("Загрузка задачи импорта данных " + Наименование); 
	
	Образец = ЧтениеХМЛ.ПолучитьАтрибут("Образец");
	ФильтрИмпорта = ЧтениеХМЛ.ПолучитьАтрибут("ФильтрИмпорта");
	
	Обработчики.Очистить();
	СоставДанных.Очистить();
	СсылочныеПоля.Очистить();
	КлючевыеПоля.Очистить();
	ИмпортируемыеТолькоНовыеПоля.Очистить();
	
	ЧтениеХМЛ.Прочитать();
	Пока Истина Цикл
		Если ЧтениеХМЛ.Имя = "СоставДанных" Тогда
			ЧтениеХМЛ.Прочитать();
			Пока ЧтениеХМЛ.Имя = "СтрокаСоставаДанных" Цикл
				стрСоставДанных = СоставДанных.Добавить();
				стрСоставДанных.Ид = ЧтениеХМЛ.ПолучитьАтрибут("Ид");
				стрСоставДанных.Представление = ЧтениеХМЛ.ПолучитьАтрибут("Представление");
				
				НастройкаИмпорта = ЧтениеХМЛ.ПолучитьАтрибут("НастройкаИмпорта");
				Если НастройкаИмпорта = "" Или НастройкаИмпорта = Неопределено Тогда
					стрСоставДанных.НастройкаИмпорта = Неопределено;
				Иначе	
					Описатель = ЗначениеИзСтрокиВнутр(СтрЗаменить(НастройкаИмпорта, " ", "")).Получить();
					новаОбщиеПроцедуры.ВосстановитьСсылки(Описатель, новаКонтекст);
					стрСоставДанных.НастройкаИмпорта = Новый ХранилищеЗначения(Описатель);
				КонецЕсли;
				ЧтениеХМЛ.Прочитать();
				ЧтениеХМЛ.Прочитать();
			КонецЦикла;
			
		ИначеЕсли ЧтениеХМЛ.Имя = "СсылочныеПоля" Тогда
			ЧтениеХМЛ.Прочитать();
			Пока ЧтениеХМЛ.Имя = "СтрокаСсылочныхПолей" Цикл
				стрСсылочныеПоля = СсылочныеПоля.Добавить();
				стрСсылочныеПоля.Объект = ЧтениеХМЛ.ПолучитьАтрибут("Объект");
				стрСсылочныеПоля.Поля = ЧтениеХМЛ.ПолучитьАтрибут("Поля");
				ЧтениеХМЛ.Прочитать();
				ЧтениеХМЛ.Прочитать();
			КонецЦикла;
			
		ИначеЕсли ЧтениеХМЛ.Имя = "КлючевыеПоля" Тогда
			ЧтениеХМЛ.Прочитать();
			Пока ЧтениеХМЛ.Имя = "СтрокаКлючевыхПолей" Цикл
				стрКлючевыеПоля = КлючевыеПоля.Добавить();
				стрКлючевыеПоля.Поле = ЧтениеХМЛ.ПолучитьАтрибут("Поле");
				ЧтениеХМЛ.Прочитать();
				ЧтениеХМЛ.Прочитать();
			КонецЦикла;
			
		ИначеЕсли ЧтениеХМЛ.Имя = "ИмпортируемыеТолькоНовыеПоля" Тогда
			ЧтениеХМЛ.Прочитать();
			Пока ЧтениеХМЛ.Имя = "СтрокаИмпортируемыхТолькоНовыхПолей" Цикл
				стрПоля = ИмпортируемыеТолькоНовыеПоля.Добавить();
				стрПоля.Поле = ЧтениеХМЛ.ПолучитьАтрибут("Поле");
				ЧтениеХМЛ.Прочитать();
				ЧтениеХМЛ.Прочитать();
			КонецЦикла;
			
		ИначеЕсли ЧтениеХМЛ.Имя = "Обработчики" Тогда
			ЧтениеХМЛ.Прочитать();
			Пока ЧтениеХМЛ.Имя = "СтрокаОбработчиков" Цикл
				стрОбработчики = Обработчики.Добавить();
				Для Каждого мдРеквизит Из Метаданные.Справочники.новаЗадачаИмпортаДанных.ТабличныеЧасти.Обработчики.Реквизиты Цикл
					Атрибут = ЧтениеХМЛ.ПолучитьАтрибут(мдРеквизит.Имя); 
					Если Атрибут = Неопределено Тогда Продолжить; КонецЕсли;
					
					Атрибут = СтрЗаменить(Атрибут, " ", "");
					стрОбработчики[мдРеквизит.Имя] = ЗначениеИзСтрокиВнутр(Атрибут).Получить();
				КонецЦикла;
				ЧтениеХМЛ.Прочитать();
				ЧтениеХМЛ.Прочитать();
			КонецЦикла;
			
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Записать();
КонецПроцедуры
#КонецЕсли