&НаКлиенте

Перем лРасчетЗП_Оклад;
&НаКлиенте

Перем лРасчетЗП_НеУчаствуетВФот;
&НаКлиенте

Перем лРасчетЗП_ОкладСумма;
&НаКлиенте

Перем лРасчетЗП_ВидТарифаЗП;

&НаСервере
Процедура ЗаполнитьРеквизитыРасчетаЗПИзРСМетодикаРасчетаЗП()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	МетодикаРасчетаЗППоФизЛицамСрезПоследних.Период КАК Период,
	|	МетодикаРасчетаЗППоФизЛицамСрезПоследних.Оклад КАК Оклад,
	|	МетодикаРасчетаЗППоФизЛицамСрезПоследних.НеУчаствуетВФот КАК НеУчаствуетВФот,
	|	МетодикаРасчетаЗППоФизЛицамСрезПоследних.ОкладСумма КАК ОкладСумма,
	|	МетодикаРасчетаЗППоФизЛицамСрезПоследних.ВидТарифаЗП КАК ВидТарифаЗП
	|ИЗ
	|	РегистрСведений.МетодикаРасчетаЗППоФизЛицам.СрезПоследних КАК МетодикаРасчетаЗППоФизЛицамСрезПоследних
	|ГДЕ
	|	МетодикаРасчетаЗППоФизЛицамСрезПоследних.ФизЛицо = &ФизЛицо";
	Зап.УстановитьПараметр("ФизЛицо", Объект.Ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		РасчетЗП_ДатаСведений = Выб.Период;
		РасчетЗП_Оклад = Выб.Оклад;
		РасчетЗП_НеУчаствуетВФот = Выб.НеУчаствуетВФот;
		РасчетЗП_ОкладСумма = Выб.ОкладСумма;
		РасчетЗП_ВидТарифаЗП = Выб.ВидТарифаЗП;
	КонецЦикла;	
КонецПроцедуры	


&НаСервереБезКонтекста
//БезКонтекста
Функция ПолучитьМассивСтруктурДанныхПМ(Водитель, СхемаПолигонов, Смена)
	Попытка
		СхемаПолигонов = ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Водитель.Физлицо.Терминал);
	Исключение	
		СхемаПолигонов = ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Водитель.Родитель.ТерминалДоставки);
	КонецПопытки;
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПланируемыеПолигоныЭкипажейСрезПоследних.Полигон КАК Полигон,
	|	ПланируемыеПолигоныЭкипажейСрезПоследних.ПолигонУчитывается КАК Актуален,
	|	ПланируемыеПолигоныЭкипажейСрезПоследних.СменаМаршрутизации КАК СменаМаршрутизации
	|ИЗ
	|	РегистрСведений.ПланируемыеПолигоныЭкипажей.СрезПоследних(
	|			,
	|			Водитель.Ссылка = &Водитель
	|				И СхемаПолигональнойМаршрутизации.Ссылка = &СхемаПолигональнойМаршрутизации
	|				И СменаМаршрутизации = &Смена) КАК ПланируемыеПолигоныЭкипажейСрезПоследних";
	Зап.УстановитьПараметр("Водитель", Водитель);
	Зап.УстановитьПараметр("СхемаПолигональнойМаршрутизации", СхемаПолигонов);
	Зап.УстановитьПараметр("Смена", Смена);
	МасЗначений = Новый массив;
	
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		Струк = Новый Структура;
		Струк.Вставить("Полигон", Выб.Полигон);
		Струк.Вставить("Актуален", Выб.Актуален);
		Струк.Вставить("СменаМаршрутизации", Выб.СменаМаршрутизации);
		МасЗначений.Добавить(Струк);
	КонецЦикла;	
	
	Возврат МасЗначений;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьМассивСтруктурДанныхПредпочитаемыхПМ(Водитель, СхемаПолигонов)
	СхемаПолигонов = ПолигональнаяМаршрутизацияСервер.АктивнаяСхемаПолигональнойМаршрутизации(Водитель.Родитель.ТерминалДоставки);
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ПредпочитаемыеПолигоныЭкипажейСрезПоследних.Полигон КАК Полигон,
	|	ПредпочитаемыеПолигоныЭкипажейСрезПоследних.ПолигонУчитывается КАК Актуален,
	|	ПредпочитаемыеПолигоныЭкипажейСрезПоследних.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ПредпочитаемыеПолигоныЭкипажей.СрезПоследних(
	|			,
	|			Водитель.Ссылка = &Водитель
	|				И СхемаПолигональнойМаршрутизации.Ссылка = &СхемаПолигональнойМаршрутизации) КАК ПредпочитаемыеПолигоныЭкипажейСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Зап.УстановитьПараметр("Водитель", Водитель);
	Зап.УстановитьПараметр("СхемаПолигональнойМаршрутизации", СхемаПолигонов);
	МасЗначений = Новый массив;
	
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		Струк = Новый Структура;
		Струк.Вставить("Полигон", Выб.Полигон);
		Струк.Вставить("Актуален", Выб.Актуален);
		Струк.Вставить("Порядок", Выб.Порядок);
		
		МасЗначений.Добавить(Струк);
	КонецЦикла;	
	
	Возврат МасЗначений;
КонецФункции	



&НаКлиенте
Процедура ЗаполнитьПромежуточныеЗначения()
	лРасчетЗП_Оклад = РасчетЗП_Оклад;
	лРасчетЗП_НеУчаствуетВФот = РасчетЗП_НеУчаствуетВФот;
	лРасчетЗП_ОкладСумма = РасчетЗП_ОкладСумма;
	лРасчетЗП_ВидТарифаЗП = РасчетЗП_ВидТарифаЗП;
КонецПроцедуры	

//CeHbKA 09.04.2019 #2989
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.Родитель.ТерминалДоставки) Тогда
		Отказ = Истина;
		Сообщить("Невозможно создание элемента вне группы с заполненным Терминалом");
		Возврат;
	КонецЕсли;
	
	ДатаРождения = Объект.ФизЛицо.ДатаРождения;
	ВозможностьРедактированияНаименования = РольДоступна("РедактированиеНаименованияСотрудников");
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		СтруктураДополнительныхПараметровФизЛицо = РегистрыСведений.ДополнительныеПараметрыФизЛиц.ИнициализироватьДополнительныеПараметры(Объект.ФизЛицо);
		
		ОсновнаяРоль = СтруктураДополнительныхПараметровФизЛицо.ОсновнаяРольСотрудника;
				
	Иначе
		Объект.ФизЛицо	= Неопределено;
		Фамилия			= "";
		Имя				= "";
		Отчество		= "";
		Объект.Наименование = "";	
	КонецЕсли; 
	
	//Геннадий #4711 18.01.2022 ++
	Если ЗначениеЗаполнено(Объект.ФизЛицо.КодНетМонет) Тогда
		
		КодНетМонет = Объект.ФизЛицо.КодНетМонет; 
		
	КонецЕсли;
	//Геннадий #4711 18.01.2022 --
	
	//Асеев 15.02.2023 (Задача № 4985)>>>
	Если Объект.ФизЛицо.Пустая() Тогда
		Элементы.ГруппаПаспортныеДанные.Доступность = Ложь;
	Иначе
		ПаспортныеДанные = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Объект.ФизЛицо));
		ДокументСерия = ПаспортныеДанные.ДокументСерия;
		ДокументНомер = ПаспортныеДанные.ДокументНомер;
		ДокументДатаВыдачи = ПаспортныеДанные.ДокументДатаВыдачи;
		ДокументКемВыдан = ПаспортныеДанные.ДокументКемВыдан;
		ДокументКодПодразделения = ПаспортныеДанные.ДокументКодПодразделения;
		//Асеев 15.02.2023 (Задача № 4985)<<<
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЗ_ПриемНаРаботу.Период КАК ДатаПриемаНаРаботу
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		РаботникиОрганизации.Период КАК Период
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.ФизЛицо = &ФизЛицо
		|	
		|	УПОРЯДОЧИТЬ ПО
		|		Период УБЫВ) КАК ВЗ_МаксПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
		|		ПО ВЗ_МаксПериод.Период = РаботникиОрганизации.Период
		|			И (РаботникиОрганизации.ФизЛицо = &ФизЛицо)
		|			И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			РаботникиОрганизации.Период КАК Период
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
		|		ГДЕ
		|			РаботникиОрганизации.ФизЛицо = &ФизЛицо
		|			И РаботникиОрганизации.Регистратор ССЫЛКА Документ.ПриемНаРаботуВОрганизацию
		|		
		|		УПОРЯДОЧИТЬ ПО
		|			Период УБЫВ) КАК ВЗ_ПриемНаРаботу
		|		ПО (ИСТИНА)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаПриемаНаРаботу = Выборка.ДатаПриемаНаРаботу;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//CeHbKA 09.04.2019 #2989

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	ЗаполнитьРеквизитыРасчетаЗПИзРСМетодикаРасчетаЗП();
	
	// Якурнов 28.08.2018 13:06:56
	//ЗаполнитьГруппуПолигоновМаршрутизации();
	
	//Задача 2861
	ПрочитатьДополнительныеПараметры();
	ОбработкаТекущейСмены(СменаМаршрутизации.ИмяПредопределенныхДанных);
	//Задача 2861
	
	ЗаполнитьДанныеПолигоновПоУмолчанию();
	ЗаполнитьДанныеПредпочитаемыхПолигонов();
	
	УправлениеДиалогом();
	УстановкаФильтраАктивныхПолигонов();
	УстановкаФильтраПредпочитаемыхАктивныхПолигонов();
	ЗаполнитьПромежуточныеЗначения();
	
	МодифицированностьДопПараметров = Ложь;
	МодифицированностьТаблицы = Ложь;
	
	//CeHbKA 09.04.2019 #2989
	РаботаСФизЛицамиКлиент.ЗаполнитьФИО(ЭтаФорма);
	РаботаСФизЛицамиКлиент.ДоступностьНаименованияИФИО(ЭтаФорма);
	//CeHbKA 09.04.2019 #2989
	//Геннадий 09.06.2020 ->
	РаботаСФизЛицамиКлиент.ЗаполнитьПрочиеПараметры(ЭтаФорма);
	//Геннадий 09.06.2020 <-
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//CeHbKA 09.04.2019 #2989
	Если РаботаСФизЛицамиКлиент.ПроверитьЗаполнениеПоляФормы(ЭтаФорма, "Фамилия")
		ИЛИ РаботаСФизЛицамиКлиент.ПроверитьЗаполнениеПоляФормы(ЭтаФорма, "Имя")
		ИЛИ РаботаСФизЛицамиКлиент.ПроверитьЗаполнениеПоляФормы(ЭтаФорма, "ДатаРождения") Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Если ПроверкаФИО Тогда
			Отказ = РаботаСФизЛицамиКлиент.ПроверитьФИО(ЭтаФорма);
		КонецЕсли; 
		
		Если НЕ Отказ И НЕ ПроверкаФИО Тогда
			
			СтароеФИО = РаботаСФизЛицамиКлиент.НаименованиеФИОВСтруктуру(Объект.ФизЛицо);
			
			//Геннадий 10.06.2020 ->			
			Если РаботаСФизЛицамиКлиент.ФИОНеСовпадает(СтароеФИО, Фамилия, Имя, Отчество) 
				ИЛИ ДРПоменялось ИЛИ НомерТелПоменялся ИЛИ КомментарийПоменялся Тогда
			//Геннадий 10.06.2020 <-
			
				МассивОднофамильцев = ОбработатьНаименованиеИФизЛицо(СтароеФИО);
				
				Если Объект.ФизЛицо.Пустая() Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "ВНИМАНИЕ!!! Запись невозможна!"+Символы.ПС+"Физ. лицо с таким ФИО уже существует и привязано к другому водителю!";
					Сообщение.Поле = "Наименование";
					Сообщение.Сообщить(); 
					
					Отказ = Истина;
				КонецЕсли;
				
				РаботаСФизЛицамиКлиент.СообщитьОднофамильцев(МассивОднофамильцев);
				
			КонецЕсли; 
						
		КонецЕсли; 
		
	КонецЕсли;
	//CeHbKA 09.04.2019 #2989
		
КонецПроцедуры


//CeHbKA 09.04.2019 #2989
#Область ИзменениеФИО

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	
	РаботаСФизЛицамиКлиент.ФИОПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьНаименованиеИФизЛицо(СтароеФИО) 
	
	//Геннадий 11.06.2020 ->
	//добавлена передача параметров НомерЛичногоТелефона, КомментарийФЛ
	Объект.ФизЛицо = Справочники.ФизическиеЛица.ОбработатьФизЛицо(Объект.ФизЛицо, Объект.Родитель.ТерминалДоставки, Фамилия, Имя, Отчество, ДатаРождения, Тип("СправочникСсылка.новаВодители"), НомерЛичногоТелефона, КомментарийФЛ);
	//Геннадий 11.06.2020 <-
	
	Если (НЕ Объект.НаименованиеИзменено) ИЛИ (ПустаяСтрока(Объект.Наименование)) Тогда
		Объект.Наименование = Фамилия + " " + Имя + " " + Отчество;
	КонецЕсли; 

	
	Если НЕ Объект.ФизЛицо.Пустая() Тогда
		
		МассивОднофамильцев = Справочники.ФизическиеЛица.ПроверитьОднофамильцев(Объект.ФизЛицо);
		
		Если (МассивОднофамильцев.Количество() > 0) И (НЕ Объект.НаименованиеИзменено) Тогда
			Объект.Наименование = Фамилия + " " + Имя + " " + Отчество + " (" + Формат(ДатаРождения, "ДЛФ=Д") + ")";
		КонецЕсли;
		
		Возврат МассивОднофамильцев;
		
	КонецЕсли;
	
	МассивОднофамильцев = Новый Массив;
	
	Возврат МассивОднофамильцев; 
	
КонецФункции // ()

&НаКлиенте
Процедура НаименованиеИзмененоПриИзменении(Элемент)
	РаботаСФизЛицамиКлиент.ДоступностьНаименованияИФИО(ЭтаФорма);
	
	Если НЕ Объект.НаименованиеИзменено Тогда
		РаботаСФизЛицамиКлиент.ЗаполнитьНаименование(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСФизЛицамиКлиент.ПроверитьСменуДатыРождения(ВыбранноеЗначение, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	РаботаСФизЛицамиКлиент.ПроверитьСменуДатыРождения(Текст, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 
//CeHbKA 09.04.2019 #2989


#Область ДополнительныеПараметры
//Задача 2861
&НаСервере
Процедура ПрочитатьДополнительныеПараметры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ДополнительныеПараметрыВодителей.СрезПоследних КАК ДополнительныеПараметрыВодителейСрезПоследних
	|ГДЕ
	|	ДополнительныеПараметрыВодителейСрезПоследних.Водитель = &Водитель";
	Запрос.УстановитьПараметр("Водитель", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ГруппаПолигоновМаршрутизации = Выборка.ГруппаПолигоновМаршрутизации;
		СменаМаршрутизации = Выборка.СменаМаршрутизации;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьДополнительныеПараметры()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Сначала запишите Водителя!");
		Возврат;
	КонецЕсли;
	
	Период = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.ДополнительныеПараметрыВодителей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Водитель.Установить(Объект.Ссылка);
	Запись = НаборЗаписей.Добавить();
	Запись.Период = Период;
	Запись.Водитель = Объект.Ссылка;
	Запись.ГруппаПолигоновМаршрутизации = ГруппаПолигоновМаршрутизации;
	Запись.СменаМаршрутизации = СменаМаршрутизации;
	Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура МодифицированностьДополнительныхПараметровПриИзменении(Элемент) //Задача 2861
	МодифицированностьДопПараметров = Истина;
КонецПроцедуры
//Задача № 2861
#КонецОбласти

#Область УправлениеСменами
//Задача № 2861
&НаКлиенте
Процедура ИзменениеСмены(Команда)
	
	Если Не МодифицированностьТаблицы Тогда
		
		ОбработкаТекущейСмены(Команда.Имя);
		
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаСохраненияТаблицыПМ", ЭтотОбъект, Новый Структура("НоваяСмена", Команда.Имя)), 
		"В таблице ""Районы ПМ по умолчанию"" есть несохраненные данные."  + Символы.ПС +
		"При переключении смены они будут утеряны. Продолжить?",
		РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСохраненияТаблицыПМ(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаТекущейСмены(Параметры.НоваяСмена);
		МодифицированностьТаблицы = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаТекущейСмены(ИмяСмены = "")
	
	ВыбраннаяСмена = ПредопределенноеЗначение("Справочник.Смены.Смена1"); 
	
	Если ИмяСмены = "Смена1" ИЛИ ИмяСмены = "" Тогда
		Элементы.КнопкаСмена1.Пометка = Истина;
		Элементы.КнопкаСмена2.Пометка = Ложь;
	ИначеЕсли ИмяСмены = "Смена2" Тогда
		ВыбраннаяСмена = ПредопределенноеЗначение("Справочник.Смены.Смена2"); 
		Элементы.КнопкаСмена1.Пометка = Ложь;
		Элементы.КнопкаСмена2.Пометка = Истина;		
	КонецЕсли;	
	
	ЗаполнитьДанныеПолигоновПоУмолчанию();
	
КонецПроцедуры	
//Задача № 2861

#КонецОбласти

//Отключено в рамках Задача № 2861
//// Якурнов 28.08.2018 13:04:53
//&НаСервере
//Процедура ЗаполнитьГруппуПолигоновМаршрутизации()
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	ДополнительныеПараметрыВодителейСрезПоследних.ГруппаПолигоновМаршрутизации КАК ГруппаПолигоновМаршрутизации
//	|ИЗ
//	|	РегистрСведений.ДополнительныеПараметрыВодителей.СрезПоследних КАК ДополнительныеПараметрыВодителейСрезПоследних
//	|ГДЕ
//	|	ДополнительныеПараметрыВодителейСрезПоследних.Водитель = &Водитель";
//	
//	Запрос.УстановитьПараметр("Водитель", Объект.Ссылка);
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		ГруппаПолигоновМаршрутизации = Выборка.ГруппаПолигоновМаршрутизации;
//	КонецЕсли;

//КонецПроцедуры

//// Якурнов 28.08.2018 13:08:59
//&НаСервере
//Процедура ЗаписатьГруппуПолигоновМаршрутизации()
//	
//	Набор = РегистрыСведений.ДополнительныеПараметрыВодителей.СоздатьНаборЗаписей();
//	Набор.Отбор.Водитель.Установить(Объект.Ссылка);
//	Набор.Прочитать();
//	
//	НЗапись = Набор.Добавить();
//	НЗапись.Период = ТекущаяДата();
//	НЗапись.Водитель = Объект.Ссылка;
//	НЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
//	НЗапись.ГруппаПолигоновМаршрутизации = ГруппаПолигоновМаршрутизации;
//	
//	Набор.Записать();
//	
//КонецПроцедуры
//Отключено в рамках Задача № 2861

&НаКлиенте
Процедура ЗаполнитьДанныеПолигоновПоУмолчанию()
	
	МассивСтруктур = ПолучитьМассивСтруктурДанныхПМ(Объект.Ссылка, СхемаПолигонов, ВыбраннаяСмена);
	ТаблицаРайонов.Очистить();
	
	Для Каждого Тек Из МассивСтруктур Цикл
		Нов = ТаблицаРайонов.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
		Нов.ЗаполненоИзБД = Истина;
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДанныеПредпочитаемыхПолигонов()
	
	МассивСтруктур = ПолучитьМассивСтруктурДанныхПредпочитаемыхПМ(Объект.Ссылка, СхемаПолигонов);
	ТаблицаПредпочитаемыхРайонов.Очистить();
	
	Для Каждого Тек Из МассивСтруктур Цикл
		Нов = ТаблицаПредпочитаемыхРайонов.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
		Нов.ЗаполненоИзБД = Истина;
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьДанныеРасчетаЗПИзРСМетодикаРасчетаЗПНаКлиенте()
	ЕСли лРасчетЗП_Оклад = РасчетЗП_Оклад И 
		лРасчетЗП_НеУчаствуетВФот = РасчетЗП_НеУчаствуетВФот И
		лРасчетЗП_ОкладСумма = РасчетЗП_ОкладСумма И 
		лРасчетЗП_ВидТарифаЗП = РасчетЗП_ВидТарифаЗП Тогда
		Возврат;
	КонецеСли;	
	ЗаписатьДанныеРасчетаЗПИзРСМетодикаРасчетаЗП();
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьДанныеРасчетаЗПИзРСМетодикаРасчетаЗП()
	
	ТекД = ТекущаяДата();
	
	Наб = РегистрыСведений.МетодикаРасчетаЗППоФизЛицам.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТекД);
	Наб.Отбор.ФизЛицо.Установить(Объект.Ссылка);
	
	Нов = Наб.Добавить();
	
	Нов.Период = ТекД;
	Нов.ФизЛицо = Объект.Ссылка;
	Нов.ВидТарифаЗП = РасчетЗП_ВидТарифаЗП;
	Нов.НеУчаствуетВФот = РасчетЗП_НеУчаствуетВФот;
	Нов.ОкладСумма = РасчетЗП_ОкладСумма;
	Нов.Оклад = РасчетЗП_Оклад;
	
	Наб.Записать();
КонецПроцедуры	


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	//ЗаписатьДанныеРасчетаЗПИзРСМетодикаРасчетаЗП();
	ЗаписатьПолигоныПоумолчанию();
	ЗаписатьПредпочитаемыеПолигоны();
	
	// Якурнов 28.08.2018 13:06:38
	//ЗаписатьГруппуПолигоновМаршрутизации();
	Если МодифицированностьДопПараметров Тогда //Задача 2861
		ЗаписатьДополнительныеПараметры();
		//Марочкин закомментировано 08.12.2023
		//РегистрыСведений.ДополнительныеПараметрыФизЛиц.ДобавлениеИзменениеПараметровФизЛица(Объект.ФизЛицо, ОсновнаяРоль);
		//Марочкин закомментировано 08.12.2023
	КонецЕсли;
		
	МодифицированностьДопПараметров = Ложь;
	МодифицированностьТаблицы = Ложь;
	
	//Геннадий #4711 18.01.2022 ++
	Если КодНетМонет <> Объект.ФизЛицо.КодНетМонет Тогда
		
		ФизЛицоОб = Объект.ФизЛицо.ПолучитьОбъект();
		ФизЛицоОб.КодНетМонет = КодНетМонет;
		ФизЛицоОб.Записать();
		Сообщить("Для физ. лица " + Объект.ФизЛицо + " обновлено значение поля ""Код нет монет""");
		
	КонецЕсли;
	//Геннадий #4711 18.01.2022 --
	
	//Асеев 15.02.2023 (Задача № 4985)>>>
	МодифицированностьПаспортныхДанных = Ложь;
	//Асеев 15.02.2023 (Задача № 4985)<<<
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДиалогом()
	Если РасчетЗП_НеУчаствуетВФот Тогда
		Элементы.РасчетЗП_ВидТарифаЗП.Доступность = Ложь;
		Элементы.РасчетЗП_Оклад.Доступность = Ложь;
		Элементы.РасчетЗП_ОкладСумма.Доступность = Ложь;
	Иначе
		Элементы.РасчетЗП_ВидТарифаЗП.Доступность = Истина;
		Элементы.РасчетЗП_Оклад.Доступность = Истина;
		Элементы.РасчетЗП_ОкладСумма.Доступность = Истина;
	КонецеСли;	
	
	ПроверкаАктуальногоБейджа();
КонецПроцедуры	

&НаСервере
Процедура ПроверкаАктуальногоБейджа()
	// проверка наличия актуального бэйджа
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БэйджиСотрудников.Ссылка КАК Ссылка,
	|	УчетБэйджейСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(УчетБэйджейСотрудниковСрезПоследних.БэйджАктуален, ЛОЖЬ) КАК БэйджАктуален
	|ИЗ
	|	Справочник.БэйджиСотрудников КАК БэйджиСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетБэйджейСотрудников.СрезПоследних(, ) КАК УчетБэйджейСотрудниковСрезПоследних
	|		ПО БэйджиСотрудников.Владелец = УчетБэйджейСотрудниковСрезПоследних.Сотрудник
	|ГДЕ
	|	БэйджиСотрудников.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда			
		Если Рез.БэйджАктуален Тогда			
			Элементы.ФормаБейджНеАктуален.Доступность = Истина;			
		Иначе
			Элементы.ФормаБейджНеАктуален.Доступность = Ложь;
		КонецЕсли;				
	Иначе
		Элементы.ФормаБейджНеАктуален.Доступность = Ложь;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура РасчетЗП_НеУчаствуетВФотПриИзменении(Элемент)
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРайоновПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФильтраАктивныхПолигонов()
	Элементы.ТаблицаРайоновОтборАктивныхПолигонов.Пометка = Не Элементы.ТаблицаРайоновОтборАктивныхПолигонов.Пометка;
	
	Если Элементы.ТаблицаРайоновОтборАктивныхПолигонов.Пометка Тогда
		ФМ = Новый ФиксированнаяСтруктура("Актуален", Истина);
		Элементы.ТаблицаРайонов.ОтборСтрок = ФМ;
	Иначе
		Элементы.ТаблицаРайонов.ОтборСтрок = Неопределено;
	КонецеСли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтборАктивныхПолигонов(Команда)
	// Вставить содержимое обработчика.
	УстановкаФильтраАктивныхПолигонов();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРайоновПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПолигоныПоумолчанию()
	
	Наб = Неопределено;
	Для Каждого Тек Из ТаблицаРайонов Цикл
		Если Не Тек.Модифицировано Тогда
			Продолжить;
		КонецеСли;	
		
		Наб = РегистрыСведений.ПланируемыеПолигоныЭкипажей.СоздатьНаборЗаписей();
		ТекД = ТекущаяДата();
		Наб.Отбор.Период.Установить(ТекД);
		Наб.Отбор.Водитель.Установить(Объект.Ссылка);
		Наб.Отбор.Полигон.Установить(Тек.Полигон);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекД;
		Нов.Водитель = Объект.Ссылка;
		Нов.ПолигонУчитывается = Тек.Актуален;
		Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Нов.СхемаПолигональнойМаршрутизации = СхемаПолигонов;
		Нов.Полигон = Тек.Полигон;
		Нов.СменаМаршрутизации = Тек.СменаМаршрутизации;	
		
		
		Наб.Записать();
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьПредпочитаемыеПолигоны()
	
	Наб = Неопределено;
	ТаблицаПредпочитаемыхРайонов.Сортировать("Порядок Возр");
	Сч = 1;
	Для Каждого Тек Из ТаблицаПредпочитаемыхРайонов Цикл
		//Если Не Тек.Модифицировано Тогда
		//	Продолжить;
		//КонецеСли;	
		
		Наб = РегистрыСведений.ПредпочитаемыеПолигоныЭкипажей.СоздатьНаборЗаписей();
		ТекД = ТекущаяДата();
		Наб.Отбор.Период.Установить(ТекД);
		Наб.Отбор.Водитель.Установить(Объект.Ссылка);
		Наб.Отбор.Полигон.Установить(Тек.Полигон);
		
		Нов = Наб.Добавить();
		Нов.Период = ТекД;
		Нов.Водитель = Объект.Ссылка;
		Нов.ПолигонУчитывается = Тек.Актуален;
		Нов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Нов.СхемаПолигональнойМаршрутизации = СхемаПолигонов;
		Нов.Полигон = Тек.Полигон;
		Если Тек.Порядок = 0 Тогда
			Нов.Порядок = 0;
		Иначе
			Нов.Порядок = Сч;
			Сч = Сч + 1;
		КонецеСли;	
		
		Наб.Записать();
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаРайоновПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элементы.ТаблицаРайонов.ТекущиеДанные.СменаМаршрутизации = ВыбраннаяСмена; 
	Элементы.ТаблицаРайонов.ТекущиеДанные.Модифицировано = Истина;
	Если НоваяСтрока Тогда
		Элементы.ТаблицаРайонов.ТекущиеДанные.Актуален = Истина;
	КонецеСли;	
	
	МодифицированностьТаблицы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРайоновПолигонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Струк = Новый Структура;
	Струк.Вставить("Водитель", Объект.Ссылка);
	Струк.Вставить("СхемаПолигонов", СхемаПолигонов);
	Струк.Вставить("СменаМаршрутизации", ВыбраннаяСмена);
	ПолеВыбора = "ТаблицаРайонов";
	Ф = ОткрытьФорму("Справочник.ПолигоныМаршрутизации.Форма.ФормаВыбораПолигонаПоСменеИВодителю", Струк, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Вставить содержимое обработчика.
	Если ПолеВыбора = "ТаблицаРайонов" Тогда
		Если Не ЗначениеЗаполнено(ИсточникВыбора.Элементы.Список.ТекущиеДанные.Водитель) Тогда
			Элементы[ПолеВыбора].ТекущиеДанные.Полигон = ИсточникВыбора.Элементы.Список.ТекущиеДанные.Ссылка;
		КонецеСли;	
	Иначе
		Элементы[ПолеВыбора].ТекущиеДанные.Полигон = ИсточникВыбора.Элементы.Список.ТекущиеДанные.Ссылка;
	КонецеСли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	ЗаписатьДанныеРасчетаЗПИзРСМетодикаРасчетаЗПНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБэйдж(Парам1, Парам2) Экспорт
	
	Если Парам1 = КодВозвратаДиалога.Да Тогда 
		Бэйдж = mas.СоздатьБэйджСотрудника(Парам2.Сотрудник);	
		Элементы.ФормаБейджНеАктуален.Доступность = Истина;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		mas.НапечататьБэйджНаСервере(Бэйдж.Ссылка, ТабличныйДокумент);
		ТабличныйДокумент.Показать();
	Иначе	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБэйджНаСервере(Владелец) Экспорт
	
	// ищем бэйдж
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БэйджиСотрудников.Ссылка КАК Ссылка,
	|	УчетБэйджейСотрудниковСрезПервых.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(УчетБэйджейСотрудниковСрезПервых.БэйджАктуален, ЛОЖЬ) КАК БэйджАктуален
	|ИЗ
	|	Справочник.БэйджиСотрудников КАК БэйджиСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетБэйджейСотрудников.СрезПервых КАК УчетБэйджейСотрудниковСрезПервых
	|		ПО БэйджиСотрудников.Владелец = УчетБэйджейСотрудниковСрезПервых.Сотрудник
	|ГДЕ
	|	БэйджиСотрудников.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда			
		Если Рез.БэйджАктуален Тогда			
			
			Возврат Рез.ссылка;		
		Иначе
			Сообщить("Бэйдж сотрудника более не актуален. ");
			Возврат Неопределено;	
		КонецЕсли;				
	Иначе
		Сообщить("Нет назначенного бейджа. ");
		Возврат Неопределено;	
	КонецЕсли;
	
	
КонецФункции


&НаКлиенте
Процедура НапечататьБейдж(Команда)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Бэйдж = ПолучитьБэйджНаСервере(Объект.Ссылка);
	
	Если Бэйдж = Неопределено Тогда	
		// вопрос о создании бэйджа
		Парам = Новый Структура("Сотрудник", Объект.Ссылка);
		ТекстВопроса = "Создать и назначить бэйдж на сотрудника " + Объект.Ссылка + "?";
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьБэйдж", ЭтаФорма, Парам), ТекстВопроса, РежимДиалогаВопрос.ДаНет);   	
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
		mas.НапечататьБэйджНаСервере(Бэйдж, ТабличныйДокумент);	
		ТабличныйДокумент.Показать();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура БейджНеАктуален(Команда)
	Бэйдж = ПолучитьБэйджНаСервере(Объект.Ссылка);
	Если Бэйдж <> Неопределено Тогда
		Парам = Новый Структура("Бэйдж", Бэйдж);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтвета_БэйджНеАктуален", ЭтаФорма, Парам), "Аннулировать бэйдж?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтвета_БэйджНеАктуален(Ответ, Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда	
		Бэйдж = Парам.Бэйдж;
		Если Бэйдж <> Неопределено Тогда	
			mas.ДеАктуализироватьБэйдж(Бэйдж);	
			Элементы.ФормаБейджНеАктуален.Доступность = Ложь;
		Иначе
			//#Если Клиента Тогда
			//	Сообщить("У сотрудника нет активного бэйджа");
			//#КонецЕсли
		КонецЕсли;
		
	Иначе
	КонецЕсли;
	
КонецПроцедуры




&НаКлиенте
Процедура ТаблицаПредпочитаемыхРайоновПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Элементы.ТаблицаПредпочитаемыхРайонов.ТекущиеДанные.Модифицировано = Истина;
	Если НоваяСтрока Тогда
		Элементы.ТаблицаПредпочитаемыхРайонов.ТекущиеДанные.Актуален = Истина;
		Элементы.ТаблицаПредпочитаемыхРайонов.ТекущиеДанные.Порядок = ТаблицаПредпочитаемыхРайонов.количество();
	Иначе
		Если Не Элементы.ТаблицаПредпочитаемыхРайонов.ТекущиеДанные.Актуален Тогда
			Элементы.ТаблицаПредпочитаемыхРайонов.ТекущиеДанные.Порядок = 0;
		КонецеСли;	
	КонецеСли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредпочитаемыхРайоновПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредпочитаемыхРайоновПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура УстановкаФильтраПредпочитаемыхАктивныхПолигонов()
	Элементы.ТаблицаПредпочитаемыхРайоновОтборАктивныхПолигонов.Пометка = Не Элементы.ТаблицаПредпочитаемыхРайоновОтборАктивныхПолигонов.Пометка;
	
	Если Элементы.ТаблицаПредпочитаемыхРайоновОтборАктивныхПолигонов.Пометка Тогда
		ФМ = Новый ФиксированнаяСтруктура("Актуален", Истина);
		Элементы.ТаблицаПредпочитаемыхРайонов.ОтборСтрок = ФМ;
	Иначе
		Элементы.ТаблицаПредпочитаемыхРайонов.ОтборСтрок = Неопределено;
	КонецеСли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтборАктивныхПредпочитаемыхПолигонов(Команда)
	// Вставить содержимое обработчика.
	УстановкаФильтраПредпочитаемыхАктивныхПолигонов();
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПредпочитаемыйПолигонВниз(Команда)
	// Вставить содержимое обработчика.
	ИзменитьПорядокПолигона(Элементы.ТаблицаПредпочитаемыхРайонов.ТекущиеДанные.Полигон, -1);
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокПолигона(Полигон, Позиция)
	Таб1 = РеквизитФормыВЗначение("ТаблицаПредпочитаемыхРайонов", Тип("ТаблицаЗначений"));
	
	Таб = Таб1.Скопировать();
	
	Таб.Очистить();
	
	Для Каждого Тек Из Таб1 Цикл
		Если Не Тек.Актуален Тогда
			Продолжить;
		КонецеСли;
		
		Нов = Таб.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Тек);
	КонецЦикла;	
	
	ТекСтрока = Таб.Найти(Полигон.Ссылка);
	ТекПозиция = ТекСтрока.Порядок;
	
	ТекСтрока.Модифицировано = Истина;
	
	ПозицияПоиска = ТекПозиция - Позиция;
	
	Если ПозицияПоиска > Таб.Количество() Тогда
		ПозицияПоиска = 1;
		Возврат;
	ИначеЕсли ПозицияПоиска = 0 Тогда
		ПозицияПоиска = Таб.Количество();
		Возврат;
	КонецеСли;
	
	НайСтрокаЗамены = Таб.Найти(ПозицияПоиска);
	НайСтрокаЗамены.Модифицировано = Истина;
	
	Если ПозицияПоиска = 1 Тогда
		НайСтрокаЗамены.Порядок = Таб.Количество();
	ИначеЕсли ПозицияПоиска = Таб.Количество() Тогда
		НайСтрокаЗамены.Порядок = 1;
	Иначе	
		НайСтрокаЗамены.Порядок = НайСтрокаЗамены.Порядок + Позиция;
	КонецеСли;	
	
	Если ПозицияПоиска = Таб.Количество() Или ПозицияПоиска = 1 Тогда
		ТекСтрока.Порядок = ПозицияПоиска;
	Иначе	
		ТекСтрока.Порядок = ТекСтрока.Порядок - Позиция;
	КонецеСли;	
	
	
	Таб.Сортировать("Порядок Возр");
	
	ЗначениеВРеквизитФормы(Таб, "ТаблицаПредпочитаемыхРайонов");
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаРайонов1ПолигонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Струк = Новый Структура;
	Струк.Вставить("Водитель", Объект.Ссылка);
	Струк.Вставить("СхемаПолигонов", СхемаПолигонов);
	ПолеВыбора = "ТаблицаПредпочитаемыхРайонов";
	Ф = ОткрытьФорму("Справочник.ПолигоныМаршрутизации.Форма.ФормаВыбораПредпочитаемыеПолигоны", Струк, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПредпочитаемыйПолигонВверх(Команда)
	ИзменитьПорядокПолигона(Элементы.ТаблицаПредпочитаемыхРайонов.ТекущиеДанные.Полигон, 1);
КонецПроцедуры

//Геннадий 10.06.2020 ->
&НаКлиенте
Процедура НомерЛичногоТелефонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСФизЛицамиКлиент.ПроверитьСменуТелефона(Текст, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийФЛОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСФизЛицамиКлиент.ПроверитьСменуКомментария(Текст, ЭтаФорма);
КонецПроцедуры
//Геннадий 10.06.2020 <-

//Асеев 15.02.2023 (Задача № 4985)>>>
&НаКлиенте
Процедура ДокументСерияПриИзменении(Элемент)
	МодифицированностьПаспортныхДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументНомерПриИзменении(Элемент)
	МодифицированностьПаспортныхДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументКемВыданПриИзменении(Элемент)
	МодифицированностьПаспортныхДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументДатаВыдачиПриИзменении(Элемент)
	МодифицированностьПаспортныхДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументКодПодразделенияПриИзменении(Элемент)
	МодифицированностьПаспортныхДанных = Истина;
КонецПроцедуры
//Асеев 15.02.2023 (Задача № 4985)<<<

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Асеев 15.02.2023 (Задача № 4985)>>>
	Если МодифицированностьПаспортныхДанных Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыУдостоверяющиеЛичность.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
		|ГДЕ
		|	ДокументыУдостоверяющиеЛичность.КодИМНС = ""21""";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаписьРегистра = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Период = ТекущаяДата();
			ЗаписьРегистра.ФизЛицо = ТекущийОбъект.ФизЛицо;
			ЗаписьРегистра.ДокументВид = Выборка.Ссылка;
			ЗаписьРегистра.ДокументСерия = ДокументСерия;
			ЗаписьРегистра.ДокументНомер = ДокументНомер;
			ЗаписьРегистра.ДокументДатаВыдачи = ДокументДатаВыдачи;
			ЗаписьРегистра.ДокументКемВыдан = ДокументКемВыдан;
			ЗаписьРегистра.ДокументКодПодразделения = ДокументКодПодразделения;
			ЗаписьРегистра.Записать();
		КонецЕсли;
	КонецЕсли;
	//Асеев 15.02.2023 (Задача № 4985)<<<
	
КонецПроцедуры



