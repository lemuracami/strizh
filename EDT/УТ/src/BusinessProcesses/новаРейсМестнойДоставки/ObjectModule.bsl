
Перем ИсходнаяПометкаУдаления;
Перем Район;

// Возвращает таблицу отображения вариантов карты маршрута.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаВариантов]>
//
Функция ПолучитьВариантыКартыМаршрута() Экспорт
	тзВарианты = Новый ТаблицаЗначений;
	тзВарианты.Колонки.Добавить("ИмяЭлемента");
	тзВарианты.Колонки.Добавить("Роль");
	тзВарианты.Колонки.Добавить("ЭлементыДа", Новый ОписаниеТипов("Массив"));
	тзВарианты.Колонки.Добавить("ЭлементыНет", Новый ОписаниеТипов("Массив"));
	
	стрВариант = тзВарианты.Добавить();
	стрВариант.ИмяЭлемента = "СогласованиеРейсаНеобходимо";
	стрВариант.Роль = Справочники.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки;
	стрВариант.ЭлементыДа.Добавить("Линия21");
	стрВариант.ЭлементыДа.Добавить("СогласованиеРейсаМестнойДоставки");
	стрВариант.ЭлементыДа.Добавить("Линия3");
	стрВариант.ЭлементыНет.Добавить("Линия20");
	
	стрВариант = тзВарианты.Добавить();
	стрВариант.ИмяЭлемента = "ПодготовкаРейсаНеобходима";
	стрВариант.Роль = Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки;
	стрВариант.ЭлементыДа.Добавить("Линия16");
	стрВариант.ЭлементыДа.Добавить("ПодготовкаРейсаМестнойДоставки");
	стрВариант.ЭлементыДа.Добавить("Линия17");
	стрВариант.ЭлементыНет.Добавить("Линия15");
	
	стрВариант = тзВарианты.Добавить();
	стрВариант.ИмяЭлемента = "СопровождениеРейсаНеобходмо";
	стрВариант.Роль = Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки;
	стрВариант.ЭлементыДа.Добавить("Линия23");
	стрВариант.ЭлементыДа.Добавить("НачатьСопровождениеДоставокРейса");
	стрВариант.ЭлементыДа.Добавить("Линия13");
	стрВариант.ЭлементыДа.Добавить("СопровождениеРейсаМестнойДоставки");
	стрВариант.ЭлементыДа.Добавить("Линия8");
	стрВариант.ЭлементыДа.Добавить("ЗавершитьСопровождениеДоставокРейса");
	стрВариант.ЭлементыДа.Добавить("Линия12");
	стрВариант.ЭлементыНет.Добавить("Линия22");
	стрВариант.ЭлементыНет.Добавить("ЗафиксироватьВыполнениеМаршрута");
	стрВариант.ЭлементыНет.Добавить("Линия24");
	
	стрВариант = тзВарианты.Добавить();
	стрВариант.ИмяЭлемента = "ЗавершениеДоставкиНеобходимо";
	стрВариант.Роль = Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки;
	стрВариант.ЭлементыДа.Добавить("Линия28");
	стрВариант.ЭлементыДа.Добавить("ЗавершениеРейсаМестнойДоставки");
	стрВариант.ЭлементыДа.Добавить("Линия9");
	стрВариант.ЭлементыНет.Добавить("Линия27");
	стрВариант.ЭлементыНет.Добавить("Линия10");
	стрВариант.ЭлементыНет.Добавить("СоздатьОтчетВодителя");
	
	Возврат тзВарианты;
КонецФункции

Процедура ПроверкаРезультатаПланированияРейсаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	Если РейсОтменен Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Отменен;
		
	ИначеЕсли РейсЗапланирован Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Запланирован;
		ПодготовитьРейсДляWMS();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаРезультатаСогласованияРейсаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	Если РейсОтменен Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Отменен;
		
	ИначеЕсли РейсСогласован Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Принят;
		
	Иначе
		Результат = ТочкаВыбораВарианта.Варианты.ВозвратНаПланирование;
		//Результат = ТочкаВыбораВарианта.Варианты.Отменен;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДополнительныеСвойства.Свойство("ПредыдущаяВерсия") Тогда
		ПредВерсия = ДополнительныеСвойства.ПредыдущаяВерсия;
		Если ПредВерсия.Транспорт <> Транспорт
		 Или ПредВерсия.Водитель <> Водитель
		 Или ПредВерсия.ДатаНачала <> ДатаНачала Тогда
			новаМестнаяДоставка.ПересчитатьЗакрытиеПоРейсу(ПредВерсия, Истина); 
		КонецЕсли;
	КонецЕсли;
	
	новаМестнаяДоставка.ПересчитатьЗакрытиеПоРейсу(ЭтотОбъект, РейсОтменен);
	
	Если ПометкаУдаления <> ИсходнаяПометкаУдаления Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	новаОтчетВодителя.Ссылка КАК ОтчетВодителя,
		|	NULL КАК Задача
		|ИЗ
		|	Документ.новаОтчетВодителя КАК новаОтчетВодителя
		|ГДЕ
		|	новаОтчетВодителя.Рейс = &БизнесПроцесс
		| И новаОтчетВодителя.ПометкаУдаления = &ИсходнаяПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	новаЗадачаРейсаМестнойДоставки.Ссылка
		|ИЗ
		|	Задача.новаЗадачаРейсаМестнойДоставки КАК новаЗадачаРейсаМестнойДоставки
		|ГДЕ
		|	новаЗадачаРейсаМестнойДоставки.БизнесПроцесс.Ссылка = &БизнесПроцесс
		| И новаЗадачаРейсаМестнойДоставки.ПометкаУдаления = &ИсходнаяПометкаУдаления";
		Запрос.Параметры.Вставить("БизнесПроцесс", Ссылка);
		Запрос.Параметры.Вставить("ИсходнаяПометкаУдаления", ИсходнаяПометкаУдаления);
		тзОтчетыВодителейИЗадачи = Запрос.Выполнить().Выгрузить();
		
		Для Каждого стрОтчетыВодителейИЗадачи Из тзОтчетыВодителейИЗадачи Цикл
			Если ЗначениеЗаполнено(стрОтчетыВодителейИЗадачи.ОтчетВодителя) Тогда
				обРейс = стрОтчетыВодителейИЗадачи.ОтчетВодителя.ПолучитьОбъект();
				обРейс.УстановитьПометкуУдаления(ПометкаУдаления);
			Иначе
				обЗадача = стрОтчетыВодителейИЗадачи.Задача.ПолучитьОбъект();
				обЗадача.УстановитьПометкуУдаления(ПометкаУдаления);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
    новаМестнаяДоставка.ОбновитьСостояниеСборок(Ссылка);
КонецПроцедуры

Процедура ПланированиеРейсаМестнойДоставкиПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	РейсОтменен = Задача.РейсОтменен;
	РейсСогласован = Задача.РейсСогласован;
	РейсЗапланирован = Задача.РейсЗапланирован;
	РейсНадоПерепланировать = Ложь;
	//СделатьПеремещениеТоваровНаСборку();
КонецПроцедуры

Процедура СделатьПеремещениеТоваровНаСборку()
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ПеремещениеТоваров.Ссылка КАК Док
	            |ИЗ
	            |	РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	            |		ПО новаЗаданияРейсов.Доставка.Номер = ПеремещениеТоваров.Номер
	            |ГДЕ
	            |	новаЗаданияРейсов.Рейс.Ссылка = &ВыбРейс";
	Зап.УстановитьПараметр("ВыбРейс", Ссылка);	
	
	Рез = Зап.Выполнить().Выгрузить();
	
	Для Каждого Тек Из Рез Цикл
		Д = Тек.Док;
		Если ЗначениеЗаполнено(Д) Тогда
			Док = Д.ПолучитьОбъект();
			Док.Подтверждено = Истина;
			Док.Записать(РежимЗаписиДокумента.Запись);
			Если Док.Проведен Тогда
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецеСли;	
			#Если Клиент Тогда
				Сообщить("Товары доставки " + СокрЛП(Д.Номер) + " перенесены в машину.");
			#КонецеСли	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Процедура ПередУдалением(Отказ)
	новаМестнаяДоставка.ПересчитатьЗакрытиеПоРейсу(ЭтотОбъект, Истина);
КонецПроцедуры

Процедура РейсОтмененПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	РейсОтменен = Истина;
	ОтменитьПодготовленныйРейсДляWMS();
КонецПроцедуры

Процедура СогласованиеРейсаМестнойДоставкиПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	РейсОтменен = Задача.РейсОтменен;
	РейсСогласован = Задача.РейсСогласован;
КонецПроцедуры

Процедура СопровождениеРейсаМестнойДоставкиПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	РейсВыполнен = Задача.РейсВыполнен;
КонецПроцедуры

Процедура ЗавершитьСопровождениеДоставокРейсаОбработка(ТочкаМаршрутаБизнесПроцесса)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	Задачи.Ссылка КАК Задача
	|ИЗ
	|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки),
	|		НЕ Выполнена И БизнесПроцесс.Доставка В (ВЫБРАТЬ
	|				Доставка
	|			ИЗ
	|				РегистрСведений.новаЗаданияРейсов
	|			ГДЕ
	|				Рейс = &Рейс
	|			)) КАК Задачи";
	
	Запрос.УстановитьПараметр("Рейс", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		обЗадача = Выборка.Задача.ПолучитьОбъект();
		обЗадача.ДоставкаВыполнена = РейсВыполнен;
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
КонецПроцедуры

Процедура ОтменитьПланированиеДоставокРейсаОбработка(ТочкаМаршрутаБизнесПроцесса)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	Задачи.Ссылка КАК Задача
	|ИЗ
	|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки),
	|		НЕ Выполнена И БизнесПроцесс.Доставка В (ВЫБРАТЬ
	|				Доставка
	|			ИЗ
	|				РегистрСведений.новаЗаданияРейсов
	|			ГДЕ
	|				Рейс = &Рейс
	|			)) КАК Задачи";
	
	Запрос.УстановитьПараметр("Рейс", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		обЗадача = Выборка.Задача.ПолучитьОбъект();
		обЗадача.ДоставкаСогласована = Ложь;
		обЗадача.ДоставкаЗапланирована = Ложь;
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
КонецПроцедуры

Процедура НачатьСопровождениеДоставокРейсаОбработка(ТочкаМаршрутаБизнесПроцесса)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	Задачи.Ссылка КАК Задача
	|ИЗ
	|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки),
	|		НЕ Выполнена И БизнесПроцесс.Доставка В (ВЫБРАТЬ
	|				Доставка
	|			ИЗ
	|				РегистрСведений.новаЗаданияРейсов
	|			ГДЕ
	|				Рейс = &Рейс
	|			)) КАК Задачи";
	
	Запрос.УстановитьПараметр("Рейс", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		обЗадача = Выборка.Задача.ПолучитьОбъект();
		обЗадача.ДоставкаСогласована = Истина;
		обЗадача.ВыполнитьЗадачу();
	КонецЦикла;
КонецПроцедуры

// Определяет, все ли данные по рейсу введены.
//
// Возвращаемое значение:
//  <Булево>
//
Функция РейсМожноЗавершить() Экспорт
	Возврат ЗначениеЗаполнено(новаМестнаяДоставка.ПолучитьОтчетРейса(Ссылка));
КонецФункции

Процедура ЗавершениеРейсаМестнойДоставкиПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если Не РейсМожноЗавершить() Тогда
#Если Клиент Тогда
		Предупреждение("Не введен отчет водителя!");
#КонецЕсли		
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПодготовкаРейсаНеобходимаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = новаМестнаяДоставка.НужноВыполнятьТочкуМаршрута(Справочники.новаЭтапыМестнойДоставки.ПодготовкаКВыездуМестнойДоставки);
	Если Не Результат Тогда
		РейсПодготовлен = Истина;
		РейсОтменен = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ПодготовкаРейсаМестнойДоставкиПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	РейсПодготовлен = Задача.РейсПодготовлен;
	РейсОтменен = Задача.РейсОтменен;
КонецПроцедуры

Процедура ПроверкаРезультатаПодготовкиРейсаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если РейсПодготовлен Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Подготовлен;
		
	ИначеЕсли РейсОтменен Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Отменен;
		
	Иначе
		Результат = ТочкаВыбораВарианта.Варианты.ВозвратНаПланирование;
		
	КонецЕсли;
	//Если РейсПодготовлен Тогда
	//	Результат = ТочкаВыбораВарианта.Варианты.Подготовлен;
	//	
	//Иначе
	//	Результат = ТочкаВыбораВарианта.Варианты.Отменен;
	//
	//КонецЕсли;
	
КонецПроцедуры

Процедура СогласованиеРейсаНеобходимоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = новаМестнаяДоставка.НужноВыполнятьТочкуМаршрута(Справочники.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки);
	Если Не Результат Тогда
		РейсСогласован = Истина;
		РейсОтменен = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура СопровождениеРейсаНеобходмоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = новаМестнаяДоставка.НужноВыполнятьТочкуМаршрута(Справочники.новаЭтапыМестнойДоставки.СопровождениеМестнойДоставки);
КонецПроцедуры

Процедура ЗавершитьДоставкиРейсаОбработка(ТочкаМаршрутаБизнесПроцесса)
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Задачи.Ссылка КАК Задача,
	//|	ЕСТЬNULL(ОтчетВодителя.Выполнено, ЛОЖЬ) КАК ДоставкаВыполнена,
	//|	ОтчетВодителя.РезультатДоставки КАК РезультатДоставки
	//|ИЗ
	//|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(
	//|			ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки),
	//|			(НЕ Выполнена)
	//|				И БизнесПроцесс.Доставка В
	//|					(ВЫБРАТЬ
	//|						РегистрСведений.новаЗаданияРейсов.Доставка
	//|					ИЗ
	//|						РегистрСведений.новаЗаданияРейсов
	//|					ГДЕ
	//|						РегистрСведений.новаЗаданияРейсов.Рейс = &Рейс)) КАК Задачи
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	Документ.новаОтчетВодителя.Задания КАК ОтчетВодителя
	//|ПО (ОтчетВодителя.Задание = Задачи.БизнесПроцесс.Доставка)
	//|ГДЕ
	//|	ОтчетВодителя.Ссылка.Рейс = &Рейс
	//|";
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Задачи.Ссылка КАК Задача,
	//               |	ЕСТЬNULL(ОтчетВодителя.Выполнено, ЛОЖЬ) КАК ДоставкаВыполнена,
	//               |	ОтчетВодителя.РезультатДоставки КАК РезультатДоставки
	//               |ИЗ
	//               |	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки), НЕ Выполнена) КАК Задачи
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.новаОтчетВодителя.Задания КАК ОтчетВодителя
	//               |		ПО (ОтчетВодителя.Задание = Задачи.БизнесПроцесс.Доставка)
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.новаЗаданияРейсов КАК новаЗаданияРейсов
	//               |		ПО (ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.новаЗавершениеМестнойДоставки).Доставка.Ссылка = новаЗаданияРейсов.Доставка.Ссылка)
	//               |ГДЕ
	//               |	ОтчетВодителя.Ссылка.Рейс = &Рейс
	//               |	И новаЗаданияРейсов.Рейс.Ссылка = &Рейс";
	//Запрос.УстановитьПараметр("Рейс", Ссылка);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	обЗадача = Выборка.Задача.ПолучитьОбъект();
	//	Попытка
	//	обЗадача.ДоставкаЗавершена = Истина;
	//Исключение
	//	рр = 1;
	//	КонецПопытки;
	//	Если  Выборка.РезультатДоставки = Справочники.новаРезультатМестнойДоставки.ПустаяСсылка() Тогда
	//		мРезультат = Справочники.новаРезультатМестнойДоставки.Выполнена;
	//	Иначе
	//		мРезультат = Выборка.РезультатДоставки ;
	//	КонецЕсли;
	//	
	//	Если мРезультат.РезультатВыполнения	= Перечисления.новаРезультатВыполненияМестнойДоставки.Выполнена Тогда
	//		обЗадача.ДоставкаВыполнена = Истина;
	//		обЗадача.ДоставкаВыполненаЧастично = Ложь;
	//		
	//	ИначеЕсли мРезультат.РезультатВыполнения = Перечисления.новаРезультатВыполненияМестнойДоставки.ВыполненаЧастично Тогда
	//		обЗадача.ДоставкаВыполнена = Ложь;
	//		обЗадача.ДоставкаВыполненаЧастично = Истина;
	//		
	//	Иначе
	//		обЗадача.ДоставкаВыполнена = Ложь;
	//		обЗадача.ДоставкаВыполненаЧастично = Ложь;
	//	КонецЕсли;	
	//	обЗадача.РезультатДоставки = мРезультат;
	//	обЗадача.ВыполнитьЗадачу();
	//КонецЦикла;
	//
	//новаОбщиеПроцедуры.ОповеститьОбОбновлении("Задача.новаЗадачаМестнойДоставки");	
КонецПроцедуры

Процедура ЗавершитьПланированиеДоставокРейсаОбработка(ТочкаМаршрутаБизнесПроцесса)
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ 
	//|	Задачи.Ссылка КАК Задача
	//|ИЗ
	//|	Задача.новаЗадачаМестнойДоставки.ЗадачиПоИсполнителю(ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.СогласованиеПланированияМестнойДоставки),
	//|		НЕ Выполнена И БизнесПроцесс.Доставка В (ВЫБРАТЬ
	//|				Доставка
	//|			ИЗ
	//|				РегистрСведений.новаЗаданияРейсов
	//|			ГДЕ
	//|				Рейс = &Рейс
	//|			)) КАК Задачи";
	//
	//Запрос.УстановитьПараметр("Рейс", Ссылка);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	обЗадача = Выборка.Задача.ПолучитьОбъект();
	//	обЗадача.ДоставкаСогласована = Истина;
	//	обЗадача.ВыполнитьЗадачу();
	//КонецЦикла;
КонецПроцедуры

// Рассчитывает итоговые реквизиты рейса.
//
//Процедура РассчитатьИтоговыеПоказатели() Экспорт
Процедура РассчитатьИтоговыеПоказатели(ОснРайон = Неопределено) Экспорт	
	//Грузоподъемность = Транспорт.Грузоподъемность * 1000;
	//ПроцентЗагрузкиПоВесу = ?(Грузоподъемность = 0, 0, 100 * Вес / Грузоподъемность);
	//ПревышенВес = ПроцентЗагрузкиПоВесу > 100;
	//
	//ОбъемТранспорта = Транспорт.ОбъемКузова;
	//ПроцентЗагрузкиПоОбъему = ?(ОбъемТранспорта = 0, 0, 100 * Объем / ОбъемТранспорта);
	//ПревышенОбъем = ПроцентЗагрузкиПоОбъему > 100;
	//
	//Вместимость = Транспорт.Вместимость;
	//ПроцентЗагрузкиПоЕдиницамПеревозки = ?(Вместимость = 0, 0, 100 * КоличествоЕдиницПеревозки / Вместимость);
	//ПревышеноКоличествоЕдиницПеревозки = ПроцентЗагрузкиПоЕдиницамПеревозки > 100;
	
	//Если ОснРайон <> Неопределено Тогда
	//	
	//	ОсновнойРайон = ОснРайон
	//	
	//Иначе 
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	Районы.Район КАК Район
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		Районы.Район КАК Район,
	//	|		КОЛИЧЕСТВО(Районы.Район) КАК Количество
	//	|
	//	|	ИЗ
	//	|		РегистрСведений.новаТочкиМаршрутаРейсов КАК Маршрут
	//	|
	//	|	ЛЕВОЕ СОЕДИНЕНИЕ
	//	|		РегистрСведений.новаРайоныАдресов КАК Районы
	//	|	ПО
	//	|		Районы.Адрес = Маршрут.ТочкаМаршрута.Адрес
	//	|	  И Районы.Классификатор = &Классификатор
	//	|
	//	|	ГДЕ
	//	|		Маршрут.Рейс = &Рейс
	//	|	  И Маршрут.Действие <> ЗНАЧЕНИЕ(Перечисление.новаДействияВТочкеРейсаМестнойДоставки.Погрузка)
	//	|	  И НЕ Маршрут.МаршрутСопровождения
	//	|
	//	|	СГРУППИРОВАТЬ ПО Районы.Район) КАК Районы
	//	|
	//	|УПОРЯДОЧИТЬ ПО Районы.Количество УБЫВ";
	//	
	//	Запрос.УстановитьПараметр("Классификатор", новаКарты.ПолучитьТекущийКлассификаторРайонов());
	//	Запрос.УстановитьПараметр("Рейс", ?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка));
	//	
	//	тзРайоны = Запрос.Выполнить().Выгрузить();
	//	Если тзРайоны.Количество() = 0 Тогда
	//		ОсновнойРайон = Неопределено;
	//	Иначе
	//		ОсновнойРайон = тзРайоны[0].Район;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ВсеДоходы = 0;
	//ВсеРасходы = 0;	
	//
	//Для Каждого стрДоходРасход Из ДоходыРасходы Цикл
	//	Если стрДоходРасход.Статья.Доход Тогда
	//		ВсеДоходы = ВсеДоходы + стрДоходРасход.Сумма;
	//	Иначе
	//		ВсеРасходы = ВсеРасходы + стрДоходРасход.Сумма;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	//РассчитатьИтоговыеПоказатели();
	РассчитатьИтоговыеПоказатели(Район);
	
	Если Не ЭтоНовый() Тогда
		обИсточник = Ссылка.ПолучитьОбъект();
		ДополнительныеСвойства.Вставить("ПредыдущаяВерсия", обИсточник);
	КонецЕсли;
КонецПроцедуры

Процедура СопровождениеРейсаМестнойДоставкиПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)	
	НаборЗаписей = РегистрыСведений.новаТочкиМаршрутаРейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рейс.Установить(Ссылка);
	НаборЗаписей.Отбор.МаршрутСопровождения.Установить(Ложь);
	НаборЗаписей.Прочитать();
	тзТочки = НаборЗаписей.Выгрузить();
	тзТочки.ЗаполнитьЗначения(Истина, "МаршрутСопровождения");
	НаборЗаписей.Загрузить(тзТочки);
	НаборЗаписей.Отбор.МаршрутСопровождения.Установить(Истина);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.новаЗаданияРейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рейс.Установить(Ссылка);
	НаборЗаписей.Отбор.МаршрутСопровождения.Установить(Ложь);
	НаборЗаписей.Прочитать();
	тзТочки = НаборЗаписей.Выгрузить();
	тзТочки.ЗаполнитьЗначения(Истина, "МаршрутСопровождения");
	НаборЗаписей.Загрузить(тзТочки);
	НаборЗаписей.Отбор.МаршрутСопровождения.Установить(Истина);
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗафиксироватьВыполнениеМаршрутаОбработка(ТочкаМаршрутаБизнесПроцесса)
	// Заполнение регистра  новаТочкиМаршрутаРейсов Как будто бы на сопровождении.
	НаборЗаписей = РегистрыСведений.новаТочкиМаршрутаРейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рейс.Установить(Ссылка);
	НаборЗаписей.Отбор.МаршрутСопровождения.Установить(Ложь);
	НаборЗаписей.Прочитать();
	тзТочки = НаборЗаписей.Выгрузить();
	тзТочки.ЗаполнитьЗначения(Истина, "МаршрутСопровождения");
	НаборЗаписей.Загрузить(тзТочки);
	НаборЗаписей.Отбор.МаршрутСопровождения.Установить(Истина);
	НаборЗаписей.Записать();

	// Заполнение регистра  новаЗаданияРейсов Результатами = Выполнено.
	НаборЗаписей = РегистрыСведений.новаЗаданияРейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рейс.Установить(Ссылка);
	НаборЗаписей.Отбор.МаршрутСопровождения.Установить(Ложь);
	НаборЗаписей.Прочитать();
	тзТочки = НаборЗаписей.Выгрузить();
	тзТочки.ЗаполнитьЗначения(Истина, "МаршрутСопровождения");
   	НаборЗаписей.Загрузить(тзТочки);
	НаборЗаписей.Отбор.МаршрутСопровождения.Установить(Истина);
	НаборЗаписей.Записать();

	РейсВыполнен = Истина;
	РейсОтменен = Ложь;
КонецПроцедуры

Процедура ЗавершениеДоставкиНеобходимоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = новаМестнаяДоставка.НужноВыполнятьТочкуМаршрута(Справочники.новаЭтапыМестнойДоставки.ЗавершениеМестнойДоставки);
КонецПроцедуры

Процедура СоздатьОтчетВодителяОбработка(ТочкаМаршрутаБизнесПроцесса)
	ОтчетВодителя = Документы.новаОтчетВодителя.НайтиПоРеквизиту("Рейс", Ссылка);
	Если Не ЗначениеЗаполнено(ОтчетВодителя) Тогда 
		обОтчетВодителя = Документы.новаОтчетВодителя.СоздатьДокумент();
		обОтчетВодителя.Заполнить(Ссылка);
		Форма = обОтчетВодителя.ПолучитьФорму();
		Форма.СохранитьИЗакрытьПослеОткрытия = Истина;
		Форма.Открыть();
		обОтчетВодителя.ПодтянутьДанныеМобильногоПриложения();
		обОтчетВодителя.ОбновитьИтоговыеПоказателиНаСервере(обОтчетВодителя);
		обОтчетВодителя.Записать(РежимЗаписиДокумента.Проведение);
	 КонецЕсли;
КонецПроцедуры

Процедура ПеренестиДатыПрибытияИОтправкиОбработка(ТочкаМаршрутаБизнесПроцесса)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.новаТочкиМаршрутаРейсов КАК новаТочкиМаршрутаРейсов
	|ГДЕ
	|	новаТочкиМаршрутаРейсов.Рейс = &Рейс
	| И новаТочкиМаршрутаРейсов.МаршрутСопровождения = Ложь";
	Запрос.УстановитьПараметр("Рейс",ЭтотОбъект.Ссылка);
	тзРейсаПлан = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	новаТочкиМаршрутаРейсов.ДатаПрибытия,
	|	новаТочкиМаршрутаРейсов.ДатаУбытия,
	|	новаТочкиМаршрутаРейсов.ТочкаМаршрута
	|ИЗ
	|	РегистрСведений.новаТочкиМаршрутаРейсов КАК новаТочкиМаршрутаРейсов
	|ГДЕ
	|	новаТочкиМаршрутаРейсов.Рейс = &Рейс
	| И новаТочкиМаршрутаРейсов.МаршрутСопровождения = Истина";
	Запрос.УстановитьПараметр("Рейс",ЭтотОбъект.Ссылка);
	тзРейсаФакт = Запрос.Выполнить().Выгрузить();
	
	Для Каждого стрРейсаПлан Из тзРейсаПлан Цикл
		ТоскаМаршрутаПлан = стрРейсаПлан.ТочкаМаршрута;
		стрРейсаФакт = тзРейсаФакт.Найти(ТоскаМаршрутаПлан, "ТочкаМаршрута");
		стрРейсаПлан.ДатаПрибытия = стрРейсаФакт.ДатаПрибытия;
		стрРейсаПлан.ДатаУбытия = стрРейсаФакт.ДатаУбытия;
		стрРейсаФакт = Неопределено;
	КонецЦикла;
	
	нзЗаписиРейсаПлан = РегистрыСведений.новаТочкиМаршрутаРейсов.СоздатьНаборЗаписей();
	нзЗаписиРейсаПлан.Отбор.Рейс.Установить(ЭтотОбъект.Ссылка);
	нзЗаписиРейсаПлан.Отбор.МаршрутСопровождения.Установить(Ложь);
	нзЗаписиРейсаПлан.Загрузить(тзРейсаПлан);
	нзЗаписиРейсаПлан.Записать();
КонецПроцедуры

Процедура ПодготовитьРейсДляWMS()
	Отбор = Новый Структура("Объект");
	Отбор.Объект =  ЭтотОбъект.Ссылка;
	регСостояния = РегистрыСведений.новаСостоянияОбъектовДляОбмена;
	менИзменения = Неопределено;
	выбИзменения = регСостояния.Выбрать(Отбор);
	Если выбИзменения.Следующий() Тогда
		менИзменения = выбИзменения.ПолучитьМенеджерЗаписи();
	Иначе
		менИзменения = РегистрыСведений.новаСостоянияОбъектовДляОбмена.СоздатьМенеджерЗаписи();
	КонецЕсли;
	
	менИзменения.Объект = ЭтотОбъект.Ссылка;
	менИзменения.Состояние = Перечисления.новаСостоянияОбъектовДляОбмена.Подготовлен;
	менИзменения.Записать();
КонецПроцедуры

Процедура ОтменитьПодготовленныйРейсДляWMS()
	Отбор = Новый Структура("Объект");
	Отбор.Объект =  ЭтотОбъект.Ссылка;
	регСостояния = РегистрыСведений.новаСостоянияОбъектовДляОбмена;
	менИзменения = Неопределено;
	выбИзменения = регСостояния.Выбрать(Отбор);
	Если выбИзменения.Следующий() Тогда
		менИзменения = выбИзменения.ПолучитьМенеджерЗаписи();
		менИзменения.Удалить();
	КонецЕсли;
КонецПроцедуры

//Передача данных на КСЛ для начала сопровождения
//
Процедура НачатьСопровождениеРейсаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	#Если Клиент Тогда
	новаМониторинг.НачатьСопровождениеРейса(Ссылка);
	#КонецЕсли
	
КонецПроцедуры

//Выполняется проверка соответствия показателей транспорта и обобщённых показателей доставок
//
//  Возвращаемое значение:
//    <Булево> - Истина рейс подтверждён, иначе ложь
///
Функция ПроверитьСоответствиеДоставокТранспорту() Экспорт  
	
	Результат = Истина;
	
	#Если Клиент Тогда
		
		Если ПревышенВес или ПревышенОбъем Тогда
			
			//Необходимо подтверждение логиста
			ТекстВопроса = "";
			
			Если ПревышенВес И ПревышенОбъем Тогда
				ТекстВопроса = "Превышены грузоподъемность и полезный объем транспорта! Продолжить выполнение операции?";
			ИначеЕсли ПревышенВес  Тогда 
				ТекстВопроса = "Превышена грузоподъемность транспорта! Продолжить выполнение операции?";
			ИначеЕсли ПревышенОбъем Тогда
				ТекстВопроса = "Превышен полезный объем транспорта! Продолжить выполнение операции?";
			КонецЕсли;
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(ТекстВопроса, Режим, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьЗначениеКлассификатораРейса(ОснРайон) Экспорт
	Район = ОснРайон;
КонецПроцедуры

Процедура ЗавершениеПланированияРейсовНеобходимоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = новаМестнаяДоставка.НужноВыполнятьТочкуМаршрута(Справочники.новаЭтапыМестнойДоставки.ЗавершениеПланирования);
КонецПроцедуры

Процедура ЗавершениеПланированияРейсаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ПланированиеЗавершено = Не РейсНадоПерепланировать;
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Рейс.Ссылка КАК Рейс
	            |ИЗ
	            |	Документ.Рейс КАК Рейс
	            |ГДЕ
	            |	Рейс.РейсМестнойДоставки = &Рейс";
	Зап.УстановитьПараметр("Рейс", Ссылка);	
	
	Рез = Зап.Выполнить().Выгрузить();
	
	Если Рез.Количество() <> 0 Тогда
		//+++ БАО 08.06.2017 №1024 
		//Д = Рез[0].Рейс.ПолучитьОбъект();
		//Д.РейсЗакрыт = Истина;
		//Д.Записать(РежимЗаписиДокумента.Запись);
		baoВызовСервера.ДобавитьЗаписьВРегистрДокументыЗакрытыеДляИзменения(Рез[0].Рейс, Истина);
		//--- БАО 08.06.2017 №1024 
	КонецеСли;	
КонецПроцедуры

Процедура ПроверкаПерепланированияОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	Если ПланированиеЗавершено Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ПланированиеЗавершено;
	Иначе
		Результат = ТочкаВыбораВарианта.Варианты.ВозвратНаПланирование;
	КонецЕсли;
КонецПроцедуры

//Процедура ЗавершитьПланирование() Экспорт
//	
//КонецПроцедуры	

//Процедура ПроверкаВозвратаНаПланированиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
//	Результат = Ложь;
//	Если РейсНадоПерепланировать Тогда
//		Результат = Истина;
//	КонецЕсли;
//КонецПроцедуры

//Процедура ПроверкаПерепланированияОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
//	// Вставить содержимое обработчика.
//КонецПроцедуры

ИсходнаяПометкаУдаления = Ссылка.ПометкаУдаления;