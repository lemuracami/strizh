////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	Если СписокПлановОбмена.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Возможность настройки обмена данными не предусмотрена.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокСостоянияУзлов();
	
	РольДоступнаДобавлениеИзменениеОбменовДанными = ПользователиБСП.РолиДоступны("ДобавлениеИзменениеОбменовДанными");
	Если РольДоступнаДобавлениеИзменениеОбменовДанными Тогда
		ДобавитьКомандыСозданияНовогоОбмена();
	КонецЕсли;
	
	Элементы.СписокСостоянияУзловИзменитьУзелИнформационнойБазы.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
	Элементы.НастроитьРасписаниеВыполненияОбмена.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
	Элементы.НастроитьРасписаниеВыполненияОбмена1.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
	
	ЕстьПравоОбновления =  ПравоДоступа("ОбновлениеКонфигурацииБазыДанных", Метаданные);
	Элементы.ИнформацияОбменДаннымиПриостановленЕстьПравоОбновления.Видимость = ЕстьПравоОбновления;
	Элементы.ИнформацияОбменДаннымиПриостановленНетПраваОбновления.Видимость = Не ЕстьПравоОбновления;
	
	НадписьОбменДаннымиПриостановлен = ?(ЕстьПравоОбновления,
										 Элементы.НадписьОбменДаннымиПриостановленЕстьПравоОбновления,
										 Элементы.НадписьОбменДаннымиПриостановленНетПраваОбновления);
	
	НадписьОбменДаннымиПриостановлен.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НадписьОбменДаннымиПриостановлен.Заголовок, ПланыОбмена.ГлавныйУзел());
	
	ПроверитьСостояниеОбменаСГлавнымУзлом();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если    ИмяСобытия = "ВыполненОбменДанными"
		ИЛИ ИмяСобытия = "Запись_СценарииОбменовДанными"
		ИЛИ ИмяСобытия = "Запись_УзелПланаОбмена"
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСопоставленияОбъектов"
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСозданияОбменаДанными" Тогда
		
		// обновляем данные монитора
		ОбновитьДанныеМонитора();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокСостоянияУзлов

&НаКлиенте
Процедура СписокСостоянияУзловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(Элементы.СписокСостоянияУзлов.ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСостоянияУзловПриАктивизацииСтроки(Элемент)
	
	ЗаданыТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные <> Неопределено;
	
	Элементы.Настройка.Доступность = ЗаданыТекущиеДанные;
	Элементы.СписокСостоянияУзловИзменитьУзелИнформационнойБазы.Доступность = ЗаданыТекущиеДанные;
	
	Элементы.ГруппаКнопокВыполненияОбменаДанными.Доступность = ЗаданыТекущиеДанные;
	Элементы.КонтекстноеМенюСписокСостоянияДиагностика.Доступность = ЗаданыТекущиеДанные;
	Элементы.ГруппаКнопокНастройкиРасписания.Доступность = ЗаданыТекущиеДанные;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменДаннымиИнтерактивно(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	ОбменДаннымиКлиент.ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСценарииОбменаДанными(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	ОбменДаннымиКлиент.ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	ОбновитьДанныеМонитора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУзелИнформационнойБазы(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	ОткрытьЗначение(ТекущиеДанные.УзелИнформационнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма, "ВыгрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникНастройкиОбменаДанными(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными(Команда.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьДанныеМонитора()
	
	ИндексСтрокиСписокСостоянияУзлов = ПолучитьТекущийИндексСтроки("СписокСостоянияУзлов");
	
	// выполняем обновление таблиц монитора на сервере
	ОбновитьСписокСостоянияУзлов();
	
	// выполняем позиционирование курсора
	ВыполнитьПозиционированиеКурсора("СписокСостоянияУзлов", ИндексСтрокиСписокСостоянияУзлов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСостоянияУзлов()
	
	// обновляем данные в списке состояния узлов
	СписокСостоянияУзлов.Загрузить(ОбменДаннымиСервер.ТаблицаМонитораОбменаДанными(ОбменДаннымиПовтИсп.ПланыОбменаБСП()));
	
	ПроверитьСостояниеОбменаСГлавнымУзлом();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандыСозданияНовогоОбмена()
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
		
		ИмяПланаОбмена = Элемент.Значение;
		
		МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
		
		Если МенеджерПланаОбмена.ИспользоватьПомощникСозданияОбменаДанными() 
			И ОбменДаннымиПовтИсп.ДоступноИспользованиеПланаОбмена(ИмяПланаОбмена) Тогда
			
			Команды.Добавить(ИмяПланаОбмена);
			Команды[ИмяПланаОбмена].Заголовок = МенеджерПланаОбмена.ЗаголовокКомандыДляСозданияНовогоОбменаДанными();
			Команды[ИмяПланаОбмена].Действие  = "ОткрытьПомощникНастройкиОбменаДанными";
			
			Элементы.Добавить(ИмяПланаОбмена, Тип("КнопкаФормы"), Элементы.ПодменюСоздать);
			Элементы[ИмяПланаОбмена].ИмяКоманды = ИмяПланаОбмена;
			
			Если МенеджерПланаОбмена.ПланОбменаИспользуетсяВМоделиСервиса()
				И Не Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза Тогда
				
				ИмяКоманды = "[ИмяПланаОбмена]ПланОбменаИспользуетсяВМоделиСервиса";
				ИмяКоманды = СтрЗаменить(ИмяКоманды, "[ИмяПланаОбмена]", ИмяПланаОбмена);
				
				Команды.Добавить(ИмяКоманды);
				Команды[ИмяКоманды].Заголовок = МенеджерПланаОбмена.ЗаголовокКомандыДляСозданияНовогоОбменаДанными() + НСтр("ru = ' (в сервисе)'");
				Команды[ИмяКоманды].Действие  = "ОткрытьПомощникНастройкиОбменаДанными";
				
				Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.ПодменюСоздать);
				Элементы[ИмяКоманды].ИмяКоманды = ИмяКоманды;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийИндексСтроки(ИмяТаблицы)
	
	// возвращаемое значение функции
	ИндексСтроки = Неопределено;
	
	// при обновлении монитора выполняем позиционирование курсора
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИндексСтроки = ЭтаФорма[ИмяТаблицы].Индекс(ТекущиеДанные);
		
	КонецЕсли;
	
	Возврат ИндексСтроки;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПозиционированиеКурсора(ИмяТаблицы, ИндексСтроки)
	
	Если ИндексСтроки <> Неопределено Тогда
		
		// выполняем проверки позиционирования курсора после получения новых данных
		Если ЭтаФорма[ИмяТаблицы].Количество() <> 0 Тогда
			
			Если ИндексСтроки > ЭтаФорма[ИмяТаблицы].Количество() - 1 Тогда
				
				ИндексСтроки = ЭтаФорма[ИмяТаблицы].Количество() - 1;
				
			КонецЕсли;
			
			// позиционируем курсор
			Элементы[ИмяТаблицы].ТекущаяСтрока = ЭтаФорма[ИмяТаблицы][ИндексСтроки].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если спозициронировать строку не удалось, то устанавливаем текущей первую строку
	Если Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено
		И ЭтаФорма[ИмяТаблицы].Количество() <> 0 Тогда
		
		Элементы[ИмяТаблицы].ТекущаяСтрока = ЭтаФорма[ИмяТаблицы][0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеОбменаСГлавнымУзлом()
	
	Элементы.ИнформационнаяПанельТребуетсяОбновление.Видимость = ОбменДаннымиВызовСервера.ТребуетсяУстановкаОбновления();
	
КонецПроцедуры