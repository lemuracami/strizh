// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт;

&НаКлиенте
Перем Драйвер;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ГЛОБАЛЬНОГО КОНТЕКСТА

// Процедура - обработчик события "При начале работы системы".
//
//Процедура ПриНачалеРаботыСистемы()
//	
//	УправлениеСоединениямиИБКлиент.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
//КонецПроцедуры 



//// Функция возвращает объект для взаимодействия с торговым оборудованием.
////
//// Параметры:
////  Нет.
////
//// Возвращаемое значение:
////  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
////
//Функция ПолучитьСерверТО() Экспорт

//	Если глСерверТО = Неопределено Тогда
//		глСерверТО = Обработки.ТОСервер.Создать();
//	КонецЕсли;

//	Возврат глСерверТО;

//КонецФункции // ПолучитьСерверТО()


//&НаКлиенте
//Процедура Инициализаровать(Команда)
//   Попытка
//      ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверСканераШтрихКода","Comp" ,ТипВнешнейКомпоненты.Native);
//      Компонент = Новый ("AddIn.Comp.Scanner");
//   Исключение
//      Сообщить("Исключение при инициализации...");
//   КонецПопытки; 
//КонецПроцедуры


//&НаКлиенте
//// Процедура должна вызываться лишь один раз
//Процедура УстановитьКомпонент(Команда)
//   Попытка
//      УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверСканераШтрихКода");
//   Исключение
//      Сообщить("Не удалось устанвить внешнюю компоненту.");   
//   КонецПопытки;
//КонецПроцедуры


&НаКлиенте
Процедура ПриНачалеРаботыСистемы()
	
	
	УправлениеСоединениямиИБКлиент.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	
	
   // Попытка
   //   ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверСканераШтрихКода","Comp" ,ТипВнешнейКомпоненты.Native);
   //   Компонент = Новый ("AddIn.Comp.Scanner");
   //Исключение
   //   Сообщить("Исключение при инициализации...");
   //КонецПопытки;
   // 
   // Попытка		
   // 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверСканераШтрихКода");
   // Исключение		
   // 	Сообщить("Не удалось устанвить внешнюю компоненту.");   		
   // КонецПопытки;
   
   
    #Если ВебКлиент Тогда
  
    #Иначе
		
		Попытка 
		    ПрогИД="AddIn.Scanner";
		    ПодключитьВнешнююКомпоненту(ПрогИД);
		    Драйвер = Новый (ПрогИД);
			//Сообщить("Компонента для сканера штрих-кодов загружена!");
		Исключение
		    Сообщить ("Невозможно подключить внешнюю компоненту!");
		КонецПопытки;
		
		Попытка 
		    ВерсияИзДрайвера = Драйвер.ПолучитьНомерВерсии();
		Исключение
		    Сообщить ("Невозможно определить версию драйвера!");
		КонецПопытки;
		
		//Если Лев(СокрЛП(ВерсияИзДрайвера), 5) <> "8.0.8" Тогда 
		//    Сообщить ("Версия драйвера не поддерживается. Требуемая версия компоненты 1С:Сканер ШК - 8.0.8!");
		//КонецЕсли;
		
		

		//Если Драйвер.Подсоединить("Сканер штрихкода") <> 0 Тогда
		//    Сообщить ("Ошибка (1) при подключении устройства!");
		//КонецЕсли;
		Попытка
			
			Если Драйвер.Подсоединить("Сканер штрихкода") <> 0 Тогда
			    Сообщить("Ошибка (1) при подключении устройства!");
			КонецЕсли;				
			
			
			//при подключении USB-сканера с эмуляцией COM-порта указывать порт 5 в свойствах виртуального COM-порта в диспетчере устройств

			//сканер настроить - префикса нет, суффикс - CR

			Драйвер.БитДанных  = 8;
			Драйвер.Порт       = 0;
			Драйвер.Скорость   = 9600;
			Драйвер.СтопБит    = 1;
			Драйвер.СтопСимвол = 13;//CR - carriage return

			Драйвер.ОчиститьВход();
			Драйвер.ОчиститьВыход();
			
			
			Драйвер.ИмяСобытия = "ПолученШтрихкод";
			
			Если Драйвер.Занять(1) = 0 Тогда
			    Драйвер.УстройствоВключено = 1;
			    Драйвер.ПосылкаДанных      = 1;
			    Драйвер.ОчиститьВход();
			    Драйвер.ОчиститьВыход();
				//Сообщить("Сканер подключен и готов к работе!");
			    Если Драйвер.УстройствоВключено <> 1 Тогда
			        //Отключить();

			        Драйвер.УстройствоВключено = 0;
			        Драйвер.Освободить();
			        Драйвер.Отсоединить();
			        Сообщить ("Ошибка (2) при подключении устройства!");
			    КонецЕсли;
			Иначе
			    //Отключить();

			    Драйвер.УстройствоВключено = 0;
			    Драйвер.Освободить();
			    Драйвер.Отсоединить();
			    Сообщить ("Ошибка (3) при подключении устройства!");
			КонецЕсли;

		Исключение
		    Сообщить("Ошибка драйвера штрихкода");
		КонецПопытки;	
	
	#КонецЕсли
	
	ПодключениеСистемыВзаимодействия();
	
	//Якурнов
	РаботаСИТРПСервер.ВыполнитьОбновлениеСправочникаСписокПодсистемКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииРаботыСистемы()
    Если Драйвер <> Неопределено Тогда 
        Драйвер.УстройствоВключено = 0;
        Драйвер.Освободить();
        Драйвер.Отсоединить();
    КонецЕсли;
КонецПроцедуры

Процедура ПодключениеСистемыВзаимодействия()
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат;
	КонецЕсли;
		
	ИдентификаторОбсужденияСтрока = СерверВзаимодействияПривилегированный.ПолучитьЗначениеКонстанты("ИдентификаторОбсужденияСерверныхСообщенийБезКонтекста");
	Если ЗначениеЗаполнено(ИдентификаторОбсужденияСтрока) Тогда
		
		ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбсужденияСтрока);
		
		Если НЕ СерверВзаимодействияПривилегированный.ОбсуждениеСуществует(ИдентификаторОбсуждения) Тогда
			ИдентификаторОбсуждения = СерверВзаимодействияПривилегированный.СоздатьОбсуждениеБезКонтекста();
		КонецЕсли;
		
		СерверВзаимодействияПривилегированный.ДобавитьТекущегоПользователяВОбсуждение(ИдентификаторОбсуждения);
		
		ОписаниеОповещенияПодключенияОбработчика = Новый ОписаниеОповещения("ОбработкаОповещенияПодключенияСерверныхСообщенийБезКонтекста", КлиентскиеФункции,);
		ОписаниеОповещенияСерверныхСообщенийБезКонтекста = Новый ОписаниеОповещения("ОбработкаОповещенияСерверныхСообщенийБезКонтекста", КлиентскиеФункции,);
		СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(ОписаниеОповещенияПодключенияОбработчика, ИдентификаторОбсуждения, ОписаниеОповещенияСерверныхСообщенийБезКонтекста);
		
	КонецЕсли;
		
КонецПроцедуры