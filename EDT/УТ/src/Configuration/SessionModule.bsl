// Обработчик события УстановкаПараметровСеанса()
//
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса)
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		УстанавливаемыеПараметрыБСП = Новый Массив();
		УстанавливаемыеПараметрыБСП.Добавить("ОбменДаннымиВключен");
		УстанавливаемыеПараметрыБСП.Добавить("ИспользуемыеПланыОбмена");
		УстанавливаемыеПараметрыБСП.Добавить("ПравилаВыборочнойРегистрацииОбъектов");
		УстанавливаемыеПараметрыБСП.Добавить("ПравилаРегистрацииОбъектов");
		УстанавливаемыеПараметрыБСП.Добавить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО");
		
		ВнешнееЛогированиеСервер.ИнициализироватьВнешниеИсточникиДанных(); // Задача № 3411
		ВнешниеДанныеСервер.ИнициализироватьПодключенияБДВнешнегоХранилища();//Задача № 3749
		
	Иначе
		УстанавливаемыеПараметрыБСП = ИменаПараметровСеанса;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановкаПараметровСеанса(УстанавливаемыеПараметрыБСП);
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	
	ПараметрыСеанса.ЭтоТестоваяСреда = lem.ЭтоТестоваяСреда();
	
	ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными();
		
	ПолныеПрава.УстановитьПараметрыСеанса();
	
	//ПараметрыСеанса.РабочееМесто = lem_Клиент.УстановитьРабочееМесто();
	
	ПараметрыСеанса.ГруппаКонтрагентов_Принципалы = ОбщегоНазначенияСерверВызовСервера.ГруппаКонтрагентов_Принципалы();
	
	
	//БИТ Начало
	новаДоставка.УстановитьПараметрыСеанса();
	//БИТ Конец
	
	// Михушкин --->> 
	//Если РольДоступна("Пользователь") ИЛИ РольДоступна("РегиональныйЛогист") ИЛИ РольДоступна("РегиональныйТоваровед") ИЛИ РольДоступна("РегиональныйКладовщик") Тогда	
		ПараметрыСеанса.ТерминалДоставки = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТерминалДоставки");
	//КонецЕсли;
	// <<--- Михушкин 
	
	ПараметрыСеанса.ОтключитьПроверкуДинамическогоОбновления = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОтключитьПроверкуДинамическогоОбновления");
	
	//+++ БАО 05.06.2017 №976 
	ПараметрыСеанса.СтрокаПодключенияКБДФронта = Евген.СтрокаПодключенияКИнтернетМагазину(Истина);	
	//--- БАО 05.06.2017 №976 
	
	//+++ БАО 13.06.2017 №1064  
	ПараметрыСеанса.рэКомпанияRED = Константы.рэКомпанияRED.Получить();
	
	рэЭтоТестовыйРежим	= Константы.рэЭтоТестовыйРежим.Получить();
	ПараметрыСеанса.рэЭтоТестовыйРежим = ?(ЗначениеЗаполнено(рэЭтоТестовыйРежим),рэЭтоТестовыйРежим, Истина);
	//--- БАО 13.06.2017 №1064  
	
	
	ПараметрыСеанса.ИдентификаторБазыСтрижВнешнийИсточникДанных = Константы.ИдентификаторБазыСтрижВнешнийИсточникДанных.Получить();
	
	ДатаПримененияФЗ54 = Константы.ДатаВремяПереходаНаФЗ54.Получить();
	Если ЗначениеЗаполнено(ДатаПримененияФЗ54) Тогда
		Если ДатаПримененияФЗ54 = ТекущаяДата() Тогда 
			ПараметрыСеанса.ПрименяетсяФЗ54 = Ложь;
		Иначе	
			ПараметрыСеанса.ПрименяетсяФЗ54 = Истина;
		КонецеСли;	
	Иначе
		ПараметрыСеанса.ПрименяетсяФЗ54 = Ложь;
	КонецеСли;	
	
	//+++ БАО 29.06.2017 №1208 
	
	// АПДЕКС
	Попытка
		
		Если ИменаПараметровСеанса = Неопределено ИЛИ ИменаПараметровСеанса.Найти("APDEX_НастройкиЗамеров")<>Неопределено Тогда
			ХранилищеЗначения = Новый ХранилищеЗначения(Новый Соответствие);
			ПараметрыСеанса.APDEX_ТекущийЗамерВремени = ХранилищеЗначения;
			
			
			APDEX_Настройки = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьНастройки();
			APDEX_НастройкиЗамеров = Новый Структура;
			APDEX_НастройкиЗамеров.Вставить("APDEX_ОтключитьЗамер",APDEX_Настройки.APDEX_ОтключитьЗамер);
			APDEX_НастройкиЗамеров.Вставить("APDEX_МинимальноеВремяЗамера",APDEX_Настройки.APDEX_МинимальноеВремяЗамера);
			APDEX_НастройкиЗамеров.Вставить("APDEX_ИдентификаторБазыAPDEX",APDEX_Настройки.APDEX_ИдентификаторБазыAPDEX);
			APDEX_НастройкиЗамеров.Вставить("APDEX_СпособЗаписиЗамеров",APDEX_Настройки.APDEX_СпособЗаписиЗамеров);
			
			ПараметрыСеанса.APDEX_НастройкиЗамеров = Новый ФиксированнаяСтруктура(APDEX_НастройкиЗамеров);
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	//--- БАО 29.06.2017 №1208 
	
	//+++ БАО 06.07.2017 №1250
	Попытка
		новаИнтеграция.ИнициализироватьАвтоматическоеСозданиеМестнойДоставки();
	Исключение
	КонецПопытки;	
	
	
	ПараметрыСеанса.АктуальнаяСхемаЛогистическихБрейков = МаршрутизацияЗаказовСервер.ОпределитьАктуальнуюСхемуЛогистическихБрейков();
	
	
	НомерСоединения  = НомерСоединенияИнформационнойБазы();
	//ИмяПриложения	 = ПроцедурыИФункцииСеансаСервер.ПолучитьИмяПриложенияСеанса(НомерСоединения, Истина);
	ПараметрыСеансаИнформационнойБазы = ПроцедурыИФункцииСеансаСервер.ПолучитьПараметрыСеансаИнформационнойБазы(НомерСоединения, Истина);
	
	//// Якурнов 02.08.2018 13:28:28
	////ИмяКомпьютера = ПроцедурыИФункцииСеансаКлиент.ПолучитьЛокальныйКомпьютер();
	//Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Или СтрНайти("Фонов", ИмяПриложения) > 0 Тогда
	//	ПараметрыСеанса.РабочееМесто = ПроцедурыИФункцииСеансаСервер.УстановитьРабочееМесто(ИмяКомпьютера());
	////Иначе
	////	ПараметрыСеанса.РабочееМесто = ПроцедурыИФункцииСеансаСервер.УстановитьРабочееМесто(ИмяКомпьютера());
	//Иначе
	//	ПараметрыСеанса.РабочееМесто = Справочники.РабочиеМеста.Сервер;
	//КонецЕсли;
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		ПараметрыСеанса.РабочееМесто = ПроцедурыИФункцииСеансаСервер.УстановитьРабочееМесто(ПараметрыСеансаИнформационнойБазы.ИмяКомпьютера);
	ИначеЕсли СтрНайти("Фонов", ПараметрыСеансаИнформационнойБазы.ИмяПриложения) > 0 Тогда
		ПараметрыСеанса.РабочееМесто = ПроцедурыИФункцииСеансаСервер.УстановитьРабочееМесто(ИмяКомпьютера());
	//Иначе
	//	ПараметрыСеанса.РабочееМесто = ПроцедурыИФункцииСеансаСервер.УстановитьРабочееМесто(ИмяКомпьютера());
	Иначе
		ПараметрыСеанса.РабочееМесто = Справочники.РабочиеМеста.Сервер;
	КонецЕсли;
	
	
	
	// Якурнов 15.10.2018 14:51:15
	ПараметрыСеанса.oz_МагазинOZON = Константы.oz_МагазинOZON.Получить();
	
		
	Если lem.ПользователюВключенМониторингЗаказов() Тогда
		НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкаНачальнойСтраницы.ПолучитьСоставФорм();
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.МониторингЗаказов.Форма.Форма");
		НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкаНачальнойСтраницы);
	ИначеЕсли lem.ЭтоРабочееМестоКассира() Тогда
		НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкаНачальнойСтраницы.ПолучитьСоставФорм();
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.ЗавершениеРейсовМестнойДоставкиТонкийКлиент.Форма.Форма");
		//СоставФорм.ЛеваяКолонка.Добавить("Документ.новаОтчетВодителя.Форма.ФормаСпискаКассира");
		НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкаНачальнойСтраницы);
		
	ИначеЕсли mas.ПользователюВключенаРаботаСВозвратами() Тогда
		НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкаНачальнойСтраницы.ПолучитьСоставФорм();
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.РаботаСВозвратами.Форма.Форма");
		НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкаНачальнойСтраницы);
	ИначеЕсли ПолигональнаяМаршрутизацияСервер.ПользователюВключенаРаботаСПолигональнымМаршрутизатором() Тогда
		НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкаНачальнойСтраницы.ПолучитьСоставФорм();
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.ПолигональныйМаршрутизатор.Форма.ФормаУпр");
		НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкаНачальнойСтраницы);
	ИначеЕсли УчетОборудованияСервер.ПользователюВключенаРаботаСУчетомОборудования() Тогда
		НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкаНачальнойСтраницы.ПолучитьСоставФорм();
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Документ.УчетОборудования.Форма.ЖурналВыдачиОборудования");
		НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкаНачальнойСтраницы);
	ИначеЕсли МаршрутизацияЗаказовСервер.ПользователюДоступнаРаботаСРММаршрутизациейЭкипажей() Тогда
		//НастройкаИнтерфейсаКлиентскогоПриложения = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
		//СоставПанелей = НастройкаИнтерфейсаКлиентскогоПриложения.ПолучитьСостав();
		//СоставПанелей.Верх.Удалить(0);
		//СоставПанелей.Верх.Удалить(0);
		//НастройкаИнтерфейсаКлиентскогоПриложения.УстановитьСостав(СоставПанелей);
		//
		//НастройкаКлиентскогоПриложения = Новый НастройкиКлиентскогоПриложения;
		//НастройкаКлиентскогоПриложения.ОтображатьПанелиНавигацииИДействий = Ложь;
		//НастройкаКлиентскогоПриложения.ОтображатьПанельРазделов = Ложь;
		
		
		НастройкиИнтерфейса = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
		НастройкиСостава = НастройкиИнтерфейса.ПолучитьСостав();
		
		// Очистить настройки состава.
		НастройкиСостава.Верх.Очистить();
		НастройкиСостава.Лево.Очистить();
		НастройкиСостава.Низ.Очистить();
		НастройкиСостава.Право.Очистить();
		
		//Добавить снизу панель открытых
		НастройкиСостава.Низ.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
		
		// Загрузить настройки состава в пустой объект настроек.
		НастройкиИнтерфейса.УстановитьСостав(НастройкиСостава);
		
		// Положить объект настроек текущему пользователю в хранилище.
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", , НастройкиИнтерфейса);		
		
		
		НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкаНачальнойСтраницы.ПолучитьСоставФорм();
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.РМПостроенияМаршрутаЭкипажами.Форма.Форма");
		НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкаНачальнойСтраницы);
		
	Иначе		
		//Если РольДоступна("РаботаСВозвратами") Тогда	
		//	// ничего не делаем		
		//Иначе
		НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкаНачальнойСтраницы.ПолучитьСоставФорм();
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Документ.ПриходЗаказовНаСклад.Форма.ФормаСпискаДляОперативнойПриемкиЗаказов");
		НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкаНачальнойСтраницы);			
		//КонецЕсли;		
	КонецеСли;	
	
	
	
КонецПроцедуры // УстановкаПараметровСеанса

