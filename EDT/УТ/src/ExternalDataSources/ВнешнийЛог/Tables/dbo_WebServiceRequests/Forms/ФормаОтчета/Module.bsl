&НаКлиенте
Перем ДанныеРасшифровки;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПериодФормирования.ДатаНачала = НачалоДня(ТекущаяДата());
	ПериодФормирования.ДатаОкончания = КонецДня(ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере(ДанныеРасшифровки)
	
	СхемаКомпоновкиДанных = ВнешниеИсточникиданных.ВнешнийЛог.Таблицы.dbo_WebServiceRequests.ПолучитьМакет("ЛогСервисов");

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериодФормирования	= НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодФормирования"));
	ПараметрПериодФормирования.Значение = ПериодФормирования;
	ПараметрПериодФормирования.Использование = Истина;

	Если ИстопользоватьAPI Тогда
		
		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("APIType");
		
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = API.Код;
			
	КонецЕсли;
	
	Если ИспользоватьМетодAPI Тогда
		
		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("APIMethod");
		
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = МетодAPI.Код;
		
		//CeHbKA #3689 18.12.2019
		//Если МетодAPI.СжатиеЗапроса Тогда
		//	ГруппаЭлементовЗапросОтвет = НастройкиОтчета.Выбор.Элементы[5].Элементы;
		//	
		//	Для каждого ПолеОтчета Из ГруппаЭлементовЗапросОтвет Цикл
		//		Если Строка(ПолеОтчета.Поле) = "requestXML" Тогда
		//			ПолеОтчета.Использование = НЕ МетодAPI.СжатиеЗапроса; 
		//		КонецЕсли; 
		//		
		//		Если Строка(ПолеОтчета.Поле) = "responseXML" Тогда
		//			ПолеОтчета.Использование = НЕ МетодAPI.СжатиеОтвета; 
		//		КонецЕсли; 
		//		
		//	КонецЦикла; 
		//КонецЕсли; 
		//CeHbKA #3689 18.12.2019
		
	КонецЕсли;

	Если ИспользоватьОшибку Тогда
		
		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("isError");
		
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Ошибка;
		
	КонецЕсли;
	
	Если ИспользоватьОшибкуСервера Тогда
		
		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("isServerError");
		
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = ОшибкаСервера;
		
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);

	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки,Истина); 
	
	ДокументРезультат = новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

	Возврат ДокументРезультат;

КонецФункции


&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") тогда
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				ОткрытьЗначение(Поле.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Результат = СформироватьОтчетНаСервере(ДанныеРасшифровки);   

КонецПроцедуры


&НаКлиенте
Процедура МетодAPIНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(API) Тогда
		
		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Попытка
		
		АдресОбласти = Результат.ТекущаяОбласть.Имя;
		ВыделеннаяСтрока = СтрЗаменить(СтрРазделить(АдресОбласти,"C")[0], "R","");
		
		dateEvent	= ПолучитьЗначениеЯчейки(ВыделеннаяСтрока,1);
		APIType		= ПолучитьЗначениеЯчейки(ВыделеннаяСтрока,2);
		APIMethod	= ПолучитьЗначениеЯчейки(ВыделеннаяСтрока,3);
		
		Если НЕ ЗначениеЗаполнено(dateEvent)
			ИЛИ НЕ ЗначениеЗаполнено(APIType)
			ИЛИ НЕ ЗначениеЗаполнено(APIMethod) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сформируйте отчёт и сфокусируйтесь на любой ячейке в таблице");
			Возврат;
		КонецЕсли; 
		
		ДанныеСтруктура = ПолучитьДанныеСохраняемогоОтчета(dateEvent, APIType, APIMethod);
		
		Если ДанныеСтруктура = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно получить данные расшифровки для сохранения");
			Возврат;
		КонецЕсли; 
		
		
		Для каждого ЭлементСтруктуры Из ДанныеСтруктура Цикл
			
			Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
				ПоказатьДиалогСохраненияФайла(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЕсли; 			
			
		КонецЦикла; 

	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	Конецпопытки;			
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеЯчейки(НомерСтроки, НомерКолонки)
	
	Попытка	
		АдресЯчейки = "R" + НомерСтроки + "C" + Строка(НомерКолонки);
		ЗначениеGUID = Результат.ПолучитьОбласть(АдресЯчейки).ТекущаяОбласть.Текст;		
	Исключение
		Возврат Неопределено;	
	КонецПопытки; 
	
	Возврат ЗначениеGUID;
	
КонецФункции // ()
 
&НаСервере
Функция ПолучитьДанныеСохраняемогоОтчета(dateEvent, НаименованиеAPI, НаименованиеAPIMethod)
	
	API_Ссылка = Справочники.API.НайтиПоНаименованию(НаименованиеAPI);
	APIMethod_Ссылка = Справочники.МетодыAPI.НайтиПоНаименованию(НаименованиеAPIMethod);
	
	Если API_Ссылка.Пустая()
		ИЛИ APIMethod_Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_WebServiceRequests.dateEvent КАК dateEvent,
		|	dbo_WebServiceRequests.APIType КАК APIType,
		|	dbo_WebServiceRequests.APIMethod КАК APIMethod,
		|	dbo_WebServiceRequests.requestXML КАК requestXML,
		|	dbo_WebServiceRequests.responseXML КАК responseXML
		|ИЗ
		|	ВнешнийИсточникДанных.ВнешнийЛог.Таблица.dbo_WebServiceRequests КАК dbo_WebServiceRequests
		|ГДЕ
		|	dbo_WebServiceRequests.dateEvent = &dateEvent
		|	И dbo_WebServiceRequests.APIType = &APIType
		|	И dbo_WebServiceRequests.APIMethod = &APIMethod";
	
	Запрос.УстановитьПараметр("dateEvent", Дата(dateEvent));
	Запрос.УстановитьПараметр("APIType", API_Ссылка.Код);
	Запрос.УстановитьПараметр("APIMethod", APIMethod_Ссылка.Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Структура("requestXML, responseXML");
	       
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаДетальныеЗаписи);
		
		Для каждого ЭлементСтруктуры Из СтруктураВозврата Цикл
			
			ИспользоватьСжатие = Ложь;
			
			Если ЭлементСтруктуры.Ключ = "requestXML" Тогда
				ИспользоватьСжатие = APIMethod_Ссылка.СжатиеЗапроса;
			ИначеЕсли ЭлементСтруктуры.Ключ = "responseXML" Тогда
				ИспользоватьСжатие = APIMethod_Ссылка.СжатиеОтвета;
			КонецЕсли; 
			
			Содержимое = ЭлементСтруктуры.Значение;
			Расширение = ?(ИспользоватьСжатие, "zip", "txt");
			
			СтруктураВозврата[ЭлементСтруктуры.Ключ] = Новый Структура("Содержимое, Расширение", Содержимое, Расширение);
			
		КонецЦикла; 
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьДиалогСохраненияФайла(ИмяФайла, СтруктураФайла)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаСохраненияОтчета", ЭтотОбъект, СтруктураФайла);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(режимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр = "Файлы "+СтруктураФайла.Расширение+" (*."+СтруктураФайла.Расширение+")|*."+СтруктураФайла.Расширение;
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);	

КонецПроцедуры // ()
 
&НаКлиенте
Процедура ВыборФайлаСохраненияОтчета(Результат, ДополнительныеПараметы) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ФайлОтчета = Результат[0];

		Если ДополнительныеПараметы.Расширение = "zip" Тогда
			ДанныеФайла = Base64Значение(ДополнительныеПараметы.Содержимое);
			ДанныеФайла.Записать(ФайлОтчета);
		Иначе	
			ЗаписьТекста = Новый ЗаписьТекста(ФайлОтчета);	
			ЗаписьТекста.Записать(ДополнительныеПараметы.Содержимое);
			ЗаписьТекста.Закрыть();
		КонецЕсли; 
							
	КонецЕсли;		

КонецПроцедуры

