&НаКлиенте
Перем ДанныеРасшифровки;

&НаСервере
Функция  СформироватьОтчетНаСервере(ДанныеРасшифровки)
	
	СхемаКомпоновкиДанных = ВнешниеИсточникиданных.ВнешнийЛог.Таблицы.dbo_UnloadingReports.ПолучитьМакет("ДанныеОтчетов");

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериодФормирования	= НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодФормирования"));
	ПараметрПериодФормирования.Значение = ПериодФормирования;
	ПараметрПериодФормирования.Использование = Истина;

	Если ИспользоватьКонтрагента Тогда
		//НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//
		//ПолеОтбора = Новый ПолеКомпоновкиДанных("КонтрагентСсылка");
		//
		//НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		//НовыйЭлементОтбора.Использование  = Истина;
		//НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		Если Контрагент.Пустая() Тогда
			НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("shopId");
			
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.ПравоеЗначение = "";

		Иначе
			НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
			
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.ПравоеЗначение = Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьВидОтчета Тогда
		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("ВидОтчета");
		
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = ВидОтчета;
	КонецЕсли;
	
	Если ИспользоватьТерминал Тогда
		
		Если Терминал.Пустая() Тогда
			НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("region");
			
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.ПравоеЗначение = 0;

		Иначе
			НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("region");
			
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.ПравоеЗначение = Терминал.Код;
		КонецЕсли;
	
	Конецесли;	
	
	Если Не ТипОтправкиОтчетов.Пустая() Тогда
		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("sendType");
		
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = ТипОтправкиОтчетов.Код;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);

	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки); 
	
	ДокументРезультат = новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

	Возврат ДокументРезультат;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	Результат = СформироватьОтчетНаСервере(ДанныеРасшифровки);
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") тогда
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				ОткрытьЗначение(Поле.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСохраняемогоОтчета(GUIDОтчета)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_UnloadingReports.report КАК report
		|ИЗ
		|	ВнешнийИсточникДанных.ВнешнийЛог.Таблица.dbo_UnloadingReports КАК dbo_UnloadingReports
		|ГДЕ
		|	dbo_UnloadingReports.GUID = &GUID";
	
	Запрос.УстановитьПараметр("GUID", GUIDОтчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.report;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаСохраненияОтчета(Результат, ДополнительныеПараметы) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ФайлОтчета = Результат[0];
		
		ДанныеОтчета = ПолучитьДанныеСохраняемогоОтчета(ДополнительныеПараметы.GUIDОтчета);
		
		Если ДанныеОтчета = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных отчета для сохранения!");
			
		Иначе
			
			ДанныеФайла = Base64Значение(ДанныеОтчета);
			ДанныеФайла.Записать(ФайлОтчета);
			
		КонецЕсли;	
		
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Попытка
		
		АдресОбласти = Результат.ТекущаяОбласть.Имя;
		ВыделеннаяСтрока = СтрЗаменить(СтрРазделить(АдресОбласти,"C")[0], "R","");
		
		ЕстьИдентификаторОтчета = Ложь;
		
		Для Сч=1 По Результат.ШиринаТаблицы Цикл
			
			попытка
				АдресGUID = "R" + ВыделеннаяСтрока + "C" + Строка(Сч);
				ЗначениеGUID = Результат.ПолучитьОбласть(АдресGUID).ТекущаяОбласть.Текст;	
				
				GUIDотчета = Новый УникальныйИдентификатор(ЗначениеGUID);
				ЕстьИдентификаторОтчета = Истина;
				Прервать;
			Исключение
			Конецпопытки;
			
		КонецЦикла;
		
		Если ЕстьИдентификаторОтчета Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаСохраненияОтчета", ЭтотОбъект, Новый Структура("GUIDОтчета", ЗначениеGUID));
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(режимДиалогаВыбораФайла.Сохранение);
			ДиалогВыбораФайла.Фильтр = "Файлы Excel (*.xls)|*.xls";
			ДиалогВыбораФайла.ПолноеИмяФайла = "Отчет";
			ДиалогВыбораФайла.Показать(ОписаниеОповещения);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В выделенной строке отчета нет данных для сохранения!");

		КонецЕсли;
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	Конецпопытки;			
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекДата = ТекущаяДата();
	
	ПериодФормирования.ДатаНачала = НачалоДня(ТекДата);
	ПериодФормирования.ДатаОкончания = КонецДня(ТекДата);
	
	Если Параметры.Свойство("ВидОтчета") Тогда
		ВидОтчета = Параметры.ВидОтчета;
		Если Не ВидОтчета.Пустая() Тогда
			ИспользоватьВидОтчета = Истина;
			Заголовок = "Лог отправки " + ВидОтчета;
			Элементы.ИспользоватьВидОтчета.Видимость = Ложь;
			Элементы.ВидОтчета.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Контрагент") Тогда
		Контрагент = Параметры.Контрагент;
		ИспользоватьКонтрагента = Не Контрагент.Пустая();
	КонецЕсли;
	
	Если Параметры.Свойство("ТипОтправкиОтчетов") Тогда
		ТипОтправкиОтчетов = Параметры.ТипОтправкиОтчетов;
	КонецЕсли;
	
КонецПроцедуры
