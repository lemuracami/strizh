&НаКлиенте
Перем ДанныеРасшифровки;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПериодФормирования.ДатаНачала = НачалоДня(ТекущаяДата());
	ПериодФормирования.ДатаОкончания = КонецДня(ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере(ДанныеРасшифровки)
	
	СхемаКомпоновкиДанных = ВнешниеИсточникиданных.ВнешнийЛог.Таблицы.dbo_UploadedData.ПолучитьМакет("ЗагруженныеДанные");

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериодФормирования	= НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодФормирования"));
	ПараметрПериодФормирования.Значение = ПериодФормирования;
	ПараметрПериодФормирования.Использование = Истина;

	//Если ИспользоватьКонтрагента Тогда
	//	//НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	//
	//	//ПолеОтбора = Новый ПолеКомпоновкиДанных("КонтрагентСсылка");
	//	//
	//	//НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//	//НовыйЭлементОтбора.Использование  = Истина;
	//	//НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//	Если Контрагент.Пустая() Тогда
	//		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		
	//		ПолеОтбора = Новый ПолеКомпоновкиДанных("shopId");
	//		
	//		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//		НовыйЭлементОтбора.Использование  = Истина;
	//		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//		НовыйЭлементОтбора.ПравоеЗначение = "";

	//	Иначе
	//		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		
	//		ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
	//		
	//		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//		НовыйЭлементОтбора.Использование  = Истина;
	//		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//		НовыйЭлементОтбора.ПравоеЗначение = Контрагент;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ИспользоватьВидОтчета Тогда
	//	НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	
	//	ПолеОтбора = Новый ПолеКомпоновкиДанных("ВидОтчета");
	//	
	//	НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//	НовыйЭлементОтбора.Использование  = Истина;
	//	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//	НовыйЭлементОтбора.ПравоеЗначение = ВидОтчета;
	//КонецЕсли;
	//
	//Если ИспользоватьТерминал Тогда
	//	
	//	Если Терминал.Пустая() Тогда
	//		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		
	//		ПолеОтбора = Новый ПолеКомпоновкиДанных("region");
	//		
	//		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//		НовыйЭлементОтбора.Использование  = Истина;
	//		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//		НовыйЭлементОтбора.ПравоеЗначение = 0;

	//	Иначе
	//		НовыйЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		
	//		ПолеОтбора = Новый ПолеКомпоновкиДанных("region");
	//		
	//		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//		НовыйЭлементОтбора.Использование  = Истина;
	//		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//		НовыйЭлементОтбора.ПравоеЗначение = Терминал.Код;
	//	КонецЕсли;
	//
	//Конецесли;	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);

	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки); 
	
	ДокументРезультат = новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

	Возврат ДокументРезультат;

КонецФункции


&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") тогда
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				ОткрытьЗначение(Поле.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Результат = СформироватьОтчетНаСервере(ДанныеРасшифровки);   

КонецПроцедуры

&НаСервере
Функция ПолучитьСохраняемыеДанные(ОтборДанных)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_UploadedData.filedata КАК filedata
		|ИЗ
		|	ВнешнийИсточникДанных.ВнешнийЛог.Таблица.dbo_UploadedData КАК dbo_UploadedData
		|ГДЕ
		|	dbo_UploadedData.dateEvent = &dateEvent
		|	И dbo_UploadedData.downloadtemplate = &downloadtemplate
		|	И dbo_UploadedData.shopId = &shopId
		|	И dbo_UploadedData.typeOfDataLoaded = &typeOfDataLoaded
		|	И dbo_UploadedData.fileName = &fileName";
	
	Запрос.УстановитьПараметр("dateEvent", ОтборДанных.dateEvent);
	Запрос.УстановитьПараметр("downloadtemplate", ОтборДанных.downloadtemplate);
	Запрос.УстановитьПараметр("shopId", ОтборДанных.shopId);
	Запрос.УстановитьПараметр("typeOfDataLoaded", ОтборДанных.typeOfDataLoaded);
	Запрос.УстановитьПараметр("fileName", ОтборДанных.fileName);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.filedata;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


&НаКлиенте
Процедура ВыборФайлаСохраненияДанных(Результат, ДополнительныеПараметы) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ФайлОтчета = Результат[0];
		
		ДанныеОтчета = ПолучитьСохраняемыеДанные(ДополнительныеПараметы);
		
		Если ДанныеОтчета = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных отчета для сохранения!");
			
		Иначе
			
			попытка
				ДанныеОтчета.Записать(ФайлОтчета);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Конецпопытки;
		КонецЕсли;	
		
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеКЗагрузке(Команда)
	
	Попытка
		
		Контрагент = Неопределено;
		ДатаЗагрузки = Неопределено;
		ИмяФайла = Неопределено; 
		КодШаблона = Неопределено;
		Типзагрузки = Неопределено;
		
		АдресОбласти = Результат.ТекущаяОбласть.Имя;
		ВыделеннаяСтрока = СтрЗаменить(СтрРазделить(АдресОбласти,"C")[0], "R","");
		
		ЕстьИдентификаторОтчета = Ложь;
		
		Для Сч=1 По Результат.ШиринаТаблицы Цикл
			
			попытка
				
				АдресЗначения = "R" + ВыделеннаяСтрока + "C" + Строка(Сч);
				Значение = Результат.ПолучитьОбласть(АдресЗначения).ТекущаяОбласть.Текст;	
				
				Если Лев(Значение, 5) = "Shop_" Тогда
					
					Контрагент = Справочники.Контрагенты.НайтиПоКоду(Значение);
					ДатаЗагрузки = Дата(Результат.ПолучитьОбласть("R" + ВыделеннаяСтрока + "C1").ТекущаяОбласть.Текст);
					ИмяФайла =  СокрЛП(Результат.ПолучитьОбласть("R" + ВыделеннаяСтрока + "C5").ТекущаяОбласть.Текст);
					КодШаблона =  СокрЛП(Результат.ПолучитьОбласть("R" + ВыделеннаяСтрока + "C8").ТекущаяОбласть.Текст);
					ТипЗагрузки = СокрЛП(Результат.ПолучитьОбласть("R" + ВыделеннаяСтрока + "C10").ТекущаяОбласть.Текст);
					
					ЕстьИдентификаторОтчета = Истина;
					Прервать;
					
				Конецесли;
				
			Исключение
			Конецпопытки;
			
		КонецЦикла;
		
		Если ЕстьИдентификаторОтчета Тогда
			
			ОтборЗаписи = Новый Структура("shopId,dateEvent,fileName,downloadtemplate,typeOfDataLoaded", СокрЛП(Контрагент.Код),ДатаЗагрузки,ИмяФайла,КодШаблона,ТипЗагрузки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаСохраненияДанных", ЭтотОбъект, ОтборЗаписи);
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(режимДиалогаВыбораФайла.Сохранение);
			ДиалогВыбораФайла.Фильтр = "Файлы Excel (*.xls)|*.xls";
			ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;
			ДиалогВыбораФайла.Показать(ОписаниеОповещения);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В выделенной строке нет данных для сохранения!");
			
		КонецЕсли;
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	Конецпопытки;		
	
КонецПроцедуры

