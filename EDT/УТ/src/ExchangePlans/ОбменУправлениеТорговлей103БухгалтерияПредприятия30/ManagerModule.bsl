////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ПодразделениеПоУмолчанию", Справочники.Подразделения.ПустаяСсылка());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для БП-УТ";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	Возврат Результат;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат "Создать обмен с конфигурацией ""Бухгалтерия предприятия, ред. 3.0""";
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("СкладДляОбменаДаннымиСУТ", "");
	СтруктураНастроек.Вставить("СкладДляОбменаДаннымиСУТ_Ключ", "");
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле() Экспорт
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	
	СтруктураТабличнойЧастиСклады = Новый Структура;
	СтруктураТабличнойЧастиСклады.Вставить("Склад", Новый Массив);
	
	СтруктураТабличнойЧастиПодразделения = Новый Структура;
	СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение", Новый Массив);
	
	СтруктураТабличнойЧастиКассы = Новый Структура;
	СтруктураТабличнойЧастиКассы.Вставить("Касса", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия", Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить);
	СтруктураНастроек.Вставить("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете", Истина);
	СтруктураНастроек.Вставить("ВыгружатьАналитикуПоСкладам", ?(Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить() <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.НеИспользовать,Ложь,Истина));
	СтруктураНастроек.Вставить("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать);
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоСкладам", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоПодразделениям", Ложь);
	
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("Склады", СтруктураТабличнойЧастиСклады);
	СтруктураНастроек.Вставить("Подразделения", СтруктураТабличнойЧастиПодразделения);
	СтруктураНастроек.Вставить("Кассы", СтруктураТабличнойЧастиКассы);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента() Экспорт
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация",      Новый Массив);
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация_Ключ", Новый Массив);

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает имена реквизитов и табличных частей плана обмена,
// перечисленных через запятую, которые являются общими для пары обменивающихся конфигураций.
// Например, если для плана обмена предусмотрено ограничение миграции данных по организациям в обе стороны,
// то табличная часть плана обмена, в которой перечислены разрешенные организации, считается общей.
// Возвращает пустую строку, если общие данные узлов не предусмотрены.
//
Функция ОбщиеДанныеУзлов() Экспорт
	
	возврат "ДатаНачалаВыгрузкиДокументов,ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю,ИспользоватьОтборПоОрганизациям,Организации,ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия,РежимВыгрузкиПриНеобходимости";
	
КонецФункции

// Возвращает пользовательское представление значений по умолчанию в виде строки.
// Возвращает пустую строку, если значения по умолчанию на узле не предусмотрены.
//
Функция ОписаниеЗначениеПоУмолчанию() Экспорт
	возврат "Указание значений по умолчанию не предусмотрено.";
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	ТекстОписания = "Подразделение по умолчанию: ";
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.ПодразделениеПоУмолчанию) Тогда
		ТекстОписания = ТекстОписания + Строка(ЗначенияПоУмолчаниюНаУзле.ПодразделениеПоУмолчанию);
	Иначе
		ТекстОписания = ТекстОписания + "не указано";
	КонецЕсли;
	ТекстОписания = ТекстОписания + ";";
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	СкладДляОбменаДаннымиСУТ = "";
	
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СкладДляОбменаДаннымиСУТ) Тогда
		
		СкладДляОбменаДаннымиСУТ = НСтр("ru = 'Склад: [Склад]
		|Во всех загруженных документах в бухгалтерию будет установлен выбранный склад, если в управлении торговлей не установлен флажок ""Выгружать аналитику по складам"".'");
		СкладДляОбменаДаннымиСУТ = СтрЗаменить(СкладДляОбменаДаннымиСУТ, "[Склад]", Строка(ЗначенияПоУмолчаниюНаУзле.СкладДляОбменаДаннымиСУТ));
		
	Иначе
		
		СкладДляОбменаДаннымиСУТ = НСтр("ru = ''Если не установлен флажок ""Выгружать аналитику по складам"", необходимо указать склад.");
		
	КонецЕсли;
	
	Результат = НСтр("ru = 'При загрузке реквизиты документов будет автоматически дозаполнены значениями:
						|[Склад]'");
	//
	Результат = СтрЗаменить(Результат, "[Склад]", СкладДляОбменаДаннымиСУТ);
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле) Экспорт
	
	ОграничениеВыгрузкиАналитикиПоСкладам = "";
	ОграничениеПереносаСебестоимости = "";
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = "";
	ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = "";
	ОграничениеОтборПоОрганизациям = "";
	ОграничениеОтборПоСкладам = "";
	ОграничениеОтборПоПодразделениям = "";
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru = 'Документы выгружаются начиная с [ДатаНачалаВыгрузкиДокументов]'");
		ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(ОграничениеДатаНачалаВыгрузкиДокументов, "[ДатаНачалаВыгрузкиДокументов]", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
	Иначе
		ОграничениеДатаНачалаВыгрузкиДокументов = "Документы выгружаются за весь период";
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете Тогда
		ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = НСтр("ru = 'Документы выгружаются только отраженные в бухгалтерском учете'");
	Иначе
		ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = НСтр("ru = ''");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = ''");
	ИначеЕсли НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = 'Выгружается документ ""Заказ покупателя"" который является основанием для авансовых платежей при оптовой продаже товаров'");
	ИначеЕсли НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = 'Выгружается документ ""Счет на оплату покупателю"" который является основанием для авансовых платежей при оптовой продаже товаров'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'Себестоимость списания товаров, не переносится'");
	ИначеЕсли НастройкаОтборовНаУзле.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'При переносе себестоимости списания товаров, переносятся документы партии и себестоимость'");
	ИначеЕсли НастройкаОтборовНаУзле.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьТолькоДокументПартии Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'При переносе себестоимости списания товаров, переносятся только документы партии'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВыгружатьАналитикуПоСкладам Тогда
		ОграничениеВыгрузкиАналитикиПоСкладам = НСтр("ru = 'Выгружатется аналитика по складам'");
	Иначе
		ОграничениеВыгрузкиАналитикиПоСкладам = НСтр("ru = 'Аналитика по складам не выгружается, во всех загруженных документах в бухгалтерии предприятия будет установлен один и тот же склад из настройки параметров учета'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.Организации.Организация, "; ");
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'Отбор по организациям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоОрганизациям = СтрЗаменить(ОграничениеОтборПоОрганизациям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'По всем организациям'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоСкладам Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.Склады.Склад, "; ");
		ОграничениеОтборПоСкладам = НСтр("ru = 'Отбор по складам: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоСкладам = СтрЗаменить(ОграничениеОтборПоСкладам, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоСкладам = НСтр("ru = 'По всем складам'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоПодразделениям Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.Подразделения.Подразделение, "; ");
		ОграничениеОтборПоПодразделениям = НСтр("ru = 'Отбор по подразделениям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоПодразделениям = СтрЗаменить(ОграничениеОтборПоПодразделениям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоПодразделениям = НСтр("ru = 'По всем подразделениям'");
	КонецЕсли;
	
	Результат = НСтр("ru = 'Выгружать документы и справочную информацию:
							|[ОграничениеВыгрузкиАналитикиПоСкладам]
							|[ОграничениеПереносаСебестоимости]
							|[ОграничениеДатаНачалаВыгрузкиДокументов]
							|[ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете]
							|[ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату]
							|[ОграничениеОтборПоОрганизациям]
							|[ОграничениеОтборПоСкладам]
							|[ОграничениеОтборПоПодразделениям]'");
	//
	
	Результат = СтрЗаменить(Результат, "[ОграничениеВыгрузкиАналитикиПоСкладам]", ОграничениеВыгрузкиАналитикиПоСкладам);
	Результат = СтрЗаменить(Результат, "[ОграничениеПереносаСебестоимости]", ОграничениеПереносаСебестоимости);
	Результат = СтрЗаменить(Результат, "[ОграничениеДатаНачалаВыгрузкиДокументов]", ОграничениеДатаНачалаВыгрузкиДокументов);
	Результат = СтрЗаменить(Результат, "[ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете]", ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете);
	Результат = СтрЗаменить(Результат, "[ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату]", ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоОрганизациям]", ОграничениеОтборПоОрганизациям);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоСкладам]", ОграничениеОтборПоСкладам);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоПодразделениям]", ОграничениеОтборПоПодразделениям);
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле) Экспорт
	
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеОтборПоОрганизациям = "";
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru = 'Документы выгружаются начиная с [ДатаНачалаВыгрузкиДокументов]'");
		ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(ОграничениеДатаНачалаВыгрузкиДокументов, "[ДатаНачалаВыгрузкиДокументов]", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
	Иначе
		ОграничениеДатаНачалаВыгрузкиДокументов = "Документы выгружаются за весь период";
	КонецЕсли;

	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		ОграничениеОтборПоОрганизациям = "Отбор по организациям: [ОграничениеОтборПоОрганизациям]";
		КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ОграничениеОтборПоОрганизациям = СтрЗаменить(ОграничениеОтборПоОрганизациям, "[ОграничениеОтборПоОрганизациям]", ПредставлениеКоллекции);
	Иначе
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'По всем организациям'");
	КонецЕсли;
	Результат = НСтр("ru = 'Выгружать документы и справочную информацию:
							|[ОграничениеДатаНачалаВыгрузкиДокументов]
							|[ОграничениеОтборПоОрганизациям]'");
	
	Результат = СтрЗаменить(Результат, "[ОграничениеДатаНачалаВыгрузкиДокументов]", ОграничениеДатаНачалаВыгрузкиДокументов);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоОрганизациям]", ОграничениеОтборПоОрганизациям);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования плана обмена для организации обмена в модели сервиса.
//  Если признак установлен, то в сервисе можно включить обмен данными
//  с использованием этого плана обмена.
//  Если признак не установлен, то план обмена будет использоваться только 
//  для обмена в локальном режиме работы конфигурации.
// 
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает пояснение о последовательности действий пользователя для настройки параметров учета в текущей информационной базе.
//
Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает пояснение о последовательности действий пользователя для настройки параметров учета в базе-корреспонденте.
//
Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента() Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
КонецПроцедуры

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции
