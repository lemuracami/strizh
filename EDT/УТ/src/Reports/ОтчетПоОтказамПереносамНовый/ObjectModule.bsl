
Процедура ОтправитьОтчетПоРегламенту(ДатаНач, ДатаКон, Терминал = Неопределено, МасП, НастройкаОтправки = Неопределено) Экспорт
	ОтправитьПоПочтеНаСервере(Истина, ДатаНач, ДатаКон, Терминал, НастройкаОтправки);
	ОтправитьПоПочтеРуководству(Истина, ДатаНач, ДатаКон, Терминал, МасП, НастройкаОтправки);
КонецПроцедуры	

Процедура ОтправитьПоПочтеРуководству(ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, МасП = Неопределено, НастройкаОтправки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("НоваяСхемаКомпоновки");
	ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочтыРуководству;

	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтправки.Настройки);
	
	Если НЕ  Терминал = Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	Иначе
		Терминал = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТерминалДоставки").Значение;
	КонецЕсли;	
	
	Если Не ОтправкаПоРегламенту И НЕ ЗначениеЗаполнено(Терминал) Тогда					
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Справочники.РегиональныеТерминалы.МоскваСтриж);
	Иначе		
		Если  Не (ДатаНач = Неопределено И ДатаКон = Неопределено) Тогда		
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", новый Стандартныйпериод(НачалоДня(ДатаНач), КонецДня(ДатаКон)));
		Иначе			
			ПериодОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение;
			ДатаНач = ПериодОтчета.ДатаНачала;
			ДатаКон = ПериодОтчета.ДатаОкончания;			
		КонецЕсли;		
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Использование = Истина;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Использование = Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);

	Результат = Новый ТабличныйДокумент;
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Г = Новый УникальныйИдентификатор;
	ПутьКФайлу = КаталогВременныхФайлов() + СокрЛП(Строка(Терминал.Город)) + "_ОтчетПоОтказамПереносам_" + ПредставлениеПериода(ДатаНач, ДатаКон, "ДФ=yyyy-MM-dd") + ".xls"; 	
	Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	Т = Новый ТекстовыйДокумент();
	Т.Прочитать(ПутьКФайлу);
	
	Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач, ДатаКон, "ДЛФ=DD") + " (" + Терминал.Город + ")";

	Если МасП = Неопределено Тогда
		
		МасП = Новый Массив;	
		
		МасП.Добавить("rea@strizh-logistic.ru");
		МасП.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
		МасП.Добавить("logist@strizh-logistic.ru");
		МасП.Добавить("alexey.kuzmichev@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасП.Добавить("sergey.andrienko@strizh-logistic.ru");
		МасП.Добавить("inna.illarionova@strizh-logistic.ru");
		МасП.Добавить("syn@strizh-logistic.ru");
		МасП.Добавить("denis.zherebtsov@strizh-logistic.ru");
		МасП.Добавить("v.yakurnov@strizh-logistic.ru");
		МасП.Добавить("stanislav.tumakov@strizh-logistic.ru");
		//МасП.Добавить("daria.sladkova@strizh-logistic.ru");
		МасП.Добавить("i.belov@strizh-logistic.ru");	
		
	КонецЕсли;
	
	#Область ОтправкаИЛогирование
	
	Стр_ = СтрСоединить(МасП, "; ");

	Если Не НастройкаОтправки = Неопределено И ОтправкаПоРегламенту = Истина Тогда
		
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойРегламент);
		ПараметрыЗаписи.ВидОтчета = НастройкаОтправки.Отчет;
		ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
		ПараметрыЗаписи.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	Иначе
		
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойПользователь);
		ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоОтказамПереносам;
		ПараметрыЗаписи.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		Если НЕ НастройкаОтправки = Неопределено тогда
			ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
		КонецЕсли;

	КонецЕсли;
	
	ПараметрыЗаписи.Терминал = Терминал;
	
	ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
	
	ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
	ПараметрыЗаписи.GUID = Г;
	ПараметрыЗаписи.СписокПолучателей = Стр_;
	
	Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
		ПараметрыЗаписи.ОтчетОтправлен = lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""") ;		
		РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ОтправитьПоПочтеНаСервере(ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, НастройкаОтправки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("НоваяСхемаКомпоновки");
	ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочты;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		СписокКонтрагентовДляОтправки = Новый ТаблицаЗначений;
		СписокКонтрагентовДляОтправки.Колонки.Добавить("ИнтернетМагазин");
		
		СтрокаИМ = СписокКонтрагентовДляОтправки.Добавить();
		СтрокаИМ.ИнтернетМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_601");
		
		СтрокаИМ = СписокКонтрагентовДляОтправки.Добавить();
		СтрокаИМ.ИнтернетМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_723");

	Иначе
		СписокКонтрагентовДляОтправки = ПолучитьСписокКонтрагентовДляОтправки(ОтправкаПоРегламенту, ДатаНач, ДатаКон, Терминал, НастройкаОтправки);
	КонецЕсли;
	
	
	МасК = СписокКонтрагентовДляОтправки.ВыгрузитьКолонку("ИнтернетМагазин");
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РассылкиКонтрагентов.Почта КАК Почта,
	|	РассылкиКонтрагентов.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
	|ГДЕ
	|	РассылкиКонтрагентов.ТипРассылки = &ТипРассылки
	|	И РассылкиКонтрагентов.Контрагент В(&МасК)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Почта";
	Зап.УстановитьПараметр("ТипРассылки", Перечисления.ТипыРассылки.ЛогистическаяРассылка);			
	Зап.УстановитьПараметр("МасК", МасК);
	СписокПочты = Зап.Выполнить().Выгрузить();

	
	Для Каждого СтрокаСписка Из СписокКонтрагентовДляОтправки Цикл
		
		ОтправитьПоПочтеКонтрагенту(СтрокаСписка.ИнтернетМагазин, СписокПочты, ОтправкаПоРегламенту, ДатаНач, ДатаКон, Терминал, НастройкаОтправки);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтправитьПоПочтеКонтрагенту(ИнтернетМагазин, СписокПочты, ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, НастройкаОтправки = Неопределено)
	
	СхемаКомпоновкиДанных = ПолучитьМакет("НоваяСхемаКомпоновки");

	Если СокрЛП(ИнтернетМагазин.Код) = "Shop_601" ИЛИ СокрЛП(ИнтернетМагазин.Код) = "Shop_752" Тогда
		ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочтыЯндекс;
	Иначе	
		ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочты;
	КонецеСли;	
	
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтправки.Настройки);
	
	Если НЕ  Терминал = Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	Иначе
		Терминал = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТерминалДоставки").Значение;
	КонецЕсли;	
	
	Если Не ОтправкаПоРегламенту И НЕ ЗначениеЗаполнено(Терминал) Тогда					
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Справочники.РегиональныеТерминалы.МоскваСтриж);
	Иначе		
		Если  Не (ДатаНач = Неопределено И ДатаКон = Неопределено) Тогда		
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", новый Стандартныйпериод(НачалоДня(ДатаНач), КонецДня(ДатаКон)));
		Иначе			
			ПериодОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение;
			ДатаНач = ПериодОтчета.ДатаНачала;
			ДатаКон = ПериодОтчета.ДатаОкончания;			
		КонецЕсли;		
	КонецЕсли;
	
	ИнтернетМагазинПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИнтернетМагазин");
	ИнтернетМагазинПараметр.Значение = ИнтернетМагазин;
	ИнтернетМагазинПараметр.Использование = Истина;	

	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Использование = Истина;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("МакетОформления").Значение = "Арктика";
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("МакетОформления").Использование = Истина;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Использование = Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));	

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

	Результат = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	УдаляемаяОбласть = Результат.Область("R1:R"+Результат.ФиксацияСверху);
	Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
	Если Результат.ВысотаТаблицы > 2 Тогда
		Г = Новый УникальныйИдентификатор;
		
		ПутьКФайлу = КаталогВременныхФайлов() + "report_f_t_" + ПредставлениеПериода(ДатаНач, ДатаКон, "ДФ=yyyy-MM-dd") + ".xls";  
		Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач, ДатаКон, "ДЛФ=DD") + " (" + Терминал.Город + ")";
		
		Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
		МасП = Новый Массив;
		МасП.Добавить("logist@strizh-logistic.ru"); 
		
		Струк = Новый Структура;
		Струк.Вставить("Контрагент", ИнтернетМагазин);
		НайСтроки = СписокПочты.НайтиСтроки(Струк);
		Для Сч = 0 По НайСтроки.Количество() - 1 Цикл			
			МасП.Добавить(НайСтроки[Сч].Почта);
		КонецЦикла;	
		
		Стр_ = СтрСоединить(МасП, "; ");
		
		КонтрагентДляРассылки = ИнтернетМагазин;
		
		Если Не НастройкаОтправки = Неопределено И ОтправкаПоРегламенту = Истина Тогда
			
			ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);
			ПараметрыЗаписи.ВидОтчета = НастройкаОтправки.Отчет;
			ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
			ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;
			
		Иначе
			
			ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойПользователь);
			ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоОтказамПереносам;
			ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;
			
			Если НЕ НастройкаОтправки = Неопределено тогда
				ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
		
		ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
		ПараметрыЗаписи.GUID = Г;
		ПараметрыЗаписи.СписокПолучателей = Стр_;
		
		ПараметрыЗаписи.Терминал = Терминал; 
		
		Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
			ПараметрыЗаписи.ОтчетОтправлен = lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""");
			
			РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокКонтрагентовДляОтправки(ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, НастройкаОтправки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("НоваяСхемаКомпоновки");
	ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочты;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтправки.Настройки);
	
	Если НЕ  Терминал = Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	Иначе
		Терминал = КомпоновщикНастроек.Настройки.ПараметрыДанных.Терминал;
	КонецЕсли;	
	
	Если Не ОтправкаПоРегламенту И НЕ ЗначениеЗаполнено(Терминал) Тогда					
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Справочники.РегиональныеТерминалы.МоскваСтриж);
	Иначе		
		Если  Не (ДатаНач = Неопределено И ДатаКон = Неопределено) Тогда		
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", новый Стандартныйпериод(НачалоДня(ДатаНач), КонецДня(ДатаКон)));
		Иначе			
			ПериодОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение;
			ДатаНач = ПериодОтчета.ДатаНачала;
			ДатаКон = ПериодОтчета.ДатаОкончания;			
		КонецЕсли;		
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	//Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

	Таб = Новый ДеревоЗначений;
	//Таб = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьОбъект(Таб);	
	//ПроцессорВывода.УстановитьДокумент(Таб);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат Таб.Строки;
	
КонецФункции	