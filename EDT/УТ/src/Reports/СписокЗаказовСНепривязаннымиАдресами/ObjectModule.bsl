
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка=ЛОжь;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Дата = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Дата"));
	Дата.Значение = КонецДня(ТекущаяДата())+1;
	Дата.Использование = Истина;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();

	ДокументРезультат.Автомасштаб = истина;
	
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();

	Пока ЭлементРезультата <> Неопределено Цикл
		Если ЭлементРезультата.ЗначенияПараметров.Количество()=1 Тогда
			Если ЭлементРезультата.ЗначенияПараметров[0].Значение = "Разорвать" Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЕсли;
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();

КонецПроцедуры

Функция СформироватьОтправитьПоПочтеПоКонтрагенту(Период, ОтборКонтрагент, ЭтоРегламент = Ложь, НастройкаОтправки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	СтруктураВариантов = Новый Структура;
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.ПоПартнеру);
	
	Настройки = КомпоновщикНастроек.Настройки;
		
	Дата = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Дата"));
	Дата.Значение = Период;
	Дата.Использование = Истина;
	
	КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = ОтборКонтрагент;
	КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КомпоновщикНастроек.Настройки.отбор.элементы[0].Использование = Истина;
	
	КомпоновщикМакета         = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки           = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;

	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	Результат = Новый ТабличныйДокумент();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	Результат.Автомасштаб = истина;
	ПроцессорВывода.НачатьВывод();
	
	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	
	Сч = 1;

	Пока ЭлементРезультата <> Неопределено Цикл
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если Сч = 6 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ПроцессорВывода.ЗакончитьВывод();

	ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_отчет" + ".xls";
		
	Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
			
	Мас = Новый Массив;
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РассылкиКонтрагентов.Почта КАК Почта
	            |ИЗ
	            |	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
	            |ГДЕ
	            |	РассылкиКонтрагентов.Контрагент.Ссылка = &Контрагент
	            |	И РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(перечисление.типырассылки.логистическаярассылка)
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Почта";
	
	Зап.УстановитьПараметр("Контрагент", ОтборКонтрагент);			
	Рез = Зап.Выполнить().Выгрузить();
	Мас = Рез.ВыгрузитьКолонку("Почта");              		
	
	Тема = "Список заказов с непривязанными адресами на "+ Формат(Период,"ДЛФ=DD");
	
	//lem.ОтправитьСообщение(Мас, Тема, "Отчет о заказах с непривязанными адресами во вложении.", ПутьКФайлу, "Логистическая компания ""Стриж""");
	
	КонтрагентДляРассылки = ОтборКонтрагент;
		
	Стр_ = СтрСоединить(Мас, "; ");
	Г = Новый УникальныйИдентификатор;
	
	Если ЭтоРегламент Тогда	
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);		
	Иначе		
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойПользователь);
	КонецЕсли;
	
	Если Не НастройкаОтправки = Неопределено Тогда		
		ПараметрыЗаписи.ВидОтчета = НастройкаОтправки.Отчет;
		ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;	
	Иначе		
		ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.СписокЗаказовСНепривязаннымиАдресами;		
	КонецЕсли;	
	ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;		
	
	ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
	
	ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
	ПараметрыЗаписи.GUID = Г;
	ПараметрыЗаписи.СписокПолучателей = Стр_;
	
	Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда	
		Отпр = lem.ОтправитьСообщение(Мас, Тема, "Отчет о заказах с непривязанными адресами во вложении.", ПутьКФайлу, "Логистическая компания ""Стриж""");
		
		ПараметрыЗаписи.ОтчетОтправлен = Отпр;
		
		РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
	КонецЕсли;
	//КонецЕсли;
		
КонецФункции

Функция СформироватьОтправитьПоПочте(Период) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	СтруктураВариантов = Новый Структура;
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.Общий);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Дата = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Дата"));
	Дата.Значение = Период;
	Дата.Использование = Истина;
	
	КомпоновщикМакета         = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки           = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;

	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	Результат = Новый ТабличныйДокумент();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	Результат.Автомасштаб = истина;
	ПроцессорВывода.НачатьВывод();
	
	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	
	Пока ЭлементРезультата <> Неопределено Цикл
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	Если (Результат.ВысотаТаблицы - Результат.ФиксацияСверху)>1 Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции


