#Если Клиент Тогда
	
// Предопределенное свойство. Содержит коллекцию параметров формирования отчета.
Перем ПараметрыФормирования Экспорт; // <Структура>

Перем КонструкторДанных;
Перем НачалоПериода, КонецПериода, тзДни;
Перем тзФормулы, мсКолонкиФормул;

// Предопределенная функция. Возвращает свойства отчета.
//
// Возвращаемое значение:
//  <Структура[СвойстваОтчета]>
//
Функция ПолучитьСвойства() Экспорт
	Возврат Новый Структура("ИнтерфейсВыбораДаты, ДатаНачала, ДатаОкончания", "Период", НачалоПериода, КонецПериода);
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных отборов отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьОтборы() Экспорт
	тзОтборы = КонструкторДанных.ПолучитьТаблицуОтборов();
	
	Возврат тзОтборы;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных группировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаГруппировок]>
//
Функция ПолучитьГруппировки() Экспорт
	тзГруппировки = КонструкторДанных.ПолучитьТаблицуГруппировок("Показатель");
	
	Возврат тзГруппировки;
КонецФункции

// Предопределенная функция. Возвращает имена группировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеГруппировкиПоУмолчанию() Экспорт
	мсГруппировки = Новый Массив;
	
	Возврат мсГруппировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных сортировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировки() Экспорт
	тзСортировки = КонструкторДанных.ПолучитьТаблицуСортировок();
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу сортировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировкиПоУмолчанию() Экспорт
	тзСортировки = новаОтчеты.ПолучитьТаблицуСортировок();
	
	стрСортировка = тзСортировки.Добавить();
	стрСортировка.Сортировка = "Показатель";
	стрСортировка.Направление = "ВОЗР";
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных показателей отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПоказателей]>
//
Функция ПолучитьПоказатели() Экспорт
	тзПоказатели = КонструкторДанных.ПолучитьТаблицуПоказателей();
		
	Для Каждого стрДень Из тзДни Цикл
		стрПоказатель = тзПоказатели.Найти(стрДень.ИмяКолонки, "Показатель");
		Если стрПоказатель <> Неопределено Тогда
			тзПоказатели.Удалить(стрПоказатель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат тзПоказатели;
КонецФункции

// Предопределенная функция. Возвращает имена показателей, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеПоказателиПоУмолчанию() Экспорт
	мсПоказатели = Новый Массив;
	
	мсПоказатели.Добавить("Показатель");
	мсПоказатели.Добавить("Сумма");
	
	Возврат мсПоказатели;
КонецФункции

// Предопределенная процедура. Формирует отчет в указанном табличном документе с текущими параметрами формирования.
//
// Параметры:
//  ТД <ТабличныйДокумент>
//
Процедура Сформировать(ТД) Экспорт
	УстановитьПериод(ПараметрыФормирования.НачалоПериода, ПараметрыФормирования.КонецПериода);
	Настроить();	
	
	КонструкторДанных.ПрименитьПараметрыФормированияОтчета(ПараметрыФормирования);
	
	Для Каждого стрДень Из тзДни Цикл
		КонструкторДанных.ВыбранныеПоказатели.Добавить(стрДень.ИмяКолонки);
	КонецЦикла;
	
	ПараметрыФормирования.Вставить("ГоризонтальнаяГруппировка", Новый Структура("Область, Колонки", "День", тзДни));
	
	дзРезультат = КонструкторДанных.ПолучитьДанные();
		
	РассчитатьФормулыВСтроках(дзРезультат.Строки);
	
	тзИтоги = КонструкторДанных.ПолучитьТаблицуИтогов();
	новаОтчеты.СформироватьТабличныйДокумент(ЭтотОбъект, ТД, дзРезультат, тзИтоги, "Строка.ЗначениеГруппировки = Строка(Строка.Показатель);
		|Строка.РасшифровкаГруппировки = Строка.Показатель;");
		
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТД.АвтоМасштаб = Истина;
КонецПроцедуры

Процедура РассчитатьФормулыВСтроках(Строки)
	Если Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Если Строки[0].Группировка <> NULL Тогда
		Для Каждого Строка Из Строки Цикл
			РассчитатьФормулыВСтроках(Строка.Строки);
		КонецЦикла;
		Возврат;		
	КонецЕсли;
	
	Для Каждого стрФормула Из тзФормулы Цикл
		Строка = Строки.Найти(стрФормула.Показатель, "Показатель");
		Если Строка = Неопределено Тогда Продолжить; КонецЕсли;
		
		Формула = стрФормула.Формула;
		Для Каждого стрПоказатель Из стрФормула.Показатель.Показатели Цикл
			СтрокаПоказателя = Строки.Найти(стрПоказатель.Показатель, "Показатель");
			Если СтрокаПоказателя = Неопределено Тогда
				ФормулаПоказателя = "0";
			Иначе
				ИндексПоказателя = СтрЗаменить(Строка(Строки.Индекс(СтрокаПоказателя)), Символы.НПП, "");
				ФормулаПоказателя = "Строки[" + ИндексПоказателя + "][Колонка]";
			КонецЕсли;
			Формула = СтрЗаменить(Формула, СокрЛП(стрПоказатель.Псевдоним), ФормулаПоказателя);
		КонецЦикла;
		
		Макрос = "
		|Для Каждого Колонка Из мсКолонкиФормул Цикл
		|	Значение = 0;
		|	" + Формула + "
		|	Строка[Колонка] = Значение;
		|КонецЦикла;";
		
		Выполнить(Макрос);
	КонецЦикла;
КонецПроцедуры

// Предопределенная процедура. Обрабатывает событие "Обработка расшифровки" отчета.
//
// Параметры:
//  Форма                <Форма>
//  Элемент              <ЭлементУправления>
//  Расшифровка          <Произвольный>
//  СтандартнаяОбработка <Булево>
//
Процедура ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если новаОтчеты.Расшифровать(Форма, Элемент, Расшифровка) Тогда Возврат; КонецЕсли;
	ОткрытьЗначение(Расшифровка);
КонецПроцедуры

Процедура Настроить()
	КонструкторДанных = Обработки.новаКонструкторЗапроса.Создать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиПоказателей.Ссылка КАК Показатель,
	|   СтатьиПоказателей.Коэффициент КАК Коэффициент,
	|   СтатьиПоказателей.Статья КАК Статья,
	|   СтатьиПоказателей.Статья.ЭтоГруппа КАК ЭтоГруппа
	|
	|ИЗ
	|	Справочник.новаПоказателиРаботы.СтатьиДоходовРасходов КАК СтатьиПоказателей
	|
	|ГДЕ
	|	НЕ СтатьиПоказателей.Ссылка.ПометкаУдаления
	| И СтатьиПоказателей.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.новаСпособыРасчетаПоказателейРаботы.РасчетПоСтатьямДоходовРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка КАК Показатель,
	|	0 КАК Коэффициент,
	|	NULL КАК Статья,
	|	Ложь КАК ЭтоГруппа
	|
	|ИЗ
	|	Справочник.новаПоказателиРаботы
	|
	|ГДЕ
	|	НЕ ПометкаУдаления
	|";
	
	тзПоказатели = Запрос.Выполнить().Выгрузить();
	
	ЗапросГруппыСтатей = Новый Запрос;
	ЗапросГруппыСтатей.Текст = "ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.новаСтатьиДоходовРасходов	
	|ГДЕ
	|	НЕ ЭтоГруппа И НЕ ПометкаУдаления И Ссылка В ИЕРАРХИИ (&Группа)";
	
	ъ = тзПоказатели.Количество() - 1;
	Пока ъ >= 0 Цикл
		стрПоказатель = тзПоказатели[ъ];
		ъ = ъ - 1;
		
		Если стрПоказатель.ЭтоГруппа <> Истина Тогда Продолжить; КонецЕсли;
		
		ЗапросГруппыСтатей.УстановитьПараметр("Группа", стрПоказатель.Статья);
		Результат = ЗапросГруппыСтатей.Выполнить();
		Если Результат.Пустой() Тогда Продолжить; КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		стрПоказатель.Статья = Выборка.Ссылка;
		
		Пока Выборка.Следующий() Цикл
			стрДопПоказатель = тзПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(стрДопПоказатель, стрПоказатель);
			стрДопПоказатель.Статья = Выборка.Ссылка;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка КАК Показатель,
	|	Формула КАК Формула
	|
	|ИЗ
	|	Справочник.новаПоказателиРаботы
	|
	|ГДЕ
	|	НЕ ПометкаУдаления
	| И СпособРасчета = ЗНАЧЕНИЕ(Перечисление.новаСпособыРасчетаПоказателейРаботы.ПроизвольнаяФормула)";
	
	тзФормулы = Запрос.Выполнить().Выгрузить();
	
	мсКолонкиФормул = тзДни.ВыгрузитьКолонку("ИмяКолонки");
	мсКолонкиФормул.Добавить("Сумма");
	
	КонструкторДанных.ЗагрузитьВременнуюТаблицу("Показатели", тзПоказатели);
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|ИЗ
	|	РегистрНакопления.новаРаспределенныеДоходыРасходыМестнойДоставки.Обороты(&НачалоПериода, &КонецПериода, День,) КАК ДоходыРасходы
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Показатели
	|ПО
	|	Показатели.Статья = ДоходыРасходы.Показатель ИЛИ Показатели.Статья ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО {*ГРУППИРОВКА_ПОДЗАПРОСА}
	|) КАК ДоходыРасходы";
	
	КонструкторДанных.ДобавитьПараметр("НачалоПериода", '00010101');
	КонструкторДанных.ДобавитьПараметр("КонецПериода", '00010101');
	
	КонструкторДанных.ДобавитьПоле("Транспорт");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Транспорт");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Транспорт");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Транспорт");
	КонструкторДанных.ДобавитьОтборПоля(, "ДоходыРасходы.Транспорт");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Транспорт.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Водитель");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Водитель");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Водитель");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Водитель");
	КонструкторДанных.ДобавитьОтборПоля(, "ДоходыРасходы.Водитель");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Водитель.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Экспедитор");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Экспедитор");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Экспедитор");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Экспедитор");
	КонструкторДанных.ДобавитьОтборПоля(, "ДоходыРасходы.Экспедитор");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Экспедитор.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Контрагент");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Контрагент");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Контрагент");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Контрагент");
	КонструкторДанных.ДобавитьОтборПоля(, "ДоходыРасходы.Контрагент");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Контрагент.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Показатель");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Показатель");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "Показатели.Показатель");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ПОДЗАПРОСА", "Показатели.Показатель");
	КонструкторДанных.ДобавитьОтборПоля(, "ДоходыРасходы.Показатель");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Показатель.Код");
	
	КонструкторДанных.ДобавитьПоле("Сумма",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Сумма");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "СУММА(Показатели.Коэффициент * ДоходыРасходы.СуммаОборот)");
	
	Для Каждого стрДень Из тзДни Цикл
		КонструкторДанных.ДобавитьПоле(стрДень.ИмяКолонки, стрДень.Представление, "ЧДЦ=2");
		КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы." + стрДень.ИмяКолонки);
		КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "СУММА(ВЫБОР КОГДА ДоходыРасходы.Период = &" + стрДень.ИмяКолонки + " ТОГДА Показатели.Коэффициент * ДоходыРасходы.СуммаОборот ИНАЧЕ 0 КОНЕЦ)");
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		КонструкторДанных.ДобавитьПараметр(стрДень.ИмяКолонки, стрДень.Период);
	КонецЦикла;
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Транспорт");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Водитель");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Экспедитор");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Контрагент");
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Показатель"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Предопределенная процедура. Устанавливает в отчет новый период формирования.
//
// Параметры:
//  НовоеНачалоПериода <Дата>
//  НовыйКонецПериода  <Дата>
//
Процедура УстановитьПериод(НовоеНачалоПериода, НовыйКонецПериода) Экспорт
	НачалоПериода = НачалоДня(НовоеНачалоПериода);
	КонецПериода = КонецДня(НовыйКонецПериода);
	
	тзДни = Новый ТаблицаЗначений;
	тзДни.Колонки.Добавить("ИмяКолонки");
	тзДни.Колонки.Добавить("Поле");
	тзДни.Колонки.Добавить("Представление");
	тзДни.Колонки.Добавить("День");
	тзДни.Колонки.Добавить("Период");
	
	текДата = НачалоМесяца(НовоеНачалоПериода);
	Пока текДата < КонецПериода Цикл
		стрДень = тзДни.Добавить();
		стрДень.День = День(текДата);
		стрДень.Представление = Строка(стрДень.День);
		стрДень.ИмяКолонки = "ДЕНЬ" + СтрЗаменить(Строка(стрДень.День), Символы.НПП, "");
		стрДень.Поле = стрДень.ИмяКолонки;
		стрДень.Период = НачалоДня(текДата);
		
		текДата = текДата + 24 * 60 * 60;
	КонецЦикла;
КонецПроцедуры

// Предопределенная функция. Создает копию текущего отчета вместе с параметрами формирования.
//
// Возвращаемое значение:
//  <ОтчетОбъект>
//
Функция Скопировать() Экспорт
	КопияОтчета = Отчеты[Метаданные().Имя].Создать();
	
	Строка = ЗначениеВСтрокуВнутр(ЭтотОбъект.ПараметрыФормирования);
	КопияОтчета.ПараметрыФормирования = ЗначениеИзСтрокиВнутр(Строка); 
	КопияОтчета.УстановитьПериод(НачалоПериода, КонецПериода);
	Возврат КопияОтчета;		
КонецФункции

УстановитьПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
Настроить();

#КонецЕсли