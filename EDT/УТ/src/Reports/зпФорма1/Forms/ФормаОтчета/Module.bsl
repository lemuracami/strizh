
&НаКлиенте
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
КонецФункции

&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ТекущаяДата());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	НовОбъект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		НовОбъект = НовОбъект[МассивИмен[Сч]]
	КонецЦикла;
	
	Возврат НовОбъект[ПоследнееПоле];
	
КонецФункции

&НаКлиенте
Процедура УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение, ТолькоЕслиНеЗаполнен = Ложь) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	НовОбъект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		НовОбъект = НовОбъект[МассивИмен[Сч]]
	КонецЦикла;
	Если НЕ ТолькоЕслиНеЗаполнен ИЛИ НЕ ЗначениеЗаполнено(НовОбъект[ПоследнееПоле]) Тогда
		НовОбъект[ПоследнееПоле] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	//Модифицированность = Истина;
	УстановитьНастройкиОтчета();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		Представление = ПолучитьПредставлениеМесяца(Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			//Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
		УстановитьНастройкиОтчета();
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ТекущаяДата());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.зпНачислениеЗП.Форма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаСтрокойПриИзменении(Элемент)
	ВводМесяцаПриИзменении(ЭтаФорма, "Отчет.ПериодОтчета", "ПериодОтчетаСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Отчет.ПериодОтчета", "ПериодОтчетаСтрокой", , );
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ТекущаяДата());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
		
		//Модифицированность = Истина;
	 	УстановитьНастройкиОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ВводМесяцаРегулирование(ЭтаФорма, "Отчет.ПериодОтчета", "ПериодОтчетаСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРасшифровкиРекурсивно(Данные, Расшифровка, СтруктураДанных)
	ЭлементРасшифровка = Данные.Элементы.Получить(Расшифровка);
	Если ЭлементРасшифровка <> Неопределено Тогда
		ТипЭлемента = ТипЗнч(ЭлементРасшифровка);
		Если ТипЭлемента = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Поля = ЭлементРасшифровка.ПолучитьПоля();
			Для Каждого ЭлементПоле Из Поля Цикл
				ИмяПоляСтруктуры = СтрЗаменить(ЭлементПоле.Поле, ".", "");
				Если Не СтруктураДанных.Свойство(ИмяПоляСтруктуры) Тогда
					СтруктураДанных.Вставить(ИмяПоляСтруктуры, ЭлементПоле.Значение);
				КонецЕсли;
			КонецЦикла;
			Родители = ЭлементРасшифровка.ПолучитьРодителей();
			Для Каждого ЭлементРодитель Из Родители Цикл
				ПолучитьДанныеРасшифровкиРекурсивно(Данные, ЭлементРодитель.Идентификатор, СтруктураДанных);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Родители = ЭлементРасшифровка.ПолучитьРодителей();
			Для Каждого ЭлементРодитель Из Родители Цикл
				ПолучитьДанныеРасшифровкиРекурсивно(Данные, ЭлементРодитель.Идентификатор, СтруктураДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция РезультатОбработкаРасшифровкиНаСервере()
	
	НомерКолонкиТабДок = Элементы.Результат.ТекущаяОбласть.Лево;
	НомерСтрокиТабДок = Элементы.Результат.ТекущаяОбласть.Верх;
	
	ДанныеРасшифр = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	СтруктураДанных = Новый Структура;
	
	//Расшифровка = Результат.Область(НомерСтрокиТабДок, 1).Расшифровка;
	//Если Расшифровка <> Неопределено Тогда
	//	ПолучитьДанныеРасшифровкиРекурсивно(ДанныеРасшифр, Расшифровка, СтруктураДанных);
	//КонецЕсли;
	
	Расшифровка = Результат.Область(НомерСтрокиТабДок, НомерКолонкиТабДок).Расшифровка;
	Если Расшифровка <> Неопределено Тогда
		ПолучитьДанныеРасшифровкиРекурсивно(ДанныеРасшифр, Расшифровка, СтруктураДанных);
	КонецЕсли;
	
	//Для НомерСтрокиТабДок = 1 По Результат.ВысотаТаблицы Цикл
	//	Расшифровка = Результат.Область(НомерСтрокиТабДок, НомерКолонкиТабДок).Расшифровка;
	//	Если Расшифровка <> Неопределено Тогда
	//		ПолучитьДанныеРасшифровкиРекурсивно(ДанныеРасшифр, Расшифровка, СтруктураДанных);
	//	КонецЕсли;
	//	Если СтруктураДанных.Свойство("ДатаРасчета") Тогда
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
	Если Не СтруктураДанных.Свойство("ФизЛицо") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДатаРасчета") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", СтруктураДанных.ФизЛицо);
		Запрос.УстановитьПараметр("ДатаРасчета", СтруктураДанных.ДатаРасчета);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Рейс КАК Рейс
		|ИЗ
		|	(ВЫБРАТЬ
		|		зпИсходныеДанныеРасчетаЗППоЗаказам.Рейс КАК Рейс
		|	ИЗ
		|		РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам КАК зпИсходныеДанныеРасчетаЗППоЗаказам
		|	ГДЕ
		|		зпИсходныеДанныеРасчетаЗППоЗаказам.ДатаРасчета = &ДатаРасчета
		|		И зпИсходныеДанныеРасчетаЗППоЗаказам.ФизЛицо = &ФизЛицо
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		зпИсходныеДанныеРасчетаЗППоРейсам.Рейс
		|	ИЗ
		|		РегистрСведений.зпИсходныеДанныеРасчетаЗППоРейсам КАК зпИсходныеДанныеРасчетаЗППоРейсам
		|	ГДЕ
		|		зпИсходныеДанныеРасчетаЗППоРейсам.ДатаРасчета = &ДатаРасчета
		|		И зпИсходныеДанныеРасчетаЗППоРейсам.ФизЛицо = &ФизЛицо) КАК ВложенныйЗапрос";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураДанных.Вставить("Рейсы", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Рейс"));
		
	ИначеЕсли СтруктураДанных.Свойство("СуммаНачисленоУдержано") Тогда
		СтруктураДанных.Вставить("НачалоПериода", Отчет.ПериодОтчета);
		СтруктураДанных.Вставить("ОкончаниеПериода", КонецМесяца(Отчет.ПериодОтчета));
		СтруктураДанных.Вставить("Регион", Отчет.Регион);
	Иначе
		СтруктураДанных = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтруктураДанных = РезультатОбработкаРасшифровкиНаСервере();
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если СтруктураДанных.Свойство("Рейсы") Тогда
		
		ПараметрыФормы = Новый Структура("СформироватьПриОткрытии,Регион,Рейс,ФизЛицо", Истина, Отчет.Регион,, СтруктураДанных.ФизЛицо);
		
		Для Каждого Рейс Из СтруктураДанных.Рейсы Цикл
			ПараметрыФормы.Рейс = Рейс;
			ОткрытьФорму("Отчет.зпФорма2.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЦикла;
	ИначеЕсли СтруктураДанных.Свойство("СуммаНачисленоУдержано") Тогда
		
		//СтруктураОтбора = Новый Структура("Регион,НачалоПериода,ОкончаниеПериода,ФизЛицо");
		//ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтруктураДанных);
		
		//ПараметрыФормы = Новый Структура("СформироватьПриОткрытии,Отбор", Истина, СтруктураОтбора);
		ПараметрыФормы = Новый Структура("СформироватьПриОткрытии,Отбор", Истина, СтруктураДанных);
		
		ОткрытьФорму("Отчет.зпДополнительныеНачисленияУдержания.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
		
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиОтчета()
	
	УстановитьРегион = Не Отчет.Регион.Пустая();
	УстановитьПериод = ЗначениеЗаполнено(Отчет.ПериодОтчета);
	Если УстановитьРегион Или УстановитьПериод Тогда
		
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		ЭлементыПараметров = Настройки.ПараметрыДанных.Элементы;
		
		Если УстановитьРегион Тогда
			ТекПараметр = ЭлементыПараметров.Найти("Регион");
			ТекПараметр.Значение = Отчет.Регион;
			ТекПараметр.Использование = Истина;
		КонецЕсли;
		
		Если УстановитьПериод Тогда
			ТекПараметр = ЭлементыПараметров.Найти("НачалоПериода");
			ТекПараметр.Значение = Отчет.ПериодОтчета;
			ТекПараметр.Использование = Истина;
			
			ТекПараметр = ЭлементыПараметров.Найти("ОкончаниеПериода");
			ТекПараметр.Значение = КонецМесяца(Отчет.ПериодОтчета);
			ТекПараметр.Использование = Истина;
		КонецЕсли;
		
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегионПриИзменении(Элемент)
	
	УстановитьНастройкиОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Регион", Отчет.Регион);
	Параметры.Свойство("ПериодОтчета", Отчет.ПериодОтчета);
	
	Если Отчет.Регион.Пустая() Тогда
		Отчет.Регион = ПараметрыСеанса.ТерминалДоставки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.ПериодОтчета) Тогда
		ПериодОтчетаСтрокой = Формат(Отчет.ПериодОтчета, "ДФ='ММММ гггг'");
	КонецЕсли;
	
	//УстановитьНастройкиОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	УстановитьНастройкиОтчета();
	
КонецПроцедуры

