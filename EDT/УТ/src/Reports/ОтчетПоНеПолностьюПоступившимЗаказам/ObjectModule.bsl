Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	//СтандартнаяОбработка=ЛОжь;
	//Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	//	
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,ДанныеРасшифровки);
	//
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	//
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//
	//ПроцессорВывода.НачатьВывод();

	//ДокументРезультат.Автомасштаб = истина;
	//
	//ЭлементРезультата = ПроцессорКомпоновки.Следующий();

	//Пока ЭлементРезультата <> Неопределено Цикл
	//	Если ЭлементРезультата.ЗначенияПараметров.Количество()=1 Тогда
	//		Если ЭлементРезультата.ЗначенияПараметров[0].Значение = "Разорвать" Тогда
	//			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	//		КонецЕсли;
	//	КонецЕсли;
	//	ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
	//	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	//КонецЦикла;
	//ПроцессорВывода.ЗакончитьВывод();

КонецПроцедуры

Функция СформироватьОтправитьПоПочте(Период, ТерминалПриемки = Неопределено, НастройкаОтправки = Неопределено) Экспорт
	
	Если ТерминалПриемки = Неопределено тогда
		ТерминалПриемки = Новый Массив;
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);	
	Конецесли;	
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	СтруктураВариантов = Новый Структура;
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.Основной);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Дата = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	Дата.Значение = Период;
	Дата.Использование = Истина;
	
	Терминал = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Терминал"));
	Терминал.Значение = ТерминалПриемки;
	Терминал.Использование = Истина;
	
	Если Не НастройкаОтправки = Неопределено тогда
		
		ТаблицаЦелевыхКлиентов = НастройкаОтправки.КонтрагентыЦелевые.Выгрузить();		
		ТаблицаЦелевыхКлиентовКОтправке = ТаблицаЦелевыхКлиентов.Скопировать(ТаблицаЦелевыхКлиентов.НайтиСтроки(Новый Структура("Отметка", Истина)));
	
		МассивЦелевыхКлиентов = ТаблицаЦелевыхКлиентовКОтправке.ВыгрузитьКолонку("Контрагент");
		
		Если МассивЦелевыхКлиентов.Количество() > 0 Тогда
			НовыйЭлементОтбора = Настройки.Отбор.Элементы.
			Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ИнтернетМагазин");
			
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйЭлементОтбора.ПравоеЗначение = МассивЦелевыхКлиентов;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпоновщикМакета         = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки           = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;

	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	Результат = Новый ТабличныйДокумент();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	Результат.Автомасштаб = истина;
	ПроцессорВывода.НачатьВывод();
	
	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	
	Пока ЭлементРезультата <> Неопределено Цикл
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
		
	Если (Результат.ВысотаТаблицы - Результат.ФиксацияСверху)>1 Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция СформироватьОтчетДляКонтрагента(Период, ТерминалПриемки = Неопределено, НастройкаОтправки = Неопределено, Контрагент = Неопределено) Экспорт
	
	Если ТерминалПриемки = Неопределено тогда
		ТерминалПриемки = Новый Массив;
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);	
	Конецесли;	
		
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	СтруктураВариантов = Новый Структура;
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.Основной);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Дата = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	Дата.Значение = Период;
	Дата.Использование = Истина;
	
	Терминал = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Терминал"));
	Терминал.Значение = ТерминалПриемки;
	Терминал.Использование = Истина;
	
	Если Не Контрагент = Неопределено тогда
		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.
		Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("ИнтернетМагазин");
		
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Контрагент;
		
	КонецЕсли;
	
	КомпоновщикМакета         = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки           = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;

	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	Результат = Новый ТабличныйДокумент();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	Результат.Автомасштаб = истина;
	ПроцессорВывода.НачатьВывод();
	
	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	
	Пока ЭлементРезультата <> Неопределено Цикл
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
		
	Если (Результат.ВысотаТаблицы - Результат.ФиксацияСверху)>1 Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьПочтуКонтрагентовОтчета(Период, ТерминалПриемки, Контрагент = Неопределено, КонтрагентыИсключения = Неопределено) Экспорт
	
	Если ТерминалПриемки = Неопределено тогда
		ТерминалПриемки = Новый Массив;
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалПриемки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);	
	Конецесли;	
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	СтруктураВариантов = Новый Структура;
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.Основной);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Дата = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	Дата.Значение = Период;
	Дата.Использование = Истина;
	
	Терминал = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Терминал"));
	Терминал.Значение = ТерминалПриемки;
	Терминал.Использование = Истина;
	
	Если Контрагент <> Неопределено Тогда
		Если Контрагент.ЭтоГруппа Тогда
			НовыйЭлементОтбора = Настройки.Отбор.Элементы.
			Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ИнтернетМагазин");
			
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВИерархии;
			НовыйЭлементОтбора.ПравоеЗначение = Контрагент;		
		Иначе	
			НовыйЭлементОтбора = Настройки.Отбор.Элементы.
			Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ИнтернетМагазин");
			
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.ПравоеЗначение = Контрагент;
		КонецЕсли;
    ИначеЕсли КонтрагентыИсключения <> Неопределено Тогда
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("ИнтернетМагазин");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
        НовыйЭлементОтбора.ПравоеЗначение = КонтрагентыИсключения;
    КонецЕсли;
	
	КомпоновщикМакета         = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки           = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	Рез = Новый ДеревоЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Рез);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	МассивКонтрагенов = Новый Массив;

	ТаблицаАдресов = Новый ТаблицаЗначений;
	ТаблицаАдресов.Колонки.Добавить("Контрагент");
	ТаблицаАдресов.Колонки.Добавить("Адреса");
	
	попытка
		
		Для Каждого ТекСтрока1Уровня Из Рез.Строки Цикл
			
			Для Каждого  ТекСтрока2Уровня Из ТекСтрока1Уровня.Строки Цикл
				МассивКонтрагенов.Добавить(ТекСтрока2Уровня.ИнтернетМагазин.Ссылка);
			КонецЦикла;	
			
		КонецЦикла;	
		
		////ВРЕМЕННОЕ ОГРАНИЧЕНИЕ ТОЛЬКО НА МАРКЕТПЛЕЙС
		//
		//МаркетплейсСсылка = Справочники.Контрагенты.НайтиПоКоду("Shop_723");
		//Если МассивКонтрагенов.Найти(МаркетплейсСсылка) = Неопределено Тогда
		//	Возврат ТаблицаАдресов;
		//Иначе
		//	МассивКонтрагенов.Очистить();
		//	МассивКонтрагенов.Добавить(МаркетплейсСсылка);
		//Конецесли;	
		//
		////ВРЕМЕННОЕ ОГРАНИЧЕНИЕ ТОЛЬКО НА МАРКЕТПЛЕЙС

		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	РассылкиКонтрагентов.Контрагент КАК Контрагент,
		            |	РассылкиКонтрагентов.Почта КАК Почта
		            |ИЗ
		            |	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
		            |ГДЕ
		            |	РассылкиКонтрагентов.Контрагент.Ссылка В(&СписокКонтрагентов)
		            |	И РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(перечисление.типырассылки.складскаярассылка)
		            |	И РассылкиКонтрагентов.Активна
		            |
		            |СГРУППИРОВАТЬ ПО
		            |	РассылкиКонтрагентов.Контрагент,
		            |	РассылкиКонтрагентов.Почта";
		Зап.УстановитьПараметр("СписокКонтрагентов", МассивКонтрагенов);			
		Рез = Зап.Выполнить().Выгрузить();
		
		Контрагенты = Рез.Скопировать(,"Контрагент");
		Контрагенты.Свернуть("Контрагент");
		
		Для Каждого СтрКонтрагент Из Контрагенты Цикл
			
			СтрокаКонтрагента = ТаблицаАдресов.Добавить();
			
			АдресаКонтрагента = Рез.Скопировать(Рез.НайтиСтроки(Новый Структура("Контрагент", СтрКонтрагент.Контрагент)));
			
			СтрокаКонтрагента.Контрагент = СтрКонтрагент.Контрагент;
			СтрокаКонтрагента.Адреса = АдресаКонтрагента.ВыгрузитьКолонку("Почта");
			
		КонецЦикла;	
		
	Исключение
		
	КонецПопытки;
	
	Возврат ТаблицаАдресов;
	
КонецФункции	
