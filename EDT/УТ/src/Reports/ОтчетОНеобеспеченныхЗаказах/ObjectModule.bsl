Функция СформироватьОтправитьПоПочте(НачалоПериода,КонецПериода, Контрагент, КонтрагеныИсключения, ТерминалДоставки = Неопределено) Экспорт
    СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек2.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек2.Настройки;
    
     //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода",         НачалоПериода);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",           КонецПериода);
	
	Если НЕ ЗначениеЗаполнено(ТерминалДоставки) Тогда		
		// МАС - 21.03.2018 - № --->> 
		//ТерминалДоставки = Новый СписокЗначений;
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		ТерминалДоставки = Новый Массив;
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		// <<--- МАС 		
		КонецЕсли;	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалПриема",   ТерминалДоставки);
 
    
    //Добавляем отбор если есть Контрагент в параметрах
    Если Контрагент <> Неопределено Тогда  
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
        НовыйЭлементОтбора.ПравоеЗначение = Контрагент;
    ИначеЕсли КонтрагеныИсключения <> Неопределено Тогда
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
        НовыйЭлементОтбора.ПравоеЗначение = КонтрагеныИсключения;
    КонецЕсли;

    
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    ////Проверка на пустоту если не указан контрагент
    //Если Контрагент <> Неопределено Тогда 
    //    Возврат Результат;
    //Иначе
        Если (Результат.ВысотаТаблицы-Результат.ФиксацияСверху)>1 Тогда
            Возврат Результат;
        Иначе
            Возврат Неопределено;
        КонецЕсли;
    //КонецЕсли;
    
КонецФункции	

Функция ПолучитьАктуальныхКонтрагентовОтчета(НачалоПериода,КонецПериода, Контрагент, КонтрагеныИсключения, ТерминалДоставки = Неопределено) Экспорт
    СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек2.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек2.Настройки;
    
     //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода",         НачалоПериода);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",           КонецПериода);
	
	Если НЕ ЗначениеЗаполнено(ТерминалДоставки) Тогда		
		// МАС - 21.03.2018 - № --->> 
		//ТерминалДоставки = Новый СписокЗначений;
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		ТерминалДоставки = Новый Массив;
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		// <<--- МАС 		
		КонецЕсли;	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалПриема",   ТерминалДоставки);
 
    
    //Добавляем отбор если есть Контрагент в параметрах
    Если Контрагент <> Неопределено Тогда  
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
        НовыйЭлементОтбора.ПравоеЗначение = Контрагент;
    ИначеЕсли КонтрагеныИсключения <> Неопределено Тогда
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
        НовыйЭлементОтбора.ПравоеЗначение = КонтрагеныИсключения;
    КонецЕсли;

    
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    Результат = Новый ТаблицаЗначений;
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Попытка
		Результат.Свернуть("Контрагент");	
		МассивКонтрагентов = Результат.ВыгрузитьКолонку("Контрагент");
		
		СтрокаНеопределено = МассивКонтрагентов.Найти(Неопределено);
		Если НЕ СтрокаНеопределено = Неопределено Тогда
			МассивКонтрагентов.Удалить(СтрокаНеопределено);
		КонецЕсли;	
		
		Возврат МассивКонтрагентов;
	Исключение
		
		Возврат Неопределено;
	Конецпопытки	
	
	
	
КонецФункции

Функция СформироватьОтправитьПоПочте_Контрагентам(НачалоПериода,КонецПериода, Контрагент, КонтрагеныИсключения, ТерминалДоставки = Неопределено, ТекстHTML = Неопределено) Экспорт
    СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных1");

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек2.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек2.Настройки;
    
     //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода",         НачалоПериода);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",           КонецПериода);
	
	//Если НЕ ЗначениеЗаполнено(ТерминалДоставки) Тогда		
	//	// МАС - 21.03.2018 - № --->> 
	//	//ТерминалДоставки = Новый СписокЗначений;
	//	//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
	//	//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
	//	//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
	//	ТерминалДоставки = Новый Массив;
	//	ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
	//	ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
	//	ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
	//	// <<--- МАС 		
	//КонецЕсли;	
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалПриема",   ТерминалДоставки);
 
    
    //Добавляем отбор если есть Контрагент в параметрах
    Если Контрагент <> Неопределено Тогда  
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
        НовыйЭлементОтбора.ПравоеЗначение = Контрагент;
    ИначеЕсли КонтрагеныИсключения <> Неопределено Тогда
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
        НовыйЭлементОтбора.ПравоеЗначение = КонтрагеныИсключения;
    КонецЕсли;

    
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    ////Проверка на пустоту если не указан контрагент
    //Если Контрагент <> Неопределено Тогда 
    //    Возврат Результат;
    //Иначе
	ТекстHTML = "";
	Если (Результат.ВысотаТаблицы-Результат.ФиксацияСверху)>0 Тогда
		
		ТекстHTML = СформироватьHTML_Контрагентам(НачалоПериода,КонецПериода, Контрагент, КонтрагеныИсключения, ТерминалДоставки);
		Возврат Результат;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
    //КонецЕсли;
    
КонецФункции

Функция СформироватьHTML_Контрагентам(НачалоПериода,КонецПериода, Контрагент, КонтрагеныИсключения, ТерминалДоставки = Неопределено) Экспорт
    СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных1");

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек2.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек2.Настройки;
    
     //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода",         НачалоПериода);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",           КонецПериода); 
    
    //Добавляем отбор если есть Контрагент в параметрах
    Если Контрагент <> Неопределено Тогда  
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
        НовыйЭлементОтбора.ПравоеЗначение = Контрагент;
    ИначеЕсли КонтрагеныИсключения <> Неопределено Тогда
        НовыйЭлементОтбора = Настройки.Отбор.Элементы.
        Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        
        ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент");
        
        НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
        НовыйЭлементОтбора.Использование  = Истина;
        НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
        НовыйЭлементОтбора.ПравоеЗначение = КонтрагеныИсключения;
    КонецЕсли;

    
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    //Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Результат = Новый ТаблицаЗначений;
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений ;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	////Проверка на пустоту если не указан контрагент
		
	МакетТелаПисьма = ПолучитьМакет("МакетHTML");
	ТекстHTMLМакет = МакетТелаПисьма.ПолучитьТекст();
	ТекстHTML = СтрЗаменить(ТекстHTMLМакет, "</tbody></table></body></html>","");
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		ТекстHTML = ТекстHTML + "
		|<TR>
		|	<TD>" + СокрЛП(СтрокаРезультата.Номер) +"</TD>
		|	<TD>" + СокрЛП(СтрокаРезультата.НомерВнешнегоЗаказа) +"</TD>
		|	<TD>" + СокрЛП(СтрокаРезультата.КоличествоМест) +"</TD>
		|</TR>";	 
	КонецЦикла;	
	ТекстHTML = ТекстHTML + "
	|</tbody></table></body></html>";	
	//|</TBODY></TABLE>
	//|<P>&nbsp;</P>
	//|<P><SPAN style='FONT-SIZE: 14px; FONT-FAMILY: ""Helvetica Neue"", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(83,92,105); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'><STRONG><FONT color=#413003 size=3 face=Arial>Просим Вас отклонить эти заявки или же перенести их на актуальную для клиента дату.</FONT></STRONG></SPAN></P></BODY></HTML>";
	
	Возврат ТекстHTML;
	
КонецФункции
