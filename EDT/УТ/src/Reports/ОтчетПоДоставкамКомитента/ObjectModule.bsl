
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка=ЛОжь;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	
	ДокументРезультат.Автомасштаб = истина;
	
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();

	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
КонецПроцедуры



Функция СформироватьОтправитьПоПочте(Период,ТаблицаКонтрагентовИсключений,ОтборКонтрагент, Терминал = Неопределено, НастройкиОтправки = Неопределено) Экспорт
	
	//СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных_2");
	СтруктураВариантов = Новый Структура;
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.Контрагенты);
	
	КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].Значение = Период;
	КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].использование = Истина;
	
	//КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = Контрагент;
	//КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//КомпоновщикНастроек.Настройки.отбор.элементы[0].Использование = Истина;
	ТерминалСпб = Справочники.РегиональныеТерминалы.СПбСтриж;
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	Рез = Новый ДеревоЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Рез);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//Для Каждого ТекТип Из Рез.Строки Цикл        //lem, фикс двойной отправки отчета
		//Для Каждого Тек Из ТекТип.Строки Цикл
		Для Каждого Тек Из Рез.Строки Цикл
	        //Серегин М.В. 08.09.2015 14:57:55 костыль, не отсылать исключениям письма
	        Если ТаблицаКонтрагентовИсключений<>Неопределено Тогда
	            Если ТаблицаКонтрагентовИсключений.Найти(Тек.ИнтернетМагазин)<> Неопределено Тогда
					Продолжить;        
	            КонецЕсли;
	        КонецЕсли;
	        //Серегин М.В. 08.09.2015 15:00:06 
	        
	        //Серегин М.В. 08.09.2015 15:02:19 Новую процедуру по формированию писать лень, вставлю костыль сюда
	        // код нужен для формирования отчета по регламенту отправки отчетов по контрагентам
	        Если ОтборКонтрагент <> Неопределено Тогда
	            Если ОтборКонтрагент <> Тек.ИнтернетМагазин Тогда
					Продолжить;    
	            КонецЕсли;
	        КонецЕсли;
	        //Серегин М.В. 08.09.2015 15:02:57 
			
			КонтрагентДляРассылки = Тек.ИнтернетМагазин;
			
			//СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
			СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных_2");
			
			СтруктураВариантов = Новый Структура;
			пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
			Для Каждого пЭл ИЗ пВарианты Цикл
				СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
			КонецЦикла;
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.Основной);
			
			КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].Значение = Период;
			КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].использование = Истина;
					
			// МАС - 12.04.2018 - № --->> 
			//КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = Тек.ИнтернетМагазин.Ссылка;
			//КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонтрагентРодитель = Неопределено;
			Агрегировать = Ложь;
			ЗапросАгрегирование = Новый Запрос("ВЫБРАТЬ
			                                   |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах, ЛОЖЬ) КАК Агрегировать,
			                                   |	Контрагенты.Ссылка КАК КонтрагентРодитель
			                                   |ИЗ
			                                   |	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних
			                                   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			                                   |		ПО ПараметрыКонтрагентовСрезПоследних.Контрагент = Контрагенты.ОсновнойМагазин");
			ЗапросАгрегирование.УстановитьПараметр("Контрагент", Тек.ИнтернетМагазин);
			РезАгр = ЗапросАгрегирование.Выполнить().Выбрать();
			Если РезАгр.Следующий() Тогда		
				Агрегировать = РезАгр.Агрегировать;
				КонтрагентРодитель = РезАгр.КонтрагентРодитель;	
			КонецЕсли;
					
			Если Агрегировать И ЗначениеЗаполнено(КонтрагентРодитель) Тогда
			    КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = КонтрагентРодитель;
				КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;		
			Иначе		
				КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = Тек.ИнтернетМагазин;
				КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			// <<--- МАС 			
			КомпоновщикНастроек.Настройки.отбор.элементы[0].Использование = Истина;
			
			
			// Михушкин --->> 
			Если Терминал <> Неопределено Тогда			
				КомпоновщикНастроек.Настройки.отбор.элементы[1].ПравоеЗначение = Терминал;
				КомпоновщикНастроек.Настройки.отбор.элементы[1].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КомпоновщикНастроек.Настройки.отбор.элементы[1].Использование = Истина;
			КонецЕсли;
			// <<--- Михушкин 
			
			
			Настройки = КомпоновщикНастроек.Настройки;
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки);	
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
			
			Результат = Новый ТабличныйДокумент;
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
		
			Г = Новый УникальныйИдентификатор;
			//ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_отчет" + ".htm";
			//Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.HTML3);
			//Т = Новый ТекстовыйДокумент();
			//Т.Прочитать(ПутьКФайлу);
			//Стр = Т.ПолучитьТекст();
			
			//ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_отчет" + ".xls";
			ПутьКФайлу = КаталогВременныхФайлов() +  "\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_Отчет по доставкам комитента" + ".xls";
			
			Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
			//Т = Новый ТекстовыйДокумент();
			//Т.Прочитать(ПутьКФайлу);
			//Стр = Т.ПолучитьТекст();
			
			
			Мас = Новый Массив;
			
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			            |	РассылкиКонтрагентов.Почта КАК Почта
			            |ИЗ
			            |	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
			            |ГДЕ
			            |	РассылкиКонтрагентов.Контрагент = &Контрагент
			            |	И РассылкиКонтрагентов.ТипРассылки = ЗНАЧЕНИЕ(перечисление.типырассылки.логистическаярассылка)
			            |
			            |УПОРЯДОЧИТЬ ПО
			            |	Почта";
			Зап.УстановитьПараметр("Контрагент", Тек.ИнтернетМагазин);			
			Рез = Зап.Выполнить().Выгрузить();
			Мас = Рез.ВыгрузитьКолонку("Почта");              		
			
			
			//Если СокрЛП(Тек.ИнтернетМагазин.Код) = "Shop_169" Или СокрЛП(Тек.ИнтернетМагазин.Код) = "Shop_181" Тогда
			//	Мас.Добавить("pavel.nechaev@strizh-logistic.ru");   
			//КонецеСли;	
			//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru"); 
	        //Серегин М.В. 14.07.2015 11:10:33 по просьбе инны 			
			Мас.Добавить("inna.illarionova@strizh-logistic.ru");
			//Если Терминал = ТерминалСпб Тогда
			//	Мас.Добавить("olga.efremova@strizh-logistic.ru");
			//КонецЕсли;	
			//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");       
			
	        //Мас.Добавить("yulia.semenova@strizh-logistic.ru");
	        //Серегин М.В. 14.07.2015 11:11:12 
	        //lem.ОтправитьСообщение(Мас, "Список уехавших заказов по " + СокрЛП(Тек.ИнтернетМагазин.Наименование), "Отчет об уехавших заказах во вложении",ПутьКФайлу,"Логистическая компания ""Стриж"""); //ТипТекстаПочтовогоСообщения.HTML
	        //+++++Серегин М.В. 10.11.2015 16:15:59 новый костылик
	        КоличествоЗаказов = ПолучитьКоличествоЗаказов(Период,Тек.ИнтернетМагазин, Терминал);
			
			// Михушкин --->> 	
			Если КоличествоЗаказов = 0 Тогда		
				Продолжить;			
			КонецЕсли;
	        // <<--- Михушкин 
			
	        //+++++Серегин М.В. 18.11.2015 15:25:01 
	        КоличествоПрописью = ЧислоПрописью(КоличествоЗаказов, , "заказ уехал,заказа уехало,заказов уехало,м,,,,м,0");
	        ДлинаСтроки = СтрДлина(КоличествоПрописью);
	        КолСправа = (ДлинаСтроки- СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(КоличествоПрописью," "))+1;
	        УехалоСтрока = Прав(КоличествоПрописью,КолСправа);
	        КоличествоПрописью = СтрЗаменить(КоличествоПрописью,УехалоСтрока,"");
	        ДлинаСтроки = СтрДлина(КоличествоПрописью);
	        КолСправа = (ДлинаСтроки - СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(КоличествоПрописью," "))+1;
	        ЗаказСтрока = Прав(КоличествоПрописью,КолСправа);
	        СтрокаЗаказов = Строка(КоличествоЗаказов)+ ЗаказСтрока+ УехалоСтрока;
	        //-----Серегин М.В. 18.11.2015 15:25:03 
	        
			//Тема = СтрокаЗаказов +" на доставку "+ Формат(Период.ДатаОкончания,"ДЛФ=DD") +" ("+ Терминал.Город+")";
			//Геннадий 03.02.2021 ->
			//добавлен партнер
			Тема = СтрокаЗаказов +" на доставку "+ Формат(Период.ДатаОкончания,"ДЛФ=DD") + " по " + КонтрагентДляРассылки.Наименование;
			//Геннадий <-
			
			//Задача № 2847			
			#Область ОтправкаИЛогирование
			
			Стр_ = СтрСоединить(Мас, "; ");
			
			ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);

			Если Не НастройкиОтправки = Неопределено Тогда
								
				ПараметрыЗаписи.ВидОтчета = НастройкиОтправки.Отчет;
				ПараметрыЗаписи.НастройкаОтправки = НастройкиОтправки;
				ПараметрыЗаписи.Контрагент = НастройкиОтправки.Владелец;

			Иначе
				
				ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоДоставкамКомитента;
				ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;
			
			КонецЕсли;
					
			ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
			
			ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
			ПараметрыЗаписи.GUID = Г;
			ПараметрыЗаписи.СписокПолучателей = Стр_;	
			
			ПараметрыЗаписи.Терминал = Терминал;
			
			//Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
				
			Если Не НастройкиОтправки = Неопределено Тогда
				Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда					
					//Геннадий #4415 19.01.2021 ->
					ТекстОшибки = "";
					//Асеев 31.10.2024 (Задача № 5339)>>>
					ОператорРассылки = lem.ОпределитьОператораРассылки(НастройкиОтправки, КонтрагентДляРассылки);
					//Асеев 31.10.2024 (Задача № 5339)<<<
					Если ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
	 					Отпр = lem.ОтправитьСообщение(Мас, Тема, "Отчет об уехавших заказах во вложении" + " по " + КонтрагентДляРассылки,ПутьКФайлу,"Логистическая компания ""Стриж""",,,,);
					ИначеЕсли ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
						ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
						Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(Мас, Тема, "Отчет об уехавших заказах во вложении" + " по " + КонтрагентДляРассылки,ПутьКФайлу,"Логистическая компания ""Стриж""",,,, ТекстОшибки);
					КонецЕсли;
					ПараметрыЗаписи.ОтчетОтправлен 	 = Отпр;
					ПараметрыЗаписи.ТекстОшибки 	 = ТекстОшибки;
					ПараметрыЗаписи.ОператорРассылки = ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования;
					//Геннадий19.01.2021 <-
					РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);					
				КонецЕсли;	
			Иначе
				//Геннадий #4415 21.01.2021 ->
				//для заполнения sendSetting в логе и отправке писем с учетом ОператораРассылки
				НастройкиОтправки = Справочники.НастройкиАвтоматическойОтправкиОтчетов.НайтиПоКоду("00000000028");//Отчет по доставкам комитента
				ПараметрыЗаписи.НастройкаОтправки = НастройкиОтправки;
				
				ТекстОшибки = "";
				//Асеев 31.10.2024 (Задача № 5339)>>>
				ОператорРассылки = lem.ОпределитьОператораРассылки(НастройкиОтправки, КонтрагентДляРассылки);
				//Асеев 31.10.2024 (Задача № 5339)<<<
				Если ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
					Отпр = lem.ОтправитьСообщение(Мас, Тема, "Отчет об уехавших заказах во вложении" + " по " + КонтрагентДляРассылки,ПутьКФайлу,"Логистическая компания ""Стриж""",,,,,Перечисления.ТипыРассылки.ЛогистическаяРассылка);
				ИначеЕсли ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
					ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
					Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(Мас, Тема, "Отчет об уехавших заказах во вложении" + " по " + КонтрагентДляРассылки,ПутьКФайлу,"Логистическая компания ""Стриж""",,,, ТекстОшибки, Перечисления.ТипыРассылки.ЛогистическаяРассылка);
				КонецЕсли;
				ПараметрыЗаписи.ОтчетОтправлен 	 = Отпр;
				ПараметрыЗаписи.ТекстОшибки 	 = ТекстОшибки;
				ПараметрыЗаписи.ОператорРассылки = ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования;
				//Геннадий 21.01.2021 <-
				РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
				НастройкиОтправки = Неопределено;
			КонецЕсли;
				
			//РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
			
			//КонецЕсли;
			
			//Если Не НастройкиОтправки = Неопределено Тогда
			//	
			//	//Код отправки и логирования из lem.ОтправкаОтчетовПоРасписанию
			//	ПараметрыЗапроса = Новый Структура;
			//	ПараметрыЗапроса.Вставить("Контрагент",НастройкиОтправки.Владелец.Ссылка);
			//	ПараметрыЗапроса.Вставить("ВидОтчета",НастройкиОтправки.Отчет);
			//	ПараметрыЗапроса.Вставить("НастройкаОтправки",НастройкиОтправки.Ссылка);
			//	ПараметрыЗапроса.Вставить("ПериодФормирования1",ТекущаяДата()-3600);
			//	ПараметрыЗапроса.Вставить("ПериодФормирования2",ТекущаяДата());
			//	
			//	Если НЕ lem.ОтчетОтправлялся(ПараметрыЗапроса) Тогда 
			//		
			//		//Тема = СокрЛП(Настройка.Наименование)+" за "+Формат(НачПериода,"ДФ=dd.MM.yyyy");	
			//		//Отпр = lem.ОтправитьСообщение(МасП,  Тема, Тема, ПутьКФайлу, "Логистическая компания ""Стриж""",,,,,Настройка.ТипРассылки) ;				
			//		
			//		Отпр = lem.ОтправитьСообщение(Мас, Тема, "Отчет об уехавших заказах во вложении",ПутьКФайлу,"Логистическая компания ""Стриж""");
			//		
			//		Ф = Новый ДвоичныеДанные(ПутьКФайлу);
			//		
			//		Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
			//		
			//		ТекД = ТекущаяДата();
			//		
			//		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета();
			//		ПараметрыЗаписи.Контрагент = НастройкиОтправки.Владелец.Ссылка;
			//		ПараметрыЗаписи.ПериодФормирования = ТекД;
			//		ПараметрыЗаписи.ВидОтчета = НастройкиОтправки.Отчет;
			//		
			//		ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Ф;
			//		ПараметрыЗаписи.GUID = Г;
			//		ПараметрыЗаписи.СписокПолучателей = Стр_;	
			//		ПараметрыЗаписи.ОтчетОтправлен = Отпр;
			//		
			//		РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи,  Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент, "ОтчетыКОтправке");

			//		
			//		//Наб = РегистрыСведений.ОтчетыКОтправкеРегламент.СоздатьНаборЗаписей();
			//		//Наб.Отбор.Контрагент.Установить(НастройкиОтправки.Владелец.Ссылка);
			//		//наб.Отбор.ПериодФормирования.Установить(ТекД);
			//		//Наб.Отбор.ВидОтчета.Установить(НастройкиОтправки.Отчет);
			//		//
			//		//Нов = наб.Добавить();
			//		//Нов.Контрагент = НастройкиОтправки.Владелец.Ссылка;
			//		//Нов.ПериодФормирования = ТекД;
			//		//Нов.ВыгрузкаXML = Хр;
			//		//Нов.GUID = Г;
			//		//Нов.НастройкаОтправки = НастройкиОтправки.Ссылка;
			//		//Нов.ОтчетОтправлен = Отпр;
			//		//Нов.СписокПолучателей = Стр_;
			//		//Нов.ВидОтчета = НастройкиОтправки.Отчет;
			//		//
			//		//Наб.Записать();
			//		
			//	КонецЕсли; 
			//	
			//Иначе
			//								
			//	Отпр = lem.ОтправитьСообщение(Мас, Тема, "Отчет об уехавших заказах во вложении",ПутьКФайлу,"Логистическая компания ""Стриж""",,,,,Перечисления.ТипыРассылки.ЛогистическаяРассылка);
			//	
			//	Попытка
			//		
			//		Ф = Новый ДвоичныеДанные(ПутьКФайлу);
			//		
			//		Хр = новый ХранилищеЗначения(Ф, Новый СжатиеДанных(9));
			//		
			//		ТекД = ТекущаяДата();
			//		
			//		Наб = РегистрыСведений.ОтчетыКОтправке.СоздатьНаборЗаписей();
			//		Наб.Отбор.Контрагент.Установить(КонтрагентДляРассылки);
			//		наб.Отбор.ПериодФормирования.Установить(ТекД);
			//		
			//		Нов = наб.Добавить();
			//		Нов.Контрагент = КонтрагентДляРассылки;
			//		Нов.ПериодФормирования = ТекД;
			//		Нов.ВыгрузкаXML = Хр;
			//		Нов.GUID = Г;
			//		Нов.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоДоставкамКомитента;
			//		Нов.ОтчетОтправлен = Отпр;
			//		Нов.СписокПолучателей = Стр_;
			//		
			//		Наб.Записать();
			//		
			//	Исключение
			//		
			//		
			//		
			//	КонецПопытки;
			//	//Оригинальный код отправки
			//	//ЗАБЛОКИРОВАНО ВООБЩЕ //lem.ОтправитьСообщение(Мас, Тема, "Отчет об уехавших заказах во вложении",ПутьКФайлу,"Логистическая компания ""Стриж"""); //ТипТекстаПочтовогоСообщения.HTML
			//	//-----Серегин М.В. 10.11.2015 16:16:06 			
			//	
			//КонецЕсли;
			
			#КонецОбласти
			//Задача № 2847			

		КонецЦикла;	
	//КонецЦикла;
КонецФункции

Функция ПолучитьКоличествоЗаказов (Период, ИнтерентМагазин, Терминал = Неопределено)
    СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
    СтруктураВариантов = Новый Структура;
    пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
    Для Каждого пЭл ИЗ пВарианты Цикл
        СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
    КонецЦикла;
    КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.ИТОГИ);
    
    КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].Значение = Период;
    КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].использование = Истина;
    
    КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = ИнтерентМагазин;
    КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    КомпоновщикНастроек.Настройки.отбор.элементы[0].Использование = Истина;
	
	// Михушкин --->> 
	Если Терминал <> Неопределено Тогда			
		КомпоновщикНастроек.Настройки.отбор.элементы[1].ПравоеЗначение = Терминал;
		КомпоновщикНастроек.Настройки.отбор.элементы[1].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КомпоновщикНастроек.Настройки.отбор.элементы[1].Использование = Истина;
	КонецЕсли;
	// <<--- Михушкин
    
    Настройки = КомпоновщикНастроек.Настройки;
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
    
    
    ТаблицаРезультат = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    Возврат ТаблицаРезультат.Количество();
КонецФункции
