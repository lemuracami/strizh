
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");

	//ОтчетОбъект.СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("СхемаДляРучногоРежима");
	//    
	//ЗначениеВРеквизитФормы(ОтчетОбъект,"Отчет");
	
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("СхемаДляРучногоРежима");
	
	//создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Настройки = КомпоновщикНастроек.Настройки;
	
	//установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СтПериод", СтПериод);
	////Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", ТерминалДоставки);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрСумма", ПараметрСумма);
	
		
	//Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	//
	////Формируем макет, с помощью компоновщика макета
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//
	////Передаем в макет компоновки схему, настройки и данные расшифровки
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	//
	////Выполним компоновку с помощью процессора компоновки
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	//
	////Очищаем поле табличного документа
	//Результат = Новый ТабличныйДокумент();
	////Выводим результат в табличный документ
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(Результат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	
	
	
	
	
	
	

 //   СхемаКомпоновкиДанных=ПолучитьМакет("СхемаДляРучногоРежима");
 //   Настройки=СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
 //   Компоновщик.ЗагрузитьНастройки(Настройки)   ;


 //   Настройки.ПараметрыДанных.Элементы[0].Значение=НачалоДня(ЭлементыФормы.НачПериода.Значение);
 //   Настройки.ПараметрыДанных.Элементы[2].Значение=КонецДня(ЭлементыФормы.КонПериода.Значение);

 //   ПараметрыВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"))  ;
 //   ПараметрыВывода.Использование=Истина;
 //   ПараметрыВывода.Значение = "Отчет по накладным за период с "+ Формат(ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0].Значение, "ДЛФ=Д")+" по "+  Формат(ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[2].Значение, "ДЛФ=Д") ;
 //       

 // 

 //   КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

 //   МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
 //   ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;

 //   ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);

 //   ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
 //   ЭтаФорма.ЭлементыФормы.Результат.Очистить();
 //   ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ЭлементыФормы.Результат);
 //   
 //   


 //   ПроцессорВывода.НачатьВывод();
 //   

 //   Пока Истина Цикл
 //       ОбработкаПрерыванияПользователя() ;
 //       ЭлементРезультата = ПроцессорКомпоновки.Следующий();
 //       Если ЭлементРезультата = Неопределено Тогда
 //           Прервать;
 //       Иначе
 //           ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
 //       КонецЕсли;         
 //   КонецЦикла;    
 //   
 //   
 //
 //   ПроцессорВывода.ЗакончитьВывод();
 //   ЭтаФорма.ЭлементыФормы.Результат.Показать();
 //   ЭлементыФормы.Результат.ПоказатьУровеньГруппировокСтрок(1);
 //   ЭлементыФормы.Надпись3.Видимость=Истина;
 //   ЭлементыФормы.ПолеВыбораУровня.Видимость=Истина;
	
	
	
КонецПроцедуры
