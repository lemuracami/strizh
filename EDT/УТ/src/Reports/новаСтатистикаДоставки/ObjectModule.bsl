#Если Клиент Тогда

// Предопределенное свойство. Содержит коллекцию параметров формирования отчета.
//
Перем ПараметрыФормирования Экспорт; // <Структура>

Перем КонструкторДанных;
Перем НачалоПериода, КонецПериода;

// Предопределенная функция. Возвращает свойства отчета.
//
// Возвращаемое значение:
//  <Структура[СвойстваОтчета]>
//
Функция ПолучитьСвойства() Экспорт
	Возврат Новый Структура("ИнтерфейсВыбораДаты, ДатаНачала, ДатаОкончания", "Период", НачалоПериода, КонецПериода);
КонецФункции

Процедура СформироватьОтбор()
	КонструкторДанных.ДобавитьПараметр("НачалоПериода", '00010101');
	КонструкторДанных.ДобавитьПараметр("КонецПериода", '00010101');
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		Отбор = " И (Доставки.ВремяОтправленияС МЕЖДУ &НачалоПериода И &КонецПериода)";
		
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		Отбор = " И Доставки.ВремяОтправленияС >= &НачалоПериода";
		
	ИначеЕсли ЗначениеЗаполнено(КонецПериода) И Не ЗначениеЗаполнено(НачалоПериода) Тогда
		Отбор = " И Доставки.ВремяОтправленияС <= &КонецПериода";
		
	Иначе
		Отбор = "";
	КонецЕсли;
	КонструкторДанных.УстановитьПатч("{ОТБОР_ПО_ПЕРИОДУ}", Отбор);
КонецПроцедуры

// Предопределенная функция. Возвращает таблицу всех возможных отборов отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьОтборы() Экспорт
	тзОтборы = КонструкторДанных.ПолучитьТаблицуОтборов();
	
	Возврат тзОтборы;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных группировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаГруппировок]>
//
Функция ПолучитьГруппировки() Экспорт
	тзГруппировки = КонструкторДанных.ПолучитьТаблицуГруппировок("Статистика");
	
	Возврат тзГруппировки;
КонецФункции

// Предопределенная функция. Возвращает имена группировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеГруппировкиПоУмолчанию() Экспорт
	мсГруппировки = Новый Массив;
	
	мсГруппировки.Добавить("Статистика");
	
	Возврат мсГруппировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных сортировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировки() Экспорт
	тзСортировки = КонструкторДанных.ПолучитьТаблицуСортировок();
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу сортировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировкиПоУмолчанию() Экспорт
	тзСортировки = новаОтчеты.ПолучитьТаблицуСортировок();
		
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных показателей отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПоказателей]>
//
Функция ПолучитьПоказатели() Экспорт
	тзПоказатели = КонструкторДанных.ПолучитьТаблицуПоказателей();
	
	Возврат тзПоказатели;
КонецФункции

// Предопределенная функция. Возвращает имена показателей, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеПоказателиПоУмолчанию() Экспорт
	мсПоказатели = Новый Массив;
	
	мсПоказатели.Добавить("Статистика");
	мсПоказатели.Добавить("КоличествоЗаказов");
	мсПоказатели.Добавить("КоличествоТочекДоставки");
	мсПоказатели.Добавить("КоличествоКлиентов");
	
	мсПоказатели.Добавить("ВесЗаказов");
	мсПоказатели.Добавить("ОбъемЗаказов");
	мсПоказатели.Добавить("СуммаЗаказов");
	
	Возврат мсПоказатели;
КонецФункции

// Предопределенная процедура. Формирует отчет в указанном табличном документе с текущими параметрами формирования.
//
// Параметры:
//  ТД <ТабличныйДокумент>
//
Процедура Сформировать(ТД) Экспорт
	УстановитьПериод(ПараметрыФормирования.НачалоПериода, ПараметрыФормирования.КонецПериода);
	Настроить();	
	
	КонструкторДанных.ПрименитьПараметрыФормированияОтчета(ПараметрыФормирования);
	
	дзРезультат = КонструкторДанных.ПолучитьДанные();
		
	тзИтоги = КонструкторДанных.ПолучитьТаблицуИтогов();
	
	новаОтчеты.СформироватьТабличныйДокумент(ЭтотОбъект, ТД, дзРезультат, тзИтоги, "");
		
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТД.АвтоМасштаб = Истина;
КонецПроцедуры

// Предопределенная процедура. Обрабатывает событие "Обработка расшифровки" отчета.
//
// Параметры:
//  Форма                <Форма>
//  Элемент              <ЭлементУправления>
//  Расшифровка          <Произвольный>
//  СтандартнаяОбработка <Булево>
//
Процедура ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если новаОтчеты.Расшифровать(Форма, Элемент, Расшифровка) Тогда Возврат; КонецЕсли;
КонецПроцедуры

Процедура Настроить()
	КонструкторДанных = Обработки.новаКонструкторЗапроса.Создать();
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ
	|
	|	"" Заказы                "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_ЗАКАЗЫ}
	|{ОТБОР_ПО_ПЕРИОДУ}	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""	Доставлено заказов    "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|   {ОТБОР_ПОДЗАПРОСА}
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_ДОСТАВЛЕНО}
	|{ОТБОР_ПО_ПЕРИОДУ}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""	Доставлено частично "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|   {ОТБОР_ПОДЗАПРОСА}
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_ДОСТАВЛЕНО_ЧАСТИЧНО}
	|{ОТБОР_ПО_ПЕРИОДУ}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""	Не доставлено заказов "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|   {ОТБОР_ПОДЗАПРОСА}
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_НЕДОСТАВЛЕНО}
	|{ОТБОР_ПО_ПЕРИОДУ}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""	Отменено заказов "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_ОТМЕНЕНО}
	|{ОТБОР_ПО_ПЕРИОДУ}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	"" Посещено: "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|	{ОТБОР_ПОДЗАПРОСА_РЕЙСА}
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_ЗАКАЗЫ_ДОСТАВЛЕНО}
	|{ОТБОР_ПО_ПЕРИОДУ}
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""	Посещено вовремя: "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|	{ОТБОР_ПОДЗАПРОСА_РЕЙСА}
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_ВОВРЕМЯ}
	|{ОТБОР_ПО_ПЕРИОДУ}
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""	Посещено с опозданием: "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|	{ОТБОР_ПОДЗАПРОСА_РЕЙСА}
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_С_ОПОЗДАНИЕМ}
	|{ОТБОР_ПО_ПЕРИОДУ}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Не посещено: "" КАК Статистика,
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|	{ОТБОР_ПОДЗАПРОСА_РЕЙСА}
	|ГДЕ
	|		{ОТБОР_ПОКАЗАТЕЛЕЙ_НЕ_ПОСЕЩЕНО}
	|{ОТБОР_ПО_ПЕРИОДУ}
	|
	|
	|) КАК Доставки
	|";

	КонструкторДанных.ДобавитьПоле("Статистика", "Статистика");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Доставки.Статистика");
	КонструкторДанных.ДобавитьОтборПоля(, "Доставки.Статистика");
	КонструкторДанных.ДобавитьСортировкуПоля("Доставки.Статистика");

	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОДЗАПРОСА","
	|	ЛЕВОЕ СОЕДИНЕНИЕ ( ВЫБРАТЬ
	|		новаЗаданияРейсов.Задание КАК Доставка,
	|		ЕСТЬNULL(новаЗаданияРейсов.РезультатДоставки.РезультатВыполнения, ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.Выполнена)) КАК Результат
	|	ИЗ
	|		Документ.новаОтчетВодителя.Задания КАК новаЗаданияРейсов
	|	ГДЕ
	|		новаЗаданияРейсов.Ссылка.Проведен = ИСТИНА)  КАК ЗаданияРейсов
	|	ПО Доставки.Ссылка = ЗаданияРейсов.Доставка
	|
	|");
	
	
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОДЗАПРОСА_РЕЙСА","
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		новаЗаданияРейсов.Задание КАК Доставка,
	|       NULL      КАК РезультатВыполнения,
	|		ВЫБОР
	|			КОГДА новаЗаданияРейсов.РезультатДоставки = ЗНАЧЕНИЕ(Справочник.новаРезультатМестнойДоставки.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ новаЗаданияРейсов.РезультатДоставки.ТочкаПосещена
	|		КОНЕЦ КАК ТочкаПосещена,
	|		ВЫБОР
	|			КОГДА новаТочкиМаршрутаРейсов.ДатаПрибытия ЕСТЬ NULL 
	|				ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(новаТочкиМаршрутаРейсов.ДатаПрибытия, ДЕНЬ), новаТочкиМаршрутаРейсов.ДатаПрибытия, СЕКУНДА) = 0
	|				ТОГДА новаЗаданияРейсов.Задание.ВремяОтправленияС
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(новаТочкиМаршрутаРейсов.ПлановаяДатаПосещения, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(новаТочкиМаршрутаРейсов.ДатаПрибытия, ДЕНЬ), новаТочкиМаршрутаРейсов.ДатаПрибытия, СЕКУНДА))
	|		КОНЕЦ КАК ВремяПосещения,
	|		ВЫБОР
	|			КОГДА новаЗаданияРейсов.Задание.ВремяПрибытияПо = НАЧАЛОПЕРИОДА(новаЗаданияРейсов.Задание.ВремяПрибытияПо, ДЕНЬ)
	|				ТОГДА КОНЕЦПЕРИОДА(новаЗаданияРейсов.Задание.ВремяПрибытияПо, ДЕНЬ)
	|			ИНАЧЕ новаЗаданияРейсов.Задание.ВремяПрибытияПо
	|		КОНЕЦ КАК ВремяПрибытияПо,
	|		новаЗаданияРейсов.Задание.ВремяПрибытияС КАК ВремяПрибытияС
	|
	|	ИЗ
	|	Документ.новаОтчетВодителя.Задания КАК новаЗаданияРейсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.новаТочкиМаршрутаРейсов КАК новаТочкиМаршрутаРейсов
	|		ПО (новаЗаданияРейсов.Ссылка.Рейс = новаТочкиМаршрутаРейсов.Рейс
	|				И новаЗаданияРейсов.Задание.ТочкаПрибытия = новаТочкиМаршрутаРейсов.ТочкаМаршрута)
	|	ГДЕ
	|	новаЗаданияРейсов.Ссылка.Проведен = ИСТИНА
	|	И новаТочкиМаршрутаРейсов.МаршрутСопровождения = ИСТИНА )  КАК ЗаданияРейсов
	|	ПО Доставки.Ссылка = ЗаданияРейсов.Доставка
	|
	|");
	

	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_ЗАКАЗЫ", "Доставки.Завершен = ИСТИНА");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_ДОСТАВЛЕНО", 
		"Доставки.Завершен = ИСТИНА И  Доставки.ДоставкаОтменена = ЛОЖЬ
			|И ВЫБОР КОГДА ЗаданияРейсов.Результат ЕСТЬ NULL ТОГДА ИСТИНА 
			|		 ИНАЧЕ ЗаданияРейсов.Результат = ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.Выполнена)
			|  КОНЕЦ " );
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_ДОСТАВЛЕНО_ЧАСТИЧНО", "Доставки.Завершен = ИСТИНА И ЗаданияРейсов.Результат = ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.ВыполненаЧастично)");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_НЕДОСТАВЛЕНО", "Доставки.Завершен = ИСТИНА И ЗаданияРейсов.Результат = ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.НеВыполнена)");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_ОТМЕНЕНО", "Доставки.Завершен = ИСТИНА И Доставки.ДоставкаОтменена = ИСТИНА ");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_ЗАКАЗЫ_ДОСТАВЛЕНО", 
		"Доставки.Завершен = ИСТИНА И Доставки.ДоставкаОтменена = ЛОЖЬ И ЗаданияРейсов.ТочкаПосещена = ИСТИНА ");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_ВОВРЕМЯ", "Доставки.Завершен = ИСТИНА  И Доставки.ДоставкаОтменена = ЛОЖЬ 
		|И ЗаданияРейсов.ТочкаПосещена = ИСТИНА И ЗаданияРейсов.ВремяПосещения <= ЗаданияРейсов.ВремяПрибытияПо ");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_С_ОПОЗДАНИЕМ", "Доставки.Завершен = ИСТИНА  И Доставки.ДоставкаОтменена = ЛОЖЬ 
	    |И ЗаданияРейсов.ТочкаПосещена = ИСТИНА И ЗаданияРейсов.ВремяПосещения > ЗаданияРейсов.ВремяПрибытияПо ");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ_НЕ_ПОСЕЩЕНО", "Доставки.Завершен = ИСТИНА  И Доставки.ДоставкаОтменена = ЛОЖЬ 
	    |И ЗаданияРейсов.ТочкаПосещена = ЛОЖЬ ");
	
    СформироватьОтбор();
		
	КонструкторДанных.ДобавитьПоле("КоличествоЗаказов", "КоличествоЗаказов","ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Доставки.КоличествоЗаказов");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доставки.Ссылка)");
	КонструкторДанных.ДобавитьИтог("КоличествоЗаказов");	
	
	КонструкторДанных.ДобавитьПоле("КоличествоТочекДоставки", "КоличествоТочекДоставки");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Доставки.КоличествоТочекДоставки");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доставки.ТочкаПрибытия)");
	КонструкторДанных.ДобавитьИтог("КоличествоТочекДоставки");	
	
	КонструкторДанных.ДобавитьПоле("КоличествоКлиентов", "КоличествоКлиентов");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Доставки.КоличествоКлиентов");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доставки.Грузополучатель)");
	КонструкторДанных.ДобавитьИтог("КоличествоКлиентов");	

	КонструкторДанных.ДобавитьПоле("ВесЗаказов", "ВесЗаказов");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Доставки.ВесЗаказов");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "СУММА( Доставки.Груз.Вес)");
	КонструкторДанных.ДобавитьИтог("ВесЗаказов");	
	
	КонструкторДанных.ДобавитьПоле("ОбъемЗаказов", "ОбъемЗаказов");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Доставки.ОбъемЗаказов");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "СУММА( Доставки.Груз.Объем)");
	КонструкторДанных.ДобавитьИтог("ОбъемЗаказов");	

	КонструкторДанных.ДобавитьПоле("СуммаЗаказов", "СуммаЗаказов");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Доставки.СуммаЗаказов");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "СУММА(Доставки.Груз.Стоимость)");
	КонструкторДанных.ДобавитьИтог("СуммаЗаказов");	
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Статистика");

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Предопределенная процедура. Устанавливает в отчет новый период формирования.
//
// Параметры:
//  НовоеНачалоПериода <Дата>
//  НовыйКонецПериода  <Дата>
//
Процедура УстановитьПериод(НовоеНачалоПериода, НовыйКонецПериода) Экспорт
	НачалоПериода = НачалоДня(НовоеНачалоПериода);
	КонецПериода = КонецДня(НовыйКонецПериода);
КонецПроцедуры

// Предопределенная функция. Создает копию текущего отчета вместе с параметрами формирования.
//
// Возвращаемое значение:
//  <ОтчетОбъект>
//
Функция Скопировать() Экспорт
	КопияОтчета = Отчеты[Метаданные().Имя].Создать();
	
	Строка = ЗначениеВСтрокуВнутр(ЭтотОбъект.ПараметрыФормирования);
	КопияОтчета.ПараметрыФормирования = ЗначениеИзСтрокиВнутр(Строка); 
	КопияОтчета.УстановитьПериод(НачалоПериода, КонецПериода);
	Возврат КопияОтчета;		
КонецФункции

УстановитьПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
Настроить();

#КонецЕсли
