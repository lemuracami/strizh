#Если Клиент Тогда

// Предопределенное свойство. Содержит коллекцию параметров формирования отчета.
Перем ПараметрыФормирования Экспорт;

// Предопределенное свойство. Содержит коллекцию свойств печатной формы.
Перем СвойстваПечатнойФормы Экспорт; // <Структура>

Перем КонструкторДанных;
Перем ДатаТабеля;
Перем тзДни;
Перем мсВыходные;

// Предопределенная функция. Возвращает свойства отчета.
//
// Возвращаемое значение:
//  <Структура[СвойстваОтчета]>
//
Функция ПолучитьСвойства() Экспорт
	Возврат Новый Структура("ИнтерфейсВыбораДаты, НаДату", "Дата", ДатаТабеля);
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных отборов отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьОтборы() Экспорт
	тзОтборы = КонструкторДанных.ПолучитьТаблицуОтборов();
	
	Возврат тзОтборы;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных группировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаГруппировок]>
//
Функция ПолучитьГруппировки() Экспорт
	тзГруппировки = КонструкторДанных.ПолучитьТаблицуГруппировок("Сотрудник");
	
	Возврат тзГруппировки;
КонецФункции

// Предопределенная функция. Возвращает имена группировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеГруппировкиПоУмолчанию() Экспорт
	мсГруппировки = Новый Массив;
	
	мсГруппировки.Добавить("КатегорияСотрудника");
	мсГруппировки.Добавить("Группа");
	
	Возврат мсГруппировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных сортировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировки() Экспорт
	тзСортировки = КонструкторДанных.ПолучитьТаблицуСортировок();
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу сортировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировкиПоУмолчанию() Экспорт
	тзСортировки = новаОтчеты.ПолучитьТаблицуСортировок();
	
	стрСортировка = тзСортировки.Добавить();
	стрСортировка.Сортировка = "Сотрудник";
	стрСортировка.Направление = "ВОЗР";
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных показателей отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПоказателей]>
//
Функция ПолучитьПоказатели() Экспорт
	тзПоказатели = КонструкторДанных.ПолучитьТаблицуПоказателей();
	
	Для Каждого стрДень Из тзДни Цикл
		стрПоказатель = тзПоказатели.Найти(стрДень.ИмяКолонки, "Показатель");
		тзПоказатели.Удалить(стрПоказатель);
	КонецЦикла;
	
	Возврат тзПоказатели;
КонецФункции

// Предопределенная функция. Возвращает имена показателей, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеПоказателиПоУмолчанию() Экспорт
	мсПоказатели = Новый Массив;
	
	тзПоказатели = ПолучитьПоказатели();
	Для Каждого стрПоказатель Из тзПоказатели Цикл
		мсПоказатели.Добавить(стрПоказатель.Показатель);
	КонецЦикла;
	
	Возврат мсПоказатели;
КонецФункции

// Предопределенная процедура. Формирует отчет в указанном табличном документе с текущими параметрами формирования.
//
// Параметры:
//  ТД <ТабличныйДокумент>
//
Процедура Сформировать(ТД) Экспорт
	УстановитьДатуТабеля(ПараметрыФормирования.Дата);
	Настроить();	
	
	КонструкторДанных.ПрименитьПараметрыФормированияОтчета(ПараметрыФормирования);
	
	Для Каждого стрДень Из тзДни Цикл
		КонструкторДанных.ВыбранныеПоказатели.Добавить(стрДень.ИмяКолонки);
	КонецЦикла;
	
	ПараметрыФормирования.Вставить("ГоризонтальнаяГруппировка", Новый Структура("Область, Колонки", "День", тзДни));
	
	дзРезультат = КонструкторДанных.ПолучитьДанные();
	
	ГруппировкаГруппы = КонструкторДанных.Группировки.Найти("Группа");
	Если ГруппировкаГруппы <> Неопределено Тогда
		УдалитьПустыеГруппы(дзРезультат.Строки, ГруппировкаГруппы);
	КонецЕсли;
	
	тзИтоги = КонструкторДанных.ПолучитьТаблицуИтогов();
	
	ПараметрыФормирования.Вставить("ВыбранныйПериод", "за " + Формат(ПараметрыФормирования.Дата, "ДФ='ММММ гггг'"));
	
	новаОтчеты.СформироватьТабличныйДокумент(ЭтотОбъект, ТД, дзРезультат, тзИтоги, "Строка.ЗначениеГруппировки = Строка(Строка.Сотрудник);
		|Строка.РасшифровкаГруппировки = Строка.Сотрудник;");
		
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТД.АвтоМасштаб = Истина;
КонецПроцедуры

Процедура СкопироватьСтрокиДерева(СтрокиПриемник, СтрокиИсточник, Позиция = Неопределено)
	Если Позиция = Неопределено Тогда
		Для Каждого ИсхСтрока Из СтрокиИсточник Цикл
			НовСтрока = СтрокиПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ИсхСтрока);
			СкопироватьСтрокиДерева(НовСтрока.Строки, ИсхСтрока.Строки);
		КонецЦикла;	
	Иначе
		Для Каждого ИсхСтрока Из СтрокиИсточник Цикл
			НовСтрока = СтрокиПриемник.Вставить(Позиция);
			ЗаполнитьЗначенияСвойств(НовСтрока, ИсхСтрока);
			СкопироватьСтрокиДерева(НовСтрока.Строки, ИсхСтрока.Строки);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьПустыеГруппы(Строки, ГруппировкаГруппы)
	ъ = 0;
	КоличествоСтрок = Строки.Количество();
	Пока ъ < КоличествоСтрок Цикл
		Строка = Строки[ъ];
		ъ = ъ + 1;
		
		Если Строка.Группировка = NULL Тогда Продолжить; КонецЕсли;
		Если Строка.Группировка = ГруппировкаГруппы Тогда
			Если Не ЗначениеЗаполнено(Строка.Группа) Тогда
				СтрокиРодителя = Строка.Родитель.Строки;
				СкопироватьСтрокиДерева(СтрокиРодителя, Строка.Строки, ъ);
				СтрокиРодителя.Удалить(Строка);
				ъ = ъ - 1;
				Строка = Строки[ъ];
			КонецЕсли;
		КонецЕсли;
		
		УдалитьПустыеГруппы(Строка.Строки, ГруппировкаГруппы);
	КонецЦикла;
КонецПроцедуры

// Предопределенная процедура. Обрабатывает событие "Обработка расшифровки" отчета.
//
// Параметры:
//  Форма                <Форма>
//  Элемент              <ЭлементУправления>
//  Расшифровка          <Произвольный>
//  СтандартнаяОбработка <Булево>
//
Процедура ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если новаОтчеты.Расшифровать(Форма, Элемент, Расшифровка) Тогда Возврат; КонецЕсли;
	ОткрытьЗначение(Расшифровка);
КонецПроцедуры

Процедура Настроить()
	КонструкторДанных = Обработки.новаКонструкторЗапроса.Создать();
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ
	|	""Водители"" КАК КатегорияСотрудника,
	|	Водители.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.новаВодители КАК Водители
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Экспедиторы"" КАК КатегорияСотрудника,
	|	Экспедиторы.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.новаЭкспедиторы КАК Экспедиторы
	|) КАК Сотрудники
	|{СОЕДИНЕНИЯ}";
	
	КонструкторДанных.ПостоянныйОтбор = "Сотрудники.Сотрудник В
	|(ВЫБРАТЬ
	|	Сотрудник
	|ИЗ
	|	РегистрСведений.новаСхемыНачисленияЗарплатыСотрудников.СрезПоследних(&ДатаТабеля)
	|ГДЕ
	|	СхемаНачисленияЗарплаты <> ЗНАЧЕНИЕ(Справочник.новаСхемыНачисленияЗарплаты.ПустаяСсылка))";
	
	КонструкторДанных.ПостояннаяВыборка = ",
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Представление(Сотрудники.Сотрудник) КАК Сотрудник_Пред,
	|	Сотрудники.Сотрудник.Родитель КАК Группа,
	|	Представление(Сотрудники.Сотрудник.Родитель) КАК Группа_Пред";
	
	КонструкторДанных.ДобавитьПараметр("ДатаТабеля", ДатаТабеля);
	КонструкторДанных.ДобавитьПараметр("МесяцТабеля", НачалоМесяца(ДатаТабеля));
	
	Работа = Метаданные.Документы.новаТабель.ТабличныеЧасти.Работы.Реквизиты.Работа.Тип.ПривестиЗначение(Неопределено);
	КонструкторДанных.ДобавитьПараметр("Работа", Работа);
	
	КонструкторДанных.ДобавитьПоле("КатегорияСотрудника");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Сотрудники.КатегорияСотрудника");
	КонструкторДанных.ДобавитьОтборПоля(, "Сотрудники.КатегорияСотрудника");
	
	КонструкторДанных.ДобавитьПоле("Сотрудник");
	КонструкторДанных.ДобавитьОтборПоля(, "Сотрудники.Сотрудник");
	КонструкторДанных.ДобавитьСортировкуПоля("Сотрудники.Сотрудник.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Группа");
	КонструкторДанных.ДобавитьОтборПоля(, "Сотрудники.Сотрудник.Родитель");
	КонструкторДанных.ДобавитьСортировкуПоля("Сотрудники.Сотрудник.Родитель.Наименование");
	
	Для Каждого стрДень Из тзДни Цикл
		КонструкторДанных.ДобавитьПоле(стрДень.ИмяКолонки, стрДень.Представление);
		КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
		КонструкторДанных.ДобавитьПатчПоля("СОЕДИНЕНИЯ", "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.новаТабель.Работы КАК " + стрДень.ИмяКолонки + "
		|ПО
		|	НАЧАЛОПЕРИОДА(" + стрДень.ИмяКолонки + ".Ссылка.Дата, МЕСЯЦ) = &МесяцТабеля
		| И " + стрДень.ИмяКолонки + ".Сотрудник = Сотрудники.Сотрудник
		| И " + стрДень.ИмяКолонки + ".День = &" + стрДень.ИмяКолонки + "
		|");
		КонструкторДанных.ДобавитьПараметр(стрДень.ИмяКолонки, стрДень.День);
		
		КонструкторДанных.ДобавитьВыборкуПоля(, стрДень.ИмяКолонки + ".Работа");
	КонецЦикла;
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("КатегорияСотрудника");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Группа",,, Истина);
	
	КонструкторДанных.Ключи.Вставить(NULL, Новый Структура("Сотрудник"));

	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Устанавливает дату, на которую формируется табель.
//
// Параметры:
//  НоваяДатаТабеля <Дата>
//
Процедура УстановитьДатуТабеля(НоваяДатаТабеля) Экспорт
	ДатаТабеля = КонецМесяца(НоваяДатаТабеля);
	
	тзДни = Новый ТаблицаЗначений;
	тзДни.Колонки.Добавить("ИмяКолонки");
	тзДни.Колонки.Добавить("Поле");
	тзДни.Колонки.Добавить("Представление");
	тзДни.Колонки.Добавить("День");
	
	мсВыходные = Новый Массив;
	
	текДата = НачалоМесяца(ДатаТабеля);
	НачалоСледующегоМесяца = ДобавитьМесяц(текДата, 1);
	Пока текДата < НачалоСледующегоМесяца Цикл
		стрДень = тзДни.Добавить();
		стрДень.День = День(текДата);
		стрДень.Представление = Строка(стрДень.День);
		стрДень.ИмяКолонки = "ДЕНЬ" + СтрЗаменить(Строка(стрДень.День), Символы.НПП, "");
		стрДень.Поле = стрДень.ИмяКолонки;
		
		дн = ДеньНедели(текДата);
		Если дн = 6 Или дн = 7 Тогда
			мсВыходные.Добавить(стрДень.ИмяКолонки);
		КонецЕсли;
		
		текДата = текДата + 24 * 60 * 60;
	КонецЦикла;
КонецПроцедуры

// Предопределенная функция. Формирует печатную форму в указанном документе.
//
// Параметры:
//  Форма             <Форма>
//  ТабличныйДокумент <ТабличныйДокумент>
//  Заголовок         <Строка>
//
// Возвращаемое значение:
//  <Булево>: Истина, если печатную форму удалось сформировать.
//
Функция ВывестиНаПечать(Форма, ТабличныйДокумент, Заголовок) Экспорт
	Если ТипЗнч(Форма) = Тип("Форма") Тогда
		Если Форма.Модифицированность Тогда
			Если Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение) Тогда Возврат Ложь; КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДатуТабеля(Форма.Дата);
	Настроить();	
	
	новаОтчеты.ЗаполнитьПараметрыФормированияПоУмолчанию(ЭтотОбъект);
	ПараметрыФормирования.Вставить("Дата", Форма.Дата);
	
	Сформировать(ТабличныйДокумент);
	
	ТабличныйДокумент.ОтображатьЗаголовки = ложь; 
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечатиТабеля";
	Возврат Истина;
КонецФункции

СвойстваПечатнойФормы = Новый Структура("Представление", "Табель");

УстановитьДатуТабеля(ТекущаяДата());
Настроить();

#КонецЕсли