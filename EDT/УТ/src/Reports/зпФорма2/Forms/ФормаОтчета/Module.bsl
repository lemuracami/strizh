
&НаСервереБезКонтекста
Функция ЧасыССотымиВЧасыСМинутами(Знач ЧасыССотыми)
	
	Если ЧасыССотыми Тогда
		Часы = Цел(ЧасыССотыми);
		Возврат Строка(Часы) + ":" + Формат((ЧасыССотыми - Часы) * 60, "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СформироватьНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", Отчет.Рейс);
	Запрос.УстановитьПараметр("ФизЛицо", Отчет.ФизЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ТарифРасчетаЗП КАК ТарифРасчетаЗП,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ОсновноеНачисление КАК ОсновноеНачисление,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.Начисление КАК Начисление,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.Роль КАК Роль,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.СоставЭкипажа КАК СоставЭкипажа,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ЧасовОтработаноФактически КАК ЧасовОтработаноФактически,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ЧасовОтработано КАК ЧасовОтработано,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.СуммаОплаты КАК СуммаОплаты,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ЧасовПереработки КАК ЧасовПереработки,
	|	зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних.ВремяПечатиМЛ КАК ВремяПечатиМЛ
	|ПОМЕСТИТЬ ВТ_ИсходныеДанныеРасчетаЗПЧасы
	|ИЗ
	|	РегистрСведений.зпИсходныеДанныеРасчетаЗПЧасы.СрезПоследних(
	|			,
	|			Рейс = &Рейс
	|				И ФизЛицо = &ФизЛицо) КАК зпИсходныеДанныеРасчетаЗПЧасыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.СхемаРасчетаЗП КАК СхемаРасчетаЗП,
	|	зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.Начисление КАК Начисление,
	|	зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.Сумма КАК Сумма,
	|	зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.ВидПолигонаПарковки КАК ВидПолигонаПарковки,
	|	зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.БрейкПробегаПоРейсу КАК БрейкПробегаПоРейсу,
	|	зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних.ТарифицируемыйКилометражПоРейсу КАК ТарифицируемыйКилометражПоРейсу
	|ПОМЕСТИТЬ ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления
	|ИЗ
	|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.СрезПоследних(
	|			,
	|			Рейс = &Рейс
	|				И ФизЛицо = &ФизЛицо) КАК зпИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисленияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Рейс.ДатаРейса КАК ДатаРейса,
	|	ФизическиеЛица.Наименование КАК ФИО,
	|	Т_Рейс.Номер КАК НомерРейса,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.Роль.Наименование КАК Должность,
	|	ВЫБОР
	|		КОГДА зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ЭтоВыходнойДень
	|				ИЛИ зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ЭтоПраздничныйДень
	|			ТОГДА ""Вых""
	|		ИНАЧЕ ""Буд""
	|	КОНЕЦ КАК ТипДня,
	|	ВЗ_ИтогоПоЗаказам.Сумма КАК ИтогоПоЗаказам,
	|	ВЫБОР
	|		КОГДА зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.ПрименяетсяМинимальнаяСтавка
	|			ТОГДА зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.СуммаМинимальнойСтавки
	|		ИНАЧЕ зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.СуммаИтого
	|	КОНЕЦ КАК СУчетомМинималки,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ВыполненоЗаказовПроцент КАК ПроцентВыполнения,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ПланируемыйПробег КАК ПланируемыйПробег,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ПробегЗаМКАД КАК ПробегЗаМКАД,
	|	ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗПЧасы_Основные.ЧасовОтработаноФактически, 0) КАК ЧасовОтработаноФактически,
	|	ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗПЧасы_Основные.ЧасовОтработано, 0) КАК ЧасовОтработано,
	|	ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗПЧасы_Основные.СуммаОплаты, 0) + ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗПЧасы_Переработки.СуммаОплаты, 0) КАК ЗаРабочееВремя,
	|	ВЗ_КонтрольВремени.РаспечаткаМЛ КАК ПечатьМЛ,
	|	ВЗ_КонтрольВремени.ЗакрытиеРейса КАК ЗакрытиеРейса,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ОбщееВремяМаршрута КАК ОбщееВремяМаршрута,
	|	ВЗ_РаботникиОрганизаций.ОсновноеНачислениеНаименование КАК ОсновноеНачисление,
	|	ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗПЧасы_Переработки.ЧасовПереработки, 0) КАК ЧасовПереработки,
	|	ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Пробег.Сумма, 0) + ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_ПробегЗаМКАД.Сумма, 0) КАК ЗаПробег,
	|	ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.Сумма КАК Парковка,
	|	ВЫБОР
	|		КОГДА ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.СхемаРасчетаЗП.ВидПолигоновПарковкиСтандарт = ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.ВидПолигонаПарковки
	|			ТОГДА ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.Сумма
	|	КОНЕЦ КАК ПарковкаЗона1,
	|	ВЫБОР
	|		КОГДА ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.СхемаРасчетаЗП.ВидПолигоновПарковкиПовышеннаяОплата = ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.ВидПолигонаПарковки
	|			ТОГДА ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.Сумма
	|	КОНЕЦ КАК ПарковкаЗона2,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.ПрименяетсяМинимальнаяСтавка
	|				ТОГДА зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.СуммаМинимальнойСтавки
	|			ИНАЧЕ зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.СуммаИтого
	|		КОНЕЦ, 0) + ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗПЧасы_Основные.СуммаОплаты, 0) + ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗПЧасы_Переработки.СуммаОплаты, 0) + ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Пробег.Сумма, 0) + ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_ПробегЗаМКАД.Сумма, 0) + ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.Сумма, 0) + ЕСТЬNULL(ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Экспедирование.Сумма, 0) КАК Итого,
	|	ВЗ_ВремяНачалаРейсаРасчетное.ВремяНачалаРейсаРасчетное КАК ВремяНачалаРейсаРасчетное,
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель.ФизЛицо = &ФизЛицо КАК ЭтоВодитель,
	|	ВЫБОР
	|		КОГДА ПривязкаМашинКРейсамСрезПоследних.Экспедитор = ЗНАЧЕНИЕ(Справочник.новаЭкспедиторы.ПустаяСсылка)
	|			ТОГДА ""Без экспедитора""
	|		ИНАЧЕ ""С экспедитором""
	|	КОНЕЦ КАК СЭкспедитором,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.Наименование КАК ФИОЭкспедитора,
	|	ВЫБОР
	|		КОГДА ВЗ_РаботникиОрганизаций.ОсновноеНачислениеСпособРасчета ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЗ_РаботникиОрганизаций.ОсновноеНачислениеСпособРасчета В (ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧас), ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаСмену))
	|	КОНЕЦ КАК КорректировкаУчетногоВремени,
	|	зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних.ПробегУчетный КАК ПробегУчетный,
	|	ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Экспедирование.Сумма КАК Экспедирование,
	|	ВЫБОР
	|		КОГДА ВЗ_ГраницаПробега.ЗначениеОт = 100
	|			ТОГДА ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Пробег.ТарифицируемыйКилометражПоРейсу
	|	КОНЕЦ КАК КмСвыше100,
	|	ВЫБОР
	|		КОГДА ВЗ_ГраницаПробега.ЗначениеОт = 110
	|			ТОГДА ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Пробег.ТарифицируемыйКилометражПоРейсу
	|	КОНЕЦ КАК КмСвыше110,
	|	зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних.ОтменаНачисленияМинимальнойСтавки КАК ОтменаНачисленияМинимальнойСтавки
	|ИЗ
	|	Документ.Рейс КАК Т_Рейс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпИсходныеДанныеРасчетаЗППоРейсам.СрезПоследних(
	|				,
	|				Рейс = &Рейс
	|					И ФизЛицо = &ФизЛицо) КАК зпИсходныеДанныеРасчетаЗППоРейсамСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|		ИЗ
	|			(ВЫБРАТЬ
	|				зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних.СуммаРасчетаЗП КАК Сумма
	|			ИЗ
	|				РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам.СрезПоследних(
	|						,
	|						Рейс = &Рейс
	|							И ФизЛицо = &ФизЛицо) КАК зпИсходныеДанныеРасчетаЗППоЗаказамСрезПоследних
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних.Сумма
	|			ИЗ
	|				РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисления.СрезПоследних(
	|						,
	|						Рейс = &Рейс
	|							И ФизЛицо = &ФизЛицо) КАК зпИсходныеДанныеРасчетаЗППоЗаказамДополнительныеНачисленияСрезПоследних) КАК ВложенныйЗапрос) КАК ВЗ_ИтогоПоЗаказам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зпИсходныеДанныеРасчетаМинимальнойЗП.СрезПоследних(
	|				,
	|				Рейс = &Рейс
	|					И ФизЛицо = &ФизЛицо) КАК зпИсходныеДанныеРасчетаМинимальнойЗПСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Ссылка = &ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			РаботникиОрганизации.ОсновноеНачисление.Наименование КАК ОсновноеНачислениеНаименование,
	|			РаботникиОрганизации.ОсновноеНачисление.СпособРасчета КАК ОсновноеНачислениеСпособРасчета
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизации КАК РаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс КАК Рейс
	|				ПО (Рейс.Ссылка = &Рейс)
	|					И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Рейс.ДатаРейса, ДЕНЬ))
	|					И (РаботникиОрганизации.ФизЛицо = &ФизЛицо)
	|					И (РаботникиОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРаботникаОрганизации.ПринятНаРаботуВОрганизацию))
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			РаботникиОрганизации.Период УБЫВ) КАК ВЗ_РаботникиОрганизаций
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанныеРасчетаЗПЧасы КАК ВТ_ИсходныеДанныеРасчетаЗПЧасы_Основные
	|		ПО (ВТ_ИсходныеДанныеРасчетаЗПЧасы_Основные.ОсновноеНачисление = ВТ_ИсходныеДанныеРасчетаЗПЧасы_Основные.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанныеРасчетаЗПЧасы КАК ВТ_ИсходныеДанныеРасчетаЗПЧасы_Переработки
	|		ПО (ВТ_ИсходныеДанныеРасчетаЗПЧасы_Переработки.Начисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.зпСпособыРасчетаНачислений.СтавкаЗаЧасПереработки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления КАК ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Пробег
	|		ПО (ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Пробег.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаПробег))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления КАК ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_ПробегЗаМКАД
	|		ПО (ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_ПробегЗаМКАД.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаПробегЗаМКАД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления КАК ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка
	|		ПО (ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Парковка.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаПарковку))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления КАК ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Экспедирование
	|		ПО (ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления_Экспедирование.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаЭкспедирование))
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			зпСтавкиОплатыПоНачислениям.ВремяНачалаРейсаРасчетное КАК ВремяНачалаРейсаРасчетное
	|		ИЗ
	|			ВТ_ИсходныеДанныеРасчетаЗПЧасы КАК ВТ_ИсходныеДанныеРасчетаЗПЧасы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.зпСтавкиОплатыПоНачислениям КАК зпСтавкиОплатыПоНачислениям
	|				ПО (ВТ_ИсходныеДанныеРасчетаЗПЧасы.ОсновноеНачисление = ВТ_ИсходныеДанныеРасчетаЗПЧасы.Начисление)
	|					И (ВТ_ИсходныеДанныеРасчетаЗПЧасы.ВремяПечатиМЛ <> ДАТАВРЕМЯ(1, 1, 1))
	|					И ВТ_ИсходныеДанныеРасчетаЗПЧасы.СхемаРасчетаЗП = зпСтавкиОплатыПоНачислениям.СхемаРасчетаЗП
	|					И ВТ_ИсходныеДанныеРасчетаЗПЧасы.ТарифРасчетаЗП = зпСтавкиОплатыПоНачислениям.ТарифРасчетаЗП
	|					И ВТ_ИсходныеДанныеРасчетаЗПЧасы.ОсновноеНачисление = зпСтавкиОплатыПоНачислениям.ОсновноеНачисление
	|					И ВТ_ИсходныеДанныеРасчетаЗПЧасы.Начисление = зпСтавкиОплатыПоНачислениям.Начисление
	|					И ВТ_ИсходныеДанныеРасчетаЗПЧасы.Роль = зпСтавкиОплатыПоНачислениям.Роль
	|					И ВТ_ИсходныеДанныеРасчетаЗПЧасы.СоставЭкипажа = зпСтавкиОплатыПоНачислениям.СоставЭкипажа
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ВремяНачалаРейсаРасчетное УБЫВ) КАК ВЗ_ВремяНачалаРейсаРасчетное
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ВЫБОР
	|					КОГДА КонтрольВремени.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста)
	|						ТОГДА КонтрольВремени.Период
	|				КОНЕЦ) КАК РаспечаткаМЛ,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КонтрольВремени.Событие = ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.ЗакрытиеРейсаЛогист)
	|						ТОГДА КонтрольВремени.Период
	|				КОНЕЦ) КАК ЗакрытиеРейса
	|		ИЗ
	|			РегистрСведений.КонтрольВремени КАК КонтрольВремени
	|		ГДЕ
	|			КонтрольВремени.Событие В (ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.РаспечаткаМаршрутногоЛиста), ЗНАЧЕНИЕ(Справочник.СобытияКонтроляВремени.ЗакрытиеРейсаЛогист))
	|			И КонтрольВремени.Рейс = &Рейс) КАК ВЗ_КонтрольВремени
	|		ПО (ИСТИНА),
	|	(ВЫБРАТЬ
	|		МИНИМУМ(зпБрейкиГраницыБрейка.ЗначениеОт) КАК ЗначениеОт
	|	ИЗ
	|		ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления КАК ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.зпБрейки.ГраницыБрейка КАК зпБрейкиГраницыБрейка
	|			ПО (ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.Начисление = ЗНАЧЕНИЕ(Справочник.зпНачисления.ДоплатаЗаПробег))
	|				И ВТ_ИсходныеДанныеРасчетаЗППоРейсамДополнительныеНачисления.БрейкПробегаПоРейсу = зпБрейкиГраницыБрейка.Ссылка) КАК ВЗ_ГраницаПробега
	|ГДЕ
	|	Т_Рейс.Ссылка = &Рейс";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	//ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	//Макет = ОтчетОбъект.ПолучитьМакет("Макет");
	Макет = Отчеты.зпФорма2.ПолучитьМакет("Макет");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	ПараметрыОбласти = Область.Параметры;
	ПараметрыОбласти.Заполнить(Выборка);
	Результат.Вывести(Область);
	
	Если Выборка.ЭтоВодитель Тогда
		Область = Макет.ПолучитьОбласть("Экспедитор");
		ПараметрыОбласти = Область.Параметры;
		ПараметрыОбласти.Заполнить(Выборка);
		Результат.Вывести(Область);
	Иначе
		Результат.Вывести(Макет.ПолучитьОбласть("Отступ"));
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Таблица");
	ПараметрыОбласти = Область.Параметры;
	ПараметрыОбласти.Заполнить(Выборка);
	ПараметрыОбласти.ЧасовОтработаноФактически = ЧасыССотымиВЧасыСМинутами(Выборка.ЧасовОтработаноФактически);
	ПараметрыОбласти.ЧасовОтработано = ЧасыССотымиВЧасыСМинутами(Выборка.ЧасовОтработано);
	ПараметрыОбласти.ЧасовПереработки = ЧасыССотымиВЧасыСМинутами(Выборка.ЧасовПереработки);
	ПараметрыОбласти.Форма3 = Новый Структура("Источник,Регион,Рейс,ФизЛицо", "зпФорма3", Отчет.Регион, Отчет.Рейс, Отчет.ФизЛицо);
	Если Выборка.КорректировкаУчетногоВремени Тогда
		ПараметрыОбласти.КорректировкаВремяУчетное = Новый Структура("Источник,СпособВнесенияДокумента,Рейс,ФизЛицо", "зпКорректировкаИсходныхДанных", Перечисления.зпСпособыВнесенияДокументаКорректировкиЗП.ОтчетФорма2_ВремяУчетное, Отчет.Рейс, Отчет.ФизЛицо);
	КонецЕсли;
	//Асеев 23.10.2023 (Задача № 5151)>>>
	ПараметрыОбласти.КорректировкаПробегУчетный = Новый Структура("Источник,СпособВнесенияДокумента,Рейс,ФизЛицо", "зпКорректировкаИсходныхДанных", Перечисления.зпСпособыВнесенияДокументаКорректировкиЗП.ОтчетФорма2_УчетныйПробег, Отчет.Рейс, Отчет.ФизЛицо);
	//Асеев 23.10.2023 (Задача № 5151)<<<
	//Асеев 25.10.2023 (Задача № 5153)>>>
	ПараметрыОбласти.КорректировкаПробегЗаМКАД = Новый Структура("Источник,СпособВнесенияДокумента,Рейс,ФизЛицо", "зпКорректировкаИсходныхДанных", Перечисления.зпСпособыВнесенияДокументаКорректировкиЗП.ОтчетФорма2_ПробегЗаМКАД, Отчет.Рейс, Отчет.ФизЛицо);
	//Асеев 25.10.2023 (Задача № 5153)<<<
	//Асеев 27.05.2024 (Задача № 5275)>>>
	Если Выборка.ОтменаНачисленияМинимальнойСтавки <> Null Тогда
		ПараметрыОбласти.КорректировкаОтменаНачисленияМинимальнойСтавки = Новый Структура("Источник,СпособВнесенияДокумента,Рейс,ФизЛицо", "зпКорректировкаИсходныхДанных", Перечисления.зпСпособыВнесенияДокументаКорректировкиЗП.ОтчетФорма2_ОтменаНачисленияМинимальнойСтавки, Отчет.Рейс, Отчет.ФизЛицо);
	КонецЕсли;
	//Асеев 27.05.2024 (Задача № 5275)<<<
	Результат.Вывести(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РейсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Отчет.Регион.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ТерминалДоставки", Отчет.Регион);
	Если Не Отчет.ФизЛицо.Пустая() Тогда
		ПараметрыОтбора.Вставить("ФизЛицо", Отчет.ФизЛицо);
	КонецЕсли;
	Если Не Отчет.Рейс.Пустая() Тогда
		ПараметрыОтбора.Вставить("Ссылка", Отчет.Рейс);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе,ПараметрыОтбора", Истина, Истина, ПараметрыОтбора);
	
	ОткрытьФорму("Документ.Рейс.Форма.зпВыборРейса", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВыборРейса(Знач Рейс, Знач ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних
	|ГДЕ
	|	&ФизЛицо В (ПривязкаМашинКРейсамСрезПоследних.Водитель.ФизЛицо, ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ФизЛицо)";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФизЛицРейса(Знач Рейс)
	
	МассивФизЛиц = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель.ФизЛицо КАК ВодительФизЛицо,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ФизЛицо КАК ЭкспедиторФизЛицо
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВодительФизЛицо <> Null Тогда
			МассивФизЛиц.Добавить(Выборка.ВодительФизЛицо);
		КонецЕсли;
		Если Выборка.ЭкспедиторФизЛицо <> Null Тогда
			МассивФизЛиц.Добавить(Выборка.ЭкспедиторФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивФизЛиц;
	
КонецФункции

&НаСервере
Процедура РейсПриИзмененииНаСервере()

	Если Не Отчет.ФизЛицо.Пустая() Тогда
		Если Не ПроверитьВыборРейса(Отчет.Рейс, Отчет.ФизЛицо) Тогда
			Отчет.Рейс = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Отчет.Рейс.Пустая() Тогда
		Элементы.ФизЛицо.РежимВыбораИзСписка = Ложь;
	Иначе
		Элементы.ФизЛицо.РежимВыбораИзСписка = Истина;
		Элементы.ФизЛицо.СписокВыбора.ЗагрузитьЗначения(ПолучитьФизЛицРейса(Отчет.Рейс));
		Если Отчет.ФизЛицо.Пустая() И Элементы.ФизЛицо.СписокВыбора.Количество() Тогда
			Отчет.ФизЛицо = Элементы.ФизЛицо.СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РейсПриИзменении(Элемент)
	РейсПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Регион", Отчет.Регион);
	Параметры.Свойство("Рейс", Отчет.Рейс);
	Параметры.Свойство("ФизЛицо", Отчет.ФизЛицо);
	
	Если Не Отчет.Рейс.Пустая() Тогда
		РейсПриИзмененииНаСервере();
	КонецЕсли;
	
	Если Отчет.Регион.Пустая() Тогда
		Отчет.Регион = ПараметрыСеанса.ТерминалДоставки;
	КонецЕсли;
	
	СформироватьПриОткрытии = Неопределено;
	Если Параметры.Свойство("СформироватьПриОткрытии", СформироватьПриОткрытии) И СформироватьПриОткрытии = Истина Тогда
		СформироватьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеКорректировкиИсходныхДанных(СтруктураДанных)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", СтруктураДанных.Рейс);
	Запрос.УстановитьПараметр("ФизЛицо", СтруктураДанных.ФизЛицо);
	Запрос.УстановитьПараметр("СпособВнесенияДокумента", СтруктураДанных.СпособВнесенияДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	зпКорректировкаИсходныхДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.зпКорректировкаИсходныхДанных КАК зпКорректировкаИсходныхДанных
	|ГДЕ
	|	зпКорректировкаИсходныхДанных.Рейс = &Рейс
	|	И зпКорректировкаИсходныхДанных.ФизЛицо = &ФизЛицо
	|	И НЕ зпКорректировкаИсходныхДанных.ПометкаУдаления
	|	И зпКорректировкаИсходныхДанных.СпособВнесенияДокумента = &СпособВнесенияДокумента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Вставить("ДокументКорректировки", Выборка.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ИсточникРасшифровки = Расшифровка.Источник;
		Если ИсточникРасшифровки = "зпФорма3" Тогда
			ПараметрыФормы = Новый Структура("СформироватьПриОткрытииВручную,Регион,Рейс,ФизЛицо", Истина, Расшифровка.Регион, Расшифровка.Рейс, Расшифровка.ФизЛицо);
			ОткрытьФорму("Отчет.зпФорма3.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
		ИначеЕсли ИсточникРасшифровки = "зпКорректировкаИсходныхДанных" Тогда
			ПроверитьНаличиеКорректировкиИсходныхДанных(Расшифровка);
			Если Расшифровка.Свойство("ДокументКорректировки") Тогда
				ПараметрыФормы = Новый Структура("Ключ", Расшифровка.ДокументКорректировки);
			Иначе
				ПараметрыФормы = Новый Структура("Основание", Расшифровка);
			КонецЕсли;
			ОткрытьФорму("Документ.зпКорректировкаИсходныхДанных.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	СформироватьНаСервере();
	
КонецПроцедуры





