#Если Клиент Тогда

// Предопределенное свойство. Содержит коллекцию параметров формирования отчета.
//
Перем ПараметрыФормирования Экспорт; // <Структура>

Перем КонструкторДанных;
Перем НачалоПериода, КонецПериода;

// Предопределенная функция. Возвращает свойства отчета.
//
// Возвращаемое значение:
//  <Структура[СвойстваОтчета]>
//
Функция ПолучитьСвойства() Экспорт
	Возврат Новый Структура("ИнтерфейсВыбораДаты, ДатаНачала, ДатаОкончания", "Период", НачалоПериода, КонецПериода);
КонецФункции

Процедура СформироватьОтбор(ПолеОтбора,Область = "{ОТБОР_ПО_ПЕРИОДУ}")
	КонструкторДанных.ДобавитьПараметр("НачалоПериода", '00010101');
	КонструкторДанных.ДобавитьПараметр("КонецПериода", '00010101');

	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		Отбор = " И ("+ПолеОтбора+" МЕЖДУ &НачалоПериода И &КонецПериода)";
		
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		Отбор = " И "+ПолеОтбора+" >= &НачалоПериода";
		
	ИначеЕсли ЗначениеЗаполнено(КонецПериода) И Не ЗначениеЗаполнено(НачалоПериода) Тогда
		Отбор = " И "+ПолеОтбора+"а <= &КонецПериода";
		
	Иначе
		Отбор = "";
	КонецЕсли;
	КонструкторДанных.УстановитьПатч(Область, Отбор);
КонецПроцедуры

// Предопределенная функция. Возвращает таблицу всех возможных отборов отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьОтборы() Экспорт
	тзОтборы = КонструкторДанных.ПолучитьТаблицуОтборов();
	
	Возврат тзОтборы;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных группировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаГруппировок]>
//
Функция ПолучитьГруппировки() Экспорт
	тзГруппировки = КонструкторДанных.ПолучитьТаблицуГруппировок("Транспорт");
	
	Возврат тзГруппировки;
КонецФункции

// Предопределенная функция. Возвращает имена группировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеГруппировкиПоУмолчанию() Экспорт
	мсГруппировки = Новый Массив;
	
	мсГруппировки.Добавить("ПериодМесяц");
	мсГруппировки.Добавить("ОсновнойРайон");
	мсГруппировки.Добавить("Транспорт");
	
	Возврат мсГруппировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных сортировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировки() Экспорт
	тзСортировки = КонструкторДанных.ПолучитьТаблицуСортировок();
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу сортировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировкиПоУмолчанию() Экспорт
	тзСортировки = новаОтчеты.ПолучитьТаблицуСортировок();
	СтрСортировки = тзСортировки.Добавить();	
	СтрСортировки.Сортировка = "ПериодМесяц";
	СтрСортировки.Представление ="Месяц";
	СтрСортировки.Направление ="ВОЗР";
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных показателей отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПоказателей]>
//
Функция ПолучитьПоказатели() Экспорт
	тзПоказатели = КонструкторДанных.ПолучитьТаблицуПоказателей();
	
	Возврат тзПоказатели;
КонецФункции

// Предопределенная функция. Возвращает имена показателей, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеПоказателиПоУмолчанию() Экспорт
	мсПоказатели = Новый Массив;
	мсПоказатели.Добавить("ВесДоставлено");      
	мсПоказатели.Добавить("ОбъемДоставлено");
    мсПоказатели.Добавить("КоличествоДней");
	мсПоказатели.Добавить("КоличествоРейсов");
	мсПоказатели.Добавить("ВыполненоРейсов");
	мсПоказатели.Добавить("КоличествоРейсовОтменено");
	мсПоказатели.Добавить("ПробегПлан");
	мсПоказатели.Добавить("ПробегФакт");
	мсПоказатели.Добавить("ДлительностьПлан");
	мсПоказатели.Добавить("ДлительностьФакт");
	мсПоказатели.Добавить("КоличествоЗаказовВсего");
	мсПоказатели.Добавить("КоличествоТочекВсего");
	мсПоказатели.Добавить("КоличествоКонтрагентовВсего");
	мсПоказатели.Добавить("КоличествоЗаказовВыполнено");
	мсПоказатели.Добавить("КоличествоЗаказовВыполненоЧастично");
	мсПоказатели.Добавить("КоличествоЗаказовНеВыполнено");
    мсПоказатели.Добавить("КоличествоТочекПосещено");
    мсПоказатели.Добавить("КоличествоКонтрагентовПосещено");
	
	//Среднее на рейс
	мсПоказатели.Добавить("СреднееНаРейсВес");      
	мсПоказатели.Добавить("СреднееНаРейсОбъем");
	мсПоказатели.Добавить("СреднееНаРейсПробегПлан");
	мсПоказатели.Добавить("СреднееНаРейсПробегФакт");
	мсПоказатели.Добавить("СреднееНаРейсПродолжительностьПлан");
	мсПоказатели.Добавить("СреднееНаРейсПродолжительностьФакт");
	мсПоказатели.Добавить("СреднееНаРейсКоличествоЗаказовВыполнено");
	мсПоказатели.Добавить("СреднееНаРейсКоличествоЗаказовВыполненоЧастично");
	мсПоказатели.Добавить("СреднееНаРейсКоличествоЗаказовНеВыполнено");
	мсПоказатели.Добавить("СреднееНаРейсКоличествоТочекПосещено");
	мсПоказатели.Добавить("СреднееНаРейсКоличествоКонтрагентовПосещено");
	
	//На День
	мсПоказатели.Добавить("СреднееНаДеньВес");      
	мсПоказатели.Добавить("СреднееНаДеньОбъем");
	мсПоказатели.Добавить("СреднееНаДеньПробегПлан");
	мсПоказатели.Добавить("СреднееНаДеньПробегФакт");
	мсПоказатели.Добавить("СреднееНаДеньПродолжительностьПлан");
	мсПоказатели.Добавить("СреднееНаДеньПродолжительностьФакт");
	мсПоказатели.Добавить("СреднееНаДеньКоличествоЗаказовВыполнено");
	мсПоказатели.Добавить("СреднееНаДеньКоличествоЗаказовВыполненоЧастично");
	мсПоказатели.Добавить("СреднееНаДеньКоличествоЗаказовНеВыполнено");
	мсПоказатели.Добавить("СреднееНаДеньКоличествоТочекПосещено");
	мсПоказатели.Добавить("СреднееНаДеньКоличествоКонтрагентовПосещено");
	
	Возврат мсПоказатели;
КонецФункции

// ПолучитьМакросы(дзРезультат)
// Возвращает массив макросов расчета  в зависимости от выбранных показателей
// Параметры
//  дзРезультат  - <ДеревоЗначение> - Результат выборки
//
// Возвращаемое значение:
//   Массив   - массив макросов расчета 
//
Функция ПолучитьМакросы(дзРезультат)
	Перем стрВыполненоРейсов,стрКоличествоДней;
		мсМакросы = Новый Массив;
		СтрМакроса = "";
		СтрМакроса = СтрМакроса + "
					| 		Если ТипЗнч(строкаДз.Группировка) = Тип(""Число"") Тогда	
					|";

		Если Не (дзРезультат.Колонки.Найти("ДлительностьПлан") = Неопределено) Тогда
			мсМакросы.Добавить("строкаДз.ДлительностьПлан = ?(ТипЗнч(строкаДз.ДлительностьПлан) = Тип(""Число""), Цел(строкаДз.ДлительностьПлан/60) + (строкаДз.ДлительностьПлан%60)/100,Неопределено);" );
			СтрМакроса = СтрМакроса + "
						|Если ТипЗнч(строкаДз.ДлительностьПлан) = Тип(""Число"") Тогда 
						|	строкаДз.ДлительностьПлан =  Цел(строкаДз.ДлительностьПлан/60) + (строкаДз.ДлительностьПлан%60)/100 ;
						|КонецЕсли;";
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("ДлительностьФакт") = Неопределено) Тогда
			мсМакросы.Добавить("строкаДз.ДлительностьФакт =  ?(ТипЗнч(строкаДз.ДлительностьФакт) = Тип(""Число""),Цел(строкаДз.ДлительностьФакт/60) + (строкаДз.ДлительностьФакт%60)/100,Неопределено);" );
			СтрМакроса = СтрМакроса + "
						|Если ТипЗнч(строкаДз.ДлительностьФакт) = Тип(""Число"") Тогда 
						|	строкаДз.ДлительностьФакт = Цел(строкаДз.ДлительностьФакт/60) + (строкаДз.ДлительностьФакт%60)/100;
						|КонецЕсли;";
		КонецЕсли;
		
		стрПроверка = "строкаДз.ВыполненоРейсов = Null Или строкаДз.ВыполненоРейсов = 0,0,";
		стрВыполненоРейсов = "строкаДз.ВыполненоРейсов);";
		
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсКоличествоЗаказовВыполнено") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсКоличествоЗаказовВыполнено = "+стрПроверка+"строкаДз.КоличествоЗаказовВыполнено/"+стрВыполненоРейсов );
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсКоличествоЗаказовВыполнено = " +
						"?(строкаДз.КоличествоЗаказовВыполнено = Null Или " + стрПроверка +
						"строкаДз.КоличествоЗаказовВыполнено/" + стрВыполненоРейсов ;
		КонецЕсли; 
		Если  Не (дзРезультат.Колонки.Найти("СреднееНаРейсКоличествоЗаказовВыполненоЧастично") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсКоличествоЗаказовВыполненоЧастично = "+стрПроверка+" строкаДз.КоличествоЗаказовВыполненоЧастично/"+стрВыполненоРейсов );
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсКоличествоЗаказовВыполненоЧастично = " +
						"?(строкаДз.КоличествоЗаказовВыполненоЧастично = Null Или " + стрПроверка +
						"строкаДз.КоличествоЗаказовВыполненоЧастично/" + стрВыполненоРейсов;
		КонецЕсли; 
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсКоличествоЗаказовНеВыполнено") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсКоличествоЗаказовНеВыполнено = "+стрПроверка+" СтрокаДз.КоличествоЗаказовНеВыполнено/"+стрВыполненоРейсов );
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсКоличествоЗаказовНеВыполнено = " +
						"?(строкаДз.КоличествоЗаказовНеВыполнено = Null Или " + стрПроверка + 
						" СтрокаДз.КоличествоЗаказовНеВыполнено/" + стрВыполненоРейсов;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсКоличествоТочекПосещено") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсКоличествоТочекПосещено = "+стрПроверка+" СтрокаДз.КоличествоТочекПосещено/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсКоличествоТочекПосещено = " +
						"?(строкаДз.КоличествоТочекПосещено = Null Или " + стрПроверка +
						" СтрокаДз.КоличествоТочекПосещено/" + стрВыполненоРейсов;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсКоличествоКонтрагентовПосещено") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсКоличествоКонтрагентовПосещено = "+стрПроверка+" СтрокаДз.КоличествоКонтрагентовПосещено/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсКоличествоКонтрагентовПосещено = " +
						"?(строкаДз.КоличествоКонтрагентовПосещено = Null Или " + стрПроверка +
						" СтрокаДз.КоличествоКонтрагентовПосещено/" + стрВыполненоРейсов;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсВес") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсВес = "+стрПроверка+" СтрокаДз.ВесДоставлено/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсВес = " +
						"?(строкаДз.ВесДоставлено = Null Или " + стрПроверка +
						" СтрокаДз.ВесДоставлено/" + стрВыполненоРейсов;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсОбъем") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсОбъем = "+стрПроверка+" СтрокаДз.ОбъемДоставлено/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсОбъем = " + 
						"?(строкаДз.ОбъемДоставлено = Null Или " + стрПроверка +
						" СтрокаДз.ОбъемДоставлено/" + стрВыполненоРейсов;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсПробегПлан") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсПробегПлан = "+стрПроверка+" СтрокаДз.ПробегПлан/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсПробегПлан = " +
						"?(строкаДз.ПробегПлан = Null Или " + стрПроверка + 
						" СтрокаДз.ПробегПлан/" + стрВыполненоРейсов;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсПробегФакт") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсПробегФакт = "+стрПроверка+" СтрокаДз.ПробегФакт/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсПробегФакт = " +
						"?(строкаДз.ПробегФакт = Null Или " + стрПроверка +
						" СтрокаДз.ПробегФакт/" + стрВыполненоРейсов;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсПродолжительностьПлан") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсПродолжительностьПлан = "+стрПроверка+" СтрокаДз.ДлительностьПлан/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсПродолжительностьПлан = " +
						"?(строкаДз.ДлительностьПлан = Null Или " + стрПроверка +
						" СтрокаДз.ДлительностьПлан/" + стрВыполненоРейсов;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаРейсПродолжительностьФакт") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаРейсПродолжительностьФакт = "+стрПроверка+" СтрокаДз.ДлительностьФакт/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаРейсПродолжительностьФакт = " +
						"?(строкаДз.ДлительностьФакт = Null Или " + стрПроверка +
						" СтрокаДз.ДлительностьФакт/" + стрВыполненоРейсов;
		КонецЕсли;
		
		стрПроверка = " строкаДз.КоличествоДней = Null Или строкаДз.КоличествоДней = 0,0,";
		стрКоличествоДней = "строкаДз.КоличествоДней);";
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньКоличествоЗаказовВыполнено") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньКоличествоЗаказовВыполнено = "+стрПроверка+" строкаДз.КоличествоЗаказовВыполнено/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньКоличествоЗаказовВыполнено = " +
						"?(строкаДз.КоличествоЗаказовВыполнено = Null Или " + стрПроверка + 
						"	строкаДз.КоличествоЗаказовВыполнено/" + стрКоличествоДней;
		КонецЕсли; 
		Если  Не (дзРезультат.Колонки.Найти("СреднееНаДеньКоличествоЗаказовВыполненоЧастично") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньКоличествоЗаказовВыполненоЧастично = "+стрПроверка+" строкаДз.КоличествоЗаказовВыполненоЧастично/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньКоличествоЗаказовВыполненоЧастично = " +
						"?(строкаДз.КоличествоЗаказовВыполненоЧастично = Null Или  " + стрПроверка +
						" строкаДз.КоличествоЗаказовВыполненоЧастично/" + стрКоличествоДней;
		КонецЕсли; 
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньКоличествоЗаказовНеВыполнено") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньКоличествоЗаказовНеВыполнено = "+стрПроверка+" СтрокаДз.КоличествоЗаказовНеВыполнено/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньКоличествоЗаказовНеВыполнено = " +
						"?(строкаДз.КоличествоЗаказовНеВыполнено = Null Или " + стрПроверка +
						" СтрокаДз.КоличествоЗаказовНеВыполнено/" + стрКоличествоДней;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньКоличествоТочекПосещено") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньКоличествоТочекПосещено = "+стрПроверка+" СтрокаДз.КоличествоТочекПосещено/"+стрВыполненоРейсов);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньКоличествоТочекПосещено = " +
						"?(строкаДз.КоличествоТочекПосещено = Null Или   " + стрПроверка +
						" СтрокаДз.КоличествоТочекПосещено/" + стрКоличествоДней;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньКоличествоКонтрагентовПосещено") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньКоличествоКонтрагентовПосещено = "+стрПроверка+" СтрокаДз.КоличествоКонтрагентовПосещено/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньКоличествоКонтрагентовПосещено = " +
						"?(строкаДз.КоличествоКонтрагентовПосещено = Null Или  " + стрПроверка +
						" СтрокаДз.КоличествоКонтрагентовПосещено/" + стрКоличествоДней;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньВес") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньВес = "+стрПроверка+" СтрокаДз.ВесДоставлено/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньВес = " +
						"?(строкаДз.ВесДоставлено = Null Или " + стрПроверка + 
						" СтрокаДз.ВесДоставлено/" + стрКоличествоДней;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньОбъем") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньОбъем = "+стрПроверка+" СтрокаДз.ОбъемДоставлено/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньОбъем = " + 
						"?(строкаДз.ОбъемДоставлено = Null Или " + стрПроверка +
						" СтрокаДз.ОбъемДоставлено/" + стрКоличествоДней;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньПробегПлан") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньПробегПлан = "+стрПроверка+" СтрокаДз.ПробегПлан/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньПробегПлан = " +
						"?(строкаДз.ПробегПлан = Null Или  " + стрПроверка +
						" СтрокаДз.ПробегПлан/" + стрКоличествоДней;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньПробегФакт") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньПробегФакт = "+стрПроверка+" СтрокаДз.ПробегФакт/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньПробегФакт = " +
						"?(строкаДз.ПробегФакт = Null Или " + стрПроверка +
						" СтрокаДз.ПробегФакт/" + стрКоличествоДней;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньПродолжительностьПлан") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньПродолжительностьПлан = "+стрПроверка+" СтрокаДз.ДлительностьПлан/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньПродолжительностьПлан = " +
						"?(строкаДз.ДлительностьПлан = Null Или " + стрПроверка +  
						" СтрокаДз.ДлительностьПлан/" + стрКоличествоДней;
		КонецЕсли;
		Если Не (дзРезультат.Колонки.Найти("СреднееНаДеньПродолжительностьФакт") = Неопределено) Тогда
			мсМакросы.Добавить("СтрокаДз.СреднееНаДеньПродолжительностьФакт = "+стрПроверка+" СтрокаДз.ДлительностьФакт/"+стрКоличествоДней);
			СтрМакроса = СтрМакроса + "
						|СтрокаДз.СреднееНаДеньПродолжительностьФакт = " +
						"?(строкаДз.ДлительностьФакт = Null Или " + стрПроверка +  
						" СтрокаДз.ДлительностьФакт/" + стрКоличествоДней;
		КонецЕсли;
				
СтрМакроса = СтрМакроса+"
						|       КонецЕсли;
						|";

		Возврат СтрМакроса; 
КонецФункции

Функция ОбработатьРезультат(Дз, стрМакрос)
	Для Каждого строкаДз Из Дз.Строки  Цикл
		Попытка
			Выполнить(стрМакрос);
		Исключение
		КонецПопытки;
       ОбработатьРезультат(СтрокаДз,стрМакрос);
	КонецЦикла; 
				
КонецФункции	

// Предопределенная процедура. Формирует отчет в указанном табличном документе с текущими параметрами формирования.
//
// Параметры:
//  ТД <ТабличныйДокумент>
//
Процедура Сформировать(ТД) Экспорт
	УстановитьПериод(ПараметрыФормирования.НачалоПериода, ПараметрыФормирования.КонецПериода);
	Настроить();	
	
	КонструкторДанных.ПрименитьПараметрыФормированияОтчета(ПараметрыФормирования);
	
	дзРезультат = КонструкторДанных.ПолучитьДанные();
	мсМакросы = ПолучитьМакросы(дзРезультат);
	ОбработатьРезультат(дзРезультат,мсМакросы);	
	
	тзИтоги = КонструкторДанных.ПолучитьТаблицуИтогов();
	
	новаОтчеты.СформироватьТабличныйДокумент(ЭтотОбъект, ТД, дзРезультат, тзИтоги, "");
		
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТД.АвтоМасштаб = Истина;
КонецПроцедуры

// Предопределенная процедура. Обрабатывает событие "Обработка расшифровки" отчета.
//
// Параметры:
//  Форма                <Форма>
//  Элемент              <ЭлементУправления>
//  Расшифровка          <Произвольный>
//  СтандартнаяОбработка <Булево>
//
Процедура ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если новаОтчеты.Расшифровать(Форма, Элемент, Расшифровка) Тогда Возврат; КонецЕсли;
	ОткрытьЗначение(Расшифровка);
КонецПроцедуры

Процедура Настроить()
	КонструкторДанных = Обработки.новаКонструкторЗапроса.Создать();
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ  РАЗЛИЧНЫЕ
    |
	|    	СтатистикаРейсов.РейсОтменен,
	|		СтатистикаРейсов.ДатаНачала,
	|		СтатистикаРейсов.Ссылка,
	|			{*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ}
	|
	|	ИЗ
	|		БизнесПроцесс.новаРейсМестнойДоставки КАК СтатистикаРейсов
    |
	|
	|		ГДЕ
	|			(НЕ СтатистикаРейсов.Ссылка ЕСТЬ NULL )                
	|			И СтатистикаРейсов.Завершен
	|			{ОТБОР_ПО_ПЕРИОДУ_РЕЙСОВ}
	|		СГРУППИРОВАТЬ ПО 
	|		СтатистикаРейсов.РейсОтменен,
	|		СтатистикаРейсов.ДатаНачала,
	|		СтатистикаРейсов.Ссылка,
	|		{*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ}
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СтатистикаДоставок.Рейс.РейсОтменен,
	|		СтатистикаДоставок.Рейс.ДатаНачала,
	|		СтатистикаДоставок.Рейс.Ссылка,
	|			{*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ}
	|		ИЗ
	|			РегистрСведений.новаЗаданияРейсов КАК СтатистикаДоставок
	|
	|
	|		ГДЕ
	|			(НЕ СтатистикаДоставок.Рейс.Ссылка ЕСТЬ NULL )
	|				И СтатистикаДоставок.Рейс.Завершен
	|			{ОТБОР_ПО_ПЕРИОДУ_ДОСТАВОК}
	|
	|		СГРУППИРОВАТЬ ПО 
	|		СтатистикаДоставок.Рейс.РейсОтменен,
	|		СтатистикаДоставок.Рейс.ДатаНачала,
	|		СтатистикаДоставок.Рейс.Ссылка,
	|		{*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ}
	|
	|) КАК СтатистикаРейсов
	|";
	

	СформироватьОтбор("СтатистикаРейсов.ДатаНачала","{ОТБОР_ПО_ПЕРИОДУ_РЕЙСОВ}");
	СформироватьОтбор("СтатистикаДоставок.Рейс.ДатаНачала","{ОТБОР_ПО_ПЕРИОДУ_ДОСТАВОК}");
	
	// ПериодДень
	КонструкторДанных.ДобавитьПоле("ПериодДень","День","ДФ='dd.MM.yyyy'");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ПериодДень");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","НАЧАЛОПЕРИОДА(СтатистикаРейсов.ДатаНачала, ДЕНЬ)");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","НАЧАЛОПЕРИОДА(СтатистикаДоставок.Рейс.ДатаНачала, ДЕНЬ)");
	
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.ПериодДень");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "НАЧАЛОПЕРИОДА(СтатистикаРейсов.ДатаНачала, ДЕНЬ)");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "НАЧАЛОПЕРИОДА(СтатистикаДоставок.Рейс.ДатаНачала, ДЕНЬ)");
	
	// ПериодМесяц
	КонструкторДанных.ДобавитьПоле("ПериодМесяц","Месяц","ДФ='ММММ гггг'");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ПериодМесяц");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "НАЧАЛОПЕРИОДА(СтатистикаРейсов.ДатаНачала, МЕСЯЦ)");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "НАЧАЛОПЕРИОДА(СтатистикаДоставок.Рейс.ДатаНачала, МЕСЯЦ)");
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.ПериодМесяц");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "НАЧАЛОПЕРИОДА(СтатистикаРейсов.ДатаНачала, МЕСЯЦ)");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "НАЧАЛОПЕРИОДА(СтатистикаДоставок.Рейс.ДатаНачала, МЕСЯЦ)");
	
	// ОсновнойРайон
	КонструкторДанных.ДобавитьПоле("ОсновнойРайон", "Район");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ОсновнойРайон");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.ОсновнойРайон");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.ОсновнойРайон");
	КонструкторДанных.ДобавитьОтборПоля(, "СтатистикаРейсов.ОсновнойРайон");
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.ОсновнойРайон.Наименование");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.ОсновнойРайон");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.ОсновнойРайон");
	
	// Транспорт
	КонструкторДанных.ДобавитьПоле("Транспорт");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.Транспорт");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ" , "СтатистикаРейсов.Транспорт");   
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ" , "СтатистикаДоставок.Рейс.Транспорт");   
	КонструкторДанных.ДобавитьОтборПоля(   , "СтатистикаРейсов.Транспорт");
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.Транспорт.Наименование");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.Транспорт");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.Транспорт");
	
	// Водитель
	КонструкторДанных.ДобавитьПоле("Водитель");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.Водитель");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.Водитель");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.Водитель");
	КонструкторДанных.ДобавитьОтборПоля(, "СтатистикаРейсов.Водитель");
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.Водитель.Наименование");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.Водитель");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.Водитель");
	
	// Экспедитор
	КонструкторДанных.ДобавитьПоле("Экспедитор");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.Экспедитор");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.Экспедитор");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.Экспедитор");
	КонструкторДанных.ДобавитьОтборПоля(, "СтатистикаРейсов.Экспедитор");
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.Экспедитор.Наименование");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.Экспедитор");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.Экспедитор");
	
	// НачалоРейса	
	КонструкторДанных.ДобавитьПоле("НачалоРейса", "Пункт отправления");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.НачалоРейса");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.НачалоРейса");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.НачалоРейса");
	КонструкторДанных.ДобавитьОтборПоля(, "СтатистикаРейсов.НачалоРейса");
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.НачалоРейса.Наименование");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.НачалоРейса");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.НачалоРейса");
	
	// КонецРейса	
	КонструкторДанных.ДобавитьПоле("КонецРейса", "Пункт завершения");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КонецРейса");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.КонецРейса");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.КонецРейса");
	КонструкторДанных.ДобавитьОтборПоля(, "СтатистикаРейсов.КонецРейса");
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.КонецРейса.Наименование");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.КонецРейса");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс.КонецРейса");
	
	// Рейсы
	КонструкторДанных.ДобавитьПоле("Рейсы");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.Рейсы");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.Ссылка");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс");
	КонструкторДанных.ДобавитьОтборПоля(, "СтатистикаРейсов.Рейсы");
	КонструкторДанных.ДобавитьСортировкуПоля("СтатистикаРейсов.Рейсы");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_РЕЙСЫ", "СтатистикаРейсов.Ссылка");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Рейс");
	
	// КоличествоДней, Отработано дней
	КонструкторДанных.ДобавитьПоле("КоличествоДней","Отработано дней", "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоДней");//");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","ВЫБОР КОГДА НЕ СтатистикаРейсов.РейсОтменен ТОГДА НАЧАЛОПЕРИОДА(СтатистикаРейсов.ДатаНачала, ДЕНЬ) КОНЕЦ");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","ВЫБОР КОГДА НЕ СтатистикаДоставок.Рейс.РейсОтменен ТОГДА НАЧАЛОПЕРИОДА(СтатистикаДоставок.Рейс.ДатаНачала, ДЕНЬ) КОНЕЦ");
	КонструкторДанных.ДобавитьИтог("КоличествоДней",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоДней)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// КоличествоРейсов
	КонструкторДанных.ДобавитьПоле("КоличествоРейсов",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоРейсов");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","СтатистикаРейсов.Ссылка");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","СтатистикаДоставок.Рейс.Ссылка");
	КонструкторДанных.ДобавитьИтог("КоличествоРейсов",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоРейсов)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ВыполненоРейсов, СтатистикаДоставок, РейсСсылка, КРейсов
	КонструкторДанных.ДобавитьПоле("ВыполненоРейсов",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ВыполненоРейсов");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","ВЫБОР КОГДА НЕ СтатистикаРейсов.РейсОтменен ТОГДА СтатистикаРейсов.Ссылка КОНЕЦ");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","ВЫБОР КОГДА НЕ СтатистикаДоставок.Рейс.РейсОтменен ТОГДА СтатистикаДоставок.Рейс.Ссылка КОНЕЦ");
	КонструкторДанных.ДобавитьИтог("ВыполненоРейсов",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыполненоРейсов)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ОтмененоРейсов
	КонструкторДанных.ДобавитьПоле("КоличествоРейсовОтменено",,"ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоРейсовОтменено");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "ВЫБОР КОГДА СтатистикаРейсов.РейсОтменен ТОГДА СтатистикаРейсов.Ссылка КОНЕЦ");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "ВЫБОР КОГДА  СтатистикаДоставок.Рейс.РейсОтменен ТОГДА СтатистикаДоставок.Рейс.Ссылка КОНЕЦ");
	КонструкторДанных.ДобавитьИтог("КоличествоРейсовОтменено",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоРейсовОтменено)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Итоги
	
	// Объем
	КонструкторДанных.ДобавитьПоле("ОбъемДоставлено",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ОбъемДоставлено");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","0");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","ВЫБОР КОГДА НЕ СтатистикаДоставок.Рейс.РейсОтменен ТОГДА СтатистикаДоставок.Доставка.Груз.Объем КОНЕЦ");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "ВЫБОР КОГДА НЕ СтатистикаДоставок.Рейс.РейсОтменен ТОГДА СтатистикаДоставок.Доставка.Груз.Объем КОНЕЦ");
	КонструкторДанных.ДобавитьИтог("ОбъемДоставлено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Вес
	КонструкторДанных.ДобавитьПоле("ВесДоставлено",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ВесДоставлено");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","0");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","ВЫБОР КОГДА НЕ СтатистикаДоставок.Рейс.РейсОтменен ТОГДА СтатистикаДоставок.Доставка.Груз.Вес КОНЕЦ");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "ВЫБОР КОГДА НЕ СтатистикаДоставок.Рейс.РейсОтменен ТОГДА СтатистикаДоставок.Доставка.Груз.Вес КОНЕЦ");
	КонструкторДанных.ДобавитьИтог("ВесДоставлено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	// ПробегПлан
	КонструкторДанных.ДобавитьПоле("ПробегПлан",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ПробегПлан");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "
											|ВЫБОР
											|КОГДА НЕ СтатистикаРейсов.РейсОтменен	
											|	ТОГДА СтатистикаРейсов.РасстояниеПлан										
											|КОНЕЦ 
											|");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "NULL");
	КонструкторДанных.ДобавитьИтог("ПробегПлан");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ПробегФакт
	КонструкторДанных.ДобавитьПоле("ПробегФакт",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ПробегФакт");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "СУММА(ВЫБОР 
											|КОГДА НЕ СтатистикаРейсов.РейсОтменен	
											|	ТОГДА СтатистикаРейсов.РасстояниеФакт
											|КОНЕЦ )");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "NULL");
	КонструкторДанных.ДобавитьИтог("ПробегФакт");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ДлительностьПлан
	КонструкторДанных.ДобавитьПоле("ДлительностьПлан",,"ЧДЦ=2; ЧРД=:");
	КонструкторДанных.ДобавитьВыборкуПоля(, "СтатистикаРейсов.ДлительностьПлан");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "
											|ВЫБОР 
											|КОГДА (НЕ СтатистикаРейсов.РейсОтменен) И (РАЗНОСТЬДАТ(СтатистикаРейсов.ДатаНачала, СтатистикаРейсов.ДатаКонца, МИНУТА) >0)	
											|	ТОГДА РАЗНОСТЬДАТ(СтатистикаРейсов.ДатаНачала, СтатистикаРейсов.ДатаКонца, МИНУТА)
											|КОНЕЦ 
											|");
				
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "NULL");
	КонструкторДанных.ДобавитьИтог("ДлительностьПлан");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ДлительностьФакт
	КонструкторДанных.ДобавитьПоле("ДлительностьФакт",,"ЧДЦ=2; ЧРД=:");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.ДлительностьФакт");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "
											|ВЫБОР 
											|КОГДА (НЕ СтатистикаРейсов.РейсОтменен) И (РАЗНОСТЬДАТ(СтатистикаРейсов.ДатаНачалаФакт, СтатистикаРейсов.ДатаКонцаФакт, МИНУТА)>0)	
											|	ТОГДА РАЗНОСТЬДАТ(СтатистикаРейсов.ДатаНачалаФакт, СтатистикаРейсов.ДатаКонцаФакт, МИНУТА)
											|КОНЕЦ 
											|");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "NULL");
	КонструкторДанных.ДобавитьИтог("ДлительностьФакт");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// КОЛИЧЕСТВО 
	
	// Количество доставок
	КонструкторДанных.ДобавитьПоле("КоличествоЗаказовВсего",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоЗаказовВсего");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","NULL");
 	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","СтатистикаДоставок.Доставка");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Доставка");
	КонструкторДанных.ДобавитьИтог("КоличествоЗаказовВсего",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоЗаказовВсего)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ТочкиПрибытия
	КонструкторДанных.ДобавитьПоле("КоличествоТочекВсего",,"ЧДЦ=0");          
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоТочекВсего");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","NULL");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","СтатистикаДоставок.Доставка.ТочкаПрибытия");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Доставка.ТочкаПрибытия");
	КонструкторДанных.ДобавитьИтог("КоличествоТочекВсего",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоТочекВсего)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Грузополучатели
	КонструкторДанных.ДобавитьПоле("КоличествоКонтрагентовВсего",,"ЧДЦ=0");          
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоКонтрагентовВсего");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "NULL");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ","СтатистикаДоставок.Доставка.Грузополучатель");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "СтатистикаДоставок.Доставка.Грузополучатель");
	КонструкторДанных.ДобавитьИтог("КоличествоКонтрагентовВсего",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоКонтрагентовВсего)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ИСПОЛНЕНИЕ
	
	// Выполнено
	КонструкторДанных.ДобавитьПоле("КоличествоЗаказовВыполнено",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоЗаказовВыполнено");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "NULL");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  (НЕ СтатистикаДоставок.Рейс.РейсОтменен) ТОГДА
		|	ВЫБОР КОГДА (	СтатистикаДоставок.Доставка.РезультатДоставки.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.ПустаяСсылка) 
		|				 ИЛИ СтатистикаДоставок.Доставка.РезультатДоставки.РезультатВыполнения =  ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.Выполнена) )
		|			ТОГДА 1
		|	КОНЕЦ
		|КОНЕЦ
		|");

	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  (НЕ СтатистикаДоставок.Рейс.РейсОтменен) ТОГДА
		|	ВЫБОР КОГДА (	СтатистикаДоставок.Доставка.РезультатДоставки.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.ПустаяСсылка) 
		|				 ИЛИ СтатистикаДоставок.Доставка.РезультатДоставки.РезультатВыполнения =  ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.Выполнена) )
		|			ТОГДА 1
		|	КОНЕЦ
		|КОНЕЦ
		|");
    КонструкторДанных.ДобавитьИтог("КоличествоЗаказовВыполнено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Выполнено частично
	КонструкторДанных.ДобавитьПоле("КоличествоЗаказовВыполненоЧастично",,"ЧДЦ=0");          
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоЗаказовВыполненоЧастично");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ","NULL");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  НЕ СтатистикаДоставок.Рейс.РейсОтменен И
		|	СтатистикаДоставок.Доставка.РезультатДоставки.РезультатВыполнения =  ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.ВыполненаЧастично)
		|	ТОГДА 1
		|КОНЕЦ
		|");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  НЕ СтатистикаДоставок.Рейс.РейсОтменен И
		|	СтатистикаДоставок.Доставка.РезультатДоставки.РезультатВыполнения =  ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.ВыполненаЧастично)
		|	ТОГДА 1
		|КОНЕЦ
		|");
    КонструкторДанных.ДобавитьИтог("КоличествоЗаказовВыполненоЧастично");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Не выполнено
	КонструкторДанных.ДобавитьПоле("КоличествоЗаказовНеВыполнено",,"ЧДЦ=0");          
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоЗаказовНеВыполнено");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "NULL");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  НЕ СтатистикаДоставок.Рейс.РейсОтменен И
		|	СтатистикаДоставок.Доставка.РезультатДоставки.РезультатВыполнения =  ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.НеВыполнена)
		|	ТОГДА 1
		|КОНЕЦ
		|");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  НЕ СтатистикаДоставок.Рейс.РейсОтменен И
		|	СтатистикаДоставок.Доставка.РезультатДоставки.РезультатВыполнения =  ЗНАЧЕНИЕ(Перечисление.новаРезультатВыполненияМестнойДоставки.НеВыполнена)
		|	ТОГДА 1
		|КОНЕЦ
		|");
    КонструкторДанных.ДобавитьИтог("КоличествоЗаказовНеВыполнено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ПОСЕЩЕНО
	
	// ТочкаПрибытия
	КонструкторДанных.ДобавитьПоле("КоличествоТочекПосещено",,"ЧДЦ=0");          
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоТочекПосещено");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "NULL");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  НЕ СтатистикаДоставок.Рейс.РейсОтменен И
		|	СтатистикаДоставок.Доставка.РезультатДоставки.ТочкаПосещена 
		|ТОГДА СтатистикаДоставок.Доставка.ТочкаПрибытия 
		|КОНЕЦ
		|");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  НЕ СтатистикаДоставок.Рейс.РейсОтменен И
		|	СтатистикаДоставок.Доставка.РезультатДоставки.ТочкаПосещена 
		|ТОГДА СтатистикаДоставок.Доставка.ТочкаПрибытия 
		|КОНЕЦ
		|");
	КонструкторДанных.ДобавитьИтог("КоличествоТочекПосещено",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоТочекПосещено)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	// Грузополучатель
	КонструкторДанных.ДобавитьПоле("КоличествоКонтрагентовПосещено",,"ЧДЦ=0");          
	КонструкторДанных.ДобавитьВыборкуПоля(,"СтатистикаРейсов.КоличествоКонтрагентовПосещено");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_РЕЙСЫ", "NULL");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  НЕ СтатистикаДоставок.Рейс.РейсОтменен И
		|	СтатистикаДоставок.Доставка.РезультатДоставки.ТочкаПосещена 
		|ТОГДА СтатистикаДоставок.Доставка.Грузополучатель 
		|КОНЕЦ
		|");
	КонструкторДанных.ДобавитьГруппировкуПоля("*ГРУППИРОВКА_ЗАПРОСА_ДОСТАВКИ", "
		|ВЫБОР КОГДА  НЕ СтатистикаДоставок.Рейс.РейсОтменен И
		|	СтатистикаДоставок.Доставка.РезультатДоставки.ТочкаПосещена 
		|ТОГДА СтатистикаДоставок.Доставка.Грузополучатель 
		|КОНЕЦ
		|");
	КонструкторДанных.ДобавитьИтог("КоличествоКонтрагентовПосещено",,,"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоКонтрагентовПосещено)");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// СРЕДНЕЕ на рейс	  
	
	// СтатистикаРейсов.ВыполненоРейсов 
	// Доставок выполнено
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсКоличествоЗаказовВыполнено","Количество выполненных заявок в среднем на рейс" , "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсКоличествоЗаказовВыполнено");
	КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("КоличествоЗаказовВыполнено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Доставок выполнено частично
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсКоличествоЗаказовВыполненоЧастично","Количество частично выполненных заявок в среднем на рейс", "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсКоличествоЗаказовВыполненоЧастично");
	КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");	
	КонструкторДанных.ДобавитьВедущееПоле("КоличествоЗаказовВыполненоЧастично");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Доставок не выполнено
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсКоличествоЗаказовНеВыполнено","Количество не выполненных заявок в среднем на рейс", "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсКоличествоЗаказовНеВыполнено");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("КоличествоЗаказовНеВыполнено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Посещено точек
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсКоличествоТочекПосещено",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсКоличествоТочекПосещено");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("КоличествоТочекПосещено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	// Посещено контрагентов
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсКоличествоКонтрагентовПосещено",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсКоличествоКонтрагентовПосещено");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("КоличествоТочекПосещено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	// Объем
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсОбъем",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсОбъем");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("Объем");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Вес
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсВес",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсВес");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("Вес");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ПробегПлан
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсПробегПлан",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсПробегПлан");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("ПробегПлан");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

 	// ПробегФакт       
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсПробегФакт",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсПробегФакт");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("ПробегФакт");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ДлительностьПлан
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсПродолжительностьПлан",, "ЧДЦ=2; ЧРД=:");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсПродолжительностьПлан");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("ПродолжительностьПлан");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
 
 	// ДлительностьФакт
	КонструкторДанных.ДобавитьПоле("СреднееНаРейсПродолжительностьФакт",, "ЧДЦ=2; ЧРД=:");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаРейсПродолжительностьФакт");
    КонструкторДанных.ДобавитьВедущееПоле("ВыполненоРейсов");
	КонструкторДанных.ДобавитьВедущееПоле("ПродолжительностьФакт");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	// СРЕДНЕЕ на День	  
	
	// СтатистикаРейсов.КоличествоДней
	// Доставок выполнено
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньКоличествоЗаказовВыполнено",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньКоличествоЗаказовВыполнено");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
 	КонструкторДанных.ДобавитьВедущееПоле("КоличествоЗаказовВыполнено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Доставок выполнено частично
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньКоличествоЗаказовВыполненоЧастично",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньКоличествоЗаказовВыполненоЧастично");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
 	КонструкторДанных.ДобавитьВедущееПоле("КоличествоЗаказовВыполненоЧастично");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Доставок не выполнено	
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньКоличествоЗаказовНеВыполнено",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньКоличествоЗаказовНеВыполнено");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
 	КонструкторДанных.ДобавитьВедущееПоле("КоличествоЗаказовНеВыполнено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Посещено точек
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньКоличествоТочекПосещено",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньКоличествоТочекПосещено");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
 	КонструкторДанных.ДобавитьВедущееПоле("КоличествоТочекПосещено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	// Посещено контрагентов
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньКоличествоКонтрагентовПосещено",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньКоличествоКонтрагентовПосещено");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
	КонструкторДанных.ДобавитьВедущееПоле("КоличествоТочекПосещено");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	// Объем
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньОбъем",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньОбъем");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
	КонструкторДанных.ДобавитьВедущееПоле("Вес");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// Вес
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньВес",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньВес");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
	КонструкторДанных.ДобавитьВедущееПоле("Объем");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	// ПробегПлан       
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньПробегПлан",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньПробегПлан");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
	КонструкторДанных.ДобавитьВедущееПоле("ПробегПлан");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ПробегФакт       
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньПробегФакт",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньПробегФакт");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
	КонструкторДанных.ДобавитьВедущееПоле("ПробегФакт");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
 
 	// ДлительностьПлан
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньПродолжительностьПлан",, "ЧДЦ=2; ЧРД=:");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньПродолжительностьПлан");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
	КонструкторДанных.ДобавитьВедущееПоле("ПродолжительностьПлан");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();
	
	// ДлительностьФакт
	КонструкторДанных.ДобавитьПоле("СреднееНаДеньПродолжительностьФакт",, "ЧДЦ=2; ЧРД=:");
	КонструкторДанных.ДобавитьВыборкуПоля(,"0");
	КонструкторДанных.ДобавитьИтог("СреднееНаДеньПродолжительностьФакт");
    КонструкторДанных.ДобавитьВедущееПоле("КоличествоДней");
	КонструкторДанных.ДобавитьВедущееПоле("ПродолжительностьФакт");
    КонструкторДанных.ИсключитьПолеИзОтбораИСортировки();

	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ПериодМесяц");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ПериодДень");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ОсновнойРайон");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Транспорт",,, Истина);
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Водитель",,, Истина);
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Экспедитор",,, Истина);
	КонструкторДанных.ДобавитьДоступнуюГруппировку("НачалоРейса");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("КонецРейса");
	
   	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Рейсы");
	
	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Предопределенная процедура. Устанавливает в отчет новый период формирования.
//
// Параметры:
//  НовоеНачалоПериода <Дата>
//  НовыйКонецПериода  <Дата>
//
Процедура УстановитьПериод(НовоеНачалоПериода, НовыйКонецПериода) Экспорт
	НачалоПериода = НачалоДня(НовоеНачалоПериода);
	КонецПериода = КонецДня(НовыйКонецПериода);
КонецПроцедуры

// Предопределенная функция. Создает копию текущего отчета вместе с параметрами формирования.
//
// Возвращаемое значение:
//  <ОтчетОбъект>
//
Функция Скопировать() Экспорт
	КопияОтчета = Отчеты[Метаданные().Имя].Создать();
	
	Строка = ЗначениеВСтрокуВнутр(ЭтотОбъект.ПараметрыФормирования);
	КопияОтчета.ПараметрыФормирования = ЗначениеИзСтрокиВнутр(Строка); 
	КопияОтчета.УстановитьПериод(НачалоПериода, КонецПериода);
	Возврат КопияОтчета;		
КонецФункции

УстановитьПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
Настроить();

#КонецЕсли
