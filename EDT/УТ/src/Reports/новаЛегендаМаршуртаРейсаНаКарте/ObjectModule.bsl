
// Предопределенное свойство. Содержит коллекцию свойств печатной формы.
//
Перем СвойстваПечатнойФормы Экспорт; // <Структура>
Перем КСЛ;

Процедура ПодключитьКСЛ()
	#Если Клиент Тогда
		КСЛ = новаСерверКСЛ.Подключиться(новаКонтекст);
	#Иначе
		КСЛ = новаСерверКСЛ.Подключиться();
	#КонецЕсли
КонецПроцедуры


// Предопределенная функция. Формирует печатную форму в указанном документе.
//
// Параметры:
//  Форма             <Форма>
//  ТабличныйДокумент <ТабличныйДокумент>
//  Заголовок         <Строка>
//
// Возвращаемое значение:
//  <Булево>: Истина, если печатную форму удалось сформировать.
//
Функция ВывестиНаПечать(Форма, ТабличныйДокумент, Заголовок) Экспорт
	Рейс = Форма.Ссылка;
	
	ИсточникМаршрута = Обработки.новаИсточникМаршрутРейса.Создать();
	стРейс = ИсточникМаршрута.НачатьРедактирование(Рейс, Неопределено);
	
	Заголовок = СокрЛП(Рейс) + " - легенда маршрута";
	
	Макет = ПолучитьМакет("ЛегендаРейсаНаКарте");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Рейс = Владелец;
	Шапка.Параметры.Водитель = Владелец.Водитель;
	Шапка.Параметры.Транспорт = Владелец.Транспорт;
	Шапка.Параметры.Выезд = Владелец.ДатаНачала;
	Шапка.Параметры.Окончание = Владелец.ДатаКонца;
	
	Коэффициент = ?(Владелец.КоэффициентСкорости > 0, Владелец.КоэффициентСкорости, 1);
	ТекВремя = Владелец.ДатаНачала;
	
	ТабличныйДокумент.Вывести(Шапка);
	
	СтрокаМаршрута = Макет.ПолучитьОбласть("СтрокаМаршрута");
	СтрокаЛегенды = Макет.ПолучитьОбласть("Строка");
	
	ПодключитьКСЛ();
	
	РейсКСЛ = КСЛ.Доставка_Рейс();
	РейсКСЛ.Ид = СокрЛП(Рейс.УникальныйИдентификатор());
	РейсКСЛ.Загрузить();
	
	МаршрутКСЛ = РейсКСЛ.Маршрут;
	КоличествоТочек = МаршрутКСЛ.Количество - 1;
	
	Для ъ = 0 По КоличествоТочек Цикл
		
		ТочкаМаршрутаКСЛ = МаршрутКСЛ.Получить(ъ);
		
		ОписаниеТочки = "";
		
		Если ъ = 0 Тогда
			ОписаниеТочки = "Старт";
		ИначеЕсли ъ = КоличествоТочек Тогда
			ОписаниеТочки = "Финиш";
		КонецЕсли; 
		
		стрТочка = стРейс.Маршрут.Найти(ТочкаМаршрутаКСЛ.Ид, "ИдТочки");
		Если стрТочка <> Неопределено Тогда
			Действие = "";
			
			Если стрТочка.Действие = Перечисления.новаДействияВТочкеРейсаМестнойДоставки.Погрузка Тогда
				Действие = "Погрузка";
			
			ИначеЕсли стрТочка.Действие = Перечисления.новаДействияВТочкеРейсаМестнойДоставки.Разгрузка Тогда
				Действие = "Разгрузка";
			
			ИначеЕсли стрТочка.Действие = Перечисления.новаДействияВТочкеРейсаМестнойДоставки.ПогрузкаИРазгрузка Тогда
				Действие = "Погрузка/Разгрузка";
			КонецЕсли;
			
			Если Не ПустаяСтрока(Действие) Тогда
				Если ПустаяСтрока(ОписаниеТочки) Тогда
					ОписаниеТочки = Действие;
				Иначе
					ОписаниеТочки = ОписаниеТочки + " (" + Действие + ")";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаМаршрута.Параметры.Легенда = ОписаниеТочки + " :"
			+ ТочкаМаршрутаКСЛ.ТочкаДоставки.ПолучитьОбъект().Наименование;
		СтрокаМаршрута.Параметры.Время   = Формат(ТекВремя, "ДФ=ЧЧ:мм");
		
		Если Найти(СтрокаМаршрута.Параметры.Легенда,"<no name street>") = 0 Тогда
			ТабличныйДокумент.Вывести(СтрокаМаршрута);
		КонецЕсли;
		
		Если стрТочка <> Неопределено Тогда
			ТекВремя = ТекВремя + (стрТочка.ПлановоеВремяПосещения - '00010101');
		КонецЕсли;
		
		Если ТочкаМаршрутаКСЛ.ПлановыйМаршрут = Неопределено Тогда Продолжить; КонецЕсли;
		
		УчасткиТрека = ТочкаМаршрутаКСЛ.ПлановыйМаршрут.ПолучитьСписокУчастковТрека();
		КоличествоУчастковТрека = УчасткиТрека.Количество - 1;
		
		тзЛегенда = Новый ТаблицаЗначений;
		тзЛегенда.Колонки.Добавить("Время");
		тзЛегенда.Колонки.Добавить("ВремяДвижения");
		тзЛегенда.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число"));
		тзЛегенда.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Число"));
		тзЛегенда.Колонки.Добавить("Легенда");
		
		стрЛегенда = Неопределено;
		
		Для ъъ = 0 По КоличествоУчастковТрека Цикл
			
			УчастокТрека = УчасткиТрека.Получить(ъъ);
			
			Если УчастокТрека.ТипУчастка = "Старт"
			     или УчастокТрека.ТипУчастка = "Финиш" Тогда
				Продолжить;
			КонецЕсли;
			
			Легенда = УчастокТрека.ПолучитьЛегенду();
			
			Если стрЛегенда = Неопределено
			     или стрЛегенда.Легенда <> Легенда
			     или Найти(Легенда, "<no name street>") = 0 Тогда
				
				стрЛегенда = тзЛегенда.Добавить();
				стрЛегенда.Легенда = Легенда;
				стрЛегенда.Время = ТекВремя;
			КонецЕсли;
			
			Если УчастокТрека.ВремяОтПредыдущего > 0 Тогда
				стрЛегенда.Длительность = стрЛегенда.Длительность + УчастокТрека.ВремяОтПредыдущего * Коэффициент;
				ТекВремя = ТекВремя + УчастокТрека.ВремяОтПредыдущего * Коэффициент;
			КонецЕсли;
			Если УчастокТрека.РасстояниеОтПредыдущего > 0 Тогда
				стрЛегенда.Расстояние = стрЛегенда.Расстояние + УчастокТрека.РасстояниеОтПредыдущего;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого стрЛегенда Из тзЛегенда Цикл
			стрЛегенда.ВремяДвижения = '00010101' + стрЛегенда.Длительность;
			
			СтрокаЛегенды.Параметры.Заполнить(стрЛегенда);
			ТабличныйДокумент.Вывести(СтрокаЛегенды);
		КонецЦикла;
	КонецЦикла;
		
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ТабличныйДокумент.Вывести(Подвал);
	
	// Зададим параметры макета
	ТабличныйДокумент.ПолеСверху              = 0;
	ТабличныйДокумент.ПолеСлева               = 0;
	ТабличныйДокумент.ПолеСнизу               = 0;
	ТабличныйДокумент.ПолеСправа              = 0;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.АвтоМасштаб             = Истина;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ТолькоПросмотр      	  = Истина;
	ТабличныйДокумент.ИмяПараметровПечати 	  = "ПараметрыПечатиЛегендыМаршрутаРейсаНаКарте";
	
	Возврат Истина;
КонецФункции

СвойстваПечатнойФормы = Новый Структура("Представление", "Легенда маршрута на карте");