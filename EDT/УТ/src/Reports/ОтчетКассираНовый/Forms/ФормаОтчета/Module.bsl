
&НаСервере
Функция СоздатьСписок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегиональныеТерминалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Список = новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Список.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
	Возврат Список;
КонецФункции


&НаСервере
Процедура ВыгрузитьДанныеПоВыручкеВБухгалтериюНаСервере()
	
	Если Элементы.Результат.ОтображениеСостояния.Текст = "Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета." Тогда
		Возврат;
	КонецЕсли;	
	
	ПериодОтчета = Неопределено;
	
	Для Каждого ЭлементНастроек ИЗ Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если СокрЛП(ЭлементНастроек.Параметр) = "Период" Тогда
				ПериодОтчета = ЭлементНастроек.Значение;
			ИначеЕсли СокрЛП(ЭлементНастроек.Параметр) = "ИнтернетМагазин" Тогда
				
				Если Не ЭлементНастроек.Использование ИЛИ Не ЗначениеЗаполнено(ЭлементНастроек.Значение)Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выгружать данные без указания интернет-магазина");
					Возврат;
				КонецЕсли;					
				
				Если  ТипЗнч(ЭлементНастроек.Значение) = Тип("СписокЗначений") Тогда
					Если ЭлементНастроек.Значение.Количество() > 1 Тогда
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя указывать более одного интернет-магазина для выгрузки");
						Возврат;
						
					КонецЕсли;
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Если ПериодОтчета = Неопределено тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка определения периода выгрузки.");
		Возврат;
	КонецЕсли;	
	
	Если НачалоДня(ПериодОтчета.ДатаНачала)  <> НачалоДня(ПериодОтчета.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузку можно проводить только за 1 день!");
		Возврат;
	Конецесли;	
	
	ТаблицаЗаказоПоТипамОплат = Новый ТаблицаЗначений;
	ТаблицаЗаказоПоТипамОплат.Колонки.Добавить("Партнер",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаЗаказоПоТипамОплат.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗаказоПоТипамОплат.Колонки.Добавить("Спецсчет",Новый ОписаниеТипов("Булево"));
	ТаблицаЗаказоПоТипамОплат.Колонки.Добавить("Заказ",Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	ТаблицаЗаказоПоТипамОплат.Колонки.Добавить("СуммаНаличные",Новый ОписаниеТипов("Число"));
	ТаблицаЗаказоПоТипамОплат.Колонки.Добавить("СуммаТерминал",Новый ОписаниеТипов("Число"));
	
	ДанныеРасшифровкиВОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Для Адрес = 1 По Результат.ВысотаТаблицы Цикл
		
		РасшифровкаЗаказа = Результат.Область(Адрес,1,Адрес,1).Расшифровка;
		
		Если РасшифровкаЗаказа = Неопределено Тогда Продолжить КонецЕсли;
		
		ПолеЗаказ = ДанныеРасшифровкиВОтчета.Элементы[РасшифровкаЗаказа].ПолучитьПоля().Найти("Заказ");
		Если Не ПолеЗаказ = Неопределено Тогда
			ОплатаНал = 0;
			ОплатаПластик = 0;
			
			РасшифровкаНал = Результат.Область(Адрес,3,Адрес,3).Расшифровка;
			ПолеНал = ДанныеРасшифровкиВОтчета.Элементы[РасшифровкаНал].ПолучитьПоля().Найти("Наличные");
			ОплатаНал = ПолеНал.Значение;
			
			РасшифровкаБезНал = Результат.Область(Адрес,4,Адрес,4).Расшифровка;
			ПолеБезНал = ДанныеРасшифровкиВОтчета.Элементы[РасшифровкаБезНал].ПолучитьПоля().Найти("БезНаличные");
			ОплатаПластик = ПолеБезНал.Значение;
			
			Если ЗначениеЗаполнено(ОплатаНал) ИЛИ ЗначениеЗаполнено(ОплатаПластик) Тогда
				
				НоваяСтрока = ТаблицаЗаказоПоТипамОплат.Добавить();			
				НоваяСтрока.Заказ = ПолеЗаказ.Значение;
				
				
				Если СокрЛП(НоваяСтрока.Заказ.ВладелецТовара.ИНН) = "" Тогда
					НоваяСтрока.Партнер = НоваяСтрока.Заказ.ВладелецТовара.Родитель.ОсновнойМагазин;// = Справочники.Контрагенты.ПустаяСсылка()
					//ИЛИ НоваяСтрока.Заказ.ВладелецТовара.ОсновнойМагазин = NUll,
					//НоваяСтрока.Заказ.ВладелецТовара,
					//НоваяСтрока.Заказ.ВладелецТовара.ОсновнойМагазин);
				Иначе
					НоваяСтрока.Партнер = НоваяСтрока.Заказ.ВладелецТовара;
				КонецЕсли;
				
				//НоваяСтрока.Партнер = ?(НоваяСтрока.Заказ.ВладелецТовара.ОсновнойМагазин = Справочники.Контрагенты.ПустаяСсылка()
				//ИЛИ НоваяСтрока.Заказ.ВладелецТовара.ОсновнойМагазин = NUll,
				//НоваяСтрока.Заказ.ВладелецТовара,
				//НоваяСтрока.Заказ.ВладелецТовара.ОсновнойМагазин);
				
				НоваяСтрока.Организация = НоваяСтрока.Партнер.ОсновнойДоговорКонтрагента.Организация;
				
				//ТЕСТ
				НоваяСтрока.Спецсчет = СпецСчетКонтрагента(НоваяСтрока.Партнер, ТекущаяДата()); //ПериодОтчета.ДатаОкончания
				
				//НоваяСтрока.Спецсчет = РегистрыСведений.ПараметрыКонтрагентов.Получить(ПериодОтчета.ДатаОкончания, Новый Структура("Контрагент", НоваяСтрока.Партнер)).Спецсчет;
				
				НоваяСтрока.СуммаНаличные = ОплатаНал;
				НоваяСтрока.СуммаТерминал = ОплатаПластик;
				
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаОрганизаций = ТаблицаЗаказоПоТипамОплат.Скопировать();
	ТаблицаОрганизаций.Свернуть("Организация");
	ТаблицаОрганизаций.Колонки.Добавить("ПланВыгрузки", Новый Описаниетипов("СправочникСсылка.ПланыВыгрузкиДанныхВБухгалтерию"));
	ТаблицаОрганизаций.Колонки.Добавить("ПланВыгрузкиСпецСчет", Новый Описаниетипов("СправочникСсылка.ПланыВыгрузкиДанныхВБухгалтерию"));
	
	Для Каждого СтрокаОрганизация Из ТаблицаОрганизаций Цикл
		
		СтрокаОрганизация.ПланВыгрузки = ОпределитьПланВыгрузки(СтрокаОрганизация.Организация, Ложь, ПериодОтчета);
		СтрокаОрганизация.ПланВыгрузкиСпецСчет = ОпределитьПланВыгрузки(СтрокаОрганизация.Организация, Истина, ПериодОтчета);
		
	КонецЦикла;	
	
	ТаблицаОплат = ТаблицаЗаказоПоТипамОплат.Скопировать();
	ТаблицаОплат.Свернуть("Организация, Партнер, Спецсчет", "СуммаНаличные,СуммаТерминал");
	ТаблицаОплат.Колонки.Добавить("ПланВыгрузки", Новый ОписаниеТипов("СправочникСсылка.ПланыВыгрузкиДанныхВБухгалтерию"));
	ТаблицаОплат.Колонки.Добавить("ТерминалДоставки", Новый ОписаниеТипов("СправочникСсылка.РегиональныеТерминалы"));
	ТаблицаОплат.Колонки.Добавить("ИсточникДанных", Новый Описаниетипов("СправочникСсылка.ИсточникиДанныхБазы1С"));
	
	ТерминалДоставки = ОпределитьТерминалДоставки();
	
	ЕстьДанныеВыгрузки = Ложь;
	
	Для Каждого СтрокаВыгрузки Из ТаблицаОплат Цикл
		ПараметрыОрганизации = Новый Структура("Организация", СтрокаВыгрузки.Организация);
		ПланыПоОрганизации = ТаблицаОрганизаций.НайтиСтроки(ПараметрыОрганизации);
		
		Если ПланыПоОрганизации.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для " + Строка(СтрокаВыгрузки.Организация) + "нет плана выгрузки");
			Продолжить;
		КонецЕсли;
		НайденныйПланВыгрузки = ?(СтрокаВыгрузки.Спецсчет, ПланыПоОрганизации[0].ПланВыгрузкиСпецСчет, ПланыПоОрганизации[0].ПланВыгрузки); 
		
		Если Не ЗначениеЗаполнено(НайденныйПланВыгрузки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Для " + Строка(СтрокаВыгрузки.Партнер) + " нет плана выгрузки" +
			?(СтрокаВыгрузки.Спецсчет, " по (спецсчету)",""));
			Продолжить;
			
		КонецЕсли;	
		
		ЕстьДанныеВыгрузки = Истина;
		
		СтрокаВыгрузки.ПланВыгрузки = НайденныйПланВыгрузки;
		СтрокаВыгрузки.ТерминалДоставки = ТерминалДоставки;
		СтрокаВыгрузки.ИсточникДанных = СтрокаВыгрузки.ПланВыгрузки.ИсточникДанных;  
		//Вот здесь можно выгружать, есть План, Организация, Партнер, можно из ТаблицаЗаказоПоТипамОплат заказы взять.
		
	КонецЦикла;	
	
	Если  ЕстьДанныеВыгрузки Тогда
		
		ОшибкиВыгрузки = "";
		
		ВыгрузкаВБухгалтериюСервер.ВыгрузитьДокументы(ТаблицаОплат, КонецДня(ПериодОтчета.ДатаОкончания), ОшибкиВыгрузки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Выгрузка данных завершена. " + ОшибкиВыгрузки);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Нет данных для выгрузки!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТерминалДоставки()
	ПараметрОтчета = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТерминалДоставки");
	Если Не ПараметрОтчета = Неопределено Тогда	
		Если  ПараметрОтчета.Использование Тогда
			
			Если ТипЗнч(ПараметрОтчета.Значение) = Тип("СправочникСсылка.РегиональныеТерминалы") Тогда
				Возврат ПараметрОтчета.Значение;
			Иначе
				ЕстьМск = ?(ПараметрОтчета.Значение.НайтиПоЗначению(Справочники.РегиональныеТерминалы.МоскваСтриж)=Неопределено, Ложь,Истина);
				ЕстьСПб = ?(ПараметрОтчета.Значение.НайтиПоЗначению(Справочники.РегиональныеТерминалы.СПбСтриж)=Неопределено, Ложь,Истина);
				
				Если ЕстьМск И ЕстьСПб Тогда
					Возврат Справочники.РегиональныеТерминалы.ПустаяСсылка();
				Иначе
					Если ЕстьМск Тогда
						Возврат Справочники.РегиональныеТерминалы.МоскваСтриж;
					Иначе
						Возврат Справочники.РегиональныеТерминалы.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
		Иначе
			Возврат Справочники.РегиональныеТерминалы.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат Справочники.РегиональныеТерминалы.ПустаяСсылка();
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция СпецСчетКонтрагента(Контрагент, ДатаВыборки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыКонтрагентовСрезПоследних.Спецсчет КАК Спецсчет
	|ИЗ
	|	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ПараметрыКонтрагентовСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаВыборки);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Спецсчет;
	КонецЕсли;
	
	Возврат Ложь;
	
Конецфункции

&НаСервере
Функция ОпределитьПланВыгрузки(Организация, СпецСчетПартнера, ПериодОтчета)
	
	ПланВыгрузки = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыВыгрузкиДанныхВБухгалтерию.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПланыВыгрузкиДанныхВБухгалтерию КАК ПланыВыгрузкиДанныхВБухгалтерию
	|ГДЕ
	|	ПланыВыгрузкиДанныхВБухгалтерию.Организация = &Организация
	|	И ПланыВыгрузкиДанныхВБухгалтерию.Спецсчет = &Спецсчет
	|	И ПланыВыгрузкиДанныхВБухгалтерию.Ссылка.ПланАктивен";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Спецсчет", СпецСчетПартнера);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		
		Возврат РезультатЗапроса[0].Ссылка;
		
	Конецесли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанныеПоВыручкеВБухгалтерию(Команда)
	
	Состояние("Выполняется обработка данных...");
	ВыгрузитьДанныеПоВыручкеВБухгалтериюНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(Настройки)
	Если РольДоступна("ПросмотрКассы") Тогда
		Список = новый СписокЗначений;
		Список.Добавить(ПараметрыСеанса.ТерминалДоставки);
		Если ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.ПустаяСсылка() Тогда
			Список = СоздатьСписок();	
		ИначеЕсли ПараметрыСеанса.ТерминалДоставки = Справочники.РегиональныеТерминалы.МоскваСтриж Тогда
			Список.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Список = СоздатьСписок();
	КонецЕсли;
	Настройки.ПараметрыДанных.Элементы.Найти("ТерминалДоставки").Значение = Список;
КонецПроцедуры


