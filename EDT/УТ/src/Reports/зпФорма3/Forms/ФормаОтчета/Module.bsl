
&НаКлиенте
Процедура РейсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Отчет.Регион.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ТерминалДоставки", Отчет.Регион);
	Если Не Отчет.ФизЛицо.Пустая() Тогда
		ПараметрыОтбора.Вставить("ФизЛицо", Отчет.ФизЛицо);
	КонецЕсли;
	Если Не Отчет.Рейс.Пустая() Тогда
		ПараметрыОтбора.Вставить("Ссылка", Отчет.Рейс);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе,ПараметрыОтбора", Истина, Истина, ПараметрыОтбора);
	
	ОткрытьФорму("Документ.Рейс.Форма.зпВыборРейса", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВыборРейса(Знач Рейс, Знач ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних
	|ГДЕ
	|	&ФизЛицо В (ПривязкаМашинКРейсамСрезПоследних.Водитель.ФизЛицо, ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ФизЛицо)";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФизЛицРейса(Знач Рейс)
	
	МассивФизЛиц = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаМашинКРейсамСрезПоследних.Водитель.ФизЛицо КАК ВодительФизЛицо,
	|	ПривязкаМашинКРейсамСрезПоследних.Экспедитор.ФизЛицо КАК ЭкспедиторФизЛицо
	|ИЗ
	|	РегистрСведений.ПривязкаМашинКРейсам.СрезПоследних(, Рейс = &Рейс) КАК ПривязкаМашинКРейсамСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВодительФизЛицо <> Null Тогда
			МассивФизЛиц.Добавить(Выборка.ВодительФизЛицо);
		КонецЕсли;
		Если Выборка.ЭкспедиторФизЛицо <> Null Тогда
			МассивФизЛиц.Добавить(Выборка.ЭкспедиторФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивФизЛиц;
	
КонецФункции

&НаСервере
Процедура РейсПриИзмененииНаСервере()

	Если Не Отчет.ФизЛицо.Пустая() Тогда
		Если Не ПроверитьВыборРейса(Отчет.Рейс, Отчет.ФизЛицо) Тогда
			Отчет.Рейс = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Отчет.Рейс.Пустая() Тогда
		Элементы.ФизЛицо.РежимВыбораИзСписка = Ложь;
	Иначе
		Элементы.ФизЛицо.РежимВыбораИзСписка = Истина;
		Элементы.ФизЛицо.СписокВыбора.ЗагрузитьЗначения(ПолучитьФизЛицРейса(Отчет.Рейс));
		Если Отчет.ФизЛицо.Пустая() И Элементы.ФизЛицо.СписокВыбора.Количество() Тогда
			Отчет.ФизЛицо = Элементы.ФизЛицо.СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьНастройкиОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура РейсПриИзменении(Элемент)
	РейсПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиОтчета()
	
	УстановитьРегион = Не Отчет.Регион.Пустая();
	УстановитьРейс = Не Отчет.Рейс.Пустая();
	УстановитьФизЛицо = Не Отчет.ФизЛицо.Пустая();
	Если УстановитьРегион Или УстановитьРейс Или УстановитьФизЛицо Тогда
		
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		ЭлементыПараметров = Настройки.ПараметрыДанных.Элементы;
		
		Если УстановитьРегион Тогда
			ТекПараметр = ЭлементыПараметров.Найти("Регион");
			ТекПараметр.Значение = Отчет.Регион;
			ТекПараметр.Использование = Истина;
		КонецЕсли;
		
		Если УстановитьРейс Тогда
			ТекПараметр = ЭлементыПараметров.Найти("Рейс");
			ТекПараметр.Значение = Отчет.Рейс;
			ТекПараметр.Использование = Истина;
		КонецЕсли;
		
		Если УстановитьФизЛицо Тогда
			ТекПараметр = ЭлементыПараметров.Найти("ФизЛицо");
			ТекПараметр.Значение = Отчет.ФизЛицо;
			ТекПараметр.Использование = Истина;
		КонецЕсли;
		
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Регион", Отчет.Регион);
	Параметры.Свойство("Рейс", Отчет.Рейс);
	Параметры.Свойство("ФизЛицо", Отчет.ФизЛицо);
	
	Если Отчет.Регион.Пустая() Тогда
		Отчет.Регион = ПараметрыСеанса.ТерминалДоставки;
	КонецЕсли;
	
	РейсПриИзмененииНаСервере();
	
	СформироватьПриОткрытииВручную = Неопределено;
	Если Параметры.Свойство("СформироватьПриОткрытииВручную", СформироватьПриОткрытииВручную) И СформироватьПриОткрытииВручную = Истина Тогда
		СтандартнаяОбработка = Ложь;
		СкомпоноватьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРасшифровкиРекурсивно(Данные, Расшифровка, СтруктураДанных)
	ЭлементРасшифровка = Данные.Элементы.Получить(Расшифровка);
	Если ЭлементРасшифровка <> Неопределено Тогда
		ТипЭлемента = ТипЗнч(ЭлементРасшифровка);
		Если ТипЭлемента = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Поля = ЭлементРасшифровка.ПолучитьПоля();
			Для Каждого ЭлементПоле Из Поля Цикл
				СтруктураДанных.Вставить(СтрЗаменить(ЭлементПоле.Поле, ".", ""), ЭлементПоле.Значение);
			КонецЦикла;
			Родители = ЭлементРасшифровка.ПолучитьРодителей();
			Для Каждого ЭлементРодитель Из Родители Цикл
				ПолучитьДанныеРасшифровкиРекурсивно(Данные, ЭлементРодитель.Идентификатор, СтруктураДанных);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Родители = ЭлементРасшифровка.ПолучитьРодителей();
			Для Каждого ЭлементРодитель Из Родители Цикл
				ПолучитьДанныеРасшифровкиРекурсивно(Данные, ЭлементРодитель.Идентификатор, СтруктураДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция РезультатОбработкаРасшифровкиНаСервере();
	
	НомерСтрокиТабДок = Элементы.Результат.ТекущаяОбласть.Верх;
	
    ДанныеРасшифр = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	СтруктураДанных = Новый Структура;
	
	Расшифровка = Результат.Область(НомерСтрокиТабДок, 1).Расшифровка;
	ПолучитьДанныеРасшифровкиРекурсивно(ДанныеРасшифр, Расшифровка, СтруктураДанных);
	
	Для Сч = 1 По Результат.ШиринаТаблицы Цикл
		ЭлементРасшифровки = Результат.Область(НомерСтрокиТабДок, Сч).Расшифровка;
		Если ЭлементРасшифровки <> Неопределено Тогда
			Поля = ДанныеРасшифр.Элементы[ЭлементРасшифровки].ПолучитьПоля();
			Для Каждого ЭлементПоле Из Поля Цикл
				СтруктураДанных.Вставить(СтрЗаменить(ЭлементПоле.Поле, ".", ""), ЭлементПоле.Значение);
			КонецЦикла
		КонецЕсли;
	КонецЦикла;
	
	//Для Каждого КлючЗначение Из СтруктураДанных Цикл
	//	Сообщить(КлючЗначение.Ключ + " " + КлючЗначение.Значение);
	//КонецЦикла;	
	
	Если Не (СтруктураДанных.Свойство("Рейс") И СтруктураДанных.Свойство("Заказ")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураДанных.Свойство("Выполнение") Или Не СтруктураДанных.Выполнение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", СтруктураДанных.Рейс);
	Запрос.УстановитьПараметр("Заказ", СтруктураДанных.Заказ);
	//Запрос.Текст =
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	зпИсходныеДанныеРасчетаЗППоЗаказам.Регистратор КАК Регистратор
	//|ИЗ
	//|	РегистрСведений.зпИсходныеДанныеРасчетаЗППоЗаказам КАК зпИсходныеДанныеРасчетаЗППоЗаказам
	//|ГДЕ
	//|	зпИсходныеДанныеРасчетаЗППоЗаказам.Регистратор ССЫЛКА Документ.зпКорректировкаИсходныхДанных
	//|	И зпИсходныеДанныеРасчетаЗППоЗаказам.Рейс = &Рейс
	//|	И зпИсходныеДанныеРасчетаЗППоЗаказам.Заказ = &Заказ";
	Запрос.Текст =
	"ВЫБРАТЬ
	|	зпКорректировкаИсходныхДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.зпКорректировкаИсходныхДанных КАК зпКорректировкаИсходныхДанных
	|ГДЕ
	|	зпКорректировкаИсходныхДанных.Заказ = &Заказ
	|	И зпКорректировкаИсходныхДанных.Рейс = &Рейс
	|	И НЕ зпКорректировкаИсходныхДанных.ПометкаУдаления
	|	И зпКорректировкаИсходныхДанных.СпособВнесенияДокумента = ЗНАЧЕНИЕ(Перечисление.зпСпособыВнесенияДокументаКорректировкиЗП.ОтчетФорма3)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Вставить("ДокументКорректировки", Выборка.Ссылка);
	Иначе
		СтруктураДанных.Вставить("СпособВнесенияДокумента", Перечисления.зпСпособыВнесенияДокументаКорректировкиЗП.ОтчетФорма3);
	КонецЕсли;
	
	СтруктураДанных.Вставить("ФизЛицо", Отчет.ФизЛицо);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
    СтруктураДанных = РезультатОбработкаРасшифровкиНаСервере();	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДокументКорректировки") Тогда
		ПараметрыФормы = Новый Структура("Ключ", СтруктураДанных.ДокументКорректировки);
	Иначе
		ПараметрыФормы = Новый Структура("Основание", СтруктураДанных);
	КонецЕсли;
	ОткрытьФорму("Документ.зпКорректировкаИсходныхДанных.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	СкомпоноватьРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура РегионПриИзменении(Элемент)
	
	УстановитьНастройкиОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	УстановитьНастройкиОтчета();
	
КонецПроцедуры
