Перем ТипЧисло;
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета
Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю
Перем БазаПодключения		Экспорт;
Перем ДеревоВыбранныхМетаданных Экспорт;
//не я
Процедура ЗаполнитьДерево(Дерево) Экспорт
	
	Если Дерево.Строки.Количество()<>0 Тогда  //Значит дерево восстановло из сохраненной настройки
		Возврат;
	КонецЕсли;
	
	СписокМетаданных = Новый СписокЗначений;
	СписокМетаданных.Добавить("Справочники"			,"Справочники"			,,БиблиотекаКартинок.Справочник);
	СписокМетаданных.Добавить("Документы"			,"Документы"			,,БиблиотекаКартинок.ДокументОбъект);
	СписокМетаданных.Добавить("РегистрыСведений"	,"Регистры сведений"	,,БиблиотекаКартинок.РегистрСведений);
	СписокМетаданных.Добавить("РегистрыНакопления"	,"Регистры накопления"	,,БиблиотекаКартинок.РегистрНакопления);
	СписокМетаданных.Добавить("РегистрыБухгалтерии"	,"Регистры бухгалтерии"	,,БиблиотекаКартинок.РегистрБухгалтерии);
	СписокМетаданных.Добавить("РегистрыРасчета"		,"Регистры расчета"		,,БиблиотекаКартинок.РегистрРасчета);
		                                  
	Для каждого ТипМетаданного Из СписокМетаданных Цикл
		Стр = Дерево.Строки.Добавить();
		Стр.Имя 			= ТипМетаданного.Значение;
		Стр.Представление 	= ТипМетаданного.Представление;
		Стр.Картинка 		= ТипМетаданного.Картинка;	
		
		ЗаполнитьДеревоПоМетаданным(Стр);
		УстановитьПометкуГруппы(Стр);
	КонецЦикла;		
					
КонецПроцедуры	

Процедура УстановитьПометкуГруппы(Стр) Экспорт
	Если Стр.Строки.Итог("Пометка") = 0 Тогда
		Стр.Пометка = 0;
	ИначеЕсли Стр.Строки.Итог("Пометка") = Стр.Строки.Количество() Тогда
		Стр.Пометка = 1;
	Иначе
		Стр.Пометка = 2;
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаполнитьДеревоПоМетаданным(Стр)
	
	Если СтатистикаПоЭтойИнформационнойБазе Тогда
		КоллекцияМетаданных = Метаданные[Стр.Имя];
	Иначе
		КоллекцияМетаданных = БазаПодключения.Метаданные[Стр.Имя];
	КонецЕсли;
	
	Для Каждого мОбъект ИЗ КоллекцияМетаданных Цикл
		НоваяСтр = Стр.Строки.Добавить();
		НоваяСтр.Имя = Стр.Имя + "." + мОбъект.Имя;
		НоваяСтр.Представление = мОбъект.Представление();
		
		Если ВыбранныеМетаданные.НайтиПоЗначению(НоваяСтр.Имя) <> Неопределено Тогда
			НоваяСтр.Пометка = 1;
		КонецЕсли;	
		НоваяСтр.Картинка = Стр.Картинка;
	КонецЦикла;	
КонецПроцедуры	

Процедура ДобавитьВыбранныеВСписок(Строки) Экспорт
	Для Каждого Стр ИЗ Строки Цикл
		Если Стр.Пометка <> 0 Тогда
			ВыбранныеМетаданные.Добавить(Стр.Имя);
			ДобавитьВыбранныеВСписок(Стр.Строки);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция СтрокВТЧ(мОбъект, Запрос) Экспорт
	Колво = 0;
	Для Каждого мТЧ ИЗ мОбъект.ТабличныеЧасти Цикл
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ " + мОбъект.ПолноеИмя() + "." + мТЧ.Имя;
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Колво = Колво + выборка.Поле1;
	КонецЦикла;	
	
	Возврат Колво;
КонецФункции

Процедура ПодключитьБазу() Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяПользователя1С) Тогда
		Сообщить("Не заполнено имя пользователя!");
		Возврат;
	КонецЕсли;
	
	Если ТипБазыСерверная Тогда
		НадоПрерывать = Истина;
		Если Не ЗначениеЗаполнено(Кластер1С) Тогда
			Сообщить("Не заполнено имя сервера!");
		ИначеЕсли Не ЗначениеЗаполнено(ИмяИнформационнойБазы) Тогда
			Сообщить("Не заполнено имя информ. базы!");
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ПутьКФайловойБазе) Тогда
			Сообщить("Не заполнен путь к файловой базе!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Состояние("Подключение к базе...");
	Попытка
		Если ТипБазыСерверная Тогда
			СтрокаПодключения = "Srvr=""" + Кластер1С + """; Ref=""" + ИмяИнформационнойБазы + """;";
		Иначе
			СтрокаПодключения = "File=""" + ПутьКФайловойБазе + """;";
		КонецЕсли;
		
		СтрокаПодключения = СтрокаПодключения + "Usr=""" + ИмяПользователя1С + """;" +
							"Pwd=""" + Пароль1С + """;";
		Com = Новый COMОбъект("V8" + ВерсияПлатформы1С + ".COMConnector");
		БазаПодключения = Com.Connect(СтрокаПодключения);
		Состояние("Подключено");
	Исключение
		БазаПодключения = Неопределено;
		Сообщить("Подключить базу не удалось, не верен или логин, пароль, путь, или база недоступна", СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

//я
Процедура ПрорисоватьВариантРазделениеПоТипамМетаданныхПодробное(Дерево) Экспорт
	Если ВариантНастройкиСКД = "SQLРазделениеПоТипамМетаданныхПодробное"
		или ВариантНастройкиСКД = "ФайловаяРазделениеПоТипамМетаданныхПодробное"
		или ВариантНастройкиСКД = "SQLРазделениеПоТипамМетаданныхКраткое" Тогда
		//Выводить пустые группировки не нужно. То есть если выбраны документы и справочники, то выводить только их, пустые шапки других не нужно.
		Для каждого Группировка Из КомпоновщикНастроек.Настройки.Структура Цикл
			
			Если Группировка.Имя = "Шапка" Тогда Продолжить; КонецЕсли;
			НайденнаяСтрока = Дерево.Строки.Найти(Группировка.Имя,"Представление");
			Если НайденнаяСтрока.Пометка=0 Тогда
				Группировка.Использование=Ложь;
			Иначе
				Группировка.Использование=Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура  ИнициализироватьТаблицуДанных(ТаблицаДанных) Экспорт
	
	ТаблицаДанных.Колонки.Добавить("ТипМетаданных");
	ТаблицаДанных.Колонки.Добавить("ПредставлениеТаблицы");
	ТаблицаДанных.Колонки.Добавить("РазмерТаблицы",ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("РазмерИндекса", ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("Колво", ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("КолвоГрупп", ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("КолвоПомеченных", ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("КолвоСтрокВТЧ", ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("КолвоПроведенных", ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("СтрокВТЧНа1Документ", ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("КолвоИтогов", ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("Подтаблица");
	ТаблицаДанных.Колонки.Добавить("мОбъект");
	
КонецПроцедуры

Процедура УдалитьПустыеСтроки(Таблица, КолонкаПроверки) Экспорт
	ПослСтрока = Таблица.Количество()-1;
	Для Сч = -ПослСтрока По 0 Цикл
		АнализируемаяСтр = Таблица[-Сч];
		Если АнализируемаяСтр[КолонкаПроверки] = 0 Тогда
			Таблица.Удалить(АнализируемаяСтр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаботаСФлажками(Дерево,НоваяПометка, УдаляемаяПометка) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Пометка",УдаляемаяПометка);
	
	МассивНайденныхСтрок = Дерево.Строки.НайтиСтроки(ПараметрыОтбора,Истина);
	Для каждого Элемент Из МассивНайденныхСтрок Цикл
		Элемент.Пометка = НоваяПометка;
	КонецЦикла;	
	
КонецПроцедуры

//////////////////////////////////// СКД ///////////////////////////////////////
Процедура ОбрУправлениеОтображениемПанелиПользователя(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Кнопка = ЭлементыФормы.КоманднаяПанельРезультат.Кнопки.ПанельПользователя;
	
	ЕстьРазделитель = ЭлементыФормы.Найти("Разделитель") <> Неопределено;
	
	Если ЕстьРазделитель тогда
		
		Если Кнопка = Неопределено или Не Кнопка.Пометка тогда
			ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователя, ГраницаЭлементаУправления.Лево);
			ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
			ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Право;
		Иначе
			ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
			ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Нет;
			ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
			Если ШиринаПанели/ФормаОтчета.Ширина > 0.5 тогда
				ШиринаПанели = Окр(ФормаОтчета.Ширина*0.3);
				ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
				ЭлементыФормы.ПанельПользователя.Лево = ФормаОтчета.Ширина - ШиринаПанели -6;
			КонецЕсли;
			ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельГлавная, ГраницаЭлементаУправления.Право);
			ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Право);
			ЭлементыФормы.Разделитель.Лево            = ФормаОтчета.Ширина - ШиринаПанели - 7 - 8; // 330 - 323   513
			ЭлементыФормы.Результат.Ширина            = ФормаОтчета.Ширина - 16 - 7 - ШиринаПанели;
			//вычислим ширнину панели если 
			
		КонецЕсли;
	Иначе	
		Если Не Кнопка.Пометка тогда
			ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		Иначе
			ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
			ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
			Если ШиринаПанели/ФормаОтчета.Ширина > 0.5 тогда
				ШиринаПанели = Окр(ФормаОтчета.Ширина*0.3);
				ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
				ЭлементыФормы.ПанельПользователя.Лево = ФормаОтчета.Ширина - ШиринаПанели -6;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	
	Попытка
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	СписокДоступныхНастроек = Неопределено;
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("СписокДоступныхПредопределенныхНастроек") тогда
		СписокДоступныхНастроек = ПараметрыИсполненияОтчета.СписокДоступныхПредопределенныхНастроек;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Возврат ПолучитьИдентификаторОбъектаПереопределяемая(ОтчетОбъект);
	
КонецФункции

Функция ПолучитьИдентификаторОбъектаПереопределяемая(ОтчетОбъект) Экспорт
	
	Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

Процедура УправлениеОтображениемПанелиПользователя(ФормаОтчета) Экспорт 
	
	//ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	//Кнопка = ЭлементыФормы.КоманднаяПанельРезультат.Кнопки.ПанельПользователя;
	//
	//ЕстьРазделитель = ЭлементыФормы.Найти("Разделитель") <> Неопределено;
	//
	//Если ЕстьРазделитель тогда
	//	
	//	Если Кнопка = Неопределено или Не Кнопка.Пометка тогда
	//		ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
	//		ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователя, ГраницаЭлементаУправления.Лево);
	//		ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
	//		ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Право;
	//	Иначе
	//		ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
	//		ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Нет;
	//		ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
	//		Если ШиринаПанели/ФормаОтчета.Ширина > 0.5 тогда
	//			ШиринаПанели = Окр(ФормаОтчета.Ширина*0.3);
	//			ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
	//			ЭлементыФормы.ПанельПользователя.Лево = ФормаОтчета.Ширина - ШиринаПанели -6;
	//		КонецЕсли;
	//		ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельВыбораВариантов, ГраницаЭлементаУправления.Право);
	//		ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Право);
	//		ЭлементыФормы.Разделитель.Лево            = ФормаОтчета.Ширина - ШиринаПанели - 7 - 8; // 330 - 323   513
	//		ЭлементыФормы.Результат.Ширина            = ФормаОтчета.Ширина - 16 - 7 - ШиринаПанели;
	//		//вычислим ширнину панели если 
	//		
	//	КонецЕсли;
	//Иначе	
	//	Если Не Кнопка.Пометка тогда
	//		ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
	//	Иначе
	//		ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
	//		ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
	//		Если ШиринаПанели/ФормаОтчета.Ширина > 0.5 тогда
	//			ШиринаПанели = Окр(ФормаОтчета.Ширина*0.3);
	//			ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
	//			ЭлементыФормы.ПанельПользователя.Лево = ФормаОтчета.Ширина - ШиринаПанели -6;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Процедура ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек = Неопределено, ПереноситьПараметры = истина) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	Попытка
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	ЕстьЭлементыНаПанели = ложь;
	
	ЦветФонаКнопки = Новый Цвет(246, 244, 236);
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	ЭлементыФормы.ПанельЗакладок.Видимость = Ложь;
	ЭлементыФормы.ПанельЗакладок.Видимость = Ложь;
	
	
	Если ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено тогда
		ЭлементыФормы.ПанельПользователяГоризонтальная.Видимость = ложь;
	КонецЕсли;
	
	ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Ложь;
	ШиринаФормы = ФормаОтчета.Ширина;
	ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
	ЕстьРазделитель = ЭлементыФормы.Найти("Разделитель") <> Неопределено;
	Если ЕстьРазделитель тогда
		Если ШиринаПанели < 306 тогда
			ЭлементыФормы.Разделитель.Лево = ШиринаФормы - 295;
		КонецЕсли;
	КонецЕсли;
	
	
	// Инициализация ЗначенияНастроек
	//Если ЗначенияНастроек = Неопределено Тогда //Турчинский убрал
	//	ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	//КонецЕсли;
	Если ЗначенияНастроек = Неопределено Тогда
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект);
	КонецЕсли;
	
	// Инициализация Параметры
	Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	Если Параметры = Неопределено Тогда
		Параметры = ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета);
		СохраненнаяМодифицированность = ФормаОтчета.Модифицированность;
		ОтчетОбъект.ПараметрыПанелиПользователя = Новый ХранилищеЗначения(Параметры);
		ФормаОтчета.Модифицированность = СохраненнаяМодифицированность;
	КонецЕсли;
	
	
	// Управление видимостью стандартных страниц
	ДеревоНастроекСтандартныхСтраниц = Параметры.ДеревоНастроекСтандартныхСтраниц;
	Для каждого НастройкаСтраницы Из ДеревоНастроекСтандартныхСтраниц.Строки Цикл
		Если НастройкаСтраницы.Имя = "Период" Тогда
			Продолжить;
		КонецЕсли;
		Страница = ЭлементыФормы.ПанельЗакладок.Страницы.Найти(НастройкаСтраницы.Имя);
		Если Страница <> Неопределено тогда
			Страница.Видимость = НастройкаСтраницы.Использование;
			Если Страница.Видимость тогда
				ЕстьЭлементыНаПанели = истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереноситьПараметры тогда
		Для каждого ВидимостьСтраницы Из ЗначенияНастроек.ВидимостьСтраниц Цикл
			Страница = ЭлементыФормы.ПанельЗакладок.Страницы.Найти(ВидимостьСтраницы.Ключ);
			Если Страница = Неопределено ИЛИ ВидимостьСтраницы.Ключ = "Показатели" Тогда
				Продолжить;
			КонецЕсли;
			// Восстанавливаем значение
			ТекущиеНастройкиКомпоновщика = ЗначенияНастроек.НастройкиКомпоновщика;
			
			Если ВидимостьСтраницы.Ключ = "Параметры" Тогда
				ЗаполнитьЭлементы(ФормаОтчета.КомпоновщикНастроекПользователя.Настройки["ПараметрыДанных"], ТекущиеНастройкиКомпоновщика["ПараметрыДанных"]);
			Иначе
				СкопироватьЭлементы(ФормаОтчета.КомпоновщикНастроекПользователя.Настройки[ВидимостьСтраницы.Ключ], ТекущиеНастройкиКомпоновщика[ВидимостьСтраницы.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Турчинский - поставил условия
	ЭлФормы = ФормаОтчета.ЭлементыФормы;
	Если ЭлФормы.Сортировка.Верх<6 Тогда
		ЭлФормы.Сортировка.Верх      = 6;
	КонецЕсли;
	Если ЭлФормы.Отбор.Верх<6 Тогда
		ЭлФормы.Отбор.Верх           = 6;
	КонецЕсли;
	Если ЭлФормы.ПараметрыДанных.Верх<6 Тогда
		ЭлФормы.ПараметрыДанных.Верх = 6;
	КонецЕсли;

	// Установка высоты табличного поля параметры
	Если ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
		КоличествоПараметров = 0;
		Для каждого Параметр Из ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
			Если Параметр.Видимость Тогда
				КоличествоПараметров = КоличествоПараметров + 1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоПараметров = 0 Тогда
			// Спрячем закладку Параметры, если параметров нет
			ЭлементыФормы.ПанельЗакладок.Страницы.Параметры.Видимость = Ложь;
			ЕстьЭлементыНаПанели = истина;
		Иначе
			// Сделаем высоту списка параметров впритык всем параметрам
			ЭлементыФормы.ПараметрыДанных.Высота = 20*КоличествоПараметров;//17 * (1 + КоличествоПараметров);  //Турчинский
		КонецЕсли;
	КонецЕсли;
	
	// Удаление старых закладок с динамическими отборами
	Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
	Для Индекс = 1 По Количество Цикл
		Страница = ЭлементыФормы.ПанельЗакладок.Страницы[Количество - Индекс];
		Если Лев(Страница.Имя, 17) = "ДинамическийОтбор" 
			или Лев(Страница.Имя, 20) = "ДинамическийПараметр" 
			или Лев(Страница.Имя, 23) = "ДинамическаяГруппировка" Тогда
			ЭлементыФормы.ПанельЗакладок.Страницы.Удалить(Количество - Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Надпись = ЭлементыФормы.Найти("НадписьНеЗаполненаПанель");
	Если Надпись <> Неопределено тогда
		ЭлементыФормы.Удалить(Надпись);
	КонецЕсли;
	
	// Удалим старые элементы с динамическими отборами
	Количество = ЭлементыФормы.Количество();
	Для Индекс = 1 По Количество Цикл
		Элемент = ЭлементыФормы[Количество - Индекс];
		Если Лев(Элемент.Имя, 17) = "ДинамическийОтбор" или Лев(Элемент.Имя, 20) = "ДинамическийПараметр" или Лев(Страница.Имя, 23) = "ДинамическаяГруппировка" Тогда
			ЭлементыФормы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ЛевоГорПанели = 0;
	ЕстьПериодНаГорПанели = ложь;
	Если ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") = Неопределено тогда
		НарисоватьСтандартныйПериодНаПравойПанели(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, ПараметрыИсполненияОтчета);
	Иначе
		НарисоватьСтандартныйПериод(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, 	ЛевоГорПанели, ЕстьПериодНаГорПанели);
	КонецЕсли;
	
	Отборы = Параметры.Отборы;
	ЕстьОтборыВГоризонтальнойПанели     = Отборы.Колонки.Найти("Расположение") <> Неопределено И Отборы.НайтиСтроки(Новый Структура("Расположение", "ГоризонтальнаяПанель")).Количество() > 0;
	ЕстьПараметрыНаГоризонтальнойПанели = Параметры.Свойство("Параметры") И Параметры.Параметры.Колонки.Найти("ВыводитьНа") <> Неопределено 
	И Параметры.Параметры.НайтиСтроки(Новый Структура("ВыводитьНа", "ГоризонтальнаяПанель")).Количество() > 0 или ЕстьПериодНаГорПанели;
	
	
	Если ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено тогда
		Если ЕстьОтборыВГоризонтальнойПанели или ЕстьПараметрыНаГоризонтальнойПанели тогда
			ЭлементыФормы.ПанельПользователяГоризонтальная.Свертка = РежимСверткиЭлементаУправления.Нет;
		Иначе
			ЭлементыФормы.ПанельПользователяГоризонтальная.Свертка = РежимСверткиЭлементаУправления.Верх;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийЭлемент = Неопределено;
	Если  ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено тогда
		ШиринаПанели   = ЭлементыФормы.ПанельПользователяГоризонтальная.Ширина - ЛевоГорПанели - 6;
		КолВоЭлементов = 0;
		КолВоЭлементов = КолВоЭлементов + ?(Параметры.Свойство("Параметры")  И Параметры.Параметры.Колонки.Найти("ВыводитьНа") <> Неопределено, Параметры.Параметры.НайтиСтроки(Новый Структура("ВыводитьНа", "ГоризонтальнаяПанель")).Количество()*2, 0) 
		+ ?(Отборы <> Неопределено И Отборы.Колонки.Найти("Расположение") <> Неопределено, Отборы.НайтиСтроки(Новый Структура("Расположение", "ГоризонтальнаяПанель")).Количество() * 2, 0);
		СреднийРазмер  = ?(КолВоЭлементов <> 0, ШиринаПанели/КолВоЭлементов, 0);
	Иначе
		СреднийРазмер  = 0;
	КонецЕсли;
	
	Если ФормаОтчета.ЭлементыФормы.Найти("Отбор") <> Неопределено тогда
		ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;
		Если ФормаОтчета.ЭлементыФормы.Отбор.Ширина <> ШиринаПанели-31 тогда
			ФормаОтчета.ЭлементыФормы.Отбор.Ширина = ШиринаПанели-31;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормаОтчета.ЭлементыФормы.Найти("Сортировка") <> Неопределено тогда
		ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;
		Если ФормаОтчета.ЭлементыФормы.Сортировка.Ширина <> ШиринаПанели-70 тогда
			ФормаОтчета.ЭлементыФормы.Сортировка.Ширина  = ШиринаПанели-70;
			
		КонецЕсли;
	КонецЕсли;
	//нарисуем на панели настройку параметров
	
	Если ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Ширина <> ШиринаПанели-31 тогда   //Турчинский
		ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Ширина = ШиринаПанели-31;
	КонецЕсли;
	//-
	
	Если Параметры.Свойство("Параметры") тогда 
		ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;
		Если ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Ширина <> ШиринаПанели-31 тогда
			ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Ширина = ШиринаПанели-31;
		КонецЕсли;
		ПоследнийЭлемент = ложь;
		Для каждого СтрокаПараметров из Параметры.Параметры Цикл
			ДоступноеПолеПараметра = ПолучитьДоступныйПараметрПоПараметруКомпоновкиДанных(СтрокаПараметров.Параметр, ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры);
			ЗначениеПараметра = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(СтрокаПараметров.Параметр));
			Если ЗначениеПараметра = Неопределено и ДоступноеПолеПараметра = Неопределено тогда
				Продолжить;
			КонецЕсли;
			Если ЗначенияНастроек.Свойство("ДинамическиеПараметры") Тогда
				ЭлементДинамическогоОтбора = ЗначенияНастроек.ДинамическиеПараметры[СтрокаПараметров.Параметр];
			КонецЕсли;
			Если Не ЕстьОтборыВГоризонтальнойПанели тогда
				ПоследнийЭлемент = Параметры.Параметры.Индекс(СтрокаПараметров) = (Параметры.Параметры.Индекс(СтрокаПараметров) - 1);
			КонецЕсли;
			НарисоватьПараметрОтчета(ФормаОтчета, Параметры.Параметры.Индекс(СтрокаПараметров), СтрокаПараметров, ЛевоГорПанели, ЦветФонаКнопки, ЗначениеПараметра, ДоступноеПолеПараметра, ЭлементДинамическогоОтбора, ПараметрыИсполненияОтчета, ПоследнийЭлемент, ПредыдущийЭлемент, СреднийРазмер);
			Если СтрокаПараметров.ВыводитьНа <> "ГоризонтальнаяПанель" и СтрокаПараметров.ВыводитьНа <> "" и СтрокаПараметров.ВыводитьНа <> Неопределено тогда
				ЕстьЭлементыНаПанели = истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("Группировки") тогда
		МассивПомеченныхГруппировок = Новый Соответствие;
		ВсеГруппировки = ПолучитьЭлементыСтруктуры(ОтчетОбъект.КомпоновщикНастроек);
		Для каждого Группировка из ВсеГруппировки Цикл
			Имя = Группировка.Значение.Имя;
			Если Имя <> "" тогда
				МассивГруппировок = МассивПомеченныхГруппировок.Получить(Группировка.Значение.Имя);
				Если МассивГруппировок = Неопределено тогда
					МассивГруппировок = Новый Массив;
				КонецЕсли;
				МассивГруппировок.Добавить(Группировка);
				МассивПомеченныхГруппировок.Вставить(Группировка.Значение.Имя, МассивГруппировок);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаГруппировки из Параметры.Группировки Цикл
			Если НЕ СтрокаГруппировки.Использование тогда
				Продолжить;
			КонецЕсли;
			Если ЗначенияНастроек.Свойство("ДинамическиеГруппировки") Тогда
				ЭлементДинамическойГруппировки = ЗначенияНастроек.ДинамическиеГруппировки[СтрокаГруппировки.Группировка];
			КонецЕсли;
			Группировки = МассивПомеченныхГруппировок.Получить(СтрокаГруппировки.Группировка);
			Индекс = Параметры.Группировки.Индекс(СтрокаГруппировки);
			НарисоватьГруппировкуОтчета(ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойгруппировки, ПараметрыИсполненияОтчета);
			ЕстьЭлементыНаПанели = истина;
		КонецЦикла;
	КонецЕсли;
	
	// Добавим закладки динамических отборов
	ЕстьДополнительнаяСтраница = Ложь;
	
	ВерхДопСтраница = 6;
	ИндексПоследСтроки = -1;
	Для каждого СтрокаОтбора Из Отборы Цикл
		Если СтрокаОтбора.Расположение = "ГоризонтальнаяПанель" тогда
			ИндексПоследСтроки = Отборы.Индекс(СтрокаОтбора);
		КонецЕсли;
	КонецЦикла;
	ЕстьДополнительнаяСтраница = ложь;
	Для каждого СтрокаОтбора Из Отборы Цикл
		
		Индекс = Отборы.Индекс(СтрокаОтбора);
		ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(СтрокаОтбора.Поле, ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
		ЭлементДинамическогоОтбора = Неопределено;
		
		Если ЗначенияНастроек.Свойство("ДинамическиеОтборы") Тогда
			ЭлементДинамическогоОтбора = ЗначенияНастроек.ДинамическиеОтборы[СтрокаОтбора.Поле];
		КонецЕсли;
		
		Если СтрокаОтбора.Расположение <> "ГоризонтальнаяПанель" или ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") = Неопределено тогда
			
			Если СтрокаОтбора.Расположение = "НоваяСтраница" или СтрокаОтбора.Расположение = "ГоризонтальнаяПанель" Тогда
				НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтбор" + Индекс, СтрокаОтбора.Представление, СтрокаОтбора.Поле);
				НоваяСтраница.Раскрыта = Истина;
				Верх = 6;
			ИначеЕсли СтрокаОтбора.Расположение = "ДополнительнаяСтраница" Тогда
				Если Не ЕстьДополнительнаяСтраница Тогда
					ЕстьДополнительнаяСтраница = Истина;
					НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтбор" + "ДополнительнаяСтраница", "Отборы", СтрокаОтбора.Поле);
				КонецЕсли;
				НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы["ДинамическийОтбор" + "ДополнительнаяСтраница"];
				Верх = ВерхДопСтраница;
			Иначе
			КонецЕсли;
			
			ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
			
			Если СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок" Тогда
				НарисоватьДинамическийОтборСписок(ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета);
				ЕстьЭлементыНаПанели = истина;
			ИначеЕсли СтрокаОтбора.ВидОтбора = "Флажок" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение" ИЛИ СтрокаОтбора.ВидОтбора = "Значение" Тогда
				НарисоватьДинамическийОтборФлажокЗначение(ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета);
				ЕстьЭлементыНаПанели = истина;
			КонецЕсли;
			Если ЕстьДополнительнаяСтраница И НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы["ДинамическийОтбор" + "ДополнительнаяСтраница"] Тогда
				ВерхДопСтраница = Верх;
			КонецЕсли;
		Иначе
			НарисоватьДинамическийОтборГоризонтальнойПанели(ФормаОтчета, Индекс, ЛевоГорПанели, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ИндексПоследСтроки = Индекс, СтрокаОтбора.ВидОтбора = "Список", ПараметрыИсполненияОтчета, ПредыдущийЭлемент, СреднийРазмер);
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеНастройкиОтчета = Новый Массив;
	Попытка 
		ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();
	Исключение
	КонецПопытки;
	
	Для каждого ДопНастройка из ДополнительныеНастройкиОтчета Цикл
		Если Не ЕстьДополнительнаяСтраница тогда
			НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтбор" + "ДополнительнаяСтраница", "Дополнительные настройки", "ДиаграммаГанта");
			ЕстьДополнительнаяСтраница = истина;
		КонецЕсли;
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы["ДинамическийОтбор" + "ДополнительнаяСтраница"];
		НарисоватьФлажокДопНастроек(ФормаОтчета, ВерхДопСтраница, ДопНастройка.Имя, ДопНастройка.Заголовок, ДопНастройка.ЗначениеПоУмолчанию);
		ЕстьЭлементыНаПанели = истина;
	КонецЦикла;
	
	//Заполнить таблицу показателей
	
	//Турчинский+
	НайденнаяСтрока = ДеревоВыбранныхМетаданных.Строки.Найти("Справочники","Имя");
	Если НайденнаяСтрока.Пометка=0 Тогда СпрВыбраны = Ложь Иначе СпрВыбраны = Истина КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыбранныхМетаданных.Строки.Найти("Документы","Имя");
	Если НайденнаяСтрока.Пометка=0 Тогда ДокВыбраны = Ложь Иначе ДокВыбраны = Истина КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыбранныхМетаданных.Строки.Найти("РегистрыНакопления","Имя");
	Если НайденнаяСтрока.Пометка=0 Тогда РнВыбраны = Ложь Иначе РнВыбраны = Истина КонецЕсли;
	
	
	//-
	
	
	Страница = ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели");
	Если Страница <> Неопределено и Страница.Видимость тогда
		Показатели = ФормаОтчета.ЭлементыФормы.Показатели.Значение;
		Показатели.Очистить();
		ПоляВыбора = ПолучитьВыбранныеПоля(ОтчетОбъект.КомпоновщикНастроек);
		Для каждого ВыбранноеПоле из ПоляВыбора Цикл
			ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.Поле, ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
			Если ДоступноеПоле <> Неопределено и ДоступноеПоле.Ресурс Тогда
				//Турчинский 2010-11-08+
				ВыбранноеПолеСтрокой = Строка(ВыбранноеПоле.Поле);
				Если Строка(ВыбранноеПоле.Поле) = "КолвоГрупп" и Не СпрВыбраны Тогда
					Продолжить;
				ИначеЕсли (ВыбранноеПолеСтрокой = "КолвоПомеченных" или ВыбранноеПолеСтрокой = "КолвоСтрокВТЧ")
					и (Не СпрВыбраны И Не ДокВыбраны) Тогда
					Продолжить;
				ИначеЕсли (ВыбранноеПолеСтрокой = "МаксДокВДень" или ВыбранноеПолеСтрокой = "СредДокВДень"
					или ВыбранноеПолеСтрокой = "СтрокВТЧНа1Документ" или ВыбранноеПолеСтрокой = "КолвоПроведенных") и Не ДокВыбраны Тогда
					Продолжить;
				ИначеЕсли ВыбранноеПолеСтрокой = "КолвоИтогов" и Не РнВыбраны Тогда
					Продолжить;
				КонецЕсли;
				//Турчинский-

				СтрокаПоказателя = Показатели.Добавить();
				СтрокаПоказателя.Использование = ВыбранноеПоле.Использование;
				СтрокаПоказателя.Поле          = ВыбранноеПоле.Поле;
				СтрокаПоказателя.Представление = ДоступноеПоле.Заголовок;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияНастроек.Свойство("Показатели")  тогда
			ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;
			Если ФормаОтчета.ЭлементыФормы.Показатели.Ширина <> ШиринаПанели-31 тогда
				ФормаОтчета.ЭлементыФормы.Показатели.Ширина = ШиринаПанели-31;
			КонецЕсли;
			Для каждого СтрокаПоказатель из ЗначенияНастроек.Показатели Цикл
				СтрокаПоля = Показатели.Найти(СтрокаПоказатель.Ключ, "Поле");
				Если СтрокаПоля <> Неопределено тогда
					СтрокаПоля.Использование = СтрокаПоказатель.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сдвинем страницу Сортировка в самый конец
	Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
	Если ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели") <> Неопределено тогда
		Индекс = ЭлементыФормы.ПанельЗакладок.Страницы.Индекс(ЭлементыФормы.ПанельЗакладок.Страницы.Показатели);
		ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(ЭлементыФормы.ПанельЗакладок.Страницы.Показатели, Количество - 1 - Индекс);
	КонецЕсли;
	Индекс = ЭлементыФормы.ПанельЗакладок.Страницы.Индекс(ЭлементыФормы.ПанельЗакладок.Страницы.Порядок);
	ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(ЭлементыФормы.ПанельЗакладок.Страницы.Порядок, Количество - 1 - Индекс);
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПанелиПользователя") И ПараметрыИсполненияОтчета.ПослеВыводаПанелиПользователя тогда
		ФормаОтчета.ПослеВыводаПанелиПользователя(ЗначенияНастроек);
	КонецЕсли;
	
	ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Истина;
	
	ЭлементыФормы.ПанельЗакладок.Видимость = Истина;
	Если ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено тогда
		ЭлементыФормы.ПанельПользователяГоризонтальная.Видимость = истина;
	КонецЕсли;
	
	Если НЕ ЕстьЭлементыНаПанели тогда 
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьНеЗаполненаПанель", Истина, ЭлементыФормы.ПанельПользователя);
		НовыйЭлемент.Верх      = 1;
		НовыйЭлемент.Лево      = 1;
		НовыйЭлемент.Ширина    = ?(ЭлементыФормы.ПанельПользователя.Ширина < 215, 215, ЭлементыФормы.ПанельПользователя.Ширина-1);
		НовыйЭлемент.Высота    = ЭлементыФормы.ПанельПользователя.Высота-35;
		НовыйЭлемент.Заголовок = "         Панель пользователя не заполнена.";
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ЦветРамки;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		УстановитьПравуюПривязкуПолностью(НовыйЭлемент, ЭлементыФормы.ПанельПользователя);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьФлажокДопНастроек(ФормаОтчета, ВерхДопСтр, ИмяФлажка, НазваниеФлажка, ЗначениеПоУмолчанию, ПараметрыИсполненияОтчета = Неопределено)
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;
	НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Флажок"), ИмяФлажка, Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Верх      = ВерхДопСтр;
	НовыйЭлемент.Лево      = 6;
	НовыйЭлемент.Ширина    = ШиринаПанелиЗакладки - 15;
	НовыйЭлемент.Заголовок = НазваниеФлажка;
	НовыйЭлемент.Значение  = ЗначениеПоУмолчанию;
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ДействияПанелиИзменениеФлажкаДопНастроек") И ПараметрыИсполненияОтчета.ДействияПанелиИзменениеФлажкаДопНастроек тогда
		Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиИзменениеФлажкаДопНастроек") тогда
			НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеФлажкаДопНастроек);
		КонецЕсли;
	КонецЕсли;
	ВерхДопСтр = ВерхДопСтр + НовыйЭлемент.Высота + 6; 
КонецПроцедуры

Процедура НарисоватьДинамическийОтборФлажокЗначение(ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета = Неопределено)
	
	Если ДоступноеПоле = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаОтбора, 
	|СтраницаПанели, 
	|ДинамическийОтборФлажок, 
	|ДинамическийОтборНадпись,
	|ДинамическийОтборПолеВвода");
	
	
	СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;
	ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;
	СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница;
	
	Если СтрокаОтбора.ВидОтбора = "Флажок" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение" Тогда
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Флажок"), "ДинамическийОтбор" + Индекс + "Флажок", Истина, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 143 * ?(СтрокаОтбора.ВидОтбора = "ФлажокЗначение", 1, 2);
		НовыйЭлемент.Заголовок = СтрокаОтбора.Представление;
		НовыйЭлемент.Значение = СтрокаОтбора.Использование;
		//Получить из значений
		Если ЭлементДинамическогоОтбора <> Неопределено 
			И ТипЗнч(ЭлементДинамическогоОтбора.Использование) = Тип("Булево") Тогда
			// Восстановим значение
			НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Использование;
		Иначе
			// Установим значение по умолчанию                                                     
			НовыйЭлемент.Значение = СтрокаОтбора.Использование;                                    
		КонецЕсли;
		Если СтрокаОтбора.ВидОтбора = "Флажок" Тогда
			УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		КонецЕсли;
		СтруктураЭлементовУправления.ДинамическийОтборФлажок = НовыйЭлемент;
	КонецЕсли;
	
	Если СтрокаОтбора.ВидОтбора = "Значение" Тогда
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 19;
		НовыйЭлемент.Заголовок = СтрокаОтбора.Представление;
		СтруктураЭлементовУправления.ДинамическийОтборНадпись = НовыйЭлемент;
	КонецЕсли;
	
	Если СтрокаОтбора.ВидОтбора = "Значение" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение" Тогда
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтбор" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 153;
		НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 153 - 9;
		НовыйЭлемент.ТипЗначения = ДоступноеПоле.Тип;
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора);
		Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора") тогда
			НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора);
		КонецЕсли;
		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		//Получить из значений
		Если ЭлементДинамическогоОтбора <> Неопределено  Тогда
			// Восстановим значение
			НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Значение;
		Иначе
			// Установим значение по умолчанию
			НовыйЭлемент.Значение = СтрокаОтбора.Значение;
		КонецЕсли;
		СтруктураЭлементовУправления.ДинамическийОтборПолеВвода = НовыйЭлемент;
	КонецЕсли;
	Верх = Верх + 19 + 6;
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора тогда
		ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);
	КонецЕсли;
КонецПроцедуры

Процедура НарисоватьСтандартныйПериодНаПравойПанели(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, ПараметрыИсполненияОтчета = Неопределено)
	
	Если Не Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтраницаПанели, 
	|ДинамическийОтборСтандартныйПериод, 
	|ДинамическийОтборСтандартныйПериодПользователя,
	|ДинамическийОтборСтандартнаяДатаНачала,
	|ДинамическийОтборСтандартнаяДатаНачалаПользователя,
	|ДинамическийОтборНадписьС,
	|ДинамическийОтборДатаНачала,
	|ДинамическийОтборНадписьПо,
	|ДинамическийОтборДатаОкончания,
	|ДинамическийОтборНадписьДата,
	|ДинамическийОтборДата");
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	мКомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ЦветФонаКнопки = Новый Цвет(246, 244, 236);
	// Закладка Стандартный Период
	ЗначениеПараметраНачалоПериода = мКомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода  = мКомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметраПериод        = мКомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	// Стандартный период
	Если ЗначениеПараметраНачалоПериода <> Неопределено
		И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Вставить(0, "ДинамическийОтборСтандартныйПериод", "Период");
		НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтборСтандартныйПериод", "Период");
		Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
		ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(НоваяСтраница, -(Количество-1));
		НоваяСтраница.Раскрыта = Истина;
		СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
		
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
		Верх = 6;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Данные = "СтандартныйПериод";
		НовыйЭлемент.Видимость = Ложь;
		СтруктураЭлементовУправления.ДинамическийОтборСтандартныйПериод = НовыйЭлемент;
		
		// Поле выбора Стандартный период
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 292;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);;
		НовыйЭлемент.СписокВыбора = СписокВыбора;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		СтруктураЭлементовУправления.ДинамическийОтборСтандартныйПериодПользователя = НовыйЭлемент;
		
		
		// Восстанавливаем значение
		Если ЗначенияНастроек.Свойство("СтандартныйПериод") Тогда
			СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;
			Если СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено Тогда
				НовыйЭлемент.Значение = СтандартныйПериод.Вариант;
				ФормаОтчета.СтандартныйПериод = СтандартныйПериод;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);
		
		Верх = Верх + НовыйЭлемент.Высота + 6;
		
		// Надпись с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 6;
		НовыйЭлемент.Заголовок = "с:";
		СтруктураЭлементовУправления.ДинамическийОтборНадписьС = НовыйЭлемент;
		
		// Дата с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаНачала",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 20;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартныйПериод.ДатаНачала";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		СтруктураЭлементовУправления.ДинамическийОтборНадписьС = НовыйЭлемент;
		
		
		// Надпись по
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьПо",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 110;
		НовыйЭлемент.Ширина = 6;
		НовыйЭлемент.Заголовок = "по:";
		СтруктураЭлементовУправления.ДинамическийОтборНадписьПо = НовыйЭлемент;
		
		// Дата по
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаОкончания",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 128;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартныйПериод.ДатаОкончания";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		СтруктураЭлементовУправления.ДинамическийОтборДатаОкончания = НовыйЭлемент;
		
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Заголовок = "...";
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 214;
		НовыйЭлемент.Ширина = 20;
		Действие = Новый Действие("ДействияПанелиИзменениеЗначенияДинамическогоОтбора");
		НовыйЭлемент.УстановитьДействие("Нажатие", Действие);
		
	КонецЕсли;
	
	// Стандартная дата начала
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Вставить(0, "ДинамическийОтборСтандартнаяДатаНачала", "Период");
		НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтборСтандартнаяДатаНачала", "Период");
		Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
		ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(НоваяСтраница, -(Количество-1));
		НоваяСтраница.Раскрыта = Истина;
		
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
		СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
		
		Верх = 6;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартнаяДатаНачала",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Данные = "СтандартнаяДатаНачала";
		НовыйЭлемент.Видимость = Ложь;
		СтруктураЭлементовУправления.ДинамическийОтборСтандартнаяДатаНачала = НовыйЭлемент;
		
		
		// Поле выбора Стандартная дата начала
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартнаяДатаНачалаПользователя",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 292;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		СписокВыбора = ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(Параметры);
		НовыйЭлемент.СписокВыбора = СписокВыбора;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		СтруктураЭлементовУправления.ДинамическийОтборСтандартнаяДатаНачалаПользователя = НовыйЭлемент;
		
		
		// Восстанавливаем значение варианта стандартной даты начала
		Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
			СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;
			Если СписокВыбора.НайтиПоЗначению(СтандартнаяДатаНачала.Вариант) <> Неопределено Тогда
				НовыйЭлемент.Значение = СтандартнаяДатаНачала.Вариант;
				ФормаОтчета.СтандартнаяДатаНачала = СтандартнаяДатаНачала;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартнаяДатаНачала);
		
		Верх = Верх + 19 + 6;
		
		// Надпись дата
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьДата",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх + 3;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 26;
		НовыйЭлемент.Заголовок = "дата:";
		СтруктураЭлементовУправления.ДинамическийОтборНадписьДата = НовыйЭлемент;
		
		// Поле ввода даты
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДата",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 40;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартнаяДатаНачала.Дата";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартнойДатыНачала.ПроизвольнаяДата) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		СтруктураЭлементовУправления.ДинамическийОтборДата = НовыйЭлемент;
		
		// Восстанавливаем значение
		Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
			СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;
			НовыйЭлемент.Значение = СтандартнаяДатаНачала.Дата;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПериода") И ПараметрыИсполненияОтчета.ПослеВыводаПериода тогда
		ФормаОтчета.ПослеВыводаПериода(СтруктураЭлементовУправления);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТаблицуСтандартныхПериодов()
	
	ТаблицаСтандартныхПериодов = Новый ТаблицаЗначений;
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Периодичность");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Время");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("СтандартныйПериод");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Представление");
	
	// Произвольный
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "", "ПроизвольныйПериод", ВариантСтандартногоПериода.ПроизвольныйПериод, "Произвольный период");
	// День
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Предыдущий",    ВариантСтандартногоПериода.Вчера, "Вчера");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Текущий",       ВариантСтандартногоПериода.Сегодня, " Сегодня");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Следующий",     ВариантСтандартногоПериода.Завтра, "  Завтра");
	// Неделя
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Предыдущий",  ВариантСтандартногоПериода.ПрошлаяНеделя, "Предыдущая неделя");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Текущий",     ВариантСтандартногоПериода.ЭтаНеделя, " Эта неделя");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Следующий",   ВариантСтандартногоПериода.СледующаяНеделя, " Следующая неделя");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "СНачала",     ВариантСтандартногоПериода.СНачалаЭтойНедели, "С начала этой недели");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "ДоКонца",     ВариантСтандартногоПериода.ДоКонцаЭтойНедели, "До конца этой недели");
	// Декада
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Предыдущий",  ВариантСтандартногоПериода.ПрошлаяДекада, "Предыдущая декада");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Текущий",     ВариантСтандартногоПериода.ЭтаДекада, " Эта декада");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Следующий",   ВариантСтандартногоПериода.СледующаяДекада, "  Следующая декада");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "СНачала",     ВариантСтандартногоПериода.СНачалаЭтойДекады, "С начала этой декады");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "ДоКонца",     ВариантСтандартногоПериода.ДоКонцаЭтойДекады, "До конца этой декады");
	// Месяц
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Предыдущий",   ВариантСтандартногоПериода.ПрошлыйМесяц, "Предыдущий месяц");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Текущий",      ВариантСтандартногоПериода.ЭтотМесяц, " Этот месяц");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Следующий",    ВариантСтандартногоПериода.СледующийМесяц, "  Следующий месяц");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "СНачала",      ВариантСтандартногоПериода.СНачалаЭтогоМесяца, "С начала этого месяца");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "ДоКонца",      ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца, "До конца этого месяца");
	// Квартал
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Предыдущий", ВариантСтандартногоПериода.ПрошлыйКвартал, "Предыдущий квартал");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Текущий",    ВариантСтандартногоПериода.ЭтотКвартал, " Этот квартал");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Следующий",  ВариантСтандартногоПериода.СледующийКвартал, "  Следующий квартал");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "СНачала",    ВариантСтандартногоПериода.СНачалаЭтогоКвартала, "С начала этого квартала");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "ДоКонца",    ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала, "До конца этого квартала");
	// Полугодие
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Предыдущий", ВариантСтандартногоПериода.ПрошлоеПолугодие, "Предыдущее полугодие");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Текущий",    ВариантСтандартногоПериода.ЭтоПолугодие, " Это полугодие");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Следующий",  ВариантСтандартногоПериода.СледующееПолугодие, "  Следующее полугодие");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "СНачала",    ВариантСтандартногоПериода.СНачалаЭтогоПолугодия, "С начала этого полугодия");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "ДоКонца",    ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия, "До конца этого полугодия");
	// Год
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Предыдущий",     ВариантСтандартногоПериода.ПрошлыйГод, "Предыдущий год");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Текущий",        ВариантСтандартногоПериода.ЭтотГод, " Этот год");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Следующий",      ВариантСтандартногоПериода.СледующийГод, "  Следующий год");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "СНачала",        ВариантСтандартногоПериода.СНачалаЭтогоГода, "С начала этого года");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "ДоКонца",        ВариантСтандартногоПериода.ДоКонцаЭтогоГода, "До конца этого года");
	Возврат ТаблицаСтандартныхПериодов;
	
КонецФункции

Процедура ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, Периодичность, Время, СтандартныйПериод, Представление)
	
	НоваяСтрока = ТаблицаСтандартныхПериодов.Добавить();
	НоваяСтрока.Периодичность = Периодичность;
	НоваяСтрока.Время = Время;
	НоваяСтрока.СтандартныйПериод = СтандартныйПериод;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

Функция ИнициализироватьКомпоновщикНастроек(ОтчетОбъект, КомпоновщикНастроекПользователя=Неопределено) Экспорт
	
	Схема = ОтчетОбъект.СхемаКомпоновкиДанных;	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Если КомпоновщикНастроекПользователя<>Неопределено Тогда
		КомпоновщикНастроекПользователя.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КонецЕсли;
			
	//Турчинский
	Для каждого ПеребираемыйВариант Из Схема.ВариантыНастроек Цикл
		Если ПеребираемыйВариант.Имя = ВариантНастройкиСКД Тогда
			ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ПеребираемыйВариант.Настройки);
			Если КомпоновщикНастроекПользователя<>Неопределено Тогда
				КомпоновщикНастроекПользователя.ЗагрузитьНастройки(ПеребираемыйВариант.Настройки);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат Схема;
	
КонецФункции

Функция ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры)
	
	ТаблицаСтандартныхПериодов = ПолучитьТаблицуСтандартныхПериодов();
	ВспомогательныйПериод = Новый СтандартныйПериод;
	СписокВыбораПериодовПользователя = Новый СписокЗначений;
	
	Если Параметры.ПроизвольныйПериод Тогда
		СписокВыбораПериодовПользователя.Вставить(0, ВариантСтандартногоПериода.ПроизвольныйПериод, "Произвольный период");
	КонецЕсли;
	
	Для каждого ОтносительноеВремя Из Параметры.СписокДоступныхОтносительныхПериодов Цикл
		Если Не ОтносительноеВремя.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Периодичность Из Параметры.ДоступныеПериодичности Цикл
			Если Не Периодичность.Использование Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Время", ОтносительноеВремя.Значение);
			СтруктураПоиска.Вставить("Периодичность", Периодичность.Периодичность);
			НайденныеСтроки = ТаблицаСтандартныхПериодов.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				Если  Периодичность.Периодичность = "Декада" 
					ИЛИ Периодичность.Периодичность = "Неделя" 
					ИЛИ ОтносительноеВремя.Значение = "СНачала" 
					ИЛИ ОтносительноеВремя.Значение = "ДоКонца" Тогда
					Представление = ""
				Иначе
					ВспомогательныйПериод.Вариант = НайденнаяСтрока.СтандартныйПериод;
					Представление = " (" + ПредставлениеПериода(ВспомогательныйПериод.ДатаНачала, ВспомогательныйПериод.ДатаОкончания) + ")";
				КонецЕсли;
				СписокВыбораПериодовПользователя.Добавить(НайденнаяСтрока.СтандартныйПериод, НайденнаяСтрока.Представление + Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокВыбораПериодовПользователя;
	
КонецФункции

Процедура УстановитьДопустимоеЗначениеСпискаВыбора(Элемент, Значение = Неопределено)
	
	Если Значение = Неопределено Тогда
		Значение = Элемент.Значение;
	КонецЕсли;
	
	НайденноеЗначение = Элемент.СписокВыбора.НайтиПоЗначению(Значение.Вариант);
	Если НайденноеЗначение = Неопределено И Элемент.СписокВыбора.Количество() > 0 Тогда
		Значение.Вариант = Элемент.СписокВыбора[0].Значение;
		Элемент.Значение = Элемент.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуСтандартныхДатНачала()
	
	ТаблицаСтандартныхПериодов = Новый ТаблицаЗначений;
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Периодичность");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Время");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("СтандартнаяДатаНачала");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Представление");
	
	// Произвольная
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "", "ПроизвольнаяДата",  ВариантСтандартнойДатыНачала.ПроизвольнаяДата, "Произвольная дата");
	// День
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Предыдущий",    ВариантСтандартнойДатыНачала.НачалоПрошлогоДня, "Начало вчерашнего дня");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Текущий",       ВариантСтандартнойДатыНачала.НачалоЭтогоДня, " Начало сегодняшнего дня");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Следующий",     ВариантСтандартнойДатыНачала.НачалоСледующегоДня, "  Начало завтрашнего дня");
	// Неделя
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Предыдущий",  ВариантСтандартнойДатыНачала.НачалоПрошлойНедели, "Начало предыдущей недели");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Текущий",     ВариантСтандартнойДатыНачала.НачалоЭтойНедели, " Начало этой недели");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Следующий",   ВариантСтандартнойДатыНачала.НачалоСледующейНедели, "  Начало следующей недели");
	// Декада
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Предыдущий",  ВариантСтандартнойДатыНачала.НачалоПрошлойДекады, "Начало предыдущей декады");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Текущий",     ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца, " Начало этой декады");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Следующий",   ВариантСтандартнойДатыНачала.НачалоСледующейДекады, "  Начало следующей декады");
	// Месяц
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Предыдущий",   ВариантСтандартнойДатыНачала.НачалоПрошлогоМесяца, "Начало предыдущего месяца");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Текущий",      ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца, " Начало этого месяца");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Следующий",    ВариантСтандартнойДатыНачала.НачалоСледующегоМесяца, "  Начало следующего месяца");
	// Квартал
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Предыдущий", ВариантСтандартнойДатыНачала.НачалоПрошлогоКвартала, "Начало предыдущего квартала");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Текущий",    ВариантСтандартнойДатыНачала.НачалоЭтогоКвартала, " Начало этого квартала");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Следующий",  ВариантСтандартнойДатыНачала.НачалоСледующегоКвартала, "  Начало следующего квартала");
	// Полугодие
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Предыдущий", ВариантСтандартнойДатыНачала.НачалоПрошлогоПолугодия, "Начало предыдущего полугодия");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Текущий",    ВариантСтандартнойДатыНачала.НачалоЭтогоПолугодия, " Начало этого полугодия");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Следующий",  ВариантСтандартнойДатыНачала.НачалоСледующегоПолугодия, "  Начало следующего полугодия");
	// Год
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Предыдущий",     ВариантСтандартнойДатыНачала.НачалоПрошлогоГода, "Начало предыдущего года");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Текущий",        ВариантСтандартнойДатыНачала.НачалоЭтогоГода, " Начало этого года");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Следующий",      ВариантСтандартнойДатыНачала.НачалоСледующегоГода, "  Начало этого года");
	Возврат ТаблицаСтандартныхПериодов;
	
КонецФункции

Процедура ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, Периодичность, Время, СтандартнаяДатаНачала, Представление)
	
	НоваяСтрока = ТаблицаСтандартныхПериодов.Добавить();
	НоваяСтрока.Периодичность = Периодичность;
	НоваяСтрока.Время = Время;
	НоваяСтрока.СтандартнаяДатаНачала = СтандартнаяДатаНачала;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

Функция ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(Параметры)
	
	ТаблицаСтандартныхДатНачала = ПолучитьТаблицуСтандартныхДатНачала();
	ВспомогательныйПериод = Новый СтандартнаяДатаНачала;
	СписокВыбораПериодовПользователя = Новый СписокЗначений;
	
	Если Параметры.ПроизвольныйПериод Тогда
		СписокВыбораПериодовПользователя.Вставить(0, ВариантСтандартнойДатыНачала.ПроизвольнаяДата, "Произвольная дата");
	КонецЕсли;
	
	Для каждого ОтносительноеВремя Из Параметры.СписокДоступныхОтносительныхПериодов Цикл
		Если Не ОтносительноеВремя.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Периодичность Из Параметры.ДоступныеПериодичности Цикл
			Если Не Периодичность.Использование Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Время", ОтносительноеВремя.Значение);
			СтруктураПоиска.Вставить("Периодичность", Периодичность.Периодичность);
			НайденныеСтроки = ТаблицаСтандартныхДатНачала.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				
				ВспомогательныйПериод.Вариант = НайденнаяСтрока.СтандартнаяДатаНачала;
				Представление = " (" + Формат(ВспомогательныйПериод.Дата, "ДФ=dd.MM.yyyy") + ")";
				
				СписокВыбораПериодовПользователя.Добавить(НайденнаяСтрока.СтандартнаяДатаНачала, НайденнаяСтрока.Представление + Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокВыбораПериодовПользователя;
	
КонецФункции

// Компирует элементы из одной коллекции в другую
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			Попытка 
				ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
				ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
				ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
				ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
			Исключение
			КонецПопытки
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Заполняет одну коллекцию элементов на основании другой
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПравуюПривязкуПолностью(Элемент, Панель, ЛевыйЭлемент = Неопределено)
	
	ЛевыйЭлемент = ?(ЛевыйЭлемент = Неопределено, Панель, ЛевыйЭлемент);
	Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЛевыйЭлемент, ГраницаЭлементаУправления.Лево);
	
КонецПроцедуры

Процедура НарисоватьДинамическийОтборГоризонтальнойПанели(ФормаОтчета, Индекс, Лево, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПоследнийЭлемент = ложь, Список = истина, ПараметрыИсполненияОтчета = Неопределено, ПредыдущийЭлемент, СреднийРазмерЭлементаУправления)
	
	Если ДоступноеПоле = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаОтбора, 
	|СтраницаПанели, 
	|ДинамическийОтборНадпись, 
	|ДинамическийОтборПолеВвода");
	
	СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;
	ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельПользователяГоризонтальная.Ширина;
	СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница;
	
	НовыйЭлементНадпись = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
	НовыйЭлементНадпись.Верх = 6;
	НовыйЭлементНадпись.Лево = Лево;
	СреднийРазмерЭлементаУправления = ?(СреднийРазмерЭлементаУправления = Неопределено, СтрДлина(СтрокаОтбора.Представление)*7, СреднийРазмерЭлементаУправления);
	НовыйЭлементНадпись.Ширина = ?(СреднийРазмерЭлементаУправления > СтрДлина(СтрокаОтбора.Представление)*7, СтрДлина(СтрокаОтбора.Представление)*7, СреднийРазмерЭлементаУправления);
	НовыйЭлементНадпись.Заголовок = СтрокаОтбора.Представление+":";
	НовыйЭлементНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	Лево = Лево + НовыйЭлементНадпись.Ширина + 6;
	//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийОтборНадпись = НовыйЭлементНадпись;
	Если ПредыдущийЭлемент = Неопределено тогда
		УстановитьЛевуюПривязку(НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная)
	Иначе
		УстановитьПривязкуКПравойГранице(НовыйЭлементНадпись, ПредыдущийЭлемент, ЭлементыФормы.ПанельВыбораВариантов);
	КонецЕсли;
	УстановитьПривязкуКЛевойГранице(НовыйЭлементНадпись, НовыйЭлементНадпись, ЭлементыФормы.ПанельВыбораВариантов);
	
	
	НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтбор" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельВыбораВариантов);
	НовыйЭлемент.Верх = 6;
	НовыйЭлемент.Лево = Лево;
	Если Найти(Строка(ДоступноеПоле.Тип),"ПланСчетов") <> 0 тогда
		НовыйЭлемент.Ширина = СреднийРазмерЭлементаУправления/2.5; 
	Иначе
		НовыйЭлемент.Ширина = ?(ПоследнийЭлемент, ШиринаПанелиЗакладки - Лево, СреднийРазмерЭлементаУправления); 
	КонецЕсли;
	НовыйЭлемент.ТипЗначения	   = ДоступноеПоле.Тип;
	Если Список тогда
		НовыйЭлемент.Значение          = Новый СписокЗначений;
		НовыйЭлемент.ТипЗначения       = Новый ОписаниеТипов("СписокЗначений");
		НовыйЭлемент.ТипЗначенияСписка = ДоступноеПоле.Тип;
	КонецЕсли;
	НовыйЭлемент.ЦветФонаКнопки    = ЦветФонаКнопки;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора);
	Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора") тогда
		НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора);
	КонецЕсли;
	
	Если ПоследнийЭлемент тогда
		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельВыбораВариантов);
		НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, НовыйЭлементНадпись, ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельВыбораВариантов, ГраницаЭлементаУправления.Право)
	Иначе				
		УстановитьПривязкуКПравойГранице(НовыйЭлемент, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
		УстановитьПривязкуКЛевойГранице(НовыйЭлемент, НовыйЭлемент, ЭлементыФормы.ПанельВыбораВариантов);
	КонецЕсли;
	//Получить из значений
	Если ЭлементДинамическогоОтбора <> Неопределено  Тогда
		// Восстановим значение
		НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Значение;
	Иначе
		// Установим значение по умолчанию
		НовыйЭлемент.Значение = СтрокаОтбора.Значение;
	КонецЕсли;
	Лево = ?(ПоследнийЭлемент, Лево, Лево + НовыйЭлемент.Ширина + 6);
	СтруктураЭлементовУправления.ДинамическийОтборПолеВвода = НовыйЭлемент;
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора тогда
		ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПривязкуКЛевойГранице(Элемент, ПривязатьК, Панель = Неопределено) Экспорт
	
	Если Панель <> Неопределено тогда
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПривязатьК, ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
	Иначе
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПривязатьК, ГраницаЭлементаУправления.Лево);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПривязкуКПравойГранице(Элемент, ПривязатьК, Панель = Неопределено) Экспорт
	
	Если Панель <> Неопределено тогда
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПривязатьК, ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	Иначе
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПривязатьК, ГраницаЭлементаУправления.Право);
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	Если ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Неопределено Тогда
		#Если Клиент тогда
			Если ФормаОтчета <> Неопределено Тогда
				Возврат ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);
			КонецЕсли;
		#КонецЕсли
		Возврат Неопределено;
	Иначе
		Возврат ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруПоказателей(ЭлементыФормы) Экспорт
	
	ИспользованиеПоказателей = Новый Соответствие;
	Для каждого СтрокаПоказателя из ЭлементыФормы.Показатели.Значение Цикл
		ИспользованиеПоказателей.Вставить(СтрокаПоказателя.Поле, СтрокаПоказателя.Использование);
	КонецЦикла;
	Возврат ИспользованиеПоказателей;
	
КонецФункции 

Функция ПолучитьСтруктуруДинамическихОтборов(Параметры, ЭлементыФормы) Экспорт
	
	
	Соответствие = Новый Соответствие;
	Если Параметры = Неопределено Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаОтбора Из Параметры.Отборы Цикл
		Индекс = Параметры.Отборы.Индекс(СтрокаОтбора);
		
		ЕстьСписок = (СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок") 
		И СтрокаОтбора.Расположение <> "ГоризонтальнаяПанель";
		ЕстьЗначение = СтрокаОтбора.ВидОтбора = "ФлажокЗначение" ИЛИ СтрокаОтбора.ВидОтбора = "Значение" ИЛИ ((СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок") 
		И СтрокаОтбора.Расположение = "ГоризонтальнаяПанель");
		ЕстьФлажок = СтрокаОтбора.ВидОтбора = "Флажок" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение";
		
		Использование = Истина;
		Значение = Неопределено;
		ВыбранныйВидСравнения = Неопределено;
		
		Если ЕстьСписок Тогда
			Если ЭлементыФормы.Найти("ДинамическийОтбор" + Индекс + "ТабличноеПоле") <> Неопределено тогда
				Список = Новый СписокЗначений;
				Список.ЗагрузитьЗначения(ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"].Значение.ВыгрузитьКолонку("Значение"));
				Значение = Список;
				ВыбранныйВидСравнения = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ВидСравнения"].Значение;
			КонецЕсли;
		ИначеЕсли ЕстьЗначение Тогда
			Если ЭлементыФормы.Найти("ДинамическийОтбор" + Индекс + "ПолеВвода") <> Неопределено тогда
				Значение = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ПолеВвода"].Значение;
			КонецЕсли;
		Иначе
			Значение = СтрокаОтбора.Значение;
		КонецЕсли;
		Если ЕстьФлажок Тогда
			Если ЭлементыФормы.Найти("ДинамическийОтбор" + Индекс + "Флажок") <> Неопределено тогда
				Использование = ЭлементыФормы["ДинамическийОтбор" + Индекс + "Флажок"].Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если (СтрокаОтбора.Расположение = "ГоризонтальнаяПанель" или СтрокаОтбора.ВидОтбора = "Значение") И НЕ ЗначениеЗаполнено(Значение) тогда
			Использование = ложь;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Использование", Использование);
		СтруктураОтбора.Вставить("Поле", СтрокаОтбора.Поле);
		СтруктураОтбора.Вставить("ВидСравнения", ВыбранныйВидСравнения);
		СтруктураОтбора.Вставить("Значение", Значение);
		Соответствие[СтрокаОтбора.Поле] = СтруктураОтбора;
	КонецЦикла;
	Возврат Соответствие;
	
КонецФункции

Функция ПолучитьСтруктуруДинамическихПараметров(Параметры, ЭлементыФормы) Экспорт
	
	Соответствие = Новый Соответствие;
	Если Параметры = Неопределено или НЕ Параметры.Свойство("Параметры") Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаПараметра Из Параметры.Параметры Цикл
		
		
		Индекс = Параметры.Параметры.Индекс(СтрокаПараметра);
		
		ЕстьСписок = СтрокаПараметра.ОтображатьКак = "СписокЗначение";
		ЕстьЗначение = СтрокаПараметра.ОтображатьКак = "Переключатель" ИЛИ СтрокаПараметра.ОтображатьКак = "ПолеВвода";
		
		Если НЕ ЕстьЗначение и НЕ ЕстьСписок тогда 
			Продолжить;
		КонецЕсли;
		Если СтрокаПараметра.ОтображатьКак = "СписокЗначение" И СтрокаПараметра.ВыводитьНа = "ПраваяПанель" тогда
			ЭлементУправления = "ТабличноеПоле";
		ИначеЕсли СтрокаПараметра.ОтображатьКак = "СписокЗначение" И СтрокаПараметра.ВыводитьНа = "ГоризонтальнаяПанель" тогда
			ЭлементУправления = "ПолеВвода";
		Иначе
			ЭлементУправления = СтрокаПараметра.ОтображатьКак;
		КонецЕсли;
		Если СтрокаПараметра.ОтображатьКак = "Переключатель" тогда
			НазваниеЭлементаУправления = "ДинамическийПараметр" + Индекс + 0 + ЭлементУправления;
		Иначе
			НазваниеЭлементаУправления = "ДинамическийПараметр" + Индекс + ЭлементУправления;
		КонецЕсли;
		
		Использование = Истина;
		Значение = Неопределено;
		
		Если ЭлементыФормы.Найти(НазваниеЭлементаУправления) <> Неопределено тогда
			Если ЕстьСписок Тогда
				Список = Новый СписокЗначений;
				
				Если ЭлементУправления = "ПолеВвода" тогда
					Список = ЭлементыФормы[НазваниеЭлементаУправления].Значение;
				Иначе
					Список.ЗагрузитьЗначения(ЭлементыФормы[НазваниеЭлементаУправления].Значение.ВыгрузитьКолонку("Значение"));
				КонецЕсли;
				Значение = Список;
			Иначе 
				Значение = ЭлементыФормы[НазваниеЭлементаУправления].Значение;
			КонецЕсли;
		Иначе
			Сообщить("Не найден параметр "+СтрокаПараметра.Параметр);
		КонецЕсли;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Использование", Использование);
		СтруктураОтбора.Вставить("Параметр", СтрокаПараметра.Параметр);
		СтруктураОтбора.Вставить("Значение", Значение);
		Соответствие[СтрокаПараметра.Параметр] = СтруктураОтбора;
	КонецЦикла;
	Возврат Соответствие;
	
КонецФункции

Функция ПолучитьСтруктуруДинамическихГруппировок(Параметры, ЭлементыФормы) Экспорт
	
	Соответствие = Новый Соответствие;
	Если Параметры = Неопределено или НЕ Параметры.Свойство("Группировки") Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаГруппировки Из Параметры.Группировки Цикл
		Индекс = Параметры.Группировки.Индекс(СтрокаГруппировки);
		Значение = Неопределено;
		ЗначениеСтрок = Неопределено;
		ЗначениеКолонок = Неопределено;
		ЭлемУпрЗначение = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПоле");
		ЭлемУпрЗначениеСтрок = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеСтрок");
		ЭлемУпрЗначениеКолонок = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеКолонок");
		
		СтруктураГруппировки = Новый Структура("Использование, 
		|ИмяГруппировки, 
		|СписокГруппировки, 
		|СписокГруппировкиСтрок, 
		|СписокГруппировкиКолонок", 
		СтрокаГруппировки.Использование,
		СтрокаГруппировки.Группировка,
		?(ЭлемУпрЗначение <> Неопределено, ЭлемУпрЗначение.Значение, Неопределено),
		?(ЭлемУпрЗначениеСтрок <> Неопределено, ЭлемУпрЗначениеСтрок.Значение, Неопределено),
		?(ЭлемУпрЗначениеКолонок <> Неопределено, ЭлемУпрЗначениеКолонок.Значение, Неопределено));
		
		Соответствие[СтрокаГруппировки.Группировка] = СтруктураГруппировки;
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

Функция ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	Попытка
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	ЗначенияНастроек = Новый Структура;
	
	//Если ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("Заголовок") <> Неопределено тогда
	//	Пометка = ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Заголовок.Пометка;
	//Иначе
		Пометка = ложь;
	//КонецЕсли;
	ЗначенияНастроек.Вставить("ВыводитьЗаголовокОтчета", Пометка);
	ЗначенияНастроек.Вставить("ФормироватьПриОткрытии", Ложь);
	
	//ДинамическиеОтборы
	ЗначенияНастроек.Вставить("ДинамическиеОтборы", ПолучитьСтруктуруДинамическихОтборов(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы));
	ЗначенияНастроек.Вставить("ДинамическиеПараметры", ПолучитьСтруктуруДинамическихПараметров(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы));
	ЗначенияНастроек.Вставить("ДинамическиеГруппировки", ПолучитьСтруктуруДинамическихГруппировок(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы));
	
	ЗначенияНастроек.Вставить("НастройкиКомпоновщика", ФормаОтчета.КомпоновщикНастроекПользователя.ПолучитьНастройки());
	
	ДополнительныеНастройкиОтчета = Новый Массив;
	Попытка 
		ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();
	Исключение
	КонецПопытки;
	Для каждого ДопНастройка из ДополнительныеНастройкиОтчета Цикл
		Если ЭлементыФормы.Найти(ДопНастройка.Имя) <>  Неопределено тогда
			ЗначенияНастроек.Вставить(ДопНастройка.Имя, ЭлементыФормы[ДопНастройка.Имя].Значение);
		Иначе
			ЗначенияНастроек.Вставить(ДопНастройка.Имя, ложь);
		КонецЕсли;
	КонецЦИкла;
	
	
	// Запомним видимость страниц компоновки чтобы при загрузке значений знать,
	// брать из значений по умолчанию или из запомненных значений
	ВидимостьСтраниц = Новый Соответствие;
	ВидимостьСтраниц.Вставить("Параметры", ЭлементыФормы.ПанельЗакладок.Страницы.Параметры.Видимость);
	ВидимостьСтраниц.Вставить("Отбор", ЭлементыФормы.ПанельЗакладок.Страницы.Отбор.Видимость);
	ВидимостьСтраниц.Вставить("Порядок", ЭлементыФормы.ПанельЗакладок.Страницы.Порядок.Видимость);
	Если ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели") <> Неопределено тогда
		ВидимостьСтраниц.Вставить("Показатели", ЭлементыФормы.ПанельЗакладок.Страницы.Показатели.Видимость);
		ЗначенияНастроек.Вставить("Показатели", ПолучитьСтруктуруПоказателей(ЭлементыФормы));
	КонецЕсли;
	
	ЗначенияНастроек.Вставить("ВидимостьСтраниц", ВидимостьСтраниц);
	
	// Стандартный период
	ЗначенияНастроек.Вставить("СтандартныйПериод", ФормаОтчета.СтандартныйПериод);
	
	// Стандартная дата начала
	ЗначенияНастроек.Вставить("СтандартнаяДатаНачала", ФормаОтчета.СтандартнаяДатаНачала);
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПриПолучениеНастроекПользователя") И ПараметрыИсполненияОтчета.ПриПолучениеНастроекПользователя тогда
		ФормаОтчета.ПриПолучениеНастроекПользователя(ЗначенияНастроек);
	КонецЕсли;
	
	
	Возврат ЗначенияНастроек;
	
КонецФункции

Функция ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	ЗначенияНастроек = Новый Структура;
	
	ЗначенияНастроек.Вставить("ВыводитьЗаголовокОтчета", Истина);
	ЗначенияНастроек.Вставить("ФормироватьПриОткрытии", Ложь);
	
	//ДинамическиеОтборы
	ЗначенияНастроек.Вставить("ДинамическиеОтборы", Новый Соответствие);
	ЗначенияНастроек.Вставить("ДинамическиеПараметры", Новый Соответствие);
	ЗначенияНастроек.Вставить("ДинамическиеГруппировки", Новый Соответствие);
	
	//Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик = КомпоновщикНастроек; //Турчинский
	СхемаОбъекта = СхемаКомпоновкиДанных;
	//Турчинкий - удалил нижнее
	//Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОбъекта));
	//ЗаполнитьЭлементы(Компоновщик.Настройки["ПараметрыДанных"], СхемаОбъекта.НастройкиПоУмолчанию["ПараметрыДанных"]);
	
	ЗначенияНастроек.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
	
	
	// Запомним видимость страниц компоновки чтобы при загрузке значений знать,
	// брать из значений по умолчанию или из запомненных значений
	ВидимостьСтраниц = Новый Соответствие;
	ВидимостьСтраниц.Вставить("Параметры", Ложь);
	ВидимостьСтраниц.Вставить("Отбор", Ложь);
	ВидимостьСтраниц.Вставить("Порядок", Ложь);
	ВидимостьСтраниц.Вставить("Показатели", ложь);
	ЗначенияНастроек.Вставить("ВидимостьСтраниц", ВидимостьСтраниц);
	ЗначенияНастроек.Вставить("Показатели", Новый Соответствие);
	
	// Стандартный период
	ЗначенияНастроек.Вставить("СтандартныйПериод", Новый СтандартныйПериод);
	
	// Стандартная дата начала
	ЗначенияНастроек.Вставить("СтандартнаяДатаНачала", Новый СтандартнаяДатаНачала);
	
	Возврат ЗначенияНастроек;
	
КонецФункции

Процедура ЗаполнитьЗначенияАналитическихОтборовПоумолчанию(ЗначенияНастроек) Экспорт
	
	//АналитическиеОтборы
	ЗначенияАналитическихОтборов = Новый Структура;
	ЗначенияАналитическихОтборов.Вставить("КоличествоТоп", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПроцентТоп", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПолеТоп", "");
	
	ЗначенияАналитическихОтборов.Вставить("ПроцентПорог", 0);
	ЗначенияАналитическихОтборов.Вставить("РесурсПорог", "");
	ЗначенияАналитическихОтборов.Вставить("ПолеПорог", "");
	
	ЗначенияАналитическихОтборов.Вставить("ПолеОтборТренд", "");
	ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборТренд", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПолеОтборСостояние", "");
	ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборСостояние", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПолеОтборABCКлассификация", "");
	ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборABCКлассификация", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("СкрытьНулевые", Неопределено);
	
	ЗначенияНастроек.Вставить("АналитическиеОтборы", ЗначенияАналитическихОтборов);
	
КонецПроцедуры //

Функция ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект) Экспорт
	
	Если ОтчетОбъект.ПараметрыПанелиПользователя = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОтчетОбъект.ПараметрыПанелиПользователя.Получить();
	КонецЕсли;
	
КонецФункции

Процедура НарисоватьДинамическийОтборСписок(ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета = Неопределено)
	
	Если ДоступноеПоле = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаОтбора, 
	|СтраницаПанели, 
	|ДинамическийОтборВидСравнения, 
	|ДинамическийОтборСохранитьСписок,
	|ДинамическийОтборЗагрузитьСписок,
	|ДинамическийОтборКнопкаПодбор,
	|ДинамическийОтборТабличноеПоле");
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;
	СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;
	
	// Добавление Поля выбора вида сравнения
	ЭлементВидСравнения        = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтбор" + Индекс + "ВидСравнения", Истина, ЭлементыФормы.ПанельЗакладок);
	//ЭлементВидСравнения.ИзменяетДанные = Истина;
	ЭлементВидСравнения.Лево   = 6;
	ЭлементВидСравнения.Верх   = Верх;
	ЭлементВидСравнения.Ширина = (ШиринаПанелиЗакладки - 139);//125;
	ЭлементВидСравнения.Высота = 19;
	ЭлементВидСравнения.ЦветФонаКнопки = ЦветФонаКнопки;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("", "Не отбирать");
	СписокВыбора.Добавить("Выбранные", "Только выбранные");
	Если СтрокаОтбора.ДоступенВариантИсключить Тогда
		СписокВыбора.Добавить("Исключая", "Кроме выбранных");
	КонецЕсли;
	ЭлементВидСравнения.СписокВыбора = СписокВыбора;
	ЭлементВидСравнения.Значение = СписокВыбора[0].Значение;
	Если ЭлементДинамическогоОтбора <> Неопределено
		И ТипЗнч(ЭлементДинамическогоОтбора.ВидСравнения) = Тип("Строка")
		И СписокВыбора.НайтиПоЗначению(ЭлементДинамическогоОтбора.ВидСравнения) <> Неопределено Тогда
		// Восстановим значение
		ЭлементВидСравнения.Значение = ЭлементДинамическогоОтбора.ВидСравнения;
	Иначе
		// Возьмем значение по умолчанию
		Если СтрокаОтбора.Использование Тогда
			ЭлементВидСравнения.Значение = "Выбранные";
		КонецЕсли;
	КонецЕсли;
	ЭлементВидСравнения.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
	ЭлементВидСравнения.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Лево);
	
	СтруктураЭлементовУправления.ДинамическийОтборВидСравнения = ЭлементВидСравнения;
	
	Если СтрокаОтбора.СохранятьСписок Тогда
		// Добавление надписи Сохранить список
		ЭлементНадпись        = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "СохранитьСписок", Истина, ЭлементыФормы.ПанельЗакладок);
		ЭлементНадпись.Лево   = ШиринаПанелиЗакладки - 125;
		ЭлементНадпись.Верх   = Верх - 5;
		ЭлементНадпись.Ширина = 30;
		ЭлементНадпись.Высота = 30;
		ЭлементНадпись.Заголовок  = "";
		ЭлементНадпись.Картинка   = БиблиотекаКартинок.СохранитьСписок;
		ЭлементНадпись.ГиперСсылка = Истина;
		ЭлементНадпись.Подсказка = "Сохранить этот список";
		ЭлементНадпись.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		ЭлементНадпись.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСохранитьСписок);
		ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
		ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
		СтруктураЭлементовУправления.ДинамическийОтборСохранитьСписок = ЭлементНадпись;
		
		// Добавление надписи Загрузить список
		ЭлементНадпись        = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "ЗагрузитьСписок", Истина, ЭлементыФормы.ПанельЗакладок);
		ЭлементНадпись.Лево   = ШиринаПанелиЗакладки - 105;
		ЭлементНадпись.Верх   = Верх - 5;
		ЭлементНадпись.Ширина = 30;
		ЭлементНадпись.Высота = 30;
		ЭлементНадпись.Заголовок  = "";
		ЭлементНадпись.Картинка   = БиблиотекаКартинок.ЗагрузитьСписок;
		ЭлементНадпись.Подсказка = "Загрузить сохраненный список";
		ЭлементНадпись.ГиперСсылка = Истина;
		ЭлементНадпись.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		ЭлементНадпись.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиЗагрузитьСписок);
		ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
		ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
		
		СтруктураЭлементовУправления.ДинамическийОтборЗагрузитьСписок = ЭлементНадпись;
		
	КонецЕсли;
	
	// Сохранить загрузить список
	// Добавление Кнопки Подбор
	КнопкаПодбор = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтбор" + Индекс + "КнопкаПодбор", Истина, ЭлементыФормы.ПанельЗакладок);
	КнопкаПодбор.Лево   = ШиринаПанелиЗакладки - 85;
	КнопкаПодбор.Верх   = Верх;
	КнопкаПодбор.Ширина = 75;
	КнопкаПодбор.Высота = 19;
	КнопкаПодбор.ЦветФонаКнопки = ЦветФонаКнопки;
	Верх = Верх + 19 + 6;
	Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Тип.Типы().Количество() > 1 тогда
		КнопкаПодбор.Заголовок = "Подбор...";
	Иначе
		КнопкаПодбор.Заголовок = "Подбор";
	КонецЕсли;
	Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиКнопкаПодборНажатие") тогда
		КнопкаПодбор.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиКнопкаПодборНажатие);
	КонецЕсли;
	КнопкаПодбор.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
	КнопкаПодбор.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
	//УстановитьПравуюПривязкуПолностью(КнопкаПодбор, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийОтборКнопкаПодбор = КнопкаПодбор;
	
	// Добавление Табличного поля для списка
	ЭлементТабличноеПоле = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическийОтбор" + Индекс + "ТабличноеПоле", Истина, ЭлементыФормы.ПанельЗакладок);
	ЭлементТабличноеПоле.Лево           = 6;
	ЭлементТабличноеПоле.Верх           = Верх;
	ЭлементТабличноеПоле.Ширина         = ШиринаПанелиЗакладки - 15;
	ЭлементТабличноеПоле.Высота         = 79 * ?(СтрокаОтбора.ВидОтбора = "Список", 1, 2);
	Верх = Верх + ЭлементТабличноеПоле.Высота + 6;
	ЭлементТабличноеПоле.ТолькоПросмотр = Ложь;
	ЭлементТабличноеПоле.Шапка          = Ложь;
	ЭлементТабличноеПоле.Значение       = Новый ТаблицаЗначений;
	УстановитьПравуюПривязку(ЭлементТабличноеПоле, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийОтборТабличноеПоле = ЭлементТабличноеПоле;
	
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("Значение", ДоступноеПоле.Тип);
	НоваяКолонка                             = ЭлементТабличноеПоле.Колонки.Добавить("Значение", "");
	НоваяКолонка.Данные                      = "Значение";
	ЭлементТабличноеПоле.ГоризонтальныеЛинии = Ложь;
	//Получить из значений
	Если ЭлементДинамическогоОтбора <> Неопределено 
		И ТипЗнч(ЭлементДинамическогоОтбора.Значение) = Тип("СписокЗначений") Тогда
		// Восстановим значение списка отбора
		Для каждого ЭлементСписка Из ЭлементДинамическогоОтбора.Значение Цикл
			НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
			НоваяСтрока.Значение = ЭлементСписка.Значение;
		КонецЦикла;
	Иначе
		// Проверим есть ли значение по умолчанию
		Если СтрокаОтбора.Значение.Количество() > 0 Тогда
			Для каждого ЭлементСписка Из СтрокаОтбора.Значение Цикл
				НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
				НоваяСтрока.Значение = ЭлементСписка.Значение;
				Если Не ЗначениеЗаполнено(НоваяСтрока.Значение) Тогда
					ЭлементТабличноеПоле.Значение.Удалить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементТабличноеПоле.УстановитьДействие("ПриОкончанииРедактирования", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиОкончаниеРедактированиеТабличногоПоля);
	ЭлементТабличноеПоле.УстановитьДействие("ПослеУдаления", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиУдалениеСтрокиТабличногоПоля);
	Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияТабличногоПоля") тогда
		ЭлементТабличноеПоле.Колонки.Значение.ЭлементУправления.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияТабличногоПоля);
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора тогда
		ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияАналитическихОтборов(ЗначенияНастроек, ЭлементыФормы) Экспорт
	
	//АналитическиеОтборы
	ЗначенияАналитическихОтборов = Новый Структура;
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыКоличествоТоп");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПроцентТоп");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеТоп");
	
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПроцентПорог");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыРесурсПорог");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеПорог");
	
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборТренд");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборТренд");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборСостояние");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборСостояние");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборABCКлассификация");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборABCКлассификация");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыСкрытьНулевые");
	
	ЗначенияНастроек.Вставить("АналитическиеОтборы", ЗначенияАналитическихОтборов);
	
КонецПроцедуры //

Процедура ВставитьЗначениеЭлементаФормы(ЭлементыФормы, Структура, Имя)
	
	Ключ = СтрЗаменить(Имя, "АналитическиеОтборы", "");
	Ключ = СтрЗаменить(Ключ, "НастройкиПрогноза", "");
	
	Если ЭлементыФормы.Найти(Имя) <> Неопределено Тогда
		Структура.Вставить(Ключ, ЭлементыФормы[Имя].Значение);
	Иначе
		Структура.Вставить(Ключ, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	ДеревоНастроекСтандартныхСтраниц  = Новый ДеревоЗначений;
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Использование");
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Имя");
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Представление");
	
	АналитическиеОтборы = ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Период", "Период");
	
	Параметры  = ложь;
	Показатели = ложь;
	Отбор      = ложь;
	Порядок    = ложь;
	
	Если ФормаОтчета <> Неопределено тогда
		Если ФормаОтчета.ЭлементыФормы.Найти("ПанельЗакладок") <> Неопределено тогда
			Страницы = ФормаОтчета.ЭлементыФормы.ПанельЗакладок.Страницы;
			Параметры  = ?(Страницы.Найти("Параметры") <> Неопределено И Страницы.Параметры.Видимость, Страницы.Параметры.Видимость, Параметры);
			Показатели = ?(Страницы.Найти("Показатели") <> Неопределено И Страницы.Показатели.Видимость, Страницы.Показатели.Видимость, Показатели);
			Отбор      = ?(Страницы.Найти("Отбор") <> Неопределено И Страницы.Отбор.Видимость, Страницы.Отбор.Видимость, Отбор);
			Порядок    = ?(Страницы.Найти("Порядок") <> Неопределено И Страницы.Порядок.Видимость, Страницы.Порядок.Видимость, Порядок);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Параметры, "Параметры", "Параметры");
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Показатели, "Показатели", "Показатели");
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Отбор, "Отбор", "Отбор");
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Порядок, "Порядок", "Сортировка");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДеревоНастроекСтандартныхСтраниц", ДеревоНастроекСтандартныхСтраниц);
	Параметры.Вставить("Отборы", Новый ТаблицаЗначений);
	Группировки = Новый ТаблицаЗначений;
	Группировки.Колонки.Добавить("Группировка");
	Группировки.Колонки.Добавить("Представление");
	Группировки.Колонки.Добавить("ПредставлениеСтрок");
	Группировки.Колонки.Добавить("ПредставлениеКолонок");
	Группировки.Колонки.Добавить("НастраиватьИерархию");
	Группировки.Колонки.Добавить("Использование");
	Параметры.Вставить("Группировки", Группировки);
	
	СписокДоступныхОтносительныхПериодов = Новый СписокЗначений;
	СписокДоступныхОтносительныхПериодов.Добавить("Предыдущий", "Предыдущий", Истина);
	СписокДоступныхОтносительныхПериодов.Добавить("СНачала", "С начала текущего", Истина);
	СписокДоступныхОтносительныхПериодов.Добавить("Текущий", "Текущий", Истина);
	СписокДоступныхОтносительныхПериодов.Добавить("ДоКонца", "До конца текущего", Истина);
	СписокДоступныхОтносительныхПериодов.Добавить("Следующий", "Следующий", Истина);
	Параметры.Вставить("СписокДоступныхОтносительныхПериодов", СписокДоступныхОтносительныхПериодов);
	
	Параметры.Вставить("ПроизвольныйПериод", Истина);
	ДополнительныеНастройкиОтчета = Новый Массив;
	Попытка 
		ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();
	Исключение
	КонецПопытки;
	Для каждого ДопНастройка из ДополнительныеНастройкиОтчета Цикл
		Параметры.Вставить(ДопНастройка.Имя, ДопНастройка.ЗначениеПоУмолчанию);
	КонецЦикла;
	//Если ДополнительныеНастройкиОтчета.Количество = Тип("ДиаграммаГанта")  тогда
	//	Параметры.Вставить("ВыводитьДиаграммуГантаВОтчете", Истина);
	//	Параметры.Вставить("ПризнакВыводаДиаграммыГантаНаПанель", Истина);
	//КонецЕсли;
	ДоступныеПериодичности = Новый ТаблицаЗначений;
	ДоступныеПериодичности.Колонки.Добавить("Периодичность");
	ДоступныеПериодичности.Колонки.Добавить("РассчитыватьЧерез");
	ДоступныеПериодичности.Колонки.Добавить("Использование");
	ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Год",       Истина);
	ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Полугодие", Истина);
	ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Квартал",   Истина);
	ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Месяц",     Истина);
	ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Декада",    Истина);
	ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Неделя",    Истина);
	ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "День",      Истина);
	
	Параметры.Вставить("ДоступныеПериодичности", ДоступныеПериодичности);
	
	Возврат Параметры;
	
	
КонецФункции

Функция ДобавитьСтрокуПериодичности(Таблица, Периодичность, Использование) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Периодичность = Периодичность;
	НоваяСтрока.Использование = Использование;
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавитьИЗаполнитьСтроку(Родитель, Использование, Имя, Представление) Экспорт
	
	НоваяСтрока = Родитель.Строки.Добавить();
	НоваяСтрока.Использование = Использование;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	Возврат НоваяСтрока;
	
КонецФункции

// Возвращает массив выбранных полей или групп выбранных полей
Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	ДобавитьВыбранныеПоляВМассивДляПоказателей(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьВыбранныеПоляВМассивДляПоказателей(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь)
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			Если Элемент.Использование тогда
				ДобавитьВыбранныеПоляВМассивДляПоказателей(Элемент.Элементы, МассивПолей, ТолькоГруппы);
			КонецЕсли;
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДоступноеПоле(Знач Поле, ОбластьПоиска) Экспорт
	
	Возврат ОбластьПоиска.НайтиПоле(Поле);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// ДИНАМИЧЕСКИЕ ОТБОРЫ
Процедура НарисоватьПериодПолемВыбора(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели)
	
	Если Не Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсполненияОтчета = Неопределено;
	Попытка
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	Если ПараметрыИсполненияОтчета = Неопределено или НЕ ПараметрыИсполненияОтчета.Свойство("МинимальныйПериодОтчета") тогда
		Возврат;
	КонецЕсли;
	
	МинимальныйПериодОтчета = ПараметрыИсполненияОтчета.МинимальныйПериодОтчета;
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ЦветФонаКнопки = Новый Цвет(246, 244, 236);
	
	// Закладка Стандартный Период
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Лево = 0;
	
	// Стандартный период
	Если ЗначениеПараметраНачалоПериода <> Неопределено
		И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		
		//	   	Панель = Неопределено;
		ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;
		Панель = ЭлементыФормы.ПанельПользователяГоризонтальная;
		
		Верх = 6;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, Панель);
		НовыйЭлемент.Данные = "СтандартныйПериод";
		НовыйЭлемент.Видимость = Ложь;
		
		// Поле выбора Стандартный период
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, Панель);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 200;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		//НовыйЭлемент.РедактированиеТекста = ложь;
		СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);;
		НовыйЭлемент.СписокВыбора = СписокВыбора;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		// Восстанавливаем значение
		Если ЗначенияНастроек.Свойство("СтандартныйПериод") Тогда
			СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;
			Если СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено Тогда
				НовыйЭлемент.Значение = СтандартныйПериод.Вариант;
				ФормаОтчета.СтандартныйПериод = СтандартныйПериод;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);
		
		//Верх = Верх + НовыйЭлемент.Высота + 6;
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		// Надпись с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, Панель);
		НовыйЭлемент.Верх = Верх+2;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 40;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
		НовыйЭлемент.Заголовок = "период:";
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		// Дата с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборПериодВыбор",, Панель);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.КнопкаВыбора = ложь;
		НовыйЭлемент.Ширина = 130;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "";
		НовыйЭлемент.КнопкаСпискаВыбора = истина;
		
		НовыйЭлемент.Значение = ПолучитьПредставлениеПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета.СтандартныйПериод.ДатаОкончания, МинимальныйПериодОтчета); 
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка;
		НовыйЭлемент.УстановитьДействие("НачалоВыбораИзСписка", Действие);
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста;
		НовыйЭлемент.УстановитьДействие("АвтоПодборТекста", Действие);
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборОчистка;
		НовыйЭлемент.УстановитьДействие("Очистка", Действие);
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста;
		НовыйЭлемент.УстановитьДействие("ОкончаниеВводаТекста", Действие);
		
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		ЕстьПериодНаГорПанели = Истина;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, Панель);
		НовыйЭлемент.Заголовок = "...";
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 15;
		НовыйЭлемент.Высота = 19;
		НовыйЭлемент.Подсказка = "Выбор произвольного периода";
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора;
		НовыйЭлемент.УстановитьДействие("Нажатие", Действие);
		
	КонецЕсли;
	
	Если ЗначениеПараметраНачалоПериода <> Неопределено	И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		Лево = Лево + 16;
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьСтандартныйПериод(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели)
	
	Если Не Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсполненияОтчета = Неопределено;
	Попытка
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	Если ПараметрыИсполненияОтчета <> Неопределено и ПараметрыИсполненияОтчета.Свойство("МинимальныйПериодОтчета") тогда
		НарисоватьПериодПолемВыбора(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели);
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ЦветФонаКнопки = Новый Цвет(246, 244, 236);
	// Закладка Стандартный Период
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметраПериод        = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Лево = 0;
	
	// Стандартный период
	Если ЗначениеПараметраНачалоПериода <> Неопределено
		И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		
		//	   	Панель = Неопределено;
		ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;
		Панель = ЭлементыФормы.ПанельПользователяГоризонтальная;
		
		Верх = 6;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, Панель);
		НовыйЭлемент.Данные = "СтандартныйПериод";
		НовыйЭлемент.Видимость = Ложь;
		
		// Поле выбора Стандартный период
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, Панель);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 200;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		//НовыйЭлемент.РедактированиеТекста = ложь;
		СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);;
		НовыйЭлемент.СписокВыбора = СписокВыбора;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		// Восстанавливаем значение
		Если ЗначенияНастроек.Свойство("СтандартныйПериод") Тогда
			СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;
			Если СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено Тогда
				НовыйЭлемент.Значение = СтандартныйПериод.Вариант;
				ФормаОтчета.СтандартныйПериод = СтандартныйПериод;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);
		
		//Верх = Верх + НовыйЭлемент.Высота + 6;
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		// Надпись с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, Панель);
		НовыйЭлемент.Верх = Верх+2;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 6;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
		НовыйЭлемент.Заголовок = "с:";
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		// Дата с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаНачала",, Панель);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартныйПериод.ДатаНачала";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		
		// Надпись по
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьПо",, Панель);
		НовыйЭлемент.Верх = Верх+2;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 6;
		НовыйЭлемент.Заголовок = "по:";
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		
		// Дата по
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаОкончания",, Панель);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартныйПериод.ДатаОкончания";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		ЕстьПериодНаГорПанели = Истина;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, Панель);
		НовыйЭлемент.Заголовок = "...";
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 15;
		НовыйЭлемент.Высота = 19
		;
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора;
		НовыйЭлемент.УстановитьДействие("Нажатие", Действие);
		
	КонецЕсли;
	
	// Стандартная дата начала
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Вставить(0, "ДинамическийОтборСтандартнаяДатаНачала", "Период");
		//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтборСтандартнаяДатаНачала", "Период");
		//Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
		//ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(НоваяСтраница, -(Количество-1));
		//НоваяСтраница.Раскрыта = Истина;
		
		ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;
		
		Верх = 6;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартнаяДатаНачала",, ЭлементыФормы.ПанельПользователяГоризонтальная);
		НовыйЭлемент.Данные = "СтандартнаяДатаНачала";
		НовыйЭлемент.Видимость = Ложь;
		
		// Поле выбора Стандартная дата начала
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартнаяДатаНачалаПользователя",, ЭлементыФормы.ПанельПользователяГоризонтальная);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 200;
		НовыйЭлемент.Высота = 19;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		//		НовыйЭлемент.РедактированиеТекста = ложь;
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		СписокВыбора = ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(Параметры);
		НовыйЭлемент.СписокВыбора = СписокВыбора;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		//		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		// Восстанавливаем значение варианта стандартной даты начала
		Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
			СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;
			Если СписокВыбора.НайтиПоЗначению(СтандартнаяДатаНачала.Вариант) <> Неопределено Тогда
				НовыйЭлемент.Значение = СтандартнаяДатаНачала.Вариант;
				ФормаОтчета.СтандартнаяДатаНачала = СтандартнаяДатаНачала;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартнаяДатаНачала);
		
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		//Верх = Верх + 19 + 6;
		
		// Надпись дата
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьДата",, ЭлементыФормы.ПанельПользователяГоризонтальная);
		НовыйЭлемент.Верх = Верх+2;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 26;
		НовыйЭлемент.Заголовок = "дата:";
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		
		// Поле ввода даты
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДата",, ЭлементыФормы.ПанельПользователяГоризонтальная);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартнаяДатаНачала.Дата";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартнойДатыНачала.ПроизвольнаяДата) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		// Восстанавливаем значение
		//Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
		//	СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;
		//	НовыйЭлемент.Значение = СтандартнаяДатаНачала.Дата;
		//КонецЕсли;
		
		ЕстьПериодНаГорПанели = Истина;
		
	КонецЕсли;
	
	Если ЗначениеПараметраПериод <> Неопределено ИЛИ (ЗначениеПараметраНачалоПериода <> Неопределено 
		И ЗначениеПараметраКонецПериода <> Неопределено) Тогда
		Лево = Лево + 16;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПравуюПривязку(Элемент, Панель) Экспорт
	
	Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	
КонецПроцедуры

Процедура УстановитьЛевуюПривязку(Элемент, Панель) Экспорт
	
	Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
	
КонецПроцедуры

Функция ПолучитьДоступныйПараметрПоПараметруКомпоновкиДанных(ПарамтерКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПарамтерКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПараметрКомпоновкиДанных(ПарамтерКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПарамтерКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляПараметровДанных.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПараметр(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Процедура НарисоватьПараметрОтчета(ФормаОтчета, Индекс, СтрокаПараметра,  Лево, ЦветФонаКнопки, Параметр, ДоступныйПараметр, ЭлементДинамическогоПараметра, ПараметрыИсполненияОтчета = Неопределено, ПоследнийЭлемент = ложь, ПредыдущийЭлемент = Неопределено, СреднийРазмерЭлементаУправления = Неопределено)
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаПараметра,
	|СтраницаПанели, 
	|ДинамическийПараметрНадпись, 
	|ДинамическийПараметрПолеВвода,
	|ДинамическийПараметрТабличноеПоле,
	|ДинамическийПараметрПереключатель");
	
	СтруктураЭлементовУправления.СтрокаПараметра = СтрокаПараметра;
	Если СтрокаПараметра.ВыводитьНа = "ГоризонтальнаяПанель" И ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено тогда
		Если СтрокаПараметра.ОтображатьКак = "ПолеВвода" или СтрокаПараметра.ОтображатьКак = "СписокЗначение" тогда
			
			ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
			
			СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельПользователяГоризонтальная;
			
			НовыйЭлементНадпись = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийПараметр" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
			НовыйЭлементНадпись.Верх = 6;
			НовыйЭлементНадпись.Лево = Лево;
			НовыйЭлементНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			СреднийРазмерЭлементаУправления = ?(СреднийРазмерЭлементаУправления = Неопределено, СтрДлина(ДоступныйПараметр.Заголовок)*7, СреднийРазмерЭлементаУправления);
			НовыйЭлементНадпись.Ширина = ?(СреднийРазмерЭлементаУправления > СтрДлина(ДоступныйПараметр.Заголовок)*7, СтрДлина(ДоступныйПараметр.Заголовок)*7, СреднийРазмерЭлементаУправления);
			НовыйЭлементНадпись.Высота = 19;
			НовыйЭлементНадпись.Заголовок = ДоступныйПараметр.Заголовок+":";
			Лево = Лево + НовыйЭлементНадпись.Ширина + 6;
			//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
			СтруктураЭлементовУправления.ДинамическийПараметрНадпись = НовыйЭлементНадпись;
			Если ПредыдущийЭлемент = Неопределено тогда
				УстановитьЛевуюПривязку(НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная)
			Иначе
				УстановитьПривязкуКПравойГранице(НовыйЭлементНадпись, ПредыдущийЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
			КонецЕсли;
			УстановитьПривязкуКЛевойГранице(НовыйЭлементНадпись, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
			//УстановитьПривязкуКПравойГранице(НовыйЭлемент, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
			
			
			Если СтрокаПараметра.ОтображатьКак <> "СписокЗначение" И ДоступныйПараметр.ДоступныеЗначения <> Неопределено тогда
				НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
			Иначе
				НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
			КонецЕсли;
			НовыйЭлемент.Верх = 6;
			НовыйЭлемент.Лево = Лево;
			Если СтрокаПараметра.Владелец().Колонки.Найти("МаленкийЭлементУпавления") <> Неопределено  и СтрокаПараметра.МаленкийЭлементУпавления тогда
				НовыйЭлемент.Ширина = СреднийРазмерЭлементаУправления/2.5; 
			Иначе
				НовыйЭлемент.Ширина = СреднийРазмерЭлементаУправления; 
			КонецЕсли;
			НовыйЭлемент.АвтоОтметкаНезаполненного = СтрокаПараметра.Заполнено;
			//КонецЕсли;
			НовыйЭлемент.ТипЗначения = ДоступныйПараметр.Тип;
			Если ДоступныйПараметр.ДоступныеЗначения <> Неопределено тогда
				НовыйЭлемент.СписокВыбора = ДоступныйПараметр.ДоступныеЗначения;
				//НовыйЭлемент.КнопкаВыбора = ложь;
				//НовыйЭлемент.КнопкаСпискаВыбора = истина;
			КонецЕсли;
			Если СтрокаПараметра.ОтображатьКак = "СписокЗначение" тогда
				НовыйЭлемент.Значение          = Новый СписокЗначений;
				НовыйЭлемент.ТипЗначения       = Новый ОписаниеТипов("СписокЗначений");
				НовыйЭлемент.ТипЗначенияСписка = ДоступныйПараметр.Тип;
			КонецЕсли;
			НовыйЭлемент.ЦветФонаКнопки    = ЦветФонаКнопки;
			Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиИзменениеЗначенияДинамическогоПараметра") тогда
				НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоПараметра);
			КонецЕсли;
			Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоПараметра") тогда
				НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоПараметра);
			КонецЕсли;
			//Получить из значений
			Если ЭлементДинамическогоПараметра <> Неопределено  Тогда
				// Восстановим значение
				НовыйЭлемент.Значение = ЭлементДинамическогоПараметра.Значение;
			Иначе
				// Установим значение по умолчанию
				НовыйЭлемент.Значение = Параметр.Значение;
			КонецЕсли;
			
			СтруктураЭлементовУправления.ДинамическийПараметрПолеВвода = НовыйЭлемент;
			
			Если ПоследнийЭлемент тогда
				УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
				НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, НовыйЭлементНадпись, ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователяГоризонтальная, ГраницаЭлементаУправления.Право)
			Иначе				
				УстановитьПривязкуКПравойГранице(НовыйЭлемент, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
				УстановитьПривязкуКЛевойГранице(НовыйЭлемент, НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
			КонецЕсли;
			
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			ПредыдущийЭлемент = НовыйЭлемент;
		КонецЕсли;
		
	ИначеЕсли СтрокаПараметра.ВыводитьНа = "ПраваяПанель" или (ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") = Неопределено) И СтрокаПараметра.ВыводитьНа <> "" тогда
		
		Верх = 6;
		ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
		ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина - 15;
		НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийПараметр"+ Индекс + "Страница", ДоступныйПараметр.Заголовок, СтрокаПараметра.Параметр);
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
		СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
		
		Если СтрокаПараметра.ОтображатьКак = "ПолеВвода" тогда
			
			
			//НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийПарамтер" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельЗакладок);
			//НовыйЭлемент.Верх = Верх;
			//НовыйЭлемент.Лево = 6;
			//НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 19;
			//НовыйЭлемент.Заголовок = ДоступныйПараметр.Заголовок;
			Если ДоступныйПараметр.ДоступныеЗначения <> Неопределено тогда
				НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельЗакладок);
			Иначе
				НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельЗакладок);
			КонецЕсли;
			НовыйЭлемент.Верх = Верх;
			НовыйЭлемент.Лево = 6;
			НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 15;
			НовыйЭлемент.АвтоОтметкаНезаполненного  = СтрокаПараметра.Заполнено;
			НовыйЭлемент.ТипЗначения = ДоступныйПараметр.Тип;
			Если ДоступныйПараметр.ДоступныеЗначения <> Неопределено тогда
				НовыйЭлемент.СписокВыбора = ДоступныйПараметр.ДоступныеЗначения;
			КонецЕсли;
			НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
			Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиИзменениеЗначенияДинамическогоПараметра") тогда
				НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоПараметра);
			КонецЕсли;
			УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
			Если ЭлементДинамическогоПараметра <> Неопределено  Тогда
				// Восстановим значение
				НовыйЭлемент.Значение = ЭлементДинамическогоПараметра.Значение;
			Иначе
				// Установим значение по умолчанию
				НовыйЭлемент.Значение = Параметр.Значение;
			КонецЕсли;
			СтруктураЭлементовУправления.ДинамическийПараметрПолеВвода = НовыйЭлемент;
			
		ИначеЕсли СтрокаПараметра.ОтображатьКак = "СписокЗначение" тогда
			// Добавление Табличного поля для списка
			ЭлементТабличноеПоле = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическийПараметр" + Индекс + "ТабличноеПоле", Истина, ЭлементыФормы.ПанельЗакладок);
			ЭлементТабличноеПоле.Лево           = 6;
			ЭлементТабличноеПоле.Верх           = Верх;
			ЭлементТабличноеПоле.Ширина         = ШиринаПанелиЗакладки - 15;
			ЭлементТабличноеПоле.Высота         = 79;
			Верх = Верх + ЭлементТабличноеПоле.Высота + 6;
			ЭлементТабличноеПоле.ТолькоПросмотр = Ложь;
			ЭлементТабличноеПоле.Шапка          = Ложь;
			ЭлементТабличноеПоле.Значение       = Новый ТаблицаЗначений;
			УстановитьПравуюПривязку(ЭлементТабличноеПоле, ЭлементыФормы.ПанельЗакладок);
			
			ЭлементТабличноеПоле.Значение.Колонки.Добавить("Значение", ДоступныйПараметр.Тип);
			НоваяКолонка                             = ЭлементТабличноеПоле.Колонки.Добавить("Значение", "");
			НоваяКолонка.Данные                      = "Значение";
			ЭлементТабличноеПоле.ГоризонтальныеЛинии = Ложь;
			//Получить из значений
			Если ЭлементДинамическогоПараметра <> Неопределено 
				И ТипЗнч(ЭлементДинамическогоПараметра.Значение) = Тип("СписокЗначений") Тогда
				// Восстановим значение списка отбора
				Для каждого ЭлементСписка Из ЭлементДинамическогоПараметра.Значение Цикл
					НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
					НоваяСтрока.Значение = ЭлементСписка.Значение;
				КонецЦикла;
			Иначе
				// Проверим есть ли значение по умолчанию
				Если Параметр <> Неопределено 
					И ТипЗнч(Параметр.Значение) = Тип("СписокЗначений") Тогда
					// Восстановим значение списка отбора
					Для каждого ЭлементСписка Из Параметр.Значение Цикл
						НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
						НоваяСтрока.Значение = ЭлементСписка.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПоле = НовыйЭлемент;
			
		ИначеЕсли СтрокаПараметра.ОтображатьКак = "Переключатель" тогда
			Если ДоступныйПараметр.ДоступныеЗначения <> Неопределено тогда			
				ПервыйВГруппе = истина;
				Массив = Новый Массив;
				Сч = 0;
				Для каждого ЭлементСписка из ДоступныйПараметр.ДоступныеЗначения Цикл
					НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Переключатель"), "ДинамическийПараметр" + Индекс + Сч + "Переключатель", Истина, ЭлементыФормы.ПанельЗакладок);
					НовыйЭлемент.Заголовок     = ?(СтрДлина(ЭлементСписка.Представление) = 0 ,Строка(ЭлементСписка.Значение), ЭлементСписка.Представление);
					НовыйЭлемент.Подсказка     = ?(СтрДлина(ЭлементСписка.Представление) = 0 ,Строка(ЭлементСписка.Значение), ЭлементСписка.Представление);
					НовыйЭлемент.ПервыйВГруппе = ПервыйВГруппе;
					//НовыйЭлемент.Данные        = СтрокаПараметра.Параметр;
					НовыйЭлемент.ТипЗначения   = ДоступныйПараметр.Тип;
					Если ПервыйВГруппе тогда
						ПервыйВГруппеЭлемент = НовыйЭлемент;
					КонецЕсли;
					ПервыйВГруппе              = ложь;
					НовыйЭлемент.ВыбираемоеЗначение = ЭлементСписка.Значение;
					НовыйЭлемент.Лево           = 6;
					НовыйЭлемент.Ширина         = ШиринаПанелиЗакладки - 12;
					НовыйЭлемент.Верх           = Верх;
					НовыйЭлемент.Высота         = 15;
					Верх = Верх + 15 + 6;
					Сч = Сч + 1;
					Массив.Добавить(НовыйЭлемент);
					УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
				КонецЦикла;
				Если ЭлементДинамическогоПараметра <> Неопределено  Тогда
					// Восстановим значение
					ПервыйВГруппеЭлемент.Значение = ЭлементДинамическогоПараметра.Значение;
				Иначе
					// Установим значение по умолчанию
					ПервыйВГруппеЭлемент.Значение = Параметр.Значение;
				КонецЕсли;
				СтруктураЭлементовУправления.ДинамическийПараметрПереключатель = Массив;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПараметра") И ПараметрыИсполненияОтчета.ПослеВыводаПараметра тогда
		ФормаОтчета.ПослеВыводаПараметра(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьГруппировкуОтчета(ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета = Неопределено)
	
	ВидыГруппировок = Новый Соответствие;
	
	//опредлим вид группировки
	ПерваяГруппировка = Неопределено;
	Если Группировки = Неопределено тогда
		Возврат;
	КонецЕсли;
	Если Группировки.Количество() > 0 тогда
		ПерваяГруппировка = Группировки[0].Значение;
	Иначе
		Возврат;
	КонецЕсли;
	Если ПерваяГруппировка = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда  //рисуем элемент группировки
		НарисоватьЭлементУправленияГруппировокой(ФормаОтчета,  ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета);
	ИначеЕсли ТипЗнч(ПерваяГруппировка) = Тип("ТаблицаКомпоновкиДанных") тогда
		НарисоватьЭлементУправленияТаблицейДиаграммой(ФормаОтчета,  ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета);
	ИначеЕсли ТипЗнч(ПерваяГруппировка) = Тип("ДиаграммаКомпоновкиДанных") тогда
		НарисоватьЭлементУправленияТаблицейДиаграммой(ФормаОтчета,  ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета);
	КонецЕсли;
КонецПроцедуры

Процедура НарисоватьЭлементУправленияГруппировокой(ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета)
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаГруппировки,
	|СтраницаПанели, 
	|ДинамическаяГруппировкаНадписьСтрок, 
	|ДинамическаяГруппировкаНадписьКолонок, 
	
	|ДинамическийПараметрТабличноеПоле,
	|ДинамическийПараметрКаманднаяПанель,
	
	|ДинамическийПараметрТабличноеПолеСтрок,
	|ДинамическийПараметрКаманднаяПанельСтрок,
	
	|ДинамическийПараметрТабличноеПолеКолонок,
	|ДинамическийПараметрКаманднаяПанельКолонок");
	
	СтруктураЭлементовУправления.СтрокаГруппировки = СтрокаГруппировки;
	
	Верх = 6;
	ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;
	НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическаяГруппировка"+ Индекс + "Страница", СтрокаГруппировки.Представление);
	ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
	СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
	
	// нарисовать таблицу группировки
	ЭлементТабличноеПоле                = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПоле", Истина, ЭлементыФормы.ПанельЗакладок);
	ЭлементТабличноеПоле.Лево           = 6;
	ЭлементТабличноеПоле.Верх           = Верх;
	ЭлементТабличноеПоле.Ширина         = ШиринаПанелиЗакладки - 18 -24 ;
	ЭлементТабличноеПоле.Высота         = 79;
	Верх                                = Верх + ЭлементТабличноеПоле.Высота + 6;
	ЭлементТабличноеПоле.ТолькоПросмотр = Ложь;
	ЭлементТабличноеПоле.Шапка          = Ложь;
	ЭлементТабличноеПоле.Значение       = Новый ТаблицаЗначений;
	ЭлементТабличноеПоле.ГоризонтальныеЛинии = Ложь;
	ЭлементТабличноеПоле.ВертикальныеЛинии   = ложь;
	ЭлементТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	ЭлементТабличноеПоле.ИзменятьСоставСтрок  = ложь;
	ЭлементТабличноеПоле.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
	СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПоле = ЭлементТабличноеПоле;
	ЭлементТабличноеПоле.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);
	
	УстановитьПравуюПривязку(ЭлементТабличноеПоле, ЭлементыФормы.ПанельЗакладок);
	
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));
	
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ИспользованиеИерархии", "");
	НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Использование", "");
	НоваяКолонка.ДанныеФлажка        = "Использование";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ЗначениеИерархии", "");
	НоваяКолонка.Данные              = "ЗначениеИерархии";
	НоваяКолонка.Видимость           = ложь;
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Значение", "");
	НоваяКолонка.Данные              = "Значение";
	НоваяКолонка.Видимость           = ложь;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ПредставлениеИерархии", "");
	НоваяКолонка.Данные              = "ПредставлениеИерархии";
	НоваяКолонка.ТолькоПросмотр      = истина;
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Представление", "");
	НоваяКолонка.Данные              = "Представление";
	НоваяКолонка.ТолькоПросмотр      = истина;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	//	НоваяКолонка.ЭлементУправления.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ПриВыбореПоляГруппировки);
	
	ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанель", Истина, ЭлементыФормы.ПанельЗакладок); 
	ЭлементКоманднаяПанель.Верх     = 19;
	ЭлементКоманднаяПанель.Высота   = 47;
	ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 30;
	ЭлементКоманднаяПанель.Ширина   = 24;
	ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	ЭлементКоманднаяПанель.ИсточникДействий = ЭлементТабличноеПоле;
	УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанель = ЭлементКоманднаяПанель;
	
	КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверх", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);
	КнопкаВверх.Картинка          = БиблиотекаКартинок.ПереместитьВверх;
	КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;
	КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВниз", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);
	КнопкаВниз.Картинка           = БиблиотекаКартинок.ПереместитьВниз;
	КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;
	
	//СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПоле = НовыйЭлемент;
	
	//Добавить строки группировки
	Для каждого Группировка из Группировки Цикл
		СтрокаГруп = ЭлементТабличноеПоле.Значение.Добавить();
		Представление = "";
		ИспользоватьИерархию = ложь;
		Для каждого ПолеГруппировки из Группировка.Значение.ПоляГруппировки.Элементы Цикл
			СтрокаГруп.Значение.Добавить(Строка(ПолеГруппировки.Поле));
			СтрокаГруп.ЗначениеИерархии.Добавить(ПолеГруппировки.ТипГруппировки);
			ИспользоватьИерархию = Ложь;
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеГруппировки.Поле, ОтчетОбъект.КомпоновщикНастроек);
			ТипыПоля = ДоступноеПоле.Тип.Типы();
			Для каждого ТипПоля из ТипыПоля Цикл
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
				Если ОбъектМетаданных <> Неопределено и Метаданные.Справочники.Содержит(ОбъектМетаданных) тогда
					ИспользоватьИерархию = ОбъектМетаданных.Иерархический;
				КонецЕсли;
			КонецЦикла;
			Представление = Представление + ?(Представление = "", "", ", ") + ДоступноеПоле.Заголовок;
		КонецЦикла;
		СтрокаГруп.Представление         = Представление;
		Если СтрокаГруппировки["НастраиватьИерархию"] И ИспользоватьИерархию тогда
			СтрокаГруп.ПредставлениеИерархии = "" + Представление + " (по группам)";
		КонецЕсли;
		СтрокаГруп.Использование         = Группировка.Значение.Использование;
		СтрокаГруп.ИспользованиеИерархии = Группировка.Значение.Использование И ИспользоватьИерархию;
	КонецЦикла;
	
	Если ЭлементДинамическойГруппировки <> Неопределено тогда
		ПрименитьНастройкуПользователя(ЭлементТабличноеПоле.Значение, ЭлементДинамическойГруппировки.СписокГруппировки);
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаГруппировки") И ПараметрыИсполненияОтчета.ПослеВыводаГруппировки тогда
		ФормаОтчета.ПослеВыводаГруппировки(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьЭлементУправленияТаблицейДиаграммой(ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета)
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаГруппировки,
	|СтраницаПанели, 
	|ДинамическаяГруппировкаНадписьСтрок, 
	|ДинамическаяГруппировкаНадписьКолонок, 
	
	|ДинамическийПараметрТабличноеПоле,
	|ДинамическийПараметрКаманднаяПанель,
	
	|ДинамическийПараметрТабличноеПолеСтрок,
	|ДинамическийПараметрКаманднаяПанельСтрок,
	
	|ДинамическийПараметрТабличноеПолеКолонок,
	|ДинамическийПараметрКаманднаяПанельКолонок");
	
	СтруктураЭлементовУправления.СтрокаГруппировки = СтрокаГруппировки;
	
	Верх = 6;
	ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина;
	НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическаяГруппировка"+ Индекс + "Страница", СтрокаГруппировки.Представление);
	ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
	
	СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
	
	НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическаяГруппировка" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Верх = Верх;
	НовыйЭлемент.Лево = 6;
	НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 15;
	НовыйЭлемент.Заголовок = СтрокаГруппировки.ПредставлениеСтрок + ":";
	Верх = Верх + НовыйЭлемент.Высота + 6;
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
	//СтруктураЭлементовУправления.ДинамическийПараметрНадпись = НовыйЭлемент;
	
	// нарисовать таблицу группировки
	НовыйЭлемент                      = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПолеСтрок", Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Лево                 = 6;
	НовыйЭлемент.Верх                 = Верх;
	НовыйЭлемент.Ширина               = ШиринаПанелиЗакладки - 15-24-9;
	НовыйЭлемент.Высота               = 79;
	Верх                              = Верх + НовыйЭлемент.Высота + 6;
	НовыйЭлемент.ТолькоПросмотр       = Ложь;
	НовыйЭлемент.Шапка                = Ложь;
	НовыйЭлемент.Значение             = Новый ТаблицаЗначений;
	НовыйЭлемент.ГоризонтальныеЛинии  = Ложь;
	НовыйЭлемент.ВертикальныеЛинии    = ложь;
	//НовыйЭлемент.ИзменятьСоставСтрок  = ложь;
	НовыйЭлемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
	НовыйЭлемент.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);
	СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПолеСтрок = НовыйЭлемент;
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
	
	НовыйЭлемент.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	НовыйЭлемент.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));
	НовыйЭлемент.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	НовыйЭлемент.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));
	НовыйЭлемент.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));
	НовыйЭлемент.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ИспользованиеИерархии", "");
	НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Использование", "");
	НоваяКолонка.ДанныеФлажка        = "Использование";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ЗначениеИерархии", "");
	НоваяКолонка.Данные              = "ЗначениеИерархии";
	НоваяКолонка.Видимость           = ложь;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Значение", "");
	НоваяКолонка.Данные              = "Значение";
	НоваяКолонка.Видимость           = ложь;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ПредставлениеИерархии", "");
	НоваяКолонка.Данные              = "ПредставлениеИерархии";
	НоваяКолонка.ТолькоПросмотр      = истина;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Представление", "");
	НоваяКолонка.Данные              = "Представление";
	НоваяКолонка.ТолькоПросмотр      = истина;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанельСтрок", Истина, ЭлементыФормы.ПанельЗакладок); 
	ЭлементКоманднаяПанель.Верх     = НовыйЭлемент.Верх + 11;
	ЭлементКоманднаяПанель.Высота   = 47;
	ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 15 - 24 + 12;
	ЭлементКоманднаяПанель.Ширина   = 24;
	ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	ЭлементКоманднаяПанель.ИсточникДействий = НовыйЭлемент;
	СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанельСтрок = ЭлементКоманднаяПанель;
	УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);
	
	КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверхСтрок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);
	КнопкаВверх.Картинка          = БиблиотекаКартинок.ПереместитьВверх;
	КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;
	КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВнизСтрок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);
	КнопкаВниз.Картинка           = БиблиотекаКартинок.ПереместитьВниз;
	КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;
	
	//Добавить строки группировки
	Если ТипЗнч(Группировки[0].Значение) = Тип("ТаблицаКомпоновкиДанных") тогда
		СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Строки);
	Иначе
		СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Точки);
	КонецЕсли;
	
	Для каждого Группировка из СтрокиГруппировки Цикл
		СтрокаГруп = НовыйЭлемент.Значение.Добавить();
		Представление = "";
		ИспользоватьИерархию = ложь;
		Для каждого ПолеГруппировки из Группировка.Значение.ПоляГруппировки.Элементы Цикл
			СтрокаГруп.Значение.Добавить(Строка(ПолеГруппировки.Поле));
			СтрокаГруп.ЗначениеИерархии.Добавить(ПолеГруппировки.ТипГруппировки);
			ИспользоватьИерархию = Ложь;
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеГруппировки.Поле, ОтчетОбъект.КомпоновщикНастроек);
			ТипыПоля = ДоступноеПоле.Тип.Типы();
			Для каждого ТипПоля из ТипыПоля Цикл
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
				Если ОбъектМетаданных <> Неопределено и Метаданные.Справочники.Содержит(ОбъектМетаданных) тогда
					ИспользоватьИерархию = ОбъектМетаданных.Иерархический;
				КонецЕсли;
			КонецЦикла;
			Представление = Представление + ?(Представление = "", "", ", ") + ДоступноеПоле.Заголовок;
		КонецЦикла;
		СтрокаГруп.Представление         = Представление;
		Если СтрокаГруппировки["НастраиватьИерархию"] И ИспользоватьИерархию тогда
			СтрокаГруп.ПредставлениеИерархии = "" + Представление + " (по группам)";
		КонецЕсли;
		СтрокаГруп.Использование         = Группировка.Значение.Использование;
		СтрокаГруп.ИспользованиеИерархии = ИспользоватьИерархию;
	КонецЦикла;
	
	Если ЭлементДинамическойГруппировки <> Неопределено тогда
		ПрименитьНастройкуПользователя(НовыйЭлемент.Значение, ЭлементДинамическойГруппировки.СписокГруппировкиСтрок);
	КонецЕсли;
	
	
	// колонки
	НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическаяГруппировка" + Индекс + "НадписьКолонок", Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Верх = Верх;
	НовыйЭлемент.Лево = 6;
	НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 15;
	НовыйЭлемент.Заголовок = СтрокаГруппировки.ПредставлениеКолонок + ":";
	Верх = Верх + НовыйЭлемент.Высота + 6;
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
	
	// нарисовать таблицу группировки
	НовыйЭлемент                      = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПолеКолонок", Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Лево                 = 6;
	НовыйЭлемент.Верх                 = Верх;
	НовыйЭлемент.Ширина               = ШиринаПанелиЗакладки - 15-24-9;
	НовыйЭлемент.Высота               = 79;
	Верх                              = Верх + НовыйЭлемент.Высота + 6;
	НовыйЭлемент.ТолькоПросмотр       = Ложь;
	НовыйЭлемент.Шапка                = Ложь;
	НовыйЭлемент.Значение             = Новый ТаблицаЗначений;
	НовыйЭлемент.ГоризонтальныеЛинии  = Ложь;
	НовыйЭлемент.ВертикальныеЛинии    = ложь;
	НовыйЭлемент.ИзменятьСоставСтрок  = ложь;
	НовыйЭлемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
	СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПолеКолонок = НовыйЭлемент;
	НовыйЭлемент.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
	
	
	
	НовыйЭлемент.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	НовыйЭлемент.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));
	НовыйЭлемент.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	НовыйЭлемент.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));
	НовыйЭлемент.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));
	НовыйЭлемент.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ИспользованиеИерархии", "");
	НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Использование", "");
	НоваяКолонка.ДанныеФлажка        = "Использование";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ЗначениеИерархии", "");
	НоваяКолонка.Данные              = "ЗначениеИерархии";
	НоваяКолонка.Видимость           = ложь;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Значение", "");
	НоваяКолонка.Данные              = "Значение";
	НоваяКолонка.Видимость           = ложь;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ПредставлениеИерархии", "");
	НоваяКолонка.Данные              = "ПредставлениеИерархии";
	НоваяКолонка.ТолькоПросмотр      = истина;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Представление", "");
	НоваяКолонка.Данные              = "Представление";
	НоваяКолонка.ТолькоПросмотр      = истина;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанельКолонок", Истина, ЭлементыФормы.ПанельЗакладок); 
	ЭлементКоманднаяПанель.Верх     = НовыйЭлемент.Верх + 11;
	ЭлементКоманднаяПанель.Высота   = 47;
	ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 15 - 24 + 12;
	ЭлементКоманднаяПанель.Ширина   = 24;
	ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	ЭлементКоманднаяПанель.ИсточникДействий = НовыйЭлемент;
	УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанельКолонок = ЭлементКоманднаяПанель;
	
	КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверхКолонок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);
	КнопкаВверх.Картинка          = БиблиотекаКартинок.ПереместитьВверх;
	КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;
	КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВнизКолонок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);
	КнопкаВниз.Картинка           = БиблиотекаКартинок.ПереместитьВниз;
	КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;
	
	//Добавить строки группировки
	Если ТипЗнч(Группировки[0].Значение) = Тип("ТаблицаКомпоновкиДанных") тогда
		СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Колонки);
	Иначе
		СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Серии);
	КонецЕсли;
	Для каждого Группировка из СтрокиГруппировки Цикл
		СтрокаГруп = НовыйЭлемент.Значение.Добавить();
		Представление = "";
		ИспользоватьИерархию = ложь;
		Для каждого ПолеГруппировки из Группировка.Значение.ПоляГруппировки.Элементы Цикл
			СтрокаГруп.Значение.Добавить(Строка(ПолеГруппировки.Поле));
			СтрокаГруп.ЗначениеИерархии.Добавить(ПолеГруппировки.ТипГруппировки);
			ИспользоватьИерархию = Ложь;
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеГруппировки.Поле, ОтчетОбъект.КомпоновщикНастроек);
			ТипыПоля = ДоступноеПоле.Тип.Типы();
			Для каждого ТипПоля из ТипыПоля Цикл
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
				Если ОбъектМетаданных <> Неопределено и Метаданные.Справочники.Содержит(ОбъектМетаданных) тогда
					ИспользоватьИерархию = ОбъектМетаданных.Иерархический;
				КонецЕсли;
			КонецЦикла;
			Представление = Представление + ?(Представление = "", "", ", ") + ДоступноеПоле.Заголовок;
		КонецЦикла;
		СтрокаГруп.Представление         = Представление;
		Если СтрокаГруппировки["НастраиватьИерархию"] И ИспользоватьИерархию тогда
			СтрокаГруп.ПредставлениеИерархии = "" + Представление + " (по группам)";
		КонецЕсли;
		СтрокаГруп.Использование         = Группировка.Значение.Использование;
		СтрокаГруп.ИспользованиеИерархии = ИспользоватьИерархию;
	КонецЦикла;
	
	Если ЭлементДинамическойГруппировки <> Неопределено тогда
		ПрименитьНастройкуПользователя(НовыйЭлемент.Значение, ЭлементДинамическойГруппировки.СписокГруппировкиКолонок);
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаГруппировки") И ПараметрыИсполненияОтчета.ПослеВыводаГруппировки тогда
		ФормаОтчета.ПослеВыводаГруппировки(СтруктураЭлементовУправления);
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьПредставлениеПериода(ДатаНачала, ДатаОкончания, МинимальныйПериод)
	
	НачалоПериода = ДатаНачала;
	Если ВРЕГ(МинимальныйПериод) = "МЕСЯЦ" тогда
		НачалоПериода = НачалоМесяца(ДатаНачала);
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" тогда
		НачалоПериода = НачалоКвартала(ДатаНачала);
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" тогда
		НачалоПериода = НачалоГода(ДатаНачала);
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено и (ПолучитьКонецПериода(ДатаНачала, МинимальныйПериод) <> КонецДня(ДатаОкончания) или ДатаНачала <> НачалоПериода) тогда
		Возврат Формат(ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(ДатаОкончания, "ДФ=dd.MM.yy")
	Иначе
		Если ВРЕГ(МинимальныйПериод) = "МЕСЯЦ" тогда
			Возврат Формат(ДатаНачала, "ДФ='MMMM yyyy'");
		ИначеЕсли ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" тогда
			Квартал = Цел((Месяц(ДатаНачала)-1)/3) + 1;
			Возврат "" + Квартал + " квартал " + Формат(ДатаНачала, "ДФ=yyyy");
		ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" тогда
			Возврат Формат(ДатаНачала, "ДФ='yyyy'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКонецПериода(ДатаНачала, МинимальныйПериод)
	
	Если ВРЕГ(МинимальныйПериод) = "МЕСЯЦ" тогда
		Возврат КонецМесяца(ДатаНачала);
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" тогда
		Возврат КонецКвартала(ДатаНачала);
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" тогда
		Возврат КонецГода(ДатаНачала);
	КонецЕсли;
	
КонецФункции

// Возвращает список всех группировок компоновщика настроек
Функция ПолучитьЭлементыСтруктуры(ЭлементСтруктуры) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
	Иначе
		Структура = ЭлементСтруктуры;
	КонецЕсли;
	
	ДобавитьЭлементСтруктуры(Структура, СписокПолей);
	Возврат СписокПолей;
	
КонецФункции

Процедура ДобавитьЭлементСтруктуры(Структура, СписокПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			СписокПолей.Добавить(ЭлементСтруктуры);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Строки, СписокПолей);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Колонки, СписокПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			СписокПолей.Добавить(ЭлементСтруктуры);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Точки, СписокПолей);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Серии, СписокПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") тогда
			СписокПолей.Добавить(ЭлементСтруктуры);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Структура, СписокПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьНастройкуПользователя(ЗначениеГруппировки, СписокГруппировки)
	Если Типзнч(СписокГруппировки) = Тип("ТаблицаЗначений") тогда
		Для каждого СтрокаЗначения из СписокГруппировки Цикл
			СоотСтрока = Неопределено;
			Для каждого СтрокаГруппировки из ЗначениеГруппировки Цикл
				ТребуемаяСтрока = истина;
				Для каждого Поле из СтрокаЗначения.Значение Цикл
					Если СтрокаГруппировки.Значение.НайтиПоЗначению(Поле.Значение) = Неопределено тогда
						ТребуемаяСтрока = ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ТребуемаяСтрока тогда
					СоотСтрока = СтрокаГруппировки;
				КонецЕсли;
			КонецЦикла;
			Если СоотСтрока <> Неопределено тогда
				ИндексСтрокиЗначения    = СписокГруппировки.Индекс(СтрокаЗначения);
				ИндексСтрокиГруппировки = ЗначениеГруппировки.Индекс(СоотСтрока);
				Если ИндексСтрокиГруппировки <> ИндексСтрокиЗначения и ИндексСтрокиЗначения >=0 и ИндексСтрокиЗначения < ЗначениеГруппировки.Количество() тогда
					ЗначениеГруппировки.Сдвинуть(СоотСтрока, ИндексСтрокиЗначения - ИндексСтрокиГруппировки);
				КонецЕсли;
				СоотСтрока.Использование = СтрокаЗначения.Использование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаФормыПослеПримененияНастройки(ОтчетОбъект, ФормаОтчета, ИспользоватьЗначенияНастроекНаФорме = Ложь) Экспорт
	
	Если ИспользоватьЗначенияНастроекНаФорме Тогда   
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);
	КонецЕсли;
	ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек);
	
	ФормаОтчета.Модифицированность = Ложь;
	
	ЕстьЭлементыУправленияНаПравойПанели = Истина;
	
	Если ФормаОтчета.ОтчетОбъект.ПараметрыПанелиПользователя <> Неопределено тогда
		ПараметрыПанели = ФормаОтчета.ОтчетОбъект.ПараметрыПанелиПользователя.Получить();
		
		ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
		Кнопка = ЭлементыФормы.КоманднаяПанельРезультат.Кнопки.ПанельПользователя;
		
		ЕстьЭлементыУправленияНаПравойПанели = ложь;
		
		Если ПараметрыПанели.Свойство("Отборы") и ПараметрыПанели.Отборы <> Неопределено тогда
			Для каждого СтрокаОтбора из ПараметрыПанели.Отборы Цикл
				Если СтрокаОтбора.Расположение <> "ГоризонтальнаяПанель" тогда
					ЕстьЭлементыУправленияНаПравойПанели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЕстьЭлементыУправленияНаПравойПанели И ПараметрыПанели.Свойство("Параметры") и ПараметрыПанели.Параметры <> Неопределено тогда
			Для каждого СтрокаОтбора из ПараметрыПанели.Параметры Цикл
				Если СтрокаОтбора.ВыводитьНа <> "ГоризонтальнаяПанель" и СтрокаОтбора.ВыводитьНа <> "" и СтрокаОтбора.ВыводитьНа <> Неопределено тогда
					ЕстьЭлементыУправленияНаПравойПанели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЕстьЭлементыУправленияНаПравойПанели И ПараметрыПанели.Свойство("ДеревоНастроекСтандартныхСтраниц") и ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц <> Неопределено тогда
			Для каждого СтрокаОтбора из ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки Цикл
				Если СтрокаОтбора.Использование и СтрокаОтбора.Имя <> "Период" тогда
					ЕстьЭлементыУправленияНаПравойПанели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЕстьЭлементыУправленияНаПравойПанели и Кнопка.Пометка тогда 
		Кнопка.Пометка = ложь;
	КонецЕсли;
	
	УправлениеОтображениемПанелиПользователя(ФормаОтчета);
	
КонецПроцедуры

Процедура ПриНажатииКнопкиВверхВниз(ФормаОтчета, ОтчетОбъект, Кнопка) Экспорт
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Индекс = Число(Сред(Кнопка.Имя, 24, 1));
	Направление = ?(Найти(Кнопка.Имя,"Вверх") <> 0, -1, 1);
	Если Найти(Кнопка.Имя,"Строк") <> 0 тогда
		ТабличноеПоле = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеСтрок");
	ИначеЕсли Найти(Кнопка.Имя,"Колонок") <> 0 тогда
		ТабличноеПоле = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеКолонок");
	Иначе
		ТабличноеПоле = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПоле");
	КонецЕсли;
	
	Если ТабличноеПоле <> Неопределено и ТабличноеПоле.ТекущаяСтрока <> Неопределено тогда
		ТаблицаЗначений = ТабличноеПоле.Значение;
		Если Направление + ТаблицаЗначений.Индекс(ТабличноеПоле.ТекущаяСтрока) < ТаблицаЗначений.Количество()
			И Направление + ТаблицаЗначений.Индекс(ТабличноеПоле.ТекущаяСтрока) >= 0 тогда
			ТаблицаЗначений.Сдвинуть(ТабличноеПоле.ТекущаяСтрока, Направление);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

	Процедура ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент) Экспорт
		
		Если ТипЗнч(Элемент) = Тип("Число") Тогда
			Индекс = Элемент;
		Иначе
			Индекс = Число(Сред(Элемент.Имя, 18, 1));
		КонецЕсли;
		
		ЭлементТабличноеПоле = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"];
		ЭлементВидСравнения = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ВидСравнения"];
		
		// При очистке списка можно смело выставлять вид сравнения в "Не отбирать"
		Если ЭлементТабличноеПоле.Значение.Количество() = 0 И ЭлементВидСравнения.Значение <> "" Тогда
			ЭлементВидСравнения.Значение = "";
		КонецЕсли;
		
		// Если список не пуст, а вид сравнения "Не отбирать", установим вид сравнения в "Только выбранные"
		Если ЭлементТабличноеПоле.Значение.Количество() > 0 И ЭлементВидСравнения.Значение = "" Тогда
			ЭлементВидСравнения.Значение = "Выбранные";
		КонецЕсли;
		
	КонецПроцедуры
	
	// Открывает форму настройки периода
	Функция НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода) Экспорт
		
		НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
		НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
		НастройкаПериода.РедактироватьКакИнтервал = ложь;
		НастройкаПериода.РедактироватьКакПериод = Истина;
		Если НастройкаПериода.Редактировать() Тогда
			НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
			КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
			Возврат НастройкаПериода;
		КонецЕсли;
		
	КонецФункции
	
	Процедура ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
		Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
			Если ОформлениеСтроки.ДанныеСтроки.ПредставлениеИерархии = "" тогда
				ОформлениеСтроки.Ячейки.ПредставлениеИерархии.Видимость = ложь;
				ОформлениеСтроки.Ячейки.ИспользованиеИерархии.Видимость = ложь;
			КонецЕсли;
		КонецЦикла;
	Конецпроцедуры
	
Процедура ОбработкаИзмененияЗначенияДинамическогоОтбора(ЭлементыФормы, Элемент, ФормаОтчета = Неопределено) Экспорт
		
		Если ТипЗнч(Элемент) = Тип("Кнопка") тогда
			НастройкаПериода = Новый НастройкаПериода;
			
			Если ЭлементыФормы.Найти("ДинамическийОтборПериодВыбор") <> Неопределено И ФормаОтчета <> Неопределено тогда
				НачалоПериода = ФормаОтчета.СтандартныйПериод.ДатаНачала;
				КонецПериода  = КонецДня(ФормаОтчета.СтандартныйПериод.ДатаОкончания);
			Иначе	
				НачалоПериода = ЭлементыФормы.ДинамическийОтборДатаНачала.Значение;
				КонецПериода  = КонецДня(ЭлементыФормы.ДинамическийОтборДатаОкончания.Значение);
			КонецЕсли;
			
			НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода);
			
			ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ВариантСтандартногоПериода.ПроизвольныйПериод;
			
			Если ЭлементыФормы.Найти("ДинамическийОтборПериодВыбор") <> Неопределено И ФормаОтчета <> Неопределено тогда
				ФормаОтчета.СтандартныйПериод.ДатаНачала            = НачалоПериода;
				ФормаОтчета.СтандартныйПериод.ДатаОкончания         = КонецПериода;
				ПараметрыИсполненияОтчета                           = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
				ЭлементыФормы.ДинамическийОтборПериодВыбор.Значение = ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета); 
			Иначе	
				ЭлементыФормы.ДинамическийОтборДатаНачала.Значение    = НачалоПериода;
				ЭлементыФормы.ДинамическийОтборДатаОкончания.Значение = КонецПериода;
			КонецЕсли;
			
		Иначе
			Индекс = Число(Сред(Элемент.Имя, 18, 1));
			ЭлементФлажок = ЭлементыФормы.Найти("ДинамическийОтбор" + Индекс + "Флажок");
			Если ЭлементФлажок <> Неопределено и ТипЗнч(Элемент) = Тип("ПолеВвода") Тогда
				Если ТипЗнч(Элемент.Значение) <> Тип("СписокЗначений") тогда
					ЭлементФлажок.Значение = ЗначениеЗаполнено(Элемент.Значение);
				Иначе
					ЭлементФлажок.Значение = Элемент.Значение.Количество() <> 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	
///////////////////////////////////////////////////////// СКД2 ///////////////////////////////////////////////
// Дорабатывает отчет перед выводом
Процедура ПолучитьПримененуюНастройку(ОтчетОбъект, КомпоновщикНастроек = Неопределено) Экспорт
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	КонецЕсли;
	
	//Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПараметрыПанели  = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	Если ПараметрыПанели = Неопределено
		ИЛИ ЗначенияНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка Настроек компоновки на панели настроек
	Для каждого ВидимостьСтраницы Из ЗначенияНастроек.ВидимостьСтраниц Цикл
		Если Не ВидимостьСтраницы.Значение ИЛИ ВидимостьСтраницы.Ключ = "Показатели" Тогда
			Продолжить;
		КонецЕсли;
		Если ВидимостьСтраницы.Ключ = "Параметры" Тогда
			ЗаполнитьЭлементы(КомпоновщикНастроек.Настройки.ПараметрыДанных, ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных);
		Иначе
			СкопироватьЭлементы(КомпоновщикНастроек.Настройки[ВидимостьСтраницы.Ключ], ЗначенияНастроек.НастройкиКомпоновщика[ВидимостьСтраницы.Ключ], , истина);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияНастроек.Свойство("Показатели") тогда
		ПоляВыбора = ПолучитьВыбранныеПоля(ОтчетОбъект.КомпоновщикНастроек);
		Для каждого ПолеВыбора из ПоляВыбора Цикл
			Если ЗначенияНастроек.Показатели.Получить(Строка(ПолеВыбора.Поле)) <> Неопределено тогда
				ПолеВыбора.Использование = ЗначенияНастроек.Показатели.Получить(Строка(ПолеВыбора.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// Установим у всех параметров использование
	Для каждого ЗначениеПараметра Из ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		ЗначениеПараметра.Использование = Истина;
	КонецЦикла;
	
	// Установка параметра ПериодОтчета
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	ЕстьПериод = ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.НайтиСтроки(Новый Структура("Имя", "Период"))[0].Использование;
	Если ЕстьПериод И ЗначениеПараметра <> Неопределено Тогда
		Периоды = ПолучитьСписокПериодов(ЗначенияНастроек.НастройкаПериода.Период, ПараметрыПанели);
		ЗначениеПараметра.Использование = Периоды.Количество() <> 0;
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СписокЗначений") Тогда
			ЗначениеПараметра.Значение = Периоды;
		Иначе
			ЗначениеПараметра.Значение = Периоды[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		// Установка Стандартного периода
		ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если ЗначениеПараметраНачалоПериода <> Неопределено И ЗначениеПараметраКонецПериода <> Неопределено Тогда
			
			СтандартныйПериод = Неопределено;
			ЗначенияНастроек.Свойство("СтандартныйПериод", СтандартныйПериод);
			Если СтандартныйПериод <> Неопределено Тогда
				Если СтандартныйПериод.ДатаНачала <> '00010101' Тогда
					ЗначениеПараметраНачалоПериода.Использование = Истина;
					ЗначениеПараметраНачалоПериода.Значение = СтандартныйПериод.ДатаНачала;
				КонецЕсли;
				Если СтандартныйПериод.ДатаОкончания <> '00010101' Тогда
					ЗначениеПараметраКонецПериода.Использование = Истина;
					ЗначениеПараметраКонецПериода.Значение = СтандартныйПериод.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Установка Стандартной даты начала
		ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если ЗначениеПараметраПериод <> Неопределено Тогда
			СтандартнаяДатаНачала = Неопределено;
			ЗначенияНастроек.Свойство("СтандартнаяДатаНачала", СтандартнаяДатаНачала);
			Если СтандартнаяДатаНачала <> Неопределено Тогда
				Если СтандартнаяДатаНачала.Дата <> '00010101' Тогда
					ЗначениеПараметраПериод.Использование = Истина;
					ЗначениеПараметраПериод.Значение = СтандартнаяДатаНачала.Дата;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка Динамических отборов
	Если ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры") тогда
		Для каждого СтрокаПараметра Из ПараметрыПанели.Параметры Цикл
			ЗначениеПараметра = ЗначенияНастроек.ДинамическиеПараметры[СтрокаПараметра.Параметр];
			Если ЗначениеПараметра = Неопределено ИЛИ Не ЗначениеПараметра.Использование Тогда
				Продолжить;
			КонецЕсли;
			УстановитьПараметр(КомпоновщикНастроек, ЗначениеПараметра.Параметр, ЗначениеПараметра.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка Динамических отборов
	Для каждого СтрокаОтбора Из ПараметрыПанели.Отборы Цикл
		ЗначениеОтбора = ЗначенияНастроек.ДинамическиеОтборы[СтрокаОтбора.Поле];
		Если ЗначениеОтбора = Неопределено ИЛИ Не ЗначениеОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок" Тогда
			Если ЗначениеОтбора.ВидСравнения = "" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеОтбора.ВидСравнения = "Исключая" Тогда
				ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных["Не" + СтрокаОтбора.ВидСравнения];
			Иначе
				ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных[СтрокаОтбора.ВидСравнения];
			КонецЕсли;
		Иначе
			ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных[СтрокаОтбора.ВидСравнения];
		КонецЕсли;
		
		ДобавитьОтбор(КомпоновщикНастроек, ЗначениеОтбора.Поле, ЗначениеОтбора.Значение, ВидСравненияКомпоновки);
	КонецЦикла;
	УдалитьДублиОтбора(КомпоновщикНастроек);
	
	Если ЗначенияНастроек.Свойство("ДинамическиеГруппировки") И ПараметрыПанели.Свойство("Группировки") тогда
		Для каждого ЗначениДинГруппировки из ЗначенияНастроек.ДинамическиеГруппировки Цикл
			УстановитьГруппировку(КомпоновщикНастроек, ЗначениДинГруппировки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДублиОтбора(КомпоновщикНастроек) Экспорт
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Количество = Отбор.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементСКонца = Отбор[Количество - Индекс];
		Для ИндексВнутр = 0 По Количество - Индекс - 1 Цикл
			ЭлементВнутр = Отбор[ИндексВнутр];
			Если ТипЗнч(ЭлементВнутр) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ТипЗнч(ЭлементСКонца) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементВнутр.ЛевоеЗначение = ЭлементСКонца.ЛевоеЗначение
				И ЭлементВнутр.ВидСравнения = ЭлементСКонца.ВидСравнения
				И ЭлементВнутр.Использование = ЭлементСКонца.Использование
				И ПравыеЗначенияОтборовСовпадают(ЭлементВнутр.ПравоеЗначение, ЭлементСКонца.ПравоеЗначение)
				И ЭлементВнутр.Применение = ЭлементСКонца.Применение Тогда
				Отбор.Удалить(ЭлементСКонца);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПравыеЗначенияОтборовСовпадают(Значение1, Значение2)
	
	Если ТипЗнч(Значение1) <> ТипЗнч(Значение2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Значение1) <> Тип("СписокЗначений") Тогда
		Возврат Значение1 = Значение2;
	ИначеЕсли ТипЗнч(Значение1) = Тип("СписокЗначений") Тогда
		Если Значение1.Количество() <> Значение2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		Совпадают = Истина;
		Для каждого Элемент1 Из Значение1 Цикл
			Если Значение2.НайтиПоЗначению(Элемент1.Значение) = Неопределено Тогда
				Совпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для каждого Элемент2 Из Значение2 Цикл
			Если Значение1.НайтиПоЗначению(Элемент2.Значение) = Неопределено Тогда
				Совпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат Совпадают;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьГруппировку(КомпоновщикНастроек, ЗначенияНастроек)
	МассивПервыхЭлементовСтруктуры = Новый Массив;
	НайтиПервыеЭлементыСтруктуры(ЗначенияНастроек.Значение.ИмяГруппировки, КомпоновщикНастроек.Настройки.Структура, МассивПервыхЭлементовСтруктуры);
	Для каждого ПервыйЭлементСтруктуры из МассивПервыхЭлементовСтруктуры Цикл
		Если ТипЗнч(ПервыйЭлементСтруктуры.Элемент) <> Тип("ТаблицаКомпоновкиДанных") И ТипЗнч(ПервыйЭлементСтруктуры.Элемент) <> Тип("ДиаграммаКомпоновкиДанных") тогда
			ПоследнийЭлемент = ПоследниеЭлементыСтруктуры(ПервыйЭлементСтруктуры.Элемент);
			МассивСохраненныхЭлементов = Новый Массив;
			Если ПоследнийЭлемент <> Неопределено тогда
				Для каждого ЭлементСтруктуры из ПоследнийЭлемент.Родитель.Структура Цикл
					МассивСохраненныхЭлементов.Добавить(ЭлементСтруктуры);
				КонецЦикла;
			КонецЕсли;
			Родитель = ПервыйЭлементСтруктуры.Элемент.Родитель;
			Строки = истина;
			Если ТипЗнч(Родитель) = Тип("ТаблицаКомпоновкиДанных") тогда
				Строки =  ?(Родитель.Строки.Индекс(ПервыйЭлементСтруктуры.Элемент) >= 0, истина, ложь);
				Если Строки тогда
					Родитель.Строки.Удалить(ПервыйЭлементСтруктуры.Элемент);
				Иначе
					Родитель.Строки.Удалить(ПервыйЭлементСтруктуры.Элемент);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Родитель) = Тип("ДиаграммаКомпоновкиДанных") тогда
				Строки =  ?(Родитель.Точки.Индекс(ПервыйЭлементСтруктуры.Элемент) >= 0, истина, ложь);
				Если Строки тогда
					Родитель.Точки.Удалить(ПервыйЭлементСтруктуры.Элемент);
				Иначе
					Родитель.Серии.Удалить(ПервыйЭлементСтруктуры.Элемент);
				КонецЕсли;
			Иначе
				Родитель.Структура.Удалить(ПервыйЭлементСтруктуры.Элемент);
			КонецЕсли;
			ДобавитьГруппировкиПользователя(Родитель, ЗначенияНастроек.Значение.СписокГруппировки, Строки, МассивСохраненныхЭлементов);
		ИначеЕсли ТипЗнч(ПервыйЭлементСтруктуры.Элемент) = Тип("ТаблицаКомпоновкиДанных") тогда
			ПоследнийЭлемент = ПервыйЭлементСтруктуры;
			ПоследнийЭлемент.Элемент.Строки.Очистить();
			ПоследнийЭлемент.Элемент.Колонки.Очистить();
			ДобавитьГруппировкиПользователя(ПоследнийЭлемент.Элемент, ЗначенияНастроек.Значение.СписокГруппировкиСтрок, истина);
			ДобавитьГруппировкиПользователя(ПоследнийЭлемент.Элемент, ЗначенияНастроек.Значение.СписокГруппировкиКолонок, ложь);
		ИначеЕсли ТипЗнч(ПервыйЭлементСтруктуры.Элемент) = Тип("ДиаграммаКомпоновкиДанных") тогда
			ПоследнийЭлемент = ПервыйЭлементСтруктуры;
			ПоследнийЭлемент.Элемент.Точки.Очистить();
			ПоследнийЭлемент.Элемент.Серии.Очистить();
			ДобавитьГруппировкиПользователя(ПоследнийЭлемент.Элемент, ЗначенияНастроек.Значение.СписокГруппировкиСтрок, истина);
			ДобавитьГруппировкиПользователя(ПоследнийЭлемент.Элемент, ЗначенияНастроек.Значение.СписокГруппировкиКолонок, ложь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьГруппировкиПользователя(Структура, СписокГруппировки, Строки, МассивСохраненныхЭлементов = Неопределено)
	
	Элемент = Неопределено;
	Если ТипЗнч(Структура) = Тип("ТаблицаКомпоновкиДанных") ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") тогда
		ТипГруппировки = Тип("ГруппировкаТаблицыКомпоновкиДанных");
		Если Строки тогда
			Элемент = Структура.Строки;
		Иначе
			Элемент = Структура.Колонки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Структура) = Тип("ДиаграммаКомпоновкиДанных") ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")  тогда
		ТипГруппировки = Тип("ГруппировкаДиаграммыКомпоновкиДанных");
		Если Строки тогда
			Элемент = Структура.Точки;
		Иначе
			Элемент = Структура.Серии;
		КонецЕсли;
	Иначе
		ТипГруппировки = Тип("ГруппировкаКомпоновкиДанных");
		Элемент = Структура.Структура;
	КонецЕсли;
	
	Для каждого СтрокаГруппировки из СписокГруппировки Цикл
		Если НЕ СтрокаГруппировки.Использование И Не СтрокаГруппировки.ИспользованиеИерархии тогда
			Продолжить;
		КонецЕсли;
		Если ТипГруппировки = Тип("ГруппировкаКомпоновкиДанных") тогда
			Группировка = Элемент.Добавить(ТипГруппировки);
		Иначе
			Группировка = Элемент.Добавить();
		КонецЕсли;
		Для каждого Поле из СтрокаГруппировки.Значение Цикл
			ИндексПоля = СтрокаГруппировки.Значение.Индекс(Поле);
			ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Поле.Значение);
			ПолеГруппировки.Использование = истина;
			ТипГруппировкиПоля = СтрокаГруппировки.ЗначениеИерархии.Получить(ИндексПоля);
			Если СтрокаГруппировки.ПредставлениеИерархии <> "" тогда
				Если СтрокаГруппировки.Использование и СтрокаГруппировки.ИспользованиеИерархии тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				ИначеЕсли СтрокаГруппировки.Использование и Не СтрокаГруппировки.ИспользованиеИерархии тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				ИначеЕсли НЕ СтрокаГруппировки.Использование и СтрокаГруппировки.ИспользованиеИерархии тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
				КонецЕсли;
			Иначе	
				Если ТипГруппировкиПоля <> Неопределено тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиПоля.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ВыбраноеПоле = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбраноеПоле.Использование = истина;
		Элемент = Группировка.Структура;
	КонецЦикла;
	
	Если МассивСохраненныхЭлементов <> Неопределено тогда
		Для каждого ПоследнийЭлемент из МассивСохраненныхЭлементов Цикл
			ТипГруппировки = ТипЗнч(ПоследнийЭлемент);
			Если ТипГруппировки <> Тип("ГруппировкаТаблицыКомпоновкиДанных") и ТипГруппировки <> Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
				Группировка = Элемент.Добавить(ТипГруппировки);
			Иначе
				Группировка = Элемент.Добавить();
			КонецЕсли;
			СкопироватьНастройкиКомпоновкиДанных(Группировка, ПоследнийЭлемент);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Копирует настройки компоновки данных из одного компоновщика настроек в другой
Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	Если НастройкиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
		Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
		Возврат;
	КонецЕсли;
	
	// Копирование настроек
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
		СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,         НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,       НастройкиИсточник.Порядок);
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,           НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,         НастройкиИсточник.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		
	КонецЕсли;
	
	СкопироватьЭлементы(НастройкиПриемник.Выбор,              НастройкиИсточник.Выбор);
	СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
	ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода,      НастройкиИсточник.ПараметрыВывода);
	
	// Копирование структуры
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметр данных компоновщика настроек
Функция УстановитьПараметр(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Возврат НовыйЭлемент;
	
КонецФункции

Процедура НайтиПервыеЭлементыСтруктуры(Имя, Структура, МассивГруппировок) Экспорт
	Для каждого ЭлементСтруктуры из Структура Цикл
		Если ЭлементСтруктуры.Имя = Имя тогда
			СтруктураЭлемента = Новый Структура("Элемент, Индекс", ЭлементСтруктуры, Структура.Индекс(ЭлементСтруктуры));
			МассивГруппировок.Добавить(СтруктураЭлемента);
		Иначе
			Если (ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")) 
				И ЭлементСтруктуры.Структура.Количество() > 0 тогда
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Структура, МассивГруппировок);
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Строки, МассивГруппировок);
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Колонки, МассивГруппировок);
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Серии, МассивГруппировок);
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Точки, МассивГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПоследниеЭлементыСтруктуры(ПервыйЭлементСтруктуры)
	ЭлементСтруктурыНовый = ПервыйЭлементСтруктуры;
	Имя = ПервыйЭлементСтруктуры.Имя;
	Пока Имя = ЭлементСтруктурыНовый.Имя Цикл
		Если ТипЗнч(ЭлементСтруктурыНовый) = Тип("ТаблицаКомпоновкиДанных") 
			ИЛИ ТипЗнч(ЭлементСтруктурыНовый) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Прервать;
		КонецЕсли;
		Если ЭлементСтруктурыНовый.Структура.Количество() = 0 тогда
			ЭлементСтруктурыНовый = Неопределено;
			Прервать;
		КонецЕсли;
		ЭлементСтруктурыНовый = ЭлементСтруктурыНовый.Структура[0];
	КонецЦикла;
	Возврат ЭлементСтруктурыНовый;
КонецФункции

Функция ПолучитьСписокПериодов(ПериодСохраненный, Параметры)
	
	СписокПериодов = Новый СписокЗначений;
	Периодичность = ПериодСохраненный.Периодичность;	
	Строка = Параметры.ДоступныеПериодичности.НайтиСтроки(Новый Структура("Периодичность", Периодичность))[0];
	РассчитыватьЧерез = Строка.РассчитыватьЧерез;
	Если Периодичность = РассчитыватьЧерез Тогда
		СписокПериодов.Добавить(ПериодСохраненный);
	КонецЕсли;
	Возврат СписокПериодов;
	
КонецФункции

//Функция ЭтоСтараяВерсияОтчета(ОтчетОбъект) Экспорт
//	
//	Возврат ТиповыеОтчетыПереопределяемый.ЭтоСтараяВерсияОтчетаПереопределяемая(ОтчетОбъект);
//	
//КонецФункции

Процедура ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета) Экспорт
	
	ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

ТипЧисло = Новый ОписаниеТипов("Число");
