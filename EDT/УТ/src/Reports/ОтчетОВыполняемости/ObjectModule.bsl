Функция СформироватьОтправитьПоПочте(НачПериода, КонПериода, ТерминалДоставки = Неопределено) Экспорт
	
	НачПериода = НачПериода - 86400;
	КонПериода = КонПериода - 86400;
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
	КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек2.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Настройки = КомпоновщикНастроек2.Настройки;
	
	//установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СтПериод", СтПериод);
	//CeHbKA
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата1", НачПериода);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата2", КонПериода);
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = НачПериода;
	Период.ДатаОкончания = КонПериода;
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СтПериод", Период);
	
	СхемаКомпоновкиДанных.Параметры.Дата1.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	СхемаКомпоновкиДанных.Параметры.Дата1.Значение = НачПериода;
	СхемаКомпоновкиДанных.Параметры.Дата2.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	СхемаКомпоновкиДанных.Параметры.Дата2.Значение = КонПериода;
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", ТерминалДоставки);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрСумма", ПараметрСумма);
	
	//CeHbKA
	Если НЕ ЗначениеЗаполнено(ТерминалДоставки) Тогда		
		// МАС - 21.03.2018 - № --->> 
		//ТерминалДоставки = Новый СписокЗначений;
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		ТерминалДоставки = Новый СписокЗначений;
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		//СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		//СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Значение.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		//СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Значение.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		//СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Значение.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		// <<--- МАС 		
	КонецЕсли;	
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалПриема", ТерминалДоставки);
	//CeHbKA
	СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Значение = ТерминалДоставки;
	
	
	//Добавляем отбор если есть КонтрагеныИсключения в параметрах
	//Если КонтрагеныИсключения <> Неопределено Тогда
	//    НовыйЭлементОтбора = Настройки.Отбор.Элементы.
	//    Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//    
	//    ПолеОтбора = Новый ПолеКомпоновкиДанных("ВладелецТовара");
	//    
	//    НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//    НовыйЭлементОтбора.Использование  = Истина;
	//    НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	//    НовыйЭлементОтбора.ПравоеЗначение = КонтрагеныИсключения;
	//КонецЕсли;
		
	//Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Результат = Новый ТабличныйДокумент();
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Сворачиваем
	//Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	Если (Результат.ВысотаТаблицы-Результат.ФиксацияСверху)>1 Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции