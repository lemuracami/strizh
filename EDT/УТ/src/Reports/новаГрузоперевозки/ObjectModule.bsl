#Если Клиент Тогда

// Предопределенное свойство. Содержит коллекцию параметров формирования отчета.
//
Перем ПараметрыФормирования Экспорт; // <Структура>

Перем КонструкторДанных;
Перем НачалоПериода, КонецПериода;
	
// Предопределенная функция. Возвращает свойства отчета.
//
// Возвращаемое значение:
//  <Структура[СвойстваОтчета]>
//
Функция ПолучитьСвойства() Экспорт
	Возврат Новый Структура("ИнтерфейсВыбораДаты, ДатаНачала, ДатаОкончания", "Период", НачалоПериода, КонецПериода);
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных отборов отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьОтборы() Экспорт
	тзОтборы = КонструкторДанных.ПолучитьТаблицуОтборов();
	
	Возврат тзОтборы;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных группировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаГруппировок]>
//
Функция ПолучитьГруппировки() Экспорт
	тзГруппировки = КонструкторДанных.ПолучитьТаблицуГруппировок("Показатель");
	
	Возврат тзГруппировки;
КонецФункции

// Предопределенная функция. Возвращает имена группировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеГруппировкиПоУмолчанию() Экспорт
	мсГруппировки = Новый Массив;
	мсГруппировки.Добавить("Транспорт");
	
	Возврат мсГруппировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных сортировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировки() Экспорт
	тзСортировки = КонструкторДанных.ПолучитьТаблицуСортировок();
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу сортировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировкиПоУмолчанию() Экспорт
	тзСортировки = новаОтчеты.ПолучитьТаблицуСортировок();
		
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных показателей отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПоказателей]>
//
Функция ПолучитьПоказатели() Экспорт
	тзПоказатели = КонструкторДанных.ПолучитьТаблицуПоказателей();
	
	Возврат тзПоказатели;
КонецФункции

// Предопределенная функция. Возвращает имена показателей, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеПоказателиПоУмолчанию() Экспорт
	мсПоказатели = Новый Массив;
	
	мсПоказатели.Добавить("Вес");
	мсПоказатели.Добавить("Объем");
	мсПоказатели.Добавить("КоличествоЕдиницПеревозки");
	
	Возврат мсПоказатели;
КонецФункции

// Предопределенная процедура. Формирует отчет в указанном табличном документе с текущими параметрами формирования.
//
// Параметры:
//  ТД <ТабличныйДокумент>
//
Процедура Сформировать(ТД) Экспорт
	УстановитьПериод(ПараметрыФормирования.НачалоПериода, ПараметрыФормирования.КонецПериода);
	Настроить();	
	
	КонструкторДанных.ПрименитьПараметрыФормированияОтчета(ПараметрыФормирования);
	
	дзРезультат = КонструкторДанных.ПолучитьДанные();
		
	тзИтоги = КонструкторДанных.ПолучитьТаблицуИтогов();
	новаОтчеты.СформироватьТабличныйДокумент(ЭтотОбъект, ТД, дзРезультат, тзИтоги, "");
		
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТД.АвтоМасштаб = Истина;
КонецПроцедуры

// Предопределенная процедура. Обрабатывает событие "Обработка расшифровки" отчета.
//
// Параметры:
//  Форма                <Форма>
//  Элемент              <ЭлементУправления>
//  Расшифровка          <Произвольный>
//  СтандартнаяОбработка <Булево>
//
Процедура ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если новаОтчеты.Расшифровать(Форма, Элемент, Расшифровка) Тогда Возврат; КонецЕсли;
	ОткрытьЗначение(Расшифровка);
КонецПроцедуры

Процедура Настроить()
	КонструкторДанных = Обработки.новаКонструкторЗапроса.Создать();
	
	КонструкторДанных.ТекстЗапроса = "(ВЫБРАТЬ
	|
	|	{*ВЫБОРКА_ПОДЗАПРОСА}
	|
	|ИЗ
	|
	|	РегистрНакопления.новаРаспределенныеДоходыРасходыМестнойДоставки.Обороты(&НачалоПериода, &КонецПериода,
	|		{Регистратор},
	|		(Ложь {ОТБОР_ПОКАЗАТЕЛЕЙ}) {*ОТБОР_РЕГИСТРА}) КАК ДоходыРасходы
	|
	|{**ГРУППИРОВКА_ПОДЗАПРОСА}
	|) ДоходыРасходы";
	
	КонструкторДанных.ДобавитьПараметр("НачалоПериода", '00010101');
	КонструкторДанных.ДобавитьПараметр("КонецПериода", '00010101');
	
	КонструкторДанных.ДобавитьПоле("Транспорт");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Транспорт");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Транспорт");
	КонструкторДанных.ДобавитьГруппировкуПоля("**ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Транспорт");
	КонструкторДанных.ДобавитьОтборПоля("*ОТБОР_РЕГИСТРА", "Транспорт");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Транспорт.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Водитель");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Водитель");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Водитель");
	КонструкторДанных.ДобавитьГруппировкуПоля("**ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Водитель");
	КонструкторДанных.ДобавитьОтборПоля("*ОТБОР_РЕГИСТРА", "Водитель");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Водитель.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Экспедитор");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Экспедитор");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Экспедитор");
	КонструкторДанных.ДобавитьГруппировкуПоля("**ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Экспедитор");
	КонструкторДанных.ДобавитьОтборПоля("*ОТБОР_РЕГИСТРА", "Экспедитор");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Экспедитор.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Контрагент");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Контрагент");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Контрагент");
	КонструкторДанных.ДобавитьГруппировкуПоля("**ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Контрагент");
	КонструкторДанных.ДобавитьОтборПоля("*ОТБОР_РЕГИСТРА", "Контрагент");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Контрагент.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Рейс");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Рейс");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "ДоходыРасходы.Регистратор.Рейс");
	КонструкторДанных.ДобавитьГруппировкуПоля("**ГРУППИРОВКА_ПОДЗАПРОСА", "ДоходыРасходы.Регистратор.Рейс");
	КонструкторДанных.ДобавитьОтборПоля("*ОТБОР_РЕГИСТРА", "Регистратор.Рейс");
	КонструкторДанных.ДобавитьСортировкуПоля("ДоходыРасходы.Рейс.Дата");
	КонструкторДанных.ДобавитьПатчПоля("Регистратор", "Регистратор");
	
	КонструкторДанных.ДобавитьПоле("Вес",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Вес");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "СУММА(ВЫБОР КОГДА ДоходыРасходы.Показатель = ЗНАЧЕНИЕ(Перечисление.новаПоказателиРаспределенныхДоходовРасходов.Вес) ТОГДА ДоходыРасходы.СуммаОборот ИНАЧЕ 0 КОНЕЦ)");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ", "ИЛИ Показатель = ЗНАЧЕНИЕ(Перечисление.новаПоказателиРаспределенныхДоходовРасходов.Вес)");
	КонструкторДанных.ДобавитьИтог("Вес");
	
	КонструкторДанных.ДобавитьПоле("Объем",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.Объем");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "СУММА(ВЫБОР КОГДА ДоходыРасходы.Показатель = ЗНАЧЕНИЕ(Перечисление.новаПоказателиРаспределенныхДоходовРасходов.Объем) ТОГДА ДоходыРасходы.СуммаОборот ИНАЧЕ 0 КОНЕЦ)");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ", "ИЛИ Показатель = ЗНАЧЕНИЕ(Перечисление.новаПоказателиРаспределенныхДоходовРасходов.Объем)");
	КонструкторДанных.ДобавитьИтог("Объем");
	
	КонструкторДанных.ДобавитьПоле("КоличествоЕдиницПеревозки",, "ЧДЦ=2");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ДоходыРасходы.КоличествоЕдиницПеревозки");
	КонструкторДанных.ДобавитьВыборкуПоля("*ВЫБОРКА_ПОДЗАПРОСА", "СУММА(ВЫБОР КОГДА ДоходыРасходы.Показатель = ЗНАЧЕНИЕ(Перечисление.новаПоказателиРаспределенныхДоходовРасходов.КоличествоЕдиницПеревозки) ТОГДА ДоходыРасходы.СуммаОборот ИНАЧЕ 0 КОНЕЦ)");
	КонструкторДанных.ДобавитьПатчПоля("ОТБОР_ПОКАЗАТЕЛЕЙ", "ИЛИ Показатель = ЗНАЧЕНИЕ(Перечисление.новаПоказателиРаспределенныхДоходовРасходов.КоличествоЕдиницПеревозки)");
	КонструкторДанных.ДобавитьИтог("КоличествоЕдиницПеревозки");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Транспорт",,, Истина);
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Водитель",,, Истина);
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Экспедитор",,, Истина);
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Контрагент",,, Истина);
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Рейс");
	
	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Предопределенная процедура. Устанавливает в отчет новый период формирования.
//
// Параметры:
//  НовоеНачалоПериода <Дата>
//  НовыйКонецПериода  <Дата>
//
Процедура УстановитьПериод(НовоеНачалоПериода, НовыйКонецПериода) Экспорт
	НачалоПериода = НачалоДня(НовоеНачалоПериода);
	КонецПериода = КонецДня(НовыйКонецПериода);
КонецПроцедуры

// Предопределенная функция. Создает копию текущего отчета вместе с параметрами формирования.
//
// Возвращаемое значение:
//  <ОтчетОбъект>
//
Функция Скопировать() Экспорт
	КопияОтчета = Отчеты[Метаданные().Имя].Создать();
	
	Строка = ЗначениеВСтрокуВнутр(ЭтотОбъект.ПараметрыФормирования);
	КопияОтчета.ПараметрыФормирования = ЗначениеИзСтрокиВнутр(Строка); 
	КопияОтчета.УстановитьПериод(НачалоПериода, КонецПериода);
	Возврат КопияОтчета;		
КонецФункции

УстановитьПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
Настроить();

#КонецЕсли