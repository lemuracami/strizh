Функция СформироватьОтправитьПоПочте(НачПериода, КонПериода, ТерминалДоставки = Неопределено) Экспорт
		
	НачПериода = НачПериода - 86400;
	КонПериода = КонПериода - 86400;
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
	КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.РезультатыДоставки;
	КомпоновщикНастроек2.ЗагрузитьНастройки(ВариантОтправки.Настройки);
	Настройки = КомпоновщикНастроек2.Настройки;
	
	//установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СтПериод", СтПериод);
	//CeHbKA
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", НачПериода);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", КонПериода);
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = НачПериода;
	Период.ДатаОкончания = КонПериода;
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", Период);
	
	СхемаКомпоновкиДанных.Параметры.ДатаНачала.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	СхемаКомпоновкиДанных.Параметры.ДатаНачала.Значение = НачПериода;
	СхемаКомпоновкиДанных.Параметры.ДатаОкончания.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	СхемаКомпоновкиДанных.Параметры.ДатаОкончания.Значение = КонПериода;
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", ТерминалДоставки);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрСумма", ПараметрСумма);
	
	//CeHbKA
	Если НЕ ЗначениеЗаполнено(ТерминалДоставки) Тогда		
		// МАС - 21.03.2018 - № --->> 
		//ТерминалДоставки = Новый СписокЗначений;
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		//ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		ТерминалДоставки = Новый СписокЗначений;
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		ТерминалДоставки.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		//СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		//СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Значение.Добавить(Справочники.РегиональныеТерминалы.ПустаяСсылка());
		//СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Значение.Добавить(Справочники.РегиональныеТерминалы.МоскваСтриж);
		//СхемаКомпоновкиДанных.Параметры.ТерминалПриема.Значение.Добавить(Справочники.РегиональныеТерминалы.СПбСтриж);
		// <<--- МАС 		
	КонецЕсли;	
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", ТерминалДоставки);
	//CeHbKA
	СхемаКомпоновкиДанных.Параметры.ТерминалДоставки.Значение = ТерминалДоставки;
	
	
	//Добавляем отбор если есть КонтрагеныИсключения в параметрах
	//Если КонтрагеныИсключения <> Неопределено Тогда
	//    НовыйЭлементОтбора = Настройки.Отбор.Элементы.
	//    Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//    
	//    ПолеОтбора = Новый ПолеКомпоновкиДанных("ВладелецТовара");
	//    
	//    НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//    НовыйЭлементОтбора.Использование  = Истина;
	//    НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	//    НовыйЭлементОтбора.ПравоеЗначение = КонтрагеныИсключения;
	//КонецЕсли;
		
	//Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Результат = Новый ТабличныйДокумент();
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Сворачиваем
	//Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	Если (Результат.ВысотаТаблицы-Результат.ФиксацияСверху)>1 Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ОтправкаОтчетаПоОтказамПереносам
Процедура ОтправитьОтчетПоРегламенту(ДатаНач, ДатаКон, Терминал = Неопределено, МасП, НастройкаОтправки = Неопределено) Экспорт
	ОтправитьПоПочтеНаСервере(Истина, ДатаНач, ДатаКон, Терминал, НастройкаОтправки);
	ОтправитьПоПочтеРуководству(Истина, ДатаНач, ДатаКон, Терминал, МасП, НастройкаОтправки);
КонецПроцедуры	

//Асеев 07.04.2022 (по письму Отчет по переносам/отказам С заездом)>>>
Функция ПолучитьВнешниеНаборыДанных(ДатаНач, ДатаКон)
	
	ВнешниеНаборыДанных = Новый Структура;
	
	ТекДата = ТекущаяДата();
	Если ЗначениеЗаполнено(ДатаНач) Тогда
		ДатаНачДокументов = ДатаНач - 86400 * 60;
	Иначе
		ДатаНачДокументов = ТекДата - 86400 * 60;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаКон) Тогда
		ДатаКонДокументов = ДатаКон + 86400 * 120;
	Иначе
		ДатаКонДокументов = ТекДата + 86400 * 120;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ДатаНачДокументов", ДатаНачДокументов);
	Запрос.УстановитьПараметр("ДатаКонДокументов", ДатаКонДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	dbo_extFiles.id КАК id,
	|	dbo_extFiles.typeFile КАК typeFile
	|ИЗ
	|	ВнешнийИсточникДанных.ВнешнееХранилищеДанных.Таблица.dbo_extFiles КАК dbo_extFiles
	|ГДЕ
	|	dbo_extFiles.createDate МЕЖДУ &ДатаНачДокументов И &ДатаКонДокументов";
	
	ПрикрепленныеДокументы = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("ПрикрепленныеДокументы", ПрикрепленныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрикрепленныеДокументы.id КАК id,
	|	ПрикрепленныеДокументы.typeFile КАК typeFile
	|ПОМЕСТИТЬ ВТ_ПрикрепленныеДокументы
	|ИЗ
	|	&ПрикрепленныеДокументы КАК ПрикрепленныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрикрепленныеФайлы.Заказ.Номер КАК Номер,
	|	ИСТИНА КАК НаличиеФото
	|ИЗ
	|	Документ.Рейс КАК Т_Рейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рейс.Заказы КАК РейсЗаказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПрикрепленныеДокументы КАК ВТ_ПрикрепленныеДокументы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыПрикрепленныхДокументов КАК ТипыПрикрепленныхДокументов
	|					ПО ВТ_ПрикрепленныеДокументы.typeFile = ТипыПрикрепленныхДокументов.Код
	|				ПО ПрикрепленныеФайлы.ИдентификаторВнешнихДанных = ВТ_ПрикрепленныеДокументы.id
	|			ПО РейсЗаказы.Заказ = ПрикрепленныеФайлы.Заказ
	|		ПО (Т_Рейс.ДатаРейса МЕЖДУ &ДатаНач И &ДатаКон)
	|			И Т_Рейс.Ссылка = РейсЗаказы.Ссылка
	|			И (НЕ РейсЗаказы.УдаленИзРейса)
	|ГДЕ
	|	ТипыПрикрепленныхДокументов.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(Справочник.ТипыПрикрепленныхДокументов.Фото))";
	
	ВнешниеНаборыДанных.Вставить("ВнешниеДанные1", Запрос.Выполнить().Выгрузить());
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции
//Асеев 07.04.2022 (по письму Отчет по переносам/отказам С заездом)<<<

Процедура ОтправитьПоПочтеРуководству(ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, МасП = Неопределено, НастройкаОтправки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочтыРуководству;

	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтправки.Настройки);
	
	Если НЕ  Терминал = Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	Иначе
		Терминал = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТерминалДоставки").Значение;
	КонецЕсли;	
	
	Если Не ОтправкаПоРегламенту И НЕ ЗначениеЗаполнено(Терминал) Тогда					
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Справочники.РегиональныеТерминалы.МоскваСтриж);
	Иначе		
		Если  Не (ДатаНач = Неопределено И ДатаКон = Неопределено) Тогда		
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", новый Стандартныйпериод(НачалоДня(ДатаНач), КонецДня(ДатаКон)));
		Иначе			
			ПериодОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение;
			ДатаНач = ПериодОтчета.ДатаНачала;
			ДатаКон = ПериодОтчета.ДатаОкончания;			
		КонецЕсли;		
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Использование = Истина;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Использование = Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//Асеев 07.04.2022 (по письму Отчет по переносам/отказам С заездом)>>>
	ВнешниеНаборыДанных = ПолучитьВнешниеНаборыДанных(ДатаНач, ДатаКон);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,, Истина);
	//Асеев 07.04.2022 (по письму Отчет по переносам/отказам С заездом)<<<

	Результат = Новый ТабличныйДокумент;
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	//Результат.Показать();
	//Возврат;
	
	Г = Новый УникальныйИдентификатор;
	ПутьКФайлу = КаталогВременныхФайлов() + СокрЛП(Строка(Терминал.Город)) + "_ОтчетПоОтказамПереносам_" + ПредставлениеПериода(ДатаНач, ДатаКон, "ДФ=yyyy-MM-dd") + ".xls"; 	
	Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);	
	Т = Новый ТекстовыйДокумент();
	Т.Прочитать(ПутьКФайлу);
	
	Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач, ДатаКон, "ДЛФ=DD") + " (" + Терминал.Город + ")";
	
	Если МасП = Неопределено Тогда
		
		МасП = Новый Массив;	
		
		МасП.Добавить("rea@strizh-logistic.ru");
		МасП.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
		МасП.Добавить("logist@strizh-logistic.ru");
		МасП.Добавить("alexey.kuzmichev@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		МасП.Добавить("sergey.andrienko@strizh-logistic.ru");
		МасП.Добавить("inna.illarionova@strizh-logistic.ru");
		МасП.Добавить("syn@strizh-logistic.ru");
		МасП.Добавить("denis.zherebtsov@strizh-logistic.ru");
		МасП.Добавить("v.yakurnov@strizh-logistic.ru");
		МасП.Добавить("stanislav.tumakov@strizh-logistic.ru");
		//МасП.Добавить("daria.sladkova@strizh-logistic.ru");
		МасП.Добавить("i.belov@strizh-logistic.ru");	
		
	КонецЕсли;
		
	#Область ОтправкаИЛогирование
	
	Стр_ = СтрСоединить(МасП, "; ");

	Если Не НастройкаОтправки = Неопределено И ОтправкаПоРегламенту = Истина Тогда
		
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойРегламент);
		ПараметрыЗаписи.ВидОтчета = НастройкаОтправки.Отчет;
		ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
		ПараметрыЗаписи.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	Иначе
		
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойПользователь);
		ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоОтказамПереносам;
		ПараметрыЗаписи.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		Если НЕ НастройкаОтправки = Неопределено тогда
			ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
		КонецЕсли;

	КонецЕсли;
	
	ПараметрыЗаписи.Терминал = Терминал;
	
	ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
	
	ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
	ПараметрыЗаписи.GUID = Г;
	ПараметрыЗаписи.СписокПолучателей = Стр_;
	
	Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
		//Геннадий #4415 13.01.2021 ->
		ТекстОшибки = "";
		Если Не ЗначениеЗаполнено(НастройкаОтправки.ОператорРассылки) Или НастройкаОтправки.ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
			Отпр = lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""",,,,ТекстОшибки);		
		ИначеЕсли НастройкаОтправки.ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
			ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
			Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""",,,,ТекстОшибки);
		КонецЕсли;
		ПараметрыЗаписи.ОтчетОтправлен 	 = Отпр;
		ПараметрыЗаписи.ТекстОшибки 	 = ТекстОшибки;
		ПараметрыЗаписи.ОператорРассылки = ?(ЗначениеЗаполнено(НастройкаОтправки), НастройкаОтправки.ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования, 0);
		//Геннадий 13.01.2021 <-
		РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ОтправитьПоПочтеНаСервере(ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, НастройкаОтправки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочты;
	
	Если ПараметрыСеанса.ЭтоТестоваяСреда Тогда
		
		СписокКонтрагентовДляОтправки = Новый ТаблицаЗначений;
		СписокКонтрагентовДляОтправки.Колонки.Добавить("ИнтернетМагазин");
		
		СтрокаИМ = СписокКонтрагентовДляОтправки.Добавить();
		СтрокаИМ.ИнтернетМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_601");
		
		СтрокаИМ = СписокКонтрагентовДляОтправки.Добавить();
		СтрокаИМ.ИнтернетМагазин = Справочники.Контрагенты.НайтиПоКоду("Shop_723");

	Иначе
		СписокКонтрагентовДляОтправки = ПолучитьСписокКонтрагентовДляОтправки(ОтправкаПоРегламенту, ДатаНач, ДатаКон, Терминал, НастройкаОтправки);
	КонецЕсли;
	
	
	МасК = СписокКонтрагентовДляОтправки.ВыгрузитьКолонку("ИнтернетМагазин");
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	РассылкиКонтрагентов.Почта КАК Почта,
	|	РассылкиКонтрагентов.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
	|ГДЕ
	|	РассылкиКонтрагентов.ТипРассылки = &ТипРассылки
	|	И РассылкиКонтрагентов.Контрагент В(&МасК)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Почта";
	Зап.УстановитьПараметр("ТипРассылки", Перечисления.ТипыРассылки.ЛогистическаяРассылка);			
	Зап.УстановитьПараметр("МасК", МасК);
	СписокПочты = Зап.Выполнить().Выгрузить();

	
	Для Каждого СтрокаСписка Из СписокКонтрагентовДляОтправки Цикл
		
		ОтправитьПоПочтеКонтрагенту(СтрокаСписка.ИнтернетМагазин, СписокПочты, ОтправкаПоРегламенту, ДатаНач, ДатаКон, Терминал, НастройкаОтправки);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтправитьПоПочтеКонтрагенту(ИнтернетМагазин, СписокПочты, ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, НастройкаОтправки = Неопределено)
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

	Если СокрЛП(ИнтернетМагазин.Код) = "Shop_601" ИЛИ СокрЛП(ИнтернетМагазин.Код) = "Shop_752" Тогда
		ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочтыЯндекс;
	Иначе	
		ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочты;
	КонецеСли;	
	
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтправки.Настройки);
	
	Если НЕ  Терминал = Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	Иначе
		Терминал = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТерминалДоставки").Значение;
	КонецЕсли;	
	
	Если Не ОтправкаПоРегламенту И НЕ ЗначениеЗаполнено(Терминал) Тогда					
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Справочники.РегиональныеТерминалы.МоскваСтриж);
	Иначе		
		Если  Не (ДатаНач = Неопределено И ДатаКон = Неопределено) Тогда		
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", новый Стандартныйпериод(НачалоДня(ДатаНач), КонецДня(ДатаКон)));
		Иначе			
			ПериодОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение;
			ДатаНач = ПериодОтчета.ДатаНачала;
			ДатаКон = ПериодОтчета.ДатаОкончания;			
		КонецЕсли;		
	КонецЕсли;
	
	ИнтернетМагазинПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИнтернетМагазин");
	ИнтернетМагазинПараметр.Значение = ИнтернетМагазин;
	ИнтернетМагазинПараметр.Использование = Истина;	

	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Использование = Истина;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("МакетОформления").Значение = "Арктика";
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("МакетОформления").Использование = Истина;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Использование = Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));	

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

	Результат = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	УдаляемаяОбласть = Результат.Область("R1:R"+Результат.ФиксацияСверху);
	Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
	Если Результат.ВысотаТаблицы > 2 Тогда
		Г = Новый УникальныйИдентификатор;
		ПутьКФайлу = КаталогВременныхФайлов() + "report_f_t_" + ПредставлениеПериода(ДатаНач, ДатаКон, "ДФ=yyyy-MM-dd") + ".xls";  
		
		//Геннадий 02.02.2021 ->
		//добавлен партнер в тему
		Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач, ДатаКон, "ДЛФ=DD") + " (" + Терминал.Город + ") по " + ИнтернетМагазин.Наименование;
		//Геннадий 02.02.2021 <-
		
		Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
		
		МасП = Новый Массив;
		МасП.Добавить("logist@strizh-logistic.ru"); 
		
		Струк = Новый Структура;
		Струк.Вставить("Контрагент", ИнтернетМагазин);
		НайСтроки = СписокПочты.НайтиСтроки(Струк);
		Для Сч = 0 По НайСтроки.Количество() - 1 Цикл			
			МасП.Добавить(НайСтроки[Сч].Почта);
		КонецЦикла;	
		
		Стр_ = СтрСоединить(МасП, "; ");
		
		КонтрагентДляРассылки = ИнтернетМагазин;
		
		Если Не НастройкаОтправки = Неопределено И ОтправкаПоРегламенту = Истина Тогда
			
			ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);
			ПараметрыЗаписи.ВидОтчета = НастройкаОтправки.Отчет;
			ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
			ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;
			
		Иначе
			
			ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойПользователь);
			ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоОтказамПереносам;
			ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;
			
			Если НЕ НастройкаОтправки = Неопределено тогда
				ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
		
		ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
		ПараметрыЗаписи.GUID = Г;
		ПараметрыЗаписи.СписокПолучателей = Стр_;
		
		ПараметрыЗаписи.Терминал = Терминал; 
		
		Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
			
			//Геннадий #4415 13.01.2021 ->
			ТекстОшибки = "";
			//Асеев 31.10.2024 (Задача № 5339)>>>
			ОператорРассылки = lem.ОпределитьОператораРассылки(НастройкаОтправки, КонтрагентДляРассылки);
			//Асеев 31.10.2024 (Задача № 5339)<<<
			Если ОператорРассылки = Справочники.ОператорыСМСРассылки.strizhLogistic Тогда
				Отпр = lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""",,,,ТекстОшибки);		
			ИначеЕсли ОператорРассылки = Справочники.ОператорыСМСРассылки.union Тогда
				ОбработкаUnion = Обработки.СТРИЖ_ИнтеграцияUniOne.Создать();
				//Геннадий 15.11.2021 ++
				//Добавлены два последних параметра. Корректировка рассылки под Лореали
				Отпр = ОбработкаUnion.ОтправитьEMAIL_HTTP(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""",,,,ТекстОшибки,,,,, ИнтернетМагазин.Код, ПараметрыЗаписи.ВидОтчета);
				//Геннадий 15.11.2021 --
			КонецЕсли;
			ПараметрыЗаписи.ОтчетОтправлен 	 = Отпр;
			ПараметрыЗаписи.ТекстОшибки 	 = ТекстОшибки;
			ПараметрыЗаписи.ОператорРассылки = ОператорРассылки.КлючДанныхТаблицыВнешнегоЛогирования;
			//Геннадий 13.01.2021 <-
			
			РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокКонтрагентовДляОтправки(ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, НастройкаОтправки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ВариантОтправки = СхемаКомпоновкиДанных.ВариантыНастроек.ДляПочты;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтправки.Настройки);
	
	Если НЕ  Терминал = Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	Иначе
		Терминал = КомпоновщикНастроек.Настройки.ПараметрыДанных.Терминал;
	КонецЕсли;	
	
	Если Не ОтправкаПоРегламенту И НЕ ЗначениеЗаполнено(Терминал) Тогда					
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Справочники.РегиональныеТерминалы.МоскваСтриж);
	Иначе		
		Если  Не (ДатаНач = Неопределено И ДатаКон = Неопределено) Тогда		
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", новый Стандартныйпериод(НачалоДня(ДатаНач), КонецДня(ДатаКон)));
		Иначе			
			ПериодОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение;
			ДатаНач = ПериодОтчета.ДатаНачала;
			ДатаКон = ПериодОтчета.ДатаОкончания;			
		КонецЕсли;		
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	//Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

	Таб = Новый ДеревоЗначений;
	//Таб = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьОбъект(Таб);	
	//ПроцессорВывода.УстановитьДокумент(Таб);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат Таб.Строки;
	
КонецФункции	

#КонецОбласти

//Асеев 07.04.2022 (по письму Отчет по переносам/отказам С заездом)>>>
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЭлементыПараметров = НастройкиКомпоновщика.ПараметрыДанных.Элементы;
	
	ПериодОтчета = ЭлементыПараметров.Найти("ПериодОтчета").Значение;
	
	Если ЗначениеЗаполнено(ПериодОтчета) И ЗначениеЗаполнено(ПериодОтчета.ДатаНачала) И ЗначениеЗаполнено(ПериодОтчета.ДатаОкончания) Тогда
		
	Иначе
		ВызватьИсключение "Не заполнен период отчета";
	КонецЕсли;
	
	ДатаНач = ПериодОтчета.ДатаНачала;
	ДатаКон = ПериодОтчета.ДатаОкончания;
	
	ВнешниеНаборыДанных = ПолучитьВнешниеНаборыДанных(ДатаНач, ДатаКон);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры
//Асеев 07.04.2022 (по письму Отчет по переносам/отказам С заездом)<<<


