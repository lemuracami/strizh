#Если Клиент Тогда
	
// Предопределенное свойство. Содержит коллекцию параметров формирования отчета.
//
Перем ПараметрыФормирования Экспорт; // <Структура>

Перем КонструкторДанных;
Перем НачалоПериода, КонецПериода;

// Предопределенная функция. Возвращает свойства отчета.
//
// Возвращаемое значение:
//  <Структура[СвойстваОтчета]>
//
Функция ПолучитьСвойства() Экспорт
	Возврат Новый Структура("ИнтерфейсВыбораДаты, ДатаНачала, ДатаОкончания", "Период", НачалоПериода, КонецПериода);
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных отборов отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаОтборов]>
//
Функция ПолучитьОтборы() Экспорт
	тзОтборы = КонструкторДанных.ПолучитьТаблицуОтборов();
	
	Возврат тзОтборы;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных группировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаГруппировок]>
//
Функция ПолучитьГруппировки() Экспорт
	тзГруппировки = КонструкторДанных.ПолучитьТаблицуГруппировок("Доставка");
	
	Возврат тзГруппировки;
КонецФункции

// Предопределенная функция. Возвращает имена группировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеГруппировкиПоУмолчанию() Экспорт
	мсГруппировки = Новый Массив;
	
	мсГруппировки.Добавить("Роль");
	
	Возврат мсГруппировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных сортировок отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировки() Экспорт
	тзСортировки = КонструкторДанных.ПолучитьТаблицуСортировок();
	
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу сортировок, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаСортировок]>
//
Функция ПолучитьСортировкиПоУмолчанию() Экспорт
	тзСортировки = новаОтчеты.ПолучитьТаблицуСортировок();
		
	Возврат тзСортировки;
КонецФункции

// Предопределенная функция. Возвращает таблицу всех возможных показателей отчета.
//
// Возвращаемое значение:
//  <ТаблицаЗначений[ТаблицаПоказателей]>
//
Функция ПолучитьПоказатели() Экспорт
	тзПоказатели = КонструкторДанных.ПолучитьТаблицуПоказателей();
	
	Возврат тзПоказатели;
КонецФункции

// Предопределенная функция. Возвращает имена показателей, выбранных по умолчанию.
//
// Возвращаемое значение:
//  <Массив(<Строка>)>
//
Функция ПолучитьВыбранныеПоказателиПоУмолчанию() Экспорт
	мсПоказатели = Новый Массив;
	
	мсПоказатели.Добавить("Доставка");
	мсПоказатели.Добавить("КоличествоДоставок");
	
	Возврат мсПоказатели;
КонецФункции

// Предопределенная процедура. Формирует отчет в указанном табличном документе с текущими параметрами формирования.
//
// Параметры:
//  ТД <ТабличныйДокумент>
//
Процедура Сформировать(ТД) Экспорт
	УстановитьПериод(ПараметрыФормирования.НачалоПериода, ПараметрыФормирования.КонецПериода);
	Настроить();	
	
	КонструкторДанных.ПрименитьПараметрыФормированияОтчета(ПараметрыФормирования);
	
	дзРезультат = КонструкторДанных.ПолучитьДанные();
		
	тзИтоги = КонструкторДанных.ПолучитьТаблицуИтогов();
	новаОтчеты.СформироватьТабличныйДокумент(ЭтотОбъект, ТД, дзРезультат, тзИтоги, "");
		
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТД.АвтоМасштаб = Истина;
КонецПроцедуры

// Предопределенная процедура. Обрабатывает событие "Обработка расшифровки" отчета.
//
// Параметры:
//  Форма                <Форма>
//  Элемент              <ЭлементУправления>
//  Расшифровка          <Произвольный>
//  СтандартнаяОбработка <Булево>
//
Процедура ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если новаОтчеты.Расшифровать(Форма, Элемент, Расшифровка) Тогда Возврат; КонецЕсли;
	ОткрытьЗначение(Расшифровка);
КонецПроцедуры

Процедура Настроить()
	КонструкторДанных = Обработки.новаКонструкторЗапроса.Создать();
	
	КонструкторДанных.ТекстЗапроса = "
	|Задача.новаЗадачаМестнойДоставки КАК ЗадачиМестнойДоставки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	БизнесПроцесс.новаМестнаяДоставка КАК Доставки
	|ПО
	|	  Доставки.Ссылка = ЗадачиМестнойДоставки.БизнесПроцесс
	| ИЛИ Доставки.Ссылка = ЗадачиМестнойДоставки.БизнесПроцесс.Доставка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаЗаданияРейсов КАК ПогрузкиРейсов
	|ПО
	|	ПогрузкиРейсов.Доставка = Доставки.Ссылка
	| И ПогрузкиРейсов.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Погрузка)
	| И ПогрузкиРейсов.МаршрутСопровождения = Ложь
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.новаЗаданияРейсов КАК РазгрузкиРейсов
	|ПО
	|	РазгрузкиРейсов.Доставка = Доставки.Ссылка
	| И РазгрузкиРейсов.Вид = ЗНАЧЕНИЕ(Перечисление.новаВидыЗаданийРейсаМестнойДоставки.Разгрузка)
	| И РазгрузкиРейсов.МаршрутСопровождения = Ложь
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	БизнесПроцесс.новаРейсМестнойДоставки КАК Рейсы
	|ПО
///	|	Рейсы.Ссылка = ЕСТЬNULL(ПогрузкиРейсов.Рейс, РазгрузкиРейсов.Рейс) 
	|	Рейсы.Ссылка = ПогрузкиРейсов.Рейс ИЛИ Рейсы.Ссылка = РазгрузкиРейсов.Рейс
	|
	|";
	
	КонструкторДанных.ПостоянныйОтбор = "НЕ ЗадачиМестнойДоставки.Выполнена
	|И ЗадачиМестнойДоставки.Роль <> ЗНАЧЕНИЕ(Справочник.новаЭтапыМестнойДоставки.ПустаяСсылка) 
	|{ОТБОР_ПО_ПЕРИОДУ}";
	
	КонструкторДанных.ДобавитьПараметр("НачалоПериода", '00010101');
	КонструкторДанных.ДобавитьПараметр("КонецПериода", '00010101');
	
	КонструкторДанных.ДобавитьПоле("Роль", "Состояние");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ЗадачиМестнойДоставки.Роль");
	КонструкторДанных.ДобавитьОтборПоля(, "ЗадачиМестнойДоставки.Роль");
	КонструкторДанных.ДобавитьСортировкуПоля("ЗадачиМестнойДоставки.Роль.Наименование");
	
	КонструкторДанных.ДобавитьПоле("Доставка");
	КонструкторДанных.ДобавитьВыборкуПоля(, "Доставки.Ссылка");
	КонструкторДанных.ДобавитьОтборПоля(, "Доставки.Ссылка");
	КонструкторДанных.ДобавитьСортировкуПоля("Доставки.Ссылка.Номер");
	
	КонструкторДанных.ДобавитьПоле("ДатаДоставки");
	КонструкторДанных.ДобавитьВыборкуПоля(, "НАЧАЛОПЕРИОДА(Доставки.Дата, День)");
	КонструкторДанных.ДобавитьОтборПоля(, "НАЧАЛОПЕРИОДА(Доставки.Дата, День)");
	КонструкторДанных.ДобавитьСортировкуПоля("НАЧАЛОПЕРИОДА(Доставки.Дата, День)");
	
	КонструкторДанных.ДобавитьПоле("Рейс");
	КонструкторДанных.ДобавитьВыборкуПоля(, "ЕСТЬNULL(Рейсы.Ссылка, Неопределено)");
	КонструкторДанных.ДобавитьОтборПоля(, "Рейсы.Ссылка");
	КонструкторДанных.ДобавитьСортировкуПоля("Рейсы.Номер");
	
	КонструкторДанных.ДобавитьПоле("КоличествоДоставок",, "ЧДЦ=0");
	КонструкторДанных.ДобавитьВыборкуПоля(, "1");
	КонструкторДанных.ДобавитьИтог("КоличествоДоставок");
	
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Роль");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Доставка");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("Рейс");
	КонструкторДанных.ДобавитьДоступнуюГруппировку("ДатаДоставки");
	
	КонструкторДанных.СформироватьКолонки();
КонецПроцедуры

// Предопределенная процедура. Устанавливает в отчет новый период формирования.
//
// Параметры:
//  НовоеНачалоПериода <Дата>
//  НовыйКонецПериода  <Дата>
//
Процедура УстановитьПериод(НовоеНачалоПериода, НовыйКонецПериода) Экспорт
	НачалоПериода = НачалоДня(НовоеНачалоПериода);
	КонецПериода = КонецДня(НовыйКонецПериода);
КонецПроцедуры

// Предопределенная функция. Создает копию текущего отчета вместе с параметрами формирования.
//
// Возвращаемое значение:
//  <ОтчетОбъект>
//
Функция Скопировать() Экспорт
	КопияОтчета = Отчеты[Метаданные().Имя].Создать();
	
	Строка = ЗначениеВСтрокуВнутр(ЭтотОбъект.ПараметрыФормирования);
	КопияОтчета.ПараметрыФормирования = ЗначениеИзСтрокиВнутр(Строка); 
	КопияОтчета.УстановитьПериод(НачалоПериода, КонецПериода);
	Возврат КопияОтчета;		
КонецФункции

УстановитьПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
Настроить();

#КонецЕсли