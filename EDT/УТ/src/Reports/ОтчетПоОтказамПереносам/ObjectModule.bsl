
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка=ЛОжь;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// МАС - 19.06.2017 - №1124 --->> 
	Терминал = Настройки.ПараметрыДанных.Элементы[4].Значение;
	Если НЕ ЗначениеЗаполнено(Терминал) Тогда
		Терминал = ПараметрыСеанса.ТерминалДоставки;
		Если НЕ ЗначениеЗаполнено(Терминал) Тогда			
			Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж;
		КонецЕсли;			
	КонецЕсли;
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	// <<--- МАС 
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,ДанныеРасшифровки);
	
	МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение = МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение + 43200;
	МакетКомпоновки.ЗначенияПараметров.Период.Значение = МакетКомпоновки.ЗначенияПараметров.Период.Значение + 43200;
	МакетКомпоновки.ЗначенияПараметров.П.Значение = МакетКомпоновки.ЗначенияПараметров.П.Значение + 43200;
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	
	//Обл = ДокументРезультат.Область("R7:R12");
	//ДокументРезультат.ПовторятьПриПечатиСтроки = Обл;
	//
	//ДокументРезультат.РазборПоКопиям = РазобратьПоКопиям;
	ДокументРезультат.Автомасштаб = истина;
	
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();

	Пока ЭлементРезультата <> Неопределено Цикл
		//Если ЭлементРезультата.ЗначенияПараметров.Количество()=1 Тогда
		//	Если ЭлементРезультата.ЗначенияПараметров[0].Значение = "Разорвать" Тогда
		//		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		//	КонецЕсли;
		//КонецЕсли;
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
КонецПроцедуры


Процедура ОтправитьПоПочтеРуководству(ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, МасП = Неопределено, НастройкаОтправки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакетНаСервере();
	
	СтруктураВариантов = Новый Структура;
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	ДатаНач_ = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаНачала;
	ДатаКон_ = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаОкончания;
	ПериодОтчета_ = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение;
	
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.ДляПочтыРуководству);
	//Если Не ОтправкаПоРегламенту Тогда
		КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].Значение = ПериодОтчета_;
		//КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение;
	//КонецеСли;	
	
	
	Если КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].использование Тогда
		КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].ПравоеЗначение;
		КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].ВидСравнения;
		КомпоновщикНастроек.Настройки.отбор.элементы[0].Использование = Истина;
	КонецеСли;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Использование = Истина;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Использование = Истина;
	
	// МАС - 19.06.2017 - №1124 --->> 
	Если НЕ ЗначениеЗаполнено(Терминал) Тогда					
		Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж;				
	КонецЕсли;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	// <<--- МАС
	
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;
	
	//СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Помещаем в переменную данные о расшифровке данных
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки   ДанныеРасшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	//+++ БАО 15.09.2017 №
	
	Если Не ОтправкаПоРегламенту И НЕ ЗначениеЗаполнено(Терминал) Тогда					
		Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж;				
	КонецЕсли;
	МакетКомпоновки.ЗначенияПараметров.ТерминалДоставки.Значение = Терминал;
	
	//--- БАО 15.09.2017 №
	
	ТерминалСПб = Справочники.РегиональныеТерминалы.СПбСтриж;

	
	Если Не ОтправкаПоРегламенту Тогда
		МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение = ДатаКон_ + 43200;
		//МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение + 43200;
		МакетКомпоновки.ЗначенияПараметров.Период.Значение =  ДатаКон_ + 43200;
		МакетКомпоновки.ЗначенияПараметров.П.Значение = ДатаКон_ + 43200;
		//МакетКомпоновки.ЗначенияПараметров.П.Значение + 43200;	
		МакетКомпоновки.ЗначенияПараметров.НачПериода.Значение = ДатаНач_;
				
	Иначе
		МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение = ДатаКон + 43200;
		МакетКомпоновки.ЗначенияПараметров.Период.Значение = ДатаКон + 43200;
		МакетКомпоновки.ЗначенияПараметров.П.Значение = ДатаКон + 43200;	
		
		МакетКомпоновки.ЗначенияПараметров.НачПериода.Значение = ДатаНач;
				
	КонецЕсли;	
	
	
	//Выполним компоновку с помощью процессора компоновки   ДанныеРасшифровки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина
	);
	
	//Очищаем поле табличного документа
	//Результат = Элементы.Результат;
	Результат = Новый ТабличныйДокумент;
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//УдаляемаяОбласть = Результат.Область("R8:R10");
	//Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	Г = Новый УникальныйИдентификатор;
	//ПутьКФайлу = КаталогВременныхФайлов() + Строка(Г) + ".html";
	
	// МАС - 25.10.2017 - № --->> 
	//Если Не ОтправкаПоРегламенту Тогда
	//	ПутьКФайлу = КаталогВременныхФайлов() + "report_f_t_" + ПредставлениеПериода(ДатаНач_, ДатаКон_, "ДФ=yyyy-MM-dd") + ".xls";    //  + Строка(Г)   + Строка(Г)
	//Иначе
	//	ПутьКФайлу = КаталогВременныхФайлов() + "report_f_t_" + ПредставлениеПериода(ДатаНач, ДатаКон, "ДФ=yyyy-MM-dd") + ".xls";    //  + Строка(Г)   + Строка(Г)
	//КонецеСли;	
	
	Если Не ОтправкаПоРегламенту Тогда
		ПутьКФайлу = КаталогВременныхФайлов() + СокрЛП(Строка(Терминал.Город)) + "_ОтчетПоОтказамПереносам_" + ПредставлениеПериода(ДатаНач_, ДатаКон_, "ДФ=yyyy-MM-dd") + ".xls";    //  + Строка(Г)   + Строка(Г)
	Иначе
		ПутьКФайлу = КаталогВременныхФайлов() + СокрЛП(Строка(Терминал.Город)) + "_ОтчетПоОтказамПереносам_" + ПредставлениеПериода(ДатаНач, ДатаКон, "ДФ=yyyy-MM-dd") + ".xls";    //  + Строка(Г)   + Строка(Г)
	КонецеСли;
	// <<--- МАС 
	
	
	//Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.HTML3);
	Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	Т = Новый ТекстовыйДокумент();
	Т.Прочитать(ПутьКФайлу);
	//Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаНачала, КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.Датаокончания, "ДЛФ=DD");
	Если Не ОтправкаПоРегламенту Тогда
		Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач_, ДатаКон_, "ДЛФ=DD") + " (" + Терминал.Город + ")";
	Иначе
		Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач, ДатаКон, "ДЛФ=DD") + " (" + Терминал.Город + ")";
	КонецеСли;	
	
	
	Если МасП = Неопределено Тогда
		
		МасП = Новый Массив;	
	
		//МасП.Добавить("dmitry.mamonov@strizh-logistic.ru");
		//МасП.Добавить("svn@strizh-logistic.ru");
		МасП.Добавить("rea@strizh-logistic.ru");
		//МасП.Добавить("maksim.ivanov@strizh-logistic.ru");	
		
		//МасП.Добавить("anatoly.kopytin@strizh-logistic.ru");
		МасП.Добавить("dmitry.sherbinkin@strizh-logistic.ru");
		МасП.Добавить("logist@strizh-logistic.ru");
		//+++++Серегин М.В. 19.01.2016 11:54:20 
		//МасП.Добавить("yuriy.gnedov@strizh-logistic.ru");
		//-----Серегин М.В. 19.01.2016 11:54:22 
		МасП.Добавить("alexey.kuzmichev@strizh-logistic.ru");
		МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//МасП.Добавить("alexandr_chibisov@strizh-logistic.ru");
		МасП.Добавить("sergey.andrienko@strizh-logistic.ru");
		МасП.Добавить("inna.illarionova@strizh-logistic.ru");
		//МасП.Добавить("dmitry.romanov@strizh-logistic.ru");
		//+++++Серегин М.В. 19.01.2016 12:02:22 
		//МасП.Добавить("yuriy.gnedov@strizh-logistic.ru");
		//-----Серегин М.В. 19.01.2016 12:02:24 
		МасП.Добавить("syn@strizh-logistic.ru");
		//МасП.Добавить("andrey.maksaev@strizh-logistic.ru");
		//МасП.Добавить("samovivoz@strizh-logistic.ru");
		МасП.Добавить("denis.zherebtsov@strizh-logistic.ru");
		//МасП.Добавить("igor.tischenko@strizh-logistic.ru");
		МасП.Добавить("v.yakurnov@strizh-logistic.ru");
		//МасП.Добавить("olga.efremova@strizh-logistic.ru");
		МасП.Добавить("stanislav.tumakov@strizh-logistic.ru");
		//МасП.Добавить("denis.matskevich@strizh-logistic.ru");
		//МасП.Добавить("daria.sladkova@strizh-logistic.ru");
		МасП.Добавить("i.belov@strizh-logistic.ru");	
		
		//Если Терминал = ТерминалСпб Тогда
		//	МасП.Добавить("olga.efremova@strizh-logistic.ru");
		//КонецЕсли;	
		
		
	КонецЕсли;
		
	
	#Область ОтправкаИЛогирование
	
	Стр_ = СтрСоединить(МасП, "; ");

	Если Не НастройкаОтправки = Неопределено И ОтправкаПоРегламенту = Истина Тогда
		
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойРегламент);
		ПараметрыЗаписи.ВидОтчета = НастройкаОтправки.Отчет;
		ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
		ПараметрыЗаписи.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	Иначе
		
		ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетВнутреннийПочтойПользователь);
		ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоОтказамПереносам;
		ПараметрыЗаписи.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	
	ПараметрыЗаписи.Терминал = Терминал;
	
	ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
	
	ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
	ПараметрыЗаписи.GUID = Г;
	ПараметрыЗаписи.СписокПолучателей = Стр_;
	
	Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
		//lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""");
		ПараметрыЗаписи.ОтчетОтправлен = lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""") ;
		
		РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
	КонецЕсли;
	
	#КонецОбласти
	//МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	//МасП.Добавить("konstantin.patsatsiya@strizh-logistic.ru");
	//Отпр = lem.ОтправитьСообщение(МасП, "Отчет по отказам/переносам за " + ПредставлениеПериода(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаНачала, Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.Датаокончания, "ДЛФ=DD"), Стр, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.HTML) ;

	
	//Отпр = lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""") ;  // Отключено Задача № 3427
	
КонецПроцедуры


Процедура ОтправитьОтчетПоРегламенту(ДатаНач, ДатаКон, Терминал = Неопределено, МасП, НастройкаОтправки = Неопределено) Экспорт
	ОтправитьПоПочтеНаСервере(Истина, ДатаНач, ДатаКон, Терминал, НастройкаОтправки);
	
	// ++Задача № 2975 ОтправитьПоПочтеРуководству(Истина, ДатаНач, ДатаКон, Терминал, МасП, НастройкаОтправки);
	НовыйОтчет = Отчеты.ОтчетПоОтказамПереносамНовый.Создать();
	НовыйОтчет.ОтправитьПоПочтеРуководству(Истина, ДатаНач, ДатаКон, Терминал, МасП, НастройкаОтправки);
	// --Задача № 2975
КонецПроцедуры	


Функция ПолучитьМакетНаСервере()  
	
	//ЭтотОбъект_=РеквизитФормыВЗначение("Отчет");  
	//
	//Макет = ЭтотОбъект_.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");  
	Макет = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Возврат Макет;
	
КонецФункции

Процедура ОтправитьПоПочтеНаСервере(ОтправкаПоРегламенту = Ложь, ДатаНач = Неопределено, ДатаКон = Неопределено, Терминал = Неопределено, НастройкаОтправки = Неопределено) Экспорт
		
	
	СхемаКомпоновкиДанных = ПолучитьМакетНаСервере();
	
	СтруктураВариантов = Новый Структура;
	пВарианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	
	ДатаНач_ = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаНачала;
	ДатаКон_ = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаОкончания;
		
	ПериодОтчета_ = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение;
	
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.ДляПочты);
	
	//Если Не ОтправкаПоРегламенту Тогда
		КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].Значение = ПериодОтчета_;
		//КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение;
	//КонецеСли;	
	
	Если КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].использование Тогда
		КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].ПравоеЗначение;
		КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].ВидСравнения;
		КомпоновщикНастроек.Настройки.отбор.элементы[0].Использование = Истина;
	КонецеСли;
	
	
	// МАС - 19.06.2017 - №1124 --->> 
	Если НЕ ЗначениеЗаполнено(Терминал) Тогда					
		Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж;				
	КонецЕсли;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТерминалДоставки", Терминал);
	// <<--- МАС
	
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;
	
	
	
	//СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Помещаем в переменную данные о расшифровке данных
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки   ДанныеРасшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Если Не ОтправкаПоРегламенту Тогда
		МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение = ДатаКон_ + 43200;
		//МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение + 43200;
		МакетКомпоновки.ЗначенияПараметров.Период.Значение =  ДатаКон_ + 43200;
		МакетКомпоновки.ЗначенияПараметров.П.Значение = ДатаКон_ + 43200;
		//МакетКомпоновки.ЗначенияПараметров.П.Значение + 43200;	
		МакетКомпоновки.ЗначенияПараметров.НачПериода.Значение = ДатаНач_; 
		
	Иначе
		МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение = ДатаКон + 43200;
		МакетКомпоновки.ЗначенияПараметров.Период.Значение = ДатаКон + 43200;
		МакетКомпоновки.ЗначенияПараметров.П.Значение = ДатаКон + 43200;		
		
		МакетКомпоновки.ЗначенияПараметров.НачПериода.Значение = ДатаНач;				
				
	КонецеСли;	
	
	
	//Выполним компоновку с помощью процессора компоновки   ДанныеРасшифровки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина
	);
	
	//Очищаем поле табличного документа
	Результат = Новый ТаблицаЗначений;
	//Результат = Элементы.Результат;
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Таб = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(Таб);	
		
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	МасК = Таб.Строки.ВыгрузитьКолонку("ИнтернетМагазин");
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
				|	РассылкиКонтрагентов.Почта КАК Почта,
				|	РассылкиКонтрагентов.Контрагент КАК Контрагент
				|ИЗ
				|	РегистрСведений.РассылкиКонтрагентов КАК РассылкиКонтрагентов
				|ГДЕ
				|	РассылкиКонтрагентов.ТипРассылки = &ТипРассылки
				|	И РассылкиКонтрагентов.Контрагент В(&МасК)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Контрагент,
				|	Почта";
	Зап.УстановитьПараметр("ТипРассылки", Перечисления.ТипыРассылки.ЛогистическаяРассылка);			
	Зап.УстановитьПараметр("МасК", МасК);
	СписокПочты = Зап.Выполнить().Выгрузить();
	
	/////////////////	
	//Из схемы возьмем настройки по умолчанию          "logist@strizh-logistic.ru"
	
	Для Каждого Тек Из Таб.Строки Цикл
		//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		Если СокрЛП(Тек.ИнтернетМагазин.Код) = "Shop_601" ИЛИ СокрЛП(Тек.ИнтернетМагазин.Код) = "Shop_752" Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.ДляПочтыЯндекс);
		Иначе	
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.ДляПочты);
		КонецеСли;	
		КомпоновщикНастроек.Настройки.параметрыданных.Элементы[0].Значение = ПериодОтчета_;
		//КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение
		
		// МАС - 12.04.2018 - № --->> 	
		//КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = Тек.ИнтернетМагазин.Ссылка;		
		КонтрагентРодитель = Неопределено;
		Агрегировать = Ложь;
		ЗапросАгрегирование = Новый Запрос("ВЫБРАТЬ
		                      |	ЕСТЬNULL(ПараметрыКонтрагентовСрезПоследних.АгрегироватьДанныеВОтправляемыхОтчетах, ЛОЖЬ) КАК Агрегировать,
		                      |	Контрагенты.Ссылка КАК КонтрагентРодитель
		                      |ИЗ
		                      |	РегистрСведений.ПараметрыКонтрагентов.СрезПоследних КАК ПараметрыКонтрагентовСрезПоследних
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		                      |		ПО ПараметрыКонтрагентовСрезПоследних.Контрагент = Контрагенты.ОсновнойМагазин
		                      |ГДЕ
		                      |	ПараметрыКонтрагентовСрезПоследних.Контрагент = &Контрагент");
		ЗапросАгрегирование.УстановитьПараметр("Контрагент", Тек.ИнтернетМагазин);
		РезАгр = ЗапросАгрегирование.Выполнить().Выбрать();
		Если РезАгр.Следующий() Тогда		
			Агрегировать = РезАгр.Агрегировать;
			КонтрагентРодитель = РезАгр.КонтрагентРодитель;	
		КонецЕсли;
				
		Если Агрегировать И ЗначениеЗаполнено(КонтрагентРодитель) Тогда
		    КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = КонтрагентРодитель;
			КомпоновщикНастроек.Настройки.отбор.элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;		
		Иначе		
			КомпоновщикНастроек.Настройки.отбор.элементы[0].ПравоеЗначение = Тек.ИнтернетМагазин.Ссылка;		
		КонецЕсли;
		// <<--- МАС
		КомпоновщикНастроек.Настройки.отбор.элементы[0].Использование = Истина;
		
		
		КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьОтбор").Использование = Истина;
		КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("МакетОформления").Значение = "Арктика";
		КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("МакетОформления").Использование = Истина;
		КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КомпоновщикНастроек.Настройки.Параметрывывода.элементы.найти("ВыводитьПараметрыДанных").Использование = Истина;
		
		Настройки = КомпоновщикНастроек.Настройки;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки);
		
		//+++ БАО 15.09.2017 №
		
		Если Не ОтправкаПоРегламенту И НЕ ЗначениеЗаполнено(Терминал) Тогда					
			Терминал = Справочники.РегиональныеТерминалы.МоскваСтриж;				
		КонецЕсли;
		МакетКомпоновки.ЗначенияПараметров.ТерминалДоставки.Значение = Терминал;
		
		//--- БАО 15.09.2017 №

		
		Если Не ОтправкаПоРегламенту Тогда
			МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение = ДатаКон_ + 43200;
			//МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение + 43200;
			МакетКомпоновки.ЗначенияПараметров.Период.Значение =  ДатаКон_ + 43200;
			МакетКомпоновки.ЗначенияПараметров.П.Значение = ДатаКон_ + 43200;
			//МакетКомпоновки.ЗначенияПараметров.П.Значение + 43200;	
			МакетКомпоновки.ЗначенияПараметров.НачПериода.Значение = ДатаНач_;
						
		Иначе
			МакетКомпоновки.ЗначенияПараметров.НачПериода.Значение = ДатаНач;
			
			МакетКомпоновки.ЗначенияПараметров.КонПериода.Значение = ДатаКон + 43200;
			МакетКомпоновки.ЗначенияПараметров.Период.Значение = ДатаКон + 43200;
			МакетКомпоновки.ЗначенияПараметров.П.Значение = ДатаКон + 43200;		
			
		КонецеСли;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
		//Результат = Элементы.Результат;
		Результат = Новый ТабличныйДокумент;
		Результат.Очистить();
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		
		УдаляемаяОбласть = Результат.Область("R1:R"+Результат.ФиксацияСверху);
		Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		
		Если Результат.ВысотаТаблицы > 2 Тогда
			Г = Новый УникальныйИдентификатор;
			Если Не ОтправкаПоРегламенту Тогда
				ПутьКФайлу = КаталогВременныхФайлов() + "report_f_t_" + ПредставлениеПериода(ДатаНач_, ДатаКон_, "ДФ=yyyy-MM-dd") + ".xls";  
				Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач_, ДатаКон_, "ДЛФ=DD") + " (" + Терминал.Город + ")";
			Иначе
				ПутьКФайлу = КаталогВременныхФайлов() + "report_f_t_" + ПредставлениеПериода(ДатаНач, ДатаКон, "ДФ=yyyy-MM-dd") + ".xls";  
				Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач, ДатаКон, "ДЛФ=DD") + " (" + Терминал.Город + ")";
			КонецеСли;
			
			Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	        МасП = Новый Массив;
			МасП.Добавить("logist@strizh-logistic.ru"); 
			
			Струк = Новый Структура;
			Струк.Вставить("Контрагент", Тек.ИнтернетМагазин.Ссылка);
			НайСтроки = СписокПочты.НайтиСтроки(Струк);
			Для Сч = 0 По НайСтроки.Количество() - 1 Цикл			
				МасП.Добавить(НайСтроки[Сч].Почта);
			КонецЦикла;	

			Стр_ = СтрСоединить(МасП, "; ");
			
			КонтрагентДляРассылки = Тек.ИнтернетМагазин.Ссылка;
			
			Если Не НастройкаОтправки = Неопределено И ОтправкаПоРегламенту = Истина Тогда
				
				ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойРегламент);
				ПараметрыЗаписи.ВидОтчета = НастройкаОтправки.Отчет;
				ПараметрыЗаписи.НастройкаОтправки = НастройкаОтправки;
				ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;
				
			Иначе
				
				ПараметрыЗаписи = ВнешнееЛогированиеСервер.ПараметрыЗаписиЛогаОтправкиОтчета(Справочники.ТипыОтправкиОтчетов.ОтчетПартнерамПочтойПользователь);
				ПараметрыЗаписи.ВидОтчета = Перечисления.ВидыОтправляемыхОтчетов.ОтчетПоОтказамПереносам;
				ПараметрыЗаписи.Контрагент = КонтрагентДляРассылки;
				
			КонецЕсли;
			
			ПараметрыЗаписи.ПериодФормирования = ТекущаяДата();
			
			ПараметрыЗаписи.ДвоичныеДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
			ПараметрыЗаписи.GUID = Г;
			ПараметрыЗаписи.СписокПолучателей = Стр_;
			
			ПараметрыЗаписи.Терминал = Терминал; 
			
			Если Не ВнешнееЛогированиеСервер.ОтчетОтправлялся(ПараметрыЗаписи) Тогда
				ПараметрыЗаписи.ОтчетОтправлен = lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""");
				
				РезультатЛогирования = ВнешнееЛогированиеСервер.ЗаписатьСтрокуЛогаОтчетыКОтправке(ПараметрыЗаписи);
			КонецЕсли;
			
		КонецЕсли;
		// ОРИГИНАЛЬНАЯ ОТПРАВКА
	//	Если Результат.ВысотаТаблицы > 2 Тогда //+++ Костя 110915 Есть данные для отправки
	//		Г = Новый УникальныйИдентификатор;
	//		//ПутьКФайлу = КаталогВременныхФайлов() + Строка(Г) + ".html";
	//		//ПутьКФайлу = КаталогВременныхФайлов() + Строка(Г) + ".xls";
	//		Если Не ОтправкаПоРегламенту Тогда
	//			ПутьКФайлу = КаталогВременныхФайлов() + "report_f_t_" + ПредставлениеПериода(ДатаНач_, ДатаКон_, "ДФ=yyyy-MM-dd") + ".xls";    //  + Строка(Г)   + Строка(Г)
	//		Иначе
	//			ПутьКФайлу = КаталогВременныхФайлов() + "report_f_t_" + ПредставлениеПериода(ДатаНач, ДатаКон, "ДФ=yyyy-MM-dd") + ".xls";    //  + Строка(Г)   + Строка(Г)
	//		КонецеСли;
	//		//Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.HTML3);
	//		Результат.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	//		Т = Новый ТекстовыйДокумент();
	//		Т.Прочитать(ПутьКФайлу);
	//		Если Не ОтправкаПоРегламенту Тогда
	//			Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач_, ДатаКон_, "ДЛФ=DD") + " (" + Терминал.Город + ")";
	//		Иначе
	//			Стр = "Отчет по отказам/переносам за " + ПредставлениеПериода(ДатаНач, ДатаКон, "ДЛФ=DD") + " (" + Терминал.Город + ")";
	//		КонецеСли;	
	//		//Т.ПолучитьТекст();
	//		МасП = Новый Массив;
	//		
	//		
	//		
	//		//МасП.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
	//		
	//		МасП.Добавить("logist@strizh-logistic.ru");       
	//			
	//        //+++++Серегин М.В. 19.01.2016 11:53:57 
	//        //МасП.Добавить("yuriy.gnedov@strizh-logistic.ru");
	//        //-----Серегин М.В. 19.01.2016 11:53:59 
	//		//МасП.Добавить("evgeniy.marochkin@strizh-logistic.ru");
	//		
	//		Струк = Новый Структура;
	//		Струк.Вставить("Контрагент", Тек.ИнтернетМагазин.Ссылка);
	//		НайСтроки = СписокПочты.НайтиСтроки(Струк);
	//		Для Сч = 0 По НайСтроки.Количество() - 1 Цикл			
	//			МасП.Добавить(НайСтроки[Сч].Почта);
	//		КонецЦикла;	
	//		//
	//		//Отпр = lem.ОтправитьСообщение(МасП, "Отчет по отказам/переносам за " + ПредставлениеПериода(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаНачала, Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.Датаокончания, "ДЛФ=DD"), Стр, , "Логистическая компания ""Стриж""",, ТипТекстаПочтовогоСообщения.HTML) ;
	//		
	//		Отпр = lem.ОтправитьСообщение(МасП, Стр, Стр, ПутьКФайлу, "Логистическая компания ""Стриж""");
	//		
	//		Если Не Отпр Тогда
	//			
	//			ЗаписьЖурналаРегистрации("ОтчетПоОтказамПереносам", УровеньЖурналаРегистрации.Ошибка, , , " " + Терминал+ " " + Тек.ИнтернетМагазин.Ссылка + " " + ОписаниеОшибки());
	//			
	//		Иначе 
	//			
	//			ЗаписьЖурналаРегистрации("ОтчетПоОтказамПереносам", УровеньЖурналаРегистрации.Информация, , , " " + Терминал + " " + Тек.ИнтернетМагазин.Ссылка);
	//			
	//		КонецЕсли;	
	//
	//		
	//		Сообщить("Вывод данных по " + СокрЛП(Тек.ИнтернетМагазин.Наименование));
	//	КонецЕсли;//--- Костя /Условие
		
	КонецЦикла;
	
КонецПроцедуры	
	
 