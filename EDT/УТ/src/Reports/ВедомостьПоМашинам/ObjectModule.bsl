
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка=ЛОжь;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Михушкин - 05.06.2017 - в рамках программы региональной реновации --->> 
	Терминал = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТерминалДоставки"));
	Терминал.Значение = ?(ЗначениеЗаполнено(ПараметрыСеанса.ТерминалДоставки), ПараметрыСеанса.ТерминалДоставки, Справочники.РегиональныеТерминалы.МоскваСтриж);
	Терминал.Использование = Истина;
	// <<--- Михушкин
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	
	Обл = ДокументРезультат.Область("R7:R12");
	ДокументРезультат.ПовторятьПриПечатиСтроки = Обл;
	
	ДокументРезультат.РазборПоКопиям = РазобратьПоКопиям;
	ДокументРезультат.Автомасштаб = истина;
	
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();

	Пока ЭлементРезультата <> Неопределено Цикл
		Если ЭлементРезультата.ЗначенияПараметров.Количество()=1 Тогда
			Если ЭлементРезультата.ЗначенияПараметров[0].Значение = "Разорвать" Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЕсли;
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры



Функция СформироватьИзРМК(Рейс = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных_3");
	//СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных_4");

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек2.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек2.Настройки;
	
	// Михушкин - 05.06.2017 - в рамках программы региональной реновации --->> 
	Терминал = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТерминалДоставки"));
	Терминал.Значение = ?(ЗначениеЗаполнено(ПараметрыСеанса.ТерминалДоставки), ПараметрыСеанса.ТерминалДоставки, Справочники.РегиональныеТерминалы.МоскваСтриж);
	Терминал.Использование = Истина;
	// <<--- Михушкин
	
	//Если Рейс <> Неопределено Тогда
	//	//Терминал = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Рейс"));
	//	//Терминал.Значение = Рейс;
	//	//Терминал.Использование = Истина;
	//	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Рейс", Рейс);
	//КонецЕсли;
    
     //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыбЭтап",         Справочники.новаЭтапыМестнойДоставки.ПланированиеМестнойДоставки);
	Если Рейс <> Неопределено Тогда
    	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачДата",           НачалоДня(Рейс.ДатаНачала));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонДата",           КонецДня(Рейс.ДатаКонца));
	Иначе	
    	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачДата",           НачалоДня(ТекущаяДата()));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонДата",           КонецДня(ТекущаяДата()));		
	КонецЕсли;	
	
	
	Если Рейс <> Неопределено Тогда
	    НовыйЭлементОтбора = Настройки.Отбор.Элементы.
	    Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    
	    ПолеОтбора = Новый ПолеКомпоновкиДанных("Рейс");
	    
	    НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	    НовыйЭлементОтбора.Использование  = Истина;
	    НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	    НовыйЭлементОтбора.ПравоеЗначение = Рейс.Ссылка;
	КонецеСли;
    
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	Если Рейс <> Неопределено Тогда
    	МакетКомпоновки.ЗначенияПараметров.НачДата.Значение = НачалоДня(Рейс.ДатаНачала);
		МакетКомпоновки.ЗначенияПараметров.КонДата.Значение = КонецДня(Рейс.ДатаКонца);
	Иначе
    	МакетКомпоновки.ЗначенияПараметров.НачДата.Значение = НачалоДня(ТекущаяДата());
		МакетКомпоновки.ЗначенияПараметров.КонДата.Значение = КонецДня(ТекущаяДата());
	КонецеСли;	
	
    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки,Истина);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    ////Проверка на пустоту если не указан контрагент
    //Если Контрагент <> Неопределено Тогда 
    //    Возврат Результат;
    //Иначе
		//Если (Результат.ВысотаТаблицы-Результат.ФиксацияСверху)>1 Тогда
            Возврат Результат;
		//Иначе
		//    Возврат Неопределено;
		//КонецЕсли;
    //КонецЕсли;
    
КонецФункции	


РазобратьПоКопиям = Истина;