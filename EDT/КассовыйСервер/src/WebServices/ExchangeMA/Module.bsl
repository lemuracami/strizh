
Функция registerCheck(check, ID)
	// Вставить содержимое обработчика.
	ОтветМетодаТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("registerCheckResponse");
	ОтветМетода = ФабрикаXDTO.Создать(ОтветМетодаТип);
	
	МожноСоздатьЧек = ксРаботаСККМСервер.ВозможноСоздатьЧекВТекущийМоментВремени();
	Если Не МожноСоздатьЧек Тогда
		ОтветМетода.isError = Истина;
		ОтветМетода.error = "В текущее время нельзя создать чек!";
		ОтветМетода.idCheck = "";
		Возврат ОтветМетода;
	КонецЕСли;	
	
	
	
	Узел = ксКассовыйСервер.ПолучитьУзелОбменаСМобильнымПриложением(ID);
	
	Зап = check.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	ЧекТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("checkForOrder");
	check = ФабрикаXDTO.ПрочитатьXML(Чт, ЧекТип);
	
	
	//Если check.orderRows.Количество() = 0 Тогда
	//	ОтветМетода.isError = Истина;
	//	ОтветМетода.error = "Чек пустой! Он пробит не будет!";
	//	ОтветМетода.idCheck = "";
	//	Возврат ОтветМетода;
	//КонецеСли;	
	

	Попытка
		Если check.checkType = 1 Тогда
			ОтветПоДублям = ксКассовыйСервер.ПроверитьВозможностьСозданияЧекаКПечатиПоНомеруЗаказа(check.order);
			Если Не ОтветПоДублям.МожноСоздатьЧек Тогда
				ОтветМетода.isError = Истина;
				ОтветМетода.error = ОтветПоДублям.Сведения;
				ОтветМетода.idCheck = "";
				ЗаписьЖурналаРегистрации("Дубль заказа",,,check.order);
				Возврат ОтветМетода;
			КонецЕСли;	
		КонецеСли;
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка проверки дублей",,,check.order + " (" + ОписаниеОшибки() + ")");
	КонецПопытки;
	
	
	Чек = Документы.ксЧекКПечати.СоздатьДокумент();
	Чек.Заказ = check.order;
	Чек.УзелОбмена = Узел.Ссылка;
	Чек.СтоимостьДоставки = check.deliveryPrice;
	Чек.ТипОплаты = Справочники.ксТипыОплат.НайтиПоКоду(check.payType);
	Чек.Организация = Справочники.ксОрганизации.НайтиПоКоду(check.organizationCode);
	Чек.СтавкаНДСПоДоставке = check.deliveryNDS;
	Чек.АдресИнформирования = check.informAddress;
	Если ЗначениеЗаполнено(check.INNDeliverySeller) Тогда
		Чек.ИННПоставщикаДоставки = check.INNDeliverySeller;
	КонецеСли;	
	Если ЗначениеЗаполнено(check.orderIdImport) Тогда
		Чек.ВнешнийНомерЗаказа = check.orderIdImport;
	КонецеСли;	
	Чек.Дата = ТекущаяДата();
	//убрать после обновления МП
	Попытка
		Чек.ИдентификаторЧекаКВозврату = check.idCheckForReturn;
		Чек.ТипКассовогоЧека = ксРаботаСККМСервер.ПолучитьТипКассовогоЧекаДляККМПоИдентификатору(check.checkType);
	Исключение
		
	КонецПопытки;
	
	Чек.ИдентификаторРейса = check.tripId;

	Попытка
		Чек.СуммаПредоплаты = check.prepaymentAmount;
	Исключение
		
	КонецПопытки;
	
	
	Если Чек.ТипКассовогоЧека.Пустая() Тогда
		Чек.ТипКассовогоЧека = Перечисления.ксТипыКассовыхЧеков.ЧекПрихода;
	КонецеСли;	
	

	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("КодНоменклатуры", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	Таб.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10)));
	Таб.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2)));
	Таб.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3)));
	Таб.Колонки.Добавить("КодМаркировки", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	Таб.Колонки.Добавить("КодПоставщикаТоваров", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	Таб.Колонки.Добавить("ИННПоставщика", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
	Таб.Колонки.Добавить("ПризнакПредметаРасчета", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0)));
	
	Для Каждого Тек Из check.orderRows.orderRow Цикл
		Если Тек.count = 0 Тогда
			продолжить;
		КонецеСли;	
		Нов = Таб.Добавить();
		Нов.КодНоменклатуры = Тек.goodCode;
		Нов.Количество = Тек.count;
		Нов.Цена = Тек.price;
		Нов.СтавкаНДС = Тек.NDS;
		Если ЗначениеЗаполнено(Тек.markingCode) Тогда
			Нов.КодМаркировки = Тек.markingCode;
		Иначе
			Нов.КодМаркировки = "";
		КонецЕсли;	
		Если ЗначениеЗаполнено(Тек.goodsSellerCode) Тогда
			Нов.КодПоставщикаТоваров = Тек.goodsSellerCode;
		Иначе
			Нов.КодПоставщикаТоваров = "";
		КонецЕсли;	
		Если ЗначениеЗаполнено(Тек.goodsSellerINN) Тогда
			Нов.ИННПоставщика = Тек.goodsSellerINN;
		Иначе
			Нов.ИННПоставщика = "";
		КонецЕсли;			
		Если ЗначениеЗаполнено(Тек.signSubjectCalc) Тогда
			Нов.ПризнакПредметаРасчета = Тек.signSubjectCalc;
			Нов.ПризнакПредметаРасчета = 1;// заглушка пока не перерегистрированы ККМ
		Иначе
			Нов.ПризнакПредметаРасчета = 1;
		КонецЕсли;			
		
	КонецЦикла;	
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Таб.КодНоменклатуры КАК КодНоменклатуры,
	            |	Таб.Количество КАК Количество,
	            |	Таб.Цена КАК Цена,
	            |	Таб.СтавкаНДС КАК СтавкаНДС,
	            |	Таб.КодМаркировки КАК КодМаркировки,
	            |	Таб.КодПоставщикаТоваров КАК КодПоставщикаТоваров,
	            |	Таб.ИННПоставщика КАК ИННПоставщика,
	            |	Таб.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
	            |ПОМЕСТИТЬ ВТ_Таб
	            |ИЗ
	            |	&Таб КАК Таб
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТ_Таб.КодНоменклатуры КАК КодНоменклатуры,
	            |	ВТ_Таб.Количество КАК Количество,
	            |	ВТ_Таб.Цена КАК Цена,
	            |	ВТ_Таб.СтавкаНДС КАК СтавкаНДС,
	            |	ВТ_Таб.КодМаркировки КАК КодМаркировки,
	            |	ксНоменклатура.Ссылка КАК Номенклатура,
	            |	ВТ_Таб.КодПоставщикаТоваров КАК КодПоставщикаТоваров,
	            |	ксПоставщикиТоваров.Ссылка КАК Поставщик,
	            |	ВТ_Таб.ИННПоставщика КАК ИННПоставщика,
	            |	ВТ_Таб.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
	            |ИЗ
	            |	ВТ_Таб КАК ВТ_Таб
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ксНоменклатура КАК ксНоменклатура
	            |		ПО ВТ_Таб.КодНоменклатуры = ксНоменклатура.Код
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ксПоставщикиТоваров КАК ксПоставщикиТоваров
	            |		ПО ВТ_Таб.КодПоставщикаТоваров = ксПоставщикиТоваров.Код";
	Зап.УстановитьПараметр("Таб", Таб);
	
	ТабНом = Зап.Выполнить().Выгрузить();
	
	
	Чек.Товары.Загрузить(ТабНом);
	
	ЕстьОшибка = Ложь;
	ТекстОшибки = "";
	
	
	
	Попытка
		Чек.Записать(РежимЗаписиДокумента.Запись);
		//Если Чек.Товары.Количество() > 0 Тогда
			ксРаботаСОчередьюПечатиЧековСервер.ПоставитьЧекВОчередь(Чек);  // добавляем чек в очередь на печать
		//КонецеСли;	
	Исключение
		ЕстьОшибка = Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ЕстьОшибка Тогда
		ОтветМетода.isError = Истина;
		ОтветМетода.error = ТекстОшибки;
		ОтветМетода.idCheck = "";
	Иначе
		ОтветМетода.isError = Ложь;
		ОтветМетода.error = ТекстОшибки;
		ОтветМетода.idCheck = Чек.Номер;
	КонецеСли;	
	
	Возврат ОтветМетода;
	
КонецФункции

Функция getCheckParameters(idCheck)
	// Вставить содержимое обработчика.
	
	ОтветМетодаТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("getCheckParameters");
	ОтветМетода = ФабрикаXDTO.Создать(ОтветМетодаТип);
	
	НалогТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("tax");
	МассивНалоговТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_ma").Получить("arrayOfTaxes");
	МассивНалогов = ФабрикаXDTO.Создать(МассивНалоговТип);		
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксЧекККМ.ТипЧека КАК typeCheck,
	            |	ксЧекККМ.КассаККМ.РегистрационныйНомерККТ КАК rn_kkt,
	            |	ЕСТЬNULL(ксЧекККМ.ФН.КодФН, 0) КАК fn,
	            |	ксЧекККМ.ФПД КАК fpd,
	            |	ксЧекККМ.ФД КАК fd,
	            |	ксЧекККМ.ДатаЧека КАК time,
	            |	ксЧекККМ.КассаККМ.ЗаводскойНомерККТ КАК fn_kkt,
	            |	ксЧекККМ.НомерЧека КАК numberCheck,
	            |	ксЧекККМ.НомерСмены КАК numberOperationShift,
	            |	ксЧекККМ.ЧекНапечатан КАК ЧекНапечатан,
	            |	ксЧекККМ.СуммаЧека КАК sumCheck,
	            |	ксЧекККМ.Организация.Наименование КАК organisation,
	            |	ксЧекККМ.Организация.ИНН КАК innOrganisation,
	            |	ВЫБОР
	            |		КОГДА ксЧекККМ.Кассир = ЗНАЧЕНИЕ(Справочник.ксКассиры.ПустаяСсылка)
	            |			ТОГДА """"
	            |		ИНАЧЕ ксЧекККМ.Кассир.ФИО
	            |	КОНЕЦ КАК kassir,
	            |	ксЧекККМ.Налоги.(
	            |		Ссылка КАК Ссылка,
	            |		КодНалога КАК idTax,
	            |		СуммаНалога КАК sumTax
	            |	) КАК Налоги
	            |ИЗ
	            |	Документ.ксЧекККМ КАК ксЧекККМ
	            |ГДЕ
	            |	ксЧекККМ.ЧекКПечати.Номер = &НомерЧека";
	
	Зап.УстановитьПараметр("НомерЧека", idCheck);
	
	Рез = Зап.Выполнить();
	
	Если Рез.Пустой() Тогда
		ОтветМетода.isDone = Ложь;
		ОтветМетода.status = "Чек готовится к печати...";
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветМетода);
		Результат = ЗаписьXML.Закрыть();	
		
		
		Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		
		Возврат Хр;
	Иначе
		Выб = Рез.Выбрать();
		
		Если Выб.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ОтветМетода, Выб);
			
			СтрокиНалогов = Выб.Налоги.Выбрать();
			
			
			Пока СтрокиНалогов.Следующий() Цикл
				tax = ФабрикаXDTO.Создать(НалогТип);	
				ЗаполнитьЗначенияСвойств(tax, СтрокиНалогов);
				МассивНалогов.tax.Добавить(tax);
			КонецЦикла;	
			ОтветМетода.taxes = МассивНалогов;
			
			Если Выб.ЧекНапечатан Тогда
				ОтветМетода.isDone = Истина;
				ОтветМетода.barcode = "-";
				ОтветМетода.status = "Чек напечатан...";
			Иначе
				ОтветМетода.isDone = Ложь;
				ОтветМетода.status = "Чек еще не напечатан...";
			КонецеСли;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветМетода);
			Результат = ЗаписьXML.Закрыть();	
			
			
			Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
			
			Возврат Хр;
		КонецЕсли;	
	КонецеСли;	
КонецФункции

