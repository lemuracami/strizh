
Функция loadGoods(goods)
	Зап = goods.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивТоваровТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfGood");
	goods = ФабрикаXDTO.ПрочитатьXML(Чт, МассивТоваровТип);
	
	
    МассивГУИДТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfUUID");
	МассивГУИД = ФабрикаXDTO.Создать(МассивГУИДТип);
	
	Для Сч = 0 По goods.good.Количество() - 1 Цикл
		Товар = goods.good[Сч];
		//UIDD = Новый УникальныйИдентификатор(Товар.id);
		//Ссылка = Справочники.ксНоменклатура.ПолучитьСсылку(UIDD);
		//
		//Если Не ЗначениеЗаполнено(Ссылка.Код) Тогда
		//	Если Товар.isCatalog Тогда
		//		НовыйОбъект = Справочники.ксНоменклатура.СоздатьГруппу();
		//	Иначе	
		//		НовыйОбъект = Справочники.ксНоменклатура.СоздатьЭлемент();
		//	КонецеСли;	
		//	НовыйОбъект.УстановитьСсылкуНового(Ссылка);
		//Иначе
		//	НовыйОбъект = ссылка.ПолучитьОбъект();
		//КонецеСли;
		
		/////////////////уходим от UUID
		НайденныйТовар = Справочники.ксНоменклатура.НайтиПоКоду(Товар.Code);
		
		Если НайденныйТовар.Пустая() Тогда
			Если Товар.isCatalog Тогда
				НовыйОбъект = Справочники.ксНоменклатура.СоздатьГруппу();
			Иначе	
				НовыйОбъект = Справочники.ксНоменклатура.СоздатьЭлемент();
			КонецеСли;	
		Иначе
			НовыйОбъект = НайденныйТовар.ПолучитьОбъект();
		КонецеСли;	
		/////////////////уходим от UUID

		
		
		Если Не Товар.isCatalog Тогда
			НовыйОбъект.НаименованиеПолное = Товар.fullName;
		КонецеСли;	
			

		//НовыйОбъект.УстановитьНовыйКод("T0"); 
		// из за перекидки товаров код дублируется Товар.code;
		НовыйОбъект.Код = Товар.Code;
		
		НовыйОбъект.Наименование = Товар.name;
		
		
		Если ЗначениеЗаполнено(Товар.parentId) тогда
			UIDD = Новый УникальныйИдентификатор(Товар.parentId);
			НовыйОбъект.Родитель = Справочники.ксНоменклатура.ПолучитьСсылку(UIDD);
		КонецеСли;	
		НовыйОбъект.ПометкаУдаления = Товар.isDeleting;
		НовыйОбъект.Записать();
			
		МассивГУИД.data.Добавить(Товар.id);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивГУИД);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
    Возврат Хр;
КонецФункции

Функция loadOrganizations(organizations)
	Зап = organizations.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивОрганизацийТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfOrganization");
	organizations = ФабрикаXDTO.ПрочитатьXML(Чт, МассивОрганизацийТип);
	
	
    МассивГУИДТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfUUID");
	МассивГУИД = ФабрикаXDTO.Создать(МассивГУИДТип);
	
	Для Сч = 0 По organizations.organization.Количество() - 1 Цикл
		Организация = organizations.organization[Сч];
		UIDD = Новый УникальныйИдентификатор(Организация.id);
		Ссылка = Справочники.ксОрганизации.ПолучитьСсылку(UIDD);
		
		Если Не ЗначениеЗаполнено(Ссылка.Код) Тогда
			НовыйОбъект = Справочники.ксОрганизации.СоздатьЭлемент();
			НовыйОбъект.УстановитьСсылкуНового(Ссылка);
		Иначе
			НовыйОбъект = ссылка.ПолучитьОбъект();
		КонецеСли;
		

		НовыйОбъект.Код = Организация.code;
		НовыйОбъект.Наименование = Организация.name;
		НовыйОбъект.НаименованиеПолное = Организация.fullName;
		НовыйОбъект.КодПоОКПО = Организация.codeOKPO;
		НовыйОбъект.ИНН = Организация.codeINN;
		НовыйОбъект.КодИМНС = Организация.codeIMNS;
		НовыйОбъект.КодПоОКАТО = Организация.codeOKATO;
		НовыйОбъект.КПП = Организация.codeKPP;
		НовыйОбъект.ОГРН = Организация.codeOGRN;
		//НовыйОбъект.АдресИнформированияДляПечатиЧеков = Организация.informationAddressForChecks;
		
		НовыйОбъект.ПометкаУдаления = Организация.isDeleting;
		НовыйОбъект.Записать();
			
		МассивГУИД.data.Добавить(Организация.id);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивГУИД);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
    Возврат Хр;
КонецФункции


Функция loadCashboxes(cashboxes)
	Зап = cashboxes.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивКассТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfCashbox");
	cashboxes = ФабрикаXDTO.ПрочитатьXML(Чт, МассивКассТип);
	
	
    МассивГУИДТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfUUID");
	МассивГУИД = ФабрикаXDTO.Создать(МассивГУИДТип);
	
	Для Сч = 0 По cashboxes.cashbox.Количество() - 1 Цикл
		Касса = cashboxes.cashbox[Сч];
		UIDD = Новый УникальныйИдентификатор(Касса.id);
		Ссылка = Справочники.ксКассыККМ.ПолучитьСсылку(UIDD);
		
		Если Не ЗначениеЗаполнено(Ссылка.Код) Тогда
			НовыйОбъект = Справочники.ксКассыККМ.СоздатьЭлемент();
			НовыйОбъект.УстановитьСсылкуНового(Ссылка);
		Иначе
			НовыйОбъект = ссылка.ПолучитьОбъект();
		КонецеСли;
		
			

		НовыйОбъект.Код = Касса.code;
		НовыйОбъект.Наименование = Касса.name;
		НовыйОбъект.ФормироватьНефискальныеЧеки = Касса.formNonFiscalChecks;
		НовыйОбъект.ШиринаЛенты = Касса.rollWidth;
		НовыйОбъект.РучнойРежимФормирования = Касса.manualFormationMode;
		НовыйОбъект.Модель = Касса.model;
		НовыйОбъект.ПрикладнаяПрограмма = Касса.applicationProgram;
		НовыйОбъект.НомерПроизводителя = Касса.manufacturerNumber;
		НовыйОбъект.НаименованиеОрганизации = Касса.nameOfCompany;
		НовыйОбъект.АдресОрганизации = Касса.addressOrganizations;
		НовыйОбъект.ИННОрганизации = Касса.INNOrganization;
		НовыйОбъект.ОнлайнКасса = Касса.onlineCashbox;
		НовыйОбъект.АдресККМ = Касса.addressCashbox;
		НовыйОбъект.ЗаводскойНомерККТ = Касса.kktFactoryNumber;
		НовыйОбъект.РегистрационныйНомерККТ = Касса.kktRegNumber;
		НовыйОбъект.НеВыводитьДанныеНаПечать = Касса.notPrintCheckOnKKT;
		НовыйОбъект.ВерсияФФД = Перечисления.ВерсииФФД[Касса.versionFFD];
		
		Если ЗначениеЗаполнено(Касса.ownerId) тогда
			UIDD = Новый УникальныйИдентификатор(Касса.ownerId);
			НовыйОбъект.Владелец = Справочники.ксОрганизации.ПолучитьСсылку(UIDD);
		КонецеСли;			
		
		НовыйОбъект.ПометкаУдаления = Касса.isDeleting;
		НовыйОбъект.Записать();
			
		МассивГУИД.data.Добавить(Касса.id);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивГУИД);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
    Возврат Хр;
КонецФункции


Функция getChecks()
	// Вставить содержимое обработчика.
	
	МассивЧековТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfChecks");
	МассивЧеков = ФабрикаXDTO.Создать(МассивЧековТип);

	ЧекТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "check");
	

	СтрокаЧекаТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "checkRow");
	
	
	МассивСтрокЧекаТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "checkRows");
		
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксЧекККМИзменения.Ссылка.Ссылка КАК idDocument,
	            |	ксЧекККМИзменения.Ссылка.ЧекКПечати.Номер КАК numberCheckForPrint,
	            |	ксЧекККМИзменения.Ссылка.Дата КАК dateDocument,
	            |	ксЧекККМИзменения.Ссылка.Номер КАК numberDocument,
	            |	ксЧекККМИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
	            |	ксЧекККМИзменения.Ссылка.Проведен КАК isCarriedOut,
	            |	ксЧекККМИзменения.Ссылка.ЧекНапечатан КАК isPrinting,
	            |	ксЧекККМИзменения.Ссылка.ЧекКПечати.УзелОбмена.Код КАК MA,
	            |	ксЧекККМИзменения.Ссылка.ЧекКПечати.Заказ КАК orderId,
	            |	ксЧекККМИзменения.Ссылка.КассаККМ.Ссылка КАК cashboxId,
	            |	ксЧекККМИзменения.Ссылка.ТипОплаты.Код КАК payType,
	            |	ксЧекККМИзменения.Ссылка.СтоимостьДоставки КАК deliveryPrice,
	            |	ксЧекККМИзменения.Ссылка.СтавкаНДСПоДоставке КАК deliveryNDS,
	            |	ксЧекККМИзменения.Ссылка.ЧекКПечати.АдресИнформирования КАК informAddress,
				|	ксЧекККМИзменения.Ссылка.ЧекКПечати.ИдентификаторРейса КАК tripId,
	            |	ксЧекККМИзменения.Ссылка.ТипЧека КАК typeCheck,
	            |	ксЧекККМИзменения.Ссылка.СуммаЧека КАК sumCheck,
	            |	ксЧекККМИзменения.Ссылка.НомерСмены КАК numberOperationShift,
	            |	ксЧекККМИзменения.Ссылка.НомерЧека КАК numberCheck,
	            |	ксЧекККМИзменения.Ссылка.ДатаЧека КАК time,
	            |	ксЧекККМИзменения.Ссылка.ФПД КАК fpd,
	            |	ксЧекККМИзменения.Ссылка.НомерДокумента КАК checkNumberDocument,
	            |	ксЧекККМИзменения.Ссылка.ФД КАК fd,
				 |	ксЧекККМИзменения.Ссылка.СуммаПредоплаты КАК prepaymentAmount,
	            |	ксЧекККМИзменения.Ссылка.Товары.(
	            |		Ссылка КАК Поле1,
	            |		Номенклатура.Ссылка КАК goodId,
				|		Номенклатура.Код КАК goodCode,				
	            |		Количество КАК count,
	            |		Цена КАК price,
				|		КодМаркировки КАК markingCode,
	            |		СтавкаНДС КАК NDS,
				|		ПризнакПредметаРасчета КАК signSubjectCalc
	            |	) КАК Товары,
	            |	ЕСТЬNULL(ксЧекККМИзменения.Ссылка.ФН.КодФН, """") КАК fn,
	            |	ксЧекККМИзменения.Ссылка.ЧекКПечати.ИдентификаторЧекаКВозврату КАК idCheckForReturn,
	            |	ВЫБОР
	            |		КОГДА ксЧекККМИзменения.Ссылка.ЧекКПечати.ТипКассовогоЧека = ЗНАЧЕНИЕ(Перечисление.ксТипыКассовыхЧеков.ЧекПрихода)
	            |				ИЛИ ксЧекККМИзменения.Ссылка.ЧекКПечати.ТипКассовогоЧека = ЗНАЧЕНИЕ(Перечисление.ксТипыКассовыхЧеков.Пустаяссылка)
	            |			ТОГДА 1
	            |		КОГДА ксЧекККМИзменения.Ссылка.ЧекКПечати.ТипКассовогоЧека = ЗНАЧЕНИЕ(Перечисление.ксТипыКассовыхЧеков.ЧекВозвратаПрихода)
	            |			ТОГДА 2
	            |		ИНАЧЕ 3
	            |	КОНЕЦ КАК checkType
	            |ИЗ
	            |	Документ.ксЧекККМ.Изменения КАК ксЧекККМИзменения
	            |ГДЕ
	            |	ксЧекККМИзменения.Узел.Ссылка = &ПланОбмена
	            |	И ксЧекККМИзменения.Ссылка.ЧекНапечатан = ИСТИНА";
	Зап.УстановитьПараметр("ПланОбмена", ксКассовыйСервер.ПолучитьУзелОбменаСУТЛ());
	
	Рез = Зап.Выполнить();
	
	Если Не Рез.Пустой() Тогда
		ВыбЧеки = Рез.Выбрать();
		Пока ВыбЧеки.Следующий() Цикл
			Чек = ФабрикаXDTO.Создать(ЧекТип);
			ЗаполнитьЗначенияСвойств(Чек, ВыбЧеки,,"idDocument, cashboxId");
			
			Чек.cashboxId = ВыбЧеки.cashboxId.УникальныйИдентификатор();
			Чек.idDocument = ВыбЧеки.idDocument.УникальныйИдентификатор();
			
			МассивСтрокЧека = ФабрикаXDTO.Создать(МассивСтрокЧекаТип);
			Товар = ВыбЧеки.Товары.Выбрать();
			Пока Товар.Следующий() Цикл
				СтрокаЧека = ФабрикаXDTO.Создать(СтрокаЧекаТип);
				
				ЗаполнитьЗначенияСвойств(СтрокаЧека, Товар,,"goodId");
				Попытка
					СтрокаЧека.goodId = Товар.goodId.УникальныйИдентификатор();	
				Исключение
					СтрокаЧека.goodId = Справочники.ксНоменклатура.ПустаяСсылка().УникальныйИдентификатор();
				КонецПопытки;	
				МассивСтрокЧека.checkRow.Добавить(СтрокаЧека);
			КонецЦикла;	
			Чек.goodsRows = МассивСтрокЧека;
			МассивЧеков.check.Добавить(Чек);
		КонецЦикла;	
	КонецеСли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивЧеков);
	Результат = ЗаписьXML.Закрыть();	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	Возврат Хр;
КонецФункции


Функция delRegistrationChecks(checks)
	Зап = checks.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивКассТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
	ИдЧеков = ФабрикаXDTO.ПрочитатьXML(Чт, МассивКассТип);
	ПлОбмена = ксКассовыйСервер.ПолучитьУзелОбменаСУТЛ();
	
	УдалитьРегистрациюИзменений(ПлОбмена, ИдЧеков, Документы.ксЧекККМ);
	Возврат Истина;
КонецФункции

Процедура УдалитьРегистрациюИзменений(УзелПланаОбмена, СписокСсылокXDTO, МенеджерДанных)
	Для Сч = 0 По СписокСсылокXDTO.data.Количество() - 1 Цикл
		UIDD = Новый УникальныйИдентификатор(СписокСсылокXDTO.data[Сч]);
		Ссылка = МенеджерДанных.ПолучитьСсылку(UIDD);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена, Ссылка);
	КонецЦикла;
КонецПроцедуры	

Функция setStatusCashbox(cashbox, status)
	ОтветТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "responseSetStatusCashbox");
	Ответ = ФабрикаXDTO.Создать(ОтветТип);
	
	UIDD = Новый УникальныйИдентификатор(cashbox);
	ККМ = Справочники.ксКассыККМ.ПолучитьСсылку(UIDD);
	
	Если Не ЗначениеЗаполнено(ККМ.Код) Тогда
		Ответ.result = Ложь;
		Ответ.status = "Не обнаружена ККМ!";
		Возврат Ответ;
	КонецеСли;
	
	Если status = 1 Тогда
		СтатусКПередаче = Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМЗахваченаКассиром;
	ИначеЕсли status = 2 Тогда	
		СтатусКПередаче = Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна;
	КонецеСли;	
	
	ОтветОВозможностиЗахвата = ксРаботаСОчередьюПечатиЧековСервер.МожноСменитьСтатусККМЧерезWEBСервис(ККМ, СтатусКПередаче);
	Если Не ОтветОВозможностиЗахвата.МожноСменитьСтатус Тогда
		Ответ.result = Ложь;
		Ответ.status = ОтветОВозможностиЗахвата.ПричинаНевозможностиСменыСтатуса;
		Возврат Ответ;		
	КонецеСли;	
	
	
	Попытка
		ксРаботаСОчередьюПечатиЧековСервер.ДобавитьЗаписьВРСксСтатусыСостоянияККМ(ККМ, СтатусКПередаче, Истина);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Ответ.result = Ложь;
		Ответ.status = ТекстОшибки;
		Возврат Ответ;		
	КонецПопытки;	
	
	//всё хорошо
	Ответ.result = Истина;
	Ответ.status = "Статус установлен: " + Строка(СтатусКПередаче);
	Возврат Ответ;		
КонецФункции

Функция loadCashiers(cashiers)
	Зап = cashiers.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивКассировТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfCashier");
	cashiers = ФабрикаXDTO.ПрочитатьXML(Чт, МассивКассировТип);
	
	
    МассивГУИДТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfUUID");
	МассивГУИД = ФабрикаXDTO.Создать(МассивГУИДТип);
	
	Для Сч = 0 По cashiers.cashier.Количество() - 1 Цикл
		Кассир = cashiers.cashier[Сч];
		UIDD = Новый УникальныйИдентификатор(Кассир.id);
		Ссылка = Справочники.ксКассиры.ПолучитьСсылку(UIDD);
		
		Если Не ЗначениеЗаполнено(Ссылка.Код) Тогда
			НовыйОбъект = Справочники.ксКассиры.СоздатьЭлемент();
			НовыйОбъект.УстановитьСсылкуНового(Ссылка);
		Иначе
			НовыйОбъект = ссылка.ПолучитьОбъект();
		КонецеСли;

		НовыйОбъект.Код = Кассир.code;
		НовыйОбъект.Наименование = Кассир.name;
		НовыйОбъект.ФИО = Кассир.name;
		НовыйОбъект.ПометкаУдаления = Кассир.isDeleting;
		НовыйОбъект.Записать();
			
		МассивГУИД.data.Добавить(Кассир.id);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивГУИД);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
    Возврат Хр;
КонецФункции

Функция openShift(cashbox, cashier)
	ОтветТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "responseOpenShift");
	Ответ = ФабрикаXDTO.Создать(ОтветТип);
	
	UIDD = Новый УникальныйИдентификатор(cashbox);
	Касса = Справочники.ксКассыККМ.ПолучитьСсылку(UIDD);
	
	Если Не ЗначениеЗаполнено(Касса.Код) Тогда
		Ответ.result = Ложь;
		Ответ.status = "Не обнаружена ККМ!";
		Возврат Ответ;
	КонецеСли;
	
	
	UIDD = Новый УникальныйИдентификатор(cashier);
	Кассир = Справочники.ксКассиры.ПолучитьСсылку(UIDD);
	
	Мас = Новый Массив;
	Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
	Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");			
	
	
	Если Не ЗначениеЗаполнено(Кассир.Код) Тогда
		Ответ.result = Ложь;
		Ответ.status = "Не обнаружен кассир!";
		// МАС - 21.08.2017 - №1718 --->> 
		Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.НеУказанКассир);
		// <<--- МАС 	
		ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Не обнаружен кассир!: " + Касса.Наименование, "Не обнаружен кассир!");					
		Возврат Ответ;
	КонецеСли;
				
	СерверККТ = ККМ_ФЗ_54.ПодключитьсяКККМБезПроверкиСтатуса(Касса);
	Если СерверККТ = Ложь Тогда
		Ответ.result = Ложь;
		Ответ.status = "Ошибка подключения к ККМ!";
		// МАС - 21.08.2017 - №1718 --->> 
		Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.ОшибкаПодключенияКККМ);
		// <<--- МАС
		ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Ошибка подключения к ККМ!: " + Касса.Наименование, "Ошибка подключения к ККМ!");					
		
		Возврат Ответ;		
	КонецеСли;
				
				
	Рез = ККМ_ФЗ_54.ОткрытьСменуНаККМ(СерверККТ, Касса, Кассир);
	
	Если Рез = "СменаУжеОткрыта" Тогда
		Ответ.result = Ложь;
		Ответ.status = "Смена на ККМ уже открыта!";
		// МАС - 21.08.2017 - №1718 --->> 
		Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.ОшибкаОткрытияСмены);
		// <<--- МАС 	
		ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Смена на ККМ уже открыта!: " + Касса.Наименование, "Смена на ККМ уже открыта!");					
		Возврат Ответ;	
	ИначеЕсли Рез = "СменаНеОткрыта" Тогда
		Ответ.result = Ложь;
		Ответ.status = "Ошибка открытия смены на ККМ!";
		// МАС - 21.08.2017 - №1718 --->> 
		Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.ОшибкаОткрытияСмены);
		// <<--- МАС
		ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Ошибка открытия смены на ККМ!: " + Касса.Наименование, "Ошибка открытия смены на ККМ!");					
		Возврат Ответ;	
	КонецеСли;	
	
	СсылкаДока = ксРаботаСККМСервер.ЗарегистрироватьОткрытиеСменыККМ(Касса, Кассир, Истина);
	
	Ответ.result = Истина;
	Ответ.status = "Смена успешно открыта!";
	Ответ.UUIDdoc = СсылкаДока.УникальныйИдентификатор();
	Возврат Ответ;	
	
КонецФункции

Функция closeShift(cashbox)
	ОтветТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "responseCloseShift");
	Ответ = ФабрикаXDTO.Создать(ОтветТип);
	
	UIDD = Новый УникальныйИдентификатор(cashbox);
	Касса = Справочники.ксКассыККМ.ПолучитьСсылку(UIDD);
	
	Если Не ЗначениеЗаполнено(Касса.Код) Тогда
		Ответ.result = Ложь;
		Ответ.status = "Не обнаружена ККМ!";
		Возврат Ответ;
	КонецеСли;
	
	СерверККТ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(Касса);
	Если СерверККТ = Ложь Тогда
		Ответ.result = Ложь;
		Ответ.status = "Ошибка подключения к ККМ!";
		Возврат Ответ;		
	КонецеСли;
	
	Кассир = ксРаботаСККМСервер.ПолучитьТекущегоКассира(Касса);
	
	
	//Рез = ККМ_ФЗ_54.СнятьZОтчет(СерверККТ, Кассир.Наименование);
	
	Рез = ККМ_ФЗ_54СерверПереопределяемый.СнятьZОтчет(СерверККТ, Кассир.Наименование);
	
	Если Рез = Ложь Тогда
		Ответ.result = Ложь;
		Ответ.status = "Ошибка при закрытии смены на ККМ!";
		Возврат Ответ;	
	КонецеСли;	
	
	СсылкаДока = ксРаботаСККМСервер.ЗарегистрироватьЗакрытиеСменыККМ(Касса, Истина);	
	Ответ.result = Истина;
	Ответ.status = "Смена успешно закрыта!";
	Ответ.UUIDdoc = СсылкаДока.УникальныйИдентификатор();
	Возврат Ответ;	
КонецФункции

Функция getShiftDocs()
	МассивДокументовТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfShiftDoc");
	МассивДокументов = ФабрикаXDTO.Создать(МассивДокументовТип);

	ДокументТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "shiftDoc");
	

		
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксОткрытиеСменыККМИзменения.Ссылка.Ссылка КАК idDocument,
	            |	ксОткрытиеСменыККМИзменения.Ссылка.Дата КАК dateDocument,
	            |	ксОткрытиеСменыККМИзменения.Ссылка.Номер КАК numberDocument,
	            |	ксОткрытиеСменыККМИзменения.Ссылка.ПометкаУдаления КАК isDeleting,
	            |	ксОткрытиеСменыККМИзменения.Ссылка.Проведен КАК isCarriedOut,
	            |	1 КАК typeDoc,
	            |	ксОткрытиеСменыККМИзменения.Ссылка.ККМ КАК ККМ,
	            |	ксОткрытиеСменыККМИзменения.Ссылка.СменаОткрытаЧерезWEBСервис КАК fromWeb,
	            |	ксОткрытиеСменыККМИзменения.Ссылка.Кассир КАК Кассир
	            |ИЗ
	            |	Документ.ксОткрытиеСменыККМ.Изменения КАК ксОткрытиеСменыККМИзменения
	            |ГДЕ
	            |	ксОткрытиеСменыККМИзменения.Узел.Ссылка = &ПланОбмена
	            |
	            |ОБЪЕДИНИТЬ ВСЕ
	            |
	            |ВЫБРАТЬ
	            |	ксЗакрытиеСменыККМИзменения.Ссылка.Ссылка,
	            |	ксЗакрытиеСменыККМИзменения.Ссылка.Дата,
	            |	ксЗакрытиеСменыККМИзменения.Ссылка.Номер,
	            |	ксЗакрытиеСменыККМИзменения.Ссылка.ПометкаУдаления,
	            |	ксЗакрытиеСменыККМИзменения.Ссылка.Проведен,
	            |	2,
	            |	ксЗакрытиеСменыККМИзменения.Ссылка.ККМ,
	            |	ксЗакрытиеСменыККМИзменения.Ссылка.СменаЗакрытаЧерезWEBСервис,
	            |	NULL
	            |ИЗ
	            |	Документ.ксЗакрытиеСменыККМ.Изменения КАК ксЗакрытиеСменыККМИзменения
	            |ГДЕ
	            |	ксЗакрытиеСменыККМИзменения.Узел.Ссылка = &ПланОбмена";
	Зап.УстановитьПараметр("ПланОбмена", ксКассовыйСервер.ПолучитьУзелОбменаСУТЛ());
	
	Рез = Зап.Выполнить();
	
	Если Не Рез.Пустой() Тогда
		ВыбДоки = Рез.Выбрать();
		Пока ВыбДоки.Следующий() Цикл
			Док = ФабрикаXDTO.Создать(ДокументТип);
			ЗаполнитьЗначенияСвойств(Док, ВыбДоки,,"idDocument");
			
			Док.cashboxId = ВыбДоки.ККМ.УникальныйИдентификатор();
			Док.idDocument = ВыбДоки.idDocument.УникальныйИдентификатор();
			Если ЗначениеЗаполнено(ВыбДоки.Кассир) Тогда
				Док.cashierId = ВыбДоки.Кассир.УникальныйИдентификатор();
			Иначе	
				Док.cashierId = Новый УникальныйИдентификатор;
			КонецеСли;	
			МассивДокументов.shiftDoc.Добавить(Док);
		КонецЦикла;	
	КонецеСли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивДокументов);
	Результат = ЗаписьXML.Закрыть();	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	Возврат Хр;
	
КонецФункции

Функция delRegistrationShiftDocs(shiftDocs, typeDoc)
	Зап = shiftDocs.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивДоковТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfUUID");
	ИдДоков = ФабрикаXDTO.ПрочитатьXML(Чт, МассивДоковТип);
	ПлОбмена = ксКассовыйСервер.ПолучитьУзелОбменаСУТЛ();
	
	Если typeDoc = 1 Тогда
		УдалитьРегистрациюИзменений(ПлОбмена, ИдДоков, Документы.ксОткрытиеСменыККМ);
	Иначе
		УдалитьРегистрациюИзменений(ПлОбмена, ИдДоков, Документы.ксЗакрытиеСменыККМ);
	КонецеСли;	
	Возврат Истина;
КонецФункции

Функция loadGoodsSellers(goodsSellers)
	Зап = goodsSellers.Получить();
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(Зап);
	МассивПоставщиковТип = ФабрикаXDTO.Пакеты.Получить("http://www.strizh.org/exchange_utl").Получить("arrayOfGoodsSellers");
	goodsSellers = ФабрикаXDTO.ПрочитатьXML(Чт, МассивПоставщиковТип);
	
	
    МассивГУИДТип = ФабрикаXDTO.Тип("http://www.strizh.org/exchange_utl", "arrayOfUUID");
	МассивГУИД = ФабрикаXDTO.Создать(МассивГУИДТип);
	
	Для Сч = 0 По goodsSellers.goodsSeller.Количество() - 1 Цикл
		Поставщик = goodsSellers.goodsSeller[Сч];
		UIDD = Новый УникальныйИдентификатор(Поставщик.id);
		Ссылка = Справочники.ксПоставщикиТоваров.ПолучитьСсылку(UIDD);
		
		Если Не ЗначениеЗаполнено(Ссылка.Код) Тогда
			НовыйОбъект = Справочники.ксПоставщикиТоваров.СоздатьЭлемент();
			НовыйОбъект.УстановитьСсылкуНового(Ссылка);
		Иначе
			НовыйОбъект = ссылка.ПолучитьОбъект();
		КонецеСли;

		НовыйОбъект.Код = Поставщик.code;
		НовыйОбъект.Наименование = Поставщик.name;
		НовыйОбъект.ИНН = Поставщик.inn;
		НовыйОбъект.Телефон = Поставщик.phoneNumber;
		НовыйОбъект.ПометкаУдаления = Поставщик.isDeleting;
		НовыйОбъект.Записать();
			
		МассивГУИД.data.Добавить(Поставщик.id);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МассивГУИД);
	Результат = ЗаписьXML.Закрыть();	
	
	Хр = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
    Возврат Хр;
КонецФункции


