Процедура РегламентЗакрытиеКассовыхСмен() Экспорт
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ксСтатусыСостоянияККМСрезПоследних.ККМ КАК ККМ
	            |ПОМЕСТИТЬ ВТ_РаботающиеККМ
	            |ИЗ
	            |	РегистрСведений.ксСтатусыСостоянияККМ.СрезПоследних(&ТекДата, ) КАК ксСтатусыСостоянияККМСрезПоследних
	            |ГДЕ
	            |	ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков = ЗНАЧЕНИЕ(Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна)
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТ_РаботающиеККМ.ККМ КАК ККМ,
	            |	ксСостояниеСменККМСрезПоследних.Кассир.Наименование КАК Кассир
	            |ИЗ
	            |	ВТ_РаботающиеККМ КАК ВТ_РаботающиеККМ
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ксСостояниеСменККМ.СрезПоследних(&ТекДата, ) КАК ксСостояниеСменККМСрезПоследних
	            |		ПО ВТ_РаботающиеККМ.ККМ.Ссылка = ксСостояниеСменККМСрезПоследних.ККМ.Ссылка
	            |ГДЕ
	            |	ксСостояниеСменККМСрезПоследних.СостояниеСмены = ЗНАЧЕНИЕ(Перечисление.ксСостояниеСменККМ.СменаОткрыта)";
	Зап.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	Рез = Зап.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат;
	КонецеСли;
	
	Выб = Рез.Выбрать();
	
	Пока Выб.Следующий() Цикл
		Попытка
			Кассир = "Кассир 1";
			Если ЗначениеЗаполнено(Выб.Кассир) Тогда
				Кассир = Выб.Кассир;
			КонецЕсли;	
			Ответ = СнятьZОтчетККМ(Выб.ККМ, Кассир);
			Если Ответ.Успешно Тогда
				ЗарегистрироватьЗакрытиеСменыККМ(Выб.ККМ);
				ДобавитьЗаписьВЛогАвтоматическогоЗакрытияСмен(Выб.ККМ, Истина, "");
			Иначе
				ДобавитьЗаписьВЛогАвтоматическогоЗакрытияСмен(Выб.ККМ, Ложь, Ответ.ОписаниеОшибки);
			КонецеСли;	
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ДобавитьЗаписьВЛогАвтоматическогоЗакрытияСмен(Выб.ККМ, Ложь, ТекстОшибки);
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

Функция ЗарегистрироватьОткрытиеСменыККМ(ККМ, Кассир = "", СменаОткрытаЧерезWEBСервис = Ложь) Экспорт
	Док = Документы.ксОткрытиеСменыККМ.СоздатьДокумент();
	Док.ККМ = ККМ;
	Док.Дата = ТекущаяДата();
	Док.Кассир = Кассир;
	Док.СменаОткрытаЧерезWEBСервис = СменаОткрытаЧерезWEBСервис;
	
	Док.Записать(РежимЗаписиДокумента.Запись);
	Док.Записать(РежимЗаписиДокумента.Проведение);
	Возврат Док.Ссылка;
КонецФункции

Функция СнятьZОтчетККМ(ККМ, Кассир) Экспорт
	Струк = Новый Структура;
	
	СерверККТ = ККМ_ФЗ_54.ПодключитьсяКККМ(ККМ);
	Если СерверККТ = Ложь Тогда
		Струк.Вставить("Успешно", Ложь);
		Струк.Вставить("ОписаниеОшибки", "Не могу подключиться к ККМ");
		Возврат Струк;
	КонецеСли;
	
	Рез = ККМ_ФЗ_54.СнятьZОтчет(СерверККТ, Кассир);
	Если Рез = Ложь Тогда
		Струк.Вставить("Успешно", Ложь);
		Струк.Вставить("ОписаниеОшибки", "Не могу снять Z отчет ККМ");
		Возврат Струк;
	КонецеСли;
	
	
	
	Струк.Вставить("Успешно", Истина);
	Струк.Вставить("ОписаниеОшибки", "");
	Возврат Струк;
КонецФункции

Функция ЗарегистрироватьЗакрытиеСменыККМ(ККМ, СменаЗакрытаЧерезWEBСервис = Ложь) Экспорт
	Док = Документы.ксЗакрытиеСменыККМ.СоздатьДокумент();
	Док.ККМ = ККМ;
	Док.Дата = ТекущаяДата();
	Док.СменаЗакрытаЧерезWEBСервис = СменаЗакрытаЧерезWEBСервис;
	
	Док.Записать(РежимЗаписиДокумента.Запись);
	Док.Записать(РежимЗаписиДокумента.Проведение);
	Возврат Док.Ссылка;
	
КонецФункции	

Процедура ДобавитьЗаписьВЛогАвтоматическогоЗакрытияСмен(ККМ, Успешно, ТекстОшибки) 
	ТД = ТекущаяДата();
	Наб = РегистрыСведений.ксЛогАвтоматическогоЗакрытияСменыНаККМ.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТД);
	
	Нов = Наб.Добавить();
	Нов.Период = ТД;
	Нов.ККМ = ККМ;
	Нов.Успешно = Успешно;
	Нов.ОписаниеОшибки = ТекстОшибки;
	
	Наб.Записать();
КонецПроцедуры	

Функция ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипЧека) Экспорт
	Если (ТипЧека = Перечисления.ксТипыКассовыхЧеков.ЧекПрихода) Или Не ЗначениеЗаполнено(ТипЧека) Тогда
		Возврат 1;
	ИначеЕсли ТипЧека = Перечисления.ксТипыКассовыхЧеков.ЧекВозвратаПрихода Тогда	
		Возврат 2;
	ИначеЕсли ТипЧека = Перечисления.ксТипыКассовыхЧеков.ЧекРасхода Тогда	
		Возврат 4;
	ИначеЕсли ТипЧека = Перечисления.ксТипыКассовыхЧеков.ЧекВозвратаРасхода Тогда	
		Возврат 5;
	ИначеЕсли ТипЧека = Перечисления.ксТипыКассовыхЧеков.ЧекКоррекцииПрихода Тогда	
		Возврат 7;
	ИначеЕсли ТипЧека = Перечисления.ксТипыКассовыхЧеков.ЧекКоррекцииВозвратаПрихода Тогда	
		Возврат 8;
	ИначеЕсли ТипЧека = Перечисления.ксТипыКассовыхЧеков.ЧекКоррецииРасхода Тогда	
		Возврат 9;
	ИначеЕсли ТипЧека = Перечисления.ксТипыКассовыхЧеков.ЧекКоррекцииВозвратаРасхода Тогда	
		Возврат 10;
	КонецеСли;	
КонецФункции	

Функция ПолучитьТипКассовогоЧекаДляККМПоИдентификатору(ИдентификаторТипаЧека) Экспорт
	Если ИдентификаторТипаЧека = 1 Тогда
		Возврат Перечисления.ксТипыКассовыхЧеков.ЧекПрихода;
	ИначеЕсли ИдентификаторТипаЧека = 2 Тогда	
		Возврат Перечисления.ксТипыКассовыхЧеков.ЧекВозвратаПрихода;
	ИначеЕсли ИдентификаторТипаЧека = 4 Тогда	
		Возврат Перечисления.ксТипыКассовыхЧеков.ЧекРасхода;
	ИначеЕсли ИдентификаторТипаЧека = 5 Тогда	
		Возврат Перечисления.ксТипыКассовыхЧеков.ЧекВозвратаРасхода;
	ИначеЕсли ИдентификаторТипаЧека = 7 Тогда	
		Возврат Перечисления.ксТипыКассовыхЧеков.ЧекКоррекцииПрихода;
	ИначеЕсли ИдентификаторТипаЧека = 8 Тогда	
		Возврат Перечисления.ксТипыКассовыхЧеков.ЧекКоррекцииВозвратаПрихода;
	ИначеЕсли ИдентификаторТипаЧека = 9 Тогда	
		Возврат Перечисления.ксТипыКассовыхЧеков.ЧекКоррецииРасхода;
	ИначеЕсли ИдентификаторТипаЧека = 10 Тогда	
		Возврат Перечисления.ксТипыКассовыхЧеков.ЧекКоррекцииВозвратаРасхода;
	КонецеСли;	
КонецФункции	

Функция ПолучитьТекущегоКассира(ККМ) Экспорт
	ЗапросПоследняяЗапись = Новый Запрос("ВЫБРАТЬ
	|	СостояниеСменККМСрезПоследних.СостояниеСмены КАК СостояниеСмены,
	|	СостояниеСменККМСрезПоследних.Кассир КАК Кассир,
	|	СостояниеСменККМСрезПоследних.Период КАК Период,
	|	СостояниеСменККМСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.ксСостояниеСменККМ.СрезПоследних КАК СостояниеСменККМСрезПоследних
	|ГДЕ
	|	СостояниеСменККМСрезПоследних.ККМ = &ККМ");
	ЗапросПоследняяЗапись.УстановитьПараметр("ККМ", ККМ);
	РезПоследняяЗапись = ЗапросПоследняяЗапись.Выполнить().Выбрать();
	
	Если РезПоследняяЗапись.Следующий() Тогда	
		Если РезПоследняяЗапись.СостояниеСмены = Перечисления.ксСостояниеСменККМ.СменаОткрыта Тогда
			Возврат РезПоследняяЗапись.Кассир;
		Иначе
			Возврат ПолучитьТекущегоКассираУТЛ(ККМ);
		КонецеСли;	
	Иначе
		Возврат ПолучитьТекущегоКассираУТЛ(ККМ);
	КонецеСли;	
КонецФункции	

Функция ПолучитьТекущегоКассираУТЛ(ККМ) Экспорт
    Прокси = WSСсылки.КассовыйСерверУТЛ.СоздатьWSПрокси("http://www.strizh-logistic.org/cashe_server", "casheServer", "casheServerSoap",,10);
	Прокси.Пользователь = "Admin";
	Прокси.Пароль = "123";
	
	Попытка
		Рез = Прокси.getCashier(ККМ.УникальныйИдентификатор());
	Исключение
		Возврат Справочники.ксКассиры.Кассир1;
	КонецПопытки;	
	
	Если ЗначениеЗаполнено(Рез) Тогда
		UIDD = Новый УникальныйИдентификатор(Рез);
		Кассир = Справочники.ксКассиры.ПолучитьСсылку(UIDD);
		
		Если Не ЗначениеЗаполнено(Кассир.Код) Тогда
			Возврат Справочники.ксКассиры.Кассир1;
		КонецеСли;
		
		Возврат Кассир.Ссылка;
	Иначе
		Возврат Справочники.ксКассиры.Кассир1;
	КонецеСли;	
КонецФункции	

Функция ОтправкаСистемногоСообщенияEMAIL(МассивПолучателей, ТекстСообщения, ТемаСообщения) Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Ложь);
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;		
	Сообщение.Отправитель = УчетнаяЗапись.Пользователь;
	
	Сообщение.Тема = ТемаСообщения;
	
	Для Каждого Тек Из МассивПолучателей Цикл
		Сообщение.Получатели.Добавить(СокрЛП(Тек));
	КонецЦикла;	
	
	Сообщение.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.ПростойТекст);
	
	Почта = Новый ИнтернетПочта;
	Успешно = Ложь;
	Попытка 
		Сообщить("Отправка почтового сообщения...");
		Почта.Подключиться(Профиль);
		Почта.Послать(Сообщение);
		Сообщить("Сообщения успешно отправлены!");
		Успешно = Истина;
	Исключение
		Сообщить("Ошибка соединения с сервером.",СтатусСообщения.ОченьВажное);
		Сообщить(""+ОписаниеОшибки());
		Успешно = Ложь;
	КонецПопытки;
КонецФункции	

Функция ВозможноСоздатьЧекВТекущийМоментВремени(ДатаВремяМомента = Неопределено) Экспорт
	
	Если ДатаВремяМомента = Неопределено Тогда
		ВремяИнтервала = ТекущаяДата();
	Иначе
		ВремяИнтервала = ДатаВремяМомента;
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ВЫБОР
	            |		КОГДА ксИнтервалыВремениИнтервалы.ВремяС <= &ПараметрВремя
	            |				И ксИнтервалыВремениИнтервалы.ВремяПо >= &ПараметрВремя
	            |			ТОГДА ИСТИНА
	            |		ИНАЧЕ ЛОЖЬ
	            |	КОНЕЦ КАК МожноСоздатьЧек
	            |ИЗ
	            |	РегистрСведений.ксВременнойИнтервалВозможногоСозданияЧековВМП.СрезПоследних КАК ксВременнойИнтервалВозможногоСозданияЧековВМПСрезПоследних
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ксИнтервалыВремени.Интервалы КАК ксИнтервалыВремениИнтервалы
	            |		ПО ксВременнойИнтервалВозможногоСозданияЧековВМПСрезПоследних.ИнтервалВремени.Ссылка = ксИнтервалыВремениИнтервалы.Ссылка.Ссылка";
	Зап.УстановитьПараметр("ПараметрВремя", Дата('00010101') + (ВремяИнтервала-НачалоДня(ВремяИнтервала)));			
	
	Рез = зап.Выполнить();
	
	Если Рез.Пустой() тогда
		Возврат Истина;
	Иначе	
		Выб = Рез.Выбрать();
		Пока Выб.Следующий() Цикл
			Если Выб.МожноСоздатьЧек Тогда
				Возврат Истина;
			КонецеСли;	
		КонецЦикла;	
		Возврат Ложь;
	КонецеСли;	
КонецФункции	

Функция Ping(IPАдрес) Экспорт
	
	objShell = Новый COMОбъект("WScript.Shell") ;
    objScriptExec = objShell.Exec("ping.exe -n 1 " + IPАдрес) ;
    strPingResults = НРег(objScriptExec.StdOut.ReadAll());
	
	Возврат   Найти(strPingResults, "ttl=");
	
КонецФункции

Функция ВернутьМассивАдресов(Событие) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ксПолучатели.АдресEmail КАК АдресEmail
	               |ИЗ
	               |	РегистрСведений.ксПолучатели КАК ксПолучатели
	               |ГДЕ
	               |	ксПолучатели.ВидСобытия = &Событие";
	
	Запрос.УстановитьПараметр("Событие", Событие);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АдресEmail");
	
КонецФункции
