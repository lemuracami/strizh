
Функция ПолучитьВозможностьСоединенияСККМ(ККМ)
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксСоединениеДрайвераСККМСрезПоследних.СоединениеУстановлено КАК СоединениеУстановлено,
	            |	ксСоединениеДрайвераСККМСрезПоследних.Период КАК Период
	            |ИЗ
	            |	РегистрСведений.ксСоединениеДрайвераСККМ.СрезПоследних(, ККМ.Ссылка = &ККМ) КАК ксСоединениеДрайвераСККМСрезПоследних";
	Зап.УстановитьПараметр("ККМ", ККМ.Ссылка);
	Рез = Зап.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат Истина;
	Иначе
		Выб = Рез.Выбрать();
		Если Выб.Следующий() Тогда
			Если Не Выб.СоединениеУстановлено И ТекущаяДата() - Выб.Период >= 1 Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецеСли;	
		Иначе
			Возврат Истина;
		КонецеСли;
	КонецЕсли;	
КонецФункции


Процедура ЗаписатьФлагСоединенияСККМ(ККМ, Флаг) Экспорт	
	ТекВр = ТекущаяДата();
	
	Наб = РегистрыСведений.ксСоединениеДрайвераСККМ.СоздатьНаборЗаписей();
	Наб.Отбор.ККМ.Установить(ККМ);
	Наб.Отбор.Период.Установить(ТекВр);
	
	Нов = Наб.Добавить();
	Нов.ККМ = ККМ;
	Нов.Период = ТекВр;
	Нов.СоединениеУстановлено = Флаг;
	
	Наб.Записать();
КонецПроцедуры	


Функция ПечатьЧека(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДополнительныеПараметрыЧека,ЭтоВозврат = Ложь, ТипКассовогоЧека) Экспорт
	Попытка
		Струк = Новый Структура;
		
		//Если ЗначениеЗаполнено(КассаККМ.НомерККМВДрайвереАтол) Тогда
			СерверККТ.CurrentDeviceNumber = 1;
		//	Если СерверККТ.ResultCode = -9 Тогда
		//		Струк.Вставить("Результат", Ложь);
		//		Струк.Вставить("КодОшибки", -9);
		//		Струк.Вставить("ТекстОшибки", "Установка номера устройства, проблема");
		//		Возврат Струк;
		//	КонецеСли;	
		//КонецеСли;
		
		
		
		// если есть открытый чек, то отменяем его
		Если СерверККТ.CheckState <> 0 тогда
			РезОтменыЧека = СерверККТ.CancelCheck();
			Если РезОтменыЧека <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", РезОтменыЧека);
				Струк.Вставить("ТекстОшибки", "Отмена чека, проблема");
				Возврат Струк;
			КонецЕсли;
		КонецЕсли;
		
		
		// входим в режим регистрации
		// устанавливаем пароль кассира
		СерверККТ.Password = "1";
		// входим в режим регистрации
		СерверККТ.Mode = 1;
		
		Рез = СерверККТ.SetMode();
		Если Рез <> 0 тогда
			Если Рез = -3865 Тогда
				РезОтменыЧека = СерверККТ.CancelCheck();
				Если РезОтменыЧека <> 0 тогда
					Струк.Вставить("Результат", Ложь);
					Струк.Вставить("КодОшибки", РезОтменыЧека);
					Струк.Вставить("ТекстОшибки", "Отмена чека, проблема");
					Возврат Струк;
				КонецЕсли;
			КонецеСли;
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", Рез);
			Струк.Вставить("ТекстОшибки", "Установка режима чека, проблема");
			Возврат Струк;
		КонецЕсли;
		
		СостояниеСмены = Ложь;
		СменаОткрыта(СерверККТ, СостояниеСмены);
		Если Не СостояниеСмены Тогда
			Кассир = ксРаботаСККМСервер.ПолучитьТекущегоКассираУТЛ(КассаККМ);
			ОткрытьСменуНаККМ(СерверККТ, КассаККМ, Кассир);
			ксРаботаСККМСервер.ЗарегистрироватьОткрытиеСменыККМ(КассаККМ, Кассир);
		КонецеСли;	
		
		
		
		Если КассаККМ.НеВыводитьДанныеНаПечать Тогда
			СерверККТ.CheckMode = 0;
		Иначе
			СерверККТ.CheckMode = 1;
		КонецеСли;
		СерверККТ.CheckType = ксРаботаСККМСервер.ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипКассовогоЧека);
		
		Рез = СерверККТ.OpenCheck();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", Рез);
			Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
			Возврат Струк;
		КонецЕсли;
		
		// даем аттрибуты для передачи электронного чека
		СерверККТ.AttrNumber = 1008;
		СерверККТ.AttrValue = ДополнительныеПараметрыЧека.АдресИнформирования; // передача почты или абонентского номера
		Рез = СерверККТ.WriteAttribute();
		если Рез <> 0 Тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", Рез);
			Струк.Вставить("ТекстОшибки", "Установка email, проблема");
			Возврат Струк;
		КонецеСли;	
		///атрибуты информирования
		
		
		Для каждого Тек Из ТаблицаТоваров Цикл
			Если Тек.Количество <= 0 Тогда
				продолжить;
			КонецЕсли;	
			СерверККТ.Name = Тек.Наименование;
			СерверККТ.Price = Тек.Цена;
			СерверККТ.Quantity = Тек.Количество;
			СерверККТ.Department = Тек.НомерСекции;
			СерверККТ.TaxTypeNumber = Тек.СтавкаНДС;
			Если Не ЭтоВозврат Тогда
				Рез = СерверККТ.Registration();
				Если Рез <> 0 тогда
					Струк.Вставить("Результат", Ложь);
					Струк.Вставить("КодОшибки", Рез);
					Струк.Вставить("ТекстОшибки", "Регистрация товара, проблема");
					Возврат Струк;
				КонецЕсли;
			Иначе
				Если СерверККТ.Return() <> 0 тогда
					Возврат Ложь;
				КонецЕсли;
			КонецеСли;
		КонецЦикла;
		
		СерверККТ.TypeClose = ДополнительныеПараметрыЧека.КодТипаОплатыНаККМ;
		
		СерверККТ.AttrNumber = 1021;
		СерверККТ.AttrValue = ДополнительныеПараметрыЧека.Кассир; // кассир
		Рез = СерверККТ.WriteAttribute();
		если Рез <> 0 Тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", Рез);
			Струк.Вставить("ТекстОшибки", "Установка кассира, проблема");
			Возврат Струк;
		КонецеСли;	
		
		
		Рез = СерверККТ.CloseCheck();
		
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", Рез);
			Струк.Вставить("ТекстОшибки", "Закрытие чека, проблема");
			Возврат Струк;
		КонецЕсли;
		
		
		Результат = ПолучитьТекущиеПараметрыККМ(СерверККТ, ПараметрыЧека);
		
		Если Не Результат Тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", 1);
			Струк.Вставить("ТекстОшибки", "Получение параметров пробитого чека, проблема");
			Возврат Струк;
		КонецеСли;	
		
	Исключение
		Струк.Вставить("Результат", Ложь);
		Струк.Вставить("КодОшибки", 111);
		Струк.Вставить("ТекстОшибки", "ОБЩАЯ ПРОБЛЕМА!!");
		Возврат Струк;
		
	КонецПопытки;
	
	Струк.Вставить("Результат", Истина);
	Струк.Вставить("КодОшибки", 0);
	Струк.Вставить("ТекстОшибки", "all good");
	Возврат Струк;
КонецФункции	


Функция ЧекОткрыт(СерверККТ) Экспорт
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_RECEIPT_STATE);
	СерверККТ.queryData();
	
	ТипЧека  = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE);
	
	Если ТипЧека = СерверККТ.LIBFPTR_RT_CLOSED Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецеСли;	
КонецФункции	


Функция ПреобразоватьВМассивБайт(Данные, РезультатСтрокой = Истина) Экспорт
    Если НЕ ЗначениеЗаполнено(СокрЛП(Данные)) Тогда
        Возврат "";
    КонецЕсли;    
    РезультатБайтами = "";
    
    
    ИмяВрФайла = ПолучитьИмяВременногоФайла("txt");
    Текст = Новый ТекстовыйДокумент();
    Текст.УстановитьТекст(Данные);
    Текст.Записать(ИмяВрФайла,КодировкаТекста.ANSI);
    ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВрФайла);
    Если РезультатСтрокой Тогда
        РезультатБайтами = Строка(ДвоичныеДанные);
    Иначе
        РезультатБайтами = ДвоичныеДанные;
    КонецЕсли;    
   
    УдалитьФайлы(ИмяВрФайла);
    
    Возврат РезультатБайтами;
КонецФункции


Функция ТолькоЦифры(ВхСтрока)
   ВыхСтрока="";
   Для п=1 По СтрДлина(ВхСтрока) Цикл
      Симв=Сред(ВхСтрока,п,1);
      Если Симв>="0" И Симв<="9" Тогда
         ВыхСтрока=ВыхСтрока+Симв;
      КонецЕсли;
   КонецЦикла;
   Возврат ВыхСтрока;
КонецФункции

Функция ПечатьЧекаФФД_1_05(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДополнительныеПараметрыЧека,ЭтоВозврат = Ложь, ТипКассовогоЧека) Экспорт
	Попытка
		Струк = Новый Структура;
		
		
		Если ЧекОткрыт(СерверККТ) Тогда
			Рез = СерверККТ.cancelReceipt();
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецеСли;
		
		СерверККТ.setParam(1021, ДополнительныеПараметрыЧека.Кассир);
        СерверККТ.operatorLogin();
		
		СостояниеСмены = Ложь;
		СменаОткрыта(СерверККТ, СостояниеСмены);   //смена постоянно закрыта!!
		Если Не СостояниеСмены Тогда
			Кассир = ксРаботаСККМСервер.ПолучитьТекущегоКассираУТЛ(КассаККМ);
			ОткрытьСменуНаККМ(СерверККТ, КассаККМ, Кассир);
			ксРаботаСККМСервер.ЗарегистрироватьОткрытиеСменыККМ(КассаККМ, Кассир);
		КонецеСли;	
		
		
		
		
		
		
		
		
		СерверККТ.setParam(1085, "Номер заказа Интернет-магазина");
		СерверККТ.setParam(1086, ДополнительныеПараметрыЧека.НомерВнешнегоЗаказа);
		СерверККТ.utilFormTlv();
		СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
		СерверККТ.setNonPrintableParam(1084, СоставнойАтрибут);
		//СерверККТ.setParam(1084, СоставнойАтрибут);

		
		
		ТипЧекаККТ = ксРаботаСККМСервер.ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипКассовогоЧека);
		
		Если ТипЧекаККТ = 1 Тогда
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL);
		ИначеЕсли ТипЧекаККТ = 2 Тогда	
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_RETURN);
		КонецЕсли;	

		
		
		//Если ЭтоВозврат Тогда
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_RETURN);
		//Иначе
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL);
		//КонецеСли;
		Если КассаККМ.НеВыводитьДанныеНаПечать Тогда
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY, Истина);
		КонецеСли;
		// даем аттрибуты для передачи электронного чека
		СерверККТ.setParam(1008, СокрЛП(СтрЗаменить(ДополнительныеПараметрыЧека.АдресИнформирования, " ", "")));
		///атрибуты информирования
		
		
		
		
		
		
		
		
		
		Рез = СерверККТ.openReceipt();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		ИтСум = 0;
		Для каждого Тек Из ТаблицаТоваров Цикл
			Если Тек.Количество <= 0 Тогда
				продолжить;
			КонецЕсли;	
			
			//пробуем вынести это 19.03.2021 по письму Андриенко , не работает
			//СерверККТ.setParam(1222, СерверККТ.LIBFPTR_AT_ANOTHER);			
			
			//данные поставщика
			Если ЗначениеЗаполнено(Тек.ПоставщикИНН) Тогда
				Если ЗначениеЗаполнено(Тек.ПоставщикТелефон) И ЗначениеЗаполнено(Тек.ПоставщикНаименование) Тогда
					//СерверККТ.setParam(1171, ТолькоЦифры(Тек.ПоставщикТелефон));
					НомерТелефонаДляОтправки = ПроверкаНомераТелефона(СокрЛП(Тек.ПоставщикТелефон));
					Если НомерТелефонаДляОтправки <> Ложь Тогда
						СерверККТ.setParam(1171, НомерТелефонаДляОтправки);
					КонецЕсли;	
					
					СерверККТ.setParam(1225, Тек.ПоставщикНаименование);
					СерверККТ.utilFormTlv();
					СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
					СерверККТ.setParam(1224, СоставнойАтрибут);
				конецеСли;	
				
				
				СерверККТ.setParam(1222, СерверККТ.LIBFPTR_AT_ANOTHER);			
				СерверККТ.setParam(1226, Тек.ПоставщикИНН);			
				
				//Если Рез <> 0 тогда
				//	Струк.Вставить("Результат", Ложь);
				//	Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				//	Струк.Вставить("ТекстОшибки", "ИНН поставщика, проблема");
				//	Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				//	Возврат Струк;
				//КонецЕсли;
				
				
			КонецеСли;
			
			
			Если Константы.ксПередаватьНаККМКодыМаркировки.Получить() Тогда
				//код маркировки
				КодМаркировки = СокрЛП(Тек.КодМаркировки);
				//СокрЛП(Тек.КодМаркировки);
				
				///// до 10.8.1
				//Если ЗначениеЗаполнено(КодМаркировки) Тогда
				//	ПропускаемМаркировку= Ложь;
				//	Если СтрДлина(КодМаркировки) = 27 Или СтрДлина(КодМаркировки) = 31 Тогда
				//		СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_NOMENCLATURE_TYPE, СерверККТ.LIBFPTR_NT_SHOES);
				//	ИначеЕсли СтрДлина(КодМаркировки) = 21 Тогда	
				//		СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_NOMENCLATURE_TYPE, СерверККТ.LIBFPTR_NT_TOBACCO);
				//	ИначеЕсли СтрДлина(КодМаркировки) = 34 Тогда	
				//		СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_NOMENCLATURE_TYPE, СерверККТ.LIBFPTR_NT_FURS);
				//	ИначеЕсли СтрДлина(КодМаркировки) = 38 Тогда	
				//		СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_NOMENCLATURE_TYPE, СерверККТ.LIBFPTR_NT_FURS);						
				//	Иначе
				//		ПропускаемМаркировку = Истина;
				//	КонецеСли;
				//	
				//	
				//	Если Не ПропускаемМаркировку Тогда
				//		Если СтрДлина(КодМаркировки) = 31 Тогда
				//			GTIN = Сред(КодМаркировки, 3, 14);	
				//			SN = Прав(КодМаркировки, СтрДлина(КодМаркировки) - 18);
				//		Иначе
				//			GTIN = Лев(КодМаркировки, 14);	
				//			SN = Прав(КодМаркировки, СтрДлина(КодМаркировки) - 14);
				//		Конецесли;	
				//		
				//		СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_GTIN, GTIN);
				//		СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_SERIAL_NUMBER, SN);
				//		СерверККТ.utilFormNomenclature();
				//		nomenclatureCode = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
				//		СерверККТ.setParam(1162, nomenclatureCode);			
				//		
				//		//Если Рез <> 0 тогда
				//		//	Струк.Вставить("Результат", Ложь);
				//		//	Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				//		//	Струк.Вставить("ТекстОшибки", "Код маркировки, проблема");
				//		//	Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				//		//	Возврат Струк;
				//		//КонецЕсли;
				//	КонецеСли;
				//КонецеСли;
				 ///// до 10.8.1

				
				//после 10.8.1 старт  https://forum.mista.ru/topic.php?id=866047
			
				Если ЗначениеЗаполнено(КодМаркировки) Тогда
					ПропускаемМаркировку= Ложь;
					
					Если СтрДлина(КодМаркировки) = 31 Тогда
						GTIN = Сред(КодМаркировки, 3, 14);	
						SN = Прав(КодМаркировки, СтрДлина(КодМаркировки) - 18);
					ИначеЕсли СтрДлина(КодМаркировки) = 38 Тогда
						GTIN = Сред(КодМаркировки, 3, 14);	
						SN = Прав(КодМаркировки, СтрДлина(КодМаркировки) - 18);
					Иначе
						GTIN = Лев(КодМаркировки, 14);	
						SN = Прав(КодМаркировки, СтрДлина(КодМаркировки) - 14);
						//Иначе
						//	ПропускаемМаркировку= Истина;
					Конецесли;	
					
					
					ШтрихкодМаркировкиНовый = "01" + gtin + "21" + SN;
					nomenclatureCode = ПреобразоватьВМассивБайт( ШтрихкодМаркировкиНовый );		
					
					СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE, nomenclatureCode);
				КонецеСли;
				
			//после 10.8.1 конец

			КонецеСли;
			
			
			
			//код маркировки
			
			
			
			СерверККТ.setParam(1212, Тек.ПризнакПредметаРасчета);		//услуга 4	
			//СерверККТ.setParam(1214, 4);			
			СерверККТ.setParam(1214, Тек.ПризнакСпособаРасчета);			
			
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_COMMODITY_NAME, Тек.Наименование);
			
			
			
			
			//Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.ОплаченоВМагазине Тогда
			//	СерверККТ.setParam(1214, 4); //еще не тестировалось
			//	СерверККТ.setParam(1214, 10)
			//КонецеСли;	
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PRICE, Тек.Цена);
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_QUANTITY, Тек.Количество);
			
			
			
			//изменено 27.10.2020
			//Если Тек.КодНалога = -2 или Тек.КодНалога = -1 тогда   //проблема со ставкой 0 и 10
			Если Тек.КодНалога = -2 тогда   //проблема со ставкой 0 и 10
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
			//изменено 27.10.2020
			ИначеЕсли Тек.КодНалога = 0 или Тек.КодНалога = -1 тогда	   
			//изменено 27.10.2020
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_NO);
			ИначеЕсли Тек.КодНалога = 10 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT10);
			ИначеЕсли Тек.КодНалога = 5 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT5);
			ИначеЕсли Тек.КодНалога = 7 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT7);				
			ИначеЕсли Тек.КодНалога = 18 Или Тек.КодНалога = 20 тогда	   
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
			КонецЕСли;   
			
			
			
			
			
			
			
			ИтСум = ИтСум + Окр(Тек.Количество*Тек.Цена, 2);
			
			
//			
//LIBFPTR_AT_BANK_PAYING_AGENT - банковский платежный агент
//LIBFPTR_AT_BANK_PAYING_SUBAGENT - банковский платежный субагент
//LIBFPTR_AT_PAYING_AGENT - платежный агент
//LIBFPTR_AT_PAYING_SUBAGENT - платежный субагент
//LIBFPTR_AT_ATTORNEY - поверенный
//LIBFPTR_AT_COMMISSION_AGENT - комиссионер
//LIBFPTR_AT_ANOTHER - другой тип агента			
			
				//Если ДополнительныеПараметрыЧека.ВыводитьДанныеКонтрагента Тогда
				//	СерверККТ.AttrNumber=1222;
				//	СерверККТ.AttrValue= 6; //Признак АГЕНТ
				//	СерверККТ.WriteAttribute();				
				//КонецеСли;	
			
				
				//Если ДополнительныеПараметрыЧека.ВыводитьДанныеКонтрагента Тогда
				//	СерверККТ.AttrNumber=1226;
				//	СерверККТ.AttrValue= ДополнительныеПараметрыЧека.ИННКонтрагента; //ИНН Организации по агентскому договору.
				//	СерверККТ.WriteAttribute();
				//	СерверККТ.AttrNumber=1224;
				//	//ECR.WriteAttribute(); 
				//	СерверККТ.BeginComplexAttribute();
				//	СерверККТ.AttrNumber=1171; 
				//	СерверККТ.AttrValue = ДополнительныеПараметрыЧека.ТелефонКонтрагента; //Номер телефона Организации по агентскому договору 
				//	СерверККТ.WriteAttribute(); 
				//	СерверККТ.AttrNumber=1225; 
				//	СерверККТ.AttrValue = ДополнительныеПараметрыЧека.НаименованиеКонтрагента; //Наименование Организации по агентскому договору 
				//	СерверККТ.WriteAttribute();
				//	СерверККТ.EndComplexAttribute(); 
				//КонецеСли;
				
			
			
			Рез = СерверККТ.registration();
			
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Регистрация позиции, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ИтСум <> 0 Тогда
			Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.Наличные Или ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.Терминал и ДополнительныеПараметрыЧека.СуммаПредоплаты <> 0 Тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ДополнительныеПараметрыЧека.СуммаПредоплаты);
			КонецеСли;	
			
			Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.ОплаченоВМагазине Тогда
				//СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум - ДополнительныеПараметрыЧека.СуммаПредоплаты);
			ИначеЕсли ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.Терминал Или ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.СБП Тогда	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_ELECTRONICALLY);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум - ДополнительныеПараметрыЧека.СуммаПредоплаты);
			Иначе	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_CASH);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум - ДополнительныеПараметрыЧека.СуммаПредоплаты);				
			КонецеСли;
			
			Рез = СерверККТ.payment();		
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Регистрация оплаты, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		Рез = СерверККТ.closeReceipt();		
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Закрытие чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		
		Рез = СерверККТ.checkDocumentClosed();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Проверка чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		Результат = ПолучитьТекущиеПараметрыККМ(СерверККТ, ПараметрыЧека);
		
		Если Не Результат Тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", 1);
			Струк.Вставить("ТекстОшибки", "Получение параметров пробитого чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецеСли;	
		
	Исключение
		Струк.Вставить("Результат", Ложь);
		Струк.Вставить("КодОшибки", 111);
		Струк.Вставить("ТекстОшибки", ОписаниеОшибки());
		Струк.Вставить("ОписаниеОшибкиККМ", "");
		Возврат Струк;
		
	КонецПопытки;
	
	Струк.Вставить("Результат", Истина);
	Струк.Вставить("КодОшибки", 0);
	Струк.Вставить("ТекстОшибки", "all good");
	Струк.Вставить("ОписаниеОшибкиККМ", "all good");
	Возврат Струк;
КонецФункции	


Процедура ЗаписатьВБДРезультатПроверкиКМ(ККМ, ЧекККМ, Товар, РезультатПроверки)
	ТекДата = ТекущаяДата();
	Наб = РегистрыСведений.ксРезультатыПроверкиКМ.СоздатьНаборЗаписей();
	Наб.Отбор.ККМ.Установить(ККМ.Ссылка);
	Наб.Отбор.ЧекККМ.Установить(ЧекККМ.Ссылка);
	Наб.Отбор.Товар.Установить(Товар.Ссылка);
	Наб.Отбор.Период.Установить(ТекДата);
	
	Нов = Наб.Добавить();
	Нов.Период = ТекДата;
	Нов.ККМ = ККМ;
	Нов.ЧекККМ = ЧекККМ;
	Нов.Товар = Товар;
	Нов.КодРезультатаПроверки = РезультатПроверки;
	
	Наб.Записать(Истина);
КонецПроцедуры	


Функция ПроверкаНомераТелефона(НомерТелефона)
	НомерТолькоЦифры = ТолькоЦифры(НомерТелефона);
	Если СтрДлина(НомерТолькоЦифры) = 11 Тогда
		Возврат "+7" + Сред(НомерТолькоЦифры, 2, 10);
	Иначе
		Возврат Ложь;
	КонецеСли;	
КонецФункции	
					


Функция ПечатьЧекаФФД_1_2(СерверККТ, КассаККМ, ТаблицаТоваров, ПараметрыЧека, ДополнительныеПараметрыЧека,ЭтоВозврат = Ложь, ТипКассовогоЧека) Экспорт
	Попытка
		Струк = Новый Структура;
		
		
		Если ЧекОткрыт(СерверККТ) Тогда
			Рез = СерверККТ.cancelReceipt();
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецеСли;
		
		СерверККТ.setParam(1021, ДополнительныеПараметрыЧека.Кассир);
        СерверККТ.operatorLogin();
		
		Попытка
			//стираем все запрошенные маркировки из памяти кассового аппарата
			СерверККТ.clearMarkingCodeValidationResult();
		Исключение
		КонецПопытки;		
		
		СостояниеСмены = Ложь;
		СменаОткрыта(СерверККТ, СостояниеСмены);   //смена постоянно закрыта!!
		Если Не СостояниеСмены Тогда
			Кассир = ксРаботаСККМСервер.ПолучитьТекущегоКассираУТЛ(КассаККМ);
			ОткрытьСменуНаККМ(СерверККТ, КассаККМ, Кассир);
			ксРаботаСККМСервер.ЗарегистрироватьОткрытиеСменыККМ(КассаККМ, Кассир);
		КонецеСли;	
		
		
		
		
		
		
		
		
		СерверККТ.setParam(1085, "Номер заказа Интернет-магазина");
		СерверККТ.setParam(1086, ДополнительныеПараметрыЧека.НомерВнешнегоЗаказа);
		СерверККТ.utilFormTlv();
		СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
		СерверККТ.setNonPrintableParam(1084, СоставнойАтрибут);
		//СерверККТ.setParam(1084, СоставнойАтрибут);

		
		
		ТипЧекаККТ = ксРаботаСККМСервер.ПолучитьИдентификаторТипаКассовогоЧекаДляККМ(ТипКассовогоЧека);
		
		Если ТипЧекаККТ = 1 Тогда
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL);
		ИначеЕсли ТипЧекаККТ = 2 Тогда	
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_RETURN);
		КонецЕсли;	

		
		
		//Если ЭтоВозврат Тогда
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL_RETURN);
		//Иначе
		//	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE, СерверККТ.LIBFPTR_RT_SELL);
		//КонецеСли;
		Если КассаККМ.НеВыводитьДанныеНаПечать Тогда
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY, Истина);
		КонецеСли;
		// даем аттрибуты для передачи электронного чека
		СерверККТ.setParam(1008, СокрЛП(СтрЗаменить(ДополнительныеПараметрыЧека.АдресИнформирования, " ", "")));
		///атрибуты информирования
		
		
		
		
		
		
		
		
		
		Рез = СерверККТ.openReceipt();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Открытие чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		ИтСум = 0;
		Для каждого Тек Из ТаблицаТоваров Цикл
			Если Тек.Количество <= 0 Тогда
				продолжить;
			КонецЕсли;	
			
			
			
			//пробуем вынести это 19.03.2021 по письму Андриенко , не работает
			//СерверККТ.setParam(1222, СерверККТ.LIBFPTR_AT_ANOTHER);			
			
			//данные поставщика
			Если ЗначениеЗаполнено(Тек.ПоставщикИНН) Тогда
				Если ЗначениеЗаполнено(Тек.ПоставщикТелефон) И ЗначениеЗаполнено(Тек.ПоставщикНаименование) Тогда
					НомерТелефонаДляОтправки = ПроверкаНомераТелефона(СокрЛП(Тек.ПоставщикТелефон));
					Если НомерТелефонаДляОтправки <> Ложь Тогда
						СерверККТ.setParam(1171, НомерТелефонаДляОтправки);
					КонецЕсли;	
					СерверККТ.setParam(1225, Тек.ПоставщикНаименование);
					СерверККТ.utilFormTlv();
					СоставнойАтрибут = СерверККТ.getParamByteArray(СерверККТ.LIBFPTR_PARAM_TAG_VALUE);
					СерверККТ.setParam(1224, СоставнойАтрибут);
				конецеСли;	
				
				
				СерверККТ.setParam(1222, СерверККТ.LIBFPTR_AT_ANOTHER);			
				СерверККТ.setParam(1226, Тек.ПоставщикИНН);			
				
				//Если Рез <> 0 тогда
				//	Струк.Вставить("Результат", Ложь);
				//	Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				//	Струк.Вставить("ТекстОшибки", "ИНН поставщика, проблема");
				//	Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				//	Возврат Струк;
				//КонецЕсли;
				
				
			КонецеСли;
			
			ПропускаемМаркировку = Истина;
			Если Константы.ксПередаватьНаККМКодыМаркировки.Получить() Тогда
				//код маркировки
				КодМаркировки = СокрЛП(Тек.КодМаркировки);
				
				//проверка кода маркировки ФФД 1.2
				Разделитель = Символ(29);
				
				//тест
				//КодМаркировки = СокрЛП(КодМаркировки);
				
				//КодМаркировки = СтрЗаменить(КодМаркировки,Разделитель,"");
				КМОбработанный1 = СтрЗаменить(КодМаркировки,"<GS>",Разделитель);
				КМОбработанный = СтрЗаменить(КМОбработанный1,"<gs>",Разделитель);
				//КМОбработанный = Лев(КодМаркировки, 31) + Разделитель + Сред(КодМаркировки, 32, 6) + Разделитель + Сред(КодМаркировки, 38);				
				//тест
				//КМОбработанный = КодМаркировки;
				Если ЗначениеЗаполнено(КМОбработанный) Тогда
					ПропускаемМаркировку = Ложь;
					Если СтрНайти(КМОбработанный, Разделитель) = 0 Тогда
						ПропускаемМаркировку = Истина;
					КонецеСли;	
					
					Если Не ПропускаемМаркировку Тогда
						status = 1;
						СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_TYPE, СерверККТ.LIBFPTR_MCT12_AUTO);
						СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE, КМОбработанный);
						СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_STATUS, status);
						СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_WAIT_FOR_VALIDATION_RESULT, Истина);
						СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_PROCESSING_MODE, 0);					
						
						СерверККТ.beginMarkingCodeValidation();
						ВремяНачала = ТекущаяДата();
						ВремяОжидания = 60;
						
						// Начало проверки 
						Пока истина Цикл
							СерверККТ.getMarkingCodeValidationStatus();
							Если СерверККТ.getParamBool(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_VALIDATION_READY) тогда
								прервать;
							КонецЕсли;	
							Если ТекущаяДата() - ВремяНачала > ВремяОжидания тогда
								прервать;
							КонецЕсли;	
						КонецЦикла;
						
						validationResult = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_RESULT);
						
						СерверККТ.acceptMarkingCode();
						ЗаписатьВБДРезультатПроверкиКМ(КассаККМ, ДополнительныеПараметрыЧека.ДокументЧек, Тек.Товар, validationResult);
						//Наш штрихкод проверен и занесен в память аппарата
						// Теперь его ОБЯЗАТЕЛЬНО надо повторить в самой продаже
						// Если этого не сделать - то ничего и не отошлется					КонецеСли;	
					КонецеСли;
				КонецЕСли;	
			//после 10.8.1 конец

			КонецеСли;			
			
			//код маркировки
			
			
			
			СерверККТ.setParam(1212, Тек.ПризнакПредметаРасчета);		//услуга 4	
			//СерверККТ.setParam(1214, 4);			
			СерверККТ.setParam(1214, Тек.ПризнакСпособаРасчета);			
			
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_COMMODITY_NAME, Тек.Наименование);
			
			
			
			
			//Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.ОплаченоВМагазине Тогда
			//	СерверККТ.setParam(1214, 4); //еще не тестировалось
			//	СерверККТ.setParam(1214, 10)
			//КонецеСли;	
			
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PRICE, Тек.Цена);
			СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_QUANTITY, Тек.Количество);
			СерверККТ.setParam(2108, 0);
			
			
			//изменено 27.10.2020
			//Если Тек.КодНалога = -2 или Тек.КодНалога = -1 тогда   //проблема со ставкой 0 и 10
			Если Тек.КодНалога = -2 тогда   //проблема со ставкой 0 и 10
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
			//изменено 27.10.2020
			ИначеЕсли Тек.КодНалога = 0 или Тек.КодНалога = -1 тогда	   
			//изменено 27.10.2020
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_NO);
			ИначеЕсли Тек.КодНалога = 10 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT10);
			ИначеЕсли Тек.КодНалога = 5 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT5);
			ИначеЕсли Тек.КодНалога = 7 тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT7);
			ИначеЕсли Тек.КодНалога = 18 Или Тек.КодНалога = 20 тогда	   
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_TAX_TYPE, СерверККТ.LIBFPTR_TAX_VAT20);
			КонецЕСли;   
			
			
			
			
			
			
			
			ИтСум = ИтСум + Окр(Тек.Количество*Тек.Цена, 2);
			
			Если Не ПропускаемМаркировку Тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE, КМОбработанный);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_STATUS, status);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_RESULT, validationResult);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_MARKING_PROCESSING_MODE, 0);			
			КонецЕсли;
			
			Рез = СерверККТ.registration();
			
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Регистрация позиции, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ИтСум <> 0 Тогда
			Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.Наличные Или ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.Терминал и ДополнительныеПараметрыЧека.СуммаПредоплаты <> 0 Тогда
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ДополнительныеПараметрыЧека.СуммаПредоплаты);
			КонецеСли;	
			
			Если ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.ОплаченоВМагазине Тогда
				//СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_PREPAID);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум - ДополнительныеПараметрыЧека.СуммаПредоплаты);
			ИначеЕсли ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.Терминал Или ДополнительныеПараметрыЧека.ТипОплаты = Справочники.ксТипыОплат.СБП Тогда	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_ELECTRONICALLY);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум - ДополнительныеПараметрыЧека.СуммаПредоплаты);
			Иначе	
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_TYPE, СерверККТ.LIBFPTR_PT_CASH);
				СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_PAYMENT_SUM, ИтСум - ДополнительныеПараметрыЧека.СуммаПредоплаты);				
			КонецеСли;
			
			Рез = СерверККТ.payment();		
			Если Рез <> 0 тогда
				Струк.Вставить("Результат", Ложь);
				Струк.Вставить("КодОшибки", СерверККТ.errorCode());
				Струк.Вставить("ТекстОшибки", "Регистрация оплаты, проблема");
				Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
				Возврат Струк;
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		Рез = СерверККТ.closeReceipt();		
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Закрытие чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		
		Рез = СерверККТ.checkDocumentClosed();
		Если Рез <> 0 тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", СерверККТ.errorCode());
			Струк.Вставить("ТекстОшибки", "Проверка чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецЕсли;
		
		Результат = ПолучитьТекущиеПараметрыККМ(СерверККТ, ПараметрыЧека);
		
		Если Не Результат Тогда
			Струк.Вставить("Результат", Ложь);
			Струк.Вставить("КодОшибки", 1);
			Струк.Вставить("ТекстОшибки", "Получение параметров пробитого чека, проблема");
			Струк.Вставить("ОписаниеОшибкиККМ", СерверККТ.errorDescription());
			Возврат Струк;
		КонецеСли;	
		
	Исключение
		Струк.Вставить("Результат", Ложь);
		Струк.Вставить("КодОшибки", 111);
		Струк.Вставить("ТекстОшибки", ОписаниеОшибки());
		Струк.Вставить("ОписаниеОшибкиККМ", "");
		Возврат Струк;
		
	КонецПопытки;
	
	Струк.Вставить("Результат", Истина);
	Струк.Вставить("КодОшибки", 0);
	Струк.Вставить("ТекстОшибки", "all good");
	Струк.Вставить("ОписаниеОшибкиККМ", "all good");
	Возврат Струк;
КонецФункции	


Функция ПодключитьсяКККМ(ККМ) Экспорт
	Если Не ПолучитьВозможностьСоединенияСККМ(ККМ) Тогда
		Возврат Ложь;
	КонецеСли;	
	
	
	СерверККТ = Новый COMОбъект("AddIn.Fptr10");
	ДобавитьУстройствоATOL(СерверККТ, ККМ);  
	
	Рез = СерверККТ.open(); //Соединение с ККТ 
	Если Рез <> 0 тогда //Соединение с ККТ
		//ЗаписатьФлагСоединенияСККМ(ККМ, Ложь);
        Возврат Ложь;
	КонецЕсли;	
	
	ЗаписатьФлагСоединенияСККМ(ККМ, Истина);
	
	Возврат СерверККТ;
КонецФункции	


Функция ПроверкаКККМ(ККМ) Экспорт
	СерверККТ = Новый COMОбъект("AddIn.FPrnM8");
	ДобавитьУстройствоATOL(СерверККТ, ККМ);
	СерверККТ.DeviceEnabled = 1;
	Если СерверККТ.ResultCode <> 0 тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если СерверККТ.GetCurrentMode() <> 0 тогда
		Возврат Ложь;
	ИначеЕсли СерверККТ.Mode <> 0 И СерверККТ.Mode <> 1 И СерверККТ.AdvancedMode <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	Возврат Истина;
КонецФункции

Функция ОтключитьсяОтККМ(СерверККТ, ККМ) Экспорт
	//СерверККТ.CurrentDeviceNumber = ККМ.НомерККМВДрайвереАтол;	
	Если СерверККТ.close() <> 0 Тогда
		Возврат Ложь;
	КонецеСли;	
	СерверККТ = "";
	//Если СерверККТ.ResultCode <> 0 тогда
	//	Возврат Ложь;
	//КонецЕсли;
	ЗаписатьФлагСоединенияСККМ(ККМ, Ложь);
	Возврат Истина;
КонецФункции

Функция ПолучитьТекущиеПараметрыККМ(СерверККТ, СтруктураДанных) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_RECEIPT_STATE);
	СерверККТ.queryData();
                
    НомерЧека       = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_RECEIPT_NUMBER);          //3 ?
    НомерДокумента        = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_DOCUMENT_NUMBER);
    //СуммаЧека        = СерверККТ.getParamDouble(СерверККТ.LIBFPTR_PARAM_RECEIPT_SUM);     //0 ?
    //ТипЧекаККТ  = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE);       //0 ? закрыт
	
				
		
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_SHIFT_STATE);
	СерверККТ.queryData();
	
 	НомерСмены     = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_SHIFT_NUMBER);
	
	
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_FN_DATA_TYPE, СерверККТ.LIBFPTR_FNDT_LAST_RECEIPT);
    СерверККТ.fnQueryData();	

    СуммаЧека        = СерверККТ.getParamDouble(СерверККТ.LIBFPTR_PARAM_RECEIPT_SUM);
    ТипЧекаККТ        = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_RECEIPT_TYPE);
	
	ТипЧека = 1;
	Если ТипЧекаККТ = СерверККТ.LIBFPTR_RT_SELL Тогда
		ТипЧека = 1;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_SELL_RETURN Тогда
		ТипЧека = 2;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_BUY Тогда
		ТипЧека = 4;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_BUY_RETURN Тогда
		ТипЧека = 5;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_SELL_CORRECTION Тогда
		ТипЧека = 7;
	ИначеЕсли ТипЧекаККТ = СерверККТ.LIBFPTR_RT_BUY_CORRECTION Тогда
		ТипЧека = 9;
	КонецеСли;	
	
	СтруктураДанных.Вставить("НомерЧека", НомерЧека);
	СтруктураДанных.Вставить("НомерДокумента", НомерДокумента);
	СтруктураДанных.Вставить("НомерСмены", НомерСмены);
	СтруктураДанных.Вставить("ТипЧека", ТипЧека);
	СтруктураДанных.Вставить("СуммаЧека", СуммаЧека);
	
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_FN_DATA_TYPE, СерверККТ.LIBFPTR_FNDT_LAST_DOCUMENT);
    СерверККТ.fnQueryData();	

    ФПД        = СерверККТ.getParamString(СерверККТ.LIBFPTR_PARAM_FISCAL_SIGN);
    ФД        = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_DOCUMENT_NUMBER);
    ДатаЧека  = СерверККТ.getParamDateTime(СерверККТ.LIBFPTR_PARAM_DATE_TIME);
	
	
	
	СтруктураДанных.Вставить("ФПД", ФПД);
	СтруктураДанных.Вставить("ФД", ФД);
	СтруктураДанных.Вставить("ДатаЧека", ДатаЧека);
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_STATUS);
	СерверККТ.queryData();
	РН_ККТ = СерверККТ.getParamString(СерверККТ.LIBFPTR_PARAM_SERIAL_NUMBER);;
	
	СтруктураДанных.Вставить("РН_ККТ", РН_ККТ);
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_FN_DATA_TYPE, СерверККТ.LIBFPTR_FNDT_FN_INFO);
    СерверККТ.fnQueryData();	
	ФН = СерверККТ.getParamString(СерверККТ.LIBFPTR_PARAM_SERIAL_NUMBER);;
	
	СтруктураДанных.Вставить("ФН", ФН);
	
	Возврат Истина;
КонецФункции	


Функция СменаОткрыта(СерверККТ, СменаОткрыта) Экспорт
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_STATUS);
	СерверККТ.queryData();
                
    СостояниеСмены  = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_SHIFT_STATE);
	Если СостояниеСмены = СерверККТ.LIBFPTR_SS_CLOSED Тогда   
		СменаОткрыта = Ложь;
	Иначе
		СменаОткрыта = Истина;
	КонецеСли;	
	Возврат Истина;
КонецФункции	


Функция СнятьXОтчет(СерверККТ, Кассир = "") Экспорт
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_REPORT_TYPE, СерверККТ.LIBFPTR_RT_X);
	
	Если СерверККТ.report() <> 0 тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции	

Функция СнятьZОтчет(СерверККТ, Кассир) Экспорт
	
	//СерверККТ.Mode = 3; 
	//// Режим отчетов без гашения Драйвер.Password = 30; 
	//Рез = СерверККТ.SetMode();	
	//
	//
	//Если ЗначениеЗаполнено(Кассир) Тогда
	//	СерверККТ.AttrNumber = 1021;
	//	СерверККТ.AttrValue = Кассир; // кассир
	//	If СерверККТ.WriteAttribute()<>0 then Возврат Ложь; КонецеСли;	
	//КонецЕсли;	
	//
	//СерверККТ.ReportType = 1;
	
	//Рез = СерверККТ.openReceipt();
	
	//ЛогинОператора(СерверККТ, КассаККМ);
	
	СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_REPORT_TYPE, СерверККТ.LIBFPTR_RT_CLOSE_SHIFT);
	
	Если СерверККТ.report() <> 0 тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ПолучитьФН(НомерФН) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	|	ксФискальныеНакопители.Ссылка КАК ФН
	|ИЗ
	|	Справочник.ксФискальныеНакопители КАК ксФискальныеНакопители
	|ГДЕ
	|	ксФискальныеНакопители.КодФН = &КодФН";
	Зап.УстановитьПараметр("КодФН", НомерФН);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.ФН;
	КонецеСли;
	
	Нов = Справочники.ксФискальныеНакопители.СоздатьЭлемент();
	Нов.Наименование = НомерФН;
	Нов.КодФН = НомерФН;
	Нов.Записать();
	
	Возврат Нов.Ссылка;
КонецФункции	

Функция ОткрытьСменуНаККМ(СерверККТ, ККМ, Кассир) Экспорт
	Рез = СерверККТ.openShift();
	
	
	//СерверККТ.setParam(СерверККТ.LIBFPTR_PARAM_DATA_TYPE, СерверККТ.LIBFPTR_DT_SHIFT_STATE);
	//СерверККТ.queryData();
	//
	// НомерСмены     = СерверККТ.getParamInt(СерверККТ.LIBFPTR_PARAM_SHIFT_NUMBER);
	
	
	Если Рез = 0 Тогда
		Возврат "СменаОткрытаУспешно";
	Иначе	
		Возврат "СменаНеОткрыта";
	КонецеСли;	
КонецФункции	

Процедура ЗаписьЛогаОшибкиККМ(КодОшибки, Описание, ПроизводительККМ, ЧекККМ, ОписаниеОшибкиККМ = "") Экспорт
	
	Элем = неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ксКодыОшибокККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ксКодыОшибокККМ КАК ксКодыОшибокККМ
	|ГДЕ
	|	ксКодыОшибокККМ.Владелец = &Владелец
	|	И ксКодыОшибокККМ.КодОшибкиККМ = &КодОшибкиККМ");
	Запрос.УстановитьПараметр("Владелец", ПроизводительККМ);
	Запрос.УстановитьПараметр("КодОшибкиККМ", КодОшибки);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Элем = Рез.Ссылка;			
	КонецЕсли;
	
	ТекВр = ТекущаяДата();
	Набор = РегистрыСведений.ксЛогПробитияЧеков.СоздатьНаборЗаписей();
	Набор.Отбор.ЧекККМ.Установить(ЧекККМ);
	Набор.Прочитать();
	НЗапись = Набор.Добавить();
	НЗапись.ЧекККМ = ЧекККМ;
	НЗапись.Период = ТекВр;
	НЗапись.КодОшибки = КодОшибки;
	НЗапись.ОписаниеОшибки = Описание;
	НЗапись.ОписаниеОшибкиККМ = ОписаниеОшибкиККМ;
	// МАС - 21.08.2017 - №1718 --->> 
	НЗапись.КассаККМ = ЧекККМ.КассаККМ;
	// <<--- МАС 	
	
	Если Элем <> Неопределено Тогда	
		НЗапись.ОшибкаККМ = Элем;		
	КонецЕсли;
	
	Набор.Записать();
	
КонецПроцедуры


Процедура ДобавитьУстройствоATOL(СерверККТ, КассаККМ)
	СерверККТ.setSingleSetting(СерверККТ.LIBFPTR_SETTING_MODEL, Строка(СерверККТ.LIBFPTR_MODEL_ATOL_77F));      //Строка(
	СерверККТ.setSingleSetting(СерверККТ.LIBFPTR_SETTING_PORT, Строка(СерверККТ.LIBFPTR_PORT_TCPIP));
	СерверККТ.setSingleSetting(СерверККТ.LIBFPTR_SETTING_IPADDRESS, СтрЗаменить(КассаККМ.АдресККМ, ":5555", ""));
	СерверККТ.setSingleSetting(СерверККТ.LIBFPTR_SETTING_IPPORT , "5555");
	СерверККТ.applySingleSettings();
КонецПроцедуры	

Функция ЛогинОператора(СерверККТ, КассаККМ)
	Кассир = ксРаботаСККМСервер.ПолучитьТекущегоКассираУТЛ(КассаККМ);
	
	СерверККТ.setParam(1021, Кассир.Наименование);
    СерверККТ.operatorLogin();	
КонецФункции	

