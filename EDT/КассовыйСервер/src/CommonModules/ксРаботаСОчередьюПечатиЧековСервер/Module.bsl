

// Регламент для конкретной ККМ
// КодККМ - строка
Процедура УправлениеПотоком(КодККМ) Экспорт
	
	ККМ = Справочники.ксКассыККМ.НайтиПоКоду(КодККМ);                   
	Если НЕ ЗначениеЗаполнено(ККМ) Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверка на активность ККМ
	Выб = РегистрыСведений.ксСтатусыСостоянияККМ.ПолучитьПоследнее(, Новый Структура("ККМ", ККМ));
	Орг = ККМ.Владелец;

	КоличествоЧековКПечати = 0;
	ОшибкиПечати = 0;
	ВсеОК = Истина;	  ЕстьЧеки = Ложь;
					
	Если Выб.СостояниеККМОчередьПечатиЧеков = Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна Тогда		
	
		//// Выберем первые подходящие 3 записи 
		//Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 3
		//                      |	ксЧекиВПечати.Организация КАК Организация,
		//                      |	ксЧекиВПечати.ЧекКПечати КАК ЧекКПечати,
		//                      |	ксЧекиВПечати.ККМ КАК ККМ,
		//                      |	ксЧекиВПечати.ЧекНапечатан КАК ЧекНапечатан,
		//                      |	ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) КАК ОшибкиПечатиЧека
		//                      |ИЗ
		//                      |	РегистрСведений.ксЧекиВПечати КАК ксЧекиВПечати
		//                      |ГДЕ
		//                      |	ксЧекиВПечати.Организация = &Организация
		//                      |	И (ксЧекиВПечати.ККМ ЕСТЬ NULL
		//                      |			ИЛИ ксЧекиВПечати.ККМ = ЗНАЧЕНИЕ(Справочник.ксКассыККМ.ПустаяСсылка))
		//                      |	И НЕ ксЧекиВПечати.ЧекНапечатан
		//                      |	И ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) < 3");	
		//Запрос.УстановитьПараметр("Организация", Орг);
		//ТЗЧекиКПечати = Запрос.Выполнить().Выгрузить();	
		
		// МАС - 21.08.2017 - №1718 --->> 
		ТекВр = ТекущаяДата();	
		Если Час(ТекВр) >= 3 Тогда
			НачалоВыборки = НачалоДня(ТекВр) + 3 * 60 * 60;
		Иначе
		    НачалоВыборки = НачалоДня(ТекВр) - 86400;
		КонецЕсли;
		// <<--- МАС		 
		
		// Выберем первые 10 записей            //на бою сейчас 30
		
		
		
		//НачалоВыборки = Дата("20180117200450");
		КоличествоЧековКВыборке = Константы.ксКоличествоЧековВВыборкеПотокаККМ.Получить();
		Если КоличествоЧековКВыборке = 0 Тогда
			КоличествоЧековКВыборке = 20;
		Конецесли;	
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ <<КоличествоЧековКВыборке>>
		                      |	ксЧекиВПечати.Организация КАК Организация,
		                      |	ксЧекиВПечати.ЧекКПечати КАК ЧекКПечати,
		                      |	ксЧекиВПечати.ККМ КАК ККМ,
		                      |	ксЧекиВПечати.ЧекНапечатан КАК ЧекНапечатан,
		                      |	ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) КАК ОшибкиПечатиЧека
		                      |ИЗ
		                      |	РегистрСведений.ксЧекиВПечати КАК ксЧекиВПечати
		                      |ГДЕ
		                      |	НЕ ксЧекиВПечати.ЧекНапечатан
		                      |	И ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) < 3
		                      |	И ксЧекиВПечати.ККМ = &ККМ
		                      |	И ксЧекиВПечати.ЧекКПечати.Дата >= &НачалоВыборки");	
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<<КоличествоЧековКВыборке>>", Формат(КоличествоЧековКВыборке, "ЧГ="));
		
		Запрос.УстановитьПараметр("ККМ", ККМ);
		// МАС - 21.08.2017 - №1718 --->>
		Запрос.УстановитьПараметр("НачалоВыборки", НачалоВыборки);
		// <<--- МАС
		ТЗЧекиКПечати = Запрос.Выполнить().Выгрузить();
		
		Если ТЗЧекиКПечати.Количество() Тогда
			
			ЕстьЧеки = Истина;
			
			СерверККМ = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(ККМ);    
			//СерверККМ = Истина; // тест
			
			Если СерверККМ = Ложь Тогда						
				ВсеОК = Ложь;			
				// отправляем сообщение	
				// МАС - 21.08.2017 - №1718 --->> 
				Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.ОшибкаПодключенияКККМ);	
				//Мас = Новый Массив;
				//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
				//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
				// <<--- МАС
				ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Ошибка подключения к ККМ: " + ККМ.Наименование, "Ошибка подключения к ККМ");					
			Иначе	
				//МасКУдалению = Новый Массив;
				//
				//// Устанавливаем ККМ для выбранных записей			
				//Для каждого Стр Из ТЗЧекиКПечати Цикл			
				//	МенЗап = РегистрыСведений.ксЧекиВПечати.СоздатьМенеджерЗаписи();	
				//	МенЗап.Организация = Орг;
				//	МенЗап.ЧекКПечати = Стр.ЧекКПечати;
				//	МенЗап.Прочитать();
				//	
				//	Если НЕ ЗначениеЗаполнено(МенЗап.ККМ) Тогда		
				//		МенЗап.ККМ = ККМ;
				//		МенЗап.Записать();	
				//	Иначе
				//		МасКУдалению.Добавить(Стр);
				//	КонецЕсли;					
				//КонецЦикла;
				
				
				//Для каждого СтрУд Из МасКУдалению Цикл			
				//	ТЗЧекиКПечати.Удалить(СтрУд);		
				//КонецЦикла;
				
				
				// Печать чеков
				Для каждого Стр Из ТЗЧекиКПечати Цикл
					 
					Результат = ПечатьЧека(Стр.ЧекКПечати, ККМ, СерверККМ);	
					//Результат = Истина;  // тест
					
					КоличествоЧековКПечати = КоличествоЧековКПечати + 1; 
					
					// Установка признака "Чек напечатан"
					Если Результат <> Неопределено Тогда				
						
						МенЗап = РегистрыСведений.ксЧекиВПечати.СоздатьМенеджерЗаписи();	
						МенЗап.Организация = Орг;
						МенЗап.ЧекКПечати = Стр.ЧекКПечати;
						МенЗап.Прочитать();
						Если Не МенЗап.Выбран() Тогда
						    МенЗап.Организация = Орг;
							МенЗап.ЧекКПечати = Стр.ЧекКПечати;
							МенЗап.ККМ = ККМ			
						КонецЕсли;
						МенЗап.ДатаПечатиЧека = ТекущаяДата();
						МенЗап.ЧекНапечатан = Истина;
						МенЗап.Записать();	
						
					Иначе	
						
						МенЗап = РегистрыСведений.ксЧекиВПечати.СоздатьМенеджерЗаписи();	
						МенЗап.Организация = Орг;
						МенЗап.ЧекКПечати = Стр.ЧекКПечати;
						МенЗап.Прочитать();
						МенЗап.ККМ = Справочники.ксКассыККМ.ПустаяСсылка();    // снимаем ККМ для текущего чека
						МенЗап.ОшибкиПечатиЧека = Стр.ОшибкиПечатиЧека + 1;   // обновляем количество ошибок при печати чека
						МенЗап.Записать();
						
						ОшибкиПечати = ОшибкиПечати + 1;		
						
						// отправляем сообщение	
						// МАС - 21.08.2017 - №1718 --->> 
						Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.ОшибкаПечатиЧека);
						//Мас = Новый Массив;
						//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
						//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");		
						// <<--- МАС
						ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Ошибка печати чека: " + Стр.ЧекКПечати, "Ошибка печати чека");							
						
					КонецЕсли;
				
				КонецЦикла;	
				
				
				ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(СерверККМ, ККМ);	// тест
			КонецЕсли;
			
			

		КонецЕсли;	
		
		
		
		
		Если ВсеОК И ЕстьЧеки Тогда	
			// Фиксируем ошибку ККМ, если количество чеков больше 1, и все они не напечатались.
			Если КоличествоЧековКПечати > 1 И КоличествоЧековКПечати = ОшибкиПечати Тогда
				
				// пишем в РС ксСтатусыСостоянияККМ
				ДобавитьЗаписьВРСксСтатусыСостоянияККМ(ККМ, Перечисления.ксСостоянияККМОчередиПечатиЧеков.ОшибкаПечати);				
							
				// отправляем сообщение
				// МАС - 21.08.2017 - №1718 --->> 
				Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.ОшибкаККМ);
				//Мас = Новый Массив;
				//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
				//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");		
				// <<--- МАС
				ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Ошибка ККМ: " + ККМ.Наименование, "Ошибка ККМ");					
			КонецЕсли;
			
			//ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(СерверККМ, ККМ);	// тест			
		КонецЕсли;				 
       
	КонецЕсли;	
				

КонецПроцедуры



Функция СоздатьЧек(ЧекКПечати, ККМ)
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксЧекККМ.Ссылка КАК Чек
	            |ИЗ
	            |	Документ.ксЧекККМ КАК ксЧекККМ
	            |ГДЕ
	            |	ксЧекККМ.ЧекКПечати.Ссылка = &ЧекКПечати";
	Зап.УстановитьПараметр("ЧекКПечати", ЧекКПечати);
	
	Выб = Зап.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Об = Выб.Чек.ПолучитьОбъект();
		Об.Дата = ТекущаяДата();
		Об.КассаККМ = ККМ;
		Возврат Об;
	КонецеСли;	
	
	ЗапЧекКПечати = Новый Запрос;
	
	ЗапЧекКПечати.Текст = "ВЫБРАТЬ
	                      |	ксЧекКПечати.Ссылка КАК ЧекКПечати,
	                      |	ксЧекКПечати.Заказ КАК Заказ,
	                      |	ксЧекКПечати.Организация КАК Организация,
	                      |	ксЧекКПечати.СтоимостьДоставки КАК СтоимостьДоставки,
	                      |	ксЧекКПечати.СтавкаНДСПоДоставке КАК СтавкаНДСПоДоставке,
	                      |	ксЧекКПечати.ТипОплаты КАК ТипОплаты,
	                      |	ксЧекКПечати.СуммаПредоплаты КАК СуммаПредоплаты,
	                      |	ксЧекКПечати.Товары.(
	                      |		Номенклатура КАК Номенклатура,
	                      |		Количество КАК Количество,
	                      |		Цена КАК Цена,
	                      |		КодМаркировки КАК КодМаркировки,
	                      |		Поставщик КАК Поставщик,
	                      |		ИННПоставщика КАК ИННПоставщика,
	                      |		СтавкаНДС КАК СтавкаНДС,
						  |		ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
	                      |	) КАК Товары,
	                      |	ксЧекКПечати.ТипКассовогоЧека КАК ТипКассовогоЧека,
	                      |	ксЧекКПечати.ИННПоставщикаДоставки КАК ИННПоставщикаДоставки
	                      |ИЗ
	                      |	Документ.ксЧекКПечати КАК ксЧекКПечати
	                      |ГДЕ
	                      |	ксЧекКПечати.Ссылка = &ЧекКПечати";
	ЗапЧекКПечати.УстановитьПараметр("ЧекКПечати", ЧекКПечати);
	
	Выб = ЗапЧекКПечати.Выполнить().Выбрать();
	Выб.Следующий();
	
	Чек = Документы.ксЧекККМ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Чек, Выб);
	
	Товары = Выб.Товары.Выбрать();
	Пока Товары.Следующий() Цикл
		Нов = Чек.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Нов, Товары);
	КонецЦикла;	
	
	Чек.КассаККМ = ККМ;
	Чек.Дата = ТекущаяДата();
	Чек.Кассир = ксРаботаСККМСервер.ПолучитьТекущегоКассира(ККМ);
	Чек.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат Чек;
	
КонецФункции

// Процедура печати чека
Функция ПечатьЧека(ЧекКПечати, ККМ, СерверККМ, СоздатьДокумент = Ложь) Экспорт
	
	// создание чека
	Чек = СоздатьЧек(ЧекКПечати, ККМ);
		
	//печать чека на ККМ	
	Ответ = Чек.ПровестиИНапечататьЧек(СерверККМ);	
	//Ответ = ПровестиИНапечататьЧек();  // тест
	
	Если Ответ.Результат Тогда
		Возврат Чек;
	Иначе
		Возврат Неопределено;
	КонецеСли;	
	
КонецФункции


// Регламент для контроля работоспособности ККМ
Процедура РегламентПроверкаККМ() Экспорт
	
	ТекВр = ТекущаяДата() - 50;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ксКассыККМ.Ссылка КАК ККМ,
	                      |	ксКассыККМ.Владелец КАК Организация,
	                      |	ЕСТЬNULL(ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков, ЗНАЧЕНИЕ(Перечисление.ксСостоянияККМОчередиПечатиЧеков.ПустаяСсылка)) КАК СостояниеККМ,
	                      |	ЕСТЬNULL(ксСтатусыСостоянияККМСрезПоследних.ОшибкиПечатиККМ, 0) КАК ОшибкиПечатиККМ
	                      |ИЗ
	                      |	Справочник.ксКассыККМ КАК ксКассыККМ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ксСтатусыСостоянияККМ.СрезПоследних(, ) КАК ксСтатусыСостоянияККМСрезПоследних
	                      |		ПО ксКассыККМ.Ссылка = ксСтатусыСостоянияККМСрезПоследних.ККМ
	                      |ГДЕ
	                      |	ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков <> ЗНАЧЕНИЕ(Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМВыключена)
	                      |	И ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков <> ЗНАЧЕНИЕ(Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМЗахваченаКассиром)");
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл	
		
		Если Рез.СостояниеККМ = Перечисления.ксСостоянияККМОчередиПечатиЧеков.ОшибкаПечати И Рез.ОшибкиПечатиККМ > 1 Тогда
			Продолжить;		
		КонецЕсли;
		
		Результат = ККМДоступна(Рез.ККМ);
		Если Результат Тогда
			Если Рез.СостояниеККМ <> Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна Тогда				
				
				ДобавитьЗаписьВРСксСтатусыСостоянияККМ(Рез.ККМ, Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна);		
				
				//// отправляем сообщение
				//Попытка
				//	Мас = Новый Массив;
				//	Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
				//	Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");			
				//	ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "ККМ восстановлена (" + Рез.ККМ + ")", "ККМ восстановлена (" + Рез.ККМ + " " + Формат(ТекущаяДата(), "ДЛФ=D") + ")");
				//Исключение		
				//КонецПопытки;		
			КонецЕсли;
		Иначе	
			Если Рез.СостояниеККМ <> Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМЗанята Тогда					
				
				ДобавитьЗаписьВРСксСтатусыСостоянияККМ(Рез.ККМ, Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМЗанята);
				
				//// МАС - 11.07.2017 - №1314 - снимем висящие на данной ККМ чеки --->> 
				////////////////ЗапросККМ = Новый Запрос("ВЫБРАТЬ
				////////////////                         |	ксЧекиВПечати.Организация КАК Организация,
				////////////////                         |	ксЧекиВПечати.ЧекКПечати КАК ЧекКПечати,
				////////////////                         |	ксЧекиВПечати.ККМ КАК ККМ,
				////////////////                         |	ксЧекиВПечати.ЧекНапечатан КАК ЧекНапечатан,
				////////////////                         |	ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) КАК ОшибкиПечатиЧека
				////////////////                         |ИЗ
				////////////////                         |	РегистрСведений.ксЧекиВПечати КАК ксЧекиВПечати
				////////////////                         |ГДЕ
				////////////////                         |	НЕ ксЧекиВПечати.ЧекНапечатан
				////////////////                         |	И ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) < 3
				////////////////                         |	И ксЧекиВПечати.ККМ = &ККМ
				////////////////                         |	И ксЧекиВПечати.ЧекКПечати.Дата < &Дата");
				////////////////ЗапросККМ.УстановитьПараметр("ККМ", Рез.ККМ);
				////////////////ЗапросККМ.УстановитьПараметр("Дата", ТекВр);
				////////////////РезККМ = ЗапросККМ.Выполнить().Выбрать();
				////////////////Пока РезККМ.Следующий() Цикл		
				////////////////	МенЗап = РегистрыСведений.ксЧекиВПечати.СоздатьМенеджерЗаписи();	
				////////////////	МенЗап.Организация = РезККМ.Организация;
				////////////////	МенЗап.ЧекКПечати = РезККМ.ЧекКПечати;
				////////////////	МенЗап.Прочитать();			
				////////////////	МенЗап.ККМ = Справочники.ксКассыККМ.ПустаяСсылка();
				////////////////	МенЗап.Записать();											
				////////////////КонецЦикла;
				
				//ЗапросККМ = Новый Запрос("ВЫБРАТЬ
				//                         |	ксЧекиВПечати.Организация КАК Организация,
				//                         |	ксЧекиВПечати.ЧекКПечати КАК ЧекКПечати,
				//                         |	ксЧекиВПечати.ККМ КАК ККМ,
				//                         |	ксЧекиВПечати.ЧекНапечатан КАК ЧекНапечатан,
				//                         |	ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) КАК ОшибкиПечатиЧека
				//                         |ИЗ
				//                         |	РегистрСведений.ксЧекиВПечати КАК ксЧекиВПечати
				//                         |ГДЕ
				//                         |	НЕ ксЧекиВПечати.ЧекНапечатан
				//                         |	И ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) < 3
				//                         |	И ксЧекиВПечати.ККМ = &ККМ");
				//ЗапросККМ.УстановитьПараметр("ККМ", Рез.ККМ);
				//РезККМ = ЗапросККМ.Выполнить().Выбрать();
				//Пока РезККМ.Следующий() Цикл		
				//	МенЗап = РегистрыСведений.ксЧекиВПечати.СоздатьМенеджерЗаписи();	
				//	МенЗап.Организация = РезККМ.Организация;
				//	МенЗап.ЧекКПечати = РезККМ.ЧекКПечати;
				//	МенЗап.Прочитать();			
				//	МенЗап.ККМ = Справочники.ксКассыККМ.ПустаяСсылка();
				//	МенЗап.Записать();											
				//КонецЦикла;
				//// <<--- МАС 
				 
				
				
				//// отправляем сообщение
				//Попытка
				//	Мас = Новый Массив;
				//	Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
				//	Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");			
				//	ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "ККМ недоступна (" + Рез.ККМ + ")", "ККМ недоступна (" + Рез.ККМ + " " + Формат(ТекущаяДата(), "ДЛФ=D") + ")");
				//Исключение		
				//КонецПопытки;
			КонецЕсли;				
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры


Функция ККМДоступна(ККМ) Экспорт
	
	//Возврат ИСТИНА;    // тест	
	
	//Рез = ККМ_ФЗ_54.ПроверкаКККМ(ККМ);
	Рез = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(ККМ);
	Если Рез = Ложь Тогда
		//повторная проверка
		Рез = ККМ_ФЗ_54СерверПереопределяемый.ПодключитьсяКККМ(ККМ);
		Если Рез = Ложь Тогда
			//повторная проверка
		//	Попытка
		//	ЗаписьЖурналаРегистрации("ККМ." + ККМ.Код,,,Рез);
		//Исключение
		//	
		//	КонецПопытки;
			Возврат Ложь;
		Иначе
			ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(Рез, ККМ);
			Возврат Истина;
		КонецеСли;	
	Иначе
		ККМ_ФЗ_54СерверПереопределяемый.ОтключитьсяОтККМ(Рез, ККМ);
		Возврат Истина;
	КонецеСли;	
КонецФункции // ()


// чек - ксЧекКПечати
Процедура ПоставитьЧекВОчередь(Чек) Экспорт
	
		
	Набор_ксЧекиВПечати = РегистрыСведений.ксЧекиВПечати.СоздатьНаборЗаписей();
	Набор_ксЧекиВПечати.Отбор.ЧекКПечати.Установить(Чек.Ссылка);
	Набор_ксЧекиВПечати.Отбор.Организация.Установить(Чек.Организация);
	Набор_ксЧекиВПечати.Прочитать();
	
	Если Набор_ксЧекиВПечати.Количество() Тогда
		
		//Набор_ксЧекиВПечати[0].ЧекКПечати = Чек;
		//Набор_ксЧекиВПечати[0].Организация = Чек.Организация;
		//Набор_ксЧекиВПечати[0].
	Иначе
		НЗапись = Набор_ксЧекиВПечати.Добавить();
		НЗапись.ЧекКПечати = Чек.Ссылка;
		НЗапись.Организация = Чек.Организация;
		НЗапись.ДатаДобавленияДанных = ТекущаяДата();
		Набор_ксЧекиВПечати.Записать();			
	КонецЕсли;
	
	
КонецПроцедуры // ()


Процедура ДобавитьЗаписьВРСксСтатусыСостоянияККМ(ККМ, Состояние, СтатусУстановленWEBСервисом = Ложь) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ксСтатусыСостоянияККМСрезПоследних.ККМ КАК ККМ,
	                      |	ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков КАК СостояниеККМОчередьПечатиЧеков,
	                      |	ксСтатусыСостоянияККМСрезПоследних.ОшибкиПечатиККМ КАК ОшибкиПечатиККМ
	                      |ИЗ
	                      |	РегистрСведений.ксСтатусыСостоянияККМ.СрезПоследних(, ККМ = &ККМ) КАК ксСтатусыСостоянияККМСрезПоследних");
	Запрос.УстановитьПараметр("ККМ", ККМ);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		
		ОшибкиПечатиККМ = ?(Состояние = Перечисления.ксСостоянияККМОчередиПечатиЧеков.ОшибкаПечати, Рез.ОшибкиПечатиККМ + 1, Рез.ОшибкиПечатиККМ);
		
		ТекВр = ТекущаяДата();
		Набор = РегистрыСведений.ксСтатусыСостоянияККМ.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(ТекВр);
		Набор.Отбор.ККМ.Установить(ККМ);
		Набор.Прочитать();
		
		НЗапись = Набор.Добавить();		
		НЗапись.ККМ = ККМ;
		НЗапись.Период = ТекВр;
		НЗапись.СостояниеККМОчередьПечатиЧеков = Состояние;
		НЗапись.ОшибкиПечатиККМ = ОшибкиПечатиККМ;
		НЗапись.СтатусУстановленWEBСервисом = СтатусУстановленWEBСервисом;
		Набор.Записать();	
	
	КонецЕсли;
	

КонецПроцедуры // ()

Функция ПровестиИНапечататьЧек()

	ТекВр = ТекущаяДата();
	ВремяЧ = ТекВр + 5;
	
	Пока ВремяЧ > ТекВр Цикл	
		ТекВр = ТекущаяДата();			
	КонецЦикла;
	
	Ответ = Новый Структура();
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ХуйЗнаетКакоеЧисло = ГСЧ.СлучайноеЧисло(1, 10);
	
	Если ХуйЗнаетКакоеЧисло > 6 Тогда	
		Ответ.Вставить("Результат", Ложь);		
	Иначе	
		Ответ.Вставить("Результат", Истина);		
	КонецЕсли;
	
	
	Возврат Ответ;

КонецФункции // ()

Функция МожноСменитьСтатусККМЧерезWEBСервис(ККМ, Статус) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ксСтатусыСостоянияККМСрезПоследних.ККМ КАК ККМ,
	                      |	ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков КАК СостояниеККМОчередьПечатиЧеков,
	                      |	ксСтатусыСостоянияККМСрезПоследних.ОшибкиПечатиККМ КАК ОшибкиПечатиККМ
	                      |ИЗ
	                      |	РегистрСведений.ксСтатусыСостоянияККМ.СрезПоследних(, ККМ = &ККМ) КАК ксСтатусыСостоянияККМСрезПоследних");
	Запрос.УстановитьПараметр("ККМ", ККМ);
	Выб = Запрос.Выполнить().Выбрать();
	
	Струк = Новый Структура;
	Струк.Вставить("МожноСменитьСтатус", Истина);
	Струк.Вставить("ПричинаНевозможностиСменыСтатуса", "");
	
	Если Выб.Следующий() Тогда
		Если (Статус = Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМЗахваченаКассиром И (Выб.СостояниеККМОчередьПечатиЧеков <> Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна И Выб.СостояниеККМОчередьПечатиЧеков <> Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМЗахваченаКассиром)) 
			Или (Статус = Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна И (Выб.СостояниеККМОчередьПечатиЧеков <> Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМЗахваченаКассиром И Выб.СостояниеККМОчередьПечатиЧеков <> Перечисления.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна)) Тогда
			Струк.МожноСменитьСтатус = Ложь;
			Струк.ПричинаНевозможностиСменыСтатуса = "Не подходящий текущий статус ККМ! Текущий статус: " + Строка(Выб.СостояниеККМОчередьПечатиЧеков) + ", запрашиваемый статус " + Строка(Статус);
			Возврат Струк;
		Иначе
			Струк.МожноСменитьСтатус = Истина;
			Возврат Струк;			
		КонецЕсли;	
	Иначе
		Струк.МожноСменитьСтатус = Ложь;
		Струк.ПричинаНевозможностиСменыСтатуса = "Не определен текущий статус ККМ!";
		Возврат Струк;
	КонецЕсли;	
	
КонецФункции	


// регламент - управляющий поток по Организации
Процедура УправляющийПоток(КодОрганизации) Экспорт
	
	Организация = Справочники.ксОрганизации.НайтиПоКоду(КодОрганизации);
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;	
	КонецЕсли;
	
	// получим список доступных ККМ по Организации
	ЗапросККМ = Новый Запрос("ВЫБРАТЬ
	                         |	ксСтатусыСостоянияККМСрезПоследних.ККМ КАК ККМ,
	                         |	ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков КАК СостояниеККМОчередьПечатиЧеков,
	                         |	ксСтатусыСостоянияККМСрезПоследних.ОшибкиПечатиККМ КАК ОшибкиПечатиККМ,
	                         |	ксСтатусыСостоянияККМСрезПоследних.СтатусУстановленWEBСервисом КАК СтатусУстановленWEBСервисом,
	                         |	ксСтатусыСостоянияККМСрезПоследних.Период КАК Период
	                         |ПОМЕСТИТЬ ВТ
	                         |ИЗ
	                         |	РегистрСведений.ксСтатусыСостоянияККМ.СрезПоследних(, ) КАК ксСтатусыСостоянияККМСрезПоследних
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ВТ.ККМ КАК ККМ
	                         |ИЗ
	                         |	ВТ КАК ВТ
	                         |ГДЕ
	                         |	ВТ.ККМ.Владелец = &Организация
	                         |	И (ВТ.СостояниеККМОчередьПечатиЧеков = ЗНАЧЕНИЕ(Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна)
	                         |			ИЛИ ВТ.СостояниеККМОчередьПечатиЧеков = ЗНАЧЕНИЕ(Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМЗанята))
	                         |
	                         |УПОРЯДОЧИТЬ ПО
	                         |	ВТ.ККМ.Код");
	ЗапросККМ.УстановитьПараметр("Организация", Организация);
	ТЗ_ККМ = ЗапросККМ.Выполнить().Выгрузить();
	
	
	Если ТЗ_ККМ.Количество() Тогда
			
		// выберем чеки к печати без назначенной ККМ
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ксЧекиВПечати.Организация КАК Организация,
		                      |	ксЧекиВПечати.ЧекКПечати КАК ЧекКПечати,
		                      |	ксЧекиВПечати.ККМ КАК ККМ,
		                      |	ксЧекиВПечати.ЧекНапечатан КАК ЧекНапечатан,
		                      |	ксЧекиВПечати.ОшибкиПечатиЧека КАК ОшибкиПечатиЧека
		                      |ИЗ
		                      |	РегистрСведений.ксЧекиВПечати КАК ксЧекиВПечати
		                      |ГДЕ
		                      |	ксЧекиВПечати.Организация = &Организация
		                      |	И ксЧекиВПечати.ЧекНапечатан = ЛОЖЬ
		                      |	И ксЧекиВПечати.ОшибкиПечатиЧека < 3
		                      |	И (ксЧекиВПечати.ККМ ЕСТЬ NULL
		                      |			ИЛИ ксЧекиВПечати.ККМ = ЗНАЧЕНИЕ(Справочник.ксКассыККМ.ПустаяСсылка))
		                      |	И ксЧекиВПечати.ЧекКПечати.Дата >= &ДатаСреза");
		Запрос.УстановитьПараметр("Организация", Организация);
		ДатаСреза = ТекущаяДата() - 3 * 86400;
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);

		Рез = Запрос.Выполнить().Выбрать();
		
		ВсегоККМ = ТЗ_ККМ.Количество();
		Ном = 0;
		
		// Устанавливаем ККМ для выбранных записей
		Пока Рез.Следующий() Цикл				
			МенЗап = РегистрыСведений.ксЧекиВПечати.СоздатьМенеджерЗаписи();	
			МенЗап.Организация = Организация;
			МенЗап.ЧекКПечати = Рез.ЧекКПечати;
			МенЗап.Прочитать();			
			МенЗап.ККМ = ТЗ_ККМ[Ном].ККМ;
			МенЗап.Записать();	
			
			Если Ном < ВсегоККМ - 1 Тогда			
				Ном = Ном + 1;			
			Иначе		
				Ном = 0;				
			КонецЕсли;
			
		КонецЦикла;		
		
	Иначе
		
		// отправляем сообщение
		// МАС - 21.08.2017 - №1718 --->> 
		Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.НетДоступныхККМПоОрганизации);
		//Мас = Новый Массив;
		//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
		//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		//Мас.Добавить("sergey.andrienko@strizh-logistic.ru");
		//Мас.Добавить("kassir@strizh-logistic.ru");	
		// <<--- МАС
		ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Нет доступных ККМ по организации " + Организация, "Нет доступных ККМ по организации");		
		
	КонецЕсли;
	
		

КонецПроцедуры

// Регламент на несозданные чеки ККМ
Процедура ПроверкаНаНесозданныеЧеки() Экспорт
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ксЧекККМ.Ссылка КАК ЧекККМ,
	                      |	ксЧекКПечати.Ссылка КАК ЧекКПечати
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.ксЧекКПечати КАК ксЧекКПечати
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ксЧекККМ КАК ксЧекККМ
	                      |		ПО ксЧекКПечати.Ссылка = ксЧекККМ.ЧекКПечати
	                      |ГДЕ
	                      |	ксЧекКПечати.Дата >= &Дата
	                      |	И ксЧекКПечати.ПометкаУдаления = ЛОЖЬ
	                      |	И ксЧекККМ.Дата < &МоментВремени
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.ЧекККМ КАК ЧекККМ,
	                      |	ВТ.ЧекКПечати КАК ЧекКПечати
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |ГДЕ
	                      |	(ВТ.ЧекККМ ЕСТЬ NULL
	                      |			ИЛИ ВТ.ЧекККМ = ЗНАЧЕНИЕ(Документ.ксЧекККМ.ПустаяСсылка))");
	Момент = ТекущаяДата() - 10;
	Запрос.УстановитьПараметр("Дата", НачаЛоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("МоментВремени", Момент);
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Если РезТЗ.Количество() Тогда
		
		СписокЧеков = "";		
		Для каждого Ст Из РезТЗ Цикл		
			СписокЧеков = СписокЧеков + Ст.ЧекКПечати + Символы.ПС;			
		КонецЦикла;
		
		// отправляем сообщение
		// МАС - 21.08.2017 - №1718 --->> 
		Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.НеСоздалисьЧекиККМ);
		//Мас = Новый Массив;
		//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
		//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");
		// <<--- МАС
		ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "Не создались чеки: " + Символы.ПС + СписокЧеков, "Внимание!! Не создались чеки ККМ");		
		
	КонецЕсли;
	

КонецПроцедуры

// Регламент проверки на получасовую недоступность ККМ
Процедура ПроверкаДлительнойНедоступностиККМ() Экспорт

	ТекВр = ТекущаяДата();
	ВремяЧ = ТекВр - 30 * 60;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ксСтатусыСостоянияККМСрезПоследних.Период КАК Период,
	                      |	ксСтатусыСостоянияККМСрезПоследних.ККМ КАК ККМ,
	                      |	ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков КАК СостояниеККМОчередьПечатиЧеков,
	                      |	ксСтатусыСостоянияККМСрезПоследних.ОшибкиПечатиККМ КАК ОшибкиПечатиККМ,
	                      |	ксСтатусыСостоянияККМСрезПоследних.СтатусУстановленWEBСервисом КАК СтатусУстановленWEBСервисом
	                      |ИЗ
	                      |	РегистрСведений.ксСтатусыСостоянияККМ.СрезПоследних КАК ксСтатусыСостоянияККМСрезПоследних");
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл		
		Если Рез.СостояниеККМОчередьПечатиЧеков <> ПредопределенноеЗначение("Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМВыключена") 
			И Рез.СостояниеККМОчередьПечатиЧеков <> ПредопределенноеЗначение("Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна") 
			И Рез.СостояниеККМОчередьПечатиЧеков <> ПредопределенноеЗначение("Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМЗахваченаКассиром") Тогда
		
			Если Рез.Период <= ВремяЧ Тогда
			
				// отправляем сообщение	
				// МАС - 21.08.2017 - №1718 --->> 
				Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.ККМНедоступнаПродолжительноеВремя);
				//Мас = Новый Массив;
				//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
				//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");	
				// <<--- МАС
				ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, "ККМ недоступна: " + Рез.ККМ + Символы.ПС + "Текущий статус: " + Рез.СостояниеККМОчередьПечатиЧеков + " (установлен: " + Формат(Рез.Период, "ДЛФ=D") + ")", "ККМ недоступна продолжительное время (" + Рез.ККМ + " " + Формат(ТекущаяДата(), "ДЛФ=DT") + ")");
				
				
				// МАС - 01.08.2017 - №1546 --->> 
				// устанавливаем статус ККМ в Ошибку +1
				ДобавитьЗаписьВРСксСтатусыСостоянияККМ(Рез.ККМ, Перечисления.ксСостоянияККМОчередиПечатиЧеков.ОшибкаПечати);
				
				
				// снимем висящие на данной ККМ чеки
				ЗапросККМ = Новый Запрос("ВЫБРАТЬ
				                         |	ксЧекиВПечати.Организация КАК Организация,
				                         |	ксЧекиВПечати.ЧекКПечати КАК ЧекКПечати,
				                         |	ксЧекиВПечати.ККМ КАК ККМ,
				                         |	ксЧекиВПечати.ЧекНапечатан КАК ЧекНапечатан,
				                         |	ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) КАК ОшибкиПечатиЧека
				                         |ИЗ
				                         |	РегистрСведений.ксЧекиВПечати КАК ксЧекиВПечати
				                         |ГДЕ
				                         |	НЕ ксЧекиВПечати.ЧекНапечатан
				                         |	И ЕСТЬNULL(ксЧекиВПечати.ОшибкиПечатиЧека, 0) < 3
				                         |	И ксЧекиВПечати.ККМ = &ККМ");
				ЗапросККМ.УстановитьПараметр("ККМ", Рез.ККМ);
				РезККМ = ЗапросККМ.Выполнить().Выбрать();
				Пока РезККМ.Следующий() Цикл		
					МенЗап = РегистрыСведений.ксЧекиВПечати.СоздатьМенеджерЗаписи();	
					МенЗап.Организация = РезККМ.Организация;
					МенЗап.ЧекКПечати = РезККМ.ЧекКПечати;
					МенЗап.Прочитать();			
					МенЗап.ККМ = Справочники.ксКассыККМ.ПустаяСсылка();
					МенЗап.Записать();											
				КонецЦикла;
				// <<--- МАС 
				
			КонецЕсли;					
			
		КонецЕсли;	
	КонецЦикла;
	

КонецПроцедуры

// Регламент проверяет ККМ на доступность и обнуляет ошибки, если ККМ окончательно выпала в ошибку
Процедура ксОбнулениеОшибокККМ() Экспорт
	
	ТекВр = ТекущаяДата();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ксСтатусыСостоянияККМСрезПоследних.Период КАК Период,
	                      |	ксСтатусыСостоянияККМСрезПоследних.ККМ КАК ККМ,
	                      |	ксСтатусыСостоянияККМСрезПоследних.СостояниеККМОчередьПечатиЧеков КАК СостояниеККМОчередьПечатиЧеков,
	                      |	ксСтатусыСостоянияККМСрезПоследних.ОшибкиПечатиККМ КАК ОшибкиПечатиККМ,
	                      |	ксСтатусыСостоянияККМСрезПоследних.СтатусУстановленWEBСервисом КАК СтатусУстановленWEBСервисом
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрСведений.ксСтатусыСостоянияККМ.СрезПоследних КАК ксСтатусыСостоянияККМСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Период КАК Период,
	                      |	ВТ.ККМ КАК ККМ,
	                      |	ВТ.СостояниеККМОчередьПечатиЧеков КАК СостояниеККМОчередьПечатиЧеков,
	                      |	ВТ.ОшибкиПечатиККМ КАК ОшибкиПечатиККМ,
	                      |	ВТ.СтатусУстановленWEBСервисом КАК СтатусУстановленWEBСервисом
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |ГДЕ
	                      |	ВТ.СостояниеККМОчередьПечатиЧеков = ЗНАЧЕНИЕ(Перечисление.ксСостоянияККМОчередиПечатиЧеков.ОшибкаПечати)
	                      |	И ВТ.ОшибкиПечатиККМ >= 2");
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		
		Если ККМДоступна(Рез.ККМ) Тогда // возвращаем в строй
						
			Набор = РегистрыСведений.ксСтатусыСостоянияККМ.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(ТекВр);
			Набор.Отбор.ККМ.Установить(Рез.ККМ);
			Набор.Прочитать();
			
			НЗапись = Набор.Добавить();		
			НЗапись.ККМ = Рез.ККМ;
			НЗапись.Период = ТекВр;
			НЗапись.СостояниеККМОчередьПечатиЧеков = ПредопределенноеЗначение("Перечисление.ксСостоянияККМОчередиПечатиЧеков.ККМСвободна");
			НЗапись.ОшибкиПечатиККМ = 0;
			НЗапись.СтатусУстановленWEBСервисом = Ложь;
			Набор.Записать();			
		
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Регламент проверки непробитых на данный момент чеков
Процедура ксПроверкаКоличестваНепробитыхЧеков() Экспорт
	
	КоличествоНепробитыхЧеков = 0;
	ТекВр = ТекущаяДата();	
	
	Если Час(ТекВр) >= 3 Тогда
		НачалоВыборки = НачалоДня(ТекВр) + 3 * 60 * 60;
	Иначе
	    НачалоВыборки = НачалоДня(ТекВр) - 86400;
	КонецЕсли;
		
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ксЧекиВПечати.ЧекКПечати) КАК ЧекКПечати
	                      |ИЗ
	                      |	РегистрСведений.ксЧекиВПечати КАК ксЧекиВПечати
	                      |ГДЕ
	                      |	ксЧекиВПечати.ЧекКПечати.Дата >= &НачалоВыборки
	                      |	И ксЧекиВПечати.ЧекНапечатан = ЛОЖЬ");
	Запрос.УстановитьПараметр("НачалоВыборки", НачалоВыборки);
	Рез = Запрос.Выполнить().Выбрать();

	Если Рез.Следующий() Тогда	
		КоличествоНепробитыхЧеков = Рез.ЧекКПечати;		
	КонецЕсли;
	
	// отправляем сообщение
	Если КоличествоНепробитыхЧеков Тогда	
		Текст = "Ошибка пробития чеков - не пробито " + КоличествоНепробитыхЧеков + " чеков!";	
		// МАС - 21.08.2017 - №1718 --->> 
		Мас = ксРаботаСККМСервер.ВернутьМассивАдресов(Перечисления.ксТипыСобытийУведомления.РегламентПроверкиНепробитыхЧеков);
		//Мас = Новый Массив;
		//Мас.Добавить("aleksandr.mihushkin@strizh-logistic.ru");
		//Мас.Добавить("evgeniy.marochkin@strizh-logistic.ru");		
		// <<--- МАС
		ксРаботаСККМСервер.ОтправкаСистемногоСообщенияEMAIL(Мас, Текст, Текст);	
	КонецЕсли;	
	

КонецПроцедуры



