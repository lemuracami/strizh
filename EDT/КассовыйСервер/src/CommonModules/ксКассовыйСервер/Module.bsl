// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "КассовыйСервер";
	Описание.Версия = "1.0.0.1";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии = "1.0.0.1";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры


// См. ОбновлениеИнформационнойБазыБСП.ПриОпределенииРежимаОбновленияДанных.
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры


// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	//// Обработчики, выполняемые при каждом обновлении ИБ.
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "*";
	//Обработчик.ОбщиеДанные = Истина;
	//Обработчик.УправлениеОбработчиками = Истина;
	//Обработчик.МонопольныйРежим = Истина; // Для демонстрации условного выполнения в монопольном режиме.
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВыполнятьВсегдаПриСменеВерсии";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "*";
	//Обработчик.ОбщиеДанные = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбработчикСОшибкой";
	//Обработчик.РежимВыполнения = "Оперативно";
	//
	//// Обработчики, выполняемые при заполнении пустой ИБ.
	////
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПервыйЗапуск";
	//
	//// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	////
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.1.1.6";
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВыполнитьПервоначальноеЗаполнениеВалют";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.1.3.16";
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.1.12";
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.1.34";
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	//Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	//Обработчик.Приоритет = 99;
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.2.10";
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.ОбщиеДанные = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеКлючевыеОперации";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.3.1.8";
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ИнициализироватьРолиИсполнителей";
	//
	//// Обработчики, выполняемые при переходе на новую версию.
	////
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.0.1.5";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьДополнительныеОбработки_2_0_1_5";
	//
	//// Обработчики оперативного обновления.
	////
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.1.28";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьКонстантыДляОрганизаций";
	//Обработчик.РежимВыполнения = "Оперативно";
	//
	//// Обработчики отложенного обновления.
	////
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.3.3.10"; // для целей тестирования
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("39e98a12-69b3-40a0-95e9-03469462f506");
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОтложенныйОбработчикСОшибкой";
	//Обработчик.Комментарий = НСтр("ru = 'Демонстрационный обработчик отложенного обновления данных.
	//	|Для имитации нештатной ситуации нажать на кнопку ""Имитировать ошибку при отложенном обновлении"" в инструменте разработчика и выполнить перезапуск программы.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = Метаданные.Версия; // для целей тестирования
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("b3be66c5-708d-42c8-a019-818036d09d06");
	//Обработчик.Процедура = "Документы._ДемоЗаказПокупателя.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	//Обработчик.Комментарий = НСтр("ru = 'Заполнение значения нового реквизита ""Статус заказа"" у документов ""Демо: Заказ покупателя"" прошлых периодов.
	//	|До завершения обработки ""Статус заказа"" данных документов будет отображаться некорректно.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//Обработчик.ОчередьОтложеннойОбработки = 1;
	//Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы._ДемоЗаказПокупателя.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	//Обработчик.ЧитаемыеОбъекты      = "Документ._ДемоЗаказПокупателя";
	//Обработчик.ИзменяемыеОбъекты    = "Документ._ДемоЗаказПокупателя";
	//Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	//Обработчик.БлокируемыеОбъекты   = "Документ._ДемоЗаказПокупателя, Отчет._ДемоСтатусыЗаказовПокупателей";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.1.23";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("4791ffe5-a25f-477f-8724-e75f61b38bb3");
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПериодРегистрацииДокументовРасчета";
	//Обработчик.Комментарий = НСтр("ru = 'Заполнение значения нового реквизита ""Период регистрации"" у документов ""Демо: Начисление зарплаты"".
	//	|До завершения обработки ""Период регистрации"" данных документов будет отображаться некорректно.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.2.28";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("41b5e98c-f692-489b-b812-cb8fdb8985fc");
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВосстановитьДвиженияДокументов";
	//Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов без движений по бухгалтерским и расчетным регистрам.
	//	|До завершения обработки отчет ""Демо: Оборотно-сальдовая ведомость"" может выводить некорректные данные.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.3.2";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("006d0801-c822-4904-8fbc-30e02de23673");
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьПоследовательностьДвиженияТоваров";
	//Обработчик.Комментарий = НСтр("ru = 'Заполнение данных последовательности документов движения товаров.
	//	|До завершения обработки отчет ""Демо: Оборотно-сальдовая ведомость"" может выводить некорректные данные.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.3.26";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьРеквизитГруппаДоступаУСправочниковГруппЗначенийДоступа";
	//Обработчик.РежимВыполнения = "Оперативно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.4.33";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформацииФизическихЛиц";
	//Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	//Обработчик.Приоритет = 99;
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.5.8";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов";
	//Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	//Обработчик.Приоритет = 99;
	//Обработчик.НачальноеЗаполнение = Истина;
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.3.1.7";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныйВидКонтактнойИнформации";
	//Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	//Обработчик.Приоритет = 99;
	//Обработчик.НачальноеЗаполнение = Истина;
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.РежимВыполнения = "Оперативно";
	//Обработчик.Версия    = "2.3.1.10";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.СброситьНастройкиОтчетов";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия    = "2.3.1.19";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьИспользованиеКонтактнойИнформацииКонтактныхЛицПартнеров";
	//Обработчик.РежимВыполнения = "Оперативно";
	//Обработчик.ОбщиеДанные      = Ложь;
	//Обработчик.НачальноеЗаполнение = Истина;
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия    = "2.3.1.21";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьИспользованиеНаборовСвойствВнешнихПользователей";
	//Обработчик.РежимВыполнения = "Оперативно";
	//Обработчик.НачальноеЗаполнение = Истина;
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия    = "2.3.1.33";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПорядокВидовКонтактнойИнформацииКонтрагентов";
	//Обработчик.РежимВыполнения = "Оперативно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия    = "2.3.1.44";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.УстановитьНазначенияРолейИсполнителей";
	//Обработчик.РежимВыполнения = "Оперативно";
	//Обработчик.НачальноеЗаполнение = Истина;
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.3.1.59";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("423736c1-7be4-439d-bb61-3a420cbc09c0");
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьКонтактнуюИнформациюДляСписков";
	//Обработчик.Комментарий = НСтр("ru = 'Добавление контактной информации в списки и отчеты.
	//	|Если в списках и отчетах добавить новые колонки с контактной информацией, то до завершения этой процедуры обработки они будут незаполненными.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия    = "2.3.1.64";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВключитьОграничениеПоПартнерамПриИспользованииВнешнихПользователей";
	//Обработчик.РежимВыполнения = "Оперативно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия    = "2.3.2.4";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.НастроитьИсториюКонтактнойИнформацииИМногострочноеПоле";
	//Обработчик.РежимВыполнения = "Оперативно";
	//Обработчик.НачальноеЗаполнение = Истина;
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.3.3.6";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("AFB1DC88-66C3-4fd6-9C6F-766669FEBAC4");
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьНаборыЗначенийДоступаЗаданийСРолевойАдресацией";
	//Обработчик.Комментарий = НСтр("ru = 'Обновление прав доступа для бизнес-процесса ""Демо: Задание"". 
	//	|До завершения обработки будут действовать прежние права доступа к заданиям.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.3.3.19";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("260e546d-4032-44be-9889-c5eb67fb4cc0");
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьКонтактнуюИнформациюЗаказовПокупателя";
	//Обработчик.Комментарий = НСтр("ru = 'Для документов ""Демо: Заказ покупателя"" заполняет реквизиты
	//	|АдресДоставкиСтрокой и ЭлектроннаяПочтаСтрокой.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//Обработчик.ПроцедураПроверки = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполненыДанныеДляСпискаЗаказПокупателя";
	//Обработчик.БлокируемыеОбъекты = "Документ._ДемоЗаказПокупателя, Отчет._ДемоСтатусыЗаказовПокупателей";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.3.3.42";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("c23af8c2-b345-4d76-a50b-2f64bf78a1af");
	//Обработчик.Процедура = "РегистрыСведений._ДемоРеестрСкладскихДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	//Обработчик.Комментарий =
	//	НСтр("ru = 'Заполнение реестра складских документов.
	//	           |До завершения обработки реестр складских документов может быть неполным.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//Обработчик.ОчередьОтложеннойОбработки = 1;
	//Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений._ДемоРеестрСкладскихДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	//Обработчик.ЧитаемыеОбъекты      = "Документ._ДемоОприходованиеТоваров, Документ._ДемоПеремещениеТоваров, Документ._ДемоСписаниеТоваров";
	//Обработчик.ИзменяемыеОбъекты    = "РегистрСведений._ДемоРеестрСкладскихДокументов";
	//Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.4.1.1";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("d58853ca-0549-4c60-8427-5c2a41832837");
	//Обработчик.Процедура = "Справочники.НаборыДополнительныхРеквизитовИСведений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	//Обработчик.Комментарий = НСтр("ru = 'Обновление состава наборов свойств справочника Демо: Контрагенты.
	//	|Дополнительные реквизиты данного справочника будут недоступны до завершения обновления.'");
	//Обработчик.РежимВыполнения = "Отложенно";
	//Обработчик.ОчередьОтложеннойОбработки = 1;
	//Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НаборыДополнительныхРеквизитовИСведений.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	//Обработчик.ЧитаемыеОбъекты      = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	//Обработчик.ИзменяемыеОбъекты    = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	
КонецПроцедуры


// См. ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры


// См. ОбновлениеИнформационнойБазыБСП.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры


Функция ПолучитьУзелОбменаСМобильнымПриложением(Идентификатор) Экспорт
	УзелПланаОбмена = ПланыОбмена.ксОбменСМобильнымПриложением.НайтиПоКоду(Идентификатор);
	
	Если УзелПланаОбмена.Пустая() Тогда
		УзелПланаОбмена = ПланыОбмена.ксОбменСМобильнымПриложением.СоздатьУзел();
		УзелПланаОбмена.Код = Идентификатор;
		УзелПланаОбмена.ДатаСоздания = ТекущаяДата();
		УзелПланаОбмена.Записать();
	КонецеСли;
	
	Возврат УзелПланаОбмена.Ссылка;
КонецФункции	

Функция ПолучитьУзелОбменаСУТЛ() Экспорт
	Возврат ПланыОбмена.ксОбменСУТЛ.НайтиПоКоду("UTL").Ссылка;
КонецФункции	

Функция ОтправкаСистемногоСообщенияEMAIL(МассивПолучателей, ТекстСообщения, ТемаСообщения) Экспорт
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Ложь);
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;		
	Сообщение.Отправитель = УчетнаяЗапись.Пользователь;
	
	Сообщение.Тема = ТемаСообщения;
	
	Для Каждого Тек Из МассивПолучателей Цикл
		Сообщение.Получатели.Добавить(СокрЛП(Тек));
	КонецЦикла;	
	
	Сообщение.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.ПростойТекст);
	
	Почта = Новый ИнтернетПочта;
	Успешно = Ложь;
	Попытка 
		Сообщить("Отправка почтового сообщения...");
		Почта.Подключиться(Профиль);
		Почта.Послать(Сообщение);
		Сообщить("Сообщения успешно отправлены!");
		Успешно = Истина;
	Исключение
		Сообщить("Ошибка соединения с сервером.",СтатусСообщения.ОченьВажное);
		Сообщить(""+ОписаниеОшибки());
		Успешно = Ложь;
	КонецПопытки;				
	
	Возврат Успешно;
КонецФункции	

Функция ВремяПопадаетВИнтервал(ВремяИнтервала, ВыбранныйИнтервал) Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксИнтервалыВремениИнтервалы.Ссылка КАК Инт
	            |ИЗ
	            |	Справочник.ксИнтервалыВремени.Интервалы КАК ксИнтервалыВремениИнтервалы
	            |ГДЕ
	            |	ксИнтервалыВремениИнтервалы.ВремяС <= &ПараметрВремя
	            |	И ксИнтервалыВремениИнтервалы.ВремяПо >= &ПараметрВремя
	            |	И ксИнтервалыВремениИнтервалы.Ссылка = &Интервал
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ксИнтервалыВремениИнтервалы.Ссылка";
	Зап.УстановитьПараметр("ПараметрВремя", Дата('00010101') + (ВремяИнтервала-НачалоДня(ВремяИнтервала)));			
	Зап.УстановитьПараметр("Интервал", ВыбранныйИнтервал);			
	
	Рез = Зап.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецеСли;	
КонецФункции	

Функция ВернутьКрайниеГраницыИнтервалаСтрокой(Интервал) Экспорт
	Если Интервал.Интервалы.Количество() <> 0 Тогда
		Возврат " с " + Формат(Интервал.Интервалы[0].ВремяС, "ДЛФ=T") + " по " + Формат(Интервал.Интервалы[Интервал.Интервалы.Количество() - 1].ВремяПо, "ДЛФ=T");
	Иначе
		Возврат "";
	КонецеСли;	
КонецФункции

Функция ВернутьДатуНачалаИнтервалаОтТекущегоМоментаВремени(Интервал) Экспорт
	ВремяИнтервала = ТекущаяДата();
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксИнтервалыВремениИнтервалы.ВремяС КАК ВремяС
	            |ИЗ
	            |	Справочник.ксИнтервалыВремени.Интервалы КАК ксИнтервалыВремениИнтервалы
	            |ГДЕ
	            |	ксИнтервалыВремениИнтервалы.ВремяС <= &ПараметрВремя
	            |	И ксИнтервалыВремениИнтервалы.ВремяПо >= &ПараметрВремя
	            |	И ксИнтервалыВремениИнтервалы.Ссылка = &Интервал";
	Зап.УстановитьПараметр("ПараметрВремя", Дата('00010101') + (ВремяИнтервала-НачалоДня(ВремяИнтервала)));			
	Зап.УстановитьПараметр("Интервал", Интервал);			
	
	Выб = Зап.Выполнить().Выбрать();
	Если Не Выб.Следующий() Тогда
		Возврат Неопределено;
	Иначе
		НД = НачалоДня(ТекущаяДата());
		ОтветФункции = Дата(Год(НД), Месяц(НД), День(НД), Час(Выб.ВремяС), Минута(Выб.ВремяС), 0);
		Возврат ОтветФункции;
	КонецеСли;	
КонецФункции

Функция ВернутьДатуНачалаРабочейСмены() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксВременнойИнтервалВозможногоСозданияЧековВМПСрезПоследних.ИнтервалВремени КАК ИнтервалВремени
	            |ИЗ
	            |	РегистрСведений.ксВременнойИнтервалВозможногоСозданияЧековВМП.СрезПоследних КАК ксВременнойИнтервалВозможногоСозданияЧековВМПСрезПоследних";
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		ДН = ВернутьДатуНачалаИнтервалаОтТекущегоМоментаВремени(Выб.ИнтервалВремени);
		Если ДН = Неопределено Тогда
			ДН = НачалоДня(ТекущаяДата());
		КонецеСли;	
		Возврат ДН;
	Иначе
		Возврат НачалоДня(ТекущаяДата());
	КонецеСли;	
КонецФункции	


Функция ПроверитьВозможностьСозданияЧекаКПечатиПоНомеруЗаказа(НомерЗаказа) Экспорт
	
	ОтветФункции = Новый Структура;
	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ксНастройкиКассовогоСервераСрезПоследних.РежимПроверкиНаличияЧека КАК РежимПроверкиНаличияЧека
	            |ИЗ
	            |	РегистрСведений.ксНастройкиКассовогоСервера.СрезПоследних КАК ксНастройкиКассовогоСервераСрезПоследних";
	Выб = Зап.Выполнить().Выбрать();
	
	РежимПроверкиНаличияЧека = Неопределено;
	
	
	Если Выб.Следующий() Тогда
		РежимПроверкиНаличияЧека = Выб.РежимПроверкиНаличияЧека;
	КонецеСли;
	
	Если Не ЗначениеЗаполнено(РежимПроверкиНаличияЧека) Или РежимПроверкиНаличияЧека = Перечисления.ксРежимПроверкиНаличияЧеков.НеПроверять Тогда
		ОтветФункции.Вставить("МожноСоздатьЧек", Истина);
		ОтветФункции.Вставить("Сведения", "");
		Возврат ОтветФункции;
	КонецеСли;	
	
	Если РежимПроверкиНаличияЧека = Перечисления.ксРежимПроверкиНаличияЧеков.ПроверятьСУчетомВозвратаПоЧеку Тогда
		Зап = Новый Запрос;
		
		Зап.Текст = "ВЫБРАТЬ
		|	ксЧекККМ.Ссылка КАК Чек,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ксЧекКПечати.Номер, ИСТИНА) = ИСТИНА
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВозвратныйЧек,
		|	ксЧекККМ.ФД КАК ФДЧека,
		|	ксЧекККМ.ФПД КАК ФПДЧека,
		|	ксЧекККМ.ЧекКПечати.УзелОбмена КАК МобильноеПриложение,
		|	ксЧекККМ.Дата КАК ДатаЧека,
		|	ксЧекККМ.Заказ КАК Заказ
		|ИЗ
		|	Документ.ксЧекККМ КАК ксЧекККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ксЧекКПечати КАК ксЧекКПечати
		|		ПО ксЧекККМ.ЧекКПечати.Номер = ксЧекКПечати.ИдентификаторЧекаКВозврату
		|ГДЕ
		|	ксЧекККМ.ЧекКПечати.Заказ = &НомерЗаказа
		|	И ксЧекККМ.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ксЧекККМ.ТипКассовогоЧека = ЗНАЧЕНИЕ(Перечисление.ксТипыКассовыхЧеков.ЧекПрихода)
		|	И ЕСТЬNULL(ксЧекКПечати.Номер, ИСТИНА) = истина";
		
		Зап.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
		Запрос_ДатаНачала = ВернутьДатуНачалаРабочейСмены();
		Запрос_ДатаОкончания = ТекущаяДата();
		
		Зап.УстановитьПараметр("ДатаНач", Запрос_ДатаНачала);
		Зап.УстановитьПараметр("ДатаКон", Запрос_ДатаОкончания);
		
		Выб = Зап.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			ОтветФункции.Вставить("МожноСоздатьЧек", Ложь);
			ОтветФункции.Вставить("Сведения", "По заказу " + СокрЛП(Выб.Заказ) + " уже пробит чек, ФПД " + Выб.ФПДЧека + ", дата пробития чека " + Формат(Выб.ДатаЧека, "ДЛФ=DDT") + ".");
			Возврат ОтветФункции;
		Иначе	
			ОтветФункции.Вставить("МожноСоздатьЧек", Истина);
			ОтветФункции.Вставить("Сведения", "");
			Возврат ОтветФункции;			
		КонецеСли;	
	КонецеСли;	
КонецФункции	
