Функция ПолучитьИнтервалАвтоматическогоОбменаДанными() Экспорт
	Возврат Константы.ИнтервалАвтоматическогоОбменаДанными.Получить();
КонецФункции	

Функция ПолучитьИнтервалПроверкиОкончанияИнтервалаДоставки() Экспорт
	Возврат Константы.ИнтервалПроверкиОкончанияИнтервалаДоставки.Получить();
КонецФункции

//Процедура УстановитьIDПриложения(ID) Экспорт
//	Константы.ИдентификаторИнформационнойБазы.Установить(ID.ИдентификаторИнформационнойБазы);
//	Константы.ИдентификаторПриложения.Установить(ID.ИдентификаторПриложения);
//	Константы.ИдентификаторУстройства.Установить(ID.ИдентификаторУстройства);
//	Если ID.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.APNS Тогда
//		Константы.ТипПодписчика.Установить(Перечисления.ТипыПодписчиковУведомлений.APNS);
//	ИначеЕсли ID.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.GCM Тогда
//		Константы.ТипПодписчика.Установить(Перечисления.ТипыПодписчиковУведомлений.GCM);
//	КонецеСли;	
//КонецПроцедуры	

Процедура ЗафиксироватьФактЗвонка(Заказ, Номер, Период) Экспорт
	Наб = РегистрыСведений.ЖурналЗвонковПоЗаказам.СоздатьНаборЗаписей();
	
	ЗаказОбъект = Документы.Заказ.НайтиПоНомеру(Заказ);
	
	Наб.Отбор.Период.Установить(Период);
	Наб.Отбор.Заказ.Установить(ЗаказОбъект);
	
	Нов = Наб.Добавить();
	Нов.Период = Период;
	Нов.Заказ = ЗаказОбъект;
	Нов.НомерТелефона = Номер;
	
	Наб.Записать();
КонецпРоцедуры	

Функция ПолучитьТекущийРегион(ДанныеМестоположения) Экспорт
	
	
	Если ДанныеМестоположения = Неопределено Тогда
		Возврат Неопределено;
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	РегиональныеТерминалы.Ссылка КАК Регион
	            |ИЗ
	            |	Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы
	            |ГДЕ
	            |	&Широта >= РегиональныеТерминалы.НачальнаяШиротаЗоны
	            |			И &Широта < РегиональныеТерминалы.КонечнаяШиротаЗоны
	            |	И &Долгота >= РегиональныеТерминалы.НачальнаяДолготаЗоны
	            |			И &Долгота < РегиональныеТерминалы.КонечнаяДолготаЗоны";
	Зап.УстановитьПараметр("Широта", ДанныеМестоположения.Координаты.Широта);
	Зап.УстановитьПараметр("Долгота", ДанныеМестоположения.Координаты.Долгота);
	
	Рез = Зап.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб = Рез.Выбрать();
		Если Выб.Следующий() Тогда
			Возврат Выб.Регион;
		КонецеСли;
	КонецеСли;
КонецФункции	

Процедура УстановитьТекущийРегион(Регион) Экспорт
	Константы.ТекущийРегион.Установить(Регион);
	ПараметрыСеанса.Регион = Константы.ТекущийРегион.Получить();
КонецПроцедуры	


Функция ВернутьСтруктуруПоXDTO(ДанныеXDTO, Струк = Неопределено) Экспорт
	Если Струк = Неопределено Тогда
		Струк = Новый Структура;
	КонецеСли;	
	Свойства = ДанныеXDTO.Свойства();
	Для Каждого Тек Из Свойства Цикл
		Если Тек.Имя <> "taxes" Тогда
			Струк.Вставить(Тек.Имя, ДанныеXDTO[Тек.Имя]);
		Иначе
			Если ДанныеXDTO[Тек.Имя] <> Неопределено Тогда
				МассивСтруктур = Новый Массив;
				Для Каждого ТекНалог Из ДанныеXDTO.taxes.tax Цикл
					СтрукНалогов = Новый Структура;
					СтрукНалогов.Вставить("КодНалога", ТекНалог.idTax);
					СтрукНалогов.Вставить("СуммаНалога", ТекНалог.sumTax);
					МассивСтруктур.Добавить(СтрукНалогов);
				КонецЦикла;	
				
				Струк.Вставить("Налоги", МассивСтруктур);
			КонецеСли;
		КонецеСли;	
	КонецЦикла;	
	Возврат Струк;
КонецФункции	

Процедура ОчиститьДанныеВРСПоСтарымОшибкамОбмена() Экспорт
    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |	ЛогОшибокОбмена.Период КАК Период
                       |ИЗ
                       |	РегистрСведений.ЛогОшибокОбмена КАК ЛогОшибокОбмена
                       |ГДЕ
                       |	ЛогОшибокОбмена.Период МЕЖДУ &ДатаНач И &ДатаКон";
        
        
        Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата() - 1259200);
        Запрос.УстановитьПараметр("ДатаНач", ТекущаяДата() - 1864000);
        
        РезультатЗапроса = Запрос.Выполнить();
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            НаборЗаписей = РегистрыСведений.ЛогОшибокОбмена.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
            НаборЗаписей.Записать();
        КонецЦикла;
        
        
    Исключение
    КонецПопытки;	
КонецПроцедуры	

Процедура ОчиститьВыгруженныеДанныеПрикрепленныхФайлов() Экспорт
    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |	ПрикрепленныеФайлы.Период КАК Период,
                       |	ПрикрепленныеФайлы.Заказ КАК Заказ,
                       |	ПрикрепленныеФайлы.Документ КАК Документ,
                       |	ПрикрепленныеФайлы.Данные КАК Данные
                       |ИЗ
                       |	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы.Изменения КАК ПрикрепленныеФайлыИзменения
                       |		ПО ПрикрепленныеФайлы.Период = ПрикрепленныеФайлыИзменения.Период
                       |			И ПрикрепленныеФайлы.Заказ = ПрикрепленныеФайлыИзменения.Заказ
                       |			И (ПрикрепленныеФайлыИзменения.Узел = &Узел)
                       |ГДЕ
                       |	ЕСТЬNULL(ПрикрепленныеФайлыИзменения.Период, ИСТИНА) = ИСТИНА";
        
        
        Запрос.УстановитьПараметр("Узел", Константы.УзелПланаОбмена.Получить());
        
        РезультатЗапроса = Запрос.Выполнить();
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			
            НаборЗаписей = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
			НаборЗаписей.Отбор.Заказ.Установить(ВыборкаДетальныеЗаписи.Заказ);
            НаборЗаписей.Записать();
			
			
			СпрФайл = ВыборкаДетальныеЗаписи.Данные.ПолучитьОбъект();
			СпрФайл.Удалить();
        КонецЦикла;
        
        
    Исключение
    КонецПопытки;	
КонецПроцедуры	

Функция ПолучитьТекущийРейс() Экспорт
	ТекущийЧас = Час(ТекущаяДата());
	
	Если ТекущийЧас >= 5 Тогда
		ДатаРейса = НачалоДня(ТекущаяДата());
	Иначе
		Если ТекущийЧас < 5 И ТекущийЧас >= 0 Тогда
			ДатаРейса = НачалоДня(ТекущаяДата() - 864000);
		Иначе
			ДатаРейса = НачалоДня(ТекущаяДата());
		КонецеСли;	
	КонецеСли;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	Рейс.Ссылка КАК Рейс
	            |ИЗ
	            |	Документ.Рейс КАК Рейс
	            |ГДЕ
	            |	Рейс.ДатаРейса = &ДатаРейса
	            |	И Рейс.ПометкаУдаления = ЛОЖЬ
	            |	И Рейс.Транспорт = &Транспорт";
	Зап.УстановитьПараметр("ДатаРейса", ДатаРейса);
	Зап.УстановитьПараметр("Транспорт", Константы.Транспорт.Получить().Ссылка);
	
	Выб = Зап.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Рейс;
	Иначе
		Возврат Документы.Рейс.ПустаяСсылка();
	КонецЕсли;	
КонецФункции	

Функция СправочникРегионовПустой() Экспорт
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	            |	РегиональныеТерминалы.Ссылка
	            |ИЗ
	            |	Справочник.РегиональныеТерминалы КАК РегиональныеТерминалы";
	Возврат Зап.Выполнить().Пустой();
КонецФункции	

Функция ПолучитьТекущийРегионИзКонстанты() Экспорт
	Возврат Константы.ТекущийРегион.Получить();
КонецФункции

Процедура ЗаписатьОшибкуВЛог(ТекстОшибки) Экспорт
	ТД = ТекущаяДата();
	
	ВерсияКонфигурации = Метаданные.Версия;
	Если Не ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
		ВерсияКонфигурации = "1.0.0.1";
	КонецеСли;
	
	
	Наб = РегистрыСведений.ЛогОшибокОбмена.СоздатьНаборЗаписей();
	Наб.Отбор.Период.Установить(ТД);
	
	Нов = Наб.Добавить();
	Нов.Ошибка = ТекстОшибки;
	Нов.Период = ТД;
	Нов.ВерсияМП = ВерсияКонфигурации;
	
	Наб.Записать(истина);
КонецПроцедуры	

Функция ПолучитьПредполагаемуюДатуРейса() Экспорт
	Д = ТекущаяДата();
	Если Час(Д) < 5 Тогда
		Возврат НачалоДня(Д - 86400);
	Иначе
		Возврат НачалоДня(Д);
	КонецеСли;	
КонецФункции	

Функция ПроверитьВозможностьАвтологина() Экспорт
	Транспорт = Константы.Транспорт.Получить();
	Если Транспорт.Пустая() Тогда
		Возврат Ложь;
	КонецеСли;	
	
	АвтоЛогин = Константы.Автологин.Получить();
	Если Автологин Тогда
		Пароль = Константы.Пароль.Получить();
		СохрПароль = Константы.СохраненныйПароль.Получить();
		ДатаСохраненияПароля = Константы.ДатаСохраненияПароля.Получить();
		ПериодХраненияПароля = Константы.ПериодХраненияПароля.Получить();
		Если СохрПароль = Пароль И ДатаСохраненияПароля + ПериодХраненияПароля*3600 > ТекущаяДата() Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецеСли;	
	Иначе
		Возврат Ложь;	
	КонецеСли;	
КонецФункции	

Процедура СохранитьДанныеАвтологина(Пароль) Экспорт
	Константы.СохраненныйПароль.Установить(Пароль);
	Константы.ДатаСохраненияПароля.Установить(ТекущаяДата());
КонецПроцедуры	

Функция ПолучитьОписаниеВерсииИзМакетаВерсий(НомерВерсии) Экспорт
	Мак = ПолучитьОбщийМакет("Версии");
	Область = Мак.НайтиТекст(Метаданные.Версия);
	
	Описание = Мак.Область(Область.Верх, Область.Лево + 1).Текст;
	
	ЭтоРелизТекст = Мак.Область(Область.Верх, Область.Лево + 2).Текст;
	Если Не ЗначениеЗаполнено(ЭтоРелизТекст) Тогда
		ЭтоРелизТекст = "0";
	КонецеСли;	
	ЭтоРелизнаяВерсия = Булево(Число(ЭтоРелизТекст));
	
	Струк = Новый Структура;
	Струк.Вставить("Описание", Описание);
	Струк.Вставить("ЭтоРелизнаяВерсия", ЭтоРелизнаяВерсия);
	Возврат Струк;
КонецФункции	

Процедура ОчиститьВыгруженныеДанныеТранзакцийСБП() Экспорт
    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |	ТранзакцииСБП.Период КАК Период,
                       |	ТранзакцииСБП.Заказ КАК Заказ
                       |ИЗ
                       |	РегистрСведений.ТранзакцииСБП КАК ТранзакцииСБП
                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТранзакцииСБП.Изменения КАК ТранзакцииСБПИзменения
                       |		ПО ТранзакцииСБП.Период = ТранзакцииСБПИзменения.Период
                       |			И ТранзакцииСБП.Заказ = ТранзакцииСБПИзменения.Заказ
                       |			И (ТранзакцииСБПИзменения.Узел = &Узел)
                       |ГДЕ
                       |	ЕСТЬNULL(ТранзакцииСБПИзменения.Период, ИСТИНА) = ИСТИНА
                       |	И ТранзакцииСБП.Период < &НачалоПериода";
        
        
        Запрос.УстановитьПараметр("Узел", Константы.УзелПланаОбмена.Получить());
		Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата() - 2592000);
        
        РезультатЗапроса = Запрос.Выполнить();
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			
            НаборЗаписей = РегистрыСведений.ТранзакцииСБП.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
			НаборЗаписей.Отбор.Заказ.Установить(ВыборкаДетальныеЗаписи.Заказ);
            НаборЗаписей.Записать();
        КонецЦикла;
        
        
    Исключение
    КонецПопытки;	
КонецПроцедуры


Процедура ОчиститьВыгруженныеДанныеТранзакцийAssist() Экспорт
    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |	ТранзакцииAssist.Период КАК Период,
                       |	ТранзакцииAssist.Заказ КАК Заказ
                       |ИЗ
                       |	РегистрСведений.ТранзакцииAssist КАК ТранзакцииAssist
                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТранзакцииAssist.Изменения КАК ТранзакцииAssistИзменения
                       |		ПО ТранзакцииAssist.Период = ТранзакцииAssistИзменения.Период
                       |			И ТранзакцииAssist.Заказ = ТранзакцииAssistИзменения.Заказ
                       |			И (ТранзакцииAssistИзменения.Узел = &Узел)
                       |ГДЕ
                       |	ЕСТЬNULL(ТранзакцииAssistИзменения.Период, ИСТИНА) = ИСТИНА
                       |	И ТранзакцииAssist.Период < &НачалоПериода";
        
        
        Запрос.УстановитьПараметр("Узел", Константы.УзелПланаОбмена.Получить());
		Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата() - 2592000);
        
        РезультатЗапроса = Запрос.Выполнить();
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			
            НаборЗаписей = РегистрыСведений.ТранзакцииAssist.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
			НаборЗаписей.Отбор.Заказ.Установить(ВыборкаДетальныеЗаписи.Заказ);
            НаборЗаписей.Записать();
        КонецЦикла;
        
        
    Исключение
    КонецПопытки;	
КонецПроцедуры



Процедура ОчиститьВыгруженныеИСтарыеДанныеИнформированияПоЗаказам() Экспорт
    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.Период КАК Период,
                       |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.Заказ КАК Заказ,
                       |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.Реквизит КАК Реквизит
                       |ИЗ
                       |	РегистрСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах КАК ИнформированиеЭкипажейОбИзмененияхВЗаказах
                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах.Изменения КАК ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения
                       |		ПО ИнформированиеЭкипажейОбИзмененияхВЗаказах.Период = ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Период
                       |			И ИнформированиеЭкипажейОбИзмененияхВЗаказах.Заказ = ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Заказ
                       |			И (ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Узел = &Узел)
                       |			И ИнформированиеЭкипажейОбИзмененияхВЗаказах.Реквизит = ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Реквизит
                       |ГДЕ
                       |	ЕСТЬNULL(ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Период, ИСТИНА) = ИСТИНА
                       |	И ИнформированиеЭкипажейОбИзмененияхВЗаказах.Период < &НачалоПериода";
        
        
        Запрос.УстановитьПараметр("Узел", Константы.УзелПланаОбмена.Получить());
		Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата() - 2592000);
		//Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата());
        
        РезультатЗапроса = Запрос.Выполнить();
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			
            НаборЗаписей = РегистрыСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
			НаборЗаписей.Отбор.Заказ.Установить(ВыборкаДетальныеЗаписи.Заказ);
			НаборЗаписей.Отбор.Реквизит.Установить(ВыборкаДетальныеЗаписи.Реквизит);
            НаборЗаписей.Записать();
        КонецЦикла;
        
        
    Исключение
    КонецПопытки;	
КонецПроцедуры


//Функция ПолучитьСклонениеФИОВстроенный(ФИО, Падеж) Экспорт
//	Если ЗначениеЗаполнено(Падеж) Тогда
//		СтрПадежа = "ПД=" + Строка(Падеж);
//		Попытка
//			МассивРезультатСклонения = ПолучитьСклоненияСтроки(ФИО,, СтрПадежа);
//			РезультатСклонения = МассивРезультатСклонения[0];
//		Исключение
//			РезультатСклонения = ФИО;
//		КонецПопытки;
//		
//	Иначе
//		РезультатСклонения = ФИО;
//	КонецЕсли;	
//	
//	Возврат РезультатСклонения;
//КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",строка 1,,,строка 2", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" строка1   строка 2", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
