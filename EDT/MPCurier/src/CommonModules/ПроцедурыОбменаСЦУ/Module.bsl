
#Область ПрограммныйИнтерфейс

#Область МаршрутизацияЯндекс
// Выполнить обмен получить содержимое страницы маршрутизации.
// 
// Параметры:
//  ОбщееСоединениеHTTP - Строка - Общее соединение HTTP
//  IDУзла - Строка - IDУзла
// 
// Возвращаемое значение:
//  Булево - Выполнить обмен получить содержимое страницы маршрутизации
Функция ВыполнитьОбмен_ПолучитьСодержимоеСтраницыМаршрутизации(ОбщееСоединениеHTTP = "", IDУзла) Экспорт
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ID", IDУзла);
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	
	
	ОтветВызоваJSON = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getRouteMapBody", ОбщееСоединениеHTTP);
	ВозниклаОшибка = Ложь;
	ОтветВызова = ДанныеJSONВСтруктуру(ОтветВызоваJSON, , ВозниклаОшибка);
	Если Не ВозниклаОшибка Тогда
		Если Не ОтветВызова.isEmpty Тогда
			Константы.СодержимоеВерсииСтраницыМаршрутизации.Установить(ОтветВызова.routeMapBody);
			Константы.ВерсияСтраницыМаршрутизации.Установить(ОтветВызова.routeMapVersion);
		Иначе
			Возврат Ложь;
		КонецеСли;	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецеСли;
	
КонецФункции
#КонецОбласти

Функция ВыгрузитьДанныеСтатусов(ОбщееСоединениеHTTP = "") Экспорт
	ЗапросДокументов = Новый Запрос;
	
	ЗапросДокументов.Текст = "ВЫБРАТЬ
	                         |	ДанныеЗаказаВодителя.Номер КАК numberDoc,
	                         |	ДанныеЗаказаВодителя.Дата КАК Date,
	                         |	ВЫБОР
	                         |		КОГДА ДанныеЗаказаВодителя.Реализация.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Доставка)
	                         |			ТОГДА ДанныеЗаказаВодителя.Реализация.Номер
	                         |		ИНАЧЕ """"
	                         |	КОНЕЦ КАК orderId,
	                         |	ВЫБОР
	                         |		КОГДА ДанныеЗаказаВодителя.Реализация.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказов.Забор)
	                         |			ТОГДА ДанныеЗаказаВодителя.Реализация.Номер
	                         |		ИНАЧЕ """"
	                         |	КОНЕЦ КАК shipmentId,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.ПричинаОтказаПереноса.Код, """") КАК reasonRejectionId,
	                         |	ДанныеЗаказаВодителя.ДатаПереноса КАК DateReason,
	                         |	ДанныеЗаказаВодителя.СуммаНал КАК Summa,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.ВыбранныйТипОплаты.Код, """") КАК payTypeId,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.РезультатДоставки.Код, """") КАК ResultOfDelivery,
	                         |	ДанныеЗаказаВодителя.КоличествоМест КАК PiecesOfFreight,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.ОбъемныйБрейк.Код, """") КАК volumeBreakId,
	                         |	ДанныеЗаказаВодителя.КоличествоПалет КАК PaletCount,
	                         |	ВЫБОР
	                         |		КОГДА ДанныеЗаказаВодителя.ВидПодъема = ЗНАЧЕНИЕ(Перечисление.ВидыПодъемовВодителя.Лифт)
	                         |			ТОГДА 1
	                         |		КОГДА ДанныеЗаказаВодителя.ВидПодъема = ЗНАЧЕНИЕ(Перечисление.ВидыПодъемовВодителя.РучнойПодъем)
	                         |			ТОГДА 2
	                         |		КОГДА ДанныеЗаказаВодителя.ВидПодъема = ЗНАЧЕНИЕ(Перечисление.ВидыПодъемовВодителя.БезПодъема)
	                         |			ТОГДА 3
	                         |		ИНАЧЕ 0
	                         |	КОНЕЦ КАК TypeOfLifting,
	                         |	ДанныеЗаказаВодителя.Этаж КАК FloorOfLifting,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.Чек.ИдентификаторЧекаНаСервере, """") КАК idCheck,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.ТипОплаты.Код, """") КАК payTypeIdCheck,
	                         |	ДанныеЗаказаВодителя.КоличествоПовторовЗапросаСостоянияЧека КАК countRequestPrintingCheck,
	                         |	ДанныеЗаказаВодителя.ДатаОтправкиЧекаНаПечать КАК dateOfSendingDataOfCheck,
	                         |	ДанныеЗаказаВодителя.ДатаПечатиЧеков КАК dateOfPrintingCheck,
	                         |	ДанныеЗаказаВодителя.АдресОтправкиЧека КАК emailRecepient,
	                         |	ДанныеЗаказаВодителя.ОшибкаФормированияЧекаНаСервере КАК errorFormingCheck,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.ВозвратныйЧек.ИдентификаторЧекаНаСервере, """") КАК idReturnCheck,
	                         |	ДанныеЗаказаВодителя.КодПодъемногоБрейка КАК liftingBreakId,
	                         |	ДанныеЗаказаВодителя.ВесЗаказа КАК liftingWeight,
	                         |	ДанныеЗаказаВодителя.СтоимостьПодъемаРассчитанная КАК liftingCalcSum,
	                         |	ДанныеЗаказаВодителя.СтоимостьПодъемаПодтвержденная КАК liftingApprovedSum,
	                         |	ДанныеЗаказаВодителя.КоличествоХодокНаЭтаж КАК liftingCountOfWalkersPerFloor,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.Реализация.ВесЗаказа, """") КАК liftingWeightUploaded,
	                         |	ДанныеЗаказаВодителя.КодИдентификацииКлиента КАК customerIdentificationCode,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.Реализация.ИдентификаторРейса, """") КАК routeId,
	                         |	ДанныеЗаказаВодителя.СтатусУстановленБезКИК КАК statusSetWithoutCIC,
	                         |	ДанныеЗаказаВодителя.ОплаченаСтоимостьДоставкиПриОтменеЗаказа КАК CostDelivRequiredIfRefuse,
	                         |	ДанныеЗаказаВодителя.РасчетнаяСтоимостьДоставки КАК calculatedDeliveryCost,
	                         |	ДанныеЗаказаВодителя.СуммаДоставка КАК DeliveryCost,
	                         |	ДанныеЗаказаВодителя.ДоставленныеТовары.(
	                         |		ЕСТЬNULL(ДанныеЗаказаВодителя.ДоставленныеТовары.Номенклатура.Код, """") КАК goodsId,
	                         |		КоличествоДоставлено КАК count,
	                         |		ШтрихкодТовара КАК goodsBarcode,
	                         |		КодМаркировки КАК markingCode
	                         |	) КАК ДоставленныеТовары,
	                         |	ДанныеЗаказаВодителя.ВерсияКонфигурации КАК MetadataVersion,
	                         |	ДанныеЗаказаВодителя.ОплатаЧерезAssist КАК paymentThroughAssist,
	                         |	ЕСТЬNULL(ДанныеЗаказаВодителя.Организация.Код, """") КАК organization,
	                         |	ДанныеЗаказаВодителя.БылаПроизведенаПримерка КАК fittingHappened,
	                         |	ДанныеЗаказаВодителя.КоличествоSKUПримерки КАК countSKUForFitting,
	                         |	ДанныеЗаказаВодителя.ВозвратНаДоставку КАК returnToDelivery
	                         |ИЗ
	                         |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДанныеЗаказаВодителя.Изменения КАК ДанныеЗаказаВодителяИзменения
	                         |		ПО ДанныеЗаказаВодителя.Ссылка = ДанныеЗаказаВодителяИзменения.Ссылка
	                         |ГДЕ
	                         |	ДанныеЗаказаВодителяИзменения.Узел = &Узел
	                         |	И ДанныеЗаказаВодителя.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	
	ЗапросДокументов.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата() - 86400));
	ЗапросДокументов.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	ЗапросДокументов.УстановитьПараметр("Узел", Константы.УзелПланаОбмена.Получить());
	
	РезультатПоСтатусам = ЗапросДокументов.Выполнить();
	ВыборкаСтатусов = РезультатПоСтатусам.Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока ВыборкаСтатусов.Следующий() Цикл
		СтруктураДокумента = Новый Структура;
		Для каждого ТекКолонка Из РезультатПоСтатусам.Колонки Цикл
			Если ТекКолонка.Имя <> "ДоставленныеТовары" Тогда
				СтруктураДокумента.Вставить(ТекКолонка.Имя, ВыборкаСтатусов[ТекКолонка.Имя]);
			КонецеСли;
		КонецЦикла;	
		ВыборкаСтрок = ВыборкаСтатусов.ДоставленныеТовары.Выбрать();
		МассивСтрок = новый Массив;
		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураСтрокиДокумента = Новый Структура;
			СтруктураСтрокиДокумента.Вставить("goodsId", ВыборкаСтрок["goodsId"]);
			СтруктураСтрокиДокумента.Вставить("count", ВыборкаСтрок["count"]);
			СтруктураСтрокиДокумента.Вставить("markingCode", ВыборкаСтрок["markingCode"]);   
			СтруктураСтрокиДокумента.Вставить("goodsBarcode", ВыборкаСтрок["goodsBarcode"]);
			МассивСтрок.Добавить(СтруктураСтрокиДокумента);
		КонецЦикла;	
		СтруктураДокумента.Вставить("goods", МассивСтрок);
		МассивДокументов.Добавить(СтруктураДокумента);
	КонецЦикла;	
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("IDMA", Константы.ИдентификаторМП.Получить());   
	СтруктураЗапроса.Вставить("statuses", МассивДокументов);
	
	СтрокаЗапроса = СформироватьСтрокуJSON(СтруктураЗапроса);
	СтрокаОтвета = ВызватьФункциюHTTPСервиса(СтрокаЗапроса, "unloadStatusInfo", ОбщееСоединениеHTTP);
	
	Если ЗначениеЗаполнено(СтрокаОтвета) Тогда
		ВозниклаОшибка = Ложь;
		ДанныеОтвета = ДанныеJSONВСтруктуру(СтрокаОтвета, , ВозниклаОшибка);
		Если ВозниклаОшибка Тогда
			Возврат Ложь;
		КонецеСли;	
		Попытка
			Если ДанныеОтвета.result И Не ДанныеОтвета.error Тогда
				УдалитьРегистрацию_ДанныеЗаказаВодителя(ДанныеОтвета.numbers);
				Возврат Истина;
			ИначеЕсли ДанныеОтвета.error Тогда
				ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ДанныеОтвета.errorText);
				Возврат Ложь;
			КонецеСли;	
		исключение
			ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ОписаниеОшибки() + "-----" + СтрокаОтвета);
		КонецПопытки;
	Иначе	
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог("Не могу выгрузить статусы, http");
	КонецеСли;
КонецФункции	
	
// Выполнить обмен поставщики товаров.
// 
// Параметры:
//  ОбщееСоединениеHTTP - Строка - Общее соединение HTTP
// 
// Возвращаемое значение:
//  Булево - Выполнить обмен поставщики товаров
Функция ВыполнитьОбмен_ПоставщикиТоваров(ОбщееСоединениеHTTP = "", IDУзла) Экспорт
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ID", IDУзла);
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	ДанныеПоставщиков = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getGoodsSellers", ОбщееСоединениеHTTP);
	
	
	СтруктураВызова = Новый Структура;
	
	ВозниклаОшибка = Ложь;
	Поставщики = ДанныеJSONВСтруктуру(ДанныеПоставщиков, , ВозниклаОшибка);
	Если ВозниклаОшибка Тогда
		Возврат Ложь;
	КонецеСли;	   
	
		
	ТаблицаРеквизитовПоставщиков = Новый ТаблицаЗначений;
	ТаблицаРеквизитовПоставщиков.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	ТаблицаРеквизитовПоставщиков.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ТаблицаРеквизитовПоставщиков.Колонки.Добавить("ИНН",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(12)));
	ТаблицаРеквизитовПоставщиков.Колонки.Добавить("Телефон",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));	
		
	Для каждого Тек Из Поставщики Цикл
		НовСтрока = ТаблицаРеквизитовПоставщиков.Добавить();
		НовСтрока.Код = Тек.id;
		НовСтрока.Наименование = Тек.name;
		НовСтрока.ИНН = Тек.inn;
		НовСтрока.Телефон = Тек.phoneNumber;
	КонецЦикла;	
	
	Зап = Новый Запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ТЗПоставщики.Код КАК Код,
	            |	ТЗПоставщики.Наименование КАК Наименование,
	            |	ТЗПоставщики.Инн КАК Инн,
	            |	ТЗПоставщики.Телефон КАК Телефон
	            |ПОМЕСТИТЬ ТабПоставщиков
	            |ИЗ
	            |	&ТЗПоставщики КАК ТЗПоставщики
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ТабПоставщиков.Код КАК Код,
	            |	ТабПоставщиков.Наименование КАК Наименование,
	            |	ТабПоставщиков.Инн КАК Инн,
	            |	ТабПоставщиков.Телефон КАК Телефон,
	            |	ПоставщикиТоваров.Ссылка КАК Поставщик
	            |ИЗ
	            |	ТабПоставщиков КАК ТабПоставщиков
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоставщикиТоваров КАК ПоставщикиТоваров
	            |		ПО ТабПоставщиков.Код = ПоставщикиТоваров.Код";
	Зап.УстановитьПараметр("ТЗПоставщики", ТаблицаРеквизитовПоставщиков);
	ВыборкаПоставщиков = Зап.Выполнить().Выбрать();
	
	МассивКодов = Новый Массив;
	
	Пока ВыборкаПоставщиков.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПоставщиков.Поставщик) Тогда
			Поставщик = ВыборкаПоставщиков.Поставщик.ПолучитьОбъект();
		Иначе
			Поставщик = Справочники.ПоставщикиТоваров.СоздатьЭлемент();
			Поставщик.Код = ВыборкаПоставщиков.Код;
		КонецеСли;
		
		
		Поставщик.Наименование = ВыборкаПоставщиков.Наименование;
		Поставщик.Инн = ВыборкаПоставщиков.Инн;
		Поставщик.Телефон = ВыборкаПоставщиков.Телефон;
		Поставщик.Записать();
		МассивКодов.Добавить(Поставщик.Код);
	конецЦикла;	
	
	Если МассивКодов.Количество() <> 0 Тогда
		Если МассивКодов.Количество() <> 0 Тогда
			Возврат СнятьРегистрациюСОбъектовЦУ(ОбщееСоединениеHTTP, МассивКодов, IDУзла, "Справочник.ПоставщикиТоваров");
		Иначе
			Возврат Истина;
		КонецЕсли;		
	Иначе
		Возврат Истина;
	КонецеСли;
КонецФункции	


Функция ВыполнитьОбмен_КалендариДоставок(ОбщееСоединениеHTTP = "") Экспорт
	КодУзла = Константы.ИдентификаторМП.Получить();
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ID", КодУзла);
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	ОтветМетода = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getDeliveryCalendars", ОбщееСоединениеHTTP);
	
	
	СтруктураВызова = Новый Структура;
	
	ВозниклаОшибка = Ложь;
	ОтветМетодаСтруктура = ДанныеJSONВСтруктуру(ОтветМетода, , ВозниклаОшибка);
	Если ВозниклаОшибка Тогда
		Возврат Ложь;
	КонецеСли;	   
	
	Если ОтветМетодаСтруктура.result.error Тогда
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ОтветМетодаСтруктура.errorText);
		Возврат Ложь;
	КонецеСли;	
		
	Календари = ОтветМетодаСтруктура.result.arrayOfCalendars;	
	Если Календари.Количество() = 0 Тогда
		Возврат Истина;
	КонецеСли;	
	
	МассивКодов = Новый Массив;
	
	Для Каждого ТекКалендарь Из Календари Цикл
		НайКалендарь = Справочники.КалендариДоставки.НайтиПоКоду(ТекКалендарь.id);
		Если НайКалендарь = Справочники.КалендариДоставки.ПустаяСсылка() Тогда
			Календарь = Справочники.КалендариДоставки.СоздатьЭлемент();
		Иначе
			Календарь = НайКалендарь.ПолучитьОбъект();
		КонецеСли;
		
		Календарь.Код = ТекКалендарь.id;
		Календарь.Наименование = ТекКалендарь.name;
		Календарь.ДнейСМоментаПоступления = ТекКалендарь.countOfDays;
		Календарь.ПометкаУдаления = ТекКалендарь.isDeleted;
		
		Календарь.ДниДоставки.Очистить();
		Для Каждого ТекДень Из ТекКалендарь.days Цикл
			НовДень = Календарь.ДниДоставки.Добавить();
			НовДень.ДеньНедели = ТекДень;
		КонецЦикла;	
		Календарь.Записать();
		МассивКодов.Добавить(Календарь.Код);
	КонецЦикла;	
	
	
	Если МассивКодов.Количество() <> 0 Тогда
		СтруктураВызова.Вставить("ID", КодУзла);
		СтруктураВызова.Вставить("typeMetadata", "Справочник.КалендариДоставки");
		СтруктураВызова.Вставить("numbers", МассивКодов);
		
		СтрокаЗапроса = СформироватьСтрокуJSON(СтруктураВызова);
		СтрокаОтвета = ВызватьФункциюHTTPСервиса(СтрокаЗапроса, "unregisterChanges", ОбщееСоединениеHTTP);
		ВозниклаОшибка = Ложь;
		ДанныеОтвета = ДанныеJSONВСтруктуру(СтрокаОтвета, , ВозниклаОшибка);
		Если ВозниклаОшибка Тогда
			Возврат Ложь;
		КонецеСли;			
		Если ДанныеОтвета.result И Не ДанныеОтвета.error Тогда
			Возврат Истина;
		ИначеЕсли ДанныеОтвета.error Тогда
			ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ДанныеОтвета.errorText);
			Возврат Ложь;
		КонецеСли;	
	Иначе
		Возврат Истина;
	КонецеСли;
КонецФункции	


Функция ВыполнитьОбмен_ВыгрузкаТранзакцийСБП(ОбщееСоединениеHTTP = "") Экспорт
	КодУзла = Константы.ИдентификаторМП.Получить();
	УзелПланаОбмена = Константы.УзелПланаОбмена.Получить();
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ID", КодУзла);
	
	МассивТранзакций = Новый Массив;
	ЗапросТранзакций = Новый Запрос;	
	ЗапросТранзакций.Текст = "ВЫБРАТЬ
	                         |	ТранзакцииСБП.Заказ.Номер КАК order,
	                         |	ТранзакцииСБП.ЭтапПроцессаОплаты КАК stagePaymentProcess,
	                         |	ТранзакцииСБП.Сумма КАК total,
	                         |	ЕСТЬNULL(ТранзакцииСБП.Организация.Код, """") КАК Organization,
	                         |	ТранзакцииСБП.КодСообщения КАК code,
	                         |	ТранзакцииСБП.qrID КАК qrID,
	                         |	ТранзакцииСБП.qrUrl КАК qrUrl,
	                         |	ТранзакцииСБП.СтатусПлатежа КАК paymentStatus,
	                         |	ТранзакцииСБП.ДатаТранзакции КАК transactionDate,
	                         |	ТранзакцииСБП.ИдентификаторТранзакции КАК transactionId,
	                         |	ТранзакцииСБП.Сообщение КАК message,
	                         |	ТранзакцииСБП.Период КАК period
	                         |ИЗ
	                         |	РегистрСведений.ТранзакцииСБП.Изменения КАК ТранзакцииСБПИзменения
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТранзакцииСБП КАК ТранзакцииСБП
	                         |		ПО ТранзакцииСБПИзменения.Период = ТранзакцииСБП.Период
	                         |			И ТранзакцииСБПИзменения.Заказ = ТранзакцииСБП.Заказ
	                         |ГДЕ
	                         |	ТранзакцииСБПИзменения.Узел = &Узел";
	ЗапросТранзакций.УстановитьПараметр("Узел", УзелПланаОбмена);
	РезультатЗапроса = ЗапросТранзакций.Выполнить();
	ВыборкаТранзакций = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаТранзакций.Следующий() Цикл
		СтруктураТранзакции = Новый Структура;
		Для каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
			Если ТекКолонка.Имя = "stagePaymentProcess" Тогда	
				Если ЗначениеЗаполнено(ВыборкаТранзакций.stagePaymentProcess) Тогда
					ИндексЗначенияПеречисления = Перечисления.ЭтапыПроцессаОплатыСБП.Индекс(ВыборкаТранзакций.stagePaymentProcess);
					СтруктураТранзакции.Вставить(ТекКолонка.Имя, Метаданные.Перечисления.ЭтапыПроцессаОплатыСБП.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя);
				Иначе
					СтруктураТранзакции.Вставить(ТекКолонка.Имя, "");
				КонецеСли;	
			ИначеЕсли ТекКолонка.Имя = "paymentStatus" Тогда	
				Если ЗначениеЗаполнено(ВыборкаТранзакций.paymentStatus) Тогда
					ИндексЗначенияПеречисления = Перечисления.СтатусыПлатежаСБП.Индекс(ВыборкаТранзакций.paymentStatus);
					СтруктураТранзакции.Вставить(ТекКолонка.Имя, Метаданные.Перечисления.СтатусыПлатежаСБП.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя);
				Иначе
					СтруктураТранзакции.Вставить(ТекКолонка.Имя, "");
				КонецеСли;
			//ИначеЕсли ТекКолонка.Имя = "order" Тогда	
			//	СтруктураТранзакции.Вставить(ТекКолонка.Имя, СокрЛП(ВыборкаТранзакций[ТекКолонка.Имя]));				
			Иначе	
				СтруктураТранзакции.Вставить(ТекКолонка.Имя, ВыборкаТранзакций[ТекКолонка.Имя]);
			КонецЕсли;	
		КонецЦикла;	
		МассивТранзакций.Добавить(СтруктураТранзакции);
	КонецЦикла;	
	СтруктураВызова.Вставить("arrayOfTransactionQPS", МассивТранзакций);
	Если МассивТранзакций.Количество() = 0 Тогда
		Возврат Истина;
	КонецеСли;	
	
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	ОтветВызоваJSON = ВызватьФункциюHTTPСервиса(СтрокаJSON, "loadTransactionsQPS", ОбщееСоединениеHTTP);
	ВозниклаОшибка = Ложь;
	ОтветВызова = ДанныеJSONВСтруктуру(ОтветВызоваJSON, , ВозниклаОшибка);
	Если ОтветВызова.result Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена.Ссылка, Метаданные.РегистрыСведений.ТранзакцииСБП);
	Иначе
		Возврат Ложь;
	КонецеСли;	
	Возврат Истина;
КонецФункции	


Функция ВыполнитьОбмен_ВыгрузкаТранзакцийAssist(ОбщееСоединениеHTTP = "") Экспорт
	КодУзла = Константы.ИдентификаторМП.Получить();
	УзелПланаОбмена = Константы.УзелПланаОбмена.Получить();
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ID", КодУзла);
	
	МассивТранзакций = Новый Массив;
	ЗапросТранзакций = Новый Запрос;	
	ЗапросТранзакций.Текст = "ВЫБРАТЬ
	                         |	ТранзакцииAssist.Заказ.Номер КАК order,
	                         |	ТранзакцииAssist.Сумма КАК total,
	                         |	ЕСТЬNULL(ТранзакцииAssist.Организация.Код, """") КАК Organization,
	                         |	ТранзакцииAssist.billnumber КАК billnumber,
	                         |	ТранзакцииAssist.Оплачен КАК payed,
	                         |	ТранзакцииAssist.ДатаТранзакции КАК transactionDate,
	                         |	ТранзакцииAssist.ТипОплаты.Код КАК PayType,
	                         |	ТранзакцииAssist.Рейс.НомерРейса КАК route,
	                         |	ЕСТЬNULL(ТранзакцииAssist.Водитель.Код, """") КАК driverId,
	                         |	ЕСТЬNULL(ТранзакцииAssist.Экспедитор.Код, """") КАК forwarderId,
	                         |	ТранзакцииAssist.merchant_id КАК merchant_id,
	                         |	ТранзакцииAssist.Период КАК period,
	                         |	ТранзакцииAssist.ТипОперации КАК OperationType
	                         |ИЗ
	                         |	РегистрСведений.ТранзакцииAssist.Изменения КАК ТранзакцииAssistИзменения
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТранзакцииAssist КАК ТранзакцииAssist
	                         |		ПО ТранзакцииAssistИзменения.Период = ТранзакцииAssist.Период
	                         |			И ТранзакцииAssistИзменения.Заказ = ТранзакцииAssist.Заказ
	                         |ГДЕ
	                         |	ТранзакцииAssistИзменения.Узел = &Узел";
	ЗапросТранзакций.УстановитьПараметр("Узел", УзелПланаОбмена);
	РезультатЗапроса = ЗапросТранзакций.Выполнить();
	ВыборкаТранзакций = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаТранзакций.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаТранзакций.PayType) Тогда
			Продолжить;
		КонецеСли;	
		СтруктураТранзакции = Новый Структура;
		Для каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
			Если ТекКолонка.Имя = "OperationType" Тогда	
				Если ЗначениеЗаполнено(ВыборкаТранзакций.OperationType) Тогда
					ИндексЗначенияПеречисления = Перечисления.ТипыОперацийAssist.Индекс(ВыборкаТранзакций.OperationType);
					СтруктураТранзакции.Вставить(ТекКолонка.Имя, Метаданные.Перечисления.ТипыОперацийAssist.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя);
				Иначе
					СтруктураТранзакции.Вставить(ТекКолонка.Имя, "");
				КонецеСли;	
			Иначе
				СтруктураТранзакции.Вставить(ТекКолонка.Имя, ВыборкаТранзакций[ТекКолонка.Имя]);
			КонецЕсли;	
		КонецЦикла;	
		МассивТранзакций.Добавить(СтруктураТранзакции);
	КонецЦикла;	
	СтруктураВызова.Вставить("arrayOfTransactionAssist", МассивТранзакций);
	Если МассивТранзакций.Количество() = 0 Тогда
		Возврат Истина;
	КонецеСли;	
	
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	ОтветВызоваJSON = ВызватьФункциюHTTPСервиса(СтрокаJSON, "loadTransactionsAssist", ОбщееСоединениеHTTP);
	ВозниклаОшибка = Ложь;
	ОтветВызова = ДанныеJSONВСтруктуру(ОтветВызоваJSON, , ВозниклаОшибка);
	Попытка
		Если ОтветВызова.result Тогда
			//спорное решение, но пока так
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена.Ссылка, Метаданные.РегистрыСведений.ТранзакцииAssist);
		Иначе
			Возврат Ложь;
		КонецеСли;	
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции	


Функция ВыполнитьОбмен_ДанныхИнформированияОИзмененияхВЗаказе(ОбщееСоединениеHTTP = "") Экспорт
	Рейс = ОбщегоНазначенияСервер.ПолучитьТекущийРейс();
	Если Не ЗначениеЗаполнено(Рейс) Тогда
		Возврат Истина;
	КонецЕсли;	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("routeId", Рейс.НомерРейса);
	Транспорт = Константы.Транспорт.Получить().Код;
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	ДанныеИнформированияJSON = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getInformationChangesOrders", ОбщееСоединениеHTTP);
	
	
	ВозниклаОшибка = Ложь;
	ДанныеИнформирования = ДанныеJSONВСтруктуру(ДанныеИнформированияJSON, "period" , ВозниклаОшибка);
	Если ВозниклаОшибка Тогда
		Возврат Ложь;
	КонецеСли;	   
	
	
	Если Не ЗначениеЗаполнено(ДанныеИнформирования.arrayOfChangesOrders) Тогда
		Возврат Истина;
	КонецеСли;	
	
	ТаблицаИнформации = Новый ТаблицаЗначений;
	ТаблицаИнформации.Колонки.Добавить("НомерЗаказа",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	ТаблицаИнформации.Колонки.Добавить("НаименованиеРеквизита", Новый ОписаниеТипов("ПеречислениеСсылка.РеквизитыЗаказа"));
	ТаблицаИнформации.Колонки.Добавить("СтароеЗначение",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));	
	ТаблицаИнформации.Колонки.Добавить("НовоеЗначение",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));	
	ТаблицаИнформации.Колонки.Добавить("ПериодЗаписи",Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	МассивДляОтправки = Новый Массив;
	
	Для Каждого Тек Из ДанныеИнформирования.arrayOfChangesOrders Цикл
		Нов = ТаблицаИнформации.Добавить();
		Нов.НомерЗаказа = Тек.order;
		Нов.НаименованиеРеквизита = Перечисления.РеквизитыЗаказа[Тек.property];
		Нов.СтароеЗначение = Тек.oldValue;
		Нов.НовоеЗначение = Тек.newValue;
		Нов.ПериодЗаписи = Тек.period;
		
		//Копирование данных для отправки
		КопияСтруктуры = Новый Структура;
		Для Каждого ЭлементСтруктуры Из Тек Цикл
			КопияСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		КопияСтруктуры.Вставить("routeId", Рейс.НомерРейса);
		КопияСтруктуры.Вставить("carId", Транспорт);
		КопияСтруктуры.Вставить("period", ТекущаяДата());
		МассивДляОтправки.Добавить(КопияСтруктуры);
	КонецЦикла;	
	
	
	ЗапросМассивИнформации = Новый Запрос;
	ЗапросМассивИнформации.Текст = "ВЫБРАТЬ
	                         |	Таб.НомерЗаказа КАК НомерЗаказа,
	                         |	Таб.НаименованиеРеквизита КАК НаименованиеРеквизита,
	                         |	Таб.СтароеЗначение КАК СтароеЗначение,
	                         |	Таб.НовоеЗначение КАК НовоеЗначение,
							 |	Таб.ПериодЗаписи КАК ПериодЗаписи
	                         |ПОМЕСТИТЬ ВТ_Данные
	                         |ИЗ
	                         |	&Таб КАК Таб
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ВТ_Данные.НомерЗаказа КАК НомерЗаказа,
	                         |	ВТ_Данные.НаименованиеРеквизита КАК НаименованиеРеквизита,
	                         |	ВТ_Данные.СтароеЗначение КАК СтароеЗначение,
	                         |	ВТ_Данные.НовоеЗначение КАК НовоеЗначение,
							 |	ВТ_Данные.ПериодЗаписи КАК ПериодЗаписи,
	                         |	Заказ.Ссылка КАК Заказ
	                         |ИЗ
	                         |	ВТ_Данные КАК ВТ_Данные
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
	                         |		ПО ВТ_Данные.НомерЗаказа = Заказ.Номер";
	ЗапросМассивИнформации.УстановитьПараметр("Таб", ТаблицаИнформации);
	
	МассивИнформации = ЗапросМассивИнформации.Выполнить().Выбрать();
	
	//поиск причны отмены
	
	РезультатОтмены = "";
	РезультатПереноса = "";
	
	ЗапРезультаты = Новый Запрос;
	ЗапРезультаты.Текст = "ВЫБРАТЬ
	                      |	РезультатыДоставки.Ссылка КАК Отмена,
	                      |	"""" КАК Перенос
	                      |ИЗ
	                      |	Справочник.РезультатыДоставки КАК РезультатыДоставки
	                      |ГДЕ
	                      |	РезультатыДоставки.Отмена = ИСТИНА
	                      |	И РезультатыДоставки.Заезд = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	"""",
	                      |	РезультатыДоставки.Ссылка
	                      |ИЗ
	                      |	Справочник.РезультатыДоставки КАК РезультатыДоставки
	                      |ГДЕ
	                      |	РезультатыДоставки.Перенос = ИСТИНА
	                      |	И РезультатыДоставки.Заезд = ЛОЖЬ";
	ВыбРезультаты = ЗапРезультаты.Выполнить().Выбрать();
	Пока ВыбРезультаты.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыбРезультаты.Отмена) Тогда
			РезультатОтмены = ВыбРезультаты.Отмена;
		КонецеСли;	
			
		Если ЗначениеЗаполнено(ВыбРезультаты.Перенос) Тогда
			РезультатПереноса = ВыбРезультаты.Перенос;
		КонецеСли;	
	КонецЦикла;	
	
	Пока МассивИнформации.Следующий() Цикл
		Наб = РегистрыСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах.СоздатьНаборЗаписей();
		Наб.Отбор.Период.Установить(МассивИнформации.ПериодЗаписи);
		Наб.Отбор.Заказ.Установить(МассивИнформации.Заказ);
		Наб.Отбор.Реквизит.Установить(МассивИнформации.НаименованиеРеквизита);
		
		Нов = Наб.Добавить();
		Нов.Период = МассивИнформации.ПериодЗаписи;
		Нов.Заказ = МассивИнформации.Заказ;
		Нов.Реквизит = МассивИнформации.НаименованиеРеквизита;
		Нов.Рейс = Рейс;
		Если МассивИнформации.НаименованиеРеквизита = Перечисления.РеквизитыЗаказа.ДатаДоставки Тогда
			Нов.СтароеЗначение = Дата(МассивИнформации.СтароеЗначение);
			Нов.НовоеЗначение = Дата(МассивИнформации.НовоеЗначение);
		Иначе
			Нов.СтароеЗначение = МассивИнформации.СтароеЗначение;
			Нов.НовоеЗначение = МассивИнформации.НовоеЗначение;
		КонецеСли;
		
		Если МассивИнформации.НаименованиеРеквизита = Перечисления.РеквизитыЗаказа.ЗапросНаСвязьОтПолучателя Тогда
			Нов.НовоеЗначение = Дата(МассивИнформации.НовоеЗначение);
		КонецеСли;
		
		
		Наб.Записать();
		
		
		
		//переносим заказ в отклоненные или меняем дату доставки
		Заказ = МассивИнформации.Заказ.ПолучитьОбъект();
		Если МассивИнформации.НаименованиеРеквизита = Перечисления.РеквизитыЗаказа.СостояниеЗаказаОтменен Тогда
			Заказ.РезультатДоставки = РезультатОтмены;
			Заказ.Записать(РежимЗаписиДокумента.Запись);
			Документы.ДанныеЗаказаВодителя.ЭмуляцияВводаДанныхВодителемПоИнициативеПартнера(Заказ.Ссылка, РезультатОтмены);
		Конецесли;	
		
		Если МассивИнформации.НаименованиеРеквизита = Перечисления.РеквизитыЗаказа.ДатаДоставки Тогда
			Заказ.РезультатДоставки = РезультатПереноса;
			Заказ.Записать(РежимЗаписиДокумента.Запись);
			Документы.ДанныеЗаказаВодителя.ЭмуляцияВводаДанныхВодителемПоИнициативеПартнера(Заказ.Ссылка, РезультатОтмены, Дата(МассивИнформации.НовоеЗначение));
		Конецесли;	
	КонецЦикла;	
	
	Если МассивДляОтправки.Количество() <> 0 Тогда
		ОтветВызова = ВыполнитьОбмен_ДанныхИнформированияОИзмененияхВЗаказе_ОтМП(ОбщееСоединениеHTTP, "ИзменениеПереданоВМП", МассивДляОтправки);
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции	


Функция ВыполнитьОбмен_ДанныхИнформированияОИзмененияхВЗаказе_ОтМП(ОбщееСоединениеHTTP = "", СтатусИнформирования, МассивИнформацииИзвне = Неопределено) Экспорт
	КодУзла = Константы.ИдентификаторМП.Получить();
	УзелПланаОбмена = Константы.УзелПланаОбмена.Получить();
	Транспорт = Константы.Транспорт.Получить().Код;
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ID", КодУзла);
	СтруктураВызова.Вставить("changeStatus", СтатусИнформирования);
	
	МассивИнформации = Новый Массив;
	ЗапросИнформации = Новый Запрос;
	Если СтатусИнформирования = "ИзменениеПереданоВМП" Тогда
		СтруктураВызова.Вставить("arrayOfChangesOrders", МассивИнформацииИзвне);
	ИначеЕсли СтатусИнформирования = "ИзменениеПросмотреноВМП" Тогда	
		ЗапросИнформации.Текст = "ВЫБРАТЬ
		                         |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.Заказ.Номер КАК order,
		                         |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.Период КАК period,
		                         |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.Реквизит КАК property,
		                         |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.Рейс.НомерРейса КАК routeID,
		                         |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.СтароеЗначение КАК oldValue,
		                         |	ИнформированиеЭкипажейОбИзмененияхВЗаказах.НовоеЗначение КАК newValue
		                         |ИЗ
		                         |	РегистрСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах.Изменения КАК ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения
		                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах КАК ИнформированиеЭкипажейОбИзмененияхВЗаказах
		                         |		ПО ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Период = ИнформированиеЭкипажейОбИзмененияхВЗаказах.Период
		                         |			И ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Заказ = ИнформированиеЭкипажейОбИзмененияхВЗаказах.Заказ
		                         |			И ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Реквизит = ИнформированиеЭкипажейОбИзмененияхВЗаказах.Реквизит
		                         |ГДЕ
		                         |	ИнформированиеЭкипажейОбИзмененияхВЗаказахИзменения.Узел = &Узел";
		
		
		ЗапросИнформации.УстановитьПараметр("Узел", УзелПланаОбмена);
		РезультатЗапроса = ЗапросИнформации.Выполнить();
		ВыборкаИнформации = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИнформации.Следующий() Цикл
			СтруктураИнформации = Новый Структура;
			Для каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
				Если ТекКолонка.Имя = "property" Тогда	
					Если ЗначениеЗаполнено(ВыборкаИнформации.property) Тогда
						ИндексЗначенияПеречисления = Перечисления.РеквизитыЗаказа.Индекс(ВыборкаИнформации.property);
						СтруктураИнформации.Вставить(ТекКолонка.Имя, Метаданные.Перечисления.РеквизитыЗаказа.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя);
					Иначе
						СтруктураИнформации.Вставить(ТекКолонка.Имя, "");
					КонецеСли;
				Иначе	
					СтруктураИнформации.Вставить(ТекКолонка.Имя, ВыборкаИнформации[ТекКолонка.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			СтруктураИнформации.Вставить("carID", Транспорт);
			МассивИнформации.Добавить(СтруктураИнформации);
		КонецЦикла;	
		
		Если МассивИнформации.Количество() = 0 Тогда
			Возврат Истина;
		КонецеСли;	
			
		СтруктураВызова.Вставить("arrayOfChangesOrders", МассивИнформации);
	КонецеСли;

	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	ОтветВызоваJSON = ВызватьФункциюHTTPСервиса(СтрокаJSON, "setInformationChangesOrders", ОбщееСоединениеHTTP);
	ВозниклаОшибка = Ложь;
	ОтветВызова = ДанныеJSONВСтруктуру(ОтветВызоваJSON, , ВозниклаОшибка);
	Если ОтветВызова.result И СтатусИнформирования = "ИзменениеПросмотреноВМП" Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена.Ссылка, Метаданные.РегистрыСведений.ИнформированиеЭкипажейОбИзмененияхВЗаказах);
	ИначеЕсли СтатусИнформирования = "ИзменениеПереданоВМП" и ОтветВызова.result Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецеСли;	
	Возврат Истина;
КонецФункции	


Функция МаршрутизацияЯндекс_ПолучитьТекстЗапросаНаСервереПоРейсу(ОбщееСоединениеHTTP = "", НомерРейса, МассивСтруктурЗаказов = Неопределено) Экспорт
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("tripId", НомерРейса);
	Если МассивСтруктурЗаказов <> Неопределено Тогда
		СтруктураВызова.Вставить("orders", МассивСтруктурЗаказов);
	КонецеСли;	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getTextYandexRouting", ОбщееСоединениеHTTP);
	
	ОтветМетода = Новый Структура;
	
	ВозниклаОшибка = Ложь;
	ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
	Если ВозниклаОшибка Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	КонецеСли;	   
	
	
	Если Не ЗначениеЗаполнено(ДанныеВызова.textQuery) Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	Иначе
		ОтветМетода.Вставить("РезультатВызова", Истина);
		ОтветМетода.Вставить("ТекстЗапроса", ДанныеВызова.textQuery);
		Возврат ОтветМетода;
	КонецеСли;	
КонецФункции

Функция МаршрутизацияЯндекс_НачатьМаршрутизациюНаСервереПоРейсу(ОбщееСоединениеHTTP = "", НомерРейса, МассивСтруктурЗаказов = Неопределено, ДанныеТекущейТочки = Неопределено, ВыбранноеВремя, ДанныеФинальнойТочки = Неопределено, УчитыватьПорядок = Ложь) Экспорт
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("tripId", НомерРейса);
	Если МассивСтруктурЗаказов <> Неопределено Тогда
		СтруктураВызова.Вставить("orders", МассивСтруктурЗаказов);
	КонецеСли;	
	
	
	Если ВыбранноеВремя <> Неопределено Тогда
		СтруктураВызова.Вставить("startTime", ВыбранноеВремя);
	КонецеСли;	
	
	Если УчитыватьПорядок Тогда
		СтруктураВызова.Вставить("useRouteIndex", Истина);
	конецеСли;	
		
	Если ДанныеТекущейТочки <> Неопределено Тогда
		СтруктураВызова.Вставить("currentPoint", ДанныеТекущейТочки);
	КонецеСли;	
	
	Если ДанныеФинальнойТочки <> Неопределено Тогда
		//СтруктураВызова.Вставить("pointReturnAddress", Строка(ДанныеФинальнойТочки.Широта) + ";" + Строка(ДанныеФинальнойТочки.Долгота));
		СтруктураВызова.Вставить("pointReturnAddress", ДанныеФинальнойТочки);
	КонецеСли;	
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "putTaskYandexRouting", ОбщееСоединениеHTTP);
	
	ОтветМетода = Новый Структура;
	
	ВозниклаОшибка = Ложь;
	ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
	Если ВозниклаОшибка Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	КонецеСли;	   
	
	
	Если Не ЗначениеЗаполнено(ДанныеВызова.idQuery) Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	Иначе
		ОтветМетода.Вставить("РезультатВызова", Истина);
		ОтветМетода.Вставить("ИдЗапроса", ДанныеВызова.idQuery);
		Возврат ОтветМетода;
	КонецеСли;	
КонецФункции

Функция МаршрутизацияЯндекс_ПолучитьДанныеМаршрутизацииНаСервереПоРейсу(ОбщееСоединениеHTTP = "", идЗапроса, НомерРейса, Рейс = Неопределено) Экспорт
	СтруктураВызова = Новый Структура;   
	КодУзла = Константы.ИдентификаторМП.Получить();
	
	СтруктураВызова.Вставить("idQuery", идЗапроса);
	СтруктураВызова.Вставить("tripId", НомерРейса);
	СтруктураВызова.Вставить("ID", КодУзла);
	
	Если Рейс <> Неопределено Тогда
		ДанныеРейса = МаршрутизацияСервер.ПолучитьДопПараметрыРейсаЯМаршрутизации(Рейс);
		СтруктураВызова.Вставить("routeData", ДанныеРейса);
	КонецЕСли;	
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getResultTaskYandexRouting", ОбщееСоединениеHTTP);
	
	ОтветМетода = Новый Структура;
	
	ВозниклаОшибка = Ложь;
	
	//МассивЗначенийДат = Новый Массив;
	//МассивЗначенийДат.Добавить("timeOfArrival");         МассивЗначенийДат
	
	ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
	
	Если ВозниклаОшибка Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	КонецеСли;	   
	
	Если ДанныеВызова.Свойство("routing") Тогда
		Если Не ЗначениеЗаполнено(ДанныеВызова.routing) Тогда
			ОтветМетода.Вставить("РезультатВызова", Ложь);
			Возврат ОтветМетода;
		Иначе
			ОтветМетода.Вставить("РезультатВызова", Истина);
			ОтветМетода.Вставить("ДанныеМаршрутизации", ДанныеВызова.routing);
			Возврат ОтветМетода;
		КонецеСли;	
	Иначе
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	КонецеСли;
КонецФункции


Функция РаспознатьАдрес(ОбщееСоединениеHTTP = "", Адрес) Экспорт
	СтруктураВызова = Новый Структура;   
	КодУзла = Константы.ИдентификаторМП.Получить();
	
	СтруктураВызова.Вставить("Address", Адрес);
	
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getAdressCoordinates", ОбщееСоединениеHTTP);
	
	ОтветМетода = Новый Структура;
	
	ВозниклаОшибка = Ложь;
	
	
	ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
	
	Если ВозниклаОшибка Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	КонецеСли;	   
	
	Если ДанныеВызова.Свойство("error") Тогда
		Если ДанныеВызова.error Тогда
			ОтветМетода.Вставить("РезультатВызова", Ложь);
			ОтветМетода.Вставить("ОписаниеОшибки", ДанныеВызова.errorText);
			Возврат ОтветМетода;
		КонецеСли;
	КонецеСли;	
			
	
	
	Если ДанныеВызова.Свойство("location") Тогда
		ОтветМетода.Вставить("РезультатВызова", Истина);
		ОтветМетода.Вставить("Широта", ДанныеВызова.location.lat);
		ОтветМетода.Вставить("Долгота", ДанныеВызова.location.long);
		ОтветМетода.Вставить("РаспАдрес", ДанныеВызова.location.addressLocation);
		Возврат ОтветМетода;
	Иначе
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		Возврат ОтветМетода;
	КонецеСли;
КонецФункции


Функция Маршрутизация_ВыгрузитьДанныеРучнойМаршрутизации(ОбщееСоединениеHTTP = "", НомерРейса, Маршрут) Экспорт
	КодУзла = Константы.ИдентификаторМП.Получить();
	УзелПланаОбмена = Константы.УзелПланаОбмена.Получить();
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ID", КодУзла);
	СтруктураВызова.Вставить("tripID", НомерРейса);
	СтруктураВызова.Вставить("routing", Маршрут);
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	
	
	ОтветВызоваJSON = ВызватьФункциюHTTPСервиса(СтрокаJSON, "unloadRoutingData", ОбщееСоединениеHTTP);
	ВозниклаОшибка = Ложь;
	ОтветВызова = ДанныеJSONВСтруктуру(ОтветВызоваJSON, , ВозниклаОшибка);
	Если Не ВозниклаОшибка Тогда
		Если Не ОтветВызова.error Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецеСли;	
	Иначе
		Возврат Ложь;
	КонецеСли;
	
КонецФункции

Функция ПолучитьКодДоступаКРММаршрутизации(ОбщееСоединениеHTTP = "", Рейс) Экспорт


	Попытка
		СтруктураВызова = Новый Структура;   
		КодУзла = Константы.ИдентификаторМП.Получить();
		
		СтруктураВызова.Вставить("regionId", СокрЛП(ПараметрыСеанса.Регион.Код));
		СтруктураВызова.Вставить("idRoute", СокрЛП(Рейс.НомерРейса));
		СтруктураВызова.Вставить("ID", СокрЛП(КодУзла));
		
		СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
		//
		//ОбщегоНазначения.ЗаписатьОшибкуВЛог(СтрокаJSON);
		//
		РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getAccessCodeRoutingWorkplace", ОбщееСоединениеHTTP);
		
		ОтветМетода = Новый Структура;
		
		ВозниклаОшибка = Ложь;
		
		
		ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
		ДанныеВызова = ДанныеВызова.result;
		
		Если ВозниклаОшибка Тогда
			ОтветМетода.Вставить("РезультатВызова", Ложь);
			ОтветМетода.Вставить("ОписаниеОшибки", "Возникла ошибка при запросе кода доступа!");
			Возврат ОтветМетода;
		КонецеСли;	   
		
		Если ДанныеВызова.Свойство("error") Тогда
			Если ДанныеВызова.error Тогда
				ОтветМетода.Вставить("РезультатВызова", Ложь);
				ОтветМетода.Вставить("ОписаниеОшибки", ДанныеВызова.errorText);
				Возврат ОтветМетода;
			КонецеСли;
		КонецеСли;	
		
		
		
		Если ДанныеВызова.Свойство("code") Тогда
			ОтветМетода.Вставить("РезультатВызова", Истина);
			ОтветМетода.Вставить("Код", ДанныеВызова.code);
			Возврат ОтветМетода;
		Иначе
			ОтветМетода.Вставить("РезультатВызова", Ложь);
			Возврат ОтветМетода;
		КонецеСли;
	Исключение
		ТОшибки = ОписаниеОшибки();
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ТОшибки);
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		ОтветМетода.Вставить("ОписаниеОшибки", ТОшибки);
		Возврат ОтветМетода;
	КонецПопытки;
КонецФункции

// Выполнить обмен региональные терминалы.
// 
// Параметры:
//  ОбщееСоединениеHTTP - Строка - Общее соединение HTTP
//  IDУзла - Строка -  IDУзла
// 
// Возвращаемое значение:
//  Булево, Структура - Выполнить обмен региональные терминалы:
// * РезультатВызова - Булево - 
// * ОписаниеОшибки - Строка - 
Функция ВыполнитьОбмен_РегиональныеТерминалы(ОбщееСоединениеHTTP = "", IDУзла) Экспорт
	Попытка		
		СтруктураВызова = Новый Структура;   
		СтруктураВызова.Вставить("ID", СокрЛП(IDУзла));
		СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
		
		РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getRegions", ОбщееСоединениеHTTP);
		
		ОтветМетода = Новый Структура;
		
		ВозниклаОшибка = Ложь;
		
		МассивКодов = Новый Массив;
		
		ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
		ДанныеВызова = ДанныеВызова.result;
		
		Если ВозниклаОшибка Тогда
			ОтветМетода.Вставить("РезультатВызова", Ложь);
			ОтветМетода.Вставить("ОписаниеОшибки", "Возникла ошибка при запросе списка регионов!");
			Возврат ОтветМетода;
		КонецеСли;	   
		

		
		Если ДанныеВызова.Свойство("arrayOfRegions") Тогда
			Для Каждого ТекРегион Из ДанныеВызова.arrayOfRegions Цикл
				
				НайРегион = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТекРегион.Code);
				Если НайРегион.Пустая() Тогда
					Регион = Справочники.РегиональныеТерминалы.СоздатьЭлемент();	
					Регион.Код = ТекРегион.code;
				Иначе
					Регион = НайРегион.получитьОбъект();	
				Конецесли;		
				Регион.Наименование = ТекРегион.name;
				
				Регион.НачальнаяШиротаЗоны = ТекРегион.minLat;
				Регион.НачальнаяДолготаЗоны = ТекРегион.minLong;
				Регион.КонечнаяШиротаЗоны = ТекРегион.maxLat;
				Регион.КонечнаяДолготаЗоны = ТекРегион.maxLong;
				
				Регион.ксАдресСервера = ТекРегион.cashServerAdress;
				Регион.ксИмяПользователя = ТекРегион.cashUserName;
				Регион.ксПарольПользователя = ТекРегион.cashUserPassword;
				Регион.НомерТелефонаСтаршегоЛогиста = ТекРегион.phoneNumberSeniorLogist;
				
				Регион.РежимПечатиЧековРМЭкипажа = Перечисления.ВариантыПечатиЧековРМЭкипажа[ТекРегион.checkPrintingMode]; 
				Регион.НачалоИнтервалаДоставкиВОбласти = ТекРегион.startOfDeliveryIntervalInTheArea;
				Регион.ОкончаниеИнтервалаДоставкиВОбласти = ТекРегион.endOfDeliveryIntervalInTheArea;
				
				Регион.ШиротаЦентраЗоны = ТекРегион.latCenterZone;
				Регион.ДолготаЦентраЗоны = ТекРегион.longCenterZone;			
				
				Регион.Записать();

				МассивКодов.Добавить(ТекРегион.code);
				
			КонецЦикла;	
			Если МассивКодов.Количество() <> 0 Тогда
				Возврат СнятьРегистрациюСОбъектовЦУ(ОбщееСоединениеHTTP, МассивКодов, IDУзла, "Справочник.РегиональныеТерминалы");
			Иначе
				Возврат Истина;
			КонецЕсли;		
		Иначе
			Возврат Ложь;
		КонецеСли;
	Исключение
		ТОшибки = ОписаниеОшибки();
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ТОшибки);
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		ОтветМетода.Вставить("ОписаниеОшибки", ТОшибки);
		Возврат ОтветМетода;
	КонецПопытки;	

КонецФункции

// Выполнить обмен список серверов обмена.
// 
// Параметры:
//  ОбщееСоединениеHTTP - Строка - Общее соединение HTTP
// 
// Возвращаемое значение:
//  Булево, Структура - Выполнить обмен список серверов обмена:
// * РезультатВызова - Булево - 
// * ОписаниеОшибки - Строка -  
Функция ВыполнитьОбмен_СписокСерверовОбмена(ОбщееСоединениеHTTP = "") Экспорт
	Попытка		
		РезультатВызова = ВызватьФункциюHTTPСервиса("", "getServersIPs", ОбщееСоединениеHTTP);
		
		ОтветМетода = Новый Структура;
		
		ВозниклаОшибка = Ложь;
		
		ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
		ДанныеВызова = ДанныеВызова.result;
		
		Если ВозниклаОшибка Тогда
			ОтветМетода.Вставить("РезультатВызова", Ложь);
			ОтветМетода.Вставить("ОписаниеОшибки", "Возникла ошибка при запросе списка IP обмена!");
			Возврат ОтветМетода;
		КонецеСли;	   
		

		
		Если ДанныеВызова.Свойство("arrayOfIPs") Тогда
			НабЗаписей = РегистрыСведений.АдресаОбменаСЦУ.СоздатьНаборЗаписей();
			НабЗаписей.Отбор.ВстроенныйАдрес.Установить(Ложь);
			Для Каждого ТекАдрес Из ДанныеВызова.arrayOfIPs Цикл
				НовЗапись = НабЗаписей.Добавить();
				НовЗапись.Терминал = Справочники.РегиональныеТерминалы.НайтиПоКоду(ТекАдрес.regionID);
				НовЗапись.Адрес = ТекАдрес.address;
				НовЗапись.Приоритет = ТекАдрес.priority;
			КонецЦикла;	
			НабЗаписей.Записать();
			Возврат Истина;		
		Иначе
			Возврат Ложь;
		КонецеСли;
	Исключение
		ТОшибки = ОписаниеОшибки();
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ТОшибки);
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		ОтветМетода.Вставить("ОписаниеОшибки", ТОшибки);
		Возврат ОтветМетода;
	КонецПопытки;	
КонецФункции

// Выполнить обмен список типов документов прикрепленные файлы.
// 
// Параметры:
//  ОбщееСоединениеHTTP - Строка - Общее соединение HTTP
//  IDУзла - Строка - IDУзла
//  	
// Возвращаемое значение:
//  Булево, Структура - Выполнить обмен список типов документов прикрепленные файлы:
// * РезультатВызова - Булево - 
// * ОписаниеОшибки - Строка -  
Функция ВыполнитьОбмен_СписокТиповДокументовПрикрепленныеФайлы(ОбщееСоединениеHTTP = "", IDУзла) Экспорт
	Попытка				
	
		СтруктураВызова = Новый Структура;   
		СтруктураВызова.Вставить("ID", СокрЛП(IDУзла));
		СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
		
		РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getTypesAttachedDocs", ОбщееСоединениеHTTP);
		
		ОтветМетода = Новый Структура;
		МассивКодов = Новый Массив;
		ВозниклаОшибка = Ложь;
		
		ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
		ДанныеВызова = ДанныеВызова.result;
		
		Если ВозниклаОшибка Тогда
			ОтветМетода.Вставить("РезультатВызова", Ложь);
			ОтветМетода.Вставить("ОписаниеОшибки", "Возникла ошибка при запросе списка IP обмена!");
			Возврат ОтветМетода;
		КонецеСли;	   
		
		Если ДанныеВызова.Свойство("arrayOfTypesAttachedDocs") Тогда
			Для Каждого ТекТипДокумента Из ДанныеВызова.arrayOfTypesAttachedDocs Цикл
				Най = Справочники.ТипыПрикрепленныхДокументов.НайтиПоКоду(ТекТипДокумента.id);
				Если Най.Пустая() Тогда
					ТипПрикрепленногоДокументаОбъект = Справочники.ТипыПрикрепленныхДокументов.СоздатьЭлемент();
				Иначе
					ТипПрикрепленногоДокументаОбъект = Най.получитьОбъект();
				КонецЕсли;	
				
				ТипПрикрепленногоДокументаОбъект.Код = ТекТипДокумента.id;
				ТипПрикрепленногоДокументаОбъект.Наименование = ТекТипДокумента.name;
				ТипПрикрепленногоДокументаОбъект.ДоступенВыборВМП = ТекТипДокумента.enabledForMA;
				ТипПрикрепленногоДокументаОбъект.ПрефиксИмениФайла = ТекТипДокумента.filePrefix;
				ТипПрикрепленногоДокументаОбъект.КачествоФото = ТекТипДокумента.photoQuality;
				ТипПрикрепленногоДокументаОбъект.ЧерноБелоеФото = ТекТипДокумента.blackAndWhitePhoto;
				ТипПрикрепленногоДокументаОбъект.ОтметкаНаФотоснимке = ТекТипДокумента.photoMark;
				
				ТипПрикрепленногоДокументаОбъект.ДоступностьПоТипамЗаказов.Очистить();
				
				Для Каждого ТекДоступность Из ТекТипДокумента.availability Цикл
					Нов = ТипПрикрепленногоДокументаОбъект.ДоступностьПоТипамЗаказов.Добавить();
					Нов.ТипЗаказа = Перечисления.ТипыЗаказов[ТекДоступность.orderType];
					Нов.Доступен = ТекДоступность.available;
				КонецЦикла;
				
				ТипПрикрепленногоДокументаОбъект.Записать();
				МассивКодов.Добавить(ТекТипДокумента.id);
								
			КонецЦикла;
			Если МассивКодов.Количество() <> 0 Тогда
				Возврат СнятьРегистрациюСОбъектовЦУ(ОбщееСоединениеHTTP, МассивКодов, IDУзла, "Справочник.ТипыПрикрепленныхДокументов");
			Иначе
				Возврат Истина;
			КонецЕсли;		
		КонецЕсли;
	Исключение
		ТОшибки = ОписаниеОшибки();
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ТОшибки);
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		ОтветМетода.Вставить("ОписаниеОшибки", ТОшибки);
		Возврат ОтветМетода;
	КонецПопытки;	
КонецФункции

// Выполнить обмен выгрузить прикрепленные файлы.
// 
// Параметры:
//  ОбщееСоединениеHTTP - Строка - Общее соединение HTTP
//  IDУзла - Строка - IDУзла
// 
// Возвращаемое значение:
//  Булево - Выполнить обмен выгрузить прикрепленные файлы
Функция ВыполнитьОбмен_ВыгрузитьПрикрепленныеФайлы(ОбщееСоединениеHTTP = "", IDУзла) Экспорт
	Зап = Новый Запрос;
	УзелОбмена = Константы.УзелПланаОбмена.Получить();
	Зап.Текст = "ВЫБРАТЬ
	            |	ПрикрепленныеФайлыИзменения.Заказ.Код КАК orderId,
	            |	ПрикрепленныеФайлыИзменения.Данные.ТипДокумента.Код КАК typeDoc,
	            |	ПрикрепленныеФайлыИзменения.Данные.РасширениеДокумента КАК nameExt,
	            |	ПрикрепленныеФайлыИзменения.Данные.ДатаСоздания КАК createDate,
	            |	ПрикрепленныеФайлыИзменения.Данные.Наименование КАК name,
	            |	ПрикрепленныеФайлыИзменения.Данные.Код КАК id,
	            |	ПрикрепленныеФайлыИзменения.Данные.Ссылка КАК Данные,
	            |	ПрикрепленныеФайлы.Заказ.ТипЗаказа КАК ТипЗаказа
	            |ИЗ
	            |	РегистрСведений.ПрикрепленныеФайлы.Изменения КАК ПрикрепленныеФайлыИзменения
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	            |		ПО ПрикрепленныеФайлыИзменения.Период = ПрикрепленныеФайлы.Период
	            |ГДЕ
	            |	ПрикрепленныеФайлыИзменения.Узел = &Узел";
	
	Зап.УстановитьПараметр("Узел", УзелОбмена);
	Выб = Зап.Выполнить().Выбрать();
	
	ШаблонСтруктурыФайл = Новый ФиксированнаяСтруктура("orderId, typeDoc, nameExt, createDate, name, id, Данные, ТипЗаказа");
	
	
	
	МассивСтруктур = Новый Массив;
	
	Пока Выб.Следующий() Цикл
		СтруктураФайл = Новый Структура(ШаблонСтруктурыФайл); 
		ЗаполнитьЗначенияСвойств(СтруктураФайл, Выб);
		СтруктураФайл.data = Выб.Данные.Данные;
		
		ИндексЗначенияПеречисления = Перечисления.ТипыЗаказов.Индекс(Выб.ТипЗаказа);
		СтруктураФайл.orderType = Метаданные.Перечисления.ТипыЗаказов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		МассивСтруктур.Добавить(СтруктураФайл);
	КонецЦикла;	
	
	
	Если МассивСтруктур.Количество() <> 0 Тогда
		СтруктураЗапроса = Новый Структура("ID, arrayOfAttachedDocs");
		СтруктураЗапроса.arrayOfAttachedDocs = МассивСтруктур;
		СтруктураЗапроса.ID = СокрЛП(IDУзла);		
		СтрокаJSON = СформироватьСтрокуJSON(СтруктураЗапроса);
		
		РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "unloadAttachedDocs", ОбщееСоединениеHTTP);
		

		Если Не РезультатВызова.result.error Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Метаданные.РегистрыСведений.ПрикрепленныеФайлы);
			Возврат Истина;
		Иначе
			ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог("Ошибка вызова метода http unloadAttachedDocs");
			Возврат Ложь;	
		КонецеСли;
	КонецеСли;
КонецФункции

// Выполнить обмен получить параметры.
// 
// Параметры:
//  ОбщееСоединениеHTTP - Строка - Общее соединение HTTP
//  IDУзла - Строка - IDУзла
// 
// Возвращаемое значение:
//  Структура - Выполнить обмен получить параметры:
// * РезультатВызова - Булево - 
// * ОписаниеОшибки - Строка - 
Функция ВыполнитьОбмен_ПолучитьПараметры(ОбщееСоединениеHTTP = "", IDУзла) Экспорт
	СтруктураВызова = Новый Структура;   
	СтруктураВызова.Вставить("ID", СокрЛП(IDУзла));
	ТранспортМП = Константы.ТранспортМП.Получить();
	Если ЗначениеЗаполнено(ТранспортМП) Тогда
		//@skip-check reading-attribute-from-database
		СтруктураВызова.Вставить("IDCar", Константы.ТранспортМП.Получить().Код);
	Иначе
		СтруктураВызова.Вставить("IDCar", "");				
	КонецеСли;		
	СтрокаJSON = СформироватьСтрокуJSON(СтруктураВызова);
	
	РезультатВызова = ВызватьФункциюHTTPСервиса(СтрокаJSON, "getParameters", ОбщееСоединениеHTTP);
	
	ОтветМетода = Новый Структура;
	ВозниклаОшибка = Ложь;
	
	ДанныеВызова = ДанныеJSONВСтруктуру(РезультатВызова, , ВозниклаОшибка);
	ДанныеВызова = ДанныеВызова.result;
	
	Если ВозниклаОшибка Тогда
		ОтветМетода.Вставить("РезультатВызова", Ложь);
		ОтветМетода.Вставить("ОписаниеОшибки", "Возникла ошибка при запросе списка IP обмена!");
		Возврат ОтветМетода;
	КонецеСли;	   
	
	
	АвтоЛогин = Ложь;
	
	Если ДанныеВызова.Свойство("arrayOfParameters") Тогда
		Для Каждого ТекПарам Из ДанныеВызова.arrayOfParameters Цикл
			Если ТекПарам.name = "remoteClosing" Тогда
				Если ТекПарам.value = "0" Тогда
					Константы.ИспользоватьУдаленноеЗакрытие.Установить(Ложь);
				ИначеЕсли ТекПарам.value = "1" Тогда	
					Константы.ИспользоватьУдаленноеЗакрытие.Установить(Истина);
				КонецеСли;
			КонецЕсли;
			
			Если ТекПарам.name = "periodCheckingOfTimeInterval" Тогда
				Константы.ИнтервалПроверкиОкончанияИнтервалаДоставки.Установить(Число(ТекПарам.value));
			КонецЕсли;
			
			Если ТекПарам.name = "depthOfIntervalCheckingOfTimeInterval" Тогда
				Константы.ГлубинаПросмотраИнтервалаДоставкиВМинутах.Установить(Число(ТекПарам.value));
			КонецЕсли;
			
			
			Если ТекПарам.name = "autoLogin" Тогда
				Константы.Автологин.Установить(Число(ТекПарам.value));
				Автологин = Булево(Число(ТекПарам.value));
			КонецЕсли;
			
			Если ТекПарам.name = "periodAutoExchange" Тогда
				Константы.ИнтервалОбменаСЦУ.Установить(Число(ТекПарам.value));
			КонецЕсли;
			
			
			Если ТекПарам.name = "depthOfIntervalAutoLogin" Тогда
				ЗначениеПараметра = Число(ТекПарам.value);
				Если АвтоЛогин И ЗначениеПараметра = 0 Тогда
					ЗначениеПараметра = 10;
				КонецеСли;	
				Константы.ПериодХраненияПароляПриАвтологине.Установить(ЗначениеПараметра);
			КонецЕсли;
			
			
			Если ТекПарам.name = "KeyRaifQPS" Тогда
				Константы.СекретныйКлючСБПРайффайзен.Установить(ТекПарам.value);
			КонецЕсли;
			Если ТекПарам.name = "merchantIdRaifQPS" Тогда
				Константы.merchantIdСБПРайффайзен.Установить(ТекПарам.value);
			КонецЕсли;
			Если ТекПарам.name = "intervalRequestQPS" Тогда
				ЗначениеПараметра = Число(ТекПарам.value);
				Константы.ИнтервалОпросаСостоянияОплатыСБП.Установить(ЗначениеПараметра);
			КонецЕсли;
			Если ТекПарам.name = "usingQPS" Тогда
				Если Число(ТекПарам.value) = 1 Тогда
					Константы.ИспользоватьОплатуСБП.Установить(Истина);
				Иначе
					Константы.ИспользоватьОплатуСБП.Установить(Ложь);
				КонецеСли;	
			КонецЕсли;
			Если ТекПарам.name = "routeMapVersion" Тогда
				Если СокрЛП(ТекПарам.value) <> "" Тогда
					ТекВерсия = СокрЛП(Константы.ВерсияСтраницыМаршрутизации.Получить());
					Если ТекВерсия <> ТекПарам.value Тогда
						//@skip-check query-in-loop
						ВыполнитьОбмен_ПолучитьСодержимоеСтраницыМаршрутизации(ОбщееСоединениеHTTP, IDУзла);
					КонецЕсли;	
				КонецеСли;	
			КонецЕсли;
			Если ТекПарам.name = "useYandexRouteQueryAfterBuildingRouteOnMap" Тогда
				Если Число(ТекПарам.value) = 1 Тогда
					Константы.ЗапрашиватьЯндексМаршрутизациюПослеПостроенияМаршрута.Установить(Истина);
				Иначе
					Константы.ЗапрашиватьЯндексМаршрутизациюПослеПостроенияМаршрута.Установить(Ложь);
				КонецеСли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецФункции	

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс
Функция СформироватьСтрокуJSON(СтруктураJSON) Экспорт
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;		
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	//Попытка
		ЗаписатьJSON(ЗаписьJSON, СтруктураJSON, НастройкиСериализации);
	//Исключение
		
	//КонецПопытки;	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
КонецФункции

Функция СнятьРегистрациюСОбъектовЦУ(ОбщееСоединениеHTTP = "", МассивКодов, IDУзла, ТипОбъекта) Экспорт
	Если МассивКодов.Количество() <> 0 Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ID", IDУзла);
		СтруктураВызова.Вставить("typeMetadata", ТипОбъекта);
		СтруктураВызова.Вставить("numbers", МассивКодов);
		
		СтрокаЗапроса = СформироватьСтрокуJSON(СтруктураВызова);
		СтрокаОтвета = ВызватьФункциюHTTPСервиса(СтрокаЗапроса, "unregisterChanges", ОбщееСоединениеHTTP);
		ВозниклаОшибка = Ложь;
		ДанныеОтвета = ДанныеJSONВСтруктуру(СтрокаОтвета, , ВозниклаОшибка);
		Если ВозниклаОшибка Тогда
			Возврат Ложь;
		КонецеСли;			
		Если ДанныеОтвета.result И Не ДанныеОтвета.error Тогда
			Возврат Истина;
		ИначеЕсли ДанныеОтвета.error Тогда
			ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(ДанныеОтвета.errorText);
			Возврат Ложь;
		КонецеСли;	
	Иначе
		Возврат Истина;
	КонецеСли;			
КонецФункции

Функция ПолучитьIDУзла() Экспорт
	Возврат Константы.ИдентификаторМП.Получить();
КонецФункции	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция УдалитьРегистрацию_ДанныеЗаказаВодителя(МассивНомеров)
	Если Не ЗначениеЗаполнено(МассивНомеров) Тогда
		Возврат Истина;
	КонецеСли;	
	Зап = Новый запрос;
	Зап.Текст = "ВЫБРАТЬ
	            |	ДанныеЗаказаВодителя.Ссылка КАК Объект
	            |ИЗ
	            |	Документ.ДанныеЗаказаВодителя КАК ДанныеЗаказаВодителя
	            |ГДЕ
	            |	ДанныеЗаказаВодителя.Номер В(&МассивНомеров)";
	Зап.УстановитьПараметр("МассивНомеров", МассивНомеров);
	Выб = Зап.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
    	ПланыОбмена.УдалитьРегистрациюИзменений(Константы.УзелПланаОбмена.Получить(), Выб.Объект);
	КонецЦикла;	
	Возврат Истина;
конецФункции

Функция ДанныеJSONВСтруктуру(ДанныеJSON, ИменаСвойствСоЗначениямиДата = "", ВозниклаОшибка = Ложь)
	Чт = Новый ЧтениеJSON;
	Чт.УстановитьСтроку(ДанныеJSON);
	Попытка
		СтруктураДанных = ПрочитатьJSON(Чт, Ложь, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.Microsoft);
	Исключение
		ВозниклаОшибка = Истина;
		Ош = ОписаниеОшибки();
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(Ош + "-------" + ДанныеJSON);
	КонецПопытки;	
	Возврат СтруктураДанных;
КонецФункции

Функция ВызватьФункциюHTTPСервиса(СтрокаJSON, МетодHTTPСервиса, ОбщееСоединениеHTTP = "")
	ЗаголовокЗапроса = Новый Соответствие;
	ЗаголовокЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовокЗапроса.Вставить("Authorization", "55555");
	
	
	Если Константы.ТестоваяСреда.Получить() Тогда
		СтрокаРесурса = "UT/hs/MARouteExchange/V1/" + МетодHTTPСервиса; 
	Иначе
		СтрокаРесурса = "logist/hs/MARouteExchange/V1/" + МетодHTTPСервиса; 
	КонецеСли;	
	
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаРесурса, ЗаголовокЗапроса);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	
	
	ЗапросПрошел = Ложь;
	
	Если Константы.ТестоваяСреда.Получить() Тогда
		Если ОбщееСоединениеHTTP = "" Тогда
			HTTPСоединение = Новый HTTPСоединение("192.168.1.107");
		Иначе
			HTTPСоединение = ОбщееСоединениеHTTP;
		конецЕсли;	
		
		Попытка
			Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			Если Результат.КодСостояния = 200 Тогда
				ОбщееСоединениеHTTP = HTTPСоединение;
				ЗапросПрошел = Истина;
			КонецЕсли;				
		исключение
			Ошибка = ОписаниеОшибки();
			ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(Ошибка);
		КонецПопытки;			
	Иначе
		Если ОбщееСоединениеHTTP = "" Тогда
			Зап = Новый Запрос;
			Зап.Текст = "ВЫБРАТЬ
			|	МассивАдресовДляОбменаСМП.Адрес КАК Адрес
			|ИЗ
			|	РегистрСведений.АдресаОбменаСЦУ КАК МассивАдресовДляОбменаСМП
			|ГДЕ
			|	МассивАдресовДляОбменаСМП.Терминал = &Терминал
			|
			|УПОРЯДОЧИТЬ ПО
			|	МассивАдресовДляОбменаСМП.Приоритет";
			Зап.УстановитьПараметр("Терминал", ПараметрыСеанса.Регион);
			ТабHTTPСоединений = Зап.Выполнить().Выгрузить();
			
			Для Каждого Тек Из ТабHTTPСоединений Цикл
				HTTPСоединение = Новый HTTPСоединение(Тек.Адрес,,,,,10);
				Попытка
					Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
					Если Результат.КодСостояния = 200 Тогда
						ЗапросПрошел = Истина;
						ОбщееСоединениеHTTP = HTTPСоединение;	
						Прервать;
					КонецЕсли;	
				исключение
					Ошибка = ОписаниеОшибки() + ", метод " + МетодHTTPСервиса;
					ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(Ошибка);
				КонецПопытки;	
			КонецЦикла;
		Иначе
			HTTPСоединение = ОбщееСоединениеHTTP;
			
			Попытка
				Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
				Если Результат.КодСостояния = 200 Тогда
					ЗапросПрошел = Истина;
				КонецЕсли;	
			исключение
				Ошибка = ОписаниеОшибки() + ", метод " + МетодHTTPСервиса;
				ОбщегоНазначенияСервер.ЗаписатьОшибкуВЛог(Ошибка);
			КонецПопытки;	
			
		КонецЕсли;
	КонецеСли;
	
	если ЗапросПрошел Тогда
		ТекстОтвета = Результат.ПолучитьТелоКакСтроку("UTF-8");
	Иначе	
		ТекстОтвета = "";
	КонецеСли;	
	Возврат ТекстОтвета;
КонецФункции
#КонецОбласти